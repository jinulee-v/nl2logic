{"id": "enwn_validation_0", "nl": "You should not hurt someone without a good reason.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y) & -GoodRight(x,y)) -> -HasGoodRight(x,y))", "all x.((HasGoodRight(x) & Person(x)) -> -HasGoodRight(x))", "all x y.((HasGoodRight(x) & Person(y)) -> -HasGoodRight(y))", "all x.((Person(x) & -GoodRight(x)) -> -HasGoodRight(x))", "all x y.((Person(x) & Person(y) & -GoodRaison(x)) -> -HasGoodRight(x,y))", "(all x.((Person(x) & -GoodRight(x)) -> -HasGoodRight(x)))", "all x.((Person(x) & -HasGoodRight(x)) -> -HasGoodRight(x))", "-(HasGoodRight(x) & Person(x))", "all x.((IsIllWithoutGoodRight(x) & Person(y)) -> -IllWithoutGoodRight(x,y))", "all x y.((HasGoodRight(x) & Person(y)) -> -HasGoodRight(x,y))", "all x y.((Person(x) & Person(y) & HasGoodRight(x,y)) -> -HasGoodRight(x,y))", "all x.((HasGoodRight(x) & Person(y)) -> -HasGoodRight(y))", "exists x.(HasGoodRight(x) & -HasGoodRight(x))", "all x.((Hint(x,y) & Person(y) & GoodRight(y)) -> -Hint(x,y))", "all x y.((HasGoodRight(x,y) & Person(y)) -> -HasGoodRight(x,y))", "(all x.((Person(x) & HasGoodRight(x)) -> -Hint(x)))"]}
{"id": "enwn_validation_1", "nl": "If you do something for petty reasons, you aren't doing it for a good reason.", "fol": "", "prediction": ["all x.((DoesPetty(x) & -GoodRight(x)) -> -DoesPetty(x))", "all x.((DoesPettyForethoughts(x) & -GoodForethought(x)) -> -DoesPettyForethoughts(x))", "all x.((DoesPetty(x) & -Good(x)) -> -DoesPetty(x))", "all x.((Does(x,petty) & -GoodRight(x)) -> -Does(x,petty))", "all x.(DoesPetty(x) -> -GoodRight(x))", "all x y.((DoesPetty(x) & Petty(y)) -> -GoodRight(x))", "(all x.((DoesPetty(x) & -GoodRight(x)) -> -DoesPetty(x)))", "(all x.(Petty(x) -> -GoodRight(x)))", "all x.(DoesPettyForethoughts(x) -> -GoodForethought(x))", "all x.((DoesPetty(x) & -GoodRight(x)) -> -DoesPetty(x))", "all x.((DoingPetty(x) & -GoodRight(x)) -> -DoingPetty(x))", "all x.((DoesPettyForesight(x) & -GoodForethought(x)) -> -DoesPettyForesight(x))", "all x y.((DoesPetty(x) & Petty(y)) -> -GoodRight(x))", "all x y.((DoesPetty(x) & Good(y)) -> -DoesPetty(x,y))", "all x.(DoesPettyForms(x) -> -GoodForMeaning(x))", "all x.(PettyRights(x) -> -GoodRights(x))"]}
{"id": "enwn_validation_2", "nl": "Road rage is petty.", "fol": "", "prediction": ["all x.(RoadRage(x) -> Petty(x))", "all x.(RoadRain(x) -> Petty(x))", "(Petty(RoadRage)", "all x y.((RoadRage(x) & Petty(y)) -> Petty(x))", "all x.(RoadRage(x) -> Petty(x))", "all x y.((RoadRain(x) & Petty(y)) -> Petty(x))", "all x.(RoadRain(x) -> Petty(x))", "(Petty(RoadRage)", "All x y.((RoadRage(x) & Road(y)) -> Petty(x))", "all x.(RoadRage(x) -> Petty(x))", "all x.(RoadRain(x) -> Petty(x))", "all x.(RoadRage(x) -> Petty(x))", "all x.(RoadRain(x) -> Petty(x))", "all x.(RoadRange(x) -> Petty(x))", "All x.(RoadRage(x) -> Petty(x))", "exists x.(RoadRange(x) & Petty(x))"]}
{"id": "enwn_validation_3", "nl": "Jake cut Chris off in traffic, and that enraged Chris.", "fol": "", "prediction": ["all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y,z) & Enraged(y,x)))", "all x y.((Jake(x) & Chris(y)) -> (CutsOff(x,y) & Enraged(y)))", "(all x.((Jake(x) & Chris(x)) -> CutsOffInTraffic(x)) & enragedChris(x))", "(EnragedChris(Jake) & CutsOffInTraffic(Jake))", "((Jake(Jake) & Chris(Jake)) -> CutsOff(Jake,Cruise)) & enragedChris(Jake))", "(all x y.((Jake(x) & Chris(y)) -> CutsOff(x,y)))", "all x.((Jake(x) & Chris(x)) -> CutsOffInTraffic(x))", "(-(Jake(Jake) & Chris(Jake)) -> CutsOffInTraffic(Jake)) & enragedChris(Jake))", "(ScrewsOffChrisInTraffic(Jake) & EnragedChris(Jake))", "all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y,z) & Enrages(y,y)))", "all x y.((Jake(x) & Chris(y)) -> (CutsOff(x,y) & Enrages(x,y)))", "-((Jake(Jake) & Chris(Jake)) -> CutsOffInTraffic(Jake,Chris))", "all x.((Jake(x) & Chris(x)) -> (CutsOff(x,y) & Enraged(x,x)))", "all x y.((Jake(x) & Chris(y)) -> (CutsOffInTraffic(x,y) & Enrages(y,x)))", "all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y) & Enrages(y,z)))", "all x.((Jake(x) & Chris(x)) -> (CutsOff(x,y) & Enrages(x,x)))"]}
{"id": "enwn_validation_4", "nl": "Chris was so angry that he followed Jake to a stop light, got out of his car and punched Jake.", "fol": "", "prediction": ["all x y.((Chris(x) & Jake(y)) -> (FoundToStopLight(x,y) & GotOutOfCar(x,y) & Punched(x,y)))", "all x y z.((Chris(x) & Jake(y) & Car(z)) -> (FoundToStopLight(x,y) & GotOutOfCar(x,z) & Punched(x,y)))", "(Angry(Chris) & FollowedToStopLight(Chris) & GotOutOfCar(Chris) & Punched(Chris))", "all x.((Chris(x) & FollowedSakeToStopLight(x) & GotOutOfCar(x) & PunchedSake(x)) -> Angerful(x))", "Chris was so angry that he followed Jake to a stoplight, got out of his car and punched Jake.", "(Angry(Chris) & FollowedSakeToStopLight(Chris) & GotOutOfCar(Chris) & PunchedSake(Chris))", "Chris was so angry he followed Jake to a stoplight, got out of his car and punched Jake.", "all x.((Chris(x) & FollowedToStopLight(x) & GotOutOfCar(x) & PunchedJake(x)) -> Angerful(x))", "((Chris(Chris) & FollowedToStopLight(Chris) & GotOutOfCar(Chris) & Punched(Chris)))", "(Angering(Chris) & FollowedSakeToStopLight(Chris) & GotOutOfCar(Chris) & PunchedSake(Chris))", "all x y z.((Chris(x) & Jake(y) & Car(z)) -> (FollowedToStopLight(x,y) & GotOutOfCar(x,z) & Punched(x,y)))", "all x y.((Chris(x) & Jake(y)) -> (FoundToStopLight(x,y) & GotOutOfCar(x,y) & Punched(x,y)))", "all x.((Chris(x) & FollowedToStopLight(x,Jake) & GotOutOfCar(x,Jake)) -> Punched(x,Jake))", "Chris was so angry that he followed Jake to a stoplight, got out of his car and punched Jake.", "all x y.((Chris(x) & Jake(y) & FollowedToStopLight(x,y)) -> (Punched(x,y) & OutOfCar(x)))", "(Angry(Chris) & FollowedToStopLight(Chris) & GotOutOfCar(Chris) & Punched(Chris))"]}
{"id": "enwn_validation_5", "nl": "Road rage is anger over driving.", "fol": "", "prediction": ["all x.(RoadRage(x) -> AngerOverDriving(x))", "all x y.((RoadRage(x) & Driving(y)) -> AngerOverDrive(x,y))", "all x.(RoadRage(x) -> AngerOverDriven(x))", "all x.(RoadRain(x) -> AngerOverDriving(x))", "(all x.(RoadRage(x) -> AngerOverDriving(x)))", "all x y.((RoadRage(x) & Driving(y)) -> Anger(x,y))", "(RoadRage(Road) -> AngerOverDriven(Road))", "all x y.((RoadRain(x) & Driving(y)) -> AngerOverDrive(x,y))", "all x.(RoadRage(x) -> AngerOverDriving(x))", "all x.(RoadRain(x) -> AngerOverDriven(x))", "all x y.((RoadRage(x) & Driving(y)) -> AngerOverDriven(x,y))", "all x.(RoadRange(x) -> AngerOverDriven(x))", "all x y.((RoadRain(x) & Driving(y)) -> Anger(x,y))", "All x.(RoadRage(x) -> (AngryOverDriven(x) | AngerOverDriven(x)))", "all x.(RoadRage(x) -> AngerOverDriving(x))", "All x.(RoadRange(x) -> AngerOverDriven(x))"]}
{"id": "enwn_validation_6", "nl": "Chris punched Jake because he was angry at Jake cutting him off in traffic.", "fol": "", "prediction": ["all x y.((ChrisPunched(x) & Jake(y) & Anger(x,y)) -> CutsOff(x,y))", "all x y z.((Chris(x) & Jake(y) & Traffic(z) & CutsOff(x,y,z)) -> Punched(x,y))", "(AngryAt(ChrisJake) & CutsOff(ChrisJake))", "all x.((ChrisPunched(x) & Jake(x) & AngerfulAtCuttingOff(x,Jake)) -> Punched(x,Jake))", "all x y.((Chris(x) & Jake(y) & Anger(x,y)) -> Punched(x,y))", "Chris punched Jake because he was angryAtCuttingOffInTraffic(Chris,Jake))", "all x y.((ChrisPunched(x) & Jake(y) & AngerfulAt(x,y)) -> CutsOff(x,y))", "(AngryAtSavingJake(Chris) & CutsOffJakeInTraffic(Chris))", "(PunchedByChris(Chris) & Jake(Chris) & AngerfulAtCuttingOff(Chris,Jake,Traffic))", "-((ChrisPunched(Chris) & Jake(Jake) & Anger(Chris) & CutsOff(Jake)))", "(AngryAtSaving(Chris) & CutsOffInTraffic(Chris))", "all x y.((ChrisPunched(x) & Jake(y)) -> (AngryAtCuttingOff(x,y) | AngerAtCuttingOff(x,y)))", "Chris punched Jake because he was angryAtSlicingOffInTraffic(Chris)", "all x.((ChrisPunched(x) & JakeCuttingOff(x,Jake)) -> AngerfulAt(x,Jake))", "(AtJakeCuttingOff(Chris) & ChrisPunched(Chris))", "Chris punched Jake because he was angryAtCuttingOffInTraffic(Chris,Jake))"]}
{"id": "enwn_validation_7", "nl": "Chris punched Jake because of his road rage.", "fol": "", "prediction": ["all x y.((Chris(x) & Jake(y) & RoadRain(x)) -> Punched(x,y))", "Chris punched Jake because of RoadRainrage(Chris)", "(PunchedBy(Chris) & Jake(Chris) & RoadRain(Chris))", "all x y.((ChrisPunched(x) & Jake(y)) -> RoadRain(x,y))", "all x.((ChrisPunched(x) & Jake(x)) -> RoadRain(x))", "(Punched(Chris) & Jake(Chris) & RoadRain(Chris))", "-(PunchedBy(ChrisJake) & RoadRain(Chris))", "(PunchedByRain(Chris) & Jake(Chris))", "-(PunchedBy(Chris) & Jake(Jake) & RoadRain(Chris)))", "all x y.((ChrisPunched(x,y) & Jake(y)) -> RoadRain(x,y))", "all x y z.((Chris(x) & Jake(y) & RoadRain(z) & Punched(x,y,z)) -> Punched(x,y))", "Chris punched Jake aufgrund of RoadRainrage(Chris)", "Chris punched Jake because of RoadRainrage(Chris)", "Chris punched Jake because of RoadRainRain.", "(PunchedByRain(Chris) & Jake(Chris))", "Chris punched Jake because of roadrage."]}
{"id": "enwn_validation_8", "nl": "Chris punched Jake for a petty reason.", "fol": "", "prediction": ["all x y.((Chris(x) & Jake(y)) -> PunchedForPettyRun(x,y))", "(PettyRight(Chris) & Punched(Chris,Jake))", "all x.((ChrisPunched(x) & Jake(x)) -> PettyRun(x))", "(Petty(Chris) & Punched(Chris,Jake))", "Chris punched Jake for petty reason.", "Chris punched Jake for a petty reason.", "all x.((Chris(x) & Jake(y)) -> PunchedForPettyRaison(x,y))", "all x y.((Chris(x) & Jake(y)) -> PunchedForPettyRaison(x,y))", "all x y.((ChrisPunched(x) & Jake(y)) -> Petty(y))", "all x y.((Chris(x) & Jake(y) & PettyRun(x)) -> Punched(x,y))", "(Petty(Chris) & Punched(Chris,Jake))", "(PettyRun(Chris) & Punched(Chris,Jake))", "all x.(PettyRun(x) -> Punched(x,Jake))", "Chris punched Jake for petty reason.", "Chris punched Jake for PettyRights.", "(PettyRight(Chris) & Punched(Chris))"]}
{"id": "enwn_validation_9", "nl": "Chris punched Jake without a good reason.", "fol": "", "prediction": ["all x y.((Chris(x) & Jake(y)) -> PunchedWithoutGoodRight(x,y))", "(Punched(Chris,Jake) & -GoodRight(Chris))", "(PunchedWithoutGoodRight(Chris) & Jake(Chris))", "all x.((ChrisPunched(x) & Jake(y)) -> -GoodRight(x))", "Chris punched Jake without a good reason.", "(-GoodRight(Chris) & Punched(Chris,Jake))", "-(ChrisPunched(Chris,Jake) & -GoodRight(Chris,Jake))", "all x.((ChrisPunched(x,Jake) & -GoodRight(x)) -> Punched(x,Jake))", "Chris punched Jake -withoutGoodRight(Chris)", "all x y.((Chris(x) & Jake(y)) -> PunchedWithoutGoodRight(x,y))", "(PunchedWithoutGoodRight(Chris,Jake))", "Chris punched Jake without good reason.", "all x y.((Chris(x) & Jake(y) & Punched(x,y)) -> -GoodRight(x))", "Chris punched Jake without GoodRight(Chris)", "Chris punched Jake, -GoodRight(Chris)", "Chris punched Jake -withoutGoodRight(Chris)"]}
{"id": "enwn_validation_10", "nl": "Chris should not have punched Jake.", "fol": "", "prediction": ["all x.((Chris(x) & Jake(y)) -> -Punched(x,y))", "Chris should not have punchedJake.", "all x y.((Chris(x) & Jake(y)) -> -Punched(x,y))", "-Punched(Chris)", "-(Chris(Chris) & Jake(Jake))", "Chris shouldn't have punchedJake.", "-PunchedJake(Chris)", "Chris should not have punchedJake.", "(-Punched(Chris) & Jake(Chris))", "all x.((Chris(x) & Jake(y)) -> -Punched(x,y))", "Chris should not have punched Jake.", "(-PunchedChris(Chris))", "-(Chris(Chris) & Jake(Jake))", "all x.((Chris(x) & Jake(y)) -> -Punched(x,y))", "((Chris(Chris) & Jake(Jake)) -> -Punched(Chris))", "Chris should not have punchedJake."]}
{"id": "enwn_validation_11", "nl": "Stealing is taking something without the owner's permission.", "fol": "", "prediction": ["all x y.((Stealing(x) & Owner(y)) -> TakesWithoutPermission(x,y))", "all x.(Stealing(x) -> TakesWithoutOwnerPermission(x))", "all x y z.((Stealing(x) & Owner(y) & Product(z)) -> TakesWithoutPermission(x,y,z))", "all x y.((Stealing(x) & Owner(y)) -> TakesWithoutPermission(x,y))", "all x.(Stealing(x) -> TakesWithoutOwnerPermission(x))", "(Stealing) -> TakesWithoutOwnerPermission(stealing))", "all x.(Stealing(x) -> TakesWithoutOwnersPermission(x))", "all x.(Stealing(x) -> TakesWithoutOwnerPermission(x))", "all x y.((Stealing(x) & Owner(y)) -> TakesWithoutPermission(x,y))", "exists x.(Stolen(x) & Takes(x,y) & -OwnerPermission(y))", "all x y.((Stealing(x) & Owner(y)) -> TakesWithoutPermission(x,y))", "All x.(Stolen(x) -> TakesWithoutOwnerPermission(x))", "all x.(Stealing(x) -> TakesWithoutOwnersPermission(x))", "all x.(Stealing(x) -> TakesWithoutOwnerPermission(x))", "all x y.((Stealing(x) & Owner(y)) -> TakesWithoutPermission(x,y))", "all x y.((Stealing(x) & Owner(y)) -> Takes(x,y))"]}
{"id": "enwn_validation_12", "nl": "Caleb left Target with a pack of trading cards in his pocket.", "fol": "", "prediction": ["all x y.((Caleb(x) & Target(y)) -> LeftWithTradingCards(x,y))", "all x.((Caleb(x) & TradingCardPack(x)) -> LeftInPouch(x))", "Caleb left Target with a pack of tradingcards in his pocket.", "(LowersTarget(Caleb) & PackOfTradingCards(Caleb))", "all x y z.((Caleb(x) & Target(y) & TradingCards(z)) -> LeftWith(x,y,z))", "all x.((Caleb(x) & Target(x)) -> LeftWithTradingCards(x))", "(Location(Caleb,Target) & PackOfTradingCards(Caleb,Target))", "(LeavedTarget(Caleb,Target) & PackOfTradingCards(Caleb,Target))", "all x y.((Caleb(x) & Target(y)) -> LeftWithTradingCards(x,y))", "((Caleb) | PackOfTradingCards(Caleb)))", "Caleb left Target with a pack of tradingcards in his pocket.", "all x.((Caleb(x) & TradingCardsPack(x)) -> LeftInPouch(x))", "all x y z.((Caleb(x) & Target(y) & TradingCard(z)) -> LeftWith(x,y,z))", "Caleb left Target with a pack of tradingcards in his pocket.", "all x y.((Caleb(x) & Target(y)) -> LeftWithTradingCards(x,y))", "all x.((Caleb(x) & Target(x)) -> LeftWithTradingCards(x))"]}
{"id": "enwn_validation_13", "nl": "Caleb didn't pay for the pack.", "fol": "", "prediction": ["all x.(Caleb(x) -> -PaysForPack(x))", "(-PaysForPack(Caleb))", "Caleb didn'tpayForPack(Caleb)", "all x.((Caleb(x) & -PaysForPack(x)) -> -PaysForPack(x))", "(-PayedForPack(Caleb))", "-(Caleb(Caleb) & Pack(Caleb))", "((Caleb) & Pack(Caleb)) -> -PaysFor(Caleb,Pack))", "Caleb didn'tPayForPack(Caleb,Pack)", "all x.(Caleb(x) -> -PaysForPack(x))", "(-PaysForPack(Caleb))", "-(CalebPaysForPack(Caleb,Pack))", "-(Caleb(cal) & Pack(cal)))", "Caleb -PaidForPack(Caleb,Pack)", "all x.(Caleb(x) -> -PaysForPack(x))", "(-PaidForPack(Caleb,Pack))", "Caleb didn'tpayforPack(Caleb)"]}
{"id": "enwn_validation_14", "nl": "You only have permission to take merchandise from a store if you pay for it.", "fol": "", "prediction": ["all x y.((Store(x) & Store(y) & PaysFor(x,y)) -> TakesMerchandise(x,y))", "all x.((Store(x) & PaysForMerchandise(x)) -> PermissionToTakeMerchandise(x))", "all x y.((Store(x) & Store(y) & PaysFor(x,y)) -> PermissionToTakeMerchandise(x,y))", "all x y.((Store(x) & Store(y) & PaysForMerchandise(x,y)) -> PermissionToTakeMerchandise(x,y))", "all x y z.((Store(x) & Store(y) & Purchase(z) & TakesMerchandise(x,y)) -> PaysFor(x,z))", "all x.((Store(x) & PaysForMerchandise(x)) -> TakesMerchandise(x))", "exists x.(PersonToTakeMerchandise(x) & PayForMerchandise(x))", "all x y z.((Store(x) & Store(y) & Purchase(z) & Purchase(z)) -> TakesMerchandise(x,y,z))", "all x y.((Store(x) & Store(y) & PaysFor(x,y)) -> TakesMerchandise(x,y))", "all x y.((Store(x) & Store(y) & PaysForMerchandise(x,y)) -> PermissionToTakeMerchandise(x,y))", "all x.((Store(x) & PaysForMerchandise(x)) -> PermissionToTakeMerchandise(x))", "all x y z.((Store(x) & Purchase(y) & Merchandise(z) & PaysFor(x,z)) -> TakesFrom(x,y,z))", "all x y.((Machine(x) & Store(y) & PaysFor(x,y)) -> PermissionToTake(x,y))", "all x y.((Store(x) & Store(y) & PayFor(x,y)) -> TakesMerchandise(x,y))", "exists x.(PersonToTakeMerchandise(x) & PayForMerchandise(x))", "all x.((Store(x) & PaysForMerchandise(x)) -> HasPermissionToTakeMerchandise(x))"]}
{"id": "enwn_validation_15", "nl": "You should not steal.", "fol": "", "prediction": ["all x.((Stole(x) & -Stole(x)) -> -Stole(x))", "all x.((Fraud(x) & -Fraud(x)) -> -Fraud(x))", "all x.((You(x) & -Steal(x)) -> -Stole(x))", "all x.((Stole(x)) -> -Stole(x))", "-Steal(x)", "you should not steal.", "-Stole(x)", "all x.(Father(x) -> -Father(x))", "all x.((Fraud(x) & -Fraud(x)) -> -Fraud(x))", "all x.(Stole(x) -> -Stole(x))", "-Steal.", "-Stole(x)", "all x.(Steal(x) -> -HasToo(x))", "-(Steal(x))", "(-Steal)", "(-Steal)"]}
{"id": "enwn_validation_16", "nl": "Caleb took the cards from Target without paying for them.", "fol": "", "prediction": ["all x y.((Caleb(x) & Target(y)) -> TakesCards(x,y))", "Caleb took TargetCards(Caleb) & -PayedForCards(Caleb))", "(all x.(Caleb(x) -> TakesCards(x,Target)))", "(Caleb tookCardsFromTarget(Caleb) & -PayedFor(Caleb))", "all x y z.((Caleb(x) & TargetCard(y) & Card(z)) -> TakesWithoutPaying(x,y,z))", "all x.(Caleb(x) -> (TakesCardsFromTarget(x) & -PaysForCards(x)))", "(all x y.((Caleb(x) & Target(y)) -> TakesCards(x,y)))", "Caleb tookCardsFromTargetWithoutPaying(Caleb,Target)", "all x y.((Caleb(x) & Target(y)) -> TakesCards(x,y))", "Caleb took TargetCards(Caleb) & -PayedForCards(Caleb))", "(all x.(Caleb(x) -> TakesCards(x,Target)))", "Caleb took the cards from Target withoutpaying.", "all x.(Caleb(x) -> TakesCardsFromTarget(x))", "all x y.((Caleb(x) & Target(y)) -> TakesCardsWithoutPaying(x,y))", "Caleb took Target Cards withoutPayingFor(Caleb,Target))", "Caleb took the cards from Target withoutpaying."]}
{"id": "enwn_validation_17", "nl": "Caleb took the store's cards without the store's permission.", "fol": "", "prediction": ["all x y.((Store(x) & Caleb(y)) -> TakesCardsWithoutPermission(y,x))", "all x.(Caleb(x) -> TakesCardsWithoutStorePermission(x))", "Caleb took store's cards without permission.", "-(Caleb tookCards(Caleb,Store) & -StorePermission(Caleb,Store))", "(all x y.((Store(x) & Caleb(y)) -> TakesCards(y,x)))", "all x.((Caleb(x) & Store(y)) -> TakesCardsWithoutPermission(x,y))", "all x y.((Store(x) & Caleb(y)) -> TakesCardsWithoutPermission(y,x))", "all x y z.((Store(x) & Card(y) & Card(z)) -> TakesWithoutPermission(x,y,z))", "(all x.(Caleb(x) -> TakesCards(x)))", "-Caleb took store's cards without permission.", "Caleb took the store's cards without permission.", "(TakesCardsWithoutPermission(Caleb,Store))", "all x y.((Caleb(x) & Store(y)) -> TakesCardsWithoutPermission(x,y))", "Caleb took store's cards without permission.", "all x.(Caleb(x) -> TakesCardsWithoutPermission(x))", "all x y.((Store(x) & Caleb(y)) -> TakesCards(y,x))"]}
{"id": "enwn_validation_18", "nl": "Caleb stole the cards.", "fol": "", "prediction": ["all x.(Caleb(x) -> stolesCards(x))", "(StoleCards(Caleb))", "all x y.((Caleb(x) & Card(y)) -> Stolen(x,y))", "Caleb stolesCards(Caleb)", "all x.(Caleb(x) -> StolenCards(x))", "all x.(StoleCards(x) -> Caleb(x))", "all x.(CalebStoleCards(x) -> CardStolen(x))", "(StoleCards(Caleb))", "all x y.((Caleb(x) & Card(y)) -> Stolen(x,y))", "(StolenCards(Caleb)", "Caleb stolesCards.", "Caleb stolesCards(Caleb,Cards)", "-StoleCards(Caleb)", "Caleb stoles cards.", "(StoleCards(Caleb)", "(StolenCards(Caleb,Caleb))"]}
{"id": "enwn_validation_19", "nl": "Caleb should not have stolen the cards.", "fol": "", "prediction": ["all x.((Caleb(x) & -StolenCards(x)) -> -StolenCards(x))", "Caleb should not have stolen the cards.", "all x.((Caleb(x) & Card(y)) -> -Stolen(x,y))", "-StolenCards(Caleb)", "all x.(Caleb(x) -> -StolenCards(x))", "all x y.((Caleb(x) & Card(y)) -> -Stolen(x,y))", "-(StolenCards(Caleb))", "-ShouldStolenCards(Caleb)", "Caleb should not have stolen the cards.", "all x.((Caleb(x) & -StolenCards(x)) -> -StolenCards(x))", "(-StolenCards(Caleb))", "all x.(Caleb(x) -> -StolenCards(x))", "all x.((Caleb(x) & Card(y)) -> -Stolen(x,y))", "Caleb should not have stolen the cards.", "(-StolenCards(Caleb))", "Caleb should not have stolen the cards."]}
{"id": "enwn_validation_20", "nl": "Elias ran into Julia and made her drop all her books.", "fol": "", "prediction": ["all x y.((Elias(x) & Julia(y)) -> (RunsInto(x,y) & MadeSheDropBooks(y)))", "Elias ran into Julia and made her drop all her books.", "all x y z.((Elias(x) & Julia(y) & Book(z)) -> (RunsInto(x,y) & MakesDrop(y,z)))", "(RunsInto(Elias,Julia) & MadeSheDropBooks(Elias,Julia))", "(RunsInto(Elieas) & MadeJulieDropBooks(Elieas))", "All x.(Elias(x) -> (RunsInto(x,Julia) & MadeSheDropBooks(x,Julia)))", "all x y.((Elias(x) & Julia(y)) -> (RunsInto(x,y) & MakesSheDropBooks(y)))", "all x.(EliasRunsInto(x,Julia) -> MadeSheDropBooks(x))", "Elias ran into Julia and made her drop all her books.", "(RunsInto(Elias,Julias) & MadeSheDropBooks(Elias,Julia))", "all x y z.((Elias(x) & Julia(y) & Book(z)) -> (RunsInto(x,y) & MadeSheDrop(y,z)))", "Elias ran into Julia and made her drop all her books.", "all x y.((Elias(x) & Julia(y)) -> (RunsInto(x,y) & MadeSheDropBooks(y)))", "Elias ran into Julia and made her drop all her books.", "Elias ran into Julia and MadeSheDropBooks(e)", "Elias ran into Julia and made her drop all her books."]}
{"id": "enwn_validation_21", "nl": "If you drop something accidentally, you need to pick it up afterwards.", "fol": "", "prediction": ["all x.((DropsInaccidentally(x) & DropsInaccidentally(x)) -> NeedsToPickUpAfterward(x))", "all x.((DropsInaccidentally(x) & PicksUpAfterward(x)) -> DropsInaccidentally(x))", "(DropsInaccidentally(x) -> NeedsToPickUpAfterward(x))", "all x y.((Drops(x,y) & Accidentally(x)) -> NeedsToPickUp(x,y))", "all x y.((DropsInaccidentally(x) & DropsInaccidentally(x)) -> NeedsToPickUpAfterward(y))", "-(DropsInaccidentally(x) & PicksUpAfterward(x))", "all x.((Drops(x) & Accidentally(x)) -> NeedsToPickUp(x))", "(all x.((DropsInaccidentally(x) & DropsInaccidentally(x)) -> PicksUpAfterward(x)))", "all x.(DropsInaccidentally(x) -> NeedsToPickUpAfterward(x))", "all x y.((Drops(x) & Accidentally(x)) -> NeedsToPickUp(y))", "(DropsInaccidentally(x) -> PicksUpAfterward(x))", "all x.((DropsInaccidentally(x) & DropsInaccidentally(x)) -> NeedsToPickUpAfterward(x))", "all x y.((PickUp(x) & DropsInaccidentally(x)) -> NeedsTo(x,y))", "all x y.((DropsInaccidentally(x) & DropsInaccidentally(x)) -> PicksUpAfterward(y))", "all x.(DropsInaccidentally(x) -> PicksUpAfterward(x))", "all x.((DropsInaccidently(x) & DropsInnocently(x)) -> NeedsPickupAfterward(x))"]}
{"id": "enwn_validation_22", "nl": "If you caused an accident, you should help anyone affected by it.", "fol": "", "prediction": ["all x.(CausedAccident(x) -> HelpAnyAffectedBy(x))", "all x.((CausedAccident(x) & AffectedByAccident(x)) -> Help(x))", "all x y.((CausedAccident(x) & Person(y)) -> Help(x,y))", "all x y.((CausedAccident(x) & AffectedBy(y,x)) -> Help(x,y))", "all x y.((CausedAcadiation(x) & Person(y) & AffectedBy(y,x)) -> Help(x,y))", "all x.(CausedAccident(x) -> HelpAnyAffectedBy(x))", "all x.((CausedAccident(x) & AffectedBy(x,y)) -> Help(x,y))", "(CausedAccident(x) & ShouldHelpAnyone(x))", "all x.(CausedAcadiation(x) -> HelpAnyAffectedBy(x,y))", "all x y.((CausedAccount(x) & Person(y) & AffectedByAccount(y,x)) -> Help(x,y))", "all x y.((CausedAccident(x) & Person(y) & AffectedBy(y,x)) -> Help(x,y))", "all x y z.((CausedAccident(x) & Person(y) & AffectedBy(z)) -> ShouldHelp(x,y,z))", "all x.((CausedAcadiation(x) & AffectedByAccadiation(x)) -> Help(x))", "all x.((CausedAccident(x) & AffectedByAccident(x)) -> Help(x))", "all x.(CausedAccident(x) -> ShouldHelpAnyone(x))", "all x y.((CausedAccident(x) & Person(y) & AffectedBy(x,y)) -> Help(x,y))"]}
{"id": "enwn_validation_23", "nl": "Julia needs to pick up the books because Elias bumped into her.", "fol": "", "prediction": ["all x y.((Julie(x) & Elias(y)) -> NeedsToPickUpBooks(x,y))", "Julia needs to pick up the books because Elias bumped into her.", "(NeedsToPickUpBooks(Julia) & EliasBumpsInto(Elias))", "all x.((Julie(x) & Elias(x)) -> NeedsToPickUpBooks(x))", "(BumpsInto(Julias) & NeedsToPickUpBooks(Julia))", "all x y.((Julia(x) & Elias(y)) -> NeedsToPickUpBooks(x,y))", "all x y z.((Julie(x) & Elias(y) & Book(z)) -> NeedsToPickUp(x,y,z))", "-(BumpsInto(Julias,Julia) & NeedsToPickUpBooks(Julia,Julia)))", "all x.((Julia(x) & Elias(x)) -> NeedsToPickUpBooks(x))", "all x y.((Julie(x) & Elias(y)) -> NeedsToPickUpBooks(x,y))", "Julia NeedsToPickUpBooks(Julia)", "Julia needs to pick up the books because Elias bumped into her.", "(NeedsToPickUpBooks(Julia,Elie,Elie,Elie))", "(BumpsInto(Julias,Elie,Julia))", "Julia needs to pick up the books because Elias bumpedInto(Julia)", "-(BumpsInto(Julias,Elie,Julia))"]}
{"id": "enwn_validation_24", "nl": "Elias should help Julia pick up the books.", "fol": "", "prediction": ["Elias should help Julia pick up the books.", "all x y.((Elies(x) & Julia(y)) -> ShouldHelpPickUpBooks(x,y))", "all x.((Elias(x) & Julia(y)) -> ShouldHelpPickUpBooks(x,y))", "all x y.((Elias(x) & Julia(y)) -> ShouldHelpPickUpBooks(x,y))", "all x.((Elies(x) & Julia(y)) -> ShouldHelpPickUpBooks(x,y))", "Elias should help Julia pick up the books.", "All x.(Elias(x) -> ShouldHelpJuliaPickUpBooks(x))", "(HelpsJuliasPickUpBooks(Elieas) | HelpsJuliaPickUpBooks(Elieas)))", "All x.(Elies(x) -> ShouldHelpJuliaPickUpBooks(x))", "all x y.((Elies(x) & Julia(y)) -> ShouldHelpPickUpBooks(x,y))", "Elias should help Julia pick up books.", "all x y.((Elias(x) & Julia(y)) -> ShouldHelpPickUpBooks(x,y))", "Elias should help Julia pick up the books.", "Elias should help Julia PickUpBooks.", "Elias should help Julia pick up books.", "Elias should help Julia pick up the books."]}
{"id": "enwn_validation_25", "nl": "In the United States, it's impolite to not tip someone who serves you.", "fol": "", "prediction": ["all x.((UnitedStates(x) & -Tip(x)) -> Impolite(x))", "all x y.((UnitedStates(x) & Person(y)) -> (ImpoliteToTip(x,y) & Serves(y)))", "all x y.((UnitedStates(x) & Person(y) & Serves(y)) -> ImpoliteToTip(x,y))", "all x.((UnitedStates(x) & -Tipped(x)) -> Impolite(x))", "(ImpoliteToTip(ItalianServant(Italian) & InUnitedStates(Italian))", "all x y.((U.S.A.(Tip(x) & Serves(y)) -> Impolite(x,y))", "all x.((UnitedStates(x) & Serves(x)) -> ImpoliteToTip(x))", "all x.((U.S.A.Tip(x) & Serves(x)) -> Impolite(x))", "all x y.((UnitedState(x) & Person(y) & Serves(y,x)) -> ImpoliteToTip(x,y))", "all x y.((UnitedStates(x) & Person(y)) -> ImpoliteToTip(x,y))", "(ImpoliteToTipped(Italy) | Serves(Italy))", "(-TipServices(a) -> Impolite(a))", "(ImploliteInU.S.A. to NotTip(Immigrant(Immigrant))", "exists x.(UnitedStates(x) & ImpoliteToTip(x))", "all x.((UnitedStates(x) & Serves(x)) -> ImpoliteToTip(x,y))", "all x.((UnitedStates(x) & IgnoreTipped(x)) -> Serves(x))"]}
{"id": "enwn_validation_26", "nl": "A bartender serves drinks at a bar.", "fol": "", "prediction": ["all x y.((Bartender(x) & Bar(y)) -> ServesDrinksAt(x,y))", "all x y z.((Bartender(x) & Bar(y) & Drink(z)) -> ServesAt(x,y,z))", "all x y.((Bartender(x) & Bar(y)) -> ServesDrinksAt(x,y))", "exists x.(Bartender(x) & ServesDrinks(x,Bar))", "all x y z.((Bartender(x) & Bar(y) & Drink(z)) -> ServesAt(x,y,z))", "all x y.((Bartender(x) & Bar(y)) -> ServesDrinks(x,y))", "exists x.(Bartender(x) & ServesDrinksAtBar(x))", "all x y z.((Bartender(x) & Bar(y) & Drink(z)) -> ServesAt(x,y,z))", "all x y z.((Bartender(x) & Bar(y) & Bar(z)) -> ServesDrinksAt(x,y,z))", "all x y.((Bartender(x) & Bar(y)) -> ServesDrinksAt(x,y))", "exists x.(Bartender(x) & Bar(y) & ServesDrinks(x,y))", "exists x.(Bartender(x) & ServesDrinks(x,Bar))", "exists x.(Bartender(x) & ServesDrinksAtBar(x))", "all x y.((Bartender(x) & Bar(y)) -> ServesDrinks(x,y))", "all x y z.((Bartender(x) & Bar(y) & Drink(z)) -> ServesAt(x,y,z))", "all x y.((Bartender(x) & Bar(y)) -> ServesDrinksAt(x,y))"]}
{"id": "enwn_validation_27", "nl": "Ellie ordered a drink at a bar called the Red Pony.", "fol": "", "prediction": ["all x y.((Ellie(x) & Bar(y)) -> OrderedDrink(x,y))", "all x y z.((Ellie(x) & Bar(y) & RedPony(z)) -> OrderedDrink(x,y,z))", "Ellie orderedDrinkAtRedPony(Ellie)", "all x.((Ellie(x) & Bar(x) & RedPony(x)) -> OrderedDrink(x))", "(OrdersDrink(Ellie,RedPony) & AtBar(Ellie,Pony))", "Ellie orderedDrinkAtBar(Ellie,RedPony)", "all x y.((Ellie(x) & Bar(y)) -> OrderedDrinkAt(x,y))", "Ellie ordereddDrinkAtRedPony(Ellie)", "Ellie aspired to a drink at a bar called RedPony.", "(OrdersDrink(Ellie,RedPony) | OrdersDrink(Ellie,RedPony)))", "all x y.((Ellie(x) & Bar(y) & RedPony(y)) -> OrderedDrink(x,y))", "all x y z.((Ellie(x) & Bar(y) & RedPony(z)) -> OrderedDrink(x,y,z))", "(OrdersDrink(Ellie) & RedPonyBar(Ellie))", "(OrdersDrinkAtBar(Ellie,RedPony))", "Ellie orderedDrinkAtRedPony(Ellie)", "Ellie orderedddrinkAtRedPony(Ellie)"]}
{"id": "enwn_validation_28", "nl": "The Red Pony is in Albuquerque, New Mexico.", "fol": "", "prediction": ["All x.(RedPony(x) -> Albuquerque(x))", "The Red Pony is in Albuquerque, New Mexico.", "(RedPony(red) & Albuquerque(red) & NewMexico(red))", "RedPony(x) -> (InAlbuquerque(x) & NewMexico(x)))", "The RedPony(x) is inAlbuquerque(x) & NewMexico(x))", "RedPony(x) & Albuquerque(x) & NewMexico(x))", "(RedPony(RosePony) & Albuquerque(Pony) & NewMexico(Pony))", "The Red Pony is in Albuquerque,NewMexico.", "The RedPony(RosePony) is in Albuquerque,NewMexico.", "All x.(RedPony(x) -> Albuquerque(x))", "(RedPony(red) & Albuquerque(red))", "RedPony(RosePony) & Albuquerque(Pony,NewMexico)", "All x.(RedPony(x) -> (InAlbuquerque(x) | InNewMexico(x)))", "All x.(RedPony(x) -> Albuquerque(x))", "The Red Pony is in Albuquerque, New Mexico.", "RedPony(x) -> (Albuquerque(x) | NewMexico(x)))"]}
{"id": "enwn_validation_29", "nl": "New Mexico is a state in the United States.", "fol": "", "prediction": ["all x.(NewMexico(x) -> StateInUnitedStates(x))", "NewMexico(NM) -> StateInUnitedStates(NM))", "(UnitedState(NewMexico) & LocatedIn(NewMexico))", "(State(NewMexico) & InUnitedStates(NewMexico))", "all x.((NewMexico(x) & StateInUnitedStates(x)) -> StateInUnitedStates(x))", "NewMexico(NM) -> (UnitedState(NM) & InState(NM)))", "all x.(NewMexico(x) -> StateInUnitedStates(x))", "NewMexico.eu(NewMexico) -> StateInUnitedStates(NewMexico))", "all x y.((NewMexico(x) & UnitedState(y)) -> StateIn(x,y))", "(UnitedState(NewMexico) & State(NewMexico))", "all x.(NewMexico(x) -> (UnitedState(x) & In(x,US)))", "(State(NewMexico) & InUnitedStates(NewMexico))", "all x.(NewMexico(x) -> StateInUnitedStates(x))", "NewMexico (State(NewMexico) & InUnitedStates(NewMexico))", "All x.(NewMexico(x) -> (StateInUnitedStates(x) & In(x,UnitedStates)))", "All x.(NewMexico(x) -> (UnitedState(x) & In(x,UnitedStates)))"]}
{"id": "enwn_validation_30", "nl": "You should not do impolite things.", "fol": "", "prediction": ["all x.(ImpoliteThing(x) -> -Do(x,y))", "all x.((DoImpoliteThings(x) & -DoImpoliteThings(x)) -> -DoImpoliteThings(x))", "-ImpoliteThings(x)", "all x.(ImploliteThing(x) -> -Do(x,ImpoliteThings))", "all x.((DoImpoliteThings(x)) -> -DoImpoliteThings(x))", "-(ImpoliteThings(x) & Do(x)))", "all x.(ImpoliteThings(x) -> -Do(x,y))", "-ImpoliteThings(x)", "(ImpossibleThing(x) -> -DoImpoliteThings(x))", "all x.((ImploliteThing(x) & -ImpoliteThing(x)) -> -Do(x,y))", "-(DoImpoliteThings(x))", "all x.(ImpoliteTreatment(x) -> -Do(x,ImpoliteTreatment))", "all x.((DoImpoliteThings(x)) -> -DoImpoliteThings(x))", "-ImpoliteThings(x)", "all x.(ImploliteThing(x) -> -Do(x))", "(-ImploliteThings(x))"]}
{"id": "enwn_validation_31", "nl": "In the United States, it's impolite to not tip bartenders who serve you drinks at a bar.", "fol": "", "prediction": ["all x y.((UnitedStates(x) & Bartender(y) & ServesDrinksAt(y,x)) -> ImpoliteToTip(x,y))", "all x.((UnitedStates(x) & Bartender(y) & ServesDrinksAtBar(y)) -> ImpoliteToTip(x,y))", "all x y.((Bartender(x) & Bartender(y) & ServesDrinks(x,y)) -> ImpoliteToTip(x,y))", "(ImpoliteToTipBartenders(i) & ServesDrinksAtBar(i))", "(-TipBartender(x) & ServesDrinksAtBar(x))", "all x y.((UnitedStatesBar(x) & Bartender(y) & ServesDrinksAt(y,x)) -> ImpoliteToTip(x,y))", "all x y z.((UnitedStates(x) & Bartender(y) & Bar(z) & ServesDrinks(y,z)) -> ImpoliteToTip(x,y,z))", "all x y.((Bartender(x) & Bar(y) & ServesDrinks(x,y)) -> ImpoliteToTip(x,y))", "all x.((Bartender(x) & ServesDrinksAtBar(x)) -> ImpoliteToTip(x))", "(ImpoliteToTipBartenders(It'sInU.S.A.(Bartender(I) & ServesDrinksAt(Imperial(Imperial(Imperial)))", "all x.((UnitedStates(x) & Bartender(y) & ServesDrinksAtBar(y)) -> ImpoliteToTip(x,y))", "(-TipBartender(s) & ServesDrinksAtBar(s))", "all x.((UnitedStates(x) & Bartender(x) & ServesDrinksAtBar(x)) -> ImpoliteToNotTip(x))", "all x y.((UnitedStates(x) & Bartender(y) & ServesDrinksAt(y,x)) -> ImpoliteToTip(x,y))", "all x.((UnitedStates(x) & Bartender(y) & ServesDrinks(y,x)) -> ImpoliteToTip(x,y))", "all x.((Bartender(x) & ServesDrinksAtBar(x)) -> ImpoliteToTip(x))"]}
{"id": "enwn_validation_32", "nl": "Ellie ordered a drink from a bartender at the Red Pony.", "fol": "", "prediction": ["all x y z.((Ellie(x) & Bartender(y) & RedPony(z)) -> OrderedDrink(x,y,z))", "all x y.((Ellie(x) & Bartender(y)) -> OrderedDrink(x,y))", "Ellie orderedDrinkFromBartenderAtRedPony(Ellie)", "(OrdersDrink(Ellie,Bartender) & RedPony(Ellie))", "all x y.((Ellie(x) & Bartender(y) & RedPony(x)) -> OrderedDrink(x,y))", "(OrdersDrinkFromBartender(Ellie,RedPony) & AtBartender(Ellie,RedPony))", "all x y z.((Ellie(x) & Bartender(y) & RedPony(z)) -> OrderedDrink(x,y,z))", "Ellie orderedDrink(Ellie,RedPony)", "all x.(Ellie(x) -> OrderedDrinkFromBartender(x))", "Ellie aspired to be a bartender at RedPony.", "Ellie orderedDrinkFromBartenderAtRedPony(Ellie)", "(OrdersDrink(Ellie,Battender,RedPony))", "Ellie orderedddrinkfromBartenderAtRedPony(Ellie,Stock)", "(OrdersDrinkFromBartender(Ellie,RedPony) & AtBar(Ellie,RedPony))", "all x y.((Ellie(x) & Bartender(y) & RedPony(z)) -> OrderedDrink(x,y,z))", "all x y z.((Ellie(x) & Bartender(y) & RedPony(z)) -> OrderedDrinkFrom(x,y,z))"]}
{"id": "enwn_validation_33", "nl": "The Red Pony is in the United States.", "fol": "", "prediction": ["All x.(RedPony(x) -> InUnitedStates(x))", "(RedPony(red) & InUnitedStates(red))", "The RedPony(x) is in(x,UnitedStates))", "The Red Pony is in the United States.", "RedPony(x) -> InUnitedStates(x))", "Die RedPony(p) & InU.S.A.(Pony(p) & InU.S.A.(p) & InU.S.A.(p)))", "The RedPony(x) is inTheUnitedStates(x))", "The RedPony(x) exists y.(UnitedStates(y) & In(x,y)))", "All x.(RedPony(x) -> InUnitedStates(x))", "(RedPony(red) & InUnitedStates(red))", "RedPony(x) -> InUnitedStates(x))", "(RedPony(red) & InU.S.A.(redPony)))", "RedPony(x) -> InUnitedStates(x))", "(RedPony(p) & UnitedStates(p))", "The Red Pony is in the United States.", "All x.(RedPony(x) -> InUnitedStates(x))"]}
{"id": "enwn_validation_34", "nl": "Ellie ordered a drink from a bartender in the United States.", "fol": "", "prediction": ["all x y z.((Ellie(x) & Bartender(y) & Bartender(z)) -> OrderedDrink(x,y,z))", "all x y.((Ellie(x) & Bartender(y)) -> OrderedDrink(x,y))", "Ellie orderedDrinkFromBartenderInUnitedStates(Ellie)", "(OrdersDrink(Ellie,Bartender) & InU.S.A.(Ellie,Bartender)))", "all x y z.((Ellie(x) & Bartender(y) & Drink(z)) -> OrderedFrom(x,y,z))", "(OrdersDrink(Ellie,USA) -> Bartender(Ellie,USA))", "Ellie orderedDrinkFromBartenderInU.S.A.", "all x.(Ellie(x) -> OrderedDrinkFromBartender(x))", "all x y.((Ellie(x) & Bartender(y)) -> OrderedDrinkFrom(x,y))", "(OrdersDrinkFromBartender(Ellie,USA))", "Ellie aspired to be a bartender in the United States.", "all x y z.((Ellie(x) & Bartender(y) & UnitedStates(z)) -> OrderedDrink(x,y,z))", "Ellie orderedddrinkfromBartenderInU.S.A.", "Ellie orderedDrink(Ellie,USA)", "(OrdersDrinkFromBartender(Ellie,UnitedStates))", "all x y.((Ellie(x) & Bartender(y)) -> OrderedDrinkFrom(x,y))"]}
{"id": "enwn_validation_35", "nl": "It would be impolite for Ellie to not tip the bartender.", "fol": "", "prediction": ["all x.((Ellie(x) & -TippedBartender(x)) -> Impolite(x))", "Ellie would be impolite to notTipBartender(Ellie)", "all x.((Elliot(x) & -TippedBartender(x)) -> Impolite(x))", "-TipBartender(Ellie)", "(Impossible(Ellie) -> -TipBartender(Ellie))", "(ImpoliteForBartender(Ellie) & -TippedBartender(Ellie))", "-TippedBartender(Ellie)", "all x.((Ellie(x) & -TippedBartender(x)) -> Impolite(x))", "EspoliteForEllieToNotTippedBartender(eliot)", "all x.(ImpoliteForEllieToNotTipBartender(x) -> -TipBartender(x))", "Ellie & Bartender(e) & -Tipped(e))", "IllegalForEllieToTipBartender(Ellie,TipBartender,Elex)", "All x.(Impolite(x) -> (Ellie & Bartender(x) & -Tipped(x)))", "-TipBartender(Ellie)", "(Impossible(Ellie) -> -TipBartender(Ellie))", "all x.((Ellie(x) & -TippedBartender(x)) -> Impolite(x))"]}
{"id": "enwn_validation_36", "nl": "Ellie should tip the bartender.", "fol": "", "prediction": ["all x y.((Bartender(x) & Ellie(y)) -> ShouldTip(y,x))", "all x.(TippedBaby(x) -> Ellie(x))", "Ellie shouldTipBartender(ellie)", "(TippedBaby(Ellie) -> ShouldTippedBartender(Ellie))", "Ellie shouldTippedBartender(ellie)", "all x y.((Bartender(x) & Ellie(y)) -> ShouldTipped(y,x))", "Ellie shouldTipBartender(ellie,eli)", "all x.(Tip(x) -> Bartender(x))", "(TipBartender(Ellie))", "all x.(TippedBaby(x) -> Ellie(x))", "all x y.((Bartender(x) & Bartender(y)) -> ShouldTip(x,y))", "Ellie shouldTippedBartender(ellie,e)", "Ellie shouldTipBartender(ellie,e)", "all x.(TippedBatender(x) -> Ellie(x))", "all x y.((Bartender(x) & Ellie(y)) -> ShouldTip(y,x))", "Ellie shouldTipBartender(Ellie,Bartender)"]}
{"id": "enwn_validation_37", "nl": "You should pay back your debts.", "fol": "", "prediction": ["all x.(PayBackDebts(x) -> ShouldBe(x))", "all x.(PayBackDebts(x) -> ShouldPayBackDebts(x))", "all x.((Debt(x) & ShouldPay(x,y)) -> PayBack(x,y))", "all x.(Debt(x) -> PayBack(x))", "all x y.((Debt(x) & Debt(y)) -> PayBack(x,y))", "all x.(PayBackDebts(x) -> ShouldBeReceived(x))", "all x.((Debt(x) & PayBack(x)) -> ShouldPay(x,y))", "-PayBackDebts(x)", "all x y.((Debt(x) & Debt(y)) -> ShouldPayBack(x,y))", "all x.(PayBackDebts(x) -> ShouldPayBackDebts(x))", "all x.(Debt(x) -> PayBack(x))", "all x y.((Debts(x) & Debt(y)) -> PayBack(x,y))", "all x y.((Debt(x) & Debt(y)) -> PayBack(x,y))", "All x.(Debt(x) -> ShouldPayBack(x))", "all x y.((Debt(x) & Debt(y)) -> ShouldPayBack(x,y))", "All x.(PayBackDebts(x) -> ShouldBeReceived(x))"]}
{"id": "enwn_validation_38", "nl": "Fred borrowed $100 from Alyssa to buy the ski lift ticket.", "fol": "", "prediction": ["all x y.((Fred(x) & Alyssa(y)) -> BorrowedSixtySix(x,y))", "all x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> BorrowedSince(x,y,z))", "(BorrowedSpension(Fred,100) & Alyssa(Fred,100))", "Fred BorrowedSpensionFromAlyssaToBuySkiLiftTicket(Fred,100)", "Fred borrowed $100 from Alyssa to buy skiliftticket.", "all x.((Fred(x) & Alyssa(x)) -> BorrowedSpension(x,100))", "(BorrowedFromAlyssa(Fred,100) & BuysSkiLiftTicket(Fred,100))", "(BorrowedSpension(Fred,100) & AlyssaBorrowedSkiLiftTicket(Fred,100))", "Fred borrowedsSpensionFromAlyssaToBuySkiLiftTicket(Fred,100)", "all x y.((Fred(x) & Alyssa(y)) -> BorrowedStick(x,y))", "(SkiLiftTicket(Fred,100) & BorrowedFromAlyssa(Fred,100))", "Fred borrowed $100 from Alyssa to buy skiliftTicket(Fred,SkiLift,SkiLift)", "all x.((Fred(x) & Alyssa(y)) -> BorrowedSixtySpends(x,y))", "(BorrowedSpension(Fred,100) & AlyssaBuysSkiLiftTicket(Fred,100))", "All x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> BorrowedStanley(x,y,z))", "All x y.((Fred(x) & Alyssa(y)) -> BorrowedSpension(x,y))"]}
{"id": "enwn_validation_39", "nl": "You remind someone to do something when you want them to do it but they haven't.", "fol": "", "prediction": ["all x y.((Reminds(x,y) & Person(y) & WantsToDo(y,x) & -WantToDo(y,x)) -> Reminds(x,y))", "all x y.((Remind(x,y) & Person(y) & WantsToDo(y,x) & -WantToDo(y,x)) -> Reminds(x,y))", "all x y z.((Remind(x,y) & Person(z) & WantsToDo(x,z) & -WantToDo(x,z)) -> Reminds(x,z))", "all x.((Reminds(x,y) & Person(y) & WantsToDo(y,x) & -WantToDo(y,x)) -> Reminds(x,y))", "exists x.(Reminds(x,y) & Person(y) & WantsToDo(x,y) & -WantsToDo(y,x))", "(all x y.((Person(x) & WantsToDo(x,y) & -WantToDo(x,y)) -> Reminds(x,y))", "all x y.((Reminds(x,y) & Person(y) & WantsToDo(x,y) & -WantToDo(y,x)) -> -Reminds(x,y))", "all x y z.((Reminds(x,y) & Person(z) & WantsToDo(x,z) & -WantToDo(z,x)) -> Reminds(x,z))", "((Reminds(x) & WantsToDo(x) & -WantToDo(x)))", "exists x.(Reminds(x,y) & ((WantToDo(x,y) & -WantToDo(x,y)) | -WantToDo(x,y))))", "exists x.(Reminds(x,y) & Person(y) & WantsToDo(x,y) & -WantToDo(y,x))", "all x y.((Remind(x,y) & Person(y) & WantsToDo(x,y) & -WantToDo(y,x)) -> Reminds(x,y))", "exists x.(RemindsToDo(x,y) & (WantToDo(x,y) & -WantToDo(x,y)))", "all x y z.((Remind(x,y) & Person(z) & WantsToDo(x,z) & -WantToDo(z,x)) -> Reminds(x,z))", "all x y.((Reminds(x,y) & Person(y) & WantsToDo(y,x) & -WantsToDo(y,x)) -> -Reminds(x,y))", "all x y.((Renforces(x,y) & Person(y) & WantsToDo(y,x) & -WantToDo(y,x)) -> NotReminds(y,x))"]}
{"id": "enwn_validation_40", "nl": "Alyssa messaged Fred to remind him to pay her back for the ski lift ticket.", "fol": "", "prediction": ["all x y.((Alyssa(x) & Fred(y)) -> (Messaged(x,y) & Reminds(x,y)))", "all x.((Alyssa(x) & Fred(y)) -> RemindsToPayForSkiLift(x,y))", "Alyssa messaged Fred to remind him to pay back for skiliftticket.", "(Messaged(Alyssa) & Fred (Fred) & Reminds(Alyssa) & PaysBackSkiLiftTicket(Alyssa)))", "(Messaged(Alyssa,Fred) & RemindsFredToPayForSkiLiftTicket(Alyssa,Fred))", "(MessagedFred(Alyssa) & RemindsFredToPayForSkiLift(Alyssa))", "all x y.((Alyssa(x) & Fred(y)) -> RemindsToPayForSkiLift(x,y))", "Alyssa MessagedFredToRemindFredToPayForSkiLiftTicket(Alyssa)", "All x.((Alyssa(x) & Fred(x)) -> RemindsToPayForSkiLiftTicket(x,Alyssa))", "Alyssa messaged Fred to remind him to pay back for the skiliftticket.", "All x.(MessagedAlyssa(x) -> RemindsFredToPayForSkiLiftTicket(x))", "Alyssa messaged Fred to remind him to pay her back for the skiliftticket.", "All x.(MessagedFred(x) -> RemindsFredToPayForSkiLiftTicket(x))", "all x y.((Alyssa(x) & Fred(y)) -> (Messaged(x,y) & Reminds(x,y)))", "all x y.((Alyssa(x) & Fred(y)) -> RemindsToPayForSkiLiftTicket(x,y))", "Alyssa messaged Fred to remind him to pay back the skiliftticket."]}
{"id": "enwn_validation_41", "nl": "If you borrow something from someone and haven't given it back, you owe it to them.", "fol": "", "prediction": ["all x y.((Borrows(x,y) & Borrows(x,y) & -GivenBack(x,y)) -> OwnTo(x,y))", "all x.((Borrows(x,y) & Borrows(x,y) & -GivenBack(x,y)) -> OwnTo(x,y))", "all x y.((Borrows(x,y) & Borrows(x,y) & -GivenBack(x)) -> OwnTo(x,y))", "all x y.((Borrows(x,y) & Person(y) & -GivenBack(x,y)) -> Owns(x,y))", "all x y.((BorrowsFrom(x,y) & BorrowsFrom(x,y) & -GivenBack(x,y)) -> OwnTo(x,y))", "all x y z.((Borrows(x,y) & Person(z) & -GivenBack(x,z)) -> IsOwnTo(x,z))", "all x.((BorrowsFrom(x,y) & -GivenBack(x,y)) -> OwnTo(x,y))", "all x.((Borrows(x) & -GivenBack(x)) -> OwnTo(x,y))", "all x y z.((Borrows(x,y) & Person(z) & Has(x,z)) -> Owns(x,z))", "(all x.((BorrowsFrom(x) & -GiveBack(x)) -> OwnTo(x,y)))", "all x y z.((Borrows(x,y) & Person(z) & Has(x,z) & -GivenBack(x,z)) -> Owns(x,z))", "all x y.((Borrows(x,y) & BorrowsFrom(x,y) & -GivenBack(x,y)) -> OwnTo(x,y))", "all x.((Borrows(x,y) & Borrows(x,y) & -GivenBack(x,y)) -> OwesTo(x,y))", "all x.((BorrowsFrom(x,y) & -GiveBack(x)) -> OweTo(x,y))", "all x.((Borrows(x) & -GiveBack(x)) -> OwnTo(x,y))", "exists x.(BorrowsFrom(x,y) & -GivenBack(x,y))"]}
{"id": "enwn_validation_42", "nl": "Fred hasn't paid Alyssa back for the ski lift ticket yet.", "fol": "", "prediction": ["all x y.((Fred(x) & Alyssa(y)) -> -PayedBack(x,y))", "(-PayedAlyssa(Fred) & SkiLiftTicket(Alyssa))", "(-PaidBack(Fred,Alyssa) & SkiLiftTicket(Fred))", "(Fred hasn't PaidAlyssaBack(Fred) & SkiLiftTicket(Alyssa))", "-(Fred(Fred) & Alyssa(Alyssa))", "Fred hasn't paid Alyssa back for the skiliftTicket(Fred,SkiLift)", "all x.(Fred(x) -> -PayedAlyssaForSkiLiftTicket(x))", "Alyssa hasn't paid Fred for the skiliftticket yet.", "all x y.((Fred(x) & Alyssa(y) & SkiLiftTicket(y)) -> -PayedBack(x,y))", "(Fred hasn't Paid(Fred,Alyssa) & ForSkiLiftTicket(Fred,Alyssa))", "(Fred hasn't PaidAlyssa(Fred) & ForSkiLiftTicket(Fred))", "Fred hasn't paid Alyssa back for the skiliftticket.", "Alyssa hasn't paid Fred's skiliftTicket(Fred)", "-(Fred(Fred) & Alyssa(Alyssa))", "Fred hasn't paid Alyssa back for the skiliftTicket(f)", "Alyssa hasn't paid Fred for the skiliftticket."]}
{"id": "enwn_validation_43", "nl": "Fred borrowed $100 from Alyssa and hasn't paid it back yet.", "fol": "", "prediction": ["((Fred(Fred) & Alyssa(Alyssa)) -> BorrowedSince(Fred,100)) & -PayedBack(Fred,100))", "(BorrowedSpension(Fred,100) & -PayedBack(Fred,100))", "all x y.((Fred(x) & Alyssa(y)) -> (BorrowedStock(x,y) & -PayedBack(x,y)))", "(BorrowedFrom(Fred,100) & -PayedBack(Fred,100))", "Alyssa BorrowedSpension(Fred,100) & -PayedBack(Fred,100))", "all x y z.((Fred(x) & Alyssa(y) & $100(z)) -> (BorrowedFrom(x,y,z) & -PayedBack(x,y)))", "((Fred(Fred) & Alyssa(Fred)) -> BorrowedSince(Fred,100)) & -PayedBack(Fred,100))", "All x.((Fred(x) & Alyssa(y)) -> (BorrowedSince(x,y) & -PayedBack(x,y)))", "-(FredBorrowedStanley(Fred,100) & Alyssa(Fred,100))", "Fred borrowed $100 from Alyssa (no-payback))", "all x y.((Fred(x) & Alyssa(y)) -> (BorrowedSince(x,y) & -PayedBack(x,y)))", "(-(Fred(Fred) & Alyssa(Alyssa)))", "All x.(Fred(x) -> (BorrowedStorm(x,100) & -PayedBack(x,100)))", "(-paidBack(Fred,100))", "(BorrowedSpension(Fred,100) & -PayedBack(Fred,100))", "all x y.((Fred(x) & Alyssa(y)) -> (BorrowedSpension(x,y) & -PayedBack(x,y)))"]}
{"id": "enwn_validation_44", "nl": "Fred owes Alyssa $100.", "fol": "", "prediction": ["((Fred(Fred) & Alyssa(Alyssa)) -> owes100(Fred,Alyssa)))", "all x y.((Fred(x) & Alyssa(y)) -> owes100(x,y))", "All x.(Fred(x) -> owesAlyssa(x,100))", "Alyssa owes Fred $100.", "(Dowes(Fred,Alyssa) & $100(Fred))", "All x.((Fred(x) & Alyssa(x)) -> owes100(x))", "(All x.(Fred(x) -> owesAlyssa(x,100)))", "Alyssa (Alyssa) owes100(Fred)", "All x.(Fred(x) -> owesAlyssa100(x))", "Fred owes Alyssa $100.", "((Fred(Fred) & Alyssa(Alyssa)) -> owesSince(Fred,100))", "all x y.((Fred(x) & Alyssa(y)) -> owes100(x,y))", "(Owns(Fred,Alyssa,100))", "Alyssa owes $100(Fred)", "All x.(Fred(x) -> IsAlyssa(x,100))", "all x y.((Fred(x) & Alyssa(y)) -> IsSince(x,y))"]}
{"id": "enwn_validation_45", "nl": "Fred should pay Alyssa $100.", "fol": "", "prediction": ["all x.((Fred(x) & Alyssa(x)) -> ShouldPay(x,100))", "All x.(Fred(x) -> ShouldPayAlyssa100(x))", "All x y.((Fred(x) & Alyssa(y)) -> ShouldPay(x,y))", "Fred should pay $100 to Alyssa.", "Fred should pay Alyssa $100.", "(Pays(Fred,Alyssa,100))", "all x.((Fred(x) & Alyssa(x)) -> ShouldPay100(x))", "Alyssa should pay $100 to Fred.", "(PaysFred(Fred,100))", "All x y.((Fred(x) & Alyssa(y)) -> ShouldPay(x,y))", "all x.(Fred(x) -> ShouldPayAlyssa(x,100))", "(PaysFred(Fred,100) -> AlyssaPaysFred(Fred,100))", "All x y.((Fred(x) & Alyssa(y) & $100(y)) -> ShouldPay(x,y))", "All x y.((Fred(x) & Alyssa(y)) -> ShouldPay(x,y))", "all x.(Fred(x) -> ShouldPayAlyssa100(x))", "all x.(Fred(x) -> ShouldPayAlyssa(x,100))"]}
{"id": "enwn_validation_46", "nl": "You should not take something that doesn't belong to you.", "fol": "", "prediction": ["all x.((Takes(x,y) & -BelongsTo(x,y)) -> -BelongsTo(x,y))", "all x.((Takes(x) & -BelongsTo(x)) -> -BelongsTo(x))", "all x y.((Takes(x,y) & -BelongsTo(x,y)) -> -BelongsTo(x,y))", "all x.((Takes(x,y) & -BelongsTo(y)) -> -BelongsTo(x,y))", "all x.((Take(x) & -BelongsTo(x)) -> -BelongsTo(x))", "all x y.((Take(x,y) & -BelongsTo(x,y)) -> -BelongsTo(x,y))", "-(TakesWhatIsNotBelongsTo(x))", "(all x.((Takes(x) & -BelongsTo(x)) -> -BelongsTo(x)))", "all x.((Takes(x) & -BelongsTo(x)) -> -BelongsTo(x))", "all x y.((Takes(x,y) & -BelongsTo(x,y)) -> -BelongsTo(x,y))", "(-BelongsTo(x,y))", "all x.((Purchase(x) & -BelongsTo(x)) -> -Takes(x,y))", "all x.((Takes(x,y) & -BelongsTo(x,y)) -> -BelongsTo(x,y))", "-(TakesWhatIsNotBelongingTo(i))", "exists x.(Takes(x,y) & -BelongsTo(y,x))", "all x.((Takes(x) & -BelongsTo(x)) -> -BelongsTo(x))"]}
{"id": "enwn_validation_47", "nl": "Mark is considering taking the lunch in the breakroom fridge.", "fol": "", "prediction": ["all x.(Mark(x) -> ConsidersTakingLunchInBreakroomFridge(x))", "all x y.((Mark(x) & BreakroomFridge(y)) -> ConsidersTakingLunch(x,y))", "Mark is considering taking the lunch in the breakroom fridge.", "all x.((Mark(x) & BreakroomFridge(x)) -> ConsidersTakingLunch(x))", "(TakesLunchInBreakroomFridge(Mark) -> Considers(Mark))", "Mark is consideringTakingLunchInBreakroomFridge(Mark)", "(TakingLunchInBreakroomFridge(Mark) -> Considers(Mark,Lunch))", "(TakesLunchInBreakroomFridge(Mark) -> ConsidersTakingLunchInBreakroomFridge(Mark))", "(PurchaseLunch(Mark) & InBreakroomFridge(Mark))", "Mark considers taking lunch in breakroom fridge.", "Mark is considering taking the lunch in the breakroom fridge.", "all x y.((Mark(x) & BreakroomFridge(y)) -> ConsidersTakingLunch(x,y))", "Mark considers taking lunch in BreakroomFridge(Mark)", "Mark is consideringTakingLunchInBreakroomFridge(Mark)", "Mark is consideringTakingLunchInBreakroomFridge(Mark)", "Mark considers taking lunch in breakroom fridge."]}
{"id": "enwn_validation_48", "nl": "The lunch in the fridge has a note on it saying \"Melissa\".", "fol": "", "prediction": ["all x.((Lunch(x) & Refrigerator(x)) -> HasNoteOn(x,Melissa))", "all x y.((Lunch(x) & Refrigerator(y)) -> HasNoteOn(x,y))", "(LunchInFridge(x) & HasNoteOn(x,Melissa))", "all x.((Lunch(x) & Refrigerator(x)) -> HasNoteOn(x,Melissa))", "all x.((Lunch(x) & InFridge(x)) -> HasNoteOn(x,Melissa))", "all x y z.((Lunch(x) & Refrigerator(y) & Note(z) & Melissa(z)) -> HasNoteOn(x,y,z))", "all x y.((Lunch(x) & Refrigerator(y)) -> HasNoteOn(x,y))", "(all x.((Lunch(x) & Refrigerator(x)) -> MelissaNote(x)))", "(LunchInFridge(lunch,melissa) & HasNoteOn(lunch,melissa))", "all x y.((Lunch(x) & Refrigerator(y) & InFridge(x,y)) -> HasNoteOn(x,y))", "exists x.(Lunch(x) & InFridge(x) & HasNoteOn(x,Melissa))", "all x.((Lunch(x) & Refrigerator(x)) -> HasNote(x,Melissa))", "all x.((Lunch(x) & InFridge(x)) -> HasNoteOn(x,Melissa))", "exists x.(Lunch(x) & InFridge(x) & HasNoteOn(x,Melissa))", "all x y.((Lunch(x) & Refrigerator(y)) -> HasNoteOn(x,y))", "all x y.((Lunch(x) & Refrigerator(y)) -> HasNoteOn(x,y))"]}
{"id": "enwn_validation_49", "nl": "People write their names on things to mark them as their belongings.", "fol": "", "prediction": ["all x y.((Person(x) & Thing(y)) -> WritesNameOn(x,y))", "all x y z.((Person(x) & Name(y) & Thing(z)) -> WritesOnToMark(x,y,z))", "all x.((Person(x) & WritesNamesOnThings(x)) -> MarksAsBelongings(x))", "all x.(Person(x) -> WritesNameOnThings(x))", "all x y.((Person(x) & Thing(y)) -> WritesNameOnToMarkBelongings(x,y))", "all x y z.((Person(x) & Name(y) & Things(z)) -> WritesOnToMarkBelongings(x,y,z))", "all x.((Person(x) & WritesNameOnThings(x)) -> MarksAsBelongings(x))", "all x y.((Person(x) & Things(y)) -> WritesNameOn(x,y))", "all x.(Person(x) -> WritesNameOnThings(x))", "all x y z.((Person(x) & Name(y) & Thing(z)) -> WritesOnToMarkAsBelongings(x,y,z))", "all x y.((Person(x) & Name(y)) -> WritesOnToMarkBelonging(x,y))", "exists x.(People(x) & WritesNameOnThings(x) & MarksAsBelongings(x))", "exists x.(Person(x) & WritesName(x) & MarksAsBelongings(x))", "all x.(Person(x) -> WritesNamesOnThings(x))", "exists x.(Person(x) & WritesName(x) & MarksBelongings(x))", "all x y.((Person(x) & Thing(y)) -> WritesNameOn(x,y))"]}
{"id": "enwn_validation_50", "nl": "The lunch in the breakroom fridge is Melissa's.", "fol": "", "prediction": ["all x.((Lunch(x) & BreakroomFridge(x)) -> Melissas(x))", "all x y.((Lunch(x) & BreakroomFridge(y)) -> Melissas(x,y))", "(LunchInBreakroomFridge(Melissa) & Melissas(Melissa))", "the lunch in the breakroom fridge is Melissa's.", "lunch in the breakroom fridge is Melissa's.", "(Melissa's Lunch(BreakroomFridge)", "all x.((Lunch(x) & BreakroomFridge(x)) -> Melissas(x))", "(LunchInBreakroomFridge(Melissa) & Melissas(Melissa))", "all x y.((Lunch(x) & BreakroomFridge(y)) -> Melissas(x,y))", "(MelissasLunchInBreakroomFridge(Melissa))", "all x y.((Breakroom(x) & BreakroomFridge(y)) -> Melissas(x,y))", "all x y.((BreakroomFridge(x) & Lunch(y)) -> Melissas(y))", "all x.((Lunch(x) & BreakroomFridge(x)) -> Melissas(x))", "exists x.(BreakroomFridge(x) & Lunch(x) & Melissas(x))", "(LunchInBreakroomFridge(Melissa's)", "all x.((Lunch(x) & BreakroomFridge(x)) -> Melissas(x))"]}
{"id": "enwn_validation_51", "nl": "Mark is considering taking Melissa's lunch.", "fol": "", "prediction": ["all x.((Mark(x) & TakesMelissasLunch(x)) -> ConsidersTaking(x,Melissa))", "Mark is consideringTakingMelissa'sLunch(Mark)", "all x y.((Mark(x) & Melissa(y)) -> ConsidersTakingLunch(x,y))", "((Mark(Mark) & MelissasLunch(Mark)) -> ConsidersTaking(Mark,Meliss))", "(considersMelissa'sLunch(Mark))", "all x.((Mark(x) & TakesMelissa'sLunch(x)) -> ConsidersTaking(x,Melissa))", "all x.(Melissa(x) -> ConsidersTaking(x,Melissa))", "Mark is consideringTakingMelissa'sLunch(Mark)", "(TakesMelissasLunch(Mark) -> ConsidersTaking(Mark,Meliss))", "Mark considers taking Melissa's Lunch.", "Mark considers taking MelissasLunch(Mark)", "(EnvisagingMelissa'sLunch(Mark,Melissa))", "all x y.((Mark(x) & Melissa(y)) -> ConsidersTakingLunch(x,y))", "Mark is consideringTakingMelissasLunch(Mark)", "(considersMelissa'sLunch(Mark)", "Mark is consideringTakingMelissa'sLunch(Mark,Melissa)"]}
{"id": "enwn_validation_52", "nl": "Mark should not take Melissa's lunch.", "fol": "", "prediction": ["all x.((Mark(x) & Melissa(y)) -> -TakesLunch(x,y))", "(-TakesMelissasLunch(Mark))", "all x.(Melissa(x) -> -TakesLunch(x,Melissa))", "Mark should not take Melissa's Lunch.", "-(TakesMelissasLunch(Mark,Melissa))", "Mark should not take MelissasLunch(Mark)", "all x y.((Mark(x) & Melissa(y)) -> -TakesLunch(x,y))", "all x.((Mark(x) & Melissa(x)) -> -TakesLunch(x,Melissa))", "(-Melissa'sLunch(Mark))", "(-TakesMelissasLunch(Mark))", "-(TakesMelissa'sLunch(Mark))", "Mark should nottakeMelissa'sLunch(Mark)", "(-takesMelissasLunch(Mark,Melissa))", "Melissa's Lunch is not allowed.", "Mark should not take Melissa's lunch.", "(-TakesMelissa'sLunch(Mark,Melissa))"]}
{"id": "enwn_validation_53", "nl": "Fern brought her textbook to class.", "fol": "", "prediction": ["Fern brought her textbook to class.", "all x.((Fern(x) & Textbook(y)) -> BringsToClass(x,y))", "-(Fern(Fern) & BringsTextbookToClass(Fern)))", "all x y.((Fern(x) & Textbook(y)) -> BringsToClass(x,y))", "(BringsTextbookToClass(Fern) & BringsTextbookToClass(Fern))", "(BorrowsTextbook(Fern) & BringsToClass(Fern))", "Fern brought her textbook to class.", "Fern hat den Textbook(fern) & -BroughtToClass(fern,class))", "-(Fern(Fern) & Textbook(Fern)))", "all x.((Fern(x) & Textbook(x)) -> BringsToClass(x))", "Fern brought her textbook to class.", "(BringsTextbookToClass(Fern))", "Fern brought textbook to class.", "Fern brought textbook(fern,class)", "Fern brought her textbook to class.", "Fern brought her textbook to class."]}
{"id": "enwn_validation_54", "nl": "Ann showed up to biology class without her textbook.", "fol": "", "prediction": ["all x.((Ann(x) & BiologyClass(x)) -> ShowedUpWithoutTextbook(x))", "all x y.((Ann(x) & BiologyClass(y)) -> ShowedUpWithoutTextbook(x,y))", "Ann showed up to biology class without textbook(Ann)", "(ShownUpWithoutTextbook(Ann))", "all x.((Ann(x) & BiologyClass(x) & -Textbook(x)) -> ShowedUp(x,y))", "all x y.((Ann(x) & BiologyClass(y) & -Textbook(y)) -> ShowedUpWithout(x,y))", "(StayedUpToBiologyClassWithoutTextbook(Ann,Biology))", "-(AnnShowedUpToBiologyClass(Ann))", "(ShownUpWithoutTextbook(Ann,BiologyClass))", "Ann showed up to biology class without textbook(Ann)", "-(AnnShowedUpToBiologyClassWithoutTextbook(Ann))", "(ShownUpToBiologyClassWithoutTextbook(Ann))", "Ann showed up to BiologyClassWithoutTextbook(Ann))", "Ann showed up to biology class without textbook.", "Ann showed up to biology class without textbook(Ann,Biology))", "Ann showed up to biology class without textbook."]}
{"id": "enwn_validation_55", "nl": "Textbooks are required in Ann's biology class.", "fol": "", "prediction": ["all x y.((Textbook(x) & Ann(y)) -> RequiredInBiologyClass(x,y))", "all x.((Textbook(x) & AnnsBiologyClass(x)) -> Required(x))", "(all x.(Textbook(x) -> RequiredInAnnsBiologyClass(x)))", "all x.(Textbook(x) -> RequiredInAnnsBiologyClass(x))", "(RequiredInAnnsBiologyClass(Ann,Biology) & Textbook(Ann,Biology))", "all x y.((Textbook(x) & BiologyClass(y)) -> RequiredInAnn(x,y))", "(TextbooksRequiredInAnnsBiologyClass(Ann))", "all x y z.((Textbook(x) & BiologyClass(y) & Ann(z)) -> RequiredIn(x,y,z))", "all x y.((Textbook(x) & Ann(y)) -> RequiresInBiologyClass(x,y))", "(RequiresTextbooksInAnnsBiologyClass(Ann,Biology))", "(all x.(Textbook(x) -> RequiredInAnnsBiologyClass(x)))", "all x.(Textbook(x) -> RequiredInAnnsBiologyClass(x))", "(TextbookRequiredInAnn'sBiologyClass(Ann))", "all x.((Textbook(x) & AnnsBiologyClass(x)) -> Requires(x,y))", "all x y.((Textbook(x) & BiologyClass(y)) -> RequiredInAnn(x,y))", "All x.(Textbook(x) -> RequiredInAnnsBiologyClass(x))"]}
{"id": "enwn_validation_56", "nl": "You should share things with people in need.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y) & InNeed(x,y)) -> SharesThings(x,y))", "all x y.((Person(x) & Person(y)) -> SharesThings(x,y))", "all x.((Person(x) & InNeed(x)) -> ShareThings(x))", "(ShareThingsWithNeededPeople(x) -> ShareThingsWith(x))", "all x y z.((Person(x) & Person(y) & Need(z)) -> Shares(x,y,z))", "all x y.((Person(x) & Person(y) & InNeed(x)) -> ShareThings(x,y))", "all x y.((People(x) & Person(y) & InNeed(x,y)) -> ShareThings(x,y))", "all x.(ShareThingsWithNeedyPeople(x) -> ShareThingsWithNeedyPeople(x))", "all x.((PeopleInNeed(x) & ShareThings(x)) -> ShareNeed(x))", "all x.((Person(x) & InNeed(x)) -> ShareThings(x))", "all x y.((Person(x) & Person(y) & InNeed(x,y)) -> ShareThings(x,y))", "exists x.(Person(x) & ShareThingsWith(x,y))", "all x y z.((Person(x) & Person(y) & Need(z)) -> Shares(x,y,z))", "exists x.(PeopleInNeed(x) & ShareThings(x))", "exists x.(Person(x) & SharesThings(x))", "all x y.((Person(x) & PersonInNeed(y)) -> ShareThings(x,y))"]}
{"id": "enwn_validation_57", "nl": "Ann needs a textbook.", "fol": "", "prediction": ["all x.(AnnNeedsTextbook(x) -> NeedsTextbook(x))", "Ann NeedsTextbook(Ann)", "(NeedsTextbook(Ann))", "-NeedsTextbook(Ann)", "all x.(NeedsTextbook(x) -> AnnNeedsTextbook(x))", "all x.(AnnNeedsTextbook(x) -> NeedsTextbook(x))", "Ann needs textbook(Ann)", "Ann NeedsTextbook(Ann)", "(NeedsTextbook(Ann))", "All x.(Ann(x) -> NeedsTextbook(x))", "Ann needs a textbook.", "-NeedsTextbook(Ann)", "(NeedsTextbook(Ann) & -NeedsTextbook(Ann))", "all x.(AnnNeedsTextbook(x) -> Needs(x))", "(NeedsTextbook(Ann))", "Ann NeedsTextbook(Ann)"]}
{"id": "enwn_validation_58", "nl": "Someone should share a textbook with Ann.", "fol": "", "prediction": ["all x y.((Man(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x y.((Person(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x.((Man(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x y z.((Booklet(x) & Ann(y) & Textbook(z)) -> ShouldShare(x,y,z))", "(SharesTextbookWithAnn(Ann) -> ShouldBeShared(Ann,Textbook))", "(ShareTextbook(Ann) & ShareTextbook(Ann))", "all x y.((Man(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "exists x.(Man(x) & ShareTextbook(x,Ann))", "exists x.(Booklet(x) & Share(x,Ann))", "all x y.((Person(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x y z.((Educational(x) & Ann(y) & Textbook(z)) -> ShouldShare(x,y,z))", "all x y.((Sponsor(x,y) & Ann(y)) -> ShareTextbook(x,y))", "exists x.(EducationalLecture(x) & Share(x,Ann))", "all x y.((Booklet(x) & Ann(y)) -> Share(x,y))", "exists x.(Man(x) & SharesTextbook(x,Ann))", "exists x.(Booklet(x) & Share(x,Ann))"]}
{"id": "enwn_validation_59", "nl": "Fern should share her textbook with Ann.", "fol": "", "prediction": ["all x y.((Fern(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x.((Fern(x) & Ann(x)) -> ShouldShareTextbook(x,y))", "Fern should share her textbook with Ann.", "all x y.((Fern(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "(ShareTextbook(FernandAnn) -> Should(FernandAnn))", "(SharingTextbook(Fernand) & SharingTextbook(Fernand))", "((Fernand(Fernand,Ann)) -> ShouldShareTextbook(Fernand,Ann))", "all x y z.((Fern(x) & Ann(y) & Textbook(z)) -> ShouldShare(x,z))", "(SharesTextbookWithAnn(Fern) & Fern(Fern))", "all x.((Fern(x) & Ann(x)) -> ShouldShareTextbook(x,y))", "Fern should share her textbook with Ann.", "All x.(Fern(x) -> ShouldShareTextbook(x,Ann))", "all x y.((Fern(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "All x.((Fern(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "All x.((Fern(x) & Ann(x)) -> ShareTextbook(x,y))", "all x y.((Fern(x) & Ann(y)) -> ShouldShareTextbook(x,y))"]}
{"id": "enwn_validation_60", "nl": "Someone in a red BMW was waiting for the parking spot before George.", "fol": "", "prediction": ["all x y.((RedBMWare(x) & WaitingForParkingSpot(x,y)) -> GeorgeWorried(x))", "all x.((RedBMWare(x) & WaitingForParkingSpot(x)) -> GeorgeWorried(x))", "all x.((BMWare(x) & Red(x)) -> WaitingForParkingSpot(x,George))", "all x y.((RedBMWare(x) & George(y)) -> WaitingForParkingSpot(x,y))", "all x y z.((RedBMWare(x) & ParkingSpot(y) & George(z)) -> WaitingFor(x,y,z))", "all x.((InRedBMWare(x) & WaitingForParkingSpot(x,George)) -> WaitingForParkingSpot(x,George))", "all x y.((Red BMW(x) & WaitingForParkingSpot(x,y)) -> GeorgeWasPast(x,y))", "all x y.((RoseBMWare(x) & WaitingForParkingSpot(x,y)) -> GeorgeWorriedForParkingSpot(x,y))", "exists x.(RedBMWare(x) & WaitingForParkingSpot(x))", "(WarmingParkingSpot(red BMW) & InRed BMW(red BMW))", "all x.((RedBMWare(x) & WaitingForParkingSpot(x)) -> GeorgeWasPast(x))", "(WasThanParkingSpot(red BMW,George))", "exists x.(RedBMWare(x) & WaitingForParkingSpot(x) & BeforeGeorge(x))", "all x y z.((RedBMWare(x) & ParkingSpot(y) & George(z)) -> WaitingFor(x,y,z))", "all x y.((RedBMWare(x) & WaitingForParkingSpot(x,y)) -> GeorgeWasPast(x,y))", "exists x.(RedBMWare(x) & WaitingForParkingSpot(x,George))"]}
{"id": "enwn_validation_61", "nl": "If a group of people is waiting for something, the people who were waiting earliest are first in line.", "fol": "", "prediction": ["all x.((GroupOfPeople(x) & WaitingFor(x)) -> FirstInLine(x))", "all x y.((Group(x) & WaitingFor(x,y)) -> FirstInLine(x))", "all x y.((GroupOfPeople(x) & WaitingFor(x,y)) -> FirstInLine(x))", "all x y z.((GroupOfPeople(x) & WaitingFor(x,y) & Person(z) & WaitingOff(z,y)) -> FirstInLine(x,z))", "all x.((GroupOfPeople(x) & WaitingFor(x)) -> FirstInLine(x))", "all x y.((Group(x) & WaitingFor(x,y)) -> FirstInLine(x,y))", "all x.((GroupOfPeople(x) & WaitingForSomething(x)) -> FirstInLine(x))", "all x y z.((Group(x) & WaitingFor(x,y) & Person(z) & WaitingOf(z,y)) -> FirstInLine(x,z))", "all x.((GroupOfPersons(x) & WaitingForSomething(x)) -> FirstInLine(x))", "all x.(WaitingForSomething(x) -> FirstInLine(x))", "all x y.((Group(x) & WaitingFor(x,y)) -> FirstInLine(x))", "all x.((GroupOfPeople(x) & WaitingFor(x,y)) -> FirstInLine(x,y))", "exists x.(GroupOfPeople(x) & WaitingForSomething(x) & WaitingOfFifthest(x))", "all x y.((GroupOfPeople(x) & WaitingFor(x,y)) -> FirstInLine(x,y))", "all x.((PastPerson(x) & Waiting(x)) -> FirstInLine(x))", "all x y.((Person(x) & WaitingFor(x,y)) -> FirstInLine(x,y))"]}
{"id": "enwn_validation_62", "nl": "You should let people ahead of you in line go first.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y) & InLine(x,y)) -> LetsGoFirst(x,y))", "all x.((People(x) & BeforeYou(x)) -> LetsGoFirst(x))", "all x.(LetsPeopleBeforeInLineGoFirst(x) -> LetsPeopleBeforeInLine(x))", "(LetsPeopleBeforeYouInLineGoFirst(x) -> LetsPeopleBeforeYouInLine(x))", "all x.((Person(x) & Before(x,y)) -> LetsGoFirst(x,y))", "all x y z.((Person(x) & Person(y) & Line(z) & Before(x,y,z)) -> LetsGoFirst(x,y,z))", "all x y.((Person(x) & Person(y) & InLine(x,y)) -> LetsGoFirst(x,y))", "all x.(LetsPeopleBehindYouInLineGoFirst(x) -> LetsPeopleBehindYouInLine(x))", "all x.((PeopleAheadOfYou(x) & InLine(x)) -> LetsGoFirst(x))", "all x y.((Person(x) & Person(y) & Before(x,y)) -> LetsGoFirst(x,y))", "all x y.((People(x) & Person(y) & InLine(x,y)) -> LetsGoFirst(x,y))", "(LeavePeopleBehindYouFirst(x) -> LetInLineGo(x))", "all x.(LetsPeopleBeforeInLineGoFirst(x) -> LetsPeopleBeforeInLineGoFirst(x))", "exists x.(Person(x) & InLine(x) & LetsGoFirst(x))", "all x y.((Person(x) & Person(y) & InLine(x,y)) -> LetsGoFirst(x,y))", "all x y.((Person(x) & Person(y)) -> LetsGoFirst(x,y))"]}
{"id": "enwn_validation_63", "nl": "When you take something, you prevent other people from taking it.", "fol": "", "prediction": ["all x y.((Takes(x) & Person(y)) -> PreventsTaken(x,y))", "all x.(Takes(x,y) -> PreventsTaken(x,y))", "all x y.((Takes(x,y) & Person(y)) -> PreventsTaken(x,y))", "all x y z.((Takes(x,y) & Person(z)) -> PreventsTaken(x,z))", "all x y.((Takes(x) & Takes(y)) -> PreventsTaken(x,y))", "all x.(Takes(x,y) -> PreventsTaken(y,z))", "all x.((Takes(x) & PreventsTaken(x)) -> Takes(x,y))", "(all x.(Takes(x,y) -> PreventsTaken(x,y)))", "all x.(Takes(x) -> PreventsTaken(x))", "all x y z.((Take(x) & Person(y) & Person(z)) -> PreventsFromTaking(x,y,z))", "all x y.((Takes(x,y) & Person(y)) -> PreventsFromTaking(x,y))", "all x y.(Takes(x,y) -> PreventsTaken(x,y))", "all x.((Takes(x) & PreventsTakenByOthers(x)) -> Takes(x,y))", "all x.(Takes(x,y) -> PreventsOtherPeopleFromTaking(x,y))", "exists x.(Puts(x,y) & Takes(x,y) & PreventsTaken(x,y))", "exists x.(Takes(x,y) & Takes(x,z) & PreventsTaken(x,z))"]}
{"id": "enwn_validation_64", "nl": "George is about to take the parking spot.", "fol": "", "prediction": ["George is about to take the parking spot.", "all x.((George(x) & ParkingSpot(x)) -> AboutToTake(x,y))", "all x.(George(x) -> AboutToTakeParkingSpot(x))", "(Greg is aboutToTakeParkingSpot(Greg))", "(AtParkingSpot(George) -> AboutToTake(George,AtParkingSpot))", "all x.((George(x) & ParkingSpot(x)) -> AboutToTake(x,y))", "all x y.((George(x) & ParkingSpot(y)) -> AboutToTake(x,y))", "all x.(Greg(x) -> AboutToTakeParkingSpot(x))", "George is about to take the parking spot.", "George is about to TakeParkingSpot(George)", "(all x.(George(x) -> TakeParkingSpot(x)))", "(Greg is aboutToTakeParkingSpot(George))", "George is about to take the parking spot.", "George is about to TakeParkingSpot(George)", "George is about to take the parking spot.", "George is about toTakeParkingSpot(George)"]}
{"id": "enwn_validation_65", "nl": "Someone in a red BMW is in line for the parking spot ahead of George.", "fol": "", "prediction": ["all x y.((RedBMWare(x) & George(y)) -> InLineForParkingSpot(x,y))", "all x.((RedBMWare(x) & InLineForParkingSpot(x)) -> George(x))", "all x.((BMWare(x) & Red(x)) -> InLineForParkingSpot(x,George))", "all x y z.((RedBMWare(x) & George(y) & InLineForParkingSpot(x,y)) -> ParksAhead(x,z))", "all x y.((RedBMWare(x) & George(y)) -> InLineForParkingSpot(x,y))", "exists x.(RedBMWare(x) & InLineForParkingSpot(x) & George(x))", "all x y.((Red BMW(x) & George(y)) -> InLineForParkingSpot(x,y))", "(InLineForParkingSpot(x,George) -> RedBMW.)", "all x.((RedBMWare(x) & InLineForParkingSpot(x)) -> George(x))", "all x.((BMWare(x) & Red(x)) -> InLineForParkingSpot(x))", "all x y.((RoseBMW3 & George(y)) -> InLineForParkingSpot(x,y))", "all x y z.((RedBMWare(x) & George(y) & InLineForParkingSpot(x,y)) -> ParksAheadOf(x,z))", "exists x.(RedBMWare(x) & InLineForParkingSpot(x) & George(x))", "exists x.(BMWiz(x) & RedBMWiz(x) & InLineForParkingSpot(x,George))", "exists x.(RedBMWare(x) & InLineForParkingSpot(x) & BeforeGeorge(x))", "all x y.((RedBMWare(x) & George(y)) -> InLineForParkingSpot(x,y))"]}
{"id": "enwn_validation_66", "nl": "George should let the person in the red BMW take the parking spot.", "fol": "", "prediction": ["all x y.((Person(x) & RedBMWiz(x)) -> LetsTakeParkingSpot(x,y))", "all x.((Person(x) & RedBMWiz(x)) -> LetsTakeParkingSpot(x,George))", "George should let the person in the red BMW take the parking spot.", "(LetsPersonInRedBMWareTakeParkingSpot(George) -> LetsPersonInRedBMWareTakeParkingSpot(George))", "all x y.((Person(x) & Red BMW(y)) -> LetsTakeParkingSpot(x,y))", "(LetsPersonInRed BMWTakeParkingSpot(George))", "-(George(George) & PersonInRedBMW3(George)) -> TakesParkingSpot(George,George))", "George should let the person in the red BMW take the parking spot.", "all x.((Person(x) & RedBMW3(x)) -> LetsTakeParkingSpot(x))", "all x y.((Person(x) & RedBMW3(y)) -> LetsTakeParkingSpot(x,y))", "(LetsPersonInRedBMWareTakeParkingSpot(George,BMWare))", "George should let the person in red BMW take the parking spot.", "all x.((Person(x) & Red BMW(x)) -> LetsTakeParkingSpot(x))", "all x y.((RedBMWare(x) & Person(y)) -> LetsTakeParkingSpot(x,y))", "all x.((Person(x) & RedBMWiz(x)) -> ShouldLetTakeParkingSpot(x,George))", "George should let the person in the red BMW take the parking spot."]}
{"id": "enwn_validation_67", "nl": "If George takes the parking spot, he will prevent other people from taking it.", "fol": "", "prediction": ["all x.(TakesParkingSpot(x) -> PreventsOtherPeopleFromTakingParkingSpot(x))", "all x y.((ParkingSpot(x) & George(y)) -> PreventsTakenBy(y,x))", "all x.((GerryTakesParkingSpot(x) & PreventsTakenPerson(x)) -> TakesParkingSpot(x))", "all x.((George(x) & TakesParkingSpot(x)) -> PreventsTakenPerson(x))", "(TakesParkingSpot(George) -> PreventsTakenPlace(George,Person))", "all x.((GeorgeTakesParkingSpot(x) & PreventsTakenPerson(x)) -> TakesParkingSpot(x))", "all x y.((ParkingSpot(x) & George(y)) -> PreventsTaken(y,x))", "all x.(TakesParkingSpot(x) -> PreventsTakenByOthers(x))", "(TakesParkingSpot(George) -> PreventsOtherPeopleFromTakingParkingSpot(George))", "(all x.(TakesParkingSpot(x) -> PreventsTaken(x)))", "all x y.((Gerry(x) & ParkingSpot(y)) -> PreventsTaken(x,y))", "all x y.((President(x) & TakesParkingSpot(x,y)) -> PreventsTakenPlot(x,y))", "(all x.(TakesParkingSpot(x) -> PreventsOtherPeopleFromTakingParkingSpot(x)))", "all x y.((ParkingSpot(x) & George(y)) -> PreventsTaking(y,x))", "all x.(TakesParkingSpot(x) -> PreventsOtherPeopleFromTakingParkingSpot(x))", "all x.(TakesParkingSpot(x) -> PreventsTakenPerson(x))"]}
{"id": "enwn_validation_68", "nl": "George shouldn't take the parking spot.", "fol": "", "prediction": ["all x.((George(x) & ParkingSpot(x)) -> -Takes(x,y))", "all x.((George(x) & ParkingSpot(x)) -> -Takes(x,y))", "-shouldTakeParkingSpot(George)", "all x.((George(x) & ParkingSpot(x)) -> -Takes(x,y))", "George shouldn'tTakeParkingSpot(George,x))", "all x.((George(x) & ParkingSpot(x)) -> -Takes(x,y))", "((Greg(g) & ParksSpot(g)) -> -Takes(g,g))", "(-TakeParkingSpot(George))", "-(Greg(g) & ParksSpot(g))", "all x.((Greg(x) & ParksSpot(x)) -> -TakesSpot(x,Greg))", "-shouldTakeParkingSpot(George)", "all x y.((ParkingSpot(x) & George(y)) -> -shouldTake(y,x))", "George shouldn'ttakeParkingSpot(George)", "all x.(Greg(x) -> -TakeParkingSpot(x))", "(-takesParkingSpot(George))", "-shouldTakeParkingSpot(George,Spot)"]}
{"id": "enwn_validation_69", "nl": "Embezzlement is theft or misappropriation of funds belonging to an employer.", "fol": "", "prediction": ["all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x) | Misappropriation(x)))", "all x.(Embezzlement(x) -> (Theft(x) | Misappropriation(x)) & EmployerFunds(x)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x) | Misappropriation(x)))", "all x y z.((Embezzlement(x) & Employer(y) & Fund(z)) -> (Theft(x,z) | Misappropriation(x,z)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x,y) | Misappropriation(x,y)))", "all x.(Embezzlement(x) -> (Theft(x) | Misappropriation(x)))", "all x.(Embezzlement(x) -> (Theft(x) | Misappropriation(x)) & EmployerFundsBelongingTo(x,e)))", "all x.(Embezzlement(x) -> (TheftOrMisappropriationOfFunds(x) & Employer(x)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x,y) | Misappropriation(x,y)))", "all x y z.((Embezzlement(x) & (Funds(y) | Funds(z))) -> (Theft(x,y) | Misappropriation(x,z)))", "all x y z.((Embezzlement(x) & Employer(y) & Fund(z)) -> (Theft(x,z) | Misappropriation(x,z)))", "all x.(Embezzlement(x) -> (TheftOrMisappropriationOfFunds(x) & Employer(x)))", "all x.(Embezzlement(x) -> (Theft(x) | Misappropriation(x)) & EmployerFundsBelongingTo(x,Employer)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x) | Misappropriation(x)))", "all x.(Embezzlement(x) -> (Theft(x) | Misappropriation(x)) & Employer(x))", "all x.(Embezzlement(x) -> (TheftOrMisappropriationOfFunds(x) & Employer(x)))"]}
{"id": "enwn_validation_70", "nl": "Using money allotted for one purpose for another purpose is misappropriation.", "fol": "", "prediction": ["all x y.((Money(x) & AllottedFor(x,y) & Purpose(y)) -> Misappropriation(x))", "all x.((UsesMoneyAllottedFor(x,y) & Purpose(y)) -> Misappropriation(x))", "all x y.((Misappropriation(x) & MoneyAllottedFor(x,y) & Purpose(y)) -> Misappropriation(x))", "all x y.((Money(x) & Purpose(y) & AllottedFor(x,y)) -> Misappropriation(x))", "all x y z.((Money(x) & Purpose(y) & Purpose(z) & AllottedFor(x,y,z)) -> Misappropriation(x))", "all x.((MoneyAllottedFor(x,y) & Purpose(y)) -> Misappropriation(x))", "all x.((UsesMoneyAllotted(x) & UsesMoneyAllotted(x) & UsesMoneyAllotted(x) & UsesMoneyAllotted(x) & UsesMoneyAllotted(x) & UsesMoneyAllotted(x)) -> Misappropriation(x))", "all x y.((UsesMoneyAllottedFor(x,y) & Purpose(y)) -> Misappropriation(x))", "all x.((MoneyAllotted(x) & Purpose(x) & Purpose(x)) -> Misappropriation(x))", "(Misappropriation(Microsoft) -> UsesAllocatedMoneyForAnotherPurpose(Misappropriation))", "all x.((Misappropriation(x) & AllottedMoney(x) & UsesMoney(x,y) & UsesMoney(x,z)) -> Misappropriation(x))", "all x.(Misappropriation(x) -> (UsesMoneyAllottedForOnePurpose(x) & UsesMoneyAllottedForAnotherPurpose(x)))", "all x.((UsesMoneyAllottedFor(x,y) & Purpose(y)) -> Misappropriation(x))", "all x y z.((Money(x) & Purpose(y) & Purpose(z) & AllottedFor(x,y,z)) -> Misappropriation(x))", "all x y.((Misappropriation(x) & MoneyAllottedFor(x,y)) -> Misappropriation(x))", "all x y.((UsesMoneyAllottedFor(x,y) & Purpose(y)) -> Misappropriation(x))"]}
{"id": "enwn_validation_71", "nl": "Tessa works as an accountant at her firm.", "fol": "", "prediction": ["(WorksAsAccountant(Tessa) & AtFirm(Tessa))", "(WorksAsAccountant(Tessa,Firm) & -WorksAsAccountant(Tessa,Firm))", "all x.((Tessa(x) & Accountant(x)) -> WorksAt(x,y))", "all x.(Tessa(x) -> WorksAsAccountantAtFirm(x))", "Tessa works as Accountant(te) & AtFirm(te) & AtFirm(te) & AtFirm(te))", "-WorksAsAccountant(Tessa,Firm)", "-WorksAsAccountantAtFirm(Tessa,Firm)", "all x y.((Tessa(x) & Firm(y)) -> WorksAsAccountant(x,y))", "(WorksAsAccountant(Tessa) & AtFirm(Tessa,Firm))", "Tessa works as accountant at her firm.", "(WorksAsAccountant(Tessa,Firm) & At(Tessa,Firm))", "(WorksAt(Tessa,Accountant) & AtFirm(Tessa,Accountant))", "Tessa works as Accountant(x) & AtFirm(x))", "(AtFirm(Tessa) & WorksAsAccountant(Tessa))", "(WorksAsAccountant(Tessa,Firm) & -WorksAsAccountant(Tessa,Firm))", "(WorksAsAccountant(Tessa) & AtFirm(Tessa))"]}
{"id": "enwn_validation_72", "nl": "A retiree is someone who has retired from employment and is no longer working.", "fol": "", "prediction": ["all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x y.((Retiree(x) & Person(y)) -> (RetiredFromEmployment(y,x) & -Working(y)))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x y.((Retiree(x) & Person(y) & RetiredFromEmployment(y) & -Working(y)) -> Retired(x,y))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x y.((Retiree(x) & Person(y)) -> (RetiredFromEmployment(y,x) & -Working(y)))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x.((Retiree(x) & RetiredFromEmployment(x) & No longerWorking(x)) -> RetiredFromEmployment(x))", "all x y.((Retiree(x) & Person(y)) -> (RetiredFromEmployment(y,x) & -Working(y,x)))", "exists x.(Retiree(x) & RetiredFromEmployment(x) & -Working(x))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "exists x.(Retiree(x) & RetiredFromEmployment(x) & -Working(x))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))"]}
{"id": "enwn_validation_73", "nl": "Tessa withdrew a lump sum from her firm's retirement fund to buy herself a summer home.", "fol": "", "prediction": ["all x y.((Tessa(x) & RetirementFund(y)) -> WithdrewSumToBuySummerHome(x,y))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementFund(z)) -> WithdrewToBuySummerHome(x,y,z))", "all x.((Tessa(x) & LumpSum(x)) -> WithdrewToBuySummerHome(x))", "(WithdrawsSumMomentFromRetirementFund(Tessa,Company) & BuysSummerHome(Tessa,Home))", "all x y.((Tessa(x) & Firm(y)) -> WithdrewSumMillion(x,y))", "(WithdrawsLocallySum(Tessa,RetirementFund) & BuysSummerHome(Tessa,SummerHome))", "((Tessa) & LumpSum(t) & RetirementFund(t)) -> WithdrewToBuySummerHome(t)))", "(WithdrewSum(Tessa,Summary) & FromRetirementFund(Tessa,SummerHome))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementFund(z) & Withdrew(x,y,z)) -> BuysSummerHome(x))", "(WithdrewSumMillion(Tessa,RetirementFund) & PurchasesSummerHome(Tessa,SummerHome))", "all x.((Tessa(x) & LumpSum(x)) -> WithdrewToBuySummerHome(x))", "all x.((Tessa(x) & WithdrewSumMillion(x)) -> PurchasesSummerHome(x))", "all x.((Tessa(x) & RetirementFund(x) & WithdrewSumMoment(x)) -> BuysSummerHome(x))", "(all x.((Tessa(x) & RetirementFund(x)) -> WithdrawsSum(x)))", "all x y.((Tessa(x) & RetirementFund(y)) -> WithdrewSumMoment(x,y))", "all x y.((Tessa(x) & LumpSum(y)) -> WithdrewsForSumToBuySummerHome(x,y))"]}
{"id": "enwn_validation_74", "nl": "Money in a company's retirement fund is intended to be paid out to retirees.", "fol": "", "prediction": ["all x y.((Company(x) & RetirementFund(y)) -> IntendedToBePaidOutToRetirees(x,y))", "all x y z.((Company(x) & RetirementFund(y) & Retirement(z)) -> IntendedToBePaidOutToRetirees(x,y,z))", "all x.((Company(x) & RetirementFund(x)) -> IntendedToBePaidOutToRetirees(x))", "all x.((CompanyRetirementFund(x) & InCompanyRetirementFund(x)) -> PaidOutToRetirees(x))", "all x y.((Company(x) & RetirementFund(y)) -> IntendedToBePaidOutToRetirees(x,y))", "all x y z.((Company(x) & RetirementFund(y) & Retirement(z) & InCompany(x,y) & InCompany(x,z)) -> IntendedToBePaidOutToRetirees(x,y,z))", "all x y.((Company(x) & RetirementFund(y)) -> IntendedToPayOutToRetirees(x,y))", "all x.((CompanyRetirementFund(x) & InCompanyRetirementFund(x)) -> IntendedToBePaidOutToRetirees(x))", "(all x.(RetirementFund(x) -> PaidOutToRetirees(x)))", "all x.((Company(x) & RetirementFund(x)) -> IntendedToBePaidOutToRetirees(x))", "all x.(RetirementFund(x) -> IntendedToBePaidOutToRetirees(x))", "all x y z.((Company(x) & RetirementFund(y) & Retiree(z)) -> IntendedToBePaidOutTo(x,y,z))", "all x y.((Company(x) & RetirementFund(y)) -> (PaysOut(x,y) & Retiree(x,y)))", "all x y.((Company(x) & Company(y) & RetirementFund(x,y)) -> IntendedToBePaidOutToRetirees(x,y))", "all x y.((Company(x) & RetirementFund(y) & InCompanyRetirement(x,y)) -> IntendedToBePaidOutToRetirees(x,y))", "all x.((CompanyRetirementFund(x) & InCompanyRetirementFund(x)) -> PaidOutToRetirees(x))"]}
{"id": "enwn_validation_75", "nl": "Tessa is not a retiree.", "fol": "", "prediction": ["(-Retiree(Tessa))", "Tessa is notRetiree(tessa)", "(Retiree(Tessa) & -Retiree(Tessa))", "(-Retiree(Tessa))", "Tessa is notRetiree(Tessa)", "Tessa is not a retiree.", "(Retiree(Tessa) & -Retiree(Tessa))", "(-Retiree(Tessa))", "Tessa is notRetiree(tessa)", "-Retiree(Tessa)", "Tessa is not retiree(Tessa)", "Tessa -Retiree(Tessa)", "(-Retiree(Tessa))", "-Retiree(tessa)", "-Retiree(Tessa,Standard)", "-Retiree(tessa)"]}
{"id": "enwn_validation_76", "nl": "Tessa bought herself a summer home with money from the firm intended for retirees.", "fol": "", "prediction": ["all x y.((Tessa(x) & SummerHome(y) & MoneyFromRetirees(x)) -> Purchased(x,y))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & IntendedForRetirees(x,y,z)) -> PurchasedWithMoney(x,y,z))", "all x.((Tessa(x) & SummerHome(x) & MoneyFromRetirees(x)) -> Purchased(x,y))", "(BuysSummerHome(Tessa) & MoneyFromRetirees(Tessa))", "all x y.((Tessa(x) & SummerHome(y) & MoneyFromForRetirees(x,y)) -> Purchased(x,y))", "(BoughtSummerHomeWithFund(Tessa,Members) & DesignedForRetirees(Tessa,Members))", "all x y.((Tessa(x) & SummerHome(y)) -> (BuysWithMoney(x,y) & DesignedForRetirees(x)))", "(BuysSheSummerHomeWithFund(Tessa) & IntendedForRetirees(Tessa,Retirees))", "all x y z.((Tessa(x) & SummerHome(y) & Fund(z) & IntendedForRetirees(x,y)) -> PurchasedWith(x,y,z))", "all x.((Tessa(x) & SummerHome(x) & MoneyFromRetirees(x)) -> Purchased(x,y))", "(BoughtSummerHomeWithMoneyFromRetirees(Tessa,FinancialForRetirees))", "(BuysSummerHomeWithMoney(Tessa,Retirees))", "all x.((Tessa(x) & SummerHome(y) & MoneyFromForRetirees(x,y)) -> Purchased(x,y))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & Money(z)) -> PurchasedWith(x,y,z))", "all x y.((Tessa(x) & SummerHome(y) & Fund(x,y)) -> IntendedForRetirees(x,y))", "all x.((Tessa(x) & SummerHome(x) & Fund(x)) -> IntendedForRetirees(x))"]}
{"id": "enwn_validation_77", "nl": "Tessa bought herself a summer home with money from the firm that was not intended for her.", "fol": "", "prediction": ["all x y.((Tessa(x) & SummerHome(y) & -IntentionalFor(x,y)) -> PurchasedWithMoney(x,y))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & -IntendedFor(z,y)) -> PurchasedWith(x,y,z))", "all x.((Tessa(x) & SummerHome(x) & -IntentionalFor(x)) -> Purchased(x,y))", "(BuysSummerHome(Tessa) & MoneyFromFinancialCompany(Tessa))", "all x y.((Tessa(x) & SummerHome(y) & -IntendedFor(y,x)) -> PurchasedWithMoney(x,y))", "(BoughtSummerHomeWithMoney(Tessa) & -IntendedFor(Tessa))", "all x.((Tessa(x) & SummerHome(x) & -IntendedFor(x,Tessa)) -> PurchasedWithMoney(x,Tessa))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & -IntentionalFor(x,y,z)) -> PurchasedWith(x,y,z))", "(BuysSummerHomeWithFund(Tessa,Summer) & -IntendedFor(Tessa,Summer))", "(SummerHome(Tessa) & MoneyFromFinancialCompany(Tessa) & -IntendedFor(Tessa))", "(BoughtSummerHomeWithMoney(Tessa,Season) & -IntendedFor(Tessa,SummerHome))", "all x y.((Tessa(x) & SummerHome(y)) -> (BuysWithMoney(x,y) & -IntendedFor(y,x)))", "(BuysSheSummerHomeWithFund(Tessa) & -IntendedForShe(Tessa))", "all x.((Tessa(x) & SummerHome(y) & -InitialTo(y,x)) -> PurchasedWithMoney(x,y))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & -IntendedFor(z,y)) -> PurchasedWithMoney(x,y,z))", "all x.((Tessa(x) & SummerHome(x)) -> (BuysWithMoney(x,y) & -IntendedFor(y,x)))"]}
{"id": "enwn_validation_78", "nl": "Tessa misappropriated her firm's money.", "fol": "", "prediction": ["all x y.((Tessa(x) & Firm(y)) -> MisappropriatedMoney(x,y))", "(MisappropriatedMoney(Tessa) & Firm(Tessa))", "all x.(MisappropriatedMoney(x) -> Tessa(x))", "Tessa misappropriated firm's money.", "-MisappropriatedMoney(Tessa,Firm,Finance)", "all x y.((Tessa(x) & Firm(y)) -> MisappropriatedMoney(x,y))", "(MisappropriatedMoney(Tessa,Firm))", "all x.(Misappropriated(x) -> Tessa(x))", "Tessa misappropriated money from her firm.", "Tessa MisappropriatedMoney(Tessa,Firm,Finance)", "(Misappropriated(Tessa,FirmMoney))", "(MisappropriatedMonet(Tessa,Firm))", "all x.(MisappropriatedMonet(x) -> Tessa(x))", "all x y.((Tessa(x) & Firm(y)) -> MisappropriatedMoney(x,y))", "(MisappropriatedMoney(Tessa) & Firm(Tessa))", "(MisappropriatedMoney(Tessa,Firm,Finance))"]}
{"id": "enwn_validation_79", "nl": "Tessa embezzled from her firm.", "fol": "", "prediction": ["all x y.((Tessa(x) & Firm(y)) -> EmbezzledFrom(x,y))", "Tessa embezzled from her firm.", "(EmbezzledFrom(Tessa,Firm))", "(EmbezzledFromFirm(Tessa))", "all x.(EmbezzledFrom(x,y) -> Tessa(x))", "all x y z.((Tessa(x) & Firm(y) & Firm(z)) -> EmbezzledFrom(x,y,z))", "all x.((Tessa(x) & Firm(y)) -> EmbezzledFrom(x,y))", "-EmbezzledFromFirm(Tessa,FinancialCompany)", "all x y.((Tessa(x) & Firm(y)) -> Embeds(x,y))", "Tessa embezzledFromHerFirm.", "(EmbedsFromFirm(Tessa,Firm))", "(EmbezzledFrom(Tessa) & Firm(Tessa))", "Tessa embezzled from her firm.", "(EmbezzledFromFirm(Tessa))", "(EmbezzledFromFirm(Tessa) & FromFirm(Tessa))", "all x y.((Tessa(x) & Firm(y)) -> Embezzled(x,y))"]}
{"id": "enwn_validation_80", "nl": "Leading others to think someone was responsible for something is shifting the blame.", "fol": "", "prediction": ["all x y.((LeadsOthersToThought(x,y) & Person(y)) -> ShiftingBlood(x))", "all x.((LeadsOthersToThought(x) & ResponsibleFor(x)) -> ShiftingBlood(x))", "all x y.((LeadsOthers(x) & Person(y) & ThinksResponsible(x,y)) -> ShiftingBlood(x))", "all x.((LeadingOthersToThink(x) & SomeoneResponsibleFor(x)) -> ShiftingBlood(x))", "all x y z.((LeadsOthersToThought(x,y) & Person(z) & ResponsibleFor(x,z)) -> ShiftingBlood(x))", "all x.((LeadsOthers(x) & ThinksPersonResponsibleFor(x,y)) -> ShiftsBlood(x))", "all x.(LeadingOthersToThinkSomeoneResponsibleForSomething(x) -> ShiftingBlood(x))", "all x y.((LeadsOthersToThought(x,y) & Person(y)) -> ShiftsBlood(x,y))", "all x.((LeadingOthersToThought(x) & PersonResponsibleFor(x)) -> ShiftingBlood(x))", "all x y.((LeadingOthers(x) & Person(y)) -> ShiftsBlood(x,y))", "all x y z.((LeadingOthersToThought(x,y) & Person(z) & ResponsibleFor(x,z)) -> ShiftingBlood(x))", "all x.(LeadsOthersToThoughtSomeoneResponsible(x) -> ShiftingBlood(x))", "all x y.((LeadsOthersToThink(x,y) & Person(y)) -> ShiftingBlood(x,y))", "all x y.((Leader(x) & Person(y) & ThinksResponsibleFor(x,y)) -> ShiftingBlood(x))", "all x.((LeadsOthers(x) & ThinksPersonResponsible(x)) -> ShiftsBlood(x))", "All x.((LeadingOthersToThink(x) & ResponsibleFor(x,y)) -> ShiftingBlood(x))"]}
{"id": "enwn_validation_81", "nl": "When the campus cops interviewed Nate after the fire, he said he saw Jeff drop a cigarette.", "fol": "", "prediction": ["all x y.((CampusPolice(x) & Nate(y) & InterviewedAfterFire(x,y)) -> SawJeffDropCigarette(y))", "all x y z.((CampusPolice(x) & Nate(y) & Fire(z) & Interviewed(y,z)) -> (Said(y,z) & SawJeffDropCigarette(y,z)))", "all x.((CampusPolice(x) & InterviewsNateAfterFire(x)) -> SawJeffDropCigarette(x))", "all x y.((CampusPolice(x) & Nate(y) & InterviewedAfterFire(x,y)) -> SawJeffDropCigarette(y))", "all x y.((CampusPolice(x) & CampusPolice(y) & InterviewedNateAfterFire(x,y)) -> SawJeffDropCigarette(x,y))", "(InterviewingCampusPolicesAfterFire(CampusPolices) & NateSaid(Nate,Fire) & JeffDropsCigarette(Nate,Cigarette))", "all x y z.((CampusPolice(x) & Nate(y) & Fire(z)) -> (Interviews(x,y,z) & SawJeffDropCigarette(y,z)))", "all x.((CampusPolice(x) & InterviewedNateAfterFire(x)) -> SawJeffDropCigarette(x))", "(InterviewsClubsAfterFire(CampusPolices(Nate) & NateSaidHeStruckCigarette(Nate))", "all x.((CampusPolice(x) & InterviewsNate(x) & AfterFire(x)) -> SawJeffDropCigarette(x))", "(InterviewsCollegePoliceAfterFire(CampusPolice,Nate) & NateDropsCigarette(Nate))", "all x.((CampusPolices(x) & InterviewedNate(x) & AfterFire(x)) -> SawJeffDropCigarette(x))", "all x y z.((CampusPolice(x) & Nate(y) & Fire(z) & InterviewedAfter(y,z)) -> (Satisfied(y,z) & DropsCigarette(y,z)))", "all x y.((CampusPolice(x) & Nate(y) & InterviewedAfterFire(x,y)) -> (Said(y,x) & JeffDropsCigarette(y)))", "all x y.((CampusPolice(x) & CampusPolice(y) & InterviewedNate(x,y)) -> (Satisfied(x,y) & DropsCigarette(x,y)))", "all x.((CampusPolicesInterview(x) & NateAfterFire(x)) -> SawJeffDropCigarette(x))"]}
{"id": "enwn_validation_82", "nl": "Telling someone that something happened leads them to believe it happened.", "fol": "", "prediction": ["all x y.((Tells(x,y) & Person(y)) -> Believes(y,x))", "all x y.((Tells(x,y) & Person(y)) -> BelievesSituation(y))", "all x y z.((Tells(x,y) & Person(z) & Happened(z)) -> Believes(x,z))", "all x.((Tells(x,y) & Happened(x)) -> Believes(x,y))", "all x.((TellsPerson(x) & SomethingHasSurvowed(x)) -> BelievesSituation(x))", "all x.((Tells(x,y) & Happened(x,y)) -> Believes(x,y))", "all x y.((Tells(x,y) & Person(y)) -> Believes(y,x))", "all x y.((Story(x) & Person(y)) -> BelievesSituation(y,x))", "all x y.((Tells(x,y) & Person(y) & Happened(y)) -> Believes(x,y))", "all x y z.((Tells(x,y) & Person(z) & Happened(z)) -> Believes(x,z))", "all x y z.((TellsPerson(x) & Happened(y) & Person(z) & Happened(z)) -> Believes(x,z))", "exists x.(TellsPerson(x) & SomethingHasSurvowed(x))", "all x.((TellsPerson(x) & SomethingHasSappeared(x)) -> BelievesSituation(x))", "all x y.((TellsPerson(x) & Happened(x,y)) -> Believes(x,y))", "exists x.(TellsPerson(x) & Happened(x) & LeadsToCredit(x,y))", "all x.((TellsPerson(x) & Happened(x)) -> BelievesItSpent(x))"]}
{"id": "enwn_validation_83", "nl": "Dropping a cigarette can cause a fire.", "fol": "", "prediction": ["all x.(DroppingCigarette(x) -> CanCauseFire(x))", "all x.((Cigarette(x) & Drops(x)) -> CanCauseFire(x))", "all x y.((Cigarette(x) & Drop(y)) -> CanCauseFire(x,y))", "all x.(DroppingCigarette(x) -> CanCauseFire(x))", "all x y z.((Cigarette(x) & Cigarette(y) & Fire(z)) -> CanCause(x,y,z))", "all x.(Dropping(x) -> CanCauseFire(x))", "all x y.((Cigarette(x) & Drop(y)) -> CanCauseFire(x,y))", "all x.((Cigarette(x) & Drops(x)) -> CanCauseFire(x))", "all x y.((Cigarette(x) & Dropping(x,y)) -> CanCauseFire(x))", "all x.((Cigarette(x) & Drops(x)) -> CausesFire(x))", "exists x.(Cigarette(x) & Drops(x))", "all x y.((Cigarette(x) & Drop(y,x)) -> CanCauseFire(x))", "all x.(Dropping(x) -> CanCauseFire(x))", "all x y.((Cigarette(x) & Drops(x,y)) -> CanCauseFire(x))", "exists x.(Cigarette(x) & Drops(x,y))", "all x y.((Cigarette(x) & Dropping(y)) -> CanCauseFire(x,y))"]}
{"id": "enwn_validation_84", "nl": "Letting someone else take the blame for your actions is wrong.", "fol": "", "prediction": ["all x.(LetsAnotherTakeBlood(x) -> Wrong(x))", "all x y.((LetsAnotherTakeBlood(x) & Action(y)) -> IsWrong(x))", "(LetsAnotherTakeBlood(a) -> Wrong(a))", "all x.(LetsAnotherTakeBlood(x) -> IsWrong(x))", "all x.((LetsAnotherTakeBlood(x) & IsWrong(x)) -> IsWrong(x))", "all x.(LettingAnotherTakeBlood(x) -> Wrong(x))", "all x y.((LetAnotherTakeBlood(x) & Action(y)) -> IsWrong(x,y))", "all x y.((LetsAnotherTakeBlood(x) & Action(y)) -> Wrong(x))", "all x y z.((LetsAnotherTakeBlood(x,y) & Action(z)) -> IsWrong(x,z))", "all x.(LetsAnotherTakeBlood(x) -> Wrong(x))", "all x.((LetsAnotherTakeBlood(x) & TakeBlood(x)) -> Wrong(x))", "all x y.((LettingAnotherTakeBlood(x) & Actions(y)) -> Wrong(x))", "all x y.((LetsAnotherTakeBlood(x,y) & Action(y)) -> Wrong(x))", "ALL X.((LettingOtherTakeBlood(x) & Action(x)) -> Wrong(x))", "All x.(LettingAnotherTakeBlood(x) -> Wrong(x))", "all x.(LetsAnotherTakeBlood(x) -> IsWrong(x))"]}
{"id": "enwn_validation_85", "nl": "Nate dropped the cigarette that started the fire.", "fol": "", "prediction": ["all x.((Nate(x) & Cigarette(x)) -> Dropped(x))", "Nate dropped the cigarette that started the fire.", "(LowersCigarette(Nate) & StartsFire(Nate))", "all x y.((Nate(x) & Cigarette(y)) -> Dropped(x,y))", "-(Nate(n) & Cigarette(n) & Fire(n)))", "all x.((Nate(x) & Cigarette(x)) -> Dropped(x))", "(LoadedCigarette(Nate) & StartedFire(Nate))", "(Nate droppedCigarette(Nate) & StartedFire(Nate))", "Nate dropped the Cigarette(Nate) & StartedFire(Nate)", "Nate dropped the cigarette that started the fire.", "-(Nate(n) & Cigarette(n) & Fire(n)))", "all x.(Nate(x) -> DropsCigarette(x))", "-Nate droppedCigarette(Nate,StartedFire))", "Nate dropped the cigarette that started fire.", "Nate dropped cigarette that started fire.", "Nate dropped the cigarette that started the fire."]}
{"id": "enwn_validation_86", "nl": "Nate led the campus cops to believe that Jeff dropped a cigarette before the fire.", "fol": "", "prediction": ["all x y.((CampusPolice(x) & Nate(y)) -> (LeadsToCitizens(y,x) & Jeff(y)))", "all x y z.((Nate(x) & CampusPolice(y) & Cigarette(z)) -> (LeadsToCitizens(x,y) & Dropped(x,z)))", "(LeadsCampusPolicesToThinkJeffLoadedCigarette(Jeff))", "all x.((Nate(x) & CampusPolice(y)) -> (LightedToCitizens(x,y) & JeffLoadedCigarette(x,y)))", "all x y.((CampusPolice(x) & Nate(y)) -> (LeadsToCitizens(y,x) & DroppedCigarette(y,x)))", "(Likely(Nate) & CampusPolice(Nate) & JeffLoadedCigarette(Nate))", "all x y z.((Nate(x) & CampusPolice(y) & Cigarette(z)) -> (LeadsToCitizen(x,y) & DroppedBeforeFire(x,z)))", "(LeadsCampusPolicesToThoughtJeffPluckedCigarette(Jeff))", "all x y.((CampusPolice(x) & Nate(y)) -> (LedsToCitizens(y,x) & DroppedCigarette(y,x)))", "all x y.((Nate(x) & CampusPolice(y) & Jeff(z)) -> DroppedCigarette(z,y))", "all x.((Nate(x) & CampusPolice(x)) -> DroppedCigaretteBeforeFire(x))", "(LightedCallsToKnow(Nate,Jeff,Cigarette))", "(LeadsCampusPolicesToCitizen(Nate,Jeff) & DroppedCigarette(Jeff))", "-LeadsCampusPolicesToThink(Nate,Jeffrey,Cigarette)", "all x y z.((Nate(x) & CampusPolice(y) & Cigarette(z) & DroppedBeforeFire(x,z)) -> LeadsToCitizen(x,y,z))", "all x.((NateLedCampusPolices(x) & JeffLoadedCigarette(x)) -> Believes(x))"]}
{"id": "enwn_validation_87", "nl": "Nate led the campus cops to believe that Jeff started the fire.", "fol": "", "prediction": ["all x y.((CampusPolice(x) & Nate(y)) -> (LeadsToCreateFire(y,x) & JeffStartedFire(y,x)))", "all x y z.((Nate(x) & CampusPolice(y) & Jeff(z)) -> LedToCreateFire(x,y,z))", "(LeadsCampusPolicesToThinkJeffStartedFire(Nate))", "all x.((Nate(x) & CampusPolice(y)) -> BelievesJeffStartedFire(x,y))", "all x y.((CampusPolice(x) & Nate(y)) -> (LeadsToCredit(y,x) & JeffStartedFire(y,x)))", "(LikedByJeffrey(Nate,CampusPolices) & JeffStartedFire(Nate,CampusPolice))", "all x y z.((CampusPolice(x) & Nate(y) & CampusPolice(z)) -> (LeadsToCreateFire(y,z) & JeffStartedFire(y,z)))", "Nate led campus cops to believe that Jeff started the fire.", "(Likes(Nate,CampusPolices) & JeffStartedFire(Nate,CampusPolice))", "-LeadsCampusPolicesToThinkJeffStartedFire(Nate,Fresh,Fresh))", "(LeadsCampusPolicesToGive JeffStartedFire(Nate,Fresh))", "-LeadsCampusPolicesToGive JeffStartedFire(Nate,Fresh,Fresh))", "(LeadsCampusPolicesToCreateFire(Nate,Jeff))", "all x.((Nate(x) & CampusPolice(y)) -> (LeadsToCreateFire(x,y) & JeffStartedFire(x,y)))", "all x y.((CampusPolice(x) & Nate(y)) -> BelievesJeffStartedFire(y,x))", "all x y.((CampusPolice(x) & Nate(y)) -> (LedsToCredit(y,x) & JeffStartedFire(y,x)))"]}
{"id": "enwn_validation_88", "nl": "Nate shifted the blame for the fire to Jeff.", "fol": "", "prediction": ["all x y.((Nate(x) & Jeff(y)) -> ShiftsBlood(x,y))", "all x y z.((Nate(x) & Jeff(y) & Fire(z)) -> ShiftsBloodTo(x,y,z))", "all x y.((Nate(x) & Jeff(y)) -> ShiftsBlood(x,y))", "(ShiftsBloodTo(Nate,Fire) & Jeff(Nate))", "all x.((Nate(x) & Jeff(x)) -> ShiftsBlood(x,Fire))", "(ShiftedBloodToJeffrey(Nate,Fire))", "Nate shifted blame for fire to Jeff.", "-(Nate,Jeffrey,Fire) & ShiftsBlood(Nate,Fire))", "all x.(Nate(x) -> ShiftsBloodToJeff(x))", "(ShiftsBloodToJeffrey(Nate,Fire))", "(SwiftBlood(Nate) & JeffBlood(Nate))", "all x y.((Nate(x) & Jeff(y)) -> ShiftedBloodTo(x,y))", "All x.(Nate(x) -> ShiftsBloodToJeff(x))", "all x y z.((Nate(x) & Jeff(y) & Fire(z)) -> ShiftsBloodTo(x,y,z))", "Nate shifted blame for fire to Jeff.", "(ChangesBloodToJeffrey(Nate,Fire))"]}
{"id": "enwn_validation_89", "nl": "It would be wrong for Nate to let someone else take the blame for starting the fire.", "fol": "", "prediction": ["all x.((Nate(x) & LetsAnotherTakeBlood(x)) -> -Wrong(x))", "all x y.((Nate(x) & Person(y)) -> TakesBloodForFire(x,y))", "(It would be wrong for Nate to let someone else take the blame for starting the fire.)", "all x.((Nate(x) & LetsAnotherTakeBlood(x)) -> -Wrong(x))", "-(Nate(n) & LetsSomeoneTakeBlood(n)))", "all x y.((Nate(x) & Person(y)) -> TakesBloodForFire(x,y))", "(It's WrongForNateToLeaveBloodForStartingFire(Nate,Blood))", "all x.((Nate(x) & LetsSomeoneTakeBlood(x)) -> IsNatale(x))", "(It would be wrong for Nate to let someone else take the blame for starting the fire.)", "-(Nate(n) & LetsAnotherTakeBlood(n))", "all x.((Nate(x) & SomeoneOther(x)) -> IsBlood(x))", "(Nate,shall-let-anyoneTakeBlood(Nate,Fire))", "all x y.((Nate(x) & Person(y)) -> TakesBloodForStartingFire(x,y))", "All x.(Nate(x) -> (LetsAnotherTakeBlood(x) & StartsFire(x)))", "All x.(Nate(x) -> LetsAnotherTakeBlood(x))", "all x y.((Nate(x) & Person(y)) -> LetsTakeBlood(x,y))"]}
{"id": "enwn_validation_90", "nl": "Nate should not have shifted the blame for the fire to Jeff.", "fol": "", "prediction": ["all x.((Nate(x) & Jeff(x)) -> -ShiftedBloodTo(x,y))", "all x y.((Nate(x) & Jeff(y)) -> -ShiftedBloodTo(x,y))", "-ShiftedBloodToJeffrey(Nate,Fire)", "all x.((Nate(x) & Jeff(x)) -> -ShiftedBloodTo(x,y))", "(ShiftBlood(Nate,Fire) & -ShiftBloodToJeff(Nate,Fire))", "all x y.((Nate(x) & Jeff(y)) -> -ShiftedBloodTo(x,y))", "Nate should not have shifted blame to Jeff.", "-ShiftsBloodToJeffrey(Nate,Fire)", "the fire.(Nate,Jeff) -ShiftedBloodTo(Nate,Fire))", "-(ShiftedBloodToJeffrey(Nate) & Fire(Jeffrey))", "(-ShiftedBloodToJeffrey(Nate))", "(Nate should not have shifted blame to Jeff.)", "(ShiftedBloodToJeffrey(Nate) & -ShiftedBloodToJeffrey(Nate))", "all x.((Nate(x) & Jeff(x)) -> -ShiftedBloodTo(x,Fire))", "all x y.((Nate(x) & Jeff(y)) -> -ShiftedBloodTo(x,y))", "-ShiftedBloodToJeffrey(Nate,Fire)"]}
{"id": "enwn_validation_91", "nl": "Taking something that doesn't belong to you is wrong.", "fol": "", "prediction": ["all x.((Takes(x,y) & -BelongsTo(x,y)) -> Wrong(x))", "all x.((Takes(x,y) & -BelongsTo(y)) -> Wrong(x))", "all x y.((Takes(x,y) & -BelongsTo(x,y)) -> Wrong(x))", "all x.((Takes(x) & -BelongsTo(x)) -> Wrong(x))", "all x.((Taking(x) & -BelongsTo(x)) -> Wrong(x))", "all x.((Takes(x,y) & -BelongsTo(x,y)) -> IsWrong(x))", "(TakingWhatIsNotBelongsToYou(IsWrong(I))", "all x y.((Takes(x,y) & -BelongsTo(x,y)) -> IsWrong(x))", "all x.((TakesWhat(x) & -BelongsTo(x)) -> Wrong(x))", "all x.((Takes(x,y) & -BelongsTo(y)) -> IsWrong(x))", "all x.((TakingWhatIsNotBelongingTo(x)) -> Wrong(x))", "all x y.((Takes(x,y) & -BelongsTo(x,y)) -> Wrong(x))", "all x.((ThanNeighborhood(x) & Taken(x)) -> Wrong(x))", "All x y.((Purpose(x) & -BelongsTo(x,y)) -> IsWrong(x))", "all x.((Purpose(x) & -BelongsTo(x)) -> Wrong(x))", "All x y.((Takes(x,y) & -BelongsTo(y)) -> Wrong(x))"]}
{"id": "enwn_validation_92", "nl": "The TV belonged to the owners of the AirBNB Mike was staying at.", "fol": "", "prediction": ["all x y.((TV(x) & AirBNB(y) & Owner(x,y)) -> BelongedTo(x,y))", "all x.(Television(x) -> BelongedToAirBNB(x))", "all x y.((TV(x) & AirBNB(y) & MikeStayingAt(x,y)) -> BelongedToOwners(x,y))", "all x.(TVBelongedToAirBNB(x) -> StayedAt(x))", "all x y z.((TV(x) & AirBNB(y) & AirBNB(z)) -> BelongedToOwners(x,y,z))", "(BelongedToAirBNB(TV) & OwnersOfAirBNB(TV))", "the TV belongedToAirBNBMike(t)", "(AirBNB(TV) & OwnersOfAirBNB(TV))", "all x y.((TV(x) & AirBNB(y)) -> BelongedToOwners(x,y))", "(BelongedToAirBNBMike(TV) & StayedAt(TV,AirBNB))", "All x.(TVBelongsToAirBNB(x) -> OwnersOfAirBNB(x))", "-BelongsToAirBNBOwners(TV,AirBNBMike)", "the TV belongedToAirBNB(Mike,AirBNB)", "all x y.((Television(x) & AirBNB(y) & Owner(x,y)) -> StayedAt(x,y))", "all x.(Television(x) -> BelongedToAirBNB(x))", "All x.(Television(x) -> BelongedToOwnersOfAirBNBMike(x))"]}
{"id": "enwn_validation_93", "nl": "You shouldn't help someone do something wrong.", "fol": "", "prediction": ["all x.((Helps(x) & Person(x)) -> -Helps(x,y))", "all x y.((Helps(x,y) & Person(y)) -> -Helps(x,y))", "-(HelpsDoWrong(x) & HelpsDoWrong(x)))", "all x.((HelpsPerson(x) & Dose(x,wrong)) -> -HelpsPerson(x,wrong))", "all x.((Helps(x) & Person(x)) -> -HelpsDoWrong(x))", "all x y.((Helps(x,y) & Person(y)) -> -HelpsDoWrong(x,y))", "-(HelpsSomeone(x) & DoseWrong(x))", "all x.((Helps(x,y) & Person(y)) -> -Helps(x,y))", "-helpsDoWhatIsWrong(x) -> -HelpsDoWhatIsWrong(x))", "-(HelpsPerson(x) & DoesWrong(x))", "all x.((HelpsPerson(x) & DoseWrong(x)) -> -HelpsPerson(x))", "-HelpsDoWrong(you)", "(-HelpSomeoneDoWhatIsWrong(you,Person))", "all x y.((Help(x,y) & Person(y)) -> -HelpDo(x,y))", "(-helpsDoWrong(you,Person))", "all x y.((Helps(x,y) & Person(y)) -> -Helps(x,y))"]}
{"id": "enwn_validation_94", "nl": "Tim helped Mike carry the TV out to his car.", "fol": "", "prediction": ["all x y.((Tim(x) & Mike(y)) -> CarriedTVOutToCar(x,y))", "all x y z.((Tim(x) & TV(y) & Car(z)) -> CarriedOutTo(x,y,z))", "(HelpedCarryTVOutToCar(Tim) & MikeCarriedTVOut(Tim))", "Tim helped Mike carry the TV out to his car.", "all x y.((Tim(x) & Mike(y)) -> HelpedCarryTVOutToCar(x,y))", "all x.(Tim(x) -> HelpedCarryTVOutToCar(x))", "-helpedCarryTVOutToCar(Tim,Mike)", "all x y z.((Tim(x) & TV(y) & Car(z)) -> HelpedCarryOutTo(x,y,z))", "all x.(TimHasHelpedCarryTVOutToCar(x,Tim)) -> HelpedCarryTVOutToCar(x,Tim))", "(HelpedCarryTVOutToCar(Tim) & MikeCarriedTVOutToCar(Tim))", "Tim helped Mike carry TV out to his car.", "Mike CarriedTVOutToCar(Tim)", "(HelpedCarryOutTV(Tim) & MikeCarriesOutTV(Tim))", "Tim helped Mike carry out the TV to his car.", "(HelpedCarryTVOutToCar(Tim,Mike))", "all x y.((Tim(x) & Mike(y)) -> CarriedTVOutToCar(x,y))"]}
{"id": "enwn_validation_95", "nl": "It would be wrong for Mike to take the TV.", "fol": "", "prediction": ["all x.((Mike(x) & TakesTV(x)) -> Irresponsible(x))", "(WrongForMikeToTakeTV(Mike))", "-(TakesTV(Mike) & -TakesTV(Mike))", "(Its WrongForMikeToTakeTV(Mike))", "it would be wrong for Mike to take TV.", "all x.((Mike(x) & TakesTV(x)) -> Irresponsible(x))", "-WrongForMikeToTakeTV(Mike)", "-(MikeTakesTV(Mike) & -TakesTV(Mike))", "Is Mike TakingTV(ItWrong(It)?", "Es w\u00e4re falsch f\u00fcr Mike,TelevisionTaken(Mike,Television,TV))", "all x.((Mike(x) & TakesTV(x)) -> -Wrong(x))", "-MikeTakesTV(Mike,TV)", "(WrongForMikeToTakeTV(Mike))", "All x.(Mike(x) -> TakesTV(x))", "all x.((Mike(x) & TakeTV(x)) -> Irresponsible(x))", "all x.((Mike(x) & TakesTV(x)) -> Wrong(x))"]}
{"id": "enwn_validation_96", "nl": "It would be wrong to help Mike take the TV.", "fol": "", "prediction": ["all x.((HelpsMikeTakeTV(x)) -> Irresponsible(x))", "all x.((HelpsTakeTV(x) & Mike(x)) -> Irresponsible(x))", "-(HelpsTakeTV(Mike) -> Irresponsible(Mike))", "(Its WrongToHelpMikeTakeTV(Mike))", "all x.((HelpMikeTakeTV(x) & Idle(x)) -> IsTelevision(x))", "all x.((HelpsMikeTakeTV(x) & -HelpsMikeTakeTV(x)) -> Irresponsible(x))", "All x.((Mike(x) & TakeTV(x)) -> Irresponsible(x))", "all x.((HelpMikeTakeTV(x) & -HelpMikeTakeTV(x)) -> Irresponsible(x))", "-(HelpsTakeTV(Mike) | HelpsTakeTV(Mike)))", "Es w\u00e4re falsch, Mike takeTelevision(Mike)", "(ItWrongToHelpTakeTV(Mike) -> IsIt(Mike))", "Isn'tHeadingTelevision(IsMike(I)?", "all x y.((Television(x) & Mike(y)) -> Wrong(x,y))", "-(HelpsTakeTV(Mike,TV) -> Irresponsible(Mike,TV))", "All x.(ItWrongToHelpMikeTakeTV(x) -> -HasTV(x))", "All x.(ItWrongToHelpTakeTV(x) -> MikeWrongToHelpTakeTV(x))"]}
{"id": "enwn_validation_97", "nl": "Tim shouldn't have helped Mike take the TV.", "fol": "", "prediction": ["all x.((Tim(x) & Mike(y)) -> -HelpedTakeTV(x,y))", "-(HelpedTakeTV(Tim) & Mike(Tim))", "Tim shouldn't have helped Mike take the TV.", "-HasTimHelpedTakeTV(Tim)", "((Tim) & Mike(Mike)) -> -HasHelpedTakeTV(Tim))", "all x.((Tim(x) & Mike(x)) -> -HasHelpedTakeTV(x,Tim))", "(-helpedTakeTV(Tim) & Mike(Tim))", "-HasHelpedTakeTV(Tim,Mike)", "(Neighborhood(Tim) & Mike(Tim))", "Mike should have taken the TV from Tim.", "Tim shouldn't have helped Mike take the TV.", "(-helpedTakeTV(Tim,Mike))", "-(HelpedTakeTV(Tim) & Mike(Tim))", "all x.((Tim(x) & Mike(y)) -> -HelpedTakeTV(x,y))", "-HasTimHasTimTakenTV(Tim)", "all x.((Tim(x) & Mike(x)) -> -HasHelpedTakeTV(x,Tim))"]}
{"id": "enwn_validation_98", "nl": "The right thing to do is whatever results in the least harm.", "fol": "", "prediction": ["all x.((RightThing(x) & ResultsInLeastHarm(x)) -> RightThing(x))", "all x.((RightThing(x) & ResultInLeastHarm(x)) -> RightThing(x))", "all x.(RightThing(x) -> (LeastHarm(x) | RightThing(x)))", "all x y.((RightThing(x) & ResultInLeastHarm(y)) -> RightThing(x,y))", "(RightThingToDo(x) -> (LeastHarm(x) | -LeastHarm(x)))", "all x y.((RightThing(x) & ResultsInLeastHarm(y)) -> RightThing(x,y))", "all x.((RightThing(x) & ResultsInLeastHarm(x)) -> RightThing(x))", "(RightThingToDo(x) -> ResultsInLeastHarm(x))", "all x.((RealThing(x) & ResultInLeastHarm(x)) -> RightThing(x))", "all x.(RightThing(x) -> (ResultsInLeastHarm(x)))", "all x.((CausesLeastHarm(x) & RightThing(x)) -> RightThing(x))", "(RightThingToDo(x) -> (LeastHarm(x) & ResultsIn(x,y)))", "all x.(RightThingToDo(x) -> (LeastHarmResult(x) | RightThing(x)))", "all x.((RightThingToDo(x)) -> (LeastHarm(x) | -LeastHarm(x)))", "all x y.((RealThing(x) & RightThing(y)) -> (LeastHarmResult(x,y)))", "all x y.((RightThing(x) & LowestHarm(y)) -> RightThing(x,y))"]}
{"id": "enwn_validation_99", "nl": "If you don't push the old lady, the truck will hit her.", "fol": "", "prediction": ["all x.((Than(x) & -PushOldLady(x)) -> Hits(x,Lady))", "all x.((DoesNotPushOldLady(x) & Hits(x,oldLady)) -> Truck(x))", "-PutsOldLady(x) -> HitsShe(x))", "all x.((PushOldLady(x) & -PushOldLady(x)) -> Hits(x,lady))", "all x y.((Truck(x) & OldLady(y) & -Push(x,y)) -> Hits(x,y))", "all x.((ThanTruck(x) & -PushOldLady(x)) -> Hits(x,Lady))", "all x.((Truck(x) & -PushOldLady(x)) -> HitsShe(x))", "all x y.((Tramble(x) & OldLady(y) & -Push(x,y)) -> Hits(x,y))", "all x.((DoesNotPushOldLady(x) & HitsOldLady(x)) -> Truck(x))", "-PushOldLady(x) -> Hits(x,lady))", "all x.((Fumer(x) & -PushOldLady(x)) -> HitsShe(x))", "-PutsOldLady(x) -> HitsShe(x))", "(-PushOldLady(x) | TruckHit(x)))", "(-PushOldLady(Truck) -> HitsShe(Truck))", "all x y.((Truck(x) & OldLady(y) & -Push(x,y)) -> Hits(x,y))", "all x.((Truck(x) & -PushOldLady(x)) -> HitsShe(x))"]}
{"id": "enwn_validation_100", "nl": "Getting hit by a vehicle is likely to cause serious injury or death.", "fol": "", "prediction": ["all x.((Vehicle(x) & Hit(x)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x y.((Vehicle(x) & HitBy(x,y)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x.((Vehicle(x) & HitBy(x)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x y.((Vehicle(x) & Hit(x,y)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x.(HitByVehicle(x) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x y z.((Vehicle(x) & HitBy(x,y) & Vehicle(z)) -> (CausesSeriousInjury(x,z) | CausesDeath(x,z)))", "all x y.((Vehicle(x) & Vehicle(y) & Hit(x,y)) -> (CausesSeriousInjury(x,y) | CausesDeath(x,y)))", "all x.((Vehicle(x) & Hit(x)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "exists x.(Vehicle(x) & Hit(x) & (CausesSeriousInjury(x) | CausesDeath(x)))", "all x.((Vehicle(x) & HitBy(x)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x.(HitByVehicle(x) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x y.((Vehicle(x) & HitBy(x,y)) -> (CausesSeriousInjury(y) | CausesDeath(y)))", "all x y.((Vehicle(x) & Vehicle(y)) -> (CausesSeriousInjury(x,y) | CausesDeath(x,y)))", "all x.((Vehicle(x) & Hit(x)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x.((Vehicle(x) & HitBy(x,y)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x y.((Vehicle(x) & HitBy(x,y)) -> (CausesSeriousInjury(x) | CausesDeath(x)))"]}
{"id": "enwn_validation_101", "nl": "Pushing the old lady will likely give her minor injuries at worst.", "fol": "", "prediction": ["all x.(PushingOldLady(x) -> (LimitedInjuries(x) & Worst(x)))", "all x.(PushingOldLady(x) -> GivesMinimalInjuries(x))", "all x.((OldLady(x) & Pushing(x)) -> GivesMinimalInjuries(x))", "all x y.((OldLady(x) & Pushing(x,y)) -> GivesMinimalInjuries(x,y))", "all x y.((PushingOldLady(x) & OldLady(y)) -> GivesMinorInjuries(x,y))", "all x.(PushingOldLady(x) -> (LimitedInjuries(x) | WorstInjuries(x)))", "all x y z.((OldLady(x) & Pushing(x,y) & MinorInjuries(z)) -> Gives(x,z))", "all x y.((OldLady(x) & Pushing(x,y)) -> (GivesMinorInjuries(x,y) & Worst(y)))", "all x y.((PushingOldLady(x) & OldLady(y)) -> (GivesMinorInjuries(y,x) | Worst(y,x)))", "all x.((PushingOldLady(x) & GivesMinorInjuries(x)) -> GivesMinorInjuries(x))", "all x.(Pushing(x) -> (OldLady(x) & MinorInjuries(x)))", "all x.((OldLady(x) & Pushing(x)) -> GivesMinimalInjuries(x))", "all x.(PushingOldLady(x) -> GivesMinorInjuriesAtWorst(x))", "all x y.((PushingOldLady(x) & OldLady(y)) -> GivesMinimalInjuries(x,y))", "all x y.((OldLady(x) & Pushing(x,y)) -> GivesMinorInjuries(x,y))", "All x.(PushingOldLady(x) -> GivesMinimalInjuries(x))"]}
{"id": "enwn_validation_102", "nl": "If you don't push the old lady, she will suffer a serious injury or die.", "fol": "", "prediction": ["all x.((OldLady(x) & -Push(x)) -> (SufferSeriousInjury(x) | Die(x)))", "all x.((PutsOldLady(x) & -PutsOldLady(x)) -> (SuffersSeriousInjury(x) | Dies(x)))", "-PutsTheOldLady(x) -> (SuffersSeriousInjury(x) | Dies(x)))", "all x.((OldLady(x) & -Push(x)) -> (SuffersSeriousInjury(x) | Dies(x)))", "(-PushOldLady(x) -> (SufferSeriousInjury(x) | Die(x))))", "all x.((PutsOldLady(x) & -Puts(x)) -> (SuffersSeriousInjury(x) | Dies(x)))", "all x y.((OldLady(x) & -Push(x,y)) -> (SufferSeriousInjury(x) | Die(x)))", "all x.(PutsOldLady(x) -> (SuffersSeriousInjury(x) | Dies(x)))", "all x.((PutsOldLady(x) & -Push(x)) -> (SuffersSeriousInjury(x) | Dies(x)))", "all x.((OldLady(x) & -Push(x)) -> (SufferSeriousInjury(x) | Die(x)))", "all x y.((OldLady(x) & -Push(x,y)) -> (SuffersSeriousInjury(x,y) | Dies(y,x)))", "all x.((OldLady(x) & -Puts(x)) -> (SuffersSeriousInjury(x) | Dies(x)))", "all x.((Push(x) & -PushOldLady(x)) -> (SuffersSeriousInjury(x) | Dies(x)))", "all x y.((OldLady(x) & -Puts(x,y)) -> (SuffersSeriousInjury(x,y) | Dies(x,y)))", "all x.((OldLady(x) & -Push(x)) -> (SuffersSeriousInjuries(x) | Dies(x)))", "all x y.((OldLady(x) & -Push(x,y)) -> (SufferSeriousInjuries(x) | Die(x)))"]}
{"id": "enwn_validation_103", "nl": "If you push the old lady, she will suffer less harm than if you don't.", "fol": "", "prediction": ["all x y.((PutsOldLady(x) & -PutsOldLady(y)) -> LessHarm(x,y))", "all x.(PutsOldLady(x) -> LessHarm(x))", "all x y.((OldLady(x) & Push(x,y)) -> LessHarm(x,y))", "all x y.((PutsOldLady(x) & Pushes(x,y)) -> LessHarm(y))", "all x.((PutsOldLady(x) & -PutsOldLady(x)) -> LessHarm(x))", "(PutsOldLady(x) -> LessHarm(x))", "all x y.((PushOldLady(x) & PushOldLady(y)) -> LessHarm(x,y))", "all x y z.((PutsOldLady(x) & Pushes(x,y) & OldLady(z)) -> LessHarm(x,z))", "all x.((PushOldLady(x) & -PushOldLady(x)) -> LessHarm(x,y))", "all x.(PutsOldLady(x) -> LessHarm(x))", "(PutsOldLady(x) -> LessHarm(x))", "(PutsOldLady(x) & SheSuffersLessHarm(x))", "all x y.((OldLady(x) & Push(x,y)) -> LessHarm(y))", "all x y.((Push(x) & OldLady(y) & -Push(x,y)) -> LessHarm(y,x))", "all x y.((PutsOldLady(x) & -PutsOldLady(y)) -> LessHarm(x,y))", "all x.(PutsOldLady(x) -> LessHarm(x,y))"]}
{"id": "enwn_validation_104", "nl": "You should push the old lady.", "fol": "", "prediction": ["all x.(PushOldLady(x) -> -PushOldLady(x))", "all x.(PutsOldLady(x) -> -Push(x))", "all x.((OldLady(x) & Push(x)) -> Push(x))", "-PushOldLady(x)", "you should push the old lady.", "all x y.((OldLady(x) & Push(y,x)) -> Push(x,y))", "-(PushOldLady(x) & PushOldLady(x))", "all x.(PutOldLady(x) -> Push(x))", "all x.(PushOldLady(x) -> ShouldBePushing(x))", "(PutsOldLady(x) | PushesOldLady(x)))", "all x y.((OldLady(x) & Push(y)) -> Push(x,y))", "all x.((OldLady(x) & Push(x)) -> Push(x))", "-PutsOldLady(x)", "all x y.((OldLady(x) & Push(y,x)) -> ShouldPush(x,y))", "All x.(PushOldLady(x) -> PushOldLady(x))", "All x.((PushTheOldLady(x)) -> Push(x))"]}
{"id": "enwn_validation_105", "nl": "Emily told Cassandra to copy her homework so that Cassandra wouldn't get in trouble.", "fol": "", "prediction": ["all x y.((Emily(x) & Cassandra(y)) -> (CopiesHomework(x,y) & -GetsInTraffic(y)))", "all x y z.((Emily(x) & Cassandra(y) & Homework(z)) -> (Copies(x,y,z) & -GetsInTraffic(y,z)))", "(CassandraCopiesHomework(Emily) & Cassandra-GetsInTraffic(Emily))", "(CopyHomework(Emily) & Cassandra(Cassandra))", "(all x.(Emily(x) -> CopyHomework(x)))", "((Emily(e) & Cassandra(e)) -> CopyHomework(e,e))", "(CassandraCopysHomework(Emily) & CassandraNeverGetsInTraffic(Emily))", "Emily told Cassandra to copyHomeworkSoSheWon'tGetInTraffic(Cassandra)", "all x y z.((Emily(x) & Cassandra(y) & Homework(z) & Cassandra(z)) -> (Copies(x,y,z) & -GetsInTraffic(y,z)))", "all x y.((Emily(x) & Cassandra(y)) -> (CopiesHomework(x,y) & -GivesInTrouble(y,x)))", "all x y.((Cassandra(x) & Emily(y)) -> (CopiesHomework(x,y) & Cassandra(y)))", "all x.((Emily(x) & Cassandra(x)) -> (CopiesHomework(x) & -GetsInTraffic(x)))", "Emily told Cassandra to copyhomework so that Cassandra wouldn't get in trouble.", "(EmilyCassindraCopyHomework(Emily) & Cassandra(Cassindra))", "Emily told Cassandra to copyherHomework so that Cassandra wouldn't get in Trouble.", "all x y.((Emily(x) & Cassandra(y)) -> (CopyHomework(x,y) & -GetInTraffic(y)))"]}
{"id": "enwn_validation_106", "nl": "Copying homework is cheating.", "fol": "", "prediction": ["all x.(CopyingHomework(x) -> Cheating(x))", "all x.(CopiesHomework(x) -> Cheating(x))", "(CopyingHomework(x) -> Cheating(x))", "all x.((Homework(x) & Copying(x)) -> Cheating(x))", "all x.(CopyingHomework(x) -> Cheating(x))", "all x.(CopiesHomework(x) -> Cheating(x))", "all x y.((Homework(x) & Copying(y,x)) -> Cheating(x))", "(CheatingHomework(copying) -> Cheating(copying))", "all x.((Homework(x) & Copying(x)) -> Cheating(x))", "all x.(CopyingHomework(x) -> Cheating(x))", "all x y.((Homework(x) & Copying(y,x)) -> Cheating(x))", "all x y.((Homework(x) & HomeworkCopy(y)) -> Cheating(x))", "all x.(CopiesHomework(x) -> Cheating(x))", "exists x.(Homework(x) & Copying(x))", "all x y.((Homework(x) & Copying(y,x)) -> Cheating(x))", "all x.(CopyingHomework(x) -> Cheating(x))"]}
{"id": "enwn_validation_107", "nl": "Cheating is wrong.", "fol": "", "prediction": ["all x.(Cheating(x) -> Wrong(x))", "all x.(Cheat(x) -> Wrong(x))", "all x.(Cheating(x) -> Wrong(x))", "all x y.((Cheating(x) & Wrong(y)) -> Cheating(x))", "all x.(Cheating(x) -> Irresponsible(x))", "(Wrong(cheating))", "all x y.((Cheat(x) & Wrong(y)) -> Cheating(x))", "(IsWrong(cheating))", "all x.(Cheat(x) -> Wrong(x))", "all x.(Cheat(x) -> Irresponsible(x))", "all x y.((Cheating(x) & Wrong(y)) -> Cheating(x))", "(WrongCheating(cheating))", "all x.(Cheating(x) -> Wrong(x))", "exists x.(Cheating(x) & Worst(x))", "exists x.(Cheating(x) & IsWrong(x))", "All x.(Cheat(x) -> Wrong(x))"]}
{"id": "enwn_validation_108", "nl": "Telling someone to do something is influencing them to do it.", "fol": "", "prediction": ["all x y.((TellsToDo(x,y) & Person(y)) -> InfluencesToDo(x,y))", "all x y.((Tells(x,y) & Person(y)) -> InfluencesToDo(x,y))", "all x.((TellsToDo(x) & InfluencesToDo(x)) -> TellsToDo(x))", "all x.(TellsToDo(x,y) -> InfluencesToDo(x,y))", "all x y.((TellsTo(x,y) & Person(y)) -> InfluencesToDo(x,y))", "all x y z.((TellsTo(x,y) & Person(z)) -> InfluencesToDo(x,z))", "(InfluencesDoing(x) -> TellsToDo(x))", "all x.((TellsToDo(x) & InfluencesToDo(x)) -> Doing(x))", "all x y.((TellsToDo(x,y) & Person(y)) -> InfluencesToDo(x,y))", "all x.(TellsToDo(x,y) -> InfluencesToDo(x,y))", "all x.((TellsToDo(x) & Influences(x)) -> Doing(x))", "all x y z.((TellsTo(x,y) & Person(z)) -> InfluencesToDo(x,z))", "all x y.((TellsTo(x,y) & Person(y)) -> InfluencesToDo(x,y))", "all x.(TellsToDo(x) -> InfluencesToDo(x))", "all x y.((TellsToDo(x,y) & Person(y)) -> InfluencesToDo(x,y))", "all x.((TellsToDo(x) & InfluencesToDo(x)) -> TellsToDo(x))"]}
{"id": "enwn_validation_109", "nl": "You shouldn't influence someone to do something wrong.", "fol": "", "prediction": ["all x.((Influence(x) & DoingWrong(x)) -> -Influence(x))", "all x y.((Person(x) & Person(y)) -> -Influence(x,y))", "all x.((Person(x) & -Influence(x)) -> DoseWrong(x))", "all x.((Influence(x) & Person(x) & DoingWrong(x)) -> -Influence(x))", "all x y.((Person(x) & Person(y)) -> -InfluenceToDoWrong(x,y))", "-InfluencesToDoWrong(x)", "all x y.((Influence(x,y) & Person(y)) -> -Influence(x,y))", "all x.((Impacts(x) & Person(x) & DoingWrong(x)) -> -Impacts(x,y))", "all x y.((Person(x) & DoingWrong(y)) -> -Influence(x,y))", "(-InfluenceToDoWrong(you,Person))", "all x y.((Influence(x,y) & Person(y)) -> -ImpactsToDoWrong(x,y))", "all x.((Person(x) & -Influence(x,y)) -> DoseWrong(x,y))", "exists x.(Influence(x,y) & -Influence(x,z))", "-InfluencesToDoWrong(x)", "(-InfluenceToDoWrong(you,Person))", "all x y.((Person(x) & Person(y)) -> -Influence(x,y))"]}
{"id": "enwn_validation_110", "nl": "Copying homework is wrong.", "fol": "", "prediction": ["all x.(CopyHomework(x) -> Wrong(x))", "all x.(CopiesHomework(x) -> Wrong(x))", "(CopyHomework(x) -> Wrong(x))", "(CopiesHomework(x) -> Wrong(x))", "all x.((Homework(x) & Copying(x)) -> Wrong(x))", "all x.(CopyingHomework(x) -> Wrong(x))", "all x.(CopiesHomework(x) -> Wrong(x))", "all x y.((Homework(x) & Copying(y,x)) -> Wrong(x))", "all x.((Homework(x) & Copying(x)) -> Wrong(x))", "all x.(CopyHomework(x) -> Wrong(x))", "exists x.(Homework(x) & Copying(x))", "all x y.((Homework(x) & Homework(y) & Copying(x,y)) -> Wrong(x))", "all x.(CopiesHomework(x) -> Wrong(x))", "All x y.((Homework(x) & Copying(y)) -> Wrong(x))", "all x.(CopyingHomework(x) -> Worst(x))", "exists x.(Homework(x) & Copying(x))"]}
{"id": "enwn_validation_111", "nl": "You shouldn't tell someone to do something wrong.", "fol": "", "prediction": ["all x.((Person(x) & -TellsToDoWrong(x)) -> -TellsToDoWrong(x))", "all x y.((Person(x) & Person(y)) -> -SellsToDoWrong(x,y))", "all x.((Person(x) & -SellsWrong(x)) -> -SellsWrong(x))", "all x.((Tells(x,y) & Person(y)) -> -DoseWrong(x,y))", "all x y.((Tells(x,y) & Person(y)) -> -DoseWrong(x,y))", "-(TellsToDoWrong(x) & Person(x)))", "all x y.((Person(x) & Person(y)) -> -TellsToDoWrong(x,y))", "all x.((Tells(x) & Person(x)) -> -DoseWrong(x))", "all x y.((Person(x) & Person(y) & TellsToDo(x,y)) -> -SellsToDo(x,y))", "-(TellsSomeoneToDoWrong(x))", "all x.((Person(x) & -TellsToDoWrong(x)) -> -TellsToDoWrong(x))", "all x.((Person(x) & TellsToDoWrong(x)) -> -SellsToDoWrong(x))", "(-TellsToDoWrong(x))", "-(SellsToDoWrong(x))", "exists x.(Tells(x,y) & -Tells(x,y))", "(-TellsToDoWrong(x))"]}
{"id": "enwn_validation_112", "nl": "You shouldn't tell someone to copy homework.", "fol": "", "prediction": ["all x.((Person(x) & -CopiesHomework(x)) -> -SellsToCopyHomework(x))", "all x y.((Person(x) & Homework(y)) -> -SellsToCopy(x,y))", "all x.((Tells(x,y) & Homework(y)) -> -Copies(x,y))", "all x.((Person(x) & -CopiesHomework(x)) -> -Sells(x,y))", "-(TellsToCopyHomework(x) & Person(x)))", "-(TellsToCopyHomework(x) & -TellsToCopyHomework(x)))", "(-TellsToCopyHomework(x))", "all x y.((Person(x) & Homework(y)) -> -SellToCopy(x,y))", "(-tellsToCopyHomework(x))", "all x.((Person(x) & -CopiesHomework(x)) -> -TellsToCopyHomework(x))", "all x.((Person(x) & -CopyHomework(x)) -> -SellsToCopyHomework(x))", "all x y.((Doctor(x) & Person(y)) -> -CopiesHomework(x,y))", "all x.((TellsToHomework(x)) -> -(TellsToHomework(x) & TellsHomework(x)))", "-(SellsHomework(x) & Person(x)))", "(-SellToCopyHomework(s))", "all x y.((Person(x) & Homework(y)) -> -Copies(x,y))"]}
{"id": "enwn_validation_113", "nl": "Emily should not have told Cassandra to copy her homework.", "fol": "", "prediction": ["all x.((Emily(x) & Cassandra(x)) -> -CopiesHomework(x))", "all x y.((Emily(x) & Cassandra(y)) -> -CopiesHomework(x,y))", "(-CassandraCopiesHomework(Emily))", "Emily should not have told Cassandra to copyHomework.", "((Emily(e) & Cassandra(e)) -> -CopiesHomework(e,e))", "all x.((Emily(x) & -Cassandra(x)) -> CopyHomework(x))", "(-(Emily(emily) & Cassandra(emily)) -> CopyHomework(emily,emily))", "(-CassandraCopiesHomework(Emily) -> -EmilyCopiesHomework(Emily))", "-(EmilyBoastsToCopyHomework(Emily,Cassindra))", "all x y.((Emily(x) & Cassandra(y)) -> -CopiesHomework(x,y))", "Emily should not have told Cassandra to copyhomework.", "all x.((Emily(x) & Cassandra(x)) -> -CopiesHomework(x,Emily))", "((Emily(e) & Cassandra(e)) -> -CopiesHomework(e,e))", "-(EmilyBoastsToCopyHomework(emily,emily))", "all x y.((Emily(x) & Cassandra(y)) -> -CopiesHomework(x,y))", "all x.((Emily(x) & Cassandra(x)) -> -CopiesHomework(x))"]}
{"id": "enwn_validation_114", "nl": "Making out with someone is an intimate act.", "fol": "", "prediction": ["all x.(MakingOutWith(x,y) -> IntimateAct(x))", "all x y.((MakingOut(x) & Person(y)) -> IntimateAct(x))", "all x.((MakingOutWith(x,y) & Person(y)) -> IntimateAct(x))", "all x y.((MakingOutWith(x,y) & Person(y)) -> IntimateAct(x))", "all x.((MakingOutWith(x) & Person(x)) -> IntimateAct(x))", "all x y.((MakingOut(x,y) & Person(y)) -> IntimateAct(x))", "All x y z.((MakingOut(x) & Person(y) & Person(z)) -> IntimateAct(x,y,z))", "all x.(MakingOutWith(x,y) -> IntimateAct(x))", "all x.(MakesOutWith(x,y) -> IntimateAct(x))", "all x y.((MakingOutWith(x,y) & Person(y)) -> IntimateAct(x))", "all x y.((MakesOutWith(x,y) & Person(y)) -> IntimateAct(x))", "all x.(MakingOutWith(x,y) -> IntimateAct(x,y))", "exists x.(MakingOut(x) & Person(x))", "All x.((MakingOutWith(x,y) & Person(y)) -> IntimateAct(x))", "all x y.((MakingOutWith(x,y) & Person(y)) -> IntimateAct(x,y))", "exists x.(MakingOutWith(x) & IntimateAct(x))"]}
{"id": "enwn_validation_115", "nl": "Mark recorded Jess making out with someone while she was drunk.", "fol": "", "prediction": ["all x y.((Mark(x) & Jess(y) & Drinking(y)) -> Recorded(x,y))", "Mark recordedJessMakingOutWithSomeone(Mark) & SheBecameDrunk(Mark))", "Mark & Jess(Mark) & MakingOutWith(Mark,Jess) & Drunk(Mark,Jess))", "all x y z.((Mark(x) & Jess(y) & Drinking(z)) -> Recorded(x,y,z))", "Mark recorded Jess MakingOutWithSomeone(Mark) & SheBecameDrunk(Mark)", "(Mark,Jess,Drunk(Mark) & Recorded(Mark,Jess,Drunk))", "(MakesOutWith(Mark,Jess) & Drunk(Mark))", "Mark recordedJessmakingOutWith(Mark,Jess) & WasDrunk(Mark,Jess))", "(RecordedWithMark(Mark,Jess) & WasDrunk(Mark))", "(Mark,Jess) & MadeOutWith(Mark,Jess) & Drunk(Mark))", "all x y.((Mark(x) & Jess(y) & Drinking(y)) -> RecordedWith(x,y))", "Mark RecordedJessMakingOutWithSomeoneWhileDrunk(Mark)", "Mark recorded Jess making out with someone while she was drunk.", "(Mark recorded Jess MakingOutWithSomeone(Mark) & SheBecameDrunk(Mark))", "Mark recordedJessMakingOutWithSomeoneWhileDrunk(Mark)", "Mark recorded Jess MakingOutWithSomeoneWhileDrunk(Mark)"]}
{"id": "enwn_validation_116", "nl": "You need to be aware that something is happening in order to consent to it.", "fol": "", "prediction": ["all x.((AwareOf(x,y) & Happening(y)) -> ConsentsTo(x,y))", "all x.(Consent(x) -> (AwareOf(x,y) & Happening(y)))", "all x.((AwareOf(x) & Consent(x)) -> Happening(x))", "all x y.((Consent(x) & Happening(y)) -> Awareness(x,y))", "all x.((AwareOfOccurring(x) & ConsentsTo(x)) -> NeedsAwareness(x))", "all x y.((AwareOf(x,y) & Happening(y)) -> ConsentsTo(x,y))", "all x.(Consent(x) -> (AwareOfOccurring(x) & Consents(x)))", "(AwareOfOccurring(x) -> ConsentToOccurring(x))", "all x y.((Consent(x) & Event(y)) -> AwarenessOf(x,y))", "all x y z.((Consent(x) & Event(y) & Event(z)) -> NeedsAwareness(x,y,z))", "exists x.(Consent(x) & AwarenessOfOccurring(x))", "all x y.((AwareOf(x,y) & Happening(y)) -> ConsentsTo(x,y))", "exists x.(Consent(x) & AwarenessOf(x,y))", "all x y.((Consent(x) & Happening(y)) -> AwareOf(x,y))", "exists x.(Consent(x) & AwarenessOf(x,Occurring))", "exists x.(ConsentTo(x) & AwarenessOf(x,y))"]}
{"id": "enwn_validation_117", "nl": "Jess wasn't aware that Mark was filming her.", "fol": "", "prediction": ["Jess n'acquiredMarkFilming(Jess) & -AcquiredMarkFilming(Jess))", "all x.((Jess(x) & Mark(x)) -> -AwareOfFilming(x))", "(-acquaintedJessWithMark(Jess))", "(-AwareMarkFilming(Jess))", "Jess n'\u00e9tait pas aware Mark was filming her.", "(-accountable(Jess,Mark) & Filming(Mark,Jess))", "Jess n'acquiredMarkBeforeFilming(Jess,Mark)", "all x.((Jess(x) & Mark(x)) -> -AwareOfFilming(x,Jess))", "Jess wasn't aware Mark was filming her.", "-(AwareOfMark(Jess) & Filming(Mark))", "(-AwareMarkFilming(Jess))", "Mark was filming her, & Jess neess.", "-(Jess(Jess) & Mark(Mark))", "(-acquaintedWithMark(Jess) & Filming(Mark,Jess))", "Jess neasledMark(n) & Filmed(n))", "Jess -awareMarkFilming(Jess)"]}
{"id": "enwn_validation_118", "nl": "You shouldn't record someone in a compromising situation without their consent.", "fol": "", "prediction": ["all x y.((Person(x) & CompromisesSituation(y)) -> -Record(x,y))", "all x.((Person(x) & CompromisingSituation(x)) -> -Record(x,y))", "all x y.((CompromigratingSituation(x) & Person(y)) -> -Record(x,y))", "all x.(CompromigratingSituation(x) -> -RecordsWithoutConsent(x))", "-(RecordsInCompromigratingSituation(x) & -Consent(x))", "all x y.((Person(x) & CompromisingSituation(y)) -> -Record(x,y))", "all x.((CompromigratingSituation(x) & -Record(x,y)) -> -CompromigratingSituation(y))", "all x.((Person(x) & CompromisesSituation(x)) -> -Record(x,y))", "all x y z.((Person(x) & CompromisesSituation(y) & Consent(z)) -> -Record(x,y,z))", "(all x.(CompromigratingSituation(x) -> -Record(x,y)))", "(all x.(Compromise(x) -> -RecordInCompromigratingSituation(x)))", "all x y.((CompromigratingSituation(x) & Person(y)) -> -Record(x,y))", "all x.(Compromises(x) -> -Records(x,y))", "all x y.((Person(x) & Compromises(y)) -> -RecordsWithoutConsent(x,y))", "all x y.((Compromise(x) & Person(y)) -> -Record(x,y))", "all x.(CompromisingSituation(x) -> -RecordsWithoutConsent(x))"]}
{"id": "enwn_validation_119", "nl": "A compromising situation is one which could cause embarrassment or shame if made public.", "fol": "", "prediction": ["all x.(CompromisingSituation(x) -> (CausesEmbarrasse(x) | CausesShame(x)))", "all x.((Situation(x) & Compromise(x)) -> (CausesEmbarrasse(x) | CausesShame(x)))", "all x.(CompromigratingSituation(x) -> (CausesEmbarrasse(x) | CausesShame(x)))", "all x y.((CompromisingSituation(x) & Public(y)) -> (CausesEmbarrassment(x,y) | CausesShadow(x,y)))", "all x.(CompromisingSituation(x) -> (CausesEmbarrassment(x) | CausesShadow(x)))", "all x.(CompromiseableSituation(x) -> (CausesEmbarrasse(x) | CausesShame(x)))", "all x y.((CompromigratingSituation(x) & Public(y)) -> (CausesEmbarrassment(x,y) | CausesShadow(x,y)))", "all x.((Situation(x) & Compromising(x)) -> (CausesEmbarrassment(x) | CausesShadow(x)))", "all x.((Situation(x) & Compromises(x)) -> (CausesEmbarrasse(x) | CausesShame(x)))", "all x y.((CompromisingSituation(x) & Public(y)) -> (CausesEmbarrasse(x,y) | CausesShame(x,y)))", "all x.(CompromiseableSituation(x) -> (CausesEmbarrasse(x) | CausesShame(x)))", "all x.(CompromisingSituation(x) -> (CausesEmbarrassment(x) | CausesShadow(x)))", "exists x.(CompromigratingSituation(x) & (CausesEmbarrassment(x) | CausesShadow(x)) & MadePublic(x))", "all x y.((CompromiseableSituation(x) & Public(y)) -> (CausesEmbarrassment(x,y) | CausesShadow(x,y)))", "all x.(CompromiseableSituation(x) -> (CausesEmbarrassment(x) | CausesShadow(x)))", "all x.(CompromittingSituation(x) -> (CausesEmbarrassement(x) | CausesShame(x)))"]}
{"id": "enwn_validation_120", "nl": "Physical intimacy can be embarrassing if it's made public.", "fol": "", "prediction": ["all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassing(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassed(x))", "all x y.((PhysicalIntimacy(x) & MadePublic(y)) -> Embarrassing(x,y))", "all x.(EmbarrassingIntimacy(x) -> (PhysicalIntimacy(x) & MadePublic(x)))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassing(x))", "all x y.((PhysicalIntimacy(x) & Public(y)) -> Embarrassed(x,y))", "exists x.(PhysicalIntimacy(x) & MadePublic(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassed(x))", "all x y.((PhysicalIntimacy(x) & MadePublic(y)) -> Embarrassed(x,y))", "all x.((PhysicalIntimacy(x) & Public(x)) -> Embarrassing(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassing(x))", "all x y.((PhysicalIntimacy(x) & Public(y)) -> Embarrassing(x,y))", "exists x.(PhysicalIntimacy(x) & MadePublic(x))", "all x.((PhysicalIntimity(x) & MakesPublic(x)) -> Embarrassing(x))", "all x y.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassing(x,y))", "exists x.(PhysicalIntimacy(x) & MadePublic(x))"]}
{"id": "enwn_validation_121", "nl": "Mark recorded Jess being intimate with someone while she was drunk.", "fol": "", "prediction": ["Mark recorded Jess being intimate with someone while she was drunk.", "all x y.((Mark(x) & Jess(y) & Intimate(y,x)) -> Drunk(y))", "(Intimate(Mark,Jess) & Drunk(Mark))", "Mark & Jess(Mark) & IntimateWith(Mark,Jess) & Drunk(Mark,Jess))", "(IntimateWith(Mark,Jess) & Drunk(Mark))", "Mark recorded Jess being intimateWithSomeone(Mark) & She WasDrunk(Mark)", "Mark RecordsIntimateWithPerson(Mark,Jess) & SheIsDrunk(Mark,Jess))", "all x y.((Mark(x) & Jess(y)) -> IntimateWith(y,x))", "Mark recordedJessBeingIntimateWithSomeone(Mark) & SheBecameDrunk(Mark))", "(IntimateWith(Mark) & Drunk(Mark))", "Mark recorded Jess being intimately with someone while she was drunk.", "all x y.((Mark(x) & Jess(y) & Drunk(y)) -> IntimateWith(y,x))", "(Intimate(Mark) & JessDrunk(Mark))", "Mark recorded Jess being intimate with someone while she was drunk.", "(Intimate(Mark,Jess) & Drunk(Mark))", "Mark recorded Jess being intimateWithSomeoneWhileDrunk(Mark)"]}
{"id": "enwn_validation_122", "nl": "Jess did not consent to Mark filming her.", "fol": "", "prediction": ["(-ConsentToMarkFilming(Jess))", "all x.((Jess(x) & Mark(y)) -> -ConsentsToFilm(x,y))", "Jess did not consent to Mark filming her.", "Jess -ConsentsToMarkFilming(Jess)", "(-ConsentsToMarkFilming(Jess))", "-(ConsentsToMark(Jess,Mark) & Jess(Jess))", "all x.((Jess(x) & Mark(y)) -> -ConsentsToFilm(x,y))", "(-ConsentToMark(Jess) & Filming(Mark,Jess))", "-(ConsentsToMark(Jess) & Films(Mark,Jess))", "(-ConsentToMarkFilming(Jess))", "Jess did not consent to Mark filming her.", "(-ConsentsToMarkFilming(Jess))", "Jess & Mark FilmedHer(Mark)", "Jess -ConsentsToMarkFilming(Jess,Mark)", "(-ConsentsToMark(Jess,Mark))", "Jess did not consent to Mark filming her."]}
{"id": "enwn_validation_123", "nl": "Mark recorded Jess being intimate with someone without her consent.", "fol": "", "prediction": ["Mark & Jess(Mark) & IntimateWith(Mark,Jess) & -Consent(Mark,Jess))", "(IntimateWith(Mark,Jess) & -Consent(Mark,Jess))", "Mark recorded Jess being intimateWith(Mark,Jess) & -Consent(Mark,Jess))", "all x y.((Mark(x) & Jess(y)) -> IntimateWith(y,x))", "(Intimate(Mark,Jess) & -Consent(Mark,Jess))", "Mark recorded Jess beingIntimateWith(Mark,Jess) & -Consent(Mark,Jess))", "Mark & Jess RecordedIntimateWith(Mark,Jess) & -Consent(Mark,Jess))", "Mark acoustically recorded Jess being intimateWith(Mark,Jess) & -Consent(Mark,Jess))", "(IntimateWith(Mark) & -Consent(Mark))", "Mark recordedJessBeingIntimateWith(Mark,Jess) & -Consent(Mark,Jess))", "Mark recorded Jess being intimateWith(Mark,Jess) & -Consent(Mark,Jess))", "Mark RecordsIntimateWithWithoutConsent(Mark)", "all x y.((Mark(x) & Jess(y)) -> IntimateWith(y,x))", "(IntimateWith(Mark,Jess) & -Consent(Mark,Jess))", "(Intimate(Mark) -> JessWithOutConsent(Mark))", "Mark recorded Jess being intimate with someone without her consent."]}
{"id": "enwn_validation_124", "nl": "Physical intimacy is a compromising situation.", "fol": "", "prediction": ["all x.(PhysicalIntimacy(x) -> CompromiseableSituation(x))", "all x y.((PhysicalIntimacy(x) & InCompromisingSituation(y)) -> Compromising(x))", "all x.(PhysicalIntimacy(x) -> CompromisesSituation(x))", "(CompromiseableSituation(physicalIntimacy))", "all x.((PhysicalIntimacy(x) & CompromisesSituation(x)) -> Compromises(x))", "all x.(PhysicalIntimacy(x) -> CompromisingSituation(x))", "all x y.((PhysicalIntimacy(x) & PhysicalIntimacy(y)) -> CompromisesSituation(x,y))", "all x y.((PhysicalIntimacy(x) & InCompromigratingSituation(y)) -> Compromigrating(x,y))", "all x y.((PhysicalIntimacy(x) & PhysicalIntimacy(y) & CompromisesSituation(x,y)) -> CompromisesSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromisingSituation(x))", "all x.((PhysicalIntimacy(x) & CompromisesSituation(x)) -> Compromises(x))", "all x.(Intimacy(x) -> Compromiseable(x))", "all x.(PhysicalIntimacy(x) -> CompromisingSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromiseableSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromisingSituation(x))", "all x.(PhysicalIntimity(x) -> CompromisingSituation(x))"]}
{"id": "enwn_validation_125", "nl": "You shouldn't record someone being physically intimate without their consent.", "fol": "", "prediction": ["all x.((Person(x) & PhysicallyIntimate(x)) -> -Record(x,y))", "all x.((Person(x) & Intimate(x)) -> -Record(x,y))", "all x y.((Person(x) & Person(y) & Intimate(x,y)) -> -Record(x,y))", "all x y.((Person(x) & Intimate(y)) -> -Record(x,y))", "-(RecordIntimateWithoutConsent(x))", "(all x.(Intimate(x) -> -RecordsWithoutConsent(x)))", "all x.((Intimate(x) & -Intimate(x)) -> -Intimate(x))", "all x.((Person(x) & PhysicallyIntimate(x)) -> -RecordsWithoutConsent(x))", "-(RecordsIntimate(x) & -RecordsIntimate(x)))", "all x y.((Person(x) & Intimate(y) & -Intimate(x,y)) -> -Intimate(x,y))", "all x y.((Person(x) & Person(y) & Intimate(x,y)) -> -RecordsWithoutConsent(x,y))", "-(RecordIntimateWithoutConsent(x))", "all x.((Person(x) & Intimate(x)) -> -Record(x,y))", "(all x.(Intimate(x) -> -RecordWithConsent(x)))", "all x.((Person(x) & PhysicallyIntimate(x) & -Consent(x)) -> -Record(x,y))", "all x y.((Person(x) & Intimate(y) & -Intimate(x,y)) -> -Intimate(x,y))"]}
{"id": "enwn_validation_126", "nl": "Mark should not have recorded Jess.", "fol": "", "prediction": ["Mark should not have recorded Jess.", "all x.((Mark(x) & -RecordedJess(x)) -> -RecordedJess(x))", "(-Mark(Mark) & Jess(Mark))", "-(Mark(Mark) & Jess(Mark))", "Mark should not have recordedJess.", "(-RecordedJess(Mark))", "all x.((Mark(x) & -RecordedJess(x)) -> -RecordedJess(x))", "Mark should not have recorded Jess.", "(-Mark(Mark) & Jess(Mark))", "-(Mark(Mark) & Jess(Mark))", "Mark shouldn't have recorded Jess.", "all x.((Mark(x) & -RecordedJess(x)) -> -RecordedJess(x))", "(-RecordedJess(Mark))", "Mark should not have recordedJess.", "Mark should not have recorded Jess.", "Mark should not have recordedJess(Mark)"]}
{"id": "enwn_validation_127", "nl": "Putting yourself or others at unnecessary risk is reckless.", "fol": "", "prediction": ["all x.((PlacesYouOrOthers(x) & UnnecessaryRisk(x)) -> Reckless(x))", "all x.((PutsYouOrOthers(x) & UnnecessaryRisk(x)) -> Reckless(x))", "(UnnecessaryRisk(x) -> Reckless(x))", "all x.((PlacesYouOrOthersAtUnnecessaryRisk(x)) -> Reckless(x))", "all x.((PuttingYourselfOrOthersAtUnnecessaryRisk(x)) -> Reckless(x))", "all x y.((PutsOnYou(x) | PutsOnOthers(x,y)) -> Reckless(x))", "all x.((Self(x) | Others(x)) -> UnnecessaryRisk(x))", "all x.(PuttingYourselfOrOthersAtUnnecessaryRisk(x) -> Reckless(x))", "(UnnecessaryRisk(x) -> (PutsYouOrOthersAt(x) | PutsYouOrOthersAt(x))))", "all x y.((Self(x) | Others(y)) -> UnnecessaryRisk(x,y))", "all x.((PutsYouOrOthersAtUnnecessaryRisk(x)) -> Reckless(x))", "Putting yourself or others at unnecessaryRisk is reckless.", "all x y.((PlacesYourselfOrOthersAtUnnecessaryRisk(x,y)) -> Reckless(x))", "(UnnecessaryRisk(x) -> Reckless(x))", "All x.(PuttingYouOrOthersAtUnnecessaryRisk(x) -> Reckless(x))", "all x.((Self(x) | Others(x)) -> Reckless(x))"]}
{"id": "enwn_validation_128", "nl": "You should not behave recklessly.", "fol": "", "prediction": ["all x.((BehavesRecklessly(x) & -BehavesRecklessly(x)) -> -BehavesRecklessly(x))", "-RecklessBehavior(x)", "all x.((BehavesRecklessly(x)) -> -BehavesRecklessly(x))", "all x.((BehaveRecklessly(x) & -BehaveRecklessly(x)) -> -BehaveRecklessly(x))", "-(BehavesRecklessly(x) & -BehavesRecklessly(x))", "-BehaveRecklessly(x)", "-RecklessBehavior(x)", "all x.((BehavesRecklessly(x) & -BehavesRecklessly(x)) -> -BehavesRecklessly(x))", "all x.((BodyReckless(x) & -BehavesRecklessly(x)) -> -BehavesRecklessly(x))", "all x.(RecklessBehavior(x) -> -(Behavior(x) & Behavior(x)))", "all x.((BehavingRecklessly(x)) -> -(BehavesRecklessly(x) & -BehavesRecklessly(x)))", "all x.((BodyReckless(x) & -BehaveReckless(x)) -> -BehaveReckless(x))", "-(BehavesRecklessly(x))", "all x.((BehavesRecklessly(x)) -> -BehavesRecklessly(x))", "-RecklessBehavior(x)", "(-RecklessBehavior(x))"]}
{"id": "enwn_validation_129", "nl": "Taking a right at a red light involves entering a crossing lane.", "fol": "", "prediction": ["all x y.((Right(x) & RedLight(y)) -> EntersCrossingLane(x,y))", "all x.((Right(x) & RedLight(x)) -> EntersCrossingLane(x))", "all x y.((Right(x) & RedLight(y) & EntersCrossingLane(x,y)) -> TakesRight(x,y))", "all x.((TakesRightAtRedLight(x) & EntersCrossingLane(x)) -> InvolvesCrossingLane(x))", "all x y.((TakesRightAtRedLight(x) & RedLight(y)) -> EntersCrossingLane(x,y))", "(TakingRightAtRedLight(x) -> EntersCrossingLane(x))", "all x.((Right(x) & RedLight(x)) -> EntersCrossingLane(x))", "all x.(TakesRightAtRedLight(x) -> EntersCrossingLane(x))", "all x y z.((Right(x) & RedLight(y) & Lane(z) & TakesRight(x,y)) -> Enters(x,z))", "all x y.((Right(x) & RedLight(y)) -> EntersCrossingLane(x,y))", "all x y.((TakesRightAtRedLight(x) & RedLight(y)) -> EntersCrossingLane(x,y))", "all x y.((TakesRightAtRedLight(x,y) & RedLight(y)) -> EntersCrossingLane(x,y))", "all x y z.((Right(x) & RedLight(y) & Lane(z) & Takes(x,y)) -> Enters(x,z))", "all x.(TakesRightAtRedLight(x) -> EntersCrossingLane(x))", "all x.((TakesRightAtRedLight(x) & EntersCrossingLane(x)) -> EntersLane(x))", "all x.((Right(x) & RedLight(x)) -> EntersCrossingLane(x))"]}
{"id": "enwn_validation_130", "nl": "Checking for traffic in a lane before entering it reduces the risk of a collision.", "fol": "", "prediction": ["all x y.((Lanes(x) & Lane(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((Lane(x) & Lane(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCollision(x,y))", "all x y z.((ChecksForTraffic(x) & Lane(y) & Lane(z) & Enters(y,z)) -> ReducesRiskOfCollision(x))", "all x.(ChecksForTrafficInLanes(x) -> ReducesRiskOfCollision(x))", "all x y z.((Lanes(x) & Lane(y) & Lane(z) & ChecksForTraffic(x,y,z)) -> ReducesRiskOfCollision(x,y))", "all x y.((Lanes(x) & Lane(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCollision(x,y))", "all x y z.((Lane(x) & Lane(y) & Lane(z) & ChecksForTraffic(x,y,z)) -> ReducesRiskOfCollision(x,y,z))", "all x.(ChecksTrafficInLanes(x) -> ReducesRiskOfCollision(x))", "all x.((ChecksForTraffic(x) & Lane(x) & Enters(x)) -> ReducesRiskOfCollision(x))", "all x y.((Lane(x) & Lane(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCollision(x))", "all x.(ChecksForTrafficInLanes(x) -> ReducesRiskOfCollision(x))", "all x y.((Lanes(x) & Lane(y) & ChecksForTraffic(x,y) & BeforeEntering(x,y)) -> ReducesRiskOfCollision(x))", "all x y z.((ChecksTraffic(x) & Lane(y) & Lane(z) & Enters(y,z)) -> ReducesRiskOfCollision(x,y,z))", "all x y.((Lane(x) & Lane(y) & ChecksForTrafficBeforeEntering(x,y)) -> ReducesRiskOfCollision(x))", "all x.(ChecksForTrafficInLane(x) -> ReducesRiskOfCollision(x))", "all x.(ChecksTrafficInLanes(x) -> ReducesRiskOfCollision(x))"]}
{"id": "enwn_validation_131", "nl": "If you could do something to reduce risk, but you don't, you're exposing yourself to avoidable risk.", "fol": "", "prediction": ["all x.(((PossibleToReduceRisk(x) & -PossibleToReduceRisk(x)) -> ExposesToAvoidableRisk(x))", "all x.(((CausesReduction(x) & -CausesReduction(x)) -> ExposesToAvoidableRisk(x))", "all x.((DoesReduceRisk(x) & -DoesReduceRisk(x)) -> ExposesToAvoidableRisk(x))", "all x y.(((Person(x) & Risk(y) & CanDo(x,y)) & -CanDo(x,y)) -> ExposesToAvoidableRisk(x))", "all x.((ReduceRisk(x) & -ReduceRisk(x)) -> ExposesToAvoidableRisk(x))", "(all x.((DoesReduceRisk(x) & -DoesReduceRisk(x)) -> ExposesToAvoidableRisk(x)))", "all x.(((Positive(x) & -Positive(x)) -> AvoidableRisk(x))", "all x y.(((Person(x) & CanDo(x,y) & ReduceRisk(x) & -CanDo(x,y)) -> ExposesToAvoidableRisk(x))", "all x.((Cause(x) & -Cause(x)) -> AvoidableRisk(x))", "all x y.((Person(x) & CanDoToReduceRisk(x) & -CanDoToReduceRisk(x)) -> ExposesToAvoidableRisk(y))", "all x y.(((CausesRisk(x) & -CausesRisk(y)) -> ExposesToAvoidableRisk(x,y))", "(all x.((CanDo(x) & ReduceRisk(x)) & -CanDo(x)) -> ExposesToAvoidableRisk(x))", "(all x.((CallToReduceRisk(x) & -CallToReduceRisk(x)) -> AvoidableRisk(x)))", "all x.((DoesRiskReduction(x) & -DoesRiskReduction(x)) -> ExposesToAvoidableRisk(x))", "all x.((CanDo(x) & -CanDo(x)) -> ExposesToAvoidableRisk(x))", "exists x.(ReduceRisk(x) & -(CanDo(x) & CanDo(x)) & ExposesToAvoidableRisk(x)))"]}
{"id": "enwn_validation_132", "nl": "You should not put yourself or others at unnecessary risk.", "fol": "", "prediction": ["all x.((You(x) | Others(x)) -> -UnnecessaryRisk(x))", "all x.((Self(x) | Others(x)) -> -UnnecessaryRisk(x))", "(-PosesAtUnnecessaryRisk(you,yourself) & -PosesAtUnnecessaryRisk(you,yourself))", "-(PutsYourselfOrOthersAtUnnecessaryRisk(x))", "all x y.((Self(x) | Others(y)) -> -UnnecessaryRisk(x,y))", "(-PutsAtUnnecessaryRisk(you) | PutsAtUnnecessaryRisk(you)))", "all x y.((You(x) & (Self(y) | Others(y))) -> -UnnecessaryRisk(x,y))", "-(PutsYouselfOrOthersAtUnnecessaryRisk(you,yourself) | PutsOthersAtUnnecessaryRisk(you,yourself)))", "((You(s) | Others(s))) -> -UnnecessaryRisk(s))", "all x.((You(x) | Others(x)) -> -UnnecessaryRisk(x))", "-(PlacesYourselfOrOthersAtUnnecessaryRisk(x))", "all x.((Self(x) | Others(x)) -> -UnnecessaryRisk(x))", "all x.((You(x) & -UnnecessaryRisk(x)) -> -PlacesAtRisk(x))", "all x y.((Self(x) | Others(y)) -> -UnnecessaryRisk(x,y))", "all x.((You(x) | Other(x)) -> -UnnecessaryRisk(x))", "all x.((Self(x) | Other(x)) -> -UnnecessaryRisk(x))"]}
{"id": "enwn_validation_133", "nl": "Checking for traffic in the crossing lane before taking a right at a red light reduces the risk of a collision.", "fol": "", "prediction": ["all x y.((ChecksTraffic(x) & CrossingLane(y) & TakesRightAtRedLight(x,y)) -> ReducesRiskOfCollision(x))", "all x.(ChecksForTrafficInCrossingLane(x) & TakesRightAtRedLight(x)) -> ReducesRiskOfCollision(x))", "all x y.((CheckingForTraffic(x) & CrossingLane(y) & TakesRightAtRedLight(x,y)) -> ReducesRiskOfCollision(x))", "all x y z.((CheckingForTraffic(x) & CrossingLane(y) & RedLight(z) & TakesRight(x,y,z)) -> ReducesRiskOfCollision(x))", "all x.((ChecksForTraffic(x) & TakesRightAtRedLight(x)) -> ReducesRiskOfCollision(x))", "all x.(ChecksTrafficInCrossingLane(x) & TakesRightAtRedLight(x)) -> ReducesRiskOfCollision(x))", "all x.((CheckingForTrafficInCrossingLane(x) & TakesRightAtRedLight(x)) -> ReducesRiskOfCollision(x))", "all x y z.((CheckingTraffic(x) & CrossingLane(y) & RedLight(z) & TakesRight(x,y,z)) -> ReducesRiskOfCollision(x))", "all x.(ChecksForTrafficInCrossingLane(x) & TakesRightAtRedLight(x)) -> ReducesRiskOfCollision(x))", "all x y.((ChecksTraffic(x) & CrossingLane(y) & TakesRightAtRedLight(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((ChecksTrafficInCrossingLane(x) & TakesRightAtRedLight(x)) -> ReducesRiskOfCollision(y))", "all x y.((CheckingForTraffic(x) & CrossingLane(y) & TakesRightAtRedLight(x,y)) -> ReducesRiskOfCollision(x))", "all x y z.((ChecksTraffic(x) & CrossingLane(y) & RedLight(z) & TakesRightAt(x,y,z)) -> ReducesRiskOfCollision(x))", "all x.((ChecksTraffic(x) & TakesRightAtRedLight(x)) -> ReducesRiskOfCollision(x))", "all x.(ChecksForTraffic(x) -> ReducesRiskOfCollision(x))", "all x.(CheckingForTrafficInCrossingLanes(x) & TakesRightAtRedLight(x) -> ReducesRiskOfCollision(x))"]}
{"id": "enwn_validation_134", "nl": "Not checking for traffic in the crossing lane before taking a right at a red light exposes you to avoidable risk.", "fol": "", "prediction": ["all x.((CheckingTrafficInCrossingLane(x) & TakesRightAtRedLight(x)) -> ExposesToAvoidableRisk(x))", "all x.((CrossingLane(x) & CrossingLane(x) & TakeRightAtRedLight(x)) -> ExposesToAvoidableRisk(x))", "all x y.((CrossingLane(x) & RedLight(y) & -ChecksForTraffic(x,y)) -> ExposesToAvoidableRisk(x))", "all x.((CheckingTraffic(x) & CrossingLane(x) & TakesRightAtRedLight(x)) -> ExposesToAvoidableRisk(x))", "all x y z.((CrossingLane(x) & RedLight(y) & CrossingLane(z) & ChecksForTraffic(x,z) & TakesRight(x,y)) -> ExposesToAvoidableRisk(x))", "all x y.((CrossingLane(x) & RedLight(y)) -> (ChecksTraffic(x,y) & TakesRight(x,y)))", "all x.((CrossingLane(x) & ChecksTrafficBeforeTakingRight(x)) -> ExposesToAvoidableRisk(x))", "all x y z.((CrossingLanes(x) & RedLight(y) & Traffic(z) & -ChecksInLanes(x,z) & TakesRightAt(x,y)) -> ExposesToAvoidableRisk(x))", "all x y.((ConstructionLane(x) & RedLight(y) & -ChecksTraffic(x,y) & TakesRight(x,y)) -> ExposesToAvoidableRisk(x))", "all x y.((CrossingLanes(x) & RedLight(y) & -ChecksForTraffic(x,y)) -> ExhibitsAvoidableRisk(x,y))", "all x.((ConstructionLane(x) & CrossingLane(x) & TakesRightAtRedLight(x)) -> ExposesToAvoidableRisk(x))", "(AvoidsTrafficInCrossingLanes(a) & TakesRightAtRedLight(b) & ExhibitsAvoidableRisk(a))", "all x.((CrossingLanes(x) & CrossingLanes(x) & TakeRightAtRedLight(x)) -> ExposesToAvoidableRisk(x))", "all x.((CheckingTrafficInCrossingLane(x) & TakesRightAtRedLight(x)) -> ExposesToAvoidableRisk(x))", "all x y.((CrossingLane(x) & RedLight(y) & -ChecksForTraffic(x,y)) -> ExhibitsAvoidableRisk(x,y))", "all x.((ConstructionLane(x) & CrossingLane(x) & TakeRightAtRedLight(x)) -> ExposesToAvoidableRisk(x))"]}
{"id": "enwn_validation_135", "nl": "You should check for traffic in the crossing lane before taking a right at a red light.", "fol": "", "prediction": ["all x.((CrossingLane(x) & RedLight(x)) -> ChecksForTraffic(x))", "all x y.((CrossingLane(x) & RedLight(y)) -> ChecksForTraffic(x,y))", "(ChecksTrafficInCrossingLane(x) & TakesRightAtRedLight(x))", "all x y z.((CrossingLane(x) & RedLight(y) & Traffic(z) & ChecksInLane(x,z)) -> TakesRight(x,y))", "all x y.((Right(x) & RedLight(y)) -> ChecksForTrafficInCrossingLane(x,y))", "all x.((CrossingLane(x) & RedLight(x)) -> ChecksForTraffic(x))", "all x y.((CrossingLane(x) & RedLight(y)) -> ChecksForTraffic(x,y))", "(ChecksTrafficInCrossingLane(x) & TakesRightAtRedLight(x))", "all x.((CrossingLanes(x) & RedLight(x)) -> ChecksForTraffic(x))", "all x y.((Traffic(x) & CrossingLane(y) & RedLight(z)) -> ChecksForTraffic(x,y,z))", "all x.(ChecksTrafficInCrossingLane(x) & TakesRightAtRedLight(x))", "all x y.((CrossingLane(x) & RedLight(y)) -> CheckForTraffic(x,y))", "all x.((CrossingLane(x) & RedLight(x)) -> CheckForTraffic(x))", "all x y z.((Right(z) & CrossingLanes(z) & CheckForTraffic(x,y,z)) -> TakesRightAtRedLight(x,z))", "all x.((ConcertingLane(x) & RedLight(x)) -> ChecksForTraffic(x))", "all x.((CrossingLane(x) & RedLight(y)) -> ChecksForTraffic(x,y))"]}
{"id": "enwn_validation_136", "nl": "Adding pieces to the board is against the rules of chess.", "fol": "", "prediction": ["all x.(AddingPiecesToBoard(x) -> AgainstRulesOfChess(x))", "all x.((AddingPieces(x) & Board(x)) -> AgainstRulesOfChess(x))", "all x y.((Addition(x) & Board(y)) -> BreaksRulesOfChess(x,y))", "all x.(AddingPiecesToBoard(x) -> AgainstRulesOfChess(x))", "(AddingPiecesToBoard(x) -> AgainstRulesOfChess(x))", "all x.((AdditionsPieces(x) & Board(x)) -> AgainstRulesOfChess(x))", "all x.(AddingPiecesToBoard(x) -> BreaksChessRules(x))", "all x y.((Addition(x) & Board(y)) -> AgainstRulesOfChess(x,y))", "all x y.((Addition(x,y) & Board(y)) -> BreaksRulesOfChess(x,y))", "all x y.((AdditionPieces(x) & Board(y)) -> AgainstRulesOfChess(x,y))", "all x y.((AddingPieces(x) & Board(y)) -> BreaksRulesOfChess(x,y))", "all x.(AddingPiecesToBoard(x) -> AgainstRulesOfChess(x))", "All x.((AdditionToBoard(x) & ChessRules(x)) -> AgainstRules(x))", "all x y.((AddingPiecesToBoard(x) & ChessRules(y)) -> AgainstRules(x,y))", "all x y z.((Addition(x,y) & Piece(z)) -> Board(x))", "all x.(AddingPiecesToBoard(x) -> BreaksRulesOfChess(x))"]}
{"id": "enwn_validation_137", "nl": "Breaking the rules is cheating.", "fol": "", "prediction": ["all x.((BreakingRules(x) & BreakingRules(x)) -> Cheating(x))", "all x.((BreaksRules(x) & Cheating(x)) -> Cheating(x))", "all x.((Rules(x) & Breaks(x)) -> Cheating(x))", "all x.(BreakingRules(x) -> Cheating(x))", "(BreakingRules(x) -> Cheating(x))", "all x.((BreakingRules(x) & Cheating(x)) -> Cheating(x))", "all x y.((Rule(x) & Rule(y)) -> Cheating(x))", "all x.(BreakingRules(x) -> Cheating(x))", "exists x y.(Rule(x) & Rule(y) & Breaks(x,y))", "all x.((Rules(x) & Breaking(x)) -> Cheating(x))", "all x y.((Rule(x) & Rule(y)) -> Cheating(x,y))", "all x.((BreaksRules(x) & Cheating(x)) -> Cheating(x))", "all x.(BeyondRules(x) -> Cheating(x))", "exists x y.(Rules(x) & Breaking(x,y))", "all x.(BreakingRules(x) -> Cheating(x))", "all x.(BreakingRules(x) -> Cheating(x))"]}
{"id": "enwn_validation_138", "nl": "You shouldn't cheat.", "fol": "", "prediction": ["all x.((Cheat(x)) -> -Cheat(x))", "all x.((Cheat(x) & -Cheat(x)) -> -Cheat(x))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) & Cheat(x)))", "you shouldn'tcheat.", "-Cheat.", "all x.((Cheat(x)) -> -Cheat(x))", "-(Cheat(x) & Cheat(x))", "all x.(Cheat(x) -> -(Cheat(x) | Cheat(x)))", "-Cheats(x)", "all x.(Cheat(x) -> -Cheat(x))", "-Cheats(x)", "all x.(Cheat(x) -> -(Cheat(x) & Cheat(x)))", "exists x.(Cheat(x) & -Cheat(x))", "(-Cheats(x))", "-Cheat.", "all x.(Cheat(x) -> -Cheat(x))"]}
{"id": "enwn_validation_139", "nl": "When Ben's opponent wasn't looking, Ben snuck a pawn onto the board to give himself the advantage.", "fol": "", "prediction": ["all x y.((Ben(x) & Opponent(y) & -Looking(y)) -> SnucksPawnOnBoard(x,y))", "all x y z.((Ben(x) & Opponent(y) & Board(z) & -Looking(y)) -> SnucksPawnOn(x,z))", "all x.((Ben(x) & Opponent(x) & -Looking(x)) -> SnucksPawnOnBoard(x))", "all x y.((Ben(x) & Opponent(y) & -Looking(x,y)) -> SnucksPawnOnBoard(x,y))", "all x.((Opponent(x) & -Looking(x)) -> SnucksPawnOnBoard(x))", "all x.((BenOpponent(x) & -Looking(x)) -> SnucksPawnOnBoard(x))", "all x y.((BenOpponent(x) & Opponent(y) & -Looking(x,y)) -> SnucksPawnOnBoardToGiveAdvantage(x,y))", "(all x.((BenOpponent(x) & -Looking(x)) -> SnucksPawnOnBoard(x)))", "(-LookingOpponent(Ben) & SnucksPawnOnBoard(Ben) & GivesAdvantage(Ben))", "(-LookingOpponent(Ben,Ben) | SnuckPawnOnBoard(Ben,Ben)))", "all x y z.((Ben(x) & Opponent(y) & Board(z) & -Looking(y)) -> SnucksPawnOn(x,z))", "all x y.((Ben(x) & Opponent(y) & -Looking(y)) -> SnucksPawnOnBoard(x,y))", "all x.((Opponent(x) & -Looking(x)) -> SnucksPawnOnBoard(x))", "all x.((BenOpponent(x) & -Looking(x)) -> SnucksPawnOnBoard(x))", "all x y.((Pawn(x) & Opponent(y)) -> (SnucksOnBoard(x,y) & GivesAdvantage(x,y)))", "all x y z.((Ben(x) & Opponent(y) & Board(z) & -Looking(y)) -> SnucksPawn(x,z))"]}
{"id": "enwn_validation_140", "nl": "Adding pieces to the board is cheating.", "fol": "", "prediction": ["all x.((Addition(x) & Pieces(x)) -> Cheating(x))", "all x.((AdditionToBoard(x) & Pieces(x)) -> Cheating(x))", "all x y.((Addition(x) & Board(y)) -> Cheating(x,y))", "all x.((AddingPieces(x) & Board(x)) -> Cheating(x))", "all x.(AddingPiecesToBoard(x) -> Cheating(x))", "all x.(AddingPiecesToBoard(x) -> Cheating(x))", "all x.((AddingPieces(x) & Board(x)) -> Cheating(x))", "(AddingPiecesToBoard(x) -> Cheating(x))", "all x y.((Addition(x,y) & Board(y)) -> Cheating(x))", "all x y.((AddingPieces(x) & Board(y)) -> Cheating(x,y))", "all x y.((Addition(x) & Board(y)) -> Cheating(x))", "all x.(AdditionToBoard(x) -> Cheating(x))", "all x.(AddingPiecesToBoard(x) -> Cheating(x))", "all x.((AdditionsPieces(x) & Board(x)) -> Cheating(x))", "all x y.((Addition(x,y) & Board(y)) -> Cheating(x))", "exists x.(AdditionToBoard(x) & Cheating(x))"]}
{"id": "enwn_validation_141", "nl": "You shouldn't add pieces to the board.", "fol": "", "prediction": ["all x.((Board(x) & -AddPieces(x)) -> -AddPieces(x))", "all x.((Piece(x) & -AddToBoard(x)) -> -AddToBoard(x))", "all x y.((Board(x) & Board(y)) -> -AddPieces(x,y))", "all x.((AddPieces(x) & -AddPieces(x)) -> -AddPieces(x))", "all x.((Board(x) & -AddPieces(x)) -> -AddPieces(x))", "all x.(AddPiecesToBoard(x) -> -AddPieces(x))", "-AddsPiecesToBoard(x))", "all x y.((Piece(x) & Board(y)) -> -AddTo(x,y))", "-AddPiecesToBoard(x))", "all x y.((Board(x) & Piece(y)) -> -AddTo(x,y))", "exists x.(Board(x) & -AddPieces(x))", "all x.((Board(x) & -AddPieces(x)) -> -AddPieces(x))", "(-AddPiecesToBoard(Piece))", "all x.((AddPieces(x) & -AddPieces(x)) -> -AddPieces(x))", "-AddPiecesToBoard(x)", "(-AddPiecesToBoard(Piece))"]}
{"id": "enwn_validation_142", "nl": "Ben shouldn't have put the pawn on the board.", "fol": "", "prediction": ["Ben shouldn't have put pawn on board.", "all x.((Ben(x) & Pawn(x)) -> -PotsOnBoard(x))", "all x y.((Pawn(x) & Ben(y)) -> -PotteredOnBoard(y,x))", "all x.((Ben(x) & Pawn(x)) -> -MadeOnBoard(x))", "all x y.((Pawn(x) & Ben(y)) -> -HasPawnOnBoard(y,x))", "-(BennyBoard(Ben) & PawnOnBoard(Benny))", "(Ben shouldn't have put pawnOnBoard(Ben))", "Ben shouldn't have put pawn on board.", "Ben shouldn't have put pawn on board.", "Ben shouldn't have put the PawnOnBoard.", "-(BennyPawn(Ben))", "-(BenBen(b) & Pawn(b))", "all x.((Ben(x) & Pawn(y)) -> -HasPawnOnBoard(x,y))", "all x.((Pawn(x) & Ben(x)) -> -PotteredOnBoard(x))", "Ben shouldn't have put pawn on board.", "Ben shouldn't have put the PawnOnBoard."]}
{"id": "enwn_validation_143", "nl": "Safe driving requires your full attention.", "fol": "", "prediction": ["all x.(SafeDriving(x) -> RequiresFullAttention(x))", "(SecureDriving(SafeDriving) -> RequiresFullAttention(SafeDriving))", "(SafeDriving(x) -> RequiresFullAttention(x))", "all x y.((SafeDriving(x) & FullAttention(y)) -> Requires(x,y))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.((SafeDriving(x) & FullAttention(x)) -> Requires(x,y))", "all x y.((SafeDriving(x) & Attention(y)) -> Requires(x,y))", "(SafeDriving(x) & RequiresFullAttention(x))", "all x.(SecureDriving(x) -> RequiresFullAttention(x))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x y.((SafeDriving(x) & FullAttention(y)) -> Requires(x,y))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "All x y.((SafeDriving(x) & Attention(y)) -> Requires(x,y))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))"]}
{"id": "enwn_validation_144", "nl": "Jared checked his phone while pulling onto the freeway.", "fol": "", "prediction": ["all x y.((Jared(x) & Freeway(y)) -> CheckedPhone(x,y))", "all x.((Jared(x) & PullsOnFreeway(x)) -> ChecksPhone(x))", "Jared checked his phone while pulling onto the freeway.", "-(Jared(Jared) & CheckedPhone(Jared) & PulledOnFreeway(Jared)))", "all x y.((Jared(x) & Freeway(y)) -> ChecksPhone(x,y))", "all x y z.((Jared(x) & Phone(y) & Freeway(z)) -> Checked(x,y,z))", "(CheckedPhone(Jared) & PullingOnFreeway(Jared))", "-Jared checkedPhoneWhileRoadingOnFreeway(Jared,Jared))", "all x y.((Jared(x) & Freeway(y) & PullsOn(x,y)) -> ChecksPhone(x))", "all x.((Jared(x) & PullsOnFreeway(x)) -> ChecksPhone(x))", "Jared checked his phone while pulling onto the freeway.", "(CheckedPhone(Jared,Freshway) & PullingOn(Jared,Freshway))", "all x.((Jared(x) & CheckedPhone(x)) -> PullsOnFreeway(x))", "(CheckedPhone(Jared,Freeway) & PullingOn(Jared,Freeway))", "all x.((Jared(x) & Freeway(y)) -> CheckedPhone(x,y))", "(CheckedPhone(Jared) & PullingOnFreeway(Jared))"]}
{"id": "enwn_validation_145", "nl": "Checking your phone takes your attention off of whatever else you're doing.", "fol": "", "prediction": ["all x.(CheckingPhone(x) -> TakesAttentionOffOfWhatever(x))", "all x y.((Phone(x) & Phone(y)) -> TakesAttentionOff(x,y))", "all x y.((CheckingPhone(x) & Other(y)) -> TakesAttentionOff(x,y))", "all x.(ChecksPhone(x) -> TakesAttentionOffOf(x,y))", "(CheckingPhone(x) -> TakesAttentionOffOfWhatever(x))", "all x y.((Phone(x) & Activity(y)) -> ChecksTakesAttentionOff(x,y))", "all x y z.((Phone(x) & Attention(y) & Activity(z) & Checks(x,y)) -> TakesOff(x,z))", "(CheckingPhone(x) & TakesAttentionOffOfWhatever(x))", "all x y.((CheckingPhone(x) & Activity(y)) -> TakesAttentionOff(x,y))", "all x.(CheckingPhone(x) -> TakesAttentionOffOfWhatever(x))", "all x y z.((Phone(x) & Attention(y) & Activity(z) & Checks(x,y,z)) -> TakesOff(x,y,z))", "all x.((CheckingPhone(x) & Doing(x)) -> TakesAttentionOff(x))", "all x y.((Phone(x) & Other(y)) -> TakesAttentionOff(x,y))", "all x.(ChecksPhone(x) -> TakesAttentionOffOf(x,y))", "all x.(CheckingPhone(x) -> TakesAttentionOff(x))", "all x.(ChecksPhone(x) -> TakesAttentionOffOf(x,y))"]}
{"id": "enwn_validation_146", "nl": "If something prevents you from doing the right thing, it's wrong.", "fol": "", "prediction": ["all x.((Protects(x) & RightThing(x)) -> Wrong(x))", "all x.((ProtectsFromDoingRightThing(x)) -> Wrong(x))", "all x.(ProhibitsDoingRightThing(x) -> Wrong(x))", "all x y.((Protects(x,y) & RightThing(y)) -> Wrong(x))", "all x.((ProhibitsDoingRightThing(x) & RightThing(x)) -> Wrong(x))", "(ProhibitsDoingRightThing(x) -> Wrong(x))", "all x.((Protects(x) & RightThing(x)) -> Wrong(x))", "all x.(ProtectsFromDoingRightThing(x) -> Wrong(x))", "all x.((ProtectsFromDoingRightThing(x) & Wrong(x)) -> RightThing(x))", "all x y.((Protects(x,y) & RightThing(y)) -> Wrong(x))", "all x.(ProhibitsDoingRightThing(x) -> Wrong(x))", "all x.(Protects(x,y) -> Wrong(x))", "all x y.((Protects(x,y) & RightThing(y)) -> Wrong(x))", "all x.((ProhibitsDoingRightThing(x) & RightThing(x)) -> Wrong(x))", "all x.((PenetratesFromDoingRightThing(x)) -> Wrong(x))", "exists x.(Protects(x) & RightThing(x))"]}
{"id": "enwn_validation_147", "nl": "You should always drive safe.", "fol": "", "prediction": ["all x.(DriveSafe(x) -> AlwaysDriveSafe(x))", "all x.(DriveSafe(x) -> AlwaysDriveSafe(x))", "all x.((DriveSafe(x)) -> AlwaysDriveSafe(x))", "-(DriveSafe(x))", "always drivesafe(x)", "all x.(DriveSafe(x) -> AlwaysDriveSafe(x))", "all x y.((DriveSafe(x) & Driver(y)) -> AlwaysDriveSafe(x))", "All x y.((DriveSafe(x) & -DriveSafe(y)) -> AlwaysDriveSafe(x))", "all x.(DrivingSafe(x) -> AlwaysDrivesSafe(x))", "all x.((DriveSafe(x)) -> AlwaysDriveSafe(x))", "all x.(DriveSafe(x) -> AlwaysDriveSafe(x))", "all x.(DriveSafe(x) -> AlwaysDriveSafe(x))", "exists x.(DrivingSafe(x) & DriveSafe(x))", "exists x.(DrivingSafe(x) & AlwaysDrivesSafe(x))", "all x.(DriveSafely(x) -> AlwaysDriveSafe(x))", "all x.(DriveSafe(x) -> AlwaysDriveSafe(x))"]}
{"id": "enwn_validation_148", "nl": "Jared took his attention off of driving to check his phone.", "fol": "", "prediction": ["all x.((Jared(x) & AttentionOffDriving(x)) -> ChecksPhone(x))", "all x y.((Jared(x) & Phone(y)) -> TakesAttentionOff(x,y))", "Jared took his attention off of driving to check his phone.", "Jared took his AttentionOffDrivingToCheckPhone(Jared)", "(AttentionOffDriving(Jared) & CheckPhone(Jared))", "-(Jared(Jared) & AttentionOffDriving(Jared)) -> ChecksPhone(Jared))", "all x.((Jared(x) & AttentionOffDrive(x)) -> ChecksPhone(x))", "(all x.(Jared(x) -> TakesAttentionOffDriving(x)))", "Jared took attention off of driving to check his phone.", "Jared shook his attention off of driving to check his phone.", "(AttentionOffDriveToCheckPhone(Jared))", "all x.(Jared(x) -> (TakesAttentionOffDriving(x) & ChecksPhone(x)))", "all x y.((Jared(x) & Phone(y)) -> TakesAttentionOffDrive(x,y))", "Jared took his attention off of driving to check his phone.", "all x.((Jared(x) & AttentionOffDriving(x)) -> ChecksPhone(x))", "all x y.((Jared(x) & Driving(y)) -> TakesAttentionToCheckPhone(x,y))"]}
{"id": "enwn_validation_149", "nl": "Checking his phone prevented Jared from driving safely.", "fol": "", "prediction": ["all x.(CheckingPhone(x) -> PreventsDrivingSafely(x))", "all x y.((CheckingPhone(x) & Jared(y)) -> PreventsDrivingSafely(y,x))", "-CheckingPhonePreventsDrivingSafely(Jared)", "(CheckingPhone(Jared) & PreventsDrivingSafely(Jared))", "all x.(CheckingPhone(x) -> PreventsDrivingSafely(x))", "all x y.((Phone(x) & Jared(y)) -> PreventsDrivingSafely(y,x))", "all x y.((CheckingPhone(x) & Jared(y)) -> -DrivingSafely(y))", "Jared's car was unable to drive safely after checking his phone.", "-CheckingPhoneProvidesDrivingSafely(Jared)", "(CheckingPhone(Jared) -> PreventsDrivingSafely(Jared))", "Jared's safety was prevented by checking his phone.", "all x.(CheckingPhone(x) -> PreventsDriving(x))", "-CheckingPhonePreventsDriving(Jared)", "all x.(CheckingPhone(x) -> -DrivingSafely(x))", "(CheckingPhone(Jared) & PreventsDrivingSafely(Jared,Drive))", "all x.(CheckingPhone(x) -> PreventsDrivingSafely(x))"]}
{"id": "enwn_validation_150", "nl": "You shouldn't do anything that prevents you from driving safe.", "fol": "", "prediction": ["all x.((Does(x) & PreventsDrivingSafe(x)) -> -Do(x))", "all x.((Does(x) & PreventsDrivingSafe(x)) -> -DrivingSafe(x))", "all x.((Do(x) & PreventsDrivingSafe(x)) -> -Do(x))", "-(DoesWhatPreventsDrivingSafe(x)))", "all x y.((Does(x) & PreventsDrivingSafe(x)) -> -Do(x,y))", "all x.((DrivingSafe(x) & -Doing(x)) -> -DrivingSafe(x))", "-(DoesProtectsDriveSafe(x))", "all x y.((Does(x,y) & PreventsDrivingSafe(x)) -> -Do(x,y))", "all x.((Does(x) & PreventsDrivingSafe(x)) -> -Do(x))", "all x y.((Does(x) & PreventsDrivingSafe(x)) -> -DrivingSafe(y))", "(-(DoingProhibitsDrivingSafe(x)) -> -Do(x)))", "all x.((DrivingSafe(x)) -> -DoesWhat(x))", "all x.((DoesProtectsDrivingSafe(x)) -> -Do(x))", "all x.((Doing(x) & PreventsDrivingSafe(x)) -> -Do(x))", "all x.((Does(x) & PreventsDrivingSafe(x)) -> -DrivingSafe(x))", "all x.((DrivingSafe(x) & -Doing(x)) -> -DrivingSafe(x))"]}
{"id": "enwn_validation_151", "nl": "Jared should not have checked his phone.", "fol": "", "prediction": ["all x.((Jared(x) & -CheckedPhone(x)) -> -CheckedPhone(x))", "Jared should not have checked his phone.", "-CheckedPhone(Jared)", "all x.((Jared(x) & Phone(y)) -> -Checked(x,y))", "jared.(Jared) & -CheckedPhone(Jared))", "Jared should not have checked his phone.", "all x.(Jared(x) -> -CheckedPhone(x))", "(-checkedPhone(Jared))", "all x.((Jared(x) & -CheckedPhone(x)) -> -CheckedPhone(x))", "Jared shouldn't have checked his phone.", "Jared should not have checked his phone.", "-CheckedPhone(Jared)", "Jared should not have checked his phone.", "(-checkedPhone(Jared))", "Jared should have not checked his phone.", "-CheckedPhone(Jared)"]}
{"id": "enwn_validation_152", "nl": "There are some people who haven't gotten a slice yet.", "fol": "", "prediction": ["exists x.(Person(x) & -HasSlice(x))", "exists x.(Person(x) & -GaveSlice(x))", "exists x y.(Person(x) & Person(y) & -GaveSlice(x,y))", "exists x.(Person(x) & -HasSlice(x))", "exists x.(Person(x) & -HasSlice(x))", "exists x.((Person(x) & -GaveSlice(x)) -> -GaveSlice(x))", "exists x y.(Person(x) & Person(y) & -HasSlice(x,y))", "exists x.(Person(x) & -GetsSlice(x))", "exists x.(Person(x) & -HasSlice(x))", "exists x.(Person(x) & -GaveSlice(x))", "exists x.(People(x) & -HasSlice(x))", "exists x.(Person(x) & -HasSlice(x))", "exists x.(People(x) & -GaveSlice(x))", "exists x.(Person(x) & -GetsSlice(x))", "exists x.(Person(x) & -GivingSlice(x))", "exists x.(Person(x) & -HasSlice(x))"]}
{"id": "enwn_validation_153", "nl": "Taking a second portion before someone else has gotten a first portion is unfair.", "fol": "", "prediction": ["all x y.((TakesSecondPurchase(x) & TakesFirstPurchase(y)) -> Unfair(x))", "all x.((TakesSecondPurchase(x) & SomeoneOtherGivesFirstPurchase(x)) -> Unfair(x))", "(Unfair(takesSecondPurchase(takesSecondPurchase(takesSecondPurchase(takesSecondPurchase(takesSecondPurchase(takesSecondPurchase(takesSecondPurchase(takesSecondPurchase(takesSecondPurchase(takesSecondPurchase(takes(takes(takes(takes(takes(takes(takes(takes(takes)))))", "all x y.((Person(x) & SecondPurchase(y) & Takes(x,y)) -> Unfair(x))", "all x.((SecondPurchase(x) & TakesSecondPurchase(x) & SomeoneOtherGivesFirstPurchase(x)) -> Unfair(x))", "all x.((TasksSecondPurchase(x) & TakesSecondPurchase(x) & SomeoneOtherGivesFirstPurchase(x)) -> Unfair(x))", "all x.((TakesSecondParticipation(x) & SomeoneOtherGivesFirstParticipation(x)) -> Unfair(x))", "all x y.((TakesSecondParticipation(x) & TakesFirstParticipation(y) & SomeoneOther(x,y)) -> Unfair(x))", "all x y.((TaskSecondParticipation(x) & Person(y) & TakesSecondParticipation(x,y)) -> Unfair(x))", "all x y z.((SecondPurchase(x) & Person(y) & FirstPurchase(z)) -> Unfair(x,y,z))", "all x y z.((TwoPiece(x) & Person(y) & FirstPiece(z) & TakesSecondPiece(x,y,z)) -> Unfair(x))", "exists x.(SecondPurchase(x) & TakesSecondPurchase(x) & TakesFirstPurchase(x))", "all x y.((Person(x) & Person(y) & TakesSecondParticipation(x,y)) -> Unfair(x))", "all x.(TakesSecondPurchaseBeforeFirstPurchase(x) -> Unfair(x))", "all x.((TakesSecondPurchase(x) & TakesFirstPurchase(x)) -> Unfair(x))", "all x y.((TakesSecondParticipation(x) & Person(y) & GetsFirstParticipation(y,x)) -> Unfair(x))"]}
{"id": "enwn_validation_154", "nl": "You want to take a second slice of pizza.", "fol": "", "prediction": ["all x.((Pizza(x) & SecondSlice(x)) -> WantsToTake(x,Pizza))", "(WantToTakeSecondSliceOfPizza(x))", "all x.((YouWantToTakeSecondSliceOfPizza(x)) -> TakesSecondSliceOfPizza(x))", "-TakeSecondSliceOfPizza(x))", "all x y.((Pizza(x) & Pizza(y) & TakesSecondSlice(x,y)) -> WantsToTakeSecondSlice(x,y))", "exists x.(Pizza(x) & TakeSecondSlice(x))", "-YouWantToTakeSecondSliceOfPizza(x))", "(YouWantToTakeSecondSliceOfPizza(x))", "all x.((Pizza(x) & SecondSlice(x)) -> WantsToTake(x,Pizza))", "all x y.((Pizza(x) & Pizza(y) & TakeSecondSlice(x,y)) -> TakeSecondSlice(x,y))", "(TakesSecondSliceOfPizza(x))", "all x.((TwoSlice(x) & Pizza(y)) -> WantsToTake(x,y))", "exists x.(Pizza(x) & SecondSlice(x))", "exists x.(Pizza(x) & TakesSecondSlice(x))", "(WantToTakeSecondSliceOfPizza(x))", "exists x.(Pizza(x) & SecondSlice(x))"]}
{"id": "enwn_validation_155", "nl": "If you want to do something, but it's too soon, you should wait.", "fol": "", "prediction": ["all x.((WantToDo(x) & TooFast(x)) -> ShouldWarn(x))", "all x y.((WantToDo(x,y) & TooFast(y)) -> ShouldWarn(x,y))", "all x.((WantToDo(x) & TooFast(x)) -> ShouldWait(x))", "((WantToDo(x) & TooFast(x))) -> Wait(x))", "(all x.((WantToDo(x) & TooFast(x)) -> Wait(x))", "all x.((WantToDo(x) & TooJuicy(x)) -> ShouldWarn(x))", "all x.((Does(x) & TooFast(x)) -> ShouldWait(x))", "all x y.(((WantToDo(x) & TooFast(y)) -> Wait(x,y))", "all x y.((WantToDo(x) & TooFast(y)) -> ShouldWarn(x,y))", "(all x.((WantToDo(x) & TooFast(x)) -> ShouldWarn(x)))", "all x.((WantToDo(x) & TooFast(x)) -> Wait(x))", "all x.((Does(x) & TooFast(x)) -> ShouldWarn(x))", "exists x.(WantToDo(x) & TooJuicy(x))", "all x.((WantToDo(x) & TooJuicy(x)) -> Wait(x))", "all x.((WantsToDo(x) & TooOld(x)) -> ShouldWait(x))", "exists x.(WantToDo(x) & TooFast(x))"]}
{"id": "enwn_validation_156", "nl": "It's too soon to take a second slice.", "fol": "", "prediction": ["all x.((Slice(x) & TooFastToTake(x,2)) -> TooFastToTake(x,2))", "(TooFastToTakeSlice(x))", "-TooFastToTakeSlice(-Slice(-Slice))", "all x.((TooFastToTakeSlice(x)) -> TooFastToTakeSlice(x))", "all x.(Slice(x) -> TooFastToTake(x,Slice))", "all x.(ThanOldToTakeSlice(x) -> TooFastToTakeSlice(x))", "(TooOldToTakeSlice(x))", "all x.((Slice(x) & TooOldToTake(x,2)) -> TakesSlice(x,2))", "all x.((Slice(x) & TooFastToTake(x,2)) -> TooFastToTake(x,2))", "all x.((ThanThanTwoSlice(x) & TooOldToTake(x,Slice)) -> TooFastToTake(x,Slice))", "(TooFastToTakeSlice(x))", "all x y.((Slice(x) & Slice(y)) -> TooFastToTake(x,y))", "-TooFastToTakeSlice(-Slice(-Slice))", "(TooFastToTakeSlice(f) & TooFastToTakeSlice(f))", "exists x.(Slice(x) & TooOldToTake(x,Slice,Slice))", "all x.(Slice(x) -> TooFastToTake(x,secondSlice))"]}
{"id": "enwn_validation_157", "nl": "You want to take a slice of pizza but it's too soon.", "fol": "", "prediction": ["all x.((Pizza(x) & TooFast(x)) -> WantsToTake(x,y))", "all x.((YouWantToTakePizza(x) & TooFast(x)) -> -(TooFast(x) & TooFast(x)))", "exists x.(Pizza(x) & WantsToTake(x,y) & TooFast(y))", "all x y.((Pizza(x) & Slice(y)) -> TooFast(x,y))", "(all x.((Pizza(x) & TooFast(x)) -> WantsToTake(x,y)))", "all x y.((Pizza(x) & Pizza(y) & TooFast(x)) -> WantsToTake(x,y))", "exists x.(Pizza(x) & TakesSlice(x,y) & TooFast(y))", "all x y.((YouWantToTakePizza(x) & Pizza(y) & TooFast(x,y)) -> -TooFast(x))", "((YouWantToTakePizza(x) & TooJuicy(x)) -> TakesPizza(x))", "(YouWantToTakePizza(x) & TooJuicy(x))", "(all x.((Pizza(x) & TooFast(x)) -> WantsToTake(x,Pizza)))", "exists x.(Pizza(x) & WantsToTake(x,y) & TooJuicy(y))", "all x y.((Pizza(x) & Pizza(y) & TooJuicy(x)) -> WantsToTake(x,y))", "all x y.((Pizza(x) & Slice(y)) -> TooFast(x,y))", "exists x.(Pizza(x) & TakesSlice(x,y) & TooJuicy(y))", "exists x.(Pizza(x) & WantsToTake(x,Pizza) & TooFast(x))"]}
{"id": "enwn_validation_158", "nl": "You should wait before taking a second slice of pizza.", "fol": "", "prediction": ["all x.((Pizza(x) & Wait(x)) -> TakesSecondSlice(x))", "all x.((Pizza(x) & SecondSlice(x)) -> Wait(x))", "all x y.((Pizza(x) & Pizza(y)) -> WaitBeforeTaking(x,y))", "(WaitBeforeTakingSecondSliceOfPizza(x))", "(WaitForSecondSliceOfPizza(x) -> TakesSecondSliceOfPizza(x))", "all x.((Pizza(x) & Wait(x)) -> TakeSecondSlice(x))", "all x y.((Pizza(x) & Pizza(y)) -> WaitsFor(x,y))", "exists x.(Pizza(x) & WaitBeforeTakingSecondSlice(x))", "all x.((Pizza(x) & SecondSlice(x)) -> Wait(x))", "all x.((Pizza(x) & TakesSecondSlice(x)) -> Waits(x))", "all x y.((Pizza(x) & SecondSlice(y)) -> Wait(x,y))", "all x.((Pizza(x) & WaitBeforeTaking(x,2)) -> TakesSecondSlice(x))", "exists x.(Pizza(x) & WaitBeforeTaking(x,2))", "all x y.((Pizza(x) & Pizza(y)) -> WaitBeforeTaking(x,y))", "all x y.((Pizza(x) & SecondSlice(y)) -> Wait(x,y))", "exists x.(Pizza(x) & Wait(x))"]}
{"id": "enwn_validation_159", "nl": "Murder means killing someone with premeditation.", "fol": "", "prediction": ["all x y.((Murder(x) & Person(y)) -> KillsWithPremeditation(x,y))", "all x.(Murder(x) -> KillsWithPremeditation(x))", "(Murder(murder) -> Kills(murder))", "all x y z.((Murder(x) & Person(y) & Premeditation(z)) -> Kills(x,y,z))", "all x y.((Murder(x) & Person(y)) -> KillsWithPremeditation(x,y))", "all x.(Murder(x) -> Kills(x,Person))", "all x y.((Murder(x) & Person(y) & Premeditation(x)) -> Kills(x,y))", "Murder means killing someone with premeditation.", "(MurderMeansMaking(Murder) & Premeditation(Murder))", "(Murder(murder) -> KillsWithPremeditation(murder,p,p))", "all x.(Murder(x) -> KillsWithPremeditation(x))", "all x.(Murder(x) -> Kills(x,Person,Premeditation))", "all x y.((Murder(x) & Person(y)) -> KillsWithPremeditation(x,y))", "all x y.((Murder(x) & Person(y) & Premeditation(x)) -> Kills(x,y))", "all x.(Murder(x) -> Kills(x,y))", "All x.(Murder(x) -> KillsPersonWithPremeditation(x))"]}
{"id": "enwn_validation_160", "nl": "Premeditation means thinking through something before doing it.", "fol": "", "prediction": ["all x.(Premeditation(x) -> ThinksThrough(x))", "all x y.((Premeditation(x) & Thriving(y)) -> ThinksThrough(x,y))", "all x y.((Premeditation(x) & (ThinkingThrough(y) | Doing(y))) -> ThinksThrough(x,y))", "all x y z.((Premeditation(x) & (ThinkingThrough(y) | Doing(z))) -> ThinksThrough(x,y,z))", "all x.(Premeditation(x) -> ThinksThrough(x))", "all x y.((Premeditation(x) & ThinkingThrough(x,y)) -> Doing(y))", "all x.(Premeditation(x) -> ThinksThrough(x,y))", "all x.(Premeditation(x) -> ThinksThrough(x,y))", "All x y z.((Premeditation(x) & ThinkingThrough(y,z) & Doing(z,x)) -> ThinksThrough(x,y))", "all x y.((Premeditation(x) & Something(y)) -> ThinksThrough(x,y))", "All x y.((Premeditation(x) & Thriving(y) & Doing(z)) -> ThinksThrough(x,y,z))", "all x.(Premeditation(x) -> ThinkingThrough(x))", "exists x.(Premeditation(x) & ThinksThought(x) & BeforeDoing(x))", "all x.(Premeditation(x) -> (ThinkingThrough(x,y) & BeforeDoing(x,z)))", "all x.(Premeditation(x) -> ThinksThrough(x,y))", "exists x.(Premeditation(x) & ThinkingThrough(x) & BeforeDoing(x))"]}
{"id": "enwn_validation_161", "nl": "David bought anthrax, then used it to try and kill Ingrid.", "fol": "", "prediction": ["all x y.((David(x) & Ingrid(y)) -> (BuysAnthrax(x,y) & UsesAnthraxToTryAndKill(x,y)))", "(BoughtAnthrax(David) & UsedAnthraxToTryAndKillIngrid(David))", "all x y z.((David(x) & Anthrax(y) & Ingrid(z)) -> (Buys(x,y) & Uses(x,z)))", "David bought anthrax, then used it to try and kill Ingrid.", "all x.((David(x) & BuysAnthrax(x)) -> (UsesAnthraxToTryToKillIngrid(x)))", "all x y.((David(x) & Ingrid(y)) -> (BuysAnthrax(x,y) & UsesAnthraxToKill(x,y)))", "(all x.(David(x) -> BuysAthrax(x)) & UsedAthraxToTryAndKillIngrid(x))", "(all x.(Anthrax(x) -> Buys(x,Anthrax)) & (Ingrid(x) | Ingrid(x))))", "All x.(DavidBoughtAnthrax(x) -> (UsedAnthraxToTryToKillIngrid(x)))", "all x.((David(x) & Anthrax(x)) -> (Buys(x,Anthrax) & KillsIngrid(x,Ingrid)))", "(BoughtAnthrax(David) & UsedAnthraxToTryToKillIngrid(David))", "(BuysAnthrax(David,Ingrid) & UsesAnthraxToTryAndKill(David,Ingrid))", "all x y.((David(x) & Anthrax(y)) -> (Buys(x,y) & UsesToTryToKillIngrid(x,y)))", "all x y z.((David(x) & Anthrax(y) & Ingrid(z)) -> (Buys(x,y) & UsesToTryAndKill(x,z)))", "all x y.((David(x) & Ingrid(y)) -> (BuysAthrax(x,y) & UsesAthraxToTryAndKill(x,y)))", "(BoughtAnthrax(David) & UsedAnthraxToTryAndKillIngrid(David))"]}
{"id": "enwn_validation_162", "nl": "Buying supplies for something is part of planning for something.", "fol": "", "prediction": ["all x y.((BuysSupplies(x) & Something(y)) -> PartOfPlanning(x,y))", "all x.(BuysSupplies(x) -> PlansFor(x))", "all x.(BuyingSupplies(x) -> PlanningFor(x))", "all x y.((BuysSupplies(x) & Something(y)) -> PlanningFor(x,y))", "all x y z.((Supply(x) & Supply(y) & Product(z)) -> PlanFor(x,y,z))", "all x.((BuysSupplies(x) & For(x,y)) -> PlanningFor(x,y))", "all x y.((BuyingSupplies(x) & Something(y)) -> PlanningFor(x,y))", "all x y.((BuysSupplies(x) & Product(y)) -> PlansFor(x,y))", "all x.((BuysSupplies(x) & PlansFor(x,y)) -> PartOfPlanning(x,y))", "all x.(BuysSupplies(x) -> PlanningFor(x))", "all x y z.((Supply(x) & Product(y) & Plan(z)) -> BuysFor(x,y,z))", "all x.(BuyingSupplies(x) -> PlanningFor(x))", "all x.(BuysSuppliesForSomething(x) -> PlanningForSomething(x))", "all x y.((Product(x) & Purchase(y)) -> PlanningFor(x,y))", "all x y.((BuysSupplies(x) & Something(y)) -> PartOfPlanning(x,y))", "exists x.(Product(x) & BuysFor(x,y))"]}
{"id": "enwn_validation_163", "nl": "David planned to kill Ingrid before trying to kill her.", "fol": "", "prediction": ["all x y.((David(x) & Ingrid(y)) -> PlannedToKill(x,y))", "(PlannedToKillIngrid(David) & AttemptedToKillIngrid(David))", "all x.((David(x) & Ingrid(y)) -> PlannedToKill(x,y))", "-(PlannedToKillIngrid(David,Ingrid) & AttemptedToKillIngrid(David,Ingrid)))", "(PlansToKillIngrid(David,Ingrid) & AttemptsToKillIngrid(David,Ingrid))", "David planned to kill Ingrid before trying to kill her.", "all x y z.((David(x) & Ingrid(y) & Ingrid(z)) -> PlannedToKill(x,y,z))", "all x y.((David(x) & Ingrid(y)) -> PlannedToKill(x,y))", "all x y.((David(x) & Ingrid(y)) -> (PlannedToKill(x,y) & AttemptedToKill(x,y)))", "(PlannedToKillIngrid(David) & AttemptedToKillIngrid(David))", "All x.((David(x) & Ingrid(y)) -> PlannedToKill(x,y))", "(PlannedToKillIngrid(David,Ingrid) & AttemptedToKillIngrid(David,Ingrid))", "All x.(PlannedToKillIngrid(x) -> IngridTeacher(x))", "(PlansToKillIngrid(David,Ingrid) & AttemptsToKillIngrid(David,Ingrid))", "All x.((David(x) & Ingrid(x)) -> PlannedToKill(x,Ingrid))", "all x y.((David(x) & Ingrid(y)) -> PlannedToKill(x,y))"]}
{"id": "enwn_validation_164", "nl": "David tried to kill Ingrid in a premeditated way.", "fol": "", "prediction": ["all x y.((David(x) & Ingrid(y)) -> TriedToKill(x,y))", "(TriedToKillIngrid(David,Ingrid) & Premeditated(David,Ingrid))", "(PremeditatedKilling(David,Ingrid) & Ingrid(David,Ingrid))", "all x y.((David(x) & Ingrid(y)) -> (TriedToKill(x,y) & Premeditated(x)))", "all x.((David(x) & Ingrid(x)) -> TriedToKill(x,Premeditated))", "all x y z.((David(x) & Ingrid(y) & Premeditated(z)) -> TriedToKill(x,y,z))", "(PremeditatedTreatment) & DavidTriedToKillIngrid(David))", "(TriedToKillIngridInPremeditatedManner(David,Ingrid))", "(TriedToKillIngrid(David,Ingrid) & Premeditated(David,Ingrid))", "all x y.((David(x) & Ingrid(y)) -> TriedToKill(x,y))", "(PremeditatedKilling(David,Ingrid) & Ingrid(David,Ingrid))", "all x.((David(x) & Ingrid(y)) -> TriedToKill(x,y))", "all x.((David(x) & Ingrid(x)) -> KillsInPremeditatedManner(x,Ingrid))", "All x y z.((David(x) & Ingrid(y) & Premeditated(z)) -> TriedToKill(x,y,z))", "all x y.((David(x) & Ingrid(y)) -> (TriedToKill(x,y) & Premeditated(x)))", "all x.((David(x) & Ingrid(y)) -> (TriedToKill(x,y) & Premeditated(x)))"]}
{"id": "enwn_validation_165", "nl": "David tried to murder Ingrid.", "fol": "", "prediction": ["all x y.((David(x) & Ingrid(y)) -> TriedToMorn(x,y))", "(TriedToMornIngrid(David) & Ingrid(Ingrid))", "all x.((David(x) & Ingrid(x)) -> TriedToMorn(x,Ingrid))", "David tried to murderIngrid.", "All x.(David(x) -> (TriedToMornIngrid(x) & Ingrid(x)))", "-(DavidTriedToMornIngrid(David))", "Ingrid tried to murder David.", "(TriedToMornIngrid(David) & Ingrid(Ingrid))", "all x y.((David(x) & Ingrid(y)) -> TriedToMorn(x,y))", "((David(David) & Ingrid(Ingrid)) -> TriedToMorn(David))", "(TriedToMurder(David,Ingrid))", "(TriedToMornIngrid(David,Ingrid))", "David tried to murder Ingrid.", "Ingrid tried to murder David.", "all x y.((David(x) & Ingrid(y)) -> TriedToMorn(x,y))", "(TriedToMornIngrid(David) & Ingrid(David))"]}
{"id": "enwn_validation_166", "nl": "It's a faux pas to offer someone something they can't accept.", "fol": "", "prediction": ["all x.(FauxPast(x) -> Offers(x,y))", "all x y.((FauxPas(x) & Person(y) & Offers(x,y)) -> -CanAccept(y,x))", "all x.(FauxPas(x) -> Offers(x,y))", "all x y.((FauxPas(x) & Offer(y,x)) -> CannotAccept(y))", "(FauxPas toOffer(x) & CannotAccept(x))", "all x.(FauxPast(x) -> (OffersSomething(x) & -CanAccept(x)))", "all x y.((FauxPast(x) & Offer(y,x)) -> CannotAccept(y,x))", "all x y.((FauxPas(x) & Person(y) & Offers(x,y)) -> CannotAccept(y,x))", "all x.(FauxPas toOfferSomething(x) -> -CanAccept(x))", "(FauxPasToOffer(x) -> -CanAccept(x))", "all x y.(FauxPast(x) -> (Offers(x,y) & Person(y) & -CanAccept(y)))", "all x y.((FauxPast(x) & Person(y) & Offers(x,y)) -> CannotAccept(y))", "all x.(FauxPas(x) -> Offers(x,y))", "exists x.(FauxPas(x) & Offers(x,y) & Person(y) & -CanAccept(y))", "exists x.(FauxPas(x) & Offers(x,y) & CannotAccept(x,y))", "exists x.(FauxPas(x) & Offers(x,y) & Person(y) & CannotAccept(y))"]}
{"id": "enwn_validation_167", "nl": "Maria is pregnant.", "fol": "", "prediction": ["all x.(Maria(x) -> Pregnant(x))", "Maria isPregnant(Maria)", "(Pregnant(Maria))", "-(Maria(Maria) & Pregnant(Maria))", "Maria is pregnant.", "(Pregnant(Maria) & -Pregnant(Maria))", "-(Maria(Maria) & Pregnant(Maria))", "(Pregnant(Maria))", "(Patient(Maria))", "all x.(Maria(x) -> Pregnant(x))", "Maria isPregnant(Maria)", "All x.(Maria(x) -> Pregnant(x))", "Maria is pregnant.", "Maria isPregnant(marie,x)", "(Pregnant(Maria)", "Maria is pregnant."]}
{"id": "enwn_validation_168", "nl": "People who are pregnant shouldn't drink alcohol.", "fol": "", "prediction": ["all x.((Patient(x) & Pregnant(x)) -> -DrinkAlcohol(x))", "all x.((Paternal(x) & DrinksAlcohol(x)) -> -DrinksAlcohol(x))", "all x.((Patient(x) & Pregnant(x)) -> -DrinkAlcohol(x))", "all x.(Pregnant(x) -> -DrinkAlcohol(x))", "all x.((Pregnant(x) & DrinksAlcohol(x)) -> -DrinksAlcohol(x))", "all x y.((Patient(x) & Pregnant(y)) -> -DrinkAlcohol(x,y))", "all x y.((Patient(x) & Pregnant(y)) -> -DrinkAlcohol(x,y))", "all x.(Pregnant(x) -> -DrinkAlcohol(x))", "all x.((Paternal(x) & -DrinkAlcohol(x)) -> -DrinkAlcohol(x))", "all x.((Patient(x) & Pregnant(x)) -> -DrinkAlcohol(x))", "all x.(Patient(x) -> -DrinksAlcohol(x))", "all x.((Pregnant(x) & DrinksAlcohol(x)) -> -DrinksAlcohol(x))", "(all x.(Pregnant(x) -> -DrinkAlcohol(x)))", "all x y.((Paternal(x) & Person(y)) -> -DrinksAlcohol(y))", "all x.(Pregnant(x) -> -DrinkAlcohol(x))", "all x.(Paternal(x) -> -DrinksAlcohol(x))"]}
{"id": "enwn_validation_169", "nl": "Beer is an alcoholic beverage.", "fol": "", "prediction": ["all x.(Beer(x) -> AlcoholicBeverage(x))", "all x.(Beer(x) -> AlcoholicBeverage(x))", "all x.(Beverage(x) -> Alcoholic(x))", "(AlcoholicBeverage(beer)", "all x y.((Beer(x) & AlcoholicBeverage(y)) -> AlcoholicBeverage(x))", "(AlcoholicBeverage(beverage) & Beer(beverage))", "all x.(Beer(x) -> AlcoholicBeverage(x))", "all x.(Beverage(x) -> AlcoholicBeverage(x))", "all x.(Beer(x) -> AlcoholicBeverage(x))", "(AlcoholicBeverage(beer)", "(AlcoholicBeverage(Beer))", "all x.(Beer(x) -> AlcoholicBeverage(x))", "all x.(Beer(x) -> AlcoholicBeverage(x))", "exists x.(Beer(x) & Alcoholic(x))", "all x.(Beer(x) -> AlcoholicBeverage(x))", "exists x.(Beer(x) & Alcoholic(x))"]}
{"id": "enwn_validation_170", "nl": "People who are pregnant shouldn't drink beer.", "fol": "", "prediction": ["all x.((Patient(x) & Pregnant(x)) -> -DrinkBeer(x))", "all x.((Pregnant(x) & DrinksBeer(x)) -> -DrinksBeer(x))", "all x.((Patient(x) & Pregnant(x)) -> -DrinksBeer(x))", "all x.((Paternal(x) & -DrinkBeer(x)) -> -DrinkBeer(x))", "all x y.((Patient(x) & Pregnant(y)) -> -DrinksBeer(x,y))", "all x.(Pregnant(x) -> -DrinkBeer(x))", "all x.((Patient(x) & Pregnant(x)) -> -DrinkBeer(x))", "all x.((Pregnant(x) & DrinksBeer(x)) -> -DrinksBeer(x))", "(all x.((Patient(x) & Pregnant(x)) -> -DrinkBeer(x))", "all x.(Patient(x) -> -DrinksBeer(x))", "all x y.((Patient(x) & Pregnant(y)) -> -DrinksBeer(x,y))", "all x y.((Patient(x) & Beer(y)) -> -Drinks(x,y))", "all x.(Pregnant(x) -> -DrinkBeer(x))", "all x.((Patient(x) & DrinksBeer(x)) -> -shouldDrink(x,beer))", "all x.(Pregnant(x) -> -DrinksBeer(x))", "all x.(Patient(x) -> -DrinksBeer(x))"]}
{"id": "enwn_validation_171", "nl": "Maria shouldn't drink beer.", "fol": "", "prediction": ["all x.(Maria(x) -> -DrinksBeer(x))", "all x.((Maria(x) & -DrinksBeer(x)) -> -DrinksBeer(x))", "-(Maria(Maria) & Beer(Maria))", "-(Maria(Maria) & DrinksBeer(Maria))", "(-DrinksBeer(Maria))", "Maria shouldn'tDrinkBeer(Maria)", "all x.(Maria(x) -> -DrinksBeer(x))", "all x.(Maria(x) -> -DrinksBeer(x))", "-(Maria(m) & DrinksBeer(m))", "(Don'tDrinkBeer(Maria,Beer))", "Maria shouldn'tdrink(marie,bier)", "(-DrinksBeer(Maria))", "all x.(Maria(x) -> -DrinkBeer(x))", "-shouldDrinkBeer(Maria)", "(NeedsBeer(Maria) & -DrinksBeer(Maria))", "all x.(Maria(x) -> -DrinksBeer(x))"]}
{"id": "enwn_validation_172", "nl": "It would be a faux pas to offer Maria a beer.", "fol": "", "prediction": ["all x.(FauxPast(x) -> OffersBeer(x))", "(FauxPas toOfferBeerToMaria(Maria))", "all x.((OfferBeer(x) & Maria(x)) -> FauxPas(x))", "all x.(FauxPast(x) -> OffersBeer(x))", "all x.((OfferMariaBeer(x) & FalsePast(x)) -> OffersBeer(x))", "all x y.((FauxPast(x) & OffersBeer(y,x)) -> FalsePast(x))", "-FauxPas to OfferBeverage(-Maria)", "all x.(FauxPas toOfferBeer(x) -> Maria(x))", "(FauxPas toOfferBeer(Maria))", "all x y.((FauxPast(x) & OffersBeer(y)) -> FalsePast(x,y))", "all x.(FauxPast(x) -> OffersBeerToMaria(x))", "All x.((OfferBeer(x) & Maria(x)) -> FalsePast(x))", "(FauxPas toOfferBeerToMaria(Maria))", "(FauxPas toOfferBeer(Maria,Mari,Mari))", "all x.(FauxPas toOfferBeer(x) -> Maria(x))", "All x.(FauxPas to OfferBeer(x) -> Maria(x))"]}
{"id": "enwn_validation_173", "nl": "Sandy tripped and spilled her hot coffee on Chris.", "fol": "", "prediction": ["all x y.((Sandy(x) & Chris(y)) -> (Tripped(x) & SplippedHotCoffee(x,y)))", "(Tripped(Sandy) & SplendidCoffee(Sandy))", "all x y z.((Sandy(x) & Chris(y) & HotCoffee(z)) -> (Tripped(x,z) & Splipped(x,z)))", "Sandy tripped and spilled hotcoffeeOnChris.", "-(SandyTripped(Sandy) & SplendidCoffee(Sandy))", "all x.(Sandy(x) -> (Tripped(x) & SplendidHotCoffee(x)))", "(Tripped(Sandy) & SplendidHotCoffee(Sandy))", "(TrippedAndSpreadHotCoffee(Sandy))", "all x y.((Sandy(x) & Chris(y)) -> (Tripped(x,y) & SplendidCoffee(x,y)))", "Sandy tripped and spilled hotcoffeeOnChris.", "all x y z.((Sandy(x) & Chris(y) & HotCoffee(z)) -> (Tripped(x,z) & Splunk(x,z)))", "(Tripped(Sandy) & SplurgedHotCoffee(Sandy))", "(TrippedAndSpraysHotCoffeeOnChris(Sandy))", "(Tripping(Sandy) & SpillingHotCoffeeOnChris(Sandy))", "Sandy tripped and spilled hotcoffeeOnChris.", "Sandy tripped and spilled hotcoffee on Chris."]}
{"id": "enwn_validation_174", "nl": "When someone spills hot coffee on you, it hurts.", "fol": "", "prediction": ["all x.((Person(x) & SpillsHotCoffeeOnYou(x)) -> Hurts(x))", "all x y.((Person(x) & SpillsHotCoffeeOn(x,y)) -> Hurts(x))", "all x.(SpreadsHotCoffeeOn(x) -> Hurts(x))", "all x.((Person(x) & SpillsHotCoffee(x)) -> Hurts(x))", "all x y.((Person(x) & SpillsHotCoffee(x,y)) -> Hurts(x))", "all x y z.((Person(x) & HotCoffee(y) & SpillsOn(x,y)) -> Illness(x))", "all x.(SpreadsHotCoffeeOn(x) -> Hurts(x))", "all x y.((Person(x) & SpillsHotCoffeeOn(x,y)) -> Illness(x))", "all x.((Person(x) & SpillsHotCoffeeOn(x)) -> Hurts(x))", "all x.(SpoilsHotCoffee(x) -> Hurts(x))", "all x y.((SpreadsHotCoffee(x) & Person(y)) -> Illness(x,y))", "all x y.((Person(x) & SpoonsHotCoffeeOn(x,y)) -> Hurts(x))", "all x.((Person(x) & SpillsHotCoffee(x)) -> Illness(x))", "exists x.(SpoilsHotCoffee(x) & Illness(x))", "exists x.(SpokenHotCoffee(x) & On(x,y) & Person(x))", "all x y.((Person(x) & SpillsHotCoffee(x,y)) -> Illness(x))"]}
{"id": "enwn_validation_175", "nl": "If someone does something that harms you, you will get angry at them.", "fol": "", "prediction": ["all x.((Does(x,y) & Harms(y)) -> GetAngryAt(x,y))", "all x y.((Does(x,y) & Harms(y)) -> GetAngryAt(x,y))", "all x.((Does(x,y) & Harms(y)) -> GetAngryAt(x,y))", "all x y.((Does(x,y) & Harms(x,y)) -> GetAngryAt(x,y))", "all x y.((Person(x) & Does(x,y) & Harms(y)) -> GetAngryAt(x,y))", "all x.((DoesWhatHarms(x) & Person(x)) -> GetAngryAt(x))", "(HasHazard(Person) -> GetAngryAt(Person(Person))", "all x.((Person(x) & DoesHazard(x)) -> GetAngryAt(x))", "all x.((Does(x,y) & HarmsYou(x)) -> GetAngryAt(x,y))", "all x.((Person(x) & Does(x,y) & Harms(y)) -> GetAngryAt(x,y))", "all x y.((Does(x,y) & Harms(y)) -> GetAngryAt(x,y))", "all x y.((Person(x) & Person(y) & Does(x,y)) -> Harms(x,y))", "all x.((DoesWhatHarms(x) & Person(x)) -> Anger(x))", "all x.(HasHazard(x) -> GetAngryAt(x))", "all x.((Does(x,harms) & Person(x)) -> GetAngryAt(x))", "all x y.((Does(x,y) & Does(x,y)) -> HarmsYou(x))"]}
{"id": "enwn_validation_176", "nl": "If you did not mean for something to happen, it was a mistake.", "fol": "", "prediction": ["all x.((Meaning(x) & -Meaning(x)) -> Mistake(x))", "all x.((MeantFor(x,y) & -MeantFor(x,y)) -> Mistake(x))", "all x.((Meaning(x) & -Meaning(x)) -> Mistake(x))", "all x.((Mean(x) & -MeanFor(x,y)) -> Mistake(x))", "all x y.((Meaning(x,y) & -Meaning(x,y)) -> Mistake(x))", "all x.(((Meaning(x) & -Meaning(x)) -> Mistake(x))", "all x.((DoesNotMeanFor(x,y) & Happens(y)) -> Mistake(x))", "(MeaningsForSituation(x) | Mistake(x)))", "all x.((MeantFor(x,y) & -MeantFor(x,y)) -> Mistake(x))", "all x y.((Meaning(x,y) & -Meaning(x,y)) -> Mistake(x))", "(MeaningsForNature(n) -> Mistake(n))", "all x.(MeaningsForSituation(x) -> Mistake(x))", "all x.(((Meaning(x) & -Meaning(x)) -> Mistake(x))", "all x y.((MeantFor(x,y) & NotFor(y,x)) -> Mistake(x))", "all x.(Mean(x) -> Mistake(x))", "all x.((Meanings(x) & -Meanings(x)) -> Mistake(x))"]}
{"id": "enwn_validation_177", "nl": "Sandy did not mean to spill her coffee.", "fol": "", "prediction": ["all x.(Sandy(x) -> -MeantToSpreadCoffee(x))", "(-SandyMeantToSpreadCoffee(Sandy))", "all x.((Sandy(x) & -SpreadCoffee(x)) -> -SpreadCoffee(x))", "(-MeaningToSpreadCoffee(Sandy))", "-(Sandy(Sandy) & Coffee(Coffee(Coffee))", "Sandy neassisted(n) to SpillCoffee(n) & -SpreadCoffee(n))", "(Sandy) & -MeantToSpreadCoffee(Sandy))", "all x.((Sandy(x) & -MadeToSprayCoffee(x)) -> -SpreadCoffee(x))", "Sandy did not mean to spill her coffee.", "all x.(Sandy(x) -> -MeanToSpreadCoffee(x))", "(Sandy, not spillingCoffee(Sandy))", "-(Sandy(Sandy) & Coffee(Coffee(Sandy)))", "(-SandyMeanToSpreadCoffee(Sandy))", "Sandy neemployedtospray(n)", "all x.(Sandy(x) -> -SpreadCoffee(x))", "-(Sandy(Sandy) & Coffee(Coffee(Sandy))"]}
{"id": "enwn_validation_178", "nl": "Even if you are mad at someones mistake, you should forgive them.", "fol": "", "prediction": ["all x.((Mad(x) & Mistake(x)) -> Forgive(x))", "(MadAtMorning(MadAtMorning(MadAtMorning(MadAtMorning(MadAtMorning(MadAtMorning(MadAtMorning(MadAtMorning(MadAtMorning(MadAtMorning(MadAtMorning(MadAtMorning(MadAtMorning(MadAtMorning(Morning)))", "all x y.((Mad(x) & Mistake(y)) -> Forgives(x,y))", "all x.((MadAtMorning(x) & Person(x)) -> Forgives(x))", "all x.(MadAtMorning(x) -> Forgives(x))", "all x y.((Mad(x) & Person(y)) -> Forgives(x,y))", "all x.((Mad(x) & Mistake(x)) -> Forgives(x))", "(MadAtMorning(m) & Forgives(m,m))", "(all x.((MadAtMorning(x) & Person(x)) -> Forgives(x)))", "all x y.((MadAt(x,y) & Mistake(y)) -> Forgives(x,y))", "all x.(MadAtMorning(x) -> Forgives(x))", "all x y.((Mad(x) & Mistake(y)) -> Forgives(x,y))", "all x.((MadAtMorning(x) & Person(x)) -> Forgives(x,y))", "(MadAtMorning(x) -> Forgive(x))", "exists x.(Mad(x) & Mistake(x) & Forgives(x,y))", "all x y.((Mad(x) & Person(y) & Mistake(y)) -> Forgives(x,y))"]}
{"id": "enwn_validation_179", "nl": "Having hot coffee spilled onto you will make you angry at someone.", "fol": "", "prediction": ["all x y.((HotCoffee(x) & SpilledOn(x,y)) -> MakesAngryAt(x,y))", "all x.((HotCoffee(x) & SplippedOnto(x)) -> MakesAngryAt(x))", "all x y.((HotCoffee(x) & SplippedOn(x,y)) -> MakesAngryAt(x,y))", "all x.((HotCoffee(x) & SplengedOn(x)) -> Anger(x))", "all x y z.((HotCoffee(x) & SpilledOn(x,y) & Person(z)) -> MakesAngryAt(x,z))", "all x.((HotCoffeeSpread(x) & Person(x)) -> Anger(x))", "all x y.((HotCoffee(x) & SpilledOn(x,y)) -> MakesAngryAt(x,y))", "all x.((HotCoffee(x) & SpilledOn(x)) -> MakesAngryAt(x))", "exists x.(HotCoffee(x) & SplippedOn(x) & MakesAngryAt(x))", "all x y z.((HotCoffee(x) & SplippedOn(x,y) & Person(z)) -> MakesAngryAt(x,z))", "all x.(HotCoffeeSpreadOn(x) -> MakesAngryAtPerson(x))", "all x y.((HotCoffee(x) & SplippedOn(x,y)) -> MakesAngryAt(x,y))", "all x.((HotCoffee(x) & SplippedOntoYou(x)) -> MakesAngryAt(x,Person))", "all x.((HotCoffeeSpread(x) & Someone(y)) -> MakesAngryAt(x,y))", "all x y.((HotCoffee(x) & SpoonedOn(x,y)) -> MakesAngryAt(x,y))", "All x y.((HotCoffee(x) & SplippedOnto(x)) -> MakesAngryAt(x,y))"]}
{"id": "enwn_validation_180", "nl": "Chris got mad at Sandy because Sandy's hot coffee spilled on Chris.", "fol": "", "prediction": ["all x y.((Chris(x) & Sandy(y) & SplendidCoffee(y)) -> MadAt(x,y))", "all x y z.((Chris(x) & Sandy(y) & HotCoffee(z) & SplippedOn(x,y,z)) -> MadAt(x,y,z))", "Chris got mad at Sandy because Sandy's hotcoffee spilled on Chris.", "(Mad(Chris) & SandySpreadsHotCoffee(Chris))", "Sandy's hotcoffee spilled on Chris.", "((Chris(Chris) & Sandy(Shannon) & HotCoffeeSpread(Chris)) -> Mad(Chris))", "all x y.((Chris(x) & Sandy(y) & HotCoffee(y)) -> SplippedOn(x,y))", "Chris got mad at Sandy because Sandys hotcoffee spilled on Chris.", "Sandy spilled hotcoffee on Chris.", "all x.((Chris(x) & Sandy(x) & HotCoffeeSpread(x)) -> MadAt(x,Chris))", "(Mad(Chris) & SandysHotCoffeeSpread(Chris))", "all x y.((Chris(x) & Sandy(y) & SplippedHotCoffee(y,x)) -> MadAt(x,y))", "((Chris(Chris) & Sandy(Shannon) & SplippedCoffee(Chris)) -> Mad(Chris))", "Sandy's hotcoffee spilled on Chris.", "Chris got mad at Sandy because Sandy's hotcoffee spilled on Chris.", "Sandy spilled hotcoffee on Chris."]}
{"id": "enwn_validation_181", "nl": "Sandy spilling her coffee was an mistake.", "fol": "", "prediction": ["all x.((Sandy(x) & SpillsCoffee(x)) -> Mistake(x))", "all x y.((Sandy(x) & Coffee(y) & Spills(x,y)) -> Mistake(x))", "(Mistake(Sandy) & SpillsCoffee(Sandy))", "all x.((Sandy(x) & SpillsCoffee(x)) -> Mistake(x))", "Sandy spilledCoffee(s) -> Mistake(s))", "Sandy spillingCoffee(sandy) -> Mistake(s))", "all x y.((Sandy(x) & Coffee(y) & Spills(x,y)) -> Mistake(x))", "(Mistake(Sandy) & SplengingCoffee(Sandy,Coffee))", "(Mistake(Sandy) & SpillsCoffee(Sandy))", "(Mistake(Sandy,Coffee) & Spills(Sandy,Coffee))", "all x.((Sandy(x) & SpillsCoffee(x)) -> Mistake(x))", "All x y.((Sandy(x) & Coffee(y)) -> Spills(x,y))", "all x.((Sandy(x) & SplengingCoffee(x)) -> Mistake(x))", "All x y.((Sandy(x) & Coffee(y) & Splenging(x,y)) -> Mistake(x))", "all x.((Sandy(x) & SpillsCoffee(x)) -> Mistake(x))", "all x.((Sandy(x) & SpilledCoffee(x)) -> Mistake(x))"]}
{"id": "enwn_validation_182", "nl": "Sandy's mistake made Chris angry at Sandy.", "fol": "", "prediction": ["(Mistake(Sandy) & MadeChrisAngry(Sandy))", "all x.((SandyMistake(x) & ChrisAngry(x)) -> SandyMistake(x))", "Sandy'sMistakeMadeChrisAngry(Chris)", "Sandy's Mistake MadeChrisAngryAtSandy(Sandy)", "(SandysMistake(Sandy) & ChrisAngry(Sandy))", "all x y.((SandyMistake(x) & Chris(y)) -> AngerfulAt(y,x))", "Chris was angry at Sandy for making Sandy'sMistake(Sandy).", "(MakingSandySandy(Sandy) & ChrisAngry(Sandy))", "Sandy'sMistakeMadeChrisAngryAtSandy(Sandy,Sandy)", "(SandysMistake(Sandy) & MadeChrisAngry(Sandy))", "(Mistake(Sandy) & MadeChrisAngry(Sandy))", "all x y.((Sandy(x) & SandyMistake(y)) -> MadeChrisAngry(x,y))", "Chris is angry at Sandy for making Sandy'sMistake(Sandy,x))", "all x.((SandyMistake(x) & ChrisAngry(x)) -> SandyMistake(x))", "Chris was angryAtSandy(Sandy)", "Chris is angry at Sandy for making Sandy'sMistake."]}
{"id": "enwn_validation_183", "nl": "Chris should forgive Sandy.", "fol": "", "prediction": ["all x.((Chris(x) & Sandy(x)) -> ShouldForgive(x,y))", "all x.(Chris(x) -> ShouldForgive(x,Sandy))", "Chris should forgiveSandy.", "all x y.((Chris(x) & Sandy(y)) -> ShouldForgive(x,y))", "(ForgivesSandy(Chris) -> ShouldForgive(Chris))", "((Chris(Chris) & Sandy(Chris)) -> Forgives(Chris))", "all x.((Chris(x) & Sandy(x)) -> ShouldForgive(x))", "all x.(Chris(x) -> ShouldForgiveSandy(x))", "-(Chris(Chris) & Sandy(Chris))", "Chris should forgiveSandy.", "((Chris(Chris) & Sandy(Chris)) -> Forgive(Chris))", "all x y.((Chris(x) & Sandy(y)) -> ShouldForgive(x,y))", "Chris should forgiveSandy.", "all x.(Chris(x) -> ShouldForgive(x,Sandy))", "(ForgivesSandy(Chris)", "All x.(Chris(x) -> ForgivesSandy(x))"]}
{"id": "enwn_validation_184", "nl": "You can't score well on a test without studying for it unless you cheat.", "fol": "", "prediction": ["all x.((Test(x) & -StudiesFor(x)) -> -ScoreWell(x))", "all x y.((Test(x) & Test(y) & -Cheat(x,y)) -> ScoreWell(x,y))", "all x.((ScoreWell(x) & -StudiesForTest(x)) -> -ScoreWell(x))", "all x y.((Test(x) & Test(y) & -Cheat(x)) -> ScoreWell(x,y))", "all x.((ScoreWellOnTest(x) & -Cheat(x)) -> -ScoreWellOnTest(x))", "all x.((Test(x) & -StudiesFor(x)) -> -ScoreWell(x))", "(all x.((Test(x) & ScoreWellWithoutStudying(x)) -> -Cheat(x)))", "exists x.(ScoreWellOnTest(x) & -StudiesForTest(x))", "all x.((Test(x) & ScoreWell(x) & -Cheat(x)) -> -ScoreWell(x))", "all x y.((ScoreWell(x) & Test(y) & -Cheat(x,y)) -> -ScoreWell(x,y))", "all x y.((Test(x) & Test(y)) -> (-ScoreWell(x,y) & -StudiesFor(x,y)))", "all x y.((Test(x) & Test(y) & -Cheat(x)) -> ScoreWell(x,y))", "(all x.((Test(x) & StudyForTest(x)) -> ScoreWell(x)))", "exists x.(ScoreWell(x) & ((Test(x) & -StudiesFor(x)) | Cheats(x))))", "exists x.(ScoreWellOnTest(x) & -Cheat(x))", "all x y.((Test(x) & Test(y) & -Cheat(x,y)) -> ScoreWell(x,y))"]}
{"id": "enwn_validation_185", "nl": "Brad scored well on his test.", "fol": "", "prediction": ["all x.(Brad(x) -> ScoredWellOnTest(x))", "(ScoredWell(Brad) & Test(Brad))", "Brad scored well on his test.", "all x y.((Brad(x) & Test(y)) -> ScoredWell(x,y))", "(Score(Brad) & WellOnTest(Brad))", "all x.(Brad(x) -> ScoredWellOnTest(x))", "-ScoredWellOnTest(Brad,Test)", "Brad scored WellOnTest(Brad,Test)", "(ScoresWell(Brad) & Test(Brad))", "Brad scored well on Test.", "Brad scored well on his test.", "all x.(Brad(x) -> ScoresWellOnTest(x))", "(ScoredWell(Brad,Test))", "all x.(Brad(x) -> ScoredWell(x))", "Brad scored well on test.", "all x.(Brad(x) -> ScoresWellOnTest(x))"]}
{"id": "enwn_validation_186", "nl": "Brad did not study the material on the test.", "fol": "", "prediction": ["all x.(Brad(x) -> -StudiesMaterial(x))", "Brad -StudiesMaterial(Brad))", "Brad did not study the material on the test.", "(-StudiesMaterial(Brad))", "Brad nestudiedMaterial(Brad) & -StudiesMaterial(Brad))", "-(Brad(Brad) & StudyMaterial(Brad))", "all x.(Brad(x) -> -StudiesMaterial(x))", "-(Brad(Brad) & StudyedMaterial(Brad))", "Brad did not study the material on the test.", "-StudiesMaterial(Brad)", "(-StudiesMaterialOnTest(Brad))", "all x.(Brad(x) -> -StudiesMaterial(x))", "(-StudiesMaterial(Brad))", "Brad did not study the material on the test.", "all x.(Brad(x) -> -StudiesMaterialOnTest(x))", "Brad did not study the material on the test."]}
{"id": "enwn_validation_187", "nl": "Cheating is dishonest.", "fol": "", "prediction": ["all x.(Cheating(x) -> Dishonest(x))", "all x.(Cheat(x) -> Dishonest(x))", "all x.(Cheating(x) -> Dishonest(x))", "(Dishonest(cheating) -> Cheating(cheating))", "all x.(Cheat(x) -> Dishonest(x))", "all x y.((Cheating(x) & Person(y)) -> Dishonest(x))", "all x y.((Cheat(x) & Person(y) & Cheating(x)) -> Dishonest(x))", "(Dishonest(cheating) -> Cheating(cheating))", "(Dishonest(cheating)", "all x.(Cheating(x) -> Dishonest(x))", "(Dishonest(cheating) -> Dishonest(cheating))", "all x.(Cheat(x) -> Dishonest(x))", "all x.(Cheating(x) -> Dishonest(x))", "all x.(Cheating(x) -> Dishonest(x))", "all x.(Cheat(x) -> Dishonest(x))", "exists x.(Cheating(x) & Dishonest(x))"]}
{"id": "enwn_validation_188", "nl": "You should be honest.", "fol": "", "prediction": ["all x.((Honest(x) & Been(x)) -> Honest(x))", "all x.(Honest(x) -> -HasHair(x))", "all x.((Honest(x) & Been(x)) -> Been(x))", "all x.(Honest(x) -> Been(x))", "all x.((Afraid(x) & Been(x)) -> Honest(x))", "-Honest(x)", "all x.((Staff(x) & Honest(x)) -> Fair(x))", "all x.(Honest(x) -> -Honest(x))", "all x y.((Honest(x) & Person(y)) -> ShouldBe(x,y))", "all x.((Honest(x) & BeFrank(x)) -> BeFunny(x))", "-Honest(x)", "All x.((Standard(x) & Honest(x)) -> ShouldBe(x))", "all x.(Honest(x) -> Been(x))", "All x.((Client(x) & Honest(x)) -> ShouldBe(x))", "All x.(Alright(x) -> -Honest(x))", "all x.(Honest(x) -> ShouldBe(x))"]}
{"id": "enwn_validation_189", "nl": "Brad scored well on his test without studying for it.", "fol": "", "prediction": ["all x.((Brad(x) & Test(x) & -StudiesFor(x)) -> ScoresWell(x))", "all x y.((Brad(x) & Test(y)) -> ScoresWell(x,y))", "(ScoresWellOnTest(Brad) & -StudiesForTest(Brad))", "all x.(Brad(x) -> ScoredWellOnTest(x))", "(ScoresWellOnTest(Brad,ScoresWellWithoutStudyingForTest(Brad,ScoresWellWithoutStudyingForTest(Brad,ScoresWellWithoutStudyingForTest(Brad,ScoresWellWithoutStudyingForTest(Brad,ScoresWellWithoutStudyingForTest))", "Brad scored well on his test without studying for it.", "(StudiesForTest(Brad) | ScoresWellOnTest(Brad))", "all x.((Brad(x) & Test(x)) -> ScoresWell(x))", "Brad scored well on his test, -StudyingForTest(Brad))", "(ScoredWellOnTest(Brad) & -StudiesForTest(Brad))", "all x y.((Brad(x) & Test(y)) -> ScoresWell(x,y))", "all x.((Brad(x) & Test(x) & -StudyingFor(x)) -> ScoredWell(x))", "-StudiesForTest(Brad,Blake)", "Brad scored well on test without studying for it.", "(StudiesForTest(Brad) | ScoresWellOnTest(Brad,Test))", "all x.(Brad(x) -> ScoredWellOnTest(x))"]}
{"id": "enwn_validation_190", "nl": "Brad cheated on his test.", "fol": "", "prediction": ["all x.(Brad(x) -> CheatedOnTest(x))", "(CheatedOnTest(Brad) & -CheatedOnTest(Brad))", "Brad CheatedOnTest(Brad)", "all x.((Brad(x) & Test(x)) -> Cheated(x))", "-(Brad(Brad) & CheatedOnTest(Brad))", "all x y.((Brad(x) & Test(y)) -> CheatedOn(x,y))", "Brad CheatedOnTest(Brad)", "all x.((Brad(x) & Test(x)) -> CheatedOn(x,y))", "all x.(Brad(x) -> CheatedOnTest(x))", "(CheatedOnTest(Brad))", "(Cheated(Brad) & Test(Brad))", "-(Brad(Brad) & Test(Brad))", "(CheatedOnTest(Brad) & -CheatedOnTest(Brad))", "Brad CheatedOnTest(Brad,Test)", "(CheatsOnTest(Brad,Test))", "Brad CheatedOnTest(Brad)"]}
{"id": "enwn_validation_191", "nl": "You should not cheat.", "fol": "", "prediction": ["all x.((Cheat(x)) -> -Cheat(x))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) & Cheat(x)))", "all x.((Cheat(x)) -> -Cheat(x))", "all x.(Cheat(x) -> -Cheat(x))", "-Cheat.", "all x.(Cheat(x) -> -(Cheat(x) | Cheat(x)))", "-Cheat.", "all x.((Cheat(x) & -Cheat(x)) -> -Cheat(x))", "you should notcheat.", "-Cheat(x)", "all x.(Cheat(x) -> -(Cheat(x) | Cheat(x)))", "-Cheat.", "(-Cheat(x))", "all x.(Cheat(x) -> -Cheat(x))", "-Cheat.", "(-Cheats(x))"]}
{"id": "enwn_validation_192", "nl": "Brad should not have cheated on his test.", "fol": "", "prediction": ["all x.((Brad(x) & Test(x)) -> -Cheated(x))", "Brad should not have cheated on his test.", "all x.(Brad(x) -> -CheatedOnTest(x))", "all x.((Brad(x) & Test(x)) -> -Cheated(x))", "(-CheatedTest(Brad))", "-(BradCheatenedTest(Brad) & -CheatedTest(Brad))", "-(Brad(Brad) & Test(Brad))", "Brad should not have cheated on his test.", "(CheatedTest(Brad) & -CheatedTest(Brad))", "all x.(Brad(x) -> -CheatedTest(x))", "-CheatedOnTest(Brad,Blake)", "all x.((Brad(x) & Test(x)) -> -Cheated(x))", "Brad should not have cheated on test.", "(-cheatedOnTest(Brad))", "Brad should not have cheated on his test.", "all x.((Brad(x) & Test(y)) -> -Cheats(x,y))"]}
{"id": "enwn_validation_193", "nl": "You should not litter.", "fol": "", "prediction": ["all x.((Litter(x) & -Litter(x)) -> -(Litter(x) & Litter(x)))", "(-LittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleLittleL", "all x.((Little(x) & -Little(x)) -> -Little(x))", "all x.((Pl\u00fct(x) & -Pl\u00fct(x)) -> -Pl\u00fct(x))", "-Litter.", "all x.(Litter(x) -> -((Litter(x) & Litter(x))))", "-(Litter(x) & Uses(x,y))", "all x.((Litter(x) & -Litter(x)) -> -(Litter(x) & Litter(x)))", "-LittleBaby(x)", "-Liquidate(x)", "all x.((Clean(x) & -Liquid(x)) -> -(Liquid(x) & Litter(x)))", "all x.(Litter(x) -> -(Clean(x) | Litter(x))))", "-Litter.", "(-Litter(x))", "all x.(Clean(x) -> -Litter(x))", "all x.(Clearing(x) -> -(Clearing(x) | Litter(x)))"]}
{"id": "enwn_validation_194", "nl": "Littering is when you throw trash outside of a trash bin.", "fol": "", "prediction": ["all x.(Littering(x) -> ThrowsTrashOutsideTrashBin(x))", "all x y.((Littering(x) & Trash(y)) -> OutsideOfTrashBin(x,y))", "all x.(Littering(x) -> ThrowsTrashOutsideTrashBin(x))", "all x y.((Littering(x) & Trash(y) & OutsideOfTrashBin(x,y)) -> ThrowsOutsideOf(x,y))", "all x y z.((Littering(x) & Trash(y) & Bin(z) & Outside(x,y,z)) -> ThrowsOutside(x,y,z))", "(Littering(x) -> ThrowsTrashOutsideOfTrashBin(x))", "all x y.((Trash(x) & TrashBin(y)) -> Littering(x))", "all x.(Littering(x) -> (TrashTrashOutsideTrashBin(x)))", "all x.(Literating(x) -> (TrashOutsideTrashBin(x) & ThrowsOutsideTrash(x)))", "all x y z.((Littering(x) & Trash(y) & Bin(z) & OutsideOf(x,y,z)) -> ThrowsOutside(x,y,z))", "all x y.((Littering(x) & Trash(y) & OutsideTrashBin(x,y)) -> ThrowsOutside(x,y))", "all x y.((Trash(x) & WasteBin(y) & ThrowsOutside(x,y)) -> Littering(x))", "all x.(Littering(x) -> ThrowsTrashOutsideOfTrashBin(x))", "all x.(Littering(x) -> ThrowsTrashOutsideOfTrashBin(x))", "exists x.(Literating(x) -> ThrowsTrashOutsideOfTrashBin(x))", "exists x.(Littering(x) & ThrowsTrashOutsideOfTrashBin(x))"]}
{"id": "enwn_validation_195", "nl": "Johnny threw trash on the floor.", "fol": "", "prediction": ["all x.(Johnny(x) -> ThrewTrashOnFloor(x))", "Johnny threwTrashOnFloor(Johnny)", "all x y.((Johnny(x) & Floor(y)) -> ThrewTrashOn(x,y))", "-JohnnyThrewTrashOnFloor(Johnny))", "(TrashTrash(Johnny) & ThrewOnFloor(Johnny))", "(Trash(Johnny) & ThrewOnFloor(Johnny))", "all x.(Johnny(x) -> ThrowsTrashOnFloor(x))", "all x.(Jonny(x) -> ThrewTrashOnFloor(x))", "Johnny ThrewTrashOnFloor(Johnny)", "Johnny threwTrashOnFloor(Johnny)", "all x y.((Johnny(x) & Floor(y)) -> ThrowsTrashOn(x,y))", "(TrashWask(Johnny) & Floor(Johnny))", "Johnny threwTrashOnFloor(Jonny)", "-ThrewTouchOnFloor(Johnny,Junior)", "Johnny threw trash on floor.", "all x.(Johnny(x) -> ThrewTrashOnFloor(x))"]}
{"id": "enwn_validation_196", "nl": "Johnny did not want to walk to the far away trash bin.", "fol": "", "prediction": ["all x.((Johnny(x) & FarAwayTrashBin(x)) -> -WantToWalkTo(x,y))", "-(Johnny(Johnny) & FarAwayTrashBin(Johnny))", "(-WantToFarAwayTrashBin(Johnny))", "Johnny did not want to walk to the farawayTrashBin(Johnny)", "(-WantToWalkToTrashBin(Johnny))", "all x.(Johnny(x) -> -WantToFarAwayTrashBin(x))", "Johnny ne swore to walk to the farawayTrashBin(Johnny)", "all x.((Johnny(x) & FarAwayTrashBin(x)) -> -WantToWalkTo(x,y))", "-(Johnny(Johnny) & FarAwayTrashBin(Johnny))", "Johnny did not want to walk to the farawayTrashBin(Johnny)", "-((Johnny(Johnny) & FarAwayTossBin(Johnny)))", "((Johnny(Johnny) & FarAwayTrashBin(Johnny)) -> -WantToWalk(Johnny,y))", "(-WantToFarAwayTrashBin(Johnny))", "-(Johnny(Johnny) & FarAwayTossBin(Johnny))", "-(WalksToFarAwayTrashBin(Jonny))", "all x.((Johnny(x) & FarAwayTrashBin(x)) -> -WantsToWalkTo(x,y))"]}
{"id": "enwn_validation_197", "nl": "Johnny did not throw his trash away into a trash bin.", "fol": "", "prediction": ["all x.((Johnny(x) & TrashBin(x)) -> -ThrewInto(x,y))", "(-TrashBin(Johnny) & ThrowsInto(Johnny,Trash))", "Johnny nethrewTrashIntoTrashBin(n) & -TrashBin(n))", "all x.(Johnny(x) -> -TrashBin(x))", "all x y.((Johnny(x) & TrashBin(y)) -> -ThrewInto(x,y))", "Johnny did not throw trash away into a trash bin.", "-(Jonny(Jonny) & TrashBin(Jonny))", "-(JohnnyTrash(Johnny) & ThrowsIntoTrashBin(Johnny,Trash))", "(Johnny) & -TrashBin(Johnny))", "all x.((Johnny(x) & TrashBin(x)) -> -ThrewInto(x,y))", "-TossTrashIntoTrashBin(Johnny)", "(-TrashBin(Johnny) & Johnny(Johnny))", "Johnny did not throw trash into trash bins.", "all x.((Johnny(x) & TrashBin(x)) -> -TossesInto(x,y))", "(-TrashBin(Johnny) & ThrowsInto(Johnny,Trash))", "all x.(Johnny(x) -> -TrashBin(x))"]}
{"id": "enwn_validation_198", "nl": "Johnny littered.", "fol": "", "prediction": ["all x.(Jonny(x) -> Littered(x))", "all x.(Johnny(x) -> Littered(x))", "-(Jonny(Jonny) & Littered(Jonny))", "(Littered(Johnny)", "Johnny Littered.", "all x.(Jonny(x) -> Littered(x))", "all x.((Jonny(x) & Littered(x)) -> Johnny(x))", "Johnny littered.", "-Littered(Johnny,Jonny)", "-(Johnny(Jonny) & Litter(Jonny))", "Johnny Littered.", "(Littered(Johnny)", "all x.(Johnny(x) -> Littered(x))", "all x.(Jonny(x) -> Littered(x))", "(Plaid(Johnny))", "all x.(Junior(x) -> Littered(x))"]}
{"id": "enwn_validation_199", "nl": "Johnny should not have littered.", "fol": "", "prediction": ["all x.((Johnny(x) & Littered(x)) -> -Littered(x))", "all x.((Jonny(x) & Littered(x)) -> -Littered(x))", "-Littered(Johnny)", "Johnny should not have littered.", "-(Johnny(Johnny) & Littered(Johnny))", "all x.((Johnny(x) & Littered(x)) -> -(Johnny(x) & Littered(x))))", "(Littering(Jonnifer) -> -Littered(Jonnifer))", "all x.(Johnny(x) -> -Littered(x))", "-(Jonny(Jonny) & Littered(Jonny))", "all x.(Jonny(x) -> -Littered(x))", "((Johnny(Johnny) & Littered(Johnny)))", "Johnny should not have littered.", "-Littered(Johnny)", "-Littering(Johnny)", "Johnny should not have littered.", "all x.(Jonnie(x) -> -Littered(x))"]}
{"id": "enwn_validation_200", "nl": "If you see someone struggling to do something, you should help them.", "fol": "", "prediction": ["all x.(StaffStrugglesToDo(x) -> Help(x))", "all x.((Staff(x) & StrugglesToDo(x)) -> Help(x))", "all x y.((Says(x,y) & Person(y) & StrugglesToDo(x,y)) -> Help(x,y))", "all x.((Says(x) & Person(x) & StrugglesToDo(x)) -> Helps(x))", "all x y.((Staff(x) & Person(y) & StrugglesToDo(x,y)) -> Help(x,y))", "all x y.((Person(x) & StrugglesToDo(x,y)) -> Helps(x,y))", "all x.(StaffStrugglesToDo(x) -> Help(x))", "all x.(Staff(x) -> Helps(x))", "(StaffingToDoSomething(x) -> Help(x))", "all x y.((Says(x,y) & Person(y) & StrugglesToDo(x,y)) -> Helps(x,y))", "all x.((SaysPerson(x) & StrugglesToDo(x)) -> Helps(x))", "all x.((Staff(x) & StrugglesToDo(x)) -> Helps(x))", "all x y.((Staff(x) & Person(y) & StrugglesToDo(x,y)) -> Help(x,y))", "all x y.((Person(x) & StrugglesToDo(x,y)) -> Helps(x,y))", "all x.(StaffingToDo(x) -> Help(x))", "exists x.(Says(x,y) & Person(y) & StrugglesToDo(y,x))"]}
{"id": "enwn_validation_201", "nl": "Josh is holding groceries in both hands at the door.", "fol": "", "prediction": ["all x y.((Josh(x) & Door(y)) -> HoldsGroceries(x,y))", "all x.((Josh(x) & Door(y)) -> HoldsGroceries(x,y))", "(HoldsGroceries(Josh) & InHands(Josh))", "all x y z.((Josh(x) & Grocery(y) & Door(z)) -> HoldsInHands(x,y,z))", "Josh holds groceries in both hands at the door.", "Josh is holding groceries in both hands at the door.", "(HoldsGroceries(Josh) & HoldsGroceries(Josh))", "all x.((Josh(x) & Door(y)) -> HoldsGroceriesInBothHands(x,y))", "(HoldsGroceriesInBothHands(Josh) & Door(Josh))", "all x y.((Josh(x) & Door(y)) -> HoldsGroceries(x,y))", "Josh holds groceries in both hands at the door.", "all x y.((Josh(x) & Door(y)) -> HoldsGroceriesInBothHands(x,y))", "(HoldsGroceriesInBothHands(Josh,Door))", "all x.((Josh(x) & Door(y)) -> HoldsGroceriesInBothHands(x,y))", "Josh holds groceries in both hands at the door.", "(HoldsGroceries(Josh) & InHands(Josh))"]}
{"id": "enwn_validation_202", "nl": "If you are holding something with both hands, you will struggle to open doors.", "fol": "", "prediction": ["all x.((HoldsWithBothHands(x) & HandsOn(x)) -> StruggleToOpenDoors(x))", "all x.(HoldsWithBothHands(x) -> StruggleToOpenDoors(x))", "all x.((Holding(x) & Hands(x)) -> StruggleToOpenDoors(x))", "all x y.((Holds(x,y) & Hand(y)) -> StruggleToOpenDoors(x))", "all x.((HoldsWithBothHands(x) & Hands(x)) -> StruggleToOpenDoors(x))", "all x.(Holds(x,y) -> (Holds(x,y) & Hands(y) & Hands(x,y)))", "(HoldsWithBothHands(x) -> StruggleToOpenDoors(x))", "all x y.((Holding(x,y) & Hands(y)) -> StruggleToOpenDoors(x,y))", "all x.((Holding(x,y) & Hands(y)) -> StruggleToOpenDoors(x))", "all x y.((HoldsWithBothHands(x) & Hand(y)) -> StruggleToOpenDoors(x,y))", "all x.(Holding(x,y) -> (StruggleToOpenDoors(x)))", "(HoldingWithBothHands(x) -> StruggleToOpenDoors(x))", "exists x.(Holding(x,y) & Hands(y) & Hands(z) & Hands(x,z) & Hands(x,z))", "all x y.((Holding(x,y) & Hand(y)) -> StruggleToOpenDoors(x,y))", "all x y.((HoldsWith(x,y) & Hand(y)) -> StruggleToOpenDoors(x))", "all x.((HoldsWithBothHands(x) & HandsOn(x)) -> StruggleToOpenDoors(x))"]}
{"id": "enwn_validation_203", "nl": "Amy can see Josh.", "fol": "", "prediction": ["all x.(Amy(x) -> CanSee(x,Joshua))", "all x.((Amy(x) & Josh(y)) -> CanSee(x,y))", "all x y.((Amy(x) & Josh(y)) -> CanSee(x,y))", "(CanSee(Amy,Josh))", "Amy can see Josh.", "all x.(Amy(x) -> CanSeeJosh(x))", "(Sees(Amy,Joshua))", "(Sees(Amy,Joshua) -> CanSee(Amy,Joshua))", "all x.((Amy(x) & Josh(y)) -> CanSee(x,y))", "Amy can see Josh.", "all x y.((Amy(x) & Josh(y)) -> CanSee(x,y))", "(CanSee(Amy,Josh))", "All x.(Amy(x) -> CanSeeJoshua(x))", "Amy can see Josh.", "exists x.(Amy(x) & CanSee(x,Josh))", "All x y.((Amy(x) & Josh(y)) -> CanSee(x,y))"]}
{"id": "enwn_validation_204", "nl": "Josh is struggling to open the door.", "fol": "", "prediction": ["all x.((Josh(x) & StrugglesToOpenDoor(x)) -> OpenDoor(x))", "(StrugglesToOpenDoor(Josh))", "Josh is strugglingToOpenDoor(Josh)", "all x.((Josh(x) & Door(y)) -> StrugglesToOpen(x,y))", "all x y.((Josh(x) & Door(y)) -> StrugglesToOpen(x,y))", "all x.(Josh(x) -> StruggleToOpenDoor(x))", "Josh is struggling to open the door.", "-StrugglesToOpenDoor(Josh)", "(StruggleToOpenDoor(Josh))", "(StrugglesToOpenDoor(Joshua))", "all x y.((Joshua(x) & Door(y)) -> StruggleToOpen(x,y))", "all x.((Josh(x) & StrugglesToOpenDoor(x)) -> -OpenDoor(x))", "exists x.(Josh(x) & StrugglesToOpenDoor(x))", "Josh is strugglingToOpenDoor(Josh)", "Josh is struggling to open the door.", "(StrugglesToOpenDoor(Josh))"]}
{"id": "enwn_validation_205", "nl": "Amy can see Josh struggling to open the door.", "fol": "", "prediction": ["all x.((Amy(x) & Josh(y)) -> StrugglesToOpenDoor(x,y))", "Amy can see Josh struggling to open the door.", "all x y.((Amy(x) & Josh(y)) -> TryingToOpenDoor(x,y))", "(StaffingToOpenDoor(Amy,Joshua))", "all x.((Amy(x) & Josh(y)) -> StumblingToOpenDoor(x,y))", "(AmyCanSee(Amy,Josh) & StrugglesToOpenDoor(Amy,Josh))", "all x y.((Amy(x) & Josh(y)) -> StrugglesToOpenDoor(x,y))", "Amy can see Josh struggling to open the door.", "all x.(Amy(x) -> (StrugglesToOpenDoor(x) & Amy(x)))", "(StrugglesToOpenDoor(Amy,Joshua))", "all x y.((Amy(x) & Josh(y)) -> (StrugglesToOpenDoor(x,y)))", "all x.((Amy(x) & Josh(y)) -> StrugglesToOpenDoor(y,x))", "Amy can see Josh struggling to open the door.", "(StaffingToOpenDoor(Amy,Josh))", "Amy can see Josh struggling to open the door.", "Amy can see Josh struggling to open the door."]}
{"id": "enwn_validation_206", "nl": "Amy should help Josh open the door.", "fol": "", "prediction": ["all x y.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "all x.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "Amy should help Josh open the door.", "all x y.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "all x y z.((Amy(x) & Josh(y) & Door(z)) -> ShouldHelpOpen(x,y,z))", "All x.(Amy(x) -> ShouldHelpOpenDoor(x,Joshua))", "all x.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "(All x.(Amy(x) -> ShouldHelpOpenDoor(x)))", "(Amy(Amy) & Josh(Josh))", "all x.((Amy(x) & Josh(y)) -> ShouldOpenDoor(x,y))", "Amy should help Josh open the door.", "All x.(Amy(x) -> ShouldHelpOpenDoor(x,Josh))", "all x y.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "All x.(Amy(x) -> ShouldHelpOpenDoor(x,Joshua))", "all x y.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "all x y.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))"]}
{"id": "enwn_validation_207", "nl": "You should avoid harming someone else or yourself.", "fol": "", "prediction": ["all x.((AvoidsHarming(x) & (Alternate(x) | Object(x))) -> AvoidsHarming(x))", "-(HasHair(x) | HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x y.((HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHa", "all x.((HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasH", "all x.((AvoidHarming(x) & (Alternate(x) | Object(x))) -> AvoidHarming(x))", "all x y.((AvoidHas(x,y) & (Another(y) | You(y))) -> AvoidHas(x,y))", "all x y.((HasHasHas(x,y) & (Alternate(y) | YEmployee(y))) -> Avoids(x,y))", "all x.((HasHasHas(x,y) & (Alternate(y) | -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasH", "all x y.((Alternative(x) | Self(y)) -> AvoidsHarming(x,y))", "(All x.(HasAnother(x) | HasSelf(x)))", "All x.(Has(x,y) -> (AvoidHarming(y,x) | AvoidHarming(y,x)))", "all x.(AvoidHasHas(x,y) -> (AvoidHas(x,y) | AvoidHas(x,y)))", "all x y z.((Alternative(x) | Self(y) & Person(z)) -> AvoidsHarm(x,z))", "(All x.(Has(x,y) | Has(x,y)))", "all x.((AvoidHarming(x) & (Alternate(x) | Object(x))) -> AvoidHarming(x))", "all x y.((HasAnother(x) | HasSelf(y)) -> AvoidsHarming(x,y))"]}
{"id": "enwn_validation_208", "nl": "Driving dangerously can harm you or someone else.", "fol": "", "prediction": ["all x.(DrivingDangerously(x) -> (HarmsYou(x) | HarmsSomeoneOther(x)))", "all x y.((DrivingDangerously(x) & Person(y)) -> (Harms(x,y) | Harms(x,y)))", "all x y.((DrivesDangerously(x) & Person(y)) -> (Harms(x,y) | Harms(x,y)))", "(DrivingDangerously(d) -> (HarmsYou(d) | HarmsSomeone(d))))", "all x.(DrivingDangerously(x) -> (HarmsYou(x) | HarmsPerson(x)))", "all x y z.((DrivesDangerously(x) & Person(y) & Person(z)) -> (Harms(x,y,z) | Harms(x,y,z)))", "all x.(DrivesDangerously(x) -> (HarmsYou(x) | HarmsSomeoneOther(x)))", "all x.((DrivingDangerously(x) & (HarmsYou(x) | HarmsSomeoneOther(x))) -> CanDamage(x))", "all x y.((DrivesDangerously(x) & (Has(y) | Has(y))) -> (Harms(x,y) | Harms(x,y)))", "all x y.((DrivesDangerously(x) & Person(y)) -> (Harms(x,y) | Harms(x,y)))", "all x.(DrivingDangerously(x) -> (HarmsYou(x) | HarmsSomeoneOther(x)))", "all x.(DrivingDangerously(x) -> (HazardsYou(x) | HarmsSomeoneOther(x)))", "all x.(DrivingDangerfully(x) -> (HarmsYou(x) | HarmsAnother(x)))", "all x.(DrivesDangerously(x) -> (HarmsYou(x) | HarmsPerson(x)))", "all x y.((DrivesDangerously(x) & Person(y)) -> (Harms(x,y) | Harms(x,y)))", "exists x.(DrivingDangerfully(x) & (Harms(x,y) | Harms(y)))"]}
{"id": "enwn_validation_209", "nl": "Dani drove home from the bar after drinking alcohol.", "fol": "", "prediction": ["all x.((Daniel(x) & Bar(y) & DrinksAlcohol(x)) -> DrivesHome(x,y))", "all x y.((Daniel(x) & Bar(y) & DrinksAlcohol(x,y)) -> DrivesHome(x,y))", "Dani drove home from the bar after drinking alcohol.", "(DanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanie", "(Daniel droveHomeFromBar(Daniel,Alcohol))", "all x.((Daniel(x) & Bar(y) & DrinksAlcohol(x,y)) -> DrivesHome(x,y))", "-Daniel drovehome(Daniel,Alcohol(Daniel,Bar))", "Dani drove home from the bar after drinking alcohol.", "(Dani drove home from the bar after drinkingAlcohol(Dani))", "all x y.((Daniel(x) & Bar(y) & DrinksAlcohol(x,y)) -> DrivesHome(x,y))", "-Daniel droveHomeFromBarAfterDrinkingAlcohol(Daniel)", "Dani drove home from bar after drinking alcohol.", "all x.((Daniel(x) & Bar(y) & DrinkingAlcohol(x)) -> DrivenHome(x,y))", "Dani drove home from the bar after drinking alcohol.", "Dani drove home after drinking alcohol.", "Dani drove home from bar after drinking alcohol."]}
{"id": "enwn_validation_210", "nl": "Driving after drinking alcohol is dangerous.", "fol": "", "prediction": ["all x.((DrivingAfterDrinkingAlcohol(x)) -> Dangerous(x))", "all x.(DrivingAfterDrinkingAlcohol(x) -> Dangerous(x))", "(DrivingAfterDrinkingAlcohol(x) -> Dangerous(x))", "all x y.((DrivingAfterDrinkingAlcohol(x) & Alcohol(y)) -> Dangerous(x))", "all x.((DrivingAfterDrinkingAlcohol(x)) -> Dangerous(x))", "all x.((DrivesAfterDrinkingAlcohol(x)) -> Dangerous(x))", "(DrivingAfterDrinkingAlcohol(x) -> Dangerous(x))", "all x y.((Drive(x) & Alcohol(y) & Drinks(x,y)) -> Dangerous(x))", "all x y.((DrivingAfterDrinkingAlcohol(x) & DrinkingAlcohol(y)) -> Dangerous(x))", "all x y.((Driving(x) & Alcohol(y) & After(x,y)) -> Dangerous(x))", "all x.((DrivingAfterDrinkingAlcohol(x)) -> Dangerous(x))", "all x.(DrivingAfterDrinkingAlcohol(x) -> Dangerous(x))", "(DrivingAfterDrinkingAlcohol(d) -> Dangerous(d))", "all x.(DrivingAfterDrinkingAlcohol(x) -> Dangerous(x))", "all x.((DrivingAfterDrinkingAlcohol(x)) -> Dangerous(x))", "All x.((DrivesAfterDrinkingAlcohol(x)) -> Dangerous(x))"]}
{"id": "enwn_validation_211", "nl": "Dani drove home dangerously.", "fol": "", "prediction": ["Dani drove home dangerously.", "all x.(Dani(x) -> DrivenHomeDangerously(x))", "-DanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDanielDavidDanielDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDavidDa", "all x.(Daniel(x) -> DrivenHomeDangerously(x))", "all x y.((Daniel(x) & Home(y)) -> DrivenDangerously(x,y))", "(Daniel droveHomeDangerously(Daniel))", "all x.((Daniel(x) & DrivenHomeDangerously(x)) -> DrivenHomeDangerously(x))", "Dani drove home dangerously.", "(Dani droveHomeDangerously(Daniel))", "-Dani droveHomeDangerously(Daniel)", "all x.(Dani(x) -> DrivenHomeDangerously(x))", "all x.(Daniel(x) -> DrivenHomeDangerously(x))", "Dani drove home dangerously.", "Dani drove home dangerously.", "Dani drove home dangerously.", "Dani drove home dangerously."]}
{"id": "enwn_validation_212", "nl": "Dani could have harmed themself or someone else by driving home.", "fol": "", "prediction": ["all x.(Dani(x) -> (HasHarmed(x,self) | Harms(x,someone)))", "all x.((Dani(x) & (HasDrivenHome(x) | HasDrivenHome(x))) -> Harmed(x))", "all x y.((Dani(x) & (Dani(y) | SomeoneOther(y))) -> Harmed(x,y))", "(HasHasHasHas(Daniel,Daniel) | HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHa", "(HasHarmed(Daniel,Daniel) | Harms(Daniel,Daniel)))", "(HasHarmed(dani,self) | HasHarmed(dani,someone)))", "all x.(Dani(x) -> (HasHarmed(x,self) | Harmed(x,someone)))", "(HasHarmedSelfOrOther(Daniel) & DrivingHome(Daniel))", "all x.(Dani(x) -> (Harmed(x,self) | Harmed(x,someone)) & DrivingHome(x)))", "all x y.((Dani(x) & Dani(y)) -> (HasHarmed(x,y) | Harms(y,x)))", "all x y.((Dani(x) & (Dani(y) | SomeoneOther(y))) -> Harmed(x,y))", "all x.((Dani(x) & (HasDrivenHome(x) | HasDrivenHome(x))) -> Harmed(x,self,other))", "-(Daniel(d) & (HasDrivenHome(d) | HasDrivenHome(d)))", "all x.((Dani(x) & (HasHarmed(x,self) | Harmed(x,someone(x))) -> DrivesHome(x))", "all x y.((Dani(x) & (Dani(y) | Person(y))) -> Harmed(x,y))", "exists x.(Dani(x) & (Harmed(x,self) | Harmed(x,other)))"]}
{"id": "enwn_validation_213", "nl": "Dani should not have driven home.", "fol": "", "prediction": ["all x.(Dani(x) -> -DrivenHome(x))", "Dani should not have driven home.", "all x.((Daniel(x) & -DrivenHome(x)) -> -DrivenHome(x))", "-DrivenHome(Daniel)", "-(Daniel(d) & DrivenHome(d))", "Dani should not have driven home.", "all x.(Daniel(x) -> -DrivenHome(x))", "all x.(Dani(x) -> -DrivenHome(x))", "-Daniel should not have driven home.", "Dani shouldn't have driven home.", "Dani should not have driven home.", "(-DrivenHome(Daniel)", "all x.(Daniel(x) -> -DrivenHome(x))", "Dani should not have driven home.", "(-DrivenHome(Daniel)", "Dani should not have driven home."]}
{"id": "enwn_validation_214", "nl": "You should not copy other peoples work and claim it as your own.", "fol": "", "prediction": ["all x y.((Person(x) & Work(y)) -> -CopiesAndClaims(x,y))", "all x.((Person(x) & -CopiesWork(x) & ClaimsWorkAsOwn(x)) -> -CopiesWork(x))", "all x y.((Person(x) & Work(y)) -> -Copy(x,y))", "-(CopyWork(x) & ClaimWorkAsOwn(x)))", "all x y.((Person(x) & Work(y) & -Copies(x,y)) -> ClaimsAsOwn(x,y))", "-(CopiesWork(x) & ClaimsAsOwn(x)))", "all x.((Person(x) & -CopiesWork(x) & ClaimsWorkAsOwn(x)) -> -CopiesWork(x))", "(-(CopysWork(x,y) | ClaimsAsOwn(x,y)))", "(-CopyWorkOfOtherPeople(x) & ClaimWorkAsOwn(x))", "all x.((Person(x) & CopyWork(x) & ClaimWorkAsOwn(x)) -> -CopiesWork(x))", "all x y.((Work(x) & Person(y) & Copy(x,y)) -> ClaimAsOwn(x,y))", "all x.((Person(x) & -CopiesWork(x) & ClaimsAsOwn(x)) -> -CopiesWork(x))", "all x y z.((Person(x) & Work(y) & Work(z)) -> -CopiesAndClaims(x,y,z))", "exists x.(Person(x) & -CopiesWork(x,y) & ClaimsWorkAsOwn(x,y))", "all x.((CopyWork(x) & -ClaimWork(x)) -> -ClaimWork(x,y))", "all x y.((Person(x) & Work(y)) -> -CopiesAndClaims(x,y))"]}
{"id": "enwn_validation_215", "nl": "Copyright infringement is using protected works of another person without permission.", "fol": "", "prediction": ["all x y.((CopyrightInfringement(x) & Person(y)) -> UsesProtectedWorks(x,y))", "all x.(CopyrightInfringement(x) -> UsesProtectedWorks(x))", "all x y z.((CopyrightInfringement(x) & Person(y) & Works(z)) -> UsesWithoutPermission(x,y,z))", "all x.((CopyrightInfringement(x) & UsesProtectedWorks(x) & -Permission(x)) -> UsesWithoutPermission(x))", "all x.(CopyrightInfringement(x) -> UsesProtectedWorks(x))", "all x y.((CopyrightInfringement(x) & Person(y)) -> UsesProtectedWorksWithoutPermission(x,y))", "(UsesProtectedWorks(x) & -Permission(x))", "all x y z.((CopyrightInfringement(x) & Person(y) & Works(z) & UsesWithoutPermission(x,y,z)) -> UsesWithoutPermission(x,y,z))", "all x.(Infringement(x) -> UsesProtectedWorksOfAnotherPerson(x))", "all x.((CopyrightInfringement(x) & UsesProtectedWorks(x,y) & Person(y)) -> -Permission(x))", "all x y.((CopyrightInfringement(x) & Person(y)) -> UsesProtectedWorksWithoutPermission(x,y))", "all x y.((CopyrightInfringement(x) & Person(y) & UsesProtectedWorks(x,y)) -> -Permission(x))", "all x.(CopyrightInfringement(x) -> UsesProtectedWorks(x))", "all x.((CopyrightInfringement(x) & UsesProtectedWorks(x,y) & Person(y) & -Permission(x)) -> UsesWithoutPermission(x,y))", "all x.(CopyrightInfringement(x) -> (UsesProtectedWorks(x) & -Permission(x)))", "all x y.((CopyrightInfringement(x) & Person(y)) -> UsesProtectedWorks(x,y))"]}
{"id": "enwn_validation_216", "nl": "Ryan did not ask the band Super Cool for permission to use their song.", "fol": "", "prediction": ["all x y.((Ryan(x) & Band(y) & -AsksForPermission(x,y)) -> -UsesSong(x,y))", "Ryan -AskedSuperCoolForPermission(Ryan,Song)", "all x.((Ryan(x) & BandSuperCool(x)) -> -AsksForPermissionToUseSong(x))", "(-AsksSuperCool(Ryan) & Song(Ryan))", "-(AsksSuperCoolForPermission(Ryan) & Song(Ryan))", "Ryan did not ask SuperCoolForPermissionToUseSong(Ryan)", "all x y.((Ryan(x) & Band(y) & -AskedForPermission(x,y)) -> -UsesSong(x,y))", "Ryan did not ask for permission to use his song.", "all x y.((Ryan(x) & BandSuperCool(y)) -> -AsksForPermission(x,y))", "-(AsksSuperCool(Ryan) & Song(Ryan))", "Ryan -AskedSuperCoolForPermission(Ryan)", "(-AsksSuperCool(Ryan,SuperCool))", "(-AskedPermissionToUseSong(Ryan,SuperCool))", "Ryan did not ask SuperCoolForPermissionToUseSong(Ryan,Song,Song)", "Ryan did not ask for permission to use his song.", "(-AsksSuperCool(Ryan) & Song(Ryan))"]}
{"id": "enwn_validation_217", "nl": "Ryan made a video.", "fol": "", "prediction": ["all x.(Ryan(x) -> MadeVideo(x))", "Ryan made a video.", "(MadeVideo(Ryan) & -MadeVideo(Ryan))", "all x y z.((Ryan(x) & Video(y) & Video(z)) -> Made(x,y,z))", "Ryan made a video.", "all x.(Ryan(x) -> MadeVideo(x))", "(MadeVideo(Ryan) & Ryan(Ryan))", "(MadeVideo(Ryan) -> MadeVideo(Ryan))", "Ryan made a video.", "all x.(Ryan(x) -> MadeVideo(x))", "Ryan made a video.", "(MadeVideo(Ryan) & Video(Ryan))", "exists x.(Ryan(x) & Video(x))", "all x.(Ryan(x) -> MadeVideo(x))", "Ryan made a video.", "Ryan made a video."]}
{"id": "enwn_validation_218", "nl": "Ryan used a song from the band Super Cool in the video.", "fol": "", "prediction": ["all x y.((Ryan(x) & Song(y) & SuperCool(y)) -> UsedInVideo(x,y))", "all x y z.((Ryan(x) & Song(y) & Band(z) & SuperCool(y)) -> UsedInVideo(x,y,z))", "Ryan used a song from the band SuperCool in the video.", "(UsesSong(Ryan,SuperCool) & SuperCool(Ryan))", "(Song(Ryan) & SuperCool(Ryan))", "all x.((Ryan(x) & Song(x) & SuperCool(x)) -> UsedInVideo(x))", "all x y.((Ryan(x) & Song(y)) -> UsedInVideo(x,y))", "Ryan used a song from SuperCool in the video.", "(UsedByRyanInVideo(Ryan,SuperCool))", "all x y z.((Ryan(x) & Song(y) & Band(z) & SuperCool(y)) -> UsedInVideo(x,y,z))", "-(SuperCoolSong(Ryan) & UsedInVideo(Ryan))", "all x.((Ryan(x) & Song(x,SuperCool)) -> UsedInVideo(x))", "(UsesSongFromSuperCool(Ryan) & InVideo(Ryan))", "(Song(Ryan) & SuperCool(Ryan))", "Ryan used a song from the band SuperCool in the video.", "all x y.((Ryan(x) & Song(y) & SuperCool(y)) -> UsedInVideo(x,y))"]}
{"id": "enwn_validation_219", "nl": "All songs by Super Cool are protected work.", "fol": "", "prediction": ["all x.(SuperCool(x) -> ProtectedWork(x))", "all x.((Song(x) & SuperCool(x)) -> ProtectedWork(x))", "all x y.((Song(x) & SuperCool(y)) -> ProtectedWork(x,y))", "all x.(SuperCool(x) -> ProtectedWork(x))", "all x.(Song(x) -> SuperCool(x))", "(all x.(SuperCool(x) -> ProtectedWork(x)))", "all x.((Song(x) & SuperCool(x)) -> ProtectedWork(x))", "all x y.((Song(x) & SuperCool(y)) -> ProtectedWork(x,y))", "all x.(SuperCool(x) -> ProtectedWork(x))", "All x.(SuperCoolSong(x) -> ProtectedWork(x))", "all x.(Song(x) -> SuperCool(x))", "all x y.((Song(x) & SuperCool(y)) -> ProtectedWork(x,y))", "all x.(SuperCool(x) -> ProtectedWork(x))", "All x.((Song(x) & SuperCool(x)) -> ProtectedWork(x))", "All x.(Song(x) -> SuperCool(x))", "all x y.((Song(x) & SuperCool(y)) -> ProtectedWork(x))"]}
{"id": "enwn_validation_220", "nl": "You should not copy protected work from other people because that's copyright infringement.", "fol": "", "prediction": ["all x y.((ProtectedWork(x) & Person(y)) -> -Copies(x,y))", "all x.((ProtectedWork(x) & -CopyProtectedWork(x)) -> CopyrightInfringement(x))", "all x y.((Work(x) & Person(y)) -> -CopyProtectedWork(x,y))", "all x y z.((ProtectedWork(x) & Person(y) & CopyrightInfringement(z)) -> -CopyProtectedWork(x,y,z))", "all x.((CopyProtectedWork(x) & -CopyProtectedWork(x)) -> CopyrightInfringement(x))", "all x.((ProtectedWork(x) & -CopiesFromOthers(x)) -> CopyrightInfringement(x))", "all x y z.((Work(x) & Person(y) & Person(z) & CopyProtected(x,y) & CopyrightInfringement(x,z)) -> -CopyProtected(x,y,z))", "all x y.((ProtectedWork(x) & Person(y)) -> -CopyProtectedWork(x,y))", "all x y.((CopyProtectedWork(x) & Person(y)) -> CopyrightInfringement(x,y))", "(-CopyProtectedWork(x) & CopyrightInfringement(x))", "all x.((WorkProtected(x) & -CopyProtectedWork(x)) -> CopyrightInfringement(x))", "all x y.((Work(x) & Person(y)) -> -CopiesProtectedWork(x,y))", "all x.((ProtectedWork(x) & CopyrightInfringement(x)) -> -CopyProtectedWork(x))", "(-CopyProtectedWork(x) & CopyrightInfringement(x))", "all x.((WorkProtected(x) & -CopiesProtectedWork(x)) -> CopyrightInfringement(x))", "(-CopyProtectedWork(x) & CopyrightInfringement(x))"]}
{"id": "enwn_validation_221", "nl": "Ryan made a video and used a song from a band called Super Cool.", "fol": "", "prediction": ["all x y.((Ryan(x) & Video(y)) -> (Made(x,y) & UsedSong(x,y)))", "all x y z.((Ryan(x) & Video(y) & Song(z)) -> (Made(x,y) & Used(x,z)))", "(MadeVideo(Ryan) & UsedSong(Ryan,SuperCool))", "Ryan made a video and used a song from a band called SuperCool.", "all x.(Ryan(x) -> (MadeVideo(x) & UsedSong(x) & SuperCool(x)))", "(madeVideo(Ryan) & UsedSongFromSuperCool(Ryan))", "all x y z.((Ryan(x) & Video(y) & Song(z) & SuperCool(z)) -> (Made(x,y) & Used(x,z)))", "(Video(Ryan) & SuperCool(Ryan))", "all x y.((Ryan(x) & Video(y)) -> (Made(x,y) & UsedSong(x,y)))", "(MadeVideo(Ryan) & UsedSong(Ryan,SuperCool))", "Ryan made a video and used a song from SuperCool.", "all x.(Ryan(x) -> (MadeVideo(x) & UsedSong(x,SuperCool)))", "(MadeVideo(Ryan) & UsedSongFromSuperCool(Ryan))", "all x y.((Ryan(x) & Video(y) & SuperCool(y)) -> MadeAndUsed(x,y))", "all x.(Ryan(x) -> (MadeVideo(x) & UsedSongFromSuperCool(x)))", "Ryan made a video and used a song from SuperCool."]}
{"id": "enwn_validation_222", "nl": "Ryan used Super Cool's song without getting permission from the band first.", "fol": "", "prediction": ["all x y.((Ryan(x) & SuperCool(y)) -> UsedSongWithoutPermission(x,y))", "all x.((Ryan(x) & SuperCool(x)) -> UsedSongWithoutPermission(x))", "Ryan used SuperCoolsSong(Ryan) & -GetsPermissionFromBand(Ryan))", "Ryan used SuperCoolSong(Ryan) & -GetsPermissionFromBand(Ryan))", "(UsedBySuperCool(Ryan,Song) & -GetsPermissionFromBand(Ryan,Song))", "(UsedSong(Ryan,SuperCool) & -GetsPermission(Ryan,Band))", "-(RyanUsedSuperCoolSong(Ryan) & -GetsPermission(Ryan))", "all x y.((Ryan(x) & SuperCool(y)) -> UsedSong(x,y))", "(-GetsPermissionFromBandFirst(Ryan,SuperCool))", "(UsesSuperCoolsSong(Ryan) & -GetsPermissionFromBand(Ryan))", "all x y z.((Ryan(x) & SuperCool(y) & Song(z) & Used(x,z)) -> -GetsPermission(x,y,z))", "Ryan used SuperCoolsSong(Ryan) --> (BandPermission(Ryan) & -BandPermission(Ryan)))", "all x.((Ryan(x) & SuperCool(x)) -> UsedSongWithoutPermission(x))", "Ryan used SuperCoolSong(Ryan) & -GavePermission(Ryan))", "all x y.((Ryan(x) & SuperCool(y)) -> UsedSongWithoutPermission(x,y))", "Ryan used SuperCoolsSongWithoutPermission(Ryan)"]}
{"id": "enwn_validation_223", "nl": "Ryan used Super Cool's protected work without getting permission from the band first.", "fol": "", "prediction": ["all x y.((Ryan(x) & SuperCool(y)) -> UsedProtectedWork(x,y))", "all x.((Ryan(x) & SuperCool(x)) -> UsedProtectedWork(x))", "Ryan used SuperCoolsProtectedWork(Ryan) & -GetsPermissionFromBandFirst(Ryan))", "(ProtectedWork(Ryan) & -GetsPermissionFromBand(Ryan))", "(UsedBySuperCool(Ryan,SuperCool) & -GetsPermission(Ryan,Band))", "all x y z.((Ryan(x) & SuperCool(y) & Band(z) & UsedProtectedWork(x,y,z)) -> -GetsPermission(x,y,z))", "-(RyanUsedSuperCoolsProtectedWork(Ryan) & -GetsPermissionFromBand(Ryan))", "all x.(Ryan(x) -> (UsedSuperCoolsProtectedWork(x) & -GetsPermissionFromBand(x)))", "Ryan used SuperCool's protectedWork(Ryan) & -GetsPermissionFromBandFirst(Ryan))", "all x y.((Ryan(x) & SuperCool(y)) -> UsedProtectedWork(x,y))", "(UsesSuperCoolsProtectedWork(Ryan) & -GetsPermissionFromBand(Ryan))", "all x.((Ryan(x) & SuperCool(x)) -> (ProtectedWork(x) & -GetsPermission(x)))", "Ryan used SuperCoolsProtectedWork(Ryan) --> -GetsPermissionFromBandFirst(Ryan))", "all x y.((Ryan(x) & SuperCool(y)) -> (UsedProtectedWork(x,y) & -GetsPermission(x,y)))", "(ProtectedWork(Ryan) & -GetsPermissionFromBand(Ryan))", "Ryan used SuperCoolsProtectedWorks(Ryan) & -GavePermissionFromBandFirst(Ryan))"]}
{"id": "enwn_validation_224", "nl": "Ryan should not have used Super Cool's song because he committed copyright infringement.", "fol": "", "prediction": ["all x.((Ryan(x) & SuperCoolSong(x)) -> -Used(x,CopyrightInfringement))", "(-UsedSuperCoolSong(Ryan) & CommittedCopyrightInfringement(Ryan))", "Ryan should not have used SuperCoolsSong(Ryan) & CommittedCopyrightInfringement(Ryan)", "all x y.((Ryan(x) & SuperCool(y) & Song(z)) -> -Used(x,z))", "all x y.((Ryan(x) & SuperCoolSong(y) & CommittedCopyrightInfringement(x)) -> -Used(x,y))", "Ryan should not have used SuperCoolSong(Ryan) & CommittedCopyrightInfringement(Ryan)", "-(RyanWilliamsUsedSuperCoolSong(Ryan) & CommittedCopyrightInfringement(Ryan))", "Ryan should not have used SuperCoolsSong(Ryan) -> CommittedCopyrightInfringement(Ryan))", "((Ryan(Ryan) & SuperCoolSong(Ryan)) -> -Uses(Ryan,CopyrightInfringement))", "(-UsedSuperCoolSong(Ryan) & CommittedCopyrightInfringement(Ryan))", "all x.((Ryan(x) & SuperCoolSong(x)) -> -Used(x,y))", "((Ryan(Ryan) & SuperCoolsSong(Ryan)) -> -Used(Ryan,CopyrightInfringement))", "all x y.((Ryan(x) & SuperCoolsSong(y)) -> -Used(x,y))", "all x.((Ryan(x) & SuperCool(x)) -> -UsedSong(x,CopyrightInfringement))", "all x y.((Ryan(x) & SuperCoolSong(y)) -> -Used(x,y))", "All x.((Ryan(x) & SuperCoolsSong(x)) -> CommittedCopyrightInfringement(x))"]}
{"id": "enwn_validation_225", "nl": "Scaring people is mean and rude unless you have a good reason.", "fol": "", "prediction": ["all x.((ScarePeople(x) & -GoodRight(x)) -> (Mean(x) & Rust(x)))", "all x.(ScaringPeople(x) -> (Mean(x) & Rust(x)))", "all x.((ScaringPeople(x) & -GoodRight(x)) -> (Mean(x) & Rust(x)))", "all x y.((ScaresPeople(x) & Person(y)) -> (Mean(x) & Rust(x) & -GoodRaison(x)))", "all x.(ScarePeople(x) -> (Mean(x) & Rust(x) & -GoodRaison(x)))", "all x.(ScaringPeople(x) -> (Mean(x) & Rust(x) & -GoodRaison(x)))", "all x y.((ScarePeople(x) & Person(y) & GoodRight(x)) -> (Mean(x) & Rust(x)))", "all x.((ScaresPeople(x) & -GoodRight(x)) -> (Mean(x) & Rust(x)))", "(all x.((ScaresPeople(x) & Mean(x) & Rust(x)) -> GoodRight(x)))", "all x y.((ScaringPeople(x) & Person(y)) -> (Mean(x,y) & Rust(x,y)))", "(all x.(ScaringPeople(x) -> (Mean(x) & Rust(x))))", "all x.((ScaringPeople(x) & -GoodRaison(x)) -> (Mean(x) & Rust(x)))", "all x.((ScaresPeople(x) & NoGoodRight(x)) -> (Mean(x) & Rust(x)))", "all x.(ScaringPeople(x) -> (Mean(x) & Rust(x)))", "all x y.((ScaringPeople(x) & Person(y)) -> (Mean(x,y) & Rust(x,y)))", "all x.(ScaresPeople(x) -> (Mean(x) & Rust(x)))"]}
{"id": "enwn_validation_226", "nl": "You generally do not want to do mean or rude things to people.", "fol": "", "prediction": ["all x.((People(x) & -(Mean(x) | Rust(x)))) -> -(Mean(x) | Rust(x)))", "all x y.((Person(x) & Person(y)) -> -(Mean(x,y) | Rust(x,y)))", "all x.((Person(x) & -(Mean(x) | Rust(x)))) -> -DoMean(x))", "Generally, you do not want to do mean or rude things to people.", "all x y.((Person(x) & Person(y)) -> (-DoMeanings(x,y) | DoRustyThings(x,y)))", "all x y.((Menu(x) | Rusty(x)) -> -DoMean(x,y))", "all x.((People(x) & -Mean(x) & -Rust(x)) -> -DoMean(x))", "(-(DoMeanings(Me) | RustyThings(Me)))", "all x y.((People(x) & Person(y)) -> -(Mean(x,y) | Rust(x,y)))", "(all x.((Menu(x) | Rust(x))) -> -DoMeanOrRustToPeople(x))", "(all x.(DoMeanings(x) | RustyThings(x)))", "all x.((Person(x) & -(Mean(x) | Rust(x)))) -> -(Mean(x) | Rust(x)))", "all x.((Menu(x) | Rusty(x)) -> -DoMean(x))", "all x.((People(x) & -(Mean(x) | Rust(x))) -> -(Mean(x) | Rust(x))))", "all x y.((Person(x) & Person(y)) -> (-DoMean(x,y) | DoRust(x,y)))", "all x y.((Menu(x) & Person(y)) -> -DoMeanOrRust(x,y))"]}
{"id": "enwn_validation_227", "nl": "Luke yelled fire for fun.", "fol": "", "prediction": ["Luke yelled fire for fun.", "(YelledFire(Luke) & Fun(Luke))", "all x.(Luke(x) -> YelpedFireForFun(x))", "all x y.((Luke(x) & Fire(y)) -> YelpedForFun(x,y))", "all x.((Luke(x) & Fire(x)) -> YelpedForFun(x))", "LukeyelledForFun(Luke,Fire)", "Luke yelled fire for fun.", "Luke yelledfireForFun(Luke)", "(YelledFire(Luke) | Fun(Luke)))", "-YelledFireForFun(Luke,y)", "(YelledFireForFun(Luke,Fun))", "Luke yelled FireForFun.", "LukeyelledForFun(Luke,Fire)", "(YellsFireForFun(Luke,y))", "LukeyelledFun(Luke,Fire)", "Luke yelled fire for fun."]}
{"id": "enwn_validation_228", "nl": "Yelling fire for fun is not a good reason to yell fire.", "fol": "", "prediction": ["all x.((YellsFire(x) & Fun(x)) -> -GoodRightToYellFire(x))", "all x.(YellsFireForFun(x) -> -GoodRightToYellFire(x))", "all x.((YellsFireForFun(x) & -GoodRightToYellFire(x)) -> -GoodRightToYellFire(x))", "(all x.((YellsFireForFun(x)) -> -GoodRightToYellFire(x)))", "all x.(YellsFire(x) -> -GoodRightToYellFire(x))", "(all x.((YellsFire(x) & Fun(x)) -> -GoodRightToYellFire(x)))", "all x.((YellsFire(x) & ForFun(x)) -> -GoodRightToYellFire(x))", "all x.((YellForFun(x) & -GoodRightToYellForFun(x)) -> -GoodRightToYellForFun(x))", "all x.(YellFire(x) -> -GoodRightToYellFire(x))", "-(GoodRun(y) & YellingForFun(y))", "all x y.((YellsFire(x) & Fun(y)) -> -GoodRightToYellFire(x))", "(all x.((YellsFireForFun(x)) -> -GoodRightToYellFire(x)))", "-(GoodRightToYellFire(y))", "exists x.(YellForFun(x) & -GoodRightToYellForFun(x))", "all x y.((YellsFire(x) & Fun(y)) -> -GoodRightToYellFire(x,y))", "all x.(YellingForFun(x) -> -GoodRightToYellForFun(x))"]}
{"id": "enwn_validation_229", "nl": "When you yell fire for without a good reason, you scare everyone around you.", "fol": "", "prediction": ["all x.((YellsFire(x) & WithoutGoodRight(x)) -> ScaresEveryoneAround(x))", "all x.((YellsFireFor(x) & -GoodRight(x)) -> ScaresEveryoneAround(x))", "all x.(YellsFireForWithoutGoodRight(x) -> ScaresEveryoneAround(x))", "all x.((YellsFire(x) & -GoodRight(x)) -> ScaresEveryone(x))", "all x y.((YellsFire(x) & WithoutGoodRight(x)) -> ScaresEveryone(y))", "all x y.((YellsFire(x) & -GoodRight(x)) -> ScaresEveryone(y))", "all x y z.((YellsFire(x) & WithoutGoodRight(x,y) & Person(z) & Scares(x,z)) -> Scares(x,z))", "all x y.((YellsFireFor(x) & WithoutGoodRight(x)) -> ScaresEveryoneAround(y))", "all x.(YellsFireForWithoutGoodRight(x) -> ScaresEveryone(x))", "all x.((YellsFireFor(x) & WithoutGoodRight(x)) -> ScaresEveryoneAroundYou(x))", "all x.((YellsFire(x) & WithoutGoodRight(x)) -> ScaresEveryone(x))", "all x y.((YellsFire(x) & WithoutGoodRun(x)) -> ScaresEveryoneAround(y))", "all x.(YellsFire(x) -> ScaresEveryone(x))", "all x y.((YellsFireFor(x) & WithoutGoodRun(x)) -> ScaresEveryoneAround(y))", "all x.((YellsFireFor(x) & WithoutGoodRun(x)) -> ScaresEveryoneAroundYou(x))", "all x y.((YellsFire(x) & -GoodRun(x)) -> ScaresEveryone(y))"]}
{"id": "enwn_validation_230", "nl": "You should not scare people without good reason.", "fol": "", "prediction": ["all x.((ScarePeople(x) & -ScareGoodRight(x)) -> -Scare(x))", "all x.((Scare(x) & -Scare(x)) -> GoodRight(x))", "-(ScarePeople(x) & GoodRight(x))", "all x y.((Scare(x) & Person(y) & -Scare(x,y)) -> GoodRight(x))", "all x.((Person(x) & -Scare(x)) -> -Scare(x))", "all x.((ScarePeople(x) & -GoodRight(x)) -> -ScarePeople(x))", "-(ScarePeopleWithoutGoodRight(x))", "all x y.((Scare(x) & Person(y) & -GoodRaison(x,y)) -> -Scare(x,y))", "all x.(ScarePeople(x) -> -(ScarePeople(x) & GoodRight(x)))", "all x.(ScarePeopleWithoutGoodRight(x) -> -ScarePeopleWithoutGoodRight(x))", "-(ScarePeopleWithoutGoodRight(x))", "(all x.((Person(x) & Scares(x)) -> -Scares(x)))", "all x y.((Person(x) & Scare(y)) -> -Scare(x,y))", "all x.((Person(x) & Scare(x)) -> -Scare(x))", "all x y.((Scare(x) & Person(y) & WithoutGoodRight(x,y)) -> -Scare(x,y))", "exists x.(Scare(x) & -Scare(x))"]}
{"id": "enwn_validation_231", "nl": "Luke yelled fire without a good reason.", "fol": "", "prediction": ["Luke yelled fire without good reason.", "all x.(Luke(x) -> YelpedFire(x))", "all x.((Luke(x) & Fire(y)) -> YelledWithoutGoodRight(x,y))", "all x y.((Luke(x) & Fire(y)) -> YelpedWithoutGoodRight(x,y))", "(yelledFire(Luke) & -GoodRight(Luke))", "LukeyelledFireWithoutGoodRight(Luke)", "Luke yelled Fire(Luke,y) & -GoodRight(y))", "Luke yelled fire without good reason.", "all x y.((Luke(x) & Fire(y)) -> YelledWithoutGoodRight(x,y))", "-GoodRight(Luke)", "Luke yelled fire without a good reason.", "all x.(Luke(x) -> YelpedFireWithoutGoodRight(x))", "(YelledFire(Luke) & -GoodRight(Luke))", "(YelledFire(Luke,y) & -GoodRight(Luke,y))", "LukeyelledFireWithoutGoodRight(Luke)", "Luke yelled fire without good reason."]}
{"id": "enwn_validation_232", "nl": "Luke scared everyone around him without a good reason.", "fol": "", "prediction": ["all x.((Luke(x) & ScarredEveryone(x)) -> -GoodRight(x))", "all x y.((Luke(x) & Everyone(y)) -> ScarredWithoutGoodRight(x,y))", "Luke scared everyone around him without a good reason.", "all x.((Luke(x) & EveryoneAround(x) & -GoodRight(x)) -> Scared(x,y))", "(ScaredEveryone(Luke) & -GoodRight(Luke))", "all x.(Luke(x) -> ScarredEveryoneWithoutGoodRight(x))", "(ScaredEveryoneAround(Luke) & -GoodRight(Luke))", "all x y.((Luke(x) & Everyone(y)) -> ScarredWithoutGoodRight(x,y))", "Luke scared everyone around him without a good reason.", "all x.((Luke(x) & ScaredEveryone(x)) -> -GoodRaison(x))", "all x y.((Luke(x) & Everyone(y)) -> ScaredWithoutGoodRight(x,y))", "Luke scared everyone around him without good reason.", "all x y.((Luke(x) & EveryoneAround(y)) -> ScarredWithoutGoodRight(x,y))", "all x.(Luke(x) -> ScarredEveryoneWithoutGoodRight(x))", "Luke scared everyone around him, without a good reason.", "Luke scared everyone around him without a good reason."]}
{"id": "enwn_validation_233", "nl": "Luke should not have yelled fire.", "fol": "", "prediction": ["all x.(Luke(x) -> -YelledFire(x))", "Luke should not have yelledfire.", "-yelledFire(Luke)", "all x.((Luke(x) & -YelledFire(x)) -> -YelledFire(x))", "(yelledFire(Luke) | -YelledFire(Luke)))", "Luke should not have yelledFire(Luke)", "all x.(Luke(x) -> -YelledFire(x))", "-YelledFire(Luke)", "Luke shouldn't have yelledfire.", "(all x.(Luke(x) -> -YelledFire(x)))", "Luke should have yelled fire.", "Luke should not have yelledfire.", "-yelledFire(Luke)", "all x.(Luke(x) -> -YelledFire(x))", "Luke should not have yelledFire(x)", "Luke should not have yelled fire."]}
{"id": "enwn_validation_234", "nl": "Even though you won't be punished, you should not do bad things.", "fol": "", "prediction": ["all x.((Punished(x) & -Punished(x)) -> -BadThings(x))", "(-Punished(x) & -BadThings(x))", "-(Punished(x) | BadThings(x)))", "all x.((Punished(x) & -Punished(x)) -> -BadThings(x))", "(-Punished(x) & -BadThing(x))", "(-Punished(x) | -BadThings(x)))", "all x.(((Punished(x) & -Punished(x)) -> -BadThings(x))", "all x.((BadThing(x) & -Punished(x)) -> -BadThing(x))", "all x.((Punished(x) & -Penalized(x)) -> -BadThings(x))", "(-Punished(y) & -DoBadThings(y))", "-(Punished(x) | BadThings(x)))", "(-Penalized(x) & -BadThings(x))", "all x.((Punished(x) & -Punished(x)) -> -BadThings(x))", "exists x.(BadThing(x) & -Punished(x))", "all x.(NoPunishment(x) -> -BadThings(x))", "(-Punished(you) & -BadThings(you))"]}
{"id": "enwn_validation_235", "nl": "If no one sees you do something bad, you won't get punished.", "fol": "", "prediction": ["all x.((NoOneSees(x) & BadDoing(x)) -> -Punished(x))", "all x.((NoOneSees(x) & Bad(x)) -> -Punished(x))", "all x.((NoOneSeesBad(x) & YouDon'tGetPunished(x)) -> -SeesBad(x))", "(-SeesBad(x) -> -Punished(x))", "-(SeesBad(x) & NoOneSees(x)) -> -Punished(x))", "all x.(NoOneSeesBad(x) -> -Punished(x))", "all x.((NoOneSeesYou(x) & BadDoes(x)) -> -Punished(x))", "all x.((NoOneSees(x) & BadDoes(x)) -> -Punished(x))", "-(NoOneSeesBad(x) -> -Punished(x))", "all x.((NoOneSees(x) & Bad(x)) -> -Punished(x))", "all x y.((NoOneSees(x,y) & Bad(y)) -> -Punished(x))", "all x y.((NoOneSees(x,y) & BadDoes(y)) -> -Punished(x))", "all x.((NoOneSeesBad(x) & YouDon'tGetPunished(x)) -> -SeesBad(x))", "all x.(NoOneSees(x,y) -> -Punished(y))", "-(NoOneSeesBad(x) -> -Punished(x))", "all x.((NoOneSeesBad(x)) -> -Punished(x))"]}
{"id": "enwn_validation_236", "nl": "Mike can steal the wallet.", "fol": "", "prediction": ["all x.(Mike(x) -> CanStealWallet(x))", "(StoleWallet(Mike) -> CanTarget(Mike,Wallet))", "all x.(Mike(x) -> CanStealWallet(x))", "all x y.((Mike(x) & Wallet(y)) -> CanSteal(x,y))", "(StoleWallet(Mike) & Can(Mike))", "all x.(Mike(x) -> CanStoleWallet(x))", "-StoleWallet(Mike,x)", "Mike can stealsWallet(Mike)", "all x y.((Mike(x) & Pocket(y)) -> CanSteal(x,y))", "(StoleWallet(Mike,Mike) -> CanStealWallet(Mike,Mike))", "canStealWallet(Mike)", "(StoleWallet(Mike,Mike))", "all x.(Mike(x) -> CanStealWallet(x))", "all x.(Mike(x) -> CanStoleWallet(x))", "Mike can stealtheWallet(Mike)", "exists x.(Mike(x) & StealWallet(x))"]}
{"id": "enwn_validation_237", "nl": "When you turn away from something you cannot see it.", "fol": "", "prediction": ["all x.(TurnAwayFrom(x) -> -See(x))", "all x.((TurnAwayFrom(x) & -See(x)) -> -See(x))", "all x y.((TurnAway(x) & Something(y)) -> -See(x,y))", "all x.(TurnAwayFrom(x,y) -> -See(x,y))", "All x y z.((TurnAway(x) & Something(y) & TurnAway(z) & -See(y,z)) -> -See(z,y))", "all x.((TurnAwayFrom(x) & -See(x)) -> -See(x))", "all x.(TurnsAwayFrom(x,y) -> -Sees(x,y))", "all x y.((TurnsAway(x) & Something(y)) -> -Seen(x,y))", "all x y.((TurnAway(x) & Something(y)) -> -See(x,y))", "all x.((TurnsAwayFrom(x) & -Sees(x)) -> -Sees(x))", "all x y.((TurnsAwayFrom(x,y) & Something(y)) -> -Sees(x,y))", "all x y.((TurnAwayFrom(x,y) & Something(y)) -> -See(x,y))", "all x.(TurnAway(x) -> -See(x))", "all x.((TurnsAwayFrom(x) & CannotSee(x)) -> -See(x))", "all x y.((TurnAwayFrom(x,y) & Something(y)) -> -CanSee(x,y))", "exists x.(TurnAbove(x) & CannotSee(x,y))"]}
{"id": "enwn_validation_238", "nl": "Josh turned away from Mike and the wallet.", "fol": "", "prediction": ["all x y.((Josh(x) & Mike(y)) -> TurnedAwayFrom(x,y))", "all x y z.((Josh(x) & Mike(y) & Billboard(z)) -> TurnedAwayFrom(x,y,z))", "Josh turned away from Mike and the wallet.", "-(JoshTurnedAwayFrom(Josh,Mike) & TurnedAwayFrom(Josh,Mike))", "all x.((Josh(x) & Mike(y)) -> TurnedAwayFrom(x,y))", "(TurnedAwayFrom(Josh,Mike) & TurnedAwayFrom(Josh,Wallet))", "(TurnedAwayFromMike(Josh) & TurnedAwayFromWallet(Josh))", "all x y.((Josh(x) & Mike(y)) -> TurnedAway(x,y))", "Josh turned away from Mike and the wallet.", "(StoodAwayFromMikeAndWallet(Josh))", "all x y z.((Josh(x) & Mike(y) & Wallet(z)) -> TurnedAway(x,y,z))", "(TurnedAwayFromMikeAndWallet(Josh))", "all x.((Josh(x) & Mike(y)) -> TurnedAwayFrom(x,y))", "Josh turned away from Mike and the wallet.", "Josh turned away from Mike and the wallet.", "Josh turned away from Mike and the wallet."]}
{"id": "enwn_validation_239", "nl": "Stealing is bad.", "fol": "", "prediction": ["all x.(Stealing(x) -> Bad(x))", "Stealing is Bad(stealing)", "all x.(Stealing(x) -> Bad(x))", "all x y.((Stealing(x) & -Storm(y)) -> Bad(x))", "all x.(Stolen(x) -> Bad(x))", "(BadStolen(Stealing))", "Stealing is Bad(steal)", "all x y.((Stealing(x) & -Bad(y)) -> Stealing(x))", "all x.(Stealing(x) -> Bad(x))", "All x.(Stolen(x) -> Bad(x))", "Stealing is Bad(steal)", "all x.(Stealing(x) -> Bad(x))", "All x.(Stolen(x) -> Bad(x))", "all x.(Stealing(x) -> Bad(x))", "All x.(Staling(x) -> Bad(x))", "All x.(Stealing(x) -> Bad(x))"]}
{"id": "enwn_validation_240", "nl": "Josh turned away and cannot see Mike or the wallet.", "fol": "", "prediction": ["all x.((Josh(x) & TurnedAway(x)) -> (-SeesMike(x) | CannotSeeWallet(x))))", "(TurnedAway(Josh) & -SeesMike(Josh) & -SeesWallet(Josh))", "all x y.((Josh(x) & Mike(y)) -> (TurnedAway(x,y) & -Sees(x,y)))", "-(JoshTurnedAway(Josh) & (-SeeMike(Josh) | SeeWallet(Josh))))", "Josh turned away and he can't see Mike or the wallet.", "(TurnedAway(Josh) & -Seen(Josh) & -Seen(Josh) & -Seen(Josh)))", "all x.(Josh(x) -> (TurnedAway(x) & -Sees(x,Mike) | CannotSee(x,Wallet)))", "all x.((Josh(x) & TurnedAway(x)) -> (-SeesMike(x) | CannotSeeWallet(x))))", "Josh turned away and he -seesMike(x) & -SeesWallet(x))", "(TurnedAway(Josh) & -SeesMike(Josh) & -SeesWallet(Josh))", "all x y.((Josh(x) & Mike(y)) -> (TurnedAway(x,y) & -CanSee(x,y) & -CanSeeWallet(x,y)))", "Josh turned away and can'tseeMikeOrWallet(Josh)", "all x.((Josh(x) & TurnedAway(x)) -> (-SeenMike(x) | -SeenWallet(x))))", "Josh turned away from Mike and he can't see it.", "all x y.((Josh(x) & Mike(y)) -> (TurnedAway(x,y) & -Seen(x,y) & -Seen(x,y)))", "(TurnedAway(Josh) & -SeesMike(Josh) & -SeesWallet(Josh))"]}
{"id": "enwn_validation_241", "nl": "Mike can steal the wallet without Josh seeing.", "fol": "", "prediction": ["all x y.((Mike(x) & Josh(y)) -> CanStoleWallet(x,y))", "all x.((Mike(x) & Josh(y)) -> CanStoleWallet(x,y))", "all x y.((Mike(x) & Josh(y)) -> CanStealWallet(x,y))", "(StoleWalletWithoutJosh(Mike,Josh))", "all x y z.((Mike(x) & Pocket(y) & Josh(z)) -> CanStole(x,y,z))", "(StoleWalletWithoutJosh(Mike) & JoshSees(Mike))", "-StoleWalletWithoutJoshSeeing(Mike,Bucklett))", "all x.((Mike(x) & Josh(y)) -> CanStoleWallet(x,y))", "Mike can stealsBucksetWithoutSeeingJosh(Mike,Buckset))", "all x y.((Mike(x) & Josh(y)) -> CanStoleWallet(x,y))", "(StoleWalletWithoutSeeing(Mike,Josh))", "All x y z.((Mike(x) & wallet(y) & Josh(z)) -> CanStole(x,y,z))", "all x.((Mike(x) & Josh(x)) -> CanStealWallet(x))", "exists x.(Mike(x) & StealWallet(x,y) & JoshSees(y))", "all x y.((Mike(x) & Josh(y)) -> CanStealWallet(x,y))", "all x.((Mike(x) & Josh(y)) -> CanStoleWallet(x,y))"]}
{"id": "enwn_validation_242", "nl": "Mike can do something bad without Josh seeing.", "fol": "", "prediction": ["all x y.((Mike(x) & Josh(y)) -> CanDoBadWithoutSeeing(x,y))", "all x.(Mike(x) -> CanDoBadWithoutJosh(x))", "all x.((Mike(x) & Josh(x)) -> CanDoBadWithoutSeeing(x))", "(DoesBadWithoutJosh(Mike,Josh))", "all x y.((Mike(x) & Josh(y)) -> CanDoBad(x,y))", "(DoesBadWithoutJosh(Mike,Josh))", "All x y z.((Mike(x) & Josh(y) & Bad(z)) -> CanDo(x,z))", "(BadDoingWithoutJosh(Mike) & -Seen(Mike,Josh))", "-(Mike(Mike) & Josh(Mike))", "all x.((Mike(x) & Josh(y)) -> CanDoBad(x,y))", "all x.(Mike(x) -> CanDoBadWithoutJosh(x))", "all x y.((Mike(x) & Josh(y)) -> CanDoBadWithoutSeeing(x,y))", "exists x.(Mike(x) & CanDoBad(x,y) & JoshSees(y))", "all x y.((Mike(x) & Josh(y)) -> CanDoBad(x,y))", "exists x.(Mike(x) & CanDoBad(x,y) & -Sees(y,z))", "all x y.((Mike(x) & Josh(y)) -> CanDoBadWithoutSeeing(x,y))"]}
{"id": "enwn_validation_243", "nl": "Mike can do something bad without getting punished.", "fol": "", "prediction": ["all x.(Mike(x) -> CanDoBad(x))", "all x y.((Mike(x) & Bad(y)) -> CanDo(x,y))", "(DoesBadWithoutPunishment(Mike))", "all x.(Mike(x) -> CanDoBad(x))", "all x.((Mike(x) & Bad(x)) -> CanDo(x,y))", "all x.(Mike(x) -> CanDoBadWithoutPunishment(x))", "(CanDoBad(Mike,Punished))", "(DoesBadWithoutPunishment(Mike))", "all x y.((Mike(x) & Bad(y)) -> CanDo(x,y))", "all x.(Mike(x) -> CanDoBad(x))", "all x.(Mike(x) -> CanDoBadWithoutPunishment(x))", "all x y.((Mike(x) & BadDoing(y)) -> CanBePunished(x,y))", "All x.(Mike(x) -> (CanDoBad(x) & -Punished(x)))", "all x y.((Mike(x) & Bad(y)) -> CanDo(x,y))", "exists x.(Mike(x) & CanDoBad(x) & -Penalized(x))", "exists x.(Mike(x) & DoesBad(x) & -Punished(x))"]}
{"id": "enwn_validation_244", "nl": "Mike should not do something bad even though he will not get punished.", "fol": "", "prediction": ["all x.((Mike(x) & -Punished(x)) -> -DoBad(x))", "all x y.((Mike(x) & Bad(y)) -> -Punished(x,y))", "(-(Mike(Mike) & Bad(Mike)) -> -Punished(Mike))", "all x.((Mike(x) & -Penalized(x)) -> -DoBad(x))", "(all x.((Mike(x) & Bad(x)) -> -Punished(x)))", "all x.(Mike(x) -> -(DoBad(x) & -Penalized(x)))", "((Mike(Mike) & Bad(Mike)) -> -Punished(Mike))", "-(Mike(m) & Bad(m) & -Punished(m))", "(-(Mike(Mike) & Bad(Mike)) -> -Punished(Mike))", "all x.(Mike(x) -> -Bad(x))", "-(DoBad(Mike) & -GetPunished(Mike))", "all x y.((Mike(x) & Bad(y)) -> -Punished(x,y))", "all x.(Mike(x) -> (-DoBad(x) & -GetPunished(x)))", "(all x.(Mike(x) -> -Bad(x)))", "all x y.((Mike(x) & Bad(y)) -> -Punished(x,y))", "all x.(Mike(x) -> -(DoBad(x) | -Punished(x)))"]}
{"id": "enwn_validation_245", "nl": "You should clean messes you create.", "fol": "", "prediction": ["all x.((Mess(x) & Creates(x)) -> Cleans(x))", "all x.(CleanMess(x) -> Creates(x))", "all x y.((Mess(x) & Create(y)) -> Clean(x,y))", "all x.((Mess(x) & Creates(x)) -> Cleans(x))", "(CleanMess(x) & CreateMess(x))", "all x.((Measure(x) & Create(x)) -> Clean(x))", "all x.(CleanMeasures(x) -> Creates(x))", "all x.((Mistake(x) & Create(x)) -> Clean(x))", "all x y.((Measure(x) & Create(y)) -> Clean(x,y))", "all x y.((Mission(x) & Created(y)) -> Cleans(x,y))", "all x y.((CleanMess(x) & Create(y)) -> Clean(x,y))", "all x y z.((Mess(x) & Created(y) & Clean(z)) -> Clean(z))", "(CleanMess(x) & CreateMess(x))", "all x y.((Mistake(x) & Create(y)) -> Clean(x,y))", "All x.(Mess(x) -> Cleans(x))", "all x.(CleanMess(x) -> Creates(x))"]}
{"id": "enwn_validation_246", "nl": "If you made a spill, you made a mess.", "fol": "", "prediction": ["all x.((Spoken(x) & Made(x,y)) -> MadeMask(x,z))", "all x.((MadeSpray(x) & MadeMask(x)) -> MadeMask(x))", "(MadeSpray(x) -> MadeMask(x))", "all x.((Spoken(x) & Made(x,y)) -> MadeMame(x,z))", "all x.((MadeSpill(x) & MadeMask(x)) -> MadeMask(x))", "all x.(Spoken(x) -> MadeMask(x))", "all x.((Spoken(x) & MadeMammal(x)) -> MadeMammal(x))", "all x y.((Spill(x) & Spill(y) & Made(x,y)) -> MadeMask(x))", "all x y.((Spoken(x) & Spill(y)) -> MadeMachine(x,y))", "(MadeSpill(x) -> MadeMask(x))", "all x.((Spoilage(x) & MadeMask(x)) -> MadeMask(x))", "all x y.((MadeSpray(x) & Spill(y)) -> MadeMachine(x,y))", "all x.((MadeSpray(x) & MadeMask(x)) -> MadeMask(x))", "all x y.((Spoken(x) & Spill(y)) -> MadeMask(x,y))", "all x.(Spoken(x) -> MadeMachine(x))", "all x.(Spoken(x) -> MadeMask(x))"]}
{"id": "enwn_validation_247", "nl": "Amy dropped her ice-cream on the floor and did not clean it.", "fol": "", "prediction": ["all x.((Amy(x) & DroppedIceCream(x)) -> -Cleaned(x))", "all x y.((Amy(x) & IceCream(y)) -> (LoadedOnFloor(x,y) & -Cleaned(x,y)))", "(LoadedIceCream(Amy,Floor) & -Cleaned(Amy,Floor))", "(LocatedIceCreamOnFloor(Amy) & -CleanedIceCream(Amy))", "((Amy(Amy) & IceCream(Amy)) -> (PluckedOnFloor(Amy) & -Cleaned(Amy)))", "(-Cleaned(Amy,IceCream))", "all x y z.((Amy(x) & IceCream(y) & Floor(z)) -> (PluckedOn(x,y) & -Cleaned(x,z)))", "all x y.((Amy(x) & IceCream(y)) -> (PluckedOnFloor(x,y) & -Cleared(x,y)))", "all x.((Amy(x) & DroppedIceCream(x)) -> -Cleaned(x))", "(-Cleaning(Amy) & DroppedIceCream(Amy,Floor))", "all x.((Amy(x) & IceCream(x)) -> (LoadedOnFloor(x) & -Cleaned(x)))", "-(AmyLoadedIceCream(Amy) & DroppedOnFloor(Amy))", "all x y.((Amy(x) & IceCream(y) & Floor(y)) -> (PluckedOn(x,y) & -Cleaned(x,y)))", "(-CleanedIceCream(Amy))", "all x.((Amy(x) & DroppedIceCream(x)) -> -CleanedIceCream(x))", "all x.((Amy(x) & DroppedIceCream(x)) -> -Cleaned(x))"]}
{"id": "enwn_validation_248", "nl": "If you drop ice cream on the floor, you make a spill.", "fol": "", "prediction": ["all x.((DropsIceCream(x) & Floor(x)) -> MakesSpill(x))", "all x.((DropsIceCreamOnFloor(x) & MakesSpill(x)) -> DropsIceCreamOnFloor(x))", "all x y.((DropsIceCream(x) & Floor(y)) -> MakesSpill(x,y))", "(DropsIceCreamOnFloor(x) -> MakesSpill(x))", "all x.(DropsIceCreamOnFloor(x) -> MakesSpill(x))", "all x y z.((DropsIceCream(x) & Floor(y) & Floor(z) & DropsIceCream(x,y,z)) -> MakesSpill(x))", "all x y.((DropsIceCreamOnFloor(x) & Floor(y)) -> MakesSpill(x))", "all x.((DropsIceCream(x) & Floor(x)) -> MakesSpill(x))", "all x.((DropsIceCreamOnFloor(x) & MakesSpill(x)) -> DropsIceCreamOnFloor(x))", "all x y.((DropsIceCream(x) & Floor(y)) -> MakesSpill(x))", "all x.(DropsIceCreamOnFloor(x) -> MakesSpill(x))", "all x y.((DropsIceCreamOnFloor(x) & Floor(y)) -> MakesSpill(x))", "exists x.(DropsIceCream(x) & Floor(x) & MakesSpill(x))", "all x.((DropsIceCream(x) & Floor(x)) -> MakesSpoilage(x))", "all x.(DropsIceCreamOnFloor(x) -> MakesSpoilage(x))", "all x y.((DropsIceCreamOnFloor(x) & Floor(y)) -> MakesSpoilage(x))"]}
{"id": "enwn_validation_249", "nl": "You should clean spills you made.", "fol": "", "prediction": ["all x.((Spill(x) & Made(x)) -> Clean(x))", "all x.((Spoilage(x) & Made(x)) -> Clean(x))", "all x y.((Spill(x) & Spill(y)) -> Clean(x,y))", "(CleanSpills(x) & MakesSpills(x))", "all x.((Spill(x) & Made(x)) -> Clean(x))", "all x y.((Spoilage(x) & Spill(y)) -> Clean(x,y))", "all x.((Spoilage(x) & Made(x)) -> Cleans(x))", "(CleanSpills(x) & Made(x))", "all x y.((Spill(x) & Spill(y)) -> Clean(x,y))", "all x.(CleanSpills(x) -> Made(x))", "all x.((Spill(x) & Made(x)) -> Cleans(x,y))", "all x y.((Spoilage(x) & Spill(y)) -> Clean(x,y))", "all x y.((Spill(x) & Spill(y)) -> Cleans(x,y))", "all x.((Spoilage(x) & Made(x)) -> Clean(x))", "All x.(CleanSpills(x) -> Made(x))", "All x.((Spill(x) & Made(x)) -> Clean(x))"]}
{"id": "enwn_validation_250", "nl": "Amy made a spill and did not clean it.", "fol": "", "prediction": ["all x.((Amy(x) & Spill(x)) -> -Cleans(x))", "all x y.((Amy(x) & Spill(y)) -> (Made(x,y) & -Clean(x,y)))", "(MadeSpoke(Amy) & -Cleaned(Amy))", "all x.((Amy(x) & Spill(x)) -> (Made(x,y) & -Clean(x,y)))", "(all x.((Amy(x) & Spill(x)) -> -Clean(x)))", "-(AmyMadeSpill(Amy) & MadeSpill(Amy))", "((AmyMadeSpill(Amy) & -CleanedSpill(Amy)))", "(MadeSpoil(Amy) & -Clean(Amy))", "Amy made spill and did notcleanit.", "all x.(Amy(x) -> (MadeSpoke(x) & -Cleaned(x)))", "all x y.((Amy(x) & Spill(y)) -> (Made(x,y) & -Clean(x,y)))", "(Spoken(Amy) & -Clean(Amy,y))", "(all x.(Spoke(x) -> Made(x,y)) & -Clean(x,y))", "all x.((Amy(x) & Spill(x)) -> (Made(x,y) & -Clean(y)))", "all x y.((Amy(x) & Spill(y)) -> (Made(x,y) & -Cleared(x,y)))", "all x.((Amy(x) & Spill(y)) -> (Made(x,y) & -Cleans(x,y)))"]}
{"id": "enwn_validation_251", "nl": "Amy should have cleaned her spill.", "fol": "", "prediction": ["all x.((Amy(x) & Spill(y)) -> ShouldClean(x,y))", "(CleanedSpill(Amy) & ShouldHaveSpill(Amy))", "all x y.((Amy(x) & Spill(y)) -> ShouldClean(x,y))", "-(AmyBadSpill(Amy) & ShouldClean(Amy,Spill))", "all x.((Amy(x) & Spill(y)) -> ShouldClean(x,y))", "Amy should have cleaned her spill.", "(ClearedSpill(Amy) -> ShouldHave(Amy,Spill))", "(CleanedSpill(Amy) -> ShouldHave(Amy,Spill))", "All x.(Amy(x) -> ShouldCleanSpill(x))", "all x.((Amy(x) & Spill(x)) -> Cleans(x,y))", "(CleanedSpill(Amy,Spill) & ShouldHave(Amy,Spill))", "-(AmyBadSpray(Amy) & ShouldClean(Amy))", "all x y.((Amy(x) & Spill(y)) -> ShouldClean(x,y))", "All x.(Amy(x) -> ShouldCleanSpill(x))", "all x.((Amy(x) & Spill(y)) -> ShouldClean(x,y))", "all x y.((Amy(x) & Spill(y)) -> ShouldClean(x,y))"]}
{"id": "enwn_validation_252", "nl": "Helping hurt animals is a good thing to do.", "fol": "", "prediction": ["all x.(HelpingIrresponsibleAnimals(x) -> GoodThingToDo(x))", "all x.(HelpsIrregularAnimals(x) -> GoodThingToDo(x))", "all x.((HelpsIrregularAnimals(x) & GoodThingToDo(x)) -> HelpsIrregularAnimals(x))", "all x y.((HelpsIrregularAnimals(x) & Animal(y)) -> GoodThingToDo(x,y))", "all x.(HelpsHasAnimals(x) -> GoodThingToDo(x))", "all x y.((HelpingIrresponsibleAnimals(x) & Animal(y)) -> GoodThingToDo(x,y))", "all x.(HelpingIrresponsibleAnimals(x) -> GoodThingToDo(x))", "all x.((HelpingIrresponsibleAnimals(x)) -> GoodThingToDo(x))", "all x.(HasIll(x,Animal) -> GoodThingToDo(x))", "all x y.((Helping(x,y) & Animal(y)) -> GoodThingToDo(x,y))", "all x y.((Hunts(x,y) & Animal(y)) -> GoodThingToDo(x))", "all x y.((HelpsIrregularAnimals(x) & Animal(y)) -> GoodThingToDo(x))", "exists x.(Holding(x,IrresponsibleAnimal(x) & GoodThingToDo(x))", "all x.(HelpingIrresponsibleAnimals(x) -> GoodThingToDo(x))", "all x.(HelpsHasAnimals(x) -> GoodThingToDo(x))", "exists x.(HelpingIrregularAnimals(x) & GoodThingToDo(x))"]}
{"id": "enwn_validation_253", "nl": "If you mend something, you are helping the thing that something belongs to.", "fol": "", "prediction": ["all x y.((Mends(x) & Thing(y)) -> Helps(x,y))", "all x.(Mends(x) -> HelpsThing(x))", "all x y.((Mend(x) & Thing(y)) -> Helps(x,y))", "all x y z.((Mend(x) & Thing(y) & BelongsTo(z,y)) -> Helps(x,y))", "all x.((Mends(x) & HelpsThing(x)) -> BelongsTo(x))", "all x y.((Mends(x) & Thing(y)) -> HelpsBelongsTo(x,y))", "all x y z.((Mends(x) & Thing(y) & BelongsTo(z,y)) -> Helps(x,y))", "all x.(Mends(x) -> HelpsThing(x))", "all x y.((Mends(x) & Thing(y)) -> Helping(x,y))", "all x.((Mends(x) & Helps(x)) -> BelongsTo(x))", "all x y.((Mend(x) & Thing(y) & BelongsTo(y,x)) -> Helps(x,y))", "all x y z.((Mends(x) & Thing(y) & BelongsTo(z,y)) -> Helps(x,y,z))", "all x.(Mends(x) -> Helps(x))", "all x.(Mends(x) -> HelpsThing(x))", "exists x.(Mends(x) & Helps(x,y) & BelongsTo(y,x))", "exists x.(Mends(x) & Helps(x))"]}
{"id": "enwn_validation_254", "nl": "Setting a cast is a way to mend a wound.", "fol": "", "prediction": ["all x.(SetsCast(x) -> MendsWound(x))", "all x y.((SettingCast(x) & Wound(y)) -> Mends(x,y))", "all x.(SettingCast(x) -> MendsWound(x))", "all x y z.((SettingCast(x) & Wound(y) & Wound(z)) -> Mends(x,y,z))", "all x y.((SettingCast(x) & Wound(y)) -> Mends(x,y))", "all x.((SetsCast(x) & Wound(y)) -> Mends(x,y))", "all x y.((SettingCast(x) & Wound(y)) -> Mend(x,y))", "all x.(SetsCast(x) -> MendsWound(x))", "all x y.((Setcast(x) & Wound(y)) -> Mends(x,y))", "exists x.(Cast(x) & MendsWound(x))", "all x.(SettingCast(x) -> MendWound(x))", "all x y.((SettingCast(x) & Wound(y)) -> Mends(x,y))", "exists x.(Cast(x) & Sets(x,y))", "all x y.((SettingCast(x) & Wounded(y)) -> Mend(x,y))", "all x.(SetsCast(x) -> MendsWound(x))", "all x.(SettingCast(x) -> MendWound(x))"]}
{"id": "enwn_validation_255", "nl": "Dan put a cast around the hurt dogs broken leg.", "fol": "", "prediction": ["all x y.((Dan(x) & Dog(y) & BrokenLeg(y)) -> PutsCastAround(x,y))", "all x.((Dan(x) & IrregularLeg(x)) -> PutsCastAround(x,y))", "all x y.((Dan(x) & Dog(y)) -> PutsCastAround(x,y))", "all x y z.((Dan(x) & BrokenLeg(y) & Dog(z)) -> PutsCastAround(x,y,z))", "(PutsCastAroundIrregularLeg(Dan))", "Dan put a cast around the hurt dogs broken leg.", "all x y.((Dan(x) & IrregularLeg(y)) -> PutsCastAround(x,y))", "Dan put cast around hurt dogs brokenLeg(Dan,Dan))", "all x.((Dan(x) & BrokenLeg(x)) -> PutsCastAround(x,Dan))", "-Dan put cast around brokenLeg(Dan,Dan))", "(PutsCastAround(Dan,IrregularLeg))", "Dan put cast around brokenLeg(d) & hurtsDogs(d))", "all x.((Dan(x) & IrresponsibleLeg(x)) -> PutsCastAround(x,y))", "Dan put a cast around the hurt dogs broken leg.", "all x y.((Dan(x) & Dog(y) & BrokenLeg(y)) -> PutsCastAround(x,y))", "all x.((Dan(x) & BrokenLeg(x)) -> PutCastAround(x,Dan))"]}
{"id": "enwn_validation_256", "nl": "Dan mended the hurt dog's leg.", "fol": "", "prediction": ["all x y.((Dog(x) & Irresponsible(y)) -> MendedLeg(x,y))", "(MendedLeg(Dan) & IrresponsibleDog(Dan))", "all x.((Dog(x) & IrresponsibleLeg(x)) -> Mended(x,y))", "Dan mended the hurtdog's leg.", "-MendedLeg(Dan,IrresponsibleDog)", "all x.(MendedLeg(x,y) -> IrresponsibleDog(y))", "(MendedLeg(Dan,IrresponsibleDog))", "Dan has mended the hurt dog's leg.", "Dan mended the hurt dog's leg.", "all x y.((Dog(x) & IrregularLeg(y)) -> Mended(x,y))", "(MendedLeg(Dan) & IrregularDog(Dan))", "-MendedLeg(Dan,IrregularDog)", "all x y.((Dog(x) & IrresponsibleLeg(y)) -> Mended(x,y))", "Dan mended hurtdogs leg.", "Dan mended the hurtdogs leg.", "-MendedLeg(Dan)"]}
{"id": "enwn_validation_257", "nl": "Dan helped the hurt dog.", "fol": "", "prediction": ["all x.((Dan(x) & HurtDog(x)) -> Helped(x,Dan))", "all x y.((Dog(x) & Dan(y)) -> Helped(y,x))", "(Helped(Dan,IrregularDog))", "Dan helped the hurtDog(Dan)", "-HelpedIrregularDog(Dan)", "all x y.((Dan(x) & Dog(y)) -> Helped(x,y))", "all x.((Dan(x) & HurtDog(x)) -> Helped(x,y))", "(HasHuntedDog(Dan))", "-HasHelpedDog(Dan)", "all x.((Dog(x) & Dan(x)) -> Helped(x,y))", "Dan helped the hurtDog.", "(Helped(Dan,IrresponsibleDog))", "Dan helped hurtDog(dan)", "-HelpedIrregularDog(Dan)", "all x y.((Dan(x) & Dog(y)) -> Helped(x,y))", "Dan helped the hurtDog."]}
{"id": "enwn_validation_258", "nl": "Dan did a good thing.", "fol": "", "prediction": ["all x.((Dan(x) & GoodThing(x)) -> Did(x,Dan))", "Dan did a good thing.", "all x.(Dan(x) -> GoodThing(x))", "all x.((Dan(x) & GoodThing(x)) -> GoodThing(x))", "(GoodThing(Dan))", "(Dan didGoodThing(Dan,Dan))", "(GoodThing(Dan) & GoodThing(Dan))", "Dan did a good thing.", "-(Dan(d) & GoodThing(d)))", "(DoesGoodThing(Dan))", "all x.(DoesGoodThing(x) -> Dan(x))", "all x.((Dan(x) & GoodThing(x)) -> Did(x,Dan))", "Dan did a good thing.", "all x.((Dan(x) & GoodThing(x)) -> GoodThing(x))", "Dan did a good thing.", "Dan did a good thing."]}
{"id": "enwn_validation_259", "nl": "You should not annoy other people.", "fol": "", "prediction": ["all x.((Person(x) & -annoys(x)) -> -annoys(x))", "all x.((Person(x) & -Anannoy(x)) -> -Anannoy(x))", "all x y.((Person(x) & Person(y)) -> -annoys(x,y))", "all x.(Anannoy(x) -> -Anannoy(x))", "-annoysOtherPeople(x)", "-AnannoysOtherPeople(x)", "all x.((Person(x) & -annoys(x)) -> -Antain(x,y))", "all x y.((Person(x) & Person(y)) -> -Anannoy(x,y))", "all x.(AnannoysOthers(x) -> -Anannoys(x))", "all x.((Person(x) & -Angry(x)) -> -Angry(x))", "-annoysOthers(you)", "all x y.((Person(x) & Person(y)) -> -annoy(x,y))", "(-annoysOtherPeople(x))", "-AnannoyOtherPeople(a)", "all x y.((Person(x) & Person(y)) -> -Antannoy(x,y))", "(-annoysOthers(you,x))"]}
{"id": "enwn_validation_260", "nl": "Loud music will cause other people that are around to be annoyed.", "fol": "", "prediction": ["all x.((LoudMusic(x) & OtherPeople(x)) -> Irritated(x))", "all x y.((LoudMusic(x) & Person(y)) -> CausesAngry(x,y))", "all x.(LoudMusic(x) -> (CausesAngryPeople(x) & PeopleAround(x)))", "all x y.((LoudMusic(x) & Person(y) & Around(x)) -> CausesAngry(x,y))", "all x.((LoudMusic(x) & PeopleAround(x)) -> Irritated(x))", "all x y z.((LoudMusic(x) & Person(y) & Person(z) & Around(y,z)) -> CausesAngry(x,y,z))", "all x.(LoudMusic(x) -> CausesAngryPeople(x))", "all x.((LoudMusic(x) & OtherPeopleAround(x)) -> Irritated(x))", "all x y.((LoudMusic(x) & People(y) & Around(x)) -> CausesAngry(x,y))", "all x.(LoudMusic(x) -> (CausesAngryPeople(x) & OtherPeopleAround(x)))", "all x y.((LoudMusic(x) & Person(y) & Around(x,y)) -> CausesAngry(x,y))", "(all x.(LoudMusic(x) -> Irritated(x,y)))", "ALL X.((LoudMusic(x) & Around(x)) -> CausesAngryPeople(x))", "all x.((LoudMusic(x) & PeopleAround(x)) -> Irritated(x))", "all x y.((LoudMusic(x) & People(y)) -> CausesAngry(x,y))", "all x y.((LoudMusic(x) & OtherPeople(y)) -> CausesAngry(x,y))"]}
{"id": "enwn_validation_261", "nl": "Ned is playing music loudly.", "fol": "", "prediction": ["Ned is playing music loudly.", "all x.(Ned(x) -> PlayingMusicLoudly(x))", "(PlayingMusicLoudly(Ned) & Ned(Ned))", "-NedPlaysMusicLoudly(Ned)", "Ned PlaysMusicLoudly(Ned)", "(LoudMusic(Ned) -> Playing(Ned,Music))", "Ned plays music loudly.", "Ned is playing music loudly.", "(PlayingMusicLoudly(Ned) & Ned(Ned))", "all x.(Ned(x) -> PlayingMusicLoudly(x))", "-LoudMusicPlaying(Ned,Ned)", "Ned PlaysMusicLoudly(n)", "Ned plays music loudly.", "Ned is playing music loudly.", "all x.(Ned(x) -> PlaysMusicLoudly(x))", "NedPlaysMusicLoudly(Ned)"]}
{"id": "enwn_validation_262", "nl": "Ned and Brad are around each other.", "fol": "", "prediction": ["all x y.((Ned(x) & Brad(y)) -> Around(x,y))", "(Around(Ned,Brad) & Around(Brad,Ned))", "all x.((Ned(x) & Brad(x)) -> Around(x))", "Ned and Brad are around each other.", "((Ned(Ned) & Brad(Brad)) -> Around(Ned,Brad))", "both Ned and Brad are around each other.", "(Around(Ned) & Around(Brad))", "-(Ned(n) & Brad(n))", "(Around(Ned,Brad) & Around(Brad,Ned))", "all x y.((Ned(x) & Brad(y)) -> Around(x,y))", "Ned and Brad are around each other.", "(Around(Ned,Break) & Around(Ned,Brad))", "Ned and Brad are around each other.", "(Around(ned) & Around(brad))", "(Around(Ned,Brad) & Around(Ned,Brad))", "Ned and Brad are around each other."]}
{"id": "enwn_validation_263", "nl": "You should not play loud music with other people around because it will annoy them.", "fol": "", "prediction": ["all x y.((LoudMusic(x) & Person(y)) -> -PlayWith(x,y))", "all x.((Person(x) & LoudMusic(x)) -> -Anannoys(x,y))", "all x y.((Person(x) & LoudMusic(y)) -> -Play(x,y))", "all x y.((PlayLoudMusic(x) & OtherPeople(y)) -> -Anannoys(x,y))", "all x.((PlayLoudMusic(x) & -AttractsPeople(x)) -> -AttractsPeople(x))", "all x y z.((LoudMusic(x) & Person(y) & Person(z)) -> -Play(x,y,z))", "all x.((LoudMusic(x) & OtherPeople(x)) -> -Anannoys(x,y))", "(-PlayLoudMusicWithOtherPeople(x) & Annoys(x,y))", "-(PlayLoudMusicWithOthers(x) & AnannoysPeople(x))", "all x y.((LoudMusic(x) & OtherPeople(y)) -> -Play(x,y))", "(-PlayLoudMusicWithOthers(x) & AnnoysPeople(x))", "-(PlayLoudMusicWithOtherPeople(x) & Annoys(x,y)))", "all x y z.((LoudMusic(x) & Person(y) & Person(z) & PlaysWith(x,y,z)) -> Annoys(y,z))", "all x.((PlayLoudMusic(x) & -AnannoysPeople(x)) -> -PlayLoudMusic(x))", "all x.((Person(x) & LoudMusic(x)) -> -Play(x,y))", "all x y.((Person(x) & LoudMusic(y)) -> -Play(x,y))"]}
{"id": "enwn_validation_264", "nl": "Ned is playing his music loud around Brad.", "fol": "", "prediction": ["all x y.((Ned(x) & Brad(y)) -> PlayingMusicLoudAround(x,y))", "all x.((Ned(x) & Brad(x)) -> PlayingMusicLoud(x))", "Ned is playing LoudMusicAroundBrad(n)", "Ned is playingLoudMusicAroundBrad(n)", "(LoudMusic(Ned) & Brad(Brad))", "-(Ned(n) & Brad(n)) -> PlayingMusicLoud(n))", "(PlayingLoud(Ned,Brad))", "all x.((Ned(x) & Brad(Brad)) -> PlayingMusicLoud(x,Brad))", "all x y.((Ned(x) & Brad(y)) -> PlayingMusicLoud(x,y))", "Ned is playing LoudMusicAroundBrad(ned,ned))", "Ned is playing MusicLoudAroundBrad(ned,ned,ned))", "Ned is playing music loudly around Brad.", "(PlaysMusicLoud(Ned,Brad))", "(LoudMusic(Ned) & Brad(Brad))", "all x y.((Ned(x) & Brad(y)) -> PlaysLoudMusicAround(x,y))", "Ned plays MusicLoudAroundBrad."]}
{"id": "enwn_validation_265", "nl": "Ned should not play his music because it will annoy Brad.", "fol": "", "prediction": ["all x.((Ned(x) & -PlaysMusic(x)) -> AnnoysBrad(x))", "Ned should not play his music because it will annoy Brad.", "all x y.((Ned(x) & Brad(y)) -> -PlaysMusic(x,y))", "-(Ned(n) & Brad(n)) -> -PlaysMusic(n))", "all x.((Ned(x) & Brad(x)) -> -PlaysMusic(x))", "Ned should not play music because it will annoy Brad.", "(-PlaysMusic(Ned) & AnnoysBrad(Ned))", "Ned shouldn't play his music because it will annoyBrad.", "(all x.((Ned(x) & Brad(x)) -> -PlaysMusic(x)))", "-(Ned(Ned) & PlayMusic(Ned) & Brad(Brad))", "-(Ned(n) & Brad(b)) -> -PlayMusic(n))", "all x y.((Ned(x) & Brad(y)) -> -PlayMusic(x,y))", "Ned should not play his music because it will annoy Brad.", "all x.((Ned(x) & Brad(x)) -> -PlayMusic(x))", "(-PlaysMusic(ned) & AnnoysBrad(ned))", "Ned should not play music because it will annoy Brad."]}
{"id": "enwn_validation_266", "nl": "Forcing someone to give you something is wrong.", "fol": "", "prediction": ["all x.(Forcing(x) -> Wrong(x))", "all x y.((Forcing(x,y) & Person(y)) -> Wrong(x))", "all x.(ForcingPersonToGiveYouSomething(x) -> Wrong(x))", "all x y.((Forcing(x) & Person(y)) -> Wrong(x,y))", "all x y.((Forcing(x,y) & Person(y)) -> IsWrong(x,y))", "all x.(ForcingPersonToGiveSomething(x) -> Wrong(x))", "all x y z.((Forcing(x,y) & Person(z) & Gives(x,z)) -> Wrong(x))", "all x.(Forcing(x) -> Wrong(x))", "all x y.((Forcing(x) & Person(y)) -> IsWrong(x,y))", "All x.((Forcing(x) & Gives(x,y)) -> Wrong(x))", "all x y.((ForcingPerson(x) & Gives(x,y)) -> Wrong(x))", "all x.(ForcingSomeoneToGiveYouSomething(x) -> Wrong(x))", "all x y.((Forcing(x,y) & Person(y)) -> Wrong(x))", "all x y.((Forcing(x) & Person(y) & Gives(y,x)) -> Wrong(x))", "All x.(ForcingPerson(x) -> Wrong(x))", "all x.(Forcing(x) -> Wrong(x))"]}
{"id": "enwn_validation_267", "nl": "You should not do wrong things.", "fol": "", "prediction": ["all x.((DoWrongThings(x)) -> -DoWrongThings(x))", "all x.((DoWrongThing(x)) -> -DoWrongThing(x))", "-WrongThings(x))", "-(DoWrongThings(x))", "all x.((DoseWrongThings(x)) -> -DoseWrongThings(x))", "all x.((DoWrongThing(x) & -DoWrongThings(x)) -> -DoWrongThings(x))", "(DoWrongThing(x) | DoWrongThing(x)))", "(DoseWrongThings(x) | DoseWrongThings(x)))", "all x.(DoWrongThing(x) -> -DoWrongThing(x))", "all x.((DoingWrongThings(x)) -> -DoWrongThings(x))", "all x.((DoWrongThings(x)) -> -DoWrongThings(x))", "-WrongThings(x)", "all x.(WrongThing(x) -> -Do(x))", "-(DoWrongThing(x))", "all x.(Don'tDoWrongThings(x) -> -DoWrongThings(x))", "All x.(DoWrongThings(x) -> -DoWrongThings(x))"]}
{"id": "enwn_validation_268", "nl": "Keith bullied Gunner until Gunner gave his lunch money to Keith.", "fol": "", "prediction": ["all x y.((Keith(x) & Gunner(y)) -> Bullied(x,y))", "all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> Bullied(x,y,z))", "(Bullying(Keith,Gunner) & GivingLunchMoney(Keith,Keith))", "(Bolied(Keith,Gunner) & GivesLunchMoney(Keith,Keith))", "(BulliedByKeith(Keith,Gunner) & GunnerGaveLunchMoney(Keith,Keith))", "all x y.((Keith(x) & Gunner(y) & LunchMoney(y)) -> Bullied(x,y))", "-(BulliedBy(Keith,Gunner) & GivesLunchMoneyTo(Keith,Keith)))", "(BoliedByKeith(Keith,Gunner) & GunnerGaveLunchMoney(Keith,Keith))", "all x y.((Kitchen(x) & Gunner(y) & LunchMoney(y)) -> Bullied(x,y))", "all x y z.((Keith(x) & Gunner(y) & LunchMatter(z)) -> Bullied(x,y,z))", "Gunner gave LunchMoneyToKeith(Keith,Keith)", "Until Gunner gave LunchMoneyToKeith(Keith,Keith)", "all x.((Keith(x) & Gunner(x)) -> Bullied(x,y))", "All x.((Kitchen(x) & Gunner(x)) -> Bullied(x,Gunner,Gunner,LunchMoney))", "Gunner gave lunch money to Keith.", "all x y.((Child(x) & Gunner(y)) -> Bullied(x,y))"]}
{"id": "enwn_validation_269", "nl": "Bullying is a form of harassment.", "fol": "", "prediction": ["all x.(Bullying(x) -> Harassment(x))", "all x.(Bullying(x) -> Harassment(x))", "all x y.((Bullying(x) & Harassment(y)) -> FormOf(x,y))", "all x.(Blooding(x) -> Harassment(x))", "(Harassment(bullying)", "all x.(Bullying(x) -> Harassment(x))", "all x y.((Bullying(x) & Harassment(y)) -> FormOf(x,y))", "all x.(Bullying(x) -> Harmful(x))", "(Harassment(bullying)", "all x y.((Bullying(x) & Harshman(y)) -> Harshman(x))", "all x.(Blooding(x) -> Harmful(x))", "all x.(Boltying(x) -> Harassment(x))", "all x.(Bullying(x) -> Harassment(x))", "all x.(Bullying(x) -> Harmful(x))", "all x y.((Bullying(x) & Harassment(y)) -> FormOf(x,y))", "all x.(Bullying(x) -> Harassment(x))"]}
{"id": "enwn_validation_270", "nl": "If you continuously harass someone until they do something, you forced them to do that thing.", "fol": "", "prediction": ["all x y.((ContinuouslyHarsh(x) & Person(y) & DoSomething(y)) -> ForcEDToDoThatThing(x,y))", "all x y.((PersistentHarassment(x) & Person(y) & Dose(y)) -> ForcEDOf(x,y))", "all x.((ContinuouslyHarsh(x) & Person(x) & DoSomething(x)) -> ForcEDOfThing(x))", "all x y z.((PersistentHarassment(x) & Person(y) & Doing(z)) -> ForcingToDo(x,y,z))", "all x.((PersistentHarassment(x) & ForcingDoing(x)) -> ForcingDoing(x))", "all x.((ContinuouslyHarsh(x) & ForcingDoing(x)) -> ForcingDoing(x))", "all x y.((ContinuouslyHarsh(x) & Person(y) & Do(y,x)) -> ForcingToDo(x,y))", "all x y z.((PersonalHarassment(x) & Person(y) & Thing(z) & ContinuesUntilDoing(x,y,z)) -> ForcEDToDo(y,z))", "all x y.((PersistentHarassment(x) & Person(y) & Dose(y,x)) -> ForcEDToDo(x,y))", "all x.((ContinuouslyHarrasses(x) & Dose(x)) -> ForcEDOfThing(x))", "all x y z.((ContinuouslyHarrasse(x) & Person(y) & DoSomething(z) & ForciblyDoseThing(y,z)) -> ForciblyForcible(y,z))", "all x y.((ContinuouslyHarrasses(x) & Person(y) & Dose(y,x)) -> ForcedToDo(x,y))", "all x y.((Harsh(x) & Person(y) & ContinuesUntilDoing(x,y)) -> ForcedToDo(x,y))", "all x.((PersistentHarassment(x) & ForcingDoing(x)) -> ForcingDoing(x))", "all x.((ContinuouslyHarsh(x) & DoSomething(x)) -> ForcEDOfThing(x))", "all x.(ContinuouslyHarrassesUntilDoing(x) -> ForcEDOfThing(x))"]}
{"id": "enwn_validation_271", "nl": "You should not force someone to give you something.", "fol": "", "prediction": ["all x.((Force(x) & -Force(x)) -> Gives(x,y))", "all x y.((Person(x) & Person(y)) -> -ForcingToGive(x,y))", "-ForceSomeoneToGiveYouSomething(x))", "-ForcingSomeoneToGiveYouSomething(x))", "all x y.((Person(x) & Person(y) & Gives(x,y)) -> -Forcing(x,y))", "all x.((Forcing(x) & -Forcing(x)) -> Gives(x,y))", "all x.((Person(x) & -Forcing(x,y)) -> -Forcing(x,y))", "all x.((Force(x) & -Force(x)) -> Gives(x,y))", "all x y.((Force(x,y) & Person(y)) -> -Force(x,y))", "(-ForcePersonToGiveSomething(x))", "-ForcingSomeoneToGiveYouSomething(x))", "all x y.((Person(x) & Gives(x,y)) -> -Forcing(x,y))", "all x.((Person(x) & -Forcing(x,y)) -> GivesSomething(x,y))", "(-ForceSomeoneToGiveYouSomething(x))", "all x.((Force(x) & Gives(x,y)) -> -Force(x,z))", "-ForcingToGiveSomething(x)"]}
{"id": "enwn_validation_272", "nl": "Keith harassed Gunner until Gunner gave his lunch money to Keith.", "fol": "", "prediction": ["all x y.((Keith(x) & Gunner(y)) -> Harasse(x,y))", "(Harassment(Keith,Gunner) & GunnerGaveLunchMoney(Keith,Keith))", "all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> Harasse(x,y,z))", "Keith harassed Gunner until Gunner gave his lunchmoneyToKeith.", "(Harrassed(Keith,Gunner) & GrantsLunchMoney(Keith,Keith))", "-(Harassment(Keith,Gunner) & LunchMoney(Keith,Gunner))", "all x y.((Keith(x) & Gunner(y)) -> HarassedUntilGunnerGaveLunchMoney(x,y))", "Gunner gave lunch money to Keith.", "all x y.((Kitchen(x) & Gunner(y)) -> HarassedUntilGunnerGaveLunchMoney(x,y))", "all x.((Keith(x) & Gunner(x)) -> HarassedUntilGunnerGaveLunchMoney(x,Keith))", "(Harassment(Keith,Gunner) & LunchMoney(Keith,Gunner))", "Gunner gave LunchMoneyToKeith(Keith,Lunch,Gunner)", "all x y z.((Keith(x) & Gunner(y) & LunchMatter(z)) -> Harasse(x,y,z))", "Gunner gave his lunch money to Keith.", "Keith harassed Gunner until Gunner gave his lunchmoneyToKeith.", "Gunner gave lunchmoneyToKeith(Keith,x)"]}
{"id": "enwn_validation_273", "nl": "Keith forced Gunner to give Keith his lunch money.", "fol": "", "prediction": ["all x y.((Keith(x) & Gunner(y)) -> ForcEDToGiveLunchMoney(y,x))", "all x y.((Kitt(x) & Gunner(y)) -> ForcEDToGiveLunchMoney(y,x))", "Keith ForciblyGaveGunnerLunchMoney(Keith,Keith)", "Keith ForciblyGiveNeighborsLunchMoney(Keith,Keith)", "all x.((Kitt(x) & Gunner(x)) -> ForcEDToGiveLunchMoney(x,Kitt))", "(ForcedToGiveLunchMoney(Keith,Keith))", "(Forced(Keith) & Gunner(Keith))", "Keith forcibly gave GunnersLunchMoney(Keith)", "(ForcedToGiveKeith(Keith,LunchMoney) & Gunner(Keith,LunchMoney))", "Keith ForcingGunnerToGiveLunchMoney(Keith,Keith)", "Gunner Forcibly GivesLunchMoneyToKitt(Kitt)", "Gunner ForciblyGivenLunchMoneyToKitt.", "all x y.((Keith(x) & Gunner(y)) -> ForcEDToGiveLunchMoney(y,x))", "-ForcedToGiveLunchMoney(Gunner,Keith)", "Keith forcibly gave GunnersLunchMoney(Keith,Keith)", "Keith ForcEDGunnerToGiveLunchMoney(Keith,Keith)"]}
{"id": "enwn_validation_274", "nl": "Keith should not have forced Gunner to give Keith his lunch money.", "fol": "", "prediction": ["Keith should not have forcibly given GunnersLunchMoney(Keith)", "all x.((Keith(x) & Gunner(x)) -> -ForcEDGiveLunchMoney(x,Keith))", "all x y.((Keith(x) & Gunner(y)) -> -ForcEDToGiveLunchMoney(x,y))", "(-ForcEDByGunner(Keith) & -ForcEDByKeith(Keith))", "(all x.((Keith(x) & Gunner(x)) -> -ForcEDGIVEN(x,Keith)))", "Gunner should not have forced Keith to give him lunch money.", "all x.((Keith(x) & Gunner(x)) -> -ForcingToGiveLunchMoney(x,Keith))", "Keith should not have forced Gunner to give Keith LunchMoney(Keith)", "Keith should not have forcibly given GunnersLunchMoney(Keith,Keith)", "-ForcingGunnerToGiveLunchMoney(Keith,Keith)", "Keith should not have forcibly obstructedGunnerToGiveLunchMoney(Keith,y))", "Keith should have not forced Gunner to give KeithLunchMoney(Keith)", "Gunner should not have forcibly given Keith lunchmoney.", "Keith should not have forcibly given Gunner his lunchmoney.", "-ForcingGunnerToGiveLunchMoney(Keith,Keith)", "-ForcingGunnerToGiveLunchMoney(Keith)"]}
{"id": "enwn_validation_275", "nl": "If you agree to do something, you should do it.", "fol": "", "prediction": ["all x.((AgreesToDo(x) & Dose(x)) -> ShouldDo(x))", "all x.(AgreesToDo(x) -> ShouldDo(x))", "all x y.((AgreesToDo(x,y) & Something(y)) -> ShouldDo(x,y))", "all x.(AgreeToDo(x) -> ShouldDo(x))", "all x.((AgreesToDo(x) & Dose(x)) -> ShouldDo(x))", "all x y.((AgreesToDo(x,y) & Dose(y)) -> ShouldDo(x,y))", "(AgreeToDo(a) -> ShouldDo(a))", "all x.(AgreesToDo(x) -> ShouldDo(x))", "all x.((AgreesToDo(x) & Dose(x)) -> ShouldDo(x))", "All x y.((AgreeToDo(x,y) & Something(y)) -> ShouldDo(x,y))", "all x y.((AgreesToDo(x,y) & Something(y)) -> ShouldDo(x,y))", "all x.((Agree(x) & Do(x)) -> ShouldDo(x))", "all x.((AgreesToDo(x) & Does(x)) -> ShouldDo(x))", "all x.(AgreeToDo(x) -> ShouldDo(x))", "exists x.(AgreeToDo(x) & Do(x))", "all x.(AgreesToDo(x) -> ShouldDo(x))"]}
{"id": "enwn_validation_276", "nl": "Chad agreed to work but is playing instead.", "fol": "", "prediction": ["(all x.(Chad(x) -> Work(x)) & Playing(x))", "all x.(Chad(x) -> (AgreedToWork(x) & Playing(x)))", "(AgreedToWork(Chad) & Playing(Chad))", "all x y.((Chad(x) & Work(y)) -> (AgreedToWork(x,y) & Playing(x,y)))", "(all x.(Chad(x) -> Work(x)) & Playing(x))", "all x.(Chad(x) -> (AgreedToWork(x) & Plays(x)))", "(AgreedToWork(chad) & Playing(chad))", "-(Chad(Chad) & Worked(Chad))", "(all x.(Chad) -> Work(x)) & Playing(x))", "(AgreedToWork(chad,work) & Playing(chad,work))", "all x.(Chad(x) -> (AgreesToWork(x) & Plays(x)))", "(all x.(Chad(x) -> Work(x)) & Plays(x))", "-(Chad(chad) & Worked(chad))", "(All x.(Chad(x) -> Works(x)) & Plays(x))", "all x.(Chad(x) -> (Works(x) & Plays(x)))", "all x.(Chad(x) -> (AgreesToWork(x) & Plays(x)))"]}
{"id": "enwn_validation_277", "nl": "If you agree to do something but are doing something else, you are not doing what you agreed to do.", "fol": "", "prediction": ["all x.((AgreesToDo(x) & Doing(x) & -AgreesToDo(x)) -> -AgreesToDo(x))", "all x.((AgreesToDo(x) & DoingOther(x)) -> -DoingWhatAgreedToDo(x))", "all x.((AgreeToDo(x) & Doing(x) & -AgreeToDo(x)) -> -AgreeToDo(x))", "all x y.((AgreesToDo(x,y) & Doing(x,y)) -> -AgreesToDo(x,y))", "(AgreesToDo(x) & Doing(x) & -AgreesToDo(x))", "all x.((AgreeToDo(x) & DoingOther(x)) -> -AgreeToDo(x))", "all x y.((AgreeToDo(x,y) & Doing(x,y)) -> -AgreeToDo(x,y))", "(all x.((AgreesToDo(x) & Doing(x)) -> -AgreesToDo(x)))", "all x.((AgreesToDo(x) & Doing(x) & -AgreesToDo(x)) -> -DoingWhatAgreedToDo(x))", "all x.(AgreeToDo(x) & Doing(x,y)) -> -DoingWhatAgreedToDo(x))", "all x y.((AgreesToDo(x,y) & Doing(x,y)) -> -AgreesToDo(x,y))", "(all x.((AgreesToDo(x) & Doing(x)) -> -DoingWhatAgreedToDo(x)))", "all x.((AgreesToDo(x) & Does(x,y)) -> -AgreesToDo(x,y))", "all x y.((AgreesToDo(x,y) & Doing(y)) -> -AgreesToDo(x,y))", "all x.(AgreesToDo(x) -> (Does(x,y) & Dos(x,z)))", "exists x.(AgreeToDo(x) & Doing(x,y) & Doing(x,z))"]}
{"id": "enwn_validation_278", "nl": "Chad agreed to work but is not working.", "fol": "", "prediction": ["(all x.(Chad(x) -> Work(x)) & -Working(x))", "all x.(Chad(x) -> (AgreedToWork(x) & -Working(x)))", "(AgreedToWork(chad) & -Working(chad))", "(all x.(Chad(x) -> Work(x)))", "(AllowedWork(chad) & -Working(chad))", "(AgreedToWork(Chad) & -Working(Chad))", "all x.(Chad(x) -> (Works(x) & -Works(x)))", "all x.(Chad(x) -> (AgreesToWork(x) & -Working(x)))", "(all x.(Chad(x) -> Work(x)) & -Working(x))", "-Working(chad)", "exists x.(Chad(x) & Work(x) & -Working(x))", "(AllowedWorking(chad) & -Working(chad))", "-Working(chad)", "all x.(Chad(x) -> (Works(x) & -Works(x)))", "all x.(Chad(x) -> (AgreedToWork(x) & -Working(x)))", "(all x.(Chad(x) -> Works(x)))"]}
{"id": "enwn_validation_279", "nl": "Chad should be working.", "fol": "", "prediction": ["all x.(Chad(x) -> ShouldWork(x))", "all x y.((Chad(x) & Chad(y)) -> ShouldWork(x,y))", "all x.(Chad(x) -> ShouldWork(x))", "(Working(Chad) & -Working(Chad))", "(Working(Chad) -> ShouldWork(Chad))", "all x.((Chad(x) & Working(x)) -> ShouldWork(x))", "All x y.((Chad(x) & Work(y)) -> ShouldWork(x,y))", "all x.(Tchad(x) -> ShouldWork(x))", "-WorkingTchad.", "-WorkingTchad(t)", "all x.(Chad(x) -> ShouldWork(x))", "(Working(Chad))", "exists.(Chad(Chad) & Working(Chad))", "all x.(Tchad(x) -> Working(x))", "all x.(Chad(x) -> ShouldWork(x))", "all x.(Tchad(x) -> Working(x))"]}
{"id": "enwn_validation_280", "nl": "Lewis earned wages over the year.", "fol": "", "prediction": ["all x.(Lewis(x) -> EarnedWages(x))", "all x y.((Lewis(x) & Year(y)) -> EarnedWages(x,y))", "(EarnedWages(Lewis) & Year(Lewis))", "Lewis earnedWagesOverYear(Lewis)", "-EarnedWages(Lewis,Year)", "all x.(Lewis(x) -> EarnedWages(x,y))", "all x.((Lewis(x) & EarnedWages(x,y)) -> Year(y))", "(EarnedWages(Lewis,Year))", "Lewis earned wages over the year.", "Lewis earnedWagesOverYear(Little(Little)", "-(Lewis(Lewis) & Year(Wages))", "all x.(Lewis(x) -> EarnedWagesOverYear(x))", "all x y.((Lewis(x) & Year(y)) -> EarnedWages(x,y))", "(EarnedWages(Lewis) & Year(Lewis))", "Lewis earnedWagesOverYear.", "all x.(Lewis(x) -> EarnedWages(x,y))"]}
{"id": "enwn_validation_281", "nl": "If you earn wages over the year, you have taxes on those wages.", "fol": "", "prediction": ["all x.((EarnsWages(x) & OverYear(x)) -> HasTaxes(x))", "all x y.((EarnsWages(x) & Year(y) & EarnsOver(x,y)) -> HasTaxes(x,y))", "all x.((EarnsWages(x) & Year(x)) -> HasTaxes(x))", "all x.(EarnsWages(x) -> HasTaxesOnWages(x))", "all x.((EarnsWages(x) & OverYear(x)) -> HasTaxesOnWages(x))", "(all x.((EarnsWages(x) & Year(x)) -> HasTaxes(x))", "all x y.((EarnsWages(x,y) & Year(y)) -> HasTaxes(x,y))", "all x.(EarnsWagesOverYear(x) -> HasTaxesOnWages(x))", "all x y.((EarnsWages(x) & Year(y)) -> HasTaxes(x,y))", "all x.((EarnsWagesOverYear(x) & EarnsWagesOverYear(x)) -> HasTaxesOnWages(x))", "all x y z.((EarnsWages(x) & Year(y) & EarnsOver(x,y)) -> HasTaxes(x,z))", "all x.((EarnsWages(x) & Year(x)) -> HasTaxesOnWages(x))", "all x y.((EarnsWages(x) & Year(y) & EarnsWages(x,y)) -> HasTaxes(x,y))", "all x.(EarnsWages(x) -> HasTaxesOnWages(x))", "all x y.((EarnsWages(x,y) & Year(y)) -> HasTaxes(x,y))", "all x.((EarnsWages(x) & OverYear(x)) -> HasTaxesOnWages(x))"]}
{"id": "enwn_validation_282", "nl": "Paying taxes is a law.", "fol": "", "prediction": ["all x.(PayingTaxes(x) -> Law(x))", "all x.(PayingTaxes(x) -> Law(x))", "(PayingTaxes(x) -> Law(x))", "all x y.((Tax(x) & Law(y)) -> Pays(x,y))", "all x.(PayingTaxes(x) -> Law(x))", "all x y.((Tax(x) & Law(y)) -> Pays(x,y))", "all x y.((PayingTaxes(x) & Law(y)) -> Law(x))", "all x.(PaysTaxes(x) -> Law(x))", "exists x.(TaxePayment(x) & Law(x))", "all x.(PayingTaxes(x) -> Law(x))", "all x.(PayingTax(x) -> Law(x))", "all x y.((Tax(x) & Law(y)) -> Pays(x,y))", "all x.(TaxPayment(x) -> Law(x))", "exists x.(TaxePayment(x) & Law(x))", "all x.(PaysTaxes(x) -> Law(x))", "all x.(TaxPayment(x) -> Law(x))"]}
{"id": "enwn_validation_283", "nl": "You should obey the law.", "fol": "", "prediction": ["all x.(ObeyLaw(x) -> ShouldObeyLaw(x))", "all x.(ObeysLaw(x) -> ShouldObey(x))", "all x.(ObeyLaw(x) -> ShouldObeyLaw(x))", "(ObeyLaw(x) & OccursLaw(x))", "all x.((ObeysLaw(x)) -> ShouldObey(x,Law))", "all x y.((Doctor(x) & Law(y)) -> Obey(x,y))", "all x y.((ObeysLaw(x) & Law(y)) -> Obeys(x,y))", "-ObeyLaw(x)", "all x y.((DoesLaw(x) & Occurs(y,x)) -> Obey(x,y))", "all x.((ObeysLaw(x)) -> ObeysLaw(x))", "all x.(ObeysLaw(x) -> ShouldOccupyLaw(x))", "all x.(ObeyLaw(x) -> ShouldObeyLaw(x))", "-ObeyLaw(x)", "exists x.(Does(x,y) & Law(y) & Obey(x,y))", "All x.(ObeyLaw(x) -> ShouldOccupy(x,y))", "All x.(ObeysLaw(x) -> ObeysLaw(x))"]}
{"id": "enwn_validation_284", "nl": "Breaking the law is a crime.", "fol": "", "prediction": ["all x.((BreakingLaw(x) & Crime(x)) -> BreaksLaw(x))", "all x.(BreakingLaw(x) -> Crime(x))", "all x.((BreaksLaw(x) & Crime(x)) -> BreaksLaw(x))", "all x y.((BreaksLaw(x) & Crime(y)) -> BreaksLaw(x,y))", "(BreakingLaw(x) -> Crime(x))", "breakingthelaw(x) -> Crime(x))", "all x y.((BreakingLaw(x) & Crime(y)) -> BreaksLaw(x,y))", "all x.(BreakingLaw(x) -> Crime(x))", "all x.((BreakingLaw(x) & Crime(x)) -> BreaksLaw(x))", "all x.((BreaksLaw(x) & Crime(x)) -> Crime(x))", "all x.(BreakingLaw(x) -> Crime(x))", "all x y.((BreaksLaw(x) & Law(y)) -> Crime(x))", "all x.((BreakingLaw(x) & Crime(x)) -> BreakingLaw(x))", "all x.(BreakingLaw(x) -> Crime(x))", "all x.(BreaksLaw(x) -> Crime(x))", "exists x.(BreachTheLaw(x) & Crime(x))"]}
{"id": "enwn_validation_285", "nl": "Lewis has taxes on wages he earned over the year.", "fol": "", "prediction": ["all x.((Lewis(x) & EarnedWages(x)) -> HasTaxes(x))", "all x y.((Lewis(x) & EarnedWages(y)) -> HasTaxes(x,y))", "(HasTaxesOnWages(Lewis) & EarnedOverYear(Lewis))", "(HasTaxesOnWages(Lewis) & EarnedOverYear(Lewis))", "Lewis has taxes on wages he earned over the year.", "all x y.((Lewis(x) & EarnedOverYear(x,y)) -> HasTaxes(x,y))", "(TaxesOnWages(LittleSecondYear(LittleSecondary) & EarnedOverYear(LittleSecondary))", "all x.((Lewis(x) & EarnedWages(x)) -> HasTaxes(x))", "(HasTaxesOnWages(Lewis) & EarnedOverYear(Lewis))", "all x.(Lewis(x) -> TaxesOnWages(x))", "all x y.((Lewis(x) & Wage(y) & EarnedOverYear(x,y)) -> HasTaxes(x,y))", "all x.((Lewis(x) & EarnedOverYear(x)) -> HasTaxes(x))", "all x y.((Lewis(x) & EarnedWages(y)) -> HasTaxes(x,y))", "all x.(Lewis(x) -> HasTaxesOnWages(x,y))", "all x y.((Lewis(x) & Year(y)) -> HasTaxesOn(x,y))", "All x.(Lewis(x) -> EarnedWages(x,y))"]}
{"id": "enwn_validation_286", "nl": "Paying taxes is a law that you should obey.", "fol": "", "prediction": ["all x.(PayingTaxes(x) -> Law(x))", "all x.(PaysTaxes(x) -> Law(x))", "all x y.((Tax(x) & Law(y)) -> ShouldObey(x,y))", "all x y.((PayingTaxes(x) & Law(y)) -> ShouldObey(x,y))", "(PayingTaxes(x) -> Law(x))", "all x.(PayingTaxes(x) -> Law(x))", "all x.(PaysTaxes(x) -> LawToObey(x))", "all x.((PaysTaxes(x) & Obeys(x)) -> Law(x))", "all x y.((PayingTaxes(x) & Law(y)) -> ShouldObey(x,y))", "all x.(PaysTaxes(x) -> Law(x))", "all x.(PayingTaxes(x) -> ShouldObey(x))", "all x y.((Taxpaying(x) & Law(y)) -> Obey(x,y))", "all x.(TaxePayment(x) -> Law(x))", "all x.(TaxPayment(x) -> Law(x))", "all x y.((TaxPayment(x) & Law(y)) -> ShouldObey(x,y))", "exists x.(TaxPayment(x) & Obey(x))"]}
{"id": "enwn_validation_287", "nl": "It is a crime to not pay your taxes.", "fol": "", "prediction": ["all x.((Crime(x) & -PayTaxes(x)) -> Criminal(x))", "all x.((Crime(x) & -PaysTaxes(x)) -> Criminal(x))", "(-PayTaxes(x) -> Crime(x))", "all x.((Crime(x) & -PayTaxes(x)) -> -PayTaxes(x))", "(all x.((PayTaxes(x)) -> Crime(x)))", "(CrimeToNotPayTaxes(x) & Criminal(x))", "all x.(Crime(x) -> -PayTaxes(x))", "all x.((Crime(x) & -PaysTaxes(x)) -> -PaysTaxes(x))", "all x y.((Crime(x) & Taxes(y) & -Pays(x,y)) -> Criminal(x))", "all x y.((Crime(x) & -PayTaxes(y)) -> Criminal(x))", "all x.(CrimeToNotPayTaxes(x) -> Criminal(x))", "all x.((PayTaxes(x) & -PayTaxes(x)) -> Crime(x))", "all x.((Crime(x) & -PayTaxes(x)) -> Criminal(x))", "exists x.(Crime(x) & -PayTaxes(x))", "exists x.(Crime(x) & -PaysTaxes(x))", "all x.((Crime(x) & -PaysTaxes(x)) -> Criminal(x))"]}
{"id": "enwn_validation_288", "nl": "Lewis will commit a crime if he does not pay his taxes.", "fol": "", "prediction": ["all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x y.((Lewis(x) & TaxPayment(y)) -> CommitsCrime(x,y))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "((Lewis(le) & -PaysTaxes(le)) -> CommitsCrime(le))", "(CommitsCrime(LittleStatus(LittleStatus) & -PaysTaxes(LittleStatus))", "all x y.((Lewis(x) & TaxPay(y)) -> CommitsCrime(x,y))", "((Lewis(lee) & -PaysTaxes(lee)) -> CommitsCrime(lee))", "all x y.((Lewis(x) & -PaysTaxes(x,y)) -> CommitsCrime(x,y))", "all x.((Little(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x y.((Lewis(x) & Taxpayer(y)) -> CommitsCrime(x,y))", "all x y.((Lewis(x) & TaxPayment(y) & -Pays(x,y)) -> CommitsCrime(x,y))", "all x.((Little(x) & -PayTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))"]}
{"id": "enwn_validation_289", "nl": "You should fulfill your promises.", "fol": "", "prediction": ["all x.((Promise(x) & Fulfill(x)) -> ShouldFull(x))", "all x.((Promise(x) & Fulfills(x)) -> -Fulls(x))", "(FulfillPromises(you) & -FullPromises(you))", "all x y.((Promise(x) & Promise(y)) -> Fulfills(x,y))", "all x.((Promise(x) & Fulfill(x)) -> -Full(x))", "all x.(FulfillPromises(x) -> -FullPromises(x))", "all x.(Promise(x) -> Fulfills(x))", "all x.((Promise(x) & Fulfills(x)) -> Should(x))", "-FulfillPromises.", "all x y.((Promise(x) & Promise(y)) -> Fulfills(x,y))", "all x.((Person(x) & Promise(x)) -> Fulfill(x))", "all x.((Promise(x) & Fulfill(x)) -> ShouldFull(x))", "All x.(ReceivesPromises(x) -> ShouldFull(x))", "All x.(Promise(x) -> Fulfills(x,y))", "all x y.((Promise(x) & Promise(y)) -> Fulfill(x,y))", "all x y.((Person(x) & Promise(y)) -> Fulfill(x,y))"]}
{"id": "enwn_validation_290", "nl": "Evan said he would help Rose.", "fol": "", "prediction": ["Evan said he would help Rose.", "all x y.((Evan(x) & Rose(y)) -> Helps(x,y))", "all x.((Evan(x) & Rose(y)) -> Helps(x,y))", "(HisName(Evan) & Rose(Evan))", "(HisSelf(Evan) & Rose(Rose))", "Evan said he would help Rose.", "(all x.(Evan(x) -> HelpsRose(x)))", "(HelpsRose(Evan) | HelpsRose(Evan)))", "all x.(Evan(x) -> WouldHelpRose(x))", "-(Evan(e) & Rose(rose))", "Evan has said he would help Rose.", "Evan said he would help Rose.", "-(Evan(e) & Rose(r))", "Evan said he would HelpRose.", "Evan said he would help Rose.", "Evan said he would help Rose."]}
{"id": "enwn_validation_291", "nl": "If you say you will do something, you promise to do that thing.", "fol": "", "prediction": ["all x.((Sells(x) & WillDo(x)) -> PromisesToDo(x))", "all x y.((Sells(x,y) & Thing(y)) -> PromisesToDo(x,y))", "all x.((Sell(x) & WillDo(x)) -> PromisesToDo(x))", "all x.((Sells(x) & WillDo(x)) -> PromisesToDo(x))", "all x y.((Sell(x) & Thing(y)) -> PromisesToDo(x,y))", "all x.((Sells(x,y) & WillDo(x,y)) -> PromisesToDo(x,y))", "(all x.((Sells(x) & WillDo(x)) -> PromisesToDo(x)))", "all x.((Sell(x) & WillDo(x)) -> PromisesToDo(x))", "all x.((Sells(x) & WillDo(x)) -> PromisesToDo(x))", "all x y.((Sells(x,y) & Thing(y)) -> PromisesToDo(x,y))", "all x.((Spoken(x) & PromisesToDo(x)) -> DoingThing(x))", "all x y.((Sells(x) & Thing(y) & WillDo(x,y)) -> PromisesToDo(x,y))", "exists x.(Promise(x) & Says(x,y) & WillDo(y))", "all x y.((Sells(x,y) & Thing(y)) -> PromisesDoing(x,y))", "all x.((Sell(x) & WillDo(x)) -> PromisesToDo(x))", "all x.((YouSell(x) & WillDo(x)) -> PromisesToDo(x))"]}
{"id": "enwn_validation_292", "nl": "Evan promised to help Rose.", "fol": "", "prediction": ["Evan promised to help Rose.", "all x.((Evan(x) & Rose(y)) -> PromisedToHelp(x,y))", "all x y z.((Evan(x) & Rose(y) & Evan(z)) -> PromisedToHelp(x,y,z))", "(Promise(Evan,Rose))", "-(Promise(Evan,Rose) & Promise(Evan,Rose))", "Evan promised to help Rose.", "(Promise(Evan,Rose) & Promise(Evan,Rose))", "Evan promised to HelpRose(evan)", "(Promise(Evan) & Rose(Evan))", "(PromisesToHelp(Evan,Rose))", "all x.((Evan(x) & Rose(y)) -> PromisedToHelp(x,y))", "Evan promised to help Rose.", "Evan promised to HelpRose.", "Evan promised to help Rose.", "Evan promised to HelpRose.", "Evan promised to help Rose."]}
{"id": "enwn_validation_293", "nl": "Evan should help Rose.", "fol": "", "prediction": ["all x.((Evan(x) & Rose(y)) -> ShouldHelp(x,y))", "all x.(Evan(x) -> ShouldHelpRose(x))", "all x y.((Evan(x) & Rose(y)) -> ShouldHelp(x,y))", "(Helps(Evan,Rose) -> ShouldHelp(Evan,Rose))", "all x.((Evan(x) & Rose(y)) -> ShouldHelp(x,y))", "Evan should help Rose.", "(HelpsRose(Evan))", "-(Evan(Evan) & Rose(Evan))", "(All x.(Evan(x) -> ShouldHelpRose(x)))", "All x.(Evan(x) -> ShouldHelpRose(x))", "all x y.((Evan(x) & Rose(y)) -> ShouldHelp(x,y))", "Evan should help Rose.", "(HelpsRose(Evan,Rose))", "All x.(Evan(x) -> ShouldHelpRose(x))", "all x y.((Evan(x) & Rose(y)) -> ShouldHelp(x,y))", "All x.(Evan(x) -> ShouldHelpRose(x))"]}
{"id": "enwn_validation_294", "nl": "Erin argued for her answer after it was proven wrong.", "fol": "", "prediction": ["Erin argued for her answer after it was proven wrong.", "all x y.((Erin(x) & Answer(y) & ProvenWrong(y)) -> ArguatedFor(x,y))", "all x.((Erin(x) & AnswerProvenWrong(x)) -> ArguatedFor(x,y))", "Erin argued for answer after it was proven wrong.", "(ProvenWrong(Erin) & ArgumentedFor(Erin,Answer))", "(AnswerProvenWrong(Erin) & ArgumentedFor(Erin,Answer))", "all x y.((Erin(x) & Answer(y) & ProvenWrong(x,y)) -> ArguatedFor(x,y))", "all x.((Erin(x) & AnswerProvenWrong(x)) -> ArgumentedFor(x,y))", "(ProvenWrong(Erin) & ArguingForAnswer(Erin))", "Erin argued for her answer after it was proven wrong.", "Erin ArguatedForAnswerAfterProvenWrong(Erin)", "Erin argued for answer after it was proven wrong.", "all x y.((Erin(x) & Answer(y) & ProvenWrong(y)) -> ArgumentatedFor(x,y))", "Erin argued for her answer after it was proven wrong.", "Erin argued for answer after it was proven wrong.", "Erin argued for her answer after it was proven wrong."]}
{"id": "enwn_validation_295", "nl": "If you argue when you are wrong, you do not accept that you are wrong.", "fol": "", "prediction": ["all x.(Argument(x) -> -AcceptsWrong(x))", "all x.((Argument(x) & Wrong(x)) -> -AcceptsWrong(x))", "all x y.((Argument(x) & Wrong(x)) -> -AcceptsWrong(y))", "all x.(Argument(x) -> -AcceptsWrong(x))", "all x.(ArgumentWhenWrong(x) -> -AcceptsWrong(x))", "(all x.(ArgumentWhenWrong(x) -> -AcceptsWrong(x)))", "all x.((Argument(x) & Wrong(x)) -> -AcceptWrong(x))", "all x.(Argument(x) -> -AcceptWrong(x))", "all x.(AarbitsWhenWrong(x) -> -AcknowledgesWrong(x))", "all x y.((Argument(x) & Wrong(x)) -> -Accept(y,wrong))", "all x.(ArgumentWrong(x) -> -AcceptWrong(x))", "all x y.((Arrive(x) & Wrong(x)) -> -AcceptsWrong(y))", "all x.((Argument(x) & Wrong(x)) -> -AcceptsWrong(x))", "all x y.((Argument(x) & Wrong(x)) -> -AcceptsWrong(y))", "(all x.(Argument(x) -> Wrong(x)))", "all x.(Argument(x) -> -AcknowledgesWrong(x))"]}
{"id": "enwn_validation_296", "nl": "If you can't accept that you are wrong, you lack humility.", "fol": "", "prediction": ["all x.((CannotAccept(x) & IsWrong(x)) -> LacksHumor(x))", "all x.((Can'tAccept(x) & IsWrong(x)) -> LacksHumor(x))", "all x.((CannotAccept(x) & IsWrong(x)) -> LacksHumor(x))", "-CanAcceptWrong(x) -> LackHumor(x))", "all x.((Can'tAcceptIsWrong(x)) -> LacksHumor(x))", "all x.((CausesIncorrectAcceptance(x) & LacksHumor(x)) -> LacksHumor(x))", "(-AcceptsIsWrong(x) -> LacksHumor(x))", "all x.((CannotAcceptIsWrong(x)) -> LacksHumor(x))", "all x y.((CannotAccept(x,y) & IsWrong(x)) -> LacksHumor(y))", "all x.((CannotAccept(x) & IsWrong(x)) -> LacksHumor(x))", "all x.((CausesIncorrectAcceptance(x) & LackHumor(x)) -> LacksHumor(x))", "all x.((IsIrresponsible(x) & CannotAccept(x)) -> LacksHumor(x))", "all x.((Can'tAccept(x) & IsWrong(x)) -> LacksHumor(x))", "all x.((AcquiresWrong(x) & LacksHumor(x)) -> LacksHumor(x))", "all x y.((CannotAccept(x,y) & IsWrong(y)) -> LacksHumor(x))", "(LackHumor.)"]}
{"id": "enwn_validation_297", "nl": "You should have humility.", "fol": "", "prediction": ["all x.(HasHumor(x) -> Humility(x))", "all x.(Humor(x) -> HasHasHabit(x))", "(HasHumor(x) -> Humility(x))", "all x.(HasHumor(x) -> HasHumor(x))", "all x.(Humor(x) -> Humility(x))", "you should have humility.", "all x y.((HasHumor(x) & Humility(y)) -> Has(x,y))", "all x.(Humor(x) -> HasHasHasHazard(x))", "-HasHumor.", "All x.((HasHumor(x) & Humility(x)) -> HasHasHumor(x))", "all x.(HasHumor(x) -> Humility(x))", "all x.(Humanity(x) -> HasHasHumor(x))", "All x.(HasHabitat(x) -> Humility(x))", "-HasHumor(x)", "all x.(HasHumor(x) -> HasHumor(x))", "all x.(HasHumor(x) -> Humility(x))"]}
{"id": "enwn_validation_298", "nl": "Erin did not accept that she was wrong.", "fol": "", "prediction": ["all x.(Erin(x) -> -AcceptsWrong(x))", "Erin -AcquiredWrong(Erin))", "-(Erin(Erin) & Wrong(Erin))", "(-AcknowledgesWrong(Erin))", "Erin did not accept that she was wrong.", "Erin nead-acquired(Erin,wrong)", "all x.(Erin(x) -> -Wrong(x))", "Erin -IsWrong(Erin))", "(-Accepts(Erin,Wrong))", "Erin neassisted that she was wrong.", "Erin & -AcceptsWrong(Erin))", "(-AcceptsWrong(Erin))", "Erin did not accept that she was wrong.", "(-AcknowledgesWrong(Erin))", "Erin ne accepted & WasWrong(Erin))", "Erin did not accept that she was wrong."]}
{"id": "enwn_validation_299", "nl": "Erin lacks humility.", "fol": "", "prediction": ["Erin lacksHumor.", "all x.(Erin(x) -> LacksHumor(x))", "Erin lacksHumor.", "Erin lacksHumor.", "-HasHumor(Erin)", "(LacksHumor(Erin))", "Erin -HasHumor(Erin)", "all x.(Erin(x) -> LacksHumor(x))", "(LacksHumbleness(Erin))", "Erin lacksHumor.", "all x.(Erin(x) -> LacksHumor(x))", "-HasHumor(Erin,Silent)", "Erin lacksHumor.", "(LacksHumbleness(Erin))", "Erin lacksHumor.", "Erin lacks Humility."]}
{"id": "enwn_validation_300", "nl": "Erin should have humility.", "fol": "", "prediction": ["all x.(Erin(x) -> Humility(x))", "Erin should have Humility.", "all x.((Erin(x) & Humility(x)) -> ShouldHave(x))", "all x.(Erin(x) -> Humility(x))", "all x y.((Erin(x) & Humility(y)) -> ShouldHave(x,y))", "Erin should have Humility.", "all x.((Erin(x) & Humility(x)) -> ShouldHave(x))", "all x.(Erin(x) -> Humility(x))", "all x.(Erin(x) -> ShouldHaveHumor(x))", "(HasHumor(Erin,Self))", "Erin should have Humility.", "Erin should have Humility(Erin,x)", "Erin should have humility.", "all x.(Eric(x) -> ShouldHaveHumor(x))", "All x.(Erin(x) -> Humility(x))", "All x.(Erin(x) -> Humility(x))"]}
{"id": "enwn_validation_301", "nl": "You should not intentionally mislead people.", "fol": "", "prediction": ["all x.((IntentionallyMisleadsPeople(x)) -> -(IntentionallyMisleadsPeople(x) & -IntentionallyMisleadsPeople(x)))", "all x.((Person(x) & -IntentionallyMisleads(x)) -> -IntentionallyMisleads(x))", "all x.((IntentionallyMisleadPeople(x)) -> -(IntentionallyMisleadsPeople(x) & -IntentionallyMisleadsPeople(x)))", "all x y.((IntentionallyMisleads(x) & Person(y)) -> -IntentionallyMisleads(x,y))", "all x.(MisleadsPeople(x) -> -Intentionally(x))", "all x.(IntentionallyMisleadPeople(x) -> -(IntentionallyMisleadsPeople(x) & -IntentionallyMisleadsPeople(x)))", "you should not intentionally mislead people.", "-IntentionallyMisleadPeople(x)", "((IntentionallyMisleadsPeople(x)) | (IntentionallyMisleadsPeople(x) & -IntentionallyMisleadsPeople(x))))", "-(IntentionallyMisleadPeople(x))", "all x.((Person(x) & -IntentionallyMisleads(x)) -> -IntentionallyMisleads(x))", "all x y.((IntentionallyMisleadPeople(x) & Person(y)) -> -IntentionallyMislead(x,y))", "-IntentionallyMisleadPeople(x)", "all x y.((Person(x) & Person(y)) -> -IntentionallyMisleads(x,y))", "all x.((IntentionallyMisleadsPeople(x)) -> -IntentionallyMisleadsPeople(x))", "-IntentionallyMisleadPeople(x)"]}
{"id": "enwn_validation_302", "nl": "You knowingly told John incorrect information.", "fol": "", "prediction": ["All x.((YouToldJohnIncorrectInformation(x)) -> UnknowinglySaid(x,John))", "You knowingly told JohnIncorrectInformation(John)", "all x.((YouSaidIncorrectInformation(x) & John(x)) -> UnknowinglySaidIncorrectInformation(x))", "(WillyToldJohnIncorrectInformation(John) -> Unknowingly(John))", "-(YouSaidIncorrectInformation(John) & knowingly(John))", "all x y.((You(x) & John(y)) -> IncorrectInformation(x,y))", "(YouKnowledgelyToldJohnIncorrectInformation(John) -> UnknowinglySaidIncorrectInformation(John))", "(WilliamsIncorrectInformation(John,John) -> UnknowinglySaid(John,John))", "You knewJohnIncorrectInformation(x) -> TellsJohnIncorrectInformation(x))", "all x y.((You(x) & John(y)) -> UnknowinglySaidIncorrectInformation(x,y))", "All x.((YouToldJohnIncorrectInformation(x)) -> Unknowingly(x))", "You knowingly toldJohnIncorrectInformation(John)", "You have knowingly told John incorrect information.", "-(YouKnowledgedIncorrectInformation(John))", "-(WildlyToldJohnIncorrectInformation(John) & John(John))", "All x.((YouSaidIncorrectInformation(x) & John(x)) -> UnknowinglySaidIncorrectInformation(x))"]}
{"id": "enwn_validation_303", "nl": "If you do something that you know is incorrect, you did that on purpose.", "fol": "", "prediction": ["all x.((DoesIncorrect(x) & Knows(x)) -> DidOnPurpose(x))", "all x.((Do(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x y.((Does(x,y) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "(Incorrect(x) -> DidOnPurpose(x))", "all x.((Does(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x.((Do(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x.((DoesIncorrect(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x y.((Does(x,y) & KnowsIncorrect(y)) -> DidOnPurpose(x,y))", "all x.((Do(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x.((Doing(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x.((Does(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x y.((DoesIncorrect(x) & Knows(x,y)) -> DidOnPurpose(x))", "all x y.((Doing(x) & Incorrect(x) & Knows(x,y)) -> DidOnPurpose(x))", "all x.((Doing(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "exists x.(IncorrectDocument(x) & DidOnPurpose(x))", "all x y.((Does(x,y) & KnowsIncorrect(x)) -> DidOnPurpose(x))"]}
{"id": "enwn_validation_304", "nl": "Telling someone incorrect information is misleading them.", "fol": "", "prediction": ["all x.((TellsIncorrectInformation(x) & Person(x)) -> Misleading(x))", "all x y.((IncorrectInformation(x) & Person(y)) -> Misleading(x,y))", "all x y.((TellsIncorrectInformation(x) & Person(y)) -> Misleading(x,y))", "all x.((TellsIncorrectInformation(x) & Person(x)) -> Misleading(x))", "all x.(IncorrectInformation(x) -> Misleading(x))", "all x y.((IncorrectInformation(x) & Person(y)) -> Misleading(x,y))", "all x y z.((TellsIncorrectInformation(x) & Person(y) & Person(z)) -> Misleading(y,z))", "all x.((TellsIncorrectInformation(x) & Person(x)) -> Misleading(x))", "all x y.((Tells(x,y) & Person(y)) -> IrresponsibleInformation(x,y))", "all x y.((TellsIncorrectInformation(x) & Person(y)) -> Misleading(x,y))", "all x y.((Person(x) & IncorrectInformation(y,x)) -> Misleading(x,y))", "all x.(IncorrectInformation(x) -> Misleading(x))", "all x.(TellsIncorrectInformation(x) -> Misleading(x))", "all x.((TellsIncorrectInformation(x) & Person(y)) -> Misleading(y))", "all x.((IncorrectInformation(x) & Tells(x,y)) -> Misleading(x,y))", "All x.(TellsIncorrectInformation(x) -> Misleading(x))"]}
{"id": "enwn_validation_305", "nl": "If you do something on purpose, you did that thing intentionally.", "fol": "", "prediction": ["all x.((DoesOnPurpose(x) & Intentionally(x)) -> DidIntentionally(x))", "all x y.((DoesOnPurpose(x) & DoesOnPurpose(y)) -> DidIntentionally(x,y))", "all x.((DoesOnPurpose(x) & DidIntentionally(x)) -> DidIntentionally(x))", "all x.((DoesOnPurpose(x) & DidIntentionally(x)) -> DidIntentionally(x))", "all x.((Does(x,purpose) & Intentionally(x)) -> Did(x,purpose))", "(DoesOnPurpose(x) -> DidIntentionally(x))", "all x.((DoesOnPurpose(x) & Intentionally(x)) -> DidIntentionally(x))", "all x y.((Does(x,y) & Purpose(y)) -> DidIntentionally(x,y))", "all x y.((DoesOnPurpose(x) & Dose(y)) -> IntentionallyDoes(x,y))", "all x y.((DoesOnPurpose(x) & Person(y)) -> DidIntentionally(y,x))", "all x.((DoesOnPurpose(x) & DidIntentionally(x)) -> DoseOnPurpose(x))", "all x.((DoesOnPurpose(x) & Intentionally(x)) -> DidIntentionally(x))", "all x.(DoesOnPurpose(x) -> DidIntentionally(x))", "all x y.((DoesOnPurpose(x) & Intentional(y)) -> DidIntentionally(x,y))", "exists x.(DoesOnPurpose(x) & Intentionally(x))", "all x.((Does(x,purpose) & Intentionally(x)) -> Did(x,purpose))"]}
{"id": "enwn_validation_306", "nl": "You told John incorrect information on purpose.", "fol": "", "prediction": ["all x.((John(x) & IncorrectInformation(x)) -> Tells(x,John))", "all x y.((John(x) & IncorrectInformation(y)) -> Tells(x,y))", "(IncorrectInformation(John) & OnPurpose(John))", "-(SaidIncorrectInformationOnPurpose(John) & John(John)))", "You told John incorrect information on purpose.", "All x.((YouToldJohn(x) & IncorrectInformation(x)) -> TellsJohn(x))", "(IncorrectInformationOnPurpose(John) -> Tells(John,John))", "All x.((John(x) & IncorrectInformation(x)) -> Tells(x,y))", "-(YouToldJohnIncorrectInformation(John))", "All x.((YouToldJohnIncorrectInformation(x)) -> IncorrectInformation(x))", "all x y.((John(x) & IncorrectInformation(y)) -> Tells(x,y))", "You told John incorrect information on purpose.", "all x y.((SaidIncorrectInformation(x,y) & John(y)) -> Tells(x,y))", "(IncorrectInformationOnPurpose(John,x))", "all x y.((John(x) & -IncorrectInformation(y)) -> Tells(x,y))", "All x.((SaidIncorrectInformation(x) & John(x)) -> IncorrectInformation(x))"]}
{"id": "enwn_validation_307", "nl": "You misled John on purpose.", "fol": "", "prediction": ["all x.((John(x) & MisledOnPurpose(x)) -> MisledOnPurpose(x))", "(MisledJohn(John) & Purpose(John))", "You misledJohnOnPurpose.", "all x y.((John(x) & Purpose(y)) -> Misled(x,y))", "(MisledJohnOnPurpose(John) & -MisledJohnOnPurpose(John))", "All x.((John(x) & Misled(x)) -> Misled(x))", "You misled John on purpose.", "All x.(MisledJohn(x) -> MisledOnPurpose(x))", "-(MisledJohn(John,Purpose))", "-(MisledOnPurpose(John) & John(John))", "All x.(Misled(x,John) -> MisledOnPurpose(x,John))", "(MisledJohn(John) & Purpose(John))", "You misledJohnOnPurpose.", "all x y.((John(x) & Purpose(y)) -> Misled(x,y))", "You misled John on purpose.", "(MisledJohn(John,Purpose))"]}
{"id": "enwn_validation_308", "nl": "You intentionally misled John.", "fol": "", "prediction": ["all x.(IntentionallyMisledJohn(x) -> MisledJohn(x))", "all x.((John(x) & IntentionallyMisled(x)) -> Misled(x))", "(IntentionallyMisledJohn(John) & -IntentionallyMisledJohn(John))", "-IntentionallyMisledJohn(x)", "You intentionally misledJohn.", "All x y.((IntentionallyMisledJohn(x) & John(y)) -> Misled(x,y))", "(IntentionallyMisledJohn(John) -> MisledJohn(John))", "All x y.((YouIntentionallyMisledJohn(x) & John(y)) -> Misled(x,y))", "All x.(IntentionallyMisledJohn(x) -> MisledJohn(x))", "all x.((John(x) & IntentionallyMisled(x)) -> Misled(x))", "-IntentionallyMisledJohn(John)", "You intentionally misledJohn.", "You intentionally misledJohn(John)", "-IntentionallyMisledJohn(x)", "all x.(IntentionallyMisledJohn(x) -> MisledJohn(x))", "you intentionally misledJohn(John)"]}
{"id": "enwn_validation_309", "nl": "You should not have misled John intentionally.", "fol": "", "prediction": ["all x.((John(x) & MisledIntentionally(x)) -> -MisledIntentionally(x))", "-IntentionallyMisledJohn(John)", "-(IntentionallyMisledJohn(John))", "all x.((John(x) & -IntentionallyMisled(x)) -> -Misled(x,John))", "You should not have misled John intentionally.", "(MisledJohnIntentionally(John,x) & -MisledJohnIntentionally(John,x))", "((MisledJohnIntentionally(John,John)) | MisledJohnIntentionally(John,John)))", "all x.((John(x) & MisledIntentionally(x)) -> -(MisledIntentionally(x) & MisledIntentionally(x)))", "(-MisledIntentionally(John,John))", "all x.((YouMisledJohnIntentionally(x)) -> -MisledJohnIntentionally(x))", "-IntentionallyMisledJohn(John)", "-(MisledJohnIntentionally(John,x))", "All x.((MisledJohn(x) & -Intentionally(x)) -> -MisledJohn(x))", "you should not have misledJohnIntentionally.", "-IntentionallyMisledJohn(John)", "-(IntentionallyMisledJohn(John,John))"]}
{"id": "enwn_validation_310", "nl": "You should only fire someone if you have a good reason.", "fol": "", "prediction": ["all x.((Person(x) & GoodRight(x)) -> Fire(x))", "all x y.((Furn(x) & Person(y) & GoodRight(y)) -> Fire(x,y))", "all x y.((Person(x) & Reason(y) & Good(y)) -> Fire(x,y))", "all x.((Furn(x) & GoodRight(x)) -> Fire(x))", "all x.((Person(x) & GoodRight(x)) -> Fire(x))", "all x y.((Function(x) & Person(y) & GoodRight(x,y)) -> Fire(x,y))", "all x y.((Fire(x) & Person(y) & GoodRight(y)) -> Fire(x,y))", "all x y z.((Person(x) & Reason(y) & Reason(z) & Good(z)) -> Fire(x,y,z))", "all x y.((Furnish(x) & Person(y) & GoodRight(y)) -> Fire(x,y))", "all x.((Person(x) & GoodMoment(x)) -> Fire(x))", "all x y.((Person(x) & Reason(y) & Good(y)) -> Fire(x,y))", "all x.((Function(x) & GoodRunn(x)) -> Fires(x))", "all x.((Fires(x) & GoodRight(x)) -> Fires(x))", "exists x.(Fire(x) & GoodRight(x))", "all x y.((Fire(x) & Person(y) & GoodRight(y)) -> Fire(x,y))", "exists x.(Furn(x) & GoodRight(x))"]}
{"id": "enwn_validation_311", "nl": "Bob fired Peter because Peter had different ideas than Bob.", "fol": "", "prediction": ["all x y.((Bob(x) & Peter(y)) -> Fired(x,y))", "Bob firedPeter because he had DifferentIdeas(Peter,Bob))", "(Fires(Bob,Peter) & PeterDifferentIdeas(Peter,Bob))", "all x y z.((Bob(x) & Peter(y) & Bob(z)) -> Fired(x,y,z))", "all x y.((Bob(x) & Peter(y) & DifferentIdeas(y,x)) -> Fired(x,y))", "Bob firedPeter,becausePeter hadDifferentIdeas(Peter,Bob))", "(StokedByBob(Bob,Peter) & PeterDifferentIdeas(Bob,Peter))", "(FiredBob(Bob) & Peter(Bob) & DifferentIdeas(Bob))", "(FiresBob(Bob) -> DifferentIdeas(Bob))", "Bob firedPeter(b) -> (DifferentIdeas(p,b) & DifferentIdeas(p,b)))", "all x y z.((Bob(x) & Peter(y) & Bob(z) & DifferentIdeas(y,z)) -> Fired(x,y))", "all x.((Bob(x) & Peter(x)) -> Fired(x,y))", "Bob firedPeter,becausePeterDifferentIdeas(Peter,Bob))", "Bob firedPeter because he had different ideas than Bob.", "(FilledByBob(Bob,Peter) & DifferentIdeas(Peter,Bob))", "all x y.((Bob(x) & Peter(y)) -> Fired(x,y))"]}
{"id": "enwn_validation_312", "nl": "If two people have different ideas, they do not agree with each other.", "fol": "", "prediction": ["all x.((Person(x) & DifferentIdeas(x)) -> -Agree(x))", "all x y.((Person(x) & Person(y) & DifferentIdeas(x,y)) -> -Agree(x,y))", "all x.((Person(x) & HasDifferentIdeas(x)) -> -Agree(x))", "all x.(DifferentIdeas(x) -> -Agree(x))", "all x y.((Person(x) & Person(y) & HasDifferentIdeas(x,y)) -> -Agrees(x,y))", "(DifferentIdeas(Person,Person) & DifferentIdeas(Person,Person))", "all x y z.((Person(x) & Person(y) & Idea(z) & Different(z)) -> -Agree(x,y,z))", "exists x.(Person(x) & HasDifferentIdeas(x))", "all x y.((Person(x) & Person(y) & DifferentIdeas(x,y)) -> -Agrees(x,y))", "all x.((Person(x) & DifferentIdeas(x)) -> -Agree(x))", "all x y.((People(x) & Person(y) & DifferentIdeas(x,y)) -> -Agree(x,y))", "all x.(DifferentIdeas(x) -> -Agree(x))", "exists x.(Person(x) & DifferentIdeas(x) & -Agree(x))", "all x y.((Person(x) & Person(y) & HasDifferentIdeas(x,y)) -> -Agree(x,y))", "all x y.((Person(x) & Person(y) & DifferentIdeas(x,y)) -> -Agree(x,y))", "exists x.(Person(x) & HasDifferentIdeas(x))"]}
{"id": "enwn_validation_313", "nl": "Not agreeing with someone is not a good reason to fire them.", "fol": "", "prediction": ["all x.((Understanding(x) & -Fire(x)) -> -GoodRightToFire(x))", "all x.((AgreesWith(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "all x y.((AgreesWith(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "-GoodRightToFire(-AgreeWith(-AgreeWith(-AgreeWith(-AgreeWith(-AgreeWith(-AgreeWith(-AgreeWith(-AgreeWith(-AgreeWith(-AgreeWith(-AgreeWith(-AgreeWith(-AgreeWith(-AgreeWith(-AgreeWith(-AgreeWith(-AgreeWith(-Agree(-AgreeWith(-AgreeWith(-AgreeWith(-Agree(-Agree(-Agree(-Agree(-Agree(-Agree(-Agree(-Agree(-Agree(-Agree(-Agree(-Agree(-Agree(-Agree(-Agree(Agree(Agree(Agree(Agree(Agree(Agree(Agree(Agree(Agree(Agree(Agree(A)))))", "all x y.((Agrees(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "-(AgreesWith(x,y) & Person(y))", "all x.((Understanding(x) & Person(x)) -> -GoodRightToFire(x))", "all x y.(((AgreesWith(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "(all x.((AgreesWith(x) & Person(x)) -> -GoodRightToFire(x)))", "all x.((AgreesWith(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "all x.((NotAgreeingWith(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "-(AgreesWith(x,y) & Person(y))", "all x y.((AgreesWith(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "all x.((UnderstandingWith(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "all x y.((Person(x) & Fire(y)) -> -GoodRightToFire(x,y))", "(all x.((AgreesWith(x) & Person(x)) -> -GoodRightToFire(x)))"]}
{"id": "enwn_validation_314", "nl": "Bob fired Peter because they do not agree.", "fol": "", "prediction": ["all x y.((Bob(x) & Peter(y) & -Agree(y,x)) -> Fired(x,y))", "(-Agree(Bob) & Fired(Bob))", "Bob firedPeter because they do not agree.", "(-Agree(Bob,Peter) & Fired(Bob,Peter))", "all x y.((Bob(x) & Peter(y)) -> Fired(x,y))", "(FiresBob(Bob) & FiresPeter(Bob))", "-((BobFixedPeter(b) & PeterFixed(b)) -> -Agree(b))", "Bob fired Peter because they do not agree.", "(-acquiredBob(Bob) & FiredPeter(Bob))", "Bob firedPeter because they do not agree.", "all x.((Bob(x) & Peter(x)) -> Fired(x,y))", "all x y.((Bob(x) & Peter(y) & -Agree(y,x)) -> Fired(x,y))", "(-Agree(Bob) & Fired(Bob,Peter))", "Bob firedPeter,because they do not agree.", "Bob fired Peter because they do not agree.", "all x y.((Bob(x) & Peter(y)) -> Fired(x,y))"]}
{"id": "enwn_validation_315", "nl": "Bob fired Peter without a good reason.", "fol": "", "prediction": ["all x y.((Bob(x) & Peter(y)) -> FiredWithoutGoodRight(x,y))", "(Fires(Bob,Peter) & -GoodRight(Bob,Peter))", "all x.((Bob(x) & Peter(y)) -> FiredWithoutGoodRight(x,y))", "Bob fired Peter, -GoodRight(Bob,Peter))", "(Fire(Bob,Peter) & WithoutGoodRight(Bob,Peter))", "all x y.((Bob(x) & Peter(y)) -> FiredWithoutGoodRight(x,y))", "(FiredBy(Bob,Peter) & -GoodRight(Bob,Peter))", "(Fires(Bob,Peter) & -GoodRun(Bob,Peter))", "Bob fired Peter, & -GoodRight(Bob)", "(fired(Bob,Peter) & WithoutGoodRight(Bob,Peter))", "all x.((Bob(x) & Peter(y)) -> FiredWithoutGoodRight(x,y))", "Bob fired Peter without GoodRight(Bob)", "all x y.((Bob(x) & Peter(y) & -GoodRight(y)) -> Fired(x,y))", "all x y.((Bob(x) & Peter(y)) -> FiredWithoutGoodRun(x,y))", "Bob firedPeter withoutGoodRun(Bob,Peter))", "Bob fired Peter withoutGoodRight(Bob,Peter)"]}
{"id": "enwn_validation_316", "nl": "Bob should not have fired Peter.", "fol": "", "prediction": ["all x.((Bob(x) & Peter(y)) -> -Fired(x,y))", "-(FiredBob(Bob) & Peter(Peter))", "Bob should not have firedPeter.", "all x y.((Bob(x) & Peter(y)) -> -Fired(x,y))", "(Functioned(Bob,Peter) & -Functioned(Bob,Peter))", "all x.((Bob(x) & Peter(y)) -> -Shoulded(x,y))", "-ShouldFunned(Bob)", "(-FiredBob(Bob))", "(Fired(Bob) & -Fired(Bob))", "(-Fired(Bob) & Peter(Bob))", "-(FiredBob(Bob) | FiredPeter(Bob)))", "Bob should not have fired Peter.", "all x y.((Bob(x) & Peter(y)) -> -Shoulded(x,y))", "-Filled(Bob,Peter)", "Bob should not have firedPeter.", "all x.((Bob(x) & Peter(y)) -> -Fired(x,y))"]}
{"id": "enwn_validation_317", "nl": "Superiors give orders and expect you to follow them.", "fol": "", "prediction": ["all x.(Superior(x) -> (GivesOrders(x) & ExpectsFollowingOrders(x)))", "all x y.((Superior(x) & Order(y)) -> (Gives(x,y) & Expects(x,y)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsYouToFollowOrders(x)))", "(all x.(Superior(x) -> GiveOrders(x)))", "all x y.((Superior(x) & Order(y)) -> (Gives(x,y) & Expects(x,y)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsFollowingOrders(x)))", "all x.(Supreme(x) -> (GivesOrders(x) & ExpectsYouToFollowOrders(x)))", "all x y z.((Superior(x) & Order(y) & Order(z)) -> (Gives(x,y,z) & Expects(x,y)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsYouToFollowOrders(x)))", "all x y.((Superior(x) & Order(y)) -> (Gives(x,y) & Expects(x,y)))", "all x y.((Superior(x) & Order(y)) -> (Gives(x,y) & ExpectsToFollow(x,y)))", "(all x.(Superior(x) -> GivesOrder(x)))", "all x y.((Superior(x) & Order(y)) -> GivesAndEngages(x,y))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsFollowingOrders(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsToFollowOrders(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsYouToFollowOrders(x)))"]}
{"id": "enwn_validation_318", "nl": "If an order is unjust, you should disobey those orders.", "fol": "", "prediction": ["all x.((Order(x) & Unjust(x)) -> Disobey(x))", "all x.(UnjustOrder(x) -> DisobeyOrder(x))", "all x y.((Order(x) & Unjust(x)) -> Disobey(y,x))", "all x.((Order(x) & Unjust(x)) -> Disobey(x))", "(Unjust(Order) & Disobey(Order))", "(Unjust(or) -> Disobey(or)))", "all x.(UnjustOrder(x) -> DisobeyOrders(x))", "all x.(Unjust(x) -> DisobeyOrders(x))", "all x y.((Order(x) & Unjust(x)) -> Disobey(y,x))", "all x.((Order(x) & Unjust(x)) -> Disobey(x))", "all x.(UnjustOrder(x) -> Disobey(x))", "all x y.((Order(x) & Unjust(x)) -> Disobey(y,x))", "all x.((Order(x) & Unjust(x)) -> Disobey(x))", "all x.((Order(x) & Unjust(x)) -> ShouldDisobey(x))", "all x.(UnjustOrder(x) -> DisobeyOrder(x))", "all x.((Order(x) & Unjust(x)) -> Disobey(x))"]}
{"id": "enwn_validation_319", "nl": "If you follow an order to commit a crime, you followed an unjust order.", "fol": "", "prediction": ["all x y.((Order(x) & Follows(x,y) & CommitsCrime(y)) -> FollowedUnjustOrder(x))", "all x.((Order(x) & Follows(x,y) & CommitsCrime(y)) -> FollowedUnjustOrder(x))", "all x.((SuesOrder(x) & CommitsCrime(x)) -> FollowsUnjustOrder(x))", "all x y.((Order(x) & Follows(x,y)) -> CommitsCrime(x))", "(UnjustOrder(x) -> FollowsOrderToCommitCrime(x))", "all x y.((Order(x) & Follow(x,y) & CommitCrime(y)) -> UnjustOrder(x))", "all x y z.((Order(x) & Crime(y) & Follow(x,y) & Commit(x,y)) -> UnjustOrder(z))", "all x.((ChangesOrder(x) & CommitsCrime(x)) -> FollowsUnjustOrder(x))", "all x.((Order(x) & Follows(x,y) & CommitsCrime(x)) -> FollowedUnjustOrder(y))", "all x y.((Order(x) & Crime(y) & Follows(x,y)) -> UnjustOrder(x))", "all x.((FollowsOrder(x) & CommitsCrime(x)) -> FollowedUnjustOrder(x))", "all x.((SuesOrder(x) & CommitsCrime(x)) -> FollowsUnjustOrder(x))", "all x y z.((Order(x) & Crime(y) & Order(z) & Follows(x,z)) -> UnjustOrder(x))", "all x y.((Order(x) & Follows(x,y) & CommitsCrime(y)) -> FollowsUnjustOrder(x))", "all x.((Order(x) & Follows(x,y) & CommitsCrime(y)) -> UnjustOrder(x))", "all x y.((Order(x) & CommitCrime(y) & Follows(x,y)) -> UnjustOrder(x))"]}
{"id": "enwn_validation_320", "nl": "If you did the thing you are ordered to do from someone else, you followed the order given by that someone.", "fol": "", "prediction": ["all x y.((Does(x,y) & OrderedFrom(x,y)) -> FollowedOrder(x,y))", "all x y.((DoesOrder(x,y) & Person(y)) -> FollowedOrder(x,y))", "all x.((DoesOrder(x) & FromAnother(x)) -> FollowedOrder(x))", "all x y.((Does(x,y) & OrderedFrom(x,y)) -> FollowedOrder(x,y))", "all x y z.((DoesOrder(x,y) & Person(z) & OrderedFrom(x,z)) -> FollowedOrder(x,z))", "all x.((DoesThing(x) & OrderedFromAnother(x)) -> FollowedOrder(x))", "(DoingOrderFromAnother(x) -> FollowedOrder(x))", "all x y z.((DoesThing(x) & OrderedFrom(x,y) & Person(z)) -> FollowedOrder(x,z))", "all x y.((DoesThing(x) & OrderedFromAnother(x,y)) -> FollowedOrder(x,y))", "all x y z.((DoesTheThing(x) & OrderedFromAnother(y) & Person(z) & FollowedOrder(x,z)) -> OrderedFromAnother(x,y,z))", "(OrderedToDoFromAnother(x) -> FollowedOrder(x))", "all x y.((DoesThing(x) & OrderedFromAnother(x,y)) -> FollowedOrder(x,y))", "all x.((DoesTheThing(x) & OrdnanceDoing(x)) -> FollowedOrder(x))", "all x.((DoesOrder(x,y) & Person(y)) -> FollowedOrder(x,y))", "all x.((DoesThing(x) & OrderedFromAnother(x)) -> FollowedOrder(x))", "all x.((DoingTheThing(x) & OrdnanceDoing(x)) -> FollowedOrder(x))"]}
{"id": "enwn_validation_321", "nl": "If a superior tells you to do something, that thing is an order.", "fol": "", "prediction": ["all x.((Supervisor(x) & TellsYouToDo(x)) -> Order(x))", "all x y.((Supervisor(x) & TellsYouToDo(x,y)) -> Order(y))", "all x.((Superior(x) & TellsYouToDo(x)) -> Order(x))", "all x y.((Superior(x) & TellsYouToDo(x,y)) -> Order(x))", "all x y z.((Supervisor(x) & TellsYouToDo(x,y) & Thing(z) & TellsYouToDo(x,z)) -> Order(x))", "all x.((Supervisor(x) & TellsYouToDo(x)) -> Order(x))", "all x y.((Supervisor(x) & TellsYouToDo(x,y)) -> Order(x))", "all x.((Superior(x) & TellsYouToDo(x)) -> Order(x))", "all x y.((Superior(x) & TellsYouToDo(x,y)) -> Order(y))", "all x.(Supreme(x) -> Order(x))", "all x.((Supervisor(x) & TellsYouToDo(x)) -> Order(x))", "all x.(SupremeTellsToDo(x) -> Order(x))", "all x.((Superior(x) & TellsYouToDo(x,y)) -> Order(x))", "all x y.((Supervisor(x) & Tells(x,y)) -> Order(y))", "exists x.(Superior(x) & TellsToDo(x) & Order(x))", "all x y.((Superior(x) & TellsYouToDo(x,y)) -> Order(x))"]}
{"id": "enwn_validation_322", "nl": "Sara committed fraud because her boss told her to.", "fol": "", "prediction": ["all x.((Sara(x) & BossWrote(x,Sara)) -> CommittedFraud(x))", "all x y.((Boss(x) & Sara(y)) -> CommittedFraud(x,y))", "all x.((Sara(x) & Boss(x)) -> CommittedFraud(x))", "(CommittedFraud(Sara) & BossToldSaraTo(Sara))", "all x y.((Sara(x) & Boss(y)) -> CommittedFraud(x,y))", "Sara committed fraud because her boss told her to.", "(CommittedFraud(Sara,Boss) & BossToldSaraTo(Sara,Boss))", "(CommitsFraud(Sara,Boss) & BossToldSaraTo(Sara,Boss,Sara))", "all x.((Sara(x) & BossToldSara(x)) -> CommittedFraud(x))", "all x.((Boss(x) & Sara(x)) -> CommittedFraud(x))", "Sara committeds Fraud because her boss told her to.", "all x y.((Sara(x) & Boss(y) & Tells(x,y)) -> CommittedFraud(x))", "(CommittedFraud(Sara) & BossWrote(Sara,Sara,Sara))", "all x y.((Boss(x) & Sara(y)) -> CommittedFraud(y,x))", "(CommittedFraud(Sara,Boss) & BossWrote(Sara,Boss))", "all x.((Sara(x) & BossSatisfied(x)) -> CommittedFraud(x))"]}
{"id": "enwn_validation_323", "nl": "Fraud is a crime.", "fol": "", "prediction": ["all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x y.((Fraud(x) & Crime(y)) -> Fraud(x))", "(Crime(fraud) & Crime(fraud))", "all x.(Fraud(x) -> Crime(x))", "(all x.(Fraud(x) -> Crime(x)))", "all x y.((Fraud(x) & Crime(y)) -> Fraud(x))", "(Crime(fraud) & Crime(fraud))", "all x.(Fraud(x) -> Crime(x))", "all x y.((Fraud(x) & Crime(y)) -> Fraud(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Criminal(x))"]}
{"id": "enwn_validation_324", "nl": "If someone is your boss, then they are your superior.", "fol": "", "prediction": ["all x.(Boss(x) -> Superior(x))", "all x.((Boss(x) & Superior(x)) -> Boss(x))", "(Boss(x) -> Superior(x))", "all x y.((Boss(x) & Boss(y)) -> Superior(x,y))", "all x.(Boss(x) -> Superior(x))", "all x.((Boss(x) & Superior(x)) -> Boss(x))", "all x y.((Boss(x) & Boss(y)) -> Superior(x,y))", "all x.(Bust(x) -> Superior(x))", "all x.(Boss(x) -> Superior(x))", "all x.((Boss(x) & Superior(x)) -> Boss(x))", "all x.((Boss(x) & Sufficient(x)) -> Boss(x))", "exists x.(Bosse(x) & Superior(x))", "all x.(Boss(x) -> Superior(x))", "all x.((Boss(x) & Superior(x)) -> Boss(x))", "exists x.(Bust(x) & Superior(x))", "all x.(Boss(x) -> Superior(x))"]}
{"id": "enwn_validation_325", "nl": "You should disobey orders from superiors if they are unjust.", "fol": "", "prediction": ["all x y.((Supervisor(x) & Order(y) & Unjust(y)) -> Disobey(x,y))", "all x.((SuperiorOrder(x) & Unjust(x)) -> Disobey(x))", "all x y.((Superior(x) & Superior(y) & Unjust(y)) -> DisobeysOrders(x,y))", "all x.((SupervisorOrder(x) & Unjust(x)) -> Disobey(x))", "all x y.((Supervisor(x) & Order(y) & Unjust(y)) -> Disobey(x,y))", "(UnjustOrders(x) -> Disobey(x))", "all x y.((SuperiorOrder(x) & Unjust(x)) -> Disobey(x,y))", "all x y.((Supreme(x) & Superior(y) & Unjust(y)) -> DisobeysOrders(x,y))", "all x.((SuperiorOrder(x) & Unjust(x)) -> Disobey(x))", "all x.((Supervisor(x) & Unjust(x)) -> DisobeyOrders(x))", "all x y z.((Supervisor(x) & Order(y) & Unjust(z)) -> Disobey(x,y,z))", "all x y.((Supervisor(x) & Superior(y) & Unjust(y)) -> DisobeysOrders(x,y))", "(Unjust(superiors) -> DisobeyOrders(s))", "all x.((SupremeOrder(x) & Unjust(x)) -> Disobey(x))", "all x.((SuperiorOrder(x) & Unjust(x)) -> Disobeys(x,y))", "all x.((SupervisorOrders(x) & Unjust(x)) -> Disobey(x))"]}
{"id": "enwn_validation_326", "nl": "Sara committed a crime  because her boss told her to.", "fol": "", "prediction": ["all x y.((Boss(x) & Sara(y)) -> CommittedCrime(y,x))", "all x.((Sara(x) & Boss(x)) -> CommittedCrime(x))", "all x y.((Sara(x) & Boss(y)) -> CommittedCrime(x,y))", "all x.((Sara(x) & BossWrote(x,Sara)) -> CommittedCrime(x))", "(CommittedCrime(Sara,Boss) & BossTold(Sara,Boss))", "(CommittedCrime(Sara) & BossTold(Sara))", "all x y z.((Sara(x) & Boss(y) & Crime(z) & Tells(x,z)) -> Committed(x,z))", "all x y.((Sara(x) & Boss(y) & Tells(x,y)) -> CommittedCrime(x,y))", "(CommitsCrime(Sara,Boss) & BossTold(Sara,Boss))", "all x y.((Boss(x) & Sara(y)) -> CommittedCrime(y,x))", "all x.((Sara(x) & BossToldSaraTo(x)) -> CommittedCrime(x))", "(CommittedCrime(Sara,Boss,Sara) & BossTold(Sara,Sara))", "(CommittedCrime(Sara) -> BossInformedToCommit(Sara))", "all x.((Sara(x) & Boss(y)) -> CommittedCrime(x,y))", "all x.((Boss(x) & Sara(x)) -> CommittedCrime(x))", "all x y.((Boss(x) & Sara(y)) -> CommittedCrime(x,y))"]}
{"id": "enwn_validation_327", "nl": "Sara committed a crime  because her superior told her to.", "fol": "", "prediction": ["all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))", "all x.((Sara(x) & Superior(x)) -> CommittedCrime(x))", "all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))", "(CommittedCrime(Sara) & SuperiorSaidTo(Sara,Sara))", "all x y z.((Sara(x) & Superior(y) & Crime(z) & Tells(x,y,z)) -> Committed(x,z))", "all x.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))", "all x y.((Sara(x) & Superior(y) & Tells(x,y)) -> CommittedCrime(x,y))", "(CommittedCrime(Sara,Superior) & toldTo(Sara,Sara))", "all x.((Sara(x) & SuperiorSaidTo(x)) -> CommittedCrime(x))", "all x y.((Sara(x) & Superior(y) & Telled(x,y)) -> CommittedCrime(x,y))", "all x.((Sara(x) & SuperiorToldSaraTo(x)) -> CommittedCrime(x))", "(CommittedCrime(Sara) & SuperiorToldSaraTo(Sara))", "all x.((Sara(x) & SufficientTold(x,Sara)) -> CommittedCrime(x))", "(CommittedCrime(Sara,Sara) -> SuperiorToldSheTo(Sara,Sara))", "all x y.((Superior(x) & Sara(y)) -> CommittedCrime(y,x))", "all x.((Sara(x) & Superior(x)) -> CommittedCrime(x))"]}
{"id": "enwn_validation_328", "nl": "Sara committed a crime because her superior ordered her to.", "fol": "", "prediction": ["all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))", "all x.((Sara(x) & SuperiorOrdned(x,Sara)) -> CommittedCrime(x))", "all x y.((Sara(x) & Superior(y) & Ordered(x,y)) -> CommittedCrime(x,y))", "all x.((Sara(x) & SuperiorOrders(x,Sara)) -> CommittedCrime(x))", "(CommittedCrime(Sara) & SuperiorOrdnedTo(Sara,Sara))", "all x y z.((Sara(x) & Superior(y) & Ordered(z) & CommittedCrime(x,y)) -> SuperiorOrders(x,z))", "(CommittedCrime(Sara,Sara) -> SuperiorOrdersTo(Sara,Sara))", "all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))", "all x.((Sara(x) & SuperiorOrdned(x,Sara)) -> CommittedCrime(x))", "all x y.((Sara(x) & SuperiorOrders(y)) -> CommittedCrime(x,y))", "(CommitsCrime(Sara,Sara) & SuperiorOrdersTo(Sara,Sara))", "(CommittedCrime(Sara) -> SuperiorOrdinated(Sara,Sara))", "all x.((Sara(x) & SuperiorOrders(x,s)) -> CommittedCrime(x))", "all x y.((Sara(x) & Superior(y) & OrderedTo(x,y)) -> CommittedCrime(x,y))", "(CommittedCrime(Sara,SuperiorOrders))", "all x.((Sara(x) & SuperiorOrdnedTo(x)) -> CommittedCrime(x))"]}
{"id": "enwn_validation_329", "nl": "Sara followed her order to commit a crime given by her superior.", "fol": "", "prediction": ["all x y.((Sara(x) & Superior(y)) -> FollowedOrderToCommitCrime(x,y))", "all x y z.((Sara(x) & Superior(y) & Crime(z)) -> FollowedOrder(x,y,z))", "all x.((Sara(x) & Order(y)) -> CommitsCrime(x,y))", "(CommitCrime(Sara) & GivenBySuperior(Sara))", "all x y.((Sara(x) & Superior(y)) -> FollowedOrderToCommitCrime(x,y))", "all x.((Sara(x) & Superior(y)) -> FollowedOrderToCommitCrime(x,y))", "(Sara followedOrderToCommitCrime(Sara,Supreme))", "(CommitsCrime(Sara,Sara) & GivesCrime(Sara,Supervisor))", "all x.(Sara(x) -> FollowedOrderToCommitCrime(x))", "all x y z.((Sara(x) & Superior(y) & Crime(z)) -> FollowedOrderToCommit(x,z))", "Sara followedOrderToCommitCrime(Sara,Supreme)", "(CommitsCrime(Sara,Sara) & GivenBySuperior(Sara))", "all x y.((Sara(x) & Superior(y)) -> FollowedOrderToCommitCrime(x,y))", "all x.((Sara(x) & CommittedCrime(x,Senior)) -> FollowedOrder(x))", "(CommittedCrime(Sara,Superior))", "all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))"]}
{"id": "enwn_validation_330", "nl": "Sara followed an unjust order given by her superior.", "fol": "", "prediction": ["all x y.((Sara(x) & Superior(y)) -> FollowedUnjustOrder(x,y))", "all x.(Sara(x) -> FollowedUnjustOrder(x))", "all x y z.((Sara(x) & Superior(y) & UnjustOrder(z)) -> Followed(x,y,z))", "(UnjustOrder(Sara) & Sufficient(Sara))", "-(Sara FollowedUnjustOrder(Sara))", "all x y.((Sara(x) & Superior(y)) -> FollowedUnjustOrder(x,y))", "Sara followed an unjustOrderGivenBySuperior(Sara,Sara,Sara))", "Sara followed unjustOrder(Sara,Superior)", "(UnjustOrder(Sara) & Sufficient(Sara))", "all x.(Sara(x) -> FollowedUnjustOrder(x))", "(UnjustOrder(Sara,Sara) & Sufficient(Sara,Sara))", "all x y.((Sara(x) & Superior(y)) -> FollowedUnjustOrder(x,y))", "all x y.((Sara(x) & Supraman(y)) -> FollowedUnjustOrder(x,y))", "all x.(Sara(x) -> FollowsUnjustOrder(x))", "(UnjustOrder(Sara) & Sufficient(Sara))", "(UnjustOrder(Sara) -> FollowedBySuperior(Sara))"]}
{"id": "enwn_validation_331", "nl": "Sara should have disobeyed her superiors unjust orders.", "fol": "", "prediction": ["all x.((Sara(x) & SuperiorsUnjustOrders(x)) -> ShouldBeDisobed(x))", "all x y.((Sara(x) & Superior(y)) -> DisobeyedUnjustOrders(x,y))", "all x.(Sara(x) -> DisobeyedUnjustOrders(x))", "(DisobeyedUnjustOrders(Sara) -> ShouldBe(Sara,Sara))", "all x.((Sara(x) & SuperiorsUnjustOrders(x)) -> ShouldHaveDisobeyed(x,Sara))", "all x y.((Sara(x) & Superior(y)) -> DisobeyedUnjustOrders(x,y))", "all x y.((Sara(x) & Superior(y) & UnjustOrders(y)) -> ShouldDisobeyed(x,y))", "all x y z.((Sara(x) & Superior(y) & UnjustOrder(z)) -> ShouldDisobeyed(x,y,z))", "(UnjustOrders(Sara,Sara))", "all x.((Sara(x) & UnjustOrders(x)) -> ShouldBeDisobeyed(x))", "all x.(Sara(x) -> DisobeyedUnjustOrders(x))", "all x y.((Sara(x) & Superiors(y)) -> DisobeyedUnjustOrders(x,y))", "all x.(Sara(x) -> ShouldHaveDisobeyedUnjustOrders(x))", "all x y.((Sara(x) & Superior(y) & UnjustOrder(y)) -> ShouldDisobeyed(x,y))", "(UnjustOrders(Sara,Sara))", "All x.(Sara(x) -> DisobeyedUnjustOrders(x))"]}
{"id": "enwn_validation_332", "nl": "If you are cheating, you should tell your partner and stop cheating.", "fol": "", "prediction": ["all x.((Partner(x) & Cheating(x)) -> (Tell(x,x) & StopCheating(x)))", "all x.((Cheats(x) & Partner(x)) -> TellsAndStopsCheating(x))", "all x y.((Partner(x) & Partner(y)) -> (Cheating(x,y) & Tells(x,y) & StopsCheating(x)))", "all x.(Cheats(x) -> (TellsPartner(x) & StopsCheating(x)))", "all x.((Partner(x) & Cheating(x)) -> (StopCheating(x) & Tell(x,y)))", "-(Cheats(x) & TellsPartner(x) & StopsCheating(x))", "all x.((Cheater(x) & TellsPartner(x) & StopsCheatering(x)) -> Cheats(x))", "(Cheating(x) -> TellPartner(x))", "all x.(Cheating(x) -> (Tell(x,partner) & StopCheating(x)))", "all x y.((Partner(x) & Partner(y) & Cheating(x)) -> TellsAndStops(x,y))", "(Cheating(x) -> (Tell(x,partner) & StopCheating(x)))", "all x y.((Cheater(x) & Partner(y)) -> (Tell(y,x) & StopCheating(y,x)))", "all x y.((Partner(x) & Partner(y)) -> (Cheating(x) & Telling(y,x) & StopCheating(y)))", "all x.(Cheats(x) -> (StopCheating(x) & Tell(x,partner)))", "all x.(Cheating(x) -> (TellYourPartner(x) & StopCheating(x)))", "all x.((Partner(x) & Cheating(x)) -> (Tell(x,y) & StopChasing(x)))"]}
{"id": "enwn_validation_333", "nl": "Stan is seeing Olivia but is partnered with Ellie.", "fol": "", "prediction": ["all x y.((Stan(x) & Olivia(y)) -> (Sees(x,y) & PartnersWith(x,y)))", "(Stan(Stan) & Olivia(Stan) & Ellie(Ellie))", "(Sees(Stan,Olivia) & PartnersWith(Stan,Ellie))", "(Stan(Stan) & SeesOlivia(Stan) & PartnersWithEllie(Stan))", "(Sees(Stan,Oliver) & PartnersWith(Stan,Ellie))", "all x.((Stan(x) & Olivia(x)) -> PartnersWith(x,Ellie))", "-(Stan(Stan) & Olivia(Stan) & Ellie(Ellie))", "Stan (seesOlivia(Stan) & PartnersWithEllie(Stan))", "Stan is seeing Olivia, but partneredWithEllie.", "(SeesOlivia(Stan) & PartneredWithEllie(Stan))", "all x y.((Stan(x) & Olivia(y)) -> (Seen(x,y) & Partner(x,y)))", "(StanSeesOlivia(Stan) & PartnersWithEllie(Stan))", "exists x.(Stan(x) & SeesOliver(x) & PartnersWithEllie(x))", "Stan is seeing Olivia, & PartnersWithEllie.", "(Stan(Stan) & Olivia(Stan) & Ellie(Ellie))", "(Sees(Stan,Olympus) & Partner(Stan,Ellie))"]}
{"id": "enwn_validation_334", "nl": "If you are seeing someone other than your partner, then you are cheating on your partner.", "fol": "", "prediction": ["all x.((Seating(x) & OtherThanPartner(x)) -> CheatingOnPartner(x))", "all x.((SeesAnotherPartner(x) & Partner(x)) -> Cheating(x))", "all x y.((Partner(x) & Partner(y) & Sees(x,y)) -> Cheating(x,y))", "(Seeing(x,y) & OtherThanPartner(x)) -> CheatingOnPartner(y))", "all x y.((SeenAnotherThanPartner(x,y)) -> CheatingOnPartner(x,y))", "all x y.((Seating(x,y) & Partner(y)) -> Cheating(x,y))", "all x.((Seeing(x,otherThanPartner(x)) -> CheatingOnPartner(x))", "all x y.((Sees(x,y) & Partner(y) & OtherThan(x,y)) -> CheatingOn(x,y))", "all x.((Seating(x,y) & OtherThanPartner(x)) -> CheatingOnPartner(x))", "(SeeingAnotherPartnerThanPartner(x) -> CheatingOnPartner(x))", "all x.((Seating(x) & OtherThanPartner(x)) -> CheatingOnPartner(x))", "all x y.((Saying(x,y) & OtherThanPartner(x)) -> CheatingOnPartner(y))", "all x y.((Partner(x) & Sees(x,y) & OtherThanPartner(x,y)) -> CheatingOn(x,y))", "all x.(SeesAnotherPartner(x) -> CheatingOnPartner(x))", "all x.((SeesPerson(x) & OtherThanPartner(x)) -> CheatingOnPartner(x))", "exists x.(Seating(x,y) & OtherThanPartner(y))"]}
{"id": "enwn_validation_335", "nl": "Stan is cheating on his partner.", "fol": "", "prediction": ["all x y.((Stan(x) & Partner(y)) -> Cheating(x,y))", "all x.((Stan(x) & Partner(x)) -> Cheating(x))", "(CheatingOn(Stan) & Partner(Stan))", "(Cheating(Stan) & Partner(Stan))", "Stan CheatingOnPartner(Stan)", "all x y.((Stan(x) & Partner(y)) -> Cheating(x,y))", "Stan is cheating on his partner.", "all x.((Stan(x) & Partner(y)) -> Cheating(x,y))", "-(Stan(Stan) & Partner(Stan))", "exists x.(Stan(x) & CheatingOn(x,partner))", "(CheatsOnPartner(Stan) & Stan(Stan))", "(CheatingOnPartner(Stan) -> CheatingOnPartner(Stan))", "(CheatsOn(Stan,Partner) & Stan(Stan,Partner))", "all x y.((Stan(x) & Partner(y)) -> Cheating(x,y))", "all x.((Stan(x) & Partner(x)) -> Cheating(x))", "all x y.((Stand(x) & Partner(y)) -> CheatingOn(x,y))"]}
{"id": "enwn_validation_336", "nl": "Stan should stop cheating and tell his partner.", "fol": "", "prediction": ["all x.((Stan(x) & StopCheating(x)) -> TellPartner(x))", "all x y.((Stan(x) & Partner(y)) -> (StopCheating(x,y) & Tell(x,y)))", "(Stan shouldstopcheating(Stan) & tellsPartner(Stan))", "Stan should stop cheating and tell his partner.", "all x.((Stan(x) & StopChasing(x)) -> TellPartner(x))", "(Stan) & StopsChasing(Stan) & TellsPartner(Stan))", "-(Stan(Stan) & Partner(Stan))", "all x y.((Stan(x) & Partner(y)) -> (StopCheating(x,y) & Tell(x,y)))", "all x.(Stan(x) -> (StopCheating(x) & TellPartner(x)))", "Stan should stop cheating and tell his partner.", "(Stan shouldstopcheating(Stan) & Tell(Stan,Partner))", "all x.((Stan(x) & StopCheating(x)) -> Tell(x,partner))", "all x y.((Stan(x) & Partner(y)) -> (StopChasing(x,y) & Tell(x,y)))", "all x.((Stan(x) & Partner(y)) -> (StopCheating(x,y) & Tell(x,y)))", "Stan should stop cheating and tellspartner.", "all x y.((Stand(x) & Partner(y)) -> (ArriveCheating(x,y) & Tell(x,y)))"]}
{"id": "enwn_validation_337", "nl": "If you hurt someone over a rude remark then you lost your temper.", "fol": "", "prediction": ["all x.((HasTemper(x) & Hurts(x)) -> LostTemper(x))", "all x.((IrresponsibleRemark(x) & Hurts(x)) -> LostTemper(x))", "all x y.((HasTemper(x) & Person(y) & RustRemark(y)) -> LostTemper(x,y))", "all x y.((IrresponsibleRemark(x) & Person(y) & Hurts(x,y)) -> LostTemper(x))", "all x.((Hurts(x) & RustfulRemark(x)) -> LostTemper(x))", "all x y.((Hurt(x) & Person(y) & RustfulRemark(y)) -> LostTemper(x))", "all x y.((Person(x) & RustRemark(y) & Hurts(x,y)) -> LostTemper(x))", "all x.((IrresponsibleRemark(x) & Hurts(x,y)) -> LostTemper(x))", "all x y z.((Hurt(x) & Person(y) & RustfulRemark(z) & Hurts(x,y,z)) -> LostTemper(x))", "all x.((HasTemper(x) & HurtsOverRuleRemark(x)) -> LostTemper(x))", "all x y.((IrresponsibleRemark(x) & Person(y) & Hurts(x,y)) -> LostTemper(x))", "all x y.((HasTorture(x) & Person(y) & RustfulRemark(y)) -> LostTemper(x,y))", "all x.((Hurt(x) & RustfulRemark(x)) -> LostTemper(x))", "(all x.(RoleRemark(x) -> LostTemper(x)))", "all x.((IrresponsibleRemark(x) & HurtsPeople(x)) -> LostTemper(x))", "all x.((UseRemark(x) & RustfulRemark(x)) -> LostTemper(x))"]}
{"id": "enwn_validation_338", "nl": "Jake punched Jim when Jim said Jake's shirt was stupid.", "fol": "", "prediction": ["all x y.((Jake(x) & Jim(y) & JakeShirt(z) & Stubborn(z)) -> Punched(x,y,z))", "all x y z.((Jake(x) & Jim(y) & Shirt(z) & Jake(z) & Jim(y)) -> Punched(x,y,z))", "Jake punched Jim when Jim said JakesShirtStupid(Jim)", "all x y.((Jake(x) & Jim(y) & JakesShirt(z) & Stubborn(z)) -> Punched(x,y))", "(all x.((Jake(x) & Jim(x)) -> Punched(x,Jim)))", "-(JakePunchedJim(Jim) & JimSaid(Jim,StupidShirt)))", "all x.((Jake(x) & Jim(x) & JakeShirtStupid(x)) -> Punched(x,Jake))", "Jim said Jake's shirt was stupid, so Jake punched him.", "Jake punched Jim when Jim said Jake's shirt was stupid.", "(all x y.((Jake(x) & Jim(y)) -> Punched(x,y)))", "all x y z.((Jake(x) & Jim(y) & Shirt(z) & Jakes(y) & Jims(z)) -> Punched(x,y,z))", "(Jim said Jake's shirt was stupid) & punchedJim.", "Jim said Jake's shirt was stupid & punched him when he said he punched Jake.", "all x.((Jake(x) & Jim(y) & JakesShirt(z) & Stubborn(z)) -> Punched(x,y,z))", "all x y.((Jake(x) & Jim(y) & JakeShirt(y)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & Jim(z) & JakeShirt(z)) -> Punched(x,y,z))"]}
{"id": "enwn_validation_339", "nl": "Saying something is stupid is considered a rude remark.", "fol": "", "prediction": ["all x.((SaysStupid(x) & Remark(x)) -> Rust(x))", "all x.(SaysStupid(x) -> RustRemark(x))", "all x.((SaysStupid(x) & RustRemark(x)) -> Remark(x))", "all x.((Says(x) & Stuck(x)) -> RustRemark(x))", "all x.(SaysStupid(x) -> RustRemark(x))", "all x y.((Says(x,y) & Something(y)) -> RustRemark(x))", "all x.(Says(x,stupid) -> RustRemark(x))", "(RuleRemark(stupid(s) -> RustRemark(s))", "all x.((SaysStupid(x) & Remark(x)) -> Rust(x))", "all x y.((SaysStupid(x) & Remark(y)) -> Rust(y))", "all x y.((Says(x,y) & Something(y)) -> RustRemark(x))", "all x.((Says(x) & Stuck(x)) -> RustRemark(x))", "all x.(SaysStupid(x) -> RustRemark(x))", "all x.(SaysStupid(x) -> RustRemark(x))", "all x y.((Says(x,y) & Thing(y)) -> RustRemark(x,y))", "all x.((SaysStupid(x)) -> RustRemark(x))"]}
{"id": "enwn_validation_340", "nl": "You should control your emotions and not hurt someone because you lost your temper.", "fol": "", "prediction": ["all x.((Emotions(x) & -HasTemper(x)) -> Controls(x))", "all x y.((Emotion(x) & Person(y) & LostTemper(x)) -> Control(x,y))", "all x.((ControlsEmotions(x) & -HasTemper(x)) -> -HasTemper(x))", "(ControlEmotions(x) & -HasTemper(x))", "all x.((Emotions(x) & -HasTemper(x)) -> Control(x))", "all x y.((Emotion(x) & Person(y) & LostTemper(x,y)) -> Control(x,y))", "all x.((ControlEmotions(x) & -HasTemper(x)) -> (ControlEmotions(x) & -HasTemper(x)))", "(ControlsEmotions(x) & -HasTemper(x))", "all x y.(((Emotions(x) & Person(y) & LostTemper(x)) -> Control(x,y))", "all x y z.((Emotions(x) & Emotion(y) & Person(z) & LostTemper(x,z)) -> ControlsAndNotHas(x,y,z))", "all x y.((Emotions(x) & Person(y) & LostTemper(x,y)) -> Control(x,y))", "(ControlEmotions(x) & -HasLostTemperature(x))", "all x.((Emotions(x) & -Illegal(x)) -> Control(x,Emotions))", "all x.(ControlsEmotionsAndNotHasTemper(x) -> (LoseTemper(x) & -HasTemper(x)))", "all x.(ControlsEmotions(x) -> (-HasTemper(x) & -HasTemper(x)))", "all x y.(((Emotions(x) & Person(y) & LostTemper(x,y)) -> Control(x,y))"]}
{"id": "enwn_validation_341", "nl": "Jake punched Jim when Jim made a rude remark about Jake's shirt.", "fol": "", "prediction": ["all x y.((Jake(x) & Jim(y) & MadeRuleRemark(y,x)) -> Punched(x,y))", "all x y z.((Jake(x) & Jim(y) & RustRemark(z) & JakeShirt(z)) -> Punched(x,y,z))", "all x y.((Jake(x) & Jim(y) & MadeRuleRemarkAbout(y,x)) -> Punched(x,y))", "(RainRemark(Jim) & JakesShirt(Jim) & Punched(Jim,Jim))", "Jake punched Jim when Jim made ruderemarks about Jake's shirt.", "all x.((Jake(x) & Jim(y) & MadeRuleRemarkAboutShirt(y,x)) -> PunchedJim(x,y))", "all x y z.((Jake(x) & Jim(y) & Remark(z) & MadeAbout(y,z)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & RustRemark(y)) -> Punched(x,y))", "(RainRemark(Jim) & JakeShirt(Jim)) -> PunchedJim(Jim))", "all x.((Jake(x) & Jim(x) & RustRemark(x)) -> Punched(x))", "(all x.(PunchedJim(x) -> RustRemark(x)))", "(PunchedJim(Jake) & JimRemark(Jim,Jim))", "all x y z.((Jake(x) & Jim(y) & RustRemark(z) & JakesShirt(z)) -> Punched(x,y,z))", "all x y.((Jim(x) & Jim(y) & MadeRuleRemarkAboutShirt(y,x)) -> PunchedJim(x,y))", "all x y.((Jake(x) & Jim(y) & MadeRainRemark(y,x)) -> Punched(x,y))", "all x.((Jake(x) & Jim(y) & MadeRuleRemarkAboutShirt(y,x)) -> Punched(x,y))"]}
{"id": "enwn_validation_342", "nl": "Jake lost his temper and hurt Jim over a rude remark.", "fol": "", "prediction": ["all x y.((Jake(x) & Jim(y)) -> (LoseTemper(x,y) & Hurts(x,y)))", "all x.((Jake(x) & LostTemptation(x) & HurtsJim(x)) -> RustRemark(x))", "all x.((Jake(x) & LostTemper(x) & IrresponsibleRemark(x)) -> IrresponsibleRemark(x))", "(LostTemperature(Jake) & HurtsJim(Jake))", "all x y.((Jake(x) & Jim(y)) -> (LostTemperature(x,y) & Hurts(x,y)))", "all x y z.((Jake(x) & Jim(y) & RustRemark(z)) -> (LoseTemper(x,z) & Hurts(x,y)))", "(LoseTemper(Jake) & HurtsJim(Jake))", "(all x.((Jake(x) & RustRemark(x)) -> LostTemperature(x)) & hurtsJim(x))", "all x.((Jake(x) & LostTemperature(x) & HurtsJim(x)) -> RustRemark(x))", "(LostTemper(Jake) & HurtsJimOverRuleRemark(Jake))", "(all x.((Jake(x) & RustRemark(x)) -> LostTemper(x)) & hurts(x,Jim))", "all x y.((Jake(x) & Jim(y)) -> (LoseTemper(x,y) & Hurts(x,y)))", "(LoseTemper(Jake) & HurtsJim(Jake))", "all x.((Jake(x) & LostTemper(x) & HurtsJim(x)) -> RustfulRemark(x))", "all x y.((Jake(x) & Jim(y)) -> (LostTemperature(x,y) & HurtsOverRuleRemark(x,y)))", "all x.((Jake(x) & LostTemptation(x) & IrresponsibleRemark(x)) -> IrresponsibleRemark(x))"]}
{"id": "enwn_validation_343", "nl": "Jake should have controlled his emotions and not hurt Jim.", "fol": "", "prediction": ["all x.((Jake(x) & ControlledEmotions(x) & -HasIllness(x)) -> ShouldHave(x,Jim))", "(ControlledEmotions(Jake) & -HasIllness(Jim))", "-(ControlledEmotions(Jake) & -HasIllness(Jim))", "all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -HasIllness(x,y)))", "all x.((Jake(x) & ControlledEmotions(x) & -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHa", "(ControlledEmotions(Jake) & -HasHasHasHasHasHasHasHasEmotions(Jim))", "all x.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -HasIllness(x,y)))", "all x.((Jake(x) & -HasIron(x)) -> ControlledEmotions(x))", "((Jake(Jake) & ControlledEmotions(Jake)) -> -HasIrresponsible(Jake)))", "all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHa", "-(ControlledEmotions(Jake) & -HasHasHasJim(Jake))", "All x.(Jake(x) -> (ControlledEmotions(x) & -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas(HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasH", "(ControlledEmotions(Jake) & -HasIron(Jim))", "all x.((Jake(x) & ControlledEmotions(x) & -HurtsJim(x)) -> ShouldHaveHasEmotions(x))", "all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -Harmful(x,y)))", "(ControlledEmotions(Jake) & -HurtsJim(Jake))"]}
{"id": "enwn_validation_344", "nl": "Henry moved his golf ball out of the rough.", "fol": "", "prediction": ["all x y.((Henry(x) & GolfBall(y)) -> MovedOutOfRough(x,y))", "all x.((Henry(x) & GolfBall(x)) -> MovedOutOfRough(x))", "(MovedOutOfRough(Henry,GolfBall))", "-MovedGolfBallOutOfRough(Henry,GolfBall,Rough))", "Henry moved golfball out of rough.", "Henry moved golfball(Henry) outOfRough(Henry)", "(MovesGolfBallOutOfRough(Henry,GolfBall))", "all x y.((Henry(x) & GolfBall(y)) -> MovedOutOfRough(x,y))", "(MovedOutOfRough(Henry) & GolfBall(Henry))", "Henry moved golf ball out of rough.", "all x.((Henry(x) & GolfBall(y)) -> MovedOutOfRough(x,y))", "Henry moved his golf ball out of rough.", "Henry moved golfballoutOfRough(Henry,x)", "all x y.((Henry(x) & GolfBall(y)) -> MovedOutOfRough(x,y))", "Henry moved golf ball out of rough.", "Henry moved his golfball out ofRough."]}
{"id": "enwn_validation_345", "nl": "Henry didn't take a penalty stroke or tell anyone when he was moving his ball.", "fol": "", "prediction": ["all x.((Henry(x) & -PenaltyStoke(x) & -Says(x)) -> MovesBall(x))", "(-TakesPenaltyStoke(Henry) & -TellsAnyoneWhenMovingBall(Henry))", "(-(TakesPenaltyStoke(Henry) & -ShowsPerson(Henry)) -> MovingBall(Henry,Henry))", "Henry didn't take a penaltystroke or tell anyone when he was moving his ball.", "all x.((Henry(x) & -PenaltyStoke(x)) -> (-Takes(x,PenaltyStoke) & -Sells(x,PenaltyStoke)))", "all x.(Henry(x) -> (-TakesPenaltyStoke(x) & -SellsToAnyone(x)))", "all x y.((Henry(x) & Ball(y)) -> (-TakesPenaltyStoke(x,y) & -ShowsToOthers(x,y)))", "Henry didn't take a PenaltyStoke(Henry) & -TellAnyoneWhenMovingBall(Henry))", "((Henry(Henry) & -PenaltyStoke(Henry)) | (-PenaltyStoke(Henry) & TellsNoone(Henry))))", "-(Henry(Henry) & MovesBall(Henry))", "all x.((Henry(x) & -PenaltyShot(x) & -SaysWhenMovingBall(x)) -> -TakesPenaltyShot(x))", "(-(TakesPenaltyStoke(Henry) | TellsNoone(Henry)))", "(-TakesPenaltyStoke(Henry) & -TellsNoOne(Henry))", "all x.(Henry(x) -> (-TakesPenaltyStoke(x) & -TellsAnyone(x)))", "all x.(Henry(x) -> (-PenaltyStoke(x) & -ShowsPersonWhenMovingBall(x)))", "Henry didn't take a penaltystroke or tell anyone when he was moving his ball."]}
{"id": "enwn_validation_346", "nl": "In golf, if you move your ball without telling anyone or taking a penalty stroke, you cheat.", "fol": "", "prediction": ["all x.((Golf(x) & MovesBallWithoutSigningOrPenaltyStroke(x)) -> Cheats(x))", "all x.((Golf(x) & MoveBallWithoutSigning(x) & WithoutPenaltySstroke(x)) -> Cheats(x))", "all x y.((Golf(x) & Ball(y) & MovesWithoutSigning(x,y) & WithoutPenaltyStattle(x)) -> Cheats(x))", "all x.((Golf(x) & MovesBall(x) & -(TellsAnyone(x) | TakesPenaltyStroke(x)))) -> Cheats(x))", "all x y.((Golf(x) & Ball(y) & MovesWithoutSigningOrPenaltyStroke(x,y)) -> Cheats(x))", "all x.((Golfer(x) & MovesBallWithoutSigningOrPenaltyStroke(x)) -> Cheats(x))", "all x y z.((Golf(x) & Ball(y) & Ball(z) & MovesWithoutSigning(x,z) & -StandingPenaltyStroke(x)) -> Cheats(x))", "all x.((Golf(x) & MoveBallWithoutTellAnyone(x) & TakePenaltySstroke(x)) -> Cheats(x))", "all x y.((Golf(x) & Ball(y) & MovesWithoutTelling(x,y) & -TakesPenaltyStroke(x,y)) -> Cheats(x))", "all x.((Golfer(x) & MovesBall(x) & -(TellsAnyone(x) | TakesPenaltyStroke(x)))) -> Cheats(x))", "all x.((Golf(x) & MovesBallWithoutTellingAnyone(x) & TakesPenaltySstroke(x)) -> Cheats(x))", "(all x.((Golfer(x) & MovesBall(x)) -> Cheats(x)))", "exists x.(Golf(x) & MovesBallWithoutSigningOrPenaltyStroke(x))", "all x y.((Golf(x) & Ball(y) & MovesWithoutSigningOrPenaltyStagger(x,y)) -> Cheats(x))", "all x.((Golfer(x) & MovesBallWithoutTelling(x) & TakesPenaltySstroke(x)) -> Cheats(x))", "all x y.((Golf(x) & Ball(y) & MovesWithoutWorry(x,y) & -SignsToAnyone(x) & TakesPenaltyStroke(x)) -> Cheats(x))"]}
{"id": "enwn_validation_347", "nl": "Cheating in a game is disrespectful to the other players.", "fol": "", "prediction": ["all x y.((Game(x) & Player(y)) -> DisrespectfulTo(x,y))", "all x.((Game(x) & CheatingIn(x,y)) -> DisrespectfulToOtherPlayers(y))", "all x y.((Game(x) & Player(y)) -> Disrespectful(x,y))", "all x y.((Game(x) & Player(y) & CheatingIn(x,y)) -> DisrespectfulTo(x,y))", "all x y z.((Game(x) & Player(y) & Player(z)) -> DisrespectfulTo(x,y,z))", "(DisrespectfulToOthers(cheating))", "(DisrespectfulToOtherPlayers(cheating) -> DisrespectfulToOthers(cheating))", "all x.((Game(x) & CheatingIn(x,y)) -> DisrespectfulToOthers(y))", "all x.((Game(x) & Cheating(x)) -> DisrespectfulToOtherPlayers(x))", "all x.((CheatingInGame(x) & DisrespectfulToOtherPlayers(x)) -> DisrespectfulToOthers(x))", "all x y z.((Game(x) & Player(y) & Player(z)) -> (CheatingIn(x,y) & DisrespectfulTo(x,z)))", "all x y.((Game(x) & Cheating(x,y)) -> DisrespectfulToOtherPlayers(y))", "all x y.((Game(x) & Player(y)) -> DisrespectfulTo(x,y))", "all x.((Game(x) & CheatingIn(x,y)) -> DisrespectfulToOtherPlayers(x))", "all x.((Game(x) & Cheating(x)) -> DisrespectfulToOthers(x))", "all x y.((Game(x) & Player(y)) -> Disrespectful(x,y))"]}
{"id": "enwn_validation_348", "nl": "Henry moved his golf ball out of the rough without telling anyone or taking a penalty stroke.", "fol": "", "prediction": ["all x y.((Henry(x) & GolfBall(y)) -> MovedOutOfRough(x,y))", "all x.((Henry(x) & GolfBall(x)) -> MovedOutOfRough(x))", "Henry moved golf ball out of rough without telling anyone or taking penalty stroke.", "(MovedOutRough(Henry) & -(ToldAnyone(Henry) | TakenPenaltySstroke(Henry)))", "all x.(Henry(x) -> (MovedGolfBallOutOfRough(x) & -SaidToOther(x) & -TakedPenaltySstroke(x)))", "all x y z.((Henry(x) & GolfBall(y) & Rough(z)) -> (MovedOut(x,y,z) & -Signs(x,y) & -TakesPenaltySstroke(x)))", "(MovesGolfBallOutOfRough(Henry,Rough) & -(TellsNoone(Henry) | TakesPenaltySstroke(Henry)))", "all x.((Henry(x) & GolfBallOutOfRough(x)) -> (MovedOutOfRough(x) & -SaidToOther(x) & -PenaltySstroke(x)))", "(MovesGolfBallOutRough(Henry) & -(TellsNoone(Henry) | TakesPenaltySstroke(Henry))))", "(MovedOutOfRough(Henry) & -(ToldAnyone(Henry) | TakenPenaltySstroke(Henry)))", "all x y.((Henry(x) & GolfBall(y)) -> (MovedOutOfRough(x,y) & -SaidToOther(x) & -TakedPenaltySstroke(x)))", "all x y.((Henry(x) & GolfBall(y)) -> MovedOutOfRough(x,y))", "all x.((Henry(x) & GolfBall(x)) -> MovedOutOfRough(x))", "Henry moved golfballoutofRough(Henry) & -(TellsNoOne(Henry) | TakesPenaltySstroke(Henry)))", "Henry moved golfball out of rough without telling anyone or taking penaltystroke.", "Henry moved golf ball out of rough without telling anyone or taking penalty stroke."]}
{"id": "enwn_validation_349", "nl": "Henry cheated at golf.", "fol": "", "prediction": ["Henry CheatedAtGolf(Henry)", "all x.(Henry(x) -> CheatedAtGolf(x))", "all x.((Henry(x) & Golf(y)) -> CheatedAt(x,y))", "(CheatedAtGolf(Henry)", "-(Henry(Henry) & Golf(Henry))", "(cheated(Henry) & Golf(Henry))", "Henry CheatedAtGolf(Henry)", "all x.(Henry(x) -> CheatedAtGolf(x))", "(CheatedAtGolf(Henry)", "all x.((Henry(x) & Golf(x)) -> Cheated(x))", "Henry CheatedAtGolf(Henry,Golf)", "(CheatsAtGolf(Henry,Golf))", "(cheated(Henry) & Golf(Henry))", "Henry CheatedAtGolf(Henry)", "Henry CheatedAtGolf(Henry,Golf)", "Henry CheatedAtGolf(Henry)"]}
{"id": "enwn_validation_350", "nl": "Henry disrespected the other golf players.", "fol": "", "prediction": ["all x.((Henry(x) & GolfPlayer(y)) -> Disrespects(x,y))", "all x y.((Henry(x) & GolfPlayer(y)) -> Disrespects(x,y))", "Henry disrespected golfers.", "(DisrespectfulToOtherGolfPlayers(Henry,GolfPlayer))", "-DisrespectfulToOtherGolfPlayers(Henry,GolfPlayer)", "(Disrespects(Henry,GolfPlayer))", "(DisrespectfulToGolfPlayers(Henry,GolfPlayer))", "all x.((Henry(x) & GolfPlayer(y)) -> Disrespects(x,y))", "-(Henry(Henry) & GolfPlayer(Henry))", "all x y.((Henry(x) & GolfPlayer(y)) -> Disrespects(x,y))", "Henry disrespected the other golf players.", "Henry disrespected golfers.", "(DisrespectsOtherGolfPlayers(Henry))", "Henry disrespectedtheothersgolfPlayers.", "Henry disrespected golf players.", "Henry disrespected the other golf players."]}
{"id": "enwn_validation_351", "nl": "Oswald realized his stocks would soon be worthless, putting him in debt.", "fol": "", "prediction": ["all x.((Oswald(x) & StocksWorthless(x)) -> InDebt(x))", "Oswald realized his stocks would soon be worthless, putting him in debt.", "all x y.((Oswald(x) & Stocks(y)) -> (RealizedWorthless(x,y) & InDebt(x,y)))", "(RealizedStocksWorthless(Oswald) & InDebt(Oswald))", "all x.((Oswald(x) & Stocks(y)) -> (Worthless(y) & InDebt(x)))", "Oswald realized that his stocks would soon be worthless, putting him in debt.", "all x y.((Oswald(x) & Stocks(y)) -> (Realized(x,y) & Worthless(y) & InDebt(x)))", "Oswald realized his stocks would soon be worthless, putting him in debt.", "all x.((Stocks(x) & Worthless(x)) -> InDebt(x))", "Oswald realized his stocks would soon beWorthless, putting him in debt.", "all x.((Oswald(x) & StocksWorthless(x)) -> InDebt(x))", "Oswald realized that his stocks would soon be worthless, putting him in debt.", "All x y.((Oswald(x) & Stocks(y)) -> (RealizedWaitless(x,y) & InDebt(x)))", "Oswald realized his stocks would soonBeWorthless, putting him in debt.", "Oswald realized that his stocks would soon be worthless, putting him in debt.", "Oswald realized he was in debt."]}
{"id": "enwn_validation_352", "nl": "To avoid debt, Oswald sold his stocks to other people.", "fol": "", "prediction": ["all x y.((Oswald(x) & Person(y)) -> SoldTo(x,y))", "all x y z.((Oswald(x) & Stock(y) & Person(z)) -> SoldTo(x,y,z))", "all x.((Oswald(x) & SellsStocks(x)) -> AvoidsDebt(x))", "Oswald sold stocks to avoid debt.", "(AvoidsDebt(Oswald) -> SellsStocksToOthers(Oswald))", "all x y.((Oswald(x) & Stock(y)) -> SoldTo(x,y))", "(AvoidsDebt(Oswald,Stocks) & SellsToOthers(Oswald,Stocks))", "all x.((Oswald(x) & OtherPeople(y)) -> SoldStocks(x,y))", "Oswald sold stocks to avoid debt.", "All x y z.((Oswald(x) & Stock(y) & Person(z)) -> SoldTo(x,y,z))", "Oswald sold his stocks to avoid debt.", "all x y.((Oswald(x) & Person(y)) -> SoldStocksTo(x,y))", "(AvoidsDebt(Oswald,Stocks) -> SellsToOthers(Oswald,Stocks))", "Oswald sold stocks to avoid debt.", "all x.((Oswald(x) & SellsStocks(x)) -> AvoidsDebt(x))", "Oswald sold stocks to avoid debts."]}
{"id": "enwn_validation_353", "nl": "It is deceitful to sell something when it has no value.", "fol": "", "prediction": ["all x y.((Sells(x,y) & -Value(y)) -> Deceitful(x))", "all x.((Sells(x) & -Value(x)) -> Deceitful(x))", "all x y.((Sell(x) & -Value(y)) -> Deceitful(x))", "all x.((Sells(x) & NoValue(x)) -> Deceitful(x))", "all x y.((Sells(x) & -Value(y)) -> Deceitful(x))", "all x y z.((Sell(x) & Value(y) & Product(z) & -Value(z)) -> Deceitful(x,y,z))", "exists x.(DeceitfulToSell(x) & -Value(x))", "(DeceitfulToSell(x) -> NoValue(x))", "all x y z.((Sells(x,y) & Value(z) & -Value(y,z)) -> Deceitful(x))", "(all x.(DeceitfulToSell(x) -> NoValue(x)))", "all x y.((Sell(x) & NoValue(y)) -> Deceitful(x))", "exists x.(DeceitfulSell(x) & Sells(x) & -Value(x))", "exists x.(DeceitfulToSell(x) & NoValue(x))", "all x y.((Sells(x,y) & -Value(y)) -> Deceitful(x))", "all x y.((Sell(x,y) & -Value(y)) -> Deceitful(x))", "exists x.(Sells(x) & -Value(x))"]}
{"id": "enwn_validation_354", "nl": "You should not do deceitful things.", "fol": "", "prediction": ["all x.((DoDeceitfulThings(x)) -> -Do(x))", "all x.(DeceitfulThings(x) -> -Do(x))", "-DeceitfulThings(x)", "-(DoDeceitfulThings(x) & DoDeceitfulThings(x)))", "all x.((DoDeceitfulThings(x)) -> -DoDeceitfulThings(x))", "all x.(DeceitfulThing(x) -> -Do(x))", "(DoesDeceitfulThings(x) | DoseDeceitfulThings(x)))", "-DoDeceitfulThings(x)", "all x.((DoesDeceitfulThings(x)) -> -DoesDeceitfulThings(x))", "all x.(DoesDeceitfulThings(x) -> -DoesDeceitfulThings(x))", "-DeceitfulThings(x)", "all x y.((DoDeceitfulThings(x) & Do(y)) -> -Do(x,y))", "all x.(DeceitfulThings(x) -> -Do(x,y))", "all x.((DoDeceitfulThings(x)) -> -Do(x,y))", "-DeceitfulThings(x)", "all x.(DeceitfulThings(x) -> -Do(x,y))"]}
{"id": "enwn_validation_355", "nl": "Oswald sold stocks that he knew had no value to other people.", "fol": "", "prediction": ["all x y.((Oswald(x) & Stock(y)) -> SoldTo(x,y))", "Oswald sold stocks he knew had no value to other people.", "all x.((Stock(x) & NoValueToOthers(x)) -> Sold(x,y))", "all x y.((Stock(x) & Person(y) & -Value(x,y)) -> Sold(x,y))", "all x.((Stock(x) & KnowsNoValue(x)) -> SoldToOthers(x))", "all x y.((Oswald(x) & Stock(y)) -> (Sold(x,y) & -ValueToOthers(y)))", "Oswald sold stocks he knew had no value to other people.", "Oswald sold stocks that he knew had no value to other people.", "(all x.(Oswald(x) -> SellsStocks(x)))", "All x.((Stock(x) & OswaldKnowsNoValue(x)) -> SoldToOthers(x))", "all x y.((Stock(x) & Person(y) & KnownToOthers(x,y)) -> Sold(x,y))", "Oswald sold stocks he knew had no value to other people.", "Oswald sold stocks that he knew had no value to other people.", "Oswald sold stocks he knew he had no value to other people.", "all x y.((Oswald(x) & Stock(y)) -> SoldTo(x,y))", "Oswald sold stocks he knew had no value to other people."]}
{"id": "enwn_validation_356", "nl": "If you know something has no value, you should not sell that thing.", "fol": "", "prediction": ["all x.((KnowsNoValue(x) & -Sells(x)) -> -Sells(x))", "all x.((Knows(x) & NoValue(x)) -> -Sell(x))", "all x.((Knows(x,y) & NoValue(y)) -> -Sell(x,y))", "all x y.((Knows(x,y) & Thing(y) & NoValue(y)) -> -Sell(x,y))", "(all x.((KnowsNoValue(x) & -Sells(x)) -> -Sells(x)))", "all x.((KnowsNoValue(x) & -Sells(x)) -> -Sells(x))", "-(KnowsNoValue(x) -> -SellsThing(x))", "all x.((Teacher(x) & KnowsNoValue(x)) -> -Sell(x))", "all x.((Knows(x) & HasNoValue(x)) -> -Sell(x))", "all x y.(((Knows(x,y) & Thing(y)) -> -Sells(x,y))", "all x y.((Knows(x,y) & Thing(y) & NoValue(y)) -> -Sell(x,y))", "all x.(NoValue(x) -> -Sell(x))", "all x.((KnowsNoValue(x) & -Sells(x)) -> -Sells(x))", "exists x.(Knows(x,y) & -Value(y) & Sells(x,y))", "all x y.((Knows(x,y) & Thing(x,y)) -> -Sell(x,y))", "all x.(NoValue(x) -> -Sell(x))"]}
{"id": "enwn_validation_357", "nl": "Oswald should not have sold those stocks.", "fol": "", "prediction": ["Oswald should not have sold those stocks.", "all x.((Oswald(x) & Stock(y)) -> -Sold(x,y))", "all x.(Oswald(x) -> -SoldStocks(x))", "Oswald should not have sold those stocks.", "all x.((Oswald(x) & -SoldStocks(x)) -> -SoldStocks(x))", "all x.((Oswald(x) & Stock(y)) -> -Sold(x,y))", "Oswald -shouldn'tHaveSoldStocks(Oswald)", "Oswald should not have sold these stocks.", "All x.(Oswald(x) -> -SoldStocks(x))", "Oswald ne should have sold those stocks.", "Oswald - ShouldNotSoldStocks(Oswald,Stocks)", "Oswald should not have sold those stocks.", "Oswald shouldn't have sold those stocks.", "Oswald should not have sold these stocks.", "Oswald should have sold those stocks.", "Oswald should not have sold those stocks."]}
{"id": "enwn_validation_358", "nl": "Jeff took candy from a child in the park.", "fol": "", "prediction": ["all x y.((Jeff(x) & Child(y)) -> TakesCandy(x,y))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesCandyFrom(x,y,z))", "(TakesCandyFromChild(Jeff) & InPark(Jeff))", "all x.((Jeff(x) & Child(y)) -> TakesCandyFrom(x,y))", "all x y.((Jeff(x) & Child(y)) -> TakesCandyFrom(x,y))", "(PicksCandyFromChild(Jeff) | TakesCandyFromChild(Jeff))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesCandy(x,y,z))", "Jeff took candy from a child in the park.", "((Jeff) & Child(Jeff)) -> TakenFrom(Jeff,Child,Park))", "Jeff took candy from child in park.", "all x.(Jeff(x) -> TakesCandyFromChild(x))", "all x y.((Jeff(x) & Child(y)) -> TakenFrom(x,y))", "(TakesCandyFromChild(Jeff) & InPark(Jeff))", "all x y.((Jeff(x) & Child(y) & Park(z)) -> TakesCandyFrom(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesCandyFrom(x,y,z))", "(PicksCandyFromChild(Jeff) | InPark(Jeff))"]}
{"id": "enwn_validation_359", "nl": "Children are often considered helpless due to their age.", "fol": "", "prediction": ["all x.((Child(x) & Age(x)) -> Helpless(x))", "all x y.((Child(x) & Age(y)) -> Helpless(x,y))", "all x.((Child(x) & Age(x)) -> Helpless(x))", "(Age(Child) & Helpless(Child(Child))", "all x.(Child(x) & Age(x) -> Helpless(x))", "all x y.((Child(x) & Age(y)) -> Helpless(x,y))", "all x.((Child(x) & Age(x)) -> Helpless(x))", "all x.(Child(x) -> HelplessDueToAge(x))", "all x y.((Child(x) & Age(y)) -> Helpless(x,y))", "all x.((Child(x) & Age(x)) -> Helpless(x))", "all x.(Child(x) & Age(x) -> Helpless(x))", "all x.((Child(x) & Age(x)) -> Helpless(x))", "all x y.((Child(x) & Age(y)) -> Helpless(x,y))", "all x y.((Child(x) & Age(y)) -> Helpless(x,y))", "all x.((Child(x) & Age(x)) -> Helpless(x))", "all x.((Child(x) & Age(x)) -> Helpless(x))"]}
{"id": "enwn_validation_360", "nl": "Stealing from the helpless is taking advantage of them.", "fol": "", "prediction": ["all x.(StealFromHelpless(x) -> TakesAvormentOfHelpless(x))", "all x y.((StealFromHelpless(x) & Helpless(y)) -> TakesAdvantageOf(x,y))", "all x.(StealingFromHelpless(x) -> TakesAvormentOfHelpless(x))", "all x y.((StealFromHelpless(x) & Helpless(y)) -> TakesAdequacyOf(x,y))", "all x y.((StealingFromHelpless(x) & Helpless(y)) -> TakesAdvantageOf(x,y))", "all x y.((Helpless(x) & Helpless(y)) -> TakesAdvantageOf(x,y))", "all x y.((SlealingFromHelpless(x) & Helpless(y)) -> TakesAdvantageOf(x,y))", "all x.(StealFromHelpless(x) -> TakesAdvantageOfHelpless(x))", "all x y z.((Stealth(x) & Helpless(y) & Helpless(z)) -> TakesAdequacyOf(x,y,z))", "all x.(StealingFromHelpless(x) -> TakesAdvantageOfHelpless(x))", "all x.(StolenFromHelpless(x) -> TakesAvormentOfHelpless(x))", "all x.(StealingFromHelpless(x) -> TakesAdequacyOfHelpless(x))", "All x.(StalingFromHelpless(x) -> TakesAdequacyOfHelpless(x))", "all x.(StealFromHelpless(x) -> TakesAdequacyOfHelpless(x))", "all x y.((StealFromHelpless(x) & Helpless(y)) -> TakesAvormentOf(x,y))", "All x.(StealFromHelpless(x) -> TakesAvormentOfHelpless(x))"]}
{"id": "enwn_validation_361", "nl": "Taking advantage of someone is considered being cruel.", "fol": "", "prediction": ["all x.(TakesAdvantageOf(x,y) -> Cruel(x))", "all x.((TakesAdvantageOf(x,y) & Person(y)) -> Cruel(x))", "all x y.((TakesAdvantageOf(x,y) & Person(y)) -> Cruel(x))", "all x.(TakesAdvantageOf(x,y) -> Cruel(x))", "all x y.((Person(x) & TakesAdvantageOf(x,y)) -> Cruel(x))", "all x.((TakesAdvantageOf(x,y) & Person(y)) -> Cruel(x))", "all x.(TakingAdvantageOf(x,y) -> Cruel(x))", "all x.(TakesAdvantageOf(x,y) -> Cruel(x))", "all x y.((TakesAdvantageOf(x,y) & Person(y)) -> Cruel(x))", "all x y.((Person(x) & TakesAdvantageOf(x,y)) -> Cruel(x))", "all x.(TakesAdvantageOfPerson(x) -> Cruel(x))", "all x.((TakesAdvantageOf(x,y) & Person(y)) -> Cruel(x))", "All x.(TakingAdvantageOf(x,y) -> Cruel(x))", "all x y.((TakesAdvantageOf(x,y) & Person(y)) -> Cruel(x))", "all x.(TakesAdvantageOf(x,y) -> Cruel(y))", "All x.(TakesAdvantageOfPerson(x) -> Cruel(x))"]}
{"id": "enwn_validation_362", "nl": "Jeff took candy from a helpless child in the park.", "fol": "", "prediction": ["all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesCandyFrom(x,y,z))", "all x y.((Jeff(x) & Child(y)) -> TakesCandy(x,y))", "(TakesCandyFromHelplessChild(Jeff) & InPark(Jeff))", "all x y.((Jeff(x) & Child(y) & Helpless(y)) -> TakesCandy(x,y))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesCandy(x,y,z))", "(HelplessChild(Jeff) & TakesCandy(Jeff))", "all x.((Jeff(x) & HelplessChild(x)) -> TakesCandy(x,y))", "Jeff took candy from helplesschild in park.", "(TakesCandyFromHelplessChild(Jeff) & Park(Jeff))", "all x y.((Jeff(x) & HelplessChild(y)) -> TakesCandy(x,y))", "all x.((Jeff) & HelplessChild(x)) -> TakesCandy(x))", "Jeff took candy from helpless child in park.", "(TakesCandyFromHelplessChild(Jeff) -> JeffInPark(Jeff,Candy))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesCandyFrom(x,y,z))", "all x y.((Jeff(x) & Child(y) & Helpless(y)) -> TakesCandy(x,y))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesFrom(x,y,z))"]}
{"id": "enwn_validation_363", "nl": "Stealing from the helpless is considered being cruel.", "fol": "", "prediction": ["all x.(StealingFromHelpless(x) -> Cruel(x))", "all x y.((StealingFromHelpless(x) & Helpless(y)) -> Cruel(x))", "all x.(StealingFromHelpless(x) -> Cruel(x))", "all x.(StealFromHelpless(x) -> Cruel(x))", "all x.(StolenFromHelpless(x) -> Cruel(x))", "all x y.((StealFromHelpless(x) & Helpless(y)) -> Cruel(x))", "all x.(StealingFromHelpless(x) -> Cruel(x))", "all x.((StealingFromHelpless(x)) -> Cruel(x))", "all x y.((StolenFromHelpless(x) & Helpless(y)) -> Cruel(x))", "all x y.((StealingFromHelpless(x) & Helpless(y)) -> Cruel(x))", "all x.(StealFromHelpless(x) -> Cruel(x))", "all x y.((StealFromHelpless(x) & Helpless(y)) -> Cruel(x))", "all x.(StealingFromHelpless(x) -> Cruel(x))", "all x.(StalingFromHelpless(x) -> Cruel(x))", "All x.((StealFromHelpless(x) & Cultural(x)) -> Cruel(x))", "All x.(StealFromHelpless(x) -> Cruel(x))"]}
{"id": "enwn_validation_364", "nl": "It was cruel of Jeff to steal candy from the child.", "fol": "", "prediction": ["all x y.((Child(x) & Jeff(y)) -> StealCandy(y,x))", "(CruelTask(Jeff) & Child(Jeff))", "-CriminalOfJeffreyToStealCandyFromChild(Jeff)", "all x y z.((Child(x) & Jeff(y) & Child(z)) -> StealCandy(y,z))", "-CruelTaskFromChild(Jeff)", "(CriminalOfJeffreyToStealCandyFromChild(Jeff))", "it was cruelofJeff to stealCandyFromChild(Jeff,x))", "all x y.((Child(x) & Jeff(y)) -> StealCandy(y,x))", "-CruelToStoleCandy(Jeff)", "all x.((Jeff(x) & Child(y)) -> CruelToStealCandy(x,y))", "all x y.((Child(x) & Jeff(y)) -> CruelToStole(y,x))", "(CruelOfJeff toStealCandyFromChild(Jeff))", "all x.((Jeffrey(x) & Child(x)) -> CruelToStealCandy(x))", "the child was so cruel to Jeff to steal candy from.", "-CriminalOfJeffreyToStealCandyFromChild(Jeff)", "all x y.((Child(x) & Jeff(y)) -> CultuousToStealFrom(y,x))"]}
{"id": "enwn_validation_365", "nl": "Lois let her dog poop on her neighbors lawn.", "fol": "", "prediction": ["all x y.((Dog(x) & Neighbor(y)) -> LetsPoopOn(x,y))", "(LoisLetsDogPoopOnNeighborsLawn(Lois,Lois))", "Lois let her dog poop on her neighbor's lawn.", "(LetsDogPoopOnNeighborsLawn(Lois,Lois))", "all x y.((Lois(x) & Dog(y)) -> LetsPoopOnNeighborsLawn(x,y))", "all x y.((Dog(x) & Neighborhood(y)) -> LetsPoopOn(x,y))", "-LoisLetsDogPoopOnNeighborsLawn(Lois,Lois)", "all x.((Dog(x) & NeighborsLawn(x)) -> LetsPoopOn(x,y))", "(Lois) & DogPoopOnNeighborsLawn(Lois))", "Lois let her dog poop on neighbor's lawn.", "Lois let dog poop on neighbor's lawn.", "(LetsDogPoopOnNeighborsLawn(Lois,Lois))", "-LoisLetsDogPoopOnNeighborsLawn(lois,lois)", "all x y.((Lois(x) & Dog(y)) -> LetsPoopOnNeighborsLawn(x,y))", "all x y.((Dog(x) & Neighbor(y)) -> LetsPoopOn(x,y))", "Lois let her dog poop on neighbors lawn."]}
{"id": "enwn_validation_366", "nl": "Lois never picks up her dog's poop because she thinks it's gross.", "fol": "", "prediction": ["all x y.((Dog(x) & Lois(y)) -> -PicksUpPoop(y,x))", "all x.((Lois(x) & DogPoop(x) & ThinksGroovy(x)) -> -PicksUp(x,y))", "(-PicksUpPoop(Lois,Dog) & ThinksGroove(Lois))", "-(PicksUpPoop(Lois,Dog) & ThinksGroove(Lois,Dog))", "all x y z.((DogPoop(x) & Lois(y) & Poop(z) & ThinksGroovy(y,z)) -> -PicksUp(y,z))", "all x.((Lois(x) & Dog(y) & ThinksPoopGroove(x,y)) -> -PicksUpPoop(x,y))", "all x.((DogPoop(x) & -PicksUp(x,y)) -> Gross(y))", "(-picksUpPoop(Lois,Dog) & ThinksGroove(Lois))", "all x y.((Dog(x) & Lois(y)) -> -PicksUpPoop(y,x))", "all x y.((DogPoop(x) & Lois(y)) -> -PicksUp(y,x))", "all x y.((Lois(x) & Dog(y) & ThinksPoopGroove(x,y)) -> -PicksUpPoop(x,y))", "-(PicksUpDogPoop(Lois,Grooved))", "Lois neverpicksupdogspoop.com(Lois,dog) & ThinksGroove(Lois,dog))", "(NeverpicksUpPoop(Lois,Dog) & ThinksGroovy(Lois,Dog))", "all x.((DogPoop(x) & LoisThinking(x)) -> -PicksUp(x,y))", "(NeverpicksUpPoop(Lois,Dog) & ThinksGroove(Lois,Dog))"]}
{"id": "enwn_validation_367", "nl": "Leaving a mess requires someone else to clean it.", "fol": "", "prediction": ["all x y.((LaysMachine(x) & CleansMachine(y)) -> RequiresAlternativeCleaning(x,y))", "all x.((LaysMachine(x) & RequiresCleaning(x)) -> RequiresCleaning(x))", "all x y.((LaysMachine(x) & Person(y)) -> RequiresCleaning(y,x))", "all x.((LeaveMosh(x) & RequiresCleaning(x)) -> LeaveMosh(x))", "all x y.((LeavesMosh(x) & CleansMosh(y)) -> RequiresAlternativeCleaning(x,y))", "all x y.((Machine(x) & Clean(y)) -> RequiresAlternativeCleaning(x,y))", "(LeaveMess(x) -> RequiresCleaning(x))", "all x y z.((Machine(x) & Person(y) & Mess(z) & Leaves(x,y)) -> RequiresCleaning(y,z))", "all x.(LeavingMosh(x) -> RequiresCleaning(x))", "all x.(LeaveMosh(x) -> RequiresCleaning(x))", "all x y.((LaysMosh(x) & Person(y)) -> RequiresCleaning(y,x))", "all x.((LaysMachine(x) & RequiresCleaning(x)) -> RequiresCleaning(x))", "all x y.((LeaveSmoke(x) & Clean(y)) -> RequiresAlternativeClean(x,y))", "exists x.(LaysMachine(x) & RequiresCleaning(x))", "all x.(LaysMeadow(x) -> RequiresAnotherToClean(x))", "exists x.(Mess(x) & Leaves(x,y))"]}
{"id": "enwn_validation_368", "nl": "Dog poop is a mess.", "fol": "", "prediction": ["all x.(DogPoop(x) -> Mess(x))", "all x.(DogPoop(x) -> Mess(x))", "all x y.((DogPoop(x) & Meal(y)) -> Is(x,y))", "(Mach(DogPoop) & -Mach(DogPoop))", "all x.(DogPoop(x) -> Mess(x))", "all x y.((DogPoop(x) & Mess(y)) -> Is(x,y))", "(Mach(DogPoop))", "(Mach(DogPoop) & -Mach(DogPoop))", "all x.(DogPoop(x) -> Mess(x))", "all x y.((DogPoop(x) & Meal(y)) -> Mess(x))", "all x.(DogPoop(x) -> Mess(x))", "all x.(DogPoop(x) -> AMame(x))", "all x.(DogPoop(x) -> Mess(x))", "all x.(DogPoop(x) -> Mess(x))", "exists x.(DogPoop(x) & -Mach(x))", "all x.(DogPoop(x) -> Mess(x))"]}
{"id": "enwn_validation_369", "nl": "It is inconsiderate to make someone else account for your responsibilities.", "fol": "", "prediction": ["all x.((Alternative(x) & AccountForResponsibilities(x)) -> Inconsiderate(x))", "all x y.((Person(x) & Person(y)) -> Inconsiderate(x,y))", "all x.((MakingAnotherAccountForResponsibilities(x)) -> Inconsiderate(x))", "(InconsiderateToMakeAnotherAccountForResponsibilities(a) & InconsiderateToMakeAnotherAccountForResponsibilities(b))", "all x.((IsInconsiderate(x) & MakesAnotherAccountForResponsibilities(x)) -> Inconsiderate(x))", "all x y.((MakingAlterAccountForResponsibilities(x) & AccountForResponsibilities(y)) -> Inconsiderate(x))", "all x y.((Alternative(x) & Person(y)) -> Inconsiderate(x,y))", "all x.(Inconsiderate(x) -> AccountForResponsibilities(x))", "(InconsiderateToMakeAttribution(Attribution(Attribution) & AccountForResponsibilities(Attribution(Attribution))", "all x y.((IsInconsiderate(x) & Person(y)) -> AccountForResponsibilities(x,y))", "(InconsiderateToMakeAnotherAccountForResponsibilities(a) & MakeAnotherAccountForResponsibilities(b))", "all x.((Another(x) & AccountForResponsibilities(x)) -> Inconsiderate(x))", "all x y z.((Person(x) & Account(y) & Responsibility(z)) -> Inconsiderate(x,y,z))", "exists x.(Responsibilities(x) & AccountForResponsibilities(x))", "all x y.((Person(x) & Account(y)) -> Inconsiderate(x))", "all x.(Inconsiderate(x) -> AccountForResponsibilities(x))"]}
{"id": "enwn_validation_370", "nl": "Avoiding your responsibilities requires someone else to account for them.", "fol": "", "prediction": ["all x.((AvoidsResponsibilities(x) & AccountsForResponsibilities(x)) -> RequiresAnother(x))", "all x y.((AvoidsResponsibilities(x) & Person(y)) -> RequiresAccounting(y,x))", "all x.(AvoidsResponsibilities(x) -> RequiresAccounting(x))", "(AvoidsResponsibilities(a) -> RequiresAccounting(a))", "all x y.((AvoidsResponsibilities(x) & Person(y)) -> AccountsForResponsibilities(y,x))", "all x.((AvoidsResponsibilities(x) & RequiresAccounting(x)) -> AccountsForResponsibilities(x))", "all x y.((Responsibility(x) & Account(y)) -> Avoids(x,y))", "all x y.((AvoidResponsibilities(x) & Person(y)) -> RequiresAccounting(y,x))", "all x y z.((AvoidResponsibilities(x) & Person(y) & Responsibility(z)) -> RequiresAccounting(y,z))", "(All x.(RequiresAccounting(x) -> AvoidsResponsibilities(x)))", "all x.(AvoidsResponsibilities(x) -> RequiresAccounting(x))", "all x y.((AvoidResponsibilities(x) & Person(y)) -> AccountsForResponsibilities(y,x))", "all x.((AvoidsResponsibilities(x) & AccountsForResponsibilities(x)) -> RequiresAlternative(x))", "all x.(AvoidResponsibilities(x) -> RequiresAccounting(x))", "all x.((AvoidsResponsibilities(x) & RequiresAccounting(x)) -> RequiresAccounting(x))", "All x.(AvoidResponsibilities(x) -> RequiresAccounting(x,y))"]}
{"id": "enwn_validation_371", "nl": "Lois did not pick up her dog's poop on the neighbors lawn.", "fol": "", "prediction": ["all x y.((Lois(x) & Dog(y)) -> -PicksUpPoopOnNeighborsLawn(x,y))", "Lois & DogPoop(Lois) & -PicksUpOnNeighborsLawn(Lois,Lois))", "(-PicksUpPoopOnNeighborsLawn(Lois,Lois))", "all x y.((Dog(x) & NeighborsLawn(y)) -> -PicksUpPoopOn(x,y))", "-(PicksUpPoopOnNeighborsLawn(Lois,Lois) & Dog(Lois))", "Lois did not pick up her dog's poop on neighbor's lawn.", "all x.((Lois(x) & Dog(y)) -> -PicksUpPoopOnNeighborsLawn(x,y))", "Lois nephewsPoopOnNeighborsLawn(nearby(lois,lois) & -PicksUpPoopOnLois,lois,lois)", "(-picksupPoopOnNeighborsLawn(Lois,Lois))", "-(PicksUpPoopOnNeighborsLawn(Lois) | -PicksUpPoopOnNeighborsLawn(Lois,Lois)))", "(Lois) & -PicksUpPoopOnNeighborsLawn(Lois,Lois))", "(Lois & DogPoop(Lois) & -PicksUpOnNeighborsLawn(Lois,Lois))", "Lois & Dog(Lois) & -PicksUpPoopOnNeighborsLawn(Lois,Lois))", "Lois's dog poop was not picked up on neighbor's lawn.", "-(PicksUpDogPoopOnNeighborsLawn(Lois,Lois))", "all x y.((Lois(x) & Dog(y)) -> -PicksUpPoopOnNeighborsLawn(x,y))"]}
{"id": "enwn_validation_372", "nl": "Dog poop is a mess that needs to be cleaned by someone.", "fol": "", "prediction": ["all x.(DogPoop(x) -> (Miss(x) & NeedsCleaning(x)))", "all x.(DogPoop(x) -> (Mach(x) & NeedsCleaning(x)))", "all x y.((DogPoop(x) & Person(y)) -> NeedsCleaning(x,y))", "all x.(DogPoop(x) -> (Mess(x) & NeedsCleaning(x)))", "(MachinePoop(Dog) & NeedsCleaning(DogPoop))", "all x y.((DogPoop(x) & Person(y)) -> NeedsCleaning(x,y))", "all x.(DogPoop(x) -> (Miss(x) & NeedsCleaning(x)))", "all x y.((DogPoop(x) & Cleaner(y)) -> Mess(x))", "all x.(DogPoop(x) -> NeedsCleaning(x))", "all x.(DogPoop(x) -> (Machine(x) & NeedsCleaning(x)))", "all x y.((DogPoop(x) & Person(y)) -> Cleans(x,y))", "exists x.(DogPoop(x) & Mess(x) & NeedsCleaning(x))", "all x.(DogPoop(x) -> (Machine(x) & NeedsCleaning(x)))", "all x y.((DogPoop(x) & Cleaner(y)) -> Mess(x,y))", "all x.(DogPoop(x) -> (Miss(x) & NeedsCleaning(x)))", "exists x.(DogPoop(x) & NeedsCleaning(x))"]}
{"id": "enwn_validation_373", "nl": "Lois left a mess that needs to be cleaned by someone.", "fol": "", "prediction": ["all x y.((Lois(x) & Mess(y)) -> NeedsCleaning(x,y))", "all x.((Lois(x) & LeftMosh(x)) -> NeedsCleaning(x))", "(LeslieLeavedMess(Lois) & NeedsCleaning(Lois))", "Lois left a mess that needs to be cleaned by someone.", "all x y z.((Lois(x) & Mess(y) & Person(z)) -> Left(x,y))", "all x y.((Lois(x) & Mess(y)) -> NeedsCleaning(x,y))", "all x.((Lois(x) & LeftMoss(x)) -> NeedsCleaning(x))", "Lois left a mess that needs to be cleaned by someone.", "all x.(Lois(x) -> (LeavedMoss(x) & NeedsCleaning(x)))", "all x.(Lois(x) -> LeftMosh(x))", "(LaysLois(Lois) -> LeftMosh(Lois))", "(LaysLois(lois) -> LeavesMosh(lois))", "all x y.((Lois(x) & Mess(y)) -> NeedsCleaning(x,y))", "Lois left a mess that needs to be cleaned by someone.", "all x.((Lois(x) & LeftMoss(x)) -> NeedsCleaning(x))", "Lois left a mess that needs to be cleaned by someone."]}
{"id": "enwn_validation_374", "nl": "Avoiding your responsibilities is inconsiderate.", "fol": "", "prediction": ["all x.((AvoidsResponsibilities(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((AvoidResponsibilities(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.(AvoidsResponsibilities(x) -> Inconsiderate(x))", "all x.(AvoidResponsibilities(x) -> Inconsiderate(x))", "all x.((AvoidsResponsibilities(x) & Inconsiderate(x)) -> Inconsiderate(x))", "All x y.((AvoidResponsibilities(x) & Responsibility(y) & Inconsiderate(x)) -> Inconsiderate(x))", "all x y.((AvoidResponsibilities(x) & Responsibility(y)) -> Inconsiderate(x))", "all x.((Responsibilities(x) & Avoid(x)) -> Inconsiderate(x))", "all x.((AvoidResponsibilities(x) & Inconsiderate(x)) -> Inconsiderate(x))", "All x y.((AvoidResponsibilities(x) & Requirements(y)) -> Inconsiderate(x))", "all x.((AvoidsResponsibilities(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.(AvoidResponsibilities(x) -> Inconsiderate(x))", "All x y.((AvoidResponsibilities(x) & Responsibilities(y)) -> Inconsiderate(x))", "all x.(AvoidsResponsibilities(x) -> Inconsiderate(x))", "All x y.((AvoidResponsibilities(x) & Responsibility(y)) -> Inconsiderate(x,y))", "all x.(AvoidResponsibilities(x) -> Inconsiderate(x))"]}
{"id": "enwn_validation_375", "nl": "You are avoiding your responsibilities when you leave a mess for someone else.", "fol": "", "prediction": ["all x y.((LaysMach(x,y) & SomeoneOther(y)) -> AvoidsResponsibilities(x))", "all x y.((LeavesMach(x,y) & SomeoneOther(y)) -> AvoidsResponsibilities(x))", "all x.((LeavingMach(x) & LeavesMach(x)) -> AvoidsResponsibilities(x))", "all x y.((Mach(x) & Leaves(x,y)) -> AvoidsResponsibilities(x))", "all x y z.((Mach(x) & Leaves(x,y) & Person(z)) -> AvoidsResponsibilities(x,z))", "all x y z.((LaysMach(x,y) & Person(z) & LeavesMach(x,z)) -> AvoidsResponsibilities(x,y,z))", "all x y.((LaysMach(x,y) & SomeoneOther(y)) -> AvoidsResponsibilities(x))", "all x.((LaysMach(x) & ForPerson(x)) -> AvoidsResponsibilities(x))", "(AllowsMachinesForAnother(x) -> AvoidsResponsibilities(x))", "all x.((LeavingMach(x) & ForSomeone(x)) -> AvoidsResponsibilities(x))", "all x y.((LeavesMach(x,y) & SomeoneOther(y)) -> AvoidsResponsibilities(x,y))", "all x y z.((LeaveMach(x,y) & Person(z) & LeaveMach(x,z)) -> AvoidsResponsibilities(x,y,z))", "all x.((LeaveMach(x) & LeaveMach(x)) -> AvoidsResponsibilities(x))", "all x y.((LeavingMach(x) & SomeoneOther(y)) -> AvoidsResponsibilities(x,y))", "exists x.(Mach(x) & Leaves(x,Mach) & For(x,Mach))", "exists x.(Mach(x) & LeavesForAnother(x))"]}
{"id": "enwn_validation_376", "nl": "Leaving a mess for someone else to clean is being inconsiderate.", "fol": "", "prediction": ["all x.((LaysMachine(x) & ForOther(x)) -> Inconsiderate(x))", "all x.((LeavingMosh(x) & LeavesMosh(x)) -> Inconsiderate(x))", "all x y.((LaysMachine(x,y) & Person(y)) -> Inconsiderate(x))", "all x y.((LaysMachine(x) & Person(y) & CleansMachine(y)) -> Inconsiderate(x))", "all x y.((LeaveMosh(x) & Person(y) & CleansMosh(x,y)) -> Inconsiderate(x))", "all x y z.((LaysMachine(x,y) & Person(z) & CleansMachine(x,z)) -> Inconsiderate(x))", "all x.((LeaveMachine(x) & SomeoneOther(x)) -> Inconsiderate(x))", "all x.(LeaveMachineForOther(x) -> Inconsiderate(x))", "all x.((LeavingMachine(x) & LeavesMachine(x)) -> Inconsiderate(x))", "all x.((LaysMachine(x) & CleansMachine(x)) -> Inconsiderate(x))", "all x y.((LeavesMachine(x,y) & Person(y)) -> Inconsiderate(x))", "all x.(LeavingMoshForOther(x) -> Inconsiderate(x))", "all x y.((LaysMachine(x,y) & Person(y)) -> Inconsiderate(x,y))", "all x.(LeaveMachine(x) -> Inconsiderate(x))", "exists x.(Machine(x) & LeavesForOther(x))", "all x y.((LaysMachine(x,y) & SomeoneOther(y)) -> Inconsiderate(x))"]}
{"id": "enwn_validation_377", "nl": "Lois is inconsiderate.", "fol": "", "prediction": ["Lois is inconsiderate.", "(Inconsiderate(Lois)", "-Inconsiderate(Lois)", "all x.(Lois(x) -> Inconsiderate(x))", "Lois is inconsiderate.", "Lois is Inconsiderate(Lois)", "(Inconsiderate(Lois)", "-Inconsiderate(Lois)", "all x.(Lois(x) -> Inconsiderate(x))", "Lois is inconsiderate.", "Lois is Inconsiderate(Lois)", "-Inconsiderate(Lois)", "(Inconsiderate(Lois)", "Lois is Inconsiderate(Lois)", "Lois is inconsiderate.", "Lois is inconsiderate."]}
{"id": "enwn_validation_378", "nl": "Joshua likes driving an extremely loud car in the middle of the night because it wakes people up.", "fol": "", "prediction": ["all x y.((Joshua(x) & LoudCar(y) & MidNight(x)) -> WakesPeopleUp(x))", "all x.((Joshua(x) & LoudCar(x) & WakesPeopleUp(x)) -> Likes(x,y))", "all x y.((Joshua(x) & Car(y) & MidNight(x) & WakesPeopleUp(y)) -> Likes(x,y))", "all x y z.((Joshua(x) & Car(y) & Person(z) & MidNight(y) & WakesUp(z)) -> Likes(x,y))", "(LoudCar(Josh) & WakesPeopleUp(Josh))", "all x.((Joshua(x) & LoudCar(x) & WakesPeopleUp(x)) -> LikesDriving(x))", "all x y.((Joshua(x) & LoudCar(y) & Midnight(y)) -> WakesPeopleUp(x,y))", "all x y z.((Joshua(x) & Car(y) & Person(z) & Midnight(z) & WakesUp(y,z)) -> Likes(x,y))", "all x.((Joshua(x) & LoudCar(x)) -> WakesPeopleUp(x))", "(LoudCar(Josh) & WakesPeopleUp(Josh))", "all x y.((Josh(x) & LoudCar(y)) -> LikesDriving(x,y))", "all x.(LoudCar(x) -> Likes(x,y))", "all x.((Josh(x) & LoudCar(x) & WakesPeopleUp(x)) -> LikesDriving(x,y))", "(LoudCar(Joshua) & WakesUpPeople(Joshua))", "all x.((Joshua(x) & LoudCar(x)) -> WakesPeopleUp(x))", "(LoudCar(Josh) & WakesPeopleUp(Josh))"]}
{"id": "enwn_validation_379", "nl": "Making things unpleasant for someone is rude.", "fol": "", "prediction": ["all x.((MakingUnpleasantForPerson(x)) -> Rust(x))", "all x y.((Person(x) & Person(y) & Uncomfortable(x,y)) -> Rust(x))", "all x.((Person(x) & Uncomfortable(x)) -> Rust(x))", "all x.((MakingUnpleasantThings(x) & Person(x)) -> Rust(x))", "all x.((Person(x) & Unpleasant(x)) -> Rust(x))", "all x y.((Person(x) & Person(y) & Unpleasant(y)) -> Rust(x))", "all x y.((MakingUnpleasantFor(x,y) & Person(y)) -> Rust(x))", "all x.((MakingUnpleasant(x) & Person(x)) -> Rust(x))", "(Rule(MakesUnpleasantForPerson(x))", "all x.(UnpleasantForPerson(x) -> Rust(x))", "all x y.((Person(x) & Uncomfortable(x,y)) -> Rust(x))", "all x y.((MakingUnpleasantThings(x) & Person(y)) -> Rust(x))", "all x.((Unpleasant(x) & Person(x)) -> Rust(x))", "all x.(UnpleasantForPerson(x) -> Rust(x))", "All x y.((Person(x) & Unpleasant(y)) -> Rust(x))", "exists x.(Unpleasant(x) & For(x,y))"]}
{"id": "enwn_validation_380", "nl": "Waking someone up at night prevents them from getting a full night's rest.", "fol": "", "prediction": ["all x y.((WakingUpAtNight(x) & Person(y)) -> -GetsFullNightsRest(y))", "all x.((WakingUpAtNight(x) & Person(y)) -> PreventsFullNightsRest(y))", "all x y.((WakingUpAtNight(x) & Person(y)) -> PreventsFullNightsRest(y,x))", "all x.((WakingUpAtNight(x) & Person(x)) -> -GetsFullNightsRest(x))", "all x y z.((WakingUpAtNight(x) & Person(y) & Night(z)) -> PreventsFullNightsRest(y,z))", "all x.((Person(x) & WakingAtNight(x)) -> -GetsFullNightsRest(x))", "all x.(WakingUpAtNight(x) -> PreventsFullNightsRest(x))", "all x y.((Person(x) & WakingAtNight(x,y)) -> -GetsFullNightsRest(x,y))", "all x y.((AtNight(x) & Person(y) & WakingUpAt(y,x)) -> -GetsFullNightsRest(y,x))", "all x y.((WakingUpAtNight(x) & Person(y)) -> -GetsFullNightsRest(y))", "all x y z.((WakingUpAtNight(x) & Person(y) & Night(z)) -> PreventsFullNightsRerest(y,z))", "all x.((WakingUpAtNight(x) & Person(y)) -> PreventsFullNightsRerest(y,x))", "all x y.((WakingUpAtNight(x) & Person(y)) -> PreventsFullNightsRerest(x,y))", "all x.(WakingUpAtNight(x) -> PreventsFullNightsRerest(x))", "all x.((Person(x) & WakingUpAtNight(x)) -> PreventsFullNightStorm(x))", "exists x.(WakingUpAtNight(x) & PreventsFullNightsRest(x))"]}
{"id": "enwn_validation_381", "nl": "Not getting a full night's rest is unpleasant.", "fol": "", "prediction": ["all x.((NightsRest(x) & -FullNightsRest(x)) -> Unpleasant(x))", "all x.((FullNightsRest(x) & Uncomfortable(x)) -> -FullNightsRest(x))", "-FullNightsRest(x) -> Uncomfortable(x))", "all x.((NightsRerest(x) & -Full(x)) -> Unpleasant(x))", "(Unpleasant(n) & -FullNightsRest(n))", "all x.((LowerNightsRest(x) & -FullNightsRest(x)) -> Uncomfortable(x))", "all x y.((FullNightsRest(x) & -FullNightsRest(y)) -> Uncomfortable(x))", "-FullNightsRest(n) -> Unpleasant(n))", "(Unpleasant(nonFullNightsRest)", "all x.((NightsRest(x) & -FullNightsRest(x)) -> Uncomfortable(x))", "all x.((Lunch(x) & -FullNightsRest(x)) -> Unpleasant(x))", "all x.((FullNightsRest(x) & Uncomfortable(x)) -> -Gets(x,y))", "all x.(FullNightsRest(x) -> Uncomfortable(x))", "-FullNightsRest(x) -> Uncomfortable(x))", "all x.((NightsRerest(x) & -Full(x)) -> Uncomfortable(x))", "all x.(FullNightsRest(x) -> Unpleasant(x))"]}
{"id": "enwn_validation_382", "nl": "If you like to be rude, you're a rude person.", "fol": "", "prediction": ["all x.((LikesToBeRust(x) & Rust(x)) -> RustPerson(x))", "(LikesToBeRule(LikesToBeRule(LikesToBeRule(LikesToBeRule(LikesToBeRule(LikesToBeRule(LikesToBeRule(LikesToBeRule(LikesToBeRule(LikesToBeRule(LikesToBeRule(LikesToBeRule(LikesToBeRule(LikesToBeRule(LikesRule(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like(Like)))))))", "all x.((Person(x) & LikesToBeRust(x)) -> Rust(x))", "all x.((LikesToBeRust(x) & Rusty(x)) -> RustPerson(x))", "all x.((LikesToBeRule(x) & Rust(x)) -> RustPerson(x))", "all x.((Rubbly(x) & LikesToBe(x)) -> RustPerson(x))", "all x.(Rubbly(x) -> RustPerson(x))", "all x y.((Person(x) & LikesToBeRust(x) & Person(y)) -> Rust(x))", "all x.((Relax(x) & LikesToBeRule(x)) -> RustPerson(x))", "all x.(LikesToBeRust(x) -> RustPerson(x))", "all x.(Rubbly(x) -> RustPerson(x))", "all x.(Rainy(x) -> RustPerson(x))", "all x.(Relax(x) -> Rust(x))", "all x.((Person(x) & LikesToBeRust(x)) -> Rust(x))", "exists x.(Rule(x) & LikesToBe(x))", "all x.(Relaxing(x) -> RustPerson(x))"]}
{"id": "enwn_validation_383", "nl": "Waking someone up at night can be unpleasant for that person.", "fol": "", "prediction": ["all x.((Person(x) & WakingUpAtNight(x)) -> UnappealingFor(x,Person))", "all x y.((Person(x) & Person(y)) -> Unappealing(x,y))", "all x.((Person(x) & WakingAtNight(x)) -> UnappealingFor(x,Person))", "all x y.((Person(x) & Person(y) & WakingAtNight(x,y)) -> Unappealing(x,y))", "all x.(WakingUpAtNight(x) -> UnappealingForPerson(x))", "all x y z.((Person(x) & Person(y) & Night(z) & WakingUpAt(x,y,z)) -> UnappealingFor(x,y,z))", "all x y.((Person(x) & WakingUpAtNight(x,y)) -> UnappealingFor(x,y))", "all x.((WakingUpAtNight(x) & Person(y)) -> Uncomfortable(x,y))", "all x.((Person(x) & WakingUpAtNight(x)) -> UnappealingFor(x,Person))", "all x y.((WakingUpAtNight(x) & Person(y)) -> Unappealing(y))", "all x y.((Person(x) & Person(y)) -> Unpleasant(x,y))", "all x.(WakingUpAtNight(x) -> UncomfortableForPerson(x))", "exists x.(WakingUpAtNight(x) & Person(x) & Uncomfortable(x))", "all x.((Person(x) & WakingAtNight(x)) -> UncomfortableFor(x,Person))", "exists x.(WakingUpAtNight(x) & UnfortunateFor(x,y))", "all x y.((Person(x) & Person(y)) -> Uncomfortable(x,y))"]}
{"id": "enwn_validation_384", "nl": "It is rude to wake people up at night.", "fol": "", "prediction": ["all x.((WakeUp(x) & Night(x)) -> Rust(x))", "all x.((WakePeopleUpAtNight(x)) -> Rusty(x))", "all x y.((WakeUp(x) & Person(y)) -> Rust(x))", "all x.((WakeUpAtNight(x) & People(x)) -> Rusty(x))", "(RuleToWakeUpAtNight(a) -> WakePeopleUp(a))", "(RuleToWakePeopleUpAtNight(x) -> WakesPeopleUpAtNight(x))", "(WakePeopleUpAtNight(x) -> Rust(x))", "(RainToWakePeopleUpAtNight(x))", "all x y.((WakeUp(x) & Person(y)) -> Rust(x,y))", "all x y.((WakePeopleUp(x) & Night(y)) -> Rust(x,y))", "all x.((WakePeopleUpAtNight(x)) -> Rust(x))", "all x.(Rain(x) -> WakePeopleUpAtNight(x))", "all x y.((Roast(x) & Person(y)) -> WakesUpAtNight(x,y))", "all x.((WakeUp(x) & Night(x)) -> Rusty(x))", "All x.(Rain(x) -> WakesPeopleUpAtNight(x))", "All x.(RuleToWakeUpAtNight(x) -> WakePeopleUp(x))"]}
{"id": "enwn_validation_385", "nl": "Joshua likes to be rude.", "fol": "", "prediction": ["all x.(Joshua(x) -> LikesToBeRust(x))", "(LikesToBeRule(Joshua)", "Joshua likesToBeRule(Joshua)", "all x.(Josh(x) -> LikesToBeRule(x))", "-LikesToBeRusty(Joshua)", "all x.((Joshua(x) & Rust(x)) -> LikesToBe(x))", "(LikesToBeRule(Josh))", "-LikesToBeRule(Joshua)", "Joshua likes to beRusty.", "all x.(Joshua(x) -> LikesToBeRusty(x))", "(LikesToBeRurel(Joshua))", "-LikesToBeRuleful(Joshua)", "all x.(Josh(x) -> LikesToBeRurel(x))", "(LikesToBeRule(Joshua)", "(LikesToBeRurel(Josh))", "all x.(Joshua(x) -> LikesToBeRule(x))"]}
{"id": "enwn_validation_386", "nl": "Joshua is a rude person.", "fol": "", "prediction": ["all x.(Josh(x) -> RustPerson(x))", "all x.(Joshua(x) -> RustPerson(x))", "(RustPerson(Joshua)", "all x.((Josh(x) & Rust(x)) -> Person(x))", "(RulePerson(Joshua)", "-RustPerson(Joshua)", "Joshua is rude(x)", "all x.(Josh(x) -> RustPerson(x))", "all x.((Josh(x) & RustyPerson(x)) -> RustPerson(x))", "(RainPerson(Joshua)", "all x.(Joshua(x) -> Rust(x))", "(RustPerson(Josh))", "(RubbishPerson(Joshua)", "all x.(Joshua(x) -> RoughPerson(x))", "all x.(Josh(x) -> RustPerson(x))", "all x.(Josh(x) -> Rust(x))"]}
{"id": "enwn_validation_387", "nl": "Katie used her neighbors' internet access without their permission.", "fol": "", "prediction": ["all x y.((Neighbor(x) & Katie(y)) -> UsedInternetAccessWithoutPermission(y,x))", "(UsedInternetAccess(Katie,Neighbors) & -Permission(Katie,Neighbors))", "Katie used InternetAccess(Katie,Neighbors) -WithoutPermission(Katie,Neighbors))", "all x y.((Katie(x) & Neighbor(y)) -> UsedInternetAccessWithoutPermission(x,y))", "all x y z.((Katie(x) & Neighbor(y) & InternetAccess(z)) -> UsedWithoutPermission(x,y,z))", "(UsedNetworkAccess(Katie,Neighbors) & -Permission(Katie,Neighbors))", "(NeighborsInternetAccess(Katie,x) & -Permission(Katie))", "all x.((Katie(x) & NeighborsInternetAccess(x)) -> UsedWithoutPermission(x,Katie))", "Katie used internet access without permission from her neighbors.", "-(NeighborsInternetAccess(Katie,1))", "(UsedInternetAccess(Katie,Neighbors) & -Permission(Katie))", "all x y.((Neighbor(x) & Katie(y)) -> UsesInternetAccessWithoutPermission(y,x))", "(NeighborsInternetAccess(Katie) & -Permission(Katie))", "Katie used InternetAccessWithoutPerson(Katie,Neighbors)", "Katie used internet access without permission of her neighbors.", "Katie used internet access without permission from neighbors."]}
{"id": "enwn_validation_388", "nl": "Using someone's internet access doesn't prevent them from using it.", "fol": "", "prediction": ["all x y.((UsesInternetAccess(x) & Person(y)) -> -PreventsFromUsingInternetAccess(y,x))", "all x.((UsesInternetAccess(x) & Person(y)) -> -ProhibitsFromUsingInternetAccess(y,x))", "all x y.((UsesInternetAccess(x) & Person(y)) -> -ProhibitsFromUsingInternetAccess(y,x))", "all x.((InternetAccess(x) & Uses(x,y)) -> -PreventsUse(x,y))", "all x y.((UsesInternetAccess(x,y) & Person(y)) -> -PreventsFromUsingInternetAccess(y,x))", "all x.((UsesInternetAccess(x) & Person(x)) -> -UsesInternetAccess(x))", "all x y.((UseInternetAccess(x) & Person(y)) -> -PreventsUsingInternetAccess(x,y))", "(UsesInternetAccess(x) -> -PreventsUsingInternetAccess(x))", "-(UsesInternetAccess(x) & Person(y)))", "all x y z.((UsesInternetAccess(x) & Person(y) & InternetAccess(z)) -> -PreventsFromUsing(y,z))", "all x.(UsesInternetAccess(x) -> -PreventsUsingInternetAccess(x))", "all x y.((Person(x) & InternetAccess(y) & Uses(x,y)) -> -PreventsFromUsing(x,y))", "all x.((UsesInternetAccess(x) & UsesInternetAccess(x)) -> -ProhibitsUse(x,y))", "all x.((InternetAccess(x) & Uses(x,y)) -> -PreventsUsing(x,y))", "all x y.((UsesInternetAccess(x) & Person(y)) -> -PreventsUsingInternetAccess(y,x))", "(all x.(InternetAccess(x) -> Uses(x,y)))"]}
{"id": "enwn_validation_389", "nl": "It's wrong to deprive someone of their property.", "fol": "", "prediction": ["all x.((DeprivesProperty(x) & Person(x)) -> Irresponsible(x))", "all x y.((Deprive(x,y) & Person(y)) -> Irresponsible(x))", "all x.((Person(x) & DeprivesProperty(x)) -> Irresponsible(x))", "all x y.((Person(x) & Property(y)) -> Irresponsible(x,y))", "all x.(DeprivesProperty(x) -> Irresponsible(x))", "(It'sWrongToDepriveProperty(Is(Is(Is))", "all x.((DeprivesProperty(x) & Person(x)) -> Wrong(x))", "(DeprivesProperty(x) -> Wrong(x))", "(IsIrresponsibleToDepriveProperty(Is(Is(Is))", "all x y.((Deprives(x,y) & Person(y)) -> Irresponsible(x,y))", "all x.((Deprive(x) & Person(x)) -> Irresponsible(x))", "exists x.(Deprive(x,y) & Person(y) & Property(y) & -Deprive(x,y))", "all x y.((Deprive(x,y) & Person(y)) -> Irresponsible(x,y))", "exists x.(DepriveProperty(x) & IsWrong(x))", "all x y.((Person(x) & Property(y)) -> Irresponsible(x,y))", "all x y.((Deprives(x,y) & Person(y)) -> Irresponsible(x,y))"]}
{"id": "enwn_validation_390", "nl": "Katie didn't deprive her neighbors of their internet by using it without their permission.", "fol": "", "prediction": ["all x y.((Neighbor(x) & Katie(y)) -> -DeprivesInternet(y,x))", "(-DeprivesNeighborsOfInternet(Katie,Internet) & UsesWithoutPermission(Katie,Internet))", "all x y.((Katie(x) & Neighbor(y) & UsesInternetWithoutPermission(x,y)) -> -Deprives(x,y))", "all x y z.((Katie(x) & Neighbor(y) & Internet(z) & UsesWithoutPermission(x,y,z)) -> -Deprives(x,y,z))", "all x.((Katie(x) & Neighbors(x) & UsesInternetWithoutPermission(x)) -> -DeprivesOfInternet(x))", "-(DeprivesNeighborsOfInternet(Katie,Internet) & UsesWithoutPermission(Katie,Internet))", "(-DeprivesNeighborsOfInternet(Katie) & UsesInternetWithoutPermission(Katie))", "all x y.((Neighbor(x) & Katie(y) & UsesInternetWithoutPermission(y,x)) -> -Deprives(y,x))", "-(DeprivesNeighborsOfInternet(Katie,Network) & UsesWithoutPermission(Katie,Network)))", "((Neighbors(Katie) & Internet(Katie)) | (-DeprivesNetwork(Katie,Katie) & UsesNetworkWithoutPermission(Katie))))", "all x.((Katie(x) & Neighbors(x) & UsesInternetWithoutPermission(x)) -> -Deprives(x,y))", "all x y.((Katie(x) & Neighborhood(y) & UsesInternetWithoutPermission(x,y)) -> -DeprivesOfInternet(x,y))", "(-DeprivesNeighborsOfInternet(Katie,InternetUserPermission))", "(-DeprivesNeighborsOfInternet(Katie) & UsesInternetWithoutPermission(Katie))", "-(DeprivesNeighborsOfInternet(Katie,Internet) & UsesWithoutPermission(Katie,Internet))", "(-DeprivesNeighborsOfInternet(Katie,Network) & UsesWithoutPermission(Katie,Network))"]}
{"id": "enwn_validation_391", "nl": "It was okay for Katie to use her neighbors' internet.", "fol": "", "prediction": ["all x.((Katie(x) & NeighborsInternet(x)) -> OK(x))", "all x y.((Katie(x) & NeighborsInternet(y)) -> OKToUse(x,y))", "(All x.((Katie(x) & NeighborsInternet(x)) -> OK(Katie)))", "(AlwaysUsedInternet(Katie,Neighbors))", "all x y.((Katie(x) & NeighborsInternet(y)) -> Okay(x,y))", "all x.((Katie(x) & NeighborsInternet(x)) -> OK(x))", "all x y z.((Katie(x) & NeighborsInternet(y) & Internet(z)) -> OK(x,y,z))", "all x.((Katie(x) & NeighborsInternet(x)) -> OkayToUse(x,y))", "(All x.(NeighborsInternet(x) -> OK(Katie,x)))", "all x y.((NeighborsInternet(x) & Katie(y)) -> OKToUse(y,x))", "-(UsesInternet(Katie,Neighbors))", "(all x.((Katie(x) & NeighborsInternet(x)) -> OK(Katie)))", "(AlwaysUsedInternet(Katie,Neighbors))", "All x.((Katie(x) & UsesNeighborsInternet(x)) -> OK(x))", "all x y.((NeighborsInternet(x) & Katie(y)) -> OKToUse(y,x))", "All x.((Katie(x) & NeighborsInternet(x)) -> Okay(x))"]}
{"id": "enwn_validation_392", "nl": "Pushing people out of your way is an impatient thing to do.", "fol": "", "prediction": ["(ImpatientThingToDo(PutPeopleOutOfWeave(PutPeopleOutOfWeave(PutPeopleOutOfWeave(PutPeopleOutOfWeave(PutPeopleOutOfWeave(PutPeopleOutOfWeave(PutPeopleOutOfWeave(PutPeopleOutOfWeave(PutPeopleOutOfWeave(PutPeopleOutOfWeave(PutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPutPu", "all x.(PushingPeopleOutOfWay(x) -> ImpatientThing(x))", "all x.(PushingOutOfWay(x) -> ImpatientThing(x))", "all x y.((PushingPeopleOutOfWay(x) & ImpatientThing(y)) -> ImpatientThing(y))", "all x.(PutsPeopleOutOfWay(x) -> ImpatientThing(x))", "all x y.((PushingOutOfWay(x) & Person(y)) -> ImpatientThing(x))", "all x y.((PutsPeopleOutOfWay(x) & ImpatientThing(y)) -> ImpatientThing(x))", "all x.(PushingPeopleOutOfWay(x) -> ImpatientThingToDo(x))", "all x.((PushingPeopleOutOfWay(x) & ImpatientThing(x)) -> PushingPeopleOutOfWay(x))", "all x y.((PutsPeopleOutOfWay(x) & ImpatientThing(y)) -> PushesPeopleOutOfWay(x,y))", "all x.((PushingPeopleOutOfYourWay(x) & ImpatientThing(x)) -> PushingPeopleOutOfYourWay(x))", "all x.(PushingOutOfWay(x) -> ImpatientThing(x))", "all x.(PushOutOfWay(x) -> ImpatientThing(x))", "all x y.((PushPeopleOutOfYourWay(x) & Person(y)) -> ImpatientThing(x))", "all x y.((PushPerson(x) & Person(y)) -> ImpatientThing(x,y))", "All x.(PushingOutOfWay(x) -> ImpatientThingToDo(x))"]}
{"id": "enwn_validation_393", "nl": "Patience is a virtue.", "fol": "", "prediction": ["all x.(Patient(x) -> Virtue(x))", "all x.(Patient(x) -> Virtue(x))", "Patience is a Virtue.", "all x.(Patience(x) -> Virtue(x))", "all x y.((Patient(x) & Virtue(y)) -> Patience(x))", "(Virgin) & Patience(Patience))", "all x.((Patience(x) & Virtue(x)) -> Patience(x))", "all x y.((Patience(x) & Virtue(y)) -> Patience(x))", "all x.(Patient(x) -> Virtue(x))", "(Violence(patience) & Patience(patience))", "all x.(Patience(x) -> Virtue(x))", "all x.(Patient(x) -> Virtue(x))", "all x.(Patience(x) -> Virtue(x))", "all x.(Patient(x) -> Virtue(x))", "exists x.(Patience(x) & Virtue(x))", "All x.(Patient(x) -> Virtue(x))"]}
{"id": "enwn_validation_394", "nl": "People should be virtuous.", "fol": "", "prediction": ["all x.(Person(x) -> Virtuous(x))", "all x.(People(x) -> Virtuous(x))", "all x.(Person(x) -> Virtuous(x))", "all x.((Person(x) & Virtuous(x)) -> ShouldBe(x))", "all x y.((Person(x) & Person(y)) -> Virtuous(x,y))", "all x.(Person(x) -> Virtuous(x))", "all x.(People(x) -> Virtuous(x))", "all x.((Person(x) & Virtuous(x)) -> ShouldBe(x))", "all x y.((Person(x) & Person(y)) -> Virtuous(x))", "all x.(Person(x) -> Virtuous(x))", "all x y.((Person(x) & Person(y)) -> Virtuous(x,y))", "all x.(People(x) -> Virtuous(x))", "all x.(Person(x) -> Virtuous(x))", "exists x.(Person(x) & Virtuous(x))", "exists x.(Person(x) & Virtuous(x))", "exists x.(Person(x) & Virtuous(x))"]}
{"id": "enwn_validation_395", "nl": "Letty shoved Cathleen out of the way when walking through a doorway.", "fol": "", "prediction": ["all x y.((Letty(x) & Cathleen(y) & WalkingThroughDoorway(x,y)) -> PushedOutOfWay(x,y))", "all x y z.((Letty(x) & Cathleen(y) & Doorway(z)) -> PushedOutOfWay(x,y,z))", "all x y.((Letty(x) & Cathleen(y) & WalksThroughDoorway(x,y)) -> PushesOutOfWay(x,y))", "Letty shoved Cathleen out of the way when walking through a doorway.", "all x.((Letty(x) & WalksThroughDoorway(x)) -> PushedOutOfWay(x))", "(WalkingThroughDoorway(Letty,Catherine) -> PushedOutOfWay(Letty,Catherine))", "all x y z.((Letty(x) & Cathleen(y) & Doorway(z) & WalkingThrough(x,y,z)) -> PushedOutOfWay(x,y,z))", "(WalkingThroughDoorway(Letty) & PushedOutOfWay(Letty,Cathleen))", "all x.((Letty(x) & WalkedThroughDoorway(x)) -> PushedCathleenOutOfTheWay(x))", "(WalkingThroughDoorway(Letty,Cathleen) -> PushedOutOfWay(Letty,Cathleen))", "all x.((Letty(x) & Cathleen(y) & WalksThroughDoorway(x,y)) -> PushesOutOfWay(x,y))", "all x y.((Letty(x) & Cathleen(y) & WalkingThroughDoorway(x,y)) -> PluckedOutOfWay(x,y))", "All x.((Letty (Cathleen) & Doorway(Lolty)) -> PushedOutOfWay(Letty,Cathleen))", "all x y.((Letty(x) & Catheren(y) & WalksThroughDoorway(x,y)) -> PushesOutOfWay(x,y))", "all x y z.((Letty(x) & Cathleen(y) & Doorway(z)) -> PluckedOutOfWay(x,y,z))", "all x y.((Letty(x) & Cathleen(y) & WalksThroughDoorway(x,y)) -> PushesOutOfTheWay(x,y))"]}
{"id": "enwn_validation_396", "nl": "People should be patient.", "fol": "", "prediction": ["all x.(Person(x) -> Patient(x))", "all x.(Patient(x) -> Patient(x))", "all x.(Person(x) -> Patient(x))", "all x.((Person(x) & Patient(x)) -> ShouldBe(x))", "all x.(Patient(x) -> Patient(x))", "all x.(Person(x) -> Patient(x))", "exists x y.(Person(x) & Patient(y))", "all x.((Person(x) & Patient(x)) -> ShouldBe(x))", "exists x y.(Person(x) & Patient(y))", "all x.(Person(x) -> Patient(x))", "all x.(Patient(x) -> ShouldBe(x))", "all x.((Person(x) & Patient(x)) -> ShouldBe(x))", "exists x y.(Person(x) & Patient(y))", "all x.((Person(x) & Patient(x)) -> ShouldBe(x))", "all x.(Person(x) -> Patient(x))", "all x.(Patient(x) -> ShouldBe(x))"]}
{"id": "enwn_validation_397", "nl": "You shouldn't push people out of your way.", "fol": "", "prediction": ["all x.((PushPeopleOutOfWay(x)) -> -PushPeopleOutOfWay(x))", "all x.(PushPeopleOutOfWay(x) -> -PushPeopleOutOfWay(x))", "all x.((PutPeopleOutOfWay(x)) -> -PutPeopleOutOfWay(x))", "-PushPeopleOutOfWay(x)", "all x y.((PushPerson(x) & Person(y)) -> -PushOutOfWay(x,y))", "all x.((PushPeopleOutOfWay(x)) -> -PushPeopleOutOfWay(x))", "-PutsPeopleOutOfWay(x)", "all x.((PushPeople(x) & -PushPeople(x)) -> -PushPeopleOutOfWay(x))", "all x y.((PushPeople(x) & Person(y)) -> -PushOutOfWay(x,y))", "-(PushPeopleOutOfWay(x))", "all x.(PutsPeopleOutOfWay(x) -> -PutsPeopleOutOfWay(x))", "(-PushOutOfWay(Person(Person))", "(-PushPeopleOutOfWay(x))", "all x.(PushPeopleOutOfWay(x) -> -PushPeopleOutOfWay(x))", "all x y.((Person(x) & Person(y)) -> -PushOutOfWay(x,y))", "all x.((PutsPeopleOutOfWay(x)) -> -PutsPeopleOutOfWay(x))"]}
{"id": "enwn_validation_398", "nl": "Letty should not have shoved Cathleen.", "fol": "", "prediction": ["all x.((Letty(x) & -PoundedCathleen(x)) -> -PoundedCathleen(x))", "Letty should not have shovedCathleen.", "all x.((Letty(x) & -PoppedCathleen(x)) -> -PoppedCathleen(x))", "all x y.((Letty(x) & Catheren(y)) -> -Pounded(x,y))", "Cathleen should not have been shoved by Letty.", "Letty should not have shovedCathleen.", "all x.((Letty(x) & Cathleen(x)) -> -Pounded(x,Cathleen))", "(-PoundsCathleen(Letty))", "-PoundedCathleen(Letty)", "all x.((Letty(x) & -PockedCathleen(x)) -> -PockedCathleen(x))", "Cathleen should not have shoved.", "-PousedCathleen(Letty)", "Letty should not have shovedCatheen.", "Letty should not have shoved Cathleen.", "(-PockedCathleen(Letty)", "Letty should not have shovedCatherine."]}
{"id": "enwn_validation_399", "nl": "The professor hugged the student without asking permission.", "fol": "", "prediction": ["all x y.((Professor(x) & Student(y)) -> Hugged(x,y))", "all x y z.((Professor(x) & Student(y) & Student(z)) -> (Hulked(x,y) & -Question(x,z)))", "the professor hugged the student without asking permission.", "(Hungry(Professor) & Student(Student) & -AsksPermission(Professor))", "all x y.((Professor(x) & Student(y)) -> Hungry(x,y))", "(Hulked(Professor,Student) & -AskedPermission(Professor))", "all x y.((Professor(x) & Student(y) & -AskedPermission(x,y)) -> Hugged(x,y))", "-(Professor(Professor) & Student(Student))", "all x.((Professor(x) & Student(y)) -> Hugged(x,y))", "the professor huggedthestudentwithoutQuittingPermission(Professor)", "all x y z.((Professor(x) & Student(y) & Professor(z) & -AsksPermission(x,y,z)) -> Hugged(x,y,z))", "(Grabbed(Professor,Student) & -Question(Professor))", "-AnswersPermission(Professor,Student)", "all x y.((Professor(x) & Student(y)) -> (Hulked(x,y) & -Question(x,y)))", "the professor hugged the student without asking permission.", "all x y.((Professor(x) & Student(y) & Hungry(x,y)) -> -AsksPermission(x,y))"]}
{"id": "enwn_validation_400", "nl": "It is not respectful to do things to people without their permission.", "fol": "", "prediction": ["all x y.((DoingThings(x) & Person(y) & -Permission(x,y)) -> -Respectful(x))", "all x.((DoingThings(x) & PeopleWithoutPermission(x)) -> -Respectful(x))", "all x y.((Does(x,y) & Person(y)) -> -Respectful(x))", "all x y.((Person(x) & Person(y) & DoseWithoutPermission(x,y)) -> -Respectful(x,y))", "(-RespectfulToDoThingsWithoutPermission(x))", "(RespectfulToDoThingsWithoutPermission(x) -> -RespectfulToPeople(x))", "all x.((DoingThingsWithoutPermission(x) & People(x)) -> -Respectful(x))", "all x y z.((Person(x) & Person(y) & Permission(z)) -> -Respectful(x,y,z))", "all x.((DoingThings(x) & People(x) & -Permission(x)) -> -Respectful(x))", "all x y.((DoesTo(x,y) & Person(y)) -> -Respectful(x,y))", "(DoingThingsWithoutPermission(x) -> -Respectful(x))", "all x.((DoesThings(x) & PeopleWithoutPermission(x)) -> -Respectful(x))", "all x y.((Person(x) & DoingThingsWithoutPermission(x,y)) -> -Respectful(x))", "-RespectfulToDoTreatWithoutPermission(x)", "-RespectfulToDoThingsWithoutPermission(-Person(Person))", "all x.(Respectful(x) -> DoingThingsWithoutPermission(x))"]}
{"id": "enwn_validation_401", "nl": "You should respect people.", "fol": "", "prediction": ["all x.(RespectPeople(x) -> RespectPeople(x))", "all x y.((Person(x) & Person(y)) -> Respects(x,y))", "all x.(RespectsPeople(x) -> RespectsPeople(x))", "all x.(RespectPeople(x) -> RespectPeople(x))", "(RespectPeople(x) & RespectPeople(x))", "respectspeople(x)", "all x.((Person(x) & Respects(x)) -> Respects(x))", "all x y.((Person(x) & Person(y)) -> Respects(x,y))", "all x.(RespectPeople(x) -> RespectsPeople(x))", "respectspeople(x)", "all x.((Person(x) & Respect(x)) -> Respect(x))", "all x.(RespectsPeople(x) -> RespectsPeople(x))", "exists x.(Person(x) & Respects(x))", "all x y.((Person(x) & Person(y)) -> Respects(x,y))", "exists x.(People(x) & Respect(x))", "(RespectPeople)"]}
{"id": "enwn_validation_402", "nl": "It was disrespectful of the professor to hug the student.", "fol": "", "prediction": ["all x y.((Professor(x) & Student(y)) -> DisrespectfulToHur(x,y))", "all x.((Professor(x) & Student(y)) -> DisrespectfulToHur(x,y))", "-(RespectfulOfProfessor(professor) & HugStudent(professor))", "it was disrespectful of professor to hug student.", "-RespectfulOfProfessorToHurkStudent(-)", "all x y.((Professor(x) & Student(y)) -> DisrespectfulToHur(x,y))", "(RespectfulOfProfessorToHurStudent(Professor,Student))", "all x.((Professor(x) & Student(y)) -> DisrespectfulToHur(x,y))", "the professor huddled student.", "all x y.((Professor(x) & Student(y) & Hug(x,y)) -> Disrespectful(x))", "all x y.((Professor(x) & Student(y)) -> DisrespectfulToHur(x,y))", "-RespectfulOfProfessorToHurStudent(Professor,Student)", "-(RespectfulOfProfessorToHur(Professor,Student))", "(DisrespectfulOfProfessorToHulkStudent(Professor))", "(RespectfulOfProfessorToHur(Professor,Student))", "all x.((Professor(x) & Student(x)) -> Disrespectful(x))"]}
{"id": "enwn_validation_403", "nl": "The professor should not have hugged the student.", "fol": "", "prediction": ["all x y.((Professor(x) & Student(y)) -> -Hungry(x,y))", "all x.((Professor(x) & Student(y)) -> -Hungry(x,y))", "the professor should not have hugged the student.", "all x y.((Professor(x) & Student(y)) -> -Haggered(x,y))", "(Hungry(Professor) -> -Hungry(Professor,Student))", "-HaggeredStudent(Professor)", "-Hungry(Professor)", "the professor should not have hugged the student.", "all x.((Professor(x) & Student(y)) -> -Haggered(x,y))", "-HaggeredStudent(professor)", "the professor should not have huggedthestudent.", "all x y.((Professor(x) & Student(y)) -> -Hungered(x,y))", "-HungredStudent(Professor)", "all x.((Professor(x) & Student(y)) -> -Hungered(x,y))", "(-Hungry(Professor))", "all x y.((Professor(x) & Student(y)) -> -Hagged(x,y))"]}
{"id": "enwn_validation_404", "nl": "Knowing the paper's authors does not reflect the paper's merit.", "fol": "", "prediction": ["all x y.((Paper(x) & Author(y)) -> -ReflectsMerit(x,y))", "all x.((KnowsAuthors(x) & -ReflectsMerit(x)) -> -ReflectsMerit(x))", "all x.((KnowsPaperAuthors(x) & -ReflectsMerit(x)) -> -ReflectsMerit(x))", "all x.((Paper(x) & KnowsAuthors(x)) -> -ReflectsMerit(x))", "(KnowsAuthors(paper) & -ReflectsMerit(paper))", "(knowingAuthors(paper) -> -ReflectsMerit(paper))", "all x y.((Paper(x) & Author(y)) -> -ReflectsMerit(x,y))", "all x y z.((Paper(x) & Author(y) & Author(z) & Knows(x,y,z)) -> -ReflectsMerit(x,y))", "all x.(KnowsAuthors(x) -> -ReflectsMerit(x))", "-ReflectsMerit(paper,knowingAuthors)", "all x.((KnowsAuthors(x) & Paper(x)) -> -ReflectsMerit(x,paper,paper))", "all x y.((Paper(x) & Author(y)) -> -ReflectsMerit(x,y))", "exists x.(KnowsAuthors(x) & -ReflectsMerit(x))", "all x y.((Paper(x) & Author(y) & Knows(x,y)) -> -ReflectsMerit(x,y))", "exists x.(Writer(x) & -ReflectsMerit(x))", "all x y.((Paper(x) & Author(y)) -> -ReflectsMerit(x,y))"]}
{"id": "enwn_validation_405", "nl": "You should score \npapers based on merit.", "fol": "", "prediction": ["all x.(ScorePaper(x) -> BasedOnMerit(x))", "all x.((Paper(x) & Merit(x)) -> Scores(x,y))", "all x y.((Paper(x) & Merit(y)) -> Scores(x,y))", "(ScorePapersBasedOnMean(PhD) & -ScorePapersBasedOnMean(PhD))", "all x.((Paper(x) & BasedOnMerit(x)) -> Scores(x,y))", "all x.(ScorePaper(x) -> BasedOnMerit(x))", "all x y.((Paper(x) & Merit(y)) -> ScoresBasedOn(x,y))", "(ScorePapersBasedOnMean(PhD) & -ScorePapersBasedOnMean(PhD))", "all x.(ScorePapersBasedOnMerit(x) -> ScorePapersBasedOnMerit(x))", "all x.((Paper(x) & Merit(x)) -> Scores(x))", "all x y.((Paper(x) & Merit(y)) -> Score(x,y))", "all x.(ScorePaper(x) -> BasedOnMean(x))", "exists x.(Paper(x) & ScoresBasedOnMean(x))", "all x y.((Paper(x) & Merit(y)) -> Scores(x,y))", "exists x.(Paper(x) & ScoresBasedOnMerit(x))", "all x y.((Paper(x) & Merit(y)) -> Score(x,y))"]}
{"id": "enwn_validation_406", "nl": "Andy gave a high score to the paper because he knew the authors.", "fol": "", "prediction": ["all x y.((Andy(x) & Paper(y) & KnowsAuthors(x,y)) -> HighScore(x,y))", "all x.((Andy(x) & Paper(y) & KnowsAuthors(x,y)) -> HighScore(x,y))", "all x y z.((Andy(x) & Paper(y) & Author(z)) -> (GaveHighScore(x,y,z) & Knows(x,y)))", "(HighScore(Andy) & KnowsAuthors(Andy))", "all x y.((Article(x) & Paper(y) & KnowsAuthors(x,y)) -> HighScore(x,y))", "Andy gave highScoreToPaper(Andy) -> (KnowsAuthors(Andy) & KnowsAuthors(Andy)))", "Andy gave highscore(Andy) -> (KnowsAuthors(Andy,x) & KnowsAuthors(Andy,x)))", "all x y.((Andy(x) & Paper(y) & KnowsAuthors(x,y)) -> HighScore(x,y))", "(HighScore(Andy) & KnowledgeOfAuthors(Andy,paper))", "all x y z.((Andy(x) & Paper(y) & Author(z)) -> HighScore(x,y,z))", "all x.((Andy(x) & Paper(y)) -> HighScore(x,y))", "all x y.((Addict(x) & Paper(y) & KnowsAuthors(x,y)) -> HighScore(x,y))", "(HighScore(Andy,paper) & KnowsAuthors(Andy,paper))", "(HighScore(Andy) & KnowsAuthors(Andy,paper))", "all x.((Andy(x) & Paper(y) & KnowsAuthors(x,y)) -> HighScore(x,y))", "(HighScore(Andy) -> KnowsAuthors(Andy,))"]}
{"id": "enwn_validation_407", "nl": "Giving a high score to a paper because you know the authors is wrong.", "fol": "", "prediction": ["all x y.((HighScore(x) & Paper(y) & KnowsAuthors(x,y)) -> Wrong(x))", "all x y z.((HighScore(x) & Paper(y) & Author(z) & Knows(x,z)) -> Wrong(x))", "all x y.((Paper(x) & Paper(y) & KnowsAuthors(x,y)) -> WrongScore(x,y))", "all x.((Paper(x) & KnowsAuthors(x)) -> WrongScore(x))", "all x y.((HighScore(x) & Paper(y) & KnowsAuthors(x,y)) -> Wrong(x))", "all x.((HighScore(x) & KnowsAuthors(x)) -> Wrong(x))", "all x y z.((HighScore(x) & Paper(y) & Author(z) & Knows(x,z)) -> Wrong(y))", "all x y.((Paper(x) & Paper(y) & KnowsAuthors(x,y)) -> IsWrong(x))", "all x y.((HighScore(x) & Paper(y) & KnowsAuthors(x,y)) -> Worst(x))", "all x.((Paper(x) & KnowsAuthors(x)) -> IsWrong(x))", "all x y z.((HighScore(x) & Paper(y) & Author(z) & Knows(y,z)) -> IsWrong(x))", "all x.((HighScore(x) & KnowsAuthors(x)) -> Wrong(x))", "exists x.(HighScore(x) & KnowsAuthors(x) & IsWrong(x))", "all x y z.((HighScore(x) & Paper(y) & Author(z) & Knows(x,y,z)) -> Wrong(y,z))", "exists x.(HighScore(x) & KnowsAuthors(x) & IsWrong(x))", "all x y.((HighScore(x) & Paper(y) & KnowsAuthors(x,y)) -> Wrong(x))"]}
{"id": "enwn_validation_408", "nl": "Andy should not have scored the paper based on how well he knew the authors.", "fol": "", "prediction": ["all x.((Andy(x) & WellKnowsAuthors(x)) -> -ScoredPaper(x))", "all x y.((Andy(x) & Paper(y) & WellKnowsAuthors(x,y)) -> -Scored(x,y))", "(-ScoredPaperBasedOnKnowledge(Andy))", "((Andy) & WellKnowsAuthors(Andy)) -> -ScoredPaper(Andy))", "all x y.((Andy(x) & Paper(y)) -> -ScoredBasedOnKnowledge(x,y))", "-(ScoredPaper(Andy) & WellKnowsAuthors(Andy)))", "Andy should not have scored the paper based on how well he knewauthors.", "all x y.((Article(x) & Paper(y) & WellKnowsAuthors(x,y)) -> -Scored(x,y))", "all x.((Andy(x) & WellKnowsAuthors(x)) -> -ScoredPaper(x))", "all x.((Andy(x) & WellKnowedAuthors(x)) -> -ScoredPaper(x,y))", "-(ScoredPaper(Andy) & WellKnowedAuthors(Andy)))", "(ScoredPaper(Andy) & -KnowsAuthors(Andy))", "((Andy) & WellKnowedAuthors(Andy,x)) -> -ScoredPaper(Andy,x))", "all x y.((Andy(x) & Paper(y) & WellKnowsAuthors(x,y)) -> -Scored(x,y))", "all x.((Andy(x) & KnowsAuthors(x)) -> -ScoredPaper(x,y))", "(ScoredPaper(Andy) & -KnewAuthors(Andy))"]}
{"id": "enwn_validation_409", "nl": "Throwing things out of frustration is an example of having a temper tantrum.", "fol": "", "prediction": ["all x.((ThrewsOutFrustration(x) & HasTemperament(x)) -> HasTemperament(x))", "all x.((TurnsOutFrustration(x) & HasTemperament(x)) -> HasTemperament(x))", "all x.(TurningOutFrustration(x) -> TemperamentTentrum(x))", "all x.(TurnsOutOfFrustration(x) -> TemperamentTanrum(x))", "all x y.((TurnsOutFrustration(x) & Things(y)) -> TemperamentTanrum(x))", "all x y.((Turning(x) & Frustration(y)) -> Temperament(x))", "all x.((ThrewsOutFrustration(x) & Frustration(x)) -> TemperamentTanrum(x))", "all x y.((TurnsOutOfFrustration(x) & Things(y)) -> TemperamentTanrum(x))", "(TurningOutFrustration(threwsout(t) & Frustration(t) & TempestTanrum(t))", "all x.(Turning(x) -> TemperamentTanrum(x))", "all x y.((Treatment(x) & Frustration(y) & ThrowsOut(x,y)) -> TempestTanrum(x))", "all x.((TurningOutFrustration(x) & Temperament(x)) -> HasTemper(x))", "all x.(ThrewsOutFrustration(x) -> TemperamentTanrum(x))", "all x y.((ThrowsOutOfFrustration(x) & Things(y)) -> TemperamentTanrum(x))", "all x.(TurningThingsOutOfFrustration(x) -> TemperamentTentrum(x))", "all x.((ThrewsOutFrustration(x) & HasTemperTanrum(x)) -> HasTemperTanrum(x))"]}
{"id": "enwn_validation_410", "nl": "People should not let their emotions get out of control.", "fol": "", "prediction": ["all x.((Person(x) & -LetsEmotionsGetOutOfControl(x)) -> -LetsEmotionsGetOutOfControl(x))", "all x.((Person(x) & -LetsEmotionsOutOfControl(x)) -> -LetsEmotionsGetOutOfControl(x))", "all x y.((Person(x) & Emotion(y)) -> -LetsOutOfControl(x,y))", "all x.(Person(x) -> -LetsEmotionsGetOutOfControl(x))", "-LetsEmotionsGetOutOfControl(Person)", "(all x.(Emotions(x) -> -LetOutOfControl(x)))", "all x.(People(x) -> -LetsEmotionsGetOutOfControl(x))", "all x y.((Person(x) & Emotion(y)) -> -LetsGetOutOfControl(x,y))", "all x.((Person(x) & -LetsEmotionsGetOutOfControl(x)) -> -LetsEmotionsGetOutOfControl(x))", "all x.(Person(x) -> -LetsEmotionsGetOutOfControl(x))", "all x y.((Person(x) & Emotion(y)) -> -LetsOutOfControl(x,y))", "all x.((Person(x) & -LetsEmotionsGetOutOfControl(x)) -> -LetsEmotionsGetOutOfControl(x))", "all x.(People(x) -> -LetsEmotionsGetOutOfControl(x))", "all x y.((Person(x) & Emotion(y)) -> -LetsGetOutOfControl(x,y))", "all x.(Person(x) -> -LetsEmotionsGetOutOfControl(x))", "all x y.((Person(x) & Emotion(y)) -> -LetsOutOfControl(x,y))"]}
{"id": "enwn_validation_411", "nl": "Having a temper tantrum in public means you are not in control of your emotions.", "fol": "", "prediction": ["all x.((TemperTanner(x) & Public(x)) -> -InControlOfEmotions(x))", "all x.(TemperTanner(x) -> -InControlOfEmotions(x))", "all x.((TemperTentrum(x) & Public(x)) -> -InControlOfEmotions(x))", "all x y.((Person(x) & TempestTentrum(y)) -> -InControlOfEmotions(x,y))", "all x.((PublicTentrum(x) & PublicTentrum(x)) -> -InControlOfEmotions(x))", "all x.((TemperTentrum(x) & InPublic(x)) -> -InControlOfEmotions(x))", "all x y.((PublicTentrum(x) & PublicTentrum(y)) -> -InControlOfEmotions(x,y))", "all x y.((Person(x) & Public(y) & HasTemperTrum(x,y)) -> -InControlOfEmotions(x,y))", "all x y.((TemperamentTentrum(x) & Public(y)) -> -InControlOfEmotions(x,y))", "all x.((TemperTanner(x) & Public(x)) -> -InControlOfEmotions(x))", "all x.(TemperTanner(x) -> -InControlOfEmotions(x))", "all x.(TemperTandemInPublic(x) -> -InControlOfEmotions(x))", "all x y.((PublicTension(x) & PublicTension(y)) -> -InControlOfEmotions(x,y))", "exists x.(TemperamentThur(x) & InPublic(x) & -InControlOfEmotions(x))", "all x.((TemperTanzrum(x) & Public(x)) -> -ControlsEmotions(x))", "all x.((PublicTension(x) & HasTemper(x)) -> -InControlOfEmotions(x))"]}
{"id": "enwn_validation_412", "nl": "Martha threw a chair out of frustration while she was at the DMV.", "fol": "", "prediction": ["all x y.((Martha(x) & DMV(y)) -> ThrewChairOutOfFrustration(x,y))", "(ThrewChairOutOfFrustration(Martha) & AtDMV(Martha))", "all x.((Martha(x) & DMV(x)) -> ThrewChairOutOfFrustration(x))", "-(MarthaThrewChair(Martha) & AtDMV(Martha)))", "all x y z.((Martha(x) & Chair(y) & DMV(z)) -> ThrewOutOfFrustration(x,y,z))", "((Martha(Martha) & DMV(Martha)) -> ThrewChairOutOfFrustration(Martha))", "Martha threwschair out of frustration while at DMV.", "all x y.((Mama(x) & DMV(y)) -> ThrewChairOutOfFrustration(x,y))", "(MamaThrewChairOutOfFrustration(Mama,DMV))", "(ThrewChairOutOfFrustration(Mary,DMV) & AtDMV(Mary,DMV))", "(ThrewChairOutOfFrustration(Martha,DMV))", "all x.((Mama(x) & AtDMV(x)) -> ThrewChairOutOfFrustration(x))", "all x.((Martha(x) & DMV(x)) -> ThrowsChairOutOfFrustration(x))", "all x y.((Martha(x) & DMV(y)) -> ThrewChairOutOfFrustration(x,y))", "(ThrewChairOutOfFrustrationAtDMV(Martha))", "Martha ThrewChairOutOfFrustrationAtDMV(Mary,MotorVehicle)"]}
{"id": "enwn_validation_413", "nl": "The DMV is a public location.", "fol": "", "prediction": ["all x.(DMV(x) -> PublicLocation(x))", "all x.(DMV(x) -> PublicLocation(x))", "all x y.((DMV(x) & PublicLocation(y)) -> PublicLocation(x))", "the DMV is a publiclocation.", "all x.((DMV(x) & PublicLocation(x)) -> PublicLocation(x))", "(PublicLocation(DMV)", "all x.(DMV(x) -> PublicLocation(x))", "(PublicLocation(DMV,DMV))", "all x y.((DMV(x) & PublicLocation(y)) -> PublicLocation(x,y))", "All x.((DMV(x) & PublicLocation(x)) -> PublicLocation(x))", "all x.(DMV(x) -> PublicLocation(x))", "All x.(DMVLocation(x) -> PublicLocation(x))", "(PublicLocation(DMV,DMV))", "all x.(DMV(x) -> PublicLocation(x))", "all x.(DMV(x) -> PublicLocation(x))", "All x.(DMV(x) -> PublicLocation(x))"]}
{"id": "enwn_validation_414", "nl": "People should not have temper tantrums in public.", "fol": "", "prediction": ["all x.((Person(x) & -TemperTentrum(x)) -> -PublicTentrum(x))", "all x.((Person(x) & -HasTemperatureTentrum(x)) -> -HasTemperatureTentrum(x))", "all x y.((Person(x) & Public(y)) -> -HasTemperatureTentrum(x,y))", "all x.(TemperTentrum(x) -> -HasInPublic(x))", "all x.(Person(x) -> -HasTemperatureTentrum(x))", "all x.((People(x) & -TemperTentrum(x)) -> -PublicTentrum(x))", "all x.((Person(x) & -TemperTentrum(x)) -> -PublicTentrum(x))", "(-TemperTentrumsInPublic(Person))", "all x y.((Person(x) & Public(y)) -> -HasTemperatureTentrum(x,y))", "all x y.((Person(x) & Public(y)) -> -TemperTentrum(x,y))", "all x.(PublicPerson(x) -> -HasTemperatureTentrum(x))", "all x.(Person(x) -> -HasTemperatureTentrum(x))", "all x y.((Person(x) & Public(y)) -> -HasTemperTandem(x,y))", "all x.(TemperTentrum(x) -> -Public(x))", "exists x.(Person(x) & -HasTemperatureTentrum(x))", "all x y.((Person(x) & Public(y)) -> -TemperTentrum(x,y))"]}
{"id": "enwn_validation_415", "nl": "People shouldn't throw things in public out of frustration.", "fol": "", "prediction": ["all x.((Person(x) & -ThrewsInPublicOutOfFrustration(x)) -> -ThrewsInPublicOutOfFrustration(x))", "all x y.((Person(x) & Public(y)) -> -ThrewsOutOfFrustration(x,y))", "all x.((People(x) & -ThrewInPublicOutOfFrustration(x)) -> -ThrewInPublicOutOfFrustration(x))", "all x.((Person(x) & -ThrewsInPublic(x)) -> -Frustration(x))", "all x.((People(x) & -ThrewsInPublicOutOfFrustration(x)) -> -ThrewsInPublicOutOfFrustration(x))", "all x.(TurnsInPublic(x) -> -Frustration(x))", "all x y.((Person(x) & Public(y)) -> -ThrewsOutOfFrustration(x,y))", "all x.((Person(x) & -ThrewsInPublicOutOfFrustration(x)) -> -ThrewsInPublicOutOfFrustration(x))", "all x y.((People(x) & Public(y)) -> -ThrewsOutOfFrustration(x,y))", "all x y.((Person(x) & Public(y)) -> -ThrewsInOutOfFrustration(x,y))", "(all x.(TrashInPublic(x) -> -Frustration(x)))", "all x.(Person(x) -> -ThrewsInPublicOutOfFrustration(x))", "all x y.((Person(x) & Public(y)) -> -Frustration(x,y))", "exists x.(Person(x) & -ThrewsInPublic(x))", "exists x.(Person(x) & -ThrowsInPublicOutOfFrustration(x))", "all x y.((Person(x) & Public(y)) -> -ThrewsOutOfFrustration(x,y))"]}
{"id": "enwn_validation_416", "nl": "Martha thew a chair out of frustration in public.", "fol": "", "prediction": ["all x y.((Martha(x) & Chair(y)) -> (FrustrationInPublic(x,y) & MarthaThew(x,y)))", "all x.((MarthaThew(x) & Chair(x)) -> OutOfFrustrationInPublic(x))", "Martha thewschairoutOfFrustrationInPublic(Martha,Martha,Public)", "(MamathewsChair(Martha) & OutOfFrustration(Martha))", "all x y.((Mamathew(x) & Chair(y)) -> (OutOfFrustration(x,y) & InPublic(x,y)))", "all x y z.((Mambeth(x) & Chair(y) & Public(z)) -> (Thew(x,y) & OutOfFrustration(x,z)))", "(MamathewThewChair(Mama) & OutOfFrustration(Mama))", "Martha ThewsChairOutOfFrustrationInPublic(Martha,Martha,Public)", "(Martha thewsChair(Martha,public) & OutOfFrustration(Martha,public))", "all x y.((Martha(x) & Chair(y)) -> (FrustrationInPublic(x) & MarthaThew(x,y)))", "(MamathewsChair(Mama,PublicFrustration))", "((MarthathewChair(Martha) & OutOfFrustration(Martha)) -> ThewOutOfPublic(Martha))", "Martha thewschairoutOfFrustrationInPublic(Martha,Martha,Public)", "Martha thewschairs out of frustration in public.", "all x.((MarthaThewChair(x) & OutOfFrustration(x)) -> Chair(x))", "all x.((Marthathew(x) & Chair(x)) -> OutOfFrustrationInPublic(x))"]}
{"id": "enwn_validation_417", "nl": "Martha should not have thrown the chair.", "fol": "", "prediction": ["all x.((Martha(x) & Chair(y)) -> -Threw(x,y))", "Martha should not have thrown thechair.", "-ThrewChair(Martha)", "Martha ne should have thrown thechair.", "-(Martha shouldThrewChair(Martha))", "Martha -ThrewChair(Martha))", "(Mama should notHaveThrewChair(Mama))", "-HasThrewChair(Martha)", "all x.((Martha(x) & Chair(y)) -> -Threw(x,y))", "Martha should not have thrown thechair.", "-ThrewChair(Martha)", "((Martha(Martha) & Chair(Martha)) -> -Threw(Martha))", "Martha ne should have thrown thechair.", "(-ThrewChair(Martha))", "Martha should not have thrown thechair.", "Martha should not have thrown thechair."]}
{"id": "enwn_validation_418", "nl": "Not helping someone in trouble is allowing a bad thing to happen to them.", "fol": "", "prediction": ["all x.((HelpingInTrouble(x) & AllowingBadThing(x)) -> AllowingBadThingToOccur(x))", "all x y.((Helping(x,y) & Person(y)) -> AllowsBadThingToOccur(x,y))", "all x.((Neighboring(x,y) & Person(y)) -> BadThingToOccur(x,y))", "all x y.((Helping(x,y) & Person(y) & InTrouble(x,y)) -> AllowsBadThingToOccur(x,y))", "all x y.((HelpsInTrouble(x) & Person(y)) -> AllowsBadThingToOccur(x,y))", "(AllowsBadThingToOccur(x) -> HelpsInTrouble(x))", "all x.((NeighboringInTrouble(x) & AllowingBadThingToOccur(x)) -> BadThing(x))", "all x.((HelpingInTrouble(x) & AllowingBadThingToOccur(x)) -> BadThing(x))", "all x y.((NecessitatingHelp(x,y) & Person(y) & InTrouble(y)) -> AllowsBadThingToOccur(x,y))", "all x.((Helping(x) & InTrouble(x)) -> AllowsBadThingToOccur(x))", "all x y z.((HelpingInTrouble(x) & Person(y) & BadThing(z)) -> AllowsToOccur(x,y,z))", "all x.((NegativeHelp(x) & PersonInTrouble(x)) -> BadThingToOccur(x))", "all x y.((Helping(x,y) & Person(y) & InTrouble(x,y)) -> AllowsBadThing(x,y))", "all x y.((HelpsInTrouble(x) & Person(y)) -> AllowsBadThingToOccur(x,y))", "all x.(NecessitatingHelpingInTrouble(x) -> AllowsBadThingToOccur(x))", "all x.((HelpingInTrouble(x) & AllowingBadThing(x)) -> BadThing(x))"]}
{"id": "enwn_validation_419", "nl": "Allowing a bad thing to happen to someone is considered harming them.", "fol": "", "prediction": ["all x y.((BadThing(x) & Person(y)) -> Harms(x,y))", "all x.((AllowsBadThing(x) & HappensTo(x,y)) -> Harms(x))", "all x.((BadThing(x) & HappensToPerson(x)) -> Harms(x))", "all x.((AlertsBadThing(x) & HappensTo(x,y)) -> Harms(x,y))", "all x.((AllowsBadThing(x) & HappensToPerson(x)) -> Harms(x))", "all x y.((BadThing(x) & Person(y)) -> Harms(x,y))", "all x y.((BadThing(x) & Person(y) & HappensTo(x,y)) -> Harms(x,y))", "all x y.((AlertsBadThing(x) & Person(y) & HappensTo(x,y)) -> Harms(x,y))", "all x y z.((BadThing(x) & Person(y) & BadThing(z) & HappensTo(y,z)) -> Harms(x,y))", "all x.((BadThing(x) & HappensToPerson(x)) -> Harms(x))", "all x.((AllowsBadThing(x) & HappensTo(x,y)) -> Harms(x,y))", "exists x.(BadThing(x) & HappensTo(x,y))", "all x y.((BadThing(x) & Person(y)) -> Harms(x,y))", "all x.(HasBadThingToOccur(x) -> Harms(x))", "all x y.((AlertsBadThing(x,y) & Person(y)) -> Harms(x,y))", "all x y.((BadThing(x) & BadThing(y)) -> Harming(x,y))"]}
{"id": "enwn_validation_420", "nl": "You should not do something that harms someone else.", "fol": "", "prediction": ["all x.((Does(x) & HarmsAnother(x)) -> -Do(x))", "all x y.((Does(x,y) & Person(y)) -> -Harms(x,y))", "all x.((Does(x,y) & Person(y)) -> -Harms(x,y))", "all x.((Do(x) & -HarmsAnother(x)) -> -Do(x))", "-(DoesWhatHarmsAnother(x))", "(DoesNotHarmAnother(x) -> -DoesNotHarmAnother(x))", "all x y.((Does(x,y) & Person(y)) -> -Harms(x,y))", "all x y.((Doing(x) & Person(y)) -> -Harms(x,y))", "all x.((Does(x,y) & Person(y)) -> -Harms(x,y))", "-(DoesWhatHarmsAnother(x))", "all x.((Doing(x) & HarmsAnother(x)) -> -Do(x))", "(-HasHazard(e))", "all x.((Does(x) & HarmsAnother(x)) -> -Do(x))", "all x.((DoesWhatHarmsAnother(x)) -> -Do(x,y))", "all x y.((Does(x,y) & Person(y)) -> -Harms(x,y))", "-(DoesWhatHarmsAnother(x))"]}
{"id": "enwn_validation_421", "nl": "Joey cried out for help when he was being bullied.", "fol": "", "prediction": ["all x.((Joey(x) & Bullied(x)) -> CriesOutForHelp(x))", "all x y.((Joey(x) & Bullied(y)) -> CriesOutForHelp(x,y))", "all x.((Joey(x) & Bullied(x)) -> CriesOutForHelp(x))", "all x y z.((Joey(x) & Bullied(y) & CrysOutForHelp(x,y)) -> CriesOutForHelp(x,z))", "-(Blooded(Joey) & CriesOutForHelp(Joey,Joey))", "(Blooded(Joey) | CryedOutForHelp(Joey)))", "all x y.((Joey(x) & Bullied(y)) -> CriedOutForHelp(x,y))", "(all x.(Bullying(x) -> CriesOutForHelp(x)))", "all x.((Joey(x) & Bullied(x)) -> CriedOutForHelp(x))", "(all x.(Blooded(x) -> CriesOutForHelp(x)))", "all x y.((Joey(x) & Bullied(y)) -> CriesOutForHelp(x,y))", "(Blooded(Joey) | CriedOutForHelp(Joey)))", "all x.(Bullyed(x) -> CriesOutForHelp(x))", "all x.((Joey(x) & Bullied(x)) -> CriesOutForHelp(x))", "all x y.((Joey(x) & Bullied(y)) -> CriedOutForHelp(x,y))", "all x.((Joey(x) & Bullied(x)) -> CriedOutForHelp(x))"]}
{"id": "enwn_validation_422", "nl": "Jan heard Joey but didn't do anything.", "fol": "", "prediction": ["(HeardJoey(Jan) & -DoedWhat(Jan))", "all x.(Jan(x) -> (HeardJoey(x) & -DoedWhat(x)))", "Jan heard Joey, but he didn't do anything.", "all x.((Jan(x) & Joey(y)) -> (Heard(x,y) & -Doed(x,y)))", "(HeardJan(Jan) & DidNothing(Jan))", "(Heads(Jan,Joey) & -Does(Jan,Joey))", "Jan heard Joey, but didn't do anything.", "-(HeardJoey(Jan) & DidNothing(Jan))", "(HeardJoey(Jan) & -Does(Jan))", "Jan heard Joey but didn't do anything.", "(heardJan(Jan) & Joey(Jan) & -Does(Jan))", "all x.(Jan(x) -> (HeardJoey(x) & -DoesWhat(x)))", "-(HeardJoey(Jan) & DidNothing(Jan))", "Jan heard Joey, & -didthing(Jan)", "-(HeardJoey(Jan) & -DoedWhat(Jan))", "(HeardJoey(Jan) & -Does(Jan))"]}
{"id": "enwn_validation_423", "nl": "Not helping someone in trouble is considered harming them.", "fol": "", "prediction": ["all x.((Helping(x) & PersonInTrouble(x)) -> Harming(x))", "all x.((HelpingInTrouble(x) & -HelpingInTrouble(x)) -> Harming(x))", "all x.((Helping(x) & InTrouble(x)) -> Harming(x))", "all x.((Neighboring(x) & PersonInTrouble(x)) -> Harms(x))", "all x y.((Helping(x,y) & Person(y)) -> Harms(x,y))", "all x.((HelpsInTrouble(x) & -HelpsInTrouble(x)) -> HarmsInTrouble(x))", "all x y.((HelpsInTrouble(x) & Person(y) & InTrouble(x,y)) -> Harms(x,y))", "all x y.((Helping(x) & Person(y) & InTrouble(y)) -> Harms(x,y))", "(all x.((Helping(x) & Trouble(x)) -> Harming(x)))", "all x y.((Helping(x,y) & Person(y) & InTrouble(y)) -> Harms(x,y))", "all x.((Helping(x) & Trouble(x)) -> Harming(x))", "all x.((Neighboring(x) & PersonInTrouble(x)) -> Harming(x))", "all x y.((Helping(x) & Person(y) & Trouble(y)) -> Harms(x,y))", "all x.(HasHazard(x) -> HelpsInTrouble(x))", "all x y.((HelpsInTrouble(x) & Person(y)) -> Harms(x,y))", "all x.((HelpingInTrouble(x) & -HelpingInTrouble(x)) -> Harming(x))"]}
{"id": "enwn_validation_424", "nl": "You should help people in trouble.", "fol": "", "prediction": ["all x.(HelpsInTrouble(x) -> HelpsInTrouble(x))", "all x y.((Person(x) & Trouble(y)) -> Helps(x,y))", "all x y.((Helps(x,y) & Person(y)) -> InTrouble(x,y))", "all x.(HelpsPeopleInTrouble(x) -> HelpsInTrouble(x))", "all x y.((HelpsInTrouble(x) & Person(y)) -> HelpsInTrouble(x,y))", "all x.(HelpsInTrouble(x) -> HelpsInTrouble(x))", "all x.((HelpsPeopleInTrouble(x)) -> HelpsPeopleInTrouble(x))", "all x y.((Person(x) & Trouble(y)) -> Helps(x,y))", "all x y z.((Person(x) & Trouble(y) & Person(z)) -> Helps(x,y,z))", "All x.((HelpsInTrouble(x)) -> HelpsInTrouble(x))", "all x.(HelpPeopleInTrouble(x) -> Help(x))", "all x.(HelpInTrouble(x) -> HelpInTrouble(x))", "exists x.(HelpPerson(x) & InTrouble(x))", "All x y.((HelpsInTrouble(x) & Person(y)) -> HelpsInTrouble(x,y))", "all x y.((Person(x) & Trouble(y)) -> Helps(x,y))", "exists x.(HelpPeopleInTrouble(x) & HelpPeopleInTrouble(x))"]}
{"id": "enwn_validation_425", "nl": "Jan heard Joey crying for help but didn't do anything.", "fol": "", "prediction": ["all x.((Jan(x) & Joey(y)) -> CriesForHelp(x,y))", "(HeardJoeyCryingForHelp(Jan) & -Does(Jan))", "all x y.((Jan(x) & Joey(y)) -> (HeardCrying(x,y) & -Doed(x,y)))", "Jan heard Joey CryingForHelp(Jan) & -Does(Jan))", "all x.(Jan(x) -> (HeardJoeyCrying(x) & -DoesWhat(x)))", "(HeardJoeyCrying(Jan) & -DoesWhat(Jan))", "-(HeardJoeyCryingForHelp(Jan) & -DoedWhat(Jan))", "Jan heard Joey cry for help, but he didn't do anything.", "Jan heard JoeyCryingForHelp(Jan,Jan) & -DoesWhat(Jan,Jan))", "Jan heard Joey CriesForHelp(Jan) & -Does(Jan))", "all x y.((Jan(x) & Joey(y)) -> CriesForHelp(x,y))", "all x.((Jan(x) & JoeyCryingForHelp(x)) -> -Does(x))", "(HearedByJoeyCryingForHelp(Jan) & -DoesWhat(Jan))", "-(HeardJoeyCryingForHelp(Jan) & -DoesWhat(Jan))", "(HeardJoeyCryingForHelp(Jan,Jan) & -Does(Jan,Jan))", "(HeardJoeyCryingForHelp(Jan) & -DoesWhat(Jan))"]}
{"id": "enwn_validation_426", "nl": "Jan should have helped Joey.", "fol": "", "prediction": ["all x.((Jan(x) & Joey(y)) -> ShouldHaveHelped(x,y))", "Jan should have helped Joey.", "(HelpedJan(Jan,Joey) -> HelpedJoey(Jan,Joey))", "all x.(Jan(x) -> ShouldHaveHelpedJoey(x))", "(HasJanHelpedJoey(Jan,Joey) -> ShouldHaveHelped(Joey,Joey))", "-shouldHadHelpedJan(Jan)", "-(JanHasHelpedJoey(Jan))", "all x.((Jan(x) & Joey(y)) -> ShouldHelped(x,y))", "(HelpedByJan(Jan,Joey) -> Helped(Jan,Joey))", "Jan should have helped Joey.", "-JanHasHelpedJoey.", "-shouldAimedToJan(Jan)", "Jan should have helped Joey.", "Jan should have helped Joey.", "Jan should have helped Joey.", "Jan."]}
{"id": "enwn_validation_427", "nl": "Mark took his kids out of school to help him beg other people for money.", "fol": "", "prediction": ["all x y.((Mark(x) & Kid(y)) -> TakesOutOfSchoolToHelpBegForMoney(x,y))", "all x y z.((Mark(x) & Kid(y) & Person(z)) -> (TakesOutOfSchool(x,y,z) & HelpsBegForMoney(x,y,z)))", "all x y.((Mark(x) & Kid(y)) -> (TakesOutOfSchool(x,y) & HelpsBegForMoney(x,y)))", "all x.(Mark(x) -> (TakesKidsOutOfSchool(x) & HelpsBegOthersForMoney(x)))", "Mark took his kids out of school to help him beg for money.", "Mark took kids out of school to help him beg for money.", "(all x.(Mark(x) -> TakesOutKids(x)))", "(Mark took his kids out of school to help him beg for money)", "all x y z.((Mark(x) & Kid(y) & Person(z)) -> TakesOutOfSchoolToHelpBegForMoney(x,y,z))", "all x.(Mark(x) -> (TakesKidsOutOfSchool(x) & HelpsBegOtherPeopleForMoney(x)))", "(Mark took kids out of school to help him beg for money)", "Mark took kids out of school to help him beg for money.", "all x y.((Mark(x) & Kid(y)) -> TakenOutOfSchoolToHelpBegForMoney(x,y))", "Mark took his kids out of school to help him beg others for money.", "(Mark took his kids out of school to help him beg formoney(Mark,Mom))", "Mark took his kids out of school to help him beg for money."]}
{"id": "enwn_validation_428", "nl": "Asking people for money is a way to make money.", "fol": "", "prediction": ["all x.(AsksForMoney(x) -> MakesMoney(x))", "all x y.((Person(x) & Person(y)) -> AsksForMoney(x,y))", "all x.(AsksForMoney(x) -> MakesMoney(x))", "all x.((People(x) & AskForMoney(x)) -> MakesMoney(x))", "all x y.((People(x) & Person(y)) -> AsksForMoney(x,y))", "all x y.((Person(x) & Person(y)) -> AsksForMoney(x,y))", "all x.((Person(x) & AsksForMoney(x)) -> MakesMoney(x))", "all x.(AsksForMoney(x) -> MakesMoney(x))", "all x y.((People(x) & AskForMoney(x,y)) -> MakesMoney(x,y))", "all x y z.((Person(x) & Money(y) & Money(z)) -> Makes(x,y,z))", "exists x.(AskForMoney(x) & MakesMoney(x))", "exists x.(Person(x) & AsksForMoney(x))", "all x y.((Person(x) & Person(y)) -> AsksForMoney(x,y))", "all x.(AsksForMoney(x) -> MakesMoney(x))", "exists x.(PeopleAskForMoney(x) & MakeMoney(x))", "all x y.((Person(x) & Person(y)) -> AsksForMoney(x,y))"]}
{"id": "enwn_validation_429", "nl": "Removing your kids from school is detrimental to them.", "fol": "", "prediction": ["all x.(RemovesKidsFromSchool(x) -> DetrimentalToKids(x))", "all x y.((Kid(x) & School(y)) -> DetrimentalTo(x,y))", "all x.((Kid(x) & RemovesFromSchool(x)) -> DetrimentalToKids(x))", "all x.(RemovesKidsFromSchool(x) -> DelirableToKids(x))", "all x.((Kid(x) & RemovingFromSchool(x)) -> DetrimentalToKids(x))", "all x y.((Kid(x) & School(y)) -> DetrimentalTo(x,y))", "all x.(RemovesKids(x) -> DetrimentalToSchool(x))", "all x y z.((Kid(x) & School(y) & School(z)) -> DetrimentalTo(x,y,z))", "(DeafToKids(removesFromSchool(removesFromSchool))", "all x y.((Child(x) & School(y) & Removing(x,y)) -> DetrimentalTo(x,y))", "all x y.((Kid(x) & School(y)) -> Delayed(x,y))", "all x.((Child(x) & RemovedFromSchool(x)) -> DelayedTo(x,y))", "all x.(RemovingKidsFromSchool(x) -> DetrimentalToKids(x))", "all x.(RemovesKidsFromSchool(x) -> DetrimentalToKids(x))", "all x y.((Child(x) & RemovingFromSchool(x,y)) -> DetrimentalTo(x,y))", "all x y.((Kid(x) & School(y)) -> DetrimentalTo(x,y))"]}
{"id": "enwn_validation_430", "nl": "To exploit someone is the action or fact of treating someone unfairly in order to benefit from their work.", "fol": "", "prediction": ["all x.((TreatsUnfairly(x) & BenefitsFromWork(x)) -> Exploits(x))", "all x y.((Exploit(x) & Person(y)) -> (TreatsUnfairly(x,y) & BenefitsFromWork(x,y)))", "all x.((Treatment(x) & Unfairly(x) & BenefitsFromWork(x)) -> Exploit(x))", "all x y z.((Exploit(x) & Person(y) & Work(z)) -> (TreatsUnfairly(x,y) & BenefitsFromWork(x,z)))", "all x y.((Treatment(x,y) & Person(y)) -> Exploitation(x,y))", "all x y.((Exploit(x) & Person(y)) -> (TreatsUnfairly(x,y) & BenefitsFromWork(x,y)))", "all x.((TreatsUnfairly(x) & BenefitsFromWork(x)) -> Exploit(x))", "all x.((Treatment(x) & UnfairTreatment(x) & BenefitsFromWork(x)) -> Exploit(x))", "all x y z.((Exploit(x) & Person(y) & Work(z)) -> (TreatsUnfairly(x,y,z) & BenefitsFromWork(x,y,z)))", "all x y.((Person(x) & Person(y) & UnfairTreatment(x,y)) -> Exploit(x,y))", "all x.(Exploit(x) -> (TreatsUnfairly(x) & BenefitsFromWork(x)))", "(TraitUnfairly(x) -> Exploiting(x))", "all x.((TraitingUnfairly(x) & BenefitsFromWork(x)) -> Exploiting(x))", "all x y.((Exploit(x) & Person(y)) -> (TreatUnfairly(y,x) & BenefitFromWork(y,x)))", "all x.(Exploit(x) -> (TreatsUnfairly(x) & BenefitsFromWork(x)))", "all x.((TreatsUnfairly(x) & BenefitsFromWork(x)) -> Exploits(x))"]}
{"id": "enwn_validation_431", "nl": "You should treat people fairly.", "fol": "", "prediction": ["all x.(TreatPeopleFairly(x) -> FairTranscription(x))", "all x.((Person(x) & FairTranquility(x)) -> Treats(x,y))", "all x y.((Person(x) & Person(y)) -> FairTranquility(x,y))", "all x.((Person(x) & FairTranquilTreatment(x)) -> FairTranquilTreatment(x))", "all x y.((Person(x) & Person(y)) -> FairTranquilTreatment(x,y))", "all x.(TreatPeopleFairly(x) -> FairTreatment(x))", "(TraitPeopleFairly(x) -> FairTrait(x))", "all x.((Person(x) & FairTreatment(x)) -> FairTreatment(x))", "all x y.((Person(x) & Person(y)) -> FairTreatment(x,y))", "all x.(TraitPeopleFairly(x) -> FairTrait(x))", "all x.(TreatPeopleFairly(x) -> TreatPeopleFairly(x))", "exists x.(Person(x) & FairTranquility(x))", "all x y.((Person(x) & Person(y)) -> FairTranquility(x,y))", "all x y.((Person(x) & Person(y) & FairTranquility(x,y)) -> Treats(x,y))", "exists x.(Person(x) & FairTreatment(x))", "all x y.((Person(x) & Person(y)) -> FairTreatment(x,y))"]}
{"id": "enwn_validation_432", "nl": "Mark took his kids out of school to help him make money.", "fol": "", "prediction": ["all x y.((Mark(x) & Kid(y)) -> TakenOutOfSchoolToHelpMakeMoney(x,y))", "Mark took his kids out of school to help him make money.", "Mark took kids out of school to help him make money.", "all x.(Mark(x) -> (TakesKidsOutOfSchool(x) & HelpsMakeMoney(x)))", "all x y z.((Mark(x) & Kid(y) & Kid(z)) -> TakesOutOfSchoolToMakeMoney(x,y,z))", "(Mark took his kids out of school to help him make money)", "all x y.((Mark(x) & Kid(y)) -> TakesOutOfSchoolToMakeMoney(x,y))", "all x y.((Mark(x) & Kids(y) & OutOfSchool(x,y)) -> HelpsMakeMoney(x,y))", "all x.(Mark(x) -> TakesKidsOutOfSchool(x))", "Mark took his kids out of school to help him make money.", "(Meaning(Mark) & KidsOutOfSchool(Mark))", "Mark took kids out of school to help him make money.", "Mark took out of school kids to make money.", "(Mark took his kids out of school to help him make money)", "(Mark took kids out of school to help him make money)", "Mark took his kids out of school to help him make money."]}
{"id": "enwn_validation_433", "nl": "Mark is using his children to get money at their expense.", "fol": "", "prediction": ["all x y.((Mark(x) & Child(y)) -> UsesToGetMoneyAtExpense(x,y))", "(UsesChildrenToGetMoney(Mark) & AtExpense(Mark))", "(Uses(Mark,Children) & GetsMoneyAtExpense(Mark,Children))", "all x y z.((Mark(x) & Child(y) & Child(z)) -> UsesToGetMoneyAtExpense(x,y,z))", "Mark uses his children to get money at expense.", "Mark is using his children to get money at expense.", "all x.((Mark(x) & Children(x)) -> UsesToGetMoney(x,y))", "all x y.((Mark(x) & Child(y)) -> UsesToGetMoney(x,y))", "all x.(Mark(x) -> UsesChildrenToGetMoneyAtExpense(x))", "(UsesChildrenToGetMortgage(Mark) & AtExpense(Mark))", "Mark uses children to get money at expense.", "Mark is using his children to get money at their expense.", "Mark uses his children to get money at expense.", "all x y.((Mark(x) & Child(y)) -> UsesToGetMoneyAtExpense(x,y))", "(Uses(Mark,Children) & GetsMoneyAtExpense(Mark,Children))", "all x y.((Mark(x) & Child(y)) -> UsesToGiveMoney(x,y))"]}
{"id": "enwn_validation_434", "nl": "Mark is exploiting his children.", "fol": "", "prediction": ["all x.((Mark(x) & Children(y)) -> Exploiting(x,y))", "Mark exploits his children.", "(ExploitingChildren(Mark)", "Mark ExploitingChildren(Mark)", "all x y.((Mark(x) & Child(y)) -> Exploiting(x,y))", "all x.((Mark(x) & ExploitingChildren(x)) -> ExploitingChildren(x))", "all x.((Mark(x) & Children(y)) -> Exploiting(x,y))", "Mark exploits his children.", "(ExploitingChildren(Mark)", "Mark is exploiting his children.", "all x y.((Mark(x) & Child(y)) -> Exploiting(x,y))", "Mark ExploitingChildren.", "Mark exploits his children.", "(ExploitingChildren(Mark)", "Mark exploits children.", "(ExploitingChildren(Mark)"]}
{"id": "enwn_validation_435", "nl": "You should not exploit people.", "fol": "", "prediction": ["all x.((Person(x) & -Exploit(x)) -> -Exploit(x))", "all x.((People(x) & -Exploit(x)) -> -Exploit(x))", "-ExploitPeople(x)", "all x.((Person(x) & -Exploit(x)) -> -Exploit(x))", "you should not exploit people.", "all x.((YouBreathe(x) & -ExploitPeople(x)) -> -ExploitPeople(x))", "-ExploitPeople(x)", "all x.((People(x) & -Exploit(x)) -> -Exploit(x))", "all x y.((Person(x) & Person(y)) -> -Exploit(x,y))", "all x.(ExploitPeople(x) -> -ExploitPeople(x))", "all x.((Person(x) & -Exploit(x)) -> -Exploit(x))", "-ExploitPeople(x)", "-(ExploitPeople(x))", "(-ExploitPeople(you))", "all x.((Person(x) & -Exploit(x)) -> -Exploit(x))", "(-ExploitPerson(x))"]}
{"id": "enwn_validation_436", "nl": "Mark should not be exploiting his children.", "fol": "", "prediction": ["all x.((Mark(x) & -ExploitingChildren(x)) -> -ExploitingChildren(x))", "Mark should not be exploiting his children.", "all x.((Mark(x) & Children(y)) -> -Exploiting(x,y))", "-(ExploitingChildren(Mark) & -ExploitingChildren(Mark))", "(-ExploitingChildren(Mark))", "Mark shouldn't be exploiting his children.", "Mark should not be exploiting his children.", "all x.((Mark(x) & -ExploitingChildren(x)) -> -ExploitingChildren(x))", "(-ExploitingChildren(Mark))", "-(ExploitingChildren(Mark) & -ExploitingChildren(Mark))", "all x.((Mark(x) & Children(x)) -> -Exploiting(x,y))", "Mark should not be exploiting his children.", "Mark should not be exploiting children.", "all x.((Mark(x) & -ExploitingChildren(x)) -> -ExploitingChildren(x))", "(-ExploitsChildren(Mark))", "Mark should not be exploiting his children."]}
{"id": "enwn_validation_437", "nl": "Deciding not to hire someone on the basis of their traits is one kind of discrimination.", "fol": "", "prediction": ["all x.((DecidedNotToHire(x) & BasedOnTraits(x)) -> Discrimination(x))", "all x y.((DecidedNotToHire(x,y) & Person(y) & BasedOnTraits(x,y)) -> Discrimination(x))", "all x.((Decide(x) & -HuntsOnTreatments(x)) -> Discrimination(x))", "all x y.((Decide(x) & Person(y) & -HiresOnTreatments(x,y)) -> Discrimination(x))", "all x.((DecidingNotToHire(x) & BasedOnTraits(x)) -> Discrimination(x))", "(all x.((DecidedNotToHIRE(x) & Person(x)) -> Discrimination(x)))", "all x.((DecidedNotToHIRE(x) & -BasedOnTraits(x)) -> Discrimination(x))", "all x y.((Deciding(x) & Hires(x,y) & Person(y)) -> Discrimination(x,y))", "all x.((Discrimination(x) & -HiresOnBaseOfTraits(x)) -> Discrimination(x))", "exists x.(Discrimination(x) & DecidingNotToHire(x,y) & Person(y) & BasedOnTraits(x,y))", "all x y z.((DecidedNotToHire(x,y) & Person(z) & Traits(z) & -Traits(x,z)) -> Discrimination(x))", "all x y.((DecidingNotToHire(x,y) & Person(y) & BasedOnTraits(y,x)) -> Discrimination(x))", "all x.((DecidingNotToHIRE(x) & -BasedOnTraits(x)) -> Discrimination(x))", "all x y.((DecidedNotToHIRE(x,y) & Person(y)) -> Discrimination(x))", "all x.((Decide(x) & -HiresOnTreatments(x)) -> Discrimination(x))", "all x y.((DecidedNotToHire(x,y) & Person(y) & BasedOnTraits(y,x)) -> Discrimination(x))"]}
{"id": "enwn_validation_438", "nl": "It is unjust to discriminate on the basis of pregnancy.", "fol": "", "prediction": ["all x.((Discrimination(x) & Pregnancy(x)) -> Unjust(x))", "all x y.((Discrimination(x) & Pregnancy(y)) -> Unjust(x,y))", "all x.(DiscriminationOnPregnancy(x) -> Unjust(x))", "(DiscriminationOnPregnancy(x) -> Unjust(x))", "all x.((DiscriminateOnPregnancyBase(x)) -> Unjust(x))", "(UnjustToDiscriminateOnPregnancyBase(x))", "all x.((Discrimination(x) & Pregnancy(x)) -> Unjust(x))", "all x.((Discrimination(x) & Pregnancies(x)) -> Unjust(x))", "-(DiscriminationOnPregnancyBase(x) & Unjust(x))", "all x y.((Discrimination(x) & Pregnancy(y)) -> Unjust(x,y))", "all x.(DiscriminationOnPregnancy(x) -> Unjust(x))", "exists x.(Discrimination(x) & Discrimination(x) & Pregnancy(x))", "(DiscriminationOnPregnancy(x) -> Unjust(x))", "all x y.((DiscriminateOnPregnancyBase(x,y)) -> Unjust(x))", "all x.(Discrimination(x) -> Unjust(x))", "all x.((Discrimination(x) & Pregnancy(x)) -> Unjust(x))"]}
{"id": "enwn_validation_439", "nl": "You should treat people justly.\n", "fol": "", "prediction": ["all x.(TreatPeopleJustly(x) -> TreatPeopleJustly(x))", "all x.((Person(x) & TreatsJustly(x)) -> TreatsJustly(x))", "all x y.((Person(x) & Person(y)) -> TreatJustly(x,y))", "all x.(TreatPeopleJustly(x) -> TreatPeopleJustly(x))", "(TraitPeopleJustly(x) -> TreatPeopleJustly(x))", "all x y.((Person(x) & Person(y)) -> TreatsJustly(x,y))", "all x.((Person(x) & TreatsJustly(x)) -> TreatsJustly(x))", "all x y.((Person(x) & Person(y)) -> TreatJustly(x,y))", "All x.(TreatsPeopleJustly(x) -> TreatsPeopleJustly(x))", "all x.(TreatPeopleJustly(x) -> TreatPeopleJustly(x))", "all x.(TraitPeopleJustly(x) -> TreatPeopleJustly(x))", "all x.((Person(x) & TreatsJustly(x)) -> TreatsJustly(x))", "all x y.((Person(x) & Person(y) & TreatsJustly(x,y)) -> TreatsJustly(x,y))", "all x y.((TreatPeople(x) & Person(y)) -> Justly(x))", "all x y.((Person(x) & Person(y)) -> TreatsJustly(x,y))", "exists x.(Person(x) & TreatsJustly(x))"]}
{"id": "enwn_validation_440", "nl": "Victor did not hire Maddie because she was going on maternity leave soon.", "fol": "", "prediction": ["all x.((Victor(x) & Maddie(x) & GoingOnMaternityLeave(x)) -> -HasHired(x,Maddie))", "(-HiresMaddie(Victor) & MaddieGoesOnMaternityLeave(Victor))", "all x y.((Victor(x) & Maddie(y) & GoingOnMaternityLeave(y,x)) -> -HasHired(x,y))", "(-HuntsMaddie(Victor) & MaddieGoesOnMaternityLeave(Victor))", "-HiredMaddie(Victor) & MaddieGoesOnMaternityLeave(Victor,MaternityLeave))", "All x.((Victoria(x) & Maddie(x) & GoingOnMaternityLeave(x)) -> -HasHired(x,Maddie))", "all x y.((Victoria(x) & Maddie(y) & GoingOnMaternityLeave(y,x)) -> -Holds(x,y))", "-(Hires(Victor,Maddie) & GoingOnMaternityLeave(Maddie))", "((Victor(Victor) & Maddie(Mammal)) -> -Hunts(Victor,Mammal))", "all x y.((Victor(x) & Maddie(y) & GoingOnMaternityLeave(y,x)) -> -Hired(x,y))", "all x.((Victor(x) & Maddie(x) & GoingOnMaternityLeave(x)) -> -Hired(x,Maddie))", "(-HuntsMaddie(Victor,MaternityLeave))", "(-HiresMaddie(Victor) & MaddieWasOnMaternityLeave(Victor))", "-(HiresMaddie(Victor) & MaddieWasOnMaternityLeave(Victor)))", "\u2013(Victor(Victor) & Maddie(Mammal) & GoingOnMammalLeave(Mammal))", "(-HuntsMammal(Victor,MammalLeave))"]}
{"id": "enwn_validation_441", "nl": "If someone is going on maternity leave then they are pregnant.", "fol": "", "prediction": ["all x.((Person(x) & GoingOnMaternityLeave(x)) -> Pregnant(x))", "all x.((GoesOnMmaternityLeave(x) & Pregnant(x)) -> GoingOnMaternityLeave(x))", "all x.((MaternityLeave(x) & GoingOn(x)) -> Pregnant(x))", "all x.(MaternityLeave(x) -> Pregnant(x))", "all x.((Person(x) & GoingOnMmaternityLeave(x)) -> Pregnant(x))", "all x.((GoingOnMmaternityLeave(x)) -> Pregnant(x))", "all x y.((MaternityLeave(x) & Person(y) & GoingOn(y,x)) -> Pregnant(y))", "all x.(MaternityLeave(x) -> Pregnant(x))", "all x y.((Person(x) & GoingOnMmaternityLeave(x,y)) -> Pregnant(x))", "all x.((MaternityLeave(x) & GoingOn(x,y)) -> Pregnant(x))", "exists x.(MothershipLeave(x) & GoingOn(x,y) & Pregnant(x))", "all x.(GoingOnMaternityLeave(x) -> Pregnant(x))", "all x.((Person(x) & GoingOnMaternityLeave(x)) -> Pregnant(x))", "all x.(MaternityLeave(x) -> Pregnant(x))", "all x.(MaternityLeave(x) -> Pregnant(x))", "exists x.(MaternityLeave(x) & GoingOn(x,y))"]}
{"id": "enwn_validation_442", "nl": "You shouldn't discriminate on the basis of pregnancy.", "fol": "", "prediction": ["all x.((Pregnancy(x) & -Discriminate(x)) -> -Discriminate(x))", "all x.((Paternity(x) & -Discriminate(x)) -> -Discriminate(x))", "-(DiscriminationOnPregnancy(x) | DiscriminationOnPregnancy(x)))", "-DiscriminateOnPregnancyBase(x)", "all x.(DiscriminateOnPregnancy(x) -> -DiscriminateOnPregnancy(x))", "all x.((Pregnancy(x) & -Discriminate(x)) -> -Discriminate(x))", "all x.((Pregnancies(x) & -Discriminate(x)) -> -Discriminate(x))", "all x y.((Pregnancy(x) & Pregnancy(y)) -> -Discriminate(x,y))", "-exists x.(Discrimination(x) & Pregnancy(x))", "all x.(DiscriminateOnPregnancy(x) -> -exists y.(Pregnancy(y) & DiscriminateOn(x,y)))", "all x.(DiscriminationOnPregnancy(x) -> -DiscriminateOnPregnancy(x))", "(-DiscriminateOnPregnancy(x))", "-(DiscriminationOnByPregnancy(x))", "all x.((Paternity(x) & -Discriminate(x)) -> -Discriminate(x))", "(-DiscriminationOnPregnancy(x))", "all x.((Pregnancy(x) & -Discriminate(x)) -> -Discriminate(x))"]}
{"id": "enwn_validation_443", "nl": "You shouldn't base hiring decisions off of whether or not someone is pregnant.", "fol": "", "prediction": ["all x.((HostingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BasesOn(x,y))", "all x.((HuntingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BasesOn(x,y))", "all x y.((HuntingDecision(x) & Person(y)) -> -(Pregnant(y) | -Pregnant(y))))", "-(BaseHiringDecision(x) & (Pregnant(x) | -Pregnant(x))))", "(-(Pregnant(x) | Pregnant(x))) -> -BaseHiringDecisionsOn(x,y))", "(all x.((Patient(x) & -Patient(x)) -> -BaseHiringDecisionsOn(x,Patient)))", "-(HuntingDecision(x) & (Pregnant(x) | -Pregnant(x))))", "all x y.((HostingDecision(x) & Person(y)) -> -(Pretty(y) | Pregnant(y))))", "all x.((HostingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BasesOn(x,y))", "all x.((HuntingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BasesOn(x,Host,Host,Host))", "all x.((HuntingDecision(x) & -(Patient(x) | -Patient(x))) -> -BasesOn(x,Patient))", "all x.((HostingDecision(x) & -(Patient(x) | -Patient(x))) -> -BasesOn(x,Patient(x)))", "-((HuntingDecision(x) & (Pregnant(x) | -Pregnant(x))))", "all x y.((HuntingDecision(x) & Person(y) & -Pregnant(y)) -> -BasesOn(x,y))", "(-exists x.(Patient(x) & BasesHiringDecision(x)))", "all x.((HosingDecision(x) & -(Pregnant(x) | Pregnant(x)))) -> -BasesOn(x,y))"]}
{"id": "enwn_validation_444", "nl": "Victor decided not to hire Maddie based on her pregnancy.", "fol": "", "prediction": ["(-HuntsMaddie(Victor) & BasedOnPregnancy(Victor))", "all x.((Victor(x) & Maddie(x)) -> -HasHunt(x,Maddie))", "-(Hires(Victor,Maddie) & BasedOnPregnancy(Victor,Maddie))", "(-HiresMaddie(Victor) & BasedOnPregnancy(Victor))", "(-HasHire(Victor,Maddie) & BasedOnPregnancy(Victor,Maddie))", "all x y.((Victor(x) & Maddie(y)) -> -HasHunted(x,y))", "((Victor(Victor) & Maddie(Maddie)) -> -Has(Victor,Maddie))", "all x.((Victor(x) & Maddie(x) & Pregnancy(x)) -> -Hunts(x,Maddie))", "-(HuntsMaddie(Victor) & BasedOnPregnancy(Victor,Maddie))", "-HiresMaddieBasedOnPregnancy(Victor,Maddie)", "(all x.((Victor(x) & Maddie(x)) -> -Holds(x,Maddie)))", "((Victor(Victor) & Maddie(Maddie)) -> -Hunts(Victor,Maddie))", "All x.((Victoria(x) & Maddie(y) & Pregnancy(z)) -> -Hunts(x,y,z))", "(HearseMaddie(Victor,Paternity) -> -HoldsMaddie(Victor,Paternity))", "-(HiresMaddie(Victor) & BasedOnPregnancy(Victor,Maddie))", "all x y.((Victor(x) & Maddie(y)) -> -Hunts(x,y))"]}
{"id": "enwn_validation_445", "nl": "Victor should not have based his decision off of Maddie's pregnancy.", "fol": "", "prediction": ["all x.((Victor(x) & Maddie(x)) -> -BasedDecisionOff(x,Maddie))", "all x y.((Victor(x) & Maddie(y)) -> -BasedDecisionOff(x,y))", "-(Victor(Victor) & Maddie(Maddie))", "(-BasedDecisionOffMaddie(Victor))", "Maddie's pregnancy was not a factor in Victor's decision.", "-(BasedDecisionOffMaddie(Victor) & Maddie(Maddie)))", "all x.((Victoria(x) & Maddie(x)) -> -BasedDecisionOff(x,Maddie,Paternity))", "-((Victor(Victor) & Maddie(Maddie)) -> -BasedDecisionOff(Victor,Maddie))", "all x.((Victor(x) & Maddie(x)) -> -BasedDecisionOff(x,Maddie,Paternity))", "((Victor(Victor) & Maddie(Maddie)) -> -BasedDecisionOff(Victor,Maddie))", "All x.(Victor(x) -> -BasedDecisionOffMaddie(x))", "(-BasedDecisionOnMaddie(Victor,Maddie))", "all x y.((Victoria(x) & Maddie(y)) -> -BasedDecisionOff(x,y))", "-(VictoriaBoardedDecisionOffMaddie(Victoria) & Maddie(Maddie))", "(all x.((Victor(x) & Maddie(x)) -> -BasedDecisionOn(x,Maddie,Paternity)))", "all x y.((Victor(x) & Maddie(y)) -> -BasedDecisionOff(x,y))"]}
{"id": "enwn_validation_446", "nl": "If you're rude to people who hold a certain view, it means you don't respect that view.", "fol": "", "prediction": ["all x.((Rust(x) & HoldsSpecificView(x)) -> -RespectsSpecificView(x))", "all x y.((Rust(x) & Person(y) & HoldsSpecificView(y,x)) -> -RespectsSpecificView(x,y))", "all x.((RuleToPeople(x) & HoldsSpecificView(x)) -> -RespectsSpecificView(x))", "all x.(Rust(x) -> -RespectsView(x))", "all x y.((Rule(x) & Person(y) & HoldsSpecificView(y,x)) -> -RespectsSpecificView(x,y))", "all x.(Rust(x) -> (RespectsView(x) & HoldsView(x)))", "(RainToPeople(r) & HoldsSpecificView(r) & -RespectsSpecificView(r))", "all x y z.((Rust(x) & Person(y) & View(z) & Holds(y,z)) -> -Respects(x,y,z))", "all x.(RainToPerson(x) -> -RespectsView(x))", "all x y.((Rust(x) & Person(y) & HoldsSpecificView(y,x)) -> -RespectsSpecificView(x,y))", "all x.((Rust(x) & HoldsSpecificView(x)) -> -RespectsSpecificView(x))", "all x y.((Rain(x) & Person(y) & HoldsSpecificView(x,y)) -> -RespectsView(x,y))", "all x.(Rust(x) -> (HoldsSpecificView(x) & -RespectsSpecificView(x)))", "all x.(RecklessToPeople(x) -> -RespectsView(x))", "all x y.((Relax(x) & People(y) & HoldsSpecificView(x,y)) -> -RespectsView(x,y))", "all x.(RainToPerson(x) -> -RespectsView(x))"]}
{"id": "enwn_validation_447", "nl": "Religion is a kind of personal preference.", "fol": "", "prediction": ["all x.(Religion(x) -> PersonalPreference(x))", "all x.(Religion(x) -> PersonalPreferred(x))", "all x y.((Religion(x) & PersonalPreference(y)) -> PersonalPreference(x,y))", "(PersonalPreference(religion,religion))", "all x.(Religion(x) -> PersonalPreference(x))", "all x y.((Religion(x) & PersonalPreferred(y)) -> PersonalPreferred(x,y))", "(PersonalPreference(religion,religion))", "all x.(Religion(x) -> PersonalPreferred(x))", "all x.(Religious(x) -> PersonalPreference(x))", "all x y.((Religion(x) & PersonalPreference(y)) -> PersonalPreference(x))", "all x.(Religion(x) -> PersonalPreference(x))", "all x.(Religion(x) -> PersonalPrating(x))", "all x.(Religion(x) -> PersonalPreference(x))", "exists x.(Religious(x) & PersonalPreferred(x))", "all x.(Religion(x) -> PersonalPreference(x))", "exists x.(Religion(x) & PersonalPreferred(x))"]}
{"id": "enwn_validation_448", "nl": "You should be tolerant.", "fol": "", "prediction": ["all x.(Tolerant(x) -> -Tolerant(x))", "all x.((Tolerant(x) & Tolerant(x)) -> -Tolerant(x))", "all x.(Tolerant(x) -> Tolerant(x))", "-Tolerant(x)", "all x.((Tolerant(x) & Tolerant(x)) -> Tolerant(x))", "all x.(Tolerant(x) -> -Tolerant(x))", "all x y.((Tolerant(x) & Person(y)) -> Tolerant(x,y))", "-Tolerant(x)", "All x.((Tolerant(x) & -Tolerant(x)) -> -Tolerant(x))", "all x.(Tolerant(x) -> Tolerant(x))", "All x.((Tolerant(x)) -> Tolerant(x))", "(Tolerant.", "all x.(Tol\u00e9rance(x) -> Tolerant(x))", "all x.(Tolerant(x) -> -Tolerant(x))", "all x.(Tol\u00e9rance(x) -> ShouldBe(x))", "All x.(Tolerant(x) -> -Tolerant(x))"]}
{"id": "enwn_validation_449", "nl": "Respecting other people's preferences is a form of tolerance.", "fol": "", "prediction": ["all x.(RespectsOtherPeoplePreferences(x) -> Tolerance(x))", "all x y.((Person(x) & Person(y)) -> RespectsPositions(x,y))", "all x.((RespectsOtherPeoplePreferences(x) & Tolerance(x)) -> Tolerance(x))", "all x y.((RespectsPositives(x,y) & Person(y)) -> Tolerance(x))", "all x.(RespectingOtherPeoplePreferences(x) -> Tolerance(x))", "(RespectingOtherPeoplePreferences(x) -> Tolerance(x))", "all x y.((Person(x) & Person(y)) -> RespectsPreferences(x,y))", "all x y.((Respects(x,y) & Person(y)) -> Tolerance(x))", "all x y z.((Person(x) & Person(y) & Preference(z)) -> Respects(x,y,z))", "all x.(RespectsOtherPeoplePreferences(x) -> Tolerance(x))", "all x.((RespectsOtherPeoplePreferences(x) & Tolerance(x)) -> Tolerance(x))", "all x.(RespectsOthersPreferences(x) -> Tolerance(x))", "all x.((RespectsPositives(x) & OtherPeople(x)) -> Tolerance(x))", "all x y.((Person(x) & Person(y)) -> RespectsPositives(x,y))", "all x.(RespectingOtherPeoplePoses(x) -> Tolerance(x))", "all x.(RespectingOtherPeoplePreferences(x) -> Tolerance(x))"]}
{"id": "enwn_validation_450", "nl": "Eugene is rude to people who do not share his religion.", "fol": "", "prediction": ["all x.((Eugene(x) & People(x) & -ShareReligion(x)) -> Rust(x))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(x,y)) -> Rust(x))", "all x.((Eugene(x) & -ShareReligion(x)) -> Rust(x))", "Eugene is rudeToPeople(e) & -ShareReligion(e))", "Eugene is rudeToPeopleWhoDoesNotShareReligion(eugene,e) & -ShareReligion(eugene,e))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(x,y)) -> Rust(x,y))", "all x.((Eugene(x) & People(x) & -ShareReligion(x)) -> Rust(x))", "all x.(RuleTo(x,y) -> (Eugene(x) & People(y) & -ShareReligion(x,y)))", "(RainfulToPeople(Eugene,Person) & -ShareReligion(Eugene,Person))", "Eugene is rude to people who do not share his religion.", "Eugene is rudeToPeople(e) & -ShareReligion(e))", "(RainfulToPeople(Eugene,nonshareReligion))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(y)) -> Rust(x,y))", "(RuleToPeople(eugene,nonshareReligion))", "all x.((Eugene(x) & Person(x) & -ShareReligion(x)) -> Rust(x))", "all x y.((Eugene(x) & People(y) & -ShareReligion(x,y)) -> Rust(x,y))"]}
{"id": "enwn_validation_451", "nl": "If you're rude to people because of the religion they hold, it means you don't respect their religion.", "fol": "", "prediction": ["all x.((Rule(x) & HoldsReligion(x)) -> -RespectsReligion(x))", "all x y.((Rule(x) & Person(y) & HoldsReligion(x,y)) -> -RespectsReligion(x,y))", "all x.((Rust(x) & PeopleHoldReligion(x)) -> -RespectsReligion(x))", "all x y.((Responsible(x) & Person(y) & HoldsReligion(x,y)) -> -RespectsReligion(x,y))", "all x y.((RuleToPeople(x) & Religion(y) & Holds(x,y)) -> -RespectsReligion(x,y))", "all x y.((Rain(x) & Person(y) & HoldsReligion(x,y)) -> -RespectsReligion(x,y))", "all x.((RuleToPeople(x) & HoldsReligion(x)) -> -RespectsReligion(x))", "all x.(Rust(x) -> (RespectsReligion(x) & PeopleHoldReligion(x)))", "all x.((Rain(x) & HoldsReligion(x)) -> -RespectsReligion(x))", "all x.(RuleToPeople(x) -> -RespectsReligion(x))", "(all x.(Rusty(x) -> PeopleHoldReligion(x)))", "all x y.((Responsible(x) & People(y) & HoldsReligion(x,y)) -> -RespectsReligion(x,y))", "all x.(RainToPeople(x) -> (-RespectsReligion(x)))", "all x y.((RuleToPeople(x) & Religion(y) & Holds(x,y)) -> -RespectsReligion(x,y))", "all x.(Rust(x) -> (RespectsReligiousReligion(x) & PeopleHoldReligion(x)))", "all x.((Reckless(x) & PeopleHoldReligion(x)) -> -RespectReligion(x))"]}
{"id": "enwn_validation_452", "nl": "You should respect other people's preferences.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y)) -> RespectsPositives(x,y))", "all x.(RespectsPositives(x) -> RespectsPositives(x))", "all x.((Person(x) & RespectsPositives(x)) -> RespectsPositives(x))", "all x y.((Person(x) & Person(y)) -> Respects(x,y))", "all x.(RespectsPositives(x) -> People(x))", "all x y z.((Person(x) & Person(y) & Preference(z)) -> Respects(x,y,z))", "(RespectsPositives(you,otherPeople))", "(RespectPositives(you,otherPeople))", "all x.(RespectPositives(x) -> Person(x))", "respectspreferences(x)", "all x.((Person(x) & Respects(x,y)) -> Preferences(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsPositions(x,y))", "all x y.((People(x) & Person(y)) -> RespectsPositives(x,y))", "exists x.(Person(x) & RespectsPositives(x))", "exists x.(PreferredPerson(x) & RespectsPositives(x))", "all x y.((Person(x) & Person(y)) -> Respects(x,y))"]}
{"id": "enwn_validation_453", "nl": "You should respect other people's religious preferences.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y)) -> RespectsReligiousPreferences(x,y))", "all x.(RespectReligiousPreferences(x) -> RespectReligiousPreferences(x))", "all x.(RespectsReligiousPreferences(x) -> RespectsReligiousPreferences(x))", "(RespectReligiousPreferences(x) & RespectReligiousPreferences(x))", "all x y.((Person(x) & Person(y)) -> RespectsReligiousPoses(x,y))", "all x y z.((Person(x) & ReligiousPath(y) & Person(z) & Respects(x,y,z)) -> Respects(x,y,z))", "all x.(RespectReligiousPoetry(x) -> RequiresReligiousPoetry(x))", "all x.((Person(x) & ReligiousPaths(x)) -> Respects(x,y))", "all x y.((Person(x) & ReligiousPath(y)) -> Respect(x,y))", "(RespectsReligiousPreferences(you,others))", "respectsreligiousPreferences(x)", "all x.(RespectsReligiousPreferencesOthers(x) -> RequiresReligiousPreferences(x))", "exists x.(RespectReligiousPreferences(x) & RequiresReligiousPreferences(x))", "exists x.(Person(x) & RespectReligiousPositives(x))", "all x y.((Person(x) & Person(y)) -> RespectsReligiousPreferences(x,y))", "all x y.((Person(x) & ReligiousPreference(y)) -> Respect(x,y))"]}
{"id": "enwn_validation_454", "nl": "You should not be rude to people because of the religion they hold.", "fol": "", "prediction": ["all x.((People(x) & Religion(x)) -> -Rusty(x))", "all x y.((Religion(x) & Person(y)) -> -Rusty(x,y))", "all x.((Person(x) & HoldsReligion(x)) -> -Rusty(x))", "all x y.((Person(x) & Religion(y)) -> -Rusty(x,y))", "all x.((Religious(x) & Person(x)) -> -Rusty(x))", "all x y.((Religious(x) & Person(y)) -> -Rusty(x,y))", "all x y.((People(x) & Religion(y) & Holds(x,y)) -> -Rust(x,y))", "-RustyToPeople(x) -> -Religious(x))", "-(RustyToPeople(x) & HoldsReligion(x)))", "all x.((People(x) & HoldsReligion(x)) -> -Rusty(x))", "all x.(RuleToPeople(x) -> -HoldsReligion(x))", "all x y.((Religion(x) & Person(y) & Holds(x,y)) -> -Rust(x,y))", "all x.(Religious(x) -> -RustyToPeople(x))", "(-RustyToPeople(x) & Religion(x))", "-(RuleToPeople(x) & HoldsReligion(x))", "all x y.((Person(x) & Religion(y)) -> -Rusty(x,y))"]}
{"id": "enwn_validation_455", "nl": "Eugene should not be rude to people who do not share his religion.", "fol": "", "prediction": ["all x.((Eugene(x) & -ShareReligion(x)) -> -Rusty(x))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(y)) -> -Rusty(x,y))", "Eugene should not beRuleToPeople(e) & -ShareReligion(e))", "Eugene ne should be rudeToPeopleWhoDoesNotShareReligion(n))", "all x.((Eugene(x) & People(x) & -ShareReligion(x)) -> -Rusty(x))", "all x.((Eugene(x) & -ShareReligion(x)) -> -RustyTo(x,y))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(x,y)) -> -Rusty(x,y))", "-(RuleToPeople(eugene,eugene) & -ShareReligion(eugene,eugene))", "(-RuleToPeople(Eugene,Religion) & -ShareReligion(Eugene,Religion))", "(-RuleToPeople(Eugene,Religion))", "Eugene -RuleToPeople(Eugene,nonshareReligion)", "Eugene should not be rudeToPeople(e) & DoesNotShareReligion(e))", "all x.((Eugene(x) & Person(x) & -ShareReligion(x)) -> -Rusty(x))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(y)) -> -Rusty(x,y))", "all x y.((Eugene(x) & People(y) & -ShareReligion(x,y)) -> -Rusty(x,y))", "all x.((Eugene(x) & People(x) & -ShareReligion(x)) -> -Rule(x))"]}
{"id": "enwn_validation_456", "nl": "Intruding on people is disrespecting their privacy.", "fol": "", "prediction": ["all x.(IntrudingOnPeople(x) -> DisrespectsPrivacy(x))", "all x y.((IntrudingOn(x) & Person(y)) -> DisrespectsPrivacy(x,y))", "all x y.((Intruding(x) & Person(y)) -> DisrespectsPrivacy(x,y))", "all x.(IntrudingOnPeople(x) -> DisrespectsPrivacy(x))", "all x y.((Person(x) & Intruder(y)) -> DisrespectsPrivacy(x,y))", "all x y z.((IntrudingOn(x) & Person(y) & Privacy(z)) -> Disrespects(x,y,z))", "all x.((IntrudingOnPeople(x) & DisrespectsPrivacy(x)) -> DisrespectsPrivacy(x))", "all x.(IntrudingOnPerson(x) -> DisrespectsPrivacy(x))", "all x y.((IntrudingOn(x) & Person(y)) -> DisrespectsPrivacy(x,y))", "all x.(IntrudingOnPeople(x) -> DisrespectsPrivacy(x))", "all x y.((Intruder(x) & Person(y)) -> DisrespectsPrivacy(x,y))", "all x y.((Person(x) & Intruder(y)) -> DisrespectsPrivacy(x,y))", "all x y.((Person(x) & Intruder(x,y)) -> DisrespectsPrivacy(x,y))", "all x.(Intruding(x) -> DisrespectsPrivacy(x))", "all x.((IntrudingOnPeople(x) & DisrespectsPrivacy(x)) -> IntrudingOnPeople(x))", "all x.(IntrudingOnPeople(x) -> DisrespectsPrivacy(x))"]}
{"id": "enwn_validation_457", "nl": "You should respect people's privacy.", "fol": "", "prediction": ["all x.(RespectsPrivacy(x) -> People(x))", "all x.((Person(x) & RespectsPrivacy(x)) -> RespectsPrivacy(x))", "all x y.((Person(x) & Privacy(y)) -> Respects(x,y))", "all x.(RespectsPrivacy(x) -> People(x))", "all x.(RespectPrivacy(x) -> Person(x))", "all x.((Person(x) & Privacy(x)) -> Respects(x,y))", "(RespectsPrivacy(you) & People(you))", "all x y.((Person(x) & Person(y)) -> RespectsPrivacy(x,y))", "all x.((People(x) & Privacy(x)) -> Respects(x,y))", "exists x y.(Person(x) & Privacy(y) & Respect(x,y))", "exists x y.(Person(x) & Person(y) & RespectsPrivacy(x,y))", "respectspeoplesPrivacy.", "all x y.((Person(x) & Privacy(y)) -> Respects(x,y))", "respects privacy of people.", "all x.(RespectsPrivacy(x) -> Person(x))", "all x.(RespectPrivacy(x) -> People(x))"]}
{"id": "enwn_validation_458", "nl": "Knocking on someone's door when they do not wish to be disturbed is intrusive.", "fol": "", "prediction": ["all x y.((KnocksOnDoor(x) & Person(y) & -Disturbed(y)) -> Intrusive(x))", "all x.((KnocksOnDoor(x) & -Disturbed(x)) -> Intrusive(x))", "all x y.((Person(x) & Door(y) & -Disturbed(x)) -> Intrusive(x))", "all x y.((KnockingOnDoor(x) & Person(y) & -WorriedToBeDisturbed(y)) -> Intrusive(x))", "all x y z.((KnockingOnDoor(x) & Person(y) & -Disturbed(y) & -Disturbed(y)) -> Intrusive(x))", "all x.((KnockingOnDoor(x) & -Disturbed(x)) -> Intrusive(x))", "all x y.((Door(x) & Door(y) & -Disturbed(y)) -> Intrusive(x))", "all x y z.((KnockingOnDoor(x) & Person(y) & -WorriedToBeDisturbed(y)) -> Intrusive(x))", "all x.((Person(x) & -Disturbed(x)) -> Intrusive(x))", "all x.((KnockingOnDoor(x) & -WorriedToBeDisturbed(x)) -> Intrusive(x))", "all x y.((KnocksOnDoor(x,y) & -Disturbed(y)) -> Intrusive(x))", "all x.((KnocksOnDoor(x) & -Disturbed(x)) -> Intrusive(x))", "(Intriguing) -> KnockingOnDoor(x))", "all x y.((Person(x) & Door(y) & -WorriedToBeDisturbed(x,y)) -> Intrusive(x))", "all x.((KnockingOnDoor(x) & -WorriedToBeDisturbed(x)) -> Intrusive(x))", "all x.((KnocksOnDoor(x) & -Disturbance(x)) -> Intrusive(x))"]}
{"id": "enwn_validation_459", "nl": "Sandra constantly ignores \"No Solicitation\" signs and knocks on people's doors.", "fol": "", "prediction": ["all x.((Sandra(x) & IgnoresNoSolicitation(x)) -> KnocksOnDoors(x))", "all x y.((Sandra(x) & NoSolicitation(y)) -> (Ignores(x,y) & KnocksOnDoors(x)))", "(IgnoresNoSolicitationSigns(Sandra) & KnocksOnPeopleDoors(Sandra))", "Sandra ignores \"NoSolicitation\" signs and knocks on people's doors.", "all x y z.((Sandra(x) & \"NoSolicitation(y) & Sign(z)) -> (Ignores(x,z) & KnocksOnDoors(x)))", "all x.(Sandra(x) -> (IgnoresNoSolicitation(x) & KnocksOnPeopleDoors(x)))", "(all x.(Sandra(x) -> IgnoresNoSolicitationSigns(x)) & knocksOnPeopleDoors(x))", "all x y.((Sandra(x) & NoSolicitation(y)) -> (Ignores(x,y) & KnocksOnDoors(x,y)))", "(IgnoresNoSolicitationSigns(Sandra) & KnocksOnDoors(Sandra))", "All x y.((Sandra(x) & \"NoSolicitation(y)\") -> (Ignores(x,y) & KnocksOnDoors(x,y)))", "all x.((Sandra(x) & NoSolicitation(x)) -> (Ignores(x,y) & KnocksOnDoors(x,z)))", "Sandra ignores \"NoSolicitation\" signs and knocks on people's doors.", "(all x.(Sandra(x) -> (IgnoresNoSolicitation(x) & KnocksOnPeopleDoors(x))))", "all x.(Sandra(x) -> (IgnoresNoSolicitation(x) & KnocksOnDoors(x)))", "all x.(Sandra(x) -> (IgnoresNoSolicitationSigns(x) & KnocksOnPeopleDoors(x)))", "(all x.(Sandra(x) -> IgnoresNoSolicitationSigns(x)) & knocksOnDoors(x))"]}
{"id": "enwn_validation_460", "nl": "You shouldn't intrude on people.", "fol": "", "prediction": ["all x.(IntrudeOnPeople(x) -> -IntrudeOnPeople(x))", "all x.((IntrudeOnPeople(x)) -> -IntrudeOnPeople(x))", "all x.((Person(x) & -Intrude(x)) -> -Intrude(x))", "-IntrudeOnPeople(x)", "all x y.((Person(x) & Person(y)) -> -Intrude(x,y))", "all x.(IntrudeOnPeople(x) -> -IntrudeOnPeople(x))", "all x y.((IntrudeOn(x) & Person(y)) -> -IntrudeOn(x,y))", "-IntrudeOnPeople(x)", "all x.((IntrudeOnPeople(x)) -> -IntrudeOnPeople(x))", "all x.(IntrudeOnPeople(x) -> -IntrudeOnPeople(x))", "(-IntrudeOnPeople(x))", "all x y.((Person(x) & Intruder(y)) -> -Intrude(x,y))", "exists x.(Intruder(x) & -IntrudeOn(x))", "-IntrudeOnPeople.", "all x.(IntrudeOnPeople(x) -> -IntrudeOnPeople(x))", "exists x.(Intruder(x) & People(x))"]}
{"id": "enwn_validation_461", "nl": "Sandra intrudes on people.", "fol": "", "prediction": ["all x y.((Sandra(x) & Person(y)) -> IntrudesOn(x,y))", "all x.(Sandra(x) -> IntrudesOnPeople(x))", "all x.(SandraIntrudesOnPeople(x) -> IntrudesOnPeople(x))", "all x y.((Sandra(x) & Person(y)) -> IntrudesOn(x,y))", "(IntrudesOnPeople(Sandra,People))", "all x y z.((Sandra(x) & Person(y) & Person(z)) -> IntrudesOn(x,y,z))", "Sandra intrudes on people.", "exists x.(Sandra(x) & IntrudesOnPeople(x))", "(IntrudesOnPeople(Sandra,People))", "all x y.((Sandra(x) & Person(y)) -> IntrudesOn(x,y))", "(IntrudesOn(Sandra,People))", "Sandra intrudes on people.", "(IntrudesOnPeople(Sandra,Person,Person))", "exists x.(Sandy(x) & IntrudesOnPeople(x))", "all x y.((Sandra(x) & Person(y)) -> Intrudes(x,y))", "exists x.(SarahIntrudesOn(x) & People(x))"]}
{"id": "enwn_validation_462", "nl": "Sandra should not intrude on people.", "fol": "", "prediction": ["all x.(Sandra(x) -> -IntrudeOnPeople(x))", "all x y.((Sandra(x) & Person(y)) -> -Intrude(x,y))", "all x.((Sandra(x) & -IntrudeOnPeople(x)) -> -IntrudeOnPeople(x))", "all x.(Sandra(x) -> -IntrudeOnPeople(x))", "-(Sandra shouldIntrudeOnPeople(Sandra,People))", "(-IntrudeOnPeople(Sandra,Sandra))", "-(Sandra shouldIntrudeOnPeople(Sandra) & -IntrudeOnPeople(Sandra))", "all x.((Sandra(x) & Person(y)) -> -Intrude(x,y))", "all x y.((Sandra(x) & Person(y)) -> -Intrude(x,y))", "-IntrudeOnPeople(Sandra,Sandra)", "all x.(Sandra(x) -> -IntrudeOnPeople(x))", "all x y.((Santa(x) & Person(y)) -> -Intrude(x,y))", "(-IntrudeOnPeople(Sandra))", "All x.(Sandra(x) -> -IntrudeOnPeople(x))", "(-IntrudeOnPeople(Sandra,People))", "all x y.((Sandy(x) & Person(y)) -> -Intrude(x,y))"]}
{"id": "enwn_validation_463", "nl": "Martin kicked his dog to make it stop barking.", "fol": "", "prediction": ["all x y.((Dog(x) & Martin(y)) -> Kept(y,x))", "(Kicks(Martin,Dog) & StopsBarking(Martin,Dog))", "Martin kicked his dog to stop barking.", "all x y.((Dog(x) & Martin(y)) -> KickedToStopBarking(y,x))", "all x.((Dog(x) & KickedByMartin(x)) -> StopBarking(x))", "Martin kicked his dog to make it stop barking.", "all x y z.((Dog(x) & Martin(y) & Dog(z)) -> Kept(y,z))", "(KicksDog(Martin) & StopsBarking(Martin))", "-(MartinKickedDog(Martin) & Barks(Martin))", "all x.((Dog(x) & Martin(x)) -> KickedToStopBarking(x))", "-Kicked(Martin,Dog)", "(Kicked(Martin,Dog) & StopBarking(Martin,Dog))", "all x y.((Dog(x) & Martin(y)) -> Kicked(y,x))", "Martin kicked his dog to stop barking.", "Martin kicked his dog to make it stop barking.", "Martin kicked his dog to stop barking."]}
{"id": "enwn_validation_464", "nl": "Kicking an animal hurts it.", "fol": "", "prediction": ["all x y.((Animal(x) & Kicking(x,y)) -> Hurts(x,y))", "all x.(Kicking(x) -> HurtsAnimal(x))", "all x y.((Animal(x) & Kicking(x,y)) -> Hurts(x,y))", "all x y.((Animal(x) & Animal(y)) -> Hurts(x,y))", "all x.(Kicking(x) -> HurtsAnimal(x))", "all x y z.((Animal(x) & Animal(y) & Kicking(x,y)) -> Hurts(x,y))", "all x.(Kicking(x) -> IllnessesAnimal(x))", "all x.((Animal(x) & Kicks(x)) -> Hurts(x))", "all x y z.((Animal(x) & Animal(y) & Kicking(x,y) & Animal(z)) -> Hurts(x,z))", "all x y.((Animal(x) & Kicking(x,y)) -> Hurts(y))", "all x y.((Animal(x) & Animal(y)) -> KicksIllness(x,y))", "all x.(KicksAnimal(x) -> HurtsAnimal(x))", "All x.((Animal(x) & Kicks(x)) -> Hurts(x))", "all x y.((Animal(x) & Kicking(x,y)) -> Illnesses(x,y))", "all x.(Kicking(x) -> HurtsAnimal(x))", "All x.(Kicking(x) -> IllnessesAnimal(x))"]}
{"id": "enwn_validation_465", "nl": "Hurting people or animals is considered abuse.", "fol": "", "prediction": ["all x.(Hurting(x) -> Abuse(x))", "all x.((Hurting(x) & (Person(x) | Animal(x))) -> Abuse(x))", "all x y.((Hurting(x) & (Person(y) | Animal(y))) -> Abuse(x))", "all x.(HurtsPeopleOrAnimals(x) -> Abuse(x))", "all x.(Hurting(x) -> Abuse(x))", "all x.((Hurting(x) & (Person(x) | Animal(x))) -> Abuse(x))", "all x.(Hurting(x) -> (HungersPeople(x) | HurtsAnimals(x)))", "all x y.((Hurting(x) & (Person(y) | Animal(y))) -> Abuse(x,y))", "all x y.((Hurts(x,y) & (Person(y) | Animal(y))) -> Abuse(x))", "all x.((Hurts(x) & (Person(x) | Animal(x))) -> Abuse(x))", "(all x.(Hurting(x) -> (People(x) | Animals(x))))", "all x.((Hurting(x) & (Person(x) | Animal(x))) -> Abuse(x))", "all x.(HurtsPeopleOrAnimals(x) -> Abuse(x))", "(HurtingPeopleOrAnimals(h) & Abuse(h))", "all x y.((Hurting(x) & (Person(y) | Animal(y))) -> Abuse(x,y))", "all x.(Hurting(x) -> Abuse(x))"]}
{"id": "enwn_validation_466", "nl": "You should not abuse any living thing.", "fol": "", "prediction": ["all x.((LivingThing(x) & -Abuse(x)) -> -Abuse(x))", "-AbuseLivingThing(x)", "all x.((LivingThing(x) & -Abuse(x)) -> -Abuse(x))", "all x.(AbuseLivingThing(x) -> -AbuseLivingThing(x))", "-(AbuseAnyLivingThing(x) & -AbuseAnyLivingThing(x))", "all x.((LivingThing(x) & -Abuse(x)) -> -Abuse(x))", "all x.((LivingThing(x) & -Abuse(x)) -> -Abuse(x))", "All x.(Abuse(x) -> -exists y.(LivingThing(y) & Abuse(x,y)))", "all x y.((LivingThing(x) & LivingThing(y)) -> -Abuses(x,y))", "-AbuseLivingThing(x)", "all x.((LivingThing(x) & -Abuses(x)) -> -Abuse(x))", "all x.((LivedThing(x) & -Abuse(x)) -> -Abuse(x))", "all x.(AbuseLivingThing(x) -> -AbuseLivingThing(x))", "all x y.((LivingThing(x) & LivingThing(y)) -> -Abuse(x,y))", "all x.((LivingThing(x) & -Abuses(x)) -> -Abuses(x))", "all x y.((LivingThing(x) & LivingThing(y)) -> -Abuse(x,y))"]}
{"id": "enwn_validation_467", "nl": "Martin hurt his dog.", "fol": "", "prediction": ["Martin hurtsDog(Martin)", "all x.(Martin(x) -> hurtsDog(x))", "all x y.((Martin(x) & Dog(y)) -> Hurts(x,y))", "(HurtsDog(Martin))", "Martin hurtsDog(Martin)", "(IrregularToMartin(Martin,Dog))", "all x.(Martin(x) -> HurtsDog(x))", "-(Martin(Martin) & Dog(Martin))", "-HurtsDog(Martin,Dog)", "all x y.((Martin(x) & Dog(y)) -> Hurts(x,y))", "-Martin hurtsDog(Martin)", "Martin hurtsDog(Martin)", "(HurtsDog(Martin,Dog))", "(IrrespectiveOf(Martin,Dog))", "Martin hurtsDog(Martin,x)", "Martin hurtsDog(Martin)"]}
{"id": "enwn_validation_468", "nl": "You should not hurt animals.", "fol": "", "prediction": ["all x.((Animal(x) & -HasHair(x)) -> -HasHair(x))", "all x.((Animal(x) & -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasH", "all x.((Animal(x) & Animal(y)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((Animal(x) & -HasHair(x)) -> -HasHair(x))", "all x.((Animal(x) & -Hint(x)) -> -Hint(x))", "-HasAnimals(x)", "all x y.((Animal(x) & Animal(y)) -> -HasHair(x,y))", "all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasH", "-HasTouchAnimals(x)", "all x.(IgnoreAnimals(x) -> -HasAnimal(x))", "all x.((Animal(x) & -Hurts(x)) -> -Hurts(x,animal))", "-HasAnimals(x)", "(-HasIllness(animal(animal))", "all x.((Animal(x) & -Hint(x)) -> -Hint(x,Animal))", "all x y.((Animal(x) & Animal(y)) -> -HasIllness(x,y))", "All x.(HasAnimals(x) -> -HasAnimals(x))"]}
{"id": "enwn_validation_469", "nl": "Martin should not have hurt his dog.", "fol": "", "prediction": ["all x.(Martin(x) -> -HasHasDog(x))", "Martin should not have hurtDog(Martin)", "all x.((Martin(x) & Dog(y)) -> -HasHasHasHasHasHasHasHave(x,y))", "-HasHas(Martin,Dog)", "(HasMatthew(Martin) & Dog(Martin))", "(all x.(Martin(x) -> -HasHasDog(x)))", "Martin should not have hurtDog(Martin)", "-HasTouchDog(Martin)", "-HasMatthewHasHas(Martin,Dog))", "Martin shouldn't have hurtDog(Martin)", "all x.(Martin(x) -> -HasHasDog(x))", "(HasMartin(Martin) & Dog(Martin))", "Martin should not have hurtDog(Martin,x)", "-HadTouchDog(Martin,Dog)", "all x.(Martin(x) -> -HasHasDog(x))", "Martin should not have hurtDog(Martin,x)"]}
{"id": "enwn_validation_470", "nl": "If you think your college didn't prepare you for your job then you lack self-assurance in your abilities.", "fol": "", "prediction": ["all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssuranceInAbilities(x))", "all x y.((College(x) & College(y) & -PreparesForJob(x,y)) -> LacksSelfAssuranceInAbilities(x))", "all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssuranceInAbilities(x))", "(LacksSelfAssuranceInAbilities(x) -> (College(x) & -PreparesForJob(x)))", "-PreparesForJob(College)", "all x.((College(x) & College(x) & -PreparesForJob(x)) -> LacksSelfAssuranceInAbilities(x))", "all x y.((College(x) & College(y) & -PreparesForJob(x,y)) -> LacksSelfAssuranceInAbilities(x))", "all x.((Case(x) & -PreparesForJob(x)) -> LacksSelfAssuranceInAbilities(x))", "all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssurance(x))", "all x.((College(x) & -PreparesYouForJob(x)) -> LacksSelfAssuranceInAbilities(x))", "all x.((College(x) & -PreparedForJob(x)) -> LacksSelfAssurednessInAbilities(x))", "all x.((College(x) & College(y) & College(z) & -PreparedForJob(x,y)) -> LacksSelfAssuranceInAbilities(x,z))", "(LackSelfAssuranceInAbilities(c))", "-PreparesForJob(college)", "all x.((College(x) & College(x) & -PreparesForJob(x)) -> LacksSelfAssuranceInAbilities(x))", "all x y.((College(x) & College(y) & -PreparesForJob(x,y)) -> LacksSelfAssuranceInAbilities(x,y))"]}
{"id": "enwn_validation_471", "nl": "Cindy doesn't think her college was good enough for her current job. ", "fol": "", "prediction": ["all x.((Cindy(x) & College(x)) -> -GoodEnoughForJob(x))", "(-GoodEnoughForCollege(Cindy))", "(-(College(Cindy) & College(Cindy)) -> -GoodEnoughForJob(Cindy)))", "((Cindy(Cindy) & College(Cindy)) -> -GoodEnoughForJob(Cindy))", "all x.(Cindy(x) -> -GoodEnoughForCollege(x))", "(-(Cindy(Cindy) & College(Cindy)) -> -GoodEnoughForJob(Cindy)))", "-(CollegeGoodEnoughForJob(Cindy))", "exists x.(College(x) & -GoodEnoughForJob(x))", "all x.((Cindy(x) & College(y)) -> -GoodEnoughForJob(x,y))", "all x y.((College(x) & Job(y) & Cindy(x)) -> -GoodEnoughFor(x,y))", "(-GoodEnoughForCollege(Cindy))", "(Cindy,Baby(Cindy) & College(Cindy))", "all x y.((College(x) & CurrentJob(y)) -> -GoodEnoughFor(x,y))", "-(CollegeGoodEnoughForJob(Cindy))", "-(Cindy(Cindy) & College(Cindy))", "exists x.(College(x) & -GoodEnoughForJob(x))"]}
{"id": "enwn_validation_472", "nl": "Confidence is a feeling of self-assurance arising from one's appreciation of one's own abilities or qualities.", "fol": "", "prediction": ["all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppreciationOfAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppreciationOfAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (SelfAssurance(x) & AppreciationOfAbilitiesOrQualities(x)))", "all x y.((Confidence(x) & FeelingOfSelfAssurance(y)) -> AppropriateOfAbilitiesOrQualities(x,y))", "all x.((FeelingOfSelfAssurance(x) & AppreciationOfAbilitiesOrQualities(x)) -> Confidence(x))", "all x.(Confidence(x) -> (SelfAssurance(x) & AppreciationOfAbilitiesOrQualities(x)))", "(SelfAssured(confidence,s) -> ApreciatesAbilitiesOrQualities(confidence,s))", "all x y z.((Confidence(x) & FeelingOfSelfAssurance(y) & ApreciationOfAbilitiesOrQualities(z)) -> AbsorbsFromAppreciation(x,y,z))", "all x y.((Confidence(x) & SelfAssurance(y)) -> (AppreciatesAbilitiesOrQualities(x,y) & AppearsFromAppreciation(x,y)))", "all x y.((Confidence(x) & FeelingOfSelfAssurance(x) & AppreciationOfAbilitiesOrQualities(y)) -> Appropriate(x,y))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & ApreciatesOwnAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppreciationOfOwnAbilitiesOrQualities(x)))", "all x.((SelfAssured(x) & AppreciationOfAbilitiesOrQualities(x)) -> Confidence(x))", "all x.(Confidence(x) -> (SelfAssurance(x) & AppreciationOfAbilitiesOrQualities(x)))", "all x y.((Confidence(x) & FeelingOfSelfAssurance(y) & AppreciationOfAbilitiesOrQualities(x,y)) -> Appropriate(x,y))", "all x.(Confidence(x) -> (SelfAssurance(x) & AppreciationOfAbilitiesOrQualities(x)))"]}
{"id": "enwn_validation_473", "nl": "Being confident allows you to feel ready for life's experiences.", "fol": "", "prediction": ["all x.((Confident(x) & FeelsReadyForLifeExperiences(x)) -> Confident(x))", "all x.(Confident(x) -> AllowsFeelingReadyForLifeExperiences(x))", "all x.((Confident(x) & ReadyForLife(x)) -> Confident(x))", "all x y.((Confident(x) & LifeExperience(y)) -> FeelsReadyFor(x,y))", "all x.(Confident(x) -> FeelsReadyForLifeExperiences(x))", "all x.((Confident(x) & FeelsReadyForLife(x)) -> Confident(x))", "all x y.((Confident(x) & LifeExperience(y)) -> AllowsFeelingReadyFor(x,y))", "all x.(Confident(x) -> AllowsFeelingReadyForLifeExperiences(x))", "all x.((Client(x) & ReadyForLife(x)) -> Confident(x))", "all x.(Clueless(x) -> FeelsReadyForLifeExperiences(x))", "all x y.((Confident(x) & LifeExperience(y)) -> FeelsReadyFor(x,y))", "all x.(Confident(x) -> FeelsReadyForLifeExperiences(x))", "all x.((Confident(x) & FeelsReadyForLifeExperiences(x)) -> Confident(x))", "all x.(Confidence(x) -> AllowsFeelingReadyForLifeExperiences(x))", "all x y.((Client(x) & LifeExperience(y)) -> FeelsReadyFor(x,y))", "exists x.(Confidence(x) & AllowsFeelingReadyForLifeExperiences(x))"]}
{"id": "enwn_validation_474", "nl": "It's important to feel ready for life's experiences.", "fol": "", "prediction": ["all x.((FeelReadyForLife(x)) -> Important(x))", "all x.((FeelReadyForLifeExperiences(x)) -> Important(x))", "(FeelReadyForLifeExperiences(x) -> Important(x))", "all x.((FeelReady(x) & LifeExperiences(x)) -> Important(x))", "all x y.((FeelReadyForLife(x) & LifeExperiences(y)) -> Important(x))", "all x.(FeelReadyForLifeExperiences(x) -> Important(x))", "all x y.((LifeExperience(x) & FeelsReadyFor(x,y)) -> Important(x))", "all x.((FeelReadyForLife(x)) -> Important(x))", "all x.((FeelPreparedForLife(x)) -> Important(x))", "all x y.((FeelReadyForLife(x) & LifeExperiences(y)) -> Important(x))", "exists x.(Relaxation(x) & LifeExperience(x))", "exists x.(FeelReady(x) & LifeExperiences(x))", "all x.(FeelReadyForLifeExperiences(x) -> Important(x))", "All x.((Relaxation(x) & LifeExperiences(x)) -> Important(x))", "all x y.((FeelReadyForLife(x) & LifeExperience(y)) -> Important(x))", "exists x.(FeelReady(x) & LifeExperience(x))"]}
{"id": "enwn_validation_475", "nl": "Cindy has a lack of self-assurance in her abilities.", "fol": "", "prediction": ["all x.(Cindy(x) -> LackOfSelfAssurance(x))", "(LackOfSelfAssurance(Cindy))", "all x.((Cindy(x) & LackOfSelfAssurance(x)) -> -SelfInsured(x))", "all x y.((Cindy(x) & Ability(y)) -> LackOfSelfAssurance(x,y))", "-SelfInsuredInAbilities(Cindy)", "all x.(Cindy(x) -> LackOfSelfAssurance(x))", "(LackOfSelfAssurance(Cindy) & Inabilities(Cindy,Always(Cindy))", "(LackOfSelfAssurance(Cindy) -> CannotAcquire(Cindy))", "all x.(Cindy(x) -> LackOfSelfAssuranceInAbilities(x))", "all x y.((Cindy(x) & Ability(y)) -> LackOfSelfAssurance(x,y))", "all x.((Cindy(x) & LackOfSelfAssurance(x)) -> -CanHelp(x))", "(LackOfSelfAssuranceInAbilities(Cindy))", "all x y.((Cindy(x) & Ability(y)) -> LackOfSelfAssurance(x,y))", "exists x.(Cindy(x) & LackOfSelfAssurance(x))", "exists x.(Cindy(x) & LackOfSelfInsurance(x))", "exists x.(Cindy(x) & LackOfSelfAssurance(x))"]}
{"id": "enwn_validation_476", "nl": "Cindy lacks confidence.", "fol": "", "prediction": ["all x.(Cindy(x) -> LacksConfidence(x))", "(LacksConfidence(Cindy))", "-(Cindy(Cindy) & LacksConfidence(Cindy))", "-CindyLacksConfidence(Cindy)", "Cindy lacksConfidence.", "all x.(Cindy(x) -> LacksConfidence(x))", "-Confidence(Cindy)", "(LacksConfidence(Cindy))", "-CindyLacksConfidence(Cindy)", "Cindy lacksConfidence.", "all x.(Cindy(x) -> LacksConfidence(x))", "(LacksConfidence(Cindy))", "(LittleSelf Confidence(Cindy)", "exists x.(Cindy(x) & -BustsIn(x))", "(LacksConfidence(Cindy))", "all x.(Cindy(x) -> LacksConfidence(x))"]}
{"id": "enwn_validation_477", "nl": "It's important to be confident.", "fol": "", "prediction": ["all x.(Confident(x) -> Important(x))", "all x.((Confident(x) & Important(x)) -> Confident(x))", "is important to be Confident(x)", "all x.((Client(x) & Confident(x)) -> Important(x))", "all x.(Confident(x) -> Important(x))", "(CreativityIsImportant(x) & -Client(x))", "all x y.((Confident(x) & Confident(y)) -> Important(x))", "exists x.(Clueless(x) & Confident(x))", "-Confidentiality.", "all x.((Confident(x)) -> Important(x))", "all x y.((Client(x) & Confident(y)) -> Important(x,y))", "all x.(Confident(x) -> Important(x))", "exists x.(Clueless(x) & Confident(x))", "all x.(Confidence(x) -> Important(x))", "exists x.(Confidential(x) & ImportantToBe(x))", "exists x.(Certain(x) & Confident(x))"]}
{"id": "enwn_validation_478", "nl": "Cindy should try to be more confident.", "fol": "", "prediction": ["all x.(Cindy(x) -> ShouldTryToBeMoreConfident(x))", "(Cindy should try to be moreConfident(Cindy))", "all x.((Cindy(x) & Confident(x)) -> ShouldTry(x,y))", "all x y.((Cindy(x) & Confident(y)) -> ShouldTry(x,y))", "Cindy should try to be more Confident.", "-(Cindy(Cindy) & MoreConfident(Cindy))", "all x.(Cindy(x) -> ShouldTryToBeMoreConfident(x))", "(Cindy(Cindy) & Confident(Cindy))", "all x.(Cindy(x) -> ShouldTryToBeMoreConscious(x))", "(Cindy shouldtryToBeMoreConfident(Cindy))", "all x.((Cindy(x) & Confident(x)) -> ShouldTry(x,y))", "all x.(Cindy(x) -> MoreConfident(x))", "all x y.((Cindy(x) & Confident(y)) -> ShouldTry(x,y))", "all x.(Cindy(x) -> ShouldTryToBeMoreConfident(x))", "All x.(Cindy(x) -> TryToBeMoreConfident(x))", "All x.(Cindy(x) -> MoreConfident(x))"]}
{"id": "enwn_validation_479", "nl": "Personal beliefs aren't a good reason to disobey the law.", "fol": "", "prediction": ["all x.((PersonalBelief(x) & -GoodRightToDisobeyLaw(x)) -> -GoodRightToDisobeyLaw(x))", "all x.(PersonalBelief(x) -> -GoodRightToDisobeyLaw(x))", "all x.((PersonalBuddhism(x) & -GoodRightToDisobeyLaw(x)) -> -GoodRightToDisobeyLaw(x))", "all x y.((PersonalBelief(x) & Law(y)) -> -GoodRightToDisobey(x,y))", "(-GoodRightToDisobeyLaw(personalBudgets))", "all x.((PersonalBelief(x) & -GoodRightToDisobeyLaw(x)) -> -GoodRightToDisobeyLaw(x))", "-(GoodRightToDisobeyLaw(personalBudgets))", "all x.(PersonalBuddhism(x) -> -GoodRightToDisobeyLaw(x))", "all x y.((PersonalBuddhance(x) & Law(y)) -> -GoodRightToDisobey(x,y))", "all x.(PersonalBelief(x) -> -GoodRightToDisobeyLaw(x))", "(all x.(PersonalBuddhist(x) -> -GoodRightToDisobeyLaw(x)))", "all x y.((PersonalBelief(x) & Law(y)) -> -GoodRightToDisobey(x,y))", "all x.((PersonalBelief(x) & -GoodRightToDisobeyLaw(x)) -> -GoodRightToDisobeyLaw(x))", "exists x.(PersonalBelief(x) & -GoodRightToDisobeyLaw(x))", "all x.((PersonalBelief(x) & -GoodRightToDisobeyLaw(x)) -> -GoodRightToDisobeyLaw(x))", "all x.(PersonalBeliefs(x) -> -GoodRightToDisobeyLaw(x))"]}
{"id": "enwn_validation_480", "nl": "The law stipulates you must report your income.", "fol": "", "prediction": ["all x.((Law(x) & ReportIncome(x)) -> Stipulates(x))", "all x.(Law(x) -> ReportsIncome(x))", "all x y.((Law(x) & Income(y)) -> MustReport(x,y))", "(all x.(ReportsIncome(x) -> Stipulates(x)))", "all x.((Law(x) & ReportsIncome(x)) -> Stipulates(x))", "all x.(ReportsIncome(x) -> Stipulates(x))", "(all x.(ReportsIncome(x) -> -ReportsIncome(x)))", "all x y.((Law(x) & Income(y)) -> Report(x,y))", "all x.(Law(x) -> MustReportIncome(x))", "all x y.((Law(x) & Income(y) & Report(x,y)) -> Stipulates(x,y))", "all x.((Law(x) & ReportsIncome(x)) -> Stipulates(x,y))", "all x y.((Law(x) & Income(y)) -> MustReport(x,y))", "all x y.((Lith(x) & Income(y)) -> MustReport(x,y))", "exists x.(Law(x) & ReportsIncome(x))", "exists x.(LawStipulatesReportingIncome(x))", "exists x.(Limit(x) & ReportsIncome(x))"]}
{"id": "enwn_validation_481", "nl": "John did not report his income because he does not believe taxes are justified.", "fol": "", "prediction": ["John -ReportedIncome(John) & -CreditsTaxesJustified(John))", "-ReportedIncome(John) -> (-ReportsIncome(John) & -CreditsTaxes(John)))", "((John(John) & -ReportsIncome(John)) -> -ReportsIncome(John))", "John did not report his income because he does not believe taxes are justified.", "(-ReportsIncome(John) & -CreatesJustifiedTaxes(John))", "all x.((John(x) & -ReportsIncome(x)) -> -CreditsTaxes(x))", "John -ReportedIncomes(John) & -CreditsTaxesJustified(John))", "-(John(John) & -CreditsTaxesJustified(John))", "-(ReportsIncome(John) & -CreatesJustifiedTaxes(John))", "John -ReportedIncomes(John) -> -(CreditsTaxesJustified(John) & -CreditsTaxes(John)))", "all x.((John(x) & -ReportsIncome(x)) -> -JustifiedTaxes(x))", "(-ReportsImportance(John,Jon) & -CreditsTaxesJustified(John,Jon))", "John did not report his income because he does not believe taxes are justified.", "(-ReportsIncome(John) & -CreditsTaxesJustified(John))", "-(John(John) & -CreditsTaxesJustified(John))", "(-ReportsIncome(John) & -CreatesJustifiedTaxes(John))"]}
{"id": "enwn_validation_482", "nl": "Personal beliefs aren't a good reason to avoid reporting your income.", "fol": "", "prediction": ["all x.((PersonalBelief(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x))", "all x.((PersonalBuddhism(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x))", "(all x.((PersonalBelief(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x)))", "all x.(PersonalBelief(x) -> -GoodRightToAvoidReportingIncome(x))", "-(GoodRightToAvoidReportingIncome(PersonalBeliefs))", "all x y.((PersonalBelief(x) & Income(y)) -> -GoodRightToAvoid(x,y))", "all x.((PersonalBelief(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x))", "(-GoodRightToAvoidReportingIncome(personalBuys))", "all x.((PersonalFeudgment(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x))", "all x.(PersonalBelief(x) -> -GoodRightToAvoidReportingIncome(x))", "all x.((PersonalBelief(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x))", "all x y.((PersonalBelief(x) & Income(y)) -> -GoodRightToAvoid(x,y))", "(all x.(PersonalBuddhance(x) -> -GoodRightToAvoidReportingIncome(x)))", "all x y.((PersonalBelief(x) & Income(y)) -> -GoodRightToAvoid(x,y))", "all x.((PersonalBelief(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x))", "all x.(PersonalBeliefs(x) -> -GoodReportingRisk(x))"]}
{"id": "enwn_validation_483", "nl": "John should have reported his income.", "fol": "", "prediction": ["all x.((John(x) & Income(x)) -> ShouldReport(x,y))", "John should have reported his income.", "(ReportedIncome(John) -> ShouldReportIncome(John))", "all x.((John(x) & ShouldReportIncome(x)) -> ShouldReportIncome(x))", "-(John(John) & Income(John))", "(ReportedIncome(John,John) & ShouldReportIncome(John,John))", "John should have reported income.", "(ReportsIncome(John,John))", "-(JohnBeneathReportedIncome(John))", "all x.(John(x) -> ShouldReportIncome(x))", "-(JohnBobbsReportingIncome(John))", "John should have reported his income.", "all x.((John(x) & Income(x)) -> ShouldReport(x,y))", "John should have reported income.", "John should have reported his income.", "John should have reported income."]}
{"id": "enwn_validation_484", "nl": "Corey went to work while she was sick during a pandemic.", "fol": "", "prediction": ["all x y.((Corey(x) & Pandemic(y)) -> GoesToWork(x,y))", "all x.((Corey(x) & SickDuringPandemic(x)) -> GoesToWork(x))", "Corey went to work while sick during pandemic.", "(SickDuringPandemic(Corey) -> GoesToWork(Corey,Work))", "(GoesToWork(Corey,SickDuringPandemic) & DuringPandemic(Corey,SickDuringPandemic))", "all x.((Corey(x) & Sick(x) & Pandemic(x)) -> GoesToWork(x))", "all x y z.((Corey(x) & Pandemic(y) & Sick(z)) -> GoesToWork(x,y,z))", "all x y.((Corey(x) & Pandemic(y)) -> GoesToWork(x,y))", "Corey & WorkedDuringPandemic(Corey,Sick)", "all x.((Corey(x) & SickDuringPandemic(x)) -> GoesToWork(x))", "(GoedToWork(Corey) & WasSickDuringPandemic(Corey))", "all x y.((Corey(x) & Pandemic(y)) -> (GoedToWork(x,y) & Sick(x)))", "all x.((Carol(x) & SickDuringPandemic(x)) -> GoesToWork(x))", "Corey went to work while sick during pandemic.", "all x.((Corey) & SickDuringPandemic(x)) -> GoesToWork(x))", "all x y.((Corey(x) & Pandemic(y)) -> GoesToWork(x,y))"]}
{"id": "enwn_validation_485", "nl": "If you do something while sick you are prioritizing that thing over your health.", "fol": "", "prediction": ["all x.((DoesWhileSick(x) & Prioritizes(x,health)) -> Prioritizes(x,health))", "all x y.((Does(x,y) & Sick(y)) -> PrioritizesOverHealth(x,y))", "all x.((Does(x,sick) & Prioritizes(x,sick)) -> Prioritizes(x,sickness))", "all x y z.((Does(x,y) & Sick(y) & Thing(z) & PrioritizesOverHealth(x,z)) -> Prioritizes(x,y,z))", "all x y.((Does(x,y) & Sick(y)) -> PrioritizesOverHealth(x,y))", "all x.((DoesWhileSick(x) & PrioritizesOverHealth(x)) -> Prioritizes(x,sickness,health))", "all x.((Does(x,sick) & Prioritizes(x,sick)) -> Prioritizes(x,sickness))", "all x y.((DoesWhileSick(x) & Health(y)) -> Prioritizes(x,y))", "all x.((Doing(x) & Sick(x)) -> PrioritizesOverHealth(x))", "all x.((DoesWhileSick(x) & PrioritizesThingOverHealth(x)) -> PrioritizesThingOverHealth(x))", "all x.((Does(x,Sick) & Prioritizes(x,Health)) -> Prioritizes(x,Sickness))", "all x.((DoesWhileSick(x) & PrioritizesOverHealth(x)) -> Prioritizes(x,Sickness,Health))", "all x y.((DoesWhileSick(x) & Thing(y)) -> PrioritizesOverHealth(x,y))", "all x y.((Does(x,y) & Sick(x)) -> PrioritizesOverHealth(y))", "(PratingHealthOverHealth)", "all x.((DoesSick(x) & PrioritizesThingOverHealth(x)) -> PrioritizesHealth(x))"]}
{"id": "enwn_validation_486", "nl": "Everyone prioritizing health helps stop disease from spreading.", "fol": "", "prediction": ["all x.(PrioritizesHealth(x) -> StopsDiseaseSpreading(x))", "all x y.((PrioritizesHealth(x) & Disease(y)) -> StopsSpreading(x,y))", "all x.(PrioritizingHealth(x) -> StopsDiseaseSpreading(x))", "all x.(PrioritizesHealth(x) -> StopsDiseaseSpreading(x))", "all x y.((Person(x) & Health(y) & Prioritizes(x,y)) -> StopsDiseaseSpreading(x))", "all x y.((PrioritizesHealth(x) & Disease(y)) -> StopsSpreading(x,y))", "all x.((PrioritizesHealth(x) & StopsDiseaseSpreading(x)) -> HelpsStopDisease(x))", "all x.(PrioritizingHealth(x) -> StopsDiseaseSpreading(x))", "all x.(PrioritizesHealth(x) -> StopsDiseaseSpreading(x))", "all x y.((PrioritizingHealth(x) & Disease(y)) -> StopsSpreading(x,y))", "all x y.((Person(x) & Health(y)) -> HelpsStopDiseaseSpreading(x,y))", "all x.(PratingHealth(x) -> StopsDiseaseSpreading(x))", "all x y.((PrioritizesHealth(x) & Disease(y)) -> StopsSpreading(x,y))", "all x.(PrioritizingHealth(x) -> StopsDiseaseSpreading(x))", "all x.(PrioritizesHealth(x) -> HelpsStopDiseaseSpreading(x))", "all x.(PrioritizesHealth(x) -> StopsDiseaseSpreading(x))"]}
{"id": "enwn_validation_487", "nl": "It's important to stop the spread of disease, especially when health risk is elevated.", "fol": "", "prediction": ["all x.((HealthRisk(x) & Elevated(x)) -> StopsSpreadOfDisease(x))", "all x y.((HealthRisk(x) & HealthRisk(y)) -> StopsSpreadOfDisease(x,y))", "all x.((HealthRisk(x) & Elevated(x)) -> StopsDiseaseSpread(x))", "(all x.((HealthRisk(x) & Elevated(x)) -> StopsSpreadOfDisease(x)))", "all x y.((HealthRisk(x) & HealthRisk(y)) -> StopsSpreadOfDisease(x,y))", "all x y z.((HealthRisk(x) & Disease(y) & HealthRisk(z) & Elevated(z)) -> StopsSpread(x,y,z))", "all x y.((HealthRisk(x) & Disease(y) & Elevated(x)) -> StopsSpread(x,y))", "all x.((HealthRisk(x) & ElevatedHealthRisk(x)) -> StopsDiseaseSpread(x))", "all x.((StopSpreadOfDisease(x) & HealthRiskElevated(x)) -> ImportantToStop(x))", "all x.((HealthRisk(x) & Elevated(x)) -> StopsSpreadOfDisease(x))", "exists x.(HealthRisk(x) & StopsSpreadOfDisease(x))", "all x y.((HealthRisk(x) & HealthRisk(y) & Elevated(x)) -> StopsSpreadOfDisease(x,y))", "all x.((HealthRiskElevated(x) & StopsDiseaseSpread(x)) -> ImportantToStop(x))", "exists x.(HealthRisk(x) & StopsDiseaseSpread(x))", "all x.((HealthRisk(x) & Elevated(x)) -> StopsDiseaseSpread(x))", "all x y.((HealthRisk(x) & Disease(y) & Elevated(x,y)) -> StopsSpread(x,y))"]}
{"id": "enwn_validation_488", "nl": "A pandemic is a disease that is prevalent over a whole country or the world.", "fol": "", "prediction": ["all x.(Pandemic(x) -> (Disease(x) & PredominantOver(x,country) | PredominantOver(x,world)))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOver(x,country) | PredominantOver(x,world)))", "all x y.((Pandemic(x) & Disease(y)) -> (PredominantOver(x,y) & (Country(y) | World(y))))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOver(x,y) & (Country(y) | World(y))))", "all x y z.(Pandemic(x) -> (Disease(y) & (WholeCountry(z) | World(z)) & Predominant(y,z))))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOver(x,y) & (Country(y) | World(y))))", "all x y z.(Pandemic(x) -> (Disease(y) & (ProminentOver(y,z) | ProminentOver(z,y)) & WholeCountryOrWorld(y))))", "all x y.((Pandemic(x) & Disease(y)) -> (PredominantOver(x,y) & (Country(y) | World(y))))", "all x.(Pandemic(x) -> (Disease(x) & (PrevalentOverCountry(x) | PrevalentOverWorld(x))))", "all x.((Disease(x) & PredominantOverCountryOrWorld(x)) -> Pandemic(x))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOverCountryOrWorld(x)))", "all x y.((Pandemic(x) & Disease(y)) -> (PredominantOver(y,x) & (Country(y) | World(y))))", "exists x.(Pandemic(x) & Disease(x) & (PredominantOver(x,country) | PredominantOver(x,world))))", "all x y.((Pandemic(x) & Disease(y)) -> (PositiveOver(x,y) & (Country(y) | World(y))))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOverCountryOrWorld(x)))", "all x.(Pandemic(x) -> (Disease(x) & PrevalenceOverCountryOrWorld(x)))"]}
{"id": "enwn_validation_489", "nl": "A disease that can effect the whole world escalates health risks for everyone.", "fol": "", "prediction": ["all x.((Disease(x) & CanEffectWholeWorld(x)) -> EscalatesHealthRisks(x))", "all x y.((Disease(x) & WholeWorld(y) & Effects(x,y)) -> InescalatesHealthRisks(x))", "all x.((Disease(x) & CanEffectWholeWorld(x)) -> InescalatesHealthRisks(x))", "all x y.((Disease(x) & WholeWorld(y) & Effects(x,y)) -> EscalatesHealthRisks(x))", "all x.((Disease(x) & CanEffectWall(x)) -> EscalatesHealthRisks(x))", "all x.((Disease(x) & EffectsWholeWorld(x)) -> EscalatesHealthRisks(x))", "all x y.((Disease(x) & WholeWorld(y) & Effects(x,y)) -> InescalatesHealthRisks(x,y))", "all x y z.((Disease(x) & WholeWorld(y) & HealthRisk(z)) -> Escalates(x,z))", "all x.((Disease(x) & CanEffectWholeWorld(x)) -> EscalatesHealthRisks(x))", "all x y.((Disease(x) & WholeWorld(y) & Effects(x,y)) -> EscalatesHealthRisks(x,y))", "all x.((Disease(x) & EffectsWallWorld(x)) -> InescalatesHealthRisks(x))", "all x y.((Disease(x) & World(y) & Effects(x,y)) -> InescalatesHealthRisks(x,y))", "all x y.((Disease(x) & WholeWorld(y) & Effects(x,y)) -> HealthRisks(x,y))", "all x.((Disease(x) & CanEffectWall(x)) -> InescalatesHealthRisks(x))", "all x.((Disease(x) & EffectsWholeWorld(x)) -> EscalatesHealthRisks(x))", "all x.((Disease(x) & CanEffectWholeWorld(x)) -> InescalatesHealthRisks(x))"]}
{"id": "enwn_validation_490", "nl": "Corey prioritized work over her health during a pandemic.", "fol": "", "prediction": ["all x y.((Corey(x) & Pandemic(y)) -> PrioritizedWorkOverHealth(x,y))", "all x.((Corey(x) & Pandemic(x)) -> PrioritizedWorkOverHealth(x))", "Corey PrioritizedWorkOverHealthDuringPandemic(Corey)", "all x y z.((Corey(x) & Pandemic(y) & Work(z)) -> PrioritizedOverHealth(x,z))", "all x y.((Corey(x) & Pandemic(y)) -> PrioritizedWorkOverHealth(x,y))", "Corey prioritized work over health during pandemic.", "(PreferredWorkOverHealth(Corey,pandemic))", "all x.((Corey(x) & Pandemic(x)) -> PrioritizedWorkOverHealth(x))", "(PrioritizedWorkOverHealth(Corey,pandemic))", "Corey PrioritizedWorkOverHealthDuringPandemic(Corey,Pandemic)", "all x.((Corey,Pandemic(x) & PrioritizedWork(x)) -> PrioritizedHealth(x))", "(PreferredWorkOverHealth(Corey) & Pandemic(Corey))", "all x y.((Corey(x) & Pandemic(y)) -> PrioritizedWorkOverHealth(x,y))", "Corey PrioritizedWorkOverHealthDuringPandemic(Corey,Work,Pandemic)", "all x.((Corey(x) & Pandemic(x)) -> PrioritizedWorkOverHealth(x))", "all x y.((Corey(x) & Pandemic(y)) -> PrioritizedWorkOverHealth(x,y))"]}
{"id": "enwn_validation_491", "nl": "Health should be everyone's priority, especially when health risk is elevated.", "fol": "", "prediction": ["all x.((HealthPriority(x) & HealthRiskElevated(x)) -> Priority(x))", "all x y.((Health(x) & HealthRisk(y) & Elevated(y)) -> Priority(x,y))", "all x.((HealthPriority(x) & HealthRiskElevated(x)) -> Priority(x))", "all x y.((HealthPriority(x) & HealthRisk(y) & Elevated(y)) -> Priority(x,y))", "all x.((HealthPositive(x) & HealthRiskElevated(x)) -> Priority(x))", "(all x.((HealthRisk(x) & Elevated(x)) -> Priority(x)))", "all x.((HealthRisk(x) & Elevated(x)) -> Priority(x))", "all x.((HealthPriority(x) & HealthRiskElevated(x)) -> Priority(x))", "all x y.((HealthPriority(x) & HealthRisk(y) & Elevated(y)) -> Priority(x,y))", "all x y.((HealthPosition(x) & HealthRiskElevated(y)) -> Priority(x,y))", "all x.(HealthPriority(x) -> (ElevatedHealthRisk(x) & Everyone(x)))", "(all x.((HealthRisk(x) & Elevated(x)) -> Priority(x)))", "all x.(HealthPriority(x) -> (ElevatedHealthRisk(x) | PriorityHealthRisk(x)))", "all x.((HealthPriority(x) & HealthRiskElevated(x)) -> Priority(x))", "all x y.((HealthPriority(x) & HealthRisk(y) & Elevated(y)) -> Priority(x,y))", "all x.((HealthPriority(x) & HealthRiskElevated(x)) -> Priority(x))"]}
{"id": "enwn_validation_492", "nl": "A pandemic escalates health risks for everyone.", "fol": "", "prediction": ["all x.(Pandemic(x) -> EscalatesHealthRisks(x))", "all x y.((Pandemic(x) & Person(y)) -> EscalatesHealthRisks(x,y))", "all x.(Pandemic(x) -> EscalatesHealthRisks(x))", "all x y.((Pandemic(x) & Person(y)) -> InescalatesHealthRisks(x,y))", "all x y z.((Pandemic(x) & HealthRisk(y) & Person(z)) -> Escalates(x,y,z))", "all x.(Pandemic(x) -> InescalatesHealthRisks(x))", "all x.((Pandemic(x) & HealthRisks(x)) -> Escalates(x))", "all x y.((Pandemic(x) & HealthRisk(y)) -> Escalates(x,y))", "all x y.((Pandemic(x) & Person(y)) -> EscalatesHealthRisks(x,y))", "all x y z.((Pandemic(x) & HealthRisk(y) & Person(z)) -> Escalates(x,y,z))", "all x.(Pandemic(x) -> EscalatesHealthRisks(x))", "all x.((Pandemic(x) & HealthRisks(x,y)) -> Escalates(x,y))", "all x.(Pandemic(x) -> InescalatesHealthRisks(x))", "all x y.((Pandemic(x) & Everyone(y)) -> InescalatesHealthRisks(x,y))", "exists x.(Pandemic(x) & HealthRisk(x) & Everyone(x))", "all x.(Pandemic(x) -> EscalatesHealthRisks(x))"]}
{"id": "enwn_validation_493", "nl": "During a pandemic, health should be everyone's top priority.", "fol": "", "prediction": ["all x.(Pandemic(x) -> HealthTopPriority(x))", "all x.((Pandemic(x) & Health(x)) -> TopPriority(x))", "all x y.((Pandemic(x) & Health(y)) -> TopPriority(x,y))", "all x y z.((Pandemic(x) & Health(y) & Pandemic(z)) -> TopPriority(x,y,z))", "all x y.((Pandemic(x) & Health(y)) -> TopPriority(x,y))", "all x.(Pandemic(x) -> HealthTopPriority(x))", "all x.((Pandemic(x) & Health(x)) -> TopPriority(x))", "all x y.((Pandemic(x) & Pandemic(y)) -> HealthTopPriority(x,y))", "all x.(Pandemic(x) -> TopPriority(x,Health))", "all x y.((Pandemic(x) & Health(y)) -> TopPriority(x,y))", "all x.((Pandemic(x) & TopPriority(x,y)) -> Health(y))", "all x y z.((Pandemic(x) & Health(y) & Pandemic(z)) -> TopPriority(y,z))", "all x y.((Pandemic(x) & Person(y) & Pandemic(y)) -> HealthTopPriority(y,x))", "(all x.(Pandemic(x) -> TopPriority(x)))", "all x.((Pandemic(x) & Health(x)) -> TopPriority(x))", "all x.(Pandemic(x) -> HealthTopPriority(x))"]}
{"id": "enwn_validation_494", "nl": "Corey had the wrong priorities.", "fol": "", "prediction": ["all x.(Corey(x) -> WorstPriorities(x))", "Corey had the wrongpriorities.", "(WrongPriorities(Corey))", "Corey hatsWrongPriorities(Corey)", "all x.(Corey(x) -> WorstPriorities(x))", "Corey had the wrongpriorities.", "All x y.((Corey(x) & Priority(y)) -> Worst(x,y))", "Corey & WorstPriorities(Corey)", "(WrongPriorities(Corey) & -WrongPriorities(Corey))", "(WrongPriorities(Corey))", "Corey had wrongpriorities.", "all x.(Corey(x) -> WorstPriorities(x))", "Corey had the wrongpriorities.", "all x.(Corey(x) -> WorstPriorities(x))", "Corey had the wrong priorities.", "all x.(Corey(x) -> WorstPriorities(x))"]}
{"id": "enwn_validation_495", "nl": "Ryan made fun of Stew's favorite TV show in front of others.", "fol": "", "prediction": ["all x y.((Ryan(x) & Stew(y)) -> MadeFunOfFavoriteTVShow(x,y))", "all x y z.((Ryan(x) & Stew(y) & TVShow(z)) -> MadeFunOf(x,y,z))", "Ryan made funOfFavoriteTVShow(Ryan,Stew) & InFrontOfOthers(Ryan,Stew))", "(Fun(Ryan,Stew) & FavoriteTVShow(Ryan,Stew))", "Ryan made funOfStew'sFavoriteTVShow(Ryan,FollowingOthers)", "(FavoriteTVShow(Ryan,Stew) & InFrontOfOthers(Ryan,Stew))", "(FunnyTelevisionShow(Ryan,Stew) & InFrontOfOthers(Ryan,Stew))", "(MadeFunOfTelevisionShow(Ryan,Stew) & InFrontOfOthers(Ryan,Stew))", "Ryan made funOfStewsFavoriteTVShow(Ryan,Stew) & InFrontOfOthers(Ryan,Stew))", "all x.((Ryan(x) & StewsFavoriteTVShow(x)) -> MadeFunOf(x,y))", "(Fun(Ryan) & StewsFavoriteTVShow(Ryan))", "Ryan made funOfStew'sFavoriteTVShow(Ryan,Stew) & InFrontOfOthers(Ryan,Stew))", "all x y.((Ryan(x) & Stew(y)) -> MadeFunOf(x,y))", "Ryan made funOfFavoriteTVShow(Ryan,Stew) & InFrontOfOthers(Ryan,Stew))", "all x y z.((Ryan(x) & Stew(y) & TVShow(z)) -> MadeFunOf(x,y,z))", "Ryan made funOfFavoriteTVShow(Ryan,Stew) & InFrontOfOthers(Ryan,Stew))"]}
{"id": "enwn_validation_496", "nl": "If you are in front of others then you are in public.", "fol": "", "prediction": ["all x.((InFrontOfOthers(x) & Public(x)) -> InFrontOfOthers(x))", "all x.(InFrontOfOthers(x) -> Public(x))", "all x.((InFrontOfOthers(x) & InPublic(x)) -> InPublic(x))", "(InFrontOfOthers(x) -> Public(x))", "all x y.((InFrontOfOthers(x) & InPublic(y)) -> Public(x))", "all x.((InFrontOfOthers(x) & Public(x)) -> InFrontOfOthers(x))", "all x.(InFrontOfOthers(x) -> Public(x))", "all x y.((FrontOfOthers(x) & InPublic(y)) -> Public(x))", "all x y.((InFrontOfOthers(x) & InPublic(y)) -> InPublic(x))", "all x.((InFrontOfOthers(x) & InPublic(x)) -> Public(x))", "all x.(FrontOfOthers(x) -> Public(x))", "all x.(InFrontOfOthers(x) -> Public(x))", "all x.((InfrontOfOthers(x) & InPublic(x)) -> Public(x))", "exists x.(FrontOfOthers(x) & InPublic(x))", "all x.(InFrontOfOthers(x) -> Public(x))", "exists x.(FrontOfOthers(x) & InPublic(x))"]}
{"id": "enwn_validation_497", "nl": "Making fun of something that someone else likes can make that person feel ashamed and foolish.", "fol": "", "prediction": ["all x y.((Fun(x) & Person(y) & Likes(x,y)) -> (Shamed(y) & Foolish(y)))", "all x.((Fun(x) & Likes(x)) -> (HasShame(x) & Foolish(x)))", "all x.((MakingFunOf(x) & Likes(x)) -> (MakesPersonShameful(x) & MakesPersonFoolish(x)))", "all x y.((Fun(x) & Person(y) & Likes(y)) -> (Shamed(y) & Foolish(y)))", "all x y.((MakingFunOf(x,y) & Person(y)) -> (HasShame(y) & Foolish(y)))", "all x.((MakingFunOf(x,y) & Likes(x,y)) -> (MakesPersonShameful(x) & MakesPersonFoolish(x)))", "all x y z.((Fun(x) & Person(y) & Likes(y,x)) -> (Shamed(y) & Foolish(y,z)))", "all x y.((MakingFunOf(x,y) & Likes(x,y)) -> (MakesPersonShameful(x) & MakesPersonFoolish(x)))", "all x.((Fun(x) & Likes(x)) -> (MakesPersonShameful(x) & MakesPersonFoolish(x)))", "all x y z.((Fun(x) & Person(y) & Likes(x,y) & Person(z)) -> (Shamed(y,z) & Foolish(z)))", "exists x.(Fun(x) & Likes(x) & Person(x) & FeelsSickened(x) & Foolish(x))", "all x y.((Fun(x) & Person(y) & Likes(x,y)) -> (Shameful(y) & Foolish(y)))", "exists x.(FunOf(x,y) & Likes(x,y)) -> (MakesPersonShamed(x) & MakesPersonFoolish(x)))", "all x.((MakingFunOf(x) & Likes(x)) -> (HasShameful(x) & Foolish(x)))", "all x y.((Fun(x) & Likes(x,y)) -> (MakesPersonSick(x) & MakesPersonFoolish(x)))", "all x.((Fun(x) & Likes(x)) -> (Shameful(x) & Foolish(x)))"]}
{"id": "enwn_validation_498", "nl": "To humiliate someone is to make someone feel ashamed and foolish by injuring their dignity and self-respect, especially publicly.", "fol": "", "prediction": ["all x y.((Humorize(x) & Person(y)) -> (MakesShameful(x,y) & MakesFoolish(x,y) & InjuresDignityAndSelfRespect(x,y)))", "all x.(Humorizes(x) -> (MakesShamefulAndFoolish(x) & InjuresDignityAndSelfRespect(x) & EspeciallyPublicly(x)))", "all x y.((Habitat(x) & Person(y)) -> (MakesShameful(x,y) & MakesFoolish(x,y) & InjuresDignityAndSelfRespect(x,y)))", "all x.(Humorize(x) -> (MakesShameful(x) & MakesFoolish(x) & InjuresDignityAndSelfRespect(x) & EspeciallyPublicly(x)))", "all x y.((Humorize(x) & Person(y)) -> (MakesShamefulAndFoolish(x,y) & InjuresDignityAndSelfRespect(x,y)))", "all x.(Habitat(x) -> (MakesAdmittedAndFoolish(x) & InjuresDignityAndSelfRespect(x) & EspeciallyPublicly(x)))", "all x y z.((Humorize(x) & Person(y) & Shameful(y) & Foolish(z) & InjureDignityAndSelfRespect(x,y,z)) -> MakesFeelSick(x,y,z))", "all x y.((Humorizes(x) & Person(y)) -> (MakesShamefulAndFoolish(x,y) & InjuresDignityAndSelfRespect(x,y) & EspeciallyPublicly(x,y)))", "(HasDignityAndSelfRespect(x) | (HasDignity(x) & HasSelfRespect(x))))", "all x y z.((Habitat(x) & Person(y) & Shameful(y) & Foolish(z) & InjureDignityAndSelfRespect(x,y,z)) -> MakesFeelSick(x,y,z))", "all x.((Humorizes(x) & Shameful(x) & Fooky(x) & InjuresDignityAndSelfRespect(x)) -> MakesFeelFear(x))", "all x.(Hilarious(x) -> (MakesAssailantFeelShamedAndFoolish(x) & InjuresDignityAndSelfRespect(x) & EspeciallyPublicly(x)))", "(HasDignityAndSelfRespect(e) -> (HasDignity(e) & HasFoolish(e) & InjuresSelfRespect(e) & Publicly(e)))", "all x.(Humorizes(x) -> (MakesShameful(x) & MakesFoolish(x) & InjuresDignityAndSelfRespect(x) & EspeciallyPublicly(x)))", "all x.((Habitat(x) & Person(x)) -> (MakesShameful(x) & Foolish(x) & InjuresDignityAndSelfRespect(x) & Publicly(x)))", "all x y.((Hilarious(x) & Person(y)) -> (MakesShameful(y) & MakesFoolish(y) & InjuresDignityAndSelfRespect(y)))"]}
{"id": "enwn_validation_499", "nl": "Humiliation is a form of harm.", "fol": "", "prediction": ["all x.(Humiliation(x) -> Harm(x))", "all x.(Humiliation(x) -> Harm(x))", "all x y.((Humiliation(x) & Harm(y)) -> FormOf(x,y))", "(Harm(Humiliation))", "(HasHarm(Humiliation,y) & FormOfHarm(y))", "(Harm(Humiliation) & FormOfHarm(Humiliation))", "all x.(Humiliation(x) -> Harm(x))", "all x y.((Humiliation(x) & Harm(y)) -> FormOf(x,y))", "all x.(Humiliation(x) -> FormOfHarm(x))", "all x.(Humiliation(x) -> Harm(x))", "(Harm(Humiliation))", "all x y.((Humiliation(x) & Harm(y)) -> FormOf(x,y))", "all x.(Humiliation(x) -> Harm(x))", "all x.(Humiliation(x) -> Harm(x))", "all x.(Humiliation(x) -> Harm(x))", "all x.(Humiliation(x) -> FormOfHarm(x))"]}
{"id": "enwn_validation_500", "nl": "Ryan made fun of Stew's favorite TV show in public.", "fol": "", "prediction": ["all x y.((Ryan(x) & Stew(y)) -> MadeFunOf(x,y))", "Ryan made funOfFavoriteTVShow(Ryan,Stew) & InPublic(Ryan,Stew))", "(FavoriteTVShow(Ryan) & MadeFunOf(Ryan,Stew))", "all x y z.((Ryan(x) & Stew(y) & TVShow(z) & Favorite(y,z)) -> MadeFunOf(x,y,z))", "all x.((Ryan(x) & StewsFavoriteTVShow(x)) -> MadeFunInPublic(x))", "Ryan made funOfStew'sFavoriteTVShow(Ryan,Public)", "(MadeFunOfTelevisionShow(Ryan,Stew) & InPublic(Ryan,Stew))", "(FavoriteTVShow(Ryan,Stew) & MadeFunOf(Ryan,Stew))", "Ryan made funOfTelevisionShow(Ryan,Stew) & InPublic(Ryan,Stew))", "(Fun(Ryan,Stew) & PublicFun(Ryan,Stew))", "all x y.((Ryan(x) & Stew(y)) -> MadeFunOf(x,y))", "Ryan made funOfStewsFavoriteTVShow(Ryan,Steed) & InPublic(Ryan,Steed))", "(Fun(Ryan) & StewsFavoriteTVShow(Ryan))", "-(RyanMadeFunOfFavoriteTVShow(Ryan) & StewFavoriteTVShow(Stew))", "Ryan made funOfFavoriteTVShow(Ryan,Stew) & InPublic(Ryan,Stew))", "all x y.((Ryan(x) & Stew(y)) -> MadeFunOf(x,y))"]}
{"id": "enwn_validation_501", "nl": "Ryan made Stew feel ashamed and foolish in public.", "fol": "", "prediction": ["Ryan made Stew feel ashamed and foolish in public.", "all x y.((Ryan(x) & Stew(y)) -> (MadeStaySick(x,y) & MadeStayFoolish(y,x)))", "all x.((Ryan(x) & Stew(y)) -> (Shameful(y) & Foolish(y)))", "(MadeStewSick(Ryan) & MadeStewFeelShameful(Ryan) & MadeStewFoolish(Ryan))", "(Stayed(Ryan) & Stew(Stew) & Shameful(Stew) & Foolish(Stew))", "Ryan made Stew FeelShamefulAndFoolishInPublic(Ryan)", "(MakesStewFeltShamefulAndFoolishInPublic(Ryan))", "all x.(Ryan(x) -> (MadeStewSick(x) & MadeStewFoolish(x)))", "all x y.((Ryan(x) & Stew(y)) -> (Shameful(y) & Foolish(y)))", "Ryan made Stew feel ashamed and foolish in public.", "Ryan madeStewSickenedAndFoolishInPublic(Ryan)", "(StayedInPublic(Ryan) -> (MadeStewSick(Ryan) & MadeStewFeelSick(Ryan)))", "all x y.((Ryan(x) & Stew(y)) -> (HasSickened(y) & Fooky(y)))", "All x.(Ryan(x) -> (MakesStewSick(x) & MakesStewFoolish(x)))", "Ryan made Stew FeelShamefulAndFoolishInPublic(Ryan)", "Ryan made Stew feel ashamed and foolish in public."]}
{"id": "enwn_validation_502", "nl": "Ryan humiliated Stew.", "fol": "", "prediction": ["Ryan humiliatedStew.", "all x y.((Ryan(x) & Stew(y)) -> Humiliated(x,y))", "(HammedBy(Ryan,Stew))", "all x.((Ryan(x) & Stew(y)) -> Humiliated(x,y))", "(HammeredByRyan(Ryan,Stew))", "Ryan humiliatedStew.", "(HasSteed(Ryan) & Humiliated(Ryan))", "(HammedByRyan(Ryan,Stew))", "-(Ryan(Ryan) & Stew(Stew))", "all x y.((Ryan(x) & Stew(y)) -> Humiliated(x,y))", "-(HammedBy(Ryan,Stew))", "(Hilarious(Ryan,Stew) & -HasStick(Ryan))", "Ryan humiliatedStew.", "Ryan humiliatedStew.", "Ryan humiliatedSteed.", "Ryan humiliatedStew."]}
{"id": "enwn_validation_503", "nl": "You should not humiliate someone else.", "fol": "", "prediction": ["all x.((Another(x) & -Humorize(x)) -> -Humorize(x))", "all x y.((Person(x) & Humiliates(x,y)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x y.((Actor(x) & Humiliated(y)) -> -Has(x,y))", "all x.((Actor(x) & -Humorizes(x,y)) -> -Humorizes(x,y))", "you should not humiliate someone else.", "all x.((HasAnother(x) & -HasAnother(x)) -> -HasAnother(x))", "all x.((Another(x) & -Humorize(x)) -> -Humorize(x))", "all x y.((Has(x,y) & Person(y)) -> -Has(x,y))", "-HumorizeAnother(x)", "all x y.((Another(x) & Person(y)) -> -Humorize(x,y))", "(-Honors(e) & Humiliates(e))", "-HasHabitat(x)", "-(HabitsAnother(x))", "all x.((Person(x) & -Humorize(x)) -> -Humorize(x))", "(-Habits(you,Person))", "-HumorizeAnother(you)"]}
{"id": "enwn_validation_504", "nl": "Ryan should not have humiliated Stew.", "fol": "", "prediction": ["all x.((Ryan(x) & Stew(y)) -> -Hammed(x,y))", "Ryan should not have humiliatedStew.", "(HasSteed(Ryan,Steed) & -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHa", "-(HammedStew(Ryan) & -Hungry(Ryan))", "all x y.((Ryan(x) & Stew(y)) -> -Hammed(x,y))", "(-HammedStew(Ryan))", "(HammedStew(Ryan) & -Hungry(Ryan))", "((Ryan(Ryan) & Stew(Stew)) -> -Humorized(Ryan))", "Stew should not have humiliated Ryan.", "all x.((Ryan(x) & Stew(y)) -> -HasHumiliated(x,y))", "-(HasHummeredStew(Ryan) & Stew(Stew))", "Ryan should not have humiliatedStew.", "-HasHummeredStew(Ryan,Steed)", "all x.((Ryan(x) & Stew(s)) -> -Humorized(x,s))", "Ryan should not have humiliatedStew.", "Ryan should not have humiliatedStew."]}
{"id": "enwn_validation_505", "nl": "Henry was dumped by Chloe and thought it was unfair of her so he is planning to deface her Facebook page.", "fol": "", "prediction": ["all x y.((Henry(x) & Chloe(y) & DumpedBy(x,y)) -> PlannedToDefaceFacebookPage(x,y))", "(DumpedByChloe(Henry) & ThoughtUnfair(Henry) & PlannedToDefaceFacebook(Henry,Facebook))", "(DummpedByChloe(Henry) & ThoughtUnfair(Henry) & PlannedToDefaceFacebookPage(Henry))", "-(DumpedByChloe(Henry) & ThoughtUnfair(Henry) & PlannedToDefaceFacebookPage(Henry,Chloe))", "all x y.((Henry(x) & Chloe(y)) -> (DumpedBy(x,y) & Unfair(y) & PlannedToDefaceFacebookPage(x,y)))", "all x.((Henry(x) & DumpedByChloe(x) & Unfair(x)) -> PlannedToDefeatFacebookPage(x))", "-(Henry(Henry) & DumpedByChloe(Henry) & ThoughtUnfair(Henry) & PlannedToDefaceFacebookPage(Henry,Henry)))", "(DumpedByChloe(Henry,Chloe) & ThoughtUnfair(Henry,Chloe) & PlansToDefaceFacebookPage(Henry,Chloe))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (DumpedBy(x,y) & Unfair(y) & PlannedToDefeat(x,z)))", "(DumpedByChloe(Henry) & ThoughtUnfair(Henry) & PlansToDefaceFacebookPage(Henry))", "(DummpedByChloe(Henry) & ThoughtUnfair(Henry) & PlansToDefaceFacebookPage(Henry))", "Henry was dumped by Chloe and thought it was unfair(Henry,FacebookPage) -> PlannedDeface(Henry,FacebookPage))", "(DumpedByChloe(Harry) & ThoughtUnfair(Harry) & PlannedToDefeatFacebook(Harry,Chloe))", "all x y.((Henry(x) & Chloe(y) & DumpedBy(x,y)) -> (PlansDeface(x,y)))", "all x.((Henry(x) & DumpedByChloe(x) & Unfair(x)) -> PlansToDefaceFacebookPage(x))", "(DumpedByChloe(Henry) & ThoughtUnfair(Henry) & PlannedToDefeatFacebook(Henry,FacebookPage))"]}
{"id": "enwn_validation_506", "nl": "If someone does something to you that feels unfair then you feel wronged by that person.", "fol": "", "prediction": ["all x.((DoesUnfairThing(x) & FeelsUnfair(x)) -> FeelsWorstBy(x))", "all x y.((Person(x) & Person(y) & DoesUnfairThing(x,y)) -> FeelsWorst(x,y))", "all x.((Person(x) & DoesUnfairThing(x)) -> FeelsWorst(x))", "all x y.((Does(x,y) & Person(y) & FeelsUnfair(x)) -> FeelsWorst(y))", "all x.((DoesUnfairToYou(x) & FeelsUnfairToYou(x)) -> FeelsWorstBy(x))", "all x.((Person(x) & DoesUnfairThing(x)) -> FeelsWorst(x))", "all x y.((Person(x) & Person(y) & DoesUnfairThing(x,y)) -> FeelsWorst(x,y))", "(Unfair(Person) & DoesToYou(Person))", "all x.((Does(x,y) & FeelsUnfair(y)) -> FeelsWorstBy(x,y))", "-(DoesUnfairToYou(x) & FeelsUnfairToYou(x)))", "all x y z.((Person(x) & Person(y) & DoesUnfairTo(x,y) & FeelsUnrighted(x,z)) -> FeelsWorst(x,y))", "all x.((Person(x) & Dose(x,y) & FeelsUnfair(y)) -> FeelsWorst(x,y))", "all x y.((Person(x) & DoesUnfairTo(x,y)) -> FeelsWorst(x,y))", "all x y.((Does(x,y) & Person(y) & FeelsUnfair(x)) -> FeelsWorstBy(x,y))", "all x.((DoesToYou(x) & FeelsUnfair(x)) -> FeelsWorstBy(x))", "all x.((Person(x) & DoesUnfairThing(x)) -> FeelsWorstBy(x,Person))"]}
{"id": "enwn_validation_507", "nl": "Defacing someone's social media page is a way of harming them.", "fol": "", "prediction": ["all x y.((SocialMediaPage(x) & Person(y) & Defacing(x,y)) -> Harms(x,y))", "all x.(DefacingSocialMediaPage(x) -> Harms(x))", "all x y.((Staff(x) & SocialMediaPage(y) & Defacing(x,y)) -> Harms(x,y))", "all x y.((SocialMediaPage(x) & Person(y) & Defacing(x,y)) -> Harms(x,y))", "all x y z.((SocialMediaPage(x) & Person(y) & SocialMediaPage(z) & Defacing(x,y,z)) -> Harms(y,y))", "all x.((SocialMediaPage(x) & Defacing(x)) -> Harms(x))", "all x.((DefacingSocialMediaPage(x) & Harms(x)) -> Defacing(x))", "(HarmingSocialMediaPage(defacing) -> HarmingSocialMediaPage(defacing))", "all x y.((StatusPage(x) & SocialMediaPage(y)) -> Harms(x,y))", "all x y z.((SocialMediaPage(x) & SocialMediaPage(y) & Person(z) & Defaced(x,y,z)) -> Harms(x,y,z))", "all x.(DefacingSocialMediaPage(x) -> HarmsPeople(x))", "all x y.((SocialMediaPage(x) & SocialMediaPage(y)) -> Harms(x,y))", "all x.((Defacing(x) & SocialMediaPage(x)) -> Harms(x))", "all x.(DefacingStatusMediaPage(x) -> HarmsPeople(x))", "all x.(DefacingSocialMediaPage(x) -> HarmsPeople(x))", "all x y.((SocialMediaPage(x) & Person(y)) -> Harms(x,y))"]}
{"id": "enwn_validation_508", "nl": "Planning to inflict harm on someone for a wrong suffered at their hand is called seeking revenge.", "fol": "", "prediction": ["all x.((PlansToInflictHarm(x) & Person(x) & WrongSufferedAtHand(x)) -> SeekingRevenge(x))", "all x y.((PlansToInflictHarm(x) & Person(y) & WrongSufferedAtHand(y)) -> SeekingRevenge(x))", "all x.((PlanningToInflictHarmOnPerson(x) & WrongSufferedAtHand(x)) -> SeekingRevenge(x))", "all x y.((PlanningToInflictHarm(x) & Person(y) & WrongSufferedAtHand(y)) -> SeekingRevenge(x))", "all x.((PlansToInflictHarmOn(x) & Person(x) & WrongSufferedAtHand(x)) -> SeekingRevenge(x))", "all x y.((PlansToInflictHarm(x,y) & Person(y) & WrongSufferedAtHand(y)) -> SeekingRevenge(x))", "all x y.((PlanningToInflictHarm(x,y) & Person(y) & WrongSufferedAtHand(y)) -> SeekingRevenge(x))", "all x.(PlansToInflictHarmOnPerson(x) -> SeekingRevenge(x))", "all x.((PlansToInflictHarm(x) & Person(x) & WrongSufferedAtHand(x)) -> SeekingRevenge(x))", "all x y z.((Planning(x) & Person(y) & Hand(z) & InflictsHarm(x,y,z)) -> Revenge(x))", "all x.((PlanningToInflictHarm(x) & Person(x) & WrongSufferedAtHand(x)) -> SeeksRevenge(x))", "all x y.((PlansToInflictHarmOn(x,y) & Person(y) & WrongSufferedAtHand(y)) -> SeekingRevenge(x))", "all x y.((Planning(x) & Person(y) & InflictsHarm(x,y)) -> SeekingRevenge(x))", "all x.((PlansToInflictHarmOnPerson(x) & WrongSufferedAtHand(x)) -> SeekingRevenge(x))", "all x.(PlanningToInflictHarmOnPersonForWrongSufferedAtHand(x) -> SeekingRevenge(x))", "all x.(PlansToInflictHarmOnPerson(x) -> SeekingRevenge(x))"]}
{"id": "enwn_validation_509", "nl": "It is better to heal than to hurt others.", "fol": "", "prediction": ["all x y.((Heal(x) & Illness(y)) -> BetterToHeal(x,y))", "all x y.((Healing(x) & HurtingOthers(y)) -> BetterToHeal(x,y))", "(BetterToHeal(x) & BetterToHail(x))", "all x.((Heal(x) & -Hail(x)) -> BetterToHeal(x))", "(BetterToHealThanHailOthers(x))", "exists x.(Heal(x) & BetterToHail(x))", "all x.((Heal(x) & BetterToHail(x)) -> IsBetterToHail(x))", "all x y.((Heal(x) & Hurt(y)) -> BetterToHeal(x,y))", "(BetterToHealThanIrresponsible(x))", "all x y.((Healing(x) & Illness(y)) -> Better(x,y))", "exists x.(Healing(x) & BetterToHeal(x) & BetterToHail(x))", "All x.((Healing(x) & -Healing(x)) -> IllnessOthers(x))", "exists x.(Heal(x) & -Hail(x))", "exists x.(Heal(x) & BetterToHeal(x) & BetterToHail(x))", "All x y.((Heal(x) & Illness(y)) -> Better(x,y))", "all x y.((Heal(x) & Injure(y)) -> Better(x,y))"]}
{"id": "enwn_validation_510", "nl": "When you feel wronged by someone, forgiving and forgetting is a way of healing.", "fol": "", "prediction": ["all x.((FeltWrongedBy(x) & ForgivesAndForgets(x)) -> Healing(x))", "all x y.((FeltWrongedBy(x,y) & Person(y)) -> ForgivesAndForgets(x,y))", "all x.((FeltWronged(x) & Forgives(x) & Forgets(x)) -> Healing(x))", "all x.((FeelWorst(x) & FeelsWrongedBy(x)) -> ForgivingAndForgiving(x))", "all x y.((FeelWronged(x) & Person(y)) -> ForgivesAndForgets(x,y))", "all x y.((FeltWronged(x) & Person(y)) -> ForgivesAndForgets(x,y))", "all x.((FeltWorst(x) & FeelsWrongedBy(x)) -> ForgivingAndForgiving(x))", "all x.((FeelWarnedBy(x) & FeelsWrongedBy(x)) -> ForgivingAndForgiving(x))", "all x y z.((FeltWorst(x) & Person(y) & Forgiveness(z) & Forgetting(z)) -> Healing(x))", "all x.((Forgives(x) & Forgets(x)) -> Healing(x))", "all x y.((Forgiveness(x) & Forgiveness(y) & Forgiveness(y)) -> Healing(x))", "all x y.((FeltOffended(x) & Person(y)) -> ForgivesAndForgets(x,y))", "all x y z.((FeltOffended(x) & Person(y) & Forgiveness(z) & Forgetting(z)) -> Healing(x))", "all x y.((FeelWrongedBy(x,y) & Person(y)) -> ForgivesAndForgets(x,y))", "all x.(FeltWrongedBy(x,y) -> ForgivesAndForgets(x,y))", "all x.((FeltWrongedBy(x) & Forgiven(x) & Forgotten(x)) -> Healing(x))"]}
{"id": "enwn_validation_511", "nl": "Henry felt wronged by Chloe and was planning to deface her Facebook page.", "fol": "", "prediction": ["all x y.((Henry(x) & Chloe(y)) -> (FeltWronged(x,y) & PlannedToDefeatFacebook(x,y)))", "Henry felt wronged by Chloe and planned to defaceFacebookPage(Henry,Chloe)", "(FeltWrongedByChloe(Henry) & PlannedToDefeatFacebook(Henry,Facebook))", "all x.((Henry(x) & Chloe(x)) -> (FeltWronged(x) & PlannedToDefeatFacebook(x)))", "(HenryFeltWrongedByChloe(Henry) & PlannedToDefeatFacebookPage(Henry,Chloe))", "(WrongedByChloe(Henry) & PlanningToDefeatFacebook(Henry,Chloe))", "(FeltWorstedByChloe(Henry) & PlannedToDefeatFacebookPage(Henry,Chloe))", "-(Henry(Henry) & Chloe(Chloe) & PlannedToDefaceFacebook(Henry,Chloe)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWrongedBy(x,y) & PlannedToDefeat(x,y)))", "((Henry(Henry) & Chloe(Chloe)) -> FeelsWronged(Henry)) & PlanningToDefaceFacebookPage(Henry))", "(FeltWrongedByChloe(Henry) & PlannedToDefaceFacebookPage(Henry))", "all x.((Henry(x) & Chloe(x)) -> (FeltWorst(x) & PlannedToDefeatFacebook(x)))", "Henry felt wronged by Chloe and planned to defaceFacebookPage.", "all x y.((Henry(x) & Chloe(y)) -> (FeltWorst(x,y) & PlannedToDefeatFacebookPage(x,y)))", "Henry felt wronged by Chloe and planned to deface Facebook Page.", "Henry felt wronged by Chloe and planned to defaceFacebookPage."]}
{"id": "enwn_validation_512", "nl": "Henry felt wronged by Chloe and was planning to inflict harm on her.", "fol": "", "prediction": ["all x y.((Henry(x) & Chloe(y)) -> (FeltWronged(x,y) & PlannedToInflictHarm(x,y)))", "(Henry(Henry) & Chloe(Chloe) & PlannedToInflictHarm(Henry,Chloe))", "(WrongedByChloe(Henry) & PlanningToInflictHarm(Henry,Chloe))", "all x.((Henry(x) & Chloe(x)) -> (FeltWorst(x) & PlannedToInflictHarm(x)))", "Henry felt wronged by Chloe and planned to inflictHarmOnHer(Hazard)", "all x y z.((Henry(x) & Chloe(y) & Chloe(z)) -> (FeltWronged(x,y) & PlannedToInflictHarm(x,z)))", "(FeltWorseByChloe(Henry) & PlannedToInflictHarmOn(Henry,Chloe))", "-(Henry(Henry) & Chloe(Chloe) & PlannedToInflictHarm(Henry,Chloe))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWorst(x,y) & PlannedToInflictHarm(x,y)))", "((Henry(Henry) & Chloe(Chloe)) -> FeelsWronged(Henry))", "(WorstedByChloe(Henry) & PlanningToInflictHarm(Henry,Chloe))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWrongedBy(x,y) & PlannedToInflictHarm(x,y)))", "all x.((Henry(x) & Chloe(x)) -> (FeltWorsted(x) & PlannedToInflictHarm(x)))", "Henry felt wronged by Chloe and planned to InflictHarmOnHer(Hazard)", "(Henry(Henry) & Chloe(Chloe) & PlannedToInflictHarm(Henry,Chloe))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWorsted(x,y) & PlannedToInflictHarm(x,y)))"]}
{"id": "enwn_validation_513", "nl": "Henry is seeking revenge.", "fol": "", "prediction": ["Henry seeksRevenge(Henry)", "(SeeksRevenge(Henry)", "all x.(Henry(x) -> SeeksRenemy(x))", "Henry seeksRenemy(Henry)", "(SeeksRenemy(Henry)", "Henry is seekingRevenge(Henry)", "all x.(Henry(x) -> SeekingRenemy(x))", "-SeeksRevenge(Henry)", "(SeeksRenemy(Henry,Henry))", "(SeeksRevenge(Henry,Henry))", "Henry is seekingRevenge(Henry)", "Henry seeksRenemy(Henry)", "(SeekingRenemy(Henry)", "Henry is seekingRevenge(Henry)", "Henry seeksRevenge(Henry,x)", "Henry is seekingRenemy."]}
{"id": "enwn_validation_514", "nl": "When you feel wronged, it is better to forgive and forget than to hurt those who wronged you.", "fol": "", "prediction": ["all x.((FeltWorsted(x) & BetterToForgive(x) & BetterToForget(x)) -> Irresponsible(x))", "all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> Irresponsible(x))", "all x y.((FeltWorsted(x) & FeelsWronged(x)) -> (Forgive(x) & Forget(x) & Hurt(y)))", "all x.((FeltWorn(x) & Forgives(x) & Forgets(x)) -> BetterToHave(x,y))", "all x y.((FeltWronged(x) & Person(y)) -> (BetterToForgive(x,y) & BetterToForget(x,y)))", "(all x.((FeltWorsted(x) & Forgive(x)) -> Forget(x)) & all y.((FeltWorsted(y) & Forgive(y))) -> Hurt(y)))", "all x y.((FeltWorn(x) & FeelsWronged(x)) -> (Forgive(x,y) & Forget(x,y) & Hurt(x,y)))", "all x.((FeltWronged(x) & BetterToForgiveAndForgetThanHasMore(x)) -> Irresponsible(x))", "all x.((FeelWronged(x) & Forgive(x) & Forget(x)) -> BetterToHave(x,y))", "all x y.((FeelWronged(x) & Feels(x,y)) -> (Forgive(x) & Forget(x) & Hurt(y)))", "all x y z.((FeltWorsted(x) & Forgiven(y) & Forgotten(z)) -> BetterToForgiveAndForget(x,y,z))", "all x.(FeltWorsted(x) -> (BetterToForgive(x) & BetterToForget(x) & BetterToHave(x,y)))", "all x.(FeltWronged(x) -> (BetterToForgive(x) & BetterToForget(x) & BetterToHave(x,y) & BetterToHave(x,z)))", "all x y.((FeltWorsted(x) & Person(y)) -> (BetterToForgive(x,y) & BetterToForget(x,y)))", "all x.((FeltWorsted(x) & BetterToForgiveAndForget(x)) -> BetterToHave(x,y))", "(all x.(Worst(x) -> ForgivesAndForgets(x)))"]}
{"id": "enwn_validation_515", "nl": "It is better to forgive and forget than to seek revenge.", "fol": "", "prediction": ["all x.((Forgives(x) & Forgets(x)) -> BetterToSeekRevenge(x))", "all x.((Forgive(x) & Forget(x)) -> BetterToSeekRevenge(x))", "all x y.((Forgiveness(x) & Forget(x)) -> BetterToSeekRevenge(x,y))", "(BetterToForgive(x) & BetterToForget(x) & BetterToSeekRevenge(x))", "(BetterToForgiveAndForgetThanSeekRevenge(x))", "all x y.((Forgiveness(x) & Forgiveness(y)) -> BetterToSeekRevenge(x,y))", "(BetterToForgivenAndGone(x) & BetterToSeekRevenge(x))", "all x.((Forgives(x) & Forgets(x)) -> SeeksRevenge(x))", "exists x.(Forgiveness(x) & Forget(x) & -SeekRevenge(x))", "all x.((Forgiveness(x) & Forget(x)) -> BetterToSeekRevenge(x))", "all x y.((Forgiven(x) & Forgotten(y)) -> BetterToSeekRevenge(x,y))", "exists x.(Forgiven(x) & Forgotten(x) & Forgotten(x) & Forgotten(x) & Forgotten(x) & Forgotten(x))", "(BetterToForgiveAndForgetThanSeekRevenge(x))", "all x y.((Forgives(x) & Forgets(x)) -> BetterToSeekRevenge(y))", "All x.((Forgiven(x) & Forgotten(x) & Forgotten(x)) -> SeekRevenge(x))", "exists x.(Forgiveness(x) & Forget(x) & -SeekRevenge(x))"]}
{"id": "enwn_validation_516", "nl": "Henry should forgive and forget instead of seeking revenge.", "fol": "", "prediction": ["all x.(Henry(x) -> (Forgive(x) & Forget(x) & -SeekRevenge(x)))", "(Forgive(Henry) & Forget(Henry) & -SeekRevenge(Henry))", "(ForgivesAndForgets(Henry) & -SeeksRevenge(Henry))", "all x y.((Henry(x) & Forgive(x) & Forget(x)) -> -SeeksRevenge(x,y))", "Henry should forgive and forget instead of seekingRevenge(Henry)", "(SeekingRevenge(Henry,Henry) -> ForgivesAndForgets(Henry,Henry))", "all x.(Henry(x) -> (Forgive(x) & Forget(x) & -SeekRevenge(x)))", "(SeeksRevenge(Henry) -> ForgivesAndForgets(Henry,Henry))", "Henry shouldforgiveAndForget(Henry)", "all x.(Henry(x) -> (Forgives(x) & Forgets(x)))", "-(Henry(Henry) & Forgives(Henry) & Forgets(Henry))", "Henry should Forgive and Forget instead ofSeekingRevenge(Henry,SeeksRevenge)", "all x y.((Henry(x) & Forgive(x,y) & Forget(x,y)) -> RatherThanSeekRevenge(x))", "all x.((Henry(x) & Forgives(x) & Forgets(x)) -> -SeeksRevenge(x))", "(ForgivenAndForgotten(Henry) & -SeeksRevenge(Henry))", "all x.(Henry(x) -> (Forgive(x) & Forget(x) & -SeekRenemy(x)))"]}
{"id": "enwn_validation_517", "nl": "Slandering is damaging to a person's reputation.", "fol": "", "prediction": ["all x.(Slandering(x) -> DamagesReputation(x))", "all x y.((Person(x) & Slandering(y)) -> DamagedToReputation(x,y))", "all x.(Slandering(x) -> DamagedToReputation(x))", "all x y.((Person(x) & Slandering(y)) -> DamagesReputation(x,y))", "all x y z.((Person(x) & Slandering(y) & Reputation(z)) -> Damaged(y,z))", "all x y.((Slandering(x) & Person(y)) -> DamagedToReputation(x,y))", "all x.(Slandering(x) -> DamagesReputation(x))", "all x y.((Person(x) & Slandering(y)) -> DamagedToReputation(x,y))", "all x y.((Slanderer(x) & Person(y) & Disabling(x,y)) -> DamagesReputation(x,y))", "all x y.((Person(x) & Slandering(y) & Disabling(x,y)) -> DamagesReputation(x,y))", "all x.(Slandering(x) -> DamagedToReputation(x))", "all x y z.((Person(x) & Slandering(y) & Reputation(z)) -> Damaged(y,z))", "all x.(Slandering(x) -> DamagesReputation(x))", "all x.(Slandering(x) -> DamagedToReputation(x))", "all x.(Slandering(x) -> DamagesReputation(x))", "all x.(Slandering(x) -> DamagedToReputation(x))"]}
{"id": "enwn_validation_518", "nl": "Damaging someone's reputation is harmful to them.", "fol": "", "prediction": ["all x y.((Damaging(x) & Person(y)) -> HarmfulToReputation(x,y))", "all x.(DamagingReputation(x) -> HarmfulToReputation(x))", "all x y.((Person(x) & Person(y) & DamagingReputation(x,y)) -> HarmfulTo(x,y))", "all x.((DamagingReputation(x) & Person(x)) -> HarmfulToReputation(x))", "all x y z.((Damaging(x) & Person(y) & Reputation(z)) -> HarmfulTo(x,y,z))", "all x y.((Damaging(x) & Person(y)) -> HarmfulToReputation(x,y))", "all x y.((DamagingReputation(x) & Person(y)) -> HarmfulTo(y,x))", "(DamagingReputation(danger) -> HarmfulToReputation(danger,danger,danger))", "all x.(DamagingReputation(x) -> HarmfulTo(x))", "all x y.((Person(x) & Reputation(y) & Damaging(x,y)) -> HarmfulTo(x,y))", "all x.((DamagingReputation(x) & Person(x)) -> HarmfulTo(x,y))", "all x.(DamagingReputation(x) -> HarmfulToReputation(x))", "all x y z.((Damaging(x) & Person(y) & Reputation(z)) -> HarmfulTo(y,z))", "all x y.((DamagingReputation(x) & Person(y)) -> HarmfulTo(x,y))", "all x.(DamagingReputation(x) -> HarmfulToReputation(x))", "all x.(DamagingReputation(x) -> HarmfulToPerson(x))"]}
{"id": "enwn_validation_519", "nl": "Paul slandered Jimmy in his magazine to increase sales.", "fol": "", "prediction": ["Paul slandered Jimmy in his magazine to increase sales.", "all x y.((Paul(x) & Jimmy(y)) -> SlanderedInMagazine(x,y))", "(Slandered(Paul,Jimmy) & IncreasedSales(Paul,Jimmy))", "(SlanderedInMagazine(Paul,Jimmy) & IncreasedSales(Paul,Jimmy))", "all x y z.((Paul(x) & Jimmy(y) & Magazine(z) & Slandered(x,y)) -> IncreasedSales(x,z))", "all x y.((Paul(x) & Jimmy(y)) -> SlanderedInMagazineToIncreaseSales(x,y))", "-(PaulSlanderedJimmy(Paul) & InMagazine(Paul))", "Paul slandered Jimmy in his magazine to increase sales.", "Paul has slandered Jimmy in his magazine to increase sales.", "(Slandered(Paul,Jimmy) & IncreasedSales(Paul,Jimmy))", "(SlanderedInMagazine(Paul,Jimmy) & IncreasedSales(Paul,Jimmy))", "Paul slandered Jimmy in his magazine to increase sales.", "Paul slandered Jimmy to increase sales.", "all x y.((Paul(x) & Jimmy(y)) -> SlanderedInMagazine(x,y))", "Paul slandered Jimmy in magazine to increase sales.", "Paul slandered Jimmy to increase sales."]}
{"id": "enwn_validation_520", "nl": "Slandering someone is harmful to them.", "fol": "", "prediction": ["all x y.((Slanderer(x) & Person(y)) -> HarmfulTo(x,y))", "all x.(Slandering(x) -> HarmfulTo(x,y))", "all x y.((Slanderer(x) & Person(y)) -> HarmfulTo(x,y))", "all x.(Slandering(x) -> HarmfulToPerson(x))", "all x y z.((Slanderer(x) & Person(y) & Person(z)) -> HarmfulTo(x,y,z))", "all x y.((Person(x) & Slanderer(y)) -> HarmfulTo(x,y))", "all x.((Slandering(x) & Person(x)) -> HarmfulTo(x,y))", "all x y.((Slanderer(x) & Person(y)) -> HarmfulTo(x,y))", "all x.(Slandering(x) -> HarmfulToPerson(x))", "All x y.((Person(x) & Slandering(x,y)) -> HarmfulTo(x,y))", "all x y.((Slanderer(x) & Person(y)) -> HarmfulTo(x,y))", "all x.(Slanders(x) -> HarmfulToPeople(x))", "all x.(Slandering(x) -> HarmfulToYou(x))", "all x y.((Slandering(x) & Person(y)) -> HarmfulTo(x,y))", "all x.(Slanders(x) -> HarmfulToPerson(x))", "all x.(Slandering(x) -> HarmfulToOne(x))"]}
{"id": "enwn_validation_521", "nl": "You should not slander someone.", "fol": "", "prediction": ["all x.(Slander(x) -> -Slander(x))", "all x.((Slander(x) & Person(x)) -> -Slander(x))", "all x y.((Slander(x) & Person(y)) -> -Slander(x,y))", "all x.((Person(x) & -Slander(x)) -> -Slander(x))", "-SlanderPersonnel(x)", "(all x.(Slanderer(x) -> -Slander(x)))", "all x y.((Slander(x) & Person(y)) -> -Slander(x,y))", "all x.(Slander(x) -> -Slander(x))", "all x y.((Person(x) & Slander(y)) -> -Slander(x,y))", "-(Slander(x))", "-SlanderSomeone(x)", "-SlanderPersonnel(x)", "all x.(Slander(x) -> -(Slander(x) | Slander(x)))", "you should notslander(you,or someone(x))", "all x y.((Slanderer(x) & Person(y)) -> -Slander(x,y))", "(-Slander(you))"]}
{"id": "enwn_validation_522", "nl": "Paul should not have slandered Jimmy.", "fol": "", "prediction": ["all x.((Paul(x) & Jimmy(y)) -> -Slandered(x,y))", "Paul should not have slanderedJimmy.", "-SlanderedJimmy(Paul)", "Paul -shouldn'tHasSlanderedJimmy(Paul)", "-(PaulSlanderedJimmy(Paul))", "(all x.((Paul(x) & Jimmy(y)) -> -Slandered(x,y)))", "all x.((Paul(x) & Jimmy(y)) -> -Slandered(x,y))", "Paul should not have slanderedJimmy.", "(-SlanderedJimmy(Paul))", "-(PaulSlanderedJimmy(Paul))", "all x.((Paul(x) & Jimmy(y)) -> -Slandered(x,y))", "Paul should not have slanderedJimmy.", "-HasSlanderedJimmy(Paul)", "(-SlanderedJimmy(Paul))", "all x.((Paul(x) & Jimmy(y)) -> -Slandered(x,y))", "Paul should not have slandered Jimmy."]}
{"id": "enwn_validation_523", "nl": "Mocking someone is intentionally aggravating them.", "fol": "", "prediction": ["all x.(Mocking(x) -> IntentionallyAggravates(x))", "all x y.((Mocking(x) & Person(y)) -> IntentionallyAggravates(x,y))", "all x.(Mocking(x) -> IntentionallyAggravates(x))", "all x y.((Mocking(x) & Person(y)) -> IntentionallyAggravates(x,y))", "all x y z.((Mocking(x) & Person(y) & Person(z)) -> AggravatesIntentionally(x,y,z))", "(IntentionallyAggravates(Mocking(Mocking(MockingPerson(MockingPerson))", "all x y.((Mocking(x) & Person(y)) -> AggravatesIntentionally(x,y))", "all x.(Mocking(x) -> IntentionallyAggravates(x))", "All x y z.((Mocking(x) & Person(y) & Person(z)) -> Aggravates(x,y,z))", "all x.(Mocking(x) -> Aggravates(x))", "all x y.((Mocks(x,y) & Person(y)) -> IntentionallyAggravates(x,y))", "all x y.((Mocking(x) & Person(y)) -> IntentionallyAggravates(x,y))", "all x y.((Mocking(x) & Person(y)) -> Aggravates(x,y))", "all x.(Mocking(x) -> IntentionallyAggravates(x))", "all x.(Mocking(x) -> Aggravates(x))", "all x.(Mocking(x) -> AggravatesIntentionally(x))"]}
{"id": "enwn_validation_524", "nl": "Intentionally aggravating someone is not encouraging positive discourse.", "fol": "", "prediction": ["all x.((IntentionallyAggravates(x) & Person(x)) -> -EncouragesPositiveDiscourse(x))", "all x y.((IntentionallyAggravates(x,y) & Person(y)) -> -EncouragesPositiveDiscourse(x))", "all x.(IntentionallyAggravates(x) -> -EncouragesPositiveDiscourse(x))", "all x.((IntentionallyAggravates(x) & Person(x)) -> -EncouragesPositiveDiscourse(x))", "all x y.((IntentionallyAggravates(x,y) & Person(y)) -> -EncouragesPositiveDiscourse(x,y))", "all x y.((IntentionallyAggravating(x) & Person(y)) -> -EncouragesPositiveDiscourse(x,y))", "all x.((Aggravates(x) & Intentionally(x)) -> -EncouragesPositiveDiscourse(x))", "All x y z.((IntentionallyAggravate(x,y) & Person(z)) -> -EncouragesPositiveDiscourse(x,z))", "all x.(Aggravates(x) -> -EncouragesPositiveDiscourse(x))", "all x.((IntentionallyAggravates(x) & Person(x)) -> -EncouragesPositiveDiscourse(x))", "all x.(IntentionallyAggravates(x) -> -EncouragesPositiveDiscourse(x))", "all x y.((IntentionallyAggravate(x,y) & Person(y)) -> -EncouragesPositiveDiscourse(x,y))", "all x.((IntentionallyAggravating(x) & Person(y)) -> -EncouragesPositiveDiscourse(x,y))", "all x y.((IntentionallyAggravating(x) & Person(y)) -> -EncouragesPositiveDiscourse(x,y))", "all x y.((IntentionallyAggravates(x,y) & Person(y)) -> -EncouragesPositiveDiscourse(x,y))", "all x.((IntentionallyAggravate(x) & Person(x)) -> -EncouragesPositiveDiscourse(x))"]}
{"id": "enwn_validation_525", "nl": "We should encourage positive discourse.", "fol": "", "prediction": ["all x.((WearsPositiveDiscourse(x)) -> Encourages(x))", "all x.((CultivatePositiveDiscourse(x)) -> Encourages(x))", "all x y.((PositiveDiscourse(x) & PositiveDiscourse(y)) -> Encouraged(x,y))", "-(EncouragesPositiveDiscourse(x))", "all x.((WearsPositiveDiscourse(x)) -> Encourages(x))", "all x.(PositiveDiscourse(x) -> Encourages(x))", "all x.((SupportsPositiveDiscourse(x)) -> Encourages(x,y))", "all x.((WearsPositiveDiscourse(x) & Encourages(x,y)) -> Encourages(x,z))", "(all x.((Discourse(x) & Positive(x)) -> Encouraged(x)))", "all x.((PositiveDiscourse(x)) -> Encourages(x))", "all x y.((PositiveDiscourse(x) & PositiveDiscourse(y)) -> Encourages(x,y))", "-(EncouragesPositiveDiscourse(x) & PositiveDiscourse(x))", "all x.(PositiveDiscourse(x) -> Encourages(x))", "All x.((Concert(x) & Positive(x)) -> Encourages(x))", "all x y.((PositiveDiscourse(x) & PositiveDiscourse(y)) -> Encouraged(x,y))", "All x.(PropositiveDiscourse(x) -> Encourages(x))"]}
{"id": "enwn_validation_526", "nl": "Walter mocked the rally participants because he disagreed with their political ideology.", "fol": "", "prediction": ["all x y.((RallyParticipant(x) & Walter(y)) -> (Mocked(y,x) & DisagreesWithPoliticalIdeology(y,x)))", "(Mocked(Walter,RallyParticipants) & DefiedPoliticalIdeology(Walter))", "all x y z.((RallyParticipant(x) & Walter(y) & PoliticalIdeology(z)) -> Mocked(y,z))", "Walter mocked rally participants because he disagreed with their political ideology.", "-(MockedRallyParticipants(Walter,Rally) & DisagreesWithPoliticalIdeology(Walter))", "(MockedRallyParticipants(Walter) & DefiedPoliticalIdeology(Walter))", "all x y z.((Walter(x) & RallyParticipant(y) & PoliticalIdeology(z) & DisagreesWith(x,y,z)) -> Mocked(x,y))", "all x.((Walter(x) & RallyParticipant(x) & DisagreesWithPoliticalIdeology(x)) -> Mocked(x,y))", "all x y.((RallyParticipant(x) & Walter(y)) -> (Mocked(y,x) & DefiedPoliticalIdeology(y,x)))", "(Mocked(Walter,RallyParticipant) & DisagreesWithPoliticalIdeology(Walter))", "all x y.((RallyParticipant(x) & Walter(y) & DisagreesWithPoliticalIdeology(y,x)) -> Mocked(y,x))", "-(MockedRallyParticipants(Walter,Rally) & UnconvincedPoliticalIdeology(Walter))", "(MockedRallyParticipants(Walter,Mocking(Walter,PoliticalIdeology) & DisagreesWith(Walter,PoliticalIdeology))", "(Mocked(Walter,RallyParticipants) -> DisagreesWithPoliticalIdeology(Walter,RallyParticipants))", "Walter mocked rally participants because he disagreed with their political ideology.", "all x y.((RallyParticipant(x) & Walter(y)) -> (Mocked(x,y) & UnconvincedWithPoliticalIdeology(y)))"]}
{"id": "enwn_validation_527", "nl": "You shouldn't intentionally aggravate people.", "fol": "", "prediction": ["all x.((IntentionallyAggravate(x) & Person(x)) -> -IntentionallyAggravate(x))", "all x.((Person(x) & -IntentionallyAggravate(x)) -> -IntentionallyAggravate(x))", "-IntentionallyAggravatePeople(x)", "all x y.((IntentionallyAggravate(x,y)) -> -IntentionallyAggravate(x,y))", "-(IntentionallyAggravatePeople(x))", "all x.(IntentionallyAggravate(x) -> -IntentionallyAggravate(x))", "all x y.((Person(x) & Person(y)) -> -IntentionallyAggravate(x,y))", "all x.((IntentionallyAggravatePeople(x)) -> -IntentionallyAggravatePeople(x))", "all x.((IntentionallyAggravate(x) & People(x)) -> -IntentionallyAggravate(x))", "all x.((Person(x) & -IntentionallyAggravate(x)) -> -IntentionallyAggravate(x))", "(-IntentionallyAggravate(x) -> -IntentionallyAggravate(x))", "-IntentionallyAggravatePeople(x)", "exists x.(IntentionallyAggravate(x) & -IntentionallyAggravate(x))", "-(IntentionallyAggravatePeople(x))", "all x.((Person(x) & -IntentionallyAggravate(x)) -> -IntentionallyAggravate(x))", "(-IntentionallyAggravatePeople(x))"]}
{"id": "enwn_validation_528", "nl": "You shouldn't mock people.", "fol": "", "prediction": ["all x.(MockPeople(x) -> -MockPeople(x))", "all x.((MockPeople(x)) -> -Mock(x))", "you shouldn't mockpeople.", "all x y.((Mock(x,y) & Person(y)) -> -Mock(x,y))", "all x.(MockPeople(x) -> -MockPeople(x))", "-MockPeople(x)", "all x.((MocksPeople(x)) -> -MocksPeople(x))", "(MockPeople(m) & -Mock(m))", "all x.(MocksPeople(x) -> -MocksPeople(x))", "all x y.((MockPeople(x) & Person(y)) -> -Mock(x,y))", "(MockPeople(you) & -MockPeople(you))", "-MockPeople(x)", "all x.(MockPeople(x) -> -Mock(x))", "exists x.(Mock(x) & Person(x))", "-MockPeople(you)", "exists x.(Mock(x) & People(x))"]}
{"id": "enwn_validation_529", "nl": "Walter should not have mocked the rally participants.", "fol": "", "prediction": ["all x.((Walter(x) & RallyParticipant(x)) -> -Mocked(x,RallyParticipants))", "(MockedRallyParticipants(Walter) -> -MockedRallyParticipants(Walter))", "-MockedRallyParticipants(Walter)", "all x y.((Walter(x) & RallyParticipant(y)) -> -Mocked(x,y))", "Walter should not have mocked rally participants.", "Walter ne should have mocked rally participants.", "all x.((Walter(x) & RallyParticipant(x)) -> -Mocked(x,RallyParticipants))", "-MockedRallyParticipants(Walter)", "(MockedRallyParticipants(Walter) -> -MockedRallyParticipants(Walter))", "(MockedRallyParticipants(Walter) | -MockedRallyParticipants(Walter)))", "Walter should not have mocked rally participants.", "-MockedRallyParticipants(Walter)", "Walter should not have mocked rally participants.", "(MockedRallyParticipants(Walter) & -MockedRallyParticipants(Walter))", "-MockedRallyParticipants(Walter,Walter)", "Walter should not have mocked rally participants."]}
{"id": "enwn_validation_530", "nl": "You should not harm others.", "fol": "", "prediction": ["all x.((You(x) & -HarmOthers(x)) -> -HarmOthers(x))", "all x.((HasArea(x) & -HasArea(x)) -> -HasArea(x))", "all x.((You(x) & -Harm(x)) -> -Harm(x))", "all x y.((You(x) & Other(y)) -> -Harm(x,y))", "all x.(Has(x,y) -> -Has(x,y))", "all x.((You(x) & -HarmOthers(x)) -> -HarmsOthers(x))", "all x.((HasAlternative(x) & -HasAlternative(x)) -> -HasAlternative(x))", "-HasHazard(x)", "all x y.((Has(x,y) & Other(y)) -> -Has(x,y))", "all x.((You(x) & -HasAlternatives(x)) -> -HasAlternatives(x))", "-HarmOthers(you)", "-HasHazards(x)", "All x.(HasAlternative(x) -> -HasAlternative(x))", "(-HarmOthers(you))", "all x y.((You(x) & Other(y)) -> -Harm(x,y))", "(-HarmOthers(you))"]}
{"id": "enwn_validation_531", "nl": "Being considerate means you are careful to avoid hurting others.", "fol": "", "prediction": ["all x.((Creditful(x) & AvoidsHasingOthers(x)) -> Careful(x))", "all x.((Clear(x) & AvoidsHasingOthers(x)) -> Considerable(x))", "all x.((Dignified(x) & CarefulToAvoidHasToOthers(x)) -> CarefulToAvoidHasToOthers(x))", "all x.((Creditful(x) & CarefulToAvoidHasAlternatives(x)) -> CarefulToAvoidHasAlternatives(x))", "all x.(Dignified(x) -> (ClearToHas(x,Others) & AvoidsHas(x,Others)))", "all x y.((Creditful(x) & Other(y)) -> AvoidsHasing(x,y))", "all x.((Person(x) & Considerable(x)) -> CarefulToAvoidHasToOthers(x))", "all x y.((Dignified(x) & Other(y)) -> CarefulToAvoidHasIllness(x,y))", "all x.(Decent(x) -> (ClearToAvoidHasIllness(x) & CarefulToAvoidHasIllness(x)))", "all x.(Dignified(x) -> (CourageousToAvoidHasIllness(x)))", "(CelebrateToOthers(c) -> AvoidHasHasIllness(c))", "all x y.((Creditful(x) & Other(y)) -> AvoidsHassing(x,y))", "all x y.((Pretty(x) & Person(y)) -> CarefulToAvoidHasIllness(x,y))", "all x.((Dignified(x) & Careful(x)) -> AvoidsHasingOthers(x))", "all x.(Celebrate(x) -> AvoidsHasingOthers(x))", "all x.(Dignified(x) -> CarefulToAvoidHidingOthers(x))"]}
{"id": "enwn_validation_532", "nl": "If you do something that is inconvenient for others then you are being inconsiderate.", "fol": "", "prediction": ["all x.((DoesInconvenientForOthers(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((DoesInconvenientForOthers(x)) -> Inconsiderate(x))", "all x.((DoesInconvenient(x) & ForOthers(x)) -> Inconsiderate(x))", "all x y.((DoesInconvenient(x) & Inconsiderate(y)) -> Inconsiderate(x))", "all x.((DoingInconvenientForOthers(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((DoesInconvenientForOthers(x)) -> Inconsiderate(x))", "all x.((InconvenientForOthers(x) & Doing(x)) -> Inconsiderate(x))", "all x y.((DoesInconvenientForOthers(x) & Inconsiderate(y)) -> Inconsiderate(x))", "all x y.((DoesInconvenient(x) & Other(y) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((DoesInconvenientForOthers(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.(Inconsiderate(x) -> InconvenientForOthers(x))", "all x y.((Doing(x) & InconvenientForOthers(x) & Inconsiderate(y)) -> Inconsiderate(y))", "all x.((DoesInconvenientForOthers(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x y.((DoesInconvenientForOthers(x) & Inconsiderate(y)) -> Inconsiderate(y))", "all x.((DoesInconvenient(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.(Inconsiderate(x) -> InconvenientForOthers(x))"]}
{"id": "enwn_validation_533", "nl": "Justin quit his job after giving notice one day in advance.", "fol": "", "prediction": ["Justin QuitsJobAfterGivingNoticeOneDayInAdvance(Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Ju", "all x.((Juliet(x) & DayInAdvance(x)) -> Quits(x))", "Justin quitsJacksonAfterGivingNotificationOneDayInAdvance(Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Juliet,Julie", "Justin quitsJuliets(Juliet) -> (DayInAdvance(Juliet) & DayInAdvance(Juliet)))", "all x y.((Judy(x) & Job(y) & GivesNotice(x,y)) -> Quits(x,y))", "(QuittingJuliet(Juliet) & DayInAdvance(Juliet))", "Justin quitsJuliet(Juliet) -> (DayInAdvance(Juliet) & DayInAdvance(Juliet)))", "Justin quitsJacksonAfterGivingNoticeOneDayInAdvance(Juliet,Juliet,Juliet))", "(QuitsJuliet(Juliet) -> GivesNotificationOneDayInAdvance(Juliet))", "all x.((Judy(x) & DayInAdvance(x)) -> QuitsJudy(x))", "-QuittingJulietAfterDayInAdvance(Juliet)", "Justin quits job after giving notice one day in advance.", "-Quits(Justin) -> (JulietsJob(Justin) & GivesNotification(Justin,DaysInAdvance)))", "all x.((Juliet(x) & GivesNotice(x,oneDayAverage)) -> Quits(x))", "(QuittingJuliet(Juliet) -> GivesNoticeOneDayInAdvance(Juliet))", "all x.((Judy(x) & DayInAdvance(x)) -> Quits(x,Judy))"]}
{"id": "enwn_validation_534", "nl": "Giving less than two weeks' notice before leaving your job is not enough warning.", "fol": "", "prediction": ["all x.((WeeklyNotification(x) & LessThanTwo(x)) -> -EnoughWarning(x))", "all x.((LessThanTwoWeeksNotification(x) & LeavesJob(x)) -> -EnoughWarning(x))", "all x.((FastNotification(x,2) & LessThanTwoWeeks(x)) -> -EnoughWarning(x))", "all x y.((FastNotification(x,y) & LessThanTwoWeeks(y)) -> -EnoughWarning(x))", "all x.((WeeklyNotification(x,2) & LeavesJob(x)) -> -EnoughWarning(x))", "(LessThanTwoWeeksNotification(x) -> -EnoughWarning(x))", "-EnoughWarning(-)", "all x.((GiveNearlyTwoWeeksNotification(x) & LeaveJob(x)) -> -EnoughWarning(x))", "All x y.((FastWeeks(x) & Job(y) & LessThanTwoWeeks(x,y)) -> -EnoughWarning(x))", "All x y.((Week(x) & Job(y) & LessThan(x,y)) -> -EnoughWarning(x))", "all x.((GivingLessThanTwoWeeksNotification(x) & LeavesJob(x)) -> -EnoughWarning(x))", "all x.((TwoWeeksNotification(x) & LeavesJob(x)) -> -EnoughWarning(x))", "all x.((FallingWeek(x) & LessThanTwoWeeks(x)) -> -EnoughWarning(x))", "all x.((LessThanTwoWeeksNotification(x)) -> -EnoughWarning(x))", "-EnoughWarning(x)", "-EnoughWarning(-2)"]}
{"id": "enwn_validation_535", "nl": "Someone leaving their job without sufficient warning is inconvenient for their coworkers.", "fol": "", "prediction": ["all x.((LeavingJob(x) & -SufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x y.((Person(x) & Job(y) & LeavesWithoutSufficientWarning(x,y)) -> InconvenientForCoworkers(x))", "all x.((Person(x) & LeavesJobWithoutSufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x y z.((Person(x) & Job(y) & Coworker(z) & LeavesWithoutSufficientWarning(x,y)) -> InconvenientFor(x,z))", "all x.((LeavingJob(x) & -SufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x.(LeavingWork(x) -> InconvenientForCoworkers(x))", "all x.((LeavingJobWithoutSufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x.(LeavingSalaryWithoutSufficientWarning(x) -> InconvenientForCoworkers(x))", "all x y.((Person(x) & Job(y) & LeavesWithoutSufficientWarning(x,y)) -> InconvenientForCoworkers(x))", "all x y.((SelfLeaving(x) & Job(y) & -SufficientWarning(x,y)) -> InconvenientForCoworkers(x))", "all x.((LeavingJobWithoutSufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x y.((Worker(x) & LeavesJobWithoutSufficientWarning(x,y)) -> InconvenientForCoworkers(x))", "all x y.((LaysJob(x,y) & -SufficientWarning(y)) -> InconvenientForCoworkers(x))", "exists x.(LeavingWork(x) & -SufficientWarning(x))", "exists x.(LaysJobWithoutSufficientWarning(x) & InconvenientForCoworkers(x))", "all x y.((Person(x) & Job(y) & LeavesWithoutSufficientWarning(x,y)) -> InconvenientForCoworkers(x))"]}
{"id": "enwn_validation_536", "nl": "You should be considerate.", "fol": "", "prediction": ["all x.((Client(x) & Careful(x)) -> ShouldBe(x))", "all x.(Censory(x) -> Been(x))", "all x.((StayClean(x) & Considerable(x)) -> Considerable(x))", "all x.(Conscious(x) -> ShouldBe(x))", "-Censual(x)", "-Disciplined(x)", "All x y.((Client(x) & Customer(y)) -> Considerable(x,y))", "All x.((You(x) & Considerable(x)) -> Considerable(x))", "all x.(Censual(x) -> -StaysInformed(x))", "all x.(Conscious(x) -> ShouldBe(x))", "all x.((Client(x) & Considerable(x)) -> ShouldBe(x))", "-Clean.", "all x.(Creditful(x) -> BeenAtHome(x))", "all x.(BeConscious(x) -> ShouldBe(x))", "All x.(Discipline(x) -> ShouldBe(x))", "all x.(Conscious(x) -> Considerable(x))"]}
{"id": "enwn_validation_537", "nl": "You should not inconvenience others.", "fol": "", "prediction": ["all x.((Inconvenient(x) & -Inconvenient(x)) -> -Inconvenient(x))", "all x.((You(x) & -Inconvenient(x)) -> -Inconvenient(x))", "all x.(Inconvenient(x) -> -Inconvenient(x))", "-InconvenientToOthers(x)", "all x.((Inconvenient(x) & -Inconvenient(x)) -> -Inconvenient(x))", "all x y.((Inconvenient(x) & Other(y)) -> -Inconvenient(x,y))", "all x y.((You(x) & Other(y)) -> -Inconvenient(x,y))", "all x.((IndignifyOthers(x)) -> -Indulge(x))", "All x.(IndignifyOthers(x) -> -(IndignifyOthers(x) & IndignifyOthers(x)))", "all x.(InconvenientToOthers(x) -> -InconvenientToOthers(x))", "-IndignifyOthers(x)", "all x.(Inconvenient(x) -> -Inconvenient(x))", "-InconvenientToOthers(x)", "(InconvenientToOthers(you) | InconvenientToOthers(you)))", "(-InconvenientToOthers(you))", "-IndignifyOthers(you)"]}
{"id": "enwn_validation_538", "nl": "Justin did not give enough warning before quitting.", "fol": "", "prediction": ["((Juliet(Juliet) & -EnoughWarning(Juliet)) -> Quits(Juliet))", "-(Juliet(Juliet) & GivesEnoughWarning(Juliet))", "all x.((Juliet(x) & -EnoughWarning(x)) -> Quits(x))", "(-EnoughWarning(Julian))", "all x.((Julian(x) & Quits(x)) -> -EnoughWarning(x))", "((Justin(Justin) & Quitting(Justin)) -> -GivedEnoughWarning(Justin)))", "Justin did notgiveEnoughWarningBeforeQuitting(Julian)", "-(Justin(Julie) & Quits(Julie))", "(-EnoughWarning(Justin) & Quitting(Justin))", "all x.((Justin(x) & Quits(x)) -> -GivesEnoughWarning(x))", "Justin neglectedssewading(n) & Quitting(n))", "Justin did notgiveEnoughWarning(Juliet)", "Justin neglectedsewading(n) & Quitting(n))", "(Limits(Julian) & -GivesEnoughWarning(Julian))", "-(Juliet(Juliet) & GivesEnoughWarning(Juliet))", "-(Justin(Julie) & Quits(Julie))"]}
{"id": "enwn_validation_539", "nl": "Justin quitting was inconvenient for his coworkers.", "fol": "", "prediction": ["all x.((Judy(x) & Coworkers(x)) -> InconvenientQuitting(x))", "all x y.((Judy(x) & Coworker(y)) -> Quitting(x,y))", "all x.(Quitting(x) -> InconvenientForCoworkers(x))", "Justin quitting was inconvenient for coworkers.", "(InconvenientForCoworkers(Justin) & JustinQuitting(Justin))", "-InconvenientForCoworkers(JustinQuitting)", "all x.((Justin(x) & Coworker(x)) -> InconvenientQuitting(x))", "all x.((Judy(x) & Coworker(x)) -> InconvenientQuitting(x))", "all x y.((Judy(x) & Coworker(y)) -> Quitting(x,y))", "Justin quitting was inconvenient for coworkers.", "(InconvenientForCoworkers(Justin)", "-InconvenientForCoworkers(Justin)", "all x y.((Judy(x) & Coworker(y)) -> InconvenientQuitting(x,y))", "all x.(Quitting(x) -> InconvenientForCoworkers(x))", "(InconvenientForCoworkers(Justin)", "(InconvenientForCoworkers(Juliet)"]}
{"id": "enwn_validation_540", "nl": "Justin should not have inconvenienced his coworkers.", "fol": "", "prediction": ["all x.((Juliet(x) & Coworkers(x)) -> -Inconvenient(x))", "all x y.((Juliet(x) & Coworker(y)) -> -Inconvenient(x,y))", "(IndignifiedCoworkers(Juliet) -> -Indulged(Juliet))", "-IndignifiedCoworkers(Juliet)", "Justin should not have inconveniently contacted his coworkers.", "-InconvenientToCoworkers(Juliet)", "all x.((Juliet(x) & Coworkers(x)) -> -Inconvenient(x))", "Justin should not have inconvenienced his coworkers.", "(IndignifiedCoworkers(Juliet) -> -IndulgedCoworkers(Juliet))", "(IndignifiedCoworkers(Justin) -> -IndulgedCoworkers(Justin))", "all x y.((Juliet(x) & Coworker(y)) -> -Inconvenient(x,y))", "Justin should not have inconveniently inconvenienced his coworkers.", "(InconvenientToCoworkers(Justin))", "all x.((Judy(x) & Coworkers(x)) -> -Inconvenient(x))", "-IndignifiedCoworkers(Juliet)", "all x.((Juliet(x) & Coworkers(y)) -> -Indignified(x,y))"]}
{"id": "enwn_validation_541", "nl": "If you're unreasonably angry at something taking too long, you're impatient.", "fol": "", "prediction": ["all x.((UnreasonablyAngry(x) & TooLong(x)) -> Impatient(x))", "all x.((Angry(x) & TakesTooLong(x)) -> Impatient(x))", "all x.((UnreasonablyAngry(x) & TakesTooLong(x)) -> Impatient(x))", "all x.((UnreasonablyAngryAt(x) & TooLong(x)) -> Impatient(x))", "(UnreasonablyAngryAtLong(x) -> Impatient(x))", "all x.((Angry(x) & TakesTooLong(x)) -> Impatient(x))", "all x y.((UnreasonablyAngry(x) & TooLong(y)) -> Impatient(x))", "all x.(UnreasonablyAngryAtLong(x) -> Impatient(x))", "all x.((UnreasonablyAngryAt(x) & TakesTooLong(x)) -> Impatient(x))", "all x y.((UnreasonablyAngryAt(x,y) & TooLong(y)) -> Impatient(x))", "all x y.((UnreasonablyAngry(x) & TakesTooLong(x)) -> Impatient(y))", "all x.((UnreasonablyAngry(x) & TooLong(x)) -> Impatient(x))", "all x.((AngryAtLong(x) & Unreasonably(x)) -> Impatient(x))", "all x.((Angry(x) & TakesTooLong(x)) -> Impatient(x))", "all x.(Impatient(x) -> (UnreasonablyAngryAtLong(x) & Impatient(x)))", "all x.(UnreasonablyAngry(x) -> Impatient(x))"]}
{"id": "enwn_validation_542", "nl": "Gabriel was angry at the server for taking too long even though the restaurant was understaffed.", "fol": "", "prediction": ["all x y.((Server(x) & Restaurant(y) & Understaffed(y)) -> Angerful(x,y))", "(Angry(Gabriel) & Server(Gabriel) & TooLong(Gabriel))", "all x y z.((Server(x) & Restaurant(y) & Server(z) & Understaffed(y)) -> Angerful(x,z))", "(AngryAtServer(Gabriel) & TooLong(Gabriel))", "Gabriel was angryAtServerForTakingTooLong(Gabriel,Understaffed(Gabriel))", "-(AngryAtServer(Gabriel) & TooLong(Gabriel) & RestaurantUnsold(Gabriel))", "all x y.((Server(x) & Restaurant(y) & Understaffed(y)) -> Anger(x,y))", "Gabriel warrsAtServerForTakingTooLong(Gabriel)", "(Angry(Gabriel) & Server(Gabriel) & TooLongRestaurant(Gabriel))", "all x.((Server(x) & Overstaffed(x)) -> Angerful(x))", "all x.((Server(x) & TakesTooLong(x) & Understaffed(x)) -> Anger(x))", "(Angry(Gabriel) & ServerForTakingTooLong(Gabriel) & RestaurantUnstaffed(Gabriel))", "Gabriel was angryAtServerForTakingTooLong(Gabriel,understaffed)", "all x y z.((Server(x) & Server(y) & Restaurant(z) & Understaffed(z)) -> Anger(x,y,z))", "Gabriel was angryAtServerForTakingTooLong(Gabriel,UnderstaffedRestaurant,Gabriel))", "all x y.((Server(x) & Restaurant(y) & Understaffed(y)) -> Angerful(x,y))"]}
{"id": "enwn_validation_543", "nl": "When someone has to do a lot, it's reasonable for it to take a long time.", "fol": "", "prediction": ["all x.((Person(x) & HasToDoLot(x)) -> ReasonableToTakeLongTime(x))", "all x.((HasToDoLot(x) & TakesLongTime(x)) -> Reasonable(x))", "all x y.((Person(x) & HasToDoLot(x,y)) -> ReasonableToTakeLongTime(x))", "all x.((Person(x) & HasToDoLots(x)) -> ReasonableToTakeLongTime(x))", "all x y.((Person(x) & HasToDoLot(x,y)) -> ReasonableToTakeLongTime(x))", "all x.((HasToDoLot(x) & TakesLongTime(x)) -> Reasonable(x))", "all x.((Person(x) & HasToDoLot(x)) -> ReasonableToTakeLongTime(x))", "all x.((Man(x) & HasToDoLots(x)) -> ReasonableToTakeLongTime(x))", "exists x.(DoesLot(x) & Reasonable(x))", "all x y.((HasToDoLot(x) & Person(y) & TakesLongTime(y,x)) -> Reasonable(y))", "all x y.((Person(x) & Lots(y)) -> TakesLongTime(x,y))", "all x y.((DoesLot(x) & Person(y)) -> TakesLongTime(y))", "all x y.((Person(x) & HasToDoLot(x,y)) -> ReasonableToTakeLongTime(x))", "all x.((Person(x) & HasToDoLots(x)) -> ReasonableToTakeLongTime(x))", "exists x.(DoesLot(x) & Reasonable(x))", "exists x.(DoesLot(x) & ReasonableToTakeLongTime(x))"]}
{"id": "enwn_validation_544", "nl": "When a restaurant is understaffed, the servers have a lot to do.", "fol": "", "prediction": ["all x.((Restaurant(x) & Understaffed(x)) -> ServersHaveLotToDo(x))", "all x y.((Restaurant(x) & Understaffed(x)) -> ServersHaveLittleToDo(y))", "all x.((Restaurant(x) & Understaffed(x)) -> ServersHaveLittleToDo(x))", "all x y z.((Restaurant(x) & Restaurant(y) & Understaffed(x) & Servers(z) & HasLotToDo(z)) -> HasLotToDo(z))", "all x y.((Restaurant(x) & Understaffed(x)) -> ServersHaveLotToDo(y))", "all x.(Understaffed(x) -> ServersHaveLittleToDo(x))", "all x.((Restaurant(x) & Understaffed(x)) -> LotsToDo(x))", "all x y z.((Restaurant(x) & Restaurant(y) & Understaffed(x,y) & Server(z)) -> HasLotToDo(z,y))", "all x y.((Restaurant(x) & Understaffed(x)) -> ServersHaveLittleToDo(y))", "all x y.((Restaurant(x) & Restaurant(y) & Understaffed(x)) -> ServersHaveLittleToDo(x,y))", "all x.((Restaurant(x) & Understaffed(x)) -> ServersHaveLotToDo(x))", "all x y.((Restaurant(x) & Understaffed(x)) -> ServersHaveLotToDo(x,y))", "all x.((Restaurant(x) & Understaffed(x)) -> LotsToDo(x))", "all x.(Understaffed(x) -> LotsToDo(x))", "all x.((Restaurant(x) & Understaffed(x)) -> ServersHaveLittleToDo(x))", "all x.((Restaurant(x) & Understaffed(x)) -> HasLotToDo(x))"]}
{"id": "enwn_validation_545", "nl": "When a restaurant is understaffed, it's reasonable for the servers to take a long time.", "fol": "", "prediction": ["all x.((Restaurant(x) & Understaffed(x)) -> ReasonableServerTime(x))", "all x y.((Restaurant(x) & Understaffed(x)) -> ReasonableServerTime(y))", "all x.((Restaurant(x) & Understaffed(x)) -> ReasonableServerTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> ReasonableServersToTakeLongTime(x))", "all x y z.((Restaurant(x) & Understaffed(x) & Servers(y) & LongTime(z)) -> Reasonable(y,z))", "all x y.((Restaurant(x) & Understaffed(x)) -> ReasonableServerTime(y))", "all x y.((Restaurant(x) & Understaffed(x)) -> (ResponsibleServerTime(y) & LongTime(y)))", "all x.((Restaurant(x) & Understaffed(x)) -> TakeLongTime(x))", "all x.(Understaffed(x) -> ReasonableServerTime(x))", "all x y.((Restaurant(x) & Understaffed(x) & Servers(y)) -> TakeLongTime(y,x))", "all x.((Restaurant(x) & Understaffed(x)) -> RequiresServersToTakeLongTime(x))", "all x.(Understaffed(x) -> ReasonableServerTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> ReasonableServerTime(x))", "all x y.((Restaurant(x) & Understaffed(x)) -> ReasonableServerTime(y))", "all x.((Restaurant(x) & Understaffed(x)) -> TakeLongTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> RequiresLongServerTime(x))"]}
{"id": "enwn_validation_546", "nl": "Gabriel was unreasonably angry that the server took too long.", "fol": "", "prediction": ["all x.((Server(x) & TakesTooLong(x)) -> UnreasonablyAngry(x))", "all x y.((Server(x) & Server(y)) -> UnreasonablyAngry(x,y))", "(UnreasonablyAngry(Gabriel) & ServerTakesTooLong(Gabriel))", "Gabriel was unreasonably angry that the server took too long.", "Gabriel was unreasonablyAngryThatServerTakesTooLong(Gabriel)", "(UnreasonablyAngry(Gabriel) -> ServerTakesTooLong(Gabriel))", "all x y.((Server(x) & Server(y) & TakesTooLong(x,y)) -> UnreasonablyAngry(x))", "all x.((Server(x) & TakesTooLong(x)) -> UnreasonablyAngry(x))", "Gabriel warunlyAngry(Gabriel) & ServerTakesTooLong(Gabriel)", "(UnreasonablyAngry(Gabriel,Server) & TakesTooLong(Gabriel))", "-UnreasonablyAngry(Gabriel)", "Gabriel was unreasonably angry that server took too long.", "Gabriel was angry that server took too long.", "all x.((Server(x) & TooLong(x)) -> UnreasonablyAngry(x))", "all x.((Server(x) & TakesTooLong(x)) -> UnreasonablyAngry(x))", "(UnreasonablyAngry(Gabriel) -> ServerTakesTooLong(Gabriel))"]}
{"id": "enwn_validation_547", "nl": "Gabriel was impatient with the server.", "fol": "", "prediction": ["all x.((Gabriel(x) & Server(x)) -> Impatient(x))", "Gabriel was impatientWithServer(Gabriel)", "-ImpatientWithServer(Gabriel)", "Gabriel apologises to server.", "Gabriel war impatient(Gabriel)", "(Impatient(Gabriel) & Server(Gabriel))", "(ImpatientWithServer(Gabriel)", "Gabriel apologies for server's impatientness.", "all x.((Gabriel(x) & Server(y)) -> Impatient(x,y))", "-ImpatientWithServer(Gabriel)", "all x y.((Server(x) & Gabriel(y)) -> ImpatientWith(y,x))", "Gabriel was impatientWithServer(Gabriel)", "Gabriel was impatientwithserver(Gabriel)", "Gabriel war impatientwithServer(Gabriel)", "(ImpatientWithServer(Gabriel)", "(ImpatientWithServer(Gabriel)"]}
{"id": "enwn_validation_548", "nl": "Gabriel should have been patient with the server.", "fol": "", "prediction": ["all x.((Gabriel(x) & Server(y)) -> Patient(x,y))", "all x.(Gabriel(x) -> PatientWithServer(x))", "all x y.((Gabriel(x) & Server(y)) -> ShouldBePatient(x,y))", "Gabriel should have been patient with server.", "all x.(Gabriel(x) -> ShouldBePatientWithServer(x))", "(PatientWithServer(Gabriel))", "all x.((Gabriel(x) & Server(x)) -> Patient(x))", "-(Gabriel shouldBePatientWithServer(Gabriel))", "-(Gabriel(Gabriel) & PatientWithServer(Gabriel))", "Gabriel should have been patient with server.", "all x.((Gabriel(x) & Server(y)) -> ShouldBePatient(x,y))", "all x y.((Gabriel(x) & Server(y)) -> Patient(x,y))", "(PatientWithServer(Gabriel)", "Gabriel should have been patient with server.", "all x.(Gabriel(x) -> PatientWithServer(x))", "(PatientWithServer(Gabrielle)"]}
{"id": "enwn_validation_549", "nl": "Luke let his partners handle the group project.", "fol": "", "prediction": ["all x y.((Luke(x) & Partner(y)) -> LetsManageGroupProject(x,y))", "Luke let his partners handle the groupproject.", "all x.(LukeLetsPartnersHandleGroupProject(x) -> LetsPartnersHandleGroupProject(x))", "Luke let his Partners HandleGroupProject(Luke,Partners)", "(LetsPartnersHandleGroupProject(Luke)", "all x y.((Luke(x) & Partner(y)) -> LetsHandleGroupProject(x,y))", "Luke LetsPartnersHandleGroupProject(Luke,Luke,GroupProject)", "Luke lets PartnersManageGroupProject(Luke,Partners)", "(LetsPartnersHandleGroupProject(Luke,Luke))", "Luke let his Partners HandleGroupProject(Luke,Luke,Partners)", "Luke let his partners handle the groupproject.", "all x y.((Luke(x) & Partner(y)) -> LetsManageGroupProject(x,y))", "(LetsPartnersManageGroupProject(Luke)", "Luke let partners handle the groupproject.", "Luke let his partners handle the group project.", "Luke let partner handle groupproject."]}
{"id": "enwn_validation_550", "nl": "If you let other people handle something then you are not helping on that thing.", "fol": "", "prediction": ["all x.(LetsOthersHandle(x) -> -HelpingOnThing(x))", "all x y.((LetsOthersHandle(x,y) & Thing(y)) -> -Helping(x,y))", "all x y.((LetsAnotherManage(x,y) & Thing(y)) -> -Helping(x,y))", "all x.((LetsOthersHandle(x) & Handles(x)) -> -HelpingOnThing(x))", "all x.(LetsOthersHandle(x) -> -HelpingOnThing(x))", "all x y z.((LetsOthersHandle(x,y) & Thing(z)) -> -Helping(x,z))", "all x.(LetsAnotherManage(x) -> -HelpingOnThing(x))", "(all x.(LetsOtherPeopleHandle(x) -> -HelpingOnThing(x)))", "all x y.((LetsOthersHandle(x,y) & Thing(y)) -> -HelpingOn(x,y))", "all x y.((LetsAnotherManage(x) & Thing(y)) -> -Helping(x,y))", "all x y.((Loans(x,y) & Person(y)) -> -HelpingOnThing(x,y))", "all x.((LetsOthersHandle(x) & Thing(x)) -> -Helping(x))", "all x.((LetsAnotherManage(x) & Handles(x)) -> -HelpingOnThing(x))", "all x y.((LeavesOthersHandle(x,y) & Thing(y)) -> -HelpingOn(x,y))", "all x.(LetsOthersHandle(x) -> -HelpingOnThing(x))", "exists x.(LetsAnotherManage(x) & -HelpingOnThing(x))"]}
{"id": "enwn_validation_551", "nl": "A group project requires multiple people to do work.", "fol": "", "prediction": ["all x.(GroupProject(x) -> RequiresMultiplePersons(x))", "all x y.((GroupProject(x) & Person(y)) -> Requires(x,y))", "all x.(GroupProject(x) -> RequiresMultiplePeople(x))", "all x y z.((GroupProject(x) & Person(y) & Person(z)) -> RequiresToDoWork(x,y,z))", "all x y.((GroupProject(x) & Person(y)) -> Requires(x,y))", "all x y.((GroupProject(x) & Person(y)) -> RequiresToDoWork(x,y))", "all x.(GroupProject(x) -> RequiresMultiplePersons(x))", "all x y z.((GroupProject(x) & Person(y) & Work(z)) -> Requires(x,y,z))", "all x.(GroupProject(x) -> RequiresMultiplePeople(x))", "all x y.((GroupProject(x) & Person(y)) -> Requires(x,y))", "all x.(GroupProject(x) -> RequiresMultiplePersons(x))", "all x.(GroupProject(x) -> MultiplePerson(x))", "all x y.((GroupProject(x) & Person(y)) -> DoseWork(x,y))", "exists x.(GroupProject(x) & MultiplePerson(x) & DoWork(x))", "exists x.(GroupProject(x) & MultiplePeople(x))", "exists x.(GroupProject(x) & MultiplePeople(x))"]}
{"id": "enwn_validation_552", "nl": "If multiple people are required to do something then it is expected that all those people should help.", "fol": "", "prediction": ["all x.((RequiredToDo(x) & MultiplePeople(x)) -> ExpectedHelp(x))", "all x.((Person(x) & RequiresDoing(x)) -> ExpectedHelp(x))", "all x y.((Person(x) & RequiredToDo(x,y)) -> ExpectedHelp(x,y))", "all x y.((Person(x) & RequiresToDo(x,y)) -> ExpectedHelp(x,y))", "all x.((RequiredToDo(x) & MultiplePerson(x)) -> ShouldHelp(x))", "all x y.((Person(x) & Person(y) & Requires(x,y)) -> ShouldHelp(x,y))", "all x y z.((Person(x) & Person(y) & RequiresToDo(x,y) & Person(z) & RequiresToDo(x,z)) -> ShouldHelp(x,y,z))", "all x.((PeopleRequiredToDo(x) & MultiplePeopleRequiredToDo(x)) -> ExpectedHelp(x))", "all x y.((RequiredToDo(x,y) & Person(y)) -> ShouldHelp(y,x))", "all x.((Person(x) & RequiresDoing(x)) -> ExpectedHelp(x))", "(all x.((Person(x) & RequiresDoing(x)) -> Helps(x)))", "all x.((RequiredToDo(x) & MultiplePeople(x)) -> ShouldHelp(x))", "all x y.((People(x) & RequiredToDo(x,y)) -> ExpectedHelp(x,y))", "all x.(RequiredToDo(x) -> ExpectedHelp(x))", "exists x.(RequiredToDo(x,y) & MultiplePerson(y) & Helps(x,y))", "exists x.(RequiredToDo(x,y) & People(y) & Help(y))"]}
{"id": "enwn_validation_553", "nl": "You should be trustworthy.", "fol": "", "prediction": ["all x.(Trustworthy(x) -> Trustworthy(x))", "all x.((Trustworthy(x)) -> Trustworthy(x))", "all x.((Staff(x) & Trustworthy(x)) -> Trustworthy(x))", "all x.(Trustworthy(x) -> Trustworthy(x))", "-Trustworthy(x)", "all x y.((Trustworthy(x) & Person(y)) -> Trustworthy(x))", "all x.((You(x) & Trustworthy(x)) -> Trustworthy(x))", "All x.((StaysTrustworthy(x) & Trustworthy(x)) -> Trustworthy(x))", "all x.(Trafficable(x) -> Trustworthy(x))", "all x.(Trustworthy(x) -> Trustworthy(x))", "-Trustworthy(x)", "all x.((Trustworthy(x)) -> Trustworthy(x))", "all x.(Trafficable(x) -> -Trustworthy(x))", "all x.(Trustworthy(x) -> Trustworthy(x))", "exists x.(Tradable(x) & Trustworthy(x))", "All x.(Trustworthy(x) -> ShouldBe(x))"]}
{"id": "enwn_validation_554", "nl": "To be trustworthy means you do what is expected of you.", "fol": "", "prediction": ["all x.(TrueLiability(x) -> DoWhatEquippedOfYou(x))", "all x.(Trafficant(x) -> DoWhatEquippedOfYou(x))", "all x.(Trustworthy(x) -> DoWhatEquippedOfYou(x))", "all x.((Trustworthy(x) & ExpectedOf(x)) -> Trustworthy(x))", "(Trafficant(x) -> DoWhatEquippedOfYou(x))", "all x y.((Trustworthy(x) & Trustworthy(y)) -> DoWhatEquippedOf(x,y))", "(TrueLiability(x) -> DoWhatEquippedOfYou(x))", "all x y.((TrueLimit(x) & Trustworthy(x)) -> DoWhatEquippedOf(x,y))", "all x.(TrueLiability(x) -> DoWhatEssentiallyOwnedOf(x))", "all x.((TrueLiability(x) & ExpectedOf(x)) -> Trustworthy(x))", "all x.(Trustworthy(x) -> (DoesWhatEquippedOfYou(x)))", "all x y.((Trustworthy(x) & Trustworthy(y)) -> (DoesWhatEssential(x,y) & ExpectedOf(x,y)))", "all x.(Trafficable(x) -> DoWhatEssentiallyObtainedOf(x))", "all x.(Trustworthy(x) -> (DoesWhatEssential(x) & Trustworthy(x)))", "all x.(TrueLimitable(x) -> DoWhatEquippedOfYou(x))", "all x.(Trafficant(x) -> (DoesWhatEquippedOfYou(x)))"]}
{"id": "enwn_validation_555", "nl": "Luke did not help his partners on the group project.", "fol": "", "prediction": ["Luke -helpedPartnersOnGroupProject(Luke,x))", "Luke & PartnersOnGroupProject(Luke,Luke) & -Helped(Luke,Luke))", "all x y.((Luke(x) & Partner(y)) -> -HelpsGroupProject(x,y))", "(-helpsPartnersOnGroupProject(Luke))", "-(HelpsPartnersOnGroupProject(Luke) | HelpsPartnersOnGroupProject(Luke)))", "Luke neassisted(Luke,Partners) & GroupProject(Luke))", "Luke did not help partners on the groupproject.", "(-helpsPartners(Luke) & GroupProject(Luke))", "Luke did not help his partners on the groupproject.", "(Luke,Partners) & -HelpsOnGroupProject(Luke,Partners))", "-(HelpsPartners(Luke) & GroupProject(Luke))", "Luke -HelpedPartnersOnGroupProject(Luke)", "all x y.((Luke(x) & Partner(y)) -> -HelpsGroupProject(x,y))", "(-HelpsPartnersOnGroupProject(Luke,Luke))", "Luke did not help partners on the groupproject.", "Luke did not help his partners on the groupproject."]}
{"id": "enwn_validation_556", "nl": "It is expected that everyone on a group project will help.", "fol": "", "prediction": ["all x.(GroupProject(x) -> ExpectedHelp(x))", "all x y.((GroupProject(x) & Person(y)) -> Helps(y,x))", "(All x.(GroupProject(x) -> Helps(x)))", "all x y.((GroupProject(x) & Helps(y)) -> Expected(x,y))", "all x.(GroupProject(x) -> ExpectedHelp(x))", "all x y.((GroupProject(x) & GroupProject(y)) -> ExpectedHelp(x,y))", "all x y z.((GroupProject(x) & Person(y) & Project(z)) -> Helps(y,z))", "all x.(GroupProject(x) -> Helps(x))", "all x y.((GroupProject(x) & Person(y) & Helps(y,x)) -> Expected(x,y))", "(all x.(GroupProject(x) -> Helps(x)))", "(All x.(GroupProject(x) -> Helps(x)))", "all x.(GroupProject(x) -> ExpectedHelp(x))", "exists x.(GroupProject(x) & EveryoneOnProject(x) & ExpectedToHelp(x))", "all x y.((GroupProject(x) & Helper(y)) -> ExpectedToHelp(x,y))", "all x.(GroupProject(x) -> Helps(x))", "exists x.(GroupProject(x) & ExpectedHelp(x,y))"]}
{"id": "enwn_validation_557", "nl": "Luke did not help his partners when it was expected.", "fol": "", "prediction": ["all x y.((Luke(x) & Partner(y)) -> -Helped(x,y))", "(-helped(Luke,Partners) & Expected(Luke,Partners))", "-(Helped(Luke,Partners) & Expected(Luke,Partners)))", "all x y.((Luke(x) & Partner(y) & Expected(x,y)) -> -Helped(x,y))", "Luke did nothelp(Luke,Partners)", "(-helps(Luke,Partners) & Expected(Luke,Partners))", "Luke did notHelpPartnersWhenEquipped(Luke,Siblings)", "Luke -HelpedPartnersWhenEquipped(Luke,Staff))", "all x.((Luke(x) & Partners(x)) -> -Helped(x,y))", "-(HelpsPartners(Luke,Equipped))", "((Luke(Luke) & Expected(Luke)) -> -HelpsPartners(Luke))", "all x y.((Luke(x) & Partner(y)) -> -HelpedWhenEquipped(x,y))", "Luke did notHelpPartnersWhenEquipped.", "(-Helped(Luke,Partners))", "Luke did nothelp(Luke,Partners)", "Luke did nothelppartnerswhenexpected."]}
{"id": "enwn_validation_558", "nl": "If something is expected of you then you should do that thing.", "fol": "", "prediction": ["all x.((EssentialThing(x) & ExpectedOf(x)) -> ShouldDo(x))", "all x.((EquippedOf(x) & ExpectedOf(x)) -> ShouldDo(x))", "all x y.((EssentialThing(x) & ExpectedOf(x,y)) -> ShouldDo(x,y))", "all x y.((EquippedOf(x,y) & ExpectedOf(y,x)) -> ShouldDo(x,y))", "all x.(EquippedOf(x,y) -> ShouldDo(x,y))", "all x.((EssentialThing(x) & ExpectedOf(x)) -> ShouldDo(x,y))", "-(EquippedOf(x,y) & ExpectedOf(y,z)))", "all x.((EquippedOf(x) & ExpectedOf(x)) -> ShouldDo(x))", "all x y.((EssentialThing(x) & ExpectedOf(x,y)) -> ShouldDo(x,y))", "all x y.((EquippedOf(x,y) & ExpectedOf(x,y)) -> ShouldDo(x,y))", "all x.(EquippedOf(x,y) -> ShouldDo(x,y))", "all x.((EssentialThan(x)) -> ShouldDo(x))", "exists x.(EspectedOf(x,y) & DoIt(x,y))", "all x y.((EssentialThing(x) & ExpectedOf(x,y)) -> ShouldDo(x,y))", "exists x.(Essential(x) & ShouldDo(x))", "all x.(EquippedOf(x,y) -> ShouldDo(x,y))"]}
{"id": "enwn_validation_559", "nl": "Luke should have helped his partners.", "fol": "", "prediction": ["all x y.((Luke(x) & Partner(y)) -> ShouldHelped(x,y))", "all x.(Luke(x) -> ShouldHelpPartners(x))", "Luke should have helped his partners.", "all x.((Luke(x) & Partner(y)) -> ShouldHelped(x,y))", "-(Luke(Luke) & Partner(Luke))", "(HelpedPartners(Luke,Luke))", "all x y.((Luke(x) & Partner(y)) -> ShouldHaveHelped(x,y))", "Luke should have helped his partners.", "(HelpedPartners(Luke) -> ShouldHave(Luke,Partners))", "Luke should have helped partners.", "all x.(Luke(x) -> ShouldHelpPartners(x))", "Luke shouldahelpedpartners.", "Luke should have helped his partners.", "(HelpedPartners(Luke,Luke))", "Luke should have helped partners.", "Luke should have helped his partners."]}
{"id": "enwn_validation_560", "nl": "You should only conceive with someone with their consent.", "fol": "", "prediction": ["all x y.((Conceive(x) & Person(y) & Consent(y)) -> OnlyConceive(x,y))", "all x.(Conceive(x) -> (Consent(x) | Consent(x)))", "all x y.((Conscious(x) & Person(y) & Consent(y)) -> ConceivesWith(x,y))", "all x.((Conceive(x) & Person(x) & Consent(x)) -> OnlyConceive(x))", "all x y.((Conceive(x) & Person(y) & Consent(y)) -> OnlyConceive(x,y))", "all x y.((Conceive(x,y) & Person(y)) -> Consent(y))", "all x y z.((Conscious(x) & Person(y) & Consent(z)) -> ConceivesWith(x,y,z))", "all x y.((ConsumesWith(x,y) & Person(y) & Consent(y)) -> -ConceivesWith(x,y))", "all x.((ConceiveWith(x,y) & Consent(y)) -> OnlyConsumeWith(x,y))", "all x.(ConceiveWith(x,y) -> Consent(y))", "all x.(Conceive(x) -> exists y.(Consent(y) & Conceive(x,y))))", "all x y.((Conscious(x) & Person(y) & Consent(y)) -> ConceivesWith(x,y))", "all x y.((Person(x) & Person(y) & Consent(y)) -> ConceivesWith(x,y))", "all x y z.((Conscious(x) & Person(y) & Consent(z)) -> ConceivesWith(x,y,z))", "exists x.(ConsumesWith(x,y) & HasConsent(x,y))", "exists x.(Conscious(x) & Person(x) & Consent(x))"]}
{"id": "enwn_validation_561", "nl": "Someone can't consent to something if they're being lied to about it.", "fol": "", "prediction": ["all x.((Person(x) & LiesToAboutConsent(x)) -> -CanConsent(x))", "all x.((LiliedTo(x) & ConsentsTo(x)) -> -CanConsent(x))", "all x y.((Person(x) & LiesTo(x,y)) -> -ConsentsTo(x,y))", "all x y.((Consent(x) & Person(y) & LiliedToAbout(y,x)) -> -CanConsent(y,x))", "all x.((LiliedToAbout(x) & Can'tConsent(x)) -> -CanConsent(x))", "all x.((Person(x) & LiliedToAbout(x)) -> Can'tConsent(x))", "all x y.((Consents(x) & Person(y) & LiliedToAbout(y,x)) -> -CanConsent(y,x))", "all x y.((Person(x) & LiliedToAbout(x,y)) -> -ConsentsTo(x,y))", "all x y.((LiliedTo(x) & Person(y) & ConsentsTo(y)) -> -CanConsent(x,y))", "all x.((Consents(x) & LiliedToAbout(x)) -> -CanConsent(x))", "all x y z.((Consent(x) & Person(y) & LiliedToAbout(y,z) & LiesAbout(z,y)) -> -CanConsent(x,y))", "exists x.(ConsentLiliedTo(x) & CannotConsent(x))", "exists x.(ConsentTo(x,y) & BeingLiliedToAbout(x,y))", "exists x.(LiliedTo(x) & CannotConsent(x))", "all x y.((Person(x) & LiedToAbout(x,y)) -> Can'tConsent(x,y))", "exists x.(ConsentLiliedTo(x) & CannotConsent(x))"]}
{"id": "enwn_validation_562", "nl": "Abby told Mark that she was on birth control so that she could get pregnant with him.", "fol": "", "prediction": ["all x y.((Abby(x) & Mark(y)) -> (OnBirthControl(x,y) & CouldGetPregnantWith(x,y)))", "(all x.(Abby(x) -> OnBirthControl(x)))", "Abby told Mark that she was on BirthControl so that she could get pregnant with Mark.", "((Abby(Abby) & Mark(Mark)) -> OnBirthControl(Abby))", "all x.((Abby(x) & Mark(x)) -> OnBirthControl(x))", "Abby told Mark she was on birthcontrol so that she could get pregnant with Mark.", "(BirthControl(Abby) & On(Abby,Mark) & CouldGetPregnantWith(Abby,Mark))", "Abby told Mark that she was onBirthControl(Abby) & CouldGetPregnantWithMark(Abby))", "all x y.((Abby(x) & Mark(y)) -> (OnBirthControl(x,y) & CanGetPaternal(x,y)))", "Abby told Mark that she was on birthcontrol so that she could get pregnant with Mark.", "Abby told Mark she was onBirthControl(Abby) & CouldGetPregnantWithMark(Abby))", "(all x.(Abby(x) -> OnBirthControl(x)))", "Mark told Abby, \"OnBirthControl(ABby) & CouldGetPregnantWithMark(ABby)\"", "all x.((Abby(x) & Mark(x)) -> OnBirthControl(x))", "Abby told Mark that she was on BirthControl so that she could getPregnantWithMark.", "Abby told Mark she was on birthcontrol so she could get pregnant with Mark."]}
{"id": "enwn_validation_563", "nl": "Abby was not on birth control.", "fol": "", "prediction": ["Abby was not on birthcontrol.", "Abby -OnBirthControl(Abby)", "(-BirthControl(Abby))", "Abby was not on BirthControl(Abby)", "-(Abby(a) & BirthControl(b))", "(-OnBirthControl(Abby))", "Abby neema onBirthControl(Abby)", "Abby -OnBirthControl(Abby)", "(-BirthControl(Abby))", "Abby -BirthControl(Abby)", "Abby was not on birthcontrol.", "(-OnBirthControl(Abby))", "-BirthControl(Abby)", "Abby was notonBirthControl(Abby)", "Abby was not on BirthControl.", "-BirthControl(Abby)"]}
{"id": "enwn_validation_564", "nl": "You shouldn't lie to someone in order to conceive with them.", "fol": "", "prediction": ["all x y.((Limit(x) & Person(y)) -> -Conceive(x,y))", "all x y.((LittleTo(x,y) & Person(y)) -> -ConceiveWith(x,y))", "all x.((Limit(x) & Person(x)) -> -Conceive(x))", "all x y.((Liking(x) & Person(y)) -> -Liking(x,y))", "all x y.((Limit(x,y) & Person(y)) -> -Conceive(x,y))", "all x y.(((LittleTo(x,y) & Person(y)) -> -ConceivesWith(x,y))", "-(LimitToPerson(x) & ConceiveWith(x,Person)))", "(-LimitToPerson(x) & ConceiveWith(x,Person))", "all x.((LimitTo(x,y) & Person(y)) -> -ConceiveWith(x,y))", "all x.((Liking(x) & Person(x)) -> -ConceivesWith(x,y))", "all x y z.((Limit(x) & Person(y) & ConceiveWith(z)) -> -Limit(x,y,z))", "(LimitTo(x,y) & Person(y))", "exists x.(Limit(x) & -Limit(x) & ConceiveWith(x,y))", "all x y.((Person(x) & Person(y)) -> -LimitsTo(x,y))", "all x.((LittleTo(x) & ConceiveWith(x)) -> -LimitTo(x,y))", "exists x.(ConceiveWith(x,y) & -LimitTo(x,y))"]}
{"id": "enwn_validation_565", "nl": "Abby lied to Mark in order to get pregnant with him.", "fol": "", "prediction": ["all x y.((Abby(x) & Mark(y)) -> LiedTo(x,y))", "Abby liedToMark(a) & GetsPaternal(a))", "(LikedTo(Abby,Mark) & GetsPaternal(Abby,Mark))", "Abby liedToMarkInDesperationToGetPaternity(Abby,Mark)", "(Lired(Abby,Mark) & GetsPaternal(Abby,Mark))", "all x y.((Abby(x) & Mark(y)) -> LiliedTo(x,y))", "all x y.((Abby(x) & Mark(y) & LiliedTo(x,y)) -> Pregnant(x,y))", "AbbyLikedToMarkInDesperationToGetPregnantWithMark(a) -> LiliedToMark(a))", "Abby LilledToMarkInDesperationToGetPastWithMark.", "(LikedTo(Abby,Mark) & GetsPaternity(Abby,Mark))", "(LittlesToMark(Abby,Mark) & GetsPaternal(Abby,Mark))", "Abby liedToMark(a) & GettingPaternal(a))", "Abby LiesToMarkToGetPaternity(Abby,Mark)", "(LikedTo(Abby,Mark) & GetsPregnantWith(Abby,Mark))", "Abby lied to Mark in order to get pregnant with Mark.", "Abby liedToMarkInDesperationToGetPaternal(Abby,Mark)"]}
{"id": "enwn_validation_566", "nl": "Abby should not have lied to Mark.", "fol": "", "prediction": ["Abby should not have lied to Mark.", "(all x.(Abby(x) -> -LikedToMark(x)))", "all x.((Abby(x) & Mark(x)) -> -LikedTo(x,Mark))", "(-LikedToMark(Abby))", "(LikedToMark(Abby) | ShouldNotLikedToMark(Abby)))", "Abby shouldn't have lied to Mark.", "Abby should not have lied to Mark.", "-LikedToMark(Abby,Mark)", "Abby should not have liedToMark.", "Mark should not have lied to Abby.", "Abby shouldn't have lied to Mark.", "-LikedToMark(Abby,Mark)", "Abby should have lied to Mark.", "Abby should not have lied to Mark.", "Abby shouldn\u2019t have liedToMark.", "Abby should not have liedToMark."]}
{"id": "enwn_validation_567", "nl": "A boss is an authority figure.", "fol": "", "prediction": ["all x.(Boss(x) -> AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "all x y.((Boss(x) & AuthorityFigure(y)) -> Has(x,y))", "all x.(Bust(x) -> AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "all x y.((Boss(x) & AuthorityFigure(y)) -> Is(x,y))", "all x y.((Bust(x) & AuthorityFigure(y)) -> Has(x,y))", "exists x.(Bust(x) & AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "all x y.((Boss(x) & AuthorityFigure(y)) -> Has(x,y))", "exists x.(Bust(x) & AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "exists x.(Bust(x) & AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "exists x.(Boss(x) & AuthorityFigure(x))", "exists x.(Boss(x) & AuthorityFigure(x))"]}
{"id": "enwn_validation_568", "nl": "Tom spat in his boss's coffee in front of everyone.", "fol": "", "prediction": ["all x y.((Tom(x) & Boss(y)) -> SpatsInCoffee(x,y))", "all x y z.((Tom(x) & Boss(y) & Coffee(z)) -> SpatsIn(x,y,z))", "(SpreadInBossCoffee(Tom) & InFrontOfEveryone(Tom))", "all x.((Tom(x) & BossCoffee(x)) -> SpatsIn(x,y))", "(SpatInBossCoffee(Tom) & InFrontOfEveryone(Tom))", "-(TomSpatInBossCoffee(Tom) & InFrontOfEveryone(Tom))", "all x y.((Tom(x) & Boss(y)) -> SpatsInCoffee(x,y))", "all x.((Tom(x) & BossCoffee(x)) -> SpatsInFrontOfEveryone(x))", "(InfrontOfEveryone(Tom,BossCoffee) -> SpatsIn(Tom,BossCoffee))", "all x y z.((Tom(x) & Boss(y) & Coffee(z)) -> SpatIn(x,y,z))", "all x.((Tom(x) & Boss(x)) -> SpatsInCoffee(x))", "(SpreadInBossCoffee(Tom) & InFrontOfEveryone(Tom))", "all x y.((Tom(x) & BossCoffee(y)) -> SpatsInFrontOfEveryone(x,y))", "(SpatInBossCoffee(Tom) & InFrontOfEveryone(Tom))", "all x y.((Tom(x) & Boss(y)) -> SpatsInCoffee(x,y))", "all x.((Tom(x) & BossCoffee(x)) -> SpatsInFrontOfEveryone(x))"]}
{"id": "enwn_validation_569", "nl": "Spitting in someone's beverage is rude.", "fol": "", "prediction": ["all x.((SpittingInBeverage(x) & Person(x)) -> Rust(x))", "all x y.((Beverage(x) & SpittingIn(x,y)) -> Rust(x))", "all x.((SpitsInBeverage(x) & Person(x)) -> Rust(x))", "(Rule(SpittingInBeverage(SpittingInBeverage))", "all x.((SpittingInBeverage(x) & Person(y)) -> Rust(x))", "all x y.((Beverage(x) & SpittingIn(x,y)) -> Rust(x))", "all x.(SpittingInBeverage(x) -> Rust(x))", "all x y z.((Beverage(x) & SpittingIn(x,y) & Person(z) & Drink(y)) -> Rust(x))", "all x.((Beverage(x) & SpittingIn(x,y)) -> Rust(x))", "all x.((Spitting(x) & Drinking(x)) -> Rust(x))", "exists x.(Beverage(x) & SpittingIn(x,y) & Rust(y))", "all x y.((Beverage(x) & SpittingIn(x,y)) -> Rust(x))", "all x y.((SpittingInBeverage(x) & Person(y)) -> Rust(x,y))", "all x y.((Beverage(x) & Spitting(x,y)) -> Rust(x))", "all x y.((Beverage(x) & Person(y)) -> SpittingIn(x,y))", "all x.(SpittingInBeverage(x) -> Rust(x))"]}
{"id": "enwn_validation_570", "nl": "Being insubordinate means disrespecting authority.", "fol": "", "prediction": ["all x.(Insubordinate(x) -> DisrespectsAuthority(x))", "all x.((Insubordinate(x) & DisrespectsAuthority(x)) -> Insubordinate(x))", "all x.(Insubordinate(x) -> DisrespectsAuthority(x))", "all x y.((Insubordinate(x) & Authority(y)) -> Disrespects(x,y))", "(Insubordinate(in) -> DisrespectsAuthority(in))", "all x.((Insubordinate(x) & DisrespectsAuthority(x)) -> Insubordinate(x))", "all x.(Insubordinate(x) -> DisrespectsAuthority(x))", "all x y.((Insubordinate(x) & Authority(y)) -> Disrespects(x,y))", "all x.((Insubordinate(x) & DisrespectsAuthority(x)) -> DisrespectsAuthority(x))", "all x.(Insubordinate(x) -> DisrespectsAuthority(x))", "all x y.((Insubordinate(x) & Authority(y)) -> Disrespects(x,y))", "All x.((Insubordinate(x) & DisrespectsAuthority(x)) -> Insubordinate(x))", "all x.(Insubordinate(x) -> DisrespectsAuthority(x))", "All x.(Insubordinate(x) -> DisrespectsAuthority(x))", "All x.(Insubordinate(x) -> DisrespectsAutority(x))", "All x.(Insubordination(x) -> DisrespectsAuthority(x))"]}
{"id": "enwn_validation_571", "nl": "Tom was rude to his boss.", "fol": "", "prediction": ["all x.((Tom(x) & Boss(x)) -> RustyTo(x))", "Tom was rudeToBoss(Tom)", "all x y.((Tom(x) & Boss(y)) -> RustyTo(x,y))", "(RustyToBoss(Tom) & -RustyToBoss(Tom))", "-RustyToBoss(Tom)", "all x.(RuleToBoss(x) -> Tom(x))", "all x.((Tom(x) & Boss(x)) -> Rusty(x))", "Tom was rudeToBoss(Tom)", "-(RuleToBoss(Tom) | RustToBoss(Tom)))", "(RainfulToBoss(Tom)", "all x y.((Tom(x) & Boss(y)) -> RustyTo(x,y))", "(RuleToBoss(Tom) | RustToBoss(Tom)))", "(RustyToBoss(Tom) -> RustyToBoss(Tom))", "Tom was rudeToBoss(Tom)", "Tom was rudetobs.", "Tom was rudeToBoss."]}
{"id": "enwn_validation_572", "nl": "Tom was being disrespectful towards an authority figure.", "fol": "", "prediction": ["all x.((Tom(x) & AuthorityFigure(x)) -> DisrespectfulToward(x))", "all x y.((Tom(x) & AuthorityFigure(y)) -> DisrespectfulToward(x,y))", "(DisrespectfulTowardAuthority(Tom))", "all x y.((Tom(x) & Authority(y)) -> DisrespectfulToward(x,y))", "all x.((Tom(x) & AuthorityFigure(x)) -> Disrespectful(x))", "-DisrespectfulTom(Tom,AuthorityFigure)", "(RespectfulToTom(Tom) | RespectfulToAuthority(Tom)))", "(DisrespectfulTowardsAuthority(Tom))", "Tom was disrespectful towards authority figure.", "-(RespectfulToTom(Tom) | DisrespectfulToAuthority(Tom)))", "all x y.((Tom(x) & AuthorityFigure(y)) -> DisrespectfulToward(x,y))", "all x.((Tom(x) & AuthorityFigure(x)) -> DisrespectfulToward(x,Tom))", "(RespectfulTom(Tom) & AuthorityFigure(Tom))", "all x.((Tom(x) & Authority(x)) -> DisrespectfulTowards(x,y))", "all x y.((Tom(x) & Authority(y)) -> DisrespectfulToward(x,y))", "all x.((Tom(x) & AuthorityFigure(x)) -> Disrespectful(x))"]}
{"id": "enwn_validation_573", "nl": "Tom was being insubordinate.", "fol": "", "prediction": ["all x.((Tom(x) & Insubordinate(x)) -> Insubordinate(x))", "(Insubordinate(Tom))", "Tom was beingInsubordinate.", "all x.((Tom(x) & Insubordinate(x)) -> Insubordinate(x))", "Tom was beingInsubordinate(Tom)", "(Insubordinate(Tom))", "-InsubordinateTom.", "all x.((Tom(x) & Insubordinate(x)) -> Insubordinate(x))", "All x.(Tom(x) -> Insubordinate(x))", "Tom was insubordinate.", "(InsubordinateTom)", "Tom was beingInsubordinate.", "(InsubordinateTom(Tom)", "all x.((Tom(x) & Insubordinate(x)) -> Insubordinate(x))", "-Insubordinate(Tom)", "all x.((Tom(x) & Insubordinate(x)) -> InSubordination(x))"]}
{"id": "enwn_validation_574", "nl": "Karen stole a customer's social security number for her own gain.", "fol": "", "prediction": ["all x y.((Karen(x) & Customer(y)) -> StolenSocialSecurityNumber(x,y))", "all x y z.((Karen(x) & Customer(y) & SocialSecurityNumber(z)) -> StolenForOwnGain(x,y,z))", "(StoleSecurityNumber(Karen,Customer) & OwnGain(Karen))", "all x y.((Karen(x) & Customer(y)) -> StolenSecurityNumberForOwnGain(x,y))", "(StoleSocialSecurityNumber(Karen) & OwnGain(Karen))", "all x.((Karen(x) & Customer(y)) -> StolenSocialSecurityNumber(x,y))", "Karen stolesSecurityNumber(Karen) & CustomerSecurityNumber(Karen) & ForOwnGain(Karen))", "(StolenSocialSecurityNumber(Karen,Customer))", "all x.(KarenStoleSecurityNumber(x,Customer) -> OwnGain(x))", "all x y z.((Karen(x) & Customer(y) & SocialSecurityNumber(z)) -> StolenForOwnGain(x,y,z))", "all x y.((Karen(x) & Customer(y)) -> StolenSocialSecurityNumberForOwnGain(x,y))", "all x y z.((Karen(x) & Customer(y) & SocialSecurityNumber(z) & StolenForOwnGain(x,y,z)) -> StolenForGain(x,y,z))", "(StoleSecurityNumber(Karen,Customer) & OwnGain(Karen))", "all x.(StoleSecurityNumber(x,Customer) -> OwnGain(x))", "all x y.((Karen(x) & Customer(y) & StolenSocialSecurityNumber(x,y)) -> OwnGain(x,y))", "all x y.((Karen(x) & Customer(y)) -> StoleSocialSecurityNumber(x,y))"]}
{"id": "enwn_validation_575", "nl": "Stealing a person's social security number is also called stealing their identity.", "fol": "", "prediction": ["all x.(StealingSecurityNumber(x) -> StealingIdentity(x))", "all x.(StolenSocialSecurityNumber(x) -> StealingIdentity(x))", "all x y.((Person(x) & SocialSecurityNumber(y)) -> StealingIdentity(x,y))", "all x.(StealingSocialSecurityNumber(x) -> StealingIdentity(x))", "(StolenSocialSecurityNumber(SecretaryNumber) -> StealingIdentity(SecretaryNumber,SecretaryNumber))", "all x.(StolenSecurityNumber(x) -> StealingIdentity(x))", "all x y.((Person(x) & SocialSecurityNumber(y) & Stealing(x,y)) -> StolenIdentity(x))", "all x.((Person(x) & SocialSecurityNumber(x)) -> StealingIdentity(x))", "(StolenSocialSecurityNumber(Person) & IdentityStolen(Person))", "all x.(SteallingSecurityNumber(x) -> StolenIdentity(x))", "all x.(Stealing(x) -> (StolenSecurityNumber(x) & Person(x)))", "all x.(StolenSocialSecurityNumber(x) -> StolenIdentity(x))", "all x y.((Person(x) & SocialSecurityNumber(y)) -> StealingIdentity(x,y))", "all x y.((Person(x) & SocialSecurityNumber(y) & StealingIdentity(x,y)) -> StealingIdentity(x,y))", "all x.(Storage(x) -> (Person(x) & SocialSecurityNumber(x)))", "all x y.((Person(x) & SocialSecurityNumber(y)) -> StealingIdentity(x,y))"]}
{"id": "enwn_validation_576", "nl": "You shouldn't cause problems for others.", "fol": "", "prediction": ["all x.((CausesProblems(x) & -CausesProblems(x)) -> -CausesProblems(x))", "all x y.((CausesProblems(x,y) & Other(y)) -> -CausesProblems(x,y))", "all x.((You(x) & -CauseProblems(x)) -> -CauseProblems(x))", "-(CausesProblems(x) & ForOthers(x))", "all x.((CausesProblems(x) & -CausesProblems(x)) -> -CausesProblems(x))", "all x y.(((CausesProblems(x,y)) -> -CausesProblems(x,y))", "-CauseProblemsForOthers(x)", "all x y.((CausesProblems(x,y) & Other(y)) -> -CausesProblems(x,y))", "-CausesProblemsForOthers(x)", "exists x.(CausesProblems(x) & -CausesProblems(x))", "all x.((You(x) & -CauseProblemsForOthers(x)) -> -CauseProblemsForOthers(x))", "all x y.((Person(x) & Person(y)) -> -CauseProblem(x,y))", "(-CausesProblems(you,Others))", "all x.((CausesProblems(x) & -CausesProblems(x)) -> -CausesProblems(x))", "(-CausesProblems(you,Others))", "all x.((CausesProblems(x) & -CausesProblems(x)) -> -CausesProblems(x))"]}
{"id": "enwn_validation_577", "nl": "Stealing someone's identity allows the thief to take control of the victim's bank account.", "fol": "", "prediction": ["all x y.((Typhoon(x) & Identity(y)) -> Steal(x,y))", "all x y.((Steal(x) & Identity(y)) -> AllowsThiefToTakeControlOfBankAccount(x,y))", "all x y z.((Steal(x) & Identity(y) & Victim(z)) -> AllowsThiefToTakeControlOfBankAccount(x,y,z))", "all x.(StealingIdentity(x) -> AllowsThiefToTakeControlOfBankAccount(x))", "all x y z.((StealingIdentity(x) & Thief(y) & BankAccount(z)) -> TakesControl(y,z))", "all x y.((Thefter(x) & Identity(y)) -> TakesControlOfBankAccount(x,y))", "all x y.((StealingIdentity(x) & Victim(y)) -> TakesControlOfBankAccount(x,y))", "all x y z.((Theft(x) & Identity(y) & Victim(z)) -> TakesControlOfBankAccount(x,y,z))", "all x y z.((StolenIdentity(x) & Thief(y) & BankAccount(z)) -> TakesControl(y,z))", "all x.(StealYourIdentity(x) -> AllowsThiefToTakeControlOfBankAccount(x))", "all x.(StealingIdentity(x) -> AllowsThethiefToTakeControlOfBankAccount(x))", "all x y.((Thief(x) & Identity(y)) -> Stealing(x,y))", "all x y.((Tthief(x) & Victim(y)) -> StealIdentity(x,y))", "all x.(StealYourIdentity(x) -> AllowsThiefToTakeControlOfBankAccount(x))", "all x.(StealingIdentity(x) -> AllowsThethiefToTakeControlOfBankAccount(x))", "all x.(StoleIdentity(x) -> AllowsThiefToTakeControlOfBankAccount(x,Victim))"]}
{"id": "enwn_validation_578", "nl": "Losing control of your bank account leads to financial problems.", "fol": "", "prediction": ["all x.((BankAccountControlLoss(x) & FinancialProblems(x)) -> LosesControl(x))", "all x.(LosingControlOfBankAccount(x) -> FinancialProblems(x))", "all x.((BankAccountControl(x) & LosesControl(x)) -> FinancialProblems(x))", "all x y.((BankAccount(x) & LosingControl(x,y)) -> FinancialProblems(y))", "all x.(LosingBankAccountControl(x) -> FinancialProblems(x))", "all x.((BankAccount(x) & LosesControl(x)) -> FinancialProblems(x))", "all x y.((BankAccountControl(x) & LosingControl(y)) -> FinancialProblems(x))", "all x y.((BankAccount(x) & LosingControl(x,y)) -> FinancialProblems(x))", "all x y z.((BankAccount(x) & BankAccount(y) & FinancialProblem(z)) -> LosesControl(x,y,z))", "all x y.((BankAccount(x) & LosesControl(x,y)) -> FinancialProblems(y))", "all x.(LosingControlOfBankAccount(x) -> FinancialProblems(x))", "all x.((BankAccountControlLoss(x) & FinancialProblems(x)) -> LosesControl(x))", "ALL X.((BankAccount(x) & LosesControl(x)) -> FinancialProblems(x))", "all x y.((BankAccountControl(x) & LosingControl(y)) -> FinancialProblems(x))", "all x.(LosingBankAccountControl(x) -> FinancialProblems(x))", "all x.((BankAccountControlLoss(x) & FinancialProblems(x)) -> LosesControl(x))"]}
{"id": "enwn_validation_579", "nl": "Karen stole the customer's identity.", "fol": "", "prediction": ["all x y.((Karen(x) & Customer(y)) -> StolenIdentity(x,y))", "Karen stolesCustomerIdentity(Karen)", "all x.(Karen(x) -> StolenCustomerIdentity(x))", "(StoleCustomerIdentity(Karen))", "all x y z.((Karen(x) & Customer(y) & Identity(z)) -> Stolen(x,y,z))", "Karen stoles customer's identity.", "all x y.((Karen(x) & Customer(y)) -> StolenIdentity(x,y))", "-StoleCustomerIdentity(Karen,Karen)", "Karen stoles CustomerIdentity(Karen)", "all x.(Karen(x) -> StolenCustomerIdentity(x))", "(StoleCustomerIdentity(Karen)", "Karen stolesCustomerIdentity(Karina)", "Karen stole customer's identity.", "all x y.((Karen(x) & Customer(y)) -> StolenIdentity(x,y))", "Karen stoles customer's identity.", "(StoleCustomerIdentity(Karen)"]}
{"id": "enwn_validation_580", "nl": "Stealing someone's identity can cause them financial problems.", "fol": "", "prediction": ["all x y.((StolenIdentity(x) & Person(y)) -> CausesFinancialProblems(x,y))", "all x.(StealingIdentity(x) -> CausesFinancialProblems(x))", "all x y.((Staling(x) & Person(y)) -> CausesFinancialProblems(x,y))", "all x y.((StealingIdentity(x) & Person(y)) -> CausesFinancialProblems(x,y))", "all x.(StolenIdentity(x) -> CausesFinancialProblems(x))", "all x.(StealingIdentity(x) -> CausesFinancialProblems(x))", "all x y.((Stole(x,y) & Person(y)) -> CanCauseFinancialProblems(x,y))", "all x y z.((Identity(x) & Identity(y) & FinancialProblem(z) & Stealing(x,y,z)) -> Causes(x,y,z))", "all x y z.((Identity(x) & Person(y) & Identity(z) & Stealing(x,y)) -> CausesFinancialProblems(x,y,z))", "all x.(StealingIdentity(x) -> CanCauseFinancialProblems(x))", "all x y.((StalingIdentity(x) & Person(y)) -> CanCauseFinancialProblems(x,y))", "all x.(Stole(x) -> CanCauseFinancialProblems(x))", "all x y.((StealingIdentity(x) & Person(y)) -> CausesFinancialProblems(x,y))", "All x.(StolenIdentity(x) -> CausesFinancialProblems(x))", "exists x.(IdentityStolen(x) & CausesFinancialProblems(x))", "all x.(StealYourIdentity(x) -> CausesFinancialProblems(x))"]}
{"id": "enwn_validation_581", "nl": "You shouldn't steal someone's identity.", "fol": "", "prediction": ["all x.((StoleIdentity(x) & Person(x)) -> -StoleIdentity(x))", "all x y.((StoleIdentity(x) & Person(y)) -> -StoleIdentity(x,y))", "all x.((StoleIdentity(x) & -StoleIdentity(x)) -> -StoleIdentity(x))", "all x y.((Person(x) & Identity(y)) -> -Stole(x,y))", "all x.((Person(x) & -StoleIdentity(x)) -> -StoleIdentity(x))", "-StoleIdentity(x)", "all x y.((StoleIdentity(x,y) & Person(y)) -> -StoleIdentity(x,y))", "(-StealIdentity(x) -> -StoleIdentity(x))", "all x.((YouBreatheIdentity(x) & -StealIdentity(x)) -> -StealIdentity(x))", "exists x.(StoleIdentity(x) & -StoleIdentity(x))", "all x.((StoleIdentity(x) & Person(x)) -> -StoleIdentity(x))", "(StoleIdentity(you) | -StoleIdentity(you)))", "-StoleIdentity(x)", "all x y.((Fraud(x) & Person(y)) -> -StealIdentity(x,y))", "exists x.(StoleIdentity(x) & -StoleIdentity(x))", "-StoleIdentity(x)"]}
{"id": "enwn_validation_582", "nl": "Karen should not have stolen the customer's identity.", "fol": "", "prediction": ["all x.((Karen(x) & Customer(y)) -> -StolenIdentity(x,y))", "all x y.((Karen(x) & Customer(y)) -> -StolenIdentity(x,y))", "all x.(Karen(x) -> -StolenCustomerIdentity(x))", "Karen should not have stolen the customer's identity.", "(-StolenIdentity(Karen))", "Karen should not have stolen customer's identity.", "-(Karen shouldn'tHasStolenCustomerIdentity(Karen))", "-(KarenBoardedCustomerIdentity(Karen))", "all x.((Karen(x) & Customer(y)) -> -StolenIdentity(x,y))", "(-StolenIdentity(Karen,Customer))", "all x y.((Karen(x) & Customer(y)) -> -StolenIdentity(x,y))", "(StolenIdentity(Karen,Customer))", "all x.(Karen(x) -> -StolenCustomerIdentity(x))", "Karen should not have stolen the customer's identity.", "Karen should not have stolen customer's identity.", "all x y.((Karen(x) & Customer(y)) -> -StolenIdentity(x,y))"]}
{"id": "enwn_validation_583", "nl": "Jenna's friend didn't give her permission to take any of her stuff.", "fol": "", "prediction": ["Jenna's friend didn't give permission to take any of her stuff.", "all x.((Friend(x) & Jenna(x)) -> -GivenPermissionToTakeAnyOfStuff(x,y))", "all x y.((Friend(x) & Jenna(y)) -> -GivenPermissionToTakeStuff(x,y))", "(Friend(Jenna) & -GivedPermissionToTakeStuff(Jenna))", "(-GivenPermissionToTakeStuff(Jenna,Stuff))", "all x.((Friend(x) & Jenna(x)) -> -GivenPermissionToTakeStuff(x,y))", "all x.(Friend(x) -> -GiveDisclaimer(x,Jenna,Stuff))", "(-GiveNeighborPermission(Jenna) & JennasStuff(Jenna))", "Jenna's friend didn't give permission to take any of her stuff.", "(-GivenPermissionToTakeAnyOfStuff(Jenna,Stuff))", "all x y.((Friend(x) & Jenna(y)) -> -GivenPermissionToTakeAnyOfStuff(x,y))", "(Friend(Jenna) & JennasFriend(Jenna) & -GivePermissionToTakeStuff(Jenna,Stuff))", "all x.((Friend(x) & Jenna'sFriend(x)) -> -GivenPermissionToTakeAnyStuff(x,y))", "Jenna's friend -GivenPermissionToTakeAnyOfStuff(Jenna,Stuff))", "Jenna's friend didn't give permission to take any of her stuff.", "Jenna's friend didn't give permission to take any of her stuff."]}
{"id": "enwn_validation_584", "nl": "Jenna took a Clif bar from the pantry.", "fol": "", "prediction": ["all x y.((Jenna(x) & Pantry(y)) -> TakesClifBar(x,y))", "Jenna took a ClifBar from the Pantry.", "all x y z.((Jenna(x) & ClifBar(y) & Pantry(z)) -> TakenFrom(x,y,z))", "all x.((Jenna(x) & ClifBar(x)) -> FromPantries(x))", "all x y.((Jenna(x) & Pantry(y)) -> TakesClifBar(x,y))", "Jenna took a ClifBar from the Pantry.", "all x.((Jenna(x) & ClifBar(x)) -> TakenFromPantries(x))", "Jenna took a ClifBarFromPantry(Jenna,Pantry)", "(all x.(Jenna(x) -> TakesClifBar(x)))", "(TakesClifBar(Jenna,Pantry))", "Jenna took ClifBar from Pantry.", "Jenna & ClifBar(Jenna)", "all x.((Jenna(x) & ClifBar(x)) -> FromPantry(x))", "Jenna took a Clif Bar from the Pantry.", "Jenna took a ClifBarFromPantries(Jenna)", "Jenna took ClifBar from Pantry."]}
{"id": "enwn_validation_585", "nl": "Jenna's friend bought the Clif bars in the pantry.", "fol": "", "prediction": ["all x y.((Friend(x) & Jenna(y)) -> PurchasedClifBarsInPantry(x,y))", "Jenna's friend bought the ClifBarsInPantry(Jenna,Friend,Pantry)", "all x y z.((Friend(x) & Jenna(y) & ClifBar(z)) -> PurchasedInPantry(x,y,z))", "all x.((Friend(x) & Jenna(x)) -> PurchasedClifBarsInPantry(x))", "(Friend(Jenna) & BuysClifBarsInPantry(Jenna))", "(JennasFriendBuysClifBarsInPantry(Jenna))", "all x y.((Friend(x) & Jenna(y)) -> BuysClifBars(x,y))", "JennasFriendBuysClifBarsInPantries(Jenna,Friend,Pantry)", "Jenna's friend bought the ClifBarsInPantries.", "(Friend(Jenna) & PurchasedClifBarsInPantries(Jenna))", "all x y.((Friend(x) & JennasFriend(y)) -> PurchasedClifBarsInPantry(x,y))", "all x.((Friend(x) & JennasFriend(x)) -> PurchasedClifBarsInPantries(x))", "JennasFriendBoughtClifBarsInPantry(Jenna,Friend,Pantry)", "Jenna's friend bought the ClifBarsInPantry(Jenna,Friend))", "Jenna's friend bought ClifBarsInPantry(Jenna,Friend))", "Jenna's friend bought the ClifBars in the Pantry."]}
{"id": "enwn_validation_586", "nl": "Once you buy something, it belongs to you.", "fol": "", "prediction": ["all x.(Buys(x) -> BelongsTo(x,y))", "all x.((Buys(x) & BelongsTo(x)) -> Buys(x))", "all x y.((Buys(x) & Product(y)) -> BelongsTo(x,y))", "all x y.((Buys(x) & Purchases(y)) -> BelongsTo(x,y))", "all x.((Buys(x) & Buys(x)) -> BelongsTo(x,y))", "all x.(Buys(x) -> BelongsTo(x,y))", "all x y z.((Buys(x) & Product(y) & Purchase(z)) -> BelongsTo(x,y,z))", "all x y.((Buys(x) & Product(y)) -> BelongsTo(x,y))", "all x.((Buys(x) & BelongsTo(x,y)) -> Buys(x,y))", "all x y.((Buys(x,y) & Product(y)) -> BelongsTo(x,y))", "all x y.((Buys(x) & Object(y)) -> BelongsTo(x,y))", "all x.(Buys(x) -> BelongsToYou(x))", "exists x.(Buys(x,y) & BelongsTo(x,y))", "All x.((Buys(x) & Buys(x)) -> BelongsTo(x,y))", "exists x.(Buys(x) & BelongsTo(x,y))", "exists x.(Buys(x) & BelongsTo(x,y))"]}
{"id": "enwn_validation_587", "nl": "You shouldn't take someone else's belongings without their permission.", "fol": "", "prediction": ["all x y.((Person(x) & Belonging(y)) -> -TakesWithoutPermission(x,y))", "all x.((TakesBelongings(x) & -TakesBelongingsWithoutPermission(x)) -> -TakesBelongingsWithoutPermission(x))", "all x.((Person(x) & TakesBelongingsWithoutPermission(x)) -> -TakesBelongingsWithoutPermission(x))", "(all x.(HasBelongings(x,y) & TakesWithoutPermission(x,y)) -> -TakesWithoutPermission(x,y))", "all x y.((Person(x) & BelongsTo(y,x)) -> -TakesWithoutPermission(x,y))", "-(TakesBelongingsWithoutPermission(x))", "all x y.((Family(x) & Person(y) & TakesWithoutPermission(x,y)) -> -TakesWithoutPermission(x,y))", "all x y.((Person(x) & Belonging(y)) -> -TakesWithoutPermission(x,y))", "all x y.((Alternative(x) & Belonging(y)) -> -TakesWithoutPermission(x,y))", "all x y z.((Person(x) & Belonging(y) & Belonging(z) & TakesWithoutPermission(x,y,z)) -> -TakesWithoutPermission(x,y,z))", "all x.((YouThanTakeBelongings(x) & -UsesWithoutPermission(x)) -> -UsesWithoutPermission(x))", "all x.((TakesBelongingsWithoutPermission(x)) -> -Person(x))", "(-TakesBelongingsWithoutPermission(you,Alternate(x))", "all x y.((HasBelonging(x,y) & TakesWithoutPermission(x,y)) -> -TakesWithoutPermission(x,y))", "exists x.(Belonging(x) & -TakesWithoutPermission(x))", "exists x.(HasPermission(x,y) & TakesBelongings(x,y))"]}
{"id": "enwn_validation_588", "nl": "The Clif bars in the pantry belonged to Jenna's friend.", "fol": "", "prediction": ["all x y.((ClifBar(x) & Pantry(y)) -> BelongedToFriend(x,y))", "all x.(ClifBar(x) -> BelongsToFriend(x,Jenna))", "all x.((ClifBar(x) & Pantry(x)) -> BelongedToFriend(x,Jenna))", "all x y z.((ClifBar(x) & Pantry(y) & JennaFriend(z)) -> BelongedTo(x,y,z))", "(BelongsToFriend(ClifBars,Jenna))", "all x y.((ClifBar(x) & Pantry(y)) -> BelongedToFriend(x,y))", "all x.((ClifBars(x) & Pantry(x)) -> BelongedToFriend(x,Jenna))", "all x.(ClifBar(x) -> BelongedToFriend(x,Jenna))", "(ClifBarsInPantries(c) & BelongedToFriend(c,j))", "(ClifBarsInPantriesBelongedToFriend(Jenna))", "all x y.((ClifBar(x) & Pantry(y)) -> BelongsToFriend(x,y))", "all x y z.((ClifBar(x) & Pantry(y) & JennaFriend(z)) -> BelongedTo(x,y,z))", "all x.(ClifBars(x) -> BelongsToFriend(x,Jenna))", "All x.((ClifBars(x) & Pantry(x)) -> BelongedToFriend(x,Jenna))", "all x y.((ClifBars(x) & Pantry(y)) -> BelongedToFriend(x,y))", "all x y.((ClifBar(x) & Pantry(y)) -> BelongedToFriend(x,y))"]}
{"id": "enwn_validation_589", "nl": "Jenna took one of her friend's Clif bars.", "fol": "", "prediction": ["all x y.((Jenna(x) & ClifBar(y)) -> TakenBy(x,y))", "Jenna took one of her friend's ClifBars.", "all x.((Jenna(x) & ClifBar(x)) -> TakenBy(x,y))", "(Fan(Jenna) & TakesClifBar(Jenna,Clif))", "all x y z.((Jenna(x) & ClifBar(y) & Friends(z)) -> Taken(x,y,z))", "(FamilyClifBar(Jenna) & Takes(Jenna,ClifBar))", "all x y.((Jenna(x) & ClifBar(y)) -> TakenBy(x,y))", "Jenna took one of friend's ClifBars.", "Jenna took one of her friend's ClifBars.", "all x.((Jenna(x) & ClifBar(x)) -> TakenBy(x,y))", "(TakesClifBar(Jenna,Friend,Clif))", "all x y.((Jenna(x) & ClifBar(y)) -> Takes(x,y))", "Jenna took one of her friend's ClifBars.", "all x.((Jenna(x) & FriendsClifBar(x)) -> TakenBy(x,y))", "Jenna took one of friend's ClifBars.", "Jenna took one of her friend's ClifBars."]}
{"id": "enwn_validation_590", "nl": "Jenna took one of her friend's Clif bars without her permission.", "fol": "", "prediction": ["all x y.((Jenna(x) & ClifBar(y)) -> TakenWithoutPermission(x,y))", "Jenna took one of her friend's ClifBars without permission.", "all x y z.((Jenna(x) & ClifBar(y) & Friends(z)) -> TakenWithoutPermission(x,y,z))", "all x.((Jenna(x) & ClifBar(x)) -> TakenWithoutPermission(x))", "(all x.(Jenna(x) -> TakesClifBar(x,y)))", "(NeighborsClifBars(Jenna) & TakesWithoutPermission(Jenna,ClifBar))", "all x y.((Jenna(x) & ClifBar(y)) -> TakenWithoutPermission(x,y))", "Jenna took one of her friend's ClifBars without permission.", "Jenna took one of friend's ClifBars without permission.", "all x y z.((Jenna(x) & ClifBar(y) & Friends(z)) -> TakenWithoutPermission(x,y,z))", "(all x.(Jenna(x) -> TakesClifBar(x,y)))", "all x.((Jenna(x) & ClifBar(x)) -> TakenWithoutPermission(x,y))", "all x y.((Jenna(x) & ClifBar(y)) -> TakenWithoutPermission(x,y))", "Jenna took one of her friend's ClifBars without permission.", "Jenna took one of her friend's ClifBars,withoutPermission, to a friend.", "all x y.((Jenna(x) & ClifBar(y)) -> TakenWithoutPermission(x,y))"]}
{"id": "enwn_validation_591", "nl": "Jenna shouldn't have taken the Clif bar.", "fol": "", "prediction": ["all x.((Jenna(x) & -ClifBar(x)) -> -ClifBar(x))", "Jenna shouldn't have taken ClifBar.", "-HasClifBar(Jenna)", "all x.((Jenna(x) & ClifBar(x)) -> -Has(x,y))", "-(Jenna(Jenna) -> ShouldNeedClifBar(Jenna)))", "(-ShouldNeedClifBar(Jenna))", "Jenna shouldn't have taken ClifBar.", "Jenna should not have taken ClifBar.", "all x.(Jenna(x) -> -TakenClifBar(x))", "all x.((Jenna(x) & -ClifBar(x)) -> -ClifBar(x))", "Jenna shouldn't have taken ClifBar(Jenna)", "-(Jenna(Jenna,ClifBar))", "Jenna shouldn't have taken the ClifBar.", "all x.((Jenna(x) & ClifBar(x)) -> -shouldHave(x,y))", "all x.((Jenna(x) & -ClifBar(x)) -> -ClifBar(x))", "Jenna shouldn't have taken ClifBar."]}
{"id": "enwn_validation_592", "nl": "Rich deducted points from two students because they submitted the same project.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y) & SubmittedSameProject(x,y)) -> DeductedPoints(x,y))", "all x y z.((Student(x) & Student(y) & Student(z) & SubmittedSameProject(x,y,z)) -> DeductedPoints(x,y,z))", "Rich deductedPointsFromTwoStudentsSinceSubmittedSameProject(Rich,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,StuStudent,StuStudent,StuStudent,StuStudent,StuStudent,StuStudent,StuStudent,StuStudent,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Student,Stud", "(Student(Rich) & Student(Rich) & SubmittedSameProject(Rich,Student))", "all x.((Student(x) & Student(x) & SubmittedSameProject(x)) -> DeductedPoints(x))", "(SubmittedSameProject(Rich,2) & DeductedPoints(Rich,2))", "(Student(Rich) & Student(Student(Rich) & SubmittedSameProject(Rich))", "all x y.((Student(x) & Student(y) & SubmittedSameProject(x,y)) -> DeductedPoints(x,y))", "Rich deductedPointsFromTwoStudents(Rich,Students,SameProject))", "Rich deductedPointsFromTwoStudentsForSubmittingSameProject(Rich,Student2))", "all x y z.((Student(x) & Student(y) & Student(z) & SubmittedSameProject(x,y,z)) -> DeductedPoints(x,y,z))", "all x.((Student(x) & Student(x) & SubmittedSameProject(x)) -> DeductedPointsFrom(x,y))", "all x y z.((Student(x) & Student(y) & Project(z) & Submitted(y,z)) -> DeductedPoints(x,y,z))", "(Student(Rich) & Student(Student(Rich) & SubmittedSameProject(Rich))", "all x y.((Student(x) & Student(y) & SubmittedSameProject(x,y)) -> DeductedPoints(x,y))", "all x y.((Student(x) & Student(y) & SubmittedSameProject(x,y)) -> DeductedPointsFrom(x,y))"]}
{"id": "enwn_validation_593", "nl": "The project worksheet said that everyone was supposed to do the project on their own.", "fol": "", "prediction": ["all x.(ProjectWorksheet(x) -> ShouldDoProjectOnOwn(x))", "all x y.((ProjectWorksheet(x) & Person(y)) -> ShouldDoProjectOnOwn(y,x))", "all x y.((ProjectWorksheet(x) & Project(y)) -> SaidToDoOnOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfOfO(x,y)))", "the project worksheet said that everyone was supposed to do the project on their own.", "all x.((ProjectWorksheet(x) & EveryoneSaidToDoProjectOnOwn(x)) -> SaidSo(x))", "(ProjectWorksheet(x) & SaidEveryoneSaidToDoProjectOnOwn(x))", "all x y z.((ProjectWorksheet(x) & Person(y) & Project(z)) -> ShouldDoOnOfOwn(y,z))", "all x.(ProjectWorksheet(x) -> ShouldDoProjectOnOwn(x))", "-(ProjectWorksheet(x) & EveryoneSaid(x))", "all x.((ProjectWorksheet(x) & Everyone(x)) -> ShouldDoProjectOnOwn(x))", "all x.(ProjectWorksheet(x) -> SaidEveryoneSaidToDoProjectOnOwn(x))", "(ProjectWorksheet) & SaysEveryoneSaidToDoProjectOnOfOwn(x))", "all x y.((ProjectWorksheet(x) & Person(y)) -> ShouldDoProjectOnOwn(y,x))", "all x y.((ProjectWeekly(x) & Project(y)) -> ShouldDoOnOfOwn(x,y))", "all x.(ProjectWorksheet(x) -> EveryoneSaidToDoProjectOnOwn(x))", "all x y.((ProjectWorksheet(x) & Project(y)) -> SaidOnOfOwn(x,y))"]}
{"id": "enwn_validation_594", "nl": "People working independently on a creative task will produce different results.", "fol": "", "prediction": ["all x y.((WorkingIndependently(x) & CreativeTask(y)) -> DifferentResults(x,y))", "all x.(WorkingIndependentlyOnCreativeTask(x) -> DifferentResults(x))", "all x y.((Person(x) & CreativeTask(y) & WorksIndependently(x,y)) -> DifferentResults(x))", "all x.((WorkingIndependently(x) & CreativeTask(x)) -> DifferentResults(x))", "all x y z.((WorkingIndependently(x) & CreativeTask(y) & CreativeTask(z)) -> DifferentResults(x,y,z))", "all x y.((WorkingIndependently(x) & CreativeTask(y)) -> DifferentResults(x,y))", "all x y z.((Person(x) & CreativeTask(y) & CreativeTask(z) & WorksIndependently(x,y)) -> ProducesDifferentResults(x,z))", "all x.(WorkingIndependentlyOnCreativeTask(x) -> DifferentResults(x))", "all x y.((Person(x) & CreativeTask(y) & WorksIndependently(x,y)) -> ProducesDifferentResults(x,y))", "all x.((WorkingIndependently(x) & CreativeTask(x)) -> DifferentResults(x))", "all x y.((WorkingIndependently(x) & CreativeTask(y)) -> DifferentResults(x,y))", "all x.(WorkingIndependentlyOnCreativeTask(x) -> DifferentResults(x))", "exists x.(WorkingIndependently(x) & CreativeTask(x) & DifferentResults(x))", "all x y.((WorkingIndependentlyOnCreativeTask(x) & CreativeTask(y)) -> DifferentResults(x,y))", "exists x.(WorkingIndependently(x) & CreativeTask(x) & DifferentResults(x))", "exists x.(WorkingIndependently(x) & CreativeTask(x) & DifferentResults(x))"]}
{"id": "enwn_validation_595", "nl": "A school project is a creative task.", "fol": "", "prediction": ["all x.(SchoolProject(x) -> CreativeTask(x))", "all x y.((SchoolProject(x) & CreativeTask(y)) -> CreatedBy(x,y))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x y.((SchoolProject(x) & School(y) & CreativeTask(x)) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x y.((SchoolProject(x) & CreativeTask(y)) -> Creative(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x y.((SchoolProject(x) & CreativeTask(y)) -> CreatedBy(x,y))", "all x y.((SchoolProject(x) & School(y) & CreativeTask(x)) -> Creative(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "exists x.(SchoolProject(x) & CreativityTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "exists x.(SchoolProject(x) & CreativeTask(x))"]}
{"id": "enwn_validation_596", "nl": "Deducting points from a student for violating rules is a valid response.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y) & ViolatesRules(x,y)) -> ValidResponse(x))", "all x.((Student(x) & ViolatesRules(x)) -> ValidResponse(x))", "all x y z.((Student(x) & Student(y) & Rule(z) & Violates(y,z)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(x,y)) -> ValidResponse(x,y))", "all x.((Student(x) & ViolatesRules(x)) -> ValidResponse(x))", "all x y z.((Student(x) & Student(y) & Rule(z) & Violates(x,y,z)) -> ValidResponse(x))", "all x.((DeductsPointsFromStudent(x) & ViolatesRules(x)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(x,y)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(y)) -> ValidResponse(x,y))", "all x.((Student(x) & ViolatesRules(x)) -> ValidResponse(x))", "all x.((Student(x) & ViolatesRules(x)) -> ValidResponse(x))", "all x y z.((Student(x) & Student(y) & Rules(z) & Violates(x,y,z)) -> ValidResponse(x))", "all x.((Student(x) & ViolatesRules(x)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(x,y)) -> ValidResponse(x,y))", "all x y.((Student(x) & Student(y) & ViolatesRules(y)) -> ValidResponse(x,y))", "all x.((Student(x) & ViolatesRules(x)) -> ValidResponse(x))"]}
{"id": "enwn_validation_597", "nl": "People working independently on a school project will produce different results.", "fol": "", "prediction": ["all x y.((WorkingIndependently(x) & SchoolProject(y)) -> DifferentResults(x,y))", "all x.(WorkingIndependentlyOnSchoolProject(x) -> DifferentResults(x))", "all x y.((Person(x) & SchoolProject(y) & WorksIndependently(x,y)) -> DifferentResults(x,y))", "all x y z.((WorkingIndependently(x) & SchoolProject(y) & SchoolProject(z)) -> DifferentResults(x,y,z))", "all x y.((WorkingIndependent(x) & SchoolProject(y)) -> DifferentResults(x,y))", "all x y.((WorkingIndependently(x) & SchoolProject(y)) -> DifferentResults(x,y))", "all x.((WorkingIndependently(x) & SchoolProject(x)) -> DifferentResults(x))", "all x.(WorkingIndependentlyOnSchoolProject(x) -> DifferentResults(x))", "all x y z.((WorkingIndependently(x) & SchoolProject(y) & Person(z) & WorksOn(z,y)) -> DifferentResults(z))", "all x y z.((Person(x) & SchoolProject(y) & SchoolProject(z) & WorksIndependently(x,y,z)) -> DifferentResults(x,y,z))", "exists x.(WorkingIndependently(x) & SchoolProject(x) & DifferentResults(x))", "all x y.((Person(x) & SchoolProject(y) & WorksIndependently(x,y)) -> DifferentResults(x,y))", "all x.(WorkingIndependentlyOnSchoolProject(x) -> DifferentResults(x))", "all x y.((WorkingIndependently(x) & SchoolProject(y)) -> DifferentResults(x,y))", "exists x.(WorkingIndependently(x) & SchoolProject(x) & DifferentResults(x))", "exists x.(WorkingIndependentOnSchoolProject(x) & DifferentResults(x))"]}
{"id": "enwn_validation_598", "nl": "The two students must have worked together if they produced the same project.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y) & ProducedSameProject(x,y)) -> WorkedTogether(x,y))", "all x.((Student(x) & Student(x) & SameProject(x)) -> WorkedTogether(x))", "all x.((Student(x) & Student(x) & ProducedSameProject(x)) -> WorkedTogether(x))", "all x y z.((Student(x) & Student(y) & Project(z) & ProducedSame(x,z)) -> WorkedTogether(x,y,z))", "all x y.((Student(x) & Student(y) & ProducesSameProject(x,y)) -> WorkedTogether(x,y))", "(WorkedTogether(students,sameProject) -> WorksTogether(students,sameProject))", "(WorkedTogether(Students,SameProject) -> WorksTogether(Students,SameProject))", "all x y z.((Student(x) & Student(y) & Project(z) & ProducedSameProject(x,y,z)) -> WorkedTogether(x,y,z))", "(WorkedTogether(students,SameProject,SameProject) -> WorkedTogether(students,SameProject))", "all x.((Student(x) & Student(x) & SameProject(x)) -> WorkedTogether(x))", "all x.((Student(x) & SameProject(x)) -> WorkedTogether(x))", "all x y.((Student(x) & Student(y) & ProducedSameProject(x,y)) -> WorkedTogether(x,y))", "all x.(WorkedTogether(x) -> SameProject(x))", "all x y.((Student(x) & Student(y) & ProducesSameProject(x,y)) -> WorksTogether(x,y))", "all x y.((Student(x) & Student(y) & SameProject(x,y)) -> WorkedTogether(x,y))", "all x.((Student(x) & Student(x) & ProducedSameProject(x)) -> WorkedTogether(x))"]}
{"id": "enwn_validation_599", "nl": "The two students broke the rules by submitting the same project.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y)) -> BreaksRules(x,y))", "all x.((Student(x) & Student(x)) -> BreaksRules(x))", "(Student(Student) & Student(Student) & SubmitsSameProject(Student,Student,Student))", "-(Student(Student) & Student(Student) & SameProject(Student,Submits(Student,Submits(Student,Submits(Student,Submits(Student,Submits(Student,Submits(Student,Submits(Student,Submits(Student,Submits(Student,Submits(Student,Submits(Student,Submits(Student,Subject(Student,Subject,Subject))))", "all x y z.((Student(x) & Student(y) & Project(z) & Submits(x,z)) -> BreaksRules(x,y,z))", "(BreaksRules(Students) & SubmitsSameProject(Students))", "the rules were broken by the two students submitting the same project.", "both students broke rules by submitting the same project.", "all x y.((Student(x) & Student(y)) -> BreaksRules(x,y))", "all x y.((Student(x) & Student(y) & SubmitsSameProject(x,y)) -> BreaksRules(x))", "-(Student(x) & Student(x) & SubmitsSameProject(x)))", "all x.((Student(x) & Student(x)) -> BreaksRules(x))", "(BreaksRules(students,sameProject) & Submits(students,sameProject))", "(SameProjectSubmittedByStudents(Students,Records) & SameProject(Students,Records))", "the rules were broken by the two students who submitted the same project.", "all x.((Student(x) & Student(x)) -> BreaksRulesBySubmittingSameProject(x))"]}
{"id": "enwn_validation_600", "nl": "Rich deducted points from the students for breaking the rules.", "fol": "", "prediction": ["all x y.((Rich(x) & Student(y)) -> DeductedPointsForBreakingRules(x,y))", "all x y.((Student(x) & Rich(y)) -> DeductedPointsForBreakingRules(y,x))", "all x y z.((Rich(x) & Student(y) & Rule(z)) -> DeductedPointsFor(x,y,z))", "all x.((Rich(x) & Students(y)) -> DeductedPointsForBreakingRules(x,y))", "all x y.((Rich(x) & Student(y) & BreaksRules(x,y)) -> DeductsPoints(x,y))", "all x.((Student(x) & Rich(x)) -> DeductedPointsForBreakingRules(x))", "(ReichDeductedPointsFromStudentsForBreakingRules(Rich,Students))", "Rich deductedPointsForBreakingRules(Rich,Students)", "all x y.((Student(x) & Student(y) & BreaksRules(x,y)) -> DeductsPoints(x,y))", "(Rich(Rich) & BreaksRules(Rich))", "all x.((Rich(x) & Student(y) & BreaksRules(x,y)) -> DeductsPoints(x,y))", "(BreaksRules(Rich) -> DeductsPoints(Rich))", "all x y z.((Rich(x) & Student(y) & Rule(z)) -> DeductedPointsForBreaking(x,y,z))", "all x.(Rich(x) -> DeductedPointsForBreakingRules(x))", "all x y z.((Rich(x) & Student(y) & Rule(z) & Breaks(y,z)) -> DeductsPoints(x,y,z))", "all x y.((Rich(x) & Student(y)) -> DeductedPointsForBreakingRules(x,y))"]}
{"id": "enwn_validation_601", "nl": "Rich was right to deduct points from the students.", "fol": "", "prediction": ["all x.(Rich(x) -> DeductsPoints(x))", "all x y.((Rich(x) & Student(y)) -> DeductsPoints(x,y))", "Rich was right to deduct points from students.", "(Rich was right to deductPoints(Rich) & Students(Rich))", "(Rich(Rich) & RightToDeductPoints(Rich,Students))", "all x.(Rich(x) -> DeductPointsFromStudents(x))", "Rich was right to deductPointsFromStudents(Rich,Students)", "all x y.((Rich(x) & Student(y)) -> DeductsPoints(x,y))", "all x.((Rich(x) & RightToDeductPoints(x)) -> Students(x))", "Rich was right to deduct points from students.", "(Rich was right to deductPointsFromStudents(Rich,Students))", "all x.(Rich(x) -> RightToDeductPoints(x))", "Rich deducted points from students.", "all x y.((Rich(x) & Student(y)) -> RightToDeductPoints(x,y))", "Rich was right to deduct points from the students.", "all x y.((Rich(x) & Student(y)) -> DeductsPoints(x,y))"]}
{"id": "enwn_validation_602", "nl": "It's okay to sell lost items if you can't find their owner.", "fol": "", "prediction": ["all x.((LostItem(x) & -FindOwner(x)) -> OKToSell(x))", "all x.((SellsLostItems(x) & -FindsOwner(x)) -> OK(x))", "all x y.((LostItem(x) & Owner(y) & -Finds(x,y)) -> OKToSell(x,y))", "all x.((LostItem(x) & -FindOwner(x)) -> OKToSell(x))", "all x.((LoseItem(x) & -FindOwner(x)) -> OKToSell(x))", "all x y.((LoseItem(x) & -FindOwner(y)) -> OKToSell(x,y))", "all x.((SellLostItems(x) & -FindOwner(x)) -> OKToSell(x))", "all x y.((SellLostItems(x) & -FindOwner(y)) -> Okay(x,y))", "(all x.((LoseItem(x) & -FindOwner(x)) -> OKToSell(x)))", "all x.((LostItem(x) & -FindOwner(x)) -> OkayToSell(x))", "all x y.((SellsLostItems(x) & -FindsOwner(y)) -> OK(x,y))", "exists x.(LostItem(x) & -FindOwner(x))", "exists x.(SellLostItems(x) & -FindOwner(x))", "all x y.((LostItem(x) & Owner(y) & -Finds(x,y)) -> OKToSell(x,y))", "exists x.(SellLostItems(x) & -CanFindOwner(x))", "all x.((LostItem(x) & CannotFindOwner(x)) -> OkayToSell(x))"]}
{"id": "enwn_validation_603", "nl": "Jamie didn't try to find the camera's owner.", "fol": "", "prediction": ["all x.((Jamie(x) & Camera(y)) -> -TryToFindOwner(x,y))", "-(Jamie(Jamie) & Camera(Jamie))", "(-tryedToFindOwner(Jamie))", "Jamie didn't try to find camera's owner.", "(-TryToFindOwner(Jamie,Camera))", "all x y.((Camera(x) & Jamie(y)) -> -TryToFindOwner(y,x))", "(Jamie & Camera(Jamie) & -TryToFindOwner(Jamie))", "all x.(Jamie(x) -> -TryToFindOwner(x))", "(Jamie didn't try to find camera's owner.)", "Jamie -TriedToFindOwner(Jamie,Camera)", "all x.((Jamie(x) & Camera(y)) -> -TryToFindOwner(x,y))", "-(ChangeOwner(Jamie) & Camera(Jamie))", "-(Jamie(Jamie) & Camera(Jamie))", "Jamie didn't try to find camera's owner.", "Jamie didn't try to find the camera's owner.", "-(Jamie(Jamie) & CameraOwner(Jamie))"]}
{"id": "enwn_validation_604", "nl": "Jamie sold the camera on Ebay.", "fol": "", "prediction": ["all x.((Jamie(x) & Camera(y)) -> SoldOnEbay(x,y))", "Jamie sold the camera on Ebay.", "(SoldOnEbay(Jamie) & Camera(Jamie))", "all x y.((Jamie(x) & Camera(y)) -> SoldOnEbay(x,y))", "(SoldOnEbay(Jamie,Camera) & JamieSoldOnEbay(Jamie,Camera))", "-SoldOnEbay(Jamie,Camera)", "Jamie sold the camera on Ebay.", "Jamie SoldCameraOnEbay(Jamie)", "all x.((Jamie(x) & Camera(y)) -> SoldOnEbay(x,y))", "all x.(Jamie(x) -> SoldOnEbay(x))", "Jamie sold camera on Ebay.", "Jamie sold the camera on Ebay.", "(SoldOnEbay(Jamie) & Camera(Jamie))", "Jamie sold camera on eBay.", "Jamie sold the camera on eBay.", "Jamie sold the camera on Ebay."]}
{"id": "enwn_validation_605", "nl": "Losing something means leaving it somewhere accidentally.", "fol": "", "prediction": ["all x.(Losing(x) -> LeavesAwayInaccidentally(x))", "all x y.((Losing(x) & Something(y)) -> LeavesInaccidentally(x,y))", "all x.((Losing(x) & Something(x)) -> LeavesAwayInaccidentally(x))", "all x.(Losing(x) -> LeavesOrderUnexpectedly(x))", "all x y.((Losing(x) & Something(y)) -> LeavesAwayInaccidentally(x,y))", "all x y z.((Losing(x) & Something(y) & Place(z)) -> LeavesInaccidentally(x,y,z))", "all x.((Losing(x) & Something(x)) -> LeavesOracle(x))", "all x.(Losing(x) -> LeavesAwayInaccidentally(x))", "all x y.((Losing(x) & Something(y)) -> LeavesAndIntentionally(x,y))", "exists x.(Losing(x) & Something(x) & LeavesAway(x,y))", "all x y.((Lose(x) & Something(y)) -> Leaves(x,y))", "All x.((Losing(x) & Something(x)) -> LeavesApartmentInaccidentally(x))", "exists x.(Lose(x) & Something(x) & LeavesApartmentInaccidentally(x))", "all x.(Losing(x) -> LeavesSomewhereInaccidentally(x))", "all x y.((Losing(x) & Something(y)) -> LeftAtNearby(y,x))", "exists x.(Losing(x) & Losing(x) -> LeavesAway(x))"]}
{"id": "enwn_validation_606", "nl": "People don't leave valuables in public on purpose.", "fol": "", "prediction": ["all x.((Person(x) & -LaysValuablesInPublic(x)) -> -LaysValuablesInPublic(x))", "all x y.((Person(x) & Valuable(y)) -> -LaysInPublic(x,y))", "all x.((People(x) & -LaysValuablesInPublic(x)) -> -LaysValuablesInPublic(x))", "all x.((Person(x) & LeavesValuablesInPublic(x)) -> -LaysValuablesOnPurpose(x))", "all x y.((Person(x) & Value(y)) -> -LaysInPublic(x,y))", "all x.((People(x) & LeavesValuablesInPublic(x)) -> -LaysValuablesOnPurpose(x))", "all x y.((People(x) & Valuable(y)) -> -LaysInPublic(x,y))", "all x y z.((Person(x) & Valuable(y) & Public(z)) -> -LeaveInPublic(x,y,z))", "all x y.((Person(x) & Valuable(y)) -> -LeavesInPublic(x,y))", "exists x.(People(x) & -LaysValuablesInPublic(x))", "(all x.(Valuables(x) -> -LeaveInPublic(x)))", "exists x.(Person(x) & -LeaveValuablesInPublic(x))", "all x y.((People(x) & Value(y)) -> -LaysInPublic(x,y))", "all x y.((Person(x) & Valued(y)) -> -LeavesInPublic(x,y))", "exists x.(People(x) & LeavesValuablesInPublic(x))", "exists x.(Person(x) & -LaysValuablesInPublic(x))"]}
{"id": "enwn_validation_607", "nl": "Jamie found a camera sitting on a park bench.", "fol": "", "prediction": ["all x y.((Jamie(x) & Camera(y)) -> FoundOnParkBenches(x,y))", "all x.((Jamie(x) & Camera(y)) -> FoundOnParkBenches(x,y))", "(FindsCamera(Jamie) & SittingOnParkBenches(Jamie))", "(SittingOnParkBenches(Jamie,Jamie) -> FoundCamera(Jamie,Jamie))", "Jamie found a camera sitting on a park bench.", "all x y z.((Jamie(x) & Camera(y) & ParkBenches(z)) -> FoundOn(x,y,z))", "all x y.((Jamie(x) & Camera(y)) -> FoundOnParkBenches(x,y))", "all x y.((Jamie(x) & Camera(y) & ParkBenches(z)) -> FoundOn(x,y,z))", "all x.((Jamie(x) & Camera(x)) -> SittingOnParkBenches(x))", "Jamie found a camera sitting on a park bench.", "exists x.(Camera(x) & FoundOnParkBenches(x))", "(SittingOnParkBenches(Jamie,Jamie) -> FoundCamera(Jamie,Jamie))", "all x y.((Jamie(x) & Camera(y)) -> FoundSittingOnParkBenches(x,y))", "Jamie found a camera sitting on a park bench.", "exists x.(Camera(x) & FoundOnParkBenches(x))", "(SittingOnParkBenches(Jamie,Jamie))"]}
{"id": "enwn_validation_608", "nl": "Cameras don't put themselves on benches.", "fol": "", "prediction": ["all x.(Camera(x) -> -PutsOnBenches(x))", "all x y.((Camera(x) & Bench(y)) -> -PutsOn(x,y))", "(all x.(Camera(x) -> -PutsOnBenches(x)))", "all x.(Camera(x) -> -PutsOnBenches(x))", "all x y.((Camera(x) & Benches(y)) -> -PutsOn(x,y))", "(all x.(Camera(x) -> -PutsOnBenches(x)))", "all x.(Camera(x) -> -PutsOnBenches(x))", "all x y.((Camera(x) & Bench(y)) -> -PutsOn(x,y))", "all x.(Camera(x) -> -PlacesOnBenches(x))", "all x y.((Camera(x) & Benches(y)) -> -PutsOn(x,y))", "all x.(Camera(x) -> -PutsOnBenches(x))", "all x.(Camera(x) -> -PutsOnBench(x))", "exists x.(Camera(x) & -(PutsOnBenches(x) | PutsOnBenches(x))))", "all x.(Camera(x) -> -PlacesOnBenches(x))", "exists x.(Camera(x) & -StandsOnBenches(x))", "exists x.(Camera(x) & -PutsOnBench(x))"]}
{"id": "enwn_validation_609", "nl": "If someone left a valuable item in public, they lost it.", "fol": "", "prediction": ["all x.((LeavedValuableItem(x) & InPublic(x)) -> LostItem(x))", "all x y.((Person(x) & ValuableItem(y) & LeftInPublic(x,y)) -> Lost(x,y))", "all x.((Person(x) & LeftValuableItemInPublic(x)) -> LostItem(x))", "all x.(LeavedValuableItemInPublic(x) -> LostItem(x))", "all x y.((Person(x) & ValuableItem(y) & LeftInPublic(x,y)) -> Lost(x))", "all x y z.((Person(x) & ValuableItem(y) & PublicItem(z) & LeftInPublic(x,y,z)) -> Lost(x,y))", "all x y.((LeavedValuableItem(x) & Public(y)) -> LostItem(x,y))", "all x.((Person(x) & LeftValuableItem(x) & InPublic(x)) -> LostItem(x))", "all x.((LeavedValuableItem(x) & InPublic(x)) -> LostItem(x))", "all x.(LeavedValuableItemInPublic(x) -> LostItem(x))", "all x y z.((Person(x) & ValuableItem(y) & Public(z) & LeftInPublic(x,y,z)) -> Lost(x,y))", "all x y.((Person(x) & ValuableItem(y) & LeftInPublic(x,y)) -> Lost(x,y))", "all x.((LeavedValuableItemInPublic(x) & LostItem(x)) -> LostItem(x))", "all x.(LeavesValuableItemInPublic(x) -> LostItem(x))", "all x y.((Person(x) & ValuedItem(y) & LeftInPublic(x,y)) -> Lost(x,y))", "all x y.((Person(x) & ValuableItem(y) & LeftInPublic(x,y)) -> LostItem(x,y))"]}
{"id": "enwn_validation_610", "nl": "Someone left the camera on the park bench.", "fol": "", "prediction": ["exists x.(Camera(x) & LeftOnParkBenches(x))", "all x y.((Camera(x) & ParkBenches(y)) -> LeftOn(x,y))", "exists x.(Camera(x) & LeftOnParkBenches(x))", "all x y z.((Camera(x) & ParkBenches(y) & Camera(z)) -> LeftOn(x,z))", "all x y.((Camera(x) & ParkBenches(y)) -> LeftOn(x,y))", "exists x.(Camera(x) & ParkBenches(x))", "all x y.((Camera(x) & ParkBenches(y)) -> LeftOn(x,y))", "all x y z.((Camera(x) & ParkBenches(y) & Camera(z)) -> LeftOn(x,y,z))", "exists x.(Camera(x) & LeftOnParkBenches(x))", "-LaysCameraOnParkBenches(-)", "exists x.(Camera(x) & ParkBenches(x))", "all x y.((Camera(x) & ParkBenches(y)) -> LeftOn(x,y))", "exists x.(Camera(x) & LeftOnParkBenches(x))", "all x y.((Camera(x) & ParkBenches(y)) -> LeftOn(x,y))", "exists x.(Camera(x) & ParkBenches(x))", "exists x.(Camera(x) & LeftOnParkBench(x))"]}
{"id": "enwn_validation_611", "nl": "Someone lost the camera.", "fol": "", "prediction": ["exists x.(Camera(x) & Lost(x))", "-LoseCamera(x)", "all x.(LoseCamera(x) -> LostCamera(x))", "all x y.((Camera(x) & Camera(y)) -> Lost(x,y))", "exists x.(Camera(x) & Lost(x))", "-LostCamera(x)", "all x.(LostCamera(x) -> Camera(x))", "(LostCamera(x) -> LostCamera(x))", "-LoseCamera(x)", "all x y.((Person(x) & Camera(y)) -> Lost(x,y))", "exists x.(Person(x) & LostCamera(x))", "exists x.(Camera(x) & Lost(x))", "-LostCamera(x)", "-Layout(c)", "exists x.(Camera(x) & Lost(x))", "exists x.(Camera(x) & Lost(x))"]}
{"id": "enwn_validation_612", "nl": "Jamie sold a lost camera.", "fol": "", "prediction": ["all x.((Jamie(x) & LostCamera(x)) -> Sold(x,y))", "all x y.((Jamie(x) & Camera(y)) -> Sold(x,y))", "Jamie soldLostCamera(Jamie)", "Jamie soldsLostCamera(Jamie)", "(Sold(Jamie,LostCamera))", "(Sold(Jamie,LostCamera) -> JamieSold(Jamie,Camera))", "all x.((Jamie(x) & LostCamera(x)) -> Sold(x,y))", "(Sold(Jamie) & LostCamera(Jamie))", "all x y.((Jamie(x) & Camera(y)) -> Sold(x,y))", "Jamie soldLostCamera(Jamie)", "Jamie sold a lostCamera.", "Jamie soldSoldLostCamera(Jamie)", "all x.((Jamie(x) & LostCamera(x)) -> Sold(x,y))", "all x y.((Jamie(x) & Camera(y)) -> Sold(x,y))", "Jamie soldsLostCamera(Jim)", "(SoldByJamie(Jamie,LostCamera))"]}
{"id": "enwn_validation_613", "nl": "Jamie sold a lost camera without trying to find its owner first.", "fol": "", "prediction": ["all x y.((Jamie(x) & Camera(y) & Lost(y)) -> SoldWithoutFindingOwner(x,y))", "all x.((Jamie(x) & LostCamera(x)) -> SoldWithoutFindingOwner(x))", "all x y.((Jamie(x) & Camera(y)) -> (Sold(x,y) & Lost(y) & -FindOwner(y)))", "all x y z.((Jamie(x) & Camera(y) & Owner(z)) -> (Sold(x,y) & Lost(y) & -FindOwner(z)))", "(LostCamera(Jamie) & SoldWithoutFindingOwner(Jamie))", "Jamie sold a lost camera without trying to find owner first.", "(LoseCamera(Jamie,Jamie) & SoldWithoutFindingOwner(Jamie,Jamie))", "(LostCamera(Jim) & SoldWithoutFindingOwner(Jim))", "all x y.((Jamie(x) & Camera(y) & Lost(y)) -> Sold(x,y))", "all x.((Jamie(x) & LostCamera(x)) -> SoldWithoutFindingOwner(x))", "(LostCamera(James,James) & SoldWithoutFindingOwner(James,James))", "Jamie sold a lost camera without trying to find its owner first.", "all x y z.((Jamie(x) & Camera(y) & Owner(z)) -> Sold(x,y,z))", "all x y.((Jamie(x) & Camera(y)) -> (Sold(x,y) & Lost(y) & -FindOwnerFirst(x,y)))", "all x.((Jamie(x) & LostCamera(x)) -> Sold(x,y))", "all x.((Jamie(x) & LostCamera(x)) -> SoldWithoutFindingOwnerFirst(x))"]}
{"id": "enwn_validation_614", "nl": "Jamie should have tried to find the camera's owner before selling it.", "fol": "", "prediction": ["all x y.((Camera(x) & Jamie(y)) -> ShouldTryToFindOwner(y,x))", "all x.((Jamie(x) & Camera(y)) -> ShouldTriedToFindOwner(x,y))", "Jamie should have tried to find camera's owner before selling it.", "-(Jamie should have tried to FindOwner(Jamie,Camera) & BeforeSelling(Jamie,Camera))", "(TriedToFindOwner(Jamie) & Camera(Jamie))", "all x y.((Camera(x) & Jamie(y)) -> (TriedToFindOwner(y,x) & Sells(y,x)))", "(TriedToFindOwner(Jamie,Camera) & BeforeSelling(Jamie,Camera))", "-(Jamie shouldTryToFindOwner(Jamie) & Camera(Jamie))", "all x.((Jamie(x) & Camera(y)) -> ShouldTriedToFindOwner(x,y))", "Jamie should have tried to find camera's owner before selling it.", "((Jamie(Jamie) & Camera(Jamie)) -> -TriedToFindOwner(Jamie))", "(TriedToFindOwner(Jimmy) | SellsCamera(Jimmy)))", "all x y.((Camera(x) & Jamie(y)) -> ShouldTryToFindOwnerBeforeSelling(y,x))", "all x.((Camera(x) & Jamie(x)) -> ShouldTryToFindOwner(x))", "all x.((Jamie(x) & Camera(y)) -> (TriedToFindOwner(x,y) & Sells(x,y)))", "all x y.((Camera(x) & Jamie(y)) -> (TriedToFindOwner(y,x) & Selling(y,x)))"]}
{"id": "enwn_validation_615", "nl": "Removing bad players from a competitive sports team because they are unskilled is okay.", "fol": "", "prediction": ["all x.((BadPlayers(x) & Unskilled(x)) -> OK(x))", "all x y.((BadPlayer(x) & CompetitiveSportsTeam(y) & Unskilled(x)) -> OK(x))", "all x.((BadPlayers(x) & Unskilled(x)) -> Okay(x))", "all x y z.((BadPlayer(x) & CompetitiveSportsTeam(y) & Unskilled(z) & RemovedFrom(x,y)) -> OK(x))", "all x y.((BadPlayers(x) & CompetitiveSportsTeam(y) & Unskilled(x)) -> Okay(x))", "(all x.((BadPlayer(x) & Unskilled(x)) -> OK(x)))", "all x.((RemovesBadPlayers(x) & Unskilled(x)) -> Okay(x))", "all x.((BadPlayers(x) & Unskilled(x)) -> OK(x))", "all x y.((BadPlayer(x) & CompetitiveSportsTeam(y) & Unskilled(x)) -> OK(x))", "all x y.((CompetitiveSportsTeam(x) & BadPlayers(y,x) & Unskilled(y)) -> Okay(x))", "all x.((BadPlayers(x) & Unskilled(x) & CompetitiveSportsTeam(x)) -> OK(x))", "all x.((BadPlayers(x) & CompetitiveSportsTeam(x) & Unskilled(x)) -> Okay(x))", "all x.((BadPlayers(x) & Unskilled(x)) -> Okay(x))", "all x.((RemovesBadPlayers(x) & Unskilled(x)) -> OK(x))", "all x y.((BadPlayers(x) & CompetitiveSportsTeam(y) & UnSkilled(x)) -> Okay(x))", "all x y.((BadPlayer(x) & CompetitiveSportsTeam(y) & Unskilled(x,y)) -> OK(x))"]}
{"id": "enwn_validation_616", "nl": "A player performing poorly in a single game is not conclusive evidence that they are unskilled.", "fol": "", "prediction": ["all x.((Player(x) & PerformsPoorlyInSingleGame(x)) -> -ConclusiveEvidence(x))", "all x y.((Player(x) & SingleGame(y) & PerformsPoorly(x,y)) -> -ConclusiveEvidence(x,y))", "all x.((Player(x) & PerformsPoorly(x) & SingleGame(x)) -> -UnskilledEvidence(x))", "all x y.((Player(x) & SingleGame(y) & PerformsPoorly(x,y)) -> -Unskilled(x))", "all x.((Player(x) & PerformsPoorlyInSingleGame(x)) -> -Unskilled(x))", "all x.((Player(x) & PerformsPoorly(x) & SingleGame(x)) -> -ConclusiveEvidence(x))", "all x y z.((Player(x) & SingleGame(y) & Performance(x,y) & SingleGame(z) & PerformsPoorly(x,z)) -> -ConclusiveEvidence(x))", "exists x.(Player(x) & PerformsPoorlyInSingleGame(x) & -Unskilled(x))", "all x y.((Player(x) & SingleGame(y) & PerformsPoorly(x,y)) -> -ConclusiveEvidence(x,y))", "all x.(PerformsPoorlyInSingleGame(x) -> -UnskilledEvidence(x))", "all x.((Player(x) & PerformancePoorInSingleGame(x)) -> -ConclusiveEvidence(x))", "all x.((Player(x) & PerformsPoorlyInSingleGame(x)) -> -ConclusiveEvidence(x))", "all x y.((Player(x) & SingleGame(y) & PerformsPoorly(x,y)) -> -Unskilled(x))", "all x.((Player(x) & PerformsPoorly(x) & SingleGame(x)) -> -UnskilledEvidence(x))", "all x y.((Player(x) & SingleGame(y) & PerformsPoorly(x,y)) -> -ConclusiveEvidence(x,y))", "all x y.((Player(x) & SingleGame(y) & PerformsPoorly(x,y)) -> -CrusiveEvidence(x,y))"]}
{"id": "enwn_validation_617", "nl": "The other players on Cindy's soccer team voted to kick her off the team because she let three goals through in a playoff game.", "fol": "", "prediction": ["all x y.((Player(x) & Player(y) & Cindy's SoccerTeam(x) & LetsThreeGoals(y,x)) -> KicksOff(x,y))", "all x y.((Player(x) & SoccerTeam(y) & Cindy(x)) -> VotedToKickOff(x,y))", "all x y z.((Player(x) & SoccerTeam(y) & Cindy(z) & LetsThreeGoalsThrough(z,y)) -> KicksOff(x,y,z))", "(all x.(CindySoccerPlayer(x) -> KicksOffTeam(x)))", "(All x y.((Player(x) & Cindy's SoccerTeam(y)) -> VotedToKickOff(x,y))", "all x y.((Player(x) & Player(y) & CindysSoccerTeam(x) & LetsThreeGoals(y,x)) -> KicksOff(x,y))", "all x.((Player(x) & OnCindysSoccerTeam(x)) -> (LetsThreeGoalsInPlayoffGame(x)))", "(all x.((Player(x) & Cindy's SoccerTeam(x)) -> KickedOff(x)))", "all x.((Player(x) & CindySoccerTeam(x)) -> VotedToKickOff(x))", "all x y.((Player(x) & SoccerTeam(y) & Cindy(x) & LetsThreeGoalsThrough(x,y)) -> KicksOff(x,y))", "all x y z.((Player(x) & SoccerTeam(y) & Cindy(z) & LetsGoalsThrough(x,y,z)) -> KicksOff(x,y,z))", "all x.((Player(x) & PlaysCindysSoccerTeam(x)) -> VotedToKickCindyOffTeam(x))", "all x y z.((Player(x) & Player(y) & SoccerTeam(z) & Cindy(y) & LetsThreeGoals(y,z)) -> KicksOff(y,z))", "all x y.((Player(x) & Player(y) & OnCindysSoccerTeam(x,y)) -> VotedToKickOffTeam(x,y))", "(all x.(CindySoccerPlayer(x) -> KickedOffTeam(x)))", "all x.((Player(x) & OnCindySoccerTeam(x)) -> VotedToKickSheOffTeam(x))"]}
{"id": "enwn_validation_618", "nl": "A goalie's performance is reflected by the number of goals they let through.", "fol": "", "prediction": ["all x.((Goalie(x) & NumberOfGoals(x)) -> ReflectsPerformance(x))", "all x.(Goalie(x) -> NumberOfGoals(x))", "all x y.((Goalie(x) & Goal(y)) -> ReflectsPerformance(x,y))", "all x.((Goalie(x) & NumberOfGoals(x)) -> ReflectedPerformance(x))", "(ReflectsPerformanceByGoal(goal,n) & NumberOfGoals(goal,n))", "all x y.((Goalie(x) & NumberOfGoals(y)) -> ReflectsPerformance(x,y))", "all x y z.((Goalie(x) & Goal(y) & Goal(z)) -> ReflectsPerformance(x,y,z))", "all x y.((Goalie(x) & Goal(y)) -> ReflectedBy(x,y))", "all x.(Goalie(x) -> NumberOfGoals(x))", "all x y.((Goalie(x) & Goal(y) & LetsThrough(x,y)) -> ReflectsPerformance(x,y))", "all x.(Goalie(x) -> PerformanceReflectedByGoals(x))", "all x.((Goalie(x) & NumberOfGoals(x)) -> ReflectsPerformance(x))", "all x y.((Goalie(x) & NumberOfGoals(y)) -> ReflectedPerformance(x,y))", "all x.((Goalie(x) & NumberOfGoals(x)) -> ReflectedPerformance(x))", "all x.((Goalie(x) & NumberOfGoals(x,y)) -> ReflectsPerformance(x,y))", "all x.(Goalie(x) -> NumberOfGoals(x))"]}
{"id": "enwn_validation_619", "nl": "Cindy is a goalie.", "fol": "", "prediction": ["all x.(Cindy(x) -> Goalie(x))", "all x.((Cindy(x) & Goalie(x)) -> Goalie(x))", "(Goalie(Cindy) & Goalie(Cindy))", "(Goalie(Cindy) & -Goalie(Cindy))", "all x.(Cindy(x) -> Goalie(x))", "(Goalie(Cindy) | Goalie(Cindy)))", "Cindy is goalie.", "all x.(Goalie(x) -> Cindy(x))", "all x.(Cindy(x) -> Goalie(x))", "exists x.(Goalie(x) & Cindy(x))", "(Goalie(Cindy) & Goalie(Cindy))", "Cindy is goalie.", "(Goalie(Cindy) | Goalie(Cindy))", "exists x.(Goalie(x) & Cindy(x))", "all x.(Cindy(x) -> Goalie(x))", "all x.(Cindy(x) -> Goalie(x))"]}
{"id": "enwn_validation_620", "nl": "A player's performance in one game isn't enough of a reason to remove them from a team.", "fol": "", "prediction": ["all x y.((Player(x) & Game(y) & PerformanceIn(x,y)) -> -EnoughToRemove(x,y))", "all x y z.((Player(x) & Game(y) & Team(z) & PerformanceInOneGame(x,y)) -> -EnoughToRemove(x,z))", "all x y.((Player(x) & Team(y)) -> -EnoughRightToRemove(x,y))", "all x.((Player(x) & PerformanceInOneGame(x)) -> -EnoughToRemoveFromTeam(x))", "all x y z.((Player(x) & Game(y) & Team(z) & PerformanceIn(x,y) & -(SufficientRight(x,z) | RemovedFromTeam(x,z)))) -> -SufferingRight(x,y,z))", "all x y.((Player(x) & Game(y) & PerformanceIn(x,y)) -> -SufferingRightToRemove(x,y))", "all x.((Player(x) & PerformanceInOneGame(x)) -> -SufferingRightToRemoveFromTeam(x))", "exists x.(PlayerPerformanceInOneGame(x) & -EnoughToRemoveFromTeam(x))", "all x y z.((Player(x) & PerformanceInOneGame(x,y) & Team(z)) -> -EnoughRightToRemove(x,z))", "all x y.((Player(x) & PerformanceInOneGame(x,y)) -> -EnoughRightToRemoveFromTeam(x,y))", "all x y.((Player(x) & Team(y)) -> -EnoughToRemove(x,y))", "all x.((Player(x) & PerformanceInGame(x,1)) -> -EnoughRightToRemoveFromTeam(x,1))", "exists x.(PlayerPerformanceInGame(x) & -EnoughToRemoveFromTeam(x))", "all x.((Player(x) & PerformanceInOneGame(x)) -> -SufferingRightToRemoveFromTeam(x))", "exists x.(PlayerPerformanceInOneGame(x) & -EnoughToRemoveFromTeam(x))", "all x y.((Player(x) & GamePerformance(y)) -> -EnoughToRemoveFromTeam(x,y))"]}
{"id": "enwn_validation_621", "nl": "The number of goals Cindy let through is a reflection of her performance.", "fol": "", "prediction": ["all x.((Goals(x) & CindyLetsThrough(x)) -> ReflectsPerformance(x))", "all x.((Goals(x) & LetThrough(x)) -> ReflectsPerformance(x))", "all x y.((Goals(x) & Cindy(y) & LetThrough(y,x)) -> ReflectsPerformance(y,x))", "(LotsThroughGoals(Cindy) & ReflectsPerformance(Cindy))", "all x.((Goals(x) & CindyLetThrough(x)) -> ReflectsPerformance(x))", "all x.((GoalNumber(x) & LetsThrough(x)) -> ReflectsPerformance(x))", "(NumberOfGoals(Cindy) & LetThrough(Cindy))", "(NumberOfGoalsCindyLetThrough(Cindy) & ReflectsPerformance(Cindy))", "all x y.((Goals(x) & Cindy(y) & LetThrough(y,x)) -> ReflectsPerformance(y))", "all x y.((Goals(x) & Goals(y) & Cindy(x)) -> ReflectsPerformance(x,y))", "all x.((Goals(x) & LetThrough(x)) -> ReflectsPerformance(x))", "all x.(Goals(x) -> ReflectsPerformance(x))", "all x y.((Goal(x) & Cindy(y) & LetsThrough(y,x)) -> ReflectsPerformance(y,x))", "all x.(GoalsLeadThrough(x,y) -> ReflectsPerformance(x))", "All x.((Cindy(x) & GoalsLeapedThrough(x)) -> ReflectsPerformance(x))", "all x.((Goals(x) & CindyLeadsThrough(x)) -> ReflectsPerformance(x))"]}
{"id": "enwn_validation_622", "nl": "The other players kicked Cindy off of the team based on her performance in a single game.", "fol": "", "prediction": ["all x y.((Player(x) & Player(y)) -> KickedCindyOffTeam(x,y))", "all x.((Player(x) & Cindy(x)) -> KickedOffTeam(x))", "all x y z.((Player(x) & Player(y) & Cindy(z) & SingleGame(z)) -> KickedOffTeam(x,z))", "all x.((Player(x) & PlayedInSingleGame(x)) -> KickedCindyOffTeam(x))", "all x y.((Player(x) & Player(y)) -> KickedCindyOffTeam(x,y))", "(all x y.((Player(x) & Cindy(y)) -> KickedOffTeam(x,y)))", "all x y.((Player(x) & Player(y) & Cindy(y)) -> KickedOffTeam(x,y))", "(all x.(Cindy(x) -> KickedOffTeam(x)))", "all x y z.((Player(x) & Player(y) & Cindy(z) & PerformanceInSingleGame(z,x)) -> KickedOffTeam(x,y,z))", "(Cindy,SingleGame,Cindy) & KickedOffTeam(Cindy,SingleGame))", "all x.((Player(x) & Cindy(x)) -> KickedOffTeam(x))", "all x.((Player(x) & PlaysSingleGame(x)) -> KicksCindyOffTeam(x))", "(all x.(Cindy(x) -> KickedOffTeam(x)))", "all x y.((Player(x) & Player(y)) -> KickedOffTeam(x,y))", "all x y.((Player(x) & Player(y)) -> KickedCindyOffTeam(x,y))", "(All x.(Cindy(x) -> KickedOffTeam(x)))"]}
{"id": "enwn_validation_623", "nl": "The other players shouldn't have kicked Cindy off the team.", "fol": "", "prediction": ["all x.((Player(x) & -KickedCindy(x)) -> -KickedCindy(x))", "all x y.((Player(x) & Player(y)) -> -KickedCindyOffTeam(x,y))", "(-KickedCindy(Cindy))", "all x.((Player(x) & -KickedCindy(x)) -> -CindyKickedOffTeam(x))", "all x.((Player(x) & -Cindy(x)) -> -CindyKickedOffTeam(x))", "(all x.(Cindy(x) -> -KickedOffTeam(x)))", "all x.((Player(x) & Cindy(y)) -> -KickedOffTeam(x,y))", "all x y.((Player(x) & Player(y)) -> -KickedCindyOffTeam(x,y))", "-(Player(x) & PlayedCindyOffTeam(x))", "All x.(Player(x) -> -KickedCindyOffTeam(x))", "(all x.(Cindy(x) -> -Kicked(x)))", "all x y.((Player(x) & Player(y)) -> -KickedCindyOffTeam(x,y))", "all x.((Player(x) & Cindy(x)) -> -KickedOffTeam(x))", "all x.((Player(x) & Player(y)) -> -KickedCindyOffTeam(x,y))", "all x y.((Player(x) & Player(y)) -> -KickedCindyOffTeam(x,y))", "(all x.(Cindy(x) -> -KickedOffTeam(x)))"]}
{"id": "enwn_validation_624", "nl": "You should not discriminate against people on the basis of sexuality.", "fol": "", "prediction": ["all x.((Person(x) & -DiscriminateOnSexuality(x)) -> -DiscriminateOnSexuality(x))", "all x.((People(x) & -DiscriminateOnSexuality(x)) -> -DiscriminateOnSexuality(x))", "all x.((Person(x) & -DiscriminateOnBaseOfSexuality(x)) -> -DiscriminateOnBaseOfSexuality(x))", "all x y.((Person(x) & Person(y)) -> -DiscriminateOnBaseOfSexuality(x,y))", "-(DiscriminationOnSexuality(x) & Person(y))", "all x.(DiscriminateOnSexuality(x) -> -exists y.(Person(y) & DiscriminatesOnSexuality(x,y)))", "all x y.((Person(x) & Person(y) & DiscriminateOnSexuality(x,y)) -> -DiscriminateOnSexuality(x,y))", "all x.(Discrimination(x) -> -(DiscriminateAgainst(x,sexuality) | DiscriminateAgainst(x,sexuality)))", "(-DiscriminateOnSexuality(x))", "all x.((People(x) & -DiscriminateOnBaseOfSexuality(x)) -> -DiscriminateOnBaseOfSexuality(x))", "(-DiscriminateAgainstPeopleOnBaseOfSexuality(x))", "-(DiscriminationAgainstPeople(x) & BasedOnSexuality(x)))", "all x.((Person(x) & -DiscriminateOnSexuality(x)) -> -DiscriminateOnSexuality(x))", "all x y.((Person(x) & Person(y)) -> -DiscriminateOnBaseOfSexuality(x,y))", "all x.(DiscriminationOnSexuality(x) -> -(DiscriminateAgainstPeople(x) & DiscriminateAgainstPeople(x)))", "all x y.((People(x) & Sexuality(y)) -> -Discriminate(x,y))"]}
{"id": "enwn_validation_625", "nl": "Doing detrimental things to someone because of their identity is discrimination.", "fol": "", "prediction": ["all x y.((DoesDetrimentalThings(x) & Person(y) & BecauseOfIdentity(x,y)) -> Discrimination(x))", "all x.((DoingDefeivantThings(x) & Person(x) & Identity(x)) -> Discrimination(x))", "all x.((DoingDetrimentalThings(x) & Person(x) & Identity(x)) -> Discrimination(x))", "all x y.((DoingDefeitfulThings(x) & Person(y) & BecauseOfIdentity(x,y)) -> Discrimination(x))", "all x y.((DoesDefeitfulThings(x) & Person(y) & BecauseOfIdentity(y,x)) -> Discrimination(x))", "all x.((DoesDefeitfulThings(x) & Identity(x)) -> Discrimination(x))", "all x y.((Discrimination(x) & Person(y) & DoseDetrimentalThings(x,y)) -> Discrimination(x))", "all x.((DoesDetrimentalThings(x) & Person(x) & HasIdentity(x)) -> Discrimination(x))", "all x y z.((DoingDefeitfulThings(x) & Person(y) & Identity(z) & HasIdentity(y,z)) -> Discrimination(x))", "all x.(Discrimination(x) -> (DoingDetrimentalThings(x) & Person(x) & Identity(x)))", "all x y.((Discrimination(x) & Person(y) & DoseDefeitfulThings(x,y) & BecauseOfIdentity(y,x)) -> Discrimination(x))", "all x.((DoingDefeitfulThings(x) & Person(x) & Identity(x)) -> Discrimination(x))", "all x y.((DoingDetrimentalThings(x) & Person(y) & BecauseOfIdentity(y)) -> Discrimination(x))", "all x.((Discrimination(x) & DoingDetrimentalThings(x) & Person(x)) -> Discrimination(x))", "all x.(DoingDetrimentalThings(x) -> Discrimination(x))", "all x y.((DoesDetrimentalThings(x,y) & Person(y) & BecauseOfIdentity(x,y)) -> Discrimination(x))"]}
{"id": "enwn_validation_626", "nl": "Removing someone from your will is detrimental to them.", "fol": "", "prediction": ["all x y.((Removes(x,y) & Person(y)) -> DetrimentalTo(x,y))", "all x.(RemovesPerson(x) -> DetrimentalTo(x,Person))", "all x y.((Person(x) & Will(y)) -> DetrimentalTo(x,y))", "all x.(Removes(x,y) -> DetrimentalToPerson(x))", "all x y.((Removes(x,y) & Person(y)) -> DetrimentalTo(x,y))", "all x.(RemovesFromWill(x) -> DetrimentalToPerson(x))", "all x y.((RemovesFromWill(x,y) & Person(y)) -> DetrimentalTo(x,y))", "all x y.((Person(x) & Will(y) & RemovedFrom(x,y)) -> DetrimentalTo(x,y))", "all x.(RemovesPersonFromWill(x) -> DetrimentalToPerson(x))", "all x y z.((Removes(x,y) & Person(z) & Will(x,z)) -> DetrimentalTo(x,z))", "all x.((RemovesPerson(x) & FromWill(x)) -> DelirableToPerson(x))", "all x.((RemovesFromWill(x) & Person(x)) -> DetrimentalTo(x,y))", "all x y.((RemovesFromWill(x) & Person(y)) -> DetrimentalTo(x,y))", "all x.(Removes(x,y) -> DetrimentalToPerson(x,y))", "all x y.((Person(x) & Will(y)) -> DetrimentalTo(x,y))", "All x.(RemovesFromWill(x) -> DetrimentalToPerson(x))"]}
{"id": "enwn_validation_627", "nl": "Martin's father removed Martin from his will because Martin came out as gay.", "fol": "", "prediction": ["all x y.((Martin(x) & Father(y)) -> RemovedFromWill(x,y))", "(all x.(Martin(x) -> RemovedFromWill(x)) & Martin came outAsGay(x))", "all x y z.((Martin(x) & Father(y) & Martin(z) & CameOutAsGay(z,x)) -> RemovedFromWill(y,z))", "Martin's father removedMartin from his will because Martin came out as gay.", "(Martin's Father RemovedFromWill(Martin,Martin) & Martin CameOutAsGay(Martin))", "all x.((Martinsfather(x) & MartinsSoul(x)) -> RemovedFromWill(x,Martin,Gay))", "(RemovedFromWill(Martin,Martin) & Martin CameOutAsGay(Martin,Martin))", "all x y.((Martin(x) & Father(y)) -> RemovedFromWill(x,y))", "all x y.((Martin(x) & Father(y) & CameOutAsGay(x,y)) -> RemovedFromWill(x,y))", "(-(Martin's Father) & Martin's Father(Martin)) -> RemovedFromWill(Martin,Martin))", "all x.(Martin(x) -> RemovedFromWill(x,Martin,Gay))", "-(MartinsfatherRemovedMartinFromWill(Martin,Gay))", "-MartinsfatherRemovedMartinFromWill(Martin,Gay)", "all x.((MartinsFather(x) & MartinsGay(x)) -> RemovedFromWill(x,Martin))", "Martin's father removed Martin from his will because Martin came out as gay.", "(all x.(Martin(x) -> RemovedFromWill(x)))"]}
{"id": "enwn_validation_628", "nl": "You should not do something detrimental to someone because of their sexuality.", "fol": "", "prediction": ["all x y.((Person(x) & Sexuality(y)) -> -Disadvantageful(x,y))", "all x y.((Sexuality(x) & Person(y)) -> -Disadvantageful(x,y))", "all x.((Person(x) & Sexuality(x)) -> -Disadvantageful(x))", "-(DisadvantagefulToSexuality(x) & Person(x)))", "all x y.((Disadvantage(x) & Person(y) & Sexuality(y)) -> -Disadvantage(x,y))", "all x y.((Person(x) & Sexuality(y)) -> -Detrimental(x,y))", "all x.((Person(x) & Sexuality(x)) -> -Detrimental(x))", "(-DisadvantagefulToSexuality(x))", "all x y z.((Person(x) & Sexuality(y) & Sexuality(z) & Detrimental(x,y,z)) -> -Disadvantageful(x,y))", "all x.((Disadvantage(x) & Sexuality(x)) -> -Disadvantage(x))", "all x y.((Sexuality(x) & Person(y)) -> -Detrimental(x,y))", "all x.((Sexuality(x) & Person(x)) -> -Disadvantageful(x))", "all x y.((Person(x) & Sexuality(y) & Detrimental(x,y)) -> -Disadvantageful(x,y))", "(-DisadvantagefulToSexuality(x))", "-(DoDeepToSexuality(x) & Person(x))", "all x.((Person(x) & Sexuality(x)) -> -Damage(x,y))"]}
{"id": "enwn_validation_629", "nl": "You should not remove someone from your will because of their sexuality.", "fol": "", "prediction": ["all x.((Person(x) & -RemovesFromWill(x)) -> Sexuality(x))", "all x y.((Person(x) & Sexuality(y)) -> -RemovesFromWill(x,y))", "all x.((Person(x) & -Sexuality(x)) -> -RemovesFromWill(x))", "all x y.((Person(x) & Will(y) & Sexuality(y)) -> -Removes(x,y))", "all x y.((Sexuality(x) & Person(y)) -> -RemovesFromWill(x,y))", "(all x.((Person(x) & Sexuality(x)) -> -RemovesFromWill(x)))", "-(RemovesSexuality(x) & Person(x)))", "all x.((Person(x) & -RemovesFromWill(x)) -> Sexuality(x))", "(-RemovesSexuality(x))", "all x.((Person(x) & -ExcludesFromWill(x)) -> Sexuality(x))", "all x.((Sexuality(x) | RemovesFromWill(x))) -> -RemovesFromWill(x))", "all x y.((Person(x) & Sexuality(y)) -> -RemovesFromWill(x,y))", "-(RemovesSexuality(x) & Person(x))", "all x y.((Sexuality(x) & Person(y)) -> -RemovesFromWill(x,y))", "(-RemovesSexuality(sexuality))", "all x.((Person(x) & Sexuality(x)) -> -RemovesFromWill(x))"]}
{"id": "enwn_validation_630", "nl": "Martin's father should not have removed Martin from his will.", "fol": "", "prediction": ["Martin's father should not have removed Martin from his will.", "all x y.((Martin(x) & Father(y)) -> -RemovedFromWill(y,x))", "all x.(Martin(x) -> Father(x))", "((Martinsfather(Martin) & -RemovedFromWill(Martin)) -> -RemovedFromWill(Martin,Martin))", "all x.((MartinsFather(x) & -RemovedFromWill(x)) -> Father(x))", "(-RemovedFromWill(Martin,Martin))", "-(RemovedFromWill(Martin,Martin) & Father(Martin,Martin))", "all x.(MartinsFather(x) -> -RemovedFromWill(x,Martin))", "Martinsfather should not have removed Martin from his will.", "Martin's father should not have removed Martin from his will.", "(all x.(Martin(x) -> Father(x)))", "-RemovedFromWill(Martin,Father)", "-(RemovedMartinFromWill(Martin,Father))", "Martin's father should not have removed Martin from his will.", "(-RemovedFromWill(Martin,Martin))", "Martin's Father should not have removed Martin from will."]}
{"id": "enwn_validation_631", "nl": "Elaine slapped her brother because he ate the last two pudding cups.", "fol": "", "prediction": ["all x y.((Elaine(x) & Brother(y) & EatsPuddingCups(y,2)) -> Slapped(x,y))", "Elaine slapped her brother because he ate the last two pudding cups.", "(SlappedBird(Elaine) & EatsPuddingCups(Elaine,2))", "all x y z.((Elaine(x) & Brother(y) & PuddingCup(z) & Eats(y,z)) -> Slapped(x,y))", "Elaine slappedBrother(Elaine,Brother) s PuddingCups(Elaine,PuddingCups) & EatsPuddingCups(Elaine,PuddingCups))", "all x.((Elaine(x) & Brother(x) & EatsPuddingCups(x)) -> Slapped(x))", "-(ElaineSlappedBrother(Elaine) & EatsPuddingCups(Elaine,2)))", "(SlappedBird(Elaine,Brother) & EatsPuddingCups(Elaine,PuddingCups))", "Elaine slapped her brother because he ate the last two pudding cups.", "all x y.((Elaine(x) & Brother(y) & EatsPuddingCups(y,2)) -> Slapped(x,y))", "all x y.((Elaine(x) & Brother(y) & EasedPuddingCups(y,2)) -> Slapped(x,y))", "(SlappedBird(Elaine) & EatsPuddingCups(Elaine,2))", "Elaine slapped her brother, because he ate the last two pudding cups.", "(SlappedBrother(Elaine) & EatsPuddingCups(Elaine,2))", "Elaine slapped her brother because he ate the last two pudding cups.", "Elaine slapped her brother because he ate the last two pudding cups."]}
{"id": "enwn_validation_632", "nl": "Elaine felt she deserved one of the last two pudding cups.", "fol": "", "prediction": ["Elaine felt she deserved one of the last two pudding cups.", "all x.((Elaine(x) & PuddingCup(x)) -> Won(x,2))", "all x y.((Elaine(x) & PuddingCup(y)) -> Won(x,y))", "((Elaine) & PuddingCup(Elaine)) -> Won(Elaine,PuddingCup,PuddingCup))", "Elaine felt she deserved one of the last two pudding cups.", "(Ellen felt she deserved one of the last two pudding cups.)", "all x.((Elaine(x) & PuddingCup(x)) -> Won(x,2))", "(MeantPuddingCup(Elaine))", "Elaine felt she deserved one of the last two PuddingCups.", "FeltSheWornOneOfPuddingCups(Elaine)", "Elaine felt that she deserved one of the last two pudding cups.", "all x.((Elaine(x) & PuddingCup(x)) -> Won(x,2))", "Elaine felt she deserved one of the last two pudding cups.", "Elaine felt she deserved one of the last two PuddingCups.", "Elaine felt she deserved one of the last two pudding cups.", "Elaine felt she deserved one of the last two PuddingCups."]}
{"id": "enwn_validation_633", "nl": "It's petty to retaliate when someone wrongs you in a minor way.", "fol": "", "prediction": ["all x.((Petty(x) & PersonWorstInMinorManner(x)) -> Retaliate(x))", "all x y.((Petty(x) & Person(y) & Minor(y)) -> Retaliates(x,y))", "all x y.((Petty(x) & Person(y) & WrongsInMinorManner(y,x)) -> Retaliate(x,y))", "all x.((Petty(x) & Person(x) & MinorWay(x)) -> Retaliates(x))", "(all x.((Petty(x) & MinorMovement(x)) -> Retaliate(x)))", "(PettyToRetaliateWhenPersonWorst(x) & Minor(x))", "all x.((PettyToRetaliate(x) & MinorMomentMore(x)) -> Retaliate(x))", "all x y.((Petty(x) & Person(y) & WorstInMinorManner(y,x)) -> Retaliate(x,y))", "all x.((Petty(x) & PersonWorst(x) & Minor(x)) -> Retaliate(x))", "exists x.(PettyRetaliation(x) -> (MoreInMinorManner(x) | WorstInMinorManner(x)))", "all x.((PettyToRetaliate(x) & PersonWorstInMinorManner(x)) -> Retaliate(x))", "all x.((Petty(x) & MinorMovement(x)) -> Retaliate(x))", "all x y.((Retaliate(x) & Person(y) & MinorWay(y)) -> Petty(x,y))", "all x y.((Petty(x) & Person(y) & MinorWay(y)) -> Retaliates(x,y))", "exists x.(Retaliate(x) & Person(x) & MinorWay(x))", "all x y.((Petty(x) & Person(y) & IsMinorIsMore(y,x)) -> Retaliates(x,y))"]}
{"id": "enwn_validation_634", "nl": "Taking someone's snacks is wrong, but it doesn't harm them significantly.", "fol": "", "prediction": ["all x y.((Snack(x) & Person(y)) -> (Wrong(x,y) & -Hazards(x,y)))", "all x.((Snack(x) & TakenBy(x,y)) -> (Wrong(x) & -Hazards(x,y)))", "all x.(TakesSnacks(x) -> (Wrong(x) & -HarmsSignificantly(x)))", "all x y.((Snack(x) & Person(y)) -> (IsWrong(x,y) & -HarmsSignificantly(x,y)))", "(all x.(Snack(x) -> Wrong(x)) & -HazardsSensors(x))", "(TakingSnacks(x) -> (Wrong(x) & -HazardsSeniors(x)))", "(all x y.((Snack(x) & Person(y)) -> Taken(x,y)) & ((Snack(x) & Person(y)) -> -Harms(x,y))))", "all x y.((TakesSnacks(x,y) & Person(y)) -> (IsWrong(x,y) & -HarmsSignificantly(x,y)))", "all x.(TakesSnacks(x) -> (IsWrong(x) & -HarmsSignificantly(x)))", "all x y z.((Snack(x) & Person(y) & Snack(z)) -> (IsWrong(x,y) & -Harms(y,z)))", "(all x.(TakesSnacks(x) -> Wrong(x)) & -HarmsSignificantly(x))", "all x.(Snack(x) -> (Wrong(x) & -HarmsSignificantly(x)))", "all x y.((Snacks(x) & Person(y)) -> (Wrong(x,y) & -Harms(x,y)))", "all x y.((Snack(x) & Person(y)) -> (Wrong(x) & -Hazards(x,y)))", "(all x.(Snack(x) -> Wrong(x)) & -HasSignificantHarm(x))", "exists x.(Snack(x) & Taken(x,y) & Wrong(y) & -HasSignificantHarm(x,y))"]}
{"id": "enwn_validation_635", "nl": "You shouldn't hurt people for petty reasons.", "fol": "", "prediction": ["all x.((Petty(x) & -HasPetty(x)) -> -HasPetty(x))", "all x y.((Petty(x) & Person(y)) -> -HasPetty(x,y))", "all x.((Petty(x) & -Petty(x)) -> -HasPerson(x))", "all x.((PettyRights(x) & -HasPettyRights(x)) -> -HasPettyRights(x))", "-HasPettyCauses(x) -> -HasPettyCauses(x))", "(all x.((Petty(x) & Person(y)) -> -HasPetty(x,y)))", "all x.((Petty(x) & -HasPetty(x)) -> -HasPetty(x))", "all x y.((PettyMatter(x) & Person(y)) -> -HasPettyMatters(x,y))", "all x.((PettyMatter(x) & -PettyMatter(x)) -> -HasPettyMatters(x))", "all x y.((Petty(x) & Person(y)) -> -HasPetty(y))", "(all x.(HasPettyRights(x) -> -HasPettyRights(x)))", "all x.((People(x) & -PettyMatters(x)) -> -HasPettyMatters(x))", "all x.((Petty(x) & People(y)) -> -HasPetty(x,y))", "all x y.((PettyRights(x) & Person(y)) -> -HasPettyRights(x,y))", "all x y.((Petty(x) & Person(y)) -> -HasPetty(x,y))", "exists x.(PettyRights(x) & -HasPettyRights(x))"]}
{"id": "enwn_validation_636", "nl": "Elaine slapped her brother in retaliation for taking her snacks.", "fol": "", "prediction": ["all x y.((Elaine(x) & Brother(y)) -> SlappedInRetaliationForTakingSnacks(x,y))", "Elaine slapped her brother in retaliation for taking her snacks.", "(SlappedBrother(Elaine) & RetaliationForSnacks(Elaine))", "Elaine slappedBrotherInRetaliationForSnacks(Elaine,Brother)", "(SlappedBenefits(Elaine,Brother) & ForTakingSnacks(Elaine,Brother))", "all x y z.((Elaine(x) & Brother(y) & Snack(z)) -> SlappedInRetaliation(x,y,z))", "-(Elaine(Elaine) & Brother(Elaine) & Slapped(Elaine,Brother))", "(SlappedBird(Elaine) & RetaliationForSnacks(Elaine))", "Elaine SlappedBrotherInRetaliationForSnacks(Elaine,Brother)", "all x y.((Elaine(x) & Brother(y) & TakesSnacks(x,y)) -> SlappedInRetaliation(x,y))", "all x y.((Elaine(x) & Brother(y)) -> SlappedInRetaliation(x,y))", "(SlappedBrotherInRetaliationForSnacks(Elaine))", "Elaine slapped brother in retaliation for taking snacks.", "Elaine slapped her brother in retaliation for taking her snacks.", "Elaine slappedBrotherInRetaliationForSnacks(Elaine)", "Elaine slapped her brother in retaliation for taking snacks."]}
{"id": "enwn_validation_637", "nl": "It's petty to retaliate against someone for taking your snacks.", "fol": "", "prediction": ["all x.((Retaliate(x) & TakeSnacks(x)) -> Petty(x))", "(Petty(RetaliateAgainst(RetaliateAgainst(RetaliateAgainst(RetaliateAgainst(RetaliateAgainst(RetaliateAgainst(RetaliateAgainst(RetaliateAgainst(RetaliateAgainst(RetaliateAgainst(RetaliateAgainst(RetaliateAgainst(RetaliateAgainst(RetaliateAgainst(RetaliateAgainst(RetaliateAgainst(RetaliateAgainst(RetaliateAgainst(Retaliate(Retaliate(Retaliate))))", "all x y.((Petty(x) & Person(y) & TakesSnacks(x,y)) -> Retaliate(x,y))", "all x.((Petty(x) & RetaliateAgainst(x,y)) -> TakesSnacks(x,y))", "all x.((RetaliateAgainst(x) & TakesSnacks(x)) -> Petty(x))", "(PettyRetaliationAgainst(Person(Person) & TakesSnacks(Person))", "all x.((Petty(x) & RetaliatesAgainst(x,y) & TakesSnacks(x)) -> Petty(x))", "all x y.((Petty(x) & Person(y) & TakesSnacks(x,y)) -> RetaliatesAgainst(x,y))", "all x y.((Retaliate(x) & Person(y) & TakesSnacks(x,y)) -> Petty(x))", "all x y.((Petty(x) & RetaliateAgainst(x,y)) -> TakesSnacks(x,y))", "(RetaliateAgainst(x,y) & TakeSnacks(y))", "all x.(Retaliate(x) -> Petty(x))", "(RetaliateAgainstSnacks(petty) -> TakesSnacks(p))", "all x.((RetaliateAgainst(x) & TakeSnacks(x)) -> Petty(x))", "all x.(RetaliateAgainstPerson(x) -> Petty(x))", "all x y.((Petty(x) & Person(y) & TakesSnacks(x,y)) -> RetaliateAgainst(x,y))"]}
{"id": "enwn_validation_638", "nl": "Elaine slapped her brother for a petty reason.", "fol": "", "prediction": ["all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyRun(x,y))", "Elaine slappedBrotherForPettyRun(Elaine,Brother)", "(SlappedBird(Elaine) & PettyRun(Elaine))", "all x.((Elaine(x) & Brother(y)) -> SlappedForPettyRun(x,y))", "Elaine slappedBrother(Elaine,Brother) & ForPettyRun(Elaine,Brother))", "(Petty(Elaine) & SlappedBrother(Elaine,Brother))", "all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyRaison(x,y))", "(SlappedBrotherForPettyRaison(Elaine))", "Elaine slapped her brother for petty reason.", "(SlappedBird(Elaine) & PettyRun(Elaine))", "Elaine slapped brother for petty reason.", "all x.((Elaine(x) & Brother(x)) -> SlappedForPettyRaison(x))", "all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyRight(x,y))", "Elaine slappedBrotherForPettyRaison(Elaine,Brother,PettyRaison)", "all x y.((Elaine(x) & Brother(y)) -> Slapped(x,y))", "Elaine slapped her brother for petty reason."]}
{"id": "enwn_validation_639", "nl": "Elaine should not have slapped her brother.", "fol": "", "prediction": ["Elaine should not have slappedBrother(Elaine)", "all x.((Elaine(x) & Brother(y)) -> -Slapped(x,y))", "Elaine ne should have slappedBrother(n)", "-SlappedBrother(Elaine)", "-(Elaine ShouldNotHaveSlappedBrother(Elaine))", "-(Elaine(e) & Brother(e))", "Elaine should not have slappedBrother(Elaine)", "all x.((Elaine(x) & Brother(x)) -> -Slapped(x,y))", "Elaine ne should have slappedBrother(n)", "Elaine ne-shouldn'tHasSlappedBrother(n)", "(-SlappedBrother(Elaine))", "Elaine should not have slappedBrother(elaine,b)", "all x.((Elaine(x) & Brother(y)) -> -Slapped(x,y))", "Elaine ne should have slapped(n)", "(-slappedBrother(Elaine))", "Elaine should not have slapped her brother."]}
{"id": "enwn_validation_640", "nl": "You shouldn't insult people for no good reason.", "fol": "", "prediction": ["all x.((Involves(x,y) & -GoodRight(y)) -> -Inflicts(x,y))", "all x y.((Person(x) & Person(y) & -GoodRun(x)) -> -Inflicts(x,y))", "all x.((People(x) & -GoodRight(x)) -> -Inflicts(x,y))", "all x.((Involves(x,y) & -GoodRight(y)) -> -Involves(x,y))", "all x.((Involves(x) & -GoodRight(x)) -> -Inflicts(x))", "all x y.((Involves(x,y) & Person(y) & -GoodRun(x)) -> -Inflicts(x,y))", "all x y.((Involves(x,y) & Person(y)) -> -Inflicts(x,y))", "(all x.((Involves(x,y) & -GoodRun(y)) -> -Involves(x,y)))", "all x y.((People(x) & Person(y) & -GoodRun(x)) -> -Inflicts(x,y))", "all x.((InflictsPeople(x) & -GoodRight(x)) -> -InflictsPeople(x))", "-InvolvesPeopleForNoGoodRight(-)", "all x.((Involves(x,y) & NoGoodRight(y)) -> -Involves(x,y))", "-InvolvesPerson(x) & NoGoodRight(x))", "(all x.((Involves(x) & -GoodRaison(x)) -> -Involves(x))", "all x.((People(x) & -GoodRun(x)) -> -Intimidate(x))", "all x y.(((Person(x) & Person(y)) -> -Inflicts(x,y))"]}
{"id": "enwn_validation_641", "nl": "Someone's appearance is not a good reason to insult them.", "fol": "", "prediction": ["all x.((Person(x) & Appearance(x)) -> -GoodRightToInflict(x))", "all x.((Appearance(x) & -GoodRightToInflict(x)) -> -GoodRightToInflict(x))", "all x y.((Person(x) & Appearance(y)) -> -GoodRightToInflict(x,y))", "all x y.((Person(x) & Appearance(y) & -GoodRightToInflict(x,y)) -> -GoodRightToInflict(x,y))", "(-GoodRightToInflict(Person(Person) & Appearance(Person))", "all x.((Person(x) & Appearance(x)) -> -GoodRightToInflict(x))", "(-GoodRightToInjure(Person(Person) & Appearance(Person))", "all x.((Appearance(x) & -GoodRightToInflict(x)) -> -Inflict(x,y))", "all x y.((Appearance(x) & Person(y)) -> -GoodRightToInflict(x,y))", "exists x.(Appearance(x) & -GoodRightToInflict(x))", "all x.((Person(x) & Appearance(x)) -> -GoodRightToInjure(x))", "all x y.((Person(x) & Appearance(y)) -> -GoodRightToInflict(x,y))", "exists x.(Appearance(x) & -GoodRightToInflict(x))", "all x y.((Appearance(x) & Person(y)) -> -GoodRightToInjure(y,x))", "all x y.((Person(x) & Appearance(y)) -> -GoodRightToInjure(x,y))", "exists x.(Appearance(x) & -GoodRightToInjure(x))"]}
{"id": "enwn_validation_642", "nl": "Calling something dirty is an insult.", "fol": "", "prediction": ["all x.((Dirty(x) & Calls(x,y)) -> Insult(x))", "all x.(Dirty(x) -> Insult(x))", "all x y.((Dirty(x) & Dishwasher(y)) -> Insult(x,y))", "all x.((Dirty(x) & Calling(x,y)) -> Inflict(x))", "all x.(Dirty(x) -> Insult(x))", "all x.((Dish(x) & Calls(x,y)) -> Irresponsible(x))", "all x y.((Dirty(x) & Dirty(y)) -> Insult(x))", "all x.((Dirty(x) & Calls(x,y)) -> Insult(x))", "all x.((CallsDirty(x) & Dirty(x)) -> Insult(x))", "all x.(Dirty(x) -> Insult(x))", "all x y.((Dish(x) & Dirty(y)) -> Insult(x))", "all x y.((Dirt(x) & Person(y)) -> IsOffense(x,y))", "All x.(Dish(x) -> Inflict(x))", "All x.((Dry(x) & Calling(x,y)) -> Insult(x))", "all x.(Dirty(x) -> Illusion(x))", "all x y.((Person(x) & Dirty(y)) -> Insult(x))"]}
{"id": "enwn_validation_643", "nl": "Dishrags are stereotypically dirty.", "fol": "", "prediction": ["all x.(Dishrag(x) -> StereotypicallyDirty(x))", "all x.(Dishrag(x) -> StereotypicallyDirty(x))", "(StylisticDishrag(d) & StylisticDish(d))", "(Dishrags(d) & StereotypicallyDirty(d))", "all x.(Dishrag(x) -> StereotypicallyDry(x))", "all x y.((Dishrag(x) & StereotypicallyDry(y)) -> Dishrag(x))", "all x y.((Dishrag(x) & StylizedDirt(y)) -> StereotypicallyDirty(x))", "all x y.((Dishrag(x) & StereotypicallyDirt(y)) -> Dishrag(x))", "all x.(Dishrag(x) -> StylotypicallyDirty(x))", "all x.(Dishrag(x) -> StereotypicallyDirty(x))", "all x.(Dischrag(x) -> StereotypicallyDirty(x))", "all x.(Dischrag(x) -> (StylotypicallyDirty(x) & Dishrag(x)))", "all x.(Dishrag(x) -> StylizedDirty(x))", "all x.(Dischrag(x) -> StereotypicallyDirty(x))", "all x.(Dishrag(x) -> StereotypicallyDirty(x))", "all x.(Dischrag(x) -> StereotypicallyDry(x))"]}
{"id": "enwn_validation_644", "nl": "Comparing things implies that they share properties.", "fol": "", "prediction": ["all x.(ComparingThings(x) -> ShareProperties(x))", "all x y.((Compares(x,y) & Thing(y)) -> ShareProperties(x,y))", "all x.(ComparesThings(x) -> ShareProperties(x))", "(ComparingThings(x) -> ShareProperties(x))", "all x y.((ComparesThings(x) & Property(y)) -> Shares(x,y))", "all x y z.((ComparesThings(x) & Property(y) & Property(z)) -> Shares(x,y,z))", "all x y.((ComparingThings(x) & Property(y)) -> Share(x,y))", "all x.(ComparingThings(x) -> ShareProperties(x))", "(ComparingThings(x) -> ShareProperties(x))", "all x y.((ComparesThings(x) & Property(y)) -> SharesProperties(x,y))", "all x.(ComparesThings(x) -> ShareProperties(x))", "all x.(Compares(x) -> ShareProperties(x))", "all x y.((ComparingThings(x) & Property(y) & Shares(x,y)) -> Involves(x,y))", "all x.(ComparingThings(x) -> ShareProperties(x))", "all x y.((ComparesThings(x) & Property(y)) -> Shares(x,y))", "exists x.(ComparingThings(x) & InvolvesProperties(x))"]}
{"id": "enwn_validation_645", "nl": "Derek told Cammy that her hair looked like a dishrag.", "fol": "", "prediction": ["all x y.((Deboree(x) & Cammy(y)) -> LooksAlikeDishrag(y,x))", "all x y z.((Derek(x) & Cammy(y) & Hair(z)) -> LooksAlikeDishrag(x,z))", "all x y.((Derek(x) & Cammy(y)) -> LooksAlikeDishrag(y))", "all x.((Deboree(x) & Cammy(x)) -> LooksAlikeDishrag(x))", "(Dishrag(Derek) & Cammy(Cammy))", "Derek told Cammy that her hair looked like a dishrag.", "Cammy's hair looked like a dishrag, so Derek told her.", "all x y z.((Deborah(x) & Cammy(y) & Hair(z)) -> LooksAlikeDishrag(x,z))", "(Deborah(Deborah) & Cammy(Cammy) & HairLooksAlikeDishrag(Cammy))", "Cammy told Derek, \"Her HairLooksAlikeDishrag\"\"", "all x.((Derek(x) & Cammy(x)) -> LooksAlikeDishrag(x))", "(Dishrag(Devon) & Cammy(Cammy))", "((Deboree(Deboree) & Cammy(Cammy)) -> HairLooksLikeDishrag(Cammy,Cammy)))", "(Deboree told Cammy that her hair looked like a dishrag)", "all x y.((Deborah(x) & Cammy(y)) -> LooksAlikeDishrag(x,y))", "Derek told Cammy that her hair looked like a dishrag."]}
{"id": "enwn_validation_646", "nl": "Someone's hair is part of their appearance.", "fol": "", "prediction": ["all x.(Hair(x) -> PartOfAppearance(x))", "all x y.((Hair(x) & Person(y)) -> PartOfAppearance(x,y))", "all x.(Hair(x) -> PartOfAppearance(x))", "all x.(HairPartOfAppearance(x) -> HairPerson(x))", "(PartOfAppearance(hair,y) & -PartOfAppearance(y))", "all x y.((Hair(x) & Person(y)) -> PartOfAppearance(x,y))", "All x.((Hair(x) & Person(x)) -> PartOfAppearance(x))", "all x.(Hair(x) -> PartOfAppearance(x))", "exists x.(HairPartOfAppearance(x) & HairPartOfAppearance(x))", "all x y.((Person(x) & Hair(y)) -> PartOfAppearance(x,y))", "exists x.(Hair(x) & PartOfAppearance(x))", "all x y.((Hair(x) & Person(y)) -> PartOfAppearance(y))", "exists x.(HairPartOfAppearance(x) & Someone(x))", "all x y.((Person(x) & Hair(y)) -> PartOfAppearance(x,y))", "exists x.(HairPartOfAppearance(x) & Person(x))", "all x y.((Hair(x) & Person(y)) -> PartOfAppearance(y))"]}
{"id": "enwn_validation_647", "nl": "Comparing something to a dishrag implies that it's dirty.", "fol": "", "prediction": ["all x y.((Dishrag(x) & Dishrag(y)) -> Dirty(x,y))", "all x.((Dishrag(x) & Dishrag(x)) -> Dirty(x))", "all x.(Compares(x,y,z) -> Dirty(x))", "(ComparesDishrag(x) -> Dirty(x))", "all x y.((Dishrag(x) & Dishrag(y)) -> Dirty(x,y))", "all x y z.((Dishrag(x) & Dishrag(y) & Dishrag(z) & Comparing(x,y,z)) -> Dirty(y))", "all x.((Dishrag(x) & Comparing(x,y)) -> Dirty(x))", "all x.(ComparesDishrag(x) -> Dirty(x))", "all x y.((Dishrag(x) & Dishrag(y)) -> Dirty(x))", "all x y.((Compares(x,y) & Dishrag(y)) -> Dirty(y))", "all x.((Dishrag(x) & Dishrag(x)) -> Dirty(x))", "all x.((Compares(x,y) & Dishrag(y)) -> Dirty(y))", "all x y.((Dishrag(x) & Dishrag(y)) -> Dirty(y))", "all x.(ComparesDishrag(x) -> Dirty(x))", "exists x.(Dishrag(x) & Comparing(x,y))", "all x y.((Dishrag(x) & Dishrag(y)) -> Dirty(x,y))"]}
{"id": "enwn_validation_648", "nl": "Derek's comment was implying that Cammy's hair looked dirty.", "fol": "", "prediction": ["Derek's comment was implying that Cammy's hair lookedDirty.", "all x.((Comment(x) & CammysHair(x)) -> Dirty(x))", "all x y.((Comment(x) & Derek(y)) -> LooksDirty(y,x))", "(Commentary(Derek) & InvolvesDirtyHair(Derek))", "Derek's comment implied that Cammy's hair lookedDirty.", "all x y.((Comment(x) & Derek(y) & Cammy(z)) -> LooksDirty(x,z))", "all x.((Comment(x) & CammyHair(x)) -> Dirty(x))", "all x.(Comment(x) -> (InvolvesDirtyHair(x) & CammyHair(x)))", "Derek's comment was implying that Cammy's hair lookedDirty.", "(Comment(Derek) & InvolvesDirtyHair(Deeps))", "-(Commentary(Derek) & CammyHairLooksDirty(Derek))", "All x y.((Comment(x) & CammysHair(y)) -> LooksDirty(x,y))", "(DryHair(DarkHair) -> DerekComment(DarkHair))", "(Commentary(Derek) & Impossible(Derek))", "all x.(Comment(x) -> (InvolvesDirtyHair(x) & Cammy(x)))", "Derek's comment was implying that Cammy's hair lookedDirty."]}
{"id": "enwn_validation_649", "nl": "Derek's comment was an insult.", "fol": "", "prediction": ["all x.((Comment(x) & Derek(x)) -> Inflicted(x))", "Derek's comment was an insult.", "all x.((Derek(x) & Comment(x)) -> Inflicted(x))", "((Derek'sComment(Derek) & Inflicted(Derek)))", "(Commentary(Derek) & Inflicted(Derek))", "all x y.((Derek(x) & Comment(y)) -> Irresponsible(x,y))", "-(Comment(Deborah) & -Comment(Deborah))", "all x.((Comment(x) & Derek(x)) -> Irresponsible(x))", "Derek's comment was an insult.", "(InvolvesIndividual(Deborah) & Comments(Deborah))", "All x.(Comment(x) -> InflictedByDerek(x))", "(Commentary(Derek) & Irresponsible(Derek))", "-(Commentary(Derek) & Inflicted(Derek))", "all x.((Derek(x) & Comment(x)) -> Inflicted(x))", "Derek's comment was an insult.", "Derek's comment was insult."]}
{"id": "enwn_validation_650", "nl": "Derek's comment was about Cammy's appearance.", "fol": "", "prediction": ["Derek's comment was about Cammy's appearance.", "all x.((Comment(x) & CammyAppearance(x)) -> Derek(x))", "(Commentary(Derek) & CammyAppearance(Derek))", "all x y.((Derek(x) & Cammy(y)) -> CommentAbout(x,y))", "all x y.((Comment(x) & Derek(y)) -> CammyAppearance(y))", "all x.(Comment(x) -> CammyAppearance(x))", "(Comment(Derek) & CammyAppearance(Derek))", "Derek's comment was about Cammy's appearance.", "-(Comment(Derek) & CammyAppearance(Derek)))", "(Commentary(Derek) & CammyAppearance(Derek))", "all x y.((Derek(x) & Cammy(y) & Comment(x,y)) -> CammyAppearance(x,y))", "All x.((Comment(x) & CammyAppearance(x)) -> Derek(x))", "Derek's comment was about Cammy's appearance.", "(Commentary(Derek) & CammyAppearance(Derek))", "Derek's comment was about Cammy's appearance.", "Derek's comment was about Cammy's Appearance."]}
{"id": "enwn_validation_651", "nl": "Derek insulted Cammy's appearance.", "fol": "", "prediction": ["Derek insulted Cammy's appearance.", "all x y.((Derek(x) & Cammy(y)) -> Inflicted(x,y))", "(Involves(Deborah,Cammy) & Injures(Deborah,Cammy))", "(InvolvesAppearance(Deborah) & InvolvesAppearance(Deborah))", "-(InflictedAtAppearance(Deborah) & Cammy(Deborah))", "(InflictedAppearance(Deborah,Cammy))", "all x y.((Derek(x) & Cammy(y)) -> InsultedAppearance(x,y))", "Derek insulted Cammy's appearance.", "Derek insulted CammysAppearance(Derek)", "(Accused(Deborah) & Cammy(Deborah))", "all x.((Deborah(x) & Cammy(x)) -> Inflicted(x,CAMY))", "-InflictedAttribution(Deborah,Cammy)", "all x y.((Derek(x) & Cammy(y)) -> Inflicted(x,y))", "Derek insulted Cammy's appearance.", "Derek insulted CammysAppearance( Derek)", "Derek insulted Cammy's appearance."]}
{"id": "enwn_validation_652", "nl": "Derek insulted Cammy for no good reason.", "fol": "", "prediction": ["all x y.((Derek(x) & Cammy(y)) -> InfuriatedForNoGoodRaison(x,y))", "Derek insultedCammy for no good reason.", "all x.((Deborah(x) & Cammy(x)) -> InfuriatedForNoGoodRaison(x))", "all x y.((Deborah(x) & Cammy(y)) -> InfuriatedForNoGoodRaison(x,y))", "(Involves(Deborah,Cammy) & -GoodRight(Deborah))", "Derek insulted Cammy for no good reason.", "-(Involves(Deborah,Cammy) & -GoodRight(Deborah,Cammy))", "all x.((Derek(x) & Cammy(x)) -> InfuriatedForNoGoodRaison(x))", "all x y z.((Derek(x) & Cammy(y) & Reason(z)) -> Infuriated(x,y,z))", "(Indignated(Deborah,Cammy) & -GoodRight(Deborah))", "all x y.((Derek(x) & Cammy(y)) -> Irresponsible(x,y))", "Derek insultedCammy for no good reason.", "(all x.((Deborah(x) & Cammy(x)) -> Infuriated(x)))", "(Involves(Deborah,Cammy) & -GoodRaison(Deborah))", "Derek insulted Cammy for no good reason.", "All x.((Derek(x) & Cammy(x)) -> InfuriatedForNoGoodRaison(x))"]}
{"id": "enwn_validation_653", "nl": "Derek should not have insulted Cammy.", "fol": "", "prediction": ["all x.((Derek(x) & Cammy(x)) -> -Inflicted(x,Cammy))", "all x y.((Derek(x) & Cammy(y)) -> -Inflicted(x,y))", "all x.((Deborah(x) & Cammy(x)) -> -Inflicted(x,y))", "Derek should not have insultedCammy.", "-(Involves(Deborah,Cammy) & -Involves(Deborah,Cammy))", "(-InvokedCammy(Derek))", "-(InvokedCammy(Derek) & -InvokedCammy(Derek))", "All x.(Derek(x) -> -InflictedCammy(x))", "Derek should not have insultedCammy.", "(-InflictedCammy(Deborah))", "all x.((Derek(x) & Cammy(x)) -> -Inflicted(x,y))", "((Deborah(Deborah) & Cammy(Cammy)) -> -Inflamed(Deborah))", "all x y.((Derek(x) & Cammy(y)) -> -Inflicted(x,y))", "all x.((Deborah(x) & Cammy(x)) -> -Inflicted(x,Cammy))", "Derek should not have insulted Cammy.", "-IndignatedCammy(Derek)"]}
{"id": "enwn_validation_654", "nl": "You should be polite.", "fol": "", "prediction": ["all x.(Polite(x) -> -Polite(x))", "all x.((Polite(x) & Been(x)) -> ShouldBe(x))", "all x.(Polite(x) -> ShouldBe(x))", "all x.((Polite(x) & -Polite(x)) -> -Polite(x))", "-Polite(x)", "all x y.((Polite(x) & Person(y)) -> ShouldBe(x,y))", "all x.(Polite(x) -> -Polite(x))", "-Polite(x)", "all x.((Polite(x) & Been(x)) -> Been(x))", "all x.(Polite(x) -> BePolite(x))", "all x y.((Polite(x) & Person(y)) -> ShouldBe(x,y))", "all x.(Polite(x) -> (StopPolite(x) & StopPolite(x)))", "All x.((Polite(x)) -> ShouldBe(x))", "all x.(Polite(x) -> ShouldBe(x))", "All x.(Polite(x) -> Avoids(x))", "All x.(Polite(x) -> ShouldBe(x))"]}
{"id": "enwn_validation_655", "nl": "Melanie closed the doors immediately when she saw someone approaching the elevator she was in.", "fol": "", "prediction": ["all x y.((Melanie(x) & Person(y) & ApproachedElevator(x,y)) -> ClosedDoorsImmediately(x))", "all x.((Melanie(x) & PersonApproachingElevator(x)) -> ClosedDoorsImmediately(x))", "all x y z.((Melissa(x) & Person(y) & Elevator(z) & Approaching(x,y,z)) -> ClosedDoors(x,y))", "all x y.((Melissa(x) & Person(y) & ApproachedElevator(x,y)) -> ClosedDoorsImmediately(x,y))", "all x y z.((Melanie(x) & Person(y) & Elevator(z) & Approaching(x,y,z)) -> ClosedDoors(x,y))", "Melanie closed doors immediately when she saw someone approaching the elevator she was in.", "(SeemsToApproachElevator(Melanie,Elevator) -> ClosedDoorsImmediately(Melanie,Elevator))", "all x y.((Melanie(x) & Person(y) & ApproachingElevator(x,y)) -> ClosedDoorsImmediately(x))", "all x.((Melissa(x) & PersonApproachingElevator(x)) -> ClosedDoorsImmediately(x))", "(SeedsAnapproval(Melanie,Elevator) -> ClosedDoorsImmediately(Melanie,Elevator))", "all x.((Melanie(x) & PersonApproachingElevator(x)) -> ClosedDoorsImmediately(x))", "(all x.((Melanie(x) & PersonApproachingElevator(x)) -> ClosedDoors(x)))", "all x y z.((Melissa(x) & Person(y) & Elevator(z) & Approaching(x,y,z)) -> ClosedDoorsImmediately(x,y,z))", "all x y.((Melissa(x) & Person(y) & ApproachingElevator(x,y)) -> ClosedDoorsImmediately(x,y))", "all x.((Melissa(x) & SomeoneApproachesElevator(x)) -> ClosedDoorsImmediately(x))", "all x.((Melanie(x) & SomeoneApproachingElevator(x)) -> ClosedDoors(x))"]}
{"id": "enwn_validation_656", "nl": "It's polite to hold the door for people.", "fol": "", "prediction": ["all x.((Door(x) & HoldsForPeople(x)) -> Polite(x))", "all x.((PoliteToHoldDoor(x) & People(x)) -> HoldDoor(x))", "all x y.((Door(x) & Person(y)) -> PoliteToHold(x,y))", "all x.(PoliteToHoldDoor(x) -> People(x))", "(PoliteToHoldDoor(x) -> PeopleHoldDoor(x))", "all x.((Door(x) & Holds(x,people)) -> Polite(x))", "all x y.((Polite(x) & Door(y)) -> HoldsFor(x,y))", "(HoldsDoorForPeople(politely))", "all x.((Door(x) & Polite(x)) -> HoldsForPeople(x))", "all x.(PoliteToHoldDoorForPeople(x) -> HoldDoorForPeople(x))", "all x y.((Door(x) & Person(y)) -> Polite(x))", "(PoliteToHoldDoor(x) & ForPeople(x))", "exists x.(Door(x) & HoldsForPeople(x))", "all x y.((Polite(x) & Door(y)) -> HoldsFor(x,y))", "all x y.((Door(x) & Person(y) & Holds(x,y)) -> Polite(x))", "exists x.(Door(x) & HoldsForPeople(x))"]}
{"id": "enwn_validation_657", "nl": "It was impolite for Melanie to close the elevator doors.", "fol": "", "prediction": ["all x.((Melanie(x) & CloseElevatorDoors(x)) -> Impolite(x))", "(ImpossibleForMelissaToCloseElevatorDoors(Melissa))", "all x y.((Melanie(x) & Elevator(y)) -> ImpossibleToClose(x,y))", "all x.(ImpoliteForMelanieToCloseElevatorDoors(x))", "EspoliteForMelanieToCloseElevatorDoors(Melanie)", "(ImpoliteForMelissaToCloseElevatorDoors(Melissa))", "-ImpossibleForMelissaToCloseElevatorDoors(Melissa)", "all x.((Melanie(x) & CloseElevatorDoors(x)) -> Impolite(x))", "All x.(ImpossibleForMelanieToCloseElevatorDoors(x) -> Melanie(x))", "all x.((Melissa(x) & CloseElevatorDoors(x)) -> Impolite(x))", "(ImpossibleForMelanieToCloseElevatorDoors(Melanie,Elevator))", "-ImpoliteForMelissaToCloseElevatorDoors(Melissa)", "all x y.((Melanie(x) & Elevator(y)) -> ImpossibleToClose(x,y))", "-ImpossibleForMelissaToCloseElevatorDoors(Melissa,Elevator,Elevator)", "all x y.((Melanie(x) & Elevator(y)) -> ImpoliteToClose(x,y))", "All x.((Melanie(x) & ClosesElevatorDoors(x)) -> Impolite(x))"]}
{"id": "enwn_validation_658", "nl": "Melanie shouldn't have closed the elevator doors.", "fol": "", "prediction": ["all x.((Melanie(x) & Elevator(y)) -> -Closed(x,y))", "all x.((Melissa(x) & Elevator(y)) -> -Closed(x,y))", "-ClosedElevatorDoors(Melanie)", "Melanie shouldn't have closed elevator doors.", "-(Melanie shouldn'tClosedElevatorDoors(Melanie))", "all x.(Melanie(x) -> -ClosedElevatorDoors(x))", "all x y.((Melanie(x) & Elevator(y)) -> -Closed(x,y))", "(Neighborhood(Melanie) & Melanie(Melanie))", "all x.((Melanie(x) & Elevator(y)) -> -Closed(x,y))", "Melanie shouldn't have closed elevator doors.", "-ClosedElevatorDoors(Melanie)", "all x.((Melissa(x) & Elevator(y)) -> -Closed(x,y))", "Melanie should've closed the elevator doors.", "Melanie shouldn't have closed the elevator doors.", "(-ClosedElevatorDoors(Melanie))", "-ClosedElevatorDoors(melandra)"]}
{"id": "enwn_validation_659", "nl": "You should avoid doing unethical things.", "fol": "", "prediction": ["all x.((DoesUnethicalThings(x)) -> Avoids(x))", "all x.((DoingUnethicalThings(x)) -> Avoid(x))", "all x y.((DoingUnethicalThings(x) & DoingUnethicalThings(y)) -> Avoid(x,y))", "all x.((DoesUnethicalThings(x)) -> Avoids(x))", "all x.(AvoidUnethicalThings(x) -> Avoids(x))", "-(DoingUnethicalThings(x))", "-UnethicalThings(x)", "all x.(EatsUnethicalThings(x) -> Avoids(x))", "all x y.((DoingUnethicalThings(x) & DoingUnethicalThings(y)) -> Avoid(x,y))", "all x.((DoesUnethicalThings(x)) -> Avoid(x))", "all x y.((DoingUnethicalThings(x) & -DoingUnethicalThings(y)) -> Avoid(x,y))", "all x.(AvoidUnethicalThings(x) -> Avoids(x))", "all x.((DoingUnethicalThings(x) & Avoids(x,y)) -> Avoids(x,z))", "all x.((AvoidsUnethicalThings(x)) -> -Does(x))", "All x.(EthicalThing(x) -> Avoids(x))", "All x.(AvoidsUnethicalThings(x) -> Avoids(x))"]}
{"id": "enwn_validation_660", "nl": "Bribing someone to do something wrong is unethical.", "fol": "", "prediction": ["all x.((Birding(x) & Person(x) & DoingWrong(x)) -> Unethical(x))", "all x y.((Bird(x) & Person(y) & DoseWrong(y)) -> Unethical(x))", "all x.((Brings(x) & Person(x)) -> Unethical(x))", "all x y.((Brings(x,y) & Person(y)) -> Unethical(x))", "all x.(Birding(x) -> Unethical(x))", "all x.((Birding(x) & DoingWrong(x)) -> Unethical(x))", "all x y.((Bird(x) & Person(y) & DoseWrong(y)) -> Unethical(x))", "all x y z.((Bird(x) & Person(y) & DoingWrong(z)) -> Unethical(x,y,z))", "all x.((Brings(x) & Person(x) & DoingWrong(x)) -> Unethical(x))", "(BirdingToDoWrong(b) -> Unethical(b))", "all x y.((Brings(x,y) & Person(y)) -> Unethical(x))", "all x y.((Bird(x) & Person(y) & DoingWrong(y)) -> Unethical(x))", "all x.(Birding(x) -> Unethical(x))", "All x.(Brings(x) -> Unethical(x))", "All x.((Birding(x) & Person(x) & DoingWrong(x)) -> Unethical(x))", "all x y.((Brings(x,y) & Person(y)) -> Unethical(x))"]}
{"id": "enwn_validation_661", "nl": "It's wrong to keep quiet about misconduct.", "fol": "", "prediction": ["all x.((KeepsQuiet(x) & Disgraceful(x)) -> Irresponsible(x))", "(KeepsQuietAboutConflicts(x) -> Wrong(x))", "all x.((KeepsQuiet(x) & DisregardsConduct(x)) -> Wrong(x))", "all x.((WrongToKeepQuiet(x) & Disgraceful(x)) -> Is(x))", "all x.((KeepQuiet(x) & Disgrace(x)) -> Irresponsible(x))", "-(KeepsQuietAboutConflicts(x) & Disgraceful(x))", "all x y.((WrongToKeepQuiet(x) & Disgrace(y)) -> Is(x,y))", "all x.((Still(x) & Disgraceful(x)) -> Wrong(x))", "(KeepsQuietAboutConflict(x) -> Wrong(x))", "all x.((WrongToKeepQuiet(x) & Disgraceful(x)) -> IsWrong(x))", "all x y.((Still(x) & Misconduct(y)) -> WrongToKeepQuiet(x,y))", "all x.((KeepsQuiet(x) & Misconduct(x)) -> Wrong(x))", "all x y.((Conflict(x) & Quiet(y)) -> IsWrong(x))", "exists x.(Misconduct(x) & Quiet(x))", "exists x.(Conflict(x) & Quiet(x))", "exists x.(Silent(x) & Disgraceful(x))"]}
{"id": "enwn_validation_662", "nl": "Offering someone something valuable in exchange for their cooperation is bribery.", "fol": "", "prediction": ["all x.((Offering(x) & ValuableInExchangeForCooperation(x)) -> Bribery(x))", "all x y.((Offer(x,y) & Person(y) & ValuableInExchangeForCooperation(x,y)) -> Bribery(x))", "all x.((Offer(x) & ValuableInExchangeForCooperation(x)) -> Bribery(x))", "all x y.((Offering(x,y) & Person(y) & ValuableInExchangeForCooperation(x,y)) -> Bribery(x))", "all x y.((Person(x) & ValuedInExchange(x,y)) -> Bribery(x))", "all x.((Offering(x) & Valuable(x) & Cooperation(x)) -> Bribery(x))", "all x y z.((Person(x) & Valuable(y) & Cooperation(z) & Offers(x,y,z)) -> Bribery(x))", "all x.((Offer(x) & ValuefulInExchangeForCooperation(x)) -> Bribery(x))", "all x y.((Person(x) & ValuableInExchangeForCooperation(x,y)) -> Bribery(x))", "all x y z.((Offer(x,y) & Person(z) & ValuableInExchangeForCooperation(x,z)) -> Bribery(x))", "all x.(Birthy(x) -> OffersValuableInExchangeForCooperation(x))", "all x y.((Offering(x,y) & Person(y)) -> Bribery(x))", "all x y.((Person(x) & Person(y) & OffersValuableInExchangeForCooperation(x,y)) -> Bribery(x))", "All x.(Birthy(x) -> OffersValuableInExchangeForCooperation(x))", "all x.((Offering(x) & ValuefulInExchangeForCooperation(x)) -> Bribery(x))", "All x.((OffersValuableInExchangeForCooperation(x) & Person(x)) -> Bribery(x))"]}
{"id": "enwn_validation_663", "nl": "Jarad's project manager Mike offered him tickets to a sold-out concert in exchange for not discussing Mike's behavior in the office during an HR inquiry.", "fol": "", "prediction": ["all x y.((Jarad(x) & ProjectManager(y) & Mike(y)) -> (OfferedTickets(x,y) & SoldOutConcert(y) & -DiscussedBehavior(y)))", "all x y z.((Jarad(x) & ProjectManager(y) & Mike(z) & OfferedTicketsToSoldOutConcert(y,z)) -> -DiscussedBehaviorInOffice(y,z))", "all x y.((ProjectManager(x) & Jarad(y) & ProjectManager(x,y) & OffersTickets(x,y)) -> -DiscussesBehavior(x,y))", "all x.((ProjectManager(x) & Jarad(x) & ProjectManager(x,Mike) & SoldOutConcert(x) & -DiscussedBehaviorInOffice(x)) -> OfferedTickets(x,Mike,Mike))", "(Jarad'sProjectManagerMikeOfferedTicketsToSoldOutConcert(Jarad) & -DiscussedBehaviorInOffice(Jarad))", "all x y.((JaradProjectManager(x) & ProjectManager(y) & Mike(x) & SoldOutConcert(y) & -DiscussedBehavior(y)) -> OfferedTickets(x,y))", "(OfferedTicketsToSoldOutConcert(Jarad,Mike) & -DiscussedBehaviorInOffice(Jarad,HRInquiry))", "all x.((Jarad'sProjectManager(x) & Mike(x) & SoldOutConcert(x) & -DiscussedBehaviorInOffice(x)) -> OfferedTickets(x,y))", "(ProjectManagerMike (Jarad) & OfferedTicketsToSoldOutConcert(Mike,Jarad) & -DiscussedBehaviorInOffice(Jarad)))", "all x y z.((Jarad's ProjectManager(x) & Mike(y) & Concert(z) & -Discussion(y,z)) -> OfferedTickets(y,z))", "(JaradsProjectManager(Mike) & OfferedTicketsToSoldOutConcert(Mike,Jarad) & -DiscussedBehavior(Mike,HRInquiry))", "all x.((JaradProjectManager(x) & ProjectManager(x) & Mike(x)) -> (OfferedTicketsToSoldOutConcert(x) & -DiscussedBehaviorInOffice(x)))", "(Jarad'sProjectManagerMikeOfferedTickets(Mike,SoldOutConcert) & -DiscussedBehaviorInOffice(Mike,HRInquiry))", "all x y z.((ProjectManager(x) & Jarad(y) & ProjectManager(z) & Mike(y) & SoldOutConcert(z) & -DiscussedBehavior(y,z)) -> OfferedTickets(x,y,z))", "all x y.((ProjectManager(x) & Jarad(y) & Mike(x) & SoldOutConcert(y)) -> (OfferedTickets(x,y) & -DiscussedBehaviorInOffice(x,y)))", "all x.((ProjectManager(x) & ProjectManager(x) & JaradsProjectManager(x,Mike) & SoldOutConcert(x)) -> -DiscussedBehaviorInOffice(x))"]}
{"id": "enwn_validation_664", "nl": "Bribing someone to keep quiet about misconduct is unethical.", "fol": "", "prediction": ["all x.((Brings(x) & KeepsQuiet(x)) -> Unethical(x))", "all x y.((Brings(x,y) & Person(y) & KeepsQuiet(x,y)) -> Unethical(x))", "all x.((Birds(x) & KeepsQuiet(x)) -> Unethical(x))", "all x y.((Bird(x) & Person(y) & KeepsQuiet(x,y)) -> Unethical(x))", "(BringingToKeepQuietAboutConflict(x) -> Unethical(x))", "all x.((Brings(x) & Quiet(x) & Disgrace(x)) -> Unethical(x))", "all x y z.((Bird(x) & Person(y) & Disgusted(z) & KeepsQuiet(x,y,z)) -> Unethical(x))", "all x y.((Bird(x) & Person(y) & KeepsQuietAboutConflict(x,y)) -> Unethical(x))", "all x.(Birds(x) -> Unethical(x))", "all x y.((Brings(x,y) & Person(y)) -> Unethical(x))", "all x y.((Person(x) & Person(y) & Bribes(x,y)) -> Unethical(x))", "all x.((Birding(x) & KeepsQuiet(x)) -> Unethical(x))", "all x.(Brings(x) -> Unethical(x))", "all x y.((Brings(x,y) & Person(y)) -> Unethical(x))", "All x.((Brings(x) & KeepsQuiet(x)) -> Unethical(x))", "All x.(Birding(x) -> Unethical(x))"]}
{"id": "enwn_validation_665", "nl": "Mike was attempting to bribe Jarad to keep quiet about his misconduct by offering him the tickets.", "fol": "", "prediction": ["all x y.((Mike(x) & Jarad(y)) -> (AttemptsToBibe(x,y) & OffersTickets(x,y)))", "all x y z.((Mike(x) & Jarad(y) & Tickets(z)) -> (AttemptsToBibe(x,y) & Offers(x,z)))", "all x y.((Mike(x) & Jarad(y) & OffersTickets(x,y)) -> BribesToKeepQuiet(x,y))", "all x.((Mike(x) & Jarad(y) & OffersTickets(x,y)) -> BribesToKeepQuiet(x,y))", "(AttemptingToBibeJarad(Mike) & OfferingTickets(Mike))", "(TryingToBibeJarad(Mike,Jarad) & OfferingTickets(Mike,Jarad))", "(AttemptingToBibeJarad(Mike,Jarad) & OfferingTickets(Mike,Jarad))", "AttemptsToBibeJaradToKeepQuietAboutConflictByOfferingTickets(Mike,Jarad)", "-(TryingToBibeJarad(Mike) & OffersTickets(Mike))", "all x y z.((Mike(x) & Jarad(y) & Tickets(z)) -> (TryingToBibe(x,y) & KeepsQuiet(x,z)))", "all x y.((Mike(x) & Jarad(y)) -> (TryingToBibe(x,y) & OfferingTickets(x,y)))", "all x.((Mike(x) & Jarad(x)) -> BribesToKeepQuiet(x))", "(AttemptingToBbribe(Mike,Jarad) & OfferingTickets(Mike,Jarad))", "all x.((Mike(x) & Jarad(y)) -> (AttemptingToBibe(x,y) & OfferingTickets(x,y)))", "(TryingToBibeJarad(Mike,Jarad) & OfferingTickets(Mike,Jarad))", "all x y.((Mike(x) & Jarad(y) & OfferTickets(x,y)) -> BribesToKeepQuiet(x,y))"]}
{"id": "enwn_validation_666", "nl": "It was unethical for Mike to offer Jarad the tickets.", "fol": "", "prediction": ["all x.((Mike(x) & OffersJaradTickets(x)) -> Unethical(x))", "Es ist unethical for Mike to offer Jarad the tickets.", "all x y.((Mike(x) & Jarad(y)) -> Unethical(x,y))", "-EthicalForMikeToOfferJaradTickets(Mike,Jarad)", "-(UnethicalForMikeToOfferJaradTickets(Mike) & JaradTickets(Mike))", "Es ist unethical, dass Mike JaradsTicketsOfferings(Mike,Jarad))", "all x.((Mike(x) & OffersJaradTickets(x)) -> Unethical(x))", "Es war unethical for Mike to offer Jarad the tickets.", "All x.((Mike(x) & Jarad(x)) -> Unethical(x))", "(UnethicalForMikeToOfferJaradTickets(Mike) -> Unfair(Mike))", "all x y.((Mike(x) & Jarad(y)) -> Unethical(x,y))", "-EthicalForMikeToOfferTickets(Mike,Jarad)", "Es war unethical for Mike to offer Jarad the tickets.", "(UnethicalForMikeToOfferJaradTickets(Mike,Jarad))", "All x.((Mike(x) & OffersJaradTickets(x)) -> Unethical(x))", "It was unethical for Mike to offer Jarad the tickets."]}
{"id": "enwn_validation_667", "nl": "Mike should not have offered Jarad the tickets.", "fol": "", "prediction": ["all x.((Mike(x) & Jarad(y)) -> -OfferedTickets(x,y))", "-OfferedTickets(Mike,Jarad)", "all x.(Mike(x) -> -OfferedTickets(x,Jarad))", "all x y.((Mike(x) & Jarad(y)) -> -OfferedTickets(x,y))", "-(MikeBoardedTickets(Mike,Jarad))", "Mike should not have offeredJarad the tickets.", "(Mike should not have offeredJaradtheTickets(Mike) -> -OfferedJaradTheTickets(Mike))", "all x.((Mike(x) & Jarad(y)) -> -OfferedTickets(x,y))", "Jarad should not have offered tickets to Mike.", "Mike should not have offered Jarad the tickets.", "-OfficialTickets(Mike,Jarad)", "-OfferedTickets(Mike,Jarad)", "Jarad should not have offered tickets to Mike.", "Mike should not have offeredJarad the tickets.", "(-OfferedTickets(Mike,Jarad))", "all x.((Mike(x) & Jarad(x)) -> -OfferedTickets(x,y))"]}
{"id": "enwn_validation_668", "nl": "If someone asks you for a small favor, it's polite to accept.", "fol": "", "prediction": ["all x.((AsksForSmallFavour(x) & PoliteToAccept(x)) -> SmallFavor(x))", "all x.(SmallFavor(x) -> PoliteToAccept(x))", "all x.((AsksForSmallFavor(x) & PoliteToAccept(x)) -> SmallFavor(x))", "all x.((Person(x) & AsksForSmallFavor(x)) -> PoliteToAccept(x))", "all x y.((Person(x) & SmallFavor(y) & AsksFor(x,y)) -> PoliteToAccept(x))", "all x.(SmallFavour(x) -> PoliteToAccept(x))", "all x y.((Person(x) & SmallFavour(y) & AsksFor(x,y)) -> PoliteToAccept(x))", "all x y.((AsksForSmallFavour(x,y) & SmallFavor(y)) -> PoliteToAccept(x,y))", "all x y.((SmallFavor(x) & AsksFor(x,y)) -> PoliteToAccept(x))", "all x.(AsksForSmallFavour(x) -> PoliteToAccept(x))", "all x.((AsksForSmallFavour(x) & PoliteToAccept(x)) -> SmallFavor(x))", "all x.((Person(x) & AsksForSmallFavour(x)) -> PoliteToAccept(x))", "all x.(SmallFavor(x) -> PoliteToAccept(x))", "exists x.(PoliteToAccept(x) -> AsksForSmallFavour(x))", "all x y.((Person(x) & SmallFavor(y) & AsksFor(x,y)) -> PoliteToAccept(x))", "exists x.(Polite(x) -> (AsksForSmallFavor(x) & Polite(x)))"]}
{"id": "enwn_validation_669", "nl": "Letting someone use the shower before you is a small favor.", "fol": "", "prediction": ["all x.(LetsPersonUseBaby(x) -> SmallFavor(x))", "all x.((LettingPersonUseShower(x) & BeforeYou(x)) -> SmallFavor(x))", "all x y.((Person(x) & Shower(y)) -> SmallFavor(x,y))", "all x y.((LetsPersonUseBaby(x,y) & Shower(y)) -> SmallFavor(x))", "all x.(LettingPersonUseBaby(x) -> SmallFavor(x))", "all x y.((UsesBath(x) & Person(y) & UsesBath(y,x)) -> SmallFavor(x))", "all x.((LetsPersonUseBaby(x) & Shower(x)) -> SmallFavor(x))", "all x y.((LettingPersonUseBaby(x,y) & Shower(y)) -> SmallFavor(x))", "all x y z.((Person(x) & Shower(y) & Shower(z) & Uses(x,y,z)) -> SmallFavor(x))", "all x y.((Baby(x) & Person(y)) -> UsesShowerBefore(x,y))", "all x.((LettingPersonUseShowerBeforeYou(x)) -> SmallFavor(x))", "all x.(LetsPersonUseBreakfast(x) -> SmallFavor(x))", "exists x.(LettingPersonUseShower(x) & SmallFavor(x))", "exists x.(LetsUseBaby(x) & SmallFavor(x))", "all x y.((Sleep(x) & Person(y)) -> UsesBefore(x,y))", "exists x.(LettingPersonUseBaby(x) & SmallFavor(x))"]}
{"id": "enwn_validation_670", "nl": "Elle's sister asked her if she could use the shower first.", "fol": "", "prediction": ["Elle's sister asked if she could usetheshowerFirst.", "EllesSisterAnsweredIfSheCanUseShowerFirst(ELLE,Sister,Shower))", "(Sister(Ellie) & asked if she could useShowerFirst(Ellie))", "Elle's sister asked if she could useShowerFirst.", "Laurie's sister asked if she could useShowerFirst.", "(Sister(Ellen) & asked if she could useShowerFirst(Ellen))", "-Sister(Sister(Sister(Selle) & CouldUseShowerFirst(Selle))", "Elle's sister asked if she could usesShowerFirst.", "EllesSisterSiblingAnsweredIfSheCanUseShowerFirst(ELLE,Sweet))", "EllesSisterAnswersSisterIfSheCanUseShowerFirst(ELLE)", "SissyClaireSister(ELLE) & asked if Elle could useShowerFirst(ELLE,Sweet))", "EllesSisterAnsweredIfSheCanUseShowerFirst(elle,s)", "Elle's sister asked her if she could usetheshowerFirst.", "(Sister(Ellen) & asked if she could useBathFirst(Ellen,Sweet))", "Elle's sister asked if she could usetheshowerFirst.", "Elle's sister asked if she could useShowerFirst(elle,s))"]}
{"id": "enwn_validation_671", "nl": "Elle ignored her sister's request and showered for 30 minutes.", "fol": "", "prediction": ["Elle ignored sister's request and showered for 30 minutes.", "Elle a ignoratSisterRequest(elle,30) & Showered(elle,30))", "-(Ellie(Ellie) & SisterRequest(Ellie)) -> (Ignored(Ellie,Sister) & Showered(Ellie,30)))", "Sie ignorsSisterRequest(elle) & ShoweredFor30Minutes(elle))", "Elle a ignoratSisterRequest(elle) & ShoweredFor30Minutes(elle))", "Elle a ignoratsSisterRequest(elle) & ShoweredFor30Minutes(elle))", "(IgnoredSisterRequest(Ellen,30) & ShoweredFor(Ellen,30))", "(IgnoredSisterRequest(Ellie) & ShoweredFor30Minutes(Ellie))", "-(IgnoredSisterRequest(Ille) & ShoweredFor30Minutes(Ille))", "Elle ignored sister's request and swam for 30 minutes.", "Elle ignored request of sister and swam for 30 minutes.", "Elle a ignorated sister's request and swam for 30 minutes.", "(IgnoresSisterRequest(Ellie) & ShoweredFor30Minutes(Ellie))", "Elle ignored sister's request and showedered for 30 minutes.", "Elle neassisted request from sister and swam for 30 minutes.", "Elle ignored request of sister and slept for 30 minutes."]}
{"id": "enwn_validation_672", "nl": "Elle's sister was requesting a small favor.", "fol": "", "prediction": ["(Sister(Ellie) & RequestedSmallFavor(Ellie))", "Elle's sister requestedsSmallFavor(elle,sister,s))", "(Sister(Ellen) & RequestedSmallFavor(Ellen))", "Elle's sister requested a small favor.", "all x.(Sister(x) -> RequestedSmallFavor(x))", "EllesSisterRequiresSmallFavor(elle,sister,favor))", "-Sister(Sister(Sister(Sister) & RequestedSmallFavor(Sister))", "EllesSisterRequestsSmallFavor(elle,sister,favor))", "All x.(Sister(x) -> RequestsSmallFavor(x))", "Elle's sister was requesting a small favor.", "(Sister(Ellie) & RequestedSmallFavor(Ellie))", "EllesSisterRequestedSmallFavor(ELLE)", "Elle's sister requestedsSmallFavor(elle,sister)", "Elle's sister requestedSmallFavor(elle,sister)", "EllesSisterRequiresSmallFavour(elle,sister,s))", "Elle's sister was requestingSmallFavour(ELLE)"]}
{"id": "enwn_validation_673", "nl": "Elle ignored her sister's request for a small favor.", "fol": "", "prediction": ["all x y.((Sister(x) & Elle(y)) -> IgnoredRequestForSmallFavor(y,x))", "Elle ignored sister's request for smallFavor(elle)", "all x.((Ellie(x) & SisterRequestForSmallFavor(x)) -> Ignored(x))", "Elle a ignoratSisterSisterRequestForSmallFavor(elle,x))", "(IgnoredSisterRequestForSmallFavor(Ille,Sister))", "-(Ellie(Ellie) & SisterRequestForSmallFavor(Ellie,Sister))", "Elle neassisted request for smallFavor(n) & sister's request for smallFavor(n))", "Elle ignored sister's request for a small favor.", "Elle a ignor\u00e9 sister's request for smallFavor(elle,x))", "Elle ignored request for smallFavor(elle,sister,favor))", "(IgnoresSisterRequestForSmallFavor(Ille,Sister))", "all x y.((Ellie(x) & Sister(y)) -> IgnoredRequestForSmallFavor(x,y))", "(IgnoredSisterSisterRequestForSmallFavor(Ille,Sister))", "Elle ignoredSisterRequestForSmallFavor(elle,sister,favor))", "Elle ignored her sister's request for a small favor.", "Elle ignored sister's request for smallFavor(elle)"]}
{"id": "enwn_validation_674", "nl": "It was impolite for Elle to ignore her sister's request.", "fol": "", "prediction": ["all x.(ImpoliteForEllieToIgnoreSisterRequest(x) -> ImpossibleForEllie(x))", "-ImpoliteForSheilaToIgnoreSisterRequest(elle)", "(ImpoliteForSheilaToIgnoreSisterRequest(elle))", "(ImpoliteForSheila(Ellen) & IgnoreSisterRequest(Ellen))", "Il impolite for Elle to ignore sister's request.", "Elle's request to ignore sister's request was impolite.", "-ImpoliteForEllenToIgnoreSisterRequest(Ellen,Sister)", "Elle a resentment for ignoring sister's request.", "Esa was impolite for Elle to ignore sister's request.", "Iliassa's request to ignoresSisterRequest.", "Ilias & IgnoreSisterRequest(elle)", "Ilias's request to ignoresSisterRequest was impolite.", "-ImploliteForEllieToIgnoreSisterRequest(Ellie,Sister)", "Esa was impolite for Elle to ignoresSisterRequest(elle)", "Elle sabotaged request.", "Elle a resigned from the position of Deputy Chief of Staff."]}
{"id": "enwn_validation_675", "nl": "Elle should not have ignored her sister's request.", "fol": "", "prediction": ["Elle ne sabotagedSisterRequest(n) & -IgnoredRequest(n))", "all x.((Ellie(x) & SisterRequest(x)) -> -Ignored(x,y))", "Elle should not have ignored sister's request.", "Elle ne devrait pas avoir ignor\u00e9 la demande de sa sibling.", "-(IgnoredSisterRequest(Ille) & -IgnoredSisterRequest(Ille))", "Elle ne should have ignored sister's request.", "-IgnoredSisterRequest(Ellie)", "(Illustrated(Illustrated(Illustrated) -> -IgnoredSisterRequest(Illustrated))", "Elle ne sabotagedSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n))", "Elle should not have ignored sister's request.", "Elle ne devrait pas avoir ignor\u00e9 sa sister's request.", "Elle n'aurait pas ignor\u00e9 la demande de sa sibling.", "Elle should not have ignoredSisterRequest(elle,x)", "-IgnoredSisterRequest(Ellen)", "Elle should not have ignored sister's request.", "Elle should not have ignored sister's request."]}
{"id": "enwn_validation_676", "nl": "It's okay to do things that are generally frowned upon if they have positive outcomes.", "fol": "", "prediction": ["all x.((Doing(x) & GenerallyFownedOn(x) & PositiveOutcomes(x)) -> Okay(x))", "all x.((FrownedOn(x) & PositiveOutcomes(x)) -> Okay(x))", "all x.((Doing(x) & FrownedOn(x) & PositiveOutcomes(x)) -> Okay(x))", "all x.((PositiveOutcomes(x) & FrownedOn(x)) -> Okay(x))", "all x y.((FrownedOn(x) & PositiveOutcomes(y)) -> Okay(x,y))", "all x.((FreaksOn(x) & PositiveOutcomes(x)) -> Okay(x))", "all x y.((Doing(x) & FrownedOn(y) & PositiveOutcomes(x,y)) -> Okay(x))", "all x.((Does(x) & FrownedOn(x) & PositiveOutcomes(x)) -> Okay(x))", "exists x.(PositiveOutcomes(x) & FrownedOn(x))", "all x y.((PositiveOutcomes(x) & FrownedOn(y)) -> Okay(x,y))", "all x y.((Freak(x) & PositiveOutcomes(y)) -> OkayToDo(x,y))", "all x y.((Does(x,y) & FrownedOn(y) & PositiveOutcomes(x)) -> Okay(x))", "all x y.((Doing(x) & FrownedOn(x) & PositiveOutcomes(y)) -> OK(x,y))", "exists x.(FreakFree(x) & PositiveOutcomes(x))", "(all x.((FrownedOn(x) & PositiveOutcomes(x)) -> Okay(x)))", "exists x.(PositiveOutcomes(x) & FreownedOn(x))"]}
{"id": "enwn_validation_677", "nl": "Lying is generally wrong.", "fol": "", "prediction": ["all x.(Liking(x) -> Worst(x))", "all x.(Lying(x) -> Worst(x))", "all x.(Liking(x) -> Worst(x))", "all x.(Lying(x) -> Worst(x))", "all x y.((Lying(x) & Person(y)) -> Worst(x,y))", "all x y.((Liking(x) & Person(y)) -> Worst(x,y))", "all x y.((Lying(x) & -Lying(y)) -> Worst(x,y))", "all x.(Liking(x) -> Worst(x))", "all x.(Lying(x) -> Worst(x))", "(all x.(Lying(x) -> Wrong(x)))", "all x.(Liking(x) -> Worst(x))", "all x.(Lying(x) -> Worst(x))", "exists x.(Liking(x) & Worst(x))", "exists x.(Lieng(x) & Worst(x))", "exists x.(Lied(x) & GenerallyWrong(x))", "exists x.(Lying(x) & Wrong(x))"]}
{"id": "enwn_validation_678", "nl": "Xirong lied to his boss to protect his coworker from being fired for organizing a walk-out.", "fol": "", "prediction": ["all x y.((Xirong(x) & Boss(y)) -> LiesToProtectCoworkerFromFilm(x,y))", "all x.((Xirong(x) & Boss(x)) -> LiesToProtectCoworkerFromFilm(x))", "Xirong lied to boss to protect coworker from being fired for organizing walkout.", "(LikedToBossToProtectCoworkerFromFilm(Xirong) & OrganizedWalkOut(Xirong))", "all x.((Xirong(x) & Boss(x) & Coworker(y)) -> LiliedToProtectFromFilm(x,y))", "all x y z.((Xirong(x) & Boss(y) & Coworker(z) & WalkOut(z)) -> LiesToProtectFromFilm(x,y,z))", "Xirong liedToBossToProtectCoworkerFromFilmingForWalkOut(x))", "all x y.((Xirong(x) & Boss(y)) -> LiliedToProtectCoworker(x,y))", "Xirong lied to bosses to protect coworkers from being fired for organizing walkouts.", "all x y.((Exirong(x) & Coworker(y)) -> (LikedToBoss(x,y) & ProtectsFromFilm(x,y)))", "(LikedToBossToProtectCoworkerFromFilming(Xirong) & OrganizedWalkOut(Xirong,x))", "Xirong lied to boss to protect coworker from being fired for organizing walkout.", "all x.((Xirong(x) & Boss(x) & Coworker(x) & WalkOut(x)) -> LiliedToProtectFromFilm(x))", "all x.((Xirong(x) & Boss(x)) -> LiliedToProtectCoworkerFromFilm(x))", "(LikedToBossToProtectCoworkerFromFilm(x,y) & OrganizedWalkOut(x,y))", "all x y.((Xirong(x) & Boss(y)) -> LiedToProtect(x,y))"]}
{"id": "enwn_validation_679", "nl": "Firing someone for organizing a walk-out is a form of retaliation.", "fol": "", "prediction": ["all x.((Firing(x) & OrganizingWalkOut(x)) -> Retaliation(x))", "all x y.((Firing(x,y) & WalkOut(y)) -> Retaliation(x))", "all x y.((Firing(x,y) & WalkOutOrganization(y)) -> Retaliation(x))", "all x.(FiringForOrganizingWalkOut(x) -> Retaliation(x))", "all x y.((Firing(x,y) & WalkOut(y)) -> Retaliation(x))", "all x.((Firing(x) & OrganisesWalkOut(x)) -> Retaliation(x))", "all x.((FiringForWalkOut(x) & OrganisesWalkOut(x)) -> Retaliation(x))", "all x y.((Firing(x,y) & Person(y) & OrganisesWalkOut(y)) -> Retaliation(x))", "all x y z.((Firing(x,y) & WalkOut(z) & Organizes(x,z)) -> Retaliation(x))", "all x y z.((Firing(x,y) & WalkOut(z) & Organizes(x,z)) -> Retaliation(x))", "all x y.((Firing(x) & WalkOut(y) & Organises(x,y)) -> Retaliation(x))", "all x y.((Firing(x,y) & WalkOut(y)) -> Retaliation(x,y))", "all x.(FiringForOrganizingWalkOut(x) -> Retaliation(x))", "all x.((Firing(x) & OrganizingWalkOut(x)) -> Retaliation(x))", "all x.((FiringForWalkOut(x) & OrganisesWalkOut(x)) -> Retaliation(x))", "all x.(FiringForOrganizingWalkOut(x) -> Retaliation(x))"]}
{"id": "enwn_validation_680", "nl": "Preventing someone from doing something wrong is a good thing.", "fol": "", "prediction": ["all x.((Prevents(x) & Person(x)) -> GoodThing(x))", "all x.(PreventsDoingWrong(x) -> GoodThing(x))", "all x y.((Person(x) & DoingWrong(y)) -> GoodThing(x))", "all x.((PreventsDoingWrong(x) & Person(x)) -> GoodThing(x))", "all x y.((Person(x) & Person(y)) -> PreventsFromDoingWrong(x,y))", "all x.((Person(x) & DoesWrong(x)) -> GoodThing(x))", "all x.(Prevents(x,y) -> GoodThing(x))", "all x y z.((Person(x) & WrongDoing(y) & Person(z) & Prevents(x,z)) -> GoodThing(x))", "all x y.((Protects(x,y) & Person(y) & DoingWrong(y)) -> GoodThing(x))", "all x.(PreventsDoingWrong(x) -> GoodThing(x))", "all x y.((Person(x) & Person(y) & DoingWrong(x,y)) -> GoodThing(x))", "all x y.((Person(x) & DoingWrong(y)) -> GoodThing(x))", "all x.((Prevents(x,y) & Person(y)) -> GoodThing(x))", "all x.(PreventsDamage(x) -> GoodThing(x))", "exists x.(PatientFromDoingWrong(x) & GoodThing(x))", "exists x.(Prevents(x,y) & Person(y) & DoingWrong(y))"]}
{"id": "enwn_validation_681", "nl": "Retaliating against worker organization is wrong.", "fol": "", "prediction": ["all x.(RetaliatingAgainstWorkerOrganization(x) -> Wrong(x))", "all x.((RetaliateAgainstWorkerOrganization(x)) -> Wrong(x))", "(RetaliatingAgainstWorkerOrganization(x) -> Wrong(x))", "all x.(RetaliateAgainstWorkerOrganization(x) -> Irresponsible(x))", "all x y.((WorkerOrganization(x) & RetaliateAgainst(x,y)) -> Wrong(x))", "all x.((RetaliateAgainstWorkerOrganization(x) & Wrong(x)) -> RetaliateAgainst(x))", "all x y.((RetaliateAgainstWorkerOrganization(x) & WorkerOrganization(y)) -> Wrong(x))", "(RetaliatingAgainstWorkerOrganization(x) -> Wrong(x))", "all x y.((WorkerOrganization(x) & RetaliateAgainst(x,y)) -> Irresponsible(x))", "all x.(RetaliatingAgainstWorkerOrganization(x) -> Wrong(x))", "all x.((RetaliatingAgainstWorkerOrganization(x)) -> Irresponsible(x))", "All x y.((RetaliateAgainstWorkerOrganization(x) & WorkerOrganization(y)) -> Irresponsible(x,y))", "all x y.((WorkerOrganization(x) & Retaliation(y)) -> Wrong(x))", "all x.((RetaliateAgainstWorkerOrganization(x) & Worst(x)) -> Irresponsible(x))", "all x.(RetaliationAgainstWorkerOrganization(x) -> Wrong(x))", "all x.(RetaliateAgainstWorkerOrganization(x) -> Irresponsible(x))"]}
{"id": "enwn_validation_682", "nl": "It's okay to lie if it does more good than harm.", "fol": "", "prediction": ["all x.((Limit(x) & MoreGoodThanHarm(x)) -> Okay(x))", "all x.((Limit(x) & BetterThanHarm(x)) -> Okay(x))", "all x.((Lie(x) & MoreGoodThanHarm(x)) -> Okay(x))", "all x.((Limits(x) & MoreGoodThanHarm(x)) -> Okay(x))", "exists x.(Limit(x) & (DoesMoreGood(x) | DoesMoreHarm(x)))", "all x y.((Limit(x) & Good(y) & Harm(y)) -> Okay(x))", "all x.((Liking(x) & MoreGoodThanHarm(x)) -> Okay(x))", "exists x.(Lie(x) & (DoesMoreGood(x) & DoesMoreHarm(x)) -> Okay(x)))", "all x.((Lie(x) & BetterThanHarm(x)) -> Okay(x))", "all x y.((Limit(x) & Good(y) & MoreHarm(y)) -> Okay(x,y))", "(all x.((Limit(x) & MoreGood(x)) -> MoreHarm(x)))", "exists x.(Limit(x) & DoesMoreGoodThanHarm(x))", "all x y.((Limit(x) & DoesMoreGoodThanHarm(y)) -> Okay(x,y))", "exists x.(Liking(x) & (DoesMoreGood(x) & DoesMoreHarm(x)) -> Okay(x)))", "all x.((Liking(x) & BetterThanHarm(x)) -> Okay(x))", "all x y.((Lie(x) & Good(y) & Harm(y)) -> Okay(x,y))"]}
{"id": "enwn_validation_683", "nl": "Xirong lied to his boss to prevent him from retaliating against worker organization.", "fol": "", "prediction": ["all x.((Xirong(x) & Boss(x)) -> LiesToPreventRetaliation(x))", "all x y.((Xirong(x) & Boss(y)) -> LiesToPreventRetaliation(x,y))", "Xirong lied to Boss(x) & PreventsRetaliationAgainstWorkerOrganization(x))", "(LikedToBossToPreventRetaliation(Xirong,WorkerOrganization))", "all x y z.((Xirong(x) & Boss(y) & WorkerOrganization(z)) -> LiesToPreventRetaliation(x,y,z))", "Xirong lied to boss to prevent retaliation against workerOrganization(x))", "Xirong lied to BossToPreventRetaliationAgainstWorkerOrganization(x))", "Xirong liedToBossToPreventRetaliationAgainstWorkerOrganization(x)", "all x.((Xirong(x) & Boss(x)) -> LiliedToPreventRetaliation(x))", "all x y.((Xirong(x) & Boss(y)) -> LiliedToPreventRetaliation(x,y))", "(LikedToBossToPreventRetaliation(Xirong,WorkerOrganization) -> Xirong(X))", "Xirong lied to his boss to prevent retaliation against workerOrganization(x))", "all x.((Xirong(x) & Boss(x)) -> LyingToPreventRetaliation(x,workerOrganization))", "(LikedToBossToPreventRetaliation(x) & WorkerOrganization(x))", "all x y.((Xirong(x) & Boss(y)) -> LiesToPreventRetaliation(x,y))", "all x.((Xirong(x) & Boss(x)) -> LiesToPreventRetaliation(x))"]}
{"id": "enwn_validation_684", "nl": "Preventing someone from retaliating against worker organization is a good thing.", "fol": "", "prediction": ["all x.((PreventsRetaliation(x) & WorkerOrganization(x)) -> GoodThing(x))", "all x.((Person(x) & PreventsRetaliation(x)) -> GoodThing(x))", "all x y.((WorkerOrganization(x) & Person(y) & PreventsRetaliation(y,x)) -> GoodThing(x))", "all x.(PreventsRetaliation(x) -> GoodThing(x))", "all x y.((Person(x) & WorkerOrganization(y) & RetaliatesAgainst(x,y)) -> GoodThing(x))", "all x y.((WorkerOrganization(x) & Person(y)) -> PreventsRetaliation(y,x))", "all x.((PreventsRetaliation(x) & WorksAgainstWorkerOrganization(x)) -> GoodThing(x))", "all x.(PreventsRetaliationAgainstWorkerOrganization(x) -> GoodThing(x))", "all x y.((WorkerOrganization(x) & Person(y) & RetaliatesAgainst(y,x)) -> GoodThing(x))", "all x y z.((WorkerOrganization(x) & Person(y) & RetaliationAgainst(y,z)) -> GoodThing(x))", "all x.((Person(x) & PreventsRetaliation(x)) -> GoodThing(x))", "all x y.((Person(x) & WorkerOrganization(y) & RetaliatesAgainst(x,y)) -> GoodThing(x))", "exists x.(Protects(x) & RetaliatesAgainstWorkerOrganization(x))", "all x.(PreventsRetaliationAgainstWorkerOrganization(x) -> GoodThing(x))", "all x y.((WorkerOrganization(x) & Person(y) & PreventsRetaliation(y,x)) -> GoodThing(x))", "exists x.(PreventsRetaliation(x) & WorkerOrganization(x))"]}
{"id": "enwn_validation_685", "nl": "The consequence of Xirong's lie was a good thing.", "fol": "", "prediction": ["all x.((Lird(x) & Xirong(x)) -> GoodThing(x))", "all x.((Little(x) & Xirong(x)) -> GoodThing(x))", "all x.((ConsequenceOfXirongsLie(x) & GoodThing(x)) -> GoodThing(x))", "Xirong's lie was a good thing.", "all x y.((Consequence(x) & XirongsLie(y)) -> GoodThing(x,y))", "XirongsLie(x) -> GoodThing(x))", "all x y.((Lird(x) & Xirong(y)) -> GoodThing(x,y))", "the consequence of Xirong'sLie was good.", "all x.((Lird(x) & Xirong(x)) -> GoodThing(x))", "all x.((ConsequenceOfXirongsLie(x) & GoodThing(x)) -> GoodThing(x))", "all x.(Lird(x) -> GoodThing(x))", "(GoodThing)", "all x.((Little(x) & Xirong)) -> GoodThing(x))", "all x.(Little(x) -> GoodThing(x))", "(GoodThing)", "all x.((ConsequenceOfXirongsLie(x) & GoodThing(x)) -> GoodThing(x))"]}
{"id": "enwn_validation_686", "nl": "It was okay for Xirong to lie to his boss.", "fol": "", "prediction": ["all x.((Xirong(x) & Boss(x)) -> OkayToLieTo(x,x))", "all x y.((Xirong(x) & Boss(y)) -> OkayToLieTo(x,y))", "(AlwaysLikedToBoss(Xirong))", "all x.((Xirong(x) & Boss(x)) -> OkayToLieTo(x,y))", "-LikedToBoss(x)", "-(LikedToBoss(x) | XirongLikedToBoss(x)))", "(all x.((Xirong(x) & Boss(x)) -> LiaisesTo(x,x)))", "all x y.((Xirong(x) & Boss(y)) -> OkayToLieTo(x,y))", "all x.((Xirong(x) & Boss(x)) -> OKToLieTo(x))", "All x.(Liking(x) -> OKForXirong(x))", "All x.(LikedToBoss(x) -> OKForXirong(x))", "all x.((Xirong(x) & Boss(x)) -> OkayToLieTo(x,x))", "all x y.((Xirong(x) & Boss(y)) -> LikedTo(x,y))", "All x.(Liking(x) -> Okay(x))", "all x.((Xirong(x) & Boss(x)) -> OKLikingTo(x,y))", "all x y.((Xirong(x) & Boss(y)) -> Okay(x,y))"]}
{"id": "enwn_validation_687", "nl": "Dita cut the brakes on Martin's car after he cheated on her.", "fol": "", "prediction": ["all x y.((Dita(x) & Martin(y) & CheatedOn(y,x)) -> CutsBrakesOn(x,y))", "all x y z.((Dita(x) & Martin(y) & Car(z) & CheatedOn(y,z)) -> CutsBrakesOn(x,y,z))", "(CheatedOn(Dita,Martin) & CutsBrakes(Dita,Martin))", "Dita CutsBrakesOnMartinCar(d) & CheatedOnMartin(d))", "(CheatedOn(Dita) & CutsBrakes(Dita,Martin))", "Dita cut brakes on Martin's car after he cheated on her.", "all x y.((Dita(x) & Martin(y) & CheatedOn(x,y)) -> CutsBrakes(x,y))", "Dita CutsBrakesOnMartinsCarAfterHecheatedOnHer(Dita,Martin))", "(Cheated(Martin) & CutsBrakes(Dita,Martin))", "all x y z.((Dita(x) & Martin(y) & Car(z) & CheatedOn(y,z)) -> CutsBrakes(x,y,z))", "-(Dita CutsBrakesOnMartinCar(d) & CheatedOnMartin(d)))", "Dita CutsBrakesOnMartinCar(Dita,Martin) -> CheatedOn(Dita,Martin))", "(CheatsOn(Dita,Martin) -> CutsBrakesOn(Dita,Martin))", "all x.((Dita(x) & Martin(x) & CheatedOn(x,Dita)) -> CutsBrakesOnCar(x,Martin))", "(CheatedOn(Martin,Dita) | CutsBrakesOn(Dita,Martin)))", "Dita cut brakes on Martin's car after he CheatedOnHer(d)"]}
{"id": "enwn_validation_688", "nl": "Someone cheating on you is not a good enough reason to put them in mortal danger.", "fol": "", "prediction": ["all x.((CheatingOn(x) & -GoodEnoughRightToMortalDangerous(x)) -> -CheatingOn(x))", "all x y.((CheatingOn(x) & Person(y)) -> -GoodEnoughRightToPutInMortalDanger(x,y))", "all x.((Person(x) & CheatingOnYou(x)) -> -GoodEnoughRightToPutInMortalDanger(x))", "all x.((CheatsOn(x) & -GoodEnoughRightToPutInMortalDanger(x)) -> -GoodEnoughRightToPutInMortalDanger(x))", "all x y.((CheatsOn(x,y) & Person(y)) -> -GoodEnoughRightToPutInMortalDanger(x,y))", "all x.(CheatsOn(x) -> -GoodEnoughRightToPutInMortalDanger(x))", "all x.((CheatingOnYou(x) & -GoodEnoughRightToMortalDangerous(x)) -> -CheatingOnYou(x))", "(CheatingOnYou(x) -> -GoodEnoughRightToPutInMortalDanger(x))", "all x y.((Cheating(x) & Person(y) & Kills(x,y)) -> -GoodEnoughRightToPutInMortalDanger(x))", "all x y.((Person(x) & CheatingOn(x,y)) -> -GoodEnoughRightToPutInMortalDanger(x,y))", "all x.(CheatsOn(x) -> -GoodEnoughRightToMortalDange(x))", "all x y.((CheatsOn(x,y) & Person(y)) -> -GoodEnoughRightToMortalDanger(x,y))", "exists x.(CheatingOn(x) & -GoodEnoughRightToPutInMortalDanger(x))", "exists x.(CheatsOn(x,y) & -GoodEnoughRightToPutInMortalDanger(x,y))", "all x y.((Person(x) & CheatingOn(x,y)) -> -GoodEnoughRightToPlaceInMortalDanger(x,y))", "exists x.(CheatingOn(x) & -GoodEnoughRight(x))"]}
{"id": "enwn_validation_689", "nl": "Cutting the brakes on someone's car puts them in mortal danger.", "fol": "", "prediction": ["all x y.((CuttingBrakes(x) & Car(y)) -> PutsInMortalDangerous(x,y))", "all x y.((Car(x) & Car(y) & CutsBrakesOn(x,y)) -> MortalDangerous(x))", "all x.((CuttingBrakes(x) & Car(y)) -> MortalDangerous(x,y))", "all x y z.((Car(x) & Brake(y) & Car(z) & Cuts(x,y)) -> MortalDangerous(x,z))", "all x.(CuttingBrakesOnCar(x) -> PutsInMortalDangerous(x))", "all x y z.((Breaks(x) & Car(y) & Person(z) & Cuts(x,y,z)) -> MortalDangerous(z))", "all x y.((CuttingBrakes(x) & Car(y)) -> PutsInMortalDanger(x,y))", "all x.((CuttingBrakesOnCar(x) & Person(x)) -> MortalDangerous(x))", "all x.((CuttingBrakes(x) & Car(y)) -> PutsInMortalDangerous(x,y))", "all x y.((Breaks(x) & Car(y) & Cuts(x,y)) -> PutsInMortalDangerous(x,y))", "all x y z.((CuttingBrakes(x) & Car(y) & Person(z)) -> PutsInMortalDanger(x,y,z))", "all x y.((Car(x) & Brake(y) & Cuts(x,y)) -> MortalDangerous(x,y))", "all x.(CuttingBrakesOnCar(x) -> PutsInMortalDanger(x))", "all x.((CuttingBrakesOnCar(x) & PersonsCar(x)) -> MortalDangerous(x))", "all x y.((CuttingBrakesOnCar(x,y) & Person(y)) -> MortalDangerous(y))", "all x.(CuttingBrakesOnCar(x) -> MortalDangerous(x))"]}
{"id": "enwn_validation_690", "nl": "Someone cheating on you is not a good enough reason to cut the brakes on their car.", "fol": "", "prediction": ["all x y.((CheatingOn(x,y) & Car(y)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x.((CheatingOnYou(x) & -GoodEnoughRightToCutBrakes(x)) -> -CheatingOnCar(x))", "all x.((Person(x) & CheatingOnYou(x)) -> -GoodEnoughRightToCutBrakes(x))", "all x y.((Person(x) & Car(y) & CheatingOn(x,y)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x.((CheatingOnYou(x) & -GoodEnoughRightToCutBrakesOnCar(x)) -> -GoodEnoughRightToCutBrakesOnCar(x))", "all x.((CheatsOn(x) & Car(y)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x y.((CheatingOn(x) & Car(y)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x y.((CheatsOn(x,y) & Car(y)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x.(CheatsOn(x) -> -GoodEnoughRightToCutBrakes(x))", "all x y z.((CheatingOn(x,y) & Car(z)) -> -GoodEnoughRightToCutBrakes(x,z))", "(CheatingOnYou(Person(Person) & -GoodEnoughRightToCutBrakes(Person,Car))", "all x.(CheatingOnYou(x) -> -GoodEnoughRightToCutBrakesOnCar(x))", "exists x.(CheatsOn(x,y) & Car(y) & -GoodEnoughRightToCutBrakes(x,y))", "all x y.((Person(x) & CheatingOn(x,y)) -> -GoodEnoughRightToCutBrakesOnCar(x,y))", "exists x.(CheatingOn(x) & -GoodEnoughRightToCutBrakes(x))", "all x y.((CheatsOn(x,y) & Car(y)) -> -GoodEnoughRightToCutBrakes(x,y))"]}
{"id": "enwn_validation_691", "nl": "Dita should not have cut the brakes on Martin's car.", "fol": "", "prediction": ["Dita should not have cut brakes on Martin's car.", "all x.((Dita(x) & MartinCar(x)) -> -CutBrakes(x))", "all x y.((Dita(x) & MartinCar(y)) -> -CutBrakes(x,y))", "(-CutBrakesOnMartinCar(Dita))", "-(Dita(d) & CutBrakes(d) & MartinCar(d)))", "Martin's car should not have been cut by Dita.", "Dita should not have cut the brakes on Martin's car.", "Dita should not have cut brakes on Martin's car.", "(-CutsBrakesOnMartinCar(Dita))", "all x.((Dita(x) & MartinCar(x)) -> -CutsBrakes(x,MartinCar))", "all x y.((Dita(x) & Martin(y)) -> -CutsBrakesOn(x,y))", "Dita shouldn't have cut brakes on Martin's car.", "-(Dita(d) & CutBrakesOnMartinsCar(d))", "(-CutBrakesOnMartinCar(Dita,Martin))", "Dita should not have cut brakes on Martin's car.", "Dita should not have cut the brakes on Martin's car."]}
{"id": "enwn_validation_692", "nl": "It's okay to break rules that aren't important.", "fol": "", "prediction": ["all x.((Rules(x) & -Important(x)) -> OKToBreak(x))", "all x y.((Rule(x) & Rule(y) & -Important(y)) -> OKToBreak(x,y))", "all x.((Rules(x) & -Important(x)) -> OK(x))", "(all x.((Rule(x) & -Important(x)) -> Breaks(x,y)))", "exists x.(Rules(x) & -Important(x))", "all x y.((Rules(x) & -Important(y)) -> OKToBreak(x,y))", "all x.((Rules(x) & -Important(x)) -> Okay(x))", "exists x.(Rule(x) & Breaks(x,y) & -Important(y))", "exists x.(BreakRights(x) & -Important(x))", "all x y.((Rule(x) & Rule(y) & -Important(y)) -> Okay(x,y))", "all x.((Rules(x) & -Important(x)) -> OKToBreak(x))", "all x y.((Rule(x) & Rule(y) & -Important(x,y)) -> OK(x,y))", "exists x.(Rules(x) & -Important(x))", "all x.((Rule(x) & -Important(x)) -> Okay(x))", "all x y.((Rules(x) & Rules(y) & -Important(y)) -> OKToBreak(x,y))", "exists x.(Rule(x) & Breaks(x,nonimportant))"]}
{"id": "enwn_validation_693", "nl": "Movie theater rules say that no outside food is allowed.", "fol": "", "prediction": ["all x.(MovieTheaterRule(x) -> -OutsideFood(x))", "all x y.((MovieTheaterRule(x) & OutsideFood(y)) -> -Allowed(x,y))", "all x.((MovieTheaterRules(x) & -OutsideFood(x)) -> -Allowed(x))", "all x.(MovieTheaterRules(x) -> -OutsideFoodAtleast(x))", "all x y.((MovieTheaterRule(x) & OutsideFood(y)) -> -Allowed(x,y))", "all x.((MovieTheaterRule(x) & OutsideFood(x)) -> -Allowed(x))", "all x.(MovieTheaterRule(x) -> -OutsideFoodAllowed(x))", "(all x.(MovieTheater(x) -> -OutsideFood(x)))", "all x y.((MovieTheaterRules(x) & OutsideFood(y)) -> -Attention(x,y))", "(all x.(MovieTheaterRule(x) -> NoOutsideFood(x)))", "all x.(MovieTheaterRules(x) -> -OutsideFoodAdmitted(x))", "all x y.((MovieTheaterRule(x) & OutsideFood(y)) -> -Allowed(x,y))", "exists x.(MovieTheaterRule(x) & -ExternalFood(x))", "all x y.((MovieTheaterRules(x) & OutsideFood(y)) -> -Admitted(x,y))", "exists x.(MovieTheaterRule(x) & -ExternalFood(x))", "exists x.(MovieTheaterRules(x) & -OutdoorFoodLeads(x))"]}
{"id": "enwn_validation_694", "nl": "Rules about not bringing outside food into establishments exist to increase on-site concession sales.", "fol": "", "prediction": ["all x.((Rule(x) & -BringsOutsideFood(x)) -> IncreasesOnSiteConcessionSales(x))", "all x.((Rules(x) & -BringingOutsideFood(x)) -> IncreasesOnSiteConcessionSales(x))", "all x y.((Rule(x) & -IncreasesConcessionSales(x)) -> -IncreasesConcessionSales(x,y))", "exists to increase onSiteConcessionSales(x) & -BringsOutsideFood(x))", "all x y.((Rule(x) & -BringingOutsideFood(x,y)) -> IncreasesOnSiteConcessionSales(x))", "exists x.(Rule(x) & -BringsOutsideFood(x) & IncreasesOnSiteConcessionSales(x))", "exists x.(RulesAboutNotBringingOutsideFood(x) & IncreasesOnSiteConcessionSales(x))", "all x.((Rule(x) & -IncreasesConcessionSales(x)) -> OutsideFood(x))", "all x y z.((Rule(x) & -Installation(y) & OutsideFood(z) & -Installation(z)) -> IncreasesOnSiteConcessionSales(x,y,z))", "exists to increase onSiteConcessionSales(x) & -BringsOutsideFoodIntoEstablishments(x))", "(exists x.(Rule(x) & -BringingOutsideFood(x)) & IncreasesOnSiteConcessionSales(x))", "all x y.((Rule(x) & -BringsOutsideFood(x,y)) -> IncreasesOnSiteConcessionSales(x))", "all x y.((Rule(x) & -IncreasesConcessionSales(y)) -> OutsideFood(x,y))", "all x.((Rule(x) & -BringsOutsideFood(x) & Establishments(x)) -> IncreasesOnSiteConcessionSales(x))", "exists to increase on-siteConcessionSales(r) & -BringOutsideFoodIntoEstablishments(r))", "all x.((Rules(x) & -BringingOutsideFood(x)) -> IncreasesOnSiteConcessionSales(x))"]}
{"id": "enwn_validation_695", "nl": "Increasing on-site concession sales isn't important.", "fol": "", "prediction": ["all x.((ConcessionSales(x) & IncreasedOnSite(x)) -> -Important(x))", "all x.((OnSiteConcessionSales(x) & -Increased(x)) -> -Influential(x))", "IncreasingOnSiteConcessionSales(x) -Important(x))", "all x.((IncreasedOnSiteConcessionSales(x) & -Important(x)) -> -Important(x))", "all x.((ConcessionSales(x) & Increased(x)) -> -Important(x))", "all x.(IncreasedOnSiteConcessionSales(x) -> -Important(x))", "IncreasingOnSiteConcessionSales(x) -> -Important(x))", "all x.((OnSiteConcessionSales(x) & -Increased(x)) -> -Important(x))", "all x.(ConcessionSales(x) -> -Important(x))", "all x y.((ConcessionSales(x) & OnSite(y) & Increased(x,y)) -> -Important(x))", "IncreasingOnSiteConcessionSales(x) -Important(x))", "(IncreasesOnSiteConcessionSales(x) -> -Important(x))", "all x.(IncreasesOnSiteConcessionSales(x) -> -Important(x))", "all x.((ConcessionSales(x) & IncreasedOnSite(x)) -> -Important(x))", "Increasing onSiteConcessionSales(x) -> -Important(x))", "All x.(ConcessionSales(x) -> -Important(x))"]}
{"id": "enwn_validation_696", "nl": "Sam broke the theater rules by bringing chips into the movie.", "fol": "", "prediction": ["all x y.((Sam(x) & Movie(y)) -> BreaksTheaterRules(x,y))", "all x.((Sam(x) & BringsChips(x)) -> BreaksTheaterRules(x))", "(BreaksTheaterRules(Sam) & BringsChipsIntoMovie(Sam))", "all x y z.((Sam(x) & Theater(y) & Chip(z)) -> BreaksRules(x,y,z))", "all x y.((Sam(x) & Movie(y) & BringsChips(x,y)) -> BreaksTheaterRules(x,y))", "all x y.((Sam(x) & Movie(y)) -> BreaksTheaterRules(x,y))", "all x.((Sam(x) & BreaksTheaterRules(x)) -> BringsChipsIntoMovie(x))", "all x.((Sam(x) & BringsChips(x)) -> BreaksTheaterRules(x))", "(BreaksTheaterRules(Sam) & BringsChipsIntoMovie(Sam))", "(BreaksTheaterRulesByBringingChipsIntoMovie(Sam))", "all x y z.((Sam(x) & TheaterRules(y) & Chips(z) & Movie(z)) -> Breaks(x,y,z))", "(BreakingTheaterRules(Sam,Chips))", "all x.((Sam(x) & BringsChipsIntoMovie(x)) -> BreaksTheaterRules(x))", "all x y.((Sam(x) & TheaterRules(y)) -> Breaks(x,y))", "(BreaksTheaterRules(Sam,Chips))", "all x.((Sam(x) & BreaksTheaterRules(x)) -> BringsChipsIntoMovie(x))"]}
{"id": "enwn_validation_697", "nl": "Rules about not bringing food into establishments aren't important.", "fol": "", "prediction": ["all x.((Rule(x) & -BringingFoodIntoEstablishments(x)) -> -Important(x))", "all x.((Rule(x) & -BringsFoodIntoEstablishments(x)) -> -Important(x))", "all x y.((Rule(x) & Food(y) & -In Establishment(x,y)) -> -Important(x))", "-Important(rules(rules)", "all x.((Rule(x) & -BringingFoodIntoEstablishments(x)) -> -Important(x))", "all x.((Rules(x) & -BringingFoodIntoEtablissements(x)) -> -Important(x))", "(all x.((Rule(x) & -BringsFoodIntoEstablishments(x)) -> -Important(x))", "all x y.((Rule(x) & Establishment(y) & -BringingFoodInto(x,y)) -> -Important(x))", "all x.((Rights(x) & -BringingFoodIntoEstablishments(x)) -> -Important(x))", "(all x.((Rule(x) & -BringingFoodIntoEstablishments(x)) -> -Important(x))", "-(ImportantRights(i) & -BringingFoodIntoEtablissements(i)))", "all x.((Rule(x) & -BringsFoodIntoEstablishments(x)) -> -Important(x))", "exists x.(Rule(x) & -BringsFoodInto(x,Establishments))", "all x y.((Rule(x) & -BringingFoodInto(x,y)) -> -Important(x))", "all x.((Rule(x) & -IncorporatesFood(x)) -> -Important(x))", "all x.((Rules(x) & -BringingFoodIntoEstablishments(x)) -> -Important(x))"]}
{"id": "enwn_validation_698", "nl": "The movie theater rule that says no outside food is allowed is not important.", "fol": "", "prediction": ["all x.((MovieTheaterRight(x) & -OutsideFood(x)) -> -Important(x))", "all x.((MovieTheaterRule(x) & -OutsideFoodAtleast(x)) -> -Important(x))", "all x.((MovieTheaterR\u00e8glement(x) & -OutsideFood(x)) -> -Important(x))", "all x y.((MovieTheaterR\u00e8glement(x) & -OutsideFood(y)) -> -Important(x))", "all x y.((MovieTheaterRule(x) & OutsideFood(y) & -Alerts(x,y)) -> -Important(x))", "all x.((MovieTheaterRichthon(x) & -OutsideFoodAtleast(x)) -> -Important(x))", "(AllowsOutsideFood(MovieTheater) -> -Important(MovieTheaterRule))", "all x.((MovieTheaterRule(x) & -OutsideFood(x)) -> -Important(x))", "(all x.((MovieTheaterRight(x) & -OutsideFood(x)) -> -Important(x))", "all x y.((MovieTheaterRight(x) & OutsideFood(y) & -Attention(x,y)) -> -Important(x))", "exists x.(MovieTheaterRule(x) & -OutsideFoodAdmitted(x))", "all x.((MovieTheaterRule(x) & SaysNoOutsideFood(x)) -> -Important(x))", "all x.((MovieTheaterRig(x) & -OutsideFoodAtleast(x)) -> -Important(x))", "all x y.((MovieTheaterRule(x) & OutsideFood(y) & -Allowed(x,y)) -> -Important(x))", "exists x.(MovieTheaterR\u00e8glement(x) & -ExternalFoodAdmission(x))", "all x.((MovieTheaterRule(x) & SaysNoOutsideFood(x)) -> -Important(x))"]}
{"id": "enwn_validation_699", "nl": "It's okay to break the movie theater rule that says no outside food is allowed.", "fol": "", "prediction": ["all x.((MovieTheaterRule(x) & -OutsideFood(x)) -> Okay(x))", "all x y.((MovieTheaterRule(x) & OutsideFood(y) & Breaks(x,y)) -> OK(x))", "all x.((MovieTheaterRight(x) & -OutsideFood(x)) -> OkayToBreak(x))", "exists x.(MovieTheaterRule(x) & -OutsideFoodAtLarge(x))", "all x.((MovieTheaterRule(x) & -OutsideFood(x)) -> OKToBreak(x))", "(BreakMovieTheaterRule(x) & SaysNoOutsideFood(x))", "all x y.((MovieTheaterRight(x) & OutsideFood(y)) -> OKToBreak(x,y))", "exists x.(MovieTheaterRule(x) & -OutsideFoodAgreed(x))", "all x.((MovieTheaterRule(x) & NoOutsideFood(x)) -> OkayToBreak(x))", "all x y.((MovieTheaterRule(x) & OutsideFood(y) & Breaks(x,y)) -> Okay(x))", "all x y.((MovieTheaterRule(x) & MovieTheater(y) & -OutsideFood(y)) -> OkayToBreak(x,y))", "all x.((MovieTheaterRight(x) & -OutsideFood(x)) -> Okay(x))", "exists x.(MovieTheaterRight(x) & -OutsideFoodAllowed(x))", "exists x.(MovieTheaterRichthon(x) & -OutsideFoodAtLarge(x))", "exists x.(MovieTheaterRule(x) & -ExternalFoodAgreement(x))", "all x y.((MovieTheaterRight(x) & OutsideFood(y)) -> OkayToBreak(x,y))"]}
{"id": "enwn_validation_700", "nl": "It was okay for Sam to take the chips into the theater.", "fol": "", "prediction": ["all x.((Sam(x) & TakesChipsIntoTheater(x)) -> OK(x))", "all x y.((Sam(x) & Chips(y)) -> OkayToTakeIntoTheater(x,y))", "(AlwaysTakesChipsIntoTheater(Sam) -> Okay(Sam,Sam))", "all x y.((Sam(x) & Theater(y)) -> TakesChipsInto(x,y))", "(All x.((Sam(x) & TakesChipsIntoTheater(x)) -> OK(x))", "all x y z.((Sam(x) & Chips(y) & Theater(z)) -> OkayToTakeInto(x,y,z))", "all x.((Sam(x) & TakesChipsIntoTheater(x)) -> Okay(x))", "(AlwaysAlwaysAlwaysAlways(Sam,Sam,Chips) & InTheater(Sam,Sam))", "-(AlwaysTakesChipsIntoTheater(Sam) & OkayToTakeChipsIntoTheater(Sam))", "all x.((Sam(x) & TakesChips(x)) -> OkayToThrow(x))", "all x y.((Sam(x) & Chips(y)) -> OKToTakeIntoTheater(x,y))", "All x.(AlwaysTakesChipsIntoTheater(x) -> SamTakesChipsIntoTheater(x))", "(all x.((Sam(x) & Chips(x)) -> OkayToTakeIntoTheater(x))", "all x y.((Sam(x) & Theater(y)) -> TakesChips(x,y))", "All x.((Sam(x) & TakesChipsIntoTheater(x)) -> OK(x))", "All x.((Sam(x) & Chips(x)) -> OkayToTakeIntoTheater(x))"]}
{"id": "enwn_validation_701", "nl": "A physical response to a remark is escalation.", "fol": "", "prediction": ["all x.((Remark(x) & PhysicalResponse(x)) -> Escalation(x))", "all x.(Response(x) -> Escalation(x))", "all x y.((Remark(x) & PhysicalResponse(y)) -> Escalation(x))", "all x.((PhysicalResponse(x) & Remark(x)) -> Escalation(x))", "all x y.((PhysicalResponse(x) & Remark(y)) -> Escalation(x,y))", "all x y z.((PhysicalResponse(x) & Remark(y) & Remark(z)) -> Escalation(x,y,z))", "all x y.((Remark(x) & PhysicalResponse(y)) -> Escalation(x,y))", "all x.((Remark(x) & PhysicalResponse(x)) -> Escalation(x))", "all x.(Response(x) -> Escalation(x))", "all x y.((Remark(x) & Remark(y)) -> Escalation(x))", "all x y.((PhysicalResponse(x) & Remark(y)) -> Escalation(x,y))", "all x.(ResponseToRemark(x) -> Escalation(x))", "exists x.(PhysicalResponse(x) & Remark(x) & Escalation(x))", "all x.((PhysicalResponse(x) & Remark(x)) -> Escalation(x))", "all x y.((Remark(x) & PhysicalResponse(y) & Remark(y)) -> Escalation(x))", "exists x.(PhysicalResponse(x) & Remark(x) & Escalation(x))"]}
{"id": "enwn_validation_702", "nl": "Luis dumped his soda on the guy sitting in front of him because the guy made a snide remark about Ravens fans.", "fol": "", "prediction": ["all x y.((Luis(x) & Guy(y) & SittingInFrontOf(y,x)) -> DumpedSoda(x,y))", "all x y z.((Luis(x) & Guy(y) & RavensFan(z)) -> DumpedSodaOn(x,y,z))", "(SittingInFrontOfGuy(Luis,SnideRemark) -> DumpedSodaOn(Luis,SnideRemark))", "all x.((Luis(x) & Guy(y) & SittingInFrontOf(y,x)) -> DumpedSodaOn(x,y))", "(SittingInFrontOfGuy(Luis,RavensFans) -> DumpedSoda(Luis,SittingInFrontOfGuy,SnideRemark))", "(DumpedSodaOnGuySittingInFrontOfGuy(Luis) & MadeSnideRemarkAboutRavensFans(Luis))", "all x y.((Luis(x) & Guy(y) & SittingInFrontOf(y,x)) -> DumpedSodaOn(x,y))", "all x y z.((Luis(x) & Guy(y) & RavensFan(z)) -> DumpedSodaOn(x,y,z))", "all x y z.((Luis(x) & Guy(y) & RavensFans(z) & SnideRemark(y,z)) -> DumpedSodaOn(x,y,z))", "(SittingInFrontOfGuy(Luis,SnideRemark,RavensFans) -> DumpedSoda(Luis,SnideRemark,SnideRemark))", "all x.((Luis(x) & Guy(y) & SittingInFrontOf(y,x)) -> DumpedSodaForRemark(x,y))", "all x.((LuisDumpedSodaOn(x) & GuySittingInFrontOf(x,y) & RavensFansRemark(y)) -> SnoddeRemark(x,y))", "all x y z.((Luis(x) & Guy(y) & RavensFan(z) & MadeSnideRemark(y,z)) -> DumpedSodaOn(x,y,z))", "all x y.((Luis(x) & Guy(y) & SittingInFrontOf(x,y)) -> DumpedSoda(x,y))", "all x y.((Luis(x) & Guy(y) & SittingInFrontOf(y,x)) -> DumpedSodaForRemark(x,y))", "all x y.((Luis(x) & Guy(y) & SatInFrontOf(y,x) & RavensFans(y)) -> DumpedSoda(x,y))"]}
{"id": "enwn_validation_703", "nl": "You shouldn't escalate conflicts.", "fol": "", "prediction": ["all x.((Conflict(x) & -Inescalating(x)) -> -(Inescalating(x) -> -Inescalating(x)))", "all x.(Conflict(x) -> -Escalation(x))", "all x.((Conflict(x) & -Escalation(x)) -> -Emergency(x))", "all x y.((Conflict(x) & Conflict(y)) -> -Escalation(x,y))", "all x.(Conflict(x) -> -Erupt(x))", "-(InescalatingConflicts(x))", "-EscalateConflicts(x)", "all x.((Conflict(x) & -Inescalate(x)) -> -Inescalate(x))", "-Escalation(x)", "all x.((Conflict(x) & -Escalation(x)) -> -(Escalation(x) & Conflict(x))))", "-EscalateCircuses(x)", "all x.(Conflict(x) -> -Escalate(x))", "-InescalatingConflicts(x)", "(-Inescalate(x))", "all x.(Conflict(x) -> -Inescalating(x))", "all x.((Conflict(x) & -Inescalating(x)) -> -Inescalating(x))"]}
{"id": "enwn_validation_704", "nl": "Luis escalated the situation by dumping his soda on the guy.", "fol": "", "prediction": ["all x y.((Luis(x) & Guy(y)) -> DumpedSodaOn(x,y))", "Luis escalated the situation by DumpingSodaOnGuy(Luis)", "Luis escalated the situation by DumpingSodaOnGuy(Luis,DumpingSoda,DumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDumpingDum,DumpingDum(Luis,DumpingDum,DumpingDumpingDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDumsDums", "all x y z.((Luis(x) & Soda(y) & Guy(z)) -> DumpedOn(x,y,z))", "-LuisescalatedSituationByDumpingSodaOnGuy(Luis)", "-(LuisEscalatedSituation(Luis,Soda) & DumpedOnGuy(Luis,Soda)))", "Luis escalated the situation by dumpingSodaOnGuy(luis,y))", "all x y.((Luis(x) & Guy(y)) -> DumpedSoda(x,y))", "-EscalatedSituation(Luis,DumpingSodaOnGuy)", "(Employed(Luis,DumpingSoda))", "Luis escalated the situation by DumpingSodaOnGuy(luis,y))", "(EscalatedSituation(Luis,DumpingSoda,Guy))", "all x y z.((Luis(x) & Soda(y) & Guy(z)) -> DumpedOn(x,y,z))", "Luis escalated the situation by dumpedSodaOnGuy(Luis)", "all x y.((Luis(x) & Guy(y)) -> DumpedSodaOn(x,y))", "Luis escalated the situation by dumpingSodaOnGuy(luis,y))"]}
{"id": "enwn_validation_705", "nl": "Luis shouldn't have dumped his soda on the guy.", "fol": "", "prediction": ["all x y.((Luis(x) & Guy(y)) -> -DumpedSodaOn(x,y))", "all x.((Luis(x) & DumpedSodaOn(x)) -> -DumpedSoda(x))", "-DumpedSodaOn(Luis)", "Luis shouldn't have dumpedSodaOnGuy(luis)", "(DumpedSodaOnLuis(Luis) -> -DumpedSodaOnLuis(Luis))", "all x y.((Luis(x) & Soda(y)) -> -DumpedOn(x,y))", "(DumpedSodaOn(Luis) -> -DumpedSodaOn(Luis))", "(Luis shouldn't have dumpedSodaOnGuy(Luis))", "Luis should've dumped his soda on the guy.", "Luis shouldn't have dumpedSodaOnGuy(Luis)", "-DumpedSodaOn(Luis)", "all x.((Luis(x) & DumpedSodaOn(x)) -> -DumpedSodaOn(x))", "all x.((Luis(x) & Guy(y)) -> -DumpedSodaOn(x,y))", "all x y.((Luis(x) & Guy(y)) -> -DumpedSodaOn(x,y))", "-DumpedSodaOn(Luis)", "-DumpedSodaOn(Luis,Guy)"]}
{"id": "enwn_validation_706", "nl": "Esme copied a section of the Wikipedia article on Thomas Jefferson to put in her school report.", "fol": "", "prediction": ["all x y.((Esme(x) & WikipediaArticle(y) & ThomasJefferson(y)) -> Copy(x,y))", "all x.((Esme(x) & WikipediaArticle(x) & ThomasJefferson(x)) -> Copy(x,y))", "all x.(Esme(x) -> (CopiesSectionOfWikipediaArticleOnThomasJefferson(x) & PutsInSchoolReport(x)))", "(CopiesSectionOfWikipediaArticleOnTomTomJefferson(Esme) & PutsInSchoolReport(Esme))", "all x y z.((Esme(x) & WikipediaArticle(y) & ThomasJefferson(z)) -> Copy(x,y,z))", "(CopysSectionOfWikipediaArticleOnThomasJefferson(Esme,ThanSchoolReport))", "(CopiesSectionOfWikipediaArticleOnThomasJefferson(Esme) & PutsInSchoolReport(Esme))", "(CreatedSectionOfWikipediaArticleOnTomTomJefferson(Esme) & PutsInSchoolReport(Esme))", "(CopiesWikipediaArticleOnTomJefferson(Esme,ThanJackson) & InSchoolReport(Esme,ThanJefferson))", "all x y.((Esme(x) & WikipediaArticle(y)) -> Copy(x,y))", "all x.((Esme(x) & WikipediaArticle(x,ThomsonJefferson)) -> Copy(x,ThomsonJefferson))", "all x.(Esme(x) -> (CopiesSectionOfWikipediaArticleOnTomJefferson(x) & PutsInSchoolReport(x)))", "all x y z.((Esme(x) & WikipediaArticle(y) & ThomasJefferson(z) & SchoolReport(x,y,z)) -> Copy(x,y,z))", "(CopysSectionOfWikipediaArticleOnTomTomJefferson(Esme,ThanSchoolReport))", "all x y.((Esme(x) & Wikipedia(y) & ThomasJefferson(y)) -> Copy(x,y))", "exists x.(Esme(x) & WikipediaArticle(x) & ThomasJefferson(x) & Copy(x,y))"]}
{"id": "enwn_validation_707", "nl": "If you copy something without attribution, you're representing it as your own work.", "fol": "", "prediction": ["all x.((Copy(x) & -Attribution(x)) -> RepresentsOwnWork(x))", "all x y.((Copy(x) & Work(y) & -Attribution(x)) -> RepresentsAsOwnWork(x,y))", "all x.((Copys(x) & -Attribution(x)) -> RepresentsOwnWork(x))", "all x.((Copies(x) & -Attribution(x)) -> RepresentsOwnWork(x))", "all x y.((Copy(x) & Copy(x,y) & -Attribution(x)) -> RepresentsWork(x,y))", "all x.((Copy(x) & -Attribution(x)) -> RepresentsOwnWork(x))", "all x y z.((Copy(x) & Work(y) & Work(z) & -Attribution(x,y)) -> RepresentsAsOwn(x,z))", "all x y.((Copy(x) & -Attribution(x)) -> RepresentsOwnWork(y,x))", "(all x.((Copy(x) & -Attribution(x)) -> OwnWork(x)))", "all x.((CopyWithoutAttribution(x) & CopyWithoutAttribution(x)) -> RepresentsOwnWork(x))", "all x y.((Copy(x,y) & CopyWithoutAttribution(x)) -> RepresentsOwnWork(x,y))", "all x y.((Copy(x) & Work(y) & -Attribution(x)) -> RepresentsAsOwn(x,y))", "all x.((Copies(x) & -Attribution(x)) -> RepresentsOwnWork(x))", "all x.(CopysWithoutAttribution(x) -> RepresentsOwnWork(x))", "(all x.((Copy(x) & -Attribution(x)) -> OwnWork(x)))", "all x.((Copy(x) & -Attribution(x)) -> ReplacingOwnWork(x))"]}
{"id": "enwn_validation_708", "nl": "Esme didn't attribute the copied section.", "fol": "", "prediction": ["all x.(Esme(x) -> -AttributesCopySection(x))", "Esme didn't attributeCopySection(esme)", "Esme -AttributesCopySection(esme,e))", "(-AttributesCopy(Esme))", "-(Esme(e) & CopyedSection(e))", "all x.((Esme(x) & CopyedSection(x)) -> -Attributes(x,copyedSection))", "all x.(Esme(x) -> -AttributesCopy(x))", "Esme n'attributesCopySection(n)", "Esme -AttributesCopy(Esme,CopySection))", "(-AttributesCopy(Esme))", "-(Esme(e) & CopyedSection(e))", "-(Esme(e) & CopiesSection(e))", "(Esme, not copiedSection(e))", "all x.(Esme(x) -> -AttributesCopySection(x))", "Esme didn't attributeCopySection(esme,copying)", "(-AttributesCopiedSection(Esme))"]}
{"id": "enwn_validation_709", "nl": "Copying someone else's writing and representing it as your own work is plagiarism.", "fol": "", "prediction": ["all x y.((Copy(x,y) & Writing(y) & Replacing(x,y)) -> Plagiarism(x))", "all x.((CopiesWriting(x) & RepresentsAsOwnWork(x)) -> Plagiarism(x))", "all x y.((Copies(x,y) & Writing(y) & Replacing(x,y)) -> Plagiarism(x))", "all x.((CopysWriting(x) & RepresentsWork(x)) -> Plagiarism(x))", "all x y.((Copys(x,y) & Writing(y) & Replacing(x,y)) -> Plagiarism(x))", "all x y z.((Copy(x,y) & Writing(y) & Writing(z) & Replacing(x,z)) -> Plagiarism(x))", "all x y.((CopiesWriting(x,y) & Copying(x,y) & RepresentsWork(x,y)) -> Plagiarism(x))", "all x.((CopiesWriting(x) & RepresentsWork(x)) -> Plagiarism(x))", "(Plagiarism(copyingWriting(x) & ReplacingWork(x))", "all x.(CopiesWriting(x) & RepresentsAsOwnWork(x) -> Plagiarism(x))", "all x.((Copying(x) & Replacing(x,y)) -> Plagiarism(x))", "(Plagiarism(copyingWriting(x) & RepresentsAsOwnWork(x))", "all x.((CopysWriting(x) & RepelsAsOwnWork(x)) -> Plagiarism(x))", "all x y.((Copy(x,y) & Writing(y) & Replacing(x,y)) -> Plagiarism(x))", "all x y z.((Copies(x,y) & Writing(z) & Replacing(x,z)) -> Plagiarism(x))", "all x.((CopiesWriting(x) & ReplacingWork(x)) -> Plagiarism(x))"]}
{"id": "enwn_validation_710", "nl": "Plagiarism is wrong.", "fol": "", "prediction": ["all x.(Plagiarism(x) -> Wrong(x))", "all x.(Plagiarism(x) -> Worst(x))", "Plagiarism is Wrong.", "all x.((Plagiarism(x) & Wrong(x)) -> Plagiarism(x))", "All x y.((Plagiarism(x) & Right(y)) -> Plagiarism(x))", "all x.(Plagiarism(x) -> Wrong(x))", "all x.(Plagiarism(x) -> Irresponsible(x))", "all x.((Plagiarism(x) & Irresponsible(x)) -> Plagiarism(x))", "Plagiarism is Wrong.", "All x y.((Plagiarism(x) & Irresponsible(y)) -> Plagiarism(x))", "(IsPlagiarism(i) & IsWrong(i))", "All x y.((Plagiarism(x) & Company(y)) -> Wrong(x))", "all x.(Plagiarism(x) -> Worst(x))", "all x.(Plagiarism(x) -> Irresponsible(x))", "all x.(Plagiarism(x) -> Wrong(x))", "all x.(Plagiarism(x) -> Worst(x))"]}
{"id": "enwn_validation_711", "nl": "Esme represented the copied section as her own work.", "fol": "", "prediction": ["all x y.((Esme(x) & CopycatSection(y)) -> ReputedAsOwnWork(x,y))", "all x.(Esme(x) -> ReputedCopySection(x))", "Esme represented the copiedSectionAsOwnWork(Esme,CopiestSection))", "(Represented(Esme,CopieseSection) & OwnWork(Esme,CopieseSection))", "(RepresentedCopiedSection(Esme) & OwnWork(Esme))", "Esme representedCopySectionAsOwnWork(Esme,CopySection,Esme)", "(RepresentsCopySection(Esme) & OwnWork(Esme))", "Esme representedCopiedSectionAsOwnWork(e) & -CopySection(e) & -CopySection(e))", "all x y.((Esme(x) & CopyedSection(y)) -> ReputedAsOwnWork(x,y))", "all x.(Esme(x) -> ReputedCopiedSection(x))", "(RepresentedCopySectionAsOwnWork(Esme,CopySection))", "Esme represented the copiedSectionAsOwnWork(esme,copying))", "all x.(Esme(x) -> ReputedCopiesAsOwnWork(x))", "all x y.((Esme(x) & CopycatSection(y)) -> ReputedAsOwnWork(x,y))", "Esme represented the copiedSectionAsOwnWork(Esme)", "All x.(Esme(x) -> ReputedCopy(x))"]}
{"id": "enwn_validation_712", "nl": "Esme copied someone else's writing from Wikipedia and represented it as her own work.", "fol": "", "prediction": ["all x y.((Esme(x) & Writing(y)) -> (CopiesFromWikipedia(x,y) & RepresentsAsOwnWork(x,y)))", "all x y z.((Esme(x) & Writing(y) & Wikipedia(z)) -> (Copies(x,y) & Represents(x,z)))", "all x.(Esme(x) -> (CopiesWriting(x,y) & RepresentsWork(x,z)))", "(CreatedWriting(Esme,Wikipedia) & RepresentedAsOwnWork(Esme,Wikipedia))", "(CopiesWriting(Esme,Wikipedia) & RepresentsAsOwnWork(Esme,Wikipedia))", "(CopysWriting(Esme,Wikipedia) & RepresentsWork(Esme,Wikipedia))", "(CreatedWritingFromWikipedia(Esme,Wikipedia) & RepresentedAsOwnWork(Esme,Wikipedia))", "Esme copied someone else's writing from Wikipedia and represented it as her own work.", "(CopiesWriting(Esme) & Represents(Esme,Wikipedia))", "all x y.((Esme(x) & Writing(y)) -> (Copies(x,y) & Represents(x,y)))", "all x y z.((Esme(x) & Writing(y) & Wikipedia(z)) -> (CopiesFrom(x,y,z) & RepresentsAsOwnWork(x,y)))", "(CopysWriting(Esme) & RepresentsAsOwnWork(Esme,Wikipedia))", "exists x.(Esme(x) & Copy(x,y) & Writing(y) & FromWikipedia(x,y) & Represents(x,y))", "all x.(Esme(x) -> (CopiesWriting(x,y) & RepresentsAsOwnWork(x,z)))", "all x y.((Esme(x) & Writer(y)) -> (CopiesFromWikipedia(x,y) & RepresentsAsOwnWork(x,y)))", "exists x.(Esme(x) & CopyedWritingFromWikipedia(x) & RepresentedAsOwnWork(x))"]}
{"id": "enwn_validation_713", "nl": "Copying someone else's writing and representing it as your own work is wrong.", "fol": "", "prediction": ["all x y.((Copy(x,y) & Writing(y) & Replacing(x,y)) -> Wrong(x))", "all x.((CopysWriting(x) & RepelsAsOwnWork(x)) -> Wrong(x))", "all x y.((Copy(x,y) & Writer(y) & Replacing(x,y)) -> Wrong(x))", "all x.((CopiesWriting(x) & RepresentsWork(x)) -> Wrong(x))", "all x y.((Copies(x,y) & Writing(y) & Replacing(x,y)) -> Wrong(x))", "(CopyingWriting(x) & ReplacingWork(x)) -> Wrong(x))", "all x y z.((Copy(x,y) & Writing(z) & Replacing(x,z)) -> IsWrong(x))", "all x y.((CopysWriting(x) & CopysWriting(y) & RepresentsWork(x,y)) -> Wrong(x))", "all x.((Copying(x) & Replacing(x,y)) -> IsWrong(x))", "all x.(CopiesWriting(x) -> (IsWrong(x) & RepresentsWork(x,y)))", "all x.((CopiesWriting(x) & RepelsAsOwnWork(x)) -> Wrong(x))", "all x y z.((Copy(x,y) & Writing(y) & Writing(z) & Replacing(x,z)) -> Wrong(x))", "all x y.((CopiesWriting(x,y) & Writing(y)) -> (IsWrong(x,y) & RepelsAsOwnWork(x,y)))", "all x.(CopysWriting(x) -> (RepresentsWork(x,y) & CopysWriting(x,z) & OwnWork(x,z)))", "exists x.(Copying(x) & Replacing(x,y) & Writing(y) & WorksAsOwn(x,y))", "All x.(CopiesWriting(x) -> (RepresentsOtherWork(x) & IsWrong(x)))"]}
{"id": "enwn_validation_714", "nl": "Esme shouldn't have copied from Wikipedia without attributing the copied section.", "fol": "", "prediction": ["all x.(Esme(x) -> -CopiesFromWikipedia(x))", "all x.((Esme(x) & Copy(x,y) & Copy(y)) -> -CopiesFromWikipedia(x,y))", "all x y.((Esme(x) & Wikipedia(y)) -> -Copies(x,y))", "(-CopyFromWikipedia(Esme,Wikipedia) & AttributesCopyFromWikipedia(Esme,Wikipedia))", "(-CopysFromWikipedia(Esme) & AttributesCopy(Esme,Wikipedia))", "all x y.((Esme(x) & Wikipedia(y) & AttributesCopy(x,y)) -> -CopiesFrom(x,y))", "((Esme(e) & CopyFromWikipedia(e)) -> -Copies(e,wikipedia))", "all x.((Esme(x) & CopyFromWikipedia(x)) -> -CopiesFromWikipedia(x))", "-(Esme(e) & Copy(e) & Copy(e)))", "(NecessaryCopy(Esme,Wikipedia) -> -CopyFromWikipedia(Esme,Wikipedia))", "all x.(Esme(x) -> -CopiesFromWikipedia(x))", "-(Esme(e) & Copy(e) & FromWikipedia(e) & AttributesCopy(e,e)))", "all x.(Esme(x) -> -CopysFromWikipedia(x))", "all x y.((Esme(x) & Wikipedia(y)) -> -CopiesFromWithoutAttributing(x,y))", "exists x.(Esme(x) & -CopiesFromWikipedia(x) & AttributesCopies(x,y))", "exists x.(Esme(x) & Copy(x,Wikipedia) & AttributesCopy(x,Wikipedia))"]}
{"id": "enwn_validation_715", "nl": "You shouldn't induce people to help you do bad things.", "fol": "", "prediction": ["all x.((InducesPeople(x) & -HelpsDoBadThings(x)) -> -InducesPeople(x))", "all x.((InducesPeople(x) & DoseBadThings(x)) -> -InducesPeople(x))", "all x y.((Induces(x,y) & Person(y)) -> -HelpsDoBadThings(x,y))", "-InducePeopleToHelpDoBadThings(x) -> -InducePeopleToHelpDoBadThings(x))", "all x.((Person(x) & -Induces(x,y)) -> DoBadThings(x))", "all x.((InducesPeople(x) & DoBadThings(x)) -> -InducesPeople(x))", "all x.(InducesPeopleToHelpDoBadThings(x) -> -InducesPeopleToHelpDoBadThings(x))", "all x y.((Person(x) & Person(y)) -> -InducesToHelp(x,y))", "(-InducesBadPeople(x) -> -HelpDoBadThings(x))", "(-InducesPeopleToHelpDoBadThings(x))", "all x.((InducesPeople(x) & -HelpsDoBadThings(x)) -> -InducesPeople(x))", "all x y.((InducesPeople(x) & BadThings(y)) -> -InducesPeople(x,y))", "-InducePeopleToHelpDoBadThings(x))", "all x.((Person(x) & -InducesToHelp(x,badThings)) -> -InducesToHelp(x,badThings))", "-(InducesBadThings(x) & HelpsDoBadThings(x)))", "(-InducesBadThings(x) -> -InducesBadThings(x))"]}
{"id": "enwn_validation_716", "nl": "Faking drug test results in competitive sports is cheating.", "fol": "", "prediction": ["all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))", "all x y.((FakingDrugTestResults(x) & CompetitiveSport(y)) -> Cheating(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))", "all x.(FakingDrugTestResults(x) -> Cheating(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))", "all x y.((FakingDrugTestResults(x) & CompetitiveSports(y)) -> Cheating(x,y))", "(CheatingDrugTestResults(faking) & InCompetitiveSports(faking))", "all x.(FakingDrugTestResultsInCompetitiveSports(x) -> Cheating(x))", "all x.((DrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))", "all x y.((FakingDrugTestResults(x) & CompetitiveSport(y)) -> Cheating(x,y))", "all x y.((CompetitiveSport(x) & FakingDrugTestResults(x,y)) -> Cheating(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))", "all x y.((FakingDrugTestResults(x) & CompetitiveSport(y)) -> Cheating(x))", "all x.(FakingDrugTestResults(x) -> Cheating(x))", "all x y.((FakingDrugTestResults(x) & CompetitiveSports(y)) -> Cheating(x,y))"]}
{"id": "enwn_validation_717", "nl": "Giles paid his friend for a urine sample to pass a drug test for a crew competition.", "fol": "", "prediction": ["all x y.((Giles(x) & Friends(y)) -> PaidForUrineSample(x,y))", "all x y z.((Giles(x) & Friends(y) & UrineSample(z)) -> PaidForToPassDrugTest(x,y,z))", "(PaidForUrineSample(Giles) & PassDrugTest(Giles,CrewCompetition))", "(PayedGilesForUrineSample(Giles,Friend,DrugTest) & PassedCrewCompetition(Giles,Friend))", "(PayedFriendForUrineSample(Giles) & PassDrugTest(Giles))", "all x.((Giles(x) & Friends(x)) -> PaidForUrineSample(x))", "all x y z.((Giles(x) & Friends(y) & UrineSample(z) & PassDrugTest(z)) -> PaidFor(x,y,z))", "all x y.((Giles(x) & Friends(y)) -> PaidForUrineSample(x,y))", "all x.((Giles(x) & friend(y)) -> PaidForUrineSampleToPassDrugTest(x,y))", "(PaidForUrineSample(Giles,Friend) & PassDrugTest(Giles,CrewCompetition))", "all x y.((Giles(x) & friend(y)) -> PaidForUrineSampleToPassDrugTest(x,y))", "all x.(Giles(x) -> PaidForUrineSample(x))", "all x y z.((Giles(x) & Freund(y) & UrineSample(z) & PassDrugTest(y,z)) -> PaidFor(x,y,z))", "all x y.((Giles(x) & friend(y) & PaidForUrineSample(x,y)) -> PassDrugTestForCrewCompetition(x,y))", "all x y.((Giles(x) & Friends(y)) -> PaidForUrineSampling(x,y))", "all x.((Giles(x) & Friends(x)) -> PaidForUrineSample(x))"]}
{"id": "enwn_validation_718", "nl": "Using someone else's urine to pass a drug test is faking.", "fol": "", "prediction": ["all x y.((UsesUseOtherUse(x,y) & DrugTest(y)) -> Faking(x))", "all x y.((UseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUseUs", "all x.((UsesUrine(x) & DrugTest(x)) -> Faking(x))", "all x.((UsesPerson(x) & Urine(x) & DrugTest(x)) -> Faking(x))", "all x y.((UsesUse(x,y) & DrugTest(y)) -> Faking(x))", "all x.((UsesPerson(x) & UsesUrine(x) & PassesDrugTest(x)) -> Faking(x))", "all x y.((UsePersonsUrine(x) & DrugTest(y) & Passes(x,y)) -> Faking(x))", "(UsesUseAnotherUseToPassDrugTest(x) -> Faking(x))", "all x y z.((UsesUse(x,y) & Urine(z) & DrugTest(z) & Pass(x,z)) -> Faking(x))", "all x.((UsesPersonAlter'sUrine(x) & DrugTest(x)) -> Faking(x))", "all x y.((UsesUrine(x,y) & DrugTest(y)) -> Faking(x))", "all x y z.((UsesUrine(x,y) & DrugTest(z) & UsesUrine(x,z)) -> Faking(x))", "all x y.((UsesPerson(x) & Urine(y) & DrugTest(y)) -> Faking(x))", "all x.((UsesNumberOfUrine(x) & DrugTest(x)) -> Faking(x))", "all x.((UsesUrine(x) & DrugTest(x)) -> Faking(x))", "all x.((UsesPerson'sUrine(x) & PassDrugTest(x)) -> Faking(x))"]}
{"id": "enwn_validation_719", "nl": "Faking drug test results in competitive sports is wrong.", "fol": "", "prediction": ["all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Wrong(x))", "all x y.((FakingDrugTestResults(x) & CompetitiveSport(y)) -> IsWrong(x,y))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Wrong(x))", "(FakingDrugTestResultsInCompetitiveSports(fakingdrugtest) -> Wrong(f))", "all x.(FakingDrugTestResults(x) -> Wrong(x))", "all x.((DrugTestResults(x) & CompetitiveSports(x)) -> Wrong(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Irresponsible(x))", "all x y.((FakingDrugTestResults(x) & CompetitiveSports(y)) -> IsWrong(x,y))", "all x y.((CompetitiveSport(x) & FakingDrugTestResults(x,y)) -> IsWrong(x))", "all x.(FakingDrugTestResultsInCompetitiveSports(x) -> Wrong(x))", "all x y.((FakingDrugTestResults(x) & CompetitiveSport(y)) -> Wrong(x))", "exists x.(CompetitiveSport(x) & FakingDrugTestResults(x))", "all x y.((CompetitiveSport(x) & FakingDrugTestResults(x,y)) -> Wrong(x))", "all x.(FakingDrugTestResults(x) -> Wrong(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Wrong(x))", "all x y.((FakingDrugTestResults(x) & CompetitiveSport(y)) -> IsWrong(x,y))"]}
{"id": "enwn_validation_720", "nl": "Giles paid his friend for the sample to help him fake a drug test for a crew competition.", "fol": "", "prediction": ["all x y.((Giles(x) & Friends(y)) -> PaidForSample(x,y))", "all x y z.((Giles(x) & Friends(y) & Sample(z)) -> PaidFor(x,y,z))", "(PayedForSample(Giles,Friend) & FakeDrugTest(Giles,CrewCompetition))", "all x.((Giles(x) & PaidForSample(x)) -> FakeDrugTest(x))", "all x y z.((Giles(x) & Sample(y) & Friends(z) & PaidFor(x,y,z)) -> FakeDrugTest(x,y,z))", "(PaidForSample(Giles,Friend,Giles) & FakeDrugTest(Giles,CrewCompetition))", "all x y.((Giles(x) & Friends(y)) -> PaidForSample(x,y))", "all x.(Giles(x) -> (PayedForSample(x) & HelpsFakeDrugTest(x) & CrewCompetition(x)))", "(FakeDrugTestForCrewCompetition(Giles,Giles))", "(PayedForSample(Giles) & HelpedFakeDrugTest(Giles,CrewCompetition))", "all x y.((Giles(x) & Friends(y) & PaidForSample(x,y)) -> FakeDrugTest(x,y))", "all x y.((Friend(x) & Giles(y) & PaidForSample(x,y)) -> FakeDrugTest(y,x))", "all x.((Giles(x) & PaidForSample(x)) -> FakeDrugTest(x))", "all x y z.((Giles(x) & friend(y) & Sample(z) & PaidFor(x,y,z)) -> FakeDrugTest(x,y,z))", "all x y.((Giles(x) & friend(y)) -> PaidForSample(x,y))", "all x.((Giles(x) & Friends(x)) -> PaidForSample(x))"]}
{"id": "enwn_validation_721", "nl": "Giles paid his friend for the sample to help him do something wrong.", "fol": "", "prediction": ["all x y.((Giles(x) & Friends(y)) -> PaidForSample(x,y))", "all x y z.((Giles(x) & Friends(y) & Sample(z)) -> PaidFor(x,y,z))", "(PayedForSample(Giles,Friend) & HelpedDoWrong(Giles,Friend))", "all x.((Giles(x) & Friends(x)) -> PaidForSample(x))", "all x y.((Giles(x) & Friends(y)) -> PaidForSample(x,y))", "(PayedFriendForSample(Giles,Giles) & HelpedDoWrong(Giles,Giles))", "all x y z.((Giles(x) & Friends(y) & Sample(z)) -> PaidFor(x,y,z))", "(PayedForSample(Giles,Friend) & HelpedDoWrong(Giles,Friend))", "((Giles(g) & friend(g)) -> PaidForSample(g,g,g))", "(PaidForSample(Giles,Friend) -> HelpsDoWrong(Giles,Friend))", "-(GilesPaidForSample(giles,g) & HelpsDoWrong(g,g))", "all x y z.((Giles(x) & friend(y) & Sample(z) & PaidFor(x,y,z)) -> HelpsDoWrong(x,y))", "all x.((Giles(x) & Friends(y)) -> PaidForSample(x,y))", "all x.(Giles(x) -> PaidForSample(x,y))", "all x y.((Giles(x) & friend(y)) -> PaidForSample(x,y))", "all x y.((Giles(x) & Friends(y)) -> PaidFor(x,y))"]}
{"id": "enwn_validation_722", "nl": "Giles shouldn't have paid his friend for the sample.", "fol": "", "prediction": ["all x y.((Giles(x) & Friends(y)) -> -PayedForSample(x,y))", "all x.((Giles(x) & Friends(x)) -> -PayedForSample(x))", "((Giles(g) & friend(g)) -> -PayedForSample(g,g))", "Giles shouldn't have paid for the sample(Giles)", "(-HasGilesPayedFriend(Giles,Sample))", "(-PaidForSample(Giles) -> GilesHas(Giles))", "-(Giles(g) & friend(g))", "all x y.((Giles(x) & Friends(y)) -> -PayedForSample(x,y))", "Giles shouldn't have paid for friend's sample.", "all x.((Giles(x) & Friends(x)) -> -PayedForSample(x,y))", "all x.((Giles(x) & Friends(y)) -> Shouldn'tHavePaidForSample(x,y))", "((Giles(g) & friend(g)) -> -PayedForSample(g,g))", "Giles should've paid friend's sample.", "((Giles(g) & Friendship(g)) -> -PayedFor(g,y))", "-(Giles(g) & friend(g))", "all x y.((Giles(x) & friend(y)) -> -PayedForSample(x,y))"]}
{"id": "enwn_validation_723", "nl": "A store is a public location.", "fol": "", "prediction": ["all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x y.((Store(x) & PublicLocation(y)) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x y.((Store(x) & PublicLocation(y)) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x y.((Store(x) & Location(y) & Public(x)) -> Public(x))", "all x y.((Store(x) & PublicLocation(y)) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "exists x.(Store(x) & PublicLocation(x))", "exists x.(Store(x) & PublicLocation(x))", "exists x.(Store(x) & PublicLocation(x))", "exists x.(Store(x) & PublicLocation(x))"]}
{"id": "enwn_validation_724", "nl": "It's polite to cover your mouth when coughing in a public location.", "fol": "", "prediction": ["all x.((Coughing(x) & PublicLocation(x)) -> PoliteToCoverMouth(x))", "all x y.((Coughing(x) & PublicLocation(y)) -> PoliteToCoverMouth(x,y))", "(CoughingInPublicLocation(x) -> PoliteToCoverMouth(x))", "all x y.((PoliteToCoverMouth(x) & PublicLocation(y)) -> CoversMouth(x,y))", "all x.((Coughing(x) & PublicLocation(x)) -> PoliteToCoverMouth(x))", "all x y.((Coughing(x) & PublicLocation(y)) -> PoliteToCoverMouth(x,y))", "all x y z.((Coughing(x) & PublicLocation(y) & CoversMouth(z) & PublicLocation(y)) -> Polite(x,z))", "all x.((CoughingInPublicLocation(x) & CoversMouth(x)) -> Polite(x))", "exists x.(Coughing(x) & CoversMouth(x) & PublicLocation(x))", "all x y z.((Coughing(x) & PublicLocation(y) & Mouth(z) & Covers(x,z)) -> Polite(x))", "all x.((Coughing(x) & PublicLocation(x)) -> PoliteToCoverMouth(x))", "all x y.((Coughing(x) & PublicLocation(y)) -> PoliteToCoverMouth(x,y))", "exists x.(Coughing(x) & PublicLocation(x) & CoversMouth(x))", "all x.((CoughingInPublicLocation(x) & CoversMouth(x)) -> Polite(x))", "all x.((Coughing(x) & PublicLocation(x)) -> PoliteToCovetailMouth(x))", "all x y.((Coughing(x) & PublicLocation(y)) -> PoliteToCovetailMouth(x,y))"]}
{"id": "enwn_validation_725", "nl": "Rajesh coughed without covering his mouth in line at the drugstore.", "fol": "", "prediction": ["all x.((Rajesh(x) & Coughed(x)) -> -CoversMouth(x))", "all x y.((Rajesh(x) & Drugstore(y)) -> Coughed(x,y))", "(CoughedWithoutCoveringMouth(Rajesh) & Drugstore(Rajesh))", "(CoughsWithoutCoveringMouth(Rajesh) & Drugstore(Rajesh))", "Rajesh coughed without covering mouth in line at the drugstore.", "-CoughedWithoutCoveringMouth(Rajesh,Drugstore)", "all x.(Rajesh(x) -> (CoughedWithoutCoveringMouth(x) & InDrugstore(x)))", "all x.((Rajesh(x) & Coughed(x) & -CoversMouth(x)) -> Drugstore(x))", "all x y z.((Rajesh(x) & Drugstore(y) & Coughs(x,y) & -CoversMouth(x,z)) -> Coughs(x,y))", "Rajesh coughed without coveringmouth(Rajesh,Drugstore)", "all x y.((Rajesh(x) & Drugstore(y)) -> Coughs(x,y))", "(CoughsWithoutCoversMouth(Rajesh) & InDemandstore(Rajesh,Drugstore))", "(CoughedWithoutCoversMouth(Rajesh) & Drugstore(Rajesh))", "all x.((Rajesh(x) & Drugstore(y)) -> Coughed(x,y))", "Rajesh coughed without covering mouth in line at the drugstore.", "all x y.((Rajesh(x) & Drugstore(y)) -> Coughed(x,y))"]}
{"id": "enwn_validation_726", "nl": "It's polite to cover your mouth when coughing in a store.", "fol": "", "prediction": ["all x y.((CoughingStore(x) & Store(y)) -> PoliteToCoverMouth(x,y))", "all x.((Coughing(x) & Store(x)) -> PoliteToCoverMouth(x))", "all x y.((Coughing(x) & Store(y)) -> PoliteToCoverMouth(x,y))", "all x.((CoughingInStore(x) & CoversMouth(x)) -> Polite(x))", "all x y z.((Coughing(x) & Store(y) & Store(z)) -> PoliteToCoverMouth(x,y,z))", "all x y.((Polite(x) & Store(y) & CoughsIn(x,y)) -> CoversMouth(x))", "all x y.((CoughingStore(x) & Store(y)) -> PoliteToCoverMouth(x,y))", "all x.((Coughing(x) & Store(x)) -> PoliteToCoverMouth(x))", "(CoughingInStore(x) -> PoliteToCoverMouth(x))", "all x.((CoughingStore(x) & CoversMouth(x)) -> Polite(x))", "all x y z.((Coughing(x) & Store(y) & Store(z)) -> PoliteToCoverMouth(x,y,z))", "all x y.((PoliteToCoverMouth(x) & Store(y)) -> CoughsIn(x,y))", "exists x.(CoughingStore(x) & CoversMouth(x))", "all x.((CoughingInStore(x) & CoversMouth(x)) -> Polite(x))", "all x y.((CoughingStore(x) & Store(y)) -> PoliteToCoverMouth(x,y))", "exists x.(CoughingStore(x) & CoversMouth(x))"]}
{"id": "enwn_validation_727", "nl": "Rajesh should have covered his mouth.", "fol": "", "prediction": ["all x.((Rajesh(x) & ShouldCoverMouth(x)) -> ShouldHave(x))", "Rajesh should have covered mouth.", "all x.(Rajesh(x) -> ShouldHaveCoveredMouth(x))", "all x y.((Rajesh(x) & Mouth(y)) -> ShouldCover(x,y))", "(CoveredMouth(Rajesh) -> ShouldHave(Rajesh))", "-(Rajesh(Rajesh) & ShouldCoveredMouth(Rajesh))", "all x.((Rajesh(x) & ShouldCoveredMouth(x)) -> ShouldCoverMouth(x))", "Rajesh should have covered mouth.", "all x.(Rajesh(x) -> ShouldCoveredMouth(x))", "-(Rajesh(Rajesh) & CoveredMouth(Rajesh))", "Rajesh should have covered mouth.", "(all x.(Rajesh(x) -> CoveredMouth(x)))", "all x.((Rajesh(x) & ShouldCoverMouth(x)) -> ShouldBeen(x))", "Rajesh should have covered mouth.", "Rajesh should have covered mouth.", "Rajesh should have covered his mouth."]}
{"id": "enwn_validation_728", "nl": "Marina told her parents that she was going to be staying over at a friend's house.", "fol": "", "prediction": ["all x y.((Marina(x) & Parent(y)) -> (StayingAtFriendsHouse(x,y)))", "all x y z.((Marina(x) & Parent(y) & FriendsHouse(z)) -> (StayingAt(x,y,z) & StayingAt(x,y)))", "Marina told her parents that she was going to be staying over at a friend's house.", "(StayingAtFriendsHouse(Marina) -> TellsParents(Marina,StayAtFriendsHouse(Marina,StayAtFriendsHouse)))", "all x y z.((Marina(x) & Parent(y) & Friend(z)) -> (StayingAt(x,y,z) & StayingAt(x,y,z)))", "Marina told parents that she was going to be staying over at friend's house.", "all x y.((Marina(x) & Parent(y)) -> (StayingAtFriendsHouse(x,y)))", "all x.((Marina(x) & FriendsHouse(x)) -> StayingAt(x,Marina))", "(StayingAtFriendsHouse(Marina,FriendsHouse))", "all x.((Marina(x) & Parents(x)) -> StayingAtFriendsHouse(x))", "all x y.((Marine(x) & Parent(y)) -> (StayingAtFriendsHouse(x,y)))", "all x y z.((Marina(x) & Parent(y) & House(z)) -> (StayingAt(x,z) | StayingAt(x,z))))", "all x y.((Marina(x) & Parent(y)) -> (StayingAtFriendsHouse(x,y)))", "(StayingAtFriendsHouse(Marina,Family,FriendsHouse))", "all x.((Marine(x) & FriendsHouse(x)) -> StayingAt(x,Marine))", "all x.((Marina(x) & Parent(y)) -> StayingAtFriendsHouse(x,y))"]}
{"id": "enwn_validation_729", "nl": "In reality, she was going to be at an all-night house party.", "fol": "", "prediction": ["all x.((HouseParty(x) & AllNight(x)) -> GoingToBe(x))", "In reality, she was going to be at all-nighthouseparty(x)", "all x.((Reality(x) & AllNightHouseParty(x)) -> GoingToBe(x))", "(all x.((She's GoingToBeAtAllNightHouseParty(x)) -> AllNightHouseParty(x)))", "(all x.((HouseParty(x) & AllNight(x)) -> Attended(x)))", "(all x.(HasAllNightHouseParty(x) -> GoingToBe(x)))", "-all x.((HouseParty(x) & AllNight(x)) -> Attended(x))", "all x.(Reality(x) -> AllNightHouseParty(x))", "in reality, she was going to be at all-nighthouseparty(x)", "All NightHouseParty(x) -> GoingToBeAt(x,y))", "all x.((HouseParty(x) & AllNight(x)) -> Attended(x))", "(all x.(SheWasAtAllNightHouseParty(x) -> AllNightHouseParty(x)))", "-all x.((HouseParty(x) & AllNight(x)) -> Attended(x))", "all x.(Reality(x) -> AllNightHouseParty(x))", "In reality, she was going to be at all-nighthouseparty(x)", "all x.(RealLife(x) -> AllNightHouseParty(x))"]}
{"id": "enwn_validation_730", "nl": "You're lying to someone if you tell them you're planning one thing but you're really planning something else.", "fol": "", "prediction": ["all x y.((Liking(x) & TellsPerson(y) & PlanOneThing(y) & PlanAndOtherThing(y)) -> LiesTo(x,y))", "all x.((Liking(x) -> (PlansOneThing(x) & PlanesAndOtherThing(x)))", "all x.((Liking(x) & TellsPerson(x) & PlanOneThing(x) & PlanOneOtherThing(x)) -> LiesTo(x))", "all x y.((Liking(x) & Person(y) & TellsYouPlansOneThing(x,y) & TellsYouPlansAndOtherThing(x,y)) -> LiesTo(x,y))", "all x y.((Liking(x) & Tells(x,y) & PlanOneThing(x) & PlanOneThing(y)) -> PlanAndPlanAndPlanAndPlan(x,y))", "all x y.((Liking(x) & TellsPerson(y) & PlanesOneThing(y) & PlanesAndOtherThing(y)) -> LiesTo(x,y))", "all x y z.((Liking(x) & TellsPerson(y) & PlannedThing(z) & PlannedThing(y,z)) -> (Liking(x,y) & PlanningThing(x,z)))", "all x y.(((Planning(x) & Person(y) & Tells(x,y)) -> (Liking(x) & Planning(x,y)))", "exists x.(Liking(x) -> (Liking(x) & tells(x) & PlanOneThing(x) & PlanOneOtherThing(x)))", "(LikingTo(x) -> (PlansOneThing(x) & PlanesAnotherThing(x)))", "exists x.(Liking(x) -> (Liking(x) & tellsPerson(x) & PlanesOneThing(x) & PlanesAndOtherThing(x)))", "all x.((Liking(x) -> (PlansOneThing(x) & PlanesOtherThing(x)))", "all x y.((Liar(x) & Person(y) & TellsYouPlansOneThing(x,y) & TellsYouPlansAnotherThing(x,y)) -> LiesTo(x,y))", "(LikingTo(x) -> (PlansOneThing(x) & PlanesAndOtherThing(x)))", "all x y.((PlansOneThing(x) & PlanesAndOtherThing(y)) -> LiesTo(x,y))", "exists x.(Liking(x) -> (PlansOneThing(x) & PlansOtherThing(x)))"]}
{"id": "enwn_validation_731", "nl": "Lying to someone that you're not doing something dangerous prevents them from helping you in an emergency.", "fol": "", "prediction": ["all x y.((LikingTo(x,y) & Person(y) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))", "all x y.((LyingTo(x,y) & Person(y) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))", "all x.((LyingTo(x,y) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))", "all x y z.((LyingTo(x,y) & Person(z) & -Dangerous(z)) -> PreventsHelpingInEmergency(x,z))", "all x.((LyingTo(x) & -Dangerous(x)) -> PreventsHelpingInEmergency(x))", "all x.((LikingTo(x) & -Dangerous(x)) -> PreventsHelpingInEmergency(x))", "all x y.((LikingTo(x,y) & Person(y) & -Dangerous(x)) -> PreventsHelpingInEmergency(y,x))", "all x y z.((LikingTo(x,y) & Person(z) & -Dangerous(z)) -> PreventsHelpingInEmergency(x,z))", "all x y.((LyingTo(x,y) & Person(y) & -Dangerous(x)) -> PreventsHelpingInEmergency(y,x))", "all x y.((Liking(x) & Person(y) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))", "all x.((LikingTo(x,y) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))", "all x.((LyingTo(x,y) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))", "exists x.(LikingTo(x,y) & -Dangerous(x) & Person(y) & HelpsInEmergency(x,y))", "all x.(LyingTo(x,y) -> -Dangerous(x,y))", "all x y.((LyingTo(x,y) & Person(y) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))", "all x y z.((LyingTo(x,y) & Person(z) & -Dangerous(z)) -> PreventsHelpingInEmergency(x,z))"]}
{"id": "enwn_validation_732", "nl": "Partying is potentially dangerous.", "fol": "", "prediction": ["all x.(Partying(x) -> PotentiallyDangerous(x))", "all x.(Party(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))", "(PotentiallyDangerousParty(Party))", "all x y.((Party(x) & Party(y)) -> PotentiallyDangerous(x))", "all x.(Party(x) -> PotentiallyDangerous(x))", "all x y.((Party(x) & Party(y)) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))", "all x y.((Partying(x) & Partying(y)) -> PotentiallyDangerous(x))", "all x.(Party(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))", "exists x.(Party(x) & PotentiallyDangerous(x))", "All x.(Partying(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))", "exists x.(Party(x) & PotentiallyDangerous(x))"]}
{"id": "enwn_validation_733", "nl": "Preventing someone from helping you in an emergency is potentially very harmful.", "fol": "", "prediction": ["all x.((PreventsHelping(x) & Emergency(x)) -> PotentiallyHarmful(x))", "all x y.((PreventsHelping(x,y) & Emergency(y)) -> PotentiallyHarmful(x))", "all x y.((Person(x) & Emergency(y) & Prevents(x,y)) -> PotentiallyHarmful(x))", "all x.(PreventsHelping(x) -> PotentiallyHarmful(x))", "all x y z.((Person(x) & Emergency(y) & Emergency(z) & Helps(x,y,z)) -> PotentiallyHarmful(x))", "all x.(PreventsHelpingInEmergency(x) -> PotentiallyHarmful(x))", "all x.((PreventsHelping(x) & Emergency(x)) -> PotentiallyHarmful(x))", "all x y.((Person(x) & Emergency(y) & PreventsHelping(x,y)) -> PotentiallyHarmful(x))", "all x y.((PreventsHelping(x,y) & Emergency(y)) -> PotentiallyHarmful(x))", "all x.((PreventsHelpingInEmergency(x) & Person(y)) -> PotentiallyHarmful(x))", "all x.((Person(x) & HelpsInEmergency(x)) -> PotentiallyHarmful(x))", "all x.(PreventsHelpingEmergency(x) -> PotentiallyHarmful(x))", "all x y.((PreventsHelping(x,y) & Emergency(y)) -> PotentiallyHarmful(x))", "all x y.((Person(x) & Emergency(y) & HelpsIn(x,y)) -> PotentiallyHarmful(x))", "exists x.(PreventHelping(x) & HelpingInEmergency(x))", "exists x.(PreventsHelpingEmergency(x) & PotentiallyHarmful(x))"]}
{"id": "enwn_validation_734", "nl": "Marina told her parents she wouldn't be at a party, but she was actually going to a house party.", "fol": "", "prediction": ["all x y.((Marina(x) & Parent(y)) -> (-AtParty(x,y) & GoingToHouseParty(x,y)))", "all x.((Marina(x) & Parents(x)) -> (-AtParty(x) & GoingToHouseParty(x)))", "(all x y.((Marina(x) & Parent(y)) -> -AtParty(x,y)) & all z w.((Marina(z) & HouseParty(w)) -> GoingTo(z,w))))", "(all x.(Marina(x) -> -AtParty(x)) & all y.(Marina(y) -> GoingToHouseParty(y))))", "all x y z.((Marina(x) & Parent(y) & HouseParty(z)) -> (-AtParty(x,y) & -AtParty(x,z)))", "(all x.(Marine(x) -> -AtParty(x)) & all y.(Marine(y) -> GoingToHouseParty(y))))", "all x y.((Marina(x) & Parent(y)) -> (-AtParty(x) & GoingToHouseParty(x)))", "(all x.((Marina(x) & -AtParty(x)) -> HouseParty(x)))", "(all x y.((Marina(x) & Parent(y)) -> -AtParty(x,y)) & ((Marina(x) & Parent(y)) -> GoingToHouseParty(x,y)))", "all x.((Marine(x) & Parents(x)) -> (-AtParty(x) & GoingToHouseParty(x)))", "all x y z.((Marina(x) & Parent(y) & Party(z)) -> (-At(x,z) & -At(x,z) & GoingTo(x,y,z)))", "all x.((Marina(x) & Parents(x)) -> (-AtParty(x) & GoingToHouseParty(x)))", "all x y.((Marine(x) & Parent(y)) -> (-AtParty(x,y) & GoingToHouseParty(x,y)))", "(-AtParty(Marina) & GoingToHouseParty(Marina))", "all x y.((Marina(x) & Parent(y)) -> (-AtParty(x,y) & GoingToHouseParty(x,y)))", "all x.((Marina(x) & Parent(y)) -> (-AtParty(x,y) & GoingToHouseParty(x,y)))"]}
{"id": "enwn_validation_735", "nl": "Marina lied to her parents to give them the impression she wouldn't be going to a house party.", "fol": "", "prediction": ["all x y.((Marina(x) & Parent(y)) -> LiedToToGiveImpression(x,y))", "all x.((Marina(x) & LiliedToParents(x)) -> -HouseParty(x))", "all x y z.((Marina(x) & Parent(y) & HouseParty(z)) -> LiedToToGiveImpression(x,y,z))", "(LikedToParents(Marina) & GivesImpressionSheWon'tBeGoingToHouseParty(Marina,Pastor))", "all x y.((Marina(x) & Parent(y)) -> LiesTo(x,y))", "all x.(LikedToParents(x) -> -HouseParty(x))", "(LiredToParents(Marina,Parents) & -HouseParty(Marina,Parents))", "all x.((Marina(x) & LiliedToParents(x)) -> -HouseParty(x))", "(LiredToParents(Marina,Pastor) & GivesImpressionSheWon'tBeGoingToHouseParty(Marina,Pastor))", "all x y.((Marina(x) & Parents(y)) -> LiliedToGiveImpression(x,y))", "all x y z.((Marina(x) & Parent(y) & HouseParty(z)) -> LiesTo(x,y,z))", "(LikedToParents(Marina) & DoneImpression(Marina,HouseParty))", "all x y.((Marina(x) & Parent(y) & LiliedTo(x,y)) -> -HouseParty(x))", "all x y.((Marine(x) & Parent(y) & LiliedTo(x,y)) -> -HouseParty(x))", "all x.(LikedToParents(x) -> -HouseParty(x))", "all x.((Marina(x) & LiliedToParents(x)) -> -HouseParty(x))"]}
{"id": "enwn_validation_736", "nl": "Lying to someone that you're not partying prevents them from helping you in an emergency.", "fol": "", "prediction": ["all x y.((LikingTo(x,y) & Person(y) & -Partying(x)) -> PreventsHelpingInEmergency(y,x))", "all x y.((Liking(x) & Person(y) & -Partying(x)) -> PreventsHelpingInEmergency(y,x))", "all x.((LyingTo(x,y) & -Partying(x)) -> PreventsEmergencyHelp(y))", "all x y.((LyingTo(x,y) & Person(y) & -Partying(x)) -> PreventsHelpingInEmergency(y,x))", "all x y z.((LikingTo(x,y) & Person(z) & -Partying(x,z)) -> PreventsHelpingInEmergency(x,z))", "all x.((LikingTo(x) & -Partying(x)) -> PreventsHelpingInEmergency(x))", "all x y z.((LyingTo(x,y) & Person(z) & -Partying(x,z)) -> PreventsHelpingInEmergency(x,z))", "all x.((LikingTo(x,y) & -Partying(x)) -> PreventsEmergencyHelping(x,y))", "all x y.((LyingTo(x,y) & Person(y) & -Partying(y)) -> PreventsHelpingInEmergency(x,y))", "all x.((LyingTo(x) & -Partying(x)) -> PreventsHelpInEmergency(x))", "all x.((LyingTo(x,y) & Person(y) & -Partying(x)) -> PreventsHelpingInEmergency(y))", "all x y.((Person(x) & -Partying(x)) -> PreventsHelpingInEmergency(y,x))", "all x y.((LikingTo(x,y) & -Partying(x)) -> PreventsHelpingInEmergency(y))", "all x y z.((LikingTo(x,y) & Person(z) & -Partying(x)) -> PreventsHelpingInEmergency(z,y))", "all x.(LikingTo(x,y) -> -Partying(y))", "exists x.(LyingTo(x,y) & -Partying(x,y))"]}
{"id": "enwn_validation_737", "nl": "Lying to someone that you're not partying does more harm than good.", "fol": "", "prediction": ["all x y.((LikingTo(x,y) & Person(y) & -Partying(x)) -> DoesMoreHarmThanGood(x))", "all x y.((Lying(x) & Person(y) & -Partying(x,y)) -> DoesMoreHarmThanGood(x,y))", "all x.((LikingTo(x) & -Partying(x)) -> MoreHarmThanGood(x))", "all x.((LyingTo(x,y) & -Partying(x)) -> MoreHarmThanGood(y))", "all x y z.((LikingTo(x,y) & Person(z) & -Partying(z)) -> DoesMoreHarmThanGood(x,z))", "all x y.((LyingTo(x,y) & Person(y) & -Partying(x)) -> MoreHarmThanGood(x))", "all x.((Lying(x) & -Partying(x)) -> MoreHarmThanGood(x))", "all x y.((LikingTo(x,y) & Person(y) & -Partying(x)) -> MoreHarmThanGood(x))", "(LikingToPerson(x) & -Partying(x)) -> MoreHarmThanGood(x))", "all x y.((LyingTo(x,y) & -Partying(x)) -> DoesMoreHarmThanGood(y))", "all x.(Liking(x) -> -Partying(x))", "all x.((LikingTo(x,y) & -Partying(x)) -> MoreHarmThanGood(y))", "all x y z.((Liking(x) & Person(y) & Partying(z) & -Partying(y,z)) -> DoesMoreHarmThanGood(x,y))", "all x y.((Person(x) & Lying(x,y) & -Partying(x)) -> DoesMoreHarmThanGood(y))", "exists x.(LyingTo(x,y) & -Partying(x))", "exists x.(LyingTo(x,y) & -Partying(x))"]}
{"id": "enwn_validation_738", "nl": "Marina's lie to her parents did more harm than good.", "fol": "", "prediction": ["all x y.((Lird(x) & Marina(y) & Parents(y)) -> DidMoreHarmThanGood(y))", "all x.((LirtToParents(x) & Marina's(x)) -> MoreHarmThanGood(x))", "LieToParents(Marina,MoreHarm(Marina,MoreGood(Marina))", "all x y z.((Marina'sLieToParents(x) & Marina'sLird(y) & Parent(z)) -> (DoesMoreHarm(x,y) & DoesMoreGood(x,z)))", "all x y.((LirtTo(x,y) & Marina(y)) -> DidMoreHarmThanGood(y))", "(LirtToParents(Marina) & MoreHarmThanGood(Marina))", "all x.(LirtToParents(x) -> MoreHarmThanGood(x))", "(LirdToParents(Marina,Marina) & MoreHarmThanGood(Marina,Marina))", "(LimitToParents(Marina) & MoreHarmThanGood(Marina))", "all x.((LirtToParents(x) & Marina'sLirtToParents(x)) -> MoreHarmThanGood(x))", "all x y.((Marina(x) & LiarToParents(x,y)) -> MoreHarmThanGood(x,y))", "all x y z.((LirdTo(x,y) & Marina(z) & Parents(y) & Parents(z)) -> DidMoreHarmThanGood(x,z))", "all x y.((LieTo(x,y) & Marina'sParents(y)) -> DidMoreHarmThanGood(x,y))", "(LirtToParents(Marine) & MoreHarmThanGood(Marine))", "all x.(LirtToParents(x) -> MoreHarmThanGood(x))", "All x.(LittleToParents(x) -> MoreHarmThanGood(x))"]}
{"id": "enwn_validation_739", "nl": "Marina shouldn't have lied to her parents.", "fol": "", "prediction": ["all x.((Marina(x) & -LikedToParents(x)) -> -LikedToParents(x))", "(LikedToParents(Marina) -> -LikedToParents(Marina))", "all x y.((Marina(x) & Parent(y)) -> -LikedTo(x,y))", "Marina shouldn't have lied to her parents.", "all x.((Marina(x) & Parents(x)) -> -LikedTo(x,Marina))", "all x.((Marina(x) & -LikedToParents(x)) -> -LikedToParents(x))", "all x.((Marine(x) & -LikedToParents(x)) -> -LikedToParents(x))", "(LikedToParents(Marina,Marina) -> -LikedToParents(Marina,Marina))", "Marina should've lied to her parents.", "-LikedToParents(Marina,Sons,Sons)", "(LikedToParents(Marina) | ShouldNeverLikedToParents(Marina))", "Marina shouldn't have lied to her parents.", "all x y.((Marina(x) & Parent(y)) -> -LikedTo(x,y))", "-LikedToParents(Marina,2019)", "all x.((Marina(x) & Parents(y)) -> -Liked(x,y))", "-LikedToParents(Marina)"]}
{"id": "enwn_validation_740", "nl": "Bugging someone's phone is an invasion of their privacy.", "fol": "", "prediction": ["all x y.((BugsPhone(x) & Person(y)) -> InvasionOfPrivacy(x,y))", "all x.(BuggingPhone(x) -> InvasionOfPrivacy(x))", "all x y.((BugsPhone(x) & Person(y)) -> InvasionOfPrivacy(x,y))", "all x y z.((Bugging(x) & Phone(y) & Person(z)) -> InvasionOfPrivacy(x,y,z))", "all x.(BuggingPhone(x) -> InvasionOfPrivacy(x))", "all x y z.((BugsPhone(x) & Person(y) & Phone(z)) -> InvasionOfPrivacy(x,y,z))", "all x.((BugsPhone(x) & InvasionOfPrivacy(x)) -> InvasionOfPrivacy(x))", "all x.(Bbugging(x) -> InvasionOfPrivacy(x))", "all x y.((BuggingPhone(x) & Person(y)) -> InvasionOfPrivacy(x,y))", "all x.(BbuggingPhone(x) -> InvasionOfPrivacy(x))", "all x y.((BugsPhone(x,y) & Person(y)) -> InvasionOfPrivacy(x,y))", "all x y.((BugsPhone(x) & Person(y)) -> InvasionOfPrivacy(x,y))", "all x.(BugsPhone(x) -> InvasionOfPrivacy(x))", "all x y.((BuggingPhone(x) & Person(y)) -> InvasionOfPrivacy(x,y))", "all x.(BugsPhone(x) -> InvasionOfPrivacy(x))", "all x.(BbuggingPhone(x) -> InvasionOfPrivacy(x))"]}
{"id": "enwn_validation_741", "nl": "Invading people's privacy without a good reason is wrong.", "fol": "", "prediction": ["all x.((InvadingPrivacy(x) & -GoodRight(x)) -> Wrong(x))", "all x y.((InvadingPrivacy(x) & Person(y) & -GoodRight(x)) -> Wrong(x))", "all x.((InvadingPrivacy(x) & -GoodRight(x)) -> Wrong(x))", "all x.((InvadingPeoplesPrivacy(x) & -GoodRight(x)) -> Wrong(x))", "all x y.((InvadingPeoplesPrivacy(x) & -GoodRight(y)) -> Wrong(x))", "all x y.((InvadingPrivacy(x) & Person(y) & -GoodRight(x,y)) -> Wrong(x))", "all x.((InvadingPrivacy(x) & -GoodRaison(x)) -> Worst(x))", "all x y.((Person(x) & Privacy(y) & InvadingWithoutGoodRight(x,y)) -> Wrong(x))", "all x.(InvadingPrivacyWithoutGoodRight(x) -> Worst(x))", "all x y.((InvadingPeoplePrivacy(x) & GoodRight(y)) -> Wrong(x,y))", "all x.((InvadingPrivacy(x) & GoodRight(x)) -> Wrong(x))", "all x.((InvadingPeoplesPrivacy(x) & -GoodRight(x)) -> Wrong(x))", "all x.(InvadingPrivacy(x) -> Wrong(x))", "all x y.((InvadingPrivacy(x,y) & Person(y) & -GoodRight(x,y)) -> Wrong(x))", "all x.((InvadingPrivacyWithoutGoodRight(x)) -> Wrong(x))", "all x.((InvadesPrivacy(x) & -GoodRight(x)) -> Wrong(x))"]}
{"id": "enwn_validation_742", "nl": "Omar bugged his girlfriend's phone because he thought she was lying.", "fol": "", "prediction": ["all x y.((Omar(x) & Girlfriend(y)) -> BuggedPhone(x,y))", "Omar bugged girlfriendsPhone(Omar,x) & thought she wasLiking(Omar,x))", "all x y.((Omar(x) & girlfriend(y)) -> BuggedPhone(x,y))", "all x.((Omar(x) & Girlfriend(y) & BuggedPhone(x,y)) -> WorriedSheLiving(x,y))", "all x y z.((Omar(x) & Girlfriend(y) & Phone(z) & Bugged(x,y,z)) -> (Liking(y) | Bugging(x,y)))", "Omar bugged girlfriend's phone because he thought she was lying.", "(Bangged(Omar,girlfriend) & ThoughtSheLiving(Omar,girlfriend))", "all x.((Omar(x) & BuggedPhone(x)) -> (Gastle(x) & ThoughtSheLiving(x)))", "(BangeredPhone(Omar,girlfriend) & ThoughtSheLiving(Omar,girlfriend))", "Omar bugged girlfriendsphone because he thought she was lying.", "Omar bugged girlfriendsPhone(Omar,Liking)", "Omar BuggedPhone(o) & ImaginedGiving(o) -> (Girlfriend(o) & Lied(o)))", "all x y.((Omar(x) & Girlfriend(y)) -> BuggedPhone(x,y))", "all x y.((Omar(x) & girlfriend(y) & BuggedPhone(x,y)) -> WorriedSheLiving(x,y))", "Omar bugged his girlfriend's phone because he thought she was lying.", "Omar bugged girlfriend's phone because he thought she was lying."]}
{"id": "enwn_validation_743", "nl": "Omar suspected his girlfriend was lying because she came home at 3 AM.", "fol": "", "prediction": ["Omar suspected his girlfriend was lying because she came home at 3 AM.", "all x.((Gayfriend(x) & CameHomeAt3AM(x)) -> SuspiciousOmar(x))", "all x y.((Omar(x) & girlfriend(y) & CameHomeAt3AM(x,y)) -> SuspiciousOmar(x,y))", "(Living(Omar) -> ComesHomeAt3AM(Omar))", "(all x.((Gayfriend(x) & CameHomeAt3AM(x)) -> Liking(x)))", "all x y.((Omar(x) & Girlfriend(y) & CameHomeAt3AM(x,y)) -> SuspiciousOfLiving(x,y))", "Omar suspected his girlfriend was lying because she came home at 3 AM.", "Omar suspected girlfriend wasLiving(Omar,3AM)", "Omar suspects that his girlfriend is lying because she came home at 3 AM.", "all x.((Party(x) & CameHomeAt3AM(x)) -> SuspiciousOmar(x))", "all x.((At3AM(x) & Omar(x)) -> SuspiciousGastle(x))", "Omar suspects his girlfriend is lying because she came home at 3 AM.", "Omar apprehensively suspected girlfriend wasLiving(Omar,3AM)", "Omar suspected his girlfriend was lying because she came home at 3 AM.", "Omar suspected girlfriend wasLiving(Omar,3)", "Omar suspected his girlfriend was lying because she came home at 3 AM."]}
{"id": "enwn_validation_744", "nl": "It's normal to be out late when you're drinking with friends.", "fol": "", "prediction": ["all x.((DrinkingWithFriends(x) & DrinkingWithFriends(x)) -> NormalToBeOutLater(x))", "all x y.((Drinking(x) & Friends(y)) -> NormalToBeOutLater(x,y))", "all x.((DrinkingWithFriends(x) & OutLate(x)) -> Normal(x))", "all x y.((DrinkingWithFriends(x) & DrinkingWithFriends(y)) -> NormalToBeOutLater(x,y))", "(all x.((DrinkingWithFriends(x) & DrinkingWithFriends(x)) -> Late(x)))", "all x.((Drinking(x) & DrinkingWithFriends(x)) -> NormalToBeOutLater(x))", "all x.((DrinkingWithFriends(x) & NormalToBeOutLater(x)) -> DrinkingWithFriends(x))", "(all x.((DrinkingWithFriends(x) & -DrinkingWithFriends(x)) -> Late(x)))", "all x y.((Drinking(x) & Friends(y)) -> NormalToBeOutLate(x,y))", "(All x.((DrinkingWithFriends(x) & OutLate(x)) -> Normal(x)))", "exists x y.((Drinking(x) & Friends(y) & Drinking(x,y)) -> NormalToBeOutLater(x))", "all x.((DrinkingWithFriends(x) & DrinkingWithFriends(x)) -> NormalOutLater(x))", "all x.((Drinking(x) & WithFriends(x)) -> NormalOutLater(x))", "exists x y.((Drinking(x) & Friends(y) & DrinkingWith(x,y)) -> NormalToBeOutLater(x))", "all x.(DrinkingWithFriends(x) -> NormalToBeOutLater(x))", "all x.((BakingWithFriends(x) & DrinkingWithFriends(x)) -> NormalToBeOutLater(x))"]}
{"id": "enwn_validation_745", "nl": "Omar's girlfriend told him she was going out drinking with her friends.", "fol": "", "prediction": ["Omar's girlfriend told him she was going out drinking with her friends.", "all x y.((Groomer(x) & Omar(y)) -> (GoesOutDrinking(x,y) & Friends(y)))", "all x.((Groomer(x) & Omar(x)) -> (GoingOutDrinking(x) & Friends(x)))", "(Alias(Omar) & GoesOutDrinking(Omar,Friends))", "Omar's girlfriend told him she was going out drinking with friends.", "all x y.((Groomer(x) & Omar(y)) -> (GoingOutDrinking(x,y) & Friends(y)))", "all x.((Groomer(x) & Omar(x)) -> SheGoesOutDrinkingWithFriends(x))", "all x y.((Advice(x) & Omar(y)) -> (GoesOutDrinking(x,y) & Friends(y)))", "Omarsgirlfriend -SheGoesOutDrinkingWithFriends(Omar,Omar))", "((Gastfriend(Omar) & Omar(Omar)) -> GoesOutDrinkingWithFriends(Omar))", "(Antecedent(Omar) & GoesOutDrinkingWithFriends(Omar))", "Omar's girlfriend told him she was going out drinking with her friends.", "Omarsgirlfriend said she was going out drinking with friends.", "Omar's girlfriend told him she was going out drinking with friends.", "Omar's girlfriend told him she was going out drinking with her friends.", "Omar's girlfriend told him she was going out drinking with friends."]}
{"id": "enwn_validation_746", "nl": "It's irrational to be suspicious of someone who is behaving normally.", "fol": "", "prediction": ["all x.((Suspicious(x) & BehavingNormally(x)) -> Irrational(x))", "all x.((SuspiciousOf(x) & NormalBehaving(x)) -> Irrational(x))", "all x y.((Suspicious(x) & BehavingNormally(y)) -> Irrational(x))", "all x y.((SuspiciousOf(x,y) & NormalBehaving(y)) -> Irrational(x))", "(IrrationalToBeSuspiciousOfNormalBehaving(x))", "all x.((Suspicious(x) & NormalBehaving(x)) -> Irrational(x))", "all x.(IrrationalToBeSuspiciousOfNormalBehaving(x) -> SuspiciousOf(x))", "all x.((BehavingNormally(x) & Suspicious(x)) -> Irrational(x))", "(SuspiciousOfNormalBehaving(x) -> Irrational(x))", "all x y.((SuspiciousOf(x,y) & BehavingNormally(x)) -> Irrational(x))", "(IrrationalToBeSuspiciousOfNormalBehaving(x))", "all x y.((Suspicious(x) & BehavingNormally(y)) -> Irrational(x))", "all x.(IrrationalToSuspiciousOfBehavingNormal(x) -> BehavingNormally(x))", "exists x.(Suspicious(x) & BehavingNormally(x))", "all x y.((BehavingNormally(x) & Suspicious(y)) -> Irrational(y))", "exists x.(Suspicious(x) & NormalBehaving(x))"]}
{"id": "enwn_validation_747", "nl": "Bugging someone's phone without a good reason is wrong.", "fol": "", "prediction": ["all x.((BugsPhone(x) & -GoodRight(x)) -> Wrong(x))", "all x y.((BugsPhone(x) & Phone(y) & -GoodRight(x)) -> Wrong(x))", "all x y.((Phone(x) & Phone(y) & Bugs(x,y)) -> Wrong(x))", "all x.((BugsPhone(x) & -GoodRight(x)) -> Wrong(x))", "all x y.((BugsPhone(x) & Person(y) & -GoodRight(x,y)) -> Wrong(x))", "all x.((Bbugging(x) & -GoodRight(x)) -> Wrong(x))", "all x y.((Bug(x) & Phone(y) & -GoodRight(x,y)) -> Wrong(x))", "all x y z.((BugsPhone(x) & Phone(y) & GoodRunning(z) & -GoodRight(x,y)) -> Wrong(x))", "all x.((BuggingPhone(x) & -GoodRaison(x)) -> Wrong(x))", "all x.((BugsPhone(x) & NoGoodRight(x)) -> Wrong(x))", "all x y.((Phone(x) & Phone(y) & BuggingWithoutGoodRight(x,y)) -> Wrong(x))", "all x.(BugsPhone(x) -> Wrong(x))", "all x y.((BugsPhone(x) & Phone(y) & -GoodRight(x,y)) -> Wrong(x))", "all x.((Bbugging(x) & GoodRight(x)) -> Wrong(x))", "all x.(Bugging(x) -> Wrong(x))", "all x.((BugsPhone(x) & GoodRight(x)) -> Wrong(x))"]}
{"id": "enwn_validation_748", "nl": "It was normal for Omar's girlfriend to be out late.", "fol": "", "prediction": ["all x.((Groomer(x) & Omar(x)) -> OutLate(x))", "Omar's girlfriend was out late.", "all x.((Girlfriend(x) & Omar(x)) -> OutLate(x))", "all x.((Groomer(x) & Omar(x)) -> OutLater(x))", "all x y.((Girlfriend(x) & Omar(y)) -> OutLate(x,y))", "(All x.((Groomer(x) & Omar(x)) -> OutLate(x)))", "all x.((Party(x) & Omar(x)) -> OutLate(x))", "Omar's girlfriend was out late.", "all x y.((Groomer(x) & Omar(y)) -> OutLate(y,x))", "(StandardOutLater(Omar,Groomer))", "all x.((Groomer(x) & Omar(x)) -> OutLate(x))", "Omar's girlfriend was out late.", "Omarsgirlfriend -OutLate(Omar,Standard))", "All x.((Adult(x) & Omar(x)) -> OutLate(x))", "Omar's girlfriend was out late.", "All x.((Groomer(x) & Omar(x)) -> OutLast(x))"]}
{"id": "enwn_validation_749", "nl": "Omar suspected his girlfriend was lying because she did something normal.", "fol": "", "prediction": ["Omar suspected his girlfriend was lying because she did somethingnormal.", "all x.((Gayfriend(x) & DidNormal(x)) -> SuspiciousOmar(x))", "all x y.((Omar(x) & girlfriend(y) & DidNormal(y)) -> SuspiciousOfLiving(x,y))", "Omar suspected his girlfriend was lying because she did somethingnormal.", "all x y.((Advice(x) & girlfriend(y) & Normal(y)) -> Suspicious(x,y))", "Omar suspects girlfriend isLiving(Omar,Dad(Omar,Normal))", "Omar suspected girlfriend wasLiving(Omar,Dad(Omar))", "(Living(Omar) -> -DoingNormal(Omar,Gayfriend))", "Omar apprehensively suspected his girlfriend was lying because she did somethingnormal.", "all x.((Adult(x) & NormalDoing(x)) -> Suspicious(x))", "all x.((Gayfriend(x) & DidNormalThing(x)) -> SuspiciousOmar(x))", "Omar suspects his girlfriend is lying because she did somethingnormal.", "Omar suspected his girlfriend was lying because she did somethingnormal.", "all x y.((Omar(x) & girlfriend(y)) -> (Living(y) | Normal(y)))", "Omar suspected that his girlfriend was lying because she did somethingnormal.", "Omar suspected his girlfriend was lying because she did somethingnormal."]}
{"id": "enwn_validation_750", "nl": "Omar didn't have good reason to suspect his girlfriend was lying.", "fol": "", "prediction": ["all x.((Omar(x) & -GoodRightToSuspect(x,Liking)) -> -Liking(x))", "Omar n'avait aucune raison to suspect girlfriend was lying.", "(-GoodRightToSuspect(Omar,Groomer) & -GoodRightToSuspect(Omar,Groomer))", "all x y.((Omar(x) & Girlfriend(y)) -> -GoodRightToSuspect(x,y))", "((Omar) & -GoodRightToSuspect(Omar,Liking)) -> -Liking(Omar,Liking))", "Omar didn't have good reason to suspect girlfriend was lying.", "Omar n'avedgoodRightToSuspect(Omar,Liking)", "-(GoodRightToSuspect(Omar,Groomer) & Liking(Omar,Groomer))", "all x.((Omar(x) & -GoodRightToSuspirate(x,y)) -> Lie(x))", "Omar ne supposes(n) he had good reason to suspect girlfriend was lying(n))", "(-GoodRightToSuspect(Omar,Living))", "Omar n'avait aucune reason to suspect girlfriend was lying.", "all x.((Omar(x) & -GoodRightToSuspect(x)) -> Liking(x))", "Omar n'advised(n) & girlfriend(y) & Lied(n))", "Omar didn't have good reason to suspect girlfriend was lying.", "-GoodRightToSuspect(Omar,PartyLiking)"]}
{"id": "enwn_validation_751", "nl": "Omar bugged his girlfriend's phone without a good reason.", "fol": "", "prediction": ["all x y.((Omar(x) & Girlfriend(y)) -> BuggedPhone(x,y))", "Omar bugged girlfriendsPhone(Omar,x) & -GoodRight(Omar,x))", "all x.((Omar(x) & Girlfriend(y)) -> BuggedPhoneWithoutGoodRight(x,y))", "all x y.((Omar(x) & Girlfriend(y)) -> BuggedWithoutGoodRight(x,y))", "(BangeredPhone(Omar,girlfriend) & -GoodRight(Omar,Friend))", "all x y.((Omar(x) & girlfriend(y)) -> BuggedPhone(x,y))", "Omar bugged girlfriend's phone without good reason.", "Omar bugged girlfriendsPhone(Omar,x) & -GoodRight(Omar,x))", "Omar BuggedGasPhoneWithoutGoodRight(Omar,girlfriend)", "all x y z.((Omar(x) & Girlfriend(y) & Phone(z) & Bugged(x,y,z)) -> -GoodRight(x))", "all x.(Bangged(x,y) -> (Groomer(y) & Phone(y) & -GoodRight(x,y)))", "all x.((Omar(x) & Girlfriend(x)) -> BuggedPhone(x))", "(BaggedPhone(Omar,girlfriend) & -GoodRight(Omar,girlfriend))", "Omar bugged girlfriendsphone without good reason.", "all x y.((Omar(x) & Girlfriend(y)) -> Bugged(x,y))", "Omar bugged girlfriend's phone without good reason."]}
{"id": "enwn_validation_752", "nl": "Omar shouldn't have bugged his girlfriend's phone.", "fol": "", "prediction": ["Omar shouldn't have bugged girlfriendsPhone(Omar,x))", "all x.((Omar(x) & Girlfriend(x)) -> -BanggedPhone(x))", "all x y.((Omar(x) & Girlfriend(y)) -> -BanggedPhone(x,y))", "Omar shouldn't have bugged girlfriendsPhone(Omar)", "Omar shouldn't have bugged girlfriendsPhone(Omar)", "all x.((Omar(x) & Girlfriend(y)) -> -BbuggedPhone(x,y))", "-BingeredPhone(Omar,girlfriend)", "-BbuggedGasPhone(Omar,girlfriend)", "all x y.((Omar(x) & Girlfriend(y)) -> -BbuggedPhone(x,y))", "Omar shouldn't have bugged girlfriendsphone(Omar)", "Omar shouldn't have bugged girlfriendsphone(Omar)", "Omar shouldn't have bugged girlfriendsPhone(o) -> -Bangged(o))", "Omar shouldn't have bugged girlfriendsPhone(o) & -BanggedPhone(o))", "all x.((Omar(x) & Girlfriend(x)) -> -BingeredPhone(x))", "Omar shouldn't have bugged girlfriend's phone.", "Omar neafuggedGasPhone(n)"]}
{"id": "enwn_validation_753", "nl": "It's inappropriate for supervisors to behave unprofessionally.", "fol": "", "prediction": ["all x.((Supervisor(x) & Unprofessional(x)) -> Inappropriate(x))", "all x.((Supervisor(x) & UnprofessionalBehavior(x)) -> Inappropriate(x))", "all x y.((Supervisor(x) & Supervisor(y)) -> UnprofessionalBehavior(x,y))", "(UnprofessionalBehavior(supervisor,unprofessional) -> Inappropriate(supervisor,unprofessional))", "all x.((Supervisor(x) & Unprofessional(x)) -> Inappropriate(x))", "(InappropriateForSupervisorsToBeUnprofessionally(Supervisor,x))", "all x.(InappropriateForSupervisors(x) -> BehaveUnprofessionally(x))", "all x.((Supervisor(x) & UnprofessionalBehavior(x)) -> Inappropriate(x))", "all x y.((Supervisor(x) & Supervisor(y)) -> UnprofessionalBehavior(x,y))", "all x.((Supervisor(x) & Unprofessional(x)) -> Unprofessional(x))", "all x.((Supervisor(x) & Inappropriate(x)) -> BehavesUnprofessionally(x))", "exists x.(Supervisor(x) & Unprofessional(x))", "all x y.((Supervisor(x) & Supervisor(y)) -> UnprofessionalBehavior(y))", "all x y.((Supervisor(x) & Supervisor(y)) -> InappropriateBehavior(x,y))", "exists x.(Supervisor(x) & UnprofessionalBehavior(x))", "all x.((Supervisor(x) & UnprofessionalBehavior(x)) -> UnprofessionalBehavior(x))"]}
{"id": "enwn_validation_754", "nl": "It's unprofessional to let personal matters interfere with workplace matters.", "fol": "", "prediction": ["all x.((PersonalMatter(x) & InterfereWithWorkplaceMatters(x)) -> Unprofessional(x))", "all x y.((PersonalMatter(x) & WorkplaceMatter(y)) -> Unprofessional(x))", "all x.((LetsPersonalMattersInterfereWithWorkplaceMatters(x)) -> Unprofessional(x))", "(Unprofessional(letPersonalMattersInterfereWithWorkplaceMatters))", "all x.((PersonalMatter(x) & InterfereWithWorkplaceMatters(x)) -> Unprofessional(x))", "all x.((PersonalMatters(x) & InterfereWithWorkplaceMatters(x)) -> Unprofessional(x))", "all x y.((PersonalMatter(x) & WorkplaceMatter(y)) -> Unprofessional(x))", "(all x.((PersonalMatter(x) & InterfereWithWorkplaceMatters(x)) -> Unprofessional(x))", "all x.(Unprofessional(x) -> LetsPersonalMattersInterfereWithWorkplaceMatters(x))", "all x.((PersonalMatter(x) & InterfereWithWorkplaceMatters(x)) -> Unprofessional(x))", "all x.(LetsPersonalMattersInterfereWithWorkplaceMatters(x) -> Unprofessional(x))", "all x.((PersonalMatter(x) & InterferenceWithWorkplaceMatters(x)) -> Unprofessional(x))", "exists x.(PersonalMatter(x) & InterferesWithWorkplaceMatter(x))", "all x y.((PersonalMatter(x) & WorkplaceMatter(y)) -> Unprofessional(x))", "all x y.((PersonalMatter(x) & WorkplaceMatter(y)) -> Unprofessional(x,y))", "all x y.((PersonalMatter(x) & WorkplaceMatter(y)) -> Unprofessional(x))"]}
{"id": "enwn_validation_755", "nl": "An employer's influence over their employees' pay is a workplace matter.", "fol": "", "prediction": ["all x.((Employer(x) & InfluenceOverEmployeesPay(x)) -> WorkplaceMatter(x))", "all x y.((Employer(x) & Employee(y)) -> InfluenceOverPay(x,y))", "all x.((Employer(x) & InfluenceOverEmployeesPay(x)) -> WorkplaceMatter(x))", "all x.((Employer(x) & Employee(y) & InfluenceOverPay(x,y)) -> WorkplaceMatter(x))", "all x y.((Employer(x) & Employee(y)) -> InfluenceOverPay(x,y))", "all x y.((Employer(x) & Employee(y) & InfluenceOverPay(x,y)) -> WorkplaceMatter(x))", "all x y z.((Employer(x) & Employee(y) & Employee(z) & InfluenceOverPay(x,y,z)) -> WorkplaceMatter(x))", "all x y.((Employee(x) & Employee(y)) -> InfluenceOverPay(x,y))", "all x.(EmployerInfluenceOverEmployeesPay(x) -> WorkplaceMatter(x))", "all x.((Employer(x) & EmployerInfluenceOverEmployeesPay(x)) -> WorkplaceMatter(x))", "all x.((Employee(x) & InfluenceOverEmployeesPay(x)) -> WorkplaceMatter(x))", "exists x.(Employer(x) & InfluenceOverEmployeesPay(x) & WorkplaceMatter(x))", "all x y.((Employer(x) & Employee(y)) -> InfluenceOverPay(x,y))", "all x.(EmployerInfluenceOverEmployeesPay(x) -> WorkplaceMatter(x))", "all x.((Employer(x) & InfluenceOverEmployeesPay(x)) -> WorkplaceMatter(x))", "all x y.((Employer(x) & Employee(y) & InfluenceOverPay(x,y)) -> WorkplaceMatter(x,y))"]}
{"id": "enwn_validation_756", "nl": "Alan docked Tim's pay because Tim gave Alan's daughter a low score on a test.", "fol": "", "prediction": ["all x y.((Alan(x) & Tim(y) & LowScore(y)) -> DockedPay(x,y))", "all x y z.((Alan(x) & Tim(y) & Pay(z) & LowScore(y,z)) -> Docked(x,y,z))", "all x y.((Alan(x) & Tim(y) & LowScore(y,x)) -> DockedPay(x,y))", "all x.((Alan(x) & Tim(y) & LowScore(y)) -> DockedPay(x,y))", "(DockedPay(Alan) & Tim'sPay(Alan) & LowScore(Alan'sDaughter))", "(DockedPay(Alan,Tim) -> LowScore(Alan,Tim))", "all x y.((Alan(x) & Tim(y)) -> DockedPay(x,y))", "(all x.(DockedPay(x) -> Tim(x))) & Tim gave AlansDaughterLowScore(x))", "all x.((Alan(x) & Tim(x) & LowScoreOnTest(x)) -> DockedPay(x,y))", "all x y z.((Alan(x) & Tim(y) & Test(z) & LowScore(y,z)) -> DockedPay(x,y))", "all x y.((Alan(x) & Tim(y) & LowScoreOnTest(y,x)) -> DockedPay(x,y))", "(DockedPay(Alan,Tim) -> Alan'sDaughterLowScore(Alan,Tim))", "(DockedPay(Alan) & Tim(Tim)) -> AlansDaughterLowScore(Alan,Test))", "all x y z.((Alan(x) & Tim(y) & Pay(z) & LowScoreOnTest(y,z)) -> Docked(x,y,z))", "all x.((Alan(x) & Tim(y) & LowScore(y)) -> DockedPay(x,y))", "all x y.((Alan(x) & Tim(y) & LowScoreOnTest(y)) -> DockedPay(x,y))"]}
{"id": "enwn_validation_757", "nl": "Doing something because of a familial relationship is doing it for a personal reason.", "fol": "", "prediction": ["all x.((Doing(x) & FamilialRelationship(x)) -> PersonalRaison(x))", "all x y.((Doing(x,y) & FamilyLimit(x)) -> PersonalRaison(y))", "all x.((Doing(x) & FamilyLimit(x)) -> PersonalRaison(x))", "all x.((FamilyRelationship(x) & DoingAsFamily(x)) -> PersonalRaison(x))", "all x y.((Doing(x) & FamilyLimit(x,y)) -> PersonalRaison(x))", "all x.((Doing(x) & FamilialRelationship(x)) -> PersonalRun(x))", "all x.(DoingFamilyRelationship(x) -> PersonalRaison(x))", "all x y.((FamilyRelationship(x) & Doing(x,y)) -> PersonalRaison(x))", "all x y.((Doing(x,y) & FamilyLimit(x) & FamilyLimit(y)) -> PersonalRaison(x))", "all x.((DoingAsFamilyRelationship(x) & PersonalRaison(x)) -> DoingAsFamilyRelationship(x))", "all x y z.((Doing(x,y) & FamilyLimit(z) & FamilyLimit(x,z)) -> PersonalRaison(x))", "all x.((Doing(x) & FamilyLimit(x)) -> PersonalRaison(x))", "all x y.((Doing(x) & FamilyLimit(y) & FamilyLimit(y)) -> PersonalRaison(x,y))", "all x y.((FamilyRelationship(x) & Doing(y,x)) -> PersonalRaison(y))", "all x.(DoingFamilyRelationship(x) -> PersonalRaison(x))", "all x.(DoingFamilyLimit(x) -> DoingForPersonalRunning(x))"]}
{"id": "enwn_validation_758", "nl": "It's unprofessional to dock your employee's pay for personal reasons.", "fol": "", "prediction": ["all x.((DoorEmployeePay(x) & PersonalRates(x)) -> Unprofessional(x))", "all x y.((Employee(x) & Employee(y) & DocksPayForPersonalCauses(x,y)) -> Unprofessional(x))", "-ProfessionalToDockEmployeePayForPersonalCauses(-DockEmployeePayForPersonalCauses(-DockEmployeePayForPersonalCauses(-DockEmployeePayForPersonalCauses(-DockEmployeePayForPersonalCauses(-DockEmployeePayForPersonalCauses(-DockEmployeePayPerPersonalCauses(-DockEmployeesPerPersonalCauses(-PersonalCauses(-PersonalCauses(-PersonalCauses(-PersonalCauses(-PersonalCauses(-PersonalCauses(-PersonalCauses(-PersonalCauses(-PersonalCauses(-PersonalCauses(-PersonalCauses(-PersonalCauses(-PersonalCauses(Causes(Causes(Causes(Causes(Causes(Causes(Causes(Causes(Causes(Causes(Causes(Causes(Causes(Causes(Causes(Causes(Causes(Causes(Causes(Causes(Causes)))))", "all x.((DoorsEmployeePay(x) & PersonalRates(x)) -> Unprofessional(x))", "(DocksEmployeePay(x) & PersonalRates(x))", "(UnprofessionalToDockEmployeePay(x) & PersonalRates(x))", "(DockEmployeePay(x) & PersonalRates(x))", "all x y.((DoorEmployeePay(x) & Personal(y)) -> Unprofessional(x))", "all x.((Employee(x) & DocksPayForPersonalCauses(x)) -> Unprofessional(x))", "(Unprofessional(docksEmployeePayForPersonalCauses))", "all x.((DocksEmployeePay(x) & PersonalRates(x)) -> Unprofessional(x))", "all x y.((DoorEmployee(x) & Employee(y) & Personal(y)) -> Unprofessional(x))", "all x.((DoorEmployeePay(x) & Personal(x)) -> Unprofessional(x))", "all x y.((Employee(x) & Employee(y) & DocksPayForPersonalRates(x,y)) -> Unprofessional(x))", "all x y.((DoorsEmployeePay(x) & PersonalRates(y)) -> Unprofessional(x))", "all x.((DocksEmployeePay(x) & PersonalCauses(x)) -> Unprofessional(x))"]}
{"id": "enwn_validation_759", "nl": "Alan docked Tim's pay for a personal reason.", "fol": "", "prediction": ["all x y.((Alan(x) & Tim(y)) -> DockedPayForPersonalRight(x,y))", "Alan docked Tim's pay for personal reason.", "all x.((Alan(x) & Tim(y)) -> DockedPayForPersonalRight(x,y))", "all x y z.((Alan(x) & Tim(y) & Pay(z)) -> DockedForPersonalRight(x,y,z))", "(Docked(Alan,Tim) & PersonalRight(Alan,Tim))", "all x y.((Alan(x) & Tim(y)) -> DockedPay(x,y))", "(DockedPalm(Alan,Tim) & PersonalRaison(Alan,Tim))", "Alan docked Tim's pay for personal reason.", "Alan DockedTim'sPayForPersonalRight(Alan,Tim)", "(DockedPay(Alan,Tim) & PersonalRight(Alan,Tim))", "all x y.((Alan(x) & Tim(y)) -> DockedPaid(x,y))", "all x.((Alan(x) & Tim(y)) -> DockedPayForPersonalRaison(x,y))", "Alan docked Tim's pay for personal reason.", "Alan docked Tim's pay for a personal reason.", "all x y.((Alan(x) & Tim(y)) -> DockedPayForPersonalRaison(x,y))", "Alan docked Tim's pay for personal reason."]}
{"id": "enwn_validation_760", "nl": "It was unprofessional for Alan to dock Tim's pay.", "fol": "", "prediction": ["all x.((Alan(x) & DocksTimPay(x)) -> Unprofessional(x))", "(UnprofessionalForAlanToDockTimPay(Alan,Tim))", "all x.((Alan(x) & DockTimPay(x)) -> Unprofessional(x))", "it was unprofessional for Alan to dock Tim's pay.", "all x y.((Alan(x) & Tim(y)) -> DocksPay(x,y))", "-ProfessionalForAlanToDockTimPay(Alan,Tim)", "all x y.((Alan(x) & Tim(y) & DockPay(x,y)) -> Unprofessional(x))", "(Unprofessional(Alan) & DocksTimPay(Alan))", "all x.((Alan(x) & DocksTimPay(x)) -> Unprofessional(x))", "(UnprofessionalForAlanToDockTimPay(Alan))", "-ProfessionalForAlanToDockTimPay(Alan)", "All x.((Alain(x) & DocksTimPay(x)) -> Unprofessional(x))", "Es war unprofessional for Alan to dock Tim's Pay.", "-ProfessionalForAlanToDockTimsPay(Alan,Tim)", "all x.((Alan(x) & DockTimPay(x)) -> Unprofessional(x))", "-ProfessionalForAlanToDockTimPay(Alan,Tim,Tim))"]}
{"id": "enwn_validation_761", "nl": "Alan should not have docked Tim's pay.", "fol": "", "prediction": ["all x.((Alan(x) & Tim(y)) -> -DockedPay(x,y))", "Alan should not have docked Tim's pay.", "-DockedTimsPay(Alan)", "(DockedTimsPay(Alan) -> -DockedTimsPay(Alan))", "all x y.((Alan(x) & Tim(y)) -> -DockedPay(x,y))", "all x.((Alan(x) & Tim(y)) -> -DockedPay(x,y))", "Alan should not have docked Tim'sPay(Alan,Tim)", "(-DockedTimsPay(Alan))", "all x y.((Alan(x) & Tim(y)) -> -DockedPay(x,y))", "all x.((Alan(x) & Tim(x)) -> -DockedPay(x,Tim))", "(DockedTim'sPay(Alan) & TimsPay(Alan))", "-DockedTimsPay(Alan,Tim)", "Alan should not have docked Tim's pay.", "all x.((Alan(x) & Tim(t)) -> -DockedPay(x,t))", "Alan should not have docked Tim'spay.", "-DockedTimsPay(Alan,Tim)"]}
{"id": "enwn_validation_762", "nl": "You should not inconvenience people.", "fol": "", "prediction": ["all x.((Person(x) & -Inconvenient(x)) -> -Inconvenient(x))", "all x.((Inconvenient(x) & People(y)) -> -Inconvenient(x,y))", "all x.(Inconvenient(x) -> -Incident(x))", "-InconvenientToPeople(x)", "all x.((Person(x) & -Inconvenient(x)) -> -Inconvenient(x))", "-IndignifyPeople(x)", "you should not inconvenience people.", "all x.(Inconvenient(x) -> -Inconvenient(x))", "all x y.((Person(x) & Inconvenient(y)) -> -Inconvenient(x,y))", "all x.((Inconvenient(x) & Person(y)) -> -Inconvenient(x,y))", "-InconvenientToPeople(x)", "-(IndignifyPeople(x) & IndulgePeople(x))", "all x y.((Person(x) & Inconvenient(y)) -> -Incentivize(x,y))", "-IncendiaryPersons(x)", "all x.(Inconvenient(x) -> -Incendiary(x))", "(-Inconvenient(you))"]}
{"id": "enwn_validation_763", "nl": "Preetha parked in front of her neighbor's car, blocking them in their shared driveway.", "fol": "", "prediction": ["all x y.((Preetha(x) & Neighbor(y)) -> ParksInFrontOf(x,y))", "all x y z.((Preetha(x) & Neighbor(y) & Car(z)) -> ParksInFrontOf(x,y,z))", "(ParksInFrontOfNeighborsCar(Preetha) & BlocksInSharedDriveway(Preetha,NeighborsCar))", "-(ParksInFrontOfNeighborsCar(Preetha,NeighborsCar) & BlocksInSharedDriveway(Preetha,NeighborsCar))", "-ParksInFrontOfNeighborsCar(Preetha,NeighborsCar) & BlocksInSharedDriveway(Preetha,NeighborsCar,NeighborsCar))", "preetha parked in front of neighbor's car, blocking shared driveway.", "all x.((Preetha(x) & Neighbor(x)) -> ParksInFrontOf(x,y))", "(ParksInFrontOfNeighborsCar(Preetha,NeighborsCar) & BlocksInSharedDriveway(Preetha,NeighborsCar))", "all x y.((Preetha(x) & Neighbor(y)) -> ParkedInFrontOf(x,y))", "(Parking(Preetha,NeighborsCar) & BlockingInSharedDriveway(Preetha,NeighborsCar))", "all x y z.((Preetha(x) & Neighbor(y) & Car(z)) -> ParkedInFrontOf(x,y,z))", "preetha parked in front of neighbor's car, blocking shared driveway.", "all x y.((Person(x) & Neighbor(y)) -> ParkedInFrontOf(x,y))", "(ParkingInFrontOfNeighborsCar(Preetha) & BlockingInSharedDriveway(Preetha,NeighborsCar))", "all x.((Preetha(x) & NeighborsCar(x)) -> ParksInFrontOf(x,y))", "(ParksInFrontOfNeighborsCar(Preetha,NeighborsCar) & BlocksInSharedDriveway(Preetha,NeighborsCar))"]}
{"id": "enwn_validation_764", "nl": "It's inconvenient to have your car blocked.", "fol": "", "prediction": ["all x.((Car(x) & Blocked(x)) -> Inconvenient(x))", "(InconvenientToBlockCar(x))", "all x.((Car(x) & Blocked(x)) -> Inconvenient(x))", "-InconvenientToBlockCar(x)", "(It's InconvenientToBlockCar(x))", "all x y.((Car(x) & CarBlocked(x)) -> Inconvenient(x,y))", "all x.((CarBlocked(x)) -> Inconvenient(x))", "all x.((Car(x) & Blocked(x)) -> Inconvenient(x))", "(InconvenientToBlock(car) & Car(car))", "exists x.(Car(x) & Blocked(x))", "all x.(Inconvenient(x) -> BlocksCar(x))", "all x y.((Car(x) & CarBlock(y)) -> Inconvenient(x,y))", "(InconvenientToBlock(car,car))", "all x.((Car(x) & Blocked(x)) -> Inconvenient(x))", "exists x.(Car(x) & Blocked(x))", "all x.((Car(x) & Blocked(x)) -> Inconvenient(x))"]}
{"id": "enwn_validation_765", "nl": "Preetha parking in front of her neighbor's car inconvenienced her neighbor.", "fol": "", "prediction": ["all x y.((Person(x) & Neighbor(y) & ParkingInFrontOf(x,y)) -> Inconvenient(x,y))", "all x.((ParkingInFrontOfNeighborsCar(x) & Inconvenient(x)) -> Preetha(x))", "all x y.((Preetha(x) & Neighbor(y)) -> ParkingInFrontOfCar(x,y))", "all x y z.((Preetha(x) & Neighbor(y) & ParkingInFrontOf(x,y) & Car(z)) -> Inconvenient(x,y,z))", "-(ParkingInFrontOfNeighborsCar(Preetha,NeighborsCar) & Inconvenient(Preetha,NeighborsCar))", "preetha parking in front of neighbor's car inconvenienced her neighbor.", "all x.(ParkingInFrontOfNeighborsCar(x) -> Inconvenient(x))", "all x.((Person(x) & Neighbor(x)) -> InconvenientParking(x,nearbyCar))", "(InconvenientParking(Preetha,NeighborsCar))", "all x y z.((Person(x) & Neighbor(y) & ParkingInFrontOf(x,y) & Neighbor(z)) -> Inconvenient(x,y,z))", "all x y.((Person(x) & Neighbor(y)) -> ParkingInFrontOfCar(x,y))", "all x.((PreethaParkingInFrontOfNeighborsCar(x)) -> Inconvenient(x))", "preetha parking in front of neighbor's car inconvenienced.", "(InconvenientParkingInFrontOfNeighborsCar(Preetha,Neighbor))", "(InconvenientPaths(Preetha,NeighborsCar))", "(InconvenientParking(Preetha,Neighbor))"]}
{"id": "enwn_validation_766", "nl": "Preetha should not have parked in front of her neighbor's car.", "fol": "", "prediction": ["all x.((Preetha(x) & NeighborCar(x)) -> -ParkedInFrontOf(x,y))", "all x y.((Preetha(x) & Neighbor(y)) -> -ParkedInFrontOf(x,y))", "(ParkedInFrontOfNeighborsCar(Preetha) | -ParkedInFrontOfNeighborsCar(Preetha)))", "(-ParkedInFrontOfNeighborsCar(Preetha,NeighborsCar))", "preetha should not have parked in front of neighbor's car.", "all x.((Preetha(x) & Neighbor(x)) -> -ParkedInFrontOfCar(x,y))", "Preetha should not have parked in front of her neighbor's car.", "(all x.((Preetha(x) & Neighbor(x)) -> -ParkedInFrontOf(x,NeighborCar)))", "-ParkedInFrontOfNeighborsCar(Preetha,NeighborsCar)", "all x y.((Preetha(x) & Neighbor(y)) -> -ParkedInFrontOf(x,y))", "Preetha should have parked in front of her neighbor's car.", "preetha should not have parked in front of neighbor's car.", "-ParkedInFrontOfNeighbor(Preetha,NeighborCar)", "-ParkedInFrontOfNeighborsCar(Preetha)", "all x.((Preetha(x) & NeighborsCar(x)) -> -ParkedInFrontOf(x,y))", "all x y.((Preetha(x) & Neighbor(y)) -> -ParkedInFrontOfCar(x,y))"]}
{"id": "enwn_validation_767", "nl": "It's rude to spoil a show.", "fol": "", "prediction": ["all x.((SpoilageShow(x) & Rusty(x)) -> -Spoises(x))", "all x y.((Spoilage(x) & Show(y)) -> Rust(x))", "all x.((Spoilage(x) & Show(x)) -> Rust(x))", "(RuleToSpoil(x) -> Show(x))", "all x.((SpoisesShow(x) & Rusty(x)) -> -Real(x))", "(RainToSpoil(x) -> Show(x))", "all x y.((SpoilageShow(x) & Show(y)) -> Rust(x))", "all x y.((Spoilage(x) & Show(y)) -> Rust(x))", "(RuleToSpoisesShow(x) -> Rusty(x))", "all x y.((Show(x) & Show(y)) -> Rust(x))", "all x.(RuleToSpoil(x) -> Show(x))", "(RainToSpoises(r) -> Show(r))", "all x.((SpoisesShow(x)) -> Rusty(x))", "exists x y.(Show(x) & Show(y) & Spoil(x,y))", "all x.(Rain(x) -> SpoilShow(x))", "all x.((SpoilageShow(x) & Rusty(x)) -> Reckless(x))"]}
{"id": "enwn_validation_768", "nl": "You shouldn't be rude.", "fol": "", "prediction": ["all x.((Rule(x) & -Rule(x)) -> -Rule(x))", "all x.(Rule(x) -> -Rule(x))", "all x.((Rule(x) & -Rule(x)) -> -Rule(x))", "-Rule(x)", "-Ruleful(x)", "all x.(Rule(x) -> -Rule(x))", "all x.((Rule(x) & -Rule(x)) -> -Rule(x))", "(-Rusty(you))", "-Rainful(x)", "all x.(NoRule(x) -> -Relative(x))", "-Ruleful(x)", "all x.(Rule(x) -> -Rule(x))", "all x.(Rubious(x) -> -Rubious(x))", "-Ruleful(you)", "-Rule.", "all x.(NoRule(x) -> -Relative(x))"]}
{"id": "enwn_validation_769", "nl": "Spoiling something means revealing a detail to someone before they get a chance to learn it for themselves.", "fol": "", "prediction": ["all x y.((Spoiling(x) & Person(y)) -> (DisclosingDetail(x,y) & -LearnsDetail(y,x)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Disclosing(x,y,z) & LearnsFor(z,y)))", "all x.(Spoiling(x) -> (DisclosingDetail(x) & BeforeChanceToLearn(x)))", "all x y.((Spoiling(x) & Person(y)) -> (Detail(x,y) & LearnsFor(y,x)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Detail(y) & Learns(z,y)))", "all x y.((Spooling(x) & Person(y)) -> (DisclosingDetail(x,y) & GettingChanceToLearn(y,x)))", "all x.(Spoiling(x) -> (Detail(x) & Unlearns(x,y)))", "all x y.((Spoiling(x) & Detail(y)) -> (Disclosing(x,y) & BeforeChanceToLearn(x,y)))", "all x.(Spooling(x) -> (Detail(x) & LearnsForEach(x)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Disclosing(x,y) & LearnsFor(z,y)))", "all x y z.((Spooling(x) & Detail(y) & Person(z)) -> (Disclosing(x,y) & LearnsFor(z,y)))", "exists x.(SpotsDetail(x) & ExperiencingDetailToPerson(x) & BeforeChanceToLearnForEach(x))", "all x.(Spoiling(x) -> (DisclosingDetail(x) & -LearnsDetail(x)))", "exists x.(Spooling(x) & DepictsDetail(x) & BeforeChanceToLearn(x,y))", "all x y z.((Spoiling(x) & Detail(y) & Person(z) & LearnsFor(z,y)) -> Disclosing(x,y,z))", "all x y.((Spoiling(x) & Person(y)) -> (Detail(y) & LearnsFor(y,x)))"]}
{"id": "enwn_validation_770", "nl": "Dane told Demarcus how the show ended before Demarcus got a chance to finish watching it.", "fol": "", "prediction": ["Dane told Demarcus how the show ended before Demarcus got a chance to finish watching it.", "all x y.((Dane(x) & Demarcus(y)) -> (Ends(x,y) & -CanFinish(y,x)))", "all x y z.((Dane(x) & Demarcus(y) & Show(z) & Ends(x,z)) -> TellsDemarcus(x,y,z))", "Demarcus told Dane how the show ended before he got a chance to finish watching it.", "(Dane(Dane) & Demarcus(Dane)) & HowShowEndsBeforeScreening(Dane,Dane))", "all x y.((Dane(x) & Demarcus(y)) -> (EndsShow(x,y) & -CanFinishWatching(y,x)))", "all x.((Dane(x) & Demarcus(y)) -> ShowEndedBeforeChanceToFinish(x,y))", "Demarcus (Dane) told him how the show ended before Demarcus got a chance to finish watching it.", "(all x.(Dane(x) -> EndsShow(x)) & Demarcus(x))", "(Dane(Dane) & Demarcus(Dane) & HowShowEndsBeforeScreening(Dane,Dane))", "Dane told Demarcus, \"ShowEndsBeforeChanceToFinish(Dumarcus,Dumarcus)\"", "all x y z.((Dane(x) & Demarcus(y) & Show(z) & Ends(x,z)) -> (Ends(x,y) & -Ends(y,z)))", "Dane told Demarcus how the show ended before Demarcus got a chance to finish watching it.", "all x y.((Dane(x) & Demarcus(y)) -> ShowEndedBeforeChanceToFinish(x,y))", "Demarcus told Dane how the show ended before he got the chance to finish watching it.", "Dane told Demarcus how the show ended before he got a chance to finish watching it."]}
{"id": "enwn_validation_771", "nl": "You shouldn't spoil shows for people.", "fol": "", "prediction": ["all x.((Show(x) & -Spoises(x,people)) -> -Spoises(x,people))", "all x.(Spoises(x,shows) -> -Spoises(x,people))", "all x y.((Show(x) & Person(y)) -> -Spoises(x,y))", "-SpoisesShowsForPeople(x)", "all x.((Show(x) & -SpoisesForPeople(x)) -> -SpoisesForPeople(x))", "all x.(SpoisesShows(x) -> -SpoisesForPeople(x))", "all x y.((Show(x) & Person(y)) -> -Spoils(x,y))", "(Spoises(shows,people) | -Spoises(shows,people)))", "all x.((Show(x) & People(y)) -> -Spoises(x,y))", "exists x.(Show(x) & -Spoises(x,people))", "(-SpoisesShowsForPeople(s))", "-SpoilShowsForPeople(x)", "all x y.((Show(x) & Person(y)) -> -Spoises(x,y))", "exists x.(Show(x) & -Spoises(x,People))", "all x y.((Show(x) & Person(y)) -> -Spoils(x,y))", "all x y.((Show(x) & People(y)) -> -Spoises(x,y))"]}
{"id": "enwn_validation_772", "nl": "Dane spoiled the show for Demarcus.", "fol": "", "prediction": ["all x y.((Dane(x) & Demarcus(y)) -> SpottedShow(x,y))", "(SpoiledShow(Dane,Demarcus))", "Dane spoils the show for Demarcus.", "all x.(Dane(x) -> SpottedShowForDemarcus(x))", "all x y.((Dane(x) & Demarcus(y)) -> SpoiltsShow(x,y))", "(SpookedShow(Dane,Demarcus))", "Dane spoiled the show for Demarcus.", "-SpoiledShowForDemarcus(Dane,Dane,Dane)", "Dane spoils show for Demarcus.", "-SpokedShowForDemarcus(Dane,Dane)", "(SpoiledShow(Dane,Darcus))", "(SpoisesDane(Dane,Darcus))", "DanesspoiledShowForDemarcus(Dane)", "all x y.((Dane(x) & Demarcus(y)) -> StolenShow(x,y))", "(SpokenShow(Dane,Demarcus))", "Dane spoiled the show for Demarcus."]}
{"id": "enwn_validation_773", "nl": "Dane should not have spoiled the show for Demarcus.", "fol": "", "prediction": ["all x.(Dane(x) -> -SpokedShowForDemarcus(x))", "all x y.((Dane(x) & Demarcus(y)) -> -SpokedShow(x,y))", "Dane should not have spoilt the show for Demarcus.", "all x.((Dane(x) & Demarcus(x)) -> -SpokedShow(x))", "-(Dane(Dane) & Demarcus(Dane))", "(-SpoiledShow(Dane,Darcus))", "Demarcus should not have spoilt the show for Dane.", "((Dane(d) & Demarcus(d)) -> -SpokedShow(d))", "-(Dane(d) & Demarcus(d))", "Dane should not have spoiled the show for Demarcus.", "(-SpokedShow(Dane,Demarcus))", "(Dane should not have spoiltShowForDemarcus(Dane))", "all x.(Dane(x) -> -SpokedShowForDemarcus(x))", "all x y.((Dane(x) & Demarcus(y)) -> -SpokedShow(x,y))", "Dane should not have spoiltShowForDemarcus.", "-(Dane(Dane) & Demarcus(Dane))"]}
{"id": "enwn_validation_774", "nl": "You should only call emergency services in an emergency.", "fol": "", "prediction": ["all x.((Emergency(x) & CallsEmergencyServices(x)) -> CallsEmergencyServices(x))", "all x y.((Emergency(x) & Emergency(y)) -> Calls(x,y))", "all x.((Emergency(x) & CallEmergencyServices(x)) -> CallEmergencyServices(x))", "all x.(Emergency(x) -> CallsEmergencyServices(x))", "all x y.((Emergency(x) & Emergency(y)) -> CallsEmergencyServices(x,y))", "all x.(Emergency(x) -> CallEmergencyServices(x))", "all x.((Emergency(x) & CallsEmergencyServices(x)) -> CallsEmergencyServices(x))", "all x.((EmergencyService(x) & Calls(x,y)) -> Calls(x,z))", "all x y.((Emergency(x) & EmergencyService(y)) -> Call(x,y))", "all x y.((Emergency(x) & CallEmergencyServices(y)) -> CallEmergencyServices(x,y))", "all x y.((Emergency(x) & EmergencyService(y)) -> Calls(x,y))", "all x.((Emergency(x) & CallsEmergencyServices(x)) -> -CallsEmergencyServices(x))", "all x.(Emergency(x) -> CallsEmergencyServices(x))", "All x y.((EmergencyService(x) & Emergency(y)) -> Calls(x,y))", "(all x.(Emergency(x) -> CallEmergencyServices(x)))", "all x.(Emergency(x) -> CallEmergencyServices(x))"]}
{"id": "enwn_validation_775", "nl": "The police are an emergency service.", "fol": "", "prediction": ["all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "all x y.((Police(x) & EmergencyService(y)) -> Is(x,y))", "all x.(Police(x) -> EmergencyService(x))", "(EmergencyService(police))", "(EmergencyService(police,police))", "all x y.((Police(x) & EmergencyService(y)) -> Police(x))", "all x y.((Police(x) & EmergencyService(y)) -> (Police(x) & EmergencyService(x)))", "all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "exists x.(PoliceService(x) & EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "All x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))"]}
{"id": "enwn_validation_776", "nl": "Alina called the police on some teenagers who were sitting across the street from her house because she thought they looked suspicious.", "fol": "", "prediction": ["all x y z.((Alina(x) & Teenager(y) & Street(z) & SittingAcrossStreet(y,z)) -> CallsPolice(x,y,z))", "all x y.((Alina(x) & Teenager(y) & SittingAcrossStreet(y,x)) -> CallsPolice(x,y))", "Alina called police on some teenagers who were sitting across street from her house because she thought they looked suspicious.", "all x.((Alina(x) & Teenager(x) & SittingAcrossStreet(x) & Suspicious(x)) -> CallsPolice(x))", "all x y z.((Alina(x) & Teenager(y) & Street(z) & SittingAcross(y,z)) -> CallsPolice(x,y,z))", "(SittingAcrossStreetFromHouse(Alina) & ThoughtSuspicious(Alina,YoungPeople))", "all x y.((Alina(x) & Teenager(y) & SittingAcrossStreet(y)) -> CallsPolice(x,y))", "(SittingAcrossStreetFromHouse(Alina) & ThoughtTheyLookSuspicious(Alina))", "(SittingAcrossStreetFromHasHouse(Alina) & ThoughtSuspicious(Alina))", "all x y.((Alina(x) & Teenager(y) & SittingAcrossStreetFrom(x,y)) -> CallsPolice(x,y))", "all x.((Alina(x) & Teenager(x) & SittingAcrossStreet(x) & Suspicious(x)) -> CallsPolice(x))", "all x y.((Alina(x) & Teenage(y)) -> (CallsPolice(x,y) & SittingAcrossStreet(y) & Suspicious(y)))", "all x y z.((Alina(x) & Teenage(y) & House(z) & SittingAcrossStreet(y,z)) -> CallsPolice(x,y))", "(SittingAcrossStreetFromHome(Alina,Alina) & ThoughtTheyLookSuspicious(Alina,Alina))", "all x.((Alina(x) & Teenage(y) & SittingAcrossStreetFromHouse(y)) -> CallsPolice(x,y))", "all x y z.((Alina(x) & Teenager(y) & Street(z) & SittingAcross(x,y,z)) -> CallsPolice(x,y))"]}
{"id": "enwn_validation_777", "nl": "Seeing someone who you think looks suspicious is not an emergency.", "fol": "", "prediction": ["all x.((Says(x,y) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "all x.((Sees(x,y) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "all x.((Person(x) & LooksSuspicious(x)) -> -Emergency(x))", "all x y.((Person(x) & LooksSuspicious(x)) -> -Emergency(y))", "all x y.((Says(x,y) & ThinksLooksSuspicious(x)) -> -Emergency(y))", "all x.((Seen(x) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "(Seeing(x,y) & ThinksLooksSuspicious(x)) -Emergency(y))", "-Emergency(seeing(seeing(seeing(e) & ThinksLooksSuspicious(e))", "-Emergency(SeesPerson(x) & ThinksLooksSuspicious(x))", "all x.((Sees(x,y) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "all x y.((Says(x,y) & LooksSuspicious(x)) -> -Emergency(y))", "all x.((Person(x) & LooksSuspicious(x)) -> -Emergency(x))", "all x y.((Person(x) & LooksSuspicious(x)) -> -Emergency(y))", "exists x.(Says(x,y) & ThinksLooksSuspicious(x))", "all x.((Says(x,y) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "all x y.((Person(x) & LooksSuspicious(x)) -> -Emergency(y))"]}
{"id": "enwn_validation_778", "nl": "You should only call the police in an emergency.", "fol": "", "prediction": ["all x.((Police(x) & Emergency(x)) -> Call(x,police))", "all x y.((Police(x) & Emergency(y)) -> Call(x,y))", "all x.((Police(x) & Emergency(x)) -> Calls(x,police))", "all x y.((Police(x) & Emergency(y)) -> Call(x,y))", "all x y z.((Police(x) & Emergency(y) & Call(z) & Call(z)) -> Call(x,y,z))", "(all x.(Emergency(x) -> CallPolice(x)))", "all x.((Police(x) & Emergency(x)) -> Call(x,police))", "all x.(Emergency(x) -> CallPolice(x))", "all x y.((Police(x) & Emergency(y)) -> Calls(x,y))", "all x.((CallsPolice(x) & Emergency(x)) -> CallsPolice(x))", "all x.((Police(x) & Emergency(x)) -> Calls(x,police))", "all x y.((Police(x) & Emergency(y)) -> Call(x,y))", "All x.(Emergency(x) -> CallPolice(x))", "all x.((Police(x) & Emergency(x)) -> Call(x,Police))", "all x y.((Police(x) & Emergency(y) & Calls(x,y)) -> Calls(x,y))", "all x y.((Police(x) & Emergency(y)) -> Calls(x,y))"]}
{"id": "enwn_validation_779", "nl": "Alina was not in an emergency when she called the police.", "fol": "", "prediction": ["all x.((Alina(x) & Police(x)) -> -Emergency(x))", "all x.((Alina(x) & CallsPolice(x)) -> -Emergency(x))", "(-Emergency(Alina) & CallsPolice(Alina,Police))", "all x y.((Alina(x) & Police(y)) -> -Emergency(x,y))", "Alina called police, but -emergency.", "Alina ne sat in an EmergencyWhenSheCallsPolice(n) & -InEmergency(n) & CallsPolice(n))", "all x y.((Alina(x) & Police(y) & Called(x,y)) -> -Emergency(x))", "Alina neemily-inemergency(Alina) -> CallsPolice(Alina,Police))", "Alina called police and was not in an Emergency.", "(-Emergency(Alina) & CalledPolice(Alina,Police))", "-EmergencyCalls(Alina,Police)", "all x.((Alina(x) & Police(y)) -> -Emergency(x,y))", "Alina was not in an Emergency when she called police.", "Alina called police, but she was not inemergency.", "all x.((Alina(x) & CallsPolice(x)) -> -Emergency(x))", "(-Emergency(Alina) & CallsPolice(Alina,Police))"]}
{"id": "enwn_validation_780", "nl": "Alina shouldn't have called the police.", "fol": "", "prediction": ["all x.((Alina(x) & -CallsPolice(x)) -> -CallsPolice(x))", "Alina shouldn't have called police.", "-CallsPolice(Alina,CallsPolice,Alina))", "all x.((Alina(x) & -CallsPolice(x)) -> -CallsPolice(x))", "Alina shouldn't have called police.", "-(Alina(a) & Police(a))", "all x.(Alina(x) -> -CallsPolice(x))", "-(Alina(a) & CalledPolice(a))", "Alina should've called the police.", "all x.((Alina(x) & -CallPolice(x)) -> -CallPolice(x))", "Alina shouldn't have called police.", "Alina shouldn't have called the police.", "(-CallsPolice(Alina))", "all x.((Alina(x) & -CallsPolice(x)) -> -CallsPolice(x))", "Alina shouldn't have called the police.", "Alina shouldn't have called the police."]}
{"id": "enwn_validation_781", "nl": "You should generally follow the law.", "fol": "", "prediction": ["all x.((You(x) & FollowsLaw(x)) -> FollowsLaw(x))", "all x.((DomesticLaw(x) & Follows(x,y)) -> Generally(x))", "all x.((Client(x) & FollowsLaw(x)) -> FollowsLaw(x))", "Generally FollowsLaw(x)", "all x.((UseLaw(x)) -> Follows(x,y))", "all x y.((Doctor(x) & Law(y)) -> Follows(x,y))", "all x.(FollowsLaw(x) -> Generally(x))", "all x.((Law(x) & Follows(x,y)) -> Follows(x,z))", "(all x.((Law(x) & Follows(x,y)) -> Follows(x,y)))", "all x.(Legal(x) -> Follow(x))", "all x y.((Law(x) & Law(y)) -> Follow(x,y))", "Generally FollowsLaw.", "all x.(FollowLaw(x) -> Generally(x))", "all x.(DoesLaw(x) -> Follows(x,y))", "all x y.((Member(x) & Law(y)) -> Follows(x,y))", "exists x.(Law(x) & Follow(x,y))"]}
{"id": "enwn_validation_782", "nl": "Darrel bought a 48-rack of beer for his highschool nephew's friend.", "fol": "", "prediction": ["all x y.((Darrel(x) & HighSchoolNephew(y)) -> BuysBeer(x,y))", "all x y z.((Darrel(x) & Brewery(y) & Nephew(z)) -> Buys(x,y,z))", "all x.((Darrel(x) & HighSchoolNephew(x)) -> BuysBeer(x,48))", "all x y.((Darrel(x) & Nephew(y)) -> BuysBeer(x,y))", "Darrel bought a 48-rack of beer for his nephew's friend.", "(Brew(Darrel) & HighSchoolNephew(Darrel) & Neighbor(Darrel))", "-(DarrelBorrowed(Darrel,48) & HighSchoolNephewFriend(Darrel,48))", "Darrel bought a 48RackOfBeer(Darrel,HighSchoolNephewFriend)", "-(DarrelBaker(Darrel) & HighSchoolNephew(Darrel) & Nephew(Darrel))", "Darrel bought 48-racksOfBeerForHighschoolNephewFriend(Darrel,Nephew)", "(BuysBeer(Darrel,48) & ForHighSchoolNephew(Darrel,Friend))", "all x y z.((Darrel(x) & Brewery(y) & HighSchoolNephew(z) & Buys(x,y,z)) -> Buys(x,y,z))", "all x.((Darrel(x) & HighschoolNephewFriend(x)) -> BuysBeer(x,48))", "(BuysBeer(Darrel,48) & HighschoolNephewFriend(Darrel,48))", "all x y.((Darrel(x) & HighschoolNephew(y)) -> BuysBeer(x,y))", "(BrewersRack(Darrel,48) & HighschoolNephewFriend(Darrel,48))"]}
{"id": "enwn_validation_783", "nl": "People in highschool mostly have highschool-aged friends.", "fol": "", "prediction": ["all x.(Highschool(x) -> HasHighschoolAgeFriends(x))", "all x y.((Person(x) & Highschool(y)) -> HasHighschoolAgeFriends(x,y))", "all x.((Person(x) & HighSchool(x)) -> HasHighschoolAgeFriends(x))", "all x.(Highschool(x) -> HasHighschoolAgeFriends(x))", "all x y.((Highschool(x) & Person(y)) -> HasHighschoolAgeFriends(y,x))", "all x y.(Highschool(x) -> (HasHighschoolAgeFriends(x) & HasHighschoolAgeFriends(y)))", "all x.(HighSchoolPerson(x) -> HasHighschoolAgeFriends(x))", "all x.(HighSchool(x) -> HasHighschoolAgeFriends(x))", "all x.((Person(x) & HighSchool(x)) -> HasHighschoolAgeFriends(x))", "(all x.(Highschooler(x) -> HasHighschoolAgeFriends(x)))", "all x y.((Person(x) & HighSchool(y)) -> HasHighschoolAgeFriends(x,y))", "all x.(Highschool(x) -> HasHighschoolAgedFriends(x))", "all x.(HighschoolPerson(x) -> HasHighschoolAgeFriends(x))", "all x.((Person(x) & HighSchool(x)) -> HasHighschoolAgeFriends(x))", "all x y.(Highschool(x) -> (HasHighschoolAgeFriends(x,y)))", "exists x.(HighSchoolFriend(x) & HasHighschoolAgeFriends(x))"]}
{"id": "enwn_validation_784", "nl": "Supplying minors with alcohol is illegal.", "fol": "", "prediction": ["all x.((Minor(x) & SupplyingAlcohol(x)) -> Illegal(x))", "all x y.((Minor(x) & Minor(y)) -> SupplyingAlcohol(x,y))", "(SupplyMinorsWithAlcohol(x) -> Illegal(x))", "all x.(SupplyMinorsWithAlcohol(x) -> Illegal(x))", "all x.((Minor(x) & SupplyingAlcohol(x)) -> Illegal(x))", "all x y.((Minor(x) & Alcohol(y)) -> Illegal(x,y))", "all x y.((Minor(x) & Minor(y) & SupplyingAlcohol(x,y)) -> Illegal(x))", "all x.(Minor(x) -> SupplyingAlcohol(x))", "all x.((Minor(x) & SupplyWithAlcohol(x)) -> Illegal(x))", "All x.(SupplyMinorsWithAlcohol(x) -> Illegal(x))", "all x.((Minor(x) & DrinksAlcohol(x)) -> Illegal(x))", "All x.(AlcoholSupply(x) -> Illegal(x))", "all x y.((Minor(x) & Minor(y) & DrinksAlcohol(x,y)) -> Illegal(x))", "All x.((Minor(x) & Alcohol(y)) -> Illegal(x))", "all x y.((Minor(x) & Alcohol(y)) -> Illegal(x,y))", "all x.((Minor(x) & SupplyingAlcohol(x)) -> Illegal(x))"]}
{"id": "enwn_validation_785", "nl": "Darrel's nephew's friend was probably a minor.", "fol": "", "prediction": ["all x.((Nephew(x) & Neighbor(x)) -> Minor(x))", "(Minor(Darrel) & Neighbor(Darrel))", "(NephewFriend(Darrel,Nephew) & ProbablyMinor(Darrel,Nephew))", "all x y.((Nephew(x) & Neighbor(y) & Neighbor(x,y)) -> Minor(x))", "Probably Minor(Darrel'sNephewFriend(Darrel,Nephew))", "all x.((DerelNephewFriend(x) & Neighbor(x)) -> Minor(x))", "(Friend(Darrel'sNephew) & Minor(Darrel))", "all x.((Nephew(x) & Neighbor(x)) -> Minor(x))", "all x.((Nephew(x) & NephewFriend(x)) -> Minor(x))", "all x.((Neep(x) & Neighbor(x) & NeighborFriend(x)) -> Minor(x))", "all x y.((DerelNephewFriend(x) & Neighbor(y) & Neighbor(x,y)) -> Minor(x))", "(Friend(Darrel) & Neighbor(Darrel))", "all x y.((Nephew(x) & Neighbor(y) & Neighbor(x,y)) -> Minor(x))", "(Minor(Darrel) & Neighbor(Darrel))", "Probably Minor(Darrel'sNephewFriend(Darrel,nephew)", "all x.(NephewFriend(x,Darrel) -> Minor(x))"]}
{"id": "enwn_validation_786", "nl": "Darrel was probably buying the beer for a minor.", "fol": "", "prediction": ["all x.((Darrel(x) & Minor(y)) -> BuysBier(x,y))", "all x y.((Darrel(x) & Beer(y)) -> BuysForMinor(x,y))", "all x.((Darrel(x) & BuysBeer(x)) -> Minor(x))", "all x.(Darrel(x) -> (BuysBerry(x) & ForMinor(x)))", "(BuysBerry(Darrel,Minor))", "Darrel probably bought the beer for a minor.", "Darrel probably bought beer for minor(Darrel,Berry,Minor)", "Probably boughtBerryForMinor(Darrel,Berry,Minor)", "(BuysBeer(Darrel,Minor(Darrel))", "all x.((Darrel(x) & Brew(y)) -> BuysForMinor(x,y))", "all x y.((Darrel(x) & Beer(y)) -> PurchasedForMinor(x,y))", "(BuysBerry(Darrel,Minor))", "Probably boughtBerryForMinor(Darrel,Berry)", "(BrewBeverage(Darrel) -> PurchasedForMinor(Darrel))", "(BuysBeer(Darrel,Minor(Darrel,Beer))", "all x y.((Darrel(x) & Minor(y)) -> BuysBier(x,y))"]}
{"id": "enwn_validation_787", "nl": "It was probably illegal for Darrel to buy the beer.", "fol": "", "prediction": ["all x.((Darrel(x) & BuyBeer(x)) -> Illegal(x))", "Probably IllegalForDarrelToBuyBeer(Darrel)", "probably illegal for Darrel to buy the beer.", "(It was probably illegal for Darrel to buy the beer.)", "(IsIllegalToBuyBeer(Darrel))", "(IsProbablyIllegalForDarrelToBuyBeer(Darrel))", "Es war wohl illegal for Darrel to BuyBeer(x)", "Probably illegal for Darrel to buy the beer.", "all x.((Darrel(x) & Beer(y)) -> Illegal(x,y))", "probably illegal for Darrel to buy the beer.", "(It was probably illegal(Darrel) & BuysBier(Darrel))", "Probably IllegalForDarrelToBuyBier(Darrel,Beer)", "(It was probably illegal for Darrel to BuyBeer(Darrel))", "all x.((Darrel(x) & BuyBeer(x)) -> Illegal(x))", "probably illegal for Darrel to buy the beer.", "all x.((Darrel(x) & Brewery(y)) -> Illegal(x,y))"]}
{"id": "enwn_validation_788", "nl": "Darrel shouldn't have bought the beer.", "fol": "", "prediction": ["Darrel shouldn't have bought the beer.", "all x.((Darrel(x) & -BuyedBeer(x)) -> -BuyedBeer(x))", "-BuyedBerry(Darrel)", "(Bear(Darrel) & -Buyed(Darrel))", "Darrel shouldn't have bought the beer.", "-Buyed(Darrel,Beer)", "-BoughtBerry(Darrel)", "all x.(Darrel(x) -> -BuyedBeer(x))", "all x.((Darrel(x) & -BuyedBier(x)) -> -BuyedBier(x))", "Darrel shouldn't have bought the beer.", "(-BuyedBeer(Darrel))", "(Brewery(Darrel) & -Buyed(Darrel))", "Darrel shouldn't have bought the beer.", "-BuysBeverage(Darrel)", "Darrel shouldn't have bought the beer.", "Darrel shouldn't have bought the beer."]}
{"id": "enwn_validation_789", "nl": "It's rude to interrupt people.", "fol": "", "prediction": ["all x.(RuleInterruptsPeople(x) -> InterruptsPeople(x))", "all x.((InterruptsPeople(x) & Rusty(x)) -> InterruptsPeople(x))", "all x y.((InterruptsPeople(x) & People(y)) -> Rust(x))", "it's rude to interrupt people.", "(RuleToInterruptPeople(x) -> InterruptsPeople(x))", "all x.((InterruptsPeople(x) & Rusty(x)) -> Reckless(x))", "-RuleToInterruptPeople(-)", "all x.(RuleInterruptingPeople(x) -> InterruptingPeople(x))", "all x.(Rule(x) -> InterruptPeople(x))", "all x.((InterruptPeople(x) & Rusty(x)) -> InterruptsPeople(x))", "IsRustToInterruptPeople(i)?", "all x y.((Interrupts(x,y) & Person(y)) -> Rust(x))", "(RuleToInterruptPeople(x) -> InterruptsPeople(x))", "all x y.((Interrupt(x) & Person(y)) -> Rust(x))", "all x.(InterruptsPeople(x) -> Rust(x))", "(RuleToInterruptPeople)"]}
{"id": "enwn_validation_790", "nl": "Miguel interrupted the song that Alice was listening to on the wireless speaker to play his song.", "fol": "", "prediction": ["all x y.((Michael(x) & Alice(y)) -> InterruptsSong(x,y))", "all x y z.((Michael(x) & Song(y) & WirelessSpeaker(z)) -> Interrupts(x,y,z))", "all x.((Miguel(x) & Alice(a)) -> InterruptsSongOnWirelessSpeaker(x,a))", "(InterruptsSong(Miguel,Alice) & ListensToOnWirelessSpeaker(Miguel,Alice))", "(InsertsSong(Miguel,Alice) & ListensToOnWirelessSpeaker(Miguel,Alice) & PlaysSong(Miguel,Alice))", "all x y.((Miguel(x) & Alice(y)) -> InterruptsSong(x,y))", "(InterruptedSong(Miguel,Alice) & ListeningToOnWirelessSpeaker(Miguel,Alice))", "Miguel interrupted the song that Alice was listeningto on the wirelessspeaker to play his song.", "-(InterruptedSong(Miguel,Alice,WirelessSpeaker) & PlaysSong(Miguel,Alice))", "(InterruptsSong(Miguel) & Alice(Alice) & ListensToOnWirelessSpeaker(Miguel) & PlaysSong(Miguel))", "all x.((Michael(x) & Alice(x)) -> InterruptsSongOnWirelessSpeaker(x))", "all x y z.((Michael(x) & Alice(y) & WirelessSpeaker(z)) -> InterruptsSong(x,y,z))", "(InterruptedSong(Miguel,Alice) & AliceAlice(Alice) & WirelessSpeaker(Miguel,Alice))", "all x y.((Mirror(x) & Song(y) & Alice(z)) -> InterruptsOnWirelessSpeaker(x,y,z))", "all x y z.((Mirror(x) & Song(y) & WirelessSpeaker(z) & Alice(y) & Interrupts(x,y,z)) -> Plays(x,y,z))", "all x.((Miguel(x) & Alice(y)) -> InterruptsSong(x,y))"]}
{"id": "enwn_validation_791", "nl": "You shouldn't interrupt people.", "fol": "", "prediction": ["all x.((Interrupt(x) & People(x)) -> -Interrupt(x))", "all x.((InterruptsPeople(x)) -> -InterruptsPeople(x))", "all x.(InterruptPeople(x) -> -InterruptPeople(x))", "all x y.((Interrupt(x,y) & Person(y)) -> -Interrupt(x,y))", "you shouldn't interrupt people.", "all x.((InterruptPeople(x)) -> -InterruptPeople(x))", "-InterruptPeople(x)", "all x y.((Interrupt(x) & Person(y)) -> -Interrupt(x,y))", "all x.(InterruptsPeople(x) -> -InterruptsPeople(x))", "-InterruptsPeople(x)", "-InterruptPeople(x)", "all x.(InterruptPeople(x) -> -InterruptPeople(x))", "all x.(InterruptsPeople(x) -> -InterruptsPeople(x))", "(-InterruptPeople(you))", "-InterruptsPeople(x)", "(-InterruptPeople(x))"]}
{"id": "enwn_validation_792", "nl": "Miguel shouldn't have interrupted Alice's song.", "fol": "", "prediction": ["all x.((Miguel(x) & AliceSong(x)) -> -Interrupted(x,Alice))", "all x.((Michael(x) & AliceSong(x)) -> -Interrupted(x,Alice))", "-InterruptedAlicesSong(Miguel)", "(InterruptedAliceSong(Miguel) & -InterruptedAliceSong(Miguel))", "Miguel shouldn't have interrupted Alice's song.", "all x y.((Michael(x) & Alice(y)) -> -InterruptedSong(x,y))", "-(Michael Shouldn'tInterruptedAlicesSong(Michael))", "Alice's Song Shouldn'tInterruptedMiguel(Miguel,Alice)", "all x.((Miguel(x) & Alice(y)) -> -InterruptedSong(x,y))", "-(Miguel(Miguel) & Alice(Alice))", "All x.(Michael(x) -> -InterruptedAlicesSong(x))", "all x.((Michael(x) & AlicesSong(x)) -> -Interrupted(x,Alice))", "(-InterruptedAlicesSong(Miguel))", "(-InterruptedAliceSong(Miguel,Alice))", "Miguel shouldn't have interrupted Alice's song.", "all x y.((Miguel(x) & Alice(y)) -> -InterruptedSong(x,y))"]}
{"id": "enwn_validation_793", "nl": "Foods that contain a lot of sugar are unhealthy.", "fol": "", "prediction": ["all x.((Food(x) & ContainsLotsOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLotOfSugar(x)) -> Unhealthy(x))", "all x y.((Food(x) & ContainsLotsOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLotsOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLotOfSugar(x)) -> Unhealthy(x))", "all x y.((Food(x) & ContainsLotOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & LotsOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLotsOfSugar(x)) -> Unhealthy(x))", "all x y.((Food(x) & ContainsLotsOfSugar(x)) -> Unhealthy(x))", "all x.((Fish(x) & ContainsLotsOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLotOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & LotsOfSugar(x)) -> Unhealthy(x))", "all x y.((Food(x) & ContainsLotsOfSugar(x)) -> Unhealthy(x,y))", "all x.((Food(x) & HasLotOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLotsOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & LotsOfSugar(x)) -> Unhealthy(x))"]}
{"id": "enwn_validation_794", "nl": "Monica refused to get her son Froot Loops because she thought they were too sugary.", "fol": "", "prediction": ["all x y.((Monica(x) & Son(y) & -TooSugary(y)) -> RefusedToGive(x,y))", "all x.((Monica(x) & SonFrootLoops(x)) -> -TooSugary(x))", "(RefusedToGiveFrootLoops(Monica,Sugary))", "all x y.((Monica(x) & Son(y) & FrootLoops(y)) -> (RefusedToGet(x,y) & -TooSugary(x)))", "(RefusedToGetFrootLoops(Monica,Sugary) & -TooSugary(Monica,Sugary))", "Monica refused to get son FrootLoops because she thought they were too sugary.", "(-(Monica(Monica) & SonFrootLoops(Monica)) -> TooSugary(Monica,FrootLoops))", "all x y z.((Monica(x) & Son(y) & Son(z) & FrootLoops(y) & Sugary(z)) -> RefusedToGet(x,y,z))", "(RefusedToGiveSonFrootLoops(Monica,Sugary))", "all x y.((Monica(x) & Son(y) & RefusedToGetFrootLoops(x,y)) -> TooSugary(x))", "(RiddenToGiveSonFrootLoops(Monica,Sugary))", "all x y.((Monica(x) & SonFrootLoops(y)) -> (RefusedToGet(x,y) & -TooSugary(x)))", "all x.((Monica(x) & SonFrootLoops(x)) -> RefusedToGet(x,Sugary))", "All x.((Monica(x) & Son(y) & FrootLoops(z)) -> (RefusedToGet(x,y,z) & TooSugary(y,z)))", "all x.((Monica(x) & SonFrootLoops(x)) -> (RefusedToGet(x,Sugary) & -TooSugary(x)))", "(-(MomaBoysFrootLoops(m) & Sugary(m)))"]}
{"id": "enwn_validation_795", "nl": "It's okay to refuse to do something if you have a good reason.", "fol": "", "prediction": ["all x.((Refuses(x) & GoodRight(x)) -> Okay(x))", "all x.((GoodRight(x) & RefusesToDo(x)) -> Okay(x))", "all x.((IsAlrightToRefuse(x) & GoodRight(x)) -> RefusalToDo(x))", "all x.((Refusal(x) & GoodRaison(x)) -> OK(x))", "all x.((RefusesToDo(x) & GoodRight(x)) -> OK(x))", "all x y.((Refuses(x,y) & GoodRight(y)) -> Okay(x,y))", "all x y.((Refusal(x) & GoodRaison(y)) -> Okay(x,y))", "(all x.((Refusal(x) & GoodRaison(x)) -> Acceptable(x)))", "all x y.(((Refusal(x) & GoodRaison(y)) -> OK(x,y))", "all x.((GoodRaison(x) & Refusal(x)) -> Acceptable(x))", "all x y.((FailRefusal(x) & GoodRaison(y)) -> Okay(x,y))", "exists x.(GoodRight(x) & RefusesToDo(x))", "exists x.(Refusal(x) & GoodRight(x))", "all x y.((Refusal(x) & GoodRight(y)) -> Acceptable(x,y))", "all x.((Refusal(x) & GoodRight(x)) -> OK(x))", "exists x.(Refusal(x) & GoodRaison(x))"]}
{"id": "enwn_validation_796", "nl": "It's a good idea to prevent your children from eating unhealthy food.", "fol": "", "prediction": ["all x.((Child(x) & -UnhealthyFood(x)) -> GoodIdea(x))", "all x y.((Child(x) & Child(y)) -> PreventsUnhealthyFood(x,y))", "(GoodIdeaToPreventUnhealthyFood(x) -> ChildrenEatUnhealthyFood(x))", "all x.((GoodIdea(x) & PreventsUnhealthyFood(x)) -> ChildrenEatUnhealthyFood(x))", "all x.((Child(x) & HealthyFood(x)) -> GoodIdea(x))", "all x.((Child(x) & -UnhealthyFood(x)) -> GoodIdea(x))", "all x y z.((Child(x) & Food(y) & Food(z) & -EatsUnhealthy(x,y,z)) -> GoodIdea(x))", "all x y.((Child(x) & Child(y)) -> PreventsUnhealthyFood(x,y))", "all x.((Child(x) & GoodIdea(x)) -> PreventsUnhealthyFood(x))", "(GoodIdeaToPreventUnhealthyFood(i) & Children(i))", "all x.((GoodIdea(x) & PreventsUnhealthyFood(x)) -> GoodIdea(x))", "all x y.((Child(x) & Child(y)) -> GoodIdea(x,y))", "exists x.(Child(x) & PreventsEatingUnhealthyFood(x))", "all x y.((Child(x) & Food(y) & EatsUnhealthy(x,y)) -> GoodIdea(x))", "all x y.((Child(x) & Child(y)) -> (PreventsUnhealthyFood(x,y) & EatsUnhealthyFood(x,y)))", "exists x.(Child(x) & PreventsUnhealthyFood(x))"]}
{"id": "enwn_validation_797", "nl": "Monica refused to get her son Froot Loops because she thought they were unhealthy.", "fol": "", "prediction": ["all x y.((Monica(x) & Son(y) & -Unhealthy(y)) -> RefusedToGetFrootLoops(x,y))", "all x.((Monica(x) & SonFrootLoops(x)) -> -Unhealthy(x))", "all x y.((Monica(x) & Son(y) & Unhealthy(y)) -> RefusedToGetFrootLoops(x,y))", "(Unhealthy(Monica,FrootLoops) & Monica(Monica,FrootLoops))", "(RefusedToGetSonFrootLoops(Monica,SonFrootLoops) & ThoughtsTheyEvenUnhealthy(Monica,SonFrootLoops))", "(-(Monica(Monica) & SonFrootLoops(Monica)) -> Unhealthy(Monica))", "(RefusedToGiveSon(Monica,FrootLoops) -> Unhealthy(Monica,FrootLoops))", "Monica refused to get sons FrootLoops because they were unhealthy.", "all x y.((Monica(x) & Son(y)) -> (RefusedToGet(x,y) & Unhealthy(y)))", "(Unhealthy(Monica) & Son(Monica,FrootLoops))", "all x y z.((Monica(x) & Son(y) & Son(z) & Unhealthy(y,z)) -> RefusedToGet(x,y,z))", "all x.((Monica(x) & Son(y) & FrootLoops(z)) -> (RefusedToGet(x,y,z) & Unhealthy(y,z)))", "all x y.((Monica(x) & SonFrootLoops(y)) -> (RefusedToGet(x,y) & Unhealthy(y)))", "all x.((Monica(x) & SonFrootLoops(x)) -> Unhealthy(x))", "(-(Monica's Son(s) & FrootLoops(s)) | Unhealthy(s)))", "All x.((Monica(x) & Son(y) & Unhealthy(y)) -> RefusedToGive(x,y))"]}
{"id": "enwn_validation_798", "nl": "It's okay to refuse to give your children unhealthy food.", "fol": "", "prediction": ["all x.((Child(x) & -UnhealthyFood(x)) -> OKToRefuse(x,y))", "all x.((Child(x) & RefusesUnhealthyFood(x)) -> OKToRefuse(x))", "all x y.((Child(x) & Child(y)) -> RefusesUnhealthyFood(x,y))", "(all x.((Child(x) & UnhealthyFood(x)) -> Refuses(x,y))", "all x.((Child(x) & -GivesUnhealthyFood(x)) -> OkayToRefuse(x,y))", "all x y.((Child(x) & Child(y) & RefusesUnhealthyFood(x,y)) -> OKToRefuse(x,y))", "(all x.((Child(x) & UnhealthyFood(x)) -> Acceptable(x)))", "all x y.((Child(x) & Child(y)) -> RefusesUnhealthyFood(x,y))", "(all x.(RefusesUnhealthyFood(x) -> Children(x)))", "all x.((Child(x) & RefusesUnhealthyFood(x)) -> OK(x))", "All x.(RefusesToGiveUnhealthyFood(x) -> OkayToRefuse(x))", "exists x.(RefusesUnhealthyFood(x) & Children(x))", "all x y.((Child(x) & RefusesUnhealthyFood(x)) -> OKToRefuse(x,y))", "all x.((Child(x) & RefusesUnhealthyFood(x)) -> Okay(x))", "all x y.((Child(x) & Child(y)) -> RefusesUnhealthyFood(x,y))", "all x.((Child(x) & RefusesUnhealthyFood(x)) -> OKToRefuse(x,y))"]}
{"id": "enwn_validation_799", "nl": "It was okay for Monica to refuse to get her son Froot Loops.", "fol": "", "prediction": ["all x.((Monica(x) & RefusedToGetFrootLoops(x)) -> Okay(x))", "all x y.((Monica(x) & Son(y) & RefusedToGetFrootLoops(x,y)) -> Okay(x))", "(all x.((Monica(x) & Son(y)) -> RefusedToGet(x,y)))", "all x y.((Monica(x) & Son(y)) -> RefusedToGetFrootLoops(x,y))", "all x.((Monica(x) & RefusedToGetFrootLoops(x)) -> OK(x))", "all x.((Monica(x) & RefusedToGetSonFrootLoops(x)) -> Okay(x))", "All x.((Momia(x) & Son(y)) -> RefusedToGetFrootLoops(x,y))", "all x y.((Momia(x) & Son(y) & RefusedToGetFrootLoops(x,y)) -> Okay(x))", "(AlwaysAlwaysAlways(Monica,Mom,FrootLoops))", "All x.((Monica(x) & SonFrootLoops(x)) -> Acceptable(x))", "(all x.((Monica(x) & Son(x)) -> RefusesToGetFrootLoops(x)))", "(all x.((Monica(x) & Son(y) & RefusedToGet(x,y)) -> Okay(x,y)))", "All x.(AlwaysAlways(x) -> MonicaRefusedToGetFrootLoops(x))", "All x.((Monica(x) & Son(y) & RefusedToGetFrootLoops(x,y)) -> Okay(x))", "all x y.((Monica(x) & SonFrootLoops(y)) -> RefusedToGet(x,y))", "all x y.((Monica(x) & Son(y)) -> RefusedToGetFrootLoops(x,y))"]}
{"id": "enwn_validation_800", "nl": "Tax fraud is inadvisable.", "fol": "", "prediction": ["all x.(TaxFraud(x) -> Inadvisable(x))", "all x.(TaxFraud(x) -> Inadvisable(x))", "all x y.((TaxFraud(x) & Tax(y)) -> Inadvisable(x))", "(Inadvisable(taxFraud) & Inadvisable(taxFraud))", "all x.((TaxFraud(x) & Inadvisable(x)) -> TaxFraud(x))", "(InadvisableToFraud(tax)", "all x.(Taxefraud(x) -> Inadvisable(x))", "all x.(TaxFraud(x) -> Inadvisable(x))", "all x y.((TaxFraud(x) & Tax(y)) -> Inadvisable(x,y))", "(all x.(TaxFraud(x) -> Inadvisable(x)))", "all x.(TaxFraud(x) -> Inadvisable(x))", "all x.(TaxeFraud(x) -> Inadvisable(x))", "all x.((TaxFraud(x) & Inadvisable(x)) -> TaxFraud(x))", "all x y.((TaxFraud(x) & Tax(y)) -> Inadvisable(x))", "all x.(TaxFraud(x) -> Inadvisable(x))", "all x.(TaxFraud(x) -> Inadvisable(x))"]}
{"id": "enwn_validation_801", "nl": "Writing personal purchases off as business expenses is tax fraud.", "fol": "", "prediction": ["all x.((WritesPersonalPurchasesOffAsBusinessExpenses(x)) -> TaxFraud(x))", "all x y.((PersonalPurchase(x) & BusinessExpense(y)) -> TaxFraud(x))", "all x.((WritesPersonalPurchasesOffAsBusinessExpenses(x)) -> TaxFraud(x))", "all x.(WritesPersonalPurchasesOffAsBusinessExpenses(x) -> TaxFraud(x))", "all x y z.((PersonalPurchase(x) & BusinessExpense(y) & Purchase(z) & WritesOff(x,z)) -> TaxFraud(x))", "all x y.((PersonalPurchase(x) & BusinessExpense(y)) -> TaxFraud(x,y))", "all x.(WritesPersonalCostsOffAsBusinessExpenses(x) -> TaxFraud(x))", "all x.((WritesPersonalPurchasesOffAsBusinessExpenses(x)) -> TaxFraud(x))", "all x.((WritesPersonalCostsOffAsBusinessExpenses(x)) -> TaxFraud(x))", "all x y.((PersonalCost(x) & BusinessExpense(y)) -> TaxFraud(x))", "all x y.((PersonalProceeding(x) & BusinessExpense(y) & WritesOff(x,y)) -> TaxFraud(x))", "all x y.((PersonalPurchase(x) & BusinessExpense(y)) -> TaxFraud(x))", "all x.((WritesPersonalPurchasesOffAsBusinessExpenses(x)) -> TaxFraud(x))", "all x y.((PersonalPurchase(x) & BusinessExpense(y)) -> TaxFraud(x,y))", "all x.((WritingOffPersonalPurchasesAsBusinessExpenses(x)) -> TaxFraud(x))", "all x.(WritesPersonalPurchasesOffAsBusinessExpenses(x) -> TaxFraud(x))"]}
{"id": "enwn_validation_802", "nl": "Patrice bought himself a jacuzzi and wrote it off as a business expense.", "fol": "", "prediction": ["all x.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOffAsBusinessExpense(x,y)))", "all x y.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOffAsBusinessExpense(x,y)))", "(BoughtJacuzzi(Patrice) & WritedOffBusinessExpense(Patrice))", "all x.(Patrice(x) -> (BuysJacuzzi(x) & WritesOffBusinessExpense(x)))", "Patrice bought himself a jacuzzi and wrote it off as business expense.", "(BuysJacuzzi(Patrice) & WritesAsBusinessExpense(Patrice))", "all x.((Patrice(x) & Jacuzzi(x)) -> (Buys(x,y) & WritesOff(x,z)))", "all x y.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOff(x,y)))", "all x y z.((Patrice(x) & Jacuzzi(y) & BusinessExpense(z)) -> (Buys(x,y) & WritesOff(x,z)))", "(BoughtJacuzzi(Patrice) & WrittenOffBusinessExpense(Patrice))", "(BuysJacket(Patrice,Jacuzzi) & WritesOffBusinessExpense(Patrice,Jacket))", "(BuysJacket(Patrice) & WritesOffBusinessExpense(Patrice,Jacket))", "all x.(Patrice(x) -> (BuysJacuzzi(x) & WritesOffAsBusinessExpense(x)))", "all x y.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOffAsBusinessExpense(x,y)))", "all x.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOffAsBusinessExpense(x,y)))", "(BoughtJacuzzi(Patrice) & BusinessExpense(Patrice))"]}
{"id": "enwn_validation_803", "nl": "Writing the jacuzzi off as a business expense was tax fraud.", "fol": "", "prediction": ["all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x y.((Jacuzzi(x) & BusinessExpense(y)) -> TaxFraud(x,y))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x y.((Jacuzzi(x) & BusinessExpense(y)) -> TaxFraud(x))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x y.((Jacuzzi(x) & BusinessExpense(y)) -> TaxFraud(x,y))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x y.((Jacket(x) & BusinessExpense(x) & WrittenOff(x,y)) -> TaxFraud(x))", "all x.(WritesOffJacuzziAsBusinessExpense(x) -> TaxFraud(x))", "all x y.((Jacuzzi(x) & BusinessExpense(y)) -> TaxFraud(x,y))", "all x.((Jacket(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.(WritesOffJacuzziAsBusinessExpense(x) -> TaxFraud(x))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x y.((Jacuzzi(x) & BusinessExpense(y)) -> TaxFraud(x,y))", "all x.((Jacket(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))"]}
{"id": "enwn_validation_804", "nl": "Patrice should not have written off the jacuzzi.", "fol": "", "prediction": ["all x.((Patrice(x) & Jacuzzi(y)) -> -WrittenOff(x,y))", "-(WrittenOffJacuzzi(Patrice) & -(WrittenOffJacuzzi(Patrice) & -(WrittenOffJacuzzi(Patrice))))", "(-WrittenOffJacuzzi(Patrice))", "all x.((Patrice(x) & -WrittenOffJacuzzi(x)) -> -WrittenOffJacuzzi(x))", "-(WrittenOffJacuzzi(Patrice) & -WrittenOffJacuzzi(Patrice))", "all x y.((Patrice(x) & Jacuzzi(y)) -> -WrittenOff(x,y))", "((Patrice(Patrice) & Jacuzzi(Patrice)) -> -WrittenOff(Patrice,Patrice))", "all x.((Patrice(x) & Jacuzzi(y)) -> -WrittenOff(x,y))", "Patrice ne swore off jacuzzi.", "-(WrittenOffJacuzzi(Patrice) | WrittenOffJacuzzi(Patrice)))", "Patrice ne should have written off the jacuzzi.", "(NothingAboutJacuzzi(Patrice) -> -WrittenOffJacuzzi(Patrice))", "-(PatriceBoardedOffJacuzzi(Patrice))", "(-WrittenOffJacuzzi(Patrice))", "all x.((Patrice(x) & Jacuzzi(x)) -> -WrittenOff(x,y))", "-(WrittenOffJacuzzi(Patrice) -> -Patrice(Patrice))"]}
{"id": "enwn_validation_805", "nl": "Spiking someone's drink is a very bad thing to do.", "fol": "", "prediction": ["all x.(SpikingDrink(x) -> BadThingToDo(x))", "all x y.((Drink(x) & Spiking(x,y)) -> BadThingToDo(x))", "all x.(Spiking(x) -> BadThingToDo(x))", "all x y.((Drink(x) & Spiking(y)) -> BadThingToDo(x,y))", "(BadThingToDo(SpikingDrink(SpikingDrink(SpikingDrink))", "all x.((SpikingDrink(x) & BadThing(x)) -> VeryBadThing(x))", "all x.(SpikingDrink(x) -> BadThingToDo(x))", "all x y.((Drink(x) & Spiking(x,y)) -> BadThingToDo(x,y))", "all x y.((Spiking(x) & Person(y)) -> BadThingToDo(x,y))", "exists x y z.(Drink(x,y) & Drink(z) & Spiking(x,z) & BadThingToDo(x))", "all x.((SpikingDrink(x) & BadThingToDo(x)) -> VeryBadThing(x))", "all x y.((Piking(x) & Person(y) & Drink(y)) -> BadThingToDo(x,y))", "all x.(Spiding(x) -> BadThingToDo(x))", "all x.((Drink(x) & Spiking(x)) -> BadThingToDo(x))", "all x y.((Drink(x) & Spiking(y)) -> BadThingToDo(x))", "all x.(Spiking(x) -> BadThingToDo(x))"]}
{"id": "enwn_validation_806", "nl": "If someone does something bad to you, it makes sense to want to avoid them.", "fol": "", "prediction": ["all x.((DoesBadToYou(x) & MakesSense(x)) -> WantsToAvoid(x))", "all x y.((DoesBadToYou(x) & Person(y)) -> MakesSenseToVisit(x,y))", "all x.(DoesBadToYou(x) -> MakesSenseToVisit(x))", "all x.((DoesBadToYou(x) & WantsToAvoid(x)) -> MakesSense(x))", "(DoesBadToYou(x) -> MakesSenseToVisit(x))", "all x y.((DoesBadToYou(x) & Person(y)) -> MakesSenseToAvoid(x,y))", "all x y.((Person(x) & BadToYou(x)) -> MakesSenseToVisit(x,y))", "all x y.((DoesBadTo(x,y) & Person(y)) -> MakesSenseToAvoid(x,y))", "all x.(DoesBadTo(x,y) -> MakesSenseToVisit(x,y))", "all x.((DoesBadToYou(x) & MakesSenseToAvoid(x)) -> Avoid(x))", "all x.((DoesBadToYou(x)) -> MakesSenseToVisit(x))", "exists x.(DoesBadTo(x,y) & You(y) & WantsToAvoid(x,y))", "all x.(DoesBadToYou(x) -> MakesSenseToVisit(x))", "all x y.((Person(x) & BadToYou(x)) -> MakesSenseToVisit(y,x))", "exists x.(BadToYou(x) & MakesSenseToVisit(x,y))", "all x y.((DoesBadToYou(x) & Person(y)) -> MakesSenseToVisit(x,y))"]}
{"id": "enwn_validation_807", "nl": "Elena told her friends to cut ties with Pat after he spiked her drink.", "fol": "", "prediction": ["all x y.((Ellen(x) & Pat(y) & SpikedDrink(x,y)) -> CutTies(x,y))", "all x y z.((Ellen(x) & Pat(y) & Tie(z) & SpikedDrink(y,z)) -> CutTies(x,y,z))", "(SpikesDrink(Elena,Pat) & TellsFriendsToCutTies(Elena,Pat))", "all x y.((Eleanor(x) & Pat(y) & SpikedDrink(y)) -> CutTies(x,y))", "all x y z.((Eleana(x) & Pat(y) & Tie(z) & SpikedDrink(y)) -> CutTies(x,y,z))", "Elena told friends to cut ties with Pat after spikedDrink(e) & Pat spikedDrink(e))", "Elena told her friends to cut ties with Pat after he spiked her drink.", "(all x.((Ellen(x) & Pat(x)) -> CutTiesWith(x,Pat)))", "all x y.((Friend(x) & Pat(y) & SpikedDrink(y,x)) -> CutTiesWith(x,y))", "Elena told friends to cutTiesWithPat after spikedDrink(e) & Pat SpikedDrink(e))", "(SpikesDrink(Elena,Pat) & CutsTies(Elena,Pat))", "all x.((Ellen(x) & PatSpikesDrink(x)) -> CutTiesWith(x,Ellen))", "(SpikedDrink(Ellen) & TellsFriendsToCutTies(Ellen))", "Elena told friends to cut ties with Pat after spikedDrink(e) & -SpokenDrink(e) & PatSpokenDrink(e))", "all x y.((Friend(x) & Pat(y) & SpikedDrink(x,y)) -> CutTies(x,y))", "(SpokenDrink(Elena,Pat) & CutTies(Elena,Pat))"]}
{"id": "enwn_validation_808", "nl": "If you don't want social contact with someone, your friends also need to stop associating with them.", "fol": "", "prediction": ["all x.((Friend(x) & -WantsSocialContact(x)) -> StopsAssociating(x))", "all x y.((Friend(x) & Friend(y)) -> StopAssociating(x,y))", "all x.((Friend(x) & -WantSocialContact(x)) -> StopAssociating(x))", "all x y.((Friend(x) & -WantSocialContact(x,y)) -> StopAssociating(x,y))", "all x y.((Friend(x) & Friend(y) & -WantsSocialContact(x,y)) -> StopsAssociating(x,y))", "(-WantSocialContactWith(Friend(Friend)) -> StopAssociatingWith(Friend))", "all x.((Friend(x) & -WantsSocialContact(x)) -> StopsAssociating(x))", "all x y.((Friend(x) & Friends(y) & -WantsSocialContact(x,y)) -> StopsAssociating(x,y))", "(-WantSocialContactWith(Friends))", "all x.((Friend(x) & -SocialContact(x)) -> StopAssociating(x))", "(all x.((Friend(x) & -WantsSocialContact(x)) -> StopAssociatingWith(x,y)))", "all x.((Friends(x) & -WantSocialContact(x)) -> StopAssociating(x))", "all x.((Friend(x) & -WantSocialContact(x)) -> StopAssociating(x))", "all x y.((Friend(x) & -WantSocialContact(x,y)) -> StopAssociating(x,y))", "all x.((Family(x) & -WantsSocialContact(x)) -> StopAssociatingWith(x,y))", "all x.((Friend(x) & -WantsSocialContact(x)) -> StopsAssociatingWith(x,y))"]}
{"id": "enwn_validation_809", "nl": "If someone spikes your drink, it makes sense to want to avoid them.", "fol": "", "prediction": ["all x.(SpidersDrink(x) -> MakesSenseToAvoid(x))", "all x y.((Person(x) & Drink(y) & Spikes(x,y)) -> MakesSenseToAvoid(x,y))", "all x.(SpidesDrink(x) -> MakesSenseToAvoid(x))", "all x.((Person(x) & SpikesDrink(x)) -> MakesSenseToAvoid(x))", "all x y.((Spiders(x) & Drink(y)) -> MakesSenseToAvoid(x,y))", "all x.(SpidersDrink(x) -> MakesSenseToAvoid(x))", "(SpidersDrink(x) -> Avoids(x))", "all x.(SpokensDrink(x) -> MakesSenseToAvoid(x))", "all x y.((Spider(x) & Drink(y) & Spikes(x,y)) -> MakesSenseToAvoid(x,y))", "all x y.((Person(x) & Drink(y) & Spikes(x,y)) -> MakesSenseToAvoid(x,y))", "all x.((SpidersDrink(x) & WantsAvoid(x)) -> MakesSense(x))", "all x.(SpidersDrink(x) -> MakesSenseToVisit(x))", "(SpidersDrink(x) -> Avoids(x))", "exists x.(Spider(x) & Drink(y) & Spikes(x,y))", "all x y.((Person(x) & Drink(y) & Spikes(x,y)) -> MakesSenseToVisit(x,y))", "all x.(SpinsDrink(x) -> AvoidsDrink(x))"]}
{"id": "enwn_validation_810", "nl": "Elena was justified in wanting to avoid Pat.", "fol": "", "prediction": ["(All x.((Elena(x) & Pat(x)) -> Justified(x)))", "all x.((Elena(x) & Pat(y)) -> JustifiedInWantingToAvoid(x,y))", "((Ellen(Ellen) & Pat(Pat)) -> Justified(Ellen))", "Elena a justifiedWantToAvoidPat.", "all x y.((Ellen(x) & Pat(y)) -> JustifiedInWantingToAvoid(x,y))", "(WantToAvoidPat(Ellena,Pat) & Justified(Ellena,Pat))", "Elena & Pat & -((WantToAvoid(Eleanor) & Pat(Eleanor)))", "(Justified(Ellen) & -(EscapePat(Ellen) | AvoidPat(Ellen))))", "Elena was justified in wanting to avoidPat.", "Elena a justifiable desire to avoidPat.", "Elena & Pat -WantToAvoid(e) & Justified(e))", "Elena was justifiable in wanting to avoidPat.", "Elena's justification for wanting to avoidPat.", "all x.((Elena(x) & Pat(x)) -> Justified(x))", "all x.((Eleanor(x) & Pat(p)) -> JustifiedInWantingToAvoid(x,p,p))", "(All x.((Ellen(x) & Pat(y)) -> Justified(x)))"]}
{"id": "enwn_validation_811", "nl": "If Elena didn't want social contact with Pat, her friends would also need to stop associating with him.", "fol": "", "prediction": ["all x.((Ellen(x) & -WantSocialContact(x,Pat)) -> FriendsHaveToStopAssociating(x,Pat))", "(-WantSocialContactWithPat(Ellen(Ellen) & FriendsWantToStopAssociatingWithPat(Ellen))", "all x.((Eleanor(x) & -WantSocialContact(x,Pat)) -> FriendsHaveToStopAssociating(x,Pat))", "all x y.((Ellen(x) & Pat(y)) -> -WantsSocialContact(x,y))", "all x.((Ellen(x) & -WantsSocialContact(x,Pat)) -> FriendsStopAssociating(x,Pat))", "all x y.((Friend(x) & -WantSocialContact(x,y) & Pat(y)) -> StopAssociating(x,y))", "(-WantSocialContact(Ellen(Ellen) & Pat(Pat)) -> FriendsHaveToStopAssociating(Ellen(Ellen))", "-(WantSocialContact(Ellen(Ellen) & Pat(Pat)) -> FriendsStopAssociating(Ellen(Ellen))", "(-WantSocialContactWithPat(Eleanor) & FriendsWantToStopAssociatingWithPat(Eleanor))", "all x y.((Family(x) & -WantSocialContact(x,y)) -> StopAssociatingWith(x,y))", "(all x.((Ellen(x) & -WantSocialContact(x,Pat)) -> -WantSocialContact(x,Pat)))", "all x.((Friends(x) & -WantSocialContact(x,Pat)) -> StopAssociating(x,Pat))", "all x.((Family(x) & -WantSocialContact(x)) -> StopAssociatingWithPat(x))", "all x y.((Friend(x) & Pat(y) & -WantsSocialContact(x,y)) -> StopsAssociating(x,y))", "all x.((Ellen(x) & -SocialContact(x,Pat)) -> FriendsStopAssociating(x,Pat))", "all x y.((Family(x) & Friends(y) & -WantSocialContact(x,y)) -> StopAssociatingWith(y,x))"]}
{"id": "enwn_validation_812", "nl": "Elena was justified in telling her friends to cut ties with Pat.", "fol": "", "prediction": ["all x y.((Ellen(x) & Pat(y)) -> JustifiedInTeaching(x,y))", "all x y z.((Ellen(x) & Pat(y) & Friends(z)) -> CutTiesWith(x,y,z))", "all x y.((Friend(x) & Pat(y)) -> CutTiesWith(x,y))", "(JustifiedInTeething(Ellen) & CutTiesWithPat(Ellen))", "Elena was justified in telling friends to cutTiesWithPat.", "(Justified(Ellen) & CutTiesWithPat(Ellen))", "all x y.((Eleanor(x) & Pat(y)) -> JustifiedInTeething(x,y))", "((Ellen(Eva) & Pat(Eva)) -> CutTies(Eva,Eva,Eva)))", "all x.((Ellen(x) & Pat(x)) -> JustifiedInTeething(x))", "Elena was justified in telling friends to cutTiesWithPat.", "(JustifiedInTeething(Elena,Pat) & CutTies(Elena,Pat))", "all x y z.((Eleanor(x) & Pat(y) & Friends(z)) -> CutTiesWith(x,y,z))", "(all x.((Ellen(x) & Friends(x)) -> CutTiesWithPat(x)))", "Elena was justified in telling friends to cut ties with Pat.", "Elena's justification was in telling friends to cut ties with Pat.", "all x.((Ellen(x) & Friends(y) & Pat(z)) -> CutTies(x,y,z))"]}
{"id": "enwn_validation_813", "nl": "When you hit someone's car, you should leave a note.", "fol": "", "prediction": ["all x y.((HitCar(x,y) & Person(y)) -> LeaveNote(x,y))", "all x.((HitCar(x) & Person(y)) -> LeaveNote(x,y))", "all x y.((HitCar(x,y) & Person(y)) -> ShouldLeaveNote(x,y))", "all x.((HitCar(x) & Person(x)) -> ShouldLeaveNote(x))", "all x y.((HitCar(x) & Person(y) & Hits(x,y)) -> LeaveNote(x))", "all x y.((Camera(x) & Hit(x,y)) -> LeaveNote(x))", "all x.((HitCar(x) & Person(y) & Hits(x,y)) -> LeaveNote(x))", "all x y z.((HitCar(x,y) & Person(z) & HitsCar(x,z)) -> LeaveNote(x,y))", "all x y.(((Car(x) & Hit(y,x)) -> LeaveNote(x,y))", "all x.(HitCar(x) -> LeaveNote(x))", "all x.((HitCar(x) & HitsCar(x)) -> LeaveNote(x))", "all x y z.((HitCar(x,y) & Person(z) & HitsCar(x,z)) -> LeaveNote(x))", "all x.((Cake(x) & Hits(x,y)) -> LeaveNote(x,y))", "all x y.((HitCar(x,y) & Person(y)) -> LeaveNote(x,y))", "all x.(HitCar(x) -> LeaveNote(x))", "exists x.(HitCar(x) & LeaveNote(x))"]}
{"id": "enwn_validation_814", "nl": "Biff backed into someone in the parking lot, then drove away without stopping.", "fol": "", "prediction": ["all x y.((Biff(x) & Person(y)) -> (BackpedInto(x,y) & DrivenAway(x)))", "all x y z.((Biff(x) & Person(y) & ParkingLot(z)) -> (BackpedInto(x,y) & DrivenAway(x,z)))", "(BacksInto(Biff) & DrivesAway(Biff) & -Stops(Biff))", "Biff backed into someone in parking lot, drove away without stopping.", "all x y.((Biff(x) & ParkingLocation(y)) -> (BackpedInto(x,y) & DrivenAway(x)))", "all x.(Biff(x) -> (BacksInto(x,y) & ParkingLlot(y) & DrivesAway(x) & -Stops(x)))", "(BacksIntoPerson(Biff) & DrivesAwayWithoutStop(Biff))", "-(Biff(b) & BackpedInto(b) & ParkingLot(c) & DrivenAwayWithoutStop(b)))", "all x y z.((Biff(x) & Person(y) & ParkingLocation(z)) -> (BackpedInto(x,y) & DrivenAway(x,z)))", "(BackpedInto(Biff,Person) & DrivenAway(Biff,Person))", "(BackpedIntoPersonInParkingLot(Biff) & DrivenAwayWithoutStop(Biff))", "Biff backed into someone in parking lot, drove away without stopping.", "all x.(Biff(x) -> (BackpedIntoPerson(x) & DrivenAwayWithoutStop(x)))", "Biff backed into someone in parking lot, then drove away without stopping.", "all x y.((Biff(x) & Person(y)) -> (BackpedInto(x,y) & DrivenAwayWithoutStop(x)))", "(BacksIntoPerson(Biff) & DrivesAwayWithoutStop(Biff))"]}
{"id": "enwn_validation_815", "nl": "If you don't stop your car, you can't get out and leave a note.", "fol": "", "prediction": ["all x.((Car(x) & -Stops(x)) -> -CanGetOutAndLeaveNote(x))", "all x.((StopCar(x) & -StopCar(x)) -> -CanGetOutAndLeaveNote(x))", "all x.((Camera(x) & -Stops(x)) -> -CanGetOutAndLeaveNote(x))", "all x.((Car(x) & -Stops(x)) -> -CanGetOutAndLeaveNote(x))", "(-StopCar(x) -> -CanGetOutAndLeaveNote(x)))", "all x.((Car(x) & -Stop(x)) -> -CanGetOutAndLeaveNote(x))", "all x y.((Car(x) & Car(y) & Stops(x,y)) -> -CanGetOutAndLeaveNote(x,y))", "all x.((Car(x) & Stops(x)) -> -CanGetOutAndLeaveNote(x))", "all x.((StopCar(x) & -StopCar(x)) -> -CanGetOutAndLeaveNote(x))", "all x y.((StopCar(x) & Car(y)) -> -CanGetOutAndLayNote(x,y))", "all x.(StopCar(x) -> -CanGetOutAndLeaveNote(x))", "all x y.((StopCar(x) & Car(y)) -> (-GetOut(x,y) & LeaveNote(x,y)))", "all x y.((StopCar(x) & Car(y) & -StopCar(x,y)) -> -CanGetOutAndLeaveNote(x,y))", "(-StopCar(x) -> -CanGetOutAndLeaveNote(x))", "all x.((Camera(x) & -Stops(x)) -> -CanGetOutAndLeaveNote(x))", "all x.((StopCar(x) & -StopCar(x)) -> -CanGetOutAndLayNote(x))"]}
{"id": "enwn_validation_816", "nl": "Biff hit someone's car but didn't leave a note.", "fol": "", "prediction": ["all x y.((Biff(x) & Car(y)) -> (Has(x,y) & -LaysNote(x)))", "all x.(Biff(x) -> (HitCar(x) & -LeaveNote(x)))", "(all x.(Biff(x) -> HitsCar(x)) & -LaysNote(x))", "(HasCar(Biff) & -LaysNote(Biff))", "all x y.((Biff(x) & Car(y)) -> (Hit(x,y) & -LeaveNote(x)))", "all x y z.((Biff(x) & Car(y) & Note(z)) -> (Has(x,y) & -Lays(x,z)))", "all x.(Biff(x) -> (HitCar(x,y) & -LeaveNote(x,y)))", "(HitCar(Biff) & -LeaveNote(Biff))", "all x.(Biff(x) -> (HasCar(x,y) & -LaysNote(x,y)))", "Biff hit someone's car, but didn'tLeaveNote(Biff,y))", "all x y.((Biff(x) & Person(y)) -> (HitCar(x,y) & -LeaveNote(x,y)))", "(all x.(Biff(x) -> HitsCar(x)) & -LaysNote(x))", "exists x.(Biff(x) & HitsCar(x) & -LaysNote(x))", "all x y.((Biff(x) & Car(y) & Hit(x,y)) -> -LeaveNote(x))", "(HasCar(biff) & -LeavesNote(biff))", "(all x.(Biff(x) -> HitsCar(x,y)) & -LaysNote(x,z))"]}
{"id": "enwn_validation_817", "nl": "Biff should have left a note.", "fol": "", "prediction": ["all x.(Biff(x) -> ShouldLeaveNote(x))", "Biff should have left note.", "(LeavedNote(Biff) -> ShouldHave(Biff,Note))", "all x.(Biff(x) -> ShouldLeaveNote(x))", "(LeavedNote(Biff) -> ShouldBeLeavedNote(Biff))", "Biff should have left note.", "Biff should have left a note.", "-Biff should have left note.", "all x.(Biff(x) -> ShouldLeaveNote(x))", "(LeavedNote(Biff) -> ShouldHave(Biff))", "all x.(Biff(x) -> LeftNote(x))", "Biff should have left note.", "Biff should have left a note.", "all x.(Biff(x) -> ShouldLeaveNote(x))", "all x.(Biff(x) -> ShouldHaveLeavedNote(x))", "all x.(Biff(x) -> LeftNote(x))"]}
{"id": "enwn_validation_818", "nl": "You should pay attention to people when they're talking to you.", "fol": "", "prediction": ["all x y.((Person(x) & TalkingTo(x,y)) -> PaysAttentionTo(x,y))", "all x.((Person(x) & TalkingTo(x)) -> PaysAttentionTo(x,y))", "all x y.((Person(x) & TalkingTo(y)) -> PaysAttentionTo(x,y))", "all x y z.((Person(x) & TalkingTo(y,z)) -> PaysAttentionTo(x,y,z))", "all x.((Person(x) & TalkingTo(x)) -> PaysAttentionTo(x,y))", "all x.((People(x) & TalkingTo(x)) -> PaysAttentionTo(x,y))", "all x y.((People(x) & TalkingTo(x,y)) -> PaysAttentionTo(x,y))", "all x y.((Person(x) & TalkingTo(x,y)) -> PaysAttentionTo(x,y))", "(all x.(TalkingToYou(x)) -> PaysAttentionTo(x,y))", "all x y z.((Person(x) & TalkingTo(y,x) & Person(z)) -> PaysAttentionTo(x,y,z))", "all x y.((Person(x) & TalkingTo(y)) -> PaysAttentionTo(x,y))", "all x.((Person(x) & TalkingTo(x)) -> PaysAttentionTo(x,y))", "all x.((PeopleTalkingToYou(x) & TalkingToYou(x)) -> PaysAttentionTo(x,y))", "all x.((Person(x) & TalkingTo(x,y)) -> PaysAttentionTo(x,y))", "exists x.(Person(x) & TalksTo(x,y))", "all x y.((Person(x) & TalkingTo(x,y)) -> PaysAttentionTo(x,y))"]}
{"id": "enwn_validation_819", "nl": "If you're ignoring someone, you aren't paying attention to them.", "fol": "", "prediction": ["all x.((Ignoring(x) & -PayingAttentionTo(x)) -> -PayingAttentionTo(x))", "all x y.((Ignoring(x,y) & Person(y)) -> -PayingAttentionTo(x,y))", "-PayingAttentionTo(you,notPaintingAttentionTo(you,PaintingAttentionTo(you,PaintingAttentionTo(you,PaintingAttentionTo(you,PaintingAttentionTo(PaintingAttentionTo(PaintingAttentionTo(PaintingAttentionTo(PaintingAttentionTo(PaintingAttentionTo(PaintingAttentionTo(PaintingAttentionTo(PaintingAttentionTo(PaintingAttentionTo(PaintingAttentionTo(PaintingAttention(PaintingAt)))))", "all x.(Ignoring(x) -> -PayingAttentionTo(x))", "all x y.((Ignoring(x) & Person(y)) -> -PayingAttentionTo(x,y))", "all x.((Ignoring(x) -> -PayingAttentionTo(x))", "all x.((Ignoring(x) & PayingAttentionTo(x)) -> -PayingAttentionTo(x))", "(IgnoringPeople(x) -> -PayingAttentionTo(x))", "(-PayingAttentionTo(you,Person))", "all x y.((Ignoring(x,y) & Person(y)) -> -PayingAttentionTo(x,y))", "all x y.((Ignores(x,y) & Person(y)) -> -PayingAttentionTo(x,y))", "all x.(Ignoring(x) -> -PayingAttentionTo(x))", "all x.(IgnoringPerson(x) -> -PayingAttentionTo(x,Person))", "all x.(Ignoring(x) -> -PayingAttentionTo(x,y))", "all x y.((Ignoring(x,y) & Person(y)) -> -PayingAttentionTo(x,y))", "all x.((Ignoring(x) -> -PayingAttentionTo(x))"]}
{"id": "enwn_validation_820", "nl": "Terry pretended to not be able to hear Michelle because she wouldn't agree with his dinner plan.", "fol": "", "prediction": ["all x y.((Terry(x) & Michelle(y)) -> (PretendedToBeUnableToHear(x,y) & -AgreesWithDinnerPlan(y,x)))", "all x.((Terry(x) & -CanHearMichelle(x)) -> -AgreesWithDinnerPlan(x))", "all x y z.((Terry(x) & Michelle(y) & DinnerPlan(z)) -> (PretendedToBeUnableToHear(x,y) & -AgreesWith(y,z)))", "all x y.((Terry(x) & Michelle(y) & -AgreesWithDinnerPlan(y,x)) -> PretendedToNotBeAccommodate(x,y))", "all x y.((Treeth(x) & Michelle(y)) -> (PretendedToBeUnableToHear(x,y) & -AgreesWithDinnerPlan(y,x)))", "(PretendedToNotBeAccommodateMichelle(Terry) & -AccommodateDinnerPlan(Terry))", "(PretendedToBeUnableToHearMichelle(Terry) & -AgreesWithDinnerPlan(Terry))", "Terry pretended to not beableToHearMichelle because she wouldn'tAgreeWithDinnerPlan(Terry)", "(all x.((Terry(x) & -CanHearMichelle(x)) -> -CanHearMichelle(x)))", "all x y z.((Treeth(x) & Michelle(y) & DinnerPlan(z)) -> (PretendedToBeUnableToHear(x,y) & -AgreesWith(y,z)))", "(-CanHearMichelle(Terry) & Terry & -AgreesWithDinnerPlan(Terry))", "(-AcknowledgesDinnerPlan(Terry,Michelle) & Terry(Terry,Michelle))", "all x y.((Treeth(x) & Michelle(y) & -AgreesWithDinnerPlan(y,x)) -> PretendedToNotBeAccommodate(x,y))", "all x.((Terry(x) & -CanHearMichelle(x)) -> -AgreesWithDinnerPlan(x))", "all x.((Treeth(x) & -CanHearMichelle(x)) -> -AgreesWithDinnerPlan(x))", "(-CanHearMichelle(Terry,DinnerPlan) -> TerryPretendedToBe(Terry,DinnerPlan))"]}
{"id": "enwn_validation_821", "nl": "If you're pretending not to hear someone, you're ignoring them.", "fol": "", "prediction": ["all x.((PretendsNotToHear(x) & Ignores(x)) -> Ignores(x))", "all x.((PretendingNotToHear(x) & Ignoring(x)) -> Ignoring(x))", "all x y.((PretendsNotToHear(x,y) & Person(y)) -> Ignoring(x,y))", "all x.((PretendsNotToHear(x) & Ignoring(x)) -> Ignoring(x))", "all x y.((PretendingNotToHear(x) & Person(y)) -> Ignoring(x,y))", "all x.((PretendingNotToHear(x) & -Hear(x)) -> Ignoring(x))", "(all x.((PretendsNotToHear(x)) -> Ignoring(x)))", "all x.((PretendingNoHear(x) & Ignoring(x)) -> Ignoring(x))", "all x y.((PretendsNotToHear(x) & Person(y)) -> Ignores(x,y))", "all x.((PretendsNotToHear(x) & -Hear(x)) -> Ignoring(x))", "all x y.((PretendingNotToHear(x,y) & Person(y)) -> Ignoring(x,y))", "(all x.((PretendingNoHearing(x)) -> Ignoring(x,y)))", "all x.(PretendsNotToHear(x) -> Ignoring(x))", "all x y.((PretendsNotToHear(x,y) & Person(y)) -> Ignoring(x,y))", "all x.(PretendingNotToHear(x) -> Ignoring(x))", "all x.(PretendsNotToHear(x) -> Ignores(x,y))"]}
{"id": "enwn_validation_822", "nl": "You shouldn't ignore people.", "fol": "", "prediction": ["all x.(IgnorePeople(x) -> -IgnorePeople(x))", "all x.((People(x) & -Ignore(x)) -> -Ignore(x))", "-IgnorePeople(x)", "all x.((Person(x) & -Ignore(x)) -> -Ignore(x))", "(IgnorePeople(x) & -IgnorePeople(x))", "all x y.((Person(x) & Person(y)) -> -Ignore(x,y))", "all x.(IgnorePeople(x) -> -IgnorePeople(x))", "all x.((People(x) & -Ignore(x)) -> -Ignore(x))", "-IgnorePeople(x)", "(IgnorePeople(you) | Don'tIgnorePeople(you))", "all x.(IgnorePeople(x) -> -IgnorePeople(x))", "all x y.((Person(x) & Person(y)) -> -Ignore(x,y))", "exists x.(People(x) & -Ignore(x))", "-IgnorePeople(i)", "exists x.(Person(x) & -Ignores(x,y))", "all x.(IgnorePeople(x) -> -IgnorePeople(x))"]}
{"id": "enwn_validation_823", "nl": "Terry ignored Michelle.", "fol": "", "prediction": ["all x.((Treeth(x) & Michelle(x)) -> Ignored(x,y))", "all x y.((Treeth(x) & Michelle(y)) -> Ignored(x,y))", "Terry ignoredMichelle.", "Terry ignoredMelissa(Terry)", "(Ignored(Terry,Michelle)", "all x.((Terry(x) & Michelle(y)) -> Ignored(x,y))", "-(Terry(Terry) & Michelle(Michelle))", "(IgnoredMelissa(Terry)", "Terry ignoredMelissa(Terry,Melissa)", "(Understands(Terry,Michelle))", "(IgnoresMelissa(Terry,Michelle)", "(Ignored(Terry,Michelle)", "Terry ignoredMichelle.", "all x.((Treeth(x) & Michelle(y)) -> Ignored(x,y))", "Terry ignoredMelissa.", "Terry ignoredMichelle."]}
{"id": "enwn_validation_824", "nl": "Terry shouldn't have ignored Michelle.", "fol": "", "prediction": ["all x.((Terry(x) & Michelle(y)) -> -Ignored(x,y))", "(IgnoredMelissa(Terry) & -IgnoredMelissa(Terry))", "-(Ignored(Terry,Michelle) & Terry(Terry,Michelle))", "-IgnoredMelissa(Terry)", "(-Ignored(Terry,Michelle))", "all x.((Trevor(x) & -IgnoredMichelle(x)) -> -IgnoredMichelle(x))", "all x.((Trey(x) & Michelle(y)) -> -Ignored(x,y))", "(IgnoredMelissa(Terry,Michelle) -> -Ignored(Terry,Michelle))", "all x y.((Trevor(x) & Michelle(y)) -> -Ignored(x,y))", "-(Ignored(Terry) & Michelle(Terry))", "(-IgnoredMelissa(Terry))", "-(IgnoredMelissa(Terry) & Michelle(Terry))", "(Ignored(Terry) & Michelle(Terry))", "-IgnoredMichelle(Terry,Melissa)", "all x.((Terry(x) & Michelle(x)) -> -Ignored(x,Michelle))", "all x.((Trey(x) & Michelle(y)) -> -Ignored(x,y))"]}
