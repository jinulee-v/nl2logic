{"id": "entailmentbank_validation_0", "nl": "the sun rising / setting occurs once per day.", "fol": "", "prediction": ["all x.(SunRising(x) -> Setting(x))", "all x.((SunRising(x) & Setting(x)) -> OccursOncePerDay(x))", "all x y.((Sun(x) & Day(y)) -> (Rising(x,y) | Setting(x,y)))", "(SunRising(sun) & SunSetting(sun) & OccursOncePerDay(sun,s,s))", "all x.(SunRising(x) -> SettingOfDay(x))", "(SunRising(sun) & Setting(sun) & OccursOncePerDay(sun,s,s))", "all x.((Sun(x) & Rising(x)) -> Setting(x))", "exists x y.(SunRising(x) & SunSetting(y) & OncePerDay(x,y))", "all x y.((Sun(x) & Day(y)) -> (Rising(x,y) | Setting(x,y)))", "all x y.((Sun(x) & Day(y) & Rises(x,y)) -> Sets(x,y))", "exists x y.(SunRising(x) & SunSetting(y) & OccursOncePerDay(x,y))", "all x.(SunRising(x) | SunSetting(x))", "(SunRising(Sun) | SunSetting(Sun))", "all x.(SunRising(x) & SunSetting(x))", "all x.(SunRising(x) | Setting(x))", "all x.(SunRising(x) -> SettingOfDay(x))"]}
{"id": "entailmentbank_validation_1", "nl": "the sun rising is a kind of event.", "fol": "", "prediction": ["all x.(SunRising(x) -> Event(x))", "all x.((SunRising(x) & Event(x)) -> Event(x))", "all x y.((SunRising(x) & Sun(y)) -> Event(x))", "all x.(SunRising(x) -> Event(x))", "exists x y.(SunRising(x) & Event(y) & Sun(z) & Rises(x,z))", "all x.((SunRising(x) & Event(x)) -> Event(x))", "all x y.((SunRising(x) & Event(y)) -> Event(x,y))", "all x.(SunRising(x) -> Event(x))", "exists x y.(SunRising(x) & Event(y) & Sun(y) & Rising(x,y))", "all x.((SunRising(x) & Event(x)) -> Event(x))", "all x.(SunRising(x) -> Event(x))", "exists x y.(SunRising(x) & Event(y) & SunRising(x,y))", "all x.(SunReaching(x) -> Event(x))", "all x.((SunRising(x) & Event(x)) -> Event(x))", "all x.(RisingSun(x) -> Event(x))", "all x.(SunRising(x) -> Event(x))"]}
{"id": "entailmentbank_validation_2", "nl": "the sun setting is a kind of event.", "fol": "", "prediction": ["all x.(SunSetting(x) -> Event(x))", "all x y.((SunSetting(x) & Event(y)) -> Event(x))", "all x.(SunSetting(x) -> Event(x))", "exists x y.(SunSetting(x) & Event(y) & Sets(x,y))", "all x.((SunSetting(x) & Event(x)) -> Event(x))", "all x y.((SunSetting(x) & Event(y)) -> Event(x,y))", "all x.(SunSetting(x) -> Event(x))", "all x.(SunSetting(x) -> Event(x))", "exists x y.(SunSetting(x) & Event(y) & Sets(x,y))", "all x.((SunSetting(x) & Event(x)) -> Event(x))", "all x.(SunSetting(x) -> Event(x))", "exists x y.(SunSetting(x) & Event(y) & Sets(x,y))", "all x.(SunSetting(x) -> Event(x))", "all x.(SunSetting(x) -> Event(x))", "all x.(SettingSun(x) -> Event(x))", "all x.(SunSetting(x) -> Event(x))"]}
{"id": "entailmentbank_validation_3", "nl": "the sun rising and setting is the event that occurs once per day.", "fol": "", "prediction": ["all x.((SunRising(x) & Setting(x)) -> OccursOncePerDay(x))", "all x.(SunRisingAndSetting(x) -> OccursOncePerDay(x))", "(SunRisingAndSetting(Sun) & OccursOncePerDay(Sun))", "all x y.((Sun(x) & Day(y)) -> (Rising(x,y) & Setting(x,y)))", "all x.((SunRising(x) & Setting(x)) -> OccursOncePerDay(x))", "all x.((SunRising(x) & SunSetting(x)) -> OccursOncePerDay(x))", "all x.((Sun(x) & Rising(x) & Setting(x)) -> OccursOncePerDay(x))", "(EventOfDay(SunRising(Sun) & EventOfDay(SunSetting(Sun))", "all x y.((Sun(x) & Day(y) & Rising(x,y) & Setting(x,y)) -> OccursOnce(x,y))", "all x.(SunRisingAndSetting(x) -> OccursOncePerDay(x))", "all x y z.((Sun(x) & SunRising(y) & SunSetting(z)) -> OccursOncePerDay(x,y,z))", "all x y.((SunRising(x) & SunSetting(y)) -> OccursOncePerDay(x,y))", "all x y.((Sun(x) & SunRising(x) & SunSetting(y)) -> OccursOncePerDay(x,y))", "exists x.(SunReaching(x) & Setting(x) & OccursOncePerDay(x))", "exists x.(SunRising(x) & SunSetting(x) & OccursOncePerDay(x))", "all x.(SunRisingAndSetting(x) -> OccursOncePerDay(x))"]}
{"id": "entailmentbank_validation_4", "nl": "a star produces light and heat.", "fol": "", "prediction": ["all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x y.((Star(x) & Light(y) & Heat(y)) -> Produces(x,y))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x y.((Star(x) & Light(y)) -> Produces(x,y))", "all x y.((Star(x) & Light(y) & Heat(y)) -> Produces(x,y))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "exists x.(Star(x) & ProducesLight(x) & ProducesHeat(x))", "all x y.((Star(x) & Light(y) & Heat(z)) -> Produces(x,y,z))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "exists x.(Star(x) & ProducesLight(x) & ProducesHeat(x))", "all x y.((Star(x) & Light(y) & Heat(y)) -> Produces(x,y))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "exists x.(Star(x) & ProducesLight(x) & ProducesHeat(x))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))"]}
{"id": "entailmentbank_validation_5", "nl": "a source of something emits / produces / generates / provides that something.", "fol": "", "prediction": ["all x y.((Source(x) & Something(y)) -> (Emits(x,y) & Produces(x,y) & Generates(x,y) & Provides(x,y)))", "all x.(SourceOf(x,y) -> (EmitsProducesGeneratesProvides(x,y)))", "all x.((SourceOf(x) & Something(x)) -> (Emits(x) & Produces(x) & Generates(x) & Provides(x)))", "all x y.((SourceOf(x,y) & Something(y)) -> (EmitsProducesGenerates(x,y) & Provides(x,y)))", "all x y z.((Source(x) & Something(y) & Something(z)) -> (EmitsProducesGenerates(x,y) & Provides(x,z)))", "all x y.((SourceOf(x,y) & Something(y)) -> (Emits(x,y) & Produces(x,y) & Generates(x,y) & Provides(x,y)))", "all x y z.((SourceOf(x,y) & Something(z)) -> (EmitsProducesGeneratesProvides(x,z)))", "all x.(SourceOfSomething(x) -> (EmitsProducesGeneratesProvides(x)))", "all x.((SourceOfSomething(x) & EmitsProducesGeneratesProvides(x)) -> SourceOfSomething(x))", "exists x.(SourceOf(x,y) & Something(y) & EmitsProducesGeneratesProvides(x,y))", "all x y z.((SourceOf(x,y) & Something(z)) -> (EmitsProducesGenerates(x,z) & Provides(x,z)))", "exists x.(SourceOf(x,y) & EmitsProducesGeneratesProvides(x,y))", "all x.(SourceOfSomething(x) -> (EmitsProducesGeneratesProvides(x) & ProvidesSomething(x)))", "all x y.((SourceOf(x,y) & Something(y)) -> (EmitsProducesGeneratesProvides(x,y)))", "exists x.(Source(x) & EmitsProducesGeneratesProvides(x))", "exists x.(SourceOfProducesProducesGeneratesProvides(x))"]}
{"id": "entailmentbank_validation_6", "nl": "a star is a source of light.", "fol": "", "prediction": ["all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x y.((Star(x) & SourceOfLight(y)) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x y.((Star(x) & LightSource(y)) -> SourceOf(x,y))", "all x y.((Star(x) & SourceOfLight(y)) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x y.((Star(x) & LightSource(y)) -> SourceOf(x,y))", "all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> LightSource(x))", "all x.(Star(x) -> SourceOfLight(x))", "exists x.(Star(x) & LightSource(x))", "exists x.(Star(x) & SourceOfLight(x))", "exists x.(Star(x) & SourceOfLight(x))"]}
{"id": "entailmentbank_validation_7", "nl": "as the source of light becomes closer, that source of light will appear brighter.", "fol": "", "prediction": ["all x.((SourceOfLight(x) & Closer(x)) -> AppearBrighter(x))", "all x y.((SourceOfLight(x) & Closer(x)) -> AppearBrighter(y))", "as source of light becomes closer, that source of light will appear brighter.", "as sourceOfLightBecomesCloser, sourceOfLightAppearsBrighter(OfLight)", "all x.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x))", "\u0430\u0438 \u043e\u0435\u043b \u043e\u0435\u043b \u043e\u0435\u043b \u043e\u0435\u043b \u043e\u0435\u043b.", "all x y.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x,y))", "as sourceoflight becomescloser, that sourceoflight will appear brighter.", "all x.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x))", "all x y.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x,y))", "all x.((SourceOfLight(x) & CloserToSourceOfLight(x)) -> AppearsBrighter(x))", "all x.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x))", "all x y.((SourceOfLight(x) & Closer(x,y)) -> AppearsBrighter(x,y))", "all x y.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x,y))", "all x.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x))", "all x.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x))"]}
{"id": "entailmentbank_validation_8", "nl": "distance is a property of space and includes ordered values of close / far.", "fol": "", "prediction": ["all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValues(x,close,far)))", "all x y.((Distance(x) & Space(y)) -> (PropertyOf(x,y) & IncludesOrderedValues(x,close,far)))", "(PropertyOfSpace(distance) & IncludesOrderedValues(distance,close) & IncludesOrderedValues(distance,far))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValuesOfClose(x) & IncludesOrderedValuesOfFar(x)))", "all x y.((Distance(x) & Space(y)) -> (PropertyOf(x,y) & OrderedValues(x,close) & OrderedValues(x,far)))", "(PropertyOfSpace(distance) & OrderedValuesOfClose(d) & OrderedValuesOfFar(d))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValues(x,close,far)))", "(all x.(Distance(x) -> PropertyOfSpace(x)) & includesOrderedValues(x,close,far))", "all x.(Distance(x) -> (PropertyOfSpace(x) & OrderedValues(x,close) & OrderedValues(x,far)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValues(x,close,far)))", "all x y.((Distance(x) & Space(y)) -> (PropertyOfSpace(x,y) & IncludesOrderedValues(x,close,far)))", "all x.((Distance(x) & Space(x)) -> (OrderedValues(x,close,far)))", "all x y.((Distance(x) & Space(y)) -> (PropertyOf(x,y) & IncludesOrderedValues(x,Close) & IncludesOrderedValues(x,Far)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValues(x,close,far)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & OrderedValuesOfClose(x) & OrderedValuesOfFar(x)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValuesOfCloseFar(x)))"]}
{"id": "entailmentbank_validation_9", "nl": "as the distance of the star to earth decreases, the star will appear brighter.", "fol": "", "prediction": ["all x y.((Star(x) & Distance(y) & Decreases(x,y)) -> AppearsBrighter(x))", "all x.((Star(x) & DistanceDecreases(x)) -> AppearsBrighter(x))", "(DecreasedDistanceToEarth(star) -> AppearsBrighter(star))", "as the distance of the star to earth decreases, the star will appear brighter.", "all x y z.((Star(x) & Distance(y) & Earth(z) & Decreases(x,y)) -> AppearsBrighter(x))", "all x.(DecreasedDistance(x) -> StarAppearsBrighter(x))", "all x.((Star(x) & DistanceDecreases(x)) -> AppearsBrighter(x))", "all x y.((Star(x) & Distance(y) & Decreases(x,y)) -> AppearsBrighter(x))", "all x y.((Star(x) & Earth(y) & DistanceDecreases(x,y)) -> AppearsBrighter(x))", "as the DistanceDecreasesToEarth(star,y) -> AppearsBrighter(star,y))", "all x.(DecreasedDistanceToEarth(x) -> StarAppearsBrighter(x))", "-DecreasedDistanceToEarth(x) -> StarAppearsBrighter(x))", "all x y.((Star(x) & DistanceDecreases(x,y)) -> AppearsBrighter(x))", "as the DistanceDecreasesToEarth,StarAppearsBrighter(Star)", "all x y z.((Star(x) & Distance(y) & Earth(z) & Decreases(x,y)) -> AppearsBrighter(x))", "all x.((Star(x) & DistanceDecreases(x)) -> AppearsBrighter(x))"]}
{"id": "entailmentbank_validation_10", "nl": "a star is a kind of celestial object / celestial body.", "fol": "", "prediction": ["all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x y.((Star(x) & CelestialObject(y)) -> CelestialBody(x,y))", "all x.(Star(x) -> (CelestialObject(x) | CelestialBody(x)))", "all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x y.((Star(x) & CelestialObject(y)) -> CelestialBody(x,y))", "all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Star(x) -> CelestialObject(x))", "all x.(Star(x) -> (CelestialObject(x) | CelestialBody(x)))", "exists x.(Star(x) & CelestialObject(x) & CelestialBody(x))", "all x y.((Star(x) & CelestialObject(y)) -> CelestialBody(x,y))", "all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))", "exists x.(Star(x) & CelestialObject(x) & CelestialBody(x))", "all x y.((Star(x) & CelestialObject(y)) -> CelestialBody(x,y))", "all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))", "exists x.(Star(x) & CelestialObject(x) & CelestialBody(x))"]}
{"id": "entailmentbank_validation_11", "nl": "apparent magnitude is a measure of the brightness of a celestial object / celestial body as observed on earth.", "fol": "", "prediction": ["all x y.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(y)) -> MeasuresBrightness(x,y))", "all x.(ApparentMagnitude(x) -> (MeasuresBrightness(x) & CelestialObject(x) & CelestialBody(x) & ObservedOnEarth(x)))", "all x y z.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(z)) -> MeasuresBrightness(x,y,z))", "all x.(ApparentMagnitude(x) -> (MeasuresBrightnessOfCelestialObject(x) & MeasuresBrightnessOfCelestialBody(x) & ObservedOnEarth(x)))", "all x y.((AppearingMagnitude(x) & CelestialObject(y) & CelestialBody(y)) -> MeasuresBrightnessAsObservedOnEarth(x,y))", "apparentMagnitude (MeasuresBrightness(CelestialObject) & CelestialBody(CelestialObject) & ObservedOnEarth(CelestialObject))", "all x.(AppearanceMeasurement(x) -> (MeasuresBrightness(x) & CelestialObject(x) & CelestialBody(x) & ObservedOnEarth(x)))", "all x.(ApparentMagnitude(x) -> (MeasuresBrightness(x) & CelestialObject(x) & CelestialBody(x) & ObservedOnEarth(x)))", "all x y.((AppearanceMajority(x) & CelestialObject(y) & CelestialBody(y)) -> MeasuresBrightnessAsObservedOnEarth(x,y))", "all x.(AppearingMagnitude(x) -> MeasuresBrightnessOfCelestialObject(x))", "all x y.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(y) & ObservedOnEarth(x,y)) -> MeasuresBrightness(x,y))", "all x y z.((AppearanceMajority(x) & CelestialObject(y) & CelestialBody(z)) -> MeasuresBrightness(x,y,z))", "all x y z.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(z)) -> MeasuresBrightness(x,y,z))", "all x.((CelestialObject(x) | CelestialBody(x)) -> ApparentMagnitude(x))", "all x.(ApparentMagnitude(x) -> (MeasuresBrightnessOfCelestialObject(x) & MeasuresBrightnessOfCelestialBody(x) & ObservedOnEarth(x)))", "all x y.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(y)) -> MeasuresBrightnessAsObservedOnEarth(x,y))"]}
{"id": "entailmentbank_validation_12", "nl": "apparent magnitude is a measure of the brightness of a star as observed on earth.", "fol": "", "prediction": ["all x.(ApparentMagnitude(x) -> MeasuresBrightnessOfStar(x))", "all x y.((AppearingMagnitude(x) & Star(y)) -> MeasuresBrightness(x,y))", "all x y.((AppearingMagnitude(x) & Star(y) & ObservedOnEarth(y)) -> MeasuresBrightness(x,y))", "all x y z.((AppearingMagnitude(x) & Star(y) & Earth(z)) -> MeasuresBrightness(x,y,z))", "all x.(AppearingMagnitude(x) -> MeasuresBrightnessOfStar(x))", "all x y.((AppearanceMajority(x) & Star(y) & ObservedOnEarth(x,y)) -> MeasuresBrightness(x,y))", "all x.(AppearingMagnitude(x) -> (MeasuresBrightnessOfStar(x) & ObservedOnEarth(x)))", "all x.(AppearanceMeasurement(x) -> (MeasuresBrightnessOfStar(x) & ObservedOnEarth(x)))", "all x y.((ApparentMagnitude(x) & Star(y) & ObservedOnEarth(x,y)) -> MeasuresBrightness(x,y))", "all x.(ApparentMagnitude(x) -> MeasuresBrightnessOfStar(x))", "all x y z.((ApparentMagnitude(x) & Star(y) & Earth(z)) -> MeasuresBrightness(x,y,z))", "all x.(ApparentMajority(x) -> MeasuresBrightnessOfStar(x))", "all x.(ApparentMagnitude(x) -> (MeasuresBrightness(x) & StarObservedOnEarth(x)))", "exists x.(AppealingMagnitude(x) & MeasuresBrightnessOfStar(x) & ObservedOnEarth(x))", "all x y.((ApparentMagnitude(x) & Star(y) & ObservedOnEarth(y)) -> MeasuresBrightness(x,y))", "exists x.(AppearingMagnitude(x) & MeasuresBrightness(x) & ObservedOnEarth(x))"]}
{"id": "entailmentbank_validation_13", "nl": "united states is located in the northern hemisphere.", "fol": "", "prediction": ["all x.(UnitedStates(x) -> LocatedInNorthernHemisphere(x))", "all x y.((UnitedStates(x) & NorthernHemisphere(y)) -> LocatedIn(x,y))", "all x.(UnitedStates(x) -> LocatedInNorthernHemisphere(x))", "all x y.((UnitedStates(x) & NorthernHemisphere(y)) -> LocatedIn(x,y))", "all x.(UnitedStates(x) -> NorthernHemisphere(x))", "all x.((UnitedStates(x) & NorthernHemisphere(x)) -> LocatedIn(x,y))", "(NorthernHemisphere(UnitedStates)", "all x.(UnitedStates(x) -> (NorthernHemispheric(x) & LocatedIn(x,NorthernHemispheric)))", "(NorthernHemispheric(UnitedStates)", "(NorthernHemisphere(unitedStates)", "all x y.((UnitedStates(x) & NorthernHemisphere(y)) -> LocatedIn(x,y))", "all x y.((UnitedStates(x) & NorthernHemispheric(y)) -> LocatedIn(x,y))", "all x.(UnitedStates(x) -> LocationInNorthernHemisphere(x))", "all x.(UnitedStates(x) -> LocatedInNorthernHemispheric(x))", "all x y.((UnitedStates(x) & NorthernHemisphere(y)) -> LocatedIn(x,y))", "all x.(UnitedStates(x) -> NorthernHemisphere(x))"]}
{"id": "entailmentbank_validation_14", "nl": "new york / new york state is a state located in the united states of america.", "fol": "", "prediction": ["all x.(NewYork(x) -> (State(x) & UnitedStatesOfAmerica(x)))", "all x.((State(x) & NewYork(x)) -> (LocatedInUnitedStatesOfAmerica(x) & LocatedIn(x,UnitedStatesOfAmerica)))", "all x y.((NewYork(x) & NewYork(y)) -> (LocatedInUnitedStatesOfAmerica(x) & LocatedIn(y,x)))", "(NewYork(y) & State(y) & LocatedInUnitedStatesOfAmerica(y))", "all x.(NewYork(x) -> (State(x) & LocatedInUnitedStatesOfAmerica(x)))", "all x y.((NewYork(x) & State(y)) -> (LocatedInUnitedStates(x,y) & LocatedIn(y,x)))", "new york / new yorkstate(x) -> (State(x) & UnitedStatesOfAmerica(x)))", "all x y.((NewYork(x) & NewYorkState(y)) -> (LocatedInUnitedStatesOfAmerica(x) & LocatedIn(y,x)))", "((NewYork(y) & State(y)) & LocatedInUnitedStatesOfAmerica(y,x))", "all x.((State(x) & NewYork(x)) -> UnitedStatesOfAmerica(x))", "(State(newyork) & State(newyork))", "(NewYork(y) & State(z) & LocatedInUnitedStatesOfAmerica(y,z))", "all x y.((State(x) & State(y) & UnitedStatesOfAmerica(x)) -> NewYork(x))", "all x.(NewYorkState(x) -> (State(x) & UnitedStatesOfAmerica(x)))", "all x.(NewYork(x) -> (State(x) & UnitedStatesOfAmerica(x)))", "all x.(NewYork(x) -> (State(x) & UnitedStatesOfAmerica(x)))"]}
{"id": "entailmentbank_validation_15", "nl": "new york state is located in the northern hemisphere.", "fol": "", "prediction": ["all x.(NewYorkState(x) -> LocatedInNorthernHemisphere(x))", "all x y.((NewYorkState(x) & NorthernHemisphere(y)) -> LocatedIn(x,y))", "all x.((NewYorkState(x) & NorthernHemisphere(x)) -> LocatedIn(x,y))", "all x.(NewYorkState(x) -> (NorthernHemisphere(x) & LocatedIn(x,y)))", "all x.(NewYorkState(x) -> LocatedInNorthernHemisphere(x))", "(NorthernHemisphere(newyork) & LocatedIn(y,north,north))", "(NorthernHemisphere(newyork) & LocatedIn(y,north))", "all x y.((NewYorkState(x) & NorthernHemisphere(y)) -> LocatedIn(x,y))", "(NorthernHemisphere(newyork,y) & LocatedIn(y,x))", "new yorkState(n) & NorthernHemisphere(n))", "new yorkStateLocation(northernHemisphere)", "all x y.((NewYorkState(x) & NorthernHemispheric(y)) -> LocatedIn(x,y))", "all x.((NewYorkState(x) & NorthernHemisphere(x)) -> LocatedIn(x,y))", "all x.(NewYorkState(x) -> LocatedInNorthernHemisphere(x))", "all x.(NewYorkState(x) -> NorthernHemisphere(x))", "all x y.((NewYorkState(x) & NorthernHemisphere(y)) -> LocatedIn(x,y))"]}
{"id": "entailmentbank_validation_16", "nl": "december is during the winter in the northern hemisphere.", "fol": "", "prediction": ["all x.(December(x) -> WinterInNorthernHemisphere(x))", "all x y.((December(x) & NorthernHemisphere(y)) -> Winter(x,y))", "(Winter(december) & NorthernHemisphere(december))", "december is duringtheWinterInNorthernHemisphere(december)", "(WinterInNorthernHemisphere(december))", "all x.(December(x) -> WinterInNorthernHemisphere(x))", "(December-Winter(de) & NorthernHemisphere(de))", "december is during the winter in northern hemisphere.", "all x y.((December(x) & NorthernHemisphere(y)) -> Winter(x,y))", "(Winter(december) & NorthernHemisphere(december))", "all x.(December(x) -> WinterInNorthernHemisphere(x))", "all x y.((December(x) & NorthernHemisphere(y)) -> Winter(x,y))", "(Wind(december) & NorthernHemisphere(december))", "all x.(December(x) -> Winter(x))", "all x y.((December(x) & NorthernHemisphere(y)) -> WinterIn(x,y))", "all x.(December(x) -> WinterInNorthernHemisphere(x))"]}
{"id": "entailmentbank_validation_17", "nl": "december is during the winter for new york state.", "fol": "", "prediction": ["all x.((December(x) & Winter(x)) -> NewYorkState(y))", "all x y.((December(x) & NewYorkState(y)) -> Winter(x,y))", "(Winter(december) & NewYorkState(newyork))", "december is duringtheWinter(newyorkState)", "december is duringWinterForNewYorkState(x)", "all x.((December(x) & Winter(x)) -> NewYorkState(x))", "all x.(December(x) -> WinterForNewYorkState(x))", "all x.((December(x) & WinterForNewYorkState(x)) -> WinterForNewYorkState(x))", "(Winter(december) & NewYorkState(newyork))", "december-winter(newyorkstate)", "new yorkstate(newyork) & Winter(y)", "all x y.((December(x) & NewYorkState(y)) -> Winter(x,y))", "december is duringtheWinterForNewYorkState(y)", "all x.((December(x) & NewYorkState(y)) -> Winter(x,y))", "(Winter(december) & NewYorkState(y))", "all x y.((December(x) & NewYorkState(y)) -> Winter(x,y))"]}
{"id": "entailmentbank_validation_18", "nl": "winter has the least sunlight.", "fol": "", "prediction": ["all x.(Winter(x) -> LessSunlight(x))", "all x.(Winter(x) -> LessSunlight(x))", "all x.(Winter(x) -> -LeastSunlight(x))", "(LeastSunlight(winter)", "all x y.((Winter(x) & Sunlight(y)) -> LessSunlight(x,y))", "-LeastSunlightInWinter(x)", "all x.((Winter(x) & -Sunlight(x)) -> HasLeastSunlight(x))", "all x y.((Winter(x) & Summer(y)) -> LessSunlight(x,y))", "(LeastSunlight(winter)", "(LessSunlightInWinter(w))", "all x.(Winter(x) -> LessSunlight(x))", "all x.(Winter(x) & -LeastSunlight(x))", "(LeastSunlight(winter,w))", "all x.(Winter(x) -> HasLeastSunlight(x))", "-LeastSunlightInWinter(x)", "all x.(Winter(x) -> (LeastSunlight(x)))"]}
{"id": "entailmentbank_validation_19", "nl": "new york state has the least sunlight during december.", "fol": "", "prediction": ["all x.((NewYorkState(x) & -Sunlight(x)) -> -Sunlight(x))", "all x.(NewYorkState(x) -> (LeastSunlightDuringDecember(x) & NewYorkStateLeastSunlightDuringDecember(x)))", "all x y.((NewYorkState(x) & December(y)) -> HasLeastSunlight(x,y))", "(LeastSunlightDuringDecember(newyork) & NewYorkState(newyork))", "all x.((NewYorkState(x) & December(x)) -> LessSunlight(x))", "-LeastSunlightDuringDecember(newyorkState)", "new york state has the leastSunlightDuringDecember(noon(n) & -SunlightDuringDecember(n))", "all x.((NewYorkState(x) & LastSunlight(x,December)) -> HasLeastSunlight(x,December))", "all x y.((NewYorkState(x) & December(y)) -> -LeastSunlight(x,y))", "new yorkStateHasLeastSunlightDuringDecember(noon(n) & December(n))", "(LeastSunlightDuringDecember(newyorkState))", "all x y.((NewYorkState(x) & Dec.(December(y)) & -Sunlight(x,y)) -> HasLeastSunlight(x,y))", "all x.(NewYorkState(x) -> HasLeastSunlightDuringDecember(x))", "(LeastSunlightDuringDecember(newyork) & NewYorkState(y))", "all x.((NewYorkState(x) & December(x)) -> HasLeastSunlight(x,December))", "all x y.((NewYorkState(x) & December(y)) -> LessSunlight(x,y))"]}
{"id": "entailmentbank_validation_20", "nl": "earth is a kind of planet.", "fol": "", "prediction": ["all x.(Earth(x) -> Planet(x))", "all x.(Earth(x) -> Planet(x))", "all x y.((Earth(x) & Planet(y)) -> Planet(x))", "all x.(Earth(x) -> Planet(x))", "all x y.((Earth(x) & Planet(y)) -> Is(x,y))", "all x.(Planet(x) -> Earth(x))", "all x.(Earth(x) -> Planet(x))", "all x y.((Earth(x) & Planet(y)) -> (Planet(x) & Planet(y)))", "all x y.((Earth(x) & Planet(y)) -> Planet(x))", "exists x.(Planet(x) & Planet(x))", "all x.(Earth(x) -> Planet(x))", "exists x.(Earth(x) & Planet(y) & -Planet(z) & -Planet(z))", "all x.(Earth(x) -> Planet(x))", "exists x.(Planet(x) & Planet(x))", "exists x.(Earth(x) & Planet(x) & Planet(x))", "all x y.((Earth(x) & Planet(y)) -> Earth(x))"]}
{"id": "entailmentbank_validation_21", "nl": "the earth rotates on its tilted axis.", "fol": "", "prediction": ["all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "all x.((Earth(x) & TiltedAxis(x)) -> RotatesOn(x,y))", "all x y.((Earth(x) & TiltedAxis(y)) -> RotatesOn(x,y))", "all x y z.((Earth(x) & TiltedAxis(y) & Earth(z)) -> RotatesOn(x,y,z))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "(TiltedAxis(earth) -> RotatesOn(earth,earth))", "all x.(TiltedAxis(x) -> EarthRotatesOn(x,y))", "all x.(EarthRotatesOnTiltedAxis(x) -> RotatesOnTiltedAxis(x))", "(TiltedAxis(earth) -> RotatesOn(earth,earth,earth))", "all x y.((Earth(x) & TiltedAxis(y)) -> RotatesOn(x,y))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "all x.((Earth(x) & TiltedAxis(x)) -> RotatesOn(x,y))", "all x y.((Earth(x) & TippedAxis(y)) -> Rotates(x,y))", "(TiltedAxis(earth) -> RotatesOn(earth))", "exists x.(Earth(x) & TiltedAxis(y) & RotatesOn(x,y))", "all x y.((Earth(x) & TiltedAxis(y)) -> RotatesOn(x,y))"]}
{"id": "entailmentbank_validation_22", "nl": "earth is a planet that rotates on its tilted axis.", "fol": "", "prediction": ["all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x y.((Planet(x) & Earth(y)) -> RotatesOnTiltedAxis(x,y))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "all x y.((Earth(x) & Planet(y)) -> RotatesOnTiltedAxis(x,y))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "(Planet(earth) & RotatesOnTiltedAxis(earth,earth))", "all x.((Planet(x) & TiltedAxis(x)) -> RotatesOn(x,y))", "all x y z.((Earth(x) & Planet(y) & TiltedAxis(z)) -> RotatesOn(x,y,z))", "(TiltedAxisPlanet(earth) -> RotatesOn(earth,earth))", "(Planet(earth) & RotatesOnTiltedAxis(earth))", "all x.((Planet(x) & RotatesOnTiltedAxis(x)) -> Earth(x))", "all x y.((Planet(x) & Earth(y)) -> RotatesOnTiltedAxis(x,y))", "all x y.((Earth(x) & Planet(y)) -> RotatesOnTiltedAxis(x,y))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))"]}
{"id": "entailmentbank_validation_23", "nl": "rotation is the circular movement of an object around a center / axis.", "fol": "", "prediction": ["all x y.((Rotation(x) & Object(y)) -> CircularMovementAroundCenterAxis(x,y))", "all x y z.((Rotation(x) & Object(y) & Center(z)) -> CircularMovementAroundAxis(x,y,z))", "all x.(Rotation(x) -> (CircularMovement(x) & ObjectAroundCenterAxis(x)))", "all x y z.((Rotation(x) & Object(y) & CenterAxis(z)) -> CircularMovementAround(x,y,z))", "all x.(Rotation(x) -> (CircularMovement(x) & Object(x) & CenterAxis(x)))", "all x y.((Rotation(x) & Object(y)) -> CircularMovementAroundCenterAxis(x,y))", "all x y.((Rotation(x) & Object(y) & CenterAxis(y)) -> CircularMovementAround(x,y))", "(CircularMovementOfObject(rotation) & CenterAxis(rotation))", "all x.(Rotation(x) -> (CircularMovement(x) & Object(x) & CenterAxis(x)))", "all x y z.((Rotation(x) & Object(y) & Center(z) & Axis(z)) -> CircularMovementAround(x,y,z))", "all x.(Rotation(x) -> (CircularMovementOfObject(x) & AroundCenterAxis(x)))", "all x.(Rotation(x) -> (CircularMovement(x) & Object(x) & AroundCenterAxis(x)))", "(CircularMovementOfObject(rotation,center) | Axis(rotation))", "all x.(Rotation(x) -> CircularMovementOfObjectAroundCenterAxis(x))", "all x y z.((Rotation(x) & Object(y) & CenterAxis(z)) -> CircularMovementAround(x,y,z))", "all x y.((Rotation(x) & Object(y)) -> CircularMovementAroundCenterAxis(x,y))"]}
{"id": "entailmentbank_validation_24", "nl": "a planet rotating causes cycles of day and night on that planet.", "fol": "", "prediction": ["all x y.((Planet(x) & Rotating(x)) -> CausesCyclesOfDayAndNight(x,y))", "all x.((Planet(x) & Rotating(x)) -> CausesCyclesOfDayAndNight(x))", "all x y z.((Planet(x) & Rotating(x) & Day(y) & Night(z)) -> CausesCycles(x,y,z))", "all x.(Planet(x) -> (Rotating(x) & CausesCyclesOfDayAndNight(x)))", "all x y.((Planet(x) & Rotating(x) & Planet(y)) -> CausesCyclesOfDayAndNight(x,y))", "all x y.((Planet(x) & Rotating(x)) -> CausesCyclesOfDayAndNight(x,y))", "all x.((Planet(x) & Rotating(x)) -> CausesCyclesOfDayAndNight(x))", "all x y z.((Planet(x) & Rotating(y) & Planet(z) & CausesCyclesOfDayAndNight(x,y,z)) -> CausesCyclesOfNight(x,y,z))", "all x.(Planet(x) -> CausesCyclesOfDayAndNight(x))", "all x y.((Planet(x) & Rotating(y)) -> (CausesCycles(x,y) & CausesCycles(x,y)))", "all x.(Planet(x) -> (CausesCycles(x,Day,Night) & Planet(x,Planet)))", "exists x.(Planet(x) & Rotating(x) & CausesCyclesOfDayAndNight(x))", "all x.((Planet(x) & Rotating(x)) -> CausesCyclesOfDayAndNight(x))", "all x y z.((Planet(x) & Rotating(x,y) & Day(y) & Night(z)) -> CausesCycles(x,z))", "all x y.((Planet(x) & Rotating(x,y)) -> CausesCyclesOfDayAndNight(x,y))", "all x.((Planet(x) & Rotating(x)) -> CausesCycles(x,Day,Night))"]}
{"id": "entailmentbank_validation_25", "nl": "earth rotating on its axis causes the cycle of day and night on earth.", "fol": "", "prediction": ["all x.((Earth(x) & RotatingOnAxis(x)) -> CausesCycleOfDayAndNight(x))", "all x y.((Earth(x) & RotatingOnAxis(x,y)) -> CausesCycleOfDayAndNight(x))", "all x y z.((Earth(x) & RotatingOnAxis(x,y) & Earth(z)) -> (CycleOfDayAndNight(x,z)))", "all x.((Earth(x) & RotatingOnAxis(x)) -> (CycleOfDayAndNight(x)))", "all x y.((Earth(x) & Earth(y) & RotatingOnAxis(x,y)) -> CausesCycleOfDayAndNight(x,y))", "all x y.((Earth(x) & RotatingOnAxis(x)) -> (CycleOfDayAndNight(y)))", "(CycleOfDayAndNightOnEarth(earth) & EarthRotatingOnAxis(earth,ax))", "(RotatingOnAxis(earth,Day) & RotatingOnAxis(earth,Night))", "all x.(RotatingOnAxis(x) -> (CycleOfDayAndNight(x)))", "all x y z.((Earth(x) & Axis(y) & Earth(z)) -> (RotatingOn(x,y) & CausesCycle(x,z)))", "(CycleOfDayAndNightOnEarth(earth) & EarthRotatingOnAxis(earth))", "all x.((Earth(x) & RotatingOnAxis(x)) -> CausesCycleOfDayAndNight(x))", "all x.((Earth(x) & RotatingOnAxis(x)) -> (CycleOfDay(x) & CycleOfNight(x)))", "all x y.((Earth(x) & RotatingOnAxis(x,y)) -> (CycleOfDayAndNight(y)))", "all x.(Earth(x) -> (RotatingOnAxis(x) & CausesCycleOfDayAndNight(x)))", "all x.((Earth(x) & RotatesOnAxis(x)) -> CausesCycle(x,Day,Night))"]}
{"id": "entailmentbank_validation_26", "nl": "gradens contain plants.", "fol": "", "prediction": ["all x.(Graden(x) -> ContainsPlants(x))", "all x y.((Graden(x) & Plant(y)) -> Contains(x,y))", "all x.(Graden(x) -> ContainsPlants(x))", "all x y.((Graden(x) & Plant(y)) -> Contains(x,y))", "all x.(Graden(x) -> ContainsPlants(x))", "all x y.((Graden(x) & Plant(y) & Contains(x,y)) -> Contains(x,y))", "all x y.((Graden(x) & Plant(y)) -> Contains(x,y))", "all x.(Graden(x) -> ContainsPlants(x))", "all x.(GgradeNumber(x) -> ContainsPlants(x))", "all x y.((Graden(x) & Plant(y) & Contains(x,y)) -> Contains(x,y))", "all x.(Graden(x) -> ContainsPlants(x))", "all x y.((Graden(x) & Plant(y) & InGrade(x,y)) -> Contains(x,y))", "all x.(Graden(x) -> ContainsPlants(x))", "all x.(Graden(x) -> ContainsPlants(x))", "exists x.(Graden(x) & Plant(x))", "all x.(Graden(x) -> ContainsPlants(x))"]}
{"id": "entailmentbank_validation_27", "nl": "gardens are located outside.", "fol": "", "prediction": ["all x.(Garden(x) -> LocatedOutside(x))", "all x.(Garden(x) -> LocatedOutside(x))", "(all x.(Garden(x) -> Outside(x)))", "all x y.((Garden(x) & Garden(y)) -> LocatedOutside(x,y))", "all x.(Garden(x) -> LocatedOutside(x))", "all x.(Garden(x) -> LocationOutside(x))", "all x y.((Garden(x) & LocationOutside(y)) -> LocatedOutside(x,y))", "all x y.((Garden(x) & Outside(y)) -> Located(x,y))", "all x.(Garden(x) -> Outside(x))", "all x y.(Garden(x) -> (LocatedOutside(x,y) & LocatedOutside(y)))", "all x y.((Garden(x) & Garden(y) & Outside(x)) -> Located(x,y))", "all x.(Garden(x) -> LocatedOutside(x))", "all x.(Garden(x) -> LocationOutside(x))", "all x.(Garden(x) -> LocatedOutside(x))", "exists x.(Garden(x) & Outside(x))", "exists x.(Garden(x) & LocatedOutside(x))"]}
{"id": "entailmentbank_validation_28", "nl": "the plants in the gardens are located outside.", "fol": "", "prediction": ["all x y.((Plant(x) & Garden(y)) -> LocatedOutside(x,y))", "all x.(Garden(x) -> PlantsInOutdoor(x))", "all x.((Plant(x) & Garden(x)) -> Outside(x))", "all x.(Garden(x) -> (PlantsInGarden(x) & LocatedOutside(x)))", "all x y.((Plant(x) & Garden(y)) -> Outside(x,y))", "all x y.((Garden(x) & Plant(y) & InGarden(x,y)) -> LocatedOutside(y))", "all x y z.((Plant(x) & Garden(y) & Garden(z)) -> Outside(x,y,z))", "all x.((Plant(x) & InGardens(x)) -> LocatedOutside(x))", "(all x.(Garden(x) -> PlantsInGarden(x)))", "all x.(Gardens(x) -> (PlantsInGardens(x) & LocatedOutside(x)))", "(all x.(Garden(x) -> Outside(x)))", "all x y.((Plant(x) & Garden(y)) -> Outside(x,y))", "all x.(Garden(x) -> PlantsInOutdoors(x))", "all x y.((Garden(x) & Plant(y) & InGarden(x,y)) -> LocatedOutside(y))", "(all x.(Garden(x) -> PlantsInGarden(x)))", "exists x.(PlantInGarden(x) & LocatedOutside(x))"]}
{"id": "entailmentbank_validation_29", "nl": "if something is outside during the day then that something will receive sunlight.", "fol": "", "prediction": ["all x.((OutsideDuringDay(x) & OutsideDuringDay(x)) -> ReceivesSunlight(x))", "all x.((Outside(x) & Day(x)) -> ReceivesSunlight(x))", "all x y.((Outside(x) & Day(y)) -> ReceivesSunlight(x,y))", "all x y.((Exterior(x) & Day(y) & Outside(x,y)) -> ReceivesSunlight(x))", "all x.((OutsideDuringDay(x) & OutsideDuringDay(x)) -> ReceivesSunlight(x))", "all x.((Exterior(x) & Day(x)) -> ReceivesSunlight(x))", "all x y.((OutsideDuringDay(x) & OutsideDuringDay(x)) -> ReceivesSunlight(y))", "all x.((Outside(x) & Day(x)) -> ReceivesSunlight(x))", "all x.(OutsideDuringDay(x) -> ReceivesSunlight(x))", "all x y z.((Outside(x) & Day(y) & Sunlight(z) & OutsideDuring(x,y)) -> Receives(x,z))", "all x y.((Exterior(x) & Day(y) & Outside(x,y)) -> ReceivesSunlight(x))", "all x y.((OutsideDuringDay(x) & OutsideDuringDay(y)) -> ReceivesSunlight(x,y))", "exists x.(OutsideDuringDay(x) & ReceivesSunlight(x))", "all x.((OutsideDuringDay(x) & OutsideDuringDay(x)) -> ReceivesSunlight(x))", "exists x.(OutsideDuringDay(x) & ReceivesSunlight(x))", "exists x.(OutdoorSunlight(x) & Day(x))"]}
{"id": "entailmentbank_validation_30", "nl": "the plants in the gardens will receive sunlight during the day.", "fol": "", "prediction": ["all x y.((Plant(x) & Garden(y)) -> ReceivesSunlight(x,y))", "all x.((Plant(x) & InGardens(x)) -> ReceivesSunlightDuringDay(x))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> ReceivesSunlight(x,y))", "all x y z.((Plant(x) & Garden(y) & Day(z)) -> ReceivesSunlight(x,y,z))", "all x.((Plant(x) & InGardens(x)) -> ReceivesSunlight(x))", "all x y.((Plant(x) & Garden(y) & ReceivesSunlight(x,y)) -> Day(y))", "all x.((Plant(x) & Garden(x)) -> ReceivesSunlightDuringDay(x))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> ReceivesSunlightDuringDay(x,y))", "(all x.(Garden(x) -> ReceivesSunlight(x)))", "all x.((Plant(x) & InGardens(x)) -> ReceivesSunlightDuringDay(x))", "(all x.(Gardens(x) -> ReceivesSunlight(x)))", "all x.(Garden(x) -> ReceivesSunlightDuringDay(x))", "all x y z.((Plant(x) & Garden(y) & Day(z)) -> ReceivesSunlight(x,y,z))", "all x.(GardenPlant(x) -> ReceivesSunlightDuringDay(x))", "all x y.((Plant(x) & Garden(y) & ReceivesSunlight(x,y)) -> Day(y))", "all x.((Plant(x) & InGardens(x)) -> ReceivesSunlight(x))"]}
{"id": "entailmentbank_validation_31", "nl": "a plant requires sunlight to grow.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresSunlight(x)) -> Grows(x))", "all x.(Plant(x) -> RequiresSunlightToGrow(x))", "all x y.((Plant(x) & Sunlight(y)) -> Requires(x,y))", "all x.((Plant(x) & RequiresSunlight(x)) -> Grows(x))", "all x y.((Plant(x) & Sunlight(y)) -> RequiresToGrow(x,y))", "all x.(Plant(x) -> RequiresSunlight(x))", "all x.((Plant(x) & RequiresSunlight(x)) -> Grows(x))", "all x.(Plant(x) -> RequiresSunlightToGrow(x))", "all x y.((Plant(x) & Sunlight(y)) -> Requires(x,y))", "all x y.((Plant(x) & Sunlight(y)) -> RequiresToGrow(x,y))", "all x.((Plant(x) & RequiresSunlight(x)) -> Grows(x))", "exists x.(Plant(x) & RequiresSunlight(x))", "all x y.((Plant(x) & Sunlight(y)) -> RequiresForGrowth(x,y))", "exists x.(Plant(x) & RequiresSunlight(x))", "all x y.((Plant(x) & Sunlight(y)) -> Requires(x,y))", "exists x.(Plant(x) & RequiresSunlight(x))"]}
{"id": "entailmentbank_validation_32", "nl": "the plants in the gardens will receive sunlight to grow during the day.", "fol": "", "prediction": ["all x y.((Plant(x) & Garden(y)) -> ReceivesSunlightToGrowDuringDay(x,y))", "all x.((Plant(x) & InGardens(x)) -> ReceivesSunlightToGrowDuringDay(x))", "all x y.((Plant(x) & Garden(y)) -> ReceivesSunlight(x,y))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> ReceivesSunlightToGrowDuringDay(x,y))", "all x y z.((Plant(x) & Garden(y) & Day(z)) -> ReceivesSunlight(x,y,z))", "all x.((Plant(x) & InGardens(x)) -> ReceivesSunlight(x))", "all x.((Plant(x) & Garden(x)) -> ReceivesSunlightToGrowDuringDay(x))", "all x.(Garden(x) -> ReceivesSunlightToGrowDuringDay(x))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> ReceivesSunlightToGrow(x,y))", "(all x.(Garden(x) -> ReceivesSunlight(x)))", "all x y z.((Plant(x) & Garden(y) & Day(z)) -> ReceivesSunlightToGrow(x,y,z))", "all x.(GardenPlant(x) -> ReceivesSunlight(x))", "all x.((PlantsInGardens(x) & ReceivesSunlight(x)) -> GrowsDuringDay(x))", "all x y.((Plant(x) & Garden(y) & ReceivesSunlight(x,y)) -> GrowsDuringDay(x,y))", "all x.((Plant(x) & InGardens(x)) -> ReceivesSunlightToGrowDuringDay(x))", "all x y.((Plant(x) & Garden(y)) -> ReceivesSunlightToGrowDuringDay(x,y))"]}
{"id": "entailmentbank_validation_33", "nl": "summer has the most sunlight.", "fol": "", "prediction": ["all x.(Summer(x) -> MostSunlight(x))", "(MostSunlight(summer) -> HasSunlight(summer,sun))", "all x.(Summer(x) -> MostSunlight(x))", "all x y.((Summer(x) & Sunlight(y)) -> MostSunlight(x,y))", "-MostSunlight(summer,Sunlight)", "all x y.((Summer(x) & Summer(y) & MostSunlight(x,y)) -> Has(x,y))", "(SummerHasMostSunlight(s)", "all x.((Summer(x) & MostSunlight(x)) -> HasSunlight(x))", "all x.(Summer(x) -> MostSunlight(x))", "(MostSunlight(summer) -> MostSunlight(summer))", "(MostSunlight(summer,sun))", "all x.(Summer(x) -> HasMostSunlight(x))", "all x.(Summer(x) -> MostSunlight(x))", "(MostSunlight(Summer)", "all x.(Summer(x) -> MostSunlight(x))", "all x.(Summer(x) -> HasMostSunlight(x))"]}
{"id": "entailmentbank_validation_34", "nl": "the plants in the gardens will receive the most sunlight in summer to grow during the day.", "fol": "", "prediction": ["all x y.((Plant(x) & Garden(y)) -> MostSunlightInSummer(x,y))", "all x.((Plant(x) & InGardens(x)) -> MostSunlightInSummer(x))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> MostSunlightInSummer(x,y))", "all x.((Plant(x) & Garden(x)) -> MostSunlightInSummer(x))", "all x y z.((Plant(x) & Garden(y) & Summer(z) & ReceivesMostSunlight(x,z)) -> GrowsDuringDay(x,y,z))", "all x y.((Plant(x) & Garden(y) & ReceivesMostSunlightInSummer(x,y)) -> GrowsDuringDay(x,y))", "all x.((Plant(x) & InGardens(x)) -> ReceivesMostSunlightInSummer(x))", "(all x.(Garden(x) -> MostSunlightInSummer(x)))", "all x y.((Garden(x) & Plant(y) & InGarden(x,y)) -> ReceivesMostSunlightInSummer(y,x))", "all x.((PlantsInGardens(x) & MostSunlightInSummer(x)) -> GrowsDuringDay(x))", "all x.(GardenPlant(x) -> (ReceivesMostSunlightInSummer(x) & GrowsDuringDay(x)))", "(all x.(Gardens(x) -> MostSunlightInSummer(x)))", "all x y.((Plant(x) & Garden(y)) -> (ReceivesMostSunlightInSummer(x,y) & GrowsDuringDay(x,y)))", "all x y z.((Plant(x) & Garden(y) & Summer(z)) -> MostSunlightToGrowDuring(x,z))", "all x.((Plant(x) & Garden(x)) -> MostSunlightInSummer(x))", "all x.(Gardens(x) -> (ReceivesMostSunlight(x,Summer) & GrowsDuringDay(x)))"]}
{"id": "entailmentbank_validation_35", "nl": "andy lives in southern hemisphere.", "fol": "", "prediction": ["andy lives in southern hemisphere.", "all x.(Andy(x) -> LivesInSouthernHemisphere(x))", "(LivingInSouthernHemisphere(Andy) & LivesInSouthernHemisphere(Andy))", "(LivesInSouthernHemisphere(Andy) & -LivesInSouthernHemisphere(Andy))", "(LivingInSouthernHemisphere(Andy) -> LivesIn(Andy,SouthernHemisphere))", "andy exists x.(SouthernHemisphere(x) & LivesIn(x,SouthernHemisphere))", "all x.(Andy(x) -> LivesInSouthernHemisphere(x))", "andy lives in southern hemisphere.", "(LivesInSouthernHemisphere(andy) & LocatedIn(andy,SouthernHemisphere))", "&y lives in southernHemisphere(andy)", "andy lives in southernHemisphere(andy)", "andy resides in southern hemisphere.", "andy lives in southern hemisphere.", "andy lives in southern Hemisphere.", "andy resides in southern hemisphere.", "andy lives in southernHemisphere(Andy)"]}
{"id": "entailmentbank_validation_36", "nl": "it is august.", "fol": "", "prediction": ["all x.(Autumn(x) -> -Autumn(x))", "(Autumn(x) -> August(x))", "-Autumn(x)", "all x.(Autumn(x) -> -Standard(x))", "(Autumn(a) & -Autumn(a))", "(Autumn(x) -> August(x))", "-Autumn(a)", "is august.", "it is august.", "(Autumn(x) -> -Autumn(x))", "all x.(Autumn(x) -> -Autumn(x))", "is august.", "-Autumn(x)", "it is august.", "all x.(Autumn(x) -> -Autumn(x))", "all x.(Autumn(x) ->."]}
{"id": "entailmentbank_validation_37", "nl": "august is during the winter in the southern hemisphere.", "fol": "", "prediction": ["all x.(Autumn(x) -> WinterInSouthernHemisphere(x))", "all x.((Autumn(x) & SouthernHemisphere(x)) -> Winter(x))", "all x y.((Autumn(x) & SouthernHemisphere(y)) -> Winter(x,y))", "(Winter(August) & SouthernHemisphere(August))", "all x.(Augmented(x) -> WinterInSouthernHemisphere(x))", "(Winter(august) & SouthernHemisphere(august))", "-(Autumn(a) & SouthernHemisphere(b))", "all x y.((August(x) & SouthernHemisphere(y)) -> Winter(x,y))", "(WinterInSouthHemisphere(aug) & WinterInSouthHemisphere(aug))", "all x.((August(x) & SouthernHemisphere(x)) -> Winter(x))", "(SouthernHemisphere(aug) & Winter(aug))", "the winter in southern hemisphere.", "During theWinterInSouthHemisphere(aug)", "all x.(August(x) -> WinterInSouthernHemisphere(x))", "all x y.((Autumn(x) & SouthernHemisphere(y)) -> Winter(x,y))", "all x.(Autumn(x) -> WinterInSouthHemisphere(x))"]}
{"id": "entailmentbank_validation_38", "nl": "andy will experience winter in southern hemisphere in august.", "fol": "", "prediction": ["andy will experience winter in southern hemisphere in august.", "all x.(Andy(x) -> ExperiencesWinterInSouthernHemisphere(x))", "all x y.((Andy(x) & SouthernHemisphere(y)) -> ExperiencesWinter(x,y))", "andy experiences winter in southern hemisphere in august.", "(Andy ExperiencesWinterInSouthernHemisphere(Andy,Aug))", "(Andy(Andy) & SouthernHemisphere(Andy))", "(Andy will experience WinterInSouthernHemisphereInAug(Andy))", "andy will experience winter in southern hemisphere in august.", "&y experiences WinterInSouthernHemisphereInAug(y)", "all x.(Andy(x) -> ExperiencesWinterInSouthernHemisphere(x))", "all x y.((Andy(x) & SouthernHemisphere(y)) -> ExperiencesWinter(x,y))", "andy experiences winter in southern hemisphere in august.", "(Andy ExperiencesWinterInSouthernHemisphere(Andy,Aug))", "andy will experience winter in southern hemisphere in august.", "andy experiences winter in southern hemisphere in august.", "andy will experience winter in southern hemisphere in august."]}
{"id": "entailmentbank_validation_39", "nl": "the sun is a kind of star.", "fol": "", "prediction": ["all x.(Sun(x) -> Star(x))", "all x.(Sun(x) -> Star(x))", "all x y.((Sun(x) & Star(y)) -> Star(x))", "(all x.(Sun(x) -> Star(x)))", "all x.(Sun(x) -> Star(x))", "all x y.((Sun(x) & Star(y)) -> Star(x))", "all x.(Sun(x) -> Star(x))", "all x y.(Sun(x) -> Star(y))", "all x.(Sun(x) -> Star(x))", "all x y.(Sun(x) -> Star(y))", "all x.(Sun(x) -> Star(x))", "all x.(Sun(x) -> Star(x))", "exists x.(Sun(x) & Star(x))", "exists x.(Sun(x) & Star(x))", "exists x.(Sun(x) & Star(x))", "exists x.(Sun(x) & Star(x))"]}
{"id": "entailmentbank_validation_40", "nl": "the earth revolves around the sun.", "fol": "", "prediction": ["all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))", "all x y z.((Earth(x) & Sun(y) & Sun(z)) -> RevolvesAround(x,y,z))", "all x.(Earth(x) -> RevolvesAroundSun(x))", "(EarthRevolvesAroundSun(Earth) & SunRevolvesAround(Earth))", "all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))", "(Earth(e) & Sun(s) & RevolvesAround(e,e,s))", "all x.(Earth(x) -> RevolvesAroundSun(x))", "all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))", "(RevolvesAroundSun(Earth) & Earth(Earth))", "all x y z.((Earth(x) & Sun(y) & Sun(z)) -> RevolvesAround(x,y,z))", "exists x.(Earth(x) & Sun(x))", "all x y z.((Earth(x) & Sun(y) & Sun(z)) -> RevolvesAround(x,y,z))", "exists x.(Earth(x) & Sun(y) & RevolvesAround(x,y))", "all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))", "exists x.(Earth(x) & Sun(x))", "all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))"]}
{"id": "entailmentbank_validation_41", "nl": "earth revolving the sun is an example of a planet revolving around its star.", "fol": "", "prediction": ["all x.((Earth(x) & RevolvingSun(x)) -> PlanetRevolvingAroundStar(x))", "all x y.((Earth(x) & Sun(y) & Revolving(x,y)) -> PlanetRevolvingAroundStar(x))", "all x.((Earth(x) & RevolvingSun(x)) -> PlanetRevolvingAroundStar(x))", "all x y.((Earth(x) & Sun(y) & Revolving(x,y)) -> PlanetRevolvingAroundStar(x))", "all x.((Earth(x) & RevolvesSun(x)) -> PlanetRevolvingAroundStar(x))", "all x y z.((Earth(x) & Sun(y) & Star(z)) -> RevolvingAround(x,y,z))", "all x y.((Earth(x) & Sun(y)) -> RevolvingAround(x,y))", "all x y z.((Earth(x) & Sun(y) & Star(z) & Revolving(x,y,z)) -> Planet(x))", "all x y.((Earth(x) & Sun(y) & Revolving(x,y)) -> RevolvingAroundStar(x))", "all x.((Earth(x) & RevolvingSun(x)) -> PlanetRevolvingAroundStar(x))", "all x.((Planet(x) & RevolvingSun(x)) -> RevolvingAroundStar(x))", "exists x y.(Planet(x) & EarthRevolvingSun(x) & Star(y) & RevolvingAround(x,y))", "all x.((Earth(x) & RevolvesSun(x)) -> PlanetRevolvingAroundStar(x))", "all x y.((Earth(x) & Sun(y)) -> RevolvingAround(x,y))", "all x.((Planet(x) & RevolvingSun(x)) -> RevolvingAroundStar(x))", "all x.((Earth(x) & RevolvingSun(x)) -> PlanetRevolvingAroundStar(x))"]}
{"id": "entailmentbank_validation_42", "nl": "a complete revolution / orbit of a planet around its star takes 1 / one planetary year.", "fol": "", "prediction": ["all x y.((Planet(x) & Planet(y) & CompleteRevolution(x,y)) -> OrbitsAroundStar(x,y))", "all x y z.((CompleteRevolution(x) & Orbit(y) & Planet(z) & Star(z)) -> TakesOnePlanetaryYear(x,y,z))", "all x.((Planet(x) & CompleteRevolution(x) & Orbit(x)) -> TakesOnePlanetaryYear(x))", "(all x.(CompleteRevolution(x) -> OrbitOfPlanet(x)) & AroundStar(x))", "all x y.((Planet(x) & Planet(y) & CompleteRevolution(x,y)) -> OrbitsAroundStar(x,y))", "all x y.((CompleteRevolution(x) & Orbit(x) & Planet(y) & Star(y)) -> TakesOnePlanetaryYear(x,y))", "all x y z.((CompleteRevolution(x) & Orbit(y) & Planet(z) & Star(z) & Around(z,x,y)) -> TakesOnePlanetaryYear(x,z))", "all x y z.((Planet(x) & Planet(y) & Star(z) & CompleteRevolutionOrbit(x,y) & Star(y,z)) -> TakesOnePlanetaryYear(x,y,z))", "all x.((Planet(x) & CompleteRevolution(x)) -> OrbitsAroundStar(x))", "all x y.((Planet(x) & Planet(y) & CompleteRevolution(x,y)) -> OrbitAroundStar(x,y))", "all x.((Planet(x) & CompleteRevolutionOrbit(x)) -> TakesOnePlanetaryYear(x))", "all x.((Planet(x) & CompleteRevolution(x) & Orbit(x)) -> TakesOnePlanetaryYear(x))", "all x y z.((CompleteRevolution(x) & Orbit(y) & Planet(z) & AroundStar(z,y)) -> TakesOnePlanetaryYear(x,z))", "all x y.((Planet(x) & Planet(y) & CompleteRevolutionOrbit(x,y)) -> TakesOnePlanetaryYear(x,y))", "all x.((Planet(x) & CompleteRotion(x) & OrbitAroundStar(x)) -> TakesOnePlanetaryYear(x))", "all x.((Planet(x) & CompleteRevolution(x)) -> OrbitAroundStar(x))"]}
{"id": "entailmentbank_validation_43", "nl": "a complete revolution of earth around the sun takes an earth year.", "fol": "", "prediction": ["all x y.((Revolution(x) & Earth(y) & Sun(z)) -> TakesEarthYear(x,y,z))", "all x.((RevolutionOfEarth(x) & Sun(x)) -> TakesEarthYear(x))", "all x y.((CompleteRevolutionOfEarth(x) & Sun(y)) -> TakesEarthYear(x,y))", "all x.((CompleteRevolutionOfEarth(x) & Sun(x)) -> TakesEarthYear(x))", "all x y z.((CompleteRevolutionOfEarthAroundSun(x) & EarthYear(y) & Earth(z)) -> Takes(x,y,z))", "all x y.((Revolution(x) & Earth(y) & AroundSun(x,y)) -> TakesEarthYear(x,y))", "all x.((RevolutionOfEarth(x) & Sun(x)) -> TakesEarthYear(x))", "(all x.((EarthRevolution(x) & Sun(x)) -> TakesEarthYear(x)))", "all x y.((CompleteRevolutionOfEarthAroundSun(x) & EarthYear(y)) -> Takes(x,y))", "all x.(RevolutionOfEarthAroundSun(x) -> TakesEarthYear(x))", "(all x.(RotationOfEarth(x) -> TakesEarthYear(x)))", "all x y z.((CompleteRevolutionOfEarthAroundSun(x) & EarthYear(y) & Earth(z)) -> Takes(x,y,z))", "all x.((CompleteRevolutionOfEarth(x) & Sun(x)) -> TakesEarthYear(x))", "all x.((RevolutionOfEarth(x) & Sun(x)) -> TakesEarthYear(x))", "all x.(RevolutionOfEarthAroundSun(x) -> TakesEarthYear(x))", "all x y.((CompleteRevolutionOfEarth(x) & Sun(y)) -> TakesEarthYear(x,y))"]}
{"id": "entailmentbank_validation_44", "nl": "earth rotating on its tilted axis occurs once per day.", "fol": "", "prediction": ["all x.(TiltedAxis(x) -> EarthRotatingOn(x,Day))", "all x.((Earth(x) & TiltedAxis(x)) -> OccursOncePerDay(x))", "all x y.((Earth(x) & TiltedAxis(y)) -> OccursOncePerDay(x,y))", "(EarthRotatingOnTiltedAxis(Earth) & OccursOncePerDay(Earth))", "all x y z.((Earth(x) & TiltedAxis(y) & Earth(z)) -> RotatesOn(x,y,z))", "all x.(TiltedAxis(x) -> EarthRotationOf(x,y))", "all x y.((Earth(x) & TiltedAxis(y)) -> OccursOncePerDay(x,y))", "all x.((Earth(x) & TiltedAxis(x)) -> OccursOncePerDay(x))", "all x.(EarthRotatingOnTiltedAxis(x) -> OccursOncePerDay(x))", "(TiltedAxis(earth) -> RotatesOn(earth,earth,day))", "all x y.((Earth(x) & TippedAxis(y)) -> OccursOnePerDay(x,y))", "all x.((Earth(x) & TiltedAxis(x)) -> OccursOnePerDay(x))", "all x.(TiltedAxis(x) -> EarthRotatingOn(x,Day))", "all x y.((Earth(x) & TiltedAxis(y)) -> OccursOncePerDay(x,y))", "all x.(TiltedAxis(x) -> EarthRotationOfDay(x))", "All x y.((Earth(x) & TippedAxis(y)) -> RotatesOn(x,y))"]}
{"id": "entailmentbank_validation_45", "nl": "the earth is a planet that rotates on its tilted axis once per day.", "fol": "", "prediction": ["all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x) & OncePerDay(x)))", "all x y.((Earth(x) & Planet(y)) -> RotatesOnTiltedAxis(x,y))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x.((Planet(x) & TiltedAxis(x)) -> RotatesOn(x,y))", "all x y z.((Earth(x) & Planet(y) & TiltedAxis(z) & RotatesOn(y,z)) -> RotatesOn(x,y,z))", "(Planet(earth) & RotatesOnTiltedAxis(earth,earth))", "all x.((Earth(x) & RotatesOnTiltedAxis(x)) -> RotatesOnTiltedAxis(x))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x) & OncePerDay(x)))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x) & OncePerDay(x)))", "all x y.((Earth(x) & Planet(y)) -> RotatesOnTiltedAxis(y,x))", "(Planet(earth) & RotatesOnTiltedAxis(earth,earth))", "all x y.((Earth(x) & Planet(y)) -> (RotatesOnTiltedAxis(y,x) & OncePerDay(y)))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "all x y.((Earth(x) & Planet(y)) -> RotatesOnTiltedAxis(x,y))", "exists x.(Planet(x) & RotatesOnTiltedAxis(x))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x) & OncePerDay(x)))"]}
{"id": "entailmentbank_validation_46", "nl": "the earth rotating on its tilted axis causes the cycles of day and night on earth.", "fol": "", "prediction": ["all x y.((Earth(x) & TiltedAxis(y)) -> CausesCyclesOfDayAndNight(x,y))", "all x.((Earth(x) & RotatingOnTiltedAxis(x)) -> CausesCyclesOfDayAndNight(x))", "all x.((EarthRotatingOnTiltedAxis(x) & CausesCycles(x,Day,Night)) -> Earth(x))", "(CyclesOfDayAndNightOnEarth(Earth) & EarthRotatingOnTiltedAxis(Earth))", "all x y.((Earth(x) & TiltedAxis(y) & Earth(x)) -> CausesCyclesOfDayAndNight(x,y))", "all x y z.((Earth(x) & TiltedAxis(y) & Earth(z)) -> CausesCycles(x,y,z))", "(EarthRotatingOnTiltedAxis(earth) & CausesCyclesOfDayAndNight(earth))", "all x.(TiltedAxis(x) -> CausesCyclesOfDayAndNight(x))", "all x.(TiltedAxis(x) -> (EarthRotatingOnTiltedAxis(x) & CausesCyclesOfDayAndNight(x)))", "(TiltedAxis(earth) & EarthRotating(earth) & CausesCyclesOfDayAndNight(earth))", "all x.((EarthRotatingOnTiltedAxis(x) & CausesCyclesOfDayAndNight(x)) -> Earth(x))", "all x y z.((Earth(x) & TippedAxis(y) & Earth(z) & RotatingOn(x,y)) -> CausesCycles(x,z))", "all x y.((Earth(x) & TiltedAxis(y) & Earth(x)) -> CausesCycles(x,y))", "all x y.((Earth(x) & TippedAxis(x) & Earth(y)) -> (CyclesOfDayAndNight(x,y)))", "all x.((EarthRotatingOnTiltedAxis(x) & Earth(x)) -> CausesCyclesOfDayAndNight(x))", "all x y.((EarthRotatingOnTiltedAxis(x) & Earth(y)) -> CausesCyclesOfDayAndNight(x,y))"]}
{"id": "entailmentbank_validation_47", "nl": "mercury is located in the solar system.", "fol": "", "prediction": ["all x.(Mercury(x) -> LocatedInSolarSystem(x))", "all x y.((Microwave(x) & SolarSystem(y)) -> LocatedIn(x,y))", "all x.(Mercury(x) -> LocatedInSolarSystem(x))", "all x y.((Mercury(x) & SolarSystem(y)) -> LocatedIn(x,y))", "all x.(Mercury(x) -> LocatedInSolarSystem(x))", "(LocatedInSolarSystem(x) & Mercury(x))", "all x y z.((Mercury(x) & SolarSystem(y) & SolarSystem(z)) -> LocatedIn(x,y,z))", "(SolarSystem(x) & LocatedIn(x,y))", "all x.(McCarbon(x) -> LocatedInSolarSystem(x))", "all x y.((Mercury(x) & SolarSystem(y)) -> LocatedIn(x,y))", "all x.(Mercury(x) -> SolarSystem(x))", "all x y.((Mercury(x) & SolarSystem(y)) -> LocatedIn(x,y))", "(exists x.(Mercury(x) & InSolarSystem(x)))", "exists x.(Microwave(x) & SolarSystem(x))", "all x.(Mercury(x) -> LocatedInSolarSystem(x))", "exists x.(Mercury(x) & SolarSystem(x))"]}
{"id": "entailmentbank_validation_48", "nl": "mercury is a kind of planet.", "fol": "", "prediction": ["all x.(Mercury(x) -> Planet(x))", "all x.(Quecksilber(x) -> Planet(x))", "all x.(Mercury(x) -> Planet(x))", "all x y.((Quecksilber(x) & Planet(y)) -> Planet(x))", "(all x.(Mercury(x) -> Planet(x)))", "all x.(M mercury(x) -> Planet(x))", "all x.(Quecksilber(x) -> Planet(x))", "all x.(Quercus(x) -> Planet(x))", "(exists x.(Mercury(x) & Planet(x)))", "all x y.((M mercury(x) & Planet(y)) -> Planet(x))", "all x.(Mercury(x) -> Planet(x))", "exists x y.(M mercury(x) & Planet(y) & LivesIn(x,y))", "all x.(Mixture(x) -> Planet(x))", "exists x.(Methane(x) & Planet(x))", "all x.(Mercury(x) -> Planet(x))", "all x.(Quecksilber(x) -> Planet(x))"]}
{"id": "entailmentbank_validation_49", "nl": "mercury is a planet in the solar system.", "fol": "", "prediction": ["all x.(Mercury(x) -> PlanetInSolarSystem(x))", "all x.(Mercury(x) -> PlanetInSolarSystem(x))", "all x.(Mercury(x) -> PlanetInSolarSystem(x))", "all x y.((Mercury(x) & SolarSystem(y)) -> Planet(x,y))", "(PlanetInSolarSystem(mercury))", "all x y.((M mercury(x) & SolarSystem(y)) -> Planet(x,y))", "all x.(Quercus(x) -> PlanetInSolarSystem(x))", "all x.(Mercury(x) -> PlanetInSolarSystem(x))", "(PlanetInSolarSystem(mercury))", "(PlanetInSolarSystem(x) & Mercury(x))", "all x.(M mercury(x) -> PlanetInSolarSystem(x))", "all x y.((Mercury(x) & SolarSystem(y)) -> PlanetIn(x,y))", "all x y.((Mercury(x) & SolarSystem(y)) -> PlanetIn(x,y))", "all x.(Quercus(x) -> PlanetInSolarSystem(x))", "all x.(Mercury(x) -> PlanetInSolarSystem(x))", "(PlanetInSolarSystem(mercury))"]}
{"id": "entailmentbank_validation_50", "nl": "planets in the solar system orbit the sun.", "fol": "", "prediction": ["all x.((Planet(x) & SolarSystem(x)) -> OrbitsSun(x))", "all x y.((Planet(x) & SolarSystem(y)) -> OrbitsSun(x,y))", "all x y z.((Planet(x) & SolarSystem(y) & Sun(z)) -> Orbits(x,y,z))", "all x.(Planet(x) -> OrbitsSun(x))", "all x.((Planet(x) & SolarSystem(x)) -> OrbitsSun(x))", "all x y.((Planet(x) & SolarSystem(y)) -> OrbitsSun(x,y))", "all x y.((Planet(x) & SolarSystem(y) & InSolarSystem(x,y)) -> OrbitsSun(x,y))", "all x y.((Planet(x) & SolarSystem(y)) -> Orbits(x,y))", "all x.((Planet(x) & SolarSystem(x)) -> Orbits(x,sun))", "(all x.(Planet(x) -> OrbitsSun(x)))", "all x y z.((Planet(x) & SolarSystem(y) & Sun(z)) -> Orbits(x,y,z))", "all x y.((Planet(x) & SolarSystem(y) & OrbitsSun(x,y)) -> OrbitsSun(x,y))", "all x.(Planet(x) -> OrbitsSun(x))", "(all x.(Planet(x) -> OrbitsSun(x)))", "all x.((Planet(x) & SolarSystem(x)) -> OrbitsSun(x))", "all x.(Planet(x) -> OrbitsSun(x))"]}
{"id": "entailmentbank_validation_51", "nl": "mercury is a planet orbits the sun in the solar system.", "fol": "", "prediction": ["all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x)))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x) & InSolarSystem(x)))", "all x y.((Mercury(x) & Sun(y)) -> OrbitsInSolarSystem(x,y))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x) & SolarSystem(x)))", "(Planet(x) & OrbitsSun(x))", "all x y.((Mercury(x) & Sun(y)) -> OrbitsInSolarSystem(x,y))", "(OrbitsSunInSolarSystem(x) & Mercury(x))", "all x y z.((Mercury(x) & Sun(y) & SolarSystem(z)) -> Orbits(x,y,z))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x) & InSolarSystem(x)))", "(Planet(x) & OrbitsSun(x))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x)))", "(OrbitsSunInSolarSystem(x) & Mercury(x))", "all x y.((Planet(x) & Sun(y)) -> OrbitsInSolarSystem(x,y))", "all x.(Quercus(x) -> OrbitsSun(x))", "all x y.((Mercury(x) & Sun(y)) -> OrbitsInSolarSystem(x,y))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x) & SolarSystem(x)))"]}
{"id": "entailmentbank_validation_52", "nl": "a complete orbit of mercury around the sun takes one mercury year.", "fol": "", "prediction": ["all x.((CompleteOrbitOfMercury(x) & AroundSun(x)) -> TakesOneMercuryYear(x))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesOneMercuryYear(x,y))", "all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesOneMercuryYear(x))", "(CompleteOrbitOfMercuryAroundSun(x) -> TakesOneMercuryYear(x))", "all x y z.((CompleteOrbitOfMercury(x) & Sun(y) & OrbitOf(z,y) & TakesOneMercuryYear(x,z)) -> TakesOneYear(x,y))", "all x.((Orbit(x) & CompleteMercuryAroundSun(x)) -> TakesOneMercuryYear(x))", "all x.((Orbit(x) & Complete(x,y) & MercuryAroundSun(x)) -> TakesOneMercuryYear(x,z))", "all x.(CompleteOrbitOfMercuryAroundSun(x) -> TakesOneMercuryYear(x))", "all x.((CompleteOrbitOfMercury(x) & AroundSun(x)) -> TakesOneMercuryYear(x))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesOneMercuryYear(x,y))", "all x y.((CoralOrbit(x,y) & Mercury(y) & Sun(z)) -> TakesOneMercuryYear(x,z))", "all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesOneMercuryYear(x))", "exists x.(OrbitOfMercury(x) & CompleteAroundSun(x) & TakesOneMercuryYear(x))", "all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesOneMercuryYear(x))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesOneMercuryYear(x,y))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesOneMercuryYear(x,y))"]}
{"id": "entailmentbank_validation_53", "nl": "one mercury year is about 88 earth days.", "fol": "", "prediction": ["all x.(MercuryYear(x) -> EarthDays(x,88))", "all x.(MercuryYear(x) -> EarthDays(x,88))", "all x.(QuercusYear(x) -> EarthDays(x,88))", "all x y.((MercuryYear(x) & EarthDay(y)) -> About88(x,y))", "(EarthDays(x) & MercuryYear(y))", "all x.(MormonYear(x) -> EarthDays(x,88))", "all x y.((QuercusYear(x) & EarthDay(y,x)) -> About(x,y))", "all x y.((MercuryYear(x) & EarthDay(y)) -> About(x,y))", "(EarthDays(x) & MercuryYear(y))", "all x.(MercuryYear(x) -> EarthDay(x,88))", "(EarthDays(x,88))", "all x.(QuercusYear(x) -> EarthDays(x,88))", "all x.(MormonYear(x) -> EarthDays(x,88))", "all x.(MercuryYear(x) -> EarthDay(x,88))", "exists x.(MercuryYear(x,88) & EarthDays(x,88))", "all x.(MormonYear(x) -> EarthDays(x,88))"]}
{"id": "entailmentbank_validation_54", "nl": "a complete orbit of mercury around the sun takes around 88 earth days.", "fol": "", "prediction": ["all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesEarthDays(x,88))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesEarthDays(x,88))", "(CompleteOrbitOfMercuryAroundSun(x) & TakesEarthDays(x,88))", "all x.((Orbit(x) & CompleteMercuryAroundSun(x)) -> TakesEarthDays(x,88))", "all x y z.((CompleteOrbitOfMercury(x) & Sun(y) & EarthDay(z)) -> TakesAbout(x,88,z))", "all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesEarthDays(x,88))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesEarthDays(x,88))", "(CompleteOrbitOfMercuryAroundSun(x) & TakesAbout88EarthDays(x))", "all x.((OrbitOfMercury(x) & Sun(x)) -> TakesEarthDays(x,88))", "all x.(CompleteOrbitOfMercuryAroundSun(x) -> TakesEarthDays(x,88))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesAbout88EarthDays(x,y))", "all x y.((CoralOrbit(x,y) & Mercury(y) & Sun(z)) -> TakesEarthDays(x,88))", "exists x.(OrbitOfMercury(x) & Sun(x) & TakesEarthDays(x,88))", "all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesEarthDays(x,88))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesEarthDays(x,y))", "all x.((CoralOrbitOfMercury(x) & Sun(x)) -> TakesEarthDays(x,88))"]}
{"id": "entailmentbank_validation_55", "nl": "the new moon is when the dark half of the moon faces the earth.", "fol": "", "prediction": ["all x.(NewMoon(x) -> (DarkHalfOfMoon(x) & FacesEarth(x)))", "all x y.((NewMoon(x) & DarkHalf(y) & FacesEarth(y)) -> NewMoon(x))", "all x.(NewMoon(x) -> DarkHalfOfMoon(x))", "(DarkHalfOfMoon(x) & FacesEarth(x))", "the new moon is when the dark half of the moon facestheearth(x))", "all x y z.((NewMoon(x) & DarkHalfOfMoon(y) & Earth(z)) -> Faces(x,y,z))", "all x.((Moon(x) & DarkHalfFacesEarth(x)) -> NewMoon(x))", "all x y.((NewMoon(x) & DarkHalf(y) & FacesEarth(y)) -> NewMoon(x))", "all x.((NewMoon(x) & DarkHalfOfMoon(x) & FacesEarth(x)) -> NewMoon(x))", "(DarkHalfOfMoon(x) & FacesEarth(x))", "(DarkHalfOfMoon(newMoon) & FacesEarth(newMoon))", "all x.(NewMoon(x) -> DarkHalfOfMoon(x))", "all x.(NewMoon(x) -> (DarkHalfOfMoon(x) & FacesEarth(x)))", "all x y.((NewMoon(x) & DarkHalfOfMoon(y) & FacesEarth(y,x)) -> NewMoon(x))", "all x y.((NewMoon(x) & DarkHalf(y) & FacesEarth(y)) -> NewMoon(x))", "all x.((NewMoon(x) & DarkHalfOfMoon(x) & FacesEarth(x)) -> NewMoon(x))"]}
{"id": "entailmentbank_validation_56", "nl": "the new moon is when the moon is in between the sun and the earth.", "fol": "", "prediction": ["all x.(NewMoon(x) -> MoonInBetweenSunAndEarth(x))", "all x y.((Moon(x) & Sun(y) & Earth(y)) -> InBetween(x,y))", "all x.((Moon(x) & SunInBetween(x,y) & EarthInBetween(x,y)) -> NewMoon(x))", "all x y z.((Moon(x) & Sun(y) & Earth(z)) -> InBetween(x,y,z))", "(InBetweenSunAndEarth(Moon,Sun) & InBetweenEarth(Moon,Earth))", "all x.(NewMoon(x) -> (MoonInBetweenSunAndEarth(x)))", "(NewMoon(x) -> MoonInBetweenSunAndEarth(x))", "all x y.((Moon(x) & Sun(y) & Earth(y)) -> InBetween(x,y,z))", "all x.((Moon(x) & SunBetween(x,y) & Earth(y)) -> NewMoon(x))", "all x y z.((Moon(x) & Sun(y) & Earth(z) & InBetween(x,y,z)) -> NewMoon(x))", "all x.(NewMoon(x) -> MoonInBetweenSunAndEarth(x))", "all x.((Moon(x) & Sun(x) & Earth(x)) -> NewMoon(x))", "exists x.(Moon(x) & MoonInBetweenSunAndEarth(x))", "all x y.((Moon(x) & Sun(y) & Earth(y)) -> InBetween(x,y))", "all x y.((Moon(x) & Sun(y)) -> InBetween(x,y,z))", "all x.(NewMoon(x) -> MoonInBetweenSunAndEarth(x))"]}
{"id": "entailmentbank_validation_57", "nl": "the new moon is when the moon could block the earth from the sun.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> BlocksFromSun(x,y))", "all x.((Moon(x) & BlocksEarthFromSun(x)) -> NewMoon(x))", "all x y z.((Moon(x) & Earth(y) & Sun(z)) -> BlocksFrom(x,y,z))", "all x y.((Moon(x) & Earth(y) & BlocksFromSun(x,y)) -> NewMoon(x))", "all x.(NewMoon(x) -> BlocksEarthFromSun(x))", "(BlocksEarthFromSun(Moon,Earth))", "the new moon is when moon could block earth fromsun.", "all x.((Moon(x) & BlocksEarthFromSun(x)) -> NewMoon(x))", "all x y.((Moon(x) & Moon(y)) -> BlocksEarthFromSun(y,x))", "all x y z.((Moon(x) & Earth(y) & Sun(z)) -> BlocksFrom(x,y,z))", "all x y z.((NewMoon(x) & Moon(y) & Earth(z)) -> BlocksFromSun(y,z))", "all x.(NewMoon(x) -> MoonBlocksEarthFromSun(x))", "all x.((Moon(x) & MoonBlocksEarthFromSun(x)) -> NewMoon(x))", "(BlocksEarthFromSun(Moon,Earth))", "all x y.((Moon(x) & Earth(y) & BlocksFromSun(x,y)) -> NewMoon(x))", "all x.(NewMoon(x) -> MoonBlocksEarthFromSun(x))"]}
{"id": "entailmentbank_validation_58", "nl": "a solar eclipse is when the moon blocks the earth from the sun.", "fol": "", "prediction": ["all x.(SolarEclipse(x) -> MoonBlocksEarthFromSun(x))", "all x y.((SolarEclipse(x) & Moon(y)) -> BlocksEarthFromSun(y,x))", "all x y.((Moon(x) & Earth(y) & BlocksFromSun(x,y)) -> SolarEclipse(x))", "all x.(SolarEclipse(x) -> MoonBlocksEarthFromSun(x))", "all x y z.((SolarEclipse(x) & Moon(y) & Earth(z)) -> BlocksFromSun(y,z))", "all x y z.((SolarEclipse(x) & Moon(y) & Earth(z) & BlocksFromSun(y,z)) -> SolarEclipse(x))", "all x y.((SolarEclipse(x) & Moon(y)) -> BlocksEarthFromSun(y,x))", "all x.(SolarEclipse(x) -> MoonBlocksEarthFromSun(x))", "all x.((MoonBlocksEarthFromSun(x)) -> SolarEclipse(x))", "all x.(SolarEclipse(x) -> MoonBlocksEarthFromSun(x))", "all x y.((Moon(x) & Earth(y)) -> BlocksFromSun(x,y))", "all x y z.((SolarEclipse(x) & Moon(y) & Earth(z) & BlocksFrom(y,z)) -> SolarEclipse(x))", "all x.(SolarEclipse(x) -> MoonBlocksEarthFromSun(x))", "all x.(SolarEclipse(x) -> MoonBlocksEarthFromSun(x))", "exists x.(SolarEclipse(x) & MoonBlocksEarthFromSun(x))", "exists x.(SolarEclipse(x) -> MoonBlocksEarthFromSun(x))"]}
{"id": "entailmentbank_validation_59", "nl": "a solar eclipse could only happen during the new moon.", "fol": "", "prediction": ["all x.(SolarEclipse(x) -> CanOccurDuringNewMoon(x))", "all x y.((SolarEclipse(x) & NewMoon(y)) -> CanOccur(x,y))", "all x.(SolarEclipse(x) -> CouldOccurDuringNewMoon(x))", "all x.((SolarEclipse(x) & NewMoon(x)) -> CanOccur(x))", "all x.(SolarEclipse(x) -> NewMoon(x))", "all x y.((SolarEclipse(x) & NewMoon(y)) -> CanOccur(x,y))", "all x y z.((SolarEclipse(x) & NewMoon(y) & Moon(z)) -> CanOccur(x,y,z))", "all x y.((SolarEclipse(x) & NewMoon(y)) -> CanOccurDuring(x,y))", "all x.(SolarEclipse(x) -> CouldOnlyOccurDuringNewMoon(x))", "all x.(SolarEclipse(x) -> CanOccurDuringNewMoon(x))", "all x.(SolarEclipse(x) -> (NewMoon(x) | NewMoon(x)))", "all x.((SolarEclipse(x) & NewMoon(x)) -> CanOccur(x))", "all x y.((SolarEclipse(x) & NewMoon(y)) -> CouldOccur(x,y))", "all x y.((SolarEclipse(x) & NewMoon(y)) -> CanCause(x,y))", "all x.(SolarEclipse(x) -> -NewMoon(x))", "exists x.(SolarEclipse(x) & NewMoon(x))"]}
{"id": "entailmentbank_validation_60", "nl": "objects generally are made of ice in the kuiper belt.", "fol": "", "prediction": ["all x.((Object(x) & MadeOfIce(x)) -> KuiperBelt(x))", "all x y.((Object(x) & KuiperBelt(y)) -> MadeOfIce(x,y))", "all x.(MadeOfIce(x) -> KuiperBelt(x))", "(MadeOfIce(x) & KuiperBelt(x))", "all x.((Object(x) & MadeOfIce(x)) -> KuiperBelt(x))", "all x y z.((Object(x) & KuiperBelt(y) & Ice(z)) -> MadeOf(x,y,z))", "all x.(Ice(x) -> InKuiperBelt(x))", "all x y.((Object(x) & KuiperBelt(y)) -> MadeOfIce(x,y))", "all x.((Object(x) & MadeOfIce(x) & KuiperBelt(x)) -> MadeOfIce(x))", "all x.(IceInKuiperBelt(x) -> MadeOf(x,y))", "exists x.(Object(x) & MadeOfIce(x) & KuiperBelt(x))", "all x y.((Object(x) & KuiperBelt(y)) -> MadeOfIce(x,y))", "all x.(MadeOfIce(x) -> KuiperBelt(x))", "all x y.((Object(x) & KuiperBelt(y)) -> MadeOfIce(x,y))", "all x.((Object(x) & MadeOfIce(x)) -> KuiperBelt(x))", "all x y.((Object(x) & KuiperBelt(y)) -> MadeOfIce(x,y))"]}
{"id": "entailmentbank_validation_61", "nl": "icy can be used to describe objects that are made of ice.", "fol": "", "prediction": ["all x.(Ice(x) -> DefinesMadeOfIce(x))", "all x y.((Ice(x) & Object(y)) -> DefinesMadeOfIce(x,y))", "all x.(Ice(x) -> (DepictsMadeOfIce(x)))", "all x y.((Ice(x) & Object(y)) -> Defines(x,y))", "all x y.(Ice(x) -> (DepictsObjects(y) & MadeOfIce(y)))", "all x.(Ice(x) -> (DepictsObjects(x) & MadeOfIce(x)))", "all x y.(Ice(x) -> (DepictsMadeOfIce(y) & Object(z) & MadeOfIce(z)))", "all x.(Ice(x) -> DefinesObjectsMadeOfIce(x))", "all x y z.((Ice(x) & Object(y) & Ice(z)) -> Defines(x,y,z))", "all x y.((Ice(x) & Object(y)) -> MadeOfIce(y))", "all x.(Ice(x) -> DefinesMadeOfIce(x))", "all x.(Ice(x) -> (DepictsIce(x) & MadeOfIce(x)))", "exists x.(Ice(x) & DescribesObject(x) & MadeOfIce(x))", "all x y.(Ice(x) -> (DepictsIce(y) & MadeOfIce(y)))", "exists x.(Ice(x) & Description(x) & MadeOfIce(x))", "exists x.(Ice(x) & DescriptionOfIce(x))"]}
{"id": "entailmentbank_validation_62", "nl": "objects in kuiper belt are icy.", "fol": "", "prediction": ["all x.((Object(x) & KuiperBelt(x)) -> Icy(x))", "all x y.((Object(x) & KuiperBelt(y)) -> Icy(x,y))", "all x.((Object(x) & KuiperBelt(x)) -> Icy(x))", "all x.(KuiperBelt(x) -> Icy(x))", "all x.((Object(x) & KuiperBelt(x)) -> Ice(x))", "all x y.((Object(x) & KuiperBelt(y)) -> Icy(x,y))", "all x.((Objects(x) & KuiperBelt(x)) -> Icy(x))", "all x.((ObjectsInKuiperBelt(x)) -> Icy(x))", "exists x.(Object(x) & KuiperBelt(x) & Ice(x))", "(Ice(x) -> ObjectsInKuiperBelt(x))", "all x.((Object(x) & KuiperBelt(x)) -> Icy(x))", "all x y.((Object(x) & KuiperBelt(y)) -> Icy(x,y))", "all x.(KuiperBelt(x) -> Ice(x))", "all x y.((Object(x) & KuiperBelt(y) & InBelt(x,y)) -> Icy(x))", "all x y.((Object(x) & KuiperBelt(y)) -> Ice(x,y))", "all x y.((Object(x) & KuiperBerge(y)) -> Icy(x,y))"]}
{"id": "entailmentbank_validation_63", "nl": "a comet orbit occurs usually once per 1000 years.", "fol": "", "prediction": ["all x.(CometOrbit(x) -> OccursOncePer1000Years(x))", "all x y.((CometOrbit(x) & Orbit(y)) -> OccursOncePer1000Years(x,y))", "all x.(CometOrbit(x) -> OccursOncePer1000Years(x))", "all x y.((CometOrbit(x) & Orbit(y)) -> OccursOncePer1000Years(x))", "all x.(CometOrbit(x) -> OccursOncePer1000Years(x))", "all x y.((CometOrbit(x) & Year(y)) -> OccursOncePer1000(x,y))", "all x y.((CometOrbit(x) & UsuallyOccursOncePer1000Years(x)) -> CometOrbit(y))", "all x.(CometOrbitOccursOncePer1000Years(x) -> OccursOf(x,y))", "all x y.((CometOrbit(x) & Period(y) & OccursOncePer1000Years(x,y)) -> OccursOf(x,y))", "all x.(CometOrbit(x) -> OccursOncePer1000Years(x))", "all x.(CometOrbit(x) -> OccursOncePer1000Years(x))", "all x.(CometOrbitOccursOf(x,1000) -> OccursOncePerYears(x))", "all x.(CometOrbit(x) -> OccursOncePer1000Years(x))", "exists x.(CometOrbit(x) & UsuallyOccursOncePer1000Years(x))", "all x.(CometOrbit(x) -> OccursOf1000Years(x))", "exists x.(CometOrbit(x) & OccursOncePer1000Years(x))"]}
{"id": "entailmentbank_validation_64", "nl": "a comet is a kind of celestial object.", "fol": "", "prediction": ["all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x y.((Comet(x) & CelestialObject(y)) -> Is(x,y))", "all x.(Comet(x) -> CelestialObject(x))", "all x y.((Comet(x) & CelestialObject(y)) -> (CelestialObject(x) & -CelestialObject(y)))", "all x y.((Comet(x) & CelestialObject(y)) -> Is(x,y))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x y.((Comet(x) & CelestialObject(y)) -> Object(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "exists x.(Comet(x) & CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "exists x.(Comet(x) & CelestialObject(x) & Object(x))", "exists x.(Comet(x) & CelestialObject(x))"]}
{"id": "entailmentbank_validation_65", "nl": "comet orbits are elliptical.", "fol": "", "prediction": ["all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x y.((CometOrbit(x) & Orbit(y)) -> Elliptical(x))", "(all x.(CometOrbit(x) -> Elliptical(x)))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x y.((CometOrbit(x) & Orbit(y)) -> Elliptical(x))", "all x y.((CometOrbit(x) & Orbit(y,x)) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x y.((CometOrbit(x) & Comet(y)) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Ellipse(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Ellipse(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "exists x.(CometOrbit(x) & Ellipse(x))"]}
{"id": "entailmentbank_validation_66", "nl": "comets are the kind of celestial object that has a highly elliptical orbit and has a period of over 1000 years.", "fol": "", "prediction": ["all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & HasPeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & PeriodOver1000Years(x)))", "all x y.((Comet(x) & CelestialObject(y)) -> (HighlyEllipticalOrbit(x) & PeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & HasPeriodOver1000Years(x)))", "all x y z.((Comet(x) & CelestialObject(y) & Orbit(z) & HighlyElliptical(y) & Period(z,1000Years)) -> CelestialObject(x))", "all x y.((Comet(x) & CelestialObject(y)) -> (HighlyEllipticalOrbit(x) & HasPeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & HasPeriodOver1000Years(x)))", "all x y.((Comet(x) & CelestialObject(y)) -> (HighlyEllipticalOrbit(x,y) & PeriodOver1000Years(x,y)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & PeriodOver1000Years(x)))", "all x y.((Comet(x) & CelestialObject(y)) -> (HasHighlyEllipticalOrbit(x,y) & HasPeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & PeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & HasPeriodOver1000Years(x)))", "all x y.((Comet(x) & CelestialObject(y)) -> (HighlyEllipticalOrbit(x) & PeriodOver1000Years(x,y)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & PeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & EllipticalOrbit(x) & PeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & HasPeriodOver1000Years(x)))"]}
{"id": "entailmentbank_validation_67", "nl": "the milky way galaxy appears as a glowing band across the night sky.", "fol": "", "prediction": ["all x.(MilkyWayGalaxy(x) -> AppearsAsGlowingBandAcrossNightSky(x))", "all x y.((MilkyWayGalaxy(x) & NightSky(y)) -> AppearsAsGlowingBand(x,y))", "all x y z.((MilkyWayGalaxy(x) & MilkyWayGalaxy(y) & NightSky(z)) -> AppearsAsGlowingBand(x,y,z))", "(MilkyWayGalaxies(MilkyWay) & GlowingBandAcrossNightSky(MilkyWay,NightSky))", "all x.(MilkyWayGalaxy(x) -> AppearsAsGlowingBandAcrossNightSky(x))", "all x y.((MilkyWayGalaxy(x) & MilkyWayGalaxy(y)) -> AppearsAsGlowingBandAcrossNightSky(x,y))", "all x.(MilkyWayGalaxy(x) -> AppearsAsGlowingBandAcrossNightSky(x))", "all x y.((MilkyWayGalaxy(x) & NightSky(y)) -> AppearsAsGlowingBand(x,y))", "(GlowingBandAcrossNightSky) & MilkyWayGalaxy(MilkyWay))", "all x y.((MilkyWeave(x) & MilkyWay(y)) -> AppearsAsGlowingBandAcrossNightSky(x,y))", "all x.(MilkyWeaveGalaxy(x) -> appearsAsGlowingBandAcrossNightSky(x))", "all x y z.((MilkyWayGalaxy(x) & MilkyWayGalaxy(y) & NightSky(z)) -> AppearsAsGlowingBand(x,y,z))", "all x.(MilkyHowGalaxy(x) -> AppearsAsGlowingBandAcrossNightSky(x))", "exists x.(MilkyWeaveGalaxie(x) & GlowingBandAcrossNightSky(x))", "all x.(MilkyWayGalaxy(x) -> AppearsAsGlowingBandAcrossNightSky(x))", "exists x.(MilkyWayGalaxy(x) & GlowingBand(x) & NightSky(x))"]}
{"id": "entailmentbank_validation_68", "nl": "a student observes a glowing band across the night sky.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y)) -> ObservesGlowingBand(x,y))", "all x y z.((Student(x) & GlowingBand(y) & NightSky(z)) -> ObservesAcross(x,y,z))", "all x.(Student(x) -> ObservesGlowingBandAcrossNightSky(x))", "all x y.((Student(x) & Student(y)) -> ObservesGlowingBandAcrossNightSky(x,y))", "all x y z.((Student(x) & GlowingBand(y) & NightSky(z)) -> Observes(x,y,z))", "all x y.((Student(x) & GlowingBand(y)) -> ObservesAcrossNightSky(x,y))", "all x.(Student(x) -> ObservesGlowingBand(x))", "all x y.((Student(x) & Student(y)) -> ObservesGlowingBand(x,y))", "all x y z.((Student(x) & Band(y) & NightSky(z) & Observes(x,y,z)) -> GlowingAcross(x,y,z))", "all x y z.((Student(x) & GlowingBand(y) & NightSky(z)) -> ObservesAcross(x,y,z))", "all x.(Student(x) -> ObservesGlowingBandAcrossNightSky(x))", "exists x.(Student(x) & ObservesGlowingBand(x) & NightSky(x))", "all x y.((Student(x) & GlowingBand(y) & NightSky(y)) -> Observes(x,y))", "all x y.((Student(x) & Student(y)) -> ObservesGlowingBandAcrossNightSky(x,y))", "exists x.(Student(x) & ObservesGlowingBand(x) & NightSky(x))", "exists x.(Student(x) & ObservesGlowingBand(x) & NightSky(x))"]}
{"id": "entailmentbank_validation_69", "nl": "the student observes the milky way galaxy at night.", "fol": "", "prediction": ["all x y.((Student(x) & MilkyWayGalaxy(y)) -> ObservesAtNight(x,y))", "all x.(Student(x) -> ObservesMilkyWayGalaxyAtNight(x))", "(ObservesMilkyWayGalaxy(Student) & Night(Student))", "all x y z.((Student(x) & MilkyWayGalaxy(y) & Night(z)) -> ObservesAt(x,y,z))", "all x y.((Student(x) & MilkyWayGalaxy(y)) -> ObservesAtNight(x,y))", "the student observes MilkyWayGalaxyAtNight.", "all x.((Student(x) & MilkyWayGalaxie(x)) -> ObservesAtNight(x))", "(observesMilkyWayGalaxyAtNight(Student))", "all x.(Student(x) -> ObservesMilkyWayGalaxyAtNight(x))", "all x y.((Student(x) & MilkyWeave(y)) -> ObservesAtNight(x,y))", "exists x.(Student(x) & MilkyWayGalaxy(x) & ObservesAtNight(x))", "all x y.((Student(x) & MilkyWayGalaxy(y)) -> ObservesAtNight(x,y))", "all x y z.((Student(x) & MilkyWayGalaxy(y) & Night(z)) -> Observes(x,y,z))", "all x.(Student(x) -> ObservesMilkyWeaveAtNight(x))", "all x y.((Student(x) & MilkyWayGalaxie(y)) -> ObservesAtNight(x,y))", "exists x.(Student(x) & MilkyWayGalaxy(x) & ObservesAtNight(x))"]}
{"id": "entailmentbank_validation_70", "nl": "looking at bright objects has a negative impact on the eyes.", "fol": "", "prediction": ["all x.(BrightObject(x) -> NegativeImpactOnEyes(x))", "all x.((LooksAtBrightObjects(x) & NegativeImpactOnEyes(x)) -> NegativeImpactOnEyes(x))", "all x y.((BrightObject(x) & Eye(y)) -> NegativeImpact(x,y))", "all x.((LookingAtBrightObjects(x) & NegativeImpactOnEyes(x)) -> LookAtBrightObjects(x))", "all x y.((BrightObject(x) & Eye(y)) -> NegativeImpact(x,y))", "all x.(BrightObject(x) -> NegativeImpactOnEyes(x))", "all x.((BrightObject(x) & LookingAt(x,y)) -> NegativeImpactOnEyes(x))", "all x y.((BrightObject(x) & Eyes(y)) -> NegativeImpact(x,y))", "all x y z.((BrightObject(x) & Eye(y) & Eye(z)) -> NegativeImpact(x,y,z))", "all x.(LooksAtBrightObjects(x) -> NegativeImpactOnEyes(x))", "all x.(BrightObjects(x) -> NegativeImpactOnEyes(x))", "all x.(BrightObject(x) -> NegativeImpactOnEyes(x))", "all x y.((BrightObject(x) & Eye(y)) -> NegativeImpactOn(x,y))", "all x.((LooksAtBrightObjects(x) & NegativeImpactOnEyes(x)) -> BrightObjects(x))", "all x y.((BrightObject(x) & Eyes(y)) -> NegativeImpact(x,y))", "all x y.((BrightObject(x) & Eyes(y)) -> NegativeImpact(x,y))"]}
{"id": "entailmentbank_validation_71", "nl": "the moon is less bright than the sun.", "fol": "", "prediction": ["all x y.((Moon(x) & Sun(y)) -> LessBright(x,y))", "all x.(Moon(x) -> LessBrightThanSun(x))", "all x y.((Moon(x) & Sun(y)) -> LessBright(x,y))", "(LikelsBrighter(Moon,Sun))", "-Brighter(Moon,Sun)", "all x y z.((Moon(x) & Sun(y) & Moon(z)) -> LessBright(x,z))", "(LittleBrighter(Moon,Sun))", "(LessBrightThanSun(Moon))", "(LittleBrighterThanSun(Moon,Sun))", "all x y.((Moon(x) & Sun(y)) -> LessBright(x,y))", "all x.(Moon(x) -> LessBrightThanSun(x))", "(LessBrightThanSun(Moon,Sun))", "exists x.(Moon(x) & -Brighter(x,Sun))", "all x y.((Moon(x) & Sun(y)) -> LessBright(x,y))", "exists x.(Moon(x) & LessBrightThan(x,Sun))", "all x y.((Moon(x) & Sun(y)) -> LessBrightThan(x,y))"]}
{"id": "entailmentbank_validation_72", "nl": "looking at the moon has less of a negative impact on the eyes.", "fol": "", "prediction": ["all x.(LookingAtMoon(x) -> LessNegativeImpactOnEyes(x))", "all x y.((Moon(x) & Eyes(y)) -> LessNegativeImpact(x,y))", "all x y.((LookingAtMoon(x) & Eyes(y)) -> LessNegativeImpact(x,y))", "all x.((LookingAtMoon(x) & LessNegativeImpactOnEyes(x)) -> LessOfNegativeImpactOnEyes(x))", "all x.(LooksAtMoon(x) -> LessNegativeImpactOnEyes(x))", "all x y.((LooksAtMoon(x) & Moon(y)) -> LessNegativeImpactOnEyes(x,y))", "all x y z.((Moon(x) & Eye(y) & Eye(z)) -> LessNegativeImpact(x,y,z))", "all x y.((Moon(x) & Eyes(y)) -> LessNegativeImpact(x,y))", "all x y.((Moon(x) & Eye(y)) -> LessNegativeImpact(x,y))", "exists x.(Moon(x) & LooksAt(x,y)) -> LessNegativeImpactOnEyes(x))", "all x.(LooksAtMoon(x) -> LessOfNegativeImpactOnEyes(x))", "all x.((LookingAtMoon(x) & LessNegativeImpactOnEyes(x)) -> LessNegativeImpactOnEyes(x))", "all x.(LookingAtMoon(x) -> LessNegativeImpactOnEyes(x))", "all x y.((LookingAtMoon(x) & Eyes(y)) -> LessNegativeImpact(x,y))", "all x y z.((Moon(x) & Eye(y) & Eye(z)) -> LessNegativeImpact(x,y,z))", "all x.(LookingAtMoon(x) -> LessNegativeImpactOnEyes(x))"]}
{"id": "entailmentbank_validation_73", "nl": "the surface of the earth contains mountains.", "fol": "", "prediction": ["all x.(EarthSurface(x) -> ContainsMountains(x))", "all x y.((EarthSurface(x) & Mountain(y)) -> Contains(x,y))", "(all x.(EarthSurface(x) -> ContainsMountains(x)))", "all x.(EarthSurface(x) -> ContainsMountains(x))", "all x y z.((EarthSurface(x) & Mountain(y) & Surface(z)) -> Contains(x,y,z))", "all x y.((EarthSurface(x) & Mountain(y)) -> Contains(x,y))", "exists x.(Surface(x) & Earth(x) & ContainsMountains(x))", "(ContainsMountains(earth) -> Surface(earth))", "exists x.(SurfaceOfEarth(x) & ContainsMountains(x))", "all x.(EarthSurface(x) -> ContainsMountains(x))", "all x y.((EarthSurface(x) & Mountain(y)) -> Contains(x,y))", "all x.(EarthSurface(x) -> ContainsMountains(x))", "all x y.((EarthSurface(x) & Mountain(y)) -> Contains(x,y))", "all x.(EarthSurface(x) -> ContainsMountains(x))", "all x y.((EarthSurface(x) & Mountain(y)) -> Contains(x,y))", "exists x.(EarthSurface(x) & ContainsMountains(x))"]}
{"id": "entailmentbank_validation_74", "nl": "the surface of the moon contains mountains.", "fol": "", "prediction": ["all x.(MoonSurface(x) -> ContainsMountains(x))", "all x y.((MoonSurface(x) & Mountain(y)) -> Contains(x,y))", "(all x.(MoonSurface(x) -> ContainsMountains(x)))", "all x.(MoonSurface(x) -> ContainsMountains(x))", "all x y.((MoonSurface(x) & Mountain(y)) -> Contains(x,y))", "all x y z.((Moon(x) & Surface(y) & Mountain(z)) -> Contains(y,z))", "(ContainsMountains(Moon) & Surface(Moon))", "all x.(MoonSurface(x) -> ContainsMountains(x))", "all x y.((MoonSurface(x) & Mountain(y)) -> Contains(x,y))", "all x y.((MoonSurface(x) & Moon(y)) -> ContainsMountains(x,y))", "all x.(MoonSurface(x) -> ContainsMountains(x))", "exists x.(Moon(x) & ContainsMountains(x))", "all x.(MoonSurface(x) -> ContainsMountains(x))", "all x y.((MoonSurface(x) & Mountain(y)) -> Contains(x,y))", "exists x.(MoonSurface(x) & Mountain(x))", "exists x.(MoonSurface(x) & ContainsMountains(x))"]}
{"id": "entailmentbank_validation_75", "nl": "both the surface of the moon and the surface of the earth contain mountains.", "fol": "", "prediction": ["all x y.((MoonSurface(x) & EarthSurface(y)) -> ContainsMountains(x,y))", "(exists x.(MoonSurface(x) & ContainsMountains(x)) & exists y.(EarthSurface(y) & ContainsMountains(y)))", "all x.((MoonSurface(x) & EarthSurface(x)) -> ContainsMountains(x))", "both the surface of the moon and the surface of the earth contain mountains.", "all x y.((Moon(x) & Earth(y)) -> ContainsMountains(x,y))", "((MoonSurface(x) & EarthSurface(x)) -> ContainsMountains(x))", "(SurfaceOfMoon(x) & SurfaceOfEarth(x))", "all x y z.((MoonSurface(x) & EarthSurface(y) & MountainSurface(z)) -> Contains(x,y,z))", "all x y.((MoonSurface(x) & EarthSurface(y)) -> ContainsMountains(x,y))", "(all x.(MoonSurface(x) -> ContainsMountains(x)) & all y.(EarthSurface(y) -> ContainsMountains(y)))", "exists x.(MoonSurface(x) & EarthSurface(x) & ContainsMountains(x))", "all x.((MoonSurface(x) & EarthSurface(x)) -> ContainsMountains(x))", "(exists x.(MoonSurface(x) & ContainsMountains(x)))", "all x y z.((MoonSurface(x) & EarthSurface(y) & Mountain(z)) -> Contains(x,y,z))", "exists x.(MoonSurface(x) & EarthSurface(x) & ContainsMountains(x))", "all x.((MoonSurface(x) & EarthSurface(x)) -> ContainsMountains(x))"]}
{"id": "entailmentbank_validation_76", "nl": "the asteroid belt is located between mars and jupiter.", "fol": "", "prediction": ["all x.(AsteroidBelt(x) -> (LocatedBetweenMarsAndJupiter(x)))", "all x y.((AsteroidBelt(x) & Mars(y) & Jupiter(y)) -> LocatedBetween(x,y))", "(AsteroidBelt(a) & Mars(b) & Jupiter(c))", "all x y z.((AsteroidBelt(x) & Mars(y) & Jupiter(z)) -> LocatedBetween(x,y,z))", "all x.(AsteroidBelt(x) -> (BetweenMarsAndJupiter(x)))", "LocatedBetweenMarsAndJupiter(asteroidbelt)", "the AsteroidBelt(a) exists y.(Mars(y) & Jupiter(z) & LocatedBetween(a,a,y,z)))", "all x y.((AsteroidBelt(x) & Mars(y) & Jupiter(z)) -> LocatedBetween(x,y,z))", "all x.(AsteroidBelt(x) -> (Mars(x) | Jupiter(x)))", "(AsteroidBelt(a) & Mar(a) & Jupiter(b))", "the AsteroidBeltLocation(asteroid,mars,jupiter)", "all x.(AsteroidBelt(x) -> (LocatedBetweenMarsAndJupiter(x)))", "all x y.((AsteroidBelt(x) & Mars(y) & Jupiter(y)) -> LocatedBetween(x,y))", "(AsteroidBelt(a) & Mars(b) & Jupiter(c))", "exists x.(AsteroidBelt(x) & Mars(x) & Jupiter(x))", "all x.(AsteroidBelt(x) -> (BetweenMarsAndJupiter(x)))"]}
{"id": "entailmentbank_validation_77", "nl": "the asteroid belt contains the largest concentration of asteroids in the solar system.", "fol": "", "prediction": ["all x.(AsteroidBelt(x) -> ContainsLargestConcentrationOfAsteroids(x))", "all x y.((AsteroidBelt(x) & SolarSystem(y)) -> ContainsLargestConcentrationOfAsteroids(x,y))", "all x y z.((AsteroidBelt(x) & Asteroids(y) & SolarSystem(z)) -> ContainsLargestConcentration(x,y,z))", "all x.(AsteroidBelt(x) -> LargestConcentrationOfAsteroids(x))", "ContainsLargestConcentrationOfAsteroidsInSolarSystem(asteroidBelt)", "(LargestConcentrationOfAsteroidsInSolarSystem(asteroidBelt))", "all x y.((AsteroidBelt(x) & SolarSystem(y)) -> LargestConcentrationOfAsteroids(x,y))", "the largest concentration of asteroids in the solar system.", "all x.((AsteroidBelt(x) & LargestConcentrationOfAsteroids(x)) -> InSolarSystem(x))", "all x.(AsteroidBelt(x) -> ContainsLargestConcentrationOfAsteroids(x))", "all x y.((AsteroidBelt(x) & SolarSystem(y)) -> ContainsLargestConcentrationOfAsteroids(x,y))", "all x y z.((AsteroidBelt(x) & Asteroids(y) & SolarSystem(z)) -> LargestConcentration(x,y,z))", "the largest concentration of asteroids in the solar system.", "all x y.((AsteroidBelt(x) & Asteroids(y)) -> ContainsLargestConcentration(x,y))", "all x.(AsteroidBelt(x) -> LargestConcentrationOfAsteroids(x))", "all x.(AsteroidBelt(x) -> ContainsLargestConcentrationOfAsteroids(x))"]}
{"id": "entailmentbank_validation_78", "nl": "the asteroid belt that contains the most asteroids is located between mars and jupiter.", "fol": "", "prediction": ["all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> (BetweenMarsAndJupiter(x)))", "all x y.((AsteroidBelt(x) & Asteroids(y) & ContainsMost(x,y)) -> (LocatedBetweenMarsAndJupiter(x)))", "(LocatedBetweenMarsAndJupiter(asteroidBelt) & ContainsMostAsteroids(asteroidBelt))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> (BetweenMarsAndJupiter(x)))", "all x y z.((AsteroidBelt(x) & Asteroids(y) & Mars(z) & Jupiter(z)) -> ContainsMost(x,y,z))", "all x y.((AsteroidBelt(x) & Asteroids(y) & ContainsMost(x,y)) -> (BetweenMarsAndJupiter(x)))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> (LocatedBetweenMarsAndJupiter(x)))", "all x.((AsteroidBelt(x) & MostAsteroids(x)) -> (BetweenMarsAndJupiter(x)))", "(AsteroidBelt(asteroid) & ContainsMostAsteroids(asteroid))", "all x.(AsteroidBelt(x) -> (ContainsMostAsteroids(x) & BetweenMarsAndJupiter(x)))", "all x y.((AsteroidBelt(x) & MostAsteroids(y)) -> (LocatedBetweenMarsAndJupiter(x)))", "all x y z.((AsteroidBelt(x) & Asteroids(y) & Mars(z) & Jupiter(z)) -> LocatedBetween(x,y,z))", "all x y.((AsteroidBelt(x) & Mars(y) & Jupiter(y)) -> ContainsMostAsteroids(x,y))", "exists x.(AsteroidBelt(x) & ContainsMostAsteroids(x) & BetweenMarsAndJupiter(x))", "all x.((AsteroidBelt(x) & MostAsteroids(x)) -> (LocatedBetweenMarsAndJupiter(x)))", "all x.((AsteroidBelt(x) & MostAsteroids(x)) -> (BetweenMarsAndJupiter(x)))"]}
{"id": "entailmentbank_validation_79", "nl": "the sun is average in temperature for a star in our galaxy.", "fol": "", "prediction": ["all x y.((Sun(x) & Star(y)) -> AverageTemperature(x,y))", "all x y z.((Sun(x) & Star(y) & Galaxy(z)) -> AverageTemperature(x,y,z))", "all x.(Sun(x) -> AverageTemperature(x))", "all x y.((Sun(x) & Star(y) & InGalaxy(x,y)) -> AverageTemperature(x,y))", "all x.((Sun(x) & Star(x) & InGalaxy(x)) -> AverageTemperature(x))", "all x.(Sun(x) -> AverageTemperatureInGalaxy(x))", "(AverageTemperatureInStar(sun,s) & InGalaxy(sun,s))", "all x y z.((Sun(x) & Star(y) & Galaxy(z)) -> AverageTemperature(x,y,z))", "all x.((Sun(x) & AverageTemperature(x)) -> StarInGalaxies(x))", "all x y.((Sun(x) & Star(y) & InGalaxies(x,y)) -> AverageTemperature(x,y))", "all x y z.((Sun(x) & Star(y) & Galaxy(z) & AverageTemperature(x,y,z)) -> InGalaxy(x,y,z))", "all x.(Sun(x) -> AverageTemperatureForStar(x))", "all x y.((Sun(x) & Star(y) & InGalaxy(x,y)) -> AverageTemperature(x,y))", "exists x.(Sun(x) & AverageTemperature(x,Star,Galaxies))", "exists x.(Sun(x) & AverageTemperatureInStar(x))", "exists x.(Sun(x) & AverageTemperature(x,star,galaxies))"]}
{"id": "entailmentbank_validation_80", "nl": "the sun is average in size for a star in our galaxy.", "fol": "", "prediction": ["all x.(Sun(x) -> AverageSize(x))", "all x y.((Sun(x) & Star(y)) -> AverageSize(x,y))", "all x y z.((Sun(x) & Star(y) & Galaxy(z)) -> AverageSize(x,y,z))", "(AverageSize(sun,star) & InGalaxies(sun,galaxies))", "all x.((Sun(x) & Star(x) & InGalaxies(x)) -> AverageSize(x))", "all x.(Sun(x) -> AverageSizeForStar(x))", "all x y.((Sun(x) & Star(y)) -> AverageSize(x,y))", "(AverageSizeSun(Sun,Star) & InGalaxies(Sun,Star))", "all x y.((Sun(x) & Star(y)) -> AverageSizeInGalaxies(x,y))", "all x y.((Sun(x) & Star(y) & InGalaxy(x,y)) -> AverageSize(x,y))", "all x y z.((Sun(x) & Star(y) & Galaxy(z)) -> AverageSize(x,y,z))", "all x.(Sun(x) -> AverageSize(x))", "all x.(Sun(x) -> AverageSizeInGalaxies(x))", "exists x.(Sun(x) & AverageSize(x) & Star(x) & InGalaxy(x))", "all x y.(Sun(x) -> AverageSize(x,y))", "exists x.(Sun(x) & AverageSize(x,Star,Galaxie))"]}
{"id": "entailmentbank_validation_81", "nl": "the sun is average in siza and average in temperature in our galaxy.", "fol": "", "prediction": ["all x y.((Sun(x) & Galaxy(y)) -> (AverageInSiza(x) & AverageInTemperature(x,y)))", "all x.(Sun(x) -> (AverageInSiza(x) & AverageInTemperature(x)))", "(AverageSunInSiza(sun) & AverageTemperatureInGalaxy(sun))", "(all x.(Sun(x) -> AverageInSiza(x)) & all y.(Sun(y) -> AverageInTemperature(y)))", "(AverageSun(s) & AverageTemperature(s) & InGalaxy(s))", "all x y.((Sun(x) & Galaxy(y)) -> (AverageInSiza(x,y) & AverageInTemperature(x,y)))", "all x.(Sun(x) -> (AverageInSiza(x) & AverageInTemperatureInGalaxy(x)))", "all x y z.((Sun(x) & Siza(y) & Galaxy(z)) -> (AverageIn(x,y) & AverageIn(x,z)))", "(AverageInSiza(sun) & AverageInTemperature(sun))", "(AverageInSiza) & AverageInTemperatureInGalaxy(Sun))", "all x y.(Sun(x) & Galaxy(y) & AverageInSiza(x,y) & AverageInTemperature(x,y))", "(AverageSunInSiza(Sun) & AverageTemperatureInGalaxy(Sun))", "all x y.((Sun(x) & Galaxy(y)) -> (AverageInSiza(x) & AverageInTemperature(x)))", "all x.(Sun(x) -> (AverageInSiza(x) & AverageInTemperatureInGalaxy(x)))", "exists x.(Sun(x) & AverageInSiza(x) & AverageInTemperature(x))", "all x.(Sun(x) -> (AverageInSiza(x) & AverageInTemperatureInGalaxie(x)))"]}
{"id": "entailmentbank_validation_82", "nl": "as the mass of a celestial object decreases, the surface gravity of that celestial object weakens.", "fol": "", "prediction": ["all x y.((CelestialObject(x) & MassDecrease(x)) -> SurfaceGravityWeakens(x,y))", "all x.((CelestialObject(x) & MassDecreases(x)) -> SurfaceGravityWeakens(x))", "all x y.((CelestialObject(x) & MassDecreases(x)) -> SurfaceGravityWeakens(y))", "all x y z.((CelestialObject(x) & Mass(y) & Mass(z) & Decreases(y,z)) -> WeakensSurfaceGravity(x))", "(all x.(DecreasedMass(x) -> WeakenedSurfaceGravity(x)))", "(DecreasesMass(celestialObject) -> WeakensSurfaceGravity(celestialObject))", "all x y.((CelestialObject(x) & MassDecrease(x,y)) -> SurfaceGravityWeakens(x,y))", "all x.((CelestialObject(x) & MassDecreases(x)) -> SurfaceGravityWeakens(x))", "all x y z.((CelestialObject(x) & MassDecrease(x,y) & SurfaceGravityWeakens(x,z)) -> DecreasesMass(x,z))", "all x.((CelestialObject(x) & MassDecrease(x)) -> SurfaceGravityWeakens(x))", "as mass decreases, surfacegravity of celestialobject weakens.", "all x.(DecreasesMassOfCelestialObject(x) -> WeakensSurfaceGravity(x))", "all x y.((CelestialObject(x) & MassDecreases(x)) -> SurfaceGravityWeakens(x,y))", "all x y.((CelestialObject(x) & DecreasesMass(x,y)) -> WeaksSurfaceGravity(x,y))", "all x.((CelestialObject(x) & MassDecreases(x)) -> SurfaceGravityWeakens(x))", "all x.((CelestialObject(x) & MassDecrease(x)) -> SurfaceGravityWeakens(x))"]}
{"id": "entailmentbank_validation_83", "nl": "as the force of gravity decreases, the weight of the object will decrease.", "fol": "", "prediction": ["all x.((ForceOfGravity(x) & Decreases(x)) -> WeightDecreases(x))", "all x y.((Object(x) & ForceOfGravity(y) & Decreases(x,y)) -> WeightDecreases(x,y))", "all x y.((ForceOfGravity(x) & Object(y) & DecreasesForceOfGravity(x,y)) -> WeightDecreases(y))", "(DecreasesForceOfGravity(x) -> WeightDecreases(x))", "as the force of gravity decreases, the weight of the object will decrease.", "all x y.((Frequency(x) & Gravity(y) & Decreases(x,y)) -> WeightDecreases(x,y))", "all x y z.((ForceOfGravity(x) & Weight(y) & Object(z) & DecreasesForceOfGravity(x,y,z)) -> WeightDecreases(y,z))", "all x.(DecreasesForceOfGravity(x) -> WeightDecreases(x))", "as force of gravity decreases, weight of object will decrease.", "all x.((ForceOfGravity(x) & Decreases(x)) -> WeightDecreases(x))", "-DecreasesForceOfGravity(x) -> WeightDecreases(x))", "all x.((FrequencyDecreases(x) & WeightDecreases(x)) -> WeightDecreases(x))", "(DecreasesForceOfGravity(x) -> WeightDecreases(x))", "all x y.((Object(x) & ForceOfGravity(y) & Decreases(x,y)) -> WeightDecreases(x,y))", "all x.(DecreasesForceOfGravity(x) -> WeightDecreases(x))", "all x.((GravityDecreases(x) & WeightDecreases(x)) -> Object(x))"]}
{"id": "entailmentbank_validation_84", "nl": "as the mass of a celestial object decreases, the weight of an object on that celestial object will decrease.", "fol": "", "prediction": ["all x y.((CelestialObject(x) & CelestialObject(y) & MassDecreases(x,y)) -> WeightDecreases(x,y))", "all x.((CelestialObject(x) & MassDecrease(x)) -> WeightDecrease(x))", "all x y z.((CelestialObject(x) & Mass(y) & Weight(z) & Decreases(x,y)) -> WeightDecreases(z,y))", "all x y.((CelestialObject(x) & MassDecrease(x)) -> WeightDecrease(y))", "all x y.((CelestialObject(x) & CelestialObject(y)) -> (MassDecreases(x,y) & WeightDecreases(x,y)))", "(all x y.((CelestialObject(x) & MassDecreases(x)) -> WeightDecreases(x,y))", "all x.((CelestialObject(x) & MassDecreases(x)) -> WeightDecreases(x))", "(all x.(DecreasedMass(x) -> DecreasedWeight(x)))", "all x y z.((CelestialObject(x) & Mass(y) & Weight(z) & Decreases(y,z)) -> WeightDecreases(z,x))", "all x.(DecreasesMassOfCelestialObject(x) -> WeightDecreasesOnCelestialObject(x))", "all x y.((CelestialObject(x) & MassDecreases(x,y)) -> WeightDecreases(x,y))", "as mass decreases, weight of celestialobjects will decrease.", "all x y z.((CelestialObject(x) & Mass(y) & Weight(z) & MassDecreases(x,y)) -> WeightDecreases(z,y))", "all x.((CelestialObject(x) & MassDecrease(x)) -> WeightDecrease(x))", "all x y.((CelestialObject(x) & CelestialObject(y) & MassDecreases(x,y)) -> WeightDecreases(x,y))", "all x.((CelestialObject(x) & MassDecrease(x)) -> WeightDecrease(x))"]}
{"id": "entailmentbank_validation_85", "nl": "the earth has more mass than the moon.", "fol": "", "prediction": ["all x y.((Earth(x) & Moon(y)) -> MoreMass(x,y))", "(MoreMass(Earth,Moon) & MoreMass(Earth,Moon))", "all x y.((Earth(x) & Moon(y)) -> MoreMass(x,y))", "all x y z.((Earth(x) & Moon(y) & Earth(z)) -> MoreMass(x,y,z))", "(MoreMass(Earth) & MoreMass(Moon))", "all x.(Earth(x) -> MoreMass(x,Moon))", "(MoreMass(earth,earth) & MoreMass(earth,moon))", "all x y.((Earth(x) & Moon(y)) -> HasMoreMass(x,y))", "the earth has more mass than moon.", "exists x.(Earth(x) & Moon(x) & MoreMass(x))", "(MoreMass(earth,earth) & MoreMass(moon,earth))", "all x.(Earth(x) -> MoreMass(x,Moon))", "(MoreMass(Earth) & MoreMass(Moon))", "all x y.((Earth(x) & Moon(y)) -> MoreMass(x,y))", "exists x.(Earth(x) & Earth(x) & Moon(x))", "all x y.((Earth(x) & Moon(y)) -> HasMoreMass(x,y))"]}
{"id": "entailmentbank_validation_86", "nl": "an object weighs more on earth than on the moon because earth has more mass than the moon.", "fol": "", "prediction": ["all x y.((Object(x) & Earth(y) & Moon(z)) -> WeighsMore(x,y,z))", "all x y z.((Object(x) & Earth(y) & Moon(z) & Earth(x) & Moon(z)) -> WeighsMore(x,y,z))", "all x.((Object(x) & WeighsMoreOnEarth(x) & WeighsMoreOnMoon(x)) -> EarthHasMoreMass(x,y))", "all x.(WeighsMoreOnEarthThanMoon(x) -> (EarthMoreMass(x,Moon) & EarthMoreMass(x,Moon)))", "all x y.((Object(x) & Earth(y) & Moon(z)) -> WeighsMore(x,y,z))", "all x y z.((Object(x) & Earth(y) & Moon(z) & Earth(y) & MoreMass(x,z)) -> WeighsMore(x,y,z))", "all x y z.(WeighsMoreOnEarthThanMoon(x,y) -> (Object(x) & Earth(y) & MoreMass(z)))", "exists x.(Object(x) & WeighsMoreOnEarth(x) & WeighsMoreOnMoon(x))", "all x y.((Object(x) & Earth(y) & Moon(z) & EarthMass(x,y)) -> WeighsMore(x,z))", "all x y.((Object(x) & Earth(y) & Moon(y)) -> WeighsMore(x,y))", "all x.((Object(x) & WeighsMoreOnEarth(x,y)) -> MoreOnMoon(y))", "all x.((Object(x) & Earth(x) & Moon(x)) -> WeighsMore(x,y))", "all x y.(WeighsMoreOnEarth(x,y) & WeighsMoreOnMoon(x,y))", "all x y z.((Object(x) & Earth(y) & Moon(z) & EarthMass(x,y)) -> WeighsMore(x,y,z))", "exists x.(Object(x) & WeighsMoreOnEarth(x) & WeighsMoreOnMoon(x))", "all x y.((Object(x) & Earth(y) & Moon(y)) -> WeighsMoreOn(x,y))"]}
{"id": "entailmentbank_validation_87", "nl": "less is the opposite of more.", "fol": "", "prediction": ["all x.(Less(x) -> OppositeOfMore(x))", "all x y.((Less(x) & More(y)) -> OppositeOf(x,y))", "(OppositeOfMore(Less))", "all x.(LessIsOppositeOfMore(x) -> OppositeOfMore(x))", "all x.(Less(x) -> OppositeOfMore(x))", "-(LessIsOppositeOfMore(x))", "all x y.((Less(x) & More(y)) -> OppositeOf(x,y))", "all x.((Less(x) & More(x)) -> OppositeOf(x,y))", "all x.(LessThanMore(x) -> OppositeOfMore(x))", "(OppositeOfMore(less))", "all x.(Less(x) -> OppositeOfMore(x))", "(OppositeOfMore(Less))", "is the opposite of more.", "all x y.((Less(x) & More(y)) -> OppositeOf(x,y))", "all x.(Lower(x) -> OppositeOfMore(x))", "all x.(Lower(x) -> OppositeOfMore(x))"]}
{"id": "entailmentbank_validation_88", "nl": "an object will weigh less on the moon than on the earth because the moon has less mass than the earth.", "fol": "", "prediction": ["all x y.((Object(x) & Moon(y) & Earth(y)) -> WeighsLess(x,y))", "all x y z.((Object(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighsLessOn(x,y,z))", "all x y.((Object(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighsLessOn(x,y,z))", "all x.((Moon(x) & Earth(x) & MoonLessMass(x,y)) -> WeighsLessOn(x,y))", "all x y.((Moon(x) & Earth(y) & Moon(x)) -> WeighsLess(x,y))", "all x y z.((Moon(x) & Earth(y) & Moon(z) & HasLessMass(z,y)) -> WeighsLessOn(x,y,z))", "all x.((Object(x) & Moon(x) & Earth(x)) -> WeighsLessOn(x,y))", "all x.((Moon(x) & Earth(x) & MoonLessMass(x,y)) -> WeighLessOn(x,y))", "all x.(WeighsLessOnMoonThanEarth(x) -> MoonLessMassThanEarth(x))", "all x y z.((Object(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighsLessOn(x,y,z))", "all x y z.((Moon(x) & Earth(y) & Moon(z) & LessMass(z,y)) -> WeighsLessOn(x,y,z))", "all x y.((Moon(x) & Earth(y) & Moon(x,y)) -> WeighLess(x,y))", "all x y.((Object(x) & Moon(y) & Earth(y)) -> WeighsLessOn(x,y))", "all x y.((Object(x) & Moon(y) & Earth(z) & HasLessMass(x,y)) -> WeighsLessOn(x,y,z))", "all x.((Object(x) & Moon(x) & Earth(x)) -> WeighsLessOn(x,y))", "exists x.(Moon(x) & Earth(x) & MoonLessMass(x,y))"]}
{"id": "entailmentbank_validation_89", "nl": "an astronaut is a kind of object.", "fol": "", "prediction": ["all x.(Astronaut(x) -> Object(x))", "all x.(Astronaut(x) -> Object(x))", "all x y.((Astronaut(x) & Object(y)) -> Object(x))", "all x.(Astronaut(x) -> Object(x))", "exists x y.(Astronaut(x) & Object(y) & Object(x))", "all x.(Astronaut(x) -> Object(x))", "all x.((Astronaut(x) & Object(x)) -> Object(x))", "exists x y.(Astronaut(x) & Object(y) & Object(y))", "all x.(Astronaut(x) -> Object(x))", "exists x y.(Astronaut(x) & Object(y) & Is(x,y))", "all x.(Astronaut(x) -> Object(x))", "all x.(Astronaut(x) -> Object(x))", "all x.((Astronaut(x) & Object(x)) -> Object(x))", "all x.(Astronaut(x) -> IsObject(x))", "all x.(Astronaut(x) -> Object(x))", "all x.(Astronaut(x) -> IsObject(x))"]}
{"id": "entailmentbank_validation_90", "nl": "an astronaut will weigh less on the moon than on earth because the moon has less mass than the earth.", "fol": "", "prediction": ["all x y.((Astronaut(x) & Moon(y) & Earth(z)) -> WeighsLessOn(x,y,z))", "all x y z.((Astronaut(x) & Moon(y) & Earth(z)) -> WeighsLessOn(x,y,z))", "(WeighsLessOnMoon(astronaut) & WeighsLessOnEarth(astronaut) & MoonLessMassOnEarth(astronaut))", "all x y.((Astronaut(x) & Moon(y) & Earth(y)) -> WeighsLess(x,y))", "all x.((Astronaut(x) & Moon(x) & Earth(x)) -> WeighsLessOn(x,y))", "all x y z.((Astronaut(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighsLessOn(x,y,z))", "all x y.((Astronaut(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighsLessOn(x,y,z))", "all x.(Astronaut(x) -> WeighsLessOnMoon(x))", "all x y z.((Astronaut(x) & Moon(y) & Earth(z)) -> WeighLessOn(x,y,z))", "all x.((Astronaut(x) & Moon(x) & Earth(x)) -> WeighsLessOn(x,y))", "all x.((Astronaut(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighsLess(x,y,z))", "all x.(Astronaut(x) -> WeighsLessOnMoonThanEarth(x))", "all x y.((Astronaut(x) & Moon(y) & Earth(z) & LessMass(x,y,z)) -> WeighsLessOn(x,y,z))", "all x y.((Astronaut(x) & Moon(y) & Earth(y)) -> WeighLessOn(x,y))", "all x y z.((Astronaut(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighsLess(x,y,z))", "all x y.((Astronaut(x) & Moon(y)) -> WeighsLessOn(x,y))"]}
{"id": "entailmentbank_validation_91", "nl": "using a telescope to photograph solar events requires a light filter.", "fol": "", "prediction": ["all x.((Telescope(x) & PhotographSolarEvents(x)) -> RequiresLightFilter(x))", "all x y.((Telescope(x) & SolarEvent(y) & Photograph(x,y)) -> RequiresLightFilter(x))", "all x.((Telescope(x) & PhotographsSolarEvents(x)) -> RequiresLightFilter(x))", "all x y.((Telescope(x) & SolarEvent(y) & Photographs(x,y)) -> RequiresLightFilter(x))", "all x.((Telescope(x) & PhotographSolarEvents(x)) -> RequiresLightFilter(x))", "all x y z.((Telescope(x) & SolarEvent(y) & LightFilter(z)) -> Requires(x,y,z))", "all x.((UsingTelescope(x) & PhotographsSolarEvents(x)) -> RequiresLightFilter(x))", "all x y.((Telescope(x) & SolarEvent(y) & Photograph(x,y)) -> RequiresLightFilter(x))", "all x.((Telescope(x) & PhotographsSolarEvents(x)) -> RequiresLightFilter(x))", "all x y.((Telescope(x) & PhotovoltaicEvent(y)) -> RequiresLightFilter(x,y))", "(all x.((Telescope(x) & PhotographsSolarEvents(x)) -> RequiresLightFilter(x))", "all x.(PhotographSolarEvents(x) -> RequiresLightFilter(x))", "all x y.((Telescope(x) & SolarEvent(y) & Photographs(x,y)) -> RequiresLightFilter(x))", "all x y.((Telescope(x) & Photograph(y) & SolarEvent(y)) -> RequiresLightFilter(x))", "all x.((Telescope(x) & PhotographSolarEvents(x)) -> RequiresLightFilter(x))", "all x.((Telescope(x) & PhotographsSolarEvents(x)) -> RequiresLightFilter(x))"]}
{"id": "entailmentbank_validation_92", "nl": "a solar flare is a kind of solar event.", "fol": "", "prediction": ["all x.(SolarFlash(x) -> SolarEvent(x))", "all x y.((SolarFlash(x) & SolarEvent(y)) -> SolarEvent(x))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x y.((SolarFlash(x) & SolarEvent(y)) -> SolarEvent(x,y))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x.(SolarFlame(x) -> SolarEvent(x))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x y.((SolarFlash(x) & SolarEvent(y)) -> SolarEvent(x))", "all x y.((SolarFlash(x) & SolarEvent(y)) -> SolarEvent(x,y))", "all x.(SolarFlash(x) -> SolarEvent(x))", "exists x.(SolarFlare(x) & SolarEvent(x))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x y.((SolarFlash(x) & SolarEvent(y)) -> SolarEvent(x))", "exists x.(SolarFlare(x) & SolarEvent(x))", "exists x.(SolarFlame(x) & SolarEvent(x))", "all x.(SolarFlash(x) -> SolarEvent(x))"]}
{"id": "entailmentbank_validation_93", "nl": "a solar prominence is a kind of solar event.", "fol": "", "prediction": ["all x.(SolarProminence(x) -> SolarEvent(x))", "all x y.((SolarProminence(x) & SolarEvent(y)) -> SolarEvent(x))", "all x.(SolarProminence(x) -> SolarEvent(x))", "all x.((SolarProminence(x) & SolarEvent(x)) -> SolarEvent(x))", "all x y.((SolarProminence(x) & SolarEvent(y)) -> SolarEvent(x,y))", "all x.(SolarProminence(x) -> SolarEvent(x))", "all x.((SolarProminence(x) & SolarEvent(x)) -> SolarEvent(x))", "all x y.((SolarProminence(x) & SolarEvent(y)) -> SolarEvent(x,y))", "all x.(SolarProminence(x) -> SolarEvent(x))", "all x.(SolarPresence(x) -> SolarEvent(x))", "all x y.((SolarPresence(x) & SolarEvent(y)) -> SolarEvent(x,y))", "all x.(SolarPresence(x) -> SolarEvent(x))", "all x.(SolarProminence(x) -> SolarEvent(x))", "all x y.((SolarProminence(x) & SolarEvent(y)) -> SolarEvent(x))", "exists x.(SolarPredominance(x) & SolarEvent(x))", "exists x.(SolarProminence(x) & SolarEvent(x))"]}
{"id": "entailmentbank_validation_94", "nl": "using a telescope to photograph a solar prominence and a solar flare requires a light filter.", "fol": "", "prediction": ["all x y.((Telescope(x) & SolarProminence(y) & SolarFlash(x)) -> (Photographs(x,y) & RequiresLightFilter(x)))", "(all x.(Telescope(x) -> PhotographsSolarProminence(x)) & all y.(SolarFlash(y) -> RequiresLightFilter(y)))", "all x y.((Telescope(x) & SolarProminence(y)) -> (Photographs(x,y) & RequiresLightFilter(x)))", "all x y z.((Telescope(x) & SolarProminence(y) & SolarFlash(z)) -> (Photographs(x,y) & RequiresLightFilter(z)))", "(all x y.((Telescope(x) & SolarProminence(y)) -> Photograph(x,y)) & all z w.((SolarFlash(z) & LightFilter(w)) -> Requires(z,w)))", "(all x.((Telescope(x) & SolarProminence(x)) -> Photographs(x)) & all y.((SolarFlash(y) & LightFilter(y)) -> Requires(y,x)))", "all x.((Telescope(x) & SolarProminence(x) & SolarFlash(x)) -> LightFilter(x))", "all x y.((Telescope(x) & SolarFlash(y)) -> (PhotographsSolarProminence(x) & RequiresLightFilter(y)))", "all x y.((Telescope(x) & SolarProminence(y)) -> Photographs(x,y)) & ((SolarFlash(x) & LightFilter(x)) -> Requires(x,y)))", "all x.((Telescope(x) & SolarProminence(x) & SolarFlash(x)) -> RequiresLightFilter(x))", "(all x y.((Telescope(x) & SolarProminence(y)) -> Photograph(x,y)) & all z w.((SolarFlash(z) & LightFilter(w)) -> Requires(z,w)))", "all x y z.((Telescope(x) & SolarProminence(y) & SolarFlash(z)) -> (Photographs(x,y) & RequiresLightFilter(z)))", "(all x y.((Telescope(x) & SolarProminence(y) & SolarFlash(x)) -> LightFilter(x)))", "all x y.((Telescope(x) & SolarFlash(y)) -> (PhotographsSolarProminence(x,y) & RequiresLightFilter(y,x)))", "(all x.(Telescope(x) -> PhotographsSolarProminence(x)) & all y.(SolarFlash(y) -> RequiresLightFilter(y)))", "all x.((Telescope(x) & SolarProminence(x) & SolarFlash(x)) -> LightFilter(x))"]}
{"id": "entailmentbank_validation_95", "nl": "if something is required for something else then that something allows that something else.", "fol": "", "prediction": ["all x y.((RequiredFor(x,y) & Other(y)) -> Allows(x,y))", "all x.((RequiredFor(x,y) & Other(y)) -> Allows(x,y))", "all x.((RequiredFor(x) & Allows(x)) -> Allows(x))", "all x y.((RequiredFor(x,y) & Other(y)) -> Allows(x,y))", "all x y.((RequiredFor(x,y) & SomethingOther(y)) -> Allows(x,y))", "all x y z.((RequiredFor(x,y) & Other(z)) -> Allows(x,z))", "all x.((RequiredFor(x,y) & Other(y)) -> Allows(x,y))", "exists x.(RequiredFor(x,y) & Allows(x,z))", "all x.((RequiredFor(x) & Allows(x,y)) -> Allows(x,y))", "all x y z.((RequiredFor(x,y) & Something(z) & RequiredFor(x,z)) -> Allows(x,z))", "all x y.((Required(x) & Other(y)) -> Allows(x,y))", "all x y.((RequiredFor(x,y) & Other(y)) -> Allows(x,y))", "exists x.(RequiredFor(x,y) & Allows(x,y))", "exists x.(RequiredFor(x,y) & AllowsFor(x,y))", "all x y.((RequiredFor(x,y) & SomethingOther(y)) -> Allows(x,y))", "exists x.(RequiredFor(x,y) & Allows(x,z))"]}
{"id": "entailmentbank_validation_96", "nl": "detailed observation of celestial objects requires a telescope.", "fol": "", "prediction": ["all x.(DetailedObservationOfCelestialObjects(x) -> RequiresTelescope(x))", "all x.((DetailedObservationOfCelestialObjects(x) & RequiresTelescope(x)) -> Requires(x,y))", "all x y.((DetailedObservation(x) & CelestialObject(y)) -> RequiresTelescope(x,y))", "(DetailedObservationOfCelestialObjects(x) -> RequiresTelescope(x))", "all x y.((DetailedObservationOfCelestialObjects(x) & Telescope(y)) -> Requires(x,y))", "all x.(DetailedObservationOfCelestialObjects(x) -> RequiresTelescope(x))", "all x.((DetailedObservationOfCelestialObjects(x) & RequiresTelescope(x)) -> RequiresTelescope(x))", "all x y z.((DetailedObservationOfCelestialObjects(x) & Telescope(y) & CelestialObject(z)) -> Requires(x,y,z))", "all x.(DetailledObservationOfCelestialObjects(x) -> RequiresTelescope(x))", "all x y.((DetailedObservation(x) & CelestialObject(y)) -> RequiresTelescope(x))", "all x y.((CelestialObject(x) & Telescope(y)) -> Requires(x,y))", "all x y.((DetailedObservationOfCelestialObjects(x) & Telescope(y)) -> Requires(x,y))", "all x.(DetailedObservationOfCelestialObjectsRequiresTelescope(x) -> Requires(x,y))", "all x.(DetailedObservationOfCelestialObjects(x) -> RequiresTelescope(x))", "all x.((DetailedObservationOfCelestialObjects(x) & RequiresTelescope(x)) -> Requires(x,y))", "all x.((DetailedObservationOfCelestialObjects(x) & RequiresTelescope(x)) -> RequiresTelescope(x))"]}
{"id": "entailmentbank_validation_97", "nl": "telescopes allow the detailed observation of celestial objects.", "fol": "", "prediction": ["all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))", "all x y.((Telescope(x) & CelestialObject(y)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))", "all x y z.((Telescope(x) & CelestialObject(y) & CelestialObject(z)) -> AllowsDetailedObservation(x,y,z))", "all x y.((Telescope(x) & CelestialObject(y)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))", "all x y z.((Telescope(x) & CelestialObject(y) & Object(z)) -> AllowsDetailedObservation(x,y,z))", "all x y.((Telescope(x) & CelestialObject(y)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailledObservationOfCelestialObjects(x))", "all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))", "all x.(Telescope(x) -> (AllowsDetailedObservationOfCelestialObjects(x) & AllowsDetailedObservationOfCelestialObjects(x)))", "all x y.((Telescope(x) & CelestialObject(y)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailedObservation(x))", "all x.(Telescope(x) -> AllowsDetailledObservationOfCelestialObjects(x))", "all x y.((Telescope(x) & CelestialObject(y)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))"]}
{"id": "entailmentbank_validation_98", "nl": "a planet is a kind of celestial object / celestial body.", "fol": "", "prediction": ["all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x y.((Planet(x) & CelestialObject(y)) -> CelestialBody(x,y))", "all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Planet(x) -> (CelestialObject(x) | CelestialBody(x)))", "all x y.((Planet(x) & CelestialObject(y)) -> CelestialBody(x,y))", "all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Planet(x) -> (CelestialObject(x) | CelestialBody(x)))", "all x.(Planet(x) -> CelestialObject(x))", "all x y.((Planet(x) & CelestialObject(y)) -> CelestialBody(x,y))", "exists x.(Planet(x) & CelestialObject(x) & CelestialBody(x))", "all x y.((Planet(x) & CelestialObject(y)) -> CelestialBody(x,y))", "all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))", "exists x.(Planet(x) & CelestialObject(x) & CelestialBody(x))", "all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))", "exists x.(Planet(x) & CelestialObject(x) & CelestialBody(x))"]}
{"id": "entailmentbank_validation_99", "nl": "telescopes allow the detailed observation of planets.", "fol": "", "prediction": ["all x.(Telescope(x) -> AllowsDetailedObservationOfPlanets(x))", "all x y.((Telescope(x) & Planet(y)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailedObservationOfPlanets(x))", "all x y z.((Telescope(x) & Planet(y) & Planet(z)) -> AllowsDetailedObservation(x,y,z))", "all x y.((Telescope(x) & Planet(y)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailedObservationOfPlanets(x))", "all x y.((Telescope(x) & Planet(y)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailedObservation(x,Planet))", "all x y z.((Telescope(x) & Planet(y) & Planet(z)) -> AllowsDetailedObservation(x,y,z))", "all x.(Telescope(x) -> AllowsDetailledObservationOfPlanets(x))", "all x y.((Telescope(x) & Planet(y)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailedObservationOfPlanets(x))", "all x y.((Telescope(x) & Planet(y)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailledObservationOfPlanets(x))", "all x.(Telescope(x) -> AllowsDetailedObservation(x,Planet))", "all x.(Telescope(x) -> AllowsDetailedObservationOfPlanets(x))"]}
{"id": "entailmentbank_validation_100", "nl": "gravity causes orbits.", "fol": "", "prediction": ["all x.(Gravity(x) -> CausesOrbits(x))", "all x y.((Gravity(x) & Orbit(y)) -> Causes(x,y))", "all x.(Gravity(x) -> CausesOrbits(x))", "all x.(GravityCausesOrbits(x) -> GravityCausesOrbits(x))", "all x y z.((Gravity(x) & Orbit(y) & Gravity(z)) -> Causes(x,y,z))", "(CausesOrbits(gravity) & Gravity(gravity))", "all x.(Germination(x) -> CausesOrbits(x))", "all x y.((Gravity(x) & Orbit(y)) -> Causes(x,y))", "(CausesOrbits(Gravity) & Gravity(Gravity))", "all x.(Gravity(x) -> CausesOrbits(x))", "all x y.((Gravity(x) & Orbit(y)) -> Causes(x,y))", "all x y.((Gravity(x) & Orbit(y)) -> Causes(x,y))", "all x.(Gravity(x) -> CausesOrbits(x))", "exists x.(GravityCausesOrbits(x))", "exists x.(Gravity(x) & CausesOrbits(x))", "all x y.((Gravity(x) & Orbit(y)) -> Causes(x,y))"]}
{"id": "entailmentbank_validation_101", "nl": "gravity causes the earth to revolve around the sun.", "fol": "", "prediction": ["all x y.((Gravity(x) & Earth(y)) -> RevolveAround(y,x))", "all x y z.((Gravity(x) & Earth(y) & Sun(z)) -> CausesRevolvesAround(y,z))", "all x.(GravityCausesEarthToRevokeAroundSun(x) -> EarthRevolvesAroundSun(x))", "(CausesEarthToRevokeAroundSun(gravity) -> EarthRevolvesAroundSun(gravity))", "all x y.((Gravity(x) & Earth(y)) -> RevolveAroundSun(y,x))", "gravity causes earth to revolveAroundSun(x)", "all x y z.((Gravity(x) & Earth(y) & Sun(z)) -> CausesToRevokeAround(y,z))", "all x.(GravityCausesEarthToRevokeAroundSun(x) -> EarthRevolvesAround(x))", "all x.(GerminationCausesEarthToRevokeAroundSun(x))", "(CausesEarthToRevokeAroundSun(gravity,Earth))", "all x y.((Gravity(x) & Earth(y)) -> RevolveAround(y,x))", "All x y.((Germination(x) & Earth(y)) -> RevolveAroundSun(x,y))", "all x y z.((Gravity(x) & Earth(y) & Sun(z)) -> RevolveAround(y,z))", "all x.(GravityCausesEarthToRevokeAround(x,sun) -> EarthRevolvesAround(x,sun))", "all x.(GravityCausesEarthToRevokeAroundSun(x))", "all x y.((Gravity(x) & Earth(y)) -> CausesRevolvesAround(y,x))"]}
{"id": "entailmentbank_validation_102", "nl": "the moon orbits the earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> Orbits(x,y))", "all x.(Moon(x) -> OrbitsEarth(x))", "all x y z.((Moon(x) & Earth(y) & Earth(z)) -> Orbits(x,y,z))", "all x y.((Moon(x) & Earth(y)) -> Orbits(x,y))", "all x.(Moon(x) -> OrbitsEarth(x))", "(OrbitsEarth(Moon,Earth))", "all x y z.((Moon(x) & Earth(y) & Orbits(x,y)) -> Orbits(x,z))", "all x y.((Moon(x) & Earth(y)) -> Orbits(x,y))", "all x.(Moon(x) -> OrbitsEarth(x))", "(OrbitsEarth(Moon,Earth))", "exists x.(Moon(x) & Orbits(x,Earth))", "(OrbitsMoon(Moon,Earth))", "all x y.(Moon(x) & Earth(y))", "all x y.((Moon(x) & Earth(y)) -> Orbits(x,y))", "exists x.(Moon(x) & Orbits(x,Earth))", "exists x.(Moon(x) & OrbitsEarth(x))"]}
{"id": "entailmentbank_validation_103", "nl": "gravity causes the moon to orbit the earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Gravity(y)) -> OrbitsEarth(x,y))", "all x.((Moon(x) & GravityCauses(x,Moon)) -> OrbitsEarth(x))", "all x y z.((Moon(x) & Gravity(y) & Earth(z)) -> CausesOrbit(x,y,z))", "all x y.((Moon(x) & Gravity(y)) -> CausesOrbit(x,y))", "all x.((Moon(x) & Gravity(x)) -> OrbitsEarth(x))", "(OrbitsEarth(Moon) & GravityCauses(Moon,Earth))", "all x.(Germination(x) -> CausesMoonToOrbitEarth(x))", "all x.(GravityCausesMoonToOrbitEarth(x) -> MoonOrbitEarth(x))", "(all x.(Moon(x) -> OrbitsEarth(x)))", "all x y.((Moon(x) & Gravity(y)) -> OrbitsEarth(x,y))", "all x y z.((Moon(x) & Gravity(y) & Earth(z)) -> CausesOrbit(x,y,z))", "all x.(Moon(x) -> CausesOrbit(x,Earth))", "(orbitsEarth(Moon,Gravity))", "exists x.(Moon(x) & GravityCausesOrbit(x,Earth))", "all x y.((Moon(x) & Gravity(y)) -> CausesOrbit(x,y))", "all x y.((Moon(x) & Gravity(y) & Causes(x,y)) -> OrbitsEarth(x))"]}
{"id": "entailmentbank_validation_104", "nl": "gravity causes both the orbit of the earth around the sun and the orbit of the moon around the earth.", "fol": "", "prediction": ["all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (Orbit(x,y) & Orbit(x,z)))", "all x y.((Gravity(x) & Earth(y)) -> (Orbit(x,y) & Orbit(x,y)))", "(OrbitOfEarthAroundSun(gravity) & OrbitOfMoonAroundEarth(gravity))", "(CausesOrbitOfEarthAroundSun(gravity) & CausesOrbitOfMoonAroundEarth(gravity))", "all x.(Gravity(x) -> (OrbitOfEarth(x) & OrbitOfMoon(x)))", "all x y.((Gravity(x) & Earth(y)) -> (OrbitOf(x,y) & OrbitOf(x,y)))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (Orbit(x,y) & Orbit(x,z)))", "all x.(Gravity(x) -> (OrbitOfEarthAroundSun(x) & OrbitOfMoonAroundEarth(x)))", "(OrbitOfEarthAndSun(gravity) & OrbitOfMoon(gravity))", "(OrbitOfEarthAroundSun(gravity) & OrbitOfMoonAroundEarth(gravity))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (OrbitOf(x,y) & OrbitOf(x,z)))", "all x.(GravityCausesOrbit(x,Earth,Sun) & Orbit(x,Moon,Earth))", "all x y.((Gravity(x) & Earth(y)) -> (Orbit(x,y) & Orbit(x,y) & Orbit(x,y)))", "(orbit(gravity) & Orbit(gravity) & Earth(gravity))", "(OrbitOfEarthAroundSun(gravity) & OrbitOfMoonAroundEarth(gravity))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (Orbit(y,z) & Orbit(z,y)))"]}
{"id": "entailmentbank_validation_105", "nl": "spring tide is when the distance between high tide and low tide is the greatest.", "fol": "", "prediction": ["all x.((HighTidal(x) & LowTidal(x)) -> DistanceGreatest(x))", "all x y.((SpringTidal(x) & HighTidal(y) & LowTidal(y)) -> DistanceGreatest(x,y))", "all x.((HighTide(x) & LowTide(x)) -> DistanceGreatest(x))", "all x y z.((SpringTidal(x) & HighTidal(y) & LowTidal(z)) -> DistanceGreatest(x,y,z))", "all x.(SpringTidal(x) -> (HighTidal(x) & LowTidal(x) & DistanceGreatest(x)))", "(LowTidalDistance(springTidal) & GreatestDistance(highTidal))", "all x y.((SpringTide(x) & HighTide(y) & LowTide(y)) -> DistanceGreatest(x,y))", "all x.((HighTidal(x) & LowTidal(x)) -> GreatestDistance(x))", "(GreatestDistanceBetweenHighTideAndLowTide(springTide))", "(LowTideDistance(springTide) & GreatestDistance(highTide,lowTide))", "all x y.((SpringTidal(x) & HighTidal(y) & LowTidal(y)) -> DistanceGreatest(x,y))", "(DistanceBetweenHighTideAndLowTide(springTide))", "all x.((HighTide(x) & LowTide(x)) -> GreatestDistance(x))", "all x.(SpringTidal(x) -> (HighTidal(x) & LowTidal(x)))", "all x y.((SpringTidal(x) & HighTidal(y) & LowTidal(y)) -> GreatestDistance(x,y))", "all x.((HighTide(x) & LowTide(x)) -> DistanceGreatest(x))"]}
{"id": "entailmentbank_validation_106", "nl": "spring tides occur during a full moon.", "fol": "", "prediction": ["all x.(SpringTide(x) -> OccursDuringFullMoon(x))", "all x.((SpringTidal(x) & FullMoon(x)) -> OccursDuring(x,y))", "all x y.((SpringTidal(x) & FullMoon(y)) -> OccursDuring(x,y))", "all x.(SpringTidal(x) -> OccursDuringFullMoon(x))", "all x.((SpringTide(x) & FullMoon(x)) -> OccursDuring(x,y))", "all x y z.((SpringTidal(x) & FullMoon(y) & FullMoon(z)) -> OccursDuring(x,y,z))", "all x y.((SpringTide(x) & FullMoon(y)) -> OccursDuring(x,y))", "(all x.(FullMoon(x) -> SpringTidal(x)))", "all x y.((SpringTidal(x) & FullMoon(y)) -> OccursDuring(x,y))", "all x y.((FullMoon(x) & SpringTidal(y)) -> OccursDuring(y,x))", "(all x.(SpringTide(x) -> FullMoon(x)))", "all x.(SpringTide(x) -> OccursDuringFullMoon(x))", "all x.(SpringTidal(x) -> OccursDuringFullMoon(x))", "(all x.(FullMoon(x) -> SpringTide(x)))", "all x y.((SpringTide(x) & FullMoon(y)) -> OccursDuring(x,y))", "all x.((SpringTidal(x) & FullMoon(x)) -> Occurs(x))"]}
{"id": "entailmentbank_validation_107", "nl": "the highest tides occur during a full moon.", "fol": "", "prediction": ["all x.((Tide(x) & FullMoon(x)) -> Highest(x))", "all x y.((Tide(x) & FullMoon(y)) -> Highest(x,y))", "all x y.((Tidal(x) & FullMoon(y)) -> Highest(x,y))", "all x.((Tide(x) & FullMoon(x)) -> Highest(x))", "all x y z.((Tidal(x) & FullMoon(y) & FullMoon(z)) -> Highest(x,y))", "(HighestTide(x) & FullMoon(x))", "all x y.((Tide(x) & FullMoon(y)) -> Highest(x,y))", "all x y.((HighestTide(x) & FullMoon(y)) -> OccursDuring(x,y))", "(HighestTide(x) -> FullMoon(x))", "all x.((Tidal(x) & FullMoon(x)) -> Highest(x))", "all x.(HighestTide(x) -> FullMoon(x))", "all x.((Tide(x) & FullMoon(x)) -> Highest(x))", "all x.((HighestTidal(x) & FullMoon(x)) -> OccursDuring(x,y))", "exists x.(Tide(x) & FullMoon(x) & HighestTide(x))", "all x.(HighestTidal(x) -> FullMoon(x))", "all x y.((HighestTide(x) & FullMoon(y)) -> OccursDuring(x,y))"]}
{"id": "entailmentbank_validation_108", "nl": "marine fossils means fossils of marine animals.", "fol": "", "prediction": ["all x.(MarineFossil(x) -> MeansFossil(x))", "all x y.((MarineFossil(x) & MarineAnimal(y)) -> MeansFossil(x,y))", "all x.(MarineFossil(x) -> MeansFossilOfMarineAnimals(x))", "all x y z.((MarineFossil(x) & MarineAnimal(y) & MarineAnimal(z)) -> MeansFossil(x,y,z))", "all x.(MarineFossil(x) -> (MeansFossil(x) & MarineAnimal(x)))", "all x y.((MarineFossil(x) & MarineAnimal(y)) -> MeansFossil(x,y))", "(all x.(MarineFossil(x) -> Means(x,MarineAnimal)))", "all x.((MarineFossil(x) & MarineAnimal(y)) -> MeansFossil(x,y))", "all x y z.((MarineFossil(x) & MarineAnimal(y) & MarineAnimal(z)) -> MeansFossil(x,y,z))", "all x y.((MarineFossil(x) & MarineAnimal(y)) -> MeansFossil(x,y))", "all x.(MarineFossil(x) -> MeansFossil(x,MarineAnimals))", "all x.(Meaning(x,MarineFossil) -> MarineAnimal(x))", "all x.(MarineFossil(x) -> (MeanFossil(x) & MarineAnimal(x)))", "all x y.((MarineFossil(x) & MarineAnimal(y)) -> MeansFossil(x,y))", "all x.(MarineFossil(x) -> MeansFossilOfMarineAnimals(x))", "all x y.((MarineFossil(x) & MarineAnimal(y)) -> Fossil(x,y))"]}
{"id": "entailmentbank_validation_109", "nl": "marine animals are water animals.", "fol": "", "prediction": ["all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x y.((MarineAnimal(x) & WaterAnimal(y)) -> WaterAnimal(x))", "(all x.(MarineAnimal(x) -> WaterAnimal(x)))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x y.((MarineAnimal(x) & WaterAnimal(y)) -> WaterAnimal(x))", "(all x.(MarineAnimal(x) -> WaterAnimal(x)))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x y.((MarineAnimal(x) & WaterAnimal(y)) -> WaterAnimal(x))", "all x.(MountainAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))"]}
{"id": "entailmentbank_validation_110", "nl": "marine fossils are fossils of water animals.", "fol": "", "prediction": ["all x.(MarineFossil(x) -> FossilOfWaterAnimals(x))", "all x y.((MarineFossil(x) & WaterAnimal(y)) -> Fossil(x,y))", "all x.(MarineFossil(x) -> (FossilOfWaterAnimals(x)))", "(all x.(MarineFossil(x) -> WaterAnimal(x)))", "all x.(MarineFossil(x) -> WaterAnimalFossil(x))", "(Fossil(Marine) & WaterAnimal(WaterAnimal))", "all x y.((MarineFossil(x) & WaterAnimal(y)) -> Fossil(x,y))", "all x.(MarineFossil(x) -> FossilOfWaterAnimals(x))", "all x.(MarineFossil(x) -> (FossilOfWaterAnimals(x) & WaterAnimal(x)))", "all x.(MountainFossil(x) -> WaterAnimalFossil(x))", "all x y.((MarineFossil(x) & WaterAnimal(y)) -> Fossil(x,y))", "all x.(MarineFossil(x) -> (FossilOfWaterAnimals(x) & WaterAnimal(x)))", "all x y.((MarineFossil(x) & WaterAnimal(y)) -> Fossil(x,y))", "all x.(MarineFossil(x) -> WaterAnimal(x))", "all x.(MarineFossil(x) -> FossilOfWaterAnimals(x))", "all x y.((MarineFossil(x) & WaterAnimal(y)) -> Fossil(x,y))"]}
{"id": "entailmentbank_validation_111", "nl": "marine fossils are found in mountains.", "fol": "", "prediction": ["all x.(MarineFossil(x) -> FoundInMountains(x))", "all x y.((MarineFossil(x) & Mountain(y)) -> FoundIn(x,y))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x y z.((MarineFossil(x) & Mountain(y) & Mountain(z)) -> FoundIn(x,y,z))", "(all x.(MarineFossil(x) -> FoundInMountains(x)))", "all x y.((MarineFossil(x) & Mountain(y)) -> FoundIn(x,y))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x y.((MarineFossil(x) & Mountain(y)) -> FoundIn(x,y))", "exists x.(Mountain(x) & MarineFossil(x))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x y.((MarineFossil(x) & Mountain(y)) -> FoundIn(x,y))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x y.((MarineFossil(x) & Mountain(y)) -> FoundIn(x,y))", "all x.(MarineFossil(x) -> FoundIn(x,Mountains))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "exists x.(MarineFossil(x) & FoundIn(x,Mountains))"]}
{"id": "entailmentbank_validation_112", "nl": "fossils of water animals are found in mountains.", "fol": "", "prediction": ["all x.(Fossil(x) -> FoundInMountains(x))", "all x y.((Fossil(x) & WaterAnimal(y)) -> FoundInMountains(x,y))", "all x.((Fossil(x) & WaterAnimal(x)) -> FoundInMountains(x))", "all x y.((Fossil(x) & WaterAnimal(y) & FoundIn(x,y)) -> FoundIn(x,y))", "(FossilOfWaterAnimals(fossil) & FoundInMountains(f))", "all x y z.((Fossil(x) & WaterAnimal(y) & Mountain(z)) -> FoundIn(x,y,z))", "(all x.(WaterAnimal(x) -> FoundInMountain(x)))", "all x.(Fossil(x) -> FoundInMountains(x))", "all x y.((WaterAnimal(x) & Mountain(y)) -> FoundIn(x,y))", "all x.((Fossil(x) & WaterAnimal(x)) -> FoundInMountains(x))", "all x y.((Fossil(x) & WaterAnimal(y) & FoundIn(x,y)) -> FoundIn(x,y))", "all x y z.((Fossil(x) & WaterAnimal(y) & Mountain(z)) -> FoundIn(x,y,z))", "exists x.(Fossil(x) & WaterAnimal(x) & FoundInMountains(x))", "all x y.((Fossil(x) & WaterAnimal(y) & Mountain(z)) -> FoundIn(x,y,z))", "all x.(Fossil(x) -> FoundInMountains(x))", "all x.((Fossil(x) & WaterAnimal(x)) -> FoundInMountains(x))"]}
{"id": "entailmentbank_validation_113", "nl": "if fossils of a water animal or plant are found in a place then that place used to be covered by water in the past.", "fol": "", "prediction": ["all x y.((Fossil(x) & WaterAnimalOrPlant(y) & FoundInPlace(x,y)) -> UsedToBeCoveredByWater(x,y))", "all x y z.((Fossil(x) & WaterAnimalOrPlant(y) & Place(z) & FoundIn(x,y,z)) -> UsedToBeCoveredByWater(z))", "all x y.((WaterAnimalOrPlant(x) & FoundInPlace(x,y)) -> UsedToBeCoveredByWater(y))", "all x.((Fossil(x) & WaterAnimalOrPlant(x) & FoundInPlace(x)) -> UsedToBeCoveredByWater(x))", "all x y.((Fossil(x) & WaterAnimalOrPlant(y) & FoundInPlace(x,y)) -> UsedToBeCoveredByWater(x))", "all x y z.((Fossil(x) & WaterAnimalOrPlant(y) & Place(z) & FoundIn(x,y,z)) -> UsedToBeCoveredByWater(x,z))", "all x y z.((WaterAnimalOrPlant(x) & Place(y) & FoundIn(x,y) & Water(z)) -> UsedToBeCoveredBy(y,z))", "all x.((Fossil(x) & FoundInPlace(x)) -> UsedToBeCoveredByWater(x))", "all x y.((WaterAnimalOrPlant(x) & Place(y) & FoundIn(x,y)) -> UsedToBeCoveredByWater(y))", "exists x.(Fossil(x) & FoundInPlace(x) & WaterAnimalOrPlant(x) & CoveredByWater(x))", "all x.((WaterAnimalOrPlant(x) & FoundInPlace(x)) -> UsedToBeCoveredByWater(x))", "all x.((Fossil(x) & WaterAnimalOrPlant(x)) -> UsedToBeCoveredByWater(x))", "all x y.((Fossil(x) & WaterAnimalOrPlant(y) & FoundInPlace(x,y)) -> UsedToBeCoveredByWaterInPast(x))", "all x y z.((Fossil(x) & WaterAnimalOrPlant(y) & Place(z) & FoundIn(x,y,z)) -> CoveredByWater(z))", "all x y.((Fossil(x) & WaterAnimalOrPlant(x) & FoundInPlace(x)) -> UsedToBeCoveredByWater(y))", "all x y z.((Fossil(x) & WaterAnimalOrPlant(y) & Place(z) & FoundIn(x,z)) -> UsedToBeCoveredByWater(z))"]}
{"id": "entailmentbank_validation_114", "nl": "the mountains used to be covered by water in the past.", "fol": "", "prediction": ["all x.(Mountain(x) -> UsedToBeCoveredByWater(x))", "all x y.((Mountain(x) & Water(y)) -> UsedToBeCovered(x,y))", "all x.(Mountain(x) -> CoveredByWater(x))", "all x y.((Mountain(x) & Water(y)) -> CoveredBy(x,y))", "all x y z.((Mountain(x) & Water(y) & Water(z)) -> UsedToBeCovered(x,y,z))", "all x.(Mountain(x) -> UsedToBeCoveredByWater(x))", "(all x.(Mountain(x) -> CoveredByWater(x)))", "all x.((Mountain(x) & CoveredByWater(x)) -> UsedToBe(x))", "all x y.((Mountain(x) & Water(y)) -> UsedToBeCovered(x,y))", "all x.(Mountain(x) -> CoveredByWater(x))", "all x y.((Mountain(x) & Water(y)) -> CoveredBy(x,y))", "all x.(Mountain(x) -> UsedToBeCoveredByWater(x))", "all x.(Mountain(x) -> CoveredByWater(x))", "all x y.((Mountain(x) & Past(y)) -> CoveredByWater(x,y))", "all x.(Mountain(x) -> UsedToBeCoveredByWater(x))", "all x.(Mountain(x) & CoveredByWater(x))"]}
{"id": "entailmentbank_validation_115", "nl": "a mountain is a kind of environment.", "fol": "", "prediction": ["all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x y.((Mountain(x) & Environment(y)) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x y.((Mountain(x) & Environment(y)) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x y.((Mountain(x) & Environment(y)) -> Environment(x,y))", "all x.(Mountain(x) -> Environment(x))", "all x y.((Mountain(x) & Environment(y)) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "exists x.(Mountain(x) & EnvironmentalType(x))", "all x.(Mountain(x) -> Environment(x))", "exists x.(Mountain(x) & Environment(x))", "exists x.(Mountain(x) & Environment(x))", "exists x.(Mountain(x) & EnvironmentalType(x))"]}
{"id": "entailmentbank_validation_116", "nl": "if something used to be in the past then that something has changed.", "fol": "", "prediction": ["all x.((Past(x) & UsedToBe(x)) -> Changed(x))", "all x.((UsedToBeInThePast(x) & Changed(x)) -> Changed(x))", "all x.((Something(x) & UsedToBeInPast(x)) -> Changed(x))", "all x.((Past(x) & UsedToBe(x)) -> Changed(x))", "all x y.((Past(x) & Past(y)) -> Changed(x,y))", "all x y.(((Past(x) & Past(y)) -> Changed(x,y))", "all x.((UsedToBeInPast(x) & Changed(x)) -> Changed(x))", "all x y.((Past(x) & Past(y)) -> HasChanged(x,y))", "all x.((Something(x) & UsedToBeInThePast(x)) -> Changed(x))", "all x y.((UsedToBeInThePast(x) & Changed(y)) -> Changed(y))", "all x.((InPast(x) & UsedToBe(x)) -> Changed(x))", "all x.((Past(x) & UsedToBe(x)) -> Changed(x))", "exists x.(Past(x) & Changed(x))", "all x y.((Past(x) & Past(y)) -> HasChanged(x,y))", "exists x.(UsedToBe(x) & Changed(x))", "all x y.(((Past(x) & Past(y)) -> Changed(x,y))"]}
{"id": "entailmentbank_validation_117", "nl": "a body of water is a kind of environment.", "fol": "", "prediction": ["all x.(BodyOfWater(x) -> Environment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "all x.((BodyOfWater(x) & Environment(x)) -> Environment(x))", "all x y.((BodyOfWater(x) & Environment(y)) -> Environment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "all x y.((BodyOfWater(x) & Environment(y)) -> Environment(x,y))", "all x.((BodyOfWater(x) & Environment(x)) -> Environment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "all x y.((BodyOfWater(x) & Environment(y)) -> Environment(x))", "all x.((BodyOfWater(x) & Environment(x)) -> Environment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "all x y.((BodyOfWater(x) & Environment(y)) -> Environmental(x))", "all x.(BodyOfWater(x) -> Environment(x))", "exists x.(BodyOfWater(x) & Environment(x))", "exists x.(BodyOfWater(x) & EnvironmentalType(x))", "exists x.(BodyOfWater(x) & Environment(x))"]}
{"id": "entailmentbank_validation_118", "nl": "the environment has changed from a body of water to mountains.", "fol": "", "prediction": ["all x.(EnvironmentChange(x) -> (BodyOfWater(x) & Mountain(x)))", "all x y.((Environment(x) & BodyOfWater(y)) -> ChangedToMountains(x))", "all x.(Environment(x) -> (BodyOfWater(x) & Mountain(x)))", "(EnvironmentChangedFromBodyOfWaterToMountains(Environment))", "all x.((Environment(x) & BodyOfWater(x)) -> Mountain(x))", "all x y.((Environment(x) & BodyOfWater(y) & Mountain(y)) -> ChangedFromTo(x,y))", "all x y z.((Environment(x) & BodyOfWater(y) & Mountain(z)) -> ChangedFromTo(x,y,z))", "(EnvironmentChangeFromBodyOfWaterToMountains(Environment))", "all x.((Environment(x) & BodyOfWater(x) & Mountain(x)) -> Changed(x))", "(EnvironmentChangesFromBodyOfWaterToMountains(Environment))", "all x y.((Environment(x) & BodyOfWater(y)) -> ChangedToMountains(x))", "all x.(EnvironmentChange(x) -> (BodyOfWater(x) & Mountains(x)))", "all x y.((Environment(x) & BodyOfWater(y) & Mountain(z)) -> ChangedFromTo(x,y,z))", "exists x.(Environment(x) & BodyOfWater(x) & Mountain(x))", "all x.(EnvironmentChange(x) -> (BodyOfWater(x) | Mountains(x)))", "all x y.((Environment(x) & BodyOfWater(y) & Mountain(y)) -> ChangedTo(x,y))"]}
{"id": "entailmentbank_validation_119", "nl": "environments are found on the crustal surface of earth.", "fol": "", "prediction": ["all x.(Environment(x) -> FoundOnCrustalSurfaceOfEarth(x))", "all x y.((Environment(x) & Earth(y)) -> FoundOnCrustalSurface(x,y))", "(all x.(Environment(x) -> FoundOnCrustalSurface(x)))", "all x.(Environment(x) -> FoundOnCrustalSurfaceOfEarth(x))", "all x y z.((Environment(x) & CrustalSurface(y) & Earth(z)) -> FoundOn(x,y,z))", "all x y.((Environment(x) & Earth(y)) -> FoundOnCrustalSurface(x,y))", "all x.(Environment(x) -> FoundOnCrustalSurface(x))", "all x y.((Environment(x) & Earth(y)) -> FoundOnCrustalSurface(x,y))", "exists x.(CrustalSurface(x) & FoundOn(x,Earth))", "all x y z.(Environment(x) -> (CrustalSurface(y) & FoundOn(x,z) & Earth(z)))", "all x.(Environment(x) -> exists y.(CrustalSurface(y) & FoundOn(x,y)))", "all x.(Environment(x) -> FoundOnCrustalSurfaceOfEarth(x))", "all x.(Environment(x) -> FoundOnCrustalSurface(x))", "all x y.((Environment(x) & Earth(y)) -> FoundOnCrustalSurface(x,y))", "exists x.(Environment(x) & CrustalSurfaceOfEarth(x))", "all x.(Environment(x) -> FoundOnCrustalSurfaceOfEarth(x))"]}
{"id": "entailmentbank_validation_120", "nl": "the environments on the crustal surface of earth have changed from a body of water to mountains.", "fol": "", "prediction": ["all x y.((CrustalSurface(x) & Earth(y)) -> ChangedEnvironment(x,y))", "all x.((Environment(x) & CrustalSurface(x)) -> ChangedFromBodyOfWaterToMountains(x))", "all x y z.((Environment(x) & CrustalSurface(y) & Earth(z)) -> (ChangedFromBodyOfWaterToMountains(x,y,z)))", "all x y.((CrustalSurface(x) & Earth(y)) -> (ChangedFromBodyOfWaterToMountains(x,y)))", "all x y.((Environment(x) & CrustalSurface(y) & Earth(z)) -> ChangedFromBodyOfWaterToMountains(x,y,z))", "all x y z.((CrustalSurface(x) & Earth(y) & Environment(z) & ChangedFromBodyOfWaterToMountains(x,y)) -> ChangedFromBodyOfWaterToMountains(x,z))", "all x.(CrustalSurface(x) -> (ChangedEnvironment(x) & BodyOfWater(x) & Mountain(x)))", "(CrustalSurfaceOfEarthChange(Environment) & BodyOfWaterToMountains(Environment))", "all x.((CrustalSurface(x) & BodyOfWater(x)) -> Mountain(x))", "all x.((Environment(x) & CrustalSurfaceOfEarth(x)) -> ChangedFromBodyOfWaterToMountains(x))", "all x y z.((Environment(x) & CrustalSurfaceOfEarth(y) & BodyOfWater(z) & ChangedFromToMountains(x,y,z)) -> ChangedFromToMountains(x,y,z))", "(CrustalSurfaceOfEarth(en) & ChangedEnvironmentsFromBodyOfWaterToMountains(en))", "(CrustalSurface(earth) & ChangedEnvironment(earth,water,mountains))", "all x y.((CrustalSurface(x) & Earth(y) & ChangedEnvironment(x,y)) -> ChangedFromBodyOfWaterToMountains(x))", "all x.((CrustalSurface(x) & BodyOfWater(x) & Mountain(x)) -> ChangedEnvironment(x))", "all x.(CrustalSurface(x) -> ChangedEnvironment(x))"]}
{"id": "entailmentbank_validation_121", "nl": "organisms remains can be preserved in sedimentary rock.", "fol": "", "prediction": ["all x.(Organism(x) -> CanBePreservedInSedimentaryRock(x))", "all x y.((Organism(x) & SedimentaryRock(y)) -> CanPreserve(x,y))", "(PreservedInSedimentaryRock(organisms) & Remains(organisms))", "all x.(Organism(x) -> CanBePreservedInSedimentaryRock(x))", "all x.(Organism(x) -> CanPreserveInSedimentaryRock(x))", "all x y z.((Organism(x) & SedimentaryRock(y) & Remains(z)) -> CanBePreservedIn(x,y,z))", "all x y.((Organism(x) & SedimentaryRock(y)) -> CanPreserve(x,y))", "all x.(OrganismRemains(x) -> CanBePreservedInSedimentaryRock(x))", "all x.(Organism(x) -> PreservedInSedimentaryRock(x))", "all x y.((Organism(x) & SedimentaryRock(y)) -> CanBePreservedIn(x,y))", "all x.(OrganismRemainsCanBePreservedInSedimentaryRock(x) -> CanBePreservedIn(x,SedimentaryRock))", "all x y.((Organism(x) & SedimentaryRock(y)) -> CanPreserveRemains(x,y))", "all x.(Organism(x) -> CanBePreservedInSedimentaryRock(x))", "all x y.((Organism(x) & SedimentaryRock(y)) -> PreservedIn(x,y))", "exists x.(OrganismRemain(x) & PreservedInSedimentaryRock(x))", "exists x.(OrganismRemains(x) & PreservedInSedimentaryRock(x))"]}
{"id": "entailmentbank_validation_122", "nl": "fossils are the remains of organisms or part of organisms.", "fol": "", "prediction": ["all x.(Fossil(x) -> (Organism(x) | OrganismPartOfOrganism(x)))", "all x y.((Fossil(x) & Organism(y)) -> (RemainsOfOrganism(x,y) | PartOfOrganism(x,y)))", "(RemainsOfOrganisms(fossil) | PartOfOrganisms(fossil))", "all x.(Fossil(x) -> (RemainsOfOrganisms(x) | PartOfOrganisms(x)))", "all x y z.((Fossil(x) & Organism(y) & Organism(z)) -> (RemainsOfOrganism(x,y) | PartOfOrganism(x,z)))", "all x.(Fossil(x) -> (Organism(x) | OrganismPartOfOrganism(x)))", "all x y.((Fossil(x) & Organism(y)) -> (RemainsOf(x,y) | PartOf(x,y)))", "(RemainsOfOrganisms(fossil) | PartOfOrganisms(fossil))", "all x y.((Fossil(x) & Organism(y)) -> (RemainsOfOrganism(x,y) | PartOfOrganism(x,y)))", "all x.(Fossil(x) -> (RemainsOfOrganisms(x) | PartOfOrganisms(x)))", "all x.(Fossil(x) -> (Organism(x) | OrganismPartOfOrganism(x)))", "all x.(Fossil(x) -> (Organism(x) | OrganismPartOfOrganism(x)))", "all x y.((Fossil(x) & Organism(y)) -> (Remains(x,y) | PartOf(x,y)))", "all x.(Fossil(x) -> (OrganismRemains(x) | PartOfOrganisms(x)))", "all x.(Fossil(x) -> (Organism(x) | OrganismPartOfOrganism(x)))", "all x.(Fossil(x) -> (RemainsOfOrganisms(x) | PartOfOrganisms(x)))"]}
{"id": "entailmentbank_validation_123", "nl": "fossils are mostly found in sedimentary rock.", "fol": "", "prediction": ["all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x y.((Fossil(x) & SedimentaryRock(y)) -> FoundIn(x,y))", "(exists x.(Fossil(x) & FoundInSedimentaryRock(x)))", "all x.(Fossil(x) -> (FoundInSedimentaryRock(x) & MostlyFoundInSedimentaryRock(x)))", "(Fossil(fossil) | SedimentaryRock(fossil)))", "(all x.(Fossil(x) -> FoundInSedimentaryRock(x)))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x y.((Fossil(x) & SedimentaryRock(y)) -> FoundIn(x,y))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> (FoundInSedimentaryRock(x) & MostlyInSedimentaryRock(x)))", "all x y.((Fossil(x) & SedimentaryRock(y) & FoundIn(x,y)) -> FoundIn(x,y))", "all x y.((Fossil(x) & SedimentaryRock(y)) -> FoundIn(x,y))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "exists x.(Fossil(x) & SedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))"]}
{"id": "entailmentbank_validation_124", "nl": "a mineral usually has a crystal structure.", "fol": "", "prediction": ["all x.(Mineral(x) -> HasCrystalStructure(x))", "all x.(Mineral(x) -> HasCrystalStructure(x))", "all x.(Mineral(x) -> UsuallyHasCrystalStructure(x))", "all x y.((Mineral(x) & CrystalStructure(y)) -> Has(x,y))", "all x.(Mineral(x) -> HasCrystalStructure(x))", "all x y.((Mineral(x) & CrystalStructure(y)) -> Has(x,y))", "all x.(Mineral(x) -> UsuallyHasCrystalStructure(x))", "all x.(Mineral(x) -> HasCrystalStructure(x))", "all x.(Mineral(x) -> HasKrisisStructure(x))", "all x y.((Mineral(x) & CrystalStructure(y)) -> Has(x,y))", "all x.(Mineral(x) -> CrystalStructure(x))", "all x y.((Mineral(x) & CrystalStructure(y)) -> Has(x,y))", "exists x.(Mineral(x) & CrystalStructure(x))", "all x y.((Mineral(x) & CrystalStructure(y)) -> Has(x,y))", "exists x.(Mineral(x) & CrystalStructure(x))", "exists x.(Mineral(x) & CrystalStructure(x))"]}
{"id": "entailmentbank_validation_125", "nl": "a quartz is made of six-sided transparent crystals.", "fol": "", "prediction": ["all x.(Quarz(x) -> MadeOfSixSidedTransparentCrystals(x))", "all x y.((Quarz(x) & SixSidedTransparentCrystals(y)) -> MadeOf(x,y))", "all x.(Quarz(x) -> (MadeOfSixSidedTransparentCrystals(x)))", "all x.(Quarz(x) -> MadeOfSixSidedTransparentCrystals(x))", "all x.(Quarz(x) -> (MadeOfSixSidedTransparentCrystals(x)))", "all x y z.((Quarz(x) & SixSidedTransparentCrystals(y) & Quartz(z)) -> MadeOf(x,y,z))", "all x y.((Quarz(x) & SixSidedTransparentCrystals(y)) -> MadeOf(x,y))", "all x y.((Quarz(x) & Crystal(y)) -> MadeOfSixSidedTransparent(x,y))", "all x.(Quarz(x) -> (MadeOfSixSidedTransparentCrystals(x)))", "all x y.((Quarz(x) & SixSidedTransparentCrystals(y)) -> MadeOf(x,y))", "all x.(Quarz(x) -> MadeOfSixSidedTransparentCrystals(x))", "all x.(Quarry(x) -> SixSidedTransparentCrystals(x))", "exists x.(Quarz(x) & SixSidedTransparentCrystals(x))", "all x y.((Quarz(x) & SixSidedTransparentCrystals(y)) -> MadeOf(x,y))", "exists x.(Quarry(x) & SixSidedTransparentCrystals(x))", "exists x.(Quartz(x) & SixSidedTransparentCrystals(x))"]}
{"id": "entailmentbank_validation_126", "nl": "quartz is a kind of mineral.", "fol": "", "prediction": ["all x.(Quarz(x) -> Mineral(x))", "all x.(Quarz(x) -> Mineral(x))", "all x y.((Quarz(x) & Mineral(y)) -> Mineral(x))", "all x.(Quarz(x) -> Mineral(x))", "(Mineral(quercus) & Mineral(quercus))", "all x y.((Quarz(x) & Mineral(y)) -> Mineral(x))", "(Mineral(quercet) & Mineral(quercet))", "all x.(Quarry(x) -> Mineral(x))", "all x y.((Quarz(x) & Mineral(y)) -> Mineral(x))", "(Mineral(quesar) & Mineral(quesar))", "all x.(Quarz(x) -> Mineral(x))", "all x.(Quarz(x) -> Mineral(x))", "all x.(Quarry(x) -> Mineral(x))", "exists x.(Quarz(x) & Mineral(x) & Mineral(x))", "all x.(Quarry(x) -> Mineral(x))", "exists x.(Quarry(x) & Mineral(x) & Mineral(x))"]}
{"id": "entailmentbank_validation_127", "nl": "different classes of rocks are formed by different methods.", "fol": "", "prediction": ["all x y.((Rock(x) & Class(y)) -> FormedBy(x,y))", "all x.(Rock(x) -> FormedByDifferentMethods(x))", "all x y.((RockClass(x) & Method(y)) -> FormedBy(x,y))", "exists x.(RockClass(x) & FormedByVariousMethods(x))", "all x y z.((Rock(x) & Class(y) & Method(z)) -> FormedBy(x,y,z))", "all x y.((Rock(x) & Class(y)) -> FormedByVariousMethods(x,y))", "(FormedByVariousMethods(rock,rock) & DifferentClasses(rock,rock))", "all x.(Rock(x) -> FormedByDifferentMethods(x))", "(exists x.(RockClass(x) & FormedBy(x,y)))", "exists x.(RockClass(x) & FormedBy(x,y))", "all x y z.((RockClass(x) & Method(y) & Method(z)) -> FormedBy(x,y,z))", "all x y z.((Rock(x) & Class(y) & Method(z)) -> FormedBy(x,y,z))", "exists x.(RockClass(x) & FormedByMethod(x))", "all x y.((RockClass(x) & Method(y)) -> FormedBy(x,y))", "exists x.(RockClass(x) & FormedByVariousMethods(x))", "exists x.(RockClass(x) & FormedByMethod(x))"]}
{"id": "entailmentbank_validation_128", "nl": "class is a measure of how a rock is formed.", "fol": "", "prediction": ["all x.(Class(x) -> MeasuresFormationOfRock(x))", "all x.((Rock(x) & MeasuresFormation(x)) -> Forms(x))", "all x y.((Rock(x) & Class(y)) -> MeasuresFormation(x,y))", "all x.(Class(x) -> MeasuresFormationOfRock(x))", "all x.((Rock(x) & MeasuresFormation(x)) -> Class(x))", "all x y.((Rock(x) & Class(y)) -> MeasuresFormation(x,y))", "all x.((RockClass(x) & MeasuresFormation(x)) -> Forms(x))", "all x y z.((Rock(x) & Class(y) & Rock(z)) -> MeasuresFormation(y,z))", "all x.(Class(x) -> MeasuresHowRockFormed(x))", "all x y.((RockClass(x) & Rock(y)) -> MeasuresFormation(x,y))", "all x y.((Rock(x) & Rock(y)) -> MeasuresFormation(x,y))", "all x y.((Rock(x) & Class(y)) -> MeasuresFormation(y,x))", "exists x.(RockClass(x) & MeasuresFormation(x))", "all x.(Class(x) -> MeasuresRockFormation(x))", "exists x.(RockClass(x) & MeasuresFormation(x))", "exists x.(RockClass(x) & Measures(x,rock,rock))"]}
{"id": "entailmentbank_validation_129", "nl": "the method by which a rock is formed can be used to classify rocks.", "fol": "", "prediction": ["all x.((Method(x) & RockFormed(x)) -> ClassifyRocks(x))", "all x y.((Method(x) & Rock(y) & FormedBy(x,y)) -> ClassifiesRocks(x))", "all x.((MethodByFormingRock(x) & Rock(y)) -> ClassifyRocks(x))", "all x y.((Method(x) & Rock(y) & Formed(x,y)) -> ClassifiesRocks(x,y))", "all x y z.((Method(x) & Rock(y) & Rock(z) & FormedBy(x,y)) -> ClassifiesRocks(x,z))", "all x.((Method(x) & RockFormed(x)) -> ClassifiesRocks(x))", "all x y.((Method(x) & Rock(y) & FormedBy(x,y)) -> ClassifyRocks(x,y))", "all x.((MethodByFormingRock(x) & FormedByRock(x)) -> ClassifiesRocks(x))", "all x y.((MethodBy(x,y) & Rock(y)) -> ClassifiesRocks(x,y))", "all x.(MethodBy(x,rock) -> ClassifyRocks(x))", "all x.(Method(x) -> ClassifyRocks(x))", "all x.((Method(x) & FormedRock(x)) -> ClassifiesRocks(x))", "all x y.((Method(x) & Rock(y) & Formed(x,y)) -> ClassifyRocks(x))", "(all x.(FormedRock(x) -> ClassifiesRocks(x)))", "all x y.((Method(x) & RockFormed(x)) -> ClassifyRocks(y))", "all x.((Method(x) & RockFormed(x)) -> ClassifyRocks(x))"]}
{"id": "entailmentbank_validation_130", "nl": "the origin of a rock means the method by which a rock is formed.", "fol": "", "prediction": ["all x.((Rock(x) & Origin(x)) -> FormedBy(x,rock))", "all x y.((Rock(x) & Origin(y)) -> (FormedBy(x,y) & Rock(y)))", "all x.((Rock(x) & Origin(x)) -> FormedByMethod(x))", "all x y z.((Rock(x) & Origin(y) & Rock(z)) -> (MethodBy(x,z) & FormedBy(z,x)))", "all x y.((Rock(x) & Rock(y)) -> OriginMethod(x,y))", "all x y.((Rock(x) & Origin(x,y)) -> FormedBy(y,x))", "all x.((Rock(x) & Origin(x)) -> FormsRock(x))", "all x.(OriginOfRock(x) -> (MethodByFacingRock(x)))", "all x y z.((Rock(x) & Origin(y) & Method(z) & FormedBy(x,z)) -> OriginOf(x,y))", "all x y.((Rock(x) & Rock(y)) -> OriginMethodBy(x,y))", "all x.((Rock(x) & Origin(x)) -> FormedBy(x,rock))", "all x y.((Rock(x) & Origin(x,y)) -> (FormedBy(y,x) & Rock(y)))", "all x.(OriginOfRock(x) -> MethodBy(x,rock))", "all x.((Rock(x) & OriginMethod(x)) -> FormedBy(x,rock))", "all x.((Rock(x) & Origin(x)) -> FormsRock(x))", "exists x.(RockOrigin(x) & MethodBy(x,rock))"]}
{"id": "entailmentbank_validation_131", "nl": "the origin of rocks can be used to classify rocks.", "fol": "", "prediction": ["all x.(Rock(x) -> Classify(x,rocks))", "all x y.((Rock(x) & Origin(y)) -> ClassifyRocks(x,y))", "all x.((Rock(x) & Origin(x)) -> ClassifyRocks(x))", "all x.(Rock(x) -> ClassifyRocks(x))", "all x y.((Rock(x) & Origin(y)) -> Classifies(x,y))", "all x.((Rock(x) & OriginOfRock(x)) -> ClassifyRocks(x))", "all x y z.((Rock(x) & Origin(y) & Rock(z)) -> Classifies(x,z))", "all x y.((Rock(x) & Origin(y) & Classify(x,y)) -> CanBeUsedToClassify(x,y))", "all x.(Rock(x) -> CanBeClassified(x))", "all x y.((Rock(x) & Origin(y)) -> ClassifyRocks(x,y))", "all x.((Rock(x) & Origin(x)) -> ClassifyRocks(x))", "all x y.((Rock(x) & Origin(y) & Classified(x,y)) -> Classify(x,y))", "exists x.(RockOrigin(x) & ClassifyRocks(x))", "all x y.((Rock(x) & OriginOf(x,y)) -> ClassifyRocks(x))", "all x.(Rock(x) -> ClassifiesRocks(x))", "exists x.(RockOrigin(x) & ClassifyRocks(x))"]}
{"id": "entailmentbank_validation_132", "nl": "rock formation can be used to study the history of rocks on earth.", "fol": "", "prediction": ["all x.(RockFormation(x) -> CanBeUsedToStudyRocksOnEarth(x))", "all x y.((RockFormation(x) & Rock(y)) -> CanBeUsedToStudy(x,y))", "all x.(RockFormation(x) -> (StudiesRockHistory(x) & OnEarth(x)))", "all x y z.((RockFormation(x) & Rock(y) & Earth(z)) -> CanBeUsedToStudy(x,y,z))", "all x y.((RockFormation(x) & Rock(y)) -> CanBeUsedToStudy(x,y))", "all x.(RockFormation(x) -> StudiesRockHistoryOnEarth(x))", "all x.((RockFormation(x) & Earth(y)) -> CanBeUsedToStudyRockHistory(x,y))", "all x y.((RockFormation(x) & Earth(y)) -> CanBeUsedToStudyRockHistory(x,y))", "all x.(RockFormation(x) -> CanBeUsedToStudyRockHistory(x))", "all x y z.((RockFormation(x) & Rock(y) & Earth(z)) -> CanBeUsedToStudy(x,y,z))", "all x y.((RockFormation(x) & Rock(y)) -> (StudiesHistory(x,y) & OnEarth(x)))", "all x.(RockFormation(x) -> (StudiesRocksOnEarth(x) & StudiesRockHistory(x)))", "all x.(RockFormation(x) -> StudiesRocksOnEarth(x))", "all x y.((RockFormation(x) & Earth(y)) -> StudiesRockHistory(x,y))", "exists x.(RockFormation(x) & UsedToStudyRocks(x))", "exists x.(RockFormation(x) & StudyRockHistory(x))"]}
{"id": "entailmentbank_validation_133", "nl": "the formation of something is a kind of process.", "fol": "", "prediction": ["all x.(FormationOf(x) -> Process(x))", "all x.(Formation(x) -> Process(x))", "all x y.((Formation(x) & Something(y)) -> Process(x))", "all x.(FormationOf(x,y) -> Process(x))", "all x y.((Formation(x) & Something(y)) -> Process(x))", "all x y z.((Formation(x) & Something(y) & Process(z)) -> Forms(x,y,z))", "all x.(Formation(x) -> Process(x))", "all x y.((FormationOf(x,y) & Something(y)) -> Process(x))", "all x y.((Formation(x) & Something(y)) -> Process(x,y))", "all x.(FormationOf(x) -> Process(x))", "all x y.((Formation(x) & Something(y)) -> Process(x))", "all x.(Formation(x) -> Process(x))", "exists x.(Formation(x) & Something(x))", "exists x.(FormationOf(x,y) & Something(y))", "all x y.((Formation(x) & Something(y)) -> Process(x,y))", "exists x.(Formation(x) & Something(x))"]}
{"id": "entailmentbank_validation_134", "nl": "studying rock formations can mean studying the history and processes of earth.", "fol": "", "prediction": ["all x.(StudyingRockFormation(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x.(StudiesRockFormations(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x y.((RockFormation(x) & Earth(y)) -> (StudiesHistory(x,y) & StudiesProcesses(x,y)))", "all x y z.((RockFormation(x) & History(y) & EarthProcesses(z)) -> Studies(x,y,z))", "(StudiesRockFormations(StudiesEarthHistoryAndProcesses(StudiesEarth))", "all x y.((StudyRockFormation(x) & Earth(y)) -> (StudiesHistory(x,y) & StudiesProcesses(x,y)))", "all x.(StudyingRockFormations(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x y.((RockFormation(x) & Earth(y)) -> (StudiesHistory(x,y) & StudiesProcesses(x,y)))", "all x.(StudiesRockFormations(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x.((StudyRockFormation(x) & Earth(y)) -> (StudiesHistory(x,y) & StudiesProcesses(x,y)))", "all x y z.((RockFormation(x) & Earth(y) & History(z)) -> Studies(x,y,z))", "all x y.((RockFormation(x) & Earth(y)) -> (StudiesHistoryAndProcesses(x,y)))", "all x.(StudyRockFormations(x) -> (StudiesHistory(x) & StudiesProcessesOfEarth(x)))", "all x.((StudiesRockFormations(x) & StudiesEarthHistoryAndProcesses(x)) -> StudiesEarth(x))", "all x.(StudiesRockFormation(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x y.((RockFormation(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))"]}
{"id": "entailmentbank_validation_135", "nl": "structural geologists study rock formations.", "fol": "", "prediction": ["all x y.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x.(StructuralGeologist(x) -> StudiesRockFormations(x))", "all x y z.((StructuralGeologist(x) & RockFormation(y) & RockFormation(z)) -> Studies(x,y,z))", "all x y.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x.(StructuralGeologist(x) -> StudiesRockFormations(x))", "all x y z.((StructuralGeologist(x) & RockFormation(y) & Structure(z)) -> Studies(x,y,z))", "(StudiesRockFormations(structuralGeologists) & StudiesRockFormations(structuralGeologists))", "all x y.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x.(StructuralGeologist(x) -> StudiesRockFormations(x))", "all x y z.((StructuralGeologist(x) & RockFormation(y) & Formation(z)) -> Studies(x,y,z))", "all x.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x.(StructuralGeologist(x) -> StudiesRockFormation(x))", "all x y.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x.(StructuralGeologist(x) -> StudiesRockFormations(x))", "all x y.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x.(StructuralGeologist(x) -> StudiesRockFormation(x))"]}
{"id": "entailmentbank_validation_136", "nl": "structural geologists study the history and processes of earth.", "fol": "", "prediction": ["all x y.((StructuralGeologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x.(StructuralGeologist(x) -> StudiesEarthHistoryAndProcesses(x))", "all x y z.((StructuralGeologist(x) & Earth(y) & History(z)) -> Studies(x,y,z))", "(StudiesHistoryAndProcessesOfEarth(StructuralGeologists)", "all x y.((StructuralGeologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x.(StructuralGeologist(x) -> StudiesEarthHistoryAndProcesses(x))", "all x.(StructuralGeologist(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "(StudiesEarthHistoryAndProcesses(StructuralGeologists)", "all x y z.((StructuralGeologist(x) & Earth(y) & History(z)) -> StudiesAndProcesses(x,y,z))", "all x y z.((StructuralGeologist(x) & Earth(y) & HistoryAndProcesses(z)) -> Studies(x,y,z))", "all x y.((StructuralGeologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x.(StructuralGeologist(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x.(StructuralGeologist(x) -> StudiesEarthHistoryAndProcesses(x))", "all x y.((StructuralGeologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x.(StructuralGeologist(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x.(StructuralGeologist(x) -> StudiesEarthHistoryAndProcesses(x))"]}
{"id": "entailmentbank_validation_137", "nl": "how earth's environment changed is a part of the history of earth's environment.", "fol": "", "prediction": ["all x.((EarthsEnvironment(x) & Changed(x)) -> PartOfHistory(x))", "all x y.((EarthsEnvironment(x) & EarthsEnvironment(y)) -> Changed(x,y))", "all x.((EarthsEnvironment(x) & Changed(x)) -> PartOfHistoryOfEarthsEnvironment(x))", "all x.((EarthsEnvironment(x) & HowEarthsEnvironmentChange(x)) -> PartOfHistoryOfEarthsEnvironment(x))", "all x y.((EarthsEnvironment(x) & Environment(y)) -> Changed(x,y))", "all x.(EarthsEnvironment(x) -> PartOfHistory(x))", "all x y z.((EarthsEnvironment(x) & Environment(y) & Environment(z)) -> Changed(x,y,z))", "(PartOfEarthsEnvironment(e) & HowEarthsEnvironmentChange(e))", "all x.(EarthsEnvironmentChange(x) -> PartOfHistory(x))", "all x.((EarthsEnvironmentChange(x)) -> PartOfHistoryOfEarthsEnvironment(x))", "all x y.((EarthsEnvironment(x) & EarthsEnvironment(y)) -> Changes(x,y))", "all x y z.((EarthsEnvironment(x) & Environment(y) & Environment(z)) -> Changes(x,y,z))", "all x y.((EarthEnvironment(x) & EarthEnvironment(y)) -> Changed(x,y))", "all x.((EarthsEnvironment(x) & EarthsEnvironment(y)) -> PartOfHistory(x,y))", "all x y.((EarthsEnvironment(x) & Environment(y)) -> Changes(x,y))", "all x.(EarthsEnvironment(x) -> PartOfHistory(x))"]}
{"id": "entailmentbank_validation_138", "nl": "fossils can be used to study the history of organisms and environments on earth.", "fol": "", "prediction": ["all x.(Fossil(x) -> (StudiesOrganismsAndEnvironments(x) & OnEarth(x)))", "all x y.((Fossil(x) & Organism(y)) -> (StudiesHistory(x,y) & StudiesEnvironment(x,y)))", "all x y z.((Fossil(x) & Organism(y) & Environment(z)) -> (StudiesHistory(x,y,z) & OnEarth(x)))", "all x y.((Fossil(x) & Organism(y) & Environment(y)) -> CanBeUsedToStudy(x,y))", "(StudiesOrganismAndEnvironmentHistory(fossil) & OnEarth(fossil))", "all x.(Fossil(x) -> (StudiesOrganismsAndEnvironments(x) & OnEarth(x)))", "all x y z.((Fossil(x) & Organism(y) & Environment(z)) -> CanBeUsedToStudy(x,y,z))", "all x.(Fossil(x) -> (UsedToStudyOrganismsAndEnvironments(x) & OnEarth(x)))", "all x y.((Fossil(x) & Organism(y)) -> CanBeUsedToStudy(x,y))", "all x.(Fossil(x) -> (StudiesOrganismsAndEnvironments(x) & OnEarth(x)))", "all x y z.((Fossil(x) & Organism(y) & Environment(z)) -> (StudiesHistory(x,y,z) & OnEarth(x)))", "all x y.((Fossil(x) & Organism(y) & Environment(y)) -> CanBeUsedToStudy(x,y))", "all x.(Fossil(x) -> (StudiesOrganisms(x) & StudiesEnvironments(x)))", "all x.(Fossil(x) -> (UsedToStudyOrganismsAndEnvironments(x) & OnEarth(x)))", "all x.(Fossil(x) -> CanBeUsedToStudyOrganismsAndEnvironments(x))", "all x y.((Fossil(x) & Organism(y)) -> StudiesHistoryOnEarth(x,y))"]}
{"id": "entailmentbank_validation_139", "nl": "studying fossils in rock formations can mean studying the history and processes of earth.", "fol": "", "prediction": ["all x.((StudiesFossil(x) & RockFormation(x)) -> StudiesEarthHistoryAndProcesses(x))", "all x y.((Study(x) & Fossil(y) & RockFormation(y)) -> (StudiesHistory(x,y) & StudiesProcesses(x,y)))", "all x y.((StudyFossil(x) & RockFormation(y)) -> (StudiesHistory(x,y) & StudiesProcessesOfEarth(x,y)))", "all x.((StudiesFossil(x) & InRockFormation(x)) -> StudiesEarthHistoryAndProcesses(x))", "all x.(StudiesFossil(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x y z.((Study(x) & Fossil(y) & RockFormation(z)) -> (StudiesHistoryAndProcessesOfEarth(x,y,z)))", "(StudiesFossil(x) & InRockFormation(x)) -> StudiesEarthHistoryAndProcesses(x))", "all x y.((Study(x) & RockFormation(y)) -> (StudiesHistory(x,y) & StudiesProcesses(x,y)))", "all x.((StudyFossil(x) & RockFormation(x)) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x y z.((StudyFossil(x) & RockFormation(y) & RockFormation(z)) -> (StudiesHistoryAndProcessesOfEarth(x,y,z)))", "all x y.((StudiesFossil(x) & RockFormation(y)) -> (StudiesHistoryAndProcessesOfEarth(x)))", "all x y.((ScientificFossil(x) & RockFormation(y)) -> (StudiesHistoryAndProcessesOfEarth(x,y)))", "all x.(StudyingFossilsInRockFormations(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x.(StudiesFossil(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x.((StudiesFossil(x) & RockFormation(x)) -> (StudiesHistory(x) & StudiesProcessesOfEarth(x)))", "all x.((StudyFossil(x) & RockFormation(x)) -> (StudiesHistory(x) & StudiesProcessesOfEarth(x)))"]}
{"id": "entailmentbank_validation_140", "nl": "paleontologists study fossils in rock formations.", "fol": "", "prediction": ["all x y.((Paleontologist(x) & RockFormation(y)) -> StudiesFossil(x,y))", "all x y z.((Paleontologist(x) & RockFormation(y) & Fossil(z)) -> StudiesIn(x,y,z))", "all x.(Paleontologist(x) -> StudiesFossil(x))", "all x y.((Paleontologist(x) & RockFormation(y)) -> StudiesFossil(x,y))", "(StudiesFossilInRockFormations(paleontologist) & InRockFormations(paleontologist))", "all x y z.((Paleontologist(x) & RockFormation(y) & Fossil(z)) -> StudiesIn(x,y,z))", "all x.(Paleontologist(x) -> StudiesFossil(x,rockFormation))", "all x.(Paleontologist(x) -> StudiesFossilInRockFormation(x))", "all x y.((Paleontologist(x) & RockFormation(y)) -> StudiesFossil(x,y))", "all x y z.((Paleontologist(x) & RockFormation(y) & Fossil(z)) -> StudiesIn(x,y,z))", "all x.(Paleontologist(x) -> StudiesFossilsInRockFormations(x))", "all x y.((Paleontologist(x) & RockFormation(y)) -> StudiesFossilsIn(x,y))", "all x y z.((Paleontologist(x) & RockFormation(y) & Fossil(z)) -> StudiesIn(x,y,z))", "all x.(Paleontologist(x) -> StudiesFossil(x))", "all x y.((Paleontologist(x) & RockFormation(y)) -> StudiesFossil(x,y))", "all x.(Paleontologist(x) -> StudiesFossilsInRockFormations(x))"]}
{"id": "entailmentbank_validation_141", "nl": "paleontologists study the history and processes of earth.", "fol": "", "prediction": ["all x.(Paleontologist(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x y.((Paleontologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x y z.((Paleontologist(x) & Earth(y) & History(z)) -> StudiesAndProcesses(x,y,z))", "all x.(Paleontologist(x) -> StudiesEarthHistoryAndProcesses(x))", "all x y.((Paleontologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "(StudiesHistoryAndProcessesOfEarth(paleontologist)", "(StudiesEarth(paleontologists) & StudiesEarthHistoryAndProcesses(paleontologists))", "all x y z.((Paleontologist(x) & Earth(y) & History(z)) -> Studies(x,y,z))", "all x.(Paleontologist(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x.(Paleontologist(x) -> StudiesEarthHistoryAndProcesses(x))", "all x y.((Paleontologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x y z.((Paleontologist(x) & Earth(y) & History(z)) -> StudiesAndProcesses(x,y,z))", "all x.(Paleontologist(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x y.((Paleontologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x.(Paleontologist(x) -> StudiesEarthHistoryAndProcesses(x))", "all x.(Paleontologist(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))"]}
{"id": "entailmentbank_validation_142", "nl": "structural geologists and paleontologists both study the history and processes of earth.", "fol": "", "prediction": ["all x y.((StructuralGeologist(x) & Paleontologist(y)) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(y)))", "(StudiesEarth(structuralGeologists) & StudiesEarth(paleontologists))", "both studiesthehistoryandprocessesofearth(structuralgeologist,structuralgeologist,structuralgeologist,structuralgeologist,structuralgeologist,structuralgeologist,structuralgeologist) & paleontologist(p))", "((StructuralGeologist(x) | Paleontologist(x))) -> StudiesEarthHistoryAndProcesses(x))", "(StudiesHistoryAndProcessesOfEarth(StructuralGeologists) & StudiesEarth(Paleontologists))", "all x y.((StructuralGeologist(x) & Paleontologist(y)) -> (StudiesHistoryAndProcessesOfEarth(x) & StudiesEarth(y)))", "(StudiesEarth(structuralGeologist) & StudiesEarth(Paleontologist))", "(StudiesEarthHistoryAndProcesses(StructuralGeologists) & StudiesEarth(Paleontologists))", "all x.((StructuralGeologist(x) & Paleontologist(x)) -> StudiesEarthHistoryAndProcesses(x))", "(StudiesEarth(structuralGeologist) & StudiesEarth(paleontologist))", "(StudyEarth(StructuralGeologist) & StudyEarth(Paleontologist))", "all x.((StructuralGeologist(x) | Paleontologist(x)) -> StudiesEarthHistoryAndProcesses(x))", "all x y.((StructuralGeologist(x) & Paleontologist(y)) -> (StudiesEarth(x) & StudiesEarthHistory(y) & StudiesEarthProcesses(y)))", "((StructuralGeologist(x) | Paleontologist(x))) -> StudiesEarthHistoryAndProcesses(x))", "all x.((StructuralGeologist(x) & Paleontologist(x)) -> StudiesEarthHistoryAndProcesses(x))", "all x y.((StructuralGeologist(x) & Paleontologist(y)) -> StudiesEarthHistoryAndProcesses(x,y))"]}
{"id": "entailmentbank_validation_143", "nl": "metamorphic rocks do not contain fossils.", "fol": "", "prediction": ["all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x y.((MetamorphicRock(x) & Fossil(y)) -> -Contains(x,y))", "(-ContainsFossil(metamorphicRocks))", "all x.(MetomorphicRock(x) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x y.((MetamorphicRock(x) & Fossil(y)) -> -Contains(x,y))", "(all x.(MetamorphicRock(x) -> -ContainsFossil(x)))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x.(MetomorphicRock(x) -> -ContainsFossil(x))", "all x y.((MetamorphicRock(x) & Fossil(y)) -> -Contains(x,y))", "(all x.(MetamorphicRock(x) -> -ContainsFossil(x)))", "all x.(MetamorphicRock(x) -> -ContainsFossils(x))", "all x.(MetamorphicRock(x) -> -ContainFossil(x))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainsFossils(x))"]}
{"id": "entailmentbank_validation_144", "nl": "nearly all fossils are found in sedimentary rock.", "fol": "", "prediction": ["all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "(exists x.(Fossil(x) & FoundInSedimentaryRock(x)))", "Almost all fossils are found in sedimentaryRock.", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "Almost all fossils are found in sedimentaryRock(fossil)", "(exists x.(Fossil(x) & FoundInSedimentaryRock(x)))", "all x y.((Fossil(x) & SedimentaryRock(y)) -> FoundIn(x,y))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "(exists x.(Fossil(x) & FoundInSedimentaryRock(x)))", "Almost all fossils are found in sedimentary rock.", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))"]}
{"id": "entailmentbank_validation_145", "nl": "fossils are lost / destroyed when sedimentary rock changes to metamorphic rock.", "fol": "", "prediction": ["all x.((Fossil(x) & SedimentaryRockChange(x) & MetamorphicRockChange(x)) -> LostOrDestroyed(x))", "all x y.((Fossil(x) & SedimentaryRock(y) & ChangesToMetamorphicRock(y)) -> LostOrDestroyed(x,y))", "all x.((Fossil(x) & SedimentaryRockChangesToMetamorphicRock(x)) -> LostOrDestroyed(x))", "(all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> Lost(x)) & all y.((Fossil(y) & SedimentaryRock(y)) -> Dismantled(y)))", "all x y z.((Fossil(x) & SedimentaryRock(y) & MetamorphicRock(z)) -> (Lost(x,y) | Dismantled(x,z)))", "all x y.((Fossil(x) & SedimentaryRock(y) & ChangesToMetamorphicRock(y)) -> Lost(x,y))", "all x.((Fossil(x) & SedimentaryRockChangesToMetamorphicRock(x)) -> Lost(x))", "all x y.((Fossil(x) & SedimentaryRock(y) & MetamorphicRock(y)) -> LostOrDestroyed(x,y))", "all x.((SedimentaryRockChange(x) & MetamorphicRockChange(x)) -> LostOrDestroyed(x))", "(all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> Lost(x)) & All y.((Fossil(y) & SedimentaryRock(y)) -> Dissected(y)))", "all x y.((Fossil(x) & SedimentaryRockChange(y) & MetamorphicRockChange(x,y)) -> LostOrDestroyed(x))", "all x.((Fossil(x) & SedimentaryRockChangesToMetamorphicRock(x)) -> LostOrDestroyed(x))", "all x.((SedimentaryRockChangesToMetamorphicRock(x)) -> LostOrDestroyed(x))", "all x.((Fossil(x) & Lost(x)) -> MetamorphicRock(x))", "all x y.((Fossil(x) & SedimentaryRock(y) & ChangesToMetamorphicRock(y)) -> LostOrDestroyed(x,y))", "all x.((Fossil(x) & SedimentaryRock(x) & MetamorphicRock(x)) -> Lost(x))"]}
{"id": "entailmentbank_validation_146", "nl": "if fossils are destroyed in rock transition, then there will be gaps in the fossil record.", "fol": "", "prediction": ["all x.((Fossil(x) & DestroyedInRockTransition(x)) -> ThereWaysInFossilRecord(x))", "all x y.((Fossil(x) & RockTransition(y) & DestroyedIn(x,y)) -> GapsInFossilRecord(x))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> exists y.(FossilRecord(y) & Gaps(y)))", "all x y z.((Fossil(x) & RockTransition(y) & RockTransition(z) & DestroyedIn(x,y,z)) -> GapsInFossilRecord(x))", "all x y.((Fossil(x) & RockTransition(y) & DestroyedIn(x,y)) -> GapsInFossilRecord(x))", "exists x.(Fossil(x) & DestroyedInRockTransition(x) & GapsInFossilRecord(x))", "all x y.((Fossil(x) & RockTransition(y) & Destroyed(x,y)) -> GapsInFossilRecord(x))", "(all x.((Fossil(x) & DestroyedInRockTransition(x)) -> GapsInFossilRecord(x)))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> ThereWaysInFossilRecord(x))", "all x.((Fossil(x) & DismantledInRockTransition(x)) -> exists y.(FossilRecord(y) & GapsIn(y,x)))", "exists x.(Gap(x) & DestroyedFossilInRockTransition(x))", "all x y.((Fossil(x) & RockTransition(y) & DismantledIn(x,y)) -> GapsInFossilRecord(x))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> exists y.(FossilRecord(y) & GapsIn(y,x)))", "exists x.(Fossil(x) & DestroyedInRockTransition(x) & GapsInFossilRecord(x))", "all x y.((Fossil(x) & RockTransition(y) & DestroyedIn(x,y)) -> exists z.(Gap(z) & FossilRecord(z))))", "all x.((Fossil(x) & DemolishedInRockTransition(x)) -> GapsInFossilRecord(x))"]}
{"id": "entailmentbank_validation_147", "nl": "sedimentary rock changing to metamorphic rock causes gaps in the fossil record.", "fol": "", "prediction": ["all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))", "all x y.((SedimentaryRock(x) & MetamorphicRock(y)) -> CausesGapsInFossilRecord(x,y))", "(ChangingToMetamorphicRock(sedimentaryRock) & CausesGapsInFossilRecord(s))", "all x y z.((SedimentaryRock(x) & MetamorphicRock(y) & FossilRecord(z)) -> CausesGaps(x,y,z))", "all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))", "all x y.((SedimentaryRock(x) & MetamorphicRock(y)) -> CausesGapsInFossilRecord(x,y))", "(ChangingToMetamorphicRock(sedimentaryRock) -> CausesGapsInFossilRecord(s))", "all x y z.((SedimentaryRock(x) & MetamorphicRock(y) & FossilRecord(z)) -> CausesGaps(x,y,z))", "all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))", "all x y.((SedimentaryRock(x) & MetamorphicRock(y)) -> CausesGapsInFossilRecord(x,y))", "all x y.((SedimentaryRock(x) & MetamorphicRock(y) & ChangesTo(x,y)) -> CausesGapsInFossilRecord(x))", "all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))", "all x y.((SedimentaryRock(x) & MetamorphicRock(y)) -> CausesGapsInFossilRecord(x,y))", "all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))", "all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))", "all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))"]}
{"id": "entailmentbank_validation_148", "nl": "heat is a kind of energy.", "fol": "", "prediction": ["all x.(Heat(x) -> Energy(x))", "all x.(Heat(x) -> Energy(x))", "all x y.((Heat(x) & Energy(y)) -> Energy(x))", "(all x.(Heat(x) -> Energy(x)))", "all x.(Heat(x) -> Energy(x))", "all x y.((Heat(x) & Energy(y)) -> Energy(x,y))", "(all x.(Heat(x) -> Energy(x)))", "all x.(Heat(x) -> Energy(x))", "all x y.((Heat(x) & Energy(y)) -> Energy(x))", "all x.(Heat(x) -> Energy(x))", "all x.(Heat(x) -> Energy(x))", "all x.(Heat(x) -> Energy(x))", "exists x.(Heat(x) & -Energy(x))", "all x.(Heat(x) -> Energy(x))", "all x.(Heat(x) -> Energy(x))", "all x.(Heat(x) -> Energy(x))"]}
{"id": "entailmentbank_validation_149", "nl": "metamorphic rocks are formed by rocks being exposed to extreme heat and pressure.", "fol": "", "prediction": ["all x.(MetamorphicRock(x) -> (FormedByExposedRocksToExtremeHeat(x) & ExposedToExtremePressure(x)))", "all x y.((MetamorphicRock(x) & Rock(y) & ExposedToExtremeHeat(y) & ExposedToExtremePressure(y)) -> FormedBy(x,y))", "all x.(MetamorphicRock(x) -> (FormedByExposedRocks(x) & ExposedToExtremeHeatAndPressure(x)))", "all x y.((MetamorphicRock(x) & Rock(y)) -> (ExposedToExtremeHeat(y) & ExposedToExtremePressure(y)))", "all x.(MetamorphicRock(x) -> (FormedByExposedRocksToExtremeHeatAndPressure(x)))", "all x y z.((MetamorphicRock(x) & Rock(y) & Heat(z) & Pressure(z) & ExposedTo(y,z)) -> FormedBy(x,y))", "(FormedByExposedRocksToExtremeHeatAndPressure(metamorphicRocks))", "all x.(MetamorphicRock(x) -> (ExposedToExtremeHeat(x) & ExposedToExtremePressure(x)))", "all x y.((MetamorphicRock(x) & Rock(y) & ExposedToExtremeHeatAndPressure(y)) -> FormedBy(x,y))", "all x.((Rock(x) & ExposedToExtremeHeat(x) & ExposedToExtremePressure(x)) -> Metamorphic(x))", "all x.(MetomorphicRock(x) -> (FormedByExposedRocks(x) & ExposedToExtremeHeatAndPressure(x)))", "all x.(MetamorphicRock(x) -> (FormedByExposedRocks(x) & ExposedToExtremeHeatAndPressure(x)))", "all x y z.((MetamorphicRock(x) & Rock(y) & ExposedToExtremeHeatAndPressure(z)) -> FormedBy(x,y,z))", "all x y.((MetamorphicRock(x) & Rock(y)) -> (ExposedToExtremeHeat(y,x) & ExposedToExtremePressure(y,x)))", "all x.(MetamorphicRock(x) -> (ExposedToExtremeHeat(x) & ExposedToExtremePressure(x)))", "all x.(MetamorphicRock(x) -> (FormedByExposedRocksToExtremeHeatAndPressure(x)))"]}
{"id": "entailmentbank_validation_150", "nl": "heat energy can change igneous rock into metamorphic rock.", "fol": "", "prediction": ["all x.(HeatEnergy(x) -> (ChangesIgneousRock(x) & ChangesMetamorphicRock(x)))", "all x y.((HeatEnergy(x) & IgneousRock(y)) -> ChangesIntoMetamorphicRock(x,y))", "all x.(HeatEnergy(x) -> ChangesIgneousRockIntoMetamorphicRock(x))", "all x.((HeatEnergy(x) & IgneousRock(x)) -> MetamorphicRock(x))", "(ChangesIgneousRockIntoMetamorphicRock(heatEnergy))", "all x y z.((HeatEnergy(x) & IgneousRock(y) & MetamorphicRock(z)) -> ChangesInto(x,y,z))", "all x y.((HeatEnergy(x) & IgneousRock(y)) -> CanChangeIntoMetamorphicRock(x,y))", "all x.(HeatEnergy(x) -> CanChangeIgneousRockToMetamorphicRock(x))", "all x y.((HeatEnergy(x) & IgneousRock(y) & MetamorphicRock(y)) -> ChangesInto(x,y))", "(ChangesIgneousRockToMetamorphicRock(heatEnergy))", "all x.((HeatEnergy(x) & IgneousRock(x)) -> MetamorphicRock(x))", "all x.(HeatEnergy(x) -> (ChangesIgneousRock(x) & ChangesMetamorphicRock(x)))", "all x y.((HeatEnergy(x) & IgneousRock(y) & MetamorphicRock(y)) -> CanChange(x,y))", "all x.((HeatEnergy(x) & IgneousRock(x)) -> MetamorphicRock(x))", "all x.(HeatEnergy(x) -> ChangesIgneousRockToMetamorphicRock(x))", "all x y.((HeatEnergy(x) & IgneousRock(y)) -> CanChangeIntoMetamorphicRock(x,y))"]}
{"id": "entailmentbank_validation_151", "nl": "a tree is a kind of habitat.", "fol": "", "prediction": ["all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x y.((Tree(x) & Habitat(y)) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x y.((Tree(x) & Habitat(y)) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x y.((Tree(x) & Habitat(y)) -> Habitat(x,y))", "all x.(Tree(x) -> Habitat(x))", "all x y.((Tree(x) & Habitat(y)) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "exists x.(Tree(x) & Habitat(x))", "exists x.(Tree(x) & Habitat(x))", "exists x.(Tree(x) & Habitat(x))", "exists x.(Tree(x) & Habitat(x))"]}
{"id": "entailmentbank_validation_152", "nl": "cutting down trees in a forest causes the number of trees to decrease in that forest.", "fol": "", "prediction": ["all x y.((CivilizingDownTrees(x) & Forest(y)) -> DecreasesNumberOfTrees(x,y))", "all x y.((CuttingDownTrees(x) & Forest(y)) -> DecreasesNumberOfTrees(x,y))", "all x y z.((CirdingDownTrees(x) & Forest(y) & Forest(z)) -> DecreasesNumberOfTrees(x,y,z))", "all x.((CirdingDownTrees(x) & Forest(x)) -> DecreasesNumberOfTrees(x))", "all x y.((CirdingDownTrees(x) & Forest(y)) -> DecreasesNumberOfTrees(x,y))", "all x y z.((CivilizingDownTrees(x) & Forest(y) & Forest(z)) -> DecreasesNumberOfTrees(x,y,z))", "all x.((CuttingDownTrees(x) & Forest(x)) -> DecreasesNumberOfTrees(x))", "all x y.((CuttingDownTrees(x) & Forest(y) & InForest(x,y)) -> NumberOfTreesDecreases(x,y))", "all x y z.((CuttingDownTrees(x) & Forest(y) & Forest(z)) -> DecreasesNumberOfTrees(y,z))", "all x.((ClearingDownTreesInForest(x) & InForest(x)) -> NumberOfTreesDecrease(x))", "all x.((CuttingDownTrees(x) & InForest(x)) -> NumberOfTreesDecrease(x))", "all x y z.((ClearingDownTrees(x) & Forest(y) & Forest(z) & In(y,z)) -> DecreasesNumberOfTrees(x,y,z))", "all x.(CuttingDownTreesInForest(x) -> DecreasesNumberOfTreesInForest(x))", "all x.((CivilizingDeclineTrees(x) & InForest(x)) -> NumberDecreasesTrees(x))", "all x y.((ClearingDownTrees(x) & Forest(y)) -> DecreasesNumberOfTrees(x,y))", "all x y.((CuttingDownTrees(x) & Forest(y) & In(x,y)) -> NumberOfTreesDecrease(x,y))"]}
{"id": "entailmentbank_validation_153", "nl": "cutting down trees in a forest causes the number of habitat to decrease.", "fol": "", "prediction": ["all x y.((CivilizingDownTrees(x) & Forest(y)) -> DecreasesHabitat(x,y))", "all x y.((CirdingDownTrees(x) & Forest(y)) -> DecreasesHabitat(x,y))", "all x y.((CuttingDownTrees(x) & Forest(y)) -> DecreasesHabitat(x,y))", "all x y z.((CirdingDownTrees(x) & Forest(y) & Forest(z)) -> DecreasesHabitat(x,y,z))", "all x.((CirdingDownTrees(x) & Forest(x)) -> DecreasesHabitat(x))", "all x.((CuttingDownTrees(x) & Forest(x)) -> DecreasesHabitat(x))", "all x y z.((CivilizingDownTrees(x) & Forest(y) & Forest(z) & In(y,z)) -> DecreasesHabitat(x))", "all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> DecreasesHabitat(x,y))", "all x.((CivilizingDeclineTrees(x) & Forest(x)) -> DecreasesHabitat(x))", "all x y.((ClearingDownTrees(x) & Forest(y)) -> DecreasesHabitat(x,y))", "all x.((ClearingDownTrees(x) & Forest(x)) -> NumberOfHabitatDecreases(x))", "all x y z.((CuttingDownTrees(x) & Forest(y) & Forest(z)) -> DecreasesHabitat(x,y,z))", "all x.((ChoppingDownTreesInForest(x) & DecreasesHabitat(x)) -> CutsDownTreesInForest(x))", "all x y.((Farm(x) & Forest(y) & CutsDownTrees(x,y)) -> DecreasesHabitat(x))", "all x.((CuttingDownTrees(x) & Forest(x)) -> NumberOfHabitatDecrease(x))", "all x.(CuttingDownTreesInForest(x) -> DecreasesHabitat(x))"]}
{"id": "entailmentbank_validation_154", "nl": "an animal requires a habitat for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresHabitat(x))", "all x.((Animal(x) & RequiresHabitat(x)) -> Survival(x))", "all x y.((Animal(x) & Habitat(y)) -> RequiresForSurvival(x,y))", "all x.(Animal(x) -> RequiresHabitatForSurvival(x))", "all x.((Animal(x) & RequiresHabitat(x)) -> Survival(x))", "all x y.((Animal(x) & Habitat(y)) -> RequiresForSurvival(x,y))", "all x.((Animal(x) & Habitat(x)) -> RequiresForSurvival(x))", "all x.(Animal(x) -> RequiresHabitat(x))", "all x y.((Animal(x) & Habitat(y)) -> RequiresForSurvival(x,y))", "all x.(Animal(x) -> RequiresHabitatForSurvival(x))", "all x.((Animal(x) & RequiresHabitat(x)) -> Survival(x))", "all x y.((Animal(x) & Habitat(y)) -> Requires(x,y))", "exists x.(Animal(x) & Habitat(x) & Requires(x,survival))", "all x y.((Animal(x) & Habitat(y)) -> RequiresForSurvival(x,y))", "all x.(Animal(x) -> RequiresHabitat(x))", "exists x.(Animal(x) & RequiresHabitat(x))"]}
{"id": "entailmentbank_validation_155", "nl": "cutting down trees in a forest causes the number of habitat required by animals for survival to decrease.", "fol": "", "prediction": ["all x y.((CirdingDownTrees(x) & Forest(y)) -> DecreasesHabitat(x,y))", "all x y z.((CirdingDownTrees(x) & Forest(y) & Animal(z)) -> DecreasesHabitat(z))", "all x y.((CutteringDownTrees(x) & Forest(y)) -> DecreasesHabitat(x,y))", "all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> DecreasesHabitat(x,y))", "all x y z.((Tree(x) & Forest(y) & Animal(z) & CutsDown(x,y)) -> DecreasesHabitat(x,z))", "all x y.((CuttingDownTrees(x) & Forest(y) & InForest(x,y)) -> DecreasesHabitatRequiredByAnimals(x))", "all x.((ChoppingDownTrees(x) & Forest(x)) -> DecreasesHabitatRequiredByAnimals(x))", "all x.((Tree(x) & CutsDown(x,Trees) & Forest(x)) -> DecreasesHabitatRequiredByAnimalsForSurvival(x))", "all x.((CirdingDownTrees(x) & Forest(x)) -> DecreasedHabitat(x))", "all x y z.((Civilization(x) & Tree(y) & Forest(z) & CutsDown(x,y,z)) -> DecreasesHabitatRequiredByAnimals(x))", "all x.((ClearingDownTrees(x) & Forest(x)) -> DecreasesHabitatRequiredByAnimals(x))", "all x y z.((CutteringDownTrees(x) & Forest(y) & Animal(z) & InForest(z,y)) -> DecreasesHabitatRequiredForSurvival(z,y))", "all x y.((CivilizingDeclineTreesInForest(x) & Forest(y)) -> DecreasesHabitatRequiredByAnimals(x,y))", "all x.((CuttingDownTrees(x) & Forest(x)) -> DecreasedHabitat(x))", "all x.((CuttingDownTreesInForest(x) & DecreasesHabitat(x)) -> AnimalsRequiresHabitat(x))", "all x y.((Tree(x) & Forest(y)) -> (CuttingDown(x,y) & DecreasesHabitat(x,y)))"]}
{"id": "entailmentbank_validation_156", "nl": "humans changing ecosystems usually has a negative impact on an ecosystem / organisms living in an ecosystem.", "fol": "", "prediction": ["all x y.((Human(x) & Ecosystem(y) & Changes(x,y)) -> NegativeImpact(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & Changes(x,y)) -> NegativeImpact(x,z))", "all x y.((Human(x) & Ecosystem(y)) -> (Changes(x,y) & NegativeImpactOn(x,y)))", "all x.(ChangesEcosystems(x) -> NegativeImpactOnEcosystemOrganisms(x))", "all x.((HumansChangeEcosystems(x) & Ecosystem(y)) -> NegativeImpactOn(x,y))", "(NegativeImpactOnEcosystemOrganismsInEcosystem(Humans))", "all x y.((Human(x) & Ecosystem(y) & Changes(x,y)) -> NegativeImpactOn(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & Changes(x,y)) -> NegativeImpact(x,z))", "all x.(ChangesEcosystems(x) -> NegativeImpactOnEcosystemOrganisms(x))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> (Changes(x,y) & NegativeImpactOn(x,z)))", "all x y.((Human(x) & Ecosystem(y)) -> (Changes(x,y) & NegativeImpact(x,y)))", "all x.(ChangesEcosystem(x) -> NegativeImpactOnEcosystemOrganisms(x))", "all x.((HumansChangeEcosystems(x) & Ecosystem(x)) -> NegativeImpact(x))", "all x.(ChangesEcosystems(x) -> NegativeImpactOnEcosystemOrganisms(x))", "all x y z.((Human(x) & Ecosystem(y) & Organism(z) & Changes(x,y)) -> NegativeImpactOn(x,z))", "all x y.((Human(x) & Ecosystem(y) & Changes(x,y)) -> NegativeImpact(x,y))"]}
{"id": "entailmentbank_validation_157", "nl": "humans building homes in an ecosystem causes that ecosystem to change.", "fol": "", "prediction": ["all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> CausesChange(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildsHomesIn(x,y,z)) -> CausesChange(x,y,z))", "all x.((Human(x) & BuildsHomesInEcosystem(x)) -> CausesEcosystemChange(x))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> CausesEcosystemChange(x,y))", "all x.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> CausesEcosystemChange(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> BuildsHomesIn(x,y,z))", "all x.((Humans(x) & BuildsHomesInEcosystem(x)) -> CausesEcosystemChange(x))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildingHomesIn(x,y)) -> CausesChange(x,z))", "all x.(BuildingHomesInEcosystem(x) -> CausesEcosystemChange(x))", "all x y.((Human(x) & Ecosystem(y)) -> CausesChange(x,y))", "all x.(BuildingHousesInEcosystem(x) -> CausesEcosystemChange(x))", "all x.((Human(x) & BuildsHomesInEcosystem(x)) -> CausesEcosystemToChange(x))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> CausesChange(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> BuildsHomesIn(x,y,z))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildsHomesIn(x,y,z)) -> CausesChange(y,z))", "all x y.((Human(x) & Ecosystem(y)) -> CausesChange(x,y))"]}
{"id": "entailmentbank_validation_158", "nl": "humans building homes in an ecosystem has a negative impact on an ecosystem and organisms living in the ecosystem.", "fol": "", "prediction": ["all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildsHomesIn(x,y)) -> NegativeImpactOn(x,z))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> NegativeImpactOn(x,y))", "all x.(BuildingHomesInEcosystem(x) -> NegativeImpactOnEcosystemAndOrganisms(x))", "all x.((HumansBuildingHomesInEcosystem(x)) -> NegativeImpactOnEcosystemAndOrganisms(x))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildsHomesIn(x,y)) -> NegativeImpactOn(x,z))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> NegativeImpactOn(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> BuildsHomesIn(x,y,z))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> NegativeImpact(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildingHomesIn(x,y)) -> NegativeImpactOn(x,z))", "all x.(BuildingHomesInEcosystem(x) -> NegativeImpactOnEcosystemAndOrganisms(x))", "all x.((HumansBuildingHomesInEcosystem(x)) -> NegativeImpactOnEcosystemAndOrganisms(x))", "all x y z.((Human(x) & Ecosystem(y) & Organism(z)) -> (BuildingHomesIn(x,y) & NegativeImpactOn(x,z)))", "all x y.((Human(x) & Ecosystem(y) & BuildingHomesIn(x,y)) -> NegativeImpactOn(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> NegativeImpactOn(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildsHomesIn(x,y,z)) -> NegativeImpactOn(x,y,z))", "all x.((HumansBuildingHomesInEcosystem(x)) -> NegativeImpactOnEcosystemAndOrganisms(x))"]}
{"id": "entailmentbank_validation_159", "nl": "a wetland is a kind of ecosystem.", "fol": "", "prediction": ["all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x y.((Wetland(x) & Ecosystem(y)) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x y.((Wetland(x) & Ecosystem(y)) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x y.((Wetland(x) & Ecosystem(y)) -> Is(x,y))", "all x y.((Wetland(x) & Ecosystem(y)) -> SpeciesOf(x,y))", "all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "exists x.(Wetland(x) & SpeciesOfEcosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "exists x.(Wetland(x) & Ecosystem(x))", "exists x.(Wetland(x) & Ecosystem(x))"]}
{"id": "entailmentbank_validation_160", "nl": "humans building homes in a wetland has a negative impact on a wetland and organisms living in the wetland.", "fol": "", "prediction": ["all x y.((Human(x) & Wetland(y) & BuildsHomesIn(x,y)) -> NegativeImpactOnWetlandAndOrganisms(x,y))", "all x y z.((Human(x) & Wetland(y) & Wetland(z) & BuildsHomesIn(x,y)) -> NegativeImpactOn(x,z))", "all x.((HumansBuildingHomesInWetland(x) & WetlandOrganisms(x)) -> NegativeImpact(x))", "all x y z.((Human(x) & Wetland(y) & Wetland(z) & BuildingHomesIn(x,y,z)) -> NegativeImpactOn(x,y,z))", "(NegativeImpactOnWetlandAndOrganisms(humans,buildsHomesInWetland,wetland))", "all x.(BuildingHomesInWetland(x) -> NegativeImpactOnWetlandAndOrganisms(x))", "all x y.((Human(x) & Wetland(y) & BuildsHomesIn(x,y)) -> NegativeImpactOnWetlandAndOrganisms(x,y))", "all x y z.((Human(x) & Wetland(y) & Wetland(z) & BuildsHomesIn(x,y)) -> NegativeImpactOnWetlandAndOrganisms(x,z))", "all x y.((Human(x) & Wetland(y) & BuildingHomesIn(x,y)) -> NegativeImpactOnWetlandAndOrganisms(x,y))", "all x.((HumansBuildingHomesInWetland(x) & WetlandOrganisms(x)) -> NegativeImpact(x))", "all x y.((Human(x) & Wetland(y) & BuildsHomesIn(x,y)) -> NegativeImpact(x,y))", "all x y z.((Human(x) & Wetland(y) & Wetland(z) & BuildingHomesIn(x,y)) -> NegativeImpactOnWetlandAndOrganisms(x,z))", "all x y.((Human(x) & Wetland(y)) -> (BuildingHomesIn(x,y) & NegativeImpactOnWetland(x) & NegativeImpactOnOrganisms(x)))", "all x.(BuildingHomesInWetland(x) -> NegativeImpactOnWetlandAndOrganisms(x))", "all x.((HumansBuildingHomesInWetland(x) & WetlandOrganisms(x)) -> NegativeImpact(x))", "all x y z.((Human(x) & Wetland(y) & Wetland(z) & BuildsHomesIn(x,y,z)) -> NegativeImpactOn(x,y,z))"]}
{"id": "entailmentbank_validation_161", "nl": "if an animal eats other animals for food, then the animal will be the predator.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & EatsForFood(x,y,z)) -> Predator(x))", "all x.((Animal(x) & EatsAnimals(x)) -> Predator(x))", "all x y.((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x))", "all x.((Animal(x) & EatsOtherAnimals(x)) -> Predator(x))", "(all x.(EatsAnimals(x) -> Predator(x)))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & EatsForFood(x,y,z)) -> Predator(x))", "all x y.((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x))", "all x.(EatsOtherAnimalsForFood(x) -> Predator(x))", "all x.((Animal(x) & EatsAnimals(x)) -> Predator(x))", "all x.((Animal(x) & EatsOtherAnimals(x)) -> Predator(x))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & EatsForFood(x,y,z)) -> Predator(x,y,z))", "all x y.((Animal(x) & Animal(y) & Eats(x,y)) -> Predator(x))", "all x y.((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x,y))", "all x.((Animal(x) & EatsAnimalsForFood(x)) -> Predator(x))", "all x y.((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x))"]}
{"id": "entailmentbank_validation_162", "nl": "tuna eat fish.", "fol": "", "prediction": ["all x.(Tuna(x) -> EatsFish(x))", "all x y.((Tuna(x) & Fish(y)) -> Eats(x,y))", "all x.(Tuna(x) -> EatsFish(x))", "(EatsFish(tuna,tuna))", "all x y.((Tuna(x) & Fish(y)) -> Eats(x,y))", "all x.(Tuna(x) -> EatsFish(x))", "(EatsFish(tuna,tuna))", "all x.(Tunnel(x) -> EatsFish(x))", "all x y.((Tuna(x) & Fish(y)) -> Eats(x,y))", "(EatsFish(tuna,tuna))", "all x.(Tuna(x) -> EatsFish(x))", "all x.(Thun(x) -> EatsFish(x))", "all x y.((Tuna(x) & Fish(y)) -> Eats(x,y))", "all x.(Tuna(x) -> EatsFish(x))", "all x y.((Tuna(x) & Fish(y)) -> Eat(x,y))", "all x.(Tuna(x) -> EatsFish(x))"]}
{"id": "entailmentbank_validation_163", "nl": "tuna is a kind of predator.", "fol": "", "prediction": ["all x.(Tuna(x) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "all x y.((Tuna(x) & Predator(y)) -> Predator(x))", "all x.(Tunnel(x) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "all x y.((Tuna(x) & Predator(y)) -> Predator(x))", "(Predator(tunes) & Predator(tunes))", "all x.(Tuna(x) -> Predator(x))", "all x.(Tunnel(x) -> Predator(x))", "all x y.((Tuna(x) & Predator(y)) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "exists x.(Thon(x) & Predator(x))", "all x.(Tunnel(x) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "exists x.(Tuna(x) & Predator(x))"]}
{"id": "entailmentbank_validation_164", "nl": "tuna is a kind of fish.", "fol": "", "prediction": ["all x.(Tuna(x) -> Fish(x))", "all x.(Tuna(x) -> Fish(x))", "all x y.((Tuna(x) & Fish(y)) -> Fish(x))", "(Fish(tuna) & Fish(tuna))", "all x.(Tuna(x) -> Fish(x))", "all x.(Tunnel(x) -> Fish(x))", "all x y.((Tuna(x) & Fish(y)) -> Fish(x))", "(Fish(tuna) & Fish(tuna))", "all x.(Tuna(x) -> Fish(x))", "all x.(Tunnel(x) -> Fish(x))", "all x y.((Tuna(x) & Fish(y)) -> Fish(x))", "all x.(Thun(x) -> Fish(x))", "all x.(Tuna(x) -> Fish(x))", "all x.(Tuna(x) -> Fish(x))", "exists x.(Thun(x) & Fish(x))", "all x.(Tongue(x) -> Fish(x))"]}
{"id": "entailmentbank_validation_165", "nl": "tuna is a kind of predatory fish.", "fol": "", "prediction": ["all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x y.((Tuna(x) & Fish(y)) -> Predatory(x,y))", "all x.(Tunnel(x) -> PredatoryFish(x))", "(PredatoryFish(tuna) & Fish(tuna))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x y.((Tuna(x) & Fish(y)) -> Predatory(x,y))", "all x y.((Tuna(x) & PredatoryFish(y)) -> Fish(x,y))", "all x.(Tunnel(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Thun(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x y.((Tuna(x) & Fish(y)) -> Predatory(x))", "exists x.(Thun(x) & PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))"]}
{"id": "entailmentbank_validation_166", "nl": "commercial harvesting from the ocean has caused populations of large predatory fish to decrease.", "fol": "", "prediction": ["all x y.((CommercialHarvesting(x) & Ocean(y)) -> (CausedPopulationDecrease(x,y) & LargePredatoryFish(x)))", "all x.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(x)) -> PopulationDecrease(x))", "all x y.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y)) -> PopulationDecrease(x,y))", "all x y z.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y) & Population(z)) -> Decreased(z))", "(CommercialHarvestingFromOcean(commercial) & CausedDecreasedPopulationsOfLargePredatoryFish(commercial))", "all x.((CommercialHarvesting(x) & FromOcean(x)) -> (DiminishedPopulationsOfPredatoryFish(x)))", "all x y.((CommercialHarvesting(x) & Ocean(y)) -> (DiminishedPopulationsOfLargePredatoryFish(x,y)))", "all x.(CommercialHarvestingFromOcean(x) -> (CausedDecreasedPopulationsOfLargePredatoryFish(x)))", "all x y z.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y) & Population(z)) -> CausedDecrease(z,y,z))", "all x.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(x)) -> PopulationDecrease(x))", "all x y.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y)) -> PopulationDecrease(x,y))", "all x y z.((CommercialHarvesting(x) & Ocean(y) & LargePredatoryFish(z)) -> PopulationDecrease(z))", "all x y.((CommercialHaulingFromOcean(x) & LargePredatoryFish(y)) -> PopulationDecrease(x,y))", "all x.((CommercialHarvesting(x) & FromOcean(x)) -> PopulationDecrease(x))", "all x y.((CommercialHarvesting(x) & Ocean(y)) -> (LargePredatoryFishPopulationsDecrease(x,y)))", "all x.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(x)) -> PopulationDecrease(x))"]}
{"id": "entailmentbank_validation_167", "nl": "commercial harvesting from the ocean has caused the populations of tuna to decrease.", "fol": "", "prediction": ["all x y.((CommercialHarvesting(x) & Ocean(y)) -> (DiminishedPopulations(x,y)))", "all x.((CommercialHarvestingFromOcean(x) & TunaPopulationDecrease(x)) -> CommercialHarvestingFromOcean(x))", "all x y z.((CommercialHarvesting(x) & Ocean(y) & TunaPopulation(z)) -> CausedDecrease(z,y))", "all x.((CommercialHarvesting(x) & FromOcean(x)) -> PopulationDecrease(x))", "all x y.((CommercialHarvesting(x) & Ocean(y)) -> CausedDecreasedPopulation(x,y))", "(CommercialHarvestingFromOcean(commerciallyHuntsFromOcean(commercially) CausedTunaPopulationDecrease(commercially))", "all x y.((CommercialHarvestingFromOcean(x) & TunaPopulation(y)) -> Decreased(y))", "(CommercialHarvestingFromOcean(commercial) & CausedTunaPopulationDecrease(commercial))", "all x y z.((CommercialHarvestingFromOcean(x) & TunaPopulation(y) & Ocean(z)) -> CausedDecrease(y,z))", "all x.((CommercialHaulingFromOcean(x) & TunaPopulationDecrease(x)) -> CommercialHasHuntingFromOcean(x))", "all x y.((CommercialHaulingFromOcean(x) & TunaPopulation(y)) -> Decreased(y))", "all x.((CommercialHarvestingFromOcean(x) & TunaPopulation(y)) -> Decreased(y))", "all x.(CommercialHarvestingFromOcean(x) -> CausesTunaPopulationDecrease(x))", "all x y z.((CommercialHarvestingFromOcean(x) & TunaPopulation(y) & Ocean(z) & CausedDecrease(y,z)) -> TunaPopulation(y))", "all x y.((CommercialHarvesting(x) & Ocean(y)) -> (DiminishedPopulationsOfTuna(x,y)))", "all x.((CommercialHarvesting(x) & Ocean(x)) -> PopulationDecrease(x))"]}
{"id": "entailmentbank_validation_168", "nl": "an organism becoming extinct causes a change in the organism's food web.", "fol": "", "prediction": ["all x.((Organism(x) & Extinct(x)) -> CausesChangeInFoodWeb(x))", "all x y.((Organism(x) & Extinct(x)) -> CausesChangeInFoodWeb(x,y))", "all x.((Organism(x) & Extinct(x)) -> ChangeInFoodWeb(x))", "all x y z.((Organism(x) & Extinct(x) & FoodWeb(y) & FoodWeb(z)) -> CausesChange(x,y,z))", "all x y.((Organism(x) & Extinct(x)) -> CausesChangeInFoodWeb(x,y))", "all x.((Organism(x) & Extinct(x)) -> CausesChangeInFoodWeb(x))", "all x y z.((Organism(x) & Extinct(y) & FoodWeb(z) & Changes(x,z)) -> CausesChange(x,y,z))", "all x y.((Organism(x) & Extinct(x)) -> ChangeInFoodWeb(y))", "all x.((Organism(x) & Extinct(x)) -> ChangeInFoodWeb(x))", "all x y.((Organism(x) & Extinct(y) & ChangeInFoodWeb(x,y)) -> CausesChange(x,y))", "all x y.((Organism(x) & Extinct(x)) -> CausesChangeInFoodWeb(y))", "all x.((Organism(x) & Extinct(x)) -> CausesChangeInFoodWeb(x))", "all x.((Organism(x) & EndingExtinct(x)) -> ChangeInFoodWeb(x))", "all x.((Organism(x) & Extinct(x)) -> ChangeInFoodWeb(x))", "all x.((Organism(x) & Extinct(x)) -> CausesChangeInFoodWeb(x))", "all x.((Organism(x) & EndingExtinct(x)) -> ChangeInFoodWeb(x))"]}
{"id": "entailmentbank_validation_169", "nl": "a change in a food web can cause damage to an ecosystem.", "fol": "", "prediction": ["all x y.((ChangeInFoodWeb(x) & Ecosystem(y)) -> CausesDamage(x,y))", "all x y.((FoodWebChange(x) & Ecosystem(y)) -> CausesDamage(x,y))", "all x.(ChangeInFoodWeb(x) -> CausesDamageToEcosystem(x))", "all x.((ChangeInFoodWeb(x) & CausesDamageToEcosystem(x)) -> CanCauseDamage(x))", "all x y z.((ChangeInFoodWeb(x) & Ecosystem(y) & FoodWeb(z)) -> CausesDamage(x,y,z))", "all x y.((ChangeInFoodWeb(x) & Ecosystem(y)) -> CausesDamage(x,y))", "all x y z.((FoodWebChange(x) & Ecosystem(y) & FoodWeb(z)) -> CausesDamage(x,y,z))", "all x.(ChangeInFoodWeb(x) -> CausesDamageToEcosystem(x))", "all x.((FoodWebChange(x) & ChangeInFoodWeb(x)) -> CausesDamageToEcosystem(x))", "all x y.((ChangeInFoodWeb(x) & Ecosystem(y)) -> CausesDamage(x,y))", "all x.((ChangeInFoodWeb(x) & CausesDamageToEcosystem(x)) -> CanCauseDamage(x))", "exists x.(FoodWebChange(x) & CausesDamageToEcosystem(x))", "all x y z.((FoodWebChange(x) & Ecosystem(y) & FoodWeb(z)) -> CausesDamage(x,y,z))", "all x y.((ChangeInFoodWeb(x) & Ecosystem(y)) -> CanCauseDamage(x,y))", "all x y.((FoodWebChange(x) & Ecosystem(y)) -> CausesDamage(x,y))", "all x.(ChangeInFoodWeb(x) -> CausesDamageToEcosystem(x))"]}
{"id": "entailmentbank_validation_170", "nl": "extinctions of organisms can cause damage to an ecosystem by changing the food web.", "fol": "", "prediction": ["all x y.((Organism(x) & Extinction(y)) -> CausesDamage(x,y))", "all x y.((Extinction(x) & Organism(y)) -> CausesDamage(x,y))", "all x.((Organism(x) & Extinction(x)) -> CausesDamageToEcosystem(x))", "all x y z.((Extinction(x) & Organism(y) & Ecosystem(z) & ChangesFoodWeb(x,z)) -> CausesDamage(x,y,z))", "all x.(ExtinctionOfOrganisms(x) -> CausesDamageToEcosystem(x))", "all x.(ExtinctionOfOrganisms(x) -> (CausesDamageToEcosystem(x) & ChangesFoodWeb(x)))", "all x y.((Organism(x) & Extinction(y)) -> CausesDamageToEcosystem(x,y))", "all x y z.((Organism(x) & Extinction(y) & Ecosystem(z) & ChangesFoodWeb(z)) -> CausesDamage(x,y,z))", "(all x.(ExtinctionOfOrganisms(x) -> CausesDamage(x,Ecosystem)))", "all x y.((Extinction(x) & Organism(y) & Ecosystem(z)) -> CausesDamage(x,y,z))", "all x.((Organism(x) & Extinction(x)) -> CausesDamageToEcosystem(x))", "all x.((Organism(x) & ExtinctionOfOrganisms(x)) -> CausesDamageToEcosystem(x))", "all x.((ExtinctionOfOrganisms(x) & ChangesFoodWeb(x)) -> CausesDamageToEcosystem(x))", "all x y z.((Extinction(x) & Organism(y) & Ecosystem(z) & ChangesFoodWeb(y)) -> CausesDamage(x,y,z))", "all x y.((Organism(x) & Extinction(x,y)) -> CausesDamageToEcosystem(x,y))", "all x.(ExtinctionOfOrganisms(x) -> CausesDamageToEcosystemByChangedFoodWeb(x))"]}
{"id": "entailmentbank_validation_171", "nl": "california is located on the boundary of two tectonic plates.", "fol": "", "prediction": ["all x.(California(x) -> LocatedOnBoundaryOfTwoTectonicPlates(x))", "all x y.((California(x) & TectonicPlate(y)) -> LocatedOnBoundary(x,y))", "(LocatedOnBoundaryOfTwoTectonicPlates(california))", "all x y z.((California(x) & TectonicPlate(y) & TectonicPlate(z)) -> LocatedOnBoundary(x,y,z))", "all x.(California(x) -> exists y.(TectonicPlate(y) & TectonicPlate(z) & LocatedOnBoundary(x,y,z)))", "all x y.((California(x) & TectonicPlate(y)) -> LocatedOnBoundary(x,y))", "all x.((California(x) & TectonicPlate(x)) -> LocatedOnBoundary(x,2))", "(California,tectonicPlateBoundary)", "(LocatedOnBoundaryOfTwoTectonicPlates(california))", "all x.(California(x) -> LocatedOnBoundaryOfTwoTectonicPlates(x))", "all x y z.((California(x) & TectonicPlate(y) & TectonicPlate(z)) -> LocatedOnBoundary(x,y,z))", "all x y.((California(x) & TectonicPlate(y)) -> LocatedOnBoundary(x,y))", "LocatedOnBoundaryOfTwoTectonicPlates(california)", "all x.(California(x) -> exists y.(TectonicPlate(y) & TectonicPlate(z) & Boundary(x,y,z))))", "all x.(California(x) -> (LocatedOnBoundaryOfTwoTectonicPlates(x)))", "exists x.(California(x) & TectonicPlate(x) & Boundary(x,2))"]}
{"id": "entailmentbank_validation_172", "nl": "earthquakes are most common along tectonic plate boundaries.", "fol": "", "prediction": ["all x.(Earthquake(x) -> MostCommonAlongTectonicPlateBoundaries(x))", "all x.(Earthquake(x) -> (CrossBoundaries(x) & TectonicPlateBoundaries(x)))", "all x y.((Earthquake(x) & TectonicPlateBoundaries(y)) -> MostCommonAlong(x,y))", "(CelebrateAlongTectonicPlateBoundaries(earthquake) & MostCommonAlong(earthquake,earthquake,earthquake))", "all x.(Earthquake(x) -> LocatedAlongTectonicPlateBoundaries(x))", "all x y z.((Earthquake(x) & TectonicPlateBoundary(y) & TectonicPlateBoundary(z)) -> MostCommon(x,y,z))", "(all x.(Earthquake(x) -> TectonicPlateBoundaries(x)))", "all x y.((Earthquake(x) & TectonicPlateBoundary(y)) -> MostCommon(x,y))", "all x.(Earthquake(x) -> (MostCommonAlongTectonicPlateBoundaries(x)))", "all x.(Earthquake(x) -> MostCommonAlongTectonicPlateBoundaries(x))", "(all x.(Earthquake(x) -> CommonAlongTectonicPlateBoundaries(x)))", "all x y.((Earthquake(x) & TectonicPlateBoundaries(y)) -> MostCommonAlong(x,y))", "all x.(Earthquake(x) -> (CrossBoundaries(x) & TectonicPlate(x)))", "all x.(Earthquake(x) -> MostlyCommonAlongTectonicPlateBoundaries(x))", "all x y.((Earthquake(x) & TectonicPlateBoundary(y)) -> MostCommon(x,y))", "all x.(Earthquake(x) -> MostCommonAlongTectonicPlateBoundaries(x))"]}
{"id": "entailmentbank_validation_173", "nl": "massachusetts is not located on the boundary of two tectonic plates.", "fol": "", "prediction": ["all x.(Massachusetts(x) -> -LocatedOnBoundaryOfTwoTectonicPlates(x))", "all x y.((Massachusetts(x) & TectonicPlate(y)) -> -LocatedOnBoundary(x,y))", "(-LocatedOnBoundaryOfTwoTectonicPlates(Massachusetts))", "all x.(Massachusetts(x) -> -BelongsOnBoundaryOfTwoTectonicPlates(x))", "(Masachusetts(Mass) & -BelongsToTwoTectonicPlates(Masachusetts))", "all x y z.((Massachusetts(x) & TectonicPlate(y) & TectonicPlate(z) & LocatedOnBoundary(x,y,z)) -> -LocatedOnBoundary(x,y,z))", "all x y.((Massachusetts(x) & TectonicPlate(y)) -> -LocatedOnBoundary(x,y))", "(-LocatedOnBoundaryOfTwoTectonicPlates(Massachusetts))", "all x.(Masachusetts(x) -> -BelongsOnBoundaryOfTwoTectonicPlates(x))", "all x.(Massachusetts(x) -> -LocatedOnBoundaryOfTwoTectonicPlates(x))", "all x.(Massachusetts(x) -> -BelongsToTectonicPlateBoundary(x))", "all x y.((Massachusetts(x) & TectonicPlate(y)) -> -BelongsOnBoundary(x,y))", "all x y.((Massachusetts(x) & TectonicPlate(y) & TectonicPlate(y)) -> -LocatedOnBoundary(x,y))", "-exists x.(Massachusetts(x) & TectonicPlateBoundary(x,2))", "all x.(Massachusetts(x) -> -LocatedOnBoundaryOfTwoTectonicPlates(x))", "exists x.(Massachusetts(x) & -BelongsToTectonicPlate(x,2))"]}
{"id": "entailmentbank_validation_174", "nl": "earthquakes are more likely to occur in california than in massachusetts.", "fol": "", "prediction": ["all x y.((Earthquake(x) & California(y)) -> MoreLikelyToOccur(x,y))", "all x.(Earthquake(x) -> (LikelyToOccurInCalifornia(x) & LikelyToOccurInMassachusetts(x)))", "(all x.(Earthquake(x) -> MoreLikelyInCalifornia(x)) & all y.(Massachusetts(y) -> MoreLikelyInCalifornia(x))))", "(LikelyToOccurInCalifornia(Earthquake(Earthquake) & MoreLikelyToOccurInMassachusetts(Earthquake))", "(all x y.((Earthquake(x) & California(y)) -> MoreLikelyToOccurIn(x,y)))", "all x y.((Earthquake(x) & California(y)) -> MoreLikelyToOccurIn(x,y))", "all x.(Earthquake(x) -> (LastOccurrence(x,california) | LastOccurrence(x,Massachusetts)))", "(LikelyToOccurInCalifornia(earthquake) & MoreLikelyToOccurInMassachusetts(earthquake))", "all x y z.((Earthquake(x) & California(y) & Massachusetts(z)) -> MoreLikelyToOccurIn(x,y,z))", "all x.(Earthquake(x) -> (MoreLikelyInCalifornia(x) | MoreLikelyInMassachusetts(x)))", "all x.((Earthquake(x) & California(x)) -> MoreLikelyToOccur(x,california,Massachusetts))", "all x y.((Earthquake(x) & California(y) & Massachusetts(z)) -> MoreLikelyToOccur(x,y,z))", "all x y.((Earthquake(x) & California(y)) -> MoreLikelyIn(x,y))", "all x.(Earthquake(x) -> MoreLikelyInCaliforniaThanMassachusetts(x))", "all x y.((Earthquake(x) & California(y)) -> MoreLikelyToOccur(x,y))", "all x y.((Earthquake(x) & California(y)) -> MoreLikelyToOccur(x,y))"]}
{"id": "entailmentbank_validation_175", "nl": "the oceanic plate is a kind of tectonic plate.", "fol": "", "prediction": ["all x.(OceanPlate(x) -> TectonicPlate(x))", "all x y.((OceanPlate(x) & TectonicPlate(y)) -> TectonicPlate(x))", "all x.(OceanPlate(x) -> TectonicPlate(x))", "all x.(OceanicPlate(x) -> TectonicPlate(x))", "(TectonicPlate(OceanPlate)", "all x y.((OceanPlate(x) & TectonicPlate(y)) -> Plate(x,y))", "all x.(OceanPlate(x) -> TectonicPlate(x))", "all x.(OceanicPlate(x) -> TectonicPlate(x))", "all x y.((OceanPlate(x) & TectonicPlate(y)) -> Is(x,y))", "all x.(OceanPlastic(x) -> TectonicPlastic(x))", "all x.((OceanPlate(x) & TectonicPlate(x)) -> Plate(x))", "all x.(OceanPlate(x) -> TectonicPlate(x))", "all x.(OceanPlate(x) -> (TectonicPlate(x) & TectonicPlate(x)))", "all x y.((OceanPlate(x) & TectonicPlate(y)) -> TectonicPlate(x))", "all x.(OceanicPlate(x) -> (TectonicPlate(x) & TectonicPlate(x)))", "exists x.(OceanPlate(x) & TectonicPlate(x))"]}
{"id": "entailmentbank_validation_176", "nl": "the subduction of tectonic plates may cause magma to surface from underneath.", "fol": "", "prediction": ["all x.((SubductionOfTectonicPlates(x) & MagmaSurface(x)) -> MayCause(x,MagmaSurface))", "all x y.((SubductionOfTectonicPlates(x) & Magma(y)) -> MayCauseSurfaceFromUnderside(x,y))", "all x.(SubductionOfTectonicPlates(x) -> MayCauseMagmaToSurface(x))", "(SubductionOfTectonicPlates(subduction) & MayCauseMagmaToSurface(subduction))", "all x y.((TectonicPlate(x) & Subduction(y)) -> MayCauseMagmaToSurface(x,y))", "all x.((SubductionOfTectonicPlates(x) & MayCauseMagmaToSurface(x)) -> MayCauseMagmaToSurface(x))", "all x y z.((SubductionOfTectonicPlates(x) & Magma(y) & SubductionOfTectonicPlates(z)) -> MayCauseSurfaceFromUnderside(y,z))", "all x y.((SubductionOfTectonicPlates(x) & Magma(y)) -> MayCauseSurface(x,y))", "subduction of tectonicPlates (TectonicPlates) -MagmaSurface(Magma))", "(SubductionOfTectonicPlates(subduction) & MayCauseMagmaToSurface(subduction))", "all x.(SubductionOfTectonicPlates(x) -> MayCauseMagmaToSurface(x))", "all x.((SubductionOfTectonicPlates(x) & MagmaSurface(x)) -> MayCause(x,Magma,Underside))", "the subduction of tectonicPlates (tectonicPlates) -MagmaSurface(Magma))", "all x y.((SubductionOfTectonicPlates(x) & Magma(y)) -> MayCauseSurfaceFromUnderside(x,y))", "(SubductionOfTectonicPlates(subduction) -> MayCauseMagmaToSurfaceFromUnderside(subduction))", "all x.(SubductionOfTectonicPlates(x) -> MayCauseMagmaToSurfaceFromUnderside(x))"]}
{"id": "entailmentbank_validation_177", "nl": "the subduction of an oceanic plate may cause magma to surface from underneath.", "fol": "", "prediction": ["all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> MayCauseMagmaToSurface(x,y))", "all x.(SubductionOfOceanPlate(x) -> MayCauseMagmaToSurface(x))", "(SubductionOfOceanPlate(x) -> MayCauseMagmaToSurface(x))", "all x.((SubductionOceanPlate(x) & OceanicPlate(x)) -> MayCauseMagmaToSurface(x))", "all x y z.((SubductionOceanPlate(x) & OceanicPlate(y) & Magma(z)) -> MayCauseSurface(x,y,z))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> MayCauseMagmaToSurface(x,y))", "all x.(SubductionOceanPlate(x) -> MayCauseMagmaToSurface(x))", "(SubductionOfOceanPlate(subduction) -> MayCauseMagmaToSurface(subduction))", "all x.(SubductionOfOceanPlate(x) -> MayCauseMagmaToSurface(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y) & CausesMagmaToSurface(x,y)) -> MayCauseMagmaToSurface(x,y))", "(SubductionOfOceanPlate(x) & MayCauseMagmaToSurface(x))", "all x y z.((SubductionOceanPlate(x) & OceanicPlate(y) & Magma(z) & SubductionOf(z,y)) -> MayCauseSurface(z,y))", "exists x.(SubductionOceanPlate(x) & OceanicPlate(x) & CausesMagmaToSurface(x))", "all x.((SubductionOceanPlate(x) & OceanicPlate(x)) -> MayCauseMagmaToSurface(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> MayCauseMagmaToSurface(x,y))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> (MagmaSurface(x,y) | Underside(x,y)))"]}
{"id": "entailmentbank_validation_178", "nl": "magma cools down when it comes to the surface from underneath.", "fol": "", "prediction": ["all x.((Magma(x) & SurfaceFromUnderside(x)) -> CoolsDown(x))", "all x y.((Magma(x) & Surface(y) & FromUnderside(x,y)) -> CoolsDown(x))", "all x y.((Magma(x) & Surface(y) & Underside(y)) -> CoolsDown(x,y))", "all x.((Magma(x) & Surface(x) & Underside(x)) -> CoolsDown(x))", "all x.((Magma(x) & SurfaceFromUnderside(x)) -> CoolsDown(x))", "all x y z.((Magma(x) & Surface(y) & Underside(z) & ComesTo(x,y,z)) -> CoolsDown(x))", "all x y.((Magma(x) & Surface(y) & FromUnderside(x)) -> CoolsDown(x,y))", "(CoolsDownWhenMagmaComesToSurface(magma,underside))", "all x.((Magma(x) & ComesToSurfaceFromUnderside(x)) -> CoolsDown(x))", "all x.(Climate(x) -> (Magma(x) & ComesToSurfaceFromUnderside(x)))", "all x.(CoolsDownMagma(x) -> ComesToSurfaceFromUnderside(x))", "all x y z.((Magma(x) & Surface(y) & Underside(z)) -> CoolsDown(x,y,z))", "all x y.((Magma(x) & Surface(y) & Underside(y)) -> CoolsDown(x,y))", "all x.((Magma(x) & ComesToSurface(x)) -> CoolsDown(x))", "all x.((Magma(x) & SurfaceFromUnderside(x)) -> CoolsDown(x))", "all x y.((Magma(x) & Surface(y) & FromUnderside(x,y)) -> CoolsDown(x))"]}
{"id": "entailmentbank_validation_179", "nl": "the subduction of an oceanic plate will cause magma to surface and cool down.", "fol": "", "prediction": ["all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> (MagmaSurface(x,y) & CoolDown(x,y)))", "all x.(SubductionOceanPlate(x) -> (MagmaSurface(x) & CoolDown(x)))", "all x y.((OceanPlate(x) & Subduction(y)) -> (MagmaSurface(x,y) & CoolDown(x,y)))", "all x.((OceanPlate(x) & Subduction(x)) -> (MagmaSurface(x) & CoolDown(x)))", "(SubductionOceanPlate(subduction) -> CausesMagmaToSurface(subduction,cooldown))", "all x y z.((SubductionOceanPlate(x) & OceanicPlate(y) & Magma(z) & SubductionOf(z,y)) -> CausesSurfaceAndCoolDown(x,z))", "(SubductionOceanPlate(x) -> CausesMagmaToSurface(x) & CoolsDown(x))", "all x.(SubductionOceanPlate(x) -> (MagmaSurface(x) & CoolDown(x)))", "all x y.((OceanPlate(x) & Subduction(x,y)) -> (MagmaSurface(y) & CoolDown(y)))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> (MagmaSurface(x,y) & CoolDown(x,y)))", "all x.((SubductionOceanPlate(x) & CausesMagmaToSurface(x) & CoolsDown(x)) -> CausesMagmaToCoolDown(x))", "all x y z.((SubductionOceanPlate(x) & OceanicPlate(y) & Magma(z) & SubductionOf(z,y)) -> (CausesSurface(z,y) & CoolsDown(z,y)))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> (CausesMagmaToSurface(x,y) & CoolsDown(x,y)))", "all x.((OceanPlate(x) & Subduction(x)) -> (MagmaSurface(x) & CoolDown(x)))", "all x.(SubductionOceanPlate(x) -> (MagmaSurface(x) & CoolsDown(x)))", "all x.(SubductionOceanPlate(x) -> (MagmaSurface(x) & CoolDown(x)))"]}
{"id": "entailmentbank_validation_180", "nl": "magma cooling can form volcanic mountains.", "fol": "", "prediction": ["all x.(MagmaCooling(x) -> CanFormVolcanicMountains(x))", "all x.(MagmaCooling(x) -> FormsVolcanicMountains(x))", "all x y.((MagmaCooling(x) & VolcanicMountain(y)) -> CanForm(x,y))", "all x y z.((MagmaCooling(x) & VolcanicMountain(y) & Magma(z)) -> CanForm(x,y,z))", "all x.(MagmaCooling(x) -> CanFormVolcanicMountains(x))", "all x y.((MagmaCooling(x) & VolcanicMountain(y)) -> CanForm(x,y))", "all x.(MagmaCooling(x) -> FormsVolcanicMountains(x))", "all x y.((MagmaCooling(x) & VolcanicMountain(y)) -> Forms(x,y))", "all x.(MagmaCooling(x) -> CanFormVolcanicMountains(x))", "all x y.((MagmaClimate(x) & VolcanicMountain(y) & Forms(x,y)) -> Cools(x))", "all x y.((MagmaCooling(x) & VolcanicMountain(y)) -> CanForm(x,y))", "all x.(MagmaCooling(x) -> FormsVolcanicMountains(x))", "all x.(MagmaClimate(x) -> CanFormVolcanicMountains(x))", "exists x.(MagmaCooling(x) & CanFormVulcanicMountains(x))", "exists x.(MagmaCooling(x) & CanFormVolcanicMountains(x))", "exists x.(MagmaClimate(x) & CanFormVolcanicMountains(x))"]}
{"id": "entailmentbank_validation_181", "nl": "the subduction of an oceanic plate can form volcanic mountians.", "fol": "", "prediction": ["all x.((SubductionOceanPlate(x) & OceanicPlate(x)) -> CanFormVolcanicMountainians(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> CanFormVolcanicMountainians(x,y))", "all x.(SubductionOceanPlate(x) -> CanFormVolcanicMountainians(x))", "all x y z.((SubductionOceanPlate(x) & OceanicPlate(y) & VolcanicMountain(z)) -> CanForm(x,y,z))", "(SubductionOceanPlate(x) -> FormsVolcanicMountainians(x))", "all x.((SubductionOceanPlate(x) & OceanicPlate(x)) -> FormsVolcanicMountainians(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> CanFormVolcanicMonopole(x,y))", "all x.(SubductionOceanPlate(x) -> FormsVolcanicMountainians(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> FormsVolcanicMountainians(x,y))", "all x y.((Subduction(x) & OceanicPlate(y)) -> CanFormVolcanicMountains(x,y))", "exists x.(OceanPlate(x) & Subduction(x) & CanFormVolcanicMountainians(x))", "all x.((SubductionOceanPlate(x) & OceanicPlate(y)) -> CanFormVolcanicMonopole(x))", "all x y z.((SubductionOceanPlate(x) & OceanicPlate(y) & VolcanicMountain(z)) -> CanForm(x,y,z))", "all x.(SubductionOceanPlate(x) -> CanFormVolcanicMonopole(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> CanFormVolcanicMountains(x,y))", "all x.((SubductionOceanPlate(x) & OceanicPlate(x)) -> FormsVolcanicMonopole(x))"]}
{"id": "entailmentbank_validation_182", "nl": "emitting sulfur dioxide causes acid rain.", "fol": "", "prediction": ["all x.((EmittingSulfurDioxide(x) & AcidRain(x)) -> Causes(x,acid))", "all x.(EmittingSulfurDioxide(x) -> CausesAcidRain(x))", "(EmittingSulfurDioxideCausesAcidRain(x))", "all x.((EmittingSulfurDioxide(x) & CausesAcidRain(x)) -> CausesRain(x))", "all x y.((EmittingSulfurDioxide(x) & AcidRain(y)) -> Causes(x,y))", "all x.(EmittingSulfurDioxide(x) -> CausesAcidRain(x))", "all x.((EmitsSulfurDioxide(x) & CausesAcidRain(x)) -> CausesAcidRain(x))", "all x y.((Emits(x,y) & SulfurDioxide(y)) -> CausesAcidRain(x))", "all x y.((EmittingSulfurDioxide(x) & AcidRain(y)) -> Causes(x,y))", "all x.((SulfurDioxide(x) & Emits(x,sulfur)) -> CausesAcidRain(x))", "all x.((EmittingSulfurDioxide(x) & AcidRain(x)) -> Causes(x,acidrain))", "all x.(EmittingSulfurDioxide(x) -> CausesAcidRain(x))", "all x y.((Emits(x,y) & SulfurDioxide(y)) -> CausesAcidRain(x,y))", "all x y.((EmittingSulfurDioxide(x) & AcidRain(y)) -> Causes(x,y))", "all x.(EmitsSulfurDioxide(x) -> CausesAcidRain(x))", "All x.(EmittingSulfurDioxide(x) -> AcidRain(x))"]}
{"id": "entailmentbank_validation_183", "nl": "volcanic ash in the atmosphere decreases the temperature by blocking the sun.", "fol": "", "prediction": ["all x y.((VolcanicAsh(x) & Atmosphere(y)) -> DecreasesTemperatureByBlockingSun(x,y))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> DecreasesTemperatureByBlockingSun(x))", "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Sun(z)) -> DecreasesTemperatureByBlocking(x,y,z))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperature(x,y) & BlocksSun(x,y)))", "(DecreasesTemperatureByBlockingSun(volcanicAshInAtmosphere))", "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Sun(z)) -> (DecreasesTemperature(x,y,z) & BlocksSun(x,y)))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> DecreasesTemperatureByBlockingSun(x))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> DecreasesTemperatureByBlockingSun(x,y))", "all x.(VolcanicAsh(x) -> (DecreasesTemperatureByBlockingSun(x)))", "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Temperature(z)) -> DecreasesByBlockingSun(x,y,z))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> (DecreasesTemperature(x) & BlocksSun(x)))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperatureByBlockingSun(x,y)))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> DecreasesTemperatureByBlockingSun(x))", "all x y.((VolcanicAsh(x) & Atmosphere(y) & BlocksSun(x,y)) -> DecreasesTemperature(x,y))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> DecreasesTemperatureByBlockingSun(x))", "all x.((VolcanicAsh(x) & InAtmosphere(x)) -> DecreasesTemperature(x))"]}
{"id": "entailmentbank_validation_184", "nl": "an erupting volcano releases sulfur gas and ash into the atmosphere.", "fol": "", "prediction": ["all x.((Volcano(x) & Erupting(x)) -> (ReleasesSulfurGas(x) & ReleasesAsh(x)))", "all x.(EruptingVolcano(x) -> (ReleasesSulfurGas(x) & ReleasesAsh(x)))", "all x y.((EruptingVolcano(x) & SulfurGas(y) & Ash(y)) -> ReleasesIntoAtmosphere(x,y))", "all x.((Volcano(x) & Erupting(x)) -> ReleasesSulfurGasAndAsh(x))", "all x y z.((EruptingVolcano(x) & SulfurGas(y) & Ash(z)) -> ReleasesIntoAtmosphere(x,y,z))", "all x.(EruptingVolcano(x) -> (ReleasesSulfurGas(x) & ReleasesAsh(x)))", "all x y.((EruptingVolcano(x) & SulfurGas(y) & Ash(y)) -> ReleasesIntoAtmosphere(x,y))", "all x.(EruptingVolcano(x) -> ReleasesSulfurGasAndAsh(x))", "all x.((Volcano(x) & Erupting(x)) -> (ReleasesSulfurGas(x) & ReleasesAsh(x)))", "all x.((EruptingVolcano(x) & ReleasesSulfurGasAndAsh(x)) -> ReleasesIntoAtmosphere(x))", "all x y.((EruptingVolcano(x) & SulfurGas(y) & Ash(y)) -> ReleasesIntoAtmosphere(x,y))", "all x y z.((EruptingVolcano(x) & SulfurGas(y) & Ash(z)) -> ReleasesIntoAtmosphere(x,y,z))", "all x.((Volcano(x) & Erupting(x)) -> ReleasesSulfurGasAndAsh(x))", "all x.(EruptingVolcano(x) -> (ReleasesSulfurGas(x) & ReleasesAsh(x)))", "all x.(EruptingVolcano(x) -> ReleasesSulfurGasAndAshIntoAtmosphere(x))", "all x y.((EruptingVolcano(x) & SulfurGas(y) & Ash(y)) -> ReleasesIntoAtmosphere(x,y))"]}
{"id": "entailmentbank_validation_185", "nl": "a volcanic eruption can cause acid rain and decrease the temperature.", "fol": "", "prediction": ["all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & DecreasesTemperature(x)))", "all x y.((VolcanicEruption(x) & AcidRain(y)) -> (Causes(x,y) & DecreasesTemperature(x)))", "all x.((VolcanicEruption(x) & CausesAcidRain(x) & DecreasesTemperature(x)) -> CanCause(x,AcidRain))", "all x y z.((VolcanicEruption(x) & AcidRain(y) & Temperature(z)) -> (Causes(x,y) & Decreases(x,z)))", "all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & DecreasesTemperature(x)))", "all x y.((VolcanicEruption(x) & AcidRain(y)) -> CanCauseAndDecreaseTemperature(x,y))", "all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & DecreasesTemperature(x)))", "all x.((VolcanicEruption(x) & CausesAcidRain(x) & DecreasesTemperature(x)) -> CanCause(x,AcidRain))", "all x y.((VolcanicEruption(x) & CausesAcidRain(y)) -> DecreasesTemperature(x,y))", "all x y.((VolcanicEruption(x) & CausesAcidRain(y,x) & DecreasesTemperature(y,x)) -> CanCause(x,y))", "all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & DecreasesTemperature(x)))", "all x y.((VolcanicEruption(x) & AcidRain(y)) -> (Cause(x,y) & DecreaseTemperature(x)))", "exists x.(VolcanicEruption(x) & CausesAcidRain(x) & DecreasesTemperature(x))", "all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & DecreasesTemperature(x)))", "all x.(VolcanicEruption(x) -> (CanCauseAcidRain(x) & CanDecreaseTemperature(x)))", "all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & DecreasesTemperature(x)))"]}
{"id": "entailmentbank_validation_186", "nl": "europe was unusally cold and had acid rain in 1783.", "fol": "", "prediction": ["all x.(Europe(x) -> (UnusallyCold(x) & AcidRain(x)))", "all x.((Europe(x) & UnusallyCold(x) & AcidRain(x)) -> 1783(x))", "all x y.((Europe(x) & UnusallyCold(x) & AcidRain(y)) -> In1783(x,y))", "(UnusallyCold(europe,1783) & AcidRain(europe,1783))", "-UnusallyCold(europe,1783) & AcidRain(europe,1783))", "all x.(Europe(x) -> (UnusallyCold(x) & AcidRain(x) & In(x,1783)))", "all x.((European(x) & UnusallyCold(x) & AcidRain(x,1783)) -> UnusallyCold(x))", "(UnusallyColdInEurope(europe,1783) & AcidRain(europe,1783))", "(UnusallyCold(europe,1783) & AcidRain(europe,1783))", "all x y.((Europe(x) & UnusallyCold(x) & AcidRain(y)) -> 1783(x,y))", "all x.((Europe(x) & UnusallyCold(x) & AcidRain(x)) -> In1783(x))", "all x.(Europe(x) -> (UnusallyCold(x) & AcidRain(x) & 1783(x)))", "(UnusallyCold(Europe,1783) & AcidRain(Europe,1783))", "all x y.((Europe(x) & UnusallyCold(x) & AcidRain(y)) -> In(x,y))", "all x.((Europe(x) & UnusallyCold(x) & AcidRain(x,1783)) -> Cold(x))", "all x.(Europe(x) -> (UnusallyCold(x) & HadAcidRain(x,1783)))"]}
{"id": "entailmentbank_validation_187", "nl": "a volcanic eruption may have happened to cause the cold weather and acid rain.", "fol": "", "prediction": ["all x.(VolcanicEruption(x) -> (CausedColdWeather(x) & AcidRain(x)))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(y)) -> CouldHaveGaredToCause(x,y))", "all x.(VolcanicEruption(x) -> (CausesColdWeather(x) & CausesAcidRain(x)))", "all x y z.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(z)) -> (OccursToCause(x,y,z) & Causes(x,y)))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(y)) -> CouldHaveCaused(x,y))", "all x.(VolcanicEruption(x) -> (CausedColdWeather(x) & AcidRain(x)))", "exists x.(VolcanicEruption(x) & ColdWeather(x) & AcidRain(x))", "all x.(VolcanicEruption(x) -> (CausesColdWeather(x) & CausesAcidRain(x)))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(y)) -> MayHaveGaredToCause(x,y))", "all x y z.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(z)) -> (OccursToCause(x,y,z) & Causes(x,y)))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(x)) -> HappenedToCause(x,y))", "exists x.(VolcanicEruption(x) & ColdWeather(x) & AcidRain(x))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(y)) -> CouldOccur(x,y))", "exists x.(VolcanicEruption(x) & ColdWeather(x) & AcidRain(x))", "exists x.(VolcanicEruption(x) & HappenedToCauseColdWeatherAndAcidRain(x))", "exists x.(VolcanicEruption(x) & ColdWeather(x) & AcidRain(x))"]}
{"id": "entailmentbank_validation_188", "nl": "the earth's atmosphere is made of 78 percent nitrogen by mass.", "fol": "", "prediction": ["all x.(EarthsAtmosphere(x) -> (MadeOf(x,78) & NitrogenByMass(x)))", "all x.((EarthsAtmosphere(x) & 78PercentNitrogen(x)) -> MadeOf(x,y))", "all x y.((EarthsAtmosphere(x) & 78PercentNitrogen(y)) -> MadeOf(x,y))", "78PercentNitrogenByMass(EarthsAtmosphere)", "(EarthsAtmosphere(Earth) & MadeOf(Earth,78))", "all x.((EarthsAtmosphere(x) & MadeOf(x,78)) -> NitrogenByMass(x))", "all x.(EarthsAtmosphere(x) -> MadeOf(x,78))", "(EarthsAtmosphere(e) & MadeOf(e,78) & MadeOf(e,78))", "all x y.((EarthsAtmosphere(x) & Nitrogen(y)) -> MadeOf(x,y))", "(EarthsAtmosphere(Earth) & MadeOf(Earth,78) & MadeOf(Earth,78))", "all x.(EarthsAtmosphere(x) -> (madeOf(x,78) & NitrogenByMass(x)))", "all x y.((EarthsAtmosphere(x) & 78PercentNitrogen(y)) -> MadeOf(x,y))", "all x y.((EarthsAtmosphere(x) & Nitrogen(y) & MadeOf(x,y)) -> 78PercentByMass(x))", "exists x.(EarthAtmosphere(x) & MadeOf(x,78))", "all x.((EarthsAtmosphere(x) & MadeOf(x,78)) -> NitrogenByMass(x))", "all x.(EarthsAtmosphere(x) -> MadeOf(x,78))"]}
{"id": "entailmentbank_validation_189", "nl": "most means over 50% of something.", "fol": "", "prediction": ["all x.(MeansOver50%(x) -> MostMeansOver50%(x))", "all x y.((MeansOver50%(x) & Something(y)) -> MostMeansOver50%(x,y))", "all x.((MeansOver50%(x)) -> MostMeans(x))", "all x.(MeansOver50%(x) -> -MeansOver50%(x))", "all x y.((MoreMeansOver50%(x) & Something(y)) -> MostMeansOver50%(x,y))", "(MeansOver50%OfSomething(MostMeans(MostMeansOver50%(Means(Means))", "(MostMeansOver50%(Meanings(Meanings))", "all x.((MeansOver50%(x) & Something(x)) -> MostMeansOver50%(x))", "all x y.((MeansOver50(x) & Something(y)) -> MostMeansOver50(x,y))", "-(MeansOver50%(x) | MeansOver50%(x)))", "all x y.((MoreMore(x,y) & Something(y)) -> Over50Percent(x,y))", "all x.(MeansOver50%(x) -> MostMeansOver50%(x))", "exists x.(Mean(x,y) & Over50(y))", "exists x.(More(x,50%) & MeansOver50%(x))", "all x y.((MeansOver50%(x) & Something(y)) -> MostMeansOver50%(x,y))", "exists x.(MeansOver50(x) & MostMeansOver50(x))"]}
{"id": "entailmentbank_validation_190", "nl": "the earth's atmosphere is made of mostly nitrogen.", "fol": "", "prediction": ["all x.(EarthsAtmosphere(x) -> MadeOfNitrogen(x))", "all x y.((EarthsAtmosphere(x) & Nitrogen(y)) -> MadeOf(x,y))", "(EarthsAtmosphere(e) & MadeOfNitrogen(e))", "all x.(EarthsAtmosphere(x) -> MadeOfNitrogen(x))", "all x.((EarthsAtmosphere(x) & MostlyNitrogen(x)) -> MadeOf(x,y))", "(MadeOfNitrogen(Earth) & MadeOfNitrogen(Earth))", "all x.((EarthsAtmosphere(x) & MadeOfNitrogen(x)) -> MadeOfNitrogen(x))", "all x y z.((EarthsAtmosphere(x) & Nitrogen(y) & Nitrogen(z)) -> MadeOf(x,y,z))", "all x y.((Earth(x) & Atmosphere(y)) -> MadeOfNitrogen(x,y))", "all x y.((EarthsAtmosphere(x) & Nitrogen(y)) -> MadeOf(x,y))", "(all x.(EarthsAtmosphere(x) -> MadeOfNitrogen(x)))", "exists x.(EarthAtmosphere(x) & MadeOfNitrogen(x))", "all x.(EarthsAtmosphere(x) -> MadeOfNitrogen(x))", "all x y.((EarthsAtmosphere(x) & Nitrogen(y)) -> MadeOf(x,y))", "exists x.(EarthAtmosphere(x) & MadeOfNitrogen(x))", "all x.(EarthsAtmosphere(x) -> MadeOfNitrogen(x))"]}
{"id": "entailmentbank_validation_191", "nl": "oceans cover 70% of the surface of the earth.", "fol": "", "prediction": ["all x.(Ocean(x) -> CoversSurface(x,70))", "all x y.((Ocean(x) & Earth(y)) -> CoversSurface(x,y))", "all x.(Ocean(x) -> Covers70%OfEarthSurface(x))", "all x.(Ocean(x) -> (CoversSurface(x,70) & EarthSurface(x,70)))", "all x y.((Ocean(x) & Earth(y)) -> Covers70%(x,y))", "(all x.(Ocean(x) -> Covers70%OfEarthSurface(x)))", "all x y z.((Ocean(x) & Earth(y) & Surface(z)) -> Covers(x,y,z))", "(CoversSurface(oceans) & 70%OfEarth(oceans))", "(Covers70%OfSurfaceOfEarth(ocean,earth))", "all x y.((Ocean(x) & Earth(y)) -> CoversSurface(x,y))", "all x.(Ocean(x) -> CoversSurface(x,70))", "all x.(Ocean(x) -> (Covers70%OfEarth(x)))", "all x y.((Ocean(x) & Earth(y)) -> Covers(x,y))", "all x.(Ocean(x) -> (CoversSurface(x,70) & CoversSurface(x,70)))", "all x.(Ocean(x) -> Covers70%OfSurface(x))", "all x y.((Ocean(x) & Earth(y)) -> Covers70%(x,y))"]}
{"id": "entailmentbank_validation_192", "nl": "oceans cover most of earth's surface.", "fol": "", "prediction": ["all x.(Ocean(x) -> CoversMostOfEarthSurface(x))", "all x y.((Ocean(x) & EarthSurface(y)) -> Covers(x,y))", "all x.(Ocean(x) -> CoversMostOfEarthSurface(x))", "(CoversMostOfEarthSurface(ocean))", "(all x.(Ocean(x) -> CoversMostOfEarthSurface(x)))", "all x y.((Ocean(x) & EarthSurface(y)) -> CoversMost(x,y))", "all x y z.((Ocean(x) & EarthSurface(y) & Surface(z)) -> Covers(x,y,z))", "all x y.((Ocean(x) & Earth(y)) -> CoversMostOfSurface(x,y))", "all x.(Ocean(x) -> CoversMostOfEarthsSurface(x))", "all x.(Ocean(x) -> (CoversMostOfEarthSurface(x)))", "all x.(Ocean(x) -> CoversMostOfEarthSurface(x))", "all x.(Ocean(x) -> CoversEarthsSurface(x))", "all x y.((Ocean(x) & EarthSurface(y)) -> Covers(x,y))", "exists x.(Ocean(x) & EarthSurface(x) & CoversMostOfSurface(x))", "all x.(Ocean(x) -> (CoversMostOfEarthsSurface(x)))", "all x.(Ocean(x) -> CoversMostOfEarthsSurface(x))"]}
{"id": "entailmentbank_validation_193", "nl": "an ocean is a kind of body of water.", "fol": "", "prediction": ["all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x y.((Ocean(x) & BodyOfWater(y)) -> Water(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x y.((Ocean(x) & BodyOfWater(y)) -> -BodyOfWater(x))", "all x y.((Ocean(x) & BodyOfWater(y)) -> Is(x,y))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x y.((Ocean(x) & BodyOfWater(y)) -> Water(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "exists x.(Ocean(x) & BodyOfWater(x))", "exists x.(Ocean(x) & BodyOfWater(x))", "exists x.(Ocean(x) & BodyOfWater(x))"]}
{"id": "entailmentbank_validation_194", "nl": "water covers most of earth's surface.", "fol": "", "prediction": ["all x.(Water(x) -> CoversMostOfEarthSurface(x))", "all x y.((Water(x) & EarthSurface(y)) -> Covers(x,y))", "(CoversMostOfEarthSurface(water))", "all x.(Water(x) -> CoversMostOfEarthSurface(x))", "(CoversMostOfEarthSurface(water))", "all x y.((Water(x) & Earth(y)) -> CoversMostOfSurface(x,y))", "all x y.((Water(x) & EarthSurface(y)) -> Covers(x,y))", "(CoversMostOfEarthSurface(water,earth))", "all x.(Water(x) -> CoversMostOfEarthSurface(x))", "all x.(Water(x) -> CoversMostOfEarthsSurface(x))", "all x.(WaterCoversSurface(x) -> EarthsSurface(x))", "exists x.(Water(x) & EarthSurface(x) & CoversMost(x,EarthSurface))", "all x y.((Water(x) & Earth(y)) -> CoversMost(x,y))", "all x y.((Water(x) & EarthsSurface(y)) -> Covers(x,y))", "all x.(Water(x) -> CoversEarthSurface(x))", "all x.(Water(x) -> CoversMostOfEarthSurface(x))"]}
{"id": "entailmentbank_validation_195", "nl": "oceans contain most of earth's water.", "fol": "", "prediction": ["all x.(Ocean(x) -> ContainsMostOfEarthsWater(x))", "all x y.((Ocean(x) & Earth(y)) -> ContainsMostOfWater(x,y))", "all x.(Ocean(x) -> ContainsMostOfEarthsWater(x))", "(all x.(Ocean(x) -> EarthsWater(x)))", "all x y.((Ocean(x) & EarthsWater(y)) -> Contains(x,y))", "all x.(Ocean(x) -> (ContainsEarthsWater(x) & MostEarthsWater(x)))", "all x.(Ocean(x) -> ContainsMostOfEarthsWater(x))", "(all x.(Ocean(x) -> EarthsWater(x)))", "all x y.((Ocean(x) & Earth(y)) -> ContainsMostOfWater(x,y))", "all x.(Ocean(x) -> (ContainMostOfEarthsWater(x)))", "all x y.((Ocean(x) & EarthsWater(y)) -> ContainsMost(x,y))", "all x.(Ocean(x) -> ContainsMostOfEarthsWater(x))", "exists x.(Ocean(x) & EarthsWater(x) & ContainsMost(x,y))", "all x y.((Ocean(x) & EarthsWater(y)) -> Contains(x,y))", "all x.(Ocean(x) -> (ContainMostOfEarthsWater(x)))", "all x.(Ocean(x) -> ContainsMostOfEarthsWater(x))"]}
{"id": "entailmentbank_validation_196", "nl": "water is made of hydrogen and oxygen.", "fol": "", "prediction": ["all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "(MadeOfHydrogen(water) & MadeOfOxygen(water))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x y.((Water(x) & Hydrogen(y) & Oxygen(y)) -> MadeOf(x,y))", "all x.(Water(x) -> (Hydrogen(x) & Oxygen(x)))", "(MadeOfHydrogen(Water) & MadeOfOxygen(Water))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x y.((Water(x) & Hydrogen(y) & Oxygen(y)) -> MadeOf(x,y))", "(MadeOfHydrogen(water) & MadeOfOxygen(water))", "all x.(Water(x) -> (Hydrogen(x) & Oxygen(x)))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x y.((Water(x) & Hydrogen(y) & Oxygen(z)) -> MadeOf(x,y,z))", "exists x.(Water(x) & MadeOf(x,hydrogen) & MadeOf(x,oxygen))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "(MadeOfHydrogen(Water) & MadeOfOxygen(Water))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))"]}
{"id": "entailmentbank_validation_197", "nl": "ocean water is made of hydrogen and oxygen.", "fol": "", "prediction": ["all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "(MadeOfHydrogen(oceanWater) & MadeOfOxygen(oceanWater))", "all x y.((OceanWater(x) & Hydrogen(y) & Oxygen(y)) -> MadeOf(x,y))", "all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "(MadeOfHydrogen(oceanWater) & MadeOfOxygen(oceanWater))", "all x.(OceanWater(x) -> (Hydrogen(x) & Oxygen(x)))", "all x y.((OceanWater(x) & Hydrogen(y) & Oxygen(y)) -> MadeOf(x,y))", "all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "(MadeOfHydrogen(OceanWater) & MadeOfOxygen(OceanWater))", "all x y.((OceanWater(x) & Hydrogen(y)) -> MadeOf(x,y))", "all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(OceanWater(x) -> (Hydrogen(x) & Oxygen(x)))", "all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "exists x.(OceanWater(x) & MadeOf(x,hydrogen,oxygen))", "all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))"]}
{"id": "entailmentbank_validation_198", "nl": "oxygen is more common than hydrogen on earth.", "fol": "", "prediction": ["all x.(Oxygen(x) -> MoreCommonThanHydrogen(x))", "all x y.((Oxygen(x) & Hydrogen(y)) -> MoreCommonOnEarth(x,y))", "all x.((Oxygen(x) & Hydrogen(x)) -> MoreCommonOnEarth(x))", "(MoreCommonOnEarth(Oxygen(Oxygen) & MoreCommonOnEarth(Oxygen))", "all x y.((Oxygen(x) & Hydrogen(y)) -> MoreCommonOnEarth(x,y))", "(MoreCommonOnEarth(Oxygen) & MoreCommonOnEarth(Oxygen))", "(MoreCommonThanHydrogen(oxygen))", "all x.(Oxygen(x) -> MoreCommonThanHydrogen(x))", "all x.((Oxygen(x) & Hydrogen(x)) -> MoreCommonOnEarth(x))", "all x y.((Oxygen(x) & Hydrogen(y)) -> MoreCommonOnEarth(x,y))", "(MoreCommonOnEarth(oxygen,OH) -> MoreCommonOnEarth(oxygen,OH))", "exists x.(Oxygen(x) & Hydrogen(x) & OnEarth(x))", "all x.(Oxygen(x) -> MoreCommonThanHydrogen(x))", "all x y.((Oxygen(x) & Hydrogen(y)) -> MoreCommonOnEarth(x,y))", "exists x.(Oxygen(x) & Hydrogen(x) & OnEarth(x))", "all x y.((Oxygen(x) & Hydrogen(y)) -> MoreCommon(x,y))"]}
{"id": "entailmentbank_validation_199", "nl": "oxygen is the most common element found in the compounds that make up ocean water.", "fol": "", "prediction": ["all x.(Oxygen(x) -> (MostCommonElement(x) & FoundInCompounds(x) & MakesUpOceanWater(x)))", "all x y.((Oxygen(x) & Compound(y) & MakesUpOceanWater(x,y)) -> MostCommonElement(x,y))", "all x.(Oxygen(x) -> MostCommonElementInCompounds(x))", "(MostCommonElementInCompounds(OceanWater))", "all x.((Oxygen(x) & Compound(x) & MakesUpOceanWater(x)) -> MostCommonElement(x))", "all x y.((Oxygen(x) & Compound(y)) -> MostCommonElement(x,y))", "all x.(Oxygen(x) -> (MostCommonElement(x) & FoundInCompounds(x) & MakesUpOceanWater(x)))", "(MostCommonElementInCompounds(oxygen) & MakesUpOceanWater(oxygen))", "all x y z.((Oxygen(x) & Compound(y) & OceanWater(z)) -> MostCommonElement(x,y,z))", "all x y.((Oxygen(x) & Compound(y) & MakesUpOceanWater(x,y)) -> MostCommonElement(x,y))", "all x y.((Oxygen(x) & OceanWaterCompound(y)) -> MostCommonElement(x,y))", "all x.(Oxygen(x) -> MostCommonElementInCompounds(x))", "(MostCommonElementInCompounds(OceanWater))", "all x.(Oxygen(x) -> (MostCommonElement(x) & FoundInCompounds(x) & MakesUpOceanWater(x)))", "all x y.((Oxygen(x) & Compound(y)) -> MostCommonElementInCompound(x,y))", "all x.(Oxygen(x) -> CommonElementInCompounds(x))"]}
{"id": "entailmentbank_validation_200", "nl": "if something is permeable, then the water will flow through something easily.", "fol": "", "prediction": ["all x.((Permeable(x) & WaterFlowsEasily(x)) -> Permeable(x))", "all x.(Permeable(x) -> WaterFlowsEasily(x))", "all x y.((Permeable(x) & Water(y)) -> FlowsEasily(y,x))", "all x.((Permeable(x) & WaterFlowsEasily(x)) -> Permeable(x))", "(Permeable(x) -> WaterFlowsEasily(x))", "all x y.((Permeable(x) & Water(y) & Permeable(y)) -> FlowsEasily(y))", "all x.((Water(x) & Permeable(x)) -> WaterFlowsEasily(x))", "-Permeable(--> WaterFlowsEasily(-))", "all x y.((Permeable(x) & Permeable(y)) -> WaterFlowsEasily(x,y))", "all x.(Permeable(x) -> WaterFlowsEasily(x))", "all x.((Permeable(x) -> WaterFlowsEasily(x))", "all x y.((Water(x) & Permeable(x) & Water(y)) -> FlowsEasily(x,y))", "all x y.((Permeable(x) & Water(y) & Permeable(y)) -> FlowsEasily(y,x))", "all x.(Permeable(x) -> WaterFlowsEasily(x))", "all x.((Permeable(x) & WaterFlowsEasily(x)) -> Permeable(x))", "all x.(Permeable(x) -> WaterFlowsEasily(x))"]}
{"id": "entailmentbank_validation_201", "nl": "soil is permeable.", "fol": "", "prediction": ["all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x y.((Soil(x) & Permeable(y)) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "(PermeableSoil(Soil))", "all x.(Soil(x) -> Permeable(x))", "(PermeableSoil)", "all x y.((Soil(x) & Permeable(y)) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "exists x.(Soil(x) & Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "exists x.(Soil(x) & Permeable(x))", "exists x.(Soil(x) & Permeable(x))"]}
{"id": "entailmentbank_validation_202", "nl": "water will flow through soil easily.", "fol": "", "prediction": ["all x.(Water(x) -> FlowsEasily(x))", "all x y.((Water(x) & Soil(y)) -> FlowsEasily(x,y))", "all x.(Water(x) -> FlowsThroughSoil(x))", "all x y z.((Water(x) & Soil(y) & Soil(z)) -> FlowsEasily(x,y,z))", "all x y.((Water(x) & Soil(y)) -> FlowsEasily(x,y))", "all x.(WaterFlowsThroughSoil(x) -> Easy(x))", "all x.((Water(x) & Soil(y)) -> FlowsEasily(x,y))", "(FlowsThroughSoilEasily(Water))", "all x.(Water(x) -> FlowsEasily(x))", "all x.(WaterFlowsThroughSoil(x) -> EasyToFly(x))", "all x y.((Water(x) & Soil(y)) -> FlowsEasily(x,y))", "all x.((Water(x) & Soil(y)) -> WillFlowEasily(x,y))", "(FlowsThroughSoilEasily(Water))", "all x.(WaterFlowsThroughSoil(x) -> Easily(x))", "all x y.((Water(x) & Soil(y)) -> FlowsEasily(x,y))", "all x y.((Water(x) & Soil(y)) -> WillFlowEasily(x,y))"]}
{"id": "entailmentbank_validation_203", "nl": "color of the soil can be used to indicate the soil component.", "fol": "", "prediction": ["all x.((Soil(x) & ColorOfSoil(x)) -> IndicatesSoilComponent(x))", "all x y.((Soil(x) & SoilComponent(y)) -> ColorIndicated(x,y))", "all x.(SoilComponent(x) -> ColorOfSoil(x))", "all x.((Soil(x) & Color(x)) -> IndicatesSoilComponent(x))", "all x y.((Soil(x) & SoilComponent(y)) -> CanIndicate(x,y))", "all x.(SoilColor(x) -> IndicatesSoilComponent(x))", "all x y.((Soil(x) & Color(y)) -> IndicatesSoilComponent(x,y))", "all x y z.((Soil(x) & SoilComponent(y) & Color(z)) -> Indicates(x,y,z))", "(IndicateSoilComponent(soil) -> ColorOfSoil(s))", "all x y.((SoilComponent(x) & SoilColor(y)) -> Indicates(x,y))", "all x.((Soil(x) & SoilComponent(x)) -> ColorIndicated(x))", "(IndicateSoilComponent(soil) -> ColorOfSoil(soil))", "all x.(SoilComponent(x) -> CanIndicate(x,SoilComponent))", "all x y z.((Soil(x) & Color(y) & SoilComponent(z)) -> Indicates(x,y,z))", "exists x.(SoilComponent(x) & ColorOfSoil(x) & IndicatesSoilComponent(x))", "all x y.((Soil(x) & SoilComponent(y)) -> Color(x,y))"]}
{"id": "entailmentbank_validation_204", "nl": "high humus content causes the soil to be brown.", "fol": "", "prediction": ["all x.(HighHumusContent(x) -> BrownSoil(x))", "all x.((HighHumusContent(x) & SoilBrown(x)) -> Causes(x,y))", "highhumusContentCausesSoilToBeBrown(x))", "all x y.((HighHumusContent(x) & Soil(y)) -> Brown(y))", "(HighHumusContent(x) -> BrownSoil(x))", "all x.(HighHumusContent(x) -> SoilBrown(x))", "(HighHumusContentCausesSoilToBeBrown(x))", "all x.(HighHumidContent(x) -> BrownSoil(x))", "all x.((HighHumusContent(x) & SoilBrown(x)) -> High(x))", "all x y.((HighHumidContent(x) & Soil(y)) -> Brown(y))", "all x y.((HighHumusContent(x) & Soil(y)) -> Brown(y))", "all x.((HighHumidContent(x) & SoilBrown(x)) -> Causes(x,y))", "all x y.((HumusContent(x) & Soil(y) & High(x)) -> Brown(y))", "all x.(HighHumorContent(x) -> SoilBrown(x))", "all x.((HighHumorContent(x) & SoilBrown(x)) -> High(x))", "all x.(HighHumusContent(x) -> BrownSoil(x))"]}
{"id": "entailmentbank_validation_205", "nl": "brown is a kind of color.", "fol": "", "prediction": ["all x.(Brown(x) -> Color(x))", "all x.(Brown(x) -> Color(x))", "all x y.((Brown(x) & Color(y)) -> Color(x,y))", "(Color(brown))", "(Color(brown) & Color(brown))", "all x.(Brown(x) -> Color(x))", "all x.((Brown(x) & Color(x)) -> Color(x))", "all x y.((Brown(x) & Color(y)) -> Color(x,y))", "all x.(Brown(x) -> Color(x))", "all x y.((Brown(x) & Color(y)) -> Color(x,y))", "exists x.(Color(x) & Brown(x))", "all x.(Brown(x) -> Color(x))", "all x.(Brown(x) -> Color(x))", "all x.(Brown(x) -> Color(x))", "exists x.(Brown(x) & Color(x))", "exists x.(Bronze(x) & Color(x))"]}
{"id": "entailmentbank_validation_206", "nl": "if the soil has high humus content, then the soil will be brown in color.", "fol": "", "prediction": ["all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumorContent(x)) -> BrownColor(x))", "all x y.((Soil(x) & HighHumusContent(x)) -> BrownColor(y))", "(HighHumusContent(soil) -> BrownColor(soil))", "all x y.((Soil(x) & HighHumusContent(x) & Soil(y) & BrownColor(y)) -> Has(x,y))", "-(HighHumusContent(soil) & BrownColor(soil))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))", "-HighHumusContentSoil(-(Soil(-) & BrownColor(-))", "all x y.((Soil(x) & HighHumorContent(x) & Soil(y) & BrownColor(y)) -> Has(x,y))", "all x.(HighHumusContent(x) -> BrownColor(x))", "all x.((Soil(x) & HighHumorContent(x)) -> BrownColor(x))", "all x.(HighHumusContent(x) -> BrownColorSoil(x))", "all x y.((Soil(x) & HighHumusContent(x) & BrownColor(y)) -> Soil(x))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumidContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))"]}
{"id": "entailmentbank_validation_207", "nl": "mountains can cause the water in the air mass to condense.", "fol": "", "prediction": ["all x.(Mountain(x) -> CausesWaterCondense(x))", "all x y.((Mountain(x) & Water(y)) -> CausesCondense(x,y))", "all x y.((Mountain(x) & AirMass(y)) -> CausesWaterCondense(x,y))", "all x y z.((Mountain(x) & Water(y) & AirMass(z)) -> CanCondense(x,y,z))", "all x.(Mountain(x) -> CausesWaterCondense(x))", "all x y.((Mountain(x) & Water(y)) -> Condenses(x,y))", "all x.((Mountain(x) & Water(y)) -> Condense(x,y))", "(all x.(Mountain(x) -> WaterCondense(x)))", "all x.(Mountain(x) -> CausesWaterCondensation(x))", "all x y z.((Mountain(x) & Water(y) & AirMass(z)) -> CausesCondense(x,y,z))", "all x.(Mountain(x) -> WaterCondensesInAirMass(x))", "all x y.((Mountain(x) & AirMass(y)) -> CausesWaterCondensation(x,y))", "all x y.((Mountain(x) & Water(y) & AirMass(z)) -> Condense(x,y,z))", "all x.(Mountain(x) -> CanCauseWaterCondense(x))", "all x.(Mountain(x) -> (WaterCondensation(x,airMass) & CausesCondensation(x,airMass)))", "all x.(Mountain(x) -> CausesWaterCondense(x))"]}
{"id": "entailmentbank_validation_208", "nl": "mountain is a kind of geographic obstacles.", "fol": "", "prediction": ["all x.(Mountain(x) -> GeographicObstacle(x))", "all x y.((Mountain(x) & GeographicObstacle(y)) -> -GeographicObstacle(x,y))", "all x.(Mountain(x) -> GeographicObstacle(x))", "all x.(Mountain(x) -> GeospatialObstacle(x))", "all x y.((Mountain(x) & GeographicObstacle(y)) -> Is(x,y))", "all x y.((Mountain(x) & GeographicObstacle(y)) -> -GeographicalObstacle(x,y))", "all x.(Mountain(x) -> GeographicObstacle(x))", "all x.(Mountain(x) -> GeographicalObstacle(x))", "all x.(Mountain(x) -> GeographicObstacle(x))", "all x y.((Mountain(x) & GeographicObstacle(y)) -> Is(x,y))", "all x y.((Mountain(x) & GeographicObstacle(y)) -> GeospatialObstacle(x,y))", "all x.(Mountain(x) -> GeographicObstacle(x))", "all x.(Mountain(x) -> GeographicObstacle(x))", "exists x.(Mountain(x) & GeospatialObstacle(x))", "exists x.(Mountain(x) & GeographicObstacle(x))", "exists x.(Mountain(x) & GeographicObstacle(x))"]}
{"id": "entailmentbank_validation_209", "nl": "mountain is the geographic obstacle that can cause the water in the air mass to condense.", "fol": "", "prediction": ["all x.(Mountain(x) -> (GeographicObstacle(x) & CausesWaterCondense(x)))", "all x y.((Mountain(x) & AirMass(y)) -> CausesWaterCondense(x,y))", "all x.(Mountain(x) -> CausesWaterCondense(x))", "(GeographicObstacle(Mountain) & CausesWaterCondense(Mountain))", "all x y.((Mountain(x) & Water(y)) -> CausesCondense(x,y))", "all x y z.((Mountain(x) & Water(y) & AirMass(z)) -> CausesCondense(x,y,z))", "all x.(Mountain(x) -> (GeographicObstacle(x) & CausesWaterCondensation(x)))", "(GeographicObstacle(mount) & CausesWaterCondense(mount,airMass))", "all x y.((Mountain(x) & AirMass(y)) -> CausesWaterCondensation(x,y))", "all x y.((Mountain(x) & Water(y) & AirMass(y)) -> CausesCondense(x,y))", "all x y z.((Mountain(x) & Water(y) & AirMass(z)) -> CausesCondense(x,y,z))", "all x.(Mountain(x) -> CausesWaterCondense(x))", "all x.(Mountain(x) -> (GeographicObstacle(x) & CausesWaterCondense(x)))", "all x.(Mountain(x) -> (GeographicObstacle(x) & CausesWaterCondense(x)))", "all x.(Mountain(x) -> (GeographicObstacle(x) & CausesWaterCondensation(x)))", "all x.(Mountain(x) -> CausesCondense(x))"]}
{"id": "entailmentbank_validation_210", "nl": "if something causes a process then that something is required for that process.", "fol": "", "prediction": ["all x y.((CausesProcess(x) & Process(y)) -> Requires(x,y))", "all x.(CausesProcess(x) -> RequiresProcess(x))", "all x.((CausesProcess(x) & RequiresProcess(x)) -> CausesProcess(x))", "all x y z.((CausesProcess(x) & Process(y) & Process(z)) -> Requires(x,y,z))", "all x y.((CausesProcess(x) & Process(y)) -> Requires(x,y))", "all x y.((CausesProcess(x,y) & Process(y)) -> Requires(x,y))", "all x.(CausesProcess(x) -> RequiresProcess(x))", "all x y.((CausesProcess(x) & Process(y)) -> Requires(x,y))", "all x.((CausesProcess(x) & RequiresProcess(x)) -> CausesProcess(x))", "all x y z.((CausesProcess(x,y) & Process(z)) -> Requires(x,z))", "all x y.((CausesProcess(x) & CausesProcess(y)) -> RequiresProcess(x,y))", "all x y z.((CausesProcess(x) & Process(y) & Process(z)) -> Requires(x,y,z))", "all x y.((Cause(x,y) & Process(y)) -> Requires(x,y))", "exists x.(CausesProcess(x) & RequiresProcess(x))", "exists x.(CausesProcess(x) & RequiresProcess(x))", "exists x.(CausesProcess(x) & RequiresProcess(x))"]}
{"id": "entailmentbank_validation_211", "nl": "condensation causes clouds to form.", "fol": "", "prediction": ["all x.(Condensation(x) -> CausesCloudsToForm(x))", "all x y.((Condensation(x) & Cloud(y)) -> CausesToForm(x,y))", "all x.(Condensation(x) -> CausesCloudsToForm(x))", "all x y z.((Condensation(x) & Cloud(y) & Cloud(z)) -> CausesToForm(x,y,z))", "all x y.((Condensation(x) & Cloud(y)) -> CausesToForm(x,y))", "(CondensationCausesCloudsToForm(Condensation))", "all x.(Condensation(x) -> CausesCloudsToForm(x))", "all x y.((Condensation(x) & Cloud(y)) -> Form(x,y))", "All x y z.(Condensation(x) -> CausesCloudsToForm(y))", "all x.(Condensation(x) -> CloudsForm(x))", "all x y.((Condensation(x) & Cloud(y)) -> CausesFormation(x,y))", "all x.(Condensation(x) -> CausesCloudsToForm(x))", "exists x.(Condensation(x) & Cloud(y) & Causes(x,y))", "all x.(Condensation(x) -> CloudForm(x))", "all x y.((Condensation(x) & Cloud(y)) -> Form(x,y))", "all x.(Condensation(x) -> CausesCloudsToForm(x))"]}
{"id": "entailmentbank_validation_212", "nl": "condensation is required for clouds to form.", "fol": "", "prediction": ["all x.(Condensation(x) -> CloudsForm(x))", "all x y.((Cloud(x) & Condensation(y)) -> RequiresFormation(x,y))", "all x.(Condensation(x) -> CloudForm(x))", "all x.(Cloud(x) -> CondensationRequiredForFormation(x))", "(CondensationRequiredForClouds(Condensation))", "all x.((Condensation(x) & Cloud(y)) -> Form(x,y))", "all x y z.((Cloud(x) & Condensation(y) & Cloud(z)) -> RequiresFormation(y,z))", "all x.(Condensation(x) -> CloudsForm(x))", "all x y.((Cloud(x) & Condensation(y)) -> RequiresFormation(x,y))", "all x.(CondensationRequiredForClouds(x) -> Form(x))", "all x y.((Cloud(x) & Condensation(y)) -> RequiredForFormation(x,y))", "exists x.(Cloud(x) & CondensationRequiredForFormation(x))", "exists x.(Cloud(x) & CondensationRequiredForFormation(x))", "all x y.((Cloud(x) & Condensation(y)) -> RequiresFormation(x,y))", "exists x.(Cloud(x) & CondensationRequiredFor(x,y))", "All x y.((Cloud(x) & Condensation(y)) -> Form(x,y))"]}
{"id": "entailmentbank_validation_213", "nl": "erosion is when wind transports sediments from one place to another place for a long distance.", "fol": "", "prediction": ["all x y z.((Erosion(x) & Wind(y) & Place(z)) -> TransportsSedimentsForLongDistance(y,z))", "all x y.((Wind(x) & Sediment(y) & Place(z) & TransportsForLongDistance(x,y,z)) -> Erosion(x))", "all x y z.((Wind(x) & Sediment(y) & Place(z) & TransportsForLongDistance(x,y,z)) -> Erosion(x))", "all x.(Erosion(x) -> (WindTransportsSediments(x) & LongDistance(x)))", "all x.((WindTransportsSediments(x) & LongDistance(x)) -> Erosion(x))", "all x y.((Erosion(x) & Wind(y)) -> TransportsSediments(y,x))", "(all x.(Erosion(x) -> WindTransportsSediments(x)))", "all x y z.((Erosion(x) & Wind(y) & Place(z)) -> TransportsSedimentsForLongDistance(y,z))", "all x.(Erosion(x) -> (WindTransportsSediments(x) & LongDistance(x)))", "all x.(Erosion(x) -> (WindTransportsSediments(x) & LongDistance(x)))", "all x.((WindTransportsSediments(x) & FromOnePlaceToAnotherPlace(x)) -> Erosion(x))", "all x y.((Erosion(x) & Wind(y)) -> TransportsSediments(y,x))", "all x y.((Wind(x) & Sediment(y)) -> TransportsForLongDistance(x,y))", "all x y z.((Wind(x) & Sediment(y) & Place(z)) -> TransportsForLongDistance(x,y,z))", "all x y z.((Erosion(x) & Wind(y) & Place(z)) -> TransportsSediments(y,z))", "all x.(Erosion(x) -> (WindTransportsSediments(x) & LongDistance(x)))"]}
{"id": "entailmentbank_validation_214", "nl": "sand dunes / arches are formed by the wind transporting and depositing sand.", "fol": "", "prediction": ["all x.((SandDune(x) & Arches(x)) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x y.((SandDune(x) & Arches(y)) -> (FormedByWind(x,y) & TransportsAndDepositsSand(x)))", "all x.(SandDunes(x) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x y z.((SandDune(x) & Arches(y) & Wind(z)) -> (FormedBy(x,z) & TransportsAndDepositsSand(x)))", "all x.((SandDune(x) | Arches(x)) -> FormedByWind(x))", "all x y.((SandDune(x) & Arches(y)) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "(FormedByWindTransportingAndDepositingSand(sand) & SandDunes(arches))", "all x.((SandDunes(x) & Arches(x)) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x.(SandDune(x) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x.(SandDunes(x) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x y.((SandDune(x) & Arch(y)) -> (FormedByWind(x,y) & TransportsAndDepositsSand(x)))", "(FormedByWindTransportingAndDepositingSand(sand))", "all x.(SandDunes(x) -> (FormedByWindTransportingAndDepositingSand(x)))", "all x.((SandDunes(x) & Arches(x)) -> FormedByWind(x))", "all x y.((SandDunes(x) & Arches(y)) -> FormedByWind(x,y))", "all x y.((SandDune(x) & Arched(y)) -> (FormedByWindTransportingAndDepositingSand(x)))"]}
{"id": "entailmentbank_validation_215", "nl": "wind erosion can form sand dunes and arches.", "fol": "", "prediction": ["all x.(WindErosion(x) -> (FormsSandDunes(x) | FormsArches(x)))", "all x y.((WindErosion(x) & SandDune(y)) -> (Forms(x,y) & Forms(x,y)))", "(FormsSandDunes(wind) & FormsArches(wind))", "all x.(WindErosion(x) -> (FormsSandDunes(x) & FormsArches(x)))", "all x y z.((WindErosion(x) & SandDunes(y) & Arches(z)) -> (Forms(x,y,z) & Forms(x,y)))", "all x y.((WindErosion(x) & SandDune(y)) -> (Forms(x,y) | Forms(x,y)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) | FormsArches(x)))", "(FormsSandDunes(wind) & FormsArches(wind))", "all x.(WindErosion(x) -> (FormsSandDunes(x) & FormsArches(x)))", "all x y z.((WindErosion(x) & SandDunes(y) & Arches(z)) -> Forms(x,y,z))", "all x y.((WindErosion(x) & SandDunes(y) & Arches(y)) -> Forms(x,y))", "all x y.((WindErosion(x) & SandDune(y)) -> (Forms(x,y) & Forms(x,y)))", "exists x.(WindErosiation(x) & SandDune(x) & Arches(x))", "all x.(WindErosion(x) -> (FormSandDunes(x) | FormArches(x)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) & FormsArches(x)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) | FormsArches(x)))"]}
{"id": "entailmentbank_validation_216", "nl": "rain causes erosion.", "fol": "", "prediction": ["all x.(Rain(x) -> CausesErosion(x))", "all x y.((Rain(x) & Erosion(y)) -> Causes(x,y))", "all x.(Rain(x) -> CausesErosion(x))", "all x y.((Rain(x) & Erosion(y)) -> Causes(x,y))", "(CausesErosion(rain,rain)", "all x.(Rain(x) -> CausesErosion(x))", "(CausesErosion(Rain)", "(CausesErosionByRain(Rain))", "all x y.((Rain(x) & Erosion(y)) -> Causes(x,y))", "all x.(Rain(x) -> CausesErosion(x))", "(CausesErosion(rain,rain)", "all x y.((Rain(x) & Erosion(y)) -> Causes(x,y))", "all x.(Rain(x) -> CausesErosion(x))", "all x y.((Rain(x) & Erosion(y)) -> Causes(x,y))", "all x.(Rain(x) -> CausesErosion(x))", "all x.(Rain(x) -> CausesErosion(x))"]}
{"id": "entailmentbank_validation_217", "nl": "erosion sometimes decreases the amount of nutrients in soil.", "fol": "", "prediction": ["all x y.((Erosion(x) & Soil(y)) -> DecreasesNutrients(x,y))", "all x.(Erosion(x) -> DecreasesNutrientsInSoil(x))", "all x.(Erosion(x) -> (DecreasesNutrients(x) & InSoil(x)))", "all x y z.((Erosion(x) & Nutrients(y) & Soil(z)) -> DecreasesAmount(x,y,z))", "all x y.((Erosion(x) & Soil(y)) -> DecreasesNutrients(x,y))", "all x.(Erosion(x) -> DecreasesNutrients(x))", "all x y z.((Erosion(x) & Nutrients(y) & Soil(z)) -> Decreases(x,y,z))", "all x y.((Erosion(x) & Soil(y)) -> DecreasesNutrients(x,y))", "exists x.(Erosia(x) & DecreasesNutrients(x))", "all x y.((Erosion(x) & Soil(y)) -> (DecreasesNutrients(x,y) | DecreasesNutrients(x,y)))", "all x y z.((Erosion(x) & Soil(y) & Nutrients(z)) -> DecreasesAmount(x,y,z))", "exists x.(Erosion(x) & DecreasesNutrients(x))", "exists x.(Erosion(x) & DecreasesNutrients(x,Soil))", "all x y.((Erosion(x) & Soil(y)) -> DecreasesNutrients(x,y))", "exists x.(Erosion(x) & DecreasesNutrients(x))", "exists x.(Erosion(x) & DecreasesNutrientsInSoil(x))"]}
{"id": "entailmentbank_validation_218", "nl": "rain can decrease the amount of nutrients in soil.", "fol": "", "prediction": ["all x y.((Rain(x) & Soil(y)) -> DecreasesNutrients(x,y))", "all x.(Rain(x) -> DecreasesNutrientsInSoil(x))", "all x y z.((Rain(x) & Soil(y) & Nutrients(z)) -> Decreases(x,y,z))", "all x y.((Rain(x) & Soil(y)) -> DecreasesNutrients(x,y))", "(DecreasesNutrientsInSoil(Rain))", "all x.(Rain(x) -> DecreasesNutrients(x))", "all x y z.((Rain(x) & Nutrients(y) & Soil(z)) -> DecreasesAmount(x,y,z))", "all x y.((Rain(x) & Soil(y)) -> CanDecreaseNutrients(x,y))", "all x.(Rain(x) -> CanDecreaseNutrients(x))", "(DecreasesNutrientsInSoil(Rain))", "all x.(Rain(x) -> (DecreasesNutrients(x) & InSoil(x)))", "all x.(Rain(x) -> DecreasesNutrientsInSoil(x))", "all x y.((Rain(x) & Soil(y)) -> DecreasesNutrients(x,y))", "all x y.((Rain(x) & Soil(y)) -> CanDecreaseNutrients(x,y))", "all x.(Rain(x) -> CanDecreaseNutrientsInSoil(x))", "all x.(Rain(x) -> DecreasesNutrientsInSoil(x))"]}
{"id": "entailmentbank_validation_219", "nl": "as the availability of water decreases, the environment will become more dry.", "fol": "", "prediction": ["all x.((WaterAvailabilityDecreases(x) & EnvironmentDecreases(x)) -> MoreDry(x))", "all x y.((WaterAvailability(x) & Environment(y)) -> Decreases(x,y))", "all x.(DecreasedWaterAvailability(x) -> EnvironmentMoreDry(x))", "as availabilityofwaterDecreases, the environment will become moredry.", "as availability of water decreases, the environment will become more dry.", "(DecreasesWaterAvailability(Water) -> EnvironmentDecreasesDry(Water))", "all x.((WaterAvailabilityDecreases(x) & EnvironmentDecreases(x)) -> MoreDry(x))", "all x y.((WaterAvailability(x) & Environment(y) & Decreases(x,y)) -> MoreDry(y))", "(DecreasesAvailabilityOfWater(x) -> EnvironmentDecreasesDry(x))", "all x.(DecreasesAvailabilityOfWater(x) -> EnvironmentDecreasesDry(x))", "-DecreasesWaterAvailability(-) -> EnvironmentDecreasesDry(-)", "as availabilityofwaterDecreases,theenvironment becomesmoredry.", "all x.((AvailabilityOfWater(x) & Decreases(x)) -> EnvironmentDecreases(x))", "all x.((WaterAvailabilityDecreases(x) & EnvironmentDecreased(x)) -> MoreDry(x))", "all x y.((WaterAvailabilityDecrease(x) & Environment(y)) -> MoreDry(y))", "all x y.((WaterAvailability(x) & Environment(y)) -> Decreases(x,y))"]}
{"id": "entailmentbank_validation_220", "nl": "drought is when available water decreases in an environment.", "fol": "", "prediction": ["all x y.((Drought(x) & Environment(y)) -> DecreasesWater(x,y))", "all x.(Drought(x) -> (DecreasesWater(x) & Environment(x)))", "all x.(Drought(x) -> DecreasesWaterAvailability(x))", "all x y z.((Drought(x) & Water(y) & Environment(z) & Available(y,z)) -> Decreases(x,y,z))", "(DecreasesWater(drought) & Environment(drought))", "all x y.((Drought(x) & Environment(y)) -> DecreasesWater(x,y))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecrease(x,y)) -> Decrease(x,y))", "all x.(Drought(x) -> (DecreasedWater(x) & Environment(x)))", "all x y z.((Drought(x) & Water(y) & Environment(z) & Decreases(y,z)) -> AvailableInEnvironment(x,y))", "all x.(Drought(x) -> (DecreasesWater(x) & Environment(x)))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecrease(x,y)) -> Decrease(x,y))", "all x.(Drought(x) -> DecreasesWaterAvailabilityInEnvironment(x))", "all x.(Drought(x) -> DecreasesWaterAvailabilityInEnvironment(x))", "all x y.((Drought(x) & Environment(y)) -> AvailableWaterDecreases(x,y))", "all x.(Drought(x) -> (DecreasesWaterAvailability(x) & Environment(x)))", "exists x.(Drought(x) & WaterDecrease(x) & Environment(x))"]}
{"id": "entailmentbank_validation_221", "nl": "drought causes the environment to be dry.", "fol": "", "prediction": ["all x.(Drought(x) -> EnvironmentDry(x))", "all x y.((Drought(x) & Environment(y)) -> CausesDry(x,y))", "(CausesEnvironmentToBeDry(drought)", "all x.(Drought(x) -> EnvironmentDry(x))", "all x.(Drought(x) -> CausesEnvironmentToBeDry(x))", "(DroughtCausesEnvironmentToBeDry(drought,drought))", "all x y z.((Drought(x) & Environment(y) & Environment(z)) -> CausesDry(x,y,z))", "all x y.((Drought(x) & Environment(y)) -> CausesDry(x,y))", "all x.(Drought(x) -> CausesEnvironmentToBeDry(x))", "all x y.((Drought(x) & Environment(y)) -> CausesDry(x,y))", "all x.(Drought(x) -> EnvironmentDry(x))", "all x y.((Drought(x) & Environment(y)) -> CausesDry(x,y))", "all x.(Drought(x) -> CausesEnvironmentToBeDry(x))", "all x.(Drought(x) -> EnvironmentDry(x))", "all x y.((Drought(x) & Environment(y)) -> CausesDry(x,y))", "all x.(Drought(x) -> EnvironmentDry(x))"]}
{"id": "entailmentbank_validation_222", "nl": "dry conditions can cause fire.", "fol": "", "prediction": ["all x.(DryConditions(x) -> CanCauseFire(x))", "all x.((DryConditions(x) & CausesFire(x)) -> CanCauseFire(x))", "all x.(DryConditions(x) -> CausesFire(x))", "(DryConditions(d) & CausesFire(d))", "(dryConditions(d) & CausesFire(d))", "all x y.((DryCondition(x) & DryCondition(y)) -> CausesFire(x,y))", "all x y.((DryCondition(x) & Fire(y)) -> CanCause(x,y))", "all x.((DryConditions(x) & CanCauseFire(x)) -> CanCauseFire(x))", "all x.(DryConditions(x) -> CanCauseFire(x))", "dryConditionsCanCauseFire(x)", "(DryConditions(x) -> CausesFire(x))", "all x.(DryCondition(x) -> CanCauseFire(x))", "all x y.((DryCondition(x) & DryCondition(y)) -> CanCauseFire(x,y))", "dryConditionsCausesFire(x)", "all x.(DryCondition(x) -> CausesFire(x))", "all x.(DryConditions(x) -> CausesFire(x))"]}
{"id": "entailmentbank_validation_223", "nl": "drought may cause wildfires.", "fol": "", "prediction": ["all x.(Drought(x) -> MayCauseWildfires(x))", "all x y.((Drought(x) & Wildfire(y)) -> MayCause(x,y))", "(CausesWildfires(drought) & Drought(d))", "all x.(Drought(x) -> MayCauseWildfires(x))", "(all x.(Drought(x) -> MayCauseWildfires(x)))", "all x y.((Drought(x) & Wildfire(y)) -> MayCause(x,y))", "all x.(Drought(x) -> MayCauseWildfires(x))", "(all x.(Drought(x) -> MayCauseWildfires(x)))", "(all x.(Drought(x) -> Wildfire(x)))", "all x y.((Drought(x) & Wildfire(y)) -> MayCause(x,y))", "all x.(Drought(x) -> (MayCauseWildfires(x)))", "all x.(Drought(x) -> MayCauseWildfires(x))", "all x y.((Drought(x) & Wildfire(y)) -> MayCause(x,y))", "all x.(Drought(x) -> MayCauseWildfires(x))", "all x.(Drought(x) -> MayCauseWildfire(x))", "all x.(Drought(x) -> (MayCauseWildfires(x)))"]}
{"id": "entailmentbank_validation_224", "nl": "a prairie is a kind of ecosystem.", "fol": "", "prediction": ["all x.(Prairie(x) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "all x y.((Prairie(x) & Ecosystem(y)) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "all x y.((Prairie(x) & Ecosystem(y)) -> Is(x,y))", "all x y.((Prairie(x) & Ecosystem(y)) -> SpeciesOf(x,y))", "all x.(Prairie(x) -> Ecosystem(x))", "all x.(Primary(x) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "exists x.(Presbytery(x) & Ecosystem(x))", "all x y.((Prairie(x) & Ecosystem(y)) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "all x.(Primary(x) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "exists x.(Prairie(x) & Ecosystem(x))", "exists x.(Primary(x) & Ecosystem(x))"]}
{"id": "entailmentbank_validation_225", "nl": "drought may cause wildfires to a prairie.", "fol": "", "prediction": ["all x y.((Drought(x) & Prairie(y)) -> MayCauseWildfires(x,y))", "all x.(Drought(x) -> (CausesWildfires(x) & ToPrairie(x)))", "all x y z.((Drought(x) & Prairie(y) & Wildfire(z)) -> MayCause(x,y,z))", "all x.(Drought(x) -> MayCauseWildfiresToPrairie(x))", "all x y.((Drought(x) & Prairie(y)) -> MayCauseWildfires(x,y))", "(all x.(Drought(x) -> MayCauseWildfires(x,Prairie)))", "(all x y.((Drought(x) & Prairie(y)) -> CausesWildfires(x,y)))", "all x y.((Drought(x) & Prairie(y)) -> (CanCauseWildfires(x,y) & CanCauseWildfires(x,y)))", "all x y z.((Drought(x) & Prairie(y) & Wildfire(z)) -> MayCause(x,y,z))", "(all x.(Drought(x) -> Wildfire(x)))", "all x.(Drought(x) -> (CausesWildfires(x) & ToPrairie(x)))", "all x y.((Drought(x) & Prairie(y)) -> MayCauseWildfires(x,y))", "all x.(Drought(x) -> MayCauseWildfires(x))", "all x.(Drought(x) -> (CanCauseWildfires(x) & Prairie(x)))", "all x y.((Drought(x) & Prairie(y)) -> CausesWildfires(x,y))", "all x.(Drought(x) -> MayCauseWildfiresToPrairie(x))"]}
{"id": "entailmentbank_validation_226", "nl": "a barometer is a kind of instrument.", "fol": "", "prediction": ["all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "all x y.(Barometer(x) -> Instrument(y))", "all x.(Barometer(x) -> Instrument(x))", "all x y.(Barometer(x) -> Instrument(y))", "all x.(Barometer(x) -> Instrument(x))", "all x y.(Barometer(x) -> Instrument(y))", "all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "exists x.(Barometer(x) & Instrument(y) & UsedFor(x,y))", "all x.(Barometer(x) -> Instrument(x))", "all x y.(Barometer(x) & Instrument(y))", "all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "exists x.(Barometer(x) & Instrument(x))"]}
{"id": "entailmentbank_validation_227", "nl": "a barometer is used to measure air pressure.", "fol": "", "prediction": ["all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x y.((Barometer(x) & AirPressure(y)) -> Measures(x,y))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x y z.((Barometer(x) & AirPressure(y) & AirPressure(z)) -> Measures(x,y,z))", "all x y.((Barometer(x) & AirPressure(y)) -> Measures(x,y))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x y z.((Barometer(x) & AirPressure(y) & AirPressure(z)) -> Measures(x,y,z))", "all x.(Barometer(x) -> UsedToMeasureAirPressure(x))", "all x y.((Barometer(x) & AirPressure(y)) -> Measures(x,y))", "all x y.((Barometer(x) & AirPressure(y)) -> UsedToMeasure(x,y))", "all x y.(Barometer(x) -> MeasuresAirPressure(x,y))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "exists x.(Barometer(x) & UsedToMeasureAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "exists x.(Barometer(x) & MeasuresAirPressure(x))", "exists x.(Barometer(x) & MeasuresAirPressure(x))"]}
{"id": "entailmentbank_validation_228", "nl": "a barometer is an instrument used to measure air pressure.", "fol": "", "prediction": ["all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x y.((Barometer(x) & AirPressure(y)) -> Measures(x,y))", "all x y.(Barometer(x) -> MeasuresAirPressure(x,y))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x y.(Barometer(x) -> MeasuresAirPressure(x,y))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x y.(Barometer(x) -> MeasuresAirPressure(x,y))", "all x y.(Barometer(x) -> (Instrument(y) & MeasuresAirPressure(x,y)))", "all x.(Barometer(x) -> (MeasuresAirPressure(x) & MeasuresAirPressure(x)))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "exists x.(Barometer(x) & Instrument(x) & MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))"]}
{"id": "entailmentbank_validation_229", "nl": "a property is a kind of information.", "fol": "", "prediction": ["all x.(Property(x) -> Information(x))", "all x.(Property(x) -> Information(x))", "all x y.((Property(x) & Information(y)) -> Information(x))", "all x.((Property(x) & Information(x)) -> Information(x))", "all x.(Property(x) -> Information(x))", "all x y.((Property(x) & Information(y)) -> Information(x))", "all x.(Property(x) -> Information(x))", "all x y.((Property(x) & Information(y)) -> Information(x,y))", "all x.(Property(x) -> Information(x))", "all x y.((Property(x) & Information(y)) -> Information(x))", "all x.(Property(x) -> Information(x))", "all x.(Property(x) -> Information(x))", "exists x.(Property(x) & Information(x))", "exists x.(Property(x) & Information(x))", "exists x.(Property(x) & Information(x))", "exists x.(Property(x) & Information(x))"]}
{"id": "entailmentbank_validation_230", "nl": "temperature is a property of weather.", "fol": "", "prediction": ["all x.(Temperature(x) -> WeatherProperty(x))", "(PropertyOfWeather(Temperature))", "all x y.((Temperature(x) & Weather(y)) -> PropertyOf(x,y))", "all x.(Temperature(x) -> WeatherProperty(x))", "(PropertyOfWeather(Temperature))", "all x.(Temperature(x) -> WeatherProperty(x))", "all x y.((Temperature(x) & Weather(y)) -> PropertyOf(x,y))", "all x y.((Temperature(x) & Weather(y) & Property(x,y)) -> PropertyOf(x,y))", "(PropertyOfWeather(Temperature))", "all x.(Temperature(x) -> WeatherProperty(x))", "all x y.((Temperature(x) & Weather(y)) -> PropertyOf(x,y))", "all x.(Temperature(x) -> PropertyOfWeather(x))", "all x.(Temperature(x) -> WeatherProperty(x))", "exists x.(Temperature(x) & Weather(x))", "all x.(Temperature(x) -> WeatherProperty(x))", "exists x.(Temperature(x) & Weather(x))"]}
{"id": "entailmentbank_validation_231", "nl": "temperature is a kindof information about weather.", "fol": "", "prediction": ["all x.(Temperature(x) -> WeatherInformation(x))", "all x y.((Temperature(x) & Weather(y)) -> InformationAbout(x,y))", "all x.(Temperature(x) -> WeatherInformation(x))", "(all x.(Temperature(x) -> WeatherInformation(x)))", "all x.(Temperature(x) -> InformationAboutWeather(x))", "all x.(Temperature(x) -> WeatherInformation(x))", "all x y.((Temperature(x) & Weather(y)) -> InformationAbout(x,y))", "(all x.(Temperature(x) -> WeatherInformation(x)))", "all x y.((Temperature(x) & Weather(y)) -> InformationAbout(x,y))", "all x.(Temperature(x) -> InformationAboutWeather(x))", "all x.(Temperature(x) -> WeatherInformation(x))", "all x y.((Temperature(x) & Weather(y)) -> InformationAbout(x,y))", "all x.(Temperature(x) -> WeatherInformation(x))", "all x.(Temperature(x) -> WeatherInformation(x))", "exists x.(Temperature(x) & Weather(x))", "exists x.(Temperature(x) & InformationAboutWeather(x))"]}
{"id": "entailmentbank_validation_232", "nl": "a thermometer is used to measure temperature.", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x y.((Thermometer(x) & Temperature(y)) -> Measures(x,y))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x y.((Thermometer(x) & Temperature(y)) -> Measures(x,y))", "all x.(Thermometer(x) -> UsedToMeasureTemperature(x))", "all x y z.((Thermometer(x) & Temperature(y) & Temperature(z)) -> Measures(x,y,z))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x y.((Thermometer(x) & Temperature(y) & Measures(x,y)) -> UsedToMeasure(x,y))", "all x y.((Thermometer(x) & TemperatureMeasurement(y)) -> UsedToMeasure(x,y))", "all x y.((Thermometer(x) & Temperature(y)) -> Measures(x,y))", "all x.(Thermometer(x) -> UsedToMeasureTemperature(x))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "exists x.(Thermometer(x) & MeasuresTemperature(x))", "exists x.(Thermometer(x) & MeasuresTemperature(x))", "exists x.(Thermometer(x) & MeasuresTemperature(x))", "exists x.(Thermometer(x) & MeasuresTemperature(x))"]}
{"id": "entailmentbank_validation_233", "nl": "a thermometer is used to measure the information about weather on temperature.", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresWeatherInformation(x))", "all x y.((Thermometer(x) & WeatherInformation(y)) -> MeasuresOnTemperature(x,y))", "all x y z.((Thermometer(x) & WeatherInformation(y) & Temperature(z)) -> MeasuresOn(x,y,z))", "all x.(Thermometer(x) -> MeasuresWeatherInformationOnTemperature(x))", "all x y.((Thermometer(x) & Weather(y)) -> MeasuresInformationOnTemperature(x,y))", "all x y z.((Thermometer(x) & WeatherInformation(y) & Temperature(z)) -> Measures(x,y,z))", "all x y.((Thermometer(x) & WeatherInformation(y)) -> MeasuresOnTemperature(x,y))", "all x.(Thermometer(x) -> MeasuresWeatherInformation(x))", "all x y z.(Thermometer(x) -> MeasuresWeatherInformationOnTemperature(x,y,z))", "all x y.((Thermometer(x) & Weather(y)) -> MeasuresInformation(x,y))", "all x.(Thermometer(x) -> MeasuresWeatherInformationOnTemperature(x))", "all x y.((Thermometer(x) & WeatherInfo(y)) -> MeasuresOnTemperature(x,y))", "all x.(Thermometer(x) -> MeasuresInformationOnWeather(x))", "all x.(Thermometer(x) -> MeasuresWeatherInfoOnTemperature(x))", "exists x.(Thermometer(x) & MeasuresInformationAboutWeather(x))", "exists x.(Thermometer(x) & MeasuresWeatherInformation(x))"]}
{"id": "entailmentbank_validation_234", "nl": "wind direction is a property of weather.", "fol": "", "prediction": ["all x.(WindDirection(x) -> WeatherProperty(x))", "all x y.((WindDirection(x) & Weather(y)) -> PropertyOf(x,y))", "all x.(WindDirection(x) -> WeatherProperty(x))", "(PropertyOfWeather(windDirection))", "(WeatherProperty(windDirection) & WeatherProperty(windDirection))", "all x y.((WindDirection(x) & Weather(y)) -> PropertyOf(x,y))", "all x.(WindDirection(x) -> WeatherProperty(x))", "(PropertyOfWeather(windDirection))", "all x y.((WindDirection(x) & Weather(y) & Property(x,y)) -> PropertyOf(x,y))", "all x y.((WindDirection(x) & Weather(y)) -> PropertyOf(x,y))", "all x.(WindDirection(x) -> WeatherProperty(x))", "all x.(WindDirection(x) -> PropertyOfWeather(x))", "all x.(WindDirection(x) -> WeatherProperty(x))", "all x.(WindDirection(x) -> WeatherProperty(x))", "all x.(WindDirection(x) -> WeatherProperty(x))", "all x.(WindDirection(x) -> PropertyOfWeather(x))"]}
{"id": "entailmentbank_validation_235", "nl": "wind direction is a kind of information about weather.", "fol": "", "prediction": ["all x.(WindDirection(x) -> WeatherInformation(x))", "all x y.((WindDirection(x) & Weather(y)) -> InformationAbout(x,y))", "all x.(WindDirection(x) -> InformationAboutWeather(x))", "all x y.((WindDirection(x) & Weather(y)) -> InformationAbout(x,y))", "all x.(WindDirection(x) -> WeatherInformation(x))", "(InformationAboutWeather(windDirection))", "all x.(WindDirection(x) -> InformationAboutWeather(x))", "all x y.((WindDirection(x) & Weather(y)) -> InformationAbout(x,y))", "(InformationAboutWeather(windDirection))", "all x.(WoodDirection(x) -> WeatherInformation(x))", "all x y.((WindDirection(x) & Weather(y)) -> Information(x,y))", "all x.(WindDirection(x) -> WeatherInformation(x))", "all x.(WindDirection(x) -> InformationAboutWeather(x))", "all x.(WindDirection(x) -> InformationAboutWeather(x))", "all x y.((WindDirection(x) & Weather(y)) -> InformationAbout(x,y))", "all x.(WindDistance(x) -> WeatherInformation(x))"]}
{"id": "entailmentbank_validation_236", "nl": "a station model is used for displaying information about weather in a particular point and time.", "fol": "", "prediction": ["all x y.((StationModel(x) & PointAndTime(y)) -> DisplaysWeatherInformation(x,y))", "all x.(StationModel(x) -> DisplaysWeatherInformation(x))", "all x y z.((StationModel(x) & Information(y) & PointAndTime(z)) -> DisplaysInformation(x,y,z))", "all x y.((StationModel(x) & PointAndTime(y)) -> DisplaysInformationAboutWeather(x,y))", "all x.((StationModel(x) & WeatherInSpecificPointAndTime(x)) -> DisplaysInformation(x))", "all x.(StationModel(x) -> DisplaysInformationAboutWeather(x))", "all x y.((StationModel(x) & WeatherInformation(y) & InPointAndTime(x,y)) -> DisplaysInformation(x,y))", "all x.((StationModel(x) & DisplaysWeatherInformation(x,point,time)) -> UsedFor(x,weatherInformation))", "all x y z.((StationModel(x) & Information(y) & PointAndTime(z)) -> DisplaysInformationAboutWeather(x,y,z))", "all x y z.((StationModel(x) & WeatherInformation(y) & PointAndTime(z)) -> DisplaysInformation(x,y,z))", "all x.(StationModel(x) -> DisplaysWeatherInformation(x,point,time))", "all x y.((StationModel(x) & Information(y)) -> DisplaysInformationAboutWeather(x,y))", "exists x.(StationModel(x) & DisplaysInformationAboutWeather(x) & InSpecificPointAndTime(x))", "all x.(StationModel(x) -> DisplaysWeatherInformation(x))", "all x y.((StationModel(x) & PointAndTime(y)) -> DisplaysWeatherInformation(x,y))", "exists x.(StationModel(x) & DisplaysWeatherInformation(x,point,time))"]}
{"id": "entailmentbank_validation_237", "nl": "wind direction in a particular point and time is displayed in a station model.", "fol": "", "prediction": ["all x y.((WindDirection(x) & Point(y) & Time(y)) -> DisplayedInStationModel(x,y))", "all x y z.((WindDirection(x) & PointAndTime(y) & StationModel(z)) -> DisplayedIn(x,y,z))", "all x.((WindDirection(x) & PointAndTime(x)) -> DisplayedInStationModel(x))", "all x y.((WindDirection(x) & PointAndTime(y)) -> DisplayedInStationModel(x,y))", "all x y z.((WindDirection(x) & Point(y) & Time(z) & StationModel(x)) -> DisplayedIn(x,y,z))", "all x.((WindDirection(x) & Point(x) & Time(x)) -> DisplayedInStationModel(x))", "all x y.((WindDirection(x) & StationModel(y)) -> DisplayedIn(x,y))", "(DisplaysWindDirectionInStationModel(x) & InPointAndTime(x))", "all x.((WindDirection(x) & PointAndTime(x)) -> DisplayedInStationModel(x))", "all x y.((StationModel(x) & WindDirection(y) & PointAndTime(y)) -> DisplayedIn(x,y))", "all x y z.((WindDirection(x) & PointAndTime(y) & StationModel(z)) -> DisplayedIn(x,y,z))", "all x.((WindDirection(x) & ParticularPoint(x) & ParticularTime(x)) -> DisplayedInStationModel(x))", "all x.(WindDirection(x) -> DisplayedInStationModel(x))", "all x y.((WindDirection(x) & PointAndTime(y)) -> DisplayedInStationModel(x,y))", "all x.((WindDirection(x) & InPointAndTime(x)) -> DisplayedInStationModel(x))", "all x y z.((WindDirection(x) & PointAndTime(y) & StationModel(z)) -> DisplayedIn(x,y,z))"]}
{"id": "entailmentbank_validation_238", "nl": "sleet is a kind of precipitation.", "fol": "", "prediction": ["all x.(Sleet(x) -> Precipitation(x))", "all x y.((Sleet(x) & Precipitation(y)) -> Precipitation(x,y))", "all x.(Sleet(x) -> Precipitation(x))", "all x y.((Sleet(x) & Precipitation(y)) -> Precipitation(x,y))", "all x.(Sleet(x) -> Precipitation(x))", "all x y.((Sleet(x) & Precipitation(y)) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))", "all x y.((Sleet(x) & Precipitation(y)) -> Precipitation(x,y))", "all x.(Sleet(x) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))", "all x y.((Sleet(x) & Precipitation(y)) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))", "exists x.(Sleet(x) & Precipitation(x))", "exists x.(Sleet(x) & Precipitation(x))"]}
{"id": "entailmentbank_validation_239", "nl": "hail is a kind of precipitation.", "fol": "", "prediction": ["all x.(Hail(x) -> Precipitation(x))", "all x y.((Hail(x) & Precipitation(y)) -> Precipitation(x,y))", "all x.(Hail(x) -> Precipitation(x))", "hail is a kind of precipitation.", "(Precipitation(hail)", "all x y.((Hail(x) & Precipitation(y)) -> Precipitation(x,y))", "all x.(Hail(x) -> Precipitation(x))", "(Precipitation(Hail) & -Precipitation(Hail))", "all x.(Hail(x) -> Precipitation(x))", "all x y.((Hail(x) & Precipitation(y)) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "exists x.(Hall(x) & Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))"]}
{"id": "entailmentbank_validation_240", "nl": "hail and sleet are different kinds of precipitation.", "fol": "", "prediction": ["all x.((Hail(x) | Sleet(x)) -> Precipitation(x))", "(all x.(Hail(x) -> DifferentPrecipitation(x)) & all y.(Sleet(y) -> DifferentPrecipitation(y)))", "all x.(Hail(x) | Sleet(x)) -> Precipitation(x))", "all x y.((Hail(x) & Sleet(y)) -> Precipitation(x,y))", "(DifferentPrecipitation(Hail) & DifferentPrecipitation(Sleet))", "(all x.(Hail(x) -> Precipitation(x)) & all y.(Sleet(y) -> Precipitation(y)))", "((Hail(h) | Sleet(h))) -> Precipitation(h))", "(all x.(Hail(x) -> DifferentTypesOfPrecipitation(x)) & all y.(Sleet(y) -> DifferentTypesOfPrecipitation(y)))", "all x.(Hail(x) | Sleet(x))", "all x y.((Hail(x) & Sleet(y)) -> Precipitation(x))", "(DifferentPrecipitation(Hail) & DifferentPrecipitation(Sleet))", "all x.(Hail(x) & Sleet(x)) -> Precipitation(x))", "all x y.((Hail(x) & Sleet(y)) -> Precipitation(x,y))", "all x.(Hail(x) | Sleet(x))", "exists x.(Hail(x) & Sleet(x))", "exists x.(Hail(x) & Sleet(x))"]}
{"id": "entailmentbank_validation_241", "nl": "when one kind of energy changes into another kind of energy, the total amount of energy is constant.", "fol": "", "prediction": ["all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> TotalAmountOfEnergyConstant(x))", "all x.((Energy(x) & ChangesIntoEnergy(x)) -> TotalAmountOfEnergyConstant(x))", "all x y z.((Energy(x) & Energy(y) & Energy(z) & ChangesInto(x,y,z)) -> TotalAmountOfEnergyConstant(x))", "(all x.((Energy(x) & ChangesIntoEnergy(x)) -> TotalAmountOfEnergyConstant(x)))", "all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> TotalAmountOfEnergyConstant(x))", "all x.((Energy(x) & ChangesIntoEnergy(x)) -> TotalAmountOfEnergyConstant(x))", "all x.((Energy(x) & Energy(x) & ChangesInto(x,y)) -> TotalAmountOfEnergyConstant(x))", "all x y z.((Energy(x) & Energy(y) & Energy(z)) -> ChangesInto(x,y,z))", "exists x.(Energy(x) & ChangesIntoEnergy(x) & TotalAmountOfEnergyConstant(x))", "all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> TotalAmountConstant(x))", "all x y z.((Energy(x) & Energy(y) & Energy(z) & ChangesInto(x,y,z)) -> TotalAmountOfEnergyConstant(x,y,z))", "all x.((Energy(x) & ChangesIntoEnergy(x)) -> TotalAmountOfEnergyConstant(x))", "all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> Constant(x))", "all x.((Energy(x) & ChangesIntoEnergy(x)) -> TotalEnergyConstant(x))", "all x.((Energy(x) & Energy(x) & ChangesInto(x,y)) -> TotalAmountConstant(x))", "all x y.((Energy(x) & Energy(y)) -> ChangesInto(x,y))"]}
{"id": "entailmentbank_validation_242", "nl": "energy transformation means one kind of energy changes into another kind of energy.", "fol": "", "prediction": ["all x y.((EnergyTransformation(x) & Energy(y)) -> ChangesInto(x,y))", "all x y z.((EnergyTransformation(x) & Energy(y) & Energy(z)) -> ChangesInto(x,y,z))", "all x.(EnergyTransformation(x) -> (EnergyChange(x) & EnergyChange(x)))", "all x y.((EnergyTransformation(x) & Energy(y)) -> ChangesInto(x,y))", "all x y z.((EnergyTransformation(x) & Energy(y) & Energy(z)) -> (ChangesInto(x,y,z) & ChangesInto(x,y,z)))", "(all x.(EnergyTransformation(x) -> ChangesIntoEnergy(x)))", "all x.((EnergyTransformation(x) & Energy(y)) -> ChangesInto(x,y))", "all x.(EnergyTransformation(x) -> (EnergyChange(x) & EnergyChange(x)))", "all x.(EnergyTransformation(x) -> ChangesIntoAnotherEnergy(x))", "all x y.((EnergyTransformation(x) & Energy(y)) -> ChangesInto(x,y))", "all x y.((EnergyTransformation(x) & Energy(y)) -> (ChangesInto(x,y) | ChangesInto(x,y)))", "all x y z.((EnergyTransformation(x) & Energy(y) & Energy(z)) -> ChangesInto(x,y,z))", "all x.(EnergyTransformation(x) -> (EnergyChange(x) & EnergyChange(x) & EnergyChange(x)))", "all x y z.((EnergyTransformation(x) & Energy(y) & Energy(z)) -> (Changes(x,y,z) & Changes(y,z)))", "exists x.(EnergyTransformation(x) & Energy(x) & Energy(x))", "all x y.((EnergyTransformation(x) & Energy(y)) -> ChangesInto(x,y))"]}
{"id": "entailmentbank_validation_243", "nl": "when energy transformation happens, the total amount of energy is constant.", "fol": "", "prediction": ["all x.((EnergyTransformation(x) & EnergyAmountConstant(x)) -> EnergyTransformation(x))", "all x.(EnergyTransformation(x) -> TotalEnergyConstant(x))", "all x y.((EnergyTransformation(x) & Energy(y)) -> TotalAmountConstant(x,y))", "all x.((EnergyTransformation(x) & TotalEnergy(x)) -> Constant(x))", "all x.(EnergyTransformation(x) -> TotalAmountOfEnergyConstant(x))", "all x y z.((EnergyTransformation(x) & Energy(y) & Energy(z)) -> TotalAmountConstant(x,y,z))", "all x y.((EnergyTransformation(x) & Energy(y)) -> TotalAmountConstant(x,y))", "all x.((EnergyTransformation(x) & Happens(x)) -> TotalEnergyConstant(x))", "all x.(EnergyTransformation(x) -> TotalEnergyConstant(x))", "all x y.((EnergyTransformation(x) & Energy(y)) -> TotalAmountConstant(x,y))", "all x.((EnergyTransformation(x) & EnergyConstant(x)) -> EnergyTransformation(x))", "(all x.(EnergyTransformation(x) -> Constant(x)))", "all x y.((EnergyTransformation(x) & EnergyTransformation(y)) -> TotalAmountConstant(x,y))", "all x y.((EnergyTransformation(x) & Energy(y)) -> Constant(x,y))", "all x.(EnergyTransformation(x) -> TotalAmountOfEnergyConstant(x))", "exists x.(EnergyTransformation(x) & Energy(x) & Constant(x))"]}
{"id": "entailmentbank_validation_244", "nl": "energy transformation means energy conversion.", "fol": "", "prediction": ["all x.(EnergyTransformation(x) -> EnergyConversion(x))", "all x y.((EnergyTransformation(x) & EnergyConversion(y)) -> Means(x,y))", "all x.(EnergyTransformation(x) -> EnergyConversion(x))", "(EnergyTransformation(e) -> EnergyConversion(e))", "all x.((EnergyTransformation(x) & EnergyConversion(x)) -> EnergyTransformation(x))", "all x y.((EnergyTransformation(x) & EnergyConversion(y)) -> Means(x,y))", "all x.(EnergyTransformation(x) -> MeansEnergyConversion(x))", "all x.(EnergyTransformation(x) -> EnergyConversion(x))", "(EnergyTransformation(e) -> EnergyConversion(e))", "all x y.((EnergyTransformation(x) & EnergyConversion(y)) -> EnergyTransformation(x,y))", "all x.((EnergyTransformation(x) & EnergyConversion(x)) -> Means(x,y))", "all x.(EnergyTransformation(x) -> MeansEnergyConversion(x))", "all x y.((EnergyTransformation(x) & EnergyConversion(y)) -> Means(x,y))", "all x.(EnergyTransformation(x) -> EnergyConversion(x))", "all x y.((EnergyTransformation(x) & EnergyConversion(y)) -> EnergyTransformation(x,y))", "all x.(EnergyTransformation(x) -> EnergyConversion(x))"]}
{"id": "entailmentbank_validation_245", "nl": "when energy conversion happens, the total amount of energy is constant.", "fol": "", "prediction": ["all x.((EnergyConversion(x) & Happens(x)) -> TotalEnergyConstant(x))", "all x y.((EnergyConversion(x) & EnergyConversion(y)) -> TotalAmountConstant(x,y))", "all x.(EnergyConversion(x) -> TotalAmountOfEnergyConstant(x))", "all x.((EnergyConversion(x) & EnergyConversion(x)) -> Constant(x))", "all x y.((EnergyConversion(x) & Energy(y)) -> TotalAmountConstant(x,y))", "all x.(EnergyConversion(x) -> TotalEnergyConstant(x))", "all x y z.((EnergyConversion(x) & EnergyConversion(y) & TotalAmountOfEnergy(z)) -> Constant(z))", "all x.((EnergyConversion(x) & TotalEnergy(x)) -> Constant(x))", "all x y.((EnergyConversion(x) & EnergyConversion(y)) -> TotalAmountConstant(x,y))", "all x.((EnergyConversion(x) & Happens(x)) -> TotalAmountOfEnergyConstant(x))", "all x.(EnergyConversion(x) -> TotalAmountOfEnergyConstant(x))", "all x y.((EnergyConversion(x) & Energy(y)) -> TotalAmountConstant(x,y))", "(all x.(EnergyConversion(x) -> Constant(x)))", "all x y.((EnergyConversion(x) & EnergyConversion(y)) -> TotalAmountConstant(x,y))", "exists x.(EnergyConversion(x) & Constant(x))", "all x.((EnergyConversion(x) & EnergyConversion(x)) -> Constant(x))"]}
{"id": "entailmentbank_validation_246", "nl": "solid is a kind of state of matter.", "fol": "", "prediction": ["all x.(Solid(x) -> StateOfMatter(x))", "all x.(Solid(x) -> StateOfMatter(x))", "all x y.((Solid(x) & StateOfMatter(y)) -> Is(x,y))", "all x y.((Solid(x) & StateOfMatter(y)) -> (StateOfMatter(x) & Solid(y)))", "all x.(StateOfMatter(x) -> Solid(x))", "all x.(Solid(x) -> StateOfMatter(x))", "all x.(StayOfMatter(x) -> Solid(x))", "all x y.(StateOfMatter(x) & Solid(y) & StateOfMatter(x,y))", "all x.(Solid(x) -> StateOfMatter(x))", "all x y.((Solid(x) & StateOfMatter(y)) -> Solid(x))", "all x.(StateOfMatter(x) -> Solid(x))", "all x.(Solid(x) -> StateOfMatter(x))", "all x.(Solid(x) -> StateOfMatter(x))", "exists x.(StateOfMatter(x) & Solid(x))", "exists x.(StateOfMatter(x) & Solid(x))", "exists x.(Solid(x) & StateOfMatter(x))"]}
{"id": "entailmentbank_validation_247", "nl": "heat energy can change the state of matter.", "fol": "", "prediction": ["all x.(HeatEnergy(x) -> ChangesStateOfMatter(x))", "(ChangesStateOfMatter(heatEnergy))", "all x.(HeatEnergy(x) -> ChangesStateOfMatter(x))", "all x y.((HeatEnergy(x) & StateOfMatter(y)) -> Changes(x,y))", "all x y.((HeatEnergy(x) & Matter(y)) -> ChangesState(x,y))", "all x.(HeatEnergy(x) -> CanChangeStateOfMatter(x))", "(ChangeStateOfMatter(heatEnergy))", "all x.((HeatEnergy(x) & ChangesStateOfMatter(x)) -> CanChange(x,Matter))", "all x y.((HeatEnergy(x) & StateOfMatter(y)) -> CanChange(x,y))", "all x.(HeatEnergy(x) -> ChangesStateOfMatter(x))", "all x y.((HeatEnergy(x) & Matter(y)) -> CanChange(x,y))", "all x.(HeatEnergy(x) -> CanChangeStateOfMatter(x))", "all x.(HeatEnergy(x) -> ChangeStateOfMatter(x))", "all x y.((HeatEnergy(x) & StateOfMatter(y)) -> Changes(x,y))", "all x.(HeatEnergy(x) -> CanChangeMatter(x))", "exists x.(HeatEnergy(x) & ChangesMatterState(x))"]}
{"id": "entailmentbank_validation_248", "nl": "liquid is a kind of state of matter.", "fol": "", "prediction": ["all x.(Liquid(x) -> StateOfMatter(x))", "all x y.((Liquid(x) & StateOfMatter(y)) -> Is(x,y))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x.((Liquid(x) & StateOfMatter(x)) -> Liquid(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x y.((Liquid(x) & StateOfMatter(y)) -> Is(x,y))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x y.((Liquid(x) & StateOfMatter(y)) -> Is(x,y))", "all x y.((Liquid(x) & StateOfMatter(y)) -> StateOfMatter(x,y))", "all x.(Liquid(x) -> StateOfMatter(x))", "exists x.(StateOfMatter(x) & Liquid(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "exists x.(Liquid(x) & StateOfMatter(x))", "exists x.(Liquid(x) & StateOfMatter(x))", "exists x.(Liquid(x) & StateOfMatter(x))"]}
{"id": "entailmentbank_validation_249", "nl": "heat can change a substance from a solid to liquid.", "fol": "", "prediction": ["all x y.((Substance(x) & Heat(y)) -> CanChangeFromSolidToLiquid(x,y))", "all x y z.((Substance(x) & Heat(y) & Solid(z) & Liquid(z)) -> CanChange(x,y,z))", "all x.(HeatChange(x) -> (Solid(x) | Liquid(x)))", "all x y.((Substance(x) & Heat(x) & Solid(y)) -> Liquid(x,y))", "(ChangesSolidToLiquid(heat))", "(all x.(Heat(x) -> ChangeSubstanceFromSolidToLiquid(x)))", "all x y.((Substance(x) & Heat(y)) -> CanChangeFromSolidToLiquid(x,y))", "all x y z.((Substance(x) & Heat(y) & Solid(z) & Liquid(z)) -> ChangesFromTo(x,y,z))", "all x.(HeatChange(x) -> (Solid(x) | Liquid(x)))", "all x.(HeatChangesSubstanceFromSolidToLiquid(x) -> CanChangeFromSolidToLiquid(x))", "all x.(HeatChange(x) -> (ChangesSolidToLiquid(x)))", "all x y z.((Heat(x) & Substance(y) & Solid(z) & Liquid(z)) -> CanChange(x,y,z))", "all x y.((Substance(x) & Heat(x) & Solid(y)) -> Liquid(x))", "all x.(HeatChange(x) -> ChangesSubstanceFromSolidToLiquid(x))", "all x.(Heat(x) -> CanChangeSubstanceFromSolidToLiquid(x))", "all x y.((Substance(x) & Heat(y)) -> ChangesFromSolidToLiquid(x,y))"]}
{"id": "entailmentbank_validation_250", "nl": "melting means a substance changes from a solid into a liquid by increasing heat energy.", "fol": "", "prediction": ["all x y.((Substance(x) & Solid(y) & Liquid(y)) -> ChangesByIncreasedHeatEnergy(x,y))", "all x.(Melting(x) -> (ChangesFromSolidToLiquid(x) & IncreasesHeatEnergy(x)))", "all x y z.((Substance(x) & Solid(y) & Liquid(z)) -> ChangesFromTo(x,y,z))", "all x y.((Substance(x) & Solid(y) & Liquid(y)) -> Changes(x,y))", "all x.(Melting(x) -> (ChangesFromSolidToLiquid(x) & IncreasesHeatEnergy(x)))", "all x y z.((Substance(x) & Solid(y) & Liquid(z)) -> ChangesByIncreasedHeatEnergy(x,y,z))", "all x y.((Substance(x) & Solid(y)) -> ChangesToLiquid(x,y))", "all x y z.(Melting(x) -> (Substance(y) & Solid(z) & ChangesToLiquid(y,z,x) & IncreasesHeatEnergy(y,z)))", "all x y z.(Melting(x) -> (ChangesFromSolidToLiquid(x,y,z) & IncreasesHeatEnergy(x)))", "all x.(Melting(x) -> (ChangesFromSolidToLiquid(x) & IncreasesHeatEnergy(x)))", "all x.((Substance(x) & Melting(x)) -> ChangesFromSolidToLiquid(x))", "all x.(Melting(x) -> (ChangesFromSolidToLiquid(x) & IncreasesHeatEnergy(x)))", "all x y.((Substance(x) & Solid(y) & Liquid(z)) -> ChangesFromTo(x,y,z))", "all x.(Melting(x) -> ChangesFromSolidToLiquidByIncreasedHeatEnergy(x))", "all x.(Melting(x) -> (ChangesFromSolidIntoLiquid(x) & IncreasesHeatEnergy(x)))", "all x y.((Substance(x) & Solid(y)) -> ChangesToLiquid(x,y))"]}
{"id": "entailmentbank_validation_251", "nl": "heat can cause a solid substance to melt.", "fol": "", "prediction": ["all x y.((SolidSubstance(x) & Heat(y)) -> Melts(x,y))", "all x.((SolidSubstance(x) & Heat(x)) -> Melts(x))", "all x y.((SolidSubstance(x) & Heat(y)) -> Melts(x,y))", "all x.(Heat(x) -> CanCauseSolidSubstanceToMelt(x))", "all x y.((StandardSubstance(x) & Heat(y)) -> Melts(x,y))", "all x.((SolidSubstance(x) & Heat(x)) -> Melts(x))", "all x y z.((SolidSubstance(x) & Heat(y) & Heat(z) & CausesToMelt(x,y,z)) -> Melt(x,y,z))", "(MeltsSolidSubstance(heat) -> CausesSolidSubstance(heat))", "all x.((Heat(x) & SolidSubstance(y)) -> Melt(x,y))", "all x.(Heat(x) -> CausesSolidSubstanceToMelt(x))", "all x y.((SolidSubstance(x) & Heat(y)) -> Melt(x,y))", "exists x.(SolidSubstance(x) & Heat(x) & CausesMelting(x))", "all x y.((StickSubstance(x) & Heat(y)) -> Melts(x,y))", "all x y.((SolidSubstance(x) & Heat(y)) -> CanMelt(x,y))", "exists x.(SolidSubstance(x) & Heat(x) & CausesMelting(x))", "all x.((SolidSubstance(x) & Heat(x)) -> Melts(x))"]}
{"id": "entailmentbank_validation_252", "nl": "ice is a kind of solid.", "fol": "", "prediction": ["all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x y.((Ice(x) & Solid(y)) -> Is(x,y))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x y.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x y.(Ice(x) -> Solid(y))", "all x.(Ice(x) -> Solid(x))", "all x y.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "exists x.(Ice(x) & Solid(x))", "exists x.(Ice(x) & Solid(x))", "exists x.(Ice(x) & Solid(x))"]}
{"id": "entailmentbank_validation_253", "nl": "heat can cause ice to melt.", "fol": "", "prediction": ["all x.(Heat(x) -> CausesIceToMelt(x))", "all x.(Heat(x) -> CanCauseIceToMelt(x))", "all x y.((Heat(x) & Ice(y)) -> Melts(y,x))", "(Heat(heat) & IceMelt(ice))", "all x y.((Heat(x) & Ice(y)) -> CanMelt(y,x))", "all x.(Heat(x) -> CausesIceToMelt(x))", "(Heat(heat) & IceMelt(heat))", "all x.(Heat(x) -> CanCauseIceToMelt(x))", "(MeltIceFromHeat(Ice))", "all x y.((Heat(x) & Ice(y)) -> Melts(y,x))", "all x.(Heat(x) -> CausesIceToMelt(x))", "all x y.((Heat(x) & Ice(y)) -> CanMelt(y,x))", "all x.(Heat(x) -> CanCauseIceToMelt(x))", "exists x.(Heat(x) & Ice(y) & Melts(y,y))", "all x y.((Heat(x) & Ice(y)) -> Melt(y,x))", "all x.(Heat(x) -> CausesIceToMelt(x))"]}
{"id": "entailmentbank_validation_254", "nl": "the sun is a source of radiation / heat called sunlight.", "fol": "", "prediction": ["all x.(Sun(x) -> (SourceOfRadiation(x) & SourceOfHeat(x)))", "all x y.((Sun(x) & SourceOfRadiation(y) & SourceOfHeat(x,y)) -> Sunlight(x))", "all x.(Sun(x) -> SourceOfRadiation(x) & SourceOfHeat(x))", "all x.(Sun(x) -> (SourceOfRadiation(x) & SourceOfHeat(x)))", "(SourceOfRadiation/Heat(sun) & Sunlight(sunlight))", "all x y.((Sun(x) & SourceOfRadiation(x) & SourceOfHeat(y)) -> Sunlight(x))", "all x y.((Sun(x) & Sunlight(y)) -> (SourceOfRadiation(x,y) & SourceOfHeat(x,y)))", "all x y.(Sun(x) -> (SourceOfRadiation(x,y) & SourceOfHeat(x,y)))", "all x.((Sun(x) & SourceOfRadiation(x) & SourceOfHeat(x)) -> Sunlight(x))", "all x.(Sun(x) -> (SourceOfRadiation(x) | SourceOfHeat(x)))", "(SourceOfRadiationHeat(sun) & Sunlight(sun))", "all x.(Sun(x) -> SourceOfRadiation(x) & SourceOfHeat(x))", "all x y.(Sun(x) -> (SourceOfRadiation(x,y) & SourceOfHeat(x,y)))", "all x.((Sun(x) & SourceOfRadiation(x) & SourceOfHeat(x)) -> Sunlight(x))", "all x.(Sun(x) -> (SourceOfRadiation(x) | SourceOfHeat(x)) & Sunlight(x)))", "exists x.(Sun(x) & SourceOfRadiation(x) & SourceOfHeat(x) & Sunlight(x))"]}
{"id": "entailmentbank_validation_255", "nl": "the heat energy from the sunlight cause ice to melt.", "fol": "", "prediction": ["all x y.((HeatEnergy(x) & Sunlight(y)) -> CausesIceToMelt(x,y))", "all x.((HeatEnergy(x) & Sunlight(x)) -> CausesIceToMelt(x))", "(HeatEnergyFromSunlight(heatEnergy) & CausesIceToMelt(heat))", "all x y z.((HeatEnergy(x) & Sunlight(y) & Ice(z)) -> Melts(z))", "all x y.((HeatEnergy(x) & Sunlight(y)) -> CausesIceToMelt(x,y))", "all x.(HeatEnergy(x) -> CausesIceToMelt(x))", "all x.((HeatEnergy(x) & Sunlight(x)) -> CausesIceToMelt(x))", "(HeatEnergyFromSunlight(sunlight) & CausesIceToMelt(s))", "the heatenergy fromsunlight causes ice to melt.", "all x y.((HeatEnergy(x) & Sunlight(y) & Ice(z)) -> Melts(z))", "all x.(HeatEnergyFromSunlight(x) -> CausesIceToMelt(x))", "(HeatEnergyFromSunlight(HeatEnergy) & CausesIceToMelt(HeatEnergy))", "all x.((HeatEnergy(x) & Sunlight(x)) -> CausesIceToMelt(x))", "all x y.((HeatEnergy(x) & Sunlight(y)) -> CausesIceToMelt(x,y))", "all x.((HeatEnergy(x) & Sunlight(x)) -> CausesIceToMelt(x))", "all x y.((HeatEnergy(x) & Sunlight(y) & Ice(z)) -> Melts(z))"]}
{"id": "entailmentbank_validation_256", "nl": "a wagon is a kind of vehicle.", "fol": "", "prediction": ["all x.(Wagon(x) -> Vehicle(x))", "all x.(Wagon(x) -> Vehicle(x))", "all x y.((Wagon(x) & Vehicle(y)) -> Vehicle(x))", "all x.(Wagon(x) -> Vehicle(x))", "all x y.((Wagon(x) & Vehicle(y)) -> Vehicle(x))", "all x.(Wagon(x) -> Vehicle(x))", "all x y.((Wagon(x) & Vehicle(y)) -> Vehicle(x))", "exists x.(Vehicle(x) & Wagon(x))", "all x.(Wagon(x) -> Vehicle(x))", "all x.(Wagway(x) -> Vehicle(x))", "all x y.((Wagon(x) & Vehicle(y)) -> Vehicle(x,y))", "all x.(Wagon(x) -> Vehicle(x))", "all x.(Wagon(x) -> Vehicle(x))", "exists x.(Wagon(x) & Vehicle(x))", "exists x.(Wheel(x) & Vehicle(x))", "exists x.(Wagon(x) & Vehicle(x))"]}
{"id": "entailmentbank_validation_257", "nl": "a vehicle is a kind of object.", "fol": "", "prediction": ["all x.(Vehicle(x) -> Object(x))", "all x.(Vehicle(x) -> Object(x))", "all x y.((Vehicle(x) & Object(y)) -> Object(x))", "all x.(Vehicle(x) -> Object(x))", "all x y.((Vehicle(x) & Object(y)) -> Object(x))", "all x.(Vehicle(x) -> Object(x))", "all x y.((Vehicle(x) & Object(y)) -> Object(x))", "all x y.((Vehicle(x) & Object(y)) -> Is(x,y))", "all x.(Vehicle(x) -> Object(x))", "all x.(Vehicle(x) -> Object(x))", "exists x.(Vehicle(x) & TypeOfObject(x))", "all x.(Vehicle(x) -> Object(x))", "exists x.(Vehicle(x) & ArtOfObject(x))", "all x.(Vehicle(x) -> Object(x))", "exists x.(Vehicle(x) & KindOfObject(x))", "exists x.(Vehicle(x) & TypeOfObject(x))"]}
{"id": "entailmentbank_validation_258", "nl": "a wagon is a kind of object.", "fol": "", "prediction": ["all x.(Wagon(x) -> Object(x))", "all x.(Wagon(x) -> Object(x))", "all x y.((Wagon(x) & Object(y)) -> Object(x))", "all x.(Wagon(x) -> Object(x))", "all x y.((Wagon(x) & Object(y)) -> Object(x))", "all x.(Wavelet(x) -> Object(x))", "all x.(Wagon(x) -> Object(x))", "exists x.(Van(x) & Object(x))", "all x y.((Wagon(x) & Object(y)) -> Object(x,y))", "all x.(Wagon(x) -> Object(x))", "all x.(Wagon(x) -> Object(x))", "exists x.(Waves(x) & Object(x))", "all x.(Wagon(x) -> Object(x))", "exists x.(Van(x) & Object(x))", "all x.(Wagon(x) -> Object(x))", "exists x.(Wagon(x) & KindOfObject(x))"]}
{"id": "entailmentbank_validation_259", "nl": "rolling is a kind of motion.", "fol": "", "prediction": ["all x.(Rolling(x) -> Motion(x))", "all x.(Rolling(x) -> Motion(x))", "(Rolling(Rolling) -> Motion(Rolling))", "all x y.((Rolling(x) & Motion(y)) -> Motion(x))", "rolling is a kind of motion.", "all x.(Rolling(x) -> Motion(x))", "rolling is a kind of motion.", "all x y.(Rolling(x) -> Motion(y))", "all x.(Rolling(x) -> Motion(x))", "all x.(Rolling(x) -> Motion(x))", "all x y.(Rolling(x) -> Motion(y))", "all x.(Rolling(x) -> Motion(x))", "all x.(Rolling(x) -> Motion(x))", "all x.(Rolling(x) -> Motion(x))", "all x.(Rolling(x) -> Motion(x))", "all x.(Rolling(x) -> Motion(x))"]}
{"id": "entailmentbank_validation_260", "nl": "a wagon rolling is an example of an object in motion.", "fol": "", "prediction": ["all x.((WagonRolling(x) & ObjectInMotion(x)) -> ExampleOf(x,y))", "all x.(WagonRolling(x) -> ObjectInMotion(x))", "all x y.((WagonRolling(x) & ObjectInMotion(y)) -> ExampleOf(x,y))", "all x.((WagonRolling(x) & ObjectInMotion(x)) -> Example(x))", "all x y.((WagonRolling(x) & Object(y)) -> InMotion(x,y))", "all x.(WagonRolling(x) -> ObjectInMotion(x))", "all x y z.((WagonRolling(x) & ObjectInMotion(y) & Rolling(z)) -> ExampleOf(x,y,z))", "all x y.((WagonRolling(x) & ObjectInMotion(y)) -> ExampleOf(x,y))", "all x.(RollingWagon(x) -> ObjectInMotion(x))", "all x.((WagonRolling(x) & ObjectInMotion(x)) -> ExampleOf(x,y))", "all x y.((WagonRolling(x) & Object(y)) -> InMotion(x,y))", "all x.((WagonRolling(x) & InMotion(x)) -> ExampleOfObject(x))", "all x.(WagonRolling(x) -> ObjectInMotion(x))", "all x y.((WagonRolling(x) & ObjectInMotion(y)) -> ExampleOf(x,y))", "all x.(RollingWagon(x) -> ObjectInMotion(x))", "exists x.(WagonRolling(x) & ObjectInMotion(x))"]}
{"id": "entailmentbank_validation_261", "nl": "an example of mechanical energy is an object in motion.", "fol": "", "prediction": ["all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "(ObjectInMotion(x) & MechanicalEnergy(x))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x y.((MechanicalEnergy(x) & ObjectInMotion(y)) -> MechanicalEnergy(x))", "all x.((MechanicalEnergy(x) & ObjectInMotion(x)) -> MechanicalEnergy(x))", "all x.(MechanicalEnergyExample(x) -> ObjectInMotion(x))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x y.((MechanicalEnergy(x) & ObjectInMotion(y)) -> Example(x,y))", "all x.(Motion(x) -> MechanicalEnergy(x))", "all x.((MechanicalEnergy(x) & ObjectInMotion(x)) -> MechanicalEnergy(x))", "all x y.((MechanicalEnergy(x) & ObjectInMotion(y)) -> MechanicalEnergy(x,y))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x y.((MechanicalEnergy(x) & ObjectInMotion(y)) -> Examples(x,y))", "all x.(MechanicalEnergyExample(x) -> ObjectInMotion(x))", "exists x.(MechanicalEnergy(x) & ObjectInMotion(x))"]}
{"id": "entailmentbank_validation_262", "nl": "a wagon rolling is an example of mechanical energy.", "fol": "", "prediction": ["all x.(WagonRolling(x) -> MechanicalEnergy(x))", "all x.((WagonRolling(x) & MechanicalEnergy(x)) -> MechanicalEnergy(x))", "all x y.((WagonRolling(x) & MechanicalEnergy(y)) -> MechanicalEnergy(x,y))", "all x.(WagonRolling(x) -> MechanicalEnergy(x))", "all x y.((WagonRolling(x) & Wagon(y)) -> MechanicalEnergy(x))", "all x.((WagonRolling(x) & MechanicalEnergy(x)) -> MechanicalEnergy(x))", "all x.(RollingWagon(x) -> MechanicalEnergy(x))", "all x y.((WagonRolling(x) & Wagon(y) & MechanicalEnergy(x)) -> MechanicalEnergy(x))", "all x y.((WagonRolling(x) & MechanicalEnergy(y)) -> MechanicalEnergy(x,y))", "all x.((WagonRolling(x) & MechanicalEnergy(x)) -> MechanicalEnergy(x))", "all x.(WagonRolling(x) -> MechanicalEnergy(x))", "all x.(RollingWagon(x) -> MechanicalEnergy(x))", "all x.((WagonRolling(x) & MechanicalEnergy(x)) -> Example(x))", "all x y.((WagonRolling(x) & Rolling(y)) -> MechanicalEnergy(x))", "all x.(WagonRolling(x) -> MechanicalEnergy(x))", "all x.(RollingWagon(x) -> MechanicalEnergy(x))"]}
{"id": "entailmentbank_validation_263", "nl": "loud means high in sound energy / sound intensity.", "fol": "", "prediction": ["all x.(Loud(x) -> (HighSoundEnergy(x) & HighSoundIntensity(x)))", "loud(Loud(x) -> (HighSoundEnergy(x) & HighSoundIntensity(x)))", "loud means high insoundEnergy(Loud) & HighInsoundIntensity(Loud))", "loud means highsoundEnergy/SoundIntensity(x))", "loud(loud) -> (HighSoundEnergy(l) & HighSoundIntensity(l)))", "all x.(Loud(x) -> (HighSoundEnergy(x) & HighSoundIntensity(x)))", "all x.(Loud(x) -> (HighInSoundEnergy(x) & HighInSoundIntensity(x)))", "loud means highsoundEnergy/SoundIntensity(x))", "all x.(Loud(x) -> (HighSoundEnergy(x) & HighSoundIntensity(x)))", "all x y.((Loud(x) & SoundEnergy(y) & SoundIntensity(x,y)) -> High(x,y))", "all x y.((Loud(x) & SoundEnergy(y)) -> HighInIntensity(x,y))", "all x.(Loud(x) -> (HighSoundEnergy(x) & HighSoundIntensity(x)))", "all x y.((Loud(x) & SoundEnergy(y) & SoundIntense(x,y)) -> High(x,y))", "all x.(Loud(x) -> (HighInSoundEnergy(x) & HighInSoundIntensity(x)))", "all x.(Loud(x) -> HighInSoundEnergy(x))", "all x.(Loud(x) -> (HighInSoundEnergy(x) | HighInSoundIntensity(x)))"]}
{"id": "entailmentbank_validation_264", "nl": "sound is a kind of energy.", "fol": "", "prediction": ["all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x y.((Sound(x) & Energy(y)) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "(all x.(Sound(x) -> Energy(x)))", "all x y.((Sound(x) & Energy(y)) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x y.((Sound(x) & Energy(y)) -> Energy(x,y))", "all x.(Sound(x) -> Energy(x))", "all x y.((Sound(x) & Energy(y)) -> Is(x,y))", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))"]}
{"id": "entailmentbank_validation_265", "nl": "a classroom is a kind of area.", "fol": "", "prediction": ["all x.(Classroom(x) -> Area(x))", "all x.(Classroom(x) -> Area(x))", "all x y.((Classroom(x) & Area(y)) -> KindOf(x,y))", "all x.((Classroom(x) & Area(x)) -> KindOf(x))", "all x.(Classroom(x) -> Area(x))", "all x y.((Classroom(x) & Area(y)) -> KindOf(x,y))", "all x.(Classroom(x) -> Area(x))", "all x y.((Classroom(x) & Area(y)) -> Is(x,y))", "exists x.(Classroom(x) & KindOfArea(x))", "all x.(Classroom(x) -> Area(x))", "exists x.(Cellar(x) & Area(x))", "all x y.((Classroom(x) & Area(y)) -> Exactly(x,y))", "all x y.((Classroom(x) & Classroom(y)) -> Area(x))", "all x.(Classroom(x) -> Area(x))", "exists x.(Classroom(x) & KindOfArea(x))", "exists x.(Cellroom(x) & Area(x))"]}
{"id": "entailmentbank_validation_266", "nl": "the sound in a loud class room is an example of high sound energy.", "fol": "", "prediction": ["all x.((Sound(x) & LoudClassRoom(x)) -> HighSoundEnergy(x))", "all x.((SoundInLoudClassRoom(x) & HighSoundEnergy(x)) -> HighSoundEnergy(x))", "all x y.((Sound(x) & LoudClassRoom(y)) -> HighSoundEnergy(x))", "all x y z.((Sound(x) & LoudClassRoom(y) & ClassRoom(z) & In(x,y,z)) -> HighSoundEnergy(x))", "all x y.((Sound(x) & LoudClassRoom(y)) -> HighSoundEnergy(x,y))", "all x.((Sound(x) & LoudClassRoom(x)) -> HighSoundEnergy(x))", "all x y.((Sound(x) & LoudClassRoom(y) & InClassRoom(x,y)) -> HighSoundEnergy(x))", "all x.(LoudClassRoom(x) -> HighSoundEnergy(x))", "all x.((SoundInLoudClassRoom(x) & HighSoundEnergy(x)) -> HighSoundEnergy(x))", "all x y.((SoundInLoudClassRoom(x) & ClassRoom(y)) -> HighSoundEnergy(x))", "all x.((Sound(x) & LoudClassRoom(x)) -> HighSoundEnergy(x))", "all x.(LoudClassRoom(x) -> HighSoundEnergy(x))", "all x y.((Sound(x) & LoudClassRoom(y)) -> HighSoundEnergy(x,y))", "all x.((SoundInLoudClassRoom(x) & HighSoundEnergy(x)) -> HighSoundEnergy(x))", "all x y.((Sound(x) & LoudClassRoom(y) & InClassRoom(x,y)) -> HighSoundEnergy(x))", "all x.((SoundInLoudClassRoom(x) & HighSoundEnergy(x)) -> ExampleOf(x,y))"]}
{"id": "entailmentbank_validation_267", "nl": "if an object / something is in the sunlight then that object / that something will absorb solar energy.", "fol": "", "prediction": ["all x.((Object(x) & Something(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Object(x) & Something(y) & InSunlight(x,y)) -> AbsorbsSolarEnergy(x,y))", "all x.((Object(x) & SomethingInSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Object(x) & Something(y) & InSunlight(x)) -> AbsorbsSolarEnergy(x,y))", "all x.((Object(x) | Something(x)) -> InSunlight(x))", "all x.((ObjectInSunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "(all x.(Sunlight(x) -> AbsorbsSolarEnergy(x)))", "all x.((Object(x) & Something(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.(Sunlight(x) -> AbsorbsSolarEnergy(x))", "all x y.((Object(x) & Something(y) & InSunlight(x,y)) -> AbsorbsSolarEnergy(x,y))", "exists x.(Object(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x y.(Sunlight(x) -> (AbsorbsSolarEnergy(x,y)))", "all x y.((Object(x) & Something(y) & InSunlight(x,y)) -> AbsorbsSolarEnergy(x,y))", "all x.((Object(x) | Something(x)) -> InSunlight(x))", "all x y.((Object(x) & Something(y) & InSunlight(x)) -> AbsorbsSolarEnergy(x,y))", "all x.(Sunlight(x) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_validation_268", "nl": "a sidewalk is located outside.", "fol": "", "prediction": ["all x.(Standard(x) -> LocatedOutside(x))", "all x.(Sidewalk(x) -> LocatedOutside(x))", "all x.(Standard(x) -> LocatedOutside(x))", "all x y.((Standard(x) & Outside(y)) -> Located(x,y))", "all x y.((Standard(x) & Street(y) & LocatedOutside(x,y)) -> LocatedOutside(x))", "all x.(Sidewalk(x) -> LocatedOutside(x))", "all x.(Standard(x) -> LocatedOutside(x))", "all x y.((Sidewalk(x) & Outside(y)) -> Located(x,y))", "all x y.((Sidewalk(x) & Outside(y) & Located(x,y)) -> Located(x,y))", "exists x.(Sidewalk(x) & LocatedOutside(x))", "exists x.(Shootlight(x) & LocatedOutside(x))", "all x y.((Standard(x) & Outside(y)) -> Located(x,y))", "exists x.(Standard(x) & LocatedOutside(x))", "exists x.(Sidewalk(x) & LocatedOutside(x))", "exists x.(Standard(x) & Outside(x))", "exists x.(Shoeway(x) & Outside(x))"]}
{"id": "entailmentbank_validation_269", "nl": "a sidewalk located outside will absorb solar energy.", "fol": "", "prediction": ["all x.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x,y))", "all x.((Sidewalk(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x,y))", "all x y.((Sidewalk(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x,y))", "all x.(Standard(x) -> AbsorbsSolarEnergy(x))", "all x.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x.((Sidewalk(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "exists x.(Standard(x) & LocatedOutside(x) & AbsorbsSolarEnergy(x))", "all x y.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(y))", "all x.((Standard(x) & Outside(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Sidewalk(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x,y))", "all x.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "exists x.(Standard(x) & LocatedOutside(x) & AbsorbsSolarEnergy(x))", "all x y.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x,y))"]}
{"id": "entailmentbank_validation_270", "nl": "absorbing sunlight causes objects to heat.", "fol": "", "prediction": ["all x.(AbsorbingSunlight(x) -> CausesHeat(x))", "all x.((Sunlight(x) & Absorbs(x,Sunlight)) -> CausesHeat(x))", "all x y.((Sunlight(x) & Object(y)) -> AbsorbsHeat(x,y))", "all x y.((AbsorbsSunlight(x) & Object(y)) -> CausesHeat(x,y))", "all x.((AbsorbsSunlight(x) & CausesHeat(x)) -> Heat(x))", "all x y z.((Sunlight(x) & Object(y) & Sunlight(z) & Absorbs(x,y,z)) -> CausesToHeat(y,z))", "all x.(AbsorbsSunlight(x) -> CausesHeat(x))", "(AbsorbingSunlightCausesHeat(x))", "all x.((SunlightAbsorbing(x) & HeatCauses(x)) -> ObjectsToHeat(x))", "all x y.((Sunlight(x) & Object(y)) -> Absorbs(x,y))", "all x y.((AbsorbingSunlight(x) & Object(y)) -> CausesToHeat(x,y))", "all x.((AbsorbingSunlight(x) & Heat(x)) -> CausesObjects(x))", "all x.(AbsorbingSunlight(x) -> CausesHeat(x))", "all x y.((AbsorbsSunlight(x) & Object(y)) -> Heat(y))", "all x y.((AbsorbingSunlight(x) & Object(y)) -> CausesToHeat(x,y))", "all x.(AbsorbsSunlight(x) -> CausesHeat(x))"]}
{"id": "entailmentbank_validation_271", "nl": "the sidewalk located outsie will heat.", "fol": "", "prediction": ["all x.((Standard(x) & LocatedOutsie(x)) -> Heats(x))", "all x y.((Standard(x) & LocatedOutsie(x)) -> Heats(y))", "all x.((Standard(x) & LocatedOutsie(x)) -> Heat(x))", "all x.((Sidewalk(x) & LocatedOutsie(x)) -> Heats(x))", "(Heat(Standard) & LocatedOutsie(Standard))", "all x.(Standard(x) -> Heats(x))", "all x.((Standard(x) & LocatedOutsie(x)) -> Heats(x))", "(HeatSidewalk(outsie))", "LocatedOutsieStandardHeats(s)", "ALL NEXT & LocatedOutsie(x) -> Heat(x))", "all x y.((Standard(x) & Outsie(y)) -> Heats(x,y))", "all x y.((Standard(x) & LocatedOutsie(y)) -> Heat(x,y))", "all x y.((Sidewalk(x) & LocatedOutsie(y)) -> Heats(x,y))", "all x.((Standard(x) & LocatedOutsie(x)) -> Heats(x))", "all x y.((Standard(x) & Outsie(y) & LocatedOn(x,y)) -> Heats(x))", "all x.(Standard(x) -> Heat(x))"]}
{"id": "entailmentbank_validation_272", "nl": "if something heat, it will feel hot.", "fol": "", "prediction": ["all x.(Heat(x) -> FeelHot(x))", "(Heat(x) -> FeelHot(x))", "all x.(Heat(x) -> FeelHot(x))", "all x.((Heat(x) & FeelsHot(x)) -> Heat(x))", "-Heats(x) -> FeelsHot(x))", "all x y.((Heat(x) & Heat(y)) -> FeelsHot(x))", "all x y.((Heat(x) & FeelHot(y)) -> Heat(x))", "all x.(Heat(x) -> FeelHot(x))", "all x.(Heat(x) -> FeelsHot(x))", "all x.((Heat(x) & FeelHot(x)) -> Heat(x))", "all x y.(Heat(x) -> FeelsHot(y))", "all x.(Heats(x) -> FeelsHot(x))", "all x.(Heat(x) -> FeelHot(x))", "all x y.(Heat(x) -> FeelHot(y))", "exists x.(Heat(x) & FeelsHot(x))", "exists x.(Heat(x) & FeelsHot(x))"]}
{"id": "entailmentbank_validation_273", "nl": "the sidewalk located outside will feel hot.", "fol": "", "prediction": ["all x.((Standard(x) & LocatedOutside(x)) -> FeelsHot(x))", "all x.((Standard(x) & Outside(x)) -> FeelsHot(x))", "all x y.((Standard(x) & Outside(y)) -> FeelsHot(x,y))", "all x.((Sidewalk(x) & Outside(x)) -> FeelsHot(x))", "-(Standard(x) & Outside(x)) -> FeelsHot(x))", "all x y.((Standard(x) & LocatedOutside(x)) -> FeelsHot(x))", "all x.((Standard(x) & LocatedOutside(x)) -> FeelsHot(x))", "(FeelHot(scene,outside))", "all x y.((Standard(x) & Outside(y) & LocatedOutside(x,y)) -> FeelsHot(x))", "all x.((Sidewalk(x) & LocatedOutside(x)) -> FeelsHot(x))", "all x.((Standard(x) & Outside(x)) -> FeelsHot(x))", "all x y.((Sidewalk(x) & Outside(y)) -> FeelsHot(x,y))", "(FindsHot(Standard)", "all x.(Standard(x) -> FeelsHot(x))", "all x.(Sidewalk(x) -> FeelsHot(x))", "all x.((Standard(x) & Outside(x)) -> FeelsHot(x))"]}
{"id": "entailmentbank_validation_274", "nl": "there is a person in a dark room looking out a window in the day.", "fol": "", "prediction": ["exists x y.(Person(x) & DarkRoom(y) & LooksOutWindow(x,y))", "exists x.(Person(x) & DarkRoom(x) & LooksOutWindow(x))", "all x y z.((Person(x) & DarkRoom(y) & Window(z) & LookingOut(x,z)) -> InDarkRoom(x,y))", "all x y.((Person(x) & DarkRoom(y) & LooksOutWindow(x,y)) -> InDay(x,y))", "exists x y.(Person(x) & DarkRoom(y) & LooksOutWindow(x,y))", "exists x.(Person(x) & DarkRoom(x) & LooksOutWindow(x))", "all x y z.((Person(x) & DarkRoom(y) & Window(z) & In(x,y) & LookingOut(x,z)) -> In(x,y,z))", "exists x.(PersonInDarkRoom(x) & LooksOutWindow(x))", "exists x.(Person(x) & DarkRoom(x) & LookingOutWindow(x))", "all x y.((Person(x) & DarkRoom(y) & LookingOutWindow(x,y)) -> InDay(x,y))", "all x y z.((Person(x) & DarkRoom(y) & Window(z) & LookingOut(x,y,z)) -> InDarkRoom(x,y))", "all x y.((Person(x) & DarkRoom(y) & LooksOutWindow(x,y)) -> InDay(x,y))", "exists x.(PersonInDarkRoom(x) & LooksOutWindow(x))", "exists x.(PersonInDarkRoomLookingOutWindow(x) & Day(x))", "exists x.(DarkRoom(x) & PersonLookingOutWindow(x))", "exists x.(Person(x) & DarkRoom(x) & LooksOutWindow(x))"]}
{"id": "entailmentbank_validation_275", "nl": "if something is in a dark place, then that something will not reflect enough light to be seen.", "fol": "", "prediction": ["all x.((DarkPlace(x) & In(x,DarkPlace)) -> -ReflectsEnoughLightToBeSeen(x))", "all x.(DarkPlace(x) -> -ReflectsEnoughLight(x))", "all x y.((DarkPlace(x) & DarkPlace(y)) -> -ReflectsEnoughLight(x,y))", "all x.((DarkPlace(x) & In(x,y)) -> -ReflectsEnoughLightToBeSeen(x))", "all x.(DarkPlace(x) -> -ReflectsEnoughLightToBeSeen(x))", "all x.((DarkPlace(x) & InDarkPlace(x)) -> -ReflectsEnoughLightToBeSeen(x))", "all x y.((DarkPlace(x) & DarkPlace(y)) -> -ReflectsEnoughLight(x,y))", "all x.((DarkPlace(x) & DarkPlace(x)) -> -ReflectsEnoughLight(x))", "all x y.((DarkPlace(x) & DarkPlace(y) & ReflectsEnoughLight(x,y)) -> -ReflectsEnoughLight(x,y))", "exists x.(DarkPlace(x) & ReflectsEnoughLightToBeSeen(x))", "all x y.((DarkPlace(x) & DarkPlace(y)) -> -ReflectsEnoughLightToBeSeen(x,y))", "all x.(DarkPlace(x) -> -ReflectsEnoughLight(x))", "all x y.((DarkPlace(x) & DarkPlace(y)) -> -ReflectsEnoughLightForSight(x,y))", "exists x.(DarkPlace(x) & ReflectsLight(x))", "exists x.(DarkPlace(x) & -ReflectsEnoughLight(x))", "all x y.((DarkPlace(x) & DarkPlace(y)) -> -ReflectsEnoughLight(x,y))"]}
{"id": "entailmentbank_validation_276", "nl": "the person in the dark room will not reflect enough light to be seen.", "fol": "", "prediction": ["all x.(DarkRoom(x) -> -ReflectsEnoughLightToBeSeen(x))", "all x y.((Person(x) & DarkRoom(y)) -> -ReflectsEnoughLightToBeSeen(x,y))", "all x.((Person(x) & DarkRoom(x)) -> -ReflectsEnoughLightToBeSeen(x))", "-ReflectsEnoughLightToBeSeen(PersonInDarkRoom)", "the person in the darkroom will notReflectEnoughLightToBeSeen(Person,DarkRoom))", "all x y.((Person(x) & DarkRoom(y) & InDarkRoom(x,y)) -> -ReflectsEnoughLightToBeSeen(x))", "all x.(DarkRoom(x) -> -ReflectsEnoughLight(x))", "(DarkRoom(Person) & -ReflectsEnoughLight(Person))", "-ReflectsEnoughLightToBeSeen(PersonInDarkRoom)", "all x.((Person(x) & DarkRoom(x)) -> -ReflectsEnoughLight(x))", "all x y.((Person(x) & DarkRoom(y)) -> -ReflectsEnoughLight(x,y))", "all x.(DarkRoom(x) -> -ReflectsEnoughLightToBeSeen(x))", "all x y.((Person(x) & DarkRoom(y) & InDarkRoom(x,y)) -> -ReflectsEnoughLightToBeSeen(x))", "all x y.((Person(x) & DarkRoom(y)) -> -ReflectsEnoughLightToBeSeen(x,y))", "all x.(DarkRoom(x) -> -ReflectsEnoughLight(x))", "all x.(DarkRoom(x) -> -ReflectsEnoughLightToBeSeen(x))"]}
{"id": "entailmentbank_validation_277", "nl": "there is a person outside in the day looking into the dark room.", "fol": "", "prediction": ["exists x.(PersonOutside(x) & Day(x) & LooksIntoDarkRoom(x))", "exists x.(Person(x) & Outside(x) & Day(x) & LooksIntoDarkRoom(x))", "all x y.((Person(x) & Outside(y) & Day(x) & DarkRoom(y)) -> LooksInto(x,y))", "all x y.((Person(x) & Outside(x,y) & Day(y)) -> LooksIntoDarkRoom(x,y))", "all x y z.((Person(x) & Day(y) & DarkRoom(z) & Outside(x,y)) -> LooksInto(x,z))", "exists x.(OutsideInDay(x) & LooksIntoDarkRoom(x))", "all x y.((Person(x) & Outside(y) & Day(y)) -> LooksIntoDarkRoom(x,y))", "exists x.(PersonOutside(x) & Day(x) & LooksIntoDarkRoom(x))", "exists x.(PersonOutsideInDay(x) & LooksIntoDarkRoom(x))", "all x y z.((Person(x) & Day(y) & DarkRoom(z)) -> OutsideInDayLookingInto(x,y,z))", "all x y.((Person(x) & OutsideInDay(x,y) & DarkRoom(y)) -> LooksInto(x,y))", "exists an outsider in the day looking into darkroom.", "exists x.(OutsideInDay(x) & LooksIntoDarkRoom(x))", "all x y.((Person(x) & OutsideDay(x) & DarkRoom(y)) -> LooksInto(x,y))", "exists x.(PersonOutsideInDay(x) & LooksIntoDarkRoom(x))", "exists x.(OutsideInDay(x) & LooksIntoDarkRoom(x))"]}
{"id": "entailmentbank_validation_278", "nl": "the person outside cannot see the person in the dark room.", "fol": "", "prediction": ["all x y.((Person(x) & Outside(x) & DarkRoom(y)) -> -SeesIn(x,y))", "all x.(Outside(x) -> -SeesInDarkRoom(x))", "all x y.((Person(x) & Outside(y)) -> -SeesInDarkRoom(x,y))", "all x.((Person(x) & Outside(x)) -> -SeesInDarkRoom(x))", "all x.(OutsidePerson(x) -> -SeesInDarkRoom(x))", "(OutsidePerson(x) & -SeesInDarkRoom(x))", "all x y z.((Person(x) & Outside(y) & DarkRoom(z)) -> -SeesIn(x,y,z))", "the person outside cannotseethepersoninddarkroom(Person,DarkRoom))", "(-SeesInDarkRoom(Person,Outside))", "all x y.((Person(x) & Outside(x) & DarkRoom(y)) -> -CanSee(x,y))", "all x.((Person(x) & Outside(x)) -> -CanSeeInDarkRoom(x))", "all x.(OutsidePerson(x) -> -SeesInDarkRoom(x))", "all x y.((Person(x) & Outside(y)) -> -CanSeeInDarkRoom(x,y))", "all x y.((Person(x) & Outside(x,y)) -> -CanSeeInDarkRoom(x,y))", "-exists x.(Outside(x) & PersonInDarkRoom(x))", "all x.(OutsidePerson(x) -> -CanSeeInDarkRoom(x))"]}
{"id": "entailmentbank_validation_279", "nl": "a prism refracts light.", "fol": "", "prediction": ["all x.(Prism(x) -> RefractsLight(x))", "all x y.((Prism(x) & Light(y)) -> Refracts(x,y))", "all x.(Prism(x) -> RefractsLight(x))", "all x.(Prism(x) -> RefractsLight(x))", "all x y.((Prism(x) & Light(y)) -> Refracts(x,y))", "all x.(Prism(x) -> RefractsLight(x))", "all x y.(Prism(x) -> RefractsLight(x,y))", "all x.(Prism(x) -> RefractsLight(x))", "all x y.((Prism(x) & Light(y)) -> Refracts(x,y))", "exists x.(Prism(x) & RefractsLight(x))", "all x.(Prism(x) -> RefractsLight(x))", "all x y.((Prism(x) & Light(y)) -> Refracts(x,y))", "exists x.(Primum(x) & RefractsLight(x))", "all x y.((Prism(x) & Light(y)) -> Refracts(x,y))", "all x.(Prism(x) -> RefractsLight(x))", "exists x.(Prism(x) & RefractsLight(x))"]}
{"id": "entailmentbank_validation_280", "nl": "refracting sunlight / light causes sunlight / light to split into different colors.", "fol": "", "prediction": ["all x y.((RefractingSunlight(x) & Sunlight(y)) -> CausesSunlightToSplitIntoDifferentColors(x,y))", "all x.((RefractingSunlight(x) & RefractingLight(x)) -> CausesSunlightToSplitIntoDifferentColors(x))", "all x.(RefractingSunlight(x) -> CausesSunlightToSplitIntoDifferentColors(x))", "(RefractingSunlight(refractsSunlight(refractsSunlight(refractsSunlight(refractsSunlight(refractsSunlight(refractsSunlight(refractsSunlight(refractsSunlight(refractsSunlight(refractsSunlight(refractsSunlight(refractsSunlight(refracts)))", "all x y.((RefractingSunlight(x) & Sunlight(y)) -> CausesSunlight(x,y))", "all x y z.((RefractingSunlight(x) & Light(y) & Sunlight(z)) -> CausesSplitting(x,y,z))", "all x y.((RefractingSunlight(x) & Light(y)) -> CausesSunlightToSplitIntoDifferentColors(x,y))", "(RefractingSunlight(x) & CausesSunlight(x) & CausesSplitting(x))", "all x.((RefractingSunlight(x) & RefractingLight(x)) -> CausesSunlightToSplitIntoDifferentColors(x))", "all x.(RefractingSunlight(x) -> CausesSunlightToSplitIntoDifferentColors(x))", "all x y z.((RefractingSunlight(x) & Light(y) & Sunlight(z)) -> CausesSplitIntoDifferentColors(x,y,z))", "all x y.((RefractingSunlight(x) & RefractingLight(x)) -> CausesSunlightToSplitIntoDifferentColors(x,y))", "all x y.((RefractingSunlight(x) & Sunlight(y)) -> CausesSunlightToSplitIntoDifferentColors(x,y))", "all x.((RefractingSunlight(x) & RefractingLight(x)) -> CausesSunlightToSplitIntoDifferentColors(x))", "all x.(RefractingSunlight(x) -> CausesSunlightToSplitIntoDifferentColors(x))", "all x.((RefractingSunlight(x) & RefractingLight(x)) -> CausesSunlightToSplitIntoDifferentColors(x))"]}
{"id": "entailmentbank_validation_281", "nl": "a prism can refract light and split the light into different colors.", "fol": "", "prediction": ["all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoDifferentColors(x)))", "all x y.((Prism(x) & Light(y)) -> (Refracts(x,y) & SplitsIntoColors(x,y)))", "all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoDifferentColors(x)))", "all x y z.((Prism(x) & Light(y) & Color(z)) -> (Refracts(x,y) & SplitsInto(x,z)))", "all x y.((Prism(x) & Light(y)) -> (Refracts(x,y) & SplitsIntoDifferentColors(x,y)))", "all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoDifferentColors(x)))", "all x.(Prism(x) -> (RefractLight(x) & SplitLightIntoDifferentColors(x)))", "all x y.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoDifferentColors(x,y)))", "all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoDifferentColors(x)))", "all x y.((Prism(x) & Light(y)) -> (Refracts(x,y) & SplitsIntoColors(x,y)))", "all x y z.((Prism(x) & Light(y) & Color(z)) -> (Refracts(x,y) & SplitsInto(x,z)))", "exists x.(Prism(x) & RefractsLight(x) & SplitsLightIntoDifferentColors(x))", "all x.(Prism(x) -> (RefractLight(x) & SplitLightIntoDifferentColors(x)))", "all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoDifferentColors(x)))", "exists x.(Prism(x) & RefractsLight(x) & SplitsLight(x))", "exists x.(Primum(x) & RefractsLight(x) & SplitsLightIntoColors(x))"]}
{"id": "entailmentbank_validation_282", "nl": "white light is made of all colors of visible light combined.", "fol": "", "prediction": ["all x.(WhiteLight(x) -> (ColorsOfVisibleLight(x) & ColorsOfVisibleLight(x)))", "all x.(WhiteLight(x) -> MadeOfAllColorsOfVisibleLight(x))", "all x y.((WhiteLight(x) & Color(y)) -> MadeOf(x,y))", "(all x.(WhiteLight(x) -> MadeOfVisibleLight(x)))", "all x.(WhiteLight(x) -> (AllColorsOfVisibleLight(x) & Combines(x)))", "all x y.((WhiteLight(x) & VisibleLight(y)) -> MadeOf(x,y))", "all x.(WhiteLight(x) -> (Color(x,VisibleLight) & Color(x,VisibleLight)))", "(all x.(WhiteLight(x) -> VisibleLightCombined(x)))", "all x.(WhiteLight(x) -> (AllColorsOfVisibleLight(x) & Combines(x,y)))", "all x.(WhiteLight(x) -> MadeOfVisibleLight(x))", "all x y.((WhiteLight(x) & Color(y)) -> MadeOf(x,y))", "all x.(WhiteLight(x) -> (ColorsOfVisibleLight(x) & ColorsOfVisibleLight(x)))", "all x y.((WhiteLight(x) & VisibleLight(y)) -> MadeOf(x,y))", "all x.(WhiteLight(x) -> (ColorsOfVisibleLight(x) & ColorsOfVisibleLight(x)))", "exists x.(WhiteLight(x) & Color(x) & VisibleLight(x) & Combines(x,y))", "all x.(WhiteLight(x) -> AllColorsOfVisibleLightCombined(x))"]}
{"id": "entailmentbank_validation_283", "nl": "a prism can refract white light and split the light into all colors of visible light.", "fol": "", "prediction": ["all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColors(x)))", "all x y.((Prism(x) & WhiteLight(y)) -> (Refracts(x,y) & SplitsLightIntoAllColors(x,y)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColorsOfVisibleLight(x)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColors(x)))", "all x y.((Prism(x) & WhiteLight(y)) -> (Refracts(x,y) & SplitsIntoAllColors(x,y)))", "all x y z.((Prism(x) & WhiteLight(y) & VisibleLight(z)) -> (Refracts(x,y) & SplitsInto(x,z)))", "all x y.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColors(x,y)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColorsOfVisibleLight(x)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColors(x)))", "all x y z.((Prism(x) & WhiteLight(y) & Color(z)) -> (Refracts(x,y) & SplitsInto(x,z)))", "all x y.((Prism(x) & WhiteLight(y)) -> (Refracts(x,y) & SplitsLightIntoAllColors(x,y)))", "all x.(Prism(x) -> (RefractWhiteLight(x) & SplitLightIntoAllColors(x)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColorsOfVisibleLight(x)))", "exists x.(Primum(x) & RefractWhiteLight(x) & SplitLightIntoAllColorsOfVisibleLight(x))", "exists x.(Prism(x) & RefractsWhiteLight(x) & SplitsLightIntoAllColorsOfVisibleLight(x))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColors(x)))"]}
{"id": "entailmentbank_validation_284", "nl": "a vacuum has no matter in it.", "fol": "", "prediction": ["all x.(Vacuum(x) -> NoMatterInVacuum(x))", "all x.(Vacuum(x) -> -MatterInVacuum(x))", "all x y.((Vacuum(x) & Vacuum(y)) -> -MatterIn(x,y))", "all x.(Vacuum(x) -> NoMatterIn(x))", "all x y.((Vacuum(x) & Vacuum(y)) -> NoMatterIn(x,y))", "all x.(Vacuum(x) -> -MatterInVacuum(x))", "all x y.((Vacuum(x) & Matter(y)) -> NoMatterIn(x,y))", "all x y.((Vacuum(x) & Vacuum(y)) -> NoMatterIn(x,y))", "exists x.(Vapor(x) & -exists y.(Matter(y) & InVapor(x,y))))", "all x.(Vacuum(x) -> NoMatter(x))", "all x.(Vacuum(x) -> -MatterIn(x))", "all x y.((Vacuum(x) & Vacuum(y)) -> -MatterIn(x,y))", "all x.(Vacuum(x) -> NoMatterInVacuum(x))", "all x.(Vapor(x) -> NoMatterIn(x))", "exists x.(Vacuum(x) & -HasMatterIn(x))", "exists x.(Vacuum(x) & -HasMatterIn(x,Vibration))"]}
{"id": "entailmentbank_validation_285", "nl": "sound requires matter to travel.", "fol": "", "prediction": ["all x.(Sound(x) -> RequiresMatterToTravel(x))", "all x y.((Sound(x) & Matter(y)) -> RequiresToTravel(x,y))", "all x.(Sound(x) -> RequiresMatterToTravel(x))", "(RequiresMatterToTravel(sound,sound))", "all x.(Sound(x) -> RequiresMatter(x))", "(all x.(Sound(x) -> RequiresMatter(x)))", "all x y.((Sound(x) & Matter(y)) -> RequiresToTravel(x,y))", "all x.((Sound(x) & RequiresMatter(x)) -> Travels(x))", "all x.(SoundRequiresMatterToTravel(x) -> RequiresMatter(x))", "all x.(SoundRequiresMatter(x) -> Travel(x))", "all x.(Sound(x) -> RequiresMatterToTravel(x))", "all x y.((Sound(x) & Matter(y)) -> RequiresToTravel(x,y))", "all x.(Sound(x) -> RequiresMatter(x))", "all x y.((Sound(x) & Matter(y)) -> RequiresToTravel(x,y))", "all x.(SonicRequiresMatter(x) -> Travels(x))", "all x.(Sound(x) -> RequiresMatterToTravel(x))"]}
{"id": "entailmentbank_validation_286", "nl": "sound cannot travel through a vacuum.", "fol": "", "prediction": ["all x.(Sound(x) -> -TravelsThroughVacuum(x))", "all x y.((Sound(x) & Vacuum(y)) -> -TravelsThrough(x,y))", "all x.(Sound(x) -> -TravelsThroughVacuum(x))", "all x.((Sound(x) & -Vibration(x)) -> -TravelsThrough(x,Vibration))", "(all x.(Sound(x) -> -VibrationThroughVacuum(x)))", "all x y.((Sound(x) & Vacuum(y)) -> -TravelsThrough(x,y))", "all x.(Sound(x) -> -CanTravelThroughVacuum(x))", "all x.(Sound(x) -> -TravelsThroughVapor(x))", "(all x.(Sound(x) -> -Vacuum(x)))", "all x y.((Sound(x) & Vacuum(y)) -> -TravelsThrough(x,y))", "all x y.((Sound(x) & Vacuum(y)) -> -CanTravel(x,y))", "all x.(Sound(x) -> -CanTravelThroughVacuum(x))", "all x.(Sound(x) -> -TravelsThroughVapor(x))", "all x y.((Sound(x) & Vacuum(y)) -> -TravelsThrough(x,y))", "all x.(Sound(x) -> -VibrationThroughVacuum(x))", "all x.(Sound(x) -> -CanTravelThroughVacuum(x))"]}
{"id": "entailmentbank_validation_287", "nl": "metal is a thermal / thermal energy conductor.", "fol": "", "prediction": ["all x.(Metal(x) -> ThermalEnergyConductor(x))", "(Terminal(metal) & ThermalEnergyConductor(metal))", "all x.(Metal(x) -> ThermalEnergyConductor(x))", "all x.(Metal(x) -> (ThermalConductor(x) | ThermalEnergyConductor(x)))", "all x y.((Metal(x) & ThermalEnergyConductor(y)) -> Conducts(x,y))", "all x.(Metal(x) -> ThermalConductor(x))", "all x y.((Metal(x) & ThermalEnergyConductor(y)) -> ThermalEnergyConductor(x))", "(ThermalConductor(metal) & ThermalConductor(metal))", "all x.(Metal(x) -> (ThermalConductor(x) | ThermalEnergyConductor(x)))", "all x.(Metal(x) -> Thermal(x) & ThermalEnergyConductor(x))", "all x.(Metal(x) -> ThermalEnergyConductor(x))", "all x.(Metal(x) -> (Thermal(x) | ThermalEnergyConductor(x)))", "all x y.((Metal(x) & ThermalEnergyConductor(y)) -> Conducts(x,y))", "all x.(Metal(x) -> (TerminalEnergyConductor(x) | ThermalEnergyConductor(x)))", "exists x.(Metal(x) & Thermal(x) & ThermalEnergyConductor(x))", "all x.(Metal(x) -> ThermalConductor(x))"]}
{"id": "entailmentbank_validation_288", "nl": "a spoon sometimes is made of metal.", "fol": "", "prediction": ["exists x.(Spoon(x) & MadeOfMetal(x))", "all x y.((Spoon(x) & Metal(y)) -> MadeOf(x,y))", "exists x.(Spoon(x) & MadeOfMetal(x))", "exists x.(Spoon(x) & MadeOfMetal(x))", "all x y.((Spoon(x) & Metal(y)) -> MadeOf(x,y))", "all x y.((Spoon(x) & Metal(y) & MadeOf(x,y)) -> MadeOf(x,y))", "exists x.(Spoon(x) & MadeOfMetal(x))", "all x y.((Spoon(x) & Metal(y)) -> MadeOf(x,y))", "all x.(Spoon(x) -> MadeOfMetal(x))", "exists x.(Spoken(x) & MadeOfMetal(x))", "exists x.(Spoon(x) & MadeOfMetal(x))", "all x y.((Spoon(x) & Metal(y)) -> MadeOf(x,y))", "exists x.(Spoon(x) & MadeOf(x,Metal))", "exists x.(Spoon(x) & MadeOfMetal(x))", "exists x.(Spoon(x) & MadeOf(x,Metal))", "exists x.(Spoon(x) & MadeOfMetal(x))"]}
{"id": "entailmentbank_validation_289", "nl": "a metal spoon is a thermal conductor.", "fol": "", "prediction": ["all x.(MetalSpoon(x) -> ThermalConductor(x))", "all x.(MetalSpoon(x) -> ThermalConductor(x))", "all x.((MetalSpoon(x) & Spoon(x)) -> ThermalConductor(x))", "all x y.((MetalSpoon(x) & Scoop(y)) -> ThermalConductor(x))", "all x.(MetalSpoon(x) -> ThermalConductor(x))", "all x.((MetalSpoon(x) & ThermalConductor(x)) -> HeatsUp(x))", "all x y.((MetalSpoon(x) & Spoon(y)) -> ThermalConductor(x))", "all x y.((MetalSpoon(x) & Snack(y)) -> ThermalConductor(x))", "all x.(MetalSpoon(x) -> ThermalConductor(x))", "all x y.((MetalSpoon(x) & Spoon(y) & ThermalConductor(x)) -> ThermalConductor(x))", "all x y.((MetalSpoon(x) & ThermalConductor(y)) -> Conducts(x,y))", "all x.(MetalSpoon(x) -> ThermalConductor(x))", "all x.(MetalSpoken(x) -> ThermalConductor(x))", "all x.(MetalSpoon(x) -> ThermalConductor(x))", "exists x.(MetalSpoken(x) & ThermalConductor(x))", "exists x.(MetalSpoon(x) & ThermalConductor(x))"]}
{"id": "entailmentbank_validation_290", "nl": "a hot substance is a source of heat.", "fol": "", "prediction": ["all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x.((HotSubstance(x) & SourceOfHeat(x)) -> SourceOfHeat(x))", "all x y.((HotSubstance(x) & HeatSource(y)) -> SourceOf(x,y))", "all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x y.((HotSubstance(x) & HotSubstance(y)) -> SourceOfHeat(x,y))", "all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x.((HotSubstance(x) & SourceOfHeat(x)) -> SourceOfHeat(x))", "all x y.((HotSubstance(x) & HeatSource(y)) -> SourceOf(x,y))", "all x y.((HotSubstance(x) & HeatSource(y) & HotSubstance(x)) -> SourceOfHeat(x,y))", "all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x y.((HotSubstance(x) & HotSubstance(y)) -> SourceOfHeat(x,y))", "all x.(HotSubstance(x) -> HeatSource(x))", "all x.(HotSubstance(x) -> SourceOfHeat(x))", "exists x.(HotSubstance(x) & SourceOfHeat(x))", "exists x.(HotSubstance(x) & SourceOfHeat(x))"]}
{"id": "entailmentbank_validation_291", "nl": "a metal spoon is placed in a pot of hot soup.", "fol": "", "prediction": ["all x y.((MetalSpoon(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))", "all x y z.((MetalSpoon(x) & PotOfHotSoup(y) & PotOfSoup(z)) -> PlacedIn(x,y,z))", "all x y.((MetalSpoon(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))", "all x.(MetalSpoon(x) -> PlacedInHotSoupPot(x))", "all x y z.((MetalSpoon(x) & PotOfHotSoup(y) & PotOfSoup(z)) -> PlacedIn(x,y,z))", "all x y.((MetalSpoon(x) & HotSoupPot(y)) -> PlacedIn(x,y))", "all x y.((MetalSpoon(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))", "all x.(MetalSpoon(x) -> PlacedInHotSoupPot(x))", "all x y z.((MetalSpoon(x) & PotOfHotSoup(y) & PotOfSoup(z)) -> PlacedIn(x,y,z))", "exists x.(MetalSpoon(x) & PlacedInPotOfHotSoup(x))", "all x y.((MetalSpoke(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))", "exists x.(MetalSpoke(x) & PlacedInHotSoupPot(x))", "exists x.(MetalSpoon(x) & PlacedInPotOfHotSoup(x))", "all x y z.((MetalSpoon(x) & PotOfHotSoup(y) & PotOfSoup(z)) -> PlacedIn(x,y,z))", "all x y.((MetalSpoon(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))", "exists x.(MetalSpoon(x) & PlacedInHotSoupPot(x))"]}
{"id": "entailmentbank_validation_292", "nl": "the hot soup will be a source of heat for the metal spoon.", "fol": "", "prediction": ["all x.(HotSoup(x) -> HeatSourceForMetalSpoon(x))", "all x y.((HotSoup(x) & MetalSpoon(y)) -> SourceOfHeat(x,y))", "all x.(HotSoup(x) -> SourceOfHeatForMetalSpoon(x))", "(SourceOfHeatForMetalSpoon(hotSoup))", "the hotSoupSourceOfHeatForMetalSpoon(hot)", "all x y.((HotSoup(x) & MetalSpoon(y)) -> SourceOfHeat(x,y))", "all x y z.((HotSoup(x) & MetalSpoon(y) & Soup(z)) -> SourceOfHeat(x,y,z))", "all x.((HotSoup(x) & MetalSpoon(x)) -> SourceOfHeat(x))", "all x y.((HotSoup(x) & MetalSpoon(y)) -> HeatSource(x,y))", "all x.(HotSoup(x) -> HeatSource(x))", "(SourceOfHeatForMetalSpoon(hotSoup))", "all x.(HotSoup(x) -> SourceOfHeat(x))", "all x y.((HotSoup(x) & MetalSpoon(y)) -> SourceOfHeat(x,y))", "all x.(HotSoup(x) -> HeatSourceForMetalSpoon(x))", "all x y.((HotSoup(x) & MetalSpoon(y)) -> HeatSource(x,y))", "all x.(HotSoup(x) -> SourceOfHeatForMetalSpoon(x))"]}
{"id": "entailmentbank_validation_293", "nl": "if a thermal conductor is exposed to a source of heat, then thermal conduction will make the thermal conductor become hot.", "fol": "", "prediction": ["all x y.((ThermalConductor(x) & ExposedToHeat(x)) -> ThermalConductionMakesThermalConductorHot(x))", "all x.((ThermalConductor(x) & ExposedToHeatSource(x)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y z.((ThermalConductor(x) & SourceOfHeat(y) & ExposedTo(x,y)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y.((ThermalConductor(x) & SourceOfHeat(y) & ExposedTo(x,y)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y.((TerminalConductor(x) & ExposedToHeat(x) & ThermalConduction(y)) -> Hot(y))", "all x.((ThermalConductor(x) & ExposedToHeat(x)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y.((ThermalConductor(x) & ExposedToHeat(x)) -> ThermalConductionMakesThermalConductorHot(y))", "all x.(ExposedToHeat(x) -> ThermalConductionMakesThermalConductorHot(x))", "exists x.(ThermalConductor(x) & ExposedToHeatSource(x) & ThermalConductionMakesThermalConductorHot(x))", "all x y z.((ThermalConductor(x) & SourceOfHeat(y) & ExposedTo(x,y)) -> ThermalConduction(x))", "all x y z.((ThermalConductor(x) & HeatSource(y) & ExposedTo(x,y)) -> ThermalConductionMakesThermalConductorHot(x))", "all x.((ThermalConductor(x) & ExposedToHeatSource(x)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y.((ThermalConductor(x) & ExposedToHeatSource(x)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y.((TemperatureConductor(x) & HeatSource(y) & ExposedTo(x,y)) -> ThermalConductionMakesTemperatureHot(x))", "all x.((TemperatureConductor(x) & ExposedToHeat(x)) -> ThermalConductionMakesTemperatureHot(x))", "all x.((ThermalConductor(x) & ExposedToHeatSource(x)) -> ThermalConductionMakesThermalConductorHot(x))"]}
{"id": "entailmentbank_validation_294", "nl": "the metal spoon will be heated up by thermal conduction.", "fol": "", "prediction": ["all x.(MetalSpoon(x) -> HeatsUpByThermalConduction(x))", "all x y.((MetalSpoon(x) & ThermalConduction(y)) -> HeatsUp(x,y))", "all x.((MetalSpoon(x) & HeatsUpByThermalConduction(x)) -> HeatsUpByThermalConduction(x))", "all x.(MetalSpoon(x) -> HeatsUpByThermalConduction(x))", "the metal spoon will be heated up by thermalconduction.", "all x y.((MetalSpoon(x) & ThermalConduction(y)) -> HeatsUp(x,y))", "(HeatedByThermalConduction(spread)", "(HeatedByThermalConduction(Spoon) & MetalSpoon(Spoon))", "all x.((MetalSpoon(x) & ThermalConduction(x)) -> HeatsUp(x))", "all x.(MetalSpoon(x) -> HeatsUpByThermalConduction(x))", "all x y.((MetalSpoon(x) & ThermalConduction(y)) -> HeatedUpBy(x,y))", "all x.(MetalSpoon(x) -> HeatableByThermalConduction(x))", "all x.(MetalSpoon(x) -> HeatsUpByThermalConduction(x))", "all x y.((MetalSpoon(x) & ThermalConduction(y)) -> HeatsUp(x,y))", "all x.(MetalSpoon(x) -> HeatedByThermalConduction(x))", "all x y.((MetalSpoon(x) & ThermalConduction(y)) -> HeatedUpBy(x,y))"]}
{"id": "entailmentbank_validation_295", "nl": "thermal conduction is when heat flows from warmer object to cooler object.", "fol": "", "prediction": ["all x.(ThermalConduction(x) -> HeatFlowsFromWarmerObjectToCoolerObject(x))", "all x y.((TemperatureConduction(x) & WarmerObject(y)) -> HeatFlowsFromTo(x,y))", "all x y z.((TemperatureConduction(x) & WarmerObject(y) & CoolerObject(z)) -> HeatFlowsFromTo(x,y,z))", "all x.((HeatFlowsFromWarmerObjectToCoolerObject(x)) -> ThermalConduction(x))", "(HeatFlowsFromWarmerObjectToCoolerObject(thermalConduction))", "all x y.((ThermalConduction(x) & WarmerObject(y)) -> HeatFlowsFromToCoolerObject(x,y))", "all x.(ThermalConduction(x) -> HeatFlowsFromWarmerObjectToColderObject(x))", "all x.((WarmerObject(x) & CoolerObject(x)) -> ThermalConduction(x))", "(HeatFlowsFromWarmerToCooler(thermalConduction))", "all x y.((TemperatureConduction(x) & WarmerObject(y) & CoolerObject(y)) -> HeatFlowsFromTo(x,y))", "all x y z.((ThermalConduction(x) & WarmerObject(y) & CoolerObject(z)) -> HeatFlowsFromTo(x,y,z))", "all x.(ThermalConduction(x) -> HeatFlowsFromWarmerObjectToCoolerObject(x))", "all x.(TemperatureConduction(x) -> HeatFlowsFromWarmerToCooler(x))", "all x y.((ThermalConduction(x) & WarmerObject(y)) -> HeatFlowsFromTo(x,y))", "all x.(ThermalConduction(x) -> HeatFlowsFromWarmerObjectToColderObject(x))", "exists x.(TemperatureConduction(x) & HeatFlowsFromWarmerObjectToCoolerObject(x))"]}
{"id": "entailmentbank_validation_296", "nl": "thermal conduction is when materials conduct heat through those materials through collision of particles.", "fol": "", "prediction": ["all x y.((Material(x) & Material(y) & ConductsHeat(x,y)) -> CollisionOfParticles(x))", "all x.((Material(x) & ConductsHeat(x) & CollisionOfParticles(x)) -> ThermalConduction(x))", "all x y z.((Material(x) & Material(y) & Material(z) & ConductsHeat(x,y,z)) -> CollisionOfParticles(x))", "all x y.((Material(x) & Material(y) & ConductsHeat(x,y) & CollisionOfParticles(x)) -> ThermalConduction(x))", "all x.(ThermalConduction(x) -> (ConductsHeat(x) & ThroughCollusionOfParticles(x)))", "all x.((Material(x) & ConductsHeat(x) & CollisionOfParticles(x)) -> ThermalConduction(x))", "all x.((Materials(x) & ConductsHeat(x) & CollisionOfParticles(x)) -> ThermalConduction(x))", "all x y.((Material(x) & Material(y) & ConductsHeatThrough(x,y) & CollisionOfParticles(x)) -> ThermalConduction(x))", "all x y z.((Material(x) & Material(y) & Material(z) & ConductsHeat(x,y,z)) -> CollisionOfParticles(x,y,z))", "(all x.(ThermalConduction(x) -> ConductsHeat(x)))", "all x.(ThermalConduction(x) -> (ConductsHeat(x) & Materials(x) & CollisionOfParticles(x)))", "all x.((Materials(x) & ConductsHeatThroughCoupling(x)) -> ThermalConduction(x))", "all x.(ThermalConduction(x) -> (ConductsHeatThroughMaterials(x) & CollisionOfParticles(x)))", "all x y z.((Material(x) & Material(y) & Material(z)) -> ConductsHeatThroughCollusion(x,y,z))", "all x y.((Material(x) & Material(y) & ConductsHeat(x,y)) -> CollisionOfParticles(x,y))", "exists x.(TemperalConduction(x) & Material(x) & ConductsHeatThroughCoupling(x))"]}
{"id": "entailmentbank_validation_297", "nl": "thermal conduction is a heat exchange process involving the collision of particles.", "fol": "", "prediction": ["all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCollisionOfParticles(x)))", "all x y.((ThermalConduction(x) & HeatExchangeProcess(y)) -> InvolvesCollisionOfParticles(x,y))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & CollisionOfParticles(x)))", "(HeatExchangeProcess(thermalConduction) & CollisionOfParticles(thermalConduction))", "all x.((ThermalConduction(x) & HeatExchangeProcess(x) & CollisionOfParticles(x)) -> HeatExchange(x))", "(HeatExchangeProcess(thermalConduction) & InvolvesCollisionOfParticles(thermalConduction))", "all x y z.((ThermalConduction(x) & Particle(y) & Particle(z)) -> HeatExchangeProcess(x,y,z))", "all x y.((ThermalConduction(x) & HeatExchangeProcess(y)) -> CollisionOfParticles(x,y))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCollisionOfParticles(x)))", "all x y.((ThermalConduction(x) & Particle(y)) -> HeatExchangeProcess(x,y))", "(HeatExchangeProcess(thermalConduction) & CollisionOfParticles(thermalConduction))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & CollisionOfParticles(x)))", "all x.(TemperatalConduction(x) -> HeatExchangeProcess(x))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCollisionOfParticles(x)))", "all x y.((TemperatureConduction(x) & Particle(y)) -> HeatExchangeProcess(x))", "all x.(TemperatureConduction(x) -> (HeatExchangeProcess(x) & InvolvesCollisionOfParticles(x)))"]}
{"id": "entailmentbank_validation_298", "nl": "longitudinal waves travel through pattern of compressions and rarefactions.", "fol": "", "prediction": ["all x.(LanguageWaves(x) -> (TravelsThroughCompressions(x) & TravelsThroughRarefactions(x)))", "all x y.((LanguageWaves(x) & PatternOfCompressions(y) & Rarefactions(y)) -> TravelsThrough(x,y))", "all x y z.((LanguageWaves(x) & PatternOfCompressions(y) & Rarefactions(z)) -> TravelsThrough(x,y,z))", "all x.(LentalWaves(x) -> (TravelsThroughCompressions(x) & TravelsThroughRarefactions(x)))", "all x y.((LanguageWaves(x) & PatternOfCompressionsAndRarefactions(y)) -> TravelsThrough(x,y))", "all x.(LanguageWaves(x) -> (TravelsThroughCompressions(x) & TravelsThroughRarefactions(x)))", "all x.((LanguageWaves(x) & PatternOfCompressions(x) & Rarefactions(x)) -> TravelsThrough(x,y))", "all x.(LanguageWaves(x) -> TravelsThroughCompressionsAndRarefactions(x))", "(TravelsThroughCompressionsAndRarefactions(leastWaves))", "all x y z.((LongitudinalWaves(x) & PatternOfCompressions(y) & Rarefactions(z)) -> TravelsThrough(x,y,z))", "all x.(LongitudinalWaves(x) -> (TravelsThroughCompressions(x) & TravelsThroughRarefactions(x)))", "all x y z.((LanguageWaves(x) & Compression(y) & Rarefaction(z)) -> TravelsThrough(x,y,z))", "all x.(LanguageWaves(x) -> (TravelsThrough(x,Compressions) & TravelsThrough(x,Rarefactions)))", "all x y.((LongitudinalWaves(x) & PatternOfCompressionsAndRarefactions(y)) -> TravelsThrough(x,y))", "all x y.((LanguageWaves(x) & PatternOfCompressions(y) & Rarefactions(z)) -> TravelsThrough(x,y,z))", "all x.((LanguageWaves(x) & PatternOfCompressions(x) & Rarefactions(x)) -> TravelsThrough(x,y))"]}
{"id": "entailmentbank_validation_299", "nl": "compression waves produces compressions and rarefactions.", "fol": "", "prediction": ["all x.(CompressionWaves(x) -> (ProducesCompressions(x) & ProducesRarefactions(x)))", "all x y.((CompressionWaves(x) & Compression(y)) -> (Produces(x,y) & Produces(x,y)))", "all x.(CompressionWaves(x) -> (ProducesCompressions(x) & ProducesRarefactions(x)))", "(all x.(CompressionWaves(x) -> ProduceCompressions(x)) & all y.(CompressionWaves(y) -> ProduceRarefactions(y)))", "all x.((CompressionWaves(x) & Compression(x)) -> (Produces(x,Compression) & Produces(x,Rarefaction)))", "(ProducesCompressionWaves(compression,compression) & ProducesRarefactions(compression,compression))", "all x y.((CompressionWaves(x) & Compression(y)) -> (Produces(x,y) & Produces(x,y)))", "all x y z.((CompressionWaves(x) & Compression(y) & Rarefaction(z)) -> (Produces(x,y) & Produces(x,z)))", "all x y z.((CompressionWaves(x) & CompressionWaves(y) & Rarefactions(z)) -> (Produces(x,y) & Produces(x,z)))", "all x y.((CompressionWaves(x) & Compression(y)) -> (Produce(x,y) & Produce(x,y)))", "all x.(CompressionWaves(x) -> (ProducesCompressions(x) & ProducesRarefactions(x)))", "all x.(CompressionWaves(x) -> (ProducesCompression(x) & ProducesRarefaction(x)))", "all x.(CompressionWaves(x) -> (ProducesCompressions(x) & ProducesRarefactions(x)))", "all x y.((CompressionWaves(x) & Compression(y)) -> (Produce(x,y) & Rarefaction(y)))", "all x.(CompressionWaves(x) -> ProducesCompressionsAndRarefactions(x))", "all x.(CompressionWaves(x) -> (ProducesCompressions(x) & ProducesRarefactions(x)))"]}
{"id": "entailmentbank_validation_300", "nl": "longitudinal waves are also called compression waves.", "fol": "", "prediction": ["all x.(LanguageWaves(x) -> CompressionWaves(x))", "all x y.((LanguageWaves(x) & LongitudinalWaves(y)) -> CompressionWaves(x))", "all x.(LanguageWaves(x) -> CompressionWaves(x))", "all x.((LanguageWaves(x) & LongitudinalWaves(x)) -> CompressionWaves(x))", "all x.(LengthlessWaves(x) -> (CompressionWaves(x) & LongitudinalWaves(x)))", "all x.(LanguageWaves(x) -> CompressionWaves(x))", "all x y.((LanguageWaves(x) & LongitudinalWaves(y)) -> CompressionWaves(x))", "all x.((LanguageWaves(x) & CompressionWaves(x)) -> LongitudinalWaves(x))", "all x.(LengthlessWaves(x) -> (CompressionWaves(x) | LongitudinalWaves(x)))", "(all x.(LanguageWaves(x) -> CompressionWaves(x)))", "all x.(LongitudinalWaves(x) -> CompressionWaves(x))", "all x y.((LanguageWaves(x) & LongitudinalWaves(y)) -> CompressionWaves(x,y))", "all x.(LengtheningWaves(x) -> (CompressionWaves(x) | LongitudinalWaves(x)))", "all x.(LanguageWaves(x) -> CompressionWaves(x))", "(all x.(LengthlessWaves(x) -> CompressionWaves(x)))", "all x.(LanguageWaves(x) -> CompressionWaves(x))"]}
{"id": "entailmentbank_validation_301", "nl": "longitudinal waves cause object to move in the same direction of the wave.", "fol": "", "prediction": ["all x y.((LanguageWaves(x) & Object(y)) -> MovesInSameDirection(y,x))", "all x.(LanguageWaves(x) -> CausesObjectToMoveInSameDirection(x))", "all x y z.((LanguageWaves(x) & Object(y) & DirectionOfWaves(z)) -> CausesMovement(y,z))", "all x y.((LanguageWaves(x) & Object(y)) -> MovesInSameDirection(y,x))", "all x.(LengtheningWaves(x) -> CausesObjectToMoveInSameDirection(x))", "all x.(LanguageWaves(x) -> CausesObjectToMoveInSameDirection(x))", "all x y.((LengthlessWaves(x) & Object(y)) -> CausesMovementInSameDirection(y,x))", "all x.((LanguageWaves(x) & CausesObjectToMoveInSameDirection(x,Waves)) -> MoveInSameDirection(x,Waves))", "all x y z.((LanguageWaves(x) & Object(y) & Direction(z)) -> CausesMovement(y,z))", "all x.(LanguageWaves(x) -> CausesObjectToMoveInSameDirectionOfWaves(x))", "all x y.((LongitudinalWaves(x) & Object(y)) -> MovesInSameDirection(y,x))", "all x y z.((LengthlessWaves(x) & Object(y) & DirectionOfWaves(z)) -> CausesMovementInSameDirection(y,z))", "all x y.((LanguageWaves(x) & Object(y)) -> MoveInSameDirection(y,x))", "all x y.((LengtheningWaves(x) & Object(y)) -> MovesInSameDirection(y,x))", "all x.((LanguageWaves(x) & CausesObjectToMoveInSameDirection(x,wave)) -> MoveInSameDirection(x,wave))", "all x.(LanguageWaves(x) -> CausesObjectToMoveInSameDirection(x))"]}
{"id": "entailmentbank_validation_302", "nl": "compression waves cause object to move in the same direction of the wave.", "fol": "", "prediction": ["all x y.((CompressionWaves(x) & Object(y)) -> MovesInSameDirection(y,x))", "all x.(CompressionWaves(x) -> CausesObjectToMoveInSameDirection(x))", "all x y z.((CompressionWaves(x) & Object(y) & Direction(z)) -> CausesToMoveInSameDirection(y,z))", "(CompressionWaves(x) -> CausesObjectToMoveInSameDirection(x))", "all x y.((CompressionWaves(x) & Object(y)) -> MovesInSameDirection(y,x))", "all x.((CompressionWaves(x) & CausesObjectToMoveInSameDirection(x)) -> MoveInSameDirection(x))", "all x.(CompressionWaves(x) -> CausesObjectToMoveInSameDirection(x))", "all x y z.((CompressionWaves(x) & Object(y) & Direction(z)) -> MovesInSameDirection(y,z))", "all x y.((CompressionWaves(x) & Object(y)) -> MoveInSameDirection(y,x))", "all x.(CompressionWaves(x) -> CausesObjectToMoveInSameDirectionOfWaves(x))", "all x y z.((CompressionWaves(x) & Object(y) & DirectionOfWaves(z)) -> CausesMovement(y,z))", "all x y.((CompressionWaves(x) & Object(y)) -> CausesToMoveInSameDirection(x,y))", "all x y.((CompressionWaves(x) & CompressionWaves(y)) -> CausesObjectToMoveInSameDirection(x,y))", "all x.(CompressionWaves(x) -> MoveInSameDirection(x))", "all x.(CompressionWaves(x) -> CausesObjectToMoveInSameDirection(x))", "all x.(CompressionWaves(x) -> CausesObjectToMoveInSameDirectionOfWaves(x))"]}
{"id": "entailmentbank_validation_303", "nl": "a surface is a part of an object.", "fol": "", "prediction": ["all x y.((Surface(x) & Object(y)) -> PartOf(x,y))", "all x.(Surface(x) -> PartOfObject(x))", "all x y.((Surface(x) & Object(y)) -> PartOf(x,y))", "all x.(Surface(x) -> PartOfObject(x))", "all x y z.((Surface(x) & Object(y) & PartOf(x,y)) -> PartOf(x,z))", "all x y.((Surface(x) & Object(y)) -> PartOf(x,y))", "all x.(Surface(x) -> PartOfObject(x))", "all x y z.((Surface(x) & Object(y) & PartOf(x,y)) -> PartOf(x,z))", "all x y.((Surface(x) & Object(y)) -> PartOf(x,y))", "all x.(Surface(x) -> PartOfObject(x))", "exists x.(Surface(x) & PartOfObject(x))", "all x y.((Surface(x) & Object(y)) -> PartOf(x,y))", "exists x.(Surface(x) & PartOfObject(x))", "all x y.((Surface(x) & Object(y)) -> PartOf(x,y))", "exists x.(Surface(x) & PartOfObject(x))", "exists x.(Surface(x) & PartOfObject(x))"]}
{"id": "entailmentbank_validation_304", "nl": "friction occurs when two object's surfaces move against each other.", "fol": "", "prediction": ["all x y.((Object(x) & Surface(y) & MoveAgainst(x,y)) -> FrictionOccurs(x))", "all x.((ObjectSurface(x) & MoveAgainst(x,y)) -> FrictionOccurs(x))", "all x y.((Object(x) & Surface(y) & MovesAgainst(x,y)) -> FrictionOccurs(x))", "all x y z.((Object(x) & Surface(y) & Surface(z) & MoveAgainst(x,y,z)) -> FrictionOccurs(x))", "all x.((ObjectSurface(x) & MovesAgainst(x,y)) -> FrictionOccurs(x))", "all x y.((ObjectSurface(x) & Surface(y) & MoveAgainst(x,y)) -> FrictionOccurs(x,y))", "all x y.((Object(x) & Surface(y) & MoveAgainst(x,y)) -> FrictionOccurs(x,y))", "all x y z.((Object(x) & Surface(y) & Surface(z) & MoveAgainst(y,z)) -> FrictionOccurs(x,y,z))", "(all x.(FrictionOfObjects(x) -> MoveAgainst(x,y)))", "all x.(FrictionOfObjectSurfaces(x) -> MovesAgainstSurface(x))", "all x y.((ObjectSurface(x) & Surface(y) & MovesAgainst(x,y)) -> FrictionOccurs(x))", "all x.((ObjectSurface(x) & MoveAgainst(x,y)) -> FrictionOccurs(x))", "all x y z.((Object(x) & Surface(y) & Surface(z) & MovesAgainst(x,y,z)) -> FrictionOccurs(x,y,z))", "exists x.(ObjectSurfaceMovement(x) & MovesAgainst(x,y))", "all x.(FrictionOfObjects(x) -> MovesAgainstSurfaces(x))", "all x.((ObjectSurface(x) & MovesAgainst(x,y)) -> FrictionOccurs(x))"]}
{"id": "entailmentbank_validation_305", "nl": "skidding is when the tire of a vehicle slides on the road without rotating.", "fol": "", "prediction": ["all x y.((Vehicle(x) & Tire(y) & SlidesOnRoad(y,x)) -> Skidding(x))", "all x.(Skidding(x) -> (TireSlidesOnRoad(x) & -Rotating(x)))", "all x y z.((Tire(x) & Vehicle(y) & Road(z) & SlidesOn(x,y,z)) -> -Rotating(x,y,z))", "all x.(Skidding(x) -> (TireSlidesOnRoad(x) & -Rotating(x)))", "all x.((TireOfVehicle(x) & SlidesOnRoad(x)) -> Skidding(x))", "(Skidding) -> (TireSlidesOnRoad(x) & -Rotating(x)))", "all x y.((Vehicle(x) & Tire(y) & SlidesOnRoad(y,x)) -> Skidding(x))", "all x y.((Tire(x) & Vehicle(y) & SlidesOnRoad(x,y)) -> Skidding(x))", "all x.(Skidding(x) -> (TireSlidesOnRoad(x) & -Rotating(x)))", "all x y z.((Tire(x) & Vehicle(y) & Road(z) & SlidesOn(x,z)) -> -Rotating(x,y,z))", "all x y.((Vehicle(x) & Tire(y) & SlidesOnRoad(y,x)) -> Skidding(x))", "all x.((TireOfVehicle(x) & SlidesOnRoad(x)) -> Skidding(x))", "all x y z.((Tire(x) & Vehicle(y) & Road(z) & SlidesOn(x,y,z) & -Rotating(x)) -> Skidding(x))", "all x y.((Vehicle(x) & Tire(y)) -> SlidesOnRoadWithoutRotating(y,x))", "all x.(Skidding(x) -> (TireSlidsOnRoad(x) & -Rotating(x)))", "all x.(Skidding(x) -> (TireSlidesOnRoad(x) & -Rotating(x)))"]}
{"id": "entailmentbank_validation_306", "nl": "a tire is a kind of object.", "fol": "", "prediction": ["all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> Object(x))", "all x y.(Tire(x) -> Object(y))", "all x.(Tire(x) -> Object(x))", "all x y.(Tire(x) -> (TypeOfObject(x) & Tire(y)))", "all x y.(Tire(x) -> Object(y))", "all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> Object(x))", "all x y.(Tire(x) -> Object(y))", "exists x.(Tire(x) & ArtOfObject(x))", "exists x.(Tire(x) & ArtOfObject(x))", "all x.(Tire(x) -> Object(x))", "exists x.(Tire(x) & TypeOfObject(x))", "exists x.(Tire(x) & ArtOfObject(x))"]}
{"id": "entailmentbank_validation_307", "nl": "skidding causes friction between the tire and the road.", "fol": "", "prediction": ["all x y.((Skidding(x) & Tire(y)) -> CausesFriction(x,y))", "all x y z.((Skidding(x) & Tire(y) & Road(z)) -> CausesFriction(x,y,z))", "all x.(Skidding(x) -> CausesFrictionBetweenTireAndRoad(x))", "(FrictionBetweenTireAndRoad(skidding)", "all x.(Skidding(x) -> CausesFriction(x,Tire,Road))", "all x y.((Skidding(x) & Tire(y)) -> CausesFriction(x,y))", "all x y z.((Skidding(x) & Tire(y) & Road(z)) -> CausesFriction(x,y,z))", "all x y.((Skidding(x) & Tire(y) & Road(y)) -> CausesFriction(x,y))", "all x.(Skidding(x) -> CausesFrictionBetweenTireAndRoad(x))", "all x y z.((Skidding(x) & Tire(y) & Road(z)) -> CausesFriction(x,y,z))", "all x.(Skidding(x) -> CausesFriction(x,Tire,Road))", "all x.(Skidding(x) -> CausesFrictionBetweenTireAndRoad(x))", "all x y.((Skidding(x) & Tire(y)) -> CausesFriction(x,y))", "all x.(Skidding(x) -> CausesFrictionBetweenTireAndRoad(x))", "all x y z.((Skidding(x) & Tire(y) & Road(z)) -> CausesFriction(x,y,z))", "all x.(Skidding(x) -> CausesFriction(x,Tire,Road))"]}
{"id": "entailmentbank_validation_308", "nl": "friction causes the temperature of an object to increase.", "fol": "", "prediction": ["all x y.((Friction(x) & Object(y)) -> CausesTemperatureToIncrease(x,y))", "all x.(Friction(x) -> CausesTemperatureToIncrease(x))", "all x y.((Friction(x) & Object(y)) -> IncreasesTemperature(x,y))", "all x.((Friction(x) & Object(y)) -> IncreasesTemperature(x,y))", "all x y z.((Friction(x) & Object(y) & Temperature(z)) -> Increases(y,z))", "(CausesTemperatureIncrease(friction) -> Object(friction))", "all x.(Friction(x) -> IncreasesTemperatureOfObject(x))", "(IncreasedTemperatureOfObject(x) -> Friction(x))", "all x y.((Friction(x) & Object(y)) -> CausesTemperatureIncrease(x,y))", "all x y z.((Friction(x) & Object(y) & Temperature(z)) -> CausesToIncrease(x,y,z))", "all x.((Friction(x) & Temperature(x)) -> Increase(x))", "all x.(Friction(x) -> CausesTemperatureIncrease(x))", "all x y.((Friction(x) & Object(y)) -> IncreasesTemperature(x,y))", "all x y.((Friction(x) & Object(y) & CausesTemperatureIncrease(x,y)) -> Increase(x,y))", "all x y.((Friction(x) & Object(y)) -> TemperatureIncrease(x,y))", "all x.(Friction(x) -> TemperatureIncrease(x))"]}
{"id": "entailmentbank_validation_309", "nl": "friction causes the temperature of the tire to increase.", "fol": "", "prediction": ["all x.(Friction(x) -> CausesTemperatureToIncrease(x))", "all x y.((Tire(x) & Friction(y)) -> IncreasesTemperature(x,y))", "all x.((Tire(x) & Friction(x)) -> TemperatureIncrease(x))", "(IncreasedTemperatureOfTire(x))", "-FrictionCausesTemperatureToIncrease(Tire)", "all x y.((Tire(x) & Friction(y)) -> TemperatureIncrease(x,y))", "the friction causes the temperature of the tire to increase.", "all x y z.((Tire(x) & Friction(y) & Temperature(z) & Increase(z)) -> CausesToIncrease(x,y,z))", "friction causes the temperature of tire to increase.", "all x y.((Tire(x) & Friction(y)) -> CausesTemperatureToIncrease(x,y))", "all x.(Friction(x) -> IncreasedTemperature(x))", "all x.((Tire(x) & Friction(x)) -> IncreasesTemperature(x))", "friction causes temperature to increase of tire.", "(IncreasedTemperatureOfTire(x))", "all x.(Tire(x) -> IncreasesTemperature(x))", "all x y.((Tire(x) & Friction(y)) -> IncreasedTemperature(x,y))"]}
{"id": "entailmentbank_validation_310", "nl": "if the tire overheats, some chemical in the tire will vaporized.", "fol": "", "prediction": ["all x.((Tire(x) & Overheats(x)) -> ChemicalInTire(x))", "all x y.((Tire(x) & Overheats(x)) -> ChemicalInTire(y))", "all x.((Tire(x) & Overheats(x)) -> Vaporized(x))", "(OverheatsTire(x) -> VaporizedChemicalInTire(x))", "all x y z.((Tire(x) & Overheats(x) & ChemicalInTire(y) & Vaporized(y)) -> Vaporized(y))", "all x y.((Tire(x) & Overheats(x)) -> Chemical(y))", "(all x.(OverheatsTire(x) -> VaporizedChemical(x)))", "all x.((Tire(x) & Overheats(x)) -> ChemicalInTireVaporized(x))", "all x.((TireOverheats(x) & ChemicalInTire(x)) -> Vaporized(x))", "all x y.((Tire(x) & Tire(y) & Overheats(x)) -> Vaporized(y))", "exists an oxygenase in the tire that will be vaporized if the tire overheats.", "all x.(Overheats(x) -> ChemicalInTire(x))", "all x.(OverheatsTire(x) -> VaporizedChemical(x))", "all x y.((Tire(x) & Overheats(x)) -> Vaporized(y))", "all x.((Tire(x) & Overheats(x)) -> Vaporized(x))", "all x y.((Tire(x) & Overheats(x)) -> ChemicalInTire(y,x))"]}
{"id": "entailmentbank_validation_311", "nl": "if the temperature of the tire keeps increasing, the tire will overheat.", "fol": "", "prediction": ["all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheats(x))", "all x y.((Tire(x) & Temperature(y) & KeepsIncreasing(x,y)) -> Overheats(x))", "-(KeepsTemperatureIncreasing(Tire) & Overheats(Tire))", "(KeepsTemperatureIncreasing(Tire) -> Overheats(Tire))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheats(x))", "all x.((Tire(x) & TemperatureIncreasing(x)) -> Overheats(x))", "all x y.((Tire(x) & TemperatureIncreasing(x) & Tire(y)) -> Overheats(y))", "-(KeepsTemperatureIncreasing(Tire) & Overheat(Tire))", "all x y.((Tire(x) & Temperature(y) & KeepsIncreasing(x,y)) -> Overheat(x))", "all x.((Tire(x) & TemperatureIncreases(x)) -> Overheats(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheat(x))", "all x y.((Tire(x) & Tire(y) & KeepsIncreasingTemperature(x,y)) -> Overheats(x,y))", "all x y.((Tire(x) & TemperatureIncrementing(x)) -> Overheats(x))", "all x.((Tire(x) & TemperatureIncreasing(x)) -> Overheats(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheats(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheats(x))"]}
{"id": "entailmentbank_validation_312", "nl": "if the temperature of the tire keeps increasing, some chemical in the tire will be vaporized.", "fol": "", "prediction": ["all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Vaporized(x))", "all x y.((Tire(x) & TemperatureIncreases(x)) -> Vaporized(y))", "-(KeepsTemperatureIncreasing(Tire) & ChemicalInTire(Tire))", "all x y.((Tire(x) & TemperatureIncreasing(x) & ChemicalInTire(y)) -> Vaporized(y))", "all x.((Tire(x) & TemperatureIncreases(x)) -> ChemicalVaporized(x))", "(KeepsTemperatureIncreasing(Tire) -> Vaporized(Tire))", "all x y z.((Tire(x) & Temperature(y) & Chemical(z) & KeepsIncreasing(x,y)) -> Vaporized(z))", "all x y.((Tire(x) & Temperature(y) & KeepsIncreasing(x,y)) -> Vaporized(x))", "exists x.(Tire(x) & KeepsIncreasingTemperature(x) & ChemicalInTire(x) & Vaporized(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Vaporized(x))", "all x y.((Tire(x) & TemperatureKeepsIncreasing(x,y)) -> Vaporized(x))", "all x.((TireTemperature(x) & KeepsIncreasing(x)) -> Vaporized(x))", "all x y.((Tire(x) & KeepsIncreasingTemperature(x) & ChemicalInTire(y)) -> Vaporized(y))", "all x.((Tire(x) & TemperatureIncreases(x)) -> Vaporized(x))", "all x.((TireTemperature(x) & KeepsIncreasing(x)) -> ChemicalInTireVaporized(x))", "all x.((TireTemperature(x) & KeepsIncreasing(x)) -> Vaporized(x))"]}
{"id": "entailmentbank_validation_313", "nl": "friction causes some chemicals in the tire to vaporize.", "fol": "", "prediction": ["all x y.((Tire(x) & Chemical(y)) -> CausesToVaporize(x,y))", "all x.(Friction(x) -> CausesChemicalsToVaporize(x))", "all x y.((Friction(x) & Tire(y)) -> CausesChemicalsToVaporize(x,y))", "all x y z.((Friction(x) & Chemical(y) & Tire(z) & CausesToVaporize(x,y,z)) -> CausesVaporization(x,y,z))", "(ChemicalsInTireVaporize(x) & CausesFriction(x))", "all x y.((Tire(x) & Chemical(y)) -> CausesToVaporize(x,y))", "all x.((Tire(x) & Chemicals(x)) -> Vaporize(x))", "(ChemicalsInTireVaporize(friction) & Causes(friction,friction))", "all x y z.((Tire(x) & Chemical(y) & Tire(z) & Friction(x,y,z)) -> CausesToVaporize(y,z))", "(all x.(Friction(x) -> CausesChemicalsToVaporize(x)))", "all x.((Friction(x) & ChemicalsInTire(x)) -> Vaporizes(x))", "all x y.((Tire(x) & Chemicals(y)) -> CausesToVaporize(x,y))", "all x.(Friction(x) -> CausesChemicalsToVaporize(x))", "exists x.(Tire(x) & CausesChemicalsToVaporize(x))", "all x.(FrictionChemicalsInTire(x) -> Vaporize(x))", "all x y.((Friction(x) & Tire(y)) -> CausesChemicalsToVaporize(x,y))"]}
{"id": "entailmentbank_validation_314", "nl": "vaporizing a substance causes smoke.", "fol": "", "prediction": ["all x y.((Substance(x) & Vaporizing(x,y)) -> CausesSmoke(x))", "all x.((Substance(x) & Vaporizes(x)) -> CausesSmoke(x))", "all x.(VaporizingSubstance(x) -> CausesSmoke(x))", "all x y z.((Substance(x) & Vaporizing(x,y) & Substance(z)) -> CausesSmoke(x,z))", "all x y.((Substance(x) & Vaporizing(x,y)) -> CausesSmoke(x))", "all x.((Substance(x) & Vaporizes(x)) -> CausesSmoke(x))", "all x y.((Substance(x) & Vaporizes(x,y)) -> CausesSmoke(x))", "all x y.((Substance(x) & Vaporizing(x,y)) -> CausesSmoke(x))", "all x.((Substance(x) & Vaporize(x)) -> CausesSmoke(x))", "all x y z.((Substance(x) & Vaporizing(x,y) & Substance(z)) -> CausesSmoke(x,z))", "all x.(VaporizingSubstance(x) -> CausesSmoke(x))", "all x y z.((Substance(x) & Vaporizing(x,y,z)) -> CausesSmoke(x))", "exists x.(Vaporizing(x) & CausesSmoke(x))", "all x.(VaporizingSubstance(x) -> CausesSmoke(x))", "all x y.((Substance(x) & Vaporizes(x,y)) -> CausesSmoke(x,y))", "all x y.((Substance(x) & Vaporizing(x,y)) -> CausesSmoke(y))"]}
{"id": "entailmentbank_validation_315", "nl": "friction causes the tire to produce smoke.", "fol": "", "prediction": ["all x.(Friction(x) -> CausesTireToProduceSmoke(x))", "all x y.((Tire(x) & Friction(y)) -> ProducesSmoke(x,y))", "all x.(Tire(x) -> ProducesSmoke(x))", "all x.((Tire(x) & Friction(x)) -> ProducesSmoke(x))", "(ProducesSmoke(tire) -> CausesFriction(tire))", "(all x.(Friction(x) -> ProducesSmoke(x)))", "all x y z.((Tire(x) & Friction(y) & Smoke(z)) -> Produces(x,y,z))", "all x y.((Tire(x) & Friction(y)) -> ProducesSmoke(x,y))", "friction causes tire to produce smoke.", "all x.(Friction(x) -> CausesTireToProduceSmoke(x))", "(FrictionCausesTireToProduceSmoke(tire,smoke))", "all x y.((Tire(x) & Friction(y) & CausesToProduceSmoke(x,y)) -> ProducesSmoke(x))", "all x.(Tire(x) -> CausesSmoke(x))", "all x y.((Tire(x) & Friction(y)) -> ProducesSmoke(x,y))", "all x.(Friction(x) -> ProducesSmoke(x))", "all x.((Tire(x) & Friction(x)) -> ProducesSmoke(x))"]}
{"id": "entailmentbank_validation_316", "nl": "as the friction increases, the resistance on the object to move will increase.", "fol": "", "prediction": ["all x.((FrictionIncreases(x) & IncreasesResistance(x)) -> MovesObject(x))", "all x y.((Friction(x) & Object(y) & Increases(x,y)) -> IncreasesResistance(x,y))", "all x.((Friction(x) & Increases(x)) -> IncreasesResistanceOnObject(x))", "all x y.((Friction(x) & Object(y) & Increases(x)) -> IncreasesResistance(y))", "(IncreasesFriction(x) -> IncreasesResistanceOnObject(x))", "as friction increases, the resistance on object to move will increase.", "all x y z.((Friction(x) & Object(y) & Friction(z) & Increases(x,y)) -> IncreasesResistance(y,z))", "-(FrictionIncreases(friction) -> ResistanceIncrease(friction,friction))", "as friction increases, resistance on object to move will increase.", "as friction increases, the resistance on the object to move will increase.", "all x.((FrictionIncreases(x) & IncreasedResistance(x)) -> Move(x))", "all x y.((Friction(x) & Object(y)) -> IncreasedResistance(x,y))", "all x.((Friction(x) & Increases(x)) -> IncreasesResistance(x))", "(all x.(FrictionIncreases(x) -> ResistanceIncreased(x)))", "all x y.((Friction(x) & Object(y) & IncreasedFriction(x)) -> IncreasedResistance(y))", "all x.(FrictionIncreases(x) -> ResistanceIncreases(x))"]}
{"id": "entailmentbank_validation_317", "nl": "as roughness of a surface increases, friction will increase.", "fol": "", "prediction": ["all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesFriction(x))", "all x.((Roughness(x) & Surface(x)) -> FrictionIncrease(x))", "all x y.((Surface(x) & Roughness(y) & Increases(x,y)) -> FrictionIncreases(x))", "all x.((Roughness(x) & Increases(x)) -> FrictionIncreases(x))", "(all x.(RoughnessOfSurface(x) -> Increases(x)) & all y.(Friction(y) -> Increases(y)))", "all x y z.((Roughness(x) & Surface(y) & Friction(z) & Increases(x,y)) -> Increases(z,y))", "all x y.((Roughness(x) & Surface(y)) -> IncreasesFriction(x,y))", "as roughness increases, friction increases.", "(all x.(RoughnessIncreases(x) -> FrictionIncreases(x)))", "all x y.((Surface(x) & Roughness(y)) -> IncreasesFriction(x,y))", "all x.((RoughnessIncreases(x) & Surface(x)) -> FrictionIncreases(x))", "all x.((Surface(x) & IncreasedRoughness(x)) -> IncreasedFriction(x))", "all x.((Roughness(x) & Surface(x)) -> FrictionIncrease(x))", "as roughness increases, friction increases.", "all x.(RoughnessIncreases(x) -> FrictionIncreases(x))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesFriction(x))"]}
{"id": "entailmentbank_validation_318", "nl": "as the roughness of a surface increases, the resistance on the object to move will increase.", "fol": "", "prediction": ["all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesResistanceOnObjectToMove(x))", "all x.((Roughness(x) & Surface(x)) -> IncreasedResistance(x))", "all x y z.((Roughness(x) & Surface(y) & Object(z) & Increases(x,y)) -> IncreasesResistanceToMove(z,y))", "as the roughness of a surface increases, the resistance on the object to move will increase.", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesResistanceOnMovement(x))", "all x y.((Surface(x) & Roughness(x) & Increases(x)) -> IncreasedResistance(y))", "all x.((Roughness(x) & Surface(x)) -> IncreasesResistanceOnMovement(x))", "all x.((RoughnessIncreases(x) & Surface(x)) -> ResistanceIncreases(x))", "as roughness increases, resistance on object to move increases.", "all x.(RoughnessIncreasesSurface(x) -> IncreasesResistanceOnObjectToMove(x))", "all x.((Surface(x) & IncreasedRoughness(x)) -> IncreasedResistance(x))", "(all x.(RoughnessOfSurface(x) -> IncreasedResistance(x)))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> ResistanceOnObjectToMove(x,y))", "all x y.((RoughnessOfSurface(x) & Surface(y)) -> IncreasesResistanceOnMovement(x,y))", "all x y z.((Roughness(x) & Surface(y) & Object(z) & Increases(x,y)) -> IncreasesResistance(z,y))", "all x y.((Surface(x) & Roughness(x,y)) -> IncreasedResistance(y))"]}
{"id": "entailmentbank_validation_319", "nl": "carpet has a rough surface.", "fol": "", "prediction": ["all x.(Carpet(x) -> RoughSurface(x))", "all x.(Kitchen(x) -> RoughSurface(x))", "all x y.((Carpet(x) & Rug(y)) -> RoughSurface(x))", "all x.(Cedar(x) -> HasRoughSurface(x))", "all x.(Carpet(x) -> RoughSurface(x))", "all x y.((Kitchen(x) & Rug(y)) -> RoughSurface(x,y))", "(RoughSurface(koffer))", "all x y.((Carpet(x) & RoughSurface(y)) -> Has(x,y))", "all x.(Kitchen(x) -> RoughSurface(x))", "(RoughSurface(Kitchen))", "all x.(Carpet(x) -> HasRoughSurface(x))", "all x.(Cedar(x) -> HasRoughSurface(x))", "all x.(Kitchen(x) -> RoughSurface(x))", "all x.(Carpet(x) -> RoughSurface(x))", "all x.(Candle(x) -> HasRoughSurface(x))", "exists x.(Carpet(x) & RoughSurface(x))"]}
{"id": "entailmentbank_validation_320", "nl": "wood has a smooth surface.", "fol": "", "prediction": ["all x.(Wood(x) -> SmoothSurface(x))", "all x.(Wood(x) -> SmoothSurface(x))", "(SmoothSurface(wood))", "all x y.((Wood(x) & Surface(y) & Smooth(x,y)) -> Has(x,y))", "all x y.((Wood(x) & SmoothSurface(y)) -> Has(x,y))", "all x.(Wood(x) -> SmoothSurface(x))", "(SmoothSurface(wood))", "all x.(Wood(x) -> SmoothSurface(x))", "all x y.((Wood(x) & Surface(y) & Smooth(x)) -> Wood(x))", "all x.(Wood(x) -> SmoothSurface(x))", "all x.(Wooden(x) -> SmoothSurface(x))", "all x.(Wood(x) -> SmoothSurface(x))", "all x.(Wood(x) -> HasSmoothSurface(x))", "all x.(Wood(x) -> SmoothSurface(x))", "exists x.(Wood(x) & SmoothSurface(x))", "exists x.(Wooden(x) & SmoothSurface(x))"]}
{"id": "entailmentbank_validation_321", "nl": "the resistance on the object to move on the carpet will be larger than on the wood.", "fol": "", "prediction": ["all x y.((Object(x) & Carpet(y) & Wood(y)) -> LargerResistance(x,y))", "all x y z.((Object(x) & Carpet(y) & Wood(z)) -> LargerResistance(x,y,z))", "all x.((Object(x) & Carpet(x) & Wood(x)) -> LargerResistance(x,y))", "(ResistanceOnObjectToMoveOnCarpet(x) & LargerThanWood(x))", "the resistance on the object to move on carpet will be larger than on wood.", "all x y.((Object(x) & Carpet(y) & Wood(y)) -> LargerResistanceOn(x,y))", "all x.(ResistanceOnObjectToMoveOnCarpet(x) -> LargerThanWood(x))", "all x y.((Object(x) & Carpet(y) & Carpet(z) & LargerResistance(x,y)) -> MovesOn(x,z))", "all x.((Object(x) & Carpet(x)) -> LargerResistance(x,x))", "all x y z.((Object(x) & Carpet(y) & Wood(z)) -> LargerResistanceOn(x,y,z))", "(ResistanceOnObjectToMoveOnCarpet(x) & LargerThanWood(x))", "all x y z.((Object(x) & Carpet(y) & Wood(z) & ResistanceOn(x,y)) -> LargerResistanceOn(x,y,z))", "(ResistanceOnObjectToMoveOnCarpet(x) & LargerOnWood(x))", "all x.((Object(x) & Carpet(x) & Wood(x)) -> LargerResistanceOnResistance(x,y))", "all x y.((Object(x) & Carpet(y) & Wood(y)) -> LargerResistance(x,y))", "all x y.((Object(x) & Carpet(y)) -> LargerResistanceOnWood(x,y))"]}
{"id": "entailmentbank_validation_322", "nl": "a toy car is a kind of object.", "fol": "", "prediction": ["all x.(ToyCar(x) -> Object(x))", "all x.(ToyCar(x) -> Object(x))", "all x y.((ToyCar(x) & Object(y)) -> Object(x))", "all x.(ToyCar(x) -> Object(x))", "all x y.((ToyCar(x) & Object(y)) -> Object(x))", "all x.(ToyCar(x) -> Object(x))", "all x y.((ToyCar(x) & Object(y)) -> Object(x,y))", "all x.(ToyCar(x) -> Object(x))", "all x y.((ToyCar(x) & Object(y)) -> Is(x,y))", "exists x.(TayCar(x) & Object(x))", "all x.(ToyCar(x) -> ArtOfObject(x))", "all x.(ToyCar(x) -> Object(x))", "all x y.((ToyCar(x) & Object(y)) -> Object(x))", "exists x.(ToyCar(x) & KindOfObject(x))", "all x.(ToyCar(x) -> Object(x))", "exists x.(ToyCar(x) & Object(x))"]}
{"id": "entailmentbank_validation_323", "nl": "the resistance on the toy car to move on the carpet is larger than on the wood.", "fol": "", "prediction": ["all x y.((ToyCar(x) & Carpet(y) & Wood(y)) -> LargerResistance(x,y))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> (ResistanceOnToyCar(x,y) & ResistanceOnWood(x,z)))", "(ResistanceOnToyCarToMoveOnCarpet(x) & LargerThanWood(x))", "all x y.((ToyCar(x) & Wood(y)) -> LargerResistanceToMoveOnCarpet(x,y))", "the resistance on the toy car to move on carpet is larger than on wood.", "all x.((ToyCar(x) & Carpet(x)) -> LargerResistance(x,Wood))", "all x.((ToyCar(x) & Carpet(x) & Wood(x)) -> LargerResistance(x,y))", "all x y.((ToyCar(x) & Carpet(y) & Wood(z)) -> LargerResistanceOnToyCar(x,y,z))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> LargerResistance(x,y,z))", "all x.(ResistanceOnToyCarToMoveOnCarpet(x) -> LargerThanWood(x))", "(ResistanceOnToyCarToMoveOnCarpet(x) & LargerOnWood(x))", "exists x.(ToyCar(x) & Carpet(x) & Carpet(x) & Carpet(x) & Wood(x))", "(ResistanceOnToyCarToMoveOnCarpetLargerThanWood(x))", "all x y.((ToyCar(x) & Wood(y)) -> ResistanceOnToyCarToMoveOnCarpet(x,y))", "(ResistanceOnToyCarToMoveOnCandleLargerThanWood(x))", "all x y.((ToyCar(x) & Carpet(y) & Carpet(z) & LargerResistance(x,z)) -> MoveOn(x,y,z))"]}
{"id": "entailmentbank_validation_324", "nl": "as the resistance on the object to move increase, the object will move slower.", "fol": "", "prediction": ["all x.((Object(x) & IncreasedResistance(x)) -> MovesSlower(x))", "all x y.((Object(x) & Resistance(y) & Increases(x,y)) -> MovesSlower(x))", "-(ResistanceOnObjectToMove(x) & Increases(x)) -> MovesSlower(x))", "as the ResistanceOnObjectToMove Increases, the object will moveSlower(x))", "all x.((Object(x) & IncreasedResistance(x)) -> MovesSlower(x))", "all x y.((Object(x) & IncreasedResistance(x) & IncreasedResistance(y)) -> MovesSlower(x))", "-(ResistanceOnObjectToMove(x) & IncreasesResistanceOnObjectToMove(x)) -> MovesSlower(x))", "all x y.((Object(x) & Resistance(y) & Increased(y)) -> MovesSlower(x))", "all x.((Object(x) & ResistanceIncrease(x)) -> MoveSlower(x))", "all x.((Object(x) & IncreasedResistanceOnMovement(x)) -> MovesSlower(x))", "(ResistanceOnObjectToMove(x) -> MoveSlower(x))", "as the ResistanceOnObjectToMove Increases,ObjectMovesSlowly(x))", "all x.(ResistanceOnObject(x) -> MoveSlower(x))", "all x y.((Object(x) & IncreasedResistanceOnMovement(x,y)) -> MovesSlower(x,y))", "all x y.((Object(x) & ResistanceIncrease(x) & Increase(y)) -> MoveSlower(x))", "all x.((Object(x) & ResistanceIncrease(x)) -> MovesSlower(x))"]}
{"id": "entailmentbank_validation_325", "nl": "the toy car will move slower on the carpet than on the wood.", "fol": "", "prediction": ["all x y.((ToyCar(x) & Carpet(y)) -> MovesSlowerOn(x,y))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> MovesSlowerOn(x,y,z))", "all x.((ToyCar(x) & Carpet(x)) -> MovesSlowerOn(x,y))", "all x.(ToyCar(x) -> MovesSlowerOnCarpetThanWood(x))", "all x y.((ToyCar(x) & Carpet(y)) -> MovesSlowerOn(x,y))", "(MoveSlowerOnTread(ToyCar) & MoveSlowerOnWood(ToyCar))", "(MoveSlowerOnCandleThanWood(toyCar))", "all x y.((ToyCar(x) & Carpet(y)) -> MoveSlowerOn(x,y))", "all x y.((ToyCar(x) & Carpet(y) & Wood(y)) -> MovesSlower(x,y))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> MovesSlower(x,y,z))", "(MovesSlowerOnCarpetThanWood(ToyCar))", "all x.((ToyCar(x) & Carpet(y)) -> MovesSlowerOn(x,y))", "all x.((ToyCar(x) & Carpet(x) & Wood(x)) -> MovesSlower(x,y))", "all x.(ToyCar(x) -> MovesSlowerOnCarpetThanWood(x))", "all x y.((ToyCar(x) & Carpet(y) & Wood(y)) -> MovesSlowerOn(x,y))", "all x y.((ToyCar(x) & Carpet(y)) -> MovesSlowerOn(x,y))"]}
{"id": "entailmentbank_validation_326", "nl": "a glider is a kind of object.", "fol": "", "prediction": ["all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> Object(x))", "all x y.((Glider(x) & Object(y)) -> Object(x))", "all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> Object(x))", "all x y.((Glider(x) & Object(y)) -> Object(x))", "all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> Object(x))", "all x y.((Glider(x) & Object(y)) -> Object(x,y))", "all x y.((Glider(x) & Object(y)) -> Is(x,y))", "all x.(Glider(x) -> Object(x))", "exists x.(Glider(x) & ArtOfObject(x))", "exists x.(Glider(x) & Object(x))", "exists x.(Glider(x) & ArtOfObject(x))", "all x.(Glider(x) -> Object(x))", "exists x.(Glider(x) & Object(x))"]}
{"id": "entailmentbank_validation_327", "nl": "flying an object requires lift to oppose the object's weight.", "fol": "", "prediction": ["all x y.((Flying(x) & Object(y)) -> RequiresLiftToOpposeWeight(x,y))", "all x.(FlyingObject(x) -> RequiresLiftToOpposeWeight(x))", "all x.((FlyingObject(x) & RequiresLift(x)) -> OpposesWeight(x))", "all x y z.((Flying(x) & Object(y) & Lift(z)) -> RequiresToOpposeWeight(x,y,z))", "all x y.((Flying(x) & Object(y)) -> RequiresLift(x,y))", "(FlyingObject(f) -> RequiresLift(f))", "all x y.((FlyingObject(x) & Lift(y)) -> OpposesWeight(x,y))", "all x.(FlyingObject(x) -> RequiresLiftToOpposeWeight(x))", "all x y.((Flying(x) & Object(y) & RequiresLift(x,y)) -> OpposesWeight(x,y))", "all x.((FlyingObject(x) & RequiresLift(x)) -> OpposesWeight(x))", "all x y z.((Flying(x) & Object(y) & Lift(z)) -> RequiresToOpposeWeight(x,y,z))", "all x.((Object(x) & RequiresLift(x)) -> OpposesWeight(x))", "all x y.((FlyingObject(x) & RequiresLift(x,y)) -> OpposesWeight(y))", "all x y z.((FlyingObject(x) & Lift(y) & Weight(z)) -> Requires(x,y,z))", "all x.(FlyingObject(x) -> RequiresLift(x))", "all x.(FlyingObject(x) -> RequiresLiftToOpposeWeight(x))"]}
{"id": "entailmentbank_validation_328", "nl": "flying a glider requires lift to oppose the weight of the glider.", "fol": "", "prediction": ["all x y.((Glider(x) & Glider(y)) -> RequiresLiftToOpposeWeight(x,y))", "all x y z.((Glider(x) & Glider(y) & Lift(z)) -> RequiresToOpposeWeight(x,y,z))", "all x.((Glider(x) & RequiresLift(x)) -> OpposesWeight(x))", "all x.(Glider(x) -> RequiresLiftToOpposeWeight(x))", "all x y.((Glider(x) & Glider(y)) -> RequiresLift(x,y))", "(FlyingGlider(g) -> RequiresLiftToOpposeWeight(g))", "all x y z.((Glider(x) & Glider(y) & Lift(z)) -> RequiresToOpposeWeight(x,y,z))", "all x.((Glider(x) & RequiresLift(x)) -> OpposesWeight(x))", "all x y z.((Glider(x) & Glider(y) & Lift(z) & Flying(x,y)) -> RequiresToOpposeWeight(x,y,z))", "all x y.((Glider(x) & Glider(y)) -> RequiresLiftToOpposeWeight(x,y))", "all x.(Glider(x) -> RequiresLift(x))", "all x y.((Glider(x) & Glider(y) & RequiresLift(x,y)) -> OpposesWeight(x,y))", "all x.(Glider(x) -> RequiresLiftToOpposeWeight(x,Glider))", "all x y z.((Glider(x) & Glider(y) & Lift(z) & Flying(x,y)) -> RequiresToOpposeWeight(x,y,z))", "all x.((Glider(x) & RequiresLift(x)) -> OpposesWeight(x))", "all x y.((Glider(x) & Glider(y)) -> RequiresLift(x,y))"]}
{"id": "entailmentbank_validation_329", "nl": "pedals are part of a bicycle for pedalling.", "fol": "", "prediction": ["all x.(Pedals(x) -> PartOfBicycle(x))", "all x y.((Pedal(x) & Bicycle(y)) -> PartOf(x,y))", "all x y.((Pedal(x) & Bicycle(y) & PartOf(x,y)) -> ForPedaling(x))", "all x.(Pedals(x) -> PartOfBicycle(x))", "(all x.(Pedals(x) -> PartOfBicycle(x)))", "all x y z.((Pedal(x) & Bicycle(y) & Bicycle(z)) -> PartOf(x,y,z))", "(all x.(Pedal(x) -> PartOfBicycle(x)))", "all x.(Pedals(x) -> PartOfBicycle(x))", "all x y.((Pedal(x) & Bicycle(y)) -> PartOf(x,y))", "all x.(Pedals(x) -> PartOfBicycleForPedaling(x))", "all x y.((Pedal(x) & Bicycle(y) & PartOf(x,y)) -> ForPedaling(x))", "all x.(PedalsPartOfBicycle(x) -> ForPedaling(x))", "all x.(Pedals(x) -> ForPedaling(x))", "all x y.((Pedals(x) & Bicycle(y) & PartOf(x,y)) -> ForPedaling(x))", "all x.(Pedal(x) -> PartOfBicycle(x))", "all x.(Pedal(x) -> ForPedaling(x))"]}
{"id": "entailmentbank_validation_330", "nl": "pedalling a bicycle requires moving the pedals in a circular motion.", "fol": "", "prediction": ["all x y.((Bicycle(x) & Bicycle(y)) -> (MovesPedalsInCircularMotion(x,y)))", "all x.(PedalingBicycle(x) -> RequiresMovingPedalsInCircularMotion(x))", "all x y.((Bicycle(x) & Bicycle(y)) -> RequiresCircularMotion(x,y))", "all x y z.((Bicycle(x) & Pedal(y) & CircularMotion(z)) -> RequiresMoving(x,y,z))", "all x.(Pedaling(x) -> RequiresMovingPedalsInCircularMotion(x))", "all x y.((PedalingBicycle(x) & Bicycle(y)) -> RequiresCircularMotion(x,y))", "(all x.(PedalingBicycle(x) -> RequiresCircularMotion(x)))", "all x y z.((Bicycle(x) & Piston(y) & Wheel(z)) -> (Moving(x,y,z) & CircularMotion(x)))", "all x y.((Bicycle(x) & Bicycle(y)) -> (MovingPedals(x,y) & CircularMotion(x,y)))", "all x.(Pedaling(x) -> (RequiresMovingPedals(x) & CircularMotion(x)))", "all x.((Bicycle(x) & Piston(x)) -> MovesInCircularMotion(x))", "all x.(PedalingBicycle(x) -> RequiresCircularMotion(x))", "all x y z.((Bicycle(x) & pedal(y) & pedal(z)) -> (RequiresMoving(y,z) & CircularMotion(z)))", "all x y.((PedalingBicycle(x) & Bicycle(y)) -> RequiresCircularMotion(x,y))", "all x.(PedalingBicycle(x) -> RequiresMovingPedalsInCircularMotion(x))", "all x.(PedalingBicycle(x) -> MovesPedalsInCircularMotion(x))"]}
{"id": "entailmentbank_validation_331", "nl": "the pedals are the part of a bicycle that moves in circular motion.", "fol": "", "prediction": ["all x.(Pedals(x) -> MovesInCircularMotion(x))", "all x y.((Pedals(x) & Bicycle(y)) -> MovesInCircularMotion(x,y))", "all x.(Pedals(x) -> (MovesInCircularMotion(x) & Bicycle(x)))", "all x y.((Pedals(x) & Bicycle(y) & MovesInCircularMotion(x,y)) -> PartOf(x,y))", "(all x.(Pedals(x) -> MovesInCircularMotion(x)))", "all x y z.((Pedals(x) & Bicycle(y) & CircularMotion(z)) -> MovesIn(x,y,z))", "(MovesInCircularMotion(Pedals))", "all x.(PedalsPartOfBicycle(x) -> MovesInCircularMotion(x))", "all x.(Pedals(x) -> MovesInCircularMotion(x))", "all x y.((Pedals(x) & Bicycle(y)) -> MovesInCircularMotion(x,y))", "all x.(Pedals(x) -> (MovesInCircularMotion(x) & Bicycle(x)))", "all x y z.((Pedals(x) & Bicycle(y) & CircularMotion(z)) -> MovesIn(x,y,z))", "all x y.((Pedals(x) & Bicycle(y) & MovesInCircularMotion(y,x)) -> PartOf(x,y))", "all x.(PedalsPartOfBicycle(x) -> MovesInCircularMotion(x))", "all x.(PedalsPartOfBicycle(x) -> MovesInCircularMotion(x))", "all x y.((Pedals(x) & Bicycle(y)) -> MovesInCircularMotion(x,y))"]}
{"id": "entailmentbank_validation_332", "nl": "north / northward is a kind of direction.", "fol": "", "prediction": ["all x.((North(x) & Northward(x)) -> Direction(x))", "all x.(North(x) -> Northward(x))", "all x y.((North(x) & Northward(y)) -> Direction(x,y))", "all x.((North(x) & Northward(x)) -> Direction(x))", "(North(North) & Northward(North))", "all x.(North(x) -> Northward(x))", "all x.((North(x) | Northward(x)) -> Direction(x))", "(Northward(north) -> Direction(north))", "all x y.((North(x) & Northward(y)) -> Direction(x,y))", "(Northward(north) -> Direction(north,north))", "(North(North) & Northward(North))", "all x.(North(x) -> Northward(x))", "all x.(North(x) -> Northward(x))", "all x y.((North(x) & Northward(y)) -> Direction(x))", "all x.((North(x) & Northward(x)) -> Direction(x))", "all x.(North/Northward(x) -> Direction(x))"]}
{"id": "entailmentbank_validation_333", "nl": "velocity is a measure of a speed in a direction.", "fol": "", "prediction": ["all x.(Velocity(x) -> MeasuresSpeedInDirection(x))", "all x y.((Velocity(x) & Direction(y)) -> MeasuresSpeedInDirection(x,y))", "all x y z.((Velocity(x) & Direction(y) & Speed(z)) -> MeasuresInDirection(x,z))", "all x y.((Velocity(x) & Direction(y)) -> MeasuresSpeed(x,y))", "(MeasuresSpeedInDirection(Velocity))", "all x.(Velocity(x) -> MeasuresSpeedInDirection(x))", "all x y z.(Velocity(x) -> (MeasuresSpeed(x,y) & Direction(z) & InDirection(x,z)))", "all x y z.((Velocity(x) & Direction(y) & Speed(z)) -> MeasuresInDirection(x,y,z))", "all x.(Velocity(x) -> MeasuresSpeedInDirection(x))", "all x.(Vibration(x) -> MeasuresSpeedInDirection(x))", "all x y.((Velocity(x) & Direction(y)) -> MeasuresSpeedInDirection(x,y))", "all x.(Vibration(x) -> (MeasuresSpeedInDirection(x) & InDirection(x)))", "all x y.((Vibration(x) & Direction(y)) -> MeasuresSpeedInDirection(x,y))", "all x.(Vibration(x) -> MeasuresSpeed(x))", "all x.(Velocity(x) -> MeasuresSpeedInDirection(x))", "exists x.(Velocity(x) & MeasuresSpeed(x) & InDirection(x))"]}
{"id": "entailmentbank_validation_334", "nl": "40 m/s describes the speed of an object.", "fol": "", "prediction": ["all x.((Object(x) & Speed(x,40)) -> Description(x,40))", "all x y.((Object(x) & Object(y)) -> Description(x,y))", "all x.((40M/s) & Object(x)) -> DescriptionsSpeed(x,y))", "(DescribesSpeedOfObject(40M/s))", "all x y.((Motor(x) & Object(y)) -> Description(x,y))", "all x.((Object(x) & Speed(x,40)) -> DescribesSpeed(x,40))", "all x y z.((40M/s(x) & Object(y) & Object(z)) -> DescriptionOfSpeed(x,y,z))", "-(40M/s) & Object(y))", "all x y.((Object(x) & Object(y)) -> Description(x,y))", "all x.((Speed(x,40)) -> Describes(x,40))", "all x y.((40M/s(x) & Object(y)) -> DefinesSpeed(x,y))", "all x.(40M/s(x) -> DescriptionOfSpeedOfObject(x))", "(DescribesSpeedOfObject(40M/s))", "all x.((40M/s) & Object(x)) -> DefinesSpeed(x,y))", "All x.((Speed(x,40)) -> DescriptionOfObject(x,40))", "exists x.(MotorSpeed(x,40))"]}
{"id": "entailmentbank_validation_335", "nl": "40 m/s north describes the velocity of an object.", "fol": "", "prediction": ["all x.((40M/sNorth(x) & Object(y)) -> DescribesVelocity(x,y))", "all x y.((40M/sNorth(x) & Object(y)) -> DescriptionOfVelocity(x,y))", "all x y.((Object(x) & Object(y)) -> (40M/sNorth(x) & DescribesVelocity(x,y)))", "all x.((Velocity(x) & 40M/sNorth(x)) -> Describes(x,y))", "40M/sNorthDescribesVelocityOfObject(x)", "all x.((40M/sNorth(x) & Object(y)) -> DescriptionOfVelocity(x,y))", "all x y z.((40M/sNorth(x) & Object(y) & Object(z)) -> DescribesVelocity(x,y,z))", "(40M/sNorth) -DescribesVelocityOfObject(x))", "all x y.((Object(x) & Object(y) & 40M/sNorth(x)) -> DescribesVelocity(x,y))", "all x y.((40M/sNorth(x) & Object(y)) -> DefinesVelocity(x,y))", "40m/sNorthDescribesVelocityOfObject(x)", "all x.((Velocity(x) & 40M/sNorth(x)) -> DescriptionOfObject(x))", "all x.((40M/sNorth(x) & Object(y)) -> DefinesVelocity(x,y))", "exists x.(Velocity(x,40) & North(x))", "exists x.(Velocity(x,y) & 40M/sNorth(y))", "all x y.((40M/sNorth(x) & Object(y)) -> DescribesVibration(x,y))"]}
{"id": "entailmentbank_validation_336", "nl": "inherited characteristics can deterimne the structure of an organism's anatomy.", "fol": "", "prediction": ["all x y.((ErasedCharacteristics(x) & Organism(y)) -> DeterimneStructure(x,y))", "all x.((ErasedCharacteristics(x) & Organism(y)) -> DeterimneStructure(x,y))", "all x.(EarnedCharacteristics(x) -> DeterimneAnatomy(x))", "all x y.((EarnedCharacteristics(x) & Organism(y)) -> DeterimneStructure(x,y))", "(EarnedCharacteristics(inherited) & CanDeterimneAnatomy(inherited))", "all x.((EarnedCharacteristics(x) & OrganomicStructure(x)) -> Deterimne(x))", "all x.(EarnedCharacteristics(x) -> CanDeterimneAnatomy(x))", "all x.(ErasedCharacteristics(x) -> DeterimneStructureOfOrganism(x))", "all x y z.((EarnedCharacteristics(x) & Organism(y) & Anatomy(z)) -> Deterimne(x,y,z))", "all x y.((EarnedCharacteristics(x) & Organism(y)) -> CanDeterimneStructure(x,y))", "all x y z.((ErasedCharacteristics(x) & Organism(y) & Anatomy(z)) -> Deterimne(x,y,z))", "all x y.((ErasedCharacteristics(x) & Organism(y)) -> CanDeterimneStructure(x,y))", "all x.((ErasedCharacteristics(x) & OrganomicStructure(x)) -> Deterimne(x))", "all x y.((ErinheritedCharacteristics(x) & Organism(y)) -> DeterimneStructure(x,y))", "all x.(EarnedCharacteristics(x) -> DeterimneStructureOfOrganism(x))", "all x.((EarnedCharacteristics(x) & OrganomicAnatomy(x)) -> DeterimneStructure(x))"]}
{"id": "entailmentbank_validation_337", "nl": "the structure of an organism's anatomy is used to classify the organism into the appropriate taxonomic rank.", "fol": "", "prediction": ["all x y.((Organism(x) & AnatomicStructure(y)) -> ClassifiesIntoAppropriateTaxonomicRank(x,y))", "all x y.((Organism(x) & Anatomy(y) & Structure(x,y)) -> ClassifiesIntoTaxonomicRank(x,y))", "all x y z.((Organism(x) & Anatomy(y) & Anatomy(z)) -> ClassifiesIntoTaxonomicRank(x,y,z))", "all x.((Organism(x) & StructureOfAnatomy(x)) -> ClassifiesIntoAppropriateTaxonomicRank(x))", "all x y.((Organism(x) & AnatomicStructure(x,y)) -> ClassifiesIntoAppropriateTaxonomicRank(x,y))", "all x.((Organism(x) & Anatomy(x)) -> ClassifiesIntoTaxonomicRank(x))", "all x y z.((Organism(x) & AnatomicStructure(y) & TaxonomicRank(z)) -> ClassifiedInto(x,y,z))", "all x.((Organism(x) & AnatomicStructure(x)) -> ClassifiedIntoTaxonomicRank(x))", "all x y.((Organism(x) & Anatomy(y)) -> ClassifiesIntoTaxonomicRank(x,y))", "all x y z.((Organism(x) & Anatomy(y) & TaxonomicRank(z)) -> ClassifiesInto(x,y,z))", "all x.((Organism(x) & StructureOfAnatomy(x)) -> ClassifiesIntoAppropriateTaxonomicRank(x))", "all x y.((Organism(x) & AnatomicStructure(y)) -> ClassifiedIntoTaxonomicRank(x,y))", "all x.((Organism(x) & Anatomy(x) & Structure(x)) -> ClassifiesIntoAppropriateTaxonomicRank(x))", "all x y.((Organism(x) & Anatomy(y) & Structure(x,y)) -> ClassifiesIntoAppropriateTaxonomicRank(x,y))", "all x y z.((Organism(x) & AnatomicStructure(y) & TaxonomicRank(z)) -> ClassifiesInto(x,y,z))", "all x.((Organism(x) & AnatomicStructure(x)) -> ClassifiedIntoTaxonomicRank(x))"]}
{"id": "entailmentbank_validation_338", "nl": "inherited characteristics can be used to classify an oganism into the apropriate taxonomic rank.", "fol": "", "prediction": ["all x y.((EarnedCharacteristics(x) & Ogoninism(y)) -> ClassifiesIntoApropriateTaxonomicRank(x,y))", "all x.((ErasedCharacteristics(x) & GenealogicalClassification(x)) -> AppropriateTaxonomicRank(x))", "all x y.((Gaganist(x) & ErasedCharacteristics(x) & GenealogicalRank(y)) -> ClassifiedIntoApropriateTaxonomicRank(x,y))", "all x.((EarnedCharacteristics(x) & ClassifyAgninism(x)) -> AppropriateTaxonomicRank(x))", "all x.((Gaganist(x) & ErasedCharacteristics(x)) -> ClassifiesIntoApropriateTaxonomicRank(x))", "all x.(EarnedCharacteristics(x) -> ClassifyAgninismIntoApropriateTaxonomicRank(x))", "all x y z.((EarnedCharacteristics(x) & Ogoninism(y) & TaxonomicRank(z)) -> ClassifiesInto(y,z))", "all x y.((ErasedCharacteristics(x) & Agninism(y)) -> ClassifiesIntoApropriateTaxonomicRank(x,y))", "all x y.((EarnedCharacteristics(x) & Gonianism(y)) -> ClassifiesIntoApropriateTaxonomicRank(x,y))", "all x y.((Gaganist(x) & ErasedCharacteristics(x) & TaxonomicRank(y)) -> ClassifiedInto(x,y))", "all x.(ErasedCharacteristics(x) -> ClassifyAgninismIntoApropriateTaxonomicRank(x))", "all x.((ErasedCharacteristics(x) & GenealogicalCharacteristics(x)) -> ClassifiesOgony(x))", "all x y z.((ErasedCharacteristics(x) & Ogony(y) & TaxonomicRank(z)) -> ClassifiesInto(y,z))", "all x.((EarnedCharacteristics(x) & GenealogicalClassification(x)) -> AppropriateTaxonomicRank(x))", "all x.(EarnedCharacteristics(x) -> ClassifiesOgonyst(x))", "all x y.((ErasedCharacteristics(x) & Gonianism(y)) -> ClassifiesIntoApropriateTaxonomicRank(x,y))"]}
{"id": "entailmentbank_validation_339", "nl": "genes are able to determine the inherited characteristics of a living thing.", "fol": "", "prediction": ["all x y.((Gene(x) & LivingThing(y)) -> DeterminesEarnedCharacteristics(x,y))", "all x.(Genes(x) -> DeterminesEarnedCharacteristicsOfLivingThing(x))", "all x y z.((Gene(x) & LivingThing(y) & Gene(z)) -> DeterminesEarnedCharacteristics(x,y,z))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesEarnedCharacteristics(x,y))", "all x.(Genes(x) -> DeterminesEarnedCharacteristics(x))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesHeritageCharacteristics(x,y))", "all x y.((Genes(x) & LivingThing(y)) -> DeterminesEarnedCharacteristics(x,y))", "all x y z.((Gene(x) & LivingThing(y) & Gene(z)) -> DeterminesEarnedCharacteristics(x,y,z))", "all x.(Genes(x) -> DeterminesEarnedCharacteristicsOfLivingThing(x))", "exists x.(Gene(x) & DeterminesEarnedCharacteristics(x))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesEarnedCharacteristics(x,y))", "all x.(Genes(x) -> DeterminesLegacyOfLivingThing(x))", "all x.(Genes(x) -> DeterminesEarnedCharacteristics(x))", "exists x.(Gene(x) & DeterminesEarnedCharacteristics(x))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesHeritageCharacteristics(x,y))", "all x.(Genes(x) -> DeterminesEarnedCharacteristicsOfLivingThing(x))"]}
{"id": "entailmentbank_validation_340", "nl": "genes can be used for classifying organisms.", "fol": "", "prediction": ["all x.(Gene(x) -> ClassifiesOrganisms(x))", "all x y.((Gene(x) & Organism(y)) -> Classifies(x,y))", "all x.(Gene(x) -> ClassifiesOrganism(x))", "all x.(Genes(x) -> ClassifiesOrganisms(x))", "all x y.((Gene(x) & Organism(y)) -> Classified(x,y))", "all x y z.((Gene(x) & Organism(y) & Organism(z)) -> Classifies(x,y,z))", "all x.(Gene(x) -> ClassifiesOrganisms(x))", "all x y.((Gene(x) & Organism(y)) -> Classifies(x,y))", "all x.(Genes(x) -> ClassifiesOrganisms(x))", "all x y.((Gene(x) & Organism(y)) -> CanBeClassified(x,y))", "all x.(Genes(x) -> ClassifyOrganisms(x))", "all x y.((Gene(x) & Organism(y) & Classified(x,y)) -> CanBeUsedFor(x,y))", "all x.(Gain(x) -> ClassifiesOrganism(x))", "all x y.((Gene(x) & Organism(y)) -> Classified(x,y))", "exists x.(Gene(x) & ClassifiedOrganism(x))", "exists x.(Gene(x) & ClassifyOrganism(x))"]}
{"id": "entailmentbank_validation_341", "nl": "genes are made of dna.", "fol": "", "prediction": ["all x.(Gene(x) -> MadeOfDna(x))", "(MadeOfDna(genes) & MadeOfDna(genes))", "all x.(Gain(x) -> MadeOfDna(x))", "all x.(Gene(x) -> MadeOfDna(x))", "all x y.((Gene(x) & Dna(y)) -> MadeOf(x,y))", "all x.(Gather(x) -> MadeOfDna(x))", "all x.(Gene(x) -> MadeOfDna(x))", "all x.(Genes(x) -> MadeOfDna(x))", "all x y.((Gene(x) & Dna(y) & MadeOf(x,y)) -> MadeOf(x,y))", "all x y.((Gene(x) & Dna(y)) -> MadeOf(x,y))", "all x y.((Gene(x) & Dna(y) & MadeOf(x,y)) -> MadeOf(x,y))", "all x.(Genes(x) -> MadeOfDna(x))", "(all x.(Gene(x) -> MadeOfDna(x)))", "exists x.(Gene(x) & MadeOf(x,Dna))", "all x.(Gain(x) -> MadeOfDna(x))", "exists x.(Gene(x) & MadeOf(x,Dna))"]}
{"id": "entailmentbank_validation_342", "nl": "dna can be used for classifying organisms.", "fol": "", "prediction": ["all x.(Dna(x) -> ClassifiesOrganisms(x))", "all x y.((Dna(x) & Organism(y)) -> Classifies(x,y))", "all x.(Dna(x) -> ClassifiesOrganisms(x))", "(ClassifyingOrganismsWithDna(d))", "all x y.((Dna(x) & Organism(y)) -> Classifies(x,y))", "all x.(Dna(x) -> CanBeUsedForClassifyingOrganisms(x))", "all x y z.((Dna(x) & Organism(y) & Organism(z)) -> Classifies(x,y,z))", "all x.(Dna(x) -> ClassifiesOrganisms(x))", "all x y.((Dna(x) & Organism(y)) -> Classified(x,y))", "all x y.((Dna(x) & Organism(y)) -> CanBeClassified(x,y))", "all x.(Dna(x) -> CanBeUsedForClassifyingOrganisms(x))", "all x.(Dna(x) -> ClassifiesOrganisms(x))", "all x y.((Dna(x) & Organism(y)) -> Classifies(x,y))", "all x.(Dna(x) -> CanBeUsedForClassifyingOrganisms(x))", "all x.(Dna(x) -> ClassifyOrganisms(x))", "exists x.(Dna(x) & Classified(x))"]}
{"id": "entailmentbank_validation_343", "nl": "dna is a kind of molecule.", "fol": "", "prediction": ["all x.(Dna(x) -> Molecule(x))", "all x y.((Dna(x) & Molecule(y)) -> Molecule(x))", "all x.(Dna(x) -> Molecule(x))", "all x y.((Dna(x) & Molecule(y)) -> Molecule(x,y))", "all x.(Dna(x) -> Molecule(x))", "exists x y.(Dna(x) & Molecule(y) & Molecule(x))", "exists x y.(Dna(x) & Molecule(y) & Molecule(z) & Contains(x,y))", "(Molecule(dna,d) & Molecular(d,d))", "all x.(Dna(x) -> Molecule(x))", "all x.((Dna(x) & Molecule(x)) -> Is(x,y))", "all x.(Dna(x) -> Molecule(x))", "all x.(Dna(x) -> Molecule(x))", "all x.(Dna(x) -> Molecule(x))", "all x.(Dna(x) -> Molecule(x))", "all x.(Dna(x) -> Molecule(x))", "all x.(Dna(x) -> Molecule(x))"]}
{"id": "entailmentbank_validation_344", "nl": "molecules are used for classifying organisms.", "fol": "", "prediction": ["all x.(Molecule(x) -> ClassifiesOrganisms(x))", "all x y.((Molecule(x) & Organism(y)) -> Classified(x,y))", "all x.(Molecular(x) -> ClassifiesOrganisms(x))", "all x y z.((Molecule(x) & Organism(y) & Organism(z)) -> Classified(x,y,z))", "all x.(Molecule(x) -> ClassifiedOrganism(x))", "all x y.((Molecule(x) & Organism(y)) -> Classified(x,y))", "all x y.((Molecule(x) & Organism(y)) -> ClassifiedFor(x,y))", "all x y z.((Molecule(x) & Organism(y) & Organism(z)) -> Classified(x,y,z))", "all x.(Molecule(x) -> ClassifiesOrganisms(x))", "all x.(Molecular(x) -> ClassifiedOrganism(x))", "all x y.((Molecular(x) & Organism(y)) -> Classified(x,y))", "all x y.((Molecule(x) & Organism(y)) -> Classified(x,y))", "all x.(Molecular(x) -> ClassifiesOrganisms(x))", "all x.(Molecule(x) -> ClassifiedOrganism(x))", "all x y.((Molecule(x) & Organism(y)) -> ClassifiedFor(x,y))", "exists x.(Molecule(x) & ClassifiesOrganism(x))"]}
{"id": "entailmentbank_validation_345", "nl": "a frog is a kind of amphibian.", "fol": "", "prediction": ["all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x y.((Frog(x) & Amphibian(y)) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x y.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x y.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x y.(Frog(x) & Amphibian(y))", "all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "exists x.(Frog(x) & amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "exists x.(Frog(x) & amphibian(x))", "exists x.(Frog(x) & Amphibian(x))"]}
{"id": "entailmentbank_validation_346", "nl": "a tadpole is a kind of young / baby frog.", "fol": "", "prediction": ["all x.(Tadpole(x) -> (YoungFrog(x) | BabyFrog(x)))", "all x.(Tadpole(x) -> (YoungFrog(x) | BabyFrog(x)))", "all x y.((Tadpole(x) & YoungFrog(y)) -> BabyFrog(x,y))", "all x.(Tadpole(x) -> (Yearly(x) | BabyFrog(x)))", "all x y.((Tadpole(x) & Young(y) & Baby(y)) -> Frog(x))", "all x.(Tadpole(x) -> (YearlyFrog(x) | BabyFrog(x)))", "all x.(Tadpole(x) -> (YoungFrog(x) | BabyFrog(x)))", "all x y.((Tadpole(x) & Young(y) & Baby(y)) -> Frog(x))", "all x.(Tadpole(x) -> (YoungFrog(x) | BabyFrog(x)))", "all x.(Tadpole(x) -> YoungFrog(x))", "all x y.((Tadpole(x) & Frog(y)) -> Young(y) & Baby(y))", "all x.(Tadpole(x) -> (YoungFrog(x) & BabyFrog(x)))", "exists x.(Tadpole(x) & YoungFrog(x) & BabyFrog(x))", "all x.(Tadpole(x) -> (YoungFrog(x) & BabyFrog(x)))", "exists x.(Tadpole(x) & Young(x) & BabyFrog(x))", "exists x.(Tadpole(x) & YoungFrog(x) & BabyFrog(x))"]}
{"id": "entailmentbank_validation_347", "nl": "a tadpole is a kind of young amphibian.", "fol": "", "prediction": ["all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x y.((Tadpole(x) & YoungAmphibian(y)) -> YoungAmphibian(x))", "all x y.((Tadpole(x) & Amphibian(y)) -> Young(x,y))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x y.((Tadpole(x) & YoungAmphibian(y)) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x y.((Tadpole(x) & Amphibian(y)) -> Young(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> (YoungAmphibian(x) & YoungAmphibian(x)))", "exists x.(Tadpole(x) & Amphibian(x) & Young(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "exists x.(Tadpole(x) & Amphibian(x))"]}
{"id": "entailmentbank_validation_348", "nl": "metamorphosis is when an amphibian changes from an immature form to an adult form.", "fol": "", "prediction": ["all x.(Metamorphosis(x) -> (AmphibianChange(x) & ImmatureForm(x) & AdultForm(x)))", "all x.((Amphibian(x) & ImmatureForm(x) & AdultForm(x)) -> Metamorphosis(x))", "all x.(Metamorphosis(x) -> (Amphibian(x) & ImmatureForm(x) & AdultForm(x)))", "all x y.((Amphibian(x) & ImmatureForm(y) & AdultForm(x)) -> Metamorphosis(x,y))", "all x y z.((Amphibian(x) & ImmatureForm(y) & AdultForm(z)) -> ChangesFromTo(x,y,z))", "all x.((Amphibian(x) & ImmatureForm(x) & AdultForm(x)) -> Metamorphosis(x))", "(Metamorphosis) -> ChangesImmatureToAdultForm(Amphibian))", "all x y.((Amphibian(x) & ImmatureForm(y) & AdultForm(x)) -> Metamorphosis(x,y))", "all x.(Metamorphosis(x) -> (AmphibianChange(x) & ImmatureForm(x) & AdultForm(x)))", "all x.(Metamorphosis(x) -> ChangesImmatureToAdultForm(x))", "all x y z.((Amphibian(x) & ImmatureForm(y) & AdultForm(z)) -> ChangesFromTo(x,y,z))", "all x y.((Amphibian(x) & ImmatureForm(y)) -> AdultForm(x,y))", "all x.((Amphibian(x) & ImmatureForm(x) & AdultForm(x)) -> Metamorphosis(x))", "all x.(Metamorphosis(x) -> (AmphibianChangesFromImmatureToAdult(x)))", "all x.((Amphibian(x) & ImmatureForm(x)) -> AdultForm(x))", "all x y.((Amphibian(x) & ImmatureForm(y) & AdultForm(y)) -> ChangesFromTo(x,y))"]}
{"id": "entailmentbank_validation_349", "nl": "an example of metamorphosis is when a tadpole changes from a an immature form to and adult form.", "fol": "", "prediction": ["all x.(Metamorphosis(x) -> (TadpoleChangesFromImmatureToAdult(x)))", "all x.((Tadpole(x) & ImmatureForm(x) & AdultForm(x)) -> Metamorphosis(x))", "all x y.((Tadpole(x) & ImmatureForm(y) & AdultForm(x)) -> Metamorphosis(x))", "all x y z.((Tadpole(x) & ImmatureForm(y) & AdultForm(z)) -> ChangesForm(x,y,z))", "all x.(Metamorphosis(x) -> (TadpoleChangesFromImmatureToAdult(x)))", "all x y.((Tadpole(x) & ImmatureForm(y) & AdultForm(x)) -> Metamorphosis(x,y))", "all x.((Tadpole(x) & ImmatureForm(x) & AdultForm(x)) -> Metamorphosis(x))", "all x.(Metamorphosis(x) -> (TadpoleChange(x) & ImmatureForm(x) & AdultForm(x)))", "all x.((Tadpole(x) & ChangesFromImmatureToAdult(x)) -> Metamorphosis(x))", "exists x.(Tadpole(x) & ChangesFromImmatureToAdult(x))", "all x.(Metamorphosis(x) -> (TadpoleChangesFromImmatureToAdult(x)))", "all x y z.((Tadpole(x) & ImmatureForm(y) & AdultForm(z)) -> ChangesFromTo(x,y,z))", "all x y.((Tadpole(x) & ImmatureForm(y) & AdultForm(x)) -> Metamorphosis(x))", "exists x.(Tadpole(x) & ChangesForm(x,immature,adult))", "all x y.((Tadpole(x) & ImmatureForm(x,y)) -> ChangesForm(x,y))", "exists x.(Tadpole(x) & ChangesFromImmatureToAdult(x))"]}
{"id": "entailmentbank_validation_350", "nl": "the immature form of a frog is called a tadpole.", "fol": "", "prediction": ["all x.((Frog(x) & ImmatureForm(x)) -> Tadpole(x))", "all x.(Frog(x) -> Tadpole(x))", "all x y.((Frog(x) & ImmatureForm(x,y) & Frog(y)) -> Tadpole(x))", "all x.((Frog(x) & ImmatureForm(x)) -> Tadpole(x))", "all x y.((Frog(x) & ImmatureForm(x) & Frog(y) & KnownAsTadpole(x)) -> Tadpole(x))", "all x.(ImmatureFormOfFrog(x) -> Tadpole(x))", "(ImmatureFormOfFrog(x) -> Tadpole(x))", "all x.(Frog(x) -> Tadpole(x))", "all x.((Frog(x) & ImmatureForm(x)) -> Tadpole(x))", "all x y.((Frog(x) & ImmatureForm(x,y)) -> Tadpole(x))", "all x.(ImmatureFrog(x) -> Tadpole(x))", "all x y.((Frog(x) & ImmatureForm(x,y) & Frog(y)) -> Tadpole(x))", "all x.((Frog(x) & ImmatureForm(x)) -> Tadpole(x))", "all x.((Frog(x) & Immature(x)) -> Tadpole(x))", "all x.(Frog(x) -> Tadpole(x))", "exists x.(FrogFrog(x) & ImmatureForm(x) & Tadpole(x))"]}
{"id": "entailmentbank_validation_351", "nl": "the adult form of a tadpole is called a frog.", "fol": "", "prediction": ["all x.((Tadpole(x) & AdultForm(x)) -> Frog(x))", "all x.(Tadpole(x) -> Frog(x))", "all x y.((Tadpole(x) & AdultForm(x,y)) -> Frog(x))", "(AdultFormOfTadpole(a) & Frog(b))", "all x.((Tadpole(x) & AdultForm(x)) -> Frog(x))", "all x y.((Tadpole(x) & AdultForm(x) & Tadpole(y)) -> Frog(x))", "all x.(Tadpole(x) -> Frog(x))", "exists x y.(Tadpole(x) & Adult(x,y) & Tadpole(y) & Adult(x,y)) -> Frog(x))", "all x.((AdultTadpole(x) & AdultForm(x)) -> Frog(x))", "all x.((Tadpole(x) & AdultForm(x)) -> Frog(x))", "all x y.((Tadpole(x) & Adult(y) & Tadpole(y)) -> Frog(x))", "all x y.((Tadpole(x) & AdultForm(x,y) & Tadpole(y)) -> Frog(x))", "all x.(Tadpole(x) -> Frog(x))", "all x.((Tadpole(x) & AdultForm(x)) -> Frog(x))", "all x.(Tadpole(x) -> Frog(x))", "all x.(Tadpole(x) -> Frog(x))"]}
{"id": "entailmentbank_validation_352", "nl": "the imature form of a frog is called a tadpole and the adult form of a tadpole is called a frog.", "fol": "", "prediction": ["all x y.((Frog(x) & ImatureForm(x) & AdultForm(y)) -> (Tadpole(x) & Frog(y)))", "(all x.(Frog(x) -> Tadpole(x)) & all y.(Tadpole(y) -> Frog(y)))", "(all x y.((Frog(x) & ImatureForm(x)) -> Tadpole(x)) & ((Tadpole(y) & AdultForm(y)) -> Frog(y)))", "(all x.(Frog(x) -> Tadpole(x)) & (Tadpole(x) -> Frog(x)))", "all x y.((Frog(x) & ImmatureForm(x) & AdultForm(y)) -> (Tadpole(x) & Frog(y)))", "all x y.((Frog(x) & ImatureForm(x) & AdultForm(y)) -> (Tadpole(x) & Frog(y)))", "all x y.((Frog(x) & Imature(x) & Adult(y)) -> (Tadpole(x) & Frog(y)))", "(all x y.((Frog(x) & ImatureForm(x) & Tadpole(y)) -> AdultForm(x,y)) & ((Frog(x) & Tadpole(y)) -> Frog(x)))", "all x.(Frog(x) -> (ImatureForm(x) & Tadpole(x) & AdultForm(x) & Frog(x)))", "all x y.((Frog(x) & Imature(x) & Tadpole(y)) -> (Tadpole(x) & Adult(y) & Tadpole(y)))", "all x y.(Frog(x) & (ImatureForm(x) -> Tadpole(x)) & AdultForm(y) -> Frog(y))", "(all x.(Frog(x) -> Tadpole(x)) & all y.(Tadpole(y) -> Frog(y)))", "all x.(Frog(x) -> (ImatureForm(x) & Tadpole(x) & AdultForm(x) & Frog(x)))", "(all x y.((Frog(x) & ImatureForm(x) & Tadpole(y)) -> (Tadpole(x) & AdultForm(y)))", "(all x.(Frog(x) -> Tadpole(x)) & (Tadpole(x) -> Frog(x)))", "all x y.(Frog(x) & (Tadpole(y) | Adult(y)))"]}
{"id": "entailmentbank_validation_353", "nl": "an example of metamorphosis is when a tadpole changes from a tadpole into a frog.", "fol": "", "prediction": ["all x.(Metamorphosis(x) -> (TadpoleChangesFromTadpoleToFrog(x)))", "all x y.((Tadpole(x) & Tadpole(y) & ChangesToFrog(x,y)) -> Metamorphosis(x))", "all x.((Tadpole(x) & Tadpole(x)) -> ChangesIntoFrog(x))", "all x y z.((Tadpole(x) & Tadpole(y) & Frog(z)) -> ChangesFromTo(x,y,z))", "all x y.((Tadpole(x) & Tadpole(y)) -> ChangesIntoFrog(x,y))", "all x y.((Tadpole(x) & Tadpole(y) & ChangesToFrog(x,y)) -> Metamorphosis(x))", "all x.((Tadpole(x) & ChangesFromTadpoleToFrog(x)) -> Metamorphosis(x))", "all x.(Metamorphosis(x) -> (TadpoleChangesFromTadpoleToFrog(x)))", "all x.(Metamorphosis(x) -> (TadpoleChange(x) & FromTadpoleToFrog(x)))", "all x y z.((Tadpole(x) & Tadpole(y) & Frog(z) & ChangesFromTo(x,y,z)) -> Metamorphosis(x))", "exists x.(Tadpole(x) & ChangesFromTadpoleToFrog(x))", "all x y z.((Tadpole(x) & Tadpole(y) & Frog(z)) -> ChangesFromTo(x,y,z))", "all x y.((Tadpole(x) & Tadpole(y) & ChangesIntoFrog(x,y)) -> Metamorphosis(x))", "all x y.((Tadpole(x) & Frog(y)) -> ChangesFromTadpoleToFrog(x,y))", "exists x.(Tadpole(x) & ChangesFromTadpoleToFrog(x))", "exists x.(Metamorphosis(x) -> ChangesTadpoleIntoFrog(x))"]}
{"id": "entailmentbank_validation_354", "nl": "reproduction occurs during adulthood.", "fol": "", "prediction": ["all x.(Reproduction(x) -> Adulthood(x))", "all x.(ReproductionOfAdulthood(x) -> OccursDuring(x,adulthood))", "all x y.((Reproduction(x) & Adulthood(y)) -> OccursDuring(x,y))", "(ReproductionOfAdulthood(reproduction) -> Adulthood(reproduction))", "all x y.((Adulthood(x) & Adulthood(y)) -> ReproductionOccurs(x,y))", "(ReproductionOccursDuringAdulthood(x) & Adulthood(x))", "all x.((Reproduction(x) & Adulthood(x)) -> Occurs(x))", "all x.(Reproduction(x) -> Adulthood(x))", "all x.(ReproductionOfAdulthood(x) -> OccursDuringAdulthood(x))", "all x y.((Reproduction(x) & Adulthood(y)) -> OccursDuring(x,y))", "(ReproductionOfAdulthood(reproduction) -> Adulthood(reproduction))", "all x.(ReproductionOf(x,adulthood) -> OccursDuring(x,adulthood))", "all x.((Reproduction(x) & Adulthood(x)) -> OccursDuring(x,y))", "all x.(ReproductionOfAdulthood(x) -> Adulthood(x))", "(ReproductionOfAdulthood(reproduction) -> Adulthood(reproduction))", "all x y.((Reproduction(x) & Adulthood(y)) -> OccursDuring(x,y))"]}
{"id": "entailmentbank_validation_355", "nl": "an example of reproduction is laying eggs.", "fol": "", "prediction": ["all x.(Reproduction(x) -> LayingEggs(x))", "all x.((LaysEggs(x) & Reproduction(x)) -> Reproduction(x))", "all x.(Reproduction(x) -> LayingEggs(x))", "(Reproduction(x) -> LayingEggs(x))", "all x y.((Reproduction(x) & Egg(y)) -> Lays(x,y))", "(LaysEggs(x) -> Reproduction(x))", "all x.((LaysEggs(x) & Reproduction(x)) -> Reproduction(x))", "all x.(Reproduction(x) -> LayingEggs(x))", "exists x.(ReproductionExemple(x) & LayingEggs(x))", "all x y.((Reproduction(x) & Egg(y)) -> Lays(x,y))", "all x.(Reproduction(x) -> LayingEggs(x))", "exists x.(ReproductionExample(x) & LayingEggs(x))", "all x y.((Reproduction(x) & Egg(y)) -> Laying(x,y))", "exists x.(ProductionExemple(x) & LayingEggs(x))", "all x y.(Reproduction(x) -> LayingEggs(y))", "exists x.(ReproductionExample(x) & LaysEggs(x))"]}
{"id": "entailmentbank_validation_356", "nl": "laying eggs occurs during adulthood.", "fol": "", "prediction": ["all x.(LayingEggs(x) -> Adulthood(x))", "all x.((Egg(x) & Adulthood(x)) -> Lays(x,Eggs))", "all x.(LaysEggs(x) -> Adulthood(x))", "all x.((Eggs(x) & Adulthood(x)) -> Lays(x,y))", "all x y.((Egg(x) & Adulthood(y)) -> Lays(x,y))", "(LaysEggsDuringAdulthood(e) -> Adulthood(e))", "all x y.((ElatingEggs(x) & Adulthood(y)) -> OccursDuring(x,y))", "all x y z.((Egg(x) & Adulthood(y) & Adulthood(z)) -> Lays(x,y,z))", "all x y.((Egg(x) & Adulthood(y)) -> Lays(x,y))", "all x.(LayingEggs(x) -> Adulthood(x))", "exists x.(EggLaying(x) & Adulthood(x))", "all x y.((Eggs(x) & Adulthood(y)) -> Lays(x,y))", "all x y.((Egg(x) & Adulthood(y)) -> LaysDuring(x,y))", "all x.(ElatingEggs(x) -> Adulthood(x))", "exists x.(ElatingEggs(x) & Adulthood(x))", "exists x.(EggLayer(x) & Adulthood(x))"]}
{"id": "entailmentbank_validation_357", "nl": "adulthood is a stage in the life cycle process.", "fol": "", "prediction": ["all x.(Adult(x) -> StageInLifeCycleProcess(x))", "all x y.((Adult(x) & LifeCycleProcess(y)) -> StageInProcess(x,y))", "all x.(Adulthood(x) -> StageInLifeCycleProcess(x))", "all x.(Adult(x) -> StageInLifeCycleProcess(x))", "(LifeCycleProcess(adulthood) & Stage(adulthood))", "all x.(Adult(x) -> LifeCycleProcess(x))", "adulthood is a stage in LifeCycleProcess(x)", "adulthood is a stage in lifecycle process.", "all x y.((Adult(x) & LifeCycleProcess(y)) -> StageIn(x,y))", "all x.(Adulthood(x) -> LifeCycleProcess(x))", "(LifeCycleProcess(adulthood) -> StageIn(adulthood))", "all x.((Adult(x) & LifeCycleProcess(x)) -> StageInProcess(x))", "all x y.((Adult(x) & LifeCycleProcess(y)) -> StageInProcess(x,y))", "all x.(Adult(x) -> StageInLifeCycle(x))", "all x.(Adulthood(x) -> StageInLifeCycleProcess(x))", "all x.(Adult(x) -> LifeCycleProcess(x))"]}
{"id": "entailmentbank_validation_358", "nl": "laying eggs occurs during the adult stage in the life cycle.", "fol": "", "prediction": ["all x.((Egg(x) & AdultStage(x)) -> Lays(x))", "all x y.((Egg(x) & AdultStage(y)) -> Lays(x,y))", "all x.(LaysEggs(x) -> AdultStage(x))", "all x y z.((Egg(x) & AdultStage(y) & LifeCycle(z)) -> Lays(x,y,z))", "(LaysEggsDuringAdultStage(Eggs) & AdultStage(Eggs))", "all x.((Egg(x) & AdultStage(x)) -> Lays(x))", "all x y.((Egg(x) & AdultStage(y)) -> Lays(x,y))", "all x.(LayingEggs(x) -> AdultStageInLifeCycle(x))", "all x y.((ElatingEggs(x) & AdultStage(y)) -> OccursDuringLifeCycle(x,y))", "exists x.(EggStage(x) & AdultStage(x) & LifeCycle(x))", "all x y z.((Egg(x) & AdultStage(y) & LifeCycle(z)) -> Lays(x,y,z))", "all x y.((Egg(x) & AdultStage(y) & LifeCycle(z)) -> Lays(x,y,z))", "all x.((Egg(x) & AdultStage(x)) -> Lays(x,Eggs))", "all x y.((Egg(x) & AdultStage(y)) -> Lays(x,y))", "all x.(LaysEggs(x) -> AdultStage(x))", "exists x.(ElatingEggs(x) & AdultStage(x) & LifeCycle(x))"]}
{"id": "entailmentbank_validation_359", "nl": "a female insect lays eggs.", "fol": "", "prediction": ["all x.(FemaleInsect(x) -> LaysEggs(x))", "all x y.((FemaleInsect(x) & Egg(y)) -> Lays(x,y))", "all x.((FemaleInsect(x) & LaysEggs(x)) -> FemaleInsect(x))", "all x.(FemaleInsect(x) -> LaysEggs(x))", "all x y.((FemaleInsect(x) & Egg(y)) -> Lays(x,y))", "all x y z.((FemaleInsect(x) & Egg(y) & Egg(z)) -> Lays(x,y,z))", "all x.(FemaleInsect(x) -> LaysEggs(x))", "all x y.((FemaleInsect(x) & Egg(y) & Lays(x,y)) -> Lays(x,y))", "all x y.((FemaleInsect(x) & Egg(y)) -> Lays(x,y))", "all x.(FemaleInsect(x) -> LaysEggs(x))", "exists x.(Insect(x) & Female(x) & LaysEggs(x))", "all x y.((FemaleInsect(x) & Egg(y) & Lays(x,y)) -> Lays(x,y))", "exists x.(FemaleInsect(x) & LaysEggs(x))", "exists x.(FemaleInsect(x) & LaysEggs(x))", "exists x.(FemaleInsect(x) & LaysEggs(x))", "exists x.(FemaleInsect(x) & LaysEggs(x))"]}
{"id": "entailmentbank_validation_360", "nl": "a female insect lays eggs during the adult stage of an insect's life cycle.", "fol": "", "prediction": ["all x y.((FemaleInsect(x) & AdultStage(y)) -> LaysEggs(x,y))", "all x.((FemaleInsect(x) & LaysEggsDuringAdultStage(x)) -> InsectLifeCycle(x))", "all x y.((FemaleInsect(x) & Insect(y) & LaysEggs(x,y)) -> AdultStage(x))", "all x y z.((FemaleInsect(x) & Egg(y) & AdultStage(z)) -> LaysDuringLifeCycle(x,y,z))", "all x.(FemaleInsect(x) -> LaysEggsDuringAdultStageOfLifeCycle(x))", "all x y z.((FemaleInsect(x) & Eggs(y) & AdultStage(z)) -> LaysDuringLifeCycle(x,y,z))", "all x.((FemaleInsect(x) & LaysEggsDuringAdultStage(x)) -> InsectLifeCycle(x))", "all x y.((FemaleInsect(x) & AdultStage(y)) -> LaysEggs(x,y))", "exists x.(FemaleInsect(x) & LaysEggs(x) & AdultStageOfLifeCycle(x))", "all x y.((FemaleInsect(x) & Insect(y)) -> LaysEggsDuringAdultStage(x,y))", "exists x.(FemaleInsect(x) & LaysEggs(x) & AdultStageOfInsectLifeCycle(x))", "all x.((FemaleInsect(x) & LaysEggsDuringAdultStage(x)) -> InsectLifeCycle(x))", "all x y.((FemaleInsect(x) & AdultStageOfLifeCycle(y)) -> LaysEggs(x,y))", "all x y z.((FemaleInsect(x) & Egg(y) & AdultStage(z)) -> LaysDuringLifeCycle(x,y,z))", "all x y.((FemaleInsect(x) & Insect(y) & LaysEggsDuringAdultStage(x,y)) -> InsectLifeCycle(x,y))", "exists x.(FemaleInsect(x) & LaysEggsDuringAdultStage(x))"]}
{"id": "entailmentbank_validation_361", "nl": "a cat is a kind of mammal.", "fol": "", "prediction": ["all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x y.((Cat(x) & Mammal(y)) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x y.((Cat(x) & Mammal(y)) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x y.((Cat(x) & Mammal(y)) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "exists x.(Cat(x) & Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "exists x.(Cat(x) & Mammal(x))", "exists x.(Cat(x) & Mammal(x))", "exists x.(Cat(x) & Mammal(x))", "exists x.(Cat(x) & Mammal(x))"]}
{"id": "entailmentbank_validation_362", "nl": "mammals give birth to live young.", "fol": "", "prediction": ["all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x y.((Mammal(x) & Mammal(y)) -> GivesBirthToLiveYoung(x,y))", "(all x.(Mammal(x) -> GivesBirthToLiveYoung(x)))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x y z.((Mammal(x) & Mammal(y) & Mammal(z)) -> GivesBirthToLiveYoung(x,y,z))", "all x y.((Mammal(x) & Mammal(y)) -> GivesBirthToLiveYoung(x,y))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x y.((Mammal(x) & Mammal(y)) -> GivesBirthToLiveYoung(x,y))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x.(Mammal(x) -> GiveBirthToLiveYoung(x))", "exists x.(Mammal(x) & Mammal(x) & GivesBirthToLiveYoung(x))", "all x y.((Mammal(x) & Mammal(y)) -> GivesBirthToLiveYoung(x,y))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x y.((Mammal(x) & Mammal(y)) -> GivesBirthToLiveYoung(x,y))", "all x.(Mammal(x) -> GiveBirthToLiveYoung(x))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))"]}
{"id": "entailmentbank_validation_363", "nl": "a cat gives birth to live young.", "fol": "", "prediction": ["all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x y.((Cat(x) & GivesBirthToLiveYoung(x)) -> GivesBirthToLiveYoung(x))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x y z.((Cat(x) & LiveYoung(y) & GivesBirthTo(x,y)) -> GivesBirthTo(x,y))", "all x y.((Cat(x) & GivesBirthToLiveYoung(x)) -> GivesBirthToLiveYoung(x,y))", "all x y.((Cat(x) & LiveYoung(y)) -> GivesBirthTo(x,y))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x y.((Cat(x) & GivesBirthToLiveYoung(x)) -> GivesBirthToLiveYoung(y))", "all x y.((Cat(x) & LiveYoung(y)) -> GivesBirthTo(x,y))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "exists x.(Cat(x) & GivesBirthToLiveYoung(x))", "exists x.(Cat(x) & GivesBirthToLiveYoung(x))", "exists x.(Cat(x) & GivesBirthToLiveYoung(x))", "exists x.(Cat(x) & GivesBirthToLiveYoung(x))"]}
{"id": "entailmentbank_validation_364", "nl": "to give birth to live young means to undergo live birth.", "fol": "", "prediction": ["all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> LiveBirth(x))", "all x y.((GivesBirthToLiveYoung(x) & LiveBirth(y)) -> UndergoesLiveBirth(x))", "(GivesBirthToLiveYoung(x) -> UndergoesLiveBirth(x))", "all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> GivesBirthToLiveYoung(x))", "all x.(GivesBirthToLiveYoung(x) -> UndergoesLiveBirth(x))", "(all x.(LiveYoung(x) -> GivesBirthTo(x)))", "all x y.((GiveBirthToLiveYoung(x) & GiveBirthToLiveYoung(x)) -> UndergoesLiveBirth(y))", "all x.((GiveBirthToLiveYoung(x)) -> UndergoesLiveBirth(x))", "all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> LiveBirth(x))", "all x.(LiveYoung(x) -> UndergoesLiveBirth(x))", "all x.(GivesBirthToLiveYoung(x) -> UndergoesLiveBirth(x))", "all x y.((GivesBirthToLiveYoung(x) & LiveBirth(y)) -> UndergoesLiveBirth(x,y))", "all x y.((GiveBirthToLiveYoung(x) & GiveBirthToLiveYoung(y)) -> UndergoesLiveBirth(x,y))", "all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> GivesBirthToLiveYoung(x))", "all x y.((GivesBirthToLiveYoung(x) & LiveBirth(y)) -> UndergoesLiveBirth(x))", "all x.((GiveBirthToLiveYoung(x)) -> UndergoesLiveBirth(x))"]}
{"id": "entailmentbank_validation_365", "nl": "a cat undergoes live birth.", "fol": "", "prediction": ["all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x y.((Cat(x) & LiveBirth(y)) -> Undergoes(x,y))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x y.((Cat(x) & LiveBirth(y)) -> Undergoes(x,y))", "all x y.((Cat(x) & LiveBirth(y) & Undergoes(x,y)) -> Undergoes(x,y))", "all x.(Cat(x) -> LiveBirth(x))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x y.((Cat(x) & LiveBirth(y)) -> Undergoes(x,y))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.(Cat(x) -> LiveBirth(x))", "all x y.((Cat(x) & LiveBirth(y)) -> Undergoes(x,y))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "exists x.(Cat(x) & LiveBirth(x))", "exists x.(Cat(x) & LiveBirth(x))", "all x.(Cat(x) -> UndergoesLiveBirth(x))"]}
{"id": "entailmentbank_validation_366", "nl": "live birth means developing inside the mother instead of an egg.", "fol": "", "prediction": ["all x y.((LiveBirth(x) & Mother(y)) -> (DevelopsInside(x,y) & -Egg(y)))", "all x.(LiveBirth(x) -> (DevelopsInsideMother(x) & -Egg(x)))", "all x y z.((LiveBirth(x) & Mother(y) & Egg(z)) -> (DevelopsInside(x,y,z) & -DevelopsInside(x,y)))", "all x y.((LiveBirth(x) & Mother(y)) -> (DevelopsInside(x,y) & -Egg(y)))", "all x.(LiveBirth(x) -> (DevelopsInsideMother(x) & -Egg(x)))", "all x y.(LiveBirth(x) -> (DevelopsInsideMother(x,y) & -Egg(y)))", "liveBirth(live) -> (DevelopsInsideMother(live) & -Egg(live)))", "all x y z.((LiveBirth(x) & Mother(y) & Egg(z)) -> (DevelopsInside(x,y,z) & -DevelopsInside(x,y)))", "(LiveBirth(livebirth) -> (DevelopsInsideMother(livebirth) & -Egg(livebirth)))", "all x.(LiveBirth(x) -> (DevelopsInsideMother(x) & -Egg(x)))", "all x y z.((LiveBirth(x) & Mother(y) & Egg(z)) -> (DevelopsInside(x,y,z) & -DevelopsInside(x,y,z)))", "all x.(LiveBirth(x) -> (DevelopsInsideMother(x) & -Egg(x)))", "all x y.((LiveBirth(x) & Mother(y)) -> (DevelopsInside(x,y) & -Egg(y)))", "exists x.(LiveBirth(x) & DevelopmentInsideMother(x) & -Egg(x))", "all x.(LiveBirth(x) -> (DevelopsInsideMother(x) & -Egg(x)))", "exists x.(LiveBirth(x) & -Egg(x))"]}
{"id": "entailmentbank_validation_367", "nl": "a cat develops inside its mother.", "fol": "", "prediction": ["all x.(Cat(x) -> DevelopsInsideMother(x))", "all x y.((Cat(x) & Mother(y)) -> DevelopsInside(x,y))", "all x.(Cat(x) -> DevelopsInsideMother(x))", "all x y.((Cat(x) & Mother(y)) -> DevelopsInside(x,y))", "all x y z.((Cat(x) & Mother(y) & Mother(z)) -> DevelopsInside(x,y,z))", "all x.(Cat(x) -> DevelopsInsideMother(x))", "all x y.((Cat(x) & Mother(y)) -> DevelopsInside(x,y))", "all x.(Cat(x) -> DevelopsInsideMother(x))", "all x y.((Cat(x) & Mother(y)) -> DevelopsInside(x,y))", "exists x.(Cat(x) & DevelopingInside(x,Mother))", "all x.(Cat(x) -> DevelopsInsideMother(x))", "all x y.((Cat(x) & Mother(y)) -> DevelopsInside(x,y))", "exists x.(Cat(x) & DevelopmentInsideMother(x))", "exists x.(Cat(x) & DevelopedInsideMother(x))", "all x y.((Cat(x) & Mother(y)) -> DevelopsInside(x,y))", "exists x.(Cat(x) & DevelopsInsideMother(x))"]}
{"id": "entailmentbank_validation_368", "nl": "the opposite of the same is different.", "fol": "", "prediction": ["all x.((OppositeOfSame(x) & OppositeOfSame(x)) -> Different(x))", "all x.(OppositeOfSame(x) -> Different(x))", "all x y.((OppositeOfSame(x) & OppositeOfSame(y)) -> Different(x,y))", "-OppositeOfSame(x) -> Different(x))", "(OppositeOfSame(x) -> Different(x))", "all x.((OppositeOfSame(x) & OppositeOfSame(x)) -> Different(x))", "the oppositeOfSame(x) -> Different(x))", "all x.(OppositeOfSame(x) -> Different(x))", "is different(oppositeOfSame(x))", "all x y.((Opposite(x,y) & Same(y)) -> Different(x))", "(OppositeOfSame(x) -> Different(x))", "all x.((OppositeOfSame(x) & OppositeOfSame(x)) -> Different(x))", "all x y.((OppositeOfSame(x) & OppositeOfSame(y)) -> Different(x))", "all x.(OppositeOfSame(x) -> Different(x))", "all x.((OppositeOfSame(x) & OppositeOfSame(x)) -> Different(x))", "exists x.(OppositeOfSame(x) & Different(x))"]}
{"id": "entailmentbank_validation_369", "nl": "two birds are not in the same taxonomic family.", "fol": "", "prediction": ["all x.(Bird(x) -> -TaxinomianFamily(x))", "all x y.((Bird(x) & Bird(y)) -> -TaxonomicFamily(x,y))", "all x.(Bird(x) -> -TaxonomicFamily(x))", "(-SameTaxonomicFamily(Bird) & Bird(Bird))", "-(Bird(x) & Bird(x))", "(-exists x.(Bird(x) & TaxonomicFamily(x)) & Bird(x) & TaxonomicFamily(x))", "all x y.((Bird(x) & Bird(y)) -> -TaxinomianFamily(x,y))", "all x.(Bird(x) -> -TaxinomicalFamily(x))", "all x.(Bird(x) -> -SameTaxonomicFamily(x))", "-(Bird(x) & Bird(x))", "all x y.((Bird(x) & Bird(y)) -> -TaxonomicFamily(x,y))", "all x.(Bird(x) -> -InTaxonomicFamily(x))", "exists x.(Bird(x) & -(TaxonomicFamily(x) & TaxonomicFamily(x)))", "all x y.((Bird(x) & Bird(y)) -> -InTaxonomicFamily(x,y))", "all x.(Bird(x) -> -TaxonomicFamily(x))", "exists x.(Bird(x) & -(TaxinomianFamily(x) | TaxonomicFamily(x)))"]}
{"id": "entailmentbank_validation_370", "nl": "two birds are in different taxonomic families.", "fol": "", "prediction": ["all x.(Bird(x) -> DifferentTaxonomicFamilies(x))", "all x y.((Bird(x) & Bird(y)) -> DifferentTaxonomicFamily(x,y))", "(DifferentTaxonomicFamilies(Bird) & DifferentTaxonomicFamilies(Bird))", "all x.(Bird(x) -> (DifferentTaxonomicFamilies(x) & DifferentTaxonomicFamilies(x)))", "all x.(Bird(x) -> DifferentTaxonomicFamily(x))", "(DifferentThanOmicFamilies(Bird) & InDifferentThanomicFamilies(Bird))", "all x y.((Bird(x) & Bird(y)) -> DifferentTaxonomicFamilies(x,y))", "(DifferentTaxonomicFamilies(Bird,2))", "all x y.((Bird(x) & Bird(y)) -> DifferentTyclonomicalFamilies(x,y))", "exists x.(Bird(x) & TaxonomicFamily(x))", "all x y.((Bird(x) & Bird(y)) -> TaxonomicFamily(x,y))", "exists x.(Bird(x) & TaxonomicFamily(x) & DifferentFamily(x))", "all x.(Bird(x) -> DifferentTaxonomicFamilies(x))", "all x y.((Bird(x) & Bird(y)) -> DifferentTaxonomicFamily(x,y))", "exists x.(Bird(x) & TaxonomicFamily(x))", "exists x.(Bird(x) & TaxonomicFamily(x,2))"]}
{"id": "entailmentbank_validation_371", "nl": "environments with similar characteristics place similar environmental pressures on the organisms in them.", "fol": "", "prediction": ["all x y.((Environment(x) & SimilarCharacteristics(x) & Organism(y)) -> PlacesSameEnvironmentalPressures(x,y))", "all x.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressuresOnOrganisms(x))", "all x y.((Environment(x) & Environment(y) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressures(x,y))", "all x y z.((Environment(x) & SimilarCharacteristics(y) & Organism(z)) -> PlacesSameEnvironmentalPressure(x,z))", "all x y.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressures(x,y))", "(all x.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressure(x)))", "all x.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressure(x))", "all x y z.((Environment(x) & Environment(y) & Organism(z) & SimilarCharacteristics(x,y) & SimilarEnvironmentalPressure(y,z)) -> PlacesOn(x,y,z))", "all x y z.((Environment(x) & SimilarCharacteristics(y) & Organism(z)) -> PlacesSameEnvironmentalPressures(x,y,z))", "all x.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressionsOnOrganisms(x))", "all x y.((Environment(x) & Environment(y) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressure(x,y))", "all x.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSimilarEnvironmentalPressuresOnOrganisms(x))", "all x y.((Environment(x) & SimilarCharacteristics(x) & Organism(y)) -> PlacesSameEnvironmentalPressure(x,y))", "all x.((Environment(x) & SimilarCharacteristics(x)) -> PlacesEnvironmentalPressionsOnOrganisms(x))", "all x.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressures(x))", "all x.((Environment(x) & SimilarCharacteristics(x)) -> PlaceSameEnvironmentalPressuresOnOrganisms(x))"]}
{"id": "entailmentbank_validation_372", "nl": "two birds live in environments with similar characteristics.", "fol": "", "prediction": ["all x y.((Bird(x) & Environment(y) & SimilarCharacteristics(x,y)) -> LivesIn(x,y))", "all x.(Bird(x) -> LivesInEnvironment(x,y))", "exists x.(Bird(x) & Environment(x) & SimilarCharacteristics(x))", "(exists x.(Bird(x) & LivesInEnvironment(x,y) & SimilarCharacteristics(y)))", "(LivingInSameEnvironment(Bird,2) & LivingInSameEnvironment(Bird,2))", "all x y z.((Bird(x) & Environment(y) & Environment(z) & SimilarCharacteristics(x,y,z)) -> LivesIn(x,y,z))", "all x.(Bird(x) -> LivesInSameEnvironment(x))", "all x y.((Bird(x) & Environment(y) & SimilarCharacteristics(x,y)) -> LivesIn(x,y))", "(exists x.(Bird(x) & LivesIn(x,y)) & SimilarCharacteristics(y))", "all x y.((Bird(x) & Environment(y) & SimilarCharacteristics(y)) -> LivesIn(x,y))", "exists x.(Bird(x) & Environment(x) & SimilarCharacteristics(x))", "all x y z.((Bird(x) & Environment(y) & Environment(z) & SimilarCharacteristics(y,z)) -> LivesIn(x,y,z))", "exists x.(Bird(x) & Bird(x) & LivesInEnvironment(x,y) & SimilarCharacteristics(y))", "all x.(Bird(x) -> LivesInEnvironment(x,y))", "all x.(Bird(x) -> (LivesInEnvironment(x) & SimilarCharacteristics(x)))", "exists x.(Bird(x) & Environment(x) & SimilarCharacteristics(x))"]}
{"id": "entailmentbank_validation_373", "nl": "two birds developed under similar environmental pressures.", "fol": "", "prediction": ["all x.(Bird(x) -> (DevelopedUnderSameEnvironmentalPressures(x) & SimilarEnvironmentalPressures(x)))", "all x y.((Bird(x) & Bird(y)) -> SimilarEnvironmentalPressures(x,y))", "(exists x.(Bird(x) & SimilarEnvironmentalPressions(x)))", "all x.((Bird(x) & Bird(x)) -> SimilarEnvironmentalPressures(x))", "(SameEnvironmentalPressions(Bird,2) & SimilarEnvironmentalPressions(Bird,2))", "all x.(Bird(x) -> (DevelopedUnderSameEnvironmentalPressions(x) & DevelopedUnderSameEnvironmentalPressures(x)))", "-exists x.(Bird(x) & Bird(x) & SimilarEnvironmentalPressures(x))", "two birds developed under similar environmental pressures.", "(exists x.(Bird(x) & SimilarEnvironmentalPressures(x)) & DevelopedUnder(x,y))", "all x.(Bird(x) & SimilarEnvironmentalPressures(x))", "two birds developed under similar environmentalpressures.", "(exists x.(Bird(x) & SimilarEnvironment(x)) & DevelopedUnder(x,y))", "all x.((Bird(x) & Bird(y)) -> SimilarEnvironmentalPressures(x,y))", "the same environmental pressures that developed between the birds.", "(exists x.(Bird(x) & DevelopedUnderSameEnvironmentalPressions(x)))", "all x.(Bird(x) -> (DevelopedUnderSameEnvironmentalPressures(x) & Bird(x)))"]}
{"id": "entailmentbank_validation_374", "nl": "two birds developed thousands of miles apart.", "fol": "", "prediction": ["all x.(Bird(x) -> (DevelopedThousandsOfMilesApart(x) & Bird(x)))", "all x y.((Bird(x) & Bird(y)) -> DevelopedThousandsOfMilesApart(x,y))", "all x.((Bird(x) & Bird(y)) -> DevelopedThousandsOfMilesApart(x,y))", "all x.(Bird(x) -> (DevelopedMilesAway(x) & ThousandsOfMilesApart(x)))", "two birds developed thousandsOfMilesApart(Birds)", "(exists x.(Bird(x) & Bird(x) & DevelopedMilesAway(x)))", "all x.(Bird(x) -> DevelopedMillionsOfMilesApart(x))", "(exists x.(Bird(x) & Bird(x) & MillionsOfMilesApart(x)))", "the two birds developed thousands of miles apart.", "-exists x.(Bird(x) & Bird(x) & DevelopedMilesAway(x))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedThousandsOfMilesApart(x,y)))", "all x.((Bird(x) & Bird(y)) -> developedMilesAway(x,y))", "(exists x.(Bird(x) & DevelopedMilesAway(x)))", "all x.(Bird(x) -> (DevelopedThousandsOfMilesApart(x)))", "all x.((Bird(x) & Bird(x)) -> developedThousandsOfMilesApart(x))", "exists x.(Bird(x) & Bird(x) & developedMilesAway(x))"]}
{"id": "entailmentbank_validation_375", "nl": "if two things are thousands of miles apart then those two things are separate from each other.", "fol": "", "prediction": ["all x.((TwoThings(x) & TausendsOfMilesApart(x)) -> SeparateFromEachOther(x))", "all x y.((TwoThings(x) & ThousandOfMilesApart(x)) -> SeparateFrom(x,y))", "all x.((TwoThings(x) & ThousandsOfMilesApart(x)) -> SeparateFromEachOther(x))", "((TwoThings(x) & TausendsOfMilesApart(x)) -> SeparateFromEachOther(x))", "all x y z.((TwoThings(x) & ThousandOfMilesApart(x) & Thing(y) & Thing(z)) -> SeparateFrom(x,y,z))", "all x.((TwoThings(x) & ThousandOfMilesApart(x)) -> SeparateFromEachOther(x))", "all x y.((TwoThings(x) & ThousandsOfMilesApart(x)) -> SeparateFrom(x,y))", "-((TwoThings(x) & TausendsOfMilesApart(x)) -> SeparateFromEachOther(x))", "-(TwoThings(x) & TausendsOfMilesApart(x)) -> SeparateFromEachOther(x))", "all x y.((TwoThings(x) & TausendsOfMilesApart(x)) -> SeparateFromEachOther(x,y))", "all x y.((TwoThings(x) & ThousandOfMilesApart(x)) -> SeparateFromEachOther(y))", "exists x.(TwoThings(x) & ThousandsOfMilesAbove(x))", "exists x.(TwoThings(x) & ThousandOfMilesApart(x))", "all x.((TwoTen(x) & TausendsOfMilesApart(x)) -> SeparateFromEachOther(x))", "all x.((TwoThings(x) & TausendsOfMilesApart(x)) -> SeparateFromEachOther(x))", "all x y.((TwoThings(x) & ThousandOfMilesAbove(x,y)) -> SeparateFrom(x,y))"]}
{"id": "entailmentbank_validation_376", "nl": "two birds developed separate from each other.", "fol": "", "prediction": ["all x.(Bird(x) -> (DevelopedSeparateFrom(x,y) & Bird(y)))", "all x y.((Bird(x) & Bird(y)) -> DevelopedSeparateFrom(x,y))", "(Development(Bird,SeparateFrom(Bird,Bird,Bird,Bird,Bird))", "(exists x.(Bird(x) & Bird(x) & DevelopsSeparately(x,y)))", "all x y z.((Bird(x) & Bird(y) & Bird(z)) -> (DevelopedSeparateFrom(x,y,z)))", "all x y.((Bird(x) & Bird(y)) -> DevelopsSeparately(x,y))", "all x.(Bird(x) -> (DevelopedSeparateFrom(x,y) & Bird(y)))", "(DevelopedSeparateFrom(bird,2) & DevelopedSeparateFrom(bird,2))", "two birds developed separate from each other.", "all x.((Bird(x) & Bird(y)) -> DevelopsSeparatelyFrom(x,y))", "(exists x.(Bird(x) & Bird(x) & Separate(x)))", "all x y.((Bird(x) & Bird(y)) -> DevelopedSeparate(x,y))", "all x.(Bird(x) -> (DevelopedSeparateFrom(x,y) & Bird(y)))", "all x.(Bird(x) -> (DevelopedSeparate(x) & DevelopedSeparate(x)))", "exists x.(Bird(x) & Bird(x) & DevelopsSeparately(x,y))", "all x.(Bird(x) -> DevelopsSeparatelyFrom(x,y))"]}
{"id": "entailmentbank_validation_377", "nl": "two birds developed in separate environments under similar environmental pressures.", "fol": "", "prediction": ["all x.(Bird(x) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressures(y)))", "(exists x.(Bird(x) & DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))", "all x.((Bird(x) & Bird(x)) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))", "all x.(Bird(x) -> (DevelopedInSeparateEnvironments(x) & UnderSameEnvironmentalPressures(x)))", "(exists x.(Bird(x) & SeparateEnvironment(x) & SimilarEnvironmentPressure(x)))", "two birds developed in separate environments under similar environmental pressures.", "all x y z.((Bird(x) & Environment(y) & Environment(z) & SimilarPressions(y,z)) -> DevelopsInSeparateEnvironments(x,y,z))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressions(x,y)))", "all x.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressures(x,y)))", "two birds developed in separate environments under similar environmental pressures.", "exists x.(Bird(x) & Bird(x) & SeparateEnvironment(x) & SimilarEnvironmentPressure(x))", "(exists x.(Bird(x) & DevelopedInSeparateEnvironments(x)) & SimilarEnvironmentalPressures(x))", "all x.(Bird(x) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressions(x)))", "(exists x.(Bird(x) & Bird(x) & SeparateEnvironment(x) & SimilarEnvironmentPressure(x)))", "all x.(Bird(x) -> (DevelopedInSeparateEnvironments(x) & UnderSameEnvironmentalPressions(x)))"]}
{"id": "entailmentbank_validation_378", "nl": "two birds from different taxonomic families developed in separate environments under similar environmental pressures.", "fol": "", "prediction": ["all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x,y) & TaxonomicFamily(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressures(x,y)))", "all x.((Bird(x) & TaxonomicFamily(x) & DifferentFamily(x)) -> DifferentEnvironmentsUnderSameEnvironmentalPressures(x))", "all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & Different(x,y) & Different(x,z)) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))", "(exists x.(Bird(x) & TaxonomicFamily(x) & TaxonomicFamily(x) & TaxonomicFamily(x) & DifferentEnvironments(x) & SimilarEnvironmentalPressures(x)))", "(DifferentTaxonomicFamilies(Birds) & DifferentTaxonomicFamilies(Birds) & DifferentTaxonomicFamilies(Birds) & DifferentEnvironments(Birds) & SimilarEnvironmentalPressures(Birds))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x,y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressures(x,y)))", "all x.(Bird(x) -> (DifferentTaxonomicFamilies(x) & DifferentTaxonomicFamilies(x) & DifferentEnvironments(x) & SimilarEnvironmentalPressures(x)))", "(exists x.(Bird(x) & TaxonomicFamily(x) & Different(x)) & exists y.(Bird(y) & TaxonomicFamily(x) & Different(y)) & exists z.(Environment(z) & SimilarEnvironment(z)) & DifferentEnvironment(z) & SimilarEnvironment(z)))", "all x.((Bird(x) & TaxonomicFamily(x) & TaxonomicFamily(x)) -> DifferentEnvironments(x))", "exists x.(Bird(x) & TaxonomicFamily(x) & DifferentTaxonomicFamily(x) & DifferentEnvironment(x) & SimilarEnvironmentalPressures(x))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x) & TaxonomicFamily(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressures(x,y)))", "(exists x.(Bird(x) & TaxonomicFamily(x) & TaxonomicFamily(x) & Different(x)) & exists y.(Bird(y) & TaxonomicFamily(x,y)) & exists z.(Environment(z) & SimilarEnvironment(z)) & DifferentEnvironment(x,z)))", "all x.((Bird(x) & DifferentTaxonomicFamily(x)) -> DifferentEnvironments(x))", "exists x.(Bird(x) & TaxonomicFamily(x) & TaxonomicFamily(x) & DifferentEnvironments(x) & SimilarEnvironmentalPressures(x))", "all x.((Bird(x) & DifferentTaxonomicFamily(x)) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))", "all x.((Bird(x) & TaxonomicFamily(x) & DifferentFamily(x)) -> DifferentEnvironment(x))"]}
{"id": "entailmentbank_validation_379", "nl": "convergent evolution is when two species in different taxonomic families develop in different places under similar environmental pressures.", "fol": "", "prediction": ["all x y.((Species(x) & TaxonomicFamily(y) & Different(x,y)) -> ConvergentEvolution(x))", "all x.(ConvergentEvolution(x) -> (exists y.(Species(y) & TaxonomicFamily(y) & Different(y)) & DifferentPlaces(y) & DifferentEnvironmentalPressures(x))))", "all x y z.((Species(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & DifferentPlaces(x,y) & SimilarEnvironmentalPressures(x,z)) -> ConvergentEvolution(x))", "all x.((Species(x) & TaxonomicFamily(x) & DifferentTaxonomicFamily(x) & DifferentPlaces(x)) -> ConvergentEvolution(x))", "all x.(ConvergentEvolution(x) -> (exists y.(Species(y) & TaxonomicFamily(y) & Different(y)) & DifferentPlaces(y) & DifferentEnvironmentalPressures(x))))", "all x y.((Species(x) & TaxonomicFamily(y) & Different(x,y)) -> ConvergentEvolution(x))", "all x.(ConvergentEvolution(x) -> (exists y.(Species(y) & TaxonomicFamily(y) & Different(y)) & DifferentPlaces(y) & DifferentEnvironmentalPressures(x,y))))", "all x.((Species(x) & DifferentTaxonomicFamilies(x) & DifferentPlaces(x) & SimilarEnvironmentalPressures(x)) -> ConvergentEvolution(x))", "all x.(ConvergentEvolution(x) -> (exists y.(Species(y) & TaxonomicFamily(y) & Different(y)) & DifferentPlaces(y) & DevelopsInSameEnvironment(x,y))))", "all x y z.((Species(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & DifferentPlaces(x,z)) -> ConvergentEvolution(x))", "all x.(ConvergentEvolution(x) -> exists y.(Species(y) & TaxonomicFamily(y) & Different(y) & DifferentPlaces(y) & DifferentEnvironmentalPressures(x,y)))", "exists x.(CconvergentEvolution(x) -> (Species(x) & TaxonomicFamily(x) & DifferentPlaces(x) & SimilarEnvironmentalPressures(x)))", "all x y.((Species(x) & TaxonomicFamily(y) & DifferentTaxonomicFamily(x,y)) -> ConvergentEvolution(x))", "all x y.((Species(x) & TaxonomicFamily(y) & DevelopsInDifferentPlaces(x,y) & SimilarEnvironmentalPressures(x)) -> ConvergentEvolution(x))", "all x y z.((Species(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & DevelopsInDifferentPlaces(x,z)) -> ConvergentEvolution(x))", "all x y.((Species(x) & TaxonomicFamily(y) & Different(y)) -> ConvergentEvolution(x,y))"]}
{"id": "entailmentbank_validation_380", "nl": "an example of convergent evolution is two birds from different taxonomic families developing in separate environments under similar environmental pressures.", "fol": "", "prediction": ["all x.((Bird(x) & TaxonomicFamily(x) & TaxonomicFamily(x) & SeparateEnvironments(x) & SimilarEnvironmentalPressures(x)) -> ConvergentEvolution(x))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x,y) & TaxonomicFamily(y) & Different(y)) -> ConvergentEvolution(x))", "all x.(ConvergentEvolution(x) -> (Bird(x) & Bird(x) & TaxonomicFamily(x) & DifferentEnvironments(x) & SimilarEnvironmentalPressures(x)))", "all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & Different(x,y) & DifferentEnvironment(x,z)) -> ConvergentEvolution(x))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x) & TaxonomicFamily(y) & DifferentEnvironments(x,y)) -> ConvergentEvolution(x))", "(ConvergentEvolution(x) -> (BirdsFromDifferentTaxonomicFamilies(x) & DevelopInSeparateEnvironments(x) & UnderSameEnvironmentalPressures(x)))", "all x.((Bird(x) & TaxonomicFamily(x) & DifferentFamily(x) & SeparateEnvironments(x)) -> ConvergentEvolution(x))", "all x.(ConvergentEvolution(x) -> (exists y.(Bird(y) & TaxonomicFamily(y) & Different(y)) & DevelopsInSeparateEnvironments(x,y))))", "(ConvergentEvolution(x) -> (Bird(x) & Bird(x) & TaxonomicFamily(x) & DifferentEnvironments(x) & SimilarEnvironmentPressures(x)))", "all x y z.((Bird(x) & Bird(y) & TaxonomicFamily(z) & DifferentTaxonomicFamily(y) & DifferentEnvironment(z) & DevelopInSeparateEnvironments(x,y,z)) -> ConvergentEvolution(x))", "exists x.(ConvergentEvolution(x) -> (BirdsFromDifferentTaxonomicFamilies(x) & DevelopInSeparateEnvironments(x) & UnderSameEnvironmentalPressures(x)))", "all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & DifferentFamily(x,y,z)) -> ConvergentEvolution(x))", "all x.((Bird(x) & TaxonomicFamily(x) & TaxonomicFamily(x) & DifferentEnvironments(x) & SimilarEnvironmentalPressures(x)) -> ConvergentEvolution(x))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(y) & Different(y)) -> ConvergentEvolution(x,y))", "all x y.((Bird(x) & Bird(y) & DifferentTaxonomicFamilies(x) & DifferentEnvironmentPressures(y)) -> ConvergentEvolution(x))", "exists x.(ConvergentEvolution(x) -> (Bird(x) & Bird(x) & DifferentTaxonomicFamilies(x) & SeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))"]}
{"id": "entailmentbank_validation_381", "nl": "winter is a kind of season.", "fol": "", "prediction": ["all x.(Winter(x) -> Season(x))", "all x.(Winter(x) -> Season(x))", "all x y.((Winter(x) & Season(y)) -> Season(x,y))", "(all x.(Winter(x) -> Season(x)))", "winter is a kind of Season.", "all x.(Winter(x) -> Season(x))", "all x y.((Winter(x) & Season(y)) -> Season(x,y))", "(all x.(Winter(x) -> Season(x)))", "winter is a kind of season.", "all x.(Winter(x) -> Season(x))", "all x y.((Winter(x) & Season(y)) -> Season(x))", "all x.(Winter(x) -> Season(x))", "all x.(Winter(x) -> Season(x))", "all x.(Winter(x) -> Season(x))", "all x.(Winter(x) -> Season(x))", "all x.(Winter(x) -> Season(x))"]}
{"id": "entailmentbank_validation_382", "nl": "seasons cause change to the environment.", "fol": "", "prediction": ["all x.(Season(x) -> CausesChangeToEnvironment(x))", "all x y.((Season(x) & Environment(y)) -> CausesChange(x,y))", "all x y z.((Season(x) & Environment(y) & Season(z)) -> CausesChange(x,y,z))", "all x.(Season(x) -> CausesChangeToEnvironment(x))", "all x y.((Season(x) & Environment(y)) -> CausesChange(x,y))", "(CausesChangeToEnvironment(seasons))", "(CausesChangeToEnvironment(seasons))", "all x.(Season(x) -> CausesChangeToEnvironment(x))", "all x y.((Season(x) & Environment(y)) -> CausesChange(x,y))", "all x y z.((Season(x) & Environment(y) & Season(z)) -> CausesChange(x,y,z))", "all x.(Season(x) -> CausesChangeToEnvironment(x))", "all x y.((Season(x) & Environment(y)) -> CausesChange(x,y))", "all x.(Season(x) -> CausesEnvironmentChange(x))", "all x.(Seasons(x) -> CausesChangeToEnvironment(x))", "all x y.((Season(x) & Environment(y)) -> CausesChange(x,y))", "all x.(Seasons(x) -> CausesChangeToEnvironment(x))"]}
{"id": "entailmentbank_validation_383", "nl": "the winter season can cause change to the environment.", "fol": "", "prediction": ["all x.(WinterSeason(x) -> CanCauseChangeToEnvironment(x))", "all x y.((WinterSeason(x) & Environment(y)) -> CanCauseChange(x,y))", "all x.((WinterSeason(x) & Environment(y)) -> CanCauseChange(x,y))", "(CausesChangeToEnvironment(winterSeason) & WinterSeason(winter))", "all x.(WinterSeason(x) -> CanCauseChangeToEnvironment(x))", "all x y.((WinterSeason(x) & Environment(y)) -> CanCauseChange(x,y))", "all x y z.((WinterSeason(x) & Environment(y) & Environment(z)) -> CanCauseChange(x,y,z))", "(all x.(WinterSeason(x) -> CanCauseChange(x)))", "all x.(WinterSeason(x) -> CanCauseChange(x))", "(CausesChangeToEnvironment(WinterSeason)", "all x y.((WinterSeason(x) & Environment(y)) -> CausesChange(x,y))", "all x.((WinterSeason(x) & Environment(x)) -> CanCauseChange(x))", "all x.(WinterSeason(x) -> CausesEnvironmentChange(x))", "all x y.((WinterSeason(x) & Environment(y)) -> CanCauseChange(x,y))", "all x y.((WinterSeason(x) & Environment(y)) -> CausesChange(x,y))", "all x.(WinterSeason(x) -> CanCauseChangeToEnvironment(x))"]}
{"id": "entailmentbank_validation_384", "nl": "usually plants die or become dormant during the winter.", "fol": "", "prediction": ["all x.(Plant(x) -> (Dies(x) | Dormant(x)))", "all x.((Plant(x) & Winter(x)) -> (Dies(x) | Dormant(x)))", "all x y.((Plant(x) & Winter(y)) -> (Dies(x,y) | Dormant(x,y)))", "all x.(Plant(x) -> (Dies(x) | Dormant(x)))", "(all x.(Plant(x) -> (DiesDuringWinter(x) | DormantDuringWinter(x))))", "all x y.((Plant(x) & Winter(y)) -> (Dies(x,y) | Dormant(x,y)))", "all x.((Plant(x) & Winter(x)) -> (Dies(x) | Dormant(x)))", "all x.(Plant(x) -> (DiesDuringWinter(x) | DormantDuringWinter(x)))", "all x y.((Plant(x) & Winter(y)) -> (Die(x,y) | Dormant(x,y)))", "all x.(Plant(x) -> (Dies(x) | Dormant(x)))", "(all x.(Plant(x) -> DiesOrDormant(x)))", "all x.((Plant(x) & Winter(x)) -> (Dies(x) | Dormant(x)))", "all x y.((Plant(x) & Winter(y)) -> (Dead(x,y) | Dormant(x,y)))", "all x y.((Plant(x) & Winter(y)) -> (Dies(x,y) | Dormant(x,y)))", "all x.(Plant(x) -> (Dead(x) | Dormant(x)))", "exists x.(Plant(x) & DiesOrDecadesDuringWinter(x))"]}
{"id": "entailmentbank_validation_385", "nl": "an example of a seasonal change is plants dying or becoming dormant in the winter.", "fol": "", "prediction": ["all x.(SeasonalChange(x) -> (PlantsDeriveInWinter(x) | PlantsBecomeDormantInWinter(x)))", "all x.((Plant(x) & (Dying(x) | Dormant(x))) -> SeasonalChange(x))", "all x.((Plant(x) & (DyingInWinter(x) | DormantInWinter(x))) -> SeasonalChange(x))", "all x.(SeasonalChange(x) -> (PlantsDeriveInWinter(x) | PlantsBecomeDormantInWinter(x)))", "all x y.((Plant(x) & Winter(y)) -> (Dying(x,y) | Dormant(x,y)))", "all x.(SeasonalChange(x) -> (PlantsDiedInWinter(x) | PlantsBecomeDormantInWinter(x)))", "all x y.((Plant(x) & Winter(y)) -> (Daining(x,y) | Dormant(x,y)))", "all x y.((SeasonalChange(x) & Plant(y) & Winter(y)) -> (Dying(y) | Dormant(y)))", "all x.((Plant(x) & Winter(x)) -> (Dying(x) | Dormant(x)))", "all x y.((Plant(x) & Winter(y) & (Dying(x,y) | Dormant(x,y))) -> SeasonalChange(x))", "all x y.((SeasonalChange(x) & Plant(y)) -> (Dying(y) | Dormant(y)))", "all x.(SeasonalChange(x) -> (PlantsDiedInWinter(x) | PlantsBecomeDormantInWinter(x)))", "all x.((Plant(x) & (DyingInWinter(x) | DormantInWinter(x))) -> SeasonalChange(x))", "exists x.(SeasonalChange(x) & PlantsDiedInWinter(x) & PlantsBecomeDormantInWinter(x))", "all x.(SeasonalChange(x) -> (PlantsDiedingOrDormantInWinter(x)))", "exists x.(SeasonalChange(x) & (PlantsDie(x) | PlantsBecomeDormant(x)))"]}
{"id": "entailmentbank_validation_386", "nl": "an animal requires enough nutrients to survive.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresEnoughNutrients(x))", "all x.((Animal(x) & RequiresEnoughNutrients(x)) -> Survives(x))", "all x y.((Animal(x) & Nutrients(y)) -> RequiresEnoughForSurvival(x,y))", "all x.(Animal(x) -> RequiresEnoughNutrientsToSurvive(x))", "all x y.((Animal(x) & Nutrient(y)) -> RequiresEnoughForSurvival(x,y))", "all x.((Animal(x) & RequiresEnoughNutrients(x)) -> Survives(x))", "all x y.((Animal(x) & Nutrients(y)) -> RequiresEnoughToSurvive(x,y))", "all x.(Animal(x) -> RequiresEnoughNutrients(x))", "all x.((Animal(x) & RequiresEnoughNutrients(x)) -> Survives(x))", "all x y.((Animal(x) & Nutrient(y)) -> RequiresEnoughToSurvive(x,y))", "all x.(Animal(x) -> RequiresEnoughNutrientsToSurvive(x))", "all x.((Animal(x) & RequiresEnoughNutrients(x)) -> Survives(x))", "all x y.((Animal(x) & Nutrients(y)) -> RequiresEnoughForSurvival(x,y))", "all x.((Animal(x) & RequiresEnoughNutrients(x)) -> Survives(x))", "all x.(Animal(x) -> RequiresEnoughNutrients(x))", "exists x.(Animal(x) & RequiresEnoughNutrients(x))"]}
{"id": "entailmentbank_validation_387", "nl": "eating food is used to get nutrients by animals.", "fol": "", "prediction": ["all x y.((EatingFood(x) & Animal(y)) -> GetsNutrients(x,y))", "all x.(EatingFood(x) -> UsedToGetNutrients(x))", "all x y z.((EatingFood(x) & Animal(y) & Nutrient(z)) -> UsedToGet(x,y,z))", "all x y.((EatingFood(x) & Animal(y)) -> GetsNutrients(x,y))", "all x y.((EatsFood(x) & Animal(y)) -> GetsNutrients(x,y))", "all x.(EatsFood(x) -> UsedToGetNutrients(x))", "all x.((EatingFood(x) & Animal(y)) -> GetsNutrients(x,y))", "all x.(EatingFood(x) -> UsedToGetNutrients(x))", "(all x.(EatingFood(x) -> GetsNutrientsByAnimals(x)))", "all x y.((EatingFood(x) & Animal(y)) -> GetNutrients(x,y))", "all x y z.((EatingFood(x) & Animal(y) & Nutrients(z)) -> UsedToGet(x,y,z))", "all x.((EatsFood(x) & Animal(y)) -> GetsNutrients(x,y))", "all x.(EatingFood(x) -> GetsNutrientsByAnimals(x))", "all x y.((EatingFood(x) & Animal(y)) -> UsedToGetNutrients(x,y))", "all x y.((EatsFood(x) & Animal(y)) -> GetsNutrients(x,y))", "exists x.(EatingFood(x) & GetsNutrients(x,Animals))"]}
{"id": "entailmentbank_validation_388", "nl": "an animal needs to eat food for nutrients.", "fol": "", "prediction": ["all x.(Animal(x) -> NeedsToEatFoodForNutrients(x))", "all x.((Animal(x) & NeedsFood(x)) -> EatsForNutrients(x))", "all x y.((Animal(x) & Food(y)) -> NeedsToEatForNutrients(x,y))", "all x.(Animal(x) -> NeedsToEatFood(x))", "all x.(Animal(x) -> NeedsFoodForNutrients(x))", "all x.((Animal(x) & NeedsFoodForNutrients(x)) -> EatsForNutrients(x))", "all x y.((Animal(x) & Food(y)) -> NeedsToEat(x,y))", "all x.(Animal(x) -> NeedsToEatFoodForNutrients(x))", "all x y.((Animal(x) & Food(y)) -> NeedsToEatForNutrients(x,y))", "all x.((Animal(x) & NeedsFoodForNutrients(x)) -> EatsFood(x))", "all x y.(NeedsToEatFood(x,y) -> Animal(x))", "all x.(Animal(x) -> NeedsFoodForNutrients(x))", "all x y.((Animal(x) & Food(y)) -> NeedsToEat(x,y))", "all x.(Animal(x) -> NeedsToEatForNutrients(x))", "exists x.(Animal(x) & EatFoodForNutrients(x))", "exists x.(Animal(x) & NeedsFood(x))"]}
{"id": "entailmentbank_validation_389", "nl": "plants are a source of food for animals.", "fol": "", "prediction": ["all x.(Plant(x) -> SourceOfFood(x))", "all x y.((Plant(x) & Animal(y)) -> SourceOfFood(x,y))", "all x.(Plant(x) -> SourceOfFoodForAnimals(x))", "all x y z.((Plant(x) & Animal(y) & Animal(z)) -> SourceOfFood(x,y,z))", "all x y.((Plant(x) & Animal(y)) -> SourceOfFood(x,y))", "all x.((Plant(x) & Animal(y)) -> SourceOfFood(x,y))", "all x.(Plant(x) -> SourceOfFoodForAnimals(x))", "all x y z.((Plant(x) & Animal(y) & Animal(z)) -> SourceOfFood(x,y,z))", "all x y.((Plant(x) & Animal(y)) -> SourceOfFood(x,y))", "all x.(Plant(x) -> FoodSourceForAnimals(x))", "all x.(Plants(x) -> SourceOfFoodForAnimals(x))", "all x.((Plant(x) & Animal(x)) -> SourceOfFood(x))", "all x y.((Plant(x) & Animal(y)) -> SourceOfFood(x,y))", "all x.(Plant(x) -> SourceOfFoodForAnimals(x))", "all x y.((Plant(x) & Animal(y)) -> SourceOfFood(x,y))", "all x y.((Plant(x) & Animal(y)) -> SourceOfFood(x,y))"]}
{"id": "entailmentbank_validation_390", "nl": "an animal can eat plants for nutrients.", "fol": "", "prediction": ["all x.(Animal(x) -> CanEatPlants(x))", "all x y.((Animal(x) & Plant(y)) -> CanEatForNutrients(x,y))", "all x.(Animal(x) -> CanEatPlantsForNutrients(x))", "all x y z.((Animal(x) & Plant(y) & Nutrient(z)) -> CanEatForNutrients(x,y,z))", "all x y.((Animal(x) & Plant(y)) -> CanEatForNutrients(x,y))", "all x.(Animal(x) -> CanEatPlants(x))", "all x y.((Animal(x) & Plant(y)) -> CanEatForNutrients(x,y))", "all x.(Animal(x) -> CanEatPlantsForNutrients(x))", "all x y.((Animal(x) & Plant(y) & EatsForNutrients(x,y)) -> CanEatForNutrients(x,y))", "all x y.((Animal(x) & Plant(y)) -> CanEat(x,y))", "all x.(Animal(x) -> EatsPlants(x))", "all x y.((Animal(x) & Plant(y)) -> EatsForNutrients(x,y))", "exists x.(Animal(x) & EatsPlants(x))", "all x.(Animal(x) -> CanEatPlants(x))", "exists x.(Animal(x) & EatsPlantsForNutrients(x))", "exists x.(Animal(x) & EatsPlants(x))"]}
{"id": "entailmentbank_validation_391", "nl": "an example of seasonal change is some animals' food dying in the winter.", "fol": "", "prediction": ["all x.((Animal(x) & WinterFood(x)) -> SeasonalChange(x))", "all x.(SeasonalChange(x) -> (AnimalsFoodDiesingInWinter(x)))", "all x.((Animal(x) & FoodDeadInWinter(x)) -> SeasonalChange(x))", "all x y.((Animal(x) & Winter(y)) -> DiesIn(x,y))", "exists x.(Animal(x) & FoodDeadInWinter(x))", "(exists x.(Animal(x) & FoodDeadInWinter(x)) & SeasonalChange(x))", "all x y z.((Animal(x) & SeasonalChange(y) & Winter(z) & DiedIn(x,y,z)) -> SeasonalChange(x))", "all x y z.((Animal(x) & Food(y) & Winter(z) & DiedIn(x,y,z)) -> SeasonalChange(x))", "all x y.((Animal(x) & Winter(y)) -> DiedIn(x,y))", "all x y.((Animal(x) & SeasonalChange(y)) -> DiesInWinter(x,y))", "exists x.(Animal(x) & FoodDiesingInWinter(x))", "exists x.(AnimalFood(x) & DiedInWinter(x))", "exists x.(SeasonalChange(x) & AnimalFoodDeadInWinter(x))", "exists x.(AnimalFood(x) & DiedInWinter(x))", "all x y.((Animal(x) & Winter(y)) -> DiesIn(x,y))", "exists x.(AnimalFood(x) & DyingInWinter(x))"]}
{"id": "entailmentbank_validation_392", "nl": "an example of preparing is storing something for use later.", "fol": "", "prediction": ["all x.(Preparing(x) -> StoresForUseLater(x))", "all x y.((Preparing(x) & Object(y)) -> StoresForUseLater(x,y))", "all x.((Preparing(x) & StoresForUseLater(x)) -> Prepares(x))", "all x.((Preparing(x) & Stores(x)) -> UsesLater(x))", "all x.(Preparing(x) -> StoresForUseLater(x))", "all x y.((Preparing(x) & Stores(y)) -> UsesLater(y))", "all x y z.((Preparing(x) & Object(y) & Use(z)) -> StoresForUse(x,y,z))", "all x y.((Exemple(x) & Prepared(x) & Object(y)) -> StoresForUseLater(x,y))", "all x y.((Preparing(x) & Object(y)) -> StoresForUseLater(x,y))", "all x y z.((Preparing(x) & (Storage(y) | Use(z))) -> StoresForUse(x,y,z))", "all x y.((Prepares(x) & Stores(y,x)) -> UsesForUseLater(y))", "all x.(Preparing(x) -> StoresForUseLater(x))", "exists x.(Preparing(x) & Stores(x))", "exists x.(Preparing(x) & Stores(x) & ForUseLater(x))", "exists x.(Prepares(x) & Stores(x))", "exists x.(Prepares(x) & StoresForUse(x))"]}
{"id": "entailmentbank_validation_393", "nl": "if an animal relies on plants for food then that animal must store enough food to last through the winter.", "fol": "", "prediction": ["all x.((Animal(x) & ReliesOnPlants(x)) -> StoresEnoughFoodForWinter(x))", "all x y.((Animal(x) & Plant(y) & ReliesOnForFood(x,y)) -> StoresEnoughFoodForWinter(x,y))", "all x y.((Animal(x) & ReliesOnPlants(x)) -> StoresEnoughFood(x,y))", "all x.((Animal(x) & ReliesOnPlants(x)) -> StoresEnoughFood(x))", "all x.(ReliesOnPlantsForFood(x) -> StoresEnoughFoodForWinter(x))", "all x y z.((Animal(x) & Plant(y) & Winter(z)) -> ReliesOnForFood(x,y,z))", "all x y.((Animal(x) & Plant(y) & ReliesOnForFood(x,y)) -> StoresEnoughFood(x,y))", "all x.((Animal(x) & ReliesOnPlantsForFood(x)) -> StoresEnoughFoodForWinter(x))", "all x y.((Animal(x) & ReliesOnPlantsForFood(x)) -> StoresEnoughFoodForWinter(x,y))", "all x.(ReliesOnPlantsForFood(x) -> StoresEnoughFoodForWinter(x))", "all x y.((Animal(x) & Plant(y)) -> StoresEnoughFood(x,y))", "all x y z.((Animal(x) & Plant(y) & Winter(z)) -> ReliesOnForFood(x,y,z))", "all x.((Animal(x) & ReliesOnPlants(x)) -> StoresEnoughFoodForWinter(x))", "all x.(ReliesOnPlants(x) -> StoresEnoughFoodForWinter(x))", "all x y.((Animal(x) & ReliesOnPlantsForFood(x)) -> StoresEnoughFood(x,y))", "all x.((Animal(x) & ReliesOnPlantsForFood(x)) -> StoresEnoughFoodForWinter(x))"]}
{"id": "entailmentbank_validation_394", "nl": "an example of preparing is an animal storing food to last through the winter.", "fol": "", "prediction": ["all x.(Preparing(x) -> (Animal(x) & StoresFood(x) & LastsThroughWinter(x)))", "all x y.((Animal(x) & Winter(y)) -> StoresFood(x,y))", "all x.((Animal(x) & StoresFood(x) & LastsThroughWinter(x)) -> PreparesForWinter(x))", "all x.(Preparing(x) -> (AnimalStoresFood(x) & LastsThroughWinter(x)))", "all x y z.((Animal(x) & Food(y) & Winter(z)) -> StoresToLast(x,y,z))", "all x y.((Animal(x) & Winter(y)) -> StoresFood(x,y))", "all x y z.((Animal(x) & Food(y) & Winter(z) & Stores(x,y,z)) -> Prepares(x,y))", "exists x.(Preparing(x) & Animal(x) & StoresFood(x) & LastsThroughWinter(x))", "all x.((Animal(x) & StoresFood(x) & LastsThroughWinter(x)) -> Prepares(x))", "exists x.(Animal(x) & StoresFood(x) & LastsThroughWinter(x))", "all x y.((Animal(x) & Animal(y) & StoresFood(x,y)) -> PreparesForWinter(x))", "all x y.((Animal(x) & Winter(y)) -> StoresFood(x,y))", "all x.(Preparing(x) -> (Animal(x) & StoresFood(x) & LastsThroughWinter(x)))", "exists x.(Preparing(x) & Animal(x) & StoresFood(x) & LastsThroughWinter(x))", "all x y.((Animal(x) & StoresFood(x,y)) -> PreparesForWinter(x))", "all x y.((Animal(x) & Food(y) & Stores(x,y)) -> PreparesForWinter(x))"]}
{"id": "entailmentbank_validation_395", "nl": "an example of preparing for seasonal change is an animal storing food for the winter.", "fol": "", "prediction": ["all x.((Animal(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x y.((Animal(x) & Winter(y)) -> PreparesForSeasonalChange(x,y))", "(PreparingForSeasonalChange(animal) & StoresFoodForWinter(animal))", "all x.((Animal(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.(PreparingForSeasonalChange(x) -> (AnimalStoresFoodForWinter(x)))", "all x y z.((Animal(x) & SeasonalChange(y) & Winter(z)) -> StoresFoodFor(x,y,z))", "all x y.((Animal(x) & Winter(y)) -> PreparesForSeasonalChange(x,y))", "all x.((Animal(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "exists x.(Animal(x) & StoresFoodForWinter(x))", "all x y.((Animal(x) & Winter(y)) -> PreparesForSeasonalChange(x,y))", "all x.(PreparingForSeasonalChange(x) -> (AnimalStoresFood(x) & ForWinter(x)))", "all x y.((Animal(x) & Winter(y)) -> PreparingForSeasonalChange(x,y))", "all x.((Animal(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "exists x.(Animal(x) & StoresFoodForWinter(x))", "all x y.((Animal(x) & WinterFood(y)) -> PreparesForSeasonalChange(x,y))", "all x.((Animal(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))"]}
{"id": "entailmentbank_validation_396", "nl": "a squirrel is a kind of animal.", "fol": "", "prediction": ["all x.(Squirrel(x) -> Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "all x y.((Squirrel(x) & Animal(y)) -> Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "all x y.((Squirrel(x) & Animal(y)) -> Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "all x.(Spider(x) -> Animal(x))", "all x y.((Squirrel(x) & Animal(y)) -> Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "exists x.(Spider(x) & Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "exists x.(Sparrow(x) & Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "exists x.(Squirrel(x) & Animal(x))", "exists x.(Squirrel(x) & Animal(x))"]}
{"id": "entailmentbank_validation_397", "nl": "an example of preparing for seasonal change is a squirrel storing food for the winter.", "fol": "", "prediction": ["all x.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x y.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x,y))", "all x y.((Squirrel(x) & Winter(y)) -> PreparesForSeasonalChange(x,y))", "all x.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.(PreparingForSeasonalChange(x) -> (Squirrel(x) & StoresFoodForWinter(x)))", "all x y z.((Squirrel(x) & SeasonalChange(y) & Winter(z)) -> StoresFoodFor(x,y,z))", "all x y.((Squirrel(x) & StoresFood(x,y)) -> PreparesForSeasonalChange(x,y))", "exists x.(Squirrel(x) & StoresFoodForWinter(x))", "all x y z.((Squirrel(x) & SeasonalChange(y) & Food(z) & StoresForWinter(x,z)) -> PreparesFor(x,y))", "all x.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x y.((Squirrel(x) & Squirrel(y) & StoresFoodForWinter(x,y)) -> PreparesForSeasonalChange(x))", "all x y.((Squirrel(x) & Winter(y)) -> PreparesForSeasonalChange(x,y))", "exists x.(Squirrel(x) & StoresFoodForWinter(x))", "all x.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "exists x.(Squirrel(x) & StoresFoodForWinter(x))", "all x.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))"]}
{"id": "entailmentbank_validation_398", "nl": "nut is a kind of food.", "fol": "", "prediction": ["all x.(Nut(x) -> Food(x))", "all x.(Nut(x) -> Food(x))", "all x y.((Nut(x) & Food(y)) -> Food(x))", "all x.(Nut(x) -> Food(x))", "all x.(Nut(x) -> Food(x))", "all x y.(Nutty(x) -> Food(y))", "all x.(Nut(x) -> Food(x))", "all x y.(Nutty(x) -> Food(y))", "all x.(Nutty(x) -> Food(x))", "all x.(Nutty(x) -> Food(x))", "all x y.(Nut(x) -> Food(y))", "all x.(Nut(x) -> Food(x))", "exists x.(Nut(x) & Food(x))", "exists x.(Not(x) & Food(x))", "exists x.(Nutty(x) & Food(x))", "exists x.(Nut(x) & Food(x))"]}
{"id": "entailmentbank_validation_399", "nl": "an example of preparing for seasonal change is an squirrel storing nuts for the winter.", "fol": "", "prediction": ["all x.((Squirrel(x) & StoresNutsForWinter(x)) -> PreparesForSeasonalChange(x))", "all x y.((Squirrel(x) & StoresNuts(x,y)) -> PreparesForSeasonalChange(x))", "all x.((Squirrel(x) & StoresNuts(x)) -> PreparesForSeasonalChange(x))", "(Squirrel(x) & StoresNutsForWinter(x))", "all x y.((Squirrel(x) & Nut(y) & StoresForWinter(x,y)) -> PreparesForSeasonalChange(x))", "all x.(PreparingForSeasonalChange(x) -> (Squirrel(x) & StoresNutsForWinter(x)))", "all x y.((Squirrel(x) & StoresNuts(x,y)) -> PreparesForSeasonalChange(x,y))", "all x y z.((Squirrel(x) & SeasonalChange(y) & Nut(z) & StoresForWinter(x,z)) -> PreparesFor(x,y))", "all x y.((Squirrel(x) & Squirrel(y) & StoresNuts(x,y)) -> PreparesForSeasonalChange(x))", "all x.((Squirrel(x) & StoresNutsForWinter(x)) -> PreparesForSeasonalChange(x))", "exists x.(Squirrel(x) & StoresNutsForWinter(x))", "all x.((Squirrel(x) & StoresNuts(x)) -> PreparesForSeasonalChange(x))", "all x y.((Squirrel(x) & StoresNutsForWinter(x,y)) -> PreparesForSeasonalChange(x,y))", "exists x.(Squirrel(x) & StoresNutsForWinter(x))", "all x.((Squirrel(x) & StoresNutsForWinter(x)) -> PreparesForSeasonalChange(x))", "exists x.(Squirrel(x) & StoresNuts(x))"]}
{"id": "entailmentbank_validation_400", "nl": "an animal requires warmth for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.((Animal(x) & RequiresWarmth(x)) -> Survival(x))", "all x y.((Animal(x) & Animal(y)) -> RequiresWarmthForSurvival(x,y))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.((Animal(x) & RequiresWarmth(x)) -> Survival(x))", "all x y.((Animal(x) & Animal(y)) -> RequiresWarmthForSurvival(x,y))", "all x y.((Animal(x) & Warmth(y)) -> RequiresForSurvival(x,y))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.(RequiresWarmth(x) -> Survival(x))", "all x.((Animal(x) & RequiresWarmth(x)) -> Survival(x))", "all x y.(RequiresWarmth(x,y) -> Animal(x))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x y.((Animal(x) & Animal(y)) -> RequiresWarmthForSurvival(x,y))", "all x.(Animal(x) -> RequiresWarmth(x))", "exists x.(Animal(x) & RequiresWarmth(x))", "exists x.(Animal(x) & RequiresWarmth(x))"]}
{"id": "entailmentbank_validation_401", "nl": "winter has cold temperatures / weather.", "fol": "", "prediction": ["all x.(Winter(x) -> (ColdTemperatures(x) & ColdWeather(x)))", "all x y.((Winter(x) & ColdTemperatures(y)) -> ColdWeather(x,y))", "all x.(Winter(x) -> (ColdTemperatures(x) & ColdWeather(x)))", "all x.(Winter(x) -> ColdTemperatures(x))", "(ColdTemperatures(winter) & ColdWeather(winter))", "(ColdTemperatures(winter) | ColdWeather(winter))", "all x y.((Winter(x) & ColdTemperatures(y)) -> ColdWeather(x,y))", "(ColdTemperatures(w) & ColdWeather(w))", "all x y.(Winter(x) -> (ColdTemperatures(y) | ColdWeather(y)))", "all x.(Winter(x) -> (ColdTemperatures(x) & ColdWeather(x)))", "all x y.((Winter(x) & ColdTemperatures(y)) -> ColdWeather(x,y))", "all x.(Winter(x) -> ColdTemperatures(x))", "(ColdTemperatures(winter) | ColdWeather(winter))", "exists x.(Winter(x) & ColdTemperatures(x) & ColdWeather(x))", "all x.(Winter(x) -> (ColdTemperatures(x) | ColdWeather(x)))", "(ColdTemperatures(w) & ColdWeather(w))"]}
{"id": "entailmentbank_validation_402", "nl": "some animals must move to warmer climates in the winter.", "fol": "", "prediction": ["exists x.(Animal(x) & MovesToWarmerClimates(x))", "exists x y.(Animal(x) & Winter(y) & MovesToWarmerClimates(x,y))", "exists x.(Animal(x) & MovesToWarmerClimates(x))", "exists x.(Animal(x) & MovesToWarmerClimates(x))", "exists x y.(Animal(x) & Winter(y) & MovesToWarmerClimates(x,y))", "exists x.(Animal(x) & MovesToWarmerClimates(x,winter))", "exists x.(Animal(x) & Winter(x) & MovesToWarmerClimates(x))", "all x y.((Animal(x) & Winter(y)) -> MovesToWarmerClimates(x,y))", "exists x.(Animal(x) & MovesToWarmerClimate(x))", "exists x y.(Animal(x) & WarmerClimate(y) & Winter(y) & MovesTo(x,y))", "exists x.(Animal(x) & MovesToWarmerClimatesInWinter(x))", "exists x y.(Animal(x) & Winter(y) & MovesToWarmerClimate(x,y))", "exists x.(Animal(x) & MustMoveToWarmerClimates(x))", "exists x.(Animal(x) & Winter(x) & MovesToWarmerClimates(x))", "exists x.(Animal(x) & MovesToWarmerClimate(x))", "exists x.(Animal(x) & MoveToWarmerClimates(x))"]}
{"id": "entailmentbank_validation_403", "nl": "migration is when animals move themselves from a cooler climate to a warmer climate for the winter.", "fol": "", "prediction": ["all x y.((Animal(x) & CoolerClimate(y) & WarmerClimate(y)) -> MigratesForWinter(x,y))", "all x.(Migration(x) -> (AnimalsMoveFromColderClimateToWarmerClimate(x) & Winter(x)))", "all x y z.((Animal(x) & CoolerClimate(y) & WarmerClimate(z)) -> MigratesForWinter(x,y,z))", "all x y.((Animal(x) & CoolerClimate(y) & WarmerClimate(x,y)) -> MigratesForWinter(x,y))", "(Migration(animal) -> (MovesFromColderClimateToWarmerClimate(animal) & Winter(animal)))", "all x.(Migration(x) -> (AnimalsMoveFromColderClimateToWarmerClimate(x)))", "all x.(Migration(x) -> (AnimalsMoveFromColderClimateToWarmerClimate(x) & Winter(x)))", "all x y.((Animal(x) & CoolerClimate(y) & WarmerClimate(y)) -> MigratesForWinter(x,y))", "all x y z.((Animal(x) & CoolerClimate(y) & WarmerClimate(z)) -> MigratesForWinter(x,y,z))", "all x.(Migration(x) -> (AnimalsMoveFromColderClimateToWarmerClimate(x) & Winter(x)))", "all x.(Migration(x) -> (AnimalsMoveFromColderClimateToWarmerClimate(x)))", "all x y.((Animal(x) & CoolerClimate(y)) -> MovesToWarmerClimate(x,y))", "all x y.((Animal(x) & Climate(y) & MovesFromToWarmer(x,y)) -> MigratesForWinter(x,y))", "all x y z.((Animal(x) & CoolerClimate(y) & WarmerClimate(z)) -> MovesFromTo(x,y,z))", "all x.(Migration(x) -> (AnimalsMoveFromCoolerClimateToWarmerClimate(x)))", "all x.(Migration(x) -> (AnimalsMoveFromCoolerClimateToWarmerClimate(x) & Winter(x)))"]}
{"id": "entailmentbank_validation_404", "nl": "an example of migration is moving to a warmer climate in the winter.", "fol": "", "prediction": ["all x.(Migratation(x) -> (MovingToWarmerClimate(x) & Winter(x)))", "all x y.((Migratation(x) & WarmerClimate(y)) -> MovesInWinter(x,y))", "all x.(Migration(x) -> (MovingToWarmerClimate(x) & Winter(x)))", "(MigratingToWarmerClimate(x) & Winter(x))", "all x y.((Migratation(x) & WarmerClimate(y)) -> MovingInWinter(x,y))", "all x y z.((Migratation(x) & WarmerClimate(y) & Winter(z) & MovingTo(x,y,z)) -> MigrationExample(x))", "all x.(Migratation(x) -> (MovingToWarmerClimate(x) & Winter(x)))", "all x y.((Migrating(x) & WarmerClimate(y) & Winter(y)) -> Migrates(x,y))", "all x y z.(Migratation(x) -> (MovingToWarmerClimate(x,y) & Winter(y)))", "all x y.((Migratation(x) & Winter(y)) -> MovesToWarmerClimate(x,y))", "all x.(Migration(x) -> (MovingToWarmerClimate(x) & Winter(x)))", "exists x.(Migratation(x) & MovesToWarmerClimateInWinter(x))", "exists x.(MigratingToWarmerClimate(x) & Winter(x))", "exists x.(MigrationExample(x) & MovesToWarmerClimateInWinter(x))", "all x y.((Migration(x) & Winter(y)) -> MovingToWarmerClimate(x,y))", "exists x.(MigrationExample(x) -> (MovingToWarmerClimate(x) & Winter(x)))"]}
{"id": "entailmentbank_validation_405", "nl": "some birds fly south for the winter.", "fol": "", "prediction": ["exists x.(Bird(x) & FlySouthForWinter(x))", "exists x.(Bird(x) & FliesSouthForWinter(x))", "exists x.(Bird(x) & FlySouthForWinter(x))", "exists x y.(Bird(x) & Bird(y) & FlySouthForWinter(x,y))", "exists x.(Bird(x) & FlySouth(x))", "exists x.(Bird(x) & FlySouthForWinter(x))", "exists x.(Bird(x) & FliesSouth(x))", "exists x y.(Bird(x) & Bird(y) & FlySouthForWinter(x))", "exists x.(Bird(x) & FlySouth(x))", "exists x y.(Bird(x) & Bird(y) & FlySouth(x,y))", "exists x.(Bird(x) & FliesSouthForWinter(x))", "exists x.(Bird(x) & FlySouthForWinter(x))", "exists x.(Bird(x) & FlySouthForWinter(x))", "exists x.(Bird(x) & FliesSouth(x))", "exists x.(Bird(x) & FliesSouthForWinter(x))", "exists x.(Bird(x) & Fly(x,winter))"]}
{"id": "entailmentbank_validation_406", "nl": "an example of migration is birds flying south in the winter.", "fol": "", "prediction": ["all x.(Migration(x) -> (Birds(x) & FlyingSouthInWinter(x)))", "all x.((Bird(x) & FlyingSouthInWinter(x)) -> Migration(x))", "all x.(Migration(x) -> (BirdsFlyingSouthInWinter(x)))", "all x y.((Bird(x) & Winter(y)) -> Migratation(x,y))", "(Migration(birds) & FlyingSouthInWinter(birds))", "all x y.((Bird(x) & Winter(y) & FlyingSouth(x,y)) -> Migration(x))", "all x.((Bird(x) & FlyingSouthInWinter(x)) -> Migratation(x))", "all x.(Migration(x) -> (Birds(x) & FlyingSouthInWinter(x)))", "(BirdsFlySouthInWinter(x) -> MigrationExample(x))", "all x.(Migration(x) -> (Birds(x) & FlyingSouthInWinter(x)))", "all x y.((Bird(x) & Winter(y) & FlyingSouth(x,y)) -> Migratation(x))", "exists x.(Bird(x) & FlyingSouthInWinter(x))", "all x.((Bird(x) & FlyingSouthInWinter(x)) -> MigrationExample(x))", "exists x.(Bird(x) & FlyingSouth(x) & Winter(x))", "all x y.((Bird(x) & Winter(y)) -> Migration(x,y))", "exists x.(Bird(x) & FlyingSouthInWinter(x))"]}
{"id": "entailmentbank_validation_407", "nl": "migration is a kind of adaptation.", "fol": "", "prediction": ["all x.(Migration(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "all x y.((Migration(x) & Adaptation(y)) -> Adaptation(x,y))", "(Adaptation(Migration))", "all x y.((Migration(x) & Adaptation(y)) -> Is(x,y))", "all x.(Migration(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "all x y.((Migration(x) & Adaptation(y)) -> Adaptation(x))", "all x y.((Migratation(x) & Adaptation(y)) -> Is(x,y))", "all x.(Migration(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "exists x.(Migration(x) & Adaptation(x))", "all x.(Migratation(x) -> Adaptation(x))", "all x.(Migratory(x) -> Adaptation(x))", "all x.(Migratation(x) -> Adaptation(x))"]}
{"id": "entailmentbank_validation_408", "nl": "an example of an adaptation is birds migrating south in the winter.", "fol": "", "prediction": ["all x.(Adaptation(x) -> (BirdsMigratingSouthInWinter(x)))", "all x.(Adaptation(x) -> (BirdsMigratingSouthInWinter(x)))", "all x.((Bird(x) & MigratingSouth(x)) -> Adaptation(x))", "all x y.((Bird(x) & MigratingSouth(x) & Winter(y)) -> Adaptation(x))", "(MigratingSouthInWinter(Birds) -> Adaptation(Birds))", "(Adaptation(birds) & MigratingSouthInWinter(birds))", "all x y.((Bird(x) & Winter(y) & MigratingSouth(x,y)) -> Adaptation(x))", "all x.((Bird(x) & MigratingSouthInWinter(x)) -> Adaptation(x))", "all x y z.((Bird(x) & Winter(y) & MigratingSouth(x,y)) -> Adaptation(x,y))", "all x.(Adaptation(x) -> (BirdsMigratingSouthInWinter(x)))", "all x y.((Bird(x) & MigratingSouth(x,y)) -> Adaptation(x))", "all x.(Adaptation(x) -> (BirdsMigratingSouthInWinter(x)))", "exists x.(Bird(x) & MigratingSouthInWinter(x))", "exists x.(Adaptation(x) & Bird(x) & MigratingSouthInWinter(x))", "all x y.((Bird(x) & Winter(y) & MigratingSouth(x,y)) -> Adaptation(x,y))", "exists x.(Adaptation(x) & Bird(x) & MigratesSouth(x))"]}
{"id": "entailmentbank_validation_409", "nl": "wasp's stinger contains poison.", "fol": "", "prediction": ["all x.(WaspStinger(x) -> ContainsPoison(x))", "all x y.((WaspStinger(x) & Wasp(y)) -> ContainsPoison(x,y))", "all x.((Wasp(x) & Stinger(x)) -> ContainsPoison(x))", "all x.(WaspStinger(x) -> ContainsPoison(x))", "all x.(Wasp(x) -> ContainsPoison(x))", "(ContainsPoison(wasp) & Stinger(wasp))", "all x y.((WaspStinger(x) & Wasp(y)) -> ContainsPoison(x,y))", "all x.(WaspStinger(x) -> ContainsPoison(x))", "all x.(Stinger(x) -> ContainsPoison(x))", "exists x.(Stinger(x) & Wasp(x) & ContainsPoison(x))", "all x y.((Wasp(x) & Stinger(y)) -> ContainsPoison(x,y))", "(ContainsPoison(wasp) & Stinger(wasp))", "all x y.((WaspStinger(x) & Wasp(y)) -> ContainsPoison(x,y))", "all x y.((WaspStinger(x) & Wasp(y) & ContainsPoison(x,y)) -> ContainsPoison(x,y))", "exists x.(Stinger(x) & Wasp(x) & ContainsPoison(x))", "all x.(WaspStinger(x) -> ContainsPoison(x))"]}
{"id": "entailmentbank_validation_410", "nl": "poison causes harm to living things.", "fol": "", "prediction": ["all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x y.((Poison(x) & LivingThing(y)) -> CausesHarm(x,y))", "(all x.(Poison(x) -> CausesHarmToLivingThings(x)))", "all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x y z.((Poison(x) & LivingThing(y) & LivingThing(z)) -> CausesHarm(x,y,z))", "all x y.((Poison(x) & LivingThing(y)) -> CausesHarmTo(x,y))", "all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x y.((Poison(x) & LivingThing(y)) -> CausesHarm(x,y))", "all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x y.((Poison(x) & LivingThing(y)) -> CausesHarmTo(x,y))", "all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x y.((Poison(x) & LivingThing(y)) -> CausesHarmTo(x,y))", "all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x.(Poison(x) -> CausesHarm(x))", "exists x.(Poison(x) & CausesHarm(x,livingThing))", "all x.(Poison(x) -> CausesHarmToLivingThings(x))"]}
{"id": "entailmentbank_validation_411", "nl": "a wasp's stinger can be used to cause harm to living things.", "fol": "", "prediction": ["all x.((WaspStinger(x) & CausesHarmToLivingThings(x)) -> CanBeUsedToCause(x,livingThings))", "all x.(Stinger(x) -> CausesHarmToLivingThings(x))", "all x y.((WaspStinger(x) & LivingThing(y)) -> CausesHarm(x,y))", "all x.(WaspStinger(x) -> CausesHarmToLivingThings(x))", "all x y.((WaspStinger(x) & LivingThing(y)) -> CanCauseHarm(x,y))", "all x y.((WaspsStinger(x) & LivingThing(y)) -> CausesHarm(x,y))", "all x.(Stinger(x) -> CanCauseHarmToLivingThings(x))", "all x.((WaspStinger(x) & CausesHarmToLivingThings(x)) -> CanBeUsedToCause(x,livingThings))", "all x y z.((WaspStinger(x) & LivingThing(y) & LivingThing(z)) -> CausesHarm(x,y,z))", "exists x.(WaspStinger(x) & CanCauseHarmToLivingThings(x))", "all x y.((Stinger(x) & Wasp(y)) -> CausesHarmToLivingThings(x,y))", "all x.(WaspStinger(x) -> CausesHarmToLivingThings(x))", "all x y.((WaspsStinger(x) & LivingThing(y)) -> CanCauseHarm(x,y))", "exists x.(WaspsStinger(x) & CanCauseHarmToLivingThings(x))", "all x y.((WaspStinger(x) & LivingThing(y)) -> CausesHarm(x,y))", "exists x.(WaspStinger(x) & CanCauseHarmToLivingThings(x))"]}
{"id": "entailmentbank_validation_412", "nl": "harming is a kind of defense.", "fol": "", "prediction": ["all x.(Harming(x) -> Defense(x))", "all x.(HasDefense(x) -> Harming(x))", "all x y.((Harming(x) & Defense(y)) -> (Protect(x) & Defense(y)))", "all x.(Harming(x) -> Defense(x))", "all x.(HasDefense(x) -> KindOfDefense(x))", "(all x.(Harming(x) -> Defense(x)))", "all x y.((Harming(x) & Defense(y)) -> (Alternative(x,y) & Defense(x,y)))", "harming is defense.", "all x.(Harming(x) -> Defense(x))", "all x.(HasDefense(x) -> Harms(x))", "all x y.((Harming(x) & Defense(y)) -> KindOfDefense(x))", "harming is defense.", "all x.(HasDefense(x) -> Harms(x))", "all x.(Harming(x) -> Defense(x))", "all x.(HasDamage(x) -> Defense(x))", "all x.(Harming(x) -> Defense(x))"]}
{"id": "entailmentbank_validation_413", "nl": "a stinger is used for defense by a wasp.", "fol": "", "prediction": ["all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x y z.((Stinger(x) & Wasp(y) & Wasp(z)) -> UsedForDefense(x,y,z))", "all x.(Stinger(x) -> UsedForDefense(x,wasp))", "all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x.(Stinger(x) -> UsedForDefenseByWasp(x))", "all x y z.((Stinger(x) & Wasp(y) & Wasp(z)) -> UsedForDefense(x,y,z))", "exists x.(Stinger(x) & Wasp(x) & UsedForDefense(x))", "all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x y z.((Stinger(x) & Wasp(y) & Defense(z)) -> UsedFor(x,y,z))", "all x y z.((Stinger(x) & Wasp(y) & UsedForDefense(x,y,z)) -> UsedForDefense(x,y))", "exists x.(Stinger(x) & Wasp(x) & UsedForDefense(x))", "all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "exists x.(Stinger(x) & Wasp(x) & UsedForDefense(x))", "all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))"]}
{"id": "entailmentbank_validation_414", "nl": "color is a property of an organism that describes what it looks like.", "fol": "", "prediction": ["all x y.((Organism(x) & Color(y)) -> (PropertyOf(x,y) & DescriptionOfLooksAlike(x,y)))", "all x.(Color(x) -> (PropertyOfOrganism(x) & DepictsLook(x)))", "all x y.((Organism(x) & Organism(y)) -> ColorProperty(x,y))", "all x.(Color(x) -> (PropertyOfOrganism(x) & DefinesLook(x)))", "all x y z.((Color(x) & Organism(y) & Organ(z)) -> (Property(x,y) & Description(x,z)))", "all x.(Color(x) -> (DescribesLooksAlike(x) & Organism(x)))", "all x.(Color(x) -> (SpecificPropertyOfOrganism(x) & DepictsLook(x)))", "all x y.((Organism(x) & Color(y)) -> DescriptionOfLooksAlike(y,x))", "all x y z.((Color(x) & Organism(y) & Organism(z)) -> (PropertyOf(x,y,z) & DepictsLook(x,y)))", "all x.(ColorProperty(x) -> (DescribesLooksAlike(x) & Organism(x)))", "all x y.((Organism(x) & Color(y)) -> (Property(x,y) & Description(x,y)))", "all x.(Color(x) -> (Organism(x) & DescriptionOfLooksAlike(x)))", "exists x.(ColorProperty(x) & Organism(x) & DepictsLook(x))", "all x y z.((Color(x) & Organism(y) & Species(z)) -> DescriptionOfLooksAlike(x,y,z))", "exists x.(ColourProperty(x) & Organism(x) & DescriptionOfLooksAlike(x))", "all x y.((Organism(x) & Color(y)) -> DescriptionOfLooksAlike(x,y))"]}
{"id": "entailmentbank_validation_415", "nl": "an example of camouflage is an organism looking like its environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (OrganismLookingAlikeEnvironment(x)))", "all x.((Organism(x) & LooksAlikeEnvironment(x)) -> Camouflage(x))", "all x y.((Organism(x) & Environment(y)) -> LooksAlike(x,y))", "all x.(Camouflage(x) -> (OrganismLookingAlikeEnvironment(x)))", "all x y.((Organism(x) & Environment(y)) -> LooksAlike(x,y))", "all x.(Camouflage(x) -> LooksAlikeEnvironment(x))", "all x y.((Organism(x) & Environment(y) & LooksAlike(x,y)) -> Camouflage(x))", "exists x.(Cambolage(x) -> (OrganismLookingAlikeEnvironment(x)))", "all x.((Organism(x) & LooksAlikeEnvironment(x)) -> Camouflage(x))", "all x.(CamouflageExemple(x) -> (OrganismLookingAlikeEnvironment(x)))", "all x.(Camouflage(x) -> LooksAlikeEnvironment(x))", "exists x.(CamouflageOrganism(x) & LooksAlikeEnvironment(x))", "exists x.(Cambolage(x) -> (OrganismLookingAlikeEnvironment(x)))", "all x.((Organism(x) & LooksAlikeEnvironment(x)) -> Camouflage(x))", "all x y.((Organism(x) & Environment(y) & LooksAlike(x,y)) -> Camouflage(x))", "all x y.((Organism(x) & Environment(y)) -> LooksAlike(x,y))"]}
{"id": "entailmentbank_validation_416", "nl": "an example of camouflage is organism having the same color as its environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (Organism(x) & SameColorAsEnvironment(x)))", "all x.((Organism(x) & Camouflage(x)) -> SameColorAsEnvironment(x))", "all x y.((Organism(x) & Environment(y) & SameColor(x,y)) -> Camouflage(x))", "all x.(Camouflage(x) -> (Organism(x) & SameColor(x) & Environment(x)))", "all x y.((Organism(x) & Environment(y)) -> SameColor(x,y))", "(Camouflage(x) -> SameColor(x))", "all x.((Organism(x) & SameColorAsEnvironment(x)) -> Camouflage(x))", "all x y z.((Organism(x) & Environment(y) & Camouflage(z)) -> SameColorAs(x,y,z))", "all x y.((Camouflage(x) & Organism(y)) -> SameColorAsEnvironment(y,x))", "all x y.((Organism(x) & Environment(y) & SameColor(x,y)) -> Camouflage(x))", "all x.(Camouflage(x) -> (Organism(x) & SameColor(x,Environment)))", "all x.((Organism(x) & Camouflage(x)) -> SameColorAsEnvironment(x))", "exists x.(Cambolage(x) -> (Organism(x) & SameColor(x,Environment)))", "all x y.((Organism(x) & Environment(y) & SameColor(x,y)) -> Camouflage(x))", "exists x.(Camouflage(x) -> (Organism(x) & SameColor(x)))", "exists x.(Camouflage(x) -> (Organism(x) & HasSameColor(x)))"]}
{"id": "entailmentbank_validation_417", "nl": "if an animal's skin is a certain color then that animal is that color.", "fol": "", "prediction": ["all x.((Animal(x) & SkinColor(x)) -> Color(x))", "all x y.((Animal(x) & SkinColor(y) & CertainColor(x,y)) -> Color(x,y))", "all x y.((Animal(x) & SkinColor(y)) -> Color(x,y))", "all x.((Animal(x) & SkinColor(x)) -> Color(x))", "all x y z.((Animal(x) & SkinColor(y) & Color(z) & CertainColor(x,y)) -> Color(x,z))", "all x y.((Animal(x) & SkinColor(y) & CertainColor(x,y)) -> Color(x,y))", "exists x.(Animal(x) & SkinColor(x) & Color(x))", "all x.((Animal(x) & SkinColor(x)) -> Color(x))", "all x y.((Animal(x) & SkinColor(y)) -> Color(x,y))", "exists x.(Animal(x) & SkinColor(x) & Color(x))", "all x y.((Animal(x) & SkinColour(x,y) & CertainColor(x,y)) -> Color(x,y))", "exists x.(AnimalSkinColor(x) & SkinColor(x))", "all x.((Animal(x) & SkinColor(x)) -> Color(x))", "all x y.((Animal(x) & SkinColor(y) & CertainColor(x,y)) -> Color(x,y))", "all x.((Animal(x) & SkinColour(x)) -> ColorColour(x))", "all x.((Animal(x) & CertainColorSkin(x)) -> Color(x))"]}
{"id": "entailmentbank_validation_418", "nl": "an example of camouflage is an animal's skin having the same color as its environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (AnimalSkin(x) & SameColorAsEnvironment(x)))", "all x.((Animal(x) & Skin(x) & SameColorAsEnvironment(x)) -> Camouflage(x))", "all x y.((Animal(x) & Skin(y) & SameColor(y,x)) -> Camouflage(x))", "all x y z.((Animal(x) & Skin(y) & Environment(z) & SameColor(y,z)) -> Camouflage(x))", "all x.((Animal(x) & Camouflage(x)) -> SameColorSkinAsEnvironment(x))", "all x y.((Animal(x) & Environment(y)) -> Camouflage(x,y))", "all x.(Camouflage(x) -> (AnimalSkin(x) & SameColorAsEnvironment(x)))", "all x y.((Animal(x) & Skin(y) & SameColor(y,x)) -> Camouflage(x,y))", "all x.((Animal(x) & Skin(x) & SameColor(x,Environment)) -> Camouflage(x))", "exists x.(AnimalSkin(x) & SameColorAsEnvironment(x))", "all x y z.((Animal(x) & Skin(y) & Environment(z)) -> Camouflage(x,y,z))", "all x y.((Animal(x) & Environment(y) & HasSameColor(x,y)) -> Camouflage(x))", "all x y z.((Animal(x) & Skin(y) & Environment(z) & HasSameColor(y,z)) -> Camouflage(x))", "all x y.((Animal(x) & Skin(y) & Camouflage(x)) -> SameColorAsEnvironment(y,x))", "all x.(Camouflage(x) -> SameColorSkin(x))", "exists x.(Camouflage(x) -> (AnimalSkin(x) & SameColor(x,Environment)))"]}
{"id": "entailmentbank_validation_419", "nl": "camouflage is a kind of adaptation for hiding in an environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (AdaptationForHiding(x) & InEnvironment(x)))", "all x y.((Camouflage(x) & Environment(y)) -> AdaptationForHiding(x,y))", "all x.(Camouflage(x) -> AdaptationForHidingInEnvironment(x))", "all x y z.((Camouflage(x) & Environment(y) & Environment(z)) -> AdaptationForHiding(x,y,z))", "all x.(Cambolage(x) -> (AdaptationForHiding(x) & InEnvironment(x)))", "all x y.((Camouflage(x) & Environment(y)) -> AdaptationForHiding(x,y))", "all x.(Camouflage(x) -> (AdaptationForHiding(x) & InEnvironment(x)))", "exists x.(Cambolage(x) & AdaptationForHidingInEnvironment(x))", "all x y.((Camouflage(x) & Environment(y)) -> AdaptationForHunting(x,y))", "all x y z.((Camouflage(x) & Environment(y) & Environment(z)) -> AdaptationForHiding(x,y,z))", "all x.(Camouflage(x) -> AdaptationForHunting(x))", "all x y.((Cambolage(x) & Environment(y)) -> AdaptationForHiding(x,y))", "exists x.(Camouflage(x) & Adaptation(x) & ForHidingInEnvironment(x))", "all x y.((Camouflage(x) & Environment(y)) -> AdaptationForHidingIn(x,y))", "exists x.(Camouflage(x) & Adaptation(x) & ForHidingInEnvironment(x))", "exists x.(CAMOUFILAGE(x) & AdaptationForSheltering(x))"]}
{"id": "entailmentbank_validation_420", "nl": "an animal having the same skin color as its environment is an adaptation for hiding in an environment.", "fol": "", "prediction": ["all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> AdaptationForHidingInEnvironment(x))", "all x y.((Animal(x) & SkinColor(y) & SameSkinColor(x,y)) -> AdaptationForHidingInEnvironment(x))", "all x y.((Animal(x) & Environment(y) & SameSkinColor(x,y)) -> AdaptationForHiding(x,y))", "all x y z.((Animal(x) & SkinColor(y) & Environment(z) & SameSkinColor(x,y,z)) -> AdaptationForHidingInEnvironment(x))", "all x y.((Animal(x) & SameSkinColor(x,y) & Environment(y)) -> AdaptationForHidingInEnvironment(x))", "all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> AdaptationForHiding(x))", "all x.((Animal(x) & SameSkinColor(x,Environment)) -> AdaptationForHidingInEnvironment(x))", "exists x.(Animal(x) & SameSkinColor(x) & Environment(x) & AdaptationForHiding(x))", "all x.((Animal(x) & SameSkinColorAsEnvironment(x)) -> AdaptationForHuntingInEnvironment(x))", "all x y.((Animal(x) & SkinColor(y) & SameSkinColor(x,y)) -> AdaptationForHidingInEnvironment(x,y))", "all x y z.((Animal(x) & SkinColor(y) & Environment(z) & SameSkinColor(x,y,z)) -> AdaptationForHiding(x))", "all x.(SkinColor(x) -> AdaptationForHidingInEnvironment(x))", "all x y.((Animal(x) & Environment(y) & SameSkinColor(x,y)) -> AdaptationForHunting(x,y))", "all x.((Animal(x) & SameSkinColorAsEnvironment(x)) -> AdaptationForHidingInEnvironment(x))", "all x.((Animal(x) & SameSkinColor(x,Environment)) -> AdaptationForHunting(x))", "all x.((Animal(x) & SkinColorSame(x,Environment)) -> AdaptationForShelter(x))"]}
{"id": "entailmentbank_validation_421", "nl": "predators usually must see their prey in order to catch them.", "fol": "", "prediction": ["all x y.((Predator(x) & Prey(y)) -> Sees(x,y))", "all x y.((Predator(x) & Prey(y)) -> (MustSee(x,y) & Catch(x,y)))", "all x.(Predator(x) -> (MustSeePrey(x) & CatchPrey(x)))", "all x y z.((Predator(x) & Prey(y) & Prey(z) & MustSee(x,y,z)) -> Catch(x,y))", "all x.(Predator(x) -> (SeesPrey(x) & CatchesPrey(x)))", "all x y.((Predator(x) & Prey(y)) -> MustSee(x,y))", "all x.((Predator(x) & Prey(y)) -> Sees(x,y))", "all x y z.((Predator(x) & Prey(y) & Prey(z) & MustSee(x,y,z)) -> Catch(x,y,z))", "all x y.((Predator(x) & Prey(y)) -> SeesInOrCatch(x,y))", "all x.(Predator(x) -> (MustSeePrey(x) & CatchPrey(x)))", "all x y.((Predator(x) & Prey(y)) -> (MustSee(x,y) & CanCatch(x,y)))", "all x.((Predator(x) & SeesPrey(x,y)) -> Catches(x,z))", "exists x.(Predator(x) & SeesPrey(x) & CatchesPrey(x))", "all x y z.((Predator(x) & Prey(y) & Prey(z) & Sees(x,y)) -> Catches(x,z))", "all x.(Predator(x) -> (SeesPrey(x) & CatchesPrey(x)))", "all x y.((Predator(x) & Prey(y)) -> MustSee(x,y))"]}
{"id": "entailmentbank_validation_422", "nl": "hiding means visibility / ability to be seen decreases for camouflage.", "fol": "", "prediction": ["all x.(Hunting(x) -> (DecreasesVisibility(x) & DecreasesAbilityToBeSeen(x)))", "all x.((Hunting(x) & Camouflage(x)) -> VisibilityDecreases(x))", "all x y.((Hunting(x) & Camouflage(y)) -> (Visibility(x,y) | AbilityToBeSeen(x,y)))", "all x.(hiding(x) -> (DecreasesVisibility(x) & DecreasesAbilityToBeSeen(x)))", "all x.(Hunting(x) -> (VisibilityDecreases(x) & AbilityToBeSeen(x)))", "all x y.((Hunting(x) & Camouflage(y)) -> (VisibilityDecreases(x,y) | AbilityToBeSeenDecreases(x,y)))", "(DecreasesVisibility(hiding) & DecreasesAbilityToBeSeen(hiding))", "all x.(hiding(x) -> (VisibilityDecreases(x) | AbilityToBeSeenDecreases(x)))", "all x y.((Cambolage(x) & Camouflage(y)) -> (DecreasesVisibility(x,y) | IncreasesAbilityToBeSeen(x,y)))", "all x.((Hunting(x) & Camouflage(x)) -> VisibilityDecreases(x))", "(DecreasesVisibilityAndAbilityToBeSeen(Camouflage)", "all x.((Hunting(x) & Camouflage(x)) -> (DecreasesVisibility(x) & DecreasesAbilityToBeSeen(x)))", "all x y.((Hunting(x) & Camouflage(y)) -> (DecreasesVisibility(x,y) & DecreasesAbilityToBeSeen(x,y)))", "all x y.((Hunting(x) & Camouflage(y)) -> VisibilityDecreases(x,y))", "all x.(Hunting(x) -> (DecreasesVisibility(x) | AbilityToBeSeen(x)))", "exists x.(HittingVisibility(x) & AbilityToBeSeen(x))"]}
{"id": "entailmentbank_validation_423", "nl": "hiding can be used to avoid being seen by predators.", "fol": "", "prediction": ["all x.(Hunting(x) -> AvoidsPredators(x))", "all x y.((Hunting(x) & Predator(y)) -> AvoidsSighting(x,y))", "all x.(Hunting(x) -> AvoidsSightingByPredators(x))", "all x y z.((Hunting(x) & Predator(y) & Predator(z)) -> AvoidsSighting(x,y,z))", "all x.((Hunting(x) & Predator(y)) -> AvoidsSighting(x,y))", "all x y.((Hunting(x) & Predator(y)) -> AvoidsSighting(x,y))", "all x y.((Hunting(x) & Predator(y)) -> CanBeUsedToAvoidSight(x,y))", "all x.(Hunting(x) -> AvoidsPredators(x))", "all x y z.((Hunting(x) & Predator(y) & Predator(z)) -> Avoids(x,y,z))", "all x.(Hunting(x) -> AvoidsSightByPredators(x))", "exists x.(Shelter(x) & UsedToAvoidPredators(x))", "exists x.(Hiding(x) & AvoidsSight(x))", "all x y.((Hunting(x) & Predator(y)) -> AvoidsSighting(x,y))", "exists x.(Hidden(x) & -SeededByPredators(x))", "all x y.((Hunting(x) & Predator(y)) -> CanBeUsedToAvoid(x,y))", "exists x.(Shelter(x) & UsedToAvoidPredatorSighting(x))"]}
{"id": "entailmentbank_validation_424", "nl": "not being seen by predators is a kind of protection against predators.", "fol": "", "prediction": ["all x.((Predator(x) & -SeedBy(x,y)) -> ProtectionAgainst(x,z))", "all x y.((Predator(x) & -SeedBy(x,y)) -> ProtectionAgainst(x,y))", "all x.((NotSeenByPredators(x) & ProtectiveAgainstPredators(x)) -> ProtectiveAgainstPredators(x))", "all x.((Predator(x) & -SeedBy(x,y)) -> ProtectionAgainst(x,z))", "all x.((Predator(x) & -SeenBy(x,y)) -> ProtectionAgainst(x,z))", "all x.((SeenByPredators(x) & -SeenByPredators(x)) -> ProtectionAgainstPredators(x))", "all x y.((Predator(x) & -SeedBy(x,y)) -> ProtectionAgainst(x,y))", "all x.(ProtectionAgainstPredators(x) -> -SeenByPredators(x))", "all x y.((Predator(x) & Predator(y)) -> Protective(x,y))", "all x y.((Predator(x) & -SeenBy(x,y)) -> ProtectionAgainst(x,y))", "all x.((Predator(x) & -SeedBy(x,y)) -> ProtectiveAgainst(x,y))", "exists x.(Predator(x) & -SeedBy(x,y))", "all x.((Predator(x) & -SeenBy(x,y)) -> ProtectionAgainst(x,z))", "all x y.((Predator(x) & Predator(y)) -> Protective(x,y))", "all x.((Predator(x) & NotSeenBy(x,y)) -> ProtectionAgainst(x,y))", "all x y.((Predator(x) & Predator(y)) -> ProtectionAgainst(x,y))"]}
{"id": "entailmentbank_validation_425", "nl": "hiding is a kind of protection against predators.", "fol": "", "prediction": ["all x.(Hunting(x) -> ProtectionAgainstPredators(x))", "all x y.((Hunting(x) & Predator(y)) -> ProtectsAgainst(x,y))", "all x.(Hunting(x) -> ProtectsAgainstPredators(x))", "all x.(Hunting(x) -> ProtectionAgainstPredators(x))", "all x y z.((Hunting(x) & Predator(y) & Predator(z)) -> ProtectsAgainst(x,y,z))", "all x.(Hiding(x) -> ProtectsAgainstPredators(x))", "all x y.((Hunting(x) & Predator(y)) -> ProtectsAgainst(x,y))", "all x.(hiding(x) -> ProtectionAgainstPredators(x))", "all x y.((Hiding(x) & Predator(y)) -> ProtectsAgainst(x,y))", "all x y.((Hunting(x) & Predator(y)) -> ProtectionAgainst(x,y))", "all x.(Shelter(x) -> PredatorProtection(x))", "all x.(Hunting(x) -> ProtectiveAgainstPredators(x))", "exists x.(Hiding(x) & Predator(x))", "exists x.(Shaking(x) & Predator(x))", "all x y.((Hunting(x) & Predator(y)) -> Protective(x,y))", "exists x.(Shelter(x) & ProtectsAgainstPredators(x))"]}
{"id": "entailmentbank_validation_426", "nl": "an animal having the same skin color as its environment is a kind of protection against predators.", "fol": "", "prediction": ["all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> ProtectionAgainstPredators(x))", "all x y.((Animal(x) & SkinColor(y) & SameSkinColor(x,y)) -> ProtectionAgainstPredators(x))", "all x y.((Animal(x) & SameSkinColor(x,y) & Environment(y)) -> ProtectionAgainstPredators(x))", "all x y z.((Animal(x) & SkinColor(y) & Environment(z) & SameSkinColor(x,y,z)) -> ProtectionAgainstPredators(x))", "all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> ProtectionAgainstPredators(x))", "all x y.((Animal(x) & SameSkinColor(x,y) & Environment(y)) -> ProtectionAgainstPredators(x))", "all x y.((Animal(x) & SkinColor(y) & SameSkinColor(x,y)) -> ProtectionAgainstPredators(x))", "all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> ProtectionAgainstPredators(x))", "all x y z.((Animal(x) & SkinColor(y) & Environment(z) & SameSkinColor(x,y,z)) -> ProtectionAgainstPredators(x))", "all x.((Animal(x) & SameSkinColorAsEnvironment(x)) -> ProtectiveAgainstPredators(x))", "all x.(SkinColor(x) -> ProtectionAgainstPredators(x))", "all x.((Animal(x) & SkinColorSame(x) & Environment(x)) -> ProtectionAgainstPredators(x))", "all x.((Animal(x) & SameSkinColor(x,Environment)) -> ProtectionAgainstPredators(x))", "all x y.((Animal(x) & SkinColor(y) & SameSkinColor(x,y)) -> ProtectionAgainstPredators(x,y))", "all x y.((Animal(x) & SameSkinColor(x,y) & Environment(y)) -> ProtectionAgainstPredators(x))", "all x.((Animal(x) & SameSkinColorAsEnvironment(x)) -> ProtectionAgainstPredators(x))"]}
{"id": "entailmentbank_validation_427", "nl": "hiding means ability to be seen decreases for camouflage.", "fol": "", "prediction": ["all x.((HuntingMeasures(x) & Camouflage(x)) -> DecreasesAbilityToBeSeen(x))", "all x.(HuntingMeasures(x) -> DecreasesAbilityToBeSeen(x))", "all x y.((Hunting(x) & Camouflage(y)) -> AbilityDecreases(x,y))", "all x.((Hunting(x) & Camouflage(x)) -> AbilityDecreases(x))", "all x.(Hunting(x) -> DecreasesAbilityToBeSeen(x))", "all x y.((HuntingMeasure(x) & Camouflage(y)) -> AbilityDecreases(x,y))", "all x.(hiding(x) -> DecreasesAbilityToBeSeen(x))", "(DecreasesAbilityToBeSeenForCamouflage(hiding))", "all x y.((Hunting(x) & Camouflage(y)) -> AbilityToBeSeenDecreases(x,y))", "all x.(hidingMeasures(x) -> DecreasesAbilityToBeSeenForCamouflage(x))", "all x.(HuntingMeasures(x) -> DecreasesAbilityForCamouflage(x))", "all x y.((HuntingMeasure(x) & Camouflage(y)) -> DecreasesAbilityToBeSeen(x,y))", "all x.((HuntingMeasures(x) & Camouflage(x)) -> DecreasesAbilityToBeSeen(x))", "all x y.((Hiding(x) & Camouflage(y)) -> AbilityDecreases(x,y))", "All x.(HuntingMeans(x) -> DecreasesAbilityToBeSeen(x))", "exists x.(Hidden(x) & Camouflage(x))"]}
{"id": "entailmentbank_validation_428", "nl": "to blend into something means ability to be seen decreases when around that something.", "fol": "", "prediction": ["all x y.((BlendedInto(x,y) & Something(y)) -> AbilityDecreasesWhenAround(x,y))", "all x.((BlendedInto(x) & Something(x)) -> AbilityToBeSeenDecreasesWhenAround(x,y))", "all x.(BlendedInto(x) -> DecreasesAtMovement(x))", "all x y.((BlendedInto(x,y) & Something(y)) -> DecreasesAtMovement(x,y))", "all x.((BlendedInto(x) & Something(x)) -> AbilityDecreasesWhenAround(x,y))", "all x y z.((BlendedInto(x,y) & Something(z)) -> DecreasesAbilityToBeSeen(x,z))", "all x y.((BlendedInto(x,y) & Something(y)) -> AbilityToBeSeenDecreasesWhenAround(x,y))", "all x.(BlendedInto(x,y) -> DecreasesAtMovement(x,y))", "all x y z.((BlendedInto(x,y) & Something(z) & BlendedInto(x,z)) -> DecreasesAtMovement(x,z))", "all x y.((MoldInto(x,y) & Something(y)) -> AbilityDecreasesWhenAround(x,y))", "all x.((BlendsInto(x) & Something(x)) -> AbilityToBeSeenDecreasesWhenAround(x,y))", "all x y.((BlendInto(x,y) & Something(y)) -> DecreasesAbilityToBeSeen(x,y))", "all x.((BlendedInto(x) & Something(x)) -> DecreasesAtMovement(x))", "all x.(BlendedInto(x) -> DecreasedAbilityToBeSeen(x))", "all x y.((BlendedInto(x) & Something(y)) -> DecreasesAbilityToBeSeen(x,y))", "All x.(BlendInto(x,y) -> DecreasesAbilityToBeSeen(x,y))"]}
{"id": "entailmentbank_validation_429", "nl": "to blend into something means to hide in something.", "fol": "", "prediction": ["all x.(BlendInto(x) -> HideIn(x))", "all x y.((BlendInto(x,y) & Something(y)) -> HideIn(x,y))", "all x.((BlendInto(x) & Something(x)) -> HideIn(x))", "all x y z.((BlendInto(x,y) & Something(z)) -> (HasHuntIn(x,z) & Something(y)))", "all x y.((BlendedInto(x,y) & Something(y)) -> HideIn(x,y))", "all x y.((MoldInto(x,y) & Something(y)) -> HideIn(x,y))", "all x.(BlendedInto(x) -> HideIn(x))", "all x.((BlendedInto(x) & Something(x)) -> HiddenIn(x))", "all x.(BlendInto(x,y) -> (HideIn(x,y)))", "all x y.((BlendInto(x,y) & Something(y)) -> HideIn(x,y))", "all x y z.((BlendedInto(x,y) & Something(z)) -> MeansToHideIn(x,z))", "exists an x.(BlendedInto(x,y) & Something(y) & MeansToHideIn(x,y))", "exists x.(BloodInto(x) & MeansHuntIn(x))", "all x y.((BlendedInto(x) & Something(y)) -> HideIn(x,y))", "all x.((BlendInto(x) & Something(x)) -> HideIn(x))", "exists x.(BloodInto(x) & InvolvesHuntingIn(x))"]}
{"id": "entailmentbank_validation_430", "nl": "white fur blends into snow.", "fol": "", "prediction": ["all x.(WhiteFur(x) -> BlendsIntoSnow(x))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsInto(x,y))", "all x.(WhiteFur(x) -> BlendsIntoSnow(x))", "all x y z.((WhiteFur(x) & Snow(y) & Snow(z)) -> BlendsInto(x,y,z))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsInto(x,y))", "(WhiteFurBlendsIntoSnow)", "all x.(WhiteFur(x) -> BlendsIntoSnow(x))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsInto(x,y))", "(WhiteFurBlendsIntoSnow(w))", "all x y.((WhiteFur(x) & Snow(y) & BlendsInto(x,y)) -> BlendsInto(x,y))", "all x.(WhiteFur(x) -> BlendsIntoSnow(x))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsInto(x,y))", "all x.(WhiteFur(x) -> BlendsIntoSnow(x))", "all x.(WhiteFur(x) -> BlendsIntoSnow(x))", "all x.(WhiteFur(x) -> BlendsIntoSnow(x))", "all x.(WhiteFur(x) -> BlendsIntoSnow(x))"]}
{"id": "entailmentbank_validation_431", "nl": "an example of hiding is white fur blending in with snow.", "fol": "", "prediction": ["all x.((WhiteFur(x) & BlendsInWithSnow(x)) -> Hidden(x))", "all x.(Hunting(x) -> (WhiteFur(x) & BlendsInWithSnow(x)))", "all x y.((WhiteFur(x) & Snow(y)) -> Hidden(x))", "all x.((WhiteFur(x) & Snow(x)) -> Hidden(x))", "all x y z.((WhiteFur(x) & Snow(y) & BlendsIn(x,y)) -> Hidden(x))", "all x.(Hunting(x) -> (WhiteFurBlooding(x) & Snow(x)))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsIn(x,y))", "exists x.(Hide(x) & WhiteFur(x) & BlendsInWithSnow(x))", "exists x.(WhiteFur(x) & BlendsInWithSnow(x))", "all x y z.((WhiteFur(x) & Snow(y) & BlendsIn(x,y,z)) -> Hidden(x))", "all x y.((WhiteFur(x) & Snow(y)) -> Hidden(x))", "exists x.(Hunting(x) & WhiteFur(x) & BlendsInWithSnow(x))", "exists x.(WhiteFur(x) & BlendsInWithSnow(x))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsIn(x,y))", "exists x.(Hidden(x) & WhiteFur(x) & BlendsInWithSnow(x))", "all x y.((WhiteFur(x) & Snow(y)) -> Hide(x,y))"]}
{"id": "entailmentbank_validation_432", "nl": "an example of camouflage is white fur blending in with snow.", "fol": "", "prediction": ["all x.((WhiteFur(x) & BlendsInWithSnow(x)) -> Camouflage(x))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsIn(x,y))", "all x.(Camouflage(x) -> (WhiteFur(x) & BlendsInWithSnow(x)))", "all x.((WhiteFur(x) & BlendsWithSnow(x)) -> Camouflage(x))", "all x.(Camouflage(x) -> (WhiteFurBlooding(x) & SnowBlooding(x)))", "all x y z.((WhiteFur(x) & Snow(y) & BlendsIn(x,y)) -> Camouflage(x))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsIn(x,y))", "all x.((WhiteFur(x) & BlendedInWithSnow(x)) -> Camouflage(x))", "exists x.(WhiteFur(x) & BlendsInWithSnow(x))", "all x y z.((WhiteFur(x) & Snow(y) & BlendsIn(x,y,z)) -> Camouflage(x))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsIn(x,y))", "exists x.(WhiteFur(x) & BlendsInWithSnow(x))", "exists x.(Camouflage(x) & WhiteFur(x) & BlendedWithSnow(x))", "exists x.(WhiteFur(x) & BlendsWithSnow(x))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsIn(x,y))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsIn(x,y))"]}
{"id": "entailmentbank_validation_433", "nl": "some leaves have a speckled brown color.", "fol": "", "prediction": ["exists x.(Leaves(x) & SpckledBrownColor(x))", "exists x.(Leaves(x) & SpoiledBrownColor(x))", "exists x y.(Leaves(x) & SpckledBrownColor(y))", "exists x.(Leaves(x) & SpckledBrownColor(x))", "exists x.(Leaves(x) & SpckledBrownColor(x))", "exists x.(Leaves(x) & SpeckledBrownColor(x))", "exists x.(Leaf(x) & SpckledBrownColor(x))", "exists x y.(Leaves(x) & SpeckledBrownColor(y))", "exists x.(Leaves(x) & SpoiledBrownColor(x))", "exists x.(Leaves(x) & SpeckledBrownColor(x))", "exists x y.(Leaves(x) & SpoiledBrownColor(y))", "exists x.(Leaves(x) & SpeckledBrownColor(x))", "exists x.(Leaves(x) & SpoiledBrownColor(x))", "exists x.(Leaf(x) & SpoiledBrownColor(x))", "exists x.(Leaves(x) & SpeckledBrownColor(x))", "exists x.(Leaves(x) & SpoiledBrownColor(x))"]}
{"id": "entailmentbank_validation_434", "nl": "some birds have a speckled brown color.", "fol": "", "prediction": ["exists x.(Bird(x) & SpckledBrownColor(x))", "exists x.(Bird(x) & SpckledBrownColor(x))", "exists x.(Bird(x) & SpckledBrownColor(x))", "exists x.(Bird(x) & SpoiledBrownColor(x))", "exists x y.(Bird(x) & SpckledBrownColor(y))", "exists x.(Bird(x) & SpckledBrownColor(x))", "exists x.(Bird(x) & SpeckledBrownColor(x))", "exists x y.(Bird(x) & SpeckledBrownColor(y))", "exists x.(Bird(x) & SpoiledBrownColor(x))", "exists x.(Bird(x) & SpeckledBrownColor(x))", "exists x.(Bird(x) & SpoiledBrownColor(x))", "exists x.(Bird(x) & SpeckledBrownColor(x))", "exists x.(Bird(x) & SpoiledBrownColor(x))", "exists x.(Bird(x) & HasSpeckledBrownColor(x))", "exists x.(Bird(x) & SpeckledBrownColor(x))", "exists x.(Bird(x) & SpangledBrownColor(x))"]}
{"id": "entailmentbank_validation_435", "nl": "some birds look like leaves.", "fol": "", "prediction": ["exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x y.(Bird(x) & Leaf(y))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x y.(Bird(x) & LooksAlikeLeaves(x,y))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LooksAlike(x,Leaves))", "exists x.(Bird(x) & LookslikeLeaves(x))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LooksLikeLeaves(x))", "exists x.(Bird(x) & LookslikeLeaves(x))", "exists x.(Bird(x) & LooksAlike(x,Leaves))", "exists x.(Bird(x) & LooksLikeLeaves(x))", "exists x.(Bird(x) & LookslikeLeaves(x))"]}
{"id": "entailmentbank_validation_436", "nl": "something that looks like another thing is difficult to distinguish from that thing.", "fol": "", "prediction": ["all x y.((Thing(x) & LooksAlike(x,y)) -> DifficultToDistinctFrom(x,y))", "all x.((LooksAlike(x,y) & Thing(y)) -> DifficultToDistinctFrom(x,y))", "all x y.((Tax(x) & LooksAlike(x,y)) -> DifficultToDistinctFrom(x,y))", "all x.((LooksAlike(x,y) & AnotherThing(y)) -> DifficultToDistinctFrom(x,y))", "all x y.((Task(x) & LooksAlike(x,y)) -> DifficultToDistinctFrom(x,y))", "all x.((LooksAlikeAnotherThing(x)) -> DifficultToDistinctFrom(x,y))", "all x y z.((Task(x) & LooksAlike(x,y) & Thing(z)) -> DifficultToDistinctFrom(x,z))", "all x.(LooksAlike(x,y) -> DifficultToDistinctFrom(x,y))", "all x y z.((Thing(x) & LooksAlike(x,y) & Thing(z)) -> DifficultToDistinctFrom(x,z))", "all x y.((Thing(x) & LooksAlike(x,y)) -> DifficultToDistinctFrom(x,y))", "exists x.(Thing(x) & LooksAlike(x,y) & DistinctFrom(x,z))", "all x.((LooksAlike(x,y) & Thing(y)) -> DifficultToDistinctFrom(x,y))", "exists x.(Thing(x) & LooksAlike(x,y) & DifficultToDistinctFrom(x,z))", "exists x.(Thing(x) & LooksAlike(x,y)) -> DifficultToDistinctFrom(x,y))", "all x y.((Thing(x) & LooksAlike(x,y)) -> DifficultToDistractFrom(x,y))", "all x y.((Task(x) & LooksAlike(x,y)) -> DifficultToDistinctFrom(x,y))"]}
{"id": "entailmentbank_validation_437", "nl": "some birds are difficult to distinguish from leaves.", "fol": "", "prediction": ["exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x y.(Bird(x) & Leave(y) & DifficultToDistinct(x,y))", "exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x y.(Bird(x) & Leave(y) & DifficultToDistinctFrom(x,y))", "exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x y.(Bird(x) & Leaf(y) & DifficultToDistinct(x,y))", "exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x.(Bird(x) & DifficultToDiffertFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x.(Bird(x) & DistinctFromLeaves(x))", "exists x.(Bird(x) & HardToDistinctFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistortFromLeaves(x))", "exists x.(Bird(x) & DistinctFromLeaves(x))"]}
{"id": "entailmentbank_validation_438", "nl": "difficult to distinguish can mean difficult to see in something else.", "fol": "", "prediction": ["all x.(DifficultToDistinct(x) -> DifficultToSee(x))", "all x y.((DifficultToDistinct(x) & SomethingOther(y)) -> DifficultToSee(x,y))", "(DifficultToDistinct(x) -> DifficultToSee(x))", "all x.(DifficultToDistinct(x) -> Distinct(x))", "all x y z.((DifficultToDistinct(x) & SomethingOther(y) & Person(z)) -> (DifficultToSee(x,y,z)))", "all x y.((DifficultToDistinct(x) & SomethingOther(y)) -> Distinct(x,y))", "all x y.((DifficultToDifferent(x) & SomethingOther(y)) -> Distinct(x,y))", "(DifficultToDistinct(x) & MeansDifficultToSee(x))", "(DifficultToDistinct(difficultToSeeIn(d) & SomethingOther(d))", "all x.(DifficultToDistinct(x) -> DifficultToSee(x))", "all x.(DifficultToDifferent(x) -> DifficultToSee(x))", "all x y.((DifficultToDistinct(x) & DifficultToSee(y)) -> Distinct(x,y))", "all x y.((DifficultToDifferent(x) & SomethingOther(y)) -> DifficultToSee(x,y))", "all x.(DifficultToDistinct(x) -> Distract(x))", "exists x.(DifficultToDiscover(x) & MeansDifficultToSee(x))", "all x.(DifficultToDistinct(x) -> DifficultToSee(x))"]}
{"id": "entailmentbank_validation_439", "nl": "some birds are difficult to see in leaves.", "fol": "", "prediction": ["exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x y.(Bird(x) & Leaves(y) & DifficultToSee(x,y))", "exists x y.(Bird(x) & Leaf(y) & DifficultToSee(x,y))", "exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x y.(Bird(x) & Leaves(y) & DifficultToSee(x,y))", "exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x.(Bird(x) & DistinctToSeeInLeaves(x))", "exists x.(Bird(x) & HardToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSelectInLeaves(x))", "exists x.(Bird(x) & DistinctToSeeInLeaves(x))", "exists x.(Bird(x) & HardToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSeeInLeaves(x))"]}
{"id": "entailmentbank_validation_440", "nl": "an example of camouflage is a bird looking like leaves.", "fol": "", "prediction": ["all x.((Bird(x) & LooksAlikeLeaves(x)) -> Camouflage(x))", "all x.(Camouflage(x) -> (BirdLookingAlikeLeaves(x)))", "all x y.((Bird(x) & Leaf(y)) -> Camouflage(x,y))", "all x.((Bird(x) & LooksAlikeLeaves(x)) -> Camouflage(x))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "all x.(Camouflage(x) -> (BirdLookingAlikeLeaves(x)))", "all x y.((Bird(x) & Leaf(y)) -> LooksAlike(x,y))", "all x.((Bird(x) & LooksAlikeLeaves(x)) -> Camouflage(x))", "all x y.((Bird(x) & Leaves(y)) -> Camouflage(x,y))", "all x y.((Bird(x) & LooksAlikeLeaves(x)) -> Camouflage(x))", "all x.(Camouflage(x) -> (BirdLookingAlikeLeaves(x)))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "all x.((Bird(x) & LooksAlikeLeaves(x)) -> Camouflage(x))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "all x y.((Bird(x) & Leaf(y)) -> Camouflage(x,y))", "exists x.(Bird(x) & LooksAlikeLeaves(x))"]}
{"id": "entailmentbank_validation_441", "nl": "camouflage is used for hiding by animals from predators.", "fol": "", "prediction": ["all x y.((Camouflage(x) & Animal(y)) -> UsedForHunting(x,y))", "all x.(Camouflage(x) -> UsedForHunting(x))", "all x y z.((Camouflage(x) & Animal(y) & Predator(z)) -> UsedForHiding(x,y,z))", "all x y.((Camouflage(x) & Animal(y)) -> UsedForHiding(x,y))", "(Hide(camouflage) & Animal(animal))", "all x.(Camouflage(x) -> UsedForHiding(x))", "all x y z.((Camouflage(x) & Animal(y) & Predator(z)) -> UsedForHunting(x,y,z))", "all x y.((Cambolage(x) & Animal(y)) -> UsedForHunting(x,y))", "all x.(Camouflage(x) -> UsedForHunting(x,Animals,Predators))", "all x.(Cambolage(x) -> UsedForHuntingByAnimals(x))", "all x y.((Camouflage(x) & Animal(y)) -> UsedForHunting(x,y))", "exists x.(Cambolage(x) & UsedForHiding(x) & Animal(x) & Predator(x))", "all x.(Camouflage(x) -> UsedForSheltering(x))", "all x y.((Animal(x) & Predator(y)) -> Camouflage(x,y))", "exists x.(Campouflage(x) & UsedForHuntingByAnimals(x) & FromPredators(x))", "exists x.(Camouflage(x) & UsedForHiding(x,Animals) & FromPredators(x))"]}
{"id": "entailmentbank_validation_442", "nl": "looking like leaves can be used by birds for hiding from predators.", "fol": "", "prediction": ["all x.((LookingAlikeLeaves(x) & Bird(x)) -> CanBeUsedForHuntingFromPredators(x))", "all x.(LookingAlikeLeaves(x) -> CanBeUsedByBirdsForHuntingFromPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x)) -> CanHideFromPredators(x,y))", "all x y z.((Bird(x) & LooksAlikeLeaves(x) & Predator(y) & Predator(z)) -> CanHideFrom(x,y,z))", "all x y.((Bird(x) & LooksAlikeLeaves(x)) -> CanHuntFromPredators(x,y))", "all x.((LookingAlikeLeaves(x) & Bird(x)) -> CanBeUsedForHunting(x))", "all x.(LookingAlikeLeaves(x) -> CanBeUsedByBirdsForHuntingFromPredators(x))", "all x.((LookingLimes(x) & Bird(x)) -> CanBeUsedForHidingFromPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x) & Predator(y)) -> CanHideFrom(x,y))", "exists x.(Bird(x) & LooksAlikeLeaves(x) & CanHideFromPredators(x))", "all x y.((Bird(x) & Leaf(y) & LooksAlike(x,y)) -> CanHideFromPredators(x,y))", "all x.(LooksLikeLeaves(x) -> CanBeUsedByBirdsForSheltering(x))", "all x.(LookingAlikeLeaves(x) -> UsedByBirdsForHuntingFromPredators(x))", "all x y.((Bird(x) & LookingAlikeLeaves(x) & Predator(y)) -> CanHideFrom(x,y))", "all x y.((Bird(x) & LooksLikeLeaves(x)) -> CanHideFromPredators(x,y))", "all x.((LooksAlikeLeaves(x) & Bird(x)) -> CanHideFromPredators(x))"]}
{"id": "entailmentbank_validation_443", "nl": "hiding can be used to avoid something.", "fol": "", "prediction": ["all x.(Hunting(x) -> CanBeUsedToAvoid(x))", "all x y.((Hunting(x) & Something(y)) -> CanBeUsedToAvoid(x,y))", "all x.(HasHunting(x) -> CanBeUsedToAvoid(x))", "all x.(Hunting(x) -> CanBeUsedToAvoid(x))", "all x y.((HasHunting(x) & Something(y)) -> CanBeUsedToAvoid(x,y))", "all x y z.((Hunting(x) & Something(y) & Event(z)) -> CanBeUsedToAvoid(x,y,z))", "all x y.((Hunting(x) & Something(y)) -> CanBeUsedToAvoid(x,y))", "all x y.((Hunting(x) & Object(y)) -> CanBeUsedToAvoid(x,y))", "all x.(Hunting(x) -> CanAvoid(x))", "exists x.(Shelter(x) & Avoids(x))", "all x y.((HasHunting(x) & Something(y)) -> CanBeUsedToAvoid(x,y))", "exists x.(hiding(x) & UsedToAvoid(x))", "exists x.(HasShelter(x) & Avoids(x,y))", "exists x.(Shelter(x) & UsedToAvoid(x))", "all x y.((Hunting(x) & Something(y)) -> Avoids(x,y))", "exists x.(Hidden(x) & Avoids(x))"]}
{"id": "entailmentbank_validation_444", "nl": "looking like leaves can be used by birds for avoiding predators.", "fol": "", "prediction": ["all x.((LookingAlikeLeaves(x) & Bird(x)) -> AvoidsPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x)) -> AvoidsPredators(x,y))", "all x.(LookingAlikeLeaves(x) -> CanBeUsedByBirdsForAvoidingPredators(x))", "all x y z.((Bird(x) & LooksAlikeLeaves(x) & Predator(y) & Predator(z)) -> CanBeUsedFor(x,y,z))", "all x.((LookingAlikeLeaves(x) & Bird(x)) -> AvoidsPredators(x))", "exists an x.(Bird(x) & LooksAlikeLeaves(x) & AvoidsPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x)) -> AvoidsPredators(y))", "all x.(LookingAlikeLeaves(x) -> CanBeUsedByBirdsForAvoidingPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x)) -> CanAvoidPredators(x,y))", "all x y.((Bird(x) & LeafLooking(x)) -> AvoidsPredators(x,y))", "all x.((LooksLikeLeaves(x) & Bird(x)) -> AvoidsPredators(x))", "all x y.((Bird(x) & LooksLikeLeaves(x) & Predator(y)) -> CanUseFor(x,y))", "all x.((LookingAlikeLeaves(x) & Bird(x)) -> CanBeUsedForAvoidingPredators(x))", "all x.(LooksLikeLeaves(x) -> CanBeUsedByBirdsForAvoidingPredators(x))", "all x y.((Bird(x) & LeafLooking(x)) -> CanAvoidPredators(x,y))", "all x.((LooksLikeLeaves(x) & Bird(x)) -> AvoidsPredators(x))"]}
{"id": "entailmentbank_validation_445", "nl": "keeping warm is the opposite of becoming cold.", "fol": "", "prediction": ["all x.(KeepsWarm(x) -> OppositeOfBecomingCold(x))", "keepingWarm(x) -> OppositeOfBeingCold(x))", "all x.(KeepingWarm(x) -> OppositeOfBeingCold(x))", "keepingWarm(KeepsWarm(KeepsCold(KeepsWarm) -> OppositeOfCold(KeepsWarm(KeepsWarm(KeepsWarm))", "all x y.((KeepsWarm(x) & Cold(y)) -> OppositeOf(x,y))", "(KeepsWarm(x) -> OppositeOfBecomingCold(x))", "all x.(KeepsWarm(x) -> OppositeOfCold(x))", "keepingWarm(KeepsWarm(KeepsWarm) -> OppositeOfBecomingCold(KeepsWarm(KeepsWarm(KeepsWarm))", "keepingWarm(x) -> OppositeOfBecomingCold(x))", "keepingWarm(w) -> OppositeOfBecomingCold(w))", "(KeepingWarm(w) & Cold(w))", "all x y.((KeepsWarm(x) & Cold(y)) -> OppositeOf(x,y))", "all x.(KeepingWarm(x) -> OppositeOfBecomingCold(x))", "all x.(KeepsWarm(x) -> OppositeOfBecomingCold(x))", "keepingWarm(x) -> OppositeOfBeingCold(x))", "all x.(KeepsWarm(x) -> OppositeOfCold(x))"]}
{"id": "entailmentbank_validation_446", "nl": "if a living thing becomes too cold then that living thing will die.", "fol": "", "prediction": ["all x.((LivingThing(x) & TooCold(x)) -> Die(x))", "all x y.((LivingThing(x) & TooCold(x)) -> Die(y))", "all x.((LivingThing(x) & TooCold(x)) -> Dies(x))", "all x y.((LivingThing(x) & TooCold(x)) -> Dies(y))", "all x.((LivingThing(x) & TooCold(x)) -> Die(x))", "exists x.(LivingThing(x) & TooCold(x) & Dies(x))", "all x y.((LivingThing(x) & TooCold(x)) -> WillDie(x,y))", "all x.((LivingThing(x) & TooCold(x)) -> WillDie(x))", "exists x.(LivingThing(x) & TooCold(x) & Die(x))", "all x y.((LivingThing(x) & TooCold(x)) -> Die(y))", "all x.((LivingThing(x) & TooCold(x)) -> Dies(x))", "exists x.(LivingThing(x) & TooCold(x))", "all x y.((LivingThing(x) & TooCold(x)) -> WillDie(y))", "all x.((LivingThing(x) & TooCold(x)) -> WillDie(x))", "all x y.((LivingThing(x) & TooCold(y)) -> Dies(x,y))", "all x.((LivingDing(x) & TooCold(x)) -> Die(x))"]}
{"id": "entailmentbank_validation_447", "nl": "an animal usually requires warmth for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.((Animal(x) & RequiresWarmth(x)) -> Survival(x))", "all x y.((Animal(x) & Animal(y)) -> RequiresWarmthForSurvival(x,y))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.((Animal(x) & RequiresWarmth(x)) -> RequiresWarmthForSurvival(x))", "all x.((Animal(x) & RequiresWarmthForSurvival(x)) -> RequiresWarmthForSurvival(x))", "all x y.((Animal(x) & Animal(y)) -> RequiresWarmthForSurvival(x,y))", "all x y.((Animal(x) & Warmth(y)) -> RequiresForSurvival(x,y))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x y.((Animal(x) & Temperature(y)) -> RequiresForSurvival(x,y))", "all x y.((Animal(x) & Animal(y)) -> RequiresWarmthForSurvival(x,y))", "all x.((Animal(x) & RequiresWarmth(x)) -> Survival(x))", "all x.(Animal(x) -> RequiresWarmth(x))", "exists x.(Animal(x) & RequiresWarmth(x))", "exists x.(Animal(x) & RequiresWarmth(x))"]}
{"id": "entailmentbank_validation_448", "nl": "if the environmental temperature is too cold then an animal in that environment may become cold.", "fol": "", "prediction": ["all x.((Environment(x) & TooCold(x)) -> MayBecomeCold(x))", "all x y.((Environment(x) & Environment(y) & TooCold(x)) -> MayBecomeCold(x,y))", "all x.((Environment(x) & TooCold(x)) -> MayBecomeCold(x))", "all x y.((Animal(x) & Environment(y) & TooCold(y)) -> MayBecomeCold(x,y))", "all x.((EnvironmentalTemperature(x) & TooCold(x)) -> MayBecomeCold(x))", "all x y z.((Environment(x) & Environment(y) & Environment(z) & TooCold(y)) -> MayBecomeCold(z))", "all x y.((Environment(x) & Environment(y) & TooCold(x)) -> MayBecomeCold(x,y))", "all x.((Environment(x) & TooCold(x)) -> MayBecomeCold(x))", "all x.(TooColdEnvironment(x) -> MayBecomeCold(x))", "all x y.((Environment(x) & EnvironmentTemperature(y) & TooCold(y)) -> MayBecomeCold(x,y))", "all x y.((Animal(x) & Environment(y) & TooCold(y)) -> MayBecomeCold(x,y))", "all x.((EnvironmentalTemperature(x) & TooCold(x)) -> MayBecomeCold(x))", "all x.((Environment(x) & TooCold(x)) -> MayBecomeCold(x))", "all x.((Animal(x) & EnvironmentTooCold(x)) -> MayBecomeCold(x))", "all x y.((Animal(x) & Environment(y) & TooCold(y)) -> MayBecomeCold(x,y))", "exists x.(Climate(x) & TooCold(x))"]}
{"id": "entailmentbank_validation_449", "nl": "an animal requires warmth in cold temperatures.", "fol": "", "prediction": ["all x.((Animal(x) & ColdTemperatures(x)) -> RequiresWarmth(x))", "all x y.((Animal(x) & ColdTemperature(y)) -> RequiresWarmth(x,y))", "all x.(RequiresWarmth(x) -> ColdTemperatures(x))", "all x.((Animal(x) & ColdTemperatures(x)) -> RequiresWarmth(x))", "all x y.((Animal(x) & ColdTemperatures(y)) -> RequiresWarmth(x,y))", "all x y z.((Animal(x) & ColdTemperature(y) & ColdTemperature(z)) -> RequiresWarmth(x,y,z))", "exists x.(Animal(x) & RequiresWarmthInColdTemperatures(x))", "all x.(RequiresWarmth(x) -> ColdTemperatures(x))", "all x.((Animal(x) & ColdTemperature(x)) -> RequiresWarmth(x))", "all x.(RequiresWarmthInColdTemperatures(x) -> Animal(x))", "all x y.((Animal(x) & ColdTemperature(y)) -> RequiresWarmth(x,y))", "exists x.(Animal(x) & RequiresWarmthInColdTemperatures(x))", "all x.((Animal(x) & ColdTemperatures(x)) -> RequiresWarmth(x))", "all x y.((Animal(x) & ColdTemperatures(y)) -> RequiresWarmth(x,y))", "exists x.(Animal(x) & RequiresWarmthInColdTemperatures(x))", "all x y.((Animal(x) & ColdTemperature(y)) -> RequiresWarmth(x,y))"]}
{"id": "entailmentbank_validation_450", "nl": "thick fur can be used for keeping warm.", "fol": "", "prediction": ["all x.(ThickFur(x) -> CanBeUsedForWarming(x))", "all x.(ThickFur(x) -> CanKeepWarm(x))", "all x.((ThickFur(x) & KeepsWarm(x)) -> CanBeUsedFor(x))", "(ThickFur(x) & KeepsWarm(x))", "all x y.((ThickFur(x) & Warm(y)) -> CanBeUsedFor(x,y))", "all x.(ThickFur(x) -> KeepsWarm(x))", "all x y.((ThickFur(x) & Warm(y)) -> CanBeUsedFor(x,y))", "all x.(ThickFur(x) -> CanBeUsedForWarming(x))", "all x.((ThickFur(x) & KeepsWarm(x)) -> CanBeUsedFor(x))", "all x y.((ThickFur(x) & Warm(y) & UsedFor(x,y)) -> CanBeUsedFor(x,y))", "all x y.((ThickFur(x) & Warm(y)) -> CanBeUsedFor(x,y))", "all x.(ThickFur(x) -> KeepsWarm(x))", "all x y.((ThickFur(x) & Temperature(y)) -> CanKeepWarm(x,y))", "all x.(ThickFur(x) -> UsedForWarming(x))", "exists x.(ThickFur(x) & UsedForWarming(x))", "exists x.(ThickFur(x) & KeepsWarm(x))"]}
{"id": "entailmentbank_validation_451", "nl": "thick fur can be used by animals for survival in cold temperatures.", "fol": "", "prediction": ["all x.(ThickFur(x) -> UsedForSurvivalInColdTemperatures(x))", "all x y.((ThickFur(x) & Animal(y)) -> CanUseForSurvivalInColdTemperatures(x,y))", "all x.(ThickFur(x) -> CanBeUsedByAnimalsForSurvivalInColdTemperatures(x))", "all x.((ThickFur(x) & ColdTemperatures(x)) -> CanBeUsedByAnimalsForSurvival(x))", "all x y z.((ThickFur(x) & Animal(y) & ColdTemperature(z)) -> CanUseForSurvival(x,y,z))", "all x y.((Animal(x) & ThickFur(y)) -> UsesForSurvivalInColdTemperatures(x,y))", "all x y.((ThickFur(x) & Animal(y)) -> CanUseForSurvivalInColdTemperatures(y,x))", "all x.((ThickFur(x) & Animal(y)) -> CanUseForSurvivalInColdTemperatures(x,y))", "all x y.((ThickFur(x) & Animal(y) & ColdTemperature(y)) -> CanUseForSurvival(x,y))", "all x.(ThickFur(x) -> UsedForSurvival(x))", "all x y.((Animal(x) & ThickFur(y)) -> CanUseForSurvivalInColdTemperatures(x,y))", "all x y z.((ThickFur(x) & Animal(y) & ColdTemperature(z)) -> CanUseForSurvival(x,y,z))", "all x.(ThickFur(x) -> CanBeUsedForSurvivalInColdTemperatures(x))", "all x.((ThickFur(x) & UsedByAnimals(x)) -> ColdTemperatures(x))", "all x.(ThickFur(x) -> UsedByAnimalsForSurvivalInColdTemperatures(x))", "exists x.(ThickFur(x) & UsedByAnimalsForSurvival(x))"]}
{"id": "entailmentbank_validation_452", "nl": "winter has cold temperatures.", "fol": "", "prediction": ["all x.(Winter(x) -> ColdTemperatures(x))", "all x y.((Winter(x) & ColdTemperatures(y)) -> ColdTemperatures(x,y))", "all x.(Winter(x) -> ColdTemperatures(x))", "(ColdTemperatures(winter)", "all x.(Winter(x) -> ColdTemperatures(x))", "all x y.((Winter(x) & ColdTemperatures(y)) -> Has(x,y))", "-ColdTemperaturesInWinter(w)", "(ColdTemperatures(winter)", "(ColdTemperatures(winter,winter))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x y.(Winter(x) & ColdTemperatures(y))", "(ColdTemperatures(winter,winter))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> ColdTemperatures(x))", "exists x.(Winter(x) & ColdTemperature(x))"]}
{"id": "entailmentbank_validation_453", "nl": "thick fur can be used by animals for survival survival during winter.", "fol": "", "prediction": ["all x y.((ThickFur(x) & Animal(y)) -> CanUseForSurvivalDuringWinter(x,y))", "all x.(ThickFur(x) -> UsedForSurvival(x))", "all x.(ThickFur(x) -> CanBeUsedByAnimalsForSurvivalDuringWinter(x))", "all x y z.((ThickFur(x) & Animal(y) & Winter(z)) -> CanUseForSurvival(x,y,z))", "all x.((ThickFur(x) & Animal(y)) -> CanUseForSurvival(x,y))", "all x y.((ThickFur(x) & Animal(y)) -> CanUseForSurvival(x,y))", "all x.(ThickFur(x) -> UsedForSurvivalDuringWinter(x))", "all x y.((ThickFur(x) & Animal(y)) -> UsesForSurvivalDuringWinter(x,y))", "(UsedForSurvivalDuringWinter(thickFur,Winter) & Animal(w))", "all x.((ThickFur(x) & Animal(x)) -> UsesForSurvivalDuringWinter(x))", "all x.(ThickFur(x) -> CanBeUsedForSurvivalDuringWinter(x))", "all x y z.((ThickFur(x) & Animal(y) & Winter(z)) -> CanUseForSurvival(x,y,z))", "all x y.((ThickFur(x) & Animal(y)) -> UsedForSurvivalDuringWinter(x,y))", "all x y.((ThickFur(x) & Animal(y) & Winter(y)) -> CanUseForSurvival(x,y))", "all x.(ThickFur(x) -> UsedByAnimalsForSurvivalDuringWinter(x))", "all x.((ThickFur(x) & Animal(y)) -> CanUseForSurvivalDuringWinter(x,y))"]}
{"id": "entailmentbank_validation_454", "nl": "a bear is a kind of animal.", "fol": "", "prediction": ["all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x y.(Bear(x) -> Animal(y))", "all x.(Bear(x) -> Animal(x))", "all x y.(Bear(x) -> Animal(y))", "all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x y.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x y.(Bear(x) -> Animal(y))", "all x.(Bear(x) -> Animal(x))", "exists x.(Bear(x) & Animal(x))", "exists x.(Bear(x) & Animal(x))", "exists x.(Bear(x) & Animal(x))", "exists x.(Bear(x) & Animal(x))"]}
{"id": "entailmentbank_validation_455", "nl": "thick fur can be used by bears for survival during winter.", "fol": "", "prediction": ["all x.((ThickFur(x) & Bear(x)) -> CanUseForSurvivalDuringWinter(x))", "all x y.((ThickFur(x) & Bear(y)) -> CanUseForSurvivalDuringWinter(x,y))", "all x.(ThickFur(x) -> CanBeUsedByBearsForSurvivalDuringWinter(x))", "all x y z.((ThickFur(x) & Bear(y) & Winter(z)) -> CanUseForSurvival(x,y,z))", "all x y.((Bear(x) & ThickFur(y)) -> CanUseForSurvivalDuringWinter(x,y))", "all x.((ThickFur(x) & Bear(y)) -> CanUseForSurvival(x,y))", "all x y.((ThickFur(x) & Bear(y)) -> CanUseForSurvival(x,y))", "all x.(ThickFur(x) -> UsedByBearsForSurvivalDuringWinter(x))", "(UsedByBearsForSurvivalDuringWinter(thickFur,Winter))", "all x.((ThickFur(x) & Bear(x)) -> UsesForSurvivalDuringWinter(x))", "all x y z.((ThickFur(x) & Bear(y) & Winter(z)) -> CanUseForSurvival(x,y,z))", "all x y.((ThickFur(x) & Bear(y)) -> CanBeUsedForSurvivalDuringWinter(x,y))", "all x y.((Bear(x) & ThickFur(y)) -> UsesForSurvivalDuringWinter(x,y))", "all x.(ThickFur(x) -> CanBeUsedByBears(x))", "all x.((ThickFur(x) & Bear(y)) -> CanUseForSurvivalDuringWinter(x,y))", "all x.((ThickFur(x) & Bear(x)) -> UsesForSurvivalDuringWinter(x))"]}
{"id": "entailmentbank_validation_456", "nl": "hunting is a kind of method for obtaining food.", "fol": "", "prediction": ["all x.(Hunting(x) -> (ObtainsFood(x) & ObtainsFood(x)))", "all x.(Hunting(x) -> (ObstacleForFood(x) & ObtainsFood(x)))", "all x y.((Hunting(x) & Food(y)) -> (Obtains(x,y) | Obtains(x,y)))", "all x y z.((Hunting(x) & Food(y) & Food(z)) -> (Obtains(x,y) & Obtains(x,z)))", "all x.(Hunting(x) -> (ObtainsFood(x) & ObtainsFood(x)))", "all x y.((Hunting(x) & Food(y)) -> MethodForObtaining(x,y))", "all x.(Hunting(x) -> (ObtainedFood(x) | ObtainedFood(x)))", "all x.(Hunting(x) -> ObtainsFood(x))", "exists x.(HuntingMethod(x) & ForObtainingFood(x))", "all x y.((Hunting(x) & Food(y)) -> Affordable(x,y))", "all x.(Hunting(x) -> (ObtainsFood(x) & ObtainsFood(x)))", "exists x.(HootingMethod(x) & ForObstainingFood(x))", "all x y.((Hunting(x) & Food(y)) -> (Obtained(x,y) | Obtained(x,y)))", "exists x.(HuntingMethod(x) & ForObtainingFood(x))", "all x y.((Hunting(x) & Food(y)) -> MethodForObtaining(x,y))", "all x.(Hooking(x) -> ObtainsFood(x))"]}
{"id": "entailmentbank_validation_457", "nl": "animals require food for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresFoodForSurvival(x))", "all x y.((Animal(x) & Food(y)) -> RequiresForSurvival(x,y))", "all x.(Animal(x) -> RequiresFoodForSurvival(x))", "(RequiresFoodForSurvival(animal)", "(all x.(Animal(x) -> RequiresFoodForSurvival(x)))", "all x.((Animal(x) & RequiresFood(x)) -> Survival(x))", "all x y.((Animal(x) & Food(y)) -> RequiresForSurvival(x,y))", "all x.(Animal(x) -> RequiresFoodForSurvival(x))", "all x.(Animal(x) -> RequiresFoodForSurvival(x))", "all x y.((Animal(x) & Food(y)) -> RequiresForSurvival(x,y))", "all x.(Animal(x) -> RequiresFood(x))", "all x y.((Animal(x) & Food(y)) -> RequiresForSurvival(x,y))", "all x.(Animal(x) -> (RequiresFood(x) & RequiresFood(x)))", "all x.(Animal(x) -> RequiresFoodForSurvival(x))", "all x.(Animal(x) -> RequiresFood(x))", "all x.(Animal(x) -> RequiresFoodForSurvival(x))"]}
{"id": "entailmentbank_validation_458", "nl": "some animals must hunt to survive.", "fol": "", "prediction": ["exists x.(Animal(x) & Hunts(x))", "exists x.(Animal(x) & MustHunt(x))", "exists x.(Animal(x) & HuntsToSurvive(x))", "exists x y.(Animal(x) & Hunt(y) & Survives(x,y))", "exists x.(Animal(x) & Hunts(x))", "exists x.(Animal(x) & HuntsToSurvive(x))", "exists x.(Animal(x) & MustHunt(x))", "exists x y.(Animal(x) & Hunt(y) & Survives(x,y))", "exists x y.(Animal(x) & Animal(y) & Hunts(x,y))", "exists x.(Animal(x) & Hunt(x))", "exists x.(Animal(x) & HuntsToSurvive(x))", "exists x.(Animal(x) & MustHunt(x))", "exists x.(Animal(x) & MustHuntToSurvive(x))", "exists x.(Animal(x) & MustHunt(x))", "exists x.(Animal(x) & Hunt(x))", "exists x.(Animal(x) & Hunts(x))"]}
{"id": "entailmentbank_validation_459", "nl": "hunting requires sensing prey.", "fol": "", "prediction": ["all x.(Hunting(x) -> RequiresSensingPrey(x))", "all x y.((Hunting(x) & Prey(y)) -> RequiresSensing(x,y))", "all x.(Hunting(x) -> RequiresSensingPrey(x))", "(all x.(Hunting(x) -> SensingPrey(x)))", "all x y.((Hunting(x) & Prey(y)) -> RequiresSensing(x,y))", "all x y z.((Hunting(x) & Prey(y) & Prey(z)) -> RequiresSensing(x,y,z))", "all x.(Hunting(x) -> RequiresSenseingPrey(x))", "(RequiresSensingPrey(h) -> HuntingRequires(h))", "all x y.((Hunting(x) & Prey(y)) -> RequiresSense(x,y))", "all x.(Hunting(x) -> RequiresSensingPrey(x))", "all x y.((Hunting(x) & Prey(y)) -> RequiresSensing(x,y))", "all x.(Hunting(x) -> RequiresSenseingPrey(x))", "all x y.((Hunting(x) & Prey(y)) -> RequiresSense(x,y))", "all x.(Hunting(x) -> RequiresSensingPrey(x))", "all x.(Hooting(x) -> RequiresSenseingPrey(x))", "all x.(Hunting(x) -> SensingPrey(x))"]}
{"id": "entailmentbank_validation_460", "nl": "better senses have a positive impact on an animal's survival.", "fol": "", "prediction": ["all x.(BetterSenses(x) -> PositiveImpactOnSurvival(x))", "all x y.((BetterSenses(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(BetterSenses(x) -> PositiveImpactOnAnimalSurvival(x))", "all x.((Senses(x) & Better(x)) -> PositiveImpactOnSurvival(x))", "all x y.((BetterSenses(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x y z.((BetterSenses(x) & Animal(y) & Survival(z)) -> PositiveImpact(x,y,z))", "all x y.((Senses(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(BetterSenses(x) -> PositiveImpactOnSurvival(x))", "all x.((Senses(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((BetterSenses(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x y z.((BetterSenses(x) & Animal(y) & Survival(z)) -> PositiveImpact(x,y,z))", "all x.((BetterSenses(x) & Animal(x)) -> PositiveImpactOnSurvival(x))", "all x.(BetterSenses(x) -> PositiveImpactOnAnimalSurvival(x))", "all x y.((BetterSenses(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(BetterSenses(x) -> PositiveImpactOnSurvival(x))", "all x y.((BetterSenses(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_validation_461", "nl": "hearing is used for sensing sound by animals.", "fol": "", "prediction": ["all x y.((Hearing(x) & Animal(y)) -> SensingSound(x,y))", "all x.(Hearing(x) -> SensingSound(x))", "all x y z.((Hearing(x) & Animal(y) & Sound(z)) -> Sense(x,y,z))", "all x.(Hearing(x) -> SensingSoundByAnimals(x))", "all x y.((Hearing(x) & Animal(y)) -> SensingSound(x,y))", "(SensingSoundByAnimals(hearing) -> UsedFor(hearing,hearing,animal))", "all x y.((HasHearing(x) & Animal(y)) -> SensingSound(x,y))", "all x.(Hearing(x) -> SensingSound(x,animals))", "all x y.((Hearing(x) & Animal(y)) -> UsedForSensingSound(x,y))", "all x y.((Hearing(x) & Animal(y)) -> SensingSound(x,y))", "all x.(Hearing(x) -> UsedForSensingSound(x))", "all x y z.((Hearing(x) & Animal(y) & Sound(z)) -> Sensing(x,y,z))", "all x.(HasHearing(x) -> SensingSoundByAnimals(x))", "all x y.((HasHearing(x) & Animal(y)) -> SensingSound(x,y))", "all x.(Hearing(x) -> SensingSoundByAnimals(x))", "all x.(HasHearing(x) -> SensingSoundByAnimals(x))"]}
{"id": "entailmentbank_validation_462", "nl": "better hearing has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x.(BetterHearing(x) -> PositiveImpactOnAnimalSurvival(x))", "all x y.((Animal(x) & BetterHearing(x)) -> PositiveImpactOnSurvival(x,y))", "all x.((BetterHearing(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(BetterHearing(x) -> PositiveImpactOnSurvival(x))", "all x.((Hearing(x) & Animal(x)) -> PositiveImpactOnSurvival(x))", "all x y z.((BetterHearing(x) & Animal(y) & Survival(z)) -> PositiveImpact(x,y,z))", "all x y.((Animal(x) & BetterHearing(x)) -> PositiveImpactOnSurvival(x,y))", "all x y.((BetterHearing(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x.((BetterHearing(x) & PositiveImpactOnSurvival(x)) -> BetterHearing(x))", "all x y z.((BetterHearing(x) & Animal(y) & Survival(z)) -> PositiveImpact(x,y,z))", "all x y.((Animal(x) & Animal(y)) -> BetterHearing(x,y))", "all x.(BetterHearing(x) -> PositiveImpactOnAnimalSurvival(x))", "all x y.((BetterHearing(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((Animal(x) & BetterHearing(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x.(BetterHearing(x) -> PositiveImpactOnSurvival(x))", "all x.(BetterHearing(x) -> PositiveImpactOnAnimalSurvival(x))"]}
{"id": "entailmentbank_validation_463", "nl": "senses are passed down from parent to offspring.", "fol": "", "prediction": ["all x y z.((Sensor(x) & Offspring(y) & Parent(z)) -> PassedDown(x,y,z))", "all x y.((Sensor(x) & Offspring(y)) -> PassedDown(x,y))", "all x y z.((Sense(x) & Parent(y) & Offspring(z)) -> PassedDown(x,y,z))", "all x y.((Senses(x) & Offspring(y)) -> PassedDown(x,y))", "all x.(SensesPassedDownFromParentToOffspring(x))", "all x.(SensesPassedFromParentToOffspring(x) -> PassedFromParentToOffspring(x))", "(PassedDownSensors(Sensors) & ParentToOffspring(Sensors))", "all x y z.((Sensor(x) & Offspring(y) & Parent(z)) -> PassedDown(x,y,z))", "all x y z.((Senses(x) & Parent(y) & Offspring(z)) -> PassedDown(x,y,z))", "all x y.((Sensor(x) & Offspring(y)) -> PassedDown(x,y))", "(PassedSensorsFromParentToOffspring(senses))", "all x.(SensesPassedDownFromParentToOffspring(x) -> PassedDownFromParentToOffspring(x))", "all x.(Sensors(x) -> PassedFromParentToOffspring(x))", "all x y.((Parent(x) & Offspring(y)) -> PassesSenses(x,y))", "all x.(SensesPassedFromParentToOffspring(x) -> PassedFromParentToOffspring(x))", "all x y z.((Sensor(x) & Offspring(y) & Parent(z)) -> PassedDown(x,y,z))"]}
{"id": "entailmentbank_validation_464", "nl": "inheriting is when an inherited characteristic is passed from parent to offspring by genetics / dna.", "fol": "", "prediction": ["all x y z.((Ethering(x) & Parent(y) & Offspring(z)) -> (PassedByGenetics(x,y,z) & PassedByDna(x,y)))", "all x y.((Elevant(x) & Parent(y) & Offspring(z)) -> PassedByGenetics(x,y,z))", "all x.((Earning(x) & Parent(x) & Offspring(x)) -> PassedByGenetics(x))", "all x y z.((Elevant(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassesCharacteristic(x,y,z))", "all x.(Embarrassing(x) -> (HasEarnedCharacteristic(x) & PassedByGenetics(x) & PassedByDna(x)))", "all x y.((Eleves(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassesCharacteristic(x,y,z))", "all x.((Earning(x) & Geneetics(x) & Dna(x)) -> PassedFromParentToOffspring(x))", "all x.(Embedded(x) -> (HasEarnedCharacteristic(x) & PassedByGenetics(x) & PassedByDna(x)))", "(EmbeddedCaracteristicPassedByGenetics(e) & PassedByDna(e))", "all x.((Parent(x) & Offspring(x) & Genetics(x) & Dna(x)) -> inheritsCharacteristic(x))", "(Alleging(e) -> (inheritedCharacteristic(e) & PassedByGenetics(e) & PassedByDna(e)))", "all x y z.((Earning(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassedCharacteristic(x,y,z))", "all x.((Inheriting(x) & Parent(x) & Offspring(x) & Genetics(x) & Dna(x)) -> PassesCharacteristic(x))", "all x y.((Inheriting(x) & Parent(y) & Offspring(y)) -> PassedByGenetics(x,y))", "all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & Genetics(z)) -> PassedBy(x,y,z))", "all x y.((Ethertaking(x) & Parent(y) & Offspring(z)) -> PassedByGenetics(x,y,z))"]}
{"id": "entailmentbank_validation_465", "nl": "senses are an inherited characteristic.", "fol": "", "prediction": ["all x.(Sense(x) -> ErasedCharacteristic(x))", "all x.(Sense(x) -> ErasedCharacteristic(x))", "all x.(Senses(x) -> ErasedCharacteristic(x))", "all x y.((Sense(x) & Sensation(y)) -> ErasedCharacteristic(x,y))", "(AllegedCharacteristic(Senses) -> HasSense(Senses))", "all x.(Sense(x) -> ErasedCharacteristic(x))", "all x y.((Sense(x) & GenealogicalCharacteristic(y)) -> HasSense(x,y))", "all x.(Sense(x) -> HearnedCharacteristic(x))", "(AllegedCharacteristic(Senses) -> HasSenses(Senses,Sens))", "all x.(Senses(x) -> ErasedCharacteristic(x))", "All x y.((Sense(x) & Sense(y)) -> ErasedCharacteristic(x,y))", "all x.(Sense(x) -> ErasedCharacteristic(x))", "(AllegedCharacteristic(Senses)", "all x.(Senses(x) -> HearnedCharacteristic(x))", "all x.(Sense(x) -> ErasedCharacteristic(x))", "all x.(Sense(x) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_validation_466", "nl": "hearing is an inherited characteristic.", "fol": "", "prediction": ["all x.(Hearing(x) -> ErasedCharacteristic(x))", "All x.(Hearing(x) -> HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHa", "all x.(HasHearing(x) -> ErasedCharacteristic(x))", "(HasHearing(x) & ErasedCharacteristic(x))", "all x.(Hearing(x) -> ErasedCharacteristic(x))", "all x y.((Hearing(x) & GenealogicalCharacteristic(y)) -> HasHearing(x,y))", "All x.((Hearing(x) & ErasedCharacteristic(x)) -> HasHearing(x))", "(HasHearing(x) & ErasedCharacteristic(x))", "all x.(Hearing(x) -> ErasedCharacteristic(x))", "all x.(HasHearing(x) -> ErasedCharacteristic(x))", "All x.(HasHearingCharacteristic(x) -> HasHearing(x))", "all x y.((Hearing(x) & GenealogicalCharacteristic(y)) -> HasHearing(x,y))", "all x y.((Hearing(x) & inheritedCharacteristic(y)) -> HasHearing(x,y))", "all x.(Hearing(x) -> HearnedCharacteristic(x))", "all x.(Hearing(x) -> ErasedCharacteristic(x))", "All x.(Hearing(x) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_validation_467", "nl": "better hearing is an inherited characteristic that has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x.(BetterHearing(x) -> (ErasedCharacteristic(x) & PositiveImpactOnSurvival(x)))", "all x y.((BetterHearing(x) & Animal(y)) -> (ErasedCharacteristic(x) & PositiveImpactOnSurvival(x,y)))", "all x.(BetterHearing(x) -> (HasPositiveImpactOnSurvival(x) & HasPositiveImpactOnSurvival(x)))", "all x y z.((BetterHearing(x) & Animal(y) & Animal(z)) -> (ErasedCharacteristic(x,y) & PositiveImpactOnSurvival(x,z)))", "all x.((Animal(x) & ErasedCharacteristic(x) & PositiveImpactOnSurvival(x)) -> BetterHearing(x))", "all x.(BetterHearing(x) -> (EarnedCharacteristic(x) & PositiveImpactOnSurvival(x)))", "all x y.((BetterHearing(x) & Animal(y)) -> (ErasedCharacteristic(x) & PositiveImpactOnSurvival(x,y)))", "all x.(BetterHearing(x) -> (ErasedCharacteristic(x) & PositiveImpactOnAnimalSurvival(x)))", "all x y.((Animal(x) & Animal(y)) -> BetterHearing(x,y))", "all x y.((BetterHearing(x) & Animal(y)) -> (EarnedCharacteristic(x,y) & PositiveImpactOnSurvival(x,y)))", "all x.((HasBetterHearing(x) & ErasedCharacteristic(x) & PositiveImpactOnSurvival(x)) -> BetterHearing(x))", "all x y z.((BetterHearing(x) & Animal(y) & Animal(z)) -> (ErasedCharacteristic(x,y) & PositiveImpactOnSurvival(x,z)))", "all x.((Animal(x) & ErasedCharacteristic(x) & PositiveImpactOnSurvival(x)) -> BetterHearing(x))", "all x.(BetterHearing(x) -> (ErasedCharacteristic(x) & PositiveImpactOnAnimalSurvival(x)))", "all x.(BetterHearing(x) -> (EarnedCharacteristic(x) & PositiveImpactOnAnimalSurvival(x)))", "all x y.((Animal(x) & Animal(y)) -> BetterHearing(x,y))"]}
{"id": "entailmentbank_validation_468", "nl": "as the ability of a living thing to survive / to reproduce increases, the likelihood of passing on its traits to its decendents will increase.", "fol": "", "prediction": ["all x y.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingOnTraitsToDecendents(y))", "all x.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingOnTreatmentsToDecendents(x))", "(all x.((LivingThing(x) & Survives(x)) -> Reproduces(x)) & all y.((LivingThing(y) & Decendents(y)) -> PassesTreats(y,x)))", "as the ability of a living thing to Survive/Reproduces Increases, the likelihood of passing on traits to its decendents increases.", "all x y.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityToPassOnTraits(y,x))", "all x y z.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x) & ProbabilityOfPassingOnTraits(y,z)) -> Increases(x))", "(all x.((LivingThing(x) & Survives(x) & Reproduces(x)) -> PassesTreatsToDecendents(x)))", "all x.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityToPassOnTraits(x))", "all x y z.((LivingThing(x) & AbilityToSurvive(x,y) & AbilityToReproduce(x,z)) -> ProbabilityOfPassingOnTraitsToDecendents(x,y,z))", "(all x.(AptitudeToSurvive(x) & AbilityToReproduce(x)) -> IncreasedLikelihoodOfPassingOnTalentsToDecendents(x))", "all x y.((LivingThing(x) & AbilityToSurvive(x,y) & AbilityToReproduce(x,y)) -> ProbabilityOfPassingOnTraitsToDecendents(x,y))", "all x y.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> LikelihoodOfPassingOnTraitsToDecendents(y))", "all x.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> LikelyPassesOnTraitsToDecendents(x))", "all x y.((LivingThing(x) & LifelikeTreatment(y)) -> (IncreasesAbilityToSurvive(x,y) & IncreasesAbilityToReproduce(x,y)))", "all x.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> LikelihoodOfPassingOnTreatmentsToDecendents(x))", "all x.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingOnTraitsToDecendents(x))"]}
{"id": "entailmentbank_validation_469", "nl": "animals with traits that positively impact their survival have a greater ability to survive / reproduce.", "fol": "", "prediction": ["all x.((Animal(x) & PositiveTreatment(x) & PositiveSurvival(x)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositiveSurvivalTraits(x)) -> GreaterAbilityToSurvive(x))", "all x y.((Animal(x) & Traits(y) & PositivelyImpactSurvival(y)) -> GreaterAbilityToSurvive(x,y))", "all x.((Animal(x) & PositivelyImpactsSurvival(x)) -> GreaterAbilityToSurvive(x))", "all x y.((Animal(x) & Traits(y) & PositivelyImpactsSurvival(y)) -> GreaterAbilityToSurvive(x,y))", "all x.((Animal(x) & PositiveTreatments(x) & PositiveSurvival(x)) -> GreaterAbilityToSurvive(x))", "all x y.((Animal(x) & PositiveTreatment(x) & PositiveSurvival(x)) -> GreaterAbilityToSurvive(x,y))", "all x.((Animal(x) & PositiveSurvivalTreatments(x)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositiveTraits(x) & PositiveSurvival(x)) -> GreaterAbilityToSurvive(x))", "all x y.((Animal(x) & Traits(x,y) & PositivelyImpactsSurvival(y)) -> GreaterAbilityToSurvive(x,y))", "all x.((Traits(x) & PositivelyImpactsSurvival(x)) -> GreaterAbilityToSurvive(x))", "all x y.((Animal(x) & PositivelyImpactsSurvival(x) & Animal(y)) -> GreaterAbilityToSurvive(x,y))", "all x.((Animal(x) & HasTraits(x) & PositivelyImpactsSurvival(x)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & HasPositiveSurvivalTraits(x)) -> GreaterAbilityToSurvive(x))", "all x.(TraitsPositiveToSurvival(x) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositivelyImpactsSurvival(x)) -> GreaterAbilityToSurvive(x))"]}
{"id": "entailmentbank_validation_470", "nl": "the decendants of an animal with traits that positively impacted their survival will also have traits that positivley impact their survival.", "fol": "", "prediction": ["all x y.((Decendant(x) & Animal(y) & PositivelyImpactsSurvival(x,y)) -> PositivelyImpactsSurvival(x,y))", "all x.((Decendant(x) & Animal(x) & PositivelyInfluentialTraits(x)) -> PositivelyInfluentialTraits(x))", "all x y.((Decendant(x) & Animal(y) & PositivelyInfluentialTails(x,y)) -> PositivelyInfluentialTails(x,y))", "all x.((Decendant(x) & Animal(x) & PositivelyImpactsSurvival(x)) -> PositivelyImpactsSurvival(x))", "(all x.((Decendant(x) & PositivelyInfluentialTraits(x)) -> PositivelyInfluentialTraits(x)))", "all x y z.((Decendant(x) & Animal(y) & Traits(z) & PositivelyImpactsSurvival(y,z)) -> HasTraits(x,y,z))", "all x.((Animal(x) & DecendantOfTalents(x) & PositivelyInfluencedSurvival(x)) -> PositivelyInfluencedSurvival(x))", "all x.((Decendant(x) & Animal(x) & PositivelyInfluencedSurvivalTraits(x)) -> PositivelyInfluencedSurvivalTraits(x))", "all x y.((Decendant(x) & Animal(y) & PositivelyImpactsSurvival(x,y)) -> PositivelyImpactsSurvival(x,y))", "all x y.((Decendant(x) & Animal(y) & PositivelyInfluencedSurvivalTraits(x,y)) -> PositivelyInfluencedSurvivalTraits(x,y))", "all x y.((Animal(x) & Decendant(x,y) & PositivelyInfluentialTraits(x)) -> PositivelyInfluentialTraits(y))", "all x.((DecendantOfAnimal(x) & PositivelyInfluentialTraits(x)) -> PositivelyInfluentialTraits(x))", "all x.((Decendant(x) & Animal(x) & PositiveTreatments(x) & PositiveTreatments(x)) -> PositiveTreatments(x))", "all x y.((Decendant(x) & Animal(y) & PositiveTreatment(x,y) & PositiveTreatment(x,y)) -> PositiveTreatment(x,y))", "all x y.((Animal(x) & Decendant(x,y) & PositivelyImpactsSurvival(x,y)) -> PositivelyImpactsSurvival(x,y))", "all x.((Animal(x) & Decendant(x) & PositivelyImpactsSurvival(x)) -> PositivelyImpactsSurvival(x))"]}
{"id": "entailmentbank_validation_471", "nl": "the decendants of an animal with better hearing will also have better hearing.", "fol": "", "prediction": ["all x y.((Decendant(x) & Animal(y) & BetterHearing(y)) -> BetterHearing(x,y))", "all x.((Decendant(x) & Animal(x) & BetterHearing(x)) -> BetterHearing(x))", "all x y.((Animal(x) & Decendant(x) & Animal(y) & BetterHearing(x)) -> BetterHearing(x))", "all x.((Animal(x) & DecendantOfBetterHearing(x)) -> BetterHearing(x))", "all x y z.((Decendant(x) & Animal(y) & BetterHearing(z) & BetterHearing(y) & Animal(z)) -> BetterHearing(x,y,z))", "all x y.((Decendant(x) & Animal(y) & BetterHearing(y)) -> BetterHearing(x,y))", "all x y.((Animal(x) & Decendant(x,y) & BetterHearing(y)) -> BetterHearing(x,y))", "all x.((Decendant(x) & Animal(x) & BetterHearing(x)) -> BetterHearing(x))", "(all x.((Animal(x) & BetterHearing(x)) -> BetterHearing(x)))", "all x y z.((Decendant(x) & Animal(y) & BetterHearing(z) & BetterHearing(y,z)) -> BetterHearing(y,z))", "all x.((Animal(x) & DecendantOfBetterHearing(x)) -> BetterHearing(x))", "all x y.((Decendant(x) & Animal(y) & BetterHearing(y)) -> BetterHearing(x,y))", "all x.((Decendant(x) & Animal(x) & BetterHearing(x)) -> BetterHearing(x))", "all x.((DecendantOfBetterHearing(x) & Animal(x)) -> BetterHearing(x))", "all x y.((Animal(x) & Decendant(x,y) & BetterHearing(y)) -> BetterHearing(x,y))", "all x.((Animal(x) & DecendantOfBetterHearing(x)) -> BetterHearing(x))"]}
{"id": "entailmentbank_validation_472", "nl": "mosquitos can sense carbon dioxide in the air.", "fol": "", "prediction": ["all x.(Mosquito(x) -> CanSenseCarbonDioxide(x))", "all x y.((Mouse(x) & Air(y)) -> SensitsCarbonDioxide(x,y))", "all x.(Mosquito(x) -> SensitsCarbonDioxide(x))", "all x y.((Mosquito(x) & Air(y)) -> CanSenseCarbonDioxide(x,y))", "all x.(Moskito(x) -> CanSenseCarbonDioxide(x))", "(all x.(Mosquito(x) -> SensitsCarbonDioxide(x)))", "all x y z.((Mosquito(x) & CarbonDioxide(y) & Air(z)) -> CanSense(x,y,z))", "all x y.((Mouse(x) & Air(y)) -> CanSenseCarbonDioxide(x,y))", "all x.(Mosquito(x) -> CanSenseCarbonDioxideInAir(x))", "all x.(Mouse(x) -> CanSenseCarbonDioxide(x))", "all x.(Mosquito(x) -> (SensesCarbonDioxide(x) & InAir(x)))", "all x y.((Mosquito(x) & Air(y)) -> SensitsCarbonDioxide(x,y))", "all x y.((Mouse(x) & Air(y)) -> SenseCarbonDioxide(x,y))", "all x.(Moskito(x) -> CanSenseCarbonDioxideInAir(x))", "all x.(Mouse(x) -> SensitsCarbonDioxide(x))", "all x.(Moustique(x) -> Sensitor(x,carbonDioxide,Air))"]}
{"id": "entailmentbank_validation_473", "nl": "animals are a source of carbon dioxide by exhaling.", "fol": "", "prediction": ["all x.(Animal(x) -> SourceOfCarbonDioxide(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByExhaling(x))", "all x y.((Animal(x) & CarbonDioxide(y) & Exhaling(x,y)) -> Source(x,y))", "all x.((Animal(x) & Exhale(x)) -> SourceOfCarbonDioxide(x))", "all x y.((Animal(x) & Exhaling(y)) -> SourceOfCarbonDioxide(x,y))", "all x.(Animal(x) -> SourceOfCarbonDioxide(x))", "all x y.((Animal(x) & CarbonDioxide(y) & Exhale(x,y)) -> Source(x,y))", "all x.(Animal(x) -> SourceOfCarbonDioxideByExhaling(x))", "all x.((Animal(x) & Exhale(x)) -> SourceOfCarbonDioxide(x))", "all x y.((Animal(x) & CarbonDioxide(y) & Exhaling(x)) -> Source(x,y))", "all x y.((Animal(x) & Exhaling(y)) -> SourceOfCarbonDioxide(x,y))", "all x.(Animal(x) -> SourceOfCarbonDioxide(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByExhaling(x))", "all x.(Animal(x) -> CarbonDioxideSource(x))", "all x.(Animal(x) -> SourceOfCarbonDioxide(x))", "all x.(Animal(x) -> SourceOfCO2ByExhaling(x))"]}
{"id": "entailmentbank_validation_474", "nl": "mosquitos sense animals by sensing their carbon dioxide emissions.", "fol": "", "prediction": ["all x y.((Mosquito(x) & Animal(y)) -> SenseBy(x,y))", "all x.(Mosquito(x) -> (SensesAnimals(x) & SensingCarbonDioxideEmissions(x)))", "all x y.((Mosquito(x) & Animal(y) & SensingCarbonDioxideEmissions(x,y)) -> Sense(x,y))", "all x y z.((Mosquito(x) & Animal(y) & CarbonDioxideEmission(z)) -> Sense(x,y,z))", "(SensingCarbonDioxideEmissions(mosquito) -> SenseAnimals(mosquito))", "all x y.((Mouse(x) & Animal(y)) -> SenseBy(x,y))", "all x.(Mosquito(x) -> (SensesAnimals(x) & SensitsCarbonDioxideEmissions(x)))", "all x.(Moskito(x) -> (SensesAnimals(x) & SensitsCarbonDioxideEmissions(x)))", "all x y z.((Mosquito(x) & Animal(y) & CarbonDioxideEmissions(z)) -> Sense(x,y,z))", "all x.(Mouse(x) -> (SensesAnimals(x) & SensingCarbonDioxideEmissions(x)))", "all x y.((Mouse(x) & Animal(y)) -> SensiteByCarbonDioxideEmissions(x,y))", "all x.(Moskito(x) -> (SensesAnimals(x) & SensingCarbonDioxideEmissions(x)))", "all x y z.((Mouse(x) & Animal(y) & CarbonDioxideEmissions(z)) -> Sense(x,y,z))", "all x y.((Mouse(x) & Animal(y) & SensingCarbonDioxide(x,y)) -> Sense(x,y))", "all x.(Mosquito(x) -> (SensesAnimals(x) & SensingCarbonDioxideEmissions(x)))", "all x.(Mosquito(x) -> (SensesAnimals(x) & SensitsCarbonDioxideEmissions(x)))"]}
{"id": "entailmentbank_validation_475", "nl": "living things eat their food source.", "fol": "", "prediction": ["all x.(LivingThing(x) -> EatsFoodSource(x))", "all x.((LivingThing(x) & EatsFoodSource(x)) -> EatsFoodSource(x))", "all x y.((LivingThing(x) & FoodSource(y)) -> Eats(x,y))", "all x.(LivingThing(x) -> EatsFoodSource(x))", "all x y z.((LivingThing(x) & FoodSource(y) & FoodSource(z) & Eats(x,y,z)) -> Eats(x,y,z))", "all x.((LivingThing(x) & FoodSource(x)) -> Eats(x,y))", "all x y.((LivingThing(x) & FoodSource(y)) -> Eats(x,y))", "all x.(LivingThing(x) -> EatsFoodSource(x))", "all x y.((LivingThing(x) & FoodSource(y)) -> Eats(x,y))", "exists x.(Living(x) & EatsFoodSource(x))", "all x.((LivingThing(x) & EatsFoodSource(x)) -> LivesIn(x))", "all x y.((LivingThing(x) & FoodSource(y)) -> Eats(x,y))", "all x.(LivingThing(x) -> EatsFoodSource(x))", "all x y.((LivingThing(x) & FoodSource(y)) -> Eat(x,y))", "exists x.(LivingThing(x) & EatsFoodSource(x))", "exists x.(LivingThing(x) & EatsFoodSource(x))"]}
{"id": "entailmentbank_validation_476", "nl": "mosquitos eat blood of animals.", "fol": "", "prediction": ["all x.(Mosquito(x) -> EatsBloodOfAnimals(x))", "all x y.((Mosquito(x) & Animal(y)) -> EatsBlood(x,y))", "all x y.((Mouse(x) & Animal(y)) -> EatsBlood(x,y))", "all x.(Mouse(x) -> EatsBloodOfAnimals(x))", "all x.(Mosquito(x) -> EatsBloodOfAnimals(x))", "all x y z.((Mouse(x) & Animal(y) & Blood(z)) -> Eats(x,y,z))", "(EatsBlood(mouses) & Animal(animal))", "all x y.((Mouse(x) & Animal(y)) -> EatsBlood(x,y))", "all x y z.((Mosquito(x) & Animal(y) & Blood(z)) -> Eats(x,y,z))", "(all x.(Mosquito(x) -> EatsBlood(x,animal)))", "all x.(Mosquito(x) -> EatsBloodOfAnimals(x))", "all x.(Mouse(x) -> EatsBloodOfAnimals(x))", "all x y.((Mouse(x) & Animal(y)) -> EatsBlood(x,y))", "all x.(Moskito(x) -> EatsBloodOfAnimals(x))", "all x.(Mosquito(x) -> EatsBlood(x))", "all x y.((Mouse(x) & Animal(y)) -> EatsBlood(x,y))"]}
{"id": "entailmentbank_validation_477", "nl": "animals are a source of food for mosquitos.", "fol": "", "prediction": ["all x.(Animal(x) -> SourceOfFoodForMouses(x))", "all x y.((Animal(x) & Mosquito(y)) -> SourceOfFood(x,y))", "all x.(Animal(x) -> SourceOfFood(x,Mosquitos))", "all x y z.((Animal(x) & Mosquito(y) & FoodSource(z)) -> SourceOf(x,y,z))", "all x y.((Animal(x) & Mosquito(y)) -> SourceOfFood(x,y))", "(SourceOfFood(animal,mosquitos))", "all x.(Animal(x) -> SourceOfFoodForMosquitos(x))", "all x y z.((Animal(x) & Mosquito(y) & FoodSource(z)) -> SourceOfFood(x,y,z))", "all x y.((Animal(x) & Mosquito(y)) -> SourceOfFood(x,y))", "all x.(Animal(x) -> FoodSourceForMouses(x))", "all x.(Animal(x) -> SourceOfFood(x))", "all x.(Animal(x) -> (SourceOfFood(x,Mosquitos)))", "all x y.((Animal(x) & Mosquito(y)) -> SourceOfFoodFor(x,y))", "all x.(Animal(x) -> SourceOfFoodForMouses(x))", "all x y.((Animal(x) & Mosquito(y)) -> SourceOfFood(x,y))", "all x.(Animal(x) -> FoodSourceForMosquitos(x))"]}
{"id": "entailmentbank_validation_478", "nl": "sensing food has a positive impact on finding food.", "fol": "", "prediction": ["all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))", "all x y.((SensingFood(x) & Food(y)) -> PositiveImpactOnFinding(x,y))", "all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))", "all x y z.((SensingFood(x) & Food(y) & Food(z)) -> PositiveImpactOnFinding(x,y,z))", "all x.(SensesFood(x) -> PositiveImpactOnFindingFood(x))", "all x y.((SensingFood(x) & Food(y)) -> PositiveImpactOnFinding(x,y))", "all x y.((SensesFood(x) & Food(y)) -> PositiveImpactOnFinding(x,y))", "all x.(SensingFood(x) -> PositiveImpactOnFollowingFood(x))", "all x.((SensingFood(x) & PositiveImpactOnFindingFood(x)) -> PositiveImpactOnFindingFood(x))", "all x y.((SensingFood(x) & Food(y)) -> PositiveImpactOnFollowing(x,y))", "all x.(SensesFood(x) -> PositiveImpactOnFindingFood(x))", "all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))", "all x y.((SensingFood(x) & Food(y)) -> PositiveImpactOnFindingFood(x,y))", "all x.(SensingFood(x) -> PositiveImpactOnFollowingFood(x))", "all x y.((SensingFood(x) & Food(y)) -> PositiveImpact(x,y))", "all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))"]}
{"id": "entailmentbank_validation_479", "nl": "sensing animals has a positive impact on a mosquito's ability to find food.", "fol": "", "prediction": ["all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFacilityToFindFood(x,y))", "all x.(SensingAnimals(x) -> PositiveImpactOnMosquitos(x))", "all x y z.((SensingAnimals(x) & Mosquito(y) & Food(z)) -> PositiveImpactOn(x,y,z))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFacility(x,y))", "all x.(SensesAnimals(x) -> PositiveImpactOnMosquitos(x))", "all x.(SensingAnimals(x) -> PositiveImpactOnMouse(x))", "all x y.((SensesAnimals(x) & Mosquito(y)) -> PositiveImpactOnFacilityToFindFood(x,y))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFindingFood(x,y))", "all x y z.((SensingAnimals(x) & Mosquito(y) & Food(z)) -> PositiveImpact(x,y,z))", "all x.(SensingAnimals(x) -> PositiveImpactOnMosquitosAbilityToFindFood(x))", "all x.(SensesAnimals(x) -> PositiveImpactOnMouses(x))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFood(x,y))", "all x.(SensesAnimals(x) -> PositiveImpactOnMosquitoFindingFood(x))", "all x y z.((SensingAnimals(x) & Mosquito(y) & Food(z)) -> PositiveImpactOn(x,y,z))", "all x.(SensingAnimals(x) -> PositiveImpactOnMouses(x))", "all x y.((SensingAnimals(x) & Moskito(y)) -> PositiveImpact(x,y))"]}
{"id": "entailmentbank_validation_480", "nl": "sensing carbon dioxide has a positive impact on a mosquito's ability to find food.", "fol": "", "prediction": ["all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFacility(x,y))", "all x.(SensingCarbonDioxide(x) -> PositiveImpactOnMouse(x))", "all x y z.((SensingCarbonDioxide(x) & Mosquito(y) & Food(z)) -> PositiveImpact(x,y,z))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFacilityToFindFood(x,y))", "all x.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFacility(x,y))", "all x.(SensingCarbonDioxide(x) -> PositiveImpactOnMosquitosFacilityToFindFood(x))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFindingFood(x,y))", "all x.(SensingCarbonDioxide(x) -> PositiveImpactOnMouseFindingFood(x))", "all x y z.((SensingCarbonDioxide(x) & Mosquito(y) & Food(z)) -> PositiveImpactOn(x,y,z))", "all x y.((Sensing(x,y) & CarbonDioxide(x)) -> PositiveImpactOnMosquitos(y))", "all x.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFood(x,y))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFood(x,y))", "all x.((SensingCarbonDioxide(x) & Moskito(x)) -> PositiveImpactOnFacilityToFindFood(x))", "all x.(SensingCarbonDioxide(x) -> PositiveImpactOnMosquitos(x))", "all x.(SensingCarbonDioxide(x) -> PositiveImpactOnMouseFacilityToFindFood(x))", "all x y.((SensingCarbonDioxide(x) & Moskito(y)) -> PositiveImpactOnFacilityToFindFood(x,y))"]}
{"id": "entailmentbank_validation_481", "nl": "if a living thing requires something then that something has a positive impact on that living thing.", "fol": "", "prediction": ["all x y.((LivingThing(x) & Requires(x,y)) -> PositiveImpact(x,y))", "all x.((LivingThing(x) & Requires(x)) -> PositiveImpact(x))", "all x.((LivingThing(x) & Requires(x,y)) -> PositiveImpact(x,y))", "all x y z.((LivingThing(x) & Requires(x,y) & LivingThing(z) & Requires(x,z)) -> PositiveImpact(x,z))", "all x y.((LivingThing(x) & LivingThing(y) & Requires(x,y)) -> PositiveImpact(x,y))", "all x y.((LivingThing(x) & Requires(x,y)) -> PositiveImpact(x,y))", "all x.(Requires(x,y) -> PositiveImpactOnLivingThing(x,y))", "all x.((Requires(x) & LivingThing(x)) -> PositiveImpact(x))", "all x.((LivingThing(x) & Requires(x)) -> PositiveImpactOn(x,livingThing))", "exists x.(LivingThing(x) & Requires(x,y) & HasPositiveImpact(x,z))", "all x y z.((LivingThing(x) & Requires(x,y) & LivingThing(z)) -> PositiveImpact(x,z))", "all x.((LivingThing(x) & Requires(x,y)) -> PositiveImpact(x,z))", "all x y.((LivingThing(x) & Requires(x,y)) -> PositiveImpact(x,y))", "all x y.((LivingThing(x) & LivingThing(y)) -> Requires(x,y))", "exists x.(LivingThing(x) & Requires(x,x)) -> PositiveImpact(x))", "all x y.((LivingThing(x) & Requires(x,y)) -> HasPositiveImpact(x,y))"]}
{"id": "entailmentbank_validation_482", "nl": "a living things require water for survival.", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresWaterForSurvival(x))", "all x.((LivingThing(x) & RequiresWater(x)) -> RequiresWaterForSurvival(x))", "all x y.((LivingThing(x) & Water(y)) -> RequiresForSurvival(x,y))", "all x.(LivingThing(x) -> RequiresWaterForSurvival(x))", "all x.((LivingThing(x) & RequiresWater(x)) -> Survival(x))", "all x y.((LivingThing(x) & Water(y)) -> RequiresForSurvival(x,y))", "all x.(LivingThing(x) -> RequiresWaterForSurvival(x))", "all x y.((LivingThing(x) & Water(y)) -> RequiresForSurvival(x,y))", "all x.(LivingThing(x) -> RequiresWaterForSurvival(x))", "all x y.((LivingThing(x) & Water(y)) -> RequiresForSurvival(x,y))", "exists x.(LivingTree(x) & RequiresWaterForSurvival(x))", "all x.(LivingThing(x) -> RequiresWater(x))", "exists x.(LivingThing(x) & RequiresWater(x))", "all x y.((LivingThing(x) & Water(y)) -> RequiresForSurvival(x,y))", "exists x.(LivingThing(x) & RequiresWater(x))", "exists x.(LivingThing(x) & RequiresWater(x))"]}
{"id": "entailmentbank_validation_483", "nl": "water has a positive impact on a living thing's survival.", "fol": "", "prediction": ["all x y.((Water(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(Water(x) -> PositiveImpactOnLivingThingSurvival(x))", "all x.((Water(x) & LivingThing(x)) -> PositiveImpactOnSurvival(x))", "all x y.((Water(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x y z.((Water(x) & LivingThing(y) & Survival(z)) -> PositiveImpactOn(x,y,z))", "all x.(Water(x) -> PositiveImpactOnSurvival(x))", "all x.((Water(x) & LivingThing(x)) -> PositiveImpactOnSurvival(x))", "all x y z.((Water(x) & LivingThing(y) & Water(z)) -> PositiveImpactOnSurvival(x,y,z))", "all x.(WaterImpactOnSurvival(x) -> PositiveImpactOnLivingThing(x))", "all x y.((Water(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(Water(x) -> PositiveImpactOnLivingThingSurvival(x))", "all x.((Water(x) & LivingThing(x)) -> PositiveImpactOnSurvival(x))", "all x y.((Water(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "exists x.(Water(x) & PositiveImpactOnSurvival(x))", "all x y.((Water(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((Water(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_validation_484", "nl": "increasing the availability of something that has a positive impact on a living thing's survivial can have a positive impact on that living thing's survival.", "fol": "", "prediction": ["all x y.((IncreasingAvailabilityOf(x,y) & PositiveImpactOnSurvivial(x)) -> PositiveImpactOnSurvivial(x,y))", "all x.((IncreasingAvailabilityOfAnother(x) & PositiveImpactOnLivedThingSurvivial(x)) -> PositiveImpactOnLivedThingSurvivial(x))", "all x.((IncreasingAvailabilityOfSomething(x) & PositiveImpactOnLivedThingSurvivial(x)) -> PositiveImpactOnLivedThingSurvivial(x))", "all x y.((IncreasingAvailabilityOf(x,y) & PositiveImpactOnLivedThingSurvivial(x)) -> PositiveImpactOnLivedThingSurvivial(x,y))", "all x y z.((IncreasingAvailabilityOfSomething(x) & PositiveImpactOnLivedThingsSurvivial(x) & LivingThingsSurvivial(y) & LivingThingsSurvivial(z) & PositiveImpactOnSurvivial(x,y,z)) -> PositiveImpactOnSurvivial(x,y,z))", "all x y z.((IncreasingAvailabilityOfAnother(x) & PositiveImpactOnLivedThingsSurvivial(x) & LivingThingsSurvivial(y) & LivingThingsSurvivial(z)) -> PositiveImpactOnSurvivial(x,y,z))", "all x.((IncreasingAvailabilityOf(x) & PositiveImpactOnLivedThingsSurvivial(x)) -> PositiveImpactOnLivedThingsSurvivial(x))", "all x y.((IncreasingAvailabilityOfSomething(x) & PositiveImpactOnLivingThingsSurvivial(x)) -> PositiveImpactOnLivingThingsSurvivial(y))", "all x y.((IncreasedAvailability(x) & PositiveImpactOnSurvivial(x) & LivingThing(y)) -> PositiveImpactOnSurvivial(x,y))", "all x.((IncreasingAvailabilityOf(x) & PositiveImpactOnLivedThingSurvivial(x)) -> PositiveImpactOnLivedThingSurvivial(x))", "all x.((IncreasedAvailabilityOf(x) & PositiveImpactOnLivedThingSurvivial(x)) -> PositiveImpactOnLivedThingSurvivial(x))", "all x y.((IncreasingAvailabilityOfAnother(x) & PositiveImpactOnLivedThingSurvivial(x)) -> PositiveImpactOnLivedThingSurvivial(y))", "all x y.((LivingThing(x) & PositiveImpactOnSurvivial(x,y)) -> PositiveImpactOnSurvivial(x,y))", "all x.((IncreasingAvailabilityOfAnother(x) & PositiveImpactOnLivedThingSurvivial(x)) -> PositiveImpactOnLivedThingSurvivial(x))", "all x.(IncreasingAvailabilityOfSomething(x) -> PositiveImpactOnLivedThingsSurvivial(x))", "all x.((IncreasingAvailabilityOfAnother(x) & PositiveImpactOnLivedThingsSurvivial(x)) -> PositiveImpactOnLivedThingsSurvivial(x))"]}
{"id": "entailmentbank_validation_485", "nl": "increasing the availability of water for a living thing has a positive impact on that living thing's survival.", "fol": "", "prediction": ["all x y.((LivingThing(x) & LivingThing(y)) -> IncreasesWaterAvailability(x,y))", "all x.((LivingThing(x) & IncreasedWaterAvailability(x)) -> PositiveImpactOnSurvival(x))", "all x.(IncreasedWaterAvailability(x) -> PositiveImpactOnSurvival(x))", "all x y z.((LivingThing(x) & WaterAvailability(y) & LivingThing(z) & Increases(x,y)) -> PositiveImpactOnSurvival(x,z))", "all x.((IncreasedWaterAvailability(x) & LivingThing(x)) -> PositiveImpactOnSurvival(x))", "all x y.((LivingThing(x) & LivingThing(y)) -> IncreasesWaterAvailability(x,y))", "all x.(IncreasingWaterAvailability(x) -> PositiveImpactOnSurvival(x))", "all x y.((LivingThing(x) & LivingThing(y)) -> IncreasedWaterAvailabilityPositiveImpactOnSurvival(x,y))", "all x y.((LivingThing(x) & LivingThing(y) & IncreasesWaterAvailability(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x y z.((LivingThing(x) & WaterAvailability(y) & LivingThing(z)) -> PositiveImpactOnSurvival(x,y,z))", "all x y.((LivingThing(x) & WaterAvailability(y) & Increased(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x.((LivingThing(x) & IncreasedWaterAvailability(x)) -> PositiveImpactOnSurvival(x))", "all x y z.((LivingThing(x) & WaterAvailability(y) & LivingThing(z) & Increased(y,z)) -> PositiveImpactOnSurvival(x,y,z))", "all x.(IncreasedWaterAvailability(x) -> PositiveImpactOnSurvival(x))", "all x y.((LivingThing(x) & LivingThing(y) & IncreasedWaterAvailability(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x.((IncreasingWaterAvailability(x) & LivingThing(x)) -> PositiveImpactOnSurvival(x))"]}
{"id": "entailmentbank_validation_486", "nl": "storing something is a kind of method for increasing the availability of something.", "fol": "", "prediction": ["all x.(Stores(x) -> IncreasesAvailabilityOf(x))", "all x y.((Stores(x) & Something(y)) -> IncreasesAvailability(x,y))", "all x.(StoresSomething(x) -> IncreasesAvailabilityOfSomething(x))", "all x.(Stores(x) -> IncreasesAvailabilityOfSomething(x))", "all x y.((Stores(x) & Something(y)) -> IncreasesAvailabilityOf(x,y))", "all x y.((Stores(x,y) & Something(y)) -> IncreasesAvailability(x,y))", "all x.((Stores(x) & Something(x)) -> IncreasesAvailability(x))", "all x y z.((Stores(x) & Something(y) & Method(z)) -> IncreasesAvailability(z))", "all x.(StoresSomething(x) -> IncreasesAvailabilityOfSomething(x))", "all x.(Storing(x) -> IncreasesAvailabilityOfSomething(x))", "all x y z.((Stores(x,y) & Something(z)) -> IncreasesAvailability(x,z))", "all x y.((Stores(x) & Something(y)) -> IncreasesAvailability(x,y))", "all x y.((Stores(x,y) & Something(y)) -> IncreasesAvailabilityOf(x,y))", "all x y.((Storing(x) & Something(y)) -> IncreasesAvailability(x,y))", "exists x.(Storing(x) & IncreasesAvailabilityOf(x,y))", "exists x.(Stores(x) & IncreasesAvailability(x))"]}
{"id": "entailmentbank_validation_487", "nl": "storing water has a positive impact on a living thing's survival by increasing the availability of water.", "fol": "", "prediction": ["all x y.((StoresWater(x) & LivingThing(y)) -> (PositiveImpactOnSurvival(x,y) & IncreasesWaterAvailability(x,y)))", "all x.(StoresWater(x) -> (PositiveImpactOnLivingThingSurvival(x) & IncreasesWaterAvailability(x)))", "all x.((StoresWater(x) & PositiveImpactOnLivingThingSurvival(x) & IncreasesWaterAvailability(x)) -> PositiveImpactOnSurvival(x))", "all x y z.((StoresWater(x) & LivingThing(y) & Water(z)) -> (PositiveImpactOnSurvival(x,y,z) & IncreasesAvailability(x,z)))", "all x y.((StoresWater(x) & LivingThing(y)) -> (PositiveImpactOnSurvival(x,y) & IncreasesWaterAvailability(x,y)))", "all x.(StoresWater(x) -> (PositiveImpactOnLivingThingSurvival(x) & IncreasesWaterAvailability(x)))", "all x.((StoresWater(x) & PositiveImpactOnSurvival(x) & IncreasesWaterAvailability(x)) -> PositiveImpactOnLivingThing(x))", "all x y.((StoresWater(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((StoresWater(x) & LivingThing(y) & IncreasesWaterAvailability(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x.(StoresWater(x) -> (PositiveImpactOnLivedThingSurvival(x) & IncreasesWaterAvailability(x)))", "all x y.((StoringWater(x) & LivingThing(y)) -> (PositiveImpactOnSurvival(x,y) & IncreasesWaterAvailability(x,y)))", "all x y z.((StoresWater(x) & LivingThing(y) & Water(z)) -> (PositiveImpactOnSurvival(x,y,z) & IncreasesAvailability(x,y,z)))", "all x.((StoresWater(x) & PositiveImpactOnLivingThingSurvival(x)) -> IncreasesWaterAvailability(x))", "all x.(StoresWater(x) -> (PositiveImpactOnSurvival(x) & IncreasesWaterAvailability(x)))", "all x.(StoresWater(x) -> (IncreasesWaterAvailability(x) & PositiveImpactOnSurvival(x)))", "all x y.((StoredWater(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_validation_488", "nl": "dry means low in amount of water.", "fol": "", "prediction": ["all x.(Dry(x) -> LowInWater(x))", "all x.(Dry(x) -> LowWaterAmount(x))", "(Dry(d) -> LowInWater(d))", "(Dry(x) -> LowWaterAmount(x))", "all x.(Dry(x) -> LowInWater(x))", "all x y.(Dry(x) -> LowInWater(x,y))", "all x.(Dry(x) -> LowWaterAmount(x))", "all x.(Dry(x) -> LowAmountOfWater(x))", "wet means lowinwater(dough(d))", "all x y.(Dry(x) -> LowInWater(y))", "all x y.(Dry(x) -> LowInWater(x,y))", "all x.(Dry(x) -> LowInWater(x))", "all x.(Dry(x) -> LowInWater(x))", "all x.(Drought(x) -> LowInWater(x))", "all x.(Dust(x) -> LowInWater(x))", "all x.(Dry(x) -> LowWaterAmount(x))"]}
{"id": "entailmentbank_validation_489", "nl": "as dryness increases in an environment, the available water in that environment will decrease.", "fol": "", "prediction": ["all x y.((Environment(x) & Environment(y) & IncreasedDryness(x,y)) -> DecreasedWater(x,y))", "all x y.((Dryness(x) & Environment(y) & Increases(x,y)) -> DecreasesWater(x,y))", "all x y z.((Dryness(x) & Environment(y) & Environment(z) & Increases(x,y)) -> DecreasesWater(y,z))", "all x.((Dryness(x) & Environment(x)) -> DecreasedWater(x))", "all x.((DrynessIncreases(x) & Environment(x)) -> AvailableWaterDecreases(x))", "all x.(DrynessIncreasesInEnvironment(x) -> AvailableWaterDecreasesInEnvironment(x))", "all x y.((Environment(x) & Environment(y) & IncreasesDryness(x,y)) -> DecreasesWaterAvailability(x,y))", "(all x.(DrynessIncreasesInEnvironment(x) -> DecreasedWater(x)))", "all x.((Environment(x) & IncreasedDryness(x)) -> DecreasedWater(x))", "all x y.((Dryness(x) & Environment(y) & Increases(x,y)) -> DecreasesWater(x,y))", "as dryness increases in environment, availablewaterDecreases.", "all x y z.((Dryness(x) & Environment(y) & Environment(z) & Increases(x,y)) -> DecreasesWater(x,z))", "all x y.((Environment(x) & IncreasedDryness(x)) -> DecreasedWater(y))", "(all x.(DrynessIncreasesInEnvironment(x) -> DecreasesWaterAvailability(x)))", "all x.(DrynessIncreasesInEnvironment(x) -> AvailableWaterDecreasesInEnvironment(x))", "as dryness increases in environment, availablewaterDecreases."]}
{"id": "entailmentbank_validation_490", "nl": "a dry environment is low in availability of water.", "fol": "", "prediction": ["all x.(DryEnvironment(x) -> LowWaterAvailability(x))", "all x.(DryEnvironment(x) -> LowAvailabilityOfWater(x))", "all x.((DryEnvironment(x) & LowWaterAvailability(x)) -> Low(x))", "all x y.((DryEnvironment(x) & Water(y)) -> LowAvailability(x,y))", "all x.(DryEnvironment(x) -> LowWaterAvailability(x))", "all x y.((DryEnvironment(x) & WaterAvailability(y)) -> Low(x,y))", "all x.((DryEnvironment(x) & LowWaterAvailability(x)) -> LowWaterAvailability(x))", "all x.(DryEnvironment(x) -> LowAvailabilityOfWater(x))", "all x y.((DryEnvironment(x) & Water(y) & LowAvailability(x,y)) -> LowAvailability(x,y))", "all x y.((DryEnvironment(x) & WaterAvailability(y)) -> Low(x,y))", "all x.(DryEnvironment(x) -> LowWaterAvailability(x))", "all x.(DryEnvironment(x) -> LowAvailabilityOfWater(x))", "all x y.((DryEnvironment(x) & WaterAvailability(y)) -> Low(x))", "exists x.(DryEnvironment(x) & LowWaterAvailability(x))", "exists x.(DryEnvironment(x) & LowAvailabilityOfWater(x))", "exists x.(DryEnvironment(x) & LowWaterAvailability(x))"]}
{"id": "entailmentbank_validation_491", "nl": "storing water increases the water available to organisms in a dry environment.", "fol": "", "prediction": ["all x y.((StoresWater(x) & Organism(y)) -> IncreasesWaterAvailableInDryEnvironment(x,y))", "all x y z.((StoresWater(x) & Organism(y) & DryEnvironment(z)) -> IncreasesWaterAvailable(x,y,z))", "all x.(StoresWater(x) -> IncreasesWaterAvailableToOrganismsInDryEnvironment(x))", "all x.((StoresWater(x) & IncreasesWaterAvailableToOrganisms(x)) -> DryEnvironment(x))", "all x y.((StoresWater(x) & Organism(y)) -> IncreasesWaterAvailable(x,y))", "all x y.((StoresWater(x) & Organism(y) & DryEnvironment(y)) -> IncreasesWaterAvailable(x,y))", "all x y z.((StorageWater(x) & Organism(y) & DryEnvironment(z)) -> IncreasesWaterAvailable(x,y,z))", "all x y.((StoringWater(x) & Organism(y)) -> IncreasesWaterAvailableInDryEnvironment(x,y))", "all x.((StoresWater(x) & IncreasesWaterAvailableToOrganisms(x) & DryEnvironment(x)) -> IncreasesWaterAvailableToOrganisms(x))", "all x y z.((StoresWater(x) & Organism(y) & DryEnvironment(z)) -> IncreasesWaterAvailability(x,y,z))", "all x.(StoresWater(x) -> IncreasesWaterAvailableToOrganismsInDryEnvironment(x))", "all x.((StoresWater(x) & IncreasesWaterAvailability(x)) -> OrganismsInDryEnvironment(x))", "all x y.((StoresWater(x) & Organism(y)) -> IncreasesWaterAvailability(x,y))", "all x.(StoresWater(x) -> IncreasesWaterAvailability(x))", "all x y.((StoresWater(x) & Organism(y) & DryEnvironment(y)) -> IncreasesWaterAvailability(x,y))", "all x.(StoresWater(x) -> IncreasesWaterAvailability(x))"]}
{"id": "entailmentbank_validation_492", "nl": "adapting is when a living thing responds to a change in an environment.", "fol": "", "prediction": ["all x y.((LivingThing(x) & Environment(y) & RespondsToChange(x,y)) -> Adapting(x))", "all x.(Adapting(x) -> (LivingThing(x) & RespondsToChangeInEnvironment(x)))", "all x y z.((LivingThing(x) & Environment(y) & Environment(z) & RespondsToChange(x,y,z)) -> Adapting(x))", "all x.(Adapting(x) -> (LivingThing(x) & RespondsToChange(x)))", "all x y.((LivingThing(x) & Environment(y)) -> RespondsToChange(x,y))", "all x y.(Adapting(x) -> (LivingThing(x) & Environment(y) & RespondsToChange(x,y)))", "all x y.((LivingThing(x) & Environment(y) & RespondsToChange(x,y)) -> Adapting(x))", "all x y z.((LivingThing(x) & Environment(y) & Change(z)) -> RespondsTo(x,y,z))", "all x.(Adapting(x) -> (LivingThing(x) & RespondsToChange(x)))", "all x.(Adapting(x) -> (LivingThing(x) & RespondsToChangeInEnvironment(x)))", "all x.(Adapting(x) -> (LivingThingResponsesToChange(x) & InEnvironment(x)))", "exists x.(LivingThing(x) & RespondsToChange(x))", "all x y.(Adapting(x) -> (LivingThing(x) & Environment(y) & RespondsToChange(x,y)))", "all x.(Adapting(x) -> (LivingThing(x) & RespondsToChangeInEnvironment(x)))", "all x y z.((LivingThing(x) & Environment(y) & Change(z)) -> RespondsTo(x,y,z))", "exists x.(LivingThing(x) & RespondsToChange(x))"]}
{"id": "entailmentbank_validation_493", "nl": "storing water is an adaptation to a dry environment.", "fol": "", "prediction": ["all x.(StoresWater(x) -> AdaptationToDryEnvironment(x))", "all x.((StoresWater(x) & DryEnvironment(x)) -> AdaptationTo(x,y))", "all x y.((StoresWater(x) & DryEnvironment(y)) -> AdaptationTo(x,y))", "(StoresWater) -> AdaptationToDryEnvironment(x))", "all x.(StoresWater(x) -> AdaptationToDryEnvironment(x))", "all x.((StoresWater(x) & DryEnvironment(x)) -> AdaptationTo(x,y))", "all x y.((StoresWater(x) & DryEnvironment(y)) -> AdaptationTo(x,y))", "all x y.((StoringWater(x) & DryEnvironment(y)) -> AdaptationTo(x,y))", "all x.(StoresWater(x) -> AdaptationToDryEnvironment(x))", "all x.((StoresWater(x) & DryEnvironment(x)) -> AdaptationTo(x,y))", "all x y.((StoresWater(x) & DryEnvironment(y)) -> AdaptationTo(x,y))", "all x.(StoringWater(x) -> AdaptationToDryEnvironment(x))", "all x y.((StoresWater(x) & DryEnvironment(y)) -> Adaptation(x,y))", "all x.(StoresWater(x) -> AdaptationToDryEnvironment(x))", "all x.((StoresWater(x) & DryEnvironment(x)) -> Adaptation(x))", "all x y.((StoresWater(x) & DryEnvironment(y)) -> AdaptationTo(x,y))"]}
{"id": "entailmentbank_validation_494", "nl": "as the available water in an environment increases, the populations of organisms in that environment will increase.", "fol": "", "prediction": ["all x y.((Environment(x) & AvailableWater(x) & Environment(y)) -> PopulationIncrease(x,y))", "all x y z.((AvailableWater(x) & Environment(y) & Organism(z) & Increases(x,y)) -> PopulationInEnvironment(z,y))", "all x.((WaterAvailability(x) & Environment(x)) -> PopulationInEnvironment(x))", "all x y.((AsWaterAvailabilityInEnvironment(x) & OrganismPopulation(y)) -> Increases(y))", "as availablewaterInEnvironmentIncreases(x) -> PopulationInEnvironmentIncrease(x))", "all x y.((Environment(x) & AvailableWater(x,y)) -> PopulationIncrease(y))", "all x.((AvailabilityOfWater(x) & Environment(x)) -> PopulationInEnvironment(x))", "all x.((WaterAvailabilityInEnvironment(x) & Increases(x)) -> PopulationInEnvironment(x))", "(all x y.((AvailableWater(x) & Environment(y) & Increases(x,y)) -> PopulationInEnvironment(x,y)))", "all x y z.((AvailabilityOfWater(x) & Environment(y) & Organism(z) & Increases(x,y)) -> PopulationInEnvironment(x,z))", "all x.((AsWaterAvailabilityInEnvironmentIncreases(x) & PopulationInEnvironmentIncrease(x)) -> OrganismPopulationInEnvironmentIncrease(x))", "(all x.((WaterAvailabilityInEnvironment(x) & Increases(x)) -> PopulationInEnvironment(x)))", "all x y.((Environment(x) & AvailableWater(x) & Environment(y) & Increases(x,y)) -> PopulationInEnvironment(x,y))", "all x.((AvailabilityOfWater(x) & Environment(x) & Increases(x)) -> PopulationInEnvironment(x))", "all x y.((AsWaterAvailabilityInEnvironment(x) & Environment(y) & Increases(x,y)) -> PopulationInEnvironment(x,y))", "all x y z.((AvailableWater(x) & Environment(y) & OrganismPopulation(z) & Increases(x,y)) -> PopulationInEnvironment(z,y))"]}
{"id": "entailmentbank_validation_495", "nl": "an aquatic animal requires great amounts of water to thrive.", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWater(x))", "all x.((AquaticAnimal(x) & GreatAmountsOfWater(x)) -> Thrives(x))", "all x y.((AquaticAnimal(x) & Water(y)) -> RequiresGreatAmounts(x,y))", "all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWater(x))", "all x.((AquaticAnimal(x) & RequiresGreatAmountsOfWater(x)) -> Thrives(x))", "all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWaterToThrive(x))", "all x y.((AquaticAnimal(x) & Water(y)) -> RequiresGreatAmounts(x,y))", "all x.(AquaticAnimal(x) -> GreatAmountsOfWater(x))", "all x.((AquaticAnimal(x) & GreatAmountsOfWater(x)) -> Thrives(x))", "all x y.((AquaticAnimal(x) & Water(y)) -> RequiresToThrive(x,y))", "all x y.((AquaticAnimal(x) & GreatAmountsOfWater(y)) -> Thrives(x,y))", "all x.((AquaticAnimal(x) & RequiresGreatAmountsOfWater(x)) -> Thrives(x))", "all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWater(x))", "all x.(AquaticAnimal(x) -> GreatAmountsOfWater(x))", "all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWaterToThrive(x))", "exists x.(AquaticAnimal(x) & GreatAmountsOfWater(x))"]}
{"id": "entailmentbank_validation_496", "nl": "as water increases in an environment, the population of aquatic animals will increase.", "fol": "", "prediction": ["all x y.((Water(x) & Environment(y) & Increases(x,y)) -> PopulationIncreases(x,y))", "all x y.((WaterInEnvironment(x) & AquaticAnimal(y)) -> IncreasesPopulation(y,x))", "all x.((WaterInEnvironment(x) & IncreasesInEnvironment(x)) -> PopulationIncreases(x))", "all x y z.((Water(x) & Environment(y) & AquaticAnimal(z)) -> IncreasedPopulation(z,y))", "as water increases inEnvironment, population of aquaticAnimalsInEnvironment(s) will increase.", "all x y.((Water(x) & Environment(y) & IncreasesIn(x,y)) -> PopulationIncreases(x,y))", "all x.((WaterInEnvironment(x) & IncreasesInEnvironment(x)) -> PopulationIncreasesAquaticAnimals(x))", "all x y.((WaterInEnvironment(x) & AquaticAnimalPopulation(y)) -> Increases(y))", "as water increases inEnvironment, population of aquaticAnimalsInEnvironment(s) will increase.", "all x y z.((Water(x) & Environment(y) & AquaticAnimal(z)) -> IncreasedPopulation(z))", "all x y.((WaterInEnvironment(x) & AquaticAnimal(y) & IncreasesInEnvironment(x,y)) -> PopulationIncreases(y))", "all x.((WaterInEnvironment(x) & IncreasesInEnvironment(x)) -> PopulationAquaticAnimalsIncrease(x))", "all x.((WaterInEnvironment(x) & Increases(x)) -> PopulationIncreases(x))", "all x.(WaterInEnvironment(x) -> PopulationIncrease(x))", "(all x.(WaterInEnvironment(x) -> IncreasedPopulation(x)))", "all x.((WaterInEnvironment(x) & IncreasedInEnvironment(x)) -> IncreasedPopulationOfAquaticAnimals(x))"]}
{"id": "entailmentbank_validation_497", "nl": "a salamander is a kind of aquatic animal.", "fol": "", "prediction": ["all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x y.((Salamander(x) & AquaticAnimal(y)) -> AquaticAnimal(x))", "exists x y.(Salamander(x) & AquaticAnimal(y) & AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "exists x y.(Salamander(x) & AquaticAnimal(y) & AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "exists x y.(Salamander(x) & AquaticAnimal(y) & AnimatedBy(x,y))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))"]}
{"id": "entailmentbank_validation_498", "nl": "as water increases in an environment, the population of salamanders may increase.", "fol": "", "prediction": ["all x.((WaterIncreases(x) & Environment(x)) -> PopulationIncreases(x))", "all x y.((Water(x) & Environment(y) & Increases(x,y)) -> PopulationIncreases(x,y))", "all x.((WaterInEnvironment(x) & IncreasesInEnvironment(x)) -> PopulationIncreases(x))", "as water increases inEnvironment, the population of salamanders may increase.", "all x y.((WaterInEnvironment(x) & Salamander(y)) -> IncreasesPopulation(y))", "all x y.((Water(x) & Environment(y) & IncreasesIn(x,y)) -> PopulationIncreases(x,y))", "all x y z.((Water(x) & Environment(y) & Salamander(z) & IncreasesInEnvironment(x,y)) -> PopulationIncreases(z,y))", "all x y.((Salamander(x) & Water(y) & IncreasesInEnvironment(y,x)) -> PopulationIncreases(x))", "(all x.((WaterInEnvironment(x) & IncreasesInEnvironment(x)) -> IncreasesPopulation(x)))", "all x.((WaterIncreases(x) & Environment(x)) -> PopulationIncrease(x))", "all x.((WaterInEnvironment(x) & IncreasesInEnvironment(x)) -> PopulationIncrease(x))", "all x.(WaterInEnvironment(x) -> PopulationIncrease(x))", "(all x.(WaterInEnvironment(x) -> IncreasedPopulation(x)))", "all x y.((WaterInEnvironment(x) & SalamanderPopulation(y)) -> Increases(y,x))", "all x.((WaterIncreases(x) & Environment(x)) -> PopulationIncreases(x))", "all x.(WaterInEnvironment(x) -> PopulationIncrease(x))"]}
{"id": "entailmentbank_validation_499", "nl": "when a body of water receives more water than it can hold, a flood occurs.", "fol": "", "prediction": ["all x.((BodyOfWater(x) & ReceivesMoreWater(x) & CanHoldMoreWater(x)) -> FloodOccurs(x))", "all x y.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHold(x,y)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWaterThanCanHold(x)) -> FloodOccurs(x))", "all x y z.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHold(x,z) & MoreWater(y,z)) -> FloodOccurs(x))", "all x y.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHold(y)) -> FloodOccurs(x))", "all x y z.((BodyOfWater(x) & ReceivesMoreWaterThanCanHold(x,y) & Water(z) & MoreWaterThanCanHold(x,z)) -> FloodOccurs(x))", "all x y.((BodyOfWater(x) & ReceivesMoreWaterThanCanHold(x,y)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWater(x)) -> FloodOccurs(x))", "exists x.(BodyOfWater(x) & ReceivesMoreWaterThanCanHold(x) & FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWaterThanCanHold(x)) -> FloodOccurs(x))", "all x y.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHold(y,x)) -> FloodOccurs(x))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & ReceivesMoreWater(x,y)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWater(x) & CanHoldMoreWater(x)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWaterThanCanHold(x)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWater(x)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWaterThanCanHold(x)) -> FloodOccurs(x))"]}
{"id": "entailmentbank_validation_500", "nl": "as the amount of water in a body of water increases, the water levels will increase especially at the edge of that body of water.", "fol": "", "prediction": ["all x y.((BodyOfWater(x) & WaterAmount(y) & Increases(x,y)) -> WaterLevelsIncrease(x,y))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & IncreasesWaterAmount(x,y)) -> WaterLevelsIncrease(x,y))", "all x y z.((BodyOfWater(x) & WaterAmount(y) & EdgeOf(z)) -> IncreasesWaterLevels(x,y,z))", "all x.((BodyOfWater(x) & IncreasesWaterAmount(x)) -> WaterLevelsIncrease(x))", "as the amount of water increases in a body of water, water levels will increase especially at edge of that body of water.", "all x y z.((BodyOfWater(x) & WaterLevel(y) & EdgeOf(z) & Increases(x,y)) -> WaterLevelsIncrease(y,z))", "all x.((AmountOfWaterInBodyOfWater(x) & Increases(x)) -> WaterLevelsIncrease(x))", "all x y.((BodyOfWater(x) & WaterAmount(y) & Increases(x,y)) -> WaterLevelsIncrease(x))", "all x.((BodyOfWater(x) & IncreasedAmountOfWater(x)) -> IncreasedWaterLevelsAtEdge(x))", "all x.((BodyOfWater(x) & IncreasesWaterAmount(x)) -> WaterLevelsIncrease(x))", "(all x.(WaterAmountInBodyOfWater(x) -> IncreasesWaterLevels(x)))", "all x y.((BodyOfWater(x) & IncreasedWaterAmount(x)) -> WaterLevelsIncrease(x,y))", "all x y z.((BodyOfWater(x) & WaterAmount(y) & EdgeOf(z,y) & Increases(y,z)) -> WaterLevelsIncrease(z,y))", "all x.((AmountOfWaterInBodyOfWater(x) & Increases(x)) -> WaterLevelsIncrease(x))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & IncreasesWaterAmount(x,y)) -> WaterLevelsIncrease(x,y))", "all x.((BodyOfWater(x) & IncreasesWaterAmount(x)) -> WaterLevelsIncreasedAtEdge(x))"]}
{"id": "entailmentbank_validation_501", "nl": "a flood is a result of a large increase of water in a body of water.", "fol": "", "prediction": ["all x y.((Flood(x) & BodyOfWater(y)) -> LargeIncreaseOfWater(x,y))", "all x y z.((Flood(x) & LargeIncreaseOfWater(y) & BodyOfWater(z)) -> Flood(x))", "all x.(Flood(x) -> LargeIncreaseOfWater(x))", "all x y.((Flood(x) & BodyOfWater(y)) -> LargeIncreaseOfWater(x,y))", "all x.(Flood(x) -> (LargeIncreaseOfWater(x) & BodyOfWater(x)))", "all x.(Flood(x) -> (LargeIncreaseOfWater(x) & BodyOfWater(x)))", "all x y z.((Flood(x) & LargeIncreaseOfWater(y) & BodyOfWater(z)) -> FloodResult(x,y,z))", "all x y z.((Flood(x) & Water(y) & BodyOfWater(z)) -> LargeIncrease(x,y,z))", "all x.(Flood(x) -> (LargeIncreaseOfWater(x) & InBodyOfWater(x)))", "all x.(Liquid(x) -> (LargeIncreaseOfWater(x) & InBodyOfWater(x)))", "all x y.((Flood(x) & LargeIncreaseOfWater(y)) -> InBodyOfWater(x,y))", "all x y.((Flood(x) & BodyOfWater(y)) -> LargeIncreaseOfWater(x,y))", "all x y z.((Flood(x) & LargeIncreaseOfWater(y) & BodyOfWater(z) & In(x,y,z)) -> ResultsOf(x,y,z))", "exists x.(Flood(x) & LargeIncreaseOfWater(x) & InBodyOfWater(x))", "all x.(Flood(x) -> LargeIncreaseOfWater(x))", "all x y.((Flood(x) & BodyOfWater(y)) -> LargeIncreaseInWater(x,y))"]}
{"id": "entailmentbank_validation_502", "nl": "a body of water is a part of some environments.", "fol": "", "prediction": ["all x.(BodyOfWater(x) -> PartOfEnvironments(x))", "all x y.((BodyOfWater(x) & Environment(y)) -> PartOf(x,y))", "all x.(BodyOfWater(x) -> PartOfEnvironments(x))", "all x y z.((BodyOfWater(x) & Environment(y) & Environment(z)) -> PartOf(x,y,z))", "all x y.((BodyOfWater(x) & Environment(y)) -> PartOf(x,y))", "all x.(BodyOfWater(x) -> PartOfEnvironment(x))", "all x y.((BodyOfWater(x) & Environment(y)) -> PartOf(x,y))", "exists x.(BodyOfWater(x) & PartOfEnvironments(x))", "all x y.((BodyOfWater(x) & Environment(y)) -> PartOf(x,y))", "exists x.(BodyOfWater(x) & PartOfEnvironments(x))", "exists x.(BodyOfWater(x) & PartOfSomeEnvironments(x))", "all x y.((BodyOfWater(x) & Environment(y)) -> PartOf(x,y))", "exists x.(BodyOfWater(x) & PartOfEnvironment(x))", "exists x.(BodyOfWater(x) & PartOfSomeEnvironments(x))", "exists x.(BodyOfWater(x) & PartOfEnvironments(x))", "exists x.(BodyOfWater(x) & PartOf(x,y))"]}
{"id": "entailmentbank_validation_503", "nl": "a flood is a result of a large increase of water in an environment.", "fol": "", "prediction": ["all x y.((Flood(x) & Environment(y)) -> LargeIncreaseOfWater(x,y))", "all x.(Flood(x) -> LargeIncreaseOfWater(x))", "all x.(Flood(x) -> (LargeIncreaseOfWater(x) & InEnvironment(x)))", "all x y z.((Flood(x) & Water(y) & Environment(z)) -> LargeIncrease(x,y,z))", "all x y.((Flood(x) & Environment(y)) -> LargeIncreaseOfWater(x,y))", "all x.(Flood(x) -> LargeIncreaseOfWater(x))", "all x y z.((Flood(x) & Water(y) & Environment(z)) -> LargeIncrease(x,y,z))", "all x y z.((Flood(x) & LargeIncreaseOfWater(y) & Environment(z) & InEnvironment(x,z)) -> Flood(x))", "all x.(Liquid(x) -> (LargeIncreaseOfWater(x) & Environment(x)))", "all x.(Flood(x) -> LargeIncreaseOfWater(x))", "all x y.((Flood(x) & Environment(y) & LargeIncreaseOfWater(x,y)) -> Flood(x))", "all x y.((Flood(x) & Environment(y)) -> LargeIncreaseOfWater(x,y))", "all x.(Flood(x) -> LargeIncreaseOfWaterInEnvironment(x))", "all x y.((Flood(x) & LargeIncreaseOfWater(y) & Environment(x)) -> Flood(x))", "all x.(Flood(x) -> (LargeIncreaseOfWater(x) & Environment(x)))", "exists x.(Flood(x) & LargeWaterInEnvironment(x))"]}
{"id": "entailmentbank_validation_504", "nl": "a flood may cause the population of salamander to increase in an environment.", "fol": "", "prediction": ["all x y.((Flood(x) & Salamander(y)) -> IncreasedPopulation(y,Environment))", "all x.(Flood(x) -> IncreasedSalamanderPopulation(x))", "all x y.((Flood(x) & Salamander(y)) -> MayIncreasePopulation(x,y))", "all x.((Flood(x) & SalamanderPopulationInEnvironment(x)) -> Increased(x))", "all x.(Flood(x) -> (IncreasesSalamanderPopulation(x) & Environment(x)))", "all x y z.((Flood(x) & Salamander(y) & Environment(z)) -> IncreasedPopulation(y,z))", "all x y.((Flood(x) & Salamander(y)) -> IncreasesPopulationInEnvironment(y,x))", "all x y z.((Flood(x) & Salamander(y) & Environment(z)) -> (IncreasesPopulation(y,z) & InEnvironment(y,z)))", "all x.((Flood(x) & SalamanderPopulationInEnvironment(x)) -> IncreasesInEnvironment(x))", "all x.(Flood(x) -> (IncreasesSalamanderPopulation(x) & Environment(x)))", "all x y.((Flood(x) & Salamander(y)) -> (IncreasesPopulation(y,x)))", "all x.(Landfall(x) -> (IncreasedSalamanderPopulation(x) & Environment(x)))", "all x.(Flood(x) -> IncreasesSalamanderPopulation(x))", "all x y.((Flood(x) & Salamander(y) & Environment(z)) -> IncreasesPopulation(y,z))", "exists x.(Flood(x) & CausesPopulationInEnvironment(x,Salamander))", "all x y.((Flood(x) & SalamanderPopulation(y)) -> IncreasesInEnvironment(y,x))"]}
{"id": "entailmentbank_validation_505", "nl": "frogs / turtles / fish / mice / birds are kinds of animals.", "fol": "", "prediction": ["all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)) -> Animal(x))", "all x y.((Frog(x) & Turtle(y) & Fish(y) & Mouse(y) & Bird(y)) -> Animal(x))", "all x.((Frog(x) & Turtle(x) & Fish(x) & Mouse(x) & Bird(x)) -> Animal(x))", "all x y z.((Frog(x) & Turtle(y) & Fish(z) & Mouse(x) & Bird(x)) -> Animal(x))", "all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)) -> Animal(x))", "all x.(Frog(x) & (Turtle(x) | Fish(x) | Mouse(x) | Bird(x)))", "(Animal(frog) & Animal(tortoise) & Animal(fish) & Animal(mouse) & Animal(bird))", "(all x.(Frog(x) -> Animal(x)) & all y.(Turtle(y) & Animal(y)) & all z.(Fish(z) & Animal(z))) & all w.(Mouse(w) & Animal(w))))", "(all x.(Frog(x) -> (Turtle(x) & Fish(x))) & all y.(Mouse(y) & Bird(y)))", "(Animal(frogs) & Animal(ticks) & Animal(fish) & Animal(mouses))", "all x y.((Frog(x) & Turtle(y) & Fish(y) & Mouse(y)) -> (Animal(x) | Animal(x) & Animal(y)))", "all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)) -> Animal(x))", "all x.(Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x))", "all x y z.((Frog(x) & Turtle(y) & Fish(z) & Mouse(x)) -> Animal(x))", "(All x.(Frog(x) & (Turtle(x) | Fish(x) | Mouse(x) | Bird(x))) -> Animal(x))", "all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)) -> Animal(x))"]}
{"id": "entailmentbank_validation_506", "nl": "alligators eat frogs / turtles / fish / mice / birds.", "fol": "", "prediction": ["all x.(Alligator(x) -> (EatsFrogs(x) & EatsTurtles(x) & EatsFish(x) & EatsMouses(x) & EatsBirds(x)))", "all x y.((Alligator(x) & Frog(y)) -> Eats(x,y))", "all x y z.((Alligator(x) & Frog(y) & Turtle(z)) -> Eats(x,y,z))", "(EatsFrogs(all x) | EatsTurtles(x) | EatsFish(x) | EatsMouses(x) | EatsBirds(x)))", "all x.(Alligator(x) -> (EatsFrogs(x) | EatsTurtles(x) | EatsFish(x) | EatsMouses(x) | EatsBirds(x)))", "alligator(x) -> (EatsFrogs(x) & EatsTurtles(x) & EatsFish(x) & EatsMouses(x) & EatsBirds(x)))", "all x.(Alligator(x) -> (EatsFrogs(x) & EatsTurtles(x) & EatsFish(x) & EatsMouses(x) & EatsBirds(x)))", "all x y.((Alligator(x) & Frog(y) & Turtle(y)) | Fish(y) | Mouse(y) | Bird(y))", "all x.((Alligator(x) & EatsFrogs(x) & EatsTurtles(x) & EatsFish(x) & EatsMouses(x) & EatsBirds(x))", "all x.(Alligator(x) -> (Eats(x,frogs) & Eats(x,tortoise) & Eats(x,fish) & Eats(x,mouse) & Eats(x,birds)))", "(EatsFrogs(all x) & EatsTurtles(x) & EatsFish(x) & EatsMouses(x) & EatsBirds(x))", "all x.(Alligator(x) -> (EatsFrogs(x) | EatsTurtles(x) | EatsFish(x) | EatsMouses(x) | EatsBirds(x)))", "all x.(Alligator(x) -> Eats(x,frogs,tortoise,fish,mouse,birds))", "all x y.((Alligator(x) & Frog(y)) | Turtle(y) | Fish(y) | Mouse(y) | Bird(y)))", "all x y z.((Alligator(x) & Frog(y) & Turtle(z)) -> Eats(x,y,z))", "all x y z.((Alligator(x) & Frog(y) & Turtle(z) & Fish(z)) -> Eats(x,y,z))"]}
{"id": "entailmentbank_validation_507", "nl": "alligators eat animals.", "fol": "", "prediction": ["all x.(Alligator(x) -> EatsAnimals(x))", "all x y.((Alligator(x) & Animal(y)) -> Eats(x,y))", "all x.(Alligator(x) -> EatsAnimals(x))", "alligator(x) -> EatsAnimals(x))", "all x.(Alligator(x) -> EatsAnimals(x))", "(all x.(Alligator(x) -> EatsAnimals(x)))", "all x y.((Alligator(x) & Animal(y)) -> Eats(x,y))", "all x.(Alligator(x) -> EatAnimals(x))", "all x y.((Alligator(x) & Animal(y)) -> Eats(x,y))", "all x.(Aligator(x) -> EatsAnimals(x))", "all x.(Alligator(x) -> EatsAnimals(x))", "all x y.((Alligator(x) & Animal(y)) -> Eats(x,y))", "all x.(Alligator(x) -> EatAnimals(x))", "all x y.((Alligator(x) & Animal(y)) -> Eat(x,y))", "all x.(Alligator(x) -> EatsAnimals(x))", "all x.(Alligator(x) -> EatAnimals(x))"]}
{"id": "entailmentbank_validation_508", "nl": "a predator eats other animals for food.", "fol": "", "prediction": ["all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "all x y z.((Predator(x) & Animal(y) & Animal(z)) -> EatsForFood(x,y,z))", "all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "all x.(Predator(x) -> EatsAnimalsForFood(x))", "all x y z.((Predator(x) & Animal(y) & Animal(z)) -> EatsForFood(x,y,z))", "all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "all x.(Predator(x) -> EatsAnimalsForFood(x))", "all x y z.((Predator(x) & Animal(y) & Food(z)) -> EatsForFood(x,y,z))", "exists x.(Predator(x) & EatsOtherAnimals(x))", "exists x.(Predator(x) & EatsAnimalsForFood(x))", "all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "all x y z.((Predator(x) & Animal(y) & Animal(z)) -> EatsForFood(x,y,z))", "exists x.(Predator(x) & EatsOtherAnimalsForFood(x))", "all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "exists x.(Predator(x) & EatsAnimalsForFood(x))", "all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))"]}
{"id": "entailmentbank_validation_509", "nl": "alligators are a kind of predator.", "fol": "", "prediction": ["all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x y.((Alligator(x) & Predator(y)) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x y.((Alligator(x) & Predator(y)) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x y.((Alligator(x) & Predator(y)) -> Predator(x))", "all x.(Aligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x y.((Alligator(x) & Predator(y)) -> Predator(x,y))", "all x.(Alligator(x) -> Predator(x))", "all x.(Aligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))"]}
{"id": "entailmentbank_validation_510", "nl": "as the population of prey decreases, competition between predators will increase.", "fol": "", "prediction": ["all x y.((Predator(x) & Prey(y) & PopulationDecrease(x,y)) -> CompetitionIncrease(x,y))", "all x.((Predator(x) & PopulationDecrease(x)) -> CompetitionIncrease(x))", "all x y.((Predator(x) & Prey(y)) -> (DecreasesPopulation(x,y) & IncreasesCompetition(x,y)))", "(DecreasedPreyPopulation(Prey) -> IncreasedCompetition(Predator))", "all x y z.((Predator(x) & Population(y) & Prey(z) & Decreases(y,z)) -> IncreasesCompetition(x,y))", "all x.((Predator(x) & PopulationDecreases(x)) -> CompetitionIncreases(x))", "as population of prey decreases, competition between predators will increase.", "all x.(DecreasesPopulationOfPrey(x) -> IncreasesCompetition(x))", "all x y.((Predator(x) & Prey(y) & PopulationDecreases(x,y)) -> IncreasesCompetition(x,y))", "as population of preys decreases, competition between predators will increase.", "(DecreasesPreyPopulation(Prey) -> IncreasesCompetition(Predator))", "all x.((Predator(x) & PopulationDecrease(x)) -> CompetitionIncrease(x))", "all x y.((Predator(x) & Prey(y)) -> (DecreasedPopulation(x,y) & IncreasedCompetition(x,y)))", "all x y.((Predator(x) & PopulationDecrease(x,y)) -> IncreasedCompetition(x,y))", "all x.(DecreasesPopulationOfPrey(x) -> IncreasesCompetition(x))", "all x.((Predator(x) & PopulationDecreases(x)) -> CompetitionIncreases(x))"]}
{"id": "entailmentbank_validation_511", "nl": "as the population of prey decreases, competition between alligators will increase.", "fol": "", "prediction": ["all x.((PreyPopulation(x) & PopulationDecrease(x)) -> CompetitionIncrease(x))", "all x y.((PreyPopulation(x) & Alligator(y)) -> (Decreases(x,y) & IncreasesCompetition(y,x)))", "(DecreasedPreyPopulation(Prey) -> IncreasedCompetition(Alligators))", "all x.((PreyPopulationDecreases(x) & AlligatorCompetitionIncreases(x)) -> PopulationDecreases(x))", "all x y.((PreyPopulation(x) & Alligator(y)) -> DecreasesCompetition(x,y))", "all x.((PreyPopulation(x) & PopulationDecrease(x)) -> CompetitionIncrease(x))", "all x y z.((PreyPopulation(x) & Alligator(y) & PopulationDecrease(z)) -> IncreasedCompetition(y,z))", "as population of prey decreases, alligators will increase competition.", "all x y.((Prey(x) & Alligator(y)) -> (DecreasesPopulation(x,y) & IncreasesCompetition(y,x)))", "all x.((Prey(x) & PopulationDecrease(x)) -> CompetitionIncrease(x))", "all x.(DecreasedPreyPopulation(x) -> IncreasedCompetition(x))", "(DecreasesPreyPopulation(Prey) -> IncreasesCompetition(Alligators))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasesPopulation(x) & IncreasesCompetition(y)))", "all x.((PreyPopulationDecreases(x) & AlligatorCompetitionIncrease(x)) -> PopulationDecreases(x))", "all x.(DecreasesPreyPopulation(x) -> IncreasesCompetition(x))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasedPopulation(x,y) & IncreasedCompetition(y,x)))"]}
{"id": "entailmentbank_validation_512", "nl": "competition may cause animals to act aggressively towards members of their own species.", "fol": "", "prediction": ["all x y.((Competition(x) & Animal(y)) -> AggressiveAttendee(y,x))", "all x.(Competition(x) -> (AggressiveAggression(x) & Animal(x) & MemberOfOwnSpecies(x)))", "all x y.((Animal(x) & Competition(y)) -> AggressiveAttendee(x,y))", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressiveAction(y,z))", "(all x.(Competition(x) -> AggressiveAction(x)))", "all x y.((Competition(x) & Animal(y)) -> AggressiveActionTowardsSpecies(y,x))", "all x.(Competition(x) -> (AnimalAggressiveTowardsOwnSpecies(x)))", "all x y z.((Animal(x) & Competition(y) & MemberOfSpecies(z)) -> AggressiveAction(x,y,z))", "all x y.((Animal(x) & Competition(y)) -> AggressiveActionTowardsSpecies(x,y))", "all x.(Competition(x) -> (AggressiveAggression(x) & Animal(x) & MemberOfOwnSpecies(x)))", "(all x.(Competition(x) -> AggressiveAction(x)))", "all x.(Competition(x) -> (AnimalsAggressively(x) & MembersOfOwnSpecies(x)))", "all x y.((Animal(x) & Animal(y) & Competes(x,y)) -> AggressiveAttainment(x,y))", "all x y.((Competition(x) & Animal(y)) -> AggressiveAction(y,x))", "all x.(Competition(x) -> (AggressiveAction(x) & Animal(x) & MemberOfOwnSpecies(x)))", "all x.(Competition(x) -> AggressiveAction(x,y))"]}
{"id": "entailmentbank_validation_513", "nl": "as the population of prey decreases, agression between alligators will increase.", "fol": "", "prediction": ["all x.((PreyPopulationDecrease(x) & Agression(x)) -> Increase(x))", "all x y.((PreyPopulation(x) & Alligator(y)) -> (Decreases(x,y) & IncreasesAgression(y,x)))", "all x.((PreyPopulation(x) & PopulationDecrease(x)) -> Aggression(x))", "all x y z.((PreyPopulation(x) & PreyPopulation(y) & Alligator(z) & PopulationDecreases(x,y)) -> AggressionIncrease(z,y))", "(DecreasedPreyPopulation(Prey) -> IncreasedAgression(Alligators))", "all x.((PreyDecreases(x) & AgressionBetweenAlligators(x)) -> Increases(x))", "all x.(DecreasedPreyPopulation(x) -> IncreasedAgression(x))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasesPopulation(x,y) & IncreasesAgression(y,x)))", "all x.((PreyPopulationDecreases(x) & AgressionBetweenAlligators(x)) -> Increases(x))", "all x y.((Prey(x) & Alligator(y) & PopulationDecreases(x,y)) -> AggressionIncrease(y,x))", "(DecreasesPreyPopulation(prey) -> IncreasesAgression(alligators))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasesPopulation(x,y) & IncreasesAgression(y)))", "all x.(DecreasedPopulationOfPrey(x) -> IncreasedAgression(x))", "all x.(DecreasesPreyPopulation(x) -> IncreasesAgression(x))", "all x.((PreyDecreases(x) & AgressionBetweenAlligators(x)) -> Increased(x))", "all x y.((PreyPopulation(x) & Alligator(y)) -> (Decreases(x) & IncreasesAgression(y)))"]}
{"id": "entailmentbank_validation_514", "nl": "a drought occurs over a period of months / years.", "fol": "", "prediction": ["all x.(Drought(x) -> OccursOverMonthsYears(x))", "all x y.((Drought(x) & Months(y)) -> OccursOver(x,y))", "all x y.((Drought(x) & Months(y) & Years(y)) -> OccursOver(x,y))", "all x y z.((Drought(x) & Month(y) & Year(z)) -> OccursOver(x,y,z))", "all x.(Drought(x) -> OccursOverMonthsYears(x))", "all x y.((Drought(x) & Month(y) & Year(y)) -> OccursOver(x,y))", "all x.(Drought(x) -> OccursOverMonthsYears(x))", "all x.(Drought(x) -> OccursOverMonths(x))", "all x y z.((Drought(x) & Month(y) & Year(z)) -> OccursOver(x,y,z))", "all x y.((Drought(x) & Months(y) & Years(y)) -> OccursOver(x,y))", "all x.(Drought(x) -> OccursOverMeal(x))", "all x y z.((Drought(x) & Month(y) & Year(z)) -> OccursOver(x,y,z))", "all x y.((Drought(x) & Month(y) & Years(y)) -> OccursOver(x,y))", "all x.(Drought(x) -> OccursOverMonthsYears(x))", "exists x.(Drought(x) & Months(x) & Years(x))", "all x.(Drought(x) -> OccursOverMonthsYears(x))"]}
{"id": "entailmentbank_validation_515", "nl": "drought is when available water decreases in an environment over a period of months / years.", "fol": "", "prediction": ["all x y.((Drought(x) & Environment(y) & AvailableWaterDecreases(x,y)) -> DurationOfMonthsYears(x))", "all x.(Drought(x) -> (DecreasesWater(x) & Environment(x) & Months(x) & Years(x)))", "all x y z.((Drought(x) & WaterDecrease(y) & Environment(z) & MonthsYearsPeriod(z)) -> AvailableWaterDecrease(x,y,z))", "all x y.((Drought(x) & Environment(y)) -> DecreasesWater(x,y))", "all x.(Drought(x) -> (DecreasesWater(x) & Environment(x) & Months(x) & Years(x)))", "all x.(Drought(x) -> (DecreasesWater(x) & Environment(x) & Months(x) & Years(x)))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecrease(x,y)) -> OverMonthsYears(x))", "all x y z.((Drought(x) & WaterDecrease(y) & Environment(z) & MonthsYearsPeriod(z)) -> AvailableWaterDecrease(x,y,z))", "(Drought(drought) -> (WaterDecreasesInEnvironment(d) & MonthsYearsPeriod(d)))", "all x.(Drought(x) -> (DecreasesWater(x) & Environment(x) & Months(x) & Years(x)))", "all x.(Drought(x) -> (WaterDecreasesInEnvironment(x) & OverMonthsYears(x)))", "(Drought(drought) -> (DecreasesWaterAvailability(d) & Environment(e) & MonthsYearsPeriod(d)))", "all x y z.((Drought(x) & WaterDecrease(y) & Environment(z) & Months(z)) -> Decreases(x,y,z))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecreases(x,y)) -> OverMonthsYears(x))", "all x.(Drought(x) -> (DecreasedWater(x) & Environment(x) & Duration(x,months) & Duration(x,years)))", "all x.(Drought(x) -> (DecreasedWaterAvailability(x) & Environment(x) & Months(x) & Years(x)))"]}
{"id": "entailmentbank_validation_516", "nl": "as available water decreases, the population of plants will decrease.", "fol": "", "prediction": ["all x.((AvailableWater(x) & Decreases(x)) -> PopulationDecreases(x))", "all x.((AvailabilityWater(x) & Decreases(x)) -> PopulationDecreases(x))", "all x y.((AvailableWater(x) & Plant(y)) -> DecreasesPopulation(y))", "as availableWaterDecreases, the population of plants will decrease.", "all x.(DecreasesWater(x) -> PopulationDecreases(x))", "all x y.((AvailabilityWater(x) & Plant(y)) -> DecreasesPopulation(x,y))", "all x y z.((AvailableWater(x) & Plant(y) & Population(z)) -> Decreases(y,z))", "all x.((WaterDecrease(x) & Available(x)) -> PopulationDecrease(x))", "all x y.((AvailableWater(x) & Plant(y)) -> DecreasesPopulation(y,x))", "(DecreasesWaterAvailability(x) -> PopulationDecreasesPlants(x))", "as availablewaterDecreases, populationDecreases(Plants)", "all x.(DecreasesWaterAvailability(x) -> PopulationDecreasesPlants(x))", "(DecreasesWaterAvailability(x) & DecreasesPopulation(x))", "all x y.((Plant(x) & AvailableWater(y) & Decreases(x,y)) -> PopulationDecreases(x))", "all x y.((AvailableWater(x) & Plant(y)) -> DecreasedPopulation(x,y))", "all x.((AvailableWater(x) & Decreases(x)) -> PopulationDecreases(x))"]}
{"id": "entailmentbank_validation_517", "nl": "a drought that occurs over a period of months / years may cause the population of plants in an environment to decrease.", "fol": "", "prediction": ["all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulation(y))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulation(x))", "all x y z.((Drought(x) & OccursOverMonths(x) & Year(y) & Environment(z)) -> MayCauseDecreasedPopulation(x,z))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulation(y))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulation(x))", "all x y z.((Drought(x) & Months(y) & Years(z) & OccursOver(x,y,z)) -> MayCauseDecreasedPopulation(x,y,z))", "all x y.((Drought(x) & OccursOverMonthsYears(x)) -> MayCauseDecreasedPopulation(y))", "all x.((Drought(x) & OccursOverMealPeriod(x) & OccursOverYearPeriod(x)) -> MayCauseDecreasedPopulation(x))", "all x.(Drought(x) -> (OccursOverMonthsYears(x) & MayCauseDecreasedPopulation(x)))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> DecreasedPopulation(x))", "all x y.((Drought(x) & OccursOverMealPeriod(x,y) & Environment(y)) -> MayDecreasePopulation(x,y))", "all x y z.((Drought(x) & OccursOverMonthsYears(x) & Environment(y) & PopulationDecrease(z)) -> MayCause(x,y,z))", "all x.((Drought(x) & OccursOverMealPeriod(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulation(x))", "all x.((Drought(x) & OccursOverPeriodOfMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulation(x))", "all x.(Drought(x) -> (OccursOverMonths(x) & OccursOverYears(x) & MayCauseDecreasedPopulation(x)))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> DecreasesPopulationOfPlants(y))"]}
{"id": "entailmentbank_validation_518", "nl": "a marsh willow herb is a kind of plant.", "fol": "", "prediction": ["all x.(MarshWildowHerb(x) -> Plant(x))", "all x.(MarshWillowHerb(x) -> Plant(x))", "all x y.((MarshWildowHerb(x) & Plant(y)) -> Plant(x))", "all x.(MarshWildowHerb(x) -> Plant(x))", "all x y.((MarshWillowHerb(x) & Marsh(y)) -> Plant(x))", "all x.(MarshWillowHerb(x) -> Plant(x))", "all x y.((MarshWildowHerb(x) & Plant(y)) -> Plant(x))", "all x.(MarshWildowHerb(x) -> Plant(x))", "all x y.((MarshWillowHerb(x) & Plant(y)) -> Plant(x))", "all x.(MarshWillowHerb(x) -> Plant(x))", "all x.(MarshWildowHerb(x) -> Plant(x))", "all x.(MarshWillowHerb(x) -> Plant(x))", "exists x.(MarshWeed(x) & Plant(x))", "all x.(MarshWildowHerb(x) -> Plant(x))", "exists x.(MarshWillowHerb(x) & Plant(x))", "exists x.(MarshWillowHerb(x) & Plant(x))"]}
{"id": "entailmentbank_validation_519", "nl": "a drought that occurs over a period of months / years may cause the population of marsh willow herb in an environment to decrease.", "fol": "", "prediction": ["all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulation(x))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulation(y))", "all x y z.((Drought(x) & OccursOverMonths(x) & Year(y) & Environment(z)) -> MayCauseDecreasedPopulation(x,y,z))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> CausesDecreasedPopulation(x))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> CausesDecreasedPopulation(y))", "(all x.(DroughtOccursOverMonths(x) & OccursOverYears(x)) -> CausesDecreasedPopulation(x))", "all x y.((Drought(x) & OccursOverMonthsYears(x)) -> MayCauseDecreasedPopulation(y))", "all x y z.((Drought(x) & Months(y) & Year(z) & OccursOver(x,y,z)) -> MayCauseDecreasedPopulation(x,y,z))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulationOfMarshWildowHerb(x))", "all x.(Drought(x) -> (OccursOverMonthsYears(x) & CausesDecreasedPopulation(x)))", "all x y.((Drought(x) & OccursOverMealPeriod(x,y) & Environment(y)) -> MayCauseDecreasedPopulationOfMarshWildowHerb(x,y))", "all x.((Drought(x) & OccursOverMealPeriod(x) & YearsPeriod(x)) -> PopulationDecrease(x))", "all x.((Drought(x) & OccursOverMealPeriod(x)) -> MayCauseDecreasedPopulationOfMarshWildowHerb(x))", "all x.(Drought(x) -> (OccursOverMonths(x) & OccursOverYears(x) & CausesDecreasedPopulation(x)))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> (DiminishedPopulationOfMarshWillowHerb(y) & Environment(y)))", "all x.((Drought(x) & OccursOverMomentsAndYears(x)) -> CausesDecreasedPopulation(x,MarshWildowHerb,Environment))"]}
{"id": "entailmentbank_validation_520", "nl": "sweat is used for adjusting to hot temperatures by some animals.", "fol": "", "prediction": ["exists x.(Animal(x) & Sweat(x) & AdjustsToHotTemperatures(x))", "exists x y.(Animal(x) & Sweat(y) & AdjustsToHotTemperatures(x,y))", "all x y.((Animal(x) & Sweat(y)) -> AdjustsToHotTemperatures(x,y))", "all x y z.((Animal(x) & Sweat(y) & HotTemperature(z)) -> AdjustsTo(x,y,z))", "exists x.(Animal(x) & Sweat(x) & AdjustsToHotTemperatures(x))", "exists x.(Animal(x) & UsesSweatForAdaptingToHotTemperatures(x))", "all x y.((Animal(x) & Sweat(y)) -> AdjustsToHotTemperatures(x,y))", "(exists x.(Animal(x) & Sweat(x) & AdjustsToHotTemperatures(x)))", "all x y z.((Animal(x) & Sweat(y) & Temperature(z) & UsedFor(x,y,z)) -> AdjustsTo(x,z))", "all x y.((Animal(x) & Animal(y)) -> AdjustsToHotTemperatures(x,y))", "exists x.(Animal(x) & UsedForAdaptingToHotTemperatures(x))", "exists x.(Animal(x) & Sweat(x) & AdjustsToHotTemperatures(x))", "exists x.(Animal(x) & UsesSweatForAdaptingToHotTemperatures(x))", "all x y.((Animal(x) & Sweat(y)) -> AdjustsToHotTemperatures(x,y))", "exists x.(Animal(x) & UsedForAdjustingToHotTemperatures(x))", "exists x.(Animal(x) & Sweat(x) & AdjustsToHotTemperatures(x))"]}
{"id": "entailmentbank_validation_521", "nl": "sweat cools a body.", "fol": "", "prediction": ["all x y.((Sweat(x) & Body(y)) -> Cools(x,y))", "all x.(Sweat(x) -> CoolsBody(x))", "all x y.((Sweat(x) & Body(y)) -> Cools(x,y))", "all x y z.((Sweat(x) & Body(y) & Body(z)) -> Cools(x,y,z))", "all x.(Sweat(x) -> CoolsBody(x))", "all x y.((Sweat(x) & Body(y)) -> Cools(x,y))", "all x y.((Sweat(x) & Body(y) & Cools(x,y)) -> Cools(x,y))", "all x.(Sweat(x) -> CoolsBody(x))", "all x y z.((Sweat(x) & Body(y) & Body(z)) -> Cools(x,y,z))", "all x y.((Sweat(x) & Body(y)) -> Cools(x,y))", "all x.(Sweat(x) -> CoolsBody(x))", "all x y.((Sweat(x) & Body(y) & Cools(x,y)) -> Cools(x,y))", "all x.(Sweat(x) -> CoolsBody(x))", "exists x.(Sweat(x) & Cools(x))", "all x.(Sweat(x) -> CoolsBody(x))", "exists x.(Sweat(x) & Cools(x))"]}
{"id": "entailmentbank_validation_522", "nl": "when the body is hot, sweat is used to cool the body.", "fol": "", "prediction": ["all x.((Body(x) & Hot(x)) -> UsedToCool(x))", "all x y.((Body(x) & Body(y) & Hot(x)) -> UsedToCool(x,y))", "(Hot(Body) & Sweat(Sweat) & CoolsBody(Sweat))", "all x y.((Body(x) & Body(y) & Hot(x)) -> CoolsBody(y))", "all x.((Body(x) & Hot(x)) -> UsedToCool(x))", "all x y z.((Body(x) & Body(y) & Body(z) & Hot(x)) -> Cools(y,z))", "(Hot(Body) & Sweat(Sweat) & Cool(Body))", "all x y.((Body(x) & BodyHot(x)) -> UsedToCool(y,x))", "all x y.((Body(x) & Body(y) & Hot(x)) -> UsedToCool(y,x))", "exists x.(Body(x) & Hot(x) & Sweat(x) & CoolsBody(x))", "all x.((Body(x) & Hot(x)) -> Sweat(x))", "(Hot(Body) -> CoolsBody(Sweat))", "all x.(Hot(x) -> CoolsBody(x))", "all x.((Body(x) & Hot(x)) -> CoolsBody(x))", "all x y.((Body(x) & Hot(x)) -> CoolsBody(y))", "all x.((Body(x) & Hot(x)) -> UsedToCool(x,sweat))"]}
{"id": "entailmentbank_validation_523", "nl": "panting is when an animal's body is cooled by hanging out their tongue.", "fol": "", "prediction": ["all x.(Pant(x) -> (Animal(x) & CooledByHangingOutTongue(x)))", "all x y.((Animal(x) & Body(y) & HangsOutTongue(x,y)) -> CooledByPanting(x,y))", "all x.(Pant(x) -> (Animal(x) & CooledByHangingOutTongue(x)))", "all x y z.((Animal(x) & Body(y) & Tongue(z) & HangsOut(x,y,z)) -> CooledByPanting(x,y,z))", "all x.(Panting(x) -> (Animal(x) & CooledByHangingOutTongue(x)))", "all x y.((Animal(x) & Body(y) & HangsOutTongue(x,y)) -> CooledBy(x,y))", "(all x.(Panther(x) -> CooledByHangingOutTongue(x)))", "all x.(Panting(x) -> (AnimalBodyCooledByHangingOutTongue(x)))", "all x.((Animal(x) & BodyCooledByHangingOutTongue(x)) -> Panting(x))", "all x.(Panting(x) -> (Animal(x) & BodyCooledByHangingOutTongue(x)))", "all x y z.((Animal(x) & Body(y) & Tongue(z) & HangsOut(x,y,z)) -> CooledBy(x,y,z))", "all x y.((Animal(x) & Body(y) & HangsOutTongue(x,y)) -> CoolsBy(x,y))", "all x y.((Animal(x) & Body(y) & HangingOutTongue(x)) -> CooledBy(x,y))", "all x.(Panting(x) -> (ClimateBody(x) & HangOutTongue(x)))", "all x.(Pants(x) -> (Animal(x) & CooledByHangingOutTongue(x)))", "all x y.((Animal(x) & Body(y)) -> CooledByHangingOutTongue(x,y))"]}
{"id": "entailmentbank_validation_524", "nl": "panting and sweating are used to cool the body.", "fol": "", "prediction": ["all x.((Pantting(x) | Sweating(x)) -> CoolsBody(x))", "all x y.((Pantting(x) & Sweating(y)) -> CoolsBody(x,y))", "all x.((Pants(x) | Sweating(x)) -> CoolsBody(x))", "(all x.((Pantting(x) | Sweating(x))) -> CoolsBody(x))", "all x.((Body(x) & Body(x)) -> (Pantting(x) | Sweating(x)))", "all x y.((Pantting(x) & Sweating(y)) -> CoolsBody(x))", "(CoolBody(Pantting) & CoolBody(Sweeping))", "all x.((Pantting(x) | Sweating(x)) -> CoolsBody(x))", "(all x.(CoolBody(x) -> (Pantting(x) | Sweating(x))))", "all x y.((Body(x) & Body(y)) -> (Pantting(x) | Sweating(x)))", "(CoolBody(Pants) & CoolBody(Sweeping))", "all x.((Body(x) & Body(y) & (Pantting(x) | Sweating(x))) -> Cools(x,y))", "all x y z.((Pant(x) & Sweating(y) & Body(z)) -> Cools(x,z))", "all x y.((Pants(x) & Sweating(y)) -> CoolsBody(x,y))", "all x.((Pants(x) | Sweating(x)) -> CoolsBody(x))", "(all x.(Clothing(x) -> (Pantting(x) | Sweating(x))))"]}
{"id": "entailmentbank_validation_525", "nl": "cooling means decreasing heat / temperature.", "fol": "", "prediction": ["all x.(Cooling(x) -> (DecreasesHeat(x) & ReducesTemperature(x)))", "all x y.((Cooling(x) & Heat(y)) -> Decreases(x,y))", "all x.(Cooling(x) -> (DecreasesHeat(x) | DecreasesTemperature(x)))", "all x y.((Cooling(x) & Heat(y) & Temperature(y)) -> Decreases(x,y))", "(DecreasesHeat(cooling) & DecreasesTemperature(cooling))", "all x.(Cooling(x) -> (DecreasesHeat(x) & DecreasesTemperature(x)))", "all x.((Cooling(x) & Heat(x) & Temperature(x)) -> Decreases(x,Heat,Temperature))", "all x.(Climate(x) -> DecreasesHeat(x))", "all x y.((Cooling(x) & Heat(y) & Temperature(z)) -> Decreases(x,y,z))", "All x y z.((Cooling(x) & Heat(y) & Temperature(z)) -> Decreases(x,y,z))", "all x.(Cooling(x) -> (DecreasesHeat(x) | ReducesTemperature(x)))", "all x.(Climate(x) -> (DecreasesHeat(x) & DecreasesTemperature(x)))", "all x y.((Cooling(x) & Heat(y)) -> Decreases(x,y))", "all x.(Climate(x) -> DecreasesHeat(x))", "all x.(Cooling(x) -> (DecreasedHeat(x) & DecreasedTemperature(x)))", "all x y.((Climate(x) & Heat(y)) -> Decreased(x,y))"]}
{"id": "entailmentbank_validation_526", "nl": "if an animal becomes too hot then that animal may die.", "fol": "", "prediction": ["all x.((Animal(x) & TooHot(x)) -> MayDie(x))", "all x y.((Animal(x) & TooHot(x)) -> MayDie(x,y))", "all x.((Animal(x) & TooHot(x)) -> MayDie(x))", "all x.((Animal(x) & TooHot(x)) -> MayDie(x))", "all x y.((Animal(x) & TooHot(x)) -> MayDie(y))", "all x y.((Animal(x) & Hot(y)) -> MayDie(x,y))", "-(TooHot(animal) -> MayDie(animal,animal))", "exists x.(Animal(x) & TooHot(x) & MayDie(x))", "all x.((Animal(x) & TooHot(x)) -> MayDie(x))", "all x y.((Animal(x) & Hot(y) & Becomes(x,y)) -> MayDie(x))", "all x y.((Animal(x) & TooHot(x)) -> MayDie(x,y))", "all x.((Animal(x) & TooHot(x)) -> MayDerive(x))", "all x.((Animal(x) & TooHot(x)) -> MayDie(x))", "all x y.((Animal(x) & Hot(y) & Has(x,y)) -> MayDie(x))", "all x.(TooHot(x) -> MayDie(x))", "all x.((Animal(x) & TooHot(x)) -> MayDie(x))"]}
{"id": "entailmentbank_validation_527", "nl": "cooling can be used by an animal for survival.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> Cooling(x,y))", "all x.((Animal(x) & Cooling(x)) -> UsesForSurvival(x))", "all x y.((Animal(x) & Animal(y)) -> CanUseCoolingForSurvival(x,y))", "all x y z.((Animal(x) & Cooling(y) & Survival(z)) -> CanUseFor(x,y,z))", "all x y.((Animal(x) & Cooling(y)) -> CanUseForSurvival(x,y))", "all x.((Animal(x) & Cooling(x)) -> UsesForSurvival(x))", "all x.(Cooling(x) -> UsedForSurvival(x))", "all x.((Animal(x) & Cooling(x)) -> UsedForSurvival(x))", "all x y.((Animal(x) & Animal(y)) -> UsesCoolingForSurvival(x,y))", "exists x.(Animal(x) & Cooling(x) & UsedForSurvival(x))", "all x y z.((Animal(x) & Cooling(y) & Survival(z)) -> CanUseFor(x,y,z))", "all x y.((Animal(x) & Cooling(y)) -> UsedForSurvival(x,y))", "all x.(Climate(x) -> CanBeUsedForSurvival(x))", "exists x.(Animal(x) & Cooling(x) & UsesForSurvival(x))", "all x.((Animal(x) & Cooling(x)) -> Survival(x))", "all x y.((Animal(x) & Animal(y)) -> CoolingUsedForSurvival(x,y))"]}
{"id": "entailmentbank_validation_528", "nl": "if the environmental temperature is too hot then an animal in that environment may become hot.", "fol": "", "prediction": ["all x.((Environment(x) & TooHot(x)) -> MayBecomeHot(x))", "all x y.((Environment(x) & Environment(y) & TooHot(x)) -> MayBecomeHot(x,y))", "all x.((Environment(x) & TooHot(x)) -> MayBecomeHot(x))", "all x y.((Animal(x) & Environment(y) & TooHot(y)) -> MayBecomeHot(x,y))", "all x.((EnvironmentalTemperature(x) & TooHot(x)) -> MayBecomeHot(x))", "all x.((Animal(x) & EnvironmentalTemperatureTooHot(x)) -> MayBecomeHot(x))", "all x y.((Environment(x) & Environment(y) & TooHot(x)) -> MayBecomeHot(x,y))", "all x.((Environment(x) & TooHot(x)) -> MayBecomeHot(x))", "all x y z.((Environment(x) & Environment(y) & Hot(z) & TooHot(y)) -> MayBecomeHot(z))", "all x.((EnvironmentalTemperature(x) & TooHot(x)) -> MayBecomeHot(x))", "all x y.((Animal(x) & Environment(y) & TooHot(y)) -> MayBecomeHot(x,y))", "all x y.((Environment(x) & HotTemperature(x) & Animal(y)) -> MayBecomeHot(y))", "exists x.(TooHot(x) & Animal(x) & InEnvironment(x))", "all x.((Environment(x) & TooHot(x)) -> MayBecomeHot(x))", "all x.(TooHot(x) -> MayBecomeHot(x))", "all x y.((Animal(x) & Environment(y) & TooHot(x,y)) -> MayBecomeHot(x,y))"]}
{"id": "entailmentbank_validation_529", "nl": "if the temperature of an animal's environment becomes too hot then that animal must cool itself.", "fol": "", "prediction": ["all x.((Animal(x) & TooHotTemperature(x)) -> CoolsItself(x))", "all x y.((Animal(x) & Temperature(y) & TooHot(y)) -> CoolsItself(x,y))", "-(TooHotTemperature(animal) & CoolsItself(animal))", "all x y.((Animal(x) & Temperature(y) & TooHot(y)) -> Cools(x,y))", "all x.((Animal(x) & TooHotTemperature(x)) -> CoolsItself(x))", "all x y.((Animal(x) & Environment(y) & TooHot(x,y)) -> Cools(x,y))", "all x y z.((Animal(x) & Temperature(y) & Environment(z) & TooHot(y)) -> Cools(x,z))", "all x.((Animal(x) & TemperatureTooHot(x)) -> CoolsItself(x))", "all x.((Animal(x) & TooHotTemperature(x)) -> MustCool(x))", "all x y.((Animal(x) & Temperature(y) & TooHot(y)) -> CoolsItself(x,y))", "all x y.((Animal(x) & Environment(y) & TooHot(x,y)) -> Cools(x,y))", "all x y.((Animal(x) & TemperatureTooHot(x)) -> CoolsItself(x,y))", "all x.((Animal(x) & TemperatureTooHot(x)) -> Cools(x))", "all x.((Animal(x) & TooHotTemperature(x)) -> MustCool(x))", "all x.((Animal(x) & HeatTooHot(x)) -> CoolsItself(x))", "all x.((Animal(x) & TemperatureTooHot(x)) -> CoolsItself(x))"]}
{"id": "entailmentbank_validation_530", "nl": "an animal cooling itself is an adaptation to hot temperatures.", "fol": "", "prediction": ["all x.((Animal(x) & Cooling(x)) -> HotTemperaturesAdaptation(x))", "all x.((Animal(x) & CoolsItself(x)) -> HotTemperaturesAdaptation(x))", "all x y.((Animal(x) & Cooling(y)) -> HotTemperaturesAdaptation(x,y))", "all x y.((Animal(x) & Cooling(x) & HotTemperatures(y)) -> AdaptationTo(x,y))", "all x.(Cooling(x) -> HotTemperaturesAdaptation(x))", "all x.((Animal(x) & Cooling(x)) -> HotTemperaturesAdaptation(x))", "all x y z.((Animal(x) & Temperature(y) & Temperature(z) & Cools(x,y)) -> HotTemperatureAdaptation(x,z))", "all x y.((Animal(x) & Cooling(y)) -> HotTemperaturesAdaptation(x,y))", "all x.((Animal(x) & CoolsEachother(x)) -> HotTemperaturesAdaptation(x))", "all x.(CoolingOfAnimal(x) -> HotTemperaturesAdaptation(x))", "exists x.(Animal(x) & Cooling(x) & HotTemperatures(x))", "all x y.((Animal(x) & HotTemperatures(y)) -> CoolsItself(x,y))", "all x.(Cooling(x) -> HotTemperaturesAdaptation(x))", "all x y.((Animal(x) & Animal(y)) -> Cooling(x,y))", "all x.(Climate(x) -> HotTemperaturesAdaptation(x))", "all x.((Animal(x) & Cooling(x)) -> HotTemperatureAdaptation(x))"]}
{"id": "entailmentbank_validation_531", "nl": "an example of adaptations to hot temperatures are panting and sweating.", "fol": "", "prediction": ["all x.(Adaptation(x) -> (Pantting(x) | Sweating(x)))", "all x.(AdaptationsToHotTemperatures(x) -> (Pantting(x) | Sweating(x)))", "all x.((Adaptation(x) & HotTemperature(x)) -> (Pantting(x) | Sweating(x)))", "(AdaptationsToHotTemperatures(x) & Panting(x) & Sweeping(x))", "all x y.((Adaptation(x) & HotTemperature(y)) -> (Pantting(x) | Sweating(x)))", "(all x.(AdaptationToHotTemperatures(x) -> (Pantting(x) | Sweating(x))))", "all x.(AdaptationsToHotTemperatures(x) -> (Pants(x) | Sweats(x)))", "all x.(Adaptation(x) -> (Pants(x) | Sweats(x)))", "all x.(Adaptation(x) -> (HotTemperatures(x) & Panting(x) & Sweating(x)))", "(AdaptationsToHotTemperatures(x) -> (Pantting(x) | Sweating(x)))", "all x y.((Adaptation(x) & HotTemperature(y)) -> (Pants(x) | Sweats(x)))", "all x.((Adaptation(x) & HotTemperatures(x)) -> (Pants(x) | Sweats(x)))", "all x y.((Adaptation(x) & HotTemperature(y)) -> (Panting(x) | Sweeping(x)))", "all x.(AdaptationsToHotTemperatures(x) -> (Pantting(x) | Sweeping(x)))", "exists x.(Adaptation(x) & HotTemperature(x) & Panting(x) & Sweeping(x))", "all x y.((Adaptation(x) & HotTemperature(y)) -> (Panting(x) | Sweeping(x)))"]}
{"id": "entailmentbank_validation_532", "nl": "cellular respiration is when a cell converts from oxygen and carbohydrates into carbon dioxide, water, and energy.", "fol": "", "prediction": ["all x.(CellularRespiration(x) -> (ConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))", "all x y.((CellularRespiration(x) & Cell(y)) -> (ConvertsOxygenAndCarbohydrates(x,y) & CarbonDioxideWaterEnergy(y)))", "all x.(CellularRespiration(x) -> (ConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))", "all x y z.((CellularRespiration(x) & Cell(y) & OxygenAndCarbohydrates(z) & ConvertsToCarbonDioxideWaterEnergy(x,y,z)) -> ConvertsTo(y,x,y,z))", "all x.((CellularRespiration(x) & CellConvertsOxygenAndCarbohydrates(x)) -> (CarbonDioxideWaterEnergy(x)))", "(CellularRespiration) -> (ConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))", "all x y z.((CellularRespiration(x) & Cell(y) & OxygenAndCarbohydrates(z)) -> (ConvertsToCarbonDioxideWaterEnergy(x,y,z)))", "all x y.((CellularRespiration(x) & Cell(y)) -> (ConvertsOxygenAndCarbohydrates(y,x) & CarbonDioxideWaterEnergy(y,x)))", "all x.(CellularRespiration(x) -> (ConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))", "all x.((CellularRespiration(x) & ConvertsOxygenAndCarbohydrates(x)) -> (CarbonDioxideWaterEnergy(x) & ConvertsCarbonDioxideAndEnergy(x)))", "all x.((CellularRespiration(x) & CellConvertsOxygenAndCarbohydrates(x)) -> (CarbonDioxideWaterEnergy(x)))", "all x.(CellularRespiration(x) -> (ConvertsFromOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))", "all x y z.((CellularRespiration(x) & Cell(y) & OxygenAndCarbohydrates(z) & ConvertsToCarbonDioxideWaterAndEnergy(x,y,z)) -> ConvertsToCarbonDioxideWaterAndEnergy(x))", "all x.((CellularRespiration(x) & CellConvertsFromOxygenAndCarbohydrates(x)) -> (CarbonDioxideWaterEnergy(x)))", "all x y.((CellularRespiration(x) & Cell(y)) -> (ConvertsOxygenAndCarbohydrates(x,y) & CarbonDioxideWaterEnergy(x)))", "all x.(CellularRespiration(x) -> (ConvertsFromOxygenAndCarbohydratesToCarbonDioxideWaterEnergy(x)))"]}
{"id": "entailmentbank_validation_533", "nl": "living things require respiration to use energy.", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresRespiration(x))", "all x y.((LivingThing(x) & RequiresRespiration(x)) -> UsesEnergy(y))", "all x.((LivingThing(x) & RequiresRespiration(x)) -> UsesEnergy(x))", "all x.(LivingThing(x) -> RequiresRespirationToUseEnergy(x))", "all x y.((LivingThing(x) & RequiresRespiration(x)) -> UsesEnergy(x,y))", "all x y.((LivingThing(x) & Respiration(y)) -> RequiresToUseEnergy(x,y))", "all x y z.((LivingThing(x) & Respiration(y) & Energy(z)) -> RequiresToUse(x,y,z))", "all x.((LivingThing(x) & RequiresRespiration(x)) -> UsesEnergy(x))", "all x.(LivingThing(x) -> RequiresRespiration(x))", "all x.(RequiresRespiration(x) -> UsesEnergy(x))", "all x.(LivingThing(x) -> RequiresRespirationToUseEnergy(x))", "all x y.((LivingThing(x) & RequiresRespiration(y)) -> UsesEnergy(x,y))", "(all x.(LivingThing(x) -> RequiresRespiration(x)))", "all x y.((LivingThing(x) & Respiration(y)) -> Requires(x,y))", "all x.((LivingThing(x) & RequiresRespiration(x)) -> UsesEnergy(x))", "all x.(LivingThing(x) -> RequiresRespiration(x))"]}
{"id": "entailmentbank_validation_534", "nl": "living things must convert oxygen into carbon dioxide to use energy.", "fol": "", "prediction": ["all x.((LivingThing(x) & Oxygen(x)) -> ConvertsToCarbonDioxide(x))", "all x.(LivingThing(x) -> ConvertsOxygenToCarbonDioxide(x))", "all x y.((LivingThing(x) & Oxygen(y)) -> ConvertsToCarbonDioxide(x,y))", "all x.((LivingThing(x) & OxygenConversion(x)) -> UsesEnergy(x))", "all x y z.((LivingThing(x) & Oxygen(y) & CarbonDioxide(z)) -> ConvertsToUseEnergy(x,y,z))", "all x.(LivingThing(x) -> ConvertsOxygenToCarbonDioxide(x))", "all x y.((LivingThing(x) & Oxygen(y)) -> ConvertsToCarbonDioxide(x,y))", "all x.((LivingThing(x) & Oxygen(x)) -> ConvertsToCarbonDioxide(x))", "all x y.((LivingThing(x) & Oxygen(y) & CarbonDioxide(z)) -> ConvertsToUseEnergy(x,y,z))", "all x.(LivingThing(x) -> (ConvertsOxygenToCarbonDioxide(x) & UsesEnergy(x)))", "all x.((LivingThing(x) & OxygenConversion(x,oxygen) & CarbonDioxide(x,energy)) -> Uses(x,energy))", "all x y.((LivingThing(x) & Oxygen(y)) -> ConvertsToCarbonDioxide(x,y))", "all x.(LivingThing(x) -> ConvertsOxygenToCarbonDioxide(x))", "(all x.(LivingThing(x) -> ConvertsOxygenToCarbonDioxide(x)))", "all x.((LivingThing(x) & Oxygen(x) & CarbonDioxide(x)) -> UsesEnergy(x))", "all x y.((LivingThing(x) & Oxygen(y)) -> ConvertsToCarbonDioxide(x,y))"]}
{"id": "entailmentbank_validation_535", "nl": "breathing is when animals convert oxygen into carbon dioxide.", "fol": "", "prediction": ["all x.(Breathing(x) -> (AnimalConvertsOxygenToCarbonDioxide(x)))", "all x y.((Animal(x) & Oxygen(y)) -> ConvertsToCarbonDioxide(x,y))", "all x.(Breathing(x) -> (Animal(x) & ConvertsOxygenToCarbonDioxide(x)))", "all x.(Breathing(x) -> ConvertsOxygenToCarbonDioxide(x))", "(ConvertsOxygenToCarbonDioxide(animal) -> Breathes(animal))", "all x y z.((Animal(x) & Oxygen(y) & CarbonDioxide(z)) -> ConvertsTo(x,y,z))", "all x y.((Animal(x) & Oxygen(y) & ConvertsToCarbonDioxide(x,y)) -> Breathes(x))", "all x y.((Animal(x) & Oxygen(y)) -> ConvertsToCarbonDioxide(x,y))", "all x.((Animal(x) & OxygenConversion(x,carbonDioxide)) -> Breathes(x))", "all x.(Breathing(x) -> (Animal(x) & ConvertsOxygenToCarbonDioxide(x)))", "all x.(Breathing(x) -> (AnimalsConvertOxygenToCarbonDioxide(x)))", "all x.((Animal(x) & Oxygen(x) & CarbonDioxide(x)) -> Breathes(x))", "all x y.((Animal(x) & Oxygen(y) & CarbonDioxide(z)) -> ConvertsTo(x,y,z))", "all x y.((Animal(x) & Oxygen(y)) -> ConvertsToCarbonDioxide(x,y))", "all x.(Breathing(x) -> ConvertsOxygenToCarbonDioxide(x))", "all x.((Animal(x) & Oxygen(x)) -> CarbonDioxide(x))"]}
{"id": "entailmentbank_validation_536", "nl": "living things must breathe to use energy.", "fol": "", "prediction": ["all x.(LivingThing(x) -> BreathesToUseEnergy(x))", "all x.((LivingThing(x) & Breathes(x)) -> UsesEnergy(x))", "all x y.((LivingThing(x) & Breathe(y)) -> UsesEnergy(x,y))", "all x.(LivingThing(x) -> BreathesToUseEnergy(x))", "all x y.((LivingThing(x) & Breathes(x,y)) -> UsesEnergy(x))", "all x.((LivingThing(x) & Breathes(x)) -> UsesEnergy(x))", "all x y z.((LivingThing(x) & Breathes(x,y) & Energy(z)) -> Uses(x,z))", "all x.(LivingThing(x) -> BreathesToUseEnergy(x))", "all x y.((LivingThing(x) & Breathe(y)) -> UsesEnergy(x,y))", "all x y.((LivingThing(x) & Breathes(x,y)) -> UsesEnergy(x,y))", "all x.((LivingThing(x) & Breathes(x)) -> UsesEnergy(x))", "all x.(LivingThing(x) -> Breathes(x))", "exists x.(LivingThing(x) & Breathes(x) & UsesEnergy(x))", "all x y.((LivingThing(x) & Breathe(y)) -> UsesEnergy(x,y))", "all x.(LivingThing(x) -> MustBreathe(x))", "exists x.(LivingThing(x) & Breathes(x) & UsesEnergy(x))"]}
{"id": "entailmentbank_validation_537", "nl": "breathing out is when animals exhale carbon dioxide from their lungs into the air.", "fol": "", "prediction": ["all x.(BreathingOut(x) -> (ExhalesCarbonDioxide(x) & FromLungsIntoAir(x)))", "all x y.((Animal(x) & Air(y)) -> ExhalesCarbonDioxide(x,y))", "all x y z.((Animal(x) & CarbonDioxide(y) & Air(z)) -> ExhalesFromLungsIntoAir(x,y,z))", "all x.(BreathingOut(x) -> (ExhalesCarbonDioxide(x) & FromLungsIntoAir(x)))", "all x.((Animal(x) & ExhalesCarbonDioxide(x)) -> BreathesOut(x))", "all x y.((Animal(x) & ExhalesCarbonDioxide(x,y)) -> BreathesOut(x,y))", "all x.(BreathingOut(x) -> (AnimalsExhaleCarbonDioxide(x) & FromLungsIntoAir(x)))", "all x y z.(BreathingOut(x) -> (ExhalesCarbonDioxide(y) & FromLungsIntoAir(z) & FromLungsIntoAir(x,y,z)))", "all x.((Animal(x) & ExhalesCarbonDioxide(x) & FromLungsIntoAir(x)) -> BreathesOut(x))", "all x y.((Animal(x) & CarbonDioxide(y) & ExhalesFromLungsIntoAir(x,y)) -> BreathesOut(x))", "all x y z.((Animal(x) & CarbonDioxide(y) & Air(z)) -> ExhalesFromLungsIntoAir(x,y,z))", "all x y.((Animal(x) & Air(y)) -> ExhalesCarbonDioxide(x,y))", "all x.(BreathingOut(x) -> ExhalesCarbonDioxide(x))", "all x.(BreathingOut(x) -> ExhalesCarbonDioxideFromLungsIntoAir(x))", "all x.((Animal(x) & ExhalesCarbonDioxide(x)) -> BreathesOut(x))", "all x y.((Animal(x) & Air(y)) -> ExhalesCarbonDioxideFromLungs(x,y))"]}
{"id": "entailmentbank_validation_538", "nl": "animals are a source of carbon dioxide by breathing.", "fol": "", "prediction": ["all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))", "(SourceOfCarbonDioxideByBreathing(animal))", "all x y.((Animal(x) & CarbonDioxide(y)) -> SourceByBreathing(x,y))", "all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))", "all x.((Animal(x) & SourceOfCarbonDioxide(x) & Breathes(x)) -> SourceOfCarbonDioxide(x))", "all x y.((Animal(x) & CarbonDioxide(y) & Breathes(x)) -> Source(x,y))", "all x y.((Animal(x) & Breathing(y)) -> SourceOfCarbonDioxide(x,y))", "all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))", "all x y.((Animal(x) & CarbonDioxide(y)) -> Source(x,y))", "all x.(Animal(x) -> SourceOfCarbonDioxide(x))", "all x y.((Animal(x) & Breathing(y)) -> SourceOfCarbonDioxide(x,y))", "all x.(Animal(x) -> CarbonDioxideSource(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> SourceOfCarbonDioxide(x))", "all x.(Animal(x) -> SourceOfCO2ByBreathing(x))"]}
{"id": "entailmentbank_validation_539", "nl": "a source of something produces that something.", "fol": "", "prediction": ["all x y.((Source(x) & Something(y)) -> Produces(x,y))", "all x.(SourceOf(x,y) -> Produces(x,y))", "all x.((SourceOf(x,y) & Something(y)) -> Produces(x,y))", "all x y.((Source(x) & Source(y)) -> Produces(x,y))", "all x y.((SourceOf(x,y) & Something(y)) -> Produces(x,y))", "all x y z.((Source(x) & Something(y) & Source(z)) -> Produces(x,y,z))", "all x.(SourceOf(x,y) -> Produces(x,y))", "all x y.((Source(x) & Something(y)) -> Produces(x,y))", "all x y.((SourceOf(x,y) & Something(y)) -> Produces(x,y))", "all x y z.((Source(x) & Something(y) & Source(z)) -> Produces(x,y,z))", "exists x.(SourceOf(x,y) & Something(y) & Produces(x,y))", "exists x.(SourceOf(x,y) & SourceOf(y,z) & Produces(x,z))", "exists x.(SourceOf(x,y) & Something(y) & Produces(x,y))", "exists x.(SourceOfSomething(x) & ProducesSomething(x))", "all x y.((SourceOf(x,y) & Something(y)) -> Produces(x,y))", "exists x.(SourceOfProduces(x,y) & SourceOf(y,x))"]}
{"id": "entailmentbank_validation_540", "nl": "animals produce carbon dioxide by breathing.", "fol": "", "prediction": ["all x.(Animal(x) -> ProducesCarbonDioxideByBreathing(x))", "all x y.((Animal(x) & CarbonDioxide(y)) -> ProducesByBreathing(x,y))", "(ProducesCarbonDioxideByBreathing(animal)", "all x.(Animal(x) -> ProducesCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> (ProducesCarbonDioxide(x) & Breathes(x)))", "all x.((Animal(x) & Breathes(x)) -> ProducesCarbonDioxide(x))", "(ProducesCarbonDioxideByBreathing(animal)", "all x y.((Animal(x) & CarbonDioxide(y)) -> ProducesByBreathing(x,y))", "all x.(Animal(x) -> ProducesCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> (ProducesCarbonDioxide(x) & Breathes(x)))", "all x.((Animal(x) & Breathes(x)) -> ProducesCarbonDioxide(x))", "all x y.((Animal(x) & CarbonDioxide(y)) -> ProducesByBreathing(x,y))", "all x.(Animal(x) -> ProducesCarbonDioxideByBreathing(x))", "all x y.((Animal(x) & CarbonDioxide(y)) -> ProducesByBreathing(x,y))", "all x.(Animal(x) -> (ProducesCarbonDioxideByBreathing(x)))", "all x.(Animal(x) -> ProducesCarbonDioxide(x))"]}
{"id": "entailmentbank_validation_541", "nl": "animals produce carbon dioxide by using energy.", "fol": "", "prediction": ["all x.(Animal(x) -> ProducesCarbonDioxideByEnergy(x))", "all x y.((Animal(x) & CarbonDioxide(y)) -> ProducesByEnergy(x,y))", "all x.(Animal(x) -> ProducesCarbonDioxide(x))", "all x.(Animal(x) -> (ProducesCarbonDioxide(x) & UsesEnergy(x)))", "all x y.((Animal(x) & CarbonDioxide(y) & UsesEnergy(x)) -> Produces(x,y))", "all x.((Animal(x) & UsesEnergy(x)) -> ProducesCarbonDioxide(x))", "(all x.(Animal(x) -> ProducesCarbonDioxideByEnergy(x)))", "all x.(Animal(x) -> ProducesCarbonDioxideByEnergy(x))", "all x y.((Animal(x) & Energy(y)) -> ProducesCarbonDioxide(x,y))", "all x y z.((Animal(x) & CarbonDioxide(y) & Energy(z)) -> ProducesBy(x,y,z))", "all x.((Animal(x) & UsesEnergy(x)) -> ProducesCarbonDioxide(x))", "all x y.((Animal(x) & CarbonDioxide(y)) -> ProducesByEnergy(x,y))", "all x.(Animal(x) -> (ProducesCarbonDioxide(x) & UsesEnergy(x)))", "all x.(Animal(x) -> ProducesCarbonDioxide(x))", "all x y.((Animal(x) & Energy(y)) -> ProducesCarbonDioxide(x,y))", "all x.(Animal(x) -> ProducesCarbonDioxideByEnergy(x))"]}
{"id": "entailmentbank_validation_542", "nl": "carbohydrates are used for storing energy.", "fol": "", "prediction": ["all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))", "all x y.((Carbohydrate(x) & Energy(y)) -> UsedFor(x,y))", "(all x.(Carbohydrate(x) -> StoresEnergy(x)))", "all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))", "all x y.((Carbohydrate(x) & Energy(y)) -> UsedFor(x,y))", "all x.(Carbohydrate(x) -> StoresEnergy(x))", "all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))", "(StoresEnergyWithCarbohydrates(carbohydrates)", "all x y.((Carbohydrate(x) & Energy(y)) -> UsedFor(x,y))", "all x y.((Carbohydrate(x) & Energy(y)) -> UsedForStoring(x,y))", "all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))", "all x.(Carbohydrate(x) -> StoresEnergy(x))", "all x y.((Carbohydrate(x) & Energy(y)) -> Stores(x,y))", "all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))", "all x.(Carbohydrate(x) -> StoresEnergy(x))", "all x.(Carbohydrate(x) -> UsedForStoreingEnergy(x))"]}
{"id": "entailmentbank_validation_543", "nl": "photosynthesis makes energy for the plant by converting carbon dioxide, water, and sunlight into carbohydrates.", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & Plant(y)) -> (ConvertsCarbonDioxideWaterSunlight(x,y) & ProducesCarbohydrates(x,y)))", "all x y z.((Photosynthesis(x) & Plant(y) & CarbonDioxide(z) & Water(z) & Sunlight(z)) -> MakesEnergy(x,y,z))", "all x.(Photosynthesis(x) -> (MakesEnergy(x) & ConvertsCarbonDioxideWaterSunlight(x) & ProducesCarbohydrates(x)))", "all x.(Photosynthesis(x) -> (MakesEnergyForPlant(x) & ConvertsCarbonDioxideWaterSunlightToCarbohydrates(x)))", "(MakesEnergyForPlant(Photosynthesis) -> ConvertsCarbonDioxideWaterSunlightToCarbohydrates(Photosynthesis))", "(all x.(Photosynthesis(x) -> (ConvertsCarbonDioxide(x) & ConvertsWater(x) & ConvertsSunlight(x)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideWaterSunlight(x) & ProducesCarbohydrates(x)))", "all x y.((Photosynthesis(x) & Plant(y)) -> (ConvertsCarbonDioxideWaterSunlightToCarbohydrates(x,y)))", "all x y z.((Photosynthesis(x) & Plant(y) & CarbonDioxide(z) & Water(z) & Sunlight(z)) -> MakesEnergyForPlant(x,y,z))", "all x y.((Photosynthesis(x) & Plant(y) & CarbonDioxide(x) & Water(x) & Sunlight(x)) -> MakesEnergyFor(x,y))", "all x.(Photosynthesis(x) -> (MakesEnergy(x) & ConvertsCarbonDioxideWaterSunlightToCarbohydrates(x)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideWaterSunlightToCarbohydrates(x) & MakesEnergyForPlant(x)))", "all x y z.((Photosynthesis(x) & Plant(y) & CarbonDioxide(z) & Water(z)) -> ConvertsToCarbohydrates(x,y,z))", "all x y.((Photosynthesis(x) & Plant(y)) -> (ConvertsCarbonDioxideWaterSunlightToCarbohydrates(x,y) & MakesEnergyForPlant(x,y)))", "(all x.(Photosynthesis(x) -> MakesEnergyForPlant(x)))", "all x.(Photosynthesis(x) -> (MakesEnergyForPlant(x) & ConvertsCarbonDioxideWaterSunlight(x) & ProducesCarbohydrates(x)))"]}
{"id": "entailmentbank_validation_544", "nl": "photosynthesis stores energy.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> StoresEnergy(x))", "all x y.((Photosynthesis(x) & Energy(y)) -> Stores(x,y))", "all x.(PhotosynthesisStoresEnergy(x) -> Photosynthesis(x))", "all x.(Photosynthesis(x) -> StoresEnergy(x))", "(PhotosynthesisStoresEnergy(Photosynthesis,Energy))", "all x.(PhotosynthesisStoresEnergy(x) -> PhotosynthesisStoresEnergy(x))", "all x y.((Photosynthesis(x) & Energy(y)) -> Stores(x,y))", "all x y z.((Photosynthesis(x) & Energy(y) & Energy(z)) -> Stores(x,y,z))", "all x.(Photosynthesis(x) -> StoresEnergy(x))", "all x.(PhotosynthesisStoresEnergy(x) -> StoresEnergy(x))", "all x y.((Photosynthesis(x) & Energy(y)) -> Stores(x,y))", "exists x.(PhotosynthesisStores(x) & Energy(x))", "exists x.(PhotosynthesisStore(x) & StoresEnergy(x))", "all x y.((Photosynthesis(x) & Energy(y)) -> Stores(x,y))", "exists x.(PhotosynthesisStores(x) & PhotosynthesisStores(x))", "all x y.((Photosynthesis(x) & Energy(y)) -> Stores(x,y))"]}
{"id": "entailmentbank_validation_545", "nl": "if something is required to use something else then that something is a source of that something else.", "fol": "", "prediction": ["all x y.((RequiredToUse(x,y) & Something(y)) -> SourceOf(y,x))", "all x.((RequiredToUse(x) & SourceOf(x,y)) -> SourceOf(x,y))", "all x y z.((RequiredToUse(x,y) & Something(z) & RequiredToUse(x,z)) -> SourceOf(x,z))", "all x y.((RequiredToUse(x,y) & Uses(y,x)) -> SourceOf(x,y))", "all x.((RequiredToUse(x) & Uses(x)) -> SourceOf(x,y))", "all x y.((RequiredToUse(x,y) & Something(x)) -> SourceOf(x,y))", "all x y.((Required(x) & Used(x,y)) -> SourceOf(x,y))", "all x.(RequiredToUse(x) -> SourceOf(x,y))", "all x y z.((RequiredToUse(x,y) & Something(z) & UsedToUse(x,z)) -> SourceOf(x,z))", "all x.((RequiredToUse(x) & SourceOf(x,y)) -> SourceOf(x,y))", "exists x.(RequiredToUse(x) & SourceOf(x,y))", "all x y.((RequiredForUse(x) & RequiredForUse(y)) -> SourceOf(x,y))", "exists x.(RequiredToUse(x,y) & SourceOf(x,y))", "all x.((RequiredToUse(x) & SourceOf(x,y)) -> SourceOf(y,z))", "exists x.(RequiredToUse(x) & SourceOf(x,y))", "all x y.((RequiredToUse(x,y) & Other(y)) -> SourceOf(x,y))"]}
{"id": "entailmentbank_validation_546", "nl": "respiration is a source of energy for living things.", "fol": "", "prediction": ["all x.(Respiration(x) -> SourceOfEnergyForLivingThings(x))", "all x y.((Respiration(x) & LivingThing(y)) -> SourceOfEnergy(x,y))", "all x.(Respiration(x) -> SourceOfEnergy(x))", "respiration is sourceofEnergyForLivingThings(respiration)", "all x y.((Respiration(x) & LivingThing(y)) -> SourceOfEnergy(x,y))", "all x y z.((Respiration(x) & LivingThing(y) & EnergySource(z)) -> SourceOf(x,y,z))", "all x.(Respiration(x) -> SourceOfEnergyForLivingThings(x))", "all x.(Rapiration(x) -> SourceOfEnergyForLivingThings(x))", "all x y.((Respiration(x) & LivingThing(y)) -> SourceOfEnergy(x,y))", "all x.((Respiration(x) & SourceOfEnergy(x)) -> LivingThing(x))", "all x.(Respiration(x) -> SourceOfEnergy(x))", "all x.(Respiration(x) -> SourceOfEnergyForLivingThings(x))", "all x y.((Respiration(x) & LivingThing(y)) -> SourceOfEnergy(x,y))", "all x y.((Respiration(x) & LivingThing(y)) -> SourceOfEnergy(x,y))", "all x.(Respiration(x) -> SourceOfEnergy(x))", "all x.(Respiration(x) -> SourceOfEnergyForLivingThings(x))"]}
{"id": "entailmentbank_validation_547", "nl": "if something releases something else then that something is the source of that something else.", "fol": "", "prediction": ["all x y.((Releases(x,y) & Something(y)) -> SourceOf(x,y))", "all x.((Releases(x,y) & Releases(x,y)) -> SourceOf(x,y))", "all x.((Releases(x) & Releases(x)) -> SourceOf(x,y))", "all x y.((Release(x,y) & Something(y)) -> SourceOf(x,y))", "all x y.((Releases(x,y) & Something(y)) -> SourceOf(y,x))", "all x.(Releases(x,y) -> SourceOf(x,y))", "all x y.((Releases(x,y) & Releases(x,y)) -> SourceOf(x,y))", "all x y z.((Release(x,y) & Something(z)) -> SourceOf(x,z))", "all x y.((Release(x,y) & SomethingOther(y)) -> SourceOf(x,y))", "all x y z.((Releases(x,y) & Something(z)) -> SourceOf(x,z))", "all x.((Releases(x,y) & SomethingOther(y)) -> SourceOf(x,y))", "exists x.(Releases(x,y) & Releases(x,y) & SourceOf(x,y))", "all x.(Releases(x,y) -> SourceOf(x,y))", "exists x.(Release(x) & Releases(x))", "exists x.(Releases(x,y) & Releases(y,z) & SourceOf(z,y))", "all x y.((Releases(x,y) & Something(x)) -> SourceOf(x,y))"]}
{"id": "entailmentbank_validation_548", "nl": "respiration releases energy.", "fol": "", "prediction": ["all x.(Respiration(x) -> ReleasesEnergy(x))", "all x y.((Respiration(x) & Energy(y)) -> Releases(x,y))", "all x.(Respiration(x) -> ReleasesEnergy(x))", "respiration(r) & ReleasesEnergy(r))", "all x y.((Respiration(x) & Energy(y)) -> Releases(x,y))", "all x.(Rapiration(x) -> ReleasesEnergy(x))", "all x.(Respiration(x) -> ReleasesEnergy(x))", "respiration releasesEnergy(respiration)", "respiration releasesenergy.", "all x y.((Respiration(x) & Energy(y)) -> Releases(x,y))", "all x.(Respiration(x) -> ReleasesEnergy(x))", "all x.(Rapiration(x) -> ReleasesEnergy(x))", "respiration releasesenergy.", "all x y.((Respiration(x) & Energy(y)) -> Releases(x,y))", "all x.(Respiration(x) -> ReleasesEnergy(x))", "all x.(Respiration(x) -> ReleasesEnergy(x))"]}
{"id": "entailmentbank_validation_549", "nl": "photosynthesis stores energy and respiration releases energy.", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & Respiration(y)) -> (StoresEnergy(x) & ReleasesEnergy(y)))", "(all x.(Photosynthesis(x) -> StoresEnergy(x)) & all y.(Respiration(y) -> ReleasesEnergy(y)))", "all x.(PhotosynthesisStoresEnergy(x) & RespirationReleasesEnergy(x))", "(all x y.((Photosynthesis(x) & Energy(y)) -> Stores(x,y)) & ((Respiration(x) & Energy(y)) -> Releases(x,y)))", "all x y.((Photosynthesis(x) & Respiration(y)) -> (StoresEnergy(x) & ReleasesEnergy(y)))", "all x y z.((Photosynthesis(x) & Respiration(y) & Energy(z)) -> (Stores(x,z) & Releases(y,z)))", "(all x.(Photosynthesis(x) -> StoresEnergy(x)) & all y.(Respiration(y) -> ReleasesEnergy(y)))", "all x.(PhotosynthesisStoresEnergy(x) & RespirationReleasesEnergy(x))", "all x y.((Photosynthesis(x) & Respiration(y)) -> (StoresEnergy(x) & ReleasesEnergy(y)))", "(all x y.((Photosynthesis(x) & Energy(y)) -> Stores(x,y)) & ((Respiration(x) & Energy(y)) -> Releases(x,y)))", "(all x.(Photosynthesis(x) -> StoresEnergy(x)) & (Respiration(x) -> ReleasesEnergy(x)))", "(all x.(Photosynthesis(x) -> StoresEnergy(x)) & all y.(Respiration(y) -> ReleasesEnergy(y)))", "all x y.((Photosynthesis(x) & respiration(y)) -> (StoresEnergy(x) & ReleasesEnergy(y)))", "all x.(PhotosynthesisStoresEnergy(x) & RespirationReleasesEnergy(x))", "all x y.((Photosynthesis(x) & Respiration(y)) -> (StoresEnergy(x) & ReleasesEnergy(y)))", "(all x.(Photosynthesis(x) -> StoresEnergy(x)) & all y.(Respiration(y) -> ReleasesEnergy(y)))"]}
{"id": "entailmentbank_validation_550", "nl": "digestion is when stomach acid breaks down food.", "fol": "", "prediction": ["all x.(Digestion(x) -> BreaksDownFood(x))", "all x y.((StomachAcid(x) & Food(y)) -> BreaksDown(x,y))", "all x.(Digestion(x) -> BreaksDownFood(x))", "all x.((StomachAcid(x) & BreaksDownFood(x)) -> Digestive(x))", "(BreaksDownFood(StomachAcid) & Food(StomachAcid))", "all x y.((StomachAcid(x) & Food(y)) -> BreaksDown(x,y))", "all x y z.((StomachAcid(x) & Food(y) & Food(z)) -> BreaksDown(x,y,z))", "all x.(Digestion(x) -> BreaksDownFood(x))", "all x.(Digestration(x) -> BreaksDownFood(x))", "(BreaksDownFood(StomachAcid) & Acid(StomachAcid))", "all x y.((StomachAcid(x) & Food(y) & BreaksDown(x,y)) -> Digestive(x))", "all x.((StomachAcid(x) & BreaksDownFood(x)) -> Digestive(x))", "all x y.((StomachAcid(x) & Food(y)) -> BreaksDown(x,y))", "exists x.(StomachAcid(x) & BreaksDownFood(x))", "all x y.((StomachAcid(x) & Food(y) & BreaksDown(x,y)) -> Digestive(x))", "all x.(Digestion(x) -> BreaksDownFood(x))"]}
{"id": "entailmentbank_validation_551", "nl": "the digestive system digests food for the body.", "fol": "", "prediction": ["all x y.((DigestiveSystem(x) & Body(y)) -> DigestsFoodFor(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> DigestsFor(x,y,z))", "all x.(DigestiveSystem(x) -> DigestsFoodForBody(x))", "all x y.((DigestiveSystem(x) & Body(y)) -> DigestsFood(x,y))", "(DigestiveSystem(d) & DigestsFoodForBody(d))", "the digestive system digests food for the body.", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> DigestsFor(x,y,z))", "all x.(DigestiveSystem(x) -> DigestsFoodForBody(x))", "all x y.((DigestiveSystem(x) & Food(y)) -> DigestsForBody(x,y))", "(DigestiveSystem(d) & DigestsFoodForBody(d))", "all x.(DigestiveSystem(x) -> DigestsFoodForBody(x))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> DigestsFor(x,y,z))", "all x y.((DigestiveSystem(x) & Body(y)) -> DigestsFoodFor(x,y))", "all x.(DigestiveSystem(x) -> DigestsFoodForBody(x))", "all x y.((DigestiveSystem(x) & Food(y)) -> DigestsForBody(x,y))", "all x.(DigestiveSystem(x) -> DigestsFoodForBody(x))"]}
{"id": "entailmentbank_validation_552", "nl": "the digestive system breaks down food.", "fol": "", "prediction": ["all x.(DigestiveSystem(x) -> BreaksDownFood(x))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDown(x,y))", "all x.(DigestiveSystem(x) -> BreaksDownFood(x))", "(BreaksDownFood(DigestiveSystem)", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDown(x,y))", "the digestive system breaks down food.", "all x.(DigestiveSystem(x) -> BreaksDownFood(x))", "all x y.((DigestiveSystem(x) & Food(y) & BreaksDown(x,y)) -> BreaksDown(x,y))", "(BreaksDownFood(DigestiveSystem)", "all x.(BreaksDownFood(x) -> DigestiveSystem(x))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDown(x,y))", "(BreaksDownFood(diabeticSystem)", "exists x.(GastralSystem(x) & BreaksDownFood(x))", "all x.(DigestiveSystem(x) -> BreaksDownFood(x))", "all x.(DigestiveSystem(x) -> BreaksDownFood(x))", "all x.(DigestiveSystem(x) -> BreaksDownFood(x))"]}
{"id": "entailmentbank_validation_553", "nl": "if something is made of something else then that something can be broken down into that something else.", "fol": "", "prediction": ["all x y.((MadeOf(x,y) & MadeOf(x,y)) -> BrokenDownInto(x,y))", "all x.((MadeOf(x,y) & MadeOf(y,z)) -> CanBeBreakdownInto(x,z))", "all x.((MadeOf(x,y) & MadeOf(x,y)) -> BrokenDownInto(x,y))", "all x y.((MadeOf(x,y) & MadeOf(x,y)) -> CanBeBreakdownInto(x,y))", "all x y z.((MadeOf(x,y) & MadeOf(x,z)) -> CanBeBreakdownInto(x,y,z))", "exists x.(MadeOf(x,y) & MadeOf(y,z) & BrokenDownInto(z,y))", "all x.((MadeOf(x,y) & MadeOf(y)) -> CanBeBreakdownInto(x,y))", "exists x.(MadeOf(x,y) & MadeOf(x,y)) -> BrokenDownInto(x,y))", "all x y.((MadeOf(x,y) & MadeOf(y,x)) -> BreaksDownInto(x,y))", "all x.((MadeOf(x,y) & MakesOf(x,y)) -> CanBeBreakdownInto(x,y))", "all x y.((MadeOf(x,y) & MakesOf(x,y)) -> CanBeBreakdownInto(x,y))", "all x.((MadeOf(x,y) & MadeOf(x,y)) -> BreaksDownInto(x,y))", "all x y.((MadeOf(x,y) & MadeOf(x,y)) -> BrokenDownInto(x,y))", "exists x.(MadeOf(x,y) & MadeOf(y,z) & BrokenDownInto(z,x))", "all x y.((MadeOf(x,y) & MadeOf(x,y)) -> CanBeBreakdownInto(x,y))", "exists x.(MadeOf(x,y) & MadeOf(x,y))"]}
{"id": "entailmentbank_validation_554", "nl": "if something is made of something else then that something contains that something else.", "fol": "", "prediction": ["all x.((MadeOf(x,y) & MadeOf(x,y)) -> Contains(x,y))", "all x y.((MadeOf(x,y) & MadeOf(x,y)) -> Contains(x,y))", "all x.((MadeOf(x,y) & MadeOf(y,z)) -> Contains(x,z))", "all x y z.((MadeOf(x,y) & MadeOf(x,z)) -> Contains(x,y,z))", "all x y.((MadeOf(x,y) & MadeOf(x,y)) -> Contains(x,y))", "exists x.(MadeOf(x,y) & MadeOf(y,z) & Contains(z,y))", "all x.((MadeOf(x,y) & MadeOf(x,y)) -> Contains(x,y))", "all x.((MadeOf(x,y) & MadeOf(y)) -> Contains(x,y))", "exists x.(MadeOf(x,y) & MadeOf(y,z) & MadeOf(z,y) & Contains(x,z))", "all x y.((MadeOf(x,y) & MadeOf(x,y)) -> Contains(x,y))", "all x.((MadeOf(x,y) & MakesOf(x,y)) -> Contains(x,y))", "exists x.(MadeOf(x,y) & MadeOf(x,y))", "all x y.((MadeOf(x,y) & MakesOf(x,y)) -> Contains(x,y))", "exists x.(MadeOf(x,y) & Contains(x,z) & MadeOf(y,z))", "all x y.((MadeOf(x,y) & MadeOf(y,x)) -> Contains(x,y))", "all x y.((MadeOf(x,y) & Other(y)) -> Contains(x,y))"]}
{"id": "entailmentbank_validation_555", "nl": "if something contains something else then that something can be broken down into that something else.", "fol": "", "prediction": ["all x.((Contents(x) & Contains(x,y)) -> CanBeBreakdownInto(x,y))", "all x y.((Content(x) & Contains(x,y)) -> CanBeBreakdownInto(x,y))", "all x.((Contains(x,y) & Contains(y)) -> CanBeBreakdownInto(x,y))", "all x.((Contents(x,y) & Contains(x,y)) -> CanBeBreakdownInto(x,y))", "all x.((Containing(x,y) & Contains(x,y)) -> CanBeBreakdownInto(x,y))", "all x y z.((Content(x) & Contains(x,y) & Contains(y,z)) -> CanBeBreakdownInto(x,z))", "all x y.((Content(x) & Contains(x,y)) -> CanBeBreakdownInto(x,y))", "all x.((ContainsSomething(x) & BrokenDownInto(x)) -> ContainsSomethingOther(x))", "all x y.((Content(x) & Contains(x,y)) -> BreaksDownInto(x,y))", "all x y.((Contains(x,y) & Contains(x,y)) -> CanBeBreakdownInto(x,y))", "all x y z.((Content(x) & Contains(x,y) & Something(z)) -> CanBeBreakdownInto(x,z))", "exists x.(Contents(x) & BrokenDownInto(x))", "exists x.(Breakdown(x) -> (Containing(x,y) & Contains(x,y)))", "exists x.(Containing(x,y) & Contains(x,y))", "exists x.(Contents(x) & BrokenDownInto(x))", "all x y.((Content(x) & Contains(x,y)) -> BrokenDownInto(x,y))"]}
{"id": "entailmentbank_validation_556", "nl": "the digestive system breaks down food into the substances it contains.", "fol": "", "prediction": ["all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoSubstances(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Substance(z)) -> BreaksDownInto(x,y,z))", "all x.(DigestiveSystem(x) -> BreaksDownIntoSubstances(x))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoSubstances(x,y))", "(BreaksDownFoodIntoSubstances(digestionSystem))", "all x.(BreaksDownFood(x) -> ContainsSubstances(x))", "all x y z.((DigestiveSystem(x) & Food(y) & Substance(z)) -> BreaksDownInto(x,y,z))", "all x.((DigestiveSystem(x) & BreaksDownFood(x)) -> ContainsSubstances(x))", "all x.(DigestiveSystem(x) -> BreaksDownFoodIntoSubstances(x))", "(BreaksDownFoodIntoSubstances(DigestiveSystem))", "all x.(BreaksDownFoodIntoSubstances(x) -> DigestiveSystem(x))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoSubstances(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Substance(z)) -> BreaksDownInto(x,y,z))", "exists x.(DigestiveSystem(x) & BreaksDownFood(x) & ContainsSubstances(x))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoSubstances(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Substance(z)) -> BreaksDownInto(x,y,z))"]}
{"id": "entailmentbank_validation_557", "nl": "food contains nutrients for living things.", "fol": "", "prediction": ["all x.(Food(x) -> ContainsNutrientsForLivingThings(x))", "all x y.((Food(x) & LivingThing(y)) -> ContainsNutrients(x,y))", "all x.(Food(x) -> ContainsNutrientsForLivingThings(x))", "all x y z.((Food(x) & Nutrient(y) & LivingThing(z)) -> Contains(x,y,z))", "all x.(Food(x) -> ContainsNutrients(x))", "all x y.((Food(x) & LivingThing(y)) -> ContainsNutrients(x,y))", "all x.(Food(x) -> ContainsNutrientsForLivingThings(x))", "all x y.((Food(x) & LivingThing(y)) -> ContainsNutrients(x,y))", "all x.(Food(x) -> ContainsNutrientsForLivingThings(x))", "all x y.((Food(x) & LivingThing(y)) -> ContainsNutrients(x,y))", "exists x.(Food(x) & Nutrients(x) & LivingThing(x))", "exists x.(Food(x) & Nutrients(x) & ForLivingThings(x))", "all x.(Food(x) -> ContainsNutrientsForLiving(x))", "all x y.((Food(x) & LivingThing(y)) -> ContainsNutrients(x,y))", "all x.(Food(x) -> (ContainsNutrients(x,livingThing)))", "exists x.(Food(x) & ContainsNutrientsForLiving(x))"]}
{"id": "entailmentbank_validation_558", "nl": "the digestive system breaks down food into nutrients for the body.", "fol": "", "prediction": ["all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoNutrients(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> BreaksDownIntoNutrients(x,y,z))", "all x.(DigestiveSystem(x) -> BreaksDownFoodIntoNutrients(x))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoNutrients(x,y))", "(BreaksDownFoodIntoNutrients(digestionSystem) & Body(d))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> BreaksDownIntoNutrients(x,y,z))", "all x y z.((DigestiveSystem(x) & Food(y) & Nutrients(z)) -> BreaksDownInto(x,y,z))", "all x.(DigestiveSystem(x) -> BreaksDownFoodIntoNutrients(x))", "all x y.((DigestiveSystem(x) & Body(y)) -> BreaksDownFoodIntoNutrients(x,y))", "(BreaksDownFoodIntoNutrientsForBody(digestiveSystem)", "all x.(BreaksDownFood(x) -> NutrientsForBody(x))", "all x.(DigestiveSystem(x) -> BreaksDownFoodIntoNutrients(x))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> BreaksDownIntoNutrients(x,y,z))", "exists x.(DigestiveSystem(x) & BreaksDownFood(x) & ProducesNutrients(x))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoNutrients(x,y))", "all x.(DigestiveSystem(x) -> BreaksDownFoodIntoNutrients(x))"]}
{"id": "entailmentbank_validation_559", "nl": "scales are a covering around the body of a scaled animal.", "fol": "", "prediction": ["all x y.((Scales(x) & ScaledAnimal(y)) -> CoversAboutBody(x,y))", "all x.(Scales(x) -> CoversBodyOfScales(x))", "all x y z.((Scales(x) & ScaledAnimal(y) & Body(z)) -> Covering(x,y,z))", "all x.(Scales(x) -> (CoveringAboveBody(x) & ScaledAnimal(x)))", "all x y.((Scales(x) & ScaledAnimal(y)) -> CoveringAroundBody(x,y))", "(CoveringAroundBodyOfScaledAnimal(scales))", "all x.(Scales(x) -> CoversAboutBodyOfScales(x))", "all x.(Scales(x) -> (CoveringAroundBodyOfScales(x) & ScaledAnimal(x)))", "all x y z.((Scales(x) & ScaledAnimal(y) & Body(z)) -> CoversAround(x,y,z))", "all x y.((Scales(x) & ScaledAnimal(y)) -> CoversBody(x,y))", "all x y.((Scales(x) & ScalpedAnimal(y)) -> CoversAboutBody(x,y))", "all x y z.((Scales(x) & ScaledAnimal(y) & Body(z)) -> Covering(x,y,z))", "all x.(Scales(x) -> CoveringAroundBodyOfScales(x))", "all x.(Scales(x) -> CoversAboutBodyOfScales(x))", "all x y.((Scales(x) & ScaledAnimal(y)) -> CoveringAroundBody(x,y))", "all x.(Scales(x) -> (CoversAboutBody(x) & ScaledAnimal(x)))"]}
{"id": "entailmentbank_validation_560", "nl": "a fish is a kind of scaled animal.", "fol": "", "prediction": ["all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x y.((Fish(x) & ScaledAnimal(y)) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x y.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScalpedAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x y.(Fish(x) -> ScaledAnimal(x,y))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScalpedAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "exists x.(Fish(x) & ScaledAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "exists x.(Fish(x) & ScalpedAnimal(x))", "exists x.(Fish(x) & ScalpedAnimal(x))"]}
{"id": "entailmentbank_validation_561", "nl": "fish is a kind of scaled animal with scales covering around the body.", "fol": "", "prediction": ["all x.(Fish(x) -> (Scales(x) & ScalesCovering(x)))", "all x y.((Fish(x) & ScaledAnimal(y)) -> HasScalesCoveringAroundBody(x,y))", "all x.(Fish(x) -> (Scales(x) & ScalesCoveringBody(x)))", "all x.(Fish(x) -> (ScaledAnimal(x) & ScalesCoveringAroundBody(x)))", "all x.(Fish(x) -> (Scales(x) & Scales(x) & CoversBody(x)))", "all x y.(Fish(x) -> (Scales(y) & Scales(x,y) & CoversBody(x,y)))", "all x y z.((Fish(x) & ScaledAnimal(y) & Scales(z) & CoversBody(x,z)) -> ScaledAnimal(x))", "all x.(Fish(x) -> (Scales(x) & ScalesCovering(x)))", "all x y.(Fish(x) -> (Scales(y) & ScaledAnimal(x,y) & CoversBody(x,y)))", "all x y.(Fish(x) -> (Scales(y) & ScaledAnimal(x,y) & CoversBody(x,y)))", "all x.(Fish(x) -> (Scales(x) & ScalesCoveringBody(x)))", "all x.(Fish(x) -> (Scales(x) & CoversBody(x)))", "all x.(Fish(x) -> (ScaledAnimal(x) & ScalesCoveringAroundBody(x)))", "exists x.(Fish(x) & ScaledAnimal(x) & HasScalesCoveringAroundBody(x))", "all x.(Fish(x) -> (Scales(x) & ScalesCoveringBody(x)))", "all x.(Fish(x) -> ScaledAnimal(x))"]}
{"id": "entailmentbank_validation_562", "nl": "scales are used for protection by scaled animals.", "fol": "", "prediction": ["all x.(Scales(x) -> UsedForProtection(x))", "all x y.((Scales(x) & ScaledAnimal(y)) -> UsedForProtection(x,y))", "all x.(Scales(x) -> UsedForProtectionByScaledAnimals(x))", "all x y z.((Scales(x) & ScaledAnimal(y) & ScaledAnimal(z)) -> UsedForProtection(x,y,z))", "(all x.(Scales(x) -> UsedForProtection(x,scaledAnimals))", "all x y.((Scales(x) & ScaledAnimal(y)) -> UsedForProtection(x,y))", "all x y.((Scales(x) & ScalpedAnimal(y)) -> UsedForProtection(x,y))", "all x.(Scales(x) -> UsedForProtection(x,scaledAnimals))", "all x y z.((Scales(x) & ScaledAnimal(y) & ScaledAnimal(z)) -> UsedForProtection(x,y,z))", "all x y.((Scales(x) & ScalpedAnimal(y)) -> UsedForProtection(x,y))", "all x.(Scales(x) -> UsedForProtectionByScales(x))", "all x.(Scales(x) -> (UsedForProtection(x,scaledAnimals) & UsedForProtection(x,scaledAnimals)))", "all x y.((Scales(x) & ScalpedAnimal(y)) -> UsedForProtection(x,y))", "all x.(Scales(x) -> UsedForProtectionByScaledAnimals(x))", "all x.(Scales(x) -> UsedForProtection(x))", "all x.(Scales(x) -> UsedForProtection(x,scaledAnimals))"]}
{"id": "entailmentbank_validation_563", "nl": "scales are used for protection by fish.", "fol": "", "prediction": ["all x.(Scales(x) -> UsedForProtection(x))", "all x y.((Scales(x) & Fish(y)) -> UsedForProtection(x,y))", "all x.(Scales(x) -> UsedForProtectionByFish(x))", "(all x.(Scales(x) -> UsedForProtection(x,fish)))", "all x y.((Scales(x) & Fish(y)) -> UsedForProtection(x,y))", "all x y z.((Scales(x) & Fish(y) & Fish(z)) -> UsedForProtection(x,y,z))", "all x.(Scales(x) -> UsedForProtection(x,fish))", "all x y z.((Scales(x) & Fish(y) & Scale(z)) -> UsedForProtection(x,y,z))", "all x y.((Scales(x) & Fish(y)) -> UsedForProtection(x,y))", "all x.(Scales(x) -> UsedForProtectionByFish(x))", "all x y.((Scales(x) & Fish(y)) -> UsedForProtection(x,y))", "all x.(Scales(x) -> UsedForProtection(x))", "all x.(Scale(x) -> UsedForProtectionByFish(x))", "all x y.((Scales(x) & Fish(y)) -> UsedForProtection(x,y))", "all x.(Scales(x) -> UsedForProtectionByFish(x))", "all x.(Scale(x) -> UsedForProtection(x,fish))"]}
{"id": "entailmentbank_validation_564", "nl": "a human is a kind of animal.", "fol": "", "prediction": ["all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x y.((Human(x) & Animal(y)) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x y.(Habitat(x) -> Animal(y))", "all x y.(Human(x) -> Animal(y))", "all x.(Human(x) -> Animal(x))", "exists x.(Habitat(x) & Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "exists x.(Human(x) & Animal(x))", "exists x.(Human(x) & Animal(x))", "exists x.(Human(x) & Animal(x))"]}
{"id": "entailmentbank_validation_565", "nl": "an animal is a kind of living thing.", "fol": "", "prediction": ["all x.(Animal(x) -> LivingThing(x))", "all x.(Animal(x) -> LivingThing(x))", "all x y.((Animal(x) & LivingThing(y)) -> LivingThing(x))", "all x.(Animal(x) -> LivingThing(x))", "all x y.((Animal(x) & LivingThing(y)) -> LivingThing(x))", "all x.(Animal(x) -> LivingThing(x))", "all x y.(LivingThing(x) -> Animal(x))", "all x.(Animal(x) -> LivingThing(x))", "all x.(Animal(x) -> LivesThing(x))", "all x.(Animal(x) -> LivingThing(x))", "all x.(Animal(x) -> LivingThing(x))", "exists x.(Animal(x) & LivesThing(x))", "all x.(Animal(x) -> LivingThing(x))", "exists x.(Animal(x) & LivesThing(x))", "exists x.(Animal(x) & LivingThing(x))", "exists x.(Animal(x) & LivingDing(x))"]}
{"id": "entailmentbank_validation_566", "nl": "a human is a kind of living thing.", "fol": "", "prediction": ["all x.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivingThing(x))", "all x y.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivingThing(x))", "all x y.(Human(x) -> LivingThing(x,y))", "all x.(Human(x) -> LivesThing(x))", "all x.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivingThing(x))", "all x y.(Human(x) -> LivingThing(x,y))", "all x.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivingThing(x))", "exists x.(Human(x) & LivesThing(x))", "exists x.(Human(x) & LivingThing(x))", "exists x.(Human(x) & LivesThing(x))", "exists x.(Human(x) & LivingThing(x))"]}
{"id": "entailmentbank_validation_567", "nl": "a plant is a kind of living thing.", "fol": "", "prediction": ["all x.(Plant(x) -> LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))", "all x y.((Plant(x) & LivingThing(y)) -> LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))", "all x y.((Plant(x) & LivingThing(y)) -> LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))", "all x y.(LivingThing(x) -> Plant(x))", "all x y.(LivingThing(x) -> Plant(x))", "all x.(Plant(x) -> LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))", "exists x.(Plant(x) & LivesThing(x))", "exists x.(Plant(x) & LivingThing(x))", "exists x.(Plant(x) & LivesThing(x))", "exists x.(Plant(x) & LivingThing(x))"]}
{"id": "entailmentbank_validation_568", "nl": "an apple tree is a kind of plant.", "fol": "", "prediction": ["all x.(AppleTree(x) -> Plant(x))", "all x y.((AppleTree(x) & Plant(y)) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x y.((AppleTree(x) & Plant(y)) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x y.((AppleTree(x) & Plant(y)) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x y.((AppleTree(x) & Plant(y)) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "exists x.(AppleTree(x) & Plant(x))", "exists x.(AppleTree(x) & Tree(y) & Plant(x))", "exists x.(AppleTree(x) & Plant(x))", "exists x.(AppleTree(x) & Plant(x))"]}
{"id": "entailmentbank_validation_569", "nl": "an apple tree is a kind of living thing.", "fol": "", "prediction": ["all x.(AppleTree(x) -> LivingThing(x))", "all x y.((AppleTree(x) & LivingThing(y)) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x y.((AppleTree(x) & LivingThing(y)) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x y.((AppleTree(x) & LivingThing(x)) -> LivingThing(y))", "all x y.((AppleTree(x) & LivingThing(y)) -> LivesIn(x,y))", "all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivesThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "exists x.(AppleTree(x) & LivingThing(x))", "exists x.(AppleTree(x) & LivesThing(x))", "exists x.(AppleTree(x) & LivingThing(x))", "exists x.(AppleTree(x) & LivingThing(x))"]}
{"id": "entailmentbank_validation_570", "nl": "all living things are made of cells according to the cell theory.", "fol": "", "prediction": ["all x.(LivingThing(x) -> MadeOfCells(x))", "all x y.((LivingThing(x) & CellTheory(y)) -> MadeOfCells(x,y))", "all x.((LivingThing(x) & CellTheory(x)) -> MadeOfCells(x))", "all x.(LivingThing(x) -> MadeOfCells(x))", "all x y.((LivingThing(x) & CellTheory(y)) -> MadeOfCells(x,y))", "all x.(LivingThing(x) -> MadeOfCells(x))", "(all x.(LivingThing(x) -> MadeOfCells(x)))", "all x.((LivingThing(x) & MadeOfCells(x)) -> CellTheory(x))", "all x y.((LivingThing(x) & CellTheory(y)) -> MadeOfCells(x,y))", "all x.(LivingThing(x) -> MadeOfCells(x))", "(all x.(LivingThing(x) -> MadeOfCells(x)))", "all x y.((LivingThing(x) & CellTheory(y)) -> MadeOf(x,y))", "all x.(LivingThing(x) -> CellTheory(x))", "all x.(LivingThing(x) -> MadeOfCells(x))", "all x y.((LivingThing(x) & CellTheory(y)) -> MadeOfCells(x,y))", "all x.(CellTheory(x) -> MakesOfCells(x))"]}
{"id": "entailmentbank_validation_571", "nl": "both the human and the apple tree are made of cells.", "fol": "", "prediction": ["all x.((Human(x) & AppleTree(x)) -> MadeOfCells(x))", "(MadeOfCells(Human) & MadeOfCells(AppleTree))", "all x y.((Human(x) & AppleTree(y)) -> MadeOfCells(x))", "all x.(Human(x) & AppleTree(x) -> MadeOfCells(x))", "both the human and apple tree are made of cells.", "all x.((Human(x) & AppleTree(x)) -> MadeOfCells(x))", "(MadeOfCells(Human,Cells) & MadeOfCells(Apple,Cells))", "(MadeOfCells(Human) & MadeOfCells(AppleTree))", "all x.((Human(x) | AppleTree(x)) -> MadeOfCells(x))", "(MadeOfCells(HumanTree) & MadeOfCells(AppleTree))", "all x y.((Human(x) & AppleTree(y)) -> MadeOfCells(x))", "all x y.((Human(x) & AppleTree(y)) -> (MadeOfCells(x) & MadeOfCells(y)))", "all x y.((HumanTree(x) & AppleTree(y)) -> MadeOfCells(x))", "exists x.(Human(x) & AppleTree(x) & MadeOfCells(x))", "((HumanTree(human) & AppleTree(apple)) -> MadeOfCells(human,cells))", "exists x.(HumanTree(x) & AppleTree(x) & MadeOfCells(x))"]}
{"id": "entailmentbank_validation_572", "nl": "a plant cell is a kind of cell.", "fol": "", "prediction": ["all x.(PlantCell(x) -> Cell(x))", "all x.(PlantCell(x) -> Cell(x))", "all x y.((PlantCell(x) & Cell(y)) -> Cell(x))", "all x.(PlantCell(x) -> Cell(x))", "all x y.((PlantCell(x) & Cell(y)) -> Cell(x))", "all x.(PlantCell(x) -> Cell(x))", "all x y.((PlantCell(x) & Plant(y)) -> Cell(x))", "all x y.((PlantCell(x) & Cell(y)) -> SortOf(x,y))", "all x.(PlantCell(x) -> Cell(x))", "exists x.(PlantCell(x) & SortOfCell(x))", "all x.(PlantCell(x) -> Cell(x))", "all x.(PlantCell(x) -> Cell(x))", "exists x.(PlantCell(x) & Cell(y) & Contains(x,y))", "all x.(PlantCell(x) -> Cell(x))", "exists x.(PlantCell(x) & SortOfCell(x))", "exists x.(PlantCell(x) & KindOfCell(x))"]}
{"id": "entailmentbank_validation_573", "nl": "a cell nucleus is a part of a cell.", "fol": "", "prediction": ["all x y.((CellNucleus(x) & Cell(y)) -> PartOf(x,y))", "all x.(CellNucleus(x) -> PartOfCell(x))", "all x y z.((CellNucleus(x) & Cell(y) & Cell(z)) -> PartOf(x,y,z))", "all x y.((CellNucleus(x) & Cell(y)) -> PartOf(x,y))", "all x.(CellNucleus(x) -> PartOfCell(x))", "all x.((CellNucleus(x) & PartOfCell(x)) -> PartOfCell(x))", "all x y.((CellNucleus(x) & Cell(y)) -> PartOf(x,y))", "all x y z.((CellNucleus(x) & Cell(y) & Cell(z)) -> PartOf(x,y,z))", "all x.(CellNucleus(x) -> PartOfCell(x))", "all x y.((CellNucleus(x) & Cell(y) & PartOf(x,y)) -> PartOf(x,y))", "all x y.((CellNucleus(x) & Cell(y)) -> PartOf(x,y))", "all x.(CellNucleus(x) -> PartOfCell(x))", "all x y.((CellNucleus(x) & Cell(y) & PartOf(x,y)) -> PartOf(x,y))", "exists x.(CellNucleus(x) & PartOfCell(x))", "exists x.(CellNucleus(x) & PartOfCell(x))", "exists x.(CellNucleus(x) & PartOfCell(x))"]}
{"id": "entailmentbank_validation_574", "nl": "a cell nucleus is a part of a plant cell.", "fol": "", "prediction": ["all x.(CellNucleus(x) -> PartOfPlantCell(x))", "all x y.((CellNucleus(x) & PlantCell(y)) -> PartOf(x,y))", "all x y z.((CellNucleus(x) & PlantCell(y) & PlantCell(z)) -> PartOf(x,y,z))", "all x.((CellNucleus(x) & PlantCell(x)) -> PartOf(x,y))", "all x.(CellNucleus(x) -> PartOfPlantCell(x))", "all x y.((CellNucleus(x) & PlantCell(y)) -> PartOf(x,y))", "all x.(CellNucleus(x) -> PartOfPlantCell(x))", "all x y z.((CellNucleus(x) & PlantCell(y) & PlantCell(z)) -> PartOf(x,y,z))", "all x y.((CellNucleus(x) & PlantCell(y)) -> PartOf(x,y))", "all x.(CellNucleus(x) -> PartOfPlantCell(x))", "all x y.((CellNucleus(x) & PlantCell(y)) -> PartOf(x,y))", "all x y.((CellNucleus(x) & PlantCell(y) & PartOf(x,y)) -> PartOf(x,y))", "exists x.(CellNucleus(x) & PlantCell(x))", "all x y.((CellNucleus(x) & PlantCell(y)) -> PartOf(x,y))", "all x.(CellNucleus(x) -> PartOfPlantCell(x))", "exists x.(CellNucleus(x) & PlantCell(x))"]}
{"id": "entailmentbank_validation_575", "nl": "a cell wall is a part of a plant cell for supporting and protecting the cell membrane.", "fol": "", "prediction": ["all x y.((CellWall(x) & PlantCell(y)) -> (PartOf(x,y) & SupportsAndProtectsCellMembrane(x)))", "all x.(CellWall(x) -> (PartOfPlantCell(x) & SupportsAndProtectsCellMembrane(x)))", "all x y z.((CellWall(x) & PlantCell(y) & CellMembrane(z)) -> (PartOf(x,y) & SupportsAndProtects(x,z)))", "all x y.((CellWall(x) & PlantCell(y)) -> SupportsAndProtectsCellMembrane(x,y))", "all x.((CellWall(x) & PlantCell(x)) -> SupportsAndProtectsCellMembrane(x))", "all x.(CellWall(x) -> (PartOfPlantCell(x) & SupportsAndProtectsCellMembrane(x)))", "all x y.((CellWall(x) & PlantCell(y)) -> (PartOf(x,y) & SupportsAndProtectsCellMembrane(x)))", "all x y z.(CellWall(x) -> (PartOfPlantCell(x,y) & SupportsAndProtectsCellMembrane(x,z)))", "all x.(CellWall(x) -> PartOfPlantCell(x))", "all x.(CellWall(x) -> (PartOfPlantCell(x) & SupportsCellMembrane(x) & ProtectsCellMembrane(x)))", "all x y.((CellWall(x) & PlantCell(y) & PartOf(x,y)) -> SupportsAndProtectsCellMembrane(x,y))", "all x y z.((CellWall(x) & PlantCell(y) & CellMembrane(z)) -> PartOf(x,y,z))", "all x.(CellWall(x) -> (PartOfPlantCell(x) & SupportsAndProtectsCellMembrane(x)))", "all x y.((CellWall(x) & PlantCell(y) & SupportsAndProtectsCellMembrane(x,y)) -> PartOf(x,y))", "exists x.(CellWall(x) & PlantCell(x) & SupportsAndProtectsCellMembrane(x))", "all x.(CellWall(x) -> PartOfPlantCell(x))"]}
{"id": "entailmentbank_validation_576", "nl": "chloroplast is a part of a plant cell.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> PartOfPlantCell(x))", "all x y.((Chlorophyll(x) & PlantCell(y)) -> PartOf(x,y))", "(PartOfPlantCell(chlorophyll) & PartOfPlantCell(chlorophyll))", "all x.(Chlorophyll(x) -> PartOfPlantCell(x))", "all x y z.((Chlorophyll(x) & PlantCell(y) & PlantCell(z)) -> PartOf(x,y,z))", "(PartOfPlantCell(chlorophyll) & PartOfPlantCell(chlorophyll))", "all x y.((Chlorophyll(x) & PlantCell(y)) -> PartOf(x,y))", "all x.(Chlorophyll(x) -> PartOfPlantCell(x))", "all x.(Chlorophyll(x) -> PlantCell(x))", "all x y.((Chlorophyll(x) & PlantCell(y)) -> PartOf(x,y))", "all x.(Chlorophyll(x) -> PartOfPlantCell(x))", "all x.(Chloroplast(x) -> PartOfPlantCell(x))", "all x.(Chlorophyll(x) -> PartOfPlantCell(x))", "all x y.((Chlorophyll(x) & PlantCell(y)) -> PartOf(x,y))", "all x.(Claroplast(x) -> PlantCell(x))", "exists x.(Chlorophyll(x) & PlantCell(x))"]}
{"id": "entailmentbank_validation_577", "nl": "a cell nucleus, chloroplast and a cell wall are part of a plant cell.", "fol": "", "prediction": ["all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> (PartOfPlantCell(x) & PartOfPlantCell(x)))", "all x.((CellNucleus(x) & Chlorophyll(x) & CellWall(x)) -> PlantCell(x))", "all x.((CellNucleus(x) | Chlorophyll(x) | CellWall(x)) -> PlantCell(x))", "(PartOfPlantCell(CellNucleus) & PartOfPlantCell(Chlorophyll) & PartOfPlantCell(CellWall))", "all x y.((CellNucleus(x) & Chlorophyll(y) & CellWall(y)) -> PlantCell(x))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> PartOfPlantCell(x))", "(PartOfPlantCell(x) & CellNucleus(x) & Chlorophyll(x) & CellWall(x))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> (PartOfPlantCell(x,y) & PartOfPlantCell(x,z)))", "all x.((CellNucleus(x) & Chlorophyll(x) & CellWall(x)) -> PlantCell(x))", "exists x.(PlantCell(x) & (CellNucleus(x) | Chlorophyll(x) | CellWall(x)))", "all x y.((CellNucleus(x) & Chlorophyll(y) & CellWall(y)) -> PlantCell(x))", "all x.((CellNucleus(x) | Chlorophyll(x) | CellWall(x)) -> PlantCell(x))", "(PartOfPlantCell(CellNucleus) & PartOfPlantCell(CellWall))", "(PartOfPlantCell(cnucleus,cloplast,cellWall))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> PartOfPlantCell(x))", "all x.((CellNucleus(x) & Chlorophyll(x) & CellWall(x)) -> PlantCell(x))"]}
{"id": "entailmentbank_validation_578", "nl": "a computer room is used to control the assembly process in a factory.", "fol": "", "prediction": ["all x y.((ComputerRoom(x) & Factory(y)) -> ControlsAssemblyProcess(x,y))", "all x y z.((ComputerRoom(x) & Factory(y) & AssemblyProcess(z)) -> ControlsIn(x,y,z))", "all x.(ComputerRoom(x) -> ControlsAssemblyProcessInFactory(x))", "all x y.((ComputerRoom(x) & Factory(y)) -> ControlsAssemblyProcess(x,y))", "all x y z.((ComputerRoom(x) & Factory(y) & AssemblyProcess(z)) -> UsedToControl(x,y,z))", "all x y.((ComputerRoom(x) & Factory(y)) -> UsedToControlAssemblyProcess(x,y))", "all x.(ComputerRoom(x) -> ControlsAssemblyProcess(x))", "all x y z.((ComputerRoom(x) & Factory(y) & AssemblyProcess(z) & UsedToControl(x,y,z)) -> ControlsIn(x,y,z))", "all x.(ComputerRoom(x) -> ControlsAssemblyProcessInFabric(x))", "all x.(ComputerRoom(x) -> UsedToControlAssemblyProcessInFactory(x))", "all x y z.((ComputerRoom(x) & Factory(y) & AssemblingProcess(z)) -> UsedToControl(x,y,z))", "exists x.(ComputerRoom(x) & ControlsAssembly(x) & InFactory(x))", "all x y.((ComputerRoom(x) & Factory(y)) -> ControlsAssemblyProcessIn(x,y))", "all x y z.((ComputerRoom(x) & Factory(y) & AssemblyProcess(z)) -> ControlsIn(x,y,z))", "exists x.(ComputerRoom(x) & ControlsAssemblyProcess(x) & InFactory(x))", "all x y.((ComputerRoom(x) & Factory(y)) -> UsedToControlAssemblyProcessIn(x,y))"]}
{"id": "entailmentbank_validation_579", "nl": "the cell nucleus controls many of the functions of the cell.", "fol": "", "prediction": ["all x y.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))", "all x.(CellNucleus(x) -> ControlsFunctionsOfCell(x))", "all x y z.((CellNucleus(x) & Cell(y) & Function(z)) -> Controls(x,y,z))", "all x.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))", "(ControlsFunctionsOfCell(nucleus) & CellNucleus(nucleus))", "all x y.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))", "all x.(CellNucleus(x) -> ControlsFunctions(x))", "all x y z.((CellNucleus(x) & Cell(y) & Function(z)) -> Controls(x,y,z))", "all x.(CellNucleus(x) -> ControlsFunctionsOfCell(x))", "all x y.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))", "all x.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))", "many functions of cell.", "all x.(CellNucleus(x) -> ControlsFunctionsOfCell(x))", "all x y.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))", "exists x.(CellNucleus(x) & ControlsFunctions(x))", "all x y.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))"]}
{"id": "entailmentbank_validation_580", "nl": "controlling is a kind of function.", "fol": "", "prediction": ["all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x y.((Controlling(x) & Function(y)) -> Function(x,y))", "all x.(Controlling(x) -> Function(x))", "all x y.((Controlling(x) & Function(y)) -> Function(x))", "all x y.(Controlling(x) -> (Function(y) & Function(z) & Contains(x,y)))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x y.((Controlling(x) & Function(y)) -> Function(x,y))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> FunctionalFunction(x))", "exists x.(Controller(x) & TypeOfFunction(x))", "exists x.(Controlling(x) & Function(x))"]}
{"id": "entailmentbank_validation_581", "nl": "a computer room in a factory has a similar function to the cell nucleus in controlling the functions.", "fol": "", "prediction": ["all x y.((ComputerRoom(x) & Factory(y) & InFactory(x,y)) -> SimilarFunctionToCellNucleus(x,y))", "all x y z.((ComputerRoom(x) & Factory(y) & CellNucleus(z) & ControlsFunctions(x,z)) -> SimilarFunctionTo(x,y,z))", "all x.((ComputerRoom(x) & Factory(x)) -> SimilarFunctionToCellNucleus(x))", "all x y.((ComputerRoom(x) & Factory(y) & InFactory(x,y)) -> SimilarFunctionToCellNucleus(x))", "all x y.((ComputerRoom(x) & Factory(y) & InFabric(x,y)) -> SimilarFunctionToCellNucleus(x))", "all x y z.((ComputerRoom(x) & Factory(y) & CellNucleus(z) & ControlsFunctions(x,y,z)) -> SimilarFunctionTo(x,z))", "exists x.(ComputerRoom(x) & InFabric(x) & CellNucleus(x) & ControlsFunctions(x))", "all x.((ComputerRoom(x) & Factory(x) & CellNucleus(x)) -> SimilarFunction(x,controlsFunctions))", "all x.((ComputerRoom(x) & Factory(x)) -> SimilarFunctionToCellNucleus(x))", "all x y.((ComputerRoom(x) & Factory(y)) -> SimilarFunctionToCellNucleus(x,y))", "all x y z.((ComputerRoom(x) & Factory(y) & CellNucleus(z) & InControllingFunctions(x,z)) -> SimilarFunctionTo(x,z))", "exists x.(ComputerRoom(x) & InFabric(x) & CellNucleus(x) & ControlsFunctions(x))", "all x y.((ComputerRoom(x) & Factory(y) & InFactory(x,y)) -> SimilarFunctionToCellNucleus(x,y))", "all x y z.((ComputerRoom(x) & Factory(y) & CellNucleus(z)) -> SimilarFunction(x,y,z))", "all x y.((ComputerRoom(x) & Factory(y) & ControlsFunctions(x,y)) -> SimilarFunctionToCellNucleus(x,y))", "all x y.((ComputerRoom(x) & Factory(y)) -> SimilarFunctionToCellNucleus(x,y))"]}
{"id": "entailmentbank_validation_582", "nl": "if something does not contain something else, then that something else cannot be found in that something.", "fol": "", "prediction": ["all x.((DoesNotContain(x) & -Contain(x)) -> -CanBeFoundIn(x))", "all x y.((DoesNotContain(x,y) & Contains(y,x)) -> -CanBeFoundIn(x,y))", "all x.((Property(x) & -Contains(x,y)) -> -CanBeFoundIn(x,y))", "all x.((DoesNotContain(x) & -Contains(x)) -> -CanBeFoundIn(x))", "-ContainSomethingOther(x) -> -CanBeFoundIn(x,y))", "all x y.((DoesNotContain(x,y) & -Contains(x,y)) -> -CanBeFoundIn(x,y))", "all x y.(((DoesNotContain(x,y) & -Contains(y,x)) -> -CanBeFoundIn(x,y))", "-Contains(x,y) -> -CanBeFoundIn(x,y))", "all x.((Property(x) & -Contain(x)) -> -CanBeFoundIn(x,y))", "all x.((DoesNotContainAnother(x) & -ContainAnother(x)) -> -CanBeFoundInAnother(x))", "(-Contains(a) & -Contains(b)))", "all x.((DoesNotContain(x) & -Contain(x)) -> -CanBeFoundIn(x))", "exists x.((Product(x) & -Contains(x)) -> -CanBeFoundIn(x,y))", "all x y.((DoesNotContain(x,y) & Contains(y,z)) -> -CanBeFoundIn(x,y))", "exists x.(Property(x) & -Contains(x,y))", "all x y.(((DoesNotContain(x,y) & Contains(y,x)) -> -CanBeFoundIn(x,y))"]}
{"id": "entailmentbank_validation_583", "nl": "a prokaryotic cell does not contain a nucleus.", "fol": "", "prediction": ["all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x.((ProkaryoticCell(x) & -ContainsNucleus(x)) -> -ContainsNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x.((Cell(x) & Prokaryotic(x)) -> -ContainsNucleus(x))", "all x y.((ProkaryoticCell(x) & Nucleus(y)) -> -Contains(x,y))", "all x.(ProkaryoticCell(x) -> -ContainNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x y.((ProkaryoticCell(x) & Nucleus(y)) -> -Contains(x,y))", "all x.((ProkaryoticCell(x) & -ContainsNucleus(x)) -> -ContainsNucleus(x))", "all x y.((ProkaryoticCell(x) & Nucleus(y) & -Contains(x,y)) -> -Contains(x,y))", "all x y.((ProkaryoticCell(x) & Nucleus(y)) -> -Contains(x,y))", "all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContainNucleus(x))", "all x y.((ProkaryoticCell(x) & Nucleus(y) & -Contains(x,y)) -> -Contains(x,y))", "exists x.(ProkaryoticCell(x) & -ContainNucleus(x))", "exists x.(ProkaryoticCell(x) & -ContainsNucleus(x))"]}
{"id": "entailmentbank_validation_584", "nl": "a nucleus cannot be found in prokaryotic cells.", "fol": "", "prediction": ["all x.(Nucleus(x) -> -FoundInProkaryoticCells(x))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -FindsIn(x,y))", "all x.((Nucleus(x) & ProkaryoticCell(x)) -> -FindsIn(x,ProkaryoticCells))", "all x.(Nucleus(x) -> -FoundInProkaryoticCells(x))", "all x.(Nucleus(x) -> -exists y.(ProkaryoticCell(y) & FoundIn(x,y)))", "all x y z.((Nucleus(x) & ProkaryoticCell(y) & ProkaryoticCell(z)) -> -FindsIn(x,y,z))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -FoundIn(x,y))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -CanBeFoundIn(x,y))", "all x.(Nucleus(x) -> -FoundInProkaryoticCells(x))", "all x.(Nucleus(x) -> -FindsInProkaryoticCells(x))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -FindsIn(x,y))", "exists x.(Nucleus(x) & CannotBeFoundInProkaryoticCells(x))", "all x.(Nucleus(x) -> -FoundInProkaryoticCells(x))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -FoundIn(x,y))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -CanBeFoundIn(x,y))", "exists x.(Nucleus(x) & -FindsInProkaryoticCells(x))"]}
{"id": "entailmentbank_validation_585", "nl": "photosynthesis makes food for the plant.", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & Plant(y)) -> MakesFood(x,y))", "all x.(Photosynthesis(x) -> MakesFoodForPlant(x))", "all x y z.((Photosynthesis(x) & Plant(y) & Food(z)) -> MakesFor(x,y,z))", "all x y.((Photosynthesis(x) & Plant(y)) -> MakesFoodFor(x,y))", "all x.(Photosynthesis(x) -> MakesFoodForPlant(x))", "all x y z.((Photosynthesis(x) & Plant(y) & Food(z)) -> Makes(x,y,z))", "all x.(PhotosynthesisMakesFoodForPlant(x) -> Plant(x))", "all x y.((Photosynthesis(x) & Plant(y)) -> MakesFood(x,y))", "all x.(Photosynthesis(x) -> MakesFood(x))", "exists x.(Photosynthesis(x) & Plant(y) & MakesFood(x,y))", "all x.(PhotosynthesisMakesFoodForPlant(x) -> Plant(x))", "all x y z.((Photosynthesis(x) & Plant(y) & Food(z)) -> MakesFor(x,y,z))", "all x y.((Photosynthesis(x) & Plant(y)) -> MakesFoodFor(x,y))", "exists x.(Photosynthesis(x) & Plant(y) & MakesFood(x,y))", "exists x.(Photosynthesis(x) & Plant(y) & MakesFoodFor(x,y))", "all x y.((Photosynthesis(x) & Plant(y)) -> MakesFood(x,y))"]}
{"id": "entailmentbank_validation_586", "nl": "a leaf performs photosynthesis / gas exchange.", "fol": "", "prediction": ["all x.(Leaf(x) -> PerformsPhotosynthesis(x))", "all x y.((Leaf(x) & Photosynthesis(y)) -> GasExchange(x,y))", "all x.(Leaf(x) -> (PerformsPhotosynthesis(x) | PerformsGasExchange(x)))", "all x.(Leaf(x) -> PerformsPhotosynthesis(x))", "all x y.((Leaf(x) & Photosynthesis(y)) -> GasExchange(x))", "all x.((Leaf(x) & PerformsPhotosynthesis(x)) -> PerformsGasExchange(x))", "all x.(Leaf(x) -> (PerformsPhotosynthesis(x) | PerformsGasExchange(x)))", "all x.(Leaf(x) -> PerformsPhotosynthesis(x))", "all x y.((Leaf(x) & Leaf(y)) -> PerformsPhotosynthesis(x,y))", "all x y.((Leaf(x) & Leaf(y)) -> (PerformsPhotosynthesis(x,y) | PerformsGasExchange(x,y)))", "all x.(Leaf(x) -> PerformsPhotosynthesis(x) & PerformsGasExchange(x))", "all x y.((Leaf(x) & Photosynthesis(y)) -> GasExchange(x))", "exists x.(Leaf(x) & PerformsPhotosynthesis(x) & PerformsGasExchange(x))", "exists x.(Leaf(x) & Photosynthesis(x) & GasExchange(x))", "exists x.(Leaf(x) & PerformsPhotosynthesis(x) & PerformsGasExchange(x))", "all x y.((Leaf(x) & Photosynthesis(y)) -> GasExchange(y))"]}
{"id": "entailmentbank_validation_587", "nl": "a leaf makes food for the plant by performing photosynthesis.", "fol": "", "prediction": ["all x y.((Leaf(x) & Plant(y) & PerformsPhotosynthesis(x,y)) -> MakesFoodFor(x,y))", "all x.(Leaf(x) -> (MakesFoodForPlant(x) & PerformsPhotosynthesis(x)))", "all x y z.((Leaf(x) & Plant(y) & Photosynthesis(z)) -> MakesFoodFor(x,y,z))", "all x y.((Leaf(x) & Plant(y)) -> MakesFood(x,y))", "all x.((Leaf(x) & MakesFoodForPlant(x)) -> PerformsPhotosynthesis(x))", "all x y.((Leaf(x) & Plant(y) & PerformsPhotosynthesis(x,y)) -> MakesFoodFor(x,y))", "all x y z.((Leaf(x) & Plant(y) & Photosynthesis(z)) -> MakesFood(x,y,z))", "all x.(Leaf(x) -> MakesFoodForPlant(x))", "all x.((Leaf(x) & MakesFoodForPlant(x) & PerformsPhotosynthesis(x)) -> MakesFoodForPlant(x))", "exists x.(Leaf(x) & MakesFood(x) & Photosynthesis(x))", "all x y.((Leaf(x) & Plant(y)) -> MakesFoodByPhotosynthesis(x,y))", "exists x.(Leaf(x) & MakesFood(x,Plant) & PerformsPhotosynthesis(x))", "all x y z.((Leaf(x) & Plant(y) & Photosynthesis(z)) -> MakesFoodFor(x,y,z))", "all x y.((Leaf(x) & Plant(y) & PerformsPhotosynthesis(x,y)) -> MakesFoodFor(x,y))", "exists x.(Leaf(x) & MakesFoodForPlant(x) & PerformsPhotosynthesis(x))", "all x y.((Leaf(x) & Plant(y)) -> MakesFoodFor(x,y))"]}
{"id": "entailmentbank_validation_588", "nl": "providing food is a kind of specific life process.", "fol": "", "prediction": ["all x.(ProvidesFood(x) -> LifeProcess(x))", "all x y.((ProvidesFood(x) & LifeProcess(y)) -> Specific(x,y))", "all x.(ProvidesFood(x) -> LifeProcess(x))", "all x.(FoodProvidesLifeProcess(x) -> SpecificLifeProcess(x))", "all x y.((ProvidesFood(x) & LifeProcess(y)) -> Specific(x,y))", "all x.(ProvidesFood(x) -> LifeProcess(x))", "all x.(FoodProvides(x) -> LifeProcess(x))", "all x.(ProvidesFood(x) -> SpecificLifeProcess(x))", "all x y.((ProvidesFood(x) & LifeProcess(y)) -> Specific(x,y))", "all x y.((FoodProcess(x) & FoodProcess(y)) -> LifeProcess(x,y))", "exists x.(FoodProcess(x) & ProvidesFood(x))", "all x y.((ProvidesFood(x) & LifeProcess(y)) -> Specific(x))", "exists x.(FoodProcess(x) & ProvidesFood(x))", "all x.(ProvidingFood(x) -> LifeProcess(x))", "exists x.(FoodProcess(x) & SpecificLifeProcess(x))", "all x y.((ProvidesFood(x) & LifeProcess(y)) -> Specific(x,y))"]}
{"id": "entailmentbank_validation_589", "nl": "a leaf performs a specific life process of making food for the plants.", "fol": "", "prediction": ["all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcessOfMakingFood(x,y))", "all x y z.((Leaf(x) & LifeProcess(y) & Plant(z)) -> Performs(x,y,z))", "all x.(Leaf(x) -> PerformsLifeProcess(x))", "all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcess(x,y))", "all x.(Leaf(x) -> PerformsLifeProcessOfMakingFood(x))", "all x y z.((Leaf(x) & LifeProcess(y) & Plant(z)) -> Performs(x,y,z))", "all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcessOfMakingFood(x,y))", "all x.(Leaf(x) -> PerformsLifeProcess(x))", "all x y z.((Leaf(x) & LifeProcess(y) & Plant(z)) -> Performs(x,y,z))", "all x.(Leaf(x) -> PerformsLifeProcessOfMakingFoodForPlants(x))", "all x y z.((Leaf(x) & LifeProcess(y) & Plant(z) & Performs(x,y,z)) -> MakesFoodFor(x,y,z))", "all x.(Leaf(x) -> PerformsSpecificLifeProcessOfMakingFood(x))", "all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcess(x,y))", "exists x.(Leaf(x) & LifeProcessOfMakingFood(x) & ForPlants(x))", "exists x.(Leaf(x) & LifeProcess(x,Food) & Plant(x))", "all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcessOfMakingFood(x,y))"]}
{"id": "entailmentbank_validation_590", "nl": "organs perform specific life process in organisms.", "fol": "", "prediction": ["all x y.((Organ(x) & Organism(y)) -> PerformsLifeProcessIn(x,y))", "all x y z.((Organ(x) & Organism(y) & LifeProcess(z)) -> PerformsIn(x,y,z))", "all x.(Organ(x) -> PerformsLifeProcessInOrganisms(x))", "all x y.((Organ(x) & Organism(y)) -> PerformsLifeProcessInOrganism(x,y))", "all x.(Organ(x) -> PerformsSpecificLifeProcessInOrganisms(x))", "(PerformsLifeProcessInOrganism(organ) & InOrganism(organ))", "all x y z.((Organ(x) & Organism(y) & LifeProcess(z)) -> PerformsIn(x,y,z))", "all x y.((Organ(x) & Organism(y)) -> PerformsSpecificLifeProcessIn(x,y))", "all x.(Organ(x) -> PerformsLifeProcessInOrganism(x))", "all x.(Organism(x) -> PerformsSpecificLifeProcessInOrganism(x))", "all x y z.((Organ(x) & Organism(y) & LifeProcess(z) & PerformsIn(x,y,z)) -> PerformsIn(x,y,z))", "all x y z.((Organ(x) & Organism(y) & LifeProcess(z)) -> PerformsIn(x,y,z))", "all x y.((Organ(x) & Organism(y)) -> PerformsLifeProcess(x,y))", "all x.(Organ(x) -> PerformsSpecificLifeProcess(x))", "all x.(Organ(x) -> PerformsLifeProcess(x,Organism))", "all x y.((Organ(x) & Organism(y)) -> PerformsSpecificLifeProcess(x,y))"]}
{"id": "entailmentbank_validation_591", "nl": "a leaf in a plant is performing like an organ in organisms.", "fol": "", "prediction": ["all x y.((Leaf(x) & Plant(y) & InPlant(x,y)) -> PerformsAsOrgan(x,y))", "all x y z.((Leaf(x) & Plant(y) & Organism(z)) -> PerformsAsOrgan(x,y,z))", "all x y.((Leaf(x) & Plant(y)) -> PerformsAsOrgan(x,y))", "all x.((Leaf(x) & Plant(x)) -> PerformsAsOrgan(x,Organisms))", "all x y z.((Leaf(x) & Plant(y) & Organism(z) & InPlant(x,y,z)) -> PerformsAsOrgan(x,y,z))", "all x y.((Leaf(x) & Plant(y) & InPlant(x,y)) -> PerformsAsOrgan(x,y))", "all x.((LeafInPlant(x) & OrganInOrganisms(x)) -> PerformsAs(x,Organisms))", "all x.((Leaf(x) & Plant(x)) -> PerformsAsOrgan(x))", "all x.((Leaf(x) & InPlant(x)) -> PerformsAsOrganInOrganisms(x))", "all x y z.((Leaf(x) & Plant(y) & Organism(z) & InPlant(x,y,z)) -> PerformsAsOrgan(x,y,z))", "all x y.((LeafInPlant(x) & Organism(y)) -> PerformsAsOrgan(x,y))", "all x y.((Leaf(x) & Plant(y)) -> PerformsAsOrgan(x,y))", "all x.(LeafInPlant(x) -> PerformsAsOrganInOrganisms(x))", "exists x.(Leaf(x) & InPlant(x) & PerformsAsOrgan(x))", "all x y.((Leaf(x) & Plant(y) & InPlant(x,y)) -> PerformsAsOrganInOrganisms(x))", "exists x.(LeafInPlant(x) & PerformsAsOrgan(x))"]}
{"id": "entailmentbank_validation_592", "nl": "taking in carbon dioxide is a stage in the photosynthesis process.", "fol": "", "prediction": ["all x.((PhotosynthesisProcess(x) & TakesInCarbonDioxide(x)) -> StageInPhotosynthesis(x))", "all x.(TakesInCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x y.((PhotosynthesisProcess(x) & CarbonDioxide(y)) -> StageInProcess(x,y))", "all x y.((Stage(x) & CarbonDioxide(y)) -> PhotosynthesisProcess(x,y))", "all x.((StageInPhotosynthesis(x) & TakesInCarbonDioxide(x)) -> PhotosynthesisProcess(x))", "all x y.((TakesInCarbonDioxide(x) & PhotosynthesisProcess(y)) -> StageInProcess(x,y))", "all x.((TakesInCarbonDioxide(x) & PhotosynthesisProcess(x)) -> StageInPhotosynthesis(x))", "(Photosynthesis(x) -> TakesInCarbonDioxide(x))", "all x y.((PhotosynthesisProcess(x) & CarbonDioxide(y)) -> StageInPhotosynthesis(x,y))", "all x y z.((PhotosynthesisProcess(x) & CarbonDioxide(y) & Stage(z)) -> PhotosynthesisProcess(x,y,z))", "all x.(TakesInCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x y.((Stage(x) & CarbonDioxide(y)) -> PhotosynthesisProcess(x))", "all x.((PhotosynthesisProcess(x) & TakesInCarbonDioxide(x)) -> StageInProcess(x))", "all x.(TakingInCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x.(PhotosynthesisProcess(x) -> TakesInCarbonDioxide(x))", "all x.(TakesInCarbonDioxide(x) -> PhotosynthesisProcess(x))"]}
{"id": "entailmentbank_validation_593", "nl": "absorbing something is a kind of method for taking something in.", "fol": "", "prediction": ["all x.(Absorbing(x) -> TakesIn(x))", "all x y.((Absorbs(x,y) & Something(y)) -> TakesIn(x,y))", "all x.(Absorbs(x) -> TakesIn(x))", "all x y.((Absorbs(x,y) & Something(y)) -> TakesIn(x,y))", "all x y.((Absorbs(x) & Something(y)) -> TakesIn(x,y))", "all x y z.((Absorbs(x,y) & Something(z)) -> TakesIn(x,z))", "all x.(Absorbing(x) -> TakesIn(x))", "all x.((Absorbs(x) & TakesIn(x)) -> TakesIn(x))", "all x y.((Absorbing(x) & Something(y)) -> TakesIn(x,y))", "all x.((Absorbing(x) & Something(x)) -> TakesIn(x))", "all x.(Absorbs(x) -> TakesIn(x))", "all x.(Absorbs(x,y) -> TakesIn(y,x))", "all x y.((Absorbs(x,y) & Something(y)) -> TakesIn(x,y))", "all x.(Absorbing(x) -> TakeIn(x))", "exists x.(Absorbing(x) & Something(x) & TakesIn(x))", "all x y.((Absorbing(x) & Something(y)) -> TakesIn(x,y))"]}
{"id": "entailmentbank_validation_594", "nl": "absorbing carbon dioxide is a stage in the photosynthesis process.", "fol": "", "prediction": ["all x.(AbsorbingCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x.((AbsorbsCarbonDioxide(x) & PhotosynthesisProcess(x)) -> StageInProcess(x))", "all x y.((PhotosynthesisProcess(x) & AbsorbsCarbonDioxide(x)) -> StageInProcess(y))", "all x y.((Stage(x) & PhotosynthesisProcess(y)) -> AbsorbsCarbonDioxide(x,y))", "all x.(AbsorbsCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x y z.((Stage(x) & CarbonDioxide(y) & PhotosynthesisProcess(z)) -> Absorbs(x,y))", "(Photosynthesis(CarbonDioxide) -> StageInPhotosynthesis(x))", "all x y.((PhotosynthesisProcess(x) & CarbonDioxide(y)) -> StageInPhotosynthesis(x,y))", "all x.((AbsorbingCarbonDioxide(x) & PhotosynthesisProcess(x)) -> StageInProcess(x))", "all x.((PhotosynthesisProcess(x) & AbsorbsCarbonDioxide(x)) -> StageInPhotosynthesisProcess(x))", "(AbsorbingCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x y.((AbsorbsCarbonDioxide(x) & PhotosynthesisProcess(y)) -> StageInProcess(x,y))", "all x y.((Stage(x) & PhotosynthesisProcess(y)) -> AbsorbsCarbonDioxide(x,y))", "all x.(AbsorbingCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x.(AbsorbsCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x.(AbsorbingCarbonDioxide(x) -> Photosynthesis(x))"]}
{"id": "entailmentbank_validation_595", "nl": "carbon dioxide can be found in the air.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> FoundInAir(x))", "all x y.((CarbonDioxide(x) & Air(y)) -> FoundIn(x,y))", "all x.(CarbonDioxide(x) -> FoundInAir(x))", "(all x.(CarbonDioxide(x) -> FoundInAir(x)))", "all x y z.((CarbonDioxide(x) & Air(y) & Air(z)) -> FoundIn(x,y,z))", "all x.(CarbonDioxide(x) -> CanBeFoundInAir(x))", "all x y.((CarbonDioxide(x) & Air(y)) -> FoundIn(x,y))", "(all x.(CarbonDioxide(x) -> FoundInAir(x)))", "all x y.((CarbonDioxide(x) & Air(y)) -> FoundIn(x,y))", "exists x.(CO2(x) & FoundInAir(x))", "all x.(CarbonDioxide(x) -> FoundInAir(x))", "all x y.((CarbonDioxide(x) & Air(y)) -> CanBeFound(x,y))", "all x.(CarbonDioxide(x) -> CanBeFoundInAir(x))", "exists x.(CarbonDioxide(x) & FoundInAir(x))", "exists x.(CarbonDioxide(x) & FoundInAir(x))", "exists x.(CarbonDioxide(x) & FoundInAir(x))"]}
{"id": "entailmentbank_validation_596", "nl": "absorbing carbon dioxide from the air is a stage in the photosynthesis process.", "fol": "", "prediction": ["all x.((AbsorbsCarbonDioxide(x) & FromAir(x)) -> PhotosynthesisProcess(x))", "all x y.((Stage(x) & PhotosynthesisProcess(y)) -> AbsorbsCarbonDioxideFromAir(x,y))", "all x.(AbsorbingCarbonDioxideFromAir(x) -> PhotosynthesisProcess(x))", "all x y.((PhotosynthesisProcess(x) & CarbonDioxide(y)) -> StageInPhotosynthesis(x,y))", "all x y z.((Stage(x) & CarbonDioxide(y) & Air(z) & AbsorbsFrom(x,y,z)) -> PhotosynthesisProcess(x))", "all x y.((Stage(x) & AbsorbsCarbonDioxide(x,y) & Air(y)) -> PhotosynthesisProcess(x))", "(Photosynthesis(a) & AbsorbsCarbonDioxideFromAir(a))", "all x y z.((AbsorbingCarbonDioxide(x) & Air(y) & PhotosynthesisProcess(z)) -> StageInPhotosynthesis(x,y,z))", "(AbsorbingCarbonDioxideFromAir(x) -> PhotosynthesisProcess(x))", "all x.(AbsorbsCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x.((AbsorbsCarbonDioxide(x) & FromAir(x)) -> PhotosynthesisProcess(x))", "all x.((AbsorbingCarbonDioxideFromAir(x) & PhotosynthesisProcess(x)) -> StageInPhotosynthesis(x))", "all x y.((PhotosynthesisProcess(x) & AbsorbsCarbonDioxide(x,y)) -> StageInPhotosynthesis(x))", "all x y.((AbsorbsCarbonDioxide(x) & Air(y)) -> PhotosynthesisProcess(x,y))", "all x.(AbsorbingCarbonDioxideFromAir(x) -> PhotosynthesisProcess(x))", "all x.((AbsorbsCarbonDioxide(x) & Air(x)) -> PhotosynthesisProcess(x))"]}
{"id": "entailmentbank_validation_597", "nl": "plants perform photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x y.((Plant(x) & Photosynthesis(y)) -> Performs(x,y))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x y.((Plant(x) & Photosynthesis(y)) -> Performs(x,y))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x y.((Plant(x) & Plant(y) & PerformsPhotosynthesis(x,y)) -> PerformsPhotosynthesis(x,y))", "all x.((Plant(x) & PerformsPhotosynthesis(x)) -> PerformsPhotosynthesis(x))", "all x y.((Plant(x) & Photosynthesis(y)) -> Performs(x,y))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x y.(Plant(x) & Photosynthesis(y) & Performs(x,y))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x.(Plant(x) -> Photosynthesis(x))", "exists x.(Plant(x) & Photosynthesis(x))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_598", "nl": "a plant absorbs carbon dioxide from the air to perform photosynthesis.", "fol": "", "prediction": ["all x y.((Plant(x) & CarbonDioxide(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "all x.((Plant(x) & AbsorbsCarbonDioxide(x) & PerformsPhotosynthesis(x)) -> Photosynthesis(x))", "all x y z.((Plant(x) & CarbonDioxide(y) & Air(z)) -> AbsorbsToPerformPhotosynthesis(x,y,z))", "all x.(Plant(x) -> AbsorbsCarbonDioxide(x))", "all x y.((Plant(x) & CarbonDioxide(y) & Air(z)) -> AbsorbsToPerformPhotosynthesis(x,y,z))", "all x.((Plant(x) & AbsorbsCarbonDioxide(x)) -> PerformsPhotosynthesis(x))", "all x y z.((Plant(x) & CarbonDioxide(y) & Air(z)) -> AbsorbsToPerformPhotosynthesis(x,y,z))", "all x.(Plant(x) -> AbsorbsCarbonDioxideFromAir(x))", "all x y.((Plant(x) & Air(y)) -> AbsorbsCarbonDioxideToPerformPhotosynthesis(x,y))", "all x y z.((Plant(x) & CarbonDioxide(y) & Air(z) & Absorbs(x,y,z)) -> PerformsPhotosynthesis(x))", "all x y.((Plant(x) & CarbonDioxide(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "all x.((Plant(x) & AbsorbsCarbonDioxideFromAir(x)) -> PerformsPhotosynthesis(x))", "exists x.(Plant(x) & AbsorbsCarbonDioxide(x) & PerformsPhotosynthesis(x))", "all x.(Plant(x) -> AbsorbsCarbonDioxide(x))", "all x y z.((Plant(x) & CarbonDioxide(y) & Air(z)) -> AbsorbsToPerformPhotosynthesis(x,y,z))", "exists x.(Plant(x) & AbsorbsCarbonDioxide(x) & PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_599", "nl": "when carbon dioxide in the atmosphere is absorbed by plants, the amount of carbon dioxide in the atmosphere is reduced in the atmosphere.", "fol": "", "prediction": ["all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> ReducedAmountOfCarbonDioxide(x,y))", "all x.((CarbonDioxide(x) & AbsorbedByPlants(x)) -> ReducedAmountOfCarbonDioxide(x))", "all x y z.((CarbonDioxide(x) & Atmosphere(y) & Plant(z) & AbsorbedBy(x,y,z)) -> ReducedAtmosphereAmount(x,y))", "all x.((CarbonDioxideInAtmosphere(x) & AbsorbedByPlants(x)) -> ReducedAtmosphereAmount(x))", "all x y.((CarbonDioxideInAtmosphere(x) & AbsorbedByPlants(x)) -> ReducedAtmosphere(y))", "all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> ReducedAtmosphereAmount(x,y))", "(all x.((CarbonDioxide(x) & AbsorbedByPlants(x)) -> ReducedAmountOfCarbonDioxide(x))", "all x y z.((CarbonDioxide(x) & Atmosphere(y) & Plant(z) & Absorbs(x,y,z)) -> ReducedAtmosphereAmount(x,y,z))", "all x y.((ClimateDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> ReducedAmountOfCarbonDioxide(x,y))", "all x.((CarbonDioxide(x) & AbsorbedByPlants(x)) -> ReducedAmountOfCarbonDioxide(x))", "all x.((CarbonDioxideInAtmosphere(x) & AbsorbedByPlants(x)) -> ReducedAtmosphereAmount(x))", "all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> ReducedAmountOfCarbonDioxide(x,y))", "all x y.((CarbonDioxideInAtmosphere(x) & AbsorbedByPlants(x)) -> ReducedAtmosphereAmount(y))", "all x y z.((CarbonDioxide(x) & Atmosphere(y) & Plant(z) & AbsorbedBy(x,y,z)) -> ReducedAtmosphereAmount(x,y,z))", "all x.((CarbonDioxide(x) & AbsorbedByPlants(x)) -> ReducedAtmosphereAmount(x))", "all x.((CarbonDioxideInAtmosphere(x) & AbsorbedByPlants(x)) -> ReducedAtmosphere(x))"]}
{"id": "entailmentbank_validation_600", "nl": "plant photosynthesis reduces the amount of carbon dioxide in the air.", "fol": "", "prediction": ["all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxide(x))", "all x y.((PlantPhotosynthesis(x) & CarbonDioxide(y)) -> Reduces(x,y))", "all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxideInAir(x))", "all x y z.((PlantPhotosynthesis(x) & CarbonDioxide(y) & Air(z)) -> Reduces(x,y,z))", "all x y.((Plant(x) & CarbonDioxide(y)) -> ReducesInAir(x,y))", "all x y.((PlantPhotosynthesis(x) & CarbonDioxide(y)) -> ReducesInAir(x,y))", "all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxideInAir(x))", "all x y z.((PlantPhotosynthesis(x) & CarbonDioxide(y) & Air(z)) -> Reduces(x,y,z))", "all x.(PlantPhotosynthesisReducesCarbonDioxide(x) -> InAir(x))", "all x y.((Plant(x) & Photosynthesis(y)) -> ReducesCarbonDioxide(x,y))", "all x.((PlantPhotosynthesis(x) & CarbonDioxide(x)) -> Reduces(x,y))", "all x y.((PlantPhotosynthesis(x) & CarbonDioxide(y)) -> ReducesAmountInAir(x,y))", "all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxideInAir(x))", "all x.(PlantPhotosynthesisReducesCarbonDioxide(x) -> InAir(x))", "all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxide(x))", "all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxideInAir(x))"]}
{"id": "entailmentbank_validation_601", "nl": "sunlight is a kind of solar energy.", "fol": "", "prediction": ["all x.(Sunlight(x) -> SolarEnergy(x))", "all x y.((Sunlight(x) & SolarEnergy(y)) -> SolarEnergy(x,y))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x y.((Sunlight(x) & SolarEnergy(y)) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "(Sunlight(sun) & SolarEnergy(sun))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x y.((Sunlight(x) & SolarEnergy(y)) -> SolarEnergy(x,y))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x y.((Sunlight(x) & SolarEnergy(y)) -> SolarEnergy(x))", "exists x.(Sunlight(x) & Sunlight(x) & SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "exists x.(Sunlight(x) & SolarEnergy(x))"]}
{"id": "entailmentbank_validation_602", "nl": "photosynthesis means green plants convert from carbon dioxide and water and solar energy into carbohydrates and food and oxygen for themselves.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (GreenPlantsConvertFromCarbonDioxideAndWaterAndSolarEnergy(x) & CarbohydratesAndFoodAndOxygen(x)))", "all x y.((GreenPlant(x) & CarbonDioxide(y) & Water(y) & SolarEnergy(x)) -> (ConvertsFromCarbohydrates(x,y) & ProducesCarbohydrates(x,y) & ProducesFoodAndOxygen(x,y)))", "all x.((GreenPlant(x) & CarbonDioxide(x) & Water(x) & SolarEnergy(x)) -> (ConvertsFromCarbohydrates(x) & ProducesFoodAndOxygen(x)))", "all x y z.((GreenPlant(x) & CarbonDioxide(y) & Water(z)) -> (ConvertsFrom(x,y,z) & Carbohydrates(x) & Food(x) & Oxygen(x)))", "(Photosynthesis(greenPlants) -> (ConvertsFromCarbonDioxideAndWaterAndSolarEnergy(greenPlants) & CarbohydratesAndFoodAndOxygenForSelf(greenPlants)))", "all x y z.((GreenPlant(x) & CarbonDioxide(y) & Water(z) & SolarEnergy(x)) -> (ConvertsFromCarbohydrates(x,y,z) & ProducesCarbohydrates(x,y) & ProducesFoodAndOxygen(x,y)))", "all x.(GreenPlant(x) -> (ConvertsFromCarbonDioxideAndWaterAndSolarEnergy(x) & CarbohydratesAndFoodAndOxygen(x)))", "all x y.((GreenPlant(x) & CarbonDioxide(y) & Water(y) & SolarEnergy(x)) -> (ConvertsFromCarbohydrates(x,y) & ProducesFoodAndOxygen(x,y)))", "all x.(Photosynthesis(x) -> (GreenPlants(x) & ConvertsFromCarbonDioxideAndWaterAndSolarEnergy(x) & CarbohydratesAndFoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (GreenPlantsConvertFromCarbonDioxideAndWaterAndSolarEnergy(x) & CarbohydratesAndFoodAndOxygen(x)))", "all x.((GreenPlant(x) & CarbonDioxide(x) & Water(x) & SolarEnergy(x)) -> (Converts(x,carbohydrates,food,oxygen)))", "all x y.((GreenPlant(x) & CarbonDioxide(y) & Water(y) & SolarEnergy(z)) -> ConvertsToCarbohydratesAndFoodAndOxygen(x,y,z))", "all x.(Photosynthesis(x) -> (GreenPlant(x) & ConvertsFromCarbonDioxideAndWaterAndSolarEnergyToCarbohydratesAndFoodAndOxygen(x)))", "all x y z.((GreenPlant(x) & CarbonDioxide(y) & Water(z)) -> (ConvertsFrom(x,y,z) & Carbohydrates(x) & FoodAndOxygen(x)))", "all x y.((GreenPlant(x) & CarbonDioxide(y) & Water(z)) -> (ConvertsFrom(x,y,z) & Carbohydrates(x) & FoodAndOxygen(x)))", "all x.((GreenPlant(x) & CarbonDioxide(x) & Water(x) & SolarEnergy(x)) -> (ConvertsToCarbohydrates(x) & ProducesFoodAndOxygen(x)))"]}
{"id": "entailmentbank_validation_603", "nl": "photosynthesis means plants convert carbon dioxide and water and sunlight into carbohydrates and food and oxygen.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWaterAndSunlight(x) & CarbohydratesAndFoodAndOxygen(x)))", "all x y z.((Plant(x) & CarbonDioxide(y) & Water(z)) -> (Converts(x,y,z) & Carbohydrates(x) & FoodAndOxygen(x)))", "all x y.((Plant(x) & CarbonDioxide(y) & Water(y) & Sunlight(y)) -> (Converts(x,y) & Carbohydrates(x) & FoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (PlantsConvertCarbonDioxideWaterAndSunlight(x) & CarbohydratesAndFoodAndOxygen(x)))", "all x.((Plant(x) & CarbonDioxide(x) & Water(x) & Sunlight(x)) -> (ConvertsCarbohydrates(x) & ProducesFoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWaterAndSunlight(x) & CarbohydratesAndFoodAndOxygen(x)))", "(Photosynthesis(Plants) -> (ConvertsCarbonDioxideAndWaterAndSunlightIntoCarbohydratesAndFoodAndOxygen(Plants)))", "(Photosynthesis(Plants) -> (ConvertsCarbonDioxideAndWaterAndSunlight(Plants) & Carbohydrates(Plants) & FoodAndOxygen(Plants)))", "all x y.((Plant(x) & CarbonDioxide(y) & Water(y) & Sunlight(z)) -> (Converts(x,y,z) & Carbohydrates(x) & FoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (PlantsConvertCarbonDioxideWaterSunlightToCarbohydratesAndFoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (Plant(x) & ConvertsCarbonDioxideAndWaterAndSunlight(x) & CarbohydratesAndFoodAndOxygen(x)))", "all x y z.((Plant(x) & CarbonDioxide(y) & Water(z)) -> (Converts(x,y,z) & Carbohydrates(x) & FoodAndOxygen(x)))", "all x y z.((Plant(x) & CarbonDioxide(y) & Water(z) & Sunlight(x)) -> (Converts(x,y,z) & Carbohydrates(x) & FoodAndOxygen(x)))", "all x y.((Plant(x) & CarbonDioxide(y) & Water(z)) -> (Converts(x,y,z) & Carbohydrates(x) & FoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWaterAndSunlightIntoCarbohydratesAndFoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWaterAndSunlight(x) & CarbohydratesAndFoodAndOxygen(x)))"]}
{"id": "entailmentbank_validation_604", "nl": "if an orgnism uses a process to convert something into something else, then that something is used for that process.", "fol": "", "prediction": ["all x y.((Organnism(x) & Process(y) & ConvertsInto(x,y)) -> UsedFor(x,y))", "all x y z.((Organnism(x) & Process(y) & Process(z) & ConvertsInto(x,y,z)) -> UsedFor(x,y,z))", "all x.((Organnism(x) & UsesProcess(x) & ConvertsIntoOtherProcess(x)) -> UsedForProcess(x))", "all x y.((Orgnism(x) & Process(y) & ConvertsInto(x,y)) -> UsedForProcess(x,y))", "all x.((Orgnism(x) & UsesProcessToConvert(x)) -> UsedForProcess(x))", "all x.((Organnism(x) & ConvertsProcess(x)) -> UsedForProcess(x))", "all x y z.((Organnism(x) & Process(y) & Process(z) & ConvertsInto(x,y,z)) -> UsedFor(x,y,z))", "all x y.((Organnism(x) & Process(y) & ConvertsTo(x,y)) -> UsedFor(x,y))", "all x.((Orgnism(x) & UsesProcessToConvert(x,y) & SomethingOther(y)) -> UsedForProcess(x,y))", "all x y z.((Orgnism(x) & Process(y) & Process(z) & ConvertsTo(y,z)) -> UsedFor(x,y,z))", "all x y.((Orgnism(x) & Process(y) & Uses(x,y)) -> ConvertsInto(x,y))", "exists x.(Organnism(x) & ConvertsProcessIntoOther(x))", "all x.((Organnism(x) & ConvertsProcess(x)) -> UsedForProcess(x))", "all x y z.((Organnism(x) & Process(y) & Process(z) & ConvertsInto(x,y,z)) -> UsedForProcess(x,y,z))", "all x y.((Orgnism(x) & Process(y) & UsesToConvert(x,y)) -> UsedForProcess(x,y))", "all x y.((Organnism(x) & Process(y) & ConvertsInto(x,y)) -> UsedForProcess(x,y))"]}
{"id": "entailmentbank_validation_605", "nl": "a plant uses sunlight for photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> UsesSunlightForPhotosynthesis(x))", "all x y.((Plant(x) & Sunlight(y)) -> UsesForPhotosynthesis(x,y))", "all x.((Plant(x) & UsesSunlightForPhotosynthesis(x)) -> UsesSunlightForPhotosynthesis(x))", "all x.(Plant(x) -> UsesSunlightForPhotosynthesis(x))", "all x y z.((Plant(x) & Sunlight(y) & Photosynthesis(z)) -> UsesFor(x,y,z))", "all x y.((Plant(x) & Sunlight(y)) -> UsesForPhotosynthesis(x,y))", "all x.((Plant(x) & UsesSunlight(x)) -> Photosynthesis(x))", "all x y z.((Plant(x) & Sunlight(y) & Photosynthesis(z)) -> UsesFor(x,y,z))", "all x y.((Plant(x) & Sunlight(y)) -> UsesForPhotosynthesis(x,y))", "all x.(Plant(x) -> UsesSunlightForPhotosynthesis(x))", "exists x.(Plant(x) & Sunlight(x) & UsesForPhotosynthesis(x))", "all x y.((Plant(x) & Sunlight(y)) -> UsesForPhotosynthesis(x,y))", "exists x.(Plant(x) & UsesSunlightForPhotosynthesis(x))", "exists x.(Plant(x) & UsesSunlightForPhotosynthesis(x))", "all x y.((Plant(x) & Sunlight(y)) -> UsesForPhotosynthesis(x,y))", "exists x.(Plant(x) & UsesSunlightForPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_606", "nl": "in the photosynthesis process sunlight has the role of raw material.", "fol": "", "prediction": ["all x.((Sunlight(x) & PhotosynthesisProcess(x)) -> RawMaterial(x))", "all x y.((PhotosynthesisProcess(x) & Sunlight(y)) -> HasRoleOfRawMaterial(y,x))", "all x.(Photosynthesis(x) -> RawMaterial(x))", "(RoleOfRawMaterial(sunlight) & PhotosynthesisProcess(sunlight))", "in the photosynthesis process,sunlighthasRoleOfRawMaterial(sunlight)", "all x y.((Sunlight(x) & PhotosynthesisProcess(y)) -> RawMaterial(x,y))", "all x y z.((PhotosynthesisProcess(x) & Sunlight(y) & RawMaterial(z)) -> HasRoleOf(y,z))", "all x.(Sunlight(x) -> RawMaterial(x))", "all x.((Sunlight(x) & PhotosynthesisProcess(x)) -> RawMaterial(x))", "all x y.((PhotosynthesisProcess(x) & Sunlight(y)) -> RawMaterial(y))", "exists x.(Sunlight(x) & PhotosynthesisProcess(x) & RawMaterial(x))", "(RoleOfRawMaterial(sunlight) & PhotosynthesisProcess(sunlight))", "all x.(PhotosynthesisProcess(x) -> RawMaterial(x))", "all x y.((PhotosynthesisProcess(x) & Sunlight(y)) -> HasRoleOfRawMaterial(y,x))", "exists x.(Sunlight(x) & PhotosynthesisProcess(x) & RawMaterial(x))", "exists x.(Sunlight(x) & PhotosynthesisProcess(x) & RawMaterial(x))"]}
{"id": "entailmentbank_validation_607", "nl": "a plant uses the raw material sunlight for photosynthesis.", "fol": "", "prediction": ["all x y.((Plant(x) & RawMaterial(y)) -> UsesForPhotosynthesis(x,y))", "all x.((Plant(x) & RawMaterialSunlight(x)) -> UsesForPhotosynthesis(x))", "all x y.((Plant(x) & RawMaterial(y) & Sunlight(y)) -> UsesForPhotosynthesis(x,y))", "all x.(Plant(x) -> UsesRawMaterialSunlightForPhotosynthesis(x))", "all x y z.((Plant(x) & RawMaterial(y) & Sunlight(z)) -> UsesForPhotosynthesis(x,y,z))", "all x.((Plant(x) & RawMaterialSunlight(x)) -> UsesForPhotosynthesis(x))", "all x y.((Plant(x) & RawMaterial(y) & Sunlight(z)) -> UsesForPhotosynthesis(x,y,z))", "all x y z.((Plant(x) & RawMaterial(y) & Sunlight(z)) -> UsesForPhotosynthesis(x,y,z))", "exists x.(Plant(x) & RawMaterial(x,Sunlight) & UsedForPhotosynthesis(x))", "all x.(Plant(x) -> UsesRawMaterialSunlightForPhotosynthesis(x))", "all x y z.((Plant(x) & RawMaterial(y) & Sunlight(z) & UsesForPhotosynthesis(x,y,z)) -> Photosynthesis(x,y,z))", "exists x.(Plant(x) & RawMaterial(x) & Sunlight(x) & UsesForPhotosynthesis(x))", "all x.((Plant(x) & RawMaterialSunlight(x)) -> UsesForPhotosynthesis(x))", "all x y.((Plant(x) & RawMaterial(y) & Sunlight(z) & UsesForPhotosynthesis(x,y,z)) -> Photosynthesis(x))", "all x y.((Plant(x) & RawMaterial(y) & Sunlight(y)) -> UsesForPhotosynthesis(x,y))", "exists x.(Plant(x) & RawMaterial(x,Sunlight) & UsesForPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_608", "nl": "using a raw material sometimes requires absorbing that raw material.", "fol": "", "prediction": ["all x y.((UsesRawMaterial(x) & RawMaterial(y)) -> RequiresAbsorbing(x,y))", "all x.((UsesRawMaterial(x) & RequiresAbsorbingRawMaterial(x)) -> RequiresAbsorbingRawMaterial(x))", "all x y.((Use(x,y) & RawMaterial(y)) -> RequiresAbsorbing(x,y))", "all x.((UsesRawMaterial(x) & UsesRawMaterial(x)) -> RequiresAbsorbing(x,RawMaterial))", "exists x.(RawMaterial(x) & Uses(x,RawMaterial) & RequiresAbsorbing(x,RawMaterial))", "all x y z.((Use(x,y) & RawMaterial(z) & RawMaterial(z)) -> RequiresAbsorbing(x,z))", "all x y.((UseRawMaterial(x) & RawMaterial(y)) -> RequiresAbsorbing(x,y))", "all x y.((UsesRawMaterial(x) & RawMaterial(y)) -> RequiresAbsorbing(x,y))", "exists x.(RawMaterial(x) & Uses(x,y) & RequiresAbsorbing(y,z))", "all x y z.((UsingRawMaterial(x) & RawMaterial(y) & RawMaterial(z)) -> RequiresAbsorbing(x,y,z))", "exists x.(Use(x,y) & RawMaterial(y) & RequiresAbsorbing(x,y))", "all x y.((RawMaterial(x) & RawMaterial(y)) -> RequiresAbsorbing(x,y))", "all x y.((Uses(x,y) & RawMaterial(y)) -> RequiresAbsorbing(x,y))", "exists x.(RawMaterial(x) & UsedWith(x,RawMaterial) & RequiresAbsorbing(x,RawMaterial))", "exists x.(Use(x,y) & RawMaterial(y) & RequiresAbsorbing(x,y))", "exists x.(RawMaterial(x) & Uses(x,r,r)) -> RequiresAbsorbing(x,r,r))"]}
{"id": "entailmentbank_validation_609", "nl": "a plant absorbs sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x.((Plant(x) & AbsorbsSunlight(x)) -> PerformsPhotosynthesis(x))", "all x y.((Plant(x) & Sunlight(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "all x.((Plant(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)) -> Photosynthesis(x))", "all x y z.((Plant(x) & Sunlight(y) & Photosynthesis(z)) -> AbsorbsToPerform(x,y,z))", "all x.(Plant(x) -> AbsorbsSunlightToPerformPhotosynthesis(x))", "all x y.((Plant(x) & Sunlight(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "all x.((Plant(x) & AbsorbsSunlight(x)) -> PerformsPhotosynthesis(x))", "exists x.(Plant(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x))", "all x y.((Plant(x) & Sunlight(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "all x y z.((Plant(x) & Sunlight(y) & Photosynthesis(z)) -> AbsorbsToPerform(x,y,z))", "all x y z.((Plant(x) & Sunlight(y) & Photosynthesis(z) & Absorbs(x,y)) -> Performs(x,z))", "exists x.(Plant(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x))", "all x y.((Plant(x) & Sunlight(y) & Absorbs(x,y)) -> PerformsPhotosynthesis(x))", "all x.((Plant(x) & AbsorbsSunlight(x)) -> PerformsPhotosynthesis(x))", "all x y.((Plant(x) & Sunlight(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "exists x.(Plant(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_610", "nl": "a leaf absorbs sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x.(Leaf(x) -> AbsorbsSunlightToPerformPhotosynthesis(x))", "all x y.((Leaf(x) & Sunlight(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "all x.(Leaf(x) -> AbsorbsSunlight(x))", "all x y z.((Leaf(x) & Sunlight(y) & Photosynthesis(z)) -> AbsorbsToPerform(x,y,z))", "all x y.((Leaf(x) & Sunlight(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "all x.((Leaf(x) & AbsorbsSunlight(x)) -> PerformsPhotosynthesis(x))", "all x.(Leaf(x) -> AbsorbsSunlightToPerformPhotosynthesis(x))", "all x.(Leaf(x) -> (AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x y.((Leaf(x) & Sunlight(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "all x y z.((Leaf(x) & Sunlight(y) & Photosynthesis(z)) -> AbsorbsToPerform(x,y,z))", "all x.(Leaf(x) -> AbsorbsSunlight(x))", "all x y.((Leaf(x) & Sunlight(y) & Absorbs(x,y)) -> PerformsPhotosynthesis(x))", "exists x.(Leaf(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x))", "all x y.((Leaf(x) & Sunlight(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "exists x.(Leaf(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x))", "exists x.(Leaf(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_611", "nl": "chlorophyll is found in the cells of leaves.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> FoundInLeavesCells(x))", "all x y.((Chlorophyll(x) & Leaf(y)) -> FoundInCells(x,y))", "all x.(Chlorophyll(x) -> FoundInLeaves(x))", "all x y z.((Chlorophyll(x) & Leaf(y) & Cell(z)) -> FoundIn(x,y,z))", "all x y.((Chlorophyll(x) & Leaves(y)) -> FoundInCells(x,y))", "(FoundInLeavesCells(chlorophyll)", "(exists x.(Chlorophyll(x) & FoundInLeaves(x)))", "all x.(Chlorophyll(x) -> FoundInLeavesCells(x))", "all x y.((Chlorophyll(x) & Leaf(y)) -> FoundInCells(x,y))", "all x y.((Chlorophyll(x) & Leaves(y)) -> FoundInCells(x,y))", "all x.(Chlorophyll(x) -> FoundInLeavesCells(x))", "exists x.(CHLophyll(x) & FoundIn(x,LeavesCells))", "all x.(Chlorophyll(x) -> FoundInLeavesCells(x))", "all x.(CHLophyll(x) -> FoundInLeavesCells(x))", "exists x.(Chlorophyll(x) & FoundInCellsOfLeaves(x))", "exists x.(Chlorophyll(x) & FoundInLeaves(x))"]}
{"id": "entailmentbank_validation_612", "nl": "chlorophyll is found in the cells of parts of plants that absorb sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> (FoundInCellsOfPlants(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x y.((Chlorophyll(x) & PlantPart(y) & AbsorbsSunlight(x,y)) -> FoundInCells(x,y))", "all x.(Chlorophyll(x) -> (FoundInCells(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x y.((Chlorophyll(x) & PlantPart(y)) -> (AbsorbsSunlight(x,y) & PerformsPhotosynthesis(x,y)))", "all x y z.((Chlorophyll(x) & PlantPart(y) & Cell(z) & AbsorbsSunlight(y,z)) -> Photosynthesis(x,y,z))", "all x.(Chlorophyll(x) -> (FindsInCellsOfPlantParts(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "(all x.(Chlorophyll(x) -> FoundInCells(x)) & exists y.(PlantPart(y) & AbsorbsSunlight(x,y)) & PerformsPhotosynthesis(x,y)))", "(all x.(Chlorophyll(x) -> FoundInCellsOfPlantParts(x)) & AbsorbsSunlightToPerformPhotosynthesis(x))", "all x y z.((Chlorophyll(x) & PlantPart(y) & PlantPart(z) & AbsorbsSunlight(y,z)) -> FoundInCells(x,y,z))", "all x.(Chlorophyll(x) -> (FoundInCellsOfPlantParts(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x.(Chlorophyll(x) -> exists y.(PlantPart(y) & AbsorbsSunlight(x,y)))", "all x y.((Chemophyll(x) & PlantPart(y) & AbsorbsSunlight(x,y)) -> FoundInCells(x,y))", "all x.(CHLophyll(x) -> (FindsInCells(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x y.((Chlorophyll(x) & PlantPart(y)) -> AbsorbsSunlightToPerformPhotosynthesis(x,y))", "exists x.(Chemophyll(x) & FoundInCellsOfPlants(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x))", "all x.(Chlorophyll(x) -> FoundInCellsOfPlantParts(x))"]}
{"id": "entailmentbank_validation_613", "nl": "chlorophyll is used for absorbing sunlight by plants.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> AbsorbsSunlight(x))", "all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsSunlight(x,y))", "(AbsorbsSunlightByPlants(chlorophyll)", "all x y z.((Chlorophyll(x) & Plant(y) & Sunlight(z)) -> Absorbs(x,y,z))", "all x.(Chlorophyll(x) -> AbsorbsSunlight(x))", "all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsSunlight(x,y))", "all x.(Chlorophyll(x) -> UsedForAbsorbingSunlight(x))", "(AbsorbsSunlightByPlants(chlorophyll)", "(AbsorbsSunlight(chlorophyll) & ByPlants(chlorophyll))", "all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsSunlight(x,y))", "all x.(Clorophyll(x) -> AbsorbsSunlight(x))", "all x.(Chlorophyll(x) -> UsedForAbsorbingSunlight(x))", "all x y.((Chlorophyll(x) & Plant(y)) -> UsedForAbsorbingSunlight(x,y))", "all x y.((Clorophyll(x) & Plant(y)) -> AbsorbsSunlight(x,y))", "all x.(Clorophyll(x) -> AbsorbsSunlightByPlants(x))", "all x.(Chlorophyll(x) -> UsedForAbsorbingSunlight(x))"]}
{"id": "entailmentbank_validation_614", "nl": "sunlight is a kind of light.", "fol": "", "prediction": ["all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x y.((Sunlight(x) & Light(y)) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x y.((Sunlight(x) & Light(y)) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x y.((Sunlight(x) & Light(y)) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x y.((Sunlight(x) & Light(y)) -> Light(x,y))", "all x y.((Sunlight(x) & Light(y)) -> Is(x,y))", "all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "exists x.(Sunlight(x) & KindOfLight(x))", "all x.(Sunlight(x) -> Light(x))", "exists x.(Sunlight(x) & Light(x))", "exists x.(Sunlight(x) & Light(x))"]}
{"id": "entailmentbank_validation_615", "nl": "light is a kind of energy.", "fol": "", "prediction": ["all x.(Light(x) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "all x y.((Light(x) & Energy(y)) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "all x y.((Light(x) & Energy(y)) -> Energy(x,y))", "all x.((Light(x) & Energy(x)) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "all x y.((Light(x) & Energy(y)) -> Energy(x,y))", "all x.(Light(x) -> Energy(x))", "all x y.((Light(x) & Energy(y)) -> Energy(x))", "all x y.(Light(x) -> Energy(y))", "exists x.(Light(x) & KindOfEnergy(x))", "all x.(Light(x) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "exists x.(Light(x) & Energy(x))"]}
{"id": "entailmentbank_validation_616", "nl": "sunlight is a kind of light energy.", "fol": "", "prediction": ["all x.(Sunlight(x) -> LightEnergy(x))", "all x y.((Sunlight(x) & LightEnergy(y)) -> LightEnergy(x,y))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x y.((Sunlight(x) & LightEnergy(y)) -> LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x y.((Sunlight(x) & LightEnergy(y)) -> LightEnergy(x,y))", "all x.(Sunlight(x) -> LightEnergy(x))", "exists x.(SunlightEnergy(x) & LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x y.((Sunlight(x) & LightEnergy(y)) -> Light(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "exists x.(Sunlight(x) & LightEnergy(x))", "exists x.(Sunlight(x) & LightEnergy(x))"]}
{"id": "entailmentbank_validation_617", "nl": "chlorophyll is used for absorbing light energy by plants.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> AbsorbsLightEnergy(x))", "all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsLightEnergy(x,y))", "all x y z.((Chlorophyll(x) & Plant(y) & LightEnergy(z)) -> Absorbs(x,y,z))", "(AbsorbsLightEnergyByPlants(chlorophyll,x))", "all x.(Chlorophyll(x) -> AbsorbsLightEnergy(x))", "all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsLightEnergy(x,y))", "all x.(Chlorophyll(x) -> UsedForAbsorbingLightEnergy(x))", "(AbsorbsLightEnergyByPlants(chlorophyll)", "all x y z.((Chlorophyll(x) & Plant(y) & LightEnergy(z)) -> Absorbs(x,y,z))", "all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsLightEnergy(x,y))", "all x.(Clorophyll(x) -> AbsorbsLightEnergyByPlants(x))", "all x.(Chlorophyll(x) -> UsedForAbsorbingLightEnergy(x))", "all x y.((Clorophyll(x) & Plant(y)) -> AbsorbsLightEnergy(x,y))", "all x.(Chlorophyll(x) -> UsedForAbsorbingLightEnergyByPlants(x))", "all x.(Clorophyll(x) -> AbsorbsLightEnergy(x))", "all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsLightEnergy(x,y))"]}
{"id": "entailmentbank_validation_618", "nl": "some microorganisms have a positive impact on human body.", "fol": "", "prediction": ["exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))", "exists x y.(Microorganism(x) & HumanBody(y) & PositiveImpact(x,y))", "exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))", "exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))", "all x y.((Microorganism(x) & HumanBody(y)) -> PositiveImpact(x,y))", "exists x y.(Microorganism(x) & HumanBody(y) & PositiveImpact(x,y))", "exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))", "all x y.((Microorganism(x) & HumanBody(y)) -> PositiveImpact(x,y))", "exists x y.(Microorganism(x) & HumanBody(y) & PositiveImpact(x,y))", "exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))", "exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))", "exists x.(MicrobialOrganism(x) & HasPositiveImpactOnHumanBody(x))", "exists x.(Microorganism(x) & PositiveImpact(x))", "exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))", "exists x.(Microorganism(x) & PositiveInfluence(x))", "exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))"]}
{"id": "entailmentbank_validation_619", "nl": "if something has a positive impact on another thing, then the relationship is benificial.", "fol": "", "prediction": ["all x.((PositiveImpact(x) & PositiveImpact(x)) -> BenificialRelationship(x))", "all x y.((PositiveImpact(x) & PositiveImpact(y)) -> BenificialRelationship(x,y))", "all x.((PositiveImpact(x) & PositiveImpactOnAnotherThing(x)) -> BenificialRelationship(x))", "all x y.((PositiveImpact(x) & PositiveImpact(y) & PositiveImpact(x,y)) -> BenificialRelationship(x))", "all x y.((PositiveImpact(x,y) & PositiveImpact(y)) -> BenificialRelationship(x))", "all x y z.((PositiveImpact(x) & PositiveImpact(y) & PositiveImpact(z) & Has(x,y)) -> BenificialRelationship(x))", "all x.(PositiveImpact(x) -> BenificialRelationship(x))", "all x y.((PropositiveImpact(x) & PositiveImpact(y) & PositiveImpact(x,y)) -> BenificialRelationship(x))", "all x.((PositiveImpact(x) & PositiveImpact(x)) -> BenificialRelationship(x))", "all x y.((PositiveImpact(x) & PositiveImpact(y) & Thing(y)) -> BenificialRelationship(x,y))", "all x.((PositiveImpact(x) & PositiveImpactOn(x,y)) -> BenificialRelationship(x))", "exists x.(PositiveImpact(x) & PositiveImpactOnAnotherThing(x))", "all x y.((PositiveImpact(x,y) & PositiveImpact(x,y)) -> BenificialRelationship(x,y))", "exists x.(PositiveImpact(x) & PositiveImpact(x) & NegativeRelationship(x))", "all x.((PositiveImpact(x) & PositiveImpact(x)) -> BenificialRelationship(x))", "all x y.((PositiveImpact(x) & PositiveImpact(x,y)) -> BenificialRelationship(x,y))"]}
{"id": "entailmentbank_validation_620", "nl": "some microorganisms are benificial to human body.", "fol": "", "prediction": ["exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x y.(Microorganism(x) & HumanBody(y) & BenificialTo(x,y))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x y.(Microorganism(x) & HumanBody(y) & BenificialTo(x,y))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x y.(Microorganism(x) & HumanBody(y) & BenificialTo(x,y))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microbial(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x y.(Microorganism(x) & HumanBody(y) & BenificialTo(x,y))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))"]}
{"id": "entailmentbank_validation_621", "nl": "disease-causing microbes have a negative impact on the body.", "fol": "", "prediction": ["all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x))", "all x.(DiseaseCausingMicrobe(x) -> NegativeImpactOnBody(x))", "all x y.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x,y))", "all x y.((DiseaseCausingMicrobe(x) & Body(y)) -> NegativeImpact(x,y))", "all x.(Microbe(x) -> (DiseaseCausing(x) & NegativeImpactOnBody(x)))", "(DiseaseCausingMicrobes(microbe) -> NegativeImpactOnBody(microbe))", "all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x))", "all x.(DiseaseCausingMicrobe(x) -> NegativeImpactOnBody(x))", "all x y z.((Microbe(x) & DiseaseCausing(x) & Body(y) & Body(z)) -> NegativeImpact(x,y,z))", "all x y.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(y))", "all x y.((DiseaseCausingMicrobe(x) & Body(y)) -> NegativeImpact(x,y))", "all x y.((Microbe(x) & DiseaseCausing(x,y)) -> NegativeImpactOnBody(x,y))", "all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x))", "all x.(Microbe(x) -> (DiseaseCausing(x) & NegativeImpactOnBody(x)))", "all x.(DiseaseCausingMicrobe(x) -> NegativeImpactOnBody(x))", "all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpact(x))"]}
{"id": "entailmentbank_validation_622", "nl": "if something has a negative impact on another thing, then the relationship is harmful.", "fol": "", "prediction": ["all x y.((NegativeImpact(x) & NegativeImpact(y)) -> HarmfulRelationship(x,y))", "all x.((NegativeImpact(x) & NegativeImpactOnAnotherThing(x)) -> HarmfulRelationship(x))", "all x y.((Relationship(x) & NegativeImpact(x,y) & Thing(y)) -> Harmful(x))", "all x y.((PositiveImpact(x) & NegativeImpact(y)) -> HarmfulRelationship(x,y))", "all x.((NegativeImpact(x) & NegativeImpact(x)) -> HarmfulRelationship(x))", "all x y z.((NegativeImpact(x) & NegativeImpact(y) & Thing(z) & Has(x,y,z)) -> HarmfulRelationship(x))", "all x y.((NegativeImpact(x,y) & NegativeImpact(y)) -> HarmfulRelationship(x,y))", "all x.((PositiveImpact(x) & NegativeImpactOnAnotherThing(x)) -> HarmfulRelationship(x))", "all x y z.((PositiveImpact(x) & NegativeImpact(y) & Thing(z) & Has(x,y,z)) -> HarmfulRelationship(x))", "all x y.((Relationship(x) & NegativeImpact(x) & NegativeImpact(y)) -> Harmful(x,y))", "all x.(NegativeImpact(x) -> HarmfulRelationship(x))", "all x y.((PositiveImpact(x) & NegativeImpact(y) & Has(x,y)) -> HarmfulRelationship(x))", "exists x.(NegativeImpact(x) & NegativeImpactOnAnotherThing(x))", "all x.((NegativeImpact(x) & NegativeImpactOnAnotherThing(x)) -> HarmfulRelationship(x))", "exists x.(NegativeImpact(x) & HasAnotherImpact(x))", "exists x.(NegativeImpact(x) & HarmfulRelationship(x))"]}
{"id": "entailmentbank_validation_623", "nl": "some disease-causing microbes are harmful to human body.", "fol": "", "prediction": ["exists x.(DiseaseCausingMicrobe(x) & HarmfulToHumanBody(x))", "exists x.(Microbe(x) & DiseaseCausing(x) & HarmfulToHumanBody(x))", "exists x.(DiseaseCausingMicrobe(x) & HarmfulToHumanBody(x))", "exists x.(Microbe(x) & DiseaseCausing(x) & HarmfulToHumanBody(x))", "exists x y.(DiseaseCausingMicrobe(x) & HumanBody(y) & HarmfulTo(x,y))", "exists x.(DiseaseCausingMicrobe(x) & HarmfulToHumanBody(x))", "exists x.(Microbe(x) & DiseaseCausing(x) & HarmfulToHumanBody(x))", "exists x y.(Microbe(x) & DiseaseCausing(x) & HumanBody(y) & HarmfulTo(x,y))", "exists x y.((Microbe(x) & DiseaseCausing(x)) & HumanBody(y))", "all x y.((Microbe(x) & DiseaseCausing(x)) -> HarmfulToHumanBody(y))", "exists x.(DiseaseCausingMicrobe(x) & HarmfulToHumanBody(x))", "exists x.(Microbe(x) & DiseaseCausing(x) & HarmfulToHumanBody(x))", "exists x.(DiseaseCausingMicrobe(x) & HarmfulToHumanBody(x))", "exists x.(Microbe(x) & DiseaseCausing(x) & HarmfulToHumanBody(x))", "exists x.(DiseaseCausingMicrobe(x) & HarmfulToHumanBody(x))", "exists x.(Microbe(x) & DiseaseCausing(x) & HarmfulToHumanBody(x))"]}
{"id": "entailmentbank_validation_624", "nl": "the relationship between human and microorganisms is sometimes beneficial and sometimes harmful.", "fol": "", "prediction": ["all x y.((Human(x) & Microorganism(y)) -> (BeneficialRelationship(x,y) | HarmfulRelationship(x,y)))", "all x.((Human(x) & Microorganism(x)) -> (BeneficialRelationship(x) | HarmfulRelationship(x)))", "exists x.(Relationship(x,y) & Human(y) & Microorganism(z) & OftenBeneficial(x) & OftenHarmful(x))", "all x y.((Human(x) & Microorganism(y)) -> (BenefitfulRelationship(x,y) | HarmfulRelationship(x,y)))", "all x y z.((Human(x) & Microorganism(y) & Relationship(z)) -> (Benefitful(z) | Harmful(z)))", "exists x.(HumanMicroorganismRelationship(x) & (Beneficial(x) | Harmful(x)))", "(all x.(HumanRelationship(x) -> Beneficial(x)) & all y.(MicroorganismRelationship(y) -> Harmful(y)))", "exists x.(HumanMicroorganism(x) & Relationship(x,y) & (Beneficial(y) | Harmful(y)))", "all x y.((Relationship(x,y) & Human(x) & Microorganism(y)) -> (Beneficial(x) | Harmful(x)))", "exists x.(Relationship(x) & (Human(x) | Microorganism(x))) -> (Benefitful(x) | Harmful(x)))", "all x y.((Human(x) & Microorganism(y)) -> (BeneficialRelationship(x,y) | HarmfulRelationship(x,y)))", "exists x.(Relationship(x,y) & Human(y) & Microorganism(z) & (Beneficial(x) | Harmful(x)))", "exists x.(HumanAndMicroorganism(x) & Beneficial(x) & Harmful(x))", "all x y z.((Human(x) & Microorganism(y) & Relationship(z)) -> (Benefitful(z) | Harmful(z)))", "all x y z.((Human(x) & Microorganism(y) & Relationship(z) & Beneficial(z) & Harmful(z)) -> Relationship(x,y,z))", "all x y.((Human(x) & Microorganism(y)) -> (BenefitfulRelationship(x,y) | HarmfulRelationship(x,y)))"]}
{"id": "entailmentbank_validation_625", "nl": "water is a kind of nonliving thing.", "fol": "", "prediction": ["all x.(Water(x) -> NonlivingThing(x))", "all x.(Water(x) -> NonlivingThing(x))", "all x.(Water(x) -> NonLivingThing(x))", "all x y.((Water(x) & NonlivingThing(y)) -> NonlivingThing(x))", "all x.((Water(x) & NonLivingThing(x)) -> NonLivingThing(x))", "(NonlivingThing(water,water))", "all x.(Water(x) -> NonlivingThing(x))", "all x y.((Water(x) & NonLivingThing(y)) -> NonlivingThing(x,y))", "all x.(Water(x) -> NonLivingThing(x))", "all x y.((Water(x) & NonlivingThing(y)) -> NonlivingThing(x))", "(NonlivingThing(Water,Water))", "all x.(Water(x) -> NonlivingThing(x))", "all x.(Water(x) -> NonlivingThing(x))", "all x.(Water(x) -> NonLivingThing(x))", "exists x.(Water(x) & -LivingThing(x))", "exists x.(Water(x) & -LivingThing(x))"]}
{"id": "entailmentbank_validation_626", "nl": "a river is a kind of body of water.", "fol": "", "prediction": ["all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x y.((River(x) & BodyOfWater(y)) -> Water(x))", "all x.(River(x) -> BodyOfWater(x))", "all x y.((River(x) & BodyOfWater(y)) -> -BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x y.((River(x) & BodyOfWater(y)) -> Water(x))", "all x y.((River(x) & BodyOfWater(y)) -> Is(x,y))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "exists x.(River(x) & BodyOfWater(x))", "exists x.(River(x) & TypeOfWater(x))", "exists x.(River(x) & BodyOfWater(x))"]}
{"id": "entailmentbank_validation_627", "nl": "a river is a nonliving thing.", "fol": "", "prediction": ["all x.(River(x) -> NonlivingThing(x))", "all x.(River(x) -> NonLivingThing(x))", "all x y.((River(x) & NonLivingThing(y)) -> NonLivingThing(x))", "all x.(River(x) -> NonlivingThing(x))", "all x y.((River(x) & FloatingThing(y)) -> NonlivingThing(x))", "all x.(River(x) -> NonLivingThing(x))", "all x y.((River(x) & NonlivingThing(y)) -> NonlivingThing(x))", "all x.(River(x) -> NonlivingThing(x))", "all x y.((River(x) & Stream(y)) -> NonLivingThing(x))", "all x.(River(x) -> NonLivingThing(x))", "all x.(River(x) -> NonlivingThing(x))", "all x.(River(x) -> NonlivingThing(x))", "exists x.(River(x) & -LivingThing(x))", "all x.(River(x) -> NonLivingThing(x))", "exists x.(River(x) & -LivingThing(x))", "exists x.(River(x) & -LivingThing(x))"]}
{"id": "entailmentbank_validation_628", "nl": "preferences are generally learned characteristics.", "fol": "", "prediction": ["all x.(Preference(x) -> LearnedCharacteristics(x))", "all x y.((Preference(x) & Preference(y)) -> LearnedCharacteristics(x))", "all x.(Preference(x) -> LearnedCharacteristics(x))", "all x.(Preferences(x) -> LearnedCharacteristics(x))", "all x.(PreferredCaracteristic(x) -> LearnedCaracteristic(x))", "(all x.(Preferences(x) -> LearnedCharacteristics(x)))", "all x.(Preference(x) -> LearnedCharacteristic(x))", "all x y.((Preference(x) & Preference(y)) -> LearnedCharacteristics(x))", "all x.(Private(x) -> LearnedCharacteristics(x))", "(all x.(Preference(x) -> LearnedCharacteristics(x)))", "all x.(PreferredCaracteristic(x) -> LearnedCaracteristic(x))", "all x y.((Preference(x) & LearningCharacteristic(y)) -> Learned(x))", "all x.(Preference(x) -> LearnedCharacteristics(x))", "all x.(Preferences(x) -> LearnedCharacteristics(x))", "(all x.(Preference(x) -> LearnedCaracteristics(x)))", "all x.(Private(x) -> LearnedCharacteristics(x))"]}
{"id": "entailmentbank_validation_629", "nl": "a food preference is a kind of preference.", "fol": "", "prediction": ["all x.(FoodPreference(x) -> Preference(x))", "all x.(FoodPreference(x) -> Preference(x))", "all x y.((FoodPreference(x) & Food(y)) -> Preference(x,y))", "all x.(FoodPreference(x) -> Preference(x))", "all x.((FoodPreference(x) & Preference(x)) -> Preference(x))", "all x y.((FoodPreference(x) & Preference(y)) -> Preference(x,y))", "all x y.((FoodPreference(x) & Food(y)) -> Preference(x,y))", "all x.(FoodPreference(x) -> Preference(x))", "all x y.((FoodPreferred(x) & FoodPreferred(y)) -> Preference(x,y))", "all x.(FoodPreferred(x) -> Preference(x))", "exists x.(FoodPath(x) & Preference(x) & Preference(x))", "all x.(FoodPreferred(x) -> Preference(x))", "all x.(FoodPreference(x) -> Preference(x))", "exists x.(FoodPreference(x) & Preferential(x))", "exists x.(FoodPreference(x) & -Preference(x))", "exists x.(FoodPreference(x) & KindOfPreference(x))"]}
{"id": "entailmentbank_validation_630", "nl": "food preference is a kind of learned characteristics.", "fol": "", "prediction": ["all x.(FoodPreference(x) -> LearnedCharacteristics(x))", "all x y.((FoodPreference(x) & LearnedCharacteristics(y)) -> LearnedCharacteristics(x))", "all x.(FoodPreference(x) -> LearnedCharacteristics(x))", "all x.((FoodPreference(x) & LearnedCharacteristics(x)) -> LearnedCharacteristics(x))", "all x.(FoodPreference(x) -> LearnedCharacteristics(x))", "all x y.((FoodPreferred(x) & Food(y)) -> LearnedCharacteristics(x))", "all x y.((FoodPreference(x) & LearningCharacteristics(y)) -> Learned(x))", "all x.(FoodPreferred(x) -> LearnedCharacteristics(x))", "exists x.(FoodPurpose(x) & LearnedCharacteristics(x))", "all x y.((FoodPreference(x) & LearnedCharacteristics(y)) -> Learned(x,y))", "all x.(FoodPreferred(x) -> LearnedCharacteristics(x))", "all x.(FoodPreference(x) -> LearntCharacteristics(x))", "all x.(FoodPreference(x) -> LearnedCharacteristics(x))", "exists x.(FoodPreference(x) & LearningCharacteristics(x))", "exists x.(FoodPriority(x) & LearnedCharacteristics(x))", "exists x.(FoodPreference(x) & LearnedCharacteristics(x))"]}
{"id": "entailmentbank_validation_631", "nl": "learned characteristics are similar to acquired characteristics.", "fol": "", "prediction": ["all x y.((LevedCharacteristic(x) & AcquiredCharacteristic(y)) -> SimilarTo(x,y))", "all x.((LevedCharacteristics(x) & AcquiredCharacteristics(x)) -> Similar(x))", "all x y.((LevedCharacteristics(x) & AcquiredCharacteristics(y)) -> SimilarTo(x,y))", "all x y.((LearntCharacteristics(x) & AcquiredCharacteristics(y)) -> SimilarTo(x,y))", "(all x.(LearningCharacteristics(x) -> AcquiredCharacteristics(x)))", "all x y z.((LevedCharacteristics(x) & AcquiredCharacteristics(y) & AcquiredCharacteristics(z)) -> SimilarTo(x,y,z))", "all x.((LevedCharacteristics(x) & AcquiredCharacteristics(x)) -> SimilarTo(x,AcquiredCharacteristics))", "(all x.(LearningCharacteristic(x) -> AcquiredCharacteristic(x)))", "all x.((LecturedCharacteristics(x) & AcquiredCharacteristics(x)) -> SimilarTo(x,y))", "all x.(LearningCharacteristics(x) -> SimilarToAcquiredCharacteristics(x))", "all x y.((LecturedCharacteristics(x) & AcquiredCharacteristics(y)) -> SimilarTo(x,y))", "all x.(LevedCharacteristics(x) -> SimilarToAcquiredCharacteristics(x))", "(all x.(LearningCharacteristics(x) -> AcquiredCharacteristics(x)))", "exists x.(LevedCharacteristics(x) & AcquiredCharacteristics(x))", "all x y.((LearnedCharacteristics(x) & AcquiredCharacteristics(y)) -> SimilarTo(x,y))", "all x.(LearningCharacteristics(x) -> SimilarToAcquiredCharacteristics(x))"]}
{"id": "entailmentbank_validation_632", "nl": "food preference is a kind of acquired characteristics.", "fol": "", "prediction": ["all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "all x y.((FoodPreference(x) & Food(y)) -> AcquiredCharacteristics(x,y))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "all x y.((FoodPreference(x) & AcquiredCharacteristics(y)) -> Acquired(x,y))", "all x.(FoodPreferred(x) -> AcquiredCharacteristics(x))", "all x y.((FoodPreference(x) & Food(y)) -> AcquiredCharacteristics(x,y))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "all x y.((FoodPreferred(x) & Food(y)) -> AchievedCharacteristics(x,y))", "all x.(FoodPreference(x) -> AchievedCharacteristics(x))", "exists x.(FoodPreferredCaracteristics(x) & Acquired(x))", "all x.(FoodPreferred(x) -> AcquiredCharacteristics(x))", "exists x.(FoodPriority(x) & AcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "exists x.(FoodPreference(x) & AppropriateCharacteristics(x))", "exists x.(FoodPreference(x) & AcquiredCharacteristics(x))"]}
{"id": "entailmentbank_validation_633", "nl": "an animal is a kind of organism.", "fol": "", "prediction": ["all x.(Animal(x) -> Organism(x))", "all x.(Animal(x) -> Organism(x))", "all x y.((Animal(x) & Organism(y)) -> Organism(x))", "all x.(Animal(x) -> Organism(x))", "all x y.((Animal(x) & Organism(y)) -> Organism(x))", "all x.(Animal(x) -> Organism(x))", "all x y.(Animal(x) -> Organism(y))", "all x.(Animal(x) -> Organism(x))", "all x y.(Animal(x) & Organism(y))", "all x.(Animal(x) -> Organism(x))", "all x.(Animal(x) -> Organism(x))", "exists x.(Animal(x) & Organospheric(x))", "all x.(Animal(x) -> Organism(x))", "all x.(Animal(x) -> Organism(x))", "exists x.(Animal(x) & Organism(x))", "exists x.(Animal(x) & Organism(x))"]}
{"id": "entailmentbank_validation_634", "nl": "a dog is a kind of animal.", "fol": "", "prediction": ["all x.(Dog(x) -> Animal(x))", "all x.(Dog(x) -> Animal(x))", "all x.(Dog(x) -> Animal(x))", "all x y.(Dog(x) -> Animal(y))", "all x.(Dog(x) -> Animal(x))", "all x y.(Dog(x) -> Animal(y))", "all x.(Dog(x) -> Animal(x))", "all x y.(Dog(x) -> Animal(x,y))", "all x.(Dog(x) -> Animal(x))", "all x.(Dog(x) -> Animal(x))", "all x y.(Dog(x) & Animal(y))", "all x.(Dog(x) -> Animal(x))", "exists x.(Dog(x) & Animal(x))", "exists x.(Dog(x) & Animal(x))", "exists x.(Dog(x) & Animal(x))", "exists x.(Dog(x) & Animal(x))"]}
{"id": "entailmentbank_validation_635", "nl": "a dog is a kind of organism.", "fol": "", "prediction": ["all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x y.(Dog(x) -> Organism(y))", "all x.(Dog(x) -> Organism(x))", "all x y.(Dog(x) -> Organism(y))", "all x.(Dog(x) -> Organism(x))", "all x y.(Dog(x) -> Organism(y))", "all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x y.(Dog(x) & Organism(y))", "all x.(Dog(x) -> Organism(x))", "exists x.(Dog(x) & Organospheric(x))", "exists x.(Dog(x) & Organism(x))", "exists x.(Dog(x) & Organism(x))", "exists x.(Dog(x) & Organism(x))"]}
{"id": "entailmentbank_validation_636", "nl": "an organism's environment affects that organism's acquired characteristics.", "fol": "", "prediction": ["all x y.((Organism(x) & Environment(y)) -> AffectsAcquiredCharacteristics(x,y))", "all x y z.((Organism(x) & Environment(y) & AcquiredCharacteristics(z)) -> Affects(x,y,z))", "all x.(Organism(x) -> AffectsEnvironment(x))", "all x.((Organism(x) & EnvironmentAffects(x,y)) -> AcquiredCharacteristics(y))", "all x y.((Organism(x) & Environment(y)) -> AffectsAcquiredCharacteristics(x,y))", "all x y z.((Organism(x) & Environment(y) & AcquiredCharacteristics(z)) -> Affects(x,y,z))", "all x.((Organism(x) & Environment(x)) -> AffectsAcquiredCharacteristics(x))", "all x y.((Organism(x) & Environment(y) & AffectsAcquiredCharacteristics(x,y)) -> AffectsAcquiredCharacteristics(x,y))", "all x.(Organism(x) -> AffectsEnvironment(x,Organism))", "all x y.((Organism(x) & Environment(y)) -> AffectsAcquiredCharacteristics(x,y))", "exists x.(OrganismEnvironment(x) & AffectsAcquiredCharacteristics(x))", "exists x.(OrganismsEnvironment(x) & AffectsAcquiredCharacteristics(x))", "all x y z.((Organism(x) & Environment(y) & AcquiredCharacteristics(z)) -> Affects(x,y,z))", "all x.(Organism(x) -> AffectsEnvironment(x,Organism))", "all x y.((Organism(x) & Environment(y) & AffectsAcquiredCharacteristics(x,y)) -> AffectsAcquiredCharacteristics(x,y))", "all x y.((Organism(x) & Environment(y)) -> AffectsAcquiredCharacteristics(x,y))"]}
{"id": "entailmentbank_validation_637", "nl": "the food preference of a dog is affected by its environment.", "fol": "", "prediction": ["all x y.((Dog(x) & Environment(y)) -> FoodPreferenceAffectedBy(x,y))", "all x.((Dog(x) & FoodPreference(x)) -> AffectedByEnvironment(x))", "all x.(Dog(x) -> AffectedByEnvironment(x))", "all x y.((Dog(x) & Environment(y)) -> FoodPreferred(x,y))", "all x.((Dog(x) & FoodPreferred(x,y)) -> AffectedByEnvironment(x,y))", "all x y z.((Dog(x) & FoodPreference(y) & Environment(z)) -> AffectedBy(x,y,z))", "all x.((Dog(x) & FoodPreferenceAffectedByEnvironment(x)) -> AffectedByEnvironment(x))", "exists x.(Dog(x) & FoodPreference(x) & AffectedByEnvironment(x))", "all x y.((Dog(x) & Environment(y)) -> FoodPreferenceAffectedBy(x,y))", "all x.(Dog(x) -> AffectedByEnvironment(x))", "all x y.((Dog(x) & FoodPreference(y)) -> AffectedByEnvironment(x,y))", "all x y z.((Dog(x) & FoodPreference(y) & Environment(z)) -> AffectedBy(x,y,z))", "all x y.((Dog(x) & Environment(y)) -> AffectedByFoodPreference(x,y))", "exists x.(Dog(x) & FoodPreferred(x) & AffectedByEnvironment(x))", "all x y.((Dog(x) & Environment(y) & FoodPreferred(x,y)) -> AffectedBy(x,y))", "exists x.(Dog(x) & FoodPreferenceAffectedByEnvironment(x))"]}
{"id": "entailmentbank_validation_638", "nl": "following orders is a learned characteristic.", "fol": "", "prediction": ["all x.((Order(x) & FollowingOrder(x)) -> LearnedCharacteristic(x))", "all x.(LearntCharacteristic(x) -> FollowingOrders(x))", "all x.((Order(x) & Follows(x)) -> LearnedCharacteristic(x))", "(LearntCharacteristic(x) -> FollowsOrders(x))", "all x y.((Order(x) & Order(y)) -> LearnedCharacteristic(x,y))", "all x.(LearntCharacteristic(x) -> FollowsOrders(x))", "all x.((Order(x) & Following(x)) -> LearnedCharacteristic(x))", "(LearntCharacteristic(x) -> FollowsOrders(x))", "(LearnsCharacteristic(x) & FollowsOrders(x))", "all x.(LearntCharacteristic(x) -> FollowsOrders(x))", "all x y.((Order(x) & Order(y)) -> LearnedCharacteristic(x,y))", "all x.((Order(x) & Follows(x)) -> LearnedCharacteristic(x))", "all x.((Order(x) & FollowingOrders(x)) -> LearnedCharacteristic(x))", "all x y.((Order(x) & Order(y)) -> LearnedCharacteristic(x,y))", "all x.(LearntCharacteristic(x) -> FollowingOrders(x))", "all x y.((Order(x) & Order(y)) -> LearnedCharacteristic(x))"]}
{"id": "entailmentbank_validation_639", "nl": "an example of following orders is coming when called.", "fol": "", "prediction": ["all x.((ExempleOfFollowingOrders(x) & Called(x)) -> Coming(x))", "all x.((ExempleOfFollowingOrders(x) & Called(x)) -> Coming(x))", "all x y.((Exemple(x) & Call(y) & FollowsOrders(x,y)) -> Coming(x))", "all x.((ExempleOfFollowingOrders(x) & Called(x)) -> Coming(x))", "all x.((Exemple(x) & Called(x)) -> FollowingOrders(x))", "exists x.(FollowingOrders(x) & Called(x))", "exists x.(ExempleOfFollowingOrders(x) & Called(x))", "all x y.((Exemple(x) & Call(y) & FollowingOrders(x,y)) -> Coming(x))", "all x y z.((Exemple(x) & Order(y) & Call(z) & Following(x,y)) -> Coming(x,y))", "exists an example of followingOrdersWhenCalled(x) -> Coming(x))", "all x y.((ExempleOfFollowingOrders(x) & Called(y)) -> Coming(x,y))", "all x y.((Exemple(x) & Order(y) & Called(x)) -> Following(x,y))", "exists x.(Order(x) & Follows(x))", "all x y.((Exemple(x) & Called(y)) -> FollowsOrders(x,y))", "exists x.(ExempleOfFollowingOrders(x) & Called(x))", "exists x.(FollowingOrders(x) & Called(x))"]}
{"id": "entailmentbank_validation_640", "nl": "a dog coming when called is a kind of learned characteristic.", "fol": "", "prediction": ["all x.((Dog(x) & ComingWhenCalled(x)) -> LearnedCharacteristic(x))", "all x.((Dog(x) & ComesWhenCalled(x)) -> LearnedCharacteristic(x))", "all x.(ComingWhenCalled(x) -> LearnedCharacteristic(x))", "all x y.((Dog(x) & ComingWhenCalled(x)) -> LearnedCharacteristic(y))", "all x.((Dog(x) & ComingWhenCalled(x)) -> LearnedCharacteristic(x))", "all x.(ComesWhenCalled(x) -> LearnedCharacteristic(x))", "all x y.((Dog(x) & Call(y)) -> LearnedCharacteristic(x))", "all x.((Dog(x) & ComesWhenCalled(x)) -> LearnedCharacteristic(x))", "all x y.((Dog(x) & ComingWhenCalled(x)) -> LearnedCharacteristic(y))", "all x y.((Dog(x) & ComesWhenCalled(x)) -> LearnedCharacteristic(y))", "all x y.((Dog(x) & Call(y) & ComingWhenCalled(x,y)) -> LearnedCharacteristic(x))", "exists x.(Dog(x) & ComesWhenCalled(x) & LearnedCharacteristic(x))", "all x.((Dog(x) & ComingWhenCalled(x)) -> LearnedCharacteristic(x))", "all x.(ComingWhenCalled(x) -> LearnedCharacteristic(x))", "all x.((Dog(x) & ComesWhenCalled(x)) -> LearnedCharacteristic(x))", "exists x.(Dog(x) & ComesWhenCalled(x))"]}
{"id": "entailmentbank_validation_641", "nl": "hunting is a kind of skill.", "fol": "", "prediction": ["all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))", "all x y.((Hunting(x) & Skill(y)) -> Skill(x))", "(Skill(hunting) & Skill(hunting))", "all x.(Hunting(x) -> Skill(x))", "all x.(Hooding(x) -> Skill(x))", "all x y.((Hunting(x) & Skill(y)) -> Skill(x))", "(HuntingSkill(hunting) & Skill(hunting))", "all x.(Hunting(x) -> Skill(x))", "all x y.((Hunting(x) & Skill(y)) -> Skill(x,y))", "all x.(Hooding(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))", "all x.(HookingSkill(x) -> Skill(x))", "exists x.(HuntingSkill(x) & Skill(x))", "all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))"]}
{"id": "entailmentbank_validation_642", "nl": "skills are learned characteristics / behaviors.", "fol": "", "prediction": ["all x.(Skill(x) -> (LecturedCharacteristics(x) | LearnedBehaviors(x)))", "(LearnsCharacteristics(Skills) & LearnedBehaviors(Skills))", "all x y.((Skill(x) & LearnedCharacteristics(y)) -> LearnedBehaviors(x,y))", "all x.(Skill(x) -> (LearnsCharacteristics(x) & LearnsBehaviors(x)))", "all x.(Skill(x) -> LearnedCharacteristics(x))", "all x y.((Skill(x) & LearnedCharacteristics(y)) -> LearnedBehaviors(x,y))", "all x y.(Skill(x) -> (LearnsCharacteristics(y) | LearnsBehaviors(y)))", "all x.(Skills(x) -> (LecturedCharacteristics(x) & LearnedBehaviors(x)))", "all x.(Skill(x) -> (LecturedCharacteristics(x) | LearnedBehaviors(x)))", "all x.((Skill(x) & LearnedCharacteristics(x)) -> LearnedBehaviors(x))", "all x.(Skill(x) -> LearnedCharacteristics(x))", "all x.(Skill(x) -> (LearntCharacteristics(x) & LearnedBehaviors(x)))", "all x y.((Skill(x) & LearnedCharacteristics(y)) -> LearnedBehaviors(x,y))", "exists x.(Skills(x) & LearnedCharacteristics(x) & LearnedBehaviors(x))", "exists x.(Skills(x) & LearnedCharacteristics(x) & LearnedBehaviorals(x))", "all x.(Skill(x) -> LearnedCharacteristics(x))"]}
{"id": "entailmentbank_validation_643", "nl": "hunting is a kind of learned behaviors.", "fol": "", "prediction": ["all x.(Hunting(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearnedBehavior(x))", "all x y.((Hunting(x) & LearnedBehavior(y)) -> LearnedBehavior(x))", "(LearntBehavior(hunting) & LearntBodies(hunting,hunting))", "all x y.((Hunting(x) & LearningBehavior(y)) -> Learned(x))", "(LearnedBehavior(hunting,y) & LearnedBehavior(y,x))", "all x.(Hunting(x) -> LearnedBehavior(x))", "all x y.((Hunting(x) & LearningBehavioral(y)) -> Learned(x))", "all x.(Hooding(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearnedBehaviors(x))", "all x.(Hooking(x) -> LearnedBehaviors(x))", "exists x.(Hooding(x) & LearnedBehavior(x))", "all x.(Hunting(x) -> LearningBehavior(x))", "all x.(Hunting(x) -> LearnedBehavior(x))"]}
{"id": "entailmentbank_validation_644", "nl": "inherited characteristics are the opposite of learned characteristics.", "fol": "", "prediction": ["all x.(EarnedCharacteristics(x) -> OppositeOfLevedCharacteristics(x))", "all x.((EarnedCharacteristics(x) & LearnedCharacteristics(x)) -> OppositeOf(x,LearningCharacteristics))", "all x y.((EarnedCharacteristics(x) & LearnedCharacteristics(y)) -> OppositeOf(x,y))", "(inheritedCharacteristics(inherited) & OppositeOfLevedCharacteristics(inherited))", "(OppositeOfLecturedCharacteristics(inherited))", "all x.(EarnedCharacteristics(x) -> OppositeOfLecturedCharacteristics(x))", "all x.((ErasedCharacteristics(x) & LearnedCharacteristics(x)) -> OppositeOf(x,LearningCharacteristics))", "all x.((EarnedCharacteristics(x) & LearnedCharacteristics(x)) -> OppositeOf(x,LearntCharacteristics))", "all x.(ErasedCharacteristics(x) -> OppositeOfLevedCharacteristics(x))", "all x y.((EarnedCharacteristics(x) & LearnedCharacteristics(y)) -> OppositeOf(x,y))", "(inheritedCharacteristics(inherited) & OppositeOfLearntCharacteristics(inherited))", "all x y.((ErasedCharacteristics(x) & LearnedCharacteristics(y)) -> Opposite(x,y))", "all x.(EarnedCharacteristics(x) -> OppositeOfLedgedCharacteristics(x))", "all x y.((EarnedCharacteristics(x) & LearnedCharacteristics(y)) -> OppositeOf(x,y))", "all x y.((ErasedCharacteristics(x) & LearnedCharacteristics(y)) -> OppositeOf(x,y))", "ALL X.((EarnedCharacteristics(x) & LearnedCharacteristics(x)) -> OppositeOf(x,LearnedCharacteristics))"]}
{"id": "entailmentbank_validation_645", "nl": "learned characteristics are not inherited from parents.", "fol": "", "prediction": ["all x.(LevedCharacteristics(x) -> -HasParents(x))", "all x y.((LevedCharacteristics(x) & Parent(y)) -> -HasLevedCharacteristics(x,y))", "all x.(LecturedCharacteristics(x) -> -HasParents(x))", "all x.(LearningCharacteristics(x) -> -HasParents(x))", "all x y.((LearntCharacteristics(x) & Parent(y)) -> -HasHead(x,y))", "(all x.(LearntCharacteristics(x) -> -HasParents(x)))", "all x y.((Lecture(x) & Parent(y)) -> -HasLecture(x,y))", "(all x.(Lecture(x) -> LearnedCharacteristics(x)) & -inheritedFromParents(x))", "(LesserCharacteristics(x) & -HasParents(x))", "all x.(LearntCharacteristics(x) -> -HorrowedFromParents(x))", "all x.((LevedCharacteristics(x) & -EarnedFromParents(x)) -> Learned(x))", "all x y.((LearnedCharacteristics(x) & Parent(y)) -> -HasHead(x,y))", "all x y.((LevedCharacteristics(x) & Parent(y)) -> -Horrible(x,y))", "all x.(LearningCharacteristics(x) -> -HerronedFromParents(x))", "-(LevedCharacteristics(s) & Parent(s))", "all x.(LesserCharacteristics(x) -> -HeritagedFromParents(x))"]}
{"id": "entailmentbank_validation_646", "nl": "food preference is not inherited from parents.", "fol": "", "prediction": ["all x.(FoodPreference(x) -> -HasParents(x))", "all x y.((FoodPreference(x) & Parent(y)) -> -HasEarnedFrom(x,y))", "all x.(FoodPreference(x) -> -EarnedFromParents(x))", "-EarnedFromParents(foodPreference)", "all x y.((FoodPreference(x) & Parent(y)) -> -ErasedFrom(x,y))", "all x.(FoodPreference(x) -> -ErasedFromParents(x))", "(-inheritedFromParents(foodPreferredPriority))", "(all x.(FoodPreference(x) -> -HasParents(x)))", "all x y.((FoodPreference(x) & Parent(y)) -> -HasInheritance(x,y))", "all x.(FoodPreference(x) -> -HasParents(x))", "all x y.((FoodPreference(x) & Parent(y)) -> -EarnedFrom(x,y))", "all x.(FoodPreferred(x) -> -ErasedFromParents(x))", "all x.(FoodPreference(x) -> -EarnedFromParents(x))", "exists x.(FoodPreferred(x) & -inheritedFromParents(x))", "all x y.((FoodPreferred(x) & Parent(y)) -> -inheritedFrom(x,y))", "exists x.(FoodPreference(x) & -Inheritance(x))"]}
{"id": "entailmentbank_validation_647", "nl": "the intelligence of animals is an acquired characteristic.", "fol": "", "prediction": ["all x.((Animal(x) & Intelligence(x)) -> AcquiredCharacteristic(x))", "all x.((AnimalIntelligence(x) & AcquiredCharacteristic(x)) -> Intelligence(x))", "all x y.((Animal(x) & Intelligence(y)) -> AcquiredCharacteristic(x,y))", "all x.(IntelligenceOfAnimals(x) -> AcquiredCharacteristic(x))", "all x.((Animal(x) & Intelligence(x)) -> AcquiredCharacteristic(x))", "all x y.((Animal(x) & Intelligence(y)) -> AcquiredCharacteristic(x,y))", "all x.(AnimalIntelligence(x) -> AcquiredCharacteristic(x))", "(AcquiredCharacteristic(animal,intelligence))", "all x.((AnimalIntelligence(x) & AcquiredCharacteristic(x)) -> Intelligence(x))", "all x y.((Animal(x) & Animal(y)) -> IntelligenceAcquiredCharacteristic(x,y))", "all x.(IllnessOfAnimals(x) -> AcquiredCharacteristic(x))", "all x.(IntelligenceOfAnimals(x) -> AcquiredCharacteristic(x))", "exists x.(AnimalIntelligence(x) & AcquiredCharacteristic(x))", "all x y.((Animal(x) & Intelligence(y)) -> AcquiredCharacteristic(x,y))", "all x y.((Animal(x) & Animal(y)) -> IntelligenceAcquiredCharacteristic(x,y))", "all x y.((Animal(x) & Intelligence(y)) -> AcquiredCharacteristic(x,y))"]}
{"id": "entailmentbank_validation_648", "nl": "the intelligence of a human is an acquired characteristic.", "fol": "", "prediction": ["all x.(HumanIntelligence(x) -> AcquiredCharacteristic(x))", "all x y.((Human(x) & Human(y)) -> AcquiredCharacteristic(x,y))", "all x.(Human(x) -> AcquiredCharacteristic(x))", "all x.((Human(x) & Intelligence(x)) -> AcquiredCharacteristic(x))", "all x y.((Human(x) & Intelligence(y)) -> AcquiredCharacteristic(x,y))", "(AcquiredCharacteristic(Human(Human) & Intelligence(Human))", "all x.(HumanIntelligence(x) -> AcquiredCharacteristic(x))", "exists x.(Intelligence(x) & Human(x) & AcquiredCharacteristic(x))", "all x y.((Human(x) & Human(y)) -> AppropriateCharacteristic(x,y))", "all x.((Human(x) & IntelligenceAcquiredCharacteristic(x)) -> AcquiredCharacteristic(x))", "all x.((Human(x) & Intelligence(x)) -> AcquiredCharacteristic(x))", "all x y.((Human(x) & Intelligence(y)) -> AcquiredCharacteristic(x,y))", "all x.(HumanIntelligence(x) -> AcquiredCharacteristic(x))", "all x y.((Human(x) & Human(y)) -> AcquiredCharacteristic(x,y))", "all x y.((Human(x) & Intelligence(y)) -> AcquiredCharacteristic(x,y))", "all x.(HumanIntelligence(x) -> AcquiredCharacteristic(x))"]}
{"id": "entailmentbank_validation_649", "nl": "inherited characteristics are the opposite of acquired characteristics.", "fol": "", "prediction": ["all x.(EarnedCharacteristics(x) -> OppositeOfAcquiredCharacteristics(x))", "all x.((EarnedCharacteristics(x) & AcquiredCharacteristics(x)) -> OppositeOf(x,AcquiredCharacteristics))", "all x y.((EarnedCharacteristics(x) & AcquiredCharacteristics(y)) -> OppositeOf(x,y))", "(OppositeOfAcquiredCharacteristics(inherited))", "(inheritedCharacteristics(inherited) & OppositeOfAcquiredCharacteristics(inherited))", "all x.((ErasedCharacteristics(x) & AcquiredCharacteristics(x)) -> Opposite(x,y))", "all x.(EarnedCharacteristics(x) -> OppositeOfAcquiredCharacteristics(x))", "all x.((EarnedCharacteristics(x) & AcquiredCharacteristics(x)) -> Opposite(x))", "all x y.((EarnedCharacteristics(x) & AcquiredCharacteristics(y)) -> OppositeOf(x,y))", "(OppositeOfAcquiredCharacteristics(inherited))", "all x y.((ErasedCharacteristics(x) & AcquiredCharacteristics(y)) -> OppositeOf(x,y))", "all x.(EarnedCharacteristics(x) -> OppositeOfAcquiredCharacteristics(x))", "all x y.((EarnedCharacteristics(x) & AcquiredCharacteristics(y)) -> OppositeOf(x,y))", "all x y.((ErasedCharacteristics(x) & AcquiredCharacteristics(y)) -> Opposite(x,y))", "ALL X.((EarnedCharacteristics(x) & AcquiredCharacteristics(x)) -> OppositeOf(x,AcquiredCharacteristics))", "all x.(EarnedCharacteristics(x) -> OppositeOfAcquiredCharacteristics(x))"]}
{"id": "entailmentbank_validation_650", "nl": "the intelligence of a human is not an inherited characteristic.", "fol": "", "prediction": ["all x.(Human(x) -> -HasIntelligence(x))", "all x y.((Human(x) & Human(y)) -> -HasIntelligence(x,y))", "all x.(Human(x) -> -HadEarnedCharacteristic(x))", "all x.(HumanIntelligence(x) -> -HasEarnedCharacteristic(x))", "all x y.((Human(x) & Human(y)) -> -HadEarnedCharacteristic(x,y))", "all x.((Human(x) & Intelligence(x)) -> -HereboredCharacteristic(x))", "all x.(Human(x) -> -Intelligence(x))", "all x y.((Human(x) & Intelligence(y)) -> -HasEarnedCharacteristic(x,y))", "all x.(HumanIntelligence(x) -> -HereboredCharacteristic(x))", "all x y.((Human(x) & Human(y)) -> -Intelligence(x,y))", "all x y.((Human(x) & Human(y) & Intelligence(x,y)) -> -HasEarnedCharacteristic(x))", "(all x.(Human(x) -> Intelligence(x)))", "all x.((Human(x) & Intelligence(x)) -> -EarnedCharacteristic(x))", "(-inheritedCharacteristic(human))", "exists x.(HumanIntelligence(x) & -EarnedCharacteristic(x))", "exists x.(HumanIntelligence(x) & -Herevity(x))"]}
{"id": "entailmentbank_validation_651", "nl": "genes is a vehicle for passing inherited characteristics from parent to offspring.", "fol": "", "prediction": ["all x.(Genes(x) -> (PassesEarnedCharacteristics(x) & FromParentToOffspring(x)))", "all x y.((Genes(x) & Parent(y)) -> PassesEarnedCharacteristics(x,y))", "all x y z.((Gene(x) & Parent(y) & Offspring(z)) -> PassesEarnedCharacteristics(x,y,z))", "all x y.((Gene(x) & Parent(y)) -> PassesEarnedCharacteristics(x,y))", "all x.(Genes(x) -> VehicleForPassingEarnedCharacteristics(x))", "all x y z.((Genes(x) & Parent(y) & Offspring(z)) -> PassesEarnedCharacteristics(x,y,z))", "all x.(Genes(x) -> PassesEarnedCharacteristics(x))", "all x y.((Genes(x) & Offspring(y)) -> PassesEarnedCharacteristics(x,y))", "all x.(Genes(x) -> (PassesErasedCharacteristics(x) & FromParentToOffspring(x)))", "all x.((Genes(x) & PassesHeritageCharacteristics(x,Parent,Offspring)) -> VehicleForGenes(x))", "all x y z.((Gene(x) & Parent(y) & Offspring(z)) -> PassesEarnedCharacteristics(x,y,z))", "all x y.((Gene(x) & Offspring(y)) -> PassesEarnedCharacteristics(x,y))", "exists x.(Gene(x) & PassesEarnedCharacteristicsFromParentToOffspring(x))", "all x.(Genes(x) -> VehicleForPassingEarnedCharacteristics(x))", "all x.(Gain(x) -> PassesEarnedCharacteristics(x))", "all x.(Genes(x) -> (PassesHorrorizedCharacteristics(x,Parent,Offspring)))"]}
{"id": "entailmentbank_validation_652", "nl": "a father is a kind of male parent.", "fol": "", "prediction": ["all x.(Parent(x) -> Male(x))", "all x.(Father(x) -> MaleParent(x))", "all x.(Parent(x) -> MaleParent(x))", "all x y.((Father(x) & MaleParent(y)) -> MaleParent(x))", "all x.((Parent(x) & Father(x)) -> MaleParent(x))", "all x.(Father(x) -> MaleParent(x))", "all x y.((Parent(x) & Father(y)) -> MaleParent(x))", "all x y.((Father(x) & MaleParent(y)) -> Parent(x,y))", "all x.(Parent(x) -> Male(x))", "all x.(Daughter(x) -> MaleParent(x))", "all x y.((Parent(x) & Father(y)) -> MaleParent(x,y))", "exists x.(Parent(x) & Father(x) & MaleParent(x))", "all x.(Father(x) -> MaleParent(x))", "exists x.(Parent(x) & Father(x))", "exists x.(Daughter(x) & MaleParent(x))", "exists x.(Daughter(x) & MaleParent(x))"]}
{"id": "entailmentbank_validation_653", "nl": "a mother is a kind of female parent.", "fol": "", "prediction": ["all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FemaleParent(x))", "exists x y.(Mother(x) & FemaleParent(y) & Parent(x,y))", "all x.(Mother(x) -> FemaleParent(x))", "all x.((Mother(x) & FemaleParent(x)) -> FemaleParent(x))", "exists x y.(Mother(x) & FemaleParent(y) & Parent(x,y))", "all x.(Mother(x) -> FemaleParent(x))", "exists x y.(Mother(x) & FemaleParent(y) & Has(x,y))", "exists x y.(Mother(x) & Parent(y) & Female(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x.((Mother(x) & FemaleParent(x)) -> FemaleParent(x))", "all x.(Mother(x) -> FeminineParent(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FemaleParent(x))"]}
{"id": "entailmentbank_validation_654", "nl": "genes are a vehicle for passing inherited characteristics from a mother and a father to offspring.", "fol": "", "prediction": ["all x y.((Gene(x) & Mother(y) & Father(y)) -> PassesEarnedCharacteristicsToOffspring(x,y))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassesEarnedCharacteristics(x,y,z) & Offspring(x)))", "all x.(Genes(x) -> (PassesMotherAndDaughterCharacteristics(x) & PassesToOffspring(x)))", "all x.(Genes(x) -> (PassesEarnedCharacteristics(x) & FromMotherToOffspring(x)))", "all x y.((Gene(x) & Mother(y) & Father(y)) -> PassesEarnedCharacteristicsToOffspring(x,y))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassesEarnedCharacteristics(x,y,z) & ToOffspring(x,offspring)))", "all x y.((Genes(x) & Mother(y) & Father(y)) -> PassesEarnedCharacteristicsToOffspring(x,y))", "(Genes(gene) & PassingMotherAndParentCharacteristicsToOffspring(gene))", "all x.(Genes(x) -> (PassesMotherAndParentCharacteristics(x) & ToOffspring(x)))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> PassesEarnedCharacteristicsToOffspring(x,y,z))", "all x.(Genes(x) -> (VehicleForPassingEarnedCharacteristics(x) & FromMotherToOffspring(x)))", "all x y.((Gene(x) & Mother(y) & Father(z)) -> PassesHeritageToOffspring(x,y,z))", "all x.(Genes(x) -> (PassesEarnedCharacteristics(x) & FromMotherToOffspring(x)))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassesHeritage(x,y,z) & Offspring(x,y)))", "all x.(Genes(x) -> PassesEarnedCharacteristics(x))", "all x.(Genes(x) -> (PassingMotherAndParentCharacteristics(x) & OffspringCharacteristics(x)))"]}
{"id": "entailmentbank_validation_655", "nl": "in sexual reproduction sperm is a vehicle for the genes from the father to the offspring.", "fol": "", "prediction": ["all x y.((Ssperm(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromFatherToOffspring(x)))", "all x y z.((Sparrow(x) & SexualReproduction(y) & Gene(z)) -> VehicleForGenesFromPatronToOffspring(x,y,z))", "all x.((Ssperm(x) & SexualReproduction(x)) -> VehicleForGenes(x))", "all x.(SexualReproduction(x) -> (VehicleForGenes(x) & FromFatherToOffspring(x)))", "all x y z.((Ssperm(x) & SexualReproduction(y) & Gene(z)) -> (VehicleForGenes(x,z) & FromPastorToOffspring(x)))", "all x y.((Sparrow(x) & SexualReproduction(y)) -> VehicleForGenes(x,y))", "all x.((Ssperm(x) & SexualReproduction(x)) -> VehicleForGenesFromFatherToOffspring(x))", "all x.(Ssperm(x) -> (VehicleForGenes(x) & FromPastorToOffspring(x)))", "all x y z.((SexualReproduction(x) & Sperm(y) & Genes(z)) -> VehicleForGenesFromPatronToOffspring(y,z))", "all x y.((Ssperm(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromPastorToOffspring(x)))", "all x y z.((Sparrow(x) & SexualReproduction(y) & Gene(z) & FromPastorToOffspring(x,z)) -> VehicleForGenes(x,y,z))", "(all x.(SexualReproduction(x) -> Sperm(x)))", "all x.(SexualReproduction(x) -> (VehicleForGenes(x,father,offspring)))", "all x.(Sparrow(x) -> (VehicleForGenes(x) & FromFatherToOffspring(x)))", "all x.((Ssperm(x) & SexualReproduction(x)) -> VehicleForGenes(x,father,offspring))", "all x y.((Sparrow(x) & SexualReproduction(y)) -> VehicleForGenes(x,y))"]}
{"id": "entailmentbank_validation_656", "nl": "in sexual reproduction the egg is a vehicle for the genes from the mother to the offspring.", "fol": "", "prediction": ["all x y.((Egg(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromMotherToOffspring(x)))", "all x y z.((Egg(x) & SexualReproduction(y) & Gene(z)) -> VehicleForGenesFromMotherToOffspring(x,y,z))", "all x.((Egg(x) & SexualReproduction(x)) -> VehicleForGenes(x))", "all x y z.((Egg(x) & SexualReproduction(y) & Gene(z)) -> (VehicleForGenes(x,y,z) & FromMotherToOffspring(x)))", "all x y.((Egg(x) & SexualReproduction(y)) -> VehicleForGenes(x,y))", "all x.(Egg(x) -> (VehicleForGenes(x) & FromMotherToOffspring(x)))", "(VehicleForGenesFromMotherToOffspring(egg,sexualReproduction))", "all x.((Egg(x) & SexualReproduction(x)) -> VehicleForGenes(x,Mother,Offspring))", "all x.((Egg(x) & Genes(x) & FromMotherToOffspring(x)) -> VehicleForGenes(x))", "all x y.((Egg(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromMotherToOffspring(x,y)))", "all x.(SexualReproduction(x) -> (Egg(x) & GeneVehicle(x) & FromMotherToOffspring(x)))", "all x y z.((Egg(x) & SexualReproduction(y) & Mother(z) & Offspring(z)) -> VehicleForGenes(x,y,z))", "(all x.(Egg(x) -> GeneVehicle(x,Mother,Offspring))", "all x y.((Egg(x) & SexualReproduction(y) & Genes(x,y)) -> VehicleForGenes(x,y))", "all x y z.((Egg(x) & SexualReproduction(y) & Gene(z) & FromMotherToOffspring(x,z)) -> VehicleForGenes(x,y,z))", "all x.((Egg(x) & SexualReproduction(x)) -> VehicleForGenesFromMotherToOffspring(x))"]}
{"id": "entailmentbank_validation_657", "nl": "genes are passed from a mother and a father to offspring through the egg and sperm.", "fol": "", "prediction": ["all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassedFromToOffspring(x,y,z) & ThroughEggAndSperm(x)))", "all x y.((Gene(x) & Mother(y) & Father(y)) -> PassedToOffspring(x,y))", "all x y.((Genes(x) & Mother(y) & Father(y)) -> PassedToOffspring(x,y))", "all x y z.((Genes(x) & Mother(y) & Father(z)) -> (PassedFromToOffspring(x,y,z) & ThroughEggAndSperm(x)))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassedFromToOffspring(x,y,z) & ThroughEggAndSperm(x)))", "all x y z.((Gene(x) & Mother(y) & Father(z) & Offspring(x) & Egg(x) & Sperm(x)) -> PassedFromTo(x,y,z))", "(all x y.((Mother(x) & Father(y)) -> GenesPassed(x,y)) & All z w.((Offspring(z) & Egg(w) & Sperm(w)) -> Offspring(z)))", "(all x y z.((Mother(x) & Father(y) & Offspring(z)) -> GenesPassed(x,y,z)))", "all x y.((Gene(x) & Mother(y) & Father(y)) -> (PassedFromToOffspring(x,y) & ThroughEggAndSperm(x)))", "all x.(GenesPassedFromMotherToOffspring(x) & PassedFromToOffspring(x))", "all x.(GenesPassed(x) -> (Mother(x) & Father(x) & Offspring(x) & ThroughEggAndSperm(x)))", "all x.(GenesPassedFromMotherAndFatherToOffspring(x) & ThroughEggAndSperm(x))", "all x y z.(Genes(x,y) -> (Mother(y) & Father(z) & Offspring(y) & Egg(y) & Sperm(y)))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassedToOffspring(x,y,z) & ThroughEggAndSperm(x)))", "all x y.((Genes(x) & Mother(y) & Father(y)) -> PassedToOffspring(x,y))", "all x.(GenesPassedFromMotherToOffspring(x,Egg,Sperm,Spore))"]}
{"id": "entailmentbank_validation_658", "nl": "genes determine the traits for the living things.", "fol": "", "prediction": ["all x y.((Gene(x) & LivingThing(y)) -> DeterminesTraits(x,y))", "all x.(Genes(x) -> DeterminesTraitsForLivingThings(x))", "all x y z.((Gene(x) & LivingThing(y) & Trait(z)) -> Determines(x,y,z))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesTreatments(x,y))", "all x.(Genes(x) -> DetermineTreatmentsForLivingThings(x))", "(all x.(Genes(x) -> DeterminesTraits(x,livingThing)))", "(DeterminesTraitsForLivingThings(genes) & LivingThing(livingthings))", "all x.(Genes(x) -> DeterminesTreatments(x,livingThings))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesTraits(x,y))", "all x y z.((Gene(x) & LivingThing(y) & Traits(z)) -> Determines(x,y,z))", "all x.(GenesDetermineTraits(x) -> LivingThings(x))", "exists x.(Gene(x) & DeterminesTraits(x) & ForLivingThings(x))", "all x.(Genes(x) -> DetermineTraits(x))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesTreatments(x,y))", "exists x.(Gene(x) & DeterminesTreatments(x,livingThings))", "all x y.((Gene(x) & LivingThing(y)) -> DetermineTreatmentsFor(x,y))"]}
{"id": "entailmentbank_validation_659", "nl": "traits are passed from a mother and a father to offspring through the egg and sperm.", "fol": "", "prediction": ["all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> TraitsPassed(x,y,z))", "all x y.((Mother(x) & Father(y) & Offspring(x,y)) -> (PassedThroughEgg(x,y) & PassedThroughSperm(x,y)))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> (PassedFromTo(x,y,z) & Through(x,z)))", "all x.(Talent(x) -> (PassedFromMotherToOffspring(x) & PassedFromToOffspring(x) & ThroughEggAndSperm(x)))", "all x y.((Mother(x) & Father(y) & Offspring(x) & Egg(y) & Sperm(y)) -> PassedTreatments(x,y))", "(all x y z.((Mother(x) & Father(y) & Offspring(z)) -> (Mother(x) & Father(x) & Egg(y) & Sperm(z)))", "(TraitsPassedFromMotherToOffspring(tacts,egg,sperm))", "all x y.((Mother(x) & Father(y)) -> (PassedThreat(x,y) & Offspring(y) & ThroughEggAndSperm(x)))", "all x.(TraitsPassedFromMotherToOffspring(x) & PassedFromToOffspring(x))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> PassedTreatments(x,y,z))", "all x y z.((Treatment(x) & Mother(y) & Father(z)) -> (PassedFromToOffspring(x,y,z) & ThroughEggAndSperm(x)))", "(TreatmentsPassedFromMotherToOffspring(x) & FromMotherToOffspring(x))", "all x y z.((Mother(x) & Father(y) & Offspring(z)) -> (PassedThrough(x,y,z) & Through(x,y)))", "all x y.((Mother(x) & Father(y) & Offspring(y)) -> (PassedThroughEggAndSperm(x,y)))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z)) -> (PassedThrough(x,y,z) & PassedThrough(x,z)))", "all x.(TalentsPassedFromMotherToOffspring(x,Egg,Sperm,Offspring))"]}
{"id": "entailmentbank_validation_660", "nl": "dna is a kind of nucleic acid.", "fol": "", "prediction": ["all x.(Dna(x) -> NucleicAcid(x))", "all x y.((Dna(x) & NucleicAcid(y)) -> Is(x,y))", "all x.(Dna(x) -> NucleicAcid(x))", "(NucleicAcid(dna,d) & NucleicAcid(d))", "all x y.((Dna(x) & NucleicAcid(y)) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.((Dna(x) & NucleicAcid(x)) -> Is(x,y))", "(NucleicAcid(dna,d))", "all x y.((Dna(x) & NucleicAcid(y)) -> Is(x,y))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "exists x.(Dna(x) & NucleicAcid(x))"]}
{"id": "entailmentbank_validation_661", "nl": "thymine is found in dna.", "fol": "", "prediction": ["all x.(Thymine(x) -> FoundInDna(x))", "all x y.((Thymine(x) & Dna(y)) -> FoundIn(x,y))", "(FoundInDna(thymine) & FoundInDna(thymine))", "all x.(Thymine(x) -> FoundInDna(x))", "-Thymine(x) & FoundInDna(x))", "all x y.((Thymine(x) & Dna(y)) -> FoundIn(x,y))", "all x y z.((Thymine(x) & Dna(y) & Dna(z)) -> FoundIn(x,y,z))", "all x.(Thymine(x) -> FoundInDna(x))", "(FoundInDna(thymine)", "all x y.((Thymine(x) & Dna(y)) -> FoundIn(x,y))", "(FoundInDna(thymine)", "all x.(Thymine(x) -> FoundInDna(x))", "exists x.(Thymine(x) & FoundIn(x,Dna))", "all x y.((Thymine(x) & Dna(y)) -> FoundIn(x,y))", "exists x.(Thymine(x) & FoundIn(x,dna))", "exists x.(Thymine(x) & FoundIn(x,Dna))"]}
{"id": "entailmentbank_validation_662", "nl": "thymine cannot be found in rna.", "fol": "", "prediction": ["all x.(Thymine(x) -> -FoundInRna(x))", "-exists x.(Thymine(x) & -FindsInRna(x))", "all x.(Thymine(x) -> -FindsInRna(x))", "-FoundInRna(thymine)", "-exists x.(Thymine(x) & -FoundIn(x,Rna))", "all x y.((Thymine(x) & Rna(y)) -> -FoundIn(x,y))", "-CanBeFoundInRna.", "-exists x.(Thymine(x) & -FindsInRna(x))", "(-FoundInRna(thymine))", "all x.(Thymine(x) -> -FoundInRna(x))", "(-FindsInRna(thymine,rna))", "all x y.((Thymine(x) & Rhna(y)) -> -Finds(x,y))", "-exists x.(Thymine(x) & InRna(x))", "all x.(Thymine(x) -> -FindsInRna(x))", "all x.(Thymine(x) -> -FoundInRna(x))", "-exists x.(Thymine(x) & -FoundInRna(x))"]}
{"id": "entailmentbank_validation_663", "nl": "if thymine is found in a strand of nucleic acid, then the nucleic acid is dna.", "fol": "", "prediction": ["all x y.((Thymine(x) & NucleicAcid(y) & FoundInString(x,y)) -> Dna(x))", "all x.((Thymine(x) & FoundInNucleicAcid(x)) -> Dna(x))", "all x y z.((Thymine(x) & NucleicAcidString(y) & NucleicAcid(z) & FoundIn(x,y)) -> Dna(x))", "all x y.((Thymine(x) & NucleicAcidString(y) & FoundIn(x,y)) -> Dna(x))", "all x.((Thymine(x) & FoundInNucleicAcid(x)) -> Dna(x))", "(all x.((Thymine(x) & FoundInNucleicAcid(x)) -> Dna(x))", "all x y z.((Thymine(x) & NucleicAcidString(y) & NucleicAcid(z) & FoundIn(x,y)) -> Dna(x))", "all x y.((Thymine(x) & NucleicAcidString(y) & FoundIn(x,y)) -> Dna(x))", "all x y.((Thymine(x) & NucleicAcidString(y)) -> Dna(x,y))", "all x.((Thymine(x) & FoundInNucleicAcid(x)) -> Dna(x))", "all x y.((Thymine(x) & StrandOfNucleicAcid(y) & FoundIn(x,y)) -> Dna(x))", "all x.((Thymine(x) & FoundInStringOfNucleicAcid(x)) -> Dna(x))", "all x.((Thymine(x) & FoundInNucleicAcid(x)) -> Dna(x))", "all x y.((Thymine(x) & NucleicAcidString(y) & FoundIn(x,y)) -> Dna(x))", "all x.((Thymine(x) & FoundInNucleicAcidSstrand(x)) -> Dna(x))", "all x.((Thymine(x) & FoundInNucleicAcid(x)) -> Dna(x))"]}
{"id": "entailmentbank_validation_664", "nl": "a researcher found thymine in a strand of nucleic acid.", "fol": "", "prediction": ["all x y.((Researcher(x) & Thymine(y)) -> FoundInNucleicAcid(x,y))", "all x y z.((Researcher(x) & Thymine(y) & NucleicAcid(z)) -> FoundInString(x,y,z))", "all x.((Researcher(x) & FoundThymineInNucleicAcid(x)) -> FoundThymineInNucleicAcid(x))", "(FindsThymineInNucleicAcid(researcher))", "(Researcher(researcher) & FoundThymineInNucleicAcidString(researcher))", "all x y.((Researcher(x) & Thymine(y)) -> FoundInNucleicAcid(x,y))", "all x y z.((Researcher(x) & Thymine(y) & NucleicAcid(z)) -> FoundInString(x,y,z))", "(FoundThymineInNucleicAcidString(researcher))", "all x.((Researcher(x) & Thymine(x)) -> FoundInNucleicAcid(x))", "exists x.(Researcher(x) & FoundThymineInNucleicAcid(x))", "all x y.((Researcher(x) & Thymine(y) & NucleicAcid(z)) -> FoundInString(x,y,z))", "all x y.((Researcher(x) & Thymine(y)) -> FoundInNucleicAcid(x,y))", "all x y z.((Researcher(x) & Thymine(y) & NucleicAcid(z)) -> FoundInString(x,y,z))", "exists x.(Researcher(x) & FoundThymineInNucleicAcid(x))", "all x y z.((Researcher(x) & Thymine(y) & NucleicAcid(z)) -> FoundInSstrand(x,y,z))", "all x y.((Researcher(x) & Thymine(y)) -> FoundInNucleicAcid(x,y))"]}
{"id": "entailmentbank_validation_665", "nl": "the researcher found a strand of dna.", "fol": "", "prediction": ["all x y.((Researcher(x) & Dna(y)) -> FoundString(x,y))", "all x y.((Researcher(x) & StrandOfDna(y)) -> Found(x,y))", "all x.((Researcher(x) & FoundDna(x)) -> IdentifiedDna(x))", "all x y z.((Researcher(x) & Dna(y) & Strand(z)) -> Found(x,y,z))", "the researcher found a strand of dna.", "all x y.((Researcher(x) & Draena(y)) -> FoundStringOf(x,y))", "(FindsDnaString(researcher,dna))", "-(Researcher(researcher) & FoundDna(researcher,dna)))", "all x.((Researcher(x) & FoundDna(x)) -> FoundDna(x))", "all x.(Researcher(x) -> FoundDnaString(x))", "the researcher found a strand of dna.", "all x.((Researcher(x) & FoundDnaString(x)) -> FoundDnaString(x))", "(FindsDnaString(researcher))", "all x y.((Researcher(x) & Dna(y)) -> FoundString(x,y))", "all x.((Researcher(x) & FoundDna(x)) -> FindsDna(x))", "all x.(Researcher(x) -> FoundDnaString(x))"]}
{"id": "entailmentbank_validation_666", "nl": "if a pure dominant organism is crossed a recessive organism, then the offspring will have a 100% probability of being heterozygous dominant.", "fol": "", "prediction": ["all x y.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> 100%ProbabilityOfHeterozygousDominantOffspring(x))", "all x.((PureDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> 100%ProbabilityOfHeterozygousDominantOffspring(x))", "all x y z.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> (HybridDominantOffspring(z) & 100%Probability(z)))", "all x y.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> Has100%ProbabilityOfHeterozygousDominantOffspring(x))", "all x.((PurpleDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> 100%ProbabilityOfHeterozygousDominantOffspring(x))", "all x.((PureDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> 100%ProbabilityOfHeterozygousDominantOffspring(x))", "all x.((Organism(x) & PureDominant(x) & CrossedRecessiveOrganism(x)) -> 100%ProbabilityOfHeterozygousDominant(x))", "all x y.((PureDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> HeterozygousDominantOffspring(y))", "all x y.((PurpleDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> 100%ProbabilityOfHeterozygousDominantOffspring(x))", "all x y.((Organism(x) & PureDominant(x) & RecessiveOrganism(y) & Crossed(x,y)) -> 100%ProbabilityOfHeterozygousDominant(x))", "(all x.((PureDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> HeterozygousDominantOffspring(x)))", "all x y.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> HeterozygousDominantOffspring(x))", "all x.((PureDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> HeterozygousDominantOffspring(x))", "all x y z.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> Has100%ProbabilityOfHeterozygousDominant(x))", "all x.((PureDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> 100%ProbabilityOfHeterozygousDistant(x))", "all x.((PureDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> Has100%ProbabilityOfHeterozygousDominantOffspring(x))"]}
{"id": "entailmentbank_validation_667", "nl": "a scientist crosses a red-flowered plant with a white-flowered plant, and all offspring have red flowers.", "fol": "", "prediction": ["all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y,z) & AllOffspringHaveRedFlowers(x)))", "all x y.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(y)) -> HasRedFlowers(x,y))", "(all x y.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(y)) -> Crosses(x,y)) & all z w.((Offspring(z) & RedFlowers(w)) -> Has(z,w)))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y) & AllOffspringHaveRedFlowers(x)))", "all x.((Scientist(x) & RedFloweredPlant(x) & WhiteFloweredPlant(x)) -> RedFlowers(x))", "all x y.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(y)) -> (Crosses(x,y) & AllOffspringHaveRedFlowers(x)))", "(all x.(Scientist(x) -> CrossesRedFloredPlantWithWhiteFloredPlant(x)) & all y.(Offspring(y) -> HasRedFlowers(y)))", "(all x y.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(y)) -> Crosses(x,y)) & all z w.((Offspring(z) & RedFlowers(w)) -> RedFlowers(z)))", "all x y.((Scientist(x) & RedFloweredPlant(y)) -> CrossesWithWhiteFloweredPlant(x,y))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y,z) & AllOffspringHaveRedFlowers(x)))", "all x.(Scientist(x) -> (CrossesRedFloweredPlantWithWhiteFloweredPlant(x) & AllOffspringHaveRedFlowers(x)))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y,z) & OffspringHaveRedFlowers(x)))", "all x y.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(y)) -> RedFlowers(x,y))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y) & OffspringHaveRedFlowers(x)))", "all x y.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(y)) -> HasRedFlowers(x,y))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> Crosses(x,y,z))"]}
{"id": "entailmentbank_validation_668", "nl": "all the offspring with red flowers are heterozygous dominant.", "fol": "", "prediction": ["all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDominant(x))", "all x y.((Offspring(x) & RedFlower(y) & Has(x,y)) -> HeterozygousDominant(x))", "all x.((Offspring(x) & RedFlowers(x)) -> HeterozygousDistant(x))", "all x.((Offspring(x) & HasRedFlowers(x)) -> HeterozygousDominant(x))", "all x.((OffspringWithRedFlowers(x) & HasRedFlowers(x)) -> HeterozygousDominant(x))", "(all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDominant(x))", "all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDominant(x))", "all x y.((Offspring(x) & Offspring(y) & RedFlower(y)) -> HeterozygousDominant(x))", "(HybridDominant(offspring,redFlowers))", "all x.(OffspringWithRedFlowers(x) -> HeterozygousDominant(x))", "all x y.((Offspring(x) & RedFlower(y)) -> HeterozygousDominant(x,y))", "(all x.(Ofspring(x) & RedFlower(x)) -> HeterozygousDistant(x))", "all x.((Offspring(x) & HasRedFlowers(x)) -> HeterozygousDistant(x))", "all x.((OffspringWithRedFlowers(x) & HasRedFlowers(x)) -> HeterozygousDistant(x))", "all x.((Offspring(x) & RedFlowers(x)) -> HeterozygousDistant(x))", "all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDominant(x))"]}
{"id": "entailmentbank_validation_669", "nl": "the offspring with red flowers are crossed with pure recessive white flowered plants.", "fol": "", "prediction": ["all x y.((Offspring(x) & RedFlowers(x) & WhiteFloweredPlant(y)) -> CrossedWith(x,y))", "all x.((Offspring(x) & RedFlowers(x)) -> CrossedWithRecessiveWhiteFloweredPlants(x))", "all x y z.((Offspring(x) & RedFlower(y) & WhiteFloweredPlant(z)) -> (CrossedWith(x,y,z) & Recessive(x,z)))", "all x y.((Offspring(x) & RedFlower(y)) -> CrossedWithRecessiveWhiteFloweredPlants(x,y))", "(all x.((Offspring(x) & RedFlowers(x)) -> CrossedWithRecessiveWhiteFloweredPlants(x)))", "all x.((OffspringWithRedFlowers(x) & CrossedWithRecessiveWhiteFloweredPlants(x)) -> CrossedWithRecessiveWhiteFloweredPlants(x))", "all x.((Offspring(x) & RedFlowers(x)) -> CrossedWithRecessiveWhiteFloweredPlants(x))", "all x y z.((Offspring(x) & RedFlower(y) & WhiteFloweredPlant(z) & RedFlower(y)) -> CrossedWith(x,z))", "(all x.(RedFlowerOffspring(x) -> CrossedWithWhiteFloweredPlants(x)))", "all x y.((Offspring(x) & RedFlowers(x) & WhiteFloweredPlant(y)) -> CrossedWith(x,y))", "(all x.((Offspring(x) & RedFlowers(x)) -> CrossedWithRecessiveWhiteFloweredPlants(x)))", "all x.((Offspring(x) & RedFlowers(x)) -> CrossedWithRecessiveWhiteFloweredPlants(x))", "all x y.((Offspring(x) & RedFlower(y)) -> CrossedWithRecessiveWhiteFloweredPlants(x,y))", "all x.((Offspring(x) & RedFlower(x)) -> CrossedWithRecessiveWhiteFloweredPlants(x))", "all x y.((Offspring(x) & RedFlowers(x)) -> CrossedWithRecessiveWhiteFloweredPlants(y))", "all x.((Offspring(x) & RedFlowers(x)) -> CrossedWithRecessiveWhiteFloweredPlants(x))"]}
{"id": "entailmentbank_validation_670", "nl": "heterozygous dominant red flowered plants are crossed with pure recessive white flowered plants.", "fol": "", "prediction": ["all x y.((Hydrozygous(x) & RedFloweredPlant(y) & CrossedWith(x,y)) -> RecessiveWhiteFloweredPlant(x))", "all x.((Heterozygous(x) & PredominantRedFloweredPlant(x)) -> CrossedWithRecessiveWhiteFloweredPlant(x))", "all x y.((Homozygous(x) & Heterozygous(x) & RedFloweredPlant(y) & CrossedWith(x,y)) -> RecessiveWhiteFloweredPlant(x))", "(HeterozygousDisruptiveRedFloweredPlants(x) & CrossedWithRecessiveWhiteFloweredPlants(x))", "all x.((Hydrozygous(x) & PredominantRedFloweredPlant(x)) -> CrossedWithRecessiveWhiteFloweredPlant(x))", "all x.((Heterozygous(x) & DominantRedFloweredPlants(x) & RecessiveWhiteFloweredPlants(x)) -> Crossed(x))", "all x y z.((Hydrozygous(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> CrossedWith(x,y,z))", "all x y.((Heterozygous(x) & RedFloweredPlant(y) & Prestigious(y)) -> CrossedWithRecessiveWhiteFloweredPlant(x,y))", "all x.((HomozygousDisruptiveRedFloweredPlants(x) & CrossedWithRecessiveWhiteFloweredPlants(x)) -> HeterozygousDisruptiveRedFloweredPlants(x))", "all x.(HeterozygousDisruptiveRedFloweredPlants(x) -> CrossedWithRecessiveWhiteFloweredPlants(x))", "all x y.((Hydrogous(x) & Heterozygous(x) & RedFloweredPlant(y) & CrossedWith(x,y)) -> RecessiveWhiteFloweredPlant(x))", "all x y z.((Homozygous(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> CrossedWith(x,y,z))", "all x y z.((HeterozygousDisruptiveRedFloweredPlant(x) & HeterozygousDisruptiveWhiteFloweredPlant(y) & CrossedWith(x,y,z)) -> RecessiveWhiteFloweredPlant(z))", "(all x.(HydrozygousDisruptiveRedFloweredPlant(x) -> CrossedWithRecessiveWhiteFloweredPlant(x)))", "all x y.((Homozygous(x) & PredominantRedFloweredPlant(y) & CrossedWith(x,y)) -> RecessiveWhiteFloweredPlant(x))", "all x.((HeterozygousDominantRedFloweredPlants(x) & RecessiveWhiteFloweredPlants(x)) -> Crossed(x))"]}
{"id": "entailmentbank_validation_671", "nl": "crossing a heterozygous dominant organism with a homozygous recessive organism causes their offspring to be dominant or recessive with either of 50% probability.", "fol": "", "prediction": ["all x y.((Crossing(x,y) & HeterozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> ((Offspring(x,y) & (Dominant(y) | Recessive(y)))))", "all x y z.((Crossing(x,y) & HeterozygousDominantOrganism(y) & HomozygousRecessiveOrganism(z)) -> (CausesOffspringToBeDominantOrRecessive(x,z) | (CausesOffspringToBeDominant(x,z) & 50%Probability(x,z)))))", "all x.((Crossing(x,y) & HeterozygousDominantOrganism(y) & HomozygousRecessiveOrganism(x)) -> (DominantOrRecessive(y) & 50%Probability(y)))", "all x.((Crossing(x) & HeterozygousDominantOrganism(x) & HomozygousRecessiveOrganism(x)) -> (DominantOrRecessive(x) | 50%Probability(x)))", "(CrossingHomozygousDominantOrganism(x) & CrossingHomozygousRecessiveOrganism(x)) -> (DominantOrRecessiveOffspring(x) | 50%Probability(x)))", "all x y.((Crossing(x,y) & HeterozygousDominantOrganism(y) & HomozygousRecessiveOrganism(x)) -> (DominantOrRecessive(x) | 50%Probability(x)))", "all x y z.((Crossing(x,y,z) & HeterozygousDominantOrganism(y) & HomozygousRecessiveOrganism(z)) -> (CausesOffspringToBeDominantOrRecessive(x,z) | (CausesOffspringToBeDominant(x,z) & 50%Probability(x,z))))", "all x y z.((Crossing(x,y) & HomozygousDominantOrganism(y) & HomozygousRecessiveOrganism(z)) -> ((Offspring(x,z) & (Dominant(z) | Recessive(z))) & 50%Probability(z))))", "all x y z.((HomozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y) & Crossing(x,y,z)) -> (CausesOffspringToBeDominantOrRecessive(z,50%)))", "(CrossingHeterozygousDominantOrganism(x) & CrossingHeterozygousRecessiveOrganism(x) -> (DominantOrRecessiveOrganism(x) | RecessiveOrganism(x))))", "all x y.((HomozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> (Crosses(x,y) & (Dominant(x) | Recessive(x))))", "all x.((CrossingHeterozygousDominantOrganism(x) & CrossingHomozygousRecessiveOrganism(x)) -> (DominantOrRecessive(x) | 50%Probability(x)))", "all x y.((Crossing(x,y) & HeterozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> (DominantOrRecessive(x) | 50%Probability(x)))", "all x.((Crossing(x,y) & HeterozygousDominantOrganism(y) & HomozygousRecessiveOrganism(y)) -> ((DominantOffspring(x) | RecessiveOffspring(x)) & 50%Probability(x)))", "all x y.((Crossing(x,y) & HomozygousDominantOrganism(y) & HomozygousRecessiveOrganism(x)) -> ((DominantOffspring(x) | RecessiveOffspring(x)) & 50%Probability(x)))", "all x.((Crossing(x) & HeterozygousDominantOrganism(x) & HomozygousRecessiveOrganism(x)) -> (DistinctOrRecessiveOffspring(x) | 50%ProbabilityOffspring(x)))"]}
{"id": "entailmentbank_validation_672", "nl": "the offspring will have either dominant red flowers or recessive white flowers with either of 50% probability.", "fol": "", "prediction": ["all x.(Offspring(x) -> ((DistinctRedFlowers(x) | ResistiveWhiteFlowers(x)) & (FiftyProbability(x) | 50%Probability(x))))", "all x.(Offspring(x) -> ((DistantRedFlowers(x) | ResponsiveWhiteFlowers(x)) & (FiftyProbability(x) | 50%Probability(x))))", "all x y.((Offspring(x) & Offspring(y)) -> ((DistinctRedFlowers(x,y) | ResistiveWhiteFlowers(x,y)) & (FiftyProbability(x,y) | 50%Probability(x,y))))", "(Offspring(offspring) -> (DominantRedFlowers(offspring) | ResponsiveWhiteFlowers(offspring) & (50%) Probability(offspring) | (DominantRedFlowers(offspring) | ResponsiveWhiteFlowers(offspring)))))", "(DistinctRedFlowers(offspring) | ResistiveWhiteFlowers(offspring) & (50%) Probability(offspring,dominantRedFlowers) | (RecessiveWhiteFlowers(offspring,offspring))))", "all x y.((Offspring(x) & (DistinctRedFlowers(y) | ResistiveWhiteFlowers(y))) -> (Has(x,y) & 50%Probability(x)))", "((Offspring(x) & (DistinctRedFlowers(x) | ResistiveWhiteFlowers(x))) -> (DistinctRedFlowers(x) | ResistiveWhiteFlowers(x))))", "all x y.(Offspring(x) -> ((DistinctRedFlowers(x) | RecessiveWhiteFlowers(x)) & (FiftyProbability(x,y) | 50%Probability(y))))", "((Offspring(offspring) & (DistinctRedFlowers(offspring) | ResistiveWhiteFlowers(offspring)) & (FiftyProbability(offspring) | 50%Probability(offspring))))", "all x.(Offspring(x) -> ((DominantRedFlowers(x) | RecessiveWhiteFlowers(x)) & (50%) Probability(x) | 50% Probability(x))))", "all x.(Offspring(x) -> (DominantRedFlowers(x) | ResistiveWhiteFlowers(x)))", "all x.(Offspring(x) -> ((DistinctRedFlowers(x) | ResistiveWhiteFlowers(x)) & (50%) Probability(x) | 50% Probability(x))))", "all x.(Offspring(x) -> (DistinctRedFlowers(x) | RecessiveWhiteFlowers(x) & (50%) Probability(x) | 50% Probability(x))))", "all x y.(Offspring(x) -> ((DominantRedFlowers(x) | ResponsiveWhiteFlowers(x)) & (50%) Probability(y) | 50% Probability(y))))", "all x.(Offspring(x) -> ((DominantRedFlowers(x) | RecessiveWhiteFlowers(x)) & (50%) Probability(x) | (50%) Probability(x) | 50% Probability(x)))))", "all x.(Offspring(x) -> ((DistinctRedFlowers(x) | ResistiveWhiteFlowers(x)) & 50%Probability(x)))"]}
{"id": "entailmentbank_validation_673", "nl": "each parent carries one sickle cell allele.", "fol": "", "prediction": ["all x.(Parent(x) -> CarriesSickleCellAllele(x))", "all x y.((Parent(x) & SickleCellAllele(y)) -> Carries(x,y))", "all x.(Parent(x) -> CarriesSickleCellAllele(x))", "(CarriesSickleCellAllele(Parent))", "allele(Parent) -> CarriesSickleCell(Parent,1))", "all x y.((Parent(x) & Parent(y)) -> CarriesSickleCellAllele(x,y))", "all x y.((Parent(x) & SickleCellAllele(y)) -> Carries(x,y))", "all x.(Parent(x) -> CarriesSilentCellAllele(x))", "all x y.(SickleCellAllele(x) -> Carries(y,x))", "all x.(Parent(x) -> CarriesSickleCellAllele(x))", "all x y.((Parent(x) & SickleCellAllele(y)) -> Carries(x,y))", "all x.(Parent(x) -> CarriesSilentCellAllele(x))", "all x.(Parent(x) -> CarriesSickleCell(x))", "exists x.(Parent(x) & CarriesSilentCellAllele(x))", "exists x.(Parent(x) & CarriesOneSilentCellAllele(x))", "exists x.(Parent(x) & CarriesSickleCell(x))"]}
{"id": "entailmentbank_validation_674", "nl": "sickle cell anemia is a recessive trait in human.", "fol": "", "prediction": ["all x.(SickleCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x y.((SickleCellAnemia(x) & Human(y)) -> RecessiveTrait(x,y))", "(RecessiveTraitInHuman(sickleCellAnemia)", "all x.(SickleCellAnemia(x) -> RecessiveTrait(x))", "all x y.((SickleCellAnemia(x) & Human(y)) -> RecessiveTrait(x,y))", "(RecessiveTraitInHuman(sickleCellAnemia)", "all x.(SickleCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x.(SickleCellAnemia(x) -> RecessiveTrait(x))", "all x y.((SickleCellAnemia(x) & Human(y)) -> RecessiveTrait(x,y))", "all x.(SickleCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x y.((SickleCellAnemia(x) & Human(y)) -> RecessiveTrait(x,y))", "all x.(SickleCellAnemia(x) -> ResponsiveTrait(x))", "all x.(SilentCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x.(SickleCellAnemia(x) -> RessiveTraitInHuman(x))", "all x.(SilentCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x.(SickleCellAnemia(x) -> RecessiveTrait(x))"]}
{"id": "entailmentbank_validation_675", "nl": "each parent has one dominant gene and a recessive gene for sickle cell anemia.", "fol": "", "prediction": ["all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x y.((Parent(x) & Parent(y)) -> (HasDominantGene(x,y) & HasRecessiveGene(x,y)))", "(all x.(Parent(x) -> HasDominantGene(x)) & all y.(Parent(y) -> HasRecessiveGene(y)))", "all x y z.((Parent(x) & Parent(y) & Parent(z)) -> (HasDominantGene(x,y) & HasRecessiveGene(x,z)))", "(HasDominantGene(Parent,SickleCellAnemia) & HasRecessiveGene(Parent,SickleCellAnemia))", "all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x y.((Parent(x) & Parent(y)) -> (HasDominantGene(x,y) & HasRecessiveGene(x,y)))", "all x y.((Parent(x) & Parent(y)) -> (DominantGene(x,y) & RecessiveGene(x,y)))", "all x y z.((Parent(x) & Parent(y) & Parent(z) & DominantGene(y,z)) -> HasRecessiveGene(x,y,z))", "exists x.(Parent(x) & HasDominantGene(x) & HasRecessiveGene(x))", "all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "exists x.(Parent(x) & HasDominantGene(x,y) & HasRecessiveGene(x,z) & ForSickleCellAnemia(x))", "all x y.((Parent(x) & Parent(y)) -> (HasDominantGene(x,y) & HasRecessiveGene(x,y)))", "exists x.(Parent(x) & HasDominantGene(x) & HasRecessiveGene(x))", "all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))"]}
{"id": "entailmentbank_validation_676", "nl": "heterozygous dominant organisms have one dominant gene and one recessive gene.", "fol": "", "prediction": ["all x.(HeterozygousDominantOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HybridObstacle(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.((Hybrid(x) & Heterozygous(x)) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "(all x.(HybridOrganism(x) -> HasDominantGene(x)) & all y.(HybridOrganism(y) -> HasRecessiveGene(y)))", "all x.(HybridDominantOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x y.((Hybrid(x) & Homozygous(x)) -> (DominantGene(y) & RecessiveGene(y)))", "all x y.((HomozygousDominantOrganism(x) & DominantGene(y)) -> (Has(x,y) & Has(x,y)))", "all x.((Organism(x) & HeterozygousDominant(x)) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "(HybridObstacles(h) & HasDominantGene(h) & HasRecessiveGene(h))", "all x.(HomozygousDisruptiveOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x y z.((Hybrid(x) & DominantOrganism(y) & DominantGene(z)) -> (Has(x,y) & Has(x,z)))", "all x y.((HydrogousDominantOrganism(x) & DominantGene(y)) -> (Has(x,y) & Has(x,y)))", "all x.(HeterozygousDominantOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HydrogousDominantOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "(HybridObstacles(x) -> (HybridObstacles(x) & HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HeterozygousDominantOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))"]}
{"id": "entailmentbank_validation_677", "nl": "both parents are heterozygous dominant for sickle cell anemia.", "fol": "", "prediction": ["all x.((Parent(x) & Heterozygous(x) & Heterozygous(x)) -> SickleCellAnemia(x))", "all x y.((Parent(x) & Parent(y)) -> HeterozygousDominantForSickleCellAnemia(x,y))", "(HeterozygousDominantForSickleCellAnemia(Parents(Parents) & HeterozygousDominantForSickleCellAnemia(Parents))", "(HysterozygousDominantForSickleCellAnemia(Parents(Parents) & HeterozygousDominantForSickleCellAnemia(Parents))", "(Hybrid(parents) & Heterozygous(parents) & Heterozygous(parents) & Heterozygous(parents) & Heterozygous(parents) & Heterozygous(parents) & Heterozygous(parents) & Heterozygous(parents) & Heterozygous(parents) & Heterozygous(parents", "both parents are HeterozygousDominantForSickleCellAnemia(x) & Parent(x))", "all x.((Parent(x) & HeterozygousDominantForSickleCellAnemia(x)) -> BothParentsHydrozygous(x))", "both parents are heterozygous dominant for sicklecell anemia.", "all x.(HeterozygousDominantForSickleCellAnemia(x) -> (Parent(x) & Parent(x)))", "(HeterozygousDisruptive(Parents) & HeterozygousDisruptive(Parents) & ForSickleCellAnemia(Parents))", "all x.(HysterozygousDominantForSickleCellAnemia(x) -> (Parent(x) & Parent(x)))", "all x.((Parent(x) & Heterozygous(x)) -> SickleCellAnemia(x))", "all x y.((Parent(x) & Parent(y)) -> HeterozygousDominantForSickleCellAnemia(x,y))", "all x y.((Parent(x) & Parent(y) & Heterozygous(x,y)) -> SickleCellAnemia(x))", "both parents are heterozygous dominant for sicklecell anemia.", "both parents are heterozygousdominantForSickleCellAnemia(x) & Parent(x))"]}
{"id": "entailmentbank_validation_678", "nl": "if a heterozygous dominant organism is crossed with a heterozygous dominant organism, then the offspring will have a 25% probability of being homozygous recessive.", "fol": "", "prediction": ["all x y.((HeterozygousDominantOrganism(x) & CrossedWithHeterozygousDominantOrganism(x)) -> Has25PercentProbabilityOfHomozygousRecessive(y))", "all x y z.((HeterozygousDominantOrganism(x) & HeterozygousDominantOrganism(y) & Crossed(x,y)) -> Has25PercentProbabilityOfHomozygousRecessive(x))", "all x y.((HeterozygousDominantOrganism(x) & Crossed(x,y) & HeterozygousDominantOrganism(y)) -> Has25PercentProbabilityOfHomozygousRecessive(x))", "all x.((HeterozygousDominantOrganism(x) & CrossedWithHeterozygousDominantOrganism(x)) -> Has25PercentProbabilityOfHomozygousRecessive(x))", "all x y.((HydrogousDominantOrganism(x) & CrossedWith(x,y)) -> Has25PercentProbabilityOfHomozygousRecessive(x))", "(all x.(HydrogousDominantOrganism(x) -> CrossedWithHydrogousDominantOrganism(x)) & offspringHasHydrogousRecessiveProbability(x,25))", "all x y z.((HydrogousDominantOrganism(x) & CrossedWith(x,y) & HeterozygousDominantOrganism(z)) -> HasProbabilityOfHomozygousRecessive(x,z))", "all x y z.((HeterozygousDominantOrganism(x) & CrossedWith(x,y) & HeterozygousDominantOrganism(z)) -> Has25PercentProbabilityOfHomozygousRecessive(x))", "all x y.((HomozygousDominantOrganism(x) & CrossedWith(x,y)) -> Has25PercentProbabilityOfHomozygousRecessive(x))", "all x.((HeterozygousDominantOrganism(x) & CrossedWithHeterozygousDominantOrganism(x)) -> Has25PercentProbabilityOfHomozygousRecessiveOffspring(x))", "all x.((HydrozygousDominantOrganism(x) & CrossedWithHydrozygousDominantOrganism(x)) -> 25%ProbabilityOfHomozygousRecessiveOffspring(x))", "all x y.((HydrozygousDominantOrganism(x) & CrossedWith(x,y)) -> Has25PercentProbabilityOfHomozygousRecessive(x))", "all x.((HeterozygousDominantOrganism(x) & CrossedWithHeterozygousDominantOrganism(x)) -> 25%ProbabilityOfHomozygousRecessiveOffspring(x))", "all x.((HomozygousDistantOrganism(x) & Crossed(x) & HomozygousDistantOrganism(x)) -> Has25PercentProbabilityOfHomozygousRecessive(x))", "all x y.((HeterozygousDominantOrganism(x) & CrossedWithHeterozygousDominantOrganism(x)) -> Has25PercentProbabilityOfHomozygousRecessive(y))", "all x.((HeterozygousDominantOrganism(x) & CrossedWithHeterozygousDominantOrganism(x)) -> HasHydrogousRecessiveOffspring(x,25))"]}
{"id": "entailmentbank_validation_679", "nl": "the offspring of heterozygous dominant parents will have 25% probability of being homozygous recessive for sickle cell anemia.", "fol": "", "prediction": ["all x.((Offspring(x) & HeterozygousDominantParents(x)) -> Has25PercentProbabilityOfHomozygousRecessiveForSickleCellAnemia(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfHomozygousRecessiveForSickleCellAnemia(x)) -> HomozygousRecessiveForSickleCellAnemia(x))", "all x y.((Offspring(x) & HeterozygousDominantParents(y) & HomozygousRecessive(x,y)) -> 25%Probability(x,y))", "all x y.((Offspring(x) & HomozygousDominantParent(y)) -> Has25PercentProbabilityOfHomozygousRecessiveForSickleCellAnemia(x,y))", "all x y z.((Offspring(x) & HeterozygousDominantParent(y) & HeterozygousDominantParent(z) & HasProbability(x,y,z) & HasProbability(x,y,z)) -> HomozygousRecessiveForSickleCellAnemia(x,y,z))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> Has25PercentProbabilityOfHomozygousRecessiveForSickleCellAnemia(x))", "(all x.(HydrogousDominantParent(x) -> HasHydrogousRecessive(x,25)))", "all x.((Offspring(x) & HomozygousDominantParents(x)) -> HasHyperzygousRecessiveForSickleCellAnemia(x,25))", "all x y.((Offspring(x) & HeterozygousDominantParents(y)) -> Has25PercentProbabilityOfHomozygousRecessiveForSickleCellAnemia(x,y))", "ALL X.(HydrozygousDominantParents(x) -> HasHysterozygousRecessiveForSickleCellAnemia(x,25))", "all x.(HydrogousDominantParents(x) -> HasHysterozygousRecessiveForSickleCellAnemia(x,25))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfHomozygousRecessive(x)) -> SickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> 25%ProbabilityOfHomozygousRecessiveForSickleCellAnemia(x))", "all x y.((Offspring(x) & HeterozygousDominantParents(y)) -> HasProbabilityOfHomozygousRecessiveForSickleCellAnemia(x,y))", "all x.((Offspring(x) & HomozygousDominantParents(x)) -> 25%ProbabilityOfHomozygousRecessiveForSickleCellAnemia(x))", "all x y.((Offspring(x) & HomozygousDominantParent(y)) -> Has25PercentProbability(x,y))"]}
{"id": "entailmentbank_validation_680", "nl": "homozygous recessive organisms will show the recessive trait.", "fol": "", "prediction": ["all x.(HomozygousRecessiveOrganism(x) -> ShowsRecessiveTrait(x))", "all x y.((HomozygousRecessiveOrganism(x) & HomozygousRecessiveOrganism(y)) -> ShowsRecessiveTrait(x,y))", "all x.((HomozygousRecessiveOrganism(x) & ShowsRecessiveTrait(x)) -> ShowsRecessiveTrait(x))", "all x y.((Homozygous(x) & RecessiveOrganism(y)) -> ShowsRecessiveTrait(x,y))", "all x.(HomozygousRecessiveOrganism(x) -> ShowsRecessiveTrait(x))", "all x.((Homozygous(x) & RecessiveOrganism(x)) -> ShowsRecessiveTrait(x))", "all x.((HomozygousRecessiveOrganism(x) & ShowsRecessiveTrait(x)) -> ShowsRecessiveTrait(x))", "all x y.((HomozygousRecessiveOrganism(x) & HomozygousRecessiveOrganism(y)) -> ShowsRecessiveTrait(x,y))", "all x.(HybridRecessiveOrganism(x) -> ShowsRecessiveTrait(x))", "all x.(HomozygousRecessiveOrganism(x) -> ShowsRecessiveTrait(x))", "all x y.((Homozygous(x) & RecessiveOrganism(y)) -> ShowsRecessiveTrait(x,y))", "(all x.(HomozygousRecessiveOrganism(x) -> ShowsRecessiveTrait(x)))", "all x.(HomozygousRecessiveOrganism(x) -> ShowRecessiveTrait(x))", "all x y.((HomozygousRecessiveOrganism(x) & HomozygousRecessiveOrganism(y)) -> ShowsRecessiveTrait(x,y))", "(all x.(HomozygousRecessiveOrganism(x) -> ShowsRecessiveTrait(x)))", "all x.(HomozygousRecessiveOrganism(x) -> ShowsRecessiveTrait(x))"]}
{"id": "entailmentbank_validation_681", "nl": "the offspring of heterozygous dominant parents will have 25% probability of having sickle cell anemia.", "fol": "", "prediction": ["all x.((Offspring(x) & HeterozygousDominantParents(x)) -> 25%ProbabilityOfSickleCellAnemia(x))", "all x y.((Offspring(x) & HeterozygousDominantParent(y)) -> HasSickleCellAnemia(x,y))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfSickleCellAnemia(x)) -> OffspringHasSickleCellAnemia(x))", "(all x.(HydrozygousDominantParent(x) -> HasSickleCellAnemia(x,25)))", "all x y.((Offspring(x) & HeterozygousDominantParent(y)) -> 25%ProbabilityOfSickleCellAnemia(x,y))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> 25%ProbabilityOfSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParent(x)) -> 25%ProbabilityOfSickleCellAnemia(x))", "all x.(HydrozygousDominantParents(x) -> 25%ProbabilityOfSickleCellAnemia(x))", "all x y.((Offspring(x) & HomozygousDominantParents(y)) -> HasSickleCellAnemia(x,y))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfSickleCellAnemia(x)) -> HasSickleCellAnemia(x))", "(all x.(HysterozygousDominantParent(x) -> 25%ProbabilityOfSickleCellAnemia(x)))", "all x y.((Offspring(x) & HeterozygousDominantParent(y)) -> Has25PercentProbabilityOfSickleCellAnemia(x,y))", "all x y.((Offspring(x) & HomozygousDominantParent(y)) -> 25%ProbabilityOfSickleCellAnemia(x,y))", "all x.(HysterozygousDominantParents(x) -> 25%ProbabilityOfSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> HasSickleCellAnemia(x,25))", "ALL X.((Offspring(x) & HomozygousDominantParents(x)) -> 25%ProbabilityOfSickleCellAnemia(x))"]}
{"id": "entailmentbank_validation_682", "nl": "one in four is the same as 25%.", "fol": "", "prediction": ["all x.((InFour(x) & SameAt25(x)) -> SameAt25(x))", "all x.((OneInFour(x) & SameAt25(x)) -> SameAt25(x))", "all x y.((InFour(x) & OneInFour(y)) -> SameAs25(x,y))", "all x y.((OneInFour(x) & OneInFour(y)) -> SameAs25(x,y))", "all x.(OneInFour(x) -> SameAs25Percent(x))", "(SameAverage(onein4) & SameAverage(onein4) & SameAverage(onein4) & SameAverage(onein4))", "(SameAverage(oneIn4) & 25%Average(oneIn4))", "all x.((OneInFour(x) & SameAt25(x)) -> SameAt25(x))", "one in four is the same as 25%.", "all x y.((InFour(x) & OneInFour(y,x)) -> SameAt25(x,y))", "all x y.((OneInFour(x) & 25%(y)) -> Same(x,y))", "all x.(OneInFour(x) -> SameAt25(x))", "exists x.(InFour(x) & SameAt25(x))", "all x.((OneInFour(x) & SameAt25(x)) -> SameAt25(x))", "all x y.((InFour(x) & SameAt25(y,x)) -> SameAt25(x,y))", "all x.(OneInFour(x) -> SameAs25Percent(x))"]}
{"id": "entailmentbank_validation_683", "nl": "one in four of the offspring of heterozygous dominant parents will have sickle cell anemia.", "fol": "", "prediction": ["all x.((Offspring(x) & HeterozygousDominantParent(x)) -> HasSickleCellAnemia(x))", "all x y.((Offspring(x) & HeterozygousDominantParent(y)) -> HasSickleCellAnemia(x,y))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> HasSickleCellAnemia(x))", "all x y z.((Offspring(x) & HeterozygousDominantParent(y) & HeterozygousDominantParent(z) & Offspring(x,y,z)) -> HasSickleCellAnemia(x))", "one in four of offspring of heterozygousdominantParents(x) will have sicklecellanemia(x))", "all x y.((Offspring(x) & HomozygousDominantParent(y) & Offspring(x,y)) -> HasSickleCellAnemia(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & HeterozygousDominantParents(x)) -> HasSickleCellAnemia(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & OffspringOfHeterozygousDominantParents(x)) -> HasSickleCellAnemia(x))", "all x.((Offspring(x) & HomozygousDominantParent(x)) -> HasSickleCellAnemia(x))", "all x y z.((Offspring(x) & HomozygousDominantParent(y) & HeterozygousDominantParent(z)) -> HasSickleCellAnemia(x,y,z))", "all x.(HysterozygousDominantParent(x) -> HasSickleCellAnemia(x))", "all x y.((Offspring(x) & HeterozygousDominantParent(y)) -> HasSickleCellAnemia(x,y))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> HasSickleCellAnemia(x))", "all x y.((Offspring(x) & HomozygousDominantParent(y)) -> HasSickleCellAnemia(x,y))", "all x.((Offspring(x) & HomozygousDominantParent(x)) -> SickleCellAnemia(x))", "all x y.((Offspring(x) & HeterozygousDominantParent(y) & Offspring(x,y)) -> HasSickleCellAnemia(x))"]}
{"id": "entailmentbank_validation_684", "nl": "a plant is a kind of organism.", "fol": "", "prediction": ["all x.(Plant(x) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x y.((Plant(x) & Organism(y)) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x y.((Plant(x) & Organism(y)) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x y.((Plant(x) & Organism(y)) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x y.(Plant(x) -> Organism(y))", "all x.(Plant(x) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "exists x.(Plant(x) & Organospheric(x))", "exists x.(Plant(x) & Organism(x))", "exists x.(Plant(x) & Organism(x))", "exists x.(Plant(x) & Organism(x))"]}
{"id": "entailmentbank_validation_685", "nl": "flower is a part of a plant.", "fol": "", "prediction": ["all x.(Flower(x) -> PartOfPlant(x))", "all x y.((Flower(x) & Plant(y)) -> PartOf(x,y))", "all x y z.((Flower(x) & Plant(y) & Plant(z)) -> PartOf(x,y,z))", "all x.(Flower(x) -> PartOfPlant(x))", "all x y.((Flower(x) & Plant(y)) -> PartOf(x,y))", "all x.(Flower(x) -> PartOfPlant(x))", "all x y.((Flower(x) & Plant(y)) -> PartOf(x,y))", "all x y z.((Flower(x) & Plant(y) & Plant(z)) -> PartOf(x,y,z))", "all x y.((Flower(x) & Plant(y) & PartOf(x,y)) -> PartOf(x,y))", "all x y.((Flower(x) & Plant(y)) -> PartOf(x,y))", "all x.(Flower(x) -> PartOfPlant(x))", "all x.(Flower(x) -> PartOfPlant(x))", "exists x.(Flower(x) & Plant(x))", "all x.(Flower(x) -> PartOfPlant(x))", "exists x.(Flower(x) & Plant(x))", "exists x.(Flower(x) & PartOfPlant(x))"]}
{"id": "entailmentbank_validation_686", "nl": "the colors of parts of an organism are inherited characteristics.", "fol": "", "prediction": ["all x.((Color(x) & PartOfOrganism(x)) -> ErasedCharacteristics(x))", "all x y.((Organism(x) & Color(y)) -> ErasedCharacteristics(x,y))", "all x.((Colors(x) & Organ(x)) -> ErasedCharacteristics(x))", "all x.((PartOfOrganism(x) & ColorsOfPartsOfOrganism(x)) -> ErasedCharacteristics(x))", "all x.((Organism(x) & Colors(x)) -> ErasedCharacteristics(x))", "(AllegedCharacteristics(colors) -> PartsOfOrganism(colors))", "(AllowedCharacteristics(colors) -> PartsOfOrganism(colors))", "all x y z.((Organism(x) & Color(y) & PartOf(z)) -> ErasedCharacteristics(x,y,z))", "all x y.((Organism(x) & Color(y)) -> ErasedCharacteristics(x,y))", "all x.((Color(x) & Organ(x)) -> ErasedCharacteristics(x))", "all x.((PieceOfOrganism(x) & ColorsOfPartsOfOrganism(x)) -> ErasedCharacteristics(x))", "all x.((PartOfOrganism(x) & ColorsOfParts(x)) -> ErasedCharacteristics(x))", "all x.((Calibration(x) & PartOfOrganism(x)) -> ErasedCharacteristics(x))", "all x y.((PartOfOrganism(x) & Color(y)) -> ErasedCharacteristics(x,y))", "all x y.((Organism(x) & PartOf(y,x)) -> HasHerevity(x,y))", "all x y.((Organism(x) & Color(y)) -> ErasedCharacteristics(x,y))"]}
{"id": "entailmentbank_validation_687", "nl": "the color of plants' flowers is a kind of inherited characteristic.", "fol": "", "prediction": ["all x y.((Plant(x) & Flower(y)) -> (Color(x,y) & ErasedCharacteristic(x)))", "all x.((Plant(x) & Flower(y)) -> HasHereditaryCharacteristic(x,y))", "all x.((Pests(x) & Flowers(x)) -> ErasedCharacteristic(x))", "all x y.((Plant(x) & Flower(y)) -> ColorEarnedCharacteristic(x,y))", "all x.((Plant(x) & Flower(y)) -> (Color(x,y) & ErasedCharacteristic(x)))", "all x y z.((Plant(x) & Flower(y) & Color(z)) -> (HasEarnedCharacteristic(x,y) & HasEarnedCharacteristic(x,z)))", "all x.((FloweringFlowerColor(x) & Plant(x)) -> ErasedCharacteristic(x))", "all x.((FlowerColor(x) & Plant(x)) -> ErasedCharacteristic(x))", "(All x.((Plant(x) & Flower(y)) -> ColorEarnedCharacteristic(x,y)))", "all x y.((Pestry(x) & Plant(y)) -> (Color(x,y) & inheritedCharacteristic(x,y)))", "all x y.((Plant(x) & Flower(y)) -> (Color(x,y) & ErasedCharacteristic(x,y)))", "exists x.(PlantFlowerColor(x) & HasEarnedCharacteristic(x))", "all x y.((Flowering(x) & Plant(y) & Flowers(y)) -> HasHaveEarnedCharacteristic(x,y))", "all x.((Place(x) & Flowers(x)) -> ErasedCharacteristic(x))", "exists x.(PlantFlowerColor(x) & inheritedCharacteristic(x))", "all x y.((Plant(x) & Flower(y) & Color(x,y)) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_validation_688", "nl": "inheriting is when an inherited characteristic is passed down from parent to offspring by genetics / dna.", "fol": "", "prediction": ["all x y z.((Ethertaking(x) & Parent(y) & Offspring(z)) -> (PassedDownByGenetics(x,y,z) & PassedDownByDna(x,y,z)))", "all x y.((Elevant(x) & Parent(y) & Offspring(z)) -> PassedDownByGenetics(x,y,z))", "all x y z.((Elevant(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassedDown(x,y,z))", "all x.((Earning(x) & Geneetics(x) & Dna(x)) -> PassedDown(x))", "all x y.((Eleves(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassedDown(x,y,z))", "all x.((Eleves(x) & Parent(x) & Offspring(x)) -> PassedByGenetics(x))", "all x.(Embarrassing(x) -> (PassedDownByGenetics(x) & PassedDownByDna(x)))", "(EmbeddedCaracteristicPassedByGenetics(x) & PassedByDna(x))", "(AllegedCharacteristicPassedByGenetics(x) & PassedByDna(x))", "all x y z.((Earning(x) & Parent(y) & Offspring(z)) -> PassedDownByGenetics(x,y,z))", "all x.((Earning(x) & GeneticallyDisinheritedCharacteristic(x)) -> PassedDownByGeneticsOrDna(x))", "all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassedDown(x,y,z))", "all x.((Inheriting(x) & Parent(x) & Offspring(x) & Genetics(x) & Dna(x)) -> PassedDown(x))", "all x.(Embedded(x) -> (PassedDown(x,Genetics,Dna) & Parent(x)))", "all x y.((Inheriting(x) & Parent(y) & Offspring(y)) -> PassedByGenetics(x,y))", "all x y.((Ethertaking(x) & Parent(y) & Offspring(y)) -> PassedByGeneticsDna(x,y))"]}
{"id": "entailmentbank_validation_689", "nl": "plants offspring can inherit the flower color from their parents.", "fol": "", "prediction": ["all x y.((Plant(x) & Offspring(y)) -> (EmbearsFlowerColor(y,x) & FromParents(y,x)))", "all x.(PlantOffspring(x) -> (EmbearsFlowerColor(x) & FromParents(x)))", "all x y z.((Plant(x) & Offspring(y) & FlowerColor(z)) -> (EmbeddedFromParent(y,z) & Embraces(y,z)))", "all x.((Plant(x) & Offspring(x)) -> (EmbearsFlowerColor(x) & FromParents(x)))", "all x y.((Plant(x) & Offspring(y)) -> (CanEmbearFlowerColor(y,x) & FromParents(y,x)))", "all x.(PlantOffspring(x) -> (HasFlowerColor(x) & HasFlowerColor(x)))", "all x y.((Plant(x) & Offspring(y)) -> (HeadsFlowerColor(y,x) & FromParents(y,x)))", "(All x.(PlantOffspring(x) -> HasFlowerColor(x)))", "all x y.((Plant(x) & PlantOffspring(y)) -> (EmbearsFlowerColor(y,x) & FromParents(y,x)))", "(all x.(Plant(x) -> HasFlowerColor(x,y)))", "all x y z.((Plant(x) & Offspring(y) & FlowerColor(z)) -> CanEmbear(y,z))", "all x.(PlantOffspring(x) -> CanEmbearFlowerColor(x))", "all x.(PlantOffspring(x) -> (HeartsFlowerColor(x) & FromParents(x)))", "all x y.((PlantOffspring(x) & Parent(y)) -> CanHearseFlowerColor(x,y))", "all x y z.((Plant(x) & Offspring(y) & FlowerColor(z) & Parent(z)) -> CanEmbear(y,z))", "all x.(PlantOffspring(x) -> CanEmbearFloweringColorFromParents(x))"]}
{"id": "entailmentbank_validation_690", "nl": "yellow is a kind of color.", "fol": "", "prediction": ["all x.(Yellow(x) -> Color(x))", "all x.(Yellow(x) -> Color(x))", "all x y.((Yellow(x) & Color(y)) -> Color(x,y))", "all x.((Yellow(x) & Color(x)) -> Color(x))", "all x.(Yellow(x) -> Color(x))", "all x.((Yellow(x) & Color(x)) -> Color(x))", "exists x y.(Color(x,y) & Yellow(y))", "all x.(Yellow(x) -> Color(x))", "(all x.(Yellow(x) -> Color(x)))", "all x.((Yellow(x) & Color(x)) -> Color(x))", "exists x y.(Color(y) & Yellow(y) & Color(x,y))", "(all x.(Yellow(x) -> Color(x,y)))", "all x.(Yellow(x) -> Color(x))", "all x.(Yellow(x) -> Color(x))", "all x.(Yellow(x) -> Color(x))", "all x.(Jay(x) -> Color(x))"]}
{"id": "entailmentbank_validation_691", "nl": "the plant offspring has yellow flowers.", "fol": "", "prediction": ["all x.(PlantOffspring(x) -> HasYellowFlowers(x))", "all x.((PlantOffspring(x) & YellowFlowers(x)) -> Has(x,y))", "all x.(PlantOffspring(x) -> HasYellowFlowers(x))", "all x y.((PlantOffspring(x) & Plant(y)) -> YellowFlowers(x))", "all x.((PlantOffspring(x) & YellowFlowers(x)) -> Has(x))", "all x.(PlantOffspring(x) -> YellowFlowers(x))", "(all x.(PlantOffspring(x) -> HasYellowFlowers(x)))", "all x y.((PlantOffspring(x) & Plant(y) & YellowFlowers(x)) -> Has(x,y))", "all x y.((PlantOffspring(x) & Plant(y)) -> YellowFlowers(x,y))", "(all x.(PlantOffspring(x) -> HasYellowFlowers(x)))", "all x.(PlantOffspring(x) -> HasYellowFlowers(x))", "all x.((PlantOffspring(x) & YellowFlowers(x)) -> Has(x,y))", "all x.(PlantOffspring(x) -> YellowFlowers(x))", "all x.(PestOfspring(x) -> HasYellowFlowers(x))", "(all x.(PlantOffspring(x) -> YellowFlowers(x)))", "exists x.(PlantOffspring(x) & YellowFlowers(x))"]}
{"id": "entailmentbank_validation_692", "nl": "the parents of the plant are likely to have yellow flowers.", "fol": "", "prediction": ["all x.((Parent(x) & Plant(x)) -> YellowFlowers(x))", "all x.(Parent(x) -> YellowFlowers(x))", "all x y.((Plant(x) & Parent(y)) -> YellowFlowers(x))", "all x.((PlantParent(x) & YellowFlowers(x)) -> LikelyHas(x,y))", "all x y z.((Plant(x) & Parent(y) & Flower(z) & Yellow(z)) -> LikelyHas(x,y,z))", "all x y.((Plant(x) & Parent(y)) -> YellowFlowers(y))", "all x.((PlantParents(x) & YellowFlowers(x)) -> LikelyHas(x,y))", "all x.(ParentsOfPlant(x) -> YellowFlowers(x))", "all x.((Parent(x) & Plant(x)) -> YellowFlowers(x))", "all x y.((Parent(x) & Plant(y) & HasYellowFlowers(x,y)) -> LikelyHasYellowFlowers(x,y))", "all x.(Parent(x) -> YellowFlowers(x))", "(all x.(Parent(x) -> YellowFlowers(x)))", "all x y.((Plant(x) & Parent(y)) -> YellowFlowers(x,y))", "exists x.(Parent(x) & Plant(x) & YellowFlowers(x))", "all x.(ParentsOfPlant(x) -> YellowFlowers(x))", "all x y.((Plant(x) & Parent(y)) -> YellowFlowers(y))"]}
{"id": "entailmentbank_validation_693", "nl": "a newly hatched sea turtle walks toward the ocean.", "fol": "", "prediction": ["all x.((NewlyHatchedSeaTurtle(x) & SeaTurtle(x)) -> WalksTowardsOcean(x))", "all x y.((NewlyHatchedSeaTurtle(x) & Ocean(y)) -> WalksTowards(x,y))", "all x.((NewlyHatchedSeaTurtle(x) & WalksTowardsOcean(x)) -> SeaTurtle(x))", "all x.(NewlyHatchedSeaTurtle(x) -> WalksTowardsOcean(x))", "all x y z.((NewlyHatchedSeaTurtle(x) & Ocean(y) & Ocean(z)) -> WalksTowards(x,y,z))", "all x.((SeaTurtle(x) & HasHatched(x)) -> WalksTowardsOcean(x))", "all x y.((NewlyHatchedSeaTurtle(x) & Ocean(y)) -> WalksToward(x,y))", "all x.((NewlyHatchedSeaTurtle(x) & SeaTurtle(x)) -> WalksTowardsOcean(x))", "all x y z.((NewlyHatchedSeaTurtle(x) & Ocean(y) & SeaTurtle(z)) -> WalksTowards(x,y,z))", "all x y.((SeaTurtle(x) & HasHatched(x)) -> WalksTowardOcean(y))", "all x.(NewlyHatchedSeaTurtle(x) -> WalksTowardsOcean(x))", "all x y.((NewlyHatchedSeaTurtle(x) & Ocean(y)) -> WalksToward(x,y))", "exists x.(NewlyHatchedSeaTurtle(x) & WalksTowardsOcean(x))", "all x y.((NewlyHatchedSeaTurtle(x) & Ocean(y)) -> WalksTowards(x,y))", "exists x.(NewlyHatchedSeaTurtle(x) & WalksTowardsOcean(x))", "exists x.(NewlyHatchedSeaTurtle(x) & WalksTowardsOcean(x))"]}
{"id": "entailmentbank_validation_694", "nl": "if an animal hatches from an egg then that animal is born.", "fol": "", "prediction": ["all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x))", "all x.((Animal(x) & HatchesFromEgg(x)) -> Born(x))", "all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x))", "all x y z.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x,z))", "all x.((Animal(x) & HatchesFromEgg(x)) -> Born(x))", "all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x,y))", "all x.(HabitsFromEgg(x) -> Born(x))", "exists x.(Animal(x) & HatchesFromEgg(x) & Born(x))", "all x.((Animal(x) & HatchesFromEgg(x)) -> Born(x))", "all x y z.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x,y))", "all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x))", "all x.(HabitsFromEgg(x) -> BornAnimal(x))", "all x y z.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x,z))", "all x.((Animal(x) & HatchesFromEgg(x)) -> Born(x))", "all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x,y))", "all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x))"]}
{"id": "entailmentbank_validation_695", "nl": "a sea turtle that is just born walks toward the ocean.", "fol": "", "prediction": ["all x.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x))", "all x y.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x,y))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & Born(x)) -> WalksTowardsOcean(x))", "all x y.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x,y))", "exists x.(SeaTurtle(x) & JustBirth(x) & WalksTowardOcean(x))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & JustBorn(x)) -> WalksTowardsOcean(x))", "all x y.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(y))", "all x.((SeaTurtle(x) & Born(x)) -> WalksTowardsOcean(x))", "all x y.((SeaTurtle(x) & Born(x)) -> WalksTowardsOcean(x,y))", "exists x.(SeaTurtle(x) & JustBirth(x) & WalksTowardOcean(x))", "all x y.((SeaTurtle(x) & JustBorn(x)) -> WalksTowardsOcean(x,y))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & Born(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & JustBorn(x)) -> WalksTowardsOcean(x))"]}
{"id": "entailmentbank_validation_696", "nl": "an animal knows how to do instinctive behaviors when it is born.", "fol": "", "prediction": ["all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsInstinctiveBehaviors(x))", "all x y.((Animal(x) & Born(y)) -> KnowsHowToDoInstinctiveBehaviors(x,y))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x y.((Animal(x) & Born(y)) -> KnowsInstinctiveBehaviors(x,y))", "exists x.(Animal(x) & Born(x) & KnowsHowToDoInstinctiveBehaviors(x))", "all x y.((Animal(x) & Born(x) & InstinctiveBehavior(y)) -> KnowsHowToDo(x,y))", "all x.((Animal(x) & Born(x)) -> KnowsInstinctiveBehaviors(x))", "all x y.((Animal(x) & Born(y)) -> KnowsHowToDoInstinctiveBehaviors(x,y))", "exists x.(Animal(x) & Born(x) & KnowsHowToDoInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsInstinctiveBehaviors(x))", "all x y.((Animal(x) & Born(y)) -> KnowsInstinctiveBehaviors(x,y))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))"]}
{"id": "entailmentbank_validation_697", "nl": "walking toward the ocean is sea turtles' instinct behavior.", "fol": "", "prediction": ["all x.(WalkingTowardsOcean(x) -> SeaTurtleInstinctBehavior(x))", "all x y.((SeaTurtle(x) & Ocean(y)) -> InstinctBehavior(x,y))", "all x.((WalkingTowardsOcean(x) & SeaTurtle(x)) -> InstinctBehavior(x))", "all x.(WalkingTowardsOcean(x) -> SeaTurtleInstinctBehavior(x))", "all x.((SeaTurtle(x) & WalkingTowardsOcean(x)) -> InstinctBehavior(x))", "all x y z.((SeaTurtle(x) & Ocean(y) & Ocean(z) & WalkingTowards(x,y,z)) -> InstinctBehavior(x))", "all x y.((SeaTurtle(x) & Ocean(y)) -> InstinctBehavior(x,y))", "all x.(WalkingTowardsOcean(x) -> SeaTurtleInstinct(x))", "all x y.((SeaTurtle(x) & Ocean(y)) -> InstinctBehavior(x,y))", "all x.((WalkingTowardsOcean(x) & SeaTurtle(x)) -> InstinctBehavior(x))", "all x y.((SeaTurtle(x) & Ocean(y) & WalkingToward(x,y)) -> InstinctBehavior(x,y))", "all x y.((SeaTurtle(x) & Ocean(y)) -> Instinct(x,y))", "all x.((SeaTurtle(x) & WalkingTowardsOcean(x)) -> InstinctBehavior(x))", "all x.(WalkingTowardsOcean(x) -> SeaTurtleInstinctBehavior(x))", "all x.(WalkingTowardsOcean(x) -> InstinctBehavior(x))", "all x y.((SeaTurtle(x) & Ocean(y)) -> InstinctBehavior(x,y))"]}
{"id": "entailmentbank_validation_698", "nl": "a chicken is a kind of bird.", "fol": "", "prediction": ["all x.(Chicken(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x y.((Chicken(x) & Bird(y)) -> Bird(x))", "all x.(Chick(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x y.((Chicken(x) & Bird(y)) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x y.((Chicken(x) & Bird(y)) -> Bird(x))", "all x.(Cowboy(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x.(Child(x) -> Bird(x))", "exists x.(Chick(x) & Bird(x))", "exists x.(Cowlett(x) & Bird(x))", "all x.(Cowboy(x) -> Bird(x))", "exists x.(Chicken(x) & Bird(x))", "exists x.(Child(x) & Bird(x))"]}
{"id": "entailmentbank_validation_699", "nl": "a chick is a kind of young / baby chicken.", "fol": "", "prediction": ["all x.(Chick(x) -> (YoungChick(x) | BabyChick(x)))", "all x.(Chick(x) -> (YoungChick(x) | BabyChick(x)))", "all x.(Chick(x) -> (Young(x) | Baby(x)))", "all x.(Chick(x) -> (Yearly(x) | Baby(x)))", "all x y.(Chick(x) -> (YoungChick(y) | BabyChick(y)))", "all x.(Chick(x) -> (YoungChicken(x) | BabyChicken(x)))", "all x y.(Chick(x) -> (Year(y) & Baby(y) & Chicken(x,y)))", "all x.(Chick(x) -> (YoungChick(x) | BabyChick(x)))", "all x.(Chick(x) -> Young(x) & Baby(x))", "all x y.(Chick(x) -> (YoungChick(y) | BabyChick(y)))", "all x.(Chick(x) -> (Year(x) & Baby(x)))", "all x.(Chick(x) -> (YoungChick(x) | BabyChick(x)))", "exists x.(Chick(x) & KindOfYoung(x) & KindOfBaby(x))", "exists x.(Chick(x) & Young(x) & BabyChick(x))", "exists x.(Chick(x) & YoungChicken(x) & BabyChicken(x))", "all x.(Chick(x) -> YoungChick(x))"]}
{"id": "entailmentbank_validation_700", "nl": "a chick is a kind of baby bird.", "fol": "", "prediction": ["all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "all x y.(Chick(x) -> BabyBird(y))", "all x.(Chick(x) -> BabyBird(x))", "all x y.(Chick(x) -> BabyBird(y))", "all x.(Chick(x) -> BabyBird(x))", "all x y.(Chick(x) -> BabyBird(x,y))", "all x.(Chick(x) -> BabyBird(x))", "exists x.(Cik(x) & BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "exists x.(Chick(x) & KindOfBird(x))", "all x y.(Chick(x) & BabyBird(y))", "all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "exists x.(Chick(x) & BabyBird(x))"]}
{"id": "entailmentbank_validation_701", "nl": "an example of an instinctive behavior is a baby bird pecking at its shell to hatch.", "fol": "", "prediction": ["all x.(InstinctiveBehavior(x) -> (BabyBird(x) & PecksAtShell(x) & Hatches(x)))", "all x y.((BabyBird(x) & Shell(y) & PecksAt(x,y)) -> InstinctiveBehavior(x))", "all x.((BabyBird(x) & PecksAtShell(x)) -> InstinctiveBehavior(x))", "all x.(InstinctiveBehavior(x) -> (BabyBird(x) & PecksAtShell(x) & Hatches(x)))", "all x y z.((BabyBird(x) & Shell(y) & Shell(z) & PecksAt(x,y,z)) -> InstinctiveBehavior(x))", "all x.((BabyBird(x) & PecksAtShell(x) & Hatches(x)) -> InstinctiveBehavior(x))", "all x y.((BabyBird(x) & Shell(y) & PecksAt(x,y)) -> InstinctiveBehavior(x))", "all x.(InstinctiveBehavior(x) -> (BabyBird(x) & PecksAtShellToHatch(x)))", "all x y.((BabyBird(x) & BabyBird(y) & PecksAtShell(x,y)) -> InstinctiveBehavior(x))", "exists x.(BabyBird(x) & PecksAtShell(x) & Hatches(x))", "all x y z.((BabyBird(x) & Shell(y) & Shell(z)) -> PecksAtToHatch(x,y,z))", "all x y.((BabyBird(x) & Shell(y) & PeckingAt(x,y)) -> InstinctiveBehavior(x))", "all x.((BabyBird(x) & PeckingAtShell(x)) -> InstinctiveBehavior(x))", "all x.(InstinctiveBehavior(x) -> (BabyBird(x) & PecksAtShell(x) & Hatches(x)))", "all x.((BabyBird(x) & PecksAtShellToHatch(x)) -> InstinctiveBehavior(x))", "exists x.(BabyBird(x) & PecksAtShellToHatch(x))"]}
{"id": "entailmentbank_validation_702", "nl": "a chick pecking at its shell to hatch is an example of an instictive behavior.", "fol": "", "prediction": ["all x.((Chick(x) & PecksAtShell(x) & Hatches(x)) -> InstictiveBehavior(x))", "all x y.((Chick(x) & Shell(y) & PecksAt(x,y)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShellToHatch(x)) -> InstictiveBehavior(x))", "all x y.((Chick(x) & Shell(y) & PecksAtToHatch(x,y)) -> InstictiveBehavior(x))", "all x y z.((Chick(x) & Shell(y) & Shell(z) & PecksAtToHatch(x,y,z)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShell(x) & Hatch(x)) -> InstictiveBehavior(x))", "all x.(ChickPeckingAtShellToHatch(x) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShellToHat(x)) -> InstictiveBehavior(x))", "all x y.((Chick(x) & Shell(y) & PecksAt(x,y)) -> InstictiveBehavior(x))", "all x y.((Chick(x) & Shell(y) & PecksToHatch(x,y)) -> InstictiveBehavior(x))", "all x y z.((Chick(x) & Shell(y) & Shell(z)) -> PecksToHatch(x,y,z))", "all x y.((Chick(x) & PecksAtShell(x) & Hatch(x)) -> InstictiveBehavior(y))", "all x.((Chick(x) & PecksAtShell(x) & Hatches(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShellToHatch(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksShell(x) & HatchesShell(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShell(x) & Hatch(x)) -> InstictiveBehavior(x))"]}
{"id": "entailmentbank_validation_703", "nl": "receiving the recessive gene for a trait from each parent causes the offspring to have that recessive trait.", "fol": "", "prediction": ["all x y.((RecessiveGene(x) & ParentTrait(y)) -> CausesOffspringToHaveRecessiveTrait(x,y))", "all x y.((Parent(x) & Parent(y) & ReceivesRecessiveGene(x,y)) -> HasRecessiveTrait(x,y))", "all x.((RecessiveGene(x) & ParentTrait(x)) -> OffspringHasRecessiveTrait(x))", "all x y z.((RecessiveGene(x) & Trait(y) & Parent(z) & Parent(z)) -> CausesOffspringToHaveRecessiveTrait(x,y,z))", "all x y.((RecessiveGene(x) & Trait(y) & Parent(x,y)) -> CausesOffspringToHaveRecessiveTrait(x,y))", "all x y z.((RecessiveGene(x) & Trait(y) & Parent(z) & Parent(z)) -> CausesOffspringToHaveRecessiveTrait(x,y,z))", "all x.((RecessiveGene(x) & Trait(x) & Parent(x)) -> OffspringRecessiveTrait(x))", "all x y.((Parent(x) & Parent(y) & ReceivesRecessiveGene(x,y)) -> OffspringHasRecessiveTrait(x,y))", "all x.((ReceivesRecessiveGene(x) & ParentTrait(x)) -> OffspringRecessiveTrait(x))", "all x.(ReceivesRecessiveGene(x) -> CausesRecessiveTrait(x))", "all x y z.((RecessiveGene(x) & Trait(y) & Parent(z) & Parent(y,z)) -> CausesOffspringToHaveRecessiveTrait(x,y,z))", "all x.((ReceivingRecessiveGene(x) & ParentTrait(x)) -> OffspringHasRecessiveTrait(x))", "all x y.((Parent(x) & Parent(y) & ReceivesRecessiveGene(x,y)) -> HasRecessiveTrait(x,y))", "all x.(ReceivesRecessiveGene(x) -> CausesRecessiveTrait(x))", "all x y.((Parent(x) & Parent(y) & RecessiveGene(x,y)) -> OffspringHasRecessiveTrait(x,y))", "all x.((ReceivesRecessiveGene(x) & ParentTrait(x)) -> OffspringHasRecessiveTrait(x))"]}
{"id": "entailmentbank_validation_704", "nl": "blue eye is a recessive trait in human.", "fol": "", "prediction": ["all x.(BlueEye(x) -> RecessiveTrait(x))", "all x y.((BlueEye(x) & Human(y)) -> RecessiveTrait(x,y))", "(RecessiveTraitInHuman(blueEye))", "all x.(BlueEye(x) -> RecessiveTrait(x))", "(RecessiveTrait(blueEye) & InHuman(blueEye))", "all x.(BlueEye(x) -> RecessiveTraitInHuman(x))", "all x y.((BlueEye(x) & Human(y)) -> RecessiveTrait(x,y))", "(RecessiveTraitInHuman(blueEye)", "all x.(BlueEye(x) -> RecessiveTrait(x))", "all x y.((BlueEye(x) & Human(y)) -> RecessiveTrait(x,y))", "all x.(BlueEye(x) -> RecessiveTraitInHuman(x))", "all x.(BlueEye(x) -> RecessiveTrait(x))", "all x y.((BlueEye(x) & Human(y)) -> RecessiveTrait(x,y))", "all x.(BlueEye(x) -> ResponsiveTraitInHuman(x))", "all x.(BlueEye(x) -> RecessiveTraitInHuman(x))", "all x.(BlueEye(x) -> RecessiveTrait(x))"]}
{"id": "entailmentbank_validation_705", "nl": "to have blue eyes requires receiving the recessive gene from each parent.", "fol": "", "prediction": ["all x.(BlueEyes(x) -> RequiresRecessiveGene(x))", "all x y.((Patient(x) & Parent(y)) -> RequiresRecessiveGene(x,y))", "all x y.((Parent(x) & Parent(y) & RecessiveGene(x,y)) -> BlueEyes(x))", "all x.(BlueEyes(x) -> RequiresRecessiveGene(x))", "all x y z.((BlueEyes(x) & Parent(y) & Gene(z)) -> RequiresRecessiveGene(x,y,z))", "all x y.((Patient(x) & Parent(y) & RecessiveGene(x,y)) -> BlueEyes(x))", "(ReceivesRecessiveGene(blueEyes))", "(RequiresRecessiveGene(blueEyes) & Parent(Parent))", "(ReceivesRecessiveGene(blueEyes) -> BlueEyes(blueEyes))", "all x y.((Parent(x) & Parent(y) & RecessiveGene(x,y)) -> BlueEyes(x))", "all x.(BlueEyes(x) -> RequiresRecessiveGene(x))", "all x.((Patient(x) & RequiresRecessiveGene(x)) -> BlueEyes(x))", "all x.(BlueEyes(x) -> ReceivesRecessiveGene(x))", "all x.(BlueEyes(x) -> RequiresRecessiveGene(x,Parent))", "all x y.((Patient(x) & Parent(y)) -> RequiresRecessiveGene(x,y))", "all x.(BlueEyes(x) -> RequiresRecessiveGene(x))"]}
{"id": "entailmentbank_validation_706", "nl": "an egg cell is a kind of sex cell.", "fol": "", "prediction": ["all x.(EggCell(x) -> SexualCell(x))", "all x.(EggCell(x) -> SexCell(x))", "all x y.((EggCell(x) & SexCell(y)) -> Is(x,y))", "all x.(EggCell(x) -> SexualCell(x))", "all x y.((EggCell(x) & SexCell(y)) -> SexCell(x))", "all x.(EggCell(x) -> SexCell(x))", "all x y.((EggCell(x) & SexualCell(y)) -> -SexCell(x))", "all x y.((EggCell(x) & SexCell(y)) -> -SexCell(x))", "all x.(EggCell(x) -> SexualCell(x))", "all x.(EggCell(x) -> SexCell(x))", "all x.(EggCell(x) -> SexualCell(x))", "exists x.(EggCell(x) & sexCell(x))", "exists x.(EggCell(x) & -SexCell(x))", "all x.(EggCell(x) -> SexCell(x))", "exists x.(EggCell(x) & SexualCell(x))", "exists x.(EggCell(x) & SexCell(x))"]}
{"id": "entailmentbank_validation_707", "nl": "a sperm cell is a kind of sex cell.", "fol": "", "prediction": ["all x.(SpermCell(x) -> SexCell(x))", "all x.((SpermCell(x) & SexCell(x)) -> -SexCell(x))", "all x.(SpermCell(x) -> SexCell(x))", "all x y.((SpermCell(x) & SexCell(y)) -> Is(x,y))", "all x.(SspermCell(x) -> SexualCell(x))", "all x.((SpermCell(x) & SexCell(x)) -> SexCell(x))", "all x y.((SspermCell(x) & SexCell(y)) -> SexCell(x,y))", "all x y.((SpermCell(x) & sexCell(y)) -> SexCell(x))", "all x.((SporeCell(x) & -SexCell(x)) -> SexCell(x))", "all x y.((SporeCell(x) & SpermCell(y)) -> SexCell(x))", "all x.(SpermCell(x) -> SexCell(x))", "all x.(SporeCell(x) -> SexCell(x))", "all x.(SspermCell(x) -> SexualCell(x))", "exists x.(spermCell(x) & SexCell(x))", "exists x.(SpermCell(x) & SpeciesCell(x))", "exists x.(PermCell(x) & SortOfSexCell(x))"]}
{"id": "entailmentbank_validation_708", "nl": "a mutation in the sex cells of a parent can cause a new trait to appear in the parent's offspring.", "fol": "", "prediction": ["all x y.((MutationInSexCells(x) & Parent(y)) -> NewTrait(x,y))", "all x y z.((MutationInSexCells(x) & Parent(y) & Offspring(z)) -> NewTrait(x,y,z))", "all x y.((MutationInSexCells(x) & Parent(y)) -> CanCauseNewTrait(x,y))", "all x y.((Mutation(x) & ParentSexCells(y) & ParentOffspring(z)) -> NewTrait(x,y,z))", "all x.((MutationInSexCells(x) & Parent(x)) -> NewTrait(x))", "all x y z.((Mutation(x) & SexCells(y) & Parent(z) & Mutations(x,y)) -> NewTrait(x,z))", "all x.(MutationInSexCellsOfParent(x) -> NewTrait(x))", "all x y z.((MutationInSexCells(x,y) & Parent(z)) -> (MutationCanCauseNewTrait(x,z) & ParentOffspring(x,z)))", "all x y.((MutationInSexCells(x,y) & Parent(y)) -> NewTrait(x,y))", "all x.((MutationInSexCells(x) & Parent(x)) -> NewTraitInOffspring(x))", "all x y z.((Mutation(x) & SexCells(y) & Parent(z) & MutationInSexCells(x,y)) -> NewTrait(x,z))", "all x y.((Mutation(x) & ParentSexCells(y) & ParentOffspring(z)) -> CanCauseNewTrait(x,y,z))", "all x y z.((Mut mutation(x) & SexCells(y) & Parent(z) & ParentOffspring(z)) -> CanCauseNewTrait(x,y,z))", "all x.(MutationInSexCells(x) -> NewTrait(x))", "all x.((MutationInSexCells(x) & Parent(x)) -> NewTraitAppearsInOffspring(x))", "all x y.((Mut mutation(x) & ParentSexCells(x,y)) -> NewTrait(x,y))"]}
{"id": "entailmentbank_validation_709", "nl": "a mutation in sperm or egg of a parent can cause a new trait to appear in the parent's offspring.", "fol": "", "prediction": ["all x y.((Mutation(x) & Parent(y) & (Ssperm(y) | Egg(y))) -> NewTrait(x,y))", "all x y.((MutationInSspermOrEgg(x) & Parent(y)) -> NewTrait(x,y))", "all x y z.((Mutation(x) & SpermOrEgg(y) & Parent(z)) -> (Mutation(x,y) & NewTrait(x,z)))", "all x.((MutationInSspermOrEgg(x) & Parent(x)) -> NewTrait(x))", "all x y.((Mutation(x) & Parent(y) & (Ssperm(y) | Egg(y))) -> NewTrait(x,y))", "all x y z.((MutationInSspermOrEgg(x) & Parent(y) & Parent(z) & ParentOffspring(z)) -> NewTrait(y,z))", "all x.((MutationInSspermOrEgg(x) & Parent(x)) -> NewTraitInOffspring(x))", "all x.(MutationInSspermOrEgg(x) -> NewTrait(x))", "all x y.((MutationInSspermOrEgg(x) & Parent(y)) -> NewTrait(x,y))", "all x y z.((Mutation(x) & SpermOrEgg(y) & Parent(z)) -> (Mutation(x,y,z) & NewTrait(x,y,z)))", "all x y.((Mut mutation(x) & Parent(y)) -> ((Ssperm(y) | Egg(y)) & ParentOffspring(y)))", "all x y.((Mutation(x) & Parent(y) & (Ssperm(z) | Egg(z)))) -> NewTrait(x,y,z))", "all x.((MutationInSpermOrEgg(x) & Parent(x)) -> NewTraitAppearsInOffspring(x))", "all x y z.((MutationInSspermOrEgg(x) & Parent(y) & Parent(z) & Offspring(z)) -> NewTrait(y,z))", "all x.(MutationInSspermOrEgg(x) -> NewTraitInOffspring(x))", "all x.((MutationInSspermOrEgg(x) & Parent(x)) -> NewTraitInOffspring(x))"]}
{"id": "entailmentbank_validation_710", "nl": "smaller dogs have genetic trait of smaller size.", "fol": "", "prediction": ["all x.(SmallerDog(x) -> HasGeneticTraitOfSmallerSize(x))", "all x.((Dog(x) & Smaller(x)) -> GeneticTreatmentSmaller(x))", "all x.(SmallerDog(x) -> GeneticTreatmentSmallerSize(x))", "all x.((Dog(x) & Smaller(x)) -> HasGeneticTrait(x,SmallerSize))", "(SmallerDogs(x) & GeneticTreatmentSmallerSize(x))", "(GeneticallyTreatment(smallerSize) & SmallerDog(s))", "all x y.((Dog(x) & Smaller(y)) -> HasGeneticTrait(x,y))", "all x y.((SmallerDog(x) & GeneticTrait(y)) -> HasSmallerSize(x,y))", "all x.(SmallerDog(x) -> HasGeneticTrait(x,SmallerSize))", "all x.((Dog(x) & Smaller(x)) -> GeneticTreatmentOfSmallerSize(x))", "exists x.(Dog(x) & Smaller(x) & GeneticTreatment(x,SmallerSize))", "all x.(SmallerDog(x) -> GeneticTraitSmallerSize(x))", "all x y.((Dog(x) & Smaller(y)) -> HasGeneticTrait(x,y))", "exists x.(Dog(x) & Smaller(x) & HasGeneticTrait(x,SmallerSize))", "all x.(SmallerDog(x) -> HasGeneticallyTreatmentOfSmallerSize(x))", "all x y.((Dog(x) & Dog(y)) -> HasGeneticTrait(x,y))"]}
{"id": "entailmentbank_validation_711", "nl": "human are breeding german shepherd dogs to other smaller dogs.", "fol": "", "prediction": ["all x y.((Human(x) & ShepherdDog(y)) -> BreedsToSmallerDogs(x,y))", "all x y z.((Human(x) & ShepherdDog(y) & SmallerDog(z)) -> BreedsTo(x,y,z))", "all x y.((Human(x) & Shepherd(y)) -> BreedsToSmallerDogs(x,y))", "all x.(Human(x) -> BreedsGermanShippingDogsToSmallerDogs(x))", "(BreedingGermanShippingDogsToSmallerDogs(human))", "(BreedingGermanShipperDogs(human) & BreedingGermanShipperDogs(human))", "all x.((Human(x) & BreedsGermanShippingDogs(x)) -> BreedsSmallerDogs(x))", "all x y z.((Human(x) & GermanShipper(y) & SmallerDog(z)) -> BreedsTo(x,y,z))", "all x y.((Human(x) & GermanShipper(y)) -> BreedingToSmallerDogs(x,y))", "all x.(Human(x) -> BreedingGermanShipperDogsToSmallerDogs(x))", "(BreedingGermanSharkDogsToSmallerDogs(human))", "exists x.(Human(x) & BreedsGermanSheepdogToSmallerDogs(x))", "all x y z.((Human(x) & Shepherd(y) & SmallerDog(z)) -> BreedsTo(x,y,z))", "all x y.((Human(x) & ShepherdDog(y)) -> BreedingToSmallerDogs(x,y))", "exists x.(Human(x) & BreedingGermanShippingDog(x,y) & BreedingSmallerDog(y))", "exists x.(Human(x) & Breeds(x,GermanShippingDogs,SmallDogs))"]}
{"id": "entailmentbank_validation_712", "nl": "human are breeding german shepherd dogs with dogs with genetic trait of smaller size.", "fol": "", "prediction": ["all x y.((Human(x) & GermanShipper(y) & BreedsWith(x,y)) -> BreedsWithSmallerSize(x,y))", "all x.((Human(x) & BreedsGermanSheepdog(x) & BreedsSmallerSizeDogs(x)) -> BreedsSmallerSizeDogs(x))", "all x.(Human(x) -> BreedsGermanShippingDogsWithSmallerGeneticTrait(x))", "(BreedingGermanShippingDogs(human) & BreedingGermanShippingDogs(human) & BreedingSmallerSizeDogs(human))", "all x y z.((Human(x) & GermanShipperDog(y) & Dog(z) & GeneticTreatment(z) & SmallerSize(z)) -> BreedsWith(x,y,z))", "all x y.((Human(x) & GermanShippingDog(y) & BreedingWithSmallerSize(x,y)) -> BreedsWithSmallerSize(x,y))", "all x y.((Human(x) & ShepherdDog(y) & Breeding(x,y)) -> BreedsWithSmallerSize(x,y))", "exists x.(Human(x) & BreedingGermanSheepdog(x) & BreedingGermanSheepdog(x) & BreedingGermanSheepdog(x) & BreedingGermanSheepdog(x) & BreedingGermanSheepdog(x) & BreedingGermanSheepdog(x) & BreedingGermanSheepdog(x))", "all x.((Human(x) & BreedingGermanSheepdog(x) & BreedingDogsWithSmallerGeneticTreatment(x)) -> BreedingGermanSheepdog(x))", "(Manufacturer(human) & BreedsGermanShippingDogsWithSmallerGeneticTreatment(human,s))", "(BreedingGermanSharkDogsWithSmallerGeneticTrait(Human))", "all x.(Human(x) -> BreedingGermanSheepdogsWithSmallerGeneticTrait(x))", "all x y z.((Human(x) & GermanShippingDog(y) & Dog(z) & GeneticTraitSmallerSize(z)) -> BreedsWith(x,y,z))", "all x y.((Human(x) & GermanSharkDog(y) & BreedsWith(x,y)) -> BreedsWithSmallerSize(x,y))", "all x.(Human(x) -> BreedsGermanShipperDogsWithSmallerGeneticTreatment(x))", "all x y.((Human(x) & Shepherd(y)) -> BreedsWithSmallerSizeDogs(x,y))"]}
{"id": "entailmentbank_validation_713", "nl": "selective breeding is when an organism receives selective genetic traits from its parents by human design.", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y) & ReceivesSelectiveGeneticTreatments(x,y) & HumanDesign(x)) -> SelectiveBreeding(x))", "all x.((Organism(x) & ReceivesSelectiveGeneticTreatments(x) & HumanDesign(x)) -> SelectiveBreeding(x))", "all x y z.((Organism(x) & GeneticallyTreatment(y) & HumanDesign(z) & ReceivesSelectiveBreeding(x,y,z)) -> HumanDesign(x))", "all x y.((Organism(x) & Parent(y) & ReceivesSelectiveGeneticTreatments(x,y) & HumanDesign(x)) -> SelectiveBreeding(x))", "all x y z.((Organism(x) & GeneeticTreatment(y) & HumanDesign(z) & ReceivesSelectiveBreeding(x,y,z)) -> HumanDesign(x))", "all x.(SelectiveBreeding(x) -> (OrganismReceivesSelectiveGeneticTreatments(x) & HumanDesign(x)))", "all x.((Organism(x) & ReceivesSelectiveGeneticTreatments(x) & HumanDesign(x)) -> SelectiveBreeding(x))", "all x y z.((Organism(x) & GeneticTreatment(y) & HumanDesign(z) & ReceivesSelectiveBy(x,y,z)) -> SelectiveBreeding(x))", "all x y.((Organism(x) & Organism(y) & ReceivesSelectiveGeneticTreatments(x,y) & HumanDesign(y)) -> SelectiveBreeding(x,y))", "all x.(SelectiveBreeding(x) -> (OrganismReceivesSelectiveGeneticTreatments(x) & HumanDesign(x)))", "all x y z.((Organism(x) & Parent(y) & HumanDesign(z)) -> ReceivesSelectiveGeneticTreatments(x,y,z))", "all x y.((Organism(x) & Parent(y) & ReceivesSelectiveGeneticTreatments(x,y)) -> HumanDesigned(x))", "all x.((Organism(x) & ReceivesSelectiveGeneticTreatments(x) & HumanDesign(x)) -> SelectiveBreeding(x))", "all x.(SelectiveBreeding(x) -> (ReceivesSelectiveGeneticTreatments(x) & HumanDesign(x)))", "all x.((Organism(x) & ReceivesSelectiveGeneticTraits(x) & HumanDesign(x)) -> SelectiveBreeding(x))", "all x y.((Organism(x) & HumanDesign(y)) -> ReceivesSelectiveGeneticTreatments(x,y))"]}
{"id": "entailmentbank_validation_714", "nl": "human breeding german shepherd dogs with dogs with genetic trait of smaller size is an example of selective breeding.", "fol": "", "prediction": ["all x.((Human(x) & BreedsGermanSheepdogs(x) & BreedsDogsWithSmallerSizeTreatment(x)) -> SelectiveBreeding(x))", "all x y.((Human(x) & GermanSharkDog(y) & BreedsWith(x,y) & HasGeneticTraitSmallerSize(x)) -> SelectiveBreeding(x))", "all x y z.((Human(x) & GermanSheepdog(y) & Dog(z) & GeneticTreatment(z) & SmallerSize(z)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedsGermanSheepdogs(x) & BreedsDogsWithSmallerGeneticTrait(x)) -> SelectiveBreeding(x))", "all x y.((Human(x) & GermanShoreDog(y) & BreedingWith(x,y) & BreedingWith(x,y) & GeneticTreatmentSmallerSize(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedsGermanSheepherdDogs(x) & BreedsDogsWithSmallerGeneticTreat(x)) -> SelectiveBreeding(x))", "(SelectiveBreeding(human,German,Sheepdog) & BreedingWithSmallerSizeDogs(human,German,German))", "all x y z.((Human(x) & GermanSharkDog(y) & Dog(z) & GeneticTraitSmallerSize(z) & BreedsWith(x,y,z)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedingGermanShippingDogs(x) & BreedingDogsWithSmallerGeneticTreatment(x)) -> SelectiveBreeding(x))", "all x.(SelectiveBreeding(x) -> (Human(x) & BreedsGermanSheepherdDogs(x) & BreedsDogsWithSmallerSizeTreatment(x)))", "all x y.((Human(x) & GermanSheepdog(y) & BreedsWithSmallerSize(x,y)) -> SelectiveBreeding(x))", "all x y.((Human(x) & ShepherdDog(y) & BreedsWith(x,y) & HasGeneticTraitSmallerSize(x,y)) -> SelectiveBreeding(x))", "all x.((Human(x) & Breeds(x,GermanSharkdogs,German ShepherdDogs) & Breeds(x,GermanDogs) & GeneticTraitSmallerSize(x)) -> SelectiveBreeding(x))", "all x y z.((Human(x) & GermanSheepdog(y) & Dog(z) & GeneticTreat(z) & SmallerSize(z)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedsGermanSheepherdDogs(x) & BreedsDogsWithSmallerGeneticTrait(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedingGermanSharkDogs(x) & BreedingDogsWithSmallerGeneticTreat(x)) -> SelectiveBreeding(x))"]}
{"id": "entailmentbank_validation_715", "nl": "sexual reproduction requires both sperm and egg.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> (RequiresSsperm(x) & RequiresEgg(x)))", "all x y.((SexualReproduction(x) & Sperm(y) & Egg(y)) -> Requires(x,y))", "(Requires(sexuel) & Requires(sexuel) & Requires(sexuel,sperm) & Requires(sexuel,egg))", "all x.(SexualReproduction(x) -> (RequiresSsperm(x) & RequiresEgg(x)))", "all x.((SexualReproduction(x) & Sperm(x) & Egg(x)) -> Requires(x,sperm,egg))", "(Requires(ssperm,segment) & Requires(segment,egg))", "all x y.((SexualReproduction(x) & Sperm(y) & Egg(y)) -> Requires(x,y))", "(Requires(ssperm) & Requires(egg))", "all x.(SexualReproduction(x) -> (RequiresSperm(x) & RequiresEgg(x)))", "all x.(SexualReproduction(x) -> (Requires(x,sperm) & Requires(x,egg)))", "(Requires(sexuel) & Requires(egg))", "all x y.((SexualReproduction(x) & Sperm(y) & Egg(y)) -> Requires(x,y))", "all x.(SexualReproduction(x) -> (RequiresSsperm(x) & RequiresEgg(x)))", "all x.(SexualReproduction(x) -> (RequiresSpore(x) & RequiresEgg(x)))", "all x y.((SexualReproduction(x) & Sperm(y) & Egg(y)) -> Requires(x,y))", "all x.(SexualReproduction(x) -> (RequiresSsperm(x) & RequiresEgg(x)))"]}
{"id": "entailmentbank_validation_716", "nl": "the sperm production is prevented in male insects.", "fol": "", "prediction": ["all x.((MaleInsect(x) & MaleInsect(x)) -> PreventsSpermProduction(x))", "all x y.((MaleInsect(x) & MaleInsect(y)) -> PreventsSpermProduction(x,y))", "all x.((Insect(x) & MaleInsect(x)) -> PreventsSpermProduction(x))", "all x y.((MammalInsect(x) & SpermProduction(y)) -> Prevents(x,y))", "(PreventsSpermProduction(x) -> MaleInsect(x))", "all x.((MaleInsect(x) & MaleInsect(x)) -> PreventsSpermProduction(x))", "all x y.((Insect(x) & Male(y)) -> PreventsSpermProduction(x,y))", "all x y z.((MaleInsect(x) & SpermProduction(y) & MaleInsect(z) & Produces(x,y)) -> Prevents(x,z))", "all x.((MammalInsect(x) & PreventsSpermProduction(x)) -> SpermProduction(x))", "all x.((Insect(x) & Male(x)) -> PreventsSpermProduction(x))", "all x y.((MaleInsect(x) & MaleInsect(y)) -> PreventsSpermProduction(x,y))", "(PreventsSspermProduction(x) -> MaleInsect(x))", "exists x.(MaleInsect(x) & PreventsSpermProduction(x))", "all x.((MaleInsect(x) & MaleInsect(x)) -> PreventsSspermProduction(x))", "all x y.((MammalInsect(x) & SpermProduction(y)) -> Prevents(x,y))", "all x y.((MaleInsect(x) & MaleInsect(y)) -> PreventsSspermProduction(x,y))"]}
{"id": "entailmentbank_validation_717", "nl": "if something required for a process is not produced then that process is prevented from occurring.", "fol": "", "prediction": ["all x y.((Process(x) & RequiredFor(x,y) & -Produced(x)) -> PreventsOccurrence(x,y))", "all x.((Process(x) & RequiredForProcess(x) & -Produced(x)) -> PreventsOccurrence(x))", "all x.((RequiredForProcess(x) & -Produced(x)) -> PreventsProcessOfOccurringProcess(x))", "all x y.((Process(x) & Process(y) & -Produced(x,y)) -> PreventsOccurrence(x,y))", "all x.((Process(x) & RequiredForProcess(x) & -Produced(x)) -> PreventsProcessOfOccurringProcess(x))", "all x y z.((Process(x) & RequiredFor(x,y) & Process(z) & -Produced(x,z)) -> PreventsOccurrence(x,z))", "all x y.((RequiredForProcess(x) & Process(y) & -Produced(x,y)) -> PreventsOccurrence(x,y))", "all x y.((Process(x) & RequiredFor(x,y) & -Produced(y)) -> PreventsOccurrence(x,y))", "all x.((RequiredForProcess(x) & -Produced(x)) -> PreventsProcessOfOccurring(x))", "all x y z.((RequiredForProcess(x,y) & Process(z) & -Produced(x,z)) -> PreventsOccurrence(x,z))", "all x y.((Process(x) & Process(y) & -Produced(x,y)) -> PreventsOccurrence(x,y))", "all x.((Process(x) & RequiredForProcess(x)) -> PreventsOccurrence(x))", "exists x.(Process(x) & -Produced(x))", "exists x.(Process(x) & -ProducedRequiredForProcess(x))", "all x y.((Process(x) & RequiredFor(x,y) & -Produced(x,y)) -> PreventsOccurrence(x,y))", "all x.((RequiredForProcess(x) & -Produced(x)) -> PreventsProcessOccurrence(x))"]}
{"id": "entailmentbank_validation_718", "nl": "the sexual reproduction process is prevented in the insects.", "fol": "", "prediction": ["all x y.((Insect(x) & Insect(y)) -> PreventsSexualReproduction(x,y))", "all x.(Insect(x) -> PreventsSexualReproduction(x))", "all x.((Insect(x) & PreventsSexualReproduction(x)) -> PreventsSexualReproduction(x))", "all x y z.((Insect(x) & SexualReproductionProcess(y) & Insect(z)) -> Prevents(x,y,z))", "(ProcessForSexualReproduction(insects) -PreventsSexualReproduction(insects))", "all x y.((Insect(x) & Insect(y)) -> PreventsSexualReproduction(x,y))", "(SexualReproductionProcessPreventedInInsects(insects)", "(all x.(Insect(x) -> PreventsSexualReproductionProcess(x)))", "all x y.((Insect(x) & Insect(y)) -> PreventsSexualReproductionProcess(x,y))", "all x.(Insect(x) -> PreventsSexualReproduction(x))", "all x.((Insect(x) & PreventsSexualReproduction(x)) -> Insect(x))", "all x y z.((Insect(x) & Insect(y) & SexualReproductionProcess(z)) -> Prevents(x,z))", "all x y.((Insect(x) & Insect(y)) -> PreventsSexualReproduction(x,y))", "all x y.((Insect(x) & Insect(y)) -> -ProcessForSexualReproduction(x,y))", "all x.(Insect(x) -> PreventsSexualReproduction(x))", "all x.(Insect(x) -> PreventsSexualReproductionProcess(x))"]}
{"id": "entailmentbank_validation_719", "nl": "preventing reproduction decreases the rate of reproduction.", "fol": "", "prediction": ["all x.((PreventsReproduction(x) & DecreasesReproductionRate(x)) -> ReducesReproduction(x))", "all x.(PreventsReproduction(x) -> DecreasesRateOfReproduction(x))", "all x y.((PreventsReproduction(x) & Reproduction(y)) -> DecreasesRate(x,y))", "all x.((PreventsReproduction(x) & ReducesReproductionRate(x)) -> DecreasesReproductionRate(x))", "(PreventsReproduction(x) -> DecreasesReproductionRate(x))", "all x.((PreventsReproduction(x) & DecreasesRateOfReproduction(x)) -> ReducesRateOfReproduction(x))", "all x.(PreventsReproduction(x) -> DecreasesRateOfReproduction(x))", "all x y.((PreventsReproduction(x) & Reproduction(y)) -> DecreasesRate(x,y))", "all x y.((Production(x) & Reproduction(y)) -> DecreasesRate(x,y))", "all x.((ProtectsReproduction(x) & DecreasesReproductionRate(x)) -> PreventsReproduction(x))", "all x.(Processing(x) -> DecreasesReproductionRate(x))", "all x.(PreventsReproduction(x) -> ReducesRateOfReproduction(x))", "all x y.((Production(x) & Reproduction(y)) -> DecreasesRate(x,y))", "all x y.((PreventsReproduction(x) & Reproduction(y)) -> DecreasesRate(x,y))", "all x y.((PreventsReproduction(x) & Reproduction(y)) -> ReducesRate(x,y))", "all x.(PreventsReproduction(x) -> DecreasesReproductionRate(x))"]}
{"id": "entailmentbank_validation_720", "nl": "sexual reproduction is a kind of reproduction.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> Reproduction(x))", "all x.(SexualReproduction(x) -> Reproduction(x))", "all x.((SexualReproduction(x) & Reproduction(x)) -> Reproduction(x))", "all x y.((SexualReproduction(x) & Reproduction(y)) -> Reproduction(x,y))", "(Reproduction(sexual) & Reproduction(s))", "all x y.((SexualReproduction(x) & SexualReproduction(y)) -> Reproduction(x))", "all x.(SexualReproduction(x) -> Reproduction(x))", "all x.((SexualReproduction(x) & Reproduction(x)) -> Reproduction(x))", "exists x y.(SexualReproduction(x) & Reproduction(y) & Reproduction(y) & Reproduction(x))", "all x.(SexualReproduction(x) -> Reproduction(x))", "all x y.((SexualReproduction(x) & Reproduction(y)) -> Reproduction(x,y))", "all x.((SexualReproduction(x) & Reproduction(x)) -> Reproduction(x))", "all x.(Reproduction(x) -> Sexual(x))", "all x.(SexualReproduction(x) -> Reproduction(x))", "all x.(SexualReproduction(x) -> Reproduction(x))", "all x.(SexualReproduction(x) -> Reproduction(x))"]}
{"id": "entailmentbank_validation_721", "nl": "the reproduction rate in the insects will decrease.", "fol": "", "prediction": ["all x.(Insect(x) -> DecreasedReproductionRate(x))", "all x y.((Insect(x) & Insect(y)) -> ReproductionRateDecrease(x,y))", "all x.((Insect(x) & Insect(x)) -> DecreasedReproductionRate(x))", "all x y.((Insect(x) & Insect(y)) -> DecreasesReproductionRate(x,y))", "all x.(Insect(x) -> DecreasesReproductionRate(x))", "the reproduction rate in the insects will decrease.", "(DecreasedReproductionRate(insects))", "(ReproductionRateDecreasesInInsects(insects))", "all x y z.((Insect(x) & Insect(y) & ReproductionRate(z)) -> Decreases(x,z))", "all x.((Insect(x) & Insect(x)) -> ReproductionRateDecrease(x))", "all x.(Insect(x) -> DecreaseReproductionRate(x))", "all x y.((Insect(x) & Insect(y)) -> ReproductionRateDecrease(x,y))", "all x y.((Insect(x) & Insect(y) & Insect(x)) -> DecreasedReproductionRate(x,y))", "(DecreasedReproductionRate(insects))", "all x y.((Insect(x) & Insect(y)) -> DecreasedReproductionRate(x,y))", "all x.(Insect(x) -> ReproductionRateDecreased(x))"]}
{"id": "entailmentbank_validation_722", "nl": "as the rate of reproduction decreases, the population will decrease.", "fol": "", "prediction": ["all x.((RateOfReproduction(x) & Decreases(x)) -> PopulationDecreases(x))", "all x y.((RateOfReproduction(x) & Population(y) & Decreases(x,y)) -> Decreases(y))", "(DecreasesReproduction(x) -> PopulationDecreases(x))", "as the rate of reproduction decreases, population will decrease.", "all x.((RateOfReproduction(x) & Decreases(x)) -> PopulationDecreases(x))", "-DecreasesReproductionRate(-) -> PopulationDecrease(-)", "all x y.((RateOfReproduction(x) & Population(y) & Decreases(x)) -> Decreases(y))", "all x.((ReproductionRate(x) & Decreases(x)) -> PopulationDecreases(x))", "as the rate of reproduction decreases, the population will decrease.", "all x y.((ReproductionRate(x) & Population(y) & Decreases(x,y)) -> Decreases(y,x))", "(DecreasesRateOfReproduction(x) -> PopulationDecreases(x))", "all x.(DecreasesReproduction(x) -> PopulationDecreases(x))", "all x.((RateOfReproduction(x) & Decreases(x)) -> PopulationDecreases(x))", "all x y.((RateOfReproduction(x) & Population(y)) -> Decreases(y))", "all x y.((RateOfReproduction(x) & PopulationDecrease(y)) -> Decrease(y))", "all x.((RateOfReproduction(x) & Decreases(x)) -> PopulationDecreases(x))"]}
{"id": "entailmentbank_validation_723", "nl": "the population of the insects will decrease.", "fol": "", "prediction": ["all x.(Insect(x) -> PopulationDecrease(x))", "all x y.((Insect(x) & Population(y)) -> Decreases(x,y))", "all x.(Insect(x) -> PopulationDecrease(x))", "the population of the insects will decrease.", "(DecreasedPopulationOfInsects(insect))", "all x y.((Insect(x) & Population(y)) -> Decreased(x,y))", "all x.(Insect(x) -> PopulationDecrease(x))", "all x y.((Insect(x) & Population(y)) -> Decreases(x,y))", "(DecreasedPopulationOfInsects(insect))", "all x y.((Insect(x) & PopulationDecrease(y)) -> Insect(x,y))", "all x.(Insect(x) -> PopulationDecrease(x))", "all x y.((Insect(x) & Population(y)) -> Decrease(x,y))", "(DecreasesPopulationOfInsects(Insects))", "all x.(Insects(x) -> PopulationDecreases(x))", "all x.(Insect(x) -> DecreasedPopulation(x))", "all x.(Insect(x) -> PopulationDecreases(x))"]}
{"id": "entailmentbank_validation_724", "nl": "a hammer often is made of metal.", "fol": "", "prediction": ["all x.(Hammer(x) -> MadeOfMetal(x))", "all x y.((Hammer(x) & Metal(y)) -> MadeOf(x,y))", "all x.(Hammer(x) -> MadeOfMetal(x))", "all x.(Hammer(x) -> MadeOfMetal(x))", "all x y.((Hammer(x) & Metal(y)) -> MadeOf(x,y))", "all x.(Hammer(x) -> (MadeOfMetal(x) & OftenMadeOfMetal(x)))", "all x.(Hammer(x) -> MadeOfMetal(x))", "all x y.((Hammer(x) & Metal(y) & MadeOf(x,y)) -> MadeOf(x,y))", "all x y.((Hammer(x) & Metal(y)) -> MadeOf(x,y))", "all x.(Hammer(x) -> MadeOfMetal(x))", "exists x.(Hammer(x) & OftenMadeOfMetal(x))", "all x y.((Hammer(x) & Metal(y)) -> MadeOf(x,y))", "all x.(Hammer(x) -> MadeOfMetal(x))", "exists x.(Hammer(x) & MadeOfMetal(x))", "exists x.(Hammer(x) & Metal(x))", "exists x.(Hammer(x) & MadeOfMetal(x))"]}
{"id": "entailmentbank_validation_725", "nl": "when a metal rusts, that metal becomes flaky on the surface.", "fol": "", "prediction": ["all x.((Metal(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x y.((Metal(x) & Rusts(x)) -> FlakyOnSurface(y))", "all x.((Metal(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z)) -> Flaky(y))", "all x y.((Metal(x) & Rusts(x)) -> FlakyOnSurface(y))", "all x.(Rots(x) -> FlakyOnSurface(x))", "all x y.((Metal(x) & Rusts(x) & Metal(y)) -> FlakyOnSurface(y))", "all x.((Metal(x) & Ruins(x)) -> FlakyOnSurface(x))", "all x.((Metal(x) & Rusts(x)) -> FlakyOnSurface(x))", "exists x.(Metal(x) & Rusts(x) & FlakyOnSurface(x))", "all x y.((Metal(x) & Rusts(x)) -> FlakyOnSurface(y))", "all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z)) -> Flaky(y))", "all x.(Rots(x) -> FlakyOnSurface(x))", "all x y.((Metal(x) & Rusts(x) & Metal(y)) -> FlakyOnSurface(y))", "all x.((Metal(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x.(Roses(x) -> FlakyOnSurface(x))"]}
{"id": "entailmentbank_validation_726", "nl": "when a hammer rusts, the hammer will becom flaky on the surface.", "fol": "", "prediction": ["all x.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x y.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x y z.((Hammer(x) & Rusts(x) & Surface(y) & Surface(z)) -> Flaky(x,y,z))", "all x.(Rots(x) -> FlakyOnSurface(x))", "all x.(RotsHammer(x) -> FlakyOnSurface(x))", "all x y.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(y))", "all x.((Hammer(x) & Ruins(x)) -> FlakyOnSurface(x))", "all x y.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(x,y))", "all x y z.((Hammer(x) & Rusts(x) & Surface(y) & Surface(z)) -> Flaky(x,y))", "all x.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x y.((Hammer(x) & Ruins(x)) -> FlakyOnSurface(x))", "all x.(Roses(x) -> FlakyOnSurface(x))", "all x.(RustsHammer(x) -> FlakyOnSurface(x))", "all x y.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(y))", "all x.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(x))"]}
{"id": "entailmentbank_validation_727", "nl": "kim's hammer is flaky on the surface.", "fol": "", "prediction": ["all x.(Hammer(x) -> FlakyOnSurface(x))", "all x.(Kim(x) -> FlakyHammer(x))", "all x y.((Hammer(x) & Kim(y)) -> FlakyOnSurface(x,y))", "all x.((Hammer(x) & FlakyOnSurface(x)) -> Kim(x))", "-FlakyOnSurface(kim'sHammer)", "(FlakyOnSurface(kim))", "all x.(Hammer(x) -> FlakyOnSurface(x))", "all x.(KimsHammer(x) -> FlakyOnSurface(x))", "-FlakyOnSurface(kim,hammer)", "all x y.((Hammer(x) & Kim(y)) -> FlakyOnSurface(x,y))", "(FlakyOnSurface(kim,hammer))", "(Flakish(Hammer) & Kims(Hammer))", "all x y.((Hammer(x) & Kim(y)) -> FlakyOnSurface(y))", "exists x.(Hammer(x) & FlakyOnSurface(x))", "exists x.(Hammer(x) & Flaky(x))", "all x y.((Hammer(x) & Kim(y)) -> FlakyOnSurface(x,y))"]}
{"id": "entailmentbank_validation_728", "nl": "the hammer has rusted.", "fol": "", "prediction": ["all x.(Hammer(x) -> Rusted(x))", "all x.(Hammer(x) -> Rusted(x))", "-RostedHammer(hammer)", "all x y.((Hammer(x) & Hammer(y)) -> Rusted(x))", "(Rosted(hammer) -> HasHammer(hammer))", "the HammerHasRusted.", "all x.(Hammer(x) -> Rusted(x))", "-RostedHammer(hammer)", "the HammerHasRusted(hammer,hammer)", "(HammerRosted)", "the Hammer has Rusted.", "all x.(Hammer(x) -> Rusted(x))", "(Rosted(hammer)", "all x.(Hammer(x) -> Rusted(x))", "all x.(Hammer(x) -> Rusted(x))", "all x.(Hammer(x) -> Rusted(x))"]}
{"id": "entailmentbank_validation_729", "nl": "rust forming is a kind of chemical change.", "fol": "", "prediction": ["all x.(RustForming(x) -> ChemicalChange(x))", "all x.(RoseForming(x) -> ChemicalChange(x))", "all x y.((RustForming(x) & ChemicalChange(y)) -> ChemicalChange(x))", "all x y.((RoseForming(x) & ChemicalChange(y)) -> ChemicalChange(x))", "all x.(RustForming(x) -> ChemicalChange(x))", "(ChemicalChange(rust) & Forms(rust))", "all x.(RoseForming(x) -> ChemicalChange(x))", "all x y.((RustForming(x) & ChemicalChange(y)) -> ChemicalChange(x))", "all x y.((RoseForming(x) & ChemicalChange(y)) -> ChemicalChange(x,y))", "all x.(RustForming(x) -> ChemicalChange(x))", "all x.(RoseForming(x) -> ChemicalChange(x))", "all x y.((RustForming(x) & ChemicalChange(y)) -> ChemicalChange(x,y))", "all x.(RustForming(x) -> ChemicalChange(x))", "all x.(RoseForming(x) -> ChemicalChange(x))", "all x.(RustForming(x) -> ChemicalChange(x))", "exists x.(RoseForming(x) & ChemicalChange(x))"]}
{"id": "entailmentbank_validation_730", "nl": "the hammer has undergone a chemical change.", "fol": "", "prediction": ["all x.(Hammer(x) -> ChemicalChange(x))", "all x y.((Hammer(x) & ChemicalChange(y)) -> Undergone(x,y))", "all x.(Hammer(x) -> UndergoneChemicalChange(x))", "(Change(hammer) & ChemicalChange(hammer))", "(ChemicalChange(hammer) & Undergone(hammer))", "all x y.((Hammer(x) & ChemicalChange(y)) -> UndergoneChange(x,y))", "all x.(Hammer(x) -> ChemicalChange(x))", "the Hammer has undergoneChemicalChange(hammer)", "all x.(Hammer(x) -> UndergoneChemicalChange(x))", "all x y.((Hammer(x) & ChemicalChange(y)) -> Undergone(x,y))", "the Hammer has undergone ChemicalChange.", "all x.(Hammer(x) -> ChemicalChange(x))", "all x y.((Hammer(x) & ChemicalChange(y)) -> UndergoneChange(x,y))", "all x.(Hammer(x) -> UndergoneChange(x))", "all x.(Hammer(x) -> ChemicalChange(x))", "exists x.(Hammer(x) & ChemicalChange(x))"]}
{"id": "entailmentbank_validation_731", "nl": "element 3 turns to a greenish color.", "fol": "", "prediction": ["all x.(Element3(x) -> GreenishColor(x))", "(Element3) turnsToGreenishColor(Element3))", "(Element3TurnsToGreenishColor(Element3))", "all x.(Element3(x) -> GreenishColor(x))", "all x y.((Element(x) & Element3(y)) -> GreenishColor(x,y))", "all x.((Element3) & GreenishColor(x)) -> TurnsTo(x,3))", "all x.(Element(x) -> GreenishColor(x))", "all x y.((Element3(x) & GreenishColor(y)) -> TurnsTo(x,y))", "all x y.((Element(x) & Element3) & GreenishColor(y)) -> TurnsTo(x,y))", "element 3 turns to greenishColor.", "all x.(Element3(x) -> GreenishColor(x))", "all x.(Element3(x) -> TurnsToGreenishColor(x))", "(GreenishColor(Element3))", "(Element3) turnsToGreenishColor(Element3))", "all x.((Element3) & GreenishColor(x)) -> TurnsTo(x,3))", "all x.(Element3(x) -> GreenishColor(x))"]}
{"id": "entailmentbank_validation_732", "nl": "an element is a kind of substance.", "fol": "", "prediction": ["all x.(Element(x) -> Substance(x))", "all x.(Element(x) -> Substance(x))", "all x y.((Element(x) & Substance(y)) -> Substance(x))", "all x.(Element(x) -> Substance(x))", "all x.((Element(x) & Substance(x)) -> Substance(x))", "all x y.((Element(x) & Substance(y)) -> SortOf(x,y))", "all x.(Element(x) -> Substance(x))", "all x y.(Element(x) -> Substance(y))", "all x.(Element(x) -> Substance(x))", "all x y.(Element(x) -> Substance(x,y))", "all x.(Element(x) -> Substance(x))", "all x.(Element(x) -> Substance(x))", "exists x.(Element(x) & KindOfSubstance(x))", "exists x.(Element(x) & Material(x))", "exists x.(Element(x) & Substance(x))", "exists x.(Element(x) & Substance(x))"]}
{"id": "entailmentbank_validation_733", "nl": "element 3 turning green is an example of a substance turning green.", "fol": "", "prediction": ["all x.((Element3 & TurningGreen(x)) -> TurningGreen(x))", "all x.((Element3(x) & TurningGreen(x)) -> TurningGreen(x))", "all x.(TurningGreen(x) -> Substance(x))", "(ExampleOfSubstance(element3):TurningGreen(element3))", "all x y.((Element(x) & Element(y) & TurningGreen(x,y)) -> TurningGreen(x))", "all x.(TurningGreen(x) -> SubstanceTurningGreen(x))", "all x y.((Element3(x) & Substance(y)) -> TurnsGreen(x,y))", "all x.((Element3) & TurningGreen(x)) -> TurningGreen(x))", "all x.((Substance(x) & Element3TurningGreen(x)) -> TurningGreen(x))", "(ExampleOfSubstance(Element3):TurningGreen(Element3))", "all x.((Element3(x) & TurnsGreen(x)) -> TurnsGreen(x))", "all x y.((Element(x) & Element3(y) & TurningGreen(x,y)) -> TurningGreen(x))", "(ExampleOfSubstance(element3):TurningGreen(element3))", "all x.(TurningGreen(x) -> SubstanceTurningGreen(x))", "all x y.((Element3(x) & Substance(y)) -> TurningGreen(x,y))", "all x.(TurningGreen(x) -> SubstanceTogether(x))"]}
{"id": "entailmentbank_validation_734", "nl": "if the color of a substance changes then a chemical change may have occurred.", "fol": "", "prediction": ["all x.((Substance(x) & ColorChange(x)) -> ChemicalChangeOccurred(x))", "all x y.((Substance(x) & ColorChange(x) & ChemicalChange(y)) -> MayOccurred(x,y))", "all x y.((Substance(x) & ColorChange(x,y)) -> ChemicalChangeOccurred(x))", "all x.((Substance(x) & ColorChange(x)) -> ChemicalChangeOccurred(x))", "all x.(ChangeColor(x) -> ChemicalChangeOccurred(x))", "all x y z.((Substance(x) & ColorChange(x,y) & Substance(z) & Change(x,z)) -> ChemicalChangeOccurred(x))", "all x y.((Substance(x) & ColorChange(x) & ChemicalChange(y)) -> MayOccurred(x,y))", "all x.((Substance(x) & ColorChange(x)) -> ChemicalChangeOccurs(x))", "all x.(ChangeInColorOfSubstance(x) -> ChemicalChangeOccurred(x))", "all x y.((Substance(x) & ColorChange(x,y)) -> ChemicalChangeOccurs(x))", "exists x.(ChangeOfColor(x) & Substance(x) & ChangeOfColor(x))", "all x y.((Substance(x) & ColorChange(x)) -> ChemicalChangeOccurred(y))", "all x.((Substance(x) & ColorChange(x)) -> ChemicalChange(x))", "exists x.(ChemicalChange(x) -> ColorChange(x))", "exists x.(ChangeOfColor(x) & Substance(x) & ChangeOfColor(x))", "all x y.((Substance(x) & ColorChange(y)) -> ChemicalChangeOccurs(x,y))"]}
{"id": "entailmentbank_validation_735", "nl": "a chemical change may occur to element 3.", "fol": "", "prediction": ["all x y.((Element(x) & ChemicalChange(y)) -> MayOccur(x,y))", "all x.(ChemicalChange(x) -> MayOccurToElement3(x))", "all x y z.((Element(x) & ChemicalChange(y) & Element3(z)) -> MayOccur(x,y,z))", "all x y.((Element3(x) & ChemicalChange(y)) -> MayOccur(x,y))", "all x.((Element3(x) & ChemicalChange(x)) -> MayOccur(x))", "exists x,y,z.(ChemicalChange(x) & Element3(y) & Element3(z) & MayOccur(x,y))", "all x.(ChangeChemical(x) -> MayOccurToElement3(x))", "all x y.((ChemicalChange(x) & Element3(y)) -> MayOccur(x,y))", "all x y z.((Element(x) & ChemicalChange(y) & Element3(z)) -> ChemicalChangeOccurred(x,y,z))", "all x y.((Element3(x) & ChemicalChange(y)) -> MayOccur(x,y))", "exists x.(ChemicalChange(x) & Element3(x))", "exists x.(Change(x) & ChemicalChange(x) & Element3(x))", "all x y.((Element3) & ChemicalChange(x) & Element3(y)) -> MayOccur(x,y))", "all x y z.((ChemicalChange(x) & Element(y) & Element(z)) -> MayOccur(x,y,z))", "exists x.(ChemicalChange(x) & Element3(x))", "exists x.(ChemicalChange(x) & Element3(x))"]}
{"id": "entailmentbank_validation_736", "nl": "fire is a kind of chemical reaction.", "fol": "", "prediction": ["all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x y.((Fire(x) & ChemicalReaction(y)) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "(all x.(Fire(x) -> ChemicalReaction(x)))", "all x y.((Fire(x) & ChemicalReaction(y)) -> Chemical(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x y.((Fire(x) & ChemicalReaction(y)) -> ChemicalReaction(x,y))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x y.((Fire(x) & ChemicalReaction(y)) -> Chemical(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(FIRE(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "exists x.(Fire(x) & ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_737", "nl": "fire causes burning.", "fol": "", "prediction": ["all x.(Fire(x) -> CausesBurning(x))", "all x y.((Fire(x) & Burning(y)) -> Causes(x,y))", "all x.(Fire(x) -> CausesBurning(x))", "(CausesBurning(Fire))", "(CausesBurning(fire) & Fire(fire))", "all x y.((Fire(x) & Burning(y)) -> Causes(x,y))", "all x.(Fire(x) -> CausesBurning(x))", "all x.(Fire(x) -> CausesBurning(x))", "all x y.((Fire(x) & Burning(y)) -> Causes(x,y))", "all x.(Fire(x) -> CausesBurning(x))", "all x y.((Fire(x) & Burning(y)) -> Causes(x,y))", "all x.(Fire(x) -> CausesFire(x))", "all x.(Fire(x) -> CausesBurning(x))", "all x y.((Fire(x) & Burning(y)) -> Causes(x,y))", "exists x.(Fire(x) & Burning(x))", "all x.(Fire(x) -> CausesBurning(x))"]}
{"id": "entailmentbank_validation_738", "nl": "burning something with fire is a kind of chemical reaction.", "fol": "", "prediction": ["all x.((Burning(x) & Fire(x)) -> ChemicalReaction(x))", "all x y.((Burning(x) & Fire(y)) -> ChemicalReaction(x))", "all x.((BurningWithFire(x) & ChemicalReaction(x)) -> ChemicalReaction(x))", "all x y.((Burning(x) & Fire(y)) -> ChemicalReaction(x))", "all x y.((BurningWithFire(x) & Something(y)) -> ChemicalReaction(x))", "all x.(BurningWithFire(x) -> ChemicalReaction(x))", "all x.((Burning(x) & Fire(x)) -> ChemicalReaction(x))", "all x y z.((Burning(x) & Fire(y) & Something(z)) -> ChemicalReaction(x))", "all x y.((BurningWithFire(x) & Something(y)) -> ChemicalReaction(x))", "all x y.((Burning(x,y) & Fire(y)) -> ChemicalReaction(x))", "(all x.(BoilingWithFire(x) -> ChemicalReaction(x)))", "all x.((BurningWithFire(x) & ChemicalReaction(x)) -> ChemicalReaction(x))", "all x y.((BurningWithFire(x) & SomethingWithFire(y)) -> ChemicalReaction(x))", "all x.(BurningWithFire(x) -> ChemicalReaction(x))", "all x.((Burning(x) & WithFire(x)) -> ChemicalReaction(x))", "all x.(BurningWithFire(x) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_739", "nl": "a lit candle is a source of fire.", "fol": "", "prediction": ["all x.(LitCandle(x) -> SourceOfFire(x))", "all x.((Candle(x) & Lit(x)) -> SourceOfFire(x))", "all x.((LitCandle(x) & SourceOfFire(x)) -> SourceOfFire(x))", "all x y.((LitCandle(x) & Candle(y)) -> SourceOfFire(x))", "all x.(LitCandle(x) -> SourceOfFire(x))", "exists x.(Candle(x) & Lit(x) & SourceOfFire(x))", "all x y.((LitCandle(x) & Candle(y)) -> SourceOfFire(x,y))", "all x y.((Candle(x) & Lit(x)) -> SourceOfFire(x))", "all x.((Candle(x) & Lit(x)) -> SourceOfFire(x))", "all x.(LitCandle(x) -> SourceOfFire(x))", "all x y.((LitCandle(x) & Candle(y) & SourceOfFire(x)) -> SourceOfFire(x))", "exists x.(Candle(x) & Lit(x) & SourceOfFire(x))", "exists x.(Candle(x) & Lit(x)) -> SourceOfFire(x))", "all x y.((Candle(x) & Lit(x)) -> SourceOfFire(y))", "all x.(LitCandle(x) -> SourceOfFire(x))", "all x.(LitCandle(x) -> SourceOfFire(x))"]}
{"id": "entailmentbank_validation_740", "nl": "burning something with a lit candle is a kind of chemical reaction.", "fol": "", "prediction": ["all x.((Burning(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x y.((Burning(x) & LitCandle(y)) -> ChemicalReaction(x))", "all x.((BurningWithLitCandle(x) & Something(x)) -> ChemicalReaction(x))", "all x.((Burning(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x y z.((Burning(x,y) & LitCandle(y) & Something(z) & LitCandle(y)) -> ChemicalReaction(x))", "all x y.((Burning(x,y) & LitCandle(y)) -> ChemicalReaction(x))", "all x y.((Burning(x) & LitCandle(y)) -> ChemicalReaction(x))", "all x y z.((Burning(x) & LitCandle(y) & Something(z) & LitCandle(z)) -> ChemicalReaction(x))", "all x.((BurningWithLitCandle(x) & SomethingWithLitCandle(x)) -> ChemicalReaction(x))", "all x y.((Burning(x) & LitCandle(y) & With(x,y)) -> ChemicalReaction(x))", "all x.(BurningWithLitCandle(x) -> ChemicalReaction(x))", "all x y.((BurningWithLitCandle(x) & Something(y)) -> ChemicalReaction(x))", "exists x.(Candle(x) & Burning(x) & WithLitCandle(x))", "all x.((Burning(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x.((Burns(x) & LightedCandle(x)) -> ChemicalReaction(x))", "all x.((BurningWithLitCandle(x) & Something(x)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_741", "nl": "magnesium is a kind of substance.", "fol": "", "prediction": ["all x.(Magnesium(x) -> Substance(x))", "all x.(Magnesium(x) -> Substance(x))", "all x y.((Magnesium(x) & Substance(y)) -> Contains(x,y))", "(exists x.(Magnesium(x) & Substance(x)))", "all x.(Magnesium(x) -> Substance(x))", "All x y.((Magnesium(x) & Substance(y)) -> Is(x,y))", "all x.(Magnesium(x) -> Substance(x))", "all x.(Melium(x) -> Substance(x))", "all x y.((Magnesium(x) & Substance(y)) -> Contains(x,y))", "all x.(Magnesium(x) -> SpeciesOfSubstance(x))", "all x.(Magnesium(x) -> Substance(x))", "exists x.(Melium(x) & Substance(x))", "all x.(Magnesium(x) -> Substance(x))", "all x.(Magnetic(x) -> Substance(x))", "All x.(Magnetic(x) -> Substance(x))", "exists x.(Magnesium(x) & Substance(x))"]}
{"id": "entailmentbank_validation_742", "nl": "burning magnesium with a lit candle is a kind of chemical reaction.", "fol": "", "prediction": ["all x.((BurningMagnesium(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x y.((BurningMagnesium(x) & LitCandle(y)) -> ChemicalReaction(x))", "all x.((BurningMagnesiumWithLitCandle(x)) -> ChemicalReaction(x))", "all x y z.((BurningMagnesium(x) & LitCandle(y) & Candle(z) & LitCandle(z)) -> ChemicalReaction(x))", "all x y.((BurningMagnesium(x) & LitCandle(y)) -> ChemicalReaction(x))", "all x y.((Burning(x,y) & LitCandle(y)) -> ChemicalReaction(x))", "all x.((BurningMagnesiumWithLitCandle(x) & HasChemicalReaction(x)) -> ChemicalReaction(x))", "all x.((BurningMagnesium(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x y.((BurningMagnesiumWithLitCandle(x) & Candle(y)) -> ChemicalReaction(x))", "all x.(BurningMagnesiumWithLitCandle(x) -> ChemicalReaction(x))", "all x y.((Burning(x,y) & LitCandle(x)) -> ChemicalReaction(x))", "all x.((BurnsMagnesium(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x.((BoilingMagnesiumWithLitCandle(x)) -> ChemicalReaction(x))", "all x y.((BurnsMagnesium(x) & LitCandle(y)) -> ChemicalReaction(x,y))", "all x.((Boiling(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x.((BurnsMagnesium(x) & LitCandle(x)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_743", "nl": "chemical reactions cause chemical change.", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> CausesChemicalChange(x))", "all x y.((ChemicalReaction(x) & ChemicalChange(y)) -> Causes(x,y))", "all x.(ChemicalReaction(x) -> CausesChemicalChange(x))", "(ChemicalReactionsCauseChemicalChange(ChemicalReactions)", "all x y z.((ChemicalReaction(x) & ChemicalChange(y) & ChemicalReaction(z)) -> Causes(x,y,z))", "all x y.((ChemicalReaction(x) & ChemicalChange(y)) -> Causes(x,y))", "all x.(ChemicalReaction(x) -> CausesChemicalChange(x))", "all x.(ChemicalReaction(x) -> CausesChange(x))", "all x y.((ChemicalReaction(x) & ChemicalChange(y)) -> Causes(x,y))", "all x y.((ChemicalReaction(x) & ChemicalChange(y)) -> Causes(x,y))", "all x.(ChemicalReaction(x) -> CausesChemicalChange(x))", "all x.(ChemicalReaction(x) -> ChemicalChange(x))", "all x y.((ChemicalReaction(x) & ChemicalChange(y)) -> Causes(x,y))", "all x.(ChemicalReaction(x) -> CausesChange(x))", "all x.(ChemicalReaction(x) -> ChemicalChange(x))", "exists x.(ChemicalReaction(x) & ChemicalChange(x))"]}
{"id": "entailmentbank_validation_744", "nl": "burning magnesium with fire will lead to a chemical change.", "fol": "", "prediction": ["all x.((BurningMagnesiumWithFire(x) & ChemicalChange(x)) -> LeadsTo(x,y))", "all x y.((BurningMagnesiumWithFire(x) & ChemicalChange(y)) -> LeadsTo(x,y))", "all x y z.((BurningMagnesium(x) & Fire(y) & ChemicalChange(z)) -> LeadsTo(x,y,z))", "all x.((BurningMagnesiumWithFire(x) & ChemicalChange(x)) -> LeadsTo(x,y))", "all x y.((BurningMagnesiumWithFire(x) & ChemicalChange(y)) -> LeadsTo(x,y))", "all x y.((BurningMagnesium(x) & Fire(y)) -> ChemicalChange(x))", "all x.((BoilingMagnesium(x) & Fire(x)) -> ChemicalChange(x))", "all x.((BurningMagnesiumWithFire(x) & ChemicalChange(x)) -> LeadsTo(x,Magnesium,Fire))", "all x.(BurningMagnesiumWithFire(x) -> ChemicalChange(x))", "all x y.((BoilingMagnesium(x) & Fire(y)) -> ChemicalChange(x,y))", "all x y.((BurningMagnesiumWithFire(x) & ChemicalChange(y)) -> LeadsTo(x,y))", "all x.((BoilingMagnesium(x) & Fire(x)) -> ChemicalChange(x))", "all x y.((Burning(x,y) & Fire(y)) -> ChemicalChange(x))", "all x.((BurningMagnesiumWithFire(x) & ChemicalChange(x)) -> LeadsTo(x,y))", "all x.((BurningMagnesiumWithFire(x) & LeadsToChemicalChange(x)) -> ChemicalChange(x))", "All x.(BurningMagnesiumWithFire(x) -> ChemicalChange(x))"]}
{"id": "entailmentbank_validation_745", "nl": "chemical reactions cause new materials to form.", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> CausesNewMaterials(x))", "all x y.((ChemicalReaction(x) & Material(y)) -> CausesFormation(x,y))", "all x y z.((ChemicalReaction(x) & Material(y) & Material(z)) -> CausesToForm(x,y,z))", "all x.(ChemicalReaction(x) -> CausesNewMaterials(x))", "all x y.((ChemicalReaction(x) & Material(y)) -> CausesToForm(x,y))", "all x y z.((ChemicalReaction(x) & Material(y) & Material(z)) -> CausesFormation(x,y,z))", "all x y.((ChemicalReaction(x) & Material(y)) -> CausesFormation(x,y))", "all x.(ChemicalReaction(x) -> CausesNewMaterials(x))", "all x.(ChemicalReaction(x) -> CausesNewMaterials(x))", "all x y.((ChemicalReaction(x) & Material(y)) -> CausesToForm(x,y))", "all x.(ChemicalReaction(x) -> CausesNewMaterialsToForm(x))", "all x.(ChemicalReaction(x) -> NewMaterialsForm(x))", "all x.(ChemicalReactions(x) -> CausesNewMaterials(x))", "all x.(ChemicalReaction(x) -> CausesNewMaterials(x))", "all x y.((ChemicalReaction(x) & Material(y)) -> CausesFormation(x,y))", "exists x.(ChemicalReaction(x) & CausesMaterialFormation(x))"]}
{"id": "entailmentbank_validation_746", "nl": "chemical change is a kind of chemical reaction.", "fol": "", "prediction": ["all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x y.((ChemicalChange(x) & ChemicalReaction(y)) -> ChemicalChange(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x.(Change(x) -> ChemicalReaction(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x y.((ChemicalChange(x) & ChemicalReaction(y)) -> ChemicalChange(x))", "all x y.((ChemicalChange(x) & ChemicalReaction(y)) -> ChemicalChange(x,y))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x.(Change(x) -> ChemicalReaction(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x y.((ChemicalChange(x) & ChemicalReaction(y)) -> Chemical(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x y.((ChemicalChange(x) & ChemicalReaction(y)) -> ChemicalChange(x))", "exists x.(ChemicalChange(x) & ChemicalReaction(x))", "exists x.(ChemicalChange(x) & ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_747", "nl": "chemical changes cause new materials to form.", "fol": "", "prediction": ["all x.(ChemicalChange(x) -> CausesNewMaterials(x))", "all x y.((ChemicalChange(x) & Material(y)) -> CausesFormation(x,y))", "all x y z.((ChemicalChange(x) & Material(y) & Material(z)) -> CausesFormation(x,y,z))", "all x.(ChemicalChange(x) -> CausesNewMaterials(x))", "(ChemicalChangesCausesNewMaterials(ChemicalChanges))", "all x y.((ChemicalChange(x) & Material(y)) -> CausesFormation(x,y))", "all x.(ChemicalChange(x) -> CausesNewMaterialsToForm(x))", "all x.(ChemisticalChange(x) -> CausesNewMaterials(x))", "all x y z.((ChemicalChange(x) & Material(y) & Material(z)) -> CausesToForm(x,y,z))", "all x y.((ChemicalChange(x) & Material(y)) -> CausesFormation(x,y))", "all x.(ChemicalChange(x) -> NewMaterialsForm(x))", "all x y.((ChemicalChange(x) & Material(y)) -> CausesToForm(x,y))", "all x.(ChemisticalChange(x) -> CausesNewMaterials(x))", "all x.(ChemicalChange(x) -> CausesNewMaterialsToForm(x))", "all x y.((ChemicalChange(x) & Material(y)) -> CausesFormation(x,y))", "all x.(ChemicalChange(x) -> NewMaterialsForm(x))"]}
{"id": "entailmentbank_validation_748", "nl": "an example of a chemical property is the elements making up a compound.", "fol": "", "prediction": ["all x.(ChemicalProperty(x) -> (ElementsMakingUpCompound(x)))", "all x.((Elements(x) & Compound(x)) -> ChemicalProperty(x))", "all x y.((ChemicalProperty(x) & Compound(y)) -> ElementsMakingUp(x,y))", "all x.((ElementsMakingUpCompound(x)) -> ChemicalProperty(x))", "all x y z.((ChemicalProperty(x) & Compound(y) & Elements(z)) -> MakesUp(x,y,z))", "all x.(ChemicalProperty(x) -> Compound(x))", "all x.((ChemicalProperty(x) & Compound(x)) -> ElementsMakingUp(x))", "all x y.((ChemicalProperty(x) & Compound(y)) -> ElementsMakingUp(x,y))", "all x y.((ChemicalProperty(x) & Compound(y)) -> ElementsMakingUp(x,y))", "all x y z.((ChemicalProperty(x) & Compound(y) & Elements(z)) -> MakesUp(x,y,z))", "all x.(ChemicalProperty(x) -> Compound(x))", "all x.(ChemicalProperty(x) -> ElementsMakingUpCompound(x))", "all x y.((ChemicalProperty(x) & Compound(y)) -> ElementsMakingUp(x,y))", "all x y.((ChemicalProperty(x) & Compound(y)) -> ElementsMakingUp(x,y))", "exists x.(ChemicalProperty(x) & Compound(x))", "exists x.(ChemistryProperty(x) & Compound(x))"]}
{"id": "entailmentbank_validation_749", "nl": "water is a kind of compound.", "fol": "", "prediction": ["all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "all x y.((Water(x) & Compound(y)) -> Compound(x))", "(Compound(water))", "all x.(Water(x) -> Compound(x))", "all x y.((Water(x) & Compound(y)) -> Compound(x,y))", "all x.((Water(x) & Compound(x)) -> Compound(x))", "(Compound(water))", "all x.(Water(x) -> Compound(x))", "all x y.((Water(x) & Compound(y)) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "exists x.(Water(x) & Compound(x))"]}
{"id": "entailmentbank_validation_750", "nl": "an example of chemical property is the elements making up water.", "fol": "", "prediction": ["all x.(ChemicalProperty(x) -> ElementsMakingUpWater(x))", "all x.((Elements(x) & Water(x)) -> ChemicalProperty(x))", "all x y.((Element(x) & Water(y)) -> ChemicalProperty(x,y))", "all x.(ChemicalProperty(x) -> ElementsMakingUpWater(x))", "(ChemicalProperty(elements) & MakesUpWater(elements))", "all x y.((Elements(x) & Water(y)) -> ChemicalProperty(x,y))", "all x.((Elements(x) & Water(x)) -> ChemicalProperty(x))", "all x.((Elements(x) & MakeUpWater(x)) -> ChemicalProperty(x))", "all x.(ChemicalProperty(x) -> ElementsMakingUpWater(x))", "all x y.((Element(x) & Water(y)) -> ChemicalProperty(x,y))", "exists x.(Elements(x) & MakesUpWater(x))", "all x.(ChemicalProperty(x) -> ElementsMakingUpWater(x))", "all x y.((Elements(x) & Water(y)) -> ChemicalProperty(x,y))", "all x.((Elements(x) & Water(x)) -> ChemicalProperty(x))", "exists x.(Elements(x) & MakesUpWater(x))", "exists x.(Elements(x) & MakesUpWater(x))"]}
{"id": "entailmentbank_validation_751", "nl": "a chemical property of water is that it is made of hydrogen and oxygen.", "fol": "", "prediction": ["all x.((Water(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> ChemicalProperty(x))", "all x.(ChemicalPropertyOfWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.((ChemicalProperty(x) & Water(x)) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.((Water(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> ChemicalProperty(x))", "all x y.((Water(x) & ChemicalProperty(x) & MadeOf(x,Hydrogen) & MadeOf(x,Oxygen)) -> ChemicalProperty(x))", "all x.(ChemicalPropertyOfWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x y.((ChemicalPropertyOfWater(x) & Hydrogen(y) & Oxygen(y)) -> MadeOf(x,y))", "all x y.((Water(x) & ChemicalProperty(x) & MadeOf(x,Hydrogen,Oxygen)) -> MadeOf(x,Hydrogen,Oxygen))", "exists x.(WaterProperty(x) & MadeOfHydrogen(x) & MadeOfOxygen(x))", "all x y.((ChemicalProperty(x) & Water(y)) -> (MadeOfHydrogen(y) & MadeOfOxygen(y)))", "all x.((Water(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> ChemicalProperty(x))", "all x.(ChemicalPropertyOfWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x y.((Water(x) & Hydrogen(y) & Oxygen(y)) -> MadeOf(x,y))", "exists x.(WaterProperty(x) & MadeOfHydrogen(x) & MadeOfOxygen(x))"]}
{"id": "entailmentbank_validation_752", "nl": "a compound can be chemically separated into the elements that it is made of.", "fol": "", "prediction": ["all x.(Compound(x) -> CanBeChemicallySeparatedIntoElements(x))", "all x y.((Compound(x) & Element(y)) -> CanBeChemicallySeparated(x,y))", "all x.(Compound(x) -> ChemicallySeparatedIntoElements(x))", "all x y z.((Compound(x) & Element(y) & Element(z)) -> CanBeChemicallySeparated(x,y,z))", "all x y.((Compound(x) & Element(y)) -> ChemicallySeparated(x,y))", "all x.(Compound(x) -> CanBeChemicallySeparated(x))", "all x y.(Compound(x) & Compound(y) & ChemicallySeparatedIntoElements(x,y))", "all x y z.((Compound(x) & Element(y) & Element(z)) -> ChemicallySeparated(x,y,z))", "all x y.((Compound(x) & Element(y)) -> CanBeChemicallySeparated(x,y))", "all x.(Compound(x) -> ChemicallySeparatedIntoElements(x))", "all x y.((Compound(x) & Compound(y)) -> ChemicallySeparatedIntoElements(x,y))", "all x.(Compound(x) -> CanBeChemicallySeparatedIntoElements(x))", "all x.(Compound(x) -> ChemicallySeparatedIntoElements(x))", "exists x.(Compound(x) & ChemicallySeparated(x))", "exists x.(Compound(x) & ChemicallySeparated(x))", "exists x.(Compound(x) & ChemicallySeparated(x))"]}
{"id": "entailmentbank_validation_753", "nl": "water can be separated into hydrogen and oxygen.", "fol": "", "prediction": ["all x.(Water(x) -> (SeparatedIntoHydrogen(x) & SeparatedIntoOxygen(x)))", "all x.(Water(x) -> (SeparatedInto(x,hydrogen) & SeparatedInto(x,oxygen)))", "all x y.((Water(x) & Hydrogen(y)) -> SeparatedInto(x,y))", "(SeparatedIntoHydrogen(water) & SeparatedIntoOxygen(water))", "all x.(Water(x) -> (SeparatedIntoHydrogen(x) | SeparatedIntoOxygen(x)))", "(Separate(water,hydrogen) & Separate(water,oxygen))", "all x.(Water(x) -> (Separate(x,hydrogen) & Separate(x,oxygen)))", "all x y z.((Water(x) & Hydrogen(y) & Oxygen(z)) -> SeparatedInto(x,y,z))", "(SeparatedIntoHydrogen(water) & SeparatedIntoOxygen(water))", "all x y.((Water(x) & Hydrogen(y)) -> SeparatedInto(x,y))", "all x.(Water(x) -> (SeparatedInto(x,Hydrogen) & SeparatedInto(x,Oxygen)))", "all x y.((Water(x) & Hydrogen(y) & Oxygen(y)) -> SeparatedInto(x,y))", "all x.(Water(x) -> (Hydrogen(x) | Oxygen(x)))", "exists x.(Water(x) & SeparatedInto(x,hydrogen,oxygen))", "exists x.(Water(x) & SeparatedInto(x,Hydrogen,Oxygen))", "all x y.((Water(x) & Hydrogen(y)) -> SeparatedInto(x,y))"]}
{"id": "entailmentbank_validation_754", "nl": "carbon dioxide is a new substance produced by sodium bicarbonate.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> (NewSubstance(x) & ProducedBySodiumBicarbonate(x)))", "(NewSubstanceProducedBySodiumBicarbonate(carbonDioxide))", "all x.(CarbonDioxide(x) -> (NewSubstance(x) & ProducedBySodiumBicarbonate(x)))", "all x.(CarbonDioxide(x) -> ProducedBySodiumBicarbonate(x))", "all x y.((CarbonDioxide(x) & NaSaltBicarbonate(y)) -> NewSubstance(x,y))", "all x.(CarbonDioxide(x) -> (NaturalSubstance(x) & ProducedBySodiumBicarbonate(x)))", "all x.((CarbonDioxide(x) & ProducedBySodiumBicarbonate(x)) -> NewSubstance(x))", "all x y.((CarbonDioxide(x) & Substance(y)) -> ProducedBySodiumBicarbonate(x,y))", "(NatalBicarbonate(carbonDioxide) -> NewSubstance(carbonDioxide))", "(NewSubstanceProducedBySodiumBicarbonate(carbonDioxide))", "all x y.((CarbonDioxide(x) & NaOHi(y)) -> ProducedBySodiumBicarbonate(x,y))", "all x.(CarbonDioxide(x) -> (NewSubstance(x) & ProducedBySodiumBicarbonate(x)))", "all x.(CarbonDioxide(x) -> ProducedBySodiumBicarbonate(x))", "(NewSubstanceProducedBySodiumBicarbonate(CO2))", "all x y.((CarbonDioxide(x) & Substance(y)) -> ProducedBySodiumBicarbonate(x,y))", "all x.(CarbonDioxide(x) -> (ProducedBySodiumBicarbonate(x) & NewSubstance(x)))"]}
{"id": "entailmentbank_validation_755", "nl": "chemical reactions cause new substances to form.", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> CausesNewSubstances(x))", "all x y.((ChemicalReaction(x) & Substance(y)) -> CausesFormation(x,y))", "all x y z.((ChemicalReaction(x) & Substance(y) & Substance(z)) -> CausesFormation(x,y,z))", "all x.(ChemicalReaction(x) -> CausesNewSubstances(x))", "all x y.((ChemicalReaction(x) & Substance(y)) -> CausesFormation(x,y))", "all x y z.((ChemicalReaction(x) & Substance(y) & ChemicalReaction(z)) -> CausesFormation(x,y,z))", "all x y.((ChemicalReaction(x) & Substance(y)) -> CausesToForm(x,y))", "all x.(ChemicalReaction(x) -> CausesNewSubstances(x))", "all x y.((ChemicalReaction(x) & Substance(y) & Causes(x,y)) -> Forms(x,y))", "all x.((ChemicalReaction(x) & ChemicalReaction(x)) -> CausesNewSubstances(x))", "all x.(ChemicalReactions(x) -> CausesNewSubstances(x))", "all x.(ChemicalReaction(x) -> CausesNewSubstances(x))", "all x y.((ChemicalReaction(x) & Substance(y) & Causes(x,y)) -> Forms(x,y))", "all x.(ChemicalReaction(x) -> CausesNewSubstances(x))", "all x.(ChemicalReaction(x) -> NewSubstancesForm(x))", "exists x.(ChemicalReaction(x) & CausesSubstanceFormation(x))"]}
{"id": "entailmentbank_validation_756", "nl": "sodium bicarbonate releasing carbon dioxide is a chemical reaction.", "fol": "", "prediction": ["all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x y.((SodiumBicarbonate(x) & CarbonDioxide(y)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "(ReleasesCarbonDioxide(SodiumBicarbonate) -> ChemicalReaction(SodiumBicarbonate))", "all x.(SodiumBicarbonateReleasesCarbonDioxide(x) -> ChemicalReaction(x))", "all x y.((SodiumBicarbonate(x) & CarbonDioxide(y) & Releases(x,y)) -> ChemicalReaction(x))", "all x.((SaltSyntheticBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & CarbonDioxide(x)) -> ChemicalReaction(x))", "all x y.((SodiumBicarbonate(x) & CarbonDioxide(y)) -> ChemicalReaction(x,y))", "all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x y.((SodiumBicarbonate(x) & CarbonDioxide(y) & Releases(x,y)) -> ChemicalReaction(x))", "all x.(SodiumBicarbonate(x) -> ReleasesCarbonDioxide(x))", "all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x y.((SodiumBicarbonate(x) & CarbonDioxide(y) & Releases(x,y)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_757", "nl": "an example of a chemical property is how a material reacts chemically.", "fol": "", "prediction": ["all x.((Material(x) & ReactsChemically(x)) -> ChemicalProperty(x))", "all x.(ChemicalProperty(x) -> (ReactsChemically(x) & Material(x)))", "all x y.((Material(x) & Material(y)) -> ReactsChemically(x,y))", "all x y.((Material(x) & Material(y) & ReactsChemically(x,y)) -> ChemicalProperty(x))", "all x.(ChemicalProperty(x) -> ReactsChemically(x))", "all x.((Material(x) & ReactsChemically(x)) -> ChemicalProperty(x))", "all x y z.((Material(x) & ChemicalProperty(y) & Material(z) & ReactsChemically(z)) -> ChemicalProperty(x,y,z))", "all x y.((Material(x) & ChemicalProperty(x)) -> ReactsChemically(x,y))", "all x.(ChemicalProperty(x) -> ReactsChemically(x))", "all x.((Material(x) & ReactsChemically(x)) -> ChemicalProperty(x))", "all x y.((Material(x) & Material(y) & ReactsChemically(x,y)) -> ChemicalProperty(x))", "all x.((Material(x) & ChemicalProperty(x)) -> ReactsChemically(x))", "exists x.(ChemicalProperty(x) & Material(x) & ReactsChemically(x))", "all x y.((Material(x) & ChemicalProperty(y)) -> ReactsChemically(x,y))", "exists x.(ChemicalProperty(x) & Material(x) & ReactsChemically(x))", "exists x.(ChemicalProperty(x) & HowMaterialReactsChemically(x))"]}
{"id": "entailmentbank_validation_758", "nl": "releasing carbon dioxide is a kind of chemical property of sodium bicarbonate.", "fol": "", "prediction": ["all x.((ReleasesCarbonDioxide(x) & SodiumBicarbonate(x)) -> ChemicalProperty(x))", "all x.(ReleasesCarbonDioxide(x) -> ChemicalPropertyOfSodiumBicarbonate(x))", "all x y.((ReleasesCarbonDioxide(x) & NaSaltBicarbonate(y)) -> ChemicalProperty(x,y))", "(ReleasesCarbonDioxide(x) -> ChemicalPropertyOfSodiumBicarbonate(x))", "all x y.((ReleasingCarbonDioxide(x) & NaSaltBicarbonate(y)) -> ChemicalProperty(x,y))", "all x.((ReleasesCarbonDioxide(x) & NatriumBicarbonate(x)) -> ChemicalProperty(x))", "all x.(ReleasesCarbonDioxide(x) -> ChemicalPropertyOfSodiumBicarbonate(x))", "all x y z.((ReleasingCarbonDioxide(x) & NaSaltBicarbonate(y) & NaSaltBicarbonate(z)) -> ChemicalProperty(x,y,z))", "all x y.((CarbonDioxide(x) & NaSulfate(y)) -> ChemicalProperty(x,y))", "all x.((ReleasesCarbonDioxide(x) & NaSalineBicarbonate(x)) -> ChemicalProperty(x))", "all x y.((ReleasesCarbonDioxide(x) & NatriumBicarbonate(y)) -> ChemicalProperty(x,y))", "all x.((ReleasingCarbonDioxide(x) & NaSalineBicarbonate(x)) -> ChemicalProperty(x))", "all x y.((Property(x) & CarbonDioxide(y) & Releases(x,y)) -> NatalBicarbonate(x))", "all x.(ReleasingCarbonDioxide(x) -> ChemicalPropertyOfSodiumBicarbonate(x))", "all x.(ReleasesCarbonDioxide(x) -> ChemicalPropertyOfSodiumBicarbonate(x))", "all x.((ReleasesCarbonDioxide(x) & NatriumBicarbonate(x)) -> ChemicalProperty(x))"]}
{"id": "entailmentbank_validation_759", "nl": "a pencil is a kind of object.", "fol": "", "prediction": ["all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "all x y.((Pencil(x) & Pencil(y)) -> Object(x))", "all x y.((Pencil(x) & Object(y)) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "all x y.((Pencil(x) & Pencil(y)) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "all x y.((Pencil(x) & Object(y)) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> ArtOfObject(x))", "all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "exists x.(Pencil(x) & ArtOfObject(x))", "exists x.(Pencil(x) & Object(x))", "exists x.(Pencil(x) & KindOfObject(x))", "exists x.(Pencil(x) & TypeOfObject(x))"]}
{"id": "entailmentbank_validation_760", "nl": "sharpening a pencil changes the shape of the pencil.", "fol": "", "prediction": ["all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShape(x,y))", "all x.(SharpeningPencil(x) -> ChangesShapeOfPencil(x))", "all x y z.((Pencil(x) & Sharpening(x,y) & Pencil(z)) -> ChangesShape(x,z))", "all x.((Pencil(x) & Sharpening(x)) -> ChangesShapeOfPencil(x))", "all x y.((Pencil(x) & Sharpening(x)) -> ChangesShape(x,y))", "all x y z.((Pencil(x) & Sharpening(x,y) & Pencil(y) & Shape(z)) -> Changes(x,y,z))", "all x.(SharpeningPencil(x) -> ChangesShapeOfPencil(x))", "all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShape(x,y))", "all x.((Pencil(x) & Sharpens(x)) -> ChangesShapeOfPencil(x))", "all x y z.((Pencil(x) & Sharpening(x,y) & Pencil(z)) -> ChangesShape(x,z))", "all x y.((Pencil(x) & Sharpening(x)) -> ChangesShape(y))", "all x.(SharpeningPencil(x) -> ChangesShapeOfPencil(x))", "all x.((Pencil(x) & Sharpening(x)) -> ChangesShapeOfPencil(x))", "all x y.((Pencil(x) & Sharpening(y)) -> ChangesShapeOf(x,y))", "all x.(SharpeningPencil(x) -> ChangesShapeOfPencil(x))", "all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShapeOf(x,y))"]}
{"id": "entailmentbank_validation_761", "nl": "sharpening a pencil changes the shape of an object.", "fol": "", "prediction": ["all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShapeOfObject(y))", "all x.(SharpeningPencil(x) -> ChangesShapeOfObject(x))", "all x y z.((Pencil(x) & Sharpening(x,y) & Object(y) & Sharpening(x,z)) -> ChangesShape(x,y))", "all x.((Pencil(x) & Sharpens(x)) -> ChangesShapeOfObject(x))", "all x y.((Pencil(x) & Sharpening(x)) -> ChangesShapeOfObject(y))", "all x y z.((Pencil(x) & Sharpening(x,y) & Object(z)) -> ChangesShape(x,z))", "all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShapeOfObject(x,y))", "all x.(SharpeningPencil(x) -> ChangesShapeOfObject(x))", "all x.((Pencil(x) & Sharpens(x)) -> ChangesShapeOfObject(x))", "all x y z.((Pencil(x) & Sharpening(x,y) & Object(y) & ChangesShape(x,z)) -> Sharpens(x,z))", "all x y.((Pencil(x) & Sharpening(x)) -> ChangesShapeOfObject(y))", "all x.(SharpeningPencil(x) -> ChangesShapeOfObject(x))", "all x.((Pencil(x) & Sharpening(x)) -> ChangesShapeOfObject(x))", "all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShapeOfObject(y,x))", "all x y.((Pencil(x) & Sharpening(y)) -> ChangesShapeOfObject(x,y))", "all x.(SharpeningPencil(x) -> ChangesShapeOfObject(x))"]}
{"id": "entailmentbank_validation_762", "nl": "tearing paper changes the shape of the paper.", "fol": "", "prediction": ["all x y.((TornPaper(x) & Paper(y)) -> ChangesShape(x,y))", "all x.(TornPaper(x) -> ChangesShapeOfPaper(x))", "all x y z.((Paper(x) & Tears(y) & Paper(z)) -> ChangesShape(x,z))", "all x y.((TornPaper(x) & Paper(y)) -> ChangesShape(x,y))", "all x y z.((TornPaper(x) & Paper(y) & Paper(z)) -> ChangesShape(x,y,z))", "all x.(TearingPaper(x) -> ChangesShapeOfPaper(x))", "all x.(TrippingPaper(x) -> ChangesShapeOfPaper(x))", "all x.(TorningPaper(x) -> ChangesShapeOfPaper(x))", "all x y.((TearingPaper(x) & Paper(y)) -> ChangesShape(x,y))", "all x y z.((Paper(x) & Tears(y,x) & Paper(z)) -> ChangesShape(x,z))", "all x.(TornPaper(x) -> ChangesShapeOfPaper(x))", "exists x.(RottingPaper(x) & ChangesShapeOfPaper(x))", "exists an x y.(TearingPaper(x) & Shape(y) & Changes(x,y))", "all x y.((TornPaper(x) & Paper(y)) -> ChangesShape(x,y))", "all x.(TearingPaper(x) -> ChangesShapeOfPaper(x))", "all x y.((TearingPaper(x) & Paper(y)) -> ChangesShape(x,y))"]}
{"id": "entailmentbank_validation_763", "nl": "paper is a kind of object.", "fol": "", "prediction": ["all x.(Paper(x) -> Object(x))", "all x.(Paper(x) -> Object(x))", "all x y.((Paper(x) & Object(y)) -> Object(x))", "all x.(Paper(x) -> Object(x))", "all x y.((Paper(x) & Object(y)) -> Object(x,y))", "all x.(Paper(x) -> Object(x))", "all x y.((Paper(x) & Object(y)) -> Is(x,y))", "all x.(Paper(x) -> Object(x))", "all x y.((Paper(x) & Object(y)) -> Object(x))", "all x.(Paper(x) -> Object(x))", "exists x.(Paper(x) & ArtOfObject(x))", "all x y.((Paper(x) & Object(y)) -> Is(x,y))", "all x.(Paper(x) -> IsObject(x))", "all x.(Paper(x) -> Object(x))", "exists x.(Paper(x) & ArtOfObject(x))", "exists x.(Paper(x) & Object(x))"]}
{"id": "entailmentbank_validation_764", "nl": "tearing paper changes the shape of an object.", "fol": "", "prediction": ["all x y.((TornPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x.(TorningPaper(x) -> ChangesShapeOfObject(x))", "all x.(TearingPaper(x) -> ChangesShapeOfObject(x))", "all x y z.((TornPaper(x) & Object(y) & Shape(z)) -> Changes(x,y,z))", "all x y.((TornPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x.(TorningPaper(x) -> ChangesShapeOfObject(x))", "all x y.((TearingPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x y z.((TornPaper(x) & Object(y) & Shape(z)) -> Changes(x,y,z))", "all x.(TearingPaper(x) -> ChangesShapeOfObject(x))", "exists an x y.((TornPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x.(TtearingPaper(x) -> ChangesShapeOfObject(x))", "all x y.((TorningPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x y.((TornPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x.(TornsPaper(x) -> ChangesShapeOfObject(x))", "all x y.((TearingPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x.(TorningPaper(x) -> ChangesShapeOfObject(x))"]}
{"id": "entailmentbank_validation_765", "nl": "sharpening a pencil and tearing paper both change the shape of the object.", "fol": "", "prediction": ["all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Tearing(x,y)))", "all x.((Pencil(x) & Paper(y)) -> (Sharpening(x) & Tearing(x)))", "all x y z.((Pencil(x) & Paper(y) & Sharpening(x,y) & Tears(x,z)) -> ChangesShapeOfObject(x))", "all x y.((Sharpening(x) & Sharpening(x) & TornPaper(y)) -> ChangesShapeOfObject(x,y))", "(SharpeningPencil(x) & TearPaper(x))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Torning(x,y)))", "((SharpeningPencil(x) & TorningPaper(x)) -> ChangesShapeOfObject(x))", "all x.((Sharpening(x) & TearingPaper(x)) -> ChangesShapeOfObject(x))", "(ShapingPencil(x) & TorningPaper(x) & ChangesShapeOfObject(x))", "all x.((SharpeningPencil(x) & TearsPaper(x)) -> ChangesShapeOfObject(x))", "all x y.((SharpeningPencil(x) & TearingPaper(y)) -> ChangesShapeOfObject(x,y))", "all x y z.((Pencil(x) & Paper(y) & Sharpening(x,y) & Tears(x,z)) -> ChangesShape(x,y))", "(SharpeningPencil(x) & TearPaper(x))", "(SharpeningPencil(x) | TornPaper(x)) ChangesShapeOfObject(x))", "((SharpeningPencil(x) & TearsPaper(x)) -> ChangesShapeOfObject(x))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x) & Tearing(x,y)))"]}
{"id": "entailmentbank_validation_766", "nl": "shape is a property of the appearance of an object.", "fol": "", "prediction": ["all x y.((Shape(x) & Object(y)) -> PropertyOfAppearance(x,y))", "all x.(Shape(x) -> PropertyOfAppearance(x))", "all x y.((Shape(x) & Object(y)) -> AppearanceProperty(x,y))", "all x y z.((Shape(x) & Object(y) & Appearance(z)) -> PropertyOf(x,y,z))", "all x.(Shape(x) -> PropertyOfAppearanceOfObject(x))", "all x y.((Shape(x) & Object(y)) -> PropertyOfAppearance(x,y))", "all x.(Shape(x) -> AppearanceOfObject(x))", "all x y z.((Shape(x) & Object(y) & Appearance(z)) -> PropertyOf(x,y,z))", "all x y.((Shape(x) & Object(y)) -> AppearanceProperty(x,y))", "all x.(Shape(x) -> PropertyOfAppearanceOfObject(x))", "all x y.((Shape(x) & Appearance(y)) -> PropertyOf(x,y))", "all x.(Shape(x) -> AppearanceOfObject(x))", "all x.(Shape(x) -> PropertyOfAppearanceOfObject(x))", "all x y.((Shape(x) & Appearance(y)) -> PropertyOf(x,y))", "exists x.(Shape(x) & Appearance(x))", "exists x.(Shape(x) & AppearanceOfObject(x))"]}
{"id": "entailmentbank_validation_767", "nl": "sharpening a pencil and tearing paper both change the appearance of the object.", "fol": "", "prediction": ["all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Tears(x,y)))", "all x y z.((Pencil(x) & Paper(y) & Sharpening(x,y) & Tears(x,z)) -> ChangesAppearance(x))", "all x.((Pencil(x) & Paper(y)) -> (Sharpening(x) & Tearing(x)))", "((SharpeningPencil(x) & TearsPaper(x)) -> ChangesAppearance(x))", "all x y.((SharpeningPencil(x) & TearingPaper(y)) -> (ChangesAppearance(x,y) & ChangesAppearance(x,y)))", "both ways -(SharpeningPencil(x) & TearPaper(x)) -> ChangesAppearance(x))", "(SharpeningPencil(x) & TearPaper(x))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Torn(x,y)))", "all x y z.((Sharpening(x) & Pencil(y) & Paper(z)) -> (ChangeAppearance(x,y,z) & ChangeAppearance(x,z)))", "all x.((SharpeningPencil(x) & TearsPaper(x)) -> ChangesAppearance(x))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x) & Tearing(x,y)))", "((SharpeningPencil(x) & TearsPaper(x)) -> ChangesAppearance(x))", "all x.((SharpeningPencil(x) & TearingPaper(x)) -> ChangesAppearanceOfObject(x))", "(SharpeningPencil(x) & TearPaper(x))", "all x y.((Pencil(x) & Paper(y) & Sharpening(x,y) & Tears(x,y)) -> ChangesAppearance(x,y))", "((SharpeningPencil(x) & TorningPaper(x)) -> ChangesAppearance(x))"]}
{"id": "entailmentbank_validation_768", "nl": "appearance is a kind of physical property.", "fol": "", "prediction": ["all x.(Appearance(x) -> PhysicalProperty(x))", "all x y.((Appearance(x) & PhysicalProperty(y)) -> PhysicalProperty(x))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x.(AppearsToBePhysicalProperty(x) -> PhysicalProperty(x))", "all x y.((Appearance(x) & PhysicalProperty(y)) -> PhysicalProperty(x,y))", "all x.(Appearance(x) -> PhysicalProperty(x))", "exists x.(PhysicalProperty(x) & Appearance(x))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x y.((Appearance(x) & PhysicalProperty(y)) -> PhysicalProperty(x))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x y.((Appearance(x) & PhysicalProperty(y)) -> Physical(x))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x.(Appearance(x) -> PhysicalProperty(x))", "exists x.(Appearance(x) & PhysicalProperty(x))", "exists x.(Appearance(x) & PhysicalProperty(x))", "exists x.(Appears(x) & PhysicalProperty(x))"]}
{"id": "entailmentbank_validation_769", "nl": "sharpending a pencil and tearing paper both change the physical property of the object.", "fol": "", "prediction": ["all x y.((Pencil(x) & Paper(y)) -> (Sharpending(x,y) & Torning(x,y)))", "((SharpendingPencil(x) & TornPaper(x)) -> ChangesPhysicalProperty(x)))", "all x y.((Sharpending(x) & Sharpening(x) & TornPaper(y)) -> ChangesPhysicalProperty(x,y))", "all x.((Sharpending(x) & TornPaper(x)) -> (ChangesPhysicalProperty(x) & ChangesPhysicalProperty(x)))", "all x y z.((Sharpending(x) & Pencil(y) & Paper(z)) -> (ChangesPhysicalProperty(x,y,z) & ChangesPhysicalProperty(x,y,z)))", "(Sharpending(sharp) & TornPaper(sharp) & ChangesPhysicalProperty(sharp))", "(all x.(SharpendingPencil(x) -> ChangesPhysicalProperty(x)) & all y.(TornPaper(y) -> ChangesPhysicalProperty(y)))", "both sharpending and tearing paper change physicalproperty(x) & Object(y) & PhysicalProperty(z) & PhysicalProperty(y) & PhysicalProperty(z))", "all x y.((Sharpending(x) & Sharpening(x,y) & Torning(x,y)) -> ChangesPhysicalProperty(x,y))", "all x.((SharpendingPencil(x) & TorningPaper(x)) -> ChangesPhysicalPropertyOfObject(x))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpending(x,y) & Torn(x,y)))", "(Sharpending(sharp) & Torn(sharp) & Paper(s))", "((SharpendingPencil(x) & TorningPaper(x)) -> ChangesPhysicalProperty(x)))", "all x.((SharpeningPencil(x) & TearingPaper(x)) -> ChangesPhysicalPropertyOfObject(x))", "all x y.((Pencil(x) & Paper(y) & Sharpending(x,y) & Tearing(x,y)) -> ChangesPhysicalProperty(x,y))", "((SharpendingPencil(x) & TearingPaper(x)) -> ChangesPhysicalProperty(x))"]}
{"id": "entailmentbank_validation_770", "nl": "if something undergoes a physical change then the physical properties of that something will change.", "fol": "", "prediction": ["all x y.((SubjectsPhysicalChange(x) & PhysicalProperties(y)) -> Change(x,y))", "all x.((PropertiesChange(x) & UndergoesPhysicalChange(x)) -> PhysicalPropertiesChange(x))", "all x y.((Properties(x) & PhysicalChange(y) & Undergoes(x,y)) -> PhysicalPropertiesChange(x,y))", "all x y.(((Properties(x) & PhysicalChange(y)) -> PhysicalPropertiesChange(x,y))", "all x.((Properties(x) & UndergoesPhysicalChange(x)) -> PhysicalPropertiesChange(x))", "all x.((SubjectsPhysicalChange(x) & PhysicalPropertiesChange(x)) -> Changes(x))", "all x y z.((PhysicalProperties(x) & PhysicalProperties(y) & UndergoesPhysicalChange(x,y) & Something(z)) -> PhysicalPropertiesChange(x,z))", "all x y.((PhysicalProperties(x) & UndergoesPhysicalChange(x)) -> PhysicalPropertiesChange(y))", "all x y z.((Properties(x) & PhysicalChange(y) & PhysicalProperties(z) & Undergoes(x,y)) -> PhysicalPropertiesChange(x,z))", "all x.((UndergoesPhysicalChange(x) & ChangePhysicalProperties(x)) -> ChangePhysicalProperties(x))", "all x.(UndergoesPhysicalChange(x) -> PhysicalPropertiesChange(x))", "all x y.((PhenomenalChange(x) & PhysicalProperties(y) & Undergoes(x,y)) -> PhysicalPropertiesChange(x,y))", "all x y.((SubjectsPhysicalChange(x) & Something(y)) -> PhysicalPropertiesChange(x,y))", "all x.((SubjectsPhysicalChange(x) & PhysicalPropertiesChange(x)) -> Change(x))", "exists x.(PhysicalPropertiesChange(x) & UndergoesPhysicalChange(x))", "all x.((PhysicalChange(x) & UndergoesChange(x)) -> PhysicalPropertiesChange(x))"]}
{"id": "entailmentbank_validation_771", "nl": "pencil and paper underwent a physical change.", "fol": "", "prediction": ["all x y.((Pencil(x) & Paper(y)) -> UnderwentPhysicalChange(x,y))", "all x.((Pencil(x) & Paper(x)) -> UnderwentPhysicalChange(x))", "all x y z.((Pencil(x) & Paper(y) & PhysicalChange(z)) -> UnderwentChange(x,y,z))", "(PhysicalChange(pencil) & PhysicalChange(paper))", "all x.((Pencil(x) & Paper(x)) -> PhysicalChange(x))", "all x y.((Pencil(x) & Paper(y)) -> UnderwentPhysicalChange(x,y))", "(Pencil(p) | Paper(p)) underwentPhysicalChange(p))", "both pencil and paper underwent physical changes.", "(PhysicalChange(Pencil) & PhysicalChange(Paper))", "all x.((Pencil(x) | Paper(x)) -> PhysicalChange(x))", "(PhysicalChange(pencil) & PhysicalChange(paper))", "all x y.((Pencil(x) & Paper(y)) -> UnderwentPhysicalChange(x,y))", "all x.((Pencil(x) & Paper(x)) -> UnderwentPhysicalChange(x))", "all x.((Pencil(x) | Paper(x)) -> UnderwentPhysicalChange(x))", "all x y.((Pencil(x) & Paper(y)) -> PhysicalChange(x,y))", "(PhysicalChange(pencil) & PhysicalChange(paper))"]}
{"id": "entailmentbank_validation_772", "nl": "heat means temperature increases.", "fol": "", "prediction": ["all x.(Heat(x) -> TemperatureIncrease(x))", "(Heat(heat) -> TemperatureIncrease(heat))", "all x y.((Heat(x) & Temperature(y)) -> Increases(x,y))", "all x.(Heat(x) -> TemperatureIncrease(x))", "(Heat(heat) -> TemperatureIncrease(heat))", "all x.(Heat(x) -> TemperatureIncrease(x))", "all x y.((Heat(x) & Temperature(y)) -> Increases(x,y))", "(Heat(Heat) -> TemperatureIncrease(Heat))", "all x.(Heat(x) -> TemperatureIncrease(x))", "all x.(Heat(x) -> HeatIncrease(x))", "all x y.(Heat(x) -> TemperatureIncrease(y))", "all x y.((Heat(x) & Temperature(y)) -> Increases(x,y))", "all x.(Heat(x) -> IncreasesTemperature(x))", "all x.(Heat(x) -> MeansTemperatureIncreases(x))", "all x.(Heat(x) -> TemperatureIncreases(x))", "all x.(Heat(x) -> HeatIncrease(x))"]}
{"id": "entailmentbank_validation_773", "nl": "a solid is heated.", "fol": "", "prediction": ["all x.(Solid(x) -> Heats(x))", "all x.(Solid(x) -> Heated(x))", "all x.((Solid(x) & Heats(x)) -> Heats(x))", "all x y.((Solid(x) & Solid(y)) -> Heats(x,y))", "all x.(Solid(x) -> Heated(x))", "all x.((Solid(x) & Heats(x)) -> Heats(x))", "all x y.((Solid(x) & Solid(y)) -> Heats(x,y))", "all x.(Solid(x) -> Heats(x))", "all x.(Still(x) -> Heated(x))", "all x y.((Solid(x) & Solid(y)) -> Heated(x))", "all x y.((Solid(x) & Solid(y)) -> Heated(x,y))", "all x.(Solid(x) -> Heated(x))", "exists x.(Solid(x) & Heated(x))", "exists x.(Solid(x) & Heated(x))", "exists x.(Stick(x) & Heated(x))", "exists x.(Solid(x) & Heated(x))"]}
{"id": "entailmentbank_validation_774", "nl": "the temperature of the solid increases.", "fol": "", "prediction": ["all x.((Solid(x) & Temperature(x)) -> Increases(x))", "all x y.((Solid(x) & Solid(y)) -> IncreasesTemperature(x,y))", "all x.((Solid(x) & Temperature(x)) -> Increases(x))", "the temperature of the solid increases.", "all x y.((Solid(x) & Solid(y)) -> TemperatureIncreases(x,y))", "all x.((Solid(x) & Temperature(x,y)) -> Increases(x,y))", "(TemperatureOfSolid(solid,s) & Increases(s,s))", "all x y.((Standard(x) & Solid(y)) -> IncreasesTemperature(x,y))", "all x.(Solid(x) -> IncreasesTemperature(x))", "(TemperatureIncreases(Solid))", "all x y.((Solid(x) & Solid(y)) -> IncreasesTemperature(x,y))", "all x.((Solid(x) & TemperatureIncrease(x)) -> Increase(x))", "(TemperatureIncreasesSolid(Solid))", "all x y.((Solid(x) & Temperature(y,x)) -> Increases(x))", "exists x.(Solid(x) & Temperature(x,Solid))", "exists x.(SolidTemperature(x) & Increases(x))"]}
{"id": "entailmentbank_validation_775", "nl": "a solid is a kind of substance.", "fol": "", "prediction": ["all x.(Solid(x) -> Substance(x))", "all x.(Solid(x) -> Substance(x))", "all x y.((Solid(x) & Substance(y)) -> Substance(x))", "all x.(Solid(x) -> Substance(x))", "all x y.(Solid(x) -> (Substance(y) & Contains(x,y)))", "all x.(Still(x) -> Substance(x))", "all x.(Standard(x) -> Substance(x))", "all x.(Solid(x) -> Substance(x))", "all x y.(Solid(x) -> (Substance(y) & Contains(x,y)))", "all x.(Solid(x) -> Substance(x))", "all x y.(Solid(x) -> Substance(y))", "all x.(Solid(x) -> Substance(x))", "all x.(Solid(x) -> Substance(x))", "exists x.(Solid(x) & Substance(x))", "exists x.(Solid(x) & Substance(x))", "exists x.(Solid(x) & Substance(x))"]}
{"id": "entailmentbank_validation_776", "nl": "the temperature of the solid substance increases.", "fol": "", "prediction": ["all x.((SolidSubstance(x) & TemperatureIncreases(x)) -> Increases(x))", "all x y.((SolidSubstance(x) & Temperature(y)) -> Increases(x,y))", "all x.((SolidSubstance(x) & Temperature(x)) -> Increases(x))", "(IncreasesTemperatureOfSolidSubstance(x))", "all x y.((SolidSubstance(x) & SolidSubstance(y)) -> TemperatureIncreases(x,y))", "the temperature of the solid substance increases.", "all x y.((StickSubstance(x) & SolidSubstance(y)) -> IncreasesTemperature(x,y))", "all x y.((SolidSubstance(x) & Temperature(y) & Increases(x,y)) -> Increases(x,y))", "all x.((StickSubstance(x) & TemperatureIncreases(x)) -> Increases(x))", "all x.((SolidSubstance(x) & TemperatureIncreases(x)) -> Increases(x))", "exists x.(SolidSubstance(x) & TemperatureIncreases(x))", "(IncreasesTemperatureOfSolidSubstance(s))", "all x y z.((SolidSubstance(x) & Temperature(y,z)) -> Increases(z,x))", "all x.((SolidSubstance(x) & IncreasesTemperature(x)) -> IncreasesTemperature(x))", "exists x.(SolidSubstance(x) & TemperatureIncrease(x))", "all x y.((SolidSubstance(x) & SolidSubstance(y)) -> TemperatureIncreases(x,y))"]}
{"id": "entailmentbank_validation_777", "nl": "as the temperature of a substance increases, the molecules in that substance will move faster.", "fol": "", "prediction": ["all x y.((Substance(x) & Temperature(y) & Increases(y)) -> MobilizationFaster(x,y))", "all x.((Substance(x) & IncreasedTemperature(x)) -> MoveFaster(x))", "all x y.((Substance(x) & TemperatureIncrease(x,y)) -> MoleculesMoveFaster(x,y))", "all x y z.((Substance(x) & Temperature(y) & Molecules(z) & Increases(y)) -> MovesFaster(z))", "as the temperature of a substance increases, the molecules in that substance will move faster.", "all x y.((Substance(x) & IncreasedTemperature(x)) -> MoveFaster(y))", "all x.((Substance(x) & TemperatureIncreases(x)) -> MoleculesMoveFaster(x))", "as the temperature increases, the molecules in that substance will move faster.", "all x y.((Substance(x) & Temperature(y) & Increases(x,y)) -> MoleculesMoveFaster(x,y))", "all x y z.((Substance(x) & Temperature(y) & Molecule(z) & Increases(y,x)) -> MovesFaster(z,x))", "(IncreasedTemperature(substance) -> MobilizedMolecules(substance))", "all x.((Substance(x) & IncreasesTemperature(x)) -> MovesFaster(x))", "all x y.((Substance(x) & IncreasedTemperature(x) & Molecules(y)) -> MoveFaster(y,x))", "all x.((Substance(x) & TemperatureIncreases(x)) -> MoleculesMoveFaster(x))", "all x y z.((Substance(x) & Temperature(y) & Molecule(z) & Increases(y,x)) -> MovesFaster(z,x))", "all x.((Substance(x) & IncreasedTemperature(x)) -> MoveFasterMolecules(x))"]}
{"id": "entailmentbank_validation_778", "nl": "the molecules in the solid substance moves faster.", "fol": "", "prediction": ["all x.((Molecules(x) & SolidSubstance(x)) -> MovesFaster(x))", "all x y.((Molecule(x) & SolidSubstance(y)) -> MovesFaster(x,y))", "all x.((Molecule(x) & SolidSubstance(x)) -> MovesFaster(x))", "(MoleculesInSolidSubstanceMovesFaster(MoleculesInSolidSubstance))", "all x y z.((Molecule(x) & SolidSubstance(y) & SolidSubstance(z)) -> MovesFaster(x,y,z))", "all x y.((Molecule(x) & SolidSubstance(y)) -> MovesFaster(x,y))", "all x.(Molecules(x) -> MovesFaster(x))", "all x y z.((Molecule(x) & SolidSubstance(y) & SolidSubstance(z) & MovesFaster(x,y,z)) -> MovesFaster(x,y,z))", "all x.((Moleculars(x) & SolidSubstance(x)) -> MovesFaster(x))", "all x.((Molecules(x) & SolidSubstance(x)) -> MovesFaster(x))", "exists x.(Molecule(x) & SolidSubstance(x) & MovesFaster(x))", "all x.(Molecule(x) -> MovesFaster(x))", "all x y.((Molecule(x) & SolidSubstance(y)) -> MovesFaster(x,y))", "exists x.(Molecule(x) & SolidSubstance(x) & MovesFaster(x))", "all x y.((Molecule(x) & SolidSubstance(y)) -> MovesFaster(x,y))", "all x y.((Molecule(x) & SolidSubstance(y)) -> MovesFaster(x,y))"]}
{"id": "entailmentbank_validation_779", "nl": "faster means an increase / higher in speed.", "fol": "", "prediction": ["all x.(Faster(x) -> IncreaseInSpeed(x))", "all x.(Fast(x) -> IncreaseInSpeed(x))", "all x.(Faster(x) -> (IncreaseInSpeed(x) | HigherInSpeed(x)))", "all x y.((Fast(x) & Speed(y)) -> Increases(x,y))", "all x.((Speed(x) & Increase(x)) -> Higher(x))", "all x y.((Speed(x) & Speed(y)) -> (Increase(x,y) | Higher(x,y)))", "all x.(Fast(x) -> (IncreaseSpeed(x) | HigherSpeed(x)))", "(Faster(x) -> IncreaseInSpeed(x))", "(FasterSpeed(x) -> IncreasedSpeed(x))", "all x y.((Fast(x) & Speed(y)) -> Increase(x,y))", "all x y.((Faster(x) & Speed(y) & Increase(x,y)) -> Higher(x,y))", "all x.((Speeder(x) & Increase(x)) -> Higher(x))", "all x.(Faster(x) -> IncreasedSpeed(x))", "all x y.((Speed(x) & Speed(y)) -> Increases(x,y))", "all x.((Fast(x) & IncreaseInSpeed(x)) -> HigherInSpeed(x))", "all x.(Faster(x) -> IncreasedSpeed(x))"]}
{"id": "entailmentbank_validation_780", "nl": "the molecules in the solid substance increases in speed.", "fol": "", "prediction": ["all x.((Molecules(x) & SolidSubstance(x)) -> IncreasesSpeed(x))", "all x y.((Molecule(x) & SolidSubstance(y)) -> IncreasesSpeed(x,y))", "(MoleculesInSolidSubstance(MoleculesInSolidSubstance(MoleculesInSolidSubstance(MoleculesInSolidSubstance(MoleculesInSolidSubstance(MoleculesInSolidSubstance(MoleculesInSolidSubstance(MoleculesInSolidSubstance(MoleculesInSolidSubstance(MoleculesInSpeed(MoleculesInSpeed(MoleculesInSpeed(Molecules))))", "all x y z.((Molecule(x) & SolidSubstance(y) & SolidSubstance(z) & IncreasesSpeed(x,y,z)) -> IncreasesSpeed(x,y,z))", "all x.((Molecule(x) & SolidSubstance(x)) -> IncreasesSpeed(x))", "all x.((Moleculars(x) & SolidSubstance(x)) -> IncreasesSpeed(x))", "all x.((Molecules(x) & SolidSubstance(x)) -> IncreasesSpeed(x))", "all x y.((Molecule(x) & SolidSubstance(y)) -> IncreasesSpeed(x,y))", "(InsolidSubstance(molecules) -> IncreasesSpeed(molecules,speed))", "all x.(MoleculesInSolidSubstance(x) -> IncreasesSpeed(x))", "all x.((MoleculesInSolidSubstance(x) & IncreasesSpeed(x)) -> IncreasesSpeed(x))", "exists x.(Molecule(x) & SolidSubstance(x) & IncreasesSpeed(x))", "all x y.((Molecule(x) & SolidSubstance(y)) -> IncreasesSpeed(x,y))", "all x y.((Molecules(x) & SolidSubstance(y)) -> IncreasesSpeed(x,y))", "all x.(MoleculesInSolidSubstance(x) -> IncreasesSpeed(x))", "all x y.((Molecule(x) & SolidSubstance(y)) -> IncreasesSpeed(x,y))"]}
{"id": "entailmentbank_validation_781", "nl": "proton is a kind of subatomic particles.", "fol": "", "prediction": ["all x.(Proton(x) -> SubatomicParticle(x))", "all x y.((Proton(x) & SubatomicParticle(y)) -> SubatomicParticle(x,y))", "all x.(Proton(x) -> SubatomicParticle(x))", "(SubatomicParticle(proton) & SubatomicParticle(proton))", "all x.(Proton(x) -> SubatomicParticles(x))", "all x y.((Proton(x) & SubatomicParticle(y)) -> SubatomicParticle(x,y))", "all x.(Proton(x) -> SubatomicParticle(x))", "all x y.((Proton(x) & SubatomicParticle(y)) -> Subatomic(x))", "all x.(Proton(x) -> (SubatomicParticles(x) & SubatomicParticles(x)))", "all x.(Proton(x) -> SubatomicParticles(x))", "all x.(Proton(x) -> SubatomicParticles(x))", "all x y.((Proton(x) & SubatomicParticle(y)) -> SubatomicParticle(x,y))", "all x.(Proton(x) -> SubatomicParticle(x))", "all x.(Proton(x) -> SubatomicParticle(x))", "exists x.(Proton(x) & SubatomicParticipation(x))", "all x.(Protein(x) -> SubatomicParticles(x))"]}
{"id": "entailmentbank_validation_782", "nl": "neutrons are a kind of subatomic particle.", "fol": "", "prediction": ["all x.(Neutron(x) -> SubatomicParticle(x))", "all x.(Neutron(x) -> SubatomicParticle(x))", "all x y.((Neutron(x) & SubatomicParticle(y)) -> SubatomicParticle(x,y))", "(SubatomicParticle(neutron) & SubatomicParticle(neutron))", "all x.(Nitrogen(x) -> SubatomicParticle(x))", "all x.(Neutron(x) -> SubatomicParticle(x))", "all x y.((Neutron(x) & SubatomicParticle(y)) -> SubatomicParticle(x))", "(SubatomicParticle(neutron) & SubatomicParticle(neutron))", "all x.(Nitrogen(x) -> SubatomicParticle(x))", "all x.(Neutron(x) -> SubatomicParticle(x))", "all x y.((Neutron(x) & SubatomicParticle(y)) -> SubatomicParticle(x,y))", "all x.(Neutron(x) -> SubatomicParticle(x))", "all x y.((Neutron(x) & SubatomicParticle(y)) -> Subatomic(x))", "all x.(Nucleon(x) -> SubatomicParticle(x))", "all x.(Neutron(x) -> SubatomicParticle(x))", "all x.(Neutron(x) -> SubatomicParticle(x))"]}
{"id": "entailmentbank_validation_783", "nl": "atomic mass is determined by the sum of protons and neutrons numbers in an atom.", "fol": "", "prediction": ["all x y.((AtomicMass(x) & Atom(y)) -> DeterminedBySumOfProtonsAndNeutrons(x,y))", "all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBySum(x,y,z))", "all x.(AtomicMass(x) -> (DeterminedBySumOfProtonsAndNeutrons(x)))", "all x.(AtomicMass(x) -> DeterminedBySumOfProtonsAndNeutrons(x))", "all x y.((AtomicMass(x) & Atom(y)) -> SumOfProtonsAndNeutrons(x,y))", "all x.((AtomicMass(x) & SumOfProtonsAndNeutrons(x)) -> DeterminedBy(x,y))", "(SumOfProtonsAndNeutrons(Atom) & DeterminedByAtomMass(Atom))", "all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z) & Atom(w)) -> DeterminedBySum(x,y,z,w))", "(SumOfProtonsAndNeutrons(a) & InAtom(b))", "all x.(AtomicMass(x) -> (DeterminedBySumOfProtonsAndNeutrons(x) & InAtom(x)))", "all x y.((AtomicMass(x) & Atom(y)) -> (DeterminedBySumOfProtonsAndNeutrons(x,y)))", "all x.(AtomicMass(x) -> (DeterminedBySumOfProtonsAndNeutrons(x) & InAtom(x)))", "all x.((AtomicMass(x) & SumOfProtonsAndNeutrons(x)) -> DeterminedBy(x,y))", "all x y.((AtomicMass(x) & Protons(y) & Neutrons(y)) -> DeterminedBySum(x,y))", "all x y z.((AtomicMass(x) & SumOfProtonsAndNeutrons(y) & Atom(z)) -> DeterminedBy(x,y,z))", "all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBySum(x,y,z))"]}
{"id": "entailmentbank_validation_784", "nl": "atomic mass is determined by the sum of protons and neutrons particle numbers.", "fol": "", "prediction": ["all x.(AtomicMass(x) -> (DeterminedBySumOfProtons(x) & DeterminedBySumOfNeutrons(x)))", "all x y.((AtomicMass(x) & Protons(y) & Neutrons(y)) -> DeterminedBySum(x,y))", "all x.((AtomicMass(x) & SumOfProtonsAndNeutrons(x)) -> DeterminedBySum(x))", "all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBySum(x,y,z))", "all x.(AtomicMass(x) -> (DeterminedBySumOfProtonsAndNeutrons(x)))", "(SumOfProtonsAndNeutrons(AtomicMass))", "all x y.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBySum(x,y,z))", "all x.(AtomicMass(x) -> DeterminedBySumOfProtonsAndNeutrons(x))", "all x.((AtomicMass(x) & SumOfProtonsAndNeutrons(x)) -> DeterminedByParticleNumbers(x))", "all x y.((AtomicMass(x) & SumOfProtonsAndNeutrons(y)) -> DeterminedBy(x,y))", "all x.(AtomicMass(x) -> (DeterminedBySumOfProtonsAndNeutrons(x)))", "all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBySum(x,y,z))", "(SumOfProtonsAndNeutrons(atomicMath))", "all x.((AtomicMass(x) & SumOfProtons(x) & SumOfNeutrons(x)) -> DeterminedBySum(x))", "all x y.((AtomicMass(x) & Protons(y) & Neutrons(y)) -> DeterminedBySumParticleNumbers(x,y))", "all x.(AtomicMass(x) -> (SumOfProtons(x) & SumOfNeutrons(x)))"]}
{"id": "entailmentbank_validation_785", "nl": "a proton has a positive 1 electric charge.", "fol": "", "prediction": ["all x.(Proton(x) -> PositiveElectricCharge(x,1))", "all x y.((Proton(x) & ElectricCharge(y)) -> Positive(x,y))", "all x.(Proton(x) -> PositiveElectricCharge(x,1))", "all x y.((Proton(x) & ElectricCharge(y) & Positive(x,y)) -> Positive(x,y))", "all x.(Proton(x) -> Positive(x,1))", "all x.(Proton(x) -> HasPositiveElectricCharge(x,1))", "all x.(Proton(x) -> PositiveElectricCharge(x,1))", "all x.(Proton(x) -> Positive1ElectricCharge(x))", "all x y.((Proton(x) & ElectricCharge(y)) -> Positive(x,y))", "all x y.((Proton(x) & ElectricCharge(y) & Positive(x,y)) -> Positive(x,y))", "all x.(Proton(x) -> HasPositive1ElectricCharge(x))", "all x y.((Proton(x) & ElectricCharge(y)) -> Positive(x,y))", "all x.(Proton(x) -> Positive(x,1))", "all x.(Proton(x) -> PositiveElectricCharge(x,1))", "exists x.(Proton(x) & Positive(x,1))", "exists x.(Proton(x) & Positive(x,1))"]}
{"id": "entailmentbank_validation_786", "nl": "a electron has a negative -1 electric charge.", "fol": "", "prediction": ["all x.(Electron(x) -> NegativeElectricCharge(x,1))", "all x.(Electron(x) -> NegativeElectricCharge(x,1))", "all x y.((Electron(x) & ElectricCharge(y)) -> Negative(x,y))", "all x.(Electron(x) -> NegativeElectricCharge(x,1))", "all x y.((Electron(x) & ElectricCharge(y)) -> Negative(x,y))", "all x.(Electron(x) -> Negative(x,1))", "all x y.((Electron(x) & ElectricCharge(y) & Negative(x,y)) -> -(ElectronCharge(x,y)))", "all x y.((Electron(x) & ElectricCurrent(y)) -> Negative(x,y))", "all x.(Electron(x) -> HasNegativeElectricCharge(x,1))", "all x y.((Electron(x) & ElectricCharge(y)) -> Negative(x,y))", "all x.(Electron(x) -> NegativeElectricCharge(x,1))", "all x.(Electron(x) -> Negative(x,1))", "exists x.(Electron(x) & NegativeCurrent(x,1))", "exists x.(Electron(x) & PositiveElectricCharge(x,1))", "all x.(Electron(x) -> NegativeElectricCharge(x,1))", "exists x.(Electron(x) & Negative(x,1))"]}
{"id": "entailmentbank_validation_787", "nl": "equal numbers of protons and electrons result in a neutral 0 electric charge.", "fol": "", "prediction": ["all x.((Proton(x) & Electron(x)) -> Neutral(x))", "all x y.((Proton(x) & Electron(y) & EqualNumbers(x,y)) -> Neutral0ElectricCharge(x))", "all x y.((EqualNumbersOfProtons(x,y) & EqualNumbersOfElectrons(x,y)) -> NeutralElectricCharge(x,y))", "all x.((Proton(x) & Electron(x)) -> Neutral0ElectricCharge(x))", "all x y.((Proton(x) & Electron(y)) -> EqualNumbersResultInNeutral0ElectricCharge(x,y))", "(EqualNumbersOfProtonsAndElectrons(x) -> Neutral0ElectricCharge(x))", "all x y z.((Proton(x) & Electron(y) & ElectricCharge(z) & Equal(x,y)) -> Neutral(x,z))", "all x.((Proton(x) & Electron(x) & EqualNumbers(x,y)) -> Neutral0ElectricCharge(x))", "all x.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x)) -> Neutral0ElectricCharge(x))", "all x.(EqualNumbersOfProtonsAndElectrons(x) -> NeutralElectricCharge(x))", "(EqualNumbersOfProtonsAndElectrons(x) -> NeutralElectricCharge(x))", "all x.((Protons(x) & Electrons(x)) -> Neutral(x))", "all x y z.((Proton(x) & Electron(y) & ElectricCharge(z) & Equal(x,y,z)) -> Neutral(x,z))", "all x y.((Proton(x) & Electron(y) & EqualNumbers(x,y)) -> Neutral0ElectricCharge(x))", "(EqualNumbersOfProtonsAndElectrons(e) & NeutralElectricCharge(e))", "all x.(EqualNumbersOfProtonsAndElectrons(x) -> NeutralElectricCharge(x,0))"]}
{"id": "entailmentbank_validation_788", "nl": "a neutron has a neutral electric charge.", "fol": "", "prediction": ["all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "all x.(Neutron(x) -> NeutralElectricCharge(x))", "all x y.((Neutron(x) & ElectricCharge(y)) -> Neutral(x,y))", "all x y.((Neutron(x) & ElectricCharge(y) & Neutral(x)) -> Has(x,y))", "all x y.(Neutron(x) -> HasNeutralElectricCharge(x,y))", "all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "all x.(Neutron(x) -> NeutralElectricCharge(x))", "all x y.(Neutron(x) -> HasNeutralElectricCharge(x,y))", "all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "all x y.(Neutron(x) -> HasNeutralElectricCharge(x,y))", "all x.(Neutron(x) -> NeutralElectricCharge(x))", "all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "exists x.(Neutron(x) & NeutralElectricCharge(x))", "exists x.(Neutron(x) & NeutralElectricCharge(x))"]}
{"id": "entailmentbank_validation_789", "nl": "equal numbers of protons and electrons and any number of neutrons result in a neutral 0 electric charge.", "fol": "", "prediction": ["all x.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x) & AnyNumberOfNeutrons(x)) -> Neutral0ElectricCharge(x))", "all x y.((EqualNumbersOfProtonsAndElectrons(x) & AnyNumberOfNeutrons(y)) -> Neutral0ElectricCharge(x))", "(EqualNumbersOfProtonsAndElectrons(x) & AnyNumberOfNeutrons(x))", "all x.((Proton(x) | Electron(x)) -> (EqualNumbers(x,y) & EqualNumbers(y,z) & Neutrons(z)))", "all x y.((Proton(x) & Electron(y) & Neutron(y)) -> Neutral0ElectricCharge(x))", "all x y.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x) & AnyNumberOfNeutrons(y)) -> Neutral0ElectricCharge(x))", "all x.((EqualNumbersOfProtonsAndElectrons(x) & AnyNumberOfNeutrons(x)) -> Neutral0ElectricCharge(x))", "(all x.((Proton(x) | Electron(x)) & AnyNumberOfNeutrons(x)) -> Neutral0ElectricCharge(x))", "all x y z.((EqualNumbersOfProtonsAndElectrons(x) & Neutrons(y) & ElectricCharge(z)) -> Neutral0(x,y,z))", "all x.((Proton(x) | Electron(x)) & Neutron(x)) -> Neutral0ElectricCharge(x))", "(EqualNumbersOfProtonsAndElectrons(x) & AnyNumberOfNeutrons(x))", "all x.((EqualNumbersOfProtonsAndElectrons(x) & AnyNumberOfNeutrons(x)) -> Neutral0ElectricCharge(x))", "all x y z.((Proton(x) & Electron(y) & Neutron(z) & Equal(x,y)) -> Neutral(x,z))", "(EqualNumbersOfProtonsAndElectrons(e) & AnyNumberOfNeutrons(e) -> Neutral0ElectricCharge(e))", "all x y.((EqualNumbersOfProtonsAndElectrons(x) & AnyNumberOfNeutrons(y)) -> Neutral0ElectricCharge(x))", "all x.((Proton(x) & Electron(x) & Neutron(x)) -> Neutral0ElectricCharge(x))"]}
{"id": "entailmentbank_validation_790", "nl": "an atom is made of protons / neutrons / electrons.", "fol": "", "prediction": ["all x.(Atom(x) -> (MadeOfProtons(x) | MadeOfNeutrons(x) | MadeOfElectrons(x)))", "all x y.((Atom(x) & Protons(y) & Neutrons(y)) -> MadeOf(x,y))", "all x.(Atom(x) -> (MadeOfProtons(x) & MadeOfNeutrons(x) & MadeOfElectrons(x)))", "all x y z.((Atom(x) & Protons(y) & Neutrons(z)) -> MadeOf(x,y,z))", "all x.(Atom(x) -> (MadeOf(x,Protons) & MadeOf(x,Neutrons) & MadeOf(x,Electrons)))", "all x.(Atom(x) -> (MadeOfProtons(x) | MadeOfNeutrons(x) | MadeOfElectrons(x)))", "all x.((Atom(x) & MadeOfProtons(x)) -> MadeOfNeutrons(x))", "all x y.((Atom(x) & Protons(y) & Neutrons(y)) -> MadeOf(x,y))", "all x y z.((Atom(x) & Protons(y) & Neutrons(z)) -> (MadeOf(x,y,z) & MadeOf(x,y)))", "exists x.(Atom(x) & MadeOf(x,protons) & MadeOf(x,neutrons) & MadeOf(x,electrons))", "all x.(Atom(x) -> (MadeOfProtons(x) & MadeOfNeutrons(x) & MadeOfElectrons(x)))", "all x y.((Atom(x) & Protons(y) & Neutrons(z)) -> MadeOf(x,y,z))", "exists x.(Atom(x) & MadeOfProtons(x) & MadeOfNeutrons(x) & MadeOfElectrons(x))", "all x y.((Atom(x) & Protons(y)) -> (MadeOf(x,y) | MadeOf(x,y)))", "all x.(Atom(x) -> (MadeOfProtons(x) | MadeOfNeutrons(x) | MadeOfElectrons(x)))", "exists x.(Atom(x) & MadeOf(x,protons,neutrons,electrons))"]}
{"id": "entailmentbank_validation_791", "nl": "if an atom has an equal number of protons and electrons, then the atom will have a neutral charge.", "fol": "", "prediction": ["all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> NeutralCharge(x))", "all x y.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> NeutralCharge(y))", "all x.((Atom(x) & EqualNumberOfProtons(x) & EqualNumberOfElectrons(x)) -> NeutralCharge(x))", "all x y.((Atom(x) & EqualProtons(x,y) & EqualElectrons(x,y)) -> NeutralCharge(x))", "all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> NeutralCharge(x))", "(EqualNumberOfProtonsAndElectrons(atom) -> NeutralCharge(atom))", "all x.(EqualProtonsAndElectrons(x) -> NeutralCharge(x))", "all x y z.((Atom(x) & EqualProtons(y) & EqualElectrons(z)) -> NeutralCharge(x))", "all x y z.((Atom(x) & Protons(y) & Electrons(z) & Equal(x,y,z)) -> NeutralCharge(x))", "all x y.((Atom(x) & Atom(y) & EqualProtons(x,y) & EqualElectrons(x,y)) -> NeutralCharge(x))", "all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> NeutralCharge(x))", "all x y.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> NeutralCharge(x,y))", "all x.(EqualProtonsAndElectrons(x) -> NeutralCharge(x))", "all x.(EqualNumberOfProtonsAndElectrons(x) -> NeutralCharge(x))", "all x.((Atom(x) & EqualNumberOfProtonsAndElectrons(x)) -> NeutralCharge(x))", "all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> NeutralCharge(x))"]}
{"id": "entailmentbank_validation_792", "nl": "an normal atom has a neutral electric charge.", "fol": "", "prediction": ["all x.((Atom(x) & Normal(x)) -> NeutralElectricCharge(x))", "all x.(NormalAtom(x) -> HasNeutralElectricCharge(x))", "all x.((Atom(x) & Normal(x)) -> HasNeutralElectricCharge(x))", "all x y.((Atom(x) & Normal(x)) -> HasNeutralElectricCharge(x,y))", "all x y.((NormalAtom(x) & NormalAtom(y)) -> HasNeutralElectricCharge(x,y))", "all x.((Atom(x) & Normal(x)) -> NeutralElectricCharge(x))", "all x.(NormalAtom(x) -> HasNeutralElectricCharge(x))", "all x y.((Atom(x) & Normal(y)) -> HasNeutralElectricCharge(x,y))", "exists x.(Atom(x) & Normal(x) & NeutralElectricCharge(x))", "(all x.(NormalAtom(x) -> NeutralElectricCharge(x)))", "all x y.((NormalAtom(x) & NormalAtom(y)) -> NeutralElectricCharge(x,y))", "all x.((Atom(x) & Normal(x)) -> HasNeutralElectricCharge(x))", "all x.(NormalAtom(x) -> NeutralElectricCharge(x))", "exists x.(NormalAtom(x) & NeutralElectricCharge(x))", "all x.((Atom(x) & Normal(x)) -> NeutralElectricCharge(x))", "all x.((Atom(x) & Normal(x)) -> HasNeutralElectricCharge(x))"]}
{"id": "entailmentbank_validation_793", "nl": "that atom has an equal number of protons and electrons.", "fol": "", "prediction": ["all x.(Atom(x) -> (EqualProtons(x) & EqualElectrons(x)))", "all x.(Atom(x) -> (EqualNumberOfProtons(x) & EqualNumberOfElectrons(x)))", "all x y.((Atom(x) & Atom(y)) -> (EqualProtons(x,y) & EqualElectrons(x,y)))", "all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> Atom(x))", "(EqualProtons(atom) & EqualElectrons(atom))", "all x y.((Atom(x) & Atom(y)) -> (EqualNumberOfProtons(x,y) & EqualNumberOfElectrons(x,y)))", "all x.(Atom(x) -> (EqualProtons(x) & EqualElectrons(x)))", "all x y z.((Atom(x) & Protons(y) & Electrons(z)) -> EqualNumber(x,y,z))", "(EqualProtons(atom) & EqualElectrons(atom))", "all x.(Atom(x) -> (EqualNumberOfProtons(x) & EqualNumberOfElectrons(x)))", "all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> Atomic(x))", "all x y.((Atom(x) & Atom(y)) -> (HasEqualProtons(x,y) & HasEqualElectrons(x,y)))", "all x y.((Atom(x) & Protons(y) & Electrons(y)) -> EqualNumber(x,y))", "exists x.(Atom(x) & EqualProtons(x) & EqualElectrons(x))", "exists x.(Atom(x) & EqualProtons(x) & EqualElectrons(x))", "exists x.(Atom(x) & EqualProtons(x) & EqualElectrons(x))"]}
{"id": "entailmentbank_validation_794", "nl": "iron in contact with water and oxygen will rust.", "fol": "", "prediction": ["all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x y.((Iron(x) & Water(y) & Oxygen(z)) -> Rust(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x.((Iron(x) & ContactsWater(x) & ContactsOxygen(x)) -> Rust(x))", "(all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x y z.((Iron(x) & Water(y) & Oxygen(z) & InContactWith(x,y,z)) -> Rust(x))", "all x y.((Iron(x) & Water(y) & Oxygen(z)) -> Rust(x))", "all x y.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x.((Iron(x) & Water(x) & Oxygen(x)) -> Rust(x))", "all x.((IronInContactWithWater(x) & Oxygen(x)) -> Rust(x))", "all x y.((Iron(x) & Water(y) & Oxygen(x)) -> Rust(x))", "all x y.((Iron(x) & Water(y) & Oxygen(z) & InContactWith(x,y,z)) -> Rust(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x.((Iron(x) & ContactsWater(x) & ContactsOxygen(x)) -> Rust(x))", "all x.((IronInContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))"]}
{"id": "entailmentbank_validation_795", "nl": "iron in contact with water and oxygen causes a chemical change.", "fol": "", "prediction": ["all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalChange(x))", "all x y.((Iron(x) & Water(y) & Oxygen(z)) -> ChemicalChange(x,y,z))", "all x.((Iron(x) & Water(x) & Oxygen(x)) -> ChemicalChange(x))", "all x y z.((Iron(x) & Water(y) & Oxygen(z) & InContactWith(x,y,z)) -> ChemicalChange(x))", "all x.((Iron(x) & ContactsWater(x) & ContactsOxygen(x)) -> ChemicalChange(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalChange(x))", "all x y.((Iron(x) & Water(y) & Oxygen(z)) -> ChemicalChange(x,y,z))", "all x.((IronInContactWithWater(x) & Oxygen(x)) -> ChemicalChange(x))", "all x y.((Iron(x) & Water(y) & Oxygen(y)) -> CausesChemicalChange(x,y))", "all x.((Iron(x) & Water(x) & Oxygen(x)) -> ChemicalChange(x))", "all x y z.((Iron(x) & Water(y) & Oxygen(z) & InContactWith(x,y,z)) -> ChemicalChange(x))", "all x y.((Iron(x) & Water(y) & Oxygen(z) & InContactWith(x,y,z)) -> ChemicalChange(x))", "all x.((IronInContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalChange(x))", "all x.((IronInContactWithWaterAndOxygen(x)) -> ChemicalChange(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalChange(x))", "all x y.((Iron(x) & Water(y) & Oxygen(y)) -> CausesChemicalChange(x,y))"]}
{"id": "entailmentbank_validation_796", "nl": "iron in contact with water and oxygen is an example of chemical reactions.", "fol": "", "prediction": ["all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & ContactsWater(x) & ContactsOxygen(x)) -> ChemicalReaction(x))", "all x y.((Iron(x) & Water(y) & Oxygen(z)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "(ChemicalReaction(iron) & InContactWithWater(iron) & InContactWithOxygen(iron))", "(all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x y z.((Iron(x) & Water(y) & Oxygen(z) & InContactWith(x,y,z)) -> ChemicalReaction(x))", "all x y.((Iron(x) & Water(y) & Oxygen(z) & InContactWith(x,y,z)) -> ChemicalReaction(x))", "all x.((IronInContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & ContactsWater(x) & ContactsOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x y.((Iron(x) & Water(y) & Oxygen(y)) -> ChemicalReaction(x,y))", "all x.((IronInContactWithWater(x) & Oxygen(x)) -> ChemicalReaction(x))", "all x y.((Iron(x) & Water(y) & Oxygen(x,y)) -> ChemicalReaction(x))", "all x.((IronInContactWithWaterAndOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_797", "nl": "alkaline earth metals are highly chemically reactive.", "fol": "", "prediction": ["all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.((AlkalineEarthMetal(x) & HighlyChemicallyReactive(x)) -> HighlyAlkalineMetal(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x y.((AlkalineEarthMetal(x) & ChemicallyReactive(y)) -> Highly(x,y))", "all x.((AlkalineEarthMetal(x) & HighlyChemicallyReactive(x)) -> HighlyChemicallyReactive(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "(HighlyChemicallyReactive(alkalineEarthMetal))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "(all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x)))", "all x y.((AlkalineEarthMetal(x) & ChemicallyReactive(y)) -> Highly(x,y))", "all x y.((AlkalineEarthMetal(x) & ChemicallyReactive(y,x)) -> Highly(x,y))", "all x.((AlkalineEarthMetal(x) & HighlyChemicallyReactive(x)) -> HighlyReactive(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.(AlkalineEarth(x) -> HighlyChemicallyReactive(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.(AlkalineEarthMetal(x) -> ChemicallyReactive(x))"]}
{"id": "entailmentbank_validation_798", "nl": "elements from the same group in the periodic table are chemically reactive in a similar way.", "fol": "", "prediction": ["all x y.((Element(x) & Element(y) & SameGroup(x,y)) -> ChemicallyReactive(x))", "all x.((Elements(x) & SameGroup(x) & PeriodicTable(x)) -> ChemicallyReactive(x))", "all x y.((Element(x) & Element(y) & SameGroupInPeriodicTable(x,y)) -> ChemicallyReactive(x,y))", "all x.((Elements(x) & SameGroupInPeriodicTable(x)) -> ChemicallyReactive(x))", "all x y z.((Element(x) & Element(y) & Group(z) & SameGroup(y,z) & PeriodicTable(z)) -> ChemicallyReactive(x))", "all x.((Element(x) & SameGroup(x) & PeriodicTable(x)) -> ChemicallyReactive(x))", "(ChemicallyReactiveInSameGroup(x) & SimilarToGroup(x))", "all x y z.((Element(x) & Group(y) & PeriodicalTable(z) & SameGroup(y,z)) -> ChemicallyReactive(x,y,z))", "all x.((ElementsFromSameGroup(x) & PeriodicTable(x)) -> ChemicallyReactiveInSameManner(x))", "all x y.((Element(x) & Element(y) & SameGroup(x,y)) -> ChemicallyReactive(x,y))", "all x y z.((Element(x) & Element(y) & Group(z) & SameGroupInPeriodicTable(x,y,z)) -> ChemicallyReactiveInSameManner(x))", "all x y.((Element(x) & Element(y) & SameGroupInPeriodicTable(x,y)) -> ChemicallyReactiveInSameManner(x,y))", "all x.((Elements(x) & SameGroup(x) & PeriodicTable(x)) -> ChemicallyReactive(x))", "all x y.((Element(x) & Group(y) & SameGroup(x,y)) -> ChemicallyReactive(x,y))", "all x.(ChemicallyReactiveInSameGroup(x) -> SimilarToGroup(x))", "all x.((ElementsFromSameGroup(x) & PeriodicalTable(x)) -> ChemicallyReactive(x))"]}
{"id": "entailmentbank_validation_799", "nl": "elements that belong to alkaline earth metals are highly chemically reactive.", "fol": "", "prediction": ["all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x y.((Element(x) & AlkalineEarthMetal(y)) -> HighlyChemicallyReactive(x,y))", "(all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x)))", "all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Elements(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x y.((Element(x) & AlkalineEarthMetal(y)) -> HighlyChemicallyReactive(x,y))", "all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x y.((Element(x) & AlkalineEarthMetal(y)) -> HighlyChemicallyReactive(x,y))", "(all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x)))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.((Elements(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x y.((Element(x) & AlkalineEarthMetal(y)) -> HighlyChemicallyReactive(x,y))", "all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))"]}
{"id": "entailmentbank_validation_800", "nl": "magnesium belongs to alkaline earth metal family, group 2 on the periodic table.", "fol": "", "prediction": ["all x.(Magnesium(x) -> (AlkalineEarthMetal(x) & Group2OnPeriodicTable(x)))", "(BelongsToAlkalineEarthMetalFamily(Magnesium) & Group2OnPeriodicTable(Magnesium))", "all x.(Magnesium(x) -> (AlphalineEarthMetal(x) & Group2OnPeriodicTable(x)))", "all x y.((Magnesium(x) & AlkalineEarthMetal(y)) -> Group2OnPeriodicTable(x,y))", "(AlphalineEarthMetalFamily(Magnesium) & Group2OnPeriodicTable(Magnesium))", "(AlkalineEarthMetal(Magnesium) & Group2OnPeriodicTable(Magnesium))", "all x y.((Magnesium(x) & AlkalineEarthMetalFamily(y)) -> Group2OnPeriodicTable(x,y))", "all x.(Magnesium(x) -> AlkalineEarthMetalFamily(x,2))", "all x y z.((Magnesium(x) & AlkalineEarthMetal(y) & PeriodicalTable(z)) -> (BelongsTo(x,y) & Group2(x,z)))", "all x.(Magnesium(x) -> (AlkalineEarthMetalFamily(x) & Group2OnPeriodicTable(x)))", "(BelongsToAlkalineEarthMetalFamily(Magnesium) & Group2OnPeriodicTable(Magnesium))", "all x.(Melium(x) -> (AlkalineEarthMetalFamily(x) & Group2OnPeriodicTable(x)))", "all x y.((Magnesium(x) & AlkalineEarthMetal(y)) -> Group2OnPeriodicTable(x,y))", "all x.(Magnetic(x) -> AlkalineEarthMetal(x))", "all x.(Magnesium(x) -> (AlphalineEarthMetal(x) & Group2OnPeriodicTable(x)))", "all x.(Magnetic(x) -> AlkalineEarthMetalFamily(x,2))"]}
{"id": "entailmentbank_validation_801", "nl": "magnesium is highly chemically reactive.", "fol": "", "prediction": ["all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "(HighlyChemicallyReactive(Magnesium))", "All x y.((Magnesium(x) & ChemicallyReactive(y)) -> Highly(x,y))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "(HighlyChemicallyReactive(Magnesium))", "all x.(Melium(x) -> HighlyChemicallyReactive(x))", "All x y.((Magnesium(x) & ChemicallyReactive(y)) -> Highly(x,y))", "All x y.((Magnesium(x) & ChemicallyReactive(y,x)) -> Highly(x,y))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Melium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> ChemicallyReactive(x))", "all x.(Magnetic(x) -> HighlyChemicallyReactive(x))", "all x.(Magnetic(x) -> HighlyChemicallyReactive(x))"]}
{"id": "entailmentbank_validation_802", "nl": "an element cannot be decomposed into two or more different substances by simple chemical methods.", "fol": "", "prediction": ["all x.(Element(x) -> -DecomposedBySimpleChemicalMethods(x))", "all x.((Element(x) & -DecomposedBySimpleChemicalMethods(x)) -> -DecomposedBySimpleChemicalMethods(x))", "all x y.((Element(x) & Substance(y)) -> -DecomposedBySimpleChemicalMethods(x,y))", "all x y z.((Element(x) & Substance(y) & Substance(z)) -> -DecomposedBySimpleChemicalMethods(x,y,z))", "all x.(Element(x) -> -DecomposedBySimpleChemicalMethods(x))", "all x.(Element(x) -> -CanBeDecomposedBySimpleChemicalMethods(x))", "all x.((Element(x) & DecomposedBySimpleChemicalMethods(x)) -> -(DifferentSubstances(x,2) & DifferentSubstances(x,3))))", "all x y.((Element(x) & Substance(y)) -> -DecomposedBySimpleChemicalMethods(x,y))", "all x.((Element(x) & -DecomposedBySimpleChemicalMethods(x)) -> -DifferentSubstances(x))", "all x y.((Element(x) & Substance(y) & DecomposedBySimpleChemicalMethods(x,y)) -> -DecomposedBySimpleChemicalMethods(x,y))", "all x y.((Element(x) & Substance(y) & SimpleChemicalMethod(x,y)) -> -DecomposedBy(x,y))", "all x y.((Element(x) & Substance(y)) -> -CanBeDecomposedBySimpleChemicalMethods(x,y))", "exists x.(Element(x) & -(DecomposedIntoSubstances(x,2) & DecomposedBySimpleChemicalMethods(x,2)))", "exists x.(Element(x) & -(Decomposed(x,2) & Decomposed(x,3)) & SimpleChemicalMethods(x)))", "exists x.(Element(x) & -(DecomposedBySimpleChemicalMethods(x,2) & DifferentSubstances(x)))", "all x.(Element(x) -> -DecomposedBySimpleChemicalMethods(x))"]}
{"id": "entailmentbank_validation_803", "nl": "sulfur cannot be decomposed into different substances by simple chemical methods.", "fol": "", "prediction": ["all x.(Sulfur(x) -> -DecomposedBySimpleChemicalMethods(x))", "all x y.((Sulfur(x) & Substance(y)) -> -DecomposedBySimpleChemicalMethods(x,y))", "all x.(Sulfur(x) -> -CanBeDecomposedBySimpleChemicalMethods(x))", "all x y.((Sulfur(x) & Substance(y)) -> -CanBeDecomposedBySimpleChemicalMethods(x,y))", "(-DecomposedBySimpleChemicalMethods(sulfur))", "all x.((Sulfur(x) & SimpleChemicalMethods(x)) -> -Decomposed(x,Sulfur))", "all x.(Sulfur(x) -> -DecomposedBySimpleChemicalMethods(x))", "all x.(Sulfur(x) -> -(DecomposedBySimpleChemicalMethods(x) | DecomposedBySimpleChemicalMethods(x)))", "(all x.(Sulfur(x) -> -DecomposedBySimpleChemicalMethods(x)))", "-exists x.(Sulfur(x) & -DecomposedBySimpleChemicalMethods(x))", "all x.(Sulfur(x) -> -CanBeDecomposedBySimpleChemicalMethods(x))", "all x y.((Sulfur(x) & Substance(y)) -> -DecomposedBySimpleChemicalMethods(x,y))", "all x y.((Sulfur(x) & Substance(y) & SimpleChemicalMethods(x,y)) -> -DecomposedBy(x,y))", "all x y.((Sulfur(x) & SimpleChemicalMethod(y)) -> -DecomposedBy(x,y))", "all x.(Sulfur(x) -> -DecomposedBySimpleChemicalMethods(x))", "all x.(Sulfur(x) -> -CanBeDecomposed(x))"]}
{"id": "entailmentbank_validation_804", "nl": "sulfur is a kind of element.", "fol": "", "prediction": ["all x.(Sulfur(x) -> Element(x))", "all x.(Sulfur(x) -> Element(x))", "All x y.((Sulfur(x) & Element(y)) -> Is(x,y))", "all x.(Sulfur(x) -> Elements(x))", "all x.((Sulfur(x) & Element(x)) -> Element(x))", "all x y.((Sulfur(x) & Element(y)) -> Elements(x))", "(all x.(Sulfur(x) -> Elements(x)))", "all x.(Sulfur(x) -> Element(x))", "All x y.((Sulfur(x) & Element(y)) -> Element(x,y))", "all x.((Sulfur(x) & Element(x)) -> Is(x,y))", "all x.(Sulfur(x) -> Elements(x))", "all x.(Sulfur(x) -> Element(x))", "all x.(Sulfur(x) -> Elements(x))", "all x.(Sulfur(x) -> Element(x))", "exists x.(Sulfur(x) & Elements(x))", "exists x.(Sulfur(x) & Element(x))"]}
{"id": "entailmentbank_validation_805", "nl": "iron is a kind of element.", "fol": "", "prediction": ["all x.(Iron(x) -> Element(x))", "all x.(Iron(x) -> Element(x))", "all x y.((Iron(x) & Element(y)) -> Is(x,y))", "(all x.(Iron(x) -> Element(x)))", "all x.(Iron(x) -> Element(x))", "all x.(Element(x) -> Iron(x))", "all x y.((Iron(x) & Element(y)) -> Element(x))", "(all x.(Iron(x) -> Element(x)))", "all x.(Iron(x) -> Elements(x))", "all x y.((Iron(x) & Element(y)) -> Is(x,y))", "all x.(Iron(x) -> Element(x))", "all x.(Element(x) -> Iron(x))", "all x.(Iron(x) -> Elements(x))", "exists x.(Element(x) & Iron(x))", "all x.(Iron(x) -> Element(x))", "all x.(Iron(x) -> Element(x))"]}
{"id": "entailmentbank_validation_806", "nl": "the chemical symbol for iron is fe.", "fol": "", "prediction": ["all x.((ChemicalSymbol(x) & Iron(x)) -> Fe(x))", "the chemical symbol for iron is fe.", "-(ChemicalSymbol(iron) & Fe(iron))", "(ChemicalSymbolForIron(x) & Fe(x))", "all x.(Iron(x) -> ChemicalSymbol(x))", "all x y.((ChemicalSymbol(x) & Iron(y)) -> Fe(x,y))", "all x.((ChemicalSymbol(x) & Iron(x)) -> Fe(x))", "the chemical symbol for iron is fe.", "(ChemicalSymbol(iron) & Fe(iron))", "(ChemicalSymbolForIron(fe) -> ChemicalSymbolForIron(fe))", "(ChemicalSymbolForIron(x) -> Fe(x))", "all x.(Iron(x) -> ChemicalSymbolFe(x))", "all x.((ChemicalSymbol(x) & Iron(x)) -> Fe(x))", "all x.(ChemicalSymbol(x) -> Iron(x))", "-Fe.", "(ChemicalSymbolForIron(x) -> Fe(x))"]}
{"id": "entailmentbank_validation_807", "nl": "fe is the chemical symbol for iron element.", "fol": "", "prediction": ["all x.(Fe(x) -> ChemicalSymbolForIronElement(x))", "(ChemicalSymbol(fe) & IronElement(f))", "fe is the chemical symbol for ironElement(f))", "Symbol(fe) -> ChemicalSymbolForIronElement(fe))", "all x y.((Fe(x) & IronElement(y)) -> ChemicalSymbol(x,y))", "all x.(Fe(x) -> ChemicalSymbolForIronElement(x))", "(ChemicalSymbol(fe) & IronElement(fe))", "fe is the chemical symbol for ironElement(f))", "-Fe (ChemicalSymbolForIronElement)", "(ChemicalSymbolForIronElement(fe))", "fe (Fe) -> ChemicalSymbol(x))", "all x.(Fe(x) -> ChemicalSymbolForIronElement(x))", "(ChemicalSymbol(fe) & IronElement(fe))", "all x.(Fe(x) -> ChemicalSymbolForIronElement(x))", "all x.(Fe(x) -> ChemicalSymbolForIronElement(x))", "all x.(Fe(x) -> ChemicalSymbol(x))"]}
{"id": "entailmentbank_validation_808", "nl": "if a substance is made of one element, then the substance is called an element.", "fol": "", "prediction": ["all x.((Substance(x) & MadeOfOneElement(x)) -> Element(x))", "all x.((Substance(x) & MadeOfOneElement(x)) -> Elements(x))", "all x y.((Substance(x) & MadeOfOneElement(x)) -> Element(y))", "all x.((Substance(x) & MadeOfElement(x)) -> Element(x))", "all x.((Substance(x) & MadeOfOneElement(x)) -> Element(x))", "all x y.((Substance(x) & Element(y) & MadeOf(x,y)) -> Element(x))", "all x.(MadeOfOneElement(x) -> Element(x))", "all x y.((Substance(x) & MadeOf(x,y)) -> Element(x))", "all x y.((Substance(x) & MadeOfOneElement(x,y)) -> Element(x))", "exists x.(Substance(x) & MadeOfOneElement(x))", "all x.((Substance(x) & MadeOfElement(x)) -> Element(x))", "all x.((Substance(x) & MadeOfOneElement(x)) -> Elements(x))", "all x y.((Substance(x) & Element(y) & MadeOf(x,y)) -> Element(x))", "exists x.(Substance(x) & MadeOfElement(x))", "all x.((Substance(x) & MakesOfOneElement(x)) -> Elements(x))", "all x.((Substance(x) & MadeOfOneElement(x)) -> Element(x))"]}
{"id": "entailmentbank_validation_809", "nl": "oxygen gas is made of only oxygen element.", "fol": "", "prediction": ["all x.(OxygenGas(x) -> MadeOfOxygenElement(x))", "all x y.((OxygenGas(x) & OxygenElement(y)) -> MadeOf(x,y))", "all x.(OxygenGas(x) -> MadeOfOxygenElement(x))", "(OxygenGas(Oxygen) & MadeOfOxygenElement(Oxygen))", "all x y.((OxygenGas(x) & OxygenElement(y)) -> MadeOf(x,y))", "all x.(OxygenGas(x) -> MadeOfOxygenElement(x))", "all x y.((OxygenGas(x) & Element(y)) -> MadeOf(x,y))", "all x.(OxygenGas(x) -> (MadeOfOxygenElement(x) & -MadeOfOxygenElement(x)))", "(OxygenGas(Oxygen) & MadeOfOxygen(OxygenElement))", "all x.(OxygenGas(x) -> MadeOfOxygenElement(x))", "all x.(OxygenGas(x) -> MadeOfOxygenElement(x))", "all x y.((OxygenGas(x) & OxygenElement(y)) -> MadeOf(x,y))", "all x.(OxygenGas(x) -> MadeOfOxygenElement(x))", "all x.(OxygenGas(x) -> MadeOfOxygenElement(x))", "exists x.(OxygenGas(x) & MadeOf(x,OxygenElement))", "exists x.(OxygenGas(x) & ContainsOxygenElement(x))"]}
{"id": "entailmentbank_validation_810", "nl": "oxygen gas is an element.", "fol": "", "prediction": ["all x.(OxygenGas(x) -> Element(x))", "(Element(oxygenGas) & Element(Oxygen))", "(Element(OxygenGas) & Element(OxygenGas))", "all x.(OxygenGas(x) -> Element(x))", "all x y.((OxygenGas(x) & Element(y)) -> Element(x,y))", "oxygenGasElement(x)", "all x.(OxygenGas(x) -> Element(x))", "all x y.((OxygenGas(x) & Element(y)) -> Is(x,y))", "all x.(OxygenGas(x) -> Element(x))", "all x.(OxygenGasElement(x) -> Element(x))", "all x.(OxygenGas(x) -> Element(x))", "all x.(OxygenGas(x) -> Elements(x))", "all x.(OxygenGas(x) -> Element(x))", "All x.(OxygenGas(x) -> Elements(x))", "exists x.(OxygenGasElement(x))", "All x.(OxygenGas(x) -> Elements(x))"]}
{"id": "entailmentbank_validation_811", "nl": "o2 is a chemical formula for oxygen gas.", "fol": "", "prediction": ["all x.(O2(x) -> ChemicalFormationForOxygenGas(x))", "all x y.((O2(x) & OxygenGas(y)) -> ChemicalFormation(x,y))", "(ChemicalFormationForOxygen(o2))", "o2 is a chemical formula for oxygenGas(o))", "all x.(O2(x) -> ChemicalFormationForOxygenGas(x))", "(ChemicalFormationForOxygenGas(o2))", "o2 is a chemical formula for oxygenGas.", "all x.(O2(x) -> ChemicalFormation(x))", "all x y.((O2(x) & OxygenGas(y)) -> ChemicalForm(x,y))", "(ChemicalFormulaForOxygen(o2))", "all x.(O2(x) -> ChemicalForm(x))", "all x y.((O2(x) & OxygenGas(y)) -> ChemicalFormation(x,y))", "(ChemicalFormationForOxygenGas(o2))", "all x.(O2(x) -> ChemicalFormula(x))", "all x.(O2 -> ChemicalFormation(x))", "all x.(O2(x) -> ChemicalFormationForOxygenGas(x))"]}
{"id": "entailmentbank_validation_812", "nl": "o2 is an element.", "fol": "", "prediction": ["all x.(O2(x) -> Element(x))", "all x.(O2(x) -> Element(x))", "(Element(o2))", "O2 is anElement(x)", "o2 is anElement.", "all x.(O2Element(x) -> Element(x))", "(Element(o2))", "all x.(O2(x) -> Element(x))", "exists x y.(O2Element(x) & Element(y))", "o2 is anElement.", "all x.(O2Element(x) -> Element(x))", "all x.((O2Element(x)) -> Element(x))", "all x.(O2(x) -> Element(x))", "all x.(O2Element(x) -> Is(x,y))", "all x.(O2(x) -> Element(x))", "All x.(O2(x) -> Elements(x))"]}
{"id": "entailmentbank_validation_813", "nl": "the chemical symbol for tellurium is te.", "fol": "", "prediction": ["all x.(Tellurium(x) -> ChemicalSymbol(x))", "the chemical symbol for tellurium is te.", "all x.(ChemicalSymbol(x) -> Tellurium(x))", "(ChemicalSymbolForTellurium(x) -> Te(x))", "all x y.((ChemicalSymbol(x) & Tellurium(y)) -> Te(x))", "all x.(ChemicalSymbolForTellurium(x) -> Te(x))", "(ChemicalSymbol(te) & Tellurium(te))", "all x.(Te(x) -> ChemicalSymbolForTellurium(x))", "all x y.((ChemicalSymbol(x) & Tellurium(y)) -> (Te(x) & ChemicalSymbol(x,y)))", "(ChemicalSymbol(x) & Tellurium(x))", "all x.(Tellurium(x) -> ChemicalSymbol(x))", "(ChemicalSymbolForTellurium(x) & Te(x))", "-Te.", "all x.(ChemicalSymbol(x) -> Te(x))", "(ChemicalSymbolForTellurium(x) -> Te(x))", "all x.(Tellurium(x) -> ChemicalSymbolTe(x))"]}
{"id": "entailmentbank_validation_814", "nl": "tellurium is a kind of metalloid.", "fol": "", "prediction": ["all x.(Tellurium(x) -> Metalloid(x))", "all x.(Tellurium(x) -> Metalloid(x))", "all x y.((Tellurium(x) & Metalloid(y)) -> Is(x,y))", "tellurium (Metalloid)", "all x.(Teacherium(x) -> Metalloid(x))", "all x.(Tellurium(x) -> Metalloid(x))", "all x y.((Tellurium(x) & Metalloid(y)) -> Metalloid(x))", "all x.(Tellurium(x) -> Metalloid(x))", "all x.(Teacherium(x) -> Metalloid(x))", "(Metalloid)", "all x.(Tellurium(x) -> Metalloid(x))", "(Metalloid)", "all x.(Tellurium(x) -> Metalloid(x))", "all x.(Tellurium(x) -> Metalloid(x))", "exists x.(Tellurium(x) & Metalloid(x))", "exists x.(Tetrium(x) & Metalloid(x))"]}
{"id": "entailmentbank_validation_815", "nl": "te is a kind of metalloid.", "fol": "", "prediction": ["all x.(Te(x) -> Metalloid(x))", "all x.(Te(x) -> Metalloid(x))", "all x y.((Te(x) & Metalloid(y)) -> Metalloid(x))", "all x.((Te(x) & Metalloid(x)) -> Metalloid(x))", "all x.(Te(x) -> Metalloid(x))", "all x y.((Te(x) & Metalloid(y)) -> Metalloid(x))", "(Metalloid)", "all x.(Te(x) -> Metalloid(x))", "(Metalloid)", "all x y.((Te(x) & Metalloid(y)) -> Metalloid(x))", "all x.(Te(x) -> Metalloid(x))", "exists x.(Metalloid(x) & Metalloid(x))", "(Metalloid)", "all x.(Te(x) -> Metalloid(x))", "exists x.(Te(x) & Metalloid(x))", "exists x.(Te(x) & Metalloid(x))"]}
{"id": "entailmentbank_validation_816", "nl": "antimony is a kind of metalloid.", "fol": "", "prediction": ["all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x y.((Antimony(x) & Metalloid(y)) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x y.((Antimony(x) & Metalloid(y)) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "exists x.(Atomophore(x) & Metalloid(x))", "(Metalloid)", "all x.(Antimony(x) -> Metalloid(x))", "(Metalloid)", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))"]}
{"id": "entailmentbank_validation_817", "nl": "the chemical symbol for antimony is sb.", "fol": "", "prediction": ["all x.(Antimony(x) -> ChemicalSymbol(x))", "the chemical symbol for antimony is sb.", "(ChemicalSymbol(antimony) & Sb(antimony))", "all x.(Antimony(x) -> ChemicalSymbol(x,sb))", "all x y.((ChemicalSymbol(x) & Antimony(y)) -> (Sb(x) & Antimony(y)))", "(ChemicalSymbol(antimony) -> sb))", "the chemical symbol for antimony is sb.", "-(ChemicalSymbolForAntimony(x) & Antimony(x)))", "(ChemicalSymbolForAntimony(x) -> sb(x))", "(ChemicalSymbol(antimony) -> sb(antimony))", "all x.(Antimony(x) -> ChemicalSymbol(x))", "all x.(AntimonyChemicalSymbol(x) -> (Sb(x) & AntimonyChemicalSymbol(x)))", "all x.(Antimony(x) -> ChemicalSymbol(x,sb))", "(ChemicalSymbol(antimony) & Sb(antimony))", "all x.(Antimony(x) -> ChemicalSymbol(x,Sb))", "all x.(Antimony(x) -> ChemicalSymbol(x))"]}
{"id": "entailmentbank_validation_818", "nl": "sb is a kind of metalloid.", "fol": "", "prediction": ["all x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "all x y.((Sb(x) & Metalloid(y)) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "(Metalloid(sb) & Metalloid(sb))", "all x.((Sb(x) & Metalloid(x)) -> Metalloid(x))", "all x y.(Sb(x) -> Metalloid(y))", "all x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "all x y.(Sb(x) -> Metalloid(y))", "(Metalloid)", "all x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "exists x.(Sb(x) & Metalloid(x))", "exists x.(SB(x) & Metalloid(x))"]}
{"id": "entailmentbank_validation_819", "nl": "sb and te are both metalloids.", "fol": "", "prediction": ["(Metalloid(sb) & Metalloid(te))", "all x.((Sb(x) | Tee(x)) -> Metalloid(x))", "((Sb(Sb) & -Te(Te)) -> Metalloid(Sb) & Metalloid(Te))", "all x.((Sb(x) & -Te(x)) -> Metalloid(x))", "all x y.((Sb(x) & Tee(y)) -> Metalloid(x))", "(Metalloid(sb) & Metalloid(te))", "(Metalloids(sb) & Metalloids(te))", "-((Sb(sb) & -Te(te)) -> Metalloid(s))", "all x.((Sb(x) | Te(x)) -> Metalloid(x))", "((Sb) & -Te)) | Metalloid(sb))", "(Melloid(sb) & Metalloid(te))", "((Sb(Sb) | Tee(Te)))", "all x.((Sb(x) & -Te(x)) -> Metalloid(x))", "both metalloids (Sb(s) & Te(te))", "all x.(Metalloid(x) -> (Sb(x) | Te(x)))", "(Metalloids(sb) & Metalloids(te))"]}
{"id": "entailmentbank_validation_820", "nl": "helium / neon / argon / krypton / xenon / radon belongs to noble gases family, group 18 on the periodic table.", "fol": "", "prediction": ["all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> NobleGasesFamily(x))", "all x y z.((Holium(x) & Neon(y) & Argon(z) & Krypton(z) & Xenon(x) & Radon(x)) -> NobleGasesFamily(x,y,z))", "(NobleGasFamily(helium) & NobleGasFamily(neon) & NobleGasFamily(argon) & NobleGasFamily(krypton) & NobleGasFamily(xenon) & NobleGasFamily(radon))", "all x.((HollowGasFamily(x) & NobleGases(x) & Group18(x)) -> (Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)))", "all x y.((HollowGasFamily(x) & NobleGasFamily(y) & Group18(x)) -> (Helium(x) & Neon(x) & Argon(y) & Krypton(y) & Xenon(y) & Radon(y)))", "(Holeum,Holium,Neon,Argon,Krypton,Xenon,Rodon) & NobleGasesFamily(HoleGasesFamily(HoleGasesFamily(HoleGasesFamily(HoleGasesFamily(HoleGasesFamily(HoleGasesFamily(HoleGasesFamily(HoleGasesFamily(HoleGasesFamily(HoleGasesFamily(HoleGasesFamily(HoleGasesFamily(HoleGasesFamily(HoleGasesFamily(HoleGases)Family(HoleGases)Family(HoleGases)Family(HoleGases)Family(HoleGases)Family(HoleGases))))", "(HollowGases(helium) & NobleGases(neon) & NobleGases(argon) & NobleGases(krypton) & NobleGases(xenon) & NobleGases(radon))", "(HollowGasesFamily(helium) & NobleGasesFamily(neon) & NobleGasesFamily(argon) & NobleGasesFamily(krypton) & NobleGasesFamily(xenon) & NobleGasesFamily(radon))", "all x y.((HollowGasFamily(x) & NobleGases(y) & Group18(x)) -> (Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> NobleGasesFamily(x))", "all x.((Hydro(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> NobleGasesFamily(x,18))", "all x y z.((Helium(x) & Neon(y) & Argon(z) & Krypton(z) & Xenon(x) & Radon(x)) -> NobleGasesFamily(x,y,z))", "all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> NobleGasesFamily(x))", "(NobleGasFamily(helium) & NobleGasFamily(neon) & NobleGasFamily(argon) & NobleGasFamily(krypton) & NobleGasFamily(xenon) & NobleGasFamily(radon))", "all x.((Holeum(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x)) -> NobleGasesFamily(x))", "all x y z.((Holium(x) & Neon(y) & Argon(z) & Krypton(z) & Xenon(x)) -> NobleGasesFamily(x,y,z))"]}
{"id": "entailmentbank_validation_821", "nl": "elements in group 18 have complete outer electron shells on the periodic table of elements.", "fol": "", "prediction": ["all x.((Element(x) & Group18(x)) -> CompleteOuterElectronShells(x))", "all x.((ElementsInGroup18(x) & CompleteOuterElectronShells(x)) -> PeriodicTableOfElements(x))", "all x y.((Element(x) & Group18(y)) -> CompleteOuterElectronShells(x,y))", "(CompleteOuterElectronShells(elements) & OnPeriodicTableOfElements(elements,group18))", "all x.((Element(x) & Group18(x)) -> CompleteOuterElectronShells(x))", "(all x.(Group18(x) -> CompleteOuterElectronShells(x)))", "all x y.((Element(x) & Group18(x) & PeriodicalTableOfElements(y)) -> CompleteOuterElectronShells(x,y))", "all x.(Group18(x) -> CompleteOuterElectronShells(x))", "all x y.((Element(x) & Group18(y)) -> CompleteOuterElectronShells(x,y))", "all x.((Element(x) & Group18(x)) -> CompleteOuterElectronShellsOnPeriodicTableOfElements(x))", "all x.((ElementsInGroup18(x) & CompleteOuterElectronShells(x)) -> PeriodicTableOfElements(x))", "all x.(ElementsInGroup18(x) -> CompleteOuterElectronShells(x))", "all x y.((Element(x) & Element(y) & Group18(x)) -> CompleteOuterElectronShells(x,y))", "(all x.(Group18(x) -> CompleteOuterElectronShells(x)))", "all x.(Group18Elements(x) -> CompleteOuterElectronShells(x))", "all x y.((Element(x) & Group18(x)) -> CompleteOuterElectronShells(x,y))"]}
{"id": "entailmentbank_validation_822", "nl": "helium, neon, argon, krypton, xenon, and radon have complete outer electron shells.", "fol": "", "prediction": ["all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> CompleteOuterElectronShells(x))", "all x y z.((Helium(x) & Neon(y) & Argon(z) & Krypton(z) & Xenon(z) & Radon(x)) -> CompleteOuterElectronShells(x))", "(OuterElectronShells(helium) & OuterElectronShells(neon) & OuterElectronShells(argon) & OuterElectronShells(krypton) & OuterElectronShells(xenon) & OuterElectronShells(radon))", "(CompleteOuterElectronShells(helium) & CompleteOuterElectronShells(neon) & CompleteOuterElectronShells(argon) & CompleteOuterElectronShells(krypton) & CompleteOuterElectronShells(xenon) & CompleteOuterElectronShells(radon))", "(ExternalElectronShells(helium) & CompleteOuterElectronShells(neon) & CompleteOuterElectronShells(argon,krypton,xenon,radon))", "all x y.((Helium(x) & Neon(y) & Argon(y) & Krypton(y) & Xenon(y) & Radon(z)) -> CompleteOuterElectronShells(x))", "(CompleteOuterElectronShells(helium,neon) & CompleteOuterElectronShells(neon,argon,krypton,xenon,radon))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> CompleteOuterElectronShells(x))", "all x.((Hydro(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> CompleteOuterElectronShells(x))", "all x y z.((Helium(x) & Neon(y) & Argon(z) & Krypton(z) & Xenon(z)) -> CompleteOuterElectronShells(x,y,z))", "(CompleteOuterElectronShells(helium) & CompleteOuterElectronShells(neon) & CompleteOuterElectronShells(argon) & CompleteOuterElectronShells(krypton) & CompleteOuterElectronShells(xenon) & CompleteOuterElectronShells(radon))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> CompleteOuterElectronShells(x))", "(CompleteOuterElectronShells(helium) & CompleteOuterElectronShells(neon,neon) & CompleteOuterElectronShells(argon,krypton,xenon,radon))", "(All x.(Hydro(x) -> CompleteOuterElectronShell(x)))", "all x y.((Helium(x) | Neon(y) | Argon(y) | Krypton(y) | Xenon(y) | Radon(y)) -> CompleteOuterElectronShells(x,y))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> CompleteOuterElectronShells(x))"]}
{"id": "entailmentbank_validation_823", "nl": "if the outermost electron shell of an atom is complete, then the element of those atoms will not react with other elements easily.", "fol": "", "prediction": ["all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> -ReactsWithElementsEasily(x,y))", "all x.((OutermostElectronShell(x) & Complete(x)) -> ElementOfAtoms(x))", "all x y z.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> -ReactsWithElementsEasily(y,z))", "all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x)) -> -ReactsWithElementsEasily(y))", "-(CompleteOutermostElectronShell(x) & Atom(x)) -> Element(x))", "(CompleteOutermostElectronShell(Atom) -> ElementOfAtoms(Atoms))", "all x.((OutermostElectronShell(x) & Complete(x)) -> -ReactsWithElementsEasily(x))", "all x y.((Atom(x) & Atom(y) & CompleteElectronShell(x)) -> -ReactsWithElementsEasily(x,y))", "all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> -ReactsWithElementsEasily(y,x))", "all x y z.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> -ReactsWithElements(z,y))", "all x.((ExternalmostElectronShell(x) & Complete(x)) -> Element(x,y))", "all x.((OutermostElectronShell(x) & Complete(x)) -> ElementOfAtoms(x))", "all x y z.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> Element(z) & -ReactsWithElementsEasily(z))", "all x.((OutermostElectronShell(x) & Complete(x)) -> -ReactsWithOtherElementsEasily(x))", "all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> -ReactsWithElements(x,y))", "all x.((OutermostElectronShell(x) & Complete(x)) -> ElementOfAtoms(x))"]}
{"id": "entailmentbank_validation_824", "nl": "helium, neon, argon, krypton, xenon, and radon will not react with other elements easily.", "fol": "", "prediction": ["all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> -ReactsWithElementsEasily(x))", "all x y.((Helium(x) & Neon(y) & Argon(y) & Krypton(y) & Xenon(y) & Radon(y)) -> -ReactsWithElementsEasily(x,y))", "all x y z.((Helium(x) & Neon(y) & Argon(z) & Krypton(z) & Xenon(z) & Radon(z)) -> -ReactsWithElementsEasily(x,y,z))", "(-ReactsWithElementsEasily(helium,neon,argon,krypton,xenon,radon))", "(all x.(Hydro(x) -> -ReactsWithElements(x)))", "all x y.((Helium(x) | Neon(x) | Argon(y) | Krypton(y) | Xenon(y) | Radon(y))) -> -ReactsWithElementsEasily(x,y))", "(all x.(Hydro(x) -> (Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))))", "(all x.(Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> -ReactsWithElementsEasily(x))", "(all x y z.((Helium(x) & Neon(y) & Argon(z)) | (Krypton(z) | Xenon(z) | Radon(z)))) -> -ReactsWithElementsEasily(x,y,z))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> -ReactsWithElementsEasily(x))", "all x y z.((Helium(x) | Neon(y) | Argon(y) | Krypton(z) | Xenon(z) | Radon(z))) -> -ReactsWithElementsEasily(x,y,z))", "all x y.((Hydro(x) & (Neon(y) | Argon(y) | Krypton(y) | Xenon(y) | Radon(y))) -> -ReactsWithElementsEasily(x,y))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> -ReactsWithElementsEasily(x))", "(all x.(Hydro(x) -> -ReactsWithElements(x)))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> -ReactsWithElementsEasily(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) & -ReactsEasilyWithElements(x))"]}
{"id": "entailmentbank_validation_825", "nl": "water is a kind of substance.", "fol": "", "prediction": ["all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> Substance(x))", "all x y.((Water(x) & Substance(y)) -> Substance(x))", "all x.(Water(x) -> Substance(x))", "(all x.(Water(x) -> Substance(x)))", "all x y.((Water(x) & Substance(y)) -> Substance(x,y))", "all x.((Water(x) & Substance(x)) -> Substance(x))", "all x.(Water(x) -> Substance(x))", "(all x.(Water(x) -> Substance(x)))", "all x y.((Water(x) & Substance(y)) -> Contains(x,y))", "all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> Substance(x))", "exists x.(Water(x) & ContainsSubstance(x))", "exists x.(Water(x) & Substance(x))"]}
{"id": "entailmentbank_validation_826", "nl": "boiling means matter / a substance changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidToGas(y) & IncreasesHeatEnergy(y)))", "all x.(BoilingMatter(x) -> (ChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))", "all x y z.((Boiling(x) & Substance(y) & Liquid(z)) -> ChangesToGasByIncreasingHeatEnergy(y,z))", "all x.(Boiling(x) -> (Matter(x) & SubstanceChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))", "all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidToGas(y,x) & IncreasesHeatEnergy(y,x)))", "all x y z.((BoilingMatter(x) & Substance(y) & Liquid(z)) -> ChangesToGasByIncreasingHeatEnergy(y,z))", "all x y.((BoilingMatter(x) & Substance(y)) -> (ChangesFromLiquidToGas(y,x) & IncreasesHeatEnergy(y,x)))", "all x.((Boiling(x) & Matter(x)) -> ChangesFromLiquidToGasByIncreasedHeatEnergy(x))", "(BoilingMatter(b) & ChangesFromLiquidToGasByIncreasingHeatEnergy(c))", "all x.(BoilingMatter(x) -> (ChangesFromLiquidToGasByIncreasingHeatEnergy(x)))", "all x.((BoilingMatter(x) & SubstanceChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)) -> ChangesFromLiquidToGas(x))", "all x y z.((Boiling(x) & Substance(y) & Liquid(z)) -> (ChangesFromToGas(y,z) & IncreasesHeatEnergy(y,z)))", "all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidIntoGas(x,y) & IncreasesHeatEnergy(x,y)))", "all x.(BoilingMatter(x) -> (ChangesFromLiquidToGasByIncreasedHeatEnergy(x)))", "all x y.((BoilingMatter(x) & Substance(y)) -> (ChangesFromLiquidToGas(x,y) & IncreasesHeatEnergy(x,y)))", "all x.(BoilingMatter(x) -> (ChangesFromLiquidIntoGasByIncreasingHeatEnergy(x)))"]}
{"id": "entailmentbank_validation_827", "nl": "water boiling is when water changes from a liquid into a gas.", "fol": "", "prediction": ["all x.((Water(x) & Liquid(x) & Gas(x)) -> Boiling(x))", "all x.(WaterBoiling(x) -> ChangesLiquidToGas(x))", "all x y.((Water(x) & Liquid(y) & Gas(z)) -> ChangesTo(x,y,z))", "all x.(WaterBoiling(x) -> WaterChangesFromLiquidToGas(x))", "all x.((Water(x) & Liquid(x)) -> Gas(x))", "(WaterBoiling(water) -> ChangesFromLiquidToGas(water))", "all x y.((Water(x) & Liquid(y)) -> ChangesToGas(x,y))", "all x.((WaterBoiling(x) & Liquid(x)) -> Gas(x))", "all x y z.((Water(x) & Liquid(y) & Gas(z)) -> ChangesTo(x,y,z))", "all x.((WaterBoiling(x) & WaterChangesFromLiquidToGas(x)) -> WaterChangesToGas(x))", "all x y.((WaterBoiling(x) & Liquid(y) & Gas(y)) -> ChangesTo(x,y))", "all x.(WaterBoiling(x) -> (WaterChangesFromLiquidToGas(x)))", "all x y.((Water(x) & Liquid(y) & Gas(y)) -> ChangesInto(x,y))", "all x y z.((Water(x) & Liquid(y) & Gas(z) & ChangesFromTo(x,y,z)) -> Boiling(x))", "all x.((WaterBoiling(x) & WaterChangesFromLiquidToGas(x)) -> WaterChangesFromLiquidToGas(x))", "all x.(WaterBoiling(x) -> ChangesFromLiquidToGas(x))"]}
{"id": "entailmentbank_validation_828", "nl": "water is in the gas state, called water vapor / steam, for temperatures above 100 c.", "fol": "", "prediction": ["all x.((Water(x) & GasState(x) & TemperatureAbove100C(x)) -> WaterVaporSteam(x))", "all x.((Water(x) & GasState(x)) -> (WaterVapor(x) | WaterSteam(x)))", "all x.(Water(x) -> (WaterVapor(x) | WaterSteam(x)) & TemperaturesAbove100C(x)))", "(GasState(WaterVapor(Water) & WaterSteam(Water))", "all x.(Water(x) -> (InGasState(x) & WaterVaporSteam(x) & TemperaturesAbove100C(x)))", "all x y.((Water(x) & Temperature(y)) -> (WaterVapor(x,y) & WaterSteam(x,y)))", "(Water(Water) & GasState(WaterVapor(Water) & Steam(Water) & TemperaturesAbove100C(Water,C,100))", "all x y.((Water(x) & TemperatureAbove100C(y)) -> GasState(x,y))", "(GasState(water,water) & WaterVapor(water,water) & WaterSteam(water,water))", "all x.((Water(x) & GasState(x) & TemperatureAbove100C(x)) -> WaterVaporSteam(x))", "all x.((Water(x) & WaterVapor(x) & WaterSteam(x)) -> TemperatureAbove100C(x))", "(all x.(Water(x) -> Gas(x)) & exists y.(WaterVapor(y) & Steam(y)) & TemperatureAbove(x,y)))", "all x y.((Water(x) & GasState(y) & TemperatureAbove100C(x,y)) -> WaterVaporSteam(x))", "all x.(Water(x) -> (InGasState(x) & WaterVapor(x) & WaterSteam(x) & TemperaturesAbove100C(x)))", "all x.((Water(x) & Gas(x)) -> (WaterVapor(x) | WaterSteam(x)))", "all x y.((Water(x) & Temperature(y,100)) -> GasState(x))"]}
{"id": "entailmentbank_validation_829", "nl": "water is in the liquid state, called liquid water, for temperatures between 0 c and 100 c.", "fol": "", "prediction": ["all x.((Water(x) & LiquidState(x)) -> (Temperature(x,0) | Temperature(x,100)))", "all x.((Water(x) & LiquidState(x) & TemperaturesBetween(x,0,100)) -> LiquidWater(x))", "all x y.((Water(x) & LiquidState(x) & Temperature(y) & Between(x,y,z)) -> (LiquidWater(x) & Temperature(y,z) & Between(z,0) & Between(z,100)))", "(LiquidWater(water) & TemperaturesBetween(water,0,100))", "all x.(LiquidState(x) -> (Temperature(x,0) & Temperature(x,100)))", "all x y.((Water(x) & LiquidState(y)) -> (LiquidWater(x) & TemperaturesBetween(x,y,z) & TemperaturesBetween(z,0,100)))", "all x.((Water(x) & LiquidState(x)) -> TemperaturesBetween(x,0,100))", "all x.(LiquidState(x) -> (TemperaturesBetween(x,0,100)))", "all x.((Water(x) & LiquidState(x) & TemperaturesBetween0CAnd100C(x)) -> LiquidWater(x))", "all x y.((Water(x) & Temperature(y) & Between(x,y)) -> LiquidState(x))", "(LiquidWater(water) & TemperaturesBetween(water,0,100))", "(LiquidState(water,0,100))", "exists x.(Water(x) & LiquidState(x) & Temperature(x,0,100))", "all x y.((Water(x) & LiquidState(x) & Temperature(y) & Between(x,0,100,0)) -> LiquidWater(x))", "all x.(LiquidState(x) -> (Temperature(x,0) | Temperature(x,100)))", "all x.((Water(x) & LiquidState(x)) -> (TemperaturesBetween(x,0,100)))"]}
{"id": "entailmentbank_validation_830", "nl": "water boiling is when water changes from liquid water to water vapor.", "fol": "", "prediction": ["all x.(WaterBoiling(x) -> WaterChangesFromLiquidWaterToWaterVapor(x))", "all x.((Water(x) & LiquidWater(x) & WaterVapor(x)) -> Boiling(x))", "all x y.((Water(x) & LiquidWater(y) & WaterVapor(z)) -> ChangesTo(x,y,z))", "all x.(WaterBoiling(x) -> (WaterChangesFromLiquidWaterToWaterVapor(x)))", "(WaterBoiling(water) -> ChangesFromLiquidWaterToWaterVapor(water))", "all x.((Water(x) & ChangesFromLiquidWaterToWaterVapor(x)) -> BoilingWater(x))", "all x y z.((Water(x) & LiquidWater(y) & WaterVapor(z)) -> ChangesTo(x,y,z))", "all x y.((Water(x) & LiquidWater(y)) -> WaterVapor(x,y))", "all x.(WaterBoiling(x) -> ChangesFromLiquidWaterToWaterVapor(x))", "(WaterBoiling(Water) -> ChangesFromLiquidWaterToWaterVapor(Water))", "all x y.((Water(x) & LiquidWater(y) & WaterVapor(y)) -> ChangesTo(x,y))", "all x.((Water(x) & WaterChange(x)) -> Boiling(x))", "all x.(WaterBoiling(x) -> WaterChangesFromLiquidWaterToWaterVapor(x))", "all x.((WaterChangesFromLiquidWaterToWaterVapor(x)) -> BoilingWater(x))", "all x y.((Water(x) & LiquidWater(y)) -> ChangesToWaterVapor(x,y))", "all x y.((Water(x) & LiquidWater(y) & WaterVapor(z)) -> ChangesTo(x,y,z))"]}
{"id": "entailmentbank_validation_831", "nl": "water boiling is when water changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x.((Water(x) & Liquid(x) & Gas(x) & IncreasesHeatEnergy(x)) -> Boiling(x))", "all x.(WaterBoiling(x) -> (WaterChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))", "all x.((WaterBoiling(x) & Liquid(x) & Gas(x) & IncreasesHeatEnergy(x)) -> WaterChanges(x))", "all x y.((Water(x) & Liquid(y) & Gas(y)) -> ChangesByIncreasedHeatEnergy(x,y))", "(WaterBoiling(water) -> ChangesFromLiquidToGasByIncreasingHeatEnergy(water))", "all x.(WaterBoiling(x) -> (WaterChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))", "all x y.((WaterBoiling(x) & Liquid(y)) -> ChangesToGasByIncreasingHeatEnergy(x,y))", "all x y z.((Water(x) & Liquid(y) & Gas(z)) -> ChangesFromTo(x,y,z))", "all x y.((Water(x) & Liquid(y) & Gas(z)) -> ChangesFromTo(x,y,z))", "all x.((WaterBoiling(x) & WaterChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)) -> WaterChanges(x))", "all x y z.((WaterBoiling(x) & Liquid(y) & Gas(z)) -> ChangesFromTo(x,y,z))", "all x y.((WaterBoiling(x) & Liquid(y) & Gas(y)) -> ChangesByIncreasedHeatEnergy(x,y))", "all x.((WaterBoiling(x) & WaterChangesFromLiquidToGasByIncreasedHeatEnergy(x)) -> WaterChangesFromLiquidToGas(x))", "all x.(WaterBoiling(x) -> (WaterChangesFromLiquidToGasByIncreasingHeatEnergy(x)))", "all x.(WaterBoiling(x) -> (WaterChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))", "all x y z.((WaterBoiling(x) & Liquid(y) & Gas(z)) -> ChangesFromTo(x,y,z))"]}
{"id": "entailmentbank_validation_832", "nl": "a puddle is a kind of body of water.", "fol": "", "prediction": ["all x.(Puddle(x) -> BodyOfWater(x))", "all x.(Puddle(x) -> BodyOfWater(x))", "all x y.(Puddle(x) -> (BodyOfWater(y) & ContainsWater(x,y)))", "all x.(Puddle(x) -> BodyOfWater(x))", "all x y.(Puddle(x) -> (BodyOfWater(y) & Water(z) & Contains(x,z)))", "all x.(Puddle(x) -> BodyOfWater(x))", "all x y.(Puddle(x) -> BodyOfWater(y))", "all x.(Puddle(x) -> BodyOfWater(x))", "all x.(Puddle(x) -> BodyOfWater(x))", "all x.(Puddle(x) -> (BodyOfWater(x)))", "all x.(Puddle(x) -> BodyOfWater(x))", "all x y.(Puddle(x) -> BodyOfWater(y))", "all x.(Puddle(x) -> BodyOfWater(x))", "exists x.(Puddle(x) & BodyOfWater(x))", "exists x.(Puddle(x) & BodyOfWater(x))", "exists x.(Puddle(x) & BodyOfWater(x))"]}
{"id": "entailmentbank_validation_833", "nl": "being in the sun will cause the puddle to absorb heat energy.", "fol": "", "prediction": ["all x.(SunInPuddle(x) -> AbsorbsHeatEnergy(x))", "all x.((Puddle(x) & InSun(x)) -> AbsorbsHeatEnergy(x))", "all x y.((Puddle(x) & Sun(y)) -> AbsorbsHeatEnergy(x,y))", "all x.((SunInPuddle(x) & InPuddle(x)) -> AbsorbsHeatEnergy(x))", "all x.(SunIn(x) -> AbsorbsHeatEnergy(x))", "(InSun(puddle) -> AbsorbsHeatEnergy(puddle))", "All x y z.((Puddle(x) & Sun(y) & Sun(z) & In(x,y,z)) -> AbsorbsHeatEnergy(x))", "all x y.((Puddle(x) & Sun(y) & In(x,y)) -> AbsorbsHeatEnergy(x))", "all x y.((Puddle(x) & Sun(y)) -> AbsorbsHeatEnergy(x,y))", "all x.(InSun(x) -> AbsorbsHeatEnergy(x))", "all x.(SunInSun(x) -> AbsorbsHeatEnergy(x))", "All x y.((Puddle(x) & Sun(y) & InSun(x,y)) -> AbsorbsHeatEnergy(x,y))", "All x y.((Puddle(x) & Sun(y) & In(x,y)) -> AbsorbsHeatEnergy(x))", "all x y.((Puddle(x) & Sun(y)) -> AbsorbsHeatEnergy(x,y))", "all x.((Puddle(x) & InSun(x)) -> AbsorbsHeatEnergy(x))", "all x.(InSun(x) -> AbsorbsHeatEnergy(x))"]}
{"id": "entailmentbank_validation_834", "nl": "the puddle will evaporate.", "fol": "", "prediction": ["all x.(Puddle(x) -> Evaporates(x))", "all x y.((Puddle(x) & Puddle(y)) -> Evaporates(x,y))", "all x.(Puddle(x) -> Evaporates(x))", "-Evaporate(puddle)", "(EvaporatePuddle(puddle))", "all x.(Puddle(x) -> Evaporate(x))", "all x y.((Puddle(x) & Puddle(y)) -> Evaporates(x))", "the PuddleEvaporates(p)", "(EvaporatePuddle(puddle,p))", "all x.(Puddle(x) -> Evaporates(x))", "all x y.(Puddle(x) -> Evaporates(x))", "the PuddleEvaporates.", "all x.(Puddle(x) -> Evaporate(x))", "all x.(Puddle(x) -> Evaporates(x))", "all x.(Puddle(x) -> Evaporate(x))", "All x.(Puddle(x) -> Evaporates(x))"]}
{"id": "entailmentbank_validation_835", "nl": "an example of evaporation is a body of water drying up by absorbing heat energy.", "fol": "", "prediction": ["all x.(Evaporation(x) -> (BodyOfWater(x) & DryingUpByAbsorbingHeatEnergy(x)))", "all x.((BodyOfWater(x) & DryingUpByAbsorbingHeatEnergy(x)) -> Evaporation(x))", "all x y.((BodyOfWater(x) & HeatEnergy(y) & Absorbs(x,y)) -> Evaporation(x))", "all x.(Evaporation(x) -> (BodyOfWater(x) & DrysUpByAbsorbingHeatEnergy(x)))", "all x.(Evaporation(x) -> (BodyOfWater(x) & DrysUpByAbsorbingHeatEnergy(x)))", "all x y.((BodyOfWater(x) & HeatEnergy(y)) -> DryingUpByAbsorbing(x,y))", "all x y z.((BodyOfWater(x) & HeatEnergy(y) & Absorbs(x,y)) -> Evaporation(x))", "all x.((BodyOfWater(x) & DryingUpByAbsorbingHeatEnergy(x)) -> Evaporation(x))", "exists x.(BodyOfWater(x) & DryingUpByAbsorbingHeatEnergy(x))", "all x y.((BodyOfWater(x) & HeatEnergy(y) & Absorbs(x,y)) -> Evaporation(x))", "all x.((BodyOfWater(x) & DrysUpByAbsorbingHeatEnergy(x)) -> Evaporation(x))", "exists x.(BodyOfWater(x) & DrysUpByAbsorbingHeatEnergy(x))", "all x.(Evaporation(x) -> (BodyOfWater(x) & DryingUpByAbsorbingHeatEnergy(x)))", "all x y.((BodyOfWater(x) & HeatEnergy(y)) -> DryingUpByAbsorbing(x,y))", "all x.((BodyOfWater(x) & DryingUpByAbsorbingHeatEnergy(x)) -> Evaporation(x))", "exists x.(Evaporation(x) -> (BodyOfWater(x) & DrysUpByAbsorbingHeatEnergy(x)))"]}
{"id": "entailmentbank_validation_836", "nl": "a puddle drying in the sun is an example of evaporation.", "fol": "", "prediction": ["all x.((Puddle(x) & DryingInSun(x)) -> Evaporation(x))", "all x y.((Puddle(x) & Sun(y) & DryingIn(x,y)) -> Evaporation(x))", "all x.((Puddle(x) & DryingInSun(x)) -> Evaporation(x))", "all x y z.((Puddle(x) & Sun(y) & Sun(z) & DryingIn(x,y,z)) -> Evaporation(x))", "all x y.((Puddle(x) & Sun(y) & DryingIn(x,y)) -> Evaporation(x))", "all x.((Puddle(x) & DryingInSun(x)) -> Evaporation(x))", "all x y z.((Puddle(x) & Sun(y) & Sun(z)) -> DryingIn(x,y,z))", "all x y.((Puddle(x) & Sun(y) & DrysIn(x,y)) -> Evaporation(x))", "exists x.(Puddle(x) & DryingInSun(x) & Evaporation(x))", "all x.(Evaporation(x) -> (DryingPuddle(x) & InSun(x)))", "all x y.((Puddle(x) & Sun(y)) -> DryingIn(x,y))", "all x.((Puddle(x) & DryingInSun(x)) -> Evaporation(x))", "all x.((Puddle(x) & DryingInSun(x)) -> Evaporation(x))", "all x y.((Puddle(x) & Sun(y) & DryingIn(x,y)) -> Evaporation(x))", "all x.((Puddle(x) & DrysInSun(x)) -> Evaporation(x))", "all x.((Puddle(x) & DriesInSun(x)) -> Evaporation(x))"]}
{"id": "entailmentbank_validation_837", "nl": "if something is in the sunlight then that something will absorb solar energy.", "fol": "", "prediction": ["all x.((Sunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.(Sunlight(x) -> AbsorbsSolarEnergy(x))", "all x y.((Sunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(y))", "all x.((InSunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.((Sunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.(Sunlight(x) -> AbsorbsSolarEnergy(x))", "all x y.((Sunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(y))", "exists x.(Sunlight(x) & InSunlight(x) & AbsorbsSolarEnergy(x))", "all x y.((Sunlight(x) & In(x,y)) -> AbsorbsSolarEnergy(x,y))", "all x y.((Sunlight(x) & Sunlight(y) & InSunlight(x,y)) -> AbsorbsSolarEnergy(x,y))", "all x y.((Sunlight(x) & SomethingInSunlight(x)) -> AbsorbsSolarEnergy(y))", "all x.((Sunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "exists x.(Sunlight(x) & InSunlight(x) & AbsorbsSolarEnergy(x))", "all x.(Sunlight(x) -> AbsorbsSolarEnergy(x))", "all x y.((Sunlight(x) & InSunlight(x,y)) -> AbsorbsSolarEnergy(x,y))", "exists x.(Sunlight(x) & InSunlight(x) & AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_validation_838", "nl": "a bucket of water in in the sunlight.", "fol": "", "prediction": ["all x.((BootOfWater(x) & InSunlight(x)) -> InSunlight(x))", "all x y.((BootOfWater(x) & Sunlight(y)) -> In(x,y))", "exists x.(BoatOfWater(x) & InSunlight(x))", "all x y z.((BootOfWater(x) & Sunlight(y) & In(x,y,z)) -> In(x,y))", "all x.((BootOfWater(x) & InSunlight(x)) -> InSunlight(x))", "all x y.((BoatOfWater(x) & Sunlight(y)) -> In(x,y))", "all x y.((BootOfWater(x) & Sunlight(y)) -> In(x,y))", "exists x.(BoatOfWater(x) & InSunlight(x))", "exists x.(BootOfWater(x) & InSunlight(x))", "all x y z.((BootOfWater(x) & Sunlight(y) & In(x,y,z)) -> In(x,z))", "all x.((PoolOfWater(x) & InSunlight(x)) -> InSunlight(x))", "exists an x.(BoatOfWater(x) & InSunlight(x))", "all x y.((PoolOfWater(x) & Sunlight(y)) -> In(x,y))", "exists x.(PouchOfWater(x) & InSunlight(x))", "all x y.((PoolOfWater(x) & Sunlight(y)) -> InIn(x,y))", "exists x.(BoatOfWater(x) & InSunlight(x))"]}
{"id": "entailmentbank_validation_839", "nl": "the water in the bucket will absorb solar energy.", "fol": "", "prediction": ["all x.((Water(x) & Bucket(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Water(x) & Bucket(y)) -> AbsorbsSolarEnergy(x,y))", "all x.((WaterInBoot(x) & AbsorbsSolarEnergy(x)) -> WaterInBoot(x))", "the water in bucket will absorbssolarEnergy(Water,SolarEnergy))", "all x y.((Water(x) & Bucket(y)) -> AbsorbsSolarEnergy(x,y))", "(AbsorbsSolarEnergy(Water,Boot))", "all x y z.((Water(x) & Bucket(y) & Bucket(z)) -> AbsorbsSolarEnergy(x,y,z))", "all x.((WaterInBoot(x) & AbsorbsSolarEnergy(x)) -> WaterInBoot(x))", "all x y.((WaterInBoot(x) & Bucket(y)) -> AbsorbsSolarEnergy(x,y))", "all x.(WaterInBoot(x) -> AbsorbsSolarEnergy(x))", "all x.((WaterInBeak(x) & AbsorbsSolarEnergy(x)) -> WaterInBeak(x))", "(AbsorbsSolarEnergy(WaterInBoot))", "all x y.((Water(x) & Bucket(y)) -> AbsorbsSolarEnergy(x,y))", "all x.((WaterInBoot(x) & AbsorbsSolarEnergy(x)) -> WaterInBoot(x))", "all x.(Boot(x) -> AbsorbsSolarEnergy(x))", "all x y.((Water(x) & Bucket(y)) -> AbsorbsSolarEnergy(x,y))"]}
{"id": "entailmentbank_validation_840", "nl": "if a substance absorbs solar energy then that substance will increase in temperature.", "fol": "", "prediction": ["all x.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(x))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(y))", "all x.(AbsorbsSolarEnergy(x) -> IncreasesTemperature(x))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x) & Substance(y)) -> IncreasesTemperature(y))", "all x.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(x))", "all x y z.((Substance(x) & AbsorbsSolarEnergy(x,y) & Temperature(z)) -> IncreasesIn(x,z))", "exists x.(Substance(x) & AbsorbsSolarEnergy(x) & IncreasesTemperature(x))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(y))", "all x.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasedTemperature(x))", "all x.(AbsorbsSolarEnergy(x) -> IncreasesTemperature(x))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x,y)) -> IncreasesTemperature(x,y))", "exists x.(Substance(x) & AbsorbsSolarEnergy(x) & IncreasesTemperature(x))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x,y)) -> IncreasesTemperature(x,y))", "all x.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(x))", "all x.(AbsorbsSolarEnergy(x) -> IncreasedTemperature(x))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x,y)) -> IncreasedTemperature(y))"]}
{"id": "entailmentbank_validation_841", "nl": "the water in the bucket will increase in temperature.", "fol": "", "prediction": ["all x.((Water(x) & Bucket(x)) -> IncreasesTemperature(x))", "all x y.((Water(x) & Bucket(y)) -> IncreasesTemperature(x,y))", "all x.((WaterInBoot(x) & IncreasesTemperature(x)) -> WaterInBoot(x))", "the water in bucket will increase inTemperature.", "all x y.((Water(x) & Bucket(y)) -> IncreasesTemperature(x,y))", "all x.((WaterInBeak(x) & IncreasesTemperature(x)) -> IncreasesTemperature(x))", "all x.((WaterInBoot(x) & IncreasesTemperature(x)) -> WaterInBoot(x))", "all x y z.((Water(x) & Bucket(y) & Temperature(z)) -> IncreasesIn(x,y,z))", "all x y.((WaterInBoot(x) & Bucket(y)) -> IncreasesTemperature(x,y))", "all x.((Boot(x) & WaterInBoot(x)) -> IncreasesTemperature(x))", "all x y.((Boot(x) & Water(y)) -> IncreasesTemperature(y,x))", "all x.(Boot(x) -> IncreasesTemperature(x))", "(IncreasedTemperature(water))", "all x y.((Water(x) & Bucket(y)) -> IncreasedTemperature(x,y))", "exists x.(Boot(x) & WaterInBoot(x) & IncreasesTemperature(x))", "(IncreasedTemperatureWater(Boot))"]}
{"id": "entailmentbank_validation_842", "nl": "evaporation means a substance changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x y.((Substance(x) & Liquid(y) & Gas(y)) -> ChangesFromTo(x,y))", "all x.(Evaporation(x) -> (ChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))", "all x y z.((Substance(x) & Liquid(y) & Gas(z)) -> ChangesFromTo(x,y,z))", "all x y.((Substance(x) & Liquid(y) & Gas(z)) -> ChangesFromTo(x,y,z))", "all x.(Evaporation(x) -> (ChangesFromLiquidToGasByIncreasedHeatEnergy(x)))", "all x y.((Substance(x) & Liquid(y)) -> ChangesToGas(x,y))", "all x y z.((Substance(x) & Liquid(y) & Gas(z)) -> Evaporation(x))", "all x.((Substance(x) & Evaporation(x)) -> ChangesFromLiquidToGasByIncreasedHeatEnergy(x))", "all x.(Evaporation(x) -> (ChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))", "all x.(Evaporation(x) -> (ChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))", "all x y.((Substance(x) & Evaporation(x)) -> (ChangesFromLiquidIntoGas(x,y) & IncreasesHeatEnergy(x,y)))", "all x y z.((Substance(x) & Liquid(y) & Gas(z) & IncreasedHeatEnergy(x,y,z)) -> ChangesFromTo(x,y,z))", "all x.(Evaporation(x) -> ChangesFromLiquidToGasByIncreasedHeatEnergy(x))", "all x y.((Substance(x) & Liquid(y) & Gas(y)) -> Evaporation(x))", "all x.(Evaporation(x) -> (ChangesFromLiquidIntoGasByIncreasingHeatEnergy(x)))", "all x y z.((Substance(x) & Liquid(y) & Gas(z)) -> ChangesFromTo(x,y,z))"]}
{"id": "entailmentbank_validation_843", "nl": "the water in the bucket will evaporate.", "fol": "", "prediction": ["all x.((Water(x) & Bucket(x)) -> Evaporates(x))", "all x y.((Water(x) & Bucket(y)) -> Evaporates(x,y))", "all x.((WaterInBoot(x) & Evaporates(x)) -> WaterInBoot(x))", "all x.((Water(x) & Bucket(x)) -> Evaporates(x))", "(EvaporatesWaterInBoot(water))", "all x.(Evaporate(x) -> WaterInBoot(x))", "all x y.((Water(x) & Bucket(y)) -> Evaporates(x,y))", "the water in bucket will evaporate.", "all x.(WaterInBoot(x) -> Evaporates(x))", "(EvaporatesWaterInBoot(Water))", "all x.((WaterInBoot(x)) -> Evaporates(x))", "all x y.((Water(x) & Bucket(y)) -> Evaporates(x,y))", "(EvaporateWaterInBeak(Water))", "all x.(Evaporates(x) -> WaterInBoot(x))", "all x y.((Water(x) & Bucket(y)) -> Evaporates(x,y))", "all x y.((Water(x) & Bucket(y)) -> Evaporate(x,y))"]}
{"id": "entailmentbank_validation_844", "nl": "gas is a kind of substance.", "fol": "", "prediction": ["all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "all x y.((Gas(x) & Substance(y)) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "all x y.((Gas(x) & Substance(y)) -> Contains(x,y))", "all x.(Gas(x) -> Substance(x))", "all x y.((Gas(x) & Substance(y)) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "all x y.((Gas(x) & Substance(y)) -> Is(x,y))", "all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "exists x.(Gas(x) & -Substance(x))", "exists x.(Gas(x) & Substance(x))", "exists x.(Gas(x) & TypeOfSubstance(x))", "exists x.(Gas(x) & Substance(x))"]}
{"id": "entailmentbank_validation_845", "nl": "substances are made of molecules.", "fol": "", "prediction": ["all x.(Substance(x) -> MadeOfMolecules(x))", "(MadeOfMolecules(substance) -> MadeOfMolecules(substance))", "all x y.((Substance(x) & Molecule(y)) -> MadeOf(x,y))", "all x.(Substance(x) -> MadeOfMolecules(x))", "all x y.((Substance(x) & Molecule(y)) -> MadeOf(x,y))", "all x.(Substance(x) -> MadeOfMolecules(x))", "all x y.(Substance(x) -> MadeOfMolecules(x,y))", "all x y.((Substance(x) & Molecule(y)) -> MadeOf(x,y))", "all x.(Substance(x) -> MadeOfMolecules(x))", "all x.(Substance(x) -> MadeOfMoleculars(x))", "all x.(Substance(x) -> MadeOfMolecules(x))", "all x y.((Substance(x) & Molecule(y)) -> MadeOf(x,y))", "exists x.(Substance(x) & Molecule(x))", "exists x.(Substance(x) & Molecule(x))", "all x.(Substance(x) -> MadeOfMolecules(x))", "exists x.(Substance(x) & Molecule(x))"]}
{"id": "entailmentbank_validation_846", "nl": "a gas is made of its molecules.", "fol": "", "prediction": ["all x.(Gas(x) -> MadeOfMolecules(x))", "all x y.((Gas(x) & Molecule(y)) -> MadeOf(x,y))", "all x.(Gas(x) -> MadeOfMolecules(x))", "all x y.((Gas(x) & Molecule(y)) -> MadeOf(x,y))", "all x.(Gas(x) -> MadeOfMoleculars(x))", "all x y z.((Gas(x) & Molecule(y) & Molecule(z)) -> MadeOf(x,y,z))", "all x.(Gas(x) -> MadeOfMolecules(x))", "all x y.((Gas(x) & Molecule(y)) -> MadeOf(x,y))", "all x.(Gas(x) -> MadeOfMoleculars(x))", "all x y.((Gas(x) & Molecule(y)) -> MadeOf(x,y))", "exists x.(Gas(x) & MakesOfMolecules(x))", "exists x.(Gas(x) & Molecule(x))", "all x.(Gas(x) -> MadeOfMolecules(x))", "all x y.((Gas(x) & Molecule(y)) -> MadeOf(x,y))", "exists x.(Gas(x) & MakesOfMolecules(x))", "exists x.(Gas(x) & Molecule(x))"]}
{"id": "entailmentbank_validation_847", "nl": "a gas is heated and its temperature increases.", "fol": "", "prediction": ["all x.(Gas(x) -> (Heated(x) & TemperatureIncreases(x)))", "all x y.((Gas(x) & Gas(y)) -> (Heated(x,y) & TemperatureIncreases(x,y)))", "all x.(Gas(x) -> (Heated(x) & TemperatureIncrease(x)))", "all x y.((Gas(x) & Heater(y)) -> TemperatureIncrease(x,y))", "all x y z.((Gas(x) & Heater(y) & Temperature(z) & Increases(z)) -> Heats(x,y,z))", "all x.(Gas(x) -> (Heated(x) & TemperatureIncreases(x)))", "all x y.((Gas(x) & Heats(x,y)) -> TemperatureIncreases(x,y))", "all x y.((Gas(x) & Gas(y)) -> (Heated(x,y) & TemperatureIncreased(x,y)))", "exists x.(Gas(x) & Heated(x) & TemperatureIncrease(x))", "all x.(Gas(x) -> (Heated(x) & TemperatureIncreased(x)))", "exists x.(Gas(x) & Heats(x) & TemperatureIncreases(x))", "all x y.((Gas(x) & Gas(y)) -> (Heated(x,y) & IncreasedTemperature(x,y)))", "all x.(Gas(x) -> (Heated(x) & IncreasedTemperature(x)))", "exists x.(Gas(x) & Heated(x) & TemperatureIncrease(x))", "exists x.(Gas(x) & Heats(x) & TemperatureIncreases(x))", "exists x.(Gas(x) & Heated(x) & TemperatureIncrease(x))"]}
{"id": "entailmentbank_validation_848", "nl": "as the temperature of a substance increases, the molecules in that substance will move faster / farther apart.", "fol": "", "prediction": ["all x y.((Substance(x) & Temperature(y) & Increases(x,y)) -> MoleculesMoveFaster(x,y))", "all x.((Substance(x) & IncreasedTemperature(x)) -> MoveMoleculesFaster(x))", "all x y z.((Substance(x) & Temperature(y) & Molecules(z)) -> (Increases(y,x) & MovesFaster(z,x)))", "as the temperature of a substance increases, the molecules in that substance will move faster / farther apart.", "all x y.((Substance(x) & TemperatureIncrease(x)) -> Mobilization(y))", "all x y.((Substance(x) & Temperature(y)) -> (Increases(x,y) & MolesInSubstance(x,y)))", "as the temperature increases, the molecules in that substance will move faster/FartherApart(Molecules)", "all x.((Substance(x) & TemperatureIncreases(x)) -> MoleculesMoveFaster(x))", "all x y z.((Substance(x) & Temperature(y) & Molecule(z) & Increases(y,x)) -> MovesFaster(z,x))", "(IncreasedTemperature(substance) -> MobilizationFasterFerrerApart(molecules))", "all x y z.((Substance(x) & Temperature(y,x) & Molecule(z)) -> (Increases(y,x) & MovesFaster(z,x) & FartherApart(z)))", "all x.((Substance(x) & IncreasesTemperature(x)) -> MovesFasterAndFartherApart(x))", "all x y.((Substance(x) & IncreasedTemperature(x)) -> Mobilization(y,x))", "all x y.((Substance(x) & TemperatureIncreases(x,y)) -> MoleculesMoveFasterAndFarthApart(x,y))", "all x.((Substance(x) & TemperatureIncreases(x)) -> MoleculesMoveFasterAndFarthApart(x))", "all x.((Substance(x) & IncreasedTemperature(x)) -> MoveFasterAndFarmerApart(x))"]}
{"id": "entailmentbank_validation_849", "nl": "the molecules in the gas will move faster.", "fol": "", "prediction": ["all x.(Molecule(x) -> MoveFaster(x))", "all x y.((Molecule(x) & Gas(y)) -> MovesFaster(x,y))", "all x.((Molecule(x) & Gas(x)) -> MoveFaster(x))", "(MoleculesInGas(Molecules) & MoveFaster(Molecules))", "all x y z.((Molecule(x) & Gas(y) & Gas(z)) -> MovesFaster(x,y,z))", "all x y.((Molecule(x) & Gas(y)) -> MoveFaster(x,y))", "all x.((Molecules(x) & Gas(x)) -> MoveFaster(x))", "all x.(Molecules(x) -> MoveFaster(x))", "all x y.((Molecular(x) & Gas(y)) -> MovesFaster(x,y))", "all x.((Moleculars(x) & Gas(x)) -> MoveFaster(x))", "all x y.((Molecule(x) & Gas(y)) -> MovesFaster(x,y))", "all x y z.((Molecule(x) & Gas(y) & Gas(z)) -> MoveFaster(x,y,z))", "all x y.((Molecule(x) & Gas(y) & MovesFaster(x,y)) -> MovesFaster(x,y))", "all x.(Molecule(x) -> MoveFaster(x))", "all x.(MolecularsInGas(x) -> MoveFaster(x))", "exists x.(MolecularsInGas(x) & MoveFaster(x))"]}
{"id": "entailmentbank_validation_850", "nl": "comparing a property of two objects requires knowing the property of each object.", "fol": "", "prediction": ["all x y.((Property(x,y) & Property(y)) -> KnowsPropertyOfObject(x,y))", "all x y z.((Property(x,y) & Property(z) & Object(y) & Property(z)) -> RequiresKnowing(x,y,z))", "all x y.((Object(x) & Property(y) & Object(z)) -> KnowProperty(x,y,z))", "all x y.((Property(x) & Property(y) & Object(z)) -> KnowsProperty(x,y,z))", "all x y z.((Property(x) & Property(y) & Object(z) & Comparing(x,y,z)) -> RequiresKnowingProperty(x,y,z))", "all x.((Property(x) & Property(x,2)) -> KnowsPropertyOfObject(x,2))", "(ComparePropertyOfObjects(x) -> KnowPropertyOfObjects(x))", "all x.((Property(x) & PropertyOfObject(x,2)) -> RequiresKnowingPropertyOfObject(x,2))", "all x.(ComparePropertyOfObjects(x) -> KnowPropertyOfObject(x))", "all x y z.((Property(x,y) & Property(z)) -> (Compares(x,z) & Object(y) & Property(z)))", "exists x.(Property(x,y) & Property(y) & Object(z) & Compares(x,z))", "all x.((Property(x) & PropertyOfObjects(x,2)) -> RequiresKnowingPropertyOfObjects(x,2))", "all x y.((Object(x) & Property(y) & Property(y)) -> KnowsPropertyOf(x,y))", "all x y z.((Property(x) & Property(y) & Property(z) & Object(y) & Object(z)) -> KnowsProperty(x,y,z))", "all x y.((Object(x) & Property(y) & Object(y)) -> KnowsPropertyOf(x,y))", "all x y.((Property(x,y) & Property(y,x)) -> RequiresKnowingProperty(x,y))"]}
{"id": "entailmentbank_validation_851", "nl": "a rock is a kind of object.", "fol": "", "prediction": ["all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> Object(x))", "all x y.((Rock(x) & Object(y)) -> Object(x))", "all x.(Rock(x) -> Object(x))", "all x y.((Rock(x) & Object(y)) -> Object(x))", "all x.(Rock(x) -> Object(x))", "all x y.((Rock(x) & Object(y)) -> Object(x,y))", "all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> ArtOfObject(x))", "all x y.((Rock(x) & Object(y)) -> Object(x))", "all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> Object(x))", "exists x.(Rock(x) & ArtOfObject(x))", "exists x.(Rock(x) & Object(x))", "exists x.(Rock(x) & IsObject(x))", "exists x.(Rock(x) & Object(x))"]}
{"id": "entailmentbank_validation_852", "nl": "mass is a property of objects / matter.", "fol": "", "prediction": ["all x.(Mass(x) -> PropertyOfObjects(x))", "all x y.((Mass(x) & Object(y) & Matter(y)) -> PropertyOf(x,y))", "all x.(Mass(x) -> PropertyOfObjectsMatter(x))", "all x.(Mass(x) -> (PropertyOfObjects(x) & PropertyOfMatter(x)))", "(PropertyOfObjects(mass) & PropertyOfMatter(mass))", "all x y.((Mass(x) & Object(y)) -> PropertyOfMatter(x,y))", "all x y z.((Mass(x) & Object(y) & Matter(z)) -> PropertyOf(x,y,z))", "all x.(Mathematics(x) -> PropertyOfObjectsMatter(x))", "all x.(Mass(x) -> PropertyOfObjects(x))", "exists x.(Math(x) & PropertyOfObjects(x) & PropertyOfMatter(x))", "all x y.((Mass(x) & Object(y) & Matter(y)) -> PropertyOf(x,y))", "all x.(Mass(x) -> (PropertyOfObjects(x) & PropertyOfMatter(x)))", "all x.(Mass(x) -> PropertyOfObjectsMatter(x))", "all x y.((Mass(x) & Object(y)) -> PropertyOf(x,y))", "all x y.((Mass(x) & Object(y) & Matter(y)) -> PropertyOf(x,y))", "exists x.(Mass(x) & PropertyOfObjectsAndMatter(x))"]}
{"id": "entailmentbank_validation_853", "nl": "comparing the mass of two rocks requires knowing the mass of each rock.", "fol": "", "prediction": ["all x y.((Rock(x) & Rock(y)) -> ComparesMass(x,y))", "all x y z.((Rock(x) & Rock(y) & Rock(z) & ComparingMass(x,y,z)) -> KnowsMass(x,y,z))", "all x.((Rock(x) & Rock(y)) -> CompareMass(x,y))", "all x y.((Rock(x) & Rock(y)) -> CompareMass(x,y))", "all x y.((Rock(x) & Rock(y) & ComparingMass(x,y)) -> KnowsMass(x,y))", "all x.(ComparesMassOfRocks(x) -> RequiresKnowingMassOfRock(x))", "(ComparesMassOfTwoRocks(x) -> KnowsMassOfEachRock(x))", "all x.((Rock(x) & Rock(x)) -> KnowsMass(x,y))", "all x y z.((Rock(x) & Rock(y) & Rock(z) & ComparingMass(x,y,z)) -> KnowsMass(x,y,z))", "all x y.((Rock(x) & Rock(y)) -> (CompareMass(x,y) & KnowMass(x,y)))", "all x.((Rock(x) & Rock(y) & ComparesMass(x,y)) -> KnowsMass(x,y))", "(ComparesMassOfTwoRocks(x) -> KnowsMassOfEachRock(x))", "all x.(CompareMassOfRocks(x) -> KnowMassOfRock(x))", "exists x.(Rock(x) & CompareMassOfRocks(x,y))", "all x y z.((Rock(x) & Rock(y) & Rock(z) & ComparesMass(x,y,z)) -> KnowsMass(x,y,z))", "all x y.((Rock(x) & Rock(y) & ComparesMass(x,y)) -> KnowsMass(x,y))"]}
{"id": "entailmentbank_validation_854", "nl": "student is trying to compare the mass of two small rocks.", "fol": "", "prediction": ["all x y.((Student(x) & SmallRock(y)) -> CompareMass(x,y))", "all x.(Student(x) -> ComparesMassOfSmallRocks(x))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z)) -> CompareMass(x,y,z))", "((Student(Student) & SmallRock(Student)) -> CompareMass(Student,SmallRocks))", "all x y.((Student(x) & SmallRock(y)) -> CompareMass(x,y))", "(StudentTryToCompareMassOfSmallRocks(Student,SmallRocks))", "(Student(Student) & ComparesMass(Student,SmallRocks))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z) & CompareMass(x,y,z)) -> TrysToCompareMass(x,y,z))", "all x y.((Student(x) & SmallRock(y)) -> ComparingMass(x,y))", "all x.(Student(x) -> ComparesMassOfSmallRocks(x))", "all x.(Student(x) -> CompareMassOfSmallRocks(x))", "exists x.(Student(x) & ComparesMass(x,y,z) & SmallRock(y) & SmallRock(z))", "all x y.((Student(x) & Student(y)) -> ComparesMassOfSmallRocks(x,y))", "exists x.(Student(x) & CompareMass(x,y) & SmallRock(y))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z)) -> CompareMass(x,y,z))", "all x y.((Student(x) & SmallRock(y)) -> CompareMass(x,y))"]}
{"id": "entailmentbank_validation_855", "nl": "the student has to know the mass of each rock to compare them.", "fol": "", "prediction": ["all x y.((Student(x) & Rock(y)) -> KnowsMassToCompare(x,y))", "all x y z.((Student(x) & Rock(y) & Mass(z)) -> KnowsMassToCompare(x,y,z))", "all x.((Student(x) & KnowsMassOfRock(x)) -> CompareRocks(x))", "all x y.((Student(x) & Rock(y)) -> KnowsMassToCompare(x,y))", "(KnowsMassOfRock(Student) & ComparesRocks(Student,Mass,Rock))", "all x.((Student(x) & KnowsMassOfRock(x)) -> ComparesRocks(x))", "all x y.((Student(x) & Rock(y)) -> KnowsMass(x,y))", "all x y z.((Student(x) & Rock(y) & Rock(z)) -> KnowsMassToCompare(x,y,z))", "all x y.((Student(x) & Rock(y) & KnowsMass(x,y)) -> Compares(x,y))", "(knowsMassOfRocks(Student) & ComparesRocks(Student,Rocks))", "all x y z.((Student(x) & Rock(y) & Mass(z) & KnowsMass(x,y,z)) -> Compares(x,y,z))", "all x.((Student(x) & KnowsMassOfRock(x)) -> CompareRocks(x))", "all x.((Student(x) & KnowsMassOfRock(x,y)) -> CompareRocks(x,y))", "exists x.(Student(x) & KnowsMassOfRock(x))", "all x y.((Student(x) & Rock(y)) -> KnowsMassToCompare(x,y))", "all x.((Student(x) & KnowsMassOfRock(x)) -> ComparesRocks(x))"]}
{"id": "entailmentbank_validation_856", "nl": "a balance is used for measuring mass / weight of an object / of a substance.", "fol": "", "prediction": ["all x y.((Balance(x) & Object(y)) -> MeasuresMassAndWeight(x,y))", "all x y z.((Balance(x) & Object(y) & Substance(z)) -> MeasuresMassAndWeight(x,y,z))", "all x.(Balance(x) -> (MeasuresMass(x) & MeasuresWeight(x) & MeasuresSubstance(x)))", "all x y z.((Balance(x) & Mass(y) & Weight(z)) -> Measures(x,y,z))", "all x y.((Balance(x) & Object(y)) -> MeasuresMassWorth(x,y))", "all x.(Balance(x) -> (MeasuresMass(x) | MeasuresWeight(x)) & MeasuresSubstance(x)))", "all x y.((Balance(x) & Object(y) & Substance(y)) -> MeasuresMassAndWeight(x,y))", "all x.(Balance(x) -> MeasuresMassAndWeight(x,y))", "all x y z.((Balance(x) & Object(y) & Substance(z)) -> MeasuresMassWorth(x,y,z))", "all x.(Balance(x) -> MeasuresMass(x) & MeasuresWeight(x) & MeasuresSubstance(x))", "all x y.((Balance(x) & Material(y)) -> MeasuresMassAndWeight(x,y))", "all x y.((Balance(x) & MeasuresMass(x,y) & MeasuresWeight(x,y)) -> (Object(y) | Substance(y)))", "exists x.(Balance(x) & MeasuresMass(x) & MeasuresWeight(x) & MeasuresMass(x) & MeasuresWeight(x) & MeasuresSubstance(x))", "exists x.(Balance(x) & MeasuresMass(x) & MeasuresWeight(x) & MeasuresSubstance(x))", "all x.(Balance(x) -> (MeasuresMass(x) | MeasuresWeight(x)))", "all x y z.((Balance(x) & Mass(y) & Weight(z)) -> Measures(x,y,z))"]}
{"id": "entailmentbank_validation_857", "nl": "a balance is a kind of instrument.", "fol": "", "prediction": ["all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x y.((Balance(x) & Instrument(y)) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x y.((Balance(x) & Instrument(y)) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x y.((Balance(x) & Instrument(y)) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "exists x.(Balance(x) & Instrument(x))", "exists x.(Balance(x) & Instrument(x))", "exists x.(Balance(x) & Instrument(x))"]}
{"id": "entailmentbank_validation_858", "nl": "the student can use balance to know the mass of each rock to compare them.", "fol": "", "prediction": ["all x y.((Student(x) & Rock(y)) -> (UsesBalance(x,y) & KnowsMass(x,y)))", "all x y z.((Student(x) & Rock(y) & Rock(z)) -> (UsesBalance(x,y) & KnowsMass(x,z) & ComparesMass(x,y,z)))", "all x.((Student(x) & Balance(x)) -> CanKnowMassOfRock(x))", "all x y.((Student(x) & Rock(y)) -> CanBalanceToKnowMass(x,y))", "all x y z.((Student(x) & Rock(y) & Rock(z)) -> CanBalance(x,y,z))", "(Balance(Student) -> KnowsMass(Student,Rock,Rock))", "(all x.(StaysBalance(x) -> KnowsMass(x,Rocks)))", "all x y.((Student(x) & Rock(y)) -> (UsesBalance(x,y) & KnowsMass(x,y)))", "all x.(Student(x) -> (UsesBalanceToKnowMass(x) & CompareRocks(x)))", "all x.((Student(x) & Balance(x)) -> CanKnowMassOfRock(x,y))", "all x.((Student(x) & UsesBalance(x)) -> CanKnowMassOfRock(x))", "all x y.((Student(x) & Rock(y) & UsesBalance(x,y)) -> CanCompareMass(x,y))", "all x y z.((Student(x) & Rock(y) & Rock(z)) -> (UsesBalance(x,y) & KnowsMass(x,z)))", "all x y z.((Student(x) & Rock(y) & Rock(z) & UsesBalance(x,y)) -> KnowsMassToCompare(x,z))", "all x.((Student(x) & Balance(x)) -> KnowsMassOfRock(x))", "all x y.((Student(x) & Rock(y)) -> CanBeBalanceToKnowMass(x,y))"]}
{"id": "entailmentbank_validation_859", "nl": "a balance is used for measuring mass of a substance.", "fol": "", "prediction": ["all x y.((Balance(x) & Substance(y)) -> MeasuresMass(x,y))", "all x.(Balance(x) -> MeasuresMassOfSubstance(x))", "all x y z.((Balance(x) & Substance(y) & Mass(z)) -> Measures(x,y,z))", "all x y.((Balance(x) & Substance(y)) -> MeasuresMass(x,y))", "all x y.((Balance(x) & Substance(y)) -> UsedForMeasuringMass(x,y))", "all x y z.((Balance(x) & Substance(y) & Mass(z)) -> UsedForMeasuring(x,y,z))", "all x.(Balance(x) -> MeasuresMassOfSubstance(x))", "all x.(Balance(x) -> UsedForMeasuringMassOfSubstance(x))", "all x.(Balance(x) -> MeasuresMassOfSubstance(x))", "all x y.((Balance(x) & Substance(y)) -> MeasuresMass(x,y))", "all x y z.((Balance(x) & Substance(y) & Mass(z)) -> Measures(x,y,z))", "all x y.((Balance(x) & Substance(y)) -> UsedForMeasuringMass(x,y))", "exists x.(Balance(x) & UsedForMeasuringMass(x))", "exists x.(Balance(x) & MeasuresMass(x))", "all x y.((Balance(x) & Substance(y)) -> MeasuresMass(x,y))", "exists x.(Balance(x) & MeasuresMass(x))"]}
{"id": "entailmentbank_validation_860", "nl": "sand is a kind of substance.", "fol": "", "prediction": ["all x.(Sand(x) -> Substance(x))", "all x.(Sand(x) -> Substance(x))", "all x y.((Sand(x) & Substance(y)) -> Substance(x))", "all x.(Sand(x) -> Substance(x))", "all x y.(Sand(x) -> Substance(y))", "all x.(Sand(x) -> Substance(x))", "all x y.(Sand(x) -> (Substance(y) & Contains(x,y)))", "all x.(Sand(x) -> Substance(x))", "all x y.(Sand(x) -> Substance(y))", "all x.(Sand(x) -> Substance(x))", "all x.(Sand(x) -> Substance(x))", "all x.(Sand(x) -> Substance(x))", "exists x.(Sand(x) & Substance(x))", "exists x.(Sand(x) & Material(x))", "exists x.(Sand(x) & Substance(x))", "exists x.(Sand(x) & Substance(x))"]}
{"id": "entailmentbank_validation_861", "nl": "a balance can be used for measure the mass of sand.", "fol": "", "prediction": ["all x.(Balance(x) -> MeasuresMassOfSand(x))", "all x y.((Balance(x) & Sand(y)) -> MeasuresMass(x,y))", "all x.((Balance(x) & MeasuresMassOfSand(x)) -> CanBeUsedForSand(x))", "all x y.((Balance(x) & Sand(y)) -> MeasureMass(x,y))", "all x.(Balance(x) -> MeasuresMassOfSand(x))", "all x y z.((Balance(x) & Sand(y) & Mass(z)) -> Measures(x,y,z))", "all x y.((Balance(x) & Sand(y)) -> MeasuresMass(x,y))", "all x.(Balance(x) -> MeasuresMassOfSand(x))", "exists x.(Balance(x) & MeasureMassOfSand(x))", "all x y z.((Balance(x) & Sand(y) & Mass(z)) -> Measures(x,y,z))", "all x y.((Balance(x) & Sand(y)) -> MeasureMass(x,y))", "all x y.((Balance(x) & Sand(y)) -> CanMeasureMass(x,y))", "exists x.(Balance(x) & UsedForMeasureMassOfSand(x))", "exists x.(Balance(x) & MeasuresMassOfSand(x))", "exists x.(Balance(x) & MeasureMassOfSand(x))", "exists x.(Balance(x) & MeasuresMass(x,sand))"]}
{"id": "entailmentbank_validation_862", "nl": "determining something often requires measuring that something.", "fol": "", "prediction": ["all x.((Determining(x) & Something(x)) -> RequiresMeasuring(x))", "all x y.((Determining(x) & Something(y)) -> RequiresMeasuring(x,y))", "all x.(Determining(x) -> RequiresMeasuring(x))", "all x y.((Determining(x,y) & Something(y)) -> RequiresMeasuring(x,y))", "all x y.((Determining(x) & Something(y)) -> RequiresMeasuring(x,y))", "all x.((Determining(x) & Something(x)) -> RequiresMeasuring(x))", "all x y z.((Determining(x) & Something(y) & Measurement(z)) -> Requires(x,y,z))", "all x.(Determining(x) -> RequiresMeasuring(x))", "all x y.((DoesRequiresMeasuring(x,y) & Something(y)) -> RequiresMeasuring(x,y))", "all x.((Determining(x) & Something(y)) -> RequiresMeasuring(x,y))", "all x y.((Determining(x,y) & Something(y)) -> RequiresMeasuring(x,y))", "all x y.((Determining(x) & Something(y)) -> RequiresMeasuring(x,y))", "exists x.(Determining(x) & RequiresMeasuring(x))", "all x.(Determining(x) -> RequiresMeasuring(x))", "exists x.(Measurement(x) & Determines(x,y))", "exists x.(Determining(x) & Measures(x))"]}
{"id": "entailmentbank_validation_863", "nl": "determining the mass of the sand requires using a balance to measure the mass of the sand.", "fol": "", "prediction": ["all x y.((Sand(x) & Balance(y)) -> DeterminesMass(x,y))", "all x.((Sand(x) & Balance(x)) -> DeterminesMass(x,sand))", "(MeasuresMassOfSand(x) & UsesBalance(x))", "all x y z.((Sand(x) & Balance(y) & Mass(z)) -> DeterminesMass(x,y,z))", "all x y.((Sand(x) & Balance(y)) -> DeterminesMass(x,y))", "(DeterminingMassOfSand(x) -> UsesBalance(x))", "all x y z.((Sand(x) & Balance(y) & Sand(z) & DeterminesMass(x,y,z)) -> MeasuresMass(y,z))", "all x.(DeterminingMassOfSand(x) -> UsesBalanceToMeasureMassOfSand(x))", "all x.((Sand(x) & Balance(x)) -> DeterminesMass(x,Sand))", "(MeasuresMassOfSand(x) & UsesBalance(x))", "all x y.((Sand(x) & Balance(y)) -> MeasureMass(x,y))", "all x.((Sand(x) & Balance(x)) -> MeasureMass(x,sand))", "all x.((SandMass(x) & Balance(x)) -> DeterminesMass(x,Sand,Sand))", "all x y.((Sand(x) & Balance(y)) -> DeterminesMass(x,y))", "all x.((Sand(x) & Balance(y)) -> DeterminesMass(x,y))", "all x y.((Sand(x) & Balance(y)) -> MeasureMassOf(x,y))"]}
{"id": "entailmentbank_validation_864", "nl": "a balance is used for measuring the mass of an object.", "fol": "", "prediction": ["all x y.((Balance(x) & Object(y)) -> MeasuresMass(x,y))", "all x y z.((Balance(x) & Object(y) & Mass(z)) -> Measures(x,y,z))", "all x.(Balance(x) -> MeasuresMassOfObject(x))", "all x y.((Balance(x) & Object(y)) -> MeasuresMass(x,y))", "all x y.((Balance(x) & Object(y)) -> UsedForMeasuringMass(x,y))", "all x.(Balance(x) -> MeasuresMassOfObject(x))", "all x y z.((Balance(x) & Object(y) & Mass(z)) -> Measures(x,y,z))", "all x y z.((Balance(x) & Object(y) & Mass(z)) -> UsedForMeasuring(x,y,z))", "all x.(Balance(x) -> UsedForMeasuringMass(x))", "all x.(Balance(x) -> MeasuresMass(x))", "all x y.((Balance(x) & Object(y) & MeasuresMass(x,y)) -> UsedFor(x,y))", "all x y.((Balance(x) & Object(y)) -> MeasuresMass(x,y))", "exists x.(Balance(x) & MeasuresMass(x))", "all x y.((Balance(x) & Object(y)) -> UsedForMeasuringMass(x,y))", "exists x.(Balance(x) & UsedForMeasuringMass(x))", "exists x.(Balance(x) & MeasuresMass(x))"]}
{"id": "entailmentbank_validation_865", "nl": "density can be calculated by measuring the mass of an object divided by the volume of that object.", "fol": "", "prediction": ["all x y.((Object(x) & Mass(y) & Volume(y)) -> CalculatedByMeasuring(x,y))", "all x.((Object(x) & Mass(x) & Volume(x)) -> DensityCalculated(x))", "all x y z.((MeasuresMass(x,y) & Volume(z)) -> CalculatesDensity(x,z))", "all x.(Density(x) -> (MeasuresMass(x) & DividedByVolume(x)))", "all x y z.((Density(x) & Mass(y) & Volume(z)) -> CalculatedByMeasuring(x,y,z))", "all x y.((Object(x) & Mass(y) & Volume(y)) -> CalculatedByMeasuring(x,y))", "(CalculatedDensity(x) -> MeasuresMass(x,y) & DivisibleByVolume(y,z)))", "all x.((MeasuresMass(x) & DividedByVolume(x)) -> DensityCalculated(x))", "all x y z.((Object(x) & Mass(y) & Volume(z)) -> CalculatedByMeasuring(x,y,z))", "all x.((Object(x) & Mass(x) & Volume(x)) -> DensityCalculated(x))", "(all x.(MeasuresMass(x) -> DividedByVolume(x)))", "all x y.((MeasuresMass(x,y) & MeasuresVolume(x,y)) -> DensityCalculated(x,y))", "all x.(Density(x) -> (MeasuresMass(x,y) & DividedByVolume(x,z)))", "all x.(DensityCalculatedByMeasuringMass(x) -> DivisibleByVolume(x))", "all x y.((Object(x) & Mass(y) & Volume(z)) -> CalculatedByMeasuring(x,y,z))", "all x y.((Object(x) & Mass(y) & Volume(y)) -> DensityCalculated(x,y))"]}
{"id": "entailmentbank_validation_866", "nl": "a graduated cylinder is used to measure volume of an object.", "fol": "", "prediction": ["all x y.((GraduatedCylinder(x) & Object(y)) -> MeasuresVolume(x,y))", "all x.((Cylinder(x) & Graduated(x)) -> MeasuresVolumeOfObject(x))", "all x y z.((GraduatedCylinder(x) & Object(y) & Object(z)) -> MeasuresVolume(x,y,z))", "all x.(GraduatedCylinder(x) -> MeasuresVolumeOfObject(x))", "all x y.((GraduatedCylinder(x) & Object(y)) -> MeasuresVolume(x,y))", "all x.((Cylinder(x) & Graduated(x)) -> MeasuresVolumeOfObject(x))", "all x y z.((GraduatedCylinder(x) & Object(y) & MeasuresVolume(x,y)) -> UsedToMeasure(x,z))", "all x.((GraduatedCylinder(x) & MeasuresVolume(x)) -> UsedToMeasure(x,y))", "all x.((Cylinder(x) & Gradient(x)) -> MeasuresVolumeOfObject(x))", "all x y.((GraduatedCylinder(x) & Object(y)) -> MeasuresVolume(x,y))", "all x.(GraduatedCylinder(x) -> MeasuresVolumeOfObject(x))", "all x y z.((GraduatedCylinder(x) & Object(y) & MeasuresVolume(x,y,z)) -> UsedToMeasure(x,z))", "all x y.((GraduatedCylinder(x) & Object(y)) -> MeasuresVolume(x,y))", "exists x.(GraduatedCylinder(x) & MeasuresVolumeOfObject(x))", "all x y.((GraduatedCylinder(x) & Object(y)) -> UsedToMeasureVolume(x,y))", "all x y.((GraduatedCylinder(x) & Object(y)) -> MeasuresVolume(x,y))"]}
{"id": "entailmentbank_validation_867", "nl": "the density of an object can be measured using a graduated cylinder and a balance.", "fol": "", "prediction": ["all x y.((Object(x) & GradientCylinder(y) & Balance(y)) -> MeasuresDensity(x,y))", "all x.((Object(x) & GraduatedCylinder(x) & Balance(x)) -> DensityMeasured(x))", "all x y z.((Object(x) & GradientCylinder(y) & Balance(z)) -> DensityMeasured(x,y,z))", "all x y.((Object(x) & GraduatedCylinder(y) & Balance(y)) -> MeasuresDensity(x,y))", "all x.((Object(x) & GradientCylinder(x) & Balance(x)) -> DensityMeasured(x))", "all x y z.((Object(x) & GraduatedCylinder(y) & Balance(z)) -> DensityMeasured(x,y,z))", "all x y.((Object(x) & GradientCylinder(y) & Balance(y)) -> MeasuredDensity(x,y))", "all x.(DensityMet(x) -> (Object(x) & GraduatedCylinder(x) & Balance(x)))", "(MeasuresDensity(x) & GraduatedCylinder(x) & Balance(x))", "all x.((Object(x) & GraduatedCylinder(x) & Balance(x)) -> MeasuresDensity(x))", "all x y.((Object(x) & GraduatedCylinder(y) & Balance(y)) -> MeasuredDensity(x,y))", "all x.((Object(x) & GradientCylinder(x) & Balance(x)) -> DensityMeasured(x))", "all x y z.((Object(x) & GradientCylinder(y) & Balance(z)) -> DensityMeasured(x,y,z))", "all x.((Object(x) & GraduatedCylinder(x) & Balance(x)) -> DensityMeasured(x))", "all x y.((Object(x) & GradientCylinder(y) & Balance(y)) -> DensityMeasured(x,y))", "all x.((Object(x) & GradientCylinder(x) & Balance(x)) -> MeasuresDensity(x))"]}
{"id": "entailmentbank_validation_868", "nl": "a marble is a kind of object.", "fol": "", "prediction": ["all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> Object(x))", "all x y.((Marble(x) & Object(y)) -> Object(x))", "all x.(Marble(x) -> Object(x))", "all x y.((Marble(x) & Object(y)) -> Object(x))", "all x.(Marble(x) -> Object(x))", "exists x.(Mahogany(x) & Object(x))", "all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> ArtOfObject(x))", "all x y.(Marble(x) -> (Object(y) & Object(y)))", "all x y.(Marble(x) -> Object(y))", "all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> Object(x))", "exists x.(Mahogany(x) & Object(x))", "exists x.(Marble(x) & Object(x))", "exists x.(Marble(x) & ArtOfObject(x))"]}
{"id": "entailmentbank_validation_869", "nl": "the density of a marble can be measured using a graduated cylinder and a balance.", "fol": "", "prediction": ["all x y.((Marble(x) & GraduatedCylinder(y) & Balance(y)) -> DensityMeasured(x,y))", "all x.((Marble(x) & GraduatedCylinder(x) & Balance(x)) -> DensityMeasured(x))", "all x y z.((Marble(x) & GraduatedCylinder(y) & Balance(z)) -> DensityMeasured(x,y,z))", "all x y.((Marble(x) & GradientCylinder(y) & Balance(y)) -> DensityMeasured(x,y))", "(MeasuresDensityOfMarble(x) & GraduatedCylinder(x) & Balance(x))", "(all x.(Marble(x) -> DensityMeasuredUsingGraduatedCylinder(x)) & all y.(Marble(y) -> DensityMeasuredUsingBalance(y)))", "all x.(Marble(x) -> (DensityMeasuredUsingGraduatedCylinder(x) & Balance(x)))", "all x.((Marble(x) & GradientCylinder(x) & Balance(x)) -> DensityMeasured(x))", "all x y z.((Marble(x) & GradientCylinder(y) & Balance(z)) -> DensityMeasured(x,y,z))", "all x.((Marble(x) & GraduatedCylinder(x) & Balance(x)) -> DensityMeasured(x))", "all x.(MalaysianMarble(x) -> (DensityMeasuredUsingGraduatedCylinder(x) & BalanceMeasuredUsing(x)))", "all x.(Marble(x) -> (MeasuresDensity(x,Marble) & GraduatedCylinder(x) & Balance(x)))", "all x y.((Marble(x) & GraduatedCylinder(y) & Balance(y)) -> DensityMeasured(x,y))", "all x y z.((Marble(x) & GraduatedCylinder(y) & Balance(z)) -> DensityMeasured(x,y,z))", "all x y.((Marble(x) & GradientCylinder(y) & Balance(y)) -> DensityMeasured(x,y))", "all x.((Marble(x) & GraduatedCylinder(x) & Balance(x)) -> DensityMeasured(x))"]}
{"id": "entailmentbank_validation_870", "nl": "if a unit of for something is being measured, then it requires a measurement tool for measuring that something.", "fol": "", "prediction": ["all x y.((UnitOf(x,y) & Measured(x)) -> RequiresMeasurementTool(x,y))", "all x.((UnitOfForSomething(x) & Measuring(x)) -> RequiresMeasurementTool(x))", "all x.((UnitOf(x) & Measured(x)) -> RequiresMeasurementTool(x))", "all x y.((UnitOfFor(x,y) & Measured(x,y)) -> RequiresMeasurementTool(x,y))", "all x y.((UnitOf(x) & Measured(x) & For(x,y)) -> RequiresMeasurementTool(x,y))", "all x y z.((UnitOf(x,y) & For(y,z) & Measured(x)) -> RequiresMeasurementTool(x,y))", "all x y.((UnitOfForSomething(x) & Measuring(x,y)) -> RequiresMeasurementTool(x,y))", "all x.(MeasurementTool(x) -> exists y.(MeasurementTool(y) & MeasurementTool(x,y)))", "all x y z.((UnitOfFor(x,y) & Measured(y) & Something(z) & RequiresMeasurementTool(x,z)) -> Measures(x,y,z))", "all x.((UnitOf(x) & ForSomething(x) & Measuring(x)) -> RequiresMeasurementTool(x))", "all x.((UnitOfForSomething(x) & Measuring(x)) -> RequiresMeasurementTool(x))", "all x.((UnitOfForSomething(x) & Measured(x)) -> RequiresMeasurementTool(x))", "exists x.(MeasurementTool(x) & MeasurementUnitOfFor(x,y))", "all x y.((UnitOf(x,y) & For(y,z)) -> MeasurementTool(x,y))", "exists x.(MeasurementTool(x) & UnitOfForSomething(x) & Measures(x,y))", "all x y.((MeasurementTool(x) & UnitOfForSomething(x,y)) -> Requires(x,y))"]}
{"id": "entailmentbank_validation_871", "nl": "milliliters ml are a metric unit used for measuring volume.", "fol": "", "prediction": ["all x.(MillilitersMl(x) -> MetricUnit(x))", "(MillilitersMl) -> MetricUnit(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume))))", "(MillilitersMl) -> MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume))))", "all x.(Milliliters(x) -> MeasuresVolume(x))", "all x y.((Milliliters(x) & Ml(y)) -> MeasuresVolume(x,y))", "all x.((Milliliters(x) & MetricUnit(x)) -> UsedForMeasuringVolume(x))", "all x.(MillilitersMl(x) -> MeasuresVolume(x))", "all x y.((Milliliters(x) & MetricUnit(y)) -> MeasuresVolume(x,y))", "all x.(Milliliters(x) -> MetricUnit(x))", "(MillilitersMl) - MetricUnit(MeasuresVolume(MeasuresVolume))", "all x.((Milliliters(x) & MetricUnit(x) & MeasuresVolume(x)) -> UsedFor(x,y))", "all x y.((Milliliters(x) & MetricUnit(y)) -> UsedForMeasuringVolume(x,y))", "all x.(MillilitersMl(x) -> MetricUnit(x))", "all x y.((Milliliters(x) & Ml(y)) -> MetricUnit(x))", "all x.(Milliliters(x) -> MeasuresVolume(x))", "all x.(MillilitersMl(x) -> MeasuresVolume(x))"]}
{"id": "entailmentbank_validation_872", "nl": "measuring milliliters requires a tool for measuring volume.", "fol": "", "prediction": ["all x.(MeasuresMilliliters(x) -> RequiresToolForMeasuringVolume(x))", "(MeasuresMilliliters(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume(MeasuresVolume))))", "all x y.((MeasuresMilliliters(x) & MeasuresVolume(y)) -> RequiresTool(x,y))", "(MeasuresMilliliters(x) -> RequiresToolForMeasuringVolume(x))", "all x.(MeasuresMilliliters(x) -> RequiresMeasurementTool(x))", "all x.((MeasuresMilliliters(x) & MeasuresVolume(x)) -> RequiresTool(x))", "all x y.((MeasuresMilliliters(x) & MeasuresVolume(y)) -> RequiresTool(x,y))", "all x.(MeasuresMilliliters(x) -> RequiresToolForMeasuringVolume(x))", "all x.(MeasuringMilliliters(x) -> MeasuresVolume(x))", "all x y.((MeasuresMilliliters(x) & MeasuresVolume(y)) -> RequiresTool(x,y))", "all x.((MeasuresMilliliters(x) & MeasuresVolume(x)) -> RequiresTool(x))", "all x y.((MeasuresMilliliters(x) & MeasuresVolume(y)) -> RequiresToolForMeasuringVolume(x,y))", "all x.(MeasuresMilliliters(x) -> RequiresMeasuresVolume(x))", "all x y.((MeasuringMilliliters(x) & Tool(y)) -> MeasuresVolume(x,y))", "all x.(MeasuringMilliliters(x) -> MeasuresVolume(x))", "all x.(MeasuresMilliliters(x) -> NeedsToolForMeasuringVolume(x))"]}
{"id": "entailmentbank_validation_873", "nl": "measuring milliliters requires a graduated cylinder.", "fol": "", "prediction": ["all x.(MeasuresMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x y.((MeasuresMilliliters(x) & GradientCylinder(y)) -> Requires(x,y))", "all x.((MeasuresMilliliters(x) & GradientCylinder(x)) -> Requires(x,y))", "(MeasuresMilliliters(x) & RequiresGraduatedCylinder(x))", "all x.(MeasuresMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x y.((Measurement(x) & Milliliter(y)) -> RequiresGraduatedCylinder(x,y))", "all x y.((MeasuresMilliliters(x) & GradientCylinder(y)) -> Requires(x,y))", "all x.((MeasuresMilliliters(x) & GraduatedCylinder(x)) -> Requires(x,y))", "(MeasuresMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x.(MeasuresMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x.((Measurement(x) & Milliliters(x)) -> RequiresGraduatedCylinder(x))", "all x y.((MeasuresMilliliters(x) & GraduatedCylinder(y)) -> Requires(x,y))", "all x.(MeasuresMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x.(Measurement(x,milliliters) -> RequiresGraduatedCylinder(x))", "all x.(MeasuresMilliliters(x) -> RequiresDeclinedCylinder(x))", "all x.(MeasuringMilliliters(x) -> RequiresGraduatedCylinder(x))"]}
{"id": "entailmentbank_validation_874", "nl": "a sample in a cylindrical container has a cylindrical shape and a fixed volume.", "fol": "", "prediction": ["all x y.((Sample(x) & CylindricalContainer(y)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x.((Sample(x) & CylindricalContainer(x)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x y z.((Sample(x) & CylindricalContainer(y) & CylindricalShape(z) & Has(x,z) & Has(x,y)) -> FixedVolume(x))", "all x y.((Sample(x) & CylindricalContainer(y)) -> (CylindricalShape(x,y) & FixedVolume(x,y)))", "all x.((Sample(x) & CylindricalContainer(x)) -> (CylindricalShape(x) & FixedVolume(x)))", "exists x.(Sample(x) & InCylindricalContainer(x) & CylindricalShape(x) & FixedVolume(x))", "all x y z.((Sample(x) & CylindricalContainer(y) & CylindricalShape(z) & FixedVolume(z)) -> HasCylindricalShapeAndFixedVolume(x,y,z))", "all x.((SampleInCylindricalContainer(x) & CylindricalShape(x) & FixedVolume(x)) -> HasCylindricalShape(x))", "all x.((Sample(x) & CrystalContainer(x)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x y.((Sample(x) & CylindricalContainer(y) & InCylindricalContainer(x,y)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x y.((Sample(x) & CylindricalContainer(y)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x.((Sample(x) & CylindricalContainer(x)) -> (CylindricalShape(x) & FixedVolume(x)))", "exists x.(Sample(x) & InCylindricalContainer(x) & CylindricalShape(x) & FixedVolume(x))", "all x y z.((Sample(x) & CylindricalContainer(y) & CylindricalShape(z) & Has(x,z) & Has(x,y) & Has(x,z)) -> Has(x,y))", "all x.((Sample(x) & InCylindricalContainer(x)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x y.((Sample(x) & CylindricalContainer(y) & InCylindricalContainer(x,y)) -> (CylindricalShape(x) & FixedVolume(x)))"]}
{"id": "entailmentbank_validation_875", "nl": "a sample is a kind of matter.", "fol": "", "prediction": ["all x.(Sample(x) -> Matter(x))", "all x.(Sample(x) -> Material(x))", "all x.((Sample(x) & Matter(x)) -> KindOf(x))", "all x y.((Sample(x) & Sample(y)) -> Matter(x,y))", "all x.(Sample(x) -> KindOfMatter(x))", "all x.((Sample(x) & Material(x)) -> Material(x))", "all x y.((Sample(x) & Sample(y)) -> Matter(x))", "all x y.((Sample(x) & Material(y)) -> KindOf(x,y))", "all x.(Sample(x) -> Matter(x))", "all x.(Sampling(x) -> KindOfMatter(x))", "all x y.((Sampling(x) & Sample(y) & Material(x)) -> KindOf(x,y))", "exists x.(Sampling(x) & KindOfMatter(x))", "all x y.((Sample(x) & Sample(y)) -> Matter(x,y))", "exists x.(Sample(x) & TypeOfMatter(x))", "exists x.(Sampling(x) & SortOfMatter(x))", "exists x.(Sample(x) & ArtOfMatter(x))"]}
{"id": "entailmentbank_validation_876", "nl": "the matter has the same shape as the container and fixed volume.", "fol": "", "prediction": ["all x.((Matter(x) & SameShapeAsContainer(x) & FixedVolume(x)) -> HasSameShapeAsContainer(x))", "all x y.((Matter(x) & Container(y)) -> (SameShape(x,y) & FixedVolume(x,y)))", "all x.((Matter(x) & Container(x)) -> SameShape(x) & FixedVolume(x))", "(SameShapeAsContainer(Matter) & FixedVolume(Matter))", "all x.(Matter(x) -> (SameShape(x) & SameVolume(x)))", "all x y.((Matter(x) & Container(y)) -> SameShape(x,y) & FixedVolume(x,y))", "all x y z.((Matter(x) & Container(y) & Container(z)) -> (SameShape(x,y) & FixedVolume(x,z)))", "all x y.((Matter(x) & Container(y) & SameShape(x,y) & FixedVolume(x,y)) -> SameShape(x,y))", "all x.((Matter(x) & SameShape(x,container) & FixedVolume(x)) -> HasSameShape(x,container))", "(SameShapeAsContainer(x) & FixedVolume(x))", "all x.(Matter(x) -> (SameShapeAsContainer(x) & FixedVolume(x)))", "all x y z.((Matter(x) & Container(y) & Container(z)) -> (SameShape(x,y,z) & FixedVolume(x,y)))", "exists x.(Matter(x) & SameShapeAsContainer(x) & FixedVolume(x))", "(SameShapeAsContainer(Matter) & FixedVolume(Matter))", "all x y.((Matter(x) & Container(y)) -> (SameShape(x,y) & FixedVolume(x,y)))", "exists x.(Matter(x) & SameShapeAsContainer(x) & FixedVolume(x))"]}
{"id": "entailmentbank_validation_877", "nl": "matter with variable shape changes shape in different container.", "fol": "", "prediction": ["all x.((Matter(x) & VariableShapeChange(x)) -> DifferentContainer(x))", "all x y.((Matter(x) & VariableShapeChange(y) & DifferentContainer(x)) -> ChangesShape(x,y))", "all x y.((Matter(x) & VariableShapeChange(x,y)) -> ChangesShapeInDifferentContainer(x,y))", "all x y.((Matter(x) & Container(y) & VariableShapeChange(x,y)) -> ChangesShapeInDifferentContainer(x,y))", "all x y z.((Matter(x) & VariableShapeChange(y) & Container(z) & VariableShapeChange(x,y,z)) -> ChangesShapeIn(x,y,z))", "all x.((Matter(x) & VariableShapeChange(x)) -> DifferentContainer(x))", "exists x.(Matter(x) & VariableShapeChange(x) & DifferentContainer(x))", "all x y.((Matter(x) & VariableShapeChange(y)) -> ChangesShapeInDifferentContainer(x,y))", "all x.((Matter(x) & VariableShapeChange(x) & DifferentContainer(x)) -> ChangesShape(x))", "all x y z.((Matter(x) & VariableShapeChange(y) & Container(z) & VariableShapeChange(y,z)) -> ChangesShapeIn(x,y,z))", "all x.((Matter(x) & VariableShapeChange(x)) -> DifferentContainer(x))", "all x y z.((Matter(x) & VariableShapeChange(y) & Container(z) & ShapeChange(z)) -> ChangesShapeIn(x,y,z))", "all x y.((Matter(x) & Container(y) & VariableShapeChange(x,y)) -> ChangesShapeInContainer(x,y))", "exists x.(Matter(x) & VariableShapeChange(x) & DifferentContainer(x))", "all x.((Matter(x) & VariableShapeChanges(x,y)) -> DifferentContainer(y))", "all x.((Matter(x) & VariableShapeChange(x)) -> DifferentContainer(x))"]}
{"id": "entailmentbank_validation_878", "nl": "the matter may have a variable shape and a fixed volume.", "fol": "", "prediction": ["all x.(Matter(x) -> (VariableShape(x) & FixedVolume(x)))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> Has(x,y))", "all x y.((Matter(x) & VariableShape(x) & FixedVolume(y)) -> Has(x,y))", "exists x.(Matter(x) & VariableShape(x) & FixedVolume(x))", "all x.(Matter(x) -> (VariableShape(x) & FixedVolume(x)))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> Has(x,y))", "all x y.((Matter(x) & VariableShape(y) & FixedVolume(x,y)) -> Has(x,y))", "(VariableShape(m) | FixedVolume(m))", "exists x.(Matter(x) & VariableShape(x) & FixedVolume(x))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> HasMatter(x,y))", "all x y.((Matter(x) & VariableShape(x) & FixedVolume(y)) -> Has(x,y))", "exists x.(Matter(x) & VariableShape(x) & FixedVolume(x))", "all x y.((Matter(x) & VariableShape(y) & FixedVolume(x,y)) -> Has(x,y))", "exists x.(Matter(x) & VariableShape(x) & FixedVolume(x))", "exists x.(Matter(x) & VariableShape(x) & FixedVolume(x))", "exists x.(Matter(x) & VariableShape(x) & FixedVolume(x))"]}
{"id": "entailmentbank_validation_879", "nl": "the matter may have a fixed shape and a fixed volume.", "fol": "", "prediction": ["all x.(Matter(x) -> (FobbyShape(x) & FixedVolume(x)))", "all x.((Matter(x) & FixedShape(x) & FixedVolume(x)) -> Fixed(x))", "all x y.((Matter(x) & FixedShape(x) & FixedVolume(y)) -> Has(x,y))", "all x.(Matter(x) -> (FixedShape(x) & FixedVolume(x)))", "exists x.(Matter(x) & FixedShape(x) & FixedVolume(x))", "all x.((Matter(x) & FixedShape(x) & FixedVolume(x)) -> Fixed(x))", "(FixedShape(Matter) & FixedVolume(Matter))", "all x y.((Matter(x) & FixedShape(x,y) & FixedVolume(x,y)) -> Has(x,y))", "all x y.((Matter(x) & FixedShape(y) & FixedVolume(x)) -> Fixed(x,y))", "all x.((Matter(x) & FixedShape(x) & FixedVolume(x)) -> HasFobby(x))", "exists x.(Matter(x) & FixedShape(x) & FixedVolume(x))", "all x y.((Matter(x) & FixedShape(y) & FixedVolume(x,y)) -> Has(x,y))", "exists x.(Matter(x) & FixedShape(x) & FixedVolume(x))", "exists x.(Matter(x) & FixedShape(x) & FixedVolume(x))", "exists x.(Matter(x) & FixedShape(x) & FixedVolume(x))", "exists x.(Matter(x) & FixedShape(x) & FixedVolume(x))"]}
{"id": "entailmentbank_validation_880", "nl": "the matter may have a fixed or variable shape and fixed volume.", "fol": "", "prediction": ["all x.(Matter(x) -> (FobbedShape(x) | VariableShape(x) & FixedVolume(x)))", "all x.((Matter(x) & FixedShape(x) & VariableShape(x) & FixedVolume(x)) -> FixedVolume(x))", "all x.(Matter(x) -> (FixedShape(x) | VariableShape(x) | FixedVolume(x)))", "all x.((Matter(x) & (FixedShape(x) | VariableShape(x)) & FixedVolume(x)) -> FixedVolume(x))", "all x.((Matter(x) & FixedShape(x)) | VariableShape(x)) & FixedVolume(x)) -> FixedVolume(x))", "(FixedShape(Matter) | VariableShape(Matter) | FixedVolume(Matter))", "(FobbedShape(m) | VariableShape(m) | FixedVolume(m)))", "all x y.((Matter(x) & (FixedShape(x) | VariableShape(x)) & FixedVolume(y)) -> Fixed(x,y))", "exists x.(Matter(x) & FixedShape(x) & VariableShape(x) & FixedVolume(x))", "all x y.((Matter(x) & FixedShape(x) & VariableShape(x) & FixedVolume(y)) -> Fixed(x,y))", "all x y.((Matter(x) & FixedShape(y) & FixedVolume(x)) -> VariableShape(x,y))", "all x.(Matter(x) -> (FobbedShape(x) | VariableShape(x) & FixedVolume(x)))", "all x y.((Matter(x) & FixedShape(x,y) & VariableShape(x,y)) -> FixedVolume(x,y))", "exists x.(FobbedShape(x) | VariableShape(x) & FixedVolume(x))", "exists x.(Matter(x) & FixedShape(x) & VariableShape(x) & FixedVolume(x))", "exists x.(Matter(x) & (FixedShape(x) | VariableShape(x)) & FixedVolume(x)))"]}
{"id": "entailmentbank_validation_881", "nl": "matter in the solid phase has definite shape.", "fol": "", "prediction": ["all x.((Matter(x) & SolidPhase(x)) -> HasDefinedShape(x))", "all x y.((Matter(x) & SolidPhase(y)) -> HasDefinedShape(x,y))", "all x.(SolidPhase(x) -> HasDefiniteShape(x))", "all x.((Matter(x) & SolidPhase(x)) -> DefiniteShape(x))", "all x.((MatterInSolidPhase(x) & DefiniteShape(x)) -> HasShape(x))", "(all x.(SolidPhase(x) -> HasDefinedShape(x)))", "all x y.((Matter(x) & SolidPhase(y)) -> HasDefiniteShape(x,y))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefiniteShape(x))", "all x y.((MatterInSolidPhase(x) & SolidPhase(y)) -> HasDefinedShape(x,y))", "all x.(SolidPhase(x) -> HasDefinedShape(x))", "all x y.((Matter(x) & SolidPhase(y)) -> DefiniteShape(x,y))", "all x.(SolidPhaseMatter(x) -> HasDefinedShape(x))", "exists x.(MatterInSolidPhase(x) & DefiniteShape(x))", "all x.(Shape(x) -> HasDefiniteShape(x))", "all x.((Matter(x) & SolidPhase(x)) -> DefiniteShape(x))", "all x y.((Matter(x) & SolidPhase(y)) -> HasDefinedShape(x,y))"]}
{"id": "entailmentbank_validation_882", "nl": "matter in the solid phase has definite volume.", "fol": "", "prediction": ["all x.((Matter(x) & SolidPhase(x)) -> DefiniteVolume(x))", "all x y.((Matter(x) & SolidPhase(y)) -> HasDefinedVolume(x,y))", "all x.(SolidPhase(x) -> HasDefiniteVolume(x))", "all x.((MatterInSolidPhase(x) & DefiniteVolume(x)) -> Has(x,y))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefinedVolume(x))", "(DefiniteVolume(Matter) & SolidPhase(Matter))", "(all x.(SolidPhase(x) -> DefiniteVolume(x)))", "all x y.((Matter(x) & SolidPhase(y)) -> DefiniteVolume(x,y))", "all x y.((MatterInSolidPhase(x) & SolidPhase(y)) -> HasDefinedVolume(x,y))", "all x.(SolidPhase(x) -> HasDefinedVolume(x))", "all x.((Matter(x) & SolidPhase(x)) -> DefiniteVolume(x))", "all x.(SolidPhaseMatter(x) -> HasDefinedVolume(x))", "all x y.((Matter(x) & SolidPhase(y)) -> HasDefiniteVolume(x,y))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefiniteVolume(x))", "all x.((MatterInSolidPhase(x) & DefiniteVolume(x)) -> Has(x,y))", "all x y.((Matter(x) & SolidPhase(y)) -> DefiniteVolume(x,y))"]}
{"id": "entailmentbank_validation_883", "nl": "matter in solid phase has definite volume and definite shape.", "fol": "", "prediction": ["all x.((Matter(x) & SolidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.((MatterInSolidPhase(x) & DefiniteVolume(x) & DefiniteShape(x)) -> DefiniteMatter(x))", "all x y.((Matter(x) & SolidPhase(y)) -> (DefiniteVolume(x,y) & DefiniteShape(x,y)))", "all x.(SolidPhase(x) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.((Matter(x) & SolidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "(all x.(SolidPhase(x) -> DefiniteVolume(x)) & DefiniteShape(x))", "all x.((MatterInSolidPhase(x) & DefiniteVolume(x) & DefiniteShape(x)) -> DefiniteVolume(x))", "all x.(SolidPhaseMatter(x) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x y.((Matter(x) & SolidPhase(y)) -> (DefiniteVolume(x,y) & DefiniteShape(x,y)))", "(all x.(SolidPhase(x) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.(SolidPhase(x) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.((Matter(x) & SolidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x y.((Matter(x) & SolidPhase(y)) -> (DefiniteVolume(x,y) & DefiniteShape(x,y)))", "all x.(SolidPhaseMatter(x) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x y.((Matter(x) & SolidPhase(y)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.((Matter(x) & SolidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))"]}
{"id": "entailmentbank_validation_884", "nl": "matter in the liquid phase has variable shape.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> VariableShape(x))", "all x.(LiquidPhase(x) -> VariableShape(x))", "all x y.((Matter(x) & LiquidPhase(y)) -> VariableShape(x,y))", "(variableShape(Matter) & InLiquidPhase(Matter,LiquidPhase))", "all x.((Matter(x) & LiquidPhase(x)) -> VariableShape(x))", "all x.(LiquidPhase(x) -> VariableShape(x))", "all x.((MatterInLiquidPhase(x) & VariableShape(x)) -> Has(x,y))", "all x y.((Matter(x) & LiquidPhase(y)) -> VariableShape(x,y))", "all x y.((Matter(x) & LiquidPhase(y) & VariableShape(x,y)) -> Has(x,y))", "exists x.(MatterInLiquidPhase(x) & VariableShape(x))", "all x.((Matter(x) & LiquidPhase(x)) -> VariableShape(x))", "all x.(LiquidPhase(x) -> VariableShape(x))", "all x y.((Matter(x) & LiquidPhase(y) & InPhase(x,y)) -> VariableShape(x))", "all x y.((Matter(x) & LiquidPhase(y)) -> VariableShape(x,y))", "all x y.((Matter(x) & LiquidPhase(y) & VariableShape(x,y)) -> Has(x,y))", "all x.(LiquidPhase(x) -> VariableShape(x))"]}
{"id": "entailmentbank_validation_885", "nl": "matter in the liquid phase has definite volume.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> DefiniteVolume(x))", "all x.(LiquidPhase(x) -> HasDefinedVolume(x))", "all x y.((Matter(x) & LiquidPhase(y)) -> HasDefinedVolume(x,y))", "all x.((Matter(x) & LiquidPhase(x)) -> HasDefinedVolume(x))", "(all x.(LiquidPhase(x) -> DefiniteVolume(x)))", "all x.(LiquidPhase(x) -> DefiniteVolume(x))", "all x y.((Matter(x) & LiquidPhase(y)) -> DefiniteVolume(x,y))", "all x.((MatterInLiquidPhase(x) & DefiniteVolume(x)) -> Has(x,y))", "all x y.((Matter(x) & LiquidPhase(y)) -> HasDefiniteVolume(x,y))", "all x.(LiquidPhase(x) -> HasDefiniteVolume(x))", "all x.((Matter(x) & LiquidPhase(x)) -> DefiniteVolume(x))", "exists x.(MatterInLiquidPhase(x) & DefiniteVolume(x))", "all x.(LiquidPhaseMatter(x) -> HasDefinedVolume(x))", "all x y.((Matter(x) & LiquidPhase(y)) -> DefiniteVolume(x,y))", "all x.(LiquidPhase(x) -> DefiniteVolume(x))", "all x y.((Matter(x) & LiquidPhase(y)) -> HasDefinedVolume(x,y))"]}
{"id": "entailmentbank_validation_886", "nl": "matter in the liquid phase has a variable shape and definite volume.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> (VariableShape(x) & DefiniteVolume(x)))", "all x.(LiquidPhase(x) -> (VariableShape(x) & DefiniteVolume(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (VariableShape(x,y) & DefiniteVolume(x,y)))", "all x.((MatterInLiquidPhase(x) & VariableShape(x) & DefiniteVolume(x)) -> VariableShape(x))", "(all x.(LiquidPhase(x) -> VariableShape(x) & DefiniteVolume(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (VariableShape(x) & DefiniteVolume(x)))", "all x.(LiquidPhase(x) -> (VariableShape(x) & DefiniteVolume(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (VariableShape(x,y) & DefiniteVolume(x,y)))", "all x y z.((Matter(x) & LiquidPhase(y) & VariableShape(z) & VariableVolume(z)) -> Has(x,y,z))", "all x y.((Matter(x) & LiquidPhase(y)) -> (VariableShape(x) & DefiniteVolume(x)))", "all x y.((Matter(x) & LiquidPhase(y) & VariableShape(x,y) & DefiniteVolume(x,y)) -> Has(x,y))", "all x.((MatterInLiquidPhase(x) & VariableShape(x) & DefiniteVolume(x)) -> Has(x,y))", "all x.(LiquidPhase(x) -> (VariableShape(x) & DefiniteVolume(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (VariableShape(x) & DefiniteVolume(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (VariableShape(x,y) & DefiniteVolume(x,y)))", "all x.(LiquidPhase(x) -> (VariableShape(x) & DefiniteVolume(x)))"]}
{"id": "entailmentbank_validation_887", "nl": "the matter may be in solid phase or in liquid phase.", "fol": "", "prediction": ["all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "(SolidPhase(m) | LiquidPhase(m))", "(SolidPhase(Matter) | LiquidPhase(Matter))", "all x.((Matter(x) & (SolidPhase(x) | LiquidPhase(x))) -> InMatter(x))", "all x y.((Matter(x) & SolidPhase(y)) | LiquidPhase(x,y))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x y.((Matter(x) & SolidPhase(y)) | LiquidPhase(x,y))", "all x y.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "exists x.(Matter(x) & (StillPhase(x) | LiquidPhase(x)))", "exists x.(Matter(x) & (InSolidPhase(x) | InLiquidPhase(x)))", "exists x.(Matter(x) & SolidPhase(x) & LiquidPhase(x))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "exists x.(Matter(x) & (SolidPhase(x) | LiquidPhase(x)))", "exists x.(Matter(x) & (SolidPhase(x) | LiquidPhase(x)))"]}
{"id": "entailmentbank_validation_888", "nl": "seeing small things with bare eyes is difficult.", "fol": "", "prediction": ["all x.((SmallThing(x) & BareEyes(x)) -> DifficultToSee(x))", "all x y.((SmallThing(x) & BareEyes(y)) -> DifficultToSee(x,y))", "(DifficultToSeeSmallThingsWithBareEyes(x))", "all x.((SmallThing(x) & BareEyes(x)) -> DifficultToSee(x))", "all x y.((SmallThing(x) & BareEyes(y)) -> DifficultToSee(x,y))", "all x.((SeenWithBareEyes(x) & SmallThings(x)) -> Difficult(x))", "all x.((SmallThings(x) & BareEyes(x)) -> DifficultToSee(x))", "all x.((SmallThing(x) & BareEyes(x)) -> DifficultToSee(x))", "all x.((SeesSmallThingsWithBareEyes(x) & Difficult(x)) -> Difficult(x))", "all x y.((SmallThing(x) & BareEyes(y)) -> DifficultToSelect(x,y))", "All x.(BareEyes(x) -> DifficultToSeeSmallThings(x))", "exists x.(SmallThing(x) & BareEyes(x))", "all x.((SmallThing(x) & BareEyes(x)) -> Difficult(x))", "all x y.((SmallTree(x) & BareEyes(y)) -> DifficultToSee(x,y))", "all x y.((SmallThing(x) & BareEyes(y)) -> DifficultToSeeWith(x,y))", "all x y.((SmallThing(x) & BareEyes(y)) -> DifficultToSelect(x,y))"]}
{"id": "entailmentbank_validation_889", "nl": "an insect usually has a small size.", "fol": "", "prediction": ["all x.(Insect(x) -> SmallSize(x))", "all x.(Insect(x) -> SmallSize(x))", "all x y.((Insect(x) & Insect(y)) -> SmallSize(x))", "all x.(Insect(x) -> HasSmallSize(x))", "all x.(Insect(x) -> SmallSize(x))", "all x y.((Insect(x) & Insect(y)) -> SmallSize(x))", "all x y.((Insect(x) & Insect(y) & SmallSize(x)) -> HasSmallSize(x,y))", "all x y.((Insect(x) & SmallSize(y)) -> Has(x,y))", "all x.(Insect(x) -> HasSmallSize(x))", "all x.(Insect(x) -> UsuallyHasSmallSize(x))", "all x.(Insect(x) -> SmallSize(x))", "all x.(Insect(x) -> SmallSize(x))", "all x.(Insect(x) -> HasSmallSize(x))", "exists x.(Insect(x) & SmallSize(x))", "exists x.(Insect(x) & HasSmallSize(x))", "exists x.(Insect(x) & SmallSize(x))"]}
{"id": "entailmentbank_validation_890", "nl": "seeing an insect with bare eyes is difficult.", "fol": "", "prediction": ["all x.((Insect(x) & BareEyes(x)) -> DifficultToSee(x))", "all x.((Insect(x) & HasBareEyes(x)) -> DifficultToSee(x))", "all x y.((Insect(x) & BareEyes(y)) -> DifficultToSee(x,y))", "(SaysInsectWithBareEyes(insect) -> Difficult(insect))", "all x y.((Insect(x) & BareEyes(y)) -> DifficultToSeen(x,y))", "all x.((Insect(x) & BareEyes(x)) -> DifficultToSeen(x))", "(SeeingBareEyes(insect,insect) -> Difficult(insect))", "all x y.((Insect(x) & Insect(y) & BareEyes(x)) -> DifficultToSee(x,y))", "all x.((Insect(x) & HasBareEyes(x)) -> DifficultToSeen(x))", "all x.((Insect(x) & BareEyes(x)) -> DifficultToSee(x))", "all x y.((Insect(x) & Insect(y) & BareEyes(y)) -> DifficultToSeen(x,y))", "all x y.((Insect(x) & BareEyes(y)) -> DifficultToSee(x,y))", "exists x.(Insect(x) & HasBarbedEyes(x))", "all x.((Insect(x) & HasBareEyes(x)) -> DifficultToSee(x))", "all x.((Insect(x) & BareEyes(x)) -> DifficultToSeen(x))", "exists x.(Insect(x) & HasBarbedEyes(x))"]}
{"id": "entailmentbank_validation_891", "nl": "magnifying glass is used to see small things by making objects appear bigger.", "fol": "", "prediction": ["all x.(MagnifyingGlass(x) -> (SeesSmallThings(x) & MakesObjectsAppearBigger(x)))", "all x y.((MagnifyingGlass(x) & SmallThing(y)) -> UsedToSeeBy(x,y))", "all x y.((MagnifyingGlass(x) & SmallThing(y) & Object(z)) -> SeesByAppearingBigger(x,y,z))", "all x y z.((MagnifyingGlass(x) & SmallThing(y) & Object(z)) -> SeesByAppearingBigger(x,y,z))", "all x.(MagnifyingGlass(x) -> (SeesSmallThings(x) & MakesObjectsAppearBigger(x)))", "all x.(MagnifyingGlass(x) -> (SeeSmallThings(x) & MakesObjectsAppearBigger(x)))", "all x.(MagnifyingGlass(x) -> (UsedToSeeSmallThings(x) & MakesObjectsAppearBigger(x)))", "all x y.((MagnifyingGlass(x) & SmallThing(y)) -> SeesByAppearingBigger(x,y))", "all x.(MacrolatingGlass(x) -> (SeesSmallThings(x) & MakesObjectsAppearBigger(x)))", "all x y z.((MagnifyingGlass(x) & SmallThing(y) & Object(z) & AppearsBigger(z)) -> UsedToSee(x,y,z))", "all x y.((MagnifyingGlass(x) & SmallThing(y) & MakesAppearBigger(x,y)) -> UsedToSee(x,y))", "all x y.((MagnifyingGlass(x) & SmallThing(y)) -> UsedToSeeByMakingObjectsAppearBigger(x,y))", "exists x.(MagnifyingGlass(x) & SmallThing(x) & MakesObjectsAppearBigger(x))", "all x.(MagnifyingGlass(x) -> SeesSmallThings(x))", "exists x.(MagnifyingGlass(x) & UsedToSeeSmallThings(x) & MakesObjectsAppearBigger(x))", "exists x.(MagnifyingGlass(x) & UsedToSeeSmallThings(x) & MakesObjectsAppearBigger(x))"]}
{"id": "entailmentbank_validation_892", "nl": "magnifying glass can be used to see an insect by making it appear bigger.", "fol": "", "prediction": ["all x y.((MagnifyingGlass(x) & Insect(y)) -> CanBeUsedToSee(x,y))", "all x y.((MagnifyingGlass(x) & Insect(y) & AppearsBigger(y)) -> CanSee(x,y))", "all x.(MagnifyingGlass(x) -> (SeesInsect(x) & MakesItAppearBigger(x)))", "all x y z.((MagnifyingGlass(x) & Insect(y) & Insect(z) & AppearsBigger(x,y,z)) -> CanSee(x,y,z))", "all x.(MacrolatingGlass(x) -> (SeesInsect(x) & MakesItAppearBigger(x)))", "all x y.((MagnifyingGlass(x) & Insect(y)) -> CanSeeByAppearingBigger(x,y))", "all x.(MagnifyingGlass(x) -> (SeesInsect(x) & MakesIsMore(x)))", "all x y z.((MagnifyingGlass(x) & Insect(y) & Insect(z) & AppearsBigger(z)) -> CanSee(x,y,z))", "all x.(MagnifyingGlass(x) -> CanBeUsedToSeeInsect(x))", "exists x.(MagnifyingGlass(x) & Insect(x) & MakesAppearBigger(x))", "all x y.((MagnifyingGlass(x) & Insect(y)) -> (Sees(x,y) & AppearsBigger(y)))", "exists x.(MacrolifyingGlass(x) & Insect(x) & MakesAppearBigger(x))", "all x y.((MacrolatingGlass(x) & Insect(y)) -> CanBeUsedToSee(x,y))", "all x y z.((MagnifyingGlass(x) & Insect(y) & Insect(z) & AppearsBigger(y,z)) -> CanSee(x,y,z))", "exists x.(MagnifyingGlass(x) & Insect(y) & MakesAppearBigger(x,y))", "all x y.((MagnifyingGlass(x) & Insect(y)) -> CanBeUsedToSeeByAppearingBigger(x,y))"]}
{"id": "entailmentbank_validation_893", "nl": "a hand lens is a kind of magnifying glass.", "fol": "", "prediction": ["all x.(HandLens(x) -> MagnifyingGlass(x))", "all x y.((HandLens(x) & MagnifyingGlass(y)) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x y.((HandLens(x) & MagnifyingGlass(y)) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x y.((HandLens(x) & MagnifyingGlass(y)) -> MagnifyingGlass(x))", "all x y.((HandLens(x) & MagnifyingGlass(y)) -> MagnifyingGlass(x,y))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "exists x.(HandLense(x) & MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "exists x.(HandLens(x) & MagnifyingGlass(x))", "exists x.(HandLens(x) & MagnifyingGlass(x))"]}
{"id": "entailmentbank_validation_894", "nl": "a hand lens can help seeing the insect by magnifying the insect.", "fol": "", "prediction": ["all x y.((HandLens(x) & Insect(y)) -> HelpsSeeingByMagnifying(x,y))", "all x.(HandLens(x) -> (HelpsSeeingInsect(x) & MagnifiesInsect(x)))", "all x y.((HandLens(x) & Insect(y)) -> CanHelpSeeing(x,y))", "all x y z.((HandLens(x) & Insect(y) & Insect(z)) -> (HelpsSeeing(x,y,z) & Magnifies(x,y)))", "all x.(HandLens(x) -> (HelpsSeeingInsect(x) & MagnifiesInsect(x)))", "all x y.((HandLens(x) & Insect(y) & Magnifies(x,y)) -> HelpsSee(x,y))", "all x y z.((HandLens(x) & Insect(y) & Insect(z) & Magnifies(x,y,z)) -> HelpsSee(x,y))", "all x.(HandLens(x) -> (HelpsSeeingInsect(x) & MagnifiesInsect(x)))", "all x y.((HandLens(x) & Insect(y) & Magnifies(x,y)) -> HelpsSee(x,y))", "all x y z.((HandLens(x) & Insect(y) & Insect(z)) -> HelpsSeeingByMagnifying(x,y,z))", "all x.(HandLens(x) -> HelpsSeeingInsect(x))", "exists x.(HandLens(x) & CanHelpSeeing(x,Insect,Insect) & Magnifies(x,Insect))", "all x y.((HandLens(x) & Insect(y) & Magnifies(x,y)) -> HelpsSeeing(x,y))", "all x.(HandLens(x) -> (HelpsSeeingInsect(x) & MagnifiesInsect(x)))", "exists x.(HandLens(x) & HelpsSeeInsectByMagnifying(x))", "all x y.((HandLens(x) & Insect(y) & Magnifies(x,y)) -> HelpsSeeing(x,y))"]}
{"id": "entailmentbank_validation_895", "nl": "building a doghouse requires cutting materials into a fixed size.", "fol": "", "prediction": ["all x.(Doghouse(x) -> RequiresCuttingMaterials(x))", "all x y.((Doghouse(x) & Doghouse(y)) -> RequiresCuttingMaterials(x,y))", "all x.(Doghouse(x) -> (RequiresCuttingMaterials(x) & FixedSize(x)))", "all x.((Doghouse(x) & CutsMaterials(x)) -> FixedSize(x))", "all x y.((Doghouse(x) & CutsMaterials(y) & FixedSize(x)) -> Requires(x,y))", "all x y.((Doghouse(x) & Doghouse(y)) -> RequiresCuttingMaterials(x,y))", "all x.(Doghouse(x) -> (CutsMaterials(x) & FixesSize(x)))", "all x y z.((Doghouse(x) & Material(y) & Material(z)) -> RequiresCutting(x,y,z))", "all x.(Doghouse(x) -> RequiresCuttingMaterials(x))", "all x.((Doghouse(x) & Building(x)) -> RequiresCuttingMaterials(x,fixedSize))", "all x y.((Doghouse(x) & Doghouse(y)) -> (CutsMaterials(x,y) & FixesSize(x,y)))", "all x y z.((Doghouse(x) & Material(y) & Size(z) & CutsInto(x,y,z)) -> RequiresFixedSize(x,y,z))", "all x y.((Doghouse(x) & CutMaterials(y)) -> RequiresFixedSize(x,y))", "all x.(Doghouse(x) -> RequiresCuttingMaterialsIntoFixedSize(x))", "all x.(Doghouse(x) -> (RequiresCuttingMaterials(x) & FixesSize(x)))", "exists x.(Doghouse(x) & CutsMaterialsIntoFixedSize(x))"]}
{"id": "entailmentbank_validation_896", "nl": "cutting a material usually requires measuring length.", "fol": "", "prediction": ["all x y.((Material(x) & Material(y)) -> (Cutting(x,y) & RequiresMeasuringLength(x,y)))", "all x.(CuttingMaterial(x) -> RequiresMeasuringLength(x))", "all x.((MakingMaterial(x) & RequiresMeasurementLength(x)) -> Cuts(x,MeasuresLength))", "all x y.((Material(x) & Material(y)) -> RequiresMeasuringLength(x,y))", "all x y z.((Material(x) & Material(y) & Material(z) & Cuts(x,y)) -> RequiresMeasuringLength(x,z))", "all x.((MadeOfMaterial(x) & MeasuringLength(x)) -> Cuts(x,MeasuresLength))", "all x y.((Material(x) & Material(y)) -> (CuttingRequiresMeasuringLength(x,y)))", "all x.(CuttingMaterial(x) -> RequiresMeasuringLength(x))", "all x y.((Material(x) & Material(y) & Cuts(x,y)) -> RequiresMeasuringLength(x,y))", "all x.((MakingMaterial(x) & MeasuringLength(x)) -> Requires(x,y))", "all x.((MadeInMaterial(x) & Cuts(x,MeasuresLength)) -> Requires(x,MeasuresLength))", "all x y.((CuttingMaterial(x) & Material(y)) -> RequiresMeasuringLength(x,y))", "all x y.((Material(x) & Material(y)) -> MeasuringLength(x,y))", "all x.(CuttingMaterial(x) -> RequiresMeasuringLength(x))", "all x y.((Material(x) & Material(y) & Cuts(x,y)) -> RequiresMeasuringLength(x,y))", "all x.(CuttingMaterial(x) -> RequiresMeasurementOfLength(x))"]}
{"id": "entailmentbank_validation_897", "nl": "cutting a material when building a doghouse  requires measuring length.", "fol": "", "prediction": ["all x y.((Doghouse(x) & Doghouse(y)) -> (CuttingMaterial(x,y) & RequiresMeasuringLength(x,y)))", "all x.((Doghouse(x) & Building(x)) -> RequiresMeasurementLength(x))", "all x.((CuttingMaterial(x) & BuildingDoghouse(x)) -> RequiresMeasuringLength(x))", "all x.((Doghouse(x) & CutsMaterial(x)) -> RequiresMeasuringLength(x))", "all x y z.((Doghouse(x) & Material(y) & Doghouse(z) & Cuts(x,y) & RequiresMeasuringLength(x,z)) -> RequiresMeasuringLength(x,y,z))", "all x y.((Doghouse(x) & Doghouse(y) & CutsMaterial(x,y)) -> RequiresMeasuringLength(x,y))", "all x.((Dighouse(x) & Building(x)) -> RequiresMeasurementLength(x))", "all x y.((Doghouse(x) & Doghouse(y)) -> (CuttingMaterial(x,y) & RequiresMeasuringLength(x,y)))", "all x y z.((Doghouse(x) & Material(y) & Doghouse(z) & Building(x,y,z)) -> RequiresMeasuringLength(x,y,z))", "all x.((CuttingMaterialWhenBuildingDoghouse(x) & Doghouse(y)) -> RequiresMeasuringLength(x,y))", "all x y.((Doghouse(x) & Doghouse(y) & Building(x,y)) -> RequiresMeasurementLength(x,y))", "all x.((CuttingMaterial(x) & BuildingDoghouse(x)) -> RequiresMeasuringLength(x))", "all x y.((Doghouse(x) & CutsMaterial(x,y) & Builds(y,x)) -> RequiresMeasuringLength(x))", "all x.((Doghouse(x) & Building(x)) -> RequiresMeasurementLength(x))", "all x y.((Doghouse(x) & Doghouse(y) & CutsMaterial(x,y)) -> RequiresMeasurementLength(x,y))", "all x.((BuildingDoghouse(x) & CuttingMaterial(x)) -> RequiresMeasurementLength(x))"]}
{"id": "entailmentbank_validation_898", "nl": "a tape can be used to measure length.", "fol": "", "prediction": ["all x.(Tape(x) -> MeasuresLength(x))", "all x.((Tape(x) & MeasuresLength(x)) -> CanBeUsedToMeasureLength(x))", "all x.(Tape(x) -> MeasureLength(x))", "all x y.((Tape(x) & Tape(y)) -> MeasuresLength(x,y))", "all x y.((Tape(x) & MeasureLength(y)) -> CanBeUsedToMeasureLength(x,y))", "all x.(Tape(x) -> MeasuresLength(x))", "all x y.((Tape(x) & Tape(y) & MeasuresLength(x,y)) -> CanBeUsedToMeasureLength(x,y))", "all x.((Tape(x) & MeasuresLength(x)) -> CanBeUsedToMeasureLength(x))", "all x y.((Teeth(x) & Tape(y)) -> MeasuresLength(x,y))", "all x.(Tape(x) -> MeasureLength(x))", "exists x.(Apiece(x) & MeasuresLength(x))", "exists x.(Teeth(x) & MeasuresLength(x))", "all x y.((Teeth(x) & Tape(y)) -> MeasuresLength(x,y))", "exists x.(Tape(x) & UsedToMeasureLength(x))", "exists x.(Tape(x) & MeasuresLength(x))", "exists x.(Teeth(x) & MeasuresLength(x))"]}
{"id": "entailmentbank_validation_899", "nl": "cutting wood when building a doghouse requires using a tape.", "fol": "", "prediction": ["all x.((Doghouse(x) & Building(x)) -> RequiresTape(x))", "all x y.((Doghouse(x) & Doghouse(y)) -> (CuttingWood(x,y) & RequiresTape(x)))", "all x.((Doghouse(x) & Doghouse(y)) -> RequiresTape(x,y))", "all x.((Doghouse(x) & Building(x) & CutsWood(x)) -> RequiresTape(x))", "all x y.((Doghouse(x) & Doghouse(y)) -> RequiresTape(x,y))", "all x.((Doghouse(x) & CutsWood(x) & Builds(x,Doghouse)) -> RequiresTape(x))", "all x y z.((Doghouse(x) & Doghouse(y) & Tape(z)) -> RequiresCuttingWood(x,y,z))", "all x.((CuttingWood(x) & BuildingDoghouse(x)) -> RequiresTape(x))", "all x y.((Doghouse(x) & Doghouse(y) & Building(x,y)) -> RequiresTape(x))", "(all x.((Doghouse(x) & Building(x)) -> UsesTape(x)))", "all x.((BuildingDoghouse(x) & CuttingWood(x) & RequiresTape(x)) -> CutsWood(x))", "all x y z.((Doghouse(x) & Doghouse(y) & Tape(z)) -> CutsWoodWhenBuilding(x,y,z))", "all x y.((Doghouse(x) & Doghouse(y)) -> (CuttingWood(x,y) & RequiresTape(x,y)))", "all x.((Doghouse(x) & Doghouse(x)) -> RequiresTape(x))", "all x.((Doghouse(x) & Building(x,y) & Wood(y)) -> RequiresTape(x))", "all x y.((Doghouse(x) & Doghouse(y) & CutsWood(x,y)) -> RequiresTape(x))"]}
{"id": "entailmentbank_validation_900", "nl": "food is a kind of substance.", "fol": "", "prediction": ["all x.(Food(x) -> Substance(x))", "all x.(Food(x) -> Substance(x))", "all x y.((Food(x) & Substance(y)) -> Substance(x))", "all x.(Food(x) -> Substance(x))", "all x y.((Food(x) & Substance(y)) -> Substance(x))", "all x.(Food(x) -> Substance(x))", "all x y.((Food(x) & Substance(y)) -> SortOf(x,y))", "all x.(Food(x) -> Substance(x))", "all x y.((Food(x) & Substance(y)) -> Is(x,y))", "all x.(Food(x) -> Substance(x))", "all x.(Food(x) -> Substance(x))", "all x.(Food(x) -> Substance(x))", "all x.(Food(x) -> Substance(x))", "exists x.(Food(x) & ContainsSubstance(x))", "exists x.(Food(x) & Substance(x))", "exists x.(Food(x) & Substance(x))"]}
{"id": "entailmentbank_validation_901", "nl": "candy is a kind of food.", "fol": "", "prediction": ["all x.(Candy(x) -> Food(x))", "all x.(Candy(x) -> Food(x))", "all x y.((Candy(x) & Food(y)) -> Food(x))", "all x.(Chocolate(x) -> Food(x))", "all x.(Candy(x) -> Food(x))", "all x y.((Candy(x) & Food(y)) -> Food(x))", "all x.(Candy(x) -> Food(x))", "all x.(Chocolate(x) -> Food(x))", "(all x.(Candy(x) -> Food(x)))", "all x y.((Candy(x) & Food(y)) -> Food(x))", "all x.(Candy(x) -> Food(x))", "exists x.(Conditor(x) & Food(x))", "all x.(Candy(x) -> Food(x))", "exists x.(Chocolate(x) & Food(x))", "all x.(Candy(x) -> Food(x))", "exists x.(Candy(x) & Food(x))"]}
{"id": "entailmentbank_validation_902", "nl": "candy is a kind of substance.", "fol": "", "prediction": ["all x.(Candy(x) -> Substance(x))", "all x.(Candy(x) -> Substance(x))", "all x y.((Candy(x) & Substance(y)) -> Is(x,y))", "all x.(Chocolate(x) -> Substance(x))", "all x y.((Candy(x) & Substance(y)) -> SortOf(x,y))", "all x.(Candy(x) -> Substance(x))", "all x.(Chocolate(x) -> Substance(x))", "all x y.((Candy(x) & Substance(y)) -> (TypeOf(x,y) & Contains(x,y)))", "all x.(Candy(x) -> Substance(x))", "all x y.((Candy(x) & Substance(y)) -> KindOf(x,y))", "exists x.(Conditon(x) & Substance(x))", "all x.(Candy(x) -> Substance(x))", "exists x.(Conditon(x) & Substance(x))", "all x.(Candy(x) -> Substance(x))", "exists x.(Chocolate(x) & Substance(x))", "exists x.(Candy(x) & Substance(x))"]}
{"id": "entailmentbank_validation_903", "nl": "a thermometer is used to measure temperature of substance.", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresTemperatureOfSubstance(x))", "all x y.((Thermometer(x) & Substance(y)) -> MeasuresTemperature(x,y))", "all x y z.((Thermometer(x) & Substance(y) & Temperature(z)) -> Measures(x,y,z))", "all x.(Thermometer(x) -> MeasuresTemperatureOfSubstance(x))", "all x y.((Thermometer(x) & Substance(y)) -> MeasuresTemperature(x,y))", "all x.(Thermometer(x) -> MeasuresTemperatureOfSubstance(x))", "all x y.((Thermometer(x) & Substance(y)) -> MeasuresTemperature(x,y))", "all x y z.((Thermometer(x) & Substance(y) & Temperature(z)) -> Measures(x,y,z))", "all x.(Thermometer(x) -> MeasuresTemperatureOfSubstance(x))", "all x y.((Thermometer(x) & Substance(y)) -> MeasuresTemperature(x,y))", "all x.(Thermometer(x) -> MeasuresTemperatureOfSubstance(x))", "all x y.((Thermometer(x) & Substance(y)) -> MeasuresTemperature(x,y))", "exists x.(Thermometer(x) & MeasuresTemperature(x))", "all x y.((Thermometer(x) & Substance(y)) -> MeasuresTemperature(x,y))", "exists x.(Thermometer(x) & MeasuresTemperatureOfSubstance(x))", "exists x.(Thermometer(x) & MeasuresTemperature(x,Substance))"]}
{"id": "entailmentbank_validation_904", "nl": "a thermometer is used to measure the temperautre of the candy.", "fol": "", "prediction": ["all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperature(x,y))", "all x.(Thermometer(x) -> MeasuresTemperatureOfCandy(x))", "all x y z.((Thermometer(x) & Candy(y) & Temperance(z)) -> Measures(x,y,z))", "all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperature(x,y))", "(MeasuresTemperatureOfCandy(thermometer))", "all x.(Thermometer(x) -> MeasuresTemperatureOfCandy(x))", "all x y z.((Thermometer(x) & Candy(y) & Tempestautre(z)) -> Measures(x,y,z))", "all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperature(x,y))", "all x.(Thermometer(x) -> MeasuresTemperatureOfCandy(x))", "all x y z.((Thermometer(x) & Candy(y) & Temperance(z)) -> Measures(x,y,z))", "all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperature(x,y))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperatureOf(x,y))", "all x.(Thermometer(x) -> MeasuresTemperatureOfCandy(x))", "exists x.(Thermometer(x) & MeasuresTemperature(x))", "exists x.(Thermometer(x) & MeasuresTemperature(x,y))"]}
{"id": "entailmentbank_validation_905", "nl": "a string is short in length.", "fol": "", "prediction": ["all x.(String(x) -> ShortLength(x))", "all x.(String(x) -> ShortLength(x))", "all x y.((String(x) & ShortLength(x)) -> ShortLength(y))", "all x.(String(x) -> ShortLength(x))", "all x y.((String(x) & String(y)) -> ShortLength(x))", "all x.(String(x) -> ShortInLength(x))", "all x.(String(x) -> ShortLength(x))", "all x y.(ShortLength(x) -> String(y))", "all x y.(String(x) -> ShortLength(x,y))", "all x.(String(x) -> ShortInLength(x))", "all x.(String(x) -> ShortLength(x))", "exists x.(String(x) & Short(x))", "exists x.(String(x) & ShortLength(x))", "exists x.(String(x) & Short(x))", "exists x.(String(x) & ShortInLength(x))", "exists x.(String(x) & ShortLength(x))"]}
{"id": "entailmentbank_validation_906", "nl": "centimeter is usually used to measure short length.", "fol": "", "prediction": ["all x.(Centimeter(x) -> UsedToMeasureShortLength(x))", "all x.(Centimeter(x) -> MeasuresShortLength(x))", "(MeasuresShortLength(centimeter) & UsuallyUsedToMeasureShortLength(centimeter))", "all x.(Centric(x) -> UsedToMeasureShortLength(x))", "all x.((Centimeter(x) & ShortLength(x)) -> UsedToMeasure(x,y))", "all x y.((Centimeter(x) & ShortLength(y)) -> UsedToMeasure(x,y))", "(MeasuresShortLength(centric) & UsedToMeasureShortLength(centric))", "all x.(Centimeter(x) -> UsedToMeasureShortLength(x))", "all x.((Centrice(x) & ShortLength(x)) -> UsedToMeasure(x,y))", "all x y.((Centrimeter(x) & ShortLength(y)) -> Measures(x,y))", "all x y.((Centric(x) & ShortLength(y)) -> UsedToMeasure(x,y))", "all x.(Centrimeter(x) -> MeasuresShortLength(x))", "all x.((Centimeter(x) & ShortLength(x)) -> Measures(x,y))", "all x y.((Centimeter(x) & ShortLength(y)) -> UsedToMeasure(x,y))", "all x.(Centric(x) -> MeasuresShortLength(x))", "all x.(Centimeter(x) -> UsedToMeasureShortLength(x))"]}
{"id": "entailmentbank_validation_907", "nl": "centimeter is a better unit to measure the length of the string.", "fol": "", "prediction": ["all x.((Centimeter(x) & String(y)) -> BetterUnitToMeasureLength(x,y))", "all x.(Centimeter(x) -> BetterUnitToMeasureLengthOfString(x))", "all x y.((Centimeter(x) & String(y)) -> BetterUnitToMeasureLength(x,y))", "all x.((Centimeter(x) & MeasuresStringLength(x)) -> BetterUnit(x))", "(MeasuresLengthOfString(centric) & BetterUnitToMeasureLengthOfString(centric))", "all x.(Centimeter(x) -> BetterUnitToMeasureStringLength(x))", "all x y.((Centimeter(x) & String(y)) -> BetterUnitToMeasureLength(x,y))", "all x.((Centimeter(x) & String(y)) -> BetterUnitToMeasureLength(x,y))", "all x.(Centimeter(x) -> BetterUnitToMeasureLengthOfString(x))", "all x.((Centimeter(x) & MeasuresStringLength(x)) -> BetterUnit(x))", "all x y.((Centimeter(x) & String(y)) -> BetterUnitToMeasureLength(x,y))", "all x.(Centimeter(x) -> BetterUnitForString(x))", "all x.((Centimeter(x) & String(y)) -> BetterUnitToMeasureLength(x,y))", "all x y.((Centimeter(x) & String(y)) -> BetterUnitToMeasureLength(x,y))", "exists x.(Centimeter(x) & MeasuresLengthOfString(x))", "all x.(Centimeter(x) -> BetterUnitToMeasureStringLength(x))"]}
{"id": "entailmentbank_validation_908", "nl": "meters m are a metric / si unit used for measuring length.", "fol": "", "prediction": ["all x.(Measurement(x) -> (MetalUnit(x) & SiUnit(x) & UsedForMeasuringLength(x)))", "all x.(MeasuresLength(x) -> (MetalUnit(x) & SiUnit(x)))", "all x.(Meter(x) -> (Meter(x) & SiUnit(x) & MeasuresLength(x)))", "(MeasuresLength(m) | MeasuresLength(m)))", "all x.(Meter(x) -> (MeterUnit(x) & MeasuringLength(x)))", "all x y.((Meter(x) & Metric(y)) -> MeasuresLength(x,y))", "all x y.((Meter(x) & Meter(y)) -> (MeterUnit(x,y) & MeasuresLength(x,y)))", "all x.(Measurement(x) -> (Metal(x) | SiUnit(x)))", "all x y.((Measurement(x) & Measurement(y)) -> (MetalUnit(x,y) & Measurement(x,y)))", "(MeasuresLength(m) & MeasuresLength(m))", "(MeasuresLength(meters,m) & MeasuresLength(meters,si))", "all x.((Meter(x) & Metric(x) & Metric(x) & Metric(x)) -> MeasuresLength(x))", "all x.(Meter(x) -> (MeasuresLength(x) & MeasuresLength(x)))", "all x.(MeasuresLength(x) -> (Metal(x) | Si(x)))", "all x y.((Meter(x) & MetricUnit(y) & MetricUnit(y)) -> MeasuresLength(x,y))", "all x.(Measurement(x) -> (Measurement(x) & Measurement(x) & Measurement(x)))"]}
{"id": "entailmentbank_validation_909", "nl": "yard is an imperial unit used for measuring length.", "fol": "", "prediction": ["all x.(Garden(x) -> (ImperialUnit(x) & MeasuresLength(x)))", "all x.(MeasuresLength(x) -> ImperialUnit(x))", "all x y.((Garden(x) & ImperialUnit(y) & MeasuresLength(x,y)) -> UsedFor(x,y))", "all x.(Garden(x) -> (ImperialUnit(x) & UsedForMeasuringLength(x)))", "(ImperialUnit(yard) & MeasuresLength(yard))", "all x.((Garden(x) & ImperialUnit(x) & MeasuresLength(x)) -> UsedFor(x,y))", "all x.(MetalUnit(x) -> Imperial(x))", "(ImperialUnitForMeasuringLength(x) & UsedForMeasuringLength(x))", "all x.(MeasuresLength(x) -> ImperialUnit(x))", "yard(imperialUnit) & MeasuresLength(imperialUnit))", "all x y.((Garage(x) & ImperialUnit(y) & UsedForMeasuringLength(x,y)) -> MeasuresLength(x,y))", "all x y.((Garden(x) & ImperialUnit(y) & MeasuresLength(x,y)) -> UsedFor(x,y))", "(ImperialUnit(yard) & MeasuresLength(yard,length))", "all x.(Garage(x) -> (ImperialUnit(x) & MeasuresLength(x)))", "All x.(MetalLength(x) -> ImperialUnit(x))", "All x.(MeasuresLength(x) -> ImperialUnit(x))"]}
{"id": "entailmentbank_validation_910", "nl": "yard and meter are both unit used for measuring length.", "fol": "", "prediction": ["all x.((MeasuresLength(x) & MeasuresLength(x)) -> (MeasuresLength(x) & MeasuresLength(x)))", "(MeasuresLength(yard) & MeasuresLength(meter))", "(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength))))", "((MeasuresLength(yard) & MeasuresLength(meter)) | MeasuresLength(meter))", "all x y.((Measurement(x) & Yard(y) & Meter(y)) -> MeasuresLength(x,y))", "all x.((Meter(x) & Yard(x)) -> MeasuresLength(x))", "all x.((MeasuresLength(x) & MeasuresLength(x)) -> (MeasuresLength(x) | MeasuresLength(x)))", "all x.((MeasurementUnit(x) & MeasurementUnit(x)) -> (MeasurementUnit(x) & MeasurementUnit(x)))", "all x y.((MeasuresLength(x) & Yard(y) & Meter(y)) -> MeasuresLength(x,y))", "all x.(MeasuresLength(x) -> (MeasuresLength(x) & MeasuresLength(x)))", "(MeasuresLength(yard) & MeasuresLength(meter))", "(MeasuresLength(yard,x) & MeasuresLength(meter,x))", "both units used for measuringLength(yard,y) & MeasuresLength(meter,y))", "all x y.((Meter(x) & Yard(y)) -> MeasuresLength(x,y))", "(MeasuresLength(yard,y) & MeasuresLength(meter,y))", "(MeasuresLength(yard) & MeasuresLength(meter))"]}
{"id": "entailmentbank_validation_911", "nl": "1 yard equals to 09 meter.", "fol": "", "prediction": ["all x.((Garden(x) & Yard(x)) -> (09Meter(x)))", "all x y.((Garden(x) & Yard(y)) -> (Equals(x,y) & -Equals(x,y)))", "1 YardEqualsTo09Meter(x)", "all x.((Garden(x) & Yard(x)) -> EquivalentTo(x,09))", "-(Mileage(x,1) & Yard(x,9))", "all x.((Garage(x) & Yard(x,9)) -> Equivalent(x,9))", "all x.((Grafin(x) & Yard(x,9)) -> EquivalentTo(x,9))", "all x y.((Garage(x) & Yard(y)) -> (Equals(x,y) & NumberOfMeter(x,y)))", "1 Yard(x) -> 9Meter(x))", "1 YardEqualsTo09Meter(x)", "(EqualsTo09Meter(yard,1))", "all x.((Garden(x) & Yard(x)) -> 9Meter(x))", "(EqualsTo(yard,09))", "All x.(Garden(x) -> EquivalentTo(x,09))", "all x y.((Garden(x) & Yard(y)) -> EquivalentTo(x,y))", "all x.(Milestone(x,1) -> Yard(x,9))"]}
{"id": "entailmentbank_validation_912", "nl": "meter is the metric unit that is the most similar to yard.", "fol": "", "prediction": ["all x.(Meter(x) -> MostSameToGarden(x))", "all x y.((Meter(x) & Yard(y)) -> Similar(x,y))", "all x.(Meter(x) -> SimilarToGarden(x))", "(MetricUnit(meter) & MostSameToGarden(meter))", "all x.(Meter(x) -> (MetalUnit(x) & MostSameToGarden(x)))", "(Meter(meter) & MostSameToGarden(meter))", "all x y.((Meter(x) & Yard(y)) -> MostSameUnit(x,y))", "all x.(MetricUnit(x) -> MostSameToGarden(x))", "-Meter(m) & MetricUnit(m) & SimilarToGarden(m,m,m))", "(MetricUnit(meter) & MostSameToGarden(meter,yard))", "all x.(Meter(x) -> MostSameAtMorning(x))", "all x y.(MetricUnit(x) & Yard(y) & SimilarTo(x,y))", "all x y.((Meter(x) & Yard(y)) -> SimilarTo(x,y))", "all x.(MetricUnit(x) -> MostSameToGarden(x))", "all x y.((Meter(x) & Yard(y)) -> MostSameUnit(x,y))", "all x.(Meter(x) -> SimilarToM yard(x))"]}
{"id": "entailmentbank_validation_913", "nl": "zinc is a kind of metal.", "fol": "", "prediction": ["all x.(Zinc(x) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "all x y.((Zinc(x) & Metal(y)) -> Metal(x))", "(all x.(Zinc(x) -> Metal(x)))", "all x.(Zinc(x) -> Metal(x))", "(all x.(Zinc(x) -> Metal(x)))", "all x y.((Zinc(x) & Metal(y)) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "all x y.((Zinc(x) & Metal(y)) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "exists x.(Zinc(x) & Metal(y) & Metal(z))", "all x.(Zinc(x) -> Metal(x))", "exists x.(Zinc(x) & Metal(x))", "exists x.(Zinc(x) & Metal(x) & Metal(x))"]}
{"id": "entailmentbank_validation_914", "nl": "copper is a kind of metal.", "fol": "", "prediction": ["all x.(Cuivre(x) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))", "(all x.(Cuircon(x) -> Metal(x)))", "all x y.((Cuir(x) & Metal(y)) -> Metal(x))", "all x.(Cuircon(x) -> Metal(x))", "all x.(Copper(x) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))", "all x y.((Cuivre(x) & Metal(y)) -> Metal(x))", "all x y.((Cuircon(x) & Metal(y)) -> Metal(x))", "(all x.(Cuivre(x) -> Metal(x)))", "all x.(Cuircon(x) -> Metal(x))", "all x.(Copper(x) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))", "all x.(Copper(x) -> Metal(x))", "exists x.(Cuircon(x) & Metal(x))", "all x.(Cuivre(x) -> Metal(x))"]}
{"id": "entailmentbank_validation_915", "nl": "copper and zinc are two metals.", "fol": "", "prediction": ["all x.((Metal(x) & Copper(x) & Zinc(x)) -> Metal(x))", "(Metal(copper) & Metal(zinc))", "(Material(copper) & Metal(zinc))", "all x.((Metal(x) & Metal(x)) -> (Cuid(x) & Zinc(x)))", "all x y.((Metal(x) & Metal(y)) -> (Cuid(x) & Zinc(y)))", "((Cuid(copper) & Zinc(zinc)) -> Metal(copper,z)) & Metal(zinc,z))", "((Copper(copper) | Zinc(copper)))", "(Metal(copper) & Metal(zinc))", "all x.(Metal(x) -> (Cuid(x) & Zinc(x)))", "all x.((Metal(x) & Copper(x) & Zinc(x)) -> Metal(x))", "all x y.((Metal(x) & Metal(y)) -> (Cuircon(x) & Zinc(y)))", "all x.((Metal(x) & Metal(x)) -> (Cuircon(x) & Zinc(x)))", "(Material(copper) & Metal(zinc))", "(Materials(copper) & Metal(zinc))", "all x.(Metal(x) -> (Copper(x) | Zinc(x)))", "(Metal(copper) & Metal(zinc))"]}
{"id": "entailmentbank_validation_916", "nl": "brass is made of copper and zinc.", "fol": "", "prediction": ["all x.(Brass(x) -> (MadeOf(x,Cuid) & MadeOf(x,Zinc)))", "(MadeOf(brass,Cuid) & MadeOf(brass,Zinc))", "all x.(Balloy(x) -> (MadeOf(x,Cuid) & MadeOf(x,Zinc)))", "all x y.((Brass(x) & Copper(y)) -> Zinc(x))", "all x.(Brass(x) -> (MadeOf(x,Cuir) & MadeOf(x,Zinc)))", "all x.(Brass(x) -> (MadeOfCuid(x) & MadeOfZinc(x)))", "(all x.(Brass(x) -> MadeOf(x,Cuirc)) & all y.(Brass(y) -> MadeOf(y,Zinc)))", "(MadeOfCuid(brass) & MadeOfZinc(brass))", "all x y.((Brass(x) & Copper(y) & Zinc(z)) -> MadeOf(x,y,z))", "all x.(Brass(x) -> (MadeOfCopper(x) & MadeOfZinc(x)))", "all x.(Balloy(x) -> (MadeOf(x,Cuir) & MadeOf(x,Zinc)))", "all x y.((Brass(x) & Copper(y)) -> MadeOf(x,y))", "all x.(Brass(x) -> (MadeOf(x,Copper) & MadeOf(x,Zinc)))", "all x.(Brass(x) -> (MadeOfCuid(x) & MadeOfZinc(x)))", "all x.(Balloy(x) -> (MadeOfCopper(x) & MadeOfZinc(x)))", "All x.(Brass(x) -> (MadeOfCuid(x) & MadeOfZinc(x)))"]}
{"id": "entailmentbank_validation_917", "nl": "brass is made of two metals.", "fol": "", "prediction": ["all x.(Brass(x) -> MadeOfTwoMetals(x))", "all x y.((Brass(x) & Metal(y)) -> MadeOf(x,y))", "brass is madeOfTwoMetals(brass)", "all x.(Brass(x) -> MadeOfTwoMetals(x))", "(MadeOfMetals(brass) & MadeOfMetals(brass,metal))", "all x.(Ball(x) -> MadeOfTwoMetals(x))", "(MadeOfTwoMetals(brass))", "all x y.((Brass(x) & Metal(y)) -> MadeOf(x,y))", "brass (madeOfTwoMetals(brass))", "(MadeOfMetals(brass) & MadeOfMetals(brass))", "all x.(Brass(x) -> MadeOfTwoMetals(x))", "all x.(Balloy(x) -> MadeOfTwoMetals(x))", "all x.(Brass(x) -> (MadeOfTwoMetals(x)))", "all x y.((Brass(x) & Metal(y)) -> MadeOf(x,y))", "all x.(Brass(x) -> MadeOfTwoMetals(x))", "(MadeOfMetals(brass,2))"]}
{"id": "entailmentbank_validation_918", "nl": "an alloy is made of two or more metals.", "fol": "", "prediction": ["all x.(Alloy(x) -> (MadeOfMetals(x,2) | MadeOfMetals(x,3)))", "all x y.((Alloy(x) & Metal(y)) -> MadeOf(x,y))", "all x.(Alloy(x) -> exists y.(Metal(y) & MadeOf(x,y))))", "all x.(Alloy(x) -> (MadeOfMetals(x,2) | MadeOfMetals(x,3)))", "all x.((Alloy(x) & Metal(y)) -> MadeOf(x,y))", "all x y z.((Alloy(x) & Metal(y) & Metal(z)) -> MadeOf(x,y,z))", "all x.(Alloy(x) -> (MadeOfMetals(x,2) | MadeOfMetals(x,3)))", "all x y.((Alloy(x) & Metal(y)) -> MadeOf(x,y))", "all x.(Alloy(x) -> (MadeOfMetals(x,2) | MadeOfMetals(x,3)))", "all x y.((Alloy(x) & Metal(y)) -> MadeOf(x,y))", "all x.(Alloy(x) -> exists y.(Metal(y) & MadeOf(x,y)))", "exists x.(Alison(x) & MadeOfMetals(x,2))", "exists x.(Alloy(x) & Metal(x,2) & Metal(x,3))", "all x y.((Alloy(x) & Metal(y)) -> MadeOf(x,y))", "exists x.(Alloy(x) & MadeOfMetals(x,2))", "exists x.(Alloy(x) & Metal(x,2))"]}
{"id": "entailmentbank_validation_919", "nl": "brass is a kind of alloy.", "fol": "", "prediction": ["all x.(Brass(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x y.((Brass(x) & Alloy(y)) -> Alloy(x,y))", "all x.(Balloy(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x y.((Brass(x) & Alloy(y)) -> Alloy(x,y))", "Alloy(brass)", "all x.(Balloy(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "(all x.(Brass(x) -> Alloy(x))", "all x y.((Brass(x) & Alloy(y)) -> Alloy(x,y))", "Alloy(brass)", "all x.(Balloy(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))"]}
{"id": "entailmentbank_validation_920", "nl": "a rough surface can absorb sound.", "fol": "", "prediction": ["all x.(RoughSurface(x) -> AbsorbsSound(x))", "all x.(RoughSurface(x) -> CanAbsorbSound(x))", "all x y.((RoughSurface(x) & Sound(y)) -> CanAbsorb(x,y))", "all x.((RoughSurface(x) & AbsorbsSound(x)) -> CanAbsorbSound(x))", "all x y.((RoughSurface(x) & Sound(y) & Absorbs(x,y)) -> CanAbsorb(x,y))", "all x.(RoughSurface(x) -> AbsorbsSound(x))", "all x.((RoughSurface(x) & AbsorbsSound(x)) -> CanAbsorbSound(x))", "all x.(RoughSurface(x) -> CanAbsorbSound(x))", "all x y.((RoughSurface(x) & Sound(y)) -> Absorbs(x,y))", "all x.(RoughSurface(x) -> AbsorbSound(x))", "all x y.((RoughSurface(x) & Sound(y) & Absorbs(x,y)) -> CanAbsorb(x,y))", "all x y.((RoughSurface(x) & Sound(y) & Absorbs(x,y)) -> CanAbsorb(x,y))", "all x.(RoughSurface(x) -> CanAbsorbSound(x))", "all x.(RoughSurface(x) -> AbsorbsSound(x))", "exists x.(RoughSurface(x) & AbsorbSound(x))", "exists x.(RuggedSurface(x) & CanAbsorbSound(x))"]}
{"id": "entailmentbank_validation_921", "nl": "a carpet can absorb sound.", "fol": "", "prediction": ["all x.(Cedar(x) -> AbsorbsSound(x))", "all x.(Tread(x) -> AbsorbsSound(x))", "all x y.((Marble(x) & Sound(y)) -> Absorbs(x,y))", "all x.(Carpet(x) -> CanAbsorbSound(x))", "all x.(Kitchen(x) -> CanAbsorbSound(x))", "all x y.((Tread(x) & Sound(y)) -> CanAbsorb(x,y))", "all x.(Cedar(x) -> AbsorbsSound(x))", "all x y.((Marble(x) & Sound(y) & Absorbs(x,y)) -> CanAbsorb(x,y))", "all x.(Marble(x) -> AbsorbsSound(x))", "all x.((Marble(x) & AbsorbsSound(x)) -> Carpet(x))", "all x y.((Cedar(x) & Sound(y)) -> Absorbs(x,y))", "exists x.(Carpet(x) & AbsorbSound(x))", "all x.(Tread(x) -> CanAbsorbSound(x))", "exists x.(Marble(x) & AbsorbsSound(x))", "exists x.(Carpet(x) & AbsorbSound(x))", "exists x.(Marble(x) & CanAbsorbSound(x))"]}
{"id": "entailmentbank_validation_922", "nl": "if sound is absorbed, then sound can not reflect off the surface.", "fol": "", "prediction": ["all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -ReflectOffSurface(x))", "-(AbsorbedSound(x) & SoundCannotReflectOffSurface(x))", "all x y.((Sound(x) & Absorbed(x)) -> -ReflectsOffSurface(y))", "all x.((Sound(x) & Absorbed(x)) -> -ReflectsOffSurface(x))", "all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -ReflectOffSurface(x))", "(all x.((SoundAbsorbed(x)) -> -ReflectOffSurface(x)))", "all x y.((SoundAbsorbed(x) & Sound(y)) -> -ReflectsOffSurface(x,y))", "all x.(AbsorbedSound(x) -> -ReflectsOffSurface(x))", "all x y.((Sound(x) & Absorbed(x)) -> SoundCannotReflectOffSurface(y))", "all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -ReflectOffSurface(x))", "all x.((SoundAbsorbed(x) & -ReflectsOffSurface(x)) -> SoundCannotReflectOffSurface(x))", "all x.((Sound(x) & Absorbed(x)) -> SoundCannotReflectOffSurface(x))", "all x.(SoundAbsorbed(x) -> SoundCannotReflectOffSurface(x))", "all x y.((Sound(x) & Absorbed(x)) -> -ReflectsOffSurface(y))", "(all x.(AbsorbedSound(x) -> -ReflectsOffSurface(x)))", "all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -ReflectOffSurface(x))"]}
{"id": "entailmentbank_validation_923", "nl": "sound cannot reflect off the surface of a carpet.", "fol": "", "prediction": ["all x.((Sound(x) & Carpet(y)) -> -ReflectsOffSurface(x,y))", "all x y.((Sound(x) & Carpet(y)) -> -ReflectsOffSurface(x,y))", "all x.((Sound(x) & Carpet(y)) -> -ReflectsOffSurface(x,y))", "all x.((Sound(x) & CarpetSurface(x)) -> -ReflectsOffSurface(x))", "all x y.((Sound(x) & Carpet(y)) -> -ReflectsOffSurface(x,y))", "all x y z.((Sound(x) & Carpet(y) & Surface(z)) -> -ReflectsOff(x,y,z))", "(-ReflectsOffSurfaceOfCarpet(Sound))", "all x.(Sound(x) -> -ReflectsOffDessert(x))", "all x y.((Kitchen(x) & Carpet(y)) -> -ReflectsOffSurface(x,y))", "all x y.((Sound(x) & Carpet(y)) -> -ReflectsOffSurface(x,y))", "(all x.(Sound(x) -> -ReflectsOffDepth(x)))", "all x.((Sound(x) & Carpet(x)) -> -ReflectsOffSurface(x))", "all x y.((Sound(x) & CarpetSurface(y)) -> -ReflectsOffSurface(x,y))", "all x.(Sound(x) -> -ReflectsOffMarbleSurface(x))", "all x y.((Sound(x) & Carpet(y)) -> -ReflectsOffSurface(x,y))", "all x.((Sound(x) & CarpetSurface(x)) -> -ReflectsOffSurface(x))"]}
{"id": "entailmentbank_validation_924", "nl": "echo is when sound reflects off a smooth surface.", "fol": "", "prediction": ["all x.(Echo(x) -> ReflectsSoundOffSmoothSurface(x))", "all x y.((Echo(x) & Sound(y)) -> ReflectsOffSmoothSurface(x,y))", "all x.(Echo(x) -> ReflectsSoundOffSmoothSurface(x))", "(Echo(echo) -> ReflectsOffSmoothSurface(echo))", "all x.(Echo(x) -> (ReflectsSoundOffSmoothSurface(x)))", "all x y.((Echo(x) & Sound(y) & SmoothSurface(y)) -> ReflectsOff(x,y))", "all x y.(Echo(x) -> (SoundReflectsOffSmoothSurface(x,y)))", "all x y z.((Echo(x) & Sound(y) & SmoothSurface(z)) -> ReflectsOff(x,y,z))", "all x.(Echo(x) -> ReflectsOffSmoothSurface(x))", "all x y.(Echo(x) -> (ReflectsSoundOffSmoothSurface(x,y)))", "all x.(Echo(x) -> ReflectsOffSmoothSurface(x))", "all x y.(Echo(x) -> (SoundReflectsOffSmoothSurface(x,y)))", "all x.(Echo(x) -> ReflectsSoundOffSmoothSurface(x))", "all x.(Echo(x) -> (ReflectsSoundOffSmoothSurface(x)))", "all x.(Echo(x) -> SoundReflectsOffSmoothSurface(x))", "exists x.(Echo(x) & SoundReflectsOffSmoothSurface(x))"]}
{"id": "entailmentbank_validation_925", "nl": "echo will not be produced.", "fol": "", "prediction": ["all x.(Echo(x) -> -Produced(x))", "all x.(Echo(x) -> -Produced(x))", "(all x.(Echo(x) -> -Produced(x)))", "all x y.((Echo(x) & -Produced(y)) -> -Produced(x,y))", "no echo will be produced.", "all x.(Echo(x) -> -Produced(x))", "(-Produced(echo))", "-ProducedEcho(echo)", "(all x.(Echo(x) -> -Produced(x)))", "all x.(Echo(x) -> -Produced(x))", "-ProducedEcho(echo)", "all x.(Echo(x) -> -Produced(x))", "all x.(Echo(x) -> -Produced(x))", "-ProducedEcho(echo)", "all x.(Echo(x) -> -Produced(x))", "all x.(Echo(x) -> -Produced(x))"]}
{"id": "entailmentbank_validation_926", "nl": "helium is less in density than air.", "fol": "", "prediction": ["all x.(Helium(x) -> LessDensityThanAir(x))", "all x y.((Helium(x) & Air(y)) -> LessDensity(x,y))", "(LimitsDensity(helium) & LessDensity(helium))", "all x.(Helium(x) -> LessInDensityThanAir(x))", "all x y.((Helium(x) & Air(y)) -> LessInDensity(x,y))", "-(Helium(helium) & Air(air))", "(LimitsDensity(helium) & LessDensity(helium,air))", "all x.(Helium(x) -> LessDensityThanAir(x))", "(LittleDensity(helium) & LessDensity(helium))", "all x y.((Helium(x) & Air(y)) -> LessDensity(x,y))", "all x.(Hylium(x) -> LessInDensityThanAir(x))", "all x.(Helium(x) -> LessInDensity(x))", "all x y.((Helium(x) & Air(y)) -> LessInDensity(x,y))", "all x.(Helium(x) -> LessDensity(x))", "all x y.((Helium(x) & Air(y)) -> LessDensity(x,y))", "All x.(Helium(x) -> LessInDensityThanAir(x))"]}
{"id": "entailmentbank_validation_927", "nl": "a balloon is a kind of container.", "fol": "", "prediction": ["all x.(Balloon(x) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x y.((Balloon(x) & Container(y)) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x y.((Balloon(x) & Container(y)) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x y.((Balloon(x) & Container(y)) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x y.((Balloon(x) & Container(y)) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "exists x.(Balloon(x) & Container(x))", "exists x.(Balloon(x) & Container(x))", "exists x.(Balloon(x) & Container(x))", "exists x.(Balloon(x) & Container(x))"]}
{"id": "entailmentbank_validation_928", "nl": "a balloon filled with helium is an example of a container contains a substance with less density than air.", "fol": "", "prediction": ["all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLessDensityThanAir(x))", "all x y.((Balloon(x) & FilledWithHelium(x)) -> Container(y))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLessDensityThanAir(x))", "all x y z.((Balloon(x) & Helium(y) & Container(z) & FilledWith(x,y)) -> ContainsSubstanceWithLessDensityThanAir(z))", "all x y.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLessDensityThanAir(y))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLessDensityThanAir(x))", "all x y z.((Balloon(x) & HeliumFilled(x) & Container(y) & Substance(z) & LessDensityThanAir(z)) -> Contains(y,z))", "all x y.((Balloon(x) & FilledWithHelium(x) & Container(y) & ContainsSubstanceWithLessDensityThanAir(y)) -> Container(y))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLessDensityThanAir(x))", "exists x.(Balloon(x) & FilledWithHelium(x) & Container(x) & ContainsSubstanceWithLessDensityThanAir(x))", "all x y.((Balloon(x) & FilledWithHelium(x)) -> Container(y))", "all x y.((Balloon(x) & Helium(y) & FilledWith(x,y)) -> Container(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLessDensityThanAir(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLessDensityThanAir(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLowerDensityThanAir(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLowerDensityThanAir(x))"]}
{"id": "entailmentbank_validation_929", "nl": "if a container contains a substance with less density than air then that container may move upward.", "fol": "", "prediction": ["all x.((Container(x) & ContainsSubstanceWithLessDensityThanAir(x)) -> MayMoveUpward(x))", "all x y.((Container(x) & Substance(y) & LessDensityThanAir(y)) -> MayMoveUpward(x,y))", "all x y.((Container(x) & ContainsSubstance(x,y) & LessDensityThanAir(y)) -> MayMoveUpward(x))", "all x.((Container(x) & ContainsSubstanceWithLessDensityThanAir(x)) -> MayMoveUpward(x))", "all x y z.((Container(x) & Substance(y) & Air(z) & Contains(x,y) & LessDensity(y,z)) -> MayMoveUpward(x))", "all x y.((Container(x) & Substance(y) & LessDensityThanAir(y)) -> MayMoveUpward(x,y))", "exists x.(Container(x) & ContainsSubstanceWithLessDensityThanAir(x) & MayMoveUpward(x))", "all x y.((Container(x) & Substance(y) & Contains(x,y) & LessDensityThanAir(y)) -> MayMoveUpward(x))", "all x y.((Container(x) & ContainsSubstanceWithLessDensityThanAir(x,y)) -> MayMoveUpward(x))", "all x y.((Container(x) & Container(y) & ContainsSubstanceWithLessDensityThanAir(x,y)) -> MayMoveUpward(x))", "all x.((Container(x) & ContainsSubstanceWithLessDensityThanAir(x)) -> MayMoveUpward(x))", "all x y z.((Container(x) & Substance(y) & Air(z) & Contains(x,y) & LessDensity(x,z)) -> MayMoveUpward(x))", "all x.((Container(x) & ContainingSubstanceWithLessDensityThanAir(x)) -> MayMoveUpward(x))", "all x.((Container(x) & HasLessDensityThanAir(x)) -> MayMoveUpward(x))", "all x.((Container(x) & ContainsSubstanceWithLessDensity(x,air)) -> MayMoveUpward(x))", "all x.((Container(x) & ContainsSubstanceWithLowerDensityThanAir(x)) -> MayMoveUpward(x))"]}
{"id": "entailmentbank_validation_930", "nl": "the balloon filled with helium may move upward if released.", "fol": "", "prediction": ["all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))", "all x y.((Balloon(x) & Helium(y) & FilledWith(x,y)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))", "(all x.((Balloon(x) & FilledWithHelium(x)) -> MoveUpward(x))", "all x y.((Balloon(x) & FilledWithHelium(x) & Released(y)) -> MayMoveUpward(x,y))", "all x y.((Balloon(x) & Helium(y) & FilledWith(x,y)) -> MayMoveUpward(x))", "all x.((BalloonFilledWithHelium(x) & Released(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))", "exists x.(Balloon(x) & FilledWithHelium(x) & MayMoveUpward(x))", "all x y.((Balloon(x) & HeliumFilled(x,y)) -> MayMoveUpward(x,y))", "all x y.((Balloon(x) & FilledWithHelium(x,y)) -> MayMoveUpward(x,y))", "all x.((BalloonFilledWithHelium(x) & Released(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))"]}
{"id": "entailmentbank_validation_931", "nl": "a white object reflects all visible light.", "fol": "", "prediction": ["all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x y.(WhiteObject(x) -> ReflectsVisibleLight(x,y))", "all x y.((WhiteObject(x) & VisibleLight(y)) -> Reflects(x,y))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x y.(WhiteObject(x) -> ReflectsVisibleLight(x,y))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsAllVisibleLight(x))", "all x y.(WhiteObject(x) -> ReflectsVisibleLight(x,y))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x y.(WhiteObject(x) -> ReflectsVisibleLight(x,y))", "all x.(WhiteObject(x) -> ReflectsAllVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "exists x.(WhiteObject(x) & ReflectsVisibleLight(x))", "exists x.(WhiteObject(x) & ReflectsVisibleLight(x))"]}
{"id": "entailmentbank_validation_932", "nl": "the floor is a kind of object.", "fol": "", "prediction": ["all x.(Floor(x) -> Object(x))", "all x.(Floor(x) -> Object(x))", "all x y.((Floor(x) & Object(y)) -> Object(x))", "all x.(Floor(x) -> Object(x))", "all x y.((Floor(x) & Object(y)) -> Object(x))", "all x y.((Floor(x) & Floor(y)) -> Object(x))", "all x.(Floor(x) -> Object(x))", "all x y.((Floor(x) & Object(y)) -> Object(x,y))", "all x.(Floor(x) -> Object(x))", "all x y.((Floor(x) & Floor(y)) -> Object(x))", "all x.(Floor(x) -> Object(x))", "exists x.(Floor(x) & ArtOfObject(x))", "all x.(Floor(x) -> Object(x))", "exists x.(Floor(x) & ArtOfObject(x))", "all x.(Floor(x) -> Object(x))", "exists x.(Floor(x) & Object(x))"]}
{"id": "entailmentbank_validation_933", "nl": "a white door will reflect all visible light.", "fol": "", "prediction": ["all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x y.((WhiteDoor(x) & VisibleLight(y)) -> Reflects(x,y))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x y.((WhiteDoor(x) & VisibleLight(y) & Reflects(x,y)) -> Reflects(x,y))", "all x y.((WhiteDoor(x) & WhiteDoor(y)) -> ReflectsVisibleLight(x,y))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x y.((WhiteDoor(x) & VisibleLight(y) & Reflects(x,y)) -> Reflects(x,y))", "all x y.((WhiteDoor(x) & Light(y)) -> Reflects(x,y))", "all x.(WhiteDoor(x) -> ReflectsAllVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsAllVisibleLight(x))", "exists x.(WhiteDoor(x) & ReflectsVisibleLight(x))"]}
{"id": "entailmentbank_validation_934", "nl": "the ice melts.", "fol": "", "prediction": ["all x.(Ice(x) -> Melts(x))", "(MeltsIce(ice) -> MeltsIce(ice))", "all x y.((Ice(x) & Ice(y)) -> Melts(x,y))", "all x.(Ice(x) -> Melts(x))", "(MeltsIce(ice) -> MeltsIce(ice))", "all x.(Ice(x) -> Melts(x))", "all x y.((Ice(x) & Ice(y)) -> Melts(x,y))", "all x.(Ice(x) -> Melts(x))", "all x y.((Ice(x) & Ice(y)) -> Melts(x,y))", "exists x.(IceMelts(x))", "exists x.(IceMelts(x) & Ice(x))", "all x.(Ice(x) -> Melts(x))", "all x y.((Ice(x) & Ice(y)) -> Melts(x,y))", "exists x.(Ice(x) & Melts(x))", "all x y.((Ice(x) & Ice(y)) -> Melts(x,y))", "exists x.(IceMelts(x))"]}
{"id": "entailmentbank_validation_935", "nl": "melting is a kind of phase change.", "fol": "", "prediction": ["all x.(Melting(x) -> PhaseChange(x))", "all x y.((Melting(x) & PhaseChange(y)) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "(PhaseChange(Melting,PhaseChang))", "all x.(Melting(x) -> PhaseChange(x))", "all x y.((Melting(x) & PhaseChange(y)) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "All x y.((Melting(x) & PhaseChange(y)) -> PhaseChange(x,y))", "all x.(Melting(x) -> PhaseChange(x))", "All x y.((Melting(x) & PhaseChange(y)) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))"]}
{"id": "entailmentbank_validation_936", "nl": "the ice undergoes a phase change.", "fol": "", "prediction": ["all x.(Ice(x) -> UndergoesPhaseChange(x))", "all x y.((Ice(x) & PhaseChange(y)) -> Undergoes(x,y))", "all x.(Ice(x) -> UndergoesPhaseChange(x))", "all x y z.((Ice(x) & PhaseChange(y) & PhaseChange(z)) -> Undergoes(x,y,z))", "all x y.((Ice(x) & PhaseChange(y)) -> Undergoes(x,y))", "all x.(Ice(x) -> UndergoesPhaseChange(x))", "all x.((Ice(x) & UndergoesPhaseChange(x)) -> PhaseChange(x))", "all x y.((Ice(x) & PhaseChange(y)) -> Undergoes(x,y))", "all x.(Ice(x) -> UndergoesPhaseChange(x))", "exists an ice-phaseChange(ice)", "all x y.((Ice(x) & PhaseChange(y)) -> Undergoes(x,y))", "all x.(Ice(x) -> PhaseChange(x))", "all x.(Ice(x) -> UndergoesPhaseChange(x))", "all x y.((Ice(x) & PhaseChange(y)) -> Undergoes(x,y))", "exists x.(Ice(x) & PhaseChange(x))", "all x.(Ice(x) -> UndergoesPhaseChange(x))"]}
{"id": "entailmentbank_validation_937", "nl": "phase changes do not change mass.", "fol": "", "prediction": ["all x.(PhaseChange(x) -> -ChangeMass(x))", "all x y.((PhaseChange(x) & Phase(y)) -> -ChangeMass(x,y))", "(all x.(PhaseChange(x) -> -ChangeMass(x)))", "all x.(PhaseChange(x) -> -ChangeMass(x))", "(-ChangeMass(phaseChange))", "-(ChangeMass(phase) & ChangeMass(phase))", "all x.(Change(x) -> -ChangeMass(x))", "all x y.((PhaseChange(x) & Phase(y)) -> -ChangeMass(x,y))", "all x.(PhaseChange(x) -> -ChangeMass(x))", "all x y.((PhaseChange(x) & Phase(y) & ChangeMass(x,y)) -> -ChangeMass(x,y))", "(all x.(PhaseChange(x) -> -ChangeMass(x)))", "phaseChangesDoesNotChangeMass(phase)", "all x.(PhaseChange(x) -> -ChangeMass(x))", "all x.(PhaseChange(x) -> -ChangeMass(x))", "all x.(PhaseChange(x) -> -ChangeMass(x))", "all x.(PhaseChange(x) -> -ChangeMass(x))"]}
{"id": "entailmentbank_validation_938", "nl": "the mass of the ice will not change.", "fol": "", "prediction": ["all x.(Ice(x) -> -ChangeMass(x))", "all x.(IceMass(x) -> -Change(x))", "all x y.((Ice(x) & Mass(y)) -> -Change(x,y))", "the mass of the ice will notchange.", "-ChangeMassOfIce(x)", "all x y.((Ice(x) & Mass(y) & -Change(x,y)) -> -Change(x,y))", "all x.(IceMass(x) -> -ChangesMass(x))", "all x.(Ice(x) -> -ChangeMass(x))", "the mass of the ice will notchange.", "-ChangeMassOfIce(x)", "all x.((Ice(x) & MassChange(x)) -> -ChangeMass(x))", "(MassOfIce(ice) & -ChangeMass(ice))", "(MathOfIce(ice) & -ChangeMass(ice))", "all x y.((Ice(x) & Mass(y) & -Change(y)) -> -Change(x,y))", "-ChangesMassOfIce(iClear(i))", "all x.(IceMass(x) -> -ChangesMass(x))"]}
{"id": "entailmentbank_validation_939", "nl": "a bubble is made of pockets of gas trapped inside a liquid or solid.", "fol": "", "prediction": ["all x.(Bubble(x) -> (PotsOfGas(x) & EmbeddedInLiquidOrSolid(x)))", "all x.(Blowout(x) -> (PotsOfGas(x) & EmbeddedInLiquidOrSolid(x)))", "all x y.((Blowhole(x) & Pocket(y)) -> (MadeOf(x,y) & (PouchOfGas(x) & -PouchOf(y,x) | PouchOf(y,x))))", "all x y.((Bubble(x) & Pocket(y)) -> (MadeOf(x,y) & (PouchOfGas(x) & -PouchOf(y,x) | PouchOf(y,x))))", "all x.(Bubble(x) -> (PotsOfGas(x) & CapturedInLiquidOrSolid(x)))", "all x y z.((Blowhole(x) & Pocket(y) & (Liquid(z) | Solid(z)))) -> MadeOf(x,y,z))", "all x y.(Blowout(x) -> (PotsOfGas(y) & EmbeddedInLiquidOrSolid(x,y)))", "exists x.(Balloon(x) & PocketsOfGas(x) & CapturedInLiquidOrSolid(x))", "all x y z.((Bubble(x) & Pocket(y) & (Liquid(z) | Solid(z))) & PouchOfGas(x,y,z)) -> MadeOf(x,y))", "all x.(Blowup(x) -> (PotsOfGas(x) & CapturedInLiquidOrSolid(x)))", "all x.(Blowout(x) -> (PotsOfGas(x) & EmbeddedInLiquidOrSolid(x)))", "all x y.((Balloon(x) & Pocket(y)) -> (MadeOf(x,y) & (Pouch(y,x) | Pocket(y,x))))", "exists x.(Bubble(x) & PocketsOfGas(x) & CapturedInLiquidOrSolid(x))", "all x y.(Blowout(x) -> (PotsOfGas(y) & EmbeddedInLiquidOrSolid(x,y)))", "all x.(Bubble(x) -> (PotsOfGas(x) & EmbeddedInLiquidOrSolid(x)))", "exists x.(Blood(x) & PocketsOfGas(x) & TrappedInLiquidOrSolid(x))"]}
{"id": "entailmentbank_validation_940", "nl": "soap bubbles are made of air trapped inside soap liquid.", "fol": "", "prediction": ["all x.(SoapBall(x) -> (MadeOfAir(x) & CapturedInSoapLiquid(x)))", "all x.(SoapBall(x) -> (MadeOfAir(x) & CapturedInSoapLiquid(x)))", "all x y.((SoapBall(x) & SoapLiquid(y)) -> MadeOfAir(x,y))", "all x.(SoapBolt(x) -> (MadeOfAir(x) & CapturedInSoapLiquid(x)))", "(all x.(SoapBall(x) -> MadeOfAir(x)))", "all x y.((SoapBall(x) & SoapLiquid(y)) -> MadeOfAir(x,y))", "all x.(SoapBall(x) -> (MadeOfAir(x) & TrappedInSoapLiquid(x)))", "all x y z.((SoapBall(x) & Air(y) & SoapLiquid(z)) -> MadeOf(x,y,z))", "all x y.((SoapBall(x) & Air(y)) -> MadeOf(x,y))", "all x.(SoapBall(x) -> (MadeOfAir(x) & TrappedInSoapLiquid(x)))", "all x.(SoapBubble(x) -> MadeOfAirCaughtInSoapLiquid(x))", "all x.(SoapBlood(x) -> (MadeOfAir(x) & TrappedInSoapLiquid(x)))", "all x y.((SoapBall(x) & SoapLiquid(y)) -> MadeOfAirCaughtInside(x,y))", "exists x.(SoapBubble(x) & MadeOfAir(x) & TrappedInSoapLiquid(x))", "all x.(SoapBubble(x) -> MadeOfAirCaughtInSoapLiquid(x))", "all x.(SoapBall(x) -> (MadeOfAir(x) & CapturedInSoapLiquid(x)))"]}
{"id": "entailmentbank_validation_941", "nl": "air is inside the soap bubbles.", "fol": "", "prediction": ["all x.(SoapBalloon(x) -> Inside(x))", "all x y.((SoapBalloon(x) & SoapBalloon(y)) -> Inside(x,y))", "all x y.((SoapBalloon(x) & SoapBalloon(y)) -> Inside(x,y))", "all x.(SoapBalloon(x) -> Inside(x,y))", "all x y.((SoapBubble(x) & Air(y)) -> Inside(x,y))", "all x.(AirInsideSoapBalloons(x) -> InsideSoapBalloons(x))", "all x.(SoapBubbles(x) -> InsideAir(x))", "all x y z.((SoapBubble(x) & Air(y) & SoapBubble(z)) -> Inside(y,z))", "(InsideSoapBalloons(air) & InsideSoapBalloons(air))", "all x.(SoapBalloon(x) -> Inside(x))", "all x y.((SoapBubbles(x) & Air(y)) -> Inside(y,x))", "exists x.(SoapBalloon(x) & Inside(x,SoapBalloons))", "exists x.(SoapBubble(x) & Inside(x,SoapBalls))", "all x y.((SoapBalloon(x) & Air(y)) -> Inside(x,y))", "all x y.((SoapBubbles(x) & AirInside(y,x)) -> Inside(y,x))", "exists x.(SoapBalloon(x) & InsideSoapBalloon(x))"]}
{"id": "entailmentbank_validation_942", "nl": "matter in the liquid phase has definite volume and variable shape.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & VariableShape(x)))", "all x.(LiquidPhase(x) -> (DefiniteVolume(x) & VariableShape(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & VariableShape(x,y)))", "all x.((Matter(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & VariableShape(x)))", "all x.((MatterInLiquidPhase(x) & DefiniteVolume(x) & VariableShape(x)) -> Has(x,y))", "all x.(LiquidPhase(x) -> (DefiniteVolume(x) & VariableShape(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & VariableShape(x,y)))", "(all x.(LiquidPhase(x) -> DefiniteVolume(x)) & VariableShape(x))", "(all x.(LiquidPhase(x) -> DefiniteVolume(x)) & all y.(LiquidPhase(y) -> VariableShape(y)))", "all x.((Matter(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & VariableShape(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & VariableShape(x,y)))", "all x.(LiquidPhase(x) -> (DefiniteVolume(x) & VariableShape(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefinedVolume(x,y) & VariableShape(x,y)))", "all x.(LiquidPhase(x) -> (DefinedVolume(x) & VariableShape(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & VariableShape(x,y)))", "all x.(LiquidPhase(x) -> (DefiniteVolume(x) & VariableShape(x)))"]}
{"id": "entailmentbank_validation_943", "nl": "indefinite means variable.", "fol": "", "prediction": ["all x.(IndefiniteMeanVariable(x) -> Indefinite(x))", "all x y.((IndefiniteMeanVariable(x) & IndefiniteMeanVariable(y)) -> Variable(x,y))", "all x.(IndefiniteMeanVariable(x) -> Variable(x))", "indefiniteMeanVariable(x)", "all x.(IndefiniteMeansVariable(x) -> IndefiniteVariable(x))", "all x y.((IndefiniteMeanVariable(x) & IndefiniteMeanVariable(y)) -> Variable(x,y))", "all x.((IndefiniteMeanVariable(x)) -> Indefinite(x))", "exists x.(MeanVariable(x) & Indefinite(x))", "exists indefiniteMeanVariable(x)", "all x.(IndefiniteMediumVariable(x) -> IndefiniteVariable(x))", "all x y.((IndefiniteMeanVariable(x) & IndefiniteMeanVariable(y)) -> Variable(x,y))", "all x.(IndefiniteMeanVariable(x) -> Variable(x))", "all x.(IndefiniteMeansVariable(x) -> IndefiniteVariable(x))", "all x y.((IndefiniteMeansVariable(x) & Variable(y)) -> Indefinite(x))", "exists x.(MeanVariable(x) & Indefinite(x))", "all x y.((IndefiniteVerbative(x) & MeansVariable(y)) -> IndefiniteVariable(x,y))"]}
{"id": "entailmentbank_validation_944", "nl": "matter in the liquid phase has definite volume and indefinite shape.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.(LiquidPhase(x) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & IndefiniteShape(x,y)))", "all x.((Matter(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((MatterInLiquidPhase(x) & DefiniteVolume(x) & IndefiniteShape(x)) -> DefiniteVolume(x))", "all x.(LiquidPhase(x) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "(all x.(LiquidPhase(x) -> DefiniteVolume(x)) & all y.(LiquidPhase(y) -> DefiniteShape(y)))", "(all x.(LiquidPhase(x) -> (DefiniteVolume(x) & IndefiniteShape(x))))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & IndefiniteShape(x,y)))", "all x.((Matter(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.(LiquidPhase(x) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & IndefiniteShape(x,y)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefinedVolume(x,y) & IndefiniteShape(x,y)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefiniteVolume(y) & IndefiniteShape(y)))", "all x.((Matter(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.(LiquidPhase(x) -> (DefiniteVolume(x) & IndefiniteShape(x)))"]}
{"id": "entailmentbank_validation_945", "nl": "substances are made of matter.", "fol": "", "prediction": ["all x.(Substance(x) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x y.((Substance(x) & Material(y)) -> MadeOf(x,y))", "all x y.((Substance(x) & Material(y) & MadeOf(x,y)) -> MadeOf(x,y))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x y.(Substance(x) & Material(y)) -> MadeOf(x,y))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x y.(Substance(x) -> MadeOfMatter(x,y))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "exists x.(Substance(x) & MadeOf(x,Matter))", "all x.(Substance(x) -> MadeOfMatter(x))", "exists x.(Substance(x) & MadeOf(x,Matter))", "exists x.(Substance(x) & Material(x))", "all x.(Substance(x) -> MadeOfMatter(x))"]}
{"id": "entailmentbank_validation_946", "nl": "a compound is a kind of substance.", "fol": "", "prediction": ["all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> Substance(x))", "all x y.(Compound(x) -> (Substance(y) & Contains(x,y)))", "all x y.(Compound(x) -> Substance(y))", "all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> Substance(x))", "all x y.(Compound(x) -> (Substance(y) & Contains(x,y)))", "all x y.(Compound(x) -> Substance(y))", "all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> Substance(x))", "exists x.(Compound(x) & SortOfSubstance(x))", "all x.(Compound(x) -> Material(x))", "exists x.(Compound(x) & TypeOfSubstance(x))", "exists x.(Compound(x) & Substance(x))"]}
{"id": "entailmentbank_validation_947", "nl": "a compound is made of matter.", "fol": "", "prediction": ["all x.(Compound(x) -> MadeOfMatter(x))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x y.((Compound(x) & Matter(y)) -> MadeOf(x,y))", "all x y.(Compound(x) -> MadeOfMatter(x,y))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x y.(Compound(x) -> MadeOfMatter(x,y))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x y.(Compound(x) -> MadeOfMatter(x,y))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x y.(Compound(x) & Matter(y))", "all x.(Compound(x) -> MadeOfMatter(x))", "exists x.(Compound(x) & MadeOfMatter(x))", "exists x.(Compound(x) & MakesOfMatter(x))", "exists x.(Compound(x) & MadeOfMatter(x))", "exists x.(Compound(x) & MadeOf(x,Matter))", "exists x.(Compound(x) & MadeOfMatter(x))"]}
{"id": "entailmentbank_validation_948", "nl": "a compound in the liquid phase has definite volume and indefinite shape.", "fol": "", "prediction": ["all x.((Compound(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x y.((Compound(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & IndefiniteShape(x,y)))", "all x.(Compound(x) -> (LiquidPhase(x) & DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x y z.((Compound(x) & LiquidPhase(y) & Volume(z) & Shape(z)) -> (Definite(x,z) & Indefinite(x,z)))", "all x y.((Compound(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & IndefiniteShape(x,y)))", "exists x.(Compound(x) & LiquidPhase(x) & DefiniteVolume(x) & IndefiniteShape(x))", "exists x.(CompoundInLiquidPhase(x) & DefiniteVolume(x) & IndefiniteShape(x))", "all x.(Compound(x) -> (LiquidPhase(x) & DefiniteVolume(x) & DefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (DefinedVolume(x) & IndefiniteShape(x)))", "all x y.((Compound(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & IndefiniteShape(x,y)))", "all x.(Compound(x) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x y.((Compound(x) & LiquidPhase(y)) -> (DefinedVolume(x,y) & IndefiniteShape(x,y)))", "all x y.((Compound(x) & LiquidPhase(y)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))"]}
{"id": "entailmentbank_validation_949", "nl": "water is in the solid state, called ice.", "fol": "", "prediction": ["all x.(Water(x) -> SolidState(x))", "(SolidState(water) & Ice(water))", "all x.(Water(x) -> SolidState(x))", "(SolidState(water) & Ice(water))", "all x y.((Water(x) & SolidState(y)) -> Ice(x))", "all x.((Water(x) & SolidState(x,ice)) -> Water(x))", "all x.(Water(x) -> SolidState(x))", "(SolidState(water) | Ice(water))", "all x.(Water(x) -> SolidState(x))", "all x y.((Water(x) & SolidState(y)) -> Ice(x))", "all x.(Water(x) -> (SolidState(x) & Ice(x)))", "all x.(Water(x) -> SolidState(x))", "all x.(Water(x) -> SolidState(x,Ice))", "all x.(Water(x) -> SolidState(x))", "exists x.(Water(x) & Solid(x) & Ice(x))", "all x.(Water(x) -> Solid(x))"]}
{"id": "entailmentbank_validation_950", "nl": "hail is a kind of ice.", "fol": "", "prediction": ["all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Ice(x))", "all x y.((Hail(x) & Ice(y)) -> Is(x,y))", "hail is a kind of ice.", "(Ice(hail))", "hail is ice.", "all x.(Hail(x) -> Ice(x))", "(Ice(Hail))", "all x y.((Hail(x) & Ice(y)) -> Ice(x))", "all x.(Hail(x) -> Ice(x))", "hail is ice.", "all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Ice(x))"]}
{"id": "entailmentbank_validation_951", "nl": "hail is water in solid ice.", "fol": "", "prediction": ["all x.(Hail(x) -> WaterInSolidIce(x))", "hail(h) -> WaterInSolidIce(h))", "(all x.(Hail(x) -> Water(x)))", "all x.(Hail(x) -> WaterInSolidIce(x))", "all x y.((Hail(x) & SolidIce(y)) -> WaterIn(x,y))", "all x.(Hail(x) -> (WaterInSolidIce(x)))", "(WaterInSolidIce(h hail))", "all x.(Hail(x) -> WaterInSolidIce(x))", "all x y.((Hail(x) & SolidIce(y)) -> WaterIn(x,y))", "(WaterInSolidIce(hellow))", "all x.(Hail(x) -> WaterInSolidIce(x))", "all x y.((Hail(x) & SolidIce(y)) -> Water(x,y))", "exists x.(Hall(x) & Water(x) & SolidIce(x))", "all x.(Hail(x) -> WaterInStandingIce(x))", "all x.(Hail(x) -> (Water(x) & SolidIce(x)))", "all x.(Hail(x) -> WaterInSolidIce(x))"]}
{"id": "entailmentbank_validation_952", "nl": "an airplane is used for moving people to far away places.", "fol": "", "prediction": ["all x.(Airplane(x) -> MovesPeopleToFarAwayPlaces(x))", "all x y.((Airplane(x) & Person(y)) -> MovesToFarAwayPlaces(x,y))", "all x y.((Airplane(x) & Person(y)) -> UsedForMovingToFarAwayPlaces(x,y))", "all x.(Airplane(x) -> MovesToFarAwayPlaces(x))", "all x y z.((Airplane(x) & Person(y) & Place(z)) -> MovesTo(x,y,z))", "all x.(Airplane(x) -> UsedForMovingPeopleToFarAwayPlaces(x))", "all x y z.((Airplane(x) & Person(y) & Place(z) & MovesTo(x,y,z)) -> UsedForMoving(x,y,z))", "all x y.((Airplane(x) & Person(y)) -> MovesToFarAwayPlaces(x,y))", "all x.(Airplane(x) -> MovesPeopleToFarAwayPlaces(x))", "all x.(Airplane(x) -> UsedForMovingToFarAwayPlaces(x))", "all x y.((Airplane(x) & Person(y)) -> UsedForMovingToFarAwayPlaces(x,y))", "all x y.((Airplane(x) & Person(y) & FarAwayPlace(y)) -> UsedForMovingTo(x,y))", "exists x.(Airplane(x) & UsedForMovingPeopleToFarAwayPlaces(x))", "all x.(Airplane(x) -> MovesToFarAwayPlaces(x))", "exists x.(Airplane(x) & MovesPeopleToFarAwayPlaces(x))", "exists x.(Airplane(x) & UsedForMovingPeopleToFarAwayPlaces(x))"]}
{"id": "entailmentbank_validation_953", "nl": "an airplane is fast in speed.", "fol": "", "prediction": ["all x.(Airplane(x) -> FastSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))", "all x y.((Airplane(x) & Speed(y)) -> Fast(x,y))", "all x.(Airplane(x) -> FastSpeed(x))", "all x y.((Airplane(x) & Speed(y)) -> Fast(x,y))", "all x.(Airplane(x) -> FastSpeed(x))", "all x y.((Airplane(x) & Speed(y)) -> Fast(x))", "all x.(Airplane(x) -> FastSpeed(x))", "all x y.((Airplane(x) & Speed(y)) -> Fast(x,y))", "all x.(Airplane(x) -> FastSpeed(x))", "all x.(Airplane(x) -> FastInSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))", "exists x.(Airplane(x) & FastInSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))", "exists x.(Airplane(x) & FastSpeed(x))", "exists x.(Airplane(x) & Fast(x))"]}
{"id": "entailmentbank_validation_954", "nl": "an airplane can move people to far away places quickly.", "fol": "", "prediction": ["all x y.((Airplane(x) & Person(y)) -> MovesToFarAwayPlacesQuickly(x,y))", "all x.(Airplane(x) -> MovesPeopleToFarAwayPlacesQuickly(x))", "all x.(Airplane(x) -> MovesToFarAwayPlacesQuickly(x))", "all x y z.((Airplane(x) & Person(y) & Place(z)) -> MovesToFarAway(x,y,z))", "all x y.((Airplane(x) & Person(y)) -> MovesToFarAwayPlacesQuickly(x,y))", "all x.(Airplane(x) -> CanMoveToFarAwayPlacesQuickly(x))", "all x y z.((Airplane(x) & Person(y) & Place(z) & MovesTo(x,y,z)) -> MovesTo(x,y,z))", "all x y.((Airplane(x) & Person(y)) -> MovesToFarAwayPlacesQuickly(x,y))", "all x y.((Airplane(x) & Person(y) & FarAwayPlace(y)) -> MovesQuickly(x,y))", "all x y z.((Airplane(x) & Person(y) & FarAwayPlace(z)) -> MovesToQuickly(x,y,z))", "all x.(Airplane(x) -> MovesPeopleToFarAwayPlacesQuickly(x))", "all x.(Airplane(x) -> CanMoveToFarAwayPlacesQuickly(x))", "all x y.((Airplane(x) & Person(y)) -> CanMoveToFarAwayPlacesQuickly(x,y))", "exists x.(Airplane(x) & MovesPeopleToFarAwayPlaces(x) & Quickly(x))", "all x.(Airplane(x) -> MovesToFarAwayPlacesQuickly(x))", "exists x.(Airplane(x) & CanMovePeopleToFarAwayPlacesQuickly(x))"]}
{"id": "entailmentbank_validation_955", "nl": "a cake is a kind of baked product.", "fol": "", "prediction": ["all x.(Cake(x) -> BakedProduct(x))", "all x y.((Cake(x) & BakedProduct(y)) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x y.((Cake(x) & BakedProduct(y)) -> Baked(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x y.((Cake(x) & BakedProduct(y)) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x y.((Cake(x) & Product(y) & Baked(x)) -> Baked(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x y.((Cake(x) & BakedProduct(y)) -> Baked(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))", "exists x.(Cake(x) & BakedProduct(x))", "exists x.(Cake(x) & BakedProduct(x))", "exists x.(Cake(x) & BakedProduct(x))", "exists x.(Cake(x) & BakingProduct(x))"]}
{"id": "entailmentbank_validation_956", "nl": "baking is when a human makes food by adding heat.", "fol": "", "prediction": ["all x.(Baking(x) -> (Human(x) & MakesFoodByAdditingHeat(x)))", "all x y.((Human(x) & Food(y) & AddsHeat(x,y)) -> Bakes(x))", "all x.((Human(x) & MakesFoodByAdditingHeat(x)) -> Bakes(x))", "all x.(Baking(x) -> (HumanMakesFood(x) & AddsHeat(x)))", "all x y.((Human(x) & Food(y)) -> MakesByAdditingHeat(x,y))", "all x y z.((Human(x) & Food(y) & Heat(z)) -> MakesByAdditive(x,y,z))", "all x y.((Human(x) & Food(y) & AddsHeat(x,y)) -> Bakes(x,y))", "(all x.(Baking(x) -> Human(x)))", "all x.((Human(x) & MakesFoodByAdditingHeat(x)) -> Bakes(x))", "all x y z.((Human(x) & Food(y) & Heat(z)) -> MakesBy(x,y,z))", "exists x.(Human(x) & MakesFoodByAdditingHeat(x))", "all x y.((Human(x) & Heat(y)) -> MakesFoodByAdditive(x,y))", "all x.(Baking(x) -> (Human(x) & MakesFoodByAdditingHeat(x)))", "all x.(Baking(x) -> (HumanMakingFood(x) & AddsHeat(x)))", "all x.((Human(x) & MakesFoodByAdditingHeat(x)) -> Baking(x))", "all x y.((Human(x) & Food(y) & AddsHeat(x,y)) -> Bakes(x,y))"]}
{"id": "entailmentbank_validation_957", "nl": "a cake is a product made by human adding heat to it.", "fol": "", "prediction": ["all x.(Cake(x) -> (HumanAddition(x) & MadeBy(x)))", "all x y.((Cake(x) & Human(y)) -> AddsHeatTo(x,y))", "all x.(Cake(x) -> (HumanAddition(x) & MadeBy(x) & AddsHeat(x)))", "all x.(Cake(x) -> (HumanAddition(x) & Makes(x,Cake)))", "all x y.((Cake(x) & Human(y)) -> AddsHeatTo(x,y))", "all x y z.((Cake(x) & Human(y) & Heat(z)) -> MadeByAddition(x,y,z))", "all x y.((Cake(x) & Human(y) & AddsHeat(x,y)) -> MadeBy(x,y))", "all x.(Cake(x) -> MadeByHumanAddition(x))", "all x.(Cake(x) -> (HumanAddition(x) & Makes(x,y) & AddsHeat(x,z)))", "all x.(Cake(x) -> (MadeByHuman(x) & AddsHeat(x)))", "all x.(Cake(x) -> (MadeByHuman(x) & AddsHeat(x)))", "all x y.((Cake(x) & Human(y)) -> AddsHeat(x,y))", "all x y.((Cake(x) & Human(y) & AddsHeat(x,y)) -> MadeBy(x,y))", "exists x.(Cake(x) & Human(x) & AddsHeat(x))", "exists x.(Cake(x) & HumanAddsHeatTo(x))", "exists x.(Cake(x) & HumanAddsHeat(x))"]}
{"id": "entailmentbank_validation_958", "nl": "transportation technology is a kind of system for moving people and products.", "fol": "", "prediction": ["all x.(TransportationTechnology(x) -> (MovingPeople(x) & MovingProducts(x)))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> Moves(x,y))", "all x y z.((TransportationTechnology(x) & Person(y) & Product(z)) -> (MovingSystem(x,y,z) & MovingSystem(x,y,z)))", "all x.(TransportationTechnology(x) -> (MovingPeople(x) & MovingProducts(x)))", "(TransportationTechnology(transportation) -> (MovingPeople(transportation) & MovingProducts(transportation)))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> MovingSystem(x,y))", "all x y z.((TransportationTechnology(x) & Person(y) & Product(z)) -> (MovementSystem(x,y,z) & Moves(x,y,z)))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> Moves(x,y))", "all x.(TransportationTechnology(x) -> (MovingPeople(x) & MovingProducts(x)))", "all x.(TransportationTechnology(x) -> (MovementSystem(x) & MovesPeopleAndProducts(x)))", "all x y.((TransportationTechnology(x) & People(y) & Products(y)) -> SystemForMoving(x,y))", "all x.(TransportationTechnique(x) -> (MovingPeopleAndProducts(x) & MovingProducts(x)))", "all x.(TransportationTechnology(x) -> (MovingPeople(x) & MovingProducts(x)))", "all x.(TransportationTechnology(x) -> (SystemForMovingPeople(x) & SystemForMovingProducts(x)))", "all x.(TransportationTechnology(x) -> (MovingPeopleAndProducts(x) & MovingProducts(x)))"]}
{"id": "entailmentbank_validation_959", "nl": "transportation technology is used for moving people / products.", "fol": "", "prediction": ["all x.(TransportationTechnology(x) -> (MovingPeople(x) | MovingProducts(x)))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> UsedForMoving(x,y))", "(MovingPeople(TransportationTechnology) | MovingProducts(TransportationTechnology))", "all x y z.((TransportationTechnology(x) & Person(y) & Product(z)) -> UsedForMoving(x,y,z))", "all x.(TransportationTechnology(x) -> UsedForMovingPeopleOrProducts(x))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> UsedForMoving(x,y))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) | MovesProducts(x)))", "(MovementTechnology(Transportation) -> UsedForMovingPeople(Transportation))", "all x y.((TransportationTechnology(x) & Person(y)) -> UsedForMoving(x,y))", "all x y z.((TransportationTechnology(x) & Person(y) & Product(z)) -> UsedForMoving(x,y,z))", "all x.(TransportationTechnology(x) -> UsedForMovingPeopleOrProducts(x))", "all x.(TransportationTechnology(x) -> (MovingPeople(x) | MovingProducts(x)))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> UsedForMoving(x,y))", "exists x.(TransportationTechnology(x) & UsedForMovingPeople(x) & UsedForMovingProducts(x))", "all x.(TransportationTechnology(x) -> MovesPeopleOrProducts(x))", "all x.(TransportationTechnology(x) -> UsedForMovingPeopleAndProducts(x))"]}
{"id": "entailmentbank_validation_960", "nl": "transportation technology is a system that moves people and products.", "fol": "", "prediction": ["all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> Moves(x,y))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x y z.((TransportationTechnology(x) & Person(y) & Product(z)) -> Moves(x,y,z))", "(TransportationTechnology(transportation) -> MovesPeopleAndProducts(transportation))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> Moves(x,y))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> Moves(x,y))", "all x y z.((TransportationTechnology(x) & Person(y) & Product(z)) -> Moves(x,y,z))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x.(TransportationTechnology(x) -> MovesPeopleAndProducts(x))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> Moves(x,y))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x.(TransportationTechnology(x) -> (MovesPeopleAndProducts(x) & MovesProducts(x)))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))"]}
{"id": "entailmentbank_validation_961", "nl": "a refrigerator is used for keeping food fresh for a long period of time.", "fol": "", "prediction": ["all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x y.((Refrigerator(x) & Food(y)) -> UsedForKeepingFreshForLongPeriod(x,y))", "all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x y z.((Refrigerator(x) & Food(y) & PeriodOfTime(z)) -> UsedForKeepingFresh(x,y,z))", "all x y.((Refrigerator(x) & Food(y)) -> UsedForKeepingFreshForLongPeriod(x,y))", "all x.(Refrigerator(x) -> UsedForKeepingFoodFreshForLongPeriod(x))", "all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x y z.((Refrigerator(x) & Food(y) & PeriodOfTime(z)) -> UsedForKeepingFreshFor(x,y,z))", "all x y.((Refrigerator(x) & Food(y)) -> KeepsFreshForLongPeriod(x,y))", "all x y.((Refrigerator(x) & Food(y)) -> UsedForKeepingFresh(x,y))", "all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x y.((Refrigerator(x) & Food(y)) -> (KeepsFresh(x,y) & LongPeriodOfTime(x)))", "exists x.(Refrigerator(x) & KeepsFoodFresh(x) & LongPeriodOfTime(x))", "all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriod(x)))", "all x.(Refrigerator(x) -> UsedForKeepingFoodFreshForLongPeriod(x))", "exists x.(Refrigerator(x) & UsedForKeepingFoodFresh(x))"]}
{"id": "entailmentbank_validation_962", "nl": "the invention of the refrigerator with self-contained unit occurred in 1923.", "fol": "", "prediction": ["all x.((Refrigerator(x) & SelfContainedUnit(x)) -> Invention(x))", "all x y.((Refrigerator(x) & SelfContainedUnit(y)) -> Invention(x,y))", "the invention of the refrigerator with self-contained unit occurred in 1923.", "(InventationOfRefrigeratorWithSelfContainedUnit(x) & OccursIn1923(x))", "invents(refrigerator,selfcontainedUnit) -> OccursIn1923(refrigerator,selfcontainedUnit))", "invention(refrigerator,selfcontainedUnit) -OccursIn1923(refrigerator,selfcontainedUnit))", "(InventionOfRefrigeratorWithSelfContainedUnit(refrigerator,1923))", "the invention of the refrigerator with selfcontainedUnit(refrigerator,1923)", "-(InventoryOfRefrigeratorWithSelfContainedUnit(x) & OccursIn1923(x))", "all x.((Refrigerator(x) & SelfContainedUnit(x)) -> OccursIn1923(x))", "the invention of the refrigerator with self-containedUnit(refrigerator,1923)", "-InventionOfRefrigeratorWithSelfContainedUnit(x) -OccursIn1923(x))", "all x y.((Refrigerator(x) & SelfContainedUnit(y)) -> Invention(x,y))", "(InventoryOfRefrigeratorWithSelfContainedUnit(refrigerator,1923))", "all x.((Refrigerator(x) & SelfContainedUnit(x)) -> Invention(x,1923))", "all x y.((Refrigerator(x) & SelfContainedUnit(y)) -> Invention(x,y))"]}
{"id": "entailmentbank_validation_963", "nl": "refrigerator is the invention that can keep food fresh for a long period of time.", "fol": "", "prediction": ["all x.(Refrigerator(x) -> (Invention(x) & KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x y.((Refrigerator(x) & Food(y)) -> (KeepsFresh(x,y) & LongPeriodOfTime(x)))", "(Invention(refrigerator) & KeepsFoodFreshForLongPeriod(refrigerator,refrigerator))", "all x.(Refrigerator(x) -> (Invention(x) & KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x y.((Refrigerator(x) & Food(y)) -> (Invention(x) & KeepsFreshForLongPeriod(x,y)))", "all x y z.((Refrigerator(x) & Food(y) & PeriodOfTime(z)) -> CanKeepFreshForLongPeriod(x,y,z))", "all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> (Invention(x) & KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x y.((Refrigerator(x) & Food(y)) -> (KeepsFreshForLongPeriod(x,y)))", "all x.(Refrigerator(x) -> (Invention(x) & CanKeepFoodFresh(x) & LongPeriodOfTime(x)))", "all x y.((Refrigerator(x) & Food(y)) -> CanKeepFreshForLongPeriod(x,y))", "all x.(Refrigerator(x) -> (Invention(x) & KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> (Invention(x) & KeepsFoodFreshForLongPeriod(x)))", "exists x.(Refrigerator(x) & KeepsFoodFresh(x) & LongPeriodOfTime(x))", "all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x y.((Refrigerator(x) & Food(y)) -> KeepsFreshForLongPeriod(x,y))"]}
{"id": "entailmentbank_validation_964", "nl": "radio station broadcasting is a source of radio waves.", "fol": "", "prediction": ["all x.(RadioStation(x) -> RadioWavesSource(x))", "all x y.((RadioStation(x) & RadioStation(y)) -> BroadcastingSourceOfWaves(x,y))", "all x.(RadioStation(x) -> RadioWavesSource(x))", "all x y.((RadioStation(x) & Broadcasting(y)) -> SourceOfRadioWaves(x,y))", "all x y z.((RadioStation(x) & RadioStation(y) & RadioStation(z) & Broadcasting(x,y)) -> SourceOfRadioWaves(x,z))", "all x.((RadioStation(x) & Broadcasting(x)) -> SourceOfRadioWaves(x))", "all x.(RadioStationBroadcasting(x) -> SourceOfRadioWaves(x))", "(SourceOfRadioWaves(radiostation) & Broadcasting(radiostation))", "all x y.((RadioStation(x) & RadioStation(y)) -> BroadcastingSourceOfRadioWaves(x,y))", "all x.(RadioStation(x) -> RadioWavesSource(x))", "all x.(RadioStation(x) -> Broadcasting(x))", "all x.((RadioStation(x) & Broadcasting(x)) -> SourceOfRadioWaves(x))", "all x y.((RadioStation(x) & Broadcasting(x)) -> RadioWavesSource(y))", "all x y.((RadioStation(x) & RadioStation(y) & Broadcasting(x,y)) -> SourceOfRadioWaves(x))", "exists x.(RadioStation(x) & Broadcasting(x) & SourceOfRadioWaves(x))", "all x.(RadioStationBroadcasting(x) -> SourceOfRadioWaves(x))"]}
{"id": "entailmentbank_validation_965", "nl": "a source of something emits that something.", "fol": "", "prediction": ["all x y.((Source(x) & Something(y)) -> Emits(x,y))", "all x.((SourceOf(x,y) & Something(y)) -> Emits(x,y))", "all x.(SourceOf(x,y) -> Emits(x,y))", "all x y.((Source(x) & Something(y)) -> Emits(x,y))", "all x.((SourceOfSomething(x) & EmitsSomething(x)) -> SourceOfSomething(x))", "all x y z.((Source(x) & Something(y) & Source(z)) -> Emits(x,y,z))", "all x y.((SourceOf(x,y) & Something(y)) -> Emits(x,y))", "all x.(SourceOfSomething(x) -> EmitsSomething(x))", "all x y.((Source(x) & Something(y)) -> Emits(x,y))", "all x y z.((Source(x) & Something(y) & Source(z)) -> Emits(x,y,z))", "exists x.(SourceOf(x,y) & SourceOf(y,z) & Emits(x,z))", "all x y z.((SourceOf(x,y) & Something(z)) -> Emits(x,z))", "all x y.((Source(x) & Something(y)) -> Emits(x,y))", "exists x.(SourceOf(x,y) & Something(y) & Emits(x,y))", "all x y.((SourceOf(x,y) & Something(y)) -> Emits(x,y))", "exists x.(SourceOf(x,y) & Something(y) & Emits(x,y))"]}
{"id": "entailmentbank_validation_966", "nl": "radio station broadcasting emits radio waves.", "fol": "", "prediction": ["all x.(RadioStation(x) & Broadcasting(x) -> EmitsRadioWaves(x))", "all x y.((RadioStation(x) & RadioStation(y) & Broadcasting(x)) -> EmitsRadioWaves(x,y))", "all x.((RadioStation(x) & Broadcasting(x)) -> EmitsRadioWaves(x))", "all x y.((RadioStation(x) & RadioStation(y)) -> BroadcastingEmitsRadioWaves(x,y))", "all x.(RadioStation(x) & Broadcasting(x) -> EmitsRadioWaves(x))", "all x y z.((RadioStation(x) & RadioStation(y) & RadioStation(z) & Broadcasting(x,y)) -> EmitsRadioWaves(x,z))", "(RadioStationBroadcastingEmitsRadioWaves(radio))", "all x.(RadioStation(x) & Broadcasting(x)) -> EmitsRadioWaves(x))", "all x y.((RadioStation(x) & Broadcasting(y)) -> EmitsRadioWaves(x,y))", "(RadioStationBroadcastingEmitsRadioWaves(radio) & RadioStation(radio))", "all x.((RadioStation(x) & Broadcasting(x)) -> EmitsRadioWaves(x))", "all x y.((RadioStation(x) & RadioStation(y) & Broadcasting(x,y)) -> EmitsRadioWaves(x))", "all x.(RadioStation(x) -> BroadcastingEmitsRadioWaves(x))", "all x y.((RadioStation(x) & Broadcasting(x)) -> EmitsRadioWaves(x))", "all x.(RadioStation(x) & Broadcasting(x) & EmitsRadioWaves(x))", "exists x.(RadioStation(x) & Broadcasting(x) & EmitsRadioWaves(x))"]}
{"id": "entailmentbank_validation_967", "nl": "radio transmitter emits radio waves.", "fol": "", "prediction": ["all x.(RadioTransmitter(x) -> EmitsRadioWaves(x))", "all x.(RadioSender(x) -> EmitsRadioWaves(x))", "all x y.((RadioTransmitter(x) & RadioWaves(y)) -> Emits(x,y))", "(RadioTransmitter(radio) & EmitsRadioWaves(radio))", "all x y.((RadioSender(x) & RadioWaves(y)) -> Emits(x,y))", "(RadioSender(x) & EmitsRadioWaves(x))", "all x.(RadioTransmitter(x) -> EmitsRadioWaves(x))", "all x y z.((RadioTransmitter(x) & RadioWaves(y) & RadioWaves(z)) -> Emits(x,y,z))", "all x.(RadioSender(x) -> EmitsRadioWaves(x))", "all x y.((RadioSender(x) & RadioWaves(y) & Emits(x,y)) -> RadioWaves(x))", "all x y.((RadioTransmitter(x) & RadioWaves(y)) -> Emits(x,y))", "all x.(RadioTransmitter(x) -> EmitsRadioWaves(x))", "exists x.(RadioTransmitter(x) & RadioWaves(x) & Emits(x,radio))", "all x.(RadioSender(x) -> EmitsRadioWaves(x))", "all x.(RadioTransmitter(x) -> EmitsRadioWaves(x))", "exists x.(RadioSender(x) & EmitsRadioWaves(x))"]}
{"id": "entailmentbank_validation_968", "nl": "radio station is a radio transmitter.", "fol": "", "prediction": ["all x.(RadioStation(x) -> RadioTransmitter(x))", "all x y.((RadioStation(x) & RadioTransmitter(y)) -> RadioStation(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "(RadioStation(radio) & RadioTransmitter(radio))", "all x y.((RadioStation(x) & RadioSender(y)) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x y.((RadioStation(x) & RadioTransmitter(y)) -> RadioStation(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x y.((RadioStation(x) & RadioSender(y)) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioSender(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "exists x.(RadioStation(x) & RadioSender(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "exists x.(RadioStation(x) & RadioSender(x))"]}
{"id": "entailmentbank_validation_969", "nl": "pliers are a kind of hand tool.", "fol": "", "prediction": ["all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x y.((Plier(x) & HandTool(y)) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x y.(Plier(x) -> HandTool(y))", "all x.(Plier(x) -> HandTool(x))", "all x y.(Plier(x) -> (HandTool(y) & HandTool(y)))", "all x y.(Plier(x) -> HandTool(y))", "all x.(Plier(x) -> HandTool(x))", "all x y.(Plier(x) -> HandTool(y))", "all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "exists x.(Plier(x) & HandTool(x))", "exists x.(Poller(x) & HandTool(x))"]}
{"id": "entailmentbank_validation_970", "nl": "pliers are made of two levers for gripping.", "fol": "", "prediction": ["all x.(Plier(x) -> (HasTwoLevers(x) & ForGripping(x)))", "all x y.((Plier(x) & Lever(y)) -> MadeOf(x,y))", "all x.(Plier(x) -> (HasTwoLens(x) & ForGripping(x)))", "(MadeOfTwoLevers(pliers) & ForGripping(pliers))", "all x.(Plier(x) -> exists y.(Lever(y) & Lever(z) & MadeOf(x,y,z)))", "all x.(Plier(x) -> MadeOfTwoLevers(x))", "all x y.(Plier(x) -> (MadeOfTwoLevers(x) & ForGripping(y)))", "(MadeOfTwoLens(pliers) & ForGripping(pliers))", "all x y z.((Plier(x) & Lever(y) & Lever(z)) -> MadeOf(x,y,z))", "all x y.((Plier(x) & Lever(y)) -> MadeOf(x,y))", "all x y.(Plier(x) -> (HasTwoLevers(x) & ForGripping(y)))", "all x.(Plier(x) -> (HasTwoLevers(x) & ForGripping(x)))", "all x.(Plier(x) -> (HasTwoLevers(x) & ForGripping(x)))", "exists x.(Poller(x) & Lever(x) & ForGripping(x))", "all x.(Plier(x) -> MadeOfTwoLens(x))", "exists x.(Plier(x) & Lever(x) & Lever(x,2) & ForGripping(x))"]}
{"id": "entailmentbank_validation_971", "nl": "pliers are a tool made of two levers for gripping.", "fol": "", "prediction": ["all x.(Plier(x) -> (Tool(x) & MadeOfTwoLevers(x) & ForGripping(x)))", "all x y.((Plier(x) & Lever(y)) -> MadeOf(x,y))", "all x.(Plier(x) -> (HasTwoLevers(x) & ForGripping(x)))", "(MadeOfTwoLevers(Plier) & ForGripping(Plier))", "all x.(Plier(x) -> (Tool(x) & MadeOfTwoLevers(x) & ForGripping(x)))", "all x.(Plier(x) -> (ToolMadeOfTwoLevers(x) & ForGripping(x)))", "all x y z.((Plier(x) & Lever(y) & Lever(z)) -> MadeOfForGripping(x,y,z))", "all x y.(Plier(x) -> (Tool(y) & MadeOfTwoLevers(y,x) & ForGripping(x)))", "all x.(Plier(x) -> (Tool(x) & MadeOfTwoLevers(x) & ForGripping(x)))", "all x y.((Plier(x) & Lever(y)) -> MadeOfForGripping(x,y))", "all x.(Plier(x) -> (MadeOfTwoLevers(x) & ForGripping(x)))", "all x y.(Plier(x) -> (Tool(y) & MadeOfTwoLeversForGripping(y)))", "all x.(Plier(x) -> (Tool(x) & MadeOfTwoLevers(x) & ForGripping(x)))", "all x y.(Plier(x) -> (Tool(y) & MadeOf(y,2) & ForGripping(y,2)))", "all x.(Plier(x) -> (HasTwoLens(x) & ForGripping(x)))", "exists x.(Poller(x) & Lever(x) & MadeOf(x,2) & ForGripping(x))"]}
{"id": "entailmentbank_validation_972", "nl": "gripping produces gripping force.", "fol": "", "prediction": ["all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x y.((Gripping(x) & GrippingForce(y)) -> Produces(x,y))", "all x y.((Gripping(x) & Gripping(y)) -> ProducesGrippingForce(x,y))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x y.((Gripping(x) & GrippingForce(y)) -> Produces(x,y))", "all x y z.((Gripping(x) & Gripping(y) & Force(z)) -> Produces(x,y,z))", "all x y.((Gripping(x) & Grips(y)) -> ProducesGrippingForce(x,y))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x y.(Gripping(x) -> ProducesGrippingForce(x,y))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "(all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "exists x.(Gripping(x) & ProducesGrippingForce(x))"]}
{"id": "entailmentbank_validation_973", "nl": "pliers are a tool that can produce gripping force.", "fol": "", "prediction": ["all x.(Plier(x) -> (ProducesGrippingForce(x) & CanProduceGrippingForce(x)))", "all x y.((Plier(x) & Tool(y)) -> ProducesGrippingForce(x,y))", "all x.(Plier(x) -> (ProducesGrippingForce(x) & CanProduceGrippingForce(x)))", "all x.(Plier(x) -> (ProducesGrippingForce(x) & CanProduceGrippingForce(x)))", "all x.(Plier(x) -> (Tool(x) & ProducesGrippingForce(x)))", "all x y.((Plier(x) & Tool(y)) -> ProducesGrippingForce(x,y))", "all x y.(Plier(x) -> (Tool(y) & ProducesGrippingForce(y)))", "all x.(Plier(x) -> ProducesGrippingForce(x))", "all x.(Plier(x) -> (ProducesGrippingForce(x) & CanProduceGrippingForce(x)))", "all x y.(Plier(x) -> (Tool(x) & ProducesGrippingForce(x)))", "all x.(Plier(x) -> (ProducesGrippingForce(x) & CanProduceGrippingForce(x)))", "all x.((Plier(x) & ProducesGrippingForce(x)) -> Tool(x))", "all x y.((Plier(x) & Tool(y)) -> CanProduceGrippingForce(x,y))", "all x.(Plier(x) -> ProducesGrippingForce(x))", "all x.(Plier(x) -> CanProduceGrippingForce(x))", "exists x.(Poller(x) & ProducesGrippingForce(x))"]}
{"id": "entailmentbank_validation_974", "nl": "a gripping force can be used to tighten a mechanical fastener.", "fol": "", "prediction": ["all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x.(GrippingForce(x) -> TightensMechanicalFastener(x))", "all x y z.((GrippingForce(x) & MechanicalFastener(y) & MechanicalFastener(z) & Tightens(x,y,z)) -> CanBeUsedToTighten(x,y,z))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x.((GrippingForce(x) & MechanicalFastener(x)) -> Tightens(x,y))", "all x.(GrippingForce(x) -> TightensMechanicalFastener(x))", "all x y z.((GrippingForce(x) & MechanicalFastener(y) & MechanicalFastener(z) & UsedToTighten(x,y,z)) -> Tighten(x,y,z))", "all x y z.((GrippingForce(x) & MechanicalFastener(y) & MechanicalFastener(z)) -> Tightens(x,y,z))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tighten(x,y))", "exists x.(GrippingForce(x) & TightensMechanicalFastener(x))", "all x.(GrippingForce(x) -> TightensMechanicalFastener(x))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))", "exists x.(GrippingForce(x) & TightensMechanicalFastener(x))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))", "exists x.(GrippingForce(x) & TightensMechanicalFastener(x))"]}
{"id": "entailmentbank_validation_975", "nl": "pliers can be used to tighten a mechanical fastener.", "fol": "", "prediction": ["all x y.((Plier(x) & MechanicalFastener(y)) -> Tighten(x,y))", "all x.(Plier(x) -> TightensMechanicalFastener(x))", "all x y.((Plier(x) & MechanicalFastener(y)) -> Tighten(x,y))", "all x y z.((Plier(x) & MechanicalFastener(y) & MechanicalFastener(z)) -> Tighten(x,y,z))", "all x y z.((Plier(x) & MechanicalFastener(y) & MechanicalFastener(z)) -> Tighten(x,y,z))", "all x.(Plier(x) -> TightensMechanicalFastener(x))", "all x y.((Plier(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y.((Plier(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y z.((Plier(x) & MechanicalFastener(y) & MechanicalFastener(z) & Tighten(x,y,z)) -> Tighten(x,y,z))", "all x y.(Plier(x) -> (TightensMechanicalFastener(y) & Uses(x,y)))", "all x.(Plier(x) -> (TightensMechanicalFastener(x) & Uses(x,y)))", "all x.(Plier(x) -> TightensMechanicalFastener(x))", "exists x.(Plier(x) & MechanicalFastener(x) & Tightens(x,y))", "all x y.((Plier(x) & MechanicalFastener(y)) -> Tighten(x,y))", "all x.(Plier(x) -> TightensMechanicalFastener(x))", "exists x.(Plier(x) & TightensMechanicalFastener(x))"]}
{"id": "entailmentbank_validation_976", "nl": "advances in technology sometimes cause human jobs to be replaced by more efficient machines.", "fol": "", "prediction": ["all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(y,x))", "all x y.((TechnologyAdvances(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(y,x))", "all x.((TechnologyAdvances(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(y))", "all x y z.((AdvancesInTechnology(x) & HumanJob(y) & Machine(z)) -> (Replaces(y,z) & MoreEfficient(y,z)))", "all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> (ReplacedByMoreEfficientMachines(y,x)))", "all x y.((TechnologyAdvance(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(y,x))", "all x.((TechnologyAdvances(x) & HumanJob(x)) -> ReplacedByMoreEfficientMachines(x))", "all x.((AdvancesInTechnology(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(x,y))", "all x y.((Advancement(x) & Technology(y)) -> (ReplacesHumanJobs(x,y) | MoreEfficientMachines(x,y)))", "all x y z.((AdvancesInTechnology(x) & HumanJob(y) & Machine(z)) -> CausesReplacement(x,y,z))", "exists x.(TechnologyAdvance(x) & HumanJob(x) & ReplacedByMoreEfficientMachines(x))", "all x y z.((TechnologyAdvances(x) & HumanJob(y) & Machine(z)) -> (Replaces(y,z) & MoreEfficient(y,z)))", "(all x.((HumanJob(x) & AdvancesInTechnology(x)) -> ReplacedByMoreEfficientMachines(x)))", "all x.((TechnologicalAdvancement(x) & HumanJob(y) & MoreEfficientMachines(z)) -> ReplacedBy(x,y,z))", "exists x.(AdvancesInTechnology(x) & CausesHumanJobsToBeReplaced(x))", "exists x.(AdvancesInTechnology(x) & CausesHumanJobs(x) & ReplacedByMoreEfficientMachines(x))"]}
{"id": "entailmentbank_validation_977", "nl": "replacing something decreases that something.", "fol": "", "prediction": ["all x y.((Replacement(x) & Something(y)) -> Decreases(x,y))", "all x.((Replacement(x) & Something(x)) -> Decreases(x,y))", "all x y.((Replacement(x,y) & Something(y)) -> Decreases(x,y))", "all x y.((Replacement(x) & Something(y)) -> Decreases(x,y))", "all x.((Replacing(x) & Something(x)) -> Decreases(x,y))", "all x y z.((Replacement(x,y) & Something(z)) -> Decreases(x,z))", "all x.((Replacement(x) & Something(x)) -> Decreases(x,y))", "(all x.(Replacing(x) -> Decreases(x,y)))", "all x.(Replacement(x) -> Decreases(x,y))", "all x y.((Replacing(x,y) & Something(y)) -> Decreases(x,y))", "all x y.((Placing(x,y) & Something(y)) -> Decreases(x,y))", "all x y z.((Replacement(x) & Something(y) & Something(z)) -> Decreases(y,z))", "all x.(ReplacingSomething(x) -> DecreasesSomething(x))", "all x.((Replaces(x,y) & Something(y)) -> Decreases(x,y))", "exists x.(Replacement(x) & Decreases(x,y))", "all x y.((Placing(x,y) & Something(y)) -> Decreases(x,y))"]}
{"id": "entailmentbank_validation_978", "nl": "advances in technology decrease human jobs by replacing them with efficient machines.", "fol": "", "prediction": ["all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> (Decreases(x,y) & ReplacesWithEfficientMachines(x,y)))", "all x.((TechnologyAdvances(x) & HumanJob(y) & ReplacedWithEfficientMachines(x,y)) -> Decreases(x,y))", "all x y.((TechnologyAdvances(x) & HumanJob(y) & ReplacedWithEfficientMachines(x,y)) -> Decreases(x,y))", "all x y z.((AdvancesInTechnology(x) & HumanJob(y) & Machine(z)) -> (Decreases(x,y) & Replaces(x,z)))", "all x.((AdvancesInTechnology(x) & HumanJob(y) & ReplacedWithEfficientMachines(x,y)) -> Decreases(x,y))", "all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> (Decreases(x,y) & ReplacesWithEfficientMachines(x)))", "(DecreasesHumanJobs(TechnologyAdvances) & ReplacesEfficientMachines(Technology))", "all x.((TechnologicalAdvances(x) & HumanJobs(x) & ReplacedWithEfficientMachines(x)) -> Decreases(x))", "all x y.((AdvancesInTechnology(x) & HumanJob(y) & ReplacedWithEfficientMachines(x,y)) -> Decreases(x,y))", "all x y z.((AdvancesInTechnology(x) & HumanJob(y) & Machine(z)) -> (Decreases(x,y) & Replaces(x,z)))", "all x.((AdvancesInTechnology(x) & HumanJobs(x) & ReplacedWithEfficientMachines(x)) -> Decreases(x))", "all x.(AdvancesInTechnology(x) -> (DecreasesHumanJobs(x) & ReplacesEfficientMachines(x)))", "all x y.((TechnologicalAdvances(x) & HumanJob(y) & ReplacedWithEfficientMachines(x,y)) -> Decreases(x,y))", "all x.((TechnologyAdvances(x) & HumanJob(y) & ReplacedWithEfficientMachines(x,y)) -> Decreases(x,y))", "all x y z.((AdvancesInTechnology(x) & HumanJob(y) & Machine(z)) -> (Decreases(x,y) & ReplacesWith(x,z)))", "all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> (Decreases(x,y) & ReplacesWithEfficientMachines(x,y)))"]}
{"id": "entailmentbank_validation_979", "nl": "having a job has a positive impact on a human.", "fol": "", "prediction": ["all x.(Job(x) -> PositiveImpactOnHuman(x))", "all x y.((Job(x) & Human(y)) -> PositiveImpact(x,y))", "all x.((Job(x) & Human(y)) -> PositiveImpact(x,y))", "all x.(Job(x) -> PositiveImpactOnHuman(x))", "all x y.((Job(x) & Human(y)) -> PositiveImpact(x,y))", "all x.((Job(x) & PositiveImpactOnHuman(x)) -> HasJob(x))", "all x y z.((Job(x) & Human(y) & Job(z)) -> PositiveImpact(x,y,z))", "all x.(Job(x) -> PositiveImpactOnHuman(x))", "all x y.((Job(x) & Human(y)) -> PositiveImpact(x,y))", "all x.(HasJob(x) -> PositiveImpactOnHuman(x))", "all x.(Job(x) -> PositiveImpactOnHuman(x))", "all x y.((Job(x) & Human(y)) -> PositiveImpact(x,y))", "all x y.((Job(x) & Human(y)) -> PositiveImpact(x,y))", "exists x.(Job(x) & PositiveImpactOnHuman(x))", "all x y.((Job(x) & Human(y)) -> PositiveImpactOn(x,y))", "exists x.(Job(x) & PositiveImpactOnHuman(x))"]}
{"id": "entailmentbank_validation_980", "nl": "decreasing something positive has a negative impact on a thing.", "fol": "", "prediction": ["all x y.((Positive(x) & Positive(y)) -> NegativeImpact(x,y))", "all x.(DecreasingPositive(x) -> NegativeImpact(x))", "all x y.((DecreasingPositive(x) & Thing(y)) -> NegativeImpact(x,y))", "all x y z.((Positive(x) & Positive(y) & Thing(z)) -> NegativeImpact(x,y,z))", "all x y.((DecreasedPositive(x) & Thing(y)) -> NegativeImpact(x,y))", "all x y.((Positive(x) & Positive(y)) -> NegativeImpact(x,y))", "all x.((DecreasingPositive(x) & NegativeImpact(x)) -> PositiveImpact(x))", "(DecreasingPositive(x) -> NegativeImpactOnThing(x))", "all x.(DecreasesPositive(x) -> NegativeImpact(x))", "all x.((Positive(x) & Positive(x)) -> NegativeImpact(x))", "all x.(DecreasingPositive(x) -> NegativeImpactOnThing(x))", "all x.((DecreasedPositive(x) & NegativeImpact(x)) -> PositiveImpact(x))", "all x y z.((Decline(x) & Positive(y) & Thing(z)) -> NegativeImpact(x,y,z))", "all x y.((Positive(x) & Positive(y) & Positive(y)) -> NegativeImpact(x,y))", "all x.(Decline(x) -> NegativeImpact(x))", "all x y.((Descreasing(x) & Positive(y) & Thing(z)) -> NegativeImpact(x,z))"]}
{"id": "entailmentbank_validation_981", "nl": "advances in technology decreasing human jobs by more efficient machines has a negative impact on human.", "fol": "", "prediction": ["all x y.((AdvancesInTechnology(x) & HumanJobs(y) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x,y))", "all x.((TechnologyAdvances(x) & HumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x.((AdvancesInTechnology(x) & DecreasesHumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x.((TechnologyAdvancements(x) & DecreasesHumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x y.((TechnologyAdvances(x) & HumanJobs(y) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x,y))", "all x y z.((AdvancesInTechnology(x) & HumanJobs(y) & Machines(z) & Decreases(x,y) & MoreEfficient(z,y)) -> NegativeImpactOnHuman(x))", "all x y.((AdvancesInTechnology(x) & HumanJobs(y) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x.((ProgressesInTechnology(x) & DecreasesHumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x y z.((AdvancesInTechnology(x) & HumanJob(y) & Machine(z) & Decreases(x,y) & MoreEfficient(z)) -> NegativeImpactOnHuman(x))", "all x.(AdvancesInTechnologyDecreasesHumanJobsByMoreEfficientMachines(x) -> NegativeImpactOnHuman(x))", "all x.((TechnologyAdvances(x) & HumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x.((AdvancementsInTechnology(x) & DecreasesHumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x y.((TechnologyAdvances(x) & HumanJobs(y) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x,y))", "all x y.((ProgressesInTechnology(x) & HumanJobs(y) & MoreEfficientMachines(x,y)) -> NegativeImpactOnHuman(x,y))", "all x y.((AdvancesInTechnology(x) & HumanJobs(y) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x,y))", "all x.((TechnologyAdvancements(x) & DecreasesHumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))"]}
{"id": "entailmentbank_validation_982", "nl": "days are a kind of unit for measuring time.", "fol": "", "prediction": ["all x.(Day(x) -> MeasuresTime(x))", "all x.(Day(x) -> MeasuresTime(x))", "(MeasuresTime(Days) & UnitForMeasuringTime(Days))", "all x y.((Day(x) & Day(y)) -> MeasuresTime(x,y))", "all x.(Day(x) -> MeasuresTime(x))", "all x.(Day(x) -> MeasuringTime(x))", "all x y.((Day(x) & Day(y)) -> MeasuresTime(x,y))", "all x.(Day(x) -> MeasuresTime(x))", "all x.(Days(x) -> MeasuresTime(x))", "exists x.(Date(x) & UnitForMeasuringTime(x))", "exists x.(Day(x) & UnitForMeasuringTime(x))", "all x y.((Day(x) & Day(y)) -> MeasuresTime(x,y))", "all x.(Days(x) -> MeasuresTime(x))", "all x.(Day(x) -> MeasuresTime(x))", "all x y.((Day(x) & Time(y)) -> Measures(x,y))", "exists x.(Days(x) & MeasuresTime(x))"]}
{"id": "entailmentbank_validation_983", "nl": "a student wants to record the data of the growth of a vine over a period of a day.", "fol": "", "prediction": ["all x y.((Student(x) & Vine(y)) -> WantsToRecordDataOfGrowthOverDay(x,y))", "all x y z.((Student(x) & Vine(y) & Day(z)) -> WantsToRecordDataOfGrowth(x,y,z))", "all x.((Student(x) & WantsToRecordDataOfGrowthOfVine(x) & OverDayPeriod(x)) -> WantsToRecordDataOfGrowthOfVine(x))", "all x y.((Student(x) & Vine(y) & WantsToRecordDataOfGrowth(x,y)) -> OverDayPeriod(x,y))", "all x.(Student(x) -> WantsToRecordDataOfGrowthOfVine(x))", "all x y z.((Student(x) & Vine(y) & Day(z)) -> WantsToRecordDataOfGrowth(x,y,z))", "all x y z.((Student(x) & Vine(y) & DayPeriod(z)) -> WantsToRecordDataOfGrowth(x,y,z))", "all x y.((Student(x) & Vine(y)) -> WantsToRecordDataOfGrowthOverDay(x,y))", "all x.((Student(x) & WantsToRecordDataOfGrowthOfVine(x) & OverDayPeriod(x)) -> WantsToRecordDataOfGrowthOfVine(x))", "all x y z.((Student(x) & Grape(y) & Day(z)) -> WantsToRecordDataOfGrowth(x,y,z))", "exists an x y.(Student(x) & Student(y) & WantsToRecordDataOfGrowthOfVine(x,y) & OverDayPeriod(x,y))", "all x y.((Student(x) & Grape(y) & WantsToRecordDataOfGrowth(x,y)) -> OverDayPeriod(x,y))", "exists x.(Student(x) & WantsToRecordDataOfGrowthOfVine(x) & OverDayPeriod(x))", "all x y.((Student(x) & Vine(y) & WantsToRecordDataOfGrowth(x,y)) -> OverDay(x,y))", "all x.(Student(x) -> WantsToRecordGrowthOfVine(x))", "all x y z.((Student(x) & Vine(y) & Day(z) & WantsToRecordDataOfGrowth(x,y,z)) -> WantsToRecordData(x,y,z))"]}
{"id": "entailmentbank_validation_984", "nl": "the student wants to record the data of the growth of a vine over a period of time.", "fol": "", "prediction": ["all x y.((Student(x) & Vine(y) & WantsToRecordDataOfGrowth(x,y)) -> WantsToRecordData(x,y))", "all x y z.((Student(x) & Vine(y) & Time(z)) -> WantsToRecordDataOfGrowth(x,y,z))", "all x y.((Student(x) & Vine(y)) -> WantsToRecordDataOfGrowthOverPeriod(x,y))", "all x.((Student(x) & WantsToRecordDataOfGrowthOfVine(x)) -> WantsToRecordDataOfGrowthOverPeriod(x))", "all x y z.((Student(x) & Vine(y) & TimePeriod(z)) -> WantsToRecordDataOfGrowth(x,y,z))", "((Student(Student) & WantsToRecordDataOfGrowthOfVine(Student,Vine)) -> RecordsOverPeriod(Student,Vine))", "exists x.(Student(x) & WantsToRecordDataOfGrowthOfVine(x) & OverPeriodOfTime(x))", "all x.((Student(x) & WantsToRecordDataOfGrowthOfVine(x) & OverPeriodOfTime(x)) -> WantsToRecordDataOfGrowthOfVine(x))", "all x y.((Student(x) & Vine(y) & WantsToRecordDataOfGrowth(x,y)) -> WantsToRecordData(x,y))", "all x.((Student(x) & WantsToRecordDataOfGrowthOfVine(x)) -> WantsToRecordDataOfGrowthOverPeriod(x))", "all x y z.((Student(x) & Vine(y) & Time(z)) -> WantsToRecordDataOfGrowthOverTime(x,y,z))", "all x y z.((Student(x) & Vine(y) & PeriodOfTime(z) & WantsToRecordDataOfGrowth(x,y,z)) -> WantsToRecordData(x,y,z))", "all x y.((Student(x) & Vine(y)) -> WantsToRecordDataOfGrowthOverPeriod(x,y))", "all x y.((Student(x) & Vine(y) & WantsToRecordDataOfGrowth(x,y)) -> WantsToRecordDataOverPeriod(x,y))", "all x.((Student(x) & WantsToRecordDataOfGrowthOfVine(x)) -> WantsToRecordDataOverPeriodOfTime(x))", "all x y.((Student(x) & Vein(y)) -> WantsToRecordDataOfGrowth(x,y))"]}
{"id": "entailmentbank_validation_985", "nl": "a line graph is used for showing change / data over time.", "fol": "", "prediction": ["all x.(LineGraph(x) -> ShowsChange(x))", "all x y.((LineGraph(x) & Change(y) & Data(y)) -> ShowsOverTime(x,y))", "all x.(LineGraph(x) -> ShowsChange(x))", "all x y z.((LineGraph(x) & Change(y) & Data(z)) -> ShowsOverTime(x,y,z))", "all x y.((LineGraph(x) & Change(y) & Data(y)) -> ShowsOverTime(x,y))", "all x.(LineGraph(x) -> ShowsChangeOverTime(x))", "all x.(LineGraph(x) -> (ShowsChange(x) & ShowsData(x)))", "all x y.(LineGraph(x) -> (ShowsChange(y) & ShowsData(x,y)))", "all x.(LineGraph(x) -> ShowsChangeAndDataOverTime(x))", "all x y z.((LineGraph(x) & Change(y) & Data(z)) -> ShowsOverTime(x,y,z))", "all x y.((LineGraph(x) & Change(y) & Data(y)) -> ShowsOverTime(x,y))", "all x y.((LineGraph(x) & Change(y)) -> ShowsOverTime(x,y))", "exists x.(LineGraph(x) & UsedForShowingChange(x) & ShowingData(x))", "exists x.(LineGraph(x) & ShowsChange(x) & ShowsData(x))", "all x.(LineGraph(x) -> ShowsChangeOverTime(x))", "exists x.(LineGraph(x) & ShowsChangeOrData(x))"]}
{"id": "entailmentbank_validation_986", "nl": "a line graph an be used to show the data of the growth of the vine over a period of time.", "fol": "", "prediction": ["all x y.((LineGraph(x) & Vine(y)) -> ShowsDataOfGrowthOverPeriod(x,y))", "all x y z.((LineGraph(x) & Vine(y) & Time(z)) -> ShowsDataOfGrowth(x,y,z))", "all x y.((LineGraph(x) & Vine(y) & TimePeriod(y)) -> ShowsDataOfGrowth(x,y))", "all x.(LineGraph(x) -> ShowsDataOfGrowthOfVine(x))", "all x y z.((LineGraph(x) & Vine(y) & TimePeriod(z)) -> ShowsDataOfGrowth(x,y,z))", "all x.((LineGraph(x) & ShowsDataOfGrowthOfVine(x)) -> UsedForTime(x))", "all x y.((LineGraph(x) & Vine(y)) -> ShowsDataOfGrowthOverPeriod(x,y))", "all x y z.((LineGraph(x) & Vine(y) & PeriodOfTime(z)) -> ShowsDataOfGrowth(x,y,z))", "all x.(LineGraph(x) -> ShowsDataOfGrowthOfVine(x))", "all x.((LineGraph(x) & ShowsDataOfGrowthOfVine(x)) -> UsedToShowTime(x))", "all x y.((LineGraph(x) & Vine(y) & TimePeriod(y)) -> ShowsDataOfGrowth(x,y))", "all x.(LineGraph(x) -> ShowsGrowthOfVine(x))", "all x.((LineGraph(x) & ShowsDataOfVineGrowth(x)) -> UsedForTime(x))", "exists x.(LineGraph(x) & ShowsDataOfGrowthOfVine(x) & OverPeriodOfTime(x))", "all x y z.((LineGraph(x) & Vine(y) & TimePeriod(z)) -> ShowsDataOfGrowth(x,y,z))", "all x y.((LineGraph(x) & Vine(y)) -> ShowsDataOfGrowth(x,y))"]}
