{"id": "folio_validation_0", "nl": "If people perform in school talent shows often, then they attend and are very engaged with school events.", "fol": "all x.(PerformInTalentShows(x) -> EngagedWithSchoolEvents(x))", "prediction": ["all x.((PerformsInSchoolTalentShows(x) & Often(x)) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "all x.(PerformsInSchoolTalentShowsOften(x) -> (AttendsSchoolEvents(x) & EngagedWithSchoolEvents(x)))", "all x.((PerformsInSchoolTalentShowsOften(x) & AttendsSchoolEvents(x) & EngagedWithSchoolEvents(x)) -> EngagedWithSchoolEvents(x))", "all x y.((PerformsInSchoolTalentShows(x) & SchoolEvents(y) & Often(x)) -> (Attends(x,y) & EngagedWithSchoolEvents(x,y)))", "all x.((Person(x) & PerformsInSchoolTalentShowsOften(x)) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "all x y.((Person(x) & PerformsInSchoolTalentShows(x) & Often(x)) -> (Attends(x,y) & EngagedWithSchoolEvents(x,y)))", "all x y.((PerformsInSchoolTalentShowsOften(x) & SchoolEvents(y)) -> (Attends(x,y) & Engaged(x,y)))", "all x y z.((PerformsInSchoolTalentShows(x) & SchoolEvent(y) & PerformsIn(x,y)) -> (Attends(x,z) & EngagedWith(z,y)))", "all x.(PerformsInSchoolTalentShowsOften(x) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "all x.((PerformsInSchoolTalentShows(x) & Often(x)) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "all x.(PerformsInSchoolTalentShows(x) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "all x y.((Person(x) & PerformInSchoolTalentShowsOften(x)) -> (Attends(x,y) & EngagedWithSchoolEvents(x,y)))", "all x.((Person(x) & PerformsInSchoolTalentShowsOften(x)) -> (AttendsSchoolEvents(x) & EngagedWithSchoolEvents(x)))", "all x y.((PerformsInSchoolTalentShows(x) & Often(x)) -> (Attends(y) & EngagedWithSchoolEvents(y)))", "all x.((PerformsInSchoolTalentShowsOften(x) & AttendsSchoolEvents(x) & EngagedWithSchoolEvents(x)) -> VeryEngagedWithSchoolEvents(x))", "all x.(PerformsInSchoolTalentShowsOften(x) -> (AttendsSchoolEvents(x) & EngagedWithSchoolEvents(x)))"]}
{"id": "folio_validation_1", "nl": "People either perform in school talent shows often or are inactive and disinterested members of their community.", "fol": "all x.(PerformInTalentShows(x) | InactiveCommunityMember(x))", "prediction": ["all x.(Person(x) -> (PerformsInSchoolTalentShows(x) | InactiveAndDisinterestedMember(x)))", "all x.((Person(x) & PerformsInSchoolTalentShows(x)) | (Inactive(x) & Disinterested(x))))", "all x y.((Person(x) & SchoolTalentShow(y)) -> (PerformsIn(x,y) | Inactive(x) & Disinterested(x)))", "all x.(Person(x) -> (PerformsInSchoolTalentShows(x) | InactiveAndDisinterested(x)))", "exists x.(Person(x) & ((PerformsInSchoolTalentShows(x) & Often(x)) | (Inactive(x) & Disinterested(x)))))", "all x.((Person(x) & PerformsInSchoolTalentShows(x) & (Inactive(x) | Disinterested(x))) -> Disinterested(x))", "all x.(Person(x) -> (PerformsInSchoolTalentShowsOften(x) | InactiveAndDisinterestedMember(x)))", "all x y.((Person(x) & SchoolTalentShow(y)) -> (PerformsIn(x,y) | InactiveAndDisinterested(x)))", "(exists x.(Person(x) & PerformsInSchoolTalentShows(x)) | exists y.(Person(y) & Inactive(y) & Disinterested(y))))", "all x y z.((Person(x) & SchoolTalentShow(y) & Community(z)) -> (PerformsInOften(x,y) | InactiveAndDisinterested(x,z)))", "exists x.(PerformsInSchoolTalentShows(x) | (Inactive(x) & DisinterestedMember(x))))", "all x y.((Person(x) & SchoolTalentShow(y) & PerformsIn(x,y)) | (Inactive(x) & Disinterested(x))))", "exists x.(Person(x) & ((PerformsInSchoolTalentShows(x) & Often(x)) | (Inactive(x) & Disinterested(x)))))", "all x y.((Person(x) & SchoolTalentShow(y)) -> (PerformsInOften(x,y) | InactiveAndDisinterested(x,y)))", "exists x.(Person(x) & ((PerformsInSchoolTalentShows(x) & Often(x)) | (Inactive(x) & DisinterestedMember(x)))))", "exists x.(Person(x) & ((PerformsInSchoolTalentShows(x) & Inactive(x) & Disinterested(x)) | MemberOfCommunity(x)))"]}
{"id": "folio_validation_2", "nl": "If people chaperone high school dances, then they are not students who attend the school.", "fol": "all x.(ChaperoneHighSchoolDances(x) -> -AttendsSchool(x))", "prediction": ["all x.(ChaperonesHighSchoolDances(x) -> -StudentsAttendingSchool(x))", "all x.((Person(x) & ChaperonesHighSchoolDances(x)) -> -StudentsAttendingSchool(x))", "all x.(ChamperonesHighSchoolDances(x) -> -AttendsSchool(x))", "all x y.((Person(x) & ChaperonesHighSchoolDances(x)) -> -StudentsAttendingSchool(y))", "(all x.(ChamperonesHighSchoolDances(x) -> -StudentsAttendingSchool(x)))", "all x.((Person(x) & ChaperonesHighSchoolDances(x)) -> -AttendsSchool(x))", "all x y.((ChamperonesHighSchoolDances(x) & HighSchoolDance(y)) -> -StudentsAttendingSchool(x,y))", "all x.(ChambersHighSchoolDances(x) -> -StudentsAttendingSchool(x))", "all x.(ChaperonesHighSchoolDances(x) -> -StudentsAttendingSchool(x))", "all x y.((Person(x) & ChaperonesHighSchoolDances(x) & HighSchoolDance(y)) -> -StudentAttendsSchool(x,y))", "all x y.((Person(x) & ChaperonesHighSchoolDances(x)) -> -AttendsSchool(y))", "all x.(ChamperonesHighSchoolDances(x) -> -AttendsSchool(x))", "all x.((Person(x) & ChaperonesHighSchoolDances(x)) -> -StudentsAttendingSchool(x))", "all x.(ChaperonesHighSchoolDances(x) -> -StudentAttendsSchool(x))", "all x.(ChambersHighSchoolDances(x) -> -AttendsSchool(x))", "all x.(ChamperonesHighSchoolDances(x) -> -AttendsSchool(x))"]}
{"id": "folio_validation_3", "nl": "All people who are inactive and disinterested members of their community chaperone high school dances.", "fol": "all x.(InactiveCommunityMember(x) -> ChaperoneHighSchoolDances(x))", "prediction": ["all x.((Person(x) & Inactive(x) & Disinterested(x)) -> ChaperoneHighSchoolDance(x))", "all x y.((Person(x) & CommunityChamperone(y) & Inactive(x) & Disinterested(x) & HighSchoolDance(y)) -> Chaperone(x,y))", "all x.((Person(x) & Inactive(x) & Disinterested(x)) -> ChaperoneHighSchoolDance(x))", "all x.(InactiveAndDisinterested(x) -> CommunityChamperoneHighSchoolDance(x))", "all x y.((Person(x) & Inactive(x) & Disinterested(x) & CommunityChamperone(y) & HighSchoolDance(y)) -> Disinterested(x,y))", "all x.((Inactive(x) & Disinterested(x)) -> ChaperoneHighSchoolDance(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x)) -> CommunityChamperoneHighSchoolDance(x))", "all x.(Inactive(x) & Disinterested(x) -> CommunityChamperoneHighSchoolDances(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x) & CommunityChamperone(x)) -> HighSchoolDance(x))", "all x y.((Person(x) & CommunityChamperone(y) & Inactive(x) & Disinterested(x)) -> HighSchoolDance(y))", "all x.((Inactive(x) & Disinterested(x) & CommunityChamperoneHighSchoolDances(x)) -> Disinterested(x))", "all x y.((Person(x) & Inactive(x) & Disinterested(x) & CommunityChamperoneHighSchoolDance(y)) -> ChaperoneHighSchoolDance(x,y))", "all x.(InactiveAndDisinterested(x) -> ChaperoneHighSchoolDance(x))", "all x.((Person(x) & Inactive(x) & DisinterestedMember(x) & CommunityChamperoneHighSchoolDances(x)) -> Disinterested(x))", "ALL X.((Inactive(x) | Disinterested(x)) -> ChaperoneHighSchoolDance(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x)) -> ChaperoneHighSchoolDance(x))"]}
{"id": "folio_validation_4", "nl": "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.", "fol": "all x.(WishesToFurtherAcademicCareer(x) -> AttendsSchool(x))", "prediction": ["all x.((YoungChild(x) & YoungTeen(x) & WishesToFinishAcademicCareers(x) & WishesToFinishEducationalOpportunities(x)) -> AttendsSchool(x))", "all x.((YoungChild(x) & YoungAcademicCareers(x) & YoungAdults(x) & WishesForwardAcademicCareers(x) & WishesForwardEducationalOpportunities(x)) -> AttendsSchool(x))", "all x.((YoungChildren(x) & YoungTeenagers(x) & -WorthsAcademicCareers(x) & -WorthsEducationalOpportunities(x)) -> AttendsSchool(x))", "all x y.((YoungChild(x) & YoungTeen(y) & WishesToFinishAcademicCareersAndEducationalOpportunities(x)) -> AttendsSchool(x))", "all x.((YoungChildren(x) & YoungAcademicCareers(x) & YoungAdults(x) & WishesForwardEducationalOpportunities(x)) -> AttendsSchool(x))", "all x y.((YoungChild(x) & Teenager(y) & WantsToFinishAcademicCareersAndEducationalOpportunities(x)) -> AttendsSchool(x))", "all x y.((YoungChild(x) & YoungAcademicCareer(y) & YoungAdult(x) & WishesToFinish(x,y) & -WishesToFinish(x,y)) -> AttendsSchool(x))", "all x.((YoungChild(x) | YoungAdult(x)) -> AttendsSchool(x))", "all x.((Jugend(x) & YoungChild(x) & YoungAcademicCareer(x) & YoungAdult(x) & WishesForwardAcademicCareersAndEducationalOpportunities(x)) -> AttendsSchool(x))", "all x.((YoungChild(x) & YoungTeacher(x) & WishesToFinishAcademicCareers(x) & WishesToFinishEducationalOpportunities(x)) -> AttendsSchool(x))", "all x.((YoungChildren(x) & YoungTeens(x) & -WorthsForfeitAcademicCareers(x) & -WorthsForfeitEducationalOpportunities(x)) -> AttendsSchool(x))", "all x y.((YoungChild(x) & Teenager(y) & WishesForwardAcademicCareers(x,y) & WishesForwardEducationalOpportunities(x,y)) -> AttendsSchool(x))", "all x y.((YoungChild(x) & YoungTeacher(y) & WishesToFinishAcademicCareersAndEducationalOpportunities(x,y)) -> AttendsSchool(x))", "all x.((YearChild(x) | Teenager(x)) -> AttendsSchool(x))", "all x.((YearKid(x) | Teenager(x)) -> AttendsSchool(x))", "all x.((YoungChildren(x) | Teenagers(x)) -> AttendsSchool(x))"]}
{"id": "folio_validation_5", "nl": "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. ", "fol": "((EngagedWithSchoolEvents(Bonnie) & AttendsSchool(Bonnie) & -(-EngagedWithSchoolEvents(Bonnie) & -AttendsSchool(Bonnie))) | (-(EngagedWithSchoolEvents(Bonnie) & AttendsSchool(Bonnie)) & -EngagedWithSchoolEvents(Bonnie) & -AttendsSchool(Bonnie)))", "prediction": ["all x.(Bonnie(x) -> ((Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x))))", "((Bonnie(Bonnie) & VeryEngagedWithSchoolEvents(Bonnie)) | (-Bonnie(Bonnie) & VeryEngagedWithSchoolEvents(Bonnie))))", "all x y.((Bonnie(x) & SchoolEvent(y) & Attends(x,y)) | (-Attends(x,y) & EngagedWith(x,y)) | (-Attends(x,y) & EngagedWith(x,y)))))", "((Attends(Bonnie) & VeryEngagedWithSchoolEvents(Bonnie)) | (-Attends(Bonnie) & VeryEngagedWithSchoolEvents(Bonnie))))", "((Bonnie(Bonnie) & VeryEngagedWithSchoolEvents(Bonnie) & Student(Bonnie)) | (-Bonnie(Bonnie) & VeryEngagedWithSchoolEvents(Bonnie) & Student(Bonnie))))", "all x y.((Bonnie(x) & School(y)) -> ((Attends(x,y) & VeryEngagedWith(x,y) & Student(x,y)) | (-Attends(x,y) & VeryEngagedWith(x,y)) | (-Attends(x,y) & Student(x,y)))))", "all x.(Bonnie(x) -> ((AttendsAndVeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x)) | (-AttendsAndVeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x))))", "(all x.(Bonnie(x) -> (Attends(x) & VeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x))) | (-Attends(x) & VeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x))))", "((Bobby(Bobby) & VeryEngagedWithSchoolEvents(Bobby)) | (-Bobby(Bobby) & VeryEngagedWithSchoolEvents(Bobby)) | (-Bobby(Bobby) & VeryEngagedWithSchoolEvents(Bobby)))))", "(exists x.(Bonnie(x) & Attends(x,y) & VeryEngagedWithSchoolEvents(x) & Student(y)) | (-Attends(x,y) & VeryEngagedWithSchoolEvents(x) & Student(y))))", "(all x.(Bobby(x) -> (AttendsAndVeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x))) | (-AttendsAndVeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x))))", "all x y z.((Bonnie(x) & SchoolEvents(y) & Student(z)) -> ((Attends(x,y) & VeryEngaged(x,y) & AttendsSchool(x,z)) | (-Attends(x,y) & VeryEngaged(x,z) & AttendsSchool(x)))))", "(exists x.(Bonnie(x) & AttendsAndVeryEngagedWithSchoolEvents(x) & StudentAttachable(x)) | (-AttachsAndVeryEngagedWithSchoolEvents(x) & StudentAttachable(x))))", "exists x.(Bonnie(x) & (((Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x))))))", "all x.(Bob(x) -> ((Attends(x) & VeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x))))", "all x.(Bonnie(x) -> ((AttendsAndVeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x)) | (-AttendsAndVeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x))))"]}
{"id": "folio_validation_6", "nl": "Bonnie performs in school talent shows often.", "fol": "PerformInTalentShows(Bonnie)", "prediction": ["all x.(Bonnie(x) -> PerformsInSchoolTalentShows(x))", "all x.((Bonnie(x) & SchoolTalentShow(x)) -> PerformsIn(x,y))", "all x y.((Bonnie(x) & SchoolTalentShow(y)) -> PerformsIn(x,y))", "(PerformsInSchoolTalentShows(Bonnie) & Often(Bonnie,TalentShow))", "all x.(Bonnie(x) -> PerformsInSchoolTalentShows(x))", "all x.(BobbyPerformsInSchoolTalentShows(x) -> Often(x))", "all x y z.((Bonnie(x) & SchoolTalentShow(y) & School(z)) -> PerformsIn(x,y,z))", "all x y.((Bonnie(x) & SchoolTalentShow(y)) -> PerformsIn(x,y))", "all x y.((Bobby(x) & SchoolTalentShow(y)) -> PerformsIn(x,y))", "(PerformsInSchoolTalentShows(Bonnie) & Often(Bonnie,TalentShows))", "all x.((Bonnie(x) & SchoolTalentShow(x)) -> PerformsIn(x,y))", "all x y.((Bonnie(x) & SchoolTalentShow(y)) -> PerformsIn(x,y))", "(PerformsInSchoolTalentShows(Bonnie) & Often(Bonnie))", "all x.(Bonnie(x) -> PerformsInSchoolTalentShows(x))", "all x y.((Bonnie(x) & SchoolTalentShow(y)) -> PerformsIn(x,y))", "exists x.(Boy(x) & PerformsInSchoolTalentShows(x))"]}
{"id": "folio_validation_7", "nl": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.", "fol": "(((((WishesToFurtherAcademicCareer(Bonnie) & -ChaperoneHighSchoolDances(Bonnie)) | (-WishesToFurtherAcademicCareer(Bonnie) & ChaperoneHighSchoolDances(Bonnie))) -> WishesToFurtherAcademicCareer(Bonnie)) & -InactiveCommunityMember(Bonnie)) | (-(((WishesToFurtherAcademicCareer(Bonnie) & -ChaperoneHighSchoolDances(Bonnie)) | (-WishesToFurtherAcademicCareer(Bonnie) & ChaperoneHighSchoolDances(Bonnie))) -> WishesToFurtherAcademicCareer(Bonnie)) & InactiveCommunityMember(Bonnie)))", "prediction": ["all x.((YoungChild(x) | Teenager(x)) & (WantsToFinishAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-WantsToFinishAcademicCareerAndEducationalOpportunities(x) & AttendsSchool(x)) | (-WantsToFinishAcademicCareerAndEducationalOpportunities(x) & DisinterestedMember(x))))", "all x.((Bonnie(x) & (YoungChild(x) | Teenager(x)) & WantsToFinishAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-YoungChild(x) & Teenager(x) & WantsToFinishAcademicCareerAndEducationalOpportunities(x))))", "((YoungChild(Bob) & YoungChild(Bob) & WishesToFinishAcademicCareerAndEducationalOpportunities(Bob)) | (-YoungChild(Bob) & WishesToFinishAcademicCareerAndEducationalOpportunities(Bob))))", "all x.((YoungChild(x) | Teenager(x)) & (WantsToFurtherAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-WantsToFurtherAcademicCareerAndEducationalOpportunities(x) & AttendsSchool(x))))", "all x.(((YoungChild(x) | Teenager(x)) & WantsToFinishAcademicCareerAndEducationalOpportunitiesAndChampsHighSchoolDances(x)) | (-YoungChild(x) & Teenager(x) & WantsToFinishAcademicCareerAndEducationalOpportunities(x)))) -> (Student(x) | DisinterestedMember(x)))", "all x.((Bonnie(x) & ((YoungChild(x) | Teenager(x)) & WantsToFinishAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-YoungChild(x) & Teenager(x) & WantsToFinishAcademicCareerAndEducationalOpportunities(x))))", "all x.(((YoungChild(x) | Teenager(x)) & WantsAcademicCareerAndEducationalOpportunitiesAndChampsHighSchoolDances(x)) | (-YoungChild(x) & Teenager(x) & WantsAcademicCareerAndEducationalOpportunities(x)))) -> (Student(x) & AttendsSchool(x)))", "all x y.(((YoungChild(x) | Teenager(x) & WantsToFinishAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-YoungChild(y) & Teenager(y) & WantsToFinishAcademicCareerAndEducationalOpportunities(y)))) -> (Student(x) | DisinterestedMember(x)))", "all x.((YoungChild(x) | Teenager(x) & WantsToFinishAcademicCareerAndEducationalOpportunitiesAndChampsHighSchoolDances(x)) | (-YoungChild(x) & Teenager(x) & WantsToFinishAcademicCareerAndEducationalOpportunities(x))))", "all x y.((YoungChild(x) | Teenager(x) & WishesToFurtherAcademicCareerAndEducationalOpportunitiesAndChampsHighSchoolDances(x)) | (-YoungChild(y) & WishesToFurtherAcademicCareerAndEducationalOpportunities(y) & AttendsSchool(y))))", "((YoungChild(Bonnie) | Teenager(Bonnie)) & (WantsToFinishAcademicCareerAndEducationalOpportunities(Bonnie) | -WantsToFinishAcademicCareerAndEducationalOpportunities(Bonnie))) -> (StudentAttendsSchool(Bonnie) | DisinterestedMemberOfCommunity(Bonnie)))", "((YoungChild(Boy) & YoungChild(Boy) & -WantsToFinishAcademicCareerAndEducationalOpportunities(Boy) & ChaperonesHighSchoolDances(Boy)) | (-YoungChild(Boy) & WantsFinishAcademicCareerAndEducationalOpportunities(Boy))))", "all x y.(((YoungChild(x) | Teenager(x)) & -(YoungChild(y) & HighSchoolDances(y) & WantsToFinishAcademicCareerAndEducationalOpportunities(y) & ChaperonesHighSchoolDances(y))) -> (Student(x) & AttendsSchool(x) | DisinterestedMemberOfCommunity(x)))", "all x.((YoungChild(x) | Teenager(x) & WantsToFurtherAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-YoungChild(x) & Teenager(x) & WantsToFurtherAcademicCareerAndEducationalOpportunities(x))))", "(all x.((YoungChild(x) | Teenager(x)) & WantsAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-YoungChild(x) & Teenager(x) & WantsAcademicCareerAndEducationalOpportunities(x))))", "all x.((Boy(x) & (YoungChild(x) | Teenager(x)) & WantsToFurtherAcademicCareerAndEducationalOpportunitiesAndChampsHighSchoolDances(x)) | (-YoungChild(x) & Teenager(x) & WantsToFurtherAcademicCareerAndEducationalOpportunities(x))))"]}
{"id": "folio_validation_8", "nl": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.", "fol": "(((ChaperoneHighSchoolDances(Bonnie) & -PerformInTalentShows(Bonnie)) | (-ChaperoneHighSchoolDances(Bonnie) & PerformInTalentShows(Bonnie))) -> (WishesToFurtherAcademicCareer(Bonnie) & InactiveCommunityMember(Bonnie)))", "prediction": ["all x.((CameronesHighSchoolDances(x) | PerformsInSchoolTalentShowsOften(x)) -> (YoungChild(x) | YoungTeenager(x)) & -InactiveAndDisinterestedMemberOfCommunity(x)))", "all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YoungChild(x) | YoungTeenager(x) & WantsToFinishAcademicCareerAndEducationalOpportunities(x) & InactiveAndDisinterestedMemberOfCommunity(x)))", "(all x.((ChaperonesHighSchoolDances(x) | PerformsInSchoolTalentShows(x))) -> (YoungChild(x) | YoungTeenager(x)) & WishesToFinishAcademicCareerAndEducationalOpportunities(x) & InactiveAndDisinterestedMemberOfCommunity(x)))", "all x.((Bonnie(x) & (ChaperonesHighSchoolDances(x) | PerformsInSchoolTalentShowsOften(x))) -> (YoungChild(x) | Teenager(x)) & (WantsToFinishAcademicCareer(x) & WantsToEducate(x) & InactiveAndDisinterestedMemberOfCommunity(x)))", "all x y.((CameronesHighSchoolDances(x) | PerformsInSchoolTalentShowsOfficially(x)) -> ((YoungChild(y) | Teenager(y)) & -InactiveAndDisinterestedMemberOfCommunity(y)))", "all x y.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YoungChild(y) | Teenager(y) & WantsToFinishAcademicCareerAndEducationalOpportunities(y) & InactiveAndDisinterestedMemberOfCommunity(y)))", "((ChaperonesHighSchoolDances(Bob) | PerformsInSchoolTalentShowsOften(Bob)) & YoungChildOrTeenager(Bob) & WantsToFinishAcademicCareerAndEducationalOpportunities(Bob) & InactiveAndDisinterestedMemberOfCommunity(Bob))", "all x.((CameronesHighSchoolDances(x) | PerformsInSchoolTalentShows(x)) -> (YoungChild(x) | YoungTeenager(x)) & -InactiveAndDisinterestedMemberOfCommunity(x)))", "all x.(ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YoungChild(x) | YoungTeenager(x) & WishesToFurtherAcademicCareerAndEducationalOpportunities(x) & InactiveAndDisinterestedMemberOfCommunity(x)))", "(-ChaperonesHighSchoolDances(Bob) | PerformsInSchoolTalentShowsOften(Bob)) -> (YoungChild(Bob) & (FurtherAcademicCareer(Bob) | FurtherEducationalOpportunities(Bob)) & InactiveAndDisinterestedMemberOfCommunity(Bob)))", "all x.((ChamperonesHighSchoolDances(x) | (-ChamperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YoungChild(x) | Teenager(x)) & (WantsToFinishAcademicCareer(x) & WantsEducationalOpportunities(x) & InactiveAndDisinterestedMember(x))))", "all x.((ChambersHighSchoolDances(x) | PerformsInSchoolTalentShowsOften(x)) -> ((YoungChild(x) | Teenager(x)) & -InactiveAndDisinterestedMemberOfCommunity(x)))", "all x y.((CameronesHighSchoolDances(x) | PerformsInSchoolTalentShowsOften(x)) -> (YoungChildOrTeenager(y) & WantsToFinishAcademicCareerAndEducationalOpportunities(y) & InactiveAndDisinterestedMemberOfCommunity(y)))", "(all x.((ChamperonesHighSchoolDances(x) | PerformsInSchoolTalentShowsOften(x))) -> (YoungChild(x) | YoungTeenager(x)) & -InactiveAndDisinterestedMemberOfCommunity(x)))", "all x.((ChamperonesHighSchoolDances(x) | PerformsInSchoolTalentShowsOfficially(x)) -> (YoungChild(x) | YoungTeenager(x)) & WishesToFinishAcademicCareerAndEducationalOpportunities(x) & InactiveAndDisinterestedMemberOfCommunity(x)))", "all x y.((ChamperonesHighSchoolDances(x) | (-ChamperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YoungChild(y) | YoungTeenager(y) & WantsToFinishAcademicCareerAndEducationalOpportunities(y) & InactiveAndDisinterestedMemberOfCommunity(y)))"]}
{"id": "folio_validation_9", "nl": "All employees who schedule a meeting with their customers will appear in the company today. ", "fol": "all x.(SchedulesMeetingWithCustomers(x) -> AppearsInCompanyToday(x))", "prediction": ["all x.((Employee(x) & SchedulesMeeting(x) & Customer(x)) -> AppearsInCompany(x))", "all x y.((Employee(x) & Customer(y) & SchedulesMeeting(x,y)) -> AppearsInCompany(x,y))", "all x.((Employee(x) & SchedulesMeetingWithCustomers(x)) -> AppearsInCompany(x))", "all x.(SchedulesMeetingWithCustomers(x) -> AppearsInCompany(x))", "all x y.((Employee(x) & Customer(y) & SchedulesMeeting(x,y)) -> AppearsInCompany(x,y))", "all x y z.((Employee(x) & Customer(y) & Company(z) & SchedulesMeeting(x,y,z)) -> AppearsIn(x,z))", "all x.((Employee(x) & SchedulesMeeting(x) & Customers(x)) -> AppearsInCompany(x))", "all x.(SchedulesMeetingWithCustomers(x) -> AppearsInCompany(x))", "all x y.((Employee(x) & Customer(y) & SchedulesMeeting(x,y)) -> AppearsInCompany(x))", "all x y.((Employee(x) & SchedulesMeeting(x,y) & Customer(y)) -> AppearsInCompany(x,y))", "all x.((Employee(x) & SchedulesMeetingWithCustomers(x)) -> AppearsInCompany(x))", "all x y.((Employee(x) & Employee(y) & SchedulesMeetingWithCustomers(x,y)) -> AppearsInCompany(x,y))", "all x.(SchedulesMeetingWithCustomers(x) -> AppearsInCompany(x))", "all x.((Employee(x) & SchedulesMeeting(x)) -> AppearsInCompany(x))", "all x y.((Employee(x) & Customer(y) & SchedulesMeeting(x,y)) -> AppearsInCompany(x,y))", "all x.(SchedulesMeetingWithCustomers(x) -> AppearsInCompany(x))"]}
{"id": "folio_validation_10", "nl": "Everyone who has lunch in the company schedules meetings with their customers. ", "fol": "all x.(HasLunchInCompany(x) -> SchedulesMeetings(x))", "prediction": ["all x.((HasLunch(x) & Company(x)) -> SchedulesMeetingsWithCustomers(x))", "all x y.((HasLunch(x) & Company(y)) -> SchedulesMeetingsWithCustomers(x,y))", "all x.((HasLunch(x) & InCompany(x)) -> SchedulesMeetingsWithCustomers(x))", "all x y z.((HasLunch(x) & Company(y) & Customer(z)) -> SchedulesMeetings(x,y,z))", "all x.(HasLunch(x) -> SchedulesMeetingsWithCustomers(x))", "all x y.((HasLunch(x) & Company(y)) -> SchedulesMeetingsWithCustomers(x,y))", "all x.((HasLunch(x) & Company(x)) -> SchedulesMeetingsWithCustomers(x))", "all x y.((HasLunch(x) & Company(y) & InCompany(x,y)) -> SchedulesMeetingsWithCustomers(x))", "all x.((HasLunchInCompany(x)) -> SchedulesMeetingsWithCustomers(x))", "(all x.(HasLunchInCompany(x) -> SchedulesMeetingsWithCustomers(x)))", "all x.(HasLunchInCompany(x) -> SchedulesMeetingsWithCustomers(x))", "all x.((HasLunch(x) & InCompany(x)) -> SchedulesMeetingsWithCustomers(x))", "all x y.((HasLunch(x) & Company(y)) -> SchedulesMeetings(x,y))", "all x.(HasLunch(x) -> SchedulesMeetingsWithCustomers(x))", "(all x.(HasLunchInCompany(x) -> SchedulesMeetingsWithCustomers(x)))", "all x y.((HasLunch(x) & Company(y)) -> SchedulesMeetingsWithCustomers(x,y))"]}
{"id": "folio_validation_11", "nl": "Employees will either have lunch in the company or have lunch at home.", "fol": "all x.(HasLunchInCompany(x) | HasLunchAtHome(x))", "prediction": ["all x.(Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x)))", "all x y.((Employee(x) & Company(y)) -> (HasLunch(x,y) | HasLunch(x,y)))", "(all x.(Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x))))", "(HasLunchInCompany(Employees) | HasLunchAtHome(Employees)))", "all x y.((Employee(x) & Company(y)) -> (HasLunchIn(x,y) | HasLunchAtHome(x,y)))", "all x.(Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x)))", "all x.(Employee(x) -> (HasLunch(x,Company) | HasLunch(x,Home)))", "(all x.(Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x))))", "all x y.((Employee(x) & Company(y)) -> (HasLunch(x,y) | HasLunch(x,y)))", "all x y.((Employee(x) & Company(y)) -> (HasLunchIn(x,y) | HasLunchAtHome(x,y)))", "all x.(Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x)))", "all x.(Employee(x) -> (HasLunch(x,Company) | HasLunch(x,Home)))", "exists x.(Employee(x) & ((HasLunch(x) & InCompany(x)) | HasLunch(x))))", "all x y.((Employee(x) & Company(y)) -> (HasLunch(x,y) | HasLunch(x,y)))", "all x.(Employee(x) -> ((HasLunch(x,Company) | HasLunch(x,Home))))", "all x.(Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x)))"]}
{"id": "folio_validation_12", "nl": "If an employee has lunch at home, then he/she is working remotely from home.", "fol": "all x.(HasLunchAtHome(x) -> WorksRemotelyFromHome(x))", "prediction": ["all x.((Employee(x) & HasLunchAtHome(x)) -> WorkingRemotelyFromHome(x))", "all x.(HasLunchAtHome(x) -> WorkingRemotelyFromHome(x))", "all x.((Employee(x) & LunchAtHome(x)) -> WorkingRemotelyFromHome(x))", "all x.((Employee(x) & HasLunchAtHome(x)) -> WorkingRemotelyFromHome(x))", "all x y.((Employee(x) & HasLunchAtHome(x,y)) -> WorkingRemotelyFromHome(x))", "(all x.(HasLunchAtHome(x) -> WorkingRemotelyFromHome(x)))", "all x y.((Employee(x) & HasLunchAtHome(x)) -> WorkingRemotelyFromHome(x))", "all x y.((Employee(x) & LunchAtHome(x) & Has(x,y)) -> WorkingRemotelyFromHome(x))", "all x.(HasLunchAtHome(x) -> WorkingRemotelyFromHome(x))", "all x y.((Employee(x) & Employee(y) & HasLunchAtHome(x,y)) -> WorkingRemotelyFromHome(y))", "all x.((Employee(x) & HasLunchAtHome(x)) -> WorkingRemotelyFromHome(x))", "all x.((Employee(x) & LunchAtHome(x)) -> WorkingRemotelyFromHome(x))", "all x.(HasLunch(x) -> WorkingRemotelyFromHome(x))", "all x.(HasLunchAtHome(x) -> WorkingRemotelyFromHome(x))", "all x.((Employee(x) & HasLunchAtHome(x)) -> WorkingRemotelyFromHome(x))", "all x.((Employee(x) & LunchAtHome(x)) -> WorkingRemotelyFromHome(x))"]}
{"id": "folio_validation_13", "nl": "All employees who are in other countries work remotely from home. ", "fol": "all x.(IsInOtherCountries(x) -> WorksRemotelyFromHome(x))", "prediction": ["all x.((Employee(x) & InOtherCountries(x)) -> WorksRemotelyFromHome(x))", "all x.((Employee(x) & InOtherCountry(x)) -> WorksRemotelyFromHome(x))", "all x y.((Employee(x) & Country(y)) -> WorkRemotelyFromHome(x,y))", "all x y.((Employee(x) & InOtherCountry(x,y)) -> WorksRemotelyFromHome(x))", "all x.((Employee(x) & InAnotherCountry(x)) -> WorkRemotelyFromHome(x))", "all x y.((Employee(x) & OtherCountry(y) & In(x,y)) -> WorksRemotelyFromHome(x))", "all x y.((Employee(x) & Country(y)) -> WorksRemotelyFromHome(x,y))", "(all x.(InOtherCountry(x)) -> WorksRemotelyFromHome(x))", "all x.((Employee(x) & OtherCountry(x)) -> WorksRemotelyFromHome(x))", "all x.(Employee(x) & InOtherCountriesWorksRemotelyFromHome(x))", "all x.((Employee(x) & InOtherCountries(x)) -> WorksRemotelyFromHome(x))", "all x y.((Employee(x) & Country(y) & In(x,y)) -> WorksRemotelyFromHome(x))", "all x.((Employee(x) & WorkInOtherCountries(x)) -> WorksRemotelyFromHome(x))", "all x.((Employee(x) & InAnotherCountry(x)) -> WorkRemotelyFromHome(x))", "all x.((Employee(x) & OtherCountry(x)) -> WorksRemotelyFromHome(x))", "all x.((Employee(x) & InOtherCountries(x)) -> WorksRemotelyFromHome(x))"]}
{"id": "folio_validation_14", "nl": "No managers work remotely from home. ", "fol": "all x.(IsManager(x) -> -WorksRemotelyFromHome(x))", "prediction": ["-exists x.(Manager(x) & WorksRemotely(x))", "-exists x.(Manager(x) & WorkRemotelyFromHome(x))", "(exists x.(Manager(x) & WorksRemotely(x)))", "all x.(Manager(x) -> -WorksRemotelyFromHome(x))", "-exists x.(Manager(x) & WorksRemotely(x))", "-exists x.(Manager(x) & WorkFromHome(x))", "(exists x.(Manager(x) & WorksRemotely(x)))", "all x.(Manager(x) -> -WorksRemotelyFromHome(x))", "-exists x.(Manager(x) & WorksRemotelyFromHome(x))", "-exists x.(Manager(x) & Work(x) & Remotely(x))", "all x.(Manager(x) -> -WorksRemotelyFromHome(x))", "all x.(Manager(x) -> -WorksRemotelyFromHome(x))", "-exists x.(Manager(x) & WorksFromHome(x))", "-exists x.(Manager(x) & Work(x,Home))", "-exists x.(Manager(x) & Work(x) & RemotelyFromHome(x))", "-exists x.(Manager(x) & WorksFromHome(x))"]}
{"id": "folio_validation_15", "nl": "James is either a manager and appears in the company today or neither a manager nor appears in the company today.", "fol": "((IsManager(James) & -AppearsInCompanyToday(James)) | (-IsManager(James) & AppearsInCompanyToday(James)))", "prediction": ["all x.(James(x) -> ((Manager(x) & AfpearsInCompany(x)) | (-Manager(x) & AfpearsInCompany(x)))))", "(exists x.(Manager(x) & AfpearsInCompany(x)) | -exists y.(Manager(y) & AfpearsInCompany(y))))", "((Manager(James) & AfpearsInCompany(James)) | (-Manager(James) & AfpearsInCompany(James))))", "(all x.(James(x) -> (Manager(x) & AppearsInCompany(x)) | (-Manager(x) & AppearsInCompany(x)))))", "all x y.((James(x) & Company(y)) -> ((Manager(x) & AfpearsIn(x,y)) | (-Manager(x) & AfpearsIn(x,y)))))", "all x.(James(x) -> ((Manager(x) & AppearsInCompany(x)) | -Manager(x) & AppearsInCompany(x))))", "all x y z.((James(x) & Company(y) & Company(z)) -> (Manager(x,y) & AppearsIn(x,y) | -Manager(x,z) & AppearsIn(x,y,z)))", "exists x.(Manager(x) & ((AppearsInCompany(x) & -AppearsInCompany(x)) | (-AppearsInCompany(x) & -AppearsInCompany(x)))))", "exists x.(Manager(x) & (AppearsInCompany(x) | -AppearsInCompany(x)))", "(exists x.(Manager(x) & AppearsInCompany(x)) | -exists y.(Manager(y) & AppearsInCompany(y))))", "all x.((James(x) & Manager(x) & AfpearsInCompany(x)) | (-Manager(x) & AfpearsInCompany(x))))", "((Manager(James) & AfpearsInCompany(James)) | (-Manager(James) & AfpearsInCompany(James))))", "all x.(James(x) -> ((Manager(x) & appearsInCompany(x)) | (-Manager(x) & appearsInCompany(x))))", "(all x.(James(x) -> (Manager(x) & AppearsInCompany(x))) | (-Manager(x) & AppearsInCompany(x))))", "(exists x.(Manager(x) & AfpearsInCompany(x)) | (-Manager(x) & AfpearsInCompany(x))))", "all x.(James(x) -> ((Manager(x) & AfpearsInCompany(x)) | (-Manager(x) & AfpearsInCompany(x))))"]}
{"id": "folio_validation_16", "nl": "James has lunch in the company.", "fol": "HasLunchInCompany(James)", "prediction": ["all x.(James(x) -> HasLunch(x))", "(HasLunch(James,Company) & James(James))", "all x y.((James(x) & Company(y)) -> HasLunch(x,y))", "-HasLunch(James,Company)", "all x.((James(x) & Company(x)) -> HasLunch(x))", "(HasLunch(James) & InCompany(James))", "James hasLunchInCompany(James)", "James has lunch in the company.", "all x.(James(x) -> HasLunchInCompany(x))", "(HasLunch(Jimmy,Company) & James(Jimmy,Company))", "-HasLunch(James,Company)", "James has LunchInCompany(James)", "all x y.((James(x) & Company(y)) -> HasLunch(x,y))", "(HasLunchInCompany(James)", "James has LunchInCompany.", "(HasLunch(Jimmy,Company) & James(Jimmy,Company))"]}
{"id": "folio_validation_17", "nl": "James does not have lunch in the company.", "fol": "-HasLunchInCompany(James)", "prediction": ["all x.((James(x) & -HasLunch(x)) -> -HasLunch(x))", "(-HasLunch(James))", "James -HasLunchInCompany(James)", "all x.((James(x) & Company(x)) -> -HasLunch(x))", "all x.(James(x) -> -HasLunch(x))", "-exists x.(James(x) & Lunch(x))", "James does not have lunch in the company.", "all x y.((James(x) & Company(y)) -> -HasLunch(x,y))", "-HasLunchInCompany(James)", "(-HasLunch(James))", "-exists x.(James(x) & HasLunch(x))", "James does not have lunch in the company.", "(-HasLunch(James,Company))", "(-HasLunch(James) & InCompany(James))", "-exists x.(James(x) & LunchInCompany(x))", "(-HasLunchInCompany(James))"]}
{"id": "folio_validation_18", "nl": "Monkeypox is an infectious disease caused by the monkeypox virus.", "fol": "exists x.(OccursMonkeypoxVirus(x) & ContractMonkeypox(x))", "prediction": ["all x.(Monkeypox(x) -> (InfectiousDisease(x) & CausedByMammalpoxVirus(x)))", "(InfectiousDisease(monkeypox) & CausedByMammalpoxVirus(monkeypox))", "all x y.((Monkeypox(x) & Monkeypox(y)) -> CausedBy(x,y))", "all x.(Monkeypox(x) -> (InfectiousDisease(x) & CausedByMonkeypoxVirus(x)))", "all x.(Monkeypox(x) -> CausedByMammalpoxVirus(x))", "all x.(Mmonkeypox(x) -> (InfectiousDisease(x) & CausedByMunnypoxVirus(x)))", "all x y z.((Monkeypox(x) & Monkeypox(y) & Virus(z)) -> InfectiousDisease(x,y,z))", "(InfectiousDisease(monkeypox) & CausedByMammalpoxVirus(monkeypox))", "all x y.((Monkeypox(x) & MonkeypoxVirus(y)) -> InfectiousDisease(x,y))", "(InfectiousDisease(monkeypox) & CausedByMonkeypoxVirus(monkeypox))", "(InfectiousDiseaseCausedByMonkeypoxVirus(monkeypox))", "all x.(Monkeypox(x) -> (InfectiousDisease(x) & CausedByMammalpoxVirus(x)))", "all x y.((MonkeyPox(x) & MonkeypoxVirus(y)) -> InfectiousDisease(x,y))", "all x.(Monkeypox(x) -> (InfectiousDisease(x) & CausedByMonkeypoxVirus(x)))", "(InfectiousDisease(monkeypox) & CausedByMammalpoxVirus(monkeypox))", "(InfectiousDisease(monkeypox) & CausedByMonkeypoxVirus(monkeypox))"]}
{"id": "folio_validation_19", "nl": "Monkeypox virus can occur in certain animals, including humans.", "fol": "exists x.(IsAnimal(x) & OccursMonkeypoxVirus(x))", "prediction": ["all x y.((MonkeypoxVirus(x) & Animal(y)) -> CanOccur(x,y))", "all x.(MonkeypoxVirus(x) -> (OccursInAnimals(x) & IncludingHumans(x)))", "all x y z.((MonkeypoxVirus(x) & Animal(y) & Animal(z)) -> CanOccur(x,y,z))", "(exists x.(MonkeypoxVirus(x) & Animal(x) & Human(x)) -> CanOccur(x))", "all x y.((MonkeypoxVirus(x) & Animal(y)) -> CanOccurIn(x,y))", "all x.(MonkeypoxVirus(x) -> exists y.(Animal(y) & OccursIn(x,y)))", "(exists x.(MonkeypoxVirus(x) & InAnimals(x)) & exists y.(Human(y) & InAnimals(x,y))))", "exists x.(MunkeypoxVirus(x) & (Animal(x) | Animal(x)))", "all x y z.((MonkeypoxVirus(x) & Animal(y) & Animal(z)) -> CanOccurIn(x,y,z))", "all x.((MonkeypoxVirus(x) & Animal(y)) -> CanOccurIn(x,y))", "all x y.((MonkeypoxVirus(x) & Animal(y)) -> OccursIn(x,y))", "(exists x.(Animal(x) & MonkeypoxVirus(x) & OccursIn(x,humans)))", "all x.(MonkeypoxVirus(x) -> (OccursInAnimals(x) & IncludingHumans(x)))", "all x.(MonkeypoxVirus(x) -> exists y.(Animal(y) & Animal(z) & OccursIn(x,y,z)))", "exists x.(Molecule(x) & (Animal(x) | Animal(x)))", "exists x.(MonkeypoxVirus(x) & (Animal(x) | Animal(x)))"]}
{"id": "folio_validation_20", "nl": "Humans are mammals.", "fol": "all x.(IsHuman(x) -> IsMammal(x))", "prediction": ["all x.(Human(x) -> Mammal(x))", "all x.(Human(x) -> Mammal(x))", "(Mammal(human) & Mammal(human))", "all x y.((Human(x) & Mammal(y)) -> Mammal(x))", "all x.(Human(x) -> Mammal(x))", "(Mammal(human) & Mammal(human))", "all x.(Human(x) -> Mammal(x))", "(Mammal(human) & Mammal(human))", "all x y.(Mammal(x) -> Human(y))", "all x.(Human(x) -> Mammal(x))", "(Mammal(human) & Mammal(human))", "all x.(Human(x) -> Mammal(x))", "all x.(Human(x) -> Mammal(x))", "all x.(Human(x) -> Mammal(x))", "all x.(Human(x) -> Mammal(x))", "all x.(Human(x) -> Mammal(x))"]}
{"id": "folio_validation_21", "nl": "Mammals are animals.", "fol": "all x.(IsMammal(x) -> IsAnimal(x))", "prediction": ["all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> Animal(x))", "(Animal(mammal) & Animal(mammal))", "all x.(Mammal(x) -> Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "exists x.(Mammal(x) & Animal(y) & Animated(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "exists x.(Mammal(x) & Animal(x))"]}
{"id": "folio_validation_22", "nl": "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.", "fol": "exists x.(ContractMonkeypox(x) & (HasFever(x) | HasHeadache(x) | HasMusclePain(x) | FeelsTired(x)))", "prediction": ["all x.((SymptonsOfMonkeypox(x) & Fever(x) & Headache(x) & MusclePains(x) & FeelingTense(x)) -> Monkeypox(x))", "all x.((Sympton(x) & Monkeypox(x)) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTense(x)))", "all x.(Monkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTense(x)))", "all x y.((Sympton(x) & Monkeypox(y)) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTense(x)))", "(all x.(Monkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTense(x))))", "(Fever(Monkeypox) & Headache(Monkeypox) & MusclePains(Monkeypox) & FeelingFat(Monkeypox))", "all x y z.((Sympton(x) & Monkeypox(y) & Fever(z)) -> (HasHeadache(x,z) & MusclePain(x,y) & FeelsFat(x,y)))", "all x.(Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTense(x)))", "all x.((SymptonsOfMonkeypox(x) & Fever(x) & Headache(x) & MusclePains(x) & FeelingFat(x)) -> MonkeypoxSymptons(x))", "all x.(Monkeypox(x) -> (IncludesFever(x) & IncludesHeadache(x) & IncludesMusclePains(x) & FeelsFat(x)))", "(all x.(Monkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | Tired(x))))", "all x y.((Sympton(x) & Monkeypox(y)) -> (Fever(x,y) | Headache(x,y) | MusclePains(x,y) | FeelingTense(x,y)))", "(Fever(Monkeypox) & Headache(Monkeypox) & MusclePain(Monkeypox) & FeelingTense(Monkeypox))", "all x.(MorkeypoxSymptons(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTense(x)))", "(all x.(Monkeypox(x) -> Fever(x)) & (HasHeadache(x) | MusclePains(x) | FeelingTense(x)))", "(all x.(Monkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingFat(x))))"]}
{"id": "folio_validation_23", "nl": "People feel tired when they get a glu.", "fol": "all x.((IsHuman(x) & HasFlu(x)) -> FeelsTired(x))", "prediction": ["all x.((Person(x) & GetsGlu(x)) -> FeelsStorm(x))", "all x y.((Person(x) & Glu(y)) -> FeelsStorm(x,y))", "all x.((Person(x) & GetsGlu(x)) -> FeelsFat(x))", "all x.((Person(x) & Glu(x)) -> FeelsStorm(x))", "all x y.((Person(x) & Glu(y)) -> FeelsFat(x,y))", "all x y z.((Person(x) & Glu(y) & Glu(z) & Gets(x,y,z)) -> FeelsFat(x,y))", "exists x.(Glu(x) & FeelsFeelingStorm(x))", "all x y.((Person(x) & Glu(y)) -> FeelsStorm(x,y))", "all x.((Person(x) & GetsGlu(x)) -> FeelsStorm(x))", "exists x.(Glue(x) & FeelsFeelingStorm(x))", "all x.((Person(x) & GetsGlu(x)) -> Tired(x))", "all x y.((Person(x) & GetsGlu(x,y)) -> FeelsStorm(x))", "all x y.((Person(x) & Glu(y)) -> FeelsFeelingStorm(x,y))", "all x y.((Person(x) & Glu(y)) -> FeelsTense(x,y))", "all x.((Person(x) & HasGlu(x)) -> FeelsFat(x))", "all x.((Person(x) & GetsGlu(x)) -> FeelsTense(x))"]}
{"id": "folio_validation_24", "nl": "There is an animal.", "fol": "exists x.IsAnimal(x)", "prediction": ["exists x.(Animal(x) & Animal(x))", "exists x.(Animal(x) & LivesIn(x))", "exists x.(Animal(x) & Animal(x))", "ExistsAlternate(x)", "ExistsAlter(x) & Animal(x))", "exists x.(Animal(x) & Animal(x))", "exists x.(Animal(x) & LivesIn(x,y))", "exists x.exists y.(Animal(x) & Animal(y))", "exists x.(Animal(x) & -Animal(x))", "ExistsAlternate(x)", "exists x.(Animal(x) & LivesIn(x))", "exists x.(Animal(x) & Animal(x))", "exists x.(Animal(x) & -Animal(x))", "exists x.(Animal(x) & LivesIn(x))", "exists x.(Animal(x) & Animal(x))", "exists x.(Animal(x) & -Animal(x))"]}
{"id": "folio_validation_25", "nl": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.", "fol": "((IsManager(James) | IsInOtherCountries(James)) -> (HasLunchAtHome(James) <-> WorksRemotelyFromHome(James)))", "prediction": ["all x.((Manager(x) | InOtherCountries(x)) -> (HasLunchAtHome(x) | WorksRemotelyFromHome(x)))", "all x.((Manager(x) | Manager(x)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "all x.((James(x) & (Manager(x) | InOtherCountries(x))) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "(all x.((Manager(x) | OtherCountries(x))) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "all x.((Manager(x) | InOtherCountries(x)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "all x y.((Manager(x) | Manager(y)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "((Manager(James) | Manager(James))) -> (HasLunchAtHome(James) & WorksRemotelyFromHome(James)) | (-HasLunchAtHome(James) & WorksRemotelyFromHome(James))))", "(Manger(James) | InOtherCountries(James)))", "(MrsManager(James) & (HasLunchAtHome(James) | WorksRemotelyFromHome(James))) -> (-HasLunchAtHome(James) & -WorksRemotelyFromHome(James)))", "(Manger(James) | InOtherCountries(James)) -> (HasLunchAtHome(James) & WorksRemotelyFromHome(James)) | (-HasLunchAtHome(James) & WorksRemotelyFromHome(James))))", "all x y.((Manager(x) | InOtherCountries(x)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | (-HasLunchAtHome(y) & WorksRemotelyFromHome(y))))", "all x.((James(x) & (Manager(x) | InOtherCountries(x))) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "all x.((Manager(x) | ManagerInOtherCountries(x)) -> (HasLunchAtHome(x) | WorksRemotelyFromHome(x)))", "all x.(Manager(x) | InOtherCountries(x)) -> (HasLunchAtHome(x) | WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "(all x.((James(x) & Manager(x)) | (-James(x) & LunchAtHome(x)) & WorksRemotelyFromHome(x))))", "all x.((James(x) & (Manager(x) | InOtherCountries(x))) -> (HasLunchAtHome(x) | WorksRemotelyFromHome(x)))"]}
{"id": "folio_validation_26", "nl": "No one gets flu.", "fol": "all x.(IsHuman(x) -> -HasFlu(x))", "prediction": ["-exists x.(Flu(x) & -Gives(x,flu))", "all x.(NoOneGetsFlu(x) -> -HasFlu(x))", "all x.(Flu(x) -> -HasFlu(x))", "-exists x.(Flu(x) & Gets(x,y))", "-all x.(Flu(x) -> -HasFlu(x))", "-exists x.(Person(x) & GetsFlu(x))", "all x.(NoneGetsFlu(x) -> -HasFlu(x))", "all x.(NoneHasFlu(x) -> -HasFlu(x))", "-all x.(Flu(x) -> Gets(x,y))", "-exists x.(Flu(x) & -Gives(x,flu))", "all x.(Flu(x) -> -HasFlu(x))", "all x.(NoOneGetsFlu(x))", "-exists x.(Flu(x) & Gets(x,y))", "-all x.(Flu(x) -> -Gives(x,flu))", "-exists x.(Person(x) & GetsFlu(x))", "-exists x.(Flu(x) & Gets(x,Flu))"]}
{"id": "folio_validation_27", "nl": "Symptons of Monkeypox include coughing.", "fol": "exists x.(ContractMonkeypox(x) & Coughing(x))", "prediction": ["all x.((Sympton(x) & Monkeypox(x)) -> IncludesCoughing(x))", "all x y.((Sympton(x) & Monkeypox(y)) -> IncludesCoughing(x,y))", "all x.(Monkeypox(x) -> (IncludesCoughing(x)))", "all x.((Sympton(x) & Monkeypox(x)) -> IncludesCoughing(x))", "all x.(SymptonOfMonkeypox(x) -> IncludesCoughing(x))", "(all x.(MonkeypoxSympton(x) -> Coughing(x)))", "(all x.(Monkeypox(x) -> Coughing(x)))", "all x y.((Sympton(x) & Monkeypox(y)) -> IncludesCoughing(x,y))", "all x.((Sympton(x) & Monkeypox(x)) -> IncludesCoughing(x))", "(all x.(Mokeypox(x) -> Coughing(x)))", "all x.(Monkeypox(x) -> IncludesCoughing(x))", "all x.((Sympton(x) & Monkeypox(x)) -> Coughing(x))", "all x.(MorkeypoxSympton(x) -> IncludesCoughing(x))", "all x y.((Sympton(x) & Monkeypox(y)) -> IncludesCoughing(x,y))", "(all x.(Monkeypox(x) -> Coughing(x)))", "All x y.((Sympton(x) & Monkeypox(y)) -> IncludesCoughing(x,y))"]}
{"id": "folio_validation_28", "nl": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould's wild turkey, Merriam's wild", "fol": "all x.(IsWildTurkey(x) -> (IsEasternWildTurkey(x) | IsOsceolaWildTurkey(x) | IsGouldsWildTurkey(x) | IsMerriamsWildTurkey(x) | IsRioGrandeWildTurkey(x) | IsOcellatedWildTurkey(x)))", "prediction": ["all x.((WildTurkey(x) & WildTurkey(x)) -> (Eastern(x) | Osceola(x) | Gould(x) | Merriam(x)))", "(WildTurkey(x) & (EasternWildTurkey(x) | OsceolaWildTurkey(x))) | (GouldsWildTurkey(x) | MerriamsWildTurkey(x))))", "all x y z.((WildTurkey(x) & EasternWildTurkey(y) & OsceolaWildTurkey(z)) -> (WildTurkey(x,y) & WildTurkey(x,z) & WildTurkey(x,z) & WildTurkey(x,z) & WildTurkey(x,z) & WildTurkey(x,z) & WildTurkey(x,z)))", "(WildTurkey(x) -> (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x)))", "all x.(WildTurkey(x) -> (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x)))", "exists x.(WildTurkey(x) & ((EasternWildTurkey(x) & OsceolaWildTurkey(x)) | (GouldsWildTurkey(x) & MerriamsWildTurkey(x))))", "(SixWildTurkeys(x) & (EasternWildTurkey(x) | OsceolaWildTurkey(x)) | (GouldsWildTurkey(x) | MerriamsWildTurkey(x))))", "all x y.((WildTurkey(x) & EasternWildTurkey(y) & OsceolaWildTurkey(y)) -> (WildTurkey(x,y) & WildTurkey(x,y) & WildTurkey(x,y) & WildTurkey(x,y) & MerriamsWildTurkey(x,y)))", "exists x.(WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & MerriamsTurkey(x))", "all x y z.((WildTurkey(x) & EasternWildTurkey(y) & OsceolaWildTurkey(z) & GouldsWildTurkey(z)) -> (WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & Merriams(x)))", "(exists x.(WildTurkey(x) & WildTurkey(x)) & (Eastern(x) | Osceola(x)) | Gould(x) | Merriam(x)))", "all x y z.((WildTurkey(x) & WildTurkey(y) & WildTurkey(z)) -> (Eastern(x,y) | Osceola(y) | Gould(z,y) | Merriam(z,y)))", "(WildTurkey(x) & (EasternWildTurkey(x) | OsceolaWildTurkey(x))) & (GouldsWildTurkey(x) | MerriamsWildTurkey(x)))", "(WildTurkey(x) -> (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x)))", "exists x.(WildTurkey(x) & ((EasternWildTurkey(x) & OsceolaWildTurkey(x)) | (GouldsWildTurkey(x) & MerriamsWildTurkey(x))))", "exists x.(WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & MerriamsTurkey(x))"]}
{"id": "folio_validation_29", "nl": "turkey, Rio Grande wild turkey, and Ocellated wild turkey.", "fol": "-(IsWildTurkey(Tom) & IsEasternWildTurkey(Tom))", "prediction": ["(all x.(Rio GrandeWildTurkey(x) -> WildTurkey(x)) & all y.(OcellatedWildTurkey(y) -> WildTurkey(y)))", "(all x.(RioGrand(x) -> WildTurkey(x)) & all y.(Ocellated(y) -> WildTurkey(y)))", "all x y z.((Rio Grande(x) & WildTurkey(y) & Ocellated(z)) -> (Turkey(z) | Turkey(y) & WildTurkey(z)))", "(all x.((Rio Grande(x) & Wild(x)) -> Wild(x)) & all y.((Rio Grande(y) & Wild(y)) -> Ocellated(y)))", "all x.((RioGrand(x) & WildTurkey(x) & Ocellated(x)) -> Turkey(x))", "(all x y.((Rio Grande(x) & Wild(y)) -> Turkey(x)) & ((Rio Grande(y) & Wild(y)) | (Ocellated(y) & Wild(y))))", "all x.((Turkey(x) & RioGrand(x) & WildTurkey(x) & Ocellated(x)) -> (RioGrand(x) & WildTurkey(x)))", "(all x y z.((Rio Grande(x) & Wild(y)) -> Turkey(z)) & ((Rio Grande(z) & Wild(z)) | (Ocellated(z) & Wild(z)))))", "(Rio GrandeWildTurkey(Rio GrandeWildTurkey(Rio GrandeWildTurkey) & OcellatedWildTurkey(Rio GrandeWildTurkey))", "all x y z.((Rio Grande(x) & WildTurkey(y) & Ocellated(z)) -> (RioGrand(x) & WildTurkey(y)))", "all x.(Turkey(x) -> (RioGrand(x) & Wild(x) & Ocellated(x)))", "all x y.((Rio Grande(x) & WildTurkey(y)) -> (Ocellated(x) | Ocellated(y)))", "exists x.(RioGrand(x) & WildTurkey(x) & Ocellated(x))", "(all x.(Rio GrandeWildTurkey(x) -> WildTurkey(x)) & all y.(OcellatedWildTurkey(y) -> WildTurkey(y)))", "(all x.((Rio Grande(x) & Wild(x)) -> Wild(x)) & all y.((Rio Grande(y) & Ocellated(y)) -> Wild(y)))", "all x.((Turkey(x) & RioGrand(x) & WildTurkey(x) & Ocellated(x)) -> (RioGrand(x) & WildTurkey(x)))"]}
{"id": "folio_validation_30", "nl": "Tom is not an Eastern wild turkey.", "fol": "-(IsWildTurkey(Tom) & IsOsceolaWildTurkey(Tom))", "prediction": ["(-EasternWildTurkey(Tom))", "Tom is not EasternWildTurkey(Tom)", "all x.(Tom(x) -> -EasternWildTurkey(x))", "-(EasternWildTurkey(Tom))", "Tom & -EasternWildTurkey(Tom)", "(-EasterlyWildTurkey(Tom))", "Tom is not EasternWildTurkey(Tom)", "-(EasternWildTurkey(Tom) & -EasternWildTurkey(Tom))", "(EasternWildTurkey(Tom) & -EasternWildTurkey(Tom))", "Tom -EasternWildTurkey(Tom)", "Tom is not EasternWildTurkey(Tom)", "(-EasternWildTurkey(Tom))", "(EasternWildTurkey(Tom) & -Easterly(Tom))", "-EasterlyWildTurkey(Tom)", "-(EasterlyWildTurkey(Tom))", "Tom is not EasternWildTurkey(Tom)"]}
{"id": "folio_validation_31", "nl": "Tom is not an Osceola wild turkey.", "fol": "(IsWildTurkey(Tom) -> -(IsGouldsWildTurkey(Tom) | IsMerriamsWildTurkey(Tom) | IsRioGrandeWildTurkey(Tom)))", "prediction": ["(-OsceolaWildTurkey(Tom))", "Tom is not OsceolawildTurkey(Tom)", "all x.((Tom(x) & -OsceolaWildTurkey(x)) -> -OsceolaWildTurkey(x))", "all x.(Tom(x) -> -OsceolaWildTurkey(x))", "-WildTurkey(Tom)", "Tom is not OsceolaWildTurkey(Tom)", "Tom is not a OsceolaWildTurkey(Tom)", "(-WildTurkey(Tom) & Osceola(Tom))", "Tom is not an OsceolaWildTurkey(Tom)", "(-OsceolaWildTurkey(Tom))", "Tom -OsceolaWildTurkey(Tom))", "Tom is not OsceolawildTurkey(Tom)", "-(OsceolaWildTurkey(Tom))", "(-OsceolaWildTurkey(Tom))", "-WildTurkey(Tom)", "-(OsceolaWildTurkey(Tom))"]}
{"id": "folio_validation_32", "nl": "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.", "fol": "IsWildTurkey(Tom)", "prediction": ["all x.(Tom(x) -> (-GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x)))", "(-(GouldsWildTurkey(Tom) | MerriamsWildTurkey(Tom)) | RioGrandwildTurkey(Tom)))", "(-GouldsWildTurkey(Tom) | MerriamsWildTurkey(Tom) | RioGrandwildTurkey(Tom)))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x))) -> -(GouldsWildTurkey(x) | MerriamsWildTurkey(x)))", "(-GouldsWildTurkey(Tom) & -MerriamsWildTurkey(Tom)) & -RioGrand(Tom))", "(-(GouldsWildTurkey(Tom) & -MerriamsWildTurkey(Tom)) | (RioGrandiaWildTurkey(Tom))))", "-(Tom(Tom) & -GouldsWildTurkey(Tom) & -MerriamsWildTurkey(Tom) & -RioGrand(Tom))", "all x.(Tom(x) -> -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x)))", "all x.(Tom(x) -> (-GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x)))", "(-(GouldsWildTurkey(Tom) | MerriamsWildTurkey(Tom)) | RioGrandwildTurkey(Tom)))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x))) -> -(GouldsWildTurkey(x) | MerriamsWildTurkey(x)))", "(-GouldsWildTurkey(Tom) | MerriamsWildTurkey(Tom) | RioGrandinWildTurkey(Tom)))", "(-GouldsWildTurkey(Tom) & -MerriamsWildTurkey(Tom)) & -Rio GrandeWildTurkey(Tom))", "-(GouldsWildTurkey(Tom) | MerriamsWildTurkey(Tom) | RioGrandwildTurkey(Tom)))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x))) -> -GouldsWildTurkey(x))", "all x.(Tom(x) -> (-GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x)))"]}
{"id": "folio_validation_33", "nl": "Tom is an Ocellated wild turkey.", "fol": "IsOcellatedWildTurkey(Tom)", "prediction": ["Tom is OcellatedWildTurkey(Tom)", "all x.((Tom(x) & OcellatedWildTurkey(x)) -> Ocellated(x))", "(OcellatedWildTurkey(Tom) & Ocellated(Tom))", "All x.(Tom(x) -> OcellatedWildTurkey(x))", "Tom is OcellatedWildTurkey(Tom)", "Tom is a OcellatedWildTurkey(Tom)", "Tom is OcellatedWildTurkey(Tom)", "(OcellatedWildTurkey(Tom) & Ocellated(Tom))", "all x.((Tom(x) & OcellatedWildTurkey(x)) -> Ocellated(x))", "All x.(Tom(x) -> OcellatedWildTurkey(x))", "Tom is OcellatedWildTurkey(Tom)", "(OcellatedWildTurkey(Tom) & Ocellated(Tom))", "all x.((Tom(x) & OcellatedWildTurkey(x)) -> Ocellated(x))", "Tom is OcellatedWildTurkey(Tom)", "(OcellatedWildTurkey(Tom)", "Tom is OcellatedWildTurkey(Tom)"]}
{"id": "folio_validation_34", "nl": "Tom is an Eastern wild turkey.", "fol": "IsEasternWildTurkey(Tom)", "prediction": ["Tom is EasternWildTurkey(Tom)", "all x.(Tom(x) -> EasternWildTurkey(x))", "(EasternWildTurkey(Tom)", "all x.((Tom(x) & EasternWildTurkey(x)) -> WildTurkey(x))", "Tom is EasternWildTurkey(Tom)", "Tom is a EasternWildTurkey(Tom)", "All x.(Tom(x) -> EasternWildTurkey(x))", "(EasternWildTurkey(Tom)", "Tom (EasternWildTurkey(Tom))", "Tom is EasternWildTurkey(Tom)", "(EasternWildTurkey(Tom)", "Tom is EasternWildTurkey(Tom)", "(EasternWildTurkey(Tom)", "(EasterlyWildTurkey(Tom)", "Tom is EasternWildTurkey(Tom)", "Tom is EasternWildTurkey(tom)"]}
{"id": "folio_validation_35", "nl": "Joey is a wild turkey.", "fol": "IsWildTurkey(Joey)", "prediction": ["all x.(Joey(x) -> WildTurkey(x))", "(WildTurkey(Joey) & Wild(Joey))", "(WildTurkey(Joey) & -WildTurkey(Joey))", "-WildTurkey(Joey)", "all x.(Joey(x) -> WildTurkey(x))", "all x.((Joey(x) & WildTurkey(x)) -> WildTurkey(x))", "all x.(Joey(x) -> WildTurkey(x))", "(WildTurkey(Joey)", "Joey is WildTurkey(joey,x)", "all x.(Joey(x) -> WildTurkey(x))", "(WildTurkey(Joey)", "all x.(Joey(x) -> WildTurkey(x))", "(WildTurkey(Joey)", "All x.(Joey(x) -> WildTurkey(x))", "(WildTurkey(Joey)", "All x.(Joey(x) -> WildTurkey(x))"]}
{"id": "folio_validation_36", "nl": "A Japanese game company created the game the Legend of Zelda.", "fol": "exists x.(IsJapanese(x) & IsVideoGameCompany(x) & IsGame(Thelegendofzelda) & CreatedGame(x,Thelegendofzelda))", "prediction": ["all x y.((JapaneseGameCompany(x) & LegendOfZelda(y)) -> CreatedBy(x,y))", "all x.(JapaneseGameCompany(x) -> CreatesGame(x,LegendOfZelda))", "all x.((JapaneseGameCompany(x) & LegendOfZelda(x)) -> CreatedBy(x,y))", "all x y z.((JapaneseGameCompany(x) & LegendOfZelda(y) & Game(z)) -> CreatedBy(x,y,z))", "(JapaneseGameCompany(JapaneseGameCompany) & CreatedGame(JapaneseGameCompany,LegendOfZelda))", "(JapaneseGameCompany(Japanese) & CreatedGame(Japanese) & LegendOfZelda(Japanese))", "all x y.((JapaneseGameCompany(x) & LegendOfZelda(y)) -> CreatedBy(x,y))", "all x.((JapaneseGameCompany(x) & LegendOfZelda(x)) -> CreatedBy(x,y))", "all x.(JapaneseGameCompany(x) -> CreatedGame(x))", "all x y z.((JapaneseGameCompany(x) & LegendOfZelda(y) & Game(z)) -> CreatedBy(x,y,z))", "exists x.(JapaneseGameCompany(x) & CreatesGame(x,LegendOfZelda))", "all x y.((JapaneseGameCompany(x) & LegendOfZelda(y)) -> CreatedBy(x,y))", "all x y.((JapaneseGameCompany(x) & Game(y)) -> Created(x,y))", "All x y z.((JapaneseGameCompany(x) & LegendOfZelda(y) & Game(z)) -> CreatedBy(x,y,z))", "exists x.(JapaneseGameCompany(x) & CreatesGame(x,LegendOfZelda))", "exists x.(JapaneseGameCompany(x) & CreatedGame(x) & LegendOfZelda(x))"]}
{"id": "folio_validation_37", "nl": "All games in the Top 10 list are made by Japanese game companies.", "fol": "all x y.((IsGame(x) & IsInTop10List(x) & CreatedGame(x,y)) -> IsJapanese(y))", "prediction": ["all x.(Top10(x) -> MadeByJapaneseGameCompanies(x))", "all x.(Top10List(x) -> MadeByJapaneseGameCompanies(x))", "all x.((Game(x) & Top10List(x)) -> MadeByJapaneseGameCompanies(x))", "all x y.((Game(x) & Top10List(y)) -> MadeByJapaneseGameCompanies(x,y))", "(all x.(Top10Game(x) -> MadeByJapaneseGameCompany(x)))", "all x.((Game(x) & Top10List(x)) -> MadeByJapaneseGameCompany(x))", "all x.(Top10List(x) -> MadeByJapaneseGameCompanies(x))", "all x y.((Game(x) & Top10List(y)) -> MadeBy(x,y))", "all x y.((Game(x) & Top10(y)) -> MadeByJapaneseGameCompany(x,y))", "(all x.(Top10List(x) -> MadeByJapaneseGameCompanies(x)))", "(All x.(Top10(x) -> JapaneseGameCompany(x)))", "all x.(Top10List(x) -> MadeByJapaneseGameCompanies(x))", "all x.((Game(x) & Top10List(x)) -> MadeByJapaneseGameCompanies(x))", "all x y.((Game(x) & Top10List(y)) -> MadeByJapaneseGameCompany(x,y))", "(all x.(Top10(x) -> MadeByJapaneseGameCompany(x))", "all x.(TopTenList(x) -> MadeByJapaneseGameCompanies(x))"]}
{"id": "folio_validation_38", "nl": "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.", "fol": "all x.((IsGame(x) & SellsMoreThanCopies(x,Onemillioncopies)) -> IsTop10Game(x))", "prediction": ["all x.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> Top10List(x))", "(SellsMoreThanOneMillionCopies(Game) -> Top10List(Game))", "[BG] -> (SellsMoreThanOneMillionCopies(x) & Top10List(x)))", "all x.(SellsMoreThanOneMillionCopies(x) -> Top10List(x))", "all x y.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> Top10List(y))", "[BG]  (SellsMoreThanOneMillionCopies(x) & Top10List(x)))", "all x.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> Top10List(x))", "(SellsMoreThanOneMillionCopies(Game) -> Top10List(Game))", "all x.(SellsMoreThan(x,y) -> Top10List(y))", "[BG] -> (SellsMoreThanOneMillionCopies(x) & Top10List(x)))", "all x.((Game(x) & SellsMoreThan(x,y) & MillionCopies(y)) -> Top10List(x))", "[BG] - (SellsMoreThanOneMillionCopies(Game) & Top10List(Game)))", "all x.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> Top10List(x))", "(SellsMoreThanOneMillionCopies(Game) -> Top10List(Game))", "all x.(SellsMoreThanOneMillionCopies(x) -> Top10List(x))", "all x.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> SelectedIntoTop10List(x))"]}
{"id": "folio_validation_39", "nl": "The Legend of Zelda sold more than one million copies.", "fol": "SellsMoreThanCopies(Thelegendofzelda,Onemillioncopies)", "prediction": ["All x.(LegendOfZelda(x) -> SoldMoreThanOneMillionCopies(x))", "The LegendOfZeldaSoldMoreThanOneMillionCopies(LetterOfZelda)", "LegendOfZeldaSoldMoreThanOneMillionCopies(LetterOfZelda)", "(SoldMoreThanOneMillionCopies(LegendOfZelda))", "The LegendOfZelda(x) soldMoreThanOneMillionCopies(x))", "LegendOfZelda(x) & SoldMoreThanOneMillionCopies(x))", "All x.(LegendOfZelda(x) -> SoldMoreThanOneMillionCopies(x))", "The LegendOfZeldaSoldMoreThanOneMillionCopies(x)", "(SoldMoreThanOneMillionCopies(LegionOfZelda))", "LegendOfZeldaSoldMoreThanOneMillionCopies(x)", "The LegendOfZelda(x) soldMoreThanOneMillionCopies(x))", "The LegendOfZelda(x) & SoldMoreThanOneMillionCopies(x))", "All x.(LegendOfZelda(x) -> SoldMoreThanOneMillionCopies(x))", "The LegendOfZeldaSoldMoreThanOneMillionCopies(LossOfZelda)", "(SoldMoreThanOneMillionCopies(LegendOfZelda))", "Die LegendOfZelda(x) soldMoreThanOneMillionCopies(x))"]}
{"id": "folio_validation_40", "nl": "The Legend of Zelda is in the Top 10 list.", "fol": "IsTop10Game(Thelegendofzelda)", "prediction": ["The LegendOfZelda(x) -> Top10List(x))", "(Top10List(LegendOfZelda) & InTop10List(LegendOfZelda))", "LegendOfZelda(x) -> Top10List(x))", "All x.(LegendOfZelda(x) -> Top10List(x))", "The LegendOfZelda(x) -> Top10List(x))", "(InTop10List(LegendOfZelda) & InTop10List(LegendOfZelda))", "LegendOfZeldaInTop10List(x)", "The LegendOfZelda is in Top10List(x)", "All x.(LegendOfZelda(x) -> Top10List(x))", "(Top10List(LegionOfZelda))", "(Top10List(LegionOfZelda) & Top10List(LegionOfZelda))", "The LegendOfZelda (Top10List)", "The LegendOfZeldaInTop10List(x)", "The LegendOfZelda(x) -> Top10List(x))", "All x.(LegendOfZelda(x) -> Top10List(x))", "Die LegendOfZelda(x) -> Top10List(x))"]}
{"id": "folio_validation_41", "nl": "FIFA 22 is made by a Japanese video game company.", "fol": "all x.((CreatedGame(Fifa22,x) -> IsJapanese(x)) & IsVideoGameCompany(x))", "prediction": ["all x.(FoxFox22(x) -> MadeByJapaneseVideoGameCompany(x))", "all x y.((Football(x) & JapaneseVideoGameCompany(y)) -> MadeBy(x,y))", "(JapaneseVideoGameCompany(Football22) & MadeBy(Football22))", "(MadeByJapaneseVideoGameCompany(FoxFox22))", "all x.((FoxFox22(x) & MadeByJapaneseVideoGameCompany(x)) -> MadeBy(x,FoxFox22))", "all x y z.((Football(x) & VideoGameCompany(y) & Japanese(z)) -> MadeBy(x,y,z))", "all x.((Football(x) & JapaneseVideoGameCompany(x)) -> MadeBy(x,Football22))", "(JapaneseVideoGameCompany(Favorite22) & MadeBy(Favorite22))", "all x.(FoxFox22(x) -> MadeByJapaneseVideoGameCompany(x))", "all x.(FoxFame(x) -> MadeByJapaneseVideoGameCompany(x))", "all x y.((FoxFoxFamous(x) & JapaneseVideoGameCompany(y)) -> MadeBy(x,y))", "all x y.((Football(x) & JapaneseVideoGameCompany(y)) -> MadeBy(x,y))", "all x y.((FishFootball(x) & JapaneseVideoGameCompany(y)) -> MadeBy(x,y))", "all x y z.((FoxFoxFamous(x) & VideoGameCompany(y) & Japanese(z)) -> MadeBy(x,y,z))", "exists x.(Football(x) & JapaneseVideoGameCompany(x))", "exists x.(Foxball(x) & MadeBy(x,JapaneseVideoGameCompany))"]}
{"id": "folio_validation_42", "nl": "The Legend of Zelda is not in the Top 10 list.", "fol": "-IsTop10Game(Thelegendofzelda)", "prediction": ["The LegendOfZelda - Top10List(x)", "(-Top10List(LegendOfZelda))", "(LegionOfZelda(x) & -Top10List(x))", "(-Top10(LegendOfZelda))", "-TopTenList(LegendOfZelda)", "The LegendOfZelda(x) - Top10List(x))", "-(LegendOfZelda(x) & Top10List(x))", "LegendOfZelda - Top10List(x)", "The LegendOfZelda - Top10List(x)", "(LegionOfZelda(x) & -Top10(x))", "-TopTenList(LegionOfZelda)", "(-Top10List(LegendOfZelda))", "Die LegendOfZelda(x) - Top10List(x))", "The LegendOfZelda -Top10List(z)", "The LegendOfZelda is notInTop10List(x)", "Die LegendOfZelda(x) -Top10List(x))"]}
{"id": "folio_validation_43", "nl": "All squares have four sides.", "fol": "all x.(IsSquare(x) -> HasFourSides(x))", "prediction": ["all x.(Square(x) -> HasFourSides(x))", "(AllSquaresHasFourSides(square)", "all x.(Square(x) -> HasFourSides(x))", "(all x.(Square(x) -> HasFourSides(x))", "All x y.((Square(x) & Side(y)) -> HasFour(x,y))", "(AllSquaresHasFourSides(square)", "all x.(Square(x) -> HasFourSides(x))", "all x.(Square(x) -> HasFourSides(x))", "all x.(Square(x) -> HasFourSides(x))", "all x.(Square(x) -> FourSides(x))", "all x.(Square(x) -> HasFourSides(x))", "all x.(Square(x) -> HasFourSides(x))", "all x.(Square(x) -> HasFourSides(x))", "all x.(Square(x) -> FourSides(x))", "all x.(Square(x) -> HasFourSides(x))", "all x.(Square(x) -> HasFourSides(x))"]}
{"id": "folio_validation_44", "nl": "All four-sided things are shapes. ", "fol": "all x.(HasFourSides(x) -> IsShape(x))", "prediction": ["all x.(FourSidedThing(x) -> Shape(x))", "all x.(FourSided(x) -> Shape(x))", "All fourSidedThings(x) -> Shape(x))", "all x.((FourSidedThing(x) & Shape(x)) -> Shape(x))", "all x.(FourSidedThing(x) -> Shape(x))", "all x y.((FourSidedThing(x) & Shape(y)) -> Shape(x))", "all x.(FourSided(x) -> Shape(x))", "(all x.(FourSidedThing(x) -> Shape(x))", "all x.((FourSidedThing(x) & Shape(x)) -> Shape(x))", "all x.((FourSided(x) & Shape(x)) -> Shape(x))", "(all x.(FourSided(x) -> Shape(x))", "all x.(FourSidedThing(x) -> Shape(x))", "all x.(FourSided(x) -> Shape(x))", "all x.(FourSides(x) -> Shape(x))", "all x.(FourSidedThing(x) -> Shape(x))", "all x.(FourSided(x) -> Shape(x))"]}
{"id": "folio_validation_45", "nl": "All squares are shapes.", "fol": "all x.(IsSquare(x) -> IsShape(x))", "prediction": ["all x.(Square(x) -> Shape(x))", "all x.(Square(x) -> Shape(x))", "(all x.(Square(x) -> Shape(x)))", "All x y.((Square(x) & Shape(y)) -> Shape(x))", "all x.(Square(x) -> Shape(x))", "(all x.(Square(x) -> Shape(x))", "all x.(Square(x) -> Shape(x))", "all x.(Square(x) -> Shape(x))", "all x.(Square(x) -> Shape(x))", "all x.(Square(x) -> Shape(x))", "all x.(Square(x) -> Shape(x))", "all x.(Square(x) -> Shape(x))", "all x.(Square(x) -> Shape(x))", "all x.(Square(x) -> Shape(x))", "all x.(Shaped(x) -> Shape(x))", "all x.(Square(x) -> Shape(x))"]}
{"id": "folio_validation_46", "nl": "All rabbits are cute. ", "fol": "all x.(IsRabbit(x) -> IsCute(x))", "prediction": ["all x.(Rabbit(x) -> Cute(x))", "all x.(Rabbit(x) -> Cute(x))", "(all x.(Rabbit(x) -> Cute(x)))", "(Cute(rabbit) & AllOf(rabbit))", "(CrazyRabbit(r) & AllOfRabbit(r))", "all x.(Rabbit(x) -> Cute(x))", "(all x.(Rabbit(x) -> Cute(x))", "all x.(Rabbit(x) -> Cute(x))", "all x.(Bat(x) -> Cute(x))", "all x.(Rabbit(x) -> Cute(x))", "all x.(Rabbit(x) -> Cute(x))", "all x.(Bat(x) -> Cute(x))", "all x.(Rabbit(x) -> Cute(x))", "all x.(Rabbit(x) -> Cute(x))", "all x.(Rabbit(x) -> Cute(x))", "all x.(Rabbit(x) -> Cute(x))"]}
{"id": "folio_validation_47", "nl": "Some turtles exist. ", "fol": "exists x.IsTurtle(x)", "prediction": ["exists x.(Turtle(x) & Turtle(x))", "exists x.(Turtle(x) & Turtle(x))", "exists x.(Turtle(x) & Turtle(y))", "exists x.(Turtle(x) & Exists(x))", "exists x.(Turtle(x) & Turtle(y) & Exists(x,y))", "exists x.(Turtle(x) & Turtle(x))", "exists x.(Turtle(x) & Turtle(y) & LocatedIn(x,y))", "exists x y.(Turtle(x) & Turtle(y))", "exists x.(Turtle(x) & LivesIn(x))", "exists x.(Tree(x) & Turtle(x))", "exists x.(Turtle(x) & Exists(x))", "exists x.(Turtle(x) & Turtle(x))", "exists x.(Turtle(x) & Turtle(x))", "exists x.(Turtle(x) & LivesIn(x))", "exists x.(Turtle(x) & Turtle(y) & LivesIn(x,y))", "exists x.(Turtle(x) & Exists(x))"]}
{"id": "folio_validation_48", "nl": "An animal is either a rabbit or a squirrel.", "fol": "all x.(IsRabbit(x) | IsSquirrel(x))", "prediction": ["all x.(Animal(x) -> (Rabbit(x) | Squirrel(x)))", "all x.(Animal(x) -> (Rabbit(x) | Squirrel(x)))", "all x.(Animal(x) -> (Rabbit(x) | Squirrel(x)))", "all x y.(Animal(x) -> (Rabbit(x) | Squirrel(x)))", "exists x.(Animal(x) & ((Rabbit(x) & -Squirrel(x)) | (-Rabbit(x) & Squirrel(x)))))", "all x.(Animal(x) -> (Rabbit(x) | Squirrel(x)))", "all x y.(Animal(x) -> (Rabbit(x) | Squirrel(y)))", "all x.(Animal(x) -> (Rabbit(x) | Squirrel(x)))", "exists x.(Animal(x) & (Bat(x) | Squirrel(x)))", "all x.(Animal(x) -> (Rabbit(x) | Squirrel(x)))", "all x y.(Animal(x) -> (Rabbit(x) | Squirrel(x)))", "exists x.(Animal(x) & Rabbit(x) | Squirrel(x))", "all x.(Animal(x) -> (Rabbit(x) | Squirrel(x)))", "all x.(Animal(x) -> (Rabbit(x) | Squirrel(x)))", "exists x.(Animal(x) & Rabbit(x) & Squirrel(x))", "all x.(Animal(x) -> (Rabbit(x) | Squirrel(x)))"]}
{"id": "folio_validation_49", "nl": "If something is skittish, then it is not still.", "fol": "all x.(IsSkittish(x) -> -IsStill(x))", "prediction": ["all x.(Skittish(x) -> -Still(x))", "(Skittish(x) -> -Still(x))", "all x.((Skittish(x) & -Still(x)) -> Skittish(x))", "all x.(Skittish(x) -> -Still(x))", "all x.((Skittish(x) & -Still(x)) -> -Still(x))", "all x.(Skittish(x) -> -Still(x))", "all x y.((Skittish(x) & Skittish(y)) -> -Still(x))", "all x.((Skittish(x) & -Still(x)) -> Skittish(x))", "exists x.(Sketchish(x) -> -Still(x))", "all x.(Skittish(x) -> -Still(x))", "exists x.(Skillet(x) -> -Still(x))", "all x.((Skittish(x) & -Still(x)) -> -Still(x))", "all x.((Skittish(x)) -> -Still(x))", "all x.(Skittish(x) -> -Still(x))", "exists x.(Sticky(x) -> -Still(x))", "all x.(Skittish(x) -> -Still(x))"]}
{"id": "folio_validation_50", "nl": "All squirrels are skittish.", "fol": "all x.(IsSquirrel(x) -> IsSkittish(x))", "prediction": ["all x.(Squirrel(x) -> Skittish(x))", "(Squirrel(s) & Skittish(s))", "all x.(Squirrel(x) -> Skittish(x))", "(all x.(Squirrel(x) -> Skittish(x)))", "all x y.((Squirrel(x) & Squirrel(y)) -> Skittish(x))", "(Squirrel(s) & Skittish(s))", "all x.(Squirrel(x) -> Skittish(x))", "all x.(Spider(x) -> Skittish(x))", "all x.(Squirrel(x) -> Skittish(x))", "all x.(Spider(x) -> Skittish(x))", "all x.(Squirrel(x) -> Skittish(x))", "all x.(Spider(x) -> Skittish(x))", "all x.(Squirrel(x) -> Skittish(x))", "all x.(Squirrel(x) -> Skittish(x))", "all x.(Squirrel(x) -> Skittish(x))", "all x.(Squirrel(x) -> Skittish(x))"]}
{"id": "folio_validation_51", "nl": "Rock is still.", "fol": "IsStill(Rock)", "prediction": ["Rock is still.", "all x.(Rock(x) -> Still(x))", "(Rock(Rock) & Still(Rock))", "Rock is Still(Rock)", "Rock is still.", "-RockIsStill(rock,y)", "(Rock(Rock) & Still(Rock))", "all x.(Rock(x) -> Still(x))", "rock(rock) & Still(rock)", "RockIsStill(Rock)", "Rock is Still(Rock)", "All x.(Rock(x) -> Still(x))", "Rock is still.", "Rock is Still(Rock)", "Rock is Still(rock,rock)", "Rock is still."]}
{"id": "folio_validation_52", "nl": "Rock is a turtle.", "fol": "IsTurtle(Rock)", "prediction": ["all x.(Rock(x) -> Turtle(x))", "(Turtle(Rock))", "Rock is turtle.", "Rock is Turtle(Rock)", "(Turtle(Rock) & Turtle(Rock))", "All x.(Rock(x) -> Turtle(x))", "Rock is turtle.", "Rock is Turtle(Rock)", "Rock is a Turtle(Rock)", "all x.(Rock(x) -> Turtle(x))", "(Turtle(Rock)", "All x.(Rock(x) -> Turtle(x))", "Rock is turtle(rock)", "(Turtle(Rock)", "all x.(Rock(x) -> Turtle(x))", "All x.(Rock(x) -> Turtle(x))"]}
{"id": "folio_validation_53", "nl": "Rock is not a turtle.", "fol": "-IsTurtle(Rock)", "prediction": ["-Turtle(Rock)", "all x.(Rock(x) -> -Turtle(x))", "Rock is not turtle.", "(-Turtle(Rock))", "Rock is not turtle(Rock)", "Rock is notTurtle(Rock)", "all x.(Rock(x) -> -Turtle(x))", "-Turtle(Rock)", "Rock is not turtle.", "(-Turtle(Rock))", "all x.(Rock(x) -> -Turtle(x))", "Rock is not Turtle(Rock)", "-Turtle(Rock)", "(-Turtle(Rock))", "(-Turtle(Rock,Rock))", "-Turtle(Rock)"]}
{"id": "folio_validation_54", "nl": "Rock is a turtle or cute.", "fol": "(IsTurtle(Rock) | IsCute(Rock))", "prediction": ["all x.(Rock(x) -> (Turtle(x) | Cute(x)))", "(Turtle(Rock) | Cute(Rock))", "all x.(Rock(x) -> (Turtle(x) | Cute(x)))", "((Rock(Rock) & Turtle(Rock)) | Cute(Rock)))", "(Turtle(Rock) | Cute(Rock))", "all x y.((Rock(x) & Turtle(y) & (CUTE(y) | Turtle(y))) -> ((Turtle(x) | Cute(y))))", "all x.(Rock(x) -> (Turtle(x) | Cute(x)))", "(all x.(Rock(x) -> (Turtle(x) | Cute(x))))", "all x.(Rock(x) -> (Turtle(x) | Cute(x)))", "exists x.(Rock(x) & ((Turtle(x) | Cute(x))))", "all x.(Rock(x) -> (Turtle(x) | Cute(x)))", "exists x.(Rock(x) & ((Turtle(x) | Cute(x))) -> (Turtle(x) | Cute(x))))", "exists x.(Rock(x) & ((Turtle(x) | Cute(x))))", "all x.(Rock(x) -> (Turtle(x) | Cute(x)))", "all x.(Rock(x) -> (Turtle(x) | Cute(x)))", "all x.(Rock(x) -> (Turtle(x) | Cute(x)))"]}
{"id": "folio_validation_55", "nl": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.", "fol": "(((-(IsTurtle(Rock) & IsSquirrel(Rock)) -> IsCute(Rock)) & -IsSkittish(Rock)) | (-(-(IsTurtle(Rock) & IsSquirrel(Rock)) -> IsCute(Rock)) & IsSkittish(Rock)))", "prediction": ["all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Cute(x) | Skittish(x)))", "all x.((Rock(x) & -Turtle(x) & Squirrel(x)) -> (Cute(x) | Skittish(x)))", "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Cute(x) | Skittish(x)))", "(-(Turtle(Rock) | Squirrel(Rock))) -> (Cute(Rock) | Skittish(Rock)))", "all x y.((Rock(x) & Turtle(y) & Squirrel(y)) -> (Cute(x) | Skittish(x)))", "all x.((Rock(x) & -Turtle(x) & Squirrel(x)) -> (Cute(x) | Skittish(x)))", "(-(Turtle(Rock,Rock) | Squirrel(Rock))) -> (Cute(Rock,Rock) | Skittish(Rock)))", "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Cute(x) | Skittish(x)))", "(-(Turtle(Rock) | Squirrel(Rock))) | (Scarlet(Rock) | Skittish(Rock)))", "all x.((Rock(x) & -Turtle(x) & Squirrel(x)) -> (Cute(x) | Skittish(x)))", "exists x.(Rock(x) & -(Turtle(x) & Squirrel(x) & -(Sweet(x) & Cute(x) | Skittish(x))))", "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Cute(x) | Skittish(x)))", "all x.((Rock(x) & -(Turtle(x) | Squirrel(x))) -> (Cute(x) | Skittish(x)))", "all x.((Rock(x) & -Turtle(x) & Squirrel(x)) -> (Cute(x) | Skittish(x)))", "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Cute(x) | Skittish(x)))", "all x.((Rock(x) & -Turtle(x) & Squirrel(x)) -> (Cute(x) | Skittish(x)))"]}
{"id": "folio_validation_56", "nl": "If Rock is cute and still, then Rock is a turtle and skittish.", "fol": "(((IsCute(Rock) & IsStill(Rock)) -> IsTurtle(Rock)) & IsSkittish(Rock))", "prediction": ["all x.((Rock(x) & Cute(x) & Still(x)) -> (Turtle(x) & Skittish(x)))", "all x.((Rock(x) & Cute(x) & Still(x)) -> (Turtle(x) & Skittish(x)))", "(CuteAndStill(Rock) -> (Turtle(Rock) & Skittish(Rock)))", "(Cute(Rock) & Still(Rock) -> (Turtle(Rock) & Skittish(Rock)))", "all x.((Cute(x) & Still(x)) -> (Turtle(x) & Skittish(x)))", "all x.((Rock(x) & CuteAndStill(x)) -> (Turtle(x) & Skittish(x)))", "all x y.((Rock(x) & Cute(x) & Still(x)) -> (Turtle(y) & Skittish(y)))", "all x.(CuteAndStill(x) -> (Turtle(x) & Skittish(x)))", "all x.((Rock(x) & Cute(x) & Still(x)) -> (Turtle(x) & Skittish(x)))", "(CuteAndStill(Rock) -> (Turtle(Rock) & Skittish(Rock)))", "exists x.(CrazyAndStill(x) -> (Turtle(x) & Skittish(x)))", "all x.((Cute(x) & Still(x)) -> (Turtle(x) & Skittish(x)))", "all x.((Rock(x) & CuteAndStill(x)) -> (Turtle(x) & Skittish(x)))", "all x.(CuteAndStill(x) -> (Turtle(x) & Skittish(x)))", "all x.((Rock(x) & Cute(x) & Still(x)) -> (Turtle(x) & Skittish(x)))", "all x.((Rock(x) & CuteAndStill(x)) -> (Turtle(x) & Skittish(x)))"]}
{"id": "folio_validation_57", "nl": "\"Stranger Things\" is a popular Netflix show.", "fol": "(IsNetflixShow(StrangerThings) & IsPopular(StrangerThings))", "prediction": ["\"StrangerThings\" is a popular NetflixShow(x))", "all x.(StrangerThings(x) -> PopularFanDuel(x))", "(PopularFilm(StrangerThings) & NetflixShow(StrangerThings))", "(Popular(StrangerThings) & NetflixShow(StrangerThings))", "(PopularFan(StrangerThings) & NetflixShow(StrangerThings))", "\"StrangerThings\" is popular NetflixShow(x))", "all x.(StrangerThings(x) -> PopularNinetyNinety(x))", "\"StrangerThanThings\" is a popular NetflixShow(x))", "all x.((StrangerThings(x) & PopularFan(x)) -> NetflixShow(x))", "all x.(StrangerThan(x) -> PopularFan(x))", "\"StrangerThings\" is a popular NetflixShow(x))", "(PopularFilm(StrangerThings) & NetflixShow(StrangerThings))", "all x.(StrangerThings(x) -> PopularFanFilmShow(x))", "\"StrangerThanThings\" is a popular NetflixShow(x))", "\"StrangerThings\" is popular NetflixShow(x) & PopularWithFan(x))", "exists x.(StrangerThings(x) & PopularFilmShow(x))"]}
{"id": "folio_validation_58", "nl": "If a Netflix show is popular, Karen will binge-watch it.", "fol": "all x.((IsNetflixShow(x) & IsPopular(x)) -> BingeWatchShow(Karen,x))", "prediction": ["all x.((Fan(x) & Popular(x)) -> BingeWatch(x))", "all x.((NinetyNinetyShow(x) & Popular(x)) -> BingeWatch(x))", "all x.((NetflixShow(x) & Popular(x)) -> BingeWatch(x))", "all x y.((Fan(x) & NetflixShow(y) & Popular(y)) -> BingeWatch(x,y))", "all x.((Fan(x) & Popular(x)) -> BingeWatch(x))", "(Popular(Karen) & NetflixShow(Karen))", "all x y.((Fan(x) & NetflixShow(y) & Popular(x,y)) -> BingeWatch(x,y))", "all x.(Popular(x) -> BingeWatch(x))", "all x.((NinetyNinetyShow(x) & Popular(x)) -> BingeWatch(x))", "all x y.((NinetyNinetyShow(x) & Popular(x)) -> BingeWatch(y))", "exists x.(FandomShow(x) & Popular(x) & KarenBingeWatches(x))", "all x.((Fan(x) & Popular(x)) -> BingeWatch(x))", "all x.(Popular(x) -> BingeWatch(x))", "all x y.((Fan(x) & NetflixShow(y) & Popular(y)) -> BingeWatch(x,y))", "all x y.((NinetyNinety(x) & Popular(x)) -> BingeWatch(y))", "exists x.(BingeWatch(x) & Popular(x))"]}
{"id": "folio_validation_59", "nl": "If and only if Karen binge-watches a Netflix show, she will download it.", "fol": "all x.((IsNetflixShow(x) & BingeWatchShow(Karen,x)) <-> DownloadShow(Karen,x))", "prediction": ["all x.((Karen(x) & BingeWatches(x,Netflix)) -> Downloads(x))", "all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> Downloads(x,y))", "(BingeWatchesNinetyNinetyShow(Karen) | (DownloadsNinetyShow(Karen) | DownloadsNinetyShow(Karen))))", "all x.((KarenBingeWatches(x) & NetflixShow(x)) -> Downloads(karen,x))", "all x.(BingeWatches(x,y) -> Downloads(x,y))", "all x y.((Karen(x) & Netflix(y) & BingeWatches(x,y)) -> Downloads(x,y))", "all x.((KarenBingeWatches(x,y) & NetflixShow(y)) -> Downloads(x,y))", "all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> Downloads(x,y))", "all x.((Karen(x) & BingeWatches(x,Netflix)) -> Downloads(x))", "all x.(BingeWatchesNinetyNinetyShow(x) -> Downloads(x))", "(BingeWatches(Kara) & NetflixShow(Kara))", "all x.((BingeWatches(x,y) & NetflixShow(y)) -> Downloads(x,y))", "all x y.((BingeWatches(x,y) & NetflixShow(y)) -> Downloads(x,y))", "(BingeWatchesNinetyNinetyShow(Karen) & Only(Karen))", "exists x.(BingeWatches(Karen,x) & NetflixShow(Karen,x))", "all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> Downloads(x,y))"]}
{"id": "folio_validation_60", "nl": "Karen does not download \"Black Mirror\".", "fol": "-DownloadShow(Karen,BlackMirror)", "prediction": ["(-DownloadBlackMirror(Karen))", "Karen does not download \"BlackMirror\"", "all x.(Karen(x) -> -DownloadsBlackMirror(x))", "-(Karen(Karen) & BlackMirror(Karen))", "Karen -DownloadsBlackMirror(Karen))", "\"BlackMirror\" -Downloads(Karen,Karen))", "Karen does not DownloadBlackMirror(Karen)", "(-DownloadBlackMirror(Karen))", "-(KarenDoesDownloadBlackMirror(Karen))", "-(Karen(Karen) & BlackMirror(Karen))", "Karen -DownloadsBlackMirror(Karen))", "(-DownloadsBlackMirror(Karen))", "(-DownloadBlackMirror(Karen))", "(-DownloadsBlackMirror(Karen,BlackMirror))", "Karen does not download \"BlackMirror\"", "Karen does not DownloadBlackMirror(Karen)"]}
{"id": "folio_validation_61", "nl": "\"Black Mirror\" is a Netflix show.", "fol": "IsNetflixShow(BlackMirror)", "prediction": ["all x.(BlackMirror(x) -> NetflixShow(x))", "\"BlackMirror\" is NetflixShow(x))", "(NinetyNinety(BlackMirror) & NetflixShow(BlackMirror))", "((BlackMirror(Black)) & NetflixShow(Black))", "\"BlackMirror\" (NinetyNinety(x) & NetflixShow(x))", "(NinetyFive(BlackMirror) & NetflixShow(BlackMirror))", "(BloodedMirror(BlackMirror) & NetflixShow(BlackMirror))", "all x.(BlackMirror(x) -> NetflixShow(x))", "\"BlackMirror\" is a NetflixShow(x))", "((BlackMirror(Black) & NetflixShow(Black)) -> Show(Black))", "\"BlackMirror\" (NFCOD) & NetflixShow(x))", "all x.(BlackMirror(x) -> NetflixShow(x))", "\"BlackMirror\" - NetflixShow(x))", "all x.(BlackMirror(x) -> NetflixShow(x))", "\"BlackMirror\" is NetflixShow(x))", "all x.(BlackMirror(x) -> NetflixShow(x))"]}
{"id": "folio_validation_62", "nl": "If Karen binge-watches a Netflix show, she will share it to Lisa.", "fol": "all x.((IsNetflixShow(x) & BingeWatchShow(Karen,x)) -> ShareShowWith(x,Lisa))", "prediction": ["all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> SharesTo(x,y))", "all x.((Karen(x) & NetflixShow(x)) -> SharesToLisa(x))", "all x y z.((Karen(x) & NetflixShow(y) & Lisa(z)) -> (BingeWatches(x,y) & Shares(x,z)))", "all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> SharesToLisa(x,y))", "all x y.((BingeWatches(x,y) & NetflixShow(y)) -> SharesTo(x,y))", "all x.(BingeWatches(Karen,x) -> Shares(Karen,x))", "(BingeWatches(Kara) & NetflixShow(Kara))", "all x.((KarenBingeWatches(x,Netflix)) -> SharesToLisa(x,Netflix))", "all x y z.((Karen(x) & NetflixShow(y) & Lisa(z) & BingeWatches(x,y)) -> Shares(x,z))", "all x.((Karen(x) & NetflixShow(x)) -> SharesToLisa(x))", "(BingeWatchesNinetyNinety(Karen,Lisa))", "all x.(BingeWatchesNinetyNinetyShow(x) -> SharesToLisa(x))", "(BingeWatches(Karen,Netflix) -> Shares(Karen,Netflix))", "all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> Shares(x,y))", "all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> SharesTo(x,y))", "all x.((KarenBingeWatches(x,Netflix)) -> SharesToLisa(x,Netflix))"]}
{"id": "folio_validation_63", "nl": "Karen will share \"Stranger Things\" to Lisa.", "fol": "ShareShowWith(StrangerThings,Lisa)", "prediction": ["all x y.((Karen(x) & Lisa(y)) -> SharesStrangerThings(x,y))", "(ShareStrangerThings(Karen,Lisa))", "Karen will share \"StrangerThings\" to Lisa.", "(ShareStrangerThings(Karen) & ShareStrangerThings(Karen))", "all x.((Karen(x) & Lisa(x)) -> SharesStrangerThings(x,y))", "all x y.((Karen(x) & Lisa(y)) -> SharesStrangerThings(x,y))", "all x y z.((Karen(x) & Lisa(y) & \"StrangerThings(z)) -> Share(x,y,z))", "Karen will share \"StrangerThings\" to Lisa.", "(StrangeThings(Karen) & Lisa(Karen))", "All x.(Karen(x) -> SharesStrangerThings(x,Lisa))", "(ShareStrangerThings(Karen,Lisa) & Karen(Karen))", "all x y z.((Karen(x) & Lisa(y) & StrangerThings(z)) -> Share(x,y,z))", "All x.((Karen(x) & Lisa(y)) -> SharesStrangerThings(x,y))", "all x y.((Karen(x) & Lisa(y)) -> SharesStrangerThings(x,y))", "all x y.((Karen(x) & Lisa(y)) -> ShareStrangerThings(x,y))", "(StrangeThings(Karen) & Lisa(Karen))"]}
{"id": "folio_validation_64", "nl": "\"Black Mirror\" is popular.", "fol": "IsPopular(BlackMirror)", "prediction": ["\"BlackMirror\" is popular.", "(Popular(BlackMirror)", "-(BlackMirror(x) & Popular(x))", "\"BlackMirror\" is popular.", "(Popular(BlackMirror)", "\"BlackMirror\" is popular.", "\"BlackMirror\" (exists x.(BlackMirror(x) & Popular(x)))", "(Popular(BlackMirror)", "is popular.", "\"BlackMirror\" is popular.", "\"BlackMirror\" - Popular(x))", "\"BlackMirror\" (Popular)", "(Popular(BlackMirror)", "\"BlackMirror(x) -> Popular(x))", "(Popular(BlackMirror)", "\"BlackMirror\" is Popular(x)"]}
{"id": "folio_validation_65", "nl": "Karen will share \"Black Mirror\" to Lisa.", "fol": "ShareShowWith(BlackMirror,Lisa)", "prediction": ["all x y.((Karen(x) & Lisa(y)) -> SharesBlackMirror(x,y))", "(ShareBlackMirror(Karen,Lisa))", "Karen will share \"BlackMirror\" to Lisa.", "(ShareBlackMirror(Karen) & ShareBlackMirror(Karen))", "All x.((Karen(x) & Lisa(y)) -> SharesBlackMirror(x,y))", "\"BlackMirror\" -> SharesTo(Karen,Lisa))", "all x y z.((Karen(x) & Lisa(y) & BlackMirror(z)) -> Share(x,y,z))", "all x y.((Karen(x) & Lisa(y)) -> SharesBlackMirror(x,y))", "All x.(Karen(x) -> SharesBlackMirror(x,Lisa))", "Karen will share \"BlackMirror\" to Lisa.", "(SharpMirror(Karen) & ShareBlackMirror(Karen,Lisa))", "all x y.((Karen(x) & Lisa(y)) -> ShareBlackMirror(x,y))", "Karen will share BlackMirrorToLisa(Karen)", "(ShareBlackMirror(Karen,Lisa))", "(ShareBlackMirror(Karen) & ShareBlackMirror(Karen))", "Karen will share \"BlackMirror\" to Lisa."]}
{"id": "folio_validation_66", "nl": "Beijing is the capital of the People's Republic of China. ", "fol": "IsCapitalOf(Beijing,Prx)", "prediction": ["all x.((Beijing(x) & PeoplesRepublicOfChina(x)) -> Capital(x))", "(Capital(Beijing) & PeoplesRepublicOfChina(Beijing))", "(CapitalOfPeoplesRepublicOfChina(Beijing))", "Beijing is capital of PeoplesRepublicOfChina(PRC)", "all x y.((Beijing(x) & PeoplesRepublic(y)) -> Capital(x,y))", "-(CapitalOfPeoplesRepublicOfChina(Beijing))", "all x.((Beijing(x) & PeoplesRepublic(x)) -> Capital(x))", "(Capital(Beijing) & PeoplesRepublic(Beijing))", "CapitalOfPeoplesRepublicOfChina(PRC)", "all x.(Peking(x) -> CapitalOfPeoplesRepublicOfChina(x))", "Beijing is capital of PeoplesRepublicOfChina.", "all x.((Beijing(x) & PeoplesRepublicOfChina(x)) -> Capital(x))", "Beijing (PRC) -> Capital(PRC))", "(CapitalOfPeoplesRepublicOfChina(Beijing))", "(Capital(Beijing) & PeoplesRepublicOfChina(Beijing))", "(Capital(Beijing,PeoplesRepublic(Beijing))"]}
{"id": "folio_validation_67", "nl": "Beijing is the world's most populous national capital city.", "fol": "IsMostPopulousNationalCapital(Beijing)", "prediction": ["all x.((Beijing(x) & PopulousNationalCapitalCity(x)) -> Populous(x))", "-PopularCapitalCity(Beijing)", "(Popular(Beijing) & NationalCapitalCity(Beijing))", "Beijing is the world's most populousNationalCapitalCity(x) & LocatedIn(x,y) & LocatedIn(y,z))", "(PopularCapitalCity(Beijing) & MostPopular(Beijing))", "all x.((Beijing(x) & PopulousNationalCapital(x)) -> MostPopular(x))", "all x.(Beijing(x) -> PopulousNationalCapitalCity(x))", "the most populousnationalcapitalCity(Beijing)", "Beijing is the world's most populousNationalCapitalCity(x))", "all x.((Beijing(x) & PopulousNationalCapitalCity(x)) -> MostPopular(x))", "-PopularCapitalCity(Beijing)", "(PopularCapitalCity(Beijing) & LocatedIn(Beijing,China))", "all x y.((Beijing(x) & NationalCapital(y)) -> Populous(x,y))", "all x.((Beijing(x) & NationalCapitalCity(x)) -> Populous(x))", "(PopularCapitalCity(Beijing,World))", "all x.(Beijing(x) -> WorldsPopularCapitalCity(x))"]}
{"id": "folio_validation_68", "nl": "Beijing is located in Northern China.", "fol": "LocatedInNorthernChina(Beijing)", "prediction": ["all x.(Beijing(x) -> NorthernChina(x))", "(NorthernChina(Beijing) & LocatedIn(Beijing))", "(LocatedInNorthernChina(Beijing))", "all x y.((Beijing(x) & NorthernChina(y)) -> LocatedIn(x,y))", "Beijing is located in NorthernChina.", "all x.(Beijing(x) -> NorthernChina(x))", "(NorthernChina(Beijing) & LocatedIn(Beijing,NorthernChina))", "all x y.((Peking(x) & NorthernChina(y)) -> LocatedIn(x,y))", "all x.(Peking(x) -> NorthernChina(x))", "LocatedInNorthernChina(Beijing)", "all x.(Beijing(x) -> LocatedInNorthernChina(x))", "all x.(Beijing(x) -> NorthernChina(x))", "(NorthernChina(Beijing))", "LocatedInNorthernChina(Peking,China)", "All x.(Beijing(x) -> NorthernChinese(x))", "All x.(Beijing(x) -> NorthernChina(x))"]}
{"id": "folio_validation_69", "nl": "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.", "fol": "(HostedEvent(Beijing,Summer2008olympic) & HostedEvent(Beijing,Summer2008paralympicgames))", "prediction": ["(HostsSummerOlympics(Beijing) & HostsSummerParalympics(Beijing))", "all x.((Beijing(x) & SummerOlympics(x) & SummerParalympics(x)) -> Hosts(x,2008))", "all x y.((Beijing(x) & SummerOlympics(y) & SummerParalympics(y)) -> (Hosts(x,y) & Hosts(x,y)))", "(Hosts2008SummerOlympics(Beijing) & Hosts2008SummerParalympics(Beijing))", "all x.(Beijing(x) -> (HostsSummerOlympics(x,2008) & HostsSummerParalympics(x,2008)))", "Beijing hosted the 2008 SummerOlympics and 2008 SummerParalympicsGames.", "2008 SummerOlympicsAndSummerParalympicsGames(Peking,2008)", "(HostedBy(Beijing,2008) & HostedBy(Beijing,2008))", "2008 SummerOlympics(Beijing) & 2008 SummerParalympics(Beijing))", "(HostedBy(Peking,2008) & HostedBy(Peking,2008))", "all x.((Beijing(x) & SummerOlympics(x) & SummerParalympics(x)) -> Hosted(x,2008))", "(HostsSummerOlympics(Beijing) & HostsSummerParalympics(Beijing))", "(HostsSummerOlympics(Peking,2008) & HostsSummerParalympics(Peking,2008))", "(HottedSummerOlympics(Beijing) & HostedSummerParalympics(Beijing))", "all x y.((Beijing(x) & SummerOlympics(y) & ParalympicsGames(y)) -> (Hosts(x,y) & Hosts(x,y)))", "all x.((Beijing(x) & SummerOlympics(x) & SummerParalympics(x)) -> Host(x,2008))"]}
{"id": "folio_validation_70", "nl": "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics", "fol": "(HostedEvent(Beijing,Summerolympic) & HostedEvent(Beijing,Winterolympic) & HostedEvent(Beijing,Summerparalympicgames) & HostedEvent(Beijing,Winterparalympicgames))", "prediction": ["(HostsSummerOlympics(Beijing) & HostsWinterOlympics(Beijing) & HostsSummerParalympics(Beijing) & HostsWinterParalympics(Beijing))", "all x.((Beijing(x) & SummerOlympics(x) & WinterOlympics(x)) -> (HostsSummerOlympics(x) & HostsWinterOlympics(x) & HostsSummerParalympics(x) & HostsWinterParalympics(x)))", "all x y.((Beijing(x) & SummerOlympics(y) & WinterOlympics(y)) -> (Hosts(x,y) & Hosts(x,y) & Hosts(x,y)))", "(HostsSummerAndWinterOlympics(Beijing) & HostsSummerAndWinterOlympics(Beijing) & HostsSummerAndWinterParalympics(Beijing))", "(HostedSummerOlympics(Beijing) & HostedWinterOlympics(Beijing) & HostedSummerOlympics(Beijing) & HostedWinterOlympics(Beijing) & HostedSummerOlympics(Beijing) & HostedWinterParalympics(Beijing))", "all x.(Beijing(x) -> (HostsSummerOlympics(x) & HostsWinterOlympics(x) & HostsSummerParalympics(x) & HostsWinterParalympics(x)))", "all x y z.((Beijing(x) & SummerOlympics(y) & WinterOlympics(z)) -> (Hosts(x,y) & Hosts(x,z) & Hosts(x,y) & Hosts(x,z)))", "(HostedSummerAndWinterOlympics(Beijing) & HostedSummerAndWinterOlympics(Beijing) & HostedSummerAndWinterParalympics(Beijing))", "(HostedSummerOlympics(Beijing) & HostedWinterOlympics(Beijing) & HostedSummerParalympics(Beijing) & HostedWinterParalympics(Beijing))", "(SummerOlympics(Beijing) & WinterOlympics(Beijing) & SummerParalympics(Beijing) & WinterParalympics(Beijing))", "(HostsSummerOlympics(Beijing) & HostsWinterOlympics(Beijing) & HostsSummerParalympics(Beijing) & HostsWinterParalympics(Beijing))", "all x y.((Beijing(x) & SummerOlympics(y) & WinterOlympics(y)) -> (Hosts(x,y) & Hosts(x,y)))", "all x.((Beijing(x) & SummerOlympics(x) & WinterOlympics(x)) -> (HostsSummerOlympics(x) & HostsWinterOlympics(x) & HostsSummerParalympics(x) & HostsWinterParalympics(x)))", "All x.(Beijing(x) -> (HostsSummerOlympics(x) & HostsWinterOlympics(x) & HostsSummerParalympics(x) & HostsWinterParalympics(x)))", "(HostsSummerAndWinterOlympics(Beijing) & HostsSummerAndWinterOlympics(Beijing) & HostsSummerAndWinterParalympics(Beijing))", "all x y z.((Beijing(x) & SummerOlympics(y) & WinterOlympics(z)) -> (Hosts(x,y) & Hosts(x,z)))"]}
{"id": "folio_validation_71", "nl": "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.", "fol": "exists x.(UniversityInBeijing(x) & RanksAmongBestUniversities(x))", "prediction": ["all x.((University(x) & Beijing(x)) -> (BestInAsiaPacific(x) & BestInWorld(x)))", "all x y.((University(x) & University(y) & Beijing(x) & AsiaPacific(y) & World(y)) -> Best(x,y))", "many of Beijing's 91 universities consistently rank amongst the best in Asia-Pacific and the world.", "all x.((BeijingUniversity(x) & BeijingUniversity(x)) -> (BestInAsiaPacific(x) & BestInWorld(x)))", "all x.((University(x) & Beijing(x) & RanksAroundAsiaPacificAndWorld(x)) -> BestInAsiaPacificAndWorld(x))", "(exists x.(University(x) & Beijing(x) & NumberOfUniversities(x,1)) & BestInAsiaPacific(x) & BestInWorld(x))", "many of Beijing's 91 universities consistently rank among the best in Asia-Pacific and the World.", "RanksAmongBestAsiaPacificAndWorld Universities(Beijing,91)", "all x y.((University(x) & University(y) & Beijing(x)) -> (BestInAsiaPacific(x,y) & BestInWorld(x,y)))", "many of Beijing's 91 universities rank amongstthebestInAsiaPacificAndWorld(Beijing)", "(all x.((BeijingUniversity(x) & AsiaPacificUniversity(x)) -> BestInAsiaPacificAndWorld(x)))", "(exists x.(University(x) & Beijing(x) & RanksAmongBestInAsiaPacificAndWorld(x)))", "all x.((BeijingUniversity(x) & BeijingUniversity(x)) -> (BestInAsiaPacific(x) & BestInWorld(x)))", "all x.((University(x) & Beijing(x)) -> (BestInAsiaPacific(x) & BestInWorld(x)))", "all x y.((University(x) & Beijing(y)) -> (BestInAsiaPacific(x) & BestInWorld(y)))", "all x.((University(x) & Beijing(x) & AsiaPacific(x) & World(x)) -> Best(x,y))"]}
{"id": "folio_validation_72", "nl": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.", "fol": "(HostedEvent(Beijing,Summer2008olympic) & HostedEvent(Beijing,Winterolympic))", "prediction": ["all x.((Beijing(x) & SummerOlympics(x) & WinterOlympics(x)) -> Hosts(x,y))", "all x.(Beijing(x) -> (HostsSummerOlympics(x,2008) & HostsWinterOlympics(x,2008)))", "(HostsSummerOlympics(Beijing) & HostsWinterOlympics(Beijing))", "all x y.((Beijing(x) & SummerOlympics(y) & WinterOlympics(y)) -> Host(x,y))", "(HostedSummerOlympics(Beijing) & HostedWinterOlympics(Beijing))", "all x y.((Beijing(x) & SummerOlympics(y)) -> (Hosts(x,y) & Hosts(x,y)))", "all x.((Beijing(x) & SummerOlympics(x) & WinterOlympics(x)) -> Host(x,y))", "(HostsSummerOlympics(Beijing,2008) & HostsWinterOlympics(Beijing,2008))", "(HostsSummerOlympics(Beijing) & HostsWinterOlympics(Beijing))", "(HostedSummerOlympics(Beijing) & HostedWinterOlympics(Beijing))", "all x.((Beijing(x) & 2008SummerOlympics(x) & WinterOlympics(x)) -> Hosts(x,y))", "all x.(Beijing(x) -> (HostedSummerOlympics(x,2008) & HostedWinterOlympics(x,2008)))", "all x.(Beijing(x) -> (HostsSummerOlympics(x,2008) & HostsWinterOlympics(x,2008)))", "all x y.((Beijing(x) & SummerOlympics(y) & WinterOlympics(y)) -> (Hosts(x,y) & Hosts(x,y)))", "(HostsSummerOlympics(Peking,2008) & HostsWinterOlympics(Peking,2008))", "all x y.((Beijing(x) & SummerOlympics(y) & WinterOlympics(y)) -> Hosted(x,y))"]}
{"id": "folio_validation_73", "nl": "Beijing is located in southern China.", "fol": "InSouthernChina(Beijing)", "prediction": ["all x.(Beijing(x) -> LocatedInSouthChina(x))", "(LocatedInSouthChina(Beijing) & LocatedInSouthChina(Beijing))", "(SouthChina(Beijing) & LocatedIn(Beijing))", "all x y.((Beijing(x) & SouthernChina(y)) -> LocatedIn(x,y))", "all x.(Beijing(x) -> LocatedInSouthernChina(x))", "all x.(Peking(x) -> LocatedInSouthChina(x))", "all x.(Beijing(x) -> SouthernChina(x))", "(SouthChina(Beijing) & LocatedIn(Beijing,SouthChina))", "(LocatedInSouthChina(Beijing) & SouthChina(Beijing))", "LocatedInSouthernChina(Peking,China)", "is located in southern China.", "all x y.((Beijing(x) & SouthernChina(y)) -> LocatedIn(x,y))", "(SouthernChina(Beijing) & LocatedIn(Beijing,SouthernChina))", "all x.(Beijing(x) -> LocatedInSouthChina(x))", "all x.(Beijing(x) -> SouthChina(x))", "All x.(Beijing(x) -> SouthernChina(x))"]}
{"id": "folio_validation_74", "nl": "Beijing is the second largest Chinese city by urban population.", "fol": "SecondLargestChineseCity(Beijing)", "prediction": ["all x.((City(x) & City(x) & UrbanPopulation(x)) -> SecondLargest(x))", "(SecondLargestCity(Beijing) & UrbanPopulation(Beijing))", "(LargestCity(Beijing) & UrbanPopulation(Beijing))", "(SecondLargestChineseCity(Beijing) & UrbanPopulation(Beijing))", "(LargestCityByUrbanPopulation(Beijing) & SecondLargestCityByUrbanPopulation(Beijing))", "all x y.((Beijing(x) & UrbanPopulation(y)) -> SecondLargestCityBy(x,y))", "China's secondlargestCityByUrbanPopulation(Beijing)", "-LargestChineseCityByUrbanPopulation(Peking)", "Beijing is the second largest Chinese city by urbanPopulation(Peking)", "-(LargestChineseCity(x) & UrbanPopulation(x))", "all x.((City(x) & City(x) & UrbanPopulation(x)) -> SecondLargest(x,y))", "(SecondLargestChineseCityByUrbanPopulation(Beijing))", "the second largest ChineseCityByUrbanPopulation(Peking)", "Located in the heart of Beijing, the city is home to the second largest Chinese city by urbanpopulation.", "all x.((City(x) & UrbanPopulation(x)) -> SecondLargest(x,Chinese))", "all x.((City(x) & City(x) & UrbanPopulation(x)) -> SecondLargest(x))"]}
{"id": "folio_validation_75", "nl": "All aliens are extraterrestrial.", "fol": "all x.(IsAlien(x) -> IsExtraterrestrial(x))", "prediction": ["all x.(Alien(x) -> Extraterrestrial(x))", "all x.(Alien(x) -> Extraterrestrial(x))", "(Extraterrestrial(x) -> AllOtherAliens(x))", "all x.(Alien(x) -> Extraterrestrial(x))", "(Extraterrestrial(x) -> AllAbstracts(x))", "all x.(Extraterrestrial(x) -> Alien(x))", "all x y.((Alien(x) & Extraterrestrial(y)) -> Extraterrestrial(x))", "all x.(Alien(x) -> Extraterrestrial(x))", "all x.(Abstract(x) -> Extraterrestrial(x))", "all x.(Extraterrestrial(x) -> Alien(x))", "all x.(Alien(x) -> Extraterrestrial(x))", "all x.(Alien(x) -> Extraterrestrial(x))", "all x.(Extraterrestrial(x) -> Alien(x))", "all x.(Aliens(x) -> Extraterrestrial(x))", "all x.(Alien(x) -> Extraterrestrial(x))", "all x.(Aliens(x) -> Extraterrestrial(x))"]}
{"id": "folio_validation_76", "nl": "If someone is from Mars, then they are aliens.", "fol": "all x.(IsFromMars(x) -> IsAlien(x))", "prediction": ["all x.((Alien(x) & FromMars(x)) -> Alien(x))", "all x.((Person(x) & FromMars(x)) -> Alien(x))", "(Alien(x) -> FromMars(x))", "all x.((Mars(x) & Alien(x)) -> Alien(x))", "(All x.((Mars(x) & From(x,Mars)) -> Alien(x)))", "all x.(Mars(x) -> Alien(x))", "all x y.((Alien(x) & PersonFromMars(x)) -> Alien(y))", "all x.((Person(x) & Mars(x)) -> Alien(x))", "all x.((Alien(x) & FromMars(x)) -> Alien(x))", "all x.((FromMars(x)) -> Alien(x))", "all x.(Mars(x) -> Alien(x))", "all x.((Mars(x) & Alien(x)) -> Alien(x))", "all x.(Mars(x) -> Alien(x))", "all x.((Alien(x) & FromMars(x)) -> Alien(x))", "all x.(FromMars(x) -> Alien(x))", "All x.(FromMars(x) -> Alien(x))"]}
{"id": "folio_validation_77", "nl": "No extraterrestrial is human.", "fol": "all x.(IsExtraterrestrial(x) -> -IsHuman(x))", "prediction": ["-exists x.(Extraterrestrial(x) & Human(x))", "all x.(Extraterrestrial(x) -> Human(x))", "-exists x.(extraterrestrial(x) & Human(x))", "-exists x.(Extraterrestrial(x) & Human(x))", "all x.(Extraterrestrial(x) -> Human(x))", "all x.(Extraterrestrial(x) -> Human(x))", "-exists x.(extraterrestrial(x) & Human(x))", "-exists x.(Extraterrestrial(x) & Human(x))", "(exists x.(Extraterrestrial(x) & Human(x)))", "all x.(Extraterrestrial(x) -> Human(x))", "(exists x.(Extraterrestrial(x) & Human(x)))", "-exists x.(extraterrestrial(x) & Human(x))", "-exists x.(Extraterrestrial(x) & Human(x))", "all x.(Extraterrestrial(x) -> Human(x))", "all x.(Extraterrestrial(x) -> Human(x))", "-exists x.(Extraterrestrial(x) & Human(x))"]}
{"id": "folio_validation_78", "nl": "Everyone from Earth is a human.", "fol": "all x.(IsFromEarth(x) -> IsHuman(x))", "prediction": ["all x.((Earth(x) & Human(x)) -> Human(x))", "all x.(Earth(x) -> Human(x))", "all x.((Earth(x) & Human(x)) -> AllOf(x,y))", "(all x.(FromEarth(x) -> Human(x)))", "all x y.((Earth(x) & Human(y)) -> FromEarth(x,y))", "all x.((Earth(x) & Human(x)) -> FromEarth(x))", "all x.(Earth(x) -> Human(x))", "(All x.(FromEarth(x) -> Human(x))", "all x.((Earth(x) & Human(x)) -> exists y.(Earth(y) & From(x,y))))", "(all x.((Earth(x) & Human(x)) -> FromEarth(x))", "exists x y.(Human(x) & Person(y) & FromEarth(x,y))", "all x.((Earth(x) & Human(x)) -> Human(x))", "all x.(Earth(x) -> Human(x))", "all x.(Earth(x) -> Human(x))", "all x.(FromEarth(x) -> Human(x))", "all x.(Earth(x) -> Human(x))"]}
{"id": "folio_validation_79", "nl": "Marvin cannot be from Earth and from Mars.", "fol": "(-IsFromEarth(Marvin) & -IsFromMars(Marvin))", "prediction": ["all x.(Marvin(x) -> -(FromEarth(x) & FromMars(x)))", "(-(Marvin(Mars) & Earth(Mars)))", "-exists x.(Marvin(x) & Earth(x) & Mars(x))", "Marvin -(FromEarth(Mars) & -FromMars(Mars))", "all x.(Marvin(x) -> (-FromEarth(x) & -FromMars(x)))", "(Marvin(Marvin) & -(FromEarth(Marvin) | FromMars(Mars))))", "-(Marvin(Marvin) & Earth(Mars))", "(exists x.(Marvin(x) & Earth(x) & Mars(x)))", "Marvin -(FromEarth(Mars) & -FromMars(Mars))", "all x.(Marvin(x) -> (-FromEarth(x) & -FromMars(x)))", "-exists x.(Marvin(x) & Earth(x) & Mars(x))", "(Marvin(Marvin) & -(FromEarth(Marvin) | FromMars(Mars)))", "(-(Marvin(Mars) & Earth(Mars)))", "all x.(Marvin(x) -> (-FromEarth(x) & -FromMars(x)))", "exists x.(Marvin(x) & -(FromEarth(x) & FromMars(x)))", "-(Marvin(Marvin) & Earth(Mars))"]}
{"id": "folio_validation_80", "nl": "If Marvin is not from Earth, then Marvin is an extraterrestrial.", "fol": "(-IsFromEarth(Marvin) -> IsExtraterrestrial(Marvin))", "prediction": ["all x.((Marvin(x) & -FromEarth(x)) -> Extraterrestrial(x))", "(-MarvinFromEarth(Marvin,Earth))", "all x.((Marvin(x) & -FromEarth(x)) -> Extraterrestrial(x))", "(-MarvinFromEarth(Marvin,Earth) -> Extraterrestrial(Marvin))", "-(MarvinFromEarth(Marvin) & -FromEarth(Marvin))", "all x.((Marvin(x) & -FromEarth(x)) -> Extraterrestrial(x))", "(-MarvinFromEarth(Marvin,Earth))", "(-MarvinFromEarth(Marvin,Earth) -> Extraterrestrial(Marvin))", "All x.(Marvin(x) -> (-FromEarth(x) & Extraterrestrial(x)))", "all x.((Marvin(x) & -FromEarth(x)) -> Extraterrestrial(x))", "All x.(Marvin(x) -> -FromEarth(x))", "all x.((Marvin(x) & -FromEarth(x)) -> Extraterrestrial(x))", "all x.((Marvin(x) & -Earth(x)) -> Extraterrestrial(x))", "all x.((Marvin(x) & -MarvinFromEarth(x)) -> Extraterrestrial(x))", "all x.((Marvin(x) & -FromEarth(x)) -> Extraterrestrial(x))", "all x.((Marvin(x) & -FromEarth(x)) -> Extraterrestrial(x))"]}
{"id": "folio_validation_81", "nl": "Marvin is an alien.", "fol": "IsAlien(Marvin)", "prediction": ["Marvin is alien(Marvin)", "(Alien(Marvin) & Alien(Marvin))", "all x.(Marvin(x) -> Alien(x))", "Marvin ist Alien(Marvin)", "Marvin is alien(marvin)", "(Alien(Marvin) & Alien(Marvin))", "All x.(Marvin(x) -> Alien(x))", "Marvin is alien.", "Marvin ist Alien(Marvin)", "(Alien(Marvin) & Alien(Marvin))", "Marvin is alien(Marvin)", "all x.(Marvin(x) -> Alien(x))", "-Alien(Marvin)", "(Alien(Marvin) & BornIn(Marvin,Alien))", "All x.(Marvin(x) -> Alien(x))", "Marvin is alien."]}
{"id": "folio_validation_82", "nl": "Marvin is neither a human nor from Mars.", "fol": "(-IsHuman(Marvin) & -IsFromMars(Marvin))", "prediction": ["(-Human(Marvin) & -Mars(Marvin))", "Marvin is -Human(Mars) & -FromMars(Mars))", "-(Human(Marvin) | Mars(Marvin))", "Marvin ne is niHuman(n) ni Mars(n))", "(Marvin(Marvin) & -Human(Marvin) & -Mars(Marvin))", "all x.(Marvin(x) -> (-Human(x) & -Mars(x)))", "(Marvin,Human(Mars) & -Mars(Mars))", "(-Human(Marvin) & -Mars(Marvin))", "Marvin is -Human(Mars) & -FromMars(Mars))", "-(Human(Marvin) | Mars(Marvin))", "all x.(Marvin(x) -> (-Human(x) | Mars(x)))", "(-Human(Marvin) & -Mars(Marvin))", "Marvin -(Human(Mars) | Mars(Mars))", "((Marvin) | Mars(Marvin)))", "Marvin is neither Human(Mars) nor FromMars(Mars)", "-(Human(Marvin) | Mars(Marvin))"]}
{"id": "folio_validation_83", "nl": "If Marvin is not from Mars, then Marvin is a human.", "fol": "(-IsFromMars(Marvin) -> IsHuman(Marvin))", "prediction": ["all x.((Marvin(x) & -Mars(x)) -> Human(x))", "(-Mars(Marvin) -> Human(Marvin))", "all x.((Marvin(x) & -Mars(x)) -> Human(x))", "(-MarsInMars(Marvin,Mars)) -> Human(Marvin))", "all x.((Marvin(x) & -Mars(x)) -> Human(x))", "All x y.((Marvin(x) & Mars(y) & -Mars(x,y)) -> Human(x))", "exists x.(Marvin(x) & -Mars(x) & Human(x))", "all x.((Marvin(x) & -FromMars(x)) -> Human(x))", "(-MarsFromMars(Marvin,Mars))", "all x.((Marvin(x) & -Mars(x)) -> Human(x))", "(-MarsInMars(Marvin,Mars))", "all x.((Marvin(x) & -FromMars(x)) -> Human(x))", "all x.((Marvin(x) & -Mars(x)) -> Human(x))", "all x.((Marvin(x) & -FromMars(x)) -> Human(x))", "all x.((Marvin(x) & -Mars(x)) -> Human(x))", "all x.((Marvin(x) & -Mars(x)) -> Human(x))"]}
{"id": "folio_validation_84", "nl": "A person is either a Grand Slam champion or an Oscar-nominated actor.", "fol": "all x.((IsGrandSlamChampion(x) & -IsOscarNominatedActor(x)) | (-IsGrandSlamChampion(x) & IsOscarNominatedActor(x)))", "prediction": ["all x.(Person(x) -> (GrandSlamChampion(x) | OscarnominatedActor(x)))", "all x.(Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))", "all x.((Person(x) & GrandSlamChampion(x) | OscarnominatedActor(x)) -> Person(x))", "all x y.((Person(x) & GrandSlamChampion(x)) | OscarNominatedActor(y))", "all x.(Person(x) -> (GrandSlamChampion(x) | OscarnominatedActor(x)))", "all x.((Person(x) & GrandSlamChampion(x) | OscarnominatedActor(x)) -> Person(x))", "exists x.(Person(x) & GrandSlamChampion(x) & OscarNominatedActor(x))", "exists x.(Person(x) & GrandSlamChampion(x) & (OscarnominatedActor(x) | OscarnominatedActor(x)))", "all x.(Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))", "all x y.((Person(x) & GrandSlamChampion(x)) | OscarNominatedActor(y))", "all x.((Person(x) & GrandSlamChampion(x) | OscarNominatedActor(x)) -> Person(x))", "all x.(Person(x) -> (GrandSlamChampion(x) | OscarnominatedActor(x)))", "exists x.(Person(x) & (GrandSlamChampon(x) | OscarNominated(x)))", "exists x.(Person(x) & GrandSlamChampion(x) | OscarnominatedActor(x))", "exists x.(Person(x) & (GrandSlamChampion(x) | OscarnominatedActor(x)))", "exists x.(Person(x) & (GrandSlamChampon(x) | OscarNominated(x)))"]}
{"id": "folio_validation_85", "nl": "All people who are Grand Slam champions are professional tennis players.", "fol": "all x.(IsGrandSlamChampion(x) -> IsProfessionalTennisPlayer(x))", "prediction": ["all x.(GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x.((Person(x) & GrandSlamChampion(x)) -> ProfessionalTennisPlayer(x))", "(all x.(GrandSlamChampion(x) -> ProfessionalTennisPlayer(x)))", "all x y.((Person(x) & GrandSlamChampion(x) & GrandSlamChampion(y)) -> ProfessionalTennisPlayer(x))", "all x.(GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x.((Person(x) & GrandSlamChampion(x)) -> ProfessionalTennisPlayer(x))", "all x y.((Person(x) & GrandSlamChampion(x)) -> ProfessionalTennisPlayer(y))", "all x.(GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x.((Person(x) & GrandSlamChampion(x)) -> ProfessionalTennisPlayer(x))", "all x.(GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x.((Person(x) & GrandSlamChampion(x)) -> ProfessionalTennisPlayer(x))", "all x.(GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x.((Person(x) & GrandSlamChampion(x)) -> ProfessionalTennisPlayer(x))", "all x.((Person(x) & GrandSlamChampion(x)) -> ProfessionalTennisPlayer(x))", "all x.(GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x.(GrandSlamChampions(x) -> ProfessionalTennisPlayer(x))"]}
{"id": "folio_validation_86", "nl": "All Oscar-nominated actors are celebrities.", "fol": "all x.(IsOscarNominatedActor(x) -> IsCelebrity(x))", "prediction": ["all x.(OscarnominatedActor(x) -> Celebrity(x))", "all x.((Actor(x) & OscarNominated(x)) -> Celebrity(x))", "(all x.(OscarNominatedActor(x) -> Celebrity(x))", "all x.(OscarnominatedActor(x) -> Celebrity(x))", "all x y.((Actor(x) & OscarNominated(x) & Actor(y)) -> Celebrity(x))", "all x.(OscarNominatedActor(x) -> Celebrity(x))", "(all x.(OscarnominatedActor(x) -> Celebrity(x))", "all x.((Actor(x) & OscarNominated(x)) -> Celebrity(x))", "all x.((Actor(x) & Nominated(x)) -> Celebrity(x))", "all x y.((Actor(x) & OscarNominated(x) & Actor(y)) -> Celebrity(x))", "all x.(OscarnominatedActor(x) -> Celebrity(x))", "(all x.(OscarNominatedActor(x) -> Celebrity(x))", "all x.(OscarNominated(x) -> Celebrity(x))", "all x.(OscarNominatedActor(x) -> Celebrity(x))", "all x.(OscarnominatedActor(x) -> Celebrity(x))", "all x.(OscarnominatedActor(x) -> Celebrity(x))"]}
{"id": "folio_validation_87", "nl": "All professional tennis players are athletes.", "fol": "all x.(IsProfessionalTennisPlayer(x) -> IsAthlete(x))", "prediction": ["all x.(ProfessionalTennisPlayer(x) -> Athlete(x))", "all x.(ProfessionalTennisPlayer(x) -> Athlete(x))", "all x y.((ProfessionalTennisPlayer(x) & ProfessionalTennisPlayer(y)) -> Athlete(x))", "all x.((ProfessionalTennisPlayer(x) & Athlete(x)) -> Athlete(x))", "(all x.(ProfessionalTennisPlayer(x) -> Athlete(x))", "all x.(ProfessionalTennisPlayer(x) -> Athlete(x))", "all x.(Player(x) -> Athlete(x))", "(all x.(ProfessionalTennisPlayer(x) -> Athlete(x))", "all x.(TennisPlayer(x) -> Athlete(x))", "all x.(ProfessionalTennisPlayer(x) -> Athlete(x))", "(all x.(ProfessionalTennisPlayer(x) -> Athlete(x))", "all x.(ProfessionalTennisPlayer(x) -> Athlete(x))", "all x.(ProfessionalTennisPlayer(x) -> Athlete(x))", "all x.(ProfessionalTennisPlayer(x) -> Athlete(x))", "all x.(ProfessionalTennisPlayer(x) -> Athlete(x))", "all x.(ProfessionalTennisPlayer(x) -> Athlete(x))"]}
{"id": "folio_validation_88", "nl": "If a person is a celebrity then they are well paid.", "fol": "all x.(IsCelebrity(x) -> IsWellPaid(x))", "prediction": ["all x.(Celebrity(x) -> WellPaid(x))", "all x.((Person(x) & Celebrity(x)) -> WellPaid(x))", "all x.(Celebrity(x) -> WellPayed(x))", "all x.((Person(x) & Celebrity(x)) -> WellPayed(x))", "all x.(Celebrity(x) -> WellPaid(x))", "all x.((Person(x) & Celebrity(x)) -> WellPaid(x))", "all x y.((Person(x) & Celebrity(y)) -> WellPaid(x,y))", "all x.(Celebrities(x) -> WellPaid(x))", "all x y.((Person(x) & Celebrity(y) & WellPayed(x,y)) -> WellPayed(x))", "all x.(Celebrity(x) -> WellPayed(x))", "all x.((Person(x) & Celebrity(x)) -> WellPayed(x))", "all x.(Celebrate(x) -> WellPayed(x))", "all x.((Person(x) & Celebrity(x)) -> WellPaid(x))", "exists x.(Celebrate(x) & WellPaid(x))", "all x.((Person(x) & Celebrity(x)) -> WellPayed(x))", "all x.(Celebrity(x) -> WellPaid(x))"]}
{"id": "folio_validation_89", "nl": "If a person is an athlete then they are famous.", "fol": "all x.(IsAthlete(x) -> IsFamous(x))", "prediction": ["all x.(Athlete(x) -> Famous(x))", "all x.((Person(x) & Athlete(x)) -> Famous(x))", "all x.(Athlete(x) -> Famous(x))", "all x y.((Person(x) & Athlete(x)) -> Famous(x))", "all x.((Person(x) & Athlete(x)) -> Famous(x))", "all x.(Athlete(x) -> Famous(x))", "all x.((Person(x) & Athlete(x)) -> Famous(x))", "all x.(Athlete(x) -> Famous(x))", "all x.((Person(x) & Athlete(x)) -> Famous(x))", "all x.(Athlete(x) -> Famous(x))", "all x.((Person(x) & Athlete(x)) -> Famous(x))", "all x.(Athlete(x) -> Famous(x))", "all x.((Person(x) & Athlete(x)) -> Famous(x))", "all x.(Athlete(x) -> Famous(x))", "all x.(Athlete(x) -> Famous(x))", "exists x.(Athlete(x) & Famous(x))"]}
{"id": "folio_validation_90", "nl": "All well-paid people live in tax havens.", "fol": "all x.(IsWellPaid(x) -> LivesInTaxHaven(x))", "prediction": ["all x.(WellPaid(x) -> LivesInTaxHaven(x))", "all x.(WellPayedPerson(x) -> LivesInTaxehaven(x))", "all x.(WellPaid(x) -> LivesInTaxen(x))", "all x y.((WellPayed(x) & Person(y)) -> LivesInTaxHaven(y))", "all x.(WellPaidPerson(x) -> LivesInTaxHaven(x))", "all x.(WellPayed(x) -> LivesInTaxHaven(x))", "all x y.((WellPaidPerson(x) & TaxHaven(y)) -> LivesIn(x,y))", "(all x.(WellPaid(x) -> LivesInTaxHavens(x)))", "all x.((WellPaid(x) & TaxHaven(x)) -> LivesIn(x,y))", "all x y.((WellPaid(x) & Person(y)) -> LivesInTaxHaven(x,y))", "all x.(WellPaid(x) -> LivesInTaxHaven(x))", "all x y.((WellPayed(x) & Person(y)) -> LivesInTaxehaven(y))", "all x.(WellPayedPerson(x) -> LivesInTaxehaven(x))", "all x.(WellPaidPerson(x) -> LivesInTaxen(x))", "all x.exists y.(WellPaid(x) & Person(y) & LivesInTaxAven(y))", "all x.(WellPayed(x) -> LivesInTaxehaven(x))"]}
{"id": "folio_validation_91", "nl": "If Djokovic is famous and is an athlete, then Djokovic lives in well paid.", "fol": "((IsFamous(Djokovic) & IsAthlete(Djokovic)) -> LivesInTaxHaven(Djokovic))", "prediction": ["all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> WellPayed(x))", "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> LivesWellPayed(x))", "(FamousAndAthlete(Djokovic) -> WellPayed(Djokovic))", "all x.((Famous(x) & Athlete(x)) -> WellPayed(x))", "all x y.((Djokovic(x) & Famous(x) & Athlete(x)) -> WellPayed(x,y))", "(FamousAndAthlete(Djokovic) -> LivesWellPayed(Djokovic))", "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> WellPayed(x))", "all x.(Famous(x) -> WellPayed(x))", "exists x.(Djokovic(x) & Famous(x) & Athlete(x) & WellPayed(x))", "all x.((Famous(x) & Athlete(x)) -> LivesWellPayed(x))", "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> LivesWellPayed(x))", "All x y.((Djokovic(x) & Famous(x) & Athlete(x)) -> WellPaid(x))", "all x.(Famous(x) -> Athlete(x))", "all x y.((Djokovic(x) & Famous(x) & Athlete(x)) -> LivesWellPayed(x,y))", "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> WellPaid(x))", "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> LivesWellPaid(x))"]}
{"id": "folio_validation_92", "nl": "Djokovic is a Grand Slam champion.", "fol": "IsGrandSlamChampion(Djokovic)", "prediction": ["all x.((Djokovic(x) & GrandSlamChampion(x)) -> GrandSlamChampion(x))", "(GrandSlamChampion(Djokovic))", "Djokovic is a GrandSlamChampion(d) & GrandSlamChampion(d))", "Djokovic is GrandSlamChampion(d) & GrandSlamChampion(d))", "all x.(Djokovic(x) -> GrandSlamChampion(x))", "(GrandSlamChampion(Djokovic))", "all x.((Djokovic(x) & GrandSlamChampion(x)) -> GrandSlamChampion(x))", "Djokovic is a GrandSlamChampion(Djokovic)", "Djokovic is GrandSlamChampion(Djokovic,GrandSlam)", "all x.((Djokovic(x) & GrandSlamChampion(x)) -> Champion(x))", "all x.(Djokovic(x) -> GrandSlamChampion(x))", "(GrandSlamChampion(Djokovic)", "(GrandSlamChampion(Djokovic,2019))", "Djokovic is a Grand Slam Champion.", "(GrandSlamChampion(Djokovic)", "(GrandSlamChampion(djokovic,d))"]}
{"id": "folio_validation_93", "nl": "Djokovic lives in a tax haven.", "fol": "LivesInTaxHaven(Djokovic)", "prediction": ["all x.(Djokovic(x) -> LivesInTaxHaven(x))", "all x y.((Djokovic(x) & TaxHaven(y)) -> LivesIn(x,y))", "(LivingInTaxHaven(Djokovic)", "Djokovic lives in TaxHaven.", "all x.(Djokovic(x) -> LivesInTaxen(x))", "Djokovic & TaxHaven(Djokovic)", "(LivingInTaxeNear(Djokovic,TaxeHaven))", "all x y.((Djokovic(x) & TaxHaven(y)) -> LivesIn(x,y))", "all x.(Djokovic(x) -> exists y.(TaxHaven(y) & LivesIn(x,y))))", "all x.(Djokovic(x) -> TaxHaven(x))", "Djokovic lives in tax haven.", "(LivingInTaxHaven(Djokovic)", "Djokovic & TaxHaven(Djokovic)", "all x y.((Djokovic(x) & TaxHaven(y)) -> LivesIn(x,y))", "Djokovic lives in tax haven.", "all x.(Djokovic(x) -> LivesInTaxen(x))"]}
{"id": "folio_validation_94", "nl": "Djokovic does not live in a tax haven.", "fol": "-LivesInTaxHaven(Djokovic)", "prediction": ["all x.(Djokovic(x) -> -TaxHaven(x))", "Djokovic - exists x.(TaxHaven(x) & -LivesIn(x,Djokovic))", "(-LivesInTaxHaven(Djokovic))", "Djokovic -exists x.(TaxHaven(x) & -LivesIn(x,Djokovic))", "-exists x.(Djokovic(x) & TaxHaven(x))", "(-LivingInTaxHaven(Djokovic))", "-(DjokovicLivesInTaxHaven(Djokovic))", "(LivingInTaxeNation(Djokovic) -> -LivingInTaxHaven(Djokovic))", "all x.(Djokovic(x) -> -TaxHaven(x))", "Djokovic - TaxHaven(Djokovic)", "Djokovic does not live in TaxHaven.", "(-LivesInTaxHaven(Djokovic))", "-exists x.(Djokovic(x) & TaxHaven(x))", "all x.(Djokovic(x) -> -TaxeHaven(x))", "Djokovic does not live in TaxHaven.", "all x.(Djokovic(x) -> -TaxHaven(x))"]}
{"id": "folio_validation_95", "nl": "Diamond Mine is a professional wrestling stable, formed in WWE.", "fol": "(IsProfessionalWrestlingStable(Diamondmine) & IsFormedIn(Diamondmine,Wwe))", "prediction": ["all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestling(x)))", "all x.((DiamondMine(x) & ProfessionalWrestlingStable(x) & FormedInWrestling(x)) -> FormedIn(x,Wrestling))", "(ProfessionalWrestlingStable(DiamondMine) & FormedInWrestling(DiamondMirror))", "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestling(x)))", "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestling(x)))", "(ProfessionalWrestlingStable(DiamondMine) & FormedInWrestling(DiamondMine))", "(ProfessionalWrestlingStable(DiamondMine) & FormedInWrestleMania(DiamondM mine))", "(ProfessionalWrestlingStable(diamondmine) & FormedInWrestling(diamondmine))", "All x y.((DiamondMine(x) & ProfessionalWrestlingStable(y)) -> FormedInWrestling(x,y))", "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestling(x)))", "all x.((DiamondMine(x) & ProfessionalWrestlingStable(x) & FormedInWrestling(x)) -> FormedIn(x,Wrestling))", "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestling(x)))", "All x y.((DiamondMine(x) & ProfessionalWrestlingStable(y)) -> FormedInWrestleMania(x,y))", "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestleMania(x)))", "All x y.((DiamondMine(x) & ProfessionalWrestling(y)) -> FormedInWrestling(x,y))", "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestling(x)))"]}
{"id": "folio_validation_96", "nl": "Roderick Strong leads Diamond Mine.", "fol": "LeaderOf(Roderickstrong,Diamondmine)", "prediction": ["Roderick Strong leads DiamondMine(Roderick)", "All x.(RoderickStrong(x) -> LeadsDiamondMine(x))", "all x.((RoderickStrong(x) & DiamondMine(y)) -> Leads(x,y))", "RoderickStrongLeadsDiamondMine(Roderick)", "Roderick Strong leads Diamond Mine.", "RoderickStrong leadsDiamondMine(Roderick)", "Roderick Strong leadsDiamondMine(Roderick)", "(LeadsDiamondMine(RoderickStrong))", "(LeadsDiamondMine(RoderickStrong) -> Leads(RoderickStrong))", "Roderick Strong leads DiamondMine(Roderick)", "RoderickStrongLeadsDiamondMine(Roderick)", "RoderickStrong leadsDiamondMine(Roderick)", "Roderick Strong leadsDiamondMine(Roderick)", "(LeadsDiamondMine(RoderickStrong))", "Roderick Strong leads Diamond Mine.", "Roderick Strong leads DiamondMine(roderick,strong)"]}
{"id": "folio_validation_97", "nl": "Diamond Mine includes the Creed Brothers, and Ivy Nile.", "fol": "(IncludesMember(Diamondmine,Creedbrothers) & IncludesMember(Diamondmine,Ivynile))", "prediction": ["all x.(DiamondMine(x) -> (CreedBrothers(x) & IvyNile(x)))", "(CreedBrothers(diamondmine) & IvyNile(diamondmine))", "(IncludesCreedBrothers(diamondmine) & IncludesIvyNile(diamondmine))", "(CreedBrothers(DiamondMine) & IvyNile(DiamondMine))", "(all x.(DiamondMine(x) -> (CreedBrothers(x) | IvyNile(x))))", "(exists x.(DiamondMine(x) & CreedBrothers(x)) & exists y.(IvyNile(y) & Mine(x,y))))", "(IncludesCreedBrothers(DiamondMine) & IncludesIvyNile(DiamondMine))", "(all x.(DiamondMine(x) -> CreedBrothers(x)) & all y.(DiamondMine(y) -> IvyNile(y)))", "all x y.((DiamondMine(x) & CreedBrothers(y) & IvyNile(z)) -> Includes(x,y))", "all x.(DiamondMine(x) -> (CreedBrothers(x) & IvyNile(x)))", "all x.(DiamondMine(x) -> (CreedBrothers(x) & IvyNile(x)))", "all x.(DiamondMine(x) -> (IncludesCreedBrothers(x) & IncludesIvyNile(x)))", "all x y z.((DiamondMine(x) & CreedBrothers(y) & IvyNile(z)) -> Includes(x,y,z))", "all x.(DiamondMine(x) -> (CreedBrothers(x) & IvyNile(x)))", "All x.(DiamondMine(x) -> (CreedBrothers(x) & IvyNile(x)))", "All x.(DiamondMiner(x) -> (CreedBrothers(x) & IvyNile(x)))"]}
{"id": "folio_validation_98", "nl": "Imperium has a feud with Diamond Mine.", "fol": "HasFeudWith(Imperium,Diamondmine)", "prediction": ["all x.(Imperium(x) -> FeudWithDiamondMine(x))", "all x y.((Imperium(x) & DiamondMine(y)) -> Feud(x,y))", "(FeudWithDiamondMine(Imperium))", "(FudWithDiamondMine(Imperium))", "all x.(Imperium(x) -> FeudWithDiamondMine(x))", "all x y.((Imperium(x) & DiamondMine(y)) -> FeudWith(x,y))", "(FeudWithDiamondMine(Imperium))", "all x.(Imperium(x) -> FeudWithDiamondMine(x))", "all x y.((Imperium(x) & DiamondMine(y)) -> Feud(x,y))", "(FuedWithDiamondMine(imperium)", "(FudWithDiamondMine)", "(FeudWithDiamondMine(Imperium))", "all x y.((Imperium(x) & DiamondMine(y)) -> FeudWith(x,y))", "all x.(Imperium(x) -> FeudWithDiamondMine(x))", "All x.(Imperium(x) -> FeudWithDiamondMine(x))", "All x.(Imperium(x) -> FeudWithDiamondMine(x))"]}
{"id": "folio_validation_99", "nl": "Roderick strong leads a professional wrestling stable.", "fol": "exists x.(LeaderOf(Roderickstrong,x) & IsProfessionalWrestlingStable(x))", "prediction": ["all x.((Roderick(x) & StrongLeadsProfessionalWrestlingStable(x)) -> ProfessionalWrestlingStable(x))", "all x y.((Roderick(x) & ProfessionalWrestlingStable(y)) -> StrongLeads(x,y))", "Roderick StrongLeadsProfessionalWrestlingStable(roderick,strong)", "(StrongLeadsProfessionalWrestlingStable(Roderick))", "all x.((Roderick(x) & StrongLeadsProfessionalWrestlingStable(x)) -> ProfessionalWrestlingStable(x))", "all x y.((Roderick(x) & ProfessionalWrestlingStable(y)) -> StrongLeads(x,y))", "Roderick StrongLeadsProfessionalWrestlingStable(Roderick)", "all x.((Roderick(x) & StrongLeadsProfessionalWrestlingStable(x)) -> Strong(x))", "all x.(RoderickStrongLeadsProfessionalWrestlingStable(x) -> ProfessionalWrestlingStable(x))", "(StrongLeadsProfessionalWrestlingStable(Roderick,Wrestling))", "Roderick StrongLeadsProfessionalWrestlingStable(roderick)", "all x y.((Roderick(x) & ProfessionalWrestlingStable(y)) -> LeadsStrong(x,y))", "Roderick leads a professional wrestling stable.", "(StrongLeadsProfessionalWrestlingStable(Roderick))", "Roderick StrongLeadsProfessionalWrestlingStable(Roderick)", "Roderick StrongLeadsProfessionalWrestlingStable(roderick,strong,stable)"]}
{"id": "folio_validation_100", "nl": "Roderick strong leads the Creed Brothers.", "fol": "LeaderOf(Roderickstrong,Creedbrothers)", "prediction": ["all x.((Roderick(x) & CreedBrothers(x)) -> StrongLeads(x,CreedBrothers))", "Roderick StrongLeadsCreedBrothers(roderick,creed)", "all x y.((Roderick(x) & CreedBrothers(y)) -> StrongLeads(x,y))", "(StrongLeads(Roderick,CreedBrothers))", "Roderick StrongLeadsCreedBrothers(Roderick)", "(StrongLeadsCreedBrothers(Roderick))", "all x.((Roderick(x) & CreedBrothers(x)) -> StrongLeads(x))", "(StrongLeadsCreedBrothers(Roderick,CreedBrothers))", "Roderick leads the CreedBrothers.", "Roderick StrongLeadsCreedBrothers.", "(StrongLeads(Roderick,CreedBrothers))", "Roderick StrongLeadsCreedBrothers(roderick)", "Roderick leads CreedBrothers.", "Roderick StrongLeadsCreedBrothers(roderick)", "Roderick leads the Creed Brothers.", "Roderick StrongLeadsCreedBrothers."]}
{"id": "folio_validation_101", "nl": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.", "fol": "all x.((IsProfessionalWrestlingStable(x) & IncludesMember(x,Ivynile)) -> -HasFeudWith(Imperium,x))", "prediction": ["all x.(Imperium(x) -> -FudWithProfessionalWrestlingStable(x))", "all x y.((Imperium(x) & ProfessionalWrestlingStable(y) & IncludesIvyNile(x,y)) -> -Feud(x,y))", "all x.((Imperium(x) & -FeudWithProfessionalWrestlingStable(x) & IncludesIvyNile(x)) -> -FeudWithIvyNile(x))", "(-FuedWithProfessionalWrestlingStable(IvyNile))", "all x.(Imperium(x) -> -FeudWithProfessionalWrestlingStable(x))", "(-FudWithProfessionalWrestlingStable(IvyNile) & Imperium(Imperium))", "all x y.((Imperium(x) & ProfessionalWrestlingStable(y) & IvyNile(x)) -> -Feud(x,y))", "all x.((Imperium(x) & ProfessionalWrestlingStable(x) & IncludesIvyNile(x)) -> -Feud(x))", "(FeudWithProfessionalWrestlingStable(IvyNile) & -IvyNileFeud(IvyNile))", "(-FeudWithProfessionalWrestlingStable(IvyNile))", "all x.(Imperium(x) -> (-FudWithProfessionalWrestlingStable(x) & IncludesIvyNile(x)))", "all x y.((Imperium(x) & ProfessionalWrestlingStable(y) & IncludesIvyNile(x,y)) -> -FeudWith(x,y))", "exists x.(Imperium(x) & -exists y.(ProfessionalWrestlingStable(y) & IncludesIvyNile(x,y)))", "all x y.((Imperium(x) & ProfessionalWrestlingStable(y) & IvyNile(y)) -> -FeudWith(x,y))", "(-exists x.(Imperium(x) & ProfessionalWrestlingStable(x) & IncludesIvyNile(x)))", "all x y.((Imperium(x) & ProfessionalWrestlingStable(y) & -IvyNile(x)) -> -Feud(x,y))"]}
{"id": "folio_validation_102", "nl": "Symphony No. 9 is a music piece.", "fol": "IsMusicPiece(Symphony9)", "prediction": ["all x.(SymphonyNo.9(x) -> MusicPiece(x))", "(MusicPiece(SymphonyNo.9) & MusicPiece(SymphonyNo.9))", "Symphony No.9 is MusicPiece(Symphony)", "all x y.((SymphonyNo.9(x) & MusicPiece(y)) -> MusicPiece(x,y))", "all x.(SymphonyNo.9(x) -> MusicPiece(x))", "Symphony No.9 is MusicPiece(x)", "(MusicPiece(SymphonyNo.9) & MusicPiece(SymphonyNo.9))", "SymphonyNo.9MusicPiece(Symphony,No.9)", "Symphony No.9 is MusicPiece(symphony)", "(MusicPiece(SymphonyNo.9) & No.1(SymphonyNo.9))", "All x.(SymphonyNo.9(x) -> MusicPiece(x))", "Symphony No.9 (MusicPiece)", "all x.(SymphonyNo9.(x) -> MusicPiece(x))", "all x.(SymphonyNo.9(x) -> MusicPiece(x))", "All x.(SymphonyNo.9(x) -> MusicPiece(x))", "All x.(SymphonyNo.9(x) -> MusicPiece(x))"]}
{"id": "folio_validation_103", "nl": "Composers write music pieces.", "fol": "all x y.((IsMusicPiece(x) & WrittenBy(x,y)) -> Composer(y))", "prediction": ["all x.(Composer(x) -> WritesMusicPiece(x))", "all x y.((Composer(x) & MusicPiece(y)) -> Writes(x,y))", "all x y z.((Composer(x) & MusicPiece(y) & MusicPiece(z)) -> Writes(x,y,z))", "all x.(Composer(x) -> WritesMusicPieces(x))", "all x y.((Composer(x) & MusicPiece(y)) -> Writes(x,y))", "all x y z.((Composer(x) & MusicPiece(y) & MusicPiece(z)) -> Writes(x,y,z))", "all x.(Composer(x) -> WritesMusicPiece(x))", "all x y.((Composer(x) & MusicPiece(y)) -> Writes(x,y))", "all x y z.((Composer(x) & MusicPiece(y) & MusicPiece(z)) -> Write(x,y,z))", "all x y.((Composer(x) & MusicPiece(y)) -> Write(x,y))", "all x.(Composer(x) -> WritesMusicPieces(x))", "all x.(Composer(x) -> WriteMusicPiece(x))", "exists x.(Composer(x) & ComposesMusic(x))", "all x.(Composer(x) -> WritesMusicPiece(x))", "all x y.((Composer(x) & MusicPiece(y)) -> Writes(x,y))", "exists x.(Composer(x) & ComposesMusic(x))"]}
{"id": "folio_validation_104", "nl": "Beethoven wrote Symphony No. 9.", "fol": "WrittenBy(Symphony9,Beethoven)", "prediction": ["all x y z.((Boboss(x) & SymphonyNo.9(y) & Symphony(z)) -> WrittenBy(x,y,z))", "all x y.((Boboss(x) & SymphonyNo.9)) -> WrittenBy(x,y))", "all x.((Boboeton(x) & SymphonyNo.9(x)) -> WrittenBy(x,y))", "Beethoven wrote Symphony No. 9 (Benedict) & Symphony No. 9 (Benedict) & Symphony No. 9 (Benedict))))", "all x y z.((Bobop(x) & SymphonyNo.9(y) & Symphony(z)) -> WrittenBy(x,y,z))", "(writtenSymphonyNo.9) by Beethoven.", "all x.((Bobo Beethoven(x) & SymphonyNo.9)) -> WrittenBy(x,y))", "(writtenSymphonyNo.9) by Beethoven(Benjamin,SymphonyNo.9))", "((Boboeton(Bobosh) & SymphonyNo.9)) -> Writes(Bobosh))", "Beethoven wrote Symphony No.9 (Bobop.)", "(BenjaminBoboss wrote SymphonyNo.9).", "Beethoven wrote Symphony No. 9 & Symphony No. 9 (Boboss,Symphony))", "All x y.((Bobopist(x) & SymphonyNo.9(y)) -> WrittenBy(x,y))", "all x.((Boboeton(x) & SymphonyNo.9)) -> WrittenBy(x,y))", "Beethoven wrote Symphony No.9(Bernstein)", "Beethoven wrote Symphony No. 9."]}
{"id": "folio_validation_105", "nl": "Vienna Music Society premiered Symphony No. 9.", "fol": "PremieredBy(Viennamusicsociety,Symphony9)", "prediction": ["(ViennaMusicSymphonySocietyPremieredSymphonyNo.9))", "All x y.((ViennaMusicSaciety(x) & SymphonyNo.9)) -> Premiered(x,y))", "-ViennaMusicStadiumPremieredSymphonyNo.9(ViennaMusicStadium)", "(ViennaMusicStadium(Vienna) & SymphonyNo.9(Vienna))", "Vienna MusicSymphonySociety (ViennaMusicStadium) premieredSymphonyNo.9(ViennaMusicStadium)", "all x y.((ViennaMusicSymphony(x) & SymphonyNo.9)) -> Premiered(x,y))", "Symphony No.9 (ViennaMusicSymphonySatellite)", "All x.((ViennaMusicStadium(x) & SymphonyNo.9(x)) -> Premiered(x))", "-PremieredSymphonyNo.9(ViennaMusicScientific(ViennaMusicScientific)", "(ViennaMusicSafari(ViennaMusicSafari) & SymphonyNo.9(ViennaMusicSafari))", "Symphony No. 9 premiered by ViennaMusicSymphonyStay(ViennaMusicStay)", "(PremieredSymphonyNo.9))", "the ViennaMusicSatellite premieredSymphonyNo.9(ViennaMusicSatellite)", "The Vienna MusicSaciety premiered Symphony No.9 (ViennaMusicSac.)", "Symphony No.9 (ViennaMusicStadium)", "Symphony No.9 (ViennaMusicSymphonySociety)"]}
{"id": "folio_validation_106", "nl": "Vienna Music Society is an orchestra.", "fol": "IsOrchestra(Viennamusicsociety)", "prediction": ["all x.(ViennaMusicSymposia(x) -> Orchestra(x))", "(ViennaMusicSyst\u00e8me(Vienna) & Orchestra(Vienna))", "The ViennaMusicSyst\u00e8me(Vienna) is anOrchestra(Vienna)", "All x.(ViennaMusicStadium(x) -> Orchestra(x))", "(ViennaMusicStadium(Vienna) & Orchestra(Vienna))", "All x.((ViennaMusicSymposia(x) & Orchestra(x)) -> Operation(x))", "all x y.((ViennaMusicSymposia(x) & Orchestra(y)) -> Operation(x,y))", "(ViennaMusicSymposia(Vienna,Music) & Orchestra(Vienna,Music))", "The ViennaMusicSaciety(Vienna) is anOrchestra(Vienna)", "Die WienerMusicSymposia(Vienna) & Orchestra(Vienna,Vienna))", "all x.(ViennaMusicSyst\u00e8me(x) -> Orchestra(x))", "the ViennaMusicStructure(Vienna) -> Orchestra(Vienna))", "All x.((ViennaMusicStadium(x) & Orchestra(x)) -> Operation(x))", "all x.(ViennaMusicStadium(x) -> Orchestra(x))", "All x.((ViennaMusicSymposia(x) & Orchestra(x)) -> Operation(x))", "(Orchestra(ViennaMusicSociety)"]}
{"id": "folio_validation_107", "nl": "Beethoven leads the Vienna Music Society.", "fol": "Leads(Beethoven,Viennamusicsociety)", "prediction": ["all x.((Boboss(x) & ViennaMusicScientific(x)) -> Leads(x,y))", "all x y.((Boboss(x) & ViennaMusicScientific(y)) -> Leads(x,y))", "(LeadsViennaMusicSyst\u00e8me(Benedictorian) & Beethoven(Benedictorian))", "-LeadsViennaMusicSyst\u00e8me(Benedictorian)", "Beethoven leads the ViennaMusicSyst\u00e8me(Benedict)", "(LeadsViennaMusicSyst\u00e8me(Benedictovich,MusicSyst\u00e8me) & Beethoven(Benedictovich))", "all x.((Bobo Beethoven(x) & ViennaMusicSyst\u00e8me(x)) -> Leads(x,y))", "all x y.((Bond(x) & ViennaMusicScientific(y)) -> Leads(x,y))", "All x.(Bobo Beethoven(x) -> LeadsViennaMusicSyst\u00e8me(x))", "Beethoven leads ViennaMusicSyst\u00e8me(Benedict)", "(LeadsViennaMusicSec.(Bobo Beethoven) & ViennaMusicSec.(Bobo Beethoven)))", "Beethoven leads the ViennaMusicSect.", "all x.((Boboss(x) & ViennaMusicSyst\u00e8me(x)) -> Leads(x,y))", "Beethoven leads the ViennaMusicSyst\u00e8me.", "all x y.((Bondor(x) & ViennaMusicSyst\u00e8me(y)) -> Leads(x,y))", "(LeadsViennaMusicSyst\u00e8me(Bobo Beethoven)"]}
{"id": "folio_validation_108", "nl": "Orchestras are led by conductors.", "fol": "all x y.((IsOrchestra(x) & Leads(y,x)) -> IsConductor(y))", "prediction": ["all x.(Orchestra(x) -> LeadByConductor(x))", "all x y.((Orchestra(x) & Conductor(y)) -> Leads(x,y))", "(LeadsByConductor(orchestra) | LeadsByConductor(orchestra)))", "all x y z.((Orchestra(x) & Conductor(y) & Conductor(z)) -> Leads(x,y,z))", "all x.(Orchestra(x) -> LeadByConductor(x))", "all x y.((Orchestra(x) & Conductor(y)) -> Leads(x,y))", "all x.(Orchestra(x) -> LeadsByConductor(x))", "all x y.((Orchestra(x) & Conductor(y)) -> Leads(x,y))", "all x y z.((Orchestra(x) & Conductor(y) & Conductor(z)) -> Leads(x,y,z))", "all x.(Orchestra(x) -> LedByConductor(x))", "all x y.((Orchestra(x) & Conductor(y)) -> LedBy(x,y))", "all x.(Orchestra(x) -> LeadByConductor(x))", "all x.(Orchestra(x) -> LedByConductors(x))", "all x.(Orchestra(x) -> LeadsByConductors(x))", "all x y.((Orchestra(x) & Conductor(y)) -> Leads(x,y))", "all x.(Orchestra(x) -> LeadsByConductors(x))"]}
{"id": "folio_validation_109", "nl": "Beethoven is a composer.", "fol": "Composer(Beethoven)", "prediction": ["all x.((Bobop Beethoven(x) & Composer(x)) -> Composer(x))", "all x.(Bobo Beethoven(x) -> Composer(x))", "all x.((Bobo Beethoven(x) & Composer(x)) -> Composer(x))", "Beethoven is a composer.", "(Composer(Benedict) & Composer(Benedict))", "all x.(Bobo Beethoven(x) -> Composer(x))", "Beethoven is a composer.", "all x.((Bobophren(x) & Composer(x)) -> Composer(x))", "(Composer(Benedict) & Composer(Benedict))", "all x.(Bethlehem(x) -> Composer(x))", "Beethoven is composer(x)", "all x.((Bobo Beethoven(x) & Composer(x)) -> Composer(x))", "Beethoven is a composer.", "(Composer( Beethoven))", "all x.((Bondore(x) & Composer(x)) -> Composite(x))", "(Composer(Benjamin)"]}
{"id": "folio_validation_110", "nl": "Some orchestras premiered music pieces.", "fol": "exists x y.(IsOrchestra(x) & IsMusicPiece(y) & PremieredBy(x,y))", "prediction": ["exists x.(Orchestra(x) & PremieredMusicPieces(x))", "exists x y.(Orchestra(x) & MusicPiece(y) & Premiered(x,y))", "exists x.(Orchestra(x) & PremieredMusicPieces(x))", "exists x.(Orchestra(x) & PremieredMusicPieces(x))", "exists x y.(Orchestra(x) & MusicPiece(y) & Premiered(x,y))", "exists x.(Orchestra(x) & PremieredMusicPieces(x))", "exists x.(Orchestra(x) & PremieredMusicPieces(x))", "exists x y.(Orchestra(x) & MusicPiece(y) & Premiered(x,y))", "exists x.(Orchestra(x) & PremieredMusicPiece(x))", "exists x.(Orchestra(x) & PrimedMusicPieces(x))", "exists x.(Orchestra(x) & PremieredMusicPieces(x))", "exists x y.(Orchestra(x) & MusicPiece(y) & Premiered(x,y))", "exists x.(Orchestra(x) & PrimitivedMusicPieces(x))", "exists x y.(Orchestra(x) & MusicPiece(y) & Premiered(x,y))", "exists x.(Orchestra(x) & PremieredMusic(x))", "exists x.(Orchestra(x) & PrimedMusic(x))"]}
{"id": "folio_validation_111", "nl": "Beethoven is not a conductor.", "fol": "-IsConductor(Beethoven)", "prediction": ["all x.(Bobo Beethoven(x) -> -Conductor(x))", "(-Conductor(Benjamin))", "all x.(Bobo(x) -> -Conductor(x))", "((Boboet(Bobo) & -Conductor(Bobo)))", "Beethoven is notConductor(Benedict)", "(-Conductor(Benedict))", "all x.(Bobo Beethoven(x) -> -Conductor(x))", "all x.(Belo(x) -> -Conductor(x))", "Beethoven is not conductor.", "-(Conductor(Benjamin,Bolt))", "all x.(Bondor(x) -> -Conductor(x))", "(-Conductor(Benjamin)", "(-Conductor(Bobo Beethoven))", "Beethoven is not conductor.", "(-Conductor(Benedict)", "-Conductor(Bernstein)"]}
{"id": "folio_validation_112", "nl": "All of Zaha Hadid's design styles are timeless.", "fol": "all x.(ZahaHadidDesignStyle(x) -> IsTimeless(x))", "prediction": ["all x.(ZahaHadid(x) -> TimelessDesignStyle(x))", "all x.((DesignStyle(x) & ZahaHadid(x)) -> Timeless(x))", "all x.(ZahaHadidDesignStyle(x) -> Timeless(x))", "All of ZahaHadid's DesignStylesTennissimistic(ZahaHadid)", "(DesignStyle(ZahaHadid) & Timeless(ZahaHadid,Design,Design))", "all x y.((DesignStyle(x) & ZahaHadid(y)) -> Timeless(x,y))", "all x.((ZahaHadid(x) & DesignStyle(x)) -> Timeless(x))", "all x.(DesignStyle(x) -> Timeless(x))", "(All x.(ZahaHadidDesignStyle(x) -> Timeless(x)))", "all x.(ZahaHadid(x) -> TimelessDesignStyle(x))", "all x y.((ZahaHadid(x) & DesignStyle(y)) -> Timeless(x,y))", "all x y.((DesignStyle(x) & ZahaHadid(y)) -> Timeless(y))", "all x.(ZahaHadidDesignStyle(x) -> Timeless(x))", "All x.(DesignStyle(x) -> Timeless(x))", "all x.(ZahaHadid(x) -> TimelessDesignStyles(x))", "all x.(ZahaHadidDesignStyle(x) -> Timeless(x))"]}
{"id": "folio_validation_113", "nl": "No mass product design is timeless.", "fol": "all x.(IsMassProductDesign(x) -> -IsTimeless(x))", "prediction": ["-exists x.(MassProductDesign(x) & Timeless(x))", "all x.(MassProductDesign(x) -> -Timeless(x))", "-exists x.(MassProductDesign(x) & Timeless(x))", "\u2013 -MassProductDesign(x) & Timeless(x))", "all x.(MassProductDesign(x) -> -Timeless(x))", "-exists x.(MassProductDesign(x) & Timeless(x))", "(exists x.(MassProductDesign(x) & Timeless(x)))", "all x.(MassProductDesign(x) -> -Timeless(x))", "-exists x.(MassProductDesign(x) & Timeless(x))", "-exists x.(MassProductDesign(x) & Timeless(x))", "-exists x.(MassProductDesign(x) & Timeless(x))", "-exists x.(MassProductDesign(x) & -Timeless(x))", "-exists x.(MassProductDesign(x) & Timeless(x))", "-exists x.(MassProductDesign(x) & -Timeless(x))", "-exists x.(MassProductDesign(x) & Timeless(x))", "-exists x.(MassProductDesign(x) & Timeless(x))"]}
{"id": "folio_validation_114", "nl": "Either Zaha Hadid's design style or Kelly Wearstler's design style. ", "fol": "all x.(ZahaHadidDesignStyle(x) | KellyWearstlerDesignStyle(x))", "prediction": ["(exists x.(DesignStyle(x) & ZahaHadid(x)) | exists y.(DesignStyle(y) & KellyWearstler(y))))", "((ZahaHadidDesignStyle(z) | KellyWearstlerDesignStyle(z)))", "((DesignStyle(ZahaHadid) | DesignStyle(KellyWearstler)))", "exists x.(DesignStyle(x) & (ZahaHadidDesignStyle(x) | KellyWearstlerDesignStyle(x)))", "(DesignStyle(ZahaHadid) | DesignStyle(KellyWearstler))", "all x.((ZahaHadid(x) | KellyWearstler(x)) -> DesignStyle(x))", "Either ZahaHadid's design style or KellyWearstler's design style.", "((ZahaHadid(x) | KellyWearstler(x)))", "all x.((DesignStyle(x) & (ZahaHadid(x) | KellyWearstler(x))) -> (DesignStyle(x)))", "(exists x.(DesignStyle(x) & ZahaHadid(x)) | exists y.(DesignStyle(y) & KellyWearstler(y))))", "exists x.(DesignStyle(x) & (ZahaHadidDesignStyle(x) | KellyWearstlerDesignStyle(x)))", "all x.((ZahaHadid(x) | KellyWearstler(x)) -> (DesignStyle(x) | DesignStyle(x)))", "((DesignStyle(ZahaHadid) | DesignStyle(KellyWearstler)))", "either ZahaHadidsDesignStyle(z) | KellyWearstlersDesignStyle(z))", "exists x.(DesignStyle(x) & (ZahaHadid(x) | KellyWearstler(x)))", "(exists x.(DesignStyle(x) & ZahaHadid(x)) | exists y.(DesignStyle(y) & KellyWearstler(y))))"]}
{"id": "folio_validation_115", "nl": "All of Kelly Wearstler's design styles are evocative.", "fol": "all x.(KellyWearstlerDesignStyle(x) -> IsEvocative(x))", "prediction": ["all x.((DesignStyle(x) & KellyWearstler(x)) -> Evocative(x))", "all x.(KellyWearstlerDesignStyle(x) -> Evocative(x))", "all x.((KellyWearstler(x) & DesignStyle(x)) -> Evocative(x))", "all x y.((DesignStyle(x) & KellyWearstler(y)) -> Evocative(y))", "all x y.((KellyWearstler(x) & DesignStyle(y)) -> Evocative(x,y))", "All of KellyWearstler's DesignStylesEvocative(KellyWearstler)", "all x.(KellyWearstlerDesignStyle(x) -> Evocative(x))", "all x.((DesignStyle(x) & KellyWearstler(x)) -> Evocative(x))", "all x.((KellyWearstlerDesignStyle(x) & Evocative(x)) -> Evocative(x))", "all x.(KellyWearstler(x) -> EvocativeDesignStyles(x))", "All of KellyWearstlersDesignStylesEvocative(KellyWearstler)", "(all x.(KellyWearstlerDesignStyle(x) -> Evocative(x)))", "all x y.((DesignStyle(x) & KellyWearstler(y)) -> Evocative(y))", "all x y.((KellyWearstler(x) & DesignStyle(y)) -> Evocative(x))", "(all x.(KellyWearstlerDesignStyle(x) -> Evocative(x)))", "all x.(KellyWearstlerDesignStyle(x) -> Evocative(x))"]}
{"id": "folio_validation_116", "nl": "All of Kelly Wearstler's design styles are dreamy.", "fol": "all x.(KellyWearstlerDesignStyle(x) -> IsDreamy(x))", "prediction": ["all x.((DesignStyle(x) & KellyWearstler(x)) -> Dreamy(x))", "all x.(KellyWearstlerDesignStyle(x) -> Dreamy(x))", "all x.((KellyWearstler(x) & DesignStyle(x)) -> Dreamy(x))", "all x y.((DesignStyle(x) & KellyWearstler(y)) -> Dreamy(y))", "all x y.((KellyWearstler(x) & DesignStyle(y)) -> Dreamy(x))", "all x.(KellyWearstler(x) -> DreamyDesignStyle(x))", "(DreamyDesignStyles(KellyWearstler)", "all x.((DesignStyle(x) & KellyWearstler(x)) -> Dreamy(x))", "All of KellyWearstler's DesignStyles Dreamy.", "All of KellyWearstler's DesignStyles Dreamy(KellyWorstler)", "all x.((KellyWearstlerDesignStyle(x) & Dreamy(x)) -> DesignStyle(x))", "(DreamyDesignStyles(KellyWearstler)", "all x.(KellyWearstlerDesignStyle(x) -> Dreamy(x))", "all x y.((DesignStyle(x) & KellyWearstler(y)) -> Dreamy(x,y))", "all x y.((KellyWearstler(x) & DesignStyle(y)) -> Dreamy(x,y))", "All x.(KellyWearstlerDesignStyle(x) -> Dreamy(x))"]}
{"id": "folio_validation_117", "nl": "If a design by Max is timeless, then a design by Max is a mass product design and evocative.", "fol": "((IsTimeless(ADesignByMax) -> IsMassProductDesign(ADesignByMax)) & IsEvocative(ADesignByMax))", "prediction": ["all x.((Design(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x.((DesignByMax(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "((DesignByMax(x) & Timeless(x)) -> MassProductDesign(x) & Evocative(x)))", "all x y.((Design(x) & Max(y)) -> (Timeless(x) & MassProductDesign(y) & Evocative(y)))", "((Design(Max) & Timeless(Max)) -> (MassProductDesign(Max) & Evocative(Max)))", "all x.((Design(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x.((DesignByMax(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x y.((Design(x) & Max(y)) -> (Timeless(x) & MassProductDesign(y) & Evocative(y)))", "all x y.((Design(x) & DesignByMax(x,y)) -> (Timeless(x) & MassProductDesign(y) & Evocative(y)))", "all x.((Design(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x.((DesignByMax(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x y.((Design(x) & Max(y)) -> (Timeless(x) & MassProductDesign(y) & Evocative(y)))", "all x.((Design(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x.((DesignByMax(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x.((DesignByMax(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x.((DesignByMax(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))"]}
{"id": "folio_validation_118", "nl": "A design by Max is a mass product design.", "fol": "IsMassProductDesign(ADesignByMax)", "prediction": ["all x.((Design(x) & Max(x)) -> MassProductDesign(x))", "all x.(Design(x) -> MassProductDesign(x))", "all x y.((Design(x) & Max(y)) -> MassProductDesign(x,y))", "all x.((Design(x) & Max(x)) -> MassProductDesign(x))", "all x.(Design(x) -> MassProductDesign(x))", "all x y.((Design(x) & Max(y)) -> MassProductDesign(x,y))", "all x.((Design(x) & Max(x)) -> MassProductDesign(x))", "all x y.((Design(x) & Max(y) & MassProductDesign(x,y)) -> MassProductDesign(x,y))", "exists x.(Design(x) & Max(x) & MassProductDesign(x))", "all x.(Design(x) -> MassProductDesign(x))", "all x y.((Design(x) & Max(y)) -> MassProductDesign(x,y))", "all x.((Design(x) & Max(x)) -> MassProductDesign(x))", "all x y.((Design(x) & Max(y) & Design(x,y)) -> MassProduct(x))", "exists x.(Design(x) & ByMax(x) & MassProductDesign(x))", "all x.(Design(x) -> MassProductDesign(x))", "all x y.((Design(x) & Max(y)) -> MassProductDesign(x,y))"]}
{"id": "folio_validation_119", "nl": "A design by Max is evocative and dreamy.", "fol": "(IsEvocative(ADesignByMax) & IsDreamy(ADesignByMax))", "prediction": ["all x.((Design(x) & Max(x)) -> (Evocative(x) & Dreamy(x)))", "all x.(Design(x) -> (Evocative(x) & Dreamy(x)))", "(Design(Max) & Evocative(Max) & Dreamy(Max))", "all x y.((Design(x) & Max(y)) -> (Evocative(x,y) & Dreamy(x)))", "all x.((Design(x) & Max(x)) -> (Evocative(x) & Dreamy(x)))", "all x.(Design(x) -> (Evocative(x) & Dreamy(x)))", "all x y.((Design(x) & Max(y)) -> (Evocative(x) & Dreamy(x)))", "all x.((Design(x) & Max(x)) -> (Evocative(x) & Dreamy(x)))", "exists x.(Design(x) & ByMax(x) & Evocative(x) & Dreamy(x))", "all x.(Design(x) -> (Evocative(x) & Dreamy(x)))", "exists x.(Design(x) & Max(x) & Evocative(x) & Dreamy(x))", "all x y.((Design(x) & Max(y)) -> (Evocative(y) & Dreamy(y)))", "all x.((Design(x) & Max(x)) -> (Evocative(x) & Dreamy(x)))", "all x y.((Design(x) & Max(y)) -> (Evocative(x,y) & Dreamy(x,y)))", "exists x.(Design(x) & ByMax(x) & Evocative(x) & Dreamy(x))", "all x.(Design(x) -> (Evocative(x) & Dreamy(x)))"]}
{"id": "folio_validation_120", "nl": "A design by Max is either evocative or dreamy.", "fol": "((IsEvocative(ADesignByMax) & -IsDreamy(ADesignByMax)) | (-IsEvocative(ADesignByMax) & IsDreamy(ADesignByMax)))", "prediction": ["all x.(Design(x) -> (Evocative(x) | Dreamy(x)))", "all x.((Design(x) & Max(x)) -> (Evocative(x) | Dreamy(x)))", "all x.(Design(x) -> (Evocative(x) | Dreamy(x)))", "all x.((Design(x) & Max(x)) -> (Evocative(x) | Dreamy(x)))", "all x y.((Design(x) & Max(y)) -> (Evocative(y) | Dreamy(y)))", "all x.(Design(x) -> (Evocative(x) | Dreamy(x)))", "exists x.(Design(x) & ByMax(x) & (Evocative(x) | Dreamy(x)))", "all x.((Design(x) & Max(x)) -> (Evocative(x) | Dreamy(x)))", "all x y.((Design(x) & Max(y)) -> (Evocative(x) | Dreamy(y)))", "all x.(Design(x) -> ((Evocative(x) | Dreamy(x))))", "exists x.(Design(x) & Max(x) & (Evocative(x) | Dreamy(x)))", "all x.(Design(x) -> (Evocative(x) | Dreamy(x)))", "exists x.(DesignByMax(x) & (Evocative(x) | Dreamy(x)))", "all x y.((Design(x) & Max(y)) -> (Evocative(x) | Dreamy(y)))", "exists x.(Design(x) & ByMax(x) & (Evocative(x) | Dreamy(x)))", "all x y.((Design(x) & Max(y)) -> (Evocative(y) | Dreamy(y)))"]}
{"id": "folio_validation_121", "nl": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ", "fol": "all x.(RankedHighlyByWTA(x) -> MostActivePlayersInMajorTennis(x))", "prediction": ["all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> ActivePlayerInMajorTennis(x))", "all x y.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> ActivePlayer(y))", "all x.((Player(x) & HighlyRatedByWomensTennisAssociation(x)) -> ActivePlayerInMajorTennis(x))", "all x y.((Player(x) & HighlyRankedByWomensTennisAssociation(x) & MajorTennis(y)) -> ActivePlayer(x,y))", "all x y z.((Player(x) & HighlyRankedByWomensTennisAssociation(x) & MajorTennis(y) & MajorTennis(z)) -> ActivePlayer(x,y,z))", "all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> ActivePlayerInMajorTennis(x))", "all x.(HighlyRankedByWomensTennisAssociation(x) -> ActivePlayerInMajorTennis(x))", "all x.(RatedHighlyByWomensTennisAssociation(x) -> ActivePlayerInMajorTennis(x))", "all x y.((Player(x) & HighlyRatedByWomensTennisAssociation(x)) -> ActivePlayer(y))", "all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> MostActivePlayerInMajorTennis(x))", "all x.((Player(x) & HighlyRatedByWomensTennisAssociation(x)) -> ActivePlayer(x))", "all x y.((Player(x) & HighlyRatedByWomensTennisAssociation(x) & MajorTennis(y)) -> ActivePlayer(x,y))", "all x.(HighlyRankedByWomensTennisAssociation(x) -> ActivePlayerInMajorTennis(x))", "all x y.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> ActivePlayer(y))", "all x y.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> MostActivePlayerInMajorTennis(y))", "all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> ActivePlayerInMajorTennis(x))"]}
{"id": "folio_validation_122", "nl": "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.", "fol": "all x.(DefeatedByIgaSwiatek(x) -> RankedHighlyByWTA(x))", "prediction": ["all x.((LoseToIgaSwiatek(x)) -> HighlyRankedByWomensTennisAssociation(x))", "all x.(LoseToIgaSwiatek(x) -> HighlyRankedByWomensTennisAssociation(x))", "all x y.((LoserToIgaSwiatek(x) & WomensTennisAssociation(y)) -> HighlyRanked(x,y))", "all x.((LostToIgaSwiatek(x) & IgaSwiatek(x)) -> HighlyRankedByWomensTennisAssociation(x))", "all x.((LoseToIgaSwiatek(x) & IgaSwiatek(x)) -> HighlyRankedByWomensTennisAssociation(x))", "all x y.((Lose(x,y) & IgaSwiatek(y)) -> HighlyRankedByWomensTennisAssociation(x))", "all x.(LoseToIgaSwiatek(x) -> HighlyRankedByWomensTennisAssociation(x))", "all x.(LostToIgaSwiatek(x) -> HighlyRankedByWomensTennisAssociation(x))", "all x y.((LostToIgaSwiatek(x) & WomensTennisAssociation(y)) -> HighlyRanked(x,y))", "all x y.((Loss(x,y) & IgaSwiatek(y)) -> HighlyRankedByWomensTennisAssociation(x))", "all x.((LostToIgaSwiatek(x) & IgaSwiatek(x)) -> HighlyRankedByWomensTennisAssociation(x))", "all x.(LosingToIgaSwiatek(x) -> HighlyRatedByWomensTennisAssociation(x))", "all x.((LoseToIgaSwiatek(x)) -> HighlyRankedByWomensTennisAssociation(x))", "(all x.(LittleToIgaSwiatek(x) -> HighlyRatedByWomensTennisAssociation(x))", "(all x.(LosingToIgaSwiatek(x) -> HighlyRankedByWomensTennisAssociation(x))", "all x y.((LostToIgaSwiatek(x) & WomensTennisAssociation(y)) -> HighlyRanked(x,y))"]}
{"id": "folio_validation_123", "nl": "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.", "fol": "all x.(FemalePlayersRolandGarros2022(x) -> DefeatedByIgaSwiatek(x))", "prediction": ["all x.((FemaleTennisPlayer(x) & RolandGarros2022(x)) -> LostToIgaSwiatek(x))", "all x y.((FemaleTennisPlayer(x) & RolandGarros2022(y)) -> LostToIgaSwiatek(x,y))", "all x.((TennisPlayer(x) & RolandGarros2022(x)) -> LostToIgaSwiatek(x))", "all x.((FemaleTennisPlayer(x) & RolandGarros2022(x)) -> LostToIgaSwiatek(x))", "all x.((FemaleTennisPlayer(x) & RolandGarros(x) & IgaSwiatek(x)) -> LostTo(x,y))", "all x y z.((FemaleTennisPlayer(x) & RolandGarros2022(y) & IgaSwiatek(z)) -> LostTo(x,y,z))", "ALL FEMALETENANTSAtRotaryGarros2022LoseToIgaSwiatek(x)", "all x y.((FemaleTennisPlayer(x) & RolandGarros(y) & IgaSwiatek(z)) -> LostTo(x,y,z))", "(all x.(TennisPlayer(x) -> LostToIgaSwiatek(x)))", "All x.(FemaleTennisPlayer(x) -> LostToIgaSwiatek(x))", "All x.(TennisPlayer(x) -> LostToIgaSwiatek(x))", "(all x.(TennisPlayer(x) & RolandGarros(x) & LostToIgaSwiatek(x)) -> Female(x))", "all x y.((FemaleTennisPlayer(x) & RolandGarros2022(y) & LostTo(x,y)) -> IgaSwiatek(x))", "All x.(TennisPlayer(x) & RolandGarros2022(x) & LostToIgaSwiatek(x))", "all x y.((FemaleTennisPlayer(x) & RolandGarros2022(y) & IgaSwiatek(z)) -> LostTo(x,y,z))", "all x.((FemaleTennisPlayer(x) & RolandGarros2022(x)) -> LostToIgaSwiatek(x))"]}
{"id": "folio_validation_124", "nl": "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ", "fol": "all x.(FemalePlayersRolandGarros2022(x) | MalePlayersRolandGarros2022(x))", "prediction": ["(exists x.(FemaleTennisPlayer(x) & RolandGarros(x)) | exists y.(MaleTennisPlayer(y) & RolandGarros(y))))", "(exists x.(Female(x) & TennisPlayer(x) & RolandGarros(x)) | exists y.(Male(y) & TennisPlayer(y) & RolandGarros(y))))", "all x.((Female(x) & RolandGarros(x)) | (Male(x) & RolandGarros(x))))", "((FemaleTennisPlayer(x) & RolandGarros2022)) | (MaleTennisPlayer(x) & RolandGarros2022)))", "(exists x.(TennisPlayer(x) & Female(x)) | exists y.(TennisPlayer(y) & Male(y))))", "all x.((FemaleTennisPlayer(x) & RolandGarros2022(x)) | (MaleTennisPlayer(x) & RolandGarros2022(x))))", "all x.((TennisPlayer(x) & RolandGarros(x)) -> (Female(x) | Male(x)))", "((FemaleTennisPlayer(x) | MaleTennisPlayer(x)))", "all x y z.((Female(x) & TennisPlayer(y) & RolandGarros(z)) | (Male(x) & RolandGarros(y))))", "(exists x.(FemaleTennisPlayer(x) & RolandGarros2022)) | exists y.(MaleTennisPlayer(y) & RolandGarros2022))))", "exists x.(Female(x) & TennisPlayer(x,RolandGarros) | Male(x,RolandGarros))", "all x.((Female(x) & RolandGarros2022(x)) | Male(x))", "(exists x.(TennisPlayer(x) & Female(x) & RolandGarros(x)) | exists y.(TennisPlayer(y) & Male(y) & RolandGarros(y))))", "(exists x.(Female(x) & TennisPlayer(x) & RolandGarros(x)) | exists y.(Male(y) & TennisPlayer(y) & RolandGarros(y))))", "exists x.(FemaleTennisPlayer(x) | MaleTennisPlayer(x))", "((FemaleTennisPlayer(x) & RolandGarros2022)) | (MaleTennisPlayer(x) & RolandGarros2022)))"]}
{"id": "folio_validation_125", "nl": "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.", "fol": "all x.(MalePlayersRolandGarros2022(x) -> DefeatedByRafaelNadal(x))", "prediction": ["all x.((Male(x) & RolandGarros(x) & RolandGarros(x)) -> LostToRafaelNadal(x))", "ALLMALE(MenTennisPlayer(Men) & RolandGarros(Men) & RolandGarros(Men) & RolandGarros(Men) & RolandGarros(Men) & RolandGarros(Men) & RolandGarros(Men) & RolandGarros(Men) & RolandGarros(Men) & RolandGarros(Men) & RolandGarros(Men) & RolandGarros(Men)", "all x y.((Male(x) & RolandGarros(y) & RolandGarros(y)) -> LostTo(x,y))", "all x.((MaleTennisPlayer(x) & RolandGarros2022(x)) -> LostToRafaelNadal(x))", "all x.((Male(x) & RolandGarros2022(x)) -> LostToRafaelNadal(x))", "(all x.((Male(x) & RolandGarros(x) & RolandGarros(x)) -> LostToRafaelNadal(x)))", "all x.((TennisPlayer(x) & RolandGarros(x) & RolandGarros(x)) -> LostToRafaelNadal(x))", "all x.((MaleTennisPlayer(x) & RolandGarros(x) & RolandGarros(x)) -> LostToRafaelNadal(x))", "all x y.((MaleTennisPlayer(x) & RolandGarros2022(y)) -> LostToRafaelNadal(x,y))", "all x.((PaceTennisPlayer(x) & RolandGarros2022(x)) -> LostToRafaelNadal(x))", "all x y.((Male(x) & RolandGarros(y) & RolandGarros(z) & RolandGarros(y)) -> LostToRafaelNadal(x,y,z))", "all x y z.((Male(x) & TennisPlayer(y) & RolandGarros(z) & RolandGarros(z) & RolandGarros(y,z)) -> LostTo(x,y,z))", "all x y.((MaleTennisPlayer(x) & RolandGarros(y) & RolandGarros(y)) -> LostTo(x,y))", "(all x.(MalePlayer(x) -> LostToRonaldGarros(x)))", "All x.(Male(x) -> LostToRonaldGarros(x))", "All x.(MaleTennisPlayer(x) -> LostToRonaldGarros(x,RoyalNadal))"]}
{"id": "folio_validation_126", "nl": "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.", "fol": "((RankedHighlyByWTA(CocoGauff) | DefeatedByRafaelNadal(CocoGauff)) -> -MalePlayersRolandGarros2022(CocoGauff))", "prediction": ["all x.((Player(x) & (RatedHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "all x y.((CocoonGauff(x) & Player(y) & (RatedHighlyByWomensTennisAssociation(y) | LostToRafaelNadal(y))) -> -MaleTennisPlayer(x,y))", "all x.((Player(x) & (RankedHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "all x.((Player(x) & (RatedHighlyByWomensTennisAssociation(x) | PlayerLostToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "(all x.((Player(x) & HighlyRatedByWomensTennisAssociation(x)) | (Player(x) & LostToRafaelNadal(x)))) -> -MaleTennisPlayer(x))", "(all x.((Player(x) & HighlyRated(x)) | (Player(x) & LostToRafaelNadal(x)))) -> -MaleTennisPlayer(x))", "all x.((Player(x) & (RatedHighly(x) | LostToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "all x y.((Player(x) & Player(y) & (RatedHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(y))) -> -MaleTennisPlayer(x,y))", "all x.((CocoaGauff(x) & (RatedHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -MaleTennisPlayerAtRolandGarros2022(x))", "(all x.((Player(x) & RanksHighly(x)) | (Player(x) & LostToRafaelNadal(x)))) -> -MalePlayer(x))", "((Player(Cocoa) & (RatedHighlyByWomensTennisAssociation(Cocoa) | LostToRafaelNadal(Cocoa))) -> -MaleTennisPlayerAtRolandGarros2022(Cocoa))", "all x.((Player(x) & (RanksHighly(x) | LostToRafaelNadal(x))) -> -MalePlayer(x))", "all x.((Player(x) & (HighlyRatedByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "all x.((Player(x) & (RatedHighlyByWomensTennisAssociation(x) | PlayerLoseToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x) & PlayerLostToRafaelNadal(x)) -> -MaleTennisPlayerAtRolandGarros2022(x))", "all x.((CocoonGauff(x) & (RatedHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -MaleTennisPlayer(x))"]}
{"id": "folio_validation_127", "nl": "Coco Gauff is among the most active players in major tennis.", "fol": "MostActivePlayersInMajorTennis(CocoGauff)", "prediction": ["all x.(CocoGauff(x) -> ActivePlayer(x))", "CocoGauff is amongstMostActivePlayersInMajorTennis(coco)", "Coco Gauff is amongstMostActivePlayersInMajorTennis(coco)", "all x.((CocoGauff(x) & ActiveInMajorTennis(x)) -> PlaysIn(x,y))", "AmongstMostActivePlayersInMajorTennis(CocoonGauff)", "(MostActivePlayer(CocoonGauff) & MajorTennis(CocoonGauff))", "CocoGauff is one of the most active players in major tennis.", "all x.(CocoGauff(x) -> ActivePlayerInMajorTennis(x))", "all x.((CocoGauff(x) & ActivePlayer(x)) -> MajorTennis(x))", "(MostActivePlayer(CocoGauff) & MajorTennis(CocoGauff))", "CocoGauff (Cooper(Gauff) & MajorTennisPlayer(Gauff))", "AmongstMostActivePlayersInMajorTennis(CocoGauff)", "Coco Gauff is amongstthemostActivePlayersInMajorTennis(Coco)", "CocoGauff is amongstMostActivePlayersInMajorTennis(Coco)", "(ActivePlayer(CocoonGauff) & MajorTennis(CocoonGauff))", "all x.(CocoGauff(x) -> ActivePlayerInMajorTennis(x))"]}
{"id": "folio_validation_128", "nl": "Coco Gauff has lost to Rafael Nadal.", "fol": "DefeatedByRafaelNadal(CocoGauff)", "prediction": ["(Loss(CocoonGauff) -> RafaelNadal(CocoonGauff))", "-(CocoaGauff(co) & RafaelNadal(co))", "all x.(CocoonGauff(x) -> LosesToRafaelNadal(x))", "all x y.((CocoonGauff(x) & RafaelNadal(y)) -> LosesTo(x,y))", "-LoseTo(CocoonGauff,RafaelNadal)", "(Loss(CocoonGauff) -> LostToRafaelNadal(CocoonGauff))", "(LoseTo(CocoonGauff) & LostTo(CocoonNadal))", "(LoseToRafaelNadal(CocoonGauff))", "-LoseToRafaelNadal(CocoonGauff)", "All x.(CocoGauff(x) -> LosesToRafaelNadal(x))", "-(CocoonGauff(co) & LostToRafaelNadal(co))", "(LostToRafaelNadal(CocoonGauff))", "all x.(CocoonGauff(x) -> LostToRafaelNadal(x))", "all x y.((CocoonGauff(x) & RafaelNadal(y)) -> LostTo(x,y))", "(PastsToRafaelNadal(CocoonGauff))", "-(CocoonGauff(co) & RafaelNadal(co))"]}
{"id": "folio_validation_129", "nl": "Coco Gauff is not a player who lost to Iga Swiatek or one of the most active players in major tennis.", "fol": "(-DefeatedByIgaSwiatek(CocoGauff) | -MostActivePlayersInMajorTennis(CocoGauff))", "prediction": ["(-(Player(CocoonGauff) & LostToIgaSwiatek(CocoonGauff)) | (Player(CocoonGauff) & -LostToIgaSwiatek(CocoonGauff))))", "all x.(CocoGauff(x) -> (-(Player(x) & LostToIgaSwiatek(x)) | (Player(x) & MostActiveInMajorTennis(x)))))", "all x.(Coco(x) -> (-(Player(x) & LostToIgaSwiatek(x)) | (Player(x) & MostActiveInMajorTennis(x)))))", "-(CocoaGauff(co) & -(LostToIgaSwiatek(co) | MostActivePlayerInMajorTennis(co)))", "(-(Player(Coco) & LostToIgaSwiatek(Coco)) | (Player(Coco) & MostActiveInMajorTennis(Coco))))", "(-LostToIgaSwiatek(CocoGauff) & -MostActivePlayerInMajorTennis(CocoGauff))", "-((Player(CocoonGauff) & -LostToIgaSwiatek(CocoonGauff)) & -(Player(CocoonGauff) & PlaysMostActiveTennis(CocoonGauff)))", "all x.(CocoonGauff(x) -> (-(Player(x) & LostToIgaSwiatek(x)) | (Player(x) & MostActiveInMajorTennis(x)))))", "(-(Player(CocoonGauff) & LostToIgaSwiatek(CocoonGauff)) | (-Player(CocoonGauff) & LostToIgaSwiatek(CocoonGauff))))", "all x.(CocoGauff(x) -> (-LostToIgaSwiatek(x) & -MostActivePlayerInMajorTennis(x)))", "\u2013 (-LostToIgaSwiatek(CocoGauff) & -MostActivePlayerInMajorTennis(CocoGauff))", "(-LostToIgaSwiatek(CocoonGauff) & -MostActivePlayerInMajorTennis(CocoonGauff))", "-(CocoonGauff(co) & -(LoseToIgaSwiatek(co) | MostActivePlayerInMajorTennis(co)))", "(-(Poker(CocoGauff) & LostToIgaSwiatek(CocoGauff)) | (-Poker(CocoGauff) & LostToIgaSwiatek(CocoGauff))))", "all x.(CocoAuff(x) -> (-LostToIgaSwiatek(x) | MostActivePlayerInMajorTennis(x)))", "all x.(Coco(x) -> (-LostToIgaSwiatek(x) | MostActivePlayerInMajorTennis(x)))"]}
{"id": "folio_validation_130", "nl": "All cats are mammals.", "fol": "all x.(IsCat(x) -> IsMammal(x))", "prediction": ["all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "(all x.(Cat(x) -> Mammal(x))", "(Mammal(cat) & Mammal(cat))", "all x.(Cat(x) -> Mammal(x))", "(all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Kit(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "exists x.(Cat(x) & Mammal(x))"]}
{"id": "folio_validation_131", "nl": "Some pets are not mammals.", "fol": "exists x.(IsPet(x) & -IsMammal(x))", "prediction": ["exists x.(Pet(x) & -Mammal(x))", "exists x.(Pet(x) & -Mammal(x))", "exists x.(Pet(x) & -Mammal(x))", "exists x.(Pet(x) & -Mammal(x))", "exists x.(Pet(x) & -Mammal(x))", "exists x y.(Pet(x) & Pet(y) & -Mammal(x))", "exists x.(Pet(x) & -Mammal(x))", "exists x.(Animal(x) & -Mammal(x))", "exists x.(Pet(x) & -Mammal(x))", "exists x.(Pet(x) & -Mammal(x))", "exists x.(Pet(x) & -Mammal(x))", "exists x.(Pet(x) & -Mammal(x))", "exists x.(Pet(x) & -Mammal(x))", "exists x.(Pet(x) & -Mammal(x))", "exists x.(Pet(x) & -Mammal(x))", "exists x.(Pet(x) & -Mammal(x))"]}
{"id": "folio_validation_132", "nl": "No pets are cats.", "fol": "all x.(IsPet(x) -> -IsCat(x))", "prediction": ["-exists x.(Pet(x) & Cat(x))", "all x.(Pet(x) -> -Cat(x))", "-exists x.(Pet(x) & Cat(x))", "all x.(Pet(x) -> -Cat(x))", "-exists x.(Pet(x) & Cat(x))", "(exists x.(Pet(x) & Cat(x)))", "all x.(Pet(x) -> -Cat(x))", "-exists x.(Pet(x) & Cat(x))", "(exists x.(Pet(x) & Cat(x)))", "all x.(Pet(x) -> -Cat(x))", "-exists x.(Pet(x) & Cat(x))", "all x.(Pet(x) -> -Cat(x))", "-exists x.(Pet(x) & Cat(x))", "-exists x.(Pet(x) & Cat(x))", "-exists x.(Pet(x) & Cat(x))", "-exists x.(Pet(x) & Cat(x))"]}
{"id": "folio_validation_133", "nl": "No one has both summer and fall as their favorite season.", "fol": "all x.((FavoriteSeason(x,Summer) & -FavoriteSeason(x,Fall)) | (-FavoriteSeason(x,Summer) & FavoriteSeason(x,Fall)))", "prediction": ["-exists x.(FavoriteSeason(x) & Summer(x) & Fall(x))", "all x.((Person(x) & Summer(x) & Fall(x)) -> FavoriteSeason(x))", "(exists x.(Person(x) & Summer(x) & Fall(x)))", "all x.((Person(x) & FavoriteSeason(x,summer) & FavoriteSeason(x,fall)) -> -(FavoriteSeason(x,summer) & FavoriteSeason(x,fall)))", "all x.(NooneHasFavoriteSeason(x,Summer) & FavoriteSeason(x,Fall))", "-exists x.(FavoriteSeason(x) & Summer(x) & Fall(x))", "-exists x.(FavoriteSeason(x) & FavoriteSeason(x) & Summer(x) & Fall(x))", "all x.((Person(x) & Summer(x) & Fall(x)) -> FavoriteSeason(x))", "-exists x.(Person(x) & FavoriteSeason(x,summer) & FavoriteSeason(x,fall))", "(exists x.(FavoriteSeason(x) & Summer(x) & Fall(x)))", "-(FavoriteSeason(x) & FavoriteSeason(x))", "-exists x.(FavoriteSeason(x,Summer) & FavoriteSeason(x,Fall))", "all x.((Person(x) & Summer(x) & Fall(x)) -> FavoriteSeason(x))", "-exists x.(FavoriteSeason(x) & FavoriteSeason(x,Summer) & FavoriteSeason(x,Fall))", "-exists x.(FavoriteSeason(x) & Summer(x) & Fall(x))", "-exists x.(Summer(x) & Fall(x))"]}
{"id": "folio_validation_134", "nl": "All students who want to have a long vacation love summer the most.", "fol": "all x.(WantsLongVacation(x) -> FavoriteSeason(x,Summer))", "prediction": ["all x.((Student(x) & LongVacation(x)) -> LovesSummer(x))", "all x.((Student(x) & WantsLongVacation(x)) -> LovesSummer(x))", "all x y.((Student(x) & LongVacation(y) & LovesSummer(x,y)) -> LovesSummer(x))", "all x.((Student(x) & LongVacation(x)) -> LovesSummer(x))", "all x y.((Student(x) & LongVacation(x) & LovesSummer(y)) -> LovesSummer(x))", "all x.((Student(x) & WantsLongVacation(x)) -> LovesSummer(x))", "(all x.((Student(x) & LongVacation(x)) -> LovesSummer(x)))", "all x y.((Student(x) & LongVacation(y) & Wants(x,y)) -> LovesSummer(x))", "all x.((Student(x) & LongVacation(x)) -> LovesSummer(x))", "(all x.((Student(x) & LongVacation(x)) -> LovesSummer(x)))", "all x.((Student(x) & WantsLongVacation(x)) -> LovesSummer(x))", "all x.((Student(x) & LongVacation(x)) -> LovesSummer(x))", "all x.(LikesSummer(x) -> LongVacation(x))", "all x.((Student(x) & WantsLongVacation(x)) -> LovesSummer(x))", "all x.((Student(x) & LovesSummer(x)) -> LongVacation(x))", "all x.((Student(x) & LongVacation(x)) -> LovesSummer(x))"]}
{"id": "folio_validation_135", "nl": "Emma's favorite season is summer.", "fol": "FavoriteSeason(Emma,Summer)", "prediction": ["(FavoriteSeason(Emma) & Summer(Emma))", "all x.(FavoriteSeason(x) -> Summer(x))", "-FavoriteSeason(Emma,Summer)", "Emma's favoriteSeason(em) isSummer(em.", "(FavoriteSeason(Emma,Summer))", "all x.((Emma'sFavoriteSeason(x) & Summer(x)) -> FavoriteSeason(x))", "-FavoriteSeason(Emma) -> Summer(Emma,Summer))", "all x.(FavoriteSeason(x) -> Summer(x))", "(FavoriteSeason(Emma) -> Summer(Emma))", "Summer is Emma's favoriteSeason(x)", "Emma's favoriteSeason(e) is Summer(e)", "Emma's favoriteSeason(Emma) isSummer(Emma,Summer))", "(FavoriteSeason(Emma,Summer))", "all x.(FavoriteSeason(x) -> Summer(x))", "(FavoriteSeason(Emma,Summer) & Summer(Emma,Summer))", "(FavoriteSeason(Emma) -> Summer(Emma))"]}
{"id": "folio_validation_136", "nl": "Mia's favorite season is not the same as Emma's. ", "fol": "-exists x.(FavoriteSeason(Mia,x) & FavoriteSeason(Emma,x))", "prediction": ["(FavoriteSeason(Mia,Emma) & -FavoriteSeason(Mia,Emma))", "all x y.((Mia(x) & Emma(y)) -> -FavoriteSeason(x,y))", "all x.(FavoriteSeason(x) -> -SameSeason(x,Emma))", "-(FavoriteSeason(Mia,Emma) & FavoriteSeason(Mia,Emma))", "(FavoriteSeason(Mia) & FavoriteSeason(Emma))", "(FavoriteSeason(Mia,Emma) & -FavoriteSeason(Mia,Emma))", "Mia's FavoriteSeason(Mia,Season) -Mia's FavoriteSeason(Mia,Season))", "all x y.((Mia(x) & Emma(y)) -> -FavoriteSeason(x,y))", "all x.(FavoriteSeason(x) -> (Mia,Emma) & -Emma,Emma,Emma)))", "(FavoriteSeason(Mia,Emma) & -SameSeason(Mia,Emma))", "Mia's favoriteSeason(m) & Emma's favoriteSeason(m))", "-(FavoriteSeason(Mia,Emma) & FavoriteSeason(Mia,Emma))", "(favoriteSeason(Mia) & FavoriteSeason(Mia)) & -SameSeason(Mia,Emma))", "(FavoriteSeason(Mia,Mia) | FavoriteSeason(Mia,Emma)))", "(FavoriteSeason(Mia,Emma) & -FavoriteSeason(Mia,Emma))", "-(FavoriteSeason(Mia,Emma) & FavoriteSeason(Mia,Emma))"]}
{"id": "folio_validation_137", "nl": "James wants to have a long vacation.", "fol": "WantsLongVacation(James)", "prediction": ["all x.((James(x) & LongVacation(x)) -> Wants(x,y))", "all x.(James(x) -> WantsLongVacation(x))", "(LongVacation(Jim) -> Wants(Jim))", "(HasLongVacation(James) -> WantsToHave(James))", "James wants to have a longvacation.", "all x.((James(x) & LongVacation(x)) -> Wants(x,y))", "(LongVacation(James) -> Wants(James,James))", "James wants to have longVacation(James)", "-(JamesWantsLongVacation(James))", "all x y.((James(x) & Vacation(y)) -> Long(x,y))", "all x.(James(x) -> LongVacation(x))", "(LongVacation(Jim) & James(Jim))", "(LongVacation(James) -> Wanted(James,James))", "all x.(James(x) -> WantsLongVacation(x))", "James wants to have a longvacation.", "all x.(James(x) -> LongVacation(x))"]}
{"id": "folio_validation_138", "nl": "James's favorite season is summer.", "fol": "FavoriteSeason(James,Summer)", "prediction": ["(FavoriteSeason(James) -> Summer(James))", "James's favoriteSeason(James) -> Summer(James))", "Summer is James's favoriteSeason(James)", "all x.(FavoriteSeason(x) -> Summer(x))", "-FavoriteSeason(James)", "(FavoriteSeason(James) & Summer(James))", "James's favoriteSeason(James) -> Summer(James))", "James's favoriteSeason(James,Summer)", "all x.(FavoriteSeason(x) -> Summer(x))", "(FavoriteSeason(James) -> Summer(James))", "Summer is James's favoriteSeason(x)", "James's favoriteSeason(James) -> Summer(James,Summer))", "all x.(FavoriteSeason(x) -> Summer(x))", "(FavoriteSeason(Jimmy) & Summer(Jimmy))", "(FavoriteSeason(Jimmy,Summer))", "James's favoriteSeason(James,Summer)"]}
{"id": "folio_validation_139", "nl": "James's favorite season is fall.", "fol": "FavoriteSeason(James,Fall)", "prediction": ["(FavoriteSeason(James) -> Fall(James))", "James's favoriteSeason(James) -> Fall(James))", "all x.(FavoriteSeason(x) -> Fall(x))", "-FavoriteSeason(James)", "(FavoriteSeason(James) -> Fall(James))", "-FavoriteSeason(James)", "all x.(FavoriteSeason(x) -> Fall(x))", "James's favoriteSeason(James) -> Fall(James))", "(FavoriteSeason(James) & Fall(James))", "James's favoriteSeason(James,Fall)", "James's favoriteSeason(James) -> Fall(James,FavoriteSeason))", "(FavoriteSeason(James,Fall))", "all x.(FavoriteSeason(x) -> Fall(x))", "all x.(FavoriteSeason(x) -> Fall(x))", "(FavoriteSeason(Jimmy) & Fall(Jimmy))", "(FavoriteSeason(Jimmy) & Fall(Jimmy))"]}
{"id": "folio_validation_140", "nl": "Mia's favorite season is spring.", "fol": "FavoriteSeason(Mia,Spring)", "prediction": ["(FavoriteSeason(Mia,Spring))", "all x.(Mia(x) -> FavoriteSeason(x,spring))", "Mia's favorite season is spring.", "-FavoriteSeason(Mia,Spring)", "all x.(FavoriteSeason(x) -> Spring(x))", "(FavoriteSeason(Mia) -> Spring(Mia))", "all x.(Mia(x) -> FavoriteSeason(x,spring))", "Mia's favorite season is spring.", "all x.(FavoriteSeason(x) -> Spring(x))", "(FavoriteSeason(Mia,Spring))", "(FavoriteSeason(Mia) -> Spring(Mia))", "Mia's favorite season is spring.", "all x.(Mia(x) -> FavoriteSeason(x,spring))", "Mia's favoriteseason is spring.", "(FavoriteSeason(Mia,Spring))", "Mia's favorite season is spring."]}
{"id": "folio_validation_141", "nl": "No digital media are analog.", "fol": "all x.(IsDigital(x) -> -IsAnalog(x))", "prediction": ["-exists x.(DigitalMedia(x) & Analog(x))", "all x.(DigitalMedia(x) -> -Analog(x))", "-exists x.(DigitalMedia(x) & Analog(x))", "all x.(DigitalMedia(x) -> -Analog(x))", "(exists x.(DigitalMedia(x) & Analog(x))", "-exists x.(DigitalMedia(x) & Analog(x))", "all x.(DigitalMedia(x) -> -Analog(x))", "-exists x.(DigitalMedia(x) & Analog(x))", "all x.(DigitalMedia(x) -> -Analog(x))", "-exists x.(DigitalMedia(x) & Analog(x))", "all x.(DigitalMedia(x) -> -Analog(x))", "-exists x.(DigitalMedium(x) & Analog(x))", "all x.(DigitalMedia(x) -> -AnalogMedia(x))", "-exists x.(DigitalMedia(x) & Analog(x))", "-exists x.(DigitalMedia(x) & Analog(x))", "-exists x.(DigitalMedia(x) & Analog(x))"]}
{"id": "folio_validation_142", "nl": "Every printed text is analog.", "fol": "all x.(IsPrintedText(x) -> IsAnalog(x))", "prediction": ["all x.(PrintedText(x) -> Analog(x))", "all x.(PrintedText(x) -> Analog(x))", "all x.(PrintedText(x) -> Analog(x))", "all x y.((PrintedText(x) & PrintingText(y)) -> Analog(x))", "(all x.(PrintedText(x) -> Analog(x))", "all x.(PrintedText(x) -> Analog(x))", "-all x.(PrintedText(x) -> Analog(x))", "all x y.((PrintedText(x) & Text(y)) -> Analog(x))", "all x.(PrintedText(x) -> Analog(x))", "all x.(PrintableText(x) -> Analog(x))", "(all x.(PrintedText(x) -> Analog(x))", "all x.(PrintedText(x) -> Analog(x))", "all x.(PrintedText(x) -> Analog(x))", "all x.(PrintedText(x) -> Analog(x))", "exists x.(PrintedText(x) & Analog(x))", "exists x.(PrintedText(x) & Analog(x))"]}
{"id": "folio_validation_143", "nl": "All streaming services are digital.", "fol": "all x.(IsStreamingService(x) -> IsDigital(x))", "prediction": ["all x.(StreamingService(x) -> Digital(x))", "all x.(StreamingService(x) -> Digital(x))", "(all x.(StreamingService(x) -> Digital(x)))", "all x y.((StreamingService(x) & Digital(y)) -> Streaming(x))", "all x.(StreamingService(x) -> Digital(x))", "(all x.(StreamingService(x) -> Digital(x)))", "(All StreamingServicesDigital)", "all x.(StreamingService(x) -> Digital(x))", "all x.(StreamingService(x) -> Digital(x))", "all x.(StreamingService(x) -> Digital(x))", "all x.(StreamingService(x) -> Digital(x))", "all x.(StreamingService(x) -> Digital(x))", "all x.(StreamingService(x) -> Digital(x))", "all x.(StreamingService(x) -> Digital(x))", "all x.(StreamingService(x) -> Digital(x))", "all x.(StreamingService(x) -> Digital(x))"]}
{"id": "folio_validation_144", "nl": "If an object is a hardcover book then it is printed text.", "fol": "all x.(IsHardcoverBook(x) -> IsPrintedText(x))", "prediction": ["all x.((Object(x) & HardcoverBook(x)) -> PrintText(x))", "all x.(HardcoverBook(x) -> PrintText(x))", "all x.((HardcoverBook(x) & PrintText(x)) -> PrintText(x))", "all x.((Object(x) & HardcoverBook(x)) -> PrintText(x))", "all x.(HardcoverBook(x) -> PrintText(x))", "all x y.((Object(x) & HardcoverBook(y) & PrintText(x,y)) -> PrintText(x))", "all x.((HardcoverBook(x) & Object(x)) -> PrintText(x))", "all x.((Object(x) & HardcoverBook(x)) -> PrintText(x))", "all x.(HardcoverBook(x) -> PrintText(x))", "all x.(HasHardcoverBook(x) -> PrintText(x))", "all x.(HardcoverBook(x) -> PrintText(x))", "all x.((HardcoverBook(x) & PrintText(x)) -> PrintText(x))", "all x.((Object(x) & HardcoverBook(x)) -> PrintText(x))", "all x.(HardcoverBook(x) -> PrintedText(x))", "all x.(HardcoverBook(x) -> PrintText(x))", "exists x.(HardcoverBook(x) & PrintedText(x))"]}
{"id": "folio_validation_145", "nl": "If 1984 is a streaming service, then 1984 is a hardcover book.", "fol": "(IsStreamingService(Y1984) -> IsHardcoverBook(Y1984))", "prediction": ["all x.((StreamingService(x) & 1984(x)) -> HardcoverBook(x))", "all x.(StreamingService(x) -> HardcoverBook(x))", "all x.((StreamingService(x) & 1984(x)) -> HardcoverBook(x))", "(StreamingService(84) -> HardcoverBook(84))", "all x y.((StreamingService(x) & 1984(y)) -> HardcoverBook(y,x))", "all x.((StreamingService(x) & 1984(x)) -> HardcoverBook(x))", "(StreamingService(84) -> HardcoverBook(84))", "all x.(StreamingService(x) -> HardcoverBook(x))", "(StreamingService(84) & HardcoverBook(84))", "all x.((StreamingService(x) & 1984(x)) -> HardcoverBook(x))", "all x.(StreamingService(x) -> HardcoverBook(x))", "(StreamingService(84) -> HardcoverBook(84))", "all x.((StreamingService(x) & 1984(x)) -> HardcoverBook(x))", "all x.(StreamingService(x) -> HardcoverBook(x))", "all x.((StreamingService(x) & 1984(x)) -> HardcoverBook(x))", "all x.((StreamingService(x) & 1984(x)) -> HardcoverBook(x))"]}
{"id": "folio_validation_146", "nl": "1984 is printed text.", "fol": "IsPrintedText(Y1984)", "prediction": ["1984 is printedText(84)", "all x.((1984(x) & PrintText(x)) -> PrintText(x))", "(PrintedText(84) & PrintedText(84))", "All x.(84(x) -> PrintText(x))", "1984 is printedText(84)", "all x.((1984(x) & PrintText(x)) -> PrintText(x))", "all x.(1984(x) -> PrintText(x))", "(PrintedText(84) & Date(84))", "1984 is printedText(x)", "All x.(1984(x) -> PrintText(x))", "all x.(84(x) -> PrintText(x))", "1984 is printedText(84)", "All x.(1984(x) -> PrintText(x))", "1984 is printedText(x)", "1984 (PrintedText)", "1984 is printedText(x)"]}
{"id": "folio_validation_147", "nl": "1984 is a streaming service.", "fol": "IsStreamingService(Y1984)", "prediction": ["all x.((1984(x) & StreamingService(x)) -> StreamingService(x))", "1984 is streamingService(x)", "All x.((84(x) & StreamingService(x)) -> StreamingService(x))", "1984 is a streamingService(x)", "(StreamingService(84) & StreamingService(84))", "all x.((England(x) & StreamingService(x)) -> StreamingService(x))", "all x.((1984(x) & StreamingService(x)) -> StreamingService(x))", "1984 is streamingService(x)", "1984 (StreamingService)", "1984 is a streamingService(x)", "All x.((84(x) & StreamingService(x)) -> StreamingService(x))", "(StreamingService(84) & AvailableIn(84))", "1984 (StreamingService)", "All x.((Arrow(x) & StreamingService(x)) -> 1984(x))", "1984 is streamingService(x)", "1984 is a streamingService(x)"]}
{"id": "folio_validation_148", "nl": "1984 is not a streaming service.", "fol": "-IsStreamingService(Y1984)", "prediction": ["1984 -StreamingService(84))", "all x.((1984(x) & -StreamingService(x)) -> -StreamingService(x))", "(-StreamingService(84) & -StreamingService(84))", "1984 -StreamingService(84))", "All x.((1984(x) & -StreamingService(x)) -> -StreamingService(x))", "1984 - StreamingService(84))", "1984 is notStreamingService(84)", "(-StreamingService(84))", "All x.(1984(x) -> -StreamingService(x))", "all x.(84(x) -> -StreamingService(x))", "(-StreamingService(84) & -StreamingService(84))", "1984 -StreamingService(84))", "1984 is notStreamingService(84)", "-StreamingService(84)", "1984 is notStreamingService(84)", "1984 is notStreamingService(x)"]}
{"id": "folio_validation_149", "nl": "All Romance languages are Indo-European languages.", "fol": "all x.(IsRomanceLanguage(x) -> IsIndoEuropeanLanguage(x))", "prediction": ["all x.(RomanceLanguage(x) -> IndoEuropeanLanguage(x))", "(all x.(RomanceLanguage(x) -> IndoEuropeanLanguage(x))", "all x.(RomanceLanguage(x) -> IndoEuropeanLanguage(x))", "all x y.((RomanceLanguage(x) & IndoEuropeanLanguage(y)) -> IndoEuropeanLanguage(x))", "(IndoEuropeanLanguage(RomanceLanguage)", "all x.(RainforceLanguage(x) -> IndoEuropeanLanguage(x))", "(all x.(RomanceLanguage(x) -> IndoEuropeanLanguage(x))", "all x.(Romance(x) -> IndoEuropeanLanguage(x))", "all x.(RomanceLanguage(x) -> IndoEuropeanLanguage(x))", "all x y.((RomanceLanguage(x) & IndoEuropeanLanguage(y)) -> IndoEuropeanLanguage(x))", "all x.(RainforceLanguage(x) -> IndoEuropeanLanguage(x))", "all x.(RomanceLanguage(x) -> IndoEuropeanLanguage(x))", "all x.(RainforceLanguage(x) -> IndoEuropeanLanguage(x))", "all x.(RomanceLanguage(x) -> IndoEuropeanLanguage(x))", "all x.(RomanceLanguage(x) -> IndoEuropeanLanguage(x))", "All x.(RomanceLanguage(x) -> IndoEuropeanLanguage(x))"]}
{"id": "folio_validation_150", "nl": "The Romance languages are a language family.", "fol": "all x.(IsRomanceLanguage(x) -> BelongsToFamily(x,Romancefamily))", "prediction": ["all x.(RomanceLanguage(x) -> LanguageFamily(x))", "(LanguageFamily(Romance) & LanguageFamily(Romance))", "all x y.((RomanceLanguage(x) & LanguageFamily(y)) -> LanguageFamily(x,y))", "all x.(RomanceLanguage(x) -> LanguageFamily(x))", "(all x.(RomanceLanguage(x) -> LanguageFamily(x))", "all x.(Romance(x) -> LanguageFamily(x))", "all x.(RainforceLanguage(x) -> LanguageFamily(x))", "(LanguageFamily(Romance) & LanguageFamily(Romance))", "all x y.((RomanceLanguage(x) & LanguageFamily(y)) -> LanguageFamily(x))", "all x.(RomanceLanguage(x) -> LanguageFamily(x))", "all x y.((Romance(x) & LanguageFamily(y)) -> LanguageFamily(x,y))", "all x y.((RomanceLanguage(x) & LanguageFamily(y)) -> LanguageFamily(x,y))", "all x.(RainforceLanguage(x) -> LanguageFamily(x))", "all x.(RomanceLanguage(x) -> LanguageFamily(x))", "all x.(RomanceLanguage(x) -> LanguageFamily(x))", "All x.(RomanceLanguage(x) -> LanguageFamily(x))"]}
{"id": "folio_validation_151", "nl": "All languages within a language family are related to each other.", "fol": "all z.((BelongsToFamily(x,z) & BelongsToFamily(y,z)) -> (IsRelatedTo(x,y) & IsRelatedTo(y,x)))", "prediction": ["all x y.((Language(x) & LanguageFamily(y)) -> Related(x,y))", "all x.(Language(x) -> Relationship(x))", "all x.((Language(x) & WithinLanguageFamily(x)) -> RelatedTo(x,y))", "all x y.((LanguageFamily(x) & LanguageFamily(y)) -> RelatedTo(x,y))", "all x y z.((Language(x) & LanguageFamily(y) & LanguageFamily(z)) -> RelatedTo(x,y,z))", "all x y.((Language(x) & LanguageFamily(y)) -> Related(x,y))", "all x.(Language(x) -> Relationship(x,y))", "all x.exists y.(Language(x) & LanguageFamily(y) & WithinLanguageFamily(x,y))", "all x y z.((LanguageFamily(x) & LanguageFamily(y) & LanguageFamily(z)) -> Related(x,y,z))", "all x.((Language(x) & WithinLanguageFamily(x)) -> RelatedTo(x,y))", "all x y.((LanguageFamily(x) & LanguageFamily(y)) -> Related(x,y))", "all x.(Language(x) -> RelatedTo(x,y))", "(all x.(Language(x) -> WithinLanguageFamily(x)))", "exists x.(LanguageFamily(x) & WithinLanguageFamily(x))", "all x y.((Language(x) & LanguageFamily(y)) -> Relationship(x,y))", "exists x.(LanguageFamily(x) & WithinLanguageFamily(x))"]}
{"id": "folio_validation_152", "nl": "French and Spanish are both Romance languages.", "fol": "(IsRomanceLanguage(French) & IsRomanceLanguage(Spanish))", "prediction": ["(RomanceLanguage(French) & RomanceLanguage(Spanish))", "all x.((French(x) | Spanish(x)) -> RomanceLanguage(x))", "all x.(RomanceLanguage(x) -> (FrenchLanguage(x) | SpanishLanguage(x)))", "(RacingLanguage(French) & RomanceLanguage(Spanish))", "(RomanceLanguage(French) & RomanceLanguage(Spanish))", "(Romance(French) & Romance(Spanish))", "all x.((French(x) | Spanish(x)) -> RomanceLanguage(x))", "all x y.((French(x) & Spanish(y)) -> RomanceLanguage(x))", "all x y.((FrenchLanguage(x) & SpanishLanguage(y)) -> RomanceLanguage(x))", "((French(f) | Spanish(f)))", "(RomanceLanguage(French,Spanish) & RomanceLanguage(French,Spanish))", "all x.(RomanceLanguage(x) -> (FrenchLanguage(x) | SpanishLanguage(x)))", "(RomanceLanguage(French) & RomanceLanguage(Spanish))", "all x.((French(x) | Spanish(x)) -> RomanceLanguage(x))", "(Romance(French) & Romance(Spanish))", "(RomanceLanguage(french) & RomanceLanguage(fspanish))"]}
{"id": "folio_validation_153", "nl": "German is related to Spanish.", "fol": "IsRelatedTo(German,Spanish)", "prediction": ["all x.(German(x) -> RelatedToSpanish(x))", "(RelatedToSpanish(German) & German(Spanish))", "(all x.(German(x) -> Spanish(x)))", "all x.(German(x) -> RelatedToSpanish(x))", "all x y.((German(x) & Spanish(y)) -> Related(x,y))", "all x.(German(x) -> RelatedToSpanish(x))", "(RelatedToSpanish(German) & German(Spanish))", "all x y.((Deutsch(x) & Spanish(y)) -> RelatedTo(x,y))", "(RelatedToSpanish(German,Spanish))", "(all x.(German(x) -> Spanish(x)))", "all x.(Deutsch(x) -> Spanish(x))", "all x y.((Deutsch(x) & Spanish(y)) -> Related(x,y))", "(all x.(German(x) -> Spanish(x)))", "all x.(German(x) -> RelatedToSpanish(x))", "All x.(Germany(x) -> RelatedToSpanish(x))", "all x.(Deutsch(x) -> Spanish(x))"]}
{"id": "folio_validation_154", "nl": "Basque is not related to any other language.", "fol": "all x.-IsRelatedTo(Basque,x)", "prediction": ["all x.(Basque(x) -> -RelatedToOtherLanguage(x))", "all x y.((Basque(x) & Language(y)) -> -RelatedTo(x,y))", "(-RelatedToLanguage(Basque))", "all x.(Basque(x) -> -RelatedTo(x,y))", "(exists x.(Basque(x) & -RelatedTo(x,y)))", "all x.(Basque(x) -> -RelatedToOtherLanguage(x))", "all x y.((Basque(x) & Language(y)) -> -RelatedTo(x,y))", "(-RelatedToLanguage(Basque))", "all x.(Basque(x) -> -RelatedToLanguage(x))", "(exists x.(Basque(x) & -RelatedTo(x,y)))", "exists x.(Basque(x) & -RelatedTo(x,y))", "exists x.(BasqueLanguage(x) & -RelatedTo(x,y))", "all x y.((Basque(x) & Language(y)) -> -RelatedTo(x,y))", "all x.(Basque(x) -> -RelatedTo(x,y))", "all x.(Basque(x) -> -RelatedToOtherLanguage(x))", "all x.(Basque(x) -> -RelatedToLanguage(x))"]}
{"id": "folio_validation_155", "nl": "Basque is a Romance language.", "fol": "IsRomanceLanguage(Basque)", "prediction": ["all x.(Basque(x) -> RomanceLanguage(x))", "(RomanceLanguage(Basque) & RomanceLanguage(Basque))", "all x.(Basque(x) -> RomanceLanguage(x))", "all x y.((Basque(x) & RomanceLanguage(y)) -> RomanceLanguage(x))", "(RomanceLanguage(Basque) & RomanceLanguage(Basque))", "all x.(Basque(x) -> RomanceLanguage(x))", "(RomanceLanguage) & Basque(Basque))", "all x y.(Basque(x) -> RomanceLanguage(x,y))", "all x.(Basque(x) -> RomanceLanguage(x))", "(RomanceLanguage(Basque) & RomanceLanguage(Basque))", "all x.(Basque(x) -> RomanceLanguage(x))", "all x.(Basque(x) -> RomanceLanguage(x))", "all x.(Basque(x) -> RomanceLanguage(x))", "(RomanceLanguage)", "All x.(Basque(x) -> RomanceLanguage(x))", "all x.(Basque(x) -> RomanceLanguage(x))"]}
{"id": "folio_validation_156", "nl": "German is a Romance language.", "fol": "IsRomanceLanguage(German)", "prediction": ["all x.(German(x) -> RomanceLanguage(x))", "(RomanceLanguage(German) & RomanceLanguage(German))", "German is RomanceLanguage(German)", "all x.(German(x) -> RomanceLanguage(x))", "All x y.((Deutsch(x) & RomanceLanguage(y)) -> RomanceLanguage(x))", "(RomanceLanguage(German) & RomanceLanguage(German))", "all x.(German(x) -> RomanceLanguage(x))", "(RomanceLanguage(German) & RomanceLanguage(German,German))", "All x y.((Deutsch(x) & RomanceLanguage(y)) -> RomanceLanguage(x,y))", "all x.(German(x) -> RomanceLanguage(x))", "(RomanceLanguage(German) & RomanceLanguage(German,German))", "all x.(German(x) -> RomanceLanguage(x))", "all x.(Deutsch(x) -> RomanceLanguage(x))", "all x.(Deutsch(x) -> RomanceLanguage(x))", "all x.(German(x) -> RomanceLanguage(x))", "all x.(German(x) -> RomanceLanguage(x))"]}
{"id": "folio_validation_157", "nl": "French is an Indo-European language.", "fol": "IsIndoEuropeanLanguage(French)", "prediction": ["all x.(French(x) -> IndoEuropeanLanguage(x))", "(IndoEuropeanLanguage(French) & IndoEuropeanLanguage(French))", "(IndocheanLanguage(French) & IndoEuropeanLanguage(French))", "all x.(French(x) -> IndoEuropeanLanguage(x))", "All x y.((French(x) & IndoEuropeanLanguage(y)) -> IndoEuropeanLanguage(x,y))", "(IndoEuropeanLanguage(French) & IndoEuropeanLanguage(French))", "all x.(French(x) -> IndoEuropeanLanguage(x))", "(IndoEuropeanLanguage(French) & IndoEuropeanLanguage(French))", "all x.(French(x) -> IndoEuropeanLanguage(x))", "all x.(French(x) -> IndoEuropeanLanguage(x))", "(IndoEuropeanLanguage(French) & IndoEuropeanLanguage(French))", "All x.(French(x) -> IndoEuropeanLanguage(x))", "(IndoEuropeanLanguage(french) & IndoEuropeanLanguage(french))", "all x.(French(x) -> IndoEuropeanLanguage(x))", "All x.(French(x) -> IndoEuropeanLanguage(x))", "all x.(French(x) -> IndoEuropeanLanguage(x))"]}
{"id": "folio_validation_158", "nl": "Robert Lewandowski is a striker.", "fol": "IsStriker(RobertLewandowski)", "prediction": ["all x.((RobertLewandowski(x) & Striker(x)) -> Striker(x))", "(Striker(RobertLewandowski)", "Robert Lewandowski is a striker.", "(Striker(RobertLewandowski)", "Robert Lewandowski (Striker)", "all x.(Striker(x) -> (RobertLewandowski(x) & Striker(x)))", "all x.((RobertLewandowski(x) & Striker(x)) -> Striker(x))", "(Striker(RobertLewandowski)", "(Striker(RobertLewandowski)", "all x.(Striker(x) -> RobertLewandowski(x))", "Robert Lewandowski is a striker.", "Robert Lewandowski (Striker)", "all x.((RobertLewandowski(x) & Striker(x)) -> Striker(x))", "(Striker(RobertLewandowski)", "Robert Lewandowski is a striker.", "All x.((RobertLewandowski(x) & Striker(x)) -> Striker(x))"]}
{"id": "folio_validation_159", "nl": "[BG] Strikers are soccer players.", "fol": "all x.(IsStriker(x) -> IsSoccerPlayer(x))", "prediction": ["all x.(Striker(x) -> SoccerPlayer(x))", "[BG] Striker(s) -> SoccerPlayer(s))", "all x.(Striker(x) -> SoccerPlayer(x))", "all x.(Striker(x) -> SoccerPlayer(x))", "all x y.((Striker(x) & SoccerPlayer(y)) -> Striker(x))", "[BG] Strikers(s) -> SoccerPlayer(s))", "all x.(Striker(x) -> SoccerPlayer(x))", "(all x.(Striker(x) -> SoccerPlayer(x)))", "(Striker(s) & SoccerPlayer(s))", "[BG] Strikers(x) -> SoccerPlayer(x))", "all x.(Striker(x) -> SoccerPlayer(x))", "[BG] -Striker(x))", "(all x.(Striker(x) -> SoccerPlayer(x)))", "all x.(Striker(x) -> SoccerPlayer(x))", "all x.(Striker(x) -> SoccerPlayer(x))", "all x.(Striker(x) -> SoccerPlayer(x))"]}
{"id": "folio_validation_160", "nl": "Robert Lewandowski left Bayern Munchen.", "fol": "LeftTeam(RobertLewandowski,BayernMunchen)", "prediction": ["Robert Lewandowski left Bayern Munchen.", "all x y.((RobertLewandowski(x) & BayernMunchen(y)) -> Left(x,y))", "All x.(RobertLewandowski(x) -> LeftBayernMunchen(x))", "all x.(Lewandowski(x) -> LeftBundesliga(x))", "Robert Lewandowski left Bayern Munchen.", "Robert Lewandowski hat Bayern Munchen verlassen.", "Lewandowski, Robert, left Bayern Munchen.", "(Lewandowski(Robert) & BayernMunchen(Robert))", "(LeavesBundesliga(RobertLewandowski))", "Robert Lewandowski left Bayern Munchen.", "(Lewandowski(Robert) & Bayern(Munchen))", "Robert Lewandowski (left)", "Robert Lewandowski - Bayern Munchen.", "Robert Lewandowski (left, Bayern Munchen))", "Robert Lewandowski left Bayern Munchen.", "Robert Lewandowski has left Bayern Munchen."]}
{"id": "folio_validation_161", "nl": "[BG] If a player left a team they no longer play for that team.", "fol": "all x y.(LeftTeam(x,y) -> -PlaysForTeam(x,y))", "prediction": ["all x y.((Player(x) & Team(y) & Left(x,y)) -> -PlayFor(x,y))", "all x y z.((Player(x) & Team(y) & Team(z) & Left(x,y)) -> -PlayFor(x,z))", "[BG] (LeavedTeam(player) & -PlayForTeam(player)))", "all x.((Player(x) & LeftTeam(x)) -> -PlayForTeam(x))", "all x y.((Player(x) & Team(y) & Left(x,y)) -> -PlaysFor(x,y))", "all x y.((Player(x) & Team(y) & Leaved(x,y)) -> -PlaysFor(x,y))", "[BG] (PlayerLeavesTeam(x) & -PlaysForTeam(x)))", "all x y z.((Player(x) & Team(y) & Team(z) & Left(x,y)) -> -PlaysFor(x,z))", "all x.((PlayerLeavesTeam(x) & -PlayForTeam(x)) -> -PlayForTeam(x))", "(all x.(LeavedTeam(x) -> NoPlayForTeam(x)))", "all x.((Player(x) & LeftTeam(x)) -> NoPlayForTeam(x))", "[BG] -PlaysForTeam(x))", "[BG] (LeavedTeam(player) & NoPlayForTeam(player)))", "all x y.((Player(x) & Team(y)) -> -PlaysFor(x,y))", "all x.((Player(x) & LeavesTeam(x)) -> -PlayForTeam(x))", "[BG] -> PlayerLeavesTeam(x))"]}
{"id": "folio_validation_162", "nl": "Robert Lewandowski is a soccer player.", "fol": "IsSoccerPlayer(RobertLewandowski)", "prediction": ["all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> Plays(x,y))", "(SoccerPlayer(RobertLewandowski)", "Robert Lewandowski (SoccerPlayer)", "all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> Plays(x,y))", "Robert Lewandowski is a soccer player.", "(SoccerPlayer(RobertLewandowski)", "Robert Lewandowski (SoccerPlayer)", "all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> Plays(x))", "(SoccerPlayer(RobertLewandowski)", "Robert Lewandowski is a soccer player.", "Robert Lewandowski (SoccerPlayer)", "RobertLewandowski(r) is a soccer player.", "all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> Plays(x,y))", "(SoccerPlayer(RobertLewandowski)", "all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> Plays(x))", "(SoccerPlayer(RobertLewandowski)"]}
{"id": "folio_validation_163", "nl": "Robert Lewandowski plays for Bayern Munchen.", "fol": "PlaysForTeam(RobertLewandowski,BayernMunchen)", "prediction": ["Robert Lewandowski plays for Bayern Munchen.", "all x.((RobertLewandowski(x) & BayernMunchen(x)) -> PlaysFor(x,y))", "(PlaysFor(RobertLewandowski,Bundesliga) & BayernMunchen(RobertLewandowski))", "all x y.((RobertLewandowski(x) & BayernMunchen(y)) -> PlaysFor(x,y))", "all x.((RobertLewandowski(x) & PlaysFor(x,BayernMunchen)) -> PlaysFor(x,BayernMunchen))", "(PlaysForBundesliga(RobertLewandowski))", "All x.(RobertLewandowski(x) -> PlaysForBundesligaMunchen(x))", "(PlaysForBundesligaMunchen(RobertLewandowski)", "Robert Lewandowski plays for Bayern Munchen.", "all x y.((RobertLewandowski(x) & BayernMunchen(y)) -> PlaysFor(x,y))", "(PlaysForBayernMunchen(RobertLewandowski)", "All x.(RobertLewandowski(x) -> PlaysForBayernMunchen(x))", "RobertLewandowskiPlaysForBayernMunchen.", "Robert Lewandowski plays for Bayern Munchen.", "Robert Lewandowski plays for Bayern Munchen.", "Robert Lewandowski plays for Bayern Munchen."]}
{"id": "folio_validation_164", "nl": "Robert Lewandowski is a star.", "fol": "IsSoccerStar(RobertLewandowski)", "prediction": ["all x.((RobertLewandowski(x) & Star(x)) -> Star(x))", "(Star(RobertLewandowski))", "Star(RobertLewandowski)", "Robert Lewandowski is a star.", "all x.((RobertLewandowski(x) & Star(x)) -> Star(x))", "All x y.((RobertLewandowski(x) & Star(y)) -> Star(x,y))", "(Star(RobertLewandowski))", "all x.(Star(x) -> (RobertLewandowski(x) & Star(x)))", "Robert Lewandowski (*)", "All x.(RobertLewandowski(x) -> Star(x))", "all x.((RobertLewandowski(x) & Star(x)) -> Star(x))", "all x.(Star(x) -> RobertLewandowski(x))", "(Star(RobertLewandowski)", "all x.((RobertLewandowski(x) & Star(x)) -> Star(x))", "(Star(RobertLewandowski)", "all x.((RobertLewandowski(x) & Star(x)) -> Star(x))"]}
{"id": "folio_validation_165", "nl": "Billings is a city in Montana.", "fol": "IsCityInState(Billings,Montana)", "prediction": ["all x.(Billings(x) -> (City(x) & InMontana(x)))", "(City(Billings) & InMontana(Billings))", "all x.(Billings(x) -> (CityInMontana(x) & InMontana(x)))", "(Billings(Billings) & City(Billings))", "Billings (City(Billings) & InMountain(Billings))", "(MountainCity(Billings) & LocatedIn(Billings,MT))", "(CityInMontana(Billings) & LocatedIn(Billings,Montana))", "(City(Billings) & InMountain(Billings))", "all x y.((Billings(x) & MontanaCity(y)) -> (City(x,y) & In(x,y)))", "Billings (City(billings) & InMountain(billings))", "all x.(Billings(x) -> CityInMontana(x))", "(City(Billings) & LocatedInMontana(Billings))", "(City(Billings) & InMontana(Billings))", "all x.(Billings(x) -> (City(x) & InMountain(x)))", "Billings, Montana.", "all x.(Billings(x) -> CityInMountain(x))"]}
{"id": "folio_validation_166", "nl": "Montana includes the cities of Butte, Helena, and Missoula.", "fol": "(IsCityInState(Butte,Montana) & IsCityInState(Helena,Montana) & IsCityInState(Missoula,Montana))", "prediction": ["(InMontana(Montana) -> (City(Montana) & Butte(Montana) & City(Montana) & City(Montana) & City(Montana)))", "(Mountain(Mountain) -> (City(Mountain) & City(Mountain) & City(Mountain)))", "((Mountain(Mountain) & Butte(Mountain)) | (Mountain(Mountain) & Helena(Mountain))))", "all x.(Mountain(x) -> (City(x,Butte) | City(x,Helena) | City(x,Missoula)))", "(InMontana(Montana) & (Butte(Montana) | Helena(Montana) | Missoula(Montana)))", "all x y z.((Mountain(x) & City(y) & City(z) & Butte(y) & Helena(z) & Missoula(z)) -> Includes(x,y,z))", "(all x.(Montana(x) -> Butte(x)) & all y.(Helsinki(y) -> Missoula(y))))", "(Mountain(Mountain) & (Butte(Most) | Helena(Most) | Missoula(Most)))", "(InMontana(Montana,Butte) & In(Montana,Helena) & In(Montana,Missoula))", "In Montana, (Butte(Mountain) | Helena(Mountain) | Missoula(Mountain)))", "All x.(Mountain(x) -> (Butte(x) | Helena(x) | Missoula(x)))", "all x y.((Mountain(x) & (Butte(y) | Helena(y) | Missoula(y))) -> Includes(x,y))", "((Mountain(Mountain) | Butte(Mountain)) & Helena(Mountain) & Missoula(Mountain))", "all x.(Mountain(x) -> ((Butte(x) | Helena(x) | Missoula(x))))", "All x.(Montana(x) -> (City(x,Butte) | City(x,Helena) | City(x,Missoula)))", "All x.(Mountain(x) -> (Butte(x) | Helena(x) | Missoula(x)))"]}
{"id": "folio_validation_167", "nl": "White Sulphur Springs and Butte are cities in the same state.", "fol": "exists x.(IsCityInState(Whitesulphursprings,x) & IsCityInState(Butte,x))", "prediction": ["(SameState(WhiteSulphurSprings) & SameState(Butte))", "(City(WhiteSulphurSprings) & City(Butte))", "all x.((WhiteSulphurSprings(x) & Butte(x)) -> State(x))", "All x.(WhiteSulphurSprings(x) -> (City(x) & State(x) & City(x)))", "(SameStateCity(WhiteSulphurSprings) & SameStateCity(Butte))", "all x y.((WhiteSulphurSprings(x) & Butte(y)) -> (City(x,y) & State(y)))", "WhiteSulphurSpringsAndButteCity(x) -> (City(x) & State(x)))", "((WhiteSulphurSprings(White) & Butte(Butte)) -> CitiesInSameState(White))", "(SameState(WhiteSulphurSprings) & SameState(Butte))", "all x y.((WhiteSulphurSpring(x) & Butte(y)) -> (City(x,y) & State(y)))", "(City(WhiteSulphurSprings) & City(Butte))", "(City(WhiteSulphurSprings) & City(Butte) & InSameState(WhiteSulphurSprings))", "All x.(WhiteSulphurSprings(x) -> (City(x) & City(x) & State(x)))", "WhiteSulphurSpringsAndButteCity(x) & StateOfSameState(x))", "All x.((WhiteSulphurSprings(x) & Butte(x)) -> State(x))", "(City(WhiteSulphurSprings,State) & City(Butte,State))"]}
{"id": "folio_validation_168", "nl": "The city of Pierre is not in Montana.", "fol": "-IsCityInState(Pierre,Montana)", "prediction": ["La ville de Pierre n'est pas en Montana.", "-(City(Pierre) & Montana(Pierre))", "(-Mt.Montana(City(City) & Pierre(City))", "(-Malloyd(City) & City(Pierre))", "(-InMontana(City(City) & Pierre(City))", "all x.(City(x) -> -InMontana(x))", "the city of Pierre -InMontana.", "(-Montana(City) & City(Pierre))", "La ville de Pierre n'est pas dansMontana.", "all x.(City(x,Pierre) -> -InMontana(x))", "-(City(Pierre) & Montana(Pierre))", "(Landmark(City,Pierre) & -Mt.Alberta(Pierre))", "(NumberOfCity(Pierre) | Montana(Pierre))", "(-Malitoba(City(City) & Pierre(City))", "-(CityOfPierre(Pierre) & Montana(Pierre))", "-(City(Pierre) & Montana(Pierre))"]}
{"id": "folio_validation_169", "nl": "Any city in Butte is not in Pierre.", "fol": "all x.(IsCityInState(Butte,x) -> -IsCityInState(Pierre,x))", "prediction": ["all x.((City(x) & Butte(x)) -> -Pierre(x))", "all x.((City(x) & Butte(x)) -> -Pierre(x))", "-(CityInButte(x) & -InPierre(x))", "all x y.((City(x) & Butte(y)) -> -InPierre(x,y))", "(all x.((City(x) & Butte(x)) -> -Pierre(x))", "all x.(City(x) -> -Pierre(x))", "all x.((City(x) & InButte(x)) -> -InPierre(x))", "(all x.(CityInButte(x) -> -InPierre(x)))", "all x.((City(x) & Butte(x)) -> -InPierre(x))", "-(CityInButte(x) & -InPitte(x))", "all x.(City(x) -> -InPitte(x))", "(all x.((City(x) & Butte(x)) -> -Pierre(x))", "All x.(ButteCity(x) -> -Pierre(x))", "-(CityInButte(x) & InButte(x))", "all x.(City(x) & InButte(x) -> -InPierce(x))", "all x.((City(x) & Butte(x)) -> -Pierre(x))"]}
{"id": "folio_validation_170", "nl": "Butte and Pierre are in the same state.", "fol": "exists x.(IsCityInState(Butte,x) & IsCityInState(Pierre,x))", "prediction": ["(SameState(Butte,Pierce) & SameState(Butte,Pierce))", "All x.((Butte(x) & Pierre(x)) -> SameState(x))", "-(SameState(Butte) & SameState(Pierre))", "Butte and Pierre are in the same state.", "(SameState(Butte) & SameState(Pierre))", "((Butte(Butte) & Pierre(Pierre)) -> SameState(Butte,Pierce))", "-((Butte(x) | Pierre(x)) & SameState(x))", "Butte and Pierre are in the SameState(x)", "(SameState(Butte,Pierce) & SameState(Pierce,Butte))", "Butte & Pierre & InSameState(x)", "All x.((Butte(x) & Pierre(x)) -> SameState(x))", "(SameState(Butte) & SameState(Pierre))", "Butte and Pierre are in the same state.", "(SameState(butte,p) & SameState(p,p))", "(SameState(Butte,Pierce))", "(SameState(Butte) & SameState(Pierre))"]}
{"id": "folio_validation_171", "nl": "Pierre and Bismarck are in the same state.", "fol": "exists x.(IsCityInState(Pierre,x) & IsCityInState(Bismarck,x))", "prediction": ["(SameState(Pierre) & SameState(Bismarck))", "all x.((Pierre(x) | Bismarck(x)) -> SameState(x))", "all x.((Piece(x) & Bismarck(x)) -> SameState(x))", "all x y.((Piece(x) & Bismarck(y)) -> SameState(x,y))", "(SameState(Pierre,Bismarck))", "((Pierre(Pierre) & Bismarck(bismarck)) -> SameState(Pierre))", "all x.((Pierre(x) & Bismarck(x)) -> SameState(x))", "(SameState(Pierre) & SameState(Bismarck))", "all x y.((Piece(x) & Bismarck(y)) -> InSameState(x,y))", "(SameState(Pierce,State) & SameState(Bismarck,State))", "exists x.(State(x,Pierre) & State(x,Bismarck))", "all x y.((Pierre(x) & Bismarck(y)) -> SameState(x,y))", "(SameState(Pierre,Bismarck))", "(SameState(Pierce) & SameState(Bismarck))", "All x.((Pierre(x) | Bismarck(x)) -> SameState(x))", "(SameState(Pierre) & SameState(Bismarck))"]}
{"id": "folio_validation_172", "nl": "Montana is home to the city of Missoula.", "fol": "IsCityInState(Missoula,Montana)", "prediction": ["all x.(Missoula(x) -> HomeTo(x,Missoula))", "(HomeToMissoula(Montana) & HomeToMissoula(Montana))", "all x.((Montana(x) & City(x,Missoula)) -> HomeTo(x,Missoula))", "(Missoula(Montana) & HomeTo(Montana))", "all x y.((Montana(x) & City(y)) -> HomeTo(x,y))", "(HomeToMissoula(Montana) & LocatedIn(Montana))", "all x.(Mountain(x) -> HomeToMissoula(x))", "Montana is home to Missoula.", "(homeTo(Montana,Missoula))", "(HousesMissoula(Montana) & HomeToMissoula(Montana))", "Montana is home to the city of Missoula.", "all x.((Montana(x) & City(y)) -> HomeTo(x,y))", "Located in Montana, Missoula is a city.", "all x y.((Montana(x) & City(y)) -> HomeTo(x,y))", "(Missoula(Montana) & HomeTo(Missoula))", "(HomeToMissoula(Montana) & HomeToMissoula(Montana))"]}
{"id": "folio_validation_173", "nl": "International students in US have either an F1 visa or a J1 visa.", "fol": "all x.(((IsInternationalStudent(x) -> HasF1Visa(x)) & -HasJ1Visa(x)) | (-(IsInternationalStudent(x) -> HasF1Visa(x)) & HasJ1Visa(x)))", "prediction": ["all x.((InternationalStudent(x) & InUS(x)) -> (HasF1Visa(x) | HasJ1Visa(x)))", "all x.(InternationalStudent(x) -> (HasF1Visa(x) | HasJ1Visa(x)))", "all x y.((InternationalStudent(x) & Student(y)) -> (HasF1Visa(x,y) | HasJ1Visa(x,y)))", "all x.((InternationalStudent(x) & InUS(x)) -> (F1Visa(x) | J1Visa(x)))", "(exists x.(InternationalStudent(x) & InUS(x,F1)) | exists y.(InternationalStudent(y,J1)) & InUS(x,Y))))", "all x y.((InternationalStudent(x) & Student(y) & InUS(x,y)) -> (HasF1Visa(x) | HasJ1Visa(x)))", "all x y.((InternationalStudent(x) & US(y)) -> (HasF1Visa(x,y) | HasJ1Visa(x,y)))", "(all x.(InternationalStudent(x) -> (F1Visa(x) | J1Visa(x))))", "all x.((InternationalStudent(x) & InUS(x)) -> (HasF1Visa(x) | HasJ1Visa(x)))", "all x.(InternationalStudent(x) -> (HasF1Visa(x) | HasJ1Visa(x)))", "(all x.(InternationalStudent(x) -> (F1Visa(x) | J1Visa(x))))", "all x.((InternationalStudent(x) & InUS(x)) -> (F1Visa(x) | J1Visa(x)))", "all x y.((InternationalStudent(x) & Student(y)) -> (F1Visa(x,y) | J1Visa(x,y)))", "all x y.((InternationalStudent(x) & US(y)) -> (HasF1Visa(x,y) | HasJ1Visa(x,y)))", "all x.(InternationalStudent(x) -> (HasF1Visa(x) | HasJ1Visa(x)))", "all x.(InternationalStudent(x) -> (HasF1Visa(x) | HasJ1Visa(x)))"]}
{"id": "folio_validation_174", "nl": "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.", "fol": "all x.(((IsInternationalStudent(x) & HasF1Visa(x) & DesiresToWorkInUS(x)) -> SubmitApplication(x,Cpt)) | SubmitApplication(x,Opt))", "prediction": ["all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (ApplicationForCPT(x) | ApplicationForOPT(x)))", "all x y.((InternationalStudent(x) & Student(y) & InUS(x,y) & HasF1Visa(x)) -> (ApplicationForCPT(x,y) | ApplicationForOPT(x,y)))", "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (AppliesForCPT(x) | AppliesForOPT(x)))", "all x y.((InternationalStudent(x) & InternationalStudent(y) & InUS(x,y) & HasF1Visa(x)) -> (ApplicationForCPT(x) | ApplicationForOPT(x)))", "all x y z.((InternationalStudent(x) & US(y) & Visa(z) & HasF1(x,z)) -> (ApplicationForCPT(x) | ApplicationForOPT(x)))", "all x y.((InternationalStudent(x) & InUS(x,y) & HasF1Visa(x)) -> (ApplicationForCPT(x) | ApplicationForOPT(x)))", "all x.((InternationalStudent(x) & InUS(x,F1) & (CPT(x) | OPT(x))) -> NeedsApplication(x))", "all x y.((InternationalStudent(x) & US(y) & HasF1Visa(x,y)) -> (ApplicationForCPT(x) | ApplicationForOPT(x)))", "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (ApplicationForCPT(x) | ApplicationForOPT(x)))", "all x.((InternationalStudent(x) & InU.S.(F1Visa(x) & (CPT(x) | OPT(x))) -> NeedsApplication(x))", "(all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (AppliesForCPT(x) | AppliesForOPT(x)))", "all x.((InternalStudent(x) & InUS(x) & HasF1Visa(x)) -> (ApplicationForCPT(x) | ApplicationForOPT(x)))", "all x.((InternationalStudent(x) & InUSWithF1Visa(x) & (WantsToWorkInUS(x) | WantsToWorkInUS(x))) -> NeedsCPTOrOPT.(x))", "all x y.((InternationalStudent(x) & Student(y) & InUS(x,y) & HasF1Visa(x)) -> (AppliesForCPT(y,x) | AppliesForOPT(y,x)))", "all x.((InternalStudent(x) & InUS(x) & HasF1Visa(x)) -> (AppliesForCPT(x) | AppliesForOPT(x)) & WantsToWorkInUS(x)))", "all x.((InternationalStudent(x) & in US(x) & HasF1Visa(x)) -> (ApplyForCPT(x) | ApplyForOPT(x)))"]}
{"id": "folio_validation_175", "nl": "Mike is an international student.", "fol": "IsInternationalStudent(Mike)", "prediction": ["(InternationalStudent(Mike) & InternationalStudent(Mike))", "Mike is InternationalStudent(Mike)", "all x.(Mike(x) -> InternationalStudent(x))", "Mike is international student.", "(InternationalStudent(Mike)", "Mike is InternationalStudent(Mike)", "all x.(Mike(x) -> InternationalStudent(x))", "-InternationalStudent(Mike)", "Mike is an international student.", "(InternationalStudent(Mike)", "Mike is international student.", "-InternationalStudent(Mike)", "(InternationalStudent(Mike)", "Mike is InternationalStudent(Mike,International)", "(InternationalStudent(Mike)", "is InternationalStudent(Mike)"]}
{"id": "folio_validation_176", "nl": "Mike needs to apply for CPT if he wants to work in the US.", "fol": "(DesiresToWorkInUS(Mike) -> SubmitApplication(Mike,Cpt))", "prediction": ["all x.((Mike(x) & WantsToWorkInUS(x)) -> NeedsCPT(x))", "all x.((Mike(x) & WantsToWorkInUS(x)) -> NeedsCPT(x))", "all x y.((Mike(x) & US(y)) -> NeedsCPT(x,y))", "(WorksInUS) -> NeedsCPT(Mike))", "(WantsToWorkInUS(Mike,US) -> NeedsCPTApplication(Mike))", "all x y.((Mike(x) & CPT(y) & WantsToWorkInUS(x,y)) -> NeedsApplication(x,y))", "all x.((Mike(x) & WorkInUS(x)) -> NeedsCPT(x))", "(ApplyForCPT) & WantsToWorkInUS(Mike,US))", "all x.((Mike(x) & WantsToWorkInUS(x)) -> NeedsCPT(x))", "all x.((Mike(x) & WantsWorkInUS(x)) -> NeedsCPT(x))", "all x.((WorksInUS(x) & NeedsCPT(x)) -> ApplyFor(x,CPT))", "all x.(WorksInUS(x) -> NeedsCPT(x))", "all x y.((Mike(x) & US(y)) -> NeedsCPT(x,y))", "all x y.((Mike(x) & CPT(y)) -> NeedsApplication(x,y))", "All x.(WorksInUS(x) -> NeedsCPT(x))", "all x.((Mike(x) & WorksInUS(x)) -> NeedsCPTA(x))"]}
{"id": "folio_validation_177", "nl": "Mike has an F1 visa.", "fol": "HasF1Visa(Mike)", "prediction": ["(HasVisa(Mike) & F1(Mike))", "all x.(Mike(x) -> HasF1Visa(x))", "Mike has a F1Visa(Mike)", "Mike has an F1Visa(Mike)", "(HasVisa(Mike,F1))", "-HasVisa(Mike,F1)", "-HasF1Visa(Mike)", "all x.(Mike(x) -> HasF1Visa(x))", "Mike has a F1Visa(Mike)", "(F1Visa(Mike)", "all x.(Mike(x) -> F1Visa(x))", "(HasF1Visa(Mike)", "Mike has F1Visa(Mike)", "-F1Visa(Mike)", "(HasF1Visa(Mike)", "Mike is a F1 Visa Holder."]}
{"id": "folio_validation_178", "nl": "Mike has a J1 visa.", "fol": "HasJ1Visa(Mike)", "prediction": ["all x.(Mike(x) -> HasJ1Visa(x))", "Mike has a J1Visa(Mike)", "(J1Visa(Mike) & -J1Visa(Mike))", "(HasJ1Visa(Mike))", "all x.(Mike(x) -> HasJ1Visa(x))", "(J1Visa(Mike))", "-J1Visa(Mike)", "Mike has J1Visa.", "Mike has a J1Visa(Mike)", "all x.(Mike(x) -> J1Visa(x))", "all x.(Mike(x) -> HasJ1Visa(x))", "all x.((Mike(x) & J1Visa(x)) -> Has(x,Mike))", "(J1Visa(Mike,J1))", "(HasJ1Visa(Mike)", "Mike has a J1Visa(Mike)", "all x.(Mike(x) -> HasJ1Visa(x))"]}
{"id": "folio_validation_179", "nl": "All cows are bovines.", "fol": "all x.(IsCow(x) -> IsBovine(x))", "prediction": ["all x.(Cow(x) -> Bovine(x))", "all x.(Cow(x) -> Bovine(x))", "(Bovine(cow) & All(cow) -> Bovine(cow))", "(all x.(Cow(x) -> Bovine(x))", "all x.(Cow(x) -> Bovine(x))", "(all x.(Cow(x) -> Bovine(x))", "all x.(Cow(x) -> Bovine(x))", "all x.(Cow(x) -> Bovine(x))", "all x.(Cow(x) -> Bovine(x))", "all x.(Cow(x) -> Bovine(x))", "all x.(Cow(x) -> Bovine(x))", "all x.(Cow(x) -> Bovine(x))", "all x.(Cow(x) -> Bovine(x))", "all x.(Cow(x) -> Bovine(x))", "all x.(Cow(x) -> Bovine(x))", "all x.(Cow(x) -> Bovine(x))"]}
{"id": "folio_validation_180", "nl": "Some pets are cows.", "fol": "exists x.(IsPet(x) & IsCow(x))", "prediction": ["exists x.(Pet(x) & Cow(x))", "exists x.(Pet(x) & Cow(x))", "exists x.(Pet(x) & Cow(x))", "exists x.(Pet(x) & Cow(x))", "exists x.(Pet(x) & Cow(x))", "exists x y.(Pet(x) & Cow(y))", "exists x.(Pet(x) & Cow(x))", "exists x.(Pet(x) & Cow(x))", "exists x.(Animal(x) & Cow(x))", "exists x.(Pet(x) & Cow(x))", "exists x.(Animal(x) & Cow(x))", "exists x.(Pet(x) & Cow(x))", "exists x.(Pet(x) & Cow(x))", "exists x.(Pet(x) & Cow(x))", "exists x.(Pet(x) & Cow(x))", "exists x.(Pet(x) & Cow(x))"]}
{"id": "folio_validation_181", "nl": "If something is a bovine, then it is domesticated.", "fol": "all x.(IsBovine(x) -> IsDomesticated(x))", "prediction": ["all x.(Bovine(x) -> Domesticated(x))", "all x.((Bovine(x) & Domesticated(x)) -> Bovine(x))", "all x.(Bovine(x) -> Domesticated(x))", "all x.((Bovine(x) & Domesticated(x)) -> Bovine(x))", "all x y.((Bovine(x) & Object(y)) -> Domesticated(y))", "all x.(Bovine(x) -> Domesticated(x))", "all x.((Bovine(x) & Domesticated(x)) -> Bovine(x))", "all x.((Bovine(x) & Domesticated(x)) -> Domesticated(x))", "all x.(Bovine(x) -> Domesticated(x))", "all x.((Bovine(x) & Domesticated(x)) -> Bovine(x))", "all x.(Bovine(x) -> Domesticated(x))", "all x.((Bovine(x)) -> Domesticated(x))", "all x.((Bovine(x) & Domesticated(x)) -> Domesticated(x))", "all x.(Bovine(x) -> Domesticated(x))", "all x.(Bovine(x) -> Domesticated(x))", "exists x.(Bovine(x) & Domesticated(x))"]}
{"id": "folio_validation_182", "nl": "No domesticated animals are alligators.", "fol": "all x.(IsDomesticated(x) -> -IsAlligator(x))", "prediction": ["all x.(DomesticatedAnimal(x) -> -Alligator(x))", "-exists x.(DomesticatedAnimal(x) & Alligator(x))", "all x.(DomesticatedAnimal(x) -> -Alligator(x))", "-exists x.(DomesticatedAnimal(x) & Alligator(x))", "-all x.(DomesticatedAnimal(x) -> Alligator(x))", "(exists x.(DomesticatedAnimal(x) & -Alligator(x)))", "all x.(DomesticatedAnimal(x) -> -Alligator(x))", "-exists x.(DomesticatedAnimal(x) & Alligator(x))", "all x.(DomesticatedAnimal(x) -> -Alligator(x))", "-exists x.(DomesticatedAnimal(x) & Alligator(x))", "-all x.(DomesticatedAnimal(x) -> Alligator(x))", "all x.(DomesticatedAnimal(x) -> -Alligator(x))", "-exists x.(DomesticatedAnimal(x) & Alligator(x))", "all x.(DomesticatedAnimal(x) -> Alligator(x))", "all x.(DomesticatedAnimal(x) -> -Alligator(x))", "all x.(DomesticatedAnimal(x) -> -Alligator(x))"]}
{"id": "folio_validation_183", "nl": "Ted is an aligator.", "fol": "IsAlligator(Ted)", "prediction": ["(Aligator(Ted)", "Ted is Aligator(Ted)", "all x.(Ted(x) -> Aligator(x))", "-Aligator(Ted)", "all x.(Aligator(x) -> Ted(x))", "(Aligator(Ted)", "Ted is Aligator(Ted)", "(Aligator(Ted)", "Ted is Aligator(te)", "All x.(Ted(x) -> Aligator(x))", "all x.(Aligator(x) -> Ted(x))", "(Alligator(Ted)", "(Aligator(Ted)", "exists x.(Ted(x) & Aligator(x))", "Ted is Aligator.", "Ted is Aligator."]}
{"id": "folio_validation_184", "nl": "Ted is a pet.", "fol": "IsPet(Ted)", "prediction": ["(Pet(Ted) & Pet(Ted))", "all x.(Ted(x) -> Pet(x))", "Ted is a pet.", "(Pet(Ted) & Pet(Ted))", "all x.((Ted(x) & Pet(x)) -> Pet(x))", "Ted is pet(Ted)", "-Pet(Ted)", "all x.(Ted(x) -> Pet(x))", "(Pet(Ted) | Pet(Ted)))", "all x.((Ted(x) & Pet(x)) -> Pet(x))", "(Pet(Ten) & Pet(Ten))", "all x.(Ted(x) -> Pet(x))", "(Pet(Teresa) | Pet(Ted)))", "(Pet(Ted) & Pet(Ted))", "exists x.(Pet(x) & Ted(x))", "exists x.(Pet(x) & Ted(x))"]}
{"id": "folio_validation_185", "nl": "Ted is a pet and a cow.", "fol": "(IsPet(Ted) & IsCow(Ted))", "prediction": ["(Pet(Ted) & Cow(Ted))", "all x.(Ted(x) -> (Pet(x) & Cow(x)))", "all x y.((Ted(x) & Cow(y)) -> (Pet(x) & Cow(x)))", "(Pet(Ted) & Cow(Ted))", "all x.((Ted(x) & Pet(x) & Cow(x)) -> Pet(x))", "all x.(Ted(x) -> (Pet(x) & Cow(x)))", "((Ted(Ted) & Pet(Ted)) & Cow(Ted))", "(Pet(Teresa) & Cow(Teresa))", "(Pet(Ted) & Cow(Ted))", "all x.((Ted(x) & Pet(x) & Cow(x)) -> Pet(x))", "all x.(Ted(x) -> (Pet(x) & Cow(x)))", "exists x.(Ted(x) & Pet(x) & Cow(x))", "(Pet(Ted) & Cow(Ted))", "(Pet(Ter) & Cow(Ter))", "(Pet(Ted) & Cow(Ted))", "exists x.(Pet(x) & Cow(x))"]}
{"id": "folio_validation_186", "nl": "If Ted is a cow, then Ted is not a pet.", "fol": "(IsCow(Ted) -> -IsPet(Ted))", "prediction": ["all x.((Ted(x) & Cow(x)) -> -Pet(x))", "all x.((Cow(x) & Ted(x)) -> -Pet(x))", "all x.((Ted(x) & Cow(x)) -> -Pet(x))", "(all x.((Ted(x) & Cow(x)) -> -Pet(x)))", "all x.(Cow(x) -> -Pet(x))", "all x.((Ted(x) & Cow(x)) -> -Pet(x))", "(all x.((Ted(x) & Cow(x)) -> -Pet(x)))", "all x.(Cow(x) -> -Pet(x))", "all x.((Cow(x) & Ted(x)) -> -Pet(x))", "(all x.(Cow(x) -> -Pet(x)))", "all x.((Ted(x) & Cow(x)) -> -Pet(x))", "all x.(Cow(x) -> -Pet(x))", "exists x.(Cow(x) & Ted -Pet(x))", "all x.(Cow(x) -> -Pet(x))", "all x.(Cow(x) -> -Pet(x))", "all x.(Cow(x) -> -Pet(x))"]}
{"id": "folio_validation_187", "nl": "Badults is a British Sitcom series, starring members of Pappy's.", "fol": "exists x.(MemberOfPappys(x,Pappys) & IsBritishSitcom(Badults) & IsSeries(Badults) & StarsIn(Badults,x))", "prediction": ["all x.(Badults(x) -> (BritishSitcomSeries(x) & StarsPappys(x)))", "(SitcomSeries(Badults) & StarsPappys(Badults))", "all x.((Badults(x) & BritishSitcomSeries(x) & StarsPappys(x)) -> StarsPappys(x))", "(SitcomSeries(Badults) & StarsPappys(Badults))", "(Badults) & BritishSitcomSeries(BritishSitcom) & StarsPappys(BritishSitcom))", "Badults (SitcomSeries) & StarsPappys(British) & Pappys(British))", "all x y.((Badults(x) & BritishSitcomSeries(y) & StarsPappys(x,y)) -> StarsPappys(x,y))", "all x.(Badults(x) -> (SitcomSeries(x) & StarsPappyStuff(x)))", "(BritishSitcomSeries(Badults) & StarsPappyStuff(Badults))", "(Badults) & BritishSitcomSeries(b) & StarsPappys(c))", "Badults (BritishSitcomSeries) & StarsPappyStuff(Badults))", "all x y.((Badults(x) & BritishSitcomSeries(y) & StarsPappyStuff(x,y)) -> StarsPappyStuff(x,y))", "All x.((Badults(x) & BritishSitcomSeries(x) & StarsPappys(x)) -> Stars(x))", "all x.(Badults(x) -> (SitcomSeries(x) & StarsPappy(x)))", "(SitcomSeries(Badults) & StarsPappys(Badults))", "All x.(Badults(x) -> (BritishSitcomSeries(x) & StarsPappyStuff(x)))"]}
{"id": "folio_validation_188", "nl": "Badults piloted in July 2013 on BBC Three.", "fol": "(PilotedInMonthYear(Badults,July2013) & AiredOnChannel(Badults,Bbcthree))", "prediction": ["all x.(Badult(x) -> PilotedOnBroadcastThree(x))", "all x y.((Badult(x) & BBCThree(y)) -> PilotedInJuly2013(x,y))", "(PilotedOnBroadcastThree(Badults) & July2013(Badults))", "all x.(Badult(x) -> PilotedInJuly2013(x))", "(BadultsPilotedInJuly2013(Bbc3) & BBCThree(Bbc3))", "all x.((Badult(x) & PilotedOnBroadcastThree(x)) -> PilotedOnBroadcastThree(x))", "(PilotedOnBritishThree(Badults) & July2013(Badults))", "Badults piloted inJuly2013 on BBCThree(b))", "All x.((Badult(x) & PilotedInJuly2013(x) & BBCThree(x)) -> PilotedOn(x,Broadcast3))", "(BadultsPilotedOnBroadcastThree(b) & July2013(b) & BBCThree(c))", "all x y.((Badult(x) & BBCThree(y)) -> PilotedInJuly2013(x,y))", "(PilotedInJuly2013(Badults) & BBCThree(Badults))", "all x.(Badult(x) -> PilotedOnBroadcastThree(x))", "all x.(Badult(x) -> PilotedInJuly2013(x))", "all x y.((Badult(x) & BBCThree(y)) -> PilotedInJuly2013(x,y))", "all x.(Badult(x) -> PilotedOnBroadcastThree(x))"]}
{"id": "folio_validation_189", "nl": "The Working title \"The Secret Dude Society\" was used for Badults.", "fol": "HasWorkingTitle(Thesecretdudesociety,Badults)", "prediction": ["all x.((WorkingTitle(x) & SecretDudeScientific(x)) -> UsedForBadults(x))", "(WorkingTitle(WorkingTitle) & SecretDudeScientific(WorkingTitle))", "The WorkingTitle \"The SecretDudeScientific\" was used for Badults.", "all x y.((WorkingTitle(x) & SecretDude(y)) -> UsedForBadults(x,y))", "All x.(WorkingTitle(x) -> (SecretDudeScientific(x) & UsedForBadults(x)))", "(WorkingTitle(WorkingDude(WorkingDude) & UsedForBadults(WorkingDude))", "All x.((WorkingTitle(x) & SecretDudeSatellite(x)) -> UsedForBadults(x))", "all x.((WorkingTitle(x) & SecretDude(x)) -> UsedForBadults(x))", "(WorkingTitle(WorkingTitle) & SecretDudeScientific(WorkingTitle))", "(WorkingTitle \"SecretDudeScientific(Badult))", "all x y.((WorkingTitle(x) & SecretDude(y)) -> UsedForBadults(x,y))", "(WorkingTitle\" & SecretDudeSky(x)) - UsedForBadults(x))", "All x.(WorkingTitle(x) -> \"SecretDudeScientific(x)\")", "all x y.((WorkingTitle(x) & SecretDudeSatellite(y)) -> UsedForBadults(x,y))", "(WorkingTitle \"The SecretDudeSky\") - UsedForBadults(Badults))", "All x.((WorkingTitle(x) & SecretDudeScientific(x)) -> UsedForBadults(x))"]}
{"id": "folio_validation_190", "nl": "Andrew Collins was the script editor for Badults", "fol": "HasScriptEditor(Andrewcollins,Badults)", "prediction": ["Andrew Collins was the scripteditor for Badults.com.", "(ScriptEditor(AndrewCollins) & Badults(Andrew Collins))", "(Scientist(AndrewCollins) & Badults(Andrew Collins))", "AndrewCollins was the scripteditor for Badults.com.", "Andrew Collins was scripteditor for Badults.com.", "(StructEditor(AndrewCollins) & Badults(Andrew Collins))", "Andrew Collins, aka Badults(x) & ScriptEditor(x))", "AndrewCollins (AndrewCollins) was the scripteditor for Badults(x))", "Andrew Collins was the scripteditor for Badults(x) & ScriptEditorForBadults(x))", "Andrew Collins was the scripteditor for Badults.", "(ScriptEditor(AndrewCollins) & Badults(AndrewCollins))", "Andrew Collins (AndrewCollins) \u2013 Writer(x) & Badults(x))", "(Scientist(AndrewCollins) & Badults(Andrew Collins))", "AndrewCollins was the scripteditor for Badults.", "(ScriptEditor(AndrewCollins) & Badults(Andrew Collins))", "Andrew Collins was scripteditor for Badults.com."]}
{"id": "folio_validation_191", "nl": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".", "fol": "exists x.(HasScriptEditor(Andrewcollins,x) & IsSeries(x) & HasWorkingTitle(Thesecretdudesociety,x))", "prediction": ["all x.((AndrewCollins(x) & ScriptEditor(x)) -> WorkingTitle(x,TheSecretDudeScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificScientificSc", "Andrew Collins was the scripteditor for a series with the working title \"The SecretDudeScientific(x)\"", "all x y.((AndrewCollins(x) & Series(y) & WorkingTitle(y,x)) -> ScriptEditor(x,y))", "AndrewCollins was the scripteditor for a series with the working title \"The SecretDudeScientific(x)\"", "(WorkingTitle: SecretDudeScientific(AndrewCollins))", "(WorkingTitle(AndrewCollins) & SecretDudeSky(Andrew Collins))", "(Scientist(AndrewCollins) & WorkingTitle(AndrewDudeScientist))", "(ScriptEditor(AndrewCollins) & WorkingTitle(AndrewDudeScientist))", "Andrew Collins was scripteditor for a series with working title \"The SecretDudeScientific(x)\"", "Andrew Collins was the scripteditor for a series with working title \"The SecretDudeScientific(x)\"", "AndrewCollins was the scripteditor for a series with working title \"The SecretDudeScientific(x)\"", "all x y.((AndrewCollins(x) & Series(y) & WorkingTitle(y,x)) -> Writer(x,y))", "(StoryEditor(AndrewCollins) & WorkingTitle(Andrew Collins,TheSecretDudeScientific))", "Andrew Collins, was the scripteditor for a series with the working title \"The SecretDudeScientific(x)\"", "Andrew Collins was the scripteditor for a series with the working title \"SecretDudeScientific(x)\"", "(WorkingTitle: SecretDudeScientific(AndrewCollins))"]}
{"id": "folio_validation_192", "nl": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.", "fol": "all x y.((MemberOfPappys(x,Pappys) & StarsIn(y,x)) -> -(AiredOnChannel(y,Bbctwo) | AiredOnChannel(y,Bbcthree)))", "prediction": ["-exists x.(Pappys(x) & (StartedForShow(x,Broadcast2) | StartedForShow(x,Broadcast3))))", "all x.((Pappy's(x) & -(StartedOnBroadcastTwo(x) | StartedOnBroadcastThree(x))))", "-exists x.(PappySisters(x) & (StartedOnBroadcastTwo(x) | StartedOnBroadcastThree(x)))", "all x.((Pappys(x) & -(starredForShow(x,Broadcast2) | StartedForShow(x,Broadcast3)))) -> -(Pappys(x) & StartedForShow(x,Broadcast2)))", "(-exists x.(MemberOfPappys(x) & StartedForShow(x,BroadcastTwo)) | exists y.(MemberOfPappys(y,BroadcastThree))))", "(exists x.(MemberOfPappy's(x) & StartedOnBroadcastTwo(x)) | exists y.(MemberOfPappy's(y) & StartedOnBroadcastThree(y))))", "all x.(Pappy's(x) -> (-starredForShow(x,Broadcast2) | StartedForShow(x,Broadcast3)))", "(exists x.(PappySisters(x) & -starredForShow(x)) & -exists y.(PappySisters(y) & PilotsOn(x,y))))", "all x.((Pappy's(x) & (BroadcastTwo(x) | BBCThree(x))) -> -StartedForShow(x))", "(exists x.(Pappy'sMember(x) & StartedOnBroadcastTwo(x)) & -exists y.(BroadcastThree(y) & StartedOnBroadcastTwo(x))))", "-exists x.(Pappys(x) & (StartedOnBroadcastTwo(x) | StartedOnBroadcastThree(x)))", "-exists x.(Pappy's(x) & (StartedForShow(x,Broadcast2) | StartedForShow(x,Broadcast3))))", "-exists x.(MemberOfPappy's(x) & (StartedForShow(x,Broadcast2) | StartedForShow(x,Broadcast3))))", "all x.(PappySisters(x) -> (-starred(x) & (OnBroadcastTwo(x) | OnBroadcastThree(x))))", "-exists x.(PappySisters(x) & (StartedForShow(x,Broadcast2) | StartedForShow(x,Broadcast3))))", "Currently, Pappy's has no members."]}
{"id": "folio_validation_193", "nl": "All growth companies' stocks are volatile.", "fol": "all x.(StocksOfGrowthCompanies(x) -> StockPriceIsVolatile(x))", "prediction": ["all x.(GrowthCompany(x) -> VolatileStock(x))", "all x.(GrowthCompany(x) -> VolatileStock(x))", "all x y.((GrowthCompany(x) & Stock(y)) -> Volatile(y))", "(VolatileStocks(GrowthCompany)", "all x.((GrowthCompany(x) & Stock(y)) -> Volatile(x))", "all x y.((GrowthCompany(x) & GrowthCompany(y)) -> VolatileStock(x,y))", "all x.((GrowthCompany(x) & GrowthCompany(x)) -> VolatileStock(x))", "all x.(GrowthCompany(x) -> VolatileStock(x))", "all x y.((GrowthCompany(x) & Stock(y)) -> Volatile(x,y))", "all x.(GrowthCompany(x) -> VolatileStock(x))", "all x.((GrowthCompany(x) & Stock(x)) -> Volatile(x))", "all x.(GrowthCompany(x) -> VolatileStocks(x))", "all x.(GrowthCompany(x) -> Volatile(x))", "exists x.(GrowthCompany(x) & Stock(x) & Volatile(x))", "all x.(GrowthCompany(x) -> VolatilStock(x))", "all x.(GrowthCompany(x) -> VolatileShares(x))"]}
{"id": "folio_validation_194", "nl": "If the stock price is volatile, then it is not suitable for a retirement fund.", "fol": "all x.(StockPriceIsVolatile(x) -> -SuitableForRetirementFund(x))", "prediction": ["all x.((StockPrice(x) & Volatile(x)) -> -SuitableForRetirementFund(x))", "all x.(VolatileStockPrice(x) -> -SuitableForRetirementFund(x))", "(VoidStockPrice(x) -> -SuitableForRetirementFund(x))", "all x.((StockPrice(x) & Volatile(x)) -> -SuitableForRetirementFund(x))", "all x.(VolatileStockPrice(x) -> -SuitableForRetirementFund(x))", "all x y.((StockPrice(x) & Volatile(x)) -> -SuitableForRetirementFund(y))", "all x.((StockPrice(x) & Volatile(x)) -> -SuitableForRetirementFund(x))", "exists x.(StockPrice(x) & Volatile(x) & -SuitableForRetirementFund(x))", "all x.(Volatile(x) -> -SuitableForRetirementFund(x))", "all x.((StockPriceVolatile(x)) -> -SuitableForRetirementFund(x))", "all x.(VolatileStockPrice(x) -> -SuitableForRetirementFund(x))", "all x y.((StockPrice(x) & Volatile(x)) -> -SuitableForRetirementFund(y))", "all x.((StockPrice(x) & Volatile(x)) -> -SuitableForRetirementFund(x))", "all x.((StockPriceVoiable(x)) -> -SuitableForRetirementFund(x))", "all x y.((StockPrice(x) & Volatile(x)) -> -SuitableForRetirementFund(y))", "all x.((StockPrice(x) & Volatil(x)) -> -SuitableForRetirementFund(x))"]}
{"id": "folio_validation_195", "nl": "Some companies' stocks are growth companies' stocks.", "fol": "exists x.(StocksOfCompanies(x) & StocksOfGrowthCompanies(x))", "prediction": ["exists x.(Company(x) & GrowthCompany(x))", "exists x.(CompanyStock(x) & GrowthCompanyStock(x))", "exists x y.(Company(x) & Company(y) & Stock(x,y) & GrowthCompany(y))", "exists x.(Company(x) & GrowthCompany(x))", "exists x.(CompanyStock(x) & GrowthStock(x))", "exists x y.(Company(x) & Stock(y) & GrowthCompany(x,y))", "exists x y.(Company(x) & Company(y) & Stock(x,y) & GrowthCompany(x,y))", "exists x.(CompanyStock(x) & GrowthCompanyStock(x))", "all x y.((Company(x) & Company(y)) -> GrowthStock(x,y))", "exists x.(Company(x) & GrowthCompany(x))", "all x y.((Company(x) & Stock(y)) -> GrowthCompany(x,y))", "exists x.(Company(x) & Stock(x) & GrowthCompany(x))", "exists x.(CompanyStock(x) & GrowthStock(x))", "exists x.(Company(x) & GrowthCompany(x))", "exists x.(CompanyStock(x) & GrowthCompanyStock(x))", "exists x.(Company(x) & GrowthCompany(x))"]}
{"id": "folio_validation_196", "nl": "All mature companies' stocks are suitable for a retirement fund.", "fol": "all x.(StocksOfMatureCompanies(x) -> SuitableForRetirementFund(x))", "prediction": ["all x.(MatureCompanyStock(x) -> SuitableForRetirementFund(x))", "all x.((MatureCompany(x) & Stock(x)) -> SuitableForRetirementFund(x))", "all x y.((MatureCompany(x) & Stock(y)) -> SuitableForRetirementFund(x,y))", "all x.(MatureCompanyStock(x) -> SuitableForRetirementFund(x))", "all x.(MatureCompany(x) -> SuitableForRetirementFund(x))", "all x.((MatureCompany(x) & Stock(x)) -> SuitableForRetirementFund(x))", "all x.(MatureCompanyStocks(x) -> SuitableForRetirementFund(x))", "all x.((MatureCompanyStocks(x) & SuitableForRetirementFund(x)) -> SuitableForRetirementFund(x))", "all x y.((MatureCompany(x) & Stock(y)) -> SuitableForRetirementFund(x,y))", "all x.((MatureCompany(x) & Stock(x)) -> SuitableForRetirementFund(x))", "all x.(MatureCompany(x) -> SuitableForRetirementFund(x))", "(all x.(MatureCompanyStock(x) -> SuitableForRetirementFund(x)))", "all x y.((MatureCompany(x) & Stock(y)) -> SuitableForRetirementFund(x,y))", "all x.(MaturityCompanyStocks(x) -> SuitableForRetirementFund(x))", "all x y.((MatureCompany(x) & Stock(y)) -> SuitableForRetirementFund(x,y))", "all x.((MatureCompany(x) & Stock(y)) -> SuitableForRetirement(x,y))"]}
{"id": "folio_validation_197", "nl": "KO is a mature company's stock.", "fol": "StocksOfMatureCompanies(KO)", "prediction": ["all x.(Kos(x) -> MatureCompanyStock(x))", "all x.((Ko) & MatureCompanyStock(x)) -> Stock(x))", "all x.(Koyo(x) -> MatureCompanyStock(x))", "(MatureCompanyStock(KO))", "all x y.((Koo(x) & Company(y)) -> MatureStock(x,y))", "KO is mature company's stock.", "KO is a mature company's stock.", "all x.((Koyo(x) & MatureCompanyStock(x)) -> Stock(x))", "(MatureCompanyStock(KO) & Stock(KO))", "all x.((Ko) & MatureCompanyStock(x)) -> Stock(x))", "all x.(Kob(x) -> MatureCompanyStock(x))", "exists x.(MatureCompanyStock(x) & Stock(x))", "all x y.((Koo(x) & Company(y)) -> MatureStock(x,y))", "(MatureCompanyStock(KO))", "all x.(Kos(x) -> MatureCompanyStock(x))", "all x.(Koyo(x) -> MatureCompanyStock(x))"]}
{"id": "folio_validation_198", "nl": "KO is a company stock.", "fol": "StocksOfCompanies(KO)", "prediction": ["all x.(Kos(x) -> CompanyStock(x))", "all x.(KO(x) -> CompanyStock(x))", "(CompanyStock(KO) & CompanyStock(KO))", "all x.(Kobo(x) -> CompanyStock(x))", "KO is a company stock.", "all x.(KO(x) -> CompanyStock(x))", "KO is a company stock.", "(CompanyStock(KO) & CompanyStock(KO))", "all x.(Kos(x) -> CompanyStock(x))", "all x.(Kobo(x) -> CompanyStock(x))", "KO is a company stock.", "all x.(KO(x) -> CompanyStock(x))", "All x.(Ko (CompanyStock) -> Stock(x))", "all x.(KO(x) -> CompanyStock(x))", "All x.(Koyo(x) -> CompanyStock(x))", "all x.(KO(x) -> CompanyStock(x))"]}
{"id": "folio_validation_199", "nl": "KO is a company stock and a growth company's stock.", "fol": "(StocksOfCompanies(KO) & StocksOfGrowthCompanies(KO))", "prediction": ["all x.(Kos(x) -> (CompanyStock(x) & GrowthStock(x)))", "all x.(KO(x) -> (CompanyStock(x) & GrowthStock(x)))", "(CompanyStock(KO) & GrowthStock(KO))", "((Ko) & CompanyStock(Ko)) & GrowthStock(Ko))", "all x y.((Koo(x) & CompanyStock(y)) -> (CompanyStock(x,y) & GrowthStock(x,y)))", "all x.(Koyo(x) -> (CompanyStock(x) & GrowthStock(x)))", "all x y.((Kobo(x) & CompanyStock(y)) -> (CompanyStock(x) & GrowthStock(x)))", "(all x.(Kos(x) -> CompanyStock(x)) & all y.(GrowthStock(y) -> CompanyStock(y)))", "all x.(Korea(x) -> (CompanyStock(x) & GrowthStock(x)))", "all x.(KO(x) -> (CompanyStock(x) & GrowthStock(x)))", "(CompanyStock(KO) & GrowthStock(KO))", "all x y.((Koo(x) & Company(y) & Stock(x,y)) -> (Company(x) & GrowthCompany(x)))", "all x.(KO(x) -> (CompanyStock(x) & GrowthStock(x)))", "all x.(Kos(x) -> (CompanyStock(x) & GrowthStock(x)))", "exists x.(Kobo(x) & CompanyStock(x) & GrowthCompanyStock(x))", "all x.(KO(x) -> (CompanyStock(x) & GrowthStock(x)))"]}
{"id": "folio_validation_200", "nl": "If KO is a growth company's stock or if its price is volatile, then KO is neither a company's stock nor is its price volatile.", "fol": "(((StocksOfGrowthCompanies(KO) | StockPriceIsVolatile(KO)) -> -StocksOfCompanies(KO)) | -StockPriceIsVolatile(KO))", "prediction": ["all x.((Korea(x) & GrowthCompanyStock(x)) | PriceVolatile(x))", "all x.((KO(x) & GrowthCompanyStock(x)) | PriceVolatile(x)) -> (-CompanyStock(x) & -PriceVolatile(x)))", "all x.((Korea(x) & (GrowthCompanyStock(x) | VolatilePrice(x))) -> -(GrowthCompanyStock(x) | VolatilePrice(x))))", "all x.((Korea(x) & GrowthCompanyStock(x)) | (PriceVolatile(x) & -CompanyStock(x))))", "((GrowthCompanyStock(KO) | VolatilePrice(KO))) -> -(GrowthCompanyStock(KO) | VolatilePrice(KO)))", "all x y.((Korea(x) & GrowthCompanyStock(x) & PriceVolatile(x)) -> (-KoreaStock(x) & -PriceVolatile(x)))", "(all x.((Korea(x) & GrowthCompanyStock(x)) | VolatilePrice(x))) -> -(Korea(x) & -VolatilePrice(x)))", "all x.((KO(x) & GrowthCompanyStock(x)) | VolatilePrice(x)) -> (-CompanyStock(x) & -VolatilePrice(x)))", "all x.((GrowthCompanyStock(x) | VolatilePrice(x)) -> (-GrowthCompanyStock(x) & -VolatilePrice(x)))", "all x.((Korea(x) & (GrowthCompanyStock(x) | VolatilePrice(x))) -> (-GrowthCompanyStock(x) & -VolatilePrice(x)))", "all x y.((Korea(x) & GrowthCompany(x) & Stock(y)) -> (-GrowthCompany(x) & VolatilePrice(x)))", "all x.((KO(x) & GrowthCompanyStock(x)) | PriceVolatile(x)) -> -(KO(x) & GrowthCompanyStock(x) & PriceVolatile(x)))", "(all x.((Korea(x) & GrowthCompanyStock(x)) | VolatilePrice(x))) -> -(Korea(x) & -VolatilePrice(x)))", "all x.((Korea(x) & GrowthCompanyStock(x)) | VolatilePrice(x))", "all x y.((Korea(x) & GrowthCompanyStock(x) & PriceVolatile(x)) -> (-KoreaStock(y) & -PriceVolatile(y)))", "all x.((Koyota(x) & GrowthCompanyStock(x)) | PriceVolatile(x))"]}
{"id": "folio_validation_201", "nl": "All vehicle registration plates in Istanbul begin with the number 34.", "fol": "all x.(VehicleRegistrationPlate(x,Istanbul) -> BeginsWithNumber(x,Number34))", "prediction": ["all x.((VehicleRegistrationPlate(x) & InIstanbul(x)) -> Number34(x))", "all x.(VehicleRegistrationPlate(x) -> StartsWithNumber34(x))", "all x y.((VehicleRegistrationPlate(x) & Istanbul(y)) -> Number34(x,y))", "all.((VehicleRegistrationPlate(x) & InIstanbul(x)) -> StartsWithNumber34(x))", "all x.((VehicleRegistrationPlate(x) & InIstanbul(x)) -> Number34(x))", "all x.(VehicleRegistrationPlate(x) -> (Instanbul(x) & Number34(x)))", "all x y.((VehicleRegistrationPlate(x) & Istanbul(y)) -> StartsWithNumber34(x,y))", "all x.((VehicleRegistrationPlate(x) & InIstanbul(x)) -> StartsWithNumber34(x))", "all x y.((VehicleRegistrationPlate(x) & Istanbul(y) & Number34(x,y)) -> StartsWith(x,y))", "all x.(Instanbul(x) -> VehicleRegistrationPlate(x,34))", "all x.(VehicleRegistrationPlate(x) -> Number34(x))", "all x y.((VehicleRegistrationPlate(x) & InIstanbul(y)) -> Number34(x,y))", "all x.((VehicleRegistrationPlate(x) & Istanbul(x)) -> Number34(x))", "All x.(VehicleRegistrationPlate(x) -> StartsWithNumber34(x))", "All x.(VehicleRegistrationPlatesInIstanbul(x) -> Number34(x))", "all x y.((VehicleRegistrationPlate(x) & Istanbul(y)) -> Number34(x,y))"]}
{"id": "folio_validation_202", "nl": "Plates that do not begin with the number 34 are not from Istanbul. ", "fol": "all x.(-BeginsWithNumber(x,Number34) -> -IsFromIstanbul(x))", "prediction": ["all x.((Plate(x) & -EndsWith34(x)) -> -Istanbul(x))", "all x.((Plate(x) & -EndsWith34(x)) -> -Istanbul(x))", "all x.((Plate(x) & -EndsWithProv.(x,34)) -> -Istanbul(x))", "(all x.((Plate(x) & -EndsWith34(x)) -> -FromIstanbul(x))", "all x y.((Plate(x) & -EndsWith34(x)) -> -Istanbul(y))", "(all x.((Plate(x) & -EndsWithProv.(x,34)) -> -Istanbul(x)))", "all x y.((Plate(x) & -EndsWithProv.(x,34)) -> -Istanbul(y))", "all x.((Plate(x) & -BeginsWith34(x)) -> -Istanbul(x))", "all x.((Plate(x) & -EndsWith34(x)) -> -FromIstanbul(x))", "all x.((Plate(x) & -EndedsWith34(x)) -> -Istanbul(x))", "all x.((Plate(x) & -BeginsWithProv.(x,34)) -> -Istanbul(x))", "all x y.((Plate(x) & -EndsWith34(x)) -> -FromIstanbul(y))", "all x.((Plate(x) & -StartWith34(x)) -> -Istanbul(x))", "all x.((Plate(x) & -InitialNumber34(x)) -> -InitialNumber(x))", "all x.((Plate(x) & -EndsWithProv.34(x)) -> -Istanbul(x))", "all x.((Plate(x) & NoProv.(x,34)) -> -Istanbul(x))"]}
{"id": "folio_validation_203", "nl": "Joe's vehicle registration plate is from Istanbul. ", "fol": "VehicleRegistrationPlate(Joe,Istanbul)", "prediction": ["(VehicleRegistrationPlate(Joe) & FromIstanbul(Joe))", "all x.((Joe(x) & VehicleRegistrationPlate(x)) -> FromIstanbul(x))", "all x.(Joe'sVehicleRegistrationPlate(x) -> FromIstanbul(x))", "all x y.((Joe(x) & Vehicle(y)) -> (Istanbul(x) & HasRegisterPlate(x,y)))", "-(Joe'sVehicleRegistrationPlate(Joe) & FromIstanbul(Joe))", "-(VehicleRegistrationPlate(Joe) & FromIstanbul(Joe))", "-Istanbul(Joe'sVehicleRegistrationPlate)", "((Joe's VehicleRegistrationPlate(Joe)) -> FromIstanbul(Joe))", "all x y.((Joe(x) & VehicleRegistrationPlate(y)) -> FromIstanbul(x,y))", "(VehicleRegistrationPlate(Joe) & FromIstanbul(Joe))", "All x.(Joe(x) -> VehicleRegistrationPlateFromIstanbul(x))", "all x.((Joe(x) & VehicleRegistrationPlate(x,Istanbul)) -> Has(x,Istanbul))", "(VehicleRegistrationPlate(Joe) & From(Joe,Istanbul))", "All x.(Joe'sVehicleRegistrationPlate(x) -> Istanbul(x))", "(VehicleRegistrationPlate(Joe) & FromIstanbul(Joe))", "(VehicleRegisterPlate(Joe,Istanbul))"]}
{"id": "folio_validation_204", "nl": "Tom's license plate begins with the number 35. ", "fol": "BeginsWithNumber(Tom,Number35)", "prediction": ["all x.((Tom(x) & LicensePlate(x,35)) -> StartsWith(x,35))", "(Tom'sLicensePlate(Tom) & Number35(Tom))", "all x.(TomsLicensePlate(x) -> Number35(x))", "Tom's LicensePlate(Tom) -Number35(Tom))", "all x y.((Tom(x) & LicensePlate(y) & Number35(y)) -> StartsWith(x,y))", "all x.((Tom(x) & LicensePlate(x,35)) -> StartsWith(x,35))", "Tom's LicensePlate(Tom) & Number35(Tom))", "-(Tom'sLicensePlate(Tom) & Number35(Tom)))", "(TomsLicensePlate(Tom,35))", "(Tom'sLicensePlate(Tom) & Number35(Tom))", "all x.((Tom(x) & LicensePlate(x)) -> Number35(x))", "all x.(TomLicensePlate(x) -> Number35(x))", "(LawnPiece(Tom) & Number35(Tom))", "Tom's LicensePlate(Tom) -EndsWithNumber35(Tom))", "All x y.((Tom(x) & LicensePlate(y) & Number35(y)) -> StartsWith(x,y))", "Tom's LicensePlateEndsWith35(Tom)"]}
{"id": "folio_validation_205", "nl": "[BG] If a license plate begins with the number 35, then it does not begin with the number 34.", "fol": "all x.(BeginsWithNumber(x,Number35) -> -BeginsWithNumber(x,Number34))", "prediction": ["all x.((LicensePlate(x) & Number35(x)) -> -Number34(x))", "((LicensePlate(x) & Number35(x)) -> -Number34(x)))", "all x.((LicensePlate(x) & StartsWith(x,35)) -> -EndsWith(x,34))", "[BG] -EndsWith(LicensePlate(LicensePlate,Number35))", "[BG] -> (LicensePlate(x) & StartsWith(x,35) & -EndsWith(x,34)))", "(Block(LicensePlaque(x) & StartsWithNumber35(x)) -> -EndsWithNumber34(x))", "[BG] (LicensePlate(x) & StartsWith(x,35)) & -EndsWith(x,34))", "all x.((LicensePlate(x) & StartsWithNumber35(x)) -> -EndsWithNumber34(x))", "all x.((LicensedPlate(x) & Number35(x)) -> -Number34(x))", "all x.((LicensePlate(x) & Number35(x)) -> -Number34(x))", "((LicensePlate(x) & Number35(x)) -> -Number34(x))", "[BG] -EndsWithNumber35(LicensePlate)", "([BG] & LicensePlate(x) & Number35(x)) -> -Number34(x))", "all x.((LicensePlaque(x) & Number35(x)) -> -Number34(x))", "all x.((LicensedPlate(x) & Number35(x)) -> -(LicensedPlate(x) & Number34(x)))", "all x.((LicensePlate(x) & Number35(x)) -> -Number34(x))"]}
{"id": "folio_validation_206", "nl": "Joe's license plate begins with the number 34.", "fol": "BeginsWithNumber(Joe,Number34)", "prediction": ["all x.(Joe'sLicensePlate(x) -> Number34(x))", "all x.(Joe(x) -> LicensePlate(x,34))", "(Joe'sLicensePlate(Joe) & Number34(Joe))", "all x.((Joe(x) & LicensePlate(x,34)) -> StartsWith(x,34))", "all x y.((Joe(x) & LicensePlate(y)) -> Number34(y))", "(LicensePlate(Joe) & Number34(Joe))", "-(Joe'sLicensePlate(Joe) & Number34(Joe))", "-EndsWith(Joe'sLicensePlate(Joe,34)", "(Birth(Joe) & Number34(Joe))", "all x.(Joe'sLicensePlate(x) -> Number34(x))", "(Joe'sLicensePlate(Joe) & Number34(Joe))", "All x.(JoesLicensePlate(x) -> Number34(x))", "all x y.((Joe(x) & LicensePlate(y)) -> Number34(x,y))", "all x.(Joe(x) -> LicensePlate(x,34))", "(Joe'sLicensePlate(Joe) & Number34(Joe))", "All x.(Joe'sLicensePlate(x) -> StartsWith(x,34))"]}
{"id": "folio_validation_207", "nl": "Tom's license plate is from Istanbul.", "fol": "VehicleRegistrationPlate(Tom,Istanbul)", "prediction": ["Tom's license plate is from Istanbul.", "(LicensePlate(Tom) & FromIstanbul(Tom))", "Tom's LicensePlateFrom(Tom,Istanbul)", "-(TomsLicensePlate(Tom) & FromIstanbul(Tom))", "all x.((Tom(x) & LicensePlateFrom(x,Istanbul)) -> Has(x,Istanbul))", "TomsLicensePlateFrom(Tom,Istanbul)", "(LicensePlate(Tom) & From(Tom,Istanbul))", "Tom's license plate is from Istanbul.", "(LicensePlaque(Tom) & FromIstanbul(Tom))", "Tom's LicensePlateFromIstanbul(Tom)", "Tom's LicensePlateFromIstanbul(Tom)", "TomsLicensePlateFrom(Tom,Istanbul)", "(LawnPlaque(Tom) & From(Tom,Istanbul))", "(LicensePlate(Tom) & FromIstanbul(Tom))", "Tom's license plate is from Istanbul.", "Tom's LicensePlateFromIstanbul(Tom)"]}
{"id": "folio_validation_208", "nl": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.", "fol": "all x.(WorksInStudentJobs(x) -> NeedsToEarnMoneyForTuition(x))", "prediction": ["all x.(WorksInStudentJobsOnCampus(x) -> NeedsToEarnMoney(x))", "all x.((WorksInStudentJobs(x) & Campus(x)) -> NeedsEarnMoneyToPayForCollegeTuition(x))", "all x y.((Person(x) & WorkInStudentJobs(x) & Campus(y)) -> NeedsToEarnMoney(x,y))", "all x y.((WorksInStudentJobsOnCampus(x) & CollegeTuition(y)) -> NeedsEarnMoneyToPay(x,y))", "all x.((WorksInStudentJobsOnCampus(x) & CollegeTuition(x)) -> NeedsEarnMoneyToPay(x,tuition,tuition))", "all x.(WorksInStudentJobsOnCampus(x) -> NeedsEarnMoneyToPayForCollegeTuition(x))", "all x y z.((Person(x) & StudentJob(y) & Campus(z) & WorksIn(x,y)) -> NeedsEarnMoney(x,z))", "all x.((Person(x) & WorksInStudentJobsOnCampus(x)) -> NeedsToEarnMoneyToPayForCollegeTuition(x))", "all x y.((WorksInStudentJobsOnCampus(x) & College(y)) -> NeedsToEarnMoney(x,y))", "exists x.(StudentJob(x) & WorkInCampus(x) & EarnMoney(x) & HelpPayForCollegeTuition(x))", "all x y.((Person(x) & WorksInStudentJobs(x) & College(y)) -> NeedsToEarnMoney(x,y))", "all x.(WorkInStudentJobsOnCampus(x) -> NeedsToEarnMoney(x))", "all x.(WorksInStudentJobsOnCampus(x) -> NeedsToEarnMoneyToPayForCollegeTuition(x))", "all x.((WorksInStudentJobs(x) & College(y)) -> NeedsToEarnMoney(x,y))", "all x y z.((Person(x) & StudentJob(y) & College(z) & WorksIn(x,y) & EarnsMoney(x,z)) -> HelpsPayForTuition(x,z))", "all x y.((Person(x) & WorkInStudentJobs(x,y) & Campus(y)) -> NeedsToEarnMoney(x,y))"]}
{"id": "folio_validation_209", "nl": "If people order takeout frequently in college, then they work in student jobs on campus.", "fol": "all x.(OrdersTakeoutFrequently(x) -> WorksInStudentJobs(x))", "prediction": ["all x.((Person(x) & OrdersTakeoutFrequently(x)) -> WorksInStudentJobs(x))", "all x y.((Person(x) & College(y) & OrdersTakeoutFrequently(x,y)) -> WorksInStudentJobs(x,y))", "all x.((Person(x) & OrdersTakeoutFrequentlyInCollege(x)) -> WorksInStudentJobsOnCampus(x))", "all x.((People(x) & OrdersTakeoutFrequently(x)) -> WorksInStudentJobs(x))", "all x y z.((Person(x) & College(y) & College(z) & OrdersTakeoutFrequently(x,y)) -> WorksInStudentJobs(x,z))", "(all x.((Person(x) & OrdersTakeoutFrequently(x)) -> WorksInStudentJobs(x)))", "all x y.((Person(x) & College(y) & OrdersTakeoutFrequently(x,y)) -> WorkInStudentJobs(x,y))", "all x.((People(x) & OrdersTakeoutFrequentlyInCollege(x)) -> WorksInStudentJobsOnCampus(x))", "all x y.((Person(x) & College(y) & OrdersTakeoutFrequently(x,y)) -> WorksInStudentJobs(x,y))", "all x.(OrdersTakeoutFrequentlyInCollege(x) -> WorksInStudentJobsOnCampus(x))", "all x y.((People(x) & College(y) & OrdersTakeoutFrequently(x,y)) -> WorksInStudentJobs(x,y))", "all x.((Person(x) & OrdersTakeoutFrequentlyInCollege(x)) -> WorkInStudentJobsOnCampus(x))", "all x.((PeopleOrderTakeoutFrequentlyInCollege(x)) -> WorkInStudentJobsOnCampus(x))", "all x.((Person(x) & OrdersTakeoutFrequentlyInCollege(x)) -> WorksInStudentJobsOnCampus(x))", "exists x.(Person(x) & OrdersTakeoutFrequentlyInCollege(x) & WorksInStudentJobsOnCampus(x))", "all x y.((Person(x) & College(y) & OrdersTakeoutFrequently(x,y)) -> WorksInStudentJobsOnCampus(x,y))"]}
{"id": "folio_validation_210", "nl": "People either order takeout frequently in college or enjoy the dining hall meals and recipes.", "fol": "all x.(OrdersTakeoutFrequently(x) | EnjoysDiningHallMeals(x))", "prediction": ["all x y.((Person(x) & College(y)) -> (OrdersTakeoutFrequently(x,y) | EnjoysDiningHallMealsAndRecipes(x,y)))", "all x.((Person(x) & (OrdersTakeoutFrequently(x) | EnjoysDiningHallMeals(x))) -> (College(x) | College(x)))", "(OrdersTakeoutFrequentlyInCollege(p) | EnjoysDiningHallMealsAndRecipes(p)))", "all x y z.((Person(x) & College(y) & College(z)) -> (OrdersTakeoutFrequently(x,y) | EnjoysDiningHallMealsAndRecipes(x,z)))", "exists x.(Person(x) & (OrdersTakeoutFrequently(x) | EnjoysDiningHallMealsAndRecipes(x)))", "(OrdersTakeoutFrequentlyInCollege(Person) | EnjoysDiningHallMealsAndRecipes(Person))", "all x.((Person(x) & (OrdersTakeoutFrequently(x) | EnjoysDiningHallMeals(x))) -> (CollegeMeals(x) | CollegeRecipes(x))))", "exists x.(Person(x) & ((OrdersTakeout(x) & College(x)) | EnjoysDiningHallMeals(x) & CollegeRecipes(x))))", "all x y.((Person(x) & College(y) & (OrdersTakeoutFrequently(x,y) | EnjoysDiningHallMeals(x,y) | EnjoysRecipes(x,y))) -> Orders(x,y))", "all x.((Person(x) & (OrdersTakeoutFrequently(x) | EnjoysDiningHallMeals(x))) -> (College(x) | College(x)))", "all x y.((Person(x) & College(y)) -> (OrdersTakeoutFrequently(x,y) | EnjoysDiningHallMealsAndRecipes(x,y)))", "all x y.((Person(x) & College(y)) -> (OrdersTakeout(x,y) | EnjoysDiningHallMealsAndRecipes(x,y)))", "(OrdersTakeoutFrequentlyInCollege(p) | EnjoysDiningHallMealsAndRecipes(p)))", "all x y.((Person(x) & College(y) & OrdersTakeoutFrequently(x,y)) | EnjoysDiningHallMealsAndRecipes(x,y))", "exists x.(Person(x) & (OrdersTakeoutFrequently(x) | EnjoysDiningHallMeals(x)))", "exists x.(Person(x) & (OrdersTakeoutFrequentlyInCollege(x) | EnjoysDiningHallMealsAndRecipes(x)))"]}
{"id": "folio_validation_211", "nl": "If people enjoy the dining hall meals and recipes, then they are not picky eaters.", "fol": "all x.(EnjoysDiningHallMeals(x) -> IsNotPickyEater(x))", "prediction": ["all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -PickyEather(x))", "all x.((Person(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -PickyEather(x))", "(all x.(EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -PickyEather(x))", "all x.(EnjoysDiningHallMealsAndRecipes(x) -> -PickyEather(x))", "all x y.((Person(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -PickyEather(x))", "(all x.((Person(x) & EnjoysDiningHallMeals(x)) -> -PickyEather(x)))", "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -PickyEather(x))", "all x.((Person(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -PickyEather(x))", "all x y.((People(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -PickyEather(y))", "all x.((People(x) & EnjoyDiningHallMeals(x) & EnjoyRecipes(x)) -> -PickyEather(x))", "all x.(EnjoysDiningHallMealsAndRecipes(x) -> -PickyEather(x))", "all x y.((Person(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -PickyEather(y))", "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -CpickyEather(x))", "all x.((Person(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -PickyEather(x))", "all x.(EnjoysDiningHouseMealsAndRecipes(x) -> -pickyEather(x))", "all x.(EnjoysDiningHallMealsAndRecipes(x) -> -CpickyEather(x))"]}
{"id": "folio_validation_212", "nl": "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.", "fol": "all x.(EnjoysDiningHallMeals(x) -> SpendsTimeEatingWithFriends(x))", "prediction": ["all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysDiningHallRecipes(x)) -> SpendsLittleTimeEatingAndCatchingUpWithFriends(x))", "all x y.((People(x) & DiningHall(y) & EnjoysMealsAndRecipes(x,y)) -> SpendsAtLeastTimeEatingAndCatchingUpWithFriends(x,y))", "all x.(EnjoysDiningHallMealsAndRecipes(x) -> SpendsLittleTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))", "all x.((Person(x) & EnjoysDiningHallMeals(x) & EnjoysDiningHallRecipes(x)) -> SpendsLittleTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))", "(EnjoysDiningHallMealsAndRecipes(Person) & SpendsLittleTimeEatingAndCatchingUpWithFriends(Person))", "all x y.((Person(x) & DiningHall(y) & EnjoysMealsAndRecipes(x,y)) -> SpendsLittleTimeEatingAndCatchingUpWithFriends(x,y))", "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysDiningHallRecipes(x)) -> SpendsAtLeastTimeEatingAndCatchingUpWithFriends(x))", "all x y z.((Person(x) & DiningHallMeals(y) & CampusDiningHall(z) & Enjoys(x,y) & Enjoys(x,z)) -> SpendsLittleTimeEatingAndCatchingUpWithFriends(x,y,z))", "all x y.((People(x) & DiningHallMeals(x) & DiningHallRecipes(y)) -> (Enjoys(x,y) & SpendsAtLeastTimeEatingAndCatchingUpWithFriends(x,y)))", "all x y z.((People(x) & DiningHall(y) & CampusDiningHall(z) & EnjoysMealsAndRecipes(x,y)) -> SpendsAtLeastTimeEatingAndCatchingUpWithFriends(x,z))", "all x y.((Person(x) & DiningHallMeals(x) & DiningHallRecipes(y)) -> (Enjoys(x,y) & SpendsAtLeastTimeEatingAndCatchingUpWithFriends(x,y)))", "all x.((People(x) & EnjoysDiningHouseMealsAndRecipes(x)) -> SpendsLittleTimeEatingAndCatchingUpWithFriendsInCampusDiningHouses(x))", "all x.(EnjoysDiningHouseMealsAndRecipes(x) -> (SpoilsLittleTimeEatingAndCatchingUpWithFriends(x)))", "all x.((Person(x) & EnjoysDiningHouseMeals(x) & EnjoysDiningHouseRecipes(x)) -> SpendsAtLeastTimeEatingAndCatchingUpWithFriends(x))", "all x.(EnjoysDiningHallMealsAndRecipes(x) -> SpendsAtLeastTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))", "all x y.((People(x) & DiningHouse(y) & EnjoysMealsAndRecipes(x,y)) -> SpendsLittleTimeEatingAndCatchingUpWithFriends(x,y))"]}
{"id": "folio_validation_213", "nl": "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.", "fol": "((WorksInStudentJobs(Mary) & NeedsToEarnMoneyForTuition(Mary)) -> -(IsNotPickyEater(Mary) | NeedsToEarnMoneyForTuition(Mary)))", "prediction": ["all x.((Mary(x) & WorksInStudentJobs(x) & NeedsEarnMoney(x) & CollegeTuition(x)) -> (-Picky(x) & -NeedsEarnMoney(x)))", "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoney(x)) -> (-Picky(x) & -NeedsEarnMoney(x)))", "all x y.((Mary(x) & WorksInStudentJobs(x) & College(y) & NeedsEarnMoney(x,y)) -> (-Picky(x) & -NeedsEarnMoney(x,y)))", "(all x.((Mary(x) & WorksInStudentJobs(x) & NeedsEarnMoney(x)) -> (-Picky(x) & -NeedsEarnMoney(x)))", "all x.((Mary(x) & WorksStudentJobs(x) & NeedsEarnMoney(x) & CollegeTuition(x)) -> (-Picky(x) & -NeedsEarnMoney(x)))", "all x y.((Mary(x) & StudentJobs(y) & OnCampus(x) & WorksIn(x,y) & NeedsEarnMoney(x)) -> (-Picky(x) & -NeedsEarnMoney(x)))", "(all x.(WorksInStudentJobsOnCampus(x) & NeedsEarnMoney(x)) -> (-Picky(x) & -NeedsEarnMoney(x)))", "all x.((Mary(x) & WorksInStudentJobs(x) & NeedsEarnMoney(x)) -> (-Picky(x) & -NeedsEarnMoney(x)))", "all x y.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoney(x) & CollegeTuition(y) & -(Picky(x) | NeedsEarnMoney(x)))) -> -(NeedsEarnMoney(x) & CollegeTuition(y)))", "all x.(WorksInStudentJobsOnCampusAndNeedsToEarnMoney(x) -> (-Picky(x) & -NeedsToEarnMoneyToPayForCollegeTuition(x)))", "(all x.((Mary(x) & WorksInStudentJobs(x) & NeedsEarnMoney(x)) -> -(Picky(x) | NeedsEarnMoney(x))))", "all x.((Mary(x) & WorksStudentJobsOnCampus(x) & NeedsEarnMoney(x) & CollegeTuition(x)) -> (-Picky(x) & -NeedsEarnMoney(x)))", "(all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoney(x)) -> -(Picky(x) | NeedsEarnMoney(x))))", "all x y.((Mary(x) & StudentJobsOnCampus(x) & NeedsEarnMoney(x,y) & CollegeTuition(y)) -> (-Picky(x) & -NeedsEarnMoney(x,y)))", "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoney(x)) -> (-Picky(x) & -NeedsEarnMoney(x)))", "all x.((Mary(x) & WorksInStudentJobs(x) & NeedsEarnMoneyToPayForCollegeTuition(x)) -> (-Picky(x) & -NeedsEarnMoneyToPayForCollegeTuition(x)))"]}
{"id": "folio_validation_214", "nl": "Mary needs to earn money to help pay for her college tuition.", "fol": "NeedsToEarnMoneyForTuition(Mary)", "prediction": ["all x.((Mary(x) & CollegeTuition(x)) -> NeedsEarnMoney(x))", "all x y.((Mary(x) & CollegeTuition(y)) -> NeedsToEarnMoney(x,y))", "(NeedsToEarnMoney(Mary) & CollegeTuition(Mary))", "(NeedsMoney(Mary,CollegeTuition) & HelpsPay(Mary,CollegeTuition))", "all x.((Mary(x) & CollegeTuition(y)) -> NeedsToEarnMoney(x,y))", "all x y z.((Mary(x) & CollegeTuition(y) & CollegeTuition(z) & NeedsEarnMoney(x,y)) -> NeedsEarnMoney(x,z))", "all x y.((Maria(x) & CollegeTuition(y)) -> NeedsEarnMoney(x,y))", "(NeedsMoneyToPayForCollegeTuition(Mary,CollegeTuition))", "(NeedsToEarnMoney(Mary,CollegeTuition) & PaysFor(Mary,CollegeTuition))", "all x.((Mary(x) & CollegeTuition(x)) -> NeedsEarnMoney(x))", "all x.(MariaNeedsToEarnMoney(x) -> PaysForCollegeTuition(x))", "exists x.(Maria(x) & NeedsToEarnMoney(x) & HelpsPayForCollegeTuition(x))", "all x.((Maria(x) & NeedsMoney(x)) -> PaysForCollegeTuition(x))", "all x y.((Maria(x) & CollegeTuition(y)) -> NeedsEarnMoney(x,y))", "all x.((Mary(x) & CollegeTuition(y)) -> NeedsToEarnMoney(x,y))", "All x y.((Mary(x) & CollegeTuition(y)) -> NeedsToEarnMoney(x,y))"]}
{"id": "folio_validation_215", "nl": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.", "fol": "(IsNotPickyEater(Mary) & SpendsTimeEatingWithFriends(Mary))", "prediction": ["all x.((Maria(x) & -pickyEather(x)) -> (SpoisesTimeEating(x) & SpendsTimeCatchingUpWithFriends(x)))", "all x.((Mary(x) & -PickyEater(x)) -> (SpoisesTimeEating(x) & SpendsTimeCatchingUpWithFriends(x)))", "(-pickyEather(Mary) & SpendsAtLeastEatingAndCatchingUpWithFriends(Mary))", "(-PickyEather(Mary) & SpendsAtLeastTimeEatingAndCatchingUpWithFriends(Mary,CampusDiningHouses))", "all x y.((Mary(x) & CampusDiningHouse(y)) -> (-pickyEater(x) & SpendsAtLeastTimeEatingAndCatchingUpWithFriends(x,y)))", "all x.(Maria(x) -> (-pickyEather(x) & SpendsAtLeastTimeEatingAndCatchingUpWithFriends(x)))", "all x.((Mary(x) & -pickyEater(x)) -> (SpoisesEating(x) & CatchingUpWithFriends(x)))", "(-pickyEather(Mary) & SpendsAtLeastTimeEatingAndCatchingUpWithFriends(Mary))", "all x y.((Mary(x) & CampusDiningHalls(y)) -> (-pickyEater(x) & SpendsAtLeastTimeEatingAndCatchingUpWithFriends(x,y)))", "(-pickyEater(Mary) & SpendsLittleTimeEatingAndCatchingUpWithFriends(Mary,CampusDiningHouses))", "all x.((Mary(x) & -PickyEater(x)) -> SpendsAt(x,EatsAndCatchUps(x)))", "(-PickyEater(Mary) & SpendsAtLeastEatsAndCatchUps(Mary,CampusDiningHouses))", "(-pickyEather(Mary) & SpendsAtMountainsEatingAndCatchingUpWithFriends(Mary))", "all x.((Maria(x) & -CpickyEather(x)) -> (SpoilsEating(x) & CatchingUpWithFriends(x)))", "all x.((Mary(x) & -pickyEater(x)) -> SpendsAtLeastTimeEatingAndCatchingUpWithFriends(x))", "(-pickyEater(Mary) & SpendsLittleTimeEatingAndCatchingUpWithFriends(Mary))"]}
{"id": "folio_validation_216", "nl": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.", "fol": "((IsNotPickyEater(Mary) & -SpendsTimeEatingWithFriends(Mary)) | (-IsNotPickyEater(Mary) & SpendsTimeEatingWithFriends(Mary)))", "prediction": ["all x.((Mary(x) & -pickyEather(x)) | (-pickyEater(x) & SpendsLittleTimeEatingAndCatchingUpWithFriends(x))))", "all x.((Maria(x) & -PickyEather(x)) | (-PickyEather(x) & SpendsLittleTimeEatingAndCatchingUpWithFriends(x))))", "(-pickyEather(Mary) | (-pickyEater(Mary) & SpendsLittleTimeEatingAndCatchingUpWithFriends(Mary))))", "((Maria(Maria) & -PickyEather(Maria)) | (-PickyEather(Maria) & SpendsLittleTimeEating(Maria) & CatchingUpWithFriends(Maria))))", "all x y.((Mary(x) & CampusDiningHouse(y)) -> (-pickyEater(x) | (-pickyEater(x) & SpendsLittleTimeEating(x) & CatchingUpWithFriends(x))))", "all x y.((Maria(x) & CampusDiningHalls(y)) -> (-pickyEater(x) | (-pickyEater(x) & SpendsLittleTimeEating(x) & CatchingUpWithFriends(x))))", "all x.((Mary(x) & -pickyEater(x)) | (-pickyEater(x) & SpendsAt(x,campusDiningHouses))))", "(all x.((Mary(x) & -pickyEater(x)) | (-pickyEater(x) & SpendsAt(x,campusDiningHouses))))", "(-pickyEather(Mary) | (-pickyEather(Mary) & CampusDiningHouses(Mary))))", "exists x.(Mary(x) & ((NopickyEater(x) | SpendsLittleTimeEatingAndCatchingUpWithFriends(x)) & CampusDiningHalls(x)) | (-PickyEater(x) & SpendsLittleTimeEatingAndCatchingUpWithFriends(x)))))", "all x.((Mary(x) & (-pickyEater(x) | SpendsLittleTimeEatingAndCatchingUpWithFriends(x))) -> SpendsLittleTimeEatingAndCatchingUpWithFriends(x))", "all x.((Mary(x) & -PickyEater(x)) | (-PickyEater(x) & SpendsAt(x,campusDiningHouses))))", "((Maria(Mary) & -PickyEater(Mary)) | (-PickyEater(Mary) & SpendsLotOfTimeEatingAndCatchingUpWithFriends(Mary))))", "(-pickyEather(Mary) | SpendsLittleTimeEatingAndCatchingUpWithFriends(Mary)))", "exists x.(Mary(x) & ((-pickyEather(x) & SpendsAt(x,campusDiningHouses)) | (-pickyEater(x) & SpendsAt(x,campusDiningHouses)))))", "all x.((Maria(x) & (-PickyEater(x) | SpendsLotOfEatingAndCatchingUpWithFriends(x))) -> SpendsLotOfEatingAndCatchingUpWithFriends(x))"]}
{"id": "folio_validation_217", "nl": "No bakery is spicy.", "fol": "all x.(IsBakery(x) -> -IsSpicy(x))", "prediction": ["-exists x.(Bakery(x) & Spicy(x))", "all x.(Bakery(x) -> Spicy(x))", "-exists x.(Bakery(x) & Spicy(x))", "KeineBakeryIsSpicy(x)", "all x.(Bakery(x) -> Spicy(x))", "-(Bakery(x) & Spicy(x))", "(exists x.(Bakery(x) & Spicy(x))", "-exists x.(Bakery(x) & Spicy(x))", "all x.(Bakery(x) -> Spicy(x))", "-exists x.(Bakery(x) & Spicy(x))", "-exists x.(Bakery(x) & Spicy(x))", "-exists x.(Bakery(x) & Spicy(x))", "-exists x.(Bakery(x) & Spicy(x))", "-exists x.(Bakery(x) & Spicy(x))", "-exists x.(Bakery(x) & Spicy(x))", "-exists x.(Bakery(x) & Spicy(x))"]}
{"id": "folio_validation_218", "nl": "All cupcakes are bakeries.", "fol": "all x.(IsCupcake(x) -> IsBakery(x))", "prediction": ["all x.(Cupcake(x) -> Bakeries(x))", "all x.(Cupcake(x) -> Bakeries(x))", "(all x.(Cupcake(x) -> Bakeries(x))", "all x y.((Cupcake(x) & Bakery(y)) -> Baked(x))", "all x.(Cupcake(x) -> Bakeries(x))", "(all x.(Cupcake(x) -> Bakeries(x))", "all x.(Cupcake(x) -> Bakeries(x))", "all x.(Cupcake(x) -> Bakeries(x))", "all x.(Cupcake(x) -> Bakery(x))", "all x.(Coffee(x) -> Bakeries(x))", "all x.(Cupcake(x) -> Bakery(x))", "all x.(Coffee(x) -> Bakeries(x))", "all x.(Cupcake(x) -> Bakeries(x))", "all x.(Cupcake(x) -> Bakery(x))", "all x.(Coffee(x) -> Bakery(x))", "exists x.(Coffee(x) & Bakery(x))"]}
{"id": "folio_validation_219", "nl": "All hotpots are spicy.", "fol": "all x.(IsHotpot(x) -> IsSpicy(x))", "prediction": ["all x.(Hotpot(x) -> Spicy(x))", "all x.(Hotpot(x) -> Spicy(x))", "(all x.(Hotpot(x) -> Spicy(x)))", "all x y.((Hotpot(x) & Hotpot(y)) -> Spicy(x))", "all x.(Hotpot(x) -> Spicy(x))", "(all x.(Hotpot(x) -> Spicy(x)))", "all x y.((Hotpot(x) & Hotpot(y)) -> Spicy(x))", "all x.(Hotpot(x) -> Spicy(x))", "all x.(Hotpot(x) -> Spicy(x))", "all x.(Hotpot(x) -> Spicy(x))", "all x.(Hotpot(x) -> Spicy(x))", "all x.(Hotpot(x) -> Spicy(x))", "all x.(Hotpot(x) -> Spicy(x))", "all x.(Hotpot(x) -> Spicy(x))", "all x.(Hotpot(x) -> Spicy(x))", "all x.(Hotpot(x) -> Spicy(x))"]}
{"id": "folio_validation_220", "nl": "All products of Baked by Melissa are cupcakes.", "fol": "all x.(IsProductOfBakedByMelissa(x) -> IsCupcake(x))", "prediction": ["all x.((Product(x) & BakedByMelissa(x)) -> Cupcake(x))", "all x.((BakedByMelissa(x) & BakedByMelissa(x)) -> Cupcake(x))", "All x y.((Product(x) & BakedByMelissa(y)) -> Cupcake(x))", "all x.(BakedByMelissa(x) -> Cupcake(x))", "all x.((Product(x) & BakedByMelissa(x)) -> Cupcake(x))", "all x.((BakedByMelissa(x) & Product(x)) -> Cupcake(x))", "All x y.((Product(x) & BakedByMelissa(y)) -> Cupcake(x))", "(all x.(BakedByMelissa(x) -> Cupcake(x)))", "all x.((Product(x) & BakedByMelissa(x)) -> Cupcake(x))", "all x.(BakedByMelissa(x) -> Cupcake(x))", "All x y.((Product(x) & BakedByMelissa(y)) -> Cupcake(x))", "(all x.(BakedByMelissa(x) -> Cupcake(x))", "all x.(BakedByMelissa(x) -> Cupcake(x))", "all x.((Product(x) & BakedByMelissa(x)) -> Cupcake(x))", "(all x.(BakedByMelissa(x) -> Cupcake(x))", "all x.(BakedByMelissa(x) -> Cupcake(x))"]}
{"id": "folio_validation_221", "nl": "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.", "fol": "(((IsSpicy(DriedThaiChilies) | IsBakery(DriedThaiChilies)) -> IsHotpot(DriedThaiChilies)) | IsSpicy(DriedThaiChilies))", "prediction": ["all x.((DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "((DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x y.((DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "(Spicy(DriedThaiChili) | Bakery(DriedThaiChili)))", "((DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChips(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x y.((DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DryThanyCheddar(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChicken(x) & Spicy(x)) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChicken(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChili(x) & (Spicy(x) | Baked(x))) -> (Hotpot(x) | Spicy(x)))"]}
{"id": "folio_validation_222", "nl": "Dried Thai chilies are a product of Baked by Melissa.", "fol": "IsProductOfBakedByMelissa(DriedThaiChilies)", "prediction": ["all x.((ThaiChili(x) & BakedByMelissa(x)) -> Dried(x))", "all x.(DriedThaiChili(x) -> BakedByMelissa(x))", "all x y.((DriedThaiChili(x) & Melissa(y)) -> ProductOf(x,y))", "(ProductOfBakedByMelissa(ThaiChili) & Dried(ThaiChili))", "(BakedByMelissa(ThaiChili) & Dried(ThaiChili))", "all x.((ThaiChili(x) & BakedByMelissa(x)) -> Dried(x))", "all x y.((DriedThaiChili(x) & Melissa(y)) -> BakedBy(x,y))", "all x y.((ThaiChili(x) & BakedByMelissa(y)) -> Dried(x,y))", "all x.(DriedThaiChili(x) -> BakedByMelissa(x))", "(BakedByMelissa(ThaiChili) & Dried(ThaiChili))", "All x.((DriedThaiChili(x) & BakedByMelissa(x)) -> ProductOf(x,y))", "all x y.((DriedThaiChili(x) & Melissa(y)) -> ProductOf(x,y))", "all x.((ThaiChili(x) & BakedByMelissa(x)) -> Dried(x))", "(BakedByMelissa(ThaiChili) & Dried(ThaiChili,Thai))", "all x.(DriedThaiChili(x) -> BakedByMelissa(x))", "All x.(DriedThaiChili(x) -> BakedByMelissa(x))"]}
{"id": "folio_validation_223", "nl": "Dried Thai chilies are not a product of Baked by Melissa.", "fol": "-IsProductOfBakedByMelissa(DriedThaiChilies)", "prediction": ["all x.((DriedThaiChili(x) & -BakedByMelissa(x)) -> -Product(x))", "all x.(DriedThaiChili(x) -> -BakedByMelissa(x))", "(-ProductOfBakedByMelissa(ThaiChili))", "all x.((ThaiChili(x) & BakedByMelissa(x)) -> -Product(x))", "(-BakedByMelissa(ThaiChili))", "all x y.((DriedThaiChili(x) & Melissa(y)) -> -Product(x,y))", "all x.((DriedThaiChili(x) & -BakedByMelissa(x)) -> -Product(x))", "all x.(DriedThaiChili(x) -> -BakedByMelissa(x))", "(-ProductOfBakedByMelissa(ThaiChili))", "(all x.(DriedThaiChili(x) -> -BakedByMelissa(x)))", "all x y.((DriedThaiChili(x) & Melissa(y)) -> -ProductOf(x,y))", "(all x.(DriedThaiChinese(x) -> -ProductOfBakedByMelissa(x)))", "all x.(DriedThaiChili(x) -> -ProductOfBakedByMelissa(x))", "all x.(DriedThaiChili(x) -> -BakedByMelissa(x))", "(all x.(DriedThaiChili(x) -> -BakedByMelissa(x)))", "All x.(DriedThaiChinese(x) -> -BakedByMelissa(x))"]}
{"id": "folio_validation_224", "nl": "Dried Thai chilies are a hotpot.", "fol": "IsHotpot(DriedThaiChilies)", "prediction": ["all x.((DriedThaiChili(x) & Hotpot(x)) -> Hotpot(x))", "all x.(DriedThaiChili(x) -> Hotpot(x))", "all x.((ThaiChili(x) & Dried(x)) -> Hotpot(x))", "all x y.((DriedThaiChili(x) & Chili(y)) -> Hotpot(x,y))", "all x.((DriedThaiChili(x) & Hotpot(x)) -> Dried(x))", "all x.(DriedThaiChili(x) -> Hotpot(x))", "(Hotpot(driedThaiChinese) & Hotpot(driedThaiChinese))", "all x y.((DriedThaiChili(x) & Hotpot(y)) -> Hotpot(x,y))", "(Hotpot) -> DriedThaiChinese(ThaiChinese))", "all x.((ThaiChili(x) & Dried(x)) -> Hotpot(x))", "all x.(DriedThaiChili(x) -> Hotpot(x))", "all x.((DriedThaiChili(x) & Hotpot(x)) -> Hotpot(x))", "all x y.((DriedThaiChili(x) & Chili(y)) -> Hotpot(x))", "(Hotpot) -> DriedThaiChili(Thai))", "all x.(DriedThaiChili(x) -> Hotpot(x))", "all x.(DriedThaiChili(x) -> Hotpot(x))"]}
{"id": "folio_validation_225", "nl": "Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.", "fol": "(-IsProductOfBakedByMelissa(DriedThaiChilies) & -IsBakery(DriedThaiChilies))", "prediction": ["all x.(DriedThaiChili(x) -> (-BakedByMelissa(x) & -Bakery(x)))", "all x.((ThaiChili(x) & -(BakedByMelissa(x) | Bakery(x))) -> Dried(x))", "(-(BakedByMelissa(ThaiChili) & -Bakery(ThaiChili)) -> Dried(ThaiChili))", "all x.((ThaiChili(x) & BakedByMelissa(x)) -> -(ProductOfBakedByMelissa(x) | Bakery(x)))", "(DriedThaiChili(ThaiChili) & -(BakedByMelissa(Melissa) | Bakery(Melissa)))", "((DriedThaiChili(ThaiChili) & -(BakedByMelissa(Melissa) | Bakery(Melissa))))", "all x y.((DriedThaiChili(x) & BakedByMelissa(y)) -> (-Product(x,y) & -Bakery(x,y)))", "(all x.(DriedThaiChili(x) -> -(BakedByMelissa(x) | BakedByMelissa(x))))", "all x.((ThaiChili(x) & BakedByMelissa(x)) -> (-ProductOf(x,BakedByMelissa) & -Bakery(x)))", "all x.(DriedThaiChili(x) -> (-BakedByMelissa(x) & -Bakery(x)))", "(DriedThaiChili(th) & -(BakedByMelissa(th) | Bakery(th))))", "all x y.((DriedThaiChili(x) & BakedByMelissa(y)) -> (-ProductOf(x,y) & -Bakery(x,y)))", "(all x.(DriedThaiChili(x) -> (-BakedByMelissa(x) | Bakery(x))))", "all x.(DriedThaiChili(x) -> (-(BakedByMelissa(x) & -Bakery(x))))", "all x.(DriedThaiChinese(x) -> (-ProductOfBakedByMelissa(x) & -Bakery(x)))", "all x.(DriedThaiChili(x) -> ((BakedByMelissa(x) | Bakery(x))))"]}
{"id": "folio_validation_226", "nl": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.", "fol": "(Cupcake(DriedThaiChilies) & IsProductOfBakedByMelissa(DriedThaiChilies))", "prediction": ["all x.(DriedThaiChili(x) -> (Cupcake(x) & BakedByMelissa(x)))", "all x.((ThaiChili(x) & BakedByMelissa(x)) -> (Cupcake(x) & ProductOf(x,Melissa)))", "all x y.((DriedThaiChili(x) & Cupcake(y)) -> BakedByMelissa(x,y))", "all x.((DriedThaiChili(x) & Cupcake(x) & BakedByMelissa(x)) -> BakedByMelissa(x))", "(Cupcake(ThaiChili) & BakedByMelissa(Melissa))", "all x.(DriedThaiChili(x) -> (Cupcake(x) & BakedByMelissa(x)))", "(Cupcakes(DriedThaiChili) & BakedByMelissa(DriedThaiChili))", "(Cupcakes(ThaiChili) & BakedByMelissa(Melissa))", "all x y.((DriedThaiChili(x) & Cupcake(y)) -> (BakedByMelissa(x,y) & ProductOf(x,y)))", "all x.(DriedThaiChili(x) -> (Cupcake(x) & ProductOfBakedByMelissa(x)))", "all x y.((DriedThaiChicken(x) & Cupcake(y) & BakedByMelissa(x)) -> BakedByMelissa(x,y))", "all x y.((DriedThaiChili(x) & Cupcake(y)) -> BakedByMelissa(x,y))", "(all x.(DriedThaiChili(x) -> Cupcake(x)) & BakedByMelissa(x))", "all x.(DriedThaiChili(x) -> (Cupcake(x) & BakedByMelissa(x)))", "all x.(DriedThaiChinese(x) -> (Coffee(x) & ProductOfBakedByMelissa(x)))", "all x.(DriedThaiChili(x) -> (Cupcake(x) & ProductOfBakedByMelissa(x)))"]}
{"id": "folio_validation_227", "nl": "If the restaurant is listed in Yelp's recommendations, then the restaurant does not receive many negative reviews.", "fol": "all x.(ListedInYelpRecommendations(x) -> -ReceivesNegativeReviews(x))", "prediction": ["all x.((Restaurant(x) & YelpRecommendations(x)) -> -NegativeReviews(x))", "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -ReceivesNegativeReviews(x))", "all x y.((Restaurant(x) & YelpRecommendations(y)) -> -(NegativeReviews(x,y))))", "all x.(ListedInYelpRecommendations(x) -> -ReceivesNegativeReviews(x))", "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -(NegativeReviews(x) | NegativeReviews(x))))", "all x.((Restaurant(x) & YelpRecommendations(x)) -> -(NegativeReviews(x) | NegativeReviews(x))))", "all x y.((Restaurant(x) & YelpRecommendations(y) & ListedIn(x,y)) -> -ReceivesNegativeReviews(x))", "(all x.((Restaurant(x) & YelpRecommendations(x)) -> -NegativeReviews(x)))", "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -(NegativeReviews(x) | NegativeReviews(x))))", "(all x.(Recommended(x) -> NoNegativeReviews(x)))", "all x.(ListedInYelpRecommendations(x) -> -ManyNegativeReviews(x))", "all x y.((Restaurant(x) & YelpRecommendations(x,y) & ListedIn(x,y)) -> -ReceivesNegativeReviews(x,y))", "all x y.((Restaurant(x) & YelpRecommendations(x)) -> -NegativeReviews(y))", "exists x.(RecommendedInYelp(x) & Restaurant(x) & -ReceivesNegativeReviews(x))", "all x.((Restaurant(x) & YelpRecommendations(x)) -> -NegativeReviews(x))", "all x y.((Restaurant(x) & YelpRecommendations(y)) -> -(NegativeReviews(x,y)))"]}
{"id": "folio_validation_228", "nl": "All restaurants with a rating greater than 9 are listed in Yelp's recommendations.", "fol": "all x.(HasRatingGreaterThan9(x) -> ListedInYelpRecommendations(x))", "prediction": ["all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> ListedInYelpRecommendations(x))", "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> ListedInYelpRecommendations(x))", "all x y.((Restaurant(x) & RatingGreaterThan(x,9)) -> YelpRecommendations(y))", "all x.((Restaurant(x) & RatingGreaterThan9(x)) -> YelpRecommendations(x))", "(all x.((Restaurant(x) & RatingGreaterThan9(x)) -> YelpRecommendations(x)))", "all x y.((Restaurant(x) & RatingGreaterThan(x,9)) -> ListedInYelpRecommendations(y))", "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> ListedInYelpRecommendations(x))", "all x.(RatingGreaterThan(x,9)) -> YelpRecommendations(x))", "all x y.((Restaurant(x) & RatingGreaterThan(x,9)) -> ListedInYelpRecommendations(y))", "all x.((Restaurant(x) & RatingGreaterThan9(x)) -> ListedInYelpRecommendations(x))", "(all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> ListedInYelpRecommendations(x)))", "all x y.((Restaurant(x) & RatingGreaterThan(x,9)) -> YelpRecommendations(y))", "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> YelpRecommendations(x))", "all x.((Restaurant(x) & RatingGreaterThan9(x)) -> ListedInYelpRecommendations(x))", "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> YelpRecommendations(x))", "all x.((Restaurant(x) & RatingGreaterThan9(x)) -> ListedInYelpRecommendations(x))"]}
{"id": "folio_validation_229", "nl": "Some restaurants that do not provide take-out service receive many negative reviews.", "fol": "exists x.(DoesNotProvideTakeOutService(x) & ReceivesNegativeReviews(x))", "prediction": ["exists x.(Restaurant(x) & -ProvidesTakeOutService(x))", "exists x.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ManyNegativeReviews(x))", "all x y.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ManyNegativeReviews(x))", "exists x.(Restaurant(x) & -ProvidesTakeOutService(x))", "exists x.(Restaurant(x) & -ProvidesTakeOutService(x) & ManyNegativeReviews(x))", "all x y.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ReceivesNegativeReviews(x))", "exists x.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ManyNegativeReviews(x))", "all x y.((Restaurant(x) & Restaurant(y) & -ProvidesTakeOutService(x)) -> ManyNegativeReviews(x))", "exists x.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ReceivesNegativeReviews(x))", "all x y.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ManyNegativeReviews(y))", "exists x.(Restaurant(x) & -ProvidesTakeOutService(x) & ReceivesNegativeReviews(x))", "exists x.(Restaurant(x) & -ProvidesTakeOutService(x))", "all x y.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ReceivesNegativeReviews(x))", "exists x.(Restaurant(x) & -ProvidesTakeOutService(x) & ManyNegativeReviews(x))", "exists x.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ManyNegativeReviews(x))", "exists x.(Restaurant(x) & -ProvidesTakeOut(x) & ManyNegativeReviews(x))"]}
{"id": "folio_validation_230", "nl": "All restaurants that are popular among local residents have ratings greater than 9.", "fol": "all x.(PopularWithLocalResidents(x) -> HasRatingGreaterThan9(x))", "prediction": ["all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> RatingGreaterThan(x,9))", "all x y.((Restaurant(x) & PopularAmongLocalResidents(x)) -> RatingGreaterThan(y,9))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> HasRatingsGreaterThan(x,9))", "all x y.((Restaurant(x) & PopularAmongLocalResidents(x) & LocalResidents(y)) -> HasRatingsGreaterThan(x,y))", "all x y z.((Restaurant(x) & LocalResident(y) & PopularAmong(x,y) & RatingGreaterThan(z,9)) -> HasRatingsGreaterThan(x,z))", "(all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> RatingGreaterThan(x,9)))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> RatingGreaterThan(x,9))", "all x y.((Restaurant(x) & PopularAmongLocalResidents(x)) -> HasRatingsGreaterThan(x,9))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> HasRatingsGreaterThan(x,9))", "all x y.((Restaurant(x) & PopularAmongLocalResidents(x) & LocalResident(y)) -> HasRatingsGreaterThan(x,y))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> RatingsGreaterThan(x,9))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> HasRatingsGreaterThan(x,9))", "all x.((Restaurant(x) & PopularWithlocalResidents(x)) -> RatingGreaterThan(x,9))", "all x.((Restaurant(x) & PopularWithLocalResidents(x)) -> RatingGreaterThan9(x))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> HasRatingsGreaterThan9(x))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> RatingsGreaterThan9(x))"]}
{"id": "folio_validation_231", "nl": "Subway has a rating greater than 9 or is popular among local residents.", "fol": "((HasRatingGreaterThan9(Subway) & -PopularWithLocalResidents(Subway)) | (-HasRatingGreaterThan9(Subway) & PopularWithLocalResidents(Subway)))", "prediction": ["all x.(Subway(x) -> (RatingGreaterThan(x,9) | PopularAmongLocalResidents(x,10)))", "all x.(Subway(x) -> (HasRatingGreaterThan(x,9) | PopularAmongLocalResidents(x,10)))", "(RatingGreaterThan9(Subway) | PopularAmongLocalResidents(Subway)))", "all x.(Subway(x) -> (RatingGreaterThan(x,9) | PopularAmongLocalResidents(x)))", "all x y.(Subway(x) -> (RatingGreaterThan(x,9) | PopularAmongLocalResidents(x,y)))", "all x.(Subway(x) -> ((RatingGreaterThan(x,9) | PopularAmongLocalResidents(x,9))))", "all x.(Subway(x) -> (HasRatingGreaterThan(x,9) | PopularAmongLocalResidents(x,10)))", "all x y.(Subway(x) -> ((RatingGreaterThan(x,9)) | PopularAmongLocalResidents(x,y))))", "(exists x.(Subway(x) & RatingGreaterThan(x,9)) | PopularAmongLocalResidents(x,10)))", "all x.(Subway(x) -> (RatingGreaterThan(x,9) | PopularAmongLocalResidents(x,10)))", "all x.(Subway(x) -> (RatingGreaterThan(x,9) | PopularAmongLocalResidents(x,10)))", "(exists x.(Subway(x) & RatingGreaterThan(x,9)) | PopularAmongLocalResidents(x)))", "exists x.(Subway(x) & ((RatingGreaterThan(x,9)) | PopularAmongLocalResidents(x,9))))", "all x.(Subway(x) -> (RatingGreaterThan(x,9) | PopularAmongLocalResidents(x)))", "exists x.(Subway(x) & ((RatingGreaterThan9(x) | PopularAmongLocalResidents(x))) -> Subway(x)))", "all x.(Subway(x) -> (HasRatingGreaterThan(x,9) | PopularAmongLocalResidents(x,10)))"]}
{"id": "folio_validation_232", "nl": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.", "fol": "DoesNotProvideTakeOutService(Subway)", "prediction": ["all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan(x,9) & -ProvidesTakeOutService(x)))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ReceivesManyNegativeReviews(x)) -> (RatingGreaterThan(x,9) & -ProvidesTakeOutService(x)))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan9(x) & -ProvidesTakeOutService(x)))", "all x y.((Subway(x) & TakeoutService(y) & ReceivesManyNegativeReviews(x,y)) -> (RatingGreaterThan(x,y) & -ProvidesTakeOutService(x,y)))", "all x.(Subway(x) -> (ProvidesTakeOutService(x) & ReceivesManyNegativeReviews(x) & RatingGreaterThan9(x) & -ProvidesTakeOutService(x)))", "(all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> RatingGreaterThan9(x)) & -ProvidesTakeOutService(x))", "(all x.((Subway(x) & ProvidesTakeOutService(x)) & ManyNegativeReviews(x)) -> RatingGreaterThan(x,9)) & -ProvidesTakeOutService(x,10))", "all x y.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan(y,9) & -ProvidesTakeOutService(y,9)))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ReceivesManyNegativeReviews(x)) -> (RatingGreaterThan9(x) & -ProvidesTakeOutService(x)))", "all x.((Subway(x) & ProvidesTakeOut(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan(x,9) & -ProvidesTakeOut(x)))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan(x,9) & -ProvidesTakeOutService(x)))", "all x y.((Subway(x) & TakeoutService(y) & ManyNegativeReviews(x,y)) -> (RatingGreaterThan(x,y) & -PurchaseOutService(x)))", "(all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> RatingGreaterThan(x,9)) & -PurchaseOutService(x,10))", "all x.(Subway(x) -> (ProvidesTakeOutService(x) & ReceivesManyNegativeReviews(x) & RatingGreaterThan9(x) & -ProvidesTakeOutService(x)))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan9(x) & -ProvidesTakeOutService(x)))", "all x.((Subway(x) & ProvidesTakeoutService(x) & ManyNegativeReviews(x)) -> RatingGreaterThan9(x))"]}
{"id": "folio_validation_233", "nl": "Subway provides take-out service and does not receive many negative reviews.", "fol": "-(DoesNotProvideTakeOutService(Subway) & ReceivesNegativeReviews(Subway))", "prediction": ["all x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesNegativeReviews(x)))", "(ProvidesTakeOutService(Subway) & -ReceivesNegativeReviews(Subway))", "(exists x.(Subway(x) & ProvidesTakeOut(x)) & -exists y.(Subway(y) & ReceivesNegativeReviews(y))))", "all x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesNegativeReviews(x)))", "Subway provides TakeOutService(subway,subway) & -ReceivesNegativeReviews(subway,subway))", "(ProvidesTakeOutService) & -ReceivesNegativeReviews(Subway))", "(exists x.(Subway(x) & ProvidesTakeout(x) & -ReceivesNegativeReviews(x)))", "all x y.((Subway(x) & TakeOutService(y)) -> (Provides(x,y) & -ReceivesNegativeReviews(x)))", "all x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesNegativeReviews(x)))", "all x.(Subway(x) -> (PursuesTakeOutService(x) & -ReceivesNegativeReviews(x)))", "exists x.(Subway(x) & ProvidesTakeOutService(x) & -ReceivesNegativeReviews(x))", "All x y.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesNegativeReviews(y)))", "all x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesNegativeReviews(x)))", "all x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesNegativeReviews(x)))", "all x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesNegativeReviews(x)))", "all x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesManyNegativeReviews(x)))"]}
{"id": "folio_validation_234", "nl": "Subway does not provide take-out service.", "fol": "((-(DoesNotProvideTakeOutService(Subway) & ReceivesNegativeReviews(Subway)) -> PopularWithLocalResidents(Subway)) & DoesNotProvideTakeOutService(Subway))", "prediction": ["all x.(Subway(x) -> -ProvidesTakeOutService(x))", "(-ProvidesTakeOutService(Subway))", "Subway does not provide TakeOutService(Subway)", "all x.(Subway(x) -> -ProvidesTakeOutService(x))", "(exists x.(Subway(x) & -ProvidesTakeOutService(x)))", "Subway - ProvidesTakeOutService(Subway)", "-exists x.(Subway(x) & ProvidesTakeOutService(x))", "(-ProvidesTakeOutService(Subway))", "Subway does not provide TakeOutService.", "all x.(Subway(x) -> -ProvidesTakeOutService(x))", "all x.(Subway(x) -> -PurchaseOutService(x))", "-exists x.(Subway(x) & ProvidesTakeOutService(x))", "(-ProvidesTakeOutService(Subway))", "all x.(Subway(x) -> -PurchaseTakeOutService(x))", "All x.(Subway(x) -> -ProvidesTakeOutService(x))", "All x.(Subway(x) -> -ProvidesTakeOutService(x))"]}
{"id": "folio_validation_235", "nl": "In superhero movies, the good guys always win.", "fol": "all x y.((IsSuperheroMovie(x) & IsGoodGuy(y) & AppearsInMovie(y,x)) -> WinsFight(y))", "prediction": ["all x.((SuperheroMovie(x) & GoodGuy(x)) -> Wins(x))", "all x y.((SuperheroMovie(x) & GoodGuy(y)) -> Wins(y))", "all x.(SuperheroMovie(x) -> GoodGuysWin(x))", "all x y z.((SuperheroMovie(x) & GoodGuy(y) & Movie(z)) -> Wins(y,z))", "all x y.((SuperheroMovie(x) & GoodGuy(y)) -> Wins(y))", "all x.((SuperheroMovie(x) & GoodGuys(x)) -> Wins(x))", "(all x.(Superhero(x) -> Wins(x)))", "all x.(SuperheroMovie(x) -> GoodGuysWin(x))", "all x y.((SuperheroMovie(x) & GoodGuy(y)) -> Wins(y,x))", "all x.((SuperheroMovie(x) & GoodGuy(x)) -> Wins(x))", "all x y z.((SuperheroMovie(x) & GoodGuy(y) & Movie(z)) -> Wins(y,z))", "exists x.(SuperheroMovie(x) & GoodGuy(x) & Wins(x))", "all x.(SuperheroMovie(x) -> Wins(x))", "(all x.(SupermanMovie(x) -> Wins(x)))", "all x y.((SuperheroMovie(x) & GoodGuy(y)) -> Wins(y,x))", "all x y.((SuperheroMovie(x) & GoodGuy(y)) -> AlwaysWins(y,x))"]}
{"id": "folio_validation_236", "nl": "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.", "fol": "IsSuperheroMovie(SurprisingAdventuresofSirDigbyChickenCaesar)", "prediction": ["The SurprisingAdventuresOfSirDigglyChickenCaesar(x) -> SuperheroMovie(x))", "All x.((SurprisingAdventuresOfSirDigglyChickenCaesar(x) & SirDigglyCaesar(x)) -> SuperheroMovie(x))", "(SurprisingAdventuresOfSirDigglyChickenCaesar(SirDiggly(SirDiggly(SirDiggly(SirDiggly(SirDiggly(SirDiggly(SirDiggly(SirDiggly(SirDiggly(SirDiggly(SirDiggs(Siggs(Siggs(Siggs(Siggs(Siggs(Siggs(Siggs(Siggs(Siggs(Siggs(Siggs(Siggs)))))", "(SuperheroMovie(SirDigglyChickenCaesar) & SurprisingAdventures(SirDigglyCaesar))", "The SurprisingAdventuresOfSirDigglyChickenCaesar(x) -> SuperheroMovie(x))", "all x.((SurprisingAdventuresOfSirDigglyChickenCaesar(x) & SirDiggly(x)) -> SuperheroMovie(x))", "all x y.((SurprisingAdventuresOfSirDigglyChickenCaesar(x) & SirDigglyCaesar(y)) -> SuperheroMovie(x))", "The SurprisingAdventuresOfSir DigbyChickenCaesar(x) -> SuperheroMovie(x))", "All x.(SurprisingAdventuresOfSirDigbyChickenCaesar(x) -> SuperheroMovie(x))", "(SurprisingAdventuresOfSirDigbyChickenCaesar(SirDigbyCaesar) & Movie(SirDigbyCaesar))", "All x.(SurprisingAdventuresOfSir DigbyChickenCaesar(x) -> SuperheroMovie(x))", "The SurprisingAdventuresOfSirDigbyChickenCaesar(x) -> SuperheroMovie(x))", "(SuperheroMovie(SirDigglyChickleCaesar) & SurprisingAdventures(SirDigglyCaesar))", "All x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigbyChicken(x)) -> SuperheroMovie(x))", "all x.((SurprisingAdventuresOfSirDigglyChickinCaesar(x) & SirDigglyCheesar(x)) -> SuperheroMovie(x))", "The SurprisingAdventuresOfSir DigbyChickneyCaesar(x) -> SuperheroMovie(x))"]}
{"id": "folio_validation_237", "nl": "Good guys fight bad guys and vice versa.", "fol": "all x y.(((IsGoodGuy(x) & EngagesInFight(x,y)) <-> IsBadGuy(y)) & EngagesInFight(y,x))", "prediction": ["all x y.((GoodGuy(x) & BadGuy(y)) -> (Fights(x,y) & Via(x,y)))", "all x.(GoodGuy(x) -> (FightsBadGuys(x) & Vice Versa(x)))", "(all x.(GoodGuy(x) -> BadGuy(x)))", "all x y z.((GoodGuy(x) & BadGuy(y) & GoodGuy(z)) -> (Fights(x,y) & Via(x,z)))", "all x y.((GoodGuy(x) & BadGuy(y)) -> (Fights(x,y) & Vice Versa(x)))", "(all x y.((GoodGuy(x) & BadGuy(y)) -> Fights(x,y)) & ((GoodGuy(x) & BadGuy(x)) -> Fights(x,y)))", "(all x.(GoodGuy(x) -> BadGuy(x)))", "all x.(GoodGuys(x) -> (FightsBadGuys(x) & Vice Versa(x)))", "all x.(GoodGuy(x) -> (FightsBadGuys(x) & Vice Versa(x)))", "(all x.(GoodGuy(x) -> BadGuy(x)) & (BadGuy(x) -> GoodGuy(x)))", "all x y.((GoodGuy(x) & BadGuy(y)) -> Fights(x,y))", "exists x.(GoodGuy(x) & BadGuy(x) & Fights(x,y))", "(all x.(GoodGuy(x) -> FightingBadGuy(x)))", "all x.(GoodGuys(x) -> (FightsBadGuys(x) & Viceversa(x)))", "(all x.(GoodGuy(x) -> BadGuy(x)) & (GoodGuy(x) -> BadGuy(x)))", "all x y.((GoodGuy(x) & BadGuy(y)) -> (Fights(x,y) & ViaVia(x,y)))"]}
{"id": "folio_validation_238", "nl": "Sir Digby fights his nemesis.", "fol": "EngagesInFight(SirDigby,SirDigbyNemesis)", "prediction": ["all x.(SirDiggs(x) -> FightingNemesis(x))", "Sir Digby fightsNemesis(SirDiggs)", "-Sir DigbyFightsNemesis(Sir Digby)", "all x y.((SirDiggs(x) & Nemesis(y)) -> Fights(x,y))", "(FightsNemesis(SirDigby))", "Sir Digby FightsNemesis(SirDiggs)", "(FiresNemesis(SirDiggy) & Sir Digby(SirDiggy))", "Sir Digby fights Nemesis.", "all x y.((SirDigby(x) & Nemesis(y)) -> Fighting(x,y))", "all x.(SirDigby(x) -> FightingNemesis(x))", "Sir Digby FightsNemesis(SirDigby)", "Sir Digby fightsNemesis(SirDigby)", "(FightsNemesis(Sir Digby))", "Sir DigbyFightsNemesis(SirDiggs)", "(FiresNemesis(SirDigby)", "Sir Digby fights Nemesis."]}
{"id": "folio_validation_239", "nl": "If a superhero movie is named after a character, that character is a good guy.", "fol": "all x y.((IsSuperheroMovie(x) & CharacterNamedAfter(x,y)) -> IsGoodGuy(y))", "prediction": ["all x.((SuperheroMovie(x) & NamedAfterCharacter(x)) -> GoodGuy(x))", "all x y.((SuperheroMovie(x) & Character(y) & NamedAfter(x,y)) -> GoodGuy(y))", "all x y z.((SuperheroMovie(x) & Character(y) & Character(z) & NamedAfter(x,y,z)) -> GoodGuy(y,z))", "all x.((SuperheroMovie(x) & NamedAfterCharacter(x)) -> GoodGuy(x))", "all x y.((SuperheroMovie(x) & Character(y) & NamedAfter(x,y)) -> GoodGuy(y))", "all x y z.((SuperheroMovie(x) & Character(y) & Character(z) & NamedAfter(x,y,z)) -> GoodGuy(y,z))", "all x.((SuperheroMovie(x) & NamedAfterCharacter(x)) -> GoodGuy(x))", "exists x.(SuperheroMovie(x) & NamedAfterCharacter(x) & GoodGuy(x))", "all x y.((SuperheroMovie(x) & Character(y) & NamedAfter(x,y)) -> GoodGuy(y))", "all x.((SuperheroMovie(x) & NamedAfterCharacter(x)) -> GoodGuy(x))", "all x y.((SuperheroMovie(x) & Character(y) & NamedAfter(x,y)) -> GoodGuy(y))", "all x.((SuperheroMovie(x) & NamedAfterCharacter(x)) -> GoodGuy(x))", "all x y.((SuperheroMovie(x) & Character(y) & NamedAfter(x,y)) -> GoodGuy(y))", "all x.((SuperheroMovie(x) & NamedAfterCharacter(x)) -> GoodGuy(x))", "all x y.((SuperheroMovie(x) & Character(y) & NamedAfter(x,y)) -> GoodGuy(x,y))", "all x.((SuperheroMovie(x) & NamedAfterCharacter(x)) -> GoodGuy(x))"]}
{"id": "folio_validation_240", "nl": "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.", "fol": "CharacterNamedAfter(SurprisingAdventuresofSirDigbyChickenCaesar,SirDigby)", "prediction": ["(SurprisingAdventuresOfSirDigglyChickenCaesar(SirDiggly) & NamedAfterSirDiggly(SirDiggly))", "The SurprisingAdventuresOfSirDigglyChickenCaesar(x) -> NamedAfterSirDiggly(x))", "All x.((SurprisingAdventuresOfSirDigglyChickenCaesar(x) & SirDiggly(x)) -> NamedAfter(x,SirDiggly))", "All x.(SurprisingAdventuresOfSirDigglyChickenCaesar(x) -> NamedAfterSirDiggly(x))", "The SurprisingAdventuresOfSirDigglyChickenCaesar(x) -> NamedAfterSirDiggly(x))", "-SurprisingAdventuresOfSirDigglyChickenCaesar(x) & SirDiggly(x))", "The SurprisingAdventuresOfSirDigbyChickenCaesar(x) -> NamedAfterSirDigby(x))", "Sir DigbyChickenCaesar(SurprisingAdventures(SirDiggs)", "Sir DigbyChickenCaesar(x) -> SurprisingAdventuresOf(x,SirDiggly))", "(SurprisingAdventuresOfSirDigbyChickenCaesar(SirDigby) & NamedAfterSirDigby(SirDigby))", "(SurprisingAdventuresOfSirDiggyCrown(SirDiggy) & NamedAfterSirDiggy(SirDiggy))", "All x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigby(x)) -> NamedAfter(x,SirDigby))", "(SurprisingAdventuresOfSirDigglyCrown(SirDiggly) & NamedAfterSirDiggly(SirDiggly))", "all x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigby(x)) -> NamedAfter(x,SirDigby))", "The SurprisingAdventuresOfSirDiggbyChickenCaesar(x) -> NamedAfterSirDiggby(x))", "The SurprisingAdventuresOfSirDigbyChickenCaesar(x) -> NamedAfterSirDigby(x))"]}
{"id": "folio_validation_241", "nl": "If somebody wins a fight, the person they are fighting loses.", "fol": "all x y.((EngagesInFight(x,y) & WinsFight(x)) -> -WinsFight(y))", "prediction": ["all x y.((WinsFight(x) & Person(y)) -> LosesFight(y))", "all x.(WinsFight(x) -> LosesPerson(x))", "all x y.((WinsFight(x) & Person(y)) -> LosesFight(y))", "all x y.((WinsFight(x) & Person(y) & Fighting(y)) -> Loses(y))", "all x y z.((WinsFight(x) & Person(y) & Fighting(z)) -> Loses(y,z))", "(WinsFight(Person) & LosesFight(Person))", "all x.(WinsFight(x) -> LosesFight(x))", "all x y.((WonsFight(x) & Person(y)) -> LosesFight(y))", "all x.((WinsFight(x) & Person(x)) -> LosesFight(x))", "all x y.((WinsFight(x) & Person(y) & Fighting(y)) -> LosesFight(y))", "all x y.(WinsFight(x) -> LosesPerson(y))", "all x y z.(WinsFight(x,y) -> Loses(y,z))", "all x.(WinsFight(x) -> LosesPerson(x))", "all x.(WinsFight(x) -> Loses(x))", "all x y.((WinsFight(x) & Person(y) & Fighting(y)) -> Loses(y))", "all x.(WinsFight(x) -> LosesFight(x))"]}
{"id": "folio_validation_242", "nl": "Sir Digby's nemesis loses.", "fol": "all x y.((IsSuperheroMovie(x) & AppearsInMovie(y,x)) -> IsGoodGuy(y))", "prediction": ["all x.(SirDiggsNemesis(x) -> Loses(x))", "(LosesNemesis(SirDiggs) & SirDiggs(SirDiggs))", "all x.((SirDiggsNemesis(x) & SirDiggsNemesis(x)) -> Loses(x))", "all x.(Nemesis(x) -> SirDiggs(x))", "all x y.((SirDiggsNemesis(x) & SirDiggs(y)) -> Loses(x,y))", "(LosesSirDiggsNemesis(SirDiggs))", "-LosesNemesis(SirDiggs)", "Sir Digby's NemesisLoses(nemesis,sirDiggs)", "(LosesNemesis(SirDiggs) & SirDiggs(SirDiggs))", "SirDiggsNemesisLoses(SirDiggs)", "Sir Digby's NemesisLoses(SirDiggs)", "All x.(SirDiggs(x) -> NemesisLoses(x))", "-LosesNemesis(SirDiggs)", "all x.(SirDiggsNemesis(x) -> Loses(x))", "-LosesNemesis(SirDigby)", "(LosesNemesis(SirDigby))"]}
{"id": "folio_validation_243", "nl": "[BG] Books contain tons of knowledge.", "fol": "all x.(IsBook(x) -> ContainsKnowledge(x))", "prediction": ["all x.(Book(x) -> ContainsTooOfKnowledge(x))", "all x.((Book(x) & ContainsKnowledge(x)) -> ContainsKnowledge(x))", "[BG] Books contain tons of knowledge.", "[BG] Books ContainsTooOfKnowledge(B)", "all x.((Book(x) & ContainsTooOfKnowledge(x)) -> ContainsTooOfKnowledge(x))", "(Bible(B) & ContainsTooOfKnowledge(B))", "[BG] - Books ContainsTooOfKnowledge(x))", "all x y.((Book(x) & Knowledge(y)) -> Contains(x,y))", "all x.(Book(x) -> ContainsTooOfKnowledge(x))", "all x.(Board(x) -> ContainsTooOfKnowledge(x))", "[BG] Books contain tons of knowledge.", "(ContainsTotalKnowledge(BBG) | Books(BBG))", "[BG] Books ContainsTotalKnowledge(B)", "(ContainsKnowledge(Board))", "all x.(Book(x) -> ContainsTooOfKnowledge(x))", "[BG] Books contain tons of knowledge."]}
{"id": "folio_validation_244", "nl": "[BG] When a person reads a book, that person gains knowledge. ", "fol": "all x y.(ReadsBook(x,y) -> GainsKnowledge(x))", "prediction": ["all x y.((Person(x) & Book(y) & Reads(x,y)) -> GainsKnowledge(x,y))", "all x.(ReadsBook(x) -> GainsKnowledge(x))", "all x y z.((Person(x) & Book(y) & Reads(x,y)) -> GainsKnowledge(x,z))", "all x y.((Person(x) & Book(y) & Reads(x,y)) -> GainsKnowledge(x))", "[BG] (ReadsBook) -> GainsKnowledge(Person))", "[BG] [Person(Person) & ReadsBook(Person,Book))", "[BG] [ReadsBook(Person)]", "all x.(ReadsBook(x) -> GainsKnowledge(x))", "all x y.((Person(x) & ReadsBook(x,y)) -> GainsKnowledge(x,y))", "all x y.((Person(x) & Book(y) & Reads(x,y)) -> GainsKnowledge(x,y))", "all x y z.((Person(x) & Book(y) & Reads(x,y)) -> GainsKnowledge(x,z))", "[BG] WhenReadsBooks,PersonGainsKnowledge.", "(ReadsBook(Person) & GainsKnowledge(Person))", "all x.((Person(x) & ReadsBook(x)) -> GainsKnowledge(x))", "[BG] (ReadsBook) -> GainsKnowledge(Person))", "all x.(ReadsBook(x) -> GainsKnowledge(x))"]}
{"id": "folio_validation_245", "nl": "[BG] If a person gains knowledge, they become smarter.", "fol": "all x.(GainsKnowledge(x) -> IsSmarter(x))", "prediction": ["all x.(GainKnowledge(x) -> Smarter(x))", "[BG] -> Smarter(x))", "[BG] GainsKnowledge(Person) -> Smarter(Person))", "all x.((Person(x) & GainsKnowledge(x)) -> Smarter(x))", "all x.(GainKnowledge(x) -> Smarter(x))", "(GainKnowledge(Person,Body,GainKnowledge) -> Smarter(Person,Body))", "all x.(GainsKnowledge(x) -> Smarter(x))", "(GainKnowledge(Person,Knowledge) -> Smarter(Person,Knowledge))", "[BG] -> GainsKnowledge(Person))", "[BG] (GainsKnowledge(Person) & Smarter(Person))", "all x.(GainKnowledge(x) -> Smarter(x))", "all x.((Person(x) & GainsKnowledge(x)) -> Smarter(x))", "all x.(GainsKnowledge(x) -> Smarter(x))", "[BG] -> Smarter(Person))", "[BG] [GainsKnowledge(Person)]", "all x.((Person(x) & GainsKnowledge(x)) -> Smarter(x))"]}
{"id": "folio_validation_246", "nl": "Harry read the book \"Walden\" by Henry Thoreau.", "fol": "(ReadsBook(Harry,Walden) & IsBook(Walden))", "prediction": ["all x y.((Harry(x) & Book(y)) -> Reads(x,y))", "Harry reads \"Walden\" by Henry Thoreau.", "(Reads(Harry,Henry Thoreau) & \"Walden(Harry,Henry)))", "Harry reads the book \"Walden\" by Henry Thoreau.", "all x y z.((Harry(x) & Book(y) & Thoreau(z)) -> Reads(x,y,z))", "(ReadsBook(Harry,Henry Thoreau) & \"Walden(Harry,Henry))", "(Reads(Harry,Walden) & HenryThoreau(Harry,Thoreau))", "all x.(Harry(x) -> ReadsBook(x,Walden))", "Harry read the book \"Walden\" by Henry Thoreau.", "all x y.((Harry(x) & Book(y)) -> Reads(x,y))", "(ReadsBook(Harry,HenryToreau) & \"Walden(Harry,Henry,Thoreau))", "Harry ReadsWalden(Harry,HenryThoreau)", "Harry reads \"Walden\" by Henry Thoreau.", "(ReadBook(Harry,HenryThoreau) & \"Walden(Harry))", "Harry read the book \"Walden\" by Henry Thoreau.", "(reads(Harry,Walden) & HenryToreau(Harry,Walden))"]}
{"id": "folio_validation_247", "nl": "Walden contains knowledge.", "fol": "ContainsKnowledge(Walden)", "prediction": ["all x.(Wilden(x) -> ContainsKnowledge(x))", "all x.(Walden(x) -> ContainsKnowledge(x))", "Walden containsKnowledge(Wilden)", "(ContainsKnowledge(Wilden)", "all x y.((Walden(x) & Knowledge(y)) -> Contains(x,y))", "Walden containsKnowledge(w)", "(ContainsKnowledge(Walden) & ContainsKnowledge(Walden))", "all x.(Wilden(x) -> ContainsKnowledge(x))", "all x.(Walden(x) -> ContainsKnowledge(x))", "Walden containsKnowledge(Wilden)", "exists x.(Walden(x) & Knowledge(x))", "all x.(Wilden(x) -> ContainsKnowledge(x))", "Walden containsKnowledge.", "Walden contains Knowledge.", "All x.(Wilden(x) -> Knowledge(x))", "exists x.(Walden(x) & Knowledge(x))"]}
{"id": "folio_validation_248", "nl": "Harry is smarter than before.", "fol": "IsSmarter(Harry)", "prediction": ["all x.(Harry(x) -> SmarterThanBefore(x))", "Harry is smarter than Before.", "(Smarter(Harry) & Smarter(Harry))", "all x y.((Harry(x) & Before(y)) -> Smarter(x,y))", "all x.(Harry(x) -> SmarterThanBefore(x))", "Harry is smarter than before.", "(SmarterThanBefore(Harry))", "Harry ist smarterThanBefore(Harry)", "Harry is smarter than Before(Harry)", "(Smarter(Harry) & Smarter(Harry))", "all x.(Harry(x) -> SmarterThanBefore(x))", "Harry is smarter than before.", "Harry is SmarterThanBefore(Harry)", "all x.(Harry(x) -> SmarterThanBefore(x))", "All x.(Harry(x) -> Smarter(x))", "Harry ist smarter als Before(Harry,y)"]}
{"id": "folio_validation_249", "nl": "A person who is smarter has gained knowledge.", "fol": "all x.(IsSmarter(x) -> GainsKnowledge(x))", "prediction": ["all x.(Smarter(x) -> GainedKnowledge(x))", "all x.((Person(x) & Smarter(x)) -> GainedKnowledge(x))", "all x.(Smarter(x) -> GainedKnowledge(x))", "all x.(Smarter(x) -> GainedKnowledge(x))", "all x y.((Person(x) & Smarter(x) & Person(y)) -> GainedKnowledge(x))", "all x.((Person(x) & Smarter(x)) -> GainedKnowledge(x))", "all x.(Smarter(x) -> GainedKnowledge(x))", "all x y.((Person(x) & Smarter(x)) -> GainedKnowledge(x))", "all x.(Smarter(x) -> GainedKnowledge(x))", "all x.((Person(x) & Smarter(x)) -> GainedKnowledge(x))", "exists x.(SmarterPerson(x) & GainedKnowledge(x))", "all x.(Smarter(x) -> GainedKnowledge(x))", "all x.(Smarter(x) -> GainedKnowledge(x))", "all x.((Person(x) & Smarter(x)) -> GainedKnowledge(x))", "all x.(Smarter(x) -> GainedKnowledge(x))", "all x.(Smarter(x) -> GainedKnowledge(x))"]}
{"id": "folio_validation_250", "nl": "Natural language processing tasks can be categorized as either language generation task or language understanding task.", "fol": "all x.(((NaturalLanguageProcessingTask(x) -> LanguageGenerationTask(x)) & -LanguageUnderstandingTask(x)) | (-(NaturalLanguageProcessingTask(x) -> LanguageGenerationTask(x)) & LanguageUnderstandingTask(x)))", "prediction": ["all x.(NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))", "(LanguageGenerationTask(n) | LanguageUnderstandingTask(n)))", "all x.((NaturalLanguageProcessingTask(x) & (LanguageGenerationTask(x) | LanguageUnderstandingTask(x))) -> CategorizedAs(x,y))", "all x.(NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))", "all x y.((NaturalLanguageProcessingTask(x) & LanguageGenerationTask(y) & LanguageUnderstandingTask(y)) -> CategorizedAs(x,y))", "all x.((NaturalLanguageProcessingTask(x) & (LanguageGenerationTask(x) | LanguageUnderstandingTask(x))) -> Processes(x))", "all x.(NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))", "(all x.(NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x))))", "all x.(NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))", "all x y.((NaturalLanguageProcessingTask(x) & LanguageGenerationTask(y) & LanguageUnderstandingTask(y)) -> CategorizedAs(x,y))", "all x.(NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))", "(all x.(NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x))))", "all x y.((NaturalLanguageProcessingTask(x) & LanguageGenerationTask(y) & LanguageUnderstandingTask(y)) -> CategorizedAs(x,y))", "all x.(NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))", "all x.(NaturalLanguageProcessingTask(x) -> ((LanguageGenerationTask(x) | LanguageUnderstandingTask(x\")) & CategorizedAs(x,LanguageGenerationTask(x)))", "all x.(NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))"]}
{"id": "folio_validation_251", "nl": "If the output of a natural language processing task is a text sequence, then it is a language generation task.", "fol": "all x.((NaturalLanguageProcessingTask(x) & IsTextSequenceOutput(x)) -> LanguageGenerationTask(x))", "prediction": ["all x.((OutputOfNaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x.((Output(x) & NaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x y.((NaturalLanguageProcessingTask(x) & TextSequence(y) & Output(x,y)) -> LanguageGenerationTask(x))", "all x.((NaturalLanguageProcessingTask(x) & OutputTextSequence(x)) -> LanguageGenerationTask(x))", "(all x.((Output(x) & NaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x.((OutputOfNaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x y.((Output(x,y) & NaturalLanguageProcessingTask(x) & TextSequence(y)) -> LanguageGenerationTask(x))", "all x.((NaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x y.((NaturalLanguageProcessingTask(x) & OutputTextSequence(x,y)) -> LanguageGenerationTask(x))", "all x.((Output(x) & NaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x y.((NaturalLanguageProcessingTask(x) & TextSequence(y) & Output(x,y)) -> LanguageGenerationTask(x))", "all x.((OutputOfNaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x.((NaturalLanguageProcessingTask(x) & OutputTextSequence(x)) -> LanguageGenerationTask(x))", "all x.((NaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x.((Output(x) & NaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x.((OutputOfNaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))"]}
{"id": "folio_validation_252", "nl": "Machine translation is a natural language processing task.", "fol": "NaturalLanguageProcessingTask(MachineTranslation)", "prediction": ["all x.(MachineTranslation(x) -> NaturalLanguageProcessingTask(x))", "(NaturalLanguageProcessingTask(MachineTranslation))", "all x y.((MachineTranslation(x) & NaturalLanguageProcessingTask(y)) -> Works(x,y))", "all x.(MachineTranslation(x) -> NaturalLanguageProcessingTask(x))", "(NaturalLanguageProcessingTask(MachineTranslation))", "(NaturalLanguageProcessingTask(MachineTranslation) & NaturalLanguageProcessingTask(MachineTranslation))", "all x y.((MachineTranslation(x) & NaturalLanguageProcessingTask(y)) -> Works(x,y))", "all x.((MachineTranslation(x) & NaturalLanguageProcessingTask(x)) -> Works(x))", "all x.(MachineTranslation(x) -> NaturalLanguageProcessingTask(x))", "all x.(MachineTranslation(x) -> NaturalLanguageProcessingTask(x))", "all x y.((MachineTranslation(x) & NaturalLanguageProcessingTask(y)) -> Translates(x,y))", "all x.(MachineTranslation(x) -> NaturalLanguageProcessingTask(x))", "all x.((MachineTranslation(x) & NaturalLanguageProcessingTask(x)) -> Translates(x))", "all x.(MachineTranslation(x) -> NaturalLanguageProcessingTask(x))", "all x.(MachineTranslation(x) -> NaturalLanguageProcessingTask(x))", "all x.(MachineTranslation(x) -> NaturalLanguageProcessing(x))"]}
{"id": "folio_validation_253", "nl": "The output of machine translation is a text sequence.", "fol": "IsTextSequenceOutput(MachineTranslation)", "prediction": ["all x.(MachineTranslation(x) -> TextSequence(x))", "all x.((MachineTranslation(x) & Output(x)) -> TextSequence(x))", "all x y.((MachineTranslation(x) & Output(y)) -> TextSequence(x))", "(Output(MachineTranslation) -> TextSequence(MachineTranslation))", "all x.((MachineTranslation(x) & Output(x,TextSequence)) -> MachineTranslation(x))", "all x.(MachineTranslation(x) -> TextSequence(x))", "all x y.((MachineTranslation(x) & Output(y,x)) -> TextSequence(x))", "(OutputOfMachineTranslation(MachineTranslation) -> TextSequence(MachineTranslation))", "(Output(MachineTranslation) -> TextSequence(MachineTranslation))", "all x.((MachineTranslation(x) & Output(x)) -> TextSequence(x))", "all x y.((MachineTranslation(x) & Output(y,x)) -> TextSequence(x))", "all x.(MachineTranslation(x) -> TextSequence(x))", "all x.((MachineTranslation(x) & OutputTextSequence(x)) -> MachineTranslation(x))", "all x y.((MachineTranslation(x) & TextSequence(y)) -> Output(x,y))", "all x y.((MachineTranslation(x) & Output(y,x)) -> TextSequence(y))", "all x.(MachineTranslation(x) -> TextSequence(x))"]}
{"id": "folio_validation_254", "nl": "Machine translation is a language generation task.", "fol": "LanguageGenerationTask(MachineTranslation)", "prediction": ["all x.(MachineTranslation(x) -> LanguageGenerationTask(x))", "(LanguageGenerationTask(MachineTranslation))", "all x y.((MachineTranslation(x) & LanguageGenerationTask(y)) -> Translates(x,y))", "all x.(MachineTranslation(x) -> LanguageGenerationTask(x))", "(LanguageGenerationTask(MachineTranslation) & -LanguageGenerationTask(MachineTranslation))", "all x y.((MachineTranslation(x) & LanguageGenerationTask(y)) -> TranslationTask(x,y))", "all x.((MachineTranslation(x) & LanguageGenerationTask(x)) -> TranslationTask(x))", "all x.(MachineTranslation(x) -> LanguageGenerationTask(x))", "all x y.((MachineTranslation(x) & LanguageGenerationTask(y)) -> Translates(x,y))", "all x.(MachineTranslation(x) -> LanguageGenerationTask(x))", "all x y.((MachineTranslation(x) & LanguageGeneration(y)) -> HasTask(x,y))", "exists x.(MachineTranslationTask(x) & LanguageGenerationTask(x))", "all x.(MachineTranslation(x) -> LanguageGenerationTask(x))", "all x.(MachineTranslation(x) -> LanguageGenerationTask(x))", "all x.(MachineTranslation(x) -> LanguageGenerationTask(x))", "all x.(MachineTranslation(x) -> LanguageGeneration(x))"]}
{"id": "folio_validation_255", "nl": "Machine translation is a language understanding task.", "fol": "LanguageUnderstandingTask(MachineTranslation)", "prediction": ["all x.(MachineTranslation(x) -> LanguageUnderstandingTask(x))", "(LanguageUnderstandingTask(MachineTranslation))", "all x y.((MachineTranslation(x) & LanguageUnderstandingTask(y)) -> Translates(x,y))", "all x.(MachineTranslation(x) -> LanguageUnderstandingTask(x))", "all x y.((MachineTranslation(x) & LanguageUnderstanding(y)) -> IsTask(x,y))", "(LanguageUnderstandingTask(MachineTranslation))", "all x.((MachineTranslation(x) & LanguageUnderstanding(x)) -> HasTask(x))", "all x.(MachineTranslation(x) -> LanguageUnderstandingTask(x))", "all x y.((MachineTranslation(x) & LanguageUnderstandingTask(y)) -> Is(x,y))", "all x y.((MachineTranslation(x) & Language(y)) -> UnderstandingTask(x,y))", "all x.((MachineTranslation(x) & LanguageUnderstandingTask(x)) -> Translates(x))", "all x.(MachineTranslation(x) -> LanguageUnderstandingTask(x))", "all x.(MachineTranslation(x) -> LanguageUnderstandingTask(x))", "all x.(MachineTranslation(x) -> LanguageUnderstandingTask(x))", "all x.(MachineTranslation(x) -> LanguageUnderstanding(x))", "all x.(MachineTranslation(x) -> LanguageUnderstandingTask(x))"]}
{"id": "folio_validation_256", "nl": "Pets are allowed in some managed buildings.", "fol": "exists x.(IsManagedBuilding(x) & AllowsPets(x))", "prediction": ["exists x.(ManagedBuilding(x) & AllowsPets(x))", "exists x y.((Pet(x) & ManagedBuilding(y)) -> AllowedIn(x,y))", "exists x.(Pet(x) & ManagedBuilding(x))", "exists x.(ManagedBuilding(x) & AllowsPets(x))", "all x y.((ManagedBuilding(x) & Pet(y)) -> Allowable(y,x))", "all x y z.((Pet(x) & ManagedBuilding(y) & ManagedBuilding(z)) -> AllowedIn(x,y,z))", "all x y.((Pet(x) & ManagedBuilding(y)) -> AllowedIn(x,y))", "exists x.(ManagedBuilding(x) & AllowsPets(x))", "exists x.(MadeBy(x) & AllowsPets(x))", "all x y.((ManagedBuilding(x) & Pet(y)) -> AllowedIn(y,x))", "exists x.(Pet(x) & ManagedBuilding(x))", "all x y.((Pet(x) & ManagedBuilding(y)) -> AllowedIn(x,y))", "exists x.(ManagedBuilding(x) & AllowsPet(x))", "exists x.(ManagedBuilding(x) & AllowsPetsIn(x,y))", "exists x.(Pet(x) & ManagedBuilding(x))", "all x y.((Pet(x) & ManagedBuilding(y)) -> Allowable(x,y))"]}
{"id": "folio_validation_257", "nl": "[BG] A deposit is required to rent an apartment in a managed building.", "fol": "all x.(IsManagedBuilding(x) -> RequiresDeposit(x))", "prediction": ["all x y.((Apartment(x) & ManagedBuilding(y)) -> RequiresDeposit(x,y))", "all x y z.((Apartment(x) & ManagedBuilding(y) & Apartment(z)) -> RequiresDeposit(x,y,z))", "all x.((Apartment(x) & ManagedBuilding(x)) -> RequiresDeposit(x))", "[BG] (DepositRequiredForApartment(x) & ManagedBuilding(x)))", "([BG] & RentsInManagedBuilding(BG)) -> RequiresDeposit(BG))", "[BG] RentsInManagedBuilding(BG) -> RequiresDeposit(BG))", "all x y.((Apartment(x) & ManagedBuilding(y)) -> RequiresDeposit(x,y))", "(RequiresDeposit(BG) & RentsApartmentInManagedBuilding(BG))", "[BG] (DepositRequiredToRentApartment(BG) & ManagedBuilding(BG))", "all x.((Apartment(x) & ManagedBuilding(x)) -> RequiresDeposit(x))", "[BG] RentsApartmentInManagedBuilding(BG) -> RequiresDeposit(BG))", "all x y z.((Apartment(x) & ManagedBuilding(y) & Deposit(z)) -> RequiredToRent(x,y,z))", "(Board(BG) -> RentsApartment(BG))", "all x y.((Apartment(x) & ManagedBuilding(y) & RequiredDeposit(x,y)) -> RentsIn(x,y))", "all x y.((Apartment(x) & ManagedBuilding(y)) -> RequiresDeposit(x,y))", "all x.((Apartment(x) & ManagedBuilding(x)) -> RequiresDeposit(x))"]}
{"id": "folio_validation_258", "nl": "The security deposit can be either equal to one month's rent or more.", "fol": "all x.(MonthlyRent2000(x) <-> -DepositLessThanEqual1500(x))", "prediction": ["all x.(SecurityDeposit(x) -> (EqualToMonthsRent(x) | More(x)))", "all x.(SecurityDeposit(x) -> (EqualMonthsRent(x) | MoreMonthsRent(x)))", "(EqualToMonthsRent(SecurityDeposit) | More(SecurityDeposit))", "all x y.((SecurityDeposit(x) & Month(y)) -> (EqualTo(x,y) | More(x,y)))", "(EqualsOneMonthsRent(SecurityDeposit) | MoreMonthsRent(SecurityDeposit))", "all x.(SecurityDeposit(x) -> (EqualToMonthsRent(x) | More(x)))", "all x.((SecurityDeposit(x) & (OneMonthRent(x) | More(x))) -> DepositEqual(x))", "all x.(SecurityDeposit(x) -> (EqualMonthsRent(x) | MoreMonthsRent(x)))", "all x y.((SecurityDeposit(x) & Month(y)) -> (EqualTo(x,y) | More(x,y)))", "all x.(SecurityDeposit(x) -> (OneMonthRent(x) | More(x)))", "all x y.((SecurityDeposit(x) & Month(y)) -> (Equal(x,y) | More(x,y)))", "all x.(SecurityDeposit(x) -> (EqualToMonthsRent(x) | More(x)))", "all x.(SecurityDeposit(x) -> (Equal(x,months) | More(x,months)))", "all x.(SecurityDeposit(x) -> (OneMonthStatusRent(x) | MoreMonthsStatus(x)))", "exists x.(SecurityDeposit(x) & ((EqualMonthsRent(x) | MoreMonthsRent(x))) -> SecurityDeposit(x)))", "exists x.(SecurityDeposit(x) & (MonthsRent(x) | MonthsRent(x)))"]}
{"id": "folio_validation_259", "nl": "Fluffy is Tom's cat.", "fol": "all x.(MonthlyRent2000(x) <-> DepositAtLeast2000(x))", "prediction": ["Fluffy is Tom's cat.", "(TomCat(Fluffy) & Cat(Fluffy))", "(Cat(Fluffy) & TomsCat(Fluffy))", "-TomsCat(Fluffy)", "Fluffy is Tom's cat.", "(Tom(Fluffy) & Cat(Fluffy))", "(Cat(Fluffy) & Tom(Fluffy))", "TomsCat(Fluffy)", "(TomCat(Fluffy) & Cat(Fluffy))", "-TomsCat(Fluffy)", "Fluffy is Tom's cat.", "Tom's Cat(Fluffy)", "Tom's cat.", "Fluffy is TomsCat(x)", "Fluffy is Tom'sCat(x)", "Fluffy is Tom's cat."]}
{"id": "folio_validation_260", "nl": "Cats are pets.", "fol": "IsCat(Fluffy)", "prediction": ["all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "(Pet(cat) & Pet(cat))", "all x y.((Cat(x) & Pet(y)) -> Pet(x,y))", "all x.(Cat(x) -> Pet(x))", "(all x.(Cat(x) -> Pet(x)))", "(Pet(cat) & Pet(cat))", "all x.(Cat(x) -> Pet(x))", "all x y.((Cat(x) & Pet(y)) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))"]}
{"id": "folio_validation_261", "nl": "The Olive Garden is a managed building.", "fol": "all x.(IsCat(x) -> IsPet(x))", "prediction": ["all x.(OliveGarden(x) -> ManagedBuilding(x))", "(ManagedBuilding(OliveGarden) & LocatedIn(OliveGarden,Olive))", "The OliveGarden is managedBuilding(OliveGarden)", "all x.(OliveGarden(x) -> ManagedBuilding(x))", "all x y.((OliveGarden(x) & ManagedBuilding(y)) -> ManagedBuilding(x))", "(ManagedBuilding(OliveGarden) & ManagedBuilding(OliveGarden,OliveGarden))", "(ManagedBuilding(OliveGarden) & LocatedIn(OliveGarden,Olive))", "The OliveGarden is managed building.", "all x.(OliveGarden(x) -> ManagedBuilding(x))", "all x.(OliveGarden(x) -> ManagedBuilding(x))", "All x.(OliveGarden(x) -> ManagedBuilding(x))", "all x.(OliveGarden(x) -> ManagedBuilding(x))", "all x.(OliveGarden(x) -> ManagedBuilding(x))", "All x.(OliveGarden(x) -> ManagedBuilding(x))", "All x.(OliveGarden(x) -> ManagedBuilding(x))", "All x.(OliveGarden(x) -> ManagedBuilding(x))"]}
{"id": "folio_validation_262", "nl": "The monthly rent at the Olive Garden is $2000.", "fol": "IsManagedBuilding(OliveGarden)", "prediction": ["all x.((MonthlyRent(x) & OliveGarden(x)) -> $2000(x))", "all x.((MonthlyRent(x,y) & OliveGarden(y)) -> $2000(y))", "(MonthlyRent(OliveGarden) -> $2000)", "all x.(MonthlyRent(x,y) -> OliveGarden(y))", "All x y.((MonthlyRent(x,y) & OliveGarden(y)) -> $2000(y))", "the monthly rent at OliveGardenis$2000.", "The MonthlyRentAtOliveGarden(x) is $2000(x))", "all x.(MotorMonthlyRent(x,y) -> $2000(y))", "All x y.((OliveGarden(x) & MonthlyRent(y,x)) -> $2000(y))", "the monthly rent at the OliveGarden(OliveGarden,StandardRent,2000)", "all x.((MonthlyRent(x) & OliveGarden(x)) -> $2000(x))", "(MonthlyRent(OliveGarden,2000))", "(MonthlyRentAtOliveGarden(x,2000))", "All x y.((MonthlyRent(x) & OliveGarden(y)) -> Rent(x,y))", "all x.(MonthlyRent(x,y) -> OliveGarden(y))", "all x.(Math(x) -> MonthlyRent(x,250))"]}
{"id": "folio_validation_263", "nl": "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.", "fol": "MonthlyRent2000(OliveGarden)", "prediction": ["all x y.((Tom(x) & ManagedBuilding(y) & MovesInWithFluffy(x,y) & SecurityDeposit(x,y)) -> RentsApartment(x,y))", "(all x.((Tom(x) & MovesInWithFluffy(x) & SecurityDeposit(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreTubeTubeTubeTubeTubeTubeTubeTubeTubeTubeTubeTubeTubeTubeTubeTubeTubeTubeTuutuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "all x.((Tom(x) & MovesInWithFluffy(x) & SecurityDeposit(x,nomoreThan(x,1000)) -> RentsApartment(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreTumillion(x,nomoreTumillion(x,nomoreTumillion(x,no))))", "all x y z.((Apartment(x) & ManagedBuilding(y) & Fluffy(z) & MovesInWith(x,z) & SecurityDeposit(x,y) & -(StandardDeposit(x,y) | SecurityDeposit(x,y)))) -> Rents(x,y))", "all x y.((Tom(x) & ManagedBuilding(y) & -MoveInWithFluffy(x,y) & SecurityDeposit(x,y)) -> RentsApartment(x,y))", "all x y.((Tam(x) & Apartment(y) & ManagedBuilding(x) & Fluffy(y) & MovesInWith(x,y) & SecurityDeposit(x,y)) -> Rents(x,y))", "(AllowedToMoveInWithFluffy(Tom) & SecurityDepositNoMoreThan(Tom,1500)) -> RentsApartment(Tom,ManagedBuilding))", "all x.((Tam(x) & MoveInWithFluffy(x) & SecurityDeposit(x,nomoreThan(x,1000)) -> RentsApartment(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,nomoreThan(x,no))))", "((MoveInWithFluffy(Tom) & -SecurityDeposit(Tom)) -> RentsApartmentInManagedBuilding(Tom)))", "(MoveInWithFluffy(Tom) & SecurityDepositNoMoreThan(Tom,1000))", "all x y z.((Tom(x) & Apartment(y) & ManagedBuilding(z) & MovesInWithFluffy(x,y) & SecurityDeposit(x,z)) -> Rents(x,y,z))", "(all x y.((Apartment(x) & ManagedBuilding(y) & Fluffy(x)) -> Rents(x,y)))", "all x.((Tom(x) & MovesInWithFluffy(x) & SecurityDeposit(x,nomoreThan1500)) -> RentsApartment(x,nomoreThan1500))", "all x y.((Fluffy(x) & Apartment(y) & ManagedBuilding(x) & AllowedToMoveInWith(x,y) & SecurityDepositNoMoreThan(x,y)) -> Rents(x,y))", "all x y.((Tom(x) & ManagedBuilding(y) & MovesInWithFluffy(x,y) & SecurityDeposit(x,y)) -> RentsApartment(x,y))", "all x.((Tom(x) & MovesInWithFluffy(x) & SecurityDepositNoMoreThan(x,1000)) -> RentsApartmentInManagedBuilding(x))"]}
{"id": "folio_validation_264", "nl": "2000$ is more than $1500.", "fol": "all x.(TomRentingConditions(x) <-> (IsManagedBuilding(x) & AllowsPets(x) & DepositLessThanEqual1500(x)))", "prediction": ["(MoreThan(2000$) -> MoreThan(2000$))", "all x.(2000$(x) -> MoreThan(x,1000))", "all x.((2000$(x) & MoreThan(x,1000)) -> MoreThan(x,1000))", "2000$ is more than $1500.", "-(2000$(2000) & MoreThan(2000)))", "(2000$) -> MoreThan(2000$))", "-(2000$(2000)) -> MoreThan(2000$))", "(MoreThan(2000$) -> MoreThan(2000$))", "(2000$ = MoreThan(2000))", "2000$ (MoreThan(2000) & MoreThan(2000))", "2000$ is more than $1500.", "all x.(2000$(x) -> MoreThan(x,1000))", "(MoreThan(2000$,1000))", "2000$ is more than $1500.", "all x.(2000$(x) -> MoreThan(x,1000))", "All x.(2000$(x) -> MoreThan(x,500))"]}
{"id": "folio_validation_265", "nl": "Tom will rent an apartment in The Olive Garden.", "fol": "TomRentingConditions(OliveGarden)", "prediction": ["all x y.((Tom(x) & Apartment(y)) -> RentsInOliveGarden(x,y))", "(RentsApartment(Tom) | RentsApartment(Tom)))", "all x.((Tom(x) & Apartment(y)) -> RentsInOliveGarden(x,y))", "all x y z.((Tom(x) & Apartment(y) & OliveGarden(z)) -> Rents(x,y,z))", "Tom will rentsApartmentInOliveGarden(Tom)", "All x.(Tom(x) -> RentsApartmentInOliveGarden(x))", "(RentsApartment(Tom) & InOliveGarden(Tom))", "all x y.((Tom(x) & Apartment(y)) -> RentsInOliveGarden(x,y))", "Tom will rents an apartment in The OliveGarden.", "Tom will rent an apartment in The OliveGarden.", "all x y.((Tom(x) & Apartment(y) & OliveGarden(y)) -> Rents(x,y))", "(RentApartment(Tom) | RentApartment(Tom)))", "All x.(TomRentsApartment(x) -> OliveGarden(x))", "All x.((Tom(x) & OliveGarden(x)) -> RentsApartment(x,y))", "(RentsApartment(Tom,OliveGarden))", "(RentsApartmentInOliveGarden(Tom))"]}
{"id": "folio_validation_266", "nl": "Tom is allowed to move in an apartment in The Olive Garden with Fluffy.", "fol": "AllowsPets(OliveGarden)", "prediction": ["all x y.((Tom(x) & Apartment(y) & OliveGarden(y)) -> MovesIn(x,y))", "(AllowedToMoveInApartment(Tom,OliveGarden) & Fluffy(Tom))", "all x y z.((Tom(x) & Apartment(y) & OliveGarden(z) & Fluffy(x)) -> MovesIn(x,y,z))", "all x.((Tom(x) & MovesInApartment(x) & OliveGarden(x) & Fluffy(x)) -> AllowedToMoveIn(x,y))", "(Apartment(Tom) & MovesIn(Tom,OliveGarden,Fluffy))", "all x y.((Tom(x) & Apartment(y) & InOliveGarden(x,y)) -> MovesWithFluffy(x))", "All x.((Tom(x) & Apartment(x) & OliveGarden(x) & Fluffy(x)) -> MovesIn(x,y))", "(MovesInApartment(Tom,OliveGarden) & Fluffy(Tom))", "(AllowedToMoveInApartment(Tom,OliveGarden) & Fluffy(Tom,Fluffy))", "All x.((Tom(x) & MovesInApartment(x)) -> (OliveGarden(x) & Fluffy(x)))", "all x y.((Tom(x) & Apartment(y) & OliveGarden(y) & Fluffy(x)) -> MovesIn(x,y))", "all x y z.((Tom(x) & Apartment(y) & OliveGarden(z) & Fluffy(y)) -> MovesIn(x,y,z))", "(AllowedToMoveInApartment(Tom,OliveGarden,Fluffy))", "All x.((Tom(x) & Apartment(y) & OliveGarden(z)) -> MovesInWithFluffy(x,y,z))", "All x.(MovesInApartment(x,Fluffy) -> TomOwen(x))", "all x y.((Tom(x) & Apartment(y) & InOliveGarden(x,y) & Fluffy(x)) -> MovesIn(x,y))"]}
{"id": "folio_validation_267", "nl": "The security deposit at the Olive Garden is either $2000 or more.", "fol": "DepositAtLeast2000(OliveGarden)", "prediction": ["all x.((SecurityDeposit(x) & OliveGarden(x)) -> (StockageDeposit(x,2000) | SecurityDeposit(x,2000)))", "all x.(OliveGarden(x) -> (SecurityDeposit(x,2000) | SecurityDeposit(x,2000)))", "(SecurityDeposit(OliveGarden) -> (StockageDeposit(OliveGarden) & (StockageDeposit(OliveGarden) -> (StockageDeposit(OliveGarden) & (StockageDeposit(OliveGarden) -> $2000))))", "all x.(SecurityDeposit(x) -> (StockageDeposit(x,2000) | SecurityDeposit(x,2000)))", "all x y.((OliveGarden(x) & SecurityDeposit(y)) -> (StandardDeposit(y,x) & (StandardDeposit(y,x) -> $2000)))", "(SecurityDeposit(OliveGarden) & ((SecurityDeposit(OliveGarden) & $2000)) | More(OliveGarden))))", "all x.((SecurityDeposit(x) & OliveGarden(x)) -> (Value(x,2000) | Value(x,2000)))", "all x.(OliveGarden(x) -> (SecurityDeposit(x,2000) | More(x,2000)))", "(SecurityDeposit(OliveGarden) -> (ValuableForSecurity(OliveGarden,2000) | ValuableForSecurity(OliveGarden,2000)))", "all x y.((OliveGarden(x) & SecurityDeposit(y)) -> (EstablishedAt(x,y) & (EstablishedAt(x,y) & $2000(y) | More(y))))", "all x.(SecurityDeposit(x) -> ((OliveGarden(x) & $2000(x)) | More(x))))", "all x y.((OliveGarden(x) & SecurityDeposit(y) & (StockageDeposit(y,x) | SecurityDeposit(y,x))) -> (StockageDeposit(y,x) & (StockageDeposit(y,x) -> $2000)))", "All x.(OliveGarden(x) -> (SecurityDeposit(x,250) | More(x,250)))", "all x y.((OliveGarden(x) & SecurityDeposit(y)) -> (ValuableFor(x,y) & (ValuableFor(x,y) | MoreFor(x,y))))", "All x.(OliveGarden(x) -> SecurityDeposit(x,2000))", "All x.(SecurityDeposit(x) -> (Values(x,2000) | Values(x,2000)))"]}
{"id": "folio_validation_268", "nl": "If animals are loved by tourists, then they are Max's favorite animals. ", "fol": "all x.(LovedByTourists(x) -> MaxsFavoriteAnimals(x))", "prediction": ["all x.((Animal(x) & LovedByTourists(x)) -> FavoriteAnimal(x))", "all x y.((Animal(x) & Tourist(y) & LovedBy(x,y)) -> FavoriteAnimal(x,y))", "all x.((Animal(x) & LovedByTourists(x)) -> MaxFavoriteAnimal(x))", "(LovedByTourists(animal,Max) -> FavoriteAnimal(animal,Max))", "all x y.((Animal(x) & Tourist(y) & LovedBy(x,y)) -> MaxFavoriteAnimal(x))", "all x.(LovedByTourists(x) -> FavoriteAnimal(x))", "all x.((Animal(x) & LovedByTourists(x)) -> FavoriteAnimal(x))", "(LivingTourists(animal) -> FavoriteAnimal(animal))", "all x.((Animal(x) & LovedByTourists(x)) -> MaxFavoriteAnimal(x))", "all x y.((Animal(x) & Tourist(y) & LovedBy(x,y)) -> FavoriteAnimal(x,y))", "all x.(LovedByTourists(x) -> MaxFavoriteAnimal(x))", "all x y.((Animal(x) & Tourist(y) & LovedBy(x,y)) -> MaxFavoriteAnimal(x,y))", "all x.((Animal(x) & LovedByTourists(x)) -> FavoriteAnimal(x))", "all x.((Animal(x) & LovedByTours(x)) -> MaxFavoriteAnimal(x))", "all x.((Animal(x) & LovedByTourists(x)) -> MaxFavoriteAnimal(x))", "all x.((Animal(x) & LovedByTourists(x)) -> FavoriteAnimal(x,Max))"]}
{"id": "folio_validation_269", "nl": "All animals from Australia are loved by tourists. ", "fol": "all x.(FromAustralia(x) -> LovedByTourists(x))", "prediction": ["all x.((Animal(x) & FromAustralia(x)) -> LovedByTourists(x))", "all x.(Animal(x) -> LovedByTourists(x))", "all x.((Animal(x) & FromAustralia(x)) -> LovedByTourists(x))", "(LovedByTourists(animal,Australia) & -LovedByTourists(animal,Australia))", "all x y.((Animal(x) & Tourist(y)) -> LovedBy(x,y))", "all x.(AustralianAnimal(x) -> LovedByTourists(x))", "all x.(Animal(x) -> LovedByTourists(x))", "all x.((Animal(x) & FromAustralia(x)) -> LovedByTourists(x))", "(all x.(Animal(x) -> LovedByTourists(x))", "all x y.((Animal(x) & Tourist(y)) -> LovedBy(x,y))", "all x.(AustralianAnimal(x) -> LovedByTourists(x))", "all x.(Animal(x) -> LovedByTourists(x))", "all x.((Animal(x) & FromAustralia(x)) -> LovedByTourists(x))", "all x y.((Animal(x) & Tourist(y)) -> LovedBy(x,y))", "all x y.((Animal(x) & Tourist(y)) -> LovedBy(x,y))", "all x.((Animal(x) & FromAustralia(x)) -> LovedByTourists(x))"]}
{"id": "folio_validation_270", "nl": "All quokka are animals from Australia. ", "fol": "all x.(IsQuokka(x) -> FromAustralia(x))", "prediction": ["all x.(Quokka(x) -> Animal(x))", "(All x.(Quokka(x) -> AnimalFromAustralia(x))", "all x.(Quokka(x) -> Animal(x))", "all x.(Quokka(x) -> AnimalFromAustralia(x))", "all x y.((Quokka(x) & Animal(y)) -> Australia(x))", "(all x.(Quokka(x) -> Animal(x)))", "all x y.((Quokka(x) & Australia(y)) -> Animal(x,y))", "all x.(Quokka(x) -> Animal(x))", "(All x.(Quokka(x) -> AustralianAnimal(x))", "all x.(Quokka(x) -> AnimalFromAustralia(x))", "all x.(Quokka(x) -> (Animal(x) & FromAustralia(x)))", "all x.(Quokka(x) -> Animal(x))", "all x.(Quokka(x) -> Animal(x))", "all x.(Quokka(x) -> AnimalFromAustralia(x))", "all x.(Quokka(x) -> AnimalFromAustralia(x))", "All x.(Quokka(x) -> Animal(x))"]}
{"id": "folio_validation_271", "nl": "All of Max's favorite animals are very fluffy.", "fol": "all x.(MaxsFavoriteAnimals(x) -> IsVeryFluffy(x))", "prediction": ["all x.(FavoriteAnimal(x) -> VeryFluffy(x))", "(FavoriteAnimal(Max) & VeryFluffy(Max))", "all x.(FavoriteAnimal(x) -> VeryFluffy(x))", "All of Max's FavoriteAnimals(Max) are VeryFluffy(Max)", "all x.((Animal(x) & Favorite(x,Max)) -> VeryFluffy(x))", "all x.(MaxFavoriteAnimal(x) -> VeryFluffy(x))", "all x y.((Animal(x) & Animal(y) & Max(x,y)) -> VeryFluffy(x))", "(FavoriteAnimal(Max) & VeryFluffy(Max))", "all x.(MattFavoriteAnimal(x) -> VeryFluffy(x))", "all x.(FavoriteAnimal(x) -> VeryFluffy(x))", "All of Max's FavoriteAnimals(Max) areFunny(Max)", "(FavoriteAnimal(Max) -> VeryFluffy(Max))", "all x.(MaxFavoriteAnimal(x) -> VeryFluffy(x))", "all x.(FavoriteAnimal(x) -> VeryFluffy(x))", "(FavoriteAnimal(Max) & VeryFluffy(Max))", "all x.(FavoriteAnimal(x) -> VeryFluffy(x))"]}
{"id": "folio_validation_272", "nl": "All of Max's favorite animals love to sleep. ", "fol": "all x.(MaxsFavoriteAnimals(x) -> LovesToSleep(x))", "prediction": ["all x.(FavoriteAnimal(x) -> LovesToSleep(x))", "(FavoriteAnimal(Max) & LovesToSleep(Max))", "all x y.((Animal(x) & Animal(y) & LovesToSleep(x,y)) -> LovesToSleep(x,y))", "all x.((Animal(x) & Favorite(x)) -> LovesToSleep(x))", "all x.(FavoriteAnimal(x) -> LovesToSleep(x))", "All of Max's FavoriteAnimalsLoveToSleep(Max)", "(FavoriteAnimal(Max) & LovesToSleep(Max))", "all x.(MaxFavoriteAnimal(x) -> LovesToSleep(x))", "all x.(MattFavoriteAnimal(x) -> LovesToSleep(x))", "all x.(FavoriteAnimal(x) -> LovesToSleep(x))", "all x y.((Animal(x) & Max(y)) -> LovesToSleep(x,y))", "(FavoriteAnimal(Max) & LovesToSleep(Max))", "All of Max's FavoriteAnimalsLoveToSleep(Max)", "all x.(FavoriteAnimal(x) -> LovesToSleep(x))", "(FavoriteAnimal(Max) & LovesToSleep(Max))", "all x.(FavoriteAnimal(x) -> LovesToSleep(x))"]}
{"id": "folio_validation_273", "nl": "If a koala is very fluffy, then the koala is not a quokka.", "fol": "(IsVeryFluffy(Koala) -> -IsQuokka(Koala))", "prediction": ["all x.((Koala(x) & VeryFluffy(x)) -> -Quokka(x))", "all x.((Koala(x) & VeryFluffy(x)) -> -Quokka(x))", "all x.(Fluffy(x) -> -Quokka(x))", "all x y.((Koala(x) & VeryFluffy(x)) -> -Quokka(y))", "all x.((Koala(x) & VeryFluffy(x)) -> -Quokka(x))", "all x.(Fluffy(x) -> -Quokka(x))", "all x y.((Koala(x) & VeryFluffy(x)) -> -Quokka(y))", "(Fluffy(koala) -> -Quokka(koala))", "all x.((Koala(x) & VeryFluffy(x)) -> -Quokka(x))", "exists x.(Koala(x) & VeryFluffy(x) & -Quokka(x))", "all x.((Koala(x) & Fluffy(x)) -> -Quokka(x))", "all x.(Fluffy(x) -> -Quokka(x))", "all x.((Koala(x) & VeryFluffy(x)) -> -Quokka(x))", "all x.(Fluffy(x) -> -Quokka(x))", "all x.((Koala(x) & VeryFluffy(x)) -> -Quokka(x))", "all x.((Koala(x) & VeryFluffy(x)) -> -Quokka(x))"]}
{"id": "folio_validation_274", "nl": "Koalas love to sleep.", "fol": "LovesToSleep(Koala)", "prediction": ["all x.(Koala(x) -> LovesToSleep(x))", "all x.(Koala(x) -> LovesSleep(x))", "all x y.((Koala(x) & Sleep(y)) -> Loves(x,y))", "(LivingToSleep(Koalas) & -LivingToSleep(Koalas))", "all x.(Koala(x) -> LovesToSleep(x))", "all x y.((Koala(x) & Sleep(y)) -> Loves(x,y))", "(LivingToSleep(Koala))", "all x.(Koala(x) -> LovesSleep(x))", "all x.(Kala(x) -> LovesSleep(x))", "all x y.((Koala(x) & Sleep(y)) -> Loves(x,y))", "all x.(Koala(x) -> LovesToSleep(x))", "exists x.(Kala(x) & Loves(x,Sleep))", "all x.(Koala(x) -> LoveToSleep(x))", "all x.(Koala(x) -> LovesToSleep(x))", "all x.(Koala(x) -> LoveToSleep(x))", "exists x.(Koala(x) & Sleep(x))"]}
{"id": "folio_validation_275", "nl": "Koalas love to sleep and are quokka.", "fol": "(LovesToSleep(Koala) & IsQuokka(Koala))", "prediction": ["all x.(Koala(x) -> (LovesSleeping(x) & Quokka(x)))", "all x.(Koala(x) -> (LivingToSleep(x) & Quokka(x)))", "(LivingToSleep(Koala) & Quokka(Koala))", "all x y.((Koala(x) & Sleep(y)) -> (Loves(x,y) & Quokka(x)))", "all x.(Kala(x) -> (LovesSleeping(x) & Quokka(x)))", "all x.(Koala(x) -> (LovesSleeping(x) & Quokka(x)))", "(all x.(Koala(x) -> LovesToSleep(x)) & Quokka(x))", "(LikesToSleep(Koala) & Quokka(Koala))", "all x.(Koala(x) -> (LikesToSleep(x) & Quokka(x)))", "all x.(Koala(x) -> (LovesToSleep(x) & Quokka(x)))", "all x y.((Koala(x) & Sleep(y)) -> (Loves(x,y) & Quokka(x)))", "exists x.(Coala(x) & LovesSleeping(x) & Quokka(x))", "(all x.(Koala(x) -> LoveToSleep(x)) & Quokka(x))", "all x.(Kala(x) -> (LivingToSleep(x) & Quokka(x)))", "all x.(Koala(x) -> (LivingToSleep(x) & Quokka(x)))", "all x.(Koala(x) -> (LovesSleep(x) & Quokka(x)))"]}
{"id": "folio_validation_276", "nl": "If a koala is a quokka, then the koala either loves to sleep or is very fluffy, but not both.", "fol": "(IsQuokka(Koala) -> ((LovesToSleep(Koala) & -IsVeryFluffy(Koala)) | (-LovesToSleep(Koala) & IsVeryFluffy(Koala))))", "prediction": ["all x.(Quokka(x) -> ((Koala(x) & LovesSleep(x)) | (-LovesSleep(x) & Fluffy(x))))", "all x.((Koala(x) & Quokka(x)) -> ((LovesSleep(x) | VeryFluffy(x)) & -(LovesSleep(x) & VeryFluffy(x))))", "all x.((Koala(x) & Quokka(x)) -> ((LovesToSleep(x) | VeryFluffy(x)) & -(LovesToSleep(x) & VeryFluffy(x))))", "all x.(Quokka(x) -> ((LovesSleep(x) | VeryFluffy(x)) & -(LovesSleep(x) & VeryFluffy(x))))", "(Quokka) -> (LovesToSleep(koala) | VeryFluffy(koala)))", "all x.(Quokka(x) -> ((Koala(x) & LovesSleep(x)) | (-LovesSleep(x) & Fluffy(x))))", "(all x.(Quokka(x) -> (LovesToSleep(x) | VeryFluffy(x))))", "all x y.((Koala(x) & Quokka(x)) -> (LovesToSleep(x) | VeryFluffy(x)))", "all x y.((Koala(x) & Quokka(x)) -> ((LovesToSleep(x) | VeryFluffy(x)) & -(LovesToSleep(x) & VeryFluffy(y))))", "exists x.(Koala(x) & Quokka(x) & ((LovesToSleep(x) & -Fluffy(x)) | (-LovesToSleep(x) & Fluffy(x)))))", "all x.((Koala(x) & Quokka(x)) -> (LovesToSleep(x) | VeryFluffy(x)))", "all x.(Quokka(x) -> ((Koala(x) | VeryFluffy(x)) & -(LovesToSleep(x) | VeryFluffy(x))))", "all x.((Koala(x) & Quokka(x)) -> ((LovesToSleep(x) | VeryFluffy(x)) & -(LovesToSleep(x) & VeryFluffy(x))))", "all x.(Quokka(x) -> (LovesToSleep(x) | VeryFluffy(x)))", "all x.(Quokka(x) -> (LovesSleep(x) | VeryFluffy(x)))", "all x.((Koala(x) & Quokka(x)) -> (LovesSleep(x) | VeryFluffy(x)))"]}
{"id": "folio_validation_277", "nl": "A man is either kind or evil.", "fol": "all x.((IsKind(x) & -IsEvil(x)) | (-IsKind(x) & IsEvil(x)))", "prediction": ["all x.(Man(x) -> (Kind(x) | Evil(x)))", "all x.(Man(x) -> ((Kind(x) | Evil(x))))", "all x.(Man(x) -> (Kind(x) | Evil(x)))", "all x.(Man(x) -> ((Kind(x) | Evil(x))))", "all x.(Man(x) -> (Art(x) | Evil(x)))", "exists x.(Man(x) & ((Kind(x) & Evil(x)) | (-Kind(x) & Evil(x)))))", "all x.(Men(x) -> ((Kind(x) | Evil(x))))", "all x.(Men(x) -> (Art(x) | Evil(x)))", "exists x.(Man(x) & (Kind(x) | Evil(x)))", "all x y.((Man(x) & Kind(y)) | Evil(y))", "all x.(Man(x) -> (Tirn(x) | Evil(x)))", "all x y.((Man(x) & Kind(y)) | Evil(y))", "exists x.(Man(x) & (Type(x) | Evil(x)))", "exists x.(Men(x) & (Kind(x) | Evil(x)))", "exists x.(Man(x) & (Kind(x) | Evil(x)))", "exists x.(Man(x) & (Art(x) | Evil(x)))"]}
{"id": "folio_validation_278", "nl": "No ugly person is handsome.", "fol": "all x.(IsUgly(x) -> -IsHandsome(x))", "prediction": ["-exists x.(UglyPerson(x) & Beautiful(x))", "all x.(UglyPerson(x) -> -Shabby(x))", "-all x.(UglyPerson(x) -> Beautiful(x))", "-exists x.(UglyPerson(x) & Beautiful(x))", "-(UglyPerson(x) & Beautiful(x))", "all x.(UglyPerson(x) -> NoSnake(x))", "(exists x.(UglyPerson(x) & -Beautiful(x)))", "no uglypersonism(x) -> Beautiful(x))", "-exists x.(Ugly(x) & Beautiful(x))", "all x.(UglyPerson(x) -> -Beautiful(x))", "-exists x.(UglyPerson(x) & Beautiful(x))", "-all x.(UglyPerson(x) -> Beautiful(x))", "all x.(UglyPerson(x) -> NoBeautiful(x))", "-exists x.(UglyPerson(x) & Beautiful(x))", "-exists x.(Ugly(x) & Beautiful(x))", "all x.(UglyPerson(x) -> NoShabby(x))"]}
{"id": "folio_validation_279", "nl": "All evil people are ugly.", "fol": "all x.(IsEvil(x) -> IsUgly(x))", "prediction": ["all x.(EvilPerson(x) -> Ugly(x))", "all x.(EvilPeople(x) -> Ugly(x))", "all x.(EvilPerson(x) -> Ugly(x))", "all x.(OddPerson(x) -> Ugly(x))", "all x y.((EvilPerson(x) & EvilPerson(y)) -> Ugly(x))", "all x.(Evil(x) -> Ugly(x))", "all x.(OddPerson(x) -> Ugly(x))", "all x y.((EvilPerson(x) & EvilPerson(y)) -> Ugly(x))", "all x.(EvilPerson(x) -> Ugly(x))", "(all x.(EvilPerson(x) -> Ugly(x))", "all x.(EvilPeople(x) -> Ugly(x))", "all x.(OddPeople(x) -> Ugly(x))", "all x.(OddPerson(x) -> Ugly(x))", "(All x.(EvilPeople(x) -> Ugly(x))", "All x.(Odious(x) -> Ugly(x))", "all x.(EvilPerson(x) -> Ugly(x))"]}
{"id": "folio_validation_280", "nl": "All gentlemen are handsome.", "fol": "all x.(IsGentleman(x) -> IsHandsome(x))", "prediction": ["all x.(Gentleman(x) -> Beautiful(x))", "all x.(Gentleman(x) -> Beautiful(x))", "all x.(Groomer(x) -> Beautiful(x))", "all x y.((Gentleman(x) & Gentleman(y)) -> Beautiful(x))", "all x.(Gentlemen(x) -> Beautiful(x))", "(all x.(Gentleman(x) -> Spacious(x)))", "(all x.(Gentleman(x) -> Beautiful(x))", "all x.(Gentleman(x) -> Spacious(x))", "all x.(Groomer(x) -> Beautiful(x))", "all x.(Men(x) -> Beautiful(x))", "all x.(GroomedMan(x) -> Beautiful(x))", "all x.(Gentlemen(x) -> Beautiful(x))", "all x.(Gentleman(x) -> Spacious(x))", "All x.(Groomer(x) -> Spacious(x))", "all x.(Gentlemen(x) -> Pretty(x))", "All x.(Gentleman(x) -> Nice(x))"]}
{"id": "folio_validation_281", "nl": "All CEOs are gentlemen.", "fol": "all x.(IsCEO(x) -> IsGentleman(x))", "prediction": ["all x.(CEO(x) -> Gentlemen(x))", "all x.(CEO(x) -> Gentlemen(x))", "all x.(CEO(x) -> Gentleman(x))", "(all x.(CEO(x) -> Gentleman(x)))", "all x y.((CEO(x) & Gentleman(y)) -> Gentleman(x))", "all x.(Chairman(x) -> Gentlemen(x))", "all x.(CEO(x) -> Gentlemen(x))", "all x.(Chairman(x) -> Gentlemen(x))", "(all x.(CEO(x) -> Gentleman(x))", "all x.(CEO(x) -> Gentleman(x))", "(all x.(CEO(x) -> Gentleman(x))", "all x.(CEO(x) -> Gentlemen(x))", "all x.(Chairman(x) -> Gentlemen(x))", "all x.(CEO(x) -> Gentleman(x))", "all x.(CEO(x) -> Gentlemen(x))", "all x.(CEO(x) -> Gentleman(x))"]}
{"id": "folio_validation_282", "nl": "Harry is a gentleman.", "fol": "IsGentleman(Harry)", "prediction": ["all x.(Harry(x) -> Gentleman(x))", "(Person(Harry) & Gentleman(Harry))", "(Man(Harry) & Gentleman(Harry))", "(ManyPerson(Harry) & Gentleman(Harry))", "Harry is a gentleman.", "all x.(Harry(x) -> Gentleman(x))", "Harry is gentleman.", "all x.(Harris(x) -> Gentleman(x))", "(Mentionable(Harry)", "(Person(Harry) & Gentleman(Harry))", "Harry is gentleman(Harry)", "all x.(Harry(x) -> Gentleman(x))", "all x.(Harris(x) -> Gentleman(x))", "Harry is Gentleman(Harry)", "Harry is a gentleman.", "all x.(Harry(x) -> Gentleman(x))"]}
{"id": "folio_validation_283", "nl": "Harry is a CEO.", "fol": "IsCEO(Harry)", "prediction": ["(CEO(Harry) & CEO(Harry))", "all x.((Harry(x) & CEO(x)) -> CEO(x))", "Harry is CEO.", "(CEO(Harry) & CEO(Harry))", "Harry is CEO.", "all x.((Harry(x) & CEO(x)) -> CEO(x))", "(Chairman(Harry) & CEO(Harry))", "(CEO(Harry) & CEO(Harry))", "Harry is CEO.", "all x.(CFO(x) -> Harry(x))", "all x.((Harry(x) & CEO(x)) -> CEO(x))", "(CEO(Harry) & CEO(Harry))", "(CEO(Harry) | CEO(Harry))", "Harry is CEO.", "Harry is CEO.", "Harry is CEO(Harry)"]}
{"id": "folio_validation_284", "nl": "Harry is kind or a CEO.", "fol": "(IsKind(Harry) | IsCEO(Harry))", "prediction": ["all x.(Harry(x) -> (Kind(x) | CEO(x)))", "(kind(Harry) | CEO(Harry))", "((Harry(Harry) | CEO(Harry)))", "all x.(Harry(x) -> (Kind(x) | CEO(x)))", "(Person(Harry) | CEO(Harry))", "all x.(Harry(x) -> (Art(x) | CEO(x)))", "all x.(Harris(x) -> (Kind(x) | CEO(x)))", "Harry is kind, or CEO.", "((Harry(Harry) | CEO(Harry)))", "all x.(Harris(x) -> (Kind(x) | CEO(x)))", "Harry is kind, or CEO.", "all x.(Harry(x) -> (Kind(x) | CEO(x)))", "all x.(Harris(x) -> (Art(x) | CEO(x)))", "(Kind(Harry) | CEO(Harry))", "all x.(Harris(x) -> (Art(x) | CEO(x)))", "exists x.(Harry(x) & ((Kind(x) | CEO(x))))"]}
{"id": "folio_validation_285", "nl": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.", "fol": "((((IsEvil(Harry) & IsUgly(Harry) & -(-IsEvil(Harry) & -IsUgly(Harry))) | (-(IsEvil(Harry) & IsUgly(Harry)) & -IsEvil(Harry) & -IsUgly(Harry))) -> -IsKind(Harry)) & -IsCEO(Harry))", "prediction": ["all x.((Harry(x) & (Evil(x) | Ugly(x))) | (-Evil(x) & Ugly(x))))", "all x.((Harry(x) & (Evil(x) | Ugly(x))) | -Evil(x) | -Ugly(x)))", "all x.((Harry(x) & (Evil(x) | Ugly(x)) | -Evil(x) | -Ugly(x))) -> -(Kind(x) | CEO(x)))", "((EvilAndUgly(Harry) | -EvilAndUgly(Harry))) -> -Chairman(Harry))", "(EvilAndUgly(Harry,Harry) | -EvilAndUgly(Harry,Harry)))", "(EvilAndUgly(Harry,Harry) | (-EvilAndUgly(Harry,Harry)))) & -(Harry,Harry,Harry,Harry) & -Chairman(Harry,Harry)))", "all x.((EvilAndUgly(x) | -EvilAndUgly(x))) -> -Chairman(x))", "((EvilAndUgly(Harry) | -EvilAndUgly(Harry)) & -Chairman(Harry))", "all x.((Harry(x) & (Evil(x) | Ugly(x) | -Evil(x) | Ugly(x))) -> -(Kind(x) | CEO(x)))", "all x.((Harry(x) & (Evil(x) | Ugly(x))) | (-Evil(x) | Ugly(x)))))", "all x.((Harris(x) & (Evil(x) | Ugly(x))) | -Evil(x) | -Ugly(x)))", "all x.((Harry(x) & (Evil(x) | Ugly(x)) | -Evil(x) | -Ugly(x))) -> -Chairman(x))", "all x.((Harry(x) & Evil(x) & Ugly(x) & -Evil(x) & -Ugly(x)) -> (-Kind(x) | CEO(x)))", "all x.((Harry(x) & (Evil(x) & Ugly(x)) | -Evil(x) & -Ugly(x))) -> -Chairman(x))", "exists x.(Harry(x) & ((Evil(x) & Ugly(x)) | (-Evil(x) & Ugly(x)))))", "all x.(EvilAndUgly(x) | -EvilAndUgly(x))"]}
{"id": "folio_validation_286", "nl": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.", "fol": "all x.(IsTwinOrTriplet(x) -> SpendingTimeWithSiblings(x))", "prediction": ["all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithAndPlayingWithSiblings(x))", "all x.(Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithAndPlayingWithSiblings(x))", "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithAndPlayingWithSiblings(x))", "all x.(Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutAndPlayingWithSiblings(x))", "((Twins(x) | Triplets(x))) -> SpendsLotOfTimeHangingOutWithSiblingsAndPlayingWithSiblings(x))", "all x.(TwinsOrTriplets(x) -> SpendsLittleTimeHangingOutWithAndPlayingWithSiblings(x))", "all x y.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithAndPlayingWithSiblings(y))", "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithSiblingsAndPlayingWithSiblings(x))", "all x.((Twins(x) | Triplets(x)) -> SpendsLittleTimeHangingOutAndPlayingWithSiblings(x))", "all x y.((Twin(x) | Triplet(x)) -> (SpendsLittleTime(x,y) & HangsOutWithSiblings(y) & PlaysWithSiblings(y)))", "all x.((Twin(x) | Triplet(x)) -> SpendsLossOfTimeHangingOutWithAndPlayingWithSiblings(x))", "all x.((Twin(x) | Triplet(x)) -> (SpoilsLittleTime(x) & HangsOutWithSiblings(x) & PlaysWithSiblings(x)))", "all x.(TwinsOrTriplets(x) -> SpendsLittleTimeHangingOutWithSiblingsAndPlayingWithSiblings(x))", "all x y.((Twin(x) | Triplet(x)) -> SpendsLittleTime(x,y))", "all x.(Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithAndPlayingWithSiblings(x))", "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithAndPlayingWithSiblings(x))"]}
{"id": "folio_validation_287", "nl": "If people have siblings who are the same age, then they are twins or triplets.", "fol": "all x.(SiblingsSameAge(x) -> IsTwinOrTriplet(x))", "prediction": ["all x.((Sibling(x) & SameAge(x)) -> (Twins(x) | Triplets(x)))", "all x.((Siblings(x) & SameAge(x)) -> (Twins(x) | Triplets(x)))", "all x.((Person(x) & SiblingsSameAge(x)) -> (Twins(x) | Triplets(x)))", "all x.(Siblings(x) -> (Twins(x) | Triplets(x)))", "all x.(SiblingsSameAge(x) -> (Twins(x) | Triplets(x)))", "all x.((Person(x) & HasSiblingsSameAge(x)) -> (Twins(x) | Triplets(x)))", "(SameAgeSisters(Person,Siblings) -> (Twins(Person,Siblings) | Triplets(Person,Siblings)))", "all x y.((Person(x) & Sibling(y) & SameAge(y,x)) -> (Twins(x) | Triplets(x)))", "all x y.((Sibling(x) & Sibling(y) & SameAge(x,y)) -> (Twins(x) | Triplets(x)))", "all x.((People(x) & SiblingsSameAge(x)) -> (Twins(x) | Triplets(x)))", "all x.((Siblings(x) & SameAge(x)) -> (Twins(x) | Triplets(x)))", "all x.(SiblingsSameAge(x) -> (Twins(x) | Triplets(x)))", "all x.(Siblings(x) -> (Twins(x) | Triplets(x)))", "all x y.((Person(x) & Sibling(y) & SameAge(y,x)) -> (Twin(x) | Triplet(x)))", "exists x.(Sibling(x) & SameAge(x) & (Twin(x) | Triplet(x)))", "all x.(Siblings(x) -> (Twins(x) | Triplets(x)))"]}
{"id": "folio_validation_288", "nl": "If people complain often about annoying siblings, then they have siblings who are the same age.", "fol": "all x.(ComplainAboutSiblings(x) -> SiblingsSameAge(x))", "prediction": ["all x.((People(x) & ComplainsOfEnormousSiblings(x)) -> SiblingsSameAge(x))", "all x.((Person(x) & ComplainsOftenAboutEnormousSiblings(x)) -> SiblingsSameAge(x))", "all x y.((Person(x) & Sibling(y) & ComplainsOf(x,y)) -> SameAge(x,y))", "all x.((People(x) & ComplainsOftenAboutEnormousSiblings(x)) -> SiblingsSameAge(x))", "all x y.((People(x) & Sibling(y) & ComplainsOfEnormousSiblings(x,y)) -> SiblingsSameAge(x,y))", "all x.(ComplainsOfEnormousSiblings(x) -> SameAgeSiblings(x))", "(all x.(ComplainsOfEnnoblingSiblings(x) -> SameAgeSiblings(x)))", "all x.((Person(x) & ComplainsOfEnnoblingSiblings(x)) -> SameAgeSiblings(x))", "all x y.((Person(x) & Sister(y) & ComplainsOften(x,y)) -> Sister(x,y))", "all x.((People(x) & ComplainsOfEnnoblingSiblings(x)) -> SameAgeSiblings(x))", "all x.(ComplainsOftenAboutEnormousSiblings(x) -> SiblingsSameAge(x))", "all x y.((Person(x) & Sibling(y) & ComplainsOfEnormousSiblings(x,y)) -> SiblingsSameAge(x,y))", "all x y.((People(x) & ComplainsOfEnnoblingSiblings(x,y)) -> SiblingsSameAge(x,y))", "all x.((Person(x) & ComplainsOftenAboutEnragedSiblings(x)) -> SiblingsSameAge(x))", "exists x.(Sibling(x) & PeopleComplainOften(x))", "exists x.(Sibling(x) & PeopleComplainOfEnormousSiblings(x))"]}
{"id": "folio_validation_289", "nl": "If people do not live at home regularly, then they do not develop strong bonds with their family members.", "fol": "all x.(DoesNotLiveAtHome(x) -> -DevelopStrongFamilyBonds(x))", "prediction": ["all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(x))", "all x.((People(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(x))", "all x y.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(y))", "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(x))", "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(x))", "all x.((People(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(x))", "all x.(LivesAtHomeRegularly(x) -> -DevelopsStrongBondsWithFamily(x))", "all x y.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(y))", "all x.((Person(x) & LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(x))", "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopingStrongBondsWithFamily(x))", "all x y.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(y))", "all x y.((People(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBonds(x,y))", "exists x.(RegularLivesAtHome(x) & -DevelopsStrongBonds(x))", "all x.((People(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBonds(x))", "all x.((Person(x) & LivesAtHomeRegularly(x)) -> -DevelopsStrongBonds(x))", "all x y.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopingStrongBonds(y))"]}
{"id": "folio_validation_290", "nl": "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.", "fol": "all x.(SpendingTimeWithSiblings(x) -> DoesNotLiveAtHome(x))", "prediction": ["all x.((People(x) & SpendsLotOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> OftenDoesNotLiveAtHomeRegularly(x))", "all x.((Person(x) & SpendsLotOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> OftenDoesNotLiveAtHomeRegularly(x))", "all x y.((Person(x) & Sibling(y) & SpendsLootOfTimeHangingOutAndPlayingWith(x,y)) -> OftenNotLiveAtHomeRegularly(x))", "all x.((Person(x) & SpendsLootOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> OftenDoesNotLiveAtHomeRegularly(x))", "all x y.((Person(x) & Sibling(y) & SpendsLotOfTimeHangingOutAndPlayingWith(x,y)) -> OftenNotLiveAtHomeRegularly(x))", "all x.((People(x) & SpendsLotOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> OftenLittleAtHome(x))", "all x y.((People(x) & SpendsLootOfTimeHangingOutWith(x,y) & SpendsLootOfTimePlayingWith(x,y)) -> OftenDoesNotLiveAtHomeRegularly(x))", "all x y z.((Person(x) & Sibling(y) & Sibling(z) & SpendsLootOfTime(x,y,z)) -> -LivesAtHomeRegularly(x))", "(all x.((People(x) & SpendsLittleTimeHangingOutWith(x) & PlayingWithSiblings(x)) -> OftenDoesNotLiveAtHomeRegularly(x)))", "all x.((SpendsLotOfTime(x) & HangsOutWith(x) & PlaysWith(x)) -> OftenDoesNotLiveAtHomeRegularly(x))", "all x y.((People(x) & Siblings(y) & SpendsLoosTimeHangingOutAndPlaying(x,y)) -> OftenDoesNotLiveAtHomeRegularly(x))", "all x.(SpendingLotsOfTimeHangingOutWithAndPlayingWithSiblings(x) -> OftenLittleAtHomeRegularly(x))", "all x.(SpoilsLossOfTimeHangingOutWithAndPlayingWithSiblings(x) -> OftenLittleAtHomeRegularly(x))", "all x y.((Person(x) & Sibling(y) & SpendsLittleTimeHangingOutWithAndPlayingWith(x,y)) -> OftenLittleAtHomeRegularly(x))", "all x.((People(x) & SpendsLotOfTimeHangingOutWithSiblings(x) & PlaysWithSiblings(x)) -> -LivesAtHomeRegularly(x))", "all x.((Person(x) & SpendsLotOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> OftenLittleAtHomeRegularly(x))"]}
{"id": "folio_validation_291", "nl": "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   ", "fol": "((IsTwinOrTriplet(Luke) & DevelopStrongFamilyBonds(Luke) & -(-IsTwinOrTriplet(Luke) & -DevelopStrongFamilyBonds(Luke))) | (-(IsTwinOrTriplet(Luke) & DevelopStrongFamilyBonds(Luke)) & -IsTwinOrTriplet(Luke) & -DevelopStrongFamilyBonds(Luke)))", "prediction": ["all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & StrongBonds(x)) | (-Twin(x) & Triplet(x)) & -StrongBonds(x))))", "((Twin(Luke) | Triplet(Luke))) | (-Twin(Luke) | Triplet(Luke)))))", "all x y.((Luke(x) & FamilyMember(y)) -> ((Twin(x) | Triplet(x)) & StrongBonds(x)) | (-Twin(x) & Triplet(x) & StrongBonds(x))))", "((Luke(Luke) & (Twin(Luke) | Triplet(Luke))) | (-Twin(Luke) & Triplet(Luke)))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & StrongBondsWithFamily(x)) | (-Twin(x) & Triplet(x)) & -StrongBondsWithFamily(x))))", "(all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & StrongBondsWithFamily(x)) | (-Twin(x) & Triplet(x)) & StrongBondsWithFamily(x))))", "((Twin(Luke) | Triplet(Luke)) & StrongBonds(Luke)) | (-Twin(Luke) & StrongBonds(Luke))))", "((Twin(Lucky) | Triplet(Lucky)) & StrongBondsWithFamily(Lucky)) | (-Twin(Lucky) & StrongBondsWithFamily(Lucky))))", "all x y.((Luke(x) & FamilyMember(y)) -> ((Twin(x) | Triplet(x)) & StrongBonds(x,y)) | (-Twin(x) & Triplet(x) & StrongBonds(x,y))))", "all x.((Luke(x) & (Twin(x) | Triplet(x)) & StrongBonds(x)) | (-Twin(x) & Triplet(x) & StrongBonds(x))))", "(all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & StrongBondsWithFamily(x))) | (-Twin(x) & StrongBondsWithFamily(x)))))", "((Luke(Luke) & (Twin(Luke) | Triplet(Luke))) | (-Twin(Luke) & Triplet(Luke))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & DevelopsStrongBonds(x)) | (-Twin(x) & Triplet(x) & DevelopsStrongBonds(x))))", "all x y.((Luke(x) & FamilyMember(y)) -> ((Twin(x) | Triplet(x)) & StrongBonds(x,y)) | (-Twin(x) & Triplet(x) & StrongBonds(x,y))))", "exists x.(Luke(x) & ((Twin(x) | Triplet(x)) & StrongBondsWithFamily(x)) | (-Twin(x) & Triplet(x) & StrongBondsWithFamily(x))))", "exists x.(Luke(x) & ((Twin(x) | Triplet(x)) & StrongBonds(x)) | (-Twin(x) & Triplet(x)))))"]}
{"id": "folio_validation_292", "nl": "Luke spends a lot of time hanging out and playing with his siblings.", "fol": "SpendingTimeWithSiblings(Luke)", "prediction": ["all x.(Luke(x) -> (HangsOut(x) & PlaysWithSiblings(x)))", "all x y.((Luke(x) & Sibling(y)) -> (HangsOut(x,y) & PlaysWith(x,y)))", "Luke spends a lot of time hanging out and playing with siblings.", "all x.((Luke(x) & Sibling(y)) -> SpendsLittleTimeHangingOutAndPlayingWith(x,y))", "(HangingOut(Luke) & PlayingWithSiblings(Luke))", "all x y.((Luke(x) & Siblings(y)) -> SpendsLittleTimeHangingOutAndPlaying(x,y))", "(Luke,Siblings(Luke) & SpendsLittleTimeHangingOutAndPlayingWith(Luke,Siblings))", "(StaysWithSiblings(Luke,Luke) & SpendsLittleTime(Luke,Luke))", "all x.(Luke(x) -> (HangsOut(x) & PlaysWithSiblings(x)))", "Luke spends a lot of time hanging out and playing with his siblings.", "(HangingOut(Luke) & PlayingWithSiblings(Luke))", "all x.(Luke(x) -> (StaysOut(x) & PlaysWithSiblings(x)))", "all x.(Luke(x) -> SpendsLittleTimeHangingOutAndPlayingWithSiblings(x))", "exists x.(Sister(x) & SpendsLoestOfTime(x))", "Luke spends a lot of time hanging out and playing with siblings.", "all x.(Luke(x) -> (HangsOut(x) & PlaysWithSiblings(x)))"]}
{"id": "folio_validation_293", "nl": "Luke complains often about annoying siblings.", "fol": "ComplainAboutSiblings(Luke)", "prediction": ["all x y.((Luke(x) & Sibling(y)) -> ComplainsOf(x,y))", "all x.(Luke(x) -> ComplainsOfEnniblingSiblings(x))", "Luke complains often about annoyingSiblings.", "all x.((Luke(x) & EnnealingSiblings(x)) -> ComplainsOf(x,Luke))", "Luke complains about annoyingSiblings.", "(EnragedSiblings(Luke) & ComplainsOf(Luke))", "(all x.(Luke(x) -> EnragedSiblings(x)))", "all x.(Luke(x) -> (ComplainsAbout(x,EnormousSiblings)))", "Luke (ComplainsOfEnormousSiblings(Luke))", "Luke complains often about annoyingssiblings.", "(EnormousSiblings(Luke))", "all x y.((Luke(x) & Sibling(y)) -> ComplainsOf(x,y))", "Luke complains of annoyingSiblings.", "all x.(Luke(x) -> ComplainsOfEnniblingSisters(x))", "Luke complains about annoyingssiblings.", "Luke complains often about annoyingSiblings(Luke)"]}
{"id": "folio_validation_294", "nl": "Luke is neither a twin nor triplet nor complains often about annoying siblings.", "fol": "-(IsTwinOrTriplet(Luke) | ComplainAboutSiblings(Luke))", "prediction": ["all x.(Luke(x) -> (-Twin(x) | Triplet(x)) & -ComplainsOfEnniblingSiblings(x)))", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -(Luke(Luke) & -(Luke) & -(Luke)) | Luke(Luke)))))", "Luke is neither twin nor triplet, nor complains often about annoyingsiblings.", "Luke is -(Twin(Luke) | Triplet(Luke)) & -(EnormousSibling(Luke) & -EnormousSibling(Luke)))", "((Luke(Luke) & -Twin(Luke) & -Triplet(Luke)) | (Luke(Luke) & -Triplet(Luke))))", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke))))", "-(Twin(Lucky) | Triplet(Lucky)) & -(EnormousSiblings(Lucky) | EnormousSiblings(Lucky)))", "all x.(Luke(x) -> (-Twin(x) | Triplet(x)) & -ComplainsOfEnormousSiblings(x)))", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -(Triplet(Luke)) | (Luke(Luke) & -(Triplet(Luke))))))", "all x.(Luke(x) -> (-(Twin(x) | Triplet(x))) | (ComplainsOfEnormousSiblings(x) & -(Twin(x) | Triplet(x)))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & -EnormousSiblings(x))))", "-(Twin(Luke) | Triplet(Luke)) & -(Luke(Luke) & -(Luke(Luke) | Triplet(Luke))))", "Luke is neither twin nor triplet, nor complains often about annoyingsiblings.", "((Luke(Luke) & -Twin(Luke)) | (Luke(Luke) & -Triplet(Luke))))", "((Luke(Luke) & -Twin(Luke)) | (Luke(Luke) & -Triplet(Luke))) | (Luke(Luke) & -Triplet(Luke))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & -(EnormousSiblings(x) & -(Twin(x) | Triplet(x)))))"]}
{"id": "folio_validation_295", "nl": "It costs US $205 to take the GRE test.", "fol": "CostOfGRE(Gre)", "prediction": ["all x.((GRETest(x) & Costs(x,US) & -Costs(x,US)) -> Costs(x,US))", "all x.((GRETest(x) & CostsUS205(x)) -> Takes(x,y))", "-CostsUS205ToTakeGRETest(x))", "All x.(GRETest(x) -> Costs(x,US,205))", "(CostsUS205(GRETest))", "(Costs$205(GRETest))", "All x y.((GRETest(x) & Takes(x,y)) -> Costs(x,y))", "all x.((GRETest(x) & Costs(x,US,205)) -> Costs(x,US,205))", "CostsUS$205ToTakeGRETest(x)", "All x y.((GRETest(x) & US$205(y)) -> Costs(x,y))", "(CostsUS205(GRETest) & Takes(GRETest))", "CostsUS205ToTakeGRE(x)", "(Costs$205ToTakeGRETest(x))", "all x.(GRETest(x) -> CostsUS205(x))", "costingUS205ToTakeGRETest(x)", "all x.((GRETest(x) & CostsUS205(x)) -> TakesTest(x))"]}
{"id": "folio_validation_296", "nl": "ETS provides financial aid to those GRE applicants who prove economic hardship.", "fol": "all x.(CostOfGRE(x) -> AffordableCost(x))", "prediction": ["all x.((GREApplication(x) & EconomicHardness(x)) -> ProvidesFinancialAid(x))", "all x y.((ETS(x) & GREApplication(y) & EconomicHardness(y)) -> ProvidesFinancialAid(x,y))", "all x.((ETS(x) & GREApplication(x) & EconomicHardness(x)) -> ProvidesFinancialAid(x))", "all x y.((GREApplication(x) & GREApplication(y) & ProvesEconomicHardness(x,y)) -> ProvidesFinancialAid(x,y))", "all x y z.((ETS(x) & GREApplication(y) & EconomicHardness(z)) -> ProvidesFinancialAid(x,y,z))", "all x y.((ETS(x) & GREApplication(y) & ProvesEconomicHardness(x,y)) -> ProvidesFinancialAid(x,y))", "all x.((GREApplication(x) & EconomicHardness(x)) -> ProvidesFinancialAid(x))", "all x.((ETS(x) & GREApplication(x) & EconomicHardness(x)) -> ProvidesFinancialAid(x))", "all x y.((ETS(x) & GREApplication(y) & EconomicHardness(y)) -> ProvidesFinancialAid(x,y))", "All x y z.((ETS(x) & GREApplication(y) & EconomicHardness(z)) -> ProvidesFinancialAid(x,y,z))", "All x.(ETS(x) -> ProvidesFinancialAid(x))", "ALL X Y.((GREApplication(x) & EconomicHardness(y)) -> ProvidesFinancialAid(x,y))", "all x.((GREApplication(x) & EconomicHardnessProved(x)) -> ProvidesFinancialAid(x))", "ALL X Y.((ETS(x) & GREApplication(y) & ProvesEconomicHardness(y)) -> ProvidesFinancialAid(x,y))", "all x.((GREApplication(x) & EconomicHardness(x)) -> ProvidesFinancialAid(x))", "all x.((ETS(x) & GREApplication(x) & EconomicHardness(x)) -> ProvidesFinancialAid(x))"]}
{"id": "folio_validation_297", "nl": "Economic hardship refers to difficulty caused by having too little money or too few resources.", "fol": "all x.(EconomicHardship(x) -> ProvidesFinancialAid(x))", "prediction": ["all x.((EconomicHardship(x) & (LittleMoney(x) | FewResources(x))) -> Difficulty(x))", "all x y.((EconomicHardship(x) & (LittleMoney(y) | FewResources(y))) -> Difficulty(x,y))", "all x.(EconomicHardship(x) -> (DifficultyCausedByLittleMoney(x) | FewResources(x)))", "all x.((EconomicHardship(x) & (LittleMoney(x) | FewResources(x))) -> DifficultyCausedBy(x))", "(LittleMoney(e) | FewResources(e)) -> EconomicHardship(e))", "all x y.((EconomicHardship(x) & (LittleMoney(y) | FewResources(y))) -> CausedBy(x,y))", "all x.(EconomicHardness(x) -> (DifficultyCausedByLittleMoneyOrLimitedResources(x)))", "all x.((EconomicHardness(x) & (LittleMoney(x) | FewResources(x))) -> CausedBy(x))", "all x.((EconomicalHabitat(x) & (LittleMoney(x) | FewResources(x))) -> DifficultyCausedBy(x,y))", "all x y.((EconomicHardness(x) & (LittleMoney(y) | FewResources(y))) -> CausedBy(x,y))", "all x.(EconomicHardship(x) -> (DifficultyCausedByLittleMoney(x) | FewResources(x)))", "all x.((EconomicHardship(x) & (LittleMoney(x) | FewResources(x))) -> Difficulty(x))", "all x.((EconomicHardship(x) & (TooLittleMoney(x) | TooLittleResources(x))) -> Difficulty(x))", "all x y.((EconomicHardship(x) & (LittleMoney(y) | FewResources(y))) -> DifficultyCausedBy(x,y))", "all x.((EconomicHardness(x) & (LittleMoney(x) | FewResources(x))) -> CausedBy(x,y))", "all x y.((EconomicHardness(x) & (LittleMoney(y) | FewResources(y))) -> CausedBy(x,y))"]}
{"id": "folio_validation_298", "nl": "Tom lives in a single-parent family.", "fol": "all x.((LivesInSingleParentFamily(x) | HasFewResources(x)) -> EconomicHardship(x))", "prediction": ["all x.((Tom(x) & SingleParentFamily(x)) -> LivesIn(x,Tom))", "(LivesInSingleParentFamily(Tom) & SingleParentFamily(Tom))", "(LivingInSingleParentFamily(Tom))", "all x y.((Tom(x) & SingleParentFamily(y)) -> LivesIn(x,y))", "Tom lives in SingleParentFamily(Tom)", "(LivesInSingleParentFamily(Tom) | LivesInSingleParentFamily(Tom)))", "(LivingInSingleParentFamily(Tom) -> SingleParentFamily(Tom))", "all x.((Tom(x) & SingleParentFamily(x)) -> LivesIn(x,Tom))", "all x.(Tom(x) -> SingleParentFamily(x))", "all x y.((Tom(x) & SingleParentFamily(y)) -> LivesIn(x,y))", "Tom lives in singleParentFamily(Tom)", "all x.((Tom(x) & SingleParentFamily(x)) -> LivesIn(x,Tom))", "exists x.(Tom(x) & SingleParentFamily(x))", "all x y.((Tom(x) & SingleParentFamily(y)) -> LivesIn(x,y))", "exists x.(Tom(x) & SingleParentFamily(x))", "all x y.((Tom(x) & SingleParentFamily(y)) -> LivesIn(x,y))"]}
{"id": "folio_validation_299", "nl": "His dad has been out of work for more than a year.", "fol": "LivesInSingleParentFamily(Tom)", "prediction": ["all x.(Dad(x) -> OutOfWorkForMoreThanYear(x))", "(OutOfWork(Dad) & MoreThanYear(Dad))", "(DadOutOfWorkForMoreThanYear(Dad))", "all x y.((Dad(x) & OutOfWork(y)) -> MoreThanYear(x,y))", "-(Dad(Dad) & OutOfWork(Dad))", "SexyDadOutOfWork(Dad,MoreThanYear(Dad,Dad))", "-OutOfWork(Dad,MoreThanYear(Dad,Dad))", "-OutOfWorkForMoreThanYear(Dad)", "all x.(Dad(x) -> OutOfWorkForMoreThanYear(x))", "(DadOutOfWorkForMoreThanYear(Dad))", "(OutOfWork(Dad) & MoreThanYear(Dad))", "-(Dad(Dad) & OutOfWork(Dad,MoreThanYear(Dad,Dad)))", "-(DadOutOfWork(Dad) & MoreThanYear(Dad))", "(OutOfWork(Dad,MoreThanYear))", "all x.(Dad(x) -> OutOfWorkForMoreThanYear(x))", "all x.(Dad(x) -> OutOfWorkForMoreThanAyr(x))"]}
{"id": "folio_validation_300", "nl": "Tom can apply for financial aid from ETS to take the GRE test.", "fol": "ProvidesFinancialAid(Tom)", "prediction": ["all x y.((Tom(x) & ETS(y)) -> CanApplicationForFinancialAid(x,y))", "all x.((Tom(x) & ETS(x)) -> CanApplicationForFinancialAid(x))", "(AppliesForFinancialAid(Tom) & FromETS (TotakeGRETest(Tom)))", "all x y.((Tom(x) & FinancialAid(y) & ETS(x)) -> CanTakeGRETest(x,y))", "all x.((Tom(x) & FinancialAid(x) & ETS(x)) -> TakesGRETest(x))", "Tom can apply for financialaid from ETS to take GRE test.", "(AppliesForFinancialAid(Tom) & TakesGRETest(Tom))", "all x y z.((Tom(x) & FinancialAid(y) & ETS(z)) -> CanApplyFor(x,y,z))", "(ApplicationForFinancialAid(Tom) -> TakeGRETest(Tom))", "all x y.((Tom(x) & ETS(y)) -> CanApplyForFinancialAid(x,y))", "(AppliesForFinancialAid(Tom,ETS) & TakesGRETest(Tom,ETS))", "all x.((Tom(x) & ETS(x)) -> CanApplyForFinancialAid(x))", "all x.((Tom(x) & ApplyForFinancialAid(x) & TakeGRETest(x)) -> CanAppointForGRE(x))", "(ApplyForFinancialAidFromETS (Tom,GRETest)))", "All x y.((Tom(x) & FinancialAid(y) & ETS(x)) -> CanTakeGRETest(x,y))", "all x.((Tom(x) & FinancialAid(x) & ETS(x)) -> CanTakeGRETest(x))"]}
{"id": "folio_validation_301", "nl": "It cost below US $300 to take the GRE test.", "fol": "AffordableCost(Gre)", "prediction": ["all x.((GRETest(x) & CostBelowUS300(x)) -> CostsAboveUS300(x))", "(CostBelowUS300(GRETest))", "all x y.((GRETest(x) & Cost(y) & Below(y,300)) -> CostsAbove(x,y))", "CostBelowUS300ToTakeGRETest(x)", "all x.((GRETest(x) & CostBelowUS300(x)) -> CostsBelowUS300(x))", "all x.((GRETest(x) & UnderUS300(x)) -> CostsAboveUS300(x))", "All x.(GRETest(x) -> CostBelowUS300(x))", "all x y.((GRETest(x) & US300(y)) -> CostBelow(x,y))", "all x.((GRETest(x) & CostsBelowUS300(x)) -> CostsBelowUS300(x))", "all x y.((GRETest(x) & CostBelowUS300(x,y)) -> CostsAboveUS300(y))", "(CostBelowUS300(GRETest))", "All x.(GRETest(x) -> CostsAboveUS300(x))", "(CostBelowUS300(gretest) & TakesTest(gretest))", "-$300ToTakeGRE(x)", "All x.((GRETest(x) & Below300(x)) -> CostsAbove300(x))", "cost below US300 to TakeGRETest(x)"]}
{"id": "folio_validation_302", "nl": "There is no financial aid available for the GRE test.", "fol": "-exists x.ProvidesFinancialAid(x)", "prediction": ["-exists x.(FinancialAid(x) & AvailableForGRETest(x))", "exists x.(FinancialAid(x) & -AvailableForGRETest(x))", "all x.((FinancialAid(x) & GRETest(x)) -> -AvailableFor(x,GRETest))", "there is no financialAidAvailableForGRETest(x)", "(FinancialAid(GRE) - AvailableForTest(GRE))", "-exists x.(FinancialAid(x) & GRETest(x))", "(-FinancialAid(GRETest))", "there is no financial aid available for the GRE test.", "Currently, there is no financialAid(x) for GRETest(x))", "exists x.(FinancialAid(x) & -AvailableForGRETest(x))", "-exists x.(FinancialAid(x) & AvailableForGRETest(x))", "Currently, there is no financialAid(GRETest)", "(-FinancialAid(GRETest))", "-exists x.(FinancialAid(x) & GRETest(x))", "-exists x.(FinancialAid(x) & AvailableForGRETest(x))", "-exists x.(FinancialAid(x) & GRETest(x))"]}
{"id": "folio_validation_303", "nl": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.", "fol": "all x.(SpillFoodOnClothing(x) -> -TidySpacesConsistently(x))", "prediction": ["all x.(SpreadsLotsOfFoodOnClothing(x) -> (-StylishSpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((Person(x) & SpillsLotsOfFood(x)) -> (-TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x y.((Person(x) & SpillsLotsOfFood(x) & Clothing(y)) -> (-TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x y.((Person(x) & SpillsFoodOnClothing(x) & Clothing(y)) -> (-TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((Person(x) & SpillsLotsOfFoodOnClothing(x)) -> (-TidySpacesConsistently(x) & EnjoyCleaning(x)))", "(SpreadsLotsOfFoodOnClothing(Person) -> (-StylishSpacesConsistently(Person) & EnjoysCleaning(Person)))", "all x.((People(x) & SpillsLotsOfFoodOnClothing(x)) -> (-TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x y z.((Person(x) & SpillsLotsOfFood(x,y) & Clothing(y) & Space(z)) -> (-Tidy(x,z) & EnjoysCleaning(x)))", "all x y.(Spreads(x,y) -> ((Spreads(x,y) & FoodOnClothing(x)) & -StylishSpacesConsistently(y) & EnjoysCleaning(y)))", "all x y.((Person(x) & SpillsLotsOfFood(x) & Clothing(y)) -> (-StylishSpacesConsistently(x,y) & EnjoyCleaning(x,y)))", "all x y.((People(x) & SpillsLotsOfFood(x,y)) -> (-StylishSpaces(x) & EnjoyCleaning(x)))", "all x.(SpreadsLotsOfFoodOnClothing(x) -> (-StylishSpacesConsistently(x) & EnjoyCleaning(x)))", "all x.(Spreads(x,y) -> (-Spreads(x,y) & CleansSpaces(x)))", "all x.(SpoilsLotsOfFood(x) -> (-SpoilsConsistently(x) & EnjoysCleaning(x)))", "all x y z.((Person(x) & Food(y) & Clothing(z) & SpillsOn(x,y,z)) -> (-TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((Person(x) & SpillsLotsOfFood(x)) -> (-StylishSpacesConsistently(x) & EnjoyCleaning(x)))"]}
{"id": "folio_validation_304", "nl": "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.", "fol": "all x.(FrequentFoodie(x) -> SpillFoodOnClothing(x))", "prediction": ["all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpillsLotsOfFoodOnClothing(x))", "all x y.((Foodie(x) & FoodRestaurant(y) & GoesOutFrequently(x) & FindsNewFoodRestaurant(x,y)) -> SpillsLotsOfFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequentlyToFindNewFoodRestaurants(x)) -> SpillsLotsOfFoodOnClothing(x))", "all x y.((Foodie(x) & FoodRestaurant(y) & GoesOutFrequently(x) & FindsNewFood(x,y)) -> SpillsLotsOfFoodOnClothing(x))", "all x y z.((Foodie(x) & FoodRestaurant(y) & FoodRestaurant(z) & GoesOutFrequently(x,y) & FindsNewFoodRestaurant(x,z)) -> SpillsLotsOfFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequentlyToFindFoodRestaurants(x)) -> SpillsLotsOfFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpillsLotsOfFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpillsLotsOfFoodOnClothing(x))", "all x y.((Foodie(x) & FoodRestaurant(y) & GoesOutFrequently(x,y)) -> (SpreadsLotsOfFoodOnClothing(x)))", "all x y.((Foodie(x) & FoodRestaurant(y) & GoesOutFrequentlyToTry(x,y)) -> SpillsLotsOfFoodOnClothing(x))", "all x.((Foodies(x) & GoOutFrequently(x) & FindNewFoodRestaurants(x)) -> SpillsLotsOfFoodOnClothing(x))", "all x.((Foodie(x) & GoOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpillsLotsOfFoodOnClothing(x))", "all x y.((Foodie(x) & FoodRestaurants(y) & GoesOutForFrequentFoodRestaurants(x) & FindsNewFoodRestaurants(x,y)) -> SpillsFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsFoodRestaurants(x)) -> SpillsFoodOnClothing(x))", "all x.(Foodie(x) -> (GoesOutForFood(x) & FindsNewFoodRestaurants(x) & SpillsFoodOnClothing(x)))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpillsLotsOfFoodOnClothing(x))"]}
{"id": "folio_validation_305", "nl": "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.", "fol": "all x.(GrewUpAsOnlyChild(x) -> TidySpacesConsistently(x))", "prediction": ["all x.((People(x) & GrownUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((Person(x) & GrownUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x y.((Person(x) & GrownUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpaces(y) & EnjoyCleaning(y)))", "all x.((Person(x) & GrownUpAsOnlyChildren(x) & -Siblings(x)) -> (TidySpaces(x) & EnjoyCleaning(x)))", "all x.((People(x) & GrowsUpAsOnlyChildren(x) & -Siblings(x)) -> (TidySpaces(x) & EnjoysCleaning(x)))", "all x.((GrowthAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x y z.((Person(x) & GrowingUpAsOnlyChildren(x,y) & NoSiblings(y)) -> (TidySpaces(x,z) & EnjoyCleaning(z)))", "all x y.((People(x) & GrowingUpAs(x,y) & Children(y) & -Siblings(x)) -> (TidySpaces(x) & EnjoyCleaning(x)))", "all x y.((Person(x) & GrowingUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpaces(y) & EnjoyCleaning(y)))", "all x.((People(x) & GrownUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpaces(x) & EnjoyCleaning(x)))", "all x.(GrowsUpAsOnlyChildrenWithNoSiblings(x) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((People(x) & grewUpAsOnlyChildrenWithNoSiblings(x)) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x y.((Person(x) & GrownUpAsOnlyChildren(x,y) & NoSiblings(y)) -> (TidySpaces(x) & EnjoyCleaning(x)))", "all x.((Client(x) & GrownUpAsOnlyChildren(x) & -Siblings(x)) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((Person(x) & GrowsUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x y.((People(x) & GrowingUpAsChildren(x) & NoSiblings(x)) -> (TidySpaces(x) & EnjoyCleaning(y)))"]}
{"id": "folio_validation_306", "nl": "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.", "fol": "all x.(ParentsHaveBusyJobs(x) -> GrewUpAsOnlyChild(x))", "prediction": ["all x.((Person(x) & Parents(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Person(x) & HasParents(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x y.((Person(x) & Parent(y) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Parent(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x y z.((Person(x) & Parent(y) & Parent(z) & VeryBusyWithRegularJobs(x,y)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Parents(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x y.((Person(x) & Parent(y) & VeryBusy(y)) -> (GrowthAsOnlyChildren(x,y) & -Siblings(x,y)))", "all x.((Person(x) & Parents(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x y.((Person(x) & Parent(y) & Busy(y)) -> (GrowthAsChildren(x,y) & -Siblings(x)))", "all x.((Person(x) & Parent(x) & BusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Person(x) & HasParents(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x y.((Person(x) & Parent(y) & VeryBusyWithRegularJobs(x,y)) -> GrownUpAsOnlyChildrenWithNoSiblings(x,y))", "all x.((Parents(x) & VeryBustyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Parents(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x y.((Person(x) & Parent(y) & Busy(y)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Person(x) & Parents(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))"]}
{"id": "folio_validation_307", "nl": "All households with a high net income have people who have parents who are very busy with their regular jobs.", "fol": "all x.(HouseholdHighNetIncome(x) -> ParentsHaveBusyJobs(x))", "prediction": ["all x.((Household(x) & HighNetIncome(x)) -> (HasParents(x) & BusyWithRegularJobs(x)))", "all x y.((Household(x) & HighNetIncome(x) & Person(y) & HasParents(y,x)) -> VeryBusyWithRegularJobs(y))", "all x.(HighNetIncome(x) -> (HasParents(x) & BusyWithRegularJobs(x)))", "all x.((Hauslet(x) & HighNetIncome(x)) -> (HasParents(x) & VeryBusyWithRegularJobs(x)))", "all x y.((Household(x) & HighNetIncome(x)) -> (HasParents(y) & BusyWithRegularJobs(y)))", "all x.((Hauslet(x) & HighNetIncome(x)) -> (Person(x) & HasParents(x) & BusyWithRegularJobs(x)))", "all x y.((Hauslet(x) & HighNetIncome(x) & Person(y) & HasParent(y,x) & VeryBusyWithRegularJobs(y)) -> HasParent(y,x))", "all x.(HighNetIncome(x) -> (HasParents(x) & VeryBusyWithRegularJobs(x)))", "all x.((Household(x) & HighNetIncome(x)) -> (HasParents(x) & BusyWithRegularJobs(x)))", "(all x.(HighNetIncome(x) -> HasParents(x,y)))", "all x.((Household(x) & HighNetIncome(x)) -> exists y.(Parent(y) & HasParent(y,x) & BusyWithRegularJobs(y)))", "all x.(HighNetIncomeHaus(x) -> (HasParents(x) & BusyWithRegularJobs(x)))", "all x y.((Haus(x) & HighNetIncome(x)) -> (HasParents(y) & BusyWithRegularJobs(y)))", "all x y.((Household(x) & HighNetIncome(x) & Person(y)) -> (HasParents(y) & BusyWithRegularJobs(y)))", "all x.((Hauslet(x) & HighNetIncome(x)) -> HasParents(x))", "all x.((Household(x) & HighNetIncome(x)) -> (HasParents(x) & VeryBusy(x)))"]}
{"id": "folio_validation_308", "nl": "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. ", "fol": "((SpillFoodOnClothing(Peter) & GrewUpAsOnlyChild(Peter)) | (-SpillFoodOnClothing(Peter) & -GrewUpAsOnlyChild(Peter)))", "prediction": ["all x.(Peter(x) -> ((Person(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x) & -GrownUpAsOnlyChild(x))))", "(Peter(Peter) & ((SpoilsLotsOfFoodOnClothing(Peter) & -SpoilsLotsOfFoodOnClothing(Peter)) | (-SpoilsLotsOfFoodOnClothing(Peter) & -SpoilsLotsOfFood(Peter)))))", "all x.((Peter(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x)) | (-SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x))))", "(all x.(Peter(x) -> (SpreadsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x) & -SpreadsLotOfFoodOnClothing(x))) & -GrownUpAsOnlyChild(x)))", "((Peter(Peter) & SpillsLotOfFoodOnClothing(Peter) & -SpillsLotOfFoodOnClothing(Peter)) | (-SpillsLotOfFoodOnClothing(Peter) & -SpillsLotOfFoodOnClothing(Peter))))", "all x y.((Peter(x) & SpillsFoodOnClothing(x) & OnlyChild(y) & HasSiblings(x,y)) | (-SpillsFoodOnClothing(x,y) & HasSiblings(x,y))))", "(Peter is either (Person(Peter) & SpillsLotOfFoodOnClothing(Peter) & GrownUpAsOnlyChild(Peter) & -GrownUpAsOnlyChild(Peter)))", "all x.(Peter(x) -> ((Person(x) & SpillsLotOfFood(x) & OnlyChild(x) & NoSiblings(x)) | (-Person(x) & SpillsLotOfFood(x) & NoSiblings(x))))", "all x.(Peter(x) -> (SpreadsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x) & -SpreadsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x)))", "all x.(Peter(x) -> ((Person(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x) & -GrownUpAsOnlyChild(x)) | (-Person(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x))))", "all x y.((Person(x) & SpillsLotOfFood(x) & Clothing(y) & OnlyChild(x) & NoSiblings(x)) -> (-SpillsLotOfFood(x) & -GrowsUpAsOnlyChild(x)))", "(all x.(Peter(x) -> (SpoilsLotsOfFoodOnClothing(x) & GrownUpAsOnlyChild(x) & -SpoilsLotsOfFoodOnClothing(x)))", "(Peter (Person(Peter) & SpillsFoodOnClothing(Peter)) | (Peter(Peter) & SpillsFoodOnClothing(Peter) & GrowsUpAsOnlyChild(Peter,Peter))))", "exists x.(Peter(x) & ((SpoilsLotsOfFood(x) & Clothing(x) & -SpoilsLotsOfFood(x) & Clothing(x) & NoSiblings(x)) | (-SpoilsLotsOfFood(x) & Clothing(x) & NoSiblings(x))))", "((Peter(Peter) & SpillsLotOfFood(Peter) & Clothing(Peter)) | (Peter(Peter) & Clothing(Peter) & -SpillsLotOfFood(Peter) & Clothing(Peter))))", "all x y.((Peter(x) & SpillsFoodOnClothing(x) & OnlyChild(y) & NoSiblings(x)) -> ((Peter(x) & SpillsFoodOnClothing(x,y)) | (-Peter(x,y) & SpillsFoodOnClothing(x,y)))))"]}
{"id": "folio_validation_309", "nl": "Peter tidies his space consistently and enjoys the process of cleaning.", "fol": "TidySpacesConsistently(Peter)", "prediction": ["all x.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaning(x,y)))", "all x y.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaning(x,y)))", "(TidiesSpaceConsistently(Peter) & EnjoysCleaning(Peter))", "all x.(TidiesSpaceConsistently(x) & EnjoysCleaning(x))", "all x.(Peter(x) -> (TidiesSpaceConsistently(x) & EnjoysCleaning(x)))", "-(TidiesSpaceConsistently(Peter) & EnjoysCleaning(Peter))", "(ConsistentTidying(Peter) & EnjoysCleaning(Peter))", "all x.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaning(x,y)))", "(all x.(TidiesSpaceConsistently(x) & EnjoysCleaning(x)) -> Peter(x))", "all x y.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaning(x,y)))", "(TidiesSpaceConsistently(Peter) & EnjoysCleaning(Peter))", "all x.(Peter(x) -> (TidiesSpaceConsistently(x) & EnjoysCleaning(x)))", "(TidiesSpaceConsistently(Peter) & EnjoysCleaning(Peter))", "all x y.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaning(x,y)))", "all x.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaning(x)))", "all x y.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaning(x,y)))"]}
{"id": "folio_validation_310", "nl": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.", "fol": "(FrequentFoodie(Peter) | HouseholdHighNetIncome(Peter))", "prediction": ["all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | HighNetIncome(x))", "(Foodie(Peter) & (GoesOutFrequently(Peter,FoodRestaurants) | BelongsToHighNetIncome(Peter,HasNetIncome(Peter)))", "(FastFoodie(Peter) & (GoesOutFrequently(Peter) | HighNetIncome(Peter))))", "all x y.((Foodie(x) & FoodRestaurant(y) & Foodie(x) & FoodRestaurant(y)) -> (GoesOutFrequently(x,y) | BelongsToHighNetIncome(x)))", "all x.((Foodie(x) & GoesOutFrequentlyToFindNewFoodRestaurants(x)) | HouseholdWithHighNetIncome(x))", "(Foodie(Peter) & (GoesOutFrequentlyToFindFoodRestaurants(Peter) | HighNetIncome(Peter)))", "all x.(Foodie(x) & ((GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | HighNetIncome(x))) -> Peter(x))", "all x y.((Foodie(x) & FoodRestaurant(y) & Foodie(x) & GoesOutFrequently(x,y)) | Household(x,y)) -> HighNetIncome(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | HouseholdWithHighNetIncome(x))", "((Foodie(Peter) & GoesOutFrequently(Peter)) | HouseholdWithHighNetIncome(Peter)))", "(FrequentFoodie(Peter) | HighNetIncome(Peter))", "exists x.(Foodie(x) & (GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | exists y.(Household(y) & HighNetIncome(y))))", "(Foodie(Peter) & (GoesOutFrequentlyToFindNewFoodRestaurants(Peter) | HighNetIncome(Peter)))", "exists x.(Foodie(x) & ((GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | BelongsToHighNetIncome(x))))", "all x.((Foodie(x) & GoesOutFrequentlyToFindNewFoodRestaurants(x)) | HighNetIncomeHousehold(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsFoodRestaurants(x)) | HighNetIncomeHousehold(x))"]}
{"id": "folio_validation_311", "nl": "Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.", "fol": "((FrequentFoodie(Peter) & HouseholdHighNetIncome(Peter)) | (-FrequentFoodie(Peter) & -HouseholdHighNetIncome(Peter)))", "prediction": ["all x y.((Foodie(x) & Foodie(y) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x)) | (Foodie(y) & -FindsNewFoodRestaurants(y) & HighNetIncome(y))))", "all x.((Foodie(x) & GoesOutFrequentlyToFindNewFoodRestaurants(x) & HighNetIncome(x)) | (Foodie(x) & -FindsNewFoodRestaurants(x) & HighNetIncome(x))))", "((Foodie(Peter) & GoesOutFrequentlyToFindNewFoodRestaurants(Peter)) | (Foodie(Peter) & -FindsNewFoodRestaurants(Peter))))", "(all x.(Foodie(x) -> (GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x))) | (Foodie(x) & -BelongsToHighNetIncome(x))))", "all x.(Foodie(x) -> ((GoesOutFrequentlyToFindNewFoodRestaurants(x) & HighNetIncome(x)) | (GoesOutFrequentlyToFindNewFoodRestaurants(x) & HighNetIncome(x))))", "all x y.((Foodie(x) & Foodie(y) & GoesOutFrequentlyToFindNewFoodRestaurants(x) & HighNetIncome(x)) | (Foodie(y) & -FindsNewFoodRestaurants(y) & HighNetIncome(y))))", "((Foodie(Peter) & GoesOutFrequentlyToFindNewFoodRestaurants(Peter) & HighNetIncome(Peter)) | (Foodie(Peter) & -FindsNewFoodRestaurants(Peter) & HighNetIncome(Peter))))", "all x y.((Foodie(x) & Foodie(y) & Foodie(x) & GoesOutFrequentlyToFindNewFoodRestaurants(x) & HighNetIncome(x)) | (Foodie(y) & -FindsNewFoodRestaurants(y) & HighNetIncome(y))))", "all x y z.((Foodie(x) & FoodRestaurant(y) & Household(z) & GoesOutFrequently(x,y) & FindsNewFoodRestaurants(x,y) & HighNetIncome(x)) | (Foodie(x,z) & -BelongsToHousehold(x,y,z))))", "(exists x.(Foodie(x) & GoesOutFrequentlyToFindNewFoodRestaurants(x) & HighNetIncome(x)) | exists y.(Foodie(y) & -FindsNewFoodRestaurants(y) & HighNetIncome(y))))", "(all x.(Foodie(x) -> (GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x))) | (Foodie(x) & -BelongsToHighNetIncome(x))))", "all x.(Foodie(x) -> ((GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x)) | (-GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x))))", "all x y z.((Foodie(x) & FoodRestaurant(y) & Household(z) & GoesOutFrequentlyToTry(x,y) & HighNetIncome(x)) | (Foodie(x) & -BelongsToHousehold(x,z) & HighNetIncome(x))))", "exists x.(Foodie(x) & ((GoesOutFrequently(x) & FindsFoodRestaurants(x) & HighNetIncome(x)) | (-GoesOutFrequently(x) & FindsFoodRestaurants(x) & HighNetIncome(x))))", "((Foodie(Peter) & GoesOutFrequentlyToFindNewFoodRestaurants(Peter) & HighNetIncome(Peter)) | (Foodie(Peter) & -FrequentFindingNewFoodRestaurants(Peter) & HighNetIncome(Peter))))", "exists x.(Foodie(x) & ((GoesOutFrequentlyToFindNewFoodRestaurants(x) & HighNetIncome(x)) | (-GoesOutFrequentlyToFindNewFoodRestaurants(x) & HighNetIncome(x)))))"]}
{"id": "folio_validation_312", "nl": "All fir trees are evergreens.", "fol": "all x.(IsFirTree(x) -> IsEvergreen(x))", "prediction": ["all x.(FfirTree(x) -> Evergreen(x))", "all x.(FfirTree(x) -> Evergreen(x))", "(All firTrees(fir) -> Evergreen(fir))", "all x.(FrinTree(x) -> Evergreen(x))", "all x y.((FfirTree(x) & Evergreen(y)) -> Evergreen(x))", "all x.(FfirTree(x) -> Evergreen(x))", "all x.(FernTree(x) -> Evergreen(x))", "all x.(Far(x) -> Evergreen(x))", "all x.(FirmTree(x) -> Evergreen(x))", "all x.(FireTree(x) -> Evergreen(x))", "(All x.(FfirTree(x) -> Evergreen(x))", "all x.(FfirTree(x) -> Evergreen(x))", "all x.(FirmTree(x) -> Evergreen(x))", "all x.(FireTree(x) -> Evergreen(x))", "all x.(FernTree(x) -> Evergreen(x))", "exists x.(FernTree(x) & Evergreen(x))"]}
{"id": "folio_validation_313", "nl": "Some objects of worship are fir trees.", "fol": "exists x.(IsObjectOfWorship(x) & IsFirTree(x))", "prediction": ["exists x.(ObjectOfWorship(x) & FirTree(x))", "exists x.(WorshipObject(x) & FirTree(x))", "exists x.(ObjectOfWorship(x) & FirTree(x))", "exists x.(ObjectOfWorship(x) & FirTree(x))", "exists x.(WorshipObject(x) & FirTree(x))", "exists x y.(ObjectOfWorship(x) & FirTree(y))", "exists x.(Worship(x) & FirTree(x))", "all x y.((ObjectOfWorship(x) & FirTree(y)) -> Worship(x,y))", "exists x.(ObjectOfWorship(x) & FirTree(x))", "exists x y.(ObjectOfWorship(x) & FirTree(y))", "exists x.(WorshipObject(x) & FirTree(x))", "exists x.(Worship(x) & FirTree(x))", "exists x.(ObjectOfWorship(x) & FirTree(x))", "exists x.(ObjectOfWorship(x) & FfirTree(x))", "exists x.(Worship(x) & FirTree(x))", "exists x.(ObjectOfWorship(x) & FirTree(x))"]}
{"id": "folio_validation_314", "nl": "Some evergreens are not objects of worship.", "fol": "exists x.(IsEvergreen(x) & -IsObjectOfWorship(x))", "prediction": ["exists x.(Evergreen(x) & -ObjectOfWorship(x))", "exists x.(Evergreen(x) & -ObjectOfWorship(x))", "exists x.(Evergreen(x) & -ObjectOfWorship(x))", "all x y.((Evergreen(x) & ObjectOfWorship(y)) -> -ObjectOfWorship(x))", "exists x.(Evergreen(x) & -ObjectOfWorship(x))", "all x y.((Evergreen(x) & ObjectOfWorship(y)) -> -ObjectOfWorship(x,y))", "exists x.(Evergreen(x) & -ObjectOfWorship(x))", "exists x.(Evergreen(x) & -ObjectOfWorship(x))", "exists x.(Evergreen(x) & -WorshipObject(x))", "exists x.(Evergreen(x) & -ObjectOfWorship(x))", "exists x.(Evergreen(x) & -ObjectOfWorship(x))", "exists x.(Evergreen(x) & -WorshipObject(x))", "exists x.(Evergreen(x) & -ObjectOfWorship(x))", "exists x.(Evergreen(x) & -OfWorship(x))", "exists x.(Evergreen(x) & -WorshipObject(x))", "exists x.(Evergreen(x) & -ObjectOfWorship(x))"]}
{"id": "folio_validation_315", "nl": "The Picuris Mountains are a mountain range in New Mexico or Texas.", "fol": "(IsMountainRange(Picurismountains) & (LocatedIn(Picurismountains,Newmexico) | LocatedIn(Picurismountains,Texas)))", "prediction": ["all x.(PicurisMountain(x) -> (MountainRange(x) & (NewMexico(x) | Texas(x))))", "(MountainRange(PicurisMountains) & (NewMexico(Picuris) | Texas(PicurisMountains)))", "all x y.((Mountain(x) & MountainRange(y) & (NewMexico(x) | Texas(x))) -> PicurisMountain(x,y))", "all x.(PicurisMountain(x) -> (MountainRange(x) & (NewMexico(x) | Texas(x))))", "(MountainRange(Picuris) & (NewMexico(Picuris) | Texas(Picuris)))", "(MountainRangeIn(PicurisMountains) & (NewMexico(Picuris) | Texas(PicurisMountains)))", "(MountainRange(PicurisMountains) & (NewMexico(Picuris) | Texas(Picuris)))", "all x.(PicurisMountain(x) -> (MountainRange(x) & (InNewMexico(x) | InTexas(x))))", "all x y.((Mountain(x) & MountainRange(y)) -> (NewMexico(x) | Texas(x)))", "All x.((Mountain(x) & (NewMexico(x) | Texas(x))) -> PicurisMountainRange(x))", "all x.(PicurisMountain(x) -> (MountainRange(x,NewMexico) | MountainRange(x,Texas)))", "all x y.((Mountain(x) & (NewMexico(y) | Texas(y))) -> PicurisMountain(x,y))", "all x.(PicurusMountain(x) -> (MountainRangeIn(x,NewMexico) | MountainRangeIn(x,Texas)))", "All x.(Picuris(x) -> (MountainRange(x) & (NewMexico(x) | Texas(x))))", "all x.(PicurisMountain(x) -> (MountainRangeIn(x,NewMexico) | MountainRangeIn(x,Texas)))", "All x.(PicuisMountain(x) -> (MountainRangeIn(x,NewMexico) | MountainRangeIn(x,Texas)))"]}
{"id": "folio_validation_316", "nl": "Juan de Onate visited the Picuris Mountains.", "fol": "VisitedLocation(Juandeonate,Picurismountains)", "prediction": ["Juan de Onate visited PicurisMountains.", "all x y.((JuanDeOnate(x) & PicurisMountain(y)) -> Visited(x,y))", "all x.(JuanDeOnate(x) -> VisitedPicurisMountains(x))", "-Juan de Onate visited PicurisMountains.", "(Visited(JuanDeOnate,PicurisMountains))", "(VisitedPicurisMountains(JuanDeOnate))", "-JuanDeOnateVisitedPicurisMountains(Juan,Onate)", "Juan de Onate visited the PicurisMountains.", "(VisitedMountains(JuanDeOnate) & Picuris(Juan))", "Juan de Onate visited PicurisMountains.", "Juan de Onate a visitated PicurisMountains.", "(ViaPicuris(JuanDeOnate))", "Juan de Onate a visitation of PicurisMountains.", "-Juan de Onate visited PicurisMountains.", "Juan de Onate visited PicurisMountains.", "Juan de Onate visited the Picuris Mountains."]}
{"id": "folio_validation_317", "nl": "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.", "fol": "(LocatedIn(Hardingpegmatitemine,Picurismountains) & IsMine(Hardingpegmatitemine) & IsDonated(Hardingpegmatitemine))", "prediction": ["all x.((HardingPegmatiteMine(x) & LocatedInPicurisMountains(x)) -> Donated(x))", "(HardingPegmatiteMine(x) & LocatedInPicurisMountains(x))", "(Donated(HardingPegmatiteMine) & LocatedInPicurisMountains(Harding))", "the Harding Pegmatite Mine, located in the PicurisMountains, was donated.", "all x y.((HardingPegmatiteMine(x) & PicurisMountains(y)) -> Donated(x,y))", "(HardingPegmatiteMine(Harding) & LocatedInPicurisMountains(Harding))", "All x.(HardingPegmatiteMine(x) -> Donated(x))", "The Harding Pegmatite Mine, located in PicurisMountains, was Donated(x))", "all x.((HardingPegmatiteMine(x) & LocatedInPicurisMountains(x)) -> Donated(x))", "all x y z.((HardingPegmatiteMine(x) & PicurisMountain(y) & Mine(z)) -> Donated(x,y,z))", "all x.((HardingPegmatiteMine(x) & FoundInPicurisMountains(x)) -> Donated(x))", "(DonatedToHardingPegmatiteMine(Harding) & LocatedInPicurisMountains(Harding))", "all x y.((HardingPegmatiteMine(x) & PicurisMountains(y)) -> Donated(x))", "(HardingPegmatiteMine(x) & LocatedInPicurisMountains(x))", "(Donated(HardingPegmatiteMiner) & LocatedInPicurisMountains(Harding))", "All x.(HardingPegmatiteMine(x) -> Donated(x))"]}
{"id": "folio_validation_318", "nl": "There are no mountain ranges in texas that have mines which have been donated.", "fol": "all x y.((IsMine(x) & IsDonated(x) & LocatedIn(x,y) & IsMountainRange(y)) -> -LocatedIn(y,Texas))", "prediction": ["-exists x.(MountainRange(x) & -HasMines(x) & Donated(x))", "exists x.(MountainRange(x) & -(HasMine(x) & Donated(x)))", "there are no mountain ranges in texas that have mines which have been donated.", "all x.((MountainRange(x) & -MinesDonated(x)) -> -TexasMountainRange(x))", "-exists x.(MountainRange(x) & -HasMine(x) & Donated(x))", "all x.((MountainRange(x) & InTexas(x)) -> -HasMinesDonated(x))", "exists x.(MountainRange(x) & -HasMine(x) & Donated(x))", "(exists x.(MountainRange(x) & -HasMines(x) & Donated(x)))", "there are no mountain ranges in texas that have mines which have been donated.", "-exists x.(MountainRange(x) & -HasMines(x) & Donated(x))", "exists x.(MountainRange(x) & -(MountainRange(x) & MinesDonated(x)))", "there are no mountain ranges in texas that have mines donated.", "-exists x.(MountainRange(x) & InTexas(x) & MinesDonated(x))", "all x y.((MountainRange(x) & Texas(y) & Mine(y) & Donated(y,x)) -> -HasMine(x,y))", "-exists x.(MountainRange(x) & -HasMine(x) & Donated(x))", "-exists x.(MountainRange(x) & -HasMines(x) & Donated(x))"]}
{"id": "folio_validation_319", "nl": "Juan de Onate visited a mountain range in New Mexico.", "fol": "exists x.(VisitedLocation(Juandeonate,x) & IsMountainRange(x) & LocatedIn(x,Newmexico))", "prediction": ["all x y.((JuanDeOnate(x) & MountainRange(y)) -> VisitedInNewMexico(x,y))", "Juan de Onate visited a mountain range in New Mexico.", "(VisitedMountainRange(JuanDeOnate,NewMexico))", "all x.((JuanDeOnate(x) & MountainRange(y)) -> VisitedInNewMexico(x,y))", "-JuanDeOnate visitedMountainRange(JuniorDeOnate)", "-(JuanDeOnate(Juan) & MountainRange(Junior,NewMexico))", "(VisitedMountainRange(JuanDeOnate) & NewMexico(JuanDeOnate))", "all x y.((JuanDeOnate(x) & MountainRange(y)) -> Visited(x,y))", "Juan de Onate visited a mountain range in New Mexico.", "(VisitedMountainRange(JonDeOnate,NewMexico))", "Juan de Onate a visitated a mountain range in New Mexico.", "(VisitedMountainRangeInNewMexico(JuanDeOnate,NM))", "all x y.((JuanDeOnate(x) & MountainRange(y)) -> VisitedInNewMexico(x,y))", "Juan de Onate visited a mountain range in New Mexico.", "all x y.((JuanDeOnate(x) & MountainRange(y)) -> Visited(x,y))", "Juan de Onate visited a mountain range in New Mexico."]}
{"id": "folio_validation_320", "nl": "Juan de Onate visited a mountain range in Texas.", "fol": "exists x.(VisitedLocation(Juandeonate,x) & IsMountainRange(x) & LocatedIn(x,Texas))", "prediction": ["all x y.((JuanDeOnate(x) & MountainRange(y)) -> Visited(x,y))", "Juan de Onate visited a mountain range in Texas.", "(VisitedMountainRange(JuanDeOnate,Texas))", "all x.((JuanDeOnate(x) & MountainRange(y)) -> VisitedInTexas(x,y))", "-JuanDeOnate visitedMountainRangeInTexas.", "(VisitedMountainRange(JuanDeOnate) & InTexas(JuanDeOnate))", "all x y.((JuanDeOnate(x) & MountainRange(y)) -> VisitedInTexas(x,y))", "Juan de Onate visited a mountain range in Texas.", "-JuanDeOnate visitedMountainRange(JuniorDeOnate)", "(VisitedMountainRange(JonDeOnate,Texas))", "Juan de Onate a visitated a mountain range in Texas.", "all x y.((MontanRange(x) & JuanDeOnate(y)) -> VisitedInTexas(y,x))", "all x y.((JuanDeOnate(x) & MountainRange(y)) -> Visited(x,y))", "Juan de Onate visited a mountain range in Texas.", "(VisitedMountainRange(JuanDeOnate,Texas))", "Juan de Onate visited a mountain range in Texas."]}
{"id": "folio_validation_321", "nl": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.", "fol": "all x.((IsMountainRange(x) & LocatedIn(Hardingpegmatitemine,x)) -> -LocatedIn(x,Newmexico))", "prediction": ["all x.(HardingPegmatiteMine(x) -> -MountainRangeInNewMexico(x))", "LocatedInMountainRangeInNewMexico(HardingPegmatiteMine)", "(-MountainRange(HardingPegmatiteMine))", "the Harding Pegmatite Mine is located in New Mexico.", "(-LocatedInMountainRange(HardingPegmatiteMine))", "all x.(HardingPegmatiteMine(x) -> -InMountainRange(x))", "all x.(HasHardingPegmatiteMine(x) -> -MountainRangeInNewMexico(x))", "(-exists x.(HardingPegmatiteMine(x) & MountainRange(x)) & -LocatedIn(x,NewMexico))", "LocatedInMountainRangeInNewMexico(hardingpegmatiteMine)", "the Harding Pegmatite Mine is located in New Mexico - located in MountainRange(x))", "(-MountainRange(HardingPegmatiteMine))", "all x.(HardingPegmatiteMine(x) -> -MountainRange(x))", "all x y.((HardingPegmatiteMine(x) & MountainRange(y)) -> -LocatedIn(x,y))", "all x.(HardingPegmatiteMine(x) -> -LocatedInMountainRangeInNewMexico(x))", "All x.(HardingPegmatiteMiner(x) -> -InMountainRangeInNewMexico(x))", "All x.(HardingPegmatiteMiner(x) -> -MountainRangeInNewMexico(x))"]}
{"id": "folio_validation_322", "nl": "If a man is taller than another man, the taller one can block the other's shooting.", "fol": "all x y.((IsMale(x) & IsMale(y) & IsTallerThan(x,y)) -> CanBlockShooting(x,y))", "prediction": ["all x y.((Man(x) & Man(y) & Taller(x,y)) -> BlocksShooting(x,y))", "all x y z.((Man(x) & Man(y) & Taller(x,y) & Man(z)) -> BlocksShooting(x,z))", "all x y.((Man(x) & Man(y) & Taller(x,y)) -> BlocksShooting(y,x))", "(Taller(Man,Man) & BlocksShooting(Man,Man))", "all x.(TallerThanMan(x,y) -> BlocksShooting(x,y))", "all x y z.((Man(x) & Man(y) & Taller(x,y) & Man(z) & Taller(y,z)) -> BlocksShooting(y,z))", "all x.((Man(x) & Taller(x)) -> BlocksShooting(x,y))", "all x y.((Man(x) & Man(y) & TallerThan(x,y)) -> BlocksShooting(x,y))", "all x.(TallerMan(x,y) -> BlocksShooting(x,y))", "all x y.((Man(x) & Man(y) & Taller(x,y)) -> BlocksShooting(x,y))", "all x.((Man(x) & Taller(x) & Man(x)) -> BlocksShooting(x,y))", "exists x.(ManTallerThan(x,y) & ManTallerThan(y) & BlocksShooting(x,y))", "all x y z.(TallerMan(x,y) -> BlocksShooting(x,z))", "all x y.((Man(x) & Taller(x,y)) -> BlocksShooting(x,y))", "all x y.((Man(x) & Man(y) & Taller(x,y)) -> CanBlockShooting(x,y))", "all x.(TallerThanMan(x,y) -> BlocksShooting(x,y))"]}
{"id": "folio_validation_323", "nl": "Michael is a man who is taller than everyone else in his class.", "fol": "all x.((IsMale(x) & InSameClassAs(x,Michael) & -IsEqualTo(x,Michael)) -> IsTallerThan(Michael,x))", "prediction": ["all x.(Michael(x) -> TallerThanEveryone(x))", "all x y.((Michael(x) & Class(y)) -> TallerThan(x,y))", "(Man(Michael) & TallerThanEveryone(Michael))", "(Michael isTallerThanEveryone(Michael))", "all x.(Michael(x) -> (Man(x) & TallerThanEveryone(x)))", "all x.((Man(x) & TallerThanEveryone(x)) -> Michael(x))", "(TallerThanEveryone(Michael) & Man(Michael))", "all x.(Michael(x) -> TallerThanEveryone(x))", "all x y.((Man(x) & Class(y)) -> TallerThan(x,y))", "(Man(Michael) & TallerThanEveryoneInClass(Michael))", "(TallerThanEveryoneInClass(Michael))", "all x y.((Michael(x) & Class(y)) -> TallerThan(x,y))", "all x.(Michael(x) -> TallerThanEveryoneInClass(x))", "all x y.((Man(x) & Class(y)) -> TallerThan(x,y))", "all x.((Man(x) & TallerThanEveryone(x)) -> Michael(x))", "all x.(Michael(x) -> (Man(x) & TallerThanEveryone(x)))"]}
{"id": "folio_validation_324", "nl": "If person x is taller than person y, and person y is taller than person z, than x is taller than z", "fol": "all z.((IsTallerThan(x,y) & IsTallerThan(y,z)) -> IsTallerThan(x,z))", "prediction": ["all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,z))", "all x y.((Person(x) & Person(y) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,z))", "all x.((Person(x) & Person(y) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,z))", "(all x y z.((Person(x) & Person(y) & Person(z)) -> TallerThan(x,y,z)) & ((Person(x) & Person(y) & TallerThan(y,z))) -> TallerThan(x,z)))", "(TallerThan(x,y) & TallerThan(x,z)) & PersonYTallerThan(y,z))", "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y,z)) -> TallerThan(x,z))", "all x.(TallerThanPerson(x,y) & TallerThanPerson(x,z) & PersonYTallerThanPerson(x,z)) -> TallerThanPerson(x,z))", "(Taller(x,y) & TallerThan(x,z)) & Person(y) & TallerThan(y,z))", "all x y.((Person(x) & Person(y) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,z))", "all x.((Person(x) & Person(y) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,z))", "(TallerThan(x,y) & TallerThan(x,z)) -> TallerThan(x,z))", "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,z))", "all x.(TallerThanPerson(x,y) & TallerThanPerson(x,z) & PersonYTallerThanPerson(y,z)) -> TallerThanPerson(x,z))", "all x y.((Person(x) & Person(y) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,y,z))", "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y,z)) -> TallerThan(x,z))", "all x y.((Person(x) & Person(y) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,x,z))"]}
{"id": "folio_validation_325", "nl": "Peter is a man who is taller than Michael.", "fol": "(IsMale(Peter) & IsTallerThan(Peter,Michael))", "prediction": ["all x.((Man(x) & TallerThan(x,Michael)) -> Peter(x))", "(TallerThanMichael(Peter) & TallerThanMichael(Peter))", "(Man(Peter,Michael) & TallerThan(Peter,Michael))", "all x y.((Peter(x) & Michael(y)) -> TallerThan(x,y))", "(Taller(Peter,Michael) & Taller(Peter,Michael))", "all x y.((Man(x) & Man(y) & TallerThan(x,y)) -> Peter(x))", "all x.((Man(x) & TallerThan(x,Michael)) -> Peter(x))", "exists x.(Man(x) & TallerThan(x,Michael))", "(TallerThanMichael(Peter) & TallerThanMichael(Peter))", "(TallerThanMichael(Peter,Michael))", "all x.((Man(x) & TallerThanMichael(x)) -> Peter(x))", "(Man(Peter) & TallerThan(Peter,Michael))", "all x y.((Peter(x) & Michael(y)) -> TallerThan(x,y))", "exists x.(Man(x) & TallerThan(x,Michael))", "(TallerThanMichael(Peter) & TallerThanMichael(Peter))", "all x y.((Peter(x) & Michael(y)) -> TallerThan(x,y))"]}
{"id": "folio_validation_326", "nl": "Michael can block any shooting from a person as long as the person does not jump when shooting.", "fol": "all x.(-CanJumpWhenShooting(x) -> CanBlockShooting(Michael,x))", "prediction": ["all x y.((Person(x) & Person(y) & -JumpWhenShooting(y)) -> CanBlockShooting(x,y))", "all x.((Person(x) & -JumpWhenShooting(x)) -> BlocksShooting(x))", "all x y.((Person(x) & Michael(y)) -> BlocksShooting(y,x))", "all x y z.((Person(x) & Shooting(y) & Michael(z) & -JumpWhenShooting(z)) -> Blocks(x,y,z))", "all x y z.((Michael(x) & Person(y) & Shooting(z) & -Jump(y,z)) -> CanBlock(x,y,z))", "(all x.(JumpWhenShooting(x) -> Blocks(x,y)))", "(all x y.((Person(x) & Shooting(y)) -> Blocks(x,y)))", "all x y.((Person(x) & Person(y) & -JumpWhenShooting(y)) -> BlocksShooting(x,y))", "all x y.((Person(x) & Michael(y)) -> (BlocksShooting(y,x) & -JumpsWhenShooting(y,x)))", "all x.((Person(x) & -JumpWhenShooting(x)) -> CanBlockShooting(x))", "all x.((Person(x) & BlocksShooting(x)) -> -JumpWhenShooting(x))", "(All x.(Jump(x) -> BlocksShooting(x)))", "all x y.((Michael(x) & Person(y) & -JumpWhenShooting(y)) -> BlocksShooting(x,y))", "all x.((Person(x) & BlocksShooting(x)) -> -JumpsWhenShooting(x))", "all x y.((Person(x) & Person(y) & -JumpWhenShooting(y,x)) -> CanBlockShooting(x,y))", "all x.((Person(x) & -JumpWhenShooting(x)) -> BlocksShooting(x))"]}
{"id": "folio_validation_327", "nl": "Michael cannot block Windy's shooting.", "fol": "-CanBlockShooting(Michael,Windy)", "prediction": ["all x.(Michael(x) -> -BlocksWindysShooting(x))", "Michael -CanBlockWindysShooting(Michael)", "-(Michael CanBlockWindysShooting(Michael))", "all x.((Michael(x) & Windy(y)) -> -BlocksShooting(x,y))", "(-BlocksWindy(Michael))", "(BlocksWindy(Michael) -> -BlocksWindy(Michael))", "Michael -BlocksWindyStorage(Michael)", "-(Michael CanBlockWindyStorage(Michael))", "Michael can't block Windy's shooting.", "(-BlocksWindy(Michael))", "all x.(Michael(x) -> -BlocksWindy(x))", "(-BlocksWindysShooting(Michael))", "Michael -CanBlockWindysShooting(Michael)", "all x.((Michael(x) & Windy(x)) -> -BlocksShooting(x))", "-(Michael(Michael) & Windy(Windy))", "Michael -BlocksWindyShotting(Michael)"]}
{"id": "folio_validation_328", "nl": "Every shooter who can jump when shooting is a great shooter.", "fol": "all x.(CanJumpWhenShooting(x) -> IsGreatShooter(x))", "prediction": ["all x.((Shooter(x) & CanJumpWhenShooting(x)) -> GreatShooter(x))", "all x.((Shotter(x) & CanJumpWhenShooting(x)) -> GreatShotter(x))", "all x y.((Shooter(x) & CanJumpWhenShooting(x)) -> GreatShooter(y))", "all x.((Shooter(x) & CanJumpWhenShooting(x)) -> GreatShooter(x))", "all x.((Shotter(x) & CanJumpWhenShooting(x)) -> GreatShotter(x))", "all x.((Shooter(x) & CanJumpWhenShooting(x)) -> GreatShooter(x))", "all x y.((Shooter(x) & CanJumpWhenShooting(x)) -> GreatShooter(y))", "all x y.((Shooter(x) & Shooter(y) & CanJumpWhenShooting(x,y)) -> GreatShooter(x))", "all x.((Shooter(x) & CanJumpWhenShowing(x)) -> GreatShooter(x))", "all x.((Shoter(x) & CanJumpWhenShooting(x)) -> GreatShoter(x))", "all x.((Shooter(x) & CanJumpWhenShooting(x)) -> GreatShooter(x))", "all x.(CanJumpWhenShooting(x) -> GreatShoter(x))", "all x.((Shooter(x) & JumpsWhenShooting(x)) -> GreatShooter(x))", "all x y.((Shooter(x) & CanJumpWhenShooting(x)) -> GreatShooter(y))", "exists x.(Shooter(x) & JumpsWhenShooting(x))", "all x.((Shotter(x) & CanJumpWhenShooting(x)) -> GreatShotter(x))"]}
{"id": "folio_validation_329", "nl": "Peter is shorter than a man in Michael's class.", "fol": "exists x.(IsMale(x) & InSameClassAs(x,Michael) & -IsEqualTo(x,Michael) & -IsTallerThan(Peter,x))", "prediction": ["all x y.((Peter(x) & Man(y)) -> ShorterThan(x,y))", "all x.((Peter(x) & Man(x)) -> ShorterThan(x,Michael))", "(Shorter(Peter,Michael) & InClass(Peter,Michael))", "all x y.((Peter(x) & Man(y) & InClass(x,y)) -> ShorterThan(x,y))", "(ShorterThanMichael(Peter) & InMichaelsClass(Peter))", "(Height(Peter,Michael,Michael) & Shorter(Peter,Michael,Michael))", "(ShorterThanManInMichael'sClass(Peter,Michael))", "all x.((Peter(x) & Man(x)) -> ShorterThan(x,Michael))", "all x.((Peter(x) & Man(x) & InMichaelsClass(x)) -> ShorterThan(x,y))", "(Lengthier(Peter,Michael) & Shorter(Peter,Michael))", "(ShorterThanMichael(Peter,Michael))", "all x y.((Peter(x) & Man(y) & InMichaelsClass(x,y)) -> ShorterThan(x,y))", "all x.((Peter(x) & ManInMichaelsClass(x)) -> ShorterThan(x,Michael))", "all x y.((Peter(x) & Man(y)) -> ShorterThan(x,y))", "exists x.(Man(x) & Shorter(x,y))", "all x y.((Man(x) & Peter(y)) -> ShorterThan(y,x))"]}
{"id": "folio_validation_330", "nl": "Windy is a great shooter.", "fol": "IsGreatShooter(Windy)", "prediction": ["(GreatShooter(Windy) & GreatShotter(Windy))", "Windy is a great Shooter.", "(GreatShoter(Windy) -> Great(Windy))", "all x.(Windy(x) -> GreatShooter(x))", "(GreatShooter(Windy) -> GreatShotter(Windy))", "(GreatShotter(Windy) & Great(Windy))", "Windy is a great Shooter.", "all x.(Windy(x) -> GreatShooter(x))", "Windy is a great shooter.", "all x.(Windy(x) -> GreatShoter(x))", "(GreatShoter(Windy) -> Great(Windy))", "(GreatShooter(Windy)", "Windy is a great Shooter.", "(GreatShooter(Windy,x))", "all x.(Windy(x) -> GreatShooter(x))", "All x.(Windy(x) -> GreatShoter(x))"]}
{"id": "folio_validation_331", "nl": "Peter can block Windy's shooting.", "fol": "CanBlockShooting(Peter,Windy)", "prediction": ["all x.((Peter(x) & Windy(x)) -> BlocksShooting(x))", "(BlocksWindy(Peter,Windy))", "all x y.((Peter(x) & Windy(y)) -> CanBlock(x,y))", "all x.(Peter(x) -> BlocksWindysShooting(x))", "-CanBlockWindysShooting(Peter)", "all x.((Peter(x) & Windy(x)) -> CanBlock(x,Windy))", "(BlocksWindysShooting(Peter,Windy))", "(CanBlockWindy(Peter,Windy))", "(BlocksWingyStorage(Peter) & WindyStorage(Peter))", "all x y.((Peter(x) & Windy(y)) -> BlocksShooting(x,y))", "(CanBlockWindyShooting(Peter,Windy))", "All x.(Peter(x) -> CanBlockWindy(x))", "All x.(Peter(x) -> BlocksWindyStorage(x))", "all x y.((Peter(x) & Windy(y)) -> CanBlock(x,y))", "(CanBlockWindyShooting(Peter))", "all x y.((Peter(x) & Windy(y)) -> BlocksShooting(x,y))"]}
{"id": "folio_validation_332", "nl": "Barutin Cove is named after the Bulgarian settlement of Barutin.", "fol": "(BarutinCove(Barutin) & NamedAfterSettlement(Barutin,Settlement) & LocationOf(Settlement,Bulgaria))", "prediction": ["all x.(BarutinCove(x) -> NamedAfterBulgarianStadion(x))", "BarutinCove is named after the BulgarianStandard(Barutin)", "(BulgarianStadion(Barutin) & NamedAfter(Barutin))", "(BarutinCove(BulgarianStandard) & NamedAfter(BulgarianStandard))", "(BulgarianStadium(Barutin) & NamedAfter(Barutin))", "-BarutinCove(BulgarianStadium(Barutin)", "BarutinCove(b) -> NamedAfterBulgarianStadion(b))", "BarutinCove (BulgarianStadium(Barutin) & NamedAfter(Barutin))", "all x.(BarutinCove(x) -> NamedAfterBulgarishStandard(x))", "BarutinCove (BulgarianStadium(Barutin))", "the name of BarutinCove (Bulgary's Settlement(Barutin))", "BarutinCove is named after the BulgarianStandardOfBarutin.", "BarutinCove(x) -> (BulgaryanStadium(x) & NamedAfter(x,Bulgary)))", "all x.(BarutinCove(x) -> NamedAfterBulgarianStandard(x,Barutin))", "BarutinCove is named after the BulgarianStadionOfBarutin.", "all x.(BarutinCove(x) -> NamedAfterBulgary(x))"]}
{"id": "folio_validation_333", "nl": "Barutin Cove is on the southwest coast of Snow Island.", "fol": "LocationOf(Barutin,Snow)", "prediction": ["(SnowIsland(BarutinCove) & OnSudwestCoast(BarutinCove))", "BarutinCove is onSnowIsland(BarutinCove,SouthwestCoast)", "BarutinCove is located on the southwest coast of SnowIsland.", "all x.(BarutinCove(x) -> (SwissCoast(x) & SnowIsland(x)))", "BarutinCove(x) -> (SwimmingSnowIsland(x) & OnSnowIsland(x)))", "BarutinCove (SnowIsland(Barutin) & OnSudwestCoast(Barutin))", "Located on the southwest coast of SnowIsland.", "all x.(BarutinCove(x) -> (OnSwimmingSnowIsland(x) & OnSnowIsland(x)))", "all x.(BarutinCove(x) -> OnSnowIslandSudwestCoast(x))", "(SnowIsland(BarutinCove) & OnSudwestCoast(BarutinCove))", "BarutinCove is onSnowIsland(BarutinCove)", "Located on the southwest coast of SnowIsland, BarutinCove is on.", "(SnowIsland(BarutinCove) & OnSudwestCoast(BarutinCove,SnowIsland))", "BarutinCove is located on the southwest coast of SnowIsland.", "BarutinCove (SnowIsland(Barutin))", "(SnowIsland(BarutinCove) & OnSudwestCoast(BarutinCove))"]}
{"id": "folio_validation_334", "nl": "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.", "fol": "(LocationOf(Snow,Shetland) & LocationOf(Greenwich,Shetland) & LocationOf(Deception,Shetland))", "prediction": ["all x.(SouthShetlandIsland(x) -> (IncludesSnowIsland(x) | IncludesGreenwichIsland(x) | IncludesDeceptionIsland(x)))", "(SouthShetlandIsland(SnowIsland) & GreenwichIsland(SnowIsland) & DeceptionIsland(SnowIsland))", "(SnowIsland(SnowIsland) & GreenwichIsland(SnowIsland) & DeceptionIsland(SnowIsland))", "all x.(SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))", "(SouthShetlandIsland(SnowIsland) & GreenwichIsland(GreenwichIsland) & DeceptionIsland(DeceptionIsland))", "all x.(SouthShetlandIsland(x) -> (IncludesSnowIsland(x) | IncludesGreenwichIsland(x) | IncludesDeceptionIsland(x)))", "(SouthShetlandIslands(SnowIsland) | GreenwichIsland(SnowIsland) | DeceptionIsland(SnowIsland)))", "all x y z.((SouthShetlandIsland(x) & SnowIsland(y) & GreenwichIsland(z)) -> (Includes(x,y) & Includes(x,z)))", "All x.(SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))", "all x y.((SouthShetlandIsland(x) & SnowIsland(y) & GreenwichIsland(y)) -> (Includes(x,y) & Includes(x,y)))", "(SnowIsland(SnowIsland) & GreenwichIsland(GreenwichIsland) & DeceptionIsland(SnowIsland))", "(SnowIsland(SnowIsland) | GreenwichIsland(SnowIsland) | DeceptionIsland(SnowIsland))", "all x.(SouthShetlandIsland(x) -> (IncludesSnowIsland(x) | IncludesGreenwichIsland(x) | IncludesDeceptionIsland(x)))", "all x.(SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))", "(SouthShetlandIslands(SnowIsland) | GreenwichIsland(SnowIsland) | DeceptionIsland(SnowIsland))", "All x.(SouthShetlandIsland(x) -> (IncludesSnowIsland(x) | IncludesGreenwichIsland(x) | IncludesDeceptionIsland(x)))"]}
{"id": "folio_validation_335", "nl": "The South Shetland Islands are considered part of Antarctica.", "fol": "LocationOf(Shetland,Antarctica)", "prediction": ["all x.(SouthShetlandIslands(x) -> PartOfAntarctica(x))", "all x.(SouthShetlandIsland(x) -> PartOfAntarctica(x))", "(PartOfAntarctica(SouthShetlandIslands)", "all x y.((SouthShetlandIsland(x) & Antarctica(y)) -> PartOf(x,y))", "all x.(SouthShetlandIslands(x) -> PartOfAntarctica(x))", "All x.(SouthShetlandIsland(x) -> PartOfAntarctica(x))", "all x.(SouthShetlandIslands(x) -> PartOfAntarctica(x))", "(PartOfAntarctica(SouthShetlandIslands)", "(PartOfAntarctica(SouthShetlandIslands)", "all x y.((SouthShetlandIsland(x) & Antarctica(y)) -> PartOf(x,y))", "all x.(SouthShetlandIsland(x) -> PartOfAntarctica(x))", "all x y.((SouthShetlandIsland(x) & Antarctica(y)) -> PartOf(x,y))", "All x.(SouthShetlandIslands(x) -> PartOfAntarctica(x))", "all x.(SouthShetlandIslands(x) -> PartOfAntarctica(x))", "All x.(SouthShetlandIsland(x) -> PartOfAntarctica(x))", "All x.(SouthShetlandIslands(x) -> PartOfAntarctica(x))"]}
{"id": "folio_validation_336", "nl": "If A is located in B and B is located in C, then A is located in C.", "fol": "all x y z.((LocationOf(x,y) & LocationOf(y,z)) -> LocationOf(x,z))", "prediction": ["all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x y.((LocatedIn(x,y) & B(y) & LocatedIn(x,y)) -> LocatedIn(x,y))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x y.((LocatedIn(x,y) & BLocatedIn(x,y)) -> LocatedIn(x,y))", "all x.((LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x))", "(all x y.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C)))", "all x y z.((A(x) & B(y) & C(z) & LocatedIn(x,y,z)) -> LocatedIn(x,y,z))", "(all x.((LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x)))", "all x y.((A(x) & B(y) & LocatedIn(x,y)) -> LocatedIn(x,y))", "(all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "(all x.(LocatedInB(x) -> LocatedInC(x)))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "(all x.((LocatedInB(x) & locatedInC(x)) -> LocatedInC(x)))", "all x.((AreLocatedIn(x,B) & ARelocatedIn(x,C)) -> RelocatedIn(x,C))", "exists x.(LocatedIn(x,B) & LocatedIn(x,C))", "all x y.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))"]}
{"id": "folio_validation_337", "nl": "Barutin is named after all islands in Antarctica.", "fol": "all x.(LocationOf(x,Antarctica) -> NamedAfterSettlement(Barutin,x))", "prediction": ["all x.(Barutin(x) -> NamedAfterAllIslands(x))", "(all x.(Barutin(x) -> Island(x)))", "all x y.((Barutin(x) & Island(y)) -> NamedAfter(x,y))", "Barutin is named after all x.(Island(x) & InAntarctica(x))", "all x.(Barutin(x) -> NamedAfterAllIslandsInAntarctica(x))", "all x.(Barutin(x) -> NamedAfterIslandsInAntarctica(x))", "(all x.(Barutin(x) -> Island(x)))", "Barutin is named after all x.(Island(x) & InAntarctica(x))", "All x y.((Barutin(x) & Island(y)) -> NamedAfter(x,y))", "all x.(Barutin(x) -> exists y.(Island(y) & InAntarctica(x,y))))", "(all x.(Barutin(x) -> InAntarctica(x)))", "all x.(Barutin(x) -> NamedAfterAllIslands(x))", "all x.(Barutin(x) -> NamedAfterAllIslands(x))", "all x.(Barutin(x) -> (Island(x) & InAntarctica(x)))", "all x.(Bautin(x) -> (NamedAfterAllIslands(x,Antarctica) & LocatedIn(x,Antarctica)))", "All x y.((Barutin(x) & Island(y)) -> NamedAfter(x,y))"]}
{"id": "folio_validation_338", "nl": "There is at least one cove in Antarctica named after a place in Bulgaria.", "fol": "exists x y.(BarutinCove(x) & NamedAfterSettlement(x,y) & LocationOf(y,Bulgaria))", "prediction": ["exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlace(x))", "exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlace(x,Bulgaria))", "exists x y.(Cove(x) & Antarctica(y) & NamedAfterPlace(x,y))", "all x y.((Cove(x) & Antarctica(y) & Place(z)) -> NamedAfter(x,z))", "exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlaceInBulgaria(x))", "all x y.((Cove(x) & Antarctica(y) & NamedAfterPlace(x,y)) -> NamedAfterPlace(x,y))", "all x y z.((Cove(x) & Antarctica(y) & Place(z) & NamedAfter(x,z)) -> NamedAfter(x,y,z))", "exists x.(AntarcticCove(x) & NamedAfterPlace(x,Bulgaria))", "exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlace(x,Bulgaria))", "exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlaceInBulgaria(x))", "exists x.(Cove(x) & NamedAfterPlace(x,Bulgaria))", "exists x.(CoveInAntarctica(x) & NamedAfterPlaceInBulgaria(x))", "all x y.((Cove(x) & Antarctica(y)) -> NamedAfterPlace(x,y))", "exists x.(Cole(x) & NamedAfterPlace(x,Bulgaria))", "exists x.(ColeInAntarctica(x) & NamedAfterPlaceInBulgaria(x))", "all x y.((Cove(x) & Antarctica(y) & Place(y)) -> NamedAfter(x,y))"]}
{"id": "folio_validation_339", "nl": "Barutin is not located in Antarctica.", "fol": "-LocationOf(Barutin,Antarctica)", "prediction": ["(-LocatedInAntarctica(Barutin))", "all x.(Barutin(x) -> -LocatedInAntarctica(x))", "Barutin is not located in Antarctica.", "-(Barutin(Barutin) & LocatedInAntarctica(Barutin))", "Barutin -LocatedInAntarctica(Barutin)", "-exists x.(Barutin(x) & -LocatedInAntarctica(x))", "(Location(Barutin) & -Location(Barutin,Antarctica))", "(-LocatedInAntarctica(Barutin))", "-(Barutin(b) & LocatedInAntarctica(b))", "-LocatedInAntarctica(Barutin)", "all x.(Barutin(x) -> -LocatedInAntarctica(x))", "Barutin is not located in Antarctica.", "Barutin -LocatedInAntarctica(Barutin)", "(-Location(Barutin,Antarctica))", "(-LocatedInAntarctica(Barutin))", "Barutin is not located in Antarctica."]}
{"id": "folio_validation_340", "nl": "Some affection is love.", "fol": "exists x.(Affection(x) & IsLove(x))", "prediction": ["exists x.(Affection(x) & Love(x))", "exists x.(Affection(x) & Love(x))", "exists x.(Affection(x) & Love(x))", "all x y.((Affection(x) & Love(y)) -> Love(x))", "exists x.(Affection(x) & Love(x))", "exists x.(Affection(x) & Love(x))", "all x y.((Affection(x) & Love(y)) -> Love(x))", "exists x y.(Affection(x) & Love(y))", "exists x.(Affliction(x) & Love(x))", "exists x.(Affection(x) & Love(x))", "exists x.(Affliction(x) & Love(x))", "exists x.(Affection(x) & Love(x))", "exists x.(Affection(x) & Love(x))", "exists x.(Affection(x) & Love(x))", "exists x.(Affection(x) & Love(x))", "exists x.(Affection(x) & Love(x))"]}
{"id": "folio_validation_341", "nl": "Some love is positive.", "fol": "exists x.(IsLove(x) & IsPositive(x))", "prediction": ["exists x.(Love(x) & Positive(x))", "exists x.(Love(x) & Positive(x))", "exists x.(Love(x) & Positive(x))", "exists x.(Love(x) & Positive(x))", "exists x.(Living(x) & Positive(x))", "exists x.(Love(x) & Positive(x))", "exists x.(Love(x) & Positive(x))", "exists x.(Living(x) & Positive(x))", "exists x.(Love(x) & Positive(x))", "exists x.(Living(x) & Positive(x))", "exists x y.(Love(x) & Positive(y))", "exists x.(Love(x) & Positive(x))", "exists x.(Love(x) & Positive(x))", "exists x.(Living(x) & Positive(x))", "exists x.(Love(x) & Positive(x))", "exists x.(Love(x) & Positive(x))"]}
{"id": "folio_validation_342", "nl": "Some affection is positive.", "fol": "exists x.(Affection(x) & IsPositive(x))", "prediction": ["exists x.(Affection(x) & Positive(x))", "exists x.(Affection(x) & Positive(x))", "exists x.(Affection(x) & Positive(x))", "exists x.(Affection(x) & Positive(x))", "exists x.(Affection(x) & Positive(x))", "exists x.(Affection(x) & Positive(x))", "exists x.(Affliction(x) & Positive(x))", "exists x y.(Affection(x) & Positive(y))", "exists x.(Affection(x) & Positive(x))", "exists x.(Animation(x) & Positive(x))", "exists x.(Affliction(x) & Positive(x))", "exists x.(Affection(x) & Positive(x))", "exists x.(Affection(x) & Positive(x))", "exists x.(Affection(x) & Positive(x))", "exists x.(Affection(x) & Positive(x))", "exists x.(Affection(x) & Positive(x))"]}
{"id": "folio_validation_343", "nl": "If something can transport multiple passengers, then they are not empty.", "fol": "all x.(CanTransportMultiplePassengers(x) -> -IsEmpty(x))", "prediction": ["all x.((TransportsMultiplePassengers(x) & -Empty(x)) -> CanTransportMultiplePassengers(x))", "all x.((TransportsMultiplePassengers(x)) -> -Empty(x))", "all x.(TransportsMultiplePassengers(x) -> -Empty(x))", "all x y.((TransportsMultiplePassengers(x) & CanTransportMultiplePassengers(x)) -> -Empty(y))", "all x.((TransportsMultiplePassengers(x) & -Empty(x)) -> CanTransportMultiplePassengers(x))", "all x y.((TransportsMultiplePassengers(x) & -Empty(y)) -> CanTransportMultiplePassengers(x,y))", "all x.(TransportsMultiplePassengers(x) -> -Empty(x))", "exists x.(TransportMultiplePassengers(x) & -Empty(x))", "all x.((TransportsMultiplePassengers(x)) -> -Empty(x))", "all x y.((TransportsMultiplePassengers(x) & CanTransportMultiplePassengers(x)) -> -Empty(y))", "all x.((TransportsMultiplePassengers(x) & -Empty(x)) -> TransportsMultiplePassengers(x))", "all x y.((TransportsMultiplePassengers(x) & TransportsMultiplePassengers(x)) -> -Empty(y))", "all x.(TransportsMultiplePassengers(x) -> -Empty(x))", "exists x.(TransportMultiplePassengers(x) & -Empty(x))", "all x.((TransportsMultiplePassengers(x)) -> -Empty(x))", "exists x.(TransportsMultiplePassengers(x) & -Empty(x))"]}
{"id": "folio_validation_344", "nl": "All airlines can transport multiple passengers.", "fol": "all x.(IsAirline(x) -> CanTransportMultiplePassengers(x))", "prediction": ["all x.(Airline(x) -> TransportsMultiplePassengers(x))", "all x.(Airline(x) -> CanTransportMultiplePassengers(x))", "all x y.((Airline(x) & Passenger(y)) -> TransportsMultiplePassengers(x,y))", "all x.(Airline(x) -> TransportsMultiplePassengers(x))", "all x y.((Airline(x) & Passenger(y)) -> CanTransport(x,y))", "all x.(Airline(x) -> CanTransportMultiplePassengers(x))", "(all x.(Airline(x) -> TransportsMultiplePassengers(x)))", "all x y.(Airline(x) -> TransportsMultiplePassengers(x,y))", "all x.(Airline(x) -> TransportsMultiplePassengers(x))", "all x y.((Airline(x) & Passenger(y)) -> TransportsMultiple(x,y))", "all x.(Airline(x) -> TransportMultiplePassengers(x))", "all x.(Airline(x) -> CanTransportMultiplePassengers(x))", "all x.(Airline(x) -> CanTransportMultiplePassengers(x))", "exists x.(Airline(x) & MultiplePassengers(x))", "all x.(Airline(x) -> TransportsMultiplePassengers(x))", "exists x.(Airline(x) & MultiplePassengers(x))"]}
{"id": "folio_validation_345", "nl": "All planes are empty.", "fol": "all x.(IsPlane(x) -> IsEmpty(x))", "prediction": ["all x.(Plane(x) -> Empty(x))", "(AllPilotsEmpty(plane) -> -Empty(plane))", "all x.(Plane(x) -> Empty(x))", "(Empty(plane) & -Empty(plane))", "(AllOwn(plane) -> Empty(plane))", "all x.(Panel(x) -> Empty(x))", "all x.(Plane(x) -> Empty(x))", "all x y.((Plane(x) & Plane(y)) -> Empty(x))", "all x.(Pilot(x) -> Empty(x))", "all x.(Plane(x) -> Empty(x))", "all x.(Panel(x) -> Empty(x))", "all x.(Plane(x) -> Empty(x))", "all x.(Plane(x) -> Empty(x))", "all x.(Plane(x) -> Empty(x))", "all x.(Plane(x) -> Empty(x))", "All x.(Plane(x) -> Blank(x))"]}
{"id": "folio_validation_346", "nl": "All Boeing 707s are planes.", "fol": "all x.(IsBoeing707(x) -> IsPlane(x))", "prediction": ["all x.(Boeing707(x) -> Plane(x))", "(all x.(Boeing707(x) -> Plane(x))", "all x.(Boeing707(x) -> Plane(x))", "all x.(Boeing(x) -> Plane(x))", "all x.(BoeingBoaton707(x) -> Plane(x))", "(all x.(Boeing707(x) -> Plane(x))", "all x y.((Boeing(x) & Boeing707(y)) -> Plane(x))", "(All x.(Boeing(x) & Boeing707(x)) -> Plane(x))", "all x.(Boeing707(x) -> Plane(x))", "all x.(Boeing(x) -> Airplane(x))", "all x.(BoeingBoaton707(x) -> Plane(x))", "all x.(Boeing707(x) -> Plane(x))", "all x.(Boeing(x) -> Plane(x))", "all x.(Buickaircraft(x) -> Plane(x))", "All x.(Boeing737(x) -> Plane(x))", "all x.(Boeing707(x) -> Plane(x))"]}
{"id": "folio_validation_347", "nl": "If Greyhound is not an airline, then there are no Greyhound planes.", "fol": "(-IsAirline(GreyhoundBus) -> -(IsAirline(GreyhoundBus) | IsPlane(GreyhoundBus)))", "prediction": ["all x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlane(x))", "all x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlanes(x))", "(-Airline(Greyhound) -> -GreyhoundPlane(greyhound))", "all x.((Airline(x) & Greyhound(x)) -> -GreyhoundPlane(x))", "-Airline(Greyhound)", "all x y.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlane(y))", "all x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlane(x))", "(-Airline(Greyhound) -> -GreyhoundPlane(Greyhound))", "all x.((Airline(x) & Greyhound(x)) -> -GreyhoundPlane(x))", "all x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlanes(x))", "All x.(-Airline(x) -> NoGreyhoundPlanes(x))", "-Airline(Greyhound)", "all x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlane(x))", "exists x.(Airline(x) & -Greyhound(x))", "all x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlanes(x))", "all x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlane(x))"]}
{"id": "folio_validation_348", "nl": "Greyhound is an airline.", "fol": "IsAirline(GreyhoundBus)", "prediction": ["all x.(Greyhound(x) -> Airline(x))", "(Airline(Greyhound) & Airline(Greyhound))", "(Airline(Greyhound) & -Airline(Greyhound))", "(Airline(greyhound) & Airline(greyhound))", "all x.(Greyhound(x) -> Airlines(x))", "Greyhound (Airline(Greyhound) & -Airline(Greyhound))", "Greyhound (Airline(greyhound))", "all x.(Greyhound(x) -> Airline(x))", "Greyhound Airlines(x)", "(Airline(Greyhound) & Airline(Greyhound))", "(Airline(greyhound) & -Airline(greyhound))", "all x.(Greyhound(x) -> Airlines(x))", "All x.(Grinhound(x) -> Airline(x))", "all x.(Grayhound(x) -> Airlines(x))", "All x.(Greyhound(x) -> Airline(x))", "all x.(Greyhound(x) -> Airlines(x))"]}
{"id": "folio_validation_349", "nl": "A Greyhound is a Boeing 707.", "fol": "IsBoeing707(GreyhoundBus)", "prediction": ["all x.(Greyhound(x) -> Boeing707.", "all x.(Greyhound(x) -> Boeing707(x))", "(Boeing707.(Greyhound) & Boeing707.(Greyhound)))", "all x y.((Greyhound(x) & Boeing707(y)) -> Boeing707.", "all x.(Grinhound(x) -> Boeing707.", "all x.(Greyhound(x) -> Boeing707(x))", "all x.(Greyhound(x) -> Boeing707.", "all x.(Grayhound(x) -> Boeing707(x))", "All x y.((Greyhound(x) & Boeing707(y)) -> Boeing707.", "(Boeing707(greyhound) & Boeing707.)", "all x.(Greyhound(x) -> Boeing707(x))", "all x.(Grinhound(x) -> Boeing707.", "all x.(Grayhound(x) -> Boeing707(x))", "all x.(Greyhound(x) -> Boeing707.", "exists x.(Grinhound(x) & Boeing707(x))", "all x.(Greyhound(x) -> Boeing707(x))"]}
{"id": "folio_validation_350", "nl": "A Greyhound is not a Boeing 707.", "fol": "-IsBoeing707(GreyhoundBus)", "prediction": ["all x.(Greyhound(x) -> -Boeing707.(x))", "all x.(Greyhound(x) -> -Boeing707(x))", "(-Boeing707(Greyhound))", "(-BoeingBoarding707(Greyhound))", "all x y.((Greyhound(x) & Boeing707(y)) -> -Boeing707.(x,y))", "all x.(Grayhound(x) -> -Boeing707.(x))", "all x.(Greyhound(x) -> -BoeingBoeing707.(x))", "all x.(Grinhound(x) -> -BoeingBoeing707.(x))", "(-Boeing707.) & Greyhound(Greyhound)", "all x.(Greyhound(x) -> -Boeing707.(x))", "all x.(Greyhound(x) -> (-BoeingBoeing707(x)))", "all x.(Grayhound(x) -> -Boeing707(x))", "all x.(Greyhound(x) -> -Boeing707.(x))", "all x.(Grinhound(x) -> -BoeingBoeing707.(x))", "exists x.(Grinhound(x) & -Boeing707.(Greyhound(x))", "all x.(Greyhound(x) -> -Boeing737(x))"]}
{"id": "folio_validation_351", "nl": "All mammals are animals.", "fol": "all x.(IsMammal(x) -> IsAnimal(x))", "prediction": ["all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "(all x.(Mammal(x) -> Animal(x)))", "all x.(Mammal(x) -> Animal(x))", "(all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "exists x.(Mammal(x) & Animal(x))"]}
{"id": "folio_validation_352", "nl": "All monkeys are mammals. ", "fol": "all x.(IsMonkey(x) -> IsMammal(x))", "prediction": ["all x.(Monkey(x) -> Mammal(x))", "all x.(Mammal(x) -> Monkey(x))", "all x.(Monkey(x) -> Mammal(x))", "(Mammal(mouse) & All(mouse) -> Monkey(m))", "all x y.((Monkey(x) & Mammal(y)) -> Mammal(x))", "all x.(Mammal(x) -> Monkey(x))", "(Mammal(mouse) & All(mouse) -> Monkey(mouse))", "(all x.(Monkey(x) -> Mammal(x))", "all x.(Monkey(x) -> Mammal(x))", "all x.(Mammal(x) -> Monkey(x))", "all x.(Monkey(x) -> Mammal(x))", "all x.(Mammal(x) -> Monkey(x))", "all x.(Monkey(x) -> Mammal(x))", "all x.(Mammal(x) -> Monkey(x))", "all x.(Mammal(x) -> Monkey(x))", "all x.(Monkey(x) -> Mammal(x))"]}
{"id": "folio_validation_353", "nl": "An animal is either a monkey or a bird.", "fol": "all x.(IsMonkey(x) | IsBird(x))", "prediction": ["all x.(Animal(x) -> (Monkey(x) | Bird(x)))", "all x.(Animal(x) -> (Monkey(x) | Bird(x)))", "all x.(Animal(x) -> (Mammal(x) | Bird(x)))", "all x.(Animal(x) -> (Monkey(x) | Bird(x)))", "all x.(Animal(x) -> (Mammal(x) | Bird(x)))", "all x y.(Animal(x) -> (Monkey(x) | Bird(x)))", "all x y.(Animal(x) -> (Monkey(y) | Bird(y)))", "all x.(Animal(x) -> (Monkey(x) | Bird(x)))", "all x.(Animal(x) -> (Mammal(x) | Bird(x)))", "all x.(Animal(x) -> (Monkey(x) | Bird(x)))", "all x.(Animal(x) -> (Monkey(x) | Bird(x)))", "exists x.(Animal(x) & Monkey(x) | Bird(x))", "exists x.(Animal(x) & Monkey(x) & Bird(x))", "exists x.(Animal(x) & (Monkey(x) | Bird(x)))", "all x.(Animal(x) -> (Mammal(x) | Bird(x)))", "exists x.(Animal(x) & (Monkey(x) | Bird(x)))"]}
{"id": "folio_validation_354", "nl": "All birds fly.", "fol": "all x.(IsBird(x) -> CanFly(x))", "prediction": ["all x.(Bird(x) -> Fly(x))", "all x.(Bird(x) -> Flies(x))", "all x.(Bird(x) -> Fly(x))", "all x y.((Bird(x) & Bird(y)) -> Flies(x,y))", "(all x.(Bird(x) -> Fly(x))", "all x.(Bird(x) -> Flies(x))", "(all x.(Bird(x) -> Flies(x)))", "(all x.(Bird(x) -> Fly(x))", "all x.(Bird(x) -> Fly(x))", "all x.(Bird(x) -> Flies(x))", "all x.(Bird(x) -> Fly(x))", "all x.(Bird(x) -> Flies(x))", "exists x.(Bird(x) & Floats(x))", "all x.(Bird(x) -> Fly(x))", "all x.(Bird(x) -> Flies(x))", "all x.(Bird(x) -> Fly(x))"]}
{"id": "folio_validation_355", "nl": "All animals breathe.", "fol": "all x.(IsAnimal(x) -> CanBreathe(x))", "prediction": ["all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathes(x))", "(all x.(Animal(x) -> Breathes(x)))", "all x y.((Animal(x) & Breathes(x)) -> Breathes(x))", "all x.(Animal(x) -> Breathes(x))", "(all x.(Animal(x) -> Breathes(x)))", "all x.(Animal(x) -> Breathe(x))", "all x.(Animal(x) -> Breathes(x))", "all x y.(Breathes(x) -> Animal(y))", "all x.(Animal(x) -> Breathe(x))", "all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathe(x))", "all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathe(x))", "all x.(Animal(x) -> Breathes(x))", "exists x.(Animal(x) & Breathe(x))"]}
{"id": "folio_validation_356", "nl": "If something can fly, then it has wings.", "fol": "all x.(CanFly(x) -> HasWings(x))", "prediction": ["all x.((CanFly(x) & HasWings(x)) -> CanFly(x))", "all x.(CanFly(x) -> HasWings(x))", "all x.((CanFly(x) & HasWings(x)) -> CanFly(x))", "all x.(CanFly(x) -> HasWings(x))", "all x y.((CanFly(x) & CanFly(y)) -> HasWings(x))", "all x.((CanFly(x) & HasWings(x)) -> CanFly(x))", "all x.(CanFly(x) -> HasWings(x))", "all x y.((CanFly(x) & Wings(y)) -> Has(x,y))", "all x.((CanFly(x) & HasWings(x)) -> CanFly(x))", "exists x.(Fly(x) & HasWings(x))", "all x.(CanFly(x) -> HasWings(x))", "all x y.((CanFly(x) & Wings(y)) -> Has(x,y))", "all x.((CanFly(x) & HasWings(x)) -> CanFly(x))", "all x.(CanFly(x) -> HasWings(x))", "exists x.(CanFly(x) & HasWings(x))", "exists x.(CanFly(x) & HasWings(x))"]}
{"id": "folio_validation_357", "nl": "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.", "fol": "((-CanFly(Rock) & -IsBird(Rock)) -> (-CanFly(Rock) & -CanBreathe(Rock)))", "prediction": ["all x.((Rock(x) & -Fly(x) & -Bird(x)) -> (-Flies(x) & -Breathes(x)))", "all x.((Rock(x) & -Fly(x) & -Bird(x)) -> -Flies(x) & -Breathes(x))", "(-Fly(Rock) & -Bird(Rock))", "all x.((Rock(x) & -(Fly(x) | Bird(x))) -> -(Flies(x) | Breathes(x)))", "all x.((Rock(x) & -Fly(x) & -Bird(x)) -> (-Flies(x) & -Breathes(x)))", "all x y.((Rock(x) & -Fly(x) & -Bird(x)) -> -Flies(x) & -Breathes(x))", "(-Fly(Rock) & -Bird(Rock))", "(-Fly(Rock) | Bird(Rock)))", "all x.((Rock(x) & -Fly(x) | Bird(x)) -> (-Flies(x) & -Breathes(x)))", "all x.((Rock(x) & -(Fly(x) | Bird(x))) -> (-Flies(x) | Breathes(x)))", "all x.((Rock(x) & (NeitherFly(x) | -Bird(x))) -> (-Flies(x) | Breathes(x)))", "all x.((Rock(x) & -Fly(x) & -Bird(x)) -> -Flies(x) & -Breathes(x))", "all x.((Rock(x) & -Fly(x) & -Bird(x)) -> (-Flies(x) | Breathes(x)))", "exists x.(Rock(x) & -(Fly(x) | Bird(x)))", "all x.((Rock(x) & -(Fly(x) | Bird(x))) -> -(Flies(x) | Breathes(x)))", "all x.((Rock(x) & -Fly(x) & -Bird(x)) -> -Flies(x) & -Breathes(x))"]}
{"id": "folio_validation_358", "nl": "Rock is a monkey.", "fol": "IsMonkey(Rock)", "prediction": ["all x.(Rock(x) -> Monkey(x))", "Rock is monkey.", "Rock is monkey.", "(Munkey(Rock))", "all x.(Rock(x) -> Monkey(x))", "(Monkey(Rock) & Monkey(Rock))", "Rock is monkey.", "(Mammal(Rock))", "Rock is monkey(Rock)", "(Munkey(Rock) & Monkey(Rock))", "Rock is a monkey.", "All x.(Rock(x) -> Monkey(x))", "Rock is monkey(Rock)", "all x.(Rock(x) -> Monkey(x))", "All x.(Rock(x) -> Monkey(x))", "all x.(Rock(x) -> Monkey(x))"]}
{"id": "folio_validation_359", "nl": "Rock has wings.", "fol": "HasWings(Rock)", "prediction": ["all x.(Rock(x) -> HasWings(x))", "(HasWings(Rock))", "Rock hasWings(Rock)", "Rock exists x.(Rock(x) & HasWings(x))", "all x.(Rock(x) -> HasWings(x))", "-HasWings(Rock)", "Rock hasWings(Rock)", "(HasWings(Rock))", "all x.(Rock(x) -> HasWings(x))", "Rock exists x.(Rock(x) & HasWings(x))", "(HasWings(Rock))", "Rock hasWings.", "all x.(Rock(x) -> HasWings(x))", "exists x.(Rock(x) & Wings(x))", "All x.(Rock(x) -> HasWings(x))", "all x.(Rock(x) -> HasWings(x))"]}
{"id": "folio_validation_360", "nl": "Rock does not have wings.", "fol": "-HasWings(Rock)", "prediction": ["all x.(Rock(x) -> -HasWings(x))", "(-HasWings(Rock))", "all x.(Rock(x) -> -HasWings(x))", "-HasWings(Rock)", "Rock does not have Wings.", "Rock does not haveWings(Rock)", "(exists x.(Rock(x) & -HasWings(x)))", "(-HasWings(Rock))", "all x.(Rock(x) -> -HasWings(x))", "Rock has no Wings.", "-HasWings(Rock)", "all x.(Rock(x) -> -HasWings(x))", "(-HasWings(Rock))", "-HasWings(Rock)", "(-HasWings(Rock))", "-HasWings(Rock)"]}
{"id": "folio_validation_361", "nl": "All people who have a wedding are people who have at least one child.", "fol": "all x.(HasWedding(x) -> HasChild(x))", "prediction": ["all x.((Person(x) & HasWedding(x)) -> HasAtLeastOneChild(x))", "all x.((Person(x) & HasWedding(x)) -> exists y.(Child(y) & HasChild(x,y))))", "all x.(HasWedding(x) -> exists y.(Child(y) & HasChild(x,y)))", "(all x.((Person(x) & HasWedding(x)) -> HasChild(x)))", "all x.(Wedding(x) -> exists y.(Child(y) & HasChild(x,y)))", "all x.((Person(x) & HasWedding(x)) -> HasChild(x))", "all x.((Person(x) & Wedding(x)) -> exists y.(Child(y) & HasChild(x,y))))", "all x y.((Person(x) & Wedding(y) & Has(x,y)) -> HasChild(x,y))", "all x.((Person(x) & HasWedding(x)) -> exists y.(Child(y) & HasChild(x,y))))", "all x.(HasWedding(x) -> HasAtLeastOneChild(x))", "all x.((People(x) & HasWedding(x)) -> HasAtLeastOneChild(x))", "all x.((Person(x) & HasWedding(x)) -> HasAtLeastOneChild(x))", "all x.(Wedding(x) -> exists y.(Child(y) & HasChild(x,y)))", "all x y.((Person(x) & Wedding(y) & Has(x,y)) -> Has(x,y))", "all x.(HasWedding(x) -> exists y.(Child(y) & HasChild(x,y)))", "all x y.((Person(x) & Wedding(y) & HasChild(x,y)) -> HasChild(x,y))"]}
{"id": "folio_validation_362", "nl": "All people who travel to Paris for their honeymoon are people who have a wedding.", "fol": "all x.(TravelToParis(x) -> HasWedding(x))", "prediction": ["all x.((Person(x) & TravelsToParis(x)) -> HasWedding(x))", "all x y.((Person(x) & TravelsToParis(x) & Honeymoon(y)) -> HasWedding(x))", "all x.((Person(x) & TravelsToParis(x)) -> HasWedding(x))", "all x.((Person(x) & TravelsToParisForHoneymoon(x)) -> HasWedding(x))", "all x.(TravelsToParis(x) -> HasWedding(x))", "(all x.(TravelsToParis(x) -> HasWedding(x)))", "all x.(TravelsToParisForHoneymoon(x) -> HasWedding(x))", "all x.((Person(x) & TravelsToParis(x) & Honeymoon(x)) -> HasWedding(x))", "all x y.((Person(x) & TravelsToParis(x,y) & Honeymoon(y)) -> HasWedding(x))", "all x y.((Person(x) & TravelsToParis(x) & Honeymoon(y)) -> HasWedding(x))", "(all x.(TravelsToParis(x) -> HasWedding(x)))", "all x.((Person(x) & TravelsToParisForHoneymoon(x)) -> HasWedding(x))", "all x.(TravelToParisForHoneymoon(x) -> HasWedding(x))", "all x.((Person(x) & TravelsToParis(x) & Honeymoon(x)) -> HasWedding(x))", "all x.(TravelsToParis(x) -> HasWedding(x))", "all x.((Person(x) & TravelsToParisForHoneymoon(x)) -> HasWedding(x))"]}
{"id": "folio_validation_363", "nl": "All weddings that occur in July belong to people who travel to Paris for their honeymoon.", "fol": "all x.(WeddingsInJuly(x) -> TravelToParis(x))", "prediction": ["all x.((Wedding(x) & OccursInJuly(x)) -> TravelsToParisForHoneymoon(x))", "all x y.((Wedding(x) & OccursInJuly(x,y)) -> BelongsToPerson(x,y))", "all x.((Wedding(x) & OccursInJuly(x)) -> TravelsToParis(x))", "all x y.((Wedding(x) & July(y) & OccursIn(x,y)) -> TravelsToParis(x,y))", "(all x.((Wedding(x) & OccursInJuly(x,July)) -> TravelsToParis(x))", "all x y.((Wedding(x) & OccursInJuly(x) & Person(y) & TravelsToParis(y)) -> BelongsTo(y,x))", "all x y z.((Wedding(x) & July(y) & Person(z) & TravelsToParis(z)) -> BelongsTo(x,y,z))", "all x.((Wedding(x) & OccursInJuly(x)) -> BelongsToPerson(x))", "all x.((Wedding(x) & OccursInJuly(x)) -> exists y.(Person(y) & TravelsToParis(y)))", "all x.((Wedding(x) & OccursInJuly(x)) -> TravelToParis(x))", "all x y.((Wedding(x) & July(y)) -> BelongsTo(x,y))", "all x y.((Wedding(x) & OccursInJuly(x,y)) -> TravelsToParis(x))", "all x.((Wedding(x) & OccursInJuly(x)) -> belongsToPerson(x))", "all x.((Wedding(x) & OccursInJuly(x)) -> (BelongsToParis(x) & TravelsToParis(x)))", "all x.((Wedding(x) & OccursInJuly(x)) -> BelongsToPeople(x))", "all x.((Wedding(x) & OccursInJuly(x)) -> TravelsToParisForHoneymoon(x))"]}
{"id": "folio_validation_364", "nl": "Some weddings in July are well-attended.", "fol": "exists x.(WeddingsInJuly(x) & IsWellAttended(x))", "prediction": ["exists x.(Wedding(x) & InJuly(x) & WellAttended(x))", "exists x.(Wedding(x) & InJuly(x) & WellAttended(x))", "exists x.(Wedding(x) & InJuly(x) & WellAttended(x))", "exists x.(Wedding(x,July) & WellAttended(x))", "exists x y.(Wedding(x) & July(y) & WellAttended(x,y))", "exists x.(JulyWedding(x) & WellAttended(x))", "exists x.(Wedding(x) & InJuly(x) & WellAttended(x))", "all x y.((Wedding(x) & July(y)) -> WellAttended(x,y))", "exists x.(Wedding(x,July) & WellAttended(x))", "exists x.(Wedding(x) & InJuly(x) & WellAttended(x))", "exists x.(JulyWedding(x) & WellAttended(x))", "all x y.((Wedding(x) & July(y)) -> WellAttended(x,y))", "exists x.(WeddingInJuly(x) & WellAttended(x))", "exists x.(Wedding(x) & InJuly(x))", "exists x.(JulyWedding(x) & WellAttended(x))", "exists x.(Wedding(x) & InJuly(x) & WellAttended(x))"]}
{"id": "folio_validation_365", "nl": "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.", "fol": "(HasChild(John) -> -(TravelToParis(John) & HasWedding(John)))", "prediction": ["all x.((John(x) & HasAtLeastOneChild(x)) -> (-TravelsToParis(x) & -HasWedding(x)))", "all x.((John(x) & Child(x)) -> (-TravelsToParis(x) & -Wedding(x)))", "all x.((HasChild(x) & -TravelsToParis(x) & -HasWedding(x)) -> -HasWedding(x))", "all x.((Child(x) & John(x)) -> (-TravelsToParis(x) & -HasWedding(x)))", "(HasAtLeastOneChild(John) -> (-TravelToParis(John) & -HasWedding(John)))", "(exists x.(Child(x) & John(x)) & -TravelsToParis(x) & -HasWedding(x))", "all x.((John(x) & HasAtLeastOneChild(x)) -> (-TravelToParis(x) & -HasWedding(x)))", "((John(John) & Child(John)) & -(TravelsToParis(John) & Wedding(John))))", "all x.((HasAtLeastOneChild(x) & John(x)) -> (-TravelsToParis(x) & -HasWedding(x)))", "all x y.((John(x) & Child(y)) -> (-TravelToParis(x,y) & -Wedding(x,y)))", "((John(John) & Child(John)) -> (-TravelsToParis(John) & -Wedding(John)))", "all x.((Child(x) & HasChild(x)) -> (-TravelsToParis(x) & -HasWedding(x)))", "(HasAtLeastOneChild(John) -> (-TravelsToParis(John) & -HasWedding(John)))", "all x.((John(x) & Child(x)) -> (-TravelToParis(x) & -Wedding(x)))", "all x.(HasAtLeastOneChild(x) -> (-TravelsToParis(x) & -HasWedding(x)))", "all x y.((John(x) & Child(y) & TravelsToParis(x,y)) -> -(HasWedding(x,y) | HasWedding(x,y)))"]}
{"id": "folio_validation_366", "nl": "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. ", "fol": "(((IsWellAttended(John) -> WeddingsInJuly(John)) & -TravelToParis(John)) | (-(IsWellAttended(John) -> WeddingsInJuly(John)) & TravelToParis(John)))", "prediction": ["all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & -WeddingInJuly(x)))))", "all x.((Wedding(x) & WellAttended(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & -WeddingInJuly(x)))))", "(all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & -WeddingInJuly(x)))))", "all x y.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & -WeddingInJuly(x)))))", "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & -WeddingInJuly(x)))))", "all x.(WellAttendedWedding(x) -> (WeddingInJuly(x) | (WeddingInJuly(x) & -WeddingInJuly(x))))", "(WellAttendedWedding(John,June) | (-WellAttendedWedding(John,June))))", "((WellAttendedWedding(John) & Wedding(John)) | (-WellAttendedWedding(John) & Wedding(John))))", "(all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | WeddingInJuly(x) | WeddingInParis(x))))", "(all x.((Wedding(x) & WellAttended(x)) -> WeddingInJuly(x)) | (-Wedding(x) & TravelsToParis(x))))", "(all x.((John(x) & WellAttendedWedding(x)) -> WeddingInJuly(x)) & ((John(x) & -WellAttendedWedding(x)) -> TravelsToParis(x)))", "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & -WeddingInJuly(x)))))", "all x.(WellAttendedWedding(x) -> (JohnHasWeddingInJuly(x) | (JohnHasWeddingInJuly(x) & TravelsToParis(x))))", "all x y.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & -WeddingInJuly(x)))))", "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | TravelsToParis(x)))", "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | WeddingInParis(x)))"]}
{"id": "folio_validation_367", "nl": "John has a wedding that is well-attended.", "fol": "IsWellAttended(John)", "prediction": ["all x.((John(x) & Wedding(x)) -> WellAttended(x))", "all x y.((John(x) & Wedding(y)) -> WellAttended(y))", "John has a well-attended wedding.", "all x.(John(x) -> WellAttendedWedding(x))", "all x.((John(x) & WellAttendedWedding(x)) -> HasWedding(x))", "(WellAttendedWedding(John))", "all x.((John(x) & Wedding(x)) -> WellAttended(x))", "John has a wellattended wedding.", "(WellAttendedWedding(John,Jon))", "exists x.(JohnWedding(x) & WellAttended(x))", "all x y.((Jon(x) & Wedding(y)) -> WellAttended(y))", "all x y.((John(x) & Wedding(y)) -> WellAttended(y,x))", "(WellAttendedWedding(John,John))", "all x.((John(x) & Wedding(x)) -> WellAttended(x))", "(WellAttendedWedding) -> John(John))", "(WellAttendedWedding(John))"]}
{"id": "folio_validation_368", "nl": "John does not have a wedding that is well-attended.", "fol": "-IsWellAttended(John)", "prediction": ["all x.((John(x) & Wedding(x)) -> -WellAttended(x))", "(-WellAttendedWedding(John))", "-(WellAttendedWedding(John))", "all x.((John(x) & -WellAttendedWedding(x)) -> -WellAttendedWedding(x))", "all x.(John(x) -> -WellAttendedWedding(x))", "John does not have a well-attended wedding.", "(-wellattendedWedding(John))", "all x.((John(x) & Wedding(x) & -WellAttended(x)) -> -WellAttended(x))", "((John(John) & Wedding(John,John)) -> -WellAttended(John,John))", "-(WellAttendedWedding(John))", "John has no wellattended wedding.", "(-WellAttendedWedding(John))", "all x.(John(x) -> -WellAttendedWedding(x))", ".(John(John) & Wedding(John,y))", "-(WellAttendedWedding(John))", "(-wellattendedWedding(John))"]}
{"id": "folio_validation_369", "nl": "John has at least one child.", "fol": "HasChild(John)", "prediction": ["all x.(John(x) -> exists y.(Child(y) & HasChild(x,y))))", "(HasChild(John) & HasChild(John))", "John has at least one child.", "(exists x.(John(x) & Child(x)))", "all x.(John(x) -> HasChild(x))", "-exists x.(Child(x) & John(x))", "John has at least one child.", "exists x.(John(x) & Child(x))", "(HasChild(John)", "all x.(John(x) -> exists y.(Child(y) & HasChild(x,y))))", "exists x.(Child(x) & John(x))", "(HasChild(John,Joe))", "-exists x.(Child(x) & John(x))", "John has at least one child.", "all x.(John(x) -> HasChild(x))", "John has at least one child."]}
{"id": "folio_validation_370", "nl": "John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.", "fol": "-(IsWellAttended(John) | WeddingsInJuly(John))", "prediction": ["(-(WellAttendedWedding(John) & -TravelToParis(John)) -> -WellAttendedWedding(John))", "((Wedding(John) & -WellAttended(John)) | TravelsToParis(John)))", "all x.((John(x) & -(WellAttendedWedding(x) | TravelsToParis(x))) -> -(WellAttendedWedding(x) & TravelsToParis(x)))", "((John(John) & -(WellAttendedWedding(John) | TravelsToParis(John))))", "all x.(John(x) -> (-(WellAttendedWedding(x) & -(TravelToParis(x) & Honeymoon(x)))))", "Neither wellattendedWedding(John) & -(TravelsToParis(John) & Honeymoon(John)))", "(-(WellAttendedWedding(John) & -TravelsToParis(John)) -> -WellAttendedWedding(John))", "John & -(WellAttendedWedding(John) & -(TravelsToParis(John) & Honeymoon(John)))", "Neither John (John) & (WellAttendedWedding(John) | TravelsToParis(John)))", "-(WellAttendedWedding(John) | TravelsToParis(John))", "all x.((John(x) & -(WellAttendedWedding(x) | TravelsToParis(x))) -> -(WellAttendedWedding(x) & WellAttendedWedding(x)))", "(-(WellAttendedWedding(John) & -(TravelsToParis(John) | TravelsToParis(John))))", "((Wedding(John) & WellAttended(John)) | TravelsToParis(John)))", "Neither is John wellattended weddings nor travels to Paris for honeymoons.", "-(WellAttendedWedding(John) | TravelsToParis(John))", "(-(WellAttendedWedding(John) | TravelsToParis(John)))"]}
{"id": "folio_validation_371", "nl": "[BG] Some mammals have teeth.", "fol": "exists x.(IsMammal(x) & HasTeeth(x,Teeth))", "prediction": ["exists x.(Mammal(x) & HasTeeth(x))", "[BG] - exists x.(Mammal(x) & HasTeeth(x)))", "(exists x.(Mammal(x) & HasTeeth(x)))", "exists x.(Mammal(x) & HasTeeth(x))", "(exists x.(Mammal(x) & HasTeeth(x)))", "[BG] - exists x.(Mammal(x) & HasTeeth(x)))", "all x y.((Mammal(x) & Mammal(y)) -> HasTeeth(x,y))", "exists x.(Mammal(x) & HasTeeth(x))", "(exists x.(Mammal(x) & HasTeeth(x)))", "exists x.(Mammal(x) & HasTeeth(x))", "exists x.(Mammal(x) & HasTeeth(x))", "exists x.(Mammal(x) & HasTeeth(x))", "exists x.(Mammal(x) & HasTeeth(x))", "exists x.(Mammal(x) & HasTeeth(x))", "exists x.(Mammal(x) & HasTeeth(x))", "exists x.(Mammal(x) & HasTeeth(x))"]}
{"id": "folio_validation_372", "nl": "Platypus have no teeth.", "fol": "-HasTeeth(Platypus,Teeth)", "prediction": ["all x.(Plasticus(x) -> -HasTeeth(x))", "all x.(Plutypus(x) -> -HasTeeth(x))", "(all x.(Plutypus(x) -> -HasTeeth(x)))", "all x.(Platypus(x) -> -HasTeeth(x))", "all x.(Platypus(x) -> -HasTeeth(x))", "all x y.((Plactus(x) & Teeth(y)) -> -Has(x,y))", "all x.(Plactus(x) -> NoTeeth(x))", "(all x.(Platypus(x) -> -HasTeeth(x)))", "all x.(Platypus(x) -> NoTeeth(x))", "(-Teeth(Plactus))", "all x y.((Platypus(x) & -Teeth(y)) -> -Has(x,y))", "-Teeth(platypus)", "all x.(Platypus(x) -> -HasTeeth(x))", "all x.(Plastic(x) -> -HasTeeth(x))", "all x.(Platypus(x) -> NoTeeth(x))", "All x.(Platypus(x) -> NoTeeth(x))"]}
{"id": "folio_validation_373", "nl": "Platypus are mammals. ", "fol": "IsMammal(Platypus)", "prediction": ["all x.(Pluto(x) -> Mammal(x))", "all x y.((Pluto(x) & Mammal(y)) -> Mammal(x))", "all x.(Plavix(x) -> Mammal(x))", "(Mammal(platypus) & Mammal(platypus))", "all x.(Plutypus(x) -> Mammal(x))", "all x.(Platypus(x) -> Mammal(x))", "all x.(Platypus(x) -> Mammal(x))", "all x y.((Platypus(x) & Mammal(y)) -> Mammal(x))", "(Mammal(platypus) & Mammal(platypus))", "All x.(Plutospheric(x) -> Mammal(x))", "all x.(Platypus(x) -> Mammal(x))", "all x.(Platypus(x) -> Mammal(x))", "(Mammal(platypus)", "all x.(Plasticus(x) -> Mammal(x))", "All x.(Platypus(x) -> Mammal(x))", "all x.(Platypus(x) -> Mammal(x))"]}
{"id": "folio_validation_374", "nl": "Humans have teeth.", "fol": "HasTeeth(Humans,Teeth)", "prediction": ["all x.(Human(x) -> HasTeeth(x))", "(HasTeeth(Human) & HasTeeth(Human))", "all x.(Human(x) -> HasTeeth(x))", "(HasTeeth(Human(Human))", "all x.(Human(x) -> HasTeeth(x))", "all x y.(Human(x) -> HasTeeth(x,y))", "(HasTeeth(human) & HasTeeth(human,human))", "all x.(Human(x) -> HasTeeth(x))", "all x y.(Human(x) -> HasTeeth(x,y))", "all x.(Human(x) -> HasTeeth(x))", "all x.(Human(x) -> HasTeeth(x))", "all x.(Human(x) -> HasTeeth(x))", "all x.(Human(x) -> HasTeeth(x))", "all x.(Human(x) -> HasTeeth(x))", "all x.(Human(x) -> HasTeeth(x))", "exists x.(Human(x) & HasTeeth(x))"]}
{"id": "folio_validation_375", "nl": "Platypus are mammals with no teeth.", "fol": "(IsMammal(Platypus) & -HasTeeth(Platypus,Teeth))", "prediction": ["all x.(Plasticus(x) -> (Mammal(x) & -HasTeeth(x)))", "all x.(Pluto(x) -> (Mammal(x) & -Teeth(x)))", "all x y.((Pluto(x) & Mammal(y)) -> (Mammal(x,y) & -Teeth(y)))", "(Mammal(platypus) & NoTeeth(platypus))", "all x y.((Mammal(x) & Platypus(y)) -> (Mammal(x,y) & -Teeth(y)))", "all x.(Platypus(x) -> (Mammal(x) & -HasTeeth(x)))", "all x.(Platypus(x) -> Mammal(x) & -HasTeeth(x))", "all x.(Plutospheric(x) -> (Mammal(x) & -HasTeeth(x)))", "(Mammal(platypus) & HasNoTeeth(platypus))", "all x.(Platypus(x) -> (Mammal(x) & -Teeth(x)))", "All x y.((Plasticus(x) & Mammal(y)) -> -HasTeeth(x,y))", "all x.(Plasticus(x) -> (Mammal(x) & NoTeeth(x)))", "all x.(Platypus(x) -> (Mammal(x) & -HasTeeth(x)))", "all x.(Platypus(x) -> (Mammal(x) & NoTeeth(x)))", "all x.(Plavix(x) -> Mammal(x) & -HasTeeth(x))", "all x.((Mammal(x) & -Teeth(x)) -> Platypus(x))"]}
{"id": "folio_validation_376", "nl": "Platypus are reptiles.", "fol": "Reptile(Platypus)", "prediction": ["all x.(Pluto(x) -> Reptile(x))", "all x.(Pluto(x) -> Reptile(x))", "all x y.((Pluto(x) & Reptile(y)) -> Reptile(x))", "(Reptile(platypus) & Reptile(platypus))", "all x.(Platypus(x) -> Reptile(x))", "all x.(Platypus(x) -> Reptile(x))", "all x y.((Platypus(x) & Reptile(y)) -> Reptile(x))", "(Reptiles(platypus) & Reptile(platypus,y))", "(Reptile(platypus) & Reptile(platypus))", "all x.(Plasticus(x) -> Reptile(x))", "All x.(Plutospheric(x) -> Reptile(x))", "all x.(Platypus(x) -> Reptile(x))", "all x.(Platypus(x) -> Reptile(x))", "all x.(Plavix(x) -> Reptile(x))", "All x.(Platypus(x) -> Reptile(x))", "all x.(Platypus(x) -> Reptile(x))"]}
{"id": "folio_validation_377", "nl": "Plungers suck.", "fol": "all x.(IsPlunger(x) -> Sucks(x))", "prediction": ["all x.(Plunger(x) -> Suck(x))", "all x y.((Plunger(x) & Suck(y)) -> Suck(x,y))", "(all x.(Plunger(x) -> Sucks(x)))", "all x.(Plunger(x) -> Suck(x))", "all x.(Plunger(x) -> Saute(x))", "all x y.((Plunger(x) & Suck(y)) -> Suck(x))", "all x.(Plunger(x) -> Sucks(x))", "(all x.(Plunger(x) -> Saute(x)))", "all x y.((Plunger(x) & Suck(y)) -> Sucks(x,y))", "all x.(Plunger(x) -> Saute(x))", "all x.(Plunger(x) -> Sucks(x))", "all x.(Plunger(x) -> Stuck(x))", "exists x.(Plunger(x) & Sucker(y) & Suck(x,y))", "all x.(Plunger(x) -> Saute(x))", "all x.(Plunger(x) -> Sucks(x))", "exists x.(Plunger(x) & Suckles(x))"]}
{"id": "folio_validation_378", "nl": "Vacuums suck.", "fol": "all x.(IsVacuum(x) -> Sucks(x))", "prediction": ["all x.(Vacuum(x) -> Suck(x))", "all x.(Vacuum(x) -> Saute(x))", "all x.(Vacuum(x) -> Sucks(x))", "all x y.((Vacuum(x) & Suck(y)) -> Vacuum(x))", "(all x.(Vacuum(x) -> Sucks(x)))", "all x.(Vacuum(x) -> Sucks(x))", "all x y.((Vacuum(x) & Vacuum(y)) -> Sucks(x,y))", "all x.(Vacuum(x) -> Saute(x))", "(all x.(Vacuum(x) -> Sautes(x)))", "all x.(Vacuum(x) -> Saute(x))", "all x y.((Vacuum(x) & Suck(y)) -> Vacuum(x))", "all x.(Vacuum(x) -> Sucks(x))", "all x.(Vacuum(x) -> Sucks(x))", "all x.(Vacuum(x) -> Saute(x))", "all x.(Vakuum(x) -> Suckles(x))", "exists x.(Vapor(x) & Sucker(x))"]}
{"id": "folio_validation_379", "nl": "Vampires suck.", "fol": "all x.(IsVampire(x) -> Sucks(x))", "prediction": ["all x.(Vampire(x) -> Suck(x))", "all x.(Vampire(x) -> Sucks(x))", "(all x.(Vampire(x) -> Sucks(x)))", "all x y.((Vampire(x) & Suck(y)) -> Suck(x,y))", "all x.(Vampire(x) -> Saute(x))", "(all x.(Vampire(x) -> Sautes(x)))", "all x y.((Vampire(x) & Suck(y)) -> Sucks(x,y))", "all x.(Vampire(x) -> Sucks(x))", "all x y.((Vampire(x) & Suck(y)) -> Suck(x))", "all x.(Vampire(x) -> Stuck(x))", "all x.(Vampire(x) -> Saute(x))", "all x.(Vampire(x) -> Sucks(x))", "all x.(Vampire(x) -> Stuck(x))", "all x.(Vampire(x) -> Sautes(x))", "exists x.(Vampire(x) & Suckle(x))", "exists x.(Vampire(x) & Suckle(x))"]}
{"id": "folio_validation_380", "nl": "Space is a vacuum.", "fol": "IsVacuum(Space)", "prediction": ["all x.(Space(x) -> Vacuum(x))", "all x.(Space(x) -> Vacuum(x))", "all x y.((Space(x) & Vacuum(y)) -> Vacuum(x))", "(Vacuum(space) & Vacuum(space))", "all x.(Space(x) -> Vacuum(x))", "all x y.((Space(x) & Vacuum(y)) -> Vacuum(x))", "all x.(Space(x) -> Vacuum(x))", "all x y.((Space(x) & Vacuum(y)) -> Vacuum(x))", "all x.(Space(x) -> Vacuum(x))", "all x.(Space(x) -> Vacuum(x))", "all x.(Space(x) -> Vacuum(x))", "all x.(Space(x) -> Vacuum(x))", "exists x.(Space(x) & Vacuum(x))", "exists x.(Space(x) & Vapor(x))", "exists x.(Space(x) & Vacuum(x))", "exists x.(Space(x) & Vapor(x))"]}
{"id": "folio_validation_381", "nl": "A duster is a household appliance that doesn't suck.", "fol": "(IsHouseholdAppliance(Duster) & -Sucks(Duster))", "prediction": ["all x.(Duster(x) -> (HouseholdAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.(Duster(x) -> (HausletAppliance(x) & -Sucks(x)))", "all x y.((Duster(x) & Appliance(y)) -> (Has(x,y) & -Sucks(y)))", "all x y.(Duster(x) -> (HouseholdAppliance(x) & Appliance(y) & -Sucks(y)))", "all x.(Duster(x) -> (HouseholdAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HouseholdAppliance(x) & -Sucks(x)))", "all x y.(Duster(x) -> (HouseholdAppliance(x) & Appliance(y) & -Sucks(x)))", "exists x.(Durster(x) & Appliance(x) & -Sucks(x))", "all x.(Duster(x) -> (HausletAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HausletAppliance(x) & -Sucks(x)))", "all x y.(Duster(x) -> (HausletAppliance(y) & -Sucks(y)))", "exists x.(Duster(x) & HouseholdAppliance(x) & -Sucks(x))", "all x.(Duster(x) -> (HouseholdAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HouseholdAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HouseholdAppliance(x) & -Sucks(x)))"]}
{"id": "folio_validation_382", "nl": "Space sucks.", "fol": "Sucks(Space)", "prediction": ["all x.(Space(x) -> Suckles(x))", "all x.(SpaceSucks(x) -> SpaceSucks(x))", "all x.(Space(x) -> Sautes(x))", "(SpaceSucks(Space) & -Sucks(Space))", "all x y.((Space(x) & Sucker(y)) -> Suckle(x,y))", "all x.(Space(x) -> Sucks(x))", "all x.(SpaceSucks(x) -> -Sucks(x))", "all x y.((Space(x) & Space(y)) -> Sucks(x,y))", "all x.(Space(x) -> Sucks(x))", "all x y.((Space(x) & Sucker(y)) -> Sucks(x,y))", "exists x.(Space(x) & Suits(x))", "all x y.((Space(x) & Sucks(y)) -> Space(x))", "All x.(SpaceSucks(x) -> -Sucks(x))", "exists x.(Space(x) & Suckles(x))", "exists x.(SpaceSucks(x))", "exists x.(SpaceSucks(x))"]}
{"id": "folio_validation_383", "nl": "Space is a vampire.", "fol": "IsVampire(Space)", "prediction": ["all x.(Space(x) -> Vampiric(x))", "all x.(Space(x) -> Vampire(x))", "(Vampire(Space) & Vampiric(Space))", "Space is vampire(x)", "All x y.((Space(x) & Vampire(y)) -> Is(x,y))", "all x.(Space(x) -> Vampiric(x))", "(Vampire(space) & Vampire(space))", "Space is vampire(Space)", "all x.(Space(x) -> Vampire(x))", "All x.(Space(x) -> Vampiric(x))", "(Vampire(space) & Vampiric(space))", "all x.(Space(x) -> Vampire(x))", "All x.(Space(x) -> Vampiric(x))", "exists x.(Space(x) & Vampire(x))", "all x.(Space(x) -> Vampiric(x))", "exists x.(Space(x) & Vampire(x))"]}
{"id": "folio_validation_384", "nl": "If something is a household appliance, it sucks.", "fol": "all x.(IsHouseholdAppliance(x) -> Sucks(x))", "prediction": ["all x.((HausletAppliance(x) & HouseholdAppliance(x)) -> Sucks(x))", "all x.((HouseholdAppliance(x) & Sucks(x)) -> Appliance(x))", "all x.(HausletAppliance(x) -> Sucks(x))", "all x.((HausletAppliance(x) & HouseholdAppliance(x)) -> Sucks(x))", "all x.((HouseholdAppliance(x)) -> Sucks(x))", "all x y.((HouseholdAppliance(x) & Appliance(y)) -> Sucks(x))", "all x.(HouseholdAppliance(x) -> Sucks(x))", "all x.((HausletAppliance(x) & Homemade(x)) -> Sucks(x))", "all x.((HomemadeAppliance(x) & HasSucks(x)) -> HouseholdAppliance(x))", "all x.(HomemadeAppliance(x) -> Sucks(x))", "all x.(HausleafAppliance(x) -> Sucks(x))", "all x y.((HausletAppliance(x) & Appliance(y)) -> Sucks(x,y))", "all x.((Appliance(x) & HouseholdAppliance(x)) -> Sucks(x))", "all x.(HausletAppliance(x) -> Sautes(x))", "all x.(HouseholdAppliance(x) -> Sucks(x))", "exists x.(HouseholdAppliance(x) & Suits(x))"]}
{"id": "folio_validation_385", "nl": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.", "fol": "all x.(MachineLearningAlgorithm(x) -> (CategorizedAsSupervisedLearning(x) | CategorizedAsUnsupervisedLearning(x) | CategorizedAsReinforcementLearning(x)))", "prediction": ["all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "all x y.((MachineLearningAlgorithm(x) & SupervisedLearning(y) & UnsupervisedLearning(y)) -> ReinforcementLearning(x))", "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "(all x.(MachineLearningAlgorithm(x) -> SupervisedLearning(x)) & all y.(UnsupervisedLearning(y) -> ReinforcementLearning(y)))", "(all x.(MachineLearningAlgorithm(x) -> SupervisedLearning(x)) & all y.(UnsupervisedLearning(y) & ReconcileLearning(y))))", "all x.((MachineLearningAlgorithm(x) & SupervisedLearning(x) & UnsupervisedLearning(x) & ReinforcementLearning(x)) -> Categorized(x))", "(all x.(MachineLearningAlgorithm(x) -> SupervisedLearning(x)) & all y.(UnsupervisedLearning(y) -> ReinforcementLearning(y)))", "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "all x y.((MachineLearningAlgorithm(x) & SupervisedLearning(y) & UnsupervisedLearning(y)) -> ReinforcementLearning(x))", "all x.(MachineLearning(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "(all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x))))", "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "all x.(MachineLearningAlgorithm(x) -> (SupportedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | Reconciling(x)))", "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))"]}
{"id": "folio_validation_386", "nl": "Unsupervised learning doesn't require labelled data.", "fol": "all x.(CategorizedAsUnsupervisedLearning(x) -> -RequiresLabelledData(x))", "prediction": ["all x.(UnsupervisedLearning(x) -> -RequiresLabeledData(x))", "all x.(UnsupervisedLearning(x) -> -RequiresLabelledData(x))", "(UnsupervisedLearning) -> -RequiresLabeledData(un))", "-(UnsupervisedLearning(un) & LabeledData(un))", "all x y.((UnsupervisedLearning(x) & Data(y)) -> -Requires(x,y))", "all x.((UnsupervisedLearning(x) & -RequiresLabeledData(x)) -> -RequiresLabeledData(x))", "all x.(UnsupervisedLearning(x) -> -RequiresLabeledData(x))", "(UnsupervisedLearning) & -RequiresLabelledData(un))", "all x y.((UnsupervisedLearning(x) & Data(y)) -> -Requires(x,y))", "all x.((UnsupervisedLearning(x) & -RequiresLabelledData(x)) -> -RequiresLabeledData(x))", "(UnsupervisedLearning) -> -RequiresLabeledData(un))", "all x.(UnsupervisedLearning(x) -> -RequiresLabelledData(x))", "all x.(UnsupervisedLearning(x) -> -RequireslabelledData(x))", "all x.(UnsupervisedLearning(x) -> -RequiresLabeledData(x))", "all x.(UnsupervisedLearning(x) -> -RequiresLabeledData(x))", "all x.(UnsupervisedLearning(x) -> -RequireslabelledData(x))"]}
{"id": "folio_validation_387", "nl": "The state-of-the-art text summarization model is BART.", "fol": "TextSummarizationModel(Bart)", "prediction": ["all x.((StateOfTheArtTextSummarizationModel(x) & BART(x)) -> SummarizationModel(x))", "all x.(StateOfTheArtTextSummarizationModel(x) -> BART(x))", "all x.((TextSummarizationModel(x) & BART(x)) -> StateOfTheArt(x))", "(StateOfTheArtTextSummarizationModel(SUMMARization) & BART(Summarization))", "BART (StateOfTheArtTextSummarizationModel)", "the state-of-theart text summarization model is BART.", "all x y.((StateOfTheArtTextSummarizationModel(x) & TextSummarizationModel(y)) -> BART(x))", "all x.(StateOfTheArtTextSummarizationModel(x) -> BART(x))", "(StateOfTheArtTextSummarizationModel(SUMMARization) & BART(Summarization))", "all x.((TextSummarizationModel(x) & StateOfTheArt(x)) -> BART(x))", "(StateOfTheArtTextSummarizationModel(x) & BART(x))", "all x.((StateOfTheArtTextSummarizationModel(x) & BART(x)) -> Summarization(x))", "(StateOfTheArtTextSummarizationModel(STMART) & BART(STMART))", "all x.(StateOfTheArtTextSummarizationModel(x) -> BART(x))", "(StateOfTheArtTextSummarizationModel(x) & BART(x))", "All x.(StateOfTheArtTextSummarization(x) -> BART(x))"]}
{"id": "folio_validation_388", "nl": "The state-of-the-art text summarization model is trained with machine learning algorithms.", "fol": "all x.(TextSummarizationModel(x) -> MachineLearningAlgorithm(x))", "prediction": ["all x.((TextSummarizationModel(x) & MachineLearningAlgorithms(x)) -> TrainedWith(x))", "all x.(StateOfTheArtTextSummarizationModel(x) -> TrainedWithMachineLearningAlgorithms(x))", "all x y.((StateOfTheArtTextSummarizationModel(x) & MachineLearningAlgorithms(y)) -> TrainedWith(x,y))", "all x.((StateOfTheArtTextSummarizationModel(x) & MachineLearningAlgorithms(x)) -> TrainedWith(x))", "(TrainedWithMachineLearningAlgorithms(StateOfTheArtTextSummarizationModel))", "(StateOfTheArtTextSummarizationModel(x) & TrainedWithMachineLearningAlgorithms(x))", "all x y.((TextSummarizationModel(x) & StateOfTheArt(x) & MachineLearningAlgorithms(y)) -> TrainedWith(x,y))", "all x.((TextSummarizationModel(x) & MachineLearningAlgorithms(x)) -> TrainedWith(x,y))", "all x.((TextSummarizationModel(x) & StateOfTheArt(x)) -> TrainedWithMachineLearningAlgorithms(x))", "all x y.((StateOfTheArtTextSummarizationModel(x) & MachineLearningAlgorithms(y)) -> TrainedWith(x,y))", "all x y z.((StateOfTheArtTextSummarizationModel(x) & MachineLearningAlgorithms(y) & TrainedWith(x,y)) -> TrainedWith(x,z))", "all x.(StateOfTheArtTextSummarizationModel(x) -> TrainedWithMachineLearningAlgorithms(x))", "(TrainedWithMachineLearningAlgorithms(StateOfTheArtTextSummarizationModel))", "all x.((StateOfTheArtTextSummarizationModel(x) & TrainedWithMachineLearningAlgorithms(x)) -> TrainedWith(x,y))", "all x y.((TextSummarizationModel(x) & StateOfTheArt(x) & MachineLearningAlgorithms(y)) -> TrainedWith(x,y))", "all x.(StateOfTheArtTextSummarizationModel(x) -> TrainedWithMachineLearningAlgorithms(x))"]}
{"id": "folio_validation_389", "nl": "Reinforcement learning is not used to train the state-of-the-art text summarization model.", "fol": "all x.(TextSummarizationModel(x) -> -CategorizedAsReinforcementLearning(x))", "prediction": ["all x.((ReinforcementLearning(x) & -TrainStateOfTheArtTextSummarizationModel(x)) -> -Trains(x,StateOfTheArtTextSummarizationModel))", "all x y.((ReinforcementLearning(x) & TextSummarizationModel(y)) -> -Trains(x,y))", "(-TrainsStateOfTheArtTextSummarizationModel(r) & ReinforcementLearning(r))", "all x.(ReinforcementLearning(x) -> -TrainsStateOfTheArtTextSummarizationModel(x))", "(-TrainStateOfTheArtTextSummarizationModel(R) & ReinforcementLearning(R))", "all x.((ReinforcementLearning(x) & -TrainsStateOfTheArtTextSummarizationModel(x)) -> -Trains(x))", "-(ReinforcementLearning(re) & StateOfTheArtTextSummarizationModel(re))", "all x.(ReinforcementLearning(x) -> -TrainStateOfTheArtTextSummarizationModel(x))", "all x.((ReinforcementLearning(x) & -StateOfTheArtTextSummarizationModel(x)) -> -Trains(x,StateOfTheArtTextSummarizationModel))", "all x y.((ReinforcementLearning(x) & TextSummarizationModel(y)) -> -Trains(x,y))", "(-TrainsStateOfTheArtTextSummarizationModel(R) & ReinforcementLearning(R))", "all x.((ReinforcementLearning(x) & -TrainedTextSummarizationModel(x)) -> -Trains(x,StateOfTheArtTextSummarizationModel))", "all x y.((ReinforcementLearning(x) & StateOfTheArtTextSummarizationModel(y)) -> -Trains(x,y))", "-(ReinforcementLearning(Re) & StateOfTheArtTextSummarizationModel(Re))", "all x y.((ReinforcementLearning(x) & TextSummarizationModel(y)) -> -Train(x,y))", "all x.(ReinforcementLearning(x) -> -TrainsStateOfTheArtTextSummarizationModel(x))"]}
{"id": "folio_validation_390", "nl": "The Machine Learning algorithm for training text summarization model requires labelled data.", "fol": "all x.((MachineLearningAlgorithm(x) & TextSummarizationModel(x)) -> RequiresLabelledData(x))", "prediction": ["all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresLabeledData(x))", "all x y.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(y)) -> RequiresLabeledData(x,y))", "(MachineLearningAlgorithm(MachineLearning) & TrainingTextSummarizationModel(MachineLearning))", "(all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresLabeledData(x)))", "(MachineLearningAlgorithmForTrainingTextSummarizationModel(Mathematical) & RequiresLabeledData(Mathematical))", "All x y z.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(y) & LabeledData(z)) -> Requires(x,y,z))", "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresLabeledData(x))", "all x.(MachineLearningAlgorithm(x) -> TrainingTextSummarizationModel(x))", "all x y.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(y)) -> RequiresLabeledData(x,y))", "all x.(MachineLearningAlgorithm(x) -> TrainingTextSummarizationModelRequiresLabeledData(x))", "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresLabeledData(x))", "all x y.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(y)) -> RequiresLabeledData(x,y))", "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequireslabelledData(x))", "All x y.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(y)) -> RequiresLabelledData(x,y))", "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresLabeledData(x))", "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresLabeledData(x))"]}
{"id": "folio_validation_391", "nl": "Supervised learning is used to train the state-of-the-art text summarization model.", "fol": "all x.(TextSummarizationModel(x) -> CategorizedAsSupervisedLearning(x))", "prediction": ["all x.(SupervisedLearning(x) -> TrainsStateOfTheArtTextSummarizationModel(x))", "all x y.((SupervisedLearning(x) & TextSummarizationModel(y)) -> Trains(x,y))", "all x y z.((SupervisedLearning(x) & TextSummarizationModel(y) & StateOfTheArt(z)) -> Trains(x,y,z))", "(SupervisedLearning(SupervisedLearning) & TrainsStateOfTheArtTextSummarizationModel(SupervisedLearning))", "all x.(SupervisedLearning(x) -> TrainsStateOfTheArtTextSummarizationModel(x))", "all x y.((SupervisedLearning(x) & StateOfTheArtTextSummarization(y)) -> Trains(x,y))", "all x.((SupervisedLearning(x) & StateOfTheArtTextSummarizationModel(x)) -> Trains(x,y))", "all x y.((SupervisedLearning(x) & TextSummarizationModel(y)) -> Trains(x,y))", "all x y z.((SupervisedLearning(x) & TextSummarizationModel(y) & StateOfTheArt(z)) -> Trains(x,y,z))", "all x.(SupervisedLearning(x) -> (TrainsStateOfTheArtTextSummarizationModel(x)))", "all x.(SupervisedLearning(x) -> TrainsStateOfTheArtTextSummarizationModel(x))", "all x y.((SupervisedLearning(x) & StateOfTheArtTextSummarization(y)) -> Trains(x,y))", "all x.(SupervisedLearning(x) -> UsedToTrainTextSummarization(x))", "all x.(SupervisedLearning(x) -> TrainsStateOfTheArtTextSummarizationModel(x))", "all x.(SupervisedLearning(x) -> TrainsStateOfTheArtTextSummarizationModel(x))", "all x y.((SupervisedLearning(x) & TextSummarizationModel(y)) -> Trains(x,y))"]}
{"id": "folio_validation_392", "nl": "Unsupervised learning is used to train the state-of-the-art text summarization model.", "fol": "all x.(TextSummarizationModel(x) -> CategorizedAsUnsupervisedLearning(x))", "prediction": ["all x.(UnsupervisedLearning(x) -> TrainsStateOfTheArtTextSummarizationModel(x))", "all x y.((UnsupervisedLearning(x) & TextSummarizationModel(y)) -> Trains(x,y))", "all x.((UnsupervisedLearning(x) & StateOfTheArtTextSummarizationModel(x)) -> Trains(x,y))", "(UnsupervisedLearning(un) & TrainsStateOfTheArtTextSummarizationModel(un))", "all x y z.((UnsupervisedLearning(x) & TextSummarizationModel(y) & StateOfTheArt(z)) -> Trains(x,y,z))", "all x.(UnsupervisedLearning(x) -> TrainsStateOfTheArtTextSummarizationModel(x))", "all x y.((UnsupervisedLearning(x) & StateOfTheArtTextSummarizationModel(y)) -> Trains(x,y))", "(UnsupervisedLearning (unsupervisedlearning) & StateOfTheArtTextSummarizationModel(s))", "all x y.((UnsupervisedLearning(x) & TextSummarizationModel(y)) -> Trains(x,y))", "all x.((UnsupervisedLearning(x) & StateOfTheArtTextSummarizationModel(x)) -> Trains(x,y))", "(UnsupervisedLearning (unsupervisedlearning) & StateOfTheArtTextSummarizationModel(unsupervisedlearning))", "all x.((UnsupervisedLearning(x) & StateOfTheArtTextSummarizationModel(x)) -> Trains(x,StateOfTheArtTextSummarizationModel))", "all x y.((UnsupervisedLearning(x) & StateOfTheArtTextSummarization(y)) -> Trains(x,y))", "all x.(UnsupervisedLearning(x) -> TrainsStateOfTheArtTextSummarizationModel(x))", "all x.(UnsupervisedLearning(x) -> UsedToTrainTextSummarization(x))", "all x y.((UnsupervisedLearning(x) & TextSummarizationModel(y)) -> Trains(x,y))"]}
{"id": "folio_validation_393", "nl": "If a cartoon character is funny, then it is popular.", "fol": "all x.(IsFunny(x) -> IsPopular(x))", "prediction": ["all x.((CartoonCharacter(x) & Funny(x)) -> Popular(x))", "all x.(FunnyCartoonCharacter(x) -> Popular(x))", "all x.((CartoonCharacter(x) & Funny(x)) -> Popular(x))", "all x y.((CartoonCharacter(x) & Funny(x)) -> Popular(y))", "all x.(FunnyCartoonCharacter(x) -> Popular(x))", "all x.((CartoonCharacter(x) & Funny(x)) -> Popular(x))", "all x y.((CartoonCharacter(x) & Funny(x)) -> Popular(y))", "all x.(FunnyCartoonCharacter(x) -> Popular(x))", "exists x.(CartoonCharacter(x) & Funny(x))", "all x.((CartoonCharacter(x) & Funny(x)) -> Popular(x))", "all x.((Character(x) & Funny(x)) -> Popular(x))", "all x.(Funny(x) -> PopularCharacter(x))", "exists x.(CartoonCharacter(x) & Funny(x) & Popular(x))", "all x.((CartoonCharacter(x) & Funny(x)) -> Popular(x))", "all x.(FunnyCartoonCharacter(x) -> Popular(x))", "all x.((CartoonCharacter(x) & Funny(x)) -> Popular(x))"]}
{"id": "folio_validation_394", "nl": "If a cartoon character is ugly, then it is not popular.", "fol": "all x.(IsUgly(x) -> -IsPopular(x))", "prediction": ["all x.((CartoonCharacter(x) & Ugly(x)) -> -Popular(x))", "all x.((CartoonCharacter(x) & Ugly(x)) -> -Popular(x))", "all x.(UglyCharacter(x) -> -Popular(x))", "all x.((Character(x) & Ugly(x)) -> -Popular(x))", "all x y.((CartoonCharacter(x) & Ugly(x)) -> -Popular(y))", "all x.((CartoonCharacter(x) & Ugly(x)) -> -Popular(x))", "all x y.((CartoonCharacter(x) & Ugly(x)) -> -Popular(y))", "all x.((CartoonCharacter(x) & Ugly(x)) -> -Popular(x))", "all x.(UglyCharacter(x) -> -Popular(x))", "exists x.(CartoonCharacter(x) & Ugly(x) & Popular(x))", "all x.(UglyCharacter(x) -> -PopularCharacter(x))", "all x.(Ugly(x) -> -PopularCharacter(x))", "exists x.(CartoonCharacter(x) & Ugly(x) & -Popular(x))", "all x.((CartoonCharacter(x) & Ugly(x)) -> -Popular(x))", "all x.((CartoonCharacter(x) & Ugly(x)) -> -Popular(x))", "all x.((CartoonCharacter(x) & Ugly(x)) -> -Popular(x))"]}
{"id": "folio_validation_395", "nl": "If a cartoon character is loved by children, then it is funny.", "fol": "all x.(IsLovedByChildren(Children,x) -> IsFunny(x))", "prediction": ["all x.((CartoonCharacter(x) & LovedByChildren(x)) -> Funny(x))", "all x.(LovedByChildren(x) -> FunnyCharacter(x))", "all x y.((CartoonCharacter(x) & LovedByChildren(x)) -> Funny(x))", "all x.((CartoonCharacter(x) & LovedByChildren(x)) -> Funny(x))", "exists x.(CartoonCharacter(x) & LovedByChildren(x) & Funny(x))", "all x.((CartoonCharacter(x) & LovedByChildren(x)) -> Funny(x))", "all x y.((CartoonCharacter(x) & LovedByChildren(x)) -> Funny(x))", "all x.(LovedByChildren(x) -> FunnyCharacter(x))", "all x.((Character(x) & LovedByChildren(x)) -> Funny(x))", "exists x.(CartoonCharacter(x) & LovedByChildren(x) & Funny(x))", "all x.((CartoonCharacter(x) & LovedByChildren(x)) -> Funny(x))", "all x y.((CartoonCharacter(x) & LovedByChildren(x)) -> Funny(x))", "all x.(LovedByChildren(x) -> FunnyCharacter(x))", "all x.((CartoonCharacter(x) & LovedByChildren(x)) -> Funny(x))", "all x y.((CartoonCharacter(x) & LovedByChildren(x)) -> Funny(y))", "all x.((CartoonCharacter(x) & LovedByChildren(x)) -> Funny(x))"]}
{"id": "folio_validation_396", "nl": "If a cartoon character is from The Simpsons, then it is loved by children.", "fol": "all x.(IsFromTheSimpsons(x) -> IsLovedByChildren(Children,x))", "prediction": ["all x.((CartoonCharacter(x) & Simpsons(x)) -> LovedByChildren(x))", "all x.((CartoonCharacter(x) & FromTheSimpsons(x)) -> LovedByChildren(x))", "all x y.((CartoonCharacter(x) & Simpsons(y)) -> LovedByChildren(x,y))", "all x.((Character(x) & Simpsons(x)) -> LovedByChildren(x))", "all x.((CartoonCharacter(x) & FromSimpsons(x)) -> LovedByChildren(x))", "all x.((CartoonCharacter(x) & Simpsons(x)) -> LovedByChildren(x))", "all x y.((CartoonCharacter(x) & Simpsons(y)) -> LovedByChildren(x,y))", "all x.((Character(x) & FromTheSimpsons(x)) -> LovedByChildren(x))", "exists x.(CartoonCharacter(x) & FromSimpsons(x))", "all x y.((CartoonCharacter(x) & Simpsons(y) & From(x,y)) -> LovedByChildren(x))", "all x.((CartoonCharacter(x) & FromTheSimpsons(x)) -> LovedByChildren(x))", "all x.((CartoonCharacter(x) & Simpsons(x)) -> LovedByChildren(x))", "all x y.((CartoonCharacter(x) & Simpsons(y)) -> LovedByChildren(x,y))", "exists x.(CartoonCharacter(x) & FromTheSimpsons(x))", "all x.((CartoonCharacter(x) & FromSimpsons(x)) -> LovedByChildren(x))", "all x.((CartoonCharacter(x) & Simpsons(x)) -> LovedByChildren(x))"]}
{"id": "folio_validation_397", "nl": "If a cartoon character is yellow, then it is from The Simpsons.", "fol": "all x.(IsYellow(x) -> IsFromTheSimpsons(x))", "prediction": ["all x.((CartoonCharacter(x) & Yellow(x)) -> Simpsons(x))", "all x.((CartoonCharacter(x) & Yellow(x)) -> Simpsons(x))", "(YellowCharacter(cartoon) & FromTheSimpsons(cartoon))", "all x.(YellowCartoonCharacter(x) -> FromTheSimpsons(x))", "(YellowCartoonCharacter(x) -> Simpsons(x))", "all x y.((CartoonCharacter(x) & Yellow(x)) -> Simpsons(y))", "all x.((CartoonCharacter(x) & Yellow(x)) -> Simpsons(x))", "all x.((CartoonCharacter(x) & Yellow(x)) -> FromTheSimpsons(x))", "exists x.(CartoonCharacter(x) & Yellow(x) & Simpsons(x))", "all x.(Yellow(x) -> Simpsons(x))", "all x.((Character(x) & Yellow(x)) -> Simpsons(x))", "all x.(YellowCartoonCharacter(x) -> Simpsons(x))", "all x y.((CartoonCharacter(x) & Yellow(x)) -> Simpsons(y))", "all x.((CartoonCharacter(x) & Yellow(x)) -> Simpsons(x))", "all x.((CartoonCharacter(x) & Yellow(x)) -> FromTheSimpsons(x))", "all x.((CartoonCharacter(x) & Yellow(x)) -> Simpsons(x))"]}
{"id": "folio_validation_398", "nl": "Ben is either from The Simpsons or funny.", "fol": "((IsFromTheSimpsons(Ben) & -IsFunny(Ben)) | (-IsFromTheSimpsons(Ben) & IsFunny(Ben)))", "prediction": ["all x.(Ben(x) -> (FromSimpsons(x) | Funny(x)))", "((Ben(Ben) | Funny(Ben)))", "Ben (Simpsons(Ben) | Funny(Ben))", "(Simpsons(Ben) | Funny(Ben))", "Ben is either from TheSimpsons(Ben) | Funny(Ben))", "((Ben(b) | Simpsons(b))) | Funny(b)))", "exists x.(Ben(x) & (FromSimpsons(x) | Funny(x)))", "Ben is either from Simpsons(Ben) | Funny(Ben))", "(FromTheSimpsons(Ben) | Funny(Ben))", "all x.(Ben(x) -> (FromTheSimpsons(x) | Funny(x)))", "exists x.(Ben(x) & (Sims(x) | Funny(x)))", "Ben (Simpsons(b) | Funny(b)))", "(Simpson(Ben) | Funny(Ben))", "Ben (Sims(b) | Funny(b)))", "all x.(Ben(x) -> (FromTheSimpsons(x) | Funny(x)))", "exists x.(Ben(x) & (Simpsons(x) | Funny(x)))"]}
{"id": "folio_validation_399", "nl": "Ben is loved by children.", "fol": "IsLovedByChildren(Children,Ben)", "prediction": ["all x.(Ben(x) -> LovedByChildren(x))", "all x.((Ben(x) & LovedByChildren(x)) -> LovedByChildren(x))", "(LovedByChildren(Ben)", "all x y.((Ben(x) & Child(y)) -> LovedBy(x,y))", "all x.(Ben(x) -> LovedByChildren(x))", "(LovedBen(Ben) & LovedByChildren(Ben))", "Ben is lovedByChildren.", "all x y.((Ben(x) & Child(y)) -> LovedBy(x,y))", "all x.(Ben(x) -> LovedByChildren(x))", "(LovedBen(Ben) & LovedByChildren(Ben))", "exists x.(Ben(x) & LovedBy(x,Children))", "all x y.((Ben(x) & Child(y)) -> LovedBy(x,y))", "all x.(Ben(x) -> LovedByChildren(x))", "exists x.(Ben(x) & LovedBy(x,Children))", "exists x.(Ben(x) & LovedByChildren(x))", "exists x.(Ben(x) & LovedByChildren(x))"]}
{"id": "folio_validation_400", "nl": "Ben is ugly or yellow.", "fol": "(IsUgly(Ben) | IsYellow(Ben))", "prediction": ["all x.(Ben(x) -> (Ugly(x) | Yellow(x)))", "(Ugly(Ben) | Yellow(Ben))", "Ben (Ugly(Ben) | Yellow(Ben))", "all x.(Ben(x) -> (Ugly(x) | Yellow(x)))", "exists x.(Ben(x) & (Ugly(x) | Yellow(x)))", "(Ugly(Ben) | Yellow(Ben))", "(UglyBen(Ben,y) | Yellow(Ben))", "all x.(Ben(x) -> (Ugly(x) | Yellow(x)))", "(Ugly(Ben) | Yellow(Ben))", "exists x.(Ben(x) & (Ugly(x) | Yellow(x)))", "all x.(Ben(x) -> (Ugly(x) | Yellow(x)))", "exists x.(Ben(x) & Ugly(x) | Yellow(x))", "exists x.(Ben(x) & (Ugly(x) | Yellow(x)))", "all x.(Ben(x) -> (Ugly(x) | Yellow(x)))", "exists x.(Ben(x) & (Ugly(x) | Yellow(x)))", "all x.(Ben(x) -> (Ugly(x) | Yellow(x)))"]}
{"id": "folio_validation_401", "nl": "Ben is either yellow and ugly or neither yellow nor ugly.", "fol": "((IsYellow(Ben) & IsUgly(Ben) & -(-IsYellow(Ben) & -IsUgly(Ben))) | (-(IsYellow(Ben) & IsUgly(Ben)) & -IsYellow(Ben) & -IsUgly(Ben)))", "prediction": ["all x.(Ben(x) -> ((Yellow(x) & Ugly(x)) | -Yellow(x) & Ugly(x))))", "(y.(Ben(x) & Yellow(y)) | (-Yellow(y) & Ugly(y))))", "(Yellow(Ben) | (Yellow(Ben) & Ugly(Ben))))", "all x.(Ben(x) -> (Yellow(x) | Ugly(x) | -Yellow(x) & Ugly(x)))", "(y.(Ben(x) & Yellow(y) & Ugly(y)) | -(Yellow(y) & Ugly(y))))", "Ben (yellow(y) & Ugly(y)) | (-Yellow(y) & Ugly(y))))", "(YellowAndUgly(Ben) | (-YellowAndUgly(Ben))))", "all x.(Ben(x) -> ((Yellow(x) & Ugly(x)) | (-Yellow(x) & Ugly(x)))))", "all x.(Ben(x) -> (Yellow(x) & Ugly(x) | -Yellow(x) & Ugly(x)))", "(YellowAndUgly(Ben) | -YellowAndUgly(Ben)))", "exists x.(Ben(x) & ((Yellow(x) & Ugly(x)) | -Yellow(x) & Ugly(x))))", "all x.(Ben(x) -> (Yellow(x) | Ugly(x) | -Ugly(x)))", "all x.(Ben(x) -> (Yellow(x) & Ugly(x) | -Yellow(x) & Ugly(x)))", "exists x.(Ben(x) & ((Yellow(x) & Ugly(x)) | -Yellow(x) & Ugly(x))))", "exists x.(Ben(x) & (Yellow(x) | Ugly(x) | -Yellow(x) | -Ugly(x)))", "exists x.(Ben(x) & ((Yellow(x) & Ugly(x)) | (-Yellow(x) & Ugly(x)))))"]}
{"id": "folio_validation_402", "nl": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.", "fol": "all x y.(DeliberateSelectiveBreeding(x,y) -> IsArtificialSelection(x))", "prediction": ["all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimals(x)))", "all x y.((BreedingBack(x) & DomesticAnimal(y)) -> (ArtificialSelection(x,y) & DeliberateSelectiveBreeding(x,y)))", "all x y z.((BreedingBack(x) & ArtificialSelection(y) & DomesticAnimal(z)) -> DeliberateSelectiveBreeding(y,z))", "all x y.((BreedingBack(x) & DomesticAnimal(y)) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x,y)))", "(ArtificialSelectionByDeliberateBreeding(BreedingBack) & DomesticAnimals(BreedingBack))", "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimals(x)))", "all x.((BreedingBack(x) & ArtificialSelection(x) & DeliberateSelectiveBreeding(x)) -> DomesticAnimal(x))", "all x y.((BreedingBack(x) & DomesticAnimal(y) & DeliberateSelectiveBreeding(x,y)) -> ArtificialSelection(x))", "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimals(x)))", "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreedingOfDomesticAnimals(x)))", "all x y z.((BreedingBack(x) & ArtificialSelection(y) & DomesticAnimal(z)) -> DeliberateSelectiveBreeding(y,z))", "all x y.((BreedingBack(x) & DomesticAnimal(y)) -> ArtificialSelectionByDeliberateBreeding(x,y))", "all x.((BreedingBack(x) & ArtificialSelection(x) & DeliberateSelectiveBreeding(x)) -> DomesticAnimal(x))", "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimals(x)))", "all x y.((BreedingBack(x) & DomesticAnimal(y) & DeliberateSelectiveBreeding(x,y)) -> ArtificialSelection(x,y))", "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreedingOfDomesticAnimals(x)))"]}
{"id": "folio_validation_403", "nl": "Heck cattle were bred-back in the 1920s to resemble the aurochs.", "fol": "exists x y.(HeckCattle(x) & Aurochs(y) & DeliberateSelectiveBreeding(x,y))", "prediction": ["all x.(Heck(x) -> (BredBack(x,20) & RemindsAurochs(x)))", "all x y.((Heck(x) & Auroch(y)) -> (BredBack(x,y) & Reresembles(x,y)))", "all x.(HeckCattle(x) -> (BredBack(x,20) & RemindsAurochs(x)))", "all x y.((HeckCattle(x) & 1920s(y)) -> BredBackToRecallAurochs(x,y))", "all x y z.((Heck(x) & Auroch(y) & Cattle(z)) -> (BredBack(x,z) & Reresembles(x,y,z)))", "(BredBack(Heck,20) & RemindsAurochs(Heck,20))", "(BredBack(Heck) & Aurochs(Heck))", "(BredBackInThe20s(HeckCattle) & ReminiscesAurochs(HeckCattle))", "all x y.((HeckCattle(x) & Auroch(y)) -> (BredBack(x,y) & Reresembles(x,y)))", "all x.(HeckCattle(x) -> (BredBackInThe20s(x) & RemindsAurochs(x)))", "(all x.(Heck(x) -> BredBack(x,20)))", "(BredBackInThe20s(HellCattle) & RemindsAurochs(HellCattle))", "all x.(HellCattle(x) -> (BredBackIn(x,20) & RemindsAurochs(x)))", "all x.(HahCattle(x) -> (BredBack(x,20) & ReresemblesAuroches(x)))", "all x y.((HeckCow(x) & Auroch(y)) -> BredBackIn(x,y))", "all x.(HellCattle(x) -> (BredBackInThe20s(x) & ReresemblesAuroches(x)))"]}
{"id": "folio_validation_404", "nl": "[BG] Heck cattle are animals.", "fol": "all x.(HeckCattle(x) -> IsAnimal(x))", "prediction": ["[BG] HeckCattle(x) -> Animal(x))", "all x.(HeckCattle(x) -> Animal(x))", "[BG] HeckCowboys(x) -> Animal(x))", "[BG] HeckCattle(x) -> Animal(x))", "all x.(HeckCattle(x) -> Animal(x))", "all x.(HeckCow(x) -> Animal(x))", "(Board(h) & HeckCattle(h))", "[BG] HeckCattle(x) -> Animal(x))", "all x.(HellCattle(x) -> Animal(x))", "([BG] HeckCattle(x)) -> Animal(x))", "(Berg(h) & HeckCattle(h) & Animal(x))", "[BG] HeckCowls(x) & Animal(x))", "[BG] HeckCalf(x) -> Animal(x))", "[BG] HeckCowboys(x) -> Animal(x))", "[BG] HeckCattle(x) -> Animal(x))", "all x.(HellCattle(x) -> Animal(x))"]}
{"id": "folio_validation_405", "nl": "[BG] Aurochs are animals.", "fol": "all x.(Aurochs(x) -> IsAnimal(x))", "prediction": ["all x.(Auroch(x) -> Animal(x))", "[BG] Aurochs(a) -> Animal(a))", "(Animal(auroch) & Animal(auroch))", "(Animal(auroch) & [BG] -> Animal(auroch)))", "all x.(Auroch(x) -> Animal(x))", "[BG] Aurochs(a) -> Animal(a))", "[BG] Aurochs (Animal(x))", "[BG] -Animal(aurochs))", "all x.(Auroch(x) -> Animal(x))", "(Animal(auroch) & Animal(auroch))", "all x.((Auroch(x) & Animal(x)) -> Animal(x))", "all x.(Arach(x) -> Animal(x))", "[BG] Aurochs(x) -> Animal(x))", "All x.(Auroscope(x) -> Animal(x))", "all x.(Auroch(x) -> Animal(x))", "all x.(Auroch(x) -> Animal(x))"]}
{"id": "folio_validation_406", "nl": "Some animals to be bred-back resemble animals that are extinct.", "fol": "exists x y.(IsAnimal(x) & IsAnimal(y) & DeliberateSelectiveBreeding(x,y) & IsExtinct(y))", "prediction": ["exists x.(Animal(x) & BredBack(x) & RemindsExtinctAnimals(x))", "exists x.(Animal(x) & BredBack(x) & ReresemblesExtinct(x))", "exists x y.(Animal(x) & BredBack(x) & Animal(y) & Extinct(y))", "all x y.((Animal(x) & BredBack(x)) -> ReresemblesExtinct(x,y))", "exists x.(Animal(x) & BredBack(x) & RemindsExtinctAnimals(x))", "all x y.(BredBack(x) -> (Animal(y) & Extinct(y)))", "all x y.((Animal(x) & BredBack(x) & Animal(y) & Extinct(y)) -> Reresembles(x,y))", "exists x.(BredBack(x) & Animal(x) & Extinct(x))", "exists x.(Animal(x) & BredBack(x) & ReresemblesExtinct(x))", "all x y.(BredBack(x) -> (Animal(y) & Extinct(y)))", "exists x.(BredBack(x) & Animal(y) & Extinct(y) & Reminds(x,y))", "exists x.(Animal(x) & BredBack(x) & RemindsExtinctAnimals(x))", "exists x.(BredBack(x) & AnimalRelatedToExtinction(x))", "exists x.(Animal(x) & BredBack(x) & Extinct(x))", "exists x.(Animal(x) & BredBack(x))", "exists x.(Animal(x) & BredBack(x))"]}
{"id": "folio_validation_407", "nl": "Some Heck cattle are artificially selected.", "fol": "exists x.(HeckCattle(x) & IsArtificialSelection(x))", "prediction": ["exists x.(HeckCattle(x) & ArtificiallySelected(x))", "exists x.(HasHacker(x) & ArtificiallySelected(x))", "exists x.(HasHuntCow(x) & ArtificiallySelected(x))", "exists x.(HellCattle(x) & ArtificiallySelected(x))", "exists x.(HeckCattle(x) & ArtificiallySelected(x))", "exists x.(HasHuntCow(x) & ArtificiallySelected(x))", "exists x y.(HeckCattle(x) & ArtificiallySelected(x,y))", "exists x.(Heck(x) & ArtificiallySelected(x))", "exists x y.(Heck(x) & Cattle(y) & ArtificiallySelected(x,y))", "exists x.(HeckCowl(x) & ArtificiallySelected(x))", "exists x.(HellCalf(x) & ArtificiallySelected(x))", "exists x.(HellCattle(x) & ArtificiallySelected(x))", "exists x.(HellCalf(x) & ArtificiallySelected(x))", "exists x.(HahCowlett(x) & ArtificiallySelected(x))", "exists x.(HellChowder(x) & ArtificiallySelected(x))", "exists x.(HackChowder(x) & ArtificiallySelected(x))"]}
{"id": "folio_validation_408", "nl": "Aurochs are extinct.", "fol": "all x.(Aurochs(x) -> IsExtinct(x))", "prediction": ["all x.(Auroch(x) -> Extinct(x))", "all x.(Auroch(x) -> Extinct(x))", "(Extinct(Auroch))", "all x y.((Auroch(x) & Species(y)) -> Extinct(x))", "(Extinct(Auroscope) -> Extinct(Auroscope,Auroscope))", "all x.(Auroscope(x) -> Extinct(x))", "all x.(Auro(x) -> Extinct(x))", "all x y.((Auro(x) & Auroch(y)) -> Extinct(x))", "all x.(Auroch(x) -> Extinct(x))", "all x.(Auroctus(x) -> Extinct(x))", "all x.(Auroscope(x) -> Extinct(x))", "all x.(Auroch(x) -> Extinct(x))", "All x.(Auroscope(x) -> Extinct(x))", "all x.(Auroch(x) -> Extinct(x))", "All x.(Auroch(x) -> Extinct(x))", "All x.(Auchs(x) -> Extinct(x))"]}
{"id": "folio_validation_409", "nl": "All students are humans. ", "fol": "all x.(IsStudent(x) -> IsHuman(x))", "prediction": ["all x.(Student(x) -> Human(x))", "all x.(Student(x) -> Human(x))", "(all x.(Student(x) -> Human(x))", "all x.(Student(x) -> Human(x))", "(All x.(Student(x) -> Human(x))", "all x.(Student(x) -> Human(x))", "(all x.(Student(x) -> Human(x))", "all x.(Student(x) -> Human(x))", "all x.(Student(x) -> Human(x))", "all x.(Student(x) -> Human(x))", "all x.(Student(x) -> Human(x))", "all x.(Student(x) -> Human(x))", "all x.(Student(x) -> Human(x))", "all x.(Student(x) -> Human(x))", "all x.(Student(x) -> Human(x))", "all x.(Student(x) -> Human(x))"]}
{"id": "folio_validation_410", "nl": "If someone studies, then they are a student.", "fol": "all x.(Studies(x) -> IsStudent(x))", "prediction": ["all x.(Studies(x) -> Student(x))", "all x.(Studies(x) -> Student(x))", "all x.(Studies(x) -> Student(x))", "all x.(Studies(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x y.(Studies(x) -> Student(y))", "all x y.(Student(x) -> Studies(x))", "all x.(Studies(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x.(Studies(x) -> Student(x))", "all x.(Studies(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "exists x.(Student(x) & Studies(x))", "all x.(Studies(x) -> Student(x))", "exists x.(Student(x) & Studies(x))", "all x.(Studies(x) -> Student(x))"]}
{"id": "folio_validation_411", "nl": "A person either studys or teaches.", "fol": "all x.(Studies(x) | Teaches(x))", "prediction": ["all x.(Person(x) -> (Studies(x) | Teaches(x)))", "all x.(Person(x) -> (Studies(x) | Teaches(x)))", "all x y.((Person(x) & Person(y)) -> (Studies(x,y) | Teaches(x,y)))", "all x.(Studies(x) | Teaches(x))", "all x.(Person(x) -> (Studies(x) | Teaches(x)))", "all x y.((Person(x) & Person(y)) -> (Studies(x) | Teaches(x)))", "all x.(StudiesOrTeaches(x) -> Person(x))", "all x.(Studies(x) | Teaches(x))", "exists x.(Person(x) & (Studies(x) | Teaches(x)))", "exists x.(Person(x) & (Studies(x) | Teaches(x)))", "all x y.(Studies(x) | Teaches(y))", "exists x.(Person(x) & (Studies(x) | Teaches(x)))", "all x y.(Studies(x) | Teaches(y))", "exists x.(Person(x) & Studies(x) & Teaches(x))", "exists x.(Person(x) & (Studies(x) | Teaches(x)))", "exists x.(Person(x) & (Studies(x) | Taught(x)))"]}
{"id": "folio_validation_412", "nl": "No young person teaches.", "fol": "all x.(IsYoung(x) -> -Teaches(x))", "prediction": ["-exists x.(YoungPerson(x) & Teaches(x))", "-exists x.(YoungPerson(x) & Teaches(x))", "KeenYoungPerson(x) -> -Teaches(x))", "(NoYoungPerson(y) & Teaches(y))", "all x.(YoungPerson(x) -> -Teaches(x))", "-exists x.(YoungPerson(x) & Teaches(x))", "-(YoungPerson(x) & Teaches(x))", "all x.(YoungPerson(x) -> -Teaches(x))", "-exists x.(YearlyPerson(x) & Teaches(x))", "-exists x.(YoungPerson(x) & Teaches(x))", "-exists x.(Year(x) & Teaches(x))", "all x.(YoungPerson(x) -> -Teaches(x))", "\u2013 teaches.", "-exists x.(YoungPerson(x) & Teaches(x))", "-exists x.(YoungPerson(x) & Teaches(x))", "-exists x.(YoungPerson(x) & Teaches(x))"]}
{"id": "folio_validation_413", "nl": "Jerry neither teaches nor is a manager.", "fol": "(-Teaches(Jerry) & -IsManager(Jerry))", "prediction": ["(-(Jerry(Jerry) | Manager(Jerry)))", "-(Jerry(Jerry) & -Teaches(Jerry) & -Manager(Jerry))", "(-Teaches(Jerry) & -Manager(Jerry))", "Jerry -(Teaches(Jerry) | Manager(Jerry)))", "all x.(Jerry(x) -> (-Teaches(x) | Manager(x)))", "Jerry neteaches ni is Manager(Jerry)", "((Jerry(Jerry) | Manager(Jerry)))", "-(Jerry(Jerry) & -Teaches(Jerry) & -Manager(Jerry))", "(-Teaches(Jerry) & -Manager(Jerry))", "all x.(Jerry(x) -> (-Teaches(x) & -Manager(x)))", "exists x.(Jerry(x) & -(Teaches(x) | Manager(x)))", "Jerry -(Teaches(Jerry) | Manager(Jerry)))", "-(Jerry(Jerry,Teaches) | Manager(Jerry,Teaches)))", "((Jerry(Jerry) | Manager(Jerry)))", "-(Jerry(Jerry) | Manager(Jerry)))", "all x.(Jerry(x) -> (-Teaches(x) | Manager(x)))"]}
{"id": "folio_validation_414", "nl": "Rose is young or a student.", "fol": "(IsYoung(Rose) | IsStudent(Rose))", "prediction": ["all x.(Rose(x) -> (Young(x) | Student(x)))", "(Young(Rose) | Student(Rose))", "Rose is YoungOrStudent(Rose)", "all x.(Rose(x) -> (Young(x) | Student(x)))", "Rose is (Young(Rose) | Student(Rose)))", "(Young(Rose) | Student(Rose))", "((Rose(Rose,Young) | Student(Rose,Student)))", "Rose (Young(rose) | Student(rose))", "all x.(Rose(x) -> (Young(x) | Student(x)))", "(Young(Rose) | Student(Rose))", "all x.(Rose(x) -> (Young(x) | Student(x)))", "(Young(Rose) | Student(Rose))", "exists x.(Rose(x) & (Young(x) | Student(x)))", "all x.(Rose(x) -> (Yearly(x) | Student(x)))", "all x.(Rose(x) -> (Young(x) | Student(x)))", "exists x.(Rose(x) & (Young(x) | Student(x)))"]}
{"id": "folio_validation_415", "nl": "Jerry is young.", "fol": "IsYoung(Jerry)", "prediction": ["Jerry is young.", "(Young(Jerry) & Young(Jerry))", "exists x.(Jerry(x) & Young(x))", "Jerry is young.", "(Young(Jerry) & Young(Jerry))", "all x.(Jerry(x) -> Young(x))", "Jerry is young.", "-Young(Jerry)", "exists x.(Jerry(x) & Young(x))", "(Young(Jerry)", "Jerry is young.", "Jerry ist jung.", "Jerry is young.", "Jerry is Young(Jerry)", "all x.(Jerry(x) -> Young(x))", "(Young(Jerry)"]}
{"id": "folio_validation_416", "nl": "Jerry is not young.", "fol": "-IsYoung(Jerry)", "prediction": ["-Young(Jerry)", "Jerry is notyoung(Jerry)", "(Jerry(Jerry) & -Young(Jerry))", "all x.(Jeffrey(x) -> -Young(x))", "(-Young(Jerry))", "Jerry n'est pasyoung.", "Jerry is notyoung.", "(-YearOf(Jerry))", "exists x.(Jerry(x) & -Young(x))", "Jerry is notyoung(Jerry)", "-Young(Jerry)", "(-Year(Jerry))", "Jerry is notYoung(Jerry)", "(-Yearly(Jerry)", "-Young(Jerry)", "-Young(Jerry)"]}
{"id": "folio_validation_417", "nl": "Rose is a human or a manager.", "fol": "(IsHuman(Rose) | IsManager(Rose))", "prediction": ["all x.(Rose(x) -> (Human(x) | Manager(x)))", "(Human(Rose) | Manager(Rose))", "all x.(Rose(x) -> (Human(x) | Manager(x)))", "(Human(Rose) | Manager(Rose))", "(HasHuman(Rose,HasManager(Rose))", "all x.(Rose(x) -> (Human(x) | Manager(x)))", "(Human(Rose) | Manager(Rose))", "all x.(Rose(x) -> (Human(x) | Manager(x)))", "exists x.(Rose(x) & Human(x) | Manager(x))", "(Human(Rose) | Manager(Rose))", "exists x.(Roose(x) & (Human(x) | Manager(x)))", "all x.(Rose(x) -> (Human(x) | Manager(x)))", "(Human(Rose) | Manager(Rose))", "exists x.(Rose(x) & Human(x) & Manager(x))", "all x.(Rose(x) -> (Human(x) | Manager(x)))", "all x.(Rose(x) -> (Human(x) | Manager(x)))"]}
{"id": "folio_validation_418", "nl": "Rose is a human or Jerry is a manager.", "fol": "(IsHuman(Rose) | IsManager(Jerry))", "prediction": ["(all x.(Rose(x) -> Human(x)) | (Jerry(x) -> Manager(x))))", "((Rose(Rose) & Human(Rose)) | Jerry(Rose) & Manager(Rose)))", "all x y.((Rose(x) & Jerry(y)) -> (Human(x) | Manager(y)))", "(exists x.(Rose(x) & Human(x)) | exists y.(Jerry(y) & Manager(y))))", "(all x.(Rose(x) -> Human(x)) | (Jerry(x) -> Manager(x))))", "((Rose(Rose) & Human(Rose)) | Jerry(Rose) & Manager(Rose)))", "exists x.(Rose(x) | Jerry(x))", "all x.((Rose(x) | Jerry(x)) -> Human(x))", "((Rose(Rose) | Jerry(Rose)) -> Human(Rose)) | Jerry(Jerry) -> Manager(Jerry)))", "all x y.((Rose(x) & Jerry(y)) -> (Human(x) | Manager(y)))", "(all x.(Rose(x) -> Human(x)) | (Jerry(x) -> Manager(x))))", "(exists x.(Rose(x) & Human(x)) | exists y.(Jerry(y) & Manager(y))))", "(all x.(Rose(x) -> Human(x)) | all y.(Jerry(y) -> Manager(y))))", "exists x.(Rose(x) | Jerry(x))", "all x.((Rose(x) | Jerry(x)) -> Human(x))", "all x y.((Rose(x) & Jerry(y)) -> (Human(x) | Manager(y)))"]}
{"id": "folio_validation_419", "nl": "It is not true that Rose is a student and Jerry is a human.", "fol": "-(IsStudent(Rose) & IsHuman(Jerry))", "prediction": ["(-(Rose(Rose) & Jerry(Rose)) -> Student(Rose)) & Jerry(Rose) -> Human(Rose))", "(-(Student(Rose) & Human(Rose)) -> -Student(Rose)) & Human(Rose))", "-((Rose(Rose) & Jerry(Rose)) -> Human(Rose))", "all x.((Rose(x) -> -Student(x) & Jerry(x)) -> Human(x))", "all x y.((Rose(x) & Jerry(y)) -> (-Student(x) & Human(y)))", "(-exists x.(Student(x) & Rose(x)) & exists y.(Human(y) & Jerry(y))))", "exists x.(Student(x) & Human(x))", "(-(Rose(Rose) & Jerry(Rose)) & Human(Rose))", "((Rose(Rose) & Jerry(Rose)) -> -Student(Rose) & Human(Rose)))", "(-exists x.(Student(x) & Student(x) & Human(x)))", "-((Rose(Rose) & Jerry(Rose)) & Human(Rose))", "all x y.((Rose(x) & Jerry(y)) -> (-Student(x) & Human(y)))", "exists x.(Student(x) & Student(x) & Human(x))", "-((Rose(Rose) & Jerry(Rose)) -> Human(Rose))", "all x y.((Rose(x) & Jerry(y)) -> (-Student(x) & Human(y)))", "-((Rose(Rose) & Jerry(Rose)) | Jerry(Rose)))"]}
{"id": "folio_validation_420", "nl": "New Vessel Press is a publishing house which specializes in translating foreign literature into English.", "fol": "(IsPublishingHouse(Newvesselpress) & SpecializesInTranslation(Newvessel,Translatingforeignliteratureintoenglish))", "prediction": ["all x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingFrenchLiterature(x) & SpecializesInTranslatingEnglish(x)))", "all x y.((NewVesselPress(x) & ForeignLiterature(y)) -> SpecializesInTranslatingIntoEnglish(x,y))", "NewVesselPress is a publishinghouse which specialisesInTranslatingFrenchLiteratureIntoEnglish(NewVesselPress))", "NewVesselPress.com is a publishinghouse which specialisesInTranslatingFrenchLiteratureIntoEnglish(NewVesselPress))", "NewVesselPress (PublishingHouse) & SpecializesInTranslatingFrenchLiteratureIntoEnglish(NewVesselPress))", "all x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingForeignLiterature(x) & SpecializesInTranslatingIntoEnglish(x)))", "(NewVesselPress(NewVesselPress) & TranslatesFrenchLiterature(NewVesselPress))", "all x y.((NewVesselPress(x) & PublishingHouse(y)) -> (SpecializesInTranslatingFrenchLiterature(x,y) & SpecializesInTranslatingEnglish(y,x)))", "NewVesselPress is a publishinghouse which specialisesInTranslatingForeignLiteratureIntoEnglish(NewVesselPress))", "all x y.((NewVesselPress(x) & ForeignLiterature(y)) -> SpecializesInTranslatingIntoEnglish(x,y))", "All x.(NewVesselPress(x) -> (PublishingHouse(x) & TranslatesFrenchLiteratureIntoEnglish(x)))", "All x.((NewVesselPress(x) & TranslatesForeignLiteratureIntoEnglish(x)) -> SpecializesIn(x,English,FrenchLiterature))", "all x y.((NewVesselPress(x) & ForeignLiterature(y)) -> (PublishingHouse(x) & SpecializesInTranslatingIntoEnglish(x,y)))", "All x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingFrenchLiterature(x) & IntoEnglish(x)))", "All x.(NewVesselPress(x) -> (PublishingHouse(x) & TranslatesForeignLiterature(x) & IntoEnglish(x)))", "All x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingForeignLiteratureIntoEnglish(x)))"]}
{"id": "folio_validation_421", "nl": "All of New Vessel Press's published books are in English.", "fol": "all x.((IsBook(x) & PublishedByPublisher(x,Newvesselpress)) -> IsInLanguage(x,English))", "prediction": ["all x.(PublishedBook(x) -> NewVesselPress(x))", "all x.(PublishedBook(x) -> (NewVesselPress(x) & InEnglish(x)))", "all x.((NewVesselPress(x) & PublishedBook(x)) -> English(x))", "all x.(NewVesselPressPublishedBooks(x) -> English(x))", "All of NewVesselPress'sPublishedBooksInEnglish(n) -> PublishedIn(n))", "all x y.((NewVesselPress(x) & Book(y)) -> PublishedInEnglish(x,y))", "(PublishedBooks(NewVesselPress,English))", "all x.(NewVesselPressPublishedBooks(x) -> InEnglish(x))", "All of NewVesselPress'sPublishedBooksInEnglish(NewVesselPress,UK)", "All of NewVesselPress'sPublishedBooks(NewVesselPress) -> English(NewVesselPress))", "all x y.((NewVesselPress(x) & Book(y)) -> PublishedInEnglish(x,y))", "all x.((NewVesselPress(x) & PublishedBook(x)) -> English(x))", "all x.(PublishedBook(x) -> NewVesselPress(x))", "all x.(PublishedBook(x) -> (NewVesselPressPublishedBook(x) & InEnglish(x)))", "All of NewVesselPress'sPublishedBooksInEnglish(x) -> PublishedInEnglish(x))", "all x y.((NewVesselPress(x) & Book(y)) -> PublishedInEnglish(x,y))"]}
{"id": "folio_validation_422", "nl": "Neapolitan Chronicles is a book published by New Vessel Press.", "fol": "(IsBook(Neapolitanchronicles) & PublishedByPublisher(Neapolitanchronicles,Newvesselpress))", "prediction": ["all x.(NeapolitanChronicles(x) -> PublishedByNewVesselPress(x))", "(NewVesselPress(NeapolitanChronicles) & PublishedBy(NeapolitanChronicles))", "NeapolitanChronicles(n) & PublishedByNewVesselPress(n) & PublishedByNewVesselPress(n))", "(NeapolitanChronicles(Neapolitan) & NewVesselPress(Neapolitan))", "NeapolitanChronicles(n) -> PublishedByNewVesselPress(n))", "(PublishedByNewVesselPress(NeapolitanChronicles))", "NeapolitanChronicles(n) & NewVesselPress(n) & PublishedBy(n))", "all x y.((NeapolitanChronicles(x) & NewVesselPress(y)) -> PublishedBy(x,y))", "all x.(NeapolitanChronicles(x) -> PublishedByNewVesselPress(x))", "(NewVesselPress(NeapolitanChronicles) & PublishedBy(NeapolitanChronicles))", "NeapolitanChronicles.com (Book) & PublishedByNewVesselPress(x))", "all x.(NeapolitanChronicles(x) -> PublishedByNewVesselPress(x))", "NeapolitanChronicles(x) -> PublishedByNewVesselPress(x))", "NeapolitanChronicles.com is a book published by NewVesselPress.", "All x.(NeapolitanChronicles(x) -> PublishedByNewVesselPress(x))", "All x.(NeapolitanChronicles(x) -> PublishedByNewVesselPress(x))"]}
{"id": "folio_validation_423", "nl": "Neapolitan Chronicles was translated from Italian.", "fol": "TranslatedFromLanguage(Neapolitanchronicles,Italian)", "prediction": ["all x.(NeapolitanChronicles(x) -> TranslatedFromItalian(x))", "(NeapolitanChronicles(n) & TranslatedFromItalian(n))", "all x y.((NeapolitanChronicle(x) & Italian(y)) -> TranslatedFrom(x,y))", "NeapolitanChronicles(n) & TranslatedFromItalian(n))", "(TranslatedFromItalian(NeapolitanChronicles))", "NeapolitanChronicles(Neapolitan) & TranslatedFromItalian(Neapolitan))", "-(NeapolitanChronicles(n) & TranslatedFromItalian(n))", "all x y.((NeapolitanChronicles(x) & Italian(y)) -> TranslatedFrom(x,y))", "all x.(NeapolitanChronicles(x) -> TranslatedFromItalian(x))", "(NeapolitanChronicles(n) & TranslatedFromItalian(n))", "(TranslatedFromItalian(NeapolitanChronicles))", "NeapolitanChronicles(x) -> TranslatedFromItalian(x))", "(NeapolitanChronicles(Neapolitan) & TranslatedFromItalian(Neapolitan))", "all x y.((NeapolitanChronicle(x) & Italian(y)) -> TranslatedFrom(x,y))", "all x.(NeapolitanChronicles(x) -> TranslatedFromItalian(x))", "All x.(NeapolitanChronicles(x) -> TranslatedFromItalian(x))"]}
{"id": "folio_validation_424", "nl": "Palace of Flies is a book published by New Vessel Press.", "fol": "(IsBook(Palaceofflies) & PublishedByPublisher(Palaceofflies,Newvesselpress))", "prediction": ["all x.(PalaceOfFlies(x) -> PublishedByNewVesselPress(x))", "all x.((Book(x) & PublishedByNewVesselPress(x)) -> PalaceOfFlies(x))", "(Book(PalaceOfFlies) & NewVesselPress(NewVesselPress))", "the PalaceOfFlies(PalaceOfFlies(PalaceOfFlies(PalaceOfFlies) is a book published by NewVesselPress(PalaceOfFlies))", "the Book published by NewVesselPress(PalaceOfFlies)", "(PublishedByNewVesselPress(PalaceOfFlies) & Book(PalaceOfFlies))", "all x y.((Book(x) & PalaceOfFlies(x)) -> PublishedByNewVesselPress(x))", "(Book(PalaceOfFlies) & PublishedByNewVesselPress(PalaceOfFlies))", "all x.(PalaceOfFlies(x) -> PublishedByNewVesselPress(x))", "all x y.((PalaceOfFlies(x) & Book(y)) -> PublishedByNewVesselPress(x))", "PalaceOfFlies(PalaceOfFlies) is a book published by NewVesselPress.", "all x y.((Book(x) & NewVesselPress(y)) -> PalaceOfFlies(x))", "all x.(PalaceOfFlies(x) -> PublishedByNewVesselPress(x))", "All x.((Book(x) & PublishedByNewVesselPress(x)) -> PalaceOfFlies(x))", "All x.(PalaceOfFlies(x) -> PublishedByNewVesselPress(x))", "All x.(PalaceOfFlies(x) -> PublishedByNewVesselPress(x))"]}
{"id": "folio_validation_425", "nl": "Neapolitan Chronicles is an English book.", "fol": "(IsBook(Neapolitanchronicles) & IsInLanguage(Neapolitanchronicles,English))", "prediction": ["all x.(NeapolitanChronicles(x) -> EnglishBook(x))", "NeapolitanChronicles(x) & EnglishBook(x))", "(EnglishBook(NeapolitanChronicles) & Contains(NeapolitanChronicles))", "(EnglishBook(NeapolitanChronicles) & -EnglishBook(NeapolitanChronicles))", "NeapolitanChronicles(x) -> EnglishBook(x))", "all x.(NeapolitanChronicles(x) -> EnglishBook(x))", "(EnglishBook(NeapolitanChronicles) & NeapolitanChronicles(NeapolitanChronicles))", "NeapolitanChronicles.(EnglishBook)", "all x.(NeapolitanChronicles(x) -> EnglishBook(x))", "NeapolitanChronicles(x) & EnglishBook(x))", "(EnglishBook(NeapolitanChronicles) & Contains(NeapolitanChronicles))", "NeapolitanChronicles.com is anEnglishBook.", "All x.(NeapolitanChronicles(x) -> EnglishBook(x))", "NeapolitanChronicles(x) -> EnglishBook(x))", "(EnglishBook(NeapolitanChronicles) & WrittenIn(NeapolitanChronicles))", "all x.(NeapolitanChronicles(x) -> EnglishBook(x))"]}
{"id": "folio_validation_426", "nl": "Harry Potter was published by New Vessel Press.", "fol": "PublishedByPublisher(Harrrypotter,Newvesselpress)", "prediction": ["all x.(HarryPotter(x) -> PublishedByNewVesselPress(x))", "Harry Potter was published by NewVesselPress.", "(PublishedByNewVesselPress(HarryPotter) & HarryPotter(HarryPotter))", "(NewVesselPress(HarryPotter) & PublishedBy(HarryPotter))", "all x y.((HarryPotter(x) & NewVesselPress(y)) -> PublishedBy(x,y))", "All x.(HarryPotter(x) -> PublishedByNewVesselPress(x))", "Harry Potter was published by NewVesselPress.", "Harry Potter & NewVesselPress(Harry Potter,NewVesselPress)", "all x.(HarryPotter(x) -> NewVesselPress(x))", "(PublishedByNewVesselPress.com)", "Harry Potter was published by NewVesselPress.", "all x y.((HarryPotter(x) & NewVesselPress(y)) -> PublishedBy(x,y))", "All x.(HarryPotter(x) -> PublishedByNewVesselPress(x))", "Harry Potter was published by NewVesselPress.", "All x.(HarryPotter(x) -> PublishedByNewVesselPress(x))", "All x.(HarryPotter(x) -> NewVesselPress(x))"]}
{"id": "folio_validation_427", "nl": "Palace of Flies was translated from Italian.", "fol": "TranslatedFromLanguage(Palaceofflies,Italian)", "prediction": ["all x.(PalaceOfFlies(x) -> TranslatedFromItalian(x))", "(TranslatedFromItalian(PalaceOfFlies))", "PalaceOfFlies(Palais) & TranslatedFromItalian(Palais)", "the translation of PalaceOfFlies(PalaceOfFlies) -> TranslatedFromItalian(PalaceOfFlies))", "all x y.((PalaceOfFlies(x) & Italian(y)) -> TranslatedFrom(x,y))", "The PalaceOfFlies was translated from Italian.", "-TranslatedFromItalian(PalaceOfFlies)", "all x.(PalaceOfFlies(x) -> TranslatedFromItalian(x))", "The PalaceOfFlies(Palais) was translated from Italian.", "PalaceOfFlies was translated from Italian.", "(TranslatedFromItalian(PalaceOfFlies))", "PalaceOfFlies(Palais) & TranslatedFromItalian(Palais)", "All x.(PalaceOfFlies(x) -> TranslatedFromItalian(x))", "(TranslatedFromItalian(PalaceOfFlies)", "(TranslatedFromItalian(PalestinOfFlies)", "All x.(PalaceOfFlies(x) -> TranslatedFromItalian(x))"]}
{"id": "folio_validation_428", "nl": "If people own a large desktop monitor at their home, then they work regularly and often at home.", "fol": "all x.(OwnsLargeDesktopMonitor(x) -> WorksRegularlyAtHome(x))", "prediction": ["all x.((Person(x) & LargeDesktopMonitor(x)) -> (WorkRegularly(x) & WorkOftenAtHome(x)))", "all x.((Person(x) & OwnsLargeDesktopMonitor(x)) -> (WorksRegularly(x) & WorksOftenAtHome(x)))", "all x.(OwnsLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))", "all x y.((Person(x) & LargeDesktopMonitor(x) & Home(y)) -> (WorksRegularly(x,y) & WorksOftenAtHome(x,y)))", "all x.(OwnsLargeDesktopMonitor(x) -> (WorksRegularly(x) & WorksOftenAtHome(x)))", "all x.((OwnsLargeDesktopMonitor(x) & AtHome(x)) -> (WorkRegularly(x) & WorkOftenAtHome(x)))", "all x y.((Person(x) & LargeDesktopMonitor(y) & OwnsAtHome(x,y)) -> (WorksRegularly(x) & WorksOftenAtHome(x)))", "all x.((Person(x) & LargeDesktopMonitor(x) & AtHome(x)) -> (WorkRegularly(x) & WorkOftenAtHome(x)))", "all x y z.((Person(x) & DesktopMonitor(y) & Home(z) & Owns(x,y,z)) -> (WorksRegularly(x,y) & WorksOftenAtHome(x)))", "all x y.((Person(x) & LargeDesktopMonitor(x) & Home(y)) -> (WorksRegularly(x,y) & WorksOftenAtHome(x,y)))", "all x y.((OwnsLargeDesktopMonitor(x) & Home(y)) -> WorksRegularlyAndOftenAtHome(x,y))", "exists x.(LargeDesktopMonitor(x) & OwnsAtHome(x)) -> WorkRegularlyAndOftenAtHome(x))", "all x.(OwnsLargeDesktopMonitorAtHome(x) -> (WorkRegularly(x) & WorkOftenAtHome(x)))", "all x.((Person(x) & OwnsLargeDesktopMonitor(x)) -> WorksRegularlyAndOftenAtHome(x))", "all x y.((Person(x) & LargeDesktopMonitor(y) & OwnsAtHome(x,y)) -> WorksRegularlyAndOftenAtHome(x))", "all x.(OwnsLargeDesktopMonitor(x) -> (WorkRegularly(x) & WorkOftenAtHome(x)))"]}
{"id": "folio_validation_429", "nl": "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.", "fol": "all x.(HasImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))", "prediction": ["all x.((Person(x) & FullyStockedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x y.((Person(x) & FullyStockedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(y))", "all x.((Person(x) & FullyStampedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.((Person(x) & FullySpaciousHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.((Person(x) & FullyStockedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.((Person(x) & FullyStockedAndImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x y.((Person(x) & FullyStockedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x,y))", "all x y.((Person(x) & FullyStampedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(y))", "all x.((Person(x) & FullySstockedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.((People(x) & FullyStockedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.(FullyStockedAndImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))", "all x.((Person(x) & FullySpaciousHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.((People(x) & FullyStockedAndImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x y.((Person(x) & FullySpaciousHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnerOfLargeDesktopMonitor(y))", "all x.((Person(x) & FullyStandardizedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.((Person(x) & FullStockagedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))"]}
{"id": "folio_validation_430", "nl": "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.", "fol": "all x.(WorksRegularlyAtHome(x) -> TidiesAndOrganizesHome(x))", "prediction": ["all x.((WorksRegularly(x) & OftenAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "all x.(WorksRegularlyAndOftenAtHome(x) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "all x y.((WorksRegularly(x) & WorksAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(y))", "all x.((Person(x) & WorksRegularly(x) & OftenAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "all x y.((Person(x) & WorkRegularly(x) & WorkAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x,y))", "all x.((WorksRegularly(x) & OftenAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "all x y z.((WorksRegularly(x) & WorkesAtHome(y) & WorkesAtHome(z)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x,y,z))", "all x.((WorksRegularly(x) & WorksAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "all x y.((WorksRegularly(x) & WorkesAtHome(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(y)) -> SpendsFreeTime(x,y))", "all x.(WorksRegularlyAndOftenAtHome(x) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "all x.(WorksRegularlyAndOtherAtHome(x) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "all x y.((Person(x) & WorksRegularly(x) & WorksOfOftenAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x,y))", "all x y.((WorksRegularly(x) & WorksAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(y))", "all x.((WorksRegularly(x) & OftenAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "all x.((WorksRegularly(x) & WorksAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "all x.(WorksRegularlyAndOftenAtHome(x) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))"]}
{"id": "folio_validation_431", "nl": "All people who work regularly and often at home visit the office supply store regularly.", "fol": "all x.(WorksRegularlyAtHome(x) -> VisitsOfficeSupplyStore(x))", "prediction": ["all x.((WorksRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.(WorksRegularlyAndOftenAtHome(x) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.((Person(x) & WorksRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x y.((Person(x) & WorkRegularly(x) & WorkAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "(WorksRegularlyAndOftenAtHome(Person) & VisitsOfficeSupplyStoreRegularly(Person))", "all x.((WorksRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x y.((WorksRegularly(x) & WorksAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(y))", "all x.(WorksRegularlyAndOftenAtHome(x) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.(WorksRegularlyAndOtherAtHome(x) -> VisitsOfficeSupplyStoreRegularly(x))", "all x y.((Person(x) & WorkRegularly(x) & WorkAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.((Person(x) & WorksRegularly(x) & WorksAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.((WorksRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.((WorksRegularly(x) & WorksAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.(WorksRegularlyAndAtHome(x) -> VisitsOfficeSupplyStoreRegularly(x))", "all x y.((Person(x) & WorksRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x y.((WorksRegularly(x) & WorksAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(y))"]}
{"id": "folio_validation_432", "nl": "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ", "fol": "all x.(TidiesAndOrganizesHome(x) -> -GoesToBedLate(x))", "prediction": ["all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLast(x) & WakesUpAfterMorning(x)))", "all x y.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x) & Home(y)) -> -(GoesToBedLater(x) & WakesUpAfterMorning(x)))", "all x.((People(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLast(x) & WakesUpEveryDayAfterMorning(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLater(x) & WakesUpAfterMorning(x)))", "all x.(SpoilsFreeTimeTidyingAndOrganizingSpaces(x) -> -(GoesToBedLast(x) & WakesUpAfterMorning(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingSpaces(x) & OrganizesSpaces(x)) -> -(GoesToBedLater(x) & WakesUpAfterMorning(x)))", "all x y z.((Person(x) & FreeTime(y) & TidyingAndOrganizingSpaces(z) & SpendsInHome(x,y,z)) -> -(GoesToBedLast(x) & WakesUpAfterMorning(x)))", "all x y.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLater(x) & WakesUpAfterMoon(x)))", "all x.((People(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLater(x) & WakesUpAfterMorning(x)))", "(all x.((Person(x) & SpendsFreeTimeTidyingSpaces(x) & OrganizesSpaces(x)) -> -(GoToBedLast(x) & WakeUpEveryDayAfterMoon(x))))", "all x y.((People(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x) & Home(y)) -> -(GoToBedLast(x) & WakeUpAfterMorning(x)))", "all x y.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLast(x) & WakesUpAfterMorning(x)))", "all x.(SpoilsFreeTimeTidyingAndOrganizingSpaces(x) -> -(GoesToBedLater(x) & WakesUpAfterMorning(x)))", "all x y.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x) & Home(y)) -> -(GoesToBedLast(x) & WakesUpAfterMorning(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> (-GoToBedLater(x) & WakeUpEveryDayAfterMorning(x)))", "all x.(SpoilsFreeTimeTidyingAndOrganizingSpaces(x) -> (-GoToBedLater(x) & WakeUpEveryDayAfterMorning(x)))"]}
{"id": "folio_validation_433", "nl": "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. ", "fol": "((GoesToBedLate(Remy) & TidiesAndOrganizesHome(Remy) & -(-GoesToBedLate(Remy) & -TidiesAndOrganizesHome(Remy))) | (-(GoesToBedLate(Remy) & TidiesAndOrganizesHome(Remy)) & -GoesToBedLate(Remy) & -TidiesAndOrganizesHome(Remy)))", "prediction": ["(all x.(Remy(x) -> (GoesToBedLast(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoesToBedLast(x) & WakesUpAfterMorning(x) & -SpoilsFreeTimeTidyingAndOrganizingSpaces(x))))", "all x y.((Remy(x) & BedLay(y)) -> ((GoesToBedLay(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) | (-GoesToBedLay(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))))", "(all x.(Remy(x) -> (GoesToBedLay(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoesToBedLay(x) & WakesUpAfterMorning(x) & -SpoilsFreeTimeTidyingAndOrganizingSpaces(x))))", "(all x y.((Remy(x) & BedLay(y)) -> (GoesToBedLay(x,y) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoesToBedLay(x,y) & WakesUpAfterMorning(x) & -SpoilsFreeTimeTidyingAndOrganizingSpaces(x))))", "((Remy) & GoesToBedLay(remy) & WakesUpAfterMorning(remy)) | (-Remy(remy) & GoesToBedLay(remy) & WakesUpAfterMorning(remy) & SpendsFreeTimeTidyingAndOrganizingSpaces(remy))))", "all x y.((Remy(x) & BedLate(x) & WakesUpAfterMorning(x)) -> ((GoesToBedLast(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) | (-GoesToBedLast(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(y))))", "all x y z.((Remy(x) & BedLay(y) & WakesUpAfterMorning(x,y) & Home(z)) -> ((GoesToBedLay(x) & WakesUpAfterMorning(x,z) & SpendsFreeTimeTidyingSpaces(x,z)) | (-GoesToBedLay(x,y,z) & WakesUpAfterMorning(x,z) & Home(x) & SpendsFreeTimeTidyingSpaces(x) & Home(x)))))", "(all x.(Remy(x) -> (GoesToBedLast(x) & WakesUpAfterMahout(x) & SpendsFreeTimeTidyingSpaces(x))) | (-GoesToBedLast(x) & WakesUpAfterMahout(x) & -SpoilsFreeTimeTidyingSpaces(x) & SpendsFreeTimeOrganizingSpaces(x))))", "all x.(Remy(x) -> ((GoesToBedLate(x) & WakesUpAfterMahout(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) | (-GoesToBedLate(x) & WakesUpAfterMahout(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)))))", "((Remy) & GoesToBedLast(remy) & WakesUpAfterMorning(remy)) | (-Remy(remy) & GoesToBedLast(remy) & WakesUpAfterMorning(remy) & SpendsFreeTimeTidyingAndOrganizingSpaces(remy))))", "(all x y.((Remy(x) & BedLate(x)) -> (GoesToBedLast(x,y) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoToBedLast(y) & WakesUpAfterMorning(y) & -SpoilsFreeTimeTidyingAndOrganizingSpaces(x))))", "all x.(Remy(x) -> (((GoesToBedLast(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) | (-GoesToBedLast(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)))))", "all x y.((Remy(x) & BedLay(x) & WakesUpAfterMahon(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) | (-GoToBedLay(x) & WakesUpAfterMahon(x) & -SpoilsFreeTimeTidyingAndOrganizingSpaces(y))))", "all x.(Remy(x) -> ((GoesToBedLate(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingSpaces(x) & -SpoilsFreeTimeTidyingSpaces(x)) | (-GoesToBedLate(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingSpaces(x) & SpendsFreeTimeTidyingSpaces(x))))", "(all x.(Remy(x) -> (GoesToBedLay(x) & WakesUpAfterPaint(x) & SpendsFreeTimeTiffiningAndOrganizingSpaces(x))) | (-GoesToBedLay(x) & WakesUpAfterPaint(x) & -SpontaneouslyTiffiningAndOrganizingSpaces(x))))", "(all x.(Remy(x) -> ((GoesToBedLay(x) & WakesUpAfterPaint(x) & SpendsFreeTimeTiffiningAndOrganizingSpaces(x)) | (-GoesToBedLay(x) & WakesUpAfterPaint(x) & SpendsFreeTimeTiffiningAndOrganizingSpaces(x)))))"]}
{"id": "folio_validation_434", "nl": "Remy visits the office supply store regularly.", "fol": "VisitsOfficeSupplyStore(Remy)", "prediction": ["(VisitsOfficeSupplyStore(Remy) & Regularly(Remy))", "all x.(Remy(x) -> VisitsOfficeSupplyStore(x))", "Remy visits the office supply store regularly.", "(Remy visitsOfficeSupplyStore(Remy) & Regularly(Remy))", "all x y.((Remy(x) & OfficeSupplyStore(y)) -> VisitsRegularly(x,y))", "-RemyVisitsOfficeSupplyStoreRegularly(Remy))", "(RemyVisitsOfficeSupplyStore(Remy) & Regularly(Remy))", "Remy visits the officesupplyStoreRegularly(Remy)", "Remy visitsOfficeSupplyStoreRegularly(Remy)", "-Remy visitsOfficeSupplyStoreRegularly(Remy))", "(VisitsOfficeSupplyStore(Remy) & Regularly(Remy))", "Remy visits officesupplyStore(regularly)", "Remy VisitsOfficeSupplyStoreRegularly(Remy)", "(Remy visitsOfficeSupplyStore(remy) & Regularly(remy))", "Remy visits the office supply store regularly.", "Remy visitsOfficeSupplyStoreRegularly."]}
{"id": "folio_validation_435", "nl": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly.", "fol": "(HasImpressiveHomeOffice(Remy) & VisitsOfficeSupplyStore(Remy))", "prediction": ["all x.(Remy(x) -> (FullyStampedHomeOffice(x) & ImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "(FullyStayedAndImpressiveHomeOffice(Remy) & VisitsOfficeSupplyStore(Remy))", "(all x.(Remy(x) -> FullyStockedAndImpressiveHomeOffice(x)) & VisitsOfficeSupplyStore(x))", "all x.(Remy(x) -> (FullyStampedHomeOffice(x) & ImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "(Remy(Remy) & FullyStockedAndImpressiveHomeOffice(Remy) & VisitsOfficeSupplyStore(Remy))", "(HasFullyStampedAndImpressiveHomeOffice(Remy) & VisitsOfficeSupplyStore(Remy))", "(FullyStockedAndImpressiveHomeOffice(Remy) & VisitsOfficeSupplyStore(Remy))", "all x y.((Remy(x) & OfficeSupplyStore(y)) -> (FullyStamped(x) & ImpressiveHomeOffice(x) & VisitsRegularly(x,y)))", "(all x.(Remy(x) -> (FullyStampedHomeOffice(x) & ImpressiveHomeOffice(x))) & VisitsOfficeSupplyStore(x)))", "Remy has a fullystocked and impressive home office and also visits the office supply store regularly.", "all x.(Remy(x) -> (FullyStamped(x) & ImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "(Remy(Remy) & FullyStockedAndImpressiveHomeOffice(Remy) & VisitsOfficeSupplyStore(Remy))", "all x.(Remy(x) -> (FullyStamped(x) & ImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "Remy has a fullystocked and impressive home office and visits the office supply store regularly.", "all x.(Remy(x) -> (HasFullyStampedAndImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "all x.(Remy(x) -> (HasFullyStampedAndImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))"]}
{"id": "folio_validation_436", "nl": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.", "fol": "((GoesToBedLate(Remy) | VisitsOfficeSupplyStore(Remy)) -> -(TidiesAndOrganizesHome(Remy) | HasImpressiveHomeOffice(Remy)))", "prediction": ["all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullyStockedAndImpressiveHomeOffice(x)))", "all x y.((Remy(x) & (GoesToBedLast(x) & WakesUpAfterMorning(x) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullyStockedAndImpressiveHomeOffice(y)))", "all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMoon(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullyStockedAndImpressiveHomeOffice(x)))", "(all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMoon(x))) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullyStockedAndImpressiveHomeOffice(x)))", "all x y.((Remy(x) & BedLate(x) & WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x)) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullyStockedAndImpressiveHomeOffice(y)))", "all x.((Remy(x) & (GoesToBedLate(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullySaturatedAndImpressiveHomeOffice(x)))", "all x y.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTime(x) & -HasFullySstockedHomeOffice(y) & ImpressiveHomeOffice(y)))", "(all x.((Remy(x) & BedLate(x) & WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x))) -> (-Remy(x) & TiltsAndOrganizesSpaces(x)))", "all x.((Remy(x) & (GoesToBedLast(x) & WakesUpAfterMorning(x) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingSpaces(x) & -HasFullySstockedHomeOffice(x) & ImpressiveHomeOffice(x)))", "all x y.((Remy(x) & (GoesToBedLate(x) & WakesUpAfterMorning(x) | VisitsOfficeSupplyStore(x) & Regularly(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullyStockedAndImpressiveHomeOffice(y)))", "(all x.((Remy(x) & (GoesToBedLast(x) & WakesUpAfterMoon(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullySaturatedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLater(x) | WakesUpAfterMoon(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullyStockedAndImpressiveHomeOffice(x)))", "(all x.((Remy(x) & (GoesToBedLate(x) & WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x))) -> (-RemySpoilsFreeTimeTidyingAndOrganizingSpaces(x)) & -RemyHasFullySstockedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLate(x) & WakesUpAfterMorning(x) | VisitsOfficeSupplyStoreRegularly(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullySaturatedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLate(x) & WakesUpAfterMoon(x) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullySaturatedAndImpressiveHomeOffice(x)))", "all x.(Remy(x) -> ((GoesToBedLast(x) & WakesUpAfterMoon(x)) | VisitsOfficeSupplyStoreRegularly(x))))"]}
{"id": "folio_validation_437", "nl": "All humans are mortal.", "fol": "all x.(IsHuman(x) -> IsMortal(x))", "prediction": ["all x.(Human(x) -> Mortal(x))", "all x.(Human(x) -> Mortal(x))", "(all x.(Human(x) -> Mortal(x)))", "all x.(Human(x) -> Mortal(x))", "(All x.(Human(x) -> Mortal(x)))", "all x.(Human(x) -> Mortal(x))", "exists x.(Habitat(x) & Mortal(x))", "all x.(Human(x) -> Mortal(x))", "exists x.(Habitat(x) & Mortal(x))", "all x.(Human(x) -> Mortal(x))", "all x.(Human(x) -> Mortal(x))", "all x.(Human(x) -> Mortal(x))", "all x.(Human(x) -> Mortal(x))", "all x.(Human(x) -> Mortal(x))", "all x.(Human(x) -> Mortal(x))", "all x.(Human(x) -> Mortal(x))"]}
{"id": "folio_validation_438", "nl": "All Greeks are humans.", "fol": "all x.(IsGreek(x) -> IsHuman(x))", "prediction": ["all x.(Greek(x) -> Human(x))", "all x.(Greek(x) -> Human(x))", "(all x.(Greek(x) -> Human(x))", "all x y.((Greek(x) & Human(y)) -> Human(x))", "all x.(Greek(x) -> Human(x))", "(all x.(Greek(x) -> Human(x))", "all x.(Greek(x) -> Human(x))", "(All x.(Greek(x) -> Human(x))", "all x.(Gray(x) -> Human(x))", "all x.(Greek(x) -> Human(x))", "all x.(Greek(x) -> Human(x))", "all x.(Greek(x) -> Human(x))", "all x.(Grief(x) -> Human(x))", "all x.(Greek(x) -> Human(x))", "all x.(Greek(x) -> Human(x))", "all x.(Grief(x) -> Human(x))"]}
{"id": "folio_validation_439", "nl": "Some Greeks are mortal.", "fol": "exists x.(IsGreek(x) & IsMortal(x))", "prediction": ["exists x.(Greek(x) & Mortal(x))", "exists x.(Greek(x) & Mortal(x))", "exists x.(Greek(x) & Mortal(x))", "exists x.(Greek(x) & Mortal(x))", "exists x.(Greek(x) & Mortal(x))", "exists x y.(Greek(x) & Mortal(y))", "exists x.(Greek(x) & Mortal(x))", "exists x.(Grief(x) & Mortal(x))", "exists x.(Gray(x) & Mortal(x))", "exists x.(Greek(x) & Mortal(x))", "exists x.(Grief(x) & Mortal(x))", "exists x.(Greek(x) & Mortal(x))", "exists x.(Grief(x) & Mortal(x))", "exists x.(Greek(x) & Mortal(x))", "exists x.(Grief(x) & Morbid(x))", "exists x.(Greek(x) & Mortal(x))"]}
{"id": "folio_validation_440", "nl": "No students who work in the library are from the computer science department. ", "fol": "all x.(WorksInLibrary(x) -> -IsComputerScienceStudent(x))", "prediction": ["all x.((Student(x) & WorksInLibrary(x)) -> -ComputerScienceDepartment(x))", "-exists x.(Student(x) & WorksInLibrary(x) & ComputerScienceDepartment(x))", "all x.(WorksInLibrary(x) -> -ComputerScienceDepartment(x))", "all x.((Student(x) & WorksInLibrary(x)) -> -ComputerScienceDepartment(x))", "-exists x.(Student(x) & WorksInLibrary(x) & ComputerScienceDepartment(x))", "all x y.((Student(x) & WorkInLibrary(x)) -> -ComputerScienceDepartment(y))", "all x.((Student(x) & WorksInLibrary(x)) -> -ComputerScienceDepartment(x))", "(-all x.(Student(x) & WorksInLibrary(x)) -> ComputerScientificDepartment(x))", "all x y.((Student(x) & Library(y) & WorksIn(x,y)) -> ComputerScienceDepartment(x))", "all x.((Student(x) & WorkInLibrary(x)) -> ComputerScienceDepartment(x))", "(-exists x.(Student(x) & WorksInLibrary(x)) & -exists y.(ComputerScienceDepartment(y) & WorksInLibrary(x,y))))", "-exists x.(Student(x) & WorksInLibrary(x) & -ComputerScienceDepartment(x))", "-exists x.(Student(x) & WorksInLibrary(x) & FromComputerScienceDepartment(x))", "-exists x.(Student(x) & WorkedInLibrary(x) & ComputerScienceDepartment(x))", "all x.(WorksInLibrary(x) -> -ComputerScienceDepartment(x))", "all x.((Student(x) & WorksInLibrary(x)) -> ComputerScienceDepartment(x))"]}
{"id": "folio_validation_441", "nl": "All students who have part-time jobs offered by the university are students who work in the library. ", "fol": "all x.(HasPartTimeJob(x) -> WorksInLibrary(x))", "prediction": ["all x.((Student(x) & PartTimeJob(x) & OfferedByUniversity(x)) -> WorksInLibrary(x))", "all x.((Student(x) & PartTimeJobOfferedByUniversity(x)) -> WorksInLibrary(x))", "all x y.((Student(x) & PartTimeJob(x) & UniversityOffered(x)) -> WorksInLibrary(x))", "all x y.((Student(x) & PartTimeJob(x) & OfferedByUniversity(x)) -> WorksInLibrary(x))", "all x.((Student(x) & PartTimeJob(x) & OfferedByUniversity(x)) -> WorkInLibrary(x))", "all x.((Student(x) & PartTimeJobsOfferedByUniversity(x)) -> WorksInLibrary(x))", "all x y.((Student(x) & PartTimeJob(y) & OfferedByUniversity(x,y)) -> WorksInLibrary(x))", "all x.(PartTimeJobsOfferedByUniversity(x) -> WorkInLibrary(x))", "all x.((Student(x) & HasPartTimeJobsOfferedByUniversity(x)) -> WorksInLibrary(x))", "all x y.((Student(x) & PartTimeJob(x) & OfferedByUniversity(x,y)) -> WorksInLibrary(x))", "all x.((Student(x) & PartTimeJob(x) & OfferedByUniversity(x)) -> WorksInLibrary(x))", "all x.((Student(x) & PartTimeJobOfferedByUniversity(x)) -> WorkInLibrary(x))", "all x y.((Student(x) & University(y) & PartTimeJob(x,y)) -> WorksInLibrary(x))", "all x.(PartTimeJob(x) -> WorksInLibrary(x))", "all x.((Student(x) & HasPartTimeJob(x) & OfferedByUniversity(x)) -> WorksInLibrary(x))", "all x.((Student(x) & PartTimeJobsOfferedByUniversity(x)) -> WorksInLibrary(x))"]}
{"id": "folio_validation_442", "nl": "All students who take the database course are from the computer science department. ", "fol": "all x.(TakesDatabaseCourse(x) -> IsComputerScienceStudent(x))", "prediction": ["all x.(TakesDatabaseCourse(x) -> ComputerScienceDepartment(x))", "all x.((Student(x) & TakesDatabaseCourse(x)) -> ComputerScienceDepartment(x))", "all x y.((Student(x) & TakesDatabaseCourse(x,y)) -> ComputerScienceDepartment(x))", "all x.(TakesDatabaseCourse(x) -> ComputerScienceDepartment(x))", "(all x.(TakesDatabaseCourse(x) -> ComputerScienceDepartment(x)))", "all x.((Student(x) & TakesDatabaseCourse(x)) -> ComputerScienceDepartment(x))", "all x y.((Student(x) & TakesDatabaseCourse(x,y)) -> ComputerScienceDepartment(y))", "all x.(TakesDatabaseCourses(x) -> ComputerScienceDepartment(x))", "all x y.((Student(x) & TakesDatabaseCourses(x)) -> ComputerScienceDepartment(y))", "all x.(TakesDatabaseCourse(x) -> ComputerScientificDepartment(x))", "all x.((Student(x) & TakesDatabaseCourses(x)) -> ComputerScienceDepartment(x))", "all x.((Student(x) & TakesDatabaseCourse(x)) -> ComputerScientificDepartment(x))", "all x.(TakesDatabaseCourses(x) -> FromComputerScienceDepartment(x))", "all x y.((Student(x) & TakesDatabaseCourse(x,y)) -> ComputerScienceDepartment(x))", "all x y.((Student(x) & TakesDatabaseCourses(x,y)) -> ComputerScientificDepartment(x))", "all x.(TakesDatabaseCourse(x) -> ComputerScienceDepartment(x))"]}
{"id": "folio_validation_443", "nl": "All students instructed by professor David are taking the database course. ", "fol": "all x.(InstructedByProfessorDavid(x) -> TakesDatabaseCourse(x))", "prediction": ["all x.((Student(x) & InstructedByProfessorDavid(x)) -> TakesDatabaseCourse(x))", "all x y.((Student(x) & ProfessorDavid(y)) -> TakesDatabaseCourse(x,y))", "all x.(InstructedByProfessorDavid(x) -> TakesDatabaseCourse(x))", "all x.((Student(x) & InstructedByProfessorDavid(x)) -> TakesDatabaseCourses(x))", "all x y.((Student(x) & InstructedByProfessorDavid(x)) -> TakesDatabaseCourse(x,y))", "(all x.(StudentInstructedByProfessorDavid(x) -> TakesDatabaseCourse(x)))", "all x y.((Student(x) & ProfessorDavid(y)) -> TakesDatabaseCourses(x,y))", "ALL TEAMSInstructedByProfessorDavid(x) -> TakesDatabaseCourse(x))", "all x.(Student(x) -> InstructedByProfessorDavid(x))", "all x.((Student(x) & InstructedByProfessorDavid(x)) -> TakesDatabaseCourse(x))", "all x.(InstructedByProfessorDavid(x) -> TakesDatabaseCourses(x))", "(all x.(StudentInstructedByProfessorDavid(x) -> TakesDatabaseCourses(x))", "all x y.((Student(x) & InstructedByProfessorDavid(x)) -> TakesDatabaseCourses(x,y))", "all x.((Student(x) & InstructedByProfessorDavid(x)) -> DatabaseCourse(x))", "all x.(Instruction(x,y) -> DatabaseCourse(y))", "all x y.((Student(x) & ProfessorDavid(y)) -> TakesDatabaseCourse(x,y))"]}
{"id": "folio_validation_444", "nl": "All students working in the lab are instructed by professor David. ", "fol": "all x.(WorksInLab(x) -> InstructedByProfessorDavid(x))", "prediction": ["all x.((Student(x) & WorkingInLab(x)) -> InstructedByProfessorDavid(x))", "all x y.((Student(x) & Lab(y) & InstructedByProfessorDavid(x,y)) -> InstructedBy(x,y))", "all x.(Student(x) -> InstructedByProfessorDavid(x))", "all x.((Student(x) & WorksInLab(x)) -> Instruction(x,professorDavid))", "all x y.((Student(x) & Lab(y) & InstructedByProfessorDavid(x,y)) -> InstructedByDavid(x,y))", "all x y z.((Student(x) & Lab(y) & ProfessorDavid(z)) -> InstructedBy(x,y,z))", "(All x.(StudentWorkingInLab(x) -> InstructedByProfessorDavid(x))", "(WorkingInLab(Student) & InstructedByProfessorDavid(Student))", "all x.(WorkingInLab(x) -> InstructionByProfessorDavid(x))", "all x y.((Student(x) & Lab(y)) -> InstructedByProfessorDavid(x,y))", "all x y.((Student(x) & Lab(y) & WorksIn(x,y)) -> InstructedByProfessorDavid(x))", "all x.(WorkingInLab(x) -> InstructedByProfessorDavid(x))", "all x.(Student(x) -> InstructedByProfessorDavid(x))", "all x.((Student(x) & WorkingInLab(x)) -> InstructedByProfessorDavid(x))", "all x y.((Student(x) & Lab(y) & Instruction(x,y)) -> ProfessorDavid(x))", "all x.(Student(x) -> Instruction(x,professor,David))"]}
{"id": "folio_validation_445", "nl": "James is a student working in the lab. ", "fol": "WorksInLab(James)", "prediction": ["all x.((Student(x) & WorkingInLab(x)) -> James(x))", "James is a student working in the lab.", "(StudentWorkingInLab(James) & JamesWorksInLab(James))", "all x.(James(x) -> StudentWorkingInLab(x))", "all x y.((James(x) & Lab(y)) -> StudentWorkingIn(x,y))", "(Student(James) & WorksInLab(James))", "James is a student working in the lab.", "(StudentWorkingInLab(James) & JamesWorksInLab(James))", "all x.((Student(x) & WorkingInLab(x)) -> James(x))", "James is student working inLab.", "all x y.((James(x) & Lab(y)) -> StudentWorking(x,y))", "James is a student working in the lab.", "all x.((Student(x) & WorksInLab(x)) -> JamesWorksInLab(x))", "(StudentWorkingInLab(Jimmy) & James(Jimmy))", "James is student working in lab.", "James is a student working in the lab."]}
{"id": "folio_validation_446", "nl": "Jack neither has a part-time job offered by the university nor works in the lab. ", "fol": "(-HasPartTimeJob(Jack) & -WorksInLab(Jack))", "prediction": ["(-PartTimeJobOfferedByUniversity(Jack) & -WorksInLab(Jack))", "all x.((Jack(x) & -PartTimeJobOfferedByUniversity(x) & -WorksInLab(x)) -> -PartTimeJobOfferedByUniversity(x))", "-(PartTimeJob(Jack) & -WorksInLab(Jack))", "((Jack(Jack) & -PartTimeJobOfferedByUniversity(Jack)) | WorksInLab(Jack)))", "(-PartTimeJob(Jack) & -WorksInLab(Jack))", "(exists x.(Jack(x) & PartTimeJobOfferedByUniversity(x)) & -exists y.(Jack(y) & WorksInLab(y))))", "-exists x.(Jack(x) & -PartTimeJobOfferedByUniversity(x) & -WorksInLab(x))", "-(PartTimeJob(Jack) | WorksInLab(Jack))", "-(HasPartTimeJob(Jack) | WorksInLab(Jack))", "((Jack(Jack) & University(Jack)) -> -PartTimeJob(Jack)) & -WorksInLab(Jack))", "((Jack) & -PartTimeJobOfferedByUniversity(Jack)) | WorksInLab(Jack)))", "-(PartTimeJobOfferedByUniversity(Jack) | WorksInLab(Jack))", "all x.((Jack(x) & -PartTimeJobOfferedByUniversity(x) & -WorksInLab(x)) -> -(Jack(x) & WorksInLab(x)))", "all x.((Jack(x) & -PartTimeJob(x) & OfferedByUniversity(x)) -> WorksInLab(x))", "-(HasPartTimeJob(Jack,University) | WorksInLab(Jack,Laboratory))", "all x.((Jack(x) & -PartTimeJobOfferedByUniversity(x) & -WorksInLab(x)) -> -PartTimeJobOfferedByUniversity(x))"]}
{"id": "folio_validation_447", "nl": "James has a part-time job offered by the university.", "fol": "HasPartTimeJob(James)", "prediction": ["all x.((Job(x) & PartTime(x)) -> OfferedByUniversity(x))", "all x y.((Job(x) & University(y)) -> PartTimeOffered(x,y))", "(PartTimeJob(James) & OfferedByUniversity(James))", "all x.(Job(x) -> (OfferedByUniversity(x) & PartTime(x)))", "(PartTimeJobOfferedByUniversity(James))", "James has a part-time job offered by the university.", "(OfferedByUniversity(James,James) & PartTimeJob(James,James))", "all x y.((Job(x) & James(y)) -> OfferedByUniversity(y,x))", "James has part-time job offered by university.", "all x.((Job(x) & PartTime(x)) -> OfferedByUniversity(x))", "(PartTimeJobOfferedByUniversity(James,James))", "all x.(Job(x) -> (OfferedByUniversity(x) & PartTime(x)))", "exists x.(Job(x) & PartTime(x) & OfferedByUniversity(x))", "all x.((Job(x) & James(x)) -> OfferedByUniversity(x))", "all x y.((Job(x) & University(y)) -> PartTimeOffered(x,y))", "all x y.((Job(x) & James(y)) -> OfferedByUniversity(x,y))"]}
{"id": "folio_validation_448", "nl": "James does not have a part-time job offered by the university.", "fol": "-HasPartTimeJob(James)", "prediction": ["all x.((James(x) & -PartTimeJobOfferedByUniversity(x)) -> -PartTimeJobOfferedByUniversity(x))", "(-PartTimeJobOfferedByUniversity(James))", "all x.(James(x) -> -PartTimeJobOfferedByUniversity(x))", "all x y.((James(x) & University(y)) -> -PartTimeJob(x,y))", "all x.((James(x) & -PartTimeJob(x)) -> -OfferedByUniversity(x))", "all x.((Judge(x) & James(x)) -> -PartTimeJobOfferedByUniversity(x))", "((James(James) & UniversityOfferedPartTimeJob(James)) -> -PartTimeJob(James))", "James does not have part-time job offered by university.", "(-PartTimeJobOfferedByUniversity(James))", "(-parttimejobOfferedByUniversity(James))", "all x y.((Job(x) & James(y)) -> -OfferedByUniversity(y,x))", "-exists x.(Job(x) & OfferedByUniversity(x))", "(-PartTimeJobOfferedByUniversity(James,James))", "all x.(James(x) -> -PartTimeJobOfferedByUniversity(x))", "-PartTimeJobOfferedByUniversity(James,James)", "-PartTimeJobOfferedByUniversity(James)"]}
{"id": "folio_validation_449", "nl": "James either takes the database course or has a part-time job offered by the university.", "fol": "((TakesDatabaseCourse(James) & -HasPartTimeJob(James)) | (-TakesDatabaseCourse(James) & HasPartTimeJob(James)))", "prediction": ["all x.(James(x) -> (TakesDatabaseCourse(x) | HasPartTimeJob(x)))", "all x y.((James(x) & University(y)) -> (TakesDatabaseCourse(x,y) | HasPartTimeJob(x,y)))", "(TakesDatabaseCourses(James) | PartTimeJobOfferedByUniversity(James)))", "all x.((James(x) & TakesDatabaseCourses(x)) | HasPartTimeJobOfferedByUniversity(x))", "all x.(James(x) -> (TakesDatabaseCourse(x) | HasPartTimeJobOfferedByUniversity(x)))", "(TakesDatabaseCourse(James) | PartTimeJobOfferedByUniversity(James)))", "all x.((James(x) & DatabaseCourse(x)) | PartTimeJobOfferedByUniversity(x)) -> TakesOrHas(x,y))", "all x y.((James(x) & University(y)) -> (TakesDatabaseCourses(x,y) | HasPartTimeJob(x,y)))", "all x.(James(x) -> (TakesDBCourses(x) | HasPartTimeJob(x)))", "(TakesDatabaseCourse(James) | HasPartTimeJobOfferedByUniversity(James)))", "all x.((James(x) & TakesDatabaseCourses(x)) | PartTimeJobOfferedByUniversity(x))", "all x y.((James(x) & University(y)) -> (TakesDatabaseCourse(x,y) | PartTimeJob(x,y)))", "(all x.(James(x) -> TakesDBCourses(x)) | (PartTimeJobOfferedByUniversity(x) & TakesDBCourses(x))))", "(TakesDatabaseCourses(James) | PartTimeJobOfferedByUniversity(James)))", "exists x.(James(x) & (TakesDatabaseCourse(x) | PartTimeJobOfferedByUniversity(x)))", "all x y.((James(x) & University(y)) -> (TakesDatabaseCourses(x,y) | HasPartTimeJob(x,y)))"]}
{"id": "folio_validation_450", "nl": "Jack takes the database course.", "fol": "TakesDatabaseCourse(Jack)", "prediction": ["all x.(Jack(x) -> TakesDatabaseCourse(x))", "(TakesDatabaseCourse(Jack))", "-TakesDatabaseCourse(Jack)", "all x.(Jack(x) -> TakesDatabaseCourse(x))", "(TakesDBCourses(Jack) & TakesDBCourses(Jack))", "Jack takes the databasecourse.", "(TakesDatabaseCourse(Jack))", "Jack takes DatabaseCourse(Jack)", "All x y.((Jack(x) & Database(y)) -> Takes(x,y))", "-TakesDatabaseCourse(Jack)", "(TakesDatabaseCourse(Jack) & TakesDatabaseCourse(Jack))", "(TakesDatabaseCourses(Jack))", "all x.(Jack(x) -> TakesDatabaseCourse(x))", "All x.(Jack(x) -> TakesDBCourses(x))", "-takesDatabaseCourses(Jack,y))", "all x.(Jack(x) -> TakesDatabaseCourse(x))"]}
{"id": "folio_validation_451", "nl": "If George likes music, he wants to compose.", "fol": "(LikesMusic(George) -> DesiresToCompose(George))", "prediction": ["all x.((George(x) & LikesMusic(x)) -> WantsToCompose(x))", "all x.((Gerry(x) & LikesMusic(x)) -> WantsToCompose(x))", "(LikesMusic(George) -> WantsToCompose(George))", "all x.((George(x) & LikesMusic(x)) -> WantsToCompose(x))", "all x.(LikesMusic(x) -> WantsToCompose(x))", "all x.(MeetsMusic(x) -> WantsToCompose(x))", "-(LikesMusic(George) -> WantsToCompose(George))", "all x y.((Gerry(x) & LikesMusic(x)) -> WantsToCompose(x))", "(LiesMusic(George) -> WantsToCompose(George))", "(LikesMusic(George) -> WantsToCompose(George))", "all x.(MovesMusic(x) -> WantsToCompose(x))", "all x.((George(x) & LikesMusic(x)) -> WantsToCompose(x))", "all x.(LikesMusic(x) -> WantsToCompose(x))", "-(LikesMusic(George) & WantsToCompose(George))", "(LikesMusic(George) -> WantsToCompose(George))", "(LikesMusic(George) & WantsCompose(George))"]}
{"id": "folio_validation_452", "nl": "If George has access to a program, he can compose.", "fol": "(HasAccessToProgram(George) -> AbleToCompose(George))", "prediction": ["all x.((George(x) & AccessToProgram(x)) -> CanCompose(x))", "all x.((George(x) & AccessToProgram(x)) -> CanCompose(x))", "all x y.((George(x) & Program(y) & AccessTo(x,y)) -> CanCompose(x))", "(AccessToProgram(George) -> CanCompose(George))", "all x.((George(x) & AccessToProgram(x)) -> CanCompose(x))", "all x.((Gerry(x) & AccessToProgram(x)) -> CanCompose(x))", "all x y.((George(x) & Program(y) & AccessTo(x,y)) -> CanCompose(x))", "all x y.(((George(x) & Program(y)) & AccessTo(x,y)) -> CanCompose(x))", "all x.((George(x) & AccessToProgram(x)) -> CanCompose(x))", "all x.(AccessToProgram(x) -> CanCompose(x))", "(AccessToProgram(George) -> CanCompose(George))", "all x y.((Gerry(x) & Program(y) & AccessTo(x,y)) -> CanCompose(x))", "all x.(HasAccessToProgram(x) -> CanCompose(x))", "all x y.(((George(x) & Program(y) & AccessTo(x,y)) -> CanCompose(x))", "all x.((George(x) & AccessToProgram(x)) -> CanCompose(x))", "all x.(AccessToProgram(x) -> CanCompose(x))"]}
{"id": "folio_validation_453", "nl": "If George can compose and wants to compose, he will compose.", "fol": "((DesiresToCompose(George) & AbleToCompose(George)) -> WillCompose(George))", "prediction": ["all x.((George(x) & CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))", "all x.((CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))", "all x.((George(x) & CanCompose(x) & WantsToCompose(x)) -> Compose(x))", "all x y.((George(x) & CanCompose(x) & WantsToCompose(x)) -> WillCompose(y))", "(all x.((George(x) & CanCompose(x)) -> WantsToCompose(x)))", "((CanCompose(George) & WantsToCompose(George)) -> Compose(George))", "(CanComposeAndWantsToCompose(George))", "all x.((CanCompose(x) & WantsToCompose(x)) -> Compose(x))", "all x.((George(x) & CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))", "all x.(CanCompose(x) -> WantsToCompose(x))", "all x y.((George(x) & CanCompose(x,y) & WantsToCompose(x,y)) -> WillCompose(x,y))", "(CanCompose(George) & WantsToCompose(George))", "all x y.((George(x) & CanCompose(x) & WantsToCompose(x)) -> Compose(y))", "all x.((George(x) & CanCompose(x) & WantsToCompose(x)) -> Compose(x))", "all x.((George(x) & CanCompose(x) & WantsCompose(x)) -> WillCompose(x))", "all x.(CanCompose(x) -> WillCompose(x))"]}
{"id": "folio_validation_454", "nl": "If George likes music and has access to a program, he will compose.", "fol": "((LikesMusic(George) & HasAccessToProgram(George)) -> WillCompose(George))", "prediction": ["all x.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> Compose(x))", "all x.((LikesMusic(x) & AccessToProgram(x)) -> Compose(x))", "all x y.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> Composes(x,y))", "all x.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> Composes(x))", "all x.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> Compose(x))", "all x.((George(x) & LikesMusic(x) & HasAccessToProgram(x)) -> Composes(x))", "(LikesMusicAndAccessToProgram(George) -> Composes(George))", "(LikesMusic(George) & AccessToProgram(George))", "all x y.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> Compose(x,y))", "all x.((LikesMusic(x) & AccessToProgram(x)) -> Composes(x))", "all x.(LikesMusicAndAccessToProgram(x) -> Composes(x))", "all x.((Greg(x) & LikesMusic(x) & HasAccessToProgram(x)) -> Composes(x))", "(LikesMusicAndAccessToProgram(George))", "all x.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> Compose(x))", "(LikesMusicAndAccessToProgram(George) -> Composes(George))", "all x y.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> Composes(x))"]}
{"id": "folio_validation_455", "nl": "If George will not compose, George can not compose.", "fol": "(-DesiresToCompose(George) -> -WillCompose(George))", "prediction": ["all x.((George(x) & -Compose(x)) -> -Compose(x))", "all x.((George(x) & -Compose(x)) -> -Compose(x))", "(-Composes(George) -> -Composes(George))", "-(GeorgeCanCompose(George))", "all x.((Gerald(x) & -Compose(x)) -> -Compose(x))", "all x.((George(x) & -Composes(x)) -> -Composes(x))", "all x y.((George(x) & -Compose(x)) -> -Compose(y))", "all x.((George(x) & -Compose(x)) -> -Compose(x))", "all x y.((George(x) & -Compose(x,y)) -> -Compose(x,y))", "(all x.((George(x) & -Compose(x)) -> -Compose(x))", "(-Composes(George) -> -Composes(George))", "-(GeorgeCanCompose(George))", "all x.((George(x) & -Composes(x)) -> -Composes(x))", "all x.((George(x) & WillNotCompose(x)) -> CannotCompose(x))", "all x.((George(x) & WillNotCompose(x)) -> CannotCompose(x))", "all x.((George(x) & WillNotCompose(x)) -> CannotCompose(x))"]}
{"id": "folio_validation_456", "nl": "A hawk never lands. ", "fol": "all x.(IsHawk(x) -> -Lands(x))", "prediction": ["all x.(Hawk(x) -> -Lands(x))", "all x.(Hawk(x) -> NeverLands(x))", "all x.(hawk(x) -> -Lands(x))", "all x y.((Hawk(x) & Land(y)) -> -Lands(x,y))", "all x.(Hawk(x) -> -Lands(x))", "all x y.((Hawk(x) & Landing(y)) -> -Lands(x,y))", "all x.(Hawk(x) -> NeverLands(x))", "all x.(hawk(x) -> -Lands(x))", "all x y.((Hawk(x) & Land(y)) -> NeverLands(x))", "exists x.(hawk(x) & -Lands(x))", "all x.(Hawk(x) -> -Lands(x))", "all x y.((Hawk(x) & Landing(y)) -> NeverLands(x))", "all x.(Hawk(x) -> NeverLands(x))", "exists x.(hawk(x) & -Lands(x))", "exists x.(Hawk(x) & -Lands(x))", "exists x.(Hawk(x) & -Lands(x))"]}
{"id": "folio_validation_457", "nl": "Some birds are hawks.", "fol": "exists x.(IsBird(x) & IsHawk(x))", "prediction": ["exists x.(Bird(x) & Hawk(x))", "exists x.(Bird(x) & Hawk(x))", "exists x.(Bird(x) & Hawk(x))", "exists x.(Bird(x) & Hawk(x))", "exists x.(Bird(x) & Hawk(x))", "exists x y.(Bird(x) & Hawk(y))", "exists x.(Bird(x) & Hawk(x))", "exists x.(Bird(x) & Hawk(x))", "exists x.(Bird(x) & Hawk(x))", "exists x.(Bird(x) & Hawk(x))", "exists x.(Bird(x) & Hawk(x))", "exists x.(Bird(x) & Hawk(x))", "exists x.(Bird(x) & Hawk(x))", "exists x.(Bird(x) & Hawk(x))", "exists x.(Bird(x) & Hawk(x))", "exists x.(Bird(x) & Hawk(x))"]}
{"id": "folio_validation_458", "nl": "All birds land", "fol": "all x.(IsBird(x) -> Lands(x))", "prediction": ["all x.(Bird(x) -> Lands(x))", "all x y.((Bird(x) & Bird(y)) -> Lands(x,y))", "all x.(Bird(x) -> Lands(x))", "(all x.(Bird(x) -> Lands(x)))", "all x.(Bird(x) -> LandsOn(x,y))", "all x y.((Bird(x) & Bird(y)) -> Lands(x,y))", "(all x.(Bird(x) -> Lands(x)))", "all x.(Bird(x) -> Lands(x))", "all x y.((Bird(x) & Bird(y) & Lands(y)) -> Lands(x,y))", "all x y.((Bird(x) & Bird(y)) -> Lands(x,y))", "all x.(Bird(x) -> Land(x))", "all x.(Bird(x) -> LandsOn(x,y))", "all x.(Bird(x) -> Land(x))", "all x.(Bird(x) -> Lands(x))", "all x.(Bird(x) -> Land(x))", "All x.(Bird(x) -> LandsOn(x,y))"]}
{"id": "folio_validation_459", "nl": "On some Mondays at 8 pm, roses are given out on TV.", "fol": "exists x.(OnMondayAt8PM(x) & RosesGivenOutOnTV(x))", "prediction": ["all x.((Monday(x) & 8pm(x)) -> RosesGiftedOnTV(x))", "all x y.((Monday(x) & 8pm(x)) -> (Rose(y) & GivenOnTV(y)))", "(exists x.(Monday(x) & At8PM(x)) & exists y.(Monday(y) & At8PM(y)) & exists z.(Rose(z) & GivenOut(z))))", "exists x.(Monday(x) & At8PM(x) & RosesGift(x))", "all x y z.((Monday(x) & 8pm(y) & TV(z) & Monday(x,y)) -> (Rose(x) & GivesOut(x,z)))", "(exists x.(Monday(x) & 8pm(x)) & exists y.(Monday(y) & 8pm(y)) & exists z.(Rose(z) & GivenOut(z))))", "all x y.((Monday(x) & 8PM(x) & TV(y)) -> RosesGiftedOut(x,y))", "all x.((Monday(x) & At8PM(x)) -> RosesGiftedOnTV(x))", "exists x.(Monday(x) & At(x,8)) -> RosesGifted(x))", "exists x.(Monday(x) & 8pm(x) & Roses(x) & ShownOn(x,TV))", "(exists x.(Monday(x) & At8pm(x)) & exists y.(Monday(y) & On(x,y))) -> RosesGiftedOnTV(y)))", "all x y z.((Monday(x) & 8pm(y) & TV(z)) -> (Rose(x) & GivenOut(x,y,z)))", "(exists x.(Monday(x) & 8pm(x) & On(x,y)) & exists z.(Rose(z) & On(x,z))))", "exists x.(Monday(x) & At8pm(x) & Roses(x) & OnTV(x))", "exists x.(Monday(x) & 8PM(x) & Rose(x) & GivenOnTV(x))", "all x.((Monday(x) & 8PM(x)) -> RosesGivenOutOnTV(x))"]}
{"id": "folio_validation_460", "nl": "Every rose given out on TV is on the Bachelor.", "fol": "all x.(RosesGivenOutOnTV(x) -> IsOnBachelor(x))", "prediction": ["all x.(Rose(x) -> Bachelor(x))", "all x.((Rose(x) & GivenOutOnTV(x)) -> Bachelor(x))", "all x y.((Rose(x) & GivenOutOnTV(x)) -> Bachelor(y))", "all x.(Rose(x) -> Bachelor(x))", "all x.(Rose(x) -> OnBachelor(x))", "all x y.((Rose(x) & GivenOutOnTV(x)) -> Bachelor(y))", "all x.((Rose(x) & GivenOutOnTV(x)) -> Bachelor(x))", "(all x.(Rose(x) & GivenOutOnTV(x)) -> Bachelor(x))", "(all x.(Rose(x) & GivenOutOnTV(x)) -> Bachelor(x))", "-exists x.(Rose(x) & GivenOutOnTV(x) & Bachelor(x))", "all x y.((Rose(x) & GivenOutOnTV(x,y)) -> Bachelor(y))", "all x.(Rose(x) & GivenOutOnTV(x) -> Bachelor(x))", "all x.(Rose(x) -> Bachelor(x))", "(All x.(Rose(x) & GivenOutOnTV(x)) -> Bachelor(x))", "exists x.(Rose(x) & GivenOutOnTV(x) & Bachelor(x))", "all x.(Rose(x) -> OnBachelor(x))"]}
{"id": "folio_validation_461", "nl": "Everything on the Bachelor portrays the lives of real people.", "fol": "all x.(IsOnBachelor(x) -> PortraysLivesOfRealPeople(x))", "prediction": ["all x.(Bachelor(x) -> (PortraysLivesOfRealPeople(x)))", "all x y.((Bachelor(x) & Bachelor(y)) -> (PortraysLivesOfRealPeople(x,y)))", "all x.(Bachelor(x) -> DescribesLivesOfRealPeople(x))", "everything on Bachelor portraysthelivesOfRealPeople(b))", "all x y.((Bachelor(x) & Bachelor(y)) -> DescribesLivesOfRealPeople(x,y))", "(all x.(Bachelor(x) -> RealPeople(x)))", "all x.(Bachelor(x) -> (PortraysLivesOfRealPeople(x)))", "all x y z.((Bachelor(x) & Bachelor(y) & RealPeople(z)) -> PortraysLives(x,y,z))", "all x.((Bachelor(x) & RealPeople(x)) -> PortraysLives(x))", "all x y.((Bachelor(x) & RealPeople(y)) -> PortraysLives(x,y))", "all x.(Bachelor(x) -> DescribesLivesOfRealPeople(x))", "(all x.(Bachelor(x) -> RealPeople(x)))", "all x y.((Bachelor(x) & Bachelor(y)) -> (PortraysLivesOfRealPeople(x,y)))", "all x.(Bachelor(x) -> PortraysLivesOfRealPeople(x))", "all x.(Bachelor(x) -> RealPeople(x))", "All x.(Bachelor(x) -> PortraitsLivesOfRealPeople(x))"]}
{"id": "folio_validation_462", "nl": "All shows portraying the lives of real people are reality TV shows.", "fol": "all x.(PortraysLivesOfRealPeople(x) -> IsRealityTVShow(x))", "prediction": ["all x.((Show(x) & RealPeople(x)) -> RealityTVShow(x))", "all x.((Show(x) & LivesOfRealPeople(x)) -> RealityTVShow(x))", "all x y.((Show(x) & RealPeople(y)) -> RealityTVShow(x))", "all x.((Show(x) & RealPeople(x)) -> RealityTVShow(x))", "all x.((Show(x) & ShowsLivesOfRealPeople(x)) -> RealityTVShow(x))", "all x.(RealityTVShow(x) -> (PortraysLivesOfRealPeople(x) & RealityTVShow(x)))", "all x.((Show(x) & DescribesLivesOfRealPeople(x)) -> RealityTVShow(x))", "all x y.((Show(x) & RealPeople(y) & Show(x)) -> RealityTVShow(x))", "(all x.(DepictsLivesOfRealPeople(x) -> RealityTVShow(x))", "(all x.(ProducingLivesOfRealPeople(x) -> RealityTVShow(x))", "all x.((TelevisionShow(x) & RealPeople(x)) -> RealityTVShow(x))", "all x y.((Show(x) & RealPeople(y) & PortraysLives(x,y)) -> RealityTVShow(x))", "all x.((Show(x) & RealPeople(x)) -> RealityTVShow(x))", "all x y.((Show(x) & RealPeople(y)) -> RealityTVShow(x))", "all x.((Show(x) & LivesOfRealPeople(x)) -> RealityTVShow(x))", "all x.((Show(x) & LifeDepictsRealPeople(x)) -> RealityTVShow(x))"]}
{"id": "folio_validation_463", "nl": "Breaking Bad is not a reality TV show.", "fol": "-IsRealityTVShow(BreakingBad)", "prediction": ["(RealityTVShow(BreakingBad) & -RealityTVShow(BreakingBad))", "-RealityTVShow(BreakingBad)", "BreakingBad is not a realityTVShow(BreakingBad)", "all x.((BreakingBad(x) & -RealityTVShow(x)) -> -RealityTVShow(x))", "all x.(BreakingBad(x) -> -RealityTVShow(x))", "-RealityTelevisionShow(BreakingBad)", "BreakingBad.com - RealityTVShow(x))", "-RealityTVShow(BreakingBad)", "(RealityTVShow(BreakingBad) & -RealityTVShow(BreakingBad))", "all x.((BreakingBad(x) & -RealityTVShow(x)) -> -RealityTVShow(x))", "All x.(BreakingBad(x) -> -RealityTelevisionShow(x))", "BreakingBad.com - RealityTelevisionShow(x))", "BreakingBad is not a realityTVShow.", "-RealityTVShow(breakingbad)", "(RealityTVShow(BreakingBad) & -RealityTVShow(BreakingBad))", "All x.(BreakingBad(x) -> -RealityTelevisionShow(x))"]}
{"id": "folio_validation_464", "nl": "Breaking Bad is on Monday at 8 pm.", "fol": "OnMondayAt8PM(BreakingBad)", "prediction": ["All x.(BreakingBad(x) -> MondayAt8pm(x))", "BreakingBad(x) -> (OnMondayAt8pm(x)))", "(BreakingBad(x) -> MondayAt8pm(x))", "BreakingBadSaturday(Breakfast) -> (Monday(Breakfast) & 8pm(Breakfast)))", "BreakingBad(x) -> MondayAt8pm(x))", "(BreakingBad(b) & Monday(c) & 8pm(c))", "BreakingBad(x) -> (OnMonday(x,8) & 8pm(x)))", "All x.(BreakingBad(x) -> MondayAt8PM(x))", "BreakingBad(b) & MondayAt8pm(c) & BreakingBad(b) & MondayAt8pm(c))", "(BreakingBad(x) -> MondayAt8PM(x))", "BreakingBadTuesday(x) -> (OnMondayAt8pm(x)))", "(BreakingBad(e) & Monday(e) & 8pm(e))", "All x.(BreakingBad(x) -> MondayAt8pm(x))", "all x.(BreakingBad(x) -> OnMondayAt8PM(x))", "BreakingBad is onMondayAt8pm.", "All x.(BreakingBad(x) -> Monday(x,8))"]}
{"id": "folio_validation_465", "nl": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.", "fol": "(OnMondayAt8PM(BreakingBad) & RosesGivenOutOnTV(BreakingBad))", "prediction": ["all x.((TelevisionShow(x) & RosesGivenOut(x,Monday,8pm)) -> BreakingBad(x))", "all x y.((TelevisionShow(x) & Rose(y) & GivesOutOnMondayAt8pm(x,y)) -> BreakingBad(x))", "all x.(BreakingBad(x) -> (TVShow(x) & RosesGivenOutOnMondayAt8pm(x)))", "BreakingBad is a TVShow in which roses are given out on Monday at 8 pm.", "(TelevisionShow(BreakingBad) & Show(Roses) & GivenOutOnMondayAt8pm(BreakingBad))", "(TVShow(breakingbad) & RosesGivenOutOnMondayAt8pm(breakingbad))", "all x.((TelevisionShow(x) & Roses(x)) -> GivenOutOnMondayAt8pm(x))", "(TelevisionShow(breakingbad) & RosesGivenOutOnMondayAt8pm(breakingbad))", "(TelevisionShow(BreakingBad) & Show(Rose(Rose) & GivesOutOnMondayAt8pm(Rose))", "all x y.((TelevisionShow(x) & Rose(y) & GivenOutOnMonday(x,y)) -> BreakingBad(x))", "(TVShow(BreakingBad) & Show(Rose(Rose) & GivesOutOnMondayAt8PM(Rose))", "all x.(BreakingBad(x) -> (TelevisionShow(x) & RosesGivenOutOnMondayAt8PM(x)))", "All x.((TVShow(x) & Roses(x)) -> GivenOutOnMondayAt8pm(x))", "BreakingBad is a TVShow in which roses are given out on Monday at 8 pm.", "all x y.((TelevisionShow(x) & Rose(y)) -> (GivenOutOnMondayAt8PM(x,y)))", "All x.((TelevisionShow(x) & Roses(x) & MondayAt8pm(x)) -> BreakingBad(x))"]}
{"id": "folio_validation_466", "nl": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.", "fol": "(RosesGivenOutOnTV(BreakingBad) -> OnMondayAt8PM(BreakingBad))", "prediction": ["all x.((Rose(x) & BreakingBad(x)) -> MondayAt8pm(x))", "all x.((Rose(x) & GivenOutDuringBreakingBad(x)) -> MondayAt8pm(x))", "all x.((Roses(x) & GivenOutDuringBreakingBad(x)) -> MondayAt8pm(x))", "all x y.((Rose(x) & BreakingBad(y) & GivenOut(x,y)) -> MondayAt8pm(x))", "(all x.((Rose(x) & BreakingBad(x)) -> MondayAt8pm(x)))", "all x.((Roses(x) & BreakingBad(x)) -> MondayAt8pm(x))", "all x.((Rose(x) & BreakingBad(x)) -> MondayAt8PM(x))", "all x.(Rose(x) -> (GiftedOutDuringBreakingBad(x) & MondayAt8pm(x)))", "(All x.((Rose(x) & BreakingBad(x)) -> MondayAt8pm(x)))", "All x y.((Rose(x) & BreakingBad(y)) -> MondayAt8pm(x,y))", "all x.((Rose(x) & GivenOutDuringBreakingBad(x)) -> MondayAt8PM(x))", "all x.((Roses(x) & GivenOutDuringBreakingBad(x)) -> MondayAt8PM(x))", "(all x.((Rose(x) & BreakingBad(x)) -> MondayAt8PM(x)))", "All x y.((Rose(x) & BreakingBad(y)) -> MondayAt8PM(x,y))", "all x.(Roses(x) -> BreakingBad(x))", "all x.(Rose(x) -> (BreakingBad(x) & Monday(x) & 8pm(x)))"]}
{"id": "folio_validation_467", "nl": "Heinrich Scmidt was a Nazi German politician. ", "fol": "(OriginatesFrom(HeinrichScmidt,NaziGermany) & IsPolitician(HeinrichScmidt))", "prediction": ["Heinrich Scmidt (nastGermanPolitician)", "all x.((Henri Scmidt(x) & NaziGermanPolitician(x)) -> Was(x,Scmidt))", "Heinrich Scmidt (NaziGermanPolitician)", "(NaziGermanPolitician(Hrsg.Scmidt))", "(NaziGermanPolitician(Henri Scmidt) & ServedIn(Henrisburg,Germany))", "all x.((Henri Scmidt(x) & NaziGermanPolitician(x)) -> ServedIn(x,y))", "(NaziGermanPolitician( Heinrich Scmidt) & ServedIn(HenryScmidt,Germany))", "Heinrich Scmidt(h) & NaziGermanPolitician(x))", "Heinrich Scmidt (nastGermanPolitician)", "Heinrich Scmidt(h) & NaziGermanPolitician(w) & ServedIn(h,w))", "Heinrich Scmidt (NaziGermanPolitician)", "Heinrich Scmidt (nastGermanPolitician)", "Heinrich Scmidt war ein NaziGermanPolitician.", "Heinrich Scmidt (NaziGermanPolitician)", "Heinrich Scmidt (nativity-german-politician)", "Heinrich Scmidt (NaziGermanPolitician)"]}
{"id": "folio_validation_468", "nl": "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.", "fol": "(IsMemberOf(HeinrichScmidt,PrussianStateParliament) & IsMemberOf(HeinrichScmidt,NaziReichstag))", "prediction": ["all x.((Heeinrich Scmidt(x) & PrussianStateParliament(x) & NaziRangestag(x)) -> Member(x))", "Heeinrich Scmidt (*) & MemberOfPrussianStateParliament(x) & MemberOfNaziRangestag(x))", "(Member(Heeinrich Scmidt,Prussia) & MemberOf(HeeinrichScmidt,NaziRangestag))", "(MemberOfPrussianStateParliament(Heeinrich Scmidt) & MemberOfNaziRangestag(Heeinrich Scmidt))", "Besides PrussianStateParliament and NaziRangestag(Heeinrich Scmidt)", "Heeinrich Scmidt a.((MemberOfPrussianStateParliament(a) & MemberOfNaziRangestag(b))", "(Member(Heeinrich Scmidt,Prussia) & MemberOfPrussianStateParliament(Heeinrich Scmidt,NaziRangestag))", "Heeinrich Scmidt (*) was a member of the Prussian StateParliament and NaziRangestag(x))", "(Heeinrich Scmidt(Heeinrich) & MemberOfPrussianStateParliament(Heeinrich) & MemberOfNaziRangstag(Heeinrich))", "-(Heeinrich Scmidt(x) & PrussianStateParliament(x) & NaziRangestag(x))", "Heeinrich Scmidt was a member of the Prussian StateParliament and NaziRangestag.", "Besides the Prussian StateParliament and NaziRangestag, Heeinrich Scmidt was also a member of.", "Heeinrich Scmidt (*) -> (PrussianStateParliament(x) & NaziRangestag(x)))", "Heeinrich Scmidt a.k.a.((Member(a) & PrussianStateParliament(b) & NaziRangestag(c)))", "all x.(Scmidt(x) -> (PrussianStateParliament(x) & NaziRangestag(x)))", "(MemberOfPrussianStateParliament(Heeinrich Scmidt) & MemberOfNaziRangstag(Heeinrich Scmidt))"]}
{"id": "folio_validation_469", "nl": "Heinrich Schmidt was either German or Russian.", "fol": "(OriginatesFrom(HeinrichScmidt,NaziGermany) | OriginatesFrom(HeinrichScmidt,Russia))", "prediction": ["Heinrich Schmidt (German(hereinafter) | Russian(hereinafter))", "all x.(Schmidt(x) -> (German(x) | Russian(x)))", "(German(HelenSchmidt) | Russian(HelenSchmidt))", "Heinrich Schmidt (German(h) | Russian(h)))", "all x.(HenrySchmidt(x) -> (German(x) | Russian(x)))", "Heinrich Schmidt (Deutsche( Heinrich) | Russe( Heinrich)))", "(German(HenrySchmidt) | Russian(HenrySchmidt))", "(German(Heinz Schmidt) | Russian(Heinz Schmidt))", "Heinrich Schmidt (Deutsches(Hrsg.) | Russian(Hrsg.))", "all x.(Schmidt(x) -> (German(x) | Russian(x)))", "Heinrich Schmidt (German) | Russian(German))", "all x.(HelenSchmidt(x) -> (German(x) | Russian(x)))", "HeinrichSchmidt (German( Heinrich) | Russian( Heinrich))", "(German(hereinafterSchmidt) | Russian(hereinafterSchmidt))", "Heinrich Schmidt & (German( Heinrich) | Russian( Heinrich)))", "Heinrich Schmidt (German) | Russian(German))"]}
{"id": "folio_validation_470", "nl": "Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.", "fol": "exists x.(OriginatesFrom(x,NaziGermany) & IsPolitician(x) & IsMemberOf(x,PrussianStateParliament) & IsMemberOf(x,NaziReichstag))", "prediction": ["exists x.(NaziGermanPolitician(x) & PartOfPrussianStateParliament(x) & PartOfNaziRangestag(x))", "exists x.(NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziRangestag(x))", "(exists x.(NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziRangestag(x)))", "all x y.((NaziGermanPolitician(x) & PrussianStateParliament(y) & NaziRangestag(x)) -> PartOf(x,y))", "all x y z.((NaziGermanPolitician(x) & PrussianStateParliament(y) & NaziRangestag(z)) -> PartOf(x,y,z))", "all x.(NaziGermanPolitician(x) -> (PartOfPrussianStateParliament(x) & PartOfNaziRangestag(x)))", "(exists x.(NaziGermanPolitician(x) & PartOf(x,PrussianStateParliament) & PartOf(x,NaziRangestag)))", "all x.((NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziRangestag(x)) -> PartOf(x,y))", "exists x.(NaziGermanPolitician(x) & PartOf(x,PrussianStateParliament) & PartOf(x,NaziRangestag))", "(exists x.(NaziGermanPolitician(x) & NaziParliament(x)) & NaziRangestag(x))", "all x y.((NaziGermanPolitician(x) & PrussianStateParliament(y) & NaziRangestag(x)) -> PartOf(x,y))", "all x y z.((NaziGermanPolitician(x) & PrussianStateParliament(y) & NaziRangestag(z)) -> PartOf(x,y,z))", "exists x.(NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziRangestag(x))", "exists x.(NaziGermanPolitician(x) & PartOfPrussianStateParliamentAndNaziRichstag(x))", "exists x.(NaziGermanPolitician(x) & PartOf(x,PrussianStateParliament) & PartOf(x,NaziRichstag))", "exists x.(NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziRichstag(x))"]}
{"id": "folio_validation_471", "nl": "No politicans are part of the Nazi Reichstag.", "fol": "all x.(IsPolitician(x) -> -IsMemberOf(x,NaziReichstag))", "prediction": ["-exists x.(Politican(x) & PartOfNaziRangestag(x))", "all x.(Politican(x) -> -PartOfNaziRangestag(x))", "-exists x.(Politican(x) & NaziRangestag(x))", "all x.(Politician(x) -> -PartOfNaziRangestag(x))", "(-PartOfNaziRangestag(politican))", "\u2013(Politican(x) & NaziRangestag(x)))", "-exists x.(PoliticalAncient(x) & PartOfNaziRangestag(x))", "-exists x.(Politican(x) & PartOfNaziRangestag(x))", "all x.(Politican(x) -> -PartOfNaziRangestag(x))", "-exists x.(Politician(x) & PartOfNaziRangestag(x))", "(NaziRangestag(politican) & -PartOf(politican,political))", "all x.(Politican(x) -> -PartOfRangestag(x))", "(-PartOfNaziRangestag(politican))", "-exists x.(Politican(x) & NaziRangestag(x))", "-exists x.(Politician(x) & NaziRangestag(x))", "all x.(Politican(x) -> -PartOfNaziRangestag(x))"]}
{"id": "folio_validation_472", "nl": "If something is a deadly disease, then its survival rate is low. ", "fol": "all x.(IsDeadlyDisease(x) -> HasLowSurvivalRate(x))", "prediction": ["all x.((Disease(x) & Lethal(x)) -> LowSurvivalRate(x))", "all x.((DeadlyDisease(x) & LowSurvivalRate(x)) -> LowSurvivalRate(x))", "all x.(LethalDisease(x) -> LowSurvivalRate(x))", "all x y.((DeadlyDisease(x) & Disease(y)) -> LowSurvivalRate(x,y))", "all x.((Disease(x) & Lethal(x)) -> LowSurvivalRate(x))", "all x.((DeadlyDisease(x)) -> LowSurvivalRate(x))", "all x.(DeadlyDisease(x) -> LowSurvivalRate(x))", "all x.(LethalDisease(x) -> LowSurvivalRate(x))", "all x y.((Disease(x) & Disease(y)) -> LowSurvivalRate(x,y))", "all x y.((DeadlyDisease(x) & Disease(y)) -> LowSurvivalRate(x,y))", "all x.((DeadlyDisease(x) & LowSurvivalRate(x)) -> LowSurvivalRate(x))", "all x.((Disease(x) & Lethal(x)) -> LowSurvivalRate(x))", "exists x.(DeadlyDisease(x) & LowSurvivalRate(x))", "all x.(LethalDisease(x) -> LowSurvivalRate(x))", "exists x.(DeadlyDisease(x) & LowSurvivalRate(x))", "exists x.(LethalDisease(x) & LowSurvivalRate(x))"]}
{"id": "folio_validation_473", "nl": "All severe cancers are deadly diseases.", "fol": "all x.(IsSevereCancer(x) -> IsDeadlyDisease(x))", "prediction": ["all x.(SevereCancer(x) -> LethalDisease(x))", "all x.(SevereCancer(x) -> LethalDisease(x))", "all x y.((SevereCancer(x) & Disease(y)) -> Lethal(x,y))", "all x.((SevereCancer(x) & LethalDisease(x)) -> Lethal(x))", "all x.(SevereCancer(x) -> LethalDisease(x))", "(all x.(SevereCancer(x) -> DeadlyDisease(x)))", "all x y.((SevereCancer(x) & Disease(y)) -> Lethal(x,y))", "all x y.((SevereCancer(x) & Disease(y) & Lethal(x,y)) -> Lethal(x,y))", "all x.(SevereCancer(x) -> LethalDisease(x))", "all x.((SevereCancer(x) & LethalDisease(x)) -> All(x))", "all x.(SevereCancer(x) -> Die-hardDisease(x))", "all x.(SevereCancer(x) -> DeadlyDisease(x))", "(all x.(SevereCancer(x) -> DeadlyDisease(x)))", "all x.(SevereCancer(x) -> LethalDisease(x))", "all x.(SevereCancerous(x) -> LethalDisease(x))", "all x.(SevereCancer(x) -> DeadlyDisease(x))"]}
{"id": "folio_validation_474", "nl": "Bile duct cancer is a severe cancer. ", "fol": "all x.(IsBileDuctCancer(x) -> IsSevereCancer(x))", "prediction": ["all x.(BileDuitCancer(x) -> SevereCancer(x))", "all x.(BileDuctCancer(x) -> SevereCancer(x))", "(SevereCancer(bileDuctCancer))", "all x.(BileDuctCancer(x) -> SevereCancer(x))", "all x y.((BileDuctCancer(x) & Cancer(y)) -> Severe(x,y))", "all x.(BileDuitCancer(x) -> SevereCancer(x))", "all x y.((BileDuctCancer(x) & Cancer(y) & Severe(x,y)) -> Cancer(x))", "(SevereCancer(bileDuitCancer)", "all x y.((BileDuctCancer(x) & Cancer(y)) -> Severe(x,y))", "all x.(BileDuitCancer(x) -> SevereCancer(x))", "all x.(BileDuctCancer(x) -> SevereCancer(x))", "(SevereCancer(bileDuctCancer)", "all x.(BileDuctCancer(x) -> SevereCancer(x))", "(SevereCancer(bileDuitCancer)", "all x.((BileDductCancer(x) & SevereCancer(x)) -> Cancer(x))", "all x.(BileDuitCancer(x) -> SevereCancer(x))"]}
{"id": "folio_validation_475", "nl": "All Cholangiocarcinoma is bile duct cancer.", "fol": "all x.(IsCholangiocarcinoma(x) -> IsBileDuctCancer(x))", "prediction": ["all x.(Cholangiocarcinoma(x) -> BileDuctCancer(x))", "all x.(Chlolangiocarcinoma(x) -> BileDuctCancer(x))", "(all x.(Chlolangiocarcinoma(x) -> BileDuctCancer(x))", "all x y.((Chlolangiocarcinoma(x) & BileDuctCancer(y)) -> Cancer(x))", "ALLOCHLangiocarcinoma(x) -> BileDuctCancer(x))", "all x.(Cholangiocarcinoma(x) -> BileDuctCancer(x))", "all x y.((Cholangiocarcinoma(x) & BileDuctCancer(y)) -> Cancer(x))", "all x.(Chlolangiocarcinoma(x) -> BileDuctCancer(x))", "all x.(Clolangiocarcinoma(x) -> BileDuctCancer(x))", "all x.(Cholangiocarcinoma(x) -> BileDuctCancer(x))", "all x.(Challengiocarcinoma(x) -> BileDuctCancer(x))", "all x.(Cholangiocarcinoma(x) -> BileDductCancer(x))", "all x.(Clolangiocarcinoma(x) -> BileDuctCancer(x))", "All x.(Challengiocarcinoma(x) -> BileDductCancer(x))", "all x.(Cholangiocarcinoma(x) -> BileDuctCancer(x))", "All X.(Chlolangiocarcinoma(x) -> BileDductCancer(x))"]}
{"id": "folio_validation_476", "nl": "No one with mild flu has a low survival rate.", "fol": "all x.(HasMildFlu(x) -> -HasLowSurvivalRate(x))", "prediction": ["all x.((MildFlu(x) & -LowSurvivalRate(x)) -> -LowSurvivalRate(x))", "-exists x.(MildFlu(x) & LowSurvivalRate(x))", "all x.(MildFlu(x) -> LowSurvivalRate(x))", "all x.((MildFlu(x) & -LowSurvivalRate(x)) -> -(MildFlu(x) & LowSurvivalRate(x)))", "-exists x.(MildFlu(x) & LowSurvivalRate(x))", "all x.((MildFlu(x) & LowSurvivalRate(x)) -> -LowSurvivalRate(x))", "all x.(MildFlu(x) -> -LowSurvivalRate(x))", "all x.((MildFlu(x) & LowSurvivalRate(x)) -> -HasSurvivalRate(x))", "all x.(MildFlu(x) -> LowSurvivalRate(x))", "all x.((MildFlu(x) & LowSurvivalRate(x)) -> -(MildFlu(x) & LowSurvivalRate(x)))", "-exists x.(MildFlu(x) & LowSurvivalRate(x))", "-exists x.(MildFlu(x) & LowSurvivalRate(x))", "-exists x.(MildFlu(x) & -LowSurvivalRate(x))", "-exists x.(MildFlu(x) & LowSurvivalRate(x))", "all x.(MildFlu(x) -> -LowSurvivalRate(x))", "-exists x.(MildFlu(x) & LowSurvivalRate(x))"]}
{"id": "folio_validation_477", "nl": "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.", "fol": "((IsBileDuctCancer(ColorectalCancer) | HasLowSurvivalRate(ColorectalCancer)) -> -IsBileDuctCancer(ColorectalCancer))", "prediction": ["all x.((ColoredCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "all x.((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "all x.((ColoredCancer(x) & BileDductCancer(x) & LowSurvivalRate(x)) -> -BileDductCancer(x))", "(all x.((ColoredCancer(x) & BileDuctCancer(x)) -> -BileDuctCancer(x)))", "all x.((ColoredCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "all x y.((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(y))", "all x y.((ColoredCancer(x) & BileDductCancer(x) & LowSurvivalRate(x)) -> -BileDductCancer(y))", "all x.((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "all x.((ColoredCancer(x) & BileDductCancer(x) & LowSurvivalRate(x)) -> -BileDductCancer(x))", "all x.((ColoredCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "(all x.((ColoredCancer(x) & BileDuctCancer(x)) -> LowSurvivalRate(x)))", "all x y.((ColoredCancer(x) & BileDductCancer(x) & LowSurvivalRate(x)) -> -BileDductCancer(y))", "all x.((ColoredCancer(x) & BileDuctCancer(x) & SurvivalRateLow(x)) -> -BileDuctCancer(x))", "all x.((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "all x.(BileDuctCancer(x) -> (-BileDuctCancer(x)))", "all x.((ColoredCancer(x) & BileDductCancer(x) & LowSurvivalRate(x)) -> -BileDductCancer(x))"]}
{"id": "folio_validation_478", "nl": "Colorectal cancer is a severe cancer", "fol": "IsSevereCancer(ColorectalCancer)", "prediction": ["all x.(ColoredCancer(x) -> (SevereCancer(x) & SevereCancer(x) & ColorectalCancer(x)))", "all x.(ColorectalCancer(x) -> (SevereCancer(x) & SevereCancer(x) & ColorectalCancer(x)))", "all x.(ColoredCancer(x) -> (SevereCancer(x) & ColorectalCancer(x)))", "all x y.((ColoredCancer(x) & Cancer(y)) -> (Severe(x,y) & Severe(x,y)))", "(SevereCancer(colorectalCancer) & SevereCancer(colorectalCancer))", "all x.(ColorectalCancer(x) -> (SevereCancer(x) & SevereCancer(x)))", "all x y.((ColoredCancer(x) & SevereCancer(y)) -> ColorectalCancer(x,y))", "all x.(ColoredCancer(x) -> (SevereCancer(x) & SevereCancer(x) & ColorectalCancer(x)))", "all x y.((ColorectalCancer(x) & Cancer(y)) -> (Severe(x,y) & Severe(x,y)))", "all x.(ColorectalCancer(x) -> (SevereCancer(x) & SevereCancer(x) & SevereCancer(x) & SevereCancer(x)))", "(SevereCancer(colorectalCancerous))", "all x.(ColonialCancer(x) -> SevereCancer(x))", "all x y.((ColoredCancer(x) & Cancer(y)) -> (Severe(x,y) & Severe(x,y)))", "all x.(ColorectalCancer(x) -> SevereCancer(x))", "all x.(ColoredCancer(x) -> (SevereCancer(x) & ColorectalCancer(x)))", "all x.(ColorealCancer(x) -> (SevereCancer(x) & ColorectalCancer(x)))"]}
{"id": "folio_validation_479", "nl": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.", "fol": "((IsBileDuctCancer(ColorectalCancer) | IsCholangiocarcinoma(ColorectalCancer)) -> (IsBileDuctCancer(ColorectalCancer) & HasMildFlu(ColorectalCancer)))", "prediction": ["all x.((ColonialCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.((ColoredCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.((ColonialCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "(all x.((ColonialCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.(ColonialCancer(x) -> ((BileDductCancer(x) | Cholangiocarcinoma(x)) & BileDductCancer(x) & MildFlu(x)))", "all x.((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.((ColonialCancer(x) & (BileDductCancer(x) | Cholangiocarcinoma(x))) -> (BileDductCancer(x) & MildFlu(x)))", "all x.((ColoredCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "(all x.((ColonialCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.((ColonialCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.(ColonialCancer(x) -> ((bileDuctCancer(x) | Cholangiocarcinoma(x)) & BileDuctCancer(x) & MildFlu(x)))", "all x y.((ColonialCancer(x) & BileDuctCancer(y) & Cholangiocarcinoma(y)) -> (BileDuctCancer(x) & MildFlu(x)))", "all x y.((ColonialCancer(x) & BileDuctCancerous(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(y) & MildFlu(y)))", "all x.(ColonialCancer(x) -> ((BileDductCancerous(x) | Cholangiocarcinoma(x)) & BileDductCancer(x) & MildFlu(x)))", "all x y.((ColoredCancer(x) & BileDuctCancer(y) & Cholangiocarcinoma(y)) -> (BileDuctCancer(x) & MildFlu(x)))"]}
{"id": "folio_validation_480", "nl": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.", "fol": "(((-HasMildFlu(ColorectalCancer) | -IsCholangiocarcinoma(ColorectalCancer)) -> IsBileDuctCancer(ColorectalCancer)) | IsCholangiocarcinoma(ColorectalCancer))", "prediction": ["all x.((ColonialCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColorectalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColonialCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x y.((ColorectalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(y) | Cholangiocarcinoma(y)))", "all x.(ColonialCancer(x) -> (-MildFlu(x) & Cholangiocarcinoma(x)) | (BileDuctCancer(x) | Cholangiocarcinoma(x))))", "all x.((ColorectalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "(all x.((ColonialCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.(ColonialCancer(x) -> ((MildFlu(x) & -MildFlu(x) & Cholangiocarcinoma(x)) & (BileDuctCancer(x) | Cholangiocarcinoma(x))))", "all x.((ColorectalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColoredCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColonialCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "(all x.((ColonialCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColorectalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x y.((ColonialCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(y) | Cholangiocarcinoma(y)))", "all x.((ColoredCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x y.((ColonialCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(y) | Cholangiocarcinoma(y)))"]}
{"id": "folio_validation_481", "nl": "All people who eat salads regularly are very conscious about their health and eating habits.", "fol": "all x.(EatsSaladRegularly(x) -> ConsciousAboutHealth(x))", "prediction": ["all x.((Person(x) & EatsSaladsRegularly(x)) -> VeryConsciousAboutHealthAndEatingHabits(x))", "all x.(EatsSaladsRegularly(x) -> VeryConsciousAboutHealthAndEatingHabits(x))", "all x y.((Person(x) & EatsSaladsRegularly(x)) -> (ConsciousOfHealth(x) & ConsciousOfEatingHabits(y)))", "all x.(EatsSaladsRegularly(x) -> (ConsciousOfHealth(x) & ConsciousOfEatingHabits(x)))", "all x.((Person(x) & EatsSaladsRegularly(x)) -> VeryConsciousAboutHealthAndEatingHabits(x))", "(all x.(EatsSaladsRegularly(x) -> VeryConsciousAboutHealthAndEatingHabits(x)))", "all x y.((Person(x) & EatsSaladsRegularly(x)) -> (ConsciousOfHealth(x) & ConsciousOfEatingHabits(y)))", "all x.((EatsSaladsRegularly(x) & ConsciousOfHealthAndEatingHabits(x)) -> ConsciousOfEatingHabits(x))", "all x y.((Person(x) & EatsSaladsRegularly(x)) -> VeryConsciousAboutHealthAndEatingHabits(x,y))", "all x.(EatsRegularSalads(x) -> VeryConsciousAboutHealthAndEatingHabits(x))", "all x.((Person(x) & EatsSaladsRegularly(x)) -> VeryConsciousAboutHealthAndEatingHabits(x))", "all x.(EatsSaladsRegularly(x) -> VeryConsciousAboutHealthAndEatingHabits(x))", "all x.((Person(x) & EatsSaladsRegularly(x)) -> VeryConsciousAboutHealthAndEatingHabits(x))", "all x y.((Person(x) & EatsSaladsRegularly(x)) -> (ConsciousOfHealth(x) & ConsciousOfEatingHabits(y)))", "all x.((Person(x) & EatsSaladsRegularly(x)) -> (ConsciousOfHealth(x) & ConsciousOfEatingHabits(x)))", "all x.(EatsSaladsRegularly(x) -> ConsciousOfHealthAndEatingHabits(x))"]}
{"id": "folio_validation_482", "nl": "All people who grew up in health-conscious childhood homes eat salads regularly.", "fol": "all x.(GrewUpInHealthConsciousHome(x) -> EatsSaladRegularly(x))", "prediction": ["all x.((Person(x) & GrownUpInHealthConsciousChildrenHomes(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & GrownUpInHealthConsciousHomes(x)) -> EatsSaladsRegularly(x))", "all x y.((Person(x) & GrowingUpInHealthConsciousHomes(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & GrownInHealthConsciousChildrenHomes(x)) -> EatsSaladsRegularly(x))", "all x y.((Person(x) & GrowingUpInHealthConsciousChildrenHomes(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & grewUpInHealthConsciousChildrenHomes(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & GrowingUpInHealthConsciousHomes(x)) -> EatsSaladsRegularly(x))", "all x.((People(x) & GrownUpInHealthConsciousChildrenHomes(x)) -> EatsSaladsRegularly(x))", "all x y.((Person(x) & GrownUpInHealthConsciousChildrenHome(x)) -> EatsSaladsRegularly(x))", "all x.((Popular(x) & GrowingUpInHealthConsciousHomes(x)) -> EatsSaladsRegularly(x))", "all x.((Popular(x) & HealthConsciousHome(x)) -> EatsSaladsRegularly(x))", "all x y.((Person(x) & GrownUpInHealthConsciousHomes(x)) -> EatsSaladsRegularly(x))", "all x y.((Person(x) & GrowingUpInHealthConsciousHomes(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & GrownUpInHealthConsciousHomes(x)) -> EatsSaladsRegularly(x))", "all x.((People(x) & GrownUpInHealthConsciousChildrenHomes(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & GrownUpInHealthConsciousChildrenHomes(x)) -> EatsSaladsRegularly(x))"]}
{"id": "folio_validation_483", "nl": "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.", "fol": "all x.(FulfillsNutritionalIntake(x) -> GrewUpInHealthConsciousHome(x))", "prediction": ["all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> GrownUpInHealthConsciousChildrenHomes(x))", "all x.((Person(x) & FulfillsNutritionalDaylyIntakes(x)) -> GrownUpInHealthConsciousChildrenHomes(x))", "all x y.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> GrowsUpInHealthConsciousHomes(x))", "all x.(FulfillsNutritionalDailyIntakes(x) -> GrownUpInHealthConsciousHomes(x))", "all x y.((Person(x) & FulfillsNutritionalDaylyIntakes(x,y)) -> GrowsUpInHealthConsciousChildrenHomes(x))", "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> grewUpInHealthConsciousHomes(x))", "all x.((Person(x) & FulfillsNutritionalDaylyIntakes(x)) -> grewUpInHealthConsciousHomes(x))", "all x.(FulfillsNutritionalDaylyIntakes(x) -> GrownUpInHealthConsciousHomes(x))", "all x y.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> GrownUpInHealthConsciousChildrenHomes(x))", "all x y.((Person(x) & NutritionalDailyIntake(y)) -> GrownUpInHealthConsciousHome(x,y))", "all x y.((Person(x) & FulfillsNutritionalDaytimeIntakes(x,y)) -> grewUpInHealthConsciousChildrenHomes(x,y))", "all x.(FulfillsNutritionalDailyIntakes(x) -> GrownUpInHealthConsciousChildrenHomes(x))", "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> GrowsUpInHealthConsciousHomes(x))", "all x.((People(x) & FulfillsNutritionalDailyIntakes(x)) -> grewUpInHealthConsciousHomes(x))", "all x.((Person(x) & FulfillsNutritionalDaytimeIntakes(x)) -> GrowsUpInHealthConsciousChildrenHomes(x))", "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> GrownUpInHealthConsciousChildrenHomes(x))"]}
{"id": "folio_validation_484", "nl": "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.", "fol": "all x.(HasGoodRelationshipWithParents(x) -> -ConsciousAboutHealth(x))", "prediction": ["all x.((Person(x) & GoodRelationshipsWithParents(x)) -> FulfillsNutritionalDailyIntakes(x))", "all x y.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> FulfillsNutritionalDailyIntakes(x,y))", "all x.(GoodRelationshipsWithParents(x) -> FulfillsNutritionalDailyIntakes(x))", "all x.((Person(x) & GoodRelationships(x)) -> FulfillsNutritionalDailyIntakes(x))", "all x.((Person(x) & GoodRelationshipsWithParents(x)) -> FulfillsNutritionalDailyIntakes(x))", "all x y z.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> FulfillsNutritionalDailyIntakes(x,z))", "all x y.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> FulfillsNutritionalDailyIntakes(x))", "all x.((People(x) & GoodRelationshipsWithParents(x)) -> FulfillsNutritionalDailyIntakes(x))", "all x.(GoodRelationshipsWithParents(x) -> FulfillsNutritionalDailyIntakes(x))", "all x y.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> FulfillsNutritionalDailyIntakes(x,y))", "all x y z.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> FulfillsNutritionalDailyIntakes(x,z))", "all x.((Person(x) & GoodRelationshipsWithParents(x)) -> FulfillsNutritionalDailyIntakes(x))", "all x y.((Person(x) & Parent(y) & HasGoodRelationships(x,y)) -> FulfillsNutritionalDailyIntakes(x,y))", "all x.((Person(x) & GoodRelationships(x)) -> FulfillsNutritionalDailyIntakes(x))", "all x y.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> FulfillsNutritionalDaylyIntakes(x,y))", "all x.(GoodRelationshipsWithParents(x) -> FulfillsNutritionalDailyIntakes(x))"]}
{"id": "folio_validation_485", "nl": "If people have good relationships with their parents, then they do not eat salads regularly.", "fol": "all x.(VisitsGymRegularly(x) -> FulfillsNutritionalIntake(x))", "prediction": ["all x.((Person(x) & GoodRelationshipsWithParents(x)) -> -EatsSaladsRegularly(x))", "all x y.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> -EatsSaladsRegularly(x))", "all x.((Person(x) & GoodRelationships(x)) -> -EatsSaladsRegularly(x))", "all x.(GoodRelationshipsWithParents(x) -> -EatsSaladsRegularly(x))", "(all x.(GoodRelationshipsWithParents(x) -> -EatSaladsRegularly(x)))", "all x.((Person(x) & GoodRelationshipsWithParents(x)) -> -EatsSaladsRegularly(x))", "all x y.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> -EatsSaladsRegularly(x))", "all x.((People(x) & GoodRelationshipsWithParents(x)) -> -EatsSaladsRegularly(x))", "all x.((Person(x) & GoodRelationships(x)) -> -EatsSaladsRegularly(x))", "all x.(GoodRelationshipsWithParents(x) -> -EatSaladsRegularly(x))", "exists x.(Person(x) & GoodRelationshipsWithParents(x) & -EatsSaladsRegularly(x))", "all x.((Person(x) & GoodRelationshipsWithParents(x)) -> -EatSaladsRegularly(x))", "all x.((Person(x) & HasGoodRelationships(x)) -> -EatsSaladsRegularly(x))", "all x y.((Person(x) & Parent(y) & HasGoodRelationships(x,y)) -> -EatsSaladsRegularly(x))", "all x y.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> -EatsSaladsRegularly(x))", "all x y.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> -EatSaladsRegularly(x))"]}
{"id": "folio_validation_486", "nl": "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.", "fol": "(((GrewUpInHealthConsciousHome(Taylor) & HasGoodRelationshipWithParents(Taylor)) | -GrewUpInHealthConsciousHome(Taylor)) & -HasGoodRelationshipWithParents(Marcy))", "prediction": ["all x.((Person(x) & VisitsGym(x) & AtLeastOneDay(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x.((People(x) & VisitsGym(x) & AtLeastOneDay(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x y.((Person(x) & VisitsGym(x,y) & AtLeastOneDay(x)) -> FulfillsDailyNutritionalIntakes(x,y))", "all x.((Person(x) & VisitsGym(x) & AtLeastOnceADay(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x.((People(x) & VisitsGym(x) & AtLeastOnceADay(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x.((People(x) & VisitGym(x) & AtLeastOneDay(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x.((Person(x) & VisitsGym(x,y) & AtLeastOneDay(y)) -> FulfillsDailyNutritionalIntakes(x,y))", "all x y.((People(x) & VisitsGym(x,y) & AtLeastOneDay(x)) -> FulfillsDailyNutritionalIntakes(x,y))", "all x y.((Person(x) & VisitsGym(x,y) & AtLeastOneDay(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x y.((Person(x) & VisitsGym(x,y) & UsuallyAtLeastOnceADay(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x y z.((Person(x) & Gym(y) & VisitsAtLeastOnceADay(x,y) & DailyNutritionalIntakes(z,y)) -> Fulfills(x,z))", "all x.((Person(x) & VisitsGym(x) & AtLeastOneDay(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x.((Person(x) & VisitsGym(x,y) & AtLeastOnceADay(y)) -> FulfillsDailyNutritionalIntakes(x,y))", "all x.((People(x) & VisitsGym(x) & UsuallyAtLeastOnceADay(x)) -> FulfillsNutritionalIntakes(x))", "all x y.((Person(x) & Gym(y) & VisitsAtLeastOneDay(x,y)) -> FulfillsDailyNutritionalIntakes(x,y))", "all x.((Person(x) & VisitsGym(x) & AtLeastOnceADay(x)) -> FulfillsDailyNutritionalIntakes(x))"]}
{"id": "folio_validation_487", "nl": "Taylor eats salads regularly.", "fol": "EatsSaladRegularly(Taylor)", "prediction": ["Taylor eatsSaladsRegularly.", "(Eats(Taylor,Salad) & Regularly(Taylor,Salad))", "-EatsSaladsRegularly(Taylor)", "all x.(Taylor(x) -> EatsSaladsRegularly(x))", "Taylor EatsSaladsRegularly.", "(Eats(Taylor,Salads) & Regularly(Taylor,Salads))", "Taylor eatsSaladsRegularly.", "(EatsRegularly(Taylor) & Salad(Taylor))", "Taylor EatsSaladsRegularly(Taylor)", "-EatsSaladsRegularly(Taylor)", "Taylor eatsSaladsRegularly(Taylor)", "(Eats(Taylor,Salad) & Regular(Taylor,Salad))", "all x.(Taylor(x) -> EatsSaladsRegularly(x))", "(EatsSalads(Taylor) & -EatsSalads(Taylor))", "all x.(Taylor(x) -> EatsSaladsRegularly(x))", "Taylor eatsSaladsRegularly."]}
{"id": "folio_validation_488", "nl": "Taylor visits the gym at least once a day.", "fol": "VisitsGymRegularly(Taylor)", "prediction": ["all x.(Taylor(x) -> VisitsGym(x))", "(TaylorVisitsGym(Taylor) & AtLeastOneDay(Taylor))", "all x y.((Taylor(x) & Gym(y)) -> VisitsAtLeastOneDay(x,y))", "-(TaylorVisitsGym(Taylor) & AtLeastOneDay(Taylor))", "Taylor visits gym at least once a day.", "(VisitsGym(Taylor) & AtLeastOneDay(Taylor))", "Taylor visits gyms at least once a day.", "all x.(Taylor(x) -> VisitsGym(x))", "(TaylorVisitsGym(Taylor) & AtLeastOneDay(Taylor))", "all x y.((Taylor(x) & Gym(y)) -> VisitsAtLeastOneDay(x,y))", "Taylor visits gym at least once a day.", "all x.(Taylor(x) -> VisitsGym(x,y))", "Taylor visitstheGym(Taylor,SecondDay)", "(VisitsGym(Taylor) & AtLeastOneDay(Taylor))", "all x y.((Taylor(x) & Gym(y)) -> Visits(x,y))", "all x.(Taylor(x) -> VisitsGym(x,y))"]}
{"id": "folio_validation_489", "nl": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.", "fol": "-(GrewUpInHealthConsciousHome(Taylor) | VisitsGymRegularly(Taylor))", "prediction": ["all x.(Taylor(x) -> (-GrowsUpInHealthConsciousHome(x) & -VisitsGym(x)))", "-(Taylor(Taylor) & -(GrowsUpInHealthConsciousHome(Taylor) | VisitsGym(Taylor)))", "(-(GrowthConsciousChildrenHome(Taylor) & -VisitsGym(Taylor)) | (-GrowsUpIn(Taylor,Health) & VisitsGym(Taylor,AtLeastOneDay))))", "(-(GrowthConsciousChildrenHome(Taylor) & -(GrowthConsciousChildrenHome(Taylor) | VisitsGym(Taylor))))", "all x.(Taylor(x) -> (-(GrowsUpInHealthConsciousHome(x) & -(Gym(x) & VisitsAtLeastOneDay(x)))))", "(-(GrowsUpInHealthConsciousHome(Taylor) & -VisitsGym(Taylor) & -GrowsUpInHealthConsciousHome(Taylor)) | VisitsGym(Taylor)))", "Neither grewUpInHealthConsciousChildrenHome(Taylor) & -(VisitsGym(Taylor) & AtLeastOneDay(Taylor)))", "Neither grew up in health-conscious childhood home nor visits gym at least once a day.", "(-(GrowthConscious(Taylor) & -GrowsUpIn(Taylor,Taylor)) | VisitsGym(Taylor,Taylor)))", "((Taylor(Taylor) & -GrowthConsciousChildrenHome(Taylor)) | (Taylor(Taylor) & VisitsGym(Taylor,Taylor))))", "neither grew up in health-conscious childhood home nor visits gym at least once a day.", "Neither grew up in health-consciousChildrenHome(Taylor) & -(VisitsGym(Taylor) & AtLeastOneDay(Taylor)))", "all x.(Taylor(x) & -(GrowsUpInHealthConsciousHome(x) | VisitsGym(x)))", "-(Taylor(Taylor) & -(GrowsUpInHealthConsciousHome(Taylor) | VisitsGymAtLeastOneDay(Taylor)))", "all x.(Taylor(x) -> (-GrowsUpInHealthConsciousHome(x) & -VisitsGym(x) & -GrowsUpInHealthConsciousHome(x)))", "(-(GrowthConsciousChildhoodHome(Taylor) & -GrowsUpIn(Taylor,Taylor)) | VisitsGym(Taylor,Taylor)))"]}
{"id": "folio_validation_490", "nl": "[BG] The Olympic games is a sporting event. ", "fol": "IsSportingEvent(Olympics)", "prediction": ["[BG] The OlympicGames(Olympics) is a sportingEvent(Olympics)", "(SportingEvent(OlympicGames) & [BG])", "all x.(OlympicGames(x) -> SportingEvent(x))", "[BG] (OlympicGames(Olympics) & SportingEvent(Olympics))", "[BG] The OlympicGames(Olympics) is a sportingEvent(Olympics)", "(SportingEvent(OlympicGames) & [BG])", "[BG] -SportingEvent(OlympicGames)", "all x.(OlympicGames(x) -> SportsalEvent(x))", "(SportingEvent(OlympicGames) & [BG] & [BG] & [BG]))", "[BG] (OlympicGames(Olympics) & SportingEvent(Olympics))", "[BG] The OlympicGames is a sportingEvent(x)", "[BG] The OlympicGames(Olympics) is a sportingEvent(Olympics)", "all x.(OlympicGames(x) -> SportsmanlikeEvent(x))", "all x.(OlympicGames(x) -> SportingEvent(x))", "all x.(OlympicGames(x) -> SportingEvent(x))", "all x.(OlympicGames(x) -> SportsalEvent(x))"]}
{"id": "folio_validation_491", "nl": "The last Olympic games was in Tokyo.", "fol": "LastOlympicGames(Tokyo)", "prediction": ["all x.(OlympicGames(x) -> InTokyo(x))", "the last OlympicGames(Olympics) & InTokyo(Olympics))", "(OlympicGames(Olympics) & InTokyo(Olympics))", "-OlympicGames(Olympics)", "the last olympic games was in Tokyo.", "all x y.((OlympicGame(x) & Tokyo(y)) -> Last(x,y))", "Die letzte OlympiadGames(x) & InTokyo(x))", "all x.(OlympicGames(x) -> InTokyo(x))", "all x.(OlympicGame(x) -> InTokyo(x))", "(OlympicGames(Olympics) & Tokyo(Olympics))", "The last OlympicGames(Olympics) & InTokyo(Olympics)", "the last olympic games was in Tokyo.", "all x y.((OlympicGame(x) & Tokyo(y)) -> LastGame(x,y))", "all x.(OlympicGame(x) -> InTokyo(x))", "(OlympicGames(Olympics) & InTokyo(Olympics))", "All x.(OlympicGames(x) -> InTokyo(x))"]}
{"id": "folio_validation_492", "nl": "The United States won the most medals in Tokyo. ", "fol": "WonMostMedals(UnitedStates,Tokyo)", "prediction": ["all x y.((UnitedStates(x) & Tokyo(y)) -> WonMostMedals(x,y))", "all x.((UnitedStates(x) & MostMedalWins(x,Tokyo)) -> Wins(x,Tokyo))", "(MostWonMeal(UnitedStates) & InTokyo(UnitedStates))", "(WonMostMedalsInTokyo(UnitedStates))", "all x y.((UnitedStates(x) & Tokyo(y)) -> WinsMostMedals(x,y))", "all x y z.((UnitedStates(x) & Tokyo(y) & Medal(z)) -> WonMostIn(x,y,z))", "(MostWonMeal(UnitedStates,Tokyo))", "all x.((UnitedStates(x) & MostMedalWins(x,Tokyo)) -> MostMedalWins(x,Tokyo))", "All x.(UnitedStates(x) -> WonMostMedalsInTokyo(x))", "all x.((UnitedStates(x) & Tokyo(y)) -> WonMostMedals(x,y))", "the most medals won in Tokyo by UnitedStates(UnitedStates)", "(MostMedalWon(U.S.A.,Tokyo))", "all x y.((UnitedStates(x) & Tokyo(y)) -> WonMostMedals(x,y))", "All x.((UnitedStates(x) & InTokyo(x)) -> WonMostMedals(x))", "(MostWonMeal(UnitedStatesInTokyo))", "all x y.((UnitedStates(x) & Tokyo(y)) -> WinsMostMedal(x,y))"]}
{"id": "folio_validation_493", "nl": "The world championships is a sporting event.", "fol": "IsSportingEvent(Champs)", "prediction": ["all x.(WorldChampionship(x) -> SportingEvent(x))", "all x y.((WorldChampionship(x) & SportingEvent(y)) -> Sportsmanlike(x))", "all x.(WorldChampionship(x) -> Sportsmanship(x))", "the worldchampionships.com is a sportingEvent(x)", "all x y.((WorldChampionship(x) & WorldChampionship(y)) -> SportingEvent(x))", "(SportingEvent(WorldChampionships)", "all x.(WorldChampionship(x) -> SportingEvent(x))", "(SportingEvent(WorldChampionships,Women))", "all x y.((WorldChampionship(x) & SportingEvent(y)) -> -SportingEvent(x))", "all x.(WorldCampionate(x) -> SportingEvent(x))", "all x.(WorldChampionship(x) -> SportsalEvent(x))", "all x y.((WorldChampionship(x) & WorldChampionship(y)) -> Sportsmanship(x))", "all x.(WorldChampionship(x) -> SportingEvent(x))", "All x.(WorldCampionate(x) -> SportsiveEvent(x))", "all x.(WorldChampionship(x) -> SportsiveEvent(x))", "all x.(WorldChampionship(x) -> SportingEvent(x))"]}
{"id": "folio_validation_494", "nl": "The last Olympic games were not in Tokyo.", "fol": "-LastOlympicGames(Tokyo)", "prediction": ["all x.(OlympicGames(x) -> -Tokyo(x))", "-(OlympicGames(x) & LastInTokyo(x))", "-exists x.(OlympicGame(x) & -InTokyo(x))", "(OlympicGames(Olympics) & -Tokyo(Olympics))", "Die letzten OlympicGames(n) & -Tokyo(n))", "the last olympic games were not in Tokyo.", "all x.(OlympicGames(x) -> -Tokyo(x))", "(LastOlympicGames(x) & -Tokyo(x))", "all x.(OlympicGame(x) -> -Tokyo(x))", "-(OlympicGames(Olympics))", "the last olympic games were not inTokyo.", "(LateOlympicGames(x) & -Tokyo(x))", "-Tokyo.", "all x.(OlympicGames(x) -> -InTokyo(x))", "(OlympicGames(Olympics) & -Tokyo(Olympics))", "all x.(OlympicGames(x) -> -Tokyo(x))"]}
{"id": "folio_validation_495", "nl": "The United States won the most medals in the last Olympic games.", "fol": "exists x.(LastOlympicGames(x) & WonMostMedals(UnitedStates,x))", "prediction": ["all x y.((UnitedStates(x) & OlympicGames(y)) -> WonMostMedals(x,y))", "all x y.((UnitedState(x) & OlympicGame(y)) -> WonMostMedals(x,y))", "(MostMedalWinners(UnitedStates) & InOlympicGames(UnitedStates))", "all x.((UnitedStates(x) & OlympicGames(x)) -> WinsMostMedals(x))", "all x y z.((UnitedState(x) & OlympicGames(y) & Medals(z)) -> WonMost(x,z))", "all x.((UnitedStates(x) & MostMedalWins(x,Olympics)) -> MostMedalWins(x,Olympics))", "the United States won the most medals in the last Olympic games.", "(WonMostMedal(U.S.A. & InOlympicGames(U.S.))", "the most medals won by the United States in the last Olympic Games.", "all x y.((UnitedStates(x) & OlympicGame(y)) -> WonMostMedals(x,y))", "-MostMedalWon(UnitedStatesOlympicGames)", "(MostMedalWinnersInOlympicGames(UnitedStates))", "(MostMedalWon(USA,Olympics))", "all x.((UnitedState(x) & OlympicGames(x)) -> WinsMostMedals(x,y))", "all x.((UnitedStates(x) & OlympicGames(x)) -> WinsMostMedal(x,y))", "all x y.((UnitedState(x) & OlympicGames(y)) -> WinsMostMedals(x,y))"]}
{"id": "folio_validation_496", "nl": "All horses have hooves.", "fol": "all x.(IsHorse(x) -> HasHooves(x))", "prediction": ["all x.(Horse(x) -> HasHooves(x))", "all x.(Horse(x) -> HasHooves(x))", "(all x.(Horse(x) -> HasHooves(x)))", "all x y.((Horse(x) & Horse(y)) -> HasHooves(x,y))", "all x.(Horse(x) -> HasHooves(x))", "(all x.(Horse(x) -> HasHooves(x)))", "all x.(Hoove(x) -> Horse(x))", "all x.exists y.(Horse(x) & Horse(y) & HasHooves(x,y))", "all x.(Horse(x) -> HasHooves(x))", "(all x.(Horse(x) -> HasHooves(x))", "all x.(Hoove(x) -> Horse(x))", "all x.(Horse(x) -> HasHooves(x))", "all x.(Horse(x) -> HasHoove(x))", "all x.(Horse(x) -> HasHooves(x))", "all x.(Horse(x) -> HasHooves(x))", "all x.(Horse(x) -> HasHoops(x))"]}
{"id": "folio_validation_497", "nl": "No humans have hooves.", "fol": "all x.(IsHuman(x) -> -HasHooves(x))", "prediction": ["-exists x.(Human(x) & HasHooves(x))", "all x.(Human(x) -> -HasHooves(x))", "-exists x.(Human(x) & HasHooves(x))", "all x.(Human(x) -> -HasHooves(x))", "(exists x.(Human(x) & HasHooves(x)))", "-exists x.(Human(x) & HasHoove(x))", "all x.(Human(x) -> -HasHooves(x))", "(exists x.(Human(x) & HasHooves(x)))", "-exists x.(Human(x) & HasHooves(x))", "-exists x.(Human(x) & Hoove(x))", "all x.(Human(x) -> NoHooves(x))", "all x.(Human(x) -> -HasHooves(x))", "all x.(Human(x) -> NoHooves(x))", "-exists x.(Human(x) & HasHoove(x))", "-exists x.(Human(x) & Hoove(x))", "-exists x.(Human(x) & HasHooves(x))"]}
{"id": "folio_validation_498", "nl": "Some humans are horses.", "fol": "exists x.(IsHuman(x) & IsHorse(x))", "prediction": ["exists x.(Human(x) & Horse(x))", "exists x.(Human(x) & Horse(x))", "exists x.(Human(x) & Horse(x))", "exists x.(Human(x) & Horse(x))", "exists x.(Human(x) & Horse(x))", "exists x.(Human(x) & Horse(x))", "exists x y.(Human(x) & Horse(y))", "exists x.(Habitat(x) & Horse(x))", "exists x.(Human(x) & Horse(x))", "exists x.(Human(x) & Horse(x))", "exists x.(Human(x) & Horse(x))", "exists x.(Human(x) & Horse(x))", "exists x.(Human(x) & Horse(x))", "exists x.(Human(x) & Horse(x))", "exists x.(Human(x) & Horse(x))", "exists x.(Human(x) & Horse(x))"]}
{"id": "folio_validation_499", "nl": "Susan flies to LGA airport.", "fol": "FlyToAirport(Susan,Lga)", "prediction": ["all x.(FliesTo(x,LGA) -> Susan(x))", "all x y.((Susan(x) & Airport(y)) -> FliesTo(x,y))", "all x.(Fly(x) -> LGAAirport(x))", "all x.((Susan(x) & Airport(y)) -> FliesTo(x,y))", "(FliesToLGAAirport(Susan))", "-FliesToLGAAirport(Susan,LGA)", "(FlyesToLGAAirport(Susan))", "all x.(FliesToLGAAirport(x) -> SusanFliesTo(x))", "all x y.((Susan(x) & Airport(y)) -> FliesTo(x,y))", "(FliesToLGAAirport(Susan)", "(FliesTo(Susan,LGA) Airport)", "Susan FliesToLGAAirport(s)", "(FlyesToLGAAirport(Susan))", "all x y.((Susan(x) & Airport(y)) -> FliesTo(x,y))", "Susan FliesToLGAAirport(Susan)", "Susan FliesToLGAAirport(s)"]}
{"id": "folio_validation_500", "nl": "The departure and arrival can not be the same airport.", "fol": "all x y.((FlyFromAirport(x,y) & -FlyToAirport(x,y)) | (-FlyFromAirport(x,y) & FlyToAirport(x,y)))", "prediction": ["all x.((Airport(x) & Airport(x)) -> -(Departure(x) & Arrival(x))))", "(exists x.(Airport(x) & Departure(x) & Arrival(x)) & -exists y.(Airport(y) & Arrival(y))))", "(-(Departure(x) & Arrival(x)))", "(exists x.(Departure(x) & Arrival(x)) & -exists y.(Airport(y) & Arrival(y))))", "-exists x.(Airport(x) & Airport(x) & Departure(x) & Arrival(x))", "all x.((Airport(x) & Airport(x)) -> -(Departure(x) & Arrival(x))))", "all x.(Departure(x) -> -Arrival(x))", "-(SameAttendee(Departure) & SameAttendee(Arrival))", "-(SameAirport(Departure) & SameAirport(Arrival))", "the airport(Departure) & Airport(Arrival) -SameAirport(Departure) & Airport(Arrival))", "(-(Departure(x) & Arrival(x)))", "all x.(Departure(x) -> -(Arrival(x) & Airport(x)))", "all x.((Airport(x) & Airport(y) & Departure(x,y)) -> -(Airport(x,y) & Airport(x,y)))", "all x.((Airport(x) & Airport(x)) -> -(Departure(x) | Arrival(x))))", "all x.(Airport(x) -> -SameAirport(x))", "All x.(Departure(x) -> -Airport(x))"]}
{"id": "folio_validation_501", "nl": "John flies from LGA airport.", "fol": "FlyFromAirport(John,Lga)", "prediction": ["John flies from LGA airport.", "(FliesFromLGAAirport(John))", "all x.((John(x) & Airport(y)) -> FliesFrom(x,y))", "(FliesFrom(John,LGA) & Airport(John,LGA))", "all x y.((John(x) & Airport(y)) -> FliesFrom(x,y))", "all x.(Fly(John,LGA) -> FliesFrom(John,LGA))", "John flies from LGA airport.", "(FliesFromLGAAirport(John))", "-FliesFromLGAAirport(John)", "(FlyesFromLGAAirport(John))", "John flies from LGA Airport.", "-FliesFromLGAAirport(John)", "(FliesFromLGAAirport(John))", "John FliesFromLGAAirport(John,LGA)", "John flies from LGA airport.", "John FliesFromLGAAirport(John)"]}
{"id": "folio_validation_502", "nl": "Susan flies from LGA airport.", "fol": "FlyFromAirport(Susan,Lga)", "prediction": ["all x.((Susan(x) & Airport(y)) -> FliesFrom(x,y))", "(FliesFromLGAAirport(Susan))", "all x y.((Susan(x) & Airport(y)) -> FliesFrom(x,y))", "all x.(FliesFrom(x,LGAAirport) -> SusanFlies(x))", "Susan flies from LGA airport.", "(FlyesFromLGAAirport(Susan))", "-FliesFromLGAAirport(Susan)", "all x.(Fly(x) -> LGAAirport(x))", "(FliesFromLGAAirport(Susan))", "Susan flies from LGA Airport.", "(FliesFrom(Susan,LGA))", "(Fly(Susan,LGA) & Airport(Susan))", "all x y.((Susan(x) & Airport(y)) -> FliesFrom(x,y))", "Susan FliesFromLGAAirport(s)", "Susan FliesFromLGAAirport(s)", "Susan FliesFromLGAAirport(Susan)"]}
{"id": "folio_validation_503", "nl": "John flies to LGA airport.", "fol": "FlyToAirport(John,Lga)", "prediction": ["John flies to LGA airport.", "all x.(John(x) -> FliesToLGAAirport(x))", "(FliesToLGAAirport(John))", "all x y.((John(x) & Airport(y)) -> FliesTo(x,y))", "all x.(Fly(John) -> LGAAirport(John))", "all x.((John(x) & Airport(y)) -> FliesTo(x,y))", "John flies to LGA airport.", "(FliesToLGAAirport(John))", "(FlyesToLGAAirport(John))", "-FliesToLGAAirport(John)", "(FliesToLGAAirport(John))", "-FliesToLGAAirport(John,LGA)", "John flies to LGA Airport.", "John FliesToLGAAirport(John,LGA)", "(flies to LGAAeroport(John))", "John FliesToLGAAirport(John,LGA)"]}
{"id": "folio_validation_504", "nl": "No one nice to animals is mean to animals.", "fol": "all x.(NiceToAnimals(x) -> -MeanToAnimals(x))", "prediction": ["all x.(NiceToAnimals(x) -> MeanToAnimals(x))", "-exists x.(NiceToAnimals(x) & MeanToAnimals(x))", "-all x.(NiceToAnimals(x) -> MeanToAnimals(x))", "all x.((NiceToAnimals(x) & MeanToAnimals(x)) -> -NiceToAnimals(x))", "all x.(NiceToAnimals(x) -> MeanToAnimals(x))", "-exists x.(NiceToAnimals(x) & MeanToAnimals(x))", "all x.((PleasantToAnimals(x) & MeanToAnimals(x)) -> -PleasantToAnimals(x))", "-all x.(NiceToAnimals(x) -> MeanToAnimals(x))", "all x.((NiceToAnimals(x) & MeanToAnimals(x)) -> -NiceToAnimals(x))", "all x.(NiceToAnimals(x) -> MeanToAnimals(x))", "-exists x.(NiceToAnimals(x) & MeanToAnimals(x))", "all x y.((Person(x) & NiceToAnimals(x,y)) -> MeanToAnimals(x,y))", "-all x.(NiceToAnimals(x) -> MeanToAnimals(x))", "all x.(NiceToAnimals(x) -> MeanToAnimals(x))", "-exists x.(NiceToAnimals(x) & MeanToAnimals(x))", "all x.(NiceToAnimals(x) -> MeanToAnimals(x))"]}
{"id": "folio_validation_505", "nl": "Some grumpy people are mean to animals.", "fol": "exists x.(GrumpyPerson(x) & MeanToAnimals(x))", "prediction": ["exists x.(Gumpy(x) & MeanToAnimals(x))", "exists x.(GumpyPerson(x) & MeanToAnimals(x))", "exists x.(GumpyPerson(x) & MeanToAnimals(x))", "exists x.(Humpy(x) & MeanToAnimals(x))", "exists x.(Gumpy(x) & MeanToAnimals(x))", "exists x.(HumpyPerson(x) & MeanToAnimals(x))", "exists x y.(Gumpy(x) & Animal(y) & MeanTo(x,y))", "exists x.(GumpyPerson(x) & MeanToAnimals(x))", "exists x y.((HumpyPerson(x) & Animal(y)) -> MeanTo(x,y))", "exists x.(grumpy(x) & MeanToAnimals(x))", "exists x.(Gumpy(x) & MeanToAnimals(x))", "all x y.((HumpyPerson(x) & Animal(y)) -> MeanTo(x,y))", "exists x.(HumpyPerson(x) & MeanToAnimals(x))", "exists x.(MeanToAnimals(x) & GrumpyPeople(x))", "exists x.(Grumpy(x) & MeanToAnimals(x))", "exists x.(grumpy(x) & MeanToAnimals(x))"]}
{"id": "folio_validation_506", "nl": "All animal lovers are nice to animals.", "fol": "all x.(LovesAnimals(x) -> NiceToAnimals(x))", "prediction": ["all x.(AnimalLover(x) -> NiceToAnimals(x))", "all x.(AnimalLover(x) -> NiceToAnimals(x))", "(all x.(AnimalLover(x) -> NiceToAnimals(x)))", "all x.(AnimalLieutor(x) -> NiceToAnimals(x))", "all x y.((AnimalLover(x) & Animal(y)) -> NiceTo(x,y))", "all x.(AnimalLover(x) -> NiceToAnimals(x))", "all x y.((AnimalLover(x) & Animal(y) & Loves(x,y)) -> NiceTo(x,y))", "all x.(AnimalLover(x) -> NiceToAnimals(x))", "exists x.all y.(AnimalLover(x) & Animal(y) & NiceTo(x,y))", "all x y.((AnimalLover(x) & Animal(y)) -> NiceTo(x,y))", "all x.(AnimalLieutor(x) -> NiceToAnimals(x))", "all x.(AnimalLover(x) -> NiceToAnimals(x))", "all x.(AnimalLieutor(x) -> NiceToAnimals(x))", "all x.(AnimalLover(x) -> NiceToAnimals(x))", "all x.(AnimalLover(x) -> NiceToAnimals(x))", "all x.(AnimalLover(x) -> NiceToAnimals(x))"]}
{"id": "folio_validation_507", "nl": "If someone owns a pet, then they love animals.", "fol": "all x.(OwnsPet(x) -> LovesAnimals(x))", "prediction": ["all x.(OwnsPet(x) -> LoveAnimals(x))", "all x.((OwnsPet(x) & LovesAnimals(x)) -> LovesAnimals(x))", "all x.(OwnsPet(x) -> LovesAnimals(x))", "all x y.((OwnsPet(x) & Animal(y)) -> Loves(x,y))", "all x y.((OwnsPet(x) & Pet(y) & LovesAnimals(x)) -> LovesAnimals(x))", "all x.(OwnsPet(x) -> LoveAnimals(x))", "all x.((OwnsPet(x) & LovesAnimals(x)) -> LovesAnimals(x))", "all x y.((Pet(x) & Owner(y)) -> LovesAnimals(x))", "all x.((OwnsPet(x) & LovesAnimals(x)) -> OwnsPet(x))", "all x.(OwnsPet(x) -> LovesAnimals(x))", "exists x.(Pet(x) & Owns(x,y))", "all x y.((OwnsPet(x) & Animal(y)) -> Loves(x,y))", "all x y.((OwnsPet(x) & Pet(y) & LovesAnimals(x)) -> LovesAnimals(x))", "all x.(OwnsPet(x) -> LoveAnimals(x))", "exists x.(Owns(x,pet) & Loves(x,animals))", "exists x.(OwnsPet(x) & LovesAnimals(x))"]}
{"id": "folio_validation_508", "nl": "Tom is a pet owner.", "fol": "OwnsPet(Tom)", "prediction": ["(PetOwner(Tom) & PetOwner(Tom))", "all x.(PetOwner(x) -> Tom(x))", "Tom is petowner.", "all x.(PetOwner(x) -> Tom(x))", "(PetOwner(Tom)", "Tom is a petowner.", "Tom is petowner.", "all x.(PetOwner(x) -> Tom(x))", "(PetOwner(Tom)", "all x.(PetOwner(x) -> TomOwner(x))", "all x.(Pet(x) -> Owner(x))", "Tom is petowner.", "(PetOwner(Tom)", "Tom is petowner.", "(PetOwner(Tom)", "(PetOwner(Tom)"]}
{"id": "folio_validation_509", "nl": "Tom is a grumpy person.", "fol": "GrumpyPerson(Tom)", "prediction": ["all x.((Tom(x) & Grumpy(x)) -> Person(x))", "all x.(GumpyPerson(x) -> Tom(x))", "(grumpyPerson(Tom)", "all x.(Tom(x) -> GrumpyPerson(x))", "Tom is GrumpyPerson(Tom)", "Tom is grumpy.", "(grumpyPerson(Tom)", "all x.((Tom(x) & Grumpy(x)) -> Person(x))", "(GumpyPerson(Tom)", "all x.(GumpyPerson(x) -> Tom(x))", "(grumpyPerson(Tom)", "all x.(Tom(x) -> GrumpyPerson(x))", "Tom is GrumpyPerson(Tom)", "exists x.(Tom(x) & Grumpy(x))", "all x.(Tam(x) -> GrumpyPerson(x))", "(grumpyPerson(Tom)"]}
{"id": "folio_validation_510", "nl": "Tom is not a grumpy person and mean to animals.", "fol": "-(GrumpyPerson(Tom) & MeanToAnimals(Tom))", "prediction": ["all x.(Tom(x) -> (-grumpy(x) & MeanToAnimals(x)))", "all x.((Tom(x) & -Gumpy(x) & MeanToAnimals(x)) -> -Gumpy(x))", "all x.(Tom(x) -> (-GumpyPerson(x) & MeanToAnimals(x)))", "(-grumpyPerson(Tom) & MeanToAnimals(Tom))", "(-GumpyPerson(Tom) & MeanToAnimals(Tom))", "all x.((Tom(x) & -Gumpy(x) & MeanToAnimals(x)) -> -Gumpy(x))", "all x y.((Tom(x) & Animal(y)) -> (-GumpyPerson(x) & MeanTo(x,y)))", "(-grumpy(Tom) & MeanToAnimals(Tom))", "all x.(Tom(x) -> (-grumpy(x) & MeanToAnimals(x)))", "(-grumpyPerson(Tom) & MeanToAnimals(Tom))", "-(grumpyPerson(Tom) & MeanToAnimals(Tom))", "all x.(Tam(x) -> (-Gumpy(x) & MeanToAnimals(x)))", "all x.((Tom(x) & -Gumpy(x) & MeanToAnimals(x)) -> -Gumpy(x))", "(-grumpyPerson(Tom) & MeanToAnimals(Tom))", "all x.(Tam(x) -> (-GumpyPerson(x) & MeanToAnimals(x)))", "all x.(Tom(x) -> (-grumpyPerson(x) & MeanToAnimals(x)))"]}
{"id": "folio_validation_511", "nl": "If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.", "fol": "(-(GrumpyPerson(Tom) & MeanToAnimals(Tom)) -> -(GrumpyPerson(Tom) | LovesAnimals(Tom)))", "prediction": ["all x.((Tam(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> (-GumpyPerson(x) & -AnimalLover(x)))", "all x.((GumpyPerson(x) & MeanToAnimals(x)) -> (-GumpyPerson(x) & -AnimalLover(x)))", "all x.((Tam(x) & -Grumpy(x) & MeanToAnimals(x)) -> (-Grumpy(x) & -AnimalLover(x)))", "(-GumpyPerson(Tom) & MeanToAnimals(Tom)) -> (-GumpyPerson(Tom) & -AnimalLover(Tom)))", "all x.((Tom(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> (-GumpyPerson(x) & -AnimalLover(x)))", "all x.((Tame(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> (-GumpyPerson(x) & -AnimalLover(x)))", "all x y.((Tom(x) & GrumpyPerson(x) & MeanToAnimals(x)) -> (-GgrumpyPerson(x) & -AnimalLover(y)))", "all x.((GumpyPerson(x) & MeanToAnimals(x)) -> (-GumpyPerson(x) & -AnimalLover(x)))", "(-grumpyPerson(Tom) & MeanToAnimals(Tom))", "all x.((MoreToAnimals(x) & -GumpyPerson(x)) -> -AnimalLover(x))", "all x.((Grumpy(x) & MeanToAnimals(x)) -> (-Grumpy(x) & -AnimalLover(x)))", "(all x.((Tam(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> -GumpyPerson(x) & -AnimalLover(x)))", "all x.((HumpyPerson(x) & MeanToAnimals(x)) -> (-HumpyPerson(x) & -AnimalLover(x)))", "all x.((Tomb(x) & -Grumpy(x) & MeanToAnimals(x)) -> (-Grumpy(x) & -AnimalLover(x)))", "all x.((Tom(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> -GumpyPerson(x) & -AnimalLover(x))", "all x.((Tom(x) & -GrumpyPerson(x) & MeanToAnimals(x)) -> (-GrumpyPerson(x) & -AnimalLover(x)))"]}
{"id": "folio_validation_512", "nl": "A podcast is not a novel.", "fol": "all x.(Podcast(x) -> -Novel(x))", "prediction": ["all x.(Podcast(x) -> -Novel(x))", "all x.(Podcast(x) -> -Novel(x))", "all x.(Podcast(x) -> -Novel(x))", "all x y.((Podcast(x) & Novel(y) & -Novel(x)) -> -(Novel(x) & Podcast(y)))", "all x y.((Podcast(x) & Novel(y)) -> -Novel(x))", "all x.(Podcast(x) -> -Novel(x))", "all x.(Podcast(x) -> -Novel(x))", "(-Novel(podcast))", "all x.(Podcast(x) -> -Novel(x))", "all x.(Podcast(x) -> -Novel(x))", "all x.(Podcast(x) -> -Novel(x))", "all x.(Podcast(x) -> -Novel(x))", "exists x.(Podcast(x) & -Narrative(x))", "exists x.(Podcast(x) & -Novel(x))", "exists x.(Blog(x) & -Narrative(x))", "exists x.(Podcast(x) & -Novel(x))"]}
{"id": "folio_validation_513", "nl": "[BG] If a person is born in American City, the person is American.", "fol": "all x.exists y.((BornInCity(x,y) & City(y) & AmericanStatus(y)) -> AmericanStatus(x))", "prediction": ["all x.((BirthInAmericanCity(x) & BornInAmericanCity(x)) -> American(x))", "all x.(BornInAmericanCity(x) -> American(x))", "all x.((Person(x) & BornInAmericanCity(x)) -> American(x))", "[BG] -> AmericanCity(Person))", "(BornInAmericanCity(Person) -> American(Person))", "all x.(BirthInAmericanCity(x) -> American(x))", "[BG] -> AmericanCity(Person))", "[BG] (BirthInAmericanCity(Person) & BornInAmericanCity(Person))", "(BirthInAmericanCity(Person) -> American(Person))", "[BG] - (BirthInAmericanCity(Person) & BornInAmericanCity(Person)))", "all x.((BirthInAmericanCity(x) & BornInAmericanCity(x)) -> American(x))", "[BG] -> AmericanCity(Person))", "all x.(BornInAmericanCity(x) -> American(x))", "all x.((Person(x) & BornInAmericanCity(x)) -> American(x))", "all x.(BirthInAmericanCity(x) -> American(x))", "all x.((Person(x) & BornInAmericanCity(x)) -> American(x))"]}
{"id": "folio_validation_514", "nl": "[BG] If a book is novel and it is written by a person, then the person is a novel writer.", "fol": "all x y.((Novel(x) & WrittenByAuthor(x,y)) -> NovelWriter(y))", "prediction": ["all x.((Book(x) & Novel(x) & WrittenBy(x,Person)) -> NovelWriter(x))", "all x y.((Book(x) & Novel(x) & WrittenBy(x,y)) -> NovelWriter(y))", "all x.((Book(x) & Novel(x) & WrittenByPerson(x)) -> NovelWriter(x))", "[BG] (Novel(book) & WrittenBy(book,person)))", "all x.(Novel(x) -> (WrittenBy(x,Person) & NovelWriter(x)))", "((Book(x) & Novel(x)) & WrittenBy(x,y)) -> NovelWriter(y))", "(Novel(Book) & WrittenBy(BookPerson(Book)) -> NovelWriter(Person))", "all x y.((Book(x) & Novel(x) & Person(y) & WrittenBy(y,x)) -> NovelWriter(y))", "all x y.((Book(x) & Novel(x) & WrittenBy(x,y)) -> NovelWriter(x))", "[BG] (Novel(book) & WrittenBy(book,person)))", "all x.((Book(x) & Novel(x) & WrittenBy(x,Person)) -> NovelWriter(x))", "[BG] (Novel(Book) & WrittenBy(Book(Book) & Person(Person) & NovelWriter(Person)))", "[BG] -> (Novel(book) & WrittenBy(book,person)))", "all x.(NovelBook(x) -> NovelWriter(x))", "all x.((Book(x) & Novel(x) & WrittenByPerson(x)) -> NovelWriter(x))", "all x y.((Book(x) & Novel(x) & WrittenBy(x,y)) -> NovelWriter(y))"]}
{"id": "folio_validation_515", "nl": "Dani Shapiro is an American writer.", "fol": "(AmericanStatus(Dani_Shapiro) & Writer(Dani_Shapiro))", "prediction": ["Dani Shapiro (AmericanWriter)", "(AmericanWriter(DaniShapiro)", "Dani Shapiro is an AmericanWriter.", "(AmericanWriter(DaniShapiro)", "-AmericanWriter(-DaniShapiro)", "AmericanWriter(DaniShakero)", "DaniShapiro (AmericanWriter)", "DaniShapiro(x) & AmericanWriter(x))", "AmericanWriter(DaniShapiro)", "(AmericanWriter(DaniShakero)", "Dani Shapiro (AmericanWriter)", "DaniShakero is an AmericanWriter.", "Dani Shapiro is an AmericanWriter(x)", "(AmericanWriter(DaniShapiro)", "AmericanWriter(danissapiro)", "Dani Shapiro (AmericanWriter)"]}
{"id": "folio_validation_516", "nl": "Family History is written by Dani Shapiro.", "fol": "WrittenByAuthor(Family_History,Dani_Shapiro)", "prediction": ["all x.(FamilyHistory(x) -> WrittenByDaniShakero(x))", "(FamilyHistory(Family) & WrittenByDaniShakero(Family))", "(WrittenByDaniShapiro(FamilyHistory)", "FamilyHistory(f) & WrittenByDaniShakero(f)", "Dani Shapiro (FamilyHistory)", "(FamilyHistory(f) & WrittenByDaniShapiro(f))", "All x.(FamilyHistory(x) -> WrittenByDaniShapiro(x))", "all x y.((FamilyHistory(x) & DaniShakero(y)) -> WrittenBy(x,y))", "(FamilyHistory(Family) & WrittenByDaniShapiro(Family))", "(WrittenByDaniShakero(FamilyHistory)", "FamilyHistory(FamilyHistory) -> WrittenByDaniShakero(FamilyHistory))", "all x.(FamilyHistory(x) -> WrittenByDaniShakero(x))", "(WrittenByDaniShapiro(FamilyHistory)", "all x y.((FamilyHistory(x) & DaniShakero(y)) -> WrittenBy(x,y))", "All x.(FamilyHistory(x) -> WrittenByDaniShapiro(x))", "All x.(FamilyHistory(x) -> WrittenByDaniShapiro(x))"]}
{"id": "folio_validation_517", "nl": "Family History is a novel written in 2003.", "fol": "(Novel(Family_History) & PublishedInYear(Family_History,Y2003))", "prediction": ["all x.(FamilyHistory(x) -> WrittenIn2003(x))", "(Novel(FamilyHistory) & WrittenIn2003(FamilyHistory))", "FamilyHistory(f) -> WrittenIn2003(f))", "the Novel FamilyHistory(f) & WrittenIn2003(f))", "all x.((Novel(x) & WrittenIn2003(x)) -> FamilyHistory(x))", "all x.(FamilyHistory(x) -> WrittenIn2003(x))", "FamilyHistory is a Novel written in 2003.", "(Novel(FamilyHistory) & WrittenIn2003(FamilyHistory))", "FamilyHistory is a Novel written in 2003.", "all x.(FamilyHistory(x) -> WrittenIn2003(x))", "(Novel(FamilyHistory) & WrittenIn2003(FamilyHistory))", "All x.(FamilyHistorian(x) -> WrittenIn2003(x))", "all x.(FamilyHistory(x) -> WrittenIn2003(x))", "(Novel(FamilyHistory) & WrittenIn2003(FamilyHistory))", "All x.(FamilyHistory(x) -> WrittenIn2003(x))", "(Novel(FamilyHistory) & WrittenIn2003(FamilyHistory))"]}
{"id": "folio_validation_518", "nl": "Dani Shapiro created a podcast called Family Secrets.", "fol": "(Podcast(Family_Secrets) & CreatedByAuthor(Family_Secrets,Dani_Shapiro))", "prediction": ["Dani Shapiro created a podcast called FamilySecrets.", "all x.((DaniShakero(x) & FamilySecrets(x)) -> CreatedPodcast(x))", "(CreatedBlog(DaniShapiro,FamilySecrets) & DaniShakero(DaniShapiro))", "all x y.((DaniShapiro(x) & Podcast(y)) -> FamilySecrets(x,y))", "(createdBlog(DaniShapiro,FamilySecrets) & Created(DaniShapiro,FamilySecrets))", "(CreatedBlog(DaniShapiro,FamilySecrets) & FamilySecrets(DaniShapiro,FamilySecrets))", "Dani Shapiro created a podcast called FamilySecrets(d) & Podcast(d))", "all x.((DaniShapiro(x) & FamilySecrets(x)) -> CreatedPodcast(x))", "Dani Shapiro created FamilySecrets(d)", "(CreatedBlog(DaniShakero,FamilySecrets) & Created(DaniShakero,FamilySecrets))", "DaniShakero created Podcast called FamilySecrets.", "Dani Shapiro created Podcast called FamilySecrets.", "Dani Shapiro created a podcast called FamilySecrets.", "all x.((DaniShakero(x) & FamilySecrets(x)) -> CreatedPodcast(x))", "Dani Shapiro created FamilySecrets(d)", "Dani Shapiro & FamilySecrets(x)"]}
{"id": "folio_validation_519", "nl": "[BG] Boston is an American city.", "fol": "(City(Boston) & AmericanStatus(Boston))", "prediction": ["[BG] Boston is an AmericanCity.", "(AsianCity(Boston) & AmericanCity(Boston))", "(AmericanCity(Boston) & [BG] -> AmericanCity(Boston))", "[BG] Boston is AmericanCity(x)", "Boston ((Boston(Boston) & AmericanCity(Boston)))", "[Boston(Boston) & AmericanCity(Boston))", "(AsianCity(Boston) & AmericanCity(Boston))", "[BG] Boston is an AmericanCity.", "(AsianCity(Boston) & [BG] -> AmericanCity(Boston))", "(AmericanCity(Boston) & [BG] Boston))", "[Boston] is a AmericanCity(x)", "[BG] Boston is AmericanCity(x)", "[BG] Boston (AmericanCity))", "[BG] -AmericanCity(Boston)", "[BG] Boston is a AmericanCity.", "[BG] - AmericanCity(Boston)"]}
{"id": "folio_validation_520", "nl": "Dani Shapiro is a novel writer.", "fol": "NovelWriter(Dani_Shapiro)", "prediction": ["(NovelWriter(DaniShapiro) & NovelWriter(DaniShapiro))", "all x.((NarrativeWriter(x) & DaniShapiro(x)) -> NovelWriter(x))", "Dani Shapiro is a novel writer.", "all x.(NarrativeWriter(x) -> DaniShapiro(x))", "all x.(NovelWriter(x) -> DaniShapiro(x))", "Dani Shapiro (narrativeWriter)", "DaniShapiro (narrativeWriter(n) & Novel(n))", "(NovelWriter(DaniShakero) & NovelWriter(DaniShakero))", "(NovelWriter(DaniShapiro) & Novel(DaniShapiro))", "Dani Shapiro is a novel writer.", "all x.(NarrativeWriter(x) -> DaniShakero(x))", "all x.(NovelWriter(x) -> DaniShakero(x))", "Dani Shapiro (NovelWriter)", "(NovelWriter(DaniShakero,DaniShakero)", "Dani Shapiro is novelist.", "(NovelWriter(DaniShapiro)"]}
{"id": "folio_validation_521", "nl": "Family Secrets is a novel.", "fol": "Novel(Family_Secrets)", "prediction": ["all x.(FamilySecrets(x) -> Novel(x))", "(Novel(FamilySecrets) & Novel(FamilySecrets))", "FamilySecrets(f) -> Novel(f))", "all x.(FamilySecrets(x) -> Novel(x))", "(Novel(FamilySecrets) & Novel(FamilySecrets))", "FamilySecrets(x) -> Novel(x))", "FamilySecrets(f) & Novel(f) & WrittenBy(f,f,f))", "all x.((FamilySecrets(x) & Novel(x)) -> Novel(x))", "All x.(FamilySecrets(x) -> Novel(x))", "(Novel(FamilySecrets) & Novel(FamilySecrets))", "FamilySecrets is a Novel.", "(Narrative(FamilySecrets) & Novel(FamilySecrets))", "all x.(FamilySecrets(x) -> Novel(x))", "All x.(FamilySecrets(x) -> Novel(x))", "all x.(FamilySecrets(x) -> Novel(x))", "All x.(FamilySecrets(x) -> Novel(x))"]}
{"id": "folio_validation_522", "nl": "Dani Shapiro was born in Boston.", "fol": "BornInCity(Dani_Shapiro,Boston)", "prediction": ["Dani Shapiro was born in Boston.", "(Birth(DaniShapiro,Boston))", "(Birth(DaniShakero,Boston) & BornIn(DaniShakero,Boston))", "Dani Shapiro was born in Boston.", "-Birth(DaniShakero,Boston)", "DaniShakero was born in Boston.", "DannieShapiro(d) & BornIn(d) & Boston(d))", "Dani Shapiro (bornInBoston)", "DaniShapiro was born in Boston.", "Dani Shapiro was born in Boston.", "(Birth(DaniShakero,Boston) & BornIn(DaniShakero,Boston))", "(Birth(DaniShapiro,Boston))", "DaniShapiro (bornInBoston)", "DaniShakero was born in Boston.", "Dani Shapiro was born in Boston.", "Dani Shapiro (bornInBoston)"]}
{"id": "folio_validation_523", "nl": "Some basketball players are not American.", "fol": "exists x.(IsBasketballPlayer(x) & -IsAmerican(x))", "prediction": ["exists x.(BasketballPlayer(x) & -American(x))", "exists x.(BasketballPlayer(x) & -American(x))", "exists x.(BasketballPlayer(x) & -American(x))", "exists x.(BasketballPlayer(x) & -American(x))", "exists x y.(BasketballPlayer(x) & Player(y) & -American(y))", "exists x y.(BasketballPlayer(x) & BasketballPlayer(y) & -American(y))", "exists x.(BasketballPlayer(x) & -American(x))", "exists x.(BasketballPlayer(x) & -American(x))", "exists x.(BalloonPlayer(x) & -American(x))", "exists x.(BasketballPlayer(x) & -American(x))", "exists x.(BasketballPlayer(x) & -American(x))", "exists x.(BasketballPlayer(x) & -Am\u00e9rican(x))", "exists x.(BasketballPlayer(x) & -American(x))", "exists x.(BasketballPlayer(x) & -American(x))", "exists x.(BasketballPlayer(x) & -American(x))", "exists x.(BasketballPlayer(x) & -American(x))"]}
{"id": "folio_validation_524", "nl": "All basketball players are tall.", "fol": "all x.(IsBasketballPlayer(x) -> IsTall(x))", "prediction": ["all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "(all x.(BasketballPlayer(x) -> Tall(x)))", "all x y.((BasketballPlayer(x) & Player(y)) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "(all x.(BasketballPlayer(x) -> Tall(x)))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "(all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BalloonPlayer(x) -> Tall(x))", "all x.(BasketballPilot(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))"]}
{"id": "folio_validation_525", "nl": "If someone is tall, they wear large shoes.", "fol": "all x.(IsTall(x) -> WearsLargeShoes(x))", "prediction": ["all x.(Tall(x) -> WearLargeShoes(x))", "all x.((Tall(x) & WearsLargeShoes(x)) -> Tall(x))", "all x.(Tall(x) -> WearsLargeShoes(x))", "all x.((Tall(x) & WearsLargeShoes(x)) -> Tall(x))", "all x.(Tall(x) -> WearLargeShoes(x))", "all x y.(Tall(x) -> WearsLargeShoes(x,y))", "all x.(Tall(x) -> WearsLargeShoes(x))", "all x.((Tall(x) -> WearsLargeShoes(x))", "all x y.(Tall(x) -> WearsLargeShoes(x,y))", "all x.((Tall(x) & WearsLargeShoes(x)) -> Tall(x))", "all x.(Tall(x) -> WearLargeShoes(x))", "exists x.(Tall(x) & WornBy(x,LargeShoes))", "all x.(Tall(x) -> WearsLargeShoes(x))", "all x.((Tall(x) -> WearLargeShoes(x))", "all x.(Tall(x) -> WornLargeShoes(x))", "exists x.(Tall(x) & WearsLargeShoes(x))"]}
{"id": "folio_validation_526", "nl": "If someone wears large shoes, they wear large-sized clothes.", "fol": "all x.(WearsLargeShoes(x) -> WearsLargeClothes(x))", "prediction": ["all x.((WornsLargeShoes(x) & WearsLargeSizedClothes(x)) -> WearsLargeSizedClothes(x))", "all x.((WearsLargeShoes(x) & WearsLargeSizedClothes(x)) -> WearsLargeSizedClothes(x))", "all x.(WearsLargeShoes(x) -> WearsLargeSizedClothes(x))", "(WearsLargeShoes(x) -> WearsLargeSizedClothes(x))", "all x y.((WornsLargeShoes(x) & Clothing(y)) -> WearsLargeSizes(x,y))", "all x y.((WornsLargeShoes(x) & WearsLargeSizedClothes(y)) -> WearsLargeSizedClothes(x,y))", "all x y.((WearsLargeShoes(x) & WearsLargeSizedClothes(y)) -> WearsLargeSizedClothes(x,y))", "all x.((WornsLargeShoes(x) & WearsLargeSizedClothes(x)) -> WearsLargeSizedClothes(x))", "all x.((WearsLargeShoes(x) & WearsLargeSizedClothes(x)) -> WearsLargeSizedClothes(x))", "all x.(WearsLargeShoes(x) -> WearsLargeSizedClothes(x))", "all x y.((Person(x) & WearsLargeShoes(x)) -> WearsLargeSizedClothes(x))", "all x.((WorthsLargeShoes(x) & WearsLargeSizeClothes(x)) -> WearsLargeSizeClothes(x))", "all x.(WearsLargeShoes(x) -> WearsLargeSizedClothes(x))", "all x.((WearsLargeShoes(x) & WearsLargeSizeClothes(x)) -> WearsLargeSizeClothes(x))", "all x.(WearsLargeShoes(x) -> WearsLargeSizeClothes(x))", "all x.(WornsLargeShoes(x) -> WearsLargeSizedClothes(x))"]}
{"id": "folio_validation_527", "nl": "Yuri does not wear large-size clothes.", "fol": "-WearsLargeClothes(Yuri)", "prediction": ["all x.(Yuri(x) -> -WearLargeSizeClothes(x))", "Yuri -WearsLargeSizeClothes(y))", "(-WearsLargeSizeClothes(Yuri))", "(-WearLargeSizeClothes(Yuri))", "Yuri does not wearsLargeSizeClothes(y)", "Yuri -WearsLargeSizeClothes(Yuri))", "all x.(Yuri(x) -> -WearLargeSizeClothes(x))", "(-WearsLargeSizeClothes(Yuri))", "all x.(Yuri(x) -> -WearsLargeSizeClothes(x))", "Yuri & -WearsLargeSizeClothes(y))", "Yuri does not wearsLargeSizeClothes(Yuri)", "Yuri -WearsLargeSizeClothes(y))", "(-WornLargeSizeClothes(Yuri))", "all x.(Yuri(x) -> -WearLargeSizeClothes(x))", "all x.(Yuri(x) -> -WornLargeSizeClothes(x))", "Yuri -WearsLargeSizeClothes(Yuri))"]}
{"id": "folio_validation_528", "nl": "Yuri is an American.", "fol": "IsAmerican(Yuri)", "prediction": ["All x.(Yuri(x) -> American(x))", "(American(Yuri) & American(Yuri))", "Yuri is American(y)", "(American(Yuri) & American(Yuri))", "(American(Yuri) & BornIn(Yuri,USA))", "Yuri is American.", "All x.(Yuri(x) -> American(x))", "Yuri is American(y)", "Yuria is American.", "(American(Yuri) & American(Yuri))", "all x.(Yuri(x) -> American(x))", "Yuri (American(Y))", "Yuri is American.", "All x.(Yuri(x) -> American(x))", "Yuri is American.", "Yuri (American)"]}
{"id": "folio_validation_529", "nl": "Yuri is not an American basketball player.", "fol": "-(IsAmerican(Yuri) & IsBasketballPlayer(Yuri))", "prediction": ["(-AmericanBasketballPlayer(Yuri))", "Yuri n'est pas AmericanBasketballPlayer(y)", "Yuri is notAsianBasketballPlayer(y)", "Yuri is notAmericanBasketballPlayer(y)", "(-AmericanBasketballPlayer(Yuri))", "Yuri n'est pasAmericanBasketballPlayer(Yuri)", "Yuri is notAUSBalloonPlayer(y)", "(-AmericanBasketballPlayer(Yuri))", "Yuri is -AmericanBasketballPlayer(y)", "Yuri n\u2019est pas AmericanBasketballPlayer(y)", "Yuri & -AmericanBasketballPlayer(y)", "Yuri is notAmericanBasketballPlayer(Yuri)", "(-AmericanBasketballPlayer(Yuri))", "Yuri n'est pasAmericanBasketballPlayer(Yuri)", "(-AmericanBasketballPlayer(Yuri))", "Yuri -AmericanBasketballPlayer(y)"]}
{"id": "folio_validation_530", "nl": "Yuri is an American basketball player.", "fol": "(IsAmerican(Yuri) & IsBasketballPlayer(Yuri))", "prediction": ["(AmericanBasketballPlayer(Yuri) & AmericanBasketballPlayer(Yuri))", "All x.(Yuri(x) -> AmericanBasketballPlayer(x))", "Yuri is an AmericanBasketballPlayer(y)", "(AsianBasketballPlayer(Yuri) & AmericanBasketballPlayer(Yuri))", "Yuri is a basketball player from America.", "Yuri (AmericanBasketballPlayer)", "All x.(Yuri(x) -> AmericanBasketballPlayer(x))", "(AmericanBasketballPlayer(Yuri)", "Yuri is AmericanBasketballPlayer(y)", "Yuri is a basketball player(y) & American(y))", "all x.(Yuri(x) -> AmericanBasketballPlayer(x))", "(AmericanBasketballPlayer(Yuri)", "Yuri is AmericanBasketballPlayer(y)", "Yuri (AmericanBasketballPlayer)", "(AmericanBasketballPlayer(Yuri)", "Yuri (AmericanBasketballPlayer)"]}
{"id": "folio_validation_531", "nl": "If Yuri does not wear large shoes, then Yuri is an American basketball player.", "fol": "(-WearsLargeShoes(Yuri) -> (IsAmerican(Yuri) & IsBasketballPlayer(Yuri)))", "prediction": ["all x.((Yuri(x) & -WearLargeShoes(x)) -> AmericanBasketballPlayer(x))", "all x.((Yuri(x) & -WearsLargeShoes(x)) -> AmericanBasketballPlayer(x))", "(-WearLargeShoes(Yuri) -> AmericanBasketballPlayer(Yuri))", "(-WearsLargeShoes(Yuri) -> AmericanBasketballPlayer(Yuri))", "All x y.((Yuri(x) & -WearLargeShoes(x,y)) -> AmericanBasketballPlayer(x))", "all x.((Yuri(x) & -WearLargeShoes(x)) -> AmericanBasketballPlayer(x))", "(all x.((Yuri(x) & -WearsLargeShoes(x)) -> AmericanBasketballPlayer(x)))", "all x.((Yuri(x) & -WearsLargeShoes(x)) -> AmericanBasketballPlayer(x))", "(-WearLargeShoes(Yuri) -> AmericanBasketballPlayer(Yuri))", "All x y.((Yuri(x) & -WearLargeShoes(x,y)) -> AmericanBasketballPlayer(x))", "all x.((Yuri(x) & -WearLargeShoes(x)) -> AmericanBasketballPlayer(x))", "all x.((Yuri(x) & -WornLargeShoes(x)) -> AmericanBasketballPlayer(x))", "all x.((Yuri(x) & DoesNotWearLargeShoes(x) & AmericanBasketballPlayer(x)) -> Yuri(x))", "all x.((Yuri(x) & -WearsLargeShoes(x)) -> AmericanBasketballPlayer(x))", "all x.((Yuri(x) & -WornLargeShoes(x)) -> AmericanBasketballPlayer(x))", "all x.((Yur(x) & -WearLargeShoes(x)) -> AmericanBasketballPlayer(x))"]}
{"id": "folio_validation_532", "nl": "If Yuri is not an American basketball player, then Yuri is a basketball player.", "fol": "(-(IsAmerican(Yuri) & IsBasketballPlayer(Yuri)) -> IsBasketballPlayer(Yuri))", "prediction": ["all x.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "(-AmericanBasketballPlayer(Yuri) -> BasketballPlayer(Yuri))", "all x.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "all x y.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(y))", "(-AmericanBasketballPlayer(Yuri) -> BasketballPlayer(Yuri))", "all x.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "(-AmericanBasketballPlayer(Yuri) & -AmericanBasketballPlayer(Yuri))", "all x.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "(-AmericanBasketballPlayer(Yuri) -> BasketballPlayer(Yuri))", "All x.((Yuri,y,z) & -AmericanBasketballPlayer(y)) -> BasketballPlayer(z,y))", "all x.((Yuri(x) & -AsianBasketballPlayer(x)) -> BasketballPlayer(x))", "all x.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "all x.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "all x.((Yur(x) & -AsianBasketballPlayer(x)) -> BasketballPlayer(x))", "all x.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "all x.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))"]}
{"id": "folio_validation_533", "nl": "Events are either happy or sad.", "fol": "all x.(((EventOccurrence(x) -> IsHappy(x)) & -IsSad(x)) | (-(EventOccurrence(x) -> IsHappy(x)) & IsSad(x)))", "prediction": ["all x.(Event(x) -> (Happy(x) | Sad(x)))", "all x.(Event(x) -> (Happy(x) | Sad(x)))", "(all x.(Event(x) -> Happy(x)) | (-Event(x) -> Sad(x))))", "all x.(Event(x) -> (Happy(x) | Sad(x)))", "all x.(Event(x) -> (Happy(x) | Sad(x)))", "all x y.(Event(x) -> (Happy(y) | Sad(y)))", "all x.(Event(x) -> (Happy(x) | Sad(x)))", "all x.(Event(x) -> (Happy(x) | Sad(x)))", "all x y.(Event(x) -> (Happy(x) | Sad(x)))", "exists x.(Event(x) & (Happy(x) | Sad(x)))", "all x.(Event(x) -> (Happy(x) | Sad(x)))", "all x y.(Event(x) -> (Happy(y) | Sad(y)))", "exists x.(Event(x) & Happy(x) | Sad(x))", "exists x.(Event(x) & (Happy(x) | Sad(x)))", "exists x.(Event(x) & (Happy(x) | Sad(x)))", "exists x.(Event(x) & (Happily(x) | Sad(x)))"]}
{"id": "folio_validation_534", "nl": "At least one event is happy. ", "fol": "exists x.(EventOccurrence(x) & IsHappy(x))", "prediction": ["all x.(Event(x) -> Happy(x))", "all x.(Event(x) -> Happy(x))", "at least one event is happy.", "all x y.((Event(x) & Event(y)) -> Happy(x))", "exists x.(Event(x) & Happy(x))", "all x.((Event(x) & Happy(x)) -> Happy(x))", "-exists x.(Event(x) & Happy(x))", "all x y.((Event(x) & Event(y)) -> Happy(x,y))", "all x.(Event(x) -> Happy(x))", "exists x.(Event(x) & Happy(x))", "all x y.((Event(x) & Event(y)) -> Happy(x))", "all x.(Event(x) -> Happy(x))", "exists x.(Event(x) & Happy(x))", "exists x.(Event(x) & Happy(x))", "exists x.(Event(x) & Happy(x))", "exists x.(Event(x) & Happy(x))"]}
{"id": "folio_validation_535", "nl": "All events are sad.", "fol": "all x.(EventOccurrence(x) -> IsSad(x))", "prediction": ["all x.(Event(x) -> Sad(x))", "all x.(Event(x) -> Sad(x))", "(all x.(Event(x) -> Sad(x)))", "all x.(Event(x) -> Sad(x))", "all x y.((Event(x) & Event(y)) -> Sad(x))", "all x.((Event(x) & Sad(x)) -> Sad(x))", "(all x.(Event(x) -> Sad(x)))", "all x.(Event(x) -> Sad(x))", "All x y.(Event(x) -> Sad(x))", "all x.(Event(x) -> Sad(x))", "all x.(Event(x) -> Sad(x))", "all x.(Event(x) -> Sad(x))", "all x.(Event(x) -> Sad(x))", "all x.(Event(x) -> Sad(x))", "All x.(Event(x) -> Sad(x))", "exists x.(Event(x) & Sad(x))"]}
{"id": "folio_validation_536", "nl": "The winner of the 1992 du Maurier Classic was Steinhauer.", "fol": "WinnerOfDuMaurierClassic1992(Maurier,Steinhauer)", "prediction": ["Der Gewinner des DuMaurierClassics(92) & Steinhauer(Steinhauer)", "(Winner(x,92) & DuMaurierClassic(x)) -> Steinhauer(x))", "-(Winner(x,92) & DuMaurierClassic(x)))", "winner of 1992 du MaurierClassic was Steinhauer.", "(Winner(x) & DuMaurierClassic(x) & 1992) & Steinhauer(x))", "The winner of the 1992 du MaurierClassic was Steinhauer.", "(Winner(OfDuMaurierClassic,92) & Steinhauer(Steinhauer))", "Le gagnant de la du MaurierClassic 1992 a \u00e9t\u00e9 Steinhauer.", "-Winner(x,92) & DuMaurierClassic(x) & Steinhauer(x))", "(1992) & Steinhauer(Steinhauer))", "Der SiegerOfDuMaurierClassic(92) & Steinhauer(Steinhauer)", "(1992 Du MaurierClassic) -Winner(Steinhauer))", "Le gagnant du MaurierClassic 1992 a \u00e9t\u00e9 Steinhauer.", "(WinnerOfDuMaurierClassic(x,92) & Steinhauer(x))", "Der SiegerOfTheBirthOfDuMaurierClassic(92) & Steinhauer(Steinhauer)", "Der Gewinner des DuMaurierClassics(92) & Steinhauer(Steinhauer)"]}
{"id": "folio_validation_537", "nl": "Steinhauer participated in the 1992 du Maurier Classic.", "fol": "ParticipatedInDuMaurierClassic1992(Maurier,Steinhauer)", "prediction": ["all x.(Steinhauer(x) -> ParticipatedInDuMaurierClassic(x,92))", "(ParticipatedInDuMaurierClassic(Steinhauer,92))", "-ParticipatedInDuMaurierClassic(Steinhauer,92)", "(ParticipatedIn(Steinhauer,Boys) & Du MaurierClassic(Steinhauer,Boys))", "Steinhauer a participate in du MaurierClassic(92)", "(1992) - ParticipatedInDuMaurierClassic(Steinhauer,92))", "Steinhauer participated in the 1992 du MaurierClassic.", "all x.(Steinhauer(x) -> ParticipatedInDuMaurierClassic(x,92))", "(ParticipatedIn(Steinhauer,92) & Du MaurierClassic(Steinhauer,92))", "Steinhauer a participate in the 1992 du MaurierClassic.", "1992 du MaurierClassic.", "-ParticipatedInDuMaurierClassic(Steinhauer,92)", "(ParticipatedInDuMaurierClassic(Steinhauer,92))", "Steinhauer participated in the 1992 Du MaurierClassic.", "all x.(Steinhauer(x) -> ParticipatedInDuMaurierClassic(x,92))", "Steinhauer participated in the 1992 du MaurierClassic."]}
{"id": "folio_validation_538", "nl": "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.", "fol": "exists x.(LeaderboardOfDuMaurierClassic1992(Maurier,x) & HasSixWayTie(x) & IsFromBelgium(x))", "prediction": ["all x y.((Person(x) & SixWayTie(x) & Leaderboard(y)) -> (Belgium(x) & Person(x,y)))", "all x y.((SixWayTie(x) & Person(y) & SixWayTie(x)) -> (Belgium(y) & OnLeaderboard(x,y)))", "all x.(SixWayTie(x) -> (OnLeaderboard(x) & PersonInSixWayTie(x) & Belgium(x)))", "(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(SixWayTie(y) & Person(y) & FromBelgium(y)))", "all x.((SixWayTie(x) & Leaderboard(x)) -> (Belgium(x) & Person(x)))", "all x y z.((SixWayTie(x) & Person(y) & SixWayTie(z)) -> (OnLeaderboard(x,y) & FromBelgium(y,z)))", "(all x.(SixWayTie(x) -> Leaderboard(x)) & all y.(SixWayTie(y) -> Belgium(y)))", "all x.(SixWayTie(x) -> Leaderboard(x)) & all y.(Person(y) -> SixWayTie(y)))", "all x.((Person(x) & SixWayTie(x)) -> (Belgium(x) & OnLeaderboard(x)))", "(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(SixWayTie(y) & Person(y) & From(y,Belgium)))", "there was one sixwayTie(x) & one person in the sixwayTie(x) was fromBelgium(x))", "exists x.(SixWayTie(x) & Leaderboard(x) & exists y.(Person(y) & SixWayTie(y) & From(y,Belgium)))", "(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(SixWayTie(y) & InLeaderboard(y,x))))", "all x.(SixWayTie(x) -> (OnLeaderboard(x) & PersonInSixWayTie(x) & Belgium(x)))", "(all x.(SixWayTie(x) -> Leaderboard(x)) & all y.(SixWayTie(y) -> Belgium(y)))", "(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(SixWayTie(y) & Person(x,y))))"]}
{"id": "folio_validation_539", "nl": "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.", "fol": "(IsFromBelgium(Descampe) & LeaderboardOfDuMaurierClassic1992(Maurier,Descampe))", "prediction": ["Descampe is from Belgium and onLeaderboardOfDuMaurierClassic(Descampe,92))", "(Belgium(Descampe) & LeaderboardOfDuMaurierClassic(Descampe,92))", "-(Descampe(x) & Belgium(x) & LeaderboardOfDuMaurierClassic(x,1992)))", "Descampe is from Belgium and LeaderboardOfDuMaurierClassic(Descampe,92))", "Descampe (Belgium) & LeaderboardOfDuMaurierClassic(92))", "(Belgium(Descampe) & LeaderboardOfMaurierClassic(Descampe,92))", "(Belgian(Descampe) & LeaderboardOfDuMaurierClassic(Descampe,92))", "Lescampe(Dashcampe) is from Belgium and onLeaderboardOfDuMaurierClassic(DumrierClassic,92))", "DeCampe(Descampe,Belgium) & LeaderboardOfMaurierClassic(Descampe,92))", "-(Descampe(x) & Belgium(x) & LeaderboardOfMaurierClassic(x,1992)))", "Descampe is from Belgium and onLeaderboardOfDuMaurierClassic(Descampe,92))", "Descampe (Belgium) & LeaderboardOfDuMaurierClassic(92))", "(Breton(Descampe) & LeaderboardOfDuMaurierClassic(Descampe,92))", "Descampe is from Belgium and LeaderboardOfDuMaurierClassic(Descampe,92))", "(Belgium(Descampe) & Leaderboard(Descampe,92))", "Lescampe (Belgium) & LeaderboardOfDuMaurierClassic(Descampe,92))"]}
{"id": "folio_validation_540", "nl": "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.", "fol": "all x.(LeaderboardOfDuMaurierClassic1992(Maurier,x) -> ParticipatedInDuMaurierClassic1992(Maurier,x))", "prediction": ["all x y.((Person(x) & Leaderboard(x,y) & 1992DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "all x.((Person(x) & Leaderboard(x,92)) -> ParticipatedIn(x,92))", "all x.((Person(x) & LeaderboardOfDuMaurierClassic(x)) -> ParticipatedInDuMaurierClassic(x))", "all x y.((Person(x) & Leaderboard(y) & 1992DuMaurierClassic(x)) -> ParticipatedIn(x,y))", "all x.((PeopleOnLeaderboard(x) & 1992DuMaurierClassic(x)) -> ParticipatedIn(x,92))", "all x.((Person(x) & Leaderboard(x,2) & 1992DuMaurierClassic(x)) -> ParticipatedIn(x,2))", "all x y z.((Person(x) & Leaderboard(y) & DuMaurierClassic(z) & 1992DuMaurierClassic(z)) -> ParticipatedIn(x,y,z))", "(all x.(Leaderboard(x,y) & 1992DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "all x.((Person(x) & LeaderboardOfBostonDuMaurierClassic(x)) -> ParticipatedInBostonDuMaurierClassic(x))", "all x y.((Person(x) & Leaderboard(x,y) & 1992DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "all x y.((People(x) & Leaderboard(x,y) & 1992DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "(all x.(Leaderboard(x,y) & DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "all x.(Leaderboard(x,Boys) & ParticipatedIn(x,Boys))", "All participants in the 1992 du Maurier Classic participated.", "all x y.((Person(x) & Leaderboard(y) & 1992DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "(all x.(Leaderboard(x,92) & DuMaurierClassic(x)) -> ParticipatedIn(x,92))"]}
{"id": "folio_validation_541", "nl": "Steinhauer was not the winner of the 1992 du Maurier Classic.", "fol": "-WinnerOfDuMaurierClassic1992(Maurier,Steinhauer)", "prediction": ["(-Winner(Steinhauer,92) & Du MaurierClassic(Steinhauer,92))", "-(Steinhauer(Steinhauer) & Du MaurierClassic(Boston, 1992))", "(-WinnerOfDuMaurierClassic(Steinhauer))", "Der Steinhauer -Between(Steinhauer,92) -WinnerOfDuMaurierClassic(Steinhauer,92))", "Steinhauer -WinnerOfDuMaurierClassic(steinhauer,92))", "Steinhauer -(Winner(x,92) & DuMaurierClassic(x)))", "(1992) & -Winner(Steinhauer,DuMaurierClassic))", "-(Steinhauer(Steinhauer) & Du MaurierClassic(DuMaurier) & 1992))", "(-Winner(Steinhauer) & Du MaurierClassic(Steinhauer,92))", "Steinhauer n'as won du Maurier Classic 1992.", "(-WinnerOfDuMaurierClassic(Steinhauer,92))", "Steinhauer -(WinnerOfDuMaurierClassic(Steinhauer,92))", "-(Steinhauer(Steinhauer) & 1992DuMaurierClassic(Steinhauer))", "-winner(Steinhauer,92)", "-winner of 1992 du MaurierClassic.", "(-WinnerOfDuMaurierClassic(Steinhauer,92))"]}
{"id": "folio_validation_542", "nl": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.", "fol": "HasSixWayTie(Descampe)", "prediction": ["Lescampe & SixWayTie(x,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Board,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,Bound,", "(SixWayTie(Descampe) & Leaderboard(Descampe,92))", "Descampe is in the SixWayTie(Descampe,92) & LeaderboardOfDuMaurierClassic(Descampe,92))", "all x.(Descampe(x) -> SixWayTie(x))", "-SixWayTie(Descampe)", "Lescampe (Descampe) & SixWayTie(Descampe) & LeaderboardOfDuMaurierClassic(Descampe,92))", "Descampe is in the SixWayTie inLeaderboardOfDuMaurierClassic(Descampe,92))", "(SixWayTie(Descampe) & LeaderboardOfDuMaurierClassic(Descampe,92))", "LeaderboardOfDuMaurierClassic(Descampe,92) & SixWayTie(Descampe,92))", "-SixWayTie(Descampe,92) -> Leaderboard(Descampe,92))", "(SixWayTieInLeaderboard(Descampe,92) & Du MaurierClassic(Descampe,92))", "Descampe is in the SixWayTie(x) & LeaderboardOfDuMaurierClassic(x))", "Descampe is in the sixwayTie in the leaderboard of the 1992 du Maurier Classic.", "all x.(Descampe(x) -> SixWayTie(x))", "(SixWayTie(Descampe) & Leaderboard(Descampe,92))", "Descampe is inSixWayTieInLeaderboardOfDuMaurierClassic(Descampe,92)"]}
{"id": "folio_validation_543", "nl": "If an animal barks, then Jane does not like it.", "fol": "all x.(Barks(x) -> -Likes(Jane,x))", "prediction": ["all x.(Barks(x) -> JaneDoesNotLike(x))", "all x.((Animal(x) & Barks(x)) -> JaneDoesNotLike(x))", "all x y.((Animal(x) & Barks(x)) -> JaneDoesNotLike(y,x))", "(all x.(Barks(x) -> JaneDoesNotLike(x)))", "(Barks(animal) -> JaneDoesNotLike(Jane))", "all x.(Barks(x) -> JaneDoesNotLike(x))", "all x.((Animal(x) & Barks(x)) -> JaneDoesNotLike(x))", "all x y.((Animal(x) & Barks(x)) -> JaneDoesNotLike(y,x))", "(Barks(animal) -> JaneDoesNotLike(Jane))", "all x.(Barks(x) -> JaneDoesNotLike(x))", "all x.((Animal(x) & Barks(x)) -> JaneDoesNotLike(x))", "All x y.((Animal(x) & Barks(x)) -> -Likes(y,x))", "all x.(Barks(x) -> -Likes(x,Jane))", "all x.((Animal(x) & Barks(x)) -> JaneDoesNotLike(x,y))", "all x.(Barks(x) -> JaneDoesNotLike(x,Barks))", "all x.(Barks(x) -> JaneDislikes(x))"]}
{"id": "folio_validation_544", "nl": "All dogs are animals that bark.", "fol": "all x.(IsDog(x) -> Barks(x))", "prediction": ["all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Bark(x))", "(All x.(Dog(x) -> Barks(x)))", "all x.(Dog(x) -> Barking(x))", "all x y.(Dog(x) -> Barks(x,y))", "(all x.(Dog(x) -> Barking(x)))", "all x.(Dog(x) -> (Animal(x) & Barks(x)))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Bark(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> BarkingAnimal(x))", "all x.(Dog(x) -> Animal(x) & Bark(x))", "exists x.(Dog(x) & Animal(x) & Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> BarkingAnimal(x))"]}
{"id": "folio_validation_545", "nl": "If an animal jumps, then Jane likes it.", "fol": "all x.(Jumps(x) -> Likes(Jane,x))", "prediction": ["all x.(Jumps(x) -> Likes(x,Jane))", "all x.((Animal(x) & Jumps(x)) -> Likes(x,y))", "all x y.((Animal(x) & Jumps(x)) -> Likes(y,x))", "(Jumps(animal) -> Likes(Jane,animal))", "all x.(Jumps(x) -> Likes(x,y))", "all x.((Animal(x) & Jumps(x)) -> Likes(x,Jane))", "(JumpsAnimal(Jaws) | JaneLikesAnimal(Jaws))", "all x y.((Animal(x) & Jumps(x) & Jane(y)) -> Likes(y,x))", "all x.(Jumps(x) -> JaneLikes(x))", "all x y.((Animal(x) & Jumps(x)) -> Likes(y,x))", "(Jumps(animal) -> Likes(Jane,animal))", "all x.((Animal(x) & Jumps(x)) -> Likes(x,Jane))", "all x y.((Animal(x) & Jumps(x) & Jane(y)) -> Likes(y,x))", "all x.(Jumps(x) -> Likes(x,Jane))", "All x.(Jump(x) -> Likes(x,y))", "All x.(Jumps(x) -> Likes(x,y))"]}
{"id": "folio_validation_546", "nl": "If an animal has legs, then it jumps.", "fol": "all x.(HasLegs(x) -> Jumps(x))", "prediction": ["all x.(HasLegs(x) -> Jumps(x))", "all x.((Animal(x) & HasLegs(x)) -> Jumps(x))", "all x.(HasLegs(x) -> Jumps(x))", "all x y.((Animal(x) & HasLegs(x,y)) -> Jumps(x))", "(HasLegs(animal) -> Jumps(animal))", "all x.((Animal(x) & HasLegs(x)) -> Jumps(x))", "all x.(HasLegs(x) -> Jumps(x))", "exists x.(Animal(x) & HasLegs(x) & Jumps(x))", "all x y.((Animal(x) & HasLegs(x,y)) -> Jumps(x))", "all x.((Animal(x) & HasLegs(x)) -> Jumps(x))", "all x.(HasLegs(x) -> Jumps(x))", "all x.((Animal(x) & HasLegs(x)) -> Jumps(x))", "all x.(HasLegs(x) -> Jumps(x))", "exists x.(Legs(x) & Jumps(x))", "all x.(HasLegs(x) -> Jumps(x))", "all x.(HasLegs(x) -> Jumps(x))"]}
{"id": "folio_validation_547", "nl": "If an animal is terricolous, then it has legs. ", "fol": "all x.(IsTerricolous(x) -> HasLegs(x))", "prediction": ["all x.(Terricolous(x) -> HasLegs(x))", "all x.((Animal(x) & Terrirocolous(x)) -> HasLegs(x))", "all x.(Terricolous(x) -> HasLegs(x))", "all x.((Animal(x) & Terrocous(x)) -> HasLegs(x))", "(Terricolous(animal) -> HasLegs(animal))", "all x.(Terricolous(x) -> HasLegs(x))", "all x.((Animal(x) & Terrirocolous(x)) -> HasLegs(x))", "all x.((Animal(x) & Terrocous(x)) -> HasLegs(x))", "all x.(Terricolous(x) -> HasLegs(x))", "all x.((Animal(x) & Terrircolous(x)) -> HasLegs(x))", "all x.(Terricolous(x) -> HasLegs(x))", "all x.((Animal(x) & Terroconous(x)) -> HasLegs(x))", "all x.(Terricolous(x) -> HasLegs(x))", "exists x.(Terricolous(x) & Legs(x))", "all x.(Terricolous(x) -> HasLegs(x))", "all x.(Terricolous(x) -> HasLegs(x))"]}
{"id": "folio_validation_548", "nl": "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.", "fol": "((-Jumps(Kiki) & -HasLegs(Kiki)) -> (IsTerricolous(Kiki) | HasLegs(Kiki)))", "prediction": ["all x.((KiKi(x) & -Jumps(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "(all x.((KiKi) & -Jumps(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi) & (-Jumps(x) | HasLegs(x))) -> (Terricolous(x) | HasLegs(x)))", "(-Jumps(KiKi) | HasLegs(KiKi)))", "all x.((KiKi(x) & -Jumps(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "(all x.((KiKi) & -Jumps(x) | HasLegs(x))) -> (Terricolous(x) | HasLegs(x)))", "all x y.((KiKi(x) & -Jumps(x) & -HasLegs(x)) -> (Terricolous(y) | HasLegs(y)))", "(-Jumps(ki) & -HasLegs(ki)) -> (Terricolous(ki) | HasLegs(ki)))", "all x.((KiKi(x) & -Jumps(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi(x) & (-Jumps(x) | HasLegs(x))) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi) & (-Jumps(x) | HasLegs(x))) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi(x) & -Jumps(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "exists x.(KiKi(x) & ((Jumps(x) | HasLegs(x))) | HasLegs(x)))", "all x.((KiKi(x) & -Jumps(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi) & (-Jumps(x) | HasLegs(x))) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi(x) & (-Jumps(x) | HasLegs(x))) -> (Terricolous(x) | HasLegs(x)))"]}
{"id": "folio_validation_549", "nl": "KiKi is terricolous.", "fol": "IsTerricolous(Kiki)", "prediction": ["all x.(KiKi(x) -> Terrocous(x))", "(Terricolous(KiKi) -> Terricolous(KiKi))", "KiKi is Terricolous.", "KiKi isTerricolous(ki)", "all x.(KiKi(x) -> Terricolous(x))", "-Terricolous(ki)", "(Terricolous(ki) -> Terricolous(ki))", "(Terricolous(KiKi) & HasTerricolous(KiKi))", "KiKi(ki) -> Terricolous(ki))", "KiKi is Terrocous.", "all x.(KiKi(x) -> Territorious(x))", "KiKi is Terrirocolous.", "(Terricolous(KiKi) | Terricolous(KiKi))", "all x.(KiKi(x) -> Terricolous(x))", "KiKi isTerricolous(ki)", "KiKi is Terrocous."]}
{"id": "folio_validation_550", "nl": "KiKi barks and is a dog.", "fol": "(Barks(Kiki) & IsDog(Kiki))", "prediction": ["all x.(KiKi(x) -> (Barks(x) & Dog(x)))", "(Barks(KiKi) & Dog(KiKi))", "all x.(KiKi(x) -> (Barks(x) & Dog(x)))", "(Barks(kiKi) & Dog(kiKi))", "(BarksAndDog(KiKi))", "all x.(KiKi(x) -> (Barks(x) & Dog(x)))", "(Barks(kiKi) & Dog(kiKi))", "all x y.((KiKi(x) & Barks(x)) -> Dog(y))", "(BarksAndDog(KiKi))", "all x.(KiKi(x) -> (Barks(x) & Dog(x)))", "exists x.(KiKi(x) & Barks(x) & Dog(x))", "(BarksAndDog(KiKi))", "all x.(KiKi(x) -> (Barks(x) & Dog(x)))", "exists x.(KiKi(x) & Barks(x) & Dog(x))", "all x.(KiKi(x) -> (Barks(x) & Dog(x)))", "all x.(KiKi(x) -> (Barks(x) & Dog(x)))"]}
{"id": "folio_validation_551", "nl": "KiKi neither barks nor is a dog.", "fol": "(-Barks(Kiki) & -IsDog(Kiki))", "prediction": ["all x.(KiKi(x) -> (-Barks(x) | Dog(x)))", "(-Barks(KiKi) & -Dog(KiKi))", "-(Barks(ki) | Dog(ki)))", "((KiKi) & -Barks(KiKi)) | Dog(KiKi)))", "all x.(KiKi(x) -> (-Barks(x) & -Dog(x)))", "KeKiKi (neitherBarks(ki) & -Dog(ki))", "(-Barks(KiKi) & -Dog(KiKi))", "(-Barks(KiKi) | Dog(KiKi)))", "-(Barks(ki) | Dog(ki)))", "(-Barks(kiKi) & -Dog(kiKi))", "(Barks(kiki) & -Dog(kiki))", "all x.(KiKi(x) -> (-Barks(x) | Dog(x)))", "all x.(KiKi(x) -> (-Barks(x) & -Dog(x)))", "-(Barks(kiKi) | Dog(kiKi))", "-(Barks(ki) | Dog(ki))", "all x.(KiKi(x) -> (-Barks(x) | Dog(x)))"]}
{"id": "folio_validation_552", "nl": "Ailton Silva, born in 1995, is commonly known as Ailton.", "fol": "(BornInYear(Ailtonsilva,Y1995) & KnownAs(Ailtonsilva,Ailton))", "prediction": ["Ailton Silva (bornIn95) & CommonlyKnownAsAilton(x))", "(Birth(Ailton Silva, 1995) & CommonlyKnownAs(Ailton))", "AiltonSilva(a) & BornIn(a,95) & CommonlyKnownAsAilton(a))", "((BirthIn(AiltonSilva,1996)) & BornIn(Ailton,1996)) -> CommonlyKnownAs(Ailton))", "(BirthAiltonSilva(a) & BornIn(a) & BornIn(a) & BornIn(a) & BornIn(a) & BornIn(a) & BornIn(a) & BornIn(a) & BornIn(a) & BornIn(a)))", "all x.((AiltonSilva(x) & BornIn95(x)) -> Ailton(x))", "(BirthAiltonSilva(Ailton) & BornIn(Ailton,1996))", "AiltonSilva(bornIn95) & CommonlyKnownAsAilton(x))", "(Birth(AiltonSilva,95) & CommonlyKnownAs(Ailton))", "all x.((AiltonSilva(x) & BornIn(x,1996)) -> CommonlyKnownAsAilton(x))", "Ailton Silva (bornIn95) & CommonlyKnownAsAilton(x))", "AiltonSilva(a) -> (BirthIn95) & CommonlyKnownAsAilton(a)))", "all x.((Birth(x,y) & BornIn(y,1996)) -> AiltonSilva(x))", "All x.((AiltonSilver(x) & BornIn95(x)) -> Ailton(x))", "Ailton Silva (bornIn95) & CommonlyKnownAsAilton(a))", "All x.((AiltonSilva(x) & BornIn95(x)) -> CommonlyKnownAsAilton(x))"]}
{"id": "folio_validation_553", "nl": "Ailton is a football player who was loaned out to Braga.", "fol": "(IsFootballPlayer(Ailton) & LoanedToClub(Ailton,Braga))", "prediction": ["all x.((FootballPlayer(x) & LoanedOutToBraga(x)) -> Ailton(x))", "Ailton is a football player who was loaned out to Braga.", "(FootballPlayer(Ailton) & LoanedOutToBraga(Ailton))", "All x.(Ailton(x) -> (FootballPlayer(x) & LoanedOutToBraga(x)))", "all x y.((FootballPlayer(x) & Braga(y)) -> LoanedOut(x,y))", "all x y.((FootballPlayer(x) & FootballPlayer(y) & LoanedOutToBraga(x,y)) -> Ailton(x))", "(LoanedOutToBraga(Ailton,FootballPlayer))", "Ailton (FootballPlayer(Ailton) & LoanedOutToBraga(Ailton))", "Ailton is football player who was loanedout to Braga.", "Ailton is a football player who was loanedout to Braga.", "(FootballPlayer(Ailton) & LoanedOutToBraga(Ailton))", "Ailton (FootballPlayer(a) & LoanedOutToBraga(b))", "All x.(Ailton(x) -> (FootballPlayer(x) & LoanedOutToBraga(x)))", "Ailton is a football player who was loaned out to Braga.", "All x.((FootballPlayer(x) & LoanedOutToBraga(x)) -> Ailton(x))", "Ailton is a football player who was loanedouttoBraga."]}
{"id": "folio_validation_554", "nl": "Ailton Silva is a Brazillian footballer who plays for Nautico.", "fol": "(IsBrazilian(Ailtonsilva) & IsFootballPlayer(Ailtonsilva) & PlaysForClub(Ailtonsilva,Nautico))", "prediction": ["AiltonSilva(a) & BrazillianFootballer(b) & PlaysForNautico(a))", "All x.((AiltonSilva(x) & BrazillianFootballer(x) & PlaysForNautico(x)) -> PlaysForNautico(x))", "all x.((BrazilianFootballer(x) & PlaysForNautico(x)) -> AiltonSilva(x))", "AiltonSilva (BrasilianFootballer(a) & PlaysForNautico(b))", "Ailton Silva (BrasilianFootballer(a) & PlaysForNautico(b))", "(BrasilianFootballer(AiltonSilva) & PlaysForNautico(AiltonSilva))", "All x.(AiltonSilva(x) -> (BrasilianFootballer(x) & PlaysForNautico(x)))", "AiltonSilva(a) -> (BrasilianFootballer(a) & PlaysForNautico(a)))", "all x y.((AiltonSilva(x) & BrazillianFootballer(y) & PlaysForNautico(x,y)) -> PlaysForNautico(x,y))", "AiltonSilva (BrasilianFootballer(Ailton) & PlaysForNautico(Ailton))", "AiltonSilva(Ailton) is a BrazilianFootballer(Ailton) & PlaysForNautico(Ailton))", "Ailton Silva (BrazilianFootballer(a) & PlaysForNautico(a))", "All x.((BrazillianFootballer(x) & PlaysForNautico(x)) -> AiltonSilva(x))", "all x.((BrasilianFootballer(x) & PlaysForNautico(x)) -> AiltonSilva(x))", "(BrazilianFootballer(AiltonSilva) & PlaysForNautico(AiltonSilva))", "Ailton Silva (BrazillianFootballer(a) & PlaysForNautico(b))"]}
{"id": "folio_validation_555", "nl": "Nautico is a football club along with Braga.", "fol": "(IsFootballClub(Nautico) & IsFootballClub(Braga))", "prediction": ["all x.(Nautico(x) -> (FootballClub(x) & Braga(x)))", "(FootballClub(Nautico) & Braga(Nautico))", "Nautico (FootballClub) & Braga(FootballClub))", "all x y.((Nautico(x) & Braga(y)) -> FootballClub(x))", "Nautico (FootballClub(Nautico) & Braga(Nautico))", "all x.(Nautico(x) -> (FootballClub(x) & Braga(x)))", "all x y.((Nautico(x) & Braga(y)) -> FootballClub(x,y))", "All x.(Nautico(x) -> (FootballClub(x) & Braga(x)))", "Nautico is a football club along with Braga.", "(FootballClub(Nautico) & Braga(Nautico))", "Nautico (footballClub(n) & Braga(n))", "All x.(Nautico(x) -> FootballClub(x))", "Nautico (FootballClub(Nautico) & Braga(Nautico))", "(FootballClub(Nautico,Braga) & FootballClub(Nautico,Braga))", "(FootballClub(Nautico) & Braga(Nautico))", "all x y.((Nautico(x) & Braga(y)) -> FootballClub(x,y))"]}
{"id": "folio_validation_556", "nl": "Fluminense is a football club.", "fol": "IsFootballClub(Fluminense)", "prediction": ["all x.(Fluminense(x) -> FootballClub(x))", "(Fluminense(f) & FootballClub(f))", "(Fluminense(Fluentinense) & FootballClub(Fluentinense))", "-Fluminense(f) & FootballClub(f)", "Fluminense FootballClub(x)", "Fluminense is a football club.", "all x.(Fluminense(x) -> FootballClub(x))", "(Fluminense(flu) & FootballClub(flu))", "(Fluminense(Fluminense) & FootballClub(Fluminense))", "all x.(Fluminense(x) -> FootballClub(x))", "Fluminense FootballClub.", "Fluminense is football club.", "(Fluminense(f) & FootballClub(f))", "all x.(Fluminense(x) -> FootballClub(x))", "Fluminense FootballClub.", "all x.(Fluminense(x) -> FootballClub(x))"]}
{"id": "folio_validation_557", "nl": "No one playing for Nautico is Brazilian.", "fol": "all x.(PlaysForClub(x,Nautico) -> -IsBrazilian(x))", "prediction": ["-exists x.(PlayingForNautico(x) & Brazilian(x))", "all x.(PlayingForNautico(x) -> Brazilian(x))", "-exists x.(PlayingForNautico(x) & Brazilian(x))", "(exists x.(PlayingForNautico(x) & Brazilian(x))", "all x.(PlayingForNautico(x) -> Brazilian(x))", "-exists x.(Player(x) & Nautico(x))", "(NoonePlayingForNauticoIsBrasilian(n))", "-exists x.(PlayingForNautico(x) & Brazilian(x))", "all x.(PlayingForNautico(x) -> Brazilian(x))", "-exists x.(PlayingForNautico(x) & Brazilian(x))", "-exists x.(Player(x) & Nautico(x))", "all x.(PlaysForNautico(x) -> Brazilian(x))", "-exists x.(PlayingForNautico(x) & Brazilian(x))", "all x.(PlayingForNautico(x) -> Brazilian(x))", "-exists x.(Player(x,Nautico) & Brazilian(x))", "-exists x.(PlayingForNautico(x) & Brazilian(x))"]}
{"id": "folio_validation_558", "nl": "Ailton Silva foes not play for a football club.", "fol": "all x.(IsFootballClub(x) -> -PlaysForClub(Ailtonsilva,x))", "prediction": ["all x.(AiltonSilva(x) -> -PlaysForFootballClub(x))", "all x.((Foe(x) & AiltonSilva(x)) -> -PlaysForFootballClub(x))", "AiltonSilvaFoes(a) & -PlayForFootballClub(b))", "(FoesOfAiltonSilva(a) & -PlayForFootballClub(a))", "all x y.((Foe(x) & AiltonSilva(y)) -> -PlaysForFootballClub(x,y))", "all x.((AiltonSilva(x) & FootballClub(x)) -> -PlaysFor(x,FootballClub))", "all x y.((AiltonSilva(x) & FootballClub(y)) -> -PlaysFor(x,y))", "all x.(AiltonSilva(x) -> -PlaysForFootballClub(x))", "(all x.(AiltonSilva(x) -> -PlaysForFootballClub(x)))", "(FoesOfAiltonSilva(Ailton) & -PlayForFootballClub(AiltonSilva))", "all x.((Foe(x) & AiltonSilva(x)) -> -PlayForFootballClub(x))", "all x.(AiltonSilva(x) -> -PlayForFootballClub(x))", "all x.(AiltonSilvaFoe(x) -> -PlaysForFootballClub(x))", "all x y.((Foe(x) & AiltonSilva(x) & FootballClub(y)) -> -PlaysFor(x,y))", "All x.(AiltonSilverFoe(x) -> -PlaysForFootballClub(x))", "All x.(AiltonSilvaFoe(x) -> -PlayForFootballClub(x))"]}
{"id": "folio_validation_559", "nl": "Ailton was not loaned out to a football club.", "fol": "all x.(IsFootballClub(x) -> -LoanedToClub(Ailton,x))", "prediction": ["all x.(Ailton(x) -> -LoanedOutToFootballClub(x))", "(-LoanedOutToFootballClub(Ailton))", "(LoanedOutToFootballClub(Ailton) -> -LoanedOutToFootballClub(Ailton))", "all x.((Ailton(x) & -LoanedOutToFootballClub(x)) -> -LoanedOutToFootballClub(x))", "Ailton n'admittedly(a) (FootballClub(a) & -LoanedOut(a)))", "Ailton was not loaned out to football club.", "all x.(Ailton(x) -> -LoanedOutToFootballClub(x))", "(-LoanedOutToFootballClub(Ailton))", "Ailton was not loaned out to a football club.", "all x.(Ailton(x) -> -LoanedToFootballClub(x))", "Ailton neloanedoutto footballclub.", "all x.((Ailton(x) & -LoanedOutToFootballClub(x)) -> -LoanedOutToFootballClub(x))", "Ailton n'a been loaned out to football club.", "-LoanedOutToFootballClub(Ailton)", "Ailton was not loaned out to football clubs.", "All x.(Ailton(x) -> -LoanedOutToFootballClub(x))"]}
{"id": "folio_validation_560", "nl": "Ailton Silva played for Fluminense.", "fol": "PlaysForClub(Ailtonsilva,Fluminense)", "prediction": ["AiltonSilva played for Fluminense.", "All x.(AiltonSilva(x) -> PlayedForFluminense(x))", "all x y.((AiltonSilva(x) & Fluminense(y)) -> PlayedFor(x,y))", "All x.((AiltonSilva(x) & Fluminense(x)) -> PlayedFor(x,y))", "(PlayedForFluminense(AiltonSilva)", "(PlayedFor(AiltonSilva,Fluminense) -> PlayedFor(AiltonSilva,Fluminense))", "Ailton Silva played for Fluminense.", "AiltonSilva played for Fluminense.", "All x.(AiltonSilva(x) -> PlayedForFluminense(x))", "AiltonSilva(a) played for Fluminense(a))", "Ailton Silva played for Fluminense.", "AiltonSilva played for Fluminense.", "All x.(AiltonSilva(x) -> PlayedForFluminense(x))", "Ailton Silva played for Fluminense.", "AiltonSilva played for Fluminense.", "Ailton Silva played for Fluminense."]}
{"id": "folio_validation_561", "nl": "Ailton Silva was loaned out to a football club.", "fol": "exists x.(IsFootballClub(x) & LoanedToClub(Ailtonsilva,x))", "prediction": ["all x y.((AiltonSilva(x) & FootballClub(y)) -> LoanedOutTo(x,y))", "AiltonSilva was loanedOutToFootballClub(AiltonSilva)", "all x.((AiltonSilva(x) & FootballClub(x)) -> LoanedOut(x))", "all x y z.((AiltonSilva(x) & FootballClub(y) & FootballClub(z)) -> LoanedOut(x,y,z))", "Ailton Silva was loaned out to a football club.", "(LoanedOutToFootballClub(AiltonSilva))", "all x y.((AiltonSilva(x) & FootballClub(y)) -> LoanedOut(x,y))", "all x.((AiltonSilva(x) & FootballClub(y)) -> LoanedOutTo(x,y))", "AiltonSilva was loanedOutToFootballClub(AiltonSilva)", "all x.(Loan(x,AiltonSilva) -> FootballClub(x))", "(LoanedOutToFootballClub(AiltonSilva))", "All x y z.((AiltonSilva(x) & FootballClub(y) & FootballClub(z)) -> LoanedOutTo(x,y,z))", "Ailton Silva was loaned out to football club.", "AiltonSilva was loanedOutToFootballClub(a) & -Loan(b) & FootballClub(c) & -Loan(b))", "all x y.((AiltonSilva(x) & FootballClub(y)) -> LoanedOutTo(x,y))", "All x y.((AiltonSilva(x) & FootballClub(y)) -> LoanedOutTo(x,y))"]}
