{"id": "enwn_validation_0", "nl": "You should not hurt someone without a good reason.", "fol": "", "prediction": ["all x.((HasGoodMoment(x) & -HasGood(x)) -> -Hurt(x,Person))", "all x y z.((Person(x) & Person(y) & Reason(z)) -> -Hurt(x,y,z))", "all x y.((HasGoodRight(x) & Person(y)) -> -Hurt(x,y))", "all x.((HuntShe(x) & KillShell(x)) -> -HuntShell(x))", "all x.((Tohre(x) & Person(x) & -GoodRight(x)) -> -Binding(x))", "all x.((HasGoodPoor(x) & -Hints(x)) -> -Hints(x,(x)))", "all x y.((Worst(x,y) & Person(y)) -> -InjureMoreWithoutGoodRight(x,y))", "all x y.((HasGoodRight(x) & PainsIn(y,x)) -> -HasGoodRight(y,x))", "all x y.((Person(x) & Person(y) & HasGoodArea(x,y)) -> -HasGoodArea(x,y))", "all x.((InjurePerson(x) & HasGoodRight(x)) -> -HasArea(x))", "all x y.((Uses(x,y) & Person(y)) -> -HasGoodRight(x))", "all x.((HasGoodRight(x) -> -Hiss(x,ploused))", "all x y.((Person(x) & Person(y) & & HasGoodRun(x,y)) -> NotHint(x,y))", "all x y.((Person(x) & Drown(y)) -> -HasGoodRight(x,y))", "all x y.((HasGood(x,y) & Person(z) & Drove(x,z)) -> -HasGoodPosition(x,z))", "you should not hurt someone without good reason."]}
{"id": "enwn_validation_1", "nl": "If you do something for petty reasons, you aren't doing it for a good reason.", "fol": "", "prediction": ["all x.((DoesPetty(x) -> -GoodRight(x))", "all x.((DoesPettyOrganisms(x) & -GoodRaison(x)) -> -DoingPettyOrganisms(x))", "all x.(PettyFootnotes(x) -> -GoodFunction(x))", "all x.(DoEssay(x) -> ((PettyMajors(x) & -GoodRight(x))))", "all x.((Does(x,Petty) & -GoodRight(x)) -> -Doing(x,Petty))", "all x.((DoesPettyForesight(x) & -GoodForethought(x)) -> -DoesGreatForEnergy(x))", "all x.((PettyForethoughts(x) & DoesPettyForethoughts(x)) -> -GoodForethought(x))", "all x.((DoesPetty(x) & -GoodRight(x)) -> -DoesPetty(x))", "all x.((DoPettyFavors(x) & -GoodRights(x)) -> DoesProne(x))", "all x.((DoesPetty(x) & -Good(x)) -> -DoesAllOf(x))", "all x.((PettyFootnote(x) & DoingFor(x)) -> -GoodFunction(x))", "all x.((DoesPettyThought(x) & -Good(x)) -> -DoesPettyThought(x))", "all x.((DoPettyForeclosure(x) & -GoodForeclosure(x)) -> -DopallyForBreath(x))", "all x.((DoesPettyMeasures(x) & -GoodRight(x)) -> -DoesPettyMeasures(x))", "all x.((DoesForPettyMeasures(x) & -DoesForGoodMoment(x)) -> -DoesForGoodMoment(x))", "all x.((DoesPettyMatters(x) & -GoodMatter(x)) -> -DoesPettyMatters(x))"]}
{"id": "enwn_validation_2", "nl": "Road rage is petty.", "fol": "", "prediction": ["all x.(RoadRage(x) -> Petty(x))", "all x.(RoadRage(x) -> Petty(x))", "all x.(RoadRain(x) -> Petty(x))", "PettyRoadRage(Road)", "all x.(RoadRage(x) -> Petty(x))", "all x.(RoadRage(x) -> Petty(x))", "all x.(RoadRage(x) -> Petty(x))", "all x.(RoadRage(x) -> Petty(x))", "all x.(RoadRain(x) -> Petty(x))", "all x.(RoadRain(x) -> Petty(x))", "all x.(RoadRage(x) -> Petty(x))", "all x.(RoadRain(x) -> Petty(x))", "all x.(RoadRage(x) -> Petty(x))", "all x.(RoadRain(x) -> Petty(x))", "all x.(RoadRage(x) -> Petty(x))", "all x.(RoadRain(x) -> Petty(x))"]}
{"id": "enwn_validation_3", "nl": "Jake cut Chris off in traffic, and that enraged Chris.", "fol": "", "prediction": ["all x y.((CrossedOffCrucial(x,y) & Chris(y)) -> Enraged(x,y))", "all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y) & Enrages(y,x)))", "all x y z.((Jake(x) & Chris(y) & Traffic(z) & CutsOff(x,y,z)) -> Enraged(x,y,z))", "all x.((Jake(x) & Chris(x)) -> CutsOff(x,Chris))", "all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y,z) & Enraged(y,x)))", "all x y.(((Chris(x) & Jake(y) & CutInTraffic(y,x)) -> Enraged(x,y))", "all x y.((Jake(x) & Chris(y)) -> (Cut(x,y) & EnragedChris(y)))", "all x y.((Jake(x) & Chris(y)) -> (CutsOff(x,y) & Enraged(y,z)))", "all x y.((Jake(x) & Chris(y)) -> (CutsOff(x,y) & Enraged(y)))", "all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> CutsOff(x,y,z))", "all x y z.((Sake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y) & Enrages(y,x)))", "(EnragedChris!)", "all x y.((Jake(x) & Chris(y)) -> CutsOffInTraffic(x,y))", "all x.((Jake(x) & Chris(y)) -> CutsOffInTraffic(x,y))", "all x y z.((Task(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y) & EnragedChris(x)))", "all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y,z) & Enraged(y,y)))"]}
{"id": "enwn_validation_4", "nl": "Chris was so angry that he followed Jake to a stop light, got out of his car and punched Jake.", "fol": "", "prediction": ["all x y.((Chris(x) & Jake(y)) -> (Following(x,y) & StopLight(x,y) & gotOutOfCar(x,y) & Punched(x,y)))", "all x y z.((Cris(x) & Jake(y) & StopLight(z) & SuggesTo(x,z)) -> (Punched(x,y,z) | GotOutOf(x,z)))", "all x y.((Chris(x) & Jake(y) & FollowedToStopLight(x,y)) -> Punched(x))", "(SoAngry(Chris) & Followed(Chris,Justin,StopLeg,Run) & GotOutOfCar(Chris,PunchedSake))", "all x.((Chris(x) & Afraid(x)) -> (FoundJakeToStopLight(x) & GotOutOfCar(x) & PunchedJake(x)))", "all x y z.((Chris and Jake(z) & SustainsToStopLight(x,y,z)) -> (FollowsToStopLight(x,y) & GetsOutOfCar(x,y) & PunchesSake(x)))", "all x.((Chris(x) & FollowedSkipToStopLight(x) & BackIntoCar(x)) -> PunchedSkip(x))", "all x.((Chris(x) & FollowedArrival(x,Jake,StartLight) & GotOutOfCar(x,Jake)) -> Punched(x))", "all x y.((Chris(x) & Jake(y)) -> (FocusedToStopLight(x,y) & GotOutOfCar(x,y) & Punched(x,y)))", "all x y z.((Chris(x) & Jake(y) & Car(z) & Followed(x,y,z)) -> (Punched(x) & Pounced(x)))", "all x.((Chris(x) & ChasedToStopLight(x) & GotOutOfCar(x)) -> PunchedSake(x))", "all x y z.((Chris(x) & Jake(y) & Car(z) & FollowsToStopLight(x,y)) -> (Jungled(x,y) & GotOut(x,z) & Punched(x,y)))", "(all x.((Chris(x) & FollowedToStopLight(x,y)) -> Forgives(x,y)) & got OutOfCar(x) & Punched(x,y))", "all x y z.((Chris(x) & Jake(y) & SuitToStopLight(x,y) & OutOfCar(z)) -> Punched(x,y))", "all x y.((Chris(x) & Jake(y)) -> (CausedToStopLight(x,y) & GotAwayOfCar(z,x) & Punched(x)))", "all x.((Chris(x) & FollowedZakeToStopLight(x) & OutOfCar(x) & PunchedSake(x)) -> Angerful(x))"]}
{"id": "enwn_validation_5", "nl": "Road rage is anger over driving.", "fol": "", "prediction": ["all x.(RoadRage(x) -> AngerOverDriven(x))", "all x.(RoadRain(x) -> DrivenAngree(x))", "all x.(RoadRace(x) -> AngerOverDriven(x))", "all x y.((RoadRage(x) & Driving(y)) -> AngerOverDrive(x,y))", "all x.(RoadRage(x) -> AngerOnDriving(x))", "all x.(RoadRage(x) -> AngerOverDriving(x))", "all x.(RoadRage(x) -> AngerOverDriving(x))", "all x.(RoadRage(x) -> AngerOverDriving(x))", "all x.(RoadRain(x) -> AngerOverDriving(x))", "all x.(RoadRange(x) -> AngerOverDriving(x))", "all x.(River(x) -> AngerOverDriving(x))", "all x.(RoadRain(x) -> AngerOverDriven(x))", "all x.(RoadRage(x) -> AngerOverDriving(x))", "all x.(RoadRage(x) -> AngerOverDriven(x))", "all x.(RoadRain(x) -> AngerOverDriving(x))", "all x.(RoadRage(x) -> AngerOverDriven(x))"]}
{"id": "enwn_validation_6", "nl": "Chris punched Jake because he was angry at Jake cutting him off in traffic.", "fol": "", "prediction": ["(AngryAtTime(ChrisPunched(Chris) & CutsOffInTraffic(Chris,Jake))", "all x y.((ChrisPunched(x) & Jake(y)) -> IngrimedAtCuttingOff(x,y))", "all x y.((ChrisPunched(x,y) & Jake(y)) -> (AngryAtCapping(y,x) & CutsOff(x,y)))", "all x y.((ChrisPunched(x) & Jake(y)) -> (AngryAtCuttingOff(x,z) | FrustratedAt(x,z))))", "all x y.((Chris(x) & Jake(y) & Cut(x,y)) -> Punched(x,y))", "(AngryAtTime(ChrisCuttingOffJake) & PulledBy(Chris,Jake))", "all x y.((ChrisPunched(x) & Jake(y)) -> WasAngryScrewingOff(x,y))", "all x y z.((ChrisPunched(x) & Jake(y) & Traffic(z)) -> AngryAtCuttingOff(x,y,z))", "all x y.((Chris(x) & Jake(y)) -> Punched(x,y))", "all x y.((ChrisPunched(x) & Jake(y) & Ragnant(ry,x)) -> CutsOffInTraffic(x,y))", "all x y.((ChrisPunched(x) & Jake(y) & CuriousAt(x,y)) -> CutsOff(x,y))", "(Inquiry(Chris) & Jake(Christopher) & CuttingOff(Chris,Jake))", "(AngryAtCuttingHeadOff(ChrisJake,Traffic)) -> PunchedSailor(Chris,Jake))", "all x y.((ChrisPunched(x) & Jake(y)) -> FuriousAt(x,y))", "all x y z.((ChrisPucks(x) & Jake(y) & Traffic(z) & AngerAt(x,y) & CutsOff(y,z)) -> Punched(x,y,z))", "all x y.((ChrisPuffered(x) & Jake(y) & AngerfulAt(x,y)) -> CutsOff(x,y))"]}
{"id": "enwn_validation_7", "nl": "Chris punched Jake because of his road rage.", "fol": "", "prediction": ["all x y.((Chris(x) & Jake(y) & RoadRain(y)) -> Punched(x,y))", "(PunchedCake(Chris) & GracingRaw(Chris))", "all x y.((Chris(x) & Jake(y)) -> Punched(x,y))", "all x y z.((Chris(x) & Jake(y) & RoadRain(z)) -> Punched(x,y,z))", "Chris punched Jake because of RoadRainrage.", "(Packed(Chris) & Jake(Chris) & RoadRage(Chris))", "is sooooo sad. So we all hate roadrage!", "Chris punched Jake for RoadRainRainback(Chris)", "all x.(PunchedSake(x) -> RoadRain(x))", "Chris punched Jake because of roadrage.", "(HeavenRain(Chris) -> Punched(Christy))", "all x y.((Chris(x) & Jake(y) & RoadRain(x)) -> Punched(x,y))", "-PunchesOfRain(Chris)", "(PunchedSake(Chris) & BecauseOfRain(Chris))", "(HasRebekahIsRare(Costy(Chris) & PackedJake(Chris) & BecauseOfRain(Chris))", "Chris punched Jake about roadrage."]}
{"id": "enwn_validation_8", "nl": "Chris punched Jake for a petty reason.", "fol": "", "prediction": ["-JakePunched(Chris,petty) & -PettyResult(Chris,Jake))", "all x.((Chris(x) & Jake(y)) -> PunchedForPettyRefut(x,y))", "all x y.((Chris(x) & Jake(y)) -> PinnedForPetty(x,y))", "all x y.(((Chris(x) & Jake(y)) -> Punched(x,y))", "all x.((Chris(x) & Jake(y)) -> PunchedForPettyRaison(x,y))", "all x.((Chris(x) & Jake(y)) -> PunchedForPetty(x,y))", "(PettyCause(ChrisPucking(Chris) | PettyCause(Chris))", "(PettyMean(Chris) & PunchedBy(Chris))", "all x y.((Chris(x) & Jake(y)) -> Punched(x,y))", "all x y.((Chris(x) & Jake(y)) -> PunchedForPettyGrant(x,y))", "all x y.((ChrisPunched(x) & Jake(y) & PettyRun(y)) -> Punched(x,y))", "(Petty(Chris) & Punched(Chris,Sake))", "all x y.((Chris(x) & Jake(y)) -> PunchedForPettyRect(x,y))", "(PoundPassedOnPetty(Christopher,Jake))", "(Petty(Chris,Jake) & Punched(Chris,Jake))", "all x.((Chris(x) & Jake(y)) -> PunchedForPettyRaison(x,y))"]}
{"id": "enwn_validation_9", "nl": "Chris punched Jake without a good reason.", "fol": "", "prediction": ["(PunchedWithoutGoodRight(Chris) & Jake(Chris))", "all x y.((Chris(x) & Jake(y)) -> Punched(x,y))", "all x y.((Chris(x) & Jake(y)) -> PakeWithoutGoodRight(x,y))", "Chris punched Jake, without good reason.", "all x.((Chris(x) & Jake(y)) -> PunchedWithoutGoodRight(x,y))", "Chris punched Jake without a good reason(Chris)", "exists x.(PunchedBy(x,Jack) & -GoodRaison(x))", "all x.((ChrisPunched(x,Jake) & -GoodRight(x)) -> Puffs(x,Jake))", "all x y.((Chris(x) & Jake(y) & PunchedWithoutPoorBecause(x,y)) -> PunchedWithoutGoodRight(x,y))", "(-GoodRight(Chris) & Plucked(Chris,jake))", "Chris punched Jake & NoGoodGuy(Chris)", "(-goodRight(Chris) & PunchedKirkWithoutGoodRight(Chris))", "all x.(Pundit(x,Jake) -> NotGoodRight(x))", "all x.((ChrisPunched(x) & Jake(y)) -> -GoodRight(x,y))", "all x y.((Chris(x) & Jake(y)) -> PunchedWithoutBreath(x,y))", "-(CrossPollen(Chris) & Jake(Chris))"]}
{"id": "enwn_validation_10", "nl": "Chris should not have punched Jake.", "fol": "", "prediction": ["-PuchedJake(Chris)", "Chris should have not punched(Chosel)", "Chris should not have punchedJake.", "-PunchedJackEachTime(Chris)", "Chris should not have punchedJake.", "HankPickledJake(Chris)", "(WasPockedChris(Chris)?", "all x y.((Chris(x) & Jake(y)) -> -Punched(x,y))", "-Punched(Chris)", "Chris should not have punched Jake.", "Chris should have not punchedJaxon(Chris)", "all x.((Chris(x) & Jake(y)) -> -Potted(x,y))", "Chris should not have punched Jake.", "Chris should not have punched Jake.", "(-PotteredJake(Chris))", "Chris should never have punchedAshley(sheep)"]}
{"id": "enwn_validation_11", "nl": "Stealing is taking something without the owner's permission.", "fol": "", "prediction": ["all x.(Stealing(x) -> TakesUnapproved(x))", "all x y.((Stealing(x) & Owner(y)) -> TakesWithoutPermission(x,y))", "all x y.(Stealing(x) -> TakesWithoutOwnerPermission(y))", "all x.(Stoling(x) -> TakesWithoutownersPermission(x))", "all x y.((Stolen(x) & Owner(y)) -> TakesWithoutPermission(x,y))", "all x.(Stealing(x) -> TakesWithoutOwnersPermission(x))", "all x.(Stealing(x) -> TakesWithoutOwnerPermission(x))", "all x y.((Stealing(x) & Owner(y)) -> TakesWithoutPermission(x,y))", "all x y.((Steal(x) & Owner(y)) -> TakesWithoutPermission(x,y))", "all x y.((Stealing(x) & Owner(y)) -> TakesUnderPermission(x,y))", "all x.(Stealing(x) -> TakesWithoutownerPermission(x))", "all x.(Stealing(x) -> TakesWithoutOwnerPermission(x))", "all x y.((Stealing(x) & Owner(y)) -> Takes(x,y))", "all x y z.((Stealing(x) & Possession(y) & Owner(z)) -> TakesWithoutPermission(x,y,z))", "all x y z.(Stealing(x) -> TakesWithoutOwner permission(x,z))", "all x y.((Stealing(x) & Owner(y)) -> TakesWithoutPermission(x,y))"]}
{"id": "enwn_validation_12", "nl": "Caleb left Target with a pack of trading cards in his pocket.", "fol": "", "prediction": ["all x.((Caleb(x) & TradingCardPack(x)) -> LeftTradingPouch(x))", "all x y.((Caleb(x) & Target(y)) -> LeftWithTotalTradingCards(x,y))", "all x.((Caleb(x) & TradesCardsPack(x)) -> LeftsTargetWith(x))", "all x y.((Caleb(x) & Target(y)) -> LeftWithTradingCardsInPouch(x,y))", "that is why Caleb left Target with a pack of tradingcards.", "all x y.((Caleb(x) & Target(y)) -> LeftWithCompaqueTradingCards(x,y))", "all x.(TradingCardPack (Caleb) -> LeftInPouch(Caleb,Target))", "all x y.((Caleb(x) & Target(y)) -> LeftWithTradeForward(x,y))", "all x y z.((Caleb(x) & Target(y) & TradingCard(z)) -> LeftInPouch(x,y,z))", "all x.((Cleb(x) & TradingCardPack(x)) -> LeftTarget(x))", "all x y.((Caleb(x) & Target(y) & TradingCard(y)) -> LeftInPot(x,y))", "all x y z.((Careb(x) & Target(y) & TradingCard(z) & InPouch(x,y,z)) -> Left(x,y))", "all x y.((Caleb(x) & Target(y)) -> LeftWithTradingCards(x,y))", "all x.((Caleb(x) & TradingCardsPack(x)) -> LeftInPouch(x))", "all x.((Caleb(x) & TradingCardsPack(x)) -> LeftTarget(x))", "all x y.((Careb(x) & Target(y)) -> LeftWithTradingCardsInPouch(x,y))"]}
{"id": "enwn_validation_13", "nl": "Caleb didn't pay for the pack.", "fol": "", "prediction": ["-paidForPack(Caleb)", "Caleb didn'tpayforPack(Caleb)", "(-Pays(Caleb,Pack))", "(-PaidForPack(Canaleb))", "all x.(Caleb(x) -> -PaysForPack(x))", "Caleb-PAYPackedPack(Caleb)", "all x.(Caleb(x) -> -Pays(x,Pack))", "(-paid(Caleb,Pack))", "((Caleb(Caleb) & Pack(Caleb)) -> \"Doesn'tPay(Caleb)))", "all x y.((Caleb(x) & Pack(y)) -> -PaysFor(x,y))", "(-HasPayedPack(Caleb))", "insufficiently(Caleb)", "(NoDeal(Caleb) & Pack(Caleb))", "(-PAYEDFullPack(Caleb))", "((Caleb(Caleb) & Pack(Caleb)))", "(Paying(Caleb,pack) vs. -Paying(Caleb,pack))"]}
{"id": "enwn_validation_14", "nl": "You only have permission to take merchandise from a store if you pay for it.", "fol": "", "prediction": ["all x.((Store(x) & PayForMerchandise(x)) -> TakeMerchandise(x,y))", "all x y.((Store(x) & Purchase(y)) -> HasPermissionToTakeMerchandise(x,y))", "all x y,z.((CaresForMerchandise(x) & Store(y) & PaysForMerchandise(z)) -> TakesMerchandise(x,y,z))", "all x y.((Machine(y) & Store(y) & PaysFor(x,y)) -> HasPermissionToTake(x,y))", "all x y.((Store(x) & Store(y)) -> (PaysFor(h,x) | PaysFor(h,y)))", "all x.((AgreeToTakeMerchandise(x) & PayForMerchandise(x)) -> -PermissionToTakeMerchandise(x))", "all x y.((Client(x) & Store(y) & PaysFor(x,y)) -> TakesMerchandiseFrom(x,y))", "all x y.((Store(x) & Store(y) & PaysFor(x,y)) -> PermitsTakeMerchandise(x,y))", "all x y.((Machine(x) & Store(y) & PaysFor(x,y)) -> PermissionToTake(x,y))", "all x y.((CarryForMerchandise(x) & Store(y) & PayForMerchandise(z)) -> AllowsTake(x,y))", "all x y.((Store(x) & Store(y) & PaysFor(y,x)) -> PermissionToTakeMerchandise(x,y))", "all x y.((Store(x) & Store(y) & PaysForMerchandise(x,y)) -> TakesMerchandise(x,y))", "all x y.((Store(x) & Store(y) & PaysForMachine(x,y)) -> PermissionToTakeMerchandise(x,y))", "all x.((Store(x) & PaysFor(x)) -> TakesMerchandise(x))", "all x y.((Store(x) & Pay(y) & Take(x,y)) -> HasPermissionToTake(x,y))", "all x y.((Store(x) & Store(y) & PaysFor(x,y)) -> PossibilityToTakeMerchandise(x,y))"]}
{"id": "enwn_validation_15", "nl": "You should not steal.", "fol": "", "prediction": ["-Stolen(You,Deep))", "everything -> -Steal()", "All x.((Storm(x) & NotFraud(x)) -> -Theft(x))", "all x.((Fraud(x)) -> -Follow(x))", "all x.((Person(x) & -Stolen(x)) -> -Stolen(x))", "all x.((Don'tStole(x)) -> -IsLessThan(x))", "all x.((IsNecessaryToSteal(x)) -> -CanSteal(x))", "all x.((Steal(x)) -> -Storage(x))", "all x.((Father(x) & -Father(x)) -> -Father(x))", "also, please don't steal.", "all x.((Stolen(x) & -Steal(x)) -> -(Storm(x) & GetStrict(x)))", "all x.((Father(x) & -Broken(x)) -> -(Father(x) & Broke(x)))", "all x.((Stole(x)) -> -Host(x))", "all x.(StoleNo(x) -> -HasStorage(x))", "all x.(Stolen(x) -> -(Steal(x) | Steal(x))))", "you should not steal."]}
{"id": "enwn_validation_16", "nl": "Caleb took the cards from Target without paying for them.", "fol": "", "prediction": ["Caleb tookCardsFrom(Caleb,Target) & -Payed(Caleb,Target))", "all x y.((Caleb(x) & Target(y)) -> TakesCards(x,y))", "all x.(Caleb(x) -> (TakesCards(x) & FromTarget(x) & -PaysForCards(x)))", "(NurlyPaid(Caleb,Cards) & -Payed(Caleb,Cards))", "(PaidRightsWithCards(Caleb) & TargetCards(Caleb,Target))", "Caleb took the cards from Target without paying for them.", "(CardsFromTarget(Caleb,(Caleb,Cards)) -> TakesWithoutPaying(Caleb,Cards))", "Caleb tookCardsFrom(Caleb,Target) & -PayedFor(Caleb,Target))", "Caleb took TargetCardsNoPay(Caleb))", "(all x.((Caleb(x) & TargetCard(x)) -> TakenFrom(x,Shark,Undergo)))", "all x y.((Caleb(x) & Target(y)) -> TakesCards(x,y))", "all x.(LatebCards(x) -> -PaysForCards(x))", "all x y.((Caleb(x) & Cards(y) & Target(y) & PaidFor(x,y)) -> TakeFor(x,y))", "(all x.(Claeb(x) -> TakesTargetCards(x,Target)))", "Caleb tookCards(Caleb) & -(Payed(Caleb) -> Target(Caleb)))", "all x y.((Caleb(x) & Target(y)) -> TakesCards(x,y))"]}
{"id": "enwn_validation_17", "nl": "Caleb took the store's cards without the store's permission.", "fol": "", "prediction": ["all x y z w.((Caleb(x) & Card(y) & Store(z) & Permission(w)) -> TakesWithout(x,y,z,w))", "all x y.((Store(x) & Caleb(y)) -> TakesCardsUnlikeAuthority(y,x))", "all x y.((Store(x) & Caleb(y)) -> TakesCardsWithoutPermission(y))", "(all x.(Caleb(x) -> StoreCards(x)))", "all x y.((Caleb(x) & Store(y) & Card(x)) -> DoneWithoutPermission(x,y))", "all x y.((Store(x) & Caleb(y)) -> TakesCardsWithoutPermission(y,x))", "(ShapedCardsWithoutPermission(Caleb,Store))", "all x.((Caleb(x) & Store(y)) -> TakesCardsWithoutPermission(x,y))", "all x y.((Caleb(x) & Store(y)) -> TakesCardsWithoutPermission(x,y))", "all x y.((Store(x) & Caleb(y)) -> TakesCardsWithoutPermission(x,y))", "all x.(Caleb(x) -> TakingCardsWithoutPermission(x))", "all x y.((Caleb(x) & Store(y)) -> TakesCards(x,y))", "((Caleb'sCards(Caleb) & -StorePermission(Caleb)) -> TakenWithoutCards(Caleb))", "all x y z.((Caleb(x) & Store(y) & Card(z) & Card(z)) -> TakesWithoutPermission(x,y,z))", "all x y z.((Salary(x) & Caleb(y) & Card(z)) -> (Takes(y,z) & -GetsPermission(y,x)))", "all x y.((Caleb(x) & Store(y)) -> tookCardsWithoutPermission(x,y))"]}
{"id": "enwn_validation_18", "nl": "Caleb stole the cards.", "fol": "", "prediction": ["all x.(Caleb(x) -> stoleCards(x))", "(Orc(caleb) & Card(carts))", "all x.((Caleb(x) & Cards(y)) -> Stolen(x,y))", "all x.(Caleb(x) -> StalledCards(x))", "all x.(Baret stolesCards(x) -> SitsInCardBox(x))", "Caleb stolesCards(ca)", "at least six cards were stolen by Caleb.", "(StolenCards(Caleb,Clay))", "all x.(CalebStoleCards(x) -> (I raked(x) & CardsThroated(x)))", "(StoleCards(Caleb))", "Caleb stolesCards.", "(StoleCards(Caleb))", "all x.(StolenCards(x) -> Caleb(x))", "(StoleCards(Caleb)", "(StoleCards(Caleb))", "all x.(Cust(x) -> Cards(x))"]}
{"id": "enwn_validation_19", "nl": "Caleb should not have stolen the cards.", "fol": "", "prediction": ["Caleb should not have stolen cards.", "Caleb should not have stolen the cards.", "all x.((Caleb(x) & -StolenCards(x)) -> -StolenCards(x))", "all x.((Caleb(x) & Scandal(x)) -> -StolenCards(x))", "all x.((Caleb(x) & Card(y)) -> -Stole(x,y))", "all x.(Card(x) -> Caleb-Torn(x))", "all x.(Caleb(x) -> -RoledCards(x))", "all x.(Clay(x) -> -StolenCards(x))", "all x.(Caleb(x) -> -IsTravel(x))", "all x.((Caleb(x) & -StoleCards(x)) -> -StoleCards(x))", "(HelenCaleb(Caleb) & -StolenCards(Caleb))", "not have stolen cards(caleb,cards)", "-StolenCards(Caleb)", "all x.((Caleb(x) & -RostCards(x)) -> -StolenCards(x))", "Caleb should not have stolen the cards.", "all x.(Caleb(x) -> -StoleCards(x))"]}
{"id": "enwn_validation_20", "nl": "Elias ran into Julia and made her drop all her books.", "fol": "", "prediction": ["all x y z.((Elias(x) & Julia(y) & Book(z) & RunInto(x,y)) -> MadeDrop(y,z))", "all x y.((Elias(x) & Julia(y)) -> (RunsInto(x,y) & MakesTodropBooks(y,x)))", "all x y z.((Elias(x) & Julia(y) & Book(z) & RunsInto(x,y) & MadeDrops(x,z)) -> Drops(y,z))", "all x y.((Elias(x) & Julia(y)) -> (RunInto(x,y) & MadeHasBooks(y)))", "(exists x.(Elias(x) & JuliaTurnedInto(x,y)) & exists z.(Elias(z) & (Julie(z) & DropBooks(z)))))", "all x.((Elias(x) & Julia(y) & RunInto(x,y)) -> DropmedAllBooks(y))", "Elias ran into Julia and made her drop all her books.", "all x y z.((Elias(x) & Julia(y) & Book(z)) -> (RunsInto(x,y,z) & MakesSheDropAll(y,x,y)))", "Elias ran into Julia and made her drop all her books.", "all x y.((Elieas(x) & Julia(y)) -> (RunsInto(x,y) & MadeSheDropBooks(y,x)))", "(RunsInto(Elieas,Julia) & MadeBearAllBooks(Elieas,Julia))", "Elias, ranIntoJulias & Made(em) Elias DropSeasons(e))", "all x y z.((Lias(x) & Julia(y) & Elias(z)) -> (RunsInto(x,y) & MakesSheDropBooks(y,z)))", "All x.(Situation(x) -> (EliasRunsInto(x,Y) & MadeItTodropBooks(x,Julian)))", "all x y.((Elias(x) & Julia(y)) -> (RunsInto(x,y) & MadeBooksDrop(y,y)))", "all x y.((Elias(x) & Julia(y)) -> (RunsInto(x,y) & MadeDropBooks(y)))"]}
{"id": "enwn_validation_21", "nl": "If you drop something accidentally, you need to pick it up afterwards.", "fol": "", "prediction": ["all x.((Pickup(x) & DropUnexpected(x)) -> Drop(x))", "all x.((DropsInaccidently(x) & IncompletelyDropsInaccidentally(x)) -> PicksUpAfterParticular(x))", "(-dropsAccidentally(dropsCause(Cause(Cause(Cause(Cause(Cause(Cause(Cause(Cause(CauseCause(Cause(Cause(Cause)) & ReachesCause(Cause(Cause)))", "all x.((DropsInaccidentally(x) & DropsNature(x)) -> NeedsToPickUpAfter(x))", "all x y.((IsInaccident(x) & Drops(y)) -> PickUp(x,y))", "all x.((DropsInstantly(x) & PicksUpAfterNearly(x)) -> Accidentally(x))", "all x.(DumpsScary(x) -> NeedsPickup(x))", "all x.((LandsAccidentally(x) & Drop(x)) -> PickUpAssembled(x))", "all x.((Target(x) & Drops(x) & Accidentally(x)) -> NeedsToPickUp(x))", "all x.((Uses(x) & DropsAccidentally(x)) -> NeedsPriming(x))", "all x y.((TailsInsertly(x) & Drops(x,y)) -> NeedsToPickUpAfternoon(x))", "all x.((DropsInaccidentally(x) & ThingsYouLayIn(x)) -> BruiseHappening(x))", "all x.((DropsInaccidentally(x) & IncorrectElement(x)) -> NeedsPickupAfter(x))", "all x y.((Error(x) & Drop(y)) -> PickUp(x,y))", "all x.((ArriveDrop(x) & DropsAccidentally(x)) -> NeedsPickupAfter(x))", "all x y.((UsefulDrop(x) & Unintentionally(y)) -> NeedsPickUpAfter(x,y))"]}
{"id": "enwn_validation_22", "nl": "If you caused an accident, you should help anyone affected by it.", "fol": "", "prediction": ["all x y.((CausedAttention(x,y) & Haft(y)) -> ShouldHelp(x,y))", "all x.(CausedAccident(x) -> PleaseHelpAffectedBy(x))", "all x.((CausedAccident(x) & AffectedBy(x,Chapter,Underwriting)) -> ShouldHelp(x))", "all x.(CausedAccl\u00e9(x) -> ShouldHelpAffectedBy(x))", "all x.(CausesAccident(x) -> Help(x))", "all x.(CausedAcadiament(x) -> HelpAnyone.AffectedByUnfortunately(x))", "all x y.((CausedAccident(x) & Person(y) & AffectedBy(y,x)) -> ShouldHelp(x,y))", "all x y.((CausedAccelorcy(x) & AffectedBy(y)) -> Help(x,y))", "all x.((CausedInaccident(x) & AffectedBy(x)) -> HelpAllOfAffectedBy(x))", "all x.((CausesAccident(x) & Cause(x,y)) -> ShouldHelpAnyone(x,y))", "all x.((CausedAccident(x) & AffectedByUnaccident(x)) -> Help(x))", "all x y.((CausedAccident(x) & Person(y)) -> Help(x,y))", "all x.(CausedAcadiation(x) -> NeedHelp(x))", "all x y.((CausedAccident(x) & CausedAccident(y)) -> ShouldHelpAffectedBy(x,y))", "all x.(CausedCausesAccuity(x) -> ShouldHelpAnyAffectedBy(x,By))", "all x.(CausedAccount(x) -> HelpAnyImmediate(x))"]}
{"id": "enwn_validation_23", "nl": "Julia needs to pick up the books because Elias bumped into her.", "fol": "", "prediction": ["all x y.((Book(x) & Elias(y)) -> NeedsPickup(x,y))", "Julia Muscles(Julia)", "Julia needed to pick up the books because Elias bumped into her.", "(StopsBooks(Julia) & EliasBrummedInto(Elieas))", "Julia Nutcracker(Julie) & EliasBumpedInto(Julie)", "all x y z.((Julie(x) & Elias(y) & Book(z)) -> NEEDSSniffUp(x,z))", "all x y decembre, 2010 -> (ReturnsBooks(x,y) & EliasNeedsReadings(y)))", "(NeedsToPickUpTheBooks(Julia) & EliasBurrowedInto(Elieas))", "(NeedsToPickUpBooks(Julie) & EliasBushnedInto(Julie))", "(NeedsBookBooks(Julia,Evias) | InBrunchUp(Julia,Elina)))", "(BuppedInto(Julias,Elie,Julie))", "(HasBubbledInto(Julias,Julia))", "(BruckedInto(Julias,Julia,Eric,Julia))", "Julia needs to pick up books, because Elias bumpedIntoWilliams.", "all x y.((Julie(x) & Elias(y)) -> NeedsToPickUpBooks(x,y))", "exists x.(Book(x) & BumpetedInto(x))"]}
{"id": "enwn_validation_24", "nl": "Elias should help Julia pick up the books.", "fol": "", "prediction": ["all x y.((Elizas(x) & Julia(y)) -> ShouldHoldUpBooks(x,y))", "all x.((Elias(x) & Julia(y)) -> PickUpBooks(x,y))", "all x y.((Elas(x) & Julia(y)) -> ShouldHelp(x,y))", "Elias should help PickUpBooks(Elements,Vijal)", "all x y.((Elitas(x) & Julia(y)) -> ShouldHelppickupBooks(x,y))", "Elias should help Julia pick up the books.", "all x y.((Julie(x) & Elias(y)) -> ShouldHelpTopUpBooks(y,x))", "Elias will help Julia PickUpBooks.", "Elias should help Julia pick up the books.", "Elias should help Julia pick up books.", "all x y.((Ericas(x) & Julia(y)) -> ShouldHelpPuckUpBooks(x,y))", "all x y.((Elias(x) & Julia(y)) -> HelpsPickupBooks(x,y))", "Elias should help Julia pick up the books.", "Elias should help Julia pick up their books.", "(HelpingJulieMovebooks(Julie,Elizas))", "Elias should help Julia pick up the books."]}
{"id": "enwn_validation_25", "nl": "In the United States, it's impolite to not tip someone who serves you.", "fol": "", "prediction": ["all x.((UnitedStates(x) & IsImpolite(x)) -> -Stip(x))", "all x y z.((Republic(x) & Serving(y) & Person(z) & Served(z)) -> (ImpoliteToTip(x,y,z)))", "all x.((U.S.A. & ServesYou(x)) -> ImpoliteToTip(x,i))", "all x.((UnitedStates(x) & Serves(x)) -> ImpoliteTote(x))", "all x y.(((UnitedStates(x) & Person(y)) -> -Tip(x,y))", "all x y z.((UnitedStates(x) & Person(y) & Service(z)) -> -Tip(y,z))", "all x.(Services(x) -> ImpoliteToNotTip(x))", "all x.((UnitedStates(x) & DoesTip(x)) -> Impolite(x))", "all x y.((ImpoliteToTip(x) & Serves(y)) -> -Tipped(x,y))", "all x.((UnitedStates(x) & Serves(x)) -> ImpoliteToTip(x))", "all x.((UnitedStates(x) & -Tip(x)) -> Impossible(x))", "all x.((U.S.A.(x) & Serves(x,(tip) & Ignorate(x,tip))) -> -Tip(x,z))", "all x y.((Tip(x) & (Serves(y) | Serves(y))) -> Impolite(x))", "all x.((U.S.A.Tipped(x) & Serves(x)) -> Impolite(x))", "all x.((Student(x) & American(x)) -> ImpoliteToTip(x))", "all x.((UnitedStates(x) & IgnoreTipped(x)) -> -Tips(x))"]}
{"id": "enwn_validation_26", "nl": "A bartender serves drinks at a bar.", "fol": "", "prediction": ["all x y.((Bartender(x) & Bar(y)) -> ServesDrinksAt(x,y))", "all x y z.((Bartender(x) & Bar(y) & Bar(z)) -> ServesDrinksAt(x,y,z))", "all x y.((Bartender(x) & Bar(y)) -> ServesDrinks(x,y))", "all x y.((Bartender(x) & Bar(y)) -> ServesDrinksAt(x,y))", "all x y z.((Bartender(x) & Bar(y) & Bar(z)) -> ServesDrinksAt(x,y,z))", "all x y z.((Bartender(x) & Bar(y) & Drink(z)) -> ServesAt(x,y,z))", "all x y.((Bartender(x) & Bar(y)) -> ServesDrinksAt(x,y))", "all x y.(Batender(x) & Bar(y)) -> ServesDrinks(x,y))", "all x y z.((Bartender(x) & Bar(y) & Bar(z)) -> ServesDrinksAt(x,y,z))", "all x y.((Bartender(x) & Bar(y)) -> ServesDrinks(x,y))", "all x y z.((Bartender(x) & Bar(y) & Drink(z)) -> Serves(x,y,z))", "all x y.((Bartender(x) & Bar(y)) -> ServesDrinksAt(x,y))", "all x y z.((Bartender(x) & Bar(y) & Drink(z)) -> ServesAt(x,y,z))", "all x y z.((Bartender(x) & Bar(y) & Drink(z)) -> ServesAt(x,y,z))", "all x y z.((Bartender(x) & Bar(y) & Drink(z)) -> ServeAt(x,y,z))", "all x y z.((Bartender(x) & Bar(y) & Drink(z)) -> ServesAt(x,y,z))"]}
{"id": "enwn_validation_27", "nl": "Ellie ordered a drink at a bar called the Red Pony.", "fol": "", "prediction": ["Ellie ordnancedDrinkAtRoundPony(Ellie)", "all x y.((Ellie(x) & Bar(y)) -> OrderedDrinkAt(x,y))", "all x y z.((Ellie(x) & Drink(y) & Bar(z) & RedPony(z)) -> OrderedAt(x,y,z))", "all x y.((Ellie(x) & Bar(y) & RedPony(y)) -> OrderedDrinkAt(x,y))", "Ellie orderedDrinkToBelongToBar(Ellie,SeniorPony,Bar)", "Ellie (Ellie) is a bartender at RedPool.(ElelieOrdersDog(Ellie,Drink,RedPool)))", "all x y.((Ellie(x) & Bar(y)) -> OrderedDrinkAt(x,y))", "Ellie orderedDrinkAt(Ellie'sBarToOf(Ellie,RoundPony))", "Ellie orderedDrinkAtRedPony(Ellie)", "(OrdersDrink(Ellie) & RedPony(Ellie))", "all x y.((Ellie(x) & Bar(y) & RedPony(y)) -> OrderedDrink(x,y))", "Ellie orderedDrinkAtBar(Ellie,redPony)", "Ellie has ordered a DrinkAtaBar(Ellie,RedPony)", "Ellie ordereddDrink(ellie,e) -> RedPonyBar(z).)", "Ellie orderedddrinkAtRedPony.", "Ellie ordereddDrinkAtRedPony."]}
{"id": "enwn_validation_28", "nl": "The Red Pony is in Albuquerque, New Mexico.", "fol": "", "prediction": ["The RedPony(r) exists en eFodo(r) & Albuquerque(y) & InNewMexic.Of(red.pony(r))", "(RedPony(red) & Albuquerque(red) & NewMexico(red))", "The Red Pony is in Albuquerque, NewMexico.", "The Red Pony is in Albuquerque,NewMexico.", "RedPony(r) exists w.(Albuquerque(w) & NewMexico(w) & Albuquerque(x,w))", "(RedPool(RedPool) isInAlbuquerque(RedPool))", "The RedPony(x) exists in Albuquerque, New Mexico.", "Alley(redpowder) -> (InAlbuquerque(redpowder) & NewMexico(powder.))", "The Red Pony exists in Albuquerque,NM.", "The RedPonyBeverageInAlbuquerque,NewMexico.", "(RedPony(red) - Albuquerque,NewMexico))", "RedPony(x) -> Albuquerque(x))", "RedPool(p) -> (OccupiedInAlbuquerque(p) & InNewMexico(p)))", "All x.(RedPony(x) -> (IsInAlbuquerque(x) | InNewMexico(x)))", "The RedPony(Pony) exists en Vivencia,Albuquerque,NM.", "(-SideDarkness(RoundPony) & Albuquerque(RodPony) | NewMexico(RodPony)))"]}
{"id": "enwn_validation_29", "nl": "New Mexico is a state in the United States.", "fol": "", "prediction": ["the UnitedState(NewMexico)", "all x.(NewMexico(x) -> StateInUnitedStates(x))", "NewMexico(NM) -> StateInU.S.A.S.(NewMexico) & InU.S.(NewMexico(NM)))", "NewMexico(NM) -> (StateInUnitedStates(NM) & StateInUnitedStates(NM)))", "all x.(NewMexico(x) -> (StateInUnitedStates(x)))", "all x.(NewMexico(x) -> State(x))", "both -English(NewMexico) & StateInUnitedStates(New Mexico))", "NewMexico(NewMexico) \u2013 StateInUnitedStates(NewMexico))", "NewMexico(NM) -> StateInUnitedStates(NM))", "all x.(NewMexico(x) -> StateInUnitedStates(x))", "NewMexico(NewMexico) -((State(NewMexico) & UnitedStates(NewMexico))))", "(State(NewMexico) | StateInUnitedStates(NewMexico)))", "all x y.((NewMexico(x) & State(y)) -> (UnitedState(x) & UnitedState(y)))", "all x.(NewMexico(x) -> StateInUnitedStates(x))", "NewMexico(NM) -> StateInUnitedStates(NM))", "all x.(Nov.Mexico(x) -> StateInUnitedStates(x))"]}
{"id": "enwn_validation_30", "nl": "You should not do impolite things.", "fol": "", "prediction": ["all x.(ImpoliteThing(x) -> -DoitImpoliteThings(x))", "all x.((DoesImpoliteThings(x)) -> -DoesImpoliteThings(x))", "all x.((DoesImbolitThing(x)) -> -DoIpoliteThings(x))", "All x.(ImploliteThings(x) -> -(DoImpoliteThings(x) | DoImpoliteThings(x))))", "all x.((Person(x) & -Improlite(x)) -> -ImpoliteCakes(x))", "all x.(Impolite(x) -> -DoseTeachers(x))", "-ImpoliteThings(y)", "-ImpoliteThings(x)", "all x.(ImploliteThings(x) -> -Does(x,impossible))", "-ImpoliteThings.", "all x.(Impolite(x) -> -Doimolite(x))", "to the point of impoliteness.", "all x.((DoesImpoliteThings(x)) -> -(DoesImpoliteThings(x) & DosImpoliteThings(x))))", "all x.(ImpoliteThings(x) -> -Do(x))", "all x.(-ImposibleThing(x) -> -ImpoliteThing(x))", "all x.(ImpooliteThing(x) -> -DoUse(x))"]}
{"id": "enwn_validation_31", "nl": "In the United States, it's impolite to not tip bartenders who serve you drinks at a bar.", "fol": "", "prediction": ["all x y z.((RetroFunction(x) & Bartender(y) & Bar(z) & ServesDrinks(y,z)) -> Impedolite(x))", "all x y.((UnderStates(x) & Bartender(y) & ServesDrinksAt(y,x)) -> NecessaryTip(y,y))", "all x y.((Start(x) & Bartender(y) & SpeakWith(y,x) & ServeWaterTo(x,y)) -> Impolite(x))", "all x y.((UnitedStatesBar(x) & Bartender(y) & ServeSipsAt(x,y)) -> ImpoliteToTip(y,x))", "all x y.((UnitedStatesBar(x) & Bartender(y) & ServesDrinksAt(y,x)) -> ImpoliteToTipped(x,y))", "all x y.((UnitedStatesBartender(x) & BarTipps(x)) -> -ImpoliteToTip(y))", "all x y.((UnitedState(x) & Bartender(y) & ServesDrinks(y,x)) -> ImpoliteToNotTip(x,y))", "all x.((UnitedStates(x) & Bartender(y) & ServesDrinks(y,x)) -> ImpossibleToTip(x,y))", "all x y.((Bartender(x) & BartenderService(y)) ->,TippedIn(x,y))", "all x.(ToTipBartender(x) -> (Impolite(x) & YouTipAtBall(x)))", "all x y.((UnitedState(x) & Bartender(y) & ServeEdibles(y,x)) -> ImpoliteToTip(x,y))", "all x y z.((Bartender(x) & Bartender(y) & Bar(z) & ServesDrinks(x,y,z)) -> ImpoliteToTip(x,y,z))", "all x y.((Implolite(x) & Bartender(y) & ServesDrinksAtBar(y)) -> -Tip(x,y))", "all x y.((UnitedStates(x) & Bartender(y)) -> RequiresTip(x,y))", "all x y z.((State(x) & Bartender(y) & Bartender(z) & ServesDrinksOn(y,z)) -> Impolite(x,y,z))", "all x y.((Bartender(x) & Bartender(y)) -> (ImpoliteToTip(x,y) & ServesDrinks(x,y)))"]}
{"id": "enwn_validation_32", "nl": "Ellie ordered a drink from a bartender at the Red Pony.", "fol": "", "prediction": ["(OrderFromBartenderAtRedPony(Ellie))", "all x y z.((Ellie(x) & Bartender(y) & Pony(z) & At(x,y,z)) -> OrderedDrink(x,y,z))", "all x y z.((Ellie(x) & Bartender(y) & RedPony(z)) -> OrdersDrink(x,y,z))", "all x y z.((Ellie(x) & Bartender(y) & RedPony(z)) -> Ordered(x,z))", "all x y z.((Ellie(x) & Bartender(y) & RedPony(z)) -> OrderedDrinkBetween(x,y,z))", "Ellie orderedDrinkFromBartenderAtRedPony(Ellie)", "Ellie ordered(Ellie,Drink,drink) & Bartender(RoundPony)", "(OrdersDrink(Ellie,RedPony) & Bartender(Ellie))", "Aldrin,theBartender(Ellie,RoundPony) & OrderedDrink(Ellie,Drink,RodPony))", "all x y z.((Ellie(x) & Bartender(y) & RedPony(z)) -> OrdersDrink(x,y,z))", "Ellie orderedaDrinkFromBartender(Ellie,RedPony)", "Ellie ordainDrink(Ellie) & BartenderAtRedPony(Elliot)", "Ellie ordered an order from a bartender at Red Pony.", "Ellie aspired to be a bartender (or at least that of the Red Pony) )", "(OrdersDrink(Ellie,RosePony) | All & Bartender(Ellie,RedPony)))", "Ellie ordered from Bartender at Red Pony!"]}
{"id": "enwn_validation_33", "nl": "The Red Pony is in the United States.", "fol": "", "prediction": ["The RedPonyAreaInStates(red))", "WhitePony(re) is in(re)ohio(re) & in(re) & in(re) & in(re) & in(re) & in(re)))", "This RedPony(x) exists y.(UnitedStates(y) & HomeOf(x,y)))", "(RedPony(x) -> InUnitedStates(x))", "(RedPony(red) & InU.S.A.s.(redPony)))", "(InUnitedStates(RedPony) -> In(RedPony))", "(RedPony(red) & UnitedStates(red))", "The RedPony(x) is located inU.S.", "The RedPopcornIsInU.S.S.A.(RedPony(R) & InStates(R))", "Der Red Pony (RedPony) (InUS))", "RedPony(x) is inU.S.A.(Posh(x) & IsIn(x,USA))", "Lennon(RodPony) - InU.S.S.A.", "Esprias(RedPony) -> LocatedIn(RedPony,Americans))", "The Red Pony is in the United States.", "RedPony(x) -> (Red(x) | UnitedStates(x)))", "The RedPony is in the United States."]}
{"id": "enwn_validation_34", "nl": "Ellie ordered a drink from a bartender in the United States.", "fol": "", "prediction": ["all x y z.((Ellie(x) & Bartender(y) & Bartender(z)) -> Ordered(x,y,z))", "all x y.((Ellie(x) & Bartender(y)) -> OrderedDrink(x,y))", "all x y z.((Ellie(x) & Bartender(y) & Drink(z)) -> OrderedFrom(x,y,z))", "all x y z.((Ellie(x) & Bartender(y) & American(z)) -> OrdersDrinkTen(x,y,z))", "all x y z.((Ellie(x) & Bartender(y) & Bartender(z)) -> OrderedDrinkDesire(x,y,z))", "all x y z.((Horror(x) & Bartender(y) & District(z)) -> OrderedAndDeliveredFromInTheU.S.S.(Ellie,y,z)))", "all x y z.((Ellie(x) & Bartender(y) & Drink(z)) -> OrderedFrom(x,y,z))", "Ellie ordereddbijou fromBartenderInStates(Ellie))", "all x y z.((Ellie(x) & Bartender(y) & Drink(z)) -> OrdersFrom(x,y,z))", "Ellie orderedDrinkFromBartenderInU.S.A.", "Ellie OrderedAdviceFromBartenderInU.S.A.", "(ortho-drink(Ellie,A) -> OrderedFromBartender(Ellie,A))", "(OrdersDrink(Ellie) & Bartender(Ellie))", "exists x y z.(Drink(x,y) & Bartender(z) & OrderedFrom(x,y) & InU.S.(Journal(x,z)))", "(OrdersDrink(Ellie) -BartenderInStates(Ellie))", "all x.((Ellie(x) & Bartender(y)) -> OrderedDrink(x,y))"]}
{"id": "enwn_validation_35", "nl": "It would be impolite for Ellie to not tip the bartender.", "fol": "", "prediction": ["(ImpossibleForEllieToNotTips(Ellie))", "all x y.((Bartender(x) & Ellie(y) & -Tipped(y)) -> Impolite(y,x))", "all x.(Implolite(x) -> (Ellie & -TippedBartender(x)))", "EspoliteForElliot toNotTippedBartender(e)", "all x.((Elliot(x) & -TippedBartender(x)) -> Impolite(x))", "(ImpoliteToTippedBartender(Ellie))", "Es ist impolite for Ellie to nottebartender.", "-TippedBaitender(Ellie)", "Esocute(ellie) & -TipBartender(eli)", "the bartender. -TippedElliot(eliotnociia,y))", "the bartender(Ellie) -> (-TippedBartender(Ellie)))", "(ImpoliteForEllie(Ellie) & -TippedBartender(Ellie))", "-TipBartender(Ellie)", "all x.((Ellie(x) & -TippedBartender(x)) -> Impolite(x))", "all x.((Elliote(x) & -TippedBartender(x)) -> Impolite(x))", "(Impossible(Ellie) -> -TipBartender(Ellie))"]}
{"id": "enwn_validation_36", "nl": "Ellie should tip the bartender.", "fol": "", "prediction": ["all x y.(Tip(x,y) & Bartender(y))", "all x.(TippedBreaker(x) -> Ellie(x))", "all x.(Tipped(x,ellie) -> Bartender(h))", "all x.(Bartender(x) -> ShouldTip(x,Elliot))", "all x y.((Bartender(x) & Ellie(y)) -> ShouldTip(y,x))", "(TippedBallie(Ellie))", "all x.(TippedBallist(x) -> Ellie(x))", "Ellie shouldTippedBartender(ellie)", "all x.((Ellie(x) & Bartender(y)) -> ShouldTin(x,y))", "Ellie shouldTipsBartender(ellie)", "all x y.((Bartender(x) & Bartender(y)) -> ShouldTip(y,x))", "Ellie shouldTeeBartender.", "all x.((Bartender(x) & Ellie(x)) -> ShouldTipped(x,bartender))", "all x y.((Bartender(x) & Bartender(y)) -> ShouldTip(x,y))", "Ellie s BartenderTipped(e)", "Ellie shouldTippedBartender(Ellie,AtTap,Batender))"]}
{"id": "enwn_validation_37", "nl": "You should pay back your debts.", "fol": "", "prediction": ["all x.(PayDebts(x) -> ShouldPayBack(x))", "all x.(Debt(x) -> Payback(x))", "all x.(PayBackDebt(x) -> (PayWithRepayment(x) | PayWithDebt(x)))", "all x.((Debt(x) & Debitor(y)) -> Payback(x))", "all x.(PayBackDebts(x) -> PayBackDebts(x))", "all x.(Debt(x) -> PayBack(x))", "all x.(PayDebits(x) -> ShouldPayBack(x))", "all x.((Debt(x) & ShouldPay(x,y)) -> YouShouldPay(x,y))", "all x.(PayBackDebts(x) -> ShouldWork(x))", "all x.((Debts(x) & ShouldPay(x,y)) -> ShouldPay(x,y))", "all x.(Debt(x) -> PaysBack(x))", "all x.(Debt(x) -> PayBack(x))", "all x.((Debt(x) & ShouldPayBack(x)) -> PayBack(x))", "all x.(PayBackDebt(x) -> ShouldBe(x))", "all x.(PayBackDebts(x) -> ShouldPayBackDebts(x))", "all x.(PayBackDebts(x) -> ShouldBe(x))"]}
{"id": "enwn_validation_38", "nl": "Fred borrowed $100 from Alyssa to buy the ski lift ticket.", "fol": "", "prediction": ["all x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> BorrowedToBuy(x,y,z))", "all x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> BorrowedStanley(x,z,y,z))", "Then, on February 13th, Fred borrowed $100 from Alyssa to buy the skiliftTicket(Fred,1996).", "Fred borrowed $100 from Alyssa to buy SkiLiftTicket(f)", "((Fred(Fred) & Alyssa(Fred) & -100(Fred)) -> BorrowedToBuySkiLiftTicket(Fred,a))", "(HasSkiLiftTicket(Fredd) | Borrowed(Fredd)) & Alyssa(Fredd))", "(-Fred(Fred,sk) & Alyssa(Alyssa,100)))", "all x y.((Fred(x) & Alyssa(y)) -> BorrowedToBuySkiLiftTicket(x,y))", "(BorrowedSantaFredd(Fred,100) & PurchasedSkiLiftTicket(Fred))", "Fred borrowed $100 from Alyssa.com to buySkiLiftTicket(Fred))", "All x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> BorrowedStatuutFor(x,y,z))", "(HasSkiLift(Fred,100) & BroughtTo(Fred,Alyssa))", "all x.((Fred(x) & Alyssa(x)) -> BorrowedForSkiLiftTicket(x,100))", "all x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> Borrowed100From(x,y,z))", "(SpringBorrowedS$10(Fred) & Alyssa(Fred,1))", "(SkiLiftTicket(Fred) -> BorrowsTenant(Fred,100))"]}
{"id": "enwn_validation_39", "nl": "You remind someone to do something when you want them to do it but they haven't.", "fol": "", "prediction": ["all x y.((Juice(x) & Person(y) & WonDoIt(y,x)) -> Reminds(x,y))", "all x y.(((I Want(x,y) & Person(x) & -IAve(y)) -> RemindsToDo(x,y))", "all x y.((Reminds(x,y) & Person(y) & Thoughts(y)) -> -WantsToDo(x,y))", "all x y z.((Renforce(x) & Person(y) & Do(z) & WantsToDo(y,z) & -Won(y,x)) -> Reminds(x,y))", "all x.((Reminds(x) & WantsToDo(x) & -CanDo(x)) -> NotReminds(x))", "all x y.((Doing(x,y) & Person(y) & WantToDo(y) & But -CanDo(y)) -> Remind(x,y))", "all x y.((Reminds(x,y) & Person(x)) -> (We Wants(x,y) & -We Want(x,y)))", "all x y.((Remind(x,y) & Person(y) & WantsToDo(x,y) & & -Want(y,x)) -> Reminds(x,y))", "exists x y.(Reminds(x,y) & Person(y) & WantsDoing(x,y) & -WantsToDo(y,x))", "all x y.((Reminds(x,y) & Person(x) & WantsToDo(y,x) & -WantToDo(x,y)) -> Reminds(x,y.))", "exists x y.(Reminds(x,y) & Person(y) & WantsToDo(x,y) & -WantToDo(y,x))", "all x y z.((Remind(x,y) & Person(z) & You WantToDo(x,z) & -YouForgetToDo(x,z)) -> Repeats(y,z))", "all x y.((Use(x,y) & Person(y) & DesiresDoing(x,y) & -WANTSToDo(y,x)) -> RemindsToDo(x,y))", "all x y.((Reminds(x) & Person(y) & Won'tDo(y,x)) -> Cannot(y,x))", "all x y.((Reminds(x,y) & Person(x) & -AsKnowledge(y)) -> CanDo(x,y))", "all x y.((Reminds(x,y) & Someone(y) & Available(y)) -> (-Worries(x,y) & Available(y,y)))"]}
{"id": "enwn_validation_40", "nl": "Alyssa messaged Fred to remind him to pay her back for the ski lift ticket.", "fol": "", "prediction": ["all x y.((Alyssa(x) & Fred(y)) -> (MessagedTo(x,y) & Reminds(x,y)))", "Alyssa messaged Fred to remind him to pay-back for skiliftTicket(a))", "All x.(Messaged(x,Fred) -> RemindsFredToPayHint(x))", "All x.(MessageSandwich(x) -> RemindsFredRepay(x,SkiLiftTicket))", "All x.((Alyssa(x) & Fred(x)) -> (Messaged(x,fred) | Reminds(fred))))", "MessagesToRemindFredToPayHeadForSkiSkiLift(Fred,Alyssa))", "(Messaged(Alyssa,Fred) & RemindsFred(Alyssa,SkiLift))", "Alyssa MessagedRemindsFredToPaySkiLiftTicket(Alyssa,Fred,Alyssa))", "all x.((Alyssa(x) & Fred(x)) -> RemindsToPayForSkiLiftTicket(x))", "Alyssa MessagedFredToRemindSkiLiftTicket(a) & AlyssaMelted(a))", "Alyssa messaged Fred to remind him to pay back for the skiliftticket(a))", "Alyssa MessagedFredToRemindToPayUpSkiLiftTicket(Fred,Alyssa)", "all x y.((Alyssa(x) & Fred(y)) -> PostedInReminding(x,y))", "(Messaged(Alyssa) & -RemindsFred(Fred))", "all x y.((Alyssa(x) & Fred(y)) -> Reminds(x,y))", "all x y.((Messaged(x,y) & Fred(y)) -> ReceiveRoundSkiLift(y,x))"]}
{"id": "enwn_validation_41", "nl": "If you borrow something from someone and haven't given it back, you owe it to them.", "fol": "", "prediction": ["all x y.((Purchase(x,y) & Borrows(y,z) & NoBack(z)) -> -Dowes(x,y))", "all x y.((Borrows(x,y) & Borrows(y,x)) -> Own(y,x))", "all x y z.((Borrows(x,y) & Person(z) & -Borrows(x,z)) -> IsOwnTo(x,y,z))", "all x y.((BorrowsNear(x,y) & BorrowsNear(y,x) & Person(y) & -Given(x,y)) -> (IsNothingReturned(x) & OwnsTo(x,y)))", "all x y z.((BorrowsFrom(x,y) & Person(z) & -GivenBack(x,z)) -> -Own(x,z))", "all x y.((Borrows(x,y) & Borrows(x,y) & -HasBack(x,y)) -> Owns(x,y))", "all x y z w.((Loan(x,y) & Borrows(x,y) & Backs(y) & Who(z) & -Ged(z,w)) -> IsOwn(x,w))", "all x y.((BorrowZon(x,y) & NoFreeBack(x)) -> IsRightTo(y,x))", "all x y.((Borrows(x,y) & Person(y) & -Gived(x,y)) -> ObligationTo(x,y))", "all x.((Borrows(x) & -GivesBack(x)) -> Oblige(x))", "all x y.((Person(x) & Borrows(x,y) & NotHasBack(x,y)) -> Owes(x,y))", "all x y.((Borrows(x,y) & BorrowsFrom(x,y) & Does(x,y)) -> owes(y,x))", "all x y.((Borrows(x,y) & -GivenBack(y)) -> IsOwn(x,y))", "all x y.((BuysPerson(x) & Who(y) & -GivenBack(x,y)) -> IsOld(x,y))", "all x y.((BorrowsInAndNotGivenBack(x,y) & BorrowsFrom(x,y)) -> Obligation(x))", "all x y.((Borrows(x,y) & Person(y) & -GiftsBack(x,y)) -> Worships(x,y))"]}
{"id": "enwn_validation_42", "nl": "Fred hasn't paid Alyssa back for the ski lift ticket yet.", "fol": "", "prediction": ["Fred still hasn't paid Alyssa back for the skiliftTicket.", "-HasFred(Fred,Alyssa) forsakenSkiLiftTicket(Fred))", "all x y.((Fred(x) & Alyssa(y) & SkiLiftTicket(y)) -> -paid(x,y))", "(no payments from Alyssa and skiliftTicket(Fred))", "all x y.((Fred(x) & Alyssa(y)) -> -PaysRightSkiLift(x,y))", "((Fred(Fred) & Alyssa(Alyssa)) -> -PayedSkiLiftTicket(Fred)))", "\"Fred\" (or Alyssa)) & -PayedSkiLiftTicket(Fred,a))", "Fred - PaidSnowLift(Fred,Alyssa)", "(FredHasNegligence(Fred,Alyssa) & HasNoPaid(Fred,Alyssa))", "Fred & Alyssa hasn't paid back for SkiLiftTicket(fred,a).", "(Fred hasn't PaidAlyssaForSkiLift(Fred) & CannotPay(Fred))", "all x y.((Fred(x) & Alyssa(y)) -> -PayedBack(x,y))", "Alyssa -FredPays(Fred,SkiLiftTicket))", "(all x.(PaidByFred(x) -> AlyssaDown(x)))", "all x y.((Fred(x) & Alyssa(y)) -> -PaysWheels(x,y))", "Fred's not paid AlyssaHello(Fred) & -PayedSkiliftTicket(Fred))"]}
{"id": "enwn_validation_43", "nl": "Fred borrowed $100 from Alyssa and hasn't paid it back yet.", "fol": "", "prediction": ["(HisBreakfast(Fred,100) & -PayedBack(Fred,100))", "(FLamBorrowed(Fred,100) & -PaypedBack(Fred,100))", "(Years(Fred) & Alyssa(Ayn))", "(OrgnizedByFred(Fred,100) & NotPaidBack(Fred,100))", "(Borrowed(Fred,100,Alyssa) & -Repaid(Fred,100))", "all x y z w.((Fred(x) & Alyssa(y) & $100(z) & Borrowed(x,y,z)) -> -NotPayedBack(x,y))", "(borrowedSpension(Fred) & Alyssa (HasNeededFreddishFor(Fred,200) & -PayedBack(Fred,100)))", "(DraftsFromAlyssa(Fred) & -PaysBack(Fred))", "(Private(Fred) | (BorrowedSpension(Fred,100) & -PayedBack(Fred,100))))", "Fred BorrowedSpension(feb,125) & -PayedBack(feb,100))", "(Borrowed(Fred,100) & -PayedBack(Fred,100))", "(DarredTo(Fred,100) & -PayedBack(Fred,100)))", "(BorrowedFrom(Fred,100) | -PayedBack(Fred,100)))", "all x y z.((Fred(x) & Alyssa(y) & $100(z)) -> (BorrowedFrom(x,z) & -PayedBack(x,y,z)))", "(BorrowedFrom(Fredd(Fredd) & Alyssa(Friend,100) & -PaidBack(Fredd,100))", "(NecessaryToHave(Fred) & Alyssa(Fred,100))"]}
{"id": "enwn_validation_44", "nl": "Fred owes Alyssa $100.", "fol": "", "prediction": ["all x.((Fred(x) & Alyssa(x)) -> owes100(x))", "-Owes100Fred(Fred,Alyssa,Santa)", "All x.(Fred(x) -> IsLosingAlyssa100(x))", "(LoansSalary(Fred,100))", "Alyssa's Friend(Fred) -100(Fred))", "-Fredows(Fred,Alyssa,100)", "all x y.((Fred(x) & Alyssa(y)) -> owes100(x,y))", "all x y.((Fred(x) & Alyssa(y)) -> owes(x,y))", "All x y.((Fred(x) & Alyssa(y)) -> TokensStatus(x,y))", "-FredOwesAlyssa100(Fred,100)", "Alyssa,100.DailyOf(Fred)", "All x y.((Fred(x) & Alyssa(y)) -> YouPay(x,y))", "all x.((Fred(x) & Alyssa(x) & $100(x)) -> owes(x,a))", "all x y.((Fred(x) & Alyssa(y)) -> Dues100(x,y))", "(GiftsAlyssa100(Fred) & Daughter(Alyssa))", "(WillSpend(Fred) & Alyssa(Alyssa))"]}
{"id": "enwn_validation_45", "nl": "Fred should pay Alyssa $100.", "fol": "", "prediction": ["Fred should pay Alyssa $100.", "all x.(Fred(x) -> ShouldPayAlyssa100(x))", "All x.((Fred(x) & Alyssa(x)) -> ShouldPay(x,100))", "All x.(Fred(x) -> ShouldPayAlyssa(x,100))", "(PaysFred(Fred,100) -> AlyssaPays(Fred,100))", "Alyssa should pay Fred100.", "Alice,100.(Fred(f) & Alyssa(f))", "all x.((Fred(x) & Alyssa(z)) -> ShouldPay(x,100))", "All x y.((Fred(x) & Alyssa(y)) -> ShouldPay100(x,y))", "All x.((Fred(x) & Alyssa(y)) -> ShouldPay(x,y))", "(FreddSalt(Fred) & Alyssa(Alyssa))", "All x.(Fred(x) -> ShouldPay100(x))", "all x.((Fred(x) & Alyssa(y)) -> Pays100(x,y))", "All x y.((Fred(x) & Alyssa(y)) -> ShouldPay(x,y))", "Fred will pay $100 to Alyssa.", "All x.((Fred(x) & Alyssa(y)) -> ShouldPay(x,y))"]}
{"id": "enwn_validation_46", "nl": "You should not take something that doesn't belong to you.", "fol": "", "prediction": ["all x.((Take(x) & -BelongTo(x)) -> -BelongTo(x))", "all x y.((Teacher(x) & Taken(x,y)) -> -BelongsTo(y,x))", "all x.((Action(x) & -BelongsTo(x)) -> -LetsAttach(x))", "all x.((UseWhat(x) & -Detached(x)) -> -TakeAnything(x))", "all x.((Purpose(x) & -BelongsTo(x)) -> -Takes(x,y))", "all x.((TakeProduct(x) & -WhatBelongsTo(x)) -> -(NeedsGift(x) & AffiliatesTo(x)))", "all x.((Takes(x,y) & -BelongsTo(x,y)) -> -(Takes(x,y) | Takes(x,y)))", "all x.((Takes(x) & -BelongsTo(x)) -> -BelongsTo(x))", "all x.((Takes(x) & -BelongsTo(x)) -> -BelongsTo(x))", "all x.((Take(x,y) & -BelongsTo(x,y)) -> -BelongsThan(x,y))", "all x.((Take(x) & -BelongTo(x)) -> -BelongsTo(x))", "all x.((PickSignal(x) & -BelongsTo(x)) -> -PickSignal(x))", "all x.((Takes(x,y) & -BelongsTo(y)) -> -BelongsTo(x,y))", "all x.((Takes(x,y) & -BelongsTo(x,y)) -> -OfficialTo(x,y))", "all x y.((Individual(x) & -BelongsTo(x,y)) -> -BelongsTo(x,y))", "all x.((Takes(x,y) & -BelongsTo(x)) -> -IsNotBelongsTo(x,y))"]}
{"id": "enwn_validation_47", "nl": "Mark is considering taking the lunch in the breakroom fridge.", "fol": "", "prediction": ["Mark (considersTakingLunchInBreakroomFridge(Mark))", "(TakesLunchInBreakroomFridge(Mark))", "Mark is considering taking the lunch in the breakroom fridge.", "Mark is considering taking lunch in BreakroomFridge(Mark)", "Mark is contemplating takingthelunchInBreakroomFridge(Mark)", "Mark ConsidersTakingLunchIn(Mark,breakroomFridge)", "all x.(Meets(Mark) -> TakesIn(Mark'sBreakroomFridge))", "(EnvisagesTakingLunchInBreakroomRefrigerator(Mark))", "MarkThinking(Mark) s(MarkedLunch(MarkedBeacons(Mark))", "Mark ConsideringTakesLunchInBreakroomFridge(Mark)", "Mark might take the lunch in breakroom fridge(Mark)", "Mark is consideringTakingLunchInBreakroomFridge(Mark)", "Mark is consideringTakingLayoutInBreakroomFridge(Mark)", "the lunch(Mark) -> ConsidersTakingInBreakroomFridge(Mark))", "Mark considersTakingLunchInBreakroomFridge(Mark)", "Mark considers takingLunchInBreakroomFridge(Mark)"]}
{"id": "enwn_validation_48", "nl": "The lunch in the fridge has a note on it saying \"Melissa\".", "fol": "", "prediction": ["all x.((Lunch(x) & Refrigerator(x)) -> HasNoteOn(x,y))", "all x y.((Lunch(x) & Refrigerator(y)) -> HasNoteOn(x,y))", "it's not long before Melissa arrives & InFridge((lunch) & NoteOnLunch(note,melissa,melissa))", "all x y.((Lunch(x) & Refrigerator(y)) -> MelissaNote(x))", "all x.((LunchInFridge(x) & NoteOn(x)) -> Melissa(x))", "all x.((Lunch(x) & InRefrigerator(x)) -> HasNoteSymbol(x\" & SaysMelissa(x))", "all x.((Lunch(x) & InFridge(x)) -> NoteMelissa(x))", "all x.((Lunch(x) & InFridge(x)) -> (HasNoteOn(x,Melissa) | -HasNoteOn(x,Melissa))))", "all x y.((Lunch(x) & Fridge(y) & HasNoteOn(x,y)) -> Melissa(x,y))", "all x.((Lunch(x) & Refrigerator(x)) -> HasNotePattern(x,melissa,melissa))", "all x.((Lunch(x) & InFridge(x)) -> HasNoteOn(x,Melissa))", "all x.((Lunch(x) & Refrigerator(x)) -> HasNote(x,Melissa))", "(exists x.(Lunch(x) & InFridge(x) & ContainsNote(x,Melissa)))", "all x.((Lunch(x) & InFridge(x)) -> HasNoteSyntamatics(x))", "all x y.((Lunch(x) & Refrigerator(y)) -> HasNoteStaying(x,y))", "all x.((Lunch(x) & Refrigerator(x)) -> NoticeWrittenIn(x,Mellissa))"]}
{"id": "enwn_validation_49", "nl": "People write their names on things to mark them as their belongings.", "fol": "", "prediction": ["all x y.((Person(x) & Thing(y)) -> WritesName(x,y))", "all x y.((Person(x) & Thing(y)) -> PlaceNameAndMarkBelonging(x,y))", "all x y z.((Person(x) & Name(y) & Signage(z)) -> WritesOnTree(x,y,z))", "all x.(Person(x) -> WritesNameOnThings(x))", "all x y.((Person(x) & Name(y)) -> Write(x,y))", "all x y.((Person(x) & Place(y)) -> WritesNameOnToMarkBelongings(x,y,y))", "all x.(WritesNameOnThings(x) -> MarksMaking(x,Belongings))", "all x y.((Person(x) & Something(y)) -> WritesName(x,y))", "exists x.(PeopleName(x) & WritesOn(x,y) & MarksAsBelongings(x,y))", "all x y.((Person(x) & Thing(y)) -> WritesNamesOn(x,y))", "all x y z.((Person(x) & Name(y) & Object(z) & WritesOn(x,y,z)) -> MarksAsBelongings(x,y,z))", "all x y z.((Personal(x) & Title(y) & Things(z)) -> WritesOnSelectsToMarkBelongings(x,y,z))", "all x y.((Person(x) & Name(y)) -> WritesOnToMarkBelonging(x,y))", "all x y.((Person(x) & Things(y)) -> WriteNameOnToMarkBelonging(x,y))", "all x.(WritesNameOnWeather(x) -> BelongsToMemory(x))", "all x.(Name(x) -> MarksAsBelongings(x))"]}
{"id": "enwn_validation_50", "nl": "The lunch in the breakroom fridge is Melissa's.", "fol": "", "prediction": ["all x y.((Lunch(x) & BreakroomFridge(y)) -> Melissas(x,y))", "all x y.((Lunch(x) & Breakroom(y)) -> Melissas(x,y))", "(TheLunchInBreakroomFridge(x) -> Melissa's(x))", "all x.((Lunch(x) & BreakroomFridge(x)) -> Melissas(x))", "all x.((Lunch(x) & BreakroomFridge(x)) -> MelissasLunch(x))", "all x y.((Lunch(x) & BreakroomFridge(y)) -> Melissa's(x))", "all x y.((Breakroom(x) & Breakroom(y)) -> MelissasLunch(x,y))", "(LayoutInBreakroomFridge(Melissa))", "(TheNightLunchInBreakroomFridge(Melissa-Cleeping))", "all x.((Lunch(x) & BreakroomFridge(x)) -> MelissaSunny(x))", "The lunch in breakroom fridge is Melissa's.", "all x y.((Lunch(x) & BreakroomFridge(y)) -> Melissas(x))", "all x.((Lunch(x) & BreakroomFridge(x)) -> Melissas(x))", "all x.((Lunch(x) & BreakroomFridge(x)) -> Melissas(x))", "all x.((Lunch(x) & BreakroomFridge(x)) -> Melissas(x))", "all x.(Melissa(x) -> Lunch(x))"]}
{"id": "enwn_validation_51", "nl": "Mark is considering taking Melissa's lunch.", "fol": "", "prediction": ["Mark's consideringMelain(Mark)", "Mark considersTakingMelissasLunch(Mark)", "all x.(Mark(x) -> ConsidersTakingMelissa'sLunch(x))", "(ThinkingMelissasLunch(Mark))", "all x y.((Mark(x) & Melissa(y)) -> ConsidersTakingPot(x,y))", "(EvansMelissasLunch(Melissa) -> Considered(MelissasLunch(Marc,Meliss)))", "Mark is consideringTakingMelissa'sLunch(Mark)", "((Mark (Mark) & Dinner(Melissa)) -> ConsidersTaking(Mark,Melissa)))", "exists x y.(Melissa(x) & Mark(y) & ConsidersTaking(y,x))", "all x y.((Mark(x) & Melissa(y)) -> ConsidersTakingLunch(x,y))", "((Mark(Mark) | Melissa(Melissa)))", "Mark ConsidersTakingMelissasLunch(Mark,Meliss)", "all x.((Mark(x) & TakesMelissasLunch(x)) -> Thinking(x))", "(AtLayout(Mark) & Takes(Mark,Melaine))", "Mark is consideringTakingMelissa'sLunch(Mark)", "Melissa's Lunch(Mark)"]}
{"id": "enwn_validation_52", "nl": "Mark should not take Melissa's lunch.", "fol": "", "prediction": ["-MelissaLeaf(Mark,Meliss)", "(-MelissaHasLunch(Melissa))", "-(Take(Mark,Melissa) & Lunch(Melissa))", "(-MatthewLunch(Matthew))", "(-UsesMelissaMelissaMelissaLunch(Mark) -> -Takes(Mark,Memelissa))", "(-DoesMelissasLunch(Mark,Melissa))", "all x y.((Mark(x) & Melissa(y)) -> -TakeInterview(x,y))", "-shouldTakeMelissa'sLunch(Mark,Melissa)", "(-takesMelissasLunch(Mark))", "Aucune excuses ni supposing(Mark, Melissa) s Lunch(Mark, Melissa))", "-(TakesMiles(Melissa'sLunch(Melissa)))", "all x y.((Melissa(x) & Melissa(y)) -> -TakesLunch(x,y))", "Mark should notTake(MarksLunch(Mark)", "all x.((Mark(x) & Melise(x)) -> -MelissaTakes(x,meliss))", "all x y.((Mark(x) & Melissa(y)) -> -shouldTake(x,y))", "@MelissaMcDonald(Marc)"]}
{"id": "enwn_validation_53", "nl": "Fern brought her textbook to class.", "fol": "", "prediction": ["Fern brought her textbook to class.", "Fern brought her textbook to class.", "Fern brought her textbook to class.", "Fern brought her textbookToClass(Elements)", "Fern brought her textbooks to class.", "all x y.((Fern(x) & Class(y)) -> BringsTextbookTo(x,y))", "(LiveClass(Fern) & BringsTextbook(Fern))", "Fern BroughtTextbookToClass(Fern)", "(LikesToClass(Fern) & BringsTextbook(Fern,Class))", "Fern bringethStandardToClass.", "is a woman who brought textbooks to class.", "Fern brought her textbook to class.", "Fern brought textbook(fern,class)", "Fern brought her textbook to class.", "Fern hat sich schon einige Tage lang von diesem Textbook entfernt.", "Fern brought her textbook to class."]}
{"id": "enwn_validation_54", "nl": "Ann showed up to biology class without her textbook.", "fol": "", "prediction": ["Ann walked in to BiologyClass(Ann) -NoTextbook(Ann))", "(ShownUpWithoutTextbook(Ann))", "-TreatmentWithoutPracticeBook(Ann,Biology)", "Ann of the Library of Boston was at a loss for textbooks and showed up without class.", "ann.((Ann.(Ann) & BiologyClass(NonTextbook)) -> ShowedUpWithoutContextbook(Ann))", "-(Acton(Ann) & BiologyClass(Ann)))", "all x y.((Ann(x) & BiologyClass(y) & -Textbook(y)) -> ShowedUp(x,y))", "StaffAsOnly(Ann) -> ShowsUpWithoutTextbook(Ann))", "Ann swerved UpToBiologyClassWithoutTextbook(Ann))", "Ann showed up to biologyclasswithoutTextbook(Ann)", "Ann showed up to BiochemistryClassWithoutTextbook(Ann,Biology))", "all x y.((Ann(x) & BiologyClass(y)) -> ShowedUpWithoutTextbook(x,y))", "(ShownUpToBiologyClass(Ann,withoutTextbook))", "Ann showed up to biologyclasswithoutBookset(Ann))", "Ann showedUpToBiologyClassWithoutTextbook(Ann))", "Ann showed up without textbook in biology class."]}
{"id": "enwn_validation_55", "nl": "Textbooks are required in Ann's biology class.", "fol": "", "prediction": ["all x y.((Textbook(x) & AnnsBiologyClass(y)) -> Required(x,y))", "all x.(Textbook(x,Ann) -> (RequiredInBiologyClass(x) | RequiredInBiologyClass(x,Ann)))", "all x.(Textbook(x) -> UsedInAnnsBiologyClass(x))", "all x.(Textbook(x) -> RequiresInAnAnn'sBiologyClass(x))", "all x.(Textbook(x) -> RequiredInAnn'sBiologyClass(x))", "(all x.(Textbook(x) -> AnnsBiologyClass(x)))", "all x y.((Textbook(x) & Ann(y)) -> Requirements(x,y))", "all x.(Textbook(x) -> RequiredInAnnsBiologyClass(x))", "all x y z.((Textbook(x) & Ann(y) & BiologyClass(z)) -> RequiredIn(x,y,z))", "All x.(Textbook(x) -> RequiredInAnnsBiologyClass(x))", "all x y.((Fruit(x,y) & BiologyClass(y)) -> Requirement(x,y))", "all x.((Textbook(x) & InBiology(x)) -> RequiredInAnn(x))", "all x y.((Textbook(x) & Ann (y)) -> RequiredInBiology(x,y))", "all x y.((Textbook(x) & BiologyClass(y)) -> Required(x,y))", "(all x.(Textbook(x) -> Requires(x,Ann)))", "all x y.((Textbook(x) & Ann(y)) -> BiologyClass(x))"]}
{"id": "enwn_validation_56", "nl": "You should share things with people in need.", "fol": "", "prediction": ["all x y.((Dear(x) & Person(y)) -> ShareThings(x,y))", "all x.(ToShareThings(x) -> (PersonInNeed(x) & Person(y)))", "all x y z.((Person(x) & Person(y) & Need(z)) -> Share(x,y,z))", "all x y.((Person(x) & Person(y) & InNeed(x,y)) -> Shares(x,y))", "exists x.(MeetPeople(x) & ShareThings(x) & Necessary(x))", "all x y z.((Sharing(x) & Person(y) & Need(z)) -> ShouldShare(x,y,z))", "all x y.((Person(x) & InNeed(x)) -> ShareThings(x,y))", "all x y.((Person(x) & Person(y) & InNeed(x)) -> ShareThings(x,y))", "all x y.((Person(x) & Needs(y)) -> SharesTeacher(x,y))", "all x y.((Finding(x) & Person(y)) -> Shares(x,y))", "all x y z.((Person(x) & Person(y) & InNeed(z)) -> ShareDings(x,y,z))", "all x y z.((Men(x) & Person(y) & Necessary(z)) -> SharesWith(x,y,z))", "all x y.((Person(x) & Person(y)) -> SharesTo(x,y))", "all x y.(((Person(x) & Person(y)) -> ShareThings(x,y))", "all x y.((Person(x) & Person(y)) -> Shares(x,y))", "all x y z.((Person(x) & Person(y) & Needy(z)) -> ShareThings(x,y,z))"]}
{"id": "enwn_validation_57", "nl": "Ann needs a textbook.", "fol": "", "prediction": ["(NeedsTextbook(Ann) -> NeedsTextbook(Ann))", "(Needs(Ann,Ann) & Textbook(Ann,Ann))", "All x.((Ann(x) & NeedsTextbook(x)) -> Calls(x,y))", "(NeedsTextbook(Ann,y))", "will need textbook.", "Ann NeedsTextbook(Ann)", "all x.(NeedsTextbook(x) -> AnnAnn(x))", "Ann NeedsTextbook(Ann)", "all x.(NewScrapbook(x) -> Needs(x))", "(NeedsTextbook(Ann)", "(NeedsTextbook(Ann))", "(NeedsTextbook(Ann,6))", "(NeedsTrainbook(Ann))", "Ann NeedsTextbook(Ann)", "NeedsTextbook(Ann)", "Ann NeedsTextbook(Ann)"]}
{"id": "enwn_validation_58", "nl": "Someone should share a textbook with Ann.", "fol": "", "prediction": ["all x y.((People(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x.((Else(x) & Ann(y)) -> ShareBooklet(x,y))", "all x y.((Programmatist(x) & Ann(y)) -> ShouldShare(x,y))", "all x y.((Man(x) & Ann(y)) -> SharesTextbook(x,y))", "exists x y.((Apploused(x) & Ann(y)) -> SharesBooklet(x,y))", "all x.((Man(x) & Ann((y) & ShareTextbook(x,y)) -> ShouldSharp(x,y))", "exists x y.((Booklet(x) & Ann(y)) -> ShouldShare(x,y))", "all x y.((Each(x) & Ann(y)) -> ShareTextbook(x,y))", "all x y.(((Product(y) & Ann(y)) -> IfAn(x,y))", "all x y.((Man(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x.((Man(x) & Ann(x)) -> ShareTextbook(x,Ann))", "all x y.((Man(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "exists x.(Editor(x) & Ann(x) & ShareTextbook(x))", "all x y.((Booklet(x) & Ann(y)) -> Share(x,y))", "all x y.((Person(x) & Ann(y)) -> ShareTextbook(x,y))", "all x y.((Person(x) & Ann(y) & ShareTextbook(x,y)) -> ShouldBeCovered(x,y))"]}
{"id": "enwn_validation_59", "nl": "Fern should share her textbook with Ann.", "fol": "", "prediction": ["all x y.((Fern(x) & Ann(y)) -> ShouldSettleTextbook(x,y))", "all x y z.((Fern(x) & Ann(y) & Textbook(z)) -> ShouldShare(x,z))", "all x y.((Fern(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "(SecondAnnUnderstanding(Fernand) & ShouldShareTextbook(Fernand))", "(Evens(Fern) & Ann(Ann))", "all x y.((Fern(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x y z.((Fern(x) & Textbook(y) & Ann(z)) -> ShouldShare(x,y,z))", "(See this \"Annex\" & Fern(Fern)))", "all x y.((Fern(x) & Ann(y)) -> SharesTextbook(x,y))", "(SharesTextbook(Fernand,Ann) -> ShouldSee(Fernand,Ann))", "all x y.((Fern(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x y.((Fern(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x y.(((Fern(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "Fern should share textbook with Ann.", "(All x.(Fern(x) -> ShareTextbook(x,Ann)))", "all x y.((Fern(x) & Ann(y)) -> ShouldShareTextbook(x,y))"]}
{"id": "enwn_validation_60", "nl": "Someone in a red BMW was waiting for the parking spot before George.", "fol": "", "prediction": ["all x.((RodBMWare(x) & WaitingForParkingSpot(x)) -> GeorgeWordsToPark(x))", "all x y z.((RedBMWare(x) & ParkingSpot(y) & George(z)) -> Waiting(x,y,z))", "all x y z.((RedBMWare(x) & WaitingForParkingSpot(x,y,z)) -> WasBeforeGeorge(y))", "all x y.((RedBimmer(x) & George(y)) -> WaitingForParkingSpot(x,y))", "all x.((BMWare(x) & Red(x)) -> WaitingForParkingSpot(x,George))", "all x y.((InCarbon(x) & Red(x)) -> WaitingForParkingSpot(x,y))", "all x y.((BMWare(x) & BMW(y)) -> WaitingForParkingSpot(x,y))", "all x y z.((BMWare(x) & RedBMWare(y) & ParkingSpot(z) & PreviewedThrough(x,z)) -> Waiting(y,z))", "all x y z.((Blue BMW(x) & Man(y) & (RaindBMWaton(z) | ParkingSpot(z))) -> WaitingFor(y,z)))", "all x y z.((Disney(x) & Red BMW(y) & ParkingSpot(z)) -> WaitingForWaiting(x,y,z))", "all x y.((RoseBMWare(x) & RedBMWare(y)) -> WaitingForParkingSpot(x,y))", "all x.((InRed BMW(x) & WaitingForParkingSpot(x)) -> GeorgeWord(x))", "all x.((Red BMW(x) & WaitingForParkingSpot(x)) -> GeorgeParksIn(x))", "all x y.((RedBMWare(x) & ParkingSpot(y,x)) -> Waiting(x,y))", "all x.(RedBMWare(x) -> WaitingForParkingSpot(x,George))", "all x y.((BirmType(x) & RedBMW3)) -> WaitingForParkingSpotToGeorge(y,x))"]}
{"id": "enwn_validation_61", "nl": "If a group of people is waiting for something, the people who were waiting earliest are first in line.", "fol": "", "prediction": ["all x.(AwaitingFor(x,y) -> FirstInLine(y))", "all x.(WastingForSignificant(x) -> FirstInLine(x))", "all x.((GroupOfPeople(x) & WaitingForSomething(x)) -> FirstInLine(x))", "all x.((Group(x) & WaitingFor(x)) -> FirstInLine(x))", "all x y.((Group(x) & WaitingFor(x,y)) -> FirstInLine(x))", "all x y.((Group(x) & Waiting(x,y) & Person(y)) -> FirstInLine(x,y))", "all x y.(WaitingForObject (x) & PeopleZeroWaiting(x)) -> FirstInLine(y))", "all x y.((Group(x,y) & WaitingFor(x,y)) -> FirstInLine(y))", "all x.((GroupOfPersons(x) & WaitingFor(x)) -> FirstInLine(x))", "all x y.((Group(x) & WaitingFor(x,y)) -> FirstInLine(x,y))", "all x y.((GroupOfPeople(x) & WaitingForSomething(x,y)) -> WaitingEarly(y))", "all x.((GroupOfPeople(x) & WaitingForSomething(x)) -> FirstInLine(x))", "all x y z.((Group(x) & Waiting(x,y) & Person(y) & WaitingOnce(y,z)) -> FirstInLine(z))", "all x y.((Group(x) & WaitingFor(x,y)) -> FirstInLine(y))", "all x.((GroupOfPeopleBeingWarningFor(x)) -> FirstInLine(x))", "all x.((GroupOfPersons(x) & WaitingFor(x)) -> FirstInLine(x))"]}
{"id": "enwn_validation_62", "nl": "You should let people ahead of you in line go first.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y) & InLine(x,y)) -> LetsGoFirst(x,y))", "all x y.((Person(x) & Person(y) & BeenWithinLine(x)) -> BeFirst(y,x))", "all x y.((Person(x) & Line(y)) -> LetsFirstGo(x,y))", "all x y.((Protection(x) & Person(y) & Before(x,y,x)) -> LetsBefore(x,y))", "all x.((Person(x) & Person(x) & OnLine(x)) -> LetsGoFirst(x))", "all x.((People(x) & AgainstInLine(x)) -> LetGoFirst(x))", "all x.((Person(x) & InLine(x)) -> LetStopFirst(x))", "all x y.((People(x) & Person(y) & LocatedInLine(x,y)) -> LetsGoFirst(x,y))", "all x y.((RightUp(x) & Person(y)) -> LetsGoFirst(x,y))", "all x.((People(x) & BeforeYou(x)) -> LetsGoFirst(x))", "all x y.((Person(x) & Person(y)) -> InLine(x,y))", "all x.(LetPeopleBefore(x,y) -> GoFirst(x,y))", "all x y z.((Person(x) & Person(y) & Line(z) & Way(x,z)) -> LetsGoFirst(x,y,z))", "all x y.((Distinct(x) & Person(y)) -> FirstLetGo(x,y))", "all x.((Person(x) & BeforeInLine(x)) -> ShouldGoFirst(x))", "all x y.((Person(x) & BeforeYou(x,y) & InLine(x,y)) -> LetsGoFirst(x,y))"]}
{"id": "enwn_validation_63", "nl": "When you take something, you prevent other people from taking it.", "fol": "", "prediction": ["all x.((Takes(x,y) & Takes(y,x)) -> -IsTakenByAllOthers(x))", "all x y.((Take(x) & Friend(y)) -> PreventsTake(x,y))", "all x y.((Takes(x) & Person(y) & Takes(y)) -> PreventsFromTaking(y,x))", "all x y.((Takes(x) & Person(y)) -> PreventsTaken(x,y))", "all x.(Takes(x,i) -> PreventsTakers(x,i))", "all x.((Takes(x) & PreventsTaken(x)) -> Takes(x))", "all x.(Takes(x,y) -> PreventsMorePeopleFromTaking(x,y))", "all x.(Take(x) -> PreventsOthersFromTaking(x))", "all x y.((ThanTake(x) & Takes(x)) -> PreventsTwoPeopleFromTaking(y))", "all x.(Takes(x,y) -> PreventsAnotherPersonFromTaken(x,y))", "all x y z.((Take(x,y) & Person(z)) -> PreventsTaking(x,z))", "all x y.((Takes(x) & Person(y)) -> PreventsTaking(x,y))", "all x.((Takes(x) -> PreventsNumbers(x))", "all x.(WorthTakes(x) -> PreventsOthersFromTaking(x))", "all x y.((Takes(x,y) & Person(y)) -> PreventsFromTaking(x,y))", "all x.((Takes(x) & PreventsTaken(x)) -> Takes(x))"]}
{"id": "enwn_validation_64", "nl": "George is about to take the parking spot.", "fol": "", "prediction": ["George is about to take the parking spot.", "all x y.((Grecoce(x) & ParkingSpot(y)) -> Taking(x,y))", "and takesParkingSpot(George,Spot)", "all x.(George(x) -> AboutToTakeParkingSpot(x))", "George is about to take the parking spot.", "all x.((George(x) & TakesParkingSpot(x)) -> HasParkingSpot(x))", "George has just taken parking spot.", "George is about totakeParkingSpot(George)", "\u201cGeorge\u201d will take parking spot.", "George is about to take the ParkingSpot.", "all x.((George(x) & TakeSpot(x)) -> Parks(x))", "George stands about toTakeParkingSpot(George)", "George ist all x y z.((ParkingSpot(x) & ParkingSpot(y) & ParkingSpot(z)) -> TakeSpot(x,y,z))", "George is about totakeParkingSpot(George,seo)", "George is about to TakePathToParkingSpot(George)", "George is about to take the parking spot."]}
{"id": "enwn_validation_65", "nl": "Someone in a red BMW is in line for the parking spot ahead of George.", "fol": "", "prediction": ["all x y.((Person(x) & RedBMWiFire BMW) & George(y)) -> InLineForParkingSpot(x,y))", "all x.((Mouse(x) & RedBMWare(x)) -> ParkingSpotBeforeGeorge(x))", "all x y.((Red BMW(x) & George(y)) -> LinesForParking(x,y))", "all x y.((Red BMW(x) & George(y)) -> InLineForParkingSpot(x,y))", "all x y z.((BMWei-BMWei(x) & RedBMWei(y)) -> (UpsideParkingPoint(z) & George(p)))", "(PersonInRedBMWare(p) -> InLineForParkingSpot(p)))", "all x y.((Knight(x) & Red BMW(y)) -> ParkPastVorGeorge(x,y))", "all x y z.((Red BMW(x) & George(y) & InLengthForParkingSpot(x,y)) -> AheadOf(x,z))", "all x y z.((BMW2 & Red BMW(x) & George(z) & InLineForParkingSpot(x,z)) -> -InLineSpot(x,y,z))", "all x y.((BMWare(x) & RedBMWare(y)) -> (ParkingSpot(z) & aheadOfGeorge(z)))", "all x.((RedBMWare(x) & George(x)) -> InLineForParkingSpot(x))", "all x.((BMWare(x) & Red(x)) -> ParkingSpotAheadOfGeorge(x))", "all x y.((RedBMWare(x) & George(y)) -> InLineForParkingSpot(x,y))", "all x.((Other(x) & Red BMW(x)) -> ParkingSpotAheadOfGeorge(x))", "all x y.((BMWare(x) & Red(x)) -> InLinePast(y,George))", "all x.((InRedBMWare(x) & George(x)) -> InLineForParkingSpot(x))"]}
{"id": "enwn_validation_66", "nl": "George should let the person in the red BMW take the parking spot.", "fol": "", "prediction": ["all x.((PersonInRed BMW(x) & ParksSpot(x)) -> LetsTakeSpot(x))", "(Greg and red BMW (Greg*) & TakesParkingSpot(Greg))", "all x y.((Bicycle(x) & Mechatron(y)) -> LetsParkerInRedBMWivlarTake(x,y))", "all x.(RoleIsLettingAnother(x,y) -> GeorgeInRed BMWTakeParkingSpot(y))", "all x y z.((George(x) & Person(y) & BMW(z)) -> TakesParkingSpot(x,y,z))", "all x.((Rod BMW(x) & ManColor(x)) -> TakesParkingSpot(x,George))", "-(LetsCaresSpot(George,RedBMWJ) & InCarBMWJ))", "all x.(((Person(x) & RedBMWF-I)) -> LetsTakeParkingSpot(x,y))", "all x.((RedBMW4Person(x) & TakeSpot(x)) -> GeorgeLetsHaveSpot(x))", "all x y z.((CardPresident(x) & RedBMWizlet(y) & George(z)) -> GivesParkingPlot(x,y,z))", "all x y z.((Man(x) & Red BMW(z) & George(x)) -> LetsTakeParkingSpot(x,z))", "George should let someone in red BMW take parking spot.", "all x.((George(x) & PersonInRed BMW(x)) -> LetsTakeParkingSpot(x))", "all x y.((Person(x) & Driving(y)) -> ShouldLetHeinrich(x,y))", "all x.((RoseBMWiMax) & PersonIn(x,y)) -> LetsTakeParkingSpot(x,y))", "all x.((PersonInRed BMW(x) & TakesParkingSpot(x)) -> George(x))"]}
{"id": "enwn_validation_67", "nl": "If George takes the parking spot, he will prevent other people from taking it.", "fol": "", "prediction": ["all x.(TakesParkingSpot(x) -> PreventsOthersFromTakingParkingSpot(x))", "all x.((Gerry(x) & TakesParkingSpot(x)) -> (Involves(x,y) & CanPreventDeath(x,y)))", "all x.((GabbelyTakesParkingSpot(x)) -> PreventsOtherPeopleFromTakingParkingSpot(x))", "all x.(TakingParkingSpot(x) -> PreventsNeighborsFromTakingSpot(x))", "all x.(TakesParkingSpot(x) -> PreventsMothersFromTakingParkingStart(x))", "all x.((GerryTakesParkingSpot(x) & TakesParkingStartup(x)) -> PreventsTakenPickup(x))", "all x y.((ParkingSpot(x) & George(y)) -> (MoreThanNotTakes(y,x) & -MoreThan(x,y)))", "(TakesSpot(George,Parking) -> PreventsTakingIt(George,Parking))", "all x.(TravelingSpot(x) -> PreventsTakingFromYou(x))", "all x.((Gerry(x) & TakesParkingSpot(x)) -> PreventsTakingParkingSpot(x))", "all x.((GregGreyTakesParkingSpot(x) & PreventsPathCompetition(g)) -> TakesPathCompetition(g))", "all x y.((ParkingSpot(x) & George(y)) -> PreventsTry(x,y))", "all x.(TakesParkingSpot(x) -> PreventsTakingDownParkingSpots(x))", "all x.(TakesParkingSpot(x) -> StopsOtherPeopleFromTakingSpot(x))", "all x.(TakesParkingSpot(x) -> PreventsAlterpeopleFromTakingParkingSpot(x))", "all x.(TakesParkingSpot(x) -> PreventsTaken(x))"]}
{"id": "enwn_validation_68", "nl": "George shouldn't take the parking spot.", "fol": "", "prediction": ["all x.((Gerry(x) & ParkingSpot(x)) -> -shouldTake(x,y))", "all x.((George(x) & ParkSpot(x)) -> -shouldTake(x,y))", "all x.((Greg_George) & ParksSpot(George)) -> -TakesSpot(George,Parking))", "isn'tparked(George)", "(-takesParkingSpot(George,George))", "all x.((George(x) & ParkingSpot(x)) -> Won'tTake(x,Gordon))", "-(GeorgeLearnsParkingSpot(George)?", "-TakesParkingSpot(George)", "-LeaveParkingSpot(George)", "all x.(George(x) -> ShouldNeighbor(x,ParkingSpot))", "-BorrowsParkingSpot(George)", "all x.((George(x) & -ParksSpot(x)) -> TakesSpot(x,y))", "all x.(Greorge(x) -> -TakeParkingSpot(x))", "all x.((Georgia(x) & -ShouldParkingSpot(x)) -> -ShouldParkParkingSpot(x))", "all x y.((ParkingSpot(x) & George(y)) -> -shouldTake(y,x))", "no, George shouldn'tTakeParkingSpot(George)"]}
{"id": "enwn_validation_69", "nl": "Embezzlement is theft or misappropriation of funds belonging to an employer.", "fol": "", "prediction": ["all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x,y) | Misappropriation(x,y)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Toller(x,y) | Misappropriation(x,y)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x,y) | Misappropriation(x,y)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x) | Misappropriation(x)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x) | Misappropriation(x)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x,y) | Misappropriation(x,y)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x,y) | MisappropriationOfFunds(x,y)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x) | Misappropriation(x)))", "all x.(Embezzlement(x) -> (TheftOfFunds(x) | MisappropriationOfFunds(x)))", "all x.(Embezzlement(x) -> (TheftOrMisappropriationOfFunds(x) & EmployerOfFunds(x)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Taxe(x,y) | Misappropriation(x,y)))", "all x.(Embezzlement(x) -> (TheftOfFunds(x) | MisappropriationOfFunds(x)))", "all x.(Embezzlement(x) -> (TheftOrMisappropriationOfFunds(x) | EmployerHasFunds(x)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x,y) | Misappropriation(x,y)))", "all x.(Embezzlement(x) -> (TheftOrMisappropriationOfFunds(x) & Employer(x)))", "all x y.((Embezzlement(x) & employer(y)) -> ((Theft(x,y) | Misappropriation(x,y))))"]}
{"id": "enwn_validation_70", "nl": "Using money allotted for one purpose for another purpose is misappropriation.", "fol": "", "prediction": ["all x y.((UsesMoneyAllottedFor(x,y) & Purpose(y)) -> Misappropriation(x))", "all x y.((Money(x) & AllocatedFor(x,y) & For(y,z)) -> Misappropriation(x))", "all x.((Misappropriation(x) & MoneyAllotted(x)) -> Misappropriation(x))", "all x.(UseMoneyAllottedForOnePurposeForAnotherPurpose(x) -> Misappropriation(x))", "all x y.((Money(x) & AllottedForMillennia(x) & Purpose(y)) -> Misappropriation(x))", "all x.((UsesMoreAllotted(x) & Use(x,OnePurpose)) -> Misappropriation(x))", "all x.((Money(x) & AllottedForOnePurpose(x) & AllottedForOtherPurpose(x)) -> Misappropriation(x))", "all x.((UsesMoney(x) & AllottedForOnePurpose(x) & AllottedForOtherPurpose(x)) -> Misappropriation(x))", "all x.((MoneyAllocatedForOnePurpose(x) & UsedForAnotherPurpose(x)) -> Misappropriation(x))", "(Misappropriation(MafiaSince(mafia,m) & AllottedFor(m),m))", "all x y z.((Machine(x) & MoneyAllotted(x,y) & Purpose(z)) -> Misappropriation(x))", "all x.((Money(x) & AllottedForOnepurpose(x) & AllottedForAnotherPurpose(x)) -> Misappropriation(x))", "all x y.(((Money(x) & Purpose(y) & AllottedFor(x,y)) -> Misappropriation(x))", "all x y z.((MoneyAlotted(x) & Purpose(y) & Purpose(z) & Uses(x,y,z)) -> Misappropriation(x))", "all x.((UsesMoneyAllotted(x) & AnotherPurpose(x)) -> Misappropriation(x))", "all x.((MoneyAllotted(x) & UsesForSamePurpose(x)) -> Misappropriation(x))"]}
{"id": "enwn_validation_71", "nl": "Tessa works as an accountant at her firm.", "fol": "", "prediction": ["(WorksAsAccountant(Tessa,Firm) & -WorksAsAccountant(TEssa,Firm))", "(WorksAtFixed(Tessa,Corporate) & AtFixed(Tessa,Company))", "all x y.((Tessa(x) & Firm(y)) -> WorksAsAccountant(x,y))", "(WorksAsAccountant(Tessa) | SheLawsAt(Tessa)))", "all x.((Tessa(x) & Accountant(x)) -> WorksAt(x,y))", "(WorksAsAccountant(Tessa) & & Firm(Tessa))", "(WorksAsAccountant(Tessa,Firm))", "(WorksAsEstatician(Tessa,Company) & AtCompany(Tessa))", "(WorksAsAccountant(Tessa) & Faculty(Tessa))", "(WorksAsAccountant(Tessa,Company))", "(WorksAsAccountant(Tessa,Faccountant,Firm))", "all x.((Tessa(x) & Firm(y)) -> WorksAsAccountant(x,y))", "-WorksAsAccountant(x) & firm@TessaBridge.com(Tessa(x))", "(WorksAsAccountant(Tessa,Firm))", "-TravelsAsAccountant(tessa,trenish)", "(WorksAsAccountant(Tessa) | WorkingAsAccountant(Tessa)))"]}
{"id": "enwn_validation_72", "nl": "A retiree is someone who has retired from employment and is no longer working.", "fol": "", "prediction": ["all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (Retired(x) & NoWorking(x)))", "all x.(Retiree(x) -> (Person(x) & RetiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (Retired(x) & Employee(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredFromEmployer(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredMember(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x y.((Retiree(x) & Person(y)) -> (RetiredFromEmployment(x,y) & -Working(y)))"]}
{"id": "enwn_validation_73", "nl": "Tessa withdrew a lump sum from her firm's retirement fund to buy herself a summer home.", "fol": "", "prediction": ["all x y.((Tessa(x) & RetirementFund(y)) -> WithdrewLumpSum(x,y))", "all x.((Tessa(x) & LumpSum(x)) -> WithdrewsToBuySum(x))", "all x.((Tessa(x) & LumpSum(x) & FromFieldRetirement(x) & BySummit(x)) -> BuysSummerHome(x))", "all x y z.((Tessa(x) & Firms(y) & RetirementFund(z)) -> WithdrawnSumMuchSum(x,y,z))", "all x.((Tessa(x) & WithdrewSum(x)) -> PurchasesSummerHome(x))", "all x.((Tessa(x) & LumpSum(x)) -> WithdrawsSum(x))", "(Robert and Tessa: WithdrewSumMilkSumToBuy(tessa))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementField(z)) -> Withdraws(x,y,z))", "all x y.((Tessa(x) & LumpSum(y)) -> WithdrewsBackstoy(x,y))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementSet(z)) -> WithdrewToBuySummerHome(x,y,z))", "all x y z.((Tessa(x) & LumpSum(y) & Firm(z)) -> WithdrewToBuy(x,y,z))", "all x y.((Tessa(x) & RetirementFund(y)) -> WithdrewSumToBuySheet(x,y))", "all x y z.((Tessa(x) & RetirementFund(y) & LumpSum(z)) -> Withdrew(x,z))", "all x y z.((Tessa(x) & LumpSumFromRetirementCast(x) & SummerHome(y) & Fund(z) & Withdrew(x,y)) -> Purchases(x,y,z))", "(SheWithdrew(Tessa,PunctSum))", "all x y.((Tessa(x) & Fund(y) & From(x,y)) -> WithdrawsKilogramSumToBuySheep(x,y))"]}
{"id": "enwn_validation_74", "nl": "Money in a company's retirement fund is intended to be paid out to retirees.", "fol": "", "prediction": ["all x y.((Company(x) & RetirementFund(y)) -> IntendedToPayToRetirees(x,y))", "all x.((CompanyRetirementFund(x) & PaidOutToRetirees(x)) -> InspiringRetirees(x))", "all x y.((Company(x) & Company(y)) -> (RetirementFund(x) & IntendedOutToRetirees(x,y)))", "all x y.((Company(x) & RetirementFund(y)) -> PayedOut(x,y))", "all x y.((Company(x) & Company(y) & RetirementFund(x)) -> IntendedForPayoutToRetirees(x,y))", "all x.(RetirementFund(x) -> PayableToRetirees(x))", "all x y.((Company(x) & RetirementFund(y)) -> IntendedToPayForRetiree(x,y))", "all x y.((Company(x) & RetirementFund(y)) -> IntendedToBePaidOutToRetirees(x,y))", "all x y.((Company(x) & RetirementFund(y)) -> PaidOutToRetirees(y))", "all x.((Payment(x) & CompanyRetirementFund(x)) -> PlannedBy(x,Retirees))", "all x y.((Company(x) & RetirementFund(y)) -> (PayedToRetirees(x,y)))", "all x y.((Company(x) & RetirementFund(y) & InCompany(x,y)) -> PaymentOn(y,Retirees))", "all x y.((Company(x) & RetirementFund(y)) -> (BilltoRetirees(p) & InField(x,y)))", "all x y.((Company(x) & RetirementFund(y)) -> InitiatedToBePaidOutToRetirees(y))", "all x.((Company(x) & RetirementFund(x)) -> IntendedForRetirees(x))", "all x y.((Company(x) & RetirementFund(y)) -> IntendedToBePaidOutToRetirees(x,y))"]}
{"id": "enwn_validation_75", "nl": "Tessa is not a retiree.", "fol": "", "prediction": ["-Retiree(Tessa,2019)", "(-Retired(Tessa))", "(-Retiree(Tessa))", "Tessa nabbedRetiree(n)", "-Retiree(Tessa)", "(-Retiree(Tessa))", "Tessa is notRetiree(te) -> (-Retiree(t) & -Retiree(x)))", "(-Retiree(Tessa))", "(-Retiree(Tessa))", "(-Retiree(Tessa))", "Tessa is notRetiree(Tessa)", "Tessa & -Retiree(tessa,t)", "Tessa is not a retiree.", "(Retiree(Tessa) nie).", "-Retiree(Tessa,2019)", "Tessa is not a retiree."]}
{"id": "enwn_validation_76", "nl": "Tessa bought herself a summer home with money from the firm intended for retirees.", "fol": "", "prediction": ["all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & IntentionalForRetirees(x,z)) -> Purchases(x,y,z))", "all x.((Tessa(x) & SummerHome(x) & Money(x) & SpecificallyDesignedForRetirees(x)) -> Purchased(x,x))", "all x y z.((Tessa(x) & SummerHome(y) & (Fixy) | Realm(z))) & Retiree(z)) -> Purchased(x,y))", "all x y.((Tessa(x) & SummerHome(y)) -> (BuysMoney(x,y) & DesignedForRetirees(x)))", "(PurchasedSummerHomeWithBonus(Tessa) & IntendedForRetirees(Tessa))", "all x y.((Tessa(x) & SummerHome(y)) -> WeIntendedForRetirees(x,y))", "all x y z.((Tessa(x) & SummerHome(y) & Money(z) & intendedForRetirees(y)) -> PurchasedBy(x,y,z))", "all x.((Tessa(x) & SummerHome(y)) -> PurchasedByRetirees(x,y))", "all x y.((Tessa(x) & SummerHome(y)) -> PurchasedWithEntryMoney(x,y))", "(BuysSummerHome(Tessa,Masons) & DesignedForRetirees(Tessa,Nation))", "all x y.((SummerHome(x) & Tessa(y) & Company(x,y) & IntendedForRetirees(y)) -> Purchased(y,x))", "(-TookMeGrant(Tessa,SummerHome) & WithFund(Tessa,Retirees))", "all x y.((Celebrity(x) & Tessa) & SummerHome(y) & DesignedForRetirees(x,y)) -> PurchasedWithMoney(x,y))", "all x y.((Tessa(x) & SummerHome(y) & InvestedInFund(x,y)) -> PurchasedOnlyForRetirees(x,y))", "all x.((Tessa(x) & SummerHome(x) & MoneyForRetirees(x)) -> Purchased(x,y))", "all x y z.((Chrysant(x) & SummerHome(y) & Money(z) & DesignedForRetirees(x,y)) -> BuyerWith(x,y,z))"]}
{"id": "enwn_validation_77", "nl": "Tessa bought herself a summer home with money from the firm that was not intended for her.", "fol": "", "prediction": ["(SoulHome(Tessa) | HomeToRun(Sheik)))", "all x y.(((RealMammal(x) & Tessa(y)) ->..ShadingHome(y)))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & InvestedIn(x,y,z)) -> Purchases(x,y,z))", "all x y.((Tessa(x) & SummerHome(y)) -> (Buyas(x,y) & MoneyFrom(x,y) & -IntendedFor(y)))", "(BuysYet(Tessa,SummerHome) & MoneyFrom(Tessa,SummerHome) & -IntendedFor(Tessa,SummerHome))", "all x y.((Tessa(x) & SummerHome(y)) -> (BuysSocialDear(x,y) & -InitialForUser(x)))", "all x y z.( (Essa(x) & SummerHome(y) & -InvestedFrom(x,z)) -> PurchasedWith(x,y,z))", "all x y.((Tessa(x) & SummerHome(y) & UnInitialBudget(x) & IntendedFor(x,y)) -> PurchasedWith(x,y))", "all x y.((Tessa(x) & SummerHome(y) & -IntendedFor(x,y)) -> Purchased(x,y))", "(WillItWork(Tessa) | WillItWork(Tessa)))", "all x y.((Tessa(x) & SummerHome(y)) -> PurchasedWithFund(x,y))", "all x y.((Tessa(x) & SummerHome(y)) -> BoughtWithFund(x,y))", "all x y z.((SummerHome(x) & Tessa(y) & Price(z)) -> (Buys(y,z) & -IntendedFor(y,z)))", "all x.((Tessa(x) & SummerHome(x)) -> (BuysWith(x,money) & -IntendedFor(x)))", "all x.((Tessa(x) & SummerHome(y) & MadeWithMoney(x,y)) -> Allowed(x,y))", "all x y.((Tessa) & SummerHome(y) & -IntendedFor(x,y)) -> PurchasedWithMoney(x,y))"]}
{"id": "enwn_validation_78", "nl": "Tessa misappropriated her firm's money.", "fol": "", "prediction": ["all x.((Tessa(x) & Firm(y)) -> MisappropriatedMoney(x,y))", "every year since the firm closed, all x.(Tessa(x) -> MisappropriatedMoney(x))", "all x y.((Tessa(x) & Firm(y)) -> MisappropriatedMoney(x,y))", "(LeadsGiveaways(Tessa,Fairy) & MisappropriatedMonet(tessa,biz))", "(MisappropriateMoney(Tessa,Company))", "(LastsMisappropriated(Tessa'sMoney(tee:tessa,t))", "all x y.((Tessa(x) & Firm(y)) -> MisappropriatedMoney(x,y))", "all x.(MisappropriatedMean(x) -> Tessa(x))", "(MisappropriatedMoney(Tessa) & Firm(Tessa))", "all x y.((Tessa(x) & Firm(y)) -> MisappropriatedMoney(x,y))", "(MisappropriatedMoney(Tessa) & Firm(Tessa))", "(MisappropriatedBudget(Tessa))", "(MisappropriatedMean(Tessa,Company) & MisappropriatedMent(Tessa,Company))", "Tessa misappropriated money with her firm.", "all x y.((Tessa's(x) & Firm(y)) -> MisappropriatedMoney(x,y))", "all x y.((Secretary(x) & Firm(y)) -> MisappropriatedMoney(x,y))"]}
{"id": "enwn_validation_79", "nl": "Tessa embezzled from her firm.", "fol": "", "prediction": ["(EmbezzledFrom(Tessa) | EmbezzledFrom(Tessa)))", "all x.((Tessa(x) & Firm(y)) -> EmbedsFrom(x,y))", "(EmbezzledFrom(Tessa,Firm))", "(EmbedsFrom(Tessa,Firm) & From(Tessa,Firm))", "(EmbezzledFrom(Tessa) | Firm(Tessa)))", "(EmbeddedFrom(Essa) -> Tessa(TE))", "(embarkedFromHerFirm(Essa) -> Encrypted(e)))", "all x.(Embed(x,Essa) -> EmblemedFrom(x,Essa))", "all x y.((Tessa(x) & Firm(y)) -> EmcediedFrom(x,y))", "(EmbezzledFrom(Tessa,firm))", "all x.(EmbezzledFromFirm(x) -> TessaDisregard.", "all x.(Embezzled(x) -> Tessa(y))", "all x y.((Lawyer(x) & Tessa(y) & Firm(y)) -> Emboyed(z))", "(EmbezzledFrom(Tessa) & Firma(Tessa))", "(EmbezzledFrom(Tessa) & From(Tessa))", "all x.(EmbezzleDamage(x) -> TessaBetweenShellAndFirm(x))"]}
{"id": "enwn_validation_80", "nl": "Leading others to think someone was responsible for something is shifting the blame.", "fol": "", "prediction": ["all x.(LeadingOther(x) -> ShiftingBlood(x))", "all x.(LeadsOthersToThink(x,Supply(x) -> ShiftingBlood(x))", "all x.((LeadsOthersToThink(x,PersonnelResponsible(x)) -> ShiftsBlood(x))", "all x y.((LeadsOthers(x,y) & LooksResponsible(y)) -> ShiftingBlood(x))", "all x.((LeadingOthersToThinkPerson(x) & ResponsibleFor(x)) -> ShiftingBlood(x))", "all x.((Other(x) & LeadsToThoughtPoorResponsible(x)) -> ShiftingBully(x))", "all x.((LeadingOthersToThoughtInHasResponsible(x)) -> ShiftingBlood(x))", "all x.((LeadsOthersToThinking(x) & RepresentsResponsibility(x)) -> ShiftsBlood(x))", "all x y.((Other(x) & Person(y) & Responsible(y)) -> ShiftingBlame(x,y))", "all x y.((LeadsOthersToThought(x,y) & Person(y)) -> ShiftsBlood(x))", "all x y.((LeadsOthersToThinkPersonResponsible(x,y)) -> ShiftsBlood(x))", "all x y.((LeadsOthersToResponsibility(x,y) & Person(y)) -> ShiftsBlood(x))", "all x.((LeadsSomeoneToThoughtSomeoneResponsibleFor(x)) -> ShiftingBlood(x))", "all x y.((LeadingAsSelf(x) & Person(y) & ThinkingResponsibleFor(x,y)) -> ShiftingBlood(x,y))", "all x.((LeadingOthers(x) & ThinksProblemRelevant(x,y)) -> ShiftingBlood(x))", "all x y.((LeadingOthersToThought(x) & SomeoneResponsible(x,y)) -> ShiftingBlood(x))"]}
{"id": "enwn_validation_81", "nl": "When the campus cops interviewed Nate after the fire, he said he saw Jeff drop a cigarette.", "fol": "", "prediction": ["all x y.((CampusPolice(x) & Nate(y)) -> InterviewedAfterFire(x,y))", "all x y z.((StudioPolice(x) & Nate(y) & Fire(z) & AssociatedWith(x,y,z)) -> (WhippedCigarette(y) & Saw(a) & Drop(a)))", "all x y z.((CampusPolice(x) & Nate(y) & Fire(z) & InterviewedAfter(y,z)) -> (SatisfiedWith(y,z) & DropsCigarette(y,x)))", "all x.((CampusCopsInterviewer(x) & WoodruffFire(x)) -> (DropsCigarette(x) & NateCitizen(x)))", "all x y z.((CampusPolice(x) & Nate(y) & Fire(z) & Interview(y) & HearsVoice(y,z)) -> SeesWildlife(y,z))", "all x y z.((CampusCop(x) & NateCitizen(y) & Fire(z) & Interviewed(x,y,z)) -> (Drops(y,z) | Drops(z,y))))", "all x y.((CampusPolice(x) & Nate(y) & InterviewedOnFrontOfFire(x,y)) -> SawJeffDropCigarette(y,z))", "all x y.((CampusPolices(x) & MeetsNate(y)) -> DropsCigarette(y))", "all x y z.((CampusCops(x) & Nate(y) & Fire(z) & Interviewed(x,y,z)) -> (SeenDroping(y,z) | WitnessedSickness(y,z))))", "all x y.((CampusPolice(x) & CampusPolice(y) & InterviewedNateAfterFire(x,y)) -> SawBenjaminDropCig(x,y))", "all x y.((CampusPolice(x) & StupidOps(y) & InterviewsNate(x)) -> (LowsCigarette(x,y) & Jeff(x)))", "all x y z.((CampusPolice(x) & NateAfterFire(y) & CampusPolice(z) & Interviews(x,z)) -> (SpokenJeff(x,y) & DropsCig(y,z)))", "all x y.((CampusPolice(x) & Nate(y) & InterviewedAfterFire(x,y)) -> SawJeffDropCigarette(y,x))", "all x y.((CampusPolice(x) & Exit(y) & Nate(z)) -> SawJeff(z,x))", "all x y.((CallsOffCampus(x) & Nate(y)) -> (InterviewsSeason(y,x) & DropsCigarette(y,x)))", "all x y.((CampusPolice(x) & Nate(y)) -> InterviewedAfterFire(y,x))"]}
{"id": "enwn_validation_82", "nl": "Telling someone that something happened leads them to believe it happened.", "fol": "", "prediction": ["all x y.((Speech(x) & Someone(y) & Tells(y,x)) -> BelievesSituation(y,x))", "all x y.((Tells(x,y) & Person(x)) -> Believes(x,y))", "all x.(TellsPerson(x) -> Happened(x))", "all x y z.((ToxicRing(x) & Person(y) & Event(z)) -> Believer(x,y,z))", "all x y.((TellsPerson(x,y) & Happened(y)) -> Believes(x,y))", "all x y.((Person(x) & Tells(x,y)) -> PeopleCreditAccepted(x,y))", "all x y.((Listens(x,y) & Someone(y)) -> BelievesProgressOf(y,x))", "all x.((TellsPerson(x) & Happened(x)) -> BelievesItStopped(x))", "all x y.((Tells(x,y) & Person(y) & Happened(y)) -> Believes(y,z))", "all x y.((Significant(x) & Person(y) & Happened(x)) -> Believes(x,y))", "all x y.((Tells(x,y) & Someone(x)) -> BelievesSituation(x,y))", "all x y.((Tells(x,y) & Person(y)) -> Believes(x,y))", "all x.((TellsPerson(x) & Happened(x)) -> LeadsToCredit(x))", "all x y z.((Ancient(x) & Person(y) & Happened(z)) -> Believes(y,z))", "all x.((Stelling(x,y) & Happened(x)) -> Believes(x,y))", "all x.((TellsPerson(x) & Happened(x)) -> BelievesCaused(x))"]}
{"id": "enwn_validation_83", "nl": "Dropping a cigarette can cause a fire.", "fol": "", "prediction": ["all x.(DroppingCigarette(x) -> CanCauseFire(x))", "all x y.((Cigarette(x) & Drop(y)) -> CausesFire(x))", "all x.(DroppingCigarette(x) -> CanCauseFire(x))", "all x.((Cigarette(x) & Drop(x)) -> CanCauseFire(x))", "all x.((Cigarette(x) & Dropped(x)) -> CausesFire(x))", "all x y z.( (Cigarette(x) & Cigarette(y) & Fire(z) & Drops(x,y)) -> CanCause(x,z))", "all x.(Dropping(x) -> CanCauseFire(x))", "all x.(DroppingCigarette(x) -> CanCauseFire(x))", "all x.(DroppingCardiocig(x) -> CanCauseFire(x))", "all x.(Cigarette(x) -> (Drops(x,cigarette) & CanCauseFire(x)))", "all x.(DroppingCigarette(x) -> CausesFire(x))", "all x.((Cigarette(x) & Drops(x)) -> CausesFire(x))", "all x.(DroppingCigarette(x) -> CanCauseFire(x))", "all x y.((Cigarette(x) & Dropping(y)) -> CanCauseFire(x,y))", "all x y.((Cigarette(x) & Drop(y)) -> CausesFire(x))", "all x y.((Cigarette(x) & Dropped(x,y)) -> CanCauseFire(x))"]}
{"id": "enwn_validation_84", "nl": "Letting someone else take the blame for your actions is wrong.", "fol": "", "prediction": ["all x y.((LetSurface(x,y) & Person(y) TakeBlood(x,y)) -> IsWrong(x))", "all x.(LetsOtherTakeBlood(x) -> Wrong(x))", "all x y.((LestPersonTakeBlood(x,y) & Action(y)) -> IsWrong(x,y))", "all x.(LetSayBlood(x,y) -> Worst(x))", "all x y.((LetSomeoneTakeBlood(x) & Action(y)) -> IsWrong(x,y))", "all x.(LetsFacileToOther(x) -> (Wrong(x) & LettingToOtherGo(x)))", "all x y.((LetAnotherTakeBlood(x,y) & Action(y)) -> Wrong(x))", "all x y z.((Cause(x,y) & Person(z)) -> TakeCause(x,z))", "all x.(LetLestThouAnotherTakeBlood(x) -> Wrong(x))", "all x.(LetsOtherTakeBlood(x) -> Right(x))", "all x y.((LutsAnotherTakeBlood(x) & Actions(y)) -> IsWrong(x))", "all x.((LettingSomeoneTakeBlood(x) & PersonTakingBlood(x)) -> False(x))", "all x.(LettingActionsMann(x) -> Wrong(x))", "all x.(LetsAnotherTakeBlood(x) -> IsWrong(x))", "all x.(LettingAnotherTakeBloodForActions(x) -> Wrong(x))", "all x y.((LetsAnotherTakeBlood(x) & Person(y)) -> Wrong(x))"]}
{"id": "enwn_validation_85", "nl": "Nate dropped the cigarette that started the fire.", "fol": "", "prediction": ["-SpokensPizza(Nate)", "Nate dropped the cigarette that started fire.", "Nate dropped the cigarette that started the fire(Nate,2013))", "all x.((Nate(x) & Cigarette(x,y) & StartingFire(y,x)) -> Dropmed(x,y))", "Nate dropped the cigarette that started fire.", "(DropSlave(Nate) & Cigarette(Nate,Fire))", "all x.((Nate(x) & Cigarette(x) & Fire(x)) -> Dropped(x))", "All x y.((Nate(x) & Cigarette(y) & StartsFire(y)) -> Drops(x,y))", "all x.((Nate(x) & Cigarette(x)) -> Dropped(x,x))", "-(Nate(Nate) & Cigarette(Nouveau))", "Nate dropped(nate,moaning) cigarette(n,f))", "(Place(Nate) & Cigarette(Nate) & (StartedFire(Nate) | -StartedFire(Nate)))", "Nate LostCigarette(Nate) & StartedFire(Nate))", "Nate dropped the cigarette that started the fire.", "Nate dropped the cigarette that startedfire(Nate)", "Nate dropped the cigarette that started the fire."]}
{"id": "enwn_validation_86", "nl": "Nate led the campus cops to believe that Jeff dropped a cigarette before the fire.", "fol": "", "prediction": ["(LeadsCampusPolicesToThoughtJeffLayedCigarette(Jeff,Fire))", "all x y.((Staff(x) & CampusPolice(y)) -> (LeadsToCitizens(x,y) & JeffLoadedCigarette(x,y)))", "all x y.((StudentPolice(x) & Jeff(y)) -> DroppedCigaretteEarly(y,x))", "all x y z.((CampusPolice(x) & Nate(y) & Cigarette(z)) -> DroppedBeforeFire(y,z))", "all x y.((CampusPolice(x) & Nate(y)) -> (LedCitizensToKnow(y,x) & JeffLastsCigaretteBeforeFire(y,x)))", "\u201cNate, led CampusPolicesToThink(Nate,IgnitesCigarette,Jenny)\u201c", "all x y z.((Nate(x) & CampusPolice(y) & CigaretteCube(z)) -> (LightnedByJeff(x,y) & DroppedByFire(x,z)))", "all x y.((StudentPolice(x) & Jeff(y)) -> (LightedCigarette(x,y) & Dropped(y,x)))", "all x y z.((Nate(x) & CampusPolice(y) & Cigarette(z,x)) -> (LeadsToLeisure(x,y,z) & JeffLost(z,z)))", "all x y.((Nate(x) & CampusPolice(y)) -> (LivedBy(x,y) & Believed(x,y)))", "all x y.(((StudentPolice(x) & NateLightsToGlaubeCigarette(y)) -> DroppedBeforeFire(y,x))", "all x y.((CampusPolice(x) & CampusPolice(y) & Nate(z) & DroppedCigarette(z)) -> Believes(x,z))", "all x y z.((Nate(x) & CampusPolice(y) & Cigarette(z) & DroppedBeforeFire(x,z)) -> LeadsToChallenge(x,y,z))", "all x y.((CampusPolice(x) & Nate(y)) -> (LeadsToBug(x,y) & JeffDropsCigarette(y)))", "all x y z.((Nate(x) & CampusPolice(y) & Smoke(z)) -> CROSSED(x,z))", "all x y.((CampusPolice(x) & Nate(x)) -> (LeadsToCitizenDependent(x,y) & Dropped(y,x)))"]}
{"id": "enwn_validation_87", "nl": "Nate led the campus cops to believe that Jeff started the fire.", "fol": "", "prediction": ["all x.((Nate(x) & CampusPolices(y)) -> (LeadsToKnow(x,y) & JeffStartedFire(x)))", "(LedPolice(Nanete,Campus) -> JeffStartedFire(Naite))", "all x y.((CampusPolice(x) & Nate(y)) -> LeadsToGuessFresh(y,x))", "all x y z.((Nate(x) & CampusPolice(y) & Fire(z)) -> ledToCreate(x,y,z))", "all x y.((Professor(x) & Campus(y) & Jeff(x)) -> FeltInFire(x,y))", "all x y.((CampusPolice(x) & Jeff(y)) -> LedToGiveFive(x,y))", "all x y.((CampusPolice(x) & Nate(y)) -> (LedStopsFire(y,x) & JeffStartedFire(y,x)))", "all x y z.((Nate(x) & CampusPolice(y) & Jeff(z)) -> LEADS(x,j))", "all x.((Nate(x) & CampusPolices(x) & JeffStartedFire(x)) -> LedToThief(x))", "all x y z.((Person(x) & CampusPolice(y) & Jeff(z)) -> (Leads(x,y) & Believes(x,z)))", "all x y.((Nate(x) & CampusPolices(y)) -> (LeadsToGiveBugToStartFire(x,y)))", "all x y.((Scripps(x) & Campus(y)) -> JeffStartedFire(x,y))", "all x y.((CampusPolice(x) & Nate(y)) -> (LeadsToKnow(y,x) & JeffStartedFire(y)))", "all x y.((Fresh(x) & CampusPolice(y) & NateLeapedTheMovement(x,y)) -> JeffStartedFire(x,y))", "(CampusPolice(Nate: JeffStartedFire(Nate))", "(LeadsStudentPoliceToGiftFrederick(Nate,Freddy) & JeffStartedFire(Nate,Freddy))"]}
{"id": "enwn_validation_88", "nl": "Nate shifted the blame for the fire to Jeff.", "fol": "", "prediction": ["-(NHE) & Jeff (Fire) & SpoilsMildnessOn((Nate,Fire)))", "all x y.((Nate(x) & Jeff(y)) -> ShiftsCauseTo(x,y))", "(all x y.((Nate(x) & Fire(y)) -> ShiftsBloodTo(x,y)))", "(All x.(Nate(x) -> ShiftsBlameTo(x,Fire)))", "(Nate & JeffCause(Nate,fire))", "all x y.((Nate(x) & Jeff(y)) -> ShiftsBloodForFire(x,y))", "All x y.((Nate(x) & Jeff(y)) -> ShiftedBloodTo(x,y))", "all x.(Nate(x) -> shiftedBulletin(x,Jeff))", "(ShiftingBloodTo(Nate,News))", "(News(Nate) & FireFire(Jeff))", "all x y.((Nate(x) & Jeff(y)) -> ShiftsBully(x,y))", "(ShiftsBloodToFire(nate) & Jeff(e))", "all x y z.((Nate(x) & Jeff(y) & Fire(z)) -> ShiftedBloodTo(x,y))", "-Nate shifted blame to Jeff.", "-(Nate'sStolenBlood(n) & Jeff(e))", "all x.(Nate(x) -> ShiftsBlood(x,y))"]}
{"id": "enwn_validation_89", "nl": "It would be wrong for Nate to let someone else take the blame for starting the fire.", "fol": "", "prediction": ["all x.(ThanNate(x) -> (OldDoor(x) & StartsFire(x)))", "all x.((Nate(x) & LetsAttorneyTakeBlood(x)) -> -ChallengeForFire(x))", "all x y.((Nate(x) & Name(y) & StartedFire(y)) -> Wrong(x,Y))", "all x y.((Nate(x) & Source(y)) -> LetsNoonePutBond(x,y))", "all x.((Nate(x) & LetsPerson(x) & StartsFire(x)) -> Wise(x))", "all x.((Nate(x) & TakesBlood(x)) -> Unright(x))", "all x.((Nate(x) & StopsFire(x)) -> LetsPersonTakeBlood(x))", "all x y.((Nate(x) & Person(y) & FromStopFire(x,y)) -> WorstToLeaveBreatheTo(x,y))", "all x y.((Nate(x) & Fire(y)) -> LetsSomeoneTakeBlood(x,y))", "all x y.((Nate(x) & Someone(y)) -> NorCauses(x,y))", "(It\u2019s NotSimilarToNate(Gestapo,NoNate) & LetsOthmanTakeBlood(Nate))", "all x y.((Nate(x) & Someone(y)) -> LetTheMovementOfFireTakenBy(x,y))", "all x.((Nate(x) & Nate(y)) -> LetsBattleStart(x,y))", "all x.((Nate(x) & TakesBlood(x)) -> -IsAnotherForFire(x))", "all x.((Nate(x) & LetsSomeone(x)) -> StartsFire(x,n,a))", "all x.((Nate(x) & TakesBlood(x)) -> Wrong(x))"]}
{"id": "enwn_validation_90", "nl": "Nate should not have shifted the blame for the fire to Jeff.", "fol": "", "prediction": ["-(NateLocatedBully(Nate,Fire,Fire) & JeffLocatedBully(Nate))", "-ShiftsBloodToJeffrey(Nate)", "has to have kept the fire blaming Jeff for all x.(Nate(x) -> -ShiftedBearByFire(x))", "all x y.((Nate(x) & Jeff(y)) -> -ShiftedBattleTo(x,y))", "all x.(NateNutsBloodToJeff(x) -> -ShiftedBlameToFire(x))", "(-shiftedBoyBiteToFireToJeff))", "(-ShiftedBulletinToJeff(Nate))", "the fire ruffled in Nate's direction - and Jeff had to shift blame to Nate.", "is to the fact that Nate(TM) is not shifting blame to Jeff(TM)", "-ShiftsBreathToJeff(Nate,Fire)", "all x y.((Nate(x) & Jeff(y)) -> -SpokesBloodTo(x,y))", "all x.(Nate(x) -> -ShiftedBlameToJeff(x))", "I agree with Nate and Jeff about \"NoSharpBattle(nt] & Fire(e) & -SwungBreathToJenny(Nate,e))", "all x.(Nate(x) -> -ShiftGlamyToFire(x))", "all x.(Nate(x) -> -ShiftsBlameToJeff(x))", "(Note: Nate ShouldNotShiftBlameToJeff) & Fire(Nate))"]}
{"id": "enwn_validation_91", "nl": "Taking something that doesn't belong to you is wrong.", "fol": "", "prediction": ["all x.((Takes(x,y) & -BelongsTo(y,x)) -> Fehlens(x))", "all x.((Takes(x,y) & -BelongsTo(x)) -> IsWrong(x))", "all x.((Taking(x) & -BelongsTo(x)) -> IsWrong(x))", "all x.((Takes(x,y) & -BelongsTo(y)) -> Wrong(x))", "all x.((Element(x) & -BelongsTo(x)) -> IsWrong(x))", "all x.((Takes(x,y) & -BelongsTo(x,y)) -> Wrong(x))", "all x.(UnfortunatelyWeak(x) -> (TakesProductOfNotBelongsTo(x) & Wrong(x)))", "all x y.((TakingWhat(x) & -BelongsTo(x)) -> Wrong(x))", "all x y.((Person(x) & Act(y) & -BelongsTo(x,y)) -> Wrong(x))", "all x.((Takes(x) & -BelongsTo(x)) -> Wrong(x))", "all x.((Takes(x,y) & -BelongsTo(y)) -> Unright(x))", "all x.((Taking(x,y) & -BelongsTo(y)) -> Wrong(x))", "all x.((TakesWhatIs(x) & -BelongsTo(x)) -> Worst(x))", "all x.((Takes(x,y) & -BelongsTo(x,y)) -> Worst(x))", "all x.((IsAnotherIsNeighborhood(x)) -> IsWrong(x))", "all x.((IsNeighboring(x) & TakesQuickly(x)) -> Wrong(x))"]}
{"id": "enwn_validation_92", "nl": "The TV belonged to the owners of the AirBNB Mike was staying at.", "fol": "", "prediction": ["-OthersOfAirBNB(TV)", "all x.(TVElementsAirBNB(x) -> Owners(x))", "belongedToAirBNB(TV) & OriginallyAtAirBNB(TV) & Staying(TV,AirBNB))", "all x y.((Television(x) & AirBNB(y)) -> BelongedToOwner(x,y))", "(MikesAirBNB(TV) -> BelongedTo(TV,AirBNB))", "all x.(TVBelongedToAirBNBMike(x) -> StayingAt(x))", "all x.(Television(x) -> BelongedToAirBNBOwner(x))", "all x.(TVBelongedToAirBNB(x) & OwnersOfAirBNB(x,y))", "all x y.((Television(x) & AirBNBBit(y)) -> BelongedToOwners(x,y))", "all x.(TV(x) -> BelongedToAirBNB(x))", "all x.(TV(x) -> BelongsToOwnersOfAirBNB(x))", "all x y.((TV(x) & AirBNB(y) & StayedAt(x,y)) -> BelongedToOwners(x,y))", "All x y.((TV(x) & AirBNB(x) MikeStayedAt)) -> OwnersOn(x,y))", "all x y.((TV(x) & AirBNB(y) MikeStayed(x,y)) -> BelongedToOwnersOf(x,y))", "all x.(TV(x) -> (AirBNB(x) & BelongedToOwners(x)))", "all x y z.((TV(x) & AirBNB(y) & Mike(z)) -> BelongedToOwners(x,y))"]}
{"id": "enwn_validation_93", "nl": "You shouldn't help someone do something wrong.", "fol": "", "prediction": ["all x.(Don'tHelpAlone(x) -> DoThanWrong(x))", "all x.((Helps(x) & Person(x)) -> -Helps(x,y))", "all x y.((Guide(x,y) & Person(y)) -> -Help(x,y))", "(or,HelpSomeone(You) -> -HelpDoOtherThanDo(You))", "all x.(AboutHelping(x,y) -> \"DoomedToWrong(y)\")", "all x.((Helps(x,e) & Person(x)) -> -Help.(e))", "all x y.((Helps(x,y) & Person(y)) -> -HoldsDoing(x,y))", "all x y.((HelpFun(x) & Person(y)) -> -Help(x,y))", "all x.((Helper(x) & Person(x)) -> -HelpShowDoing(x))", "all x.((ShowsWhat(x) & Helps(x)) -> FalseDoing(x))", "all x.((HelpsPerson(x) & Wrong(x)) -> -HelpsPerson(x))", "all x.((Helps(x,y) & Person(y)) -> -HelpsDoDistance(x,y))", "all x.(((HelpPerson(x) & Problem(x)) -> -HelpPerson(x))", "-CanHelpDoWrong(x)", "all x.(YouHasLessThan(x,y) -> -HelpDoWhat(x,y))", "all x y.((HelpPerson(x) & HelpDo(y,x)) -> -HelpDo(x,y))"]}
{"id": "enwn_validation_94", "nl": "Tim helped Mike carry the TV out to his car.", "fol": "", "prediction": ["All x y z.((Tim(x) & TV(y) & Car(z)) -> HelpedCarryOutTo(x,y,z))", "(HelpedCarryBoxToCar(Time,TV) & OutToCar(Tim,TV))", "all x y z.((Tim(x) & TV(y) & Car(z)) -> CarriedOutTo(x,y,z))", "(HelpedCarryTVOutToCar(Tim))", "All x y.((Tim(x) & Mike(y)) -> HelpedCarryTVOutToCar(y,x))", "all x y.((Tim(x) & Mike(y)) -> HelpedCarryTVOut(x,y))", "all x y z.((Time(x) & Mike(y) & Car(z)) -> CarriedOut(y,x,z))", "all x y z.((Tim(x) & Television(y) & Car(z)) -> HelpedCarry(x,y,z))", "all x y z.((Tim(x) & TV(y) & Car(z)) -> CarriesTo(x,y,z))", "all x y z.((Tim(x) & TV(y) & Car(z)) -> CarriedOutTo(x,y,z))", "Tim helped carry TVToCar (ToMike) & PoweredTVToCar(Mike))", "all x y.((Tim(x) & Mike(y) & Car(y)) -> HelpedCarryTelevision(x,y))", "all x y.((Tim(x) & WatchTV(y)) -> HelpedCarryToCar(x,y))", "all x y z.((Tim(x) & TV(y) & Car(z)) -> HelpedCarry(x,y,z))", "all x y z.((Tim(x) & TV(y) & Car(z)) -> HelpedCarry(x,y,z))", "Tim & MikeCarriedOutTelevisionToCar(Tim)"]}
{"id": "enwn_validation_95", "nl": "It would be wrong for Mike to take the TV.", "fol": "", "prediction": ["It would be wrong for Mike to takeTV.", "all x.((Mike(x) & TakesTV(x)) -> Drunken(x))", "(-MikeTakesTV(Mike) & WouldBeWrong(Mike))", "all x.(ItWrongForMikeToTakeTV(x))", "all x.(Television(x) -> -FogPotential(x))", "It would be wrong for Mike to takeTV.", "-WrongForMikeToTakeTV(Mike)", "exists x.(Mike(x) & TakesTV(x))", "all x.((Mike(x) & TakesTV(x)) -> IsWrong(x))", "all x.(Wrong(x) -> TakesTV(x))", "it would be wrong for Mike to take TV.", "all x.(ItWrongForMikeToTakeTV(x))", "it would be wrong for Mike to take the TV.", "-WrongForMikeToTakeTV(Mike)", "-WrongToTakeTV(Mike)", "-(PoorMike(MP1) & TakesTV(MP3)))"]}
{"id": "enwn_validation_96", "nl": "It would be wrong to help Mike take the TV.", "fol": "", "prediction": ["all x.((HelpTakeTV(x) & Mike(x)) -> Irresponsible(x))", "(Its WorstToHelpTakeTV(Mike))", "all x.((HelpMikeTakeTelevision(x) & Idiot(x)) -> Wrong(x))", "all x.((HelpsTakeTV(x) & Untrue(x)) -> -HelpsTakeTV(x))", "all x.(IldrisibleToHelpMikeTakeTelevision(x) -> IllAskTelevision(x))", "all x.((HelpTakeTV(x) & Mike(x)) -> Irresponsible(x))", "all x.((HelpsMikeTakeTelevision(x)) -> Irresponsible(x))", "(ItWrongToHelpMikeTakeTV(Mike,TV))", "all x.((Mike(x) & TakesTV(x)) -> Unjust(x))", "(WrongToHelpMikeTakeTV(Mike,TV))", "-WrongToHelpTakeTelevision(Mike)", "all x.((HelpsTakeTV(x) & Mike(x)) -> Irresponsible(x))", "all x.((HelpsStepTV(x) & Mike(x)) -> False(x))", "all x.((Mike(x) & TakeTelevision(x,y)) -> Irresponsible(x,y))", "all x.((Mike(x) & -TakesTV(x)) -> BadPosition(x))", "-WrongToHelpTakeTelevision(Mike)"]}
{"id": "enwn_validation_97", "nl": "Tim shouldn't have helped Mike take the TV.", "fol": "", "prediction": ["-helpedTakeTV(Tim,Mike)", "-helpedTakeTV(Tim)", "Tim shouldn't have helped Mike taketheTV.", "(-Handled(Tim) & TakesTV(Tim))", "-(HelpedTakeTV(Tim,Mike) | HelpedTakeTV(Tim,Mike)))", "-HelpedTimTakeTV(Tim)", "all x.((Tim(x) & Mike(x)) -> -HelpedTakeTelevision(x,Tim))", "-AssistedMikeTakeTV(Tim)", "Oops.", "-(HelpedTakeTV(Tim) & Mike(Tim))", "-(LeadsTimTakeTV(Tim) & Mike(Tim)))", "is an irate person.", "no,(Tim(Tim) & Mike(Tim))", "(-(HelpedTimTakeTV(Tim) & -HelpedMikeTakeTV(Tim)))", "(Don'tHelpMikeTakeTV(Tim) & Tim-HasHelpedAidTakeTV(Tim))", "-IloquentTimSteep(Tim)"]}
{"id": "enwn_validation_98", "nl": "The right thing to do is whatever results in the least harm.", "fol": "", "prediction": ["all x.(RightThingToDo(x) vs.LeastHarm(x))", "all x.((RightThing(x) & -LittleHarm(x)) -> RightDoing(x))", "all x.((RightThingToDo(x) & ResultLeastHarm(x)) -> RightThing(x))", "all x.((RightThing(x) & ResultLastHarm(x)) -> RightWorst(x))", "all x y.((HasLessHarm(x,y)) -> RightThing(x))", "all x.((RedThing(x) & leastHarm(x)) -> RightThan(x))", "all x.(RightThing(x) -> ResultsInLeastHarm(x))", "all x.((RightThingToDo(x) & WorstDamage(x)) -> ResultsInLeastHarm(x))", "all x.((WhateverResultsInLeastHarm(x) & RightThingToDo(x)) -> LeftOfHarm(x))", "all x.((CorrectThing(x) & TheLeastHarmResult(x)) -> RightThing(x))", "all x.(RightThing(x) -> ResultInLeastHarm(x))", "all x.((Work(x) & ResultLeastHarm(x)) -> RightThingToDo(x))", "all x.(RightThingToDo(x) -> (SameResultSinsLeastHarm(x)))", "all x.((Treatment(x) & InLeastHarm(x)) -> RightThan(x))", "all x.((IsLikelestHarm(x) & RightThing(x)) -> ResultIn(x,y))", "all x.(RightThing(x) -> (ResultsInLeastHarm(x)))"]}
{"id": "enwn_validation_99", "nl": "If you don't push the old lady, the truck will hit her.", "fol": "", "prediction": ["all x.((DoNotPushOldLady(x) & Truck(x)) -> HitsHer(x))", "all x.((DoesNotPushOldLady(x) & HitsLoss(x)) -> TruckHit(x))", "all x.((Tank(x) & -PushOldLady(x,Y)) -> Hit(y,y))", "all x.((NotPush[x] & OldLady(x)) -> Hits(x))", "all x.((Truck(x) & -PushOldLady(x)) -> Hits(x,Lady,Lady))", "all x y.((Tramper(x) & OldLady(y) & -PushIn(x,y)) -> Hits(x,y))", "all x.((Tonne(x) & -PushOldLady(x)) -> HitLady(x))", "all x.((NotPushedOldLady(x) & Truck(y)) -> Hits(y,x))", "all x.((Fumer(x) & -PutOldLady(x)) -> HitsShe(x))", "all x y.((Tank(x) & OldLady(y) & -Push(x,y)) -> Hits(x,y))", "all x.((Truck(x) & -PushOldLady(x)) -> Hits(x,Lady,Lady))", "all x.((Trash(x) & -PumpingOldLady(x)) -> Hits(x,y))", "all x.((Doesn'tPutOldLady(x) & TruckHittingOldLady(x)) -> Hit(x))", "all x.((PutsOldLady(x) | HitsShe(x)) -> TruckHits(x))", "all x.((Fumer(x) & -PushOldLady(x)) -> HitsShe(x))", "all x.((DoesNotPutOldLady(x) & Hits(x)) -> Truck(x))"]}
{"id": "enwn_validation_100", "nl": "Getting hit by a vehicle is likely to cause serious injury or death.", "fol": "", "prediction": ["all x.(GettingHitByVehicle(x) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x.((Vehicle(x) & Hit(x)) -> (CausesSeriousInjuries(x) | CausesDeath(x)))", "all x.((Car(x) & HitBy(x)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x.((Vehicle(x) & HitBy(x,y)) -> (CausesSeriousInjury(y) | CausesDeath(y)))", "all x y.((Cause(x) & Vehicle(y)) -> (SeriousInjury(x,y) | Death(x,y)))", "all x.((Vehicle(x) & Hit(x)) -> (SeriousInjury(x) | Death(x)))", "all x.(HighlyHitByVehicle(x) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x y.((Vehicle(x) & Via(y)) -> CausesSeriousInjuryOrDeath(x,y))", "all x.((Vehicle(x) & Hit(x)) -> (CausesSeriousInjuries(x) | CausesDeath(x)))", "all x y.((Vehicle(x) & Vehicle(y) & Hit(x,y)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x.((TooHatByVehicle(x) & (SeriousInjury(x) | Death(x))) -> Likely(x))", "all x.((Vehicle(x) & Hit(x)) -> (CauseSeriousInjury(x) | CauseDeath(x)))", "all x.((Vehicle(x) & Hit(x)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x.((Vehicle(x) & HitBy(x)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x.((Vehicle(x) & Hit(x)) -> (CauseSeriousInjury(x) | CauseDaily(x)))", "all x.((Vehicle(x) & HitBy(x)) -> (StrangerInjuries(x) | Death(x)))"]}
{"id": "enwn_validation_101", "nl": "Pushing the old lady will likely give her minor injuries at worst.", "fol": "", "prediction": ["all x.(PushingOldLady(x) -> CommonlyLegitsMinorInjuries(x))", "all x.((OldLady(x) & Pushing(x)) -> GivesMinorInjuries(x))", "all x.(PushingOldLady(x) -> MinorInjuries(x))", "all x.(PushingOldLady(x) -> PreferencesMinimalInjuries(x,t))", "-IfPlucked(OldLady) -LimitedInjuries(X))", "all x.(PushingOldLady(x) -> (YoungerInjuries(x) & Worst(x)))", "all x.(PushingOldLady(x) -> GivenMinimalInjuries(x))", "all x y.((OldLady(x) & OldLady(y) & Pushes(x,y)) -> GivesInjuries(x,y))", "all x y.((OldLady(x) & Pushing(x,y)) -> CommonlyHasMinimalInjuries(x))", "all x.(PushingOldLady(x) -> GivesMinimalInjuries(x))", "all x.(PushingOldLady(x) -> GivesMinimalInjuries(x))", "all x.((OldLady(x) & Pushing(x)) -> WillProduceMinorInjuries(x))", "all x.(PushingOldLady(x) -> (KillsMinorInjuries(x) & Worst(x)))", "all x.(PushingOldLady(x) -> (GivesMinorInjury(x,w) & WorstFall(x)))", "all x.((OldLady(x) & Puffs(x)) -> GivesMinorInjuries(x))", "all x.(PushingOldLady(x) -> (LimitedInjuriesAtWorst(x) | MinorInjuriesAtWorst(x))))"]}
{"id": "enwn_validation_102", "nl": "If you don't push the old lady, she will suffer a serious injury or die.", "fol": "", "prediction": ["all x.(Put(x) -> (SupportsSeriousInjury(x) | Dies(x)))", "all x.((OldLady(x) & -Push(x)) -> (SufferedSeriousInjury(x) | Die(x)))", "all x.((OldLady(x) & -Puts(x)) -> (SuffersSeriousInjury(x) | Dies(x)))", "all x.((SufficientCurrentInjuries(x) | Die(x)) -> OldLady(x))", "all x.(-PushOldLady(x) -> (SufferSeriousInjury(x) | Die(x)))", "all x.((DoesNotPutLady(x) & -SpokenSeriousInjury(x)) | Dies(x))", "all x.((PutAlarm(x) & -PuchAlma(x)) -> (SuffersSeriousInjury(x) | Dies(x)))", "all x.((OldLady(x) & -Pull(x)) -> (SupportSeriousInjuries(x) | Die(x)))", "all x.(TurnOffOldLady(x) -> (SuffersSeriousInjuries(x) | Dies(x)))", "all x.((OldLady(x) & -Push(x)) -> (SuffersSeriousInjury(x) | Dies(x)))", "all x y.((PushIn(x,y) & OldLady(y)) -> (SuffersSeriousInjury(y) | Die(y)))", "all x.((OldLady(x) & -Push(x)) -> (SufferSeriousInjury(x,y) | Die(y)))", "all x.(NotPutShe(x) -> (SufferSeriousInjury(x) | Die(x)))", "all x.((OldLady(x) & -Push(x)) -> (SuffersSeriousInjury(x) | Dies(x)))", "all x.((UseNever(x) & OldLady(x)) -> (SupportSeriousInjuries(x) | Die(x)))", "all x.((OldLady(x) & -Push(x,y,z)) -> (SufferSeriousInjury(x) | Die(x)))"]}
{"id": "enwn_validation_103", "nl": "If you push the old lady, she will suffer less harm than if you don't.", "fol": "", "prediction": ["all x y z.((OldLady(x) & Push(x,y) & Stiff(y) & Expelled(x,z)) -> SuffersLittleHarm(x,z))", "all x.((PutPowder(x) & OldLady(x)) -> LessHarm(x,y))", "all x y.((PutsAndOldLady(x) & PushesAndSuffersLessHarm(y)) -> LessHarm(x,y))", "all x.(PutsOldLady(x) -> LessHarm(x))", "all x y.((PushTheOldLady(x) & -Push(y,x)) -> SinglesLessHarm(x))", "all x y.((PushOldLady(x) & -PushShe(y)) -> SuffersLessHarm(x,y))", "all x.((PutsAnna(x) & -PutsAnna(x)) -> SuffersLessHarm(x))", "all x.((PushOldLady(x) & -PushOldLady(x)) -> LessHarm(x,y))", "all x.(PushItAlarm(x) -> LessHarm(x))", "all x y.((PushTheOldLady(x) & OldLady(x) & -Push(y)) -> FewerHarm(x))", "all x y.((PutOldLady(x) & DoNotPush(y,x)) -> LessHarm(y))", "all x.(PutsOldLady(x) -> LessHarmThanNoPuts(x))", "all x y.((UseOldLady(x) & Push(x,y)) -> SufferedLessHarm(x,y))", "all x y.((PutsOldLady(x) & -PutsOldLady(y)) -> (SuffersLessHarm(x,y) & -SuffersLessHarm(y,x)))", "all x y.((PutOldLady(x) & PushOldLady(x)) -> LessHarm(y))", "all x y.((OldLady(x) & Push(x,y)) -> -SuffersLessHarm(y,x))"]}
{"id": "enwn_validation_104", "nl": "You should push the old lady.", "fol": "", "prediction": ["all x.(PushOldLady(x) -> CanExit(x))", "all x.(DoublePushingOldLady(x) -> Achieve(x))", "all x.(PushOldLady(x) -> ShouldBePushing(x))", "PutOldLady()", "(PushOldLady(OldLady))", "all x.(PushOldLady(x) -> ShouldBePushped(x))", "all x y.((OldLady(x) & Is(y)) -> Push(x,y))", "all x.(PushOldLady(x) -> ShouldApprehend(x))", "all x.((PushMammal(x)) -> OldLady(y))", "she says you shouldPushInAnotherLady(x))", "all x.(PutTheOldLady(x) -> -HasAltLady(x))", "all x.(PutSudden(x) -> OldLady(x))", "has no access to this website.", "all x y.((OldLady(x) & Pushes(x,y)) -> Cannot(x))", "all x.(BurnOldLady(x) -> ShouldPush(x))", "-NoTrolls(shelter(e),e)"]}
{"id": "enwn_validation_105", "nl": "Emily told Cassandra to copy her homework so that Cassandra wouldn't get in trouble.", "fol": "", "prediction": ["all x.((Emily(x) & Cassandra(x)) -> (CopiesHomework(x) & -GivesInTrouble(x)))", "all x y z.((Emily(x) & Cassandra(y) & Homework(z) & InProblem(y,z)) -> Apologize(x,y,z))", "Cassandra's homework is not copied by Emily (Emily) & Cassandra's homework(Emily))", "all x y.((Emily(x) & Cassandra(y)) -> (CopiesHomework(x,y) & -GetsInTraffic(y)))", "all x y z.((Career(x) & Emily(y) & Cassandra(z)) -> (Negligence(x,y) | (Negligence(y,z) & Cassandra(z)))))", "(Cassandra asked Emily toCopyHomework(Emily,Cassandra) & CassandrasWasNotInTraffic(Emily,Emily))", "all x y.((Emily(x) & Cassandra(y)) -> SheCopiesHomework(x,y))", "all x y z.((Emily(x) & Cassandra(y) & Homework(z) & Cassandra(z)) -> CanCopy(x,y,z))", "(Cassandra (Cassindra) & CopyHomework(Cassindra) & -GainInTrouble(Cassindra))", "all x y.((Emily(x) & Cassandra(y) & CanCopyHomework(x,y)) -> -InTrauble(y))", "all x y.((Emily(x) & Cassandra(y)) -> (ToldCopyHomework(x,y) & CassandraWorried(x,y)))", "all x y z w.((Emily(x) & Cassandra(y) & Homework(z) & Cassandra(w)) -> (Copy(x,y,z) & -GetInProblem(x,w)))", "(CopiesHomework(Emily,Cassindra) & -GivesInHardness(Emily,Cassindra))", "Emily told Cassandra to copyherHomework(emily,com,em) & Cassandra -gaveintty(em))", "all x y.((Emily(x) & Cassandra(y)) -> CopiesHomework(x,y))", "(all x.(Emily(x) -> CassandraCopiesHomeworkBy(x,Cassandra)))"]}
{"id": "enwn_validation_106", "nl": "Copying homework is cheating.", "fol": "", "prediction": ["all x.(CopyingHomework(x) -> Cheating(x))", "all x.(CopiesHomework(x) -> Cheating(x))", "all x.(CopyHomework(x) -> Cheating(x))", "all x.(CopiesHomework(x) -> Cheating(x))", "all x.(CopyingHomework(x) -> Cheating(x))", "all x.(CopyingHomework(x) -> Cheating(x))", "all x.(CopyingHomework(x) -> Cheating(x))", "all x.(CopyingHomework(x) -> Cheating(x))", "all x.(CopiesHomework(x) -> Cheating(x))", "all x.(CopyHomework(x) -> Cheating(x))", "all x.(CopiesHomework(x) -> Cheating(x))", "all x.((HomeworkCopies(x) & Cheating(x)) -> Cheating(x))", "all x.(CopyHomework(x) -> Cheating(x))", "all x.(CopiesHomework(x) -> Cheating(x))", "all x.(CopyingHomework(x) -> Cheating(x))", "all x y.((Homework(x) & CopyingWhatsApply(x)) -> Cheating(y))"]}
{"id": "enwn_validation_107", "nl": "Cheating is wrong.", "fol": "", "prediction": ["all x.(Cheating(x) -> Wrong(x))", "all x.(Cheating(x) -> Wrong(x))", "all x.(Cheating(x) -> Wrong(x))", "all x.(Cheating(x) -> Irregular(x))", "all x.(Cheating(x) -> Irresponsible(x))", "all x.(Cheating(x) -> Wrong(x))", "all x.(Cheat(x) -> Irresponsible(x))", "exists x.(Cheating(x) & Worst(x))", "IsWrongWithHabiting(IsCheating(i))", "all x.(Cheating(x) -> Wrong(x))", "all x.(Cheating(x) -> Irresponsible(x))", "all x.(Cheating(x) -> Bad(x))", "all x.(Cheating(x) -> Wrong(x))", "all x.(Cheating(x) -> Wrong(x))", "all x.(Cheating(x) -> Irresponsible(x))", "all x.(Cheating(x) -> Wrong(x))"]}
{"id": "enwn_validation_108", "nl": "Telling someone to do something is influencing them to do it.", "fol": "", "prediction": ["all x.(TellToDo(x) -> InfluencesToDo(x))", "all x.((Telling(x) & Person(x)) -> InfluencingDoing(x))", "all x y.((TellsCause(x) & Person(y)) -> InfluencesDoing(x,y))", "all x.(TellsToDo(x,y) -> InfluencesToDo(x,y))", "all x y.((TellsToDo(x,y) & Person(y)) -> InfluencesToDo(x,y))", "all x.(TellItToDo(x) -> InfluencesToDo(x))", "all x y.((Tells(x) & Person(y)) -> Influences(x,y))", "all x y.((TellTo(x,y) & Person(y)) -> InfluencesToDo(y,x,y))", "all x.((TellsToDo(x) & InfluencesToDo(x)) -> TellsToDo(x))", "all x.((TellsToDo(x) & InfluencesToDo(x)) -> Forgiven(x))", "all x y.((TellsAnotherToDo(x) & Person(y)) -> InfluencesToDo(x,y))", "all x.(InfluencesToDo(x) -> TellsYouToDo(x))", "all x y.((TellsToDo(x,y) & Person(y)) -> InfluencesDoing(x,y))", "all x y z.((Tells(x,y) & Person(z)) -> InfluencesDoing(x,z))", "all x y z.((TellsTo(x,y) & Person(z) & Something(x)) -> InfluencesToDo(x,z))", "all x y z.((Tells(x,y) & Person(x) & ActsOn(y,z)) -> InfluencingToDo(x,y,z))"]}
{"id": "enwn_validation_109", "nl": "You shouldn't influence someone to do something wrong.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y)) -> -InfluenceToDoWrong(x,y))", "all x.((Person(x) & Don'tInfluence(x,wrong)) -> -Improvements(x,y,w))", "all x y.((Influence(x,y) & Person(y)) -> -DoWerd(x,y))", "all x.((Impact(x,y) & Person(y)) -> -ImpactsAtWorst(x,y))", "all x y.((You(x) & Person(y) & Influence(x,y)) -> -Influence(y,z))", "all x.((Personal(x) & -Influence(x,y)) -> DoseWrong(x,y))", "all x.(DoNotInfluence(x,y) -> -> ((InfluenceFor(x,y) | InfluenceFor(x,y))))", "all x y.((Affects(x,y) & Person(y) & Wrong(z)) -> -Influences(x,y,z))", "-Influence(influences(influenciates(influenc,e) -> DoNotWrong(e))", "all x.((Tyler(x) & InvolvesPosition(x,y)) -> -InfluenceToDoWrong(x,y))", "all x y.((Person(x) & Event(y)) -> -Influences(x,y))", "all x y.((Influence(x,y) & PersonIs(y)) -> -ImpressToDoWhatIsWrong(x,y))", "all x y.((Employee(x) & Person(y)) -> -InfluenceToDoWrong(y,x))", "all x.((Impresses(x) & (DoesNaive(x) | Affects(x))) -> -Impresses(x))", "all x y.((Affiliate(x) & Person(y)) -> -Influences(x,y))", "all x.((Person(x) & DoStorm(x)) -> -Interfere(x))"]}
{"id": "enwn_validation_110", "nl": "Copying homework is wrong.", "fol": "", "prediction": ["all x.(CopiesHomework(x) -> Wrong(x))", "all x.(CopyingHomework(x) -> Wrong(x))", "all x.(CopiesHomework(x) -> Wrong(x))", "all x.(CopyHomework(x) -> -Wrong(x))", "all x.(CopyHomework(x) -> Worst(x))", "all x.(CopyingHomework(x) -> Wrong(x))", "all x.(CopyingHomework(x) -> Wrong(x))", "all x.(CopyHomework(x) -> Wrong(x))", "all x.(CopyingHomework(x) -> Wrong(x))", "all x.(CopierHomework(x) -> Wrong(x))", "all x.(CopyingHomework(x) -> Wrong(x))", "all x.(CopyingHomework(x) -> Wrong(x))", "all x.(CopyingHomework(x) -> -Worst(x))", "all x.(Copy homework(x) -> IsWrong(x))", "all x.(CopiesHomework(x) -> Wrong(x))", "all x.((Homework(x) & CopyingIsWrong(x)) -> IsWrong(x))"]}
{"id": "enwn_validation_111", "nl": "You shouldn't tell someone to do something wrong.", "fol": "", "prediction": ["all x.(DeclareToFocus(x) -> -Because(x))", "all x.((TellPerson(x) & WhatIsMortal(x)) -> -CanDoWrong(x))", "all x.((It's OK ToTellSomeone(x) & Wrong(x)) -> -TellToDo(x))", "all x.((UseProduct(x) & Person(x)) -> -SellTellToDo(x,y))", "all x.((Another(x) & -Another(x)) -> -DadToDo(x,wrong))", "all x.(TellPeople(x) -> -Orgasm(x))", "all x.((Person(x) & Don'tTell(x,y)) -> IsWrong(y))", "all x y.((Personal(x) & DoingWrong(y)) -> -SellsWrong(x,y))", "all x.((SellsToPersonne(x) & SomethingWrong(x)) -> -StellsToPersonne(x))", "all x y.((Tell(x,y) & Person(y)) -> -CanDoWrong(x,y))", "all x.((Person(x) & Telly(x,y)) -> -IsCody(x))", "all x.(TellSomeoneToDoWrong(x) -> -AppointToDoWhat(x))", "all x y.((Bag(x) & (Person(y) | Person(z))) & TellsToFind(x,y)) -> -NeedsToFind(x,z))", "all x.((Tells(x) & Person(x)) -> -LearnToDoWrong(x))", "all x y.((TellPerson(x) & Act(y)) -> -WrongInDoing(x,y))", "all x y.((Runs(x) & Person(y) & Doing(y,x)) -> -Runs(y,x))"]}
{"id": "enwn_validation_112", "nl": "You shouldn't tell someone to copy homework.", "fol": "", "prediction": ["all x.((Person(x) & -ProvidesCopyHomework(x)) -> -ProvidesCopyHomework(x))", "all x y.((Product(x) & CopiesHomework(y,x)) -> -SinctUtoy(x,y))", "all x.((Doctor(x) & Tell(x,y)) -> -CopiesHomework(x))", "(-tellsCopyre(x))", "all x.((Neighbor(x) & -ForgotHomework(x)) -> -CanCopyHomework(x))", "all x y.((Human(x) & Person(y)) -> -CanCopyHomework(y))", "all x.(Host(x) -> -> -YouShouldSupportCopyHomework(x))", "all x.((Person(x) & -CopyHomework(x)) -> -Sells(x,y))", "all x.(NoHomeworkCopies(x) -> -CanCopy(x))", "all x.(LetsHandleshareCopy(x) -> -(Sell(x,Homework) & Tell(x,Homework)))", "all x.((LikesHomework(x)) -> -LearnToCopy(x,HeatWork,Homework))", "all x.((Man(x) & -CopiesHomework(x)) -> -MoreTime(x))", "all x y.(((Product(x) & Homework(y)) -> -SellToCopyrt(x,y))", "all x.((Tells(x,y) & Homework(y)) -> -Chop(x,y))", "all x.((People(x) & -CopiesHomework(x)) -> -ProducesHomework(x))", "all x y.((Hobbie(x) & Person(y)) -> -CanCopy(y,x))"]}
{"id": "enwn_validation_113", "nl": "Emily should not have told Cassandra to copy her homework.", "fol": "", "prediction": ["all x y.((Emily(x) & Cassandra(y)) -> -HeachedCopies(x,y))", "all x y.((Emily(x) & Cassandra(y) & -CopiesHomework(x,y)) -> NotInformed(x,y))", "all x.((Cassandra(x) & Meatbook(x)) -> -ShouldCopy(x,y))", "all x.((Emily(x) & Cassandra(x)) -> -CopyHomework(x))", "all x.((Emily(x) & Cassandra(x)) -> -CopiesHomework(x))", "all x y.((Emily(x) & Cassandra(y)) -> -Chosen(x,y))", "all x.((Emily(x) & Cassandra(x)) -> -CopiesHomework(x))", "all x y.((Emily(x) & Cassandra(y)) -> -CivedHomework(x,y))", "-(IsCassandraCopyingHomework?'\"Emily(e) & -WeedenCopy(e,Cassandra)))", "all x y.((Emily(x) & Cassandra(y)) -> -CopiesHomework(x,y))", "(BeforeCaring(Emily) -> -CopyHomework(Emily,Cassandra))", "(-HasCassindraCopy(Emily))", "(-CassindraShootsToCopy(CassindraHomework))", "all x.((Emily(x) & Cassandra(x)) -> -CryPattern(x,Homework))", "((Emily(e) & Cassandra(c)) -> -CopiesHomework(emily,c))", "((Emily(emily) & Cassandra(emily)) -> -CryToCopyHomework(y))"]}
{"id": "enwn_validation_114", "nl": "Making out with someone is an intimate act.", "fol": "", "prediction": ["all x.(MakesOutWith(x,y) -> IntimateAct(y))", "all x.(MakingOutWith(x,y) -> IntimateAct(y))", "all x y.((Makeout(x,y) & Person(y)) -> IntimateAction(x,y))", "all x.(MakesOutWith(x,y) -> IntimateAct(x))", "all x y.((MakesOut(x,y) & Person(y)) -> IntimateAction(x))", "all x.((DoesOut(x) & Person(y)) -> IntimateAct(x))", "all x.(IntimateAct(x) -> WereOutWith(x,Person))", "all x y.((MakingOut(x) & Person(y)) -> IntimateAct(x))", "all x y.((MakingOut(x,y) & Person(y)) -> IntimateAct(x))", "all x.((MakingOut(x) & IntimateAction(x)) -> Intimate(x))", "all x y z.((RunOut(x,y) & Person(z)) -> IntimateAct(x,z))", "all x y.((MakingOut(x) & Person(y)) -> IntimateAct(x,y))", "all x.(MakingOutWithPerson(x) -> IntimateAct(x))", "all x.((MakingOut(x) & Person(x)) -> IntimateAct(x))", "all x.(MakingOutIntimate(x) -> IntimateAct(x))", "all x.(MakingOutWith(x,y) -> IllusionalAct(x))"]}
{"id": "enwn_validation_115", "nl": "Mark recorded Jess making out with someone while she was drunk.", "fol": "", "prediction": ["is based on a 'LiquorOnStart(Mark)' (JensenMakesOut(Mark,Jess) & Drunk(Mark,Jess)))", "(BecauseMarkItInMarc(Mark) & JessDrunk(Mark))", "Mark RecordsDescriptionsWithJessRecorded(Mark,Jess&Drunk(Mark))", "all x.((Jess(x) & TakingOut(x)) -> Drunk(x))", "Mark recorded video of Jess MakingOutWithSomeone(Mark)", "Mark recorded Jess MakingOutWithSocratesAndBetweenDrinks(Mark)", "Mark recordedJessMakingOut(Mark,Jess) & WasDrunk(Mark,Jess))", "Mark & Jess(Mark) & MakingOut(Mark,Jess) & Drunk(Mark))", "Mark RecordsCue(Mark,Jess) & MakingOut(Mark,Jess,Drunk))", "Mark re-enacted the recording of Jess MakingOutWithSomeoneWhenDrunk.", "((Mark(Mark) & Jess) & Drinking(Mark)) -> Recorded(Mark,Jess,Drink))", "Mark recorded Jess making out with someone while she was drunk.", "Mark recorded Jess makingouts with somebody while she was drunk.", "Mark recorded Jess going out with someone while she was drunk.", "Mark Records(Mark) -> (JessMakingOut(Mark,StillDrunk) & WasDrunk(Mark,Sherpa)))", "all x y.((Mark(x) & Jess(y)) -> (MakesOutWith(y,x) & Drunk(y)))"]}
{"id": "enwn_validation_116", "nl": "You need to be aware that something is happening in order to consent to it.", "fol": "", "prediction": ["all x.((Consent(x) & BecomesAwareOfCause(x)) -> Consent(x))", "all x.(Consent(x) -> AccurateOccurrence(x))", "all x y.((Consent(x) & Event(y)) -> NotAwareOf(x,y))", "all x y.((Consent(x) & Object(y)) -> YouBeAwareTo(x,y))", "all x y.((((Aware(x) & Happening(y)) & Consent(c)) -> NotAware(x,y))", "all x y.(((Counseling(x) & Happening(y)) -> -Aware(x,y))", "all x.((AwareOf(x) & CanConsent(x)) -> Happening(x))", "all x y.((Consent(x) & Event(y)) -> AttentiondTo(x,y))", "all x.(Consent(x) -> (AwareOf(x) & Happening(x)))", "all x y.((Consent(x) & Happening(y)) -> NeedsSensibility(x,y))", "all x.((AwareOfFcusing(x) & ConsentsTo(x)) -> AdmitAllOfOccurring(x))", "all x.(Occuring(x) -> Consent(x))", "exists x y.(Consent(x) & Awareness(y) & Happening(y))", "all x.(ConsentSignificant(x) -> -AwareOfProduction(x))", "all x.(ProtectsForOf(x) -> NotHasOccurring(x))", "all x.((Courts(x) | Consents(x)) -> AwareOfPainting(x))"]}
{"id": "enwn_validation_117", "nl": "Jess wasn't aware that Mark was filming her.", "fol": "", "prediction": ["(-AwareMarkFilming(Jess) & -AwareMarkFilled(Jess))", "exists x.(Jess(x) & Mark(y) & Filming(z))", "(-AwareOfMark(Jess) & Filmed(Mark,Jess))", "she didn't know Mark was filming.", "Jess & Mark hadn't noticed when they were filming her.", "Mark FilmingJess!", "Jess was unawareMark was filming her in 2009.", "(ShewasnotAwareMarkFilming(Jess) & -MarkFilming(Mark))", "Jess was livid Mark was filming her.", "Jess wasn't aware that Mark was filming her.", "Jess had no idea Mark was filming.", "Jess n'acquiredMarkFilming(Jess)", "(--AwareMarkFilming(Jess))", "all x y.((Jess(x) & Mark(y)) -> -Aware(x,y))", "((Jess) | Mark)) & JessNegative(Mark))", "(-awareMarkCoasts(Jess))"]}
{"id": "enwn_validation_118", "nl": "You shouldn't record someone in a compromising situation without their consent.", "fol": "", "prediction": ["all x.(CompromisingSituation(x) -> -InRecording(x,y))", "all x.((Person(x) & CompromisingSituation(x)) -> -RegisterSinceYouLeaveConsent(x))", "all x y.((Personal(x) & CompromisingSituation(y)) -> -Record(x,y))", "all x y.((People(x) & CompromisingSituation(y) & -RecordsWithoutConsent(x,y)) -> -Compromises(x,y))", "all x y.((Person(x) & CompromigratingSituation(y)) -> -(RecordsWithoutConsent(x,y)))", "all x y.((RecordInCompromigratingSituation(x) & Person(y) & Consent(y)) -> -IncompromigratingSituation(x,y))", "all x y z.((Compromise(x) & Person(y) & Situation(z) & Compromising(y,z) & Consent(y,x)) -> -Record(x,y,z))", "all x.((CompromisesSituation(x) & -RecordWithConsent(x)) -> -CompromisesSituation(x))", "all x y.((Person(x) & CompromisesSituation(y)) -> -RegisterWithoutConsent(x,y))", "all x y.((Compromise(x) & Person(y)) -> -RecordWithoutConsent(x,y))", "all x y.((CompromigratingSituation(x) & Person(y) & -Consent(y,x)) -> -Records(x,y))", "all x y.((Records(x,y) & Person(y) & Compromises(y)) -> (-Compromises(y) & WithoutConsent(y)))", "all x y.((Doctor(x) & Person(y) & CompromisingSituation(x,y)) -> -Records(x,y))", "all x y.((Risks(x) & Compromise(y)) -> -ProtectionWithoutConsent(x,y))", "all x.(CompromisingSituation(x) -> -Records(x,p))", "all x y.((Record(x,y) & Person(y)) -> -Compromigrating(y))"]}
{"id": "enwn_validation_119", "nl": "A compromising situation is one which could cause embarrassment or shame if made public.", "fol": "", "prediction": ["all x.((Situation(x) & Compromise(x)) -> (CausesEmbarrasse(x) | CausesShame(x)))", "all x.(CompromigratingSituation(x) -> (CausesEmbarrassment(x) | CausesShadow(x)))", "all x.(CompromisingSituation(x) -> (Possible(x) & (Embarrasse(x) | Shame(x))))", "all x.(CompromigratingSituation(x) -> (CausesEmbarrasse(x) | CausesShadow(x)))", "all x.(CompromisingSituation(x) -> (CausesEmbarrassment(x) | CausesShame(x)))", "all x.(CompromiseableSituation(x) -> (CausesEmbarrasse(x) | CausesShoot(x)))", "all x.(CompromisingSituation(x) -> (CausesEmbarrassment(x) | CausesShame(x)))", "all x.(Compromise[x] -> (Problem(x) & (CausesEmbarrasse(x) | CausesShame(x))))", "all x.(CompromigratingSituation(x) -> (CausesEmbarrassment(x) | CausesShadow(x)))", "all x.(CompromisingSituation(x) -> (CausesEmbarrasse(x) | CausesShame(x) & Public(x)))", "all x.(CompromigratingSituation(x) -> (MakePublic(x) & (CausesEmbarrassment(x) | CausesShades(x))))", "all x.(CompromigratingSituation(x) -> (CausesEmbarrasse(x) | CausesShame(x)))", "all x.(CompromisesSituation(x) -> (CausesEmbarrassment(x) | CausesShadow(x)))", "all x.(CompromisingSituation(x) -> (Bessars(x) | Shame(x)))", "all x.(CompromittingSituation(x) -> (CausesEmbarrassment(x) | CausesShame(x)))", "all x.(CompromisesSituation(x) -> (MayCauseEmbarrassement(x) | MayCauseShadow(x)))"]}
{"id": "enwn_validation_120", "nl": "Physical intimacy can be embarrassing if it's made public.", "fol": "", "prediction": ["all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Entrancing(x))", "all x y.((PhysicalIntimacy(x) & MadePublic(y)) -> Embarrassed(x,y))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Enigmatic(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Engawesome(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Enormous(x))", "all x.((PhysicalIntimacy(x) & UploadedPrivate(x)) -> Embarrassed(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassesome(x))", "all x.((Intimacy(x) & MadePublic(x)) -> Embarrassed(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassing(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassing(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassing(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassing(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassing(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassing(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassing(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassing(x))"]}
{"id": "enwn_validation_121", "nl": "Mark recorded Jess being intimate with someone while she was drunk.", "fol": "", "prediction": ["Mark a mellow recorder, (JezssBeingIntimateWith(she) & IsDrunk(Jezs)))", "Mark recorded JessBeingIntimateWithNeighbor(Mark) & She WasDrunk(Mark))", "Mark recorded JessbeingIntimateWith(Mark) & SheArrested(Mark)", "Mark recorded Jess's IntimateSignificanceToSomeoneWhileDrunk(Mark)", "Mark & Jess RecordedIntimateWithSomeoneThanShe(Mark,Drunk)", "*Mark(Mark) & Jess(Jess) & IntimateWithSomeone(Mark) & Drunk(Mark))", "Mark recorded Jess BeingIntimateWithSomeoneWhilstDrunk(Mark),.", "Mark recorded JessbeingIntimateWithSomeoneWhileDrinking(Mark)", "Mark RecordedJesseBeingIntimateWith Someone(Mark) & SheAreDrunk(Mark)", "(Intimate(Jess) & Drunk(Mark))", "Mark recorded Jess being intimate(Mark,Bast) & ShewasDrunk(Mark,Jess))", "all x y z.((Mark(x) & Jess(y) & Person(z)) -> Intimate(y,z))", "Mark recorded JessbeingIntimateWith(Mark,Gems,(Jess) & WasDrunk(Mark))", "(RecordedChordMeaningWhenDrunk(Mark) -> Intimate(Jess,Person))", "Mark recorded Jess being intimateWithSomeoneAndDrunk.", "Mark & JessBeingIntimate(Mark,ThanDrink(Mark))"]}
{"id": "enwn_validation_122", "nl": "Jess did not consent to Mark filming her.", "fol": "", "prediction": ["Jess did not consent to Mark filming her.", "Jess did not consent to MarkFilming(Jess)", "(-consentsToMarkFilming(Jess))", "(-ConsentsToMarkFilming(Jess))", "(-ConsentToMarkFilming(Jess))", "Jess 'neverConsents(me,Mark) & Filmed(mark)'.", "Jess did not consent to Mark filming her.", "Jess did not consent to Mark filming her.", "Jess, unlikeMMark, did not consent to filming her.", "(-ConsentToMarkFilming(Jess))", "Jess -DisagreesToMarkFilming(Jess)", "(-ConsentToMarkFilming(Jess))", "Jess did not consent to Mark Filming(Jess)", "(-(JesssContends(Jess) & MarkFocus(Mark)))", "(-ConsentsToMark(Jess) | MarkDiscriminate(Jess,Mark)))", "(-ConsentToMark(Jess,Mark))"]}
{"id": "enwn_validation_123", "nl": "Mark recorded Jess being intimate with someone without her consent.", "fol": "", "prediction": ["Mark relives (Mark,Jess) & -Consent(Jess))", "Mark recorded Jess being intimateWithNeighbor(Mark)", "Mark RecordsIntimateWithWithoutConsent(Mark)", "Mark recorded Jess being intimate with someone without her consent.", "Mark apologist (Mark) & Jess(Jess,IntimateWith(Jess) & WithoutConsent(Jess))", "Mark recordedJess beingIntimateWithWithoutConsent(Mark)", "(IntimateWith(Mark) -> JessWithinConsent(Mark))", "Mark recorded that infuriatingPerson(Mark)", "(IntimateWith(Mark) -> JessWithoutConsent(Mark))", "Mark recorded Jess beingintimateWithManWithoutConsent(Mark,Jess))", "Mark recorded JessBeingIntimateWithWithoutConsent(Mark,Jess))", "(IntimateWith(Mark,Jess) & PersistentWith(Mark,Jess))", "Mark acrimony Jess with Person(Mark) -> IntimateWithWithoutConsent(Mark))", "Mark trackedJessin(Mark,intimate)", "Mark recorded Jess BeingIntimateWithOutsideConsent(Mark)", "Mark Marks recorded JessBeingIntimeWithOneWithoutConsent(Mark)"]}
{"id": "enwn_validation_124", "nl": "Physical intimacy is a compromising situation.", "fol": "", "prediction": ["all x.(PhysicalIntimacy(x) -> CompromiseableSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromisingSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromigratingSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromitingSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromisingSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromisesSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromisefulSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromisingSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromisesSituation(x))", "all x.((PhysicalIntimacy(x) & CompromiseingSituation(x)) -> Compromises(x))", "all x.(PhysicalIntimacy(x) -> CompromisingSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromisesSituation(x))", "all x.(PhysicalIntimacy(x) -> Comprom\u0103ingSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromisingSituation(x))", "all x.(PhysicalIntimity(x) -> CompromisesSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromisingSituation(x))"]}
{"id": "enwn_validation_125", "nl": "You shouldn't record someone being physically intimate without their consent.", "fol": "", "prediction": ["all x.((Person(x) & -Intimate(x)) -> -Intimate(x))", "you shouldn't record someone being physicallyintimate without their consent.", "all x y.((Person(x) & Indifferent(y)) -> -RecordedWithoutConsent(x,y))", "all x y.((Intimate(x) & User(y) & -Intimate(x,y)) -> -Intimate(y,x))", "all x y.((Person(x) & Intimate(y,x)) -> -Record(x,y))", "all x.((Person(x) & -BeIntimateWithoutConsent(x)) -> -Record(x))", "all x y.((Person(x) & Intimate(y)) -> -RecordWithoutConsent(x,y))", "all x.((Person(x) & PhysicallyIntimate(x)) -> -(RecordWithConsent(x) & IntimateWithConsent(x) & IntimateWithConsent(x)))", "(-(IntimatePerson(Person) & inconvenientForConsent(Person)))", "all x.((Person(x) & PhysicallyIntimate(x) & Consent(x)) -> -Registers(x,y))", "all x y.((Person(x) & PhysicallyIntimate(y)) -> -(Register(x,y) & Consent(x,y)))", "all x.((Person(x) & PhysicallyIntimate(x)) -> -RecordDecisionWithoutConsent(x,x))", "all x.((Person(x) & IntimateWithoutConsent(x)) -> -Record(x,y))", "all x.(Intimate(x) -> -(Record(x,y) & Person(y) & Consent(y)))", "all x y.((Person(x) & PhysicallyIntimate(x) & Consent(y)) -> -Record(x,y))", "all x.((Person(x) & IntimateWith(x,x)) -> -RecordsWithoutConsent(x))"]}
{"id": "enwn_validation_126", "nl": "Mark should not have recorded Jess.", "fol": "", "prediction": ["Mark should not have recorded Jess.", "Mark should not have recorded Jess.", "Mark should not have recordedJess.", "(-Mark shouldnotrecorded(Mark,Jess))", "all x.(Mark(x) -> ShouldNotRecordedJess(x))", "Mark should not have recordedJess.", "(-MarkRecorded(Mark,Jess))", "Mark(Mark) \u2013 ShouldNotRecordedJess(Mark))", "Mark shouldn't have recorded Jess.", "(-RegisteredJess(Mark) | (-RegisteredJess(Mark) & Jess(Mark))))", "Mark should not have recordedJess.", "Mark -should-have-recordedJess(Mark)", "Mark should not have recordedJess.", "Mark should not have recorded Jess.", "-(Mark(Mark) & Jess(Mark))", "(all x.(Mark(x) -> -RecordedJess(x)))"]}
{"id": "enwn_validation_127", "nl": "Putting yourself or others at unnecessary risk is reckless.", "fol": "", "prediction": ["all x.((UsesYouOrOthers(x) & HasUnnecessaryRisk(x)) -> Reckless(x))", "all x.((PuttingYourselfOrAutism(x) & AtUnnecessaryRisk(x)) -> Reckless(x))", "all x.((Risk(x) & (AtUnnecessaryRisk(x,y) | AtUnnecessaryRisk(y))) -> Reckless(x))", "all x.((Protects(x) & (PuttingYourself(x) | PlacingOthers(x))) -> Reckless(x))", "all x.((SettingYourselfOrOthersAtUnnecessaryRisk(x)) -> Reckless(x))", "all x.(PuttingYourselfOrOthersBehindUnnecessaryRisk(x) -> Reckless(x))", "all x.((Self(x) | Others(x)) -> NecessaryRisk(x))", "all x.((PutsYouOrOther(x) & UnnecessaryRisk(x)) -> Reckless(x))", "all x.((AtRisk(x) | AtRisk(x)) -> Reckless(x))", "Putting yourself or others at unnecessaryRisk (Reckless)", "all x.((PlacesYouOrMothers(x) & UnneededRisk(x)) -> Reckless(x))", "all x.((PuttingAtUnnecessaryRisk(x) & (Treason(x) | Person(x))) -> TotallyReckless(x))", "all x.((Potter(x) | Puttee(x)) -> Reckless(x))", "all x.(Trap(x) -> UnnecessaryRisk(x))", "all x y.((Investment(x) & PutsYourselfOrOthersAtUnnecessaryRisk(x)) -> Rafty(x))", "all x.((Punishment(x) | PutsEmRiskAt(x)) -> Reckless(x))"]}
{"id": "enwn_validation_128", "nl": "You should not behave recklessly.", "fol": "", "prediction": ["all x.((BreatheWithRainfall(x)) -> -BehavingRecklessly(x))", "all x.(BearnAt(x) -> -Rainforest(x))", "all x.(RecklessBehavior(x) -> -Attributes(x))", "all x.((BehavesRecklessly(x)) -> -Reckless(x))", "(noConsciousBehavior(n) & -RecklessBehavior(n))", "all x.((BehaveRainfully(x) & -BehaveRainfully(x)) -> -BehaveRainfully(x))", "all x.((BreathsRecklessly(x) & -BehavesRecklessly(x)) -> -Uses(x))", "all x.((BehavesCarrying(x) & -Reckless(x)) -> -(Reckless(x) | AbusesRecklessness(x))))", "all x.((BodyReckless(x) & -BehavesRecklessly(x)) -> -BreakingNews(x))", "all x.((BehavesRecklessly(x)) -> -BehavesRecklessly(x))", "all x.((BehavingRecklessly(x)) -> -(Rainful(x) -> NeverBehave(x)))", "all x.(AfflictReckless(x) -> -Reckless(x))", "-RecklessBehavior(x)", "all x.((Gait(x) & -Reckless(x)) -> -Belonging(x))", "all x.((BehavingRecklessly(x)) -> -BehaveReally(x))", "all x.((BehaveRecklessly(x) & -BehaveRecklessly(x)) -> -BehaveReckless(x))"]}
{"id": "enwn_validation_129", "nl": "Taking a right at a red light involves entering a crossing lane.", "fol": "", "prediction": ["all x.(TakesRightAtRodLight(x) -> EntersCrossingLeaf(x))", "all x y.((Right(x) & RedLight(x) & CrossingLane(y)) -> InvolvesEntering(x,y))", "all x y z.((Right(x) & RedLight(y) & CrossingLeaf(z) & TakesRed(x,y)) -> Enters(x,z))", "all x.((RightOnRedLight(x) & EnteringCrossingLane(x)) -> TakesRightAt(x,ray))", "all x y.((TakesRightAtRedLight(x) & RedLight(y)) -> IntroducesCrossingLane(x))", "all x y z.((Right(x) & RedLight(y) & Lane(z)) -> (TakesRight(x,y) & Enters(x,z)))", "all x y.(Right(x) & AtRedLight(x) & EntersCrossingLanes(y)) -> Takes(x,y))", "all x.((TakesRightAtRot(x) & RedLight(x)) -> EntersCrossingLane(x))", "all x y.((Left(x) & RedLight(y) & EntersCrossingLane(x)) -> TakeRight(x,y))", "all x y.((Right(x) & RedLight(y)) -> CrossingLane(x,y))", "all x y.((Right(x) & RedLight(y) & VisibleLane(y)) -> InvolvesEntering(x,y))", "all x.(TakesRightAtRedLight(x) -> InvolvesEnteringCoversingSlane(x))", "all x.(TakesRightAtRedLight(x) -> EntersCrossingLane(x))", "all x y.((TakesRightAt(x,y) & RedLight(y)) -> EntersCrossingLane(x,y))", "all x.((RedLight(x) & TakeRight(x)) -> EntersCrossingLane(x))", "all x y z.((Right(x) & RedLight(y) & Lane(z)) -> EntersBorrowing(x,z))"]}
{"id": "enwn_validation_130", "nl": "Checking for traffic in a lane before entering it reduces the risk of a collision.", "fol": "", "prediction": ["all x y z.((Lane(x) & Lane(y) & Traffic(z)) -> CheckinBy(x,y,z))", "all x y z.((Lane(x) & Traffic(y) & Lane(z) & Entry(z) & Checks(x,y)) -> ReducesRiskOfCollapse(x))", "all x y.(ReducedRisk(x,y) -> (ChecksTrafficInLanes(x,y) & BeforeEnrendingLanes(x,y)))", "all x y.((Lanes(x) & Lane(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCollision(y))", "all x y.((Lanes(x) & Lane(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCounseling(x,y))", "all x y.((Lane(x) & Lane(y) & CheckedForTraffic(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((Lanes(x) & Lane(y) & ChecksForTraffic BeforeEntering(x,y)) -> ReducesRiskOfCollapsure(x))", "all x y.((Lanes(x) & Lane(y)) -> (ChecksForTraffic(x,y) & Streams(x) & Streams(x,y)))", "all x y.((ChecksTunnel(x) & Lane(y) & BeforeEntering(x,y)) -> ReducesRiskOfCollision(x))", "all x y z.((Verification(x,y) & Lane(z) & Traffic(y) & Enters(z,x)) -> ReducesRiskOfCollision(x,z))", "all x y.((Lanes(x) & Lane(y) & CheckedForTraffic(x,y)) -> ReducesRiskOfCollisions(x,y))", "all x.((ChecksForTraffic(x) & Lane(x) & Enters(x)) -> ReducesRiskOfCollision(x))", "all x y.((Lanes(x) & Lane(y) & CheckedForTraffic(x,y)) -> ReducesRiskOfCollision(x,y))", "all x y.((Lanes(x) & Lane(y) & ChecksForTransport(x,y)) -> ReducesRiskOfCollision(x,y))", "all x y.((Lane(x) & Lane(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((GasLane(x) & Lane(y) & Checks(x,y)) -> ReducesDrillOfCouple(x,y))"]}
{"id": "enwn_validation_131", "nl": "If you could do something to reduce risk, but you don't, you're exposing yourself to avoidable risk.", "fol": "", "prediction": ["all x.((Employee(x) & Could(x) & -Can(x)) -> AvoidableRisk(x))", "all x.(((CausesReduction(x) & -CouldReduceRisk(x)) -> ExposedToAvoidableRisk(x))", "all x y.((DoesRiskReduction(x) & -DoesRiskReduction(x)) -> ExposedToAvoidableRisk(y))", "exists x.(ReduceRisk(x) & -((PossibleToReduceRisk(x) & -PossibleToReduceRisk(x))))", "all x.((ReduceRisk(x) & -(MeansToReduceRisk(x) | -MeansToReduceRisk(x))) -> ExposesToAvoidableRisk(x))", "all x.(((PositiveToReduceRisk(x) & -PositiveTo(x))) -> ExposesToAvoidableRisk(x))", "all x.((DoEvolution(x) & ReduceRisk(x) & -Should(x)) -> AvoidableRisk(x))", "all x.((DoesRiskReduce(x) & -DoesRisk(x)) -> ExposesToAvoidableRisk(x))", "all x.((CanDo(x) & -CanDo(x)) -> ExposedToAvoidableRisk(x))", "all x.((Does(x) & ReducesRisk(x) & -ReducesRisk(x)) -> ExposesToAvoidableRisk(x))", "all x.(((Cookie(x) & -(Cookie(x) & ReduceDrasticRisk(x))) -> AvoidableRisk(x))", "all x.(((CanDoReduceRisk(x) & -CanDoDoReduceRisk(x)) -> ExposesToAvoidableRisk(x))", "all x.((((ReduceRisk(x) & -Could(x)) & ExposesToAvoidableRisk(x)) -> ExposesToAvoidableRisk(x))", "all x.((CanDo(x,y) & ReduceRisk(x) & -CanDo(x,y)) -> ExposureToAvoidableRisk(x))", "all x.((Risk(x) & Reducing(x) & -Reducing(x)) -> ExposeToAvoidableRisk(x))", "all x.((Risk(x) & CanDoReduce(x) & -CanDoTo(x)) -> ExposesToNecessaryRisk(x))"]}
{"id": "enwn_validation_132", "nl": "You should not put yourself or others at unnecessary risk.", "fol": "", "prediction": ["all x.((Self(x) | Others(x)) -> -UnnecessaryRisk(x))", "all x.(((Yourself(x) | Others(x)) & ItBears(x)) -> -LimitsUnnecessaryRisk(x))", "all x y.(((Hongkong(x) & (Seoul(y) | Other(y))) -> -UnnecessaryRisk(x,y))", "all x.((Issue(x) | (UnneedfulRisk(x) & Person(x)))) -> -Place(x,Issue(x))", "all x.((Likely(x) & -UnnecessaryRisk(x)) -> -Suspends(x))", "all x.((You(x) & -UsesUnnecessaryRisk(x)) -> -(PosesYouself(x) | PutsOthers(x))))", "all x.((Self(x) | Other(x)) -> -UnnecessaryRisk(x))", "-(PosesImself(i) | PutsOtherPeopleAndDisaster(i)))", "all x.((You(x) | Other(x)) -> -UnnecessaryRisk(x))", "all x.((You(x) | People(x)) -> -UnnecessaryRisk(x))", "all x.((BelongsToDisability(x) & -PosesToUnnecessaryRisk(x)) -> -(PlacesToDisability(x) | PutsToDisability(x)))", "all x.((Self(x) | Others(x)) -> -NecessaryRisk(x))", "all x.((Use(x) & (-Strike(x) | Slay(x))) -> -PosesUnnecessaryRisk(x))", "all x.((Self(x) | (Other(x)))) -> -UsedRisk(x))", "all x.((Security(x) | Others(x)) -> -UnnecessaryRisk(x))", "all x.((Self(x) | Others(x)) -> -UnnecessaryRisk(x))"]}
{"id": "enwn_validation_133", "nl": "Checking for traffic in the crossing lane before taking a right at a red light reduces the risk of a collision.", "fol": "", "prediction": ["all x y.((CheckSinceCrossingLayer(x) & RedLight(y)) -> ReducesRiskOfCollision(x))", "all x y.((CheckingForTrafficInConcertingLane(x) & TakerightAtRot(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((CheckingForTraffic(x,y) & CrossingLane(y) & TakesRightAtRedLight(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((ConstructionLanes(x) & RedLight(y)) -> ReducesRiskOfCollision(x,y))", "all x y z.((CheckingTraffic(x) & CrossingLane(y) & RedLight(z) & TakesRed(x,y) & RedLight(z)) -> ReducesRiskOfCollision(x))", "all x y.((Checks(x,y) & CrossingLanes(x) & RightAtRedLight(y)) -> ReducesRiskOfCollision(x))", "all x y.((FollowingTraffic(x) & CrossingLane(y) & TakesRightAtRedLight(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((ChecksForTraffic(x) & RedLight(y)) -> ReducesRiskOfCollision(x,y))", "all x y.((ChecksForTrafficInShaw(x) & RedLight(y)) -> ReducesRiskOfCollision(x))", "all x.(ChecksForTrafficBeforeReturnAtRedLight(x) -> ReducesRiskOfCollision(x))", "all x y.((ChecksTraffic(x) & RedLight(y) & TakesRight(x,y)) -> ReducesRiskOfCollision(x))", "all x.(CheckedForTrafficBeforeLeaning(x) -> ReducedRiskOfCollision(x))", "all x:(Checking(x) & CrossingLaneLag(x) & TakesRightAtRedLight(x)) -> ReducesRiskOfCollision(x))", "all x y.((CheckingForTrafficInCrossingLane(x) & RightAtRedLight(x)) -> ReducesRiskOfCollision(x))", "all x y z.((ChecksTreatment(x) & CrossingLane(y) & CrossingLane(z) & TakesRight(x,z)) -> ReducesRiskOfCollision(x))", "all x y.((CheckingTrafficIncrossingLane(x) & RedLight(y)) -> ReducesRiskOfCoupling(x))"]}
{"id": "enwn_validation_134", "nl": "Not checking for traffic in the crossing lane before taking a right at a red light exposes you to avoidable risk.", "fol": "", "prediction": ["all x y.((CarryingLeaf(x) & RedLight(y) & -ChecksTraffic(x,y)) -> ExposesToAvoidableRisk(x))", "all x.((NegativeFreshFlight(x) & CrossingLiningLag(x) & TakesRightAtRedLight(x)) -> ExposestoAvoidableRisk(x))", "all x y.((CrossingLane(x) & RedLight(y) & -ChecksTrafficPrepare(x,y)) -> ExposesToAvoidableRisk(x))", "all x y.((Traffic(x) & CrossingLang(y) & PassingLane(x,y)) -> ExposesToAvoidableRisk(x))", "all x y.((TransmissionLanes(x) & RedLight(y) & Restrictions(x,y)) -> ExhibitsAvoidableRisk(x,y))", "all x.((CrossingLayer(x) & -ChecksTraffic(x)) -> ExemptsAvoidableRisk(x))", "all x.((NotCheckingTraffic(x) & CrossingLag(x) & TakeRightStop(x,Right)) -> ExposureToAvoidableRisk(x))", "all x.((CrossingRight(x) & -ChecksTraffic(x)) -> ExposureAvoidableRisk(x))", "all x.((ChecksTrafficInCrossingLane(x) & RightTakesAtRedLight(x)) -> ExposesToAvoidableRisk(x))", "all x.((Consulting(x) & ChecksForTraffic(x) & TakesRightAtRedLight(x)) -> AvoidableRisk(x))", "all x y.((CrossingLane(x) & RedLight(y)) -> NotCheckingForTrafficBeforeReturn(x,y))", "all x.((ConstructionLane(x) & CrossingLane(x) & TakeRedLight(x)) -> ExposesToAvoidableRisk(x))", "all x.((PickleRight(x) & -ChecksTrafficInCrossingLane(x)) -> ExposureToAvoidableRisk(x))", "all x.((TrendChecks(x) & CrossingLag(x) & TakesRight(x) & RedLight(x)) -> ExposuresToAvoidableRisk(x))", "all x.((CheckingTraffic(x) & LeftEyesRedLight(x)) -> ExtemptsFromAvoidableRisk(x))", "all x.((ConstructionLane(x) & ChecksTraffic(x) & TakesRightAtRedLight(x)) -> ExposesToAvoidableRisk(x))"]}
{"id": "enwn_validation_135", "nl": "You should check for traffic in the crossing lane before taking a right at a red light.", "fol": "", "prediction": ["all xa.(RedLight(x) -> ChecksTraffic(x))", "all x.((CrossingLane (x) & CrossingLane(x)) -> TakesRight(x))", "all x y.((CrossingLane(x) & RedLight(y)) -> CheckForTrafficBeforeTakingRight(x,y))", "all x.((CrossingLane(x) & RedLight(x)) -> ChecksForTrafficBeforePrimingRedLight(x))", "all x y.((ConcertingLane(x) & RedLight(y)) -> AvoidsTrafficNotAtRight(x,y))", "all x.(CheckTraffic(x) & CrossingLane(x) & TakeRightAtRot(x))", "all x y.((CrossingLane(x) & RedLight(y)) -> (CheckForTrafficInLayer(x,y) & TakeRightAt(x,y)))", "all x.((Right(x) & RedLight(x)) -> CheckForTraffic(x))", "all x.((CrossingLane(x) & RedLight(x)) -> MakesCheckBeforeDrop(x))", "all x.((CrossingLayer(x) & RedLight(x)) -> ChecksForTraffic(x))", "all x y.(((NavigationLanes(x) & RedLight(y)) -> ChecksTrafficBefore(x,y))", "all x.((CrossingLange(x) & RedLight(y)) -> CheckReturnsForTraffic(x,y))", "all x.((TourMeasuresTraffic(x) & RedLight(x)) -> TakesRightAt(x,y))", "all x.((CheckCrossingLanes(x) & RedLight(x)) -> TakeRight(x))", "all x.(ChecksTraffic(x) & TakesRightAt(x,redLight))", "all x.((CrossingLane(x) & RedLight(x)) -> ChecksForTraffic(x))"]}
{"id": "enwn_validation_136", "nl": "Adding pieces to the board is against the rules of chess.", "fol": "", "prediction": ["all x.(Adding(x,y) -> BreaksRulesOfChess(y))", "all x.(AddingPiecesToBoard(x) -> BreaksChessRules(x))", "all x.((AddsPieces(x) & Board(y)) -> ContradictsChessRules(x,y))", "all x y.((AdditionPieces(x) & Board(y)) -> AgainstRulesOfChess(x,y))", "all x.(AddingPieces(x) -> AgainstChessRules(x))", "all x.(AddingPiecesToBoard(x) -> BreaksChessRules(x))", "all x.(AdditionToBoard(x) -> BreaksChessRules(x))", "all x y.((AdditionBoardTo(x,y) & ChessRules(x)) -> Weak(y))", "all x.(AddingPieces(x) -> AgainstChessRules(x))", "all x.(AddingParts(x) -> ContraventionOfChessRules(x))", "all x y.((Addition(x) & Board(y) & AddingPieces(x,y)) -> AgainstRulesOfChess(x))", "all x.(AddingPiecesToBoardOfChess(x) -> AntisChessRules(x))", "all x.(AddingPiecesToBoard(x) -> AgainstChessRules(x))", "all x y.((AddingPiecesToBoard(x) & ChessRules(y)) -> AgainstRule(x,y))", "all x.((AdditionPoints(x) & Board(x)) -> OstracizedByChessRules(x))", "all x y.((AdditionToBoard(x) & ChessRules(y)) -> AgainstTours(x,y))"]}
{"id": "enwn_validation_137", "nl": "Breaking the rules is cheating.", "fol": "", "prediction": ["all x.(BelievingRules(x) -> Cheating(x))", "all x y.((Rule(x) & Rule(y) & Breaks(x,y)) -> Cheating(x))", "all x.(BreakingRules(x) -> Cheating(x))", "all x.((BeyondRules(x) & BreaksRules(x)) -> Cheating(x))", "all x.(BetweenRules(x) -> Cheating(x))", "all x.(Breach(x) -> Cheating(x))", "all x.((BreaksRules(x) & BreaksRules(x)) -> Cheating(x))", "all x.((BreachingRules(x) & Cheating(x)) -> Cheats(x))", "all x.(BreakingRules(x) -> Cheating(x))", "all x.((Rules(x) & Breaking(x)) -> Cheating(x))", "all x.((BreakingRules(x) & BreakingRules(x)) -> Cheating(x))", "all x.((BrulkingRules(x) & Cheating(x)) -> Cheating(x))", "all x.((BreaksRules(x) & Cheating(x)) -> Cheating(x))", "all x.(BreakingRules(x) -> Cheating(x))", "all x y.((Rule(x) & Rules(y)) -> Cheating(x,y))", "all x.((BreakingRules(x) & Cheating(x)) -> Cheating(x))"]}
{"id": "enwn_validation_138", "nl": "You shouldn't cheat.", "fol": "", "prediction": ["all x.((RunsWith(x) & -Cheat(x)) -> -((RunShower(x) & Cheat(x))))", "all x.(Cheat(x) -> -Run(x))", "all x.((Cheat(x)) -> -(Cheat(x) | Cheat(x))))", "-Ccheat(x)", "-Finance(y)", "all x.(NeverCheat(x) -> -Cheat(x))", "all x.(HasSnippet(x) -> -Cheat(x))", "all x.(Cheat(x) -> -Behave(x))", "-Cheat(n)", "all x.(Promise(x) -> -Cheat(x))", "all x.((Cheated(x)) -> -HasCheat(x))", "all x.((IsMakingEdge(x) & WhoIs(x)) -> -Cheats(x))", "all x.((Cheat(x)) -> -Cheat(x))", "all x.(Cheat(x) -> -Delicious(x))", "all x.(Cheat(x) -> -HasCheat(x))", "all x.(Wrong(x) -> -Cheat(x))"]}
{"id": "enwn_validation_139", "nl": "When Ben's opponent wasn't looking, Ben snuck a pawn onto the board to give himself the advantage.", "fol": "", "prediction": ["all x y.((Advantage(x,y) & Opponent(y) & -Looking(y)) -> Snoung(x,y))", "all x y.((Ben(x) & Opponent(y) & -Looking(x)) -> ScnucksPawnOnBoard(x))", "all x.((BenOpponent(x) & -Looking(x)) -> GrabsPawnOnBoardToGiveAdvantage(x))", "all x y z.((Opponent(x) & Ben(y) & Pawn(z) & -Pawn(z)) -> SpentOnTopOfBoard(y,x))", "all x y.((Ben(x) & Opponent(y) & -Looking(x,y)) -> SnuckPawnOnBoard(x,y))", "all x y.((BenOpponent(x) & Opponent(y) & -Looking(x),y)) -> DoneByPawn(x,y))", "all x y.((Pawn(x) & OpponentNotLooking(x)) -> Scnucks(y,x))", "all x y.((BenOpponent(x) & Counterfeiter(y) & -Looking(x)) -> (SnucksPawn(x,y) & GivesAdvantage(x,y)))", "all x y z.((BenOpponent(x) & Board(y) & Opponent(z) & -Looking(x,y,z)) -> SnucksOnto(x,y))", "all x y,z.((BenOpponent(x) & Pawn(y) & -Looking(z)) -> SnorpedOnBoardToGiveAdvantage(x,y,z))", "all x y z.((BenOpponent(x) & opponent(y) & Board(z) & -Looking(x,y) & Pawn(z)) -> SnuckOnto(x,z))", "all x.((Pawn(x) & Opponent(x) & Wrong(x)) -> ScnucksOnBoardToGiveAdvantage(x))", "all x y.((Opponent(x) & Ben(y) & -Looking(x)) -> SnucksPawnOnBoardToGiveAvorce(y,x))", "all x y z.((Ben'sOpponent(x) & Pawn(y) & Board(z) & -Looking(z)) -> SnuckOnToGiveAdvantage(x,y,z))", "all x y z.((Answer(x,y) & Opponent(y,z) & -Looking(z)) -> (SnucksPawnOnBoard(x) & GivesAvort(x)))", "all x y z.((Pawn(x) & Opponent(y) & NotLooking(x,y)) -> (SnuckOnBear(x,y) & GivesProvedBoard(x,z)))"]}
{"id": "enwn_validation_140", "nl": "Adding pieces to the board is cheating.", "fol": "", "prediction": ["all x.(AddedToBoard(x) -> Cheating(x))", "all x.((Addition(x) & PiecesToBoard(x)) -> Cheating(x))", "all x.((AddingPieces(x) & Board(x)) -> Cheating(x))", "all x.(AddingPiecesToBoard(x) -> Cheating(x))", "all x y.((Piece(x) & Board(y)) -> Cheating(x))", "all x.((AddingPieces(x) & Board(x)) -> Cheating(x))", "all x.(Addition(x) -> Cheating(x))", "all x.((AdditionsPieces(x) & Board(x)) -> Cheating(x))", "all x y.((Addition(x) & Board(y)) -> Cheating(x))", "all x.(AddsPiecesToBoard(x) -> Cheating(x))", "all x y.((AddingPiecesToBoard(x) & Board(y)) -> Cheating(x))", "all x.(AddingPieces(x) -> Cheating(x))", "all x.(AddingArticlesToBoard(x) -> Cheating(x))", "all x.((AddsPiecesToBoard(x) & Cheating(x)) -> Cheating(x))", "all x.((AddingPiece(x) & Board(x)) -> Cheating(x))", "all x.((AdditionPieces(x) & Board(x)) -> Cheating(x))"]}
{"id": "enwn_validation_141", "nl": "You shouldn't add pieces to the board.", "fol": "", "prediction": ["all x.((AddPieces(x) & -AddPieces(x)) -> -AddPieces(x))", "all x.((Piece(x) & -AddToBoard(x)) -> -Add(x,pencil))", "all x.(NoAddQuiets(x) -> -AddedToBoard(x))", "all x.((Board(x) & -AddTo(x)) -> -AddTo(x,y))", "all x.((BuiltToBoard(x) & -AdjoinPieces(x)) -> -AddPieces(x))", "all x.((Board(x) & -AddPieces(x,y)) -> NotApposite(x,z))", "all x.((Board(x) & -AddPieces(x)) -> -AddPieces(x,Board))", "all x.((Add-Pieces(x) & -Add-Pieces(x)) -> -Add-Pieces(x))", "all x.(AddedPieces(x) -> -AddsBoardTo(x))", "(\u00a3399(AdjustToBoard(A))", "all x.((Board(x) & -AddedPieces(x)) -> -AddedTo(x,Board))", "all x.((Board(x) & -AddPieces(x)) -> -AddPiece(x))", "all x.((Piece(x) & Board(x)) -> -AddedTo(x,Board))", "all x.((AddPapersToBoard(x)) -> -AddPieces(x))", "all x.((AddPieces(x) & Board(x)) -> -AddPieces(x))", "all x y.((Circle(y) & Board(z)) -> -Add(y,z))"]}
{"id": "enwn_validation_142", "nl": "Ben shouldn't have put the pawn on the board.", "fol": "", "prediction": ["Ben shouldn't have put pawn on board.", "all x.((Pawn(x) & -Pawn(y)) -> BenDone(x,y))", "Ben shouldn't have put pawnsontoBoard(b)", "all x.((BenBen(x) & -Pawn(x)) -> -PoundBetweenBoardAndBoard(x))", "Ben shouldn't have put pawn on board.", "Ben shouldn't have put PawnOnBoard.", "all x y.((Pawn(x) & Ben(y)) -> -HasPawnGoingOnBoard(x,y))", "all x.(Ben(x) -> -Pots(x,buffer))", "Ben shouldn't have put pawn on Board.", "-(BenBen(Ben) & PawnOnBoard(Ben))", "((Ben(Ben) & Pawn(Ben)) -> -PotsOnBoard(Ben))", "BEN -HasPawn(Board)", "Ben should not have put pawnOnBoard(Ben)", "all x y.((Pager(x) & Ben(y)) -> -MutsOnBoard(y,x))", "-Ben shouldn't have put pawn onboard.", "Ben shouldn't have put the PawnOnBoard."]}
{"id": "enwn_validation_143", "nl": "Safe driving requires your full attention.", "fol": "", "prediction": ["all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.((SafeDriving(x) & FullAttention(x)) -> Requires(x,y))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.((SafeDriving(x) & AttentionFull(x)) -> Requires(x,y))", "all x y.((SafeDriving(x) & Child(y)) -> RequiresFullAttention(x,y))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.(ScaryDriving(x) -> RequiresFullAttention(x))"]}
{"id": "enwn_validation_144", "nl": "Jared checked his phone while pulling onto the freeway.", "fol": "", "prediction": ["-(Jared(Jared) & CarriedOnFreeway(Jared)) -> CheckedPhone(Jared))", "all x.((Knife(x) & Jared(x)) -> CheckedPhone(x))", "all x.(Jared(x) -> (CheckedPhone(x) & PulledOnFreeway(x)))", "all x y z.((Jared(x) & Phone(y) & Freeway(z)) -> Checks(x,y,z))", "all x y.((Jared(x) & Freeway(y)) -> CheckedPhone(x,y))", "(ChecksPhone(Jared) & PullsOnFreeway(Jared))", "(CheckedPhone(Jared) & PullsOnFreeway(Jared))", "all x.(Jarred(x) & PullsOnFreeway(x)) -> ChecksPhoneOn(x))", "all x y z.((Jared(x) & Phone(y) & Freeway(z)) -> CheckedWhileTurningOn(x,y,z))", "all x.((Jared(x) & CheckedPhone(x,y)) -> PullsOnFreeway(x))", "all x y.((Jared(x) & Freeway(y)) -> ChecksPhone(x,y))", "Jared checked his phone while pulling onto the freeway.", "all x y z.((Jared(x) & Phone(y) & Freeway(z)) -> Checked(x,y))", "all x y z.((Jared(x) & Phone(y) & Freeway(z)) -> CheckedBeforeRotating(x,y,z))", "all x.((Jared(x) & FreewayRoad(y)) -> ChecksPhone(x,y))", "all x.((Jared(x) & ChecksPhoneOnFreeway(x)) -> PullsOn(x))"]}
{"id": "enwn_validation_145", "nl": "Checking your phone takes your attention off of whatever else you're doing.", "fol": "", "prediction": ["all x.(ChecksPhone(x) -> TakesAttentionOffOfAnyPhone(x))", "all x.(CheckingPhone(x) -> TakesAttentionOffOf(x,Than(x)))", "all x y z.((Phone(x) & (Doing(y) | Trying(z))) & Checks(x,y)) -> TakesAttentionOff(x,z))", "all x.(CheckPhone(x) -> TakesAttentionOff(x))", "all x.(CheckingPhone(x) -> TakesAttentionOffOfMore(x))", "all x.(CheckingPhone(x) -> TakesAttentionOff(x))", "all x.(CheckingPhone(x) -> (TakesAttentionOffOfWhatever(x) & Doing(x)))", "all x y.((CheckingPhone(x) & Activity(y)) -> TakesAttentionOffOf(x,y))", "all x.(CheckingPhone(x) -> TakesAttentionOffOf(x,y))", "all x.(ChecksPhone(x) -> TakesAttentionOffOf(x))", "all x y.((Phone(x) & Doing(x)) -> TakeAttentionOff(x,y))", "all x y.((Phone(x) & Checking(x)) -> TakesAttentionOffOf(x,y))", "all x.(ChecksPhone(x) -> TakesAttentionOffOfExercise(x))", "all x.(CheckingPhone(x) -> TakesAttentionOffOfWhatHeyDoing(x))", "all x y.((CheckYourPhone(x) & Action(y)) -> TakesAttentionOf(x,y))", "all x y.((Smartphone(x) & Activity(y)) -> ThisTakesAttentionOff(x,y))"]}
{"id": "enwn_validation_146", "nl": "If something prevents you from doing the right thing, it's wrong.", "fol": "", "prediction": ["all x.((ProtectsTheRightThing(x) & WrongThing(x)) -> CorrectSignificant(x))", "all x.(ProhibitsDoingRightThing(x) -> Wrong(x))", "all x.((ProtectsYouFromActingRight(x)) -> Wrong(x))", "all x.(ProbableFromDoingCorrectThing(x) -> Wrong(x))", "all x.((Protects(x) & RightThing(x)) -> Wrong(x))", "all x.((ProtectsDoingRightThing(x)) -> Wrong(x))", "all x.((ProtectsYouFromDoingRightThing(x)) -> WrongThing(x))", "all x.((ProhibitsFittingRightThing(x) & Worst(x)) -> Wrong(x))", "all x.((PoorTweet(x) & PreventsLeftTask(x)) -> -WrongTask(x))", "all x.((Protects(x) & RightThing(x)) -> Wrong(x))", "all x.(ProtectsFromDoingRightThing(x) -> Wrong(x))", "(ProhibitsRightThing(x) | WrongThing(x)))", "all x.((ProtectsFromDoingRightThing(x)) -> Wrong(x))", "all x.((Protects(x) & RightThing(x)) -> Wrong(x))", "all x.(PoorYou(x) -> Wrong(x))", "all x.((PreventsRightThing(x)) -> Wrong(x))"]}
{"id": "enwn_validation_147", "nl": "You should always drive safe.", "fol": "", "prediction": ["all x.(DrivesSafe(x) -> Always(x))", "all x.(DriveSafe(x) -> AlwaysDriveSafe(x))", "all x.(DriveSecure(x) -> AlwaysDriveSafe(x))", "all x.(DriveSafe(x) -> AlwaysDriveSafe(x))", "all x.((DriveSafe(x)) -> AlwaysDriveSafe(x))", "all x.(DriveSafe(x) -> AlwaysDriveSafe(x))", "all x.(DriveSafe(x) -> Safe(x))", "all x.(DriveSafe(x) -> AlwaysDriveSafe(x))", "all x.(DriveSafe(x) -> AlwaysDriveSafe(x))", "all x.(DriveSafe(x) -> AlwaysDriveSafe(x))", "all x.(DriveSafe(x) -> AlwaysDriveSafe(x))", "all x.(DriveSafe(x) -> AlwaysDriveSafe(x))", "all x.(DrivingSafe(x) -> AlwaysDrivesSafe(x))", "all x.(DriveSafe(x) -> AlwaysDriveSafe(x))", "all x.(DriveSafe(x) -> AlwaysAt(x))", "all x.(DrivesSafe(x) -> AlwaysDrivesSafe(x))"]}
{"id": "enwn_validation_148", "nl": "Jared took his attention off of driving to check his phone.", "fol": "", "prediction": ["all x y z.((Jared(x) & Auto(y) & Phone(z)) -> TakedAdviceOffOfToCheck(x,y,z))", "(And off ofDriving(Jared) -> ChecksPhone(Jared))", "all x.((Jared(x) & -DrivesAndChecksPhone(x)) -> TakesAttention(x,x))", "all x.((Jarred(x) & AttentionOffDriving(x)) -> ChecksPhone(x))", "all x.((Jared(x) & AttentionStill(x)) -> CheckPhone(x))", "all x y.((Jared(x) & Driving(y) & CheckPhone(x)) -> DistractedAttention(x,y))", "(Nimble(AndDrives(Jared) | OnAutomatic(Jared)))", "all x.((MeToo(x) & AttentionOffDriving(x)) -> ChecksPhone(x))", "all x.((Jared(x) & AttentionOffDriving(x)) -> CheckApp(x,i,y))", "all x y.((Jared(x) & Phone(y)) -> DistractedFrom(x,y))", "Jared took hisattentionoffofDrivingToCheckPhone(Jared)", "(Sweet(Jared) & UnfoldedAttention(Jared) & CheckedPhone(Jared))", "all x.(Jared(x) -> (TakesAttentionOffDrives(x) & ChecksPhone(x)))", "all x y.((Jared(x) & Phone(y)) -> TakesAttentionOffDriver(x,y))", "(RemovedAttentionFromDrivingToCheckPhone(Jared))", "all x.((Jared(y) & AttentionOnDriving(y)) -> CheckedPhone(y))"]}
{"id": "enwn_validation_149", "nl": "Checking his phone prevented Jared from driving safely.", "fol": "", "prediction": ["the latest in a series of incidents leading to the death of Jared.", "all x.(CheckingPhone(x) -> AvertsDriving(x))", "(CheckingPhone(Jared) -> PreventsDrivingSafely(Jared))", "Jared's car crash was prevented by checking his phone.", "all x.(CheckingPhone(x) -> PreventsDrivingSafely(x))", "all x.(CheckingPhone(x) -> PreventsDiagning(x))", "all x y.((Jared(x) & Phone(y)) -> CheckedNotChecked(x,y))", "all x.(ChecksPhone(x) -> PreventsDrivingSafely(x))", "(CheckingPhone(f) -InterruptsDriving(f))", "all x.(CheckingPhone(x) e.DrivingSafely(y)) -> JaredContrayed(z))", "all x y.((ArrivalPay(x) & Phone(y)) -> RefusalToCarry(x,y))", "(CheckingPhone(Jared) & -DrivingSafely(Jared))", "all x.(CheckingPhone(x) -> PreventsDrivingS\u00e9curely(x))", "all x.(CheckingPhone(x) -> PreventsDriving(x,Jared))", "all x.(CheckingPoliphone(x) -> -HasJaredCarless(x))", "all x.(CheckingPhone(x) -> PreventsRigging(x))"]}
{"id": "enwn_validation_150", "nl": "You shouldn't do anything that prevents you from driving safe.", "fol": "", "prediction": ["all x.((DoesNotInterruptDriveSafe(x)) -> -Do(x))", "all x.((Does(x) & PreventsDriveSafe(x)) -> WeighsIn(x,y))", "all x.((Do(x) & PreventsYouFromDrivingSafe(x)) -> -Do(x))", "all x.((DoesNotHaveDrivingSafe(x)) -> -IsProhibited(x))", "all x.((Does(x) & PreventsDrivingSafe(x)) -> -Do(x))", "all x.((YouBake(x) & -ProhibitsDrivingSafe(x)) -> -DrivingSafe(x))", "all x.((Does(x) & PreventsDrivingSafe(x)) -> -(DrivingSafe(x) | -DrivingSafe(x))))", "all x.((Does(x) & PreventsDrivingSafe(x)) -> -Does(x,y))", "all x.((Does(x) & PreventsDrivingSafe(x)) -> -DrivingSafe(x))", "all x.((Facility(x) & PreventsDriveSafe(x)) -> -ProtectsDriveSafe(x))", "all x.(Does(x) -> -ProtectsDrivingSafe(x))", "all x.((DoesNever(x) & PreventsDriveSafe(x)) -> DriveSafe(x))", "all x.((Don'tDo(x) & PreventsDriveSafe(x)) -> -InterruptsLivinSafe(x))", "all x.((Does(x) & PreventsDrivingSafe(x)) -> -Do(x))", "all x.((DoesThis(x) & PreventsDrokingSafe(x)) -> -(DrivingSafe(x) | DrivingSafe(x))))", "all x.((DrivingSafe(x) & -Does(x)) -> -Does(x))"]}
{"id": "enwn_validation_151", "nl": "Jared should not have checked his phone.", "fol": "", "prediction": ["all x.((Jared(x) & Phone(y)) -> Shouldn'tChecked(x,y))", "-CheckedPhone(Jared)", "Jared should not have checked his phone.", "Jared should not have checked his phone.", "Jared shouldn't have checked Phone.", "jared should have checked his phone.", "-CheckedPhone(Jared)", "jared -checkedPhone(a) -> ShouldNoRecognition(b))", "Jared should not have checked his phone.", "Jared should not have checked phone.", "Jared should not have checked his phone.", "Jared should not have checked his phone.", "Jared should not have checked phone.", "jared should not have checked his phone.", "and should have checkedPhone(Jared)", "Jared should not have checked his phone."]}
{"id": "enwn_validation_152", "nl": "There are some people who haven't gotten a slice yet.", "fol": "", "prediction": ["exists x.(Person(x) & -HasSlice(x))", "exists x y.(Person(x) & Person(y) & -HasSlice(x,y))", "exists x.(Person(x) & -HasSlice(x))", "exists x.(Person(x) & -GasSlice(x))", "exists x.(Person(x) & -HasSlice(x))", "exists x.(Person(x) & -GettingSlice(x))", "exists x.(Person(x) & -HasSlice(x))", "exists x.(Person(x) & -GeathedSlice(x))", "exists x.(Person(x) & -HasSliceTogether(x))", "exists x.(Person(x) & -GetsSlice(x))", "exists x.(Person(x) & -HasSlice(x))", "exists x.(Person(x) & -HasSlice(x))", "exists x.(Person(x) & -GaveSlice(x))", "exists x.((Person(x) & -HasSlice(x))", "exists x.(Person(x) & -GettingSlice(x))", "exists x.(Person(x) & -GivenSliceToday(x))"]}
{"id": "enwn_validation_153", "nl": "Taking a second portion before someone else has gotten a first portion is unfair.", "fol": "", "prediction": ["all x y.((TwelvePerson(x) & Person(y)) -> Unfair(x))", "all x.(AnswerTakesSecondParticipation(x) -> Unfair(x))", "all x y.((Further(x) & Person(y) & GetsFirstPortion(x,y)) -> Unfair(x))", "all x.((TakingSecondPiece(x) & TakenBeforeFirstPiece(x)) -> Unfair(x))", "all x y.((SecondPurchase(x) & FirstPurchase(y)) -> Unfair(x,y))", "all x.((TakesSecondPurchase(x) & SomeoneOtherTakesFirstPurchase(x)) -> Unfair(x))", "all x y.((Mother(x) & SecondPurchase(y) & SecondParticipation(x,y)) -> Unfair(x))", "all x y.((TakesSecondParty(x) & TakesFirstParty(y)) -> Unfair(x))", "all x y.((TakesSecondParticipation(x) & SomeoneInThePurchase(x,y)) -> Unfair(x))", "all x.((TakesSecondPurpose(x) & TakesFirstPurpose(x)) -> Unfair(x))", "all x y.((TotakeSecondParticipation(x) & WhoOf(y) & TakesFirstParticipation(x,y)) -> Unfair(x))", "all x.((TakesSecondPurchase(x) & TakesFirstPurchase(x)) -> Unfair(x))", "all x y z.((Purchase(x) & Person(y) & Portion(z) & Takes(x,y,z) & Gains(x,y,z)) -> Unfair(y,z))", "all x y.((TakeSecondPurpose(x) & RequestedFirstPurpose(y)) -> Unfair(x))", "all x y.((SixthPurchase(x) & Person(y)) -> Unfair(x,y))", "all x.((TaskSecondParty(x) & SomeoneOtherGivesFirstParty(x)) -> Unfair(x))"]}
{"id": "enwn_validation_154", "nl": "You want to take a second slice of pizza.", "fol": "", "prediction": ["all x.((ChickenPizza(x) & TakesSecondSlice(x)) -> TakesSecondSlice(x))", "all x.(TwoSliceOfPizza(x) -> YouWantToTake(x,2).)", "all x.((IsFun(x) & TakesSextefPizza(x)) -> WrongSliceOfPizza(x))", "all x.((SliceOfPizza(x) & TakeSecond(x)) -> TakeSecond(x,Pizza))", "all x.(AndTwoSliceOfPizza(x) -> WantsToTake(x,Pizza))", "all x.(TasteOfPizza(x) -> TakeSecondChickenOfPizza(x))", "all x.(TakesecondSliceOfPizza(x) -> WantsToTakeApplePizza(x))", "all x.((AnotherPizza(x) & TakeSecond(x,Pizza)) -> Takes(x,Pizza))", "all x.(CarrySecondSliceOfPizza(x) -> TakesSecondSliceOfPizza(x))", "there is a second slice of pizza.", "you want to take a second slice of pizza.", "all x.((SliceOfPizza(x) & WantsSecond(x, Pizza)) -> Takes(x,10))", "all x.((SliceOfPizza(x) & TakeSecond(x)) -> VisitDownloadpizza(x,PCI))", "exists x.(Pizza(x) & TakeSecondSlice(x))", "all x.(SliceOfPizza(x) -> WantToTakeSecondSliceOfPizza(x))", "all x.((TakeSecondSliceOfPizza(x) & Done(x)) -> TakeSecondSliceOfPizza(x))"]}
{"id": "enwn_validation_155", "nl": "If you want to do something, but it's too soon, you should wait.", "fol": "", "prediction": ["all x.((WantToDo(x) & TooOld(x)) -> ShouldWarmAndHave(x))", "all x y.((WantToDo(x,y) & TooYoung(y)) -> WaitLayOut(x))", "all x y.((Want(x) & -WantToDo(x,y) & TooFast(x)) -> Wait(y,x))", "all x y.((Interest(x) & WantsToBeLoud(x) & (TooFast(x) | TooFast(x))) -> ShouldWait(x,y))", "all x.((WantToDo(x) & TooFast(x)) -> ShouldWarn(x))", "all x.((YouWantToDo(x) & TooFast(x)) -> Wait(x))", "all x.((WantToDo(x) & TooFast(x)) -> Wait(x))", "all x.((WantToDoButTooFoot(x) & TooFast(x)) -> ShouldWarn(x))", "all x.((Tax(x) & TooJuicy(x)) -> ShouldWear(x))", "all x.((WantToDo(x) & TooJunly(x)) -> ShouldStop(x))", "all x.(((Doing(x) & TooJawy(x)) -> Wait(x)))", "all x.((WantToDo(x) & TooFast(x)) -> ShouldWait(x))", "all x.((Want(x) & TooWear(x)) -> ShouldWait(x))", "all x.((WantToDo(x) & TooFast(x)) -> Wait(x))", "all x.((WantToDo(x) & TooOpportun(x)) -> ShouldWeakWarmand(x))", "all x.((Cases(x) & TooOtherThanTime(x)) -> Wait(x))"]}
{"id": "enwn_validation_156", "nl": "It's too soon to take a second slice.", "fol": "", "prediction": ["all x.((Globe(x) & TooFastToTakeSlice(x)) -> TooFastToTakeSlice(x))", "all x.(ThoughtToTakeSlice(x) -> TooOldForSlice(x))", "all x.(EnoughToOnceToTakeShard(x,y))", "all x.((Slice(x) & TooFastToTake(x,second)) -> TooFastToTake(x,second))", "all x.(ThanOldToTakeSlice(x) -> -FirstSlice(x))", "all x.(Shortcut(x) -> TooPrematureToTake(x,Slice,Slice))", "all x.(Slice(x) -> TooOldToTakeSlice(x))", "all x.(FoottoTakeSlice(x) -> TooFastToTakeSlice(x))", "all x.(TweenSlice(x) -> TooHolyToTake(x,2))", "all x.((PoorSlice(x) & TooFast(x)) -> SliceSide(x))", "all x.((TooFastToTakeSlice(x)) -> TooFast(x))", "-> TooFastToTakeSlice(*)", "all x.(PositionTooFastToTakeSlice(x) -> TooFastToTakeSlice(x))", "all x.((Slice(x) & TooFastToTake(x)) -> TooOppressed(x))", "all x.(WasTooEarlyToTakeSlice(x) -> IsTooOld(x))", "all x.((TimingToFollowSlice(x)) -> TooLateToTake2ndSlice(x))"]}
{"id": "enwn_validation_157", "nl": "You want to take a slice of pizza but it's too soon.", "fol": "", "prediction": ["all x.((Pizza(x) & TooJuicy(x)) -> WantsToTake(x,1))", "exists x y.((Pizza(x) & Slice(y) & TooJay(x)) -> CanYouTake(x,y))", "-(YouWantToTakePizza(x) & TooJawful(x))", "-(TakePrimeOfPizza(x) & TooFast(x))", "all x.((YouWantToTakePizza(x) & isTooSoon(x)) -> -RequiresSteepOfPizza(x))", "exists x.(PizzaPizza(x) & Takes(x,y) & TooEarly(y))", "(YouWantToTakePizzaButTooFast(YouThanTakePizza(YouThanTakePizza(YouThanTakePizza(YouThanTakePizza(YouThanTakePizza(YouThan10)))", "all x.((LikesToTakePizza(x) & TooFast(x)) -> TooFast(x))", "(SliceOfPizza(x) -> (WantToTake(x,y) & TooThanOuch(y)))", "exists x.(Meets(x) & TooJunior(x))", "(ShowNeedsPoint(pizza) | TooFootforward(pizza)))", "all x.((Yoy(x) & SliceOfPizza(x) & TooJuicy(x)) -> WantToTake(x,y))", "all x.((TakeSliceOfPizza(x) & TooPoor(x)) -> TooFast(x))", "((TakeSliceOfPizza(x) & TooJunior(x)) | TakeSliceOfPizza(x)))", "all x.((Pizza(x) & TooFast(x)) -> WantsToTake(x,x))", "exists x.((Pizza(x) & WantsToTake(x,10)) & -TooFast(x))"]}
{"id": "enwn_validation_158", "nl": "You should wait before taking a second slice of pizza.", "fol": "", "prediction": ["all x.((BakeSliceOfPizza(x) & WaitBefore(x)) -> TakeSecondSliceOfPizza(x))", "all x.((Pizza(x) & -Prime(y)) -> WaitOrTaste(x,y))", "all x.((Pizza(x) & TakesSecond(x)) -> WaitUntilTakesFirst(x))", "all x y.((SliceOfPizza(x) & Pizza(y)) -> WaitBefore(x,y))", "all x y.((Shelf(x) & SliceOfPizza(y) & Take(x,y)) -> WaitBefore(x,y))", "all x.((Pizza(x) & SecondPizza(x)) -> Waits(x))", "all x.((PizzaTwoSlices(x) & WaitBefore(x)) -> Done(x))", "all x.((TakesSecondSliceOfPizza(x)) -> Waits(x))", "all x.((ReallyAppealsToSlice(x) & WaitsForSlice(x)) -> TakesSliceOfPizza(x))", "all x.((Pizza(x) & SecondSlice(x)) -> Wait(x))", "all x.((Pizza(x) & SecondChicken(x)) -> WaitFor(x))", "(TwoSliceOfPizza(x) -> WaitFor(x))", "all x y.((Pizza(x) & Pizza(y)) -> Wait(x,y))", "all x.(TakeSecondSliceOfPizza(x) -> Wait(x))", "all x.((Pizza(x) & TakesSecond(x)) -> Waits(x))", "all x y.((Pizza(x) & SecondSlice(y)) -> Wait(x))"]}
{"id": "enwn_validation_159", "nl": "Murder means killing someone with premeditation.", "fol": "", "prediction": ["all x.(Murder(x) -> KillPeople(x))", "all x.(Murder(x) -> Kills(x,Pr\u00e4meditation))", "all x.(Murder(x) -> KillsPersonWithPremeditation(x))", "all x.(Murder(x) -> Kills(x,Prameditation))", "all x.(Murder(x) -> KillsPersonWithPremeditation(x))", "all x y.((Murder(x) & Person(y)) -> KillsWithPremeditation(x,y))", "all x y.((Murder(x) & Person(y)) -> KillsWithPremeditation(x,y))", "all x.(Murder(x) -> (kills(x,y) & Premeditation(x)))", "all x.(Murder(x) -> KillsPersonWithPremeditation(x))", "all x.(Murder(x) -> (MoreToPerson(x) & Premeditation(x)))", "all x.(Murder(x) -> (Making(x,p) & Premeditation(n)))", "all x y z.((Murder(x) & Person(y) & Premeditation(z)) -> Kills(x,y,z))", "all x.(Murder(x) -> KillsWithPremeditation(x))", "all x.(Murder(x) -> KillingPersonWithPremeditation(x))", "all x.(Murder(x) -> KillsWithPremeditation(x))", "all x.(Murder(x) -> KillsWithPremeditation(x))"]}
{"id": "enwn_validation_160", "nl": "Premeditation means thinking through something before doing it.", "fol": "", "prediction": ["all x.(Premeditation(x) -> ThinksThoughThoughToDo(x))", "all x y.((Premeditation(x) & ThinkingThrough(x,y)) -> Doing(y))", "all x y.((Premeditation(x) & Something(y)) -> ThinksThrough(x,y))", "all x.(Premeditation(x) -> ThinksThroughEgo(x))", "all x.(Premeditation(x) -> ThinksThoughlyBeforeDoing(x))", "all x.(Premeditation(x) -> ThinksThroughAt(x,y))", "all x y.((Premeditation(x) & TheThinning(x,y) & Did(y)) -> ThinksThrough(x,y))", "all x.(Premeditation(x) -> (ThinkingThrough(x) & Doing(x)))", "all x y z.((Premeditation(x) & Mindset(y) & Project(z)) -> ThinksThrough(x,y,z))", "all x y z.((Premeditation(x) & ThinkingThrough(y) & Doing(z)) -> Does(x,y,z))", "all x.(Premeditation(x) -> ThinkingThrough(x))", "all x y.((Premeditation(x) & (ThinkingThrough(y,x) | Doing(y,x))) -> ThinkingBefore(x,y))", "all x.exists y.(Premeditation(x) -> ThinkUp(y,x))", "all x.(Premeditation(x) -> ThinksThough(x))", "all x.(Premeditation(x) -> ThinksThroughWithoutDoing(x))", "all x.(Premeditation(x) -> ThinksAfter(x,y))"]}
{"id": "enwn_validation_161", "nl": "David bought anthrax, then used it to try and kill Ingrid.", "fol": "", "prediction": ["All x y.((David(x) & Anthrax(y) & Ingrid(z)) -> PurchasesAndTried(x,y,z))", "all x y.((David(x) & Ingrid(y)) -> (BuysAnthrax(x,y) & UsesAnthraxToKill(x,y)))", "all x y.((David(x) & Artist(y)) -> (BuysAthrax(x,y) & AttemptsToKillIngrid(x,y)))", "all x y.((Doug(x) & Ingrid(y)) -> (BuysAnthrax(x,y) & UsesAnthrax(x,y)))", "all x y z.((David(x) & Anthony(y) & Grid(z)) -> (Buys(x,y) & UsedForTryAndKill(x,z)))", "all x y z.((Hank(x,y) & Anthrax(y) & Ingrid(z)) -> (Buys(x,y) & Kills(x,z)))", "all x.((David(x) & BuysAnthrax(x)) -> KillsIngrid(x))", "all x y.((David(x) & Ingrid(y)) -> (BoughtAnthrax(x,y) & UsedAnthrax(x,y)))", "(BoughtAnthrax(David) & UsedAnthrax(David,Ingrid))", "all x.((Doug(x) & BuysAnthrax(x)) -> (TrysToKillIngrid(x)))", "all x y z.((Download(x) & PurchasedAnthrax(x) & Ingrid(y) & PurchasedAnthrax(x,y)) -> Kills(x,y))", "all x y.((David(x) & Ingrid(y)) -> (BuysAnthrax(x,y) & UsesAnthraxToKill(x,y)))", "all x y.((Doctor(x) & Ingrid(y)) -> BuysAnthrax(x,y))", "all x y z.((David(x) & Anthrax(y) & Ingrid(z)) -> (Buys(x,y) & UsedToTriedAndKill(x,y)))", "all x y.((David(x) & Ingrid(y)) -> (BuysAnthrax(x,y) & UsesAnthrax(x,y)))", "all x.(Bought(y,x) -> Purchased(y,x))"]}
{"id": "enwn_validation_162", "nl": "Buying supplies for something is part of planning for something.", "fol": "", "prediction": ["all x y.((Supply(x) & Project(y)) -> Purchase(x,y))", "all x.(BuyingProductsFor(x) -> PartOfPlanning(x))", "all x y.((BuysSupplies(x,y) & Something(y)) -> PlansFor(x,y))", "all x y.((BuysSupplies(x) & Something(y)) -> PartOfPlanning(x,y))", "all x y z.((Assembly(x) & Supplies(y) & Project(z)) -> PlanFor(x,y,z))", "all x.(BuysSupplies(x) -> PlanningFor(x))", "all x y.((BuysSupplies(x) & Something(y)) -> PlandFor(x,y))", "all x.(BuysSupply(x) -> PartOfPlanningFor(x))", "all x y.((Supply(x) & Need(y)) -> Plan(x,y))", "all x y.((BuysSupplies(x) & BuyingForProduct(x,y)) -> PlanningForProduct(x,y))", "all x y.((Purchase(x) & Supply(y)) -> PartOfPlanningFor(x,y))", "all x.((BuysSuppliesFor(x) & Buying(x)) -> PlanningFor(x))", "all x.(BuySupplies(x) -> PartOfPlanningFor(x,y))", "all x.(Buying(x) -> PlanningFor(x))", "all x.(Product(x) -> PlanningFor(x))", "all x.(BuysSuppliesForSomething(x) -> PlansForSomething(x))"]}
{"id": "enwn_validation_163", "nl": "David planned to kill Ingrid before trying to kill her.", "fol": "", "prediction": ["planned to kill Ingrid(David)", "ingrid.(David,Ingrid) > (PlannedToKill(David,Ingrid)) | PlansToKill(David,Ingrid)))", "all x.(PlannedToHaveIngrid(x) -> IngridTreatment(x))", "Ingrid invents death plan.", "David planned to kill Ingrid(David) & AttemptedToKillIngrid(David,Ingrid))", "all x.((David(x) & Ingrid(y)) -> \"PlannedToKill(x,y) & AttemptedToKill(x,y)))", "(PlannedToKillIngrid(Diva) & -TriedToKillIngrid(diva))", "(Plan(David,Ingrid) & AttemptsToKill(David,Ingrid))", "David planned to kill Ingrid (David)", "(PlantedToKillIngrid(Dr.David,Ingrid) & TriedToKillHer(David,Ingrid))", "David planned to kill Ingrid and Eventually HackedToTouchShe(i)", "all x y z.((David(x) & Ingrid(y) & PlannedToKill(x,y) & PlannedToKill(x,z)) -> Try(z))", "all x y.((David(x) & Ingrid(y)) -> PlantedToKill(x,y))", "all x y.((David(x) & Ingrid(y)) -> (Plants(x,y) & Kills(x,y)))", "all x y.((David(x) & Ingrid(y)) -> PlannedToKill(x,y))", "all x y.((David(x) & Ingrid(y)) -> (PlantToKill(x,y) & TriedToKill(x,y)))"]}
{"id": "enwn_validation_164", "nl": "David tried to kill Ingrid in a premeditated way.", "fol": "", "prediction": ["all x.((David(x) & Ingrid(x)) -> PremeditatedDeath(x))", "(premeditated) & David triedToKill(Dodd) & Ingrid(Ingrid) & inDesert(Ingrid,Ingrid))", "all x y z.((Document(x) & Ingrid(y) & David(z) & Kills(x,y)) -> Premeditated(z))", "all x y.((Voice(x,y) & Ingrid(x)) -> Premeditated(y))", "all x y.((David(x) & Ingrid(y)) -> (TriedToKillInmediately(x,y) & Ingrid(x)))", "all x y z.((David(x) & Ingrid(y) & Premeditated(z)) -> Killed(x,y,z))", "all x.((David(x) & Ingrid(x) & PremeditatedWait(x)) -> Kills(x,Ingrid,Ingrid))", "all x y z.((David(x) & Ingrid(y) & Premeditated(z)) -> (TriedToKill(x,y,z) & Premeditated(y,z)))", "all x y.((Violet(x) & Ingrid(y) & Premeditated(x)) -> Kill(x,y))", "all x.((David(x) & Ingrid(x)) -> WasPremeditated(x))", "((Zionist(Datan) & Ingrid)) -> TrysToKill(Datan,Ingrid,Ingrid)))", "all x y.((David(x) & Ingrid(y)) -> WantedToKill(x,y))", "all x.((David(x) & Ingrid(x)) -> TrysToKill(x,Premeditated))", "all x y.((David(x) & Ingrid(y)) -> TriedToKill(x,y))", "(PremeditatedMutual(David))", "all x y.((David(x) & Ingrid(y)) -> InPremeditatedHow(x,y))"]}
{"id": "enwn_validation_165", "nl": "David tried to murder Ingrid.", "fol": "", "prediction": ["(TemptedToMorrorIngrid(David) & IngridMet(David))", "-((David(David) & Ingrid(Ingrid)))", "(AttemptedToMornIngrid(David) & Ingrid(Ingrid))", "(TriedToMorrowIngrid(David,Ingrid) -> MowedIngrid(David,Ingrid))", "(TempleMajeredIngrid(David).", "all x.(Dead(x) -> TriedToMornIngrid(x))", "all x.((David(x) & Ingrid(n)) -> DeathTry(x,n,u))", "all x y.((David(x) & Ingrid(y)) -> A TriedToMorn(x,y))", "(ToldToMade(David,Ingrid) & Ingrid(David,Ingrid,David))", "(TriedToMorn(David,Ingrid) -> DecidedToMorn(David,Ingrid))", "(TriedToMoral(David,Ingrid))", "David tried to murder Ingrid.", "All x y.((Dodd(x) & Ingrid(y)) -> TriedToMurder(x,y))", "David triedToMurderIngrid(David)", "all x.((David(x) & Ingrid(y)) -> TriedToMurder(x,y))", "(StupidMetery(David) | KillIngrid(David)))"]}
{"id": "enwn_validation_166", "nl": "It's a faux pas to offer someone something they can't accept.", "fol": "", "prediction": ["all x.(FauxPas toOffer(x) -> CannotAccept(x))", "all x.(FauxPas toOfferTreatment(x) -> Can\u2019tAcquire(x))", "all x y.((FauxPast(x) & Offer(x,y) & Person(y) & -Accept(y)) -> FauxPast(x))", "all x.((OfferSomeplace(x) & CannotAccept(x)) -> FauxNast(x))", "all x.(FauxPasCourse(x) -> OffersFantasticPast(x))", "all x.(FauxPas(x) -> Furnish(x))", "all x y.((FauxPast(x) & Person(y) & Offers(y)) -> -CanAccept(y,x))", "all x y.((FauxPas(x) & Offers(x,y)) -> -CanAccept(x,y))", "all x.(FauxPas(x) -> (OfferThan(x,an) & Can'tAcCEPT(z)))", "all x.(FauxPasThanOffers(x) -> NotAcceptable(x))", "all x.(FauxPas(x) -> (OfferSomething(x) & CannotAccept(x)))", "all x y.((FauxPast(x) & Person(y) & Offering(x,y)) -> -CanAccept(y))", "all x.(FauxPasThanOffer(x) & -CanAccept(x))", "all x.(FauxPast(x) -> -OffersToOne(x))", "all x.(FauxPast(x) -> (OfferSomething(x,y) & (CannotAccommodate(x,y) | CannotAccommodate(x,y))))", "all x.((Offer(x,y) & Person(x) & AffiantPas(x)) -> Unacceptable(y))"]}
{"id": "enwn_validation_167", "nl": "Maria is pregnant.", "fol": "", "prediction": ["Maria isPregnant(Maris)", "(Pregnant(maria))", "-(Maria(Mariam) & Pregnant(Mariam))", "(Pregnant(Mara))", "Impotent(Maria)", "all x.(Maria(x) -> Pregnant(x))", "Maria isPregnant(Maria)", "-Pregnant(Maria)", "Maria isPregnant(Maria)", "Maria isPatient(a)", "Maria is pregnant.", "Successfull(Maria)", "Maria is enceinte.", "(Paternal(Maria))", "Maria isenceinte(Marice)", "Maria is pregnant."]}
{"id": "enwn_validation_168", "nl": "People who are pregnant shouldn't drink alcohol.", "fol": "", "prediction": ["all x.((Patient(x) & Pregnant(x)) -> -DrinkAlcohol(x))", "all x.((Patient(x) & DoneAlcohol(x)) -> DontDrink(x))", "all x.((Patient(x) & Pregnant(x)) -> -DrinkAlcohol(x))", "all x.((Patient(x) & Pregnant(x)) -> -DrinkAlcohol(x))", "all x.((Patient(x) & Pregnant(x)) -> -DoesAlcohol(x))", "all x.((Paternal(x) & DrinksAlcohol(x)) -> -ShouldDrinkAlcohol(x))", "all x.((Patient(x) & Pregnant(x)) -> -SuppressAlcohol(x))", "all x.((Pregnant(x) & DrinksAlcohol(x)) -> -DoesDrinkAlcohol(x))", "all x.(((Patient(x) & Pregnant(x)) -> -DrinksAlcohol(x))", "all x.((Patient(x) & (Pregnant(x) | Pregnant(x))) -> -DrinkAlcohol(x))", "all x.((Patient(x) & -DrinksAlcohol(x)) -> -DrinksAlcohol(x))", "all x.((Patient(x) & Pregnant(x)) -> -DrinkAlcohol(x))", "all x.((Pregnant(x) & DrinksAlcohol(x)) -> -shouldDrinkPotentially(x))", "all x.(Pregnant(x) -> -DrinksAlcohol(x))", "all x.((Patient(x) & Pregnant(x)) -> -DrinksAlcohol(x))", "all x.(Pregnant(x) -> -BuyAlcohol(x))"]}
{"id": "enwn_validation_169", "nl": "Beer is an alcoholic beverage.", "fol": "", "prediction": ["all x.(Beverage(x) -> Alcoholic(x))", "all x.(Beverage(x) -> AlcoholicBeverage(x))", "all x.(Beer(x) -> AlcoholicBeverage(x))", "all x.(Beer(x) -> AlcoholicBeverage(x))", "(AlcoholicBeverage(beer) & DrinksAlcoholic(beer))", "all x.(Beer(x) -> AlcoholicBeverage(x))", "all x.(Beer(x) -> AlcoholicBeverage(x))", "exists x.(Beer(x) & AlcoholicBeverage(x))", "all x.(Beer(x) -> AlcoholicBeverage(x))", "all x y.((Beer(x) & AlcoholicBeverage(y)) -> Is(x,y))", "all x.(Beer(x) -> AlcoholicBeverage(x))", "all x.(Beer(x) -> AlcoholicBeverage(x))", "all x.(Beer(x) -> AlcoholicBeverage(x))", "all x.(Beer(x) -> AlcoholicBeverage(x))", "all x.(Beers(x) -> AlcoholicBeverage(x))", "(AlcoholicBeverage(beer))"]}
{"id": "enwn_validation_170", "nl": "People who are pregnant shouldn't drink beer.", "fol": "", "prediction": ["all x.((Paternal(x) & DrinksBeverage(x)) -> -BreathesBeer(x))", "all x.((Patient(x) & Pregnant(x)) -> -DrinkBeer(x))", "all x.(Pregnant(x) -> -Drink(x,Beverage))", "all x.((Pregnant(x) & DrinksBeer(x)) -> Null(x))", "all x.((Prugnant(x) & -DrinkBeer(x)) -> -DrinkBeer(x))", "all x.((Patient(x) & HasPaternity(x)) -> -DrinkBeer(x))", "all x.((Patient(x) & Pregnant(x)) -> -DrinkBeer(x))", "all x.((Pregnant(x) & -DrinksBeer(x)) -> -DrinksBeer(x))", "all x.((Patient(x) & ConsumesBeer(x)) -> -DrinkBeer(x))", "all x.((Past(x) & DrinksBeer(x)) -> -DoesBeverage(x))", "all x.((Female(x) & Pregnant(x)) -> -DrinksBeers(x))", "all x.((Patient(x) & Pregnant(x)) -> -DrinkBeer(x))", "all x.((Paternal(x) -> -DrinkBeer(x))", "all x.((Patient(x) & DrinksBeer(x)) -> -shouldDrinkBeer(x))", "all x.(PeopleWhoPregnant(x) -> -DrinksBeverage(x))", "all x.((Patient(x) & Pregnant(x)) -> -DrinkBier(x))"]}
{"id": "enwn_validation_171", "nl": "Maria shouldn't drink beer.", "fol": "", "prediction": ["all x.((Maria(x) & DrinkBeer(x)) -> -DrinkBier(x))", "all x.((Mariette(x) & -Beer(x)) -> -Drinks(x,beer))", "all x.((Maria(x) & -DrinkBeer(x)) -> -DrinkBeer(x))", "-DrinksBeverage(Maria)", "all x.((Mari & -Beer(x)) -> -Crinks(x,beer))", "-(BeverageSacrament(Maria) & -Beer(Maria))", "Maria shouldn'tDrink(marie)", "-(Maria(Marie) -> -RiskBeer(Mari))", "all x.(Maria(x) -> -DrinkBeer(x))", "all x.((Maria(x) & -Beer(x)) -> -Done(x))", "Maria shouldn'tDrinkBeer(Maria)", "((Maria(Maria) | Beer(Maria)))", "all x.((Maria(x) & -Beverage(x)) -> -Drinks(x,Beer))", "all x.((Mara(x) & NoBeer(x)) -> ShouldNeverDrink(x,Beer))", "all x.(Mara(x) -> -DrinksBier(x))", "all x.(Beer(x) -> -DrinkBeer(x))"]}
{"id": "enwn_validation_172", "nl": "It would be a faux pas to offer Maria a beer.", "fol": "", "prediction": ["all x.(FauxPast(x) -> OfferBeerToMaria(x))", "all x.(FauxPast(x) -> OfferBerry(x))", "all x.(FauxPast(x) & OffersBerryTo(x,Mari,Maria,Maria))", "all x.((OfferBeer(x) & FakePas(x)) -> -DoesNotReplaceMaria(x))", "all x.(FauxPas toOfferBeer(x) -> MariaBeer(x))", "-FauxPas to OfferBerry(-RememberDigits(-))", "-FauxPastToOfferBeer(-Maria)).", "all x.(FauxPast(x) -> OfferBeerToMaria(x))", "(FauxPast(Maris) & OfferBeer(Mari))", "all x.(FauxPasThanOfferBeer(x,Mari))", "all x.((OfferBeer(x) & Maria(x)) -> FalsePast(x))", "all x.(CostOfOfferingBeverage(x) -> FakePast(x))", "all x.(FauxPasto(x) -> OffersBeer(x))", "All x.(FauxPast(x) -> OffersBeverage(x,y))", "all x.(FauxPas toOfferBeersToMama(x))", "all x.(FauxPast(x) -> OffersBeer(x))"]}
{"id": "enwn_validation_173", "nl": "Sandy tripped and spilled her hot coffee on Chris.", "fol": "", "prediction": ["Sandy tripped and spilledhotcoffee(sandy,sandy)", "(Tripped(Sandy,Chris) & SplurgedHotCoffee(Sandy,Chris))", "Sandy tripped and spilled hotcoffee on Chris.", "(Tripped(Sandy) & SpoonedHotCoffeeOnChristoph(Sandy))", "ALL X Y.((Sandy(x) & Chris(y)) -> (Tripping(x) & SpillingHotCoffee(x,y)))", "all x y z.((Sandy(x) & Chris(y) & HotCoffee(z)) -> TrippedAndSpread(x,z))", "(Tripped(Sandy) & SplendsHotCoffeeOnChris(Standard))", "(Texts(Sandy) & SpillsHotCoffeeOnChris))", "all x.(SandyTrippedAndSprinkledHotCoffee(x) -> ChrisInGraze(x))", "all x.(Sandy(x) -> (Tripped(x) & SpilledHotCoffee(x)))", "-SandyTrippedAndSpreadHotCoffeeOnChris.", "Sandy tripped and spilled hotcoffee(Sandy)", "(Tripped(Sandy) & SprinkledCoffee(Sandy,Chris))", "(TrippedAndSpandedCoffeeOnMrChris(Sandy))", "(Tripped(Sandy) & SplendidHotCoffeeOnChris(Sandy))", "(TrippingOverCoffee(Sandy) & SpooningHotCoffee(Sandy))"]}
{"id": "enwn_validation_174", "nl": "When someone spills hot coffee on you, it hurts.", "fol": "", "prediction": ["all x y.((Person(x) & SpillsHotCoffeeOn(x,y)) -> Hurts(y))", "all x.((Person(x) & SpillsHotCoffee(x)) -> Hurts(x))", "all x.((People(x) & SpillsHotCoffeeOn(x)) -> Illness(x))", "all x.(Spokens(x) -> Hurts(x))", "all x y z.((Person(x) & HotCoffee(y) & Spoons(x,y) & Person(z)) -> Hurts(x))", "all x y.((Person(x) & SpillsHotCoffee(x)) -> Hurt(x))", "all x.((SpreadsCoffeeOnYou(x) & Person(x)) -> HelpsIllnesses(x))", "all x.(SpokensHotCoffeeOn(x) -> Hurts(x))", "all x.(SpoutsHotCoffeeOnYou(x) -> Hurts(x))", "all x.(SpreadsHotCoffee(x) -> Hurts(x))", "all x y.((DespatchesHotCoffee(x) & Person(y)) -> Irreparable(x))", "all x.(SpreadsHotCoffeeOn(x,You) -> Hurts(x))", "all x y.((Person(x) & SpillsHotCoffeeOn(x,y)) -> Illness(x))", "all x y.((Person(x) & SpilsHotCoffee(x) & Person(y)) -> Hurts(x))", "all x.(SpoilsHotCoffeeOnYou(x) -> Heals(x))", "all x.(SpreadsHotCoffeeOn(x,y) -> Hurts(x))"]}
{"id": "enwn_validation_175", "nl": "If someone does something that harms you, you will get angry at them.", "fol": "", "prediction": ["all x.(HasTrolls(x) -> GetAngryAt(x))", "all x y.((Does(x,y) & Person(y)) -> HarmsYou(x))", "all x.((DoesHazards(x) & Person(x)) -> GetAngryAt(x))", "all x y.((Other(x) & Action(y) & Harms(y)) -> Anger(x))", "all x.((Does(x,y,z) & Harms(y,z)) -> YouGetAngryAt(z,x))", "all x.((Does(x,y) & Harms(x,y)) -> Anger(x))", "all x.((Does(x,y) & HarmsYou(x)) -> GetAngryAt(x,y))", "all x.((DoesInflict(x) & Harms(x)) -> GetAngry(x))", "all x.((DoesNotHarm(x) & Person(x)) -> You\u2019ll GetAngryAt(x,x))", "all x.((Does(x,y) & HarmsYou(x)) -> RefusesAngryAt(y))", "all x.((Does(x,y) & Harms(y)) -> Afraid(x))", "all x.(DoesWhatHarms(x) -> GetAngryAt(x))", "all x y.((DoesWhatHarms(x) & Person(y)) -> GetAngryAt(x,y))", "all x.((DoesWhatHarms(x) & People(x)) -> GetAngryAt(x))", "all x.((DoesWhatHarms(x)) -> GetAngryAt(x))", "all x.((DoesPseudoHarms(x)) -> RaisedAt(x))"]}
{"id": "enwn_validation_176", "nl": "If you did not mean for something to happen, it was a mistake.", "fol": "", "prediction": ["all x.((Mean(x) & -MeanForSomethingToAct(x)) -> Mistake(x))", "all x.((MeantToNotHaveAttraction(x) & -MeanForHaveAttribution(x)) -> Mistake(x))", "all x.((Said(x) & -MeanFor(x,something)) -> Mistake(x))", "all x.((Form(x) & -MeantForProgress(x)) -> Mistake(x))", "all x.(((Meaning(x) & NotHasTurn(x)) -> Mistake(x))", "all x.(MakingPreference(x) -> Mistake(x))", "all x.((Mean(x) & -IntendedToHaveEvent(x)) -> Mistake(x))", "all x.(((MeansFor(x,y) & -HasHappened(x,y)) -> Mistake(x))", "all x.((MakingNotForThing(x) & -MakingJustinFall(x)) -> Mistake(x))", "all x.((MeansFor(x,y) & -MeansFor(x,z)) -> Mistake(x))", "all x.((Meaning(x) & -StoodToOccur(x)) -> Mistake(x))", "all x.((MeantForNegative(x) & -MeantForHasStorm(x)) -> Mistake(x))", "all x.((DoesSoCause(x) & NotMeaning(x)) -> Mistake(x))", "all x.((Negative(x) & -CausedToAct(x)) -> Mistake(x))", "all x.((Meanings(x) & -HasHasHaven(x)) -> Mistake(x))", "all x.((MeanFor(x,y) & -MeanFor(x,y)) -> Mistake(x))"]}
{"id": "enwn_validation_177", "nl": "Sandy did not mean to spill her coffee.", "fol": "", "prediction": ["all x.((Sandy(x) & -(SpringCoffee(x) | SplurgingCoffee(x))) -> -SpreadCoffee(x))", "(NoMean(Sandy,Coffee))", "Sandy neasmss to SpillCoffee(nd)", "(-MeantToSpringCoffee(Sandy)", "and Sandy was not gonna spill her coffee.", "all x.(Sandy(x) -> -MeditatedToSpreadCoffee(x))", "all x.(Sandy(x) -> -SpringsCoffee(x))", "(-MeantToSpreadCoffee(Sandy))", "all x.((Sandy(x) & -SpreadsCoffee(x)) -> -SpreadsCoffee(x))", "(-SandyMeaning(Sandy) -> SpontaneousCoffee(Sandy))", "(NotForCafe(Sandy) & -Shaped(Sandy,Coffee))", "all x.(Sandy(x) -> -MovesToSpreadCoffee(x))", "(Sandy) & -(MadeToSpringCoffee(Sandy) & -SpreadCoffee(Sandy)))", "No, Sandy neeliedCoffee(n) y.", "(LikelyStrange(Sandy) -> -SprayCoffee(Sandy))", "(-(Sandy(Sandy,coffee)) -> DidNotSpout(Sandy,Coffee))"]}
{"id": "enwn_validation_178", "nl": "Even if you are mad at someones mistake, you should forgive them.", "fol": "", "prediction": ["all x.((Even(x) & NotMad(x)) -> Forgives(x))", "all x.(MadAtMorning(x) -> ForgiveAtMoreThanMorning(x))", "all x.((Mad(x) & Mistake(x)) -> ShouldForgive(x))", "all x.(MadAtAt(x) -> ForgivesAt(x))", "all x.((Person(x) & Mad(x)) -> Forgiven(x))", "all x.((Person(x) & MadAt(x,y)) -> Forgives(x,y))", "all x.((Mad(x) & Anger(x)) -> Forgive(x))", "all x.((MadAtPerfume(x) & Forgives(x)) -> Forgives(x))", "all x.(Mad(x) -> Forgive(x))", "all x.((Mad(x) | Mad(x)) -> Forgives(x))", "all x y.((Mad(x) & Mistake(y)) -> Forgives(x,y))", "all x.((MadAtMistake(x) & PoorPersonal(x)) -> Forgives(x))", "all x y.((MadAt(x,y) & Action(y)) -> ForgiveMad(x,y))", "all x.((MadAtMistake(x) & MadAtMistake(x)) -> Forgives(x))", "all x.(MadAtTraffic(x) -> Forgive(x))", "all x.(MadAtMorning(x) -> Forgives(x,y))"]}
{"id": "enwn_validation_179", "nl": "Having hot coffee spilled onto you will make you angry at someone.", "fol": "", "prediction": ["all x.(HotCoffeeSpringedOnToYou(x) -> MakesAngryAtTongue(x))", "all x y.((HotCoffee(x) & SplippedOnto(x)) -> AngerFight(y))", "all x y.((HotCoffee(x) & SprinkledOn(y,x)) -> AggressiveAt(x,y))", "all x y.((HotCoffee(x) & SpoonedOn(x,y)) -> AnxiousAt(y))", "all x y.((HotCoffee(x) & SpoonedOnYou(x)) -> MakesAngryAt(x,y))", "all x.((HotCoffee(x) & Spillable(x)) -> MakesAngryAt(x,Person))", "all x y.((HotCoffee(x) & SpoonedOn(x)) -> MakesAngryAt(y))", "all x y z.((HotCoffee(x) & SpilledOn(x,y,z)) -> MakesAngryAt(x,z))", "all x.((HotCoffee(x) & SprinkedOnTo(x)) -> MakesAngryAtSomeone(x))", "all x y.((HotCoffee(x) & SpilledOn(x)) -> Anger(y))", "all x y.((HotCoffee(x) & Sponged(x) & Person(y)) -> Irresponsible(x,y))", "all x.((HotCoffee(x) & SpilledOn(x)) -> MakesAngryAt(x))", "all x y.((HotCoffee(x) & SpilledOn(y)) -> MakesAngry(x,y))", "all x.((HotCoffee(x) & SplengedOn(x)) -> Anger(x))", "all x.((HotCoffeeSpoked(x) & SomeoneBurned(x)) -> Anger(x))", "all x.((HotCoffee(x) & SplippedOn(x)) -> MakesAngryAtPerson(x))"]}
{"id": "enwn_validation_180", "nl": "Chris got mad at Sandy because Sandy's hot coffee spilled on Chris.", "fol": "", "prediction": ["(SoapsAndChris(Chris) & Sandy(Shannon) & HotCoffeeLiquid(Shannon))", "all x.(Engagement(x,Sandy) & HotCoffee(x,Sandy)) -> GetMadAt(x,Sandy))", "(all x.((Chris(x) & Sandy(x)) -> HotCoffeeSpreadOn(x,Chris)))", "all x y.((Chris(x) & Sandy(y) & LeftOutInHotCoffee(x,y)) -> MadAt(x,y))", "Sandy SpoonsHotCoffeeOnChris(Chris)", "(LastsOnCoffee(Chris) & SandySpreadsCoffee(Chris))", "Chris and Sandy's hotcoffees spilled on Chris.", "all x y.((Chris(x) & Sandy(y) & SavoryCoffee(y)) -> GushedSandy(x,y))", "Chris woke up mad(x,y) & Sandys HotCoffeeSpread(y))", "Sandy spilled hotcoffee on Chris (Chris), Chris & ChrisMad(Chris))", "all x y.((Chris(x) & Sandy(y) & SplendidCoffee(y,x)) -> MadAt(x,y))", "all x y.((Chris(x) & Sandy(y) & SplendidCoffee(z)) -> Mad(x,y,z))", "all x y.((Chris(x) & Sandy(y) & SplippedHotCoffee(y,x)) -> MadAt(x,y))", "all x y z.((Chris(x) & Sandy(y) & HotCoffee(z) & SprinkledOn(x)) -> MadAt(x,y,z))", "all x y.((Chris(x) & Sandy(y) & HotCoffee(y) & SplippedOn(x,y)) -> GotMad(x,y))", "((Chris(Chris) & SandysHotCoffeeSpread(Chris)) -> Mad(Chris))"]}
{"id": "enwn_validation_181", "nl": "Sandy spilling her coffee was an mistake.", "fol": "", "prediction": ["all x.((Sandy(x) & SpongeCoffee(x)) -> Mistake(x))", "all x.((Sandy(x) & SpillCoffee(x)) -> Mistake(x))", "All x.((Sandy(x) & SpentCoffee(x)) -> Mistake(x))", "all x.((Sandy(x) & SpillsCoffee(x)) -> Mistake(x))", "all x.(Sandy(x) & SpillsCoffee(x)) -> Mistake(x))", "(Sandy spillsCoffee(Sandy) -> Mistake(Sandy))", "all x.(SpraysCoffee(x) -> Mistake(x))", "all x.((Sandy(x) & SpillsCoffee(x)) -> Mistake(x))", "Sandy's spilling of coffee was a mistake.", "all x.((Sandy(x) & SpilledCoffee(x)) -> IsMistake(x))", "all x.((Sandy(x) & SplurgingCoffee(x)) -> Mistake(x))", "all x.((Sandy(x) & SpillsCoffee(x)) -> Mistake(x))", "all x y.((Sandy(x) & Coffee(y)) -> AnIrror(x))", "Sandy spilledCaffee(sandy) \u00e8 unairable(s))", "(Mistake(Sandy) & SpongedCoffee(Sandy))", "(All x.(Sandy(x) -> SpillingCoffee(x)))"]}
{"id": "enwn_validation_182", "nl": "Sandy's mistake made Chris angry at Sandy.", "fol": "", "prediction": ["all x.((SandyMistake(x) & ChrisAngryAt(x)) -> SandySandyMistake(x))", "((SandyMistake(Sandy) & ChrisAngryAt(Sandy)) | -SandyMistake(Sandy))", "Chris madeAngryAtSandy(Sandy'sMistake(Sandy)", "Chris was angry at Sandy's mistake.", "Chris is angry at Sandy.", "Chris(Sandy) & SandyCarelessMistake(Sandy) -> GiddyAt(Sandy-At(Sandy))", "all x y.((Sandy(x) & SandyMistake(y)) -> AnnoyedAt(y,Chris))", "Chris is angry at Sandy for making Sandy's MissingAtmosphere(s) & AllEvil(s)!", "every single moment that Sandy's mistake drew Chris's anger -> Mistake(d))", "Chris's mistake made Chris angry at Sandy.", "(Disagreement(Sandy) & MadeChrisAngry(Chris))", "Chris is angry at Sandy over Sandy's mistake.", "this week's TDs(Sandy,Mistake,Chris)", "-MakingSandySandyHarriaKristin(Sandy)", "(Mistake(Sandy,Sandy) & MadeChrisAngry(Chris,Sandy))", "(MakingSandySandy(Sandy,x) & ChrisAngry(Chris))"]}
{"id": "enwn_validation_183", "nl": "Chris should forgive Sandy.", "fol": "", "prediction": ["Chris should forgiveSandy.", "all x.(Chris(x) -> ShouldForgive(x,Sandy))", "all x.((Chris(x) & Sandy(x)) -> ShouldForgive(x,Chris))", "all x.((Chris(x) & Sandy(s) & Forgives(x,y)) -> CanBreakThis(x,s))", "(ThomasGather(Chris) & ShouldForgive(Chris))", "all x y.((Chris(x) & Sandy(y)) -> Forgive(x,y))", "all x.((Chris(x) & Sandy(x)) -> ShouldForgive(x,sandy))", "Chris should forgiveSandy.", "exists x.(Chris(x) & Forgives(x,sandy))", "all x y.((Chris(x) & Sandy(y)) -> ShouldForgive(x,y))", "all x.(Christopher(x) -> ShouldForgiveSandy(x))", "All x.(Chris(x) -> ShouldForgive(x,y))", "(-CherylForgives(Chris) & Sandy.", "all x.(Chris(x) -> ShouldForgiveSandy(x))", "all x y.((Chris(x) & Sandy(y)) -> ShouldForgive(x,y))", "all x.(Christopher(x) -> ShouldForgive(x,Sandy))"]}
{"id": "enwn_validation_184", "nl": "You can't score well on a test without studying for it unless you cheat.", "fol": "", "prediction": ["all x.((ScoreWellOnTest(x) & -Cheat(x)) -> CannotScoreWellOnTest(x))", "all x y.((Test(x) & Test(y) & Qualify(x,y)) -> -ScoresWell(x,y))", "all x.((ScoreWell(x) & -StudyFor(x)) -> None.((ScoreWell(x) & -Cheat(x))))", "all x.((ScoreWell(x) & -Comed(x)) -> -ScoreWell(x,test))", "all x y.((Test(x) & Test(y) & -(ScoreWellOn(x,y) | Cheat(x))) -> -(ScoreWellOn(x,y) & StudyFor(z,y))))", "all x.((Test(x) & -ScoreWell(x)) -> Cheat(x))", "all x y.((Socket(x) & Test(y) & -Cheat(z)) -> CanScoreWell(x,y,z))", "all x y.((Test(x) & Test(y) & ScoreWell(x,y) & -Cheat(x)) -> -CanScoreWell(x,y))", "all x.((Student(x) & -ScoreWell(x,test) & Cheats(x)) -> -ScoreWell(x,test))", "all x.((Test(x) & -ScoreWell(x)) -> Cheats(x))", "all x.((StudyTest(x) & -Cheats(x)) -> ScoreWell(x))", "all x.((Score(x) & -StudiesForTest(x)) -> -ScoreWell(x))", "all x.((Test(x) & ScoreWell(x)) -> (Cheat(x) | Cheat(x)))", "all x.((Test(x) & -StudiesFor(x)) -> -CanScoreWell(x))", "all x.((ScoreWell(x) & -Cheat(x)) -> Test(x))", "all x.(((Test(x) & -StudiesFor(x)) -> -ScoresWell(x)))"]}
{"id": "enwn_validation_185", "nl": "Brad scored well on his test.", "fol": "", "prediction": ["(Score(Brad) & WellFocus(Brad,test))", "(Score(Brad) & WellOnTest(Brad))", "all x.(Brad(x) -> ScoresWell(x))", "Brad scored WellOnTest(Brad,Test)", "all x.(Brad(x) -> ScoresWellOnTest(x))", "all x.(Brad(x) -> ScoredWell(x))", "all x.(Brad(x) -> ScoresWellOnTest(x))", "(ScoresWell(Brad) -> OnTest(Brad))", "all x.(Brad(x) -> ScoresWell(x))", "all x.(Brad(x) & WellScored(x))", "all x.(Brad(x) -> ScoresWellOnTest(x))", "Brad was able to score well on the test.", "(ScoredWellOnTest(Brad))", "(ScoredWell(Brad) & Test(Brad))", "all x.(Brad(x) -> ScoredWellOnTest(x))", "-(Brad(Brad) & Test(Brad))"]}
{"id": "enwn_validation_186", "nl": "Brad did not study the material on the test.", "fol": "", "prediction": ["Brad did not StudyMaterialOnTest(Brad,Test,Test)", "all x y.((Brad(x) & Material(y)) -> -Studies(x,y))", "the test, Brad nestudied(Brad,y) -> -DoesTestMaterialInDependment(Brad,y))", "Brad -StudiesMaterialOnTest(Bad))", "-DueToBrad(Brad,Test)", "All x.(Brad(x) -> -StudiesMaterial(x))", "only to reveal that Brad did not study the material on the test.", "Brad & LogicSearchStudy did not study the material on the Test.", "all x y.((Brad(x) & Material(y)) -> -Studies(x,y))", "(Brad did not study the material on the test.", "Brad did not study the material on the test.", "ALL x y.((Brad(x) & Test(y)) -> -StudiesMetaphor(x,y))", "all x y.((Brad(x) & Test(y)) -> -StudiedMaterial(x,y))", "All x.(Brad(x) -> -StudiesMaterialOnTest(x))", "All x.(Brad(x) -> -StudiesMaterial(x))", "the test(Brad) & -StudiesMaterial(Brad,Test))"]}
{"id": "enwn_validation_187", "nl": "Cheating is dishonest.", "fol": "", "prediction": ["all x.(Cheating(x) -> Dishonest(x))", "all x.(Cheating(x) -> Dishonest(x))", "all x.(Cheating(x) -> Dishonest(x))", "all x.(Cheat(x) -> Dishonest(x))", "all x.(Cheat(x) -> Dishonest(x))", "all x.(Cheating(x) -> Dishonest(x))", "all x.(Coating(x) -> Dishonest(x))", "all x.(Cheating(x) -> Dishonest(x))", "all x.((Chef(x) & Dishonest(x)) -> Cheats(x))", "all x.(Cheat(x) -> Dishonest(x))", "all x.(Cheating(x) -> Dishonest(x))", "all x.(Cheating(x) -> Dishonest(x))", "all x.(Cheating(x) -> Dishonest(x))", "all x.(Cheating(x) -> Dishonest(x))", "all x.(Cheating(x) -> Dishonest(x))", "all x.(Cheating(x) -> Dishonest(x))"]}
{"id": "enwn_validation_188", "nl": "You should be honest.", "fol": "", "prediction": ["all x.(Honest(x) -> BeHonest(x))", "all x.(ReallyHard(x) -> ComesWithHope(x))", "all x.(Honest(x) -> ShouldBe(x))", "all x.((Client(x) & Fair(x)) -> Betony(x))", "all x.(Honest(x) -> Honest(x))", "all x.((Honest(x)) -> Open(x))", "all x.((RequiresHonesty(x)) -> MustBe(x))", "all x.((Storm(x) & Honest(x)) -> MakesFriendly(x))", "all x.(Honest(x) -> Honest(x))", "all x.((Honest(x) & NotHonest(x)) -> Calls(x,y))", "all x.((Man(x) & Honest(x)) -> HoldOn(x))", "all x.(Honest(x) -> Available(x))", "all x.(Honest(x) -> BuysIn(x,y))", "all x.((Ethical(x)) -> NotHonest(x))", "all x.(HasHair(x) -> True(x))", "all x.((Honest(x) & DoNotHasEven(x)) -> -Fraudish(x))"]}
{"id": "enwn_validation_189", "nl": "Brad scored well on his test without studying for it.", "fol": "", "prediction": ["all x.((Brad(x) & Test(x)) -> ScoredWell(x))", "Brad scored well,even if he just studied.", "all x.((Brad(x) & -StudyingTest(x)) -> ScoredWellOn(x,Test))", "all x.((Brad(x) & -StudiedFor(x)) -> ScoredWell(x))", "all x.(Brad(x) -> (ScoredWellOnTest(x) & -StudiesForTest(x)))", "all x y.((Brad(x) & Test(y) & -StudyingFor(x,y)) -> ScoredWellOn(x,y))", "all x y.((Brad(x) & Test(y)) -> ScoredWell(x,y))", "all x.((Brad(x) & Test(x)) -> Scoreable(x))", "(StudiesForTest(Brad) | ScoresWellOnTest(Brad)))", "all x y.((Brad(x) & Test(y)) -> Score(x,y))", "all x.((Brad(x) & Test(y)) -> ScoredWell(x,y))", "all x.((Brad(x) & WellStudiedForTest(x)) -> ScoresWell(x))", "(Score(Brad,Balt) & -Study(Brad,test))", "Brad scored well on test without studying for it.", "(ScoredWell(Brad) | StudyingForTest(Brad))", "all x.((Brad(x) & -Studies(x)) -> ScoredWellOnTest(x))"]}
{"id": "enwn_validation_190", "nl": "Brad cheated on his test.", "fol": "", "prediction": ["all x.(Brad(x) -> CheatedOnTest(x))", "Brad cheated on Test.", "(CheatOnTest(Brad) & Brad's Test(Brad))", "Brad cheated on his test.", "all x.(Brad(x) -> CheatedOnTest(x))", "Brad CheatedOnTest.", "all x y z.((Brad(x) & Test(y) & Test(z)) -> Cheated(x,y))", "-(Brad(Brad) & CheatedTest(Brad)))", "all x.((Brad(x) & Test(x)) -> Cheated(x))", "Brad CheatedOnTest(Brad)", "Brad cheated on test.", "all x.((Brad(x) & Cheated(x)) -> TakesTest(x))", "all x.((Brad(x) & Test(s)) -> Cheated(x))", "all x y.((Brad(x) & Test(y)) -> Cheated(x,y))", "(Cheat(Brad) & Test(Brad))", "all x.(Brad(x) -> CheatedOnTest(x))"]}
{"id": "enwn_validation_191", "nl": "You should not cheat.", "fol": "", "prediction": ["all x.(Cheat(x) -> -PleaseHasBean(x))", "the one/fewpth(t) & -Cheat(t))", "all x.((YouBow(x) -> -Cheat(x))", "all x.(Custs(x) -> -Cheat(x))", "all x.((You(x) & -Cheat(x)) -> -(Cheat(x) | Cheat(x))))", "all x.(Cheat(x) -> -HasCheat(x))", "all x.((Cheat(x)) -> -Cheat(x))", "all x.(SheetUp(x) -> -(Cheat(x) | Cheat(x))))", "all x.(Don'tCheat(x) -> -Complete(x))", "-Cheat(x)", "-Cheat?", "all x.((Concept(x) & -Cheat(x)) -> -(Cheat(x) & Cheat(x)))", "all x.(Cheat(x) -> -FullSpeedConsumer(x))", "all x.((CanCheat(x) & -CanCheat(x)) -> -CanCheat(x))", "all x.((Cheat(x)) -> -Cheat(x))", "all x.((Cheat(x)) -> -Cheat(x))"]}
{"id": "enwn_validation_192", "nl": "Brad should not have cheated on his test.", "fol": "", "prediction": ["all x.((Brad(x) & Test(y)) -> -cheated(x,y))", "so that my bad god, Brad, did not cheated on his Test.", "BARNEWARD (CheatedTest)", "all x.((Brad(x) & Test(x)) -> -CHEated(x))", "all x.(B Brad(x) -> -CarriedOnTest(x))", "(all x.((Brad(x) & TestCue(x)) -> -Change(x)))", "all x.(Brad(x) -> -CheatedTest(x))", "-Pcheated(Bard)", "Brad should not have cheated on his test.", "all x.((Brad(x) & Test(x)) -> -Showcase(x\"))", "(all x.(Brad(x) -> -cheated(brad,test)))", "all x.((Brad(x) & Test(i)) -> -Cheaten(x,i,i))", "(CheatedTest(Brad) & Hehe(Brad))", "all x.((Brad(x) & -CheatedTest(x)) -> -CheatedTest(x))", "all x.((Brad(x) & BadTest(x)) -> -CHEated(x))", "all x.((Brad(x) & Test(x)) -> -Cheated(x))"]}
{"id": "enwn_validation_193", "nl": "You should not litter.", "fol": "", "prediction": ["all x.(Clitter(x) -> -ShouldPl\u00fct(x))", "all x.(Little(x) -> -Likelt(x))", "all x.((Sheep(x) & -Literrate(x)) -> -Liquidate(x))", "(-LittleMoon(a))", "all x.((Pillow(x) & -Lip(x)) -> -Dose(x))", "all x.((Little(x) & -Liquor(x)) -> -Liquid(x))", "all x.(DontLitter(x) -> -HasPl\u00fct(x))", "all x.(Litter(x) -> -(Like(x) -> Toilette(x)))", "all x.((Little(x) & -Litter(x)) -> -Spoises(x))", "all x.((Little(x) & -Litter(x)) -> -(Litter(x) & Uses(x\")))", "all x.(NegativeLattery(x) -> -Occurs(x))", "-Litter(ish)", "all x.(Cite(x) -> -exists y.(Cite(y) & Does(x,y))))", "-Latters(you)", "all x.(Trash(x) -> -Poison(x))", "all x.(NoLitter(x) -> -Little(x))"]}
{"id": "enwn_validation_194", "nl": "Littering is when you throw trash outside of a trash bin.", "fol": "", "prediction": ["all x.(Littering(x) -> ThrowsTrashOutsideTrashBin(x))", "all x.(Littering(x) -> ThrowTrashOutsideOfTrashBin(x))", "all x.(Littering(x) - ThrowsTrashOutsideTrashBin(x))", "all x y.((Littering(x) & ThrowTrashOutsideTrashBin(y)) -> Littering(x))", "all x.(Littering(x) -> ThrowTrashOutsideTrashBin(x))", "all x y z.((Littering(x) & Rubbish(y) & Bin(z)) -> ThrowsOutside(x,z))", "all x.(Littering(x) -> ThrowsTrashOutsideTrashBin(x))", "all x.(Littering(x) -> ThrowsTrashOutsideOfTrashBin(x))", "all x y.((Trash(x) & WasteBin(y)) -> Littering(x))", "all x y.((Trash(x) & WasteBin(y)) -> ThrowsOutside(x,y))", "all x.(Littering(x) -> (TrashAsideOfTrashBin(x)))", "all x y.((TrashBin(x) & OutsideOf(y,x)) -> Littering(x))", "all x.((FlashTrash(x) & OutsideOfTrashBin(x)) -> Littering(x))", "all x.(Literating(x) -> ThrowsTrash(x))", "all x y.((Trash(x) & TrashBin(y)) -> Littering(x))", "all x.(Littering(x) -> ThrowsTrashOutsideTrashBin(x))"]}
{"id": "enwn_validation_195", "nl": "Johnny threw trash on the floor.", "fol": "", "prediction": ["all x.((Jeanny(x) & ThrewTrashOnFloor(x)) -> Throws(x,y))", "all x.(Johnny(x) -> ThrowsTrashOnFloor(x))", "Johnny threw trash onto Floor & On(Jeff)", "all x.((Johnny(x) & ThrewTrashOnFloor(x)) -> Threw(x,y))", "all x.(Johnny(x) -> ThrewTrashOnFloor(x))", "-Jane threwTrashOnFloor(Jonnifer)", "all x.(Johnny(x) -> TotsRoundUp(x))", "Johnny threw trash on the floor.", "(Johnny(Johnny) & ThrewTrash(Johnny))", "all x y z.((Johnny(x) & Waste(y) & Floor(z)) -> Throws(x,y,z))", "is made of recycled newspaper.", "it looks like Johnny threws trash on floor.", "all x.(Honey(x) -> ThrowsTrashOnFloor(x))", "- Johnny threwTrashOnFloor(-Melody)", "always gets a smile when he sees a runner in the room.", "(JuniorTrash(Jonny) & ThrowsOnFloor(Jonny))"]}
{"id": "enwn_validation_196", "nl": "Johnny did not want to walk to the far away trash bin.", "fol": "", "prediction": ["-(Jeffy(Johnny) & FarAwayToyBin(Johnny))", "Johnny was not going to walk to the farawayTrashBin(Johnny,x))", "(Nowhere(Johnny) & FarAwayTrashBin(Johnny))", "(-WantToFarAwayTrashBin(Johnny))", "all x.((Johnny(x) & FarAwayTrashBin(x)) -> -LikelyLikelyLikely(x))", "-WantToWalkTo(Johnny,FastAwayTower))", "-(Johnny(Jonnifer) -> FarAwayTrashBin(Jonnifer))", "-wantedWalkToToTrashBin(Jonny)", "-WantToWalkToTo(Johnny,TrashBin))", "Johnny naively wanted to walk to a FarAwayToiletBerry.", "-WentTo(Junior(Millionaire)", "Johnny did not want to walk to the farawayTrashBin(Johnny)", "all x.((Johnny(x) & WalkToTrashBin(x)) -> -WantToWalkToTrashBin(x))", "\"Johnny\" -WentToToTrashPlanet(Juan))", "all x.((Johnny(x) & FarAwayTrashBin(x)) -> -WalkEDToTo(x,y))", "-(Nicky(Johnny) & FarAwayTrashBin(Johnny))"]}
{"id": "enwn_validation_197", "nl": "Johnny did not throw his trash away into a trash bin.", "fol": "", "prediction": ["all x y.((Johnny(x) & ToxicBonk(y)) -> -TookTox(x,y))", "-TossesToTrashIntoTrashBin(Johnny)", "(WasTrashToBuy(Johnny)?", "all x.(July(x) -> ((TrashBin(x) | TaskBin(x))))", "all x.(Johnny(x) -> -TrashToaster(x))", "all x.((Johnny(x) & TinyBan(x)) -> -TossTo(x,y))", "(-trashbin(Johnny))", "((Johnny(Johnny) & TascheBin(Johnny)) -> -ThrewAwayInto(Johnny,Trash))", "all x.(Johnny(x) -> -TowerToTrash(x,y))", "Johnny did not throw intoTrashBin(Johnny)", "all x.((Johnny(x) & TrashBin(x)) -> -TasteAwayInto(x,y))", "all x.((Johnny(x) & ThrowThrowToToilet(x)) -> -TrashBin(x))", "all x.(Johnny(x) -> -JetAll(x,Trash))", "(Johnny (Johnny) & -TrashBin(Johnny)))", "Johnny ne threw away trash into trash bin(n) & Johnny o.((Cabin(n) & Dustbin(n)))", "(-trashbin(Johnny) & -trashbin(Johnny))"]}
{"id": "enwn_validation_198", "nl": "Johnny littered.", "fol": "", "prediction": ["Johnny Littered(Johnny)", "all x.((Johnny(x) & Littered(x)) -> Littered(x))", "all x.(Johnny(x) -> Littered(x))", "all x.(Johnny(x) -> Littered(x))", "comes next to Johnny(j) & Littered(Junior)", "all x.(Jonny(x) -> Littered(x))", "-Lucky(Johnny)", "-Johnny(n): Plaid(n))", "all x y.((Joynie(x) & Petal(y)) -> Littered(x,y))", "-(Juliotny(Jonny) & Litter(Junior))", "all x.(Junior(x) -> Littered(x))", "(Littered(Johnny))", "all x.(Jonny(x) -> Littered(x))", "all x.(Jonny(x) -> Littered(x))", "all x.(Johnny(x) -> Littered(x))", "all x.(Johnny(x) -> Littered(x))"]}
{"id": "enwn_validation_199", "nl": "Johnny should not have littered.", "fol": "", "prediction": ["all x.((Johnny(x) & Shoveled(x)) -> -Littered(x))", "Johnny should not have littered.", "all x.((Johnny(x) & Littered(x)) -> -HasLiving(x))", "all x.((Johnny(x) & Littering(x)) -> -Has(x,y))", "all x.(Jonny(x) -> -Littered(x))", "Johnny should not have littered.", "all x.((Johnny(x) & Littered(x)) -> -(Luck(x) & Johnny(x))))", "Johnny should have -Littered(Johnny)", "all x.(Jolly(x) -> -Littered(x))", "all x.((Johnny(x) & Litter(x)) -> -Landmarked(x))", "-(Junior(Junior) & Littered(Junior))", "-LitteredJunior(Jonathan)", "all x.(Jonny(x) & -Littered(x))", "all x.((Jonny(x) & Littered(x)) -> -Fluffed(x))", "all x.((Johnny(x) & Spotted(x)) -> -Blooded(x))", "all x.((Jane(x) & NoLittering(x)) -> -Littered(x))"]}
{"id": "enwn_validation_200", "nl": "If you see someone struggling to do something, you should help them.", "fol": "", "prediction": ["all x.((Staff(x) & ToughToDo(x)) -> Help(x))", "all x.(SessionAbout(x,struggle(x)) -> HelpHelp(x,struggle(x))", "all x.((SamePerson(x) & Struggles(x)) -> HelpMe(x))", "all x.((Staff(x) & SeesStruggle(x)) -> Help(x))", "all x.(SameStaff(x) -> ShouldHelp(x))", "all x.((SeesPersonStruggingToDoSomething(x)) -> HelpStaff(x))", "all x.(StaffToDoOrNotToDo(x) -> Help(x))", "all x.((Friend(x) & StrugglesToDo(x)) -> Help(x))", "all x.(StumblesToDo(x) -> Help(x))", "all x.(Says(x,y) & TragedyDoctor(y)) -> Help(x,y))", "all x y.((SeesStruggler(x) & Person(y) & Helps(x,y)) -> Helps(y,x))", "all x.(SinglesToDo(x) -> Helps(x))", "all x y.((Staff(x) & Person(y) & StrugglingToDo(x,y)) -> Help(x))", "all x.(ShowsStaffDoing(x) -> Helps(x))", "all x.(Studying(x) -> IsHelpfullyInquiring(x))", "all x y.((Say(x) & Person(y) & StumblingToDo(x,y)) -> Help(x,y))"]}
{"id": "enwn_validation_201", "nl": "Josh is holding groceries in both hands at the door.", "fol": "", "prediction": ["is HoldingGroceries(Josh) & HandsAtDoor(Josh)", "all x y.((Joshua(x) & Door(y)) -> HoldsGoodsInBothHands(x,y))", "Josh is holding groceries in both hands at the door.", "all x y,z.((Josh(x) & Door(y)) -> HoldsGroceries(x,y,z))", "all x y.((Josh(x) & Door(y)) -> HoldsGroceries(x,y))", "Josh is holding groceries (in both hands))", "all x y.((Josh(x) & Door(y)) -> HoldsGroceriesInBothHands(x,y))", "(HandheldInHand(Hosannah) | HoldsGroceries(Hosannah)))", "Josh is holding groceries in both hands at the Door.", "all x y z.((Josh(x) & Door(y) & Grocery(z)) -> HoldsIn(x,y,z))", "all x y z.((Josh(x) & Groceries(y) & Door(z)) -> HoldsInHands(x,y,z))", "(HandsGroceriesIn(Josh) & Door(Josh))", "everyone knows the name \"Jess\" (Jess,Groceries) & Hands(Josh,Food))", "\"Josh\" (HoldsGroceriesInTwoHands(josh,y))", "Josh HoldsGroceriesInBandsAtDoor(Josh)", "all x y.((Toddler(x) & Shosh(y)) -> HoldsGroceriesInGoal(x,y))"]}
{"id": "enwn_validation_202", "nl": "If you are holding something with both hands, you will struggle to open doors.", "fol": "", "prediction": ["all x.((Holding(x) & Hand(x)) -> StruggleToOpenDoors(x))", "all x.(HoldingWithBothHands(x) -> StruggleToOpenDoors(x))", "all x.(HoldingItemWithBothHands(x) -> StruggleToOpenDoors(x))", "all x.((HoldsWithBothHands(x) & HandsOn(x)) -> StrugglesToOpenDoors(x))", "all x.(HoldingWristWithBothHands(x) -> StruggleToOpenDoors(x))", "all x.((HoldsWithBothHands(x) & HandsClean(x)) -> StruggleToOpenDoors(x))", "all x.(HoldWithBothHands(x) -> StruggleToOpenDoors(x))", "all x.((Holds(x,y) & Hands(y) & BothHinds(y)) -> StrugglesToOperateDoors(x))", "all x.(HoldINGWithBothHands(x) -> LuggageToOpenDoors(x))", "all x.((HoldsThing(x) & HandsOf(x)) -> StruggleToOpenDoors(x))", "all x.((Holds(x,y) & Hands(x,y)) -> StruggleToOpenDoors(x))", "all x.(Holding(x,HandSquare) -> StruggleToOpenDoors(x))", "all x.((Holding(x,x) & HandsWith(x)) -> StruggleToOpenDoors(x))", "all x.((HoldsWithHands(x) & HandsOn(x)) -> StruggleToOpenDoors(x))", "all x.(Holds(x,HandsBody(x) -> StrugglesToOpenDoors(x))", "all x y.((HoldsReally(x,y) & Hand(y)) -> StruggleToOpenDoors(x))"]}
{"id": "enwn_validation_203", "nl": "Amy can see Josh.", "fol": "", "prediction": ["Amy has the ability to see Josh.", "(Sees(Amy,Josh))", "all x.((Patty(x) & Josh(x)) -> CanSee(x,y))", "(ScanViewer(Amy,Joshua))", "all x.(Amiable(x) -> CanSelectJosh(x))", "(CanSee(AmyKelly) & Amy(Amy))", "Amy can see Josh.", "all x.(Amy(x) -> CanSettle(x))", "Amy can see Josh.", "all x.((Amy(x) & Josh(y)) -> CanSee(x,y))", "all x.((Amy(x) & Josh(x)) -> CanBeSeen(x))", "all x.(Amy(x) -> CanSeen(x,Josh))", "all x.(Amy(x) -> CanSeeJosh(x))", "(sees(Amy,Joch))", "(CanSee(Amy(Amy) & Josh(Amy))", "all x.((Amy(x) & Josh(y)) -> CanSee(x,y))"]}
{"id": "enwn_validation_204", "nl": "Josh is struggling to open the door.", "fol": "", "prediction": ["all x.(Josh(x) -> StruggleToOpenDoor(x))", "(StrugglesToOpenDoor(Johs))", "all x y.((Josh(x) & Door(y)) -> StruggleStarting(x,y))", "all x y.((Josh(x) & Door(y)) -> StruggleToOpen(x,y))", "Josh SettlesToOpenDoor(Josh)", "all x.((Josh(x) & Door(y)) -> StruggleToOpen(x,y))", "Josh is struggling to open the door.", "all x.(Joshua(x) -> StrugglingToOpenDoor(x))", "all x y.((Josh(x) & Door(y)) -> StruggleToOpen(x,y))", "exists x.(Josh(x) & StumblingToOpenDoor(x))", "all x y.((Josh(x) & Door(y)) -> StrugglesToOpen(x,y))", "all x.((Josh(x) & Stabbing(x)) -> DoorsOpening(x))", "(StupidToOpenDoor(Joshua)", "all x.(Josh(x) -> FightingToOpenDoor(x))", "Josh is strugglingtoopenDoor(Joshua)", "all x.(Joshua(x) -> StruggleToOpenDoor(x))"]}
{"id": "enwn_validation_205", "nl": "Amy can see Josh struggling to open the door.", "fol": "", "prediction": ["all x.((Amy(x) & Josh(y)) -> StruggleToOpenDoor(y,x))", "all x y.((Amy(x) & Josh(y)) -> StrugglesToOpenDoor(y,x))", "all x.((Amy(x) & Josh(x)) -> ThruggingToOpenDoor(x))", "all x.(Amy(x) -> CanSeeShafflingToOpenDoor(x))", "all x.((Amy(x) & Josh(y)) -> StrugglesToOpenDoor(y))", "all x.((Amy(x) & CanSee(x, Josh)) -> StrugglesToOpenDoor(x))", "Amy can see Josh struggling to open the door.", "Amy can see Josh struggling to open the door.", "all x y.((Ammy(x) & Josh(y)) -> (StumbleRelief(y) & CloseDoor(y)))", "all x y z.((Amy(x) & Josh(y) & Door(z)) -> CanSee(x,y))", "all x y z.((Amy(x) & Josh(y) & Door(z)) -> (StrugglesToOpen(y,z) def).)", "all x y.((Amy(x) & Josh(y)) -> (StrugglesToOpenDoor(x,y)))", "all x y.((Amy(x) & Josh(y)) -> CanSeeDrama(x,y))", "all x y.((Amy(x) & Josh(y)) -> (LikesToOpen(y,x) | CriesToOpen(y,x)))", "all x.(Amy(x) -> CanSeeJoshStrugging(x))", "all x y.((Ammy(x) & Josh(y)) -> StrugglesToOpenDoor(y,x))"]}
{"id": "enwn_validation_206", "nl": "Amy should help Josh open the door.", "fol": "", "prediction": ["all x.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "all x.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "Josh should helpOpenDoor(Amy)", "all x.((Amy(x) & Josh(y)) -> HelpOpenDoor(x,y))", "all x y.((Amy(x) & Josh(y)) -> ShouldHelpOpenTheDoor(x,y))", "!(Amy (AmyWennish) -> HelpsOpenDoor(AmyWennish)))", "has the potential to open the door by Josh.", "(HasAnimal(Amy) & HelpsOpenDoor(Amy,Joshua))", "all x y.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "all x.((Amy(x) & Josh(x)) -> ShouldOpenDoor(x,y))", "All x.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "all x.(Amy(x) -> ShouldHelpOpenDoor(x,Joshua))", "All x y.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "all x y.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "all x y.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "Amy should help Josh open the door."]}
{"id": "enwn_validation_207", "nl": "You should avoid harming someone else or yourself.", "fol": "", "prediction": ["all x.((AvoidsHazarding(x) | AvoidsHazarding(x)) -> -Hazards(x))", "all x.((KnowsAbout(x,y) | KnowsAbout(x,z)) -> -Hazards(x,y))", "all x.((HasBear(x) & (Always(x) | -HarmsAlone(x))) -> -HasAlways(x))", "all x.(BearHarmful(x) -> (Alternate(x) | -Harmful(x)))", "all x.((HasPartTime(x) | Italics(x)) -> AvoidsHazarding(x))", "all x.((Mortgage(x) & -Harms(x,other) | HarmsYou(x)))", "all x y.((GuidingDog(x) & (Alternate(y) | UsingImmediate(x))) -> Avoid(x,y))", "all x y.((Alternator(x) | Self(y)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHaveHaveHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-HaveHa-Have", "all x.((AvoidsHarm(x) & -HarmsAnother(x)) -> (AbstainsHarming(x) & -HarmsMother(x)))", "all x.(Avoid(x,(Idle(x) | Person(x))) -> Avoid(x,Damage(x))", "all x.((HasPerson(x) | HaveYouLeftOther(x)) -> -HarmMe(x))", "all x.((DeathTaker(x) & AvoidHazarding(x)) -> -HazardsAnother(x))", "all x.((Men(x) & (Blind(x) | Negative(x))) -> AvoidsHarm(x))", "all x.(AvoidHasBehavior(x) -> -HasInDamage(x))", "all x.((HealthBetween(x) | HealthBetween(x))) -> -HasHas(x))", "exists x y.(Hazard(x,y) & (Animal(y) | Self(y)))"]}
{"id": "enwn_validation_208", "nl": "Driving dangerously can harm you or someone else.", "fol": "", "prediction": ["all x y z.((DrivingDanger(x) & Person(y) & Person(z)) -> (Harms(x,y) | Harms(x,z)))", "all x.(DrivesDangerously(x) -> (HarmInGuide(x,y) | HarmInGuide(x,p),))", "all x y z.((DrivingDangerously(x) & Person(y) & Person(z)) -> (Harms(x,y,z) | Harms(x,y)))", "all x.(DrivingDangerously(x) -> (HarmsYou(x) | HarmsAnother(x)))", "all x.(DrivingDangerously(x) -> (HarmVitain(x) | HarmPerson(x)))", "all x.(DrivingDangerously(x) -> (HarmsYou(x) | HarmsEveryone(x)))", "all x.(DrivesDangerfully(x) -> (HarmsYouOrSomeone(x)))", "all x.(DrivingDanger(x) -> (CanHarmYou(x) | CanHarmAlter(x)))", "all x y.((DrivesDangerously(x) & Person(y)) -> (Harms(x,y) | HarmSort(x,y)))", "all x.(DrivingDangerfully(x) -> (Harms(x,you) | Harms(x,you)))", "all x.(DrivingDangerously(x) -> (HarmsYou(x) | HarmsPerson(x)))", "all x.(DrivingDangerously(x) -> (HarmsYou(x) | HarmsSomeoneOther(x)))", "all x.(DrivingDangerously(x) -> (HarmsYou(x) | HarmsPerson(x)))", "all x.(DrivingDangerously(x) -> (HarmsYouOrAnother(x)))", "all x y.((DrivenInDamage(x) & Driver(y)) -> (Harms(x,y) | Harms(x,y)))", "all x.(DrivingDangerously(x) -> (HarmsYou(x) | HarmsPerson(x)))"]}
{"id": "enwn_validation_209", "nl": "Dani drove home from the bar after drinking alcohol.", "fol": "", "prediction": ["(Drive-Home(Daniel) afterDrinkingAlcohol(Daniel))", "(drivesHomeFromBar(Daniel) & DabblesAlcohol(Daniel))", "Dani drove home from the bar after drinking alcohol.", "Dani drove home from bar after drinkingAlcohol(d).", "man had drunk alcohol and drove home from the bar (Dani\" & drankAlcohol(Dani)))", "all x y.((Dani(x) & Bar(y) & DrinksAlcohol(x,y)) -> DrivesHome(x,y))", "DANI DRIVEN HOME FROMBAR(Dani) & DrinksAlcohol(Dani))", "(DustRain(Dani) & HomeOfBerry(Dani))", "Dani drove home from bar after drinking alcohol.", "Dani drove home from the Bar after drinkingAlcohol(dani.)", "Dani drove home from bar after drinking alcohol.", "(DanielDanielDaniel droveStayDownAfterTabbingAlcohol(Daniel))", "(Daniel drovehome(Daniel,Bake) & AfterDrinkingAlcohol(Daniel,Bake))", "-DrivenHomeFromBake(-Dani)", "Dani drove home from the bar after drinking alcohol.", "all x y.((Daniel(x) & Bar(y)) -> DrivenHomeAfterDrinkingAlcohol(x,y))"]}
{"id": "enwn_validation_210", "nl": "Driving after drinking alcohol is dangerous.", "fol": "", "prediction": ["all x.(DrivingAfterDrinkingAlcohol(x) -> Dangerous(x))", "all x.((DrivingAfterDrinkingAlcohol(x)) -> Dangerous(x))", "all x.((DrivingAfterAlcohol(x)) -> Dangerous(x))", "all x.((DrivingAfterDrinking(x) & Alcohol(x)) -> Dangerous(x))", "all x.(DrivingAfterDrinkingAlcohol(x) -> Dangerous(x))", "all x.((DrivingAfterDrinkingAlcohol(x)) -> Dangerous(x))", "all x.((DrivingAfterDrinkingAlcohol(x)) -> Dangerous(x))", "all x y.((DrivingAfterTrinkingAlcohol(x) & DrinkingAlcohol(y)) -> Dangerous(x,y))", "all x.((DrivingAfterAlcohol(x) & DrinksAlcohol(x)) -> Dangerous(x))", "all x.((DrivingAfterDrinkingAlcohol(x)) -> Dangerous(x))", "all x.((Drive(x) & DrinksAlcohol(x)) -> Dangerous(x))", "all x.((DrivingAfterDrinkingAlcohol(x)) -> Dangerous(x))", "all x.(DrivingAfterDrinkingAlcohol(x) -> Dangerous(x))", "all x.((DrivingAfterDrinkingAlcohol(x)) -> Dangerous(x))", "all x.((DrivingWorstAfterDrinkingAlcohol(x)) -> Dangerous(x))", "all x.((DrivingAfterDrinkingAlcohol(x)) -> Dangerous(x))"]}
{"id": "enwn_validation_211", "nl": "Dani drove home dangerously.", "fol": "", "prediction": ["Dani drovehomeDangerfully(Daniel)", "Daani drovehomeDangerously(Dani)", "Dani drove home dangerously.", "Dani drove home dangerously.", "all x.(Dani(x) -> (DroveHomeDangerously(x) & DrivenHomeDangerously(x)))", "Dani drove home dangerously.", "Dani drove home dangerously.", "-Daniel droveHomeDangerfully(Daniel)", "Dani drove home dangerously.", "Dani drove home dangerously.", "(Dani(dani) -> DrivenHomeDangerously(dani))", "Dani drove home dangerously.", "Dani drove home dangerously.", "came home dangerously.", "Dani drove home dangerously.", "Dani drove home dangerously."]}
{"id": "enwn_validation_212", "nl": "Dani could have harmed themself or someone else by driving home.", "fol": "", "prediction": ["all x.(Dani(x) -> (HasHarmed(x,self) | Harms(x,orPerson(x)))", "all x y z.((Dani(x) & Person(y) & Car(z)) -> (Harmed(x,y) & DrivenHome(z)))", "all x.(Dani(x) -> (RidingHome(x) | Hurts(x)))", "all x.((Dani(x) & (HasCaredHome(x) & (HasHarmed(x) | Harmed(x)))) -> HasHasHasHarmed(x))", "all x.(Dani(x) -> (HasHarmedSelf(x) | HasHarmedPerson(x)))", "all x.(Dani(x) -> (HasLawn(x,y) & Person(y) & CanDrive(x,y)))", "all x.(Dani(x) -> (HasHarmed(x,self) | HasHarmed(x,someone(x))))", "all x.(Dani(x) -> (Dani(x) | SomeoneOther(x)) & HatesMe(x,Dani)))", "all x.(Dani(x) -> (Harmed(x) & (Dani(y) | -Harmed(y)))))", "all x.(Dani(x) -> (HasRunhome(x) | HarmsOther(x)))", "all x.(Dani(x) -> (HarmedSir(x) | HarmedPersonal(x)))", "all x.((Dani(x) & (Has(x,d) | Has(x,n)))) -> Harmed(x))", "all x.(Dani(x) -> (HasHarmedLower(x) | HarmsEitherYouOrSomeone(x)))", "all x y.((Dani(x) & (Dani(y) | Someone(y)) & DrivingHome(x)) -> Harmed(x,y))", "all x.((Dani(x) & (DrivenHome(x) | -DrivenHome(x))) -> Harmed(x,you))", "all x y.((Daniel(x) & Dani(y)) -> (HasHarmedAlone(x,y)(x,y) | HatedAlone(x,y))))"]}
{"id": "enwn_validation_213", "nl": "Dani should not have driven home.", "fol": "", "prediction": ["all x.((Dani(x) & -DrivenHome(x)) -> Failed(x))", "all x.((Daniel(x) & -DrivenHome(x)) -> -DrivenHome(x))", "(-DrivenHome(Dani) -> Dani)", "Dani should not have driven home.", "all x.((Daniel(x) & -DrivenHome(x)) -> -DanielGhani(x))", "Dani shouldn't have driven home.", "Dani 124d(x) & -DrivingHome(x))", "Dani should not have driven home.", "Dani should not have driven home.", "Dani should not have driven home.", "NathaniShapedHome()", "all x.((Dani(x) & -DrivenHome(x)) -> -DrivenHome(x))", "Dani should not have driven home.", "the car is so old and smashed.", "Dani should not have driven home.", "Dani should not have driven home."]}
{"id": "enwn_validation_214", "nl": "You should not copy other peoples work and claim it as your own.", "fol": "", "prediction": ["all x.((CopiesWork(x) & CollectsWork(x\")) -> -UsesAsOwn(x))", "all x.((Person(x) & -CopyWork(x) & ClaimWork(x)) -> -RequiresWork(x))", "all x y z.((Person(x) & Work(y) & Work(z) & Copy(x,y)) -> ClaimAsOwner(x,z))", "all x y.((Work(x) & Work(y)) -> -CopiesAndAccumulate(x,y))", "all x y.((Person(x) & Work(y)) -> -CopiesAndClaims(x,y))", "all x.(Promise(x) -> -(CoolsWork(x) & ClaimsWork(x)))", "all x.((Person(x) & -CopiesWork(x) & ClaimsWorkAsOwn(x)) -> -CircumulatesWork(x))", "all x.((Person(x) & -CopyWork(x) & ClaimTheWork(x)) -> -CopyToOwnAsOwn(x))", "all x y.((Person(x) & Work(y)) -> -Copies(x,y) & ClaimsAsOwn(x,y))", "all x.((CopyTheWork(x) & ClaimWorkAsOwn(x)) -> -(CopiesTheWork(x) & ClaimWorkAsOwn(x)))", "all x y.((Person(x) & Work(y)) -> -CopiesAsOwn(x,y))", "all x.((CopyWork(x) & -CreateWork(x,edible)) -> -CopyWork(x,edible))", "all x y.((Person(x) & WorksOther(y)) -> -CopiesWhatWork(x,y) & ClaimsOwn(x,y))", "all x y.((Men(x) & CopyWork(y) & -ClaimWork(y,x)) -> -ClaimsWork(x,y))", "all x y.((Work(x) & OtherPerson(y)) -> -Copies(x,y))", "all x.((Person(x) & -CopysWork(x) & ClaimsAsOwn(x)) -> -LikesAsOwn(x))"]}
{"id": "enwn_validation_215", "nl": "Copyright infringement is using protected works of another person without permission.", "fol": "", "prediction": ["all x.(Infringement(x) -> (UsesProtectedWorks(x) & UsesWorks(x,ProtectedHouseauthor,ProtectedHouseauthor) & UsesWorksWithoutPermission(x)))", "all x y.((Action(x) & Person(y) & UsingProtectedWorks(x,y)) -> -Permission(x))", "all x.(CopiesrightInfringement(x) -> UsesProtectedWorks(x))", "all x y.((ProtectedWork(x) & Person(y) & -Permission(x,y)) -> UsesWithout(x,y))", "all x.(CopyrightInfringement(x) -> UsesWorksWithoutPermission(x))", "all x.(CopyrightInfringement(x) -> UnauthorisedAuthorization(x))", "all x.(CopyrightInfringement(x) -> (UsesProtectedWorks(x) & -Permission(x)))", "all x.((CurrentInfringement(x) & UsesProtectedWorksOfOtherPerson(x) & WithoutPermission(x)) -> UsesAndRemovesDeacons(x))", "all x.(ContentOf(x) -> UsesProtectedWorksByOtherPerson(x))", "all x.(CopyrightInfringement(x) -> (UsesProtectedWorks(x) & -Permission(x)))", "all x.(CopyrightInfringement(x) -> UsesProtectedWorks(x,y))", "all x y z.((CopyrightInfringement(x) & Person(y) & Works(z) & Protected(x,z)) -> UsesWithoutPermission(x,y,z))", "all x.((CopyrightInfringement(x) & Use(x,y)) -> ProtectedWorksUnderOtherAuthor(y))", "all x.(CopyrightInfringement(x) -> Use(x,ProtectedWorks) & -Permission(x))", "all x.(Infringement(x) -> UsesProtectedWorksAgain(x))", "all x.(CopyrightInfringement(x) -> UsesProtectedWorks(x))"]}
{"id": "enwn_validation_216", "nl": "Ryan did not ask the band Super Cool for permission to use their song.", "fol": "", "prediction": ["Ryan -QuelledSuperCool(Ryan,Song)", "***FreshSong(Ryan) & -AskedSuperCool(Ryan,SuperCool) & -AskedForPermission(Ryan,SuperCool))", "all x.(Ryan(x) -> -(SuperCocoa (Band(x) & ForPermission(x))))", "Ryan did not ask for permission to use a song from the band SuperCool.", "Ryan did not askbandSuperCoolForPermissionToUseSong(Ryan)", "(-AskBandSuperCoolForPermission(Ryan))", "Ryan  never asked SuperCoolForPermission(Ryan,SuperCool)", "(-VarietyAsIsSuperCool(Ryan))", "(-CanAsk(Ryan,SuperCool))", "(-AsksForPermission(Ryan,SuperColor) / -AsksForPermission(Ryan,SuperCool))", "Ryan nixed(Neighborhood(Nature) & BandSuperCool(Nature) & HeardOnSong(Nature))", "-HeadedToWaitSong(Ryan,CoolBand)", "all x y.((Ryan(x) & BandSuperCoust(y)) -> -AnswerForPermissionToUseSong(X,y))", "Ryan -Zeppellin\u2019Song(Ryan) -AnswerForPermission(Ryan,SuperCool)-Than(Ryan,SuperCool))", "all x y.((Ryan(x) & BandSuperClickPermission(y)) -> -KnowsArticle(x,y))", "the band SuperCool(Ryan,Song,Use(Ryan))"]}
{"id": "enwn_validation_217", "nl": "Ryan made a video.", "fol": "", "prediction": ["Ryan made a video.", "Ryan made a video.", "Ryan made video.", "Ryan made a video.", "(MadeVideo(Ryan) & Duration(Ryan,0,0))", "all x.(Ryan(x) -> MadeVideo(x))", "Ryan made a video.", "Ryan made a video.", "all x.(Ryan(x) -> MadeVideo(x))", "all x y.((Ryan(x) & Video(y)) -> Made(x,y))", "-MakesVideo(Ryan)", "Ryan made a video.", "Ryan made a video.", "Ryan made a video.", "Ryan made a video.", "all x y.((Ryan(x) & Video(y)) -> Made(x,y))"]}
{"id": "enwn_validation_218", "nl": "Ryan used a song from the band Super Cool in the video.", "fol": "", "prediction": ["all x y z.((Ryan(x) & Song(y) & Band(z)) -> UsesCold(x,y,z))", "all x y z.((Ryan(x) & Song(y) & Band(z) & UsedInVideo(x,y,z)) -> SuperCool(y,z))", "all x y z.((Song(x) & Band(y) & Song(z) & SuperCool(z)) -> UsesInVideo(x,y,z))", "all x.((Ryan(x) & Song(x) & SuperCool(x)) -> UsedInVideo(x))", "Ryan usedSong(Ryan,SuperCool,Band(Ryan))", "all x y.((Ryan(x) & SuperCool(y) & UsedSong(x,y)) -> UsingSong(x,y))", "Ryan used a song from the band SuperCool(Ryan) in the video.", "Ryan used SongFromSuperCool in the video.", "all x y z.((Ryan(x) & Song(y) & SuperCool(z)) -> UsedInVideo(x,y,z))", "all x.((Ryan(x) & SuperCool(y)) -> UsedInVideo(x,y))", "all x y z.((Reynolds(y) & Song(z) & SuperCool(y)) -> UsedInVideo(y,z))", "all x y z.((Ryan(x) & Song(y) & Band(z)) -> Used(x,y,z))", "all x y.((Ryan(x) & Song(y) & FromSuperCool(y)) -> UsesInVideo(x,y))", "all x y.((Ryan(x) & Song(y) & SuperCool(z)) -> UsedInVideo(x,y,z))", "all x y.((Ryan(x) & Song(y)) -> UsedInVideo(x,y))", "all x y.((Video(x) & Ryan(y)) -> UsedSong(y,x))"]}
{"id": "enwn_validation_219", "nl": "All songs by Super Cool are protected work.", "fol": "", "prediction": ["all x.((Song(x) & SuperCool(x)) -> ProtectedWork(x))", "all x.((Song(x) & SuperCool(x)) -> SafeWork(x))", "all x.(SuperCool(x) -> ProtectedWork(x))", "all x.(SuperCool(x) -> ProtectedWork(x))", "all x.(SuperCool(x) -> ProtectedWork(x))", "all x.(SuperCool(x) -> ProtectedWork(x))", "all xy.(Song(x) & SuperCool(y) -> ProtectedWork(x))", "all x.((Song(x) & SuperCool(x)) -> ProtectedWork(x))", "all x.(SuperCool(x) -> Protection(x))", "all x.(SuperComedy(x) -> ProtectedWork(x))", "all x.(SuperCool(x) -> ProtectedWork(x))", "all x.(SuperColor(x) -> ProtectedWork(x))", "(all x.(SuperComfort(x) -> ProtectedWork(x)))", "all x.(SuperCoolSong(x) -> ProtectedWork(x))", "all x.(SuperComedy(x) -> ProtectedWork(x))", "all x.(SuperCool(x) -> ProtectedWork(x))"]}
{"id": "enwn_validation_220", "nl": "You should not copy protected work from other people because that's copyright infringement.", "fol": "", "prediction": ["all x.((People(x) & CopyProtectedWork(x)) -> CopyrightInfringement(x))", "all x y.((EquivalentDisclaimer(x) & Person(y)) -> -CopyProtectedWork(x,y))", "all x.((EarlyLife(x) & -CopyProtectedWork(x)) -> CopyrightInfringement(x))", "all x.((Person(x) & CopyProtectedWork(x)) -> CopyrightInfringement(x))", "all x y.((CopyProtectedWork(x) & OtherPeople(y)) -> CopyrightInfringement(x,y))", "all x.((Copies(x) & -ProtectedWork(x) & CopyrightInfringement(x)) -> -ProtectedWork(x))", "all x y.((Work(x) & Person(y)) -> -CanCopyProtectedWork(x,y))", "all x y.((Person(x) & WhoProtectedWork(y)) -> -Copies(x,y))", "all x y.((Doctor(x) & Person(y)) -> -CopiesProtectedWork(x,y))", "all x y z.((Work(x) & Person(y) & Person(z) & -CopyProtected(z)) -> CopyrightIrresponsibility(x,y,z))", "all x y.((Work(x) & Person(y)) -> (-CopyProtected(x,y) & -CopyProtected(x,y)))", "all x y.((CopiesProtectedWork(x) & Person(y)) -> CopyrightInfringement(x,y))", "all x.((WorkProtected(x) & -Copies(x)) -> CopyrightInfringement(x))", "all x y.((HostProtectedWork(x) & Person(y)) -> -CopiesProtectedWork(x,y))", "all x.(PositionHasCopy(x,y) -> -CopyProtectedWork(x))", "all x y.((Person(x) & Person(y) & ProtectedWork(x)) -> -Copies(x,y))"]}
{"id": "enwn_validation_221", "nl": "Ryan made a video and used a song from a band called Super Cool.", "fol": "", "prediction": ["Ryan made a video and used a song from a band called SuperCool.", "all x y z w.((Ryan(x) & Video(y) & Song(z)) -> (made(x,y) & Used(x,z) & SuperCool(w)))", "(Ryan madeReynoldsVideo(Ryan) & UsedSongFromSuperCool(Ryan))", "all x y z.((Ryan(x) & Video(y) & Song(z)) -> (Made(x,y) & UsedAt(x,z) & SuperCool(z))))", "(makesVideo(Ryan) & usedSong(Ryan))", "all x y.((Ryan(x) & Video(y)) -> MadeAndAvailused(x,y))", "all x y z.((Ryan(x) & Video(y) & Song(z)) -> (Made(x,y) & Used(x,z)))", "all x y.((Ryan(x) & Band(y)) -> (madeVideo(x,y) & UsedSong(x,y)))", "all x y z.((Ryan(x) & Video(y) & Song(z)) -> (Made(x,y) & Used(x,z)))", "all x y.((Ryan(x) & SuperCool(y)) -> (MadeVideo(x,y) & UsedSong(x,y)))", "all x y z.((Ryan(x) & Video(y) & Song(z)) -> (Made(x,y) & Used(y,Z) & SuperCold(z)))", "all x y z.((Ryan(x) & Video(y) & Song(z)) -> (Dreams(x,y) & UsesFromSaveCool(x,z)))", "(Ryan MadeVideo(Ryan,USA) & UsesSongFromCoolBeat(Ryan,USA))", "(all x.(Ryan(x) -> MakesVideo(x)) & UsedSong(x))", "all x.(Ryan(x) -> (Case(x,Video) & UsedSong(x) & SuperCool(x)))", "all x y z.((Ryan(x) & Video(y) & Song(z)) -> (Made(x,y) & UsedFrom(x,z) & SuperCool(z)))"]}
{"id": "enwn_validation_222", "nl": "Ryan used Super Cool's song without getting permission from the band first.", "fol": "", "prediction": ["all x.((RyanJensen(x) & SuperCool(y)) -> UsedSongWithoutBeingPermission(x,y))", "all x.((Ryan(x) & SuperCoolSong(x)) -> -GetsPermission(x,ex))", "all x y.((Ryan(x) & SuperCool(y)) -> UsedSong(x,y))", "Ryan used SuperCoolsSong(Ryan) -> -GetPermissionFirst(Ryan))", "-ReynoldsPerson(Ryan,SuperCoolSong) --> UsedWithoutPerson(Ryan,SuperCoolSong))", "all x y.((Ryan(x) & SuperCool(y)) -> UsedSong(x,y))", "Ryan used SuperCoolsSong(Ryan) & -GetPrivacyFromBandHead(Ryan))", "all x.(Ryan(x) -> (UsedSong(x,SherryCougar) & -RequiresPerson(x)))", "Ryan used SuperCoolsSong(Ryan) --> UsedWithoutPermission(Ryan))", "--> UsedSongWithneverPermission(Ryan,SuperCool))", "All x y.((Ryan(x) & SuperCool(y)) -> UsedSongWithAvoidance(x,y))", "Ryan used SuperCoolsDinner(Ryan,UseYong(Ryan,Vice-Vice-Vice-Vice-Vice-Vice-Vice-Vice-Vice-Vice-Vice-Vice-Vice-Vice-Vice-Vice-Vice-Vice-Vice-Vice-Vice-Vice-Vice-ViceVice-Vice-Vice-Vice-Vice-Vice-Vise-Vise-Vise-Vise-Vise-Visa-Visa-VisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVacVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVisaVinAVisaVisaVuumaViaVuumaVuum-VisaVuumaVuumaVuumaVuumaVuumAVCVuumaVuumAVuumavuumaVuumaVuumumAumaAdvuumumuumumX)AmuumumVutumumVuumumVuumumVuumumiumVuumumVitumumVuumumumumumumumumumumumumumumumumumumUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUMUM", "all x y z.((Ryan(x) & Song(y) & Band(z) & SuperCool(x,y)) -> UsedWithoutPermission(x,y,z))", "all x y.((Ryan(x) & SuperCool(y)) -> NeverHasPermissionBefore(x,y))", "everyone out there. ((ReynoldsSuperCoolSong(Ryan) & NoPermissionFromBand(Ryan)) -> UsedWithoutBand(Ryan))", "all x y.((Ryan(x) & SuperCoolSong(y)) -> UsedWithoutPermission(x,y))"]}
{"id": "enwn_validation_223", "nl": "Ryan used Super Cool's protected work without getting permission from the band first.", "fol": "", "prediction": ["all x y z.((Ryan(x) & SuperCool(y) & Book(z)) -> (ProtectedWork(z) & -RequiredPermission(z,y)))", "all x y z.((Ryan(x) & SuperCool(y) & ProtectionWork(z)) -> (UsedBy(x,z) & -GetPromissionFromBand(x)))", "(ProtectedWork(Ryan) -> (UsedWithoutBeingPermission(Ryan))))", "all x y.((Ryan(x) & SuperCool(y)) -> UsedProtectedWork(x,y))", "Ryan ((SuperColor(Ryan) & ProtectionWorks(Ryan)) -> (-RightIntoBandPermission(RRY)))", "all x.((Ryan(x) & SuperCool(x)) -> UsedProtectedWork(x))", "all x y z.((Ryan(x) & SuperCool(y) & ProtectedWork(z)) -> UsedWithoutBeingPermission(x,y))", "all x y.((Ryan(x) & SuperCool(y)) -> User(x,y))", "Ryan used SuperCoCools'ProtectedWork(Ryan) -> -GetPermission(Ryan))", "all x y.((Ryan(x) & SuperCool(y) & UsedProtectedWork(x,y)) -> -GetPermissionFromBand(x))", "all x y.((Ryan(x) & SuperCoolAndBand(y)) -> UsesProtectedWork(x,y))", "all x y.((Ryan) & SuperCool(y)) -> UsedProtectedWork(x,y))", "(StopFunctions(Ryan,StandardWork) & IsProtected(Ryan) & -GettingPermission(Ryan,Band))", "all x.(Ryan(x) -> (UsedSuperCoolProtected(x) & -GettingPermissionFromBand(x)))", "all x y.((Ryan(x) & SuperCool(y) & -WaysContentFirst(y)) -> UsedSafety(x,y))", "all x.((Ryan(x) & SuperClearsProtectedWork(x)) -> -GuidedFromBandOrBand(x))"]}
{"id": "enwn_validation_224", "nl": "Ryan should not have used Super Cool's song because he committed copyright infringement.", "fol": "", "prediction": ["all x.((Ryan(x) & -UnusedSuperCoolSong(x)) -> CopiescopyrightInfringement(x))", "all x y.((Ryan(x) & SuperCool(y)) -> -CopyrightInfringement(x,y))", "(CookieByDesigning(Ryan,SuperCoolSong) -> -Uses(Ryan,SuperCoolSong))", "-(ShouldFail(Ryan) & SuperCoolsSong(Ryan))", "(all x.((Ryan(x) & SuperCoolSong(x,y)) -> CommittedCopyrightInfringement(x)))", "All x.((Ryan(x) & SuperColdSong(x)) -> (CommittedCopyrightInfringement(x)))", "all x y.((Ryan(x) & SuperCool(y) & UsedSong(x,y)) -> CommittedCopyrightInfringement(x))", "all x.((Ryan(x) & -UsedSuperCoolsSong(x)) -> CommittedCopyrightInfringement(x))", "all x y.((Ryan(x) & SuperCoolsSong(x) & DiscontinuedUse(x,y)) -> CommittedCopyrightInfringement(x))", "(LimitCopyrightInfringement(Ryan) & -UsedSuperCoolSong(Ryan))", "(-UsedSuperCoolsSong(r) & CommittedCopyrightImpact(r))", "all x.((Ryan(x) & SuperCoolSong(x)) -> -Used(x,CopyrightInfringement))", "(-UsedSuperCoolsSong(Ryan) & CommittedCurrentInfringement(Ryan))", "all x.((Ranan(x) & -UsedSuperCoolSong(x)) -> CommittedCopyrightInfringement(x))", "Ryan should not have used SuperCoolsSong(Ryan) -> CommittedcopyrightInfringement(Ryan))", "all x y.((Ranan(x) & SuperCool(y) & Song(z) & CommitsCopyrightInfringement(x)) -> -Uses(x,z))"]}
{"id": "enwn_validation_225", "nl": "Scaring people is mean and rude unless you have a good reason.", "fol": "", "prediction": ["all x.((ScaringPeople(x) & -GoodRaison(x)) -> (Mean(x) & Rust(x)))", "all x.((ScaringPeople(x) & -GoodRaison(x)) -> (More(x) & Rust(x)))", "all x.((ScarePerson(x) & -GoodRight(x)) -> (Mean(x) & Rust(x)))", "all x.(ScaringPeople(x) -> (Mean(x) & Rust(x)))", "all x.((Person(x) & Scares(x)) -> (Mean(x) & Rust(x)))", "all x.((ScaringPeople(x) & Be Mean(x) & BeRule(x)) -> -GoodApraison(x))", "all x.((ScaringPeople(x) & -GoodRule(x)) -> (Mean(x) & Reckless(x)))", "all x.((ScaringPeople(x) & -GoodRight(x)) -> (Mean(x) & Rupid(x)))", "all x.(ScaringPeople(x) -> (Mean(x) & Rough(x)))", "all x y.((ScaredPerson(x) & Person(y)) -> (Mean(x,y) & Rust(x) & -GoodRaison(x)))", "all x.((ScaredPeople(x) & -GoodMent(x)) -> RustyAndMusty(x))", "all x.((ScarePeople(x) & -GoodCause(x)) -> (Mean(x) & Rust(x)))", "all x.((ScaringPeople(x) & -GoodRight(x)) -> (Mean(x) & Rude(x)))", "all x.(ScaredPeople(x) -> (Mean(x) & Rust(x)))", "all x.((ScarePeople(x) & NotGoodRight(x)) -> (Mean(x) & Rust(x)))", "all x.((ScarePeople(x) & -GoodRite(x)) -> MeanAndRude(x))"]}
{"id": "enwn_validation_226", "nl": "You generally do not want to do mean or rude things to people.", "fol": "", "prediction": ["all x.(YouNovoteMajorOrRullyThingsToPeople(x) -> -WorstToPeople(x))", "all x y.((Veteran(x) & Person(y)) -> -DoMeanGoodsTo(x,y))", "all x.((Mean(x) | Rust(x)) -> -WantsToPerson(x))", "all x y.((People(x) & People(y)) -> (-DoMean(x,y) | DoRust(x,y)))", "all x.((Employee(x) & -MeanEverything(x) & -RirdToPeople(x)) -> -DoMeanOrRuleThings(x))", "all x.((Person(x) & -Mean(x,y) & -Rule(y)) -> -DoMeVeryGraciousThings(x,y))", "all x y.((Family(x) & Person(y)) -> -DoMeanOrRuleTo(x,y))", "all x y.(((Person(x) & Person(y)) -> Dose(x,y))", "all x.((People(x) & -Magable(x) & Ridiculous(x)) -> -NeedsWorstTreatment(x))", "all x.((Men(x) | Rusty(x)) -> -Uses(x))", "all x y.((LongLaw#(x,y) & Person(y)) -> -MeanTo(y) & (RustToPerson(y) | MeanTo(y))))", "all x y.((Client(x) & Person(y)) -> -(Mean(x,y) | Rust(x,y))))", "all x.((People(x) & NoMeanings(x) & NoRuleTalk(x)) -> UsuallyDoneTo(x,y))", "all x.((Person(x) & -Do(x,Meaning)) | Do(x,Rugby)) -> NotTo(x))", "all x y.((People(x) & (Mean(y) | Rust(y))) -> -DoMean(x,y))", "all x.((Person(x) & Is(x,y) & DoesMeanTo(y,x)) | IsRustTo(y))"]}
{"id": "enwn_validation_227", "nl": "Luke yelled fire for fun.", "fol": "", "prediction": ["(YelledFireForFun(Luke))", "Luke yelled fire for Fun.", "Luke yelled FireForFun.", "Luke yelled FireForFun(Y)", "(Yelled(Luke) & Fire(Luke))", "Luke yelledFunFire(y)", "Luke yelledForFun(KnewFire,Remember(Luke))", "Luke yelled fire for fun.", "Luke yelled fire for fun.", "Luke yelled FireForFun.", "(YelledForFun(Luke) & FireForFun(Luke))", "Luke yelled fire for fun.", "LukeyelledForFun(Luke,Fire)", "Luke yelled on fire for Fun.", "-all x.((Luke(x) & Fire(x)) -> Yallen(x))", "LukeyelledFireForFun(Luke,Fun)"]}
{"id": "enwn_validation_228", "nl": "Yelling fire for fun is not a good reason to yell fire.", "fol": "", "prediction": ["all x.((YellingFireForFun(x) & -GoodForFun(x)) -> -GoodForFun(x))", "all x.(YellingForFun(x) -> -GoodRightToYellForFun(x))", "all x.(YellFire(x) -> -(GoodRightToYellFire(x) & -(GoodRightToYellFire(x))))", "all x.((YellsFire(x) & Fun(x)) -> -GoodRightToYellFire(x))", "-GoodUnderstandingStory(YellowFire(y) & Fun(y))", "all x.(YellFire(x) -> -GoodRun(x))", "all x.(YellFireForFun(x) -> -GoodRight(x))", "all x.(YellsFire(x) -> -GoodRightToYellFire(x))", "all x.(YellowFireForFun(x) -> -GoodRightToYellFire(x))", "all x.((YellSpark(x) & ForFun(x)) -> -GoodRitualToYellFire(x))", "all x.((YellsFire(x) & ForFun(x)) -> -GoodFun(x))", "all x.(YellFire(x) -> -Good(x))", "all x.((YellForFun(x) & -GoodPrandom(x)) -> NoYellForFun(x))", "-all x.((YellingForFun(x) & -GoodMomentForYellingFire(x)) -> -(Likely(x) & GoodRight(x)))", "all x.(YellFun(x) -> -GoodRightToYellFun(x))", "all x.((YellsFire(x) & ForFun(x)) -> -GoodRightToYellFire(x))"]}
{"id": "enwn_validation_229", "nl": "When you yell fire for without a good reason, you scare everyone around you.", "fol": "", "prediction": ["all x.((YellsFire(x) & -GoodRight(x)) -> ScaresEveryone(x))", "all x.((YellsFireFor(x) & -GoodRight(x)) -> ScaresEveryone(x))", "all x.((YellStorage(x) & NOGoodRight(x)) -> Scare(x))", "all x.(YellsFire(x) & -GivesGoodRight(x)) -> ScaresEveryone(x))", "all x.((YellsFire(x) & -GoodRun(x)) -> ScareEveryone(x))", "all x.((YellsFireForWithoutGoodRight(x)) -> ScaresEveryone(x))", "all x.((YellsFireForWithoutGoodRight(x) & ScaresCompanies(x)) -> EveryoneWithoutGrant(x))", "all x.((YellsFireFor(x) & -GoodRaison(x)) -> ScaresSoomley(x))", "all x.((YellsFireFor(x) & WithoutGoodRight(x)) -> ScaresEveryONEAboutYou(x))", "all x y.((YellsFire(x) & NoGoodRight(y)) -> ScareEveryone(x,y))", "all x y z.((YellsFire(x) & Reason(y) & -Good(z) & Furiously(x)) -> ScaresSomeone(x))", "all x y.((YellsFire(x) & -GoodRight(x)) -> ScareEveryone(y))", "all x y.((YellsFire(x) & Fire & -GoodRight(x)) -> Scares(x,y))", "all x.((YellsFire(x) & WithoutGoodRight(x)) -> ScaresEveryone(x))", "all x y.(YellsFireForWithoutGoodRight(x) -> Scare(x,y))", "all x.((YellsFireFor(x) & -GoodReplacement(x)) -> ScaresEveryoneAroundYou(x))"]}
{"id": "enwn_validation_230", "nl": "You should not scare people without good reason.", "fol": "", "prediction": ["all x.((ScaresPeople(x) & -GoodMoment(x)) -> -ScaresPeople(x))", "all x.((Person(x) & -ScareSurprises(x)) -> -ScarePerson(x))", "all x y.((Cause(x) & People(y) & -Scare(x,y)) -> -Scare(x,y))", "all x.(ScarePeople(x) -> -(IsBeforeGuest(x) & HasGoodRight(x)))", "all x.((ScarePeople(x) & & WithoutGoodMotor(x)) -> -HasGuardian(x))", "all x.((Scare(x) & -ScariesPersonsUntilGoodMoon(x)) -> -ScarePeople(x))", "all x.((CauseYou(x) & -Scare(x)) -> -CauseYou(x))", "all x.((ScarePerson(x) & GoodRun(x)) -> -(ScarePerson(x) & ScarePerson(x))))", "all x.((Scare(x) & -Scare(x)) -> AvoidsScare(x))", "all x.(Scare(x) -> -Scare(x))", "all x y.((ScarePeople(x) & Person(y) & -ScareInput(x,y)) -> -Scare(x,y))", "all x.((Person(x) & -Scare(x)) -> GoodMoment(x))", "all x.(Scare(x) -> -Surprise(x,y))", "all x y.((Spoken(x) & Person(y)) -> -(Scare(x,y) | GoodResue(y)))", "all x.((Person(x) & -Scare(x)) -> NotGoodRaison(x))", "all x.((Scare(x) & -GoodRun(x)) -> -Scare(x))"]}
{"id": "enwn_validation_231", "nl": "Luke yelled fire without a good reason.", "fol": "", "prediction": ["Luke yelled firewithoutGoodRation(luke,y)", "Luke yelled fire without a goodreason.", "Luke yelled fire without a goodr reason.", "Luke yelled fire \"withoutGoodRight\"", "Luke yelled fire, WithoutGoodRight(Luke)", "Luke yelled firewithoutGoodRun(Luke)", "Luke yelled(Luke,fire) -> -GoodRight(Luke,fire))", "LukeyelledFireWithoutGoodRite(Luke,Y)", "(YelledFire(Luke1) & -GoodGround(Luke))", "Luke yelled fire without a good reason.", "Luke yelled fire without a good reason.", "Luke yelled fire without good reason.", "Luke yelled fire without goodr reason.", "Luke yelled fire without a goodrough reason.", "Luke yelled fire without good Reason.", "all x y.((Lucy(x) & Fire(y)) -> YelpedWithoutGoodCause(x))"]}
{"id": "enwn_validation_232", "nl": "Luke scared everyone around him without a good reason.", "fol": "", "prediction": ["all x y.((Luke(x) & Person(y)) -> (Scared(x,y) & NoGoodRun(x)))", "all x y.((Luke(x) & GoodRight(y)) -> ScarredEveryone(x,y))", "all x y.((Lucy(x) & Everyone(y)) -> ScaredWithoutGoodRight(x,y))", "all x.(Luke(x) -> (ScaredEveryone(x) & WithoutGoodRight(x)))", "all x y.(Scare(x) & Person(y) & -GoodRite(x))", "-GoodRight(Luke)", "all x.(Luke(x) -> ScaredEveryone(x))", "all x y.((Luke(x) & (Owner(y) | -Owner(y))) -> ScarredWithoutGoodRight(x,y))", "all x y.((Luke(x) & Friends(y) & -GoodRun(x,y)) -> Scarred(x,y))", "all x y.((Luke(x) & AroundLuke(y)) -> Scared(x,y))", "all x.((Luke(x) & EveryoneAround(x)) -> ScarredWithoutGoodRun(x))", "all x y.((Luke(x) & Everywhere(y) & -GoodRun(x)) -> Scarees(x,y))", "Luke scared everyone around him for no good reason.", "Luke scared everyone around him in no-goodRaison(Luke)", "all x y.((Luke(x) & EveryoneAround(y)) -> ScarredPoorWhy(x,y))", "all x y.((Luke(x) & Everyone(y)) -> ScarredWithoutGoodRaison(x,y))"]}
{"id": "enwn_validation_233", "nl": "Luke should not have yelled fire.", "fol": "", "prediction": ["Luke -yelledFire(x)", "Luke should have yelled.", "Luke should not have yelledfire.", "(all x.(Luke(x) -> -YelledFire(x)))", "Originally, Luke's yelled fire.", "Luke should NOTYELLEDFire(Luke,PoisonFight)", "Luke should not have yelledfire.", "exists x.(Luke(x) & -YelledFire(x))", "All x.(Luke(x) -> -YelledFire(x))", "Luke should not have yelledfire.", "Luke should not have yelled fire.", "Luke n.d.((Luke(n) & Fire(v)) -Yelled(n))", "Luke ain't yelledFire(a)", "-yelledFire(Luke)", "(-YelledFire(Luke)", "Luke should not have yelledFfire(Luke)"]}
{"id": "enwn_validation_234", "nl": "Even though you won't be punished, you should not do bad things.", "fol": "", "prediction": ["(-Peaced(x) | -BadThing(x)))", "(NoPatrified(x) & -Peaced(x)) -> -BadThing(x))", "exists x.(BadThing(x) & -Broken(x))", "(-Punished(x) & -DoBadThings(x))", "(-punished(y) | -BadThings(y)))", "all x.((Puned(x) & -Expects(x)) -> -DoBadThings(x))", "(-Punished(x) & -Punished(x)) -> -BadThings(x))", "all x.((Punished(x) & -Responsable(x)) -> -DoBadThings(x))", "all x.((Puned(x) & -Prewarded(x)) -> -BadThanThings(x))", "(-Pencilled(e) & -Thoughts(b))", "-BePatched(-) & -BadThings(-)", "all x.((Spencil(x) & -Plains(x)) -> -DoBod(x))", "all x.(-Punished(x) -> -DoBadThings(x))", "all x.((Punished(x) & -Puned(x)) -> -BadThings(x))", "all x.((Punished(x) & -Responsed(x)) -> -OddThings(x))", "(-Punished(p) & -BadThing(b)) -> -Punished(p) & -Punished(c,p))"]}
{"id": "enwn_validation_235", "nl": "If no one sees you do something bad, you won't get punished.", "fol": "", "prediction": ["all x.((NoOneSees(x) & BadDoing(x)) -> -Punished(x))", "all x.(Lockup(x) -> -Repeated(x))", "all x.((NoOneSeesBad(x) & SeesScreens(x,S)) -> -Puned(x))", "all x.((NoOneSeen(x,y) & BadDoing(y)) -> -Punished(x))", "all x.((NoOneSees(x,y) & BadStories(y)) -> -Spatched(x))", "all x.((NoOneSeesMad(x) & You(x,y)) -> -Spent(x,y))", "all x.((NoOneSees(x) & Sees(x,Bad)) -> -Pencified(x))", "all x.(NoSees(x,y) -> -Puned(y))", "all x.(NoSeesBad(x) -> -Punished(x))", "all x.((NoOneSeesYou(x) & BadDoing(x)) -> -Puned(x))", "all x.((NoOneSeesYouDoBad(x)) -> -Punished(x))", "all x.((NooneSees(x) & BadDoing(x)) -> -Punished(x))", "all x.((NoManSeesScreens(x) & BadDose(x)) -> -Punished(x))", "all x.((NooneSees(x,y) & BadDoing(y)) -> -GetPunished(x))", "all x.((NoSeenStillDoing(x) & BadStatus(x)) -> -StrangePunished(x))", "all x.((NoOneSeesBADDoing(x)) -> -Psenated(x))"]}
{"id": "enwn_validation_236", "nl": "Mike can steal the wallet.", "fol": "", "prediction": ["(SnakeWallet(Mike,MM))", "all x.(Mike(x) -> CanStoleWallet(x))", "all x.(Mike(x) -> CanStolenWallet(x))", "Mike CanStealWallet(Mike)", "all x.(Mike(x) -> CanSteal(x,Wallet))", "CanPurchaseWallet(Mike)", "-Breakfast(Mike)", "all x.(Mike(x) -> CanStealWallet(x))", "all x y.((Mike(x) & Password(y)) -> CanSteal(x,y))", "canStealWallet(Mike)", "(StoleWallet(Mike) | CanStealWallet(Mike)))", "all x y.((Mike(x) & MoneyBand(y)) -> CanSteal(x,y))", "all x.(Mike(x) -> HearWallet(x))", "all x.(Mike(x) -> (CanStealWallet(x)))", "exists x.(Mike(x) & StealWallet(x))", "all x.((Mike(x) & Banknote(y)) -> CanSteal(x,y))"]}
{"id": "enwn_validation_237", "nl": "When you turn away from something you cannot see it.", "fol": "", "prediction": ["all x.((TurnsAway(x) & Sees(x)) -> -Seen(x))", "all x.(TurnAWAYFrom(x) -> -See(x))", "all x.((TurnAwayFrom(x) & -Widely(x)) -> -See(x))", "all x y.((TurnsAwayFrom(x,y) & Thing(y)) -> -Seen(x,y))", "all x.(TurnawaysFromChemical(x) -> -See(x,y))", "all x y z.((Attention(x) & Something(y) & TurnAway(x)) -> -Seen(t,y))", "all x.((TurnAwayFromInformation(x) & CannotSeeIt(x)) -> CannotSeeIt(x))", "all x y z.((TurnsAway(x) & Something(y) & TurnsAway(z)) -> InhibitsSeizing(x,y,z))", "all x.(TurnAwayFrom(x,OfNature) -> -SelectsFrom(x,Nature))", "all x.(RunAwayTo(x) -> -See(x))", "all x y.((TurnsAbove(x) & Something(y)) -> -CanSeen(x,y))", "all x y.((TurnAway(x) & TurnFrom(x,y)) -> -CanSee(x,y))", "all x.(TurnAwayFrom(x) -> -EarlySeed(x))", "all x.(TurnsAwayFrom(x) -> -Sees(x))", "all x.((TurnAway(x) & HasToo(x,y)) -> -Seething(y))", "all x.(TurnAwayFromYourPosition(x) -> -Occur(x,y))"]}
{"id": "enwn_validation_238", "nl": "Josh turned away from Mike and the wallet.", "fol": "", "prediction": ["all x y.((Josh(x) & Mike(y)) -> TurnedAbove(x,y))", "Josh turnedsavedFromMikeAndWallet(Josh)", "Josh turned away from Mike and the wallet.", "all x.((Josh(x) & Mike(y)) -> TurnsAwayFrom(x,y))", "Steve & Mike turned (AwardsFrom(Johs) & TurnedAwayFrom(Johs,Mike)", "Josh -It TurnedAwayFromBushAndWallet(Josh))", "all x y.((Josh(x) & Mike(y)) -> TurnedAway(x,y))", "Josh swung out of relationship with Mike and wallet(s) & turned awayfrom(y,s))", "Josh turned away from Mike and the wallet.", "all x y.((Execution(josh) & Mike(y) & TurnsAwayFrom(josh(x,y)) -> TurnsAway(x,y))", "Josh aiksato avows(Josh,Mike) & wallet(Josh,Mike))", "Josh turned away from Mike and the wallet.", "Josh sstuckawaysandMikeAndWallet(s)", "Josh turned away from Mike and the wallet.", "Josh a turn from Mike and the wallet.", "Josh swooned away from Mike and his wallet."]}
{"id": "enwn_validation_239", "nl": "Stealing is bad.", "fol": "", "prediction": ["all x.(Stolen(x) -> Bad(x))", "all x.(Stolen(x) -> Bad(x))", "all x.(Stealing(x) -> Bad(x))", "all x.(Stealing(x) -> Bad(x))", "all x.(Stealing(x) -> Bad(x))", "all x.(Stolen(x) -> Bad(x))", "all x.(Staling(x) -> Bad(x))", "Stoaling(s)", "all x.(Stealing(x) -> Bad(x))", "all x.(Stealing(x) -> Bad(x))", "all x.(Stealing(x) -> Bad(x))", "all x.(Stealing(x) -> Bad(x))", "all x.(Stealing(x) -> Bad(x))", "all x.(Stolen(x) -> Bad(x))", "all x.(Stealing(x) -> Bad(x))", "all x.(Stealing(x) -> Bad(x))"]}
{"id": "enwn_validation_240", "nl": "Josh turned away and cannot see Mike or the wallet.", "fol": "", "prediction": ["all x.((Joshua(x) & TurnedAway(x)) -> (-Sees(x,Mike) | Sees(x,Wallet))))", "Josh hat sich awry(ish) & (-HasSeen(y,Mike) | HasSeen(y,muck)))", "((Josh(Josh) & TurnedAway(Josh)) & -CanSeeMike(Josh) & -CanSeeWallet(Josh))", "all x.((Joshua(x) & TurnedAway(x)) -> -(SeesMike(x) | CanNotSeeWallet(x)))", "Josh has turned away and is unable to see Mike or check wallet.", "all x y z.((Josh(x) & (Mica(y) | wallet(z))) -> (StormsAway(x) & -Sees(x,y,z))))", "-(JoshTurnedAway(Josh) & Mike(Josh))", "(TranscendedFrom(josh) & -(Sees(josh,mike) | Sees(josh,delete))))", "was turned away (Josh)", "all x.((Josh(x) & TurnedAway(x)) -> (-SightsMike(x) | -SelectsWallet(x))))", "all x y.((Josh(x) & Mike(y)) -> (TurnedAway(x,y) & -(Knows(x,Mike) | Knows(x,Kash)))))", "Josh turnedAway(Josh) & ((-Seen(Josh, Mike) | -Seen(Josh,Wallet)))", "Josh turned away and we cannot see Mike or the wallet.", "all x.((Joshua(x) & TurnedAway(x)) -> (-SeesMike(x) | -SeesWallet(x))))", "all x.(HossachTurnedAway(x) -> (-SightsMike(x) | CanNotSelectWallet(x)))", "all x.((Josh(x) & turnedAway(x)) -> (-seesMike(x) | InViewWallet(x))))"]}
{"id": "enwn_validation_241", "nl": "Mike can steal the wallet without Josh seeing.", "fol": "", "prediction": ["all x.((Mike(x) & Tape(x) & -Seen(x,y)) -> CanStealWallet(x,y))", "all x y z.((Mike(x) & Pocket(y) & Josh(z)) -> (StopsSharing(x,y,z) & Steals(x,y)))", "all x.((Mike(x) & Mike(x)) -> -SelectsWallet(x))", "all x y z.((Mike(x) & wallet(y) & Josh(z)) -> (CanSteal(x,y,z) & -Sees(x,y,z)))", "all x y.((Mike(x) & Josh(y)) -> InCoinToStealWallet(x,y))", "all x y.((Mike(x) & Josh(y)) -> CanStoleWallet(x,y))", "all x y.((Mike(x) & Josh(y)) -> (FindsWallet(x,y) & CanSay(x,y)))", "all x.((Mike(x) & Josh(y)) -> CanStealWalletWithoutSeeing(x,y))", "all x y.((Pizza(x) & Josh(y)) -> CanStolenStatus(x,y))", "makes it possible to steals(Mike,Earns,Josh))", "all x y.((Mike(x) & Josh(y)) -> StealsWalletWithoutSeeing(x,y))", "all x y.((Attack(x) & wallet(y)) -> CanSteal(x,y))", "all x y.((Mike(x) & Josh(y) & StealWallet(x,y)) -> CanSettle(x,y))", "all x y.((Mike(x) & Josh(y)) -> (StolenBy(x,y) & -Seeing(x,y)))", "all x.((Mike(x) & JoshSeeing(x)) -> CanStoleWallet(x))", "all x y.((Mike(x) & Josh(y)) -> CanStoleWallet(x,y))"]}
{"id": "enwn_validation_242", "nl": "Mike can do something bad without Josh seeing.", "fol": "", "prediction": ["Mike can do something bad without JoshSeeing.", "all x.((Mike(x) & JoshSeeing(x)) -> CanDoBad(x))", "all x.(Mike(x) -> CanDoBakeWithoutJoshua(x))", "all x.((Mike(x) & JoshSeeing(x)) -> CanDoNotHas(x,Mike))", "all x.(Mike(x) -> CanDoBadWithoutJosh(x))", "all x.(Mike(x) -> CanDoBadWithoutSnaking(x))", "all x y z.((Mike(x) & Josh(y) & Bad(z) & CanDo(x,z)) -> CanNotSee(x,z))", "all x y.((Mike(x) & Josh(y)) -> CanDoBadWithoutSeeing(x,y))", "all x.((Mike(x) & JoshSeeing(x)) -> CanDoBathWithoutSeeing(x))", "all x y.((Mike(x) & Josh(y)) -> CanDoThingBadWithoutSeeing(x,y))", "all x.((Mike(x) & Mike(x)) -> CanDoneBadWithoutFootball(x))", "all x.(Mike(x) -> CanDoBadWithoutJoshIn(x))", "all x.(Mike(x) -> CanDoBadWithoutDesk(x))", "all x.(Mike(x) -> CanDoBadWithoutJosh(x))", "all x y.((Mike(x) & Josh(y)) -> CanDoBaker(x,y))", "all x y.((Mike(x) & Josh(y)) -> CanDoBadWithoutSeeing(x,y))"]}
{"id": "enwn_validation_243", "nl": "Mike can do something bad without getting punished.", "fol": "", "prediction": ["all x.((Mike(x) & Bad(x)) -> CanDo(x,y))", "all x.(Mike(x) -> (CanDoBad(x) & -Puned(x)))", "(Puffered(Mike) & Good(Mike))", "(CanDoBad(Mike,Father) & -Peaced(Mike,Father))", "all x.(Mike(x) -> CanDoBadPlenty(x))", "all x.(Mike(x) -> CanDoBadWithoutPediatrics(x))", "all x.(Mike(x) -> CanDoBad(x))", "all x.(Mike(x) -> CanDoGoodAndNoPunished(x))", "all x.(Mike(x) -> CanDoBad(x))", "all x y.((Mike(x) & Bad(y)) -> CanDo(x,y))", "all x.(Mike(x) -> CanDoBad(x))", "all x.(Mike(x) -> (CanDoBadAndnotPulled(x)))", "all x.(Mike(x) -> CanDoBad(x))", "all x.(Mike(x) -> CanDoBad(x))", "all x.(Mike(x) -> CanDoBad(x))", "all x.(Mike(x) -> CanDoBadButRenewed(x))"]}
{"id": "enwn_validation_244", "nl": "Mike should not do something bad even though he will not get punished.", "fol": "", "prediction": ["all x.(Mike(x) -> -DoBob(x))", "all x y.((Mike(x) & Action(y) & -Puned(x)) -> -Bad(x,y))", "all x.(Mike(x) -> -DoBad(x))", "all x.((Mike(x) & -Expects(x)) -> DoseBad(x))", "all x.((Mike(x) & -Incomplete(x)) -> You(x))", "all x.((Mike(x) & -Punished(x)) -> -BadDoing(x))", "all x.(Mike(x) -> -HasBadBad(x))", "all x.((Mike(x) & -GoingBad(x)) -> DoNotDo(x,y))", "all x.((Mike(x) & -Punished(x)) -> -BadGeft(x))", "all x.((Mike(x) & -Punished(x)) -> -DoBad(x))", "all x y.((Mike(x) & Bad(y)) -> -Does(x,y))", "all x.((Mike(x) & Bad(x)) -> -ItMustBePencilled(x))", "all x.((Mike(x) & -Judged(x)) -> -DoTheBare(x))", "all x.((Mike(x) & -Felt(x)) -> NoBadDoing(x))", "all x y.((Mike(x) & Bad(y)) -> -Begraved(x,y))", "(-(Mike(Mike) & Bad(Mike)) -> -Punished(Mike,Although)))"]}
{"id": "enwn_validation_245", "nl": "You should clean messes you create.", "fol": "", "prediction": ["all x.((Mess(x) & Created(x)) -> Cleans(x,y))", "all x.(Mess(x) -> Clean(x,y))", "all x y z.((Measure(x) & Creation(y) & Mess(z)) -> Cleans(x,y,z))", "all x.((MakesMission(x) & Cleans(x)) -> Cleans(x))", "all x.(CleanMessies(x) -> Creates(x))", "exists x.(Measure(x) & Clean(x))", "all x.((Mess(x) & Created(x)) -> Clean(x,Mess))", "all x.((Mess(x) & CreatedBy(x)) -> Clean(x))", "all x.(EssentialDisease(x) -> Clean(x))", "all x.((Mess(x) & Removed(x)) -> Cleans(x))", "all x y.(((Mission(x) & Create(y)) -> Clean(x,y))", "all x.((Measure(x) & Creates(x)) -> Cleans(x))", "all x.((Clean(x) & Create(x) & Mops(x)) -> Clean(x))", "all x.((Mess(x) & Creates(x)) -> Cleans(x))", "all x.((Meme(x) & Create(x)) -> Clean(x))", "all x y.((Measure(x) & Create(y)) -> Clean(x,y))"]}
{"id": "enwn_validation_246", "nl": "If you made a spill, you made a mess.", "fol": "", "prediction": ["all x.(Spoison(x) -> MadeMask(x))", "all x y.((Spoke(x) & Makes(x,y)) -> Makes(x,y))", "all x.((MadeSpill(x) & MadeMama(x)) -> MadeMama(x))", "all x.(Spoken(x) -> MadeMameShadow(x))", "all x.(Spoken(x) -> MadeMamaChaos(x))", "all x.((MadeSpoke(x) & Spill(x)) -> MadeMachine(x))", "all x.(Spoken(x) -> MadeMosh(x))", "all x.((Spoken(x) & Made(x,y)) -> MadeMachine(y))", "all x.((Spoken(x) & MadeMess(x)) -> MadeMess(x))", "all x.(MakesSpoke(x) -> MakesMachine(x))", "all x.(((Spoken(x) & Spill(x)) -> MadeMammer(x))", "all x.((MadeSpoke(x) & MadeMask(x)) -> MadeMask(x))", "all x.((Spoken(x) & Made(x,Spoke)) -> Made(x,Machine))", "all x.((MadeShap(x) & Mashes(x)) -> MakesMameSpoke(x))", "all x.exists y.((WillSpoison(x) & Spill(y)) -> MadeMach(x,y))", "all x.((MakesSpoke(x) & MadeMachine(x)) -> MadeMachine(x))"]}
{"id": "enwn_validation_247", "nl": "Amy dropped her ice-cream on the floor and did not clean it.", "fol": "", "prediction": ["all x.((Amy(x) & (IceCream(x) | Floor(x))) -> (dropped(x) & -CleanEver(x)))", "(-(Amy(Amy) & IceCream(Amy)))", "all x y.((HasIceCream(x) & Floor(y) & -Holed(y)) -> DroppedAndCleared(y,y))", "all x.((Amy(x) & DropsIceCream(x)) -> -CleansOrCleans(x))", "all x.((Amy(x) & DroppedIceCream(x,floor)) -> -Clean(x,floor))", "(DroppedIceCream(Amy) | Didn'tCleanIceCream(amy,AP))", "all x.((Amy(x) -> DroppedIceCreamOnFloor(x)) & -CleanedIceCream(x))", "-CleanUp(AMY)", "(Shaped(Amy) & -Cleared(Amy))", "all x y z.((Amy(x) & IceCream(y) & Floor(z)) -> DroppedOn(x,y)) & -Cleaned(x,y))", "(PlacedIceCreamOnFloor(Amy,Mulder) & -CleanedIceCream(Amy,Mulder))", "all x.((Amy(x) & DroppedIceCream(x)) -> -CleanedFloor(x))", "all x y z.((Amy(x) & IceCream(y) & Floor(z)) -> (Shuts(x,y) & -Cleans(x,y,z)))", "all x.(Amy(x) -> (PutsIceCreamOnFloor(x) & -CleansFloor(x)))", "all x y.((Amy(x) & IceCream(y) & Floor(z)) -> (LostOn(x,y,z) & -Cleaned(x,y) & -Cleaned(x,z)))", "Posted by: AmyIceCream(Amy) & DroppedOnFloor(amy,a,z) & -Cleaned(amy,x))"]}
{"id": "enwn_validation_248", "nl": "If you drop ice cream on the floor, you make a spill.", "fol": "", "prediction": ["all x.(ShappingAndDropsIceCream(x) -> MakesSpill(x))", "all x y.((DropsIceCreamOnFloor(x) & Floor(y)) -> MakesSpoke(x))", "all x y.((IceCream(x) & DropSpoison(x)) -> MakesSpoilage(x))", "all x.((DropsIceCream(x) & Floor(x)) -> MakesSpill(x))", "all x.(DropsIceCreamOnFloor(x) -> MakesSpont(x))", "all x.((LotIceCream(x) & Floor(x)) -> MakeSpill(x))", "all x y.((DropsIceCreamOnFloor(x) & DropsIceCreamOnFloor(x,y)) -> MakesSpill(x))", "all x.((IceCream(x) & DropsOnFloor(x)) -> MakesSpoilage(x))", "all x.((DropsIceCreamOnFloor(x) & MakesSpoke(x)) -> MakesSpoke(x))", "all x y.((DropsIceCreamOnFloor(x) & Floor(y)) -> MakesSpoilage(x))", "all x.((DropsIceCreamOnFloor(x) & MakesSpill(x)) -> Slips(x))", "all x.(DropsIceCreamOnFloor(x) -> MakesSpill(x))", "all x.(DoesIceCreamOnFloor(x) -> MakesSpoke(x))", "all x y.((DropsIceCreamOnFloor(x) & Floor(y)) -> Spill(x,y))", "all x.(DropsIceCreamOnFloor(x) -> MakesSpoke(x))", "all x.((DropsIceCreamOnFloor(x) & MakesSpord(x)) -> Stint(x))"]}
{"id": "enwn_validation_249", "nl": "You should clean spills you made.", "fol": "", "prediction": ["all x.((Spoken(x) & Maked(x)) -> Clean(x,y))", "all x y.((Spill(x) & Spill(y)) -> Clean(x,y))", "all x.((Pollen(x) & Spoils(x)) -> Clean(x))", "all x.((Spill(x) & Made(x)) -> Clean(x,y))", "all x y.((Spoke(x) & Spill(y)) -> CleanIn(x,y))", "all x.((Spill(x) & Makes(x)) -> Cleans(x,y))", "all x.((Spoil(x) & MadeBy(x)) -> Cleans(x))", "all x.((Spill(x) & Maked(x)) -> Clean(x))", "all x y.((Spill(x) & Made(y)) -> Clean(x,y))", "all x.((Spill(x) & Made(x)) -> Clean(x,y))", "all x.((Spill(x) & Made(x)) -> Clean(x))", "all x.((Spill(x) & Made(x)) -> Cleans(x,y,z))", "all x.(CleanSplease(x) -> Makes(x))", "all x.((Spill(x) & Made(x)) -> Cleans(x))", "all x.((Spoilage(x) & Making(x)) -> Clean(x))", "all x.((Spoilage(x) & Maked(x)) -> Clean(x))"]}
{"id": "enwn_validation_250", "nl": "Amy made a spill and did not clean it.", "fol": "", "prediction": ["all x y.((Amy(x) & Spill(y)) -> (Lays(x,y) & -Cleans(x,y)))", "all x.(Punch(x) -> (AmyPalmolive(x) & -Palmolive(x,y)))", "((A Amy(Amy)) & Spill(Amy)) -> -Cleans(Amy))", "all x.((Amy(x) & Spill(x)) -> -Cleans(x))", "all x.(Pandora(x) -> (MadeSpill(x) & -Clean(x)))", "all x y.((Amy(x) & Spill(y)) -> (Made(x,y) & -Cleaned(x,y)))", "all x y.((Apply(x) & Spill(y)) -> ((Made(x,y) & -Cleans(x,y))))", "all x.((Amy(x) & Spill(y)) -> (Made(x,y) & -Covered(x,y)))", "(Made(Amy,Spoil) & DidntClean(Amy,Spoil))", "all x y.((Amy(x) & Spill(y)) -> (made(x,y) & -Clean(x,y)))", "(all x.((Amigo(x) & Spill(x)) -> (made(x,y) & -Cleans(x,y))))", "all x.(Spoke(x) -> (Mased(x,y) & -Cleaned(x,y)))", "all x.(Spoke(x) -> (Made(x,y) & -Cleans(x,y)))", "(Spoilage(Amy) & -CleansSpoilage(Amy)))", "((Amy(Amy) & Spill(Amy)) | (-Clean(Amy) & Made(Amy,Amy))))", "all x y.((Amy(x) & Spill(y)) -> (Made(x,y) & -Clean(y)))"]}
{"id": "enwn_validation_251", "nl": "Amy should have cleaned her spill.", "fol": "", "prediction": ["all x.((Amy(x) & Spill(y)) -> ShouldCared(x,y))", "all x.((Amy(x) & Spill(y)) -> ShouldCleared(x,y))", "***(AmySpoilow(a) & Clean(a))", "everything x.((Amy(x) & Spill(y)) -> Clean(x,y))", "all x.((Amy(x) & Spill(y)) -> -Cleared(x,y))", "all x.(Spoke(x) -> ShouldAmyClean(x))", "((AmyBlood(Amy) & Spill(Amy)))", "all x.((Amy(x) & Spill(y)) -> ShouldClean(x,y))", "all x.((Amy(x) & Spill(y)) -> ShouldClean(x,y))", "all x.((Amy(x) & Spill(x)) -> ShouldCleared(x,y))", "(CleanedSpill(Amy) -> ComesTo(Amy,Amy,Spill))", "all x.(Amy(x) -> ShouldCleanedSpill(x))", "exists x.(Spoilage(x) & Clean(x,Spoilage))", "all x.((Amy(x) & Spill(y)) -> ShouldClean(x,y))", "exists x.(Spoilage(x) & Carol(x))", "all x.((Amy(x) & Spill(y)) -> ShouldCleared(x,y))"]}
{"id": "enwn_validation_252", "nl": "Helping hurt animals is a good thing to do.", "fol": "", "prediction": ["all x.(HelpingIrregularAnimals(x) -> GoodThingToDo(x))", "all x.(HelpingIrresponsibleAnimals(x) -> GoodThingToDo(x))", "all x.(HelpingIrresponsibleAnimals(x) -> GoodThingToDo(x))", "all x.(LeavesIrresistantAnimals(x) -> GoodThingToDo(x))", "all x.((HelpingIrresponsibleAnimals(x) & Ill(x)) -> GoodThingToDo(x))", "all x.((HelpsIrregularAnimals(x) & GoodThingToDo(x)) -> GoodTHing(x))", "all x.(Irresponsible(x) -> GoodThingToDo(x))", "all x.(HelpIllAnimals(x) -> GoodThingToDo(x))", "all x.(HelpsIllAnimals(x) -> GoodThing(x))", "all x.(HungryAnimals(x) -> GoodThing(x))", "all x.(HelpingIrresponsibleAnimals(x) -> GoodThingToDo(x))", "all x.(HearIrrifiedAnimals(x) -> GoodThingToDo(x))", "all x.(HelpingHuntAnimals(x) -> GoodThingToDo(x))", "all x.(IrresponsibleThing(x) -> HelpingIrresponsibleAnimals(x))", "all x.(HelpingIrregularAnimals(x) -> GoodThingToDo(x))", "all x.(HelpingIrresponsibleAnimals(x) -> GoodThingToDo(x))"]}
{"id": "enwn_validation_253", "nl": "If you mend something, you are helping the thing that something belongs to.", "fol": "", "prediction": ["all x y z.(((Mend(x) & Thing(y) & Thing(z) & Mend(x,y)) -> Helping(x,z))", "all x.(Mends(x) -> HelpsBelonging(x))", "all x.(Mends(x) -> HelpsThing(x))", "all x.((Mends(x) & Helps(x)) -> BelongsTo(x))", "all x y.((Mender(x) & Object(y)) -> Helping(x,y))", "all x y.((Mending(x) & Thing(y)) -> Helping(x,y))", "all x.(Mends(x,e) -> HelpsDocument(x,e))", "all x y.((Met(x) & Thing(y) & Mends(x)) -> Helps(x,y))", "all x.(MendsAttribution(x) -> HelpsBelongTo(x))", "all x y.((Mend(x) & Thing(a) & BelongsTo(a)) -> Helps(x,a))", "all x y z.(Mand(x,y) -> (Helps(x,z) & BelongsTo(x,z)))", "all x.(Mend(x) -> Helps(x,WhatBelongsTo(x))", "all x y.((Mend(x,y) & Thing(y)) -> Helps(x,y))", "all x.((Mend(x) & Thing(x)) -> HelpingBelonging(x))", "all x y z.((Mends(x,y) & Thing(z)) -> HelpsBelong(x,z))", "all x y.((Mend(x) & Thing(y)) -> HelpsBelongTo(x,y))"]}
{"id": "enwn_validation_254", "nl": "Setting a cast is a way to mend a wound.", "fol": "", "prediction": ["all x y.((Setcast(x) & Wund(y)) -> Mend(x,y))", "all x y.((SetsCast(x) & Wound(y)) -> Mends(x,y))", "all x y.((SetsCast(x) & Wound(y)) -> Mend(x,y))", "all x y.((Cast(x) & Wound(y)) -> Mend(x,y))", "all x.(StandingCast(x) -> MethodToMendWorn(x))", "all x.(SettingCast(x) -> MendsWound(x))", "all x y z.((Setting(x) & Cast(y) & Wound(z)) -> Mends(y,z))", "all x.(SetsCast(x) -> MendsWound(x))", "all x y.((SettingCast(x) & Wound(y)) -> Mend(x,y))", "all x y.((SettingCast(x) & Wound(y)) -> Mends(x,y))", "all x y.((SettingCast(x) & Wound(y)) -> Mend(x,y))", "all x.(SettingCast(x) -> MendsWund(x))", "all x.(CastSetting(x) -> Mend(x))", "all x y.((SettingCast(x) & Wound(y)) -> Mends(x,y))", "all x y.((SettingCast(x) & Wund(y)) -> Mend(x,y))", "all x.(SettingCast(x) -> MendsWound(x))"]}
{"id": "enwn_validation_255", "nl": "Dan put a cast around the hurt dogs broken leg.", "fol": "", "prediction": ["all x.((Adult(x) & IrregularLeg(x)) -> PutsCastAround(x,y))", "all x.((Dan(x) & Claw(x)) -> IllDone(x))", "all x y z.((Dan(x) & Dog(y) & BrokenLeg(z)) -> PutPUTAWAYAround(x,y,z))", "all x y.((Dan(x) & Dog(y) & BrokenLeg(y)) -> PutCastAround(x,y))", "the hurt dogs broken leg. Dan puts cast around it.", "all x y.((Dan(x) & Dog(y) & BrokenLeg(y)) -> PutCastOn(x,y))", "all x y.((Dan(x) & Dog(y)) -> PutCastAround(x,y))", "all x.(Dan(x) -> PutsCastAroundIlder(x))", "all x y.((Pat(x) & Dog(y) & BrokenLeg(y)) -> PutCastAround(x,y))", "all x y.((Dan(x) & Dog(y) & BreakedLeg(y,x)) -> PutsCastAround(x,y))", "all x y.((Dan(x) & BrokenLeg(y)) -> PutCastAround(x,y))", "all x y.((Dan(x) & BreakingLeg(y)) -> PutCastAround(x,y))", "all x.((Dog(x) & Cast(x)) -> LengChase(x))", "Dan put cast around brokeLeg(dan,danger)", "all x y.((Dan(x) & Dog(y) & BrokenLeg(y)) -> PutsCastAround(x,y))", "all x.(Jaws(x) -> DanHasCast(x))"]}
{"id": "enwn_validation_256", "nl": "Dan mended the hurt dog's leg.", "fol": "", "prediction": ["Dan mended the hurt dog's leg.", "(MendedLeg(Dan,HeildDog) -> Moved(Dan,Leg))", "-IrresponsibleLens(Dan,Dan)", "all x y z.((Dog(x) & Leg(y) & Leg(z) & Irritated(y,z)) -> Mended(x,z))", "ran into the hurt dog's leg and mended it.", "Dan mended the hurt dog's leg.", "canine(d) & mended (disfigured) dog's leg.", "Dan mended hurtdog's leg.", "_MadeSickDogLeg(Dan)", "Dan mended the hurt dog's leg.", "all x.((Dog(x) & Injured(x,leg)) -> Mended(x,leg))", "(MendedLeg(Dan,IrrespectiveDog))", "Dan mended hurtDogLeg(dan)", "-heavy-duty Dan(daad)", "daenMendedLeg(danger,irrtDog)", "-MendedFeet(Dan,IrresponsibleDog))"]}
{"id": "enwn_validation_257", "nl": "Dan helped the hurt dog.", "fol": "", "prediction": ["-HelpedDan(Dan)", "(HelpedInHair(Dan,Dog))", "...HelpedDog(Dan,Ill(Dan))", "all x.(Donald(x) -> HelpedIrresponsibleDog(x))", "all x.(CanDog(x) -> Helped(x))", "(HiredDog(Dan) -> Helped(Dan,Dan))", "(HiredDan)", "all x.((TookBack(x) & Dog(x)) -> Aided(x,y))", "came when Dan helped the hurtDog.", "-HelenJanKunst.(MildDog(dan) -> Helped(damn,dan))", "all x.((Dan(x) & Dog(y)) -> HelpedToIll(x,y))", "Dan Leahy helpedIrregularDog(Dan,Dan)", "all x.(HaidDog(x) -> Dan(x))", "Dan helped hurtingDog(da)", "Dan AssistedIrresponsableDog(dan,x)", "Dan helped the hurtDog(dan)"]}
{"id": "enwn_validation_258", "nl": "Dan did a good thing.", "fol": "", "prediction": ["all x.(Dan(x) -> DidGoodThing(x))", "Dan did a good thing.", "Dan did a good thing.", "Dan (doesGoodThing))", "Dan did a good thing.", "everything x y.((Dan(x) & GoodDomain(y)) -> Successful(x,y))", "Dan drew the good thing.", "all x.(DoedGoodThing(xDan) -> GoodThing(x))", "\u201cDan aww.", "Dan did a good thing.", "all x.(Dan(x) -> GoodThing(x))", "Dan hat eine gute Thing.", "(GoodThing(Dan) -> GoodThing(Dan))", "all x.((Dan(x) & GoodThing(x)) -> GotTooGood(x))", "Dan did a good thing.", "Dan doesGoodThing(d)"]}
{"id": "enwn_validation_259", "nl": "You should not annoy other people.", "fol": "", "prediction": ["all x.((Person(x) & -Anannoys(x)) -> -Anannoy(x))", "all x.(Damage(x) -> -annoy(x))", "all x.((Person(x) & Avoid(x,y)) -> -annoys(x,z))", "all x y.((Person(x) & Person(y)) -> Cannotannoy(x,y))", "all x.(IsUseful(x) -> -annoysPeople(x))", "all x.((Anony(x) & -Enrage(x)) -> -Anonish(x))", "all x.((Person(x) & -Anannoy(x)) -> -Anannoy(x))", "all x y.((Person(x) & Person(y)) -> -annoy(x,y))", "all x.(Easy(x) -> -AnannoyPeople(x))", "all x.(AnannoyOrOthers(x) -> -Anannoys(x))", "all x y z.((Anannoy(x) & Person(y) & Person(z)) -> -Anannoy(y,x))", "Oops!", "all x.((You(x) & OtherPeople(y)) -> -Angry(x,y))", "all x.(HealBulletin(x) -> -Anergize(x))", "all x y.((Person(x) & Person(y)) -> -Enrage(x,y))", "all x.(AntainOtherPeople(x) -> Avoids(x,y))"]}
{"id": "enwn_validation_260", "nl": "Loud music will cause other people that are around to be annoyed.", "fol": "", "prediction": ["all x.((LoudMusic(x) & OtherPeopleAround(x)) -> Agreed(x))", "all x.((PeopleInAround(x) & LoudMusic(x)) -> Arrised(x))", "all x y.((LoudMusic(x) & Person(y) & Around(x)) -> CausesAngry(x,y))", "all x y.((LoudMusic(x) & People(y)) -> Urgened(x))", "all x.((LoudMusic(x) & NearlyAroundPerson(x)) -> Annoyed(x))", "all x.((LoudMusic(x) & AwayPeople(x)) -> annoyed(x))", "all x y z.((LoudMusic(x) & Person(y) & Person(z)) -> CausesAngry(y,z))", "all x.(LoudMusic(x) -> (CausesAttire(x) & OtherPeopleAround(x)))", "all x y.((LoudMusic(x) & People(y) & Around(x,y)) -> CausedByAngry(x(y))", "all x.((LoudMusic(x) & Around(x)) -> PeopleAngry(x))", "all x.((LoudMusic(x) & OtherPeopleAround(x)) -> (Angry(x) | Agreed(x)))", "all x y.((LoudMusic(x) & People(y) & Around(x)) -> Convincing(y))", "all x.((LoudMusic(x) & OtherPeopleAround(x)) -> Arguated(x))", "all x y.((LivedMusic(x) & Nearby(y)) -> CausesAttrition(x,y))", "all x.((LoudMusic(x) & OtherPeople(y)) -> Arguated(x,y))", "all x.((LoudMusic(x) & PeopleAround(x)) -> Irritated(x))"]}
{"id": "enwn_validation_261", "nl": "Ned is playing music loudly.", "fol": "", "prediction": ["Ned is playing music loudly.", "Ned PlayingMusicLoudly(ned)", "Ned plays music(n) & Loudly(n))", "Ned is playing MusicLoudly.", "Ned isPlayingMusicLoudly.", "NedPlaysMusicLoudly(Ned,LoudBehind(Ned))", "Ned plays MusicLoudly.", "Ned is playingMusicLoudly(Ned).", "Ned is playing music loudly.", "Ned plays music loudly.", "Ned PlaysMusicLoudly(ned)", "Ned is playing music loudly.", "Ned PlaysMusicLoudly.", "(Loud(Ned) | Loud(Ned)))", "(PlayingMusicLoudly(Ned) & Ned(Ned))", "NedPlaysMusicLoudly."]}
{"id": "enwn_validation_262", "nl": "Ned and Brad are around each other.", "fol": "", "prediction": ["both Ned and Brad are alphas.", "(Around(Ned) & Around(Brad))", "(AroundHunt(Ned) & Around(Brad(Ned))", "(Around(Ned,Brad) & Around(Brad,Ned))", "(Around(ned) & Around(brad(ned,b))", "(TwoFamilies(Ned) & OneFamily(Brad))", "(Around(Break(Ned,brad) & Around(Brad,ne))", "Ned and Brad are around each other.", "Ned and Brad are together.", "(Away(ned,brad) & Around(ned,brad))", "(Around(Ned) & Around(Brad(Ned))", "(Around(Ned,Burland) & Around(Ned,Brad))", "Elements of a balanced, healthy, active couple (Ned, Brad) & IsAround(Ned,Brad))", "(Around(ned) & Around(brian(ned))", "(Around(Ned,Bard) & Around(Brad,Ned,Brad))", "(All x).(Ned(x) | Brad(x)))"]}
{"id": "enwn_validation_263", "nl": "You should not play loud music with other people around because it will annoy them.", "fol": "", "prediction": ["all x y.((MeetMe(x) & Person(y)) -> AvoidLoudMusic(x,y))", "all x y.((LoudMusic(x) & Person(y)) -> -Dislikes(x,y))", "all x y.(((Person(x) & LoudMusic(y)) -> -(PlayLoudMusic(x,y) | Annoy(x,y))))", "all x y.((PlayLoudMusic(x) & OtherPeople(y)) -> -Anannoys(x,y))", "all x y.((LoudMusic(x) & Person[y)) -> NotToPlayAndAngry(x,y))", "all x y z.((Person(x) & LoudMusic(y) & People(z) & PlaysWith(x,y,z)) -> Annoys(x,y,z))", "all x y.((Person(x) & LoudMusic(y) & Aye(z)) -> -Play(x,y,z))", "all x.((People(x) & -PlayLoudMusic(x)) -> Annoys(x))", "all x y.((Person(x) & Person(y) & HarshMusic(x)) -> -PlaysLoudMusic(x,y))", "all x.((PlayLoudMusic(x) & NoOtherPeople(x)) -> Annoy(x))", "all x.((Person(x) & PlayLoudMusic(x)) -> Anannoys(x))", "all x y.((LessMusic(x) & OtherPerson(y)) -> -Anannoys(y,x))", "all x y.((Funny(x) & LiquidMusic(y)) -> -Antays(x,y))", "all x y.((Feedback(x) & Music(y) & Annoys(x,y)) -> -PlayloudWith(x,y))", "all x y.((Person(x) & LoudMusic(y) & PlaysWith(x,y)) -> Annoys(x,y))", "all x y.((People(x) & Music(y)) -> -YouPlayOut Loud(x,y))"]}
{"id": "enwn_validation_264", "nl": "Ned is playing his music loud around Brad.", "fol": "", "prediction": ["Ned plays LoudMusicAroundBrad(Ned,Brad)", "Ned is playingmusicLoud(Ned)", "Ned is playing music loud around Brad.", "all x y.((Ned(x) & Brad(y)) -> PlayingLieutsAround(x,y))", "Ned PlaysMusicLoudAroundBrad(n).", "Ned is playing LoudMusicAroundBrad(ned,a.k.a.)", "Ned is playing LoudMusicAroundBrad(n)", "all x y.((Ned(x) & Brad(y)) -> Playing(x,y))", "(LOUD(Ned) & Brad(Brad))", "all x y.((Cold(x) & Ned(y)) -> PlayingMusicLoud(y,Brad))", "Ned is playing LoudMusicAroundBrad(ned)", "Ned is playing music loudly around Brad.", "(LoudAroundBrad(Ned))", "x.(Ned(x) & PlayingMusicLoudAroundBrad(x))", "Ned PlaysLoudMusicAroundBrad.", "Ned is playing MusicLoudAroundBrad(n)"]}
{"id": "enwn_validation_265", "nl": "Ned should not play his music because it will annoy Brad.", "fol": "", "prediction": ["Ned should not play his music because it will annoyBrend(Ned)", "Ned should not play music because it will annoy Brad.", "-(Ned(Ned) & Brad(Brad))", "all x y.((Ned(x) & Brad(y)) -> -(PlaysInTheMicrophone(x,y) | Annoys(x,y)))", "Ned should not play his music because it will annoyBrad.", "all x.((NeedyNeedy(x) & Brad(Brad)) -> -PlayMusic(x,nothing))", "Ned obliviously annoysBrad(n) & Ned will not play his music (n) -> CannotPlay(n,n)))", "-AnannoysBrad(Ned)", "all x.((Ned(x) & Brad(x)) -> -PlayMusic(x))", "(same as Brad(Ned) & -PlaysMusic(Ned))", "all x y.((Ned(x) & Brad(y)) -> -PlayMusic(x,y))", "-NedCanPlayMusic(ned,blah))", "all x y.((Ned(x) & Brad(y)) -> -PlayStage(x,y))", "Ned, not Brad.ItannoysBrad(ned,x) & -TailsMusic(ned))", "Ned doesn't want his music to annoy Brad(n) -> -Play(n,Hey,Brad,Blake))", "everything and BradsMusik(ned) -> -Plays(ned,ned,b Brad))"]}
{"id": "enwn_validation_266", "nl": "Forcing someone to give you something is wrong.", "fol": "", "prediction": ["all x y.((Forcing(x,y) & Person(y)) -> Wrong(x))", "all x.(Forcing(x) -> Wrong(x))", "all x y.((Forcing(x) & Person(y)) -> IsWrong(x))", "all x y.((Forcing(x) & Person(y)) -> Wrong(x))", "all x y.((Forcing(x,y) & Person(y)) -> IsWrong(x,y))", "all x y.((ForcingPerson(x) & ProvidesBetterThan(y,x)) -> IsWrong(x))", "all x.(Forcing(x) -> Wrong(x))", "all x y.((Person(x) & ForcingToGive(x,y)) -> Wrong(x))", "all x y.((Forcing(x) & Person(y) & Gives(y,x)) -> Wrong(x))", "all x.(ForcingReason(x) -> Bad(x))", "all x y z.((Forcing(x,y) & Person(y) & Object(z) & Gives(x,z)) -> Wrong(x))", "all x y.((Forcing(x,y) & Person(y) & GivesPlace(x)) -> Wrong(x))", "all x y.((Person(x) & Forcing(x,y)) -> Wrong(x))", "all x.(ForcingSomeoneToGiveSomething(x) -> Worst(x))", "all x y z.((Person(x) & Given(y) & Person(z)) -> Worst(x,y,z))", "all x y.((Forcing(x,y) & Forgives(x,y)) -> Wrong(x))"]}
{"id": "enwn_validation_267", "nl": "You should not do wrong things.", "fol": "", "prediction": ["all x.((Task(x) & -WrongTask(x)) -> --> DoingWrongTask(x))", "all x.(WeakThing(x) -> -DoWrong(x))", "all x.(WrongThing(x) -> -(Do(x) & Donations(x)))", "all x.(DoGrongThings(x) -> -Done(x))", "-wrong Things(w)", "all x.((Don'tDoWrongThings(x) & YouAre(x)) -> -IsIrrrelevantForDandors(x))", "all x.((DosePoorThings(x) & -Problems(x)) -> -PoorThings(x))", "we have a few things for you.", "all x.((DoWrong(x)) -> -Do(x))", "all x.((DoingWrongThing(x)) -> -DoWrongThings(x))", "All x.((DoWrongThings(x)) -> -DoIssues(x))", "all x.(TheRecentThanThanTwoWrongThings(x))", "(-WrongThings(w))", "all x.((DoWrongThing(x) & -DoWrongthings(x)) -> -DoingWrongThings(x))", "all x.(Don\u2019tDoBo & Don\u2019tDoWrongThings(x))", "all x.((CausesBuddyThings(x) & -CausesBugs(x)) -> -WrongThings(x))"]}
{"id": "enwn_validation_268", "nl": "Keith bullied Gunner until Gunner gave his lunch money to Keith.", "fol": "", "prediction": ["all x y z.((Kitt(x) & Gunner(y) & Lunch(z)) -> BulliedThan(x,y,z))", "all x y z.((Kid(x) & Gunner(y) & Lunch(z)) -> Bullied(x,y,z))", "all x y.((Kief(x) & Gunner(y) & LunchMoney(y)) -> Bullied(x,y))", "-(Bullied(Keith,Gunner) & GiftedLunchMoney(Keith,Keith)))", "Until Gunner's LunchMoney(Kevin,Pete)", "All x.((Keith(x) & Bullied(x,Gunner)) -> Bullied(x,Gunner,Gunner))", "all x y.((King(x) & Gunner(y)) -> Bullied(x,y))", "all x y.((Keith(x) & Gunner(y)) -> BulliedUntilGunnerGaveLunchMonet(y,x))", "all x y.((Kitchen(x) & Gunner(y)) -> Bullied(x,y))", "all x y.((King(x) & Gunner(y)) -> Bullied(x,y))", "all x y.((Gunner(x) & Gunner(y)) -> BulliedBy(x,y))", "all x y.((Keith(x) & Gunner(y)) -> BulliedUntilGunnerGatheredLunchMoney(y,x))", "Gunner - Boated(e) -> UntilTwoTier(e))", "all x y.((Kitchell(x) & Gunner(y)) -> Bullied(x,y))", "(Bolied(Kittley,Gunner) | Bullied(Kittley,Gunner)))", "(BorleyEDUCATION(Keith) & GunnerMoney(Keith))"]}
{"id": "enwn_validation_269", "nl": "Bullying is a form of harassment.", "fol": "", "prediction": ["all x.(Bullying(x) -> Harassment(x))", "all x.(Bullying(x) -> Harassment(x))", "all x.(Bullying(x) -> Harassment(x))", "all x.(Bullying(x) -> Harassment(x))", "all x.(Bullying(x) -> (Harmstration(x) & FormOf(x,e)))", "all x.(Bullying(x) -> Harmful(x))", "all x.(Bolter(x) -> Harms(x))", "all x.(Blooding(x) -> Harassment(x))", "all x.(Bullying(x) -> Harassment(x))", "all x.(Bullying(x) -> Harassment(x))", "all x.(Bullying(x) -> Harassment(x))", "all x.(Bullying(x) -> Harassment(x))", "all x.(Bullying(x) -> Harassment(x))", "all x.(Bullying(x) -> Harms(x))", "all x.(Bullying(x) -> Harassment(x))", "all x y.((Bullying(x) & Harshman(y)) -> Harassment(x))"]}
{"id": "enwn_validation_270", "nl": "If you continuously harass someone until they do something, you forced them to do that thing.", "fol": "", "prediction": ["all x y.((Harsh(x) & Person(y) & ContinuesToDoSomething(x,y)) -> ForcEDToDoThatThing(x,y))", "all x y z.((PersistantHarmstorm(x) & Person(y) & Thing(z) & Do(y,z)) -> ForcibleToDo(x,y,z))", "all x.((ContinuouslyHarms(x) & DoesBoding(x)) -> ForcedToDo(x))", "all x.((ContinuouslyHarrass(x) & ObligatesOtherToDoThing(x)) -> ForcEDOccurred(x))", "all x y.((ContinueHarrassment(x) & StrangeDoing(x,y)) -> ForciblyDoesDoing(x,y))", "all x y.((PersistentHarassment(x) & Person(y) & AlwaysUntilSomething(y)) -> ForgedToDoThatThing(x))", "all x y.((PermanentHarassment(x) & Person(y) & DoSomething(y,x)) -> ForcedToDo(x,y))", "all x y.((Horizon(x) & Person(y) & Continues(x,y)) -> Forcing(x,y))", "all x y.((PersistentHarming(x) & Person(y) & HasAction(y,x)) -> ForcedToDoThing(x,y))", "all x y.((ContinuouslyHarasss(x) & Person(y) & DoThing(y,x)) -> ForcingDoingThing(x,y))", "all x y.((ContinuousHarshful(x) & Person(y) & AnythingTo(y)) -> ForciblyDoes(y,x))", "all x y.((PersistentHarshmaking(x) & UntilIsDoing(x,y)) -> ForcingToDo(x,y))", "all x y.((ContinuouslyHarshPerson(x) & Person(y) & DoesSomething(y)) -> ForcEDOfThing(x,y))", "all x y.((ContinuouslyHarmful(x) & UntilDoing(x,y)) -> ForcEDOfThing(x))", "all x y.(((Communication(x,y) & Person(y) & HarassmentThing(x)) -> ForcED toDoThing(y,x))", "all x y.((Harmful(x) & Person(y)) -> ForcedToDoThing(x,y))"]}
{"id": "enwn_validation_271", "nl": "You should not force someone to give you something.", "fol": "", "prediction": ["all x.(ForceForce(x) -> -ForcesForgivesAndIs(x,y))", "all x y.((FollowPerson(x) & GiveOnething(y)) -> -ForcePerson(x,y))", "all x.((ForceSpeaker(x) & -ForceToGive(x)) -> -ForceDone(x))", "all x.((IsForced(x) & Gives(x,y)) -> -ForceGiveaways(x,y))", "all x y.((Action(x) & Person(y) & -Forcing(x,y)) -> WhatYouGive(y,x))", "all x.((ForcePerson(x) & -ForgetMajority(x)) -> -ForcePermissionToGive(x,Majority))", "all x y.(NotForcing(x,y) -> -Forcing(y))", "all x.((Force(x) & Nothing(x)) -> -Force(x))", "all x y.((FirePerson(x) & GiveGift(x)) -> -ForcePerson(y))", "all x.(Focuses(x,y) -> -Force(y,x))", "all x y.((Person(x) & Person(y)) -> -ForceToGive(x,y))", "all x y.((Man(x) & Person(y)) -> -ForceToGiveProduct(x,y))", "(RequiresAndForcing(x,y) & User(y))", "all x.(Force(x) -> -ForceToGivePosition(x))", "all x.((Person(x) & -Forcing(x,y)) -> -CanGiveSomething(x,y))", "all x y.((Involves(x,y) & Person(y)) -> -ForcingToGive(x,y))"]}
{"id": "enwn_validation_272", "nl": "Keith harassed Gunner until Gunner gave his lunch money to Keith.", "fol": "", "prediction": ["all x y.((Guardian(x) & Gunner(y)) -> Harrassed(x,y))", "Gunner gave his LunchMoneyToKeith(k) -> HarshfulTo(k,k))", "all x y.((Pitcher(x) & Gunner(y)) -> Harassing(x,y))", "all x y.((Keith(x) & Gunner(y)) -> HarshfulUntilLeadGivenMoney(x,y))", "all x y.((Charrested(x,y) & Gunner(y)) -> GivesLunchMONEYTo(y,x))", "all x y z.((Child(x) & Gunner(y) & Lunch(z)) -> Harms(x,y,z))", "(HarmsquoidThan(Keith,gunner) & GrantsLunchMoneyFrom(Keith,h),y))", ", until GunnerGatheredLunchMoneyToKitte(Kitte)", "Until he gave lunchMoneyToKitt(KidChurchises(Kitt,Gunner,Kitt,Gunner))", "all x y.((Keith(x) & Gunner(y)) -> HarmsUntilGunnerLetsMoney(x,y))", "all x y.((Pittsburgh(x) & Gunner(y)) -> Harassed(x,y))", "all x y.((Keil(x) & Gunner(y)) -> HarastedUntilGunnerGatheredLunchMONEY(x,y))", "Alle x y.((Carryout(x,y) & Gunner(x)) -> GivesLunchMoney(x,y))", "all x y z.((Pitt(x) & Gunner(y) & LunchMoney(z)) -> Harshful(x,y,z))", "(Hazards(Kevin,Gunner,LunchMoney): GunnerGanes(Kevin,LunchMoney))", "all x y.(((Keith(x) & Gunner(y)) -> HarrassedUntilLunchMoneyGathered(x,y))"]}
{"id": "enwn_validation_273", "nl": "Keith forced Gunner to give Keith his lunch money.", "fol": "", "prediction": ["Keith and Gunner (c) & ForcedToGiveLunchMonnay(g))", "GoneWithKeithWithgunner(kei) & ForgedGunnerToGiveLunchMoney(k,k,k))", "(ForcedToGiveLunchMean(Keith,Keith))", "Keith Forgave(Keith,Gunner)", "Keith,Petrician(Warner) / ForcEDGive(Keefe,Keefe))", "Keith ForcibleDistribution(Keith,Keith)", "Gunner forcibly gave Keith lunch money.", "Gunner ForcEDToGive(Keith) lunchMillion(Keith)", "Keith ForciblyGave(John)", "Keith asked Gunner to give him lunch money.", "all x y z.((President(x) & Gunner(y) & LunchMatter(z)) -> ForcingToGive(x,y,z))", "Keith ForcingGunnerToGiveLunchMatter(Kitt)", "-(Gunner(kane) & Forcing(k) & GiveBack(Keith,y)))", "(Forcing(Keith) & GunnerToGiveLunchMoney(Keith,Keith))", "all x.((Keith(x) & Gunner(x)) -> ForciblyGivesLunchMoney(x,Keith))", "DernierGunner(Keith) -> ForcEDToGiveKeithMoney(Keith))"]}
{"id": "enwn_validation_274", "nl": "Keith should not have forced Gunner to give Keith his lunch money.", "fol": "", "prediction": ["Gunner and Keith should not have been forced to give LunchMoneyTo(Keith,AKA (Keith,AKA : -Forcible(Keith,Better)))", "Gunner did not have to force Keith to give him lunch money.", "Keith should not have forcedToGiveLunchMoney(StephenGanner,Boy))", "Keaton ShouldNotForcedGuardianToGiveKeatonLunchMoney(Keaton)", "Keith should have withdrawn all kirkas.soonmoney(k,y) & GunnerAtLunch(k))", "Gunner should not have forcibly given KeithsLunchMoney(Gunner)", "Shouldn\u2019t\u2019BoardGunner(k) & GivesLunch(k))", "-(ForcingGunnerToGiveKittenLunchMonth(W) & -ForcingGunnerToGiveKitt'sLunchMonth(W)))", "Gunner should have provided KeithsLunchMoneyInThePast(Keith) -FailtPast(Keith))", "Keith should-haveForcEDGunnerToGiveLunchBond(Keith,Patton,Island))", "hasn't forcedGunner to give lunchmoney.", "-ForcEDByKeith(Keith(Keith) -> -ForcEDByKeith(Keith,LunchMatter))", "Keith should not have forcibly been forced to give Keith lunch money.", "Gunner should not have forcedKeithherToGiveLunchMoney(Keith,Lunch)", "Keith should not have forced GunnerToGiveLunchMonth(Kike)", "(-ForcED(Keith) & Gunner(Keith))"]}
{"id": "enwn_validation_275", "nl": "If you agree to do something, you should do it.", "fol": "", "prediction": ["all x.(Consume(x) -> ShouldDo(x))", "all x.((AgreesToDo(x) & Something(x)) -> ShouldDo(x))", "all x.(AgreesToDo(x) -> ShouldDo(x))", "all x.(AgreesToDo(x,y) -> ShouldDo(x,y))", "all x.((AgreesToDo(x) & Anything(x)) -> ShouldDo(x))", "all x.((AgreesToDo(x) & DoIt(x)) -> ShouldDo(x))", "all x.(AgreesToDo(x) -> ShouldDo(x))", "all x y.((Compromise\" & Do(x,y)) -> Do(y))", "all x.((AgreesToDo(x) & DoesProcedure(x)) -> ShouldDo(x))", "all x.(AgreesToDo(x) -> ShouldDo(x))", "all x.(AgreeToDo(x) -> ShouldDo(x))", "all x.(AgreesToDo(x) -> ShouldDo(x))", "all x y.((AgreeToDo(x,y) & Work(y)) -> Do(x,y))", "all x.(AgreeToDo(x) -> Do(x))", "all x.(ComesToDo(x) -> ShouldDo(x))", "all x.((AllowsDoing(x) & Dose(x)) -> Dose(x))"]}
{"id": "enwn_validation_276", "nl": "Chad agreed to work but is playing instead.", "fol": "", "prediction": ["(all x.(Chad) -> Works(x)) & Plays(x)))", "-AgreesToWork(chad,Work)", "(all x.(Chad(x) -> Work(x)) & Playing(x))", "all x.((Chad(x) & Works(x)) -> Plays(x))", "(All x.(Chad(x) -> Work(x)) & Play(x))", "(Work(Chad) & Playing(Chad))", "(AgreedToWork(chad) & Plays(chad))", "(all x.(Chad(x) -> Works(x)) & Plays(x)))", "(all x.(Chad(x) -> Work(x)) & Playing(x))", "(All x.(Chad(x) & Work(x)) -> Plays(x))", "(all x y.((Chad) & Work(x)) -> CommittedTo(x,y)) & Plays(y))", "-((Chad) & Worked(Chad)) -> Playing(Chad))", "(AgreedToWork(Chad) & Playing(Chad))", "(all x.(Chad) -> ToWork(x)) & Playing(x))", "(AgreedToWork(Chad) & Plays(Chad))", "(AgreedToWork(chad) & Playing(chad))"]}
{"id": "enwn_validation_277", "nl": "If you agree to do something but are doing something else, you are not doing what you agreed to do.", "fol": "", "prediction": ["all x.((AgreedToDo(x) & Doing(x)) -> -DoingWhatAgreedToDo(x))", "all x.((AgreesToDo(x) & Doing(x) & ThenDoes(x,y)) -> -AgreesToDo(x,z))", "all x.((AgreeToDo(x) & Doing(x)) -> -DoingAndAgreeToDo(x))", "all x.((AgreeToDo(x) & DoingOther(x)) -> -DoingWhatAgreedToDo(x))", "all x.((AgreedToDo(x) & DoingOther(x)) -> -AgreedToDo(x))", "all x.((AgreesTo(x) & DoingOther(x)) -> -DoingWhatAgreedToDo(x))", "All x.(AgreeToDoAction(x) -> -AgreeToDoAction(x))", "all x.((AgreesToDo(x) & Does(x,y)) -> -AgreesToDo(x,y))", "all x.((AgreeToDo(x) & Doing(x,Other)) -> -Doing(x))", "all x.((AgreesToDo(x) & Doing(x)) -> -AmendsToDo(x))", "all x.((AgreeToDo(x) & DoingOther(x)) -> -AgreeToDo(x))", "all x.((AgreesToDo(x) & DoingSomething(x) & DoesWhat(x)) -> -AgreedToDo(x))", "all x.((AgreesToDoSomething(x) & DoingAndOtherThings(x)) -> -AgreesToDo(x))", "all x.((Agree(x) & DoingAttribution(x) & DoingAttribution(x)) -> NonDoingAgreement(x))", "all x.((AgreeToDo(x) & Doing(x) & Another(x)) -> -DoingWhatAgreedToDo(x))", "all x.((AgreesToDo(x) & DoseOther(x)) -> -DoingAgreement(x))"]}
{"id": "enwn_validation_278", "nl": "Chad agreed to work but is not working.", "fol": "", "prediction": ["means that Chad will always be in a work place and is adamantly not working.", "(all x.(Chad(x) -> Work(x)) & -Working(x))", "(AgreedToWork(chad) & -Working(chad))", "(AgreedToWork(CHad) & -Working(CHad))", "(agreesToWork(chad) & -Working(chad))", "(all x.(Chad(x) -> Working(x)))", "((Chad(Chad) & Worked(Chad)) | (-Working(Chad)))))", "(Armad(chad) & Worked(chad)) & -Working(chad))", "((Chad(chad) & Work(chad)) -> (AllowsWork(chad) & -Works(chad)))", "(AgreedToWork(Chad) & -Working(Chad))", "(AgreedToWork(chad) & -Working(chad))", "(AllowsWork(Chad) & -Working(Chad))", "(all x.(Chad(x) -> Worker(x)))", "(AgreesToWork(Chad) & -Works(Chad))", "(AgreedToWork(chad) & -Working(chad))", "(AgreedToWork(Chad) & -Working(chad))"]}
{"id": "enwn_validation_279", "nl": "Chad should be working.", "fol": "", "prediction": ["all x.((Chad(x) & Working(x)) -> ShouldWork(x))", "all x.(Tahad(x) -> ShouldWork(x))", "all x.(Chad(x) -> ShouldBeWorking(x))", "I think the Chad should be working.", "all x.(Chad.(x) -> Working(x))", "all x.(Shad(x) -> Working(x))", "all x.(Tahd(x) -> ShouldWork(x))", "all x.(Chad(x) -> Working(x))", "all x.(Tahsan(x) -> ShouldWork(x))", "all x.((Chad(x) & Working(x)) -> ShouldBeWorking(x))", "Sollte Working(Chad)", "all x.(Chad(x) -> ShouldWork(x))", "all x.(Chad(x) -> ShouldBeWorking(x))", "all x.((Chad(x) & Working(x)) -> ShouldBeWorking(x))", "all x.(Chad(x) -> ShouldWork(x))", "all x.(Chad(x) -> Working(x))"]}
{"id": "enwn_validation_280", "nl": "Lewis earned wages over the year.", "fol": "", "prediction": ["all x.(Little(x) -> EarnedWagesOverYear(x))", "all x.(Lewis(x) -> EarnedWages(x))", "all x y.((Lewis(x) & Year(y)) -> EarnedWages(x,y))", "all x y z.((Lewis(x) & Year(y) & EarnedWages(z)) -> EarnsWages(x,y))", "all x.(Lewis(x) -> EarnsWages(x))", "all x.(Little(x) -> EarnedWages(x,Year))", "all x.(Lewis(x) -> EarnedWages(x))", "Lewis earnedWagesOverYear(Lewis)", "all x y.((Lewis(x) & Year(y)) -> EarnedWages(x,y))", "all x.(Lewis(x) -> EarnedWages(x))", "all x.(Lewis(x) -> EarnedWages(x,y))", "(EarnedWages(Lewis))", "-WagesAreEarnedByLewis(lewis)", "(EarnedWages(Lee) & DuringYear(Lee))", "all x.((Little(x) & Year(x)) -> EarnedWages(x))", "all x.(Lewis(x) -> EarnedWages(x))"]}
{"id": "enwn_validation_281", "nl": "If you earn wages over the year, you have taxes on those wages.", "fol": "", "prediction": ["all x y z.((EarnsWages(x) & Year(y) & Year(z) & Employee(z) & EarnsOver(x,y,z)) -> HasTaxes(x,y,z))", "all x.((EarnsWages(x) & Years(x)) -> HasTaxesOnWages(x))", "all x.((EarnsWages(x) & OverYear(x)) -> HasTaxesOn(x,y))", "all x.((EarnsWages(x) & YearsOver(x)) -> TaxesOnWages(x))", "all x.(EarnsWagesOverYear(x) -> HasTaxesOnWages(x))", "all x.(EarnWages(x) -> HasTaxesOverYear(x))", "all x.((EarnsWages(x) & OverYear(x)) -> HasTaxesOnWages(x))", "all x.((EarnsWages(x) & Year(x)) -> HasTaxesOn(x,Wages))", "all x.((EarnsWages(x) & OverYear(x)) -> TaxesOn(x,y))", "all x.((EarnsWaresOverYear(x) & HasTaxesOnWages(x)) -> HasTaxesOnWages(x))", "all x.((EarnsWages(x) & OverYear(x)) -> HasTaxes(x))", "all x.((Earns(x,y) & Year(y)) -> HasTaxesOn(x,y))", "all x.((EarnsWages(x) & OverYear(x)) -> HasTaxes(x))", "all x.((EarnsWages(x) & Year(x)) -> HasTaxesOnWages(x))", "all x.((EarnsWagesOverYear(x) & Taxes(x)) -> HasOnWages(x))", "all x.((EarnsWages(x,month,year) & Years(x)) -> AshesTaxesOnWages(x))"]}
{"id": "enwn_validation_282", "nl": "Paying taxes is a law.", "fol": "", "prediction": ["all x.(PayingTaxes(x) -> Law(x))", "all x.(PaintingTaxes(x) -> Law(x))", "all x.(PayingTaxes(x) -> Law(x))", "all x.(TaxPayment(x) -> Law(x))", "all x.(PayingTax(x) -> Law(x))", "all x.(PayingTaxes(x) -> Law(x))", "all x.(PaysTaxes(x) -> Law(x))", "all x.(PayTaxes(x) -> Law(x))", "all x.(PayingTaxes(x) -> Law(x))", "all x.(PayingTaxes(x) -> Law(x))", "all x.(PaysTaxes(x) -> Law(x))", "all x.(PayingTaxes(x) -> Law(x))", "all x.(PayingTaxes(x) -> Law(x))", "all x.(TaxPayment(x) -> Law(x))", "all x.(PaysTaxes(x) -> Law(x))", "all x.(PayingTaxes(x) -> Law(x))"]}
{"id": "enwn_validation_283", "nl": "You should obey the law.", "fol": "", "prediction": ["all x.(ObeysLaw(x) -> ShouldObeyLaw(x))", "all x.((Employment(x) & Law(x)) -> Obeys(x))", "all x.(Octy(x) -> Law(x))", "all x.(ObeyLaw(x) -> Occupies(x))", "your obligations should be.", "all x y.((Obey(x) & Law(y)) -> Obey(x,y))", "all x.(ObeySecurity(x) -> ObeySecurity(x))", "all x.(ObeyLaw(x) -> ShouldObeyLaw(x))", "all x.(ObeyLaw(x) -> Should(x))", "all x.((ObeyTheLaw(x) & ObeyTheLaw(x)) -> ShouldObeyTheLaw(x))", "all x.(ObeyLaw(x) -> ShouldObeyLaw(x))", "all x.(YouHaveGuest(x) -> ObeyLaw(x))", "all x.(Ob\u00e9iseLaw(x) -> ShouldObey(x))", "all x.(ObeyLaw(x) -> ShouldObeyLaw(x))", "all x.(AndObeyLaw(x) -> ObeyLaw(x))", "all x.(ObeyLaw(x) -> ShouldOccupy(x))"]}
{"id": "enwn_validation_284", "nl": "Breaking the law is a crime.", "fol": "", "prediction": ["all x.((BreaksLaw(x) & Crime(x)) -> BreakingLaw(x))", "all x.(BreakingLaw(x) -> Crime(x))", "all x.((BreaksLaw(x) & Crime(x)) -> Corruption(x))", "all x.((BreakingLaw(x) & Crime(x)) -> Criminal(x))", "all x.(BreakingLaw(x) -> Crime(x))", "all x.( BreakingLaw(x) -> Crime(x))", "all x.((BreakingLaw(x) & Crime(x)) -> BreakingLaw(x))", "all x.(BreakingLaw(x) -> Crime(x))", "all x.(FailingLaw(x) -> Crime(x))", "all x.((BreaksLaw(x) & Crime(x)) -> BreaksLaw(x))", "all x.((BreachLaw(x) & Crime(x)) -> BreaksLaw(x))", "all x.(BravesLaw(x) -> Crime(x))", "all x.((BreaksLaw(x) & Crime(x)) -> Is(x,y))", "all x.(BreakingTheLaw(x) -> Crime(x))", "all x.((BreakingLaw(x) -> Crime(x))", "all x.((BreakingLaw(x) & Crime(x)) -> BreaksLaw(x))"]}
{"id": "enwn_validation_285", "nl": "Lewis has taxes on wages he earned over the year.", "fol": "", "prediction": ["all x.(Lee Lewis(x) -> HasTaxesOnWages(x,y))", "all x.(Lewis(x) -> (HasTaxes(x) & EarnedWages(x)))", "all x.((Lewis(x) | Earned(x))) -> Taxes(x))", "all x.(Lewis(x) -> (ChesedTaxesOnWages(x) & EarnedInYear(x)))", "all x y.((Lewis(x) & EarnedWages(y)) -> HasTax(x,y))", "all x.((Lewis(x) & EarnedWages(x)) -> TaxesOn(x,y))", "all x.(John Lewis(x) -> EarnedAndExpense(x,y))", "all x y z.((StrictWage(x) & EarnedOverYear(y) & Gains(z)) -> HasTaxesOn(x,y,z))", "(AtesTaxesOnWages(Lewis) & EarnedOverYear(Lewis))", "all x.((Bill(x) & EarnedWages(x)) -> HasTaxes(x))", "all x.((Lion(x) & EarnedWages(x)) -> Taxes(x))", "all x.((Lewis(x) & EarnedWages(x)) -> HasTaxes(x))", "all x.(Leise(x) -> PaymentsPayedOnWages(x,y))", "all x.((Lewis(x) & EarnedWages(x)) -> HasTaxes(x))", "all x y z.((Wage(x) & Income(y) & Wage(z) & EarnedOverYear(x,y)) -> Taxes(x,z))", "All x.(Lewis(x) -> TaxesOnWages(x))"]}
{"id": "enwn_validation_286", "nl": "Paying taxes is a law that you should obey.", "fol": "", "prediction": ["all x.(PaysTaxes(x) -> Law(x))", "all x.(PayingTaxes(x) -> Law(x))", "all x.(PaysTaxes(x) -> LawOnlyOrOrder(x))", "all x.(PaysTaxes(x) -> Law(x))", "all x.(PayingTaxes(x) -> ShouldObey(x))", "all x.(PaysTaxes(x) -> Law(x))", "all x.(PayingTaxes(x) -> LawThatYouHear(x))", "all x.(PayingTax(x) -> Law(x))", "all x.(PayingTaxes(x) -> LawThatYouUse(x))", "all x.(PayingTaxes(x) -> Law(x))", "all x.(PaysTaxes(x) -> Law(x))", "all x.(Pay Taxes(x) -> ShouldObey(x))", "all x.(PayTaxes(x,y) -> Law(y))", "all x.(PaysTaxes(x) -> ShouldObey(x))", "all x.(PaysTaxes(x) -> LawYouMightObey(x))", "all x.(PaysTaxes(x) -> Law(x))"]}
{"id": "enwn_validation_287", "nl": "It is a crime to not pay your taxes.", "fol": "", "prediction": ["all x.((PayTaxes(x) & Crime(x)) -> Crime(x))", "all x.((Crime(x) & PayTaxes(x)) -> -PayTaxes(x))", "all x.((Crime(x) & -PayTaxes(x)) -> Criminal(x))", "all x.((Crime(x) & -PayTaxes(x)) -> -PaidTaxes(x))", "all x.((Crime(x) & -PayTaxes(x)) -> Criminal(x))", "all x.((Crime(x) & -PaysTaxes(x)) -> Criminal(x))", "all x.((NotPayTaxes(x) & Child(x)) -> Crime(x))", "all x.((Crime(x) & -PaysTaxes(x)) -> Crime(x))", "all x.((Crime(x) & -PayTaxes(x)) -> -PayTaxes(x))", "all x.(Crime(x) -> -PayTaxes(x))", "all x.((Crime(x) & -PayTaxes(x)) -> Crime(x))", "all x.((Crime(x) & -PayTaxes(x)) -> Criminal(x))", "the crime to notPayTaxes(x)", "all x.(CrimeToNotPayTax(x) -> Is(x))", "all x.((Crime(x) & -PaysTaxes(x)) -> Crime(x))", "all x.(CrimeToNotPayTaxes(x) -> Criminal(x))"]}
{"id": "enwn_validation_288", "nl": "Lewis will commit a crime if he does not pay his taxes.", "fol": "", "prediction": ["all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lee Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Little(x) & -PayTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lion(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Little(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))"]}
{"id": "enwn_validation_289", "nl": "You should fulfill your promises.", "fol": "", "prediction": ["all x.(FullSellPromises(x) -> HaveReceivedPromises(x))", "all x.((Promise(x) & Fulfills(x)) -> AuthenticSignificance(x))", "all x.((Promise(x) & Fulfill(x)) -> MustImprove(x))", "all x.((Client(x) & Promise(x)) -> Fulfills(x,y))", "all x.(RealizePromises(x) -> RequiresTruth(x))", "all x.((Promise(x) & Fulfill(x)) -> Gives(x))", "all x y.((VeryLivingPromise(x) & PromiseShow(y)) -> Fulfills(x,y))", "all x.((Promise(x) & Fulfill(x,y)) -> Prophecy(x,y))", "all x.((Promise(x) & Fulfill(x,y)) -> YouLeads(x,y))", "all x.((Promise(x) & Fulfill(x)) -> ShouldReceive(x))", "all x.((Promise(x) & Fulfill(x)) -> Successful(x))", "all x.(FulfillPromises(x) -> Should(x))", "all x.((Person(x) & Promise(x)) -> ComesToTruth(x))", "All x.((Person(x) & FulfillsPromises(x)) -> FillsPromises(x))", "all x.((Promise(x) & Fulfill(x)) -> Make(x,Participate(x))", "all x.((Person(x) & CompletesPromises(x)) -> FulfillsPromises(x))"]}
{"id": "enwn_validation_290", "nl": "Evan said he would help Rose.", "fol": "", "prediction": ["Evan said he would help Rose.", "Evan said he would help Rose.", "Evan said he will help Rose.", "Evan said he would help Rose.", "Evan said he would HelpRose.", "theme:((Evan,Rose) & WouldHelp(Evan,Rose))", "All x.((Evan(x) & Rose(y)) -> WouldHelp(x,y))", "(SaidEven(Evan,Rose) & WouldHelp(Evan,Rose))", "Evan said he would help Rose.", "Then Evan said he would help Rose.", "all x.((Evan(x) & Rose(y)) -> Helped(x,y))", "Evan said he would help Rose.", "Evan said he would help Rose.", "All x y.((Evi(x) & Rose(y)) -> SaysHelps(x,y))", "Eliza is a mother to two young girls (Rose, 5) & Hilaries(Eliza,2))", "(HearRose(Evan) & Helps(Evan))"]}
{"id": "enwn_validation_291", "nl": "If you say you will do something, you promise to do that thing.", "fol": "", "prediction": ["all x.((YouSellToDo(x) & WillDoIt(x)) -> PromiseNotToDoIt(x))", "all x.((Sell(x) & WillDo(x)) -> PromisesToDo(x))", "all x.((Sells(x) & WillDo(x)) -> PromisesToDo(x))", "all x y.((Said(x) & WillDoThing(y)) -> PromiseToDoThing(x,y))", "all x.((Sells(x) & WillDo(x)) -> PromisesToDo(x))", "all x.((WillDo(x) & PromiseToDo(x)) -> WillDo(x))", "all x.((SellsYouWillDo(x) & Promise(x)) -> Do(x))", "all x.((SellsYouWillDo(x) & PromisesDoing(x)) -> DoIt(x))", "all x y.((Sells(x) & Thing(y) & Promises(x,y)) -> Dose(x,y))", "all x.((Speak(x) & Determines(x)) -> PromisesDoing(x))", "all x.((Sells(x) & WillDo(x)) -> (PromitsDoing(x) & PromisesDoing(x)))", "all x.((Sell(x) & WillDo(x)) -> PromiseToDo(x))", "all x.((Sells(x) & WillDo(x)) -> PromisesToDo(x))", "all x.(Pledge(x) -> WillDoSomething(x))", "all x.((Sell(x) & WillDo(x)) -> PromisesToDo(x))", "all x.((Sells(x) & WillDo(x)) -> PromisesToDo(x))"]}
{"id": "enwn_validation_292", "nl": "Evan promised to help Rose.", "fol": "", "prediction": ["all x y.((Evan(x) & Rose(y)) -> PromisedToHelp(x,y))", "Evan promised to help Rose.", "all x.((Evan(x) & Rose(y)) -> PromisedToHelp(x,y))", "Evan promised not to help Rose.", "Evan promised to help Rose.", "Evan promised to help Rose.", "(Promise(Evan,Rose))", "Evan promised to help Rose.", "Evan promised to help Rose.", "Evan promised to help Rose.", "Evan promised to help Rose.", "\u2013PromisesTo(Even,Rose))", "Evan promised to help Rose.", "Evan promised to help Rose!", "Evan promised to help Rose.", "[(Evan,Rose) | Evan,Rose)))"]}
{"id": "enwn_validation_293", "nl": "Evan should help Rose.", "fol": "", "prediction": ["All x.(Robert(x) -> ShouldHelp(x,Rose))", "everytime.(Evan,Eva) is gonna helpRose(Evan,y))", "all x.(Evan(x) -> ShouldHelpRose(x))", "all x.((Evan(x) & Rose(y)) -> Helps(x,y))", "all x.(SendsToRose(x) -> EvanBeneath(x))", "all x.((Evan(x) & Rose(y)) -> ShouldHelp(x,y))", "(All x.(Evan(x) -> HelpsRose(x)))", "all x.(Evan(x) -> ShouldHelpRose(x))", "everyone.((Evan(Evan) & Rose(Rose) & Helps(Evan,Rose))", "all x.(Evan(x) -> ShouldHelpRose(x))", "Evgenia shouldHelpRoos(Evan)", "(Helps(Evan,Rose))", "all x y.((Evan(x) & Rose(y)) -> ShouldHelp(x,y))", "-shouldHelp(Evan)", "all x.((Evan(x) & Rose(y)) -> ShouldHelp(x,y))", "all x.((Chris(x) & Rose(y)) -> Helps(x,y))"]}
{"id": "enwn_validation_294", "nl": "Erin argued for her answer after it was proven wrong.", "fol": "", "prediction": ["Erin argued for answer after it was proven wrong.", "Erin argued for answer, after it was proved wrong.", "all x y.((Erin(x) & Answer(y) & ProvedWrong(y)) -> ArgumentatedFor(x,y))", "Erin argued for herAnswerAfterProvedWrong(Erin)", "Erin arguedForAnswerAfterProvenWrong(Erin))", "Erin argued for answer after it was proven wrong.", "Erin argued for answer after it was proven wrong.", "Erin argued for herself after the answer was proven wrong.", "all x.((Erin(x) & AnswerProvenWrong(x)) -> ArguatedFor(x,y))", "(ArmoredFor(Erin) & AnswerProvenWrong(Erin))", "Erin argued for her answer after it was proven wrong.", "Erin argued for her answer after it was proven wrong.", "all x.(Erin(x) -> ArgumentatedForAnswer(x))", "Erin argued for answer after she had proven.", "all x.((Erin(x) & AnswerProvedMieral(x)) -> Argument(x,y))", "Erin argued for her answer after it was proven wrong."]}
{"id": "enwn_validation_295", "nl": "If you argue when you are wrong, you do not accept that you are wrong.", "fol": "", "prediction": ["all x.((Argument(x) & Wrong(x)) -> -AcceptWrong(x))", "all x.((Argument(x) & IsWrong(x)) -> -AcceptWrong(x))", "all x.(ArruignWhenIsWrong(x) -> -AcceptsWrong(x))", "all x y.((Argument(x) & Wrong(x)) -> -Accept(x,y))", "all x.(Argument(x) -> \"Wrong(x)\")", "all x.((Argument(x) & Wrong(x)) -> -RegisteredWrong(x))", "all x.(ArgumentWhenWrong(x) -> -Accepts(x,wrong))", "all x.(Arbit ((IsWrong(x)) -> DoNotAccept(x,IsWrong(x)))", "all x.(ArgumentWhenWrong(x) -> -Accept(x,Wrong(x))", "all x.(Argument WhenWrong(x) -> -AllowsWrong(x))", "all x.(Argument(x) -> -AcceptsWrong(x))", "all x.(Argument(x) -> -Accept(x,wrong))", "all x.(Argument(x) -> (-AcceptWrong(x)))", "all x.((ArriveWrong(x) & -AcceptWrong(x)) -> -AcceptWrong(x))", "all x.(Argument(x) -> Unacceptable(x))", "all x.(ArgumentWear(x) -> -AcceptInWrong(x))"]}
{"id": "enwn_validation_296", "nl": "If you can't accept that you are wrong, you lack humility.", "fol": "", "prediction": ["all x.((CannotAcceptIsWrong(x) & LackHumor(x)) -> LacksHumor(x))", "all x.(IsWrong(x) -> LackPrimeliness(x))", "all x.((CannotAcceptIsWrong(x)) -> LacksHumor(x))", "all x.((CannotAcceptIsWrong(x)) -> LackHumor(x))", "all x.((CannotAcceptWrong(x)) -> LackHilffulness(x))", "all x.(Impossible(x) -> LackHumor(x))", "all x.((Can'tAcceptWrong(x) & LackHumor(x)) -> RemainsIrrespective(x))", "all x.((Can\u2019tAcceptIsWrong(x)) -> LackHumbleness(x))", "all x.((Can'tAccept(x,Ignores(x)) -> LacksHmility(x))", "all x.((Unaccepted(x) & Right(x)) -> LacksHumor(x))", "all x.((Can'tAcceptWrong(x) & LoseHumor(x)) -> Can'tAcceptWrong(x))", "all x.((CannotAccept(x) & Wrong(x)) -> LacksHumidity(x))", "all x.((CannotAcceptThatImpotent(x) & LackHumanity(x)) -> Naive(x))", "all x.((Cancels(x) & AcceptsWrong(x)) -> LacksHumblement(x))", "all x.((CannotAccept(x) & IsWrong(x)) -> LacksHumor(x))", "all x.((CannotAccept(x) & Worst(x)) -> LacksHumbleness(x))"]}
{"id": "enwn_validation_297", "nl": "You should have humility.", "fol": "", "prediction": ["all x.(Humor(x) -> Humility(x))", "all x.(Humor(x) -> Humility(x))", "all x.(HaveHumanity(x) -> Humility(x))", "all x.(HasHumor(x) -> HaveHumor(x))", "all x.(HasHair(x) -> Humility(x))", "all x.((Humanity(x) & SitsOn(x)) -> Humility(x))", "all x.(Humor(x) -> MustHaveIn(x))", "all x.(HasMutuality(x) -> Humility(x))", "all x.(Humor(x) -> Have(x,y))", "you shouldhaveHumor.", "all x.(HasHumor(x) -> RequiresHailihood(x))", "all x.(Humor(x) -> Hut.", "all x.(HasHumor(x) -> HasHasHumor(x))", "all x.((HasHumor(x) & Humility(x)) -> MustHave(x))", "all x.(HaveHumor(x) -> HasHasHumor(x))", "comes with humility."]}
{"id": "enwn_validation_298", "nl": "Erin did not accept that she was wrong.", "fol": "", "prediction": ["Erin & -AcceptsImpossible(Erin)", "(-ConsidersWrong(Erin))", "all x.((Erin(x) & WasWrong(x)) -> - Accepted(x))", "Erin accepts that she was wrong.", "Erin (@((Erin) & Wrong(Erin)))", "Erin n\u2019admittedn\u2019t that she wasWrong. Erin was very unhappy with her decision.", "Erin lacked the ability to accept that she was wrong.", "Erin & She wasTwoWrong(Erin)", "Erin did not accept that she was wrong.", "Erin accepted that she was wrong.", "Erin did not accept that she was wrong.", "Erin accepted that she was Wrong.", "Erin & NotOverwhelmed(Erin)", "NullAllowed(Erin,Wrong(Erin))", "Erin & -AcceptsWrong(Erin))", "Erin accepted and did not accept that she was wrong."]}
{"id": "enwn_validation_299", "nl": "Erin lacks humility.", "fol": "", "prediction": ["Erin lacksHumore.", "(-HasHumanity(Erin,6))", "DarlingsBanner(Erin)", "(NeedsHumor(Erin) & -HasHumor(Erin))", "(LacksHumbleness(Erin)", "Erin LacksHumanity(er)", "-Humor.", "Erin lacksHumor.", "Erin lacksHumor(er)", "Erin -HasHumor(Erin)", "ElsewhereInErin(r) -> LacksHumor(r))", "Erin lacksHumanity(Erin,3))", "-HasHumor(Erin,Thomas)", "Erin lacksHumor.", "KeulesHumor(Erin)", "(UnderstandsLegtitude(Erin))"]}
{"id": "enwn_validation_300", "nl": "Erin should have humility.", "fol": "", "prediction": ["all x.(Erin(x) -> Humility(x))", "all x.(Erin(x) -> ShouldHaveHinduly(x))", "all x.(Erine(x) -> Humility(x))", "all x.(Erin(x) -> ShouldHaveMilitarianism(x))", "all x.(Erin(x) -> NeedsHumility(x))", "Erin should have Humility.", "all x.(Erin(x) -> ShouldHaveHair(x))", "Erin should have Humility(Erin)", "All x.(Erine(x) -> Humility(x))", "Erin should have Humility.", "all x.(Erin(x) -> Humility(x))", "all x.((Erin(x) & Humility(x)) -> ShouldHave(x))", "all x.(Erin (x) -> Humility(x))", "all x.((Erin(x) & Humility(x)) -> ShouldHave(x,x))", "all x.(Erin(x) -> Humility(x))", "all x.((Erin(x) & Humility(x)) -> ShouldHave(x))"]}
{"id": "enwn_validation_301", "nl": "You should not intentionally mislead people.", "fol": "", "prediction": ["all x.(IntentionallyMisleadPeople(x) -> -MisleadIntentionally(x))", "all x.((Person(x) & -IntentionallyMisleads(x)) -> -IntentionallyMisleads(x))", "all x.((IntentionallyMistleadPeople(x)) -> -HasMistlead(x))", "-IntentionallyMisleadPeople(s)", "all x!((Visitor(x) & -IntentionallyMissert(x)) -> -IntentionallyMissert(x))", "all x.((Risk(x) & -IntentionallyMaze(x)) -> -IntentionallyMaze(x))", "-IntentionallyMisleadPeople.", "all x.(MisleadsPeopleIntentionally(x) -> -StopIntentionally(x))", "all x.((NegligentlyMisleadsPeople(x)) -> -IntentionallyMisleads(x))", "all x.((IntentionallyMisleadPeople(x)) -> -Suggestions(x))", "all x.(IntentionallyMislead(x) -> -ReallyMislead(x))", "all x.((Person(x) & -IntentionallyMislead(x)) -> -IntentionallyMickel(x))", "-(IntentionallyMisleadPeople(x))", "has been rated \u00a32 () & MisleadsPeopleIntentionally())", "all x.((IntentionallyMisleadsPeople(x)) -> -(IntentionallyMisleadsPeople(x) & IntentionallyMisleadsPeople(x)))", "all x.(MisleadsPeople(x) -> -BeIntentionally(x))"]}
{"id": "enwn_validation_302", "nl": "You knowingly told John incorrect information.", "fol": "", "prediction": ["You knowingly toldJohnIncorrectInformation(John)", "-(WillyToldJohnIncorrectInformation(John))", "All x.((YouSoldIncorrectInformation(x,John)) -> WeaklySaidIncorrectInformation(x,John))", "all x.((You(x) & TellsJohnIncorrectInformation(x)) -> KierfullyForgotAll(x,John,John))", "You knew incorrect Information(John,1) -> Spoke(John,2).)", "(SaidIncorrectInformation(John,John) & Unknowingly(John,John))", "You knowingly told JohnIncorrectInformation(John)", "You knowingly toldJohnIncorrectInformation(John)", "all x.((YouToldJohnIncorrectInformation(x) & knowingly) -> CorrectInformation(x))", "You knowingly told JohnIncorrectInformation(x)", "You knowingly toldJohnIncorrectInformation(You))", "All x.((YouToldJohnIncorrectInformation(x,John)) -> Quietly(x,John))", "You knowingly toldJohnIncorrectInformation(John)", "(IsIncorrectInformation(John)?", "(WiselyToldJohnCorrectInformation(John) -> KnowsPaths(John))", "the information and wrong information were given."]}
{"id": "enwn_validation_303", "nl": "If you do something that you know is incorrect, you did that on purpose.", "fol": "", "prediction": ["all x.((OfCorrect(x) & DoWhat(x)) -> DidOnPurpose(x))", "all x.((Does(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x y.((DoSomething(x) & Knows(x,y) & Incorrect(y)) -> DidOnPurpose(x))", "all x.((Do(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x y z.((Doing(x) & KnowsIncorrect(x) & Incorrect(y) & Incorrect(z)) -> DidOnPurpose(x,z))", "all x.((DoesIncorrectly(x) & KnowsSince(x)) -> DidOnConflict(x))", "all x.((DoesIncorrect(x) | -DoesInPurpose(x))) -> ActionOnPurpose(x))", "all x.(((Do(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x.((Do(x) & YouKnowIncorrect(x)) -> DidOnPurpose(x))", "all x y.((Doing(x) & KnowsIncorrect(x)) -> -DatedFurtherInDiscipline(y))", "all x.((DoingIncorrect(x) & Knows(x)) -> DidOnPurpose(x))", "all x.((Do(x) & KnowsIsIncorrect(x)) -> DidOnPurpose(x))", "all x.((Does(x) & KnownToBeIncorrect(x)) -> DidOnPurpose(x))", "all x.(((Do(x) & Incorrect(x)) -> DidOnPurpose(x))", "all x y.((Doing(x) & KnowsWhatIsIncorrect(x)) -> DidOnPurpose(x))", "all x.((DoesConstruction(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))"]}
{"id": "enwn_validation_304", "nl": "Telling someone incorrect information is misleading them.", "fol": "", "prediction": ["all x y.((Name(x) & Person(y) & MisleadingInformation(x,y)) -> Tell-IncorrectInformation(x,y))", "all x.((TellsIncorrectInformation(x) & Person(x)) -> Misleading(x))", "all x.(TellsIncorrectInformation(x) -> Misleading(x))", "all x.((ToldSaysIncorrectInformation(x) & ConfusingPeople(x)) -> Misleading(x))", "all x y.((Person(x) & IncorrectInformation(y)) -> Illuminating(x,y))", "all x.(Tells(x,falseInformation) -> Misleading(x))", "all x y.((IncorrectInformation(x) & Person(y)) -> Misleading(y))", "all x y.((IncorrectInformation(x) & Person(y)) -> IrresponsibleInformation(x,y))", "all x.(TellsIncorrectInformation(x) -> Misleading(x))", "all x.((IncorrectInformation(x) & Telling(x)) -> Misleading(x))", "all x.(LimitingIncorrectInformation(x) -> Misleading(x))", "all x y.((IncorrectInformation(x) & Person(y)) -> Indiscriminating(y,x))", "all x.((TellsIncorrectInformation(x) & Person(x)) -> Impiquant(x))", "all x y.((Person(x) & Person(y) & TellsIncorrectInformation(x,y)) -> Misleading(x,y))", "all x.(TellsIncorrectInformation(x) -> Misleading(x))", "all x y.((TellsIncorrectInformation(x) & Person(y)) -> IrresponsibleInformation(x,y))"]}
{"id": "enwn_validation_305", "nl": "If you do something on purpose, you did that thing intentionally.", "fol": "", "prediction": ["all x.((FollowsPurpose(x) & SomethingOnPurpose(x)) -> DidIntentionally(x))", "all x.((DoDoAtPurpose(x) & DidDoAtPurpose(x)) -> Intentionally(x))", "all x.((Does(x,Purpose) & Did(x,Intentionally)) -> Did(x))", "all x.(DoesOnPurpose(x) -> DidThatThingIntentionally(x))", "all x.((DoesIntentionally(x) & Purpose(x)) -> DidIntentionally(x))", "all x.((DoesPurpose(x) & Intentionally(x)) -> DidNotThem(x))", "all x.((DoesBeneath(x) & OnPurpose(x)) -> ThenIntentionally(x))", "all x y.((DoesOn(x,y) & Purpose(y)) -> DidIntentionally(x))", "all x.((Doing(x) & -Intentionally(x)) -> DoingPurpose(x))", "all x.((DoesOnPurpose(x) & DidIntentionally(x)) -> DoneOnProne(x))", "all x.((DoesOnPurpose(x) & Intentionally(x)) -> Did(x,Pronely))", "all x.((DoesOnPurpose(x) & Intentionally(x)) -> DidThing(x))", "all x.((DoesOnPurpose(x) -> DoedIntentionally(x)))", "all x.((ThanPurpose(x) & Things(x)) -> DesignedIntentionally(x))", "all x.((DoesSomethingOnPurpose(x) & Intentional(x)) -> IntentionallyDoes(x))", "all x.((Does(x,purpose) & Intentionally(x)) -> Added(x,purpose))"]}
{"id": "enwn_validation_306", "nl": "You told John incorrect information on purpose.", "fol": "", "prediction": ["All x.((KnewPurpose(x,John)) -> IncorrectInformation(x))", "all x.((John(x) & ErectInfo(x)) -> Sent(x,))", "Then you told John to correct the information on purpose.", "all x.((YouToldJohn(x) & IncorrectInfoOnPurpose(x)) -> IsYourSigned(x,Joe))", "All x.((TellsIncorrectInformation(x) & JohnPromise(x)) -> IncorrectInformation(x))", "You told John inexactIronation(John) & Attribute(John))", "(IncorrectInformationOnPurpose(John) | Tells(John)))", "all ages..((TellsIncorrectInformation(John,Purpose)) -> TellsJohn(John,Purpose))", "All x y.((Named(x) & John(y) & IncorrectInformationOnPoint(y)) -> Tells(x,y))", "(IncorrectInformation(John,Purpose))", "all x y.((Jenner(x) & CorrectInformation(y.) & -IncorrectInformation(x,y)) -> E-mail(x,y))", "All x.((SoldJohnIncorrectInformation(x)) -> IsPurpose(x))", "-UsedChangeInformationOnPurpose(x) -> DeclaredIncorrectInformation(x,John))", "(Sorry John, IncorrectInformation(John))", "All x.((YouSoldJohn(x) & -IncorrectInformation(x)) -> TellsJohn(x))", "all x.((SaidIncorrectInformationOnPurpose(x) & John(x)) -> True(x))"]}
{"id": "enwn_validation_307", "nl": "You misled John on purpose.", "fol": "", "prediction": ["(MisleafedJohn(John) & OnPurpose(John))", "YPseudoMisledJohn(theirPurpose)", "(MisledJohnOnPurpose(John) & -InstructedJohn(John))", "All x.((June(x) & Purpose(x)) -> Misled(x,John))", "-(GodMisled(John,OtherProfile))", "vous avez mislead John on purpose.", "All x y.((John(x) & Purpose(y)) -> Misled(x,y))", "All x.((MisledJohn(x) & Purpose(x)) -> MisledJohn(x))", "All x.((John(x) & MisledOnPurpose(x)) -> Missled(x))", "You MisledJohnOnPurpose.", "You misledJohnOnPurpose.", "John mutilated on purpose.", "You misled John on purpose.", "(You MisledJohn(John) & MisledOnPurpose(John))", "You misled John on purpose.", "(MisledJohn(i) & Purpose(i) & Concealed(i) & MisledJohn(i))"]}
{"id": "enwn_validation_308", "nl": "You intentionally misled John.", "fol": "", "prediction": ["-IntentionallyMisledJohn(x)", "Sie deliberately MisledJohn(John)", "You intentionally misledJohn(john)", "You intentionally misledJohn(John)", "All x.((Jon(x) & IntentionallyMistered(x)) -> Misled(x,John))", "all x.((History(x) & MisledJohn(x)) -> Intentionally(x))", "-IntentionallyMisled(John,y)", "-IntentionallyMisledJohn(John)", "UrbanlyMisledJohn>.", "Limit(u) & John(p) & IntentionallyMisled(u,john))", "You intentionally misledJohn.", "you intentionally misled John.", "You intentionally misledJohn.", "Incidentally MisleadsJohn(x)", "You intentionally misledJohn", "Intentionally MisledJohn."]}
{"id": "enwn_validation_309", "nl": "You should not have misled John intentionally.", "fol": "", "prediction": ["-(IntentionallyMaledJohn(John))", "-(IntentionallyMisledJohn(John,John))", "-MisledJohnIntentionally.", "the misledJohn(John)", "-(Messe(John,John) & Intentional(John,John))", "-IntentionallyMasledJohn(John)", "Intentionally, John.", "-MisledIntentionally(John,y)", "you should not have misledJohnIntentionally.", "-IntentionallyMisledJohn(John)", "-MisledIntentionally(John,VisibleTellers)", "-IntentionallyMisledJohn(John)", "John, you should not have deliberately misled him.", "-IntentionallyMisledJohn(John)", "-(IntentionallyMisledJohn(John) & -IntentionallyMisledJohn(John)))", "((MisledJohn(John) & -Intentionally(John,John)))"]}
{"id": "enwn_validation_310", "nl": "You should only fire someone if you have a good reason.", "fol": "", "prediction": ["all x.((Doctor(x) & GoodRight(x)) -> Fire(x))", "all x y.((Young(x) & Person(y) & GoodMentor(x)) -> Fire(x,y))", "all x.((Person(x) & GoodRight(x)) -> Fire(x))", "all x.((Function(x) & GoodFruit(x)) -> FireAnother(x))", "all x y.(((Person(x) & GoodRight(y)) -> Fires(x,y))", "all x y.(((Person(x) & Reason(y) & Good(y)) -> Fire(x,y))", "all x y.((Fun(x) & Person(y) & GoodRaison(y)) -> Fire(x,y))", "all x.(Function(x) -> (GoodMoment(x) & Fire(x)))", "all x.((Fail(x) & GoodRaison(x)) -> Fire(x))", "all x.((Person(x) & GoodThought(x)) -> Fire(x))", "all x.((Fuel(x) & GoodRight(x)) -> Fire(x))", "all x y.((GrateFunction(x) & Person(y)) -> Fire(x,y))", "all x.((Person(x) & GoodRight(x)) -> Fire(x))", "all x y.((Fire(x) & Person(y) & GoodRight(y)) -> Fire(x,y))", "all x y.((Fire(x) & Acting(y) & GoodMatter(x,y)) -> Fire(x))", "all x y.(((Person(x) & FirePerson(y)) & GoodRight(y)) -> CanFire(x,y))"]}
{"id": "enwn_validation_311", "nl": "Bob fired Peter because Peter had different ideas than Bob.", "fol": "", "prediction": ["all x y.((Robot(x) & Peter(y)) -> Fired(x,y))", "(FiredBob(Bob) - Peter(Bob))", "(Chance(Bob) -> Fired(Bob,Peter) & PeterDiverseIdeas(Peter,Bob)))", "Bob firedPeter because Peter DifferentIdeas(Peter,Bob))", "(firedBob(b) -> exists x.(Peter(c) & DifferentIdeas(c))))", "all x y.((Bob(x) & Peter(y) & DifferentIdeas(y,x)) -> Fired(x,y))", "all x y z.((Bob(x) & Peter(y) & Bob(z) & DifferentIdeas(y,z)) -> Fired(x,y,z))", "Bob firedPeterbecausePeterHasDifferentIdeasThan(Peter))", "(Fires(Bob) -> (Peter(Peter) & -Bob(Bob)))", "(Sort(Bob,Peter) & PeterDifferentIdeas(Bob))", "Bob firedPeter because he had DifferentIdeas(Peter,Bob))", "all x y.((Bob(x) & Peter(y)) -> Fired(x,y))", "Bob firedPeter because he had DifferentIdeasForBob(Peter) & -(Bob) -> Fired(Peter)))", "all x y.((Bob(x) & Peter(y) & DifferentIdeas(y,x)) -> Fired(x,y))", "all x y.((Bob(x) & Peter(y)) -> Fired(x,y))", "Bob firedPeter(Peter) -> DifferentIdeasLater(Peter,Bob))"]}
{"id": "enwn_validation_312", "nl": "If two people have different ideas, they do not agree with each other.", "fol": "", "prediction": ["(exists x.(Person(x) & DifferentIdeas(x)) & -Agree(x))", "all x.(DifferentIdeas(x) -> -Adventures(x))", "all x.(DifferentIdeas(x) -> -Agrees(x))", "all x.((Person(x) & DistinctIdeas(x)) -> -Agree(x))", "all x y.((Person(x) & Person(y) & DifferentIdeas(x,y)) -> -ClosesAgreement(y))", "all x y.((Person(x) & Person(y) & DifferentIdeas(x,y)) -> -Agree(x,y))", "all x y.((Person(x) & Person(y) & HasDifferenteIdeas(x,y)) -> -Agree(x,y))", "all x y.((Person(x) & Person(y) & DifferentIdeas(x,y)) -> -AgreeWithEachOther(x,y))", "all x y.((Person(x) & Person(y) & DifferentIdeas(x,y)) -> -Agree(x,y))", "all x y z.((Person(x) & Person(y) & Idea(z) & HasDifferentIdeas(x,z)) -> -Agree(x,y,z))", "all x y.((Person(x) & Person(y)) -> DistinctIdeas(x,y))", "all x.((Person(x) & HasDifferentIdeas(x)) -> -Agrees(x))", "all x.((Person(x) & HasDifferentIdeas(x)) -> -Agrees(x))", "all x.(DifferentIdeas(x) -> -Agree(x))", "all x.((Person(x) & HasDifferentIdeas(x)) -> -Agree(x))", "all x.(DifferentIdeas(x) -> -Agree(x))"]}
{"id": "enwn_validation_313", "nl": "Not agreeing with someone is not a good reason to fire them.", "fol": "", "prediction": ["all x.((Personnel(x) & -Agree(x)) -> -GoodRightToFire(x))", "all x y.((Agrees(x,y) & Person(y)) -> -GoodMomentToFire(x,y))", "all x y z.((Flight(x) & Person(y) & -Agreement(y) & Angry(z)) -> -GoodRunnin(x))", "all x y.((Negative(x) & Person(y) & UnagreedWith(x,y)) -> -GoodPurposeToFire(x,y))", "all x.((AgreesWithPerson(x) & -GoodRightToFire(x)) -> -GoodRightToFirePerson(x))", "all x y.((Counse(x) & Person(y) & -AgreeWith(x,y)) -> -GoodRightToFire(x,y))", "all x.((OccurringWith(x,Person,Person) & -GoodRightToFire(x)) -> -GoodRightToFire(x))", "all x y.((Adhoring(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "all x y.((Fire(x) & Conflict(y)) -> -GoodRightToFire(x,y))", "all x y.((Person(x) & -(AgreesWith(x,y) & Fires(x))) -> -GoodRightToFind(x,y)))", "all x.((Agrees(x,y) & Person(y)) -> -GoodRightToFire(x))", "all x.(Agree(x) -> -GoodRightToFire(x))", "unacceptingWith(nothing(t) -> -GoodRightToFind(t))", "is not a good Reason ToFire(n)", "all x.((Understanding(x) & NoWorth(x)) -> -GoodRightToFire(x))", "all x.((Understanding(x) & -VeryGoodRightToFire(x)) -> -GoodRightToFurn(x))"]}
{"id": "enwn_validation_314", "nl": "Bob fired Peter because they do not agree.", "fol": "", "prediction": ["Bob firedPeter because they \u00e2\u20ac\u201cAcquire(PP)'(Bob & Peter))", "\"(BobFired(Bob) & PeterFired(Bob)) -> NotAgreed(Bob))", "He fired Peter because the two 'disagree', he says.", "all x y.((Buoy(x) & Peter(y) & -Agree(y,x)) -> Fired(x,y))", "all x y.((Bob(x) & Peter(y) & -Agree(y)) -> Fired(x,y))", "(-Agree(Bob) & -Fire(Bob))", "Bob firedPeter(b) parce qu\u2019il n\u2019adviseato(b) & Peter(b))", "all x y.((Bob(x) & Peter(y) & -Agree(y)) -> Fired(x,y))", "all x.((Robot(x) & Peter(y) & -Agree(y)) -> Fired(x,y))", "all x y z.((Bob(x) & Peter(z) & -Agree(x,y)) -> Fired(x,z))", "Bob fired Peter, citing : -(Appointment(Bob) | AppropriateMission(Bob)))", "all x y.((Bob(x) & Peter(y)) -> -Accepts(x,y))", "(-Agreements(Bob & Peter))", "Bob firedPeter because(Peter) & -(Bob(Bob) | Peter(Bob)))", "Bob fired Peter, despite resentment from the two men.", "Bob fired Peter, causing a lack of agreement between them."]}
{"id": "enwn_validation_315", "nl": "Bob fired Peter without a good reason.", "fol": "", "prediction": ["(FixedManyPeter(Bob) & -GoodRite(Bob))", "all x y.((Bob(x) & Peter(y)) -> FiredWithoutGoodRun(x,y))", "Bob fired Peter without good_reason.", "Bob fired Peter sans GoodRunt(Bob)", "all x.(Fires(x,Bob) & Peter(x) & -GoodRun(x))", "all x y.((Bob(x) & Peter(y) & -GoodRation(y)) -> Fired(x,y))", "all x.((Bob(x) & Peter(y)) -> FiredWithoutGoodRight(x,y))", "all x y.((Bob(x) & Peter(y)) -> Fired(x,y))", "all x y.((Bob(x) & Peter(y)) -> FiredUnfortunately(x,y))", "(-GoodConsider(Bob) & Fired(Bob,Peter))", "(FixedByBob(Bob) | FixedPeter(Bob)))", "all x y z.((Robert(x) & Peter(y) & Reason(z) & Good(x,y)) -> FilledWithout(x,y,z))", "Bob firedSilent(Bob,Peter)", "all x y.((Bob(x) & Peter(y) & -GoodRun(x,y)) -> Fired(x,y))", "Oops. Bob fired(Bob,Peter) -> WithoutGoodRight(Bob,Peter))", "all x y.((Bob(x) & Peter(y)) -> Fired(x,y))"]}
{"id": "enwn_validation_316", "nl": "Bob should not have fired Peter.", "fol": "", "prediction": ["-Filled(Bob)", "Bob & Peter & -HeardShortening(Bob))", "All x y.((Bob(x) & Peter(y)) -> ShouldNeverFired(x,y))", "all x y.((Bob(x) & Peter(y)) -> -Shooted(x,y))", "Bob & Boris(Bob) & Peter(Peter) & -Built(Bob,Peter))", "-ShouldCallStokedPeter(Bob,Peter,Unknown)", "can\u2019tFile(Bob)", "(HasBobFired(Bob,Peter))", "Bob -ShouldFire Peter.", "-ShouldFistedBob(Bob)", "-(Fired(Bob) & Peter(Peter))", "all x.((Bob(x) & Peter(y)) -> -Fired(x,y))", "Bob should haven't fired(Bob)", "all x y.((Bob(x) & Peter(y)) -> -Filled(x,y))", "Bob should not have fired Peter.", "Bob should not have firedPeter."]}
{"id": "enwn_validation_317", "nl": "Superiors give orders and expect you to follow them.", "fol": "", "prediction": ["all x.(Superior(x) -> (GivesOrders(x) & ExpectsYouToFollowOrders(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsToFollowOrders(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsFollowingOrders(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsYouToFollowingOrders(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsSuiviness(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsYouToFollowOrders(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsSustenance(x)))", "all x.(Supreme(x) -> (GivesOrders(x) & ExpectsFollowingOrders(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsYouToFollowOrders(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsFollowingOrders(x)))", "(GivesOrders(Superiors) & ExpectsYouToFollowOrders(Superiors))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsYouToFollowOrders(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsToFollowOrders(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsFollowingOrders(x)))", "all x y.((Superior(x) & Customer(y)) -> (GivesOrders(x,y) & Expects(x,y)))", "all x y z.((Superior(x) & Order(y) & Order(z)) -> (Gives(x,y) & Expects(x,z)))"]}
{"id": "enwn_validation_318", "nl": "If an order is unjust, you should disobey those orders.", "fol": "", "prediction": ["all x.((Order(x) & Unjust(x)) -> DisobeyOrders(x))", "all x.((Arrive(x) & Unjust(x)) -> Disobey(x))", "all x.(Unjust(x) -> DisobeyAuditOrders(x))", "all x.((Order(x) & Unjust(x)) -> Disobey(x))", "all x.(UnjustOrder(x) -> DisobeyOrders(x))", "all x.(IsUnjust(x) -> DisobeyOrders(x))", "all x.(UnjustOrder(x) -> DisobeyORders(x))", "all x.((Order(x) & Unjust(x)) -> Disobey(x))", "all x.((Order(x) & Unjust(x)) -> Disobey(x))", "all x.((Order(x) & Unjust(x)) -> Disobey(x))", "all x.(Unjust(x) -> YouDiscloseOrders(x))", "all x.((Order(x) & Unjust(x)) -> Disobey(x))", "all x.(UnjustOrder(x) -> DisobeyOrders(x))", "all x.((Order(x) & Unjust(x)) -> Disobey(x))", "all x.(UnjustOrder(x) -> DisobeyOrder(x))", "all x.((Order(x) & Unjust(x)) -> Disobey(x,y))"]}
{"id": "enwn_validation_319", "nl": "If you follow an order to commit a crime, you followed an unjust order.", "fol": "", "prediction": ["all x.((CorrectOrder(x) & CommitCrime(x)) -> FollowedUnjustOrder(x))", "all x.((CorrectOrder(x) & CommitCrime(x)) -> FollowsUnjustOrder(x))", "all x y.((Order(x) & Follow(x,y)) -> CommitCrimes(y))", "all x.(((Crime(x) & FollowsOrder(x,i)) -> FollowedUnjustOrder(x))", "all x.((SuesOrder(x) & Commit Crime(x)) -> FollowedUnjustOrder(x))", "all x y.(((Order(x) & FollowEdToCommit(y,x)) -> FollowsUnjustOrder(x))", "all x y.((Order(x) & CommitCorruption(x) & Follows(x,y)) -> UnjustOrder(y))", "all x y.((DofollowOrderToCommitCrime(x) & Crime(y)) -> UnjustOrder(x))", "all x y.((Order(x) & Follows(y,x)) -> CommitsCrime(y,x))", "all x.((Order(x) & Follows(x\")) -> FollowedUnjustOrder(x))", "all x y.((DofollowOrder(x) & Crime(y) & Commits(x,y)) -> FollowedUnjustOrder(x,y))", "all x y.((Order(x) & Follow(x,y)) -> Commit(y,x))", "all x y.(Crime(x,y) -> FollowsUnjustOrder(x,y))", "all x y.((Order(x) & InCommitToCrime(x,y)) -> FollowedUnjustOrder(x))", "all x.((ChangeOrder(x) & CommittedCrime(x)) -> FollowsUnjustOrder(x))", "all x y.((Order(x) & Follows(x,y)) -> UnjustOrder(x))"]}
{"id": "enwn_validation_320", "nl": "If you did the thing you are ordered to do from someone else, you followed the order given by that someone.", "fol": "", "prediction": ["all x y.((Does(x,y) & RequestedToDo(x) & Person(y)) -> FollowedOrder(x,y))", "all x y.(((DoingThingYouOrder(x) & Person(y)) -> FollowsOrder(x,y))", "all x y.((Person(x) & OrderedToDo(x,y)) -> FollowedOrder(x,y))", "all x.((DoesOrder(x) & SomeoneAtOther(x)) -> FollowedOrder(x))", "all x y z.(((DoesTheThing(x,y) & OrderedFrom(y,z)) -> FollowedOrder(x))", "all x y.((DoingWhatAreOrdered(x) & Someone(y)) -> FollowOrder(x,y))", "all x y.((DoesTheEdouard thing(x) & Ordnance(y)) -> FollowedOrder(x,y))", "all x y.((DoesThingOfAnother(x) & OrderedFromAnother(y)) -> FollowedOrder(x))", "all x y.((DoesLovable(x) & OrderedFromOther(y)) -> FollowedOrder(x,y))", "all x y z.((DoesOneEphemeralThing(x) & Person(y) & Ordnance(z) & Ordinance(y)) -> Followed(x,y,z))", "all x y.((DoingDesit(x) & Company(y)) -> FollowedOrder(x,y))", "all x.((OrderToDo(x) & AndDID(x)) -> FollowedOrder(x))", "all x y.((DoesWhat(x,y) & OrderedFromOther(x,y)) -> FollowedOrder(x,y))", "all x y.((Word(x) & Person(y)) -> FollowedOrder(x,y))", "all x y.((Does(x,y) & OrderedFrom(x,y)) -> FollowedOrder(x,y))", "all x y.((DoingWhatThePersonOrder(x) & OrderedFrom(x,y)) -> FollowedOrder(x,y))"]}
{"id": "enwn_validation_321", "nl": "If a superior tells you to do something, that thing is an order.", "fol": "", "prediction": ["all x.((Supervisor(x) & TellsToDo(x)) -> Order(x))", "all x.((Supervisor(x) & TellsYouToDo(x)) -> Order(x))", "all x.((Supervisor(x) & TellsYouToDo(x)) -> Order(x))", "all x y.((Supervisor(x) & Tells(x,y) & WorkProject(y) & Tells(x,y)) -> Order(x))", "all x.((Supervisor(x) & TellsYouToDo(x)) -> Order(x))", "all x.((Supervisor(x) & TellsYouToDoThing(x)) -> Order(x))", "all x.((SuperiorIntells(x,y) & Things(y) & Tells(x,y)) -> Order(x))", "all x.((Superior(x) & TellsYouToDo(x)) -> Order(x))", "all x.((Superior(x) & TellsYouToDo(x)) -> Order(x))", "all x y.((Supreme(x) & Superior(y) & TellsThing(y,x)) -> Order(x))", "all x.((Supervisor(x) & TellsYouToDoSomething(x)) -> Order(x))", "all x y.((Superior(x) & Lie(y) & TellsYouToDo(x,y)) -> Order(x))", "all x.(SupporterTellsYouToDoThing(x) -> Order(x))", "all x y.((Superior(x) & TellsYouToDo(x,y)) -> Order(y))", "all x y z.((Supervisor(x) & TellsYouToDo(x,y,z)) -> Order(x))", "all x.(TellsSupremeToDo(x) -> Order(x))"]}
{"id": "enwn_validation_322", "nl": "Sara committed fraud because her boss told her to.", "fol": "", "prediction": ["((Boss(Sara) & BossAttended(Sara)) -> CommittedFraud(Sara))", "all x.((Sara(x) & BossAssigned(x,s)) -> CommittedFraud(x))", "all x.((Sara(x) & BossSheFailed(x)) -> CommittedVirginity(x))", "all x.((Sara(x) & BossSold(x,Sara)) -> FeltFraud(x))", "all x y.((Sara(x) & Boss(b) & SheBoss(y)) -> CommittedFraud(x,y))", "all x y z.((Sara(x) & Boss(y) & Card(z)) -> CommittedFraud(x,y,z))", "all x y.((Boss(x) & Sara(y)) -> CommittedFraud(y,x))", "all x.((Sara(x) & BossWroteSheTo(x)) -> CommittedFraud(x))", "all x y.((Sara(x) & BossPlasticatedFor(x,y)) -> CommittedFraud(x,y))", "(LimitsFraud(Sara) -> BlessYou(Sara))", "all x.((Sara(x) & BossWroteSheWasFraud(x)) -> CommittedFraud(x))", "all x.((Sara(x) & BossWideCause(x,Sara)) -> CommittedCrime(x,Sara))", "all x y z.((Sara(x) & Boss(y) & Fraud(z)) -> CommittedAsBossWrote(x,y,z))", "all x y z.((Sara(x) & Boss(y) & Boss(z) & Tells(z,y,z)) -> CommittedFraud(x,y))", "all x.((Sara(x) & BossAgreedTo(x)) -> CommittedFraud(x))", "all x y.((Sara(x) & Boss(y) & CaughtFrivolity(x & TelledTo(x,y)) -> CommittedFraud(x))"]}
{"id": "enwn_validation_323", "nl": "Fraud is a crime.", "fol": "", "prediction": ["all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x y.((Fraud(x) & Crime(y)) -> Fraud(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))"]}
{"id": "enwn_validation_324", "nl": "If someone is your boss, then they are your superior.", "fol": "", "prediction": ["all x.(Bust(x) -> Superior(x))", "all x.((Boss(x) & Superior(x)) -> Boss(x))", "all x.((Boss(x) & Superior(x)) -> BossOf(x))", "all x.((Boss(x) & Superior(x)) -> Boss(x))", "all x.((Bosse(x) & Supernatural(x)) -> Manager(x))", "all x.((Boss(x) & Sufficient(x)) -> Superior(x))", "all x.((Boss(x) & Superior(x)) -> Boss(x))", "all x.((Person(x) & Boss(x)) -> Superior(x))", "all x.(Bust(x) -> Superior(x))", "all x.((Bust(x) & Superior(x)) -> Boss(x))", "all x.((Boss(x) & Superior(x)) -> Boss(x))", "all x.((Man(x) & Boss(x)) -> Superior(x))", "all x.((Boss(x) & Superior(x)) -> Boss(x))", "all x.(Bosse(x) -> Superior(x))", "all x.((Bust(x) & Sufficient(x)) -> Boss(x))", "all x.(Bosse(x) -> Superior(x))"]}
{"id": "enwn_validation_325", "nl": "You should disobey orders from superiors if they are unjust.", "fol": "", "prediction": ["all x.((SupervisorOrder(x) & Unjust(x)) -> Disobey(x))", "all x y.((Supervisor(x) & Order(y) & Unjust(y)) -> Disobeys(x,y))", "all x y.((Supervisor(x) & Superordinate(y) & UnjustOrders(y)) -> Disobey(x,y))", "all x y.((Supervisor(x) & Order(y) & Unjust(y)) -> Disobey(x,y))", "all x.((SupervisorOrder(x) & Unjust(x)) -> Disobey(x))", "all x.((SuperiorOrder(x) & Unjust(x)) -> Disobeys(x))", "all x.((SuperiorOrder(x) & Unjust(x)) -> Disobey(x))", "all x.((SuperiorOrder(x) & Unjust(x)) -> DisobeyOrders(x))", "all x.((Superordinate(x) & Unjust(x)) -> DisobeyOrders(x))", "all x.((SuperiorOrder(x) & Unjust(x)) -> Disobeys(x))", "all x y.((SupervisorOrder(x) & Unjust(y) & Orders(x,y)) -> Disobey(x,y))", "all x y.((Supervisor(x) & Order(y) & UNjust(y)) -> Disobey(x,y))", "all x.((SupervisorsOrders(x) & Unjust(x)) -> Disobey(x))", "all x.((SupervisorOrder(x) & Unjust(x)) -> Disobeys(x))", "all x.((Supervisors(x) & Unjust(x)) -> DisobeyOrders(x))", "all x y.((SuperiorOrder(x) & Unjust(x)) -> Disobey(x,y))"]}
{"id": "enwn_validation_326", "nl": "Sara committed a crime  because her boss told her to.", "fol": "", "prediction": ["all x.((Sara(x) & BossPondio-CommittedCrime(x)) -> AttemptedCrime(x))", "all x.((Sara(x) & BossCaused(x)) -> CommittedCrime(x))", "all x.((Sara(x) & BossHeardTo(x)) -> CommittedCrime(x))", "all x y.((Sara(x) & Boss(y) & Telled(x,y)) -> CommitsCrime(x))", "all x y.((Sara(x) & Boss(y)) -> CommittedCrime(x,y))", "all x ((Sara(x) & BossSangria(x)) -> CommittedCrime(x))", "all x.((Boss(x) & Sara(y)) -> CommittedCrime(y,x))", "all x y.((Sara(x) & Boss(y)), -> CommittedCrime(x,y))", "all x y.((SaraCrime(x,y) & Boss(y)) -> Tells(y,x))", "all x y.((Sara(x) & Boss(y)) -> CommittedCrime(x,y))", "all x y.((Sara(x) & Boss(y)) -> CommittedCrime(x,y))", "all x y.((Sara(x) & Boss(y) & Bolshew(z)) -> CommittedCrime(x,y,z))", "all x y.((Sara(x) & Boss(y)) -> CommittedCrime(x,y))", "all x.((Sara(x) & BossBoySecret(x)) -> CommittedCrime(x))", "all x y.((Boss(x) & Sara's(y)) -> CommittedCrime(x,y))", "all x y.((Sara(x) & Boss(y)) -> ConnedCorruptionForG.(x,y)))"]}
{"id": "enwn_validation_327", "nl": "Sara committed a crime  because her superior told her to.", "fol": "", "prediction": ["all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))", "all x.((Sara(x) & SupravisorCould(x)) -> CommittedCrime(x))", "all x y.((Superior(x) & Sara(y)) -> CommittedCrime(x,y))", "all x.((Sara(x) & SuperiorCrime(y)) -> CommittedByWashing(x,y))", "all x.((Sara(x) & SuperiorCommittedCrime(x)) -> ThenSaarCommittedCrime(x))", "all x y.((Sara(x) & Superior(y) & KnownFor(x,y)) -> CommittedCrime(x,y))", "all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))", "all x y.((Superior(x) & Sara(y)) -> CommittedCrime(x,y))", "all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))", "all x y.((Sara(x) & Superior(y) & Sent(y,x)) -> CommittedCrime(x,y))", "all x.((Sara(x) & SuperiorSaidTo(x)) -> CommittedCrime(x))", "all x.((Sara(x) & SuperiorSatisfied(x)) -> CommittedCrime(x))", "all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))", "all x.(Sara(x) -> CommittedCrime(x))", "all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))", "all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x))"]}
{"id": "enwn_validation_328", "nl": "Sara committed a crime because her superior ordered her to.", "fol": "", "prediction": ["all x y.((Sara(x) & SuperiorOrdnedToBeCommitted(x,y)) -> CommittedCrime(y))", "all x y z.((Sara(x) & Supraman(y) & Superior(z) & MadeCommitted(x,y,z)) -> CommittedCrime(x,y))", "all x y.((Superior(x) & Sara(y)) -> CommittedCrime(x,y))", "all x.((Sara(x) & SuperiorOrdones(x)) -> CommittedCrime(x))", "all x y.((Sara(x) & Superior(y) & CommittedCrime(x,y)) -> OrderedTo(x,y))", "all x y.((Sara(x) & Superior(y) & Enjoyed(x,y)) -> CommittedCrime(x,y))", "all x.((Sara(x) & SuperiorOrders(x,Sara)) -> CommittedScandal(x))", "all x y.((Sara(x) & SuperiorOrder(y)) -> CommitsCrime(x))", "all x.((Sara(x) & SuperiorOrdned(x)) -> CommittedCrime(x))", "all x y.((Sara(x) & Superior(y)) -> Committed(x,y))", "all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))", "all x.((Sara(x) & SuppliedSuperiorOrder(x,s)) -> CommittedCrime(x))", "all x y.((Sara(x) & SuperiorOrders(x,y)) -> CommittedCrime(x,y))", "all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))", "all x y z.((Superior(z) & Sara(s) & CommandedTo(s,s)) -> CommittedCrime(s))", "all x.((Sara(x) & SupravisorOrdinated(x)) -> CommittedCrime(x))"]}
{"id": "enwn_validation_329", "nl": "Sara followed her order to commit a crime given by her superior.", "fol": "", "prediction": ["all x y z.((Sara(x) & Order(y,z)) -> CommitesCrime(x,y))", "all x y.((Sara(x) & Superior(y)) -> FollowedOrderToCommitCrime(x,y))", "all x y.((Sara(x) & Superior(y)) -> FollowedOrderToCommitCrime(x,y))", "all x.(Sara(x) & CommittedCrime(x,Commit(y,y) -> Superior(x))", "all x.((Sara(x) & Order(x,3) & CommitCrime(x)) -> SuperiorSoror(x))", "all x y.((Sara(x) & Superior(y)) -> FollowingOrderToCommitCrime(x,y))", "all x y z.((Sara(x) & Superior(y) & Crime(z)) -> FollowedOrder(x,y,z))", "all x y z.((Sara(x) & Order(y) & Superior(z) & Committed(x,y,z)) -> Follows(x,y))", "all x.((Sasa(x) & Sur superior(y)) -> FollowedOrderToCommitCrime(x,y))", "all x y z.((Sara(x) & Superior(y) & Crime(z)) -> (CommittedBy(x,y,z) | FollowingOrder(x,y)))", "all x y.((Sara(x) & Superior(y)) -> FollowedOrderToCommitBy(x,y))", "all x.((Sara(x) & Superior(x)) -> CommitCrime(x))", "all x y.((Sara(x) & Superior(y)) -> DoneCommitsCrime(x,y))", "all x y z.((Sara(x) & Command(y) & Superior(z)) -> Follows(x,y,z))", "all x y.((Sara(x) & Superior(y)) -> FollowedOrderToCommit(x,y))", "all x y.((Sara(x) & Superior(y) & CommittedCrime(x,y)) -> FollowedOrder(x))"]}
{"id": "enwn_validation_330", "nl": "Sara followed an unjust order given by her superior.", "fol": "", "prediction": ["(UnjustOrder(Sara) & DoneBySupervisor(Sara))", "(UsedOrder(Sara,Unjust) & GrantedBySuperior(Sara))", "all x y.((Sara(x) & Supremier(y)) -> FollowedUnjustOrder(x,y))", "all x y.((Sara(x) & Superior(y)) -> FollowedUnjustOrder(x,y))", "all x.((Sara(x) & UnjustOrder(x)) -> Followed(x,Sara,Survival))", "all x y z.((Sara(x) & Superior(y) & Ordination(z)) -> FollowedInUnjust(x,z))", "all x y.((Sara(x) & Supraman(y)) -> Follow(x,y))", "all x y z.((Sara(x) & Superior(y) & Order(z) & Pursuing(x,z)) -> UnjustOrder(x,y,z))", "all x y.((Sara(x) & Supremier(y)) -> FollowedUnjustOrder(x,y))", "all x y.((Sara(x) & Superior(y)) -> FollowedUnjustOrder(x,y))", "(UnjustOrder(Sara,Sara))", "all x y.((Sara(x) & Superior(y)) -> FollowedUnjustOrder(x,y))", "all x.(Sara(x) & UnjustOrderGiving(x,s))", "all x y.((Sara(x) & Superior(y)) -> FollowedUnjustOrder(x,y))", "(UnjustOrder(Sara) & Gave(Sara,Supervisor))", "all x y.((Sara(x) & Superior(y)) -> FollowedUnjustOrder(x,y))"]}
{"id": "enwn_validation_331", "nl": "Sara should have disobeyed her superiors unjust orders.", "fol": "", "prediction": ["all x.(Sara(x) -> DisobeyedUnjustOrders(x,Sara))", "all x.((Sara(x) & SuperiorsUnjustOrders(x)) -> ShouldDisobey(x,Sara))", "all x y.((Sara(x) & Superior(y) & UnjustOrders(x,y)) -> ShouldBeAbove(x,y))", "all x.((Sara(x) & SuperiorsUnjustOrders(x)) -> ShouldResist(x))", "all x.(Sara(x) -> ShouldBehavedUnjustOrders(x))", "all x.(Sara(x) -> ShouldBelongedToUnjustOrders(x))", "all x.((Sara(x) & UnjustOrders(s)) -> ShouldBeDisobeyed(x,s))", "all x y.((Sara(x) & Superior(y)) -> DisobeyedUnjustOrders(x,y))", "all x y.((Sara(x) & Supramans(y) & UnjustOrders(y)) -> ShouldHaveDisobeyed(x,y))", "all x.((Sara(x) & SuperiorsUnjustOrders(x)) -> Disobeyed(x,s))", "all x.((Sara(x) & UnjustOrders(x)) -> Disobeyed(x,sara,s))", "all x.((Sara(x) & SuperiorsUnjustOrders(x)) -> Disobeyed(x))", "all x.(Sara(x) -> ShouldDisobeyedUnjustOrders(x))", "all x.(Sara(x) -> DisobeyedUnjustOrders(x))", "all x.((Sara(x) & SuperiorsUnjustOrders(x)) -> ShouldEvenDianked(x,sara))", "all x y.((Supermajor(s) & Superior(s) & UnjustOrders(s)) -> ShouldOrder(s,s,s))"]}
{"id": "enwn_validation_332", "nl": "If you are cheating, you should tell your partner and stop cheating.", "fol": "", "prediction": ["all x.(Cheats(x) -> (Sell(x,y) & StopCheating(x)))", "all x.((Chanting(x) & TellsPartner(x) & StopsCheating(x)) -> LetsStopCheating(x))", "all x y.((Partner(x) & Cheating(x)) -> (Tell(y,x) & StopCheating(y)))", "all x.((Cheating(x) & Partner(x)) -> Tell(x,y) & StopChicking(x))", "all x.(Chasing(x) -> ((SellToPartner(x) & StopChasing(x))))", "all x.((Cheat(x) & Partners(x)) -> (Tell(x,y) & StopCheating(x)))", "all x.((Cheats(x) & Partner(x)) -> TellInCheat(x) & StopCheating(x))", "all x.((Partner(x) & Cheating(x)) -> (Tell(x,x) & StopCocheating(x)))", "all x.(Cheating(x) -> (SellPartner(x) & StopChaining(x)))", "all x.((CheatingPartner(x) & Tell(x,Partner) & Stop(x,Cheat)) -> Tell(x,Partner))", "all x.((Cheating(x) & Partner(x)) -> (StopCheating(x) & Tell(x,y)))", "all x.(Cheating(x) -> (TellPartner(x,y) & StopCheating(x)))", "all x.((Partner(x) & Cheating(x)) -> (Tell(x) & StopChaining(x)))", "all x.((Person(x) & Cheating(x)) -> (Tell(x,y) & StopCheating(x,y)))", "all x.((Partner(x) & Cheating(x)) -> (SendsTo(x,x) & Teach(x,x)))", "all x.(Cheating(x) -> (TellPartner(x) & StopCheating(x)))"]}
{"id": "enwn_validation_333", "nl": "Stan is seeing Olivia but is partnered with Ellie.", "fol": "", "prediction": ["(Stan(Stan) & Seeing(Stan,Olivia) & Partnership(Stan,Ellie))", "(StanseesOlivia(Stan) & PartneredWithEllie(Stan))", "(StanSees(Stan,Y) & ElliePartner(Stan,Y))", "(Stan(Stan) & SeesOliver(Stan) & PartnersWithEllie(Stan))", "(Sees(Stan,Oliver) & Partners(Stan,Ellie))", "(SeesOlivia(Stan) & Partner(Stan,Ellie))", "(Sees(Stan,Olivia) & Partner(Stan,Ellie))", "(Sees(Stan,Oliva) & PartnerElias(Stan,Ellie))", "((Stan(Stand) & Olivia(Stand) & Ellie(Ellie)) -> Seeking(Stand,Stand))", "(SeesOlivia(Stan) & PartnerOnEllie(StasKid(StasKid(StasKidsWith))", "(Stan(Stan) & SeesOlly(Stan) & PartnersWithEllie(Stan))", "-Stan(Stan) & SeesOlivia(Stan) & ParticipatesWithEllie(Stan))", "(StanSaying(Stan) & Olivia(Stan) & Ellie(Stan))", "(Sees(Stan,Olympus) & Partner(Stan,Ellie))", "(Sees(Stan) & Sees(Stan) & Sees(Stan) & Partnered(Stan) & Sees(Stan,Ellie))", "(Sees(Stephen,Oliver) & PartnersWith(Stephan,Ellie))"]}
{"id": "enwn_validation_334", "nl": "If you are seeing someone other than your partner, then you are cheating on your partner.", "fol": "", "prediction": ["all x.(Sheeping(x) -> FindOutPatcher(x))", "all x.((Seeking(x,partner) & OtherThan(x,partner)) -> Cheating(x))", "all x.((Seeing(x) & OtherThanPartner(x)) -> CheatingOnPartner(x))", "all x.((SeesDamnPartner(x) & -DamnPartner(x)) -> CheatingOnPartner(x))", "all x y.((Partner(x) & Partner(y) & Sees(x,y)) -> CheatingOn(x,y))", "all x y.((Friend(x) & Seeker(x,y) & -Partner(y)) -> CheatingOn(x,y))", "all x.(TreatingAsideFromPartner(x) -> CheatingOnPartner(x))", "all x.((SeesOffsidePartner(x) & CheatingOnPartner(x)) -> SeekingDifferentPartner(x))", "all x y.((SeesAndFrauds(x) & Partner(y)) -> CheatingOn(x,y))", "all x.((SightingPerson(x) & -Partner(x)) -> Cheating(x))", "all x.((Person(x) & OtherThanPartner(x)) -> CheatingOnPartner(x))", "all x.((SeatingDrop-Partner(x) & OtherThanPartner(x)) -> CheatingOnPartner(x))", "all x y.((Sinner(x) & Partner(y) & Sees(x,y)) -> CheatingOn(x,y))", "all x.((Seating(x) & OtherThanPartner(x)) -> CheatingOnPartner(x))", "all x y.((HearingPerson(x) & Partner(y) & OtherThanPartner(x,y)) -> Cheating(x,y))", "all x.(-SeeingPartner(x) -> CheatingOnPartner(x))"]}
{"id": "enwn_validation_335", "nl": "Stan is cheating on his partner.", "fol": "", "prediction": ["all x.((Stan(x) & Partners(x)) -> Cheating(x))", "all x.((Stan(x) & Partner(z)) -> CheatingOn(x,z))", "all x.(Stan(x) -> CheatingOnPartner(x))", "all x y.((Stan(x) & Partner(y)) -> Cheating(x,y))", "all x y.((Rookie(x) & Partner(y)) -> CheatingOn(x,y))", "-LikesToBeHasPartner(Stan)", "all x.((Stan(x) & Partner(x)) -> CheatingOn(x,1))", "all x.((Stan(x) & Partner(x)) -> Cheating(x,y))", "exists x.(Stan(x) & Cheating(x))", "all x.((Stan(x) & Partner(y)) -> CheatingOn(x,y))", "all x y.((Storage(x) & Partner(y)) -> Cheating(x,y))", "all x.(Between(x) -> Cheating(x))", "all x.((Stan(x) & Partner(y)) -> Cheating(x,y))", "all x y.((Stand(x) & Partner(y)) -> Cheating(x,y))", "(IsStanCheatingPartner(Stan)?)", "all x y z.((LowerPartner(x) & Stan(y) & Partner(z)) -> Cheating(y,z))"]}
{"id": "enwn_validation_336", "nl": "Stan should stop cheating and tell his partner.", "fol": "", "prediction": ["all x.(Stan(x) -> (Cheats(x) & TellsPartner(x)))", "all x.(HasStan(x) -> (ShinesCheating(x) & TellsHeart(x)))", "all x y.((Stan(x) & Partner(y)) -> StopCheatingAndTell(x,y))", "all x.(Stand(x) -> (Stunk) & Tell(x,y)))", "all x y.((Stan(x) & Partner(y)) -> (ShouldCheat(x,y) & Tells(x,y)))", "all x y.((Stan(x) & Partner(y)) -> (StopCopying(x) & Tell(x,y)))", "all x.((Stan(x) & QuitCheating(x)) -> TellPartner(x))", "all x.(Stephen(x) -> (StopCheating(x) & TellPartner(x)))", "Stan should stop cheating and tell.", "all x.((Stan(x) & StopCheating(x)) -> TellCoupledPartner(x))", "all x y.((Stan(x) & Partner(y)) -> (StopCheating(x,y) & Tell(x,y)))", "all x.((Stan(x) & -Cheats(x) & TellsPartner(x)) -> StangShakes(x))", "all x y.((Stan(x) & Partner(y)) -> (StopCheating(x,y) & Tell(x,y)))", "all x.((Stan(x) & StopCheating(x)) -> Tell(x,Stan,Partner))", "all x.((Stor(x) & StopCheating(x)) -> TellPartner(x))", "all x y.((Stan(x) & Partner(y)) -> (Cheats(x,y) & Tells(x,y)))"]}
{"id": "enwn_validation_337", "nl": "If you hurt someone over a rude remark then you lost your temper.", "fol": "", "prediction": ["all x y.((Person(x) & RupidRemark(y)) -> LostTemper(x))", "all x y.(HasThirst(x,y) -> (ProvokeRainfulRemark(x) & LostTemperature(x)))", "all x y.((Perfect(x) & IrreverentRemark(y) & Hurts(x,y)) -> LostTemper(x))", "all x y.((Person(x) & RustRemark(y) & Hurts(x,y)) -> LostTemper(x))", "all x y.((IsUsedOverRuginRemark(x) & Person(y)) -> LostTemper(x))", "all x.((IrresponsibleRemark(x) & Hurts(x,n) & RudeRemark(x)) -> LostTemperature(x))", "all x.((BrutalRemark(x) & Irresponsible(x)) -> LostTemperament(x))", "all x.((HurtsInRemark(x) & RuinfulRemark(x)) -> LostThirst(x))", "all x y.(((Remark(x) & Person(y) & HurtSameOver(x,y)) -> LostTemper(x))", "all x y z.((Person(x) & RudeRemark(y) & Person(z) & HarmedOver(x,y,z)) -> LostTemper(x))", "all x y.((Remark(x) & Person(y) & HurtsOver(x,y)) -> LostTemper(x))", "all x y.(((Torture(x) & Hurt(x) & RustfulRemark(x)) -> Lost(y))", "all x.((I hurt(x) & RustRemark(x)) -> LostTemper(x))", "all x.((Hat(x,relative) & RudeRemark(x)) -> LostTemper(x))", "all x.((Hurt(x) & Harm(x) & RidiculousRemark(x)) -> LostTemper(x))", "all x.((Hints(x) & RustfulRemark(x)) -> LostTemper(x))"]}
{"id": "enwn_validation_338", "nl": "Jake punched Jim when Jim said Jake's shirt was stupid.", "fol": "", "prediction": ["all x y.((Jake(x) & Jim(y) & JakeShirt(z) & Stupid(z)) -> Punched(x,y))", "all x y z.((Jake(x) & Jim(y) & Hemlock(z) & Jakes(y) & Scam(z)) -> PunchesJim(x,y,z))", "(Jim Said(Jim,StupidShirt) -> PunchedJim))", "Jake punched Jim when Jim said JakesShirtStunned.", "Jake punched Jim when Jim said that JakesShirt WasStupid(Jam) ).", "all x y.((Jake(x) & Jim(y) & JakeStuckShirt(x)) -> Punched(x,y))", "all x y z.((Jim(x) & Jake(y) & Jim(z)) -> (Punched(y,z) & JimDaredStupid(y,z)))", "all x y.((Jake(x) & Jim(y) & JakeShirt(z)) -> Punched(x,y,z))", "all x y.(((Jake(x) & Jim(y)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & Spunk(y)) -> PunchedKim(x,y))", "all x y z.(((Jake(x) & Jim(y) & Tie(z) & JakesShirt(z)) -> PushedBy(x,y))", "all x y.((Jake(x) & Jim(y) & Jim(z) & JakeShirt(z)) -> Punched(x,y,z))", "it was because Jim said Jake's shirt was stupid (Jake punched Jim))", "all x y.((Hunger(x) & Jim(y) & JakeShirt(y)) -> Punched(x,y))", "all x y.((Jacket(x) & Jim(y) & JimSaid(y,x)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & JakeShirt(y)) -> Punched(x,y))"]}
{"id": "enwn_validation_339", "nl": "Saying something is stupid is considered a rude remark.", "fol": "", "prediction": ["all x.(RoulousRemark(x) -> (Stupid(x) & SayingIs(x)))", "all x.(SaysIsStupid(x) -> Remark(x))", "all x.(SaysStill(x) -> RustRemark(x))", "all x.(Say(x,y) -> StinkyRemark(y))", "all x.((SaysStupid(x) & Rumor(x)) -> RuinRemark(x))", "all x.((SaysStupid(x) & Remark(x)) -> Rust(x))", "all x.(SaysStill(x) -> RupidRemark(x))", "all x.(SaidStupid(x) -> RustRemark(x))", "all x.(Says(x) -> Stuck(x))", "all x.((SaysStupid(x) & Remark(x)) -> Rupid(x))", "all x.(StupidRemark(x) -> RustRemark(x))", "all x.(SaysStupid(x) -> RustRemark(x))", "all x.(SaysStupid(x) -> RupidRemark(x))", "all x.((SaysStupid(x) & RemarksRaw(x)) -> Rust(x))", "all x.(StaySobber(x) -> RustRemark(x))", "all x.((SaysStupid(x) & Remark(x)) -> Rust(x))"]}
{"id": "enwn_validation_340", "nl": "You should control your emotions and not hurt someone because you lost your temper.", "fol": "", "prediction": ["all x.((Father(x) & ControlsEmotions(x)) -> (-HasTumor(x) & -HasTemper(x)))", "all x.((Hearme(x) & ControlEmotions(x) & -HasTemper(x)) -> -HasTemper(x))", "all x y.((Father(x) & Person(y) & LostTemper(x,y)) -> ControlsEmotions(x,y))", "all x.((Emotions(x) & -HasMurder(x)) -> (Control(x) & -HasTemperature(x)))", "all x.((ControlsEmotions(x) & -IllegalTemper(x)) -> (-IllegalTemper(x) & ProtectsTestimony(x)))", "all x.((Emotions(x) & -Illness(x) & LostTemper(x)) -> Controls(x))", "all x.((IsEmotionControl? & -IllegalTemper(x)) -> Control(x,emotions,emotions))", "all x y z.((Emotions(x) & Emotion(y) & Person(z) & LostTemper(x,y)) -> -Interest(x,z))", "all x.(ContainEmotions(x) -> (BeforePeterWhoLestThirst(x) & -LetTumorImprove(x)))", "all x.(((ControlsEmotions(x) & -Threats(x) & LostTemperature(x)) -> -Injustices(x))", "all x.((WearsToy(x) & ControlsEmotions(x)) -> -HasParentTouch(x))", "all x.(ControlsEmotions(x) -> -InjuresPerson(x))", "all x.((ControlsEmotions(x) & -Harms(x)) -> (LostTemperature(x) | LostTemperature(x)))", "all x.((Emotions(x) & NotTears(x,HasTemper)) -> Controls(x))", "all x y.((Emotion(x) & Person(y) & LostTemper(x,y)) -> Control(x,y))", "all x y.((Emotions(x) & Emotions(y)) -> (Control(x,y) & -Irresponsible(x,y)))"]}
{"id": "enwn_validation_341", "nl": "Jake punched Jim when Jim made a rude remark about Jake's shirt.", "fol": "", "prediction": ["all x y.((Jake(x) & Jim(y) & RustRemark(y,x)) -> PunchedJim(x))", "all x y z.((Jake(x) & Jim(y) & Remark(z) & Remark(x,z)) -> PunchedJim(x))", "all x y.((Jake(x) & Jim(y) & MadeRoutineRemarkBetween(x,y)) -> Punched(x,y))", "all x y z.((Jake(x) & Jim(y) & MadeRousslyRemark(y,z) & JakesShirt(z)) -> Punched(x,y))", "all x y.((James(x) & Jim(y) & MadeRuleRemarkAbout(y,James)) -> Punched(x))", "Jake punched Jim when Jim made ruderemarks.", "all x y.((Jake(x) & Jim(y) & RalliestRemark(y,x)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y)) -> Punched(x,y,y))", "all x y.((Jim(x) & Steve(y) & JimRuleRemark(x,y)) -> PunchedJim(x,y))", "all x y z.((Jake(x) & Jim(y) & Name(z) & MadeRareRemarkAbout(y,z)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & MadeRuleRemark(y,x)) -> Punched(x,y))", "all x y z.((Jake(x) & Jim(y) & Shirt(z) & RustRemark(z)) -> PunchedJim(x,y,z))", "all x y.((Jake(x) & Jim(y) & RustRemark(y)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & MadeRuleRemarkAboutShirt(y,x)) -> PunchedJim(x))", "all x y.((Jake(x) & Jim(y) & MadeRoseRemark(y,x)) -> Punched(x,y))", "all x y z.((Jake(x) & Jim(y) & Remark(z) & MadeAbout(z,zip)) -> PunchedJim(x,y))"]}
{"id": "enwn_validation_342", "nl": "Jake lost his temper and hurt Jim over a rude remark.", "fol": "", "prediction": ["all x y.((Jake(x) & Jim(y)) -> (LoseTurn(x) & Hurt(x,y)))", "all x y z.((Jake(x) & Jim(y) & RuinfulRemark(z)) -> (LostTemperature(x,z) & Harsh(x,y,z)))", "(-KakeLostTemperAndIrresponse(Jake,Mark) & JimLikedRainRemark(Jim,Jim))", "all x y.((Jake(x) & Jim(y)) -> (LostTemperature(x) & Hurt(x,y)))", "(LostTemperature(Jake) & hurts(Jim))", "(LaysThirst(Jake) & Hurts(Jim,RuleRemark))", "(-StoppedTemptation(Jake) & IrresponsibleRemark(Jim))", "all x.((Jake(x) & LostTemperature(x) & HurtAtRemark(x,Jim)) -> (Together(x,jim) & RustfulRemark(j,x)))", "all x.((Jake(x) & LostTemper(x) & Injured(x,Jim) & RusticRemark(x)) -> NoTension(x))", "(LoseTemper(Jake) & Hurts(Jim))", "all x y.((Jake(x) & Jim(y)) -> (LostTemperature(x,y) & WentTom(x,y)))", "all x y.((Jake(x) & Jim(y)) -> (LostTemperature(x,y) & IrresponsibleRemark(x,y)))", "all x y.((Jake(x) & Jim(y)) -> (LosesTemper(x,y) & HarmsOverRufRemark(x,y)))", "all x.((Jake(x) & LostTension(x) & HurtsJim(x)) -> RustRemark(x))", "all x y.((Jake(x) & Jim(y)) -> (LostTemperature(x) & Hurts(x,y)))", "(LosesTemper(Jake) & HurtsJimOverRuleRemark(Jake))"]}
{"id": "enwn_validation_343", "nl": "Jake should have controlled his emotions and not hurt Jim.", "fol": "", "prediction": ["all x.((Jake(x) & ManagedEmotions(x) & -HintsJim(x)) -> ShouldHaveHasEmotions(x,Jim))", "all x.(Jake(x) & ShouldControlEmotions(x) & -Hurred(x,Jim))", "all x.((Jake(x) & -Illness(x,Kim)) -> ControlledEmotionsAndNeverHasHintEmotions(x,Yim))", "all x.((Jake(x) & NotJam(x)) -> (ControlledEmotions(x) & -HasKill(x)))", "all x.((Jake(x) & ControlledEmotions(x) & -HarmEDIM(x)) -> (HeartJim(x) & ControlEmotions(x)))", "all x.(Jake(x) -> (ControlledEmotions(x) & -HasHiredJim(x)))", "ALL x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -HasHint(x,y)))", "all x.((Jake(x) & Emotion(x)) -> (Controlled(x,Jim) & -Hidden(x,Jim)))", "all x.((Jake(x) & ControledEmotions(x) & -HurtsJim(x)) -> ShouldHave(x,Jam))", "all x.((Jake(x) & -IrregularEmotions(x,Jim)) -> Controlled(x,Jim))", "all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x) & -HasIronment(x,y)))", "all x.((Jake(x) & ControlledEmotion(x,Jim)) -> -HasTooHasTooHunger(x,Jim))", "all x.((Jake(x) & ControlledEmotions(x) & -HadTooTooTooTooToo(x)) -> ShouldHaveControlledEmotions(x))", "all x.((Jake(x) & -Ill(jim)) -> ControlledEmotions(x,Jim))", "all x.((Jake(x) & -HasCausedEmotions(x)) -> ShelvedAndNeverShuldnedJim(x))", "all x.((Jake(x) & ControlledEmotions(x) & -HasIllness(x)) -> -HasHiredJim(x))"]}
{"id": "enwn_validation_344", "nl": "Henry moved his golf ball out of the rough.", "fol": "", "prediction": ["Henry moved golfball(Heyne) & OutOfRough(Leaf)", "Henry moved golf ball out of rough.", "Henry moved his golfball out of rough.", "all x.(Hoy Henry(x) & PutsGolfBallOutOfRough(x))", "Henry pushed golf ball out of rough.", "Henry moved golf ball out of rough.", "Henry moved golfball(hereafter) outofRough(heinz)", "(Henry) & MovedOutOfRough(Henry)", "(MovedOutOfRoaf(Henry) -> GolfBall(Henry))", "Henry moved golf ball out of rough.", "all x y.((Henry(x) & GolfBall(y)) -> MovedOutOfRough(x,y))", "all x.((Henry(x) & GolfBall(x)) -> MovedOutOfRough(x))", "Henry moved golf ball out of rough.", "(MovedHenry(Henry) & OutOfRough(Henry))", "-TouchingGolfBallDress(Henry)", "all x y.((Honnin(x) & Ball(y)) -> MovedOut(x,y))"]}
{"id": "enwn_validation_345", "nl": "Henry didn't take a penalty stroke or tell anyone when he was moving his ball.", "fol": "", "prediction": ["(-(TakeShot(Henry) | TellAnyone(Henry)))", "all x y.((Environment(x) & Henry(y)) -> (-CapturesPenaltySstroke(y) & -StopsMovingBall(y) | TellsNoone(y)))", "all x.(Henry(x) -> (-TakesPenaltySstroke(x) & -TellsOnMinimum(x)))", "(-TakesPenaltyStoke(Henry) & -SwatsConvergence(Henry))", "all x.((Henry(x) & -PenaltyShot(x)) -> (-Swipe(x,PenaltyStrike) & -Tell(x,PenaltyStrike)))", "all x.(Henry(x) -> (-PenaltyStroke(x) & -SpokenClosure(x) & -SignifiedBall(x)))", "all x.((Henry(x) & -SweetPenaltyShape(x)) -> -SaidWhenMovingBall(x))", "(-PenaltyShot(Henry) & -NeedsToMake(Henry,Ball))", "all x.((Henry(x) & -(ForeignPenaltyStroke(x) | TellPerson(x))) -> -MovingBall(x))", "all x y.((Henry(x) & Ball(y)) -> (-PenaltyStoke(x,y) & -Sells(x,y)))", "all x.(Henry(x) -> (-PenaltyStroke(x) | TellsEveryone(x)))", "none of Henry's other acts (never tookPenaltyStroke(Henry) & -SaidNoOne(Henry))", "all x.(Humphrey(x) -> (-TakesPenaltyStroke(x) | TellsNoone(x)))", "Henry didn't take a PenaltyStoke(Henry) & -SaidToOtherWhenMovingBall(Henry,Henry)", "(-(TakesPenaltyStroke(Henry) & -InsertsPenalty(Henry)) | WhoDidYouBetween(Henry,Henry)))", "all x y.((Henry(x) & Ball(y)) -> (-PenaltyS stroke(x) & -SaysFeeling(x)))"]}
{"id": "enwn_validation_346", "nl": "In golf, if you move your ball without telling anyone or taking a penalty stroke, you cheat.", "fol": "", "prediction": ["all x.((Golf(x) & MovesBall(x) & -TellsNever(x) & -TakesPenaltyStunt(x)) -> Cheats(x))", "all x y.((Golf(x) & Ball(y) & MovesWithoutSeverityOrPenaltyStroke(x,y)) -> Cheat(x))", "all x.((Golf(x) & MovesBallWithoutAnswer(x) & TakesPenaltyStroke(x)) -> Cheats(x))", "all x.((Golf(x) & MoveBall(x) & -HindyouInPrimeShot(x) & -TakePenaltyShot(x)) -> Cheats(x))", "all x.((Golf(x) & Move(x,y) & None(y) & -SendsShake(y) & TakesPenaltyStroke(x)) -> Cheats(x))", "all x.((Golf(x) & MoveBall(x,y) & -SaysToOfOrPenaltyStroke(y)) -> Cheats(x))", "all x y.((Golf(x) & Player(y) & MovesBall(x) & -(TellsAnyone(x) | TakesPenaltyShot(x))) -> Cheats(x))", "all x.((GolfMovement(x) & (-Conveys(x) | TakesPenaltyStrokes(x))) -> Cheats(x))", "all x.((Golf(x) & MovesBall(x) & -TellsPenaltyStroke(x)) -> Cheats(x))", "all x.((Golf(x) & MovesBallWithoutCall(x) & -PenaltySprint(x)) -> Cheats(x))", "all x.((Golf(x) & Move(x,y) & NonSigner(y) & NoPenaltyStagger(x)) -> Cheats(x))", "all x.((Golf(x) & MovesBallWithoutGuitar(x) & WithoutTellToOfPenaltyStroke(x)) -> Cheats(x))", "all x y.((Golf(x) & MoveBall(y) & -TellAnyoneOrTakePenaltySstroke(y)) -> Cheats(x))", "all x.((Golf(x) & MovesBallWithoutSigningOrPenaltyStroke(x)) -> Cheats(x))", "all x y.((Golf(x) & Ball(y) & MovesWithout(x,y) & -StellsToOther(y) & TakesPenaltySstroke(x,y)) -> Cheats(x))", "all x.((Golf(x) & MovesBall(x) & -(Instructs(x) | TakesPenaltyStoke(x)))) -> Cheats(x))"]}
{"id": "enwn_validation_347", "nl": "Cheating in a game is disrespectful to the other players.", "fol": "", "prediction": ["all x y.((Cheating(x) & Game(y)) -> DisrespectfulToOtherPlayers(x,y))", "all x y.((Player(x) & Cheating(x,y)) -> Disrespectful(y))", "all x.((Game(x) & Cheating(x)) -> DisrespectfulToOthers(x))", "all x y.((Game(x) & Player(y)) -> DisrespectfulTo(x,y))", "all x.((Game(x) & Cheating(x)) -> DisrespectfulToOthers(x))", "all x y.((Game(x) & Player(y)) -> DisrespectfulTo(x,y))", "all x y.((Game(x) & Player(y) & CheatsIn(x,y)) -> DisrespectfulToOthers(y))", "all x y.((Game(x) & Player(y)) -> (Disrespectful(x,y) & CheatingIn(x,y)))", "all x y.((Game(x) & Player(y)) -> DisrespectfulTo(y,x))", "all x y z.((Game(x) & Player(y) & Player(z)) -> DisrespectfulTo(x,y,z))", "all x y.((Game(x) & Player(y) & Cheating(x,y)) -> DisrespectfulTo(x,y))", "all x y.((WaitingInGame(x) & PlayingInGame(y)) -> DisrespectfulToOthers(x,y))", "all x y.((CheatingInGame(x) & Game(y)) -> DisrespectfulToOtherPlayers(x,y))", "all x y.((Game(x) & Player(y)) -> DisrespectfulTo(x,y))", "all x.((Game(x) & CheatingIn(x,SecondsGame)) -> DisrespectfulToOthersPlayers(x))", "all x y.((Game(x) & Player(y)) -> Rigorous(x,y))"]}
{"id": "enwn_validation_348", "nl": "Henry moved his golf ball out of the rough without telling anyone or taking a penalty stroke.", "fol": "", "prediction": ["all x y.(((Henry(x) & GolfBall(y)) -> MovedOutOfRough(x,y))", "all x.((Henry(x) & GolfBall(y)) -> (HasGroundBall(x,y) & OutOfRough(x) & -CallNoone(x) & -TakePenaltyStoke(x)))", "all x.(Henri Henry(x) & MovedGolfBallOut(x,Rough) & -(HisBarrier(y) | TakesPenaltyStroke(x))))", "all x y z.((Henry(x) & GolfBall(y) & Rough(z)) -> (MovedOutOf(x,y,z) & -Learnt(x,person) & -TakesPenaltyShot(x)))", "all x y z.((Horen(x) & GolfBall(y) & Rough(z)) -> (MoveDirt(x,y) & -Tell(x,z)); TakePenalShot(x,x)))", "Henry moved golf ball out of rough -withoutTellingOfPenaltySstroke(Henry,Henry))", "Henry moved golfball out of rough without telling anyone or taking penalty stroke.", "(MovedGolfBallOut(Harry) -> (-TellsNivam(Henry) | TakesPenaltyStroke(Henry))))", "all x.(HenryMovesGolfBallOutOfRough(x) -> (NoSwapShot(x) & -NoTell(x) & NoPenaltyStace(x)))", "all x y z.((Herman(x) & GolfBall(y) & Rough(z)) -> MovedOutOf(x,y,z))", "(Moves(HenryRoad) -(TellsAnyone(Henry) | TakesPenaltySstroke(Henry))))", "all x.((Henry(x) & GolfBall(x)) -> MovedOutOfRough(x))", "all x y z.((Henry(x) & GolfBall(y) & Rough(z)) -> (MovedOut(x,y,z) & NoCounse(x) & NoPenaltyStroke(x)))", "(MovesOutGolfBallWithoutGrass(Henry,NoTellsAnyone(Henry) | TakesPenaltyStone(Henry,PenaltyThreat)))", "all x.((Henry(x) & Ball(y)) -> MovedOutOfRough(x,y))", "all x.(PenalShot(x) -> (HenryMoved(x,golfball) & -NearedGirl(x)))"]}
{"id": "enwn_validation_349", "nl": "Henry cheated at golf.", "fol": "", "prediction": ["that Henry CheatedAtGolf(John)", "Henry CheatedAtGolf( Henry)", "(cheatedAtGolf(Henry))", "(CheatedAtGolf(Henry)", "(KeatedAtGolf(Henry) | CheatedAtGolf(Henry))", "Henry CheatedAtGolf(Henry)", "(CheatedAtGolf(Henry,Golf))", "(Henry(Henry) & CheatedAtGolf(Henry))", "((Henry(Henry) & Golf(Henry)) -> CheatedAt(Henry))", "Henry CheatedAtGolf( Henry,08))", "Henry CheatedAt( Henry,Golf)", "all x.(Henry(x) -> CheatedAtGolf(x))", "(Cheats(Harry,Golf) & Golf(Henry))", "Henry CheatedAtGolf(x)", "Henry CheatedAtGolf(Henry)", "all x.(Henry(x) -> CheatedAtGolf(x))"]}
{"id": "enwn_validation_350", "nl": "Henry disrespected the other golf players.", "fol": "", "prediction": ["Donald Henry disrespected golf players.", "all x y.((Henry(x) & GolfPlayer(y)) -> Disrespects(x,y))", "Henry scoldedtheothers golf players.", "-disrespectsTheOtherGolfPlayers(Henry,y))", "Henry disrespected golfers.", "all x.(Henry(x) -> DisrespectsOtherGolfPlayers(x))", "Henry disrespected golfers.", "\"Henry(Henry) & MalignedGroundPlayers(Henry)\"", "Henry disrespectsAllOtherPlayers(Henry, golf)", "(disrespectfully(Henry) | DisrespectsAction(Henry))", "- -Henry.DisrespectfulToGolfPlayers(Henry)", "all x.((Henry(x) & GolfPlayer(x)) -> Disrespected(x,y))", "Henry aynbedded(heart,p) & Disrespected(hen,y) & GolfPlayers(p))", "(Disrespectful(Henry,GolfPlayers))", "Henry disrespected golfers.", "Henry disrespectedGolfPlayers(Henry,Disrespect)"]}
{"id": "enwn_validation_351", "nl": "Oswald realized his stocks would soon be worthless, putting him in debt.", "fol": "", "prediction": ["Oswald realized his stocks would soon beValuable(o) & Indebted(o))", "Oswald realized that his stocks would soon beworthless, putting him in debt.", "Oswald realized that his stocks would soon beValuable(Oswald,Debt)", "Oswald realized his stocks would soonbewissful and entrusted him with debt.", "all x y.((Oswald(x) & Stocks(y)) -> (Worthless(x,y) & InDebt(x,y)))", "Oswald realized his stocks would soon bevalueless, putting him in debt.", "all x y z.((Oswald(x) & Stocks(y) & Debt(z)) -> (Rezident(x,y) & WorstStocks(x,y) & WorstStockDebt(x,z)))", "Oswald realized his stocks would soon beVastless(Oswald)", "Oswald realized his stocks would soon beworthless, putting him in debt.", "Oswald realized the stock value of his stocks soon would be worthless, putting him in debt.", "((Oswald(Oswald) & StocksWorthless(Oswald)) -> DebtPosition(Oswald))", "All x.((Oswald(x) & Stocks(y)) -> (RightlyWillless(x) & InDebt(x)))", "Oswald adduced that his stockings would soonbeWorthless & InDebt(Oswald)", "Oswald realized his stocks would soon be worthless, putting him in debt.", "Oswald realized his stocks would soonbeValuable(Oswald,Debt)", "Oswald realized his stocks would soonBeValuable(Oswald,Discharge)"]}
{"id": "enwn_validation_352", "nl": "To avoid debt, Oswald sold his stocks to other people.", "fol": "", "prediction": ["all x.((Oswald(x) & AvaydeDebt(x)) -> SoldStocks(x))", "all x y.((Boswald(x) & Person(y)) -> SoldTo(x,y))", "all x y.((Oswald(x) & Stock(y)) -> SoldToOtherPeople(x,y))", "all x y.((Stocks(x) & Person(y)) -> OswaldSoldTo(x,y))", "all x.((Oswald(x) & People(y)) -> SoldOrDebt (sold(x,y)))", "all x.((Oswald(x) & -Debt(x)) -> SoldTootherPeople(x))", "all x.((Warning(x) & ElsewhereDebt(x)) -> SoldTo(x,y,z))", "all x y.((Oswald(x) & Stock(y)) -> (SoldTo(x,y) & AvoidsDebt(x,y)))", "(SoldToStocks(Oswald,Officials,O) & To AvoidDebt(o))", "To avoid Debt, Oswald SoldStocksToOthers(Oswald,People)", "all x.((Oswald(x) & SellsStocksToOtherPeople(x)) -> AvoidsDebt(x))", "all x.((Oswald(x) & Stocks(x)) -> SoldToOthers(x))", "all x y z.((Oswald(x) & Stock(y) & Person(z)) -> SoldTo(x,y,z))", "Oswald sold stocks to avoid debt.", "Oswald sold stocks to avoid debt - and that's what Oswald aims to accomplish.", "all x y.((Oswald(x) & Person(y)) -> AvoidsDebt(x,y))"]}
{"id": "enwn_validation_353", "nl": "It is deceitful to sell something when it has no value.", "fol": "", "prediction": ["all x y.((Sells(x,y) & -Value(y)) -> Deceitful(x))", "all x.((Sells(x) & -Value(x)) -> Deceitful(x))", "all x y.((Sells(x,y) & NoValue(x)) -> Deceitful(x))", "(salessomething(x) & -Value(x))", "all x y.((Sell(x,y) & ContainsValue(x,y)) -> Deceitful(x))", "all x y.(Sells(x,y) & -Value(x))", "all x y.((Price(x) & Product(y) & NoValue(y)) -> DelusionfulToSell(x,y))", "all x y.((Sells(x,y) & -Wind(y)) -> Deceitful(x,y))", "all x y.((Sell(x) & Selling(y) & -Value(x,y)) -> Deceitful(x,y))", "exists x.(Sells(x,y) & ValueDiscount(x,y))", "exists x.(DeceitfulToSell(x) & Everything(x) & NoValue(x))", "exists x y.(Sell(x,y) & -Value(y))", "all x y.((Sell(x,y) & -Value(y)) -> Deceitful(x))", "all x y.((DeceitfulToSell(x) & Buy(y)) -> -Value(y))", "all x y.((Sells(x,y) & -Value(y)) -> Delusionful(x))", "all x.((Sell(x) & -Value(x)) -> Deceitful(x))"]}
{"id": "enwn_validation_354", "nl": "You should not do deceitful things.", "fol": "", "prediction": ["all x.((DoesDeceitfulThings(x)) -> -Dose(x))", "all x.(DoesDeceitfulThing(x) -> -Does(x))", "all x.(DoDeceitfulThings(x) -> -DoDeceitfulThings(x))", "all x.(DeceitfulThings(x) -> -Do(x,y))", "all x.(DoesDeceitfulThing(x) -> -DoesDeceitfulThings(x))", "all x.((Dose(x) & -DeceitfulThings(x)) -> -DosSpeaking(x))", "all x.((DoDeceitfulThings(x)) -> -Do(x))", "all x.(DeceitfulThings(x) -> -DoMeToo(x))", "all x.((DoDeceitfulThings(x)) -> -HasDeceitfulThings(x))", "all x.((Treatment(x) & -Deceitful(x)) -> -Treatment(x))", "all x.(DoesDeceitfulThings(x) -> -DoesIt(x))", "all x.(Don-DoDeceitfulThings(x) -> -DoDeceitfulThings(x))", "all x.(DoNotDeceitfulThings(x) -> -DoShaming(x))", "all x.(DeceitfulThing(x) -> -Do(x,y))", "all x.(DoesDeceitfulThings(x) -> -DoesDeceitfulThings(x))", "all x.((BuysDeceitfulThings(x)) -> -(DotsDeceitfulThings(x) & DoseDeceitfulThings(x))))"]}
{"id": "enwn_validation_355", "nl": "Oswald sold stocks that he knew had no value to other people.", "fol": "", "prediction": ["Oswald sold stocks to people he knew had no value to them.", "Oswald sold stocks he knew drew no value to people.", "Oswald sold stocks he knew had no value to anyone.", "Oswald sold stocks he had no value to people.", "all x y.((Oswald(x) & Stock(y)) -> (Sold(x,y) & UnknownValueThanPeople(y)))", "all x y.((Stock(x) & Person(y)) -> Sells(x,y))", "Oswald sold stocks he knew had noValueToOtherPeople(o) -> SellsStocks(o))", "Oswald sold stocks that had no value to people.", "Oswald sold stocks he knew had no value to otherers.", "all x y.((Oswald(x) & Stock(y)) -> (SoldTo(x,y) & knewNoValueToOthers(x)))", "All x y z.((Oswald(x) & Stock(y) & Person(z)) -> (Sold(x,y) & -Value(y) & SoldTo(x,z)))", "Oswald sold stocks he could not value to other people.", "Oswald sold stocks that he knew had no value to other people.", "all x.((Stock(x) & -ValueToOthers(x)) -> SoldToOswald(x))", "all x.(Sells(x,Shares) -> KnowsBySelling(x))", "all x y.((Oswald(x) & Stock(y)) -> Sold(x,y))"]}
{"id": "enwn_validation_356", "nl": "If you know something has no value, you should not sell that thing.", "fol": "", "prediction": ["all x.((IsNoValue(x) & Knows(x,It)) -> -Sell(x))", "all x.((NoValue(x) & Knows(x)) -> -SellAt(x,y))", "all x.((Knows(x) & -Value(x)) -> -Sell(x))", "all x.((KnowsDaily(x) & HasNoValue(x)) -> -ShouldSellAdjective(x))", "all x.((Knows(x) & HasNoValue(x)) -> -SellWhatYouPresent(x))", "all x.((KnowsNoValue(x) & DoesNotSell(x,It?)) -> -Sell(x,It))", "all x.(NoValue(x) -> -Sell(x))", "all x.((KnowsThatIsNeitherValue(x) & -SellsIt(x)) -> -Sell(x))", "all x.((KnowsNoValue(x) & -Sell(x)) -> -Sell(x))", "all x.((KnowsNoValue(x) & -Sells(x)) -> -Sell(x))", "all x.((Information(x) & -Value(x)) -> -Sell(x))", "all x.((Knows(x) & NoValue(x)) -> -Sells(x))", "all x.((KnowsThing(x) & NoValue(x)) -> ShouldntSell(x))", "all x.((Knows(x,y) & NoValue(y)) -> -SellSameAndCloseTo(x,y))", "all x.((Knows(x) & ThereIsNoValue(x)) -> -Sell(x))", "all x.((Teacher(x) & NoValue(x)) -> -SellThisThing(x))"]}
{"id": "enwn_validation_357", "nl": "Oswald should not have sold those stocks.", "fol": "", "prediction": ["Oswald should have sold these stocks.", "Oswald will not Have SoldStocks(Oswald)", "Oswald must have -SoldStocks(Oswald,2011))", "Oswald should not have sold those stocks.", "Oswald should not have sold these stocks.", "Oswald should have sold these stocks.", "Oswald should not have sold those stocks.", "Oswald should not have sold those stocks.", "Oswald should not have sold these stocks.", "Oswald should not have sold those stocks.", "Oswald should have sold those stocks.", "Oswald should not have sold these stocks.", "Oswald should not have sold these stocks.", "Oswald should not have sold these stocks.", "Oswald - SoldTheseStocks.", "Oswald should not have sold these stocks."]}
{"id": "enwn_validation_358", "nl": "Jeff took candy from a child in the park.", "fol": "", "prediction": ["all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesSnackFrom(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Park(z) & At(x,y)) -> TakesCandyFrom(x,y,z))", "all x y.((Jensen(x) & ChildInPark(y)) -> UsedToTakeCandyFrom(x,y))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> GotCandyFrom(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesCandyFrom(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> FoughtCandyFrom(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesCandyFrom(x,y,z))", "all x y.((Jeff(x) & Child(y) & Park(z)) -> TakesCoffee(x,y,z))", "all x y.((Judy(x) & Child(y)) -> FoughtCandy(x,y))", "all x y.((Jeff(x) & Child(y)) -> TakesCandyFrom(x,y))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesToy(x,y,z))", "all x y z.((Jeff) & Child(y) & Park(z)) -> (Nature(x,y) & Takes(x,y)))", "(FromChild(Jeff) & InPark(Jeff))", "all x y.((Jennifer(x) & Child(y) & InPark(x,y)) -> TakesCandyFrom(x,y))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> (Curiosity(x,y,z) | Child(x,y)))", "all x y.((Jeff(x) & Child(y)) -> Taken(x,y))"]}
{"id": "enwn_validation_359", "nl": "Children are often considered helpless due to their age.", "fol": "", "prediction": ["all x.((Child(x) & Age(x)) -> Helpless(x))", "all x.(AndChild(x) -> Helpless(x))", "all x.(Child(x) -> HelplessHasAge(x))", "all x.((Child(x) & Age(x)) -> Helpless(x))", "all x.(Cookie(x) -> HelplessDueToAge(x))", "all x.((Child(x) & Age(x)) -> Helpless(x))", "all x.((Child(x) & Age(x)) -> Helpless(x))", "all x.((Child(x) & Age(x)) -> Helpless(x))", "all x.((Child(x) & Age(x)) -> Helpless(x))", "all x.((Child(x) & Age(x)) -> Helpless(x))", "all x.((Child(x) & Age(x)) -> Helpless(x))", "all x.(Child(x) & Age(x)) -> Helpless(x))", "all x.((Child(x) & Age(x)) -> Helpless(x))", "all x.((Child(x) & Age(x)) -> Helpless(x))", "all x.((Child(x) & Age(x)) -> Helpless(x))", "all x.(Healing(x) -> Children(x))"]}
{"id": "enwn_validation_360", "nl": "Stealing from the helpless is taking advantage of them.", "fol": "", "prediction": ["all x.(StealingFromHelpless(x) -> TakesAvailmentOfHelpless(x))", "all x.(StolenFromHelpless(x) -> TakesAllocationOfHelpless(x))", "all x.(StealingFromHelpless(x) -> TakesAccountOfHelpless(x))", "all x y.((StealFromHelpless(x) & Helpless(y)) -> TakesAvantageOf(x,y))", "all x y.((Helpless(x) & Helpless(y)) -> TakeAway(x,y))", "all x y.((Slealing(x) & Helpless(y)) -> TakesAccountOf(x,y))", "all x y.((Helpless(x) & Helpless(y)) -> TakesAvorenceOf(x,y))", "all x y.((Stealing(x) & Helpless(y)) -> TakesAdvantageOf(x,y))", "all x.(StealingFromHelpless(x) -> TakesAvoringOfHelpless(x))", "all x y.((Helpless(x) & Stealing(x,y)) -> TakesAvailmentOf(x,y))", "all x.(StealFromHelpless(x) -> TakesApartFromHelpless(x))", "all x y.((StealingFromHelpless(x) & Helpless(y)) -> TakesAdvantageOf(x,y))", "all x.(StealingFromHelpless(x) -> TakesAvailmentOfThey(x))", "all x.(StealFromHelpless(x) -> TakesAccountOfHelpless(x))", "all x.(StealingFromHelpless(x) -> TakesAvorledgeOfHelpless(x))", "all x.(StealingFromHelpless(x) -> TakesAccountOfHelpless(x))"]}
{"id": "enwn_validation_361", "nl": "Taking advantage of someone is considered being cruel.", "fol": "", "prediction": ["all x.(TakesAdvantageOf(x) -> Cruel(x))", "all x.(TakesAdvantageOfPerformer(x) -> Cruel(x))", "all x.((TakeAdvantageOf(x) & Killer(x)) -> Ripe(x))", "all x.(TakesAmpleOf(x,y) -> Cruel(x,y))", "all x.(TakesVictoryOfPolarity(x) -> Cruel(x))", "all x.((TakesAdvantageOf(x,y) & Person(y)) -> Cruel(x))", "all x.(NegativeTaxation(x) -> Cruel(x))", "all x.(TakesAdvantageOfNominated(x) -> Cruel(x))", "all x.(TakesAdvantageOfPerson(x) -> Cruel(x))", "all x.(TakesAdequacyOfPerson(x) -> Cruel(x))", "all x.(TakesAdvantageOf(x,n) -> Cruel(x))", "all x.(TakesAdvantageOf(x) -> Cruel(x))", "all x.(TakesAdvantageOfPerson(x) -> Cruel(x))", "all x.((TakesAdvantageOf(x,y) & Person(x)) -> Cruel(x))", "all x.(TakesAdvantageOfPerson(x) -> Cruel(x))", "all x.(TakesAccountOfPerson(x) -> Cruel(x))"]}
{"id": "enwn_validation_362", "nl": "Jeff took candy from a helpless child in the park.", "fol": "", "prediction": ["all x y.((Jeff(x) & Child(y)) -> TakesConfection(x,y))", "all x y.((Jeff(x) & Child(y) & Helpless(y)) -> Takes(x,y))", "all x y z.((Jay(x) & Child(y) & Park(z)) -> TakesCandyFrom(x,y,z))", "(SeedlessChild(Jeff) & InPark(Jeff))", "all x y.((Jeff(x) & HelplessChild(y) & InPark(x)) -> TakesCardiopeFrom(x,y))", "all x.(Jeff(x) -> took(x,y))", "all x y.((Jeff(x) & Child(y)) -> TakesCandyInPark(x,y))", "all x.(Jeff(x) -> (TakesCandy(x) & HelplessChild(x)))", "all x y.((Jeff(x) & Child(y)) -> (TakenFrom(x,y) & Helpless(y)))", "all x y.((Jennifer(x) & HelplessChild(y)) -> TakesCards(x,y))", "all x.((Jeff) & HelplessChild(JFK)) -> TakesCandy(Jeff))", "all x y z.((Jeff(x) & Child(y) & Helpless(z)) -> TakesCardio (x,y) & InPark(y,z)))", "all x z.((Jeff(x) & Child(y) & Park(z)) -> TakenFrom(x,y,z))", "all x y.((Jeff(x) & Child(y)) -> SeenInPark(x,y))", "all x y.((Jeff(x) & HelplessChild(y) & Park(he)) -> TakesCardiol(x,y))", "all x y z.((Jeff) & Child(z) & Helpless(z) & Park(z)) -> TakesCandy(x,z))"]}
{"id": "enwn_validation_363", "nl": "Stealing from the helpless is considered being cruel.", "fol": "", "prediction": ["all x.(StealingFromHelpless(x) -> Cruel(x))", "all x.(StealFromHelpless(x) -> Cruel(x))", "all x.(StealFromHelpless(x) -> Cruel(x))", "all x.(Steal(x) & Helpless(x))", "all x.(StealingFromHelpless(x) -> Cruel(x))", "all x.(StealingFromHelpless(x) -> Cruel(x))", "all x.(StealingFromtheHelpless(x) -> Cruel(x))", "all x.(StealingFromHelpless(x) -> Cruse(x))", "all x.(Strial(x) -> Cruel(x))", "all x.(StealFromHelpless(x) -> Cruel(x))", "all x.(StealingFromHelpless(x) -> Cruel(x))", "all x.(Stealing(x) -> Cruel(x))", "all x.((StealingFromHaideless(x) & Cruel(x)) -> Cruel(x))", "all x.(SlealingFromHelpless(x) -> Cruel(x))", "all x.((StealFromHelpless(x) & Cruel(x)) -> Cruel(x))", "all x.(StealingFromHelpless(x) -> Cruel(x))"]}
{"id": "enwn_validation_364", "nl": "It was cruel of Jeff to steal candy from the child.", "fol": "", "prediction": ["(CriminalOfJeff(Jeff) : ToStealChocolate(Jeff))", "-CruelTailFromChild(Jeff)", "-CruelToStealConquerence(-Jeff)", "all x y.((Child(x) & Jeff(y)) -> CapriciousToStealCandy(x,y))", "all x.((Jeff(x) & Child(y)) -> CruelToSteal(x,y))", "all x.((Friend(x) & Child(x)) -> CruelToSteal(x,candy))", "all x y.((Child(x) & Jeff(y)) -> StealsCandy(y,x))", "-(CruelTask(Beth(Jeff) & StealCandy(Jeff))", "(CriminalForJeff(Jeff,Cottoa) | Harms(Jeff,Child))", "all x y z.((Child(x) & Jeff(y) & Child(z) & Steal(y,z)) -> Cruel(y,z))", "all x y.((Jeff(x) & Child(y)) -> CruelToStole(x,y))", "-CuriousOfJeffrey(Jeffrey)", "all x.((Jefff) | Child(x)) -> Cruel(x))", "all x y.((Fish(x) & Child(y)) -> CriciousToStoleCandy(x,y))", "\u2013CrumptiousOfJeff toStealCandyFromChild(Jeff)", "all x y z.(((Jeff(x) & Child(y) & Candy(z)) -> Robusta(x,z))"]}
{"id": "enwn_validation_365", "nl": "Lois let her dog poop on her neighbors lawn.", "fol": "", "prediction": ["Lois let her dog poop on neighbors lawn.", "all x y.((Dog(x) & Location(y)) -> LetsPoop(x,y))", "\u2013 Lois letdogPoopOnNeighborsLawn(Lois)", "will let your dog poop (Lois)", "all x y.((House(x) & Dog(y)) -> LetsPoopOn(x,y))", "all x y.((Dog(x) & NeighborsLayout(y)) -> LetsPoopOn(x,y))", "Lois let\u2019sDogPoopOnNeighborsLawn(Lois)", "Lois let her dog poop on her neighbors lawn.", "Lois letPoopOnNeighborsLawn(Lois,Lois)", "all x y.((Dog(x) & Neighborhood(y)) -> LetGo(x,y))", "her neighbor\u2019s lawn.", "all x.((Lois) & Dog(x)) -> LetsPoopOnNeighborsLandscape(x,3))", "all x y.((Dog(x) & Neighbor(y)) -> LatchedOnLawn(x,y))", "all x y.((Dog(x) & Neighborhood(y)) -> LetsPoop(x,y))", "all x y.((Lois(x) & Dog(y)) -> (LoisLaysOnNeighborsLawn(x,y)))", "Lois let her dog poop-onNeighborsGrawn(Lois)"]}
{"id": "enwn_validation_366", "nl": "Lois never picks up her dog's poop because she thinks it's gross.", "fol": "", "prediction": ["all x y.((Dog(x) & Lois (y) & PicksUpPoop(y,x) & ThinksGroovy(x)) -> -(PoopsUp(y,x) | PoopUp(y,x))))", "all x y.((Dog(x) & Lois(y)) -> -PicksUpPoop(y,x))", "all x y.((HasDog(x) & PetPoop(y)) -> NeverPicksUp(x,y))", "all x y.((Dog(x) & Lois(y) & Dog(y)) -> NeverPicksUpPoop(y,x))", "all x.((Lois(x) & DogPoop(x)) -> (NoPoop(x,y) | Gimmick(x,y)))", "all x.((DogPoop(x) & Lois(x)) -> -PicksUp(x,poop))", "all x.(Lois(x) -> (NeverpicksUpDogsPoop(x) & ThinksIt'sGroovy(x)))", "all x.((DogPoop(x) & -PicksUp(x) | GrossPoop(x))) -> Never(x))", "all x y.((Dog(x) & Pouch(y)) -> -PicksUp(x,y))", "all x.((Lois(x) & Poop(r) & -Groovy(x)) -> -PicksUp(x,r,r))", "all x.((Lois(x) & DogPoop(y)) -> -PicksUp-Variety(x,y))", "all x.((Lois(x) & Dog(y) & ThinksPoopIsGrass(x)) -> -PreparesPoop(x,y))", "all x y.((DogPoop(x) & Lois(y) & -MopsUp(y,x)) -> Gross(y))", "all x.((Dog(x) & PicksUpPoop(x)) -> Gross(x))", "all x y.((Leis(x) & Dog(y)) -> (-picksUpPoop(x,y) & ThinksGroove(x,y)))", "all x y.((Dog(x) & Lois(y)) -> -PopsUpItGrouch(y,x))"]}
{"id": "enwn_validation_367", "nl": "Leaving a mess requires someone else to clean it.", "fol": "", "prediction": ["all x.((Mach(x) & Toss(x)) -> RequiresCleaning(x))", "all x y.((LeaveMiss(x) & Person(y)) -> Cleans(y,x))", "all x y.((LayingMosh(x) & CleanMosh(y)) -> RequiresPerson(x))", "all x.(Leave(x,Mess(x) -> RequiresOtherCleans(x,Memess))", "all x y.((LaysMachine(x) & Cleans(y,x)) -> RequiresAlternateCleaning(x,y))", "all x.((LaysMeadow(x) & RequiresCleaningPeriod(x)) -> RequiresCleaningPeriod(x))", "all x.(LeavingMachine(x) -> RequiresNameToClean(x))", "all x y.((LeafsMess(x) & RemovesMarsh(y)) -> RequiresCleaning(y))", "all x y.((LeavingMachine(x) & Person(y)) -> RequiresCleaning(y))", "all x y.((LaysMachine(x) & CleansMachine(y)) -> RequiresOtherToCleanMachine(x,y))", "all x y.((LeavingDamage(x) & Someone(y)) -> RequiresToClean(y,x))", "all x y.((Mamble(x) & Clean(y)) -> IsMush.(x,y))", "all x.((LayingMess(x) & RequiresCleaning(x)) -> RequiresCleaning(x))", "all x.((LeavingMoss(x) & RequiresCleanersOrCleanings(x)) -> HasPersonCleaning(x))", "all x y.((LaysMess(x) & CleansMess(x) & Personnel(y)) -> RequiredToClean(y,x))", "all x y.((Launch(x) & Mess(y)) -> RequiresPerson(x,y))"]}
{"id": "enwn_validation_368", "nl": "Dog poop is a mess.", "fol": "", "prediction": ["all x.(DogPoop(x) -> Mess(x))", "all x.(DogPoop(x) -> Mess(x))", "all x.(DogPoop(x) -> Mesh(x))", "all x.(DogPoop(x) -> Meh.", "all x.(DogPoop(x) -> IsMorph(x))", "all x.(DogPoop(x) -> Mess(x))", "all x.(DogPoop(x) -> Mess(x))", "all x.(DogPoop(x) -> Mess(x))", "all x.(DogPoop(x) -> Mess(x))", "all x.(DogPoop(x) -> Mess(x))", "all x.(DogPoop(x) -> MessEconomy(x))", "all x.(DogPoop(x) -> Mess(x))", "all x.(DogPoop(x) -> Mess(x))", "all x.(DogPoop(x) -> Mess(x))", "all x.(DogPoop(x) -> IsMama(x))", "all x.(DogPoop(x) -> Mess(x))"]}
{"id": "enwn_validation_369", "nl": "It is inconsiderate to make someone else account for your responsibilities.", "fol": "", "prediction": ["all x y.((MakeAttribution(x,y) & SomeoneAbout(y,x)) -> Inconsiderate(x))", "all x y.((BornForResponsibilities(x,y) & -AccountForResponsibilities(y)) -> Inconsiderate(x,y))", "all x.((Application(x) & MindfulChange(x)) -> Inconsiderate(x))", "all x.((SubmitResponsibilities(x) & AccountForResponsibilities(x)) -> Inconsiderate(x))", "all x.((MakesNumberMaintainAccountsForResponsibilities(x)) -> Inconsiderate(x))", "all x.((Avoids(x,Careers) & AccountForResponsibilities(x)) -> Inconsiderate(x))", "all x.((Person(x) & AccountForResponsibilities(x)) -> Inconsiderate(x))", "all x y.((Factor(x) & Person(y) & AccountsForResponsibilities(x,y)) -> Inconsiderate(x,y))", "all x.((Emotion(x) & AccountForResponsibilities(x)) -> Inconsiderate(x))", "all x.((MakingAnotherAccountForResponsibilities(x)) -> Inconsiderate(x))", "all x y.((Other(x) & Person(y)) -> Inconsiderate(x))", "all x.((MakingAboutOtherAccountForResponsibilities(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x y.((Person(x) & Person(y)) -> Inconsiderate(x))", "all x.(Inconsiderate(x) -> AccountForResponsibilities(x))", "all x.((MakesAnotherAssignmentForResponsibilities(x)) -> Inconsiderate(x))", "all x.((Person(x) & MakesAnotherAccountForResponsibilities(x)) -> Inconsiderate(x))"]}
{"id": "enwn_validation_370", "nl": "Avoiding your responsibilities requires someone else to account for them.", "fol": "", "prediction": ["all x.((AvoidsResponsibilities(x) & AccountForResponsibilities(x)) -> RequiresPerson(x))", "all x.(AvoidsResponsibilities(x) -> RequiresAccounting(x))", "all x.((IsResponsible(x) & RequiresAccountingThan(x)) -> AvoidsResponsibilities(x))", "all x.(AvoidsResponsibilities(x) -> RequiresAccounting(x))", "all x.(AvoidingResponsibilities(x) -> RequiresAlterAccounting(x))", "all x y.((ExercisesResponsibilities(x) & SomeoneDistant(y)) -> AccountsFor(y,x))", "all x y.((RequiresAlternativeAccountant(x) & AvoidsResponsibilities(x)) -> RequiresRequirement(y))", "all x.((AvoidsResponsibilities(x) & Person(x)) -> AccountsFor(x,y))", "(AvoidsResponsibilities(x) -> RequiresAccount(x))", "all x.((AvoidsResponsibilities(x)) -> RequiresAccounting(x))", "all x.(AvoidsResponsibilities(x) -> RequiresAlternativeAccounting(x))", "all x y.(RequirementsAccounting(x,y) -> AvoidResponsibilities(x))", "all x y.((AvoidsResponsibilities(x) & Person(y)) -> RequiresAccount(x,y))", "all x.((AbsolveRisks(x) & RequiresAccounting(x)) -> PreventResponsibility(x))", "all x y.((AvoidsResponsibilities(x) & Person(y)) -> AccountsForResponsibilities(y,x))", "all x.(AvoidResponsibilities(x) -> RequiresAccountant(x))"]}
{"id": "enwn_validation_371", "nl": "Lois did not pick up her dog's poop on the neighbors lawn.", "fol": "", "prediction": ["all x y z.((Lois's Dog(x) & Yard(y) & Neighbor(z)) -> (-PoopCrop(x,y,z)))", "Lois and neighbors lawn was so crappy(Lois,Dog) & -PumpPowwrex.com(Lois,DogPoop))", "Lois's dog did not pick up poop on neighbor's lawn.", "(-picksUpDogPoopOnNeighborsLands)", "Lois did not pick up a dogs poop on neighbor's lawn.", "all x y.((Dog(x) & Neighbor(y)) -> -Replaces(x,y))", "all x y.((Lois(x) & Dog(y)) -> -PupsOnNeighborsLayers(x,y))", "all x.((Lois(x) & Dog(y)) -> -picksUpPoopOnNeighborsLawn(x,y))", "Lois did not pick up dog's poop on neighbors lawn.", "all x y.((Lois(x) & Dog(y)) -> Doesn'tPickUpPoop(x,y))", "Lois did not pick up dog's poop on neighbor's lawn.", "(-PickUpPoopOnNeighborsLawn(Lois,Lois))", "(Lois & DogPoop(y) & -AppreciatedOnNeighborsLawn(y))", "Lois -PoopsOnNeighborsLayer(Lois)", "Lois -CroppedWheelOnNeighborsLawn(Lois,dog))", "(DespicablePoop(Lois) & HomeownersLawn(Lois,Mountain))"]}
{"id": "enwn_validation_372", "nl": "Dog poop is a mess that needs to be cleaned by someone.", "fol": "", "prediction": ["all x y.((DogPoop(x) & Cleaning(y)) -> Needs(x,y))", "all x.(DogPoop(x) -> (Miss(x) & NeedsCleaning(x)))", "all x y.((DogPoop(x) & Collector(y)) -> NeedsCleaning(x,y))", "all x.(DogPoop(x) -> (Miss(x) & NeedsCleaningBy(x)))", "all x.(DogPoop(x) -> (BrushMess(x) & NeedsClean(x,y)))", "all x.(DogPoop(x) -> NeedsCleaning(x))", "all x.(DogPoop(x) -> NeedsCleaning(x))", "all x.(DogPoop(x) -> (Moss(x) & NeedsCleaning(x)))", "all x.(DogPoop(x) -> NeedsCleaning(x))", "all x.(DogPoop(x) -> (Mask(x) & NeedsCleaning(x)))", "all x y.((DogPoop(x) & Mess(y)) -> NeedsCleaning(x,y))", "all x.(DogPoop(x) -> (Melt(x) & NeedsCleaning(x)))", "all x.(DogPoop(x) -> (Mame(x) & NeedsCleaning(x) & DogPoop(x)))", "all x.(DogPoop(x) -> (Mach(x) & needsCleaning(x)))", "all x.(DogPoop(x) -> (Mess(x) & NeedsCleaning(x)))", "all x.(DogPoop(x) -> (Miss(x) & NeedsConning(x)))"]}
{"id": "enwn_validation_373", "nl": "Lois left a mess that needs to be cleaned by someone.", "fol": "", "prediction": ["lois left a mess that needs to be cleaned by someone.", "all x.((Lois(x) & LeftMoss(x)) -> NeedsCleaning(x))", "all x y.((Lois(x) & Mess(y)) -> HasDoneCleaning(x,y))", "all x.(SoloisLayedMass(x) -> NeedsCleaning(x))", "all x y.((Lois(x) & Mess(y)) -> Has(x,y))", "all x y.((Lois(x) & Person(y)) -> LeftMoss(x,y))", "all x y.((Lois(x) & Mess(y)) -> DoesNeedToBeClean(x,y))", "all x y.((Lois(x) & Mess(y)) -> NeedsCleaning(x,y))", "all x y.((Lois(x) & Mess(y)) -> NeedsCleaning(x,y))", "Several people are working on cleaning the mess left by Lois.", "all x.(Lois(x) -> LeftMoss(x))", "all x y.((Lois(x) & Mess(y)) -> NeedsToBeCleaned(x,y))", "all x y.((Lois(x) & Mess(y)) -> RequiresAt(x,y))", "-LoisDamagedToDamage(Lois)", "(Lays(Lois) -> DoesMiss(Los))", "all x y z.((Lois(x) & Mess(y) & Person(z)) -> Left(x,y))"]}
{"id": "enwn_validation_374", "nl": "Avoiding your responsibilities is inconsiderate.", "fol": "", "prediction": ["all x.(FacesResponsibility(x) -> Inconsiderate(x))", "all x.((AvoidsResponsibilities(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((AvoidsResponsibilitys(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.(Inconsiderate(x) -> AvoidsResponsibilities(x))", "all x.((Causes(x) & ExtendsResponsibilities(x)) -> Inconsiderate(x))", "all x.((AvoidResponsibility(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x y.((AvoidResponsibles(x) & Responsibility(y)) -> Inconsiderate(x))", "all x.(AvoidsResponsibilities(x) -> Inconsiderate(x))", "all x.(AvoidsResponsibilities(x) -> Inconsiderate(x))", "all x.(EatsResponsibilities(x) -> Inconsiderate(x))", "all x.((Versevirate(x) & AvoidsResponsibilities(x)) -> Inconsiderate(x))", "all x.((CausesAboveResponsibilities(x)) -> Inconsiderate(x))", "all x.((AvoidResponsibilities(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.(AvoidResponsibilities(x) -> Inconsiderate(x))", "all x.((AvoidsResponsibilities(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((AvoidsResponsibilities(x) & Inconsiderate(x)) -> Inconsiderate(x))"]}
{"id": "enwn_validation_375", "nl": "You are avoiding your responsibilities when you leave a mess for someone else.", "fol": "", "prediction": ["all x y.((Job(x) & LeavesMoss(x,y)) -> AvoidsResponsibilities(x))", "all x y.((TasksLowerMachine(x) & LeavesMach(y)) -> AvoidsResponsibilities(x,y))", "all x y.((AvoidsResponsibilities(x) & LeftMess(y)) -> (LeavingMess(x,y) | LeavesMess(x,y)))", "all x y.((Spoken(x) & LeavesMoshFor(x,y)) -> AvoidsResponsibilities(x))", "all x.((LeavingMushForAnother(x) & AvoidsResponsibilities(x)) -> AvoidsResponsibilities(x))", "all x y.((LeavingMask(x) & SomeoneAlways(y)) -> AvoidsResponsibilities(x))", "all x y.((LeavesMach(x,y) & Man(y)) -> AvoidsResponsibilities(x))", "all x y.((GasMach(x) & Leaves(x,y)) -> AvoidsResponsibilities(x))", "all x y.(((LaysMachine(x) & Person(y)) -> AvoidsResponsibilities(x))", "all x y.((LeavingMach(x) & Person(y) & LeavesMash(x,y)) -> AvoidingResponsibilities(x))", "all x y.((Mess(x) & LeftAround(x,y)) -> AvoidsResponsibilities(x))", "all x y.((AvoidsResponsibilities(x) & TheMach(y) & Leaves(x,y)) -> HasComparableSignificance(x,y))", "all x y.((LeavingMach(x) & TheMich(y)) -> AvoidsResponsibilities(x,y))", "all x y.((EasyResponsibilities(x) & EvilPackage(y)) -> LeavesMach(x,y))", "all x.((LeavingMach(x) & LeaveLay(x,y)) -> AvoidingResponsibilities(x))", "all x y.((LaysOtherMach(x,y) & DepartsAndLess(x,y)) -> AvoidsResponsibilities(x))"]}
{"id": "enwn_validation_376", "nl": "Leaving a mess for someone else to clean is being inconsiderate.", "fol": "", "prediction": ["all x.((LaysMachine(x) & SomeoneWithMache(x)) -> Inconsiderate(x))", "all x.((LeavesMachine(x) & LeavesMachine(x) & SomeoneAlwaysClean(x)) -> Inconsiderate(x))", "all x.(LeavingLeatherLaysMame(x) -> Inconsiderate(x))", "all x.((LaundryMachine(x) & SomeoneOtherToClean(x)) -> Inconsiderate(x))", "all x.((LaysMachine(x) & -MaintainMachine(x)) -> Inconsiderate(x))", "all x y.((LaysMosh(x) & (Lord(y) | Person(y)) & Cleans(y)) -> Inconsiderate(x))", "all x.((Moss(x) & LeftForAnother(x)) -> Inconsiderate(x))", "all x y.((LaysMoisture(x) & Someone(y)) -> Inconsiderate(x))", "all x.(LeavePersonMoss(x) -> Inconsiderate(x))", "all x y.((LaysMachine(x,y) & SpillForPerson(y)) -> Inconsiderate(x))", "all x.(LeavingAsh(x,y).((LaysChest(x,y) & Cleaning(y)) -> Inconsiderate(x))", "all x.((LeavingMosh(x) & ForCleaning(x)) -> Inconsiderate(x))", "all x y.((LaysMachine(x) & Person(y) & CleansMachine(x,y)) -> Inconsiderate(x))", "all x.((LeaveSolid(x) & SomeoneOtherToClean(x)) -> Inconsiderate(x))", "all x.((LetsMachineMore(x) & For(x,Earth)) -> Inconsiderate(x))", "all x.(LaysMachine(x,y) -> Inconsiderate(y))"]}
{"id": "enwn_validation_377", "nl": "Lois is inconsiderate.", "fol": "", "prediction": ["Lois is inconsiderate.", "Lois is Inconsiderate.", "Lois is inconsiderate.", "Lois is inconsiderate.", "Lois is inconsiderate.", "-Inconsiderate(Lois)", "Lois is Inconsiderate(x)", "Lois is Inconsiderate(Lois)", "Lois is Inconsiderate(Lois)", "Lois is inconsiderate.", "Lois is Inconsiderate(lois)", "Lois is Inconsiderate.", "Lois is Inconsiderate.", "Lois is inconsiderate.", "Lois is inconsiderate.", "Lois is inconsiderate."]}
{"id": "enwn_validation_378", "nl": "Joshua likes driving an extremely loud car in the middle of the night because it wakes people up.", "fol": "", "prediction": ["all x y.((Joshua(x) & LoudCar(y) & MidNight(x) & WakesPeopleUp(x)) -> LikedDrive(x,y))", "all x y.((Joshua(x) & LoudCar(y) & Midnight(x)) -> LikesDrive(x,y))", "all x.((Joshua(x) & ExtremelyLoudCar(x)) -> WakesPeopleUp(x))", "all x.((Joshua(x) & LoudCar(x) & WakesPeopleUp(x)) -> LovesDecorating(x))", "all x.((Joshua(x) & LoudCarRide(x)) -> WakesPeopleUp(x))", "all x y.((Joshua(x) & LoudCar(y) & MidNight(z)) -> LightSurface(x,y,z))", "all x y.((Josh(x) & Car(y)) -> (Loud(y) & WakesUpPeople(x,y)))", "all x y.((Joshua(x) & Car(y) & MidNight(y)) -> Likes(x,y))", "all x y.((Driving(x,y) & LoudCar(x) & Midnight(y)) -> WakesPeopleUp(x))", "all x.((Joshua(x) & VeryLoudCar(x) & WakesPeopleUp(x)) -> LikesDriving(x))", "all x y.(((SophisticatedCar(x) & MidNight(y)) -> Likes(x,y))", "all x.((Joshua(x) & VeryLoudCar(x)) -> WakesPeopleUp(x))", "all x y.((Joshua(x) & Car(y) & MiddleOfNight(y)) -> WakesUp(x,y))", "all x y.((Joshua(x) & Car(y)) -> LikesDrive(x,y))", "all x y.(LoudCar(x) & MiddleOfNight(y)) -> WakesUp(x,y))", "all x y.((Joshua(x) & LoudCar(y)) -> (BelongsInMiddleOfNight(x) & WakesPeopleUp(x)))"]}
{"id": "enwn_validation_379", "nl": "Making things unpleasant for someone is rude.", "fol": "", "prediction": ["all x.((Person(x) & Unacceptable(x)) -> Rust(x))", "all x.((PromiseUnpleasant(x) & UncomfortableFor(x)) -> Rare(x))", "all x.(UnpleasantForPerson(x) -> Rust(x))", "all x.(Unpleasant(x) -> Reckless(x))", "all x.((MakingThingsUnpleasantForPerson(x)) -> Rust(x))", "(Rule(y) -> Unpredictable(y))", "all x.((UnfortunateFacts(x) & UnfortunateFacts(x)) -> Ruffled(x))", "all x.((DisappointingForPerson(x)) -> Rust(x))", "all x.((Than(x) & UnlikelyFor(x)) -> Rusty(x))", "all x.(UnpleasantForPerson(x) -> Rust(x))", "all x.((Appointment(x) & Uncomfortable(x)) -> Ruine(x))", "all x.((Property(x) & Unwrong(x)) -> Rust(x))", "all x.((Person(x) & Uncomfortable(x)) -> Rude(x))", "all x.((Tinker(x) & Unpleasant(x)) -> Rust(x))", "all x.((MakingUnpleasantTirings(x) & Man(x)) -> Rust(x))", "all x y.((MakingPropertiesUncomfortable(x) & Individual(y)) -> Rust(x))"]}
{"id": "enwn_validation_380", "nl": "Waking someone up at night prevents them from getting a full night's rest.", "fol": "", "prediction": ["all x.(WakingUpAtNight(x) -> NotFullNightsRest(x))", "all x y.(((WakingUpAtNight(x) & Person(y)) -> -LowerNightsRest(y))", "all x y.(WakingupAtNight(x) -> PreventsFullNightsRerest(y))", "all x y.(((Person(x) & WakingUpAtNight(x)) -> PreventsFullNightsRest(x))", "all x y z.((WakingUpAtNight(x) & Person(y) & Night(z) & -FullNightRest(y)) -> Prevents(x,y,z))", "all x.((Person(x) & WakingAtNight(x)) -> -FullNightRest(x))", "all x y.((AtNight(x) & WakingPerson(x,y)) -> PreventsFullNightsRest(x,y))", "all x.((WakingUpAtNight(x) & Person(y)) -> -All NightRest(y,x))", "all x y.((WakingUpAtNight(x) & Person(y)) -> -GetsFullNightsRerest(x,y))", "all x.((WakingUpAtNight(x) & Person(y)) -> -GetsFullLunchRest(x,y))", "all x y.((WakingUpAtNight(x) & Person(y)) -> PreventsFullNightsRest(y,y))", "all x y.((WakingUp(x) & Person(y) & Night(x)) -> ForgetsFullNightsRerest(y))", "all x.((WakingUpAtNight(x) & Person(y)) -> -HasFullNightsRest(y))", "all x.((WakingAtNight(x) & Person(y)) -> StopsGetfulNightsRest(y,x))", "all x y.((Person(x) & WakingUpAtNight(x)) -> -HasLunchRest(x))", "all x y.((WakingUpAtNight(x) & Person(y)) -> (ProtectsFullNightRest(x,y)))"]}
{"id": "enwn_validation_381", "nl": "Not getting a full night's rest is unpleasant.", "fol": "", "prediction": ["all x.((NightsRest(x) & -FullNightStorm(x)) -> Disgruntful(x))", "all x.((NightsRest(x) & -Full(x)) -> Unplausible(x))", "all x.((NightsRest(x) & -Full(x)) -> Unplacable(x))", "all x.((NightsRest(x) & -FullNight(x)) -> Unpornible(x))", "all x.((Nut(x) & FullNightStorm(x)) -> Unclean(x))", "all x.((Disappointed(x) & -FullNightsRest(x)) -> Uncomfortable(x))", "all x.((NightsRest(x) & -FullNightRest(y)) -> Unscrupulous(x))", "all x.((NightsRest(x) & -FullNight(x)) -> Uncomfortable(x))", "all x.((LowerNightsRest(x) & -FullNightsRest(x)) -> Unpleasing(x))", "all x.((NightsRest(x) & -FullNight'sRest(x)) -> Uncomfortable(x))", "all x.((NightsRerest(x) & -FullNightStay(x)) -> Uneasy(x))", "all x.((LunchLimit(x) & NotFullNightsRest(x)) -> Uncomfortable(x))", "all x.((NightsRerest(x) & -FullNightSeen(x)) -> Unpleasurable(x))", "all x.((NightsRerest(x) & -Full(x)) -> Uncomfortable(x))", "all x.((Night(x) & -FullNightResist(x)) -> Unplagued(x))", "all x.((Lounge(x) & -FullNightRerest(x)) -> Unplausible(x))"]}
{"id": "enwn_validation_382", "nl": "If you like to be rude, you're a rude person.", "fol": "", "prediction": ["all x.((LaysRule(x) & LikesToBeRule(x)) -> RustPerson(x))", "all x.((Result(x) & Neat(x)) -> Rust(x))", "all x.((LikesToBeRull(x) & AbleToBeRull(x)) -> ReprehensiblePerson(x))", "all x.(RawPerson(x) -> (LovesToBeRure(x) & Rust(x)))", "all x.((Rust (x) & LikesToBeRust(x)) -> RoughPerson(x))", "all x.((Like(x) & Rust(x)) -> Rough(x))", "all x.((LikesToBeRuffle(x) & Rust(x)) -> RustPerson(x))", "all x.((LikesToBeRule(x) & Neat(x)) -> RudePerson(x))", "all x.((YouCareToBeRubly(x) & LikesToBeRubby(x)) -> RudePerson(x))", "all x.((Roug(x) & LikesToBeRugile(x)) -> RuggedPerson(x))", "all x.((LikesToBeRust(x) & Reckless(x)) -> RecklessPerson(x))", "all x.((Rumble(x) & LikesToBe(x)) -> RustPerson(x))", "all x.((Ruin(x) & LikesToBe(x)) -> RustPerson(x))", "all x.(WelcomeToRule(x) -> RoughPerson(x))", "all x.((Relax(x) & LikesToBeRust(x)) -> RustPerson(x))", "all x.((LikesToBeRule(x) & Rust(x)) -> RoughPerson(x))"]}
{"id": "enwn_validation_383", "nl": "Waking someone up at night can be unpleasant for that person.", "fol": "", "prediction": ["all x y.((TurnsAtNight(x) & Person(y)) -> UnfortunateFor(x,y))", "all x y.((Person(x) & Person(y)) -> Unappealing(x,y))", "all x y.((WakingUpAtNight(x) & Person(y)) -> UnplausibleFor(y,x))", "all x y.((Person(x) & Person(y)) -> Uncomfortable(x,y))", "all x y.((Waking(x,y) & Person(y)) -> Unappealing(x,y))", "all x y.((Person(x) & Person(y) & WakingUpAtNight(x,y)) -> UnappealingFor(x,y))", "all x y.((Person(x) & Person(y)) -> Unappealing(x,y))", "all x y.((Person(x) & Person(y)) -> Unafraid(x,y))", "all x.((WakingUpAtNight(x) & Person(x)) -> Unappealing(x))", "all x y.((Person(x) & WakingUpAtNight(x,y)) -> UndauntableFor(x,z))", "all x y.((Destroyable(x,y) & Person(y)) -> WakingUpAtNight(x,y))", "all x.((AtNight(x) & WakingPerson(x)) -> UnappealingForPerson(x))", "all x.(WakingAtNight(x) -> UnanpliableForPerson(x))", "all x y.((LunchWaking(x) & Person(y)) -> Unreasonable(y))", "all x y.((Person(x) & WakingUpAtNight(x,y)) -> UnfavorableFor(x,y))", "all x.((Person(x) & WakingUpAtNight(x)) -> UncomfortableFor(x,Person))"]}
{"id": "enwn_validation_384", "nl": "It is rude to wake people up at night.", "fol": "", "prediction": ["all x.((WakePeopleUpAtNight(x)) -> Rusty(x))", "all x.((WakePeopleUpAtNight(x)) -> Rust(x))", "all x.((GatheringBawn(x) & Night(x)) -> Rula(x))", "all x.((WakePeopleUpAtNight(x)) -> Rusty(x))", "all x.((WakePeopleUpAtNight(x)) -> Rust(x))", "all x.((Gawn(x) & -Rule(x)) -> WakeAtNight(x))", "all x.((WakeUpWhenNight(x) & People(x)) -> IsRue(x))", "all x.((Person(x) & WakesUpAtNight(x)) -> Rusty(x))", "all x.((WakePeopleUpAtNight(x)) -> Rust(x))", "all x.(Reasonable(x) -> WakePeopleUpAtNight(x))", "all x y.((Rose(x) & People(y)) -> WakeUpAtNight(x,y))", "all x y.((Person(x) & Sleep(y)) -> Ridiculous(x,y))", "all x.((WakeUpAtNight(x)) -> Rust(x))", "all x y.(((WakeAtNight(x) & Person(y)) -> Rust(x,y))", "all x.((WakeUpAtNight(x) & People(y)) -> Rupid(x))", "all x.((Caution(x) & WakePeopleUpAtNight(x)) -> Rutile(x))"]}
{"id": "enwn_validation_385", "nl": "Joshua likes to be rude.", "fol": "", "prediction": ["all x.(Josh(x) -> LikesToBeRugged(x))", "Joshua likesRease(Joshua)", "All x.(Joshua(x) -> LikesToBeRully(x))", "all x.(Joshua(x) -> LikesToBeRule(x))", "all x.(Josh(x) -> LikesToBeRurel(x))", "-LikesToBeRurel(Joshua)", "(LikesToBeRule(Joshua)", "(LikesToBeRusty(Joshua))", "all x.(Joshua.(KnowsRule(x)) -> LikesToBe(x))", "all x.(Joshua(x) -> LikesToBeRust(x))", "all x.((Joshua(x) & Rust(x)) -> LikesToBe(x))", "all x.(Joshua(x) -> LikesRught(x))", "all x.(Joshua(x) -> LikesToBeRust(x))", "all x.(Josh(x) -> LikesToBeRurel(x))", "(Negative(Josh) -> Likes(Josh))", "(GivesRule(Joshua)"]}
{"id": "enwn_validation_386", "nl": "Joshua is a rude person.", "fol": "", "prediction": ["all x.(Joshua(x) -> Rust(x))", "all x.(Joshua(x) -> Ruinful(x))", "all x.(Josh(x) -> RustPerson(x))", "all x.(Josh(x) -> RustPerson(x))", "all x.(Josh(x) -> RupidPerson(x))", "all x.(Josh(x) -> RustPerson(x))", "all x.(Josh(x) -> RuinfulPerson(x))", "all x.(Joshua(x) -> RuinfulPerson(x))", "all x.(Joshua(x) -> RustPerson(x))", "all x.(Joshua(x) -> Riffful(x))", "all x.(Joshua(x) -> Rust(x))", "all x.(Choose(x) -> RustPerson(x))", "all x y.((Josh(x) & Person(y)) -> Rustic(x))", "all x y.((Josh(x) & Person(y)) -> Rust(x))", "all x.(Josh(x) -> RustPerson(x))", "all x.(Person(x) & Rusty(x))"]}
{"id": "enwn_validation_387", "nl": "Katie used her neighbors' internet access without their permission.", "fol": "", "prediction": ["(HasNeighborsInternetAccess(Katie) & WithoutPermission(Katie))", "(using(Katherine) & InternetAccess(Kathlees)) -> -HasPermission(Katherine))", "all x y.((Neighbors(x) & Katie(y)) -> UsedInternetAccessWithoutPermission(y,x))", "(UsedItalianInternetAccess(Katie) & -Person(Katie,neighbors))", "(UsesInternetAccess(Katie,Neighbors))", "all x y z.((Katie(x) & Neighbors(y) & InternetAccess(z) & -Permission(w)) -> UsedWithoutPerson(x,y,z))", "Katie used internet access without her neighbors' permission.", "all x y.((Neighbor(x) & Katie(y)) -> UserExtendedWebAccessWithoutPermission(x,y))", "Katie a used the internet access of neighbors's house.", "all x y.((Katie(x) & Neighbor(y)) -> UsedInternetAccessWithoutPermission(x,y))", "all x y.((Katie(x) & Neighbor(y)) -> (UsedInternetAccessWithoutPermission(x,y)))", "all x y.((Neighbor(x) & Katie(y)) -> UsedInternetAccessWithoutPermission(y,x))", "all x y.((Neighbor(x) & Katie(y)) -> Used(y,x))", "(all x y.((Sister(x,y) & Neighbor(x,y)) -> Uses(x,y)))", "all x y z.((Katie(x) & Neighbor(y) & InternetAccess(z)) -> Utilized(x,y,z))", "Katie usesInternetAccess(Katie)"]}
{"id": "enwn_validation_388", "nl": "Using someone's internet access doesn't prevent them from using it.", "fol": "", "prediction": ["all x y.((UsesInternetAccess(x) & Person(y)) -> -Interprets(x,y))", "all x y.((UsesInternetAccess(x) & Person(y)) -> -ProtectsFromUsing(x,y))", "all x y.((UsesInternetAccess(x,y) & Person(y)) -> -Intervenes(x,y))", "all x.(UsesInternetAccess(x) -> -ProhibitsUseIt(x))", "all x.((UsesInternetAccess(x) & -PreventsInternetAccess(x)) -> -PreventsInternetAccess(x))", "all x.((InternetAccess(x) & Use(y)) -> -PreventsFromUsing(x,y))", "all x y.((UsesInternetAccess(x,y) & Person(y)) -> -PreventsFromUsingInternetAccess(x,y))", "all x.(InternetAccess(x) -> -PreventsUsing(x))", "all x y.((IntelNetworkAccess(x) & Person(y) & Uses(y,x)) -> -ContractsFromUsing(y,x))", "all x.((UsesInternetAccess(x) & Person(x)) -> -PreventsFromUsingInternetAccess(x))", "all x y.((UseInternetAccess(x,y) & Person(y)) -> -PermitsUsingInternetAccess(x,y))", "all x y.((ProtectsInternetAccess(x) & WebFriend(y)) -> -UsesInternetAcceptance(x,y))", "all x.((UsesInternetAccess(x) & Person(x)) -> -IsInterestProhibited(x))", "all x y.((WebsiteAccess(x) & Person(y) & Installs(y)) -> -ProhibitsUsing(y,x))", "all x y.((Person(x) & InternetAccessAccess(y)) -> -Allows(x,y))", "all x y z.((InternetAccess(x) & InternetAccess(y) & InternetAccess(z)) -> -Has(x,y,z))"]}
{"id": "enwn_validation_389", "nl": "It's wrong to deprive someone of their property.", "fol": "", "prediction": ["all x.(ItsWrongToDepriveAloneOfProperty(x) -> IsWrong(x))", "all x y.((Person(x) & Property(y) & Deprived(x,y)) -> -Poor(x,y))", "all x.(Deprive(x) -> Irresponsible(x))", "all x.((Person(x) & DepriveProperty(x)) -> Wrong(x))", "all x.(Deprives(x,y) -> Wrong(x))", "all x.((Deprive(x) & Person(y)) -> Irresponsible(x))", "all x y.((DepriveProperty(x) & Person(y)) -> Wrong(x))", "(PurposeDeprivement(a) -> Incorrect(a))", "all x.(FailToDepriveProperty(x) -> NotWrong(x))", "all x y.((Flag(x) & Person(y)) -> IsWrongToDeprive(x,y))", "all x y.((DeprivesOfProperty(x) & Person(y)) -> Irresponsible(x,y))", "all x y.((DeprivesPerson(x) & Property(y)) -> Wicken(x,y))", "all x.(DepriveProperty(x) -> Wrong(x))", "all x.(DeprivesPersonOfProperty(x) -> Irresponsible(x))", "all x.(Deprive(x,y) -> Wrong(x))", "all x.(DepriveDomain(x) -> Wrong(x))"]}
{"id": "enwn_validation_390", "nl": "Katie didn't deprive her neighbors of their internet by using it without their permission.", "fol": "", "prediction": ["all x.((Neighbor(x) & UsesInternetWithoutPermission(x)) -> -DeprivesOfInternet(x))", "all x.((Kately(x) & Neighbors(x) & -DeprivesInternet(x)) -> -UsesWithoutPermission(x))", "all x y.((Patreon(x) & Neighborhood(y) & -PrivesInternet(x,y)) -> UsesIt(x,y))", "all x y.((Neighbor(x) & Katie(y) & UsedInternetWithoutPermission(y,x)) -> -DeprivesNetwork(y,x))", "all x.((Katie(x) & Neighbors(x) & UsesInternetWithoutPerson(x)) -> Lorenzo-DeprivesOfInternet(x))", "(-DeprivesNearbyInternet(Katie,y) -> -DeprivesNeighbors(Katie,y))", "all x.((Patent(x) & Neighbor(y) & UsesInternetWithoutPermission(x,y)) -> NoDeprives(x,y))", "all x y z.((Neighbor(x) & Internet(y) & Internet(z) & UsesWithoutPermission(x,y,z)) -> KatieNeighbor(x))", "(-PrivesNeighborsOfInternet(Katie,WillPersonAndInternet(Katie,WillProhibit(Katie,WillPermission(Katie)))", "all x y.((Katie(x) & Neighbor(y) & DeprivesInternet(x,y) & DisregardsInternet(x,y)) -> -DeprivesInternet(x,y))", "-DeprivesLandlordsOfInternet(Katie,Network) & UsesWithoutPermission(Katie,Network))", "(-DeprivesNeighborsOfInternet(Katie,Internet&Person(Katie))", "(-DeprivesNeighborsOfInternetCounselly(Katie,WebPerson,Internet))", "all x.((Katie(x) & Neighbors(y)) -> -DeprivesInternet(x,y))", "all x y.((Person(x) & Neighborhood(y) & UsedInternetWithoutPermission(x,y)) -> -(Deprives(x,y) & -Deprives(x,y)))", "that's where Katie is at."]}
{"id": "enwn_validation_391", "nl": "It was okay for Katie to use her neighbors' internet.", "fol": "", "prediction": ["all x.((Katie(x) & NeighborsInternet(x)) -> OK(x))", "(agreed(Katie) & UsesNetwork(Katie,nearbyWeb))", "all x y.((Company(x) & Kitchen(y)) -> UsesInternet(x,y))", "(AreUsersInternet(Katie,Neighbors)?", "All x y z.((Patsy(x) & NeighborsInternet(y) & Katie(z)) -> OkToUse(x,y,z))", "All x.((Katie(x) & NeighborsInternet(x)) -> Okay(x))", "(WentBehindNeighborsInternet(Katie,ok) -> Uses(Katie,ok))", "all x.((Katie(x) & Neighbor(x)) -> OKUseInternet(x))", "all x.((Katie(x) & NeighborsInternet(x)) -> OKToUse(x,y))", "all x.((Katie(x) & NeighborsInternet(x)) -> OK(y))", "all x y.((Katie(x) & Neighbors(y)) -> OKToUseInternet(x,y))", "-(Allowed(Katie) -> UsesNeighborsInternet(Katie)))", "(AkayCutting(Katie,NeighborsInternet))", "all x y z.((Taylor(x) & Into(x,y) & Internet(z)) -> OK(x,z))", ". (NeighborsNetwork(Katie) -> OkToUse(Katie,Network)))", "all x.((Katie(x) & NeighborsInternet(x)) -> OK(x))"]}
{"id": "enwn_validation_392", "nl": "Pushing people out of your way is an impatient thing to do.", "fol": "", "prediction": ["all x.(PushingOutOfWeaving(x) -> ImpatientThingToDo(x))", "all x.(PushingPeopleOutOfWay(x) -> ImpatientThingToDo(x))", "all x.(PutPeopleOutOfMyWay(x) -> ImpatientTidy(x))", "all x y.((PushingPeopleOutOfPath(x) & PeopleOutOfPath(y)) -> ImpatientThing(x))", "all x.(AimsToPushOutOfYourWay(x) -> ImpatientThing(x))", "all x.(PunctOutYourWay(x) -> ImpatientThingToDo(x))", "all x.((PushingOutOfWay(x) & Impatient(x)) -> IsAbout(x,y))", "all x.(PushingOutOfWay(x) -> ImpatientThingToDo(x))", "all x y.((PushPerson(x) & Person(y)) -> ImpatientThing(x,y))", "all x.(PutPeopleOutOfWay(x) -> ImpatientThingIf(x))", "all x.(PosibleOutOfWay(x) -> ImpatientThingToDo(x))", "all x.(PutsOutOfWayPeople(x) -> ImpatientThing(x))", "all x.(PutsPeopleOutOfWay(x) -> ImpatientThingToDo(x))", "all x.(PushOutOfWay(x) -> ImpatientThingToDo(x))", "all x.(PutPeople(x) -> ImpatientThing(x))", "all x.(PushingPeopleOutOfYouGod(x) -> ImpatientThing(x))"]}
{"id": "enwn_validation_393", "nl": "Patience is a virtue.", "fol": "", "prediction": ["(Virgin(patience) -> IsViolence(patience))", "all x.(Patience(x) -> Virtue(x))", "all x.(Patient(x) -> Virtue(x))", "all x.(Patient(x) -> Virtue(x))", "Patience is a Virtue.", "all x.(Patient(x) -> Virtue(x))", "all x.(Patient(x) -> Virtue(x))", "all x.(Patient(x) -> Virtue(x))", "all x.(Patience(x) -> Virtue(x))", "all x.(Patient(x) -> Virgin(x))", "all x.(Patient(x) -> Virtue(x))", "all x.(Patient(x) -> Virtue(x))", "all x.(Passibility(x) -> Virtue(x))", "all x.(Patient(x) -> Virtue(x))", "all x.(Patience(x) -> Virtue(x))", "all x.(Patience(x) -> Virtue(x))"]}
{"id": "enwn_validation_394", "nl": "People should be virtuous.", "fol": "", "prediction": ["all x.(Person(x) -> Virtuous(x))", "all x.(Person(x) -> Virtuous(x))", "all x.(Person(x) -> Virtuous(x))", "all x.(Child(x) -> Virtuous(x))", "all x.(Private(x) -> Virtuous(x))", "all x.(Victorious(x) -> ShouldBe(x))", "all x.(Person(x) -> Virtuous(x))", "all x.(People(x) -> Virtuous(x))", "all x.(Tithe(x) -> ShouldBeVirtuous(x))", "All x.(Person(x) -> Virtuous(x))", "all x.(Virtuous(x) -> People(x))", "all x.(People(x) -> Virtuous(x))", "all x.((Person(x) & Virtuous(x)) -> NeedsPrisciples(x))", "all x.(People(x) -> Virtuous(x))", "all x.(Person(x) -> Virtuous(x))", "all x.(Person(x) -> Virtuous(x))"]}
{"id": "enwn_validation_395", "nl": "Letty shoved Cathleen out of the way when walking through a doorway.", "fol": "", "prediction": ["all x y.((Letty(x) & Catheren(y) & WalkingThroughDoorway(x)) -> PuppedOutOfWay(x,y))", "that she shoved Cathleen out of the way when walking through a doorway.", "all x y z.((Pool(x) & Cathleen(y) & Doorway(z) & Walking(x,y,z)) -> PushedOutOfTheStraw(x,y,z))", "all x y z.((Letty(x) & Cathleen(y) & Doorway(z)) -> PushesOutOfWay(x,y,z))", "all x y.((Letty(x) & CATAHEEN(y)) -> PushedOutByDoorway(x))", "all x.((Letty(x) & Cathleen(ca) & WalkingThroughDoorway(x)) -> PuppedOutOfTheWay(x,ca,cas))", "all x.(ShelteredOutOfMovement(x) -> (Letty WalkedCathleenInDoorway(x) | PluckedOutOfManning(x)))", "all x y.((Letty(x) & Cathalen(y) & WalkingInDoorway(x,y)) -> StovedOutOfTheWay(x,y))", "all x y z.((Letty(x) & Cathleen(y) & Doorway(z) & WalkingThrough(x,z)) -> ShoveledOutOfWay(x,y,z))", "all x y.((Letty(x) & Catherine(y)) -> ShoomedOutOfTheHair(x,y))", "all x.((Letty(x) & Kathleen(i)) -> PushedOutOfWay(x,i))", "all x y.((Letty(x) & Cathleen(y) & WalkingThroughDoorway(x,y)) -> PushedOutOfWay(x,y))", "all x y:((Letty(x) & Cathleen(y) & WalksThroughDoorway(x)) -> PushesOutOfTheWay(x,y))", "all x y.((Letty(x) & Cathleen(y) & Doorway(z) & WalkingThrough(x,z)) -> PissedOutOfHall(x,y,z))", "all x y.((Straw(x) & Doorway(y)) -> (Schleuds(x,y) & OutOfWay(x)))", "all x y.((Letty(x) & Cathleen(y) & WalkingThroughDoorway(x)) -> PlungedOutOfWay(x,y))"]}
{"id": "enwn_validation_396", "nl": "People should be patient.", "fol": "", "prediction": ["all x.(Person(x) -> Patient(x))", "all x.(Person(x) -> Patient(x))", "all x.(Person(x) -> Patient(x))", "all x.(Person(x) -> Patient(x))", "all x.(Person(x) -> Patient(x))", "all x.(Patient(x) -> Weak(x))", "all x.(Patient(x) -> ShouldBe(x))", "all x.(Patient(x) -> KeepsPatient(x))", "all x.(Patient(x) -> Patient(x))", "all x.(Person(x) -> Patient(x))", "all x.(Patient(x) -> Patient(x))", "all x.(Person(x) -> Patient(x))", "all x.(Person(x) -> Patient(x))", "all x.(Person(x) -> Patient(x))", "all x.(Person(x) -> ShouldBePatient(x))", "all x.((Person(x) & Patient(x)) -> Needs(x,y))"]}
{"id": "enwn_validation_397", "nl": "You shouldn't push people out of your way.", "fol": "", "prediction": ["all x.((Poch(x) & People(x)) -> -Push(x,Exit))", "all x.(Tracker(x) -> -PushPeopleOutOfWay(x))", "all x y.((PushPerson(x) & OutOfBehavior(y)) -> -PushPerson(x,y))", "you shouldn't push people out of your way.", "all x.(PutPeopleOutOfWay(x) -> -(PutPeopleOutOfWay(x) & -PutPeopleOutOfWay(x)))", "all x.((PushPerson(x) & -PushPushPushPushOutOfOdd Way(x)) -> -PushPushPushPushOutOfOdd Way(x))", "all x.((Before(x) & -PushPeopleFollowing(x)) -> -Pushing(x))", "all x.((PutPerson(x) & NotOutOfWeath(x)) -> -Push(x))", "all x.(PushPeopleOutOfYouGuide(x) -> -PushPeopleOutOfYourGuide(x))", "all x.((PutOutOfWay(x) & Person(x)) -> -PutOutOfWay(x))", "all x.((PushPerson(x) & -PushPeopleOutOfWay(x)) -> -PushPeersOutOfWay(x))", "all x y.((People(x) & Way(y)) -> -PurseOutOfPath(x,y))", "all x.(NoPushing(x) -> -PushOut(x))", "all x.((PushPerson(x) & -PushPushPushPeople(x)) -> -PushPushOutOfOutOfWay(x))", "all x.((PushPeopleOutOfHow(x)) -> -PushInTo(x))", "all x y.((Puppet(x) & Person(y)) -> -PushOutOfWay(x,y))"]}
{"id": "enwn_validation_398", "nl": "Letty should not have shoved Cathleen.", "fol": "", "prediction": ["all x.((Letty(x) & -Plucked(x)) -> Cathleen(x))", "all x.(Letty(x) -> -PousedAthleen(x))", "Letty should have -PluckedCatheen(Letty,Cathleen))", "Letty -PackedCathleen.", "Letty should not have shovedCathleen.", "NilsLetty(x) -> -HadPushed(x,Cathleen))", "all x.((Letty(x) & Cathleen(c)) -> -Poused(x,c,c,y))", "all x.((Letty(x) & Cathleen(x)) -> -Pushed(x))", "All x.((Letty(x) & ChokeChathleen(x,Chary)) -> -Pounds(x,Cathleen))", "Letty should nothavePushedCatheen.", "all x.((Letty(x) & Cathleen(x)) -> -Poused(x))", "all x.((Letty(x) & CaughtLeen(x)) -> -Pushable(x,Chadleen))", "& We don't have shovedCathleen(Letty)", "All x.(NeedledPound(x,Cathleen) -> -Pouched(x,Cathleen))", "Letty -PooksCathleen(Letty)", "Oops!"]}
{"id": "enwn_validation_399", "nl": "The professor hugged the student without asking permission.", "fol": "", "prediction": ["all x y.((Professor(x) & Student(y)) -> NoPermission(x,y))", "all x y.((Professor(x) & Student(y)) -> Hugged(x,y))", "all x y z.((Professor(x) & Student(y) & Undergraduate(z)) -> HuggedUnderRequirement(x,y,z))", "all x y z.((Professor(x) & Student(y) & Hungry(x,y)) -> -AsksPermission(x,y))", "all x y.((Professor(x) & Student(y)) -> (Huddled(x,y) & -QuitedPermission(x,y)))", "all x y.((Professor(x) & Student(y) & hugged(x,y)) -> -UsePermission(x,y))", "all x y.((Professor(x) & Student(y)) -> Hungry(x,y))", "all x y z.((Professor(x) & Student(y) & Professor(z) & Hugged(x,y,z)) -> -QingPermission(x,y))", "all x y.((Professor(x) & Student(y)) -> Hungrierey(x,y))", "(Grandmother(Faculty) -> (HulkedUser(Professor) & -AskedPermission(Professor)))", "(Professor(Professor) & (UgitatesStudent(Professor) -QuotesPermission(Professor)))", "all x y.((Professor(x) & Student(y)) -> Hungered(x,y))", "all x y.((Professor(x) & Student(y)) -> Hulked(x,y))", "all x y.((Professor(x) & Student(y)) -> Hates(x,y))", "all x y.((Professor(x) & Student(y) & Holds(x,y)) -> WithoutAskingPermission(x,y))", "all x y.((Professor(x) & Student(y) & -AskedPermission(x,y)) -> Hugged(x,y))"]}
{"id": "enwn_validation_400", "nl": "It is not respectful to do things to people without their permission.", "fol": "", "prediction": ["all x.((DoingThings(x) & ToPeople(x)) -> -Respectful(x))", "all x y.((Doing(x,y) & People(y)) -> -Respectful(x,y))", "all x y.((Doing(x,y) & person(y)) -> -Respectful(x))", "all x y.((Doing(x,y) & Person(y)) -> -Respectful(x,y))", "all x y.((DoingItWithoutPermission(x) & People(y)) -> -Respectful(x,y))", "all x y.((Does(x,y) & People(y)) -> -Respectful(x))", "all x.(Respectful(x) -> -DoingWithoutPermission(x))", "all x y.((Assignment(x) & Person(y)) -> -Respectful(x,y))", "all x y.((Person(x) & DoseWithoutPermission(x,y)) -> -Respectful(x,y))", "all x y.((People(x) & Person(y)) -> -Respectful(x,y))", "all x.((DoingThingsWithoutPermission(x) & Person(x)) -> -Respectful(x))", "all x y.((Person(x) & Doing(x,y)) -> -Respectful(x,y))", "all x y.((Property(x) & Person(y)) -> -RespectfulRelationship(x,y))", "all x y z.((HasPermission(x) & Person(y) & Things(z)) -> -Respectful(x,y,z))", "all x y.((DoingThingsWithoutPermission(x) & Person(y)) -> -Respectful(x,y))", "all x y.((DoPerson(x) & Person(y)) -> -Respectful(x))"]}
{"id": "enwn_validation_401", "nl": "You should respect people.", "fol": "", "prediction": ["all x.(RespectsPeople(x) & RespectsPeople(x))", "you should respectpeople.", "all x.(RespectPeople(x) -> RespectPeople(x))", "all x.(RespectPeople(x) -> HasRightTo(x))", "all x.(RespectPeople(x) -> Respects(x))", "all x.(RespectPeople(x) -> RespectsPeople(x))", "be respectful of people.", "all x.(RespectPeople(x) -> Requires(x))", "all x y.((Person(x) & Pristine(y)) -> Respects(x,y))", "all x.(RespectsPeople(x) -> (HasPerson(x) & RespectsPeople(x)))", "all x.(RespectPeople(x) -> RespectMan(x))", "all x.(RespectPeople(x) -> ShouldOccupy(x,people))", "all x y.((Person(x) & Person(y) & Respected(x,y)) -> Respects(x,y))", "all x.(Doesn'tRespectPeople(x) -> RespectsPeople(x))", "all x.(RespectPersons(x) -> RemarksPeople(x))", "all x.(RespectsPeople(x) -> RespectsPeople(x))"]}
{"id": "enwn_validation_402", "nl": "It was disrespectful of the professor to hug the student.", "fol": "", "prediction": ["all x y.((Professor(x) & Student(y) & Hug(x,y)) -> Disrespectful(x))", "all x.((Professor(x) & Student(y) & Hug(z) & Disrespectful(x,y)) -> Disrespectful(x,z))", "it was disrespectful of professor to hug student.", "all x y.((Professor(x) & Student(y)) -> DisrespectfulToHung(x,y))", "-RespectfulOfProfessorToHug(Professor)", "all x.((Professor(x) & Student(y)) -> DisrespectfulToHug(x,y))", "(It was disrespectful(PhD) and Professor(Professor) to HugStudent(Professor))", "(LisruptiveWorship(Professor,x,y) & HugUser(y,x))", "all x y z.((Professor(x) & Student(y) & Prof(z) & Hug(x,y)) -> Disrespectful(x,z))", "no disrespectful of the professor to hug the student.", "this way it felt disrespectfulofprofessor(peer)", "-DisrespectfulOfProfessorToHoldStudent(p,p))", "all x.((Professor(x) & Student(y)) -> DisrespectfulToHur(x,y))", "all x y.((Professor(x) & Student(y)) -> DemeaningToHave(x,y))", "(Respectful(Professor) & HugStudent(Professor))", "all x y.((Professor(x) & Student(y)) -> DisrespectfulToHur(x,y))"]}
{"id": "enwn_validation_403", "nl": "The professor should not have hugged the student.", "fol": "", "prediction": ["all x.((Professor(x) & Student(y) & -HasHugged(x,y)) -> -HasHugged(x,y))", "all x y.((Professor(x) & Student(y)) -> -Hugged(x,y))", "all x y.((Professor(x) & Student(y)) -> -Hungry(x,y))", "all x.((Professor(x) & Student(y)) -> -Hugged(x,y))", "all x y.((Professor(x) & Student(y)) -> -Haggered(x,y))", "all x y.((Professor(x) & Student(y)) -> -Hulked(x,y))", "all x.((Professor(x) & Student(y)) -> -HasGiven(x,y))", "all x y.((Professor(x) & Student(y)) -> -Haggered(x,y))", "all x.((Professor(x) & Student(x)) -> -Hungry(x,y))", "prof.", "all x.(Hugged(x,student) -> Professor(x))", "all x y.((Professor(x) & Student(y)) -> -Hugged(x,y))", "all x y.((Professor(x) & Student(y)) -> -Hungered(x,y))", "all x y.((Professor(x) & Student(y)) -> -Haggered(x,y))", "all x y.((Professor(x) & Student(y)) -> -H hugged(x,y))", "the professor should not have hugged student."]}
{"id": "enwn_validation_404", "nl": "Knowing the paper's authors does not reflect the paper's merit.", "fol": "", "prediction": ["all x.((ToknowAuthors(x) & Paper(y)) -> -ReflectsMerit(y))", "all x y.((Paper(x) & Author(y)) -> -ReflectsMerit(x,y))", "all x y.((Paper(x) & Author(y)) -> -ReflectsMerit(x,y))", "all x y.((Paper(x) & Author(y)) -> -ReflectsMerit(x,y))", "all x.((Knows(x,paper,paper) & Author(x,paper)) -> -ReflectsMerit(x,paper))", "all x.((KnowsAuthors(x) & -ReflectsMerit(x)) -> Paper(x))", "all x.((WhichPaperAmendsAuthors(x)? & -ReflectsMerit(x)) -> -ReflectsMerit(x))", "all x y.((Paper(x) & Author(y)) -> -ReflectsMerits(x,y))", "all x.((KnowsAuthors(x) & -ReflectsMerit(x)) -> -RepresentsMerit(x))", "all x y z.((Paper(x) & Author(y) & Journal(z) & Knowing(x,y,z)) -> -ReflectsMerit(x,z))", "all x y z.((Paper(x) & Author(y) & Knowing(x,y)) -> -ReflectsMerit(x,z))", "all x.((Paper(x) & KnowingAuthors(x)) -> -ReflectsMerit(x))", "(KnowsAnswers(amongPapers) -> -ReflectsMerit(amongPapers))", "all x y.((Paper(x) & Paper(y)) -> -ReflectsMerc merit(x,y))", "all x y.((DoesReading(x,y) & Paper(y)) -> -ReflectsMerit(x,y))", "all x y.((Paper(x) & Author(y)) -> -ReflectMerit(x,y))"]}
{"id": "enwn_validation_405", "nl": "You should score \npapers based on merit.", "fol": "", "prediction": ["all x.((Paper(x) & PostedOnMean(x)) -> Score(x,y))", "all x.((Paper(x) & BasedOnMerced(x)) -> Scores(x,x))", "all x y.((Paper(x) & Merit(y)) -> ScoreBasedOn(x,y))", "all x.(ScorePaper(x) -> RefersToMeet(x))", "all x.((Paper(x) & BasedOnMerit(x)) -> Scores(x))", "exists x.(Paper(x) & Score(x,memory))", "all x.((Paper(x) & Merit(x)) -> Scores(x,y))", "all x.((Paper(x) & BasedOnMerit(x)) -> Scores(x,y))", "all x.(ScorePaper(x) & BasedOnMerit(x))", "all x.(ScorePaper(x) -> MeritBased(x))", "all x.(Scores(x,y) -> MeritBased(y))", "all x y.((Paper(x) & Merit(y)) -> Score(x,y))", "all x.((Paper(x) & BasedOnMean(x)) -> Scores(x,y))", "all x.(ScorePaper(x) -> BasedOnMean(x))", "all x.(ScorePaper(x) -> BasedOnMerit(x))", "all x.(ScorePaper(x) -> BasedOnMerit(x))"]}
{"id": "enwn_validation_406", "nl": "Andy gave a high score to the paper because he knew the authors.", "fol": "", "prediction": ["all x y.((Admoy(x) & Paper(y) & KnowledgeOfAuthors(y)) -> HighScoreTo(x,y))", "all x y.((Andy(x) & Paper(y) & ServedOn(x,y)) -> HighScore(x,y))", "all x y.((Andy(x) & Paper(y) & KnownAuthors(x,y)) -> HighScore(x,y))", "all x y.((Andy(x) & Paper(y)) -> (GaveHighScore(x,y) & KnowAgents(x,y)))", "all x y.((Andy(x) & Paper(y) & KnowsAuthors(x,y)) -> HighScore(x,y))", "all x y.(((Article(x) & Paper(y)) -> HighScore(x,y))", "(HighScore(Andy) & KnewAuthors(Andy))", "all x y.((Andy(x) & Paper(y)) -> HighScore(x,y))", "all x y.((Andy(x) & Paper(y) & KnowsAuthors(x,y)) -> HighScore(x,y))", "all x y.((Andy(x) & Paper(y) & StartedKnowingAuthors(x,y)) -> HighScore(x,y))", "all x y.((Walter(x) & Paper(y)) -> HighScore(x,y))", "(HighScore(Andy) -> KnowsAuthors(Andy,Column)))", "all x y.(((Stone(x) & Paper(y) & KnewAuthors(x,y)) -> HighScore(x,y))", "all x.((Andy(x) & Paper(y) & KnowledgeOfAuthors(x)) -> GivesHighScore(x,y))", "all x y.((Andy(x) & Paper(y) & KnowsAuthors(x,y)) -> GivenHighScoreTo(x,y))", "all x y z.((Adobe(x) & Paper(y) & Author(z)) -> HighScore(x,y,z))"]}
{"id": "enwn_validation_407", "nl": "Giving a high score to a paper because you know the authors is wrong.", "fol": "", "prediction": ["all x.((HighScore(x) & KnowsAuthor(x,x)) -> Wrong(x))", "all x.((Paper(x) & KnowEdwards(x)) -> IsWrong(x))", "all x y.((HighScore(x) & Paper(y) & KnowsAuthors(x,y)) -> Wrong(x))", "all x y.((HighScore(x) & Paper(y) & Fork(y)) -> IsWrong(x,y))", "all x y.((Paper(x) & Paper(y) & KnowsAuthors(x,y)) -> WrongScore(x))", "all x y.((Paper(x) & Paper(y) & KnowsAuthors(x,y)) -> WrongScore(x))", "all x y.((Phrase(x) & Paper(y) & KnowsAuthorsOpposites(x,y)) -> Wrong(x))", "all x y.((HighScore(x) & Paper(y) & KnowsAuthors(x,y)) -> Wrong(x))", "all x y.((Dose(x) & Paper(y) & KnowsAuthors(x,y)) -> WrongScore(x,y))", "all x y z.((HighScoreTo(x,y) & Paper(z) & KnowAuthors(y,z)) -> Wrong(x,z))", "all x y.((HighScore(x) & Paper(y) & KnowsAuthor(x,y)) -> Bad(x))", "all x y.((HighScore(x) & Paper(y) & KnowsAuthors(y)) -> False(x,y))", "all x.((Path(x) & KnowsAuthors(x)) -> HighScore(x))", "all x y z.((HighScore(x) & Paper(y) & Author(z) & Knows(x,z)) -> Worst(x))", "all x y z.((HighScore(x) & Paper(y) & Author(z) & Knows(x,z)) -> Wrong(y))", "all x y.((KnowsAuthors(x,y) & HighScore(x,y)) -> Worst(z))"]}
{"id": "enwn_validation_408", "nl": "Andy should not have scored the paper based on how well he knew the authors.", "fol": "", "prediction": ["all x.((Andy(x) & WellKnowedAuthors(x,y)) -> -ScoresPaper(x,y))", "(ScoredBy(Article(And Andy) and NotBasedOnKnowledge(Andew,Authors))", "all x y z.((Adrian(x) & Paper(y) & Author(z)) -> -Scored(x,y,z))", "all x y.((Articon(x) & Paper(y) & KnowsAuthors(x,y)) -> -Score(x,y))", "((Andy(Andy) & Paper(Andrew) & knewAuthors(Andrew)) -> -Scored(Andy,Book))", "((Score(Andy) & NotWellKnowedAuthors(Andy)) -> None(Andy))", "all x y.((Andy(x) & Paper(y)) -> -ScoredBasedOnKnowledge(x,y))", "all x.((Andy(x) & KnowledgeAlikeauthors(y)) -> -ScoredPaper(x,y))", "(-ScoredAndy(Andry,paper) vs. WellKnowedAuthors(Andy))", "-((Andy(Andy) & WellKnowedAuthors(Andy)) -> ScoredPaper(Andy,OfPaper,OfPaper(Andy)))", "all x y.((Paper(x) & Andy(y)) -> -ScoredBasedOnKnowledge(y,x))", "all x.((Andy(x) & KnowledgeRelationship(x) & -KnowsAuthors(x)) -> -ScoresPaper(x))", "all x y.((Andy(x) & Paper(y) & WellKnownAuthors(x,y)) -> -ScoredBy(x,y))", "and could not have scored based on knowingauthors.", "all x y.((Andy(x) & Paper(y) & WellKnowsAuthors(x,y)) -> -Scored(x,y))", "-(ScoredPaper(Andy,(Andy) & WellKnewAuthors(Andy)))"]}
{"id": "enwn_validation_409", "nl": "Throwing things out of frustration is an example of having a temper tantrum.", "fol": "", "prediction": ["all x (TossingOutFrustration(x) -> TemperamentTanzrum(x))", "all x.((ThrewdOutOfFrustration(x) & Frustration(x)) -> TempestTantrum(x))", "all x y.((ThrowsOver(x) & Things(y) & OutOfFrustration(x)) -> TemperamentTanrum(x))", "all x.(ThrewsOutFrustration(x) -> TemperTandrum(x))", "all x.((ThrewthingsOutOfFrustration(x) & TempestTension(x)) -> Has(x,y))", "all x.(TurningOutFrustration(x) -> TemperTastrum(x))", "all x.((ThrewsOutFrustration(x) & HasTemperStorm(x)) -> HasTemperStorm(x))", "all x.(ThousingThingsOutOfFrustration(x) -> TemperamentStantrum(x))", "all x.((Treshold(x) & ThrowingOutFrustration(x)) -> TemperantTatrum(x))", "all x.((Treatment(x) & ThrowsOutOfFrustration(x)) -> DurthTanzrum(x))", "all x.((TossingThingsOutOfFrustration(x) & TemperanceTandrum(x)) -> HasTemperTrum(x))", "all x.((TweetsOutOutOfFrustration(x) & Fury(x)) -> TemperTanrum(x))", "all x.(TurningDogsOutOfFrustration(x) -> TemperamentTrum(x))", "all x.((TurnsOfFrustration(x) & HasTemperTerrum(x)) -> HasTemperTentrum(x))", "all x.(TurningOutFrustration(x) -> TemperTatrum(x))", "all x.((TurningOut(x) & Flamming(x)) -> TempestTentrum(x))"]}
{"id": "enwn_validation_410", "nl": "People should not let their emotions get out of control.", "fol": "", "prediction": ["all x.(People(x) -> -LetsEmotionsGetOutOfControl(x))", "all x.((People(x) & -LetsEmotionsOutOfControl(x)) -> -LetsEmotionsGetOutOfControl(x))", "all x.((Person(x) & -LacksEmotionsOutOfControl(x)) -> -LetsEmotionsOutOfControl(x))", "all x.(People(x) -> -LetsEmotionsGetOutOfControl(x))", "all x.((Person(x) & -EmotionsOutOfControl(x)) -> -Atlas(x,emotions))", "all x.(Person(x) -> -LetsEmotionsOutOfControl(x))", "all x y.((Person(x) & Emotions(y)) -> -LetsGetOutOfControl(x,y))", "all x.((Person(x) & -LetsEmotionsOutOfControl(x)) -> -LikelyLetsEmotionsGetOutOfControl(x))", "all x.(Weapon(x) -> -AllowsEmotionsFromOutOfControl(x))", "all x.((People(x) & -LetsEmotionsOutOfControl(x)) -> -LetsEmotionsGetOutOfControl(x))", "all x.(Person(x) -> -LetsEmotionsGetOutOfControl(x))", "all x.((Person(x) & -LaysEmotionsOutOfControl(x)) -> -MakingEmotionsOutOfControl(x))", "all x.((People(x) & -LoseEmotionsOutOfControl(x)) -> -LetsEmotionsGetOutOfControl(x))", "all x.(DesiringToOperateEmotions(x) -> -LetsEmotionsOutOfControl(x))", "all x.((Person(x) & -LetsEmotionsOutOfControl(x)) -> -LetsEmotionsOutOfControl(x))", "all x.(Personal(x) & -(LetsEmotionsGetOutOfControl(x) & People(x)))"]}
{"id": "enwn_validation_411", "nl": "Having a temper tantrum in public means you are not in control of your emotions.", "fol": "", "prediction": ["all x.((Turbulence(x) & InPublic(x)) -> -InControlOfEmotions(x))", "all x.((TemperThorm(x) & Public(x)) -> -ControlsEmotions(x))", "all x.(TemperTanrum(x) -> -InControlOfEmotions(x))", "all x.(Trauma(x) -> ((Public(x) & -InControlOfEmotions(x)) | Public(x))))", "all x.(HasTemperToner(x) -> NoEmotionControl(x))", "all x.(TemperTandem(x) -> -InControlOfEmotions(x))", "all x y.((TemperTanzrum(x) & Public(y)) -> -InControlOfEmotions(x,y))", "all x y.((TemperTantrum(x) & Public(y)) -> -ControlsEmotions(x,y))", "all x.((StormThur(x) & InPublic(x)) -> -InControlOfEmotions(x))", "all x.((TemperTantrum(x) & Public(x)) -> -InControlOfEmotions(x))", "all x.((TortureTangrum(x) & Public(x)) -> -InControlOfEmotions(x))", "all x.((Tension(x) & Public(x)) -> -InControlOfEmotions(x))", "all x.((TemperTantrum(x) & Public(x)) -> -InControlOfEmotions(x))", "all x.((TemperTannrum(x) & InPublic(x)) -> -InControlOfEmotions(x))", "all x.((TemperTanzumInPublic(x) & NotInControlOfEmotions(x)) -> -TenseInPublic(x))", "all x.((TemperTanner(x) & Public(x)) -> -ControlEmotions(x))"]}
{"id": "enwn_validation_412", "nl": "Martha threw a chair out of frustration while she was at the DMV.", "fol": "", "prediction": ["all x y z.((Martha(x) & Chair(y) & DMV(z)) -> ThrewOutOfFrustration(x,y))", "(Harry,DMV) & ThrowsChair(Martha,Frustration))", "(AtDMV(Marty) & ThrewChairOutOfFrustration(Marty,DMV))", "(ThrewChairOutOfFrustration(Martha,MMV))", "(AtDMV(Martha) & ThrowsChair(Martha))", "all x.((Grandmother(x) & DMV(x)) -> ThrowsChairOutOfFrustration(x))", "(TradingStartup(Martha(Martha) & AtDMMV(martha(martha)) -> ThrewChairOutOfFrustration(martha))", "(Herbiage(Martha) & ThrewChairOutOfFrustration(Martha,MDMV))", "all x.((Maltha(x) & AtDMV(x)) -> ThrewChairOutOfFrustration(x))", "(ThrewChairOutOfFrustration(Mary) & atMV(Mary))", "all x.((Martha(x) & DMV(x)) -> ThrewChairOutOfFrustration(x))", "(ThrewChairOutOfFrustration AtDMV(Mary))", "all x y z.((Martha(x) & Chair(y) & DMV(z) & WasAt(x,y,z)) -> ThrewOutOfFrustration(x,y))", "(MargarettThrew(Margaret,Chair) & WasAtDMV(Margaret,Frustration))", "Martha threws ChairOutOfFrustrationAtDMV(Martha)", "(ThrewChair(Martha) OutOfFrustration(Martha))"]}
{"id": "enwn_validation_413", "nl": "The DMV is a public location.", "fol": "", "prediction": ["all x.(DMV(x) -> PublicLocation(x))", "all x.(DMV(x) -> PublicLocation(x))", "(PublicLocation(DMV) -> Located(DMV))", "all x.(DMV(x) -> PublicLocation(x))", "all x.((DMV(x) & PublicLocation(x)) -> Available(x))", "all x.(DMV(x) -> PublicLocation(x))", "all x.(DMV(x) -> PublicLocation(x))", "all x.(DMV(x) -> PublicLocation(x))", "all x.(DMV(x) -> PublicLocation(x))", "all x.(DMV(x) -> PublicLocation(x))", "all x.((DMV(x) & PublicLocation(x)) -> Public(x))", "all x.(DMV(x) -> PublicLocation(x))", "all x.(DMV(x) -> PublicLocation(x))", "all x.(DMV(x) -> PublicLocation(x))", "all x.(DAM(x) -> PublicLocation(x))", "all x.((DMV(x) & PublicLocation(x)) ->."]}
{"id": "enwn_validation_414", "nl": "People should not have temper tantrums in public.", "fol": "", "prediction": ["all x y.((Person(x) & Public(y)) -> -HasTemperStorm(x,y))", "all x.((Person(x) & -StormInPublic(x)) -> -HasTemperament(x))", "all x y.((Person(x) & Public(y)) -> -HasTemperatureTentrum(x,y))", "all x.(Person(x) -> -TemperTentrumsInPublic(x))", "all x.(DontHasTemperatureThursday(x) -> -InPublic(x))", "all x.((Person(x) & -HasTemperamentAttraction(x)) -> -HasTemperamentInPublic(x))", "all x.((People(x) & -HasTemperatureTentrums(x))", "all x.(Person(x) -> -TemperTentrums(x))", "all x.((People(x) & -TemperatureTarant(x)) -> -HasTemperStormsInPublic(x))", "all x y.((People(x) & Public(y)) -> -HasTemperatureTentrum(x,y))", "all x.(TemperTentrum(x) -> -Telegraphinth(x))", "all x.(TurnTrum(x) -> -(Public(x) & Person(x)))", "all x.(Person(x) -> -HasTemperTentrumsInPublic(x))", "all x.(People(x) & -(HasTempestualStormsInPublic(x) & Public(x)))", "all x.((Person(x) & -HasTemperatureTentrum(x)) -> -HasTemperatureTentrum(x))", "all x.(DoubleTatrums(x) -> -HasStimulationInPublic(x))"]}
{"id": "enwn_validation_415", "nl": "People shouldn't throw things in public out of frustration.", "fol": "", "prediction": ["all x.(People(x) -> -ThrewOutOfFrustration(x))", "all x.(Person(x) & -TasteThem(x))", "all x y.((People(x) & Public(y)) -> -TogetherOutOfFrustration(x,y))", "all x y.((Person(x) & Object(y)) -> -TellsOutOfFrustration(x,y))", "all x.((People(x) & -Position[x)) -> ThrowsInPublicOutOfFrustration(x))", "all x y.((Person(x) & Public(y)) -> -TowsFrustration(x,y))", "all x.((Person(x) & -PullOutFrustration(x)) -> -ThrewInPublic(x))", "all x.((Person(x) & -Threw(x,Public)) -> -Frustrated(x))", "all x y.((Person(x) & Public(y)) -> -GawsInFrustration(x,y))", "all x.((Person(x) & -ThrewsInPublicOutOfFAulth(x)) -> -PutsInPublicOutOfFrustration(x))", "all x.((People(x) & -TwistsInPublicOutOfFrustration(x)) -> -TreatOutOfFrustration(x))", "all x y.((Person(x) & Public(y)) -> -ShadowsOutOfFrustration(x,y))", "all x y.((Person(x) & Public(y)) -> -ThreadsOutOfFrustration(x,y))", "all x.(PublicTreatment(x) -> -FrustrationInPublic(x))", "all x.(TweresInPublicOutOfFrustration(x) -> -PublicBakeup(x))", "all x.((Person(x) & -ThrewsInPublicOutOfFrustration(x)) -> -ShouldSpoken(x))"]}
{"id": "enwn_validation_416", "nl": "Martha thew a chair out of frustration in public.", "fol": "", "prediction": ["(Matthew) & Chair OutOfFrustrationInPublic(Martha,Public))", "all x.(Mamama(x) -> (WorksOutOfFrustration(x) & InPublic(x)))", "all x y.((MarthaThew(x) & Chair(y)) -> MadeWith(x,y))", "(MammarathewsChair(Marc) & OutOfFrustration(Marc))", "(See Martha thewsChair(Martha) & OutOfFrustration(Martha))", "all x y.((MarthaThew(x) & Chair(y)) -> FrustrationInPublic(x,y))", "all x y.((Marthathew(x) & Chair(y)) -> FreedomOutOfPublic(y,Public))", "all x.((Mamath(x) & Chair(y)) -> OutOfFrustrationInPublic(x,y))", "all x.(MamethithThewChairOutOfFrustration(x) -> ToConsider(x))", "all x y.((MarthaThewChair(x) & Fear(y)) -> -Frustration(x,y))", "Martha thews Chair out of frustration in public.", "all x.(Matthew(x) -> (Jesus,y) & Chair(y)))", "all x y.((Mabel(x) & Chair(y)) -> ForFrustrationInPublic(z))", "Martha thewschairoutofFrustrationInPublic(Martha,Martha,By(Martha))", "(MameththewChair(Martha) & FrustrationInPublic(Martha))", "all x y.((Mamathew(x) & Chair(m) & Public(y)) -> (Chair(x,m) & Frustration(f)))"]}
{"id": "enwn_validation_417", "nl": "Martha should not have thrown the chair.", "fol": "", "prediction": ["Martha should not have thrown theChair.", "Martha should not have thrown thechair.", "Martha should not have thrown the chair.", "Martha -ThrewChair(Margaret)", "Martha should not have thrownchair.", "(-ThrewChair(Margaret))", "Martha neesaar aarvoordaan iden.", "Martha ne-ThrewChair(n)", "-HasTotenedChair(Martha)", "Martha -ThrewChair(Mary)", "Martha should not have thrown thechair.", "Martha shouldn't have thrown chair(martha)", "Martha should not have thrownchair.", "Martha neeeds chair(n) p.(Matthew,p.(c) & -flung(e),c)))", "Martha should not have thrown thechair.", "Martha ne had threwchair(n)."]}
{"id": "enwn_validation_418", "nl": "Not helping someone in trouble is allowing a bad thing to happen to them.", "fol": "", "prediction": ["all x.((HelpsTragedy(x) & BadDomain(x)) -> -HelpsBrassInTrouble(x))", "all x.((HelpInTrouble(x) & -HelpToGive(x)) -> AllowBadOfThing(x))", "all x y.((HelpsInTrouble(x) & Person(y)) -> AllowsBadThing(x,y))", "all x.((SinceHelpingInTraurgy(x) & BadThing(x)) -> -HelpingBetween(x))", "all x.((NonHelpingInTrouble(x) -> AllowingBadThingToSucceed(x))", "all x.((NotHelping(x) & PuttingInTrouble(x)) -> BadThingDoes(x))", "all x y.((HelpInTrouble(x) & Helping(y,x) & HelpingPeople(y)) -> AllowingBadThing(x))", "all x.((NotHelping(x,p) & PersonInTrouble(x)) -> AllowsBadThingToFall(x))", "all x y.((HelpsInTrouble(x) & Customer(y)) -> AllowsBadThing(x,y))", "all x.((FallingTrouble(x) & Helping(x)) -> BadThingToOccur(x))", "all x y.((HelpingPerson(x) & Trouble(y)) -> AllowingBadThing(x,y))", "all x.((HelpingInTrouble(x) & AllowingBadThingToOccur(x)) -> HelpToOccur(x))", "all x y.((Helping(x) & PersonInTrouble(x) & -Helping(x,y)) -> AllowsBadThing(x))", "all x y.((Helps(x,y) & Troubled(y)) -> AllowsBadThing(x,y))", "all x.((HelpingInTrouble(x) & AllowingBadThing(x)) -> HelpingTrouble(x))", "all x.((NegativeHelp(x) & BadThing(x)) -> AllowsToOccur(x))"]}
{"id": "enwn_validation_419", "nl": "Allowing a bad thing to happen to someone is considered harming them.", "fol": "", "prediction": ["all x y.((BadThing(x) & Person(y) & HappensTo(x,y)) -> Harms(x))", "all x y.((BadThing(x) & Person(y)) -> Harms(x,y))", "all x.((BadThing(x) & HappensTo(x,Person)) -> Harms(x))", "all x.((AllowsBadThing(x) & HappensToAnyone(x)) -> HarmsOne(x))", "all x.(GainToCause(x) -> Hazarding(x))", "all x.((BadThing(x) & HappensToSomeone(x)) -> Harming(x))", "all x y.((BadThing(x) & Person(y) & OccursTo(x,y)) -> Harms(x,y))", "all x.((AllowsBadThingToOfPerson(x) & HappensToOther(x)) -> Harms(x))", "all x.((AlertBadThingToPeople(x) & HappensBetweenPerson(x)) -> HarmsPeople(x))", "all x y.((LimitsBadThing(x) & Person(y)) -> Harms(x,y))", "all x.((GainThanPerson(x) & HappensTo(x,y)) -> Harms(x))", "all x.((AllowsBadThing(x) & BadThingToPerson(x)) -> HarmsAt(x,Person))", "all x.(HottingAtmosphere(x) -> BadThing(x))", "all x y.((GuideDisaster(x) & Person(y) & HappensTo(x,y)) -> Harms(x,y))", "all x y.((Person(x) & BadThing(y)) -> Harms(x))", "all x.((LimitedBadThing(x) & HappensTo(x,y)) -> HarmingPeople(x))"]}
{"id": "enwn_validation_420", "nl": "You should not do something that harms someone else.", "fol": "", "prediction": ["all x.((Do(x) & DidNone(x)) -> HarmsMan(x))", "all x.((DoesNayHumors(x) & -HasPerson(x)) -> -HasPerson(x))", "all x.((Tells(x) & HarmsAnother(x)) -> -Dose(x))", "all x.((Dose(x) & Damages(x)) -> -Dose(x,y))", "all x y.((DoSomething(x) & Person(y) & -HasHunt(x,y)) -> -HasHazard(x,y))", "all x.((Does(x) & HarmsAnother(x)) -> -Do!", "all x.((Do(x) & -HarmsAnother(x)) -> -TakeYourselfToOther(x))", "-(Mortgages(mom,a) & Person(y))", "all x.((Do(x) & -HarmsAnother(x)) -> -HasAnother(x))", "all x y.((Employee(x) & Person(y)) -> -Harms(x,y))", "all x.((Doing(x) & HarmsAnother(x)) -> -(Does(x,y) & GetsPossible(x)))", "all x.((Do(x) & Do(x,y)) -> -HasActor(x,y))", "all x.((Does(x) & HarmsOther(x)) -> -Mortgages(x))", "all x y.((Do(x) & Person(y) & Health(z)) -> -HasHasHasHasHas(x,y,z))", "all x.((Do(x) & NotHarmfulToOther(x)) -> -DoWhatHasAction(x))", "all x.((Dosomething(x) & -HasPoorOneOther(x)) -> -HasPoorPoorPoorPoor(x))"]}
{"id": "enwn_validation_421", "nl": "Joey cried out for help when he was being bullied.", "fol": "", "prediction": ["all x y.((Joey(x) & Bullied(y)) -> CriedOutForHelp(x,y))", "all x.((Bolt(x) & Joey(y)) -> CriedOutForHelp(y,x))", "all x.(Bullyed(x) -> CriedOutForHelp(x))", "all x y.((Joey(x) & Bullied(y)) -> CriesOutForHelp(x,y))", "all x y.((Joey(x) & Bullied(y)) -> CryedOutForHelp(x,y))", "all x.((Joey(x) & Bullied(x)) -> CriesOutForHelp(x))", "all x y.((Bolly(x) & Joey(y)) -> CriedOutForHelp(y,x))", "all x.(Bullyed(x) -> CriesOutForHelp(x))", "(Shelter(joey,bullied) & CriesOutForHelp(joey,Shelter))", "all x.((Joey(x) & Bullied(x)) -> CrysOutForHelp(x))", "all x y.((CryedOutForHelp(x) & Bullied(y)) -> Joey(x))", "all x.(Blooded(x) -> CriesOutForHelp(x))", "all x.((Joey(x) & Bullied(x)) -> CriedOutForHelp(x))", "all x.(BullyedOf(x) -> CryedOutForHelp(x))", "all x.((Joey(x) & Bullied(x)) -> CriesOutForHelp(x))", "all x y.((Bullying(x) & Bullied(y)) -> CriesOutForHelp(x,y))"]}
{"id": "enwn_validation_422", "nl": "Jan heard Joey but didn't do anything.", "fol": "", "prediction": ["all x.((Jan(x) & Joey(x)) -> IHeardDad(x,y))", "Jan heard Joey & -didNothing(Jan,x))", "(HeardJon,Joey) & -DoesSound(Jan))", "(HeardJoey(Jan) & DidNothing(Jan))", "(HeardJoey(Jan) & -DoesWhat(Jan))", "all x.((Jan(x) & Joey(y)) -> (Heard(x,y) & -Followed(x,y)))", "Jan heard Joey, but didn't do anything.", "Jan heard Joey, didn't do much.", "(HireJay(Jan) & -Chat(Jan))", "(HeardJon(Jan) & DidNegligence(Jan))", "Jan heard and heard Joey. -(Jan(Jan,joey,joey) and -Jan(j,x)))", "(Jan(x) & ListensToJoey(x) & -Does(x))", "Jan heard Joey, but did Nothing.", "(HeardJenJoey(Jan) & DidNothing(Jan))", "Jan heard Joey but didn't do anything.", "Jan heard Joey in a radio interview."]}
{"id": "enwn_validation_423", "nl": "Not helping someone in trouble is considered harming them.", "fol": "", "prediction": ["all x.((NeitherHelpsInTrouble(x) & Person(x)) -> Harms(x))", "all x.((HelpsInTrouble(x) & -HelpsInTrouble(x)) -> HarmsInTrouble(x))", "all x.((Helping(x) | Harming(x)) -> NotHelpingInTrouble(x))", "all x y.((Helping(x,y) & Person(y)) -> Harms(x,y))", "all x.((Helping(x,y) & Person(z)) -> Harms(x,z))", "all x.((HelpsInTrouble(x) & NotHelping(x)) -> Harms(x))", "all x.((HelpingInTrouble(x) & HarmingPerson(x)) -> NotHelping(x))", "all x.((HelpsInTrouble(x) & -HelpsInTrouble(x)) -> HarmsInTrouble(x))", "all x.((HelpingPerson(x) & Trouble(x)) -> HatingPerson(x))", "all x y.((HelpsInTrouble(x) & HelpsInTrouble(y)) -> Harms(x,y))", "all x.((HelpingInTrouble(x) & NotHelpingInTrouble(x)) -> HarmingInTrouble(x))", "all x.((Helping(x) & InTrouble(x)) -> Harms(x))", "all x.((Helping(x) & PersonInTrouble(x)) -> Harms(x))", "all x.((Neighboring(x) & PersonInTrouble(x)) -> Harming(x))", "all x.((Helping(x) & InTrouble(x)) -> Harms(x))", "all x.((NeigthHelpingInTrouble(x) & Person(x)) -> Harming(x))"]}
{"id": "enwn_validation_424", "nl": "You should help people in trouble.", "fol": "", "prediction": ["all x y.((Person(x) & Trouble(y)) -> DelegatesHelp(x,y))", "all x.(HelpsPeopleInTrouble(x) -> HelpsPeople(x))", "all x.(HelpPeopleInTrouble(x) -> HelpMany(x))", "all x.(HelpInTrouble(x) -> HelpPeople(x))", "all x y.((Person(x) & Trouble(y)) -> ShouldHelp(x,y))", "all x y z.((Person(x) & Trouble(y) & RequiresHelp(x,y)) -> (Helps(x,z) | Helps(x,y)))", "all x y.((Apporces(x,y) & Person(y)) -> HelpsInTrouble(x,y))", "all x.(HelpPerson(x) -> InTrouble(x))", "all x y.((PeopleInTrouble(x) & PersonInTrouble(y)) -> Helps(x,y))", "all x.(HelpsPeopleInTrouble(x) -> HelpsPeople(x))", "all x.((PartOfPerson(x) & InTrouble(x)) -> HelpsIn(x,it,z))", "all x.(HelpOutgoingPeopleInTrouble(x) -> ShouldHelp(x))", "all x y.((Person(x) & Trouble(y)) -> Helps(x,y))", "all x.(AllowsHelp(x) -> InTrouble(x))", "all x.(HelpPeopleInTrouble(x) -> HelpInTrouble(x))", "all x.(HelpsPeopleTrouble(x) -> HelpsPeopleInTrouble(x))"]}
{"id": "enwn_validation_425", "nl": "Jan heard Joey crying for help but didn't do anything.", "fol": "", "prediction": ["Jan heard Joey crying for Help, but he did not do anything.", "all x.((Jan(x) & CriesForHelp(x,Joey)) -> -(CanDo(x,Joey) | CanDo(x,Joey))))", "Jan heard JoeyCryingButdidNothing(Jan)", "Jan heard Joey crying for help.", "(HeardJoeyCryingForHelp(Jan,Jay) & -DoesWhat(Jan))", "all x y.((Jean(x) & Joey(y)) -> CriedForHelp(x,y))", "the phone rang for help but didn't do anything, Jan.", "all x.((Jan(x) & Joey(y)) -> (CriesForHelp(y,x) | -DoesWhat(y,x)))", "(HeardThomasCrying(Janey,Help) & -DoesTogether(Janey,Help))", "all x.(Jan(x) -> (Heard(x,Joey,SayJoey) & -Does(x,Joey)))", "Jan heardJoeyCryingForHelp(Jan) & -Does(Jan))", "all x.(Jan(x) -> (Heard(x,Joey) & CryingForHelp(x) & -Focuses(x)))", "Jan heard JoeyCrying(Jan,Jan) & -DoesNews(Jan))", "(HeardJackyCryingForHelp(Jan) & -HasDoing(Jan))", "all x y.((Jan(x) & Joey(y)) -> CriesForHelp(x,y))", "-(Jan(Jon) & JoeyCry(Joey,Joey))"]}
{"id": "enwn_validation_426", "nl": "Jan should have helped Joey.", "fol": "", "prediction": ["(LedByJan(Jan) -> ShouldHaveHelpedJoey(Jan))", "-HelpedJan(Jan)", "Jan shouldve aidedJoey.", "all x.(SpokenJan(x,Jan) -> ShouldHelpedJoey(x,Joey))", "all x.(Ban(x) -> ShouldHelpJoey(x))", "Jan should have helped Joey.", "ArrestedHelpDean(Jan)", "Jan. should have helpedJoey.", "Jan should have helped Joey.", "Jan ShouldHasHelpedJoey(Jan)", "Jan ShouldApartFromJoey(jan,jus,joey)", "-should_helpedJan(Jan)", "Joan should have helped Joey.", "-shouldHadJanHelpedJoey(x)", "Jan should have helped Joey.", "All x.(JanHasHelpedJoey(x) -> ShouldHaveHelped(x,Joey))"]}
{"id": "enwn_validation_427", "nl": "Mark took his kids out of school to help him beg other people for money.", "fol": "", "prediction": ["all x y.((Mark(x) & Kid(y) & TakingOutOfSchool(x,y)) -> HelpsBeg(x,y))", "all x y z.((Mark(x) & Kid(y) & Person(z)) -> (TakesOutOfSchool(x,y,z) & HelpsBeg(x,y,z)))", "all x y z.((Mark(x) & Kids(y) & School(z)) -> (TakesOutOf(x,y,z) & HelpsBeg(z,y)))", "all x y z.((Mark(x) & Kid(y) & Child(z)) -> AppointedToBeg(x,y,z))", "all x y z.((Mark(x) & Kid(y) & Student(z)) -> (TakenOutOfSchoolToHelpBeg(x,y,z)))", "all x y.((Mark(x) & Kid(y)) -> (CoveredOutOfSchool(x,y) & BegsForMoney(x,y)))", "all x y.((Mark(x) & Kid(y)) -> BegsForMoney(x,y))", "all x y.((Mark(x) & Kid(y)) -> ForGiveGives(x,y))", "all x y z w.((Mark(x) & Kid(y) & Person(z) & InSchool(x,y) & InSchool(z,w)) -> Neighbor(x,y,z))", "all x y.((Mark(x) & Child(y)) -> TakesOutOfSchoolToBegOtherPeople(x,y))", "all x y.((Mark(x) & Kid(y)) -> TakenOutOfSchoolToHelpBegOtherForMoney(x,y))", "Mark took out of school kids to help beg & begspeopleformoney.", "all x y z.((Mark(x) & Kid(y) & Child(z)) -> TakenOutOfSchoolToBegForMoney(x,y,z))", "all x y.((Mark(x) & Kid(y) & OutOfSchool(x)) -> HelpsBegForMoney(x,y))", "all x y.((Mark(x) & Kid(y)) -> (TakesOutOfSchoolToHelpBeg(x,y)))", "all x.(MarksKitchen(x) -> TakesOutOfSchool(x))"]}
{"id": "enwn_validation_428", "nl": "Asking people for money is a way to make money.", "fol": "", "prediction": ["all x.(AsksForMoney(x) -> MakesMoney(x))", "all x.(AsksForMoney(x) -> MakesMoney(x))", "all x y.((AskForMoney(x) & Person(y)) -> MakesMoney(x,y))", "all x y.((People(x) & AsksForMore(x,y)) -> MakesMoney(x))", "all x.((Person(x) & AsksForMoney(x)) -> MakesMoney(x))", "all x y.((Person(x) & Person(y)) -> MakesMoney(x,y))", "all x.(AsksForMoney(x) -> MakesMoney(x))", "all x.(AsksForMoney(x) -> MakesMoney(x))", "all x y.((AsksPeopleForMoney(x) & IsMakingMoney(y)) -> MakesMoney(x))", "all x.(AskPeopleForMoney(x) -> MakesMoney(x))", "all x y.((Person(x) & Person(y) & AsksForMoney(x,y)) -> MakesMoney(x))", "all x.((People(x) & AskForMoney(x)) -> MakesMoney(x))", "all x.((CallsForMoney(x) & MakesGroundBeingMade(x)) -> AsksForMoney(x))", "all x.(AskPeopleForMoney(x) -> MakesMoney(x))", "all x.((MakingMoney(x) & AsksPeopleForMoney(x)) -> MakesMoney(x))", "all x.(IsAskPersonForMoney(x) -> MakeMoney(x))"]}
{"id": "enwn_validation_429", "nl": "Removing your kids from school is detrimental to them.", "fol": "", "prediction": ["all x.((Kid(x) & RemovedFromSchool(x)) -> DelayingTo(x,Mildly(x))", "all x y.((Kid(x) & School(y)) -> Dandering(x,y))", "all x.(RemoveDamage(x) -> HarmfulToKids(x))", "all x y z.((Kid(x) & School(y) & School(z)) -> Delayed(x,y,z))", "all x.(RemovesKidsFromSchool(x) -> Damaged(x))", "all x.(RemovesDumperKidsFromSchool(x) -> DelirableToKids(x))", "all x.((Child(x) & ReturnsToSchool(x)) -> Destroying(x,y))", "all m.((Kid(m) & FromSchool(m)) -> DeliriousTo(m,m,l,m))", "all x,y.((Child(x) & RemoveFromSchool(x,y)) -> DetrimentalToKids(y,x))", "all x y.((Child(x) & School(y)) -> DetrimentalTo(x,y))", "all x.(RemovesParent(x) -> DelayedToKids(x))", "all x.(RemoveYourKids(x) -> DetrimentalToSchool(x))", "all x y.((Kid(x) & School(y) & Removing(x,y)) -> DubiousTo(x,y))", "all x.(RemovesKids(x) -> DefensiveToChildren(x))", "all x.(RemovingKidsFromSchool(x) -> DetrimentalToKids(x))", "all x y.((Kid(x) & Deterioring(x,y)) -> RemovesFromSchool(x,y))"]}
{"id": "enwn_validation_430", "nl": "To exploit someone is the action or fact of treating someone unfairly in order to benefit from their work.", "fol": "", "prediction": ["all x y z.((Exploit(x) & Person(y) & (Action(x) | FactOfTreatingUnfairly(x,y) & BenefitsFromWork(x,z))) -> Exploit(x,y))", "all x.((Treatment(x) & Person(x) & InBelief(x)) -> Exploitation(x))", "all x.((Approach(x) & UnfairTreatment(x) & GainTaxReport(x)) -> ExploitActionOrFact(x))", "all x y.((Worker(x) & (TreatsUnfairly(x,y) | BenefitsFrom(x,y))) -> Exploits(x,y))", "all x y.((ActionOrFactual(x) & Person(y) & TreatsUnfairlyInDependency(y,x)) -> Exploits(x,y))", "all x.(Expanding(x) -> (\u201cAction(x) | Act(x) & TreatsUnfairly(x) & BenefitsFromWork(x)))", "all x y.((ToExploit(x) & Person(y)) -> (TreatsUnfairly(x,y) & BenefitsInWork(x,y)))", "all x.((TreatmentOrFactual(x) & UnfairlyTravel(x) & BenefitsFromWork(x)) -> Exploit(x))", "all x y z.((Person(x) & ActionOrFactOfTreatingUnfairly(x) & Work(y)) -> Exploitation(x,y))", "all x y z.((Etherison(x) & Person(y) & Work(z)) -> (TreatingUnfairlyAndBecomingBenefit(x,y,z)))", "all x.((Person(x) & (TreatsUnfairly(x) | TreatsUnfairly(x))) -> Exploit(x))", "all x y.((Person(x) & Person(y)) -> (TreatsUnfairly(x,y) & BenefitsFromWork(x,y)))", "all x.(Exploit(x) -> (TreatsUnfairly(x) & BenefitsFromWork(x)))", "all x.(Exploit(x) -> (TreatsUnfairlyPeopleInEffort(x) & BenefitsFromWork(x)))", "all x y.((Exploit(x) & Person(y)) -> ((TreatsUnfairly(x,y) | BenefitsFromWork(y))))", "all x.((ActionOrFactual(x) & TreatsUnfairly(x) & BenefitsFromWork(x)) -> Exploit someone(x))"]}
{"id": "enwn_validation_431", "nl": "You should treat people fairly.", "fol": "", "prediction": ["all x.(TreatPeopleFairly(x) -> TreatPeopleFairly(x))", "all x.((Person(x) & FairTranscription(x)) -> ShouldBeTreat(x,y))", "all x y.((Person(x) & Person(y)) -> FairTranquility(x,y))", "all x.((Person(x) & FairTrading(x)) -> FairTrading(x))", "all x.(TreatPerson(x) -> FairTreatment(x))", "all x.(ProperTreatment(x) -> FairTreatment(x))", "all x y.((Person(x) & Person(y)) -> FairTranquilTreatment(x,y))", "all x.(PeopleTrait(x) -> Fairness(x))", "all x.(TreatPeopleFairly(x) -> Have(x,People))", "all x.((People(x) & FairTranquilTreatment(x)) -> FairTranquilTreatment(x))", "all x.(TrainPeopleFairly(x) -> FairTrade(x))", "all x.((TreatPeopleFairly(x)) -> TreatThemFairly(x))", "all x.(TreatPeopleFairly(x) -> Fair(x))", "all x.((Person(x) & FairTrade(x)) -> ProperTraitement(x))", "all x.((Person(x) & FairTranscription(x)) -> FairTranscription(x))", "all x.(TreatPeopleFairly(x) -> FairTrait(x))"]}
{"id": "enwn_validation_432", "nl": "Mark took his kids out of school to help him make money.", "fol": "", "prediction": ["Mark (Mark\u2019s Kids) -HealedSchoolToHelpMakeMoney(Mark))", "Mark has taken kids out of school to help him make money.", "Mark took kids out of school to help him make money.", "Mark took his kids out of school to help him make money.", "all x y.((Mike(x) & Kid(y) & OutOfSchool(x,y)) -> HelpsMakeMoney(x,mart))", "Mark took his kids out of school to make money.", "Mark's kids don't attend school.", "Mark took his kids out of school to help him make money.", "all x.((Mark(x) & ChildrenOutOfSchool(x)) -> MakeSpoin(x))", "(MarksKidsOutOfSchool(Mark) -> MakesMoney(Mark,Kids))", "all x.((Mark(x) & KidsOutOfSchool(x)) -> HelpsMakeMean(x))", "Mark took his kids out of school to help him make money.", "all x y.((Mark(x) & Kid(y)) -> TakesOutOfSchool(x,y))", "all x y.((Mark(x) & Kids(y)) -> TakenOutOfSchoolToMakeMoney(x,y))", "all x.(Mark(x) -> KidMaking(x))", "Mark took 2 of his Kids out of School to HelpMakeMoney(Mark)"]}
{"id": "enwn_validation_433", "nl": "Mark is using his children to get money at their expense.", "fol": "", "prediction": ["all x y.((Mark(x) & Child(y)) -> UsesBy(x,y))", "all x.(Mark(x) -> (UsesChildren(x) & GetsFundsAtExpense(x)))", "all x y.((Mark(x) & Children(y)) -> UsesToGetMoneyAtExpense(x,y))", "All x y.((Mark(x) & Child(y)) -> (Uses(x,y) & GetsPayment(x,y)))", "all x.(Mark(x) -> UsesChildren(x))", "Mark uses his children to get money at their expense.", "all x y.((Mark(x) & Child(y)) -> UsesToGetMoneyAtExpense(x,y))", "all x y.((Mark(x) & Child(y)) -> UsesToGiveMoney(x,y))", "all x y.((Mark(x) & Child(y)) -> (UsesToGetMoreAtExpense(x,y)))", "Mark uses his children to get money at their expense.", "(UsesCinematiansToGrowMoney(Mark,Children))", "all x y.((Kim(x) & Child(y)) -> GetsMoneyAtExpense(x,y))", "Mark uses his ChildrenToGiveMoneyAtExpense(Mark)", "(Mike usesChildrenToGetMad(Mark) & AtExpense(Mark))", "all x y.((Mark(x) & Children(y)) -> UsesToHaveMoneyAtExpense(x,y))", "Mark uses children(Mark,Dearchildren) -SeemedToGetMoney(Mark,Dearchildren))"]}
{"id": "enwn_validation_434", "nl": "Mark is exploiting his children.", "fol": "", "prediction": ["(ExploitingChildrenInPrivate(Mark,Victorian))", "Mark is ExploitingChildren.", "Mark exploitsTheirChildren.", "Mark is exploitingchildhood(Mark)", "Mark is exploiting his children.", "Mark exploits his children.", "Mark Exploite(Mark,Children)", "Mark and I have worked together, but we're all vying for that first spot.", "all x y.((Mark(x) & Child(y)) -> Exploiting(x,y))", "Mark exploitingChildren.", "Mark ExploitingChildren(Mark)", "-MeetingChildren.", "Mark is ExploitingChildren.", "Mark is ExploitingChildren.", "Mark is ExploitingChildren.", "Mark ExploitingChildren(Mark)"]}
{"id": "enwn_validation_435", "nl": "You should not exploit people.", "fol": "", "prediction": ["there is no reason to exploit.", "all x.((Individual(x) & -Exploit(x)) -> -Exploit(x))", "all x.((People(x) & -Exploit(x)) -> -Exploit(x))", "-ExploitPeople.", "-ExploitPeople(x))", "all x.(YouBenign(x) -> -Exploit(x))", "(-ExploitPeople(x))", "all x.((People(x) & -Exploit(x)) -> -Exploit(x))", "all x.((People(x) & -Exploits(x)) -> -Exploit(x))", "all x.((Person(x) & -Exploit(x)) -> -Exploit(x))", "all x.((Person(x) & -Exploit(x)) -> -Exploit(x))", "all x.((Person(x) & -Exploit(x)) -> -Erase(x))", "all x.((Person(x) & -Exploit(x)) -> -(Exploit(x,Person) | Exploit(x,Person))))", "all x.((Person(x) & -Exploit(x)) -> -Exploit(x))", "all x.((Person(x) & -Operates(x)) -> -Operates(x))", "All x.((Landlord(x) & -Outcast(x)) -> -Focuses(x,y))"]}
{"id": "enwn_validation_436", "nl": "Mark should not be exploiting his children.", "fol": "", "prediction": ["all x.((Mark(x) & Children(y)) -> -Exploiting(x,y))", "Mark ShouldNotExploitChildren(Marc)", "Mark -ExploitingChildren(Mark)", "should not be exploiting children.", "Mark will not be exploiting his children.", "-ExploitingChildren(Mark)", "and Mark should not be exploiting children.", "Mark should not be exploiting children.", "Mark should not be exploiting children.", "Mark should not be exploiting his children.", "not exploiting children.", "all x.((Mark(x) & Children(y)) -> -Uses(x,y))", "Mark should not be exploiting his children.", "all x.((Mark(x) & Children(y)) -> -Exploiting(x,y))", "Mark should not be exploiting children.", "Mark should not be exploiting his children."]}
{"id": "enwn_validation_437", "nl": "Deciding not to hire someone on the basis of their traits is one kind of discrimination.", "fol": "", "prediction": ["all x y.((Study(x) & -HoldOnTalents(x,y)) -> Discrimination(x))", "all x.((Decided(x) & -HiresOnTraits(x)) -> Discrimination(x))", "all x.((Discrimination(x) & -HiresOnBasisOfTraits(x)) -> Discrimination(x))", "all x.((DecidedNotToHonor(x,Traits) & Character(x)) -> Discrimination(x))", "all x.((DecidedNotToHIRE(x) & Traits(x)) -> Discrimination(x))", "all x.((DecidingNotHuntRatique(x) & Traits(x,Traits)) -> Discrimination(x))", "all x.((DecidedNotToHire(x) & -basedOnValues(x)) -> Discrimination(x))", "all x.((Deciding(x) & -HiresOnTreatments(x,y)) -> Discrimination(x))", "all x.((DecidingNotToHIRE(x) & -HasTraits(x)) -> Discrimination(x))", "all x.((HoldOnTalents(x) & -HoldOnTraits(x)) -> Discrimination(x))", "all x.((Deciding(x) & DecidingNotToHireOnTalentBasis(x)) -> Discrimination(x))", "all x.((Discrimination(x) & UnhiredOnBaseOfTraits(x)) -> Discrimination(x))", "all x.((DecidingUnderlying(x) & -HiresTalent(x)) -> Discrimination(x))", "all x.((Decide(x) & -HasTreatments(x)) -> Discrimination(x))", "all x.((DecidedToBuiltOnTreatments(x) & -HiresOne(x)) -> Discrimination(x))", "all x.(Discrimination(x) -> ChoosesUnderTraits(x))"]}
{"id": "enwn_validation_438", "nl": "It is unjust to discriminate on the basis of pregnancy.", "fol": "", "prediction": ["all x.(DiscriminationOnPregnancy(x) -> Unjust(x))", "all x.(DiscriminateOnBaseForPregnancy(x) -> Unjust(x))", "all x.(DiscriminationOnGroundUp(x) -> Unjust(x))", "-(DiscriminationOnGrowth(x) & Unjust(x)))", "all x.((Discrimination(x) & ForPregnancy(x)) -> Unjust(x))", "all x.((Discrimination(x) & Pregnancy(x)) -> Unjust(x))", "all x.((Discrimination(x) & Pregnancies(x)) -> Unjust(x))", "all x.(DiversifyOnBaseOfPregnancy(x) -> Unjust(x))", "all x.((Discrimination(x) & ForPregnancy(x)) -> Unjust(x))", "all x.((DiscriminationFacingPregnancy(x)) -> Unjust(x))", "all x.((Discriminate(x) & Pregnancy(x)) -> Unjust(x))", "all x.((DiscriminationBaseDiscrimination(x)) -> Unjust(x))", "all x.((Discrimination(x) & Pregnancy(x)) -> Unjust(x))", "all x.(Discrimination(x) -> Unjust(x))", "all x.((Discrimination(x) & BaseOnPregnancy(x)) -> Unjust(x))", "all x.((Discrimination(x) & Pregnancy(x)) -> Unjust(x))"]}
{"id": "enwn_validation_439", "nl": "You should treat people justly.\n", "fol": "", "prediction": ["all x y.((Person(x) & Person(y)) -> TreatsJustly(x,y))", "all x.(TreatsPeopleJustly(x) -> Justly(x))", "all x.(TraitPeopleJustly(x) -> TreatPerson(x))", "all x.((TimeLimit(x) & People(y)) -> TreatJustly(x))", "all x y.((Person(x) & Person(y)) -> Treatsjustly(x,y))", "all x y z.((Person(x) & Person(y) & Treat(z)) -> Treat(x,y,z))", "all x.(Person(x) -> TreatJustly(x))", "all x.(TreatPeopleJustly(x) -> TreatEveryone(x))", "all x.(GainPeople(x) -> TreatJustly(x))", "all x y.((People(x) & Person(y)) -> JustlyTreat(x,y))", "all x.(TreatPeopleJustly(x) -> IsJust(x))", "all x.(TreatPeopleJustly(x) -> TreatPeopleJustly(x))", "all x y.((Person(x) & Person(y)) -> TreatsJustly(x,y))", "all x.((Person(x) & TreatsJustly(x)) -> MakesFunction(x))", "all x.((Person(x) & TreatsJustly(x)) -> ShouldBeTrain(x))", "all x y.((People(x) & Employee(y)) -> TreatJustly(y,x))"]}
{"id": "enwn_validation_440", "nl": "Victor did not hire Maddie because she was going on maternity leave soon.", "fol": "", "prediction": ["(-Hunted(Victor,Mamaine) & ComingOnMamarialLeave(Victor,Mama))", "-HuntsMamdieFalls(Victoria,MammalLeave)", "(-HuntsMaddie(Victoria))", "(Living(Victor) & Maddie(Victor,MaternityLeave))", "(-Hears(Victor,Maddie) & MaternityLeafGoing(Victor,Mammal))", "((Victorian(Victor) & Maddie(MaternityLeave)) -> -Hired(Victor))", "All x.((Victoria(x) & MaternityLeaf(x)) -> -HiresMaddie(x))", "all x.((Victor(x) & Maddie(x) & GoingOnMaternityLeave(x)) -> -Holded(x,maddie))", "all x.((Victor(x) & Maddie(x) & MaternityLeave(x)) -> -Hires(x,Maddie))", "(-HasMaddie(Maddie,MammalLess))", "all x y.((Victoria(x) & Maddie(y) & GoingOnMarriageLeave(y)) -> -HasHired(x,y))", "-HuntsMaddie(Maddie) & GoingOnMaternityLeave(Maddie)", "(LoadingMammal(Victor,Launch) & NotHiringMaddie(Victor,MammalLeave,Fruit))", "(-(Hunt-Mamdi(Mamdi) & MaternityLeave(Mamdi)) | (Mammed(Mamdi) & MaternityLeave(Mamdi))))", "the fact that Maddie was going on MaternityLeave was not a surprise for Victor.", "all x.((Victoria(x) & -Hunts(x,MamemorialLeave)) -> -Hires(x,MamemorialLeave))"]}
{"id": "enwn_validation_441", "nl": "If someone is going on maternity leave then they are pregnant.", "fol": "", "prediction": ["all x.((MaternityLeave(x) & GoingOn(x)) -> Pregnant(x))", "all x.((Birth(x) & GoingOnMaternityLeave(x)) -> Pregnant(x))", "all x.((FamilyLeave(x) & GoingOn(x)) -> Pregnant(x))", "all x.((GoingOnMaturityLeave(x)) -> Pregnant(x))", "all x.(OccursOnMeaningLeave(x) -> Pregnant(x))", "all x.((MothershipLeave(x) & GoesOn(x)) -> Pregnant(x))", "all x.((Person(x) & GoingOnMmaternityLeave(x)) -> Pregnant(x))", "all x.(All & GoingOnMeaningClearance(x) -> Pregnant(x))", "all x.((WelcomesOnMaternityLeave(x)) -> Pregnant(x))", "all x.(MaternityLeave(x) -> Pregnant(x))", "all x.((Pregnant(x) & GoingOnMaternityLeave(x)) -> Preggered(x))", "all x.((Exercise(x) & GoingOnMmaternityLeave(x)) -> Pregnant(x))", "all x.((HasMaternityLeave(x) & GoingOn(x)) -> Pregnant(x))", "all x.(MaternityLay(x) -> Pregnant(x))", "all x.((Person(x) & GoingOnMaternityLeave(x)) -> Pregnant(x))", "all x.((GoesOnMothershipLeave(x) & Pregnant(x)) -> GoingOnMothershipLeave(x))"]}
{"id": "enwn_validation_442", "nl": "You shouldn't discriminate on the basis of pregnancy.", "fol": "", "prediction": ["all x.((Pregnancies(x) & -Discriminate(x)) -> -Discriminate(x))", "all x.((Pregnancies(x) & -Discriminate(x)) -> -Discriminate(x))", "all x.((Criteria(x) & -Discrimination(x),c))", "all x.((Pregnancy(x) & -Discriminate(x)) -> -Discriminate(x))", "all x.((Paternity(x) & -Discrimination(x)) -> -Discrimination(x))", "all x.((Pregnancy(x) & -Disparity(x,)) -> -(Discriminate(x,y) | Discriminate(x,y)))", "all x.((Paternity(x) & -Discriminate(x)) -> -Discriminate(x,p))", "all x.((Paternity(x) & -Discrimination(x)) -> -(Paternity(x) & -Proceeding(x))))", "-(Discriminate(x) & Pregnancies(x)))", "all x.((Researcher(x) & BirthCondition(x)) -> -Discriminate(x))", "all x.((Pregnancy(x) & -Discrimination(x)) -> -Discriminates(x))", "all x.((Pruedonatal(x) & -Discriminate(x)) -> -.", "all x.((Pregnancy(x) & -DiscriminateOn(x,y)) -> -Discriminate(x,z))", "all x.((Discriminate(x) & ForPregnancies(x)) -> -DiscriminatedOn(x,Procreation))", "all x.((Pregnancy(x) & -GenderDiscrimination(x)) -> -Dispare(x))", "all x.((Pregnancy(x)) -> -Discriminate(x))"]}
{"id": "enwn_validation_443", "nl": "You shouldn't base hiring decisions off of whether or not someone is pregnant.", "fol": "", "prediction": ["all x.(HiringDecision(x) -> -(Pregnant(x) | -Pregnant(x))))", "all x.(HuntingDecision(x) -> -(Primary(x) | -Pregnant(x))))", "all x.((HospingDecision(x) & -(Pregnant(x) | NotPregnant(x)))) -> -BasesOn(x))", "all x.((HiringDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -Balances(x))", "all x.((HuntingDecision(x) & -Pretty(x)) -> -BasesOn(x,Pretty(x))", "all x.((HosingDecision(x) & -(Prenting(x) | NotPrenting(x)))) -> -BaseHiringDecision(x))", "all x.((HuntingDecision(x) & -Political(x)) -> -(Political(x) & -Pregnancy(x))))", "all x y.((HosingDecision(x) & Person(y) & or -Pregnant(y)) -> -BaseHuntingDecision(x,y))", "all x.((HostDecision(x) & -(Prating(x) | -Pregnant(x)))) -> -BasesOn(x,y))", "all x.((HiringDecision(x) & -(Patient(x) | NonPatient(x)))) -> -BasesOn(x,Patient))", "all x.((HusingDecision(x) & -(Pregnant(x) | Pregnant(x)))) -> -BasedOn(x,y))", "all x.((Hunger(x) & -(Patient(x) & Pregnant(x))) -> -BasesHiringDecisionsOn(x,Paternity)))", "all x.((HostingDecision(x) & -Pregnant(x)) -> NonBasic(x))", "all x.((HuntingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BasesChoiceOf(x,horse(x)))", "all x.((HostingDecision(x) & (Pregnant(x) | -Pregnant(x))) -> -BaseHuntingDecision(x))", "all x.((Structure(x) & -(Patient(x) | -Patient(x))) -> -BasedOn(x,y))"]}
{"id": "enwn_validation_444", "nl": "Victor decided not to hire Maddie based on her pregnancy.", "fol": "", "prediction": ["Victor hat & MaddieLow(x,Gender,Feb))", "(LowerOnPornegation(Victor) -> -IncludesHostMaddie(Victor))", "all x y.((Victor(x) & Maddie(y) & Prior(z)) -> -Hunts(x,y,z))", "-(HuntsMamdie(Victoria,Mama,Pregnancy))", "-(HiresMaddie(Victoria,Paternity) & SheLikes(Victoria,Paternity))", "(-HoldsMaddie(Victor,Paternity))", "all x y.((Victor(x) & Maddie(y)) -> -Holds(x,y))", "(-HoldsMaddieBasedOn(Victor,Maddie) & Date(Victor,Maddie))", "((Victor(Victor) & Maddie(Victor)) -> -HasHunting(Victor,Victor))", "[ClosureToVictor(Victor) & Maddie(Victor) & Pregnant(Victor) & -HuntedOn(Victor,Magdison)]", "(-Hires(Victor,Maddie) & BasedOnPregnancy(Victor,Maddie))", "-(Hiring(Victor) & Maddie(Maddie) & BasedOnPregnancy(Victor,Maddie))", "all x y z.(((Victor(x) & Maddie(y) & Pregnancy(z)) -> -HasHire(x,y,z))", "(RelatedOnPregnant(Victor) & -HiresMaddie(Victor))", "her pregnancy wasn't on Maddie's mind.", "(-HasMaddie(Victor) & BasedOnPregnancy(Victor,Maddie))"]}
{"id": "enwn_validation_445", "nl": "Victor should not have based his decision off of Maddie's pregnancy.", "fol": "", "prediction": ["all x.((Victor(x) & Maddie(x)) -> -BasedDecisionOn(x,Maddie,x))", "all x.((Victor(x) & Maddie(y)) -> -BasedDecisionOff(x,y))", "thesis(Victoria) -> -BasedDecisionOffMaddiesPregnancy(Victoria,SingleMonthsConception))", "(-BattledOffMaddie(Victoria) -> -BasedDecision(Victoria,Victoria))", "all x y.((Victor(x) & Maddie(y)) -> -BasesDecisionOff(x,y))", "All x.((Victor(x) & Maddie(y)) -> -BasedDecisionOnBirth(x,y))", "\"(Maddie(Victoria) & -Maddie(Victoria)) -> -BasedDecisionOffMaddie(Victoria,Maddie))", "In the end, Victor should have made no logical decision based off of Maddie's pregnancy.", "that should have been the reason(Victor,Maddie,Bernie) / -BasedDecisionOffDecision(Victor,Maddie))", "the baby.Victor.(Victor,Maddie(Violet) -> -BasedDecisionOffAddiction(Violet,Maddie))", "the pregnancies(VictoriaCardio,Maddie,Fall) -> -BasesDecisionOn(VictoriaCardio,Maddie,Maddie))", "Maddie's pregnancy should not have been the basis for Victor's decision.", "all x.((Victor(x) & Maddie(y)) -> -BasedDecisionOn(x,y))", "all x.((Victoria(x) & Maddie(x)) -> -BasedDecisionOffPregnancy(x,Victoria))", "all x.((Victor(x) & MaddieConcert(x)) -> -BasedDecisionOff(x,MaddieConcert))", "all x y.((Victor(x) & Maddie(y)) -> -BasedDecisionOn(x,y))"]}
{"id": "enwn_validation_446", "nl": "If you're rude to people who hold a certain view, it means you don't respect that view.", "fol": "", "prediction": ["all x.((Rulty(x) & HasView(x)) -> -Respect(x))", "all x.((Rude(x) & CertainView(y) & Holds(x,y)) -> -Respects(x,y))", "all x.(Racy(x) -> -RespectsView(x))", "all x y.((Rust(x) & Person(y) & HoldsSpecificView(y,x)) -> -Respects(x,y))", "all x.((Rust(x) -> -RespectsView(x))", "all x y.((Rueto(x) & HoldsAsk(x,y) & CertainView(y)) -> -RespectsView(x,y))", "all x y z.((Rust(x) & Person(y) & View(z) & Hold(y,z)) -> -(RespectsView(x,y) | RespectsView(x,z))))", "all x y z.((Rule(x) & Person(y) & View(z) & Holds(x,y,z)) -> -RespectsPerspective(x,y))", "all x y.((Rust(x) & Person(y) & HoldsSpecificView(y,x)) -> -RespectsSpecificView(x,y))", "all x y.((RelevantTo(x,y) & People(y)) -> -RespectsView(x,y))", "all x.(RoseToPerson(x) -> NobodyHolds(x,Y))", "all x.(Rulty(x) -> -RespectsPerspective(x))", "all x.((Rain(x) & HoldsSpecialView(x)) -> -RespectsView(x))", "all x.(Rough(x) -> -HoldsSpecificView(x))", "all x.(Rust(x) -> Doesn'tRespectView(x))", "all x y.(RepentantToHoldingSpecificView(x,y) -> -RespectsPosition(x))"]}
{"id": "enwn_validation_447", "nl": "Religion is a kind of personal preference.", "fol": "", "prediction": ["all x.(Religion(x) -> PersonalPeering(x))", "all x.(Religion(x) -> PersonalPreference(x))", "all x.(Religion(x) -> PersonalPreise(x))", "all x.(Religion(x) -> PersonalPosition(x))", "all x.(Religion(x) -> PersonalPreference(x))", "all x.(Religion(x) -> PersonalPreference(x))", "all x.(Religion(x) -> PersonalPreferred(x))", "all x.(Religion(x) -> PersonalPreference(x))", "all x y.((Religion(x) & PersonalPreference(y)) -> PersonalPreference(x))", "all x.(Religion(x) -> PersonalPur\u0103ce(x))", "all x.(Religion(x) -> PersonalPreferred(x))", "all x.(Religion(x) -> PersonalPreferred(x))", "all x.(Religion(x) -> PersonalPreference(x))", "all x.(Religion(x) -> PersonalPreference(x))", "all x.(Religion(x) -> PersonalPreferred(x))", "all x.(Religion(x) -> PersonalPrating(x))"]}
{"id": "enwn_validation_448", "nl": "You should be tolerant.", "fol": "", "prediction": ["all x.((Tolerant(x)) -> IsIntentional(x))", "all x.(Tolerant(x) -> Yes(x))", "all x.((Tolerant(x) & -Tolerant(x)) -> RecruitTolerant(x))", "All x.(Tolerant(x) -> HasMandibos(x))", "all x.(Tolerant(x) -> Tolerant(x))", "all x.(Tolerant(x) -> -Tolerant(x))", "all x.(Tol\u00e9rance(x) -> ShouldBe(x))", "all x.((Swiss(x) & Responsive(x)) -> Tolerant(x))", "all x.(Tolerant(x) ->.", "all x.(Tolerant(x) -> Yes(x))", "All x.(Tol\u00e9rance(x) -> True(x))", "all x.(Tolerant(x) -> Intolerant(x))", "You should be Tolerant.", "all x.(Tolerant(x) -> Tolerant(x))", "all x.((Tolerant(x) & ProvidesRepair(x)) -> CanBe(x))", "all x.((Recipe(x) & Tolerant(x)) -> -Tolerant(x))"]}
{"id": "enwn_validation_449", "nl": "Respecting other people's preferences is a form of tolerance.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y) & Respects(x,y)) -> Tolerance(x))", "all x.(RespectsExperiences(x) -> Tolerance(x))", "all x.(RespectsOtherPeoplePreferences(x) -> Tolerance(x))", "all x.(RespectsOtherPeoplePridelines(x) -> Tolerance(x))", "all x.(RespectsOtherPeoplePreferences(x) -> Tolerance(x))", "all x.(RespectingOtherPeoplePreferences(x) -> Tolerance(x))", "all x.(RespectingOtherPeoplePositives(x) -> Tolerance(x))", "all x.(RespectsOtherPatients(x) -> Tolerance(x))", "all x.(RespectingOthersPreferences(x) -> Tolerance(x))", "all x.(RespectingOthersPersonalPreferences(x) -> Tolerance(x))", "all x.(ConsidersPositions(x) -> Tolerance(x))", "all x.(RespectingOtherPeoplePositions(x) -> Tolerance(x))", "all x y.((Person(x) & Person(y)) -> RespectsPreferences(x,y))", "all x y.((RespectsSpeakerPositions(x,y) & Person(y)) -> Tolerance(x))", "all x.(RespectsOthersPreferences(x) -> Tolerance(x))", "all x.(RespectingOtherPeoplePaths(x) -> Tolerance(x))"]}
{"id": "enwn_validation_450", "nl": "Eugene is rude to people who do not share his religion.", "fol": "", "prediction": ["Eugene (IsRunningToReligiousPeople(I) & Doesn'tShareReligion(I))", "(R rudeToPigs(Eugene,MadeInReligion) & -ShareReligion(Eugene,Religion))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(x,y)) -> Rust(x))", "all x y.((Eugene(x) & Person(y)) -> RattyTo(x,y))", "all x.(Religious(x) -> Rust(x))", "all x.((Eugene(x) & -Person(x)) -> RustTo(x,y))", "all x.(RuleToPeople(x) -> -SeparateReligion(x))", "all x.((Eugene(x) & People(x) & -ShareReligion(x)) -> Rust(x))", "all x.(Rain(x) -> Eugene(x))", "all x.((Eugene(x) & -ShareReligion(x)) -> Rust(x))", "(Rubber(Eugene), if yours is notShareReligion(Eugene,Religion))", "all x.((Eugene(x) & Person(y) & -ShareReligion(x,y)) -> RudeTo(x,y))", "all x.((Eugene(x) & NoSignsReligion(x)) -> Rude(x))", "all x.((Eugene(x) & -ShareRite(x)) -> Rust(x))", "all x y.((Eugene(x) & People(y) & -ShareReligion(x,y)) -> Rust(x))", "all x y.((Religion(x) & Person(y)) -> Rust(x,y))"]}
{"id": "enwn_validation_451", "nl": "If you're rude to people because of the religion they hold, it means you don't respect their religion.", "fol": "", "prediction": ["all x y.((Rule(x) & Person(y) & HoldsReligion(x,y)) -> -Respect(x,y))", "all x y.((Rain(x) & Race(y) & People(z) & HoldsReligion(x,z)) -> -Support(x,y))", "all x.(Rubious(x) -> DoesNecessaryReligions(x))", "all x.(RuleToReligions(x) -> -RespectReligion(x))", "all x.((Rule(x) & HasReligiousReligion(x)) -> -RespectsReligion(x))", "all x.(Reckless(x) -> -RespectReligion(x))", "all x.((Rubbish(x) & HoldsReligion(x,Religion)) -> -RespectsReligion(x))", "all x y.(((Revelant(x) & Person(y) & HoldsReligion(x,y)) -> -RespectsReligion(x,y))", "all x.((RelativeTo(x,People) & HoldsReligiousCultus(x)) -> -RespectsReligion(x))", "all xy.((Rule(x) & People(y) & HoldsReligion(x,y)) -> -RespectsReligion(x,y))", "all x.((Relevant(x) & PeopleHoldReligion(x)) -> -RespectsReligion(x))", "all x.((Rule(x) & PeopleHoldReligiousReligion(x)) -> -RespectReligion(x))", "all x.(RustyThoughReligious(x) -> -RespectsReligion(x))", "all x y.((Ruling(x,y) & Person(y) & HoldsReligion(x,y)) -> DisrespectsReligion(x,y))", "all x.(Russ(x) -> (RespectReligion(x) & -RespectReligion(x)))", "all x y.((Rouse(x) & Person(y) & HoldsReligion(x,y)) -> -RespectsReligion(x,y))"]}
{"id": "enwn_validation_452", "nl": "You should respect other people's preferences.", "fol": "", "prediction": ["all x.((People(x) & RemembersPrefers(x)) -> RespectsPreferredPreferredPrefers(x))", "(RespectsPreferences(you,otherPeople))", "all x.((People(x) & PeoplePaws(x,y)) -> RespectsPaws(x,y))", "all x.(RespectsPreferences(x) -> RespectsPreferredPerson(x))", "all x.(RespectPaths(x) -> Affair(x))", "all x.(RespectPersonalPositions(x) -> ReputatesOthersPositions(x))", "all x.(RespectsOtherPeoplePairs(x) -> PeopleDouble(x))", "all x y.((Person(x) & Person(y)) -> Respect(x,y))", "all x y.((Person(x) & Person(y)) -> Respects(x,y))", "all x y.((Person(x) & People(y)) -> RespectsPositions(x,y))", "all x.(RespectPfositionsOthers(x) -> Respects(x))", "all x y z.((Performance(x) & OtherPerson(y) & Preference(z)) -> Respects(y,z))", "all x.(RespectsPositives(x) -> PeopleOther(x))", "all x.((People(x) & Preferences(x,y)) -> Respects(x,y))", "all x.(RespectPrices(x) -> AvoidPossibilityDiscrimination(x))", "all x.(RespectsPrivate(x) -> Person(x))"]}
{"id": "enwn_validation_453", "nl": "You should respect other people's religious preferences.", "fol": "", "prediction": ["all x y.((Person(x) & ReligiousType(y)) -> Respect.(x,y))", "all x.((LittleOne(x) & ReligiousPreferences(x)) -> Respects(x,y))", "all x y.((Client(x) & Person(y)) -> RespectsReligiousPreferences(y,x))", "all x.(RespectReligiousPoses(x) -> RequiresReligiousPreferences(x))", "all x.(RespectsReligiousPreferences(x) -> Requires(x))", "all x.((People(x) & ReligiousPreferences(x)) -> Respect(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsReligiousPreferences(x,y))", "all x.(RespectsReligiousPositives(x) -> OtherPeople(x))", "all x y.((Person(x) & ReligiousPatient(y)) -> Respekts(x,y))", "all x.((Person(x) & RespectsReligiousPaths(x)) -> Requires(x,y))", "(RespectsReligiousPreferences(x) & -RespectsReligiousPreferences(x))", "all x y.((Person(x) & Religion(y)) -> Respects(x,y))", "all x.(RespectReligiousPathsOfPerson(x) -> RecognizeReligiousPatients(x))", "all x.((Person(x) & RespectsReligiousPreferences(x)) -> RespectsReligiousPreferences(x))", "all x y.((Respects(x,y) & Person(y)) -> ReligiousPreference(x,y))", "all x y.((Person(x) & You(y)) -> RequireReligiousPatients(x,y))"]}
{"id": "enwn_validation_454", "nl": "You should not be rude to people because of the religion they hold.", "fol": "", "prediction": ["all x.((People(x) & ReligiousHolding(x)) -> -Rull(x))", "all x.((Ruin(x) & People(y) & Religious(x,y)) -> -Remorse(x))", "all x.(RuleToPeople(x) -> -DueToReligionHold(x))", "all x.((Person(x) & HoldsReligion(x,Religion)) -> -Rust(x))", "all x.((People(x) & Religious(x)) -> -RuleToYouWith(x,y))", "all x y.((Teacher(x) & Person(y) & Religion(y)) -> -RuleTo(x,y))", "all x.((People(x) & God(x)) -> -GayRuleTo(x,X))", "all x.((People(x) & ReligiousReligion(x)) -> -Rain(x,y))", "all x y.((Person(x) & Religion(y)) -> -Rule(x,y))", "all x y.((Rubious(x) & Person(y) & HoldsReligion(y)) -> -UrulentToReligious(y,x))", "all x.((Person(x) & Worship(x)) -> NoRule(x))", "all x.((Person(x) & Religion(x)) -> -Rusty(x))", "all x y.((Email(x) & Religion(y) & Person(y)) -> -Rainy(x,y))", "all x y.((Person(x) & Religion(y) & Holds(x,y)) -> -Rusty(x,y))", "all x.(Rule(x) -> -AllowedByReligious(x))", "all x y.((Religion(x) & People(y) & HoldsReligion(y)) -> -Rust(x,y))"]}
{"id": "enwn_validation_455", "nl": "Eugene should not be rude to people who do not share his religion.", "fol": "", "prediction": ["all x y!((Eugene(x) & Person(y) & -ShareReligion(x,y)) -> -RustyTo(x,y))", "all x.((Eugene(x) & NoName(x)) -> -ReligiousTo(x,y))", "all x.((Eugene(x) & Person(x) & -ShareReligion(x)) -> -Rusty(x))", "all x y.((Eugene(x) & People(y) & -ShareReligion(x,y)) -> -Rusty(x,y))", "all x y.((Eugene(x) & Individual(y) & -SharingReligion(y)) -> -Rull(x,y))", "all x.((Eugene(x) & People(x) & -ShareReligion(x)) -> -Rusty(x))", "all x.((Eugene(x) & Person(x) & -ParticipatesInReligion(x)) -> -Rule(x))", "all x.((Eugene(x) & Personal(x) & -ShareReligion(x)) -> -RusticAndNaive(x))", "all x.((Eugene(x) & -ShareReligion(x)) -> -RainfulTo(x,y))", "all x.((Eugene(x) & -ShareReligion(x)) -> -Rusty(x))", "all x.((Eugene(x) & -ShareReligion(x)) -> -Rust(x))", "all x.((Eugene(x) & RishfulToNoMuslim(x)) -> -(RuleToPerson(x) | -ShareReligion(x))))", "all x.((Eugene(x) & Person(x) & -ShareReligion(x)) -> -RusticTo(x))", "all x.((Eugene(x) & NecessaryReligion(x)) -> -RustyToPerson(x))", "all x y z.((Eugene(x) & People(y) & Religion(z)) -> -Russ(x,y))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(x,y)) -> -Rule(x))"]}
{"id": "enwn_validation_456", "nl": "Intruding on people is disrespecting their privacy.", "fol": "", "prediction": ["all x.(IntrudingOnPeople(x) -> DisrespectingPrivacy(x))", "all x.(IntrudingOnPeople(x) -> DisregardingPrivacy(x))", "all x.(IntrudingOnPeople(x) -> DisrespectsPrivacy(x))", "all x y.((Intruder(x) & Person(y)) -> DisrespectsPrivacy(x,y))", "all x.(IntrudingOnPerson(x) -> DisrespectsPrivacy(x))", "all x y.((IntrudingOn(x) & Person(y)) -> DisregardingPrivacy(x,y))", "all x.(IntrudingOnPerson(x) -> DisregardingPrivacy(x))", "all x.(IntrudingOnPeople(x) -> DisrespectsPrivacy(x))", "all x.(IntrudingOnPeople(x) -> DisrespectingPrivacy(x))", "all x.(IntrudingOnPeople(x) -> DisrespectingPrivacy(x))", "all x y.((Intruder(x) & Person(y)) -> DisrespectsPrivacy(x,y))", "all x.(IntrudingOnPerson(x) -> DisrespectsPrivacy(x))", "all x.((IntrudingOnPeople(x) & DisrespectsPrivacy(x)) -> DisregardsPrivacy(x))", "all x y.((Person(x) & Intruding(x) & Person(y)) -> DisrespectsPrivacy(x,y))", "all x y.((Person(x) & Intruder(x,y)) -> DisrespectsPrivacy(x))", "all x.(IntrudingOnPeople(x) -> DisrespectsPrivacy(x))"]}
{"id": "enwn_validation_457", "nl": "You should respect people's privacy.", "fol": "", "prediction": ["all x.(RespectsPrivate(x) -> Privacy(x))", "all x.((Person(x) & YouRespectPrivacy(x)) -> Privacy(x))", "respectsPeoplePrivacy(x)", "all x.(RespectPersonPrivacy(x) -> RespectPeoplePrivacy(x))", "all x y.((Person(x) & Person(y) & RespectPrivacy(x,y)) -> RespectPrivacy(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsPrivacy(x,y))", "all x.((Person(x) & RespectPrivacy(x)) -> Trusts(x))", "all x.(RespectPeoplePrivacy(x) -> RespectCustomerPrivacy(x))", "all x y.((Person(x) & Privacy(y)) -> Respect(x,y))", "all x.(RespectPersonalPrivacy(x) -> PrivacyIsRotate(x))", "all x.(RespectsPrivacy(x) -> PeopleSpainter.", "all x.(RespectsPrivacy(x,people) -> RespectsPrivacy(x,people))", "all x y.((Person(x) & Property(y)) -> Respect(x,y))", "all x.(RespectPrivacy(x) -> People(x))", "all x.(Leader(x) -> RespectsPrivacy(x))", "all x.((People(x) & InPrivacy(x)) -> Respects(x,y))"]}
{"id": "enwn_validation_458", "nl": "Knocking on someone's door when they do not wish to be disturbed is intrusive.", "fol": "", "prediction": ["all x.((KnockingOnDoor(x) & NotWorriedToBeDisturbed(x)) -> Intrusive(x))", "all x.((KnocksOnDoor(x) & -WorriedToBeDisturbed(x)) -> Intrusive(x))", "all x y.((KnocksOnDoor(x) & Person(y) & -WorriedToBeDisturbant(y)) -> Intrusive(x))", "all x y.((KnocksOn(x,y) & Person(y) & -Distraught(y)) -> Intrusive(x))", "all x y z.((KnocksOnDoor(x) & Person(y) & -Disturbed(y)) -> Intrusive(x))", "all x.((Person(x) & -WantsDisturbed(x)) -> Intrusive(x))", "all x y.((Effect(x) & Person(y) & -Distraught(y)) -> Intrusive(x))", "all x.((KnocksOn(x) & -Disturbed(x)) -> Intrusive(x))", "all x y.((Door(x) & Person(y) & -Disturbed(y)) -> Intrusive(x))", "all x y z.((KnockingOnDoor(x,y) & WrongToBeDistorted(y) & Person(z) & -WorriedToBeDisturbed(z)) -> Intrusive(x))", "all x.((Disturbanced(x) & KnocksOnDoor(x)) -> Intrusive(x))", "all x y z.((KnockingOnDesert(x) & Person(y) & -Disturbed(z)) -> Intrusive(x))", "all x.((KnockingOnDoor(x) & -Disturbed(x)) -> Intrusive(x))", "all x.((KnocksOnDoor(x) & -Disturbed(x)) -> Intrusive(x))", "all x.((KnotingOnDoor(x) & -Distorted(x)) -> Intrusive(x))", "all x y.((Person(x) & Door(y) & -Worried(x)) -> Intrusive(x))"]}
{"id": "enwn_validation_459", "nl": "Sandra constantly ignores \"No Solicitation\" signs and knocks on people's doors.", "fol": "", "prediction": ["all x y.((Sandra(x) & (NoSolicitation(y) | KnocksOnDoor(x,y))) -> Ignores(x,y))", "all x.((Sandra(x) & -SolicitationSigns(x)) -> (Ignores(x,NoSolicitation) & JoltsOnDoors(x)))", "all x.(S Sandra(x) & IgnoresNoSolicitationSignals(x) & KnocksOnPeopleDoors(x))", "all x y.((Sandra(x) & -NoSolicitation(x,y)) -> (IgnoresSigns(x,y) & KnocksOnDoors(x,y)))", "all x.((Sandra(x) & IgnoresNoSolicitation(x)) -> KnocksOnJourney(x))", "Sandra (all x y z.((Sandra(x) & NoSolicitation(y) & Sign(z)) -> Ignores(x,z)))", "all x y.((Sandra(x) & NoSolicitationSigns(y)) -> IgnoresAndKicksOnDoors(x,y))", "all x.(Sandra(x) -> (IgnoresNoSolicitationSigns(x) & KnocksOnPeopleDoors(x)))", "all x y.((Sandra(x) & Observes(x,y) & \"NoSolicitationSigns(x)\") -> KnocksOnDoors(x))", "all x.(Sandy(x) -> (exists y.(NoSolicitationSign(y) & Ignores(x,y))) & KnocksOn(x,y)))", "Sandra ignores \"NoSolicitation\" signs and knocks on doors.", "all x.(Sandra(x) -> (IgnoresNoSolicitationSigns(x) & KnocksOnOtherDoors(x)))", "all x.((Sandra(x) & IgnoresNoSolicitation(x)) -> (KicksOnPeopleDoors(x)))", "all x y.((Sandra(x) & \"NoSolicitationSign(x)) -> (IgnoresSigns(x,y) & KnocksOnDoors(x,y)))", "all x.((Sandra(x) & NoSolicitation(x)) -> (Ignores(x,Sandra) & KnocksOnDoors(x)))", "(IgnoresNoSolicitation(Sandra) and KnocksOnDoors(Sandra))"]}
{"id": "enwn_validation_460", "nl": "You shouldn't intrude on people.", "fol": "", "prediction": ["all x.((Person(x) & -Intrude(x)) -> -Intrude(x))", "all x.((Person(x) & -Intrude(x)) -> -Intrude(x))", "all x.((CanIntrudeOnClients(x) & -CanIntrudeOnClients(x)) -> -CanIntrudeOnClients(x))", "all x.(Intrude(x) -> -(IntrudeOnPeople(x) | IntrudeOnPeople(x))))", "has been argued that intruders on people is not a good idea.", "all x.((IntrudeOnPeople(x)) -> -IntrudeOnPeople(x))", "all x.(((Player(x) & -IntrudeOn(x)) -> -IntrudeOn(x))", "all x.(IntrudeOn(x) -> -Personal(x))", "all x.(IntrudeOn(x,People) -> -IntrudeOn(x,People))", "all x.((IntrudeOnPeople(x)) -> -IntrudeOnPeople(x))", "all x.(NotIntrudeOnPeople(x) -> -Fail(x))", "at all.(NoIntrude(x) -> People(x))", "all x.(IntrudeOnPeople(x) -> -IntrudeOnPeople(x))", "all x.(Irresponsible(x) -> -IntrudeOn(x))", "all x.(TookIntruder(x) -> -IntrudeOn(x))", "exists x.(Restricts(x) & Person(x) & -IntrudeOn(x))"]}
{"id": "enwn_validation_461", "nl": "Sandra intrudes on people.", "fol": "", "prediction": ["all x y.((Sander(x) & Person(y)) -> IntrudesOn(x,y))", "exists x.(Sarah(x) & IntrudesOn(x))", "exists x y.((Sandra(x) & Person(y)) -> IntrudesOn(x,y))", "all x.(SandraIntrudesOnPeople(x) -> IntrudesBetweenOthers(x))", "All x y z.((Sandra(x) & Person(y) & Party(z)) -> Intrudes(x,y,z))", "all x y.((Sandra(x) & People(y)) -> Intrudes(x,y))", "all x y.((Sandra(x) & Person(y)) -> Intrudes(x,y))", "all x y z.((Sandra(x) & Person(y) & Person(z) & IntrudesOn(x,y,z)) -> IntrudesOn(x,y,z))", "all x y.((Shane(x) & Person(y)) -> IntrudesOn(x,y))", "and IntrudesOnPeople(Sandra,sandra)", "all x y.((Sarah(x) & Person(y)) -> Intrudes(x,y))", "all x y.((Sandra(x) & Person(y)) -> IntrudesOn(x,y))", "all x y.((Sarah(x) & Person(y)) -> IntrudesOn(x,y))", "the pteronym.(StanleyIntrudesBetweenPeople(Sandra) -> IntrudesOnPeople(Sandra,p,s))", "all x y.((Shandra(x) & Person(y)) -> IntrudesOn(x,y))", "all x y!((Sandra(x) & Person(y)) -> IntrudesOn(x,y))"]}
{"id": "enwn_validation_462", "nl": "Sandra should not intrude on people.", "fol": "", "prediction": ["all x.(Sandra(x) -> -IntrudeOnPersonSandra(x))", "all x.((Sandra(x) & People(x)) -> -Intrude(x))", "-IntrudeOnPersons(Sandy)", "all x.(Sandra(x) -> -IntrudeOnPeople(x))", "all x.(Sandra(x) -> -IntrudeOnPeople(x))", "all x.((Sandra(x) & -IntrudesOnPeople(x)) -> -IntrudeOnPeople(x))", "all x.(Sandra(x) -> -IntrudeOnPeople(x))", "-intrude(Shane,People)", "all x.((Sandra(x) & People(y)) -> -IntrudeIn(x,y))", "all x.(Sandia(x) -> -IntrudeOnPeople(x))", "all x.(Shannon(x) -> -IntrudeOnPeople(x))", "all x y.((Santa(x) & Person(y)) -> -Intrude(x,y))", "Sandra -Intrude(Sandra,People)", "all x.((Sandra(x) & -IntrudeOnPeople(x)) -> -IntrudeOnPeople(x))", "all x.(Sandra(x) -> -IntrudeOnPeople(x))", "all x.(Sandra(x) -> -IntrudeOnPeople(x))"]}
{"id": "enwn_validation_463", "nl": "Martin kicked his dog to make it stop barking.", "fol": "", "prediction": ["all x y.((Dog(x) & Dog(y) & Kicked(x,y)) -> BarkingStop(y))", "Martin kicked his dog to make it stop Barking.", "Martin kicked his dog to make it stop barking.", "all x y.((Dog(x) & Martin(y)) -> kickedToBake(s,y))", "(CheatedDog(Martin,Wolf) & StopBarking(Martin,Wolf))", "all x y.((Dog(x) & Martin(y)) -> KickedToBegin(y,x))", "Martin kicked his dog to make it stop barking.", "all x.((Dog(x) & MartinKickedToStopBarking(x)) -> Barks(x))", "all x y.((Dog(x) & Martin(y)) -> (Kicked(y,x) & BarkingStops(y,x)))", "All x y z.((Dog(x) & Martin(y) & Dog(z)) -> KickedToBark(y,z))", "Martin kicked his DogToMakeStopBarking(Martin,Dog))", "Martin kicked(Martin,Dog)", "all x y.((Dog(x) & Martin(y)) -> KickedToMakeStopBarking(y,x))", "Martink kickedSuchDog(Martin,dog)", "(Kicked(Martin,Dog) & StopBarking(Martin,Dog))", "all x.(Martin(x) -> KnewDogToStopBarking(x))"]}
{"id": "enwn_validation_464", "nl": "Kicking an animal hurts it.", "fol": "", "prediction": ["all x y.((Animal(x) & Kicks(x,y)) -> Hurts(x))", "all x.((Animal(x) & Kicking(x)) -> Hurts(x))", "all x y.((Animal(x) & Kicking(y)) -> Hurts(x,y))", "all x y.((Animal(x) & Animal(y)) -> KicksHasIllness(x,y))", "all x y.((Animal(x) & Animal(y)) -> Ill.(Kick\" & Ill(y)))", "all x y.((Animal(x) & Kicking(x,y)) -> Hurts(y,x))", "all x y.((Animal(x) & Kicking(y)) -> Hurts(x,y))", "all x.(Kicking(x) -> HurtsAnimal(x))", "all x.(Kicking(x) -> InjuresAnimal(x))", "all x.(Kicking(x) -> Hurts(x))", "all x.(KickingAnimal(x) -> Injured(x))", "all x y z.((Animal(x) & Animal(y) & Kicking(x,y)) -> Hurts(y,z))", "all x.((Animal(x) & Kicks(x,y)) -> Hurts(x,y))", "all x.((Animal(x) & Kicks(x)) -> Hurts(x))", "all x.(Kicking(x) -> HurtsAnimal(x))", "all x.(Kicking(x) -> IllnessesAnimal(x))"]}
{"id": "enwn_validation_465", "nl": "Hurting people or animals is considered abuse.", "fol": "", "prediction": ["all x.((Hurting(x) & (Person(x) | Animal(x))) -> Abuse(x))", "all x.((Hurting(x) & (Hurts(x) | Hurts(x))) -> Abuse(x))", "all x.(HurtsPeopleOrAnimals(x) -> Abuse(x))", "all x.(Hurting(x) -> Abuse(x))", "all x.(HurtingPeopleOrAnimals(x) -> Abuse(x))", "all x.((Helicting(x) & (HoursPopulars(x) | HurtsAnimals(x))) -> Abuse(x))", "all x.(Hurting(x) (Person(x) | Animal(x)))", "all x.((Hurting(x) & (People(x) | Animals(x))) -> Abuse(x))", "all x.(HurtingPeopleOrAnimals(x) -> Abuse(x))", "all x y.((Hunger(x) & (Mutor(y) | Animal(y))) -> Abuse(x))", "all x.(Hurting(x) -> (Abuse(x) | -Hurling(x)))", "all x.(HurtingIsAbuse(x) -> (HurtingPeople(x) | HurtingAnimals(x)))", "all x.(Hurting(x) -> Abuse(x))", "all x.((Hurs(x,y) & (Person(y) | Animal(y))) -> Abuse(x,y))", "all x.(Hurts(x) -> (Hunger(x) | Hurts(x)))", "all x.((Hurting(x) | Hurting(x))) -> Abuse(x))"]}
{"id": "enwn_validation_466", "nl": "You should not abuse any living thing.", "fol": "", "prediction": ["all x.((LivingThing(x) & -AbuseAbuseBy(x)) -> -Abuse(x))", "all x.((LivingThing(x) & -Abuse(x)) -> -Abuses(x))", "all x.((LivingThing(x) & -Abuse(x)) -> -Abuse(x))", "all x.(AbuseAnyLivingThing(x) -> -(AbuseAll(x) -> LivingThing(x)))", "all x y.((LivingDog(x) & LivingThing(y)) -> -Abuse(x,y))", "all x.((LivingThing(x)) -> -Abuse(x))", "all x.(Abuse(x,exists y.(LivingThing(y) & Abuse(x,y)))", "all x.((LivingThing(x) & -Abuse(x)) -> -Word(x))", "all x.((LivingThing(x) & -Abuse(x)) -> -Abuse(x))", "all x.(AbuseLivingThing(x) -> -(LivingThing(x) & Abuse(x)))", "all x.((LivingThing(x) & -AbuseMatter(x)) -> -AbuseMatter(x,Life))", "all x.((LivingThing(x) & -Abuse(y)) -> -Abuse(x,y))", "all x.((LivingThing(x) & -Abuse(x)) -> -Abuse(x))", "all x.((LivingThing(x) & -Abuses(x)) -> -Abuse(x))", "all x.((LivingThing(x)) -> -Abuses(x))", "all x.((LivingThing(x) & -Abuse(x)) -> -Abuse(x))"]}
{"id": "enwn_validation_467", "nl": "Martin hurt his dog.", "fol": "", "prediction": ["all x.(Martin(x) -> StunsDog(x))", "Martin hurtsDog(Martin)", "Martin hurtsDog(Martin)", "-IllegalToMartin(Martin,Dog)", "all x.(Martin(x) -> HideDuck(x))", "is i.(Martin(i) & Dog(m))", "-Heilt(Martin,Dog)", "all x.(Martin(x) -> HurtsDog(x))", "Martin hurtsDog(Martin)", "Martin hurtsDog(Martin)", "Martin hurtsDog(Martin)", "Martin hurtsDog(Martin)", "Martin hurtsDunde(Martin)", "Martin hurtsDog(Martin)", "all x y.((Martin(x) & Dog(y)) -> Hurts(x,y))", "\u0430\u0440\u0438\u0442\u0438 (Martin) \u0430\u0441\u0442\u0438\u0441, \u043e\u043c\u043e\u043d\u043e\u0441\u0442\u0438."]}
{"id": "enwn_validation_468", "nl": "You should not hurt animals.", "fol": "", "prediction": ["all x.((Animal(x) & -HasHound(x)) -> -HasHound(x,animal))", "all x.((Animal(x) & -HasToo(x)) -> -HasToo(x))", "all x.((Animal(x) & -Hit(x)) -> -Hit(x.))", "all x y.((Animal(x) & Animal(y)) -> -HasInjured(x,y))", "all x.((Animal(x) & -Illness(x)) -> -(Illness(x) -> Hiding(x)))", "all x.((Animal(x) & -HasInflicted(x)) -> -Hurts(x,Animals))", "all x.((Animal(x) & -Hint(x)) -> -Hint(x,Animal(x))", "all x.(NutCausesAnimals(x) -> -Hurt(x,Animals))", "all x.((Animal(x) & -Hunt(x)) -> -Hunt(x,x))", "all x.((You(x) & Animal(y)) -> NoHail(x,y))", "all x.((Animal(x) & -HasBeenInjured(x)) -> -HasBeenInjured(x))", "all x.((Animal(x) & -Hurts(x)) -> -Hurries(x))", "all x.((Animal(x) & -Hate(x)) -> -HasHunted(x,Animal))", "all x.((Animal(x) & -Droul(x)) -> -Hurt(x,animal))", "all x.(NoHairAnimals(x) -> -IrrelevantForAnimals(x))", "-InjureAnimals(x))"]}
{"id": "enwn_validation_469", "nl": "Martin should not have hurt his dog.", "fol": "", "prediction": ["Martin should have hurtDog(Martin)", "Martin should not have hurtDog(Martin)", "Martin -shouldNotHasHaven(Martin,Dog))", "-HasMartinHas(Martin,Dog))", "all x.((Martin(x) & Hecat(x)) -> -HarmedDog(x))", "Martin shouldn\u2019t have hurtDog(Martin)", "all x y.((Martin(x) & Dog(y)) -> -HasHasHaven(x,y))", "-HasTodNeverHas(Martin,Dog)", "all x.(Martin(x) -> -HasHarshDog(x))", "-HasHavenToIronDog(Martin)", "-HasTouchDog(Martin,Dog)", "Martin -HadToiletHasInjured(Martin,Dog))", "-Has(Martin,Dog)?", "Martin should not have hurtDog(Martin)", "all x.((Martin(x) & Dog(y)) -> -Hilds(x,y))", "Martin should not have hurtDog(Martin)"]}
{"id": "enwn_validation_470", "nl": "If you think your college didn't prepare you for your job then you lack self-assurance in your abilities.", "fol": "", "prediction": ["all x.((College(x) & College(y) & -PreparesCareer(x)) -> LacksSelfAssurance(x))", "all x y.((Council(x) & College(y) & -PreparetsYouForJob(x,y)) -> LacksSelfAssurance(x))", "all x.((College(x) & -PreparesForJob(x)) -> LacksSelfInsurementInAbilities(x))", "all x.((College(x) & -PreparesForJob(x)) -> LeaksSelfAssurance(x))", "all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssuranceInAbilities(x))", "all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssured(x))", "all x.((College(x) & -PreparedForJob(x)) -> LacksSelfAssuranceInAbilities(x))", "all x.((ConstructionYouHelen(x) & College(x) & -PreparedForJob(x)) -> LacksSelfAssurance(x))", "all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssurance(x))", "all x.(DontStandUpSolving(x) -> LacksSelfSuffrage(x))", "all x.((CheapEducation(x) & -PreparedForJob(x)) -> DoNotSelfAssuredInCapabilities(x))", "all x.((College(x) & -Prepared(x,Job)) -> LacksSelfAssuranceInAbilities(x))", "all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssuredness(x))", "all x.((College(x) & -RequiresCommission(x)) -> LacksSelfAssuranceInAlways(x))", "all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssurance(x))", "all x.((College(x) & -PreparedForJob(x)) -> LacksSelfAssuredness(x))"]}
{"id": "enwn_validation_471", "nl": "Cindy doesn't think her college was good enough for her current job. ", "fol": "", "prediction": ["(LittleCandidate(Cindy) -> -GoodEnoughForComunion(Cindy))", "(-GoodEnough(Cindy,college))", "(Likes(Cindy,college) & -GoodEnoughForJob(Cindy))", "(-CindyClark(Cindy) & College(Cindy))", "(NoHopPersonCindy(Cindy) & College(Cindy))", "is not good enough for all x.(CindyJob(x) -> DoesNeedCollege(x))", "-(Cindy(Cindy,College) & -Job(Cindy,Cindy))", "Cindy n'est pas convinced her college was good enough for her current job.", "the college she attends isn't good enough for the job and job.", "(So is Cindy(Campus,college) & -(College(Campus) & Job(Campus,College))))", "(-GoodEnough(Cindy) & ChoseForCase(Cindy))", "all x.((Cindy(x) & College(x)) -> NoGoodEnoughForJob(x))", "(-(Co-School(Cindy) & CurrentlyWork(Cindy)))", "(Cancun'sCollege(Cindy,Cindy) & -PoorEnoughForJob(Cindy,Cindy))", "(LikesCollege(Cindy,Neighborhood)", "(Neighborhood(Cindy) -> -GoodEnoughForCindy(Cindy))"]}
{"id": "enwn_validation_472", "nl": "Confidence is a feeling of self-assurance arising from one's appreciation of one's own abilities or qualities.", "fol": "", "prediction": ["all x.(Confidence(x) -> (FeelingOfSelfAssurement(x) & AroseFromAppreciationOfAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & ApreciateOfAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (SelfAssistance(x) & ApreciationOfNecessities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppreciateOfAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppreciationOfAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfInsurgency(x) & AppropriatesAbilitiesOrQualities(x)))", "all x.((SelfInsured(x) & AppreciationOfAbilitiesOrQualities(x)) -> Confidence(x))", "all x.(Confidence(x) -> (SelfInsured(x) & AppreciationOfAbilitiesOrQualities(x)))", "all x.sootsassurance(x) -> (Earning(x) & AppreciationOfAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (SocialAssistance(x) & AppreciatesOwnAbilitiesOrQualities(x)))", "all x.((Confidence(x) & AppointmentOfAbilitiesOrQualities(x)) -> FeelingOfSelfAssurance(x))", "all x.(SelfInsistance(x) -> (AppreciationOfAbilitiesOrQualities(x) | AppreciationOfQualities(x)))", "all x.(Confidence(x) -> (AffordsAbilitiesOrQualities(x) & RepresentsSelfAssurance(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppreciationOfAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppreciationOfAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (EarningAppreciationOfSelfAssurance(x) & AppreciatingCapabilitiesOrQualities(x)))"]}
{"id": "enwn_validation_473", "nl": "Being confident allows you to feel ready for life's experiences.", "fol": "", "prediction": ["all x.(Confident(x) -> FeelsReadyForLifeExperiences(x))", "all x.((Confidential(x) & FeelsReadyForLife(x)) -> Trustworthy(x))", "all x.(((Confidential(x) & ReadyForLife(x)) -> Confident(x))", "all x.(Successful(x) -> FeelsReadyForLifeExpectations(x))", "all x.(Confident(x) -> Feels(x,y))", "all x.((Concerned(x) & FeelsPreparedForLifeSessions(x)) -> Confident(x))", "all x.((Confident(x) & FeelsReadyForLife(x)) -> ConfidentBy(x))", "all x.(Confident(x) -> ReadyForLife(x))", "all x.((Confidential(x) & FeelsReadyForLifeExperiences(x)) -> Confident(x))", "all x y.((Client(x) & ExistsCelebrate(y) & Confident(x)) -> FeelsReadyForExperiences(x,y))", "all x.(Sufficient(x) -> AllowsRelaxationForLifeExperiences(x))", "all x.(Confidence(x) -> AllowsRelaxation(x))", "all x.((Confident(x) & FeelsReadyForLifeExperiences(x)) -> Confident(x))", "all x.(Concerned(x) -> FeelsRichForLife(x))", "all x.((Confidential(x) & ReadyForLife(x)) -> Confident(x))", "all x.(Confidential(x) -> FeelFeelingRelatedForLifeExperiences(x))"]}
{"id": "enwn_validation_474", "nl": "It's important to feel ready for life's experiences.", "fol": "", "prediction": ["all x.((FeelReady(x) & LifeExperiences(x)) -> Important(x))", "all x.((FeelReadyForLife(x)) -> Important(x))", "all x.((FeelReadyForLife(x)) -> Important(x))", "all x.(RightForLifeExperiences(x) -> ImportantToFeelReadyForLife(x))", "all x.((FeelReadyForLifeXPeaks(x)) -> Important(x))", "all x.(FeelReadyForLife(x) -> ImportantForLifeExperiences(x))", "all x.((FeelReadyForLife(x)) -> ImportantForLife(x))", "all x.((FeelPreparedForLife(x)) -> Important(x))", "all x.(FeelReadyForLifeExperiences(x) -> -Peaceful(x))", "all x.((BeyondLifeExperiences(x) & ReadyForLife(x)) -> Important(x))", "all x.((FeelReadyForLife(x)) -> ImportantForLifeExperiences(x))", "all x y.((FeelReady(x) & LifeExperiences(y)) -> Important(x,y))", "all x.((LivesWith(x) & FeelsReadyFor(x)) -> ImportantAllEvents(x))", "all x.((FeelRelatedForLife(x)) -> Important(x))", "all x.((FeelReadyForLifeExperiences(x)) -> Important(x))", "all x.(ReliableForLifeExperiences(x) -> ImportantToFeelReadyForLife(x))"]}
{"id": "enwn_validation_475", "nl": "Cindy has a lack of self-assurance in her abilities.", "fol": "", "prediction": ["all x.((Cindy(x) & LackOfSelfAssurance(x)) -> DoesNeedSelfAssurance(x))", "all x.(Cindy(x) -> LackOfSelfAssurance(x))", "all x.((Cindy(x) & LackOfSelfAssurance(x)) -> HasChoices(x))", "all x.(Cindy(x) -> LackOfSelfAssuranceInAbilities(x))", "(LackOfSelfAssurance(Cindy) -> -CindyBehavior(Cindy)))", "(LackOfSelfAssuranceInAbilities(Cindy))", "(LackOfSelfAssurance(Cindy))", "all x.(Cindy(x) -> LackOfSelfAssurance(x))", "all x.(Cindy(x) -> LackOfSelfAssurance(x))", "all x.((Cindy(x) & LackOfSelfAssurement(x)) -> LackOfManagement(x))", "all x.(Cindy(x) -> LackOfSelfAssurance(x))", "all x.(Cindy(x) -> LackOfSelfInsurance(x))", "all x.((Cindy(x) & SelfAssurance(x)) -> LackFullInAbilities(x))", "all x.((Cindy(x) & LackOfSelfAssurance(x)) -> CannotWorkEssentially(x))", "(-SelfAssurance(Chindy) -> Cindy(Cindy))", "All x.(Cindy(x) -> LackOfSelfAssuranceInAbilities(x))"]}
{"id": "enwn_validation_476", "nl": "Cindy lacks confidence.", "fol": "", "prediction": ["Cindy lacksResponsibility(Cindy,x)", "-CindyLacksConfidence(Cindy)", "all x.(Cindy(x) -> -CrownsConfidence(x))", "\"Likes(Cindy) & LacksConfidence\"", "all x.(Cincy(x) -> LacksQuietness(x))", "[Confidential(Cindy,y) & (-Cindy(Cindy) | Power(x,y)))", "all x.(Cindy(x) -> -Confidence(x))", "exists x.(Cindy(x) & LacksConfidence(x))", "all x.(Cindy(x) -> lacksConfidence(x))", "Clyde lacksSecurity(cnn)", "(Little(Cindy) & LimitedConfidence(Cindy))", "all x.((Cindy(x) & LacksConfidence(x)) -> -(Child(x) & Confidence(x)))", "all x.(Cindy(x) -> LacksConfidence(x))", "-BuillsCindy(Cindy)", "(LacksConveyance(Cindy) -> -(Cindy(Cindy) & Possesses(Clinder))))", "Cindy lacksconfidence."]}
{"id": "enwn_validation_477", "nl": "It's important to be confident.", "fol": "", "prediction": ["exists x.(Confident(x) & Confident(x))", "all x.(Confident(x) -> Important(x))", "all x.(Client(x) -> Important(x))", "all x.((Busy(x) -> Important(x))", "all x.(Confident(x) -> Important(x))", "All x.((Confident(x) & Confident(x)) -> Important(x))", "all x.(Confident(x) -> Important(x))", "all x.((Conscious(x) & -Focused(x)) -> Important(x))", "all x.(Confident(x) -> Important(x))", "all x.(Confident(x) -> Important(x))", "all x.((Concerned(x)) -> Important(x))", "all x.((Built(x) & Confident(x)) -> Important(x))", "all x.((Conveited(x)) -> Important(x))", "all x.(Concerned(x) -> Important(x))", "all x.(Concerned(x) -> Important(x))", "-(Concernful(x) | Important(x)))"]}
{"id": "enwn_validation_478", "nl": "Cindy should try to be more confident.", "fol": "", "prediction": ["all x.(Cindy(x) -> ShouldBeMoreConfident(x))", "all x.((Cindy(x) & Confident(x)) -> ShouldTry(x,Cindy))", "all x y.((Cindy(x) & Confident(y)) -> ShouldTry(x,y))", "all x.(Cindy(x) -> (MoreGuidance(x) | Confident(x)))", "all x.(Cindy(x) -> MustBeMoreConfident(x))", "all x.(Cindy(x) -> ShouldTryToBeMoreConfident(x))", "all x.(Cindy(x) -> ShouldMoreConfident(x))", "all x.(Cindy(x) -> ShouldTryBeMoreConsistent(x))", "all x.(Cindy(x) -> BecomesMoreGuidden(x))", "all x.(Cindy(x) -> Confident(x))", "all x.(Cindy(x) -> ShouldTryToBeMoreConscious(x))", "all x.(Cindy(x) -> ShouldTryBeMoreConfident(x))", "all x.(Cindy(x) -> ShouldTryToBeMoreConfident(x))", "all x.(Cindy(x) -> ShouldTryToBeMoreConfident(x))", "all x.((Cindy(x) & Confident(x)) -> MustBe(x))", "all x.(Cindy(x) -> BeMoreConfidential(x))"]}
{"id": "enwn_validation_479", "nl": "Personal beliefs aren't a good reason to disobey the law.", "fol": "", "prediction": ["all x y.((Personal(x) & Law(y)) -> -GoodRight(x,y))", "all x.(PersonalBuddies(x) -> -GoodThoughtToDisobeyLaw(x))", "all x.((PersonalBelief(x) & -GoodGrantToDisobeyLaw(x)) -> -GoodGrantToDisobeyLaw(x))", "all x.(PersonalBelief(x) -> -GoodRightToDisobeyLaw(x))", "all x y.((PersonalBelief(x) & Law(y)) -> -GoodRightToDisobey(x,y))", "all x.((PersonalBelief(x) & -GoodRightToDisobeyLaw(x)) -> -GoodRightToDisobeyLaw(x))", "all x.(PersonalBelief(x) -> -GoodRightToDisobeyLaw(x))", "all x y.((PersonalBudget(x) & Law(y)) -> -GoodRightToDisobey(x,y))", "all x.((PersonalBelief(x) & -GoodRightToDisobeyLaw(x)) -> -GoodRightToDisobeyLaw(x))", "all x.(PersonalBeliefs(x) -> -GoodRightToDisobeyLaw(x))", "all x.((PersonalBelief(x) & -GoodRun toDisposeLaw(x)) -> -PersonalBelief(x))", "all x.(PersonalBelief(x) -> -GoodRightToDisobeyLaw(x))", "all x.(PersonalFoundations(x) -> -GoodRightToDisobeyLaw(x))", "all x.(PersonalBugnance(x) -> -GoodRuntoToDisobeyLaw(x))", "all x.((PersonalBelief(x) & -GoodRightToDisobeyLaw(x)) -> -GoodResponseToDisobeyLaw(x))", "all x.(PersonalBelief(x) -> -GoodRightToDisobeyLaw(x))"]}
{"id": "enwn_validation_480", "nl": "The law stipulates you must report your income.", "fol": "", "prediction": ["all x y.((Law(x) & Income(y)) -> NeedsReport(x,y))", "all x.(Law(x) -> MustReportIssue(x))", "all x.(UrbanLaw(x) -> MustReportIncome(x))", "all x.(Stipulates(x) -> ReportsIncome(x))", "all x.(Law(x) -> MustReportIncome(x))", "all x.(Reports(x) -> Deadline(x))", "all x.((Land(x) & ReportImpact(x)) -> Stipulates(x))", "all x.(Right(x) -> ReportIncome(x))", "all x.(Law(x) -> StipulatesReportingIncome(x))", "all x.(Stipulates(x) -> ReportsIncome(x))", "all x.(Law(x) -> ToReportIncome(x))", "all x.(LawStipulatesReport(x) -> MustReportIncome(x))", "all x.(LawStipulates(x) -> ReportIncome(x))", "all x.(Lith(x) -> Exists y.(Income(y) & Report(x,y)))", "all x.((Law(x) & ReportIncome(x)) -> NeedsToBeReported(x))", "all x.(ReportIndividual(x) -> StipulatesInitialReport(x))"]}
{"id": "enwn_validation_481", "nl": "John did not report his income because he does not believe taxes are justified.", "fol": "", "prediction": ["all x.((John(x) & -ReportEdImport(x)) -> -JustifiedTaxes(x))", "-(ReportedIncome(John) & DoesNotConsider(John,Taxes)))", "his income not reported (John) & -CrediesTaxes(John))", "all x.((John(x) & -SavedMoney(x) & -EmployableTaxes(x)) -> -ReportsIncome(x))", "John -ReportedIncome(John) -CurisesTaxes(John))", "EvidenceMeal(John) \u2013 (NoReporting(John) Wesholds(John) & TaxesComprehensive(John)))", "all x.((John(x) & -ReportsIncome(x)) -> -CreditsTraits(x))", "(-ReportsIncome(John) & -CreditIsRichiferedTaxes(John))", "(-ReportsIncome(John) & -CumulatesTaxes(John))", "(-ReportsIncome(John) & -CelifiedTaxation(John,4))", "(-ReportsIncomes(John) & -CreatesJustifiedTaxes(John))", "(-ReportsIncome(John) & -CreditForTaxes(John))", "(-ReportsIncome(John) | (-CitizenOfJustifiedTaxes(John)))))", "(-ReportedIncome(John) & -CreditsTaxes(John,))", "(-ReportsIncome(John) -> -JustifiedTaxes(John))", "John did not report income because he & does not understand taxes."]}
{"id": "enwn_validation_482", "nl": "Personal beliefs aren't a good reason to avoid reporting your income.", "fol": "", "prediction": ["all x.((PersonalBelief(x) & -GoodRightForReportingIncome(x)) -> -GoodRightForReportingIncome(x))", "all x.((PersonalBuddhism(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x))", "all x.((PersonalBelief(x) & -GoodRightToAvoid(x)) -> -(PersonalBelief(x) & PersonalIncome(x)))", "all x.((PersonalBelief(x) & -GoodMoment(x)) -> -GoodMoment(x))", "all x.((PersonalBelief(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x))", "all x.(PersonalBelief(x) -> -BadReportReport(x))", "all x.((PersonalBeliefs(x) & -GoodThought(x)) -> -GoodDisciplineForReportingIncome(x))", "all x.((PersonalFeudgment(x) & -GoodRightToHaveIncome(x)) -> -BadReporting(x))", "all x.((PersonalBeliefs(x) & -GoodRightToAvoidPersonalIncome(x)) -> -GoodRightToAvoidPersonalIncome(x))", "all x.(HasPersonalBuddhism(x) -> -GoodReleasement(x))", "all x.((PersonalBelief(x) & -GoodRightedToAvoidInterest(x)) -> -PersonalBelief(x))", "all x.((PersonalConfidence(x) & -GoodRightAroundReportingIncome(x)) -> -GoodRightAroundReportingIncome(x))", "all x.((PersonalBelief(x) & -GoodBelief(x)) -> -GoodBelief(x))", "all x.(PersonalFindings(x) -> -GoodRunToAvoidIncome(x))", "all x.((PersonalFeeling(x) & -GoodRightToEscapeReportingIncome(x)) -> -GoodRightToEraseReportIncome(x))", "all x.((PersonalBelief(x) & -GoodRightForAvoidingReportingIncome(x)) -> -(PersonalBelief(x) & ExcessReportingIncome(x)))"]}
{"id": "enwn_validation_483", "nl": "John should have reported his income.", "fol": "", "prediction": ["all x.(John(x) -> ShouldReportIncome(x))", "John would have reported Income(John,y) -> Should'veReported(John,y))", "John should have reported income.", "John should have reported his income.", "all x.((John(x) & Income(x)) -> ShouldReport(x,y))", "John should have reported his income.", "John should have reported income.", "John should have reported income.", "all x.((John(x) & Income(x)) -> ShouldReport(x,y))", "John should have reported income.", "John should have reported his income.", "John should have reported his income.", "John did report his income.", "John should have reported Income.", "should have reported income to John.", "-ReportedIncome(John)"]}
{"id": "enwn_validation_484", "nl": "Corey went to work while she was sick during a pandemic.", "fol": "", "prediction": ["all x.((Corey(x) & Sick(x) & Pandemic(x)) -> GoesToWork(x))", "all x y.((Corey(x) & Pandemic(y)) -> GoesToWork(x,y))", "all x.((CoreyAsIs(x) & Pandemic(x)) -> GoToWork(x))", "all x y.((Corey,X) & Pandemic(y)) -> (GoedToWork(x) & WasSick(x)))", "all x y.((Corey(x) & Pandemic(y)) -> GoesToWork(x,y))", "all x y.((Connie(x) & Pandemic(y)) -> GoesToWork(x,y))", "all x y.((Corey) & Pandemic(y)) -> GoesToWork(x,y))", "all x.((Corey(x) & SickDuringPandemic(x)) -> GoesToWork(x))", "all x y.((Kacey(x) & Pandemic(y)) -> GoesToWork(x,y))", "all x.((Kayley(x) & Pandemic(x)) -> GoesToWork(x))", "all x y.((Corey(x) & Pandemic(y)) -> GoesToWork(x,y))", "all x.((Cecelia(x) & Sick(x) & Pandemic(x)) -> GoesToWork(x))", "all x y.((Kevin(x) & Pandemic(y)) -> GoesToWork(x,y))", "all x y.((Carey(x) & Work(y) & Pandemic(y)) -> ThrivesTo(x,y))", "all x.((Corey(x) & SickDuringPandemic(x)) -> GoesToWork(x))", "all x y.((Corey(x) & Sick(y) & Pandemic(y)) -> GoesToWork(x,y))"]}
{"id": "enwn_validation_485", "nl": "If you do something while sick you are prioritizing that thing over your health.", "fol": "", "prediction": ["all x.((Does(x,Sick) & Prioritizes(x,Sickness)) -> Prioritizes(x,Health))", "all x.((Sick(x) & DoingThing(x)) -> PrioritizesOverHealth(x))", "all x.((DoCreamSick(x) & Prioritize(x,P)?) -> Health(x))", "all x.((DoesWhileSick(x) & PrioritizesOverHealth(x)) -> PrioritizesOverHealth(x))", "all x.((DoingSick(x) & PrioritizesOverHealth(x)) -> PrioritizesThing(x,Sickness))", "all x.((Does(x,Sick) & Prioritizes(x,Sick)) -> Health(x)) 1 | 5 | 9 | 9 | 10 | 10 | 13 | 18 | 27 | 28 | 28 | 1 | 18 | 27 | 28 | 28 | 29 | 30 | 81 | 62 | 64 | 61 | 64 | 75) | 2 & 12 (57) & 84)))", "all x.((Do(x) & Sick(x)) -> PrioritizesThatThingOverHealth(x))", "all x.((Does(x) & Sick(x)) -> PrioritizesThem(x,health,health))", "all x.((Do(x) & Sick(x)) -> PrioritizesWithhealth(x))", "all x.((DoesWhileSick(x) & PrioritizesInHealth(x)) -> HealthPositive(x))", "all x.((Does(x,isSick) & PrioritizesThingOverHealth(x)) -> PrioritizesHealth(x))", "all x.((DoesNature(x) & Sick(x)) -> PrioritizesThingOverHealth(x))", "all x.((HasHealth(x) & DoseWhileSick(x)) -> PrioritizingWhatsAboveHealth(x))", "all x.((HasMick(x) & DoseWithSick(x)) -> PrioritizesOverHealth(x))", "all x.((DoAndSick(x) & Prioritize(x,Health)) -> Prioritize(x,Health))", "all x.((DoesWhileSick(x) & PrioritizesThing(x,Health)) -> PrioritizesThing(x,Health))"]}
{"id": "enwn_validation_486", "nl": "Everyone prioritizing health helps stop disease from spreading.", "fol": "", "prediction": ["all x.(PrioritizesHealth(x) -> StopsDiseaseSpreading(x))", "all x.(PrioritizingHealth(x) -> StopsDiseaseSpreading(x))", "all x.(PrioritizesHealth(x) -> StopsDiseaseSpreading(x))", "all x.(PrioritizingHealth(x) -> StopsDiseaseSpreading(x))", "all x.(PrioritizesHealth(x) -> StopsDiseaseSpreading(x))", "all x.(PrioritizesHealth(x) -> StopsDiseaseSpreading(x))", "all x.(PrioritizesHealth(x) -> StopsDiseaseSpreading(x))", "all x.(PrioritizesHealth(x) -> StopsDiseaseSpreading(x))", "all x.(PrioritizesHealth(x) -> StopsDiseaseSpreading(x))", "all x.(PrioritizesHealth(x) -> StopsMarrifaction(x))", "all x.(PrioritizesHealth(x) -> StopsDiseaseSpreading(x))", "all x.(HonorsHealth(x) -> StopsDiseaseSpreading(x))", "all x y.((PrioritizesHealth(x) & Disease(y)) -> StopsSpreading(x,y))", "all x.(PrioritizingHealth(x) -> StopsDiseaseSpreading(x))", "all x.(PrioritizesHealth(x) -> StopsDiseaseSpreading(x))", "all x.(PrioritizesHealth(x) -> StopsDisease(x))"]}
{"id": "enwn_validation_487", "nl": "It's important to stop the spread of disease, especially when health risk is elevated.", "fol": "", "prediction": ["all x y.((Buster(x) & Disease(y) & HealthRiskExposed(x)) -> StopsSpread(x,y))", "all x.((HealthRisk(x) & Estable(x)) -> StopDesease(x))", "all x.((HealthRisk(x) & HighEndHealthRisk(x)) -> StopDiseaseSpread(x))", "all x.((HealthRisk(x) & Elevated(x)) -> StopsSpreadOfDisease(x))", "all x.((HealthRisk(x) & Elevated(x)) -> StopsDisease(x))", "all x y.((HealthRisk(x) & HealthRisk(y)) -> StopsSpreadOfDisease(x,y))", "all x y z.((HealthRisk(x) & Disease(y) & HealthRisk(z)) -> (StopSpread(x,y) & Elevated(y,z)))", "all x y.((HealthRisk(x) & Elevated(y)) -> StopsDiseaseSpread(x,y))", "all x.((HealthRisk(x) & HealthRiskElevated(x)) -> StopsDisease(x))", "all x.((HealthRisk(x) & Elevated(x)) -> StopsSpreadOfDisease(x))", "all x y.((HealthRisk(x) & Disease(y) & Elevated(x,y)) -> StopsSpread(x,y))", "all x y.((HealthRisk(x) & HealthRiskExposure(y)) -> StopsSpreadOfDisease(x,y))", "all x y.((HealthRisk(x) & HealthRisk(y)) -> StopsSpreadOfDisease(x,y))", "all x y.((HealthRisk(x) & HealthRiskEstimated(y)) -> StopSpreadOfDisease(x,y))", "all x.((HealthRisk(x) & Elevated(x)) -> StopSpreadOfDisease(x))", "all x.((HasHealthRisk(x) & EndsDisease(x)) -> ImportantToStop(x))"]}
{"id": "enwn_validation_488", "nl": "A pandemic is a disease that is prevalent over a whole country or the world.", "fol": "", "prediction": ["all x.(Pandemic(x) -> (DiseaseWholeCountryOrWorld(x) & PredominatesOver(x,y)))", "all x.(Pandemic(x) -> (Disease(x) & (PovertinentOver(x,country) | PrevalenceOver(x,world))))", "all x.(Pandemic(x) -> (Disease(x) & (PervasiveOver(x,country,world) | PervasiveOver(x,world))))", "all x.(Pandemic(x) -> (Disease(x) & PredominatesOverCountryOrWorld(x)))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOverRoot(x)))", "all x.(Pandemic(x) -> (Disease(x) & (BurningOverCountry(x) | PredominatingOverWorld(x))))", "all x.(Period(x) -> (Disease(x) & Org(x) & PredominantOver(x,City,World)))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOver(x,y) & WholeCountryOrWorld(y)))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOverWholeCountryOrWorld(x)))", "all x.(Pandemic(x) -> (Disease(x) & (PovertyOverCountry(x) | PrevalenceOverWorld(x))))", "all x.(Pandemic(x) -> exists y.(Country(y) | World(y)) & PredominantOver(x,y)))", "all x.(Pandemic(x) -> (Disease(x) & (ProminentOverCountry(x) | PredominantOverWorld(x))))", "all x.(Pandemic(x) -> (Disease(x) & (PermeatesOverCountry(x) | PrevalentOverWorld(x))))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOver(x,y) & (WholeCountry(y) | WholeWorld(y))))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOverWholeCountryOrWorld(x)))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOver(x,CompleteCountry) | PredominatesOver(x,CompleteWorld)))"]}
{"id": "enwn_validation_489", "nl": "A disease that can effect the whole world escalates health risks for everyone.", "fol": "", "prediction": ["all x.((Disease(x) & CanEffectWholeWorld(x)) -> IncreaseHealthRisksForEveryone(x))", "all x.((Disease(x) & CanEffectWideWorld(x)) -> EscalatesHealthRisksForEveryone(x))", "all x.((Disease(x) & CanEffectWholeWorld(x)) -> EscalatesHealthRisks(x))", "all x.((Disease(x) & CanEffectWholeWorld(x)) -> InescalatesHealthRisks(x))", "all x.((Disease(x) & EffectsWholeWorld(x)) -> ElevatesHealthRisks(x))", "all x y.((Disease(x) & World(y) & Affects(x,y)) -> InescalatesHealthRisks(x))", "all x.((Disease(x) & EffectsWholeWorld(x)) -> IntimidatesHealthRisks(x,everyone))", "all x y.((Disease(x) & WholeWorld(y) & CausesDiseases(x,y)) -> HasHealthRisks(x,y))", "all x.((Disease(x) & EffectsWideWorld(x)) -> EscalatesHealthRisks(x))", "all x.((Disease(x) & WellEndangered(x)) -> InescalatesHealthRisks(x))", "all x.((Disease(x) & EffortsWallWorld(x)) -> DecreasesHealthRisks(x))", "all x.((Disease(x) & CanEffectWorth(x)) -> EscalatesHealthRisksForEveryone(x))", "all x y.((Disease(x) & WholeWorld(y) & Effects(x,y)) -> InescalatesHealthRisks(x,y))", "all x.((Disease(x) & EffectsWholeWorld(x)) -> ElevatesHealthRisks(x))", "all x.((New Disease(x) & CanEffectWholeWorld(x)) -> HealthRisks(x))", "all x.((Disease(x) & CanEffectWholeWorld(x)) -> EndangersHealthRisks(x))"]}
{"id": "enwn_validation_490", "nl": "Corey prioritized work over her health during a pandemic.", "fol": "", "prediction": ["Corey PrioritisedWorkOverHealthDuringPandemic(Corey)", "all x y.((Corey(x) & Pandemic(y) & PrioritizedWorkOverHealth(x,y)) -> PrioritizedHealth(x,y))", "all x y.((Corey(x) & Pandemic(y)) -> PrioritizedWorkoverHealth(x,y))", "all x y.((Corey(x) & Pandemic(y)) -> PrioritizedWorkOverHealth(x,y))", "all x y.((Kayce(x) & Pandemic(y)) -> PrioritizedWorkOverHealth(x,y))", "all x.((Corey(x) & Pandemic(x)) -> PrioritizedWorkOverHealth(x))", "all x y z.((Corey(x) & Pandemic(y) & Work(z) & Health(y)) -> PrioritizedOver(box(x,z))", "all x.((Corey(x) & Pandemic(y)) -> PrioritizedWorkOverHealth(x,y))", "Corey PrioritizedWorkOverHealth(Corey,Pandemic)", "all x y z.((Corey,Pandemic(x) & Work(y) & Health(z)) -> PrioritizedOverAcquired(x,y,z))", "all x y.((Corey(x) & Pandemic(y)) -> PrioritizedWorkOverHealth(x,y))", "all x.((Corey(x) & Pandemic(x)) -> PrioritizedWorkOverHealth(x))", "all x.(Pandemic(x) -> PrioritizedWorkOverHealth(x))", "all x.((ProminentWork(x) & PrioritizedHealth(x)) -> Pandemic(x))", "all x y.((Corey(x) & Pandemic(y)) -> PrioritizedWorkOverHealth(x,y))", "all x y.((Corey(x) & Pandemic(y)) -> Primate(x,y))"]}
{"id": "enwn_validation_491", "nl": "Health should be everyone's priority, especially when health risk is elevated.", "fol": "", "prediction": ["all x.((Health(x) & HealthRiskElevated(x)) -> Priority(x))", "all x.((HealthPriority(x) & HealthRiskElevated(x)) -> Priority(x))", "all x.((Health(x) & HealthRiskElevated(x)) -> Priority(x))", "all x y.((HealthPriority(x) & HealthRisk(y) & Elevated(y)) -> Priority(x,y))", "all x.((HealthPositive(x,y) & ElevatedHealthRisk(x)) -> PriorityPerson(x))", "all x y.((HealthRisk(x) & Everyone(y)) -> Priority(x,y))", "all x.((HealthPriority(x) & HealthRiskElevated(x)) -> Priority(x))", "all x.((HealthPriority(x) & HealthRiskElevated(x)) -> Priority(x))", "all x.((HealthRisk(x) & Elevated(x)) -> Priority(x))", "all x.((HealthPriority(x) & HealthRiskElevated(x)) -> Priority(x))", "all x.(HealthPriority(x) & (HigherHealthRisk(x) | IncreasingHealthRisk(x)))", "all x.((HealthPriority(x) & EspeciallyElevatedHealthRisk(x)) -> Priority(x))", "all x.((HealthPriority(x) & -PopularHealthRisk(x)) -> Priority(x))", "all x.((HealthPriority(x) & HealthRiskElevated(x)) -> Priority(x))", "all x.((HealthPriority(x) & HealthRiskHighlighted(x)) -> Priority(x))", "all x.((HealthPosition(x) & HealthRiskElevated(x)) -> Priority(x))"]}
{"id": "enwn_validation_492", "nl": "A pandemic escalates health risks for everyone.", "fol": "", "prediction": ["all x.(Pandemic(x) -> InescalatesHealthRisks(x))", "all x y.((Pandedia(x) & HealthRisk(y)) -> EscalatesFor(x,y))", "all x.(Pandemic(x) -> IncreasesHealthRisks(x))", "all x y.((Pandemic(x) & Everyone(y)) -> EscalatesHealthRisks(x,y))", "all x.(Pandemic(x) -> EscalatesHealthRisks(x))", "all x.(Pandemic(x) -> EscalatesHealthRisksForEveryone(x))", "all x.(Pandemic(x) -> ElevatesHealthRisks(x))", "all x y.((Pandemic(x) & Person(y)) -> InescalatesHealthRisks(x,y))", "all x.(Grindle(x) -> EscalatesHealthRisks(x))", "all x.(Pandemic(x) -> EscalatesHealthRisks(x))", "all x.(Pandemic(x) -> ImplodesHealthRisks(x))", "all x y.((Pandemic(x) & Person(y)) -> IncreasesHealthRisks(x,y))", "all x.(Pandemic(x) -> EscalatesHealthRisksForEveryone(x))", "all x.(Pandemic(x) -> EscalatesHealthRisks(x))", "all x.((Pandemic(x) & HealthRisk(y)) -> Escalates(x,y))", "all x y.((Pandemic(x) & Person(y)) -> EscalatesHealthRisis(x,y))"]}
{"id": "enwn_validation_493", "nl": "During a pandemic, health should be everyone's top priority.", "fol": "", "prediction": ["all x.(Pandemic(x) -> HealthPriority(x))", "all x.(Pandemic(x) -> TopPriority(x))", "all x.((Pandemic(x) & HighPriority(x)) -> Health(x))", "all x y.((Platemic(x) & HealthPoverty(y)) -> HealthTopPriority(x))", "all x y.((Pandemic(x) & HealthPatient(y)) -> HealthAbsolutePrettyPriority(y))", "all x.(Post-Pandemic(x) -> TopPriority(x))", "all x y.((Pandemic(x) & HealthPeriod(y)) -> TopPriority(y,x))", "all x.((Pandemic(x) & Pandemic(x)) -> HealthPriority(x,y))", "all x.(Pandemic(x) -> HealthPriority(x))", "all x.(MoreFunction(x) -> HealthPointer(x))", "all x.((Pandemic(x) & TopPriority(x)) -> Health(x))", "all x.((Pandemic(x) & TopPriority(x)) -> Health(x))", "all x y.((Pandemic(x) & Health(y) & TopPriority(x,y)) -> TopPriority(y))", "all x.(Pandemic(x) -> TopPriority(x))", "all x y.((Pandemic(x) & WorldCat(y)) -> TopPriority(x,y))", "all x.((Pandemic(x) & HealthTopPriority(x,y)) -> Pandemic(y))"]}
{"id": "enwn_validation_494", "nl": "Corey had the wrong priorities.", "fol": "", "prediction": ["all x.(Corey(x) -> WorstPriorities(x))", "Corey had the wrongpriorities(Corey,1)", "Corey hadWrongPriorities(Corey)", "Corey's priorities were wrong.", "Corey & WorstPriorities(Corey)", "Corey has the wrong priorities.", "all x.(Corey(x) -> WrongPriorities(x))", "Corey had the wrong priorities.", "(WrongPriorities(Corey,Treatment))", "all x.(Corey(x) -> WorstPriorities(x))", "Corey had the wrongpriorities.", "Corey had the wrongPriorities(Corey)", "Corey had wrongpriorities.", "Corey had the wrong priorities.", "Corey had wrongPriorities(Corey)", "all x.(Corey(x) -> WorstPriorities(x))"]}
{"id": "enwn_validation_495", "nl": "Ryan made fun of Stew's favorite TV show in front of others.", "fol": "", "prediction": ["Ryan made funOfTVShow(Ryan) & RemindedFatFavoriteShow(Ryan,Stew)", "all x y.((Ryan(x) & StewCast(y)) -> MadeFunOf(x,y))", "(FunNinjaStew(Ryan) & MyFavoriteTVShowInFrontOfOthers(Ryan))", "Ryan made funOfFavoriteTelevisionShowPinns(Ryan,TelevisionShow,Pinns,Fans))", "Ryan made funOfFavoriteTVShow(Ryan,Stew) & InFrontOfOthers(Ryan,Stew))", "all x y z.((Ryan(x) & StewsTelevision(y) & TVShow(z)) -> MadFunInFrontOfOthers(x,y,z))", "Ryan made funOfFavoriteTelevisionShow(Ryan) infrontOfOthers(Ryan))", "\"RyanmadeFunOfTelevisionShow(Ryan,Stew) & InFrontOfOthers(Ryan,Stew)\"", "(Funny(Ryan,Steed) & InFrontOfOthers(Ryan,Stew))", "(Fun(Ryan,StewedTVShow) & MadeFunCatch(Ryan,Stew,FindFantasticShow))", "Ryan (madeFunOfStewsFavoriteTVShow(Ryan,Stew) & InFrontOfOthers(Ryan,Stew))", "all x y.((Ryan(x) & StewsFavoriteTVShow(y)) -> FunOf(x,y))", "Ryan made funOfFavoriteTVShowInFrontOfOthers.", "-(TheFamousTVShow(Ryan) & StewDear(Ryan))", "all x.((Ryan(x) & Stew(Stew)) -> madeFun(x,stew3))", "Ryan made funOfStewsFavoriteTVShow(Ryan)"]}
{"id": "enwn_validation_496", "nl": "If you are in front of others then you are in public.", "fol": "", "prediction": ["all x.((InFrontOfOthers(x) & InPublic(x)) -> InPublic(x))", "all x.((InFrontOfOthers(x)) -> Public(x))", "all x.((InFrontOfOthers(x) & InPublic(x)) -> InPublic(x))", "all x.((FrontOfOthers(x) & InPublic(x)) -> Public(x))", "all x.(InfrontOfOthers(x) -> Public(x))", "all x.((FrontOfOthers(x) & Public(x)) -> inViewOfOthers(x))", "all x.((InFrontOfOthers(x) & InPublic(x)) -> InPublic(x))", "all x.((InFrontOfOthers(x) & InPublic(x)) -> Public(x))", "all x.(InFrontOfOthers(x) -> Public(x))", "all x.((InFrontOfOthers(x)) -> Public(x))", "all x.((FrontOfOthers(x) & Public(x)) -> InFrontOfOthers(x))", "all x.((FrontOfOthers(x) & InPublic(x)) -> Public(x))", "all x.((InfrontOfOthers(x)) -> Public(x))", "all x.((InFrontOfOthers(x)) -> InPublic(x))", "all x.(FrontOfOthers(x) -> Public(x))", "all x.(InfrontOfOthers(x) -> InPublic(x))"]}
{"id": "enwn_validation_497", "nl": "Making fun of something that someone else likes can make that person feel ashamed and foolish.", "fol": "", "prediction": ["all x.((MakeHuntInSomething(x) & Likes(x)) -> (MakeShunted(x) & Foolish(x)))", "all x y.((Fun(x) & Likes(x,y) & Person(y)) -> (Fears(y) & Fake(y)))", "all x.((DrivingFunOf(x) & SomeoneOtherLikes(x)) -> (Shameful(x) & Foolish(x)))", "all x y.((FunAction(x) & Person(y) & Likes(y)) -> (Shameful(x,y) & Fain(x,y)))", "all x y z.((MakingFunOf(x,y) & Person(z) & Likes(z,y)) -> (Angry(z,y) & Foolish(z)))", "all x.((Fun(x) & Likes(x,Baby)) -> (Bangasted(x) & Fooky(x)))", "all x y.((ScaryFan(x,y) & Person(y)) -> (MakesFunOf(x,y) & FeelSad(y) & F*cky(y)))", "all x y.((Laughs(x) & Person(y) & Likes(y)) -> (Shamed(y) | Foolish(y)))", "all x y.(Fun(x) -> (MakesFunOf(x,y) & Likes(x,y) & PersonFindsAbsoluteAndFoolish(x)))", "all x y.((MakingFunOf(x,y) & SomeoneOtherLikes(x)) -> (Harmful(y) & Foolish(y)))", "all x.((Fun(x) & Likes(x,y)) -> (HasSashamed(y) & Fooled(y)))", "all x y.((Fun(x) & Person(y) & Likes(y,x)) -> (FeltShocked(y,x) & Foolish(y,x)))", "all x y.((CausedBy(x,y) & Other(y) & Likes(x)) -> FeelsSad(x))", "all x y.((MakingFunOf(x,y) & OtherPerson(y)) -> (Used(x) & Shameful(y) & Foolish(y)))", "all x y.((Fun(x) & Likes(y) & Person(z)) -> (EmbarrassedPerson(x,z) & FoolishPerson(x)))", "all x y.((Person(x) & Person(y) & Likes(x,y)) -> (Be ashamed(x) & F**k(x)))"]}
{"id": "enwn_validation_498", "nl": "To humiliate someone is to make someone feel ashamed and foolish by injuring their dignity and self-respect, especially publicly.", "fol": "", "prediction": ["all x y.((HumbleSon(x) & Person(y)) -> (EnjoysDignity(x,y) & InjuresSelfRespect(x,y)))", "all x y.((Heimatically(x) & Jew(y)) -> (HasAched(x,y) & Foolish(y) & Injure(x,y) & EspeciallyPublicly(x,y)))", "all x y z.((Hummels(x) & Person(y) & Shamed(z) & Fooky(z)) -> InjuresDignityAndSelfRespect(x))", "all x.(Humorize(x) -> (MakesShamedAndFoolish(x) & InjuresDignityAndSelfRespect(x) & EspeciallyPublicly(x)))", "all x y.((HumbleAction(x) & Person(y)) -> (Shameful(x,y) & Fake(x,y) & InjureDignityAndSelfRespect(x) & EspeciallyPublic(y)))", "all x y z.((Holdens(x) & Person(y) & Shameful(y) & F**k(z) & InjuresDignityAndSelfRespect(x,y,z)) -> MakesFearAndSick(y,z))", "all x.(Hilarious(x) -> (Father(x) & Refuses(x) & Fake(x) & InjuresDignity(x) & InjuresSelfRespect(x) & Publicly(x)))", "all x.(Harmful(x) -> \u201cFatherShelter(x) & Foolish(x) & InjuresDignityAndSelfRespect(x)))", "all x.(Habitats(x) -> (Restaurants(x,y) & Makes(x,z) & Shameful(y) & Footy(z) & InjuresDignityAndSelfRespect(x) & Publicly(x)))", "all x.((Humorize(x) & Person(x)) -> (Shameful(x) & Foolish(x) & InjuresDignityAndSelfRespect(x)))", "all x y.((Humorizes(x) & Person(y)) -> (FearsAppalled(x,y) & Foolish(y) & InjuresDignityAndSelfRespect(x,y)))", "all x.(Humorizes(x) -> (ShamefulAndFoolish(x) & InjureDignityAndSelfRespect(x)))", "all x.((HasShame(x) & FeelShameful(x) & Foozie(x) & Injure(x) & Injure(x)) -> Humiliates(x))", "all x y z.((Hamilice(x) & Person(y) & (Dignity(z) | SelfRespect(z)) & Public(x,y,z)) -> Makes(x,y))", "all x y.((Habitate(x) & Person(y)) -> (MakingShame(x,y) & MakingFoolish(x,y) & Injuring(x,y) & Publicly(y,Dignity)))", "all x y.((Hamlete(x) & Person(y)) -> (MakesAboutreefAndFoolish(x,y) & InjuresDemnityAndSelfRespect(x,y)))"]}
{"id": "enwn_validation_499", "nl": "Humiliation is a form of harm.", "fol": "", "prediction": ["all x.(Humiliation(x) -> HasHarm(x))", "all x.(Humiliation(x) -> HarmForm(x))", "all x.(Humiliation(x) -> FormOfHarm(x))", "all x.(Humiliation(x) -> Harm(x))", "all x.(Humiliation(x) -> Harm(x))", "all x.(Humiliation(x) -> Harm(x))", "all x.(Humiliation(x) -> Harm(x))", "all x.(Humiliation(x) -> Harm(x))", "all x.(Humiliation(x) -> Harm(x))", "all x y.((Humiliation(x) & FormOfHarm(y)) -> Harm(x))", "all x.(Humiliation(x) -> Harm(x))", "all x.(Humiliation(x) -> Harm(x))", "all x.(Humiliation(x) -> Harm(x))", "all x.(Humiliation(x) -> DoesHarm(x))", "all x.(Humiliation(x) -> Harm(x))", "all x.(Humiliation(x) -> Harm(x))"]}
{"id": "enwn_validation_500", "nl": "Ryan made fun of Stew's favorite TV show in public.", "fol": "", "prediction": ["(FavoriteTVShow(Ryan,Salt) & FavouriteTVShow(Stick,Stow))", "Ryan made funOfFavoriteTVShowInPublic(Ryan,Stew)", "(MadeFunOf(Ryan,Stew) & InPublic(Lynn))", "(FavoriteTVShow(Ryan) & FreezesStew(Ryan))", "(FatTVShow(Ryan) & Fun(Ryan,Stew,Spot))", "all x y.((Ryan(x) & StewsFavoriteTVShow(y)) -> CelebratedInPublic(x,y))", "Ryan made funta'sFavoriteTVShowInPublic(Ryan,Stew,Stew))", "all x y.((Ryan(x) & TVShow(y) & Favorite(y,Stew)) -> AnnouncedInPublic(x,y))", "all x y.((Ryan(x) & Stew(y)) -> MadeFunOfTelevisionShowInPublic(x,y))", "Ryan made funOfTeaShow(Ryan,Stew) & InPublic(Ryan,Stew))", "Ryan made funOfFavoriteTVShow(Ryan))", "all x y.((Ryan(x) & TVShow(y) & Favorite(y,Stew)) -> MadeFunInPublic(x,y))", "all x.((Reynolds(x) & Stew'sTVShow(x)) -> FunInPublic(x))", "Ryan made fun of Stew's favorite TVShow(Ryan) & -Fantastic(Ryan))", "\u2013RyanMadeFunOfFavoriteTVShow(Ryan,Serves(Ryan,Serves(Ryan))", "(MixedFunOf(Ryan,Stew,TVShow) & PublicDislike(Ryan,Stew))"]}
{"id": "enwn_validation_501", "nl": "Ryan made Stew feel ashamed and foolish in public.", "fol": "", "prediction": ["Ryan made Stew FeelSickenedAndFoolish(Stew,Public)", "(StewShamed(Rhyan) & FoolinOffense(Ryan))", "(FeedsStrictly(Ryan,Stew) & Foust(Stew) & InPublic(Ryan))", "all x.((Ryan(x) & Stew(s)) -> (Scumbed(x) & Fooled(x)))", "Ryan made Stew feel ashamed and foolish in public.", "all x y.((Ryan(x) & Stew(y)) -> (Auntiated(y) & Foolish(y)))", "(MadeStuff(Ryan,Stew) & Scared(Ryan,Stuff))", "Ryan madeStewStashFeelFoolishAndFoolishInPublic(Ryan)", "all x.(RyanBy(x) -> MadeStew(x))", "all x y.((Ryan(x) & Stew(y)) -> (FearsCowardly(y,x) & FoolishInPublic(y)))", "Ryan made StewfeelSaddenedAndFoolishInPublic(Ryan,Stew))", "(HasStorm(Ryan) & MadeStewFeelSormoned(Ryan) & FookyPublic(Ryan))", "everytime he walked into a liar shop (Stew) & FeltShameful(Stew) & F*cking(Stew))", "Ryan made Stew feel ashamed and Fooky InPublic(stew,y)", "all x.(Ryan(x) -> (SolvedInPublic(x) & FoolishInPublic(x)))", "Ryan made Stew FeelSickenedAndFoolishInPublic(Stiff)"]}
{"id": "enwn_validation_502", "nl": "Ryan humiliated Stew.", "fol": "", "prediction": ["(Harmastes(Ryan,Stew)", "Ryan humiliatedStew.", "(HammeredByStew(R Ryan,Stew))", "Ryan humiliatedStew.", "(IhumiliatedStew(Ryan)", "Ryan humiliatedStew.", "-HumilatedDuckStew(Ryan)", "Ryan humiliatesStew.", "Ryan humiliatedSteed.", "(HummeredAtStew(Ryan) & Stew(Stew))", "Ryan humiliatedStew.", "Ryan humiliatedStew.", "Ryan humiliatedSteed(Reynolds)", "Ryan humiliatedStew.", "(HiddenStuff(Ryan) & HarmlessStew(Reyan))", "Ryan humiliatedSteed."]}
{"id": "enwn_validation_503", "nl": "You should not humiliate someone else.", "fol": "", "prediction": ["all x.((TeachMunchperson(x) & InPartIIIIIIIIIIIIIii)) -> -Honest(x))", "(nothing humiliates(nonhumiliates(n) -> Person(n)))", "all x.((Muslim(x) & Person(x)) -> -Hummels(x))", "-HarmlesslyJubileAnother((you))", "all x.((NoHumors(x) & Nobody(y) & In(x,y)) -> -Harmless(x))", "all x.((Someone(x) & Humiliates(x,y)) -> -HasOther(x,y))", "all x y z.((Person(x) & Person(y) & Humilate(z)) -> -Humble(x,y))", "all x y.((Enematician(x) & Person(y)) -> -Humorize(x,y))", "you should nothumiliateath(you)", "all x.((IsIt(x) & Humiliated(x)) -> -Imploy(x))", "all x y.((Person(x) & -Humorize(y,x)) -> -Humor.", "all x y.((Humor(x) & Person(y)) -> -Humor(x,y))", "all x.((Helm(x) & Humiliates(x)) -> -HasTolerant(x,y))", "all x y.((Tomob(x) & Person(y)) -> -Humorize(x,y))", "all x y.((Humorte(x) & Person(y)) -> -Has(x,y))", "all x.((You(x) & Don'tHummel(x)) -> -HasAgain(x))"]}
{"id": "enwn_validation_504", "nl": "Ryan should not have humiliated Stew.", "fol": "", "prediction": ["(DemolishedSlew(Ryan) & -JubilatedSew(Ryan))", "\"ImprovedStew(Ryan)", "-HasHammedStew(Ryan,Stew)", "all x y.((Ryan(x) & Stew(y)) -> -Humorized(x,y))", "-(Steed(Ryan) & Humiliated(Ryan))", "Ryan,Stew, should neverhavehumiliated(Ryan,Stew)", "Ryan & Stew's humiliation was not appropriate.", "exists x.(DoneBy(x,Ryan) & -HilariousStudy(Stew))", "all x y.((Ryan(x) & Stew(y)) -> -Toxified(x,y))", "(Immolated(Ryan) & Stew(Stew))", "Ryan should not have humiliatedStew.", "-ImmunizedStew(Ryan).", "Ryan should have -humiliatedStew(Ryan))", "Ryan \u2013 \u2013 humiliatedStew ((Ryan) & -HungryForStew(Ryan)))", "all x.(Ranan(x) -> -humiliatedStew(x))", "(((Ryan(Ryan) | Stew(Ryan))) -> -Hammed(Ryan))"]}
{"id": "enwn_validation_505", "nl": "Henry was dumped by Chloe and thought it was unfair of her so he is planning to deface her Facebook page.", "fol": "", "prediction": ["(DepictsFacebook(Honess,Chloe) & DumpedBy(Henry,Chloe) & Unfair(Henry))", "-exists x.(Henry(x) & DumpedBy(x,Chloe) & ThinksUnfairMeaning(x) & PlansToDefaceFacebookPage(x))", "the utmost honest and unjusted(h) x y z.((Henry(u) & Chloe(y) & FacebookPage(z)) & WasDumpedBy(ut) & SheThinksItAljust(y,x)))", "(IsDumped(Recently,Chloe)? & IsUnjust(Recently,Chloe)) -> PlannedToDefameFacebook(Principle))", "all x.((Henry(x) & DumpedByChloe(x)) -> PlannedDeface(x))", "all x.(Than(x) -> (DumpedByChloe(x) & ThinksUnfair(x) & PlanesDeface(x,Chloe,Facebook)))", "(Amenable(Harry) & DumpedByChloe(Harry) & Unfair(Chloe) & PlansDefaceFacebookPage(Harry))", "all x y.((ThanLetHussyBetween(x) & Chloe(y)) -> (DummpedBy(x,y) & Unfair(y) & PlansDefaceToFacebook(x,y)))", "-DummpedByChloeUnfairly(Henry)", "(DummpedByChloe(Harry) & thoughtUnfair(Hey) & PlannedToFacebookPage(Henry))", "(DummpedByChloe(Henry) & UnfairPolitical(Thomas) & PlannedToDefaceFacebookPage(Henry))", "(WillDouble(Henry) & DumpedByChloe(Henry) & ThinksUnfair(Henry,Cloe))", "all x y.((Henry(x) & Chloe(y) & DumpedBy(x,y) & UnfairShe(z)) -> PlanningToDefeat(x,z))", "(dumpedByChloe(Eddie) & ThoughtUnfairOfChloe(Eddie) & PlannedToDefaceFacebook(Eddie,Eddie))", "all x y.((Henry(x) & Chloe(y) & DumpedBy(x,y)) -> PlannedDestain(x,y))", "(DumpedByChloe(Henry) & ThoughtsUnfair(Henry) & -PlansDefaceFacebook(Henry,Henry))"]}
{"id": "enwn_validation_506", "nl": "If someone does something to you that feels unfair then you feel wronged by that person.", "fol": "", "prediction": ["all x.((Does(x,y) & FeelsUnfair(y)) -> FeelsUnrightedByThatPerson(x,y))", "all x.((Does(x,y) & FeelsUnfair(y)) -> FeelsWornBy(x,y))", "all x.((DoesTraumaticallyUnfair(x) & FeelsUnfair(x)) -> FeelsUnrightedBy(x))", "all x.((DoesToYou(x) & FeelsUnfair(x)) -> FeelsWorstByHeaven(x))", "all x.((DoesUnjust(x) & FeelsUnfair(x)) -> FeelsWorstBy(x))", "all x.((Person(x) & DoesUnfairDoing(x)) -> FeelsWrongedBy(x))", "all x.((DoesUnfair(x) & FeelsUnfair(x)) -> FeelsFeltOffendedBy(x))", "all x y.((Person(x) & Person(y) & DoseUnfairTo(x,y)) -> FeelsWorst(x,y))", "all x.((DoesToYou(x) & FeelsUnfair(x)) -> FeelsWoundByPerson(x))", "all x.((DoesUnfairThing(x) & FeelsUnfair(x)) -> FeelsObscured(x))", "all x y.((Does(x,y) & Person(y) & FeelsUnfair(x)) -> FeelsBloodedBy(y,x))", "all x.((Person(x) & DoseUnfairToYou(x)) -> FeelsWorst(x))", "all x.((Person(x) & FeelsUnfair(x)) -> FeelsWorstBy(x))", "all x y.((Person(x) & DoEvilToMen(x) & FeelsUnfair(x)) -> FeelsWronged(y))", "all x y.((Person(x) & Dose(y) & FeelsUnfair(y)) -> FeelsWorst(x,y))", "all x.((DoesUnfairThing(x) & FeelsUnfair(x)) -> FeelsWrongedBy(x))"]}
{"id": "enwn_validation_507", "nl": "Defacing someone's social media page is a way of harming them.", "fol": "", "prediction": ["all x.(DefacingSeoPage(x) -> HarmsPerson(x))", "all x y.((Created(x,y) & SocialMediaPage(y)) -> Harms(x,y))", "all x.(DefacingSocialMediaPage(x) -> HarmingPerson(x))", "all x.((DissectedSocialMediaPage(x) & Person(x)) -> Harms(x))", "all x y.((DefacingSeoPublic(x) & SocialMediaPage(y)) -> Harms(x,y))", "all x y.((SocialMediaPage(x) & Person(y) & Defacing(x,y)) -> WayOfHarming(x,y))", "all x y.((Suggestion(x) & SocialMediaPage(y) & Defacing(x,y)) -> Harming(x,y))", "all x y.((FaceBook(x) & SocialMediaPage(y) & Person(y)) -> Harming(x,y))", "all x.((FallingSocialMediaPage(x,y) & Person(y)) -> Harms(x,y))", "all x y.((SimilarMediaPage(x) & SocialMediaParty(y) & RemovedFromRealDonor(x,y)) -> Harms(x,y))", "all x y.((Person(x) & SocialMediaPage(y) & Defaced(x,y)) -> Damages(x,y))", "all x y.((FollowSocialMedia(x) & SolePage(y)) -> HelpsHarm(y,x))", "all x.((ScientificMediaPage(x) & Defacing(x)) -> Harms(x))", "all x.((DigitalPage(x) & Disabling(x)) -> Harming(x))", "all x y.((ScientificMediaPage(x) & Person(y) & Defaced(x,y)) -> Harms(y))", "all x.(DefacingSocialMediaPage(x) -> HarmsPeople(x))"]}
{"id": "enwn_validation_508", "nl": "Planning to inflict harm on someone for a wrong suffered at their hand is called seeking revenge.", "fol": "", "prediction": ["all x y.((Plans(x) & Person(y) & InflictsHarm(x,y)) -> SeekingRevenge(x))", "all x.((PlanningToInflictHarmOnPerson(x) & CausesWrongHand(x)) -> SeeksRevenge(x))", "all x.((PlansToInflictHarmOn(x,y) & Person(y) & SuffersFromWrongHand(x,y)) -> SeekingRevenge(x))", "all x y.((PlansToInflictHarm(x,y) & Person(y) & WrongSufferedAtHand(y)) -> SeekingRevenge(x))", "all x.((PlanningToInflictHarm(x) & SomeoneSufferedAtHand(x)) -> SeekingRevenge(x))", "all x y.((Plants(x) & InflictsHarmOnPerson(x) & WarnSufferedAtHand(y)) -> SeekingRevenge(x))", "all x.(PlanningInflictHarm(x) -> Salvation(x))", "all x.(PlansToInflictHarmForWrongSufferedAtHand(x) -> SeekingRevenge(x))", "all x.((PlanningToInflictHarmOnPerson(x) & WrongSufferedAtHand(x)) -> Revenge(x))", "all x.((PlansToInflictHarmOnAnother(x) & HappenedAtHand(x)) -> SeekingRevenge(x))", "all x y.((PlansInflictHarmOn(x,y) & Person(y) & WrongSufferedAtHand(y)) -> SeeksRevenge(x))", "all x.((PlansToInflictHarmOn(x,y) & SufferedAtHand(y)) -> SeekingRevenge(x))", "all x.(PositionToInflictHarmOnLittlePerson(x) -> SeekingRevenge(x))", "all x.((PlansToInflictHarmOnOne(x) & CausedBornHand(y)) -> SeeksRevenge(x))", "(SeeksRevenge(planning(planning,inflictsHarm(planning,hand-suffering))", "all x y.((PlanningToInflictHarm(x,y) & Person(y) & SuffersOffHand(y)) -> SeekingRevenge(x))"]}
{"id": "enwn_validation_509", "nl": "It is better to heal than to hurt others.", "fol": "", "prediction": ["(MoreThanHound(healing) & Better(healing))", "all x y.((Treatment(x) & Healing(y) & Irresponsible(x)) -> BetterToHeal(x,y))", "every day.((Healing(x) & HurtingOthers(x)) -> Better(x))", "exists x.(Heal(x) & -Hint(x))", "all x.(IsBetterToHealThan(x,y) -> (IsBetterToHirtOthers(x)))", "all x.((Heal(x) & NotIllusion(x)) -> BetterToHirn(x,Others))", "all x.((Healing(x) | HurtingOthers(x)) -> Better(x))", "all x.((Heal(x) & BetterThanHarm(x)) -> BodiesOther(x))", "all x.((Heal(x) | Hurt(x))) -> BetterToHeal(x))", "exists x.(Heal(x) & BetterToHurry(x))", "all x.((Healing(x) | HiringOthers(x)) -> Better(x))", "(BetterToHeal(i) & BetterToHail(i))", "all x.((Heal(x) | Hurt(x])) -> Better(x))", "(BetterToHeal(x) & BetterToHint(x))", "(BetterToHealDiseases(Worst) & BetterToHurchOthers(Worst))", "exists x y.((Element(x) & (Heal(x) | Hurt(y))) -> Better(x,y))"]}
{"id": "enwn_validation_510", "nl": "When you feel wronged by someone, forgiving and forgetting is a way of healing.", "fol": "", "prediction": ["all x.(FeltWronged(x) -> ForgivesAndForgets(x))", "all x.((Personnel(x) & FeelsWronged(x)) -> ForgivesAndForgets(x))", "all x.((FeelingOrFellowedBySomeone(x) & ForgivesAndOrganism(x)) -> Healing(x))", "all x.((FeelWrongedBy(x) & Forgiveness(x) & Forgetfulness(x)) -> Healing(x))", "all x y.((FeltWornBy(x,y) & Person(y)) -> ForgivenessAndForgaining(x))", "all x.((FeelWronged(x) & FeelsForgiving(x) & FeelsForgetful(x)) -> Healing(x))", "all x.((Forgiveness(x) & ForgetsPeople(x)) -> Healing(x))", "all x.((FeltWornBy(x) & FeelsWrong(x)) -> (Forgiven(x) & Forgets(x)))", "all x y.((You FeelWronged(x) & Person(y)) -> ForgivenAndUnforgettable(x,y))", "all x.((Forgiveness(x) & Forgiveness(x) & Forgetting(x)) -> Healing(x))", "all x y.((FeltOffended(x) & Person(y)) -> ForgivesAndForgastes(x,y))", "all x.((FeelProblem(x) & FeelsWronged(x)) -> ForgivenessAndForgiving(x))", "all x.((FeltWorst(x) & Person(x)) -> ForgivingAndUngaging(x))", "all x.((FeltWrongedBy(x) & Forgiven(x) & Forgot(x)) -> Healing(x))", "all x.((FeltUnwronged(x) & Forgiving(x) & Forging(x)) -> Healing(x))", "all x y.((FeltOffended(x) & Person(y)) -> ForgivesAndForgets(x,y))"]}
{"id": "enwn_validation_511", "nl": "Henry felt wronged by Chloe and was planning to deface her Facebook page.", "fol": "", "prediction": ["Henry felt wronged by Chloe and planned to defaceFacebookpage.", "(feltWrongedByChloe((Henry) & OriginallyPlannedToDefeatFacebook(Heinz)))", "Henry felt wronged by Chloe and was planning to deface Facebook Page.", "Henry felt wronged by Chloe and planned to defaceFacebookPage(HEine,Head) & HadReason(Heine,Head))", "((Henry(Henry) & Chloe(Chloe)) -> FeelsFeltFeltWorse(Henry)) & DesignatedToDefaceFacebookPage(Henry,Chloe))", "Henry felt wronged by Chloe. He was planning to defaceFacebookpage(Henry,Chloe)", "all x y.((Henry(x) & Chloe(y)) -> (FeltWronged(x,y) & DefacedFacebookPage(x,y)))", "Henry felt wronged by Chloe and planned a FacebookDeffacement(Henry,Chloe)", "all x.((Henry(x) & WrongedByChloe(x)) -> PlannedToDefaceFacebookPage(x))", "all x y.((Henry(x) & Chloe(y)) -> (FeltOffended(x,y) & DecidedToDeface(x,y)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (FeltWrongedBy(x,y) & PlanningToDefeat(x,z)))", "(FellsAnd(Henry) & Chloe(Chloe) & PlannedToDefaceFacebook(Henry,Chloe))", "Henry felt wronged by Chloe and PlannedDefaceFacebookPage(Henry,Chloe)", "all x y.((Heinz(x) & Chloe(y)) -> (FeltOffended(x,y) & PlannedFacebookDeface(x,y)))", "Henry felt wronged by ChloeAndPlanetsToDefameFacebookPage(Henry,Chloe))", "(LikeChloe(chloe) & FeelsUnrighted(h) & PlanningDeface(h))"]}
{"id": "enwn_validation_512", "nl": "Henry felt wronged by Chloe and was planning to inflict harm on her.", "fol": "", "prediction": ["all x.((Henry(x) & Chloe(x)) -> (FeltWronged(x) & PlantedInflictHarm(x)))", "all x y.((Harm(x) & Chloe(y)) -> (FeltWorse(x,y) & PlannedToInflict(x,y)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWorst(x,y) & PlannedToInflictHarm(x,y)))", "as Henry felt wronged by Chloe and he planned to inflictHarm on her.", "all x y z.((Henry(x) & Chloe(y) & Thru(z)) -> (FeltWorsebroughtBy(x,z) & PlannedToInflictHarm(x,y)))", "(all x.((Henry(x) & Chloe(y)) -> FeelsWorsted(x,y)) & PlanningToInflictHarmOn(x,y))", "(SelfImpaired(Hunger,Chloe) & PlanningToInflictHarmOn(Hazard,Chloe))", "(Henry(Henry) -> (FeltWorstowedByChloe(Henry) & PlannedHazard(Henry)))", "(SeekingMortality(Henry,Chloe,Hondness))", "(WorseWorst(Henry,Chloe) & DesignedToInflictHarmOn(Henry,Chloe))", "all x y z.((Henry(x) & Chloe(y) & Chloe(z)) -> (FeltWronged&PlannedToInflictHarm(x,z)))", "(HeadsFeltWorst(Heinel,Chloe) & PlannesInflictHarm(Heinel,Chloe))", "all x.((Henry(x) & Chloe(x)) -> (FeltWronged(x) & PlannedToInflictHarm(x)))", "(Understands(Henry,Chloe) & PlanningToInflictHarm(Henry,Chloe))", "(Henry(Henry,Chloe) & WrongedBy(Henry,Chloe))", "(all x.(Henry(x) -> (FeltWorst(x) & InflictsHarm(x))))"]}
{"id": "enwn_validation_513", "nl": "Henry is seeking revenge.", "fol": "", "prediction": ["inRevenge(Henry)", "Henry is seekingRevenge(Henry)", "Henry savorsRevenge(Henry)", "(SeeksRevenge(Henry)", "Henry is seekingRenemy(Henry)", "Henry seeksRevenge(Henry)", "Henry stretchesRevenge(Henry)", "Henry is seekingRevenge(Henry,IsBetterFor(Henry,IsBetterFor(Henry,IsBetterFor(Henry,IsBetterFor(here,IsBetterFor(h)))", "HenrysSeeksRevenge(Henry)", "Henry is seekingRevenge(Henry)", "Henry PursuesRevenge(Henry,SureMeToday)", "Henry SeeksRendition(Henry)", "Henry seeksRevenge(Henry)", "-SeeksRevenge(Henry)", "Henry is seekingRenemy(Henry)", "Henry seeksRevenge(Henry)"]}
{"id": "enwn_validation_514", "nl": "When you feel wronged, it is better to forgive and forget than to hurt those who wronged you.", "fol": "", "prediction": ["all x.((FindsWronged(x) & ForgivesAndForgets(x)) -> BetterToIrreparateTravers(x))", "all x.(FeltMajor(x) -> (Forgive(x) & Remember(x) & -FeltMajor(x)))", "all x.(FeltWrongly(x) -> BetterToForgiveAndForgetThanHave(x))", "all x.(FeltWronged(x) -> BetterToForgiveAndAntwerve(x))", "all x.((FeltWorst(x) & Forgive(x) & Remember(x)) -> BetterToHarm(x))", "all x.((FeltUnworst(x) & FeelsBetterToForgiveAndForget(x)) -> BetterToGoatAndIllness(x))", "all x y z.((FeltAndFeltWorst(x) & Forgive(y,x) & Forget(z,x) & Illness(z,x)) -> BetterToForgiveAndIgnore(x,y,z))", "all x.((FeltWronged(x) & ForgiveAndForget(x)) -> BetterToIllnessAndHasSpoken(x))", "all x.(InhalingWronged(x) -> (BetterToForgive(x) & BetterToForget(x) & BetterToHaveHarm(x)))", "all x.((FeltWorsted(x) & BetterToForgive(x) & BetterToGain(x)) -> Irrrrrrrrn(x))", "all x.(Andrews(x) -> (FeelWelled(x) & Forgive(x) & Forget(x) & Hurt(x)))", "all x.((FeelingWronged(x) & BetterToForgive(x) & BetterToRun(x) & BetterToIrregularize(x)) -> Unforgive and Unforget(x))", "all x.((FeelWorn(x) & Forgive(x) & Remember(x)) -> BetterToHaveAndIrresponsible(x))", "all x.((FeltWorn(x) & Forgives(x) & Forgets(x)) -> Idle(x))", "all x y.((FeltWorsted(x) & Person(y)) -> (Forgiven(x) & HasHunted(x,y)))", "all x.((Forgiveness(x) & Forget(x)) -> BetterThanHarmThoseWhoMadeYou(x))"]}
{"id": "enwn_validation_515", "nl": "It is better to forgive and forget than to seek revenge.", "fol": "", "prediction": ["all x y.((Forgiveness(x) & Forget(y)) -> BetterToSeekRevenge(x,y))", "(all x.(Forgiveness(x) & AllOdd(x)) -> BetterToSeekRevenge(x))", "all x y.((Forgives(x) & Forgets(x) & SeeksRenece(y)) -> BetterToSeek(x,y))", "all x.((Forgives(x) & Forgets(x) & InsteadSeeksRevenge(x)) -> Better(x))", "all x.((Forgivere(x) & Forget(x) & Revenge(x)) -> BetterToSeek(x))", "All x.((IsBetterToForgive(x) & IsBetterToForget(x)) -> IsBetterToSeekRevenge(x))", "all x.((Forgive(x) & Forget(x)) -> BetterToSeekRevenge(x))", "all x.((Forgives(x) & Forgets(x)) -> SeeksRevenge(x))", "all x.((Forgive(x) & Forget(x)) -> -SharkRevenge(x))", "All x y.((ForgiveNeverGain(x) & ForgetRendition(y)) -> BetterThanSeekRenge(x,y))", "all x.((Forgiven(x) & UsedForGain(x)) -> BetterThanSeekRevenge(x))", "all x y.((Person(x) & Forgive(y) & Forget(x,y)) -> BetterSeekRevenge(x))", "(BetterToForgive(x) & BetterToForget(x) & BetterToSeekRevenge(x))", "all x.((Forgives(x) & Forgets(x)) -> SeeksRevenge(x))", "((Forgive(x) & Forget(x)) | Forget(x)))", "all x y.((Forgives(x) & Forgets(x)) -> BetterToSeekRevenge(y))"]}
{"id": "enwn_validation_516", "nl": "Henry should forgive and forget instead of seeking revenge.", "fol": "", "prediction": ["all x.(Henry(x) -> (Forgive(x) & Forget(x) & DoNotSeedRevenge(x)))", "all x.(Henry(x) -> (Forgive(x) & Forget(x) & -SeekRevenge(x)))", "all x.(Henry(x) -> (Forgive(x) & Forget(x) & -SeekRenemy(x)))", "((Henry(Henry) & Forgive(Henry) & Forget(Henry)) -> Forget(Henry))", "all x.(Henry(x) -> (Forgive(x) & ForgetRevenge(x)))", "only in rare cases.", "all x.(Henry(x) -> (Forgive(x) & Forget(x) & -SeekRavenge(x)))", "all x.(Henry(x) -> (Forgives(x) & Forgets(x) & -SeeksReneval(x)))", "All x.(Henry(x) -> (WearsRevenge(x) & Forgives(x) & InvolvesFurther(x)))", "all x.((Henry(x) & -SeeksRevenge(x)) -> ForgivesAndRegises(x))", "all x.((Henry(x) & Ford forgiveness(x) & FordForgetting(x)) -> -RenewalCeering(x))", "all x.(Henry(x) -> ShouldForgive(x) & ShouldNeighborToRevenge(x))", "all x.(Henry(x) -> (SeeksRevenge(x) & Forgives(x) & Forgets(x)))", "all x.((Henry(x) & Donato(x)) -> (Forgiveres(x) & Forgets(x) & -SeeksRevenge(x)))", "all x y.((Henry(x) & LordAndRevenge(y)) -> (Forgive(x,y) & Forget(x,y)))", "(Henry(Henry) & ForgiveAndForget(Henry) & -SeekRevenge(Henry))"]}
{"id": "enwn_validation_517", "nl": "Slandering is damaging to a person's reputation.", "fol": "", "prediction": ["all x.(Slandering(x) -> DamagesReputation(x))", "all x y.((Person(x) & Slander(y)) -> DamagedToReputation(x,y))", "all x.(Slandering(x) -> DamagedToReputation(x))", "all x.(Slandering(x) -> DamagesReputation(x))", "all x.(Slandering(x) -> DamagedReputation(x))", "all x.(Slandering(x) -> DamagedReputation(x))", "all x.(Slandering(x) -> DamagedToReputation(x))", "all x y.((Person(x) & Slandering(z)) -> DamagedReputation(x,y,z))", "all x.(Slandering(x) -> DamagesReputation(x))", "all x.(Slandering(x) -> DamagedToPersonnelReputation(x))", "all x y z.((Slandering(x) & Person(y) & Reputation(z)) -> Damaged(x,y))", "all x y.((Person(x) & Slandering(x)) -> DamagedToReputation(x))", "all x.(Slandering(x) -> DamagedToReputation(x))", "all x y.((Person(x) & Spoilering(y)) -> DamagedReputation(x))", "all x.(Slandering(x) -> DamagesReputation(x))", "all x.(Slandering(x) -> DamagesReputation(x))"]}
{"id": "enwn_validation_518", "nl": "Damaging someone's reputation is harmful to them.", "fol": "", "prediction": ["all x.(DamagingReputation(x) -> HarmfulToPeople(x))", "all x y.((Damaged(x) & Person(y)) -> HarmfulReputation(x,y))", "all x y.((SamePerson(x) & DamagingReputation(x,y)) -> HarmfulTo(x,y))", "all x.(DamagingPersonnelReputation(x) -> HarmfulToPerson(x))", "all x y.((Damaging(x) & Person(y)) -> HarmfulToReputation(x,y))", "all x.(PoorReputation(x) -> HarmfulToReputation(x))", "all x.((Damage(x) & Person(y)) -> HarmfulToReputation(x,y))", "all x y.((Damaging(x) & Person(y)) -> HarmfulToReputation(x,y))", "all x y.((Damage(x) & Person(y)) -> Harmful(y))", "all x y.((Damaging(x) & Person(y)) -> HarmfulReputation(x,y))", "all x y.((DamperingReputation(x) & Person(y)) -> HarmfulTo(x,y))", "all x.(DamagingReputation(x) -> HarmfulToReputation(x))", "all x y.((Damage(x) & Person(y)) -> HarmfulToReputation(x,y))", "all x.(Damaging(x) -> HarmfulToReputation(x))", "all x y.((Damage(x) & Person(y)) -> HarmfulReputation(y))", "all x y.((Damaging(x) & Reputation(y)) -> HarmfulTo(x,y))"]}
{"id": "enwn_validation_519", "nl": "Paul slandered Jimmy in his magazine to increase sales.", "fol": "", "prediction": ["Paul slandered Jimmy in his magazine to increase sales.", "Paul slandered Jimmy in his magazine to increase sales.", "Paul slandered Jimmy in his magazine to increase sales.", "Paul slandered Jimmy (Jimmy,Republican)", "(IncreasesSales(Paul,Jimmy) -> SlanderedJustine(Paul,Jimmy))", "Paul slandered Jimmy in his magazine to increase sales.", "All x y z.((Paul(x) & Jimmy(y) & Magazine(z)) -> SlanderedIn(x,y,z))", "Paul slandered Jimmy but did not actually do any damage to his magazine(Paul)", "Paul slandered Jimmy in his magazine to increase sales.", "Paul slandered Jimmy & IncreasesSales(Paul,Jimmy)", "Paul slandered Jimmy in MagazineToIncreaseSales(Paul,(Paul) & SlanderedHisMagazine(Paul,Palm))", "all x y.((Sanctioned(x) & Jimmy(y)) -> IncreasedSales(y))", "Jimmy in Magazine to IncreaseSales(Paul,Jeffrey)", "Paul slandered Jimmy in the magazine to increase sales.", "-(SlanderedInMagazine's(Paul,Jimmy) | SlanderedInMagazine(Paul,Jimmy)))", "Paul slandered Jimmy in his magazine to increase sales."]}
{"id": "enwn_validation_520", "nl": "Slandering someone is harmful to them.", "fol": "", "prediction": ["all x.(Slander(x) -> HarmfulToPerson(x))", "all x y.((Slanderer(x) & Person(y)) -> HarmfulTo(x,y))", "all x.(Slandering(x) -> HarmfulTo(x))", "all x.(Slanderer(x) -> HarmfulToPerson(x))", "all x.(Shelters(x) -> HarmfulToThirdParty(x))", "all x y.((Slanderer(x) & Person(y)) -> HarmfulTo(x,y))", "all x.(Slanders(x) -> HarmfulToPerson(x))", "all x y.((Person(x) & Slander(x)) -> HarmfulTo(y,x))", "all x y.((Person(x) & Slandering(x)) -> HarmfulTo(x,y))", "all x.(Slander(x) -> HarmfulToMemoire(x))", "all x y.((Slanderer(x) & Person(y)) -> HarmfulTo(x,y))", "all x.(Slanders(x) -> HarmfulToTheir(x))", "all x y z.((Slanderer(x) & Person(y) & Term(z)) -> Damages(z))", "all x y.((Slanderer(x) & Person(y)) -> Harmful(x,y))", "all x.(Slandering(x) -> HarmfulToAttire(x))", "all x y z.((Slander(x) & Person(y) & Location(z) & Slanders(x,y)) -> HarmfulTo(y,z))"]}
{"id": "enwn_validation_521", "nl": "You should not slander someone.", "fol": "", "prediction": ["all x.(Slander(x) -> -SeparateParts(x))", "all x.(Slander(x) -> There w.(Personne(w) & SexuallyExcused(x)))", "all x.(Slander(x) -> -Slander(x))", "all x.((Slander(x)) -> -(Slander(x) & Person(x)))", "all x y.((Person(x) & Person(y)) -> -Slander(x,y))", "all x.((SlanderWho(x) & HasIllegal(x)) -> -Slander(x))", "all x.((Slander(x) & Person(x)) -> -Slander(x))", "all x.((Slander(x) & Spikes(x)) -> -Slander(x))", "best(x) -> -Slander(x))", "all x.(Slander(x) -> No(x))", "all x y z.((Slander(x) & Person(y) & Identify) -> -Slander(x,y,z))", "all x.(Slander(x) -> -Ask(x,Person))", "all x y.((Involves(x,y) & People(y)) -> -Slander(x,y))", "(-Slander(x))", "all x y.((Person(x) & Person(y)) -> -Slander(x,y))", "all x.((Slanderer(x) & Slanderer(x)) -> -Becasue(x))"]}
{"id": "enwn_validation_522", "nl": "Paul should not have slandered Jimmy.", "fol": "", "prediction": ["Paul -shouldNotHaveSlanderedJimmy(Paul))", "(-slanderedJimmy(Paul,Jimmy))", "All x.(Paul(x) -> -SlanderedJimmy(x))", "all x.((Paul(x) & Jimmy(y)) -> -Slandered(x,y))", "-SlanderedJimmy(Paul)", "(-SlanderedJimmy(Paul))", "(-SlanderedJimmy(Paul))", "I do not think Paul should have slanderedJimmy.", "(-Slandered(Paul,Jimmy))", "all x.(Paul(x) -> -SlanderedJimmy(x))", "-slanderedJimmy(Paul)", "((Paul(Paul) & Jimmy(Paul)) -> -Slandered(Paul))", "Paul (or -SlanderedJimmy))", "Paul neaft slanderedJimmy.", "Paul aurait etablir(Paul), Jimmy.", "all x.((Paul(x) & Jimmy(y)) -> -Slandered(x,y))"]}
{"id": "enwn_validation_523", "nl": "Mocking someone is intentionally aggravating them.", "fol": "", "prediction": ["all x y.((MockingPeople(x) & Person(y)) -> IntentionallyAggravates(x,y))", "all x.(Mocking(x) -> AggravatesIntentionally(x))", "all x y.((Mocking(x) & Person(y)) -> Aggravates(x,y))", "all x.(Mocking(x) -> Aggravates(x))", "all x y.((Mocking(x,y) & Person(y)) -> IntentionallyAggravates(x,y))", "all x.(Mocking(x) -> IntentionallyAggravates(x))", "all x y.((Mocks(x,y) & Person(y)) -> Accomplishment(x,y))", "all x.(Mocking(x,y) -> Agitates(x,y))", "all x y.((Mocks(x) & Person(y)) -> IntentionallyAggravates(x,y))", "all x.(Mocking(x) -> Aggravates(x))", "all x.(Mocking(x) -> Aggrage(x,y))", "all x.(Mocking(x) -> IntentionallyAggravates(x))", "all x y.((Mocking(x) & Person(y)) -> Aggravates(x,y))", "all x y.((Mocking(x) & Person(y)) -> AccusatesIntentionally(x,y))", "all x.(Mocking(x) -> Aggravates(x))", "all x.(Mocking(x) -> (IntentionallyAggravates(x) & Someone(x)))"]}
{"id": "enwn_validation_524", "nl": "Intentionally aggravating someone is not encouraging positive discourse.", "fol": "", "prediction": ["all x.((IntentionallyAggravate(x) & Person(y)) -> -InspiresPositiveDiscourse(x,y))", "all x.((IntentionallyAggravates(x) & Person(x)) -> -EncouragesPositiveDiscourse(x))", "all x y.((IntentionallyAggravating(x,y) & Person(y)) -> -EncouragesPositiveDiscourse(x,y))", "all x.((IntentionallyAndgravifies(x) & Something(x)) -> -EncouragesPositiveDiscourse(x))", "all x y.((IntentionallyAggravate(x) & Person(y)) -> -UncomfortablePositiveDiscourse(x))", "all x y.((Aggression(x) & Person(y)) -> -CertainPositiveDiscourse(x),y))", "all x.((IntentionallyAggravates(x) & Person(x)) -> -EncouragesPositiveDiscourse(x))", "all x.((IntentionallyAggravates(x,y) & Person(y)) -> -CreatesYoungPositiveDiscourse(x))", "all x.(IntentionallyAggravating(x) -> -EncouragesPositiveDiscourse(x))", "all x.(AggravatesIntentionally(x) -> -EncouragesPositiveDiscourse(x))", "all x.((IntentionallyAggravates(x) & Person(x)) -> -EncouragesPositiveDiscourse(x))", "all x.((Aggravates(x,y) & Person(y)) -> -EncouragesPositiveDiscourse(x,y))", "all x.((IntentionallyAggravate(x) & Person(x)) -> -EncouragingPositiveDiscourse(x))", "all x y z.((IntentionallyAggravates(x,y) & Person(z)) -> -EducatingPositiveDiscourse(x))", "all x y.((IntentionallyAggravating(x,y) & Person(y)) -> -EncouragesPositiveDiscourse(x,y))", "all x.((IntentionallyAggravates(x) & Person(y)) -> -EncouragesPositiveDiscourse(x))"]}
{"id": "enwn_validation_525", "nl": "We should encourage positive discourse.", "fol": "", "prediction": ["all x.((Discussion(x) & EncouragePositive(x)) -> Supports(x))", "all x.((Declaration(x) & Positive(x)) -> Encourages(x))", "all x.((WearsPositiveDiscourse(x) & Encouragement(x)) -> PositiveDiscourse(x))", "all x.((Together(x) & PositiveDiscourse(x)) -> Encourage(x))", "all x.((Admission(x) & PositiveDiscourse(x)) -> Encourage(x))", "all x.((BelongingToPositiveDiscourse(x)) -> ShouldBeEncouraged(x))", "all x.(ConductPositiveDiscussion(x) -> EncourageableDiscourse(x))", "all x y.(((PositiveDiscourse(x) & PositiveDiscourse(y)) -> ShouldBeEncouraged(x,y))", "all x.((Advocacy(x) & Positive(x)) -> Encouraged(x))", "all x.(Amenity(x) -> PositiveDiscourse(x))", "all x y.((PositiveDiscourse(x) & Organization(y)) -> Encouraged(x,y))", "all x.(PromotePositiveDiscourse(x) -> Encourage.", "all x.((CultivatePositiveDiscourse(x)) -> MustEncourage(x,positiveDiskussion))", "all x.((Living(x) & PositiveDiscourse(x)) -> Encourages(x))", "all x.((EncouragesPositiveDiscourse(x)) -> EncouragesPositiveDiscourse(x))", "all x.((CultivatePropositiveDiscourse(x)) -> Encourages(x))"]}
{"id": "enwn_validation_526", "nl": "Walter mocked the rally participants because he disagreed with their political ideology.", "fol": "", "prediction": ["all x y.((RallyParticipant(x) & Walter(y)) -> DisagreedWithPoliticalIdeology(y,x))", "\"(Walter(Walter,(Walter,RallyParticipant) & DisagreesWithPoliticalIdeology(Walter)) vol.", "(Mocked(Walter,rally) & disagreed(Walter,mob,politicalIdeology,rally)))", "all x y.((Walter(x) & RallyTours(y) & -PoliticalIdeology(x,y)) -> Meteorized(x,y))", "Walter mocked the rally participants because he disagreed with their ideology & rally participation.", "all x y.((RallyParticipant(x) & Roar(y) & Walter(x)) -> -DeclineWithPoliticalIdeologyOrbit(x,y))", "all x y.((Rally(x) & Participant(y) & Walter(x) & UnrecognizedPoliticIdeology(x,y)) -> Mocked(x,y))", "Walter mocked the rally participants because he disagreed with their political Ideology.", "all x y z.((Tom(x) & RallyParticipant(y) & Walter(z) & PoliticalIdeology(y) & Disagrees(z,y)) -> Mongers(x,y))", "all x y.(((Walter(x) & Rally(y)) & DisagreesWithPoliticalIdeology(x,y)) -> Miscisses(x,y))", "all x y.((Rally(x) & RallyParticipant(y) & Walter(x)) -> (DefiesPoliticalIdeology(x,y)))", "-((Walter(Walter) & RallyParticipant(s) & DefamePoliticalIdeology(w)))", "(Momentum(Walter) & PoliticalIdeology(Walter))", "(Mommy(Walter) & Disagrees(Walter,Ideology) | [RallyParticipating(Walter,Ideology))))", "all x y.((RallyParticipant(x) & Walter(y)) -> (Mocked(y,t) & DisapprovesOfPoliticalIdeology(y,f)))", "all x y.((Walter(x) & RallyParticipant(y) & DisagreesWithIdeology(x,y)) -> Humorous(x,y))"]}
{"id": "enwn_validation_527", "nl": "You shouldn't intentionally aggravate people.", "fol": "", "prediction": ["all x y.(((Person(x) & Affect(y)) -> -IntentionallyAffect(x,y))", "all x.((LimitAggravate(x)) -> -IntentionallyAggravate(x))", "all x.(IntentionallyAggravatePeople(x) -> -IntentionallyAggravatePerson(x))", "all x.((Client(x) & -IntentionallyAggravate(x)) -> -IntentionallyAggravate(x))", "all x.((Aggravates(x) & -Intentionally(x)) -> -(Intentionally(x) -> AnxiatesPeople(x)))", "all x.((IntentionallyAggravatePeople(x)) -> -(IntentionallyAggravatePeople(x) & AvoidAdveasingPeople(x)))", "all x.((IntentionallyAggravate(x) & People(x)) -> -IntentionallyAggravate(x))", "all x.((IntentionallyAggravate(x,people)) -> -IntentionallyAggravate(x,people))", "-IntentionallyAggravatePeople(x))", "all x.((Person(x) & -IntentionallyAggravate(x)) -> -IntentionallyAggravate(x))", "all x.(AggravatePeople(x) -> -Intentionally(x))", "all x.((Person(x) & -IntentionallyAggravate(x)) -> -Damage(x))", "all x.(IntentionallyAggravatePerson(x) -> -IntentionallyAggravatePerson(x))", "exists x.(IntentionallyAngion(x) & People(y) & -IntentionallyAngion(x,y))", "all x.((IntentionallyAggravate(x) & Person(x)) -> -(Intervene(x) & Aggravate(x,y)))", "all x.(((Person(x) & -Aggravates(x)) -> -IntentionallyAggravate(x))"]}
{"id": "enwn_validation_528", "nl": "You shouldn't mock people.", "fol": "", "prediction": ["all x.(Mockpeople(x) -> -MockPerson(x))", "all x.(MockPeople(x) -> -MockPeople(x))", "all x.(MockPeople(x) -> -MocksPeople(x))", "all x.(MocksPeople(x) -> -MocksPeople(x))", "all x.((Mock(x) & Person(x)) -> -Mock(x))", "all x.(MockPeople(x) -> -MockPeople(x))", "also has a very small amount of jumbledpeople(x)", "all x.(MockPeople(x) -> -ShouldMockPeople(x))", "all x.(MockPeople(x) -> -Mock(x))", "all x y.((Mocks(x,y) & Person(y)) -> -Mocks(x,y))", "all x.(MocksPeople(x) -> -MocksPeople(x))", "all x.((Mock(x) & Person(x)) -> -Mock(x))", "exists x.(MockPeople(x) & -Mock (x)))", "all x.((MockBy(x) & People(y)) -> -Mock(x,y))", "all x.(Mock People(x) -> -Mock(x))", "all x.((MockPerson(x)) -> -MockPerson(x))"]}
{"id": "enwn_validation_529", "nl": "Walter should not have mocked the rally participants.", "fol": "", "prediction": ["Walter should not have mocked rally participants((Stewary) & #Event(Walter))", "(MockedRallyParticipants(Walter) -> -MockedRallyParticipants(Walter))", "(MockedInRally(Walter,Rally) & -MockedInRally(Walter))", "-MockedRallyParticipant(Brett)", "Walter ne should have mocked rally participants.", "\"Andrew\" -MessedRallyParticipants(Andrew))", "Walter ne moaned the rally participants.", "((Walter(Walter) & RallyParticipant(Walter)) -> -Mocked(Walter,Walter)))", "-(MockedRallyParticipants(Walter) | MockedRallyParticipants(Walter)))", "-MockedRallyParticipants(Brett)", "(Mocked(Walter,RallyParticipants))", "(Mocked(Walter)", "Walter should not have mocked rally participants.", "all x.((Walter(x) & Rally(y)) -> -Mocked(x,y))", "(-MockedRallyParticipants(Walter))", "all x y.((Walter(x) & RallyParticipants(y)) -> -Mocked(x,y))"]}
{"id": "enwn_validation_530", "nl": "You should not harm others.", "fol": "", "prediction": ["all x.((More(x) & -Harm(x)) -> -HarmsAnother(x))", "(-HarmOthers(') -> -HasDomesticJudgement('))", "all x y.((Sleeper(x) & Person(y)) -> -Harms(x,y))", "all x.((IsYourDegree(x) & -HasToo(x)) -> -HasToo(x))", "all x.((You(x) & -Harm(x)) -> DoesNotHave(x))", "all x.(YouMayHave(x) -> -HarmOthers(x))", "all x.((HabitsOthers(x)) -> -HasResources(x,others))", "all x.((You(x) & -HarmsOthers(x)) -> -HarmsOthers(x))", "all x.((One(x) & HasOthers(x)) -> -Harms(x))", "all x.((HasAlternative(x) -> -Harm(x))", "all x y.(((People(x) & Other(y)) -> -Hazard(x,y))", "all x.((HasLikens(x) & NotHasLikens(x)) -> NotHasLikens(x))", "exists x.(Horizon(x) & -HarmsOthers(x))", "all x.((YouBehave(x) & -HarmSons(x)) -> -HoundsOthers(x))", "all x.((HondsOthers(x)) -> -HasHazard(x))", "-HasDamage(x)"]}
{"id": "enwn_validation_531", "nl": "Being considerate means you are careful to avoid hurting others.", "fol": "", "prediction": ["all x.(Conscious(x) -> AvoidScarce(x))", "all x.(Dignite(x) -> (Pristine(x) & AvoidsHarmingOthers(x)))", "all x.(Pristine(x) -> (AvoidsHarmingOthers(x) & -HasMoms(x)))", "all x.(Duety(x) -> (CarefulToAvoidHintingOthers(x)))", "all x.(Duety(x) -> PrivilegeToAvoidHakingOthers(x))", "all x.((Appreciative(x) & AvoidingMoreOfOthers(x)) -> Careful(x))", "all x.(Dignitive(x) -> (StrictlyAvoidsHailingAnother(x)))", "all x.((Dutifully(x) & AvoidLessToOthers(x)) -> Careful(x))", "all x.((Creditful(x) & DoneAt(x)) -> -PressuringOthers(x))", "all x.(Pristine(x) -> AllOthersCanHaveHorrors(x))", "all x.((Croate(x) & Careful(x)) -> HasItAllEarly(x))", "all x.((Graceful(x) -> AwareOfHasSeating(x)))", "all x.((Respectful(x) & Disciplined(x)) -> PreventsIllness(x))", "all x.(Dignified(x) -> (CelebratingHasAngles(x) & -HarmsOthers(x)))", "all x.((Privacy(x) & CarefulWithOthers(x)) -> Ignores(x,y))", "all x.(Disciplinary(x) -> (Cautionary(x) & AvoidsHailingOthers(x)))"]}
{"id": "enwn_validation_532", "nl": "If you do something that is inconvenient for others then you are being inconsiderate.", "fol": "", "prediction": ["all x.((DoesInconvenientForOthers(x)) -> Inconsiderate(x))", "all x.(Inconsiderate(x) -> InconvenientForOthers(x))", "all x.((DoesInconvenientForOthers(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((Doe(x) & InconvenientForOthers(x)) -> Inconsiderate(x))", "all x.((DoesInconvenientForOthers(x) & DoesInconvenientForOthers(x)) -> Inconsiderate(x))", "all x.((Asinibos(x) & InconvenientForOthers(x)) -> Inconsiderate(x))", "all x.((DoesInconvenientForOthers(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((InconvenientForOthers(x) & Doing(x)) -> Inconsiderate(x))", "all x.((InconvenientForOthers(x) & DoingInconvenientForOthers(x)) -> Inconsiderate(x))", "all x.((DoesInconvenientForOthers(x)) -> Inconsiderate(x))", "all x y.((DoesInconvenient(x) & IsInconsiderate(y)) -> Inconsiderate(x))", "all x.((DoingInconvenientForOthers(x)) -> Inconsiderate(x))", "all x.((DoesInconvenientForOthers(x)) -> Inconsiderate(x))", "all x.((DoesInconvenientFor(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((DoElement(x) & InconvenientForOthers(x)) -> Inconsiderate(x))", "all x y.((Doe(x) & InconvenientForOthers(x)) -> Inconsiderate(x))"]}
{"id": "enwn_validation_533", "nl": "Justin quit his job after giving notice one day in advance.", "fol": "", "prediction": ["all x y.((Julie(x) & Job(y)) -> -Question(x,y))", "all x.((Julian(x) & DateInAdvance(x,y)) -> QuitsJulian(x,y))", "Justin quitsStaffAfterGivingAverage(Job)", "Justin quits job after giving NoticeOneDayInAdvance(Juit)", "all x y z.((Judie(x) & Job(y) & Date(z) & GivesNotification(x,y,z)) -> Quits(x,y,z))", "all x.(Quittings(x) -> GivesVisienceONEDayAgo(x))", "Justin quits job after giving notice one day in advance.", "all x.(( Justin(x) & OneDayAdvanceNotification(x)) -> Quarrel(x))", "Justin quitsJulietWorksAfterGivingNoticeOneDayInAverage( Justin,July,August,2008)", "all x.((Justin(x) & DayInAverage(x)) -> QuitsJude(x))", "all x.(Title(x) -> Withnotice(x,day(x))", "Justin (Justin) quitsJobAfterDay(justin).", "(LessThanOneDay(Junior(Justin))", "alley.(Justin(Juius) & GiveRain Notice(July,OneDay))", "all x.([J Justin|QuitsJob(x) & DayInAverage(x)) -> GivingNotification(x,y))", "(QuietJudeo(Juliet) & GivesNotificationOneDayAgo(Juliet))"]}
{"id": "enwn_validation_534", "nl": "Giving less than two weeks' notice before leaving your job is not enough warning.", "fol": "", "prediction": ["all x.((Antepriority(x,2) & LeaveWork(x)) -> -EnoughWarning(x))", "all x.((FastNotification(x) & Leave(x,2)) -> -EnoughWarning(x))", "all x.((AwaitsTwoWeeks(x) & LeavesJob(x)) -> -EnoughWarning(x))", "all x.((WeeklyNotice(x,2) & WeeksNotification(x)) -> -EnoughWarning(x))", "all x.((HasLessThanTwoWeeeksAlert(x) & LeavesJob(x)) -> -EnoughWarning(x))", "all x.((LessThanTwoWeeksNotification(x) & LeavesJob(x)) -> -EnoughWarning(x))", "all x.((WeeklyNotification(x) & Leave(x) & LessThanTwo(x)) -> -EnoughWarning(x))", "all x y z.((FastNotification(x) & Job(y) & LessThanTwoWeeks(x,y)) -> -EnoughWarning(x,z))", "all x.((WeekEnds(x) & LeavesJob(x,2)) -> NotEnoughWarning(x))", "All x.((LittleExcuse(x) & LeaveJob(x) & LessThanTwoWorkweeks(x)) -> NotEnoughWarning(x))", "all x.((Warning(x) & LeaveWork(x,2)) -> -EnoughWarning(x))", "all x y.((Acknowledge(x,y) & Job(y) & LessThanWeeks(x,y)) -> -EnoughWarning(x,y))", "all x.((NeedsBeforeLeavingJob(x) & -NeedsBeforeLeavingJob(x)) -> -EnoughWarning(x))", "all x.((PayingUnderTwoWeeksBeforeLeavingJob(x)) -> -EnoughWarning(x))", "all x.((Than(x,2) & LeaveWork(x)) -> -EnoughWarning(x))", "all x.((NegativeLeadership(x,1/2) & LeavesJob(x)) -> -EnoughWarning(x))"]}
{"id": "enwn_validation_535", "nl": "Someone leaving their job without sufficient warning is inconvenient for their coworkers.", "fol": "", "prediction": ["all x y z.((Toddler(x) & Job(y) & Coworker(z) & LeavesWithoutSufficientWarning(x,y,z)) -> InconvenientFor(x,y,z))", "all x y z.((Task(x) & WorkClient(y) & Job(z)) -> WithoutSufficientWarning(x,y))", "all x y.((Company(x) & Employee(y) & LeavesSelfAlert(x,y)) -> InconvenientFor(x,y))", "all x.((LaysWorkProfessional(x) & WithoutSufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x y.((Person(x) & Coworker(y) & LeavesJob(x,y) & SufficientWarning(y)) -> InconvenientFor(x,y))", "all x.((Person(x) & LeavesJobWithoutSufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x.((EleavingJobWithoutSufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x y z.((Worker(x) & Job(y) & Coworker(z) & LeavesWithoutInsufficiency(x,y,z)) -> InconvenientFor(x,y,z))", "all x y.((Person(x) & Job(y) & Leaves(x,y)) -> (InconvenientForCoworkers(x)))", "all x.((LeavingJob(x) & -SufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x.(LeavingSensitiveWarning(x) -> InconvenientForCoworkers(x))", "all x y.((Employee(x) & Job(y) & LeavesWithoutSufficientWarning(x,y)) -> InconvenientForCoworkers(x))", "all x.((LaysWorkAt(x) & WithoutSufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x y.((Job(x) & Worker(y) & LeavesEmploymentWithoutSupplyWarning(x,y)) -> InconvenientFor(x,y))", "all x.(LeavingSecondaryHazard(x) -> InconvenientForCoworkers(x))", "all x.((Person(x) & LeavesJob(x) & -SufficientWarning(x)) -> InconvenientForCoworkers(x))"]}
{"id": "enwn_validation_536", "nl": "You should be considerate.", "fol": "", "prediction": ["all x.((Person(x) & Considerate(x)) -> Instinct.", "all x.((Client(x) & Relates(x)) -> AlwaysReceived(x))", "all x.((Discipline(x) & Respectable(x)) -> Always Becoming(x))", "all x.(Century(x) -> Considerable(x))", "all x.(Rentalizes(x) -> GivesAtHome(x))", "all x.(Conscious(x) -> ThinkOutsider(x))", "all x.(Decent(x) -> Careful(x))", "all x.(CleanEmail(x) -> DutiesThan(x))", "all x.((Creditful(x) & Respectful(x)) -> ShouldBe(x))", "all x.(Discipline(x) & AttendsEmail(x))", "all x.(Censore(x) -> Attendance(x))", "all x.(Censible(x) -> Responsible(x))", "all x.(Conscious(x) -> ShouldBe(x))", "all x.(Regardful(x) -> GoodForYou(x))", "exists x.(Renowned(x) & EnoughToGuarantee(x))", "all x.(Conscious(x) -> (Domestic(x) | Considerable(x)))"]}
{"id": "enwn_validation_537", "nl": "You should not inconvenience others.", "fol": "", "prediction": ["all x y.((You(x) & InconvenientToOthers(y)) -> -InconvenientToOthers(x,y))", "all x.(InconvenientAndEverage(x) -> -Inconvenient(x))", "all x.(Requirement(x) -> -IndulguezOthers(x))", "(-AllowInconvenience(you,others)).", "all x.(InconvenientRuns(x) -> -InconvenientRuns(x))", "ALL x.(InconvenientToOthers(x) -> -InconvenientToOthers(x))", "all x.(Indulge(x) -> -Incomfort(x))", "nullifyothers.", "all x.((Insanity(x) & -Inconvenient(x)) -> -Inconvenient(x))", "all x.((Insomniazation(x) & Other(x)) -> -Inconvenience(x))", "-InconvenientToOthers(x)", "all x.(Inconvenient(x) -> -Personal(x))", "all x.(Users(x) -> -Inconvenient(x))", "all x.((You(x) & Inconvenience(x)) -> -(Inconvenient(x) | Inconvenient(x))))", "all x.(Inconvenient(x) -> -Inconvenient(x))", "nullified(you)"]}
{"id": "enwn_validation_538", "nl": "Justin did not give enough warning before quitting.", "fol": "", "prediction": ["-(JudasWarning(Juittin) & Quitting(Juittin))", "all x.(Julie(x) -> -GivesEnoughWarning(x))", "Justin abandonedtoquitting.", "Justin neccessarilywarned.", "(-GiveAway(JUint) & Quit(Juint))", "Justin netis(n) (doneNonEnoughWarning(n) & Quit(n)))", "(-GivedEnoughWarning(Julian))", "-EnoughWarning(Julian)", "(HeatsAgain(Juden) & -Warning(Julian))", "all x.(Julie(x) -> -HasEnoughWarning(x))", "all x.((Juliet(x) & Quitting(x)) -> -HasEnoughWarning(x))", "Justin did notgiveEnoughWarning(Justin)", "Justin gave no enoughwarning((Juliet) & Quitting(Juliet))", "Justin n'admitted(n) enoughwarning(t).", "\"Justin\" did not give enoughwarning(Justin,quitting)", "justin \u00a34200,-(SufficientWarning(Juliet)))"]}
{"id": "enwn_validation_539", "nl": "Justin quitting was inconvenient for his coworkers.", "fol": "", "prediction": ["Justin quitted for his coworkers.", "all x.((JudyQuitting(x) & Coworker(x)) -> Inconvenient(x))", "all x.(QuittingJustin(x) -> InconvenientForCoworkers(x))", "all x.(Quitting(x) -> InconvenientForCoworkers(x))", "all x.(Quitting(x) -> InconvenientForCoworkers(x))", "all x.(Quitting(x) -> InconvenientForCoworkers(x))", "all x y.((Juliet(x) & Coworker(y)) -> InconvenientForQuitting(x,y))", "Justin quitting was inconvenient for coworkers.", "all x.((Coworker(x) & Justin(x)) -> CaughtInconvenient(x))", "all x.((Julian(x) & Coworker(x)) -> InconvenientQuitting(x))", "all x.(Quitting(x) -> InconvenientForCoworkers(x))", "all x y.((Juliet(x) & Coworker(y) & Quits(x,y)) -> Inconvenient(x,y))", "all x.(Quitting(x) -> InconvenientForCoworkers(x))", "All x.((Justin(x) & Coworkers(x)) -> QuittingInconvenient(x))", "not to mention his workworkers.", "(InconvenientPentruCoworkers( Justin)"]}
{"id": "enwn_validation_540", "nl": "Justin should not have inconvenienced his coworkers.", "fol": "", "prediction": ["Justin Shouldn\u2019tIntractableCoworkers(Justin)", "all x.((Justin(x) & Coworkers(x)) -> -Inconvenient.", "all x.((Juliet(x) & -InconvenientCoworkers(x)) -> -InconvenientCoworkers(x))", "all x y.((Judy(x) & Coworkers(y)) -> -Indulged(x,y))", "Justin shouldn't have inconvenienced his coworkers.", "-IndignifiedCoworkers(Quito)", "all x y.((Juliet(x) & Coworkers(y)) -> -Inconvenient(z))", "(-IndignifiedCoworkers(Joshua) -> Justin(Joshua))", "all x.((Judy(x) & Coworkers(x)) -> -Inconvenient(x))", "(InsaneCoworkers(Judeo) & -InconvenientToCoworkers(Judeo))", "(-IndignifiedCoworkers(Justin))", "Justin should not have inconvenienced his coworkers.", "all x.((Judy(x) & Coworker(y)) -> -Inconvenient(x,y))", "\"Justin\" should have not inconvenienced his coworkers.", "I doubt Justin would have inconvenienced most of his coworkers.", "all x y.((Jujuan(x) & CoWorkers(y)) -> -Inconvenient(x,y))"]}
{"id": "enwn_validation_541", "nl": "If you're unreasonably angry at something taking too long, you're impatient.", "fol": "", "prediction": ["all x.((AngryUnreasonably(x) & TakesTooLong(x)) -> Impatient(x))", "all x.((UrgentAt(x,Course) & WaitingTooLong(x)) -> Impatient(x))", "all x.((UnreasonablyAngryAtLucking(x) & TooLong(x)) -> Impatient(x))", "all x.(Impatient(x) -> -UnreasonablyAngry(x))", "all x.((UnreasonablyAngry(x) & TakesTooLong(x)) -> Impatient(x))", "all x.((Angry(x) & TakesTooLong(x)) -> Impatient(x))", "all x.((Angry(x) & UnreasonablyDueToLong(x)) -> Impatient(x))", "all x.((UnreasonablyAngry(x) & TakesTooLong(x)) -> Impatient(x))", "all x.((Angry(x,or/Meaning-Used(x)) -> Impatient(x))", "all x.((Interest(x) & UnreasonablyAngryAtDouble(x)) -> Impatient(x))", "all x.((UnreasonablyAngryAt(x) & TooLong(x)) -> Impatient(x))", "all x.((UnreasonablyAngry(x) & TakesLong(x)) -> Impatient(x))", "all x.((UnreasonablyAngry(x) & TooLong(x)) -> Impatient(x))", "all x.((Interesting(x) & UnreasonablyAngry(x) & TooLong(x)) -> Impatient(x))", "all x.((UnreasonablyAngryAt(x) & TakesTooLong(x)) -> Impatient(x))", "all x.((UnreasonablyAngryAt(x) & TooLong(x)) -> Impatient(x))"]}
{"id": "enwn_validation_542", "nl": "Gabriel was angry at the server for taking too long even though the restaurant was understaffed.", "fol": "", "prediction": ["all x y.((Server(x) & Restaurant(y) & Understaffed(y)) -> Angry(x,y))", "Gabriel was angryAtServerForTooLong(Gabriel)", "all x y z.((Server(x) & Restaurant(y) & Restaurant(z) & UnderStaff(y)) -> Angerful(x,y,z))", "all x.(Gabriel(x) -> (Angry(x, Server,ThanTooLong) & Understaffed(x)))", "Gabriel snarks at server for taking too long (understaffed restaurant))", "-(AngryAtServer(Gabriel) & TooLongReception(Gabriel))", "all x.((Server(x) & WorriedForTakingTooLong(x) & RestaurantUnstaffed(x)) -> Anxious(x))", "(Angry(Gabriel) & TooLong(Gabriel))", "Gabriel is angryAtServerYouThanTakeTooLongEvenWhileUnstaffed(restaurant)", "-AngryButWeak(Gabrielle) & RestaurantUnstaffed(Gabrielle))", "all x y z.((Server(x) & Server(y) & Restaurant(z) & Understaffed(z)) -> Agreef(x,y,z))", "(AngryRestaurant(Gabriel) & Irresponsible(Gabriel)", "all x y z.((Server(x) & Restaurant(y) & StaffUnsold(z)) -> AgreedForTakingTooLong(x,y,z))", "Gabriel scuttled at server for too long wait...understaffed(restaurant)", "(AngryAtServer(Gabriel) & WereSurroundedUnderStaff(Gabriel))", "all x.((Manager(x) & Unstaffed(x)) -> AngerfulAtTrust(x))"]}
{"id": "enwn_validation_543", "nl": "When someone has to do a lot, it's reasonable for it to take a long time.", "fol": "", "prediction": ["all x.((CausesDoing(x) & LongTime(x)) -> ReasonableFor(x))", "all x.((Person(x) & HasToDoLt(x)) -> ReasonableToTakeLongTime(x))", "all x.((NeedsToDo(x) & Lots(x)) -> TakesLongTime(x))", "all x.((Properly(x) & HasToDoLots(x)) -> ReasonableTime(x))", "all x.(LessLittle(x) -> ReasonableToTakeLongTime(x))", "all x.((Person(x) & OftenWorks(x)) -> TakesLongTime(x))", "all x.((Person(x) & HasToDo(x,y)) -> ReasonableForLongTime(x))", "all x y.((MillionDoor(x) & TakesLongTime(y)) -> Reasonable(x))", "all x.((You TubeWatcher(x) & HasToDoLots(x)) -> ReasonableToTakeLongTime(x))", "all x.((Person(x) & HasToDoLots(x)) -> ReasonableToTakeLongTime(x))", "all x.((Museum(x) & HasToDoLittle(x)) -> UnderstandableTimeStrike(x))", "all x.((Man(x) & HasToDoLots(x)) -> Reasonable(x))", "all x.((HasToDoLot(x) & TakesLongTime(x)) -> Reasonable(x))", "all x.((Person(x) & HasToDoLot(x)) -> ReasonableToTakeLongTime(x))", "all x.((HasToDoLot(x) & ResponsibleToTakeLongTime(x)) -> RequiresLongTime(x))", "all x.((HeadsToDoLot(x) & ReasonableToTakeLongTime(x)) -> CanDoLoss(x))"]}
{"id": "enwn_validation_544", "nl": "When a restaurant is understaffed, the servers have a lot to do.", "fol": "", "prediction": ["all x.((Restaurant(x) & Understaffed(x)) -> ServersHaveLootToDo(x))", "all x y.((Restaurant(x) & Restaurant(y) & Understaffed(x)) -> LotsToDo(y,x))", "all x.((Restaurant(x) & Understaffed(x)) -> ServersHaveLotToDo(x))", "all x y.((Restaurant(x) & Understaffed(x)) -> ServersHaveAtWork(y))", "all x.((Restaurant(x) & Understaffed(x)) -> ServersHaveLittleToDo(x))", "all x.((Restaurant(x) & Understaffed(x)) -> ServersHaveLotto(x))", "all x.((Restaurant(x) & Understaffed(x)) -> LotsToDo(x))", "all x.(Understaffed(x) -> LotsToDo(x))", "all x.(Understaffed(x) -> ServersHaveLittleToDo(x))", "all x.((Restaurant(x) & Understaffed(x)) -> ServerHasLotToDo(x))", "all x.((Restaurant(x) & Understaffed(x)) -> ServersHaveLotToDo(x))", "all x.((Restaurant(x) & Understaffed(x)) -> (ServersHaveMillionToDo(x)))", "all x.((Restaurant(x) & Understaffed(x)) -> ServershaveLotToDo(x))", "all x.((Restaurant(x) & Understaffed(x)) -> LotsToDo(x,Servers))", "all x y.((Restaurant(x) & Understaffed(x)) -> ServersHaveLittleToDo(x,y))", "all x.((Restaurant(x) & Understaffed(x)) -> LotsToDo(x))"]}
{"id": "enwn_validation_545", "nl": "When a restaurant is understaffed, it's reasonable for the servers to take a long time.", "fol": "", "prediction": ["all x.((Restaurant(x) & Understaffed(x)) -> TakeLongTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> (RequiresTemperature(x) & ServersTakeLongTime(x)))", "all x.((Restaurant(x) & Understaffed(x)) -> reasonableForServersToTakeLongTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> LongServerTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> ConsiderableReserves(x))", "all x.((Restaurant(x) & Understaffed(x)) -> ResponsibleServersTakeLongTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> NeedsServers(x))", "all x.((Restaurant(x) & Understaffed(x)) -> ReciprocalServerTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> Reasonable(x))", "all x.((Restaurant(x) & Understaffed(x)) -> ReasonableServingTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> ReasonableServersTakingLongTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> FairlyRequiredServersToTakeLongTime(x))", "all x y.((Restaurant(x) & Understaffed(x)) -> (ResponsibleForServers(y,x) & LongTime(z)))", "all x.((Restaurant(x) & Understaffed(x)) -> ReasonableServerInterview(x))", "all x.(Understaffed(x) -> TakeLongTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> TakesLongTime(x))"]}
{"id": "enwn_validation_546", "nl": "Gabriel was unreasonably angry that the server took too long.", "fol": "", "prediction": ["all x.(Gabriel(x) -> UnreasonablyAngry(x))", "(UnreasonablyAngry(Gabrielle) & ServerTakenTooLong(Gabriel))", "all x.((Server(x) & TooLong(x)) -> UnreasonablyAngry(x))", "(Angry(Gabriel) & ServerTakesTooLong(Gabriel))", "all x.((Server(x) & TakenTooLong(x)) -> UnreasonablyAngry(x))", "Gabriel erupted & WutheringServerFailure(Gabriel)", "all x.((Server(x) & TooLong(x)) -> UnreasonablyAngry(x))", "all x y.((Server(x) & Server(y)) -> UnreasonablyAngry(x,y))", "Gabriel sounded unreasonably angry that server tookTooLong(g) -> -Lucifer(z))", "Gabriel rasengefully angry that server tooktoolong(Gabriel)", "all x y.((Server(x) & Server(y)) -> UnreasonablyAngry(x,y))", "Gabriel was unreasonably angry that the server tooktoolong.", "all x y.((Server(x) & Server(y)) -> UnreasonablyAngry(x,y))", "all x.((Server(x) & TooLong(x)) -> UnreasonablyAngry(x))", "all x.((Server(x) & TakenTooLong(x)) -> UnreasonablyAngry(x))", "Gabriel adamantly angry at server's take-long."]}
{"id": "enwn_validation_547", "nl": "Gabriel was impatient with the server.", "fol": "", "prediction": ["-ImpatientWithServer(Gabriel)", "Gabriel was unimpatient(AGLA)", "(ImpatientWithServer(Gabriel)!", "Gabriel -> ImpatientWithServer(Gabriel))", "all x y.((Server(x) & Gabriel(y)) -> Impatient(y,x))", "Gabriel was impatient with the server.", "Gabriel apologises for impatientness with server.", "Gabriel war impatient(Gabriel)", "Gabriel was impatient(Gabrielle,Server)", "(ImpatientWithServer(Gabriel)", "Gabriel sat on server & impatient(Gabriel)", "-(Impatient(Gabriel) | Impatient(Gabriel)))", "Gabriel was impatient with server.", "impatient(Gabriel)", "Gabriel apologies to server.", "(Impatient(Gabriel,Server)"]}
{"id": "enwn_validation_548", "nl": "Gabriel should have been patient with the server.", "fol": "", "prediction": ["all x.((Gabriel(x) & Server(x)) -> Patient(x))", "(-Patient(Gabriel)", "all x.(Gabriel(x) -> ShouldSecurityServer(x))", "all x.((Gabriel(x) & Server(y)) -> Patient(x,y))", "all x.(Gabriel(x) -> PatientWithServer(x))", "all x.(Gabriel(x) -> PatientWithServer(x))", "Angel should have been patientWithServer(Gabriel)", "all x.((Gabriel(x) & Server(y)) -> ShouldBePatient(x,y))", "all x.((Gabbal(x) & Server(x)) -> ShouldAvePatient(x))", "all x.(Gabriel(x) -> ShouldBePatientWithServer(x))", "all x.(Gabriel(x) -> ShouldAtLeague(x,Server))", "all x.((Gabriel(x) -> PatientServer(x))", "all x.(Gabriel(x) -> PatientServer(x))", "-(ToveGabriel(Gabriel) & PatientWithServer(Gabriel))", "all x.(Gabriel(x) -> PatientWithServer(x))", "all x.((Gabriel(x) & Server(y)) -> Patient(x,y))"]}
{"id": "enwn_validation_549", "nl": "Luke let his partners handle the group project.", "fol": "", "prediction": ["Luke & LetsPartnersHandleGroupProject(Luke,Partners)", "all x y.((Partner(x) & Luke(y)) -> LetsManageGroupProject(x,y))", "Luke let his Partners HandleGroupProject(Lucky)", "Luke let his partners handle the group project.", "Luke LetsPartnersManageGroupProject(Lucy)", "Luke & partners handle group project.", "Luke let his Partners HandleGroupProject(Luke,Partners)", "Luke let his PartnersHandleGroupProject(Luke,x)", "all x y z.((Luke(x) & GroupProject(y) & Partner(z)) -> LetsHandle(x,y,z))", "Luke let partners handlegroupprojects.", "Luke LetsPartnersHandleGroupProject(Luke,x)", "Luke let partners handle groupprojects.", "Luke let his Partners handle the group project.", "Luke LetsPartnersManageGroupProject(Luke,Downland)", "all x y.((Luke(x) & Partner(y)) -> LetsManageGroupProject(x,y))", "Luke let his partners handle groupproject."]}
{"id": "enwn_validation_550", "nl": "If you let other people handle something then you are not helping on that thing.", "fol": "", "prediction": ["all x y.((LaysPeopleHandle(x,y) & Thing(y)) -> -Helping(x,y))", "all x y z.((LetsOthersHandle(x,y) & Thing(z) & Does(x,z)) -> -HelpingOtherPeople(x,z))", "all x y.((LetsDistortsMange(x,y) & OtherPeopleMange(x)) -> -Helping(y))", "all x y.(LetsAnotherManage(x,y) -> -Helping(x,y))", "all x y.((LetAlterParticipateManage(x,y) & Trouble(y)) -> -HelpingOnThing(x,y))", "all x y.((LoltThis(x,y) & HandlesAttributes(x)) -> -HasHelpedOnThing(y))", "all x y.((LetsOthersHarness(x,y) & Thing(y)) -> -HelpingOn(x,y))", "all x.(LetsAllOtherPeopleHandle(x) -> -HelpingOnItem(x))", "all x y.((LoadsOthersManage(x,y) & Thing(y)) -> -Helping(x,y))", "all x.(LetsAuthorsHandle(x) -> YouInvolvesNonHelpingAlleanThing(x))", "all x.(LoansAllowersAndManagesThing(x) -> -HelpingOnThing(x))", "all x y.((LetsMothersHandle(x,y) & Thing(y)) -> -Helps(x,y))", "all x.(LetSusanDoseManage(x) -> -Saving(x))", "all x.(LetsAdditionalPeopleHandleSomething(x) -> -HelpingOnThing(x))", "all x.((LetsOthersHandleWhat(x) & -HelpingOnThing(x)) -> -HelpingOnThing(x))", "all x.(LetsOtherPeopleHandleSomething(x) -> -HelpingOnThatThing(x))"]}
{"id": "enwn_validation_551", "nl": "A group project requires multiple people to do work.", "fol": "", "prediction": ["all x y.((GroupProject(x) & Person(y)) -> RequiresMultipleRequirements(x,y))", "all x.(GroupProject(x) -> RequiresMultiplePeople(x))", "all x.(GroupProject(x) -> DoWork(x,multiplePersons))", "all x.(GroupProject(x) -> RequiresMultiplePersons(x))", "all x y.((GroupProject(x) & Person(y)) -> Requires(x,y))", "all x.(GroupProject(x) -> NumberOfPerson(x))", "all x y.((GroupProject(x) & Person(y)) -> RequiresToDoWork(x,y))", "all x.(GroupProject(x) -> RequiresMultiplePeople(x))", "all x y z.((GroupProject(x) & Person(y) & Person(z) & DoingWork(z)) -> Requires(x,y,z))", "all x.(GroupProject(x) -> RequiresMultiplePerson(x))", "all x.(GroupProject(x) -> RequiresMultiplePeopleToDoWork(x))", "all x.(GroupProject(x) -> RequiresMultiplePeople(x))", "all x.(GroupProject(x) -> RequiresMultiplePerson(x))", "all x y.((GroupProject(x) & Person(y)) -> RequiresToDoWork(x,y))", "all x y.((GroupProject(x) & Person(y)) -> RequiresRequirementToDoWork(x,y))", "all x.(GroupProject(x) -> DoWorkWithMultiplePersons(x))"]}
{"id": "enwn_validation_552", "nl": "If multiple people are required to do something then it is expected that all those people should help.", "fol": "", "prediction": ["all x.((RequiredToDo(x,Millions)) -> ExpectedHelp(x))", "all x.((Person(x) & RequiresToDo(x)) -> ShouldHelp(x))", "all x.(RequiresMultiplePeople(x) -> HelpsAllOthers(x))", "all x.((RequiredToDo(x) & InRequired(x)) -> ShouldHelp(x))", "all x.((MultipleTeachers(x) & RequiredToDo(x)) -> ExpectedHelp(x))", "all x y.((ManyPerson(x) & RequiresToDo(x,y)) -> ExpectedHelp(x,y))", "all x.((IndependentCompany(x) & RequireAll(x)) -> ToHelpOrHaveHelp(x))", "all x.((Person(x) & RequiredToDoAndHas(x)) -> ExpectedHelp(x))", "all x.((RequiredToDo(x) & People(x) & OneInOne(x)) -> ShouldHelp(x))", "all x.((RequiredTo(x) & MultiplePerson(x)) -> ShouldHelp(x))", "all x.((RequiresMultiplePeople(x) & DoingRequirement(x)) -> ExpectedHelp(x))", "all x y.((People(x) & RequiredToDo(x) & Help(y)) -> ExpectedCanHelp(y,x))", "all x.((Personal(x) & RequiredToDo(x)) -> ExpectedHelp(x))", "all x.((PeopleRequiredToDo(x) & MultiplePeopleDoing(x)) -> ExpectedHelp(x))", "all x.(BeforeUsingMillions(x) -> ShouldHelp(x))", "all x.((RequiredToDo(x) & ManyPerson(x)) -> ShouldHelp(x))"]}
{"id": "enwn_validation_553", "nl": "You should be trustworthy.", "fol": "", "prediction": ["all x.(TrueLiability(x) -> Trustworthy(x))", "all x.((Private(x) & Trustworthy(x)) -> CheckForYourself(x))", "all x.(Trustworthy(x) -> Trustworthy(x))", "all x.(Trustworthy(x) -> HasCompany(x))", "all x.(Credible(x) -> Trustworthy(x))", "all x.(Trustworthy(x) -> TakesVast(x))", "all x.(Trustworthy(x) -> JoinFishing(x))", "all x.((StormAreYou(x) & Trustworthy(x)) -> Dependable(x))", "all x.(Trustworthy(x) -> -Interests(x))", "all x.((Trusted(x) & Trustworthy(x)) -> AvoidsFakePricing(x))", "all x.(Trustworthy(x) -> Done(x))", "all x.((HasTrustworthy(x) & -HasTrustworthy(x)) -> HasTrustworthyOnSplash(x))", "all x.(Trafficable(x) -> Becomes(x))", "all x.(Tradable(x) -> BeTruant(x))", "all x.(Traffic(x) -> Allowed(x))", "all x.(Tradible(x) -> Trustworthy(x))"]}
{"id": "enwn_validation_554", "nl": "To be trustworthy means you do what is expected of you.", "fol": "", "prediction": ["all x.((Trustworthy(x) & Trustable(x)) -> ExpectedOf(x))", "all x.(Trafficant(x) -> DoWhatEquippedOfYou(x))", "all x.(TrueLiability(x) -DoesWhatEsecutedOfInformation(x))", "all x.(Trafficable(x) -> (DoesWhatEquippedOrEarned(x) | DoesWhatEstimates(x)))", "all x.((Trustworthy(x)) -> EarnsWhatEsquoted(x))", "all x.(Tirhusiastic(x) -> DoWhatEssentiallyAboutYou(x))", "all x.(Trustworthy(x) -> DoseEquippedOf(x,y))", "all x.((Trafficant(x) & ExpectedBy(x)) -> Trustworthy(x))", "all x.(Trustworthy(x) -> (DoesWhatEquippedFromYou(x)))", "all x.(Trustworthy(x) -> (DoesWorthWhatEquippedOfYou(x)))", "all x.(Traffic(x) -> (DoesWhatEsexpectedOf(x,Eclipse) & Trustworthy(x)))", "all x.((BeTruel(x) & ExpectedOfYou(x)) -> Trustworthy(x))", "all x.((BeTrueLiability(x) & ExpectedOf(x)) -> DoWhatIsEquippedOf(x))", "all x.((Delivered(x) & Trustworthy(x)) -> DoWhatEsecutedOf(x))", "all x.(TrueRespecting(x) -> DoWhatEssentialPurposeAsKnowedOf(x))", "all x.((Truthful(x) & ActsAsEquestredDeepView(x)) -> Trustworthy(x))"]}
{"id": "enwn_validation_555", "nl": "Luke did not help his partners on the group project.", "fol": "", "prediction": ["Luke did not HelpOnGroupProject(he,MrChildLifeShareN(Luke))", "Luke n'aiguieste(d) aucuntios(d) s(y) & TheGroupProject(z))", "Luke did not help with groupproject(Luke,Partners)", "(Luke hasn'tSituatedOnGroupProject(Luke))", "Luke nixedato(Luke,Members)", "Luke -HasPartners(Luke,GroupProject)", "Luke sat on the project with a team of 4 t.((Partner(l) & GroupProject(l)) -> -HasPartner(l))", "Luke did notHelpPartiesOnGroupProject(Luke,Peacemaker)", "Luke nedividualized partners on the groupproject.", "(-helpsPartners(Luke))", "Luke, however, did not help on GroupProject(Luke,Partners)", "Luke -assists(luke,luke) -> GroupProject(luke,x))", "Luke & Partners -HelpedOnGroupProjekt(Luke,Luke & PartnersOnGroupProject(Luke))", "Luke douts that he can\u2019t help his partners with groupprojects.", "Lukes partner group project was not to be aided by Lukes partner(Luke)", "Matthew & Luke did not help partners on the group project."]}
{"id": "enwn_validation_556", "nl": "It is expected that everyone on a group project will help.", "fol": "", "prediction": ["all x.(StandardGroupProject(x) -> Helps(x))", "all x y.((GroupProject(x) & Group(y)) -> HasHelp(x,y))", "all x.(GroupProject(x) -> WillHelp(x))", "all x.((GroupProject(x) & Helps(x)) -> ExpectedToHelp(x))", "all x y.((GroupProject(x) & GroupProject(y)) -> WillHelp(x,y))", "all x y.((GroupProject(x) & GroupProject(y)) -> WillHelp(x,y))", "all x y.(GroupProject(x) & EveryoneOn(y,x)) -> Helps(x))", "all x y z.((GroupProject(x) & Company(y) & Organization(z)) -> Helper(x,y,z))", "all x.(GroupProject(x) -> ExpectedHelp(x))", "all x.(GroupProject(x) -> Helps(x))", "all x.(GroupProject(x) -> ExpectedHelp(x))", "all x y.((GroupProject(x) & Helper(y)) -> ExpectedOn(x,y))", "all x y.((GroupProject(x) & GroupProject(y)) -> Helps(x,y))", "exists x y.(GroupProject(x) & Help(y))", "all x y.((GroupProject(x) & Member(y)) -> WillHelp(y,x))", "all x.(GroupProject(x) -> HelpsAllEndusers(x))"]}
{"id": "enwn_validation_557", "nl": "Luke did not help his partners when it was expected.", "fol": "", "prediction": ["(Alilo was notHungry(Luke,Partners))", "Luke did not Help(Luke,Partners)", "((Luke(Luke) & Expected(Luke)) | (-Lesson(Luke) & Expected(Luke))))", "Luke & PartnersUnexpected(Luke,n)(Luke,n))", "Luke was due to leave on the date he was due.", "(-Helped(Luke,Pronounced))", "Luke & Partners(a) & -(Help(a) & Expected(a))))", "Luke sprang up a rage among his Partners, but he lacked a smile to show for it.", "Luke did not Help(Luke,Partners)", "Luke has been inactive all x.((Partner(x) & -Helped(x)))", "Luke was evicted when expected from them -helps(Luke,Partners))", "(soon-to-help(Luke,p) & expected(Luke,p))", "Luke did notHelpPartnersWhenEventuallyEvaluated(Luke,Clay,Focus))", "Luke has found he helped his partners in spite of expected help, but he didn't help when expected.", "Luke & PartnersEventuallyNecessaryHelp(Luke)", "Luke did notHelpPartnersWhenEventual(Luke,x))"]}
{"id": "enwn_validation_558", "nl": "If something is expected of you then you should do that thing.", "fol": "", "prediction": ["all x y.((EssentialThing(x) & ExpectedOf(y,x)) -> ShouldDo(x,y))", "all x.((Espects(x) & Expectations(x)) -> ShouldDo(x,x))", "all x.(Equipped(x) -> ShouldDo(x,CauseThisIsEquipped(x)))", "all x.((Equipped(x) & Thing(x)) -> ShouldDo(x))", "all x.((EmployedOf(x) & ExpectedOf(x)) -> ShouldDoThatThing(x))", "all x.((EstimatedOf(x) & ExpectedOf(x)) -> ShouldDo(x))", "all x.((RequiredOf(x,y) & ExpectedDoing(y)) -> ShouldDoThatThing(x))", "all x.((EarnedOfYou(x) & ExpectedOfYou(x)) -> ShouldDoThatThing(x))", "all x.((Event(x) & ExpectedOf(x)) -> ShouldDo(x,x))", "all x.((EssentialThing(x) & ExpectedOfYou(x)) -> ShouldDo(x))", "all x.((EsquotedOfYou(x)) -> DoThatThing(x))", "all x.((Esceeding(x) & Attired(x)) -> ShouldDo(x))", "all x.((EquippedOf(x,x) & ExpectedOf(x,x)) -> ShouldDoGoodTo(x))", "all x.((EssentialThing(x) & ExpectedOf(x)) -> ShouldDo(x,(EsesAndDoes(x)))", "all x.((Essential(x) & ExpectedOfYou(x)) -> ShouldDo(x,y))", "all x.((Es expected(x) & ShouldDo(x)) -> ShouldDo(x))"]}
{"id": "enwn_validation_559", "nl": "Luke should have helped his partners.", "fol": "", "prediction": ["Luke should have helped his Partners.", "Luke should have helped his partners.", "all x.(Luke(x) -> ShouldHelpAllPartners(x))", "Luke should have helped partners.", "Luke aroused his partners.", "Luke should have helped partners.", "all x.((Luke(x) & Partner(y)) -> ShouldHaveHelped(x,y))", "Luke should have helped his partners.", "Luke should have helped partners.", "-(Luke(Luke) & HelpedPartners(Luke))", "Luke should have helped his partners.", "Luke should have helped/helpedPartners(Luke,D),", "Luke should have helped partners.", "all x.((Luke(x) & Partner(y)) -> ShouldHelped(x,y))", "Luke should have helped his Partners.", "Luke should have helped his partners."]}
{"id": "enwn_validation_560", "nl": "You should only conceive with someone with their consent.", "fol": "", "prediction": ["all x y.((Conceive(x,y) & Person(y) & Consent(y)) -> Consent(x,y))", "all x y z.((Conscious(x) & Person(y) & Consent(z)) -> Adopt(x,y,z))", "all x y.((KIND(x) & Person(y)) -> IdentifiesConsent(x,y))", "all x.(Concert(x) -> PersonConsent(x))", "all x y.((Conceive(x) & Person(y) & HasConsent(y,x)) -> OnlyConceive(x,y))", "all x y z.((Conceive(x,y) & Person(z) & Consent(z)) -> OnlyConceive(x,y,z))", "all x y.((Conceive(x,y) & Person(y) & Consent(y)) -> -Conceive(x,y))", "all x.((Conceive(x) & HasConsent(x)) -> CanConceiveWith(x))", "all x.(Conceive(x,y) -> OnlyWithConsent(y))", "all x y.((Convict(x) & Patient(y) & HasConsent(x,y)) -> Consent(y))", "all x y.((ConcernedWith(x,y) & (Consentable(x) | ConsentOnly(x,y))) -> ShouldConceiveWith(x,y))", "all x y.((Conception(x) & Person(y) & Consent(y)) -> ShouldConceive(x,y))", "all x y.((Conscious(x) & Person(y)) -> ConveyWithConsent(x,y))", "all x y.((ConceiveWith(x,y) & Person(y)) -> ConceivesWithConsent(x,y))", "all x.(Conceive(x) -> Consent(x))", "all x y.((Contract(x) & Person(y) & Consent(y)) -> -Conceive(x,y))"]}
{"id": "enwn_validation_561", "nl": "Someone can't consent to something if they're being lied to about it.", "fol": "", "prediction": ["all x.((LivableTo(x) & Things(x)) -> -Consents(x))", "all x y.((Consent(x) & Consent(y) & LiledTo(x,y)) -> -Consent(x,y))", "all x.((Sleeping(x) & Don'tConsent(x)) -> -Consent(x))", "all x.(Knows(x) -> (ConsentSell(x) & LoyalOfIntrusion(x)))", "all x.(-Consents(x) -> IsLiliedTo(x))", "all x y.((Person(x) & LiliedToAbout(x,y) & BeingLikedAbout(x,y)) -> -Consents(x))", "all x.((Liquid(x) & Material(x)) -> CannotConsent(x))", "all x.(Consents(x) -> (LiredThan(x) & ExistsOfConsent(x)))", "all x.((LiliedTo(x) & ConfirmedConsent(x)) -> -CanConsent(x))", "all x y.((Door(x) & Disagrees(y,x)) -> -Consents(x))", "all x.(Malting(x) -> -ConsentsTo(x))", "all x.((Person(x) & LiedToAbout(x,y) & ConsentsTo(x,z)) -> Can'tConsent(x,y))", "all x y.((Other(x) & DeludedAbout(x,y)) -> -CanConsentTo(x,y))", "all x y.(((Personal(x) & Consent(y) & LiliedTo(x,y)) -> -CanConsent(x,y))", "all x.((Personal(x) & LitOn(x)) -> -ConsentToConsent(x))", "all x.((ExpressedAt(x) & LiliedToAbout(x)) -> -CanConsent(x))"]}
{"id": "enwn_validation_562", "nl": "Abby told Mark that she was on birth control so that she could get pregnant with him.", "fol": "", "prediction": ["(StatusBirthControl(Abby) & MetMark(Abby))", "ALL X Y z.((Abby(x) & Mark(y) & BirthControl(z)) -> (On(x,z) & GetPaternal(z))))", "(AmbyBorrowControl(Abby,Mark) & WithBirthControl(Abby,Mark))", "Abby said that she was on birthcontrol so that she could get pregnant with Mark.", "(all x.(AbbyMalcolm(x) -> OnBirthControl(x)))", "((Abby (Mark) & OnBirthControl(Abby)) -> CanGirlPaternity(Mark)))", "Abby told Mark, \"OnBirthControl(ABByMark,Mark) & CanGimmick(Abby,Mark))", "Abby said he was on birthcontrol so he could get pregnant.", "Abby told Mark that she was onBirthControlSoShePotential(Abby,Mark)", "Abby told Mark that she had been on BirthControl so that she could get pregnantWithMark.", "all x.((Abby(x) & Mark(x)) -> OnBirthControl(x))", "Abby told Mark she was onBirthControl, so she could getPregnantWithMark.", "Abby told Mark, Mark & BabyControl(Abby,Breakfast,Mark)", "-(AbbySaid(BirthControl) & -RemainsOn(BirthControl))", "Abby told Mark, \"(Barby(Mark) & OnBirthControl(Mark)) -> CouldGetProengedWithMark(Mark))", "Abby told Mark she was onBirthControl(Abby) -> ToGivingPregnantWithMark(Abby))"]}
{"id": "enwn_validation_563", "nl": "Abby was not on birth control.", "fol": "", "prediction": ["Abby -OnBirthControl(a)", "abby \"nononcontr\u00f4lable(abby) -> BirthControl(abby))", "Abby was not on birthcontrol.", "(-BirthControl(Abby)).", "Abby was not on birthcontrol.", "Abby was not on birthcontrol.", "Abby was notOnBirthControl(Abby)", "Abby was not on BirthControl(Abby)", "Abby wasn\u2019t on BirthControl.", "Abby was not on birthcontrol.", "Abby was not on BirthControl.", "-BirthControl(Abby)", "Abby was not on BirthControl(a)", "Abby was not on birthcontrol.", "Abby -OnBirthControl(Abby))", "Abby was not on birthcontrol."]}
{"id": "enwn_validation_564", "nl": "You shouldn't lie to someone in order to conceive with them.", "fol": "", "prediction": ["all x y.((Limit(x,y) & Person(y)) -> -ConceiveDenominating(x,y))", "all x.((Little(x) & Person(y) & Conceives(x,y)) -> -Limit(x,y))", "all x.((LipTo(x,y) & Person(y)) -> -Conspires(x,y))", "all x.((Liar(x) & Person(y) & -LivesTo(x,y)) -> Compets(x,y))", "all x y.((Liking(x) & Person(y) & Concieve(x,y)) -> -LikenTo(y,x))", "all x.((Cynical(x) & -LimitTo(x,(x) | CconceivesWith(x,6))) -> -Lilies(x,Company,Prosperity,Souls))", "all x y.((Limit(x) & Person(y)) -> -ConceivesWith(x,y))", "all x.((IsLiking(x) | IsConconceiving(x)) -> -Liking(x))", "all x y.((LimitsTo(x) & Person(y)) -> -ConveysWith(y,z))", "all x y.((RightToConconceive(x,y) & Person(y)) -> -LiliesTo(x,y))", "all x y.((Liking(x) & Person(y)) -> -(Liking(x,y) & ConceivesWith(y)))", "all x y.((Limit(x,y) & Person(y)) -> -LittleTo(x,y))", "all x y.((Bible(x) & (Odd(y) | Odd(y))) -> (-LibelTo(x,y) & ConceiveWith(x,y)))", "all x.((LivinTo(x) & Someone(x)) -> -ConceiveWith(x,y))", "all x y z.((Concept(x) & Person(y) & Liar(x,y)) -> -LiliesTo(x,y))", "all x y.((Fraud(x) & Person(y)) -> -LiliesTo(x,y))"]}
{"id": "enwn_validation_565", "nl": "Abby lied to Mark in order to get pregnant with him.", "fol": "", "prediction": ["Abby liedToMark(a) & Hews(b) & GotPaternityWith(a,b,m,m))", "Abby liedToMarkInRequirement(Abby,Mark)", "(LikedToMark(Abby,Mark) | LostToMark(Abby,Mark)))", "Damian hat LilliedToMark in order to getGender(Mark).", "Abby(Abby,Mark) \u2013 LuledToKnowBetween(Abby,Mark))", "Abby liedToMarkInInOrderToGetPaternity(Abby,Mark)", "Abby liedToMark in order to getpreggered(Abby,Mark)", "Abby liedToMark (to get pregnant with Mark))", "(all x.(Abby(x) -> LiesToMark(x)))", "Abby liedToMarkInPregnancy(Abby,Mark)", "(all x y.((Abby(x) & Mark(y)) -> LiliedTo(x,y)))", "Abby LiliedToMarkForBeingPaternalWithMark(a))", "(LiliedToMark(Abby) & GetsPastWithMark(Abby))", "(LiesToAbbyToGetProenny(Abby,Mark) -> GetsProennantWithMark(Abby,Mark))", "Abby liedToMarkIn order to get pregnant WithMark.", "Abby liedToMark(a) & GetRetched(p))"]}
{"id": "enwn_validation_566", "nl": "Abby should not have lied to Mark.", "fol": "", "prediction": ["Abby should not have lied to Mark.", "Abby should not have liedToMark.", "Abby should not have lied to Mark.", "Abby (LikedToMark) & -LikedToMark(Abby))", "Abby shouldn't have lied to Mark.", "Abby should not have liedToMark (sincere)", "Abby should not have lied to Mark.", "Abby should not have lied to Mark.", "Abby should have lied to Mark.", "Abby should have lied to Mark.", "Abby should not have lied to Mark.", "Abby -ReliedToMark(Abby,Mark))", "(LiedToMark(Abby,Mark) -> -LikedToMark(Abby,Mark))", "Abby should not have lied to Mark.", "Abby should have not lied to Mark.", "Abby should not have lied."]}
{"id": "enwn_validation_567", "nl": "A boss is an authority figure.", "fol": "", "prediction": ["all x.(Boss(x) -> AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "all x.(Bust(x) -> AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "exists x.(Bust(x) & AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "all x.(Bust(x) -> AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))"]}
{"id": "enwn_validation_568", "nl": "Tom spat in his boss's coffee in front of everyone.", "fol": "", "prediction": ["all x.(Between(x) -> SpatsInBossCoffee(x))", "all x y.((Tom(x) & BossCoffee(y)) -> SpatsInFrontOfEveryone(x,y))", "exists x y.(BussCoffee(x) & TomSpreadIn(x,y.)", "all x.((Tom(x) & BossCoffee(x)) -> SpatsIn(x,y))", "all x y z.((Tom(x) & Boss(y) & Coffee(z)) -> SpatsIn(x,z))", "all x y.((Tom(x) & Boss(y)) -> SpatsInCoffeeInFrontOfEveryone(x,y))", "all x y z.((Tom(x) & Boss(y) & Coffee(z)) -> SpreadsIn(x,y,z))", "all x.((Tom(x) & BossCoffee(x)) -> SpatsIn(x,FrontOfEveryone))", "all x y z.((Tom(x) & BossCup(y) & Company(z)) -> SpltsIn(x,y,z))", "all x y.((Tom(x) & Boss(y)) -> SpatsInCoffee(x,y))", "all x y.((Tom(x) & Boss(y)) -> SpatsInCoffee(x,y))", "all x y.((Tom(x) & Boss(y)) -> Spat(x,y))", "all x y.((Tom(x) & BossCoffee(y)) -> SpatsInFrontOf(x,y))", "all x.((Tom(x) & BossCoffee(x)) -> SpatIn(x,flash))", "all x y z.((Tom(x) & Boss(y) & Coffee(z)) -> SpentIn(x,y,z))", "all x y.((Tom(x) & BossCoffee(y)) -> SpatsIn(x,y))"]}
{"id": "enwn_validation_569", "nl": "Spitting in someone's beverage is rude.", "fol": "", "prediction": ["all x y.((Beverage(x) & Spitting(x)) -> Rust(y))", "all x y.((Beverage(x) & SpittingIn(x,y)) -> Rust(y))", "all x.((Spitting(x) & inBeverage(x)) -> Rust(x))", "all x y.((Beverage(x) & SpittedIn(x,y)) -> Rust(x))", "all x y.((Beverage(x) & SpittingIn(x,y)) -> Rust(x))", "all x.((Pitting(x) & InBeverage(x)) -> Rust(x))", "all x y.((Coffee(x) & Person(y)) -> Rust(x))", "all x y.((Beverage(x) & SpittingIn(x,y)) -> Reckless(x))", "all x y.((Beverage(x) & Spitting(x,y)) -> Rude(y))", "all x.(Relevant(x) -> SpittingInBeverage(x))", "all x y.((Beverage(x) & Spit(y)) -> Rust(y))", "all x y.((Beverage(x) & Spitting(x,y)) -> Rust(y))", "all x.(SpittingInBeverage(x) -> Rustic(x))", "all x.(SpittingInBeverage(x) -> Rust(x))", "all x y z.((Beverage(x) & Spitting(y,x) & Person(z)) -> Rust(x))", "all x.((SpittingInBeverage(x) & Person(x)) -> Rustic(x))"]}
{"id": "enwn_validation_570", "nl": "Being insubordinate means disrespecting authority.", "fol": "", "prediction": ["all x.(Insubordinate(x) -> DisregardsAuthority(x))", "all x.(Insubordinate(x) -> DisrespectsAuthority(x))", "all x.((Insubordinate(x) -> DisrespectsAuthority(x))", "all x.(Insubordinate(x) -> DisrespectsAuthority(x))", "all x.(Insubordinate(x) -> DisrespectsAuthority(x))", "all x.(Insubordinate(x) -> DisrespectsAuthority(x))", "all x.(Insubordinate(x) -> DisrespectsAuthority(x))", "all x.((Insubordinate(x) & DisrespectsAuthority(x)) -> Insubordinate(x))", "all x.(Impartaminated(x) -> DisrespectsAuthority(x))", "all x.((Insubordinate(x) & DisrespectsAuthority(x)) -> Insubordinate(x))", "all x.(Insubordinate(x) -> DisrespectsAuthority(x))", "all x.(InSubordinate(x) -> DisrespectingAuthority(x))", "all x.(InSubordinate(x) -> DisrespectsAuthority(x))", "all x.((Insubordination(x) -> DisrespectsAuthority(x))", "all x.(Insubordinate(x) -> DisrespectsAuthority(x))", "all x.(Insubordinate(x) -> DisrespectsAuthority(x))"]}
{"id": "enwn_validation_571", "nl": "Tom was rude to his boss.", "fol": "", "prediction": ["all x y.((Tom(x) & Boss(y)) -> RustyTo(x,y))", "the boss(Tom) was rudeToTom(Tom))", "Tom was rudeToBoss(Tom)", "(RuleToBoss(Tom) | RudeToBoss(Tom)))", "Tom was rude to boss(Tom)", "-Riuse(Tom)", "all x y.((Tom(x) & Boss(y)) -> Rusty(x,y))", "Tom was rudeToBust(t)", "Tom was rudeToBoss(Tom)", "Tom was rudeToBoss(Tom)", "Tom a rudent to boss.", "Tor was rudeThanBoss(Tom)", "Tom's bosses reacted rudely.", "all x.((Tom(x) & Boss(x)) -> VeryRusty(x))", "(RainfulToBoss(Tom) | RustyToBoss(Tom)))", "Tom was rudeToBoss(Tom)"]}
{"id": "enwn_validation_572", "nl": "Tom was being disrespectful towards an authority figure.", "fol": "", "prediction": ["all x.(RespectfulToTom(x) -> AuthorityFigure(x))", "All x.(RapidDisrespectfulToTom(x) -> AuthorityFigure(x))", "all x y.((Tom(x) & AuthorityFigure(y)) -> DisrespectfulTowards(x,y))", "all x.((Tom(x) & AuthorityFigure(x)) -> Disrespectful(x))", "(I mean disrespectfulTom(Tom) -> AuthorityFigure(Tom))", "all x.((Tom(x) & AuthorityFigure(x)) -> Disrespectful(x))", "all x y.((Tom(x) & AuthorityFigure(y)) -> DisrespectfulFor(x,y))", "all x y z.((Tom(x) & Authority(y) & AuthorityCharacter(z)) -> DisrespectfulTowards(x,y,z))", "all x y.((Tom(x) & AuthorityFigure(y)) -> Disrespectful(x))", "all x.((Tom(x) & AuthorityFigure(x)) -> Disrespectful(x))", "all x y.((Tom(x) & AuthorityFigure(y)) -> DisrespectfulTo(x,y))", "all x.((Tom(x) & AuthorityFigure(x)) -> Disrespectful(x))", "all x y.((Tom(x) & Authority(y)) -> DisrespectfulTowards(x,y))", "all x y.((Tom(x) & AuthorityFigure(y)) -> DisrespectfulTo(x,y))", "all x y.((Tom(x) & AuthorityFigure(y)) -> DisrespectfulToward(x,y))", "all x.((Tom(x) & AuthorityTalley(x)) -> DisrespectfulTowards(x))"]}
{"id": "enwn_validation_573", "nl": "Tom was being insubordinate.", "fol": "", "prediction": ["All x.(Tom(x) -> Insubordinate(x))", "all x.(Tomb(x) -> Insubordinate(x))", "Tom was beingInsubordinate(Tom)", "(ISISTRATED(Tom) | ISISTRATED(Tom)))", "all x.((Tom(x) & InSubordinate(x)) -> Insubordinate(x))", "all x.(Tom(x) -> WasInsubordinate(x))", "all x.((Tom(x) & Insubordinate(x)) -> Insubordinate(x))", "(Insubordinate(Tom) -> InSubordination(Tom))", "all x.((Tom(x) & Insubordinate(x)) -> Insubordinate(x))", "all x.(Tom(x) -> Insubordinate(x))", "all x.((Tom(x) & Insubordinate(x)) -> Insubordinate(x))", "(InSubordination(Tom))", "(Insubordination(Tom))", "all x.((Tom(x) & Insubordination(x)) -> Insubordination(x))", "Tom's Insubordination.", "(Insubordinate(Tom) -> Insubordinate(Tom))"]}
{"id": "enwn_validation_574", "nl": "Karen stole a customer's social security number for her own gain.", "fol": "", "prediction": ["all x y.((Karen(x) & Customer(y)) -> StalledForOwnGain(x,y))", "all x y.((Karen(x) & Customer(y)) -> (StoleStatutoryNo.(x,y) & OwnGain(x))))", "all x y z.((Karen(x) & Customer(y) & SocialSecurityNumber(z)) -> StolenForOwnGain(x,y,z))", "all x y.((Karen(x) & Customer(y)) -> StoleSocialSecurityNumber(x,y))", "(RobbedSocialSecurityNumber(Karen,Customer) & ForOwnGain(Karen,Customer))", "all x y.((KarenWay(x) & Customer(y)) -> StolenForEachGain(x,y))", "all x y.((Karen(x) & Customer(y)) -> StoleSocialSecurityNumber(x,y))", "all x y z.((Karen(x) & Customer(y) & SocialSecurityNom(z)) -> StolenForOwnGain(x,y,z))", "all x.(StoleSalaryNom(x,y) -> Customer(y))", "-StolenSecurityNumber(Karen)", "all x.((Karen(x) & Customer(y)) -> StoleSecurityNumberForOwnGain(x,y))", "all x y.((Karen(x) & Customer(y)) -> (StolenPosition(x,y) & ForOwnGirl(x)))", "all x y.((Karen(x) & Customer(y)) -> StolenForOwnGain(x,y))", "all x y.((Karen(x) & Customer(y)) -> StoleSocialSecurityNumberForOwnGain(x,y))", "all x y.((Karen(x) & Customer(y)) -> StolenSocialSecurity(x,y))", "all x y.((Kenna (x) & Customer(y)) -> StrippedSecurityNumberForOwn(x,y))"]}
{"id": "enwn_validation_575", "nl": "Stealing a person's social security number is also called stealing their identity.", "fol": "", "prediction": ["all x.(StealYourSecurityNumber(x) -> DefendingIdentity(x))", "all x.(StolenSecurityNom(x) -> IdentityTax(x))", "all x.(StolenSecurityNumber(x) -> (Person(x) & IdentityStolen(x)))", "all x y.((Person(x) & SocialSecurityNumber(y)) -> StealingIdentity(x,y))", "all x.((Person(x) & SocialSecurityNumber(x)) -> StealingIdentity(x))", "all x.(StoppingSocialSecurity(x) -> StealingIndividual(x))", "all x.(StolenSocialSecurityNumber(x) -> StolenIdentity(x))", "all x.(SteallingSecurityNumber(x) -> TakingIdentity(x))", "all x.(StealingSocialSecurityNumber(x) -> StolenIdentity(x))", "all x.(Steal(x) -> SocialSecurityNumber(x))", "all x.(Steal(x) -> TakingIdentity(x))", "all x.(StealingSocialSecurityNum\u00e9ro(x) -> (StolenIdentity(x) & Person(x)))", "all x.(StealingSecurityNumber(x) -> StealingIdentity(x))", "all x.(StealYourSocialSecurityNumber(x) -> IdentityTheft(x))", "all x.(Steal(x) -> (SocialSecurityNumber(x) & IdentityFailure(x)))", "all x.(StolenSecurityNumber(x) -> IdentityStolen(x))"]}
{"id": "enwn_validation_576", "nl": "You shouldn't cause problems for others.", "fol": "", "prediction": ["all x.((Doctor(x) & -CauseProblemsForOthers(x)) -> -CauseProblems(x))", "all x.((Likes(x) & CausesProblemsFor(x,Others)) -> -CausesProblems(x,Others))", "all x y.(((Function(x) & Person(y)) -> -CausesProblems(x,y))", "all x.((DoesNeedProblem(x)) -> -CausesProblems(x))", "all x.(Focus(x) -> -CauseProblem(x,OtherOnes))", "all x.(YouNeed(x) -> -CauseDispair(x))", "all x.((Function(x) & -CauseProblemsForOther(x)) -> -Cause(x,x))", "all x.((CausesProblems(x) & -CausesProblems(x)) -> -CausesProblems(x,y))", "all x.((Fans(x) & -Problem(y)) -> -Causes(x,y))", "all x y.((CauseProblem(x,y) & Other(y)) -> -CauseProblem(x,y))", "all x.((BreakingProblems(x) & None(x)) -> Don'tCause(x,y))", "all x.((Spontaneous(x) & -CauseProblems(x)) -> -CauseProblemsForOthers(x))", "all x.((CausesProblems(x) & -CausesProblems(x)) -> -(CausesProblems(x) & CausesProblems(x)))", "all x.((EarlySolvement(x) & -CausesProblems(x)) -> -CausesProblems(x))", "all x.((Men(x) & -CatchesProblems(x)) -> -CatchesProblems(x))", "(\u2013CausesProblems(you,Others))"]}
{"id": "enwn_validation_577", "nl": "Stealing someone's identity allows the thief to take control of the victim's bank account.", "fol": "", "prediction": ["all x y z.((Thief(x) & Identity(y) & BankAccount(z) & Stealing(x,y)) -> TakesControl(x,z,y))", "all x y.((Hief(x) & Identity(y) & BankAccount(y)) -> StealsAuthorityBy(x,y))", "all x y.((Hitf(x) & Identity(y) & BankAccount(z)) -> Steals(x,y,z))", "all x y.((Theft(x) & Identity(y)) -> Steals(x,y))", "all x y z.((Host(x) & Identity(y) & Identity(z)) -> ControlsBankAccount(x,y,z))", "all x y.((Stole(x,y) & Identity(y)) -> AllowsShief(x,y))", "all x y.((Alternator(x) & Identity(y)) -> AllowsStealing(x,y))", "all x y.((Thief(x) & Victim(y)) -> StealingIdentityAllowsControl(x,y))", "all x.(StealLivingName(x) -> AllowsSthiefToTakeControlOfBankAccount(x,visaccount,ex))", "all x y.((Finger(x) & Identity(y) & Victim(z) & Stealths(x,y)) -> TakesControlOfBankAccount(x,z))", "all x y z.((Tief(x) & PersonId(y) & BankAccount(z) & Stealing(x,y)) -> TakesControlOf(x,z))", "all x.(StealingIdentity(x) -> LeverageBankAccount(x,y))", "all x y.((Typhoon(x) & Identity(y)) -> Stealing(x,y))", "all x y.((Stealling(x) & Identity(y)) -> AllowsThethiefToTakeControlOfBankAccount(x,y))", "all x y z.((StealingIdentity(x) & Thief(y) & Identity(z)) -> TakesControlOfBankAccount(y,z))", "all x y.((Mirror(x) & Identity(y)) -> StealYourIdentity(x,y))"]}
{"id": "enwn_validation_578", "nl": "Losing control of your bank account leads to financial problems.", "fol": "", "prediction": ["all x.((LessBankAccountControl(x) & PersonalFinancialProblems(x)) -> FinancialProblem(x))", "all x.((BankAccountControlLoss(x) & FinancialProblem(x)) -> LosesContain(x))", "all x.(LosingControlOfBankAccount(x) -> LeadsToFinancialProblems(x))", "all x.(LosingControlOfBankAccount(x) -> FinancialProblems(x))", "all x.((BankAccountControl(x) & LosesControl(x)) -> FinancialProblems(x))", "all x.(LosingBankAccountControl(x) -> FinancialProblems(x))", "all x.(LoseControlOfBankAccount(x) -> FinancialProblems(x))", "all x y.((BankAccount(x) & LosesControl(x,y)) -> FinancialProblems(x))", "all x y.((BankAccount(x) & BankAccount(y)) -> FinancialProblems(x,y))", "all x y z.((BankAccount(x) & BankAccount(y) & FinancialProblem(z) & LosesControl(x)) -> LeadsTo(x,y,z))", "all x.((BankAccountControl(x) & LosesControl(x)) -> FinancialProblems(x))", "all x.((BankAccountControllLoss(x) & FinancialProblem(x)) -> LosesControlOver(x))", "all x.(LosingControlOfBankAccount(x) -> FinancialProblems(x))", "all x y.((LosingBankAccountControl(x) & BankAccountProblem(y)) -> LeadsToFinancialProblems(x))", "all x.((BankAccount(x) & LosesControl(x)) -> FinancialProblems(x))", "all x y.((BankAccount(x) & LosesControl(x,y)) -> MoneyProblems(y))"]}
{"id": "enwn_validation_579", "nl": "Karen stole the customer's identity.", "fol": "", "prediction": ["Kristen stolesCustomerIdentity(Karin,e,z)", "Karen stolesCustomerInterest(Karen,stolenID,Kather,stolenIdentity))", "Karen stolesCustomer'sIdentity.", "all x y.((Karen(x) & Customer(y)) -> StoleIdentity(x,y))", "all x y.((Karen(x) & Customer(y)) -> StolenIdentity(x,y))", "Karen stolestheCustomerIdentity(Karen,)", "Karen stoles customer's ID.", "all x y.((Karen(x) & Customer(y) & stole(x,y)) -> StolenIdentity(x,y))", "Karen stole customer's identity (or stoles its.))", "all x y.((Karen(x) & Customer(y)) -> StolenIdentity(x,y))", "all x y.((Karen(x) & Customer(y)) -> StolenIdentity(x,y))", "all x y.((Karen(x) & Customer(y)) -> StolenIdentity(x,y))", "all x y.((Karen(x) & Customer(y)) -> StoppedLosing(x,y))", "all x y.((Karen(x) & Customer(y)) -> StolenIdentity(x,y))", "has stolen customer's identity.", "Karen stoles customersIdentity."]}
{"id": "enwn_validation_580", "nl": "Stealing someone's identity can cause them financial problems.", "fol": "", "prediction": ["all x y.((Identity(x) & Identity(y) & Stealing(x,y)) -> CausesFinancialProblems(x,y))", "all x.(StoleIndividual(x) -> (CanCauseFinancialProblems(x)))", "all x.(StealingIdentityPoorYoung(x) -> CausesFinancialProblems(x))", "all x.(StealingName(x) -> CausesFinancialProblems(x))", "all x y.((StalingIdentity(x) & Person(y)) -> CanCauseFinancialProblems(x,y))", "all x.(StealingIdentity(x) -> CausesFinancialProblems(x))", "all x.(StealingIdentity(x,y) -> CanCauseFinancialProblems(y))", "all x.(StealingIdentity(x) -> CanCauseFinancialProblems(x))", "all x.(Stolling(x) -> CanCauseFinancialProblems(x))", "all x y.((Authority(x) & Identity(y)) -> CausesFinancialProblems(y,x))", "all x y z.(Stole(x,y) -> (Identity(y) & FinancialProblem(z) & Causes(x,z)))", "all x.(StealingIdentity(x) -> CanCauseFinancialProblems(x))", "all x y.((Identity(x) & Person(y) (Tealing(x,y))) -> FinancialProblem(x,y))", "all x.(StealingSong(x) -> CausesFinancialProblems(x))", "all x y.((Identity(x) & Person(y)) -> CausesFinancialProblems(x,y))", "all x y.((Identity(x) & Someone(y)) -> CausesFinancialProblems(x,y))"]}
{"id": "enwn_validation_581", "nl": "You shouldn't steal someone's identity.", "fol": "", "prediction": ["-StealIdentity(e)", "(-StealIdentity(x))", "all x.((HasName(x) & -HasIdentity(x)) -> -HasIdentity(x))", "all x.(Calls(x) | (PalestinianIdentity(x) | IdentityStorage(x) | IdentityStorage(x))))", "exists x y.(Identity(x) & Person(y) & -Steal(x,y))", "all x.((StoleIdentity(x)) -> -LetsIssuePersonal(x))", "all x.(StealIdentity(x) -> -Element(x))", "all x.((StoleIdentity(x) & Person(x)) -> -CouldStealIdentity(x))", "all x y.((StoleIdentity(x) & Person(y)) -> -StealIdentity(x,y))", "(-StoleIdentity(you,a))", "all x.(Issue(x,y) -> -StealIdentity(x,y))", "all x.((Fraud(x) & -StoleIdentity(x)) -> -StealIdentity(x))", "all x.(IsImpersonable(x) -> -Stoops(x))", "all x.(StolenIdentity(x) -> -StoleIdentity(x))", "all x.(StoleIdentity(x) -> -(SaysIdentity(x) | -SaysIdentity(x)))", "all x.((StolenIdentity(x) & -StolenIdentity(x)) -> -StolenIdentity(x))"]}
{"id": "enwn_validation_582", "nl": "Karen should not have stolen the customer's identity.", "fol": "", "prediction": ["All x y.((Karen(x) & Customer(y) & -LostIdentity(x,y)) -> -FurtherStolenIdentity(x,y))", "Karen should not have stolen customer's Identity(Katie,a)", "-ShouldKarenStoleIdentity(Karen)", "all x.((Karen(x) & Customer(y)) -> -StolenIdentity(x,y))", "all x.(Karen(x) -> -StolenCustomerIdentity(x))", "all x y z.((Karen(x) & Customer(y) & Identity(z) & Stolen(x,y)) -> (-Stolen(x,y,z)))", "Karen should not have stolen the customer's identity, she said.", "Karen should not have stolen the customer's identity.", "-StolenIdentity(Karen)", "-(KarenHasStolenCustomerIdentity(Karen))", "Karen should not have stolen the CustomersIdentity.", "-(Karen shouldTalledCustomerIdentity(Karen))", "all x y.((Karen(x) & Customer(y)) -> -StolenIdentity(x,y))", "all x.(Stolen(x) -> Karen(k))", "Karen - should not have stolen customer's identity.", "all x y.((Karen(x) & Customer(y)) -> -StolenIdentity(x,y))"]}
{"id": "enwn_validation_583", "nl": "Jenna's friend didn't give her permission to take any of her stuff.", "fol": "", "prediction": ["Jenna's friend didn't give permission to take her stuff.", "all x y.((Jenna(x) & Friends(y)) -> -GivePersonToTakeStuff(y,x))", "her friend wasn't giving or giving permission to take any of her stuff.", "(Follower(Jenna) & -GivePermissionToTakeThing(Jenna))", "(-Giveaways(Jenna) & CanTakeMeta(Jenna,Treatment))", "Jenna's friend hasn't allowed Jenna to take any of her stuff.", "(-GiveNever(Friend,Jenna) & JennasStuff(Jenna))", "all x.((Friend(x) & JennasStuff(y)) -> -GiftedPermission(x,y))", "all x.(Friend(x) & Jenna'sFriend (-GivePrivacyToTakeStuff(x)))", "(-PersonGivingJenna'sStuff(Jenna))", "all x.(Friend(x) -> -GivesPermission(x))", "all x.((Friend(x) & JennasFriend(x)) -> -GiftsPermission(x,y))", "all x y z.((Friend(x) & Jenna) & Items(y) & Organizor(z)) -> -GiftsAuthority(x,y,z))", "all x y z.((Friend(x) & Jenna(y) & Stuck(z) & -GivePermission(y,x)) -> -GivePermission(y,z))", "(JennasFriend(Jenna) & -PermissionToTakeAnything(Jenna,Stuff))", "all x.((Friend(x) & JennaFilm(x)) -> -GiveReflection(x,y))"]}
{"id": "enwn_validation_584", "nl": "Jenna took a Clif bar from the pantry.", "fol": "", "prediction": ["Jenna took a Clif Bar from the Pantry.", "all x y.((Denna(x) & ClifBar(y)) -> TakenFromPantry(x,y))", "Jenna took a ClifBarFromPantry.", "all x y.((Lenna(x) & ClifBar(y)) -> TakenFromPantry(x,y))", "Jenna - TakesClifBarFromPanel(Jenna,Panel))", "all x y z.((Jenna(x) & ClifBar(y) & Pantry(z)) -> TakenFrom(x,y,z))", "Jenna took a ClifBar from the Pantry.", "Jenna took a ClifBar from the pantry.", "Jenna & TakedClifBarFromPannel(Jenna,Panther)", "all x y.((Jenna(x) & Pantry(y)) -> TakesClifBar(x,y))", "Jenna took ClifBarFromPantry(Jenna,Panel)", "Jenna & ClifBarFromPantry.", "Jenna took a ClifBarFromPantry(Jenna,y))", "Jenna PrishedClifBar(Jenna,Pentagon)", "Jenna took a Clif Bar from the Pantry.", "all x y.((Jenna(x) & ClifBar(y)) -> TakenFromPantry(x,y))"]}
{"id": "enwn_validation_585", "nl": "Jenna's friend bought the Clif bars in the pantry.", "fol": "", "prediction": ["JennasFriendBuysClifBarsInPanoramic(Jenna,D))", "all x.((Friend(x) & Jenna(x)) -> PurchasesClifBarsInPantries(x))", "Jenna's friend bought ClifBarsInPantries( Jenna,Yeah,ExistsInPantries))", "Jenna's friend bought clifbars(c) in pantry(d) & Jenna's friend bought bar in pantry(c))", "all x y.((Friend(x) & Jenna(y)) -> BoughtClifBars(x,y))", "Jenna's friend bought the ClifBars in the Pantry.", "Jenna's friend (Jenna'sFriend) & boughtClifBarsInPantry(Jenna!)", "Jenna's friend bought the ClifBarsInPantry.", "JennaasGrandmaWilliamsBuiltClifBars(x)", "JennasFriendBoughtClifBarsInPatrony(Jenna,Friend,Pantry)", "Jenna's friend bought the ClifBars(j) & in pantry(x))", "JennasFriendBuysClifBarsInPantries(Jenna,Dad,Pantry)", "Yvonne's friend boughts ClifBarsInPantries(y,x))", "(PathroomCosplay(Jenna) -> BuysClifBars(Jenna,Panthroom))", "all x y.((Friend(x) & JennaFriend(y)) -> Buys ClifBarsInPantry(x,y))", "all x y.((Friend(x) & Jenna(y)) -> (HasClifBars(x,y) & InPantry(y)))"]}
{"id": "enwn_validation_586", "nl": "Once you buy something, it belongs to you.", "fol": "", "prediction": ["all x y.((Book(x) & Product(y)) -> BelongsTo(x,y))", "all x.((Buys(x) & BelongsTo(x,y)) -> Buys(x,x))", "all x y.((Buys(x) & (BelongsTo(x,y)) | Buys(x,y)))", "all x.((Buys(x) & Purchases(x)) -> BelongsTo(x,y))", "all x y.((Bake(x) & Product(y) & Buy(y)) -> BelongsTo(x,y))", "all x y.((Buys(x) & Product(y) & Buys(x,y)) -> BelongsTo(x,y))", "all x.(Buying(x) -> BelongsTo(x,y))", "all x.(Buys(x) -> BelongsTo(x))", "all x.(Buys(x) -> BelongsTo(x,y))", "all x.(Buys(x) -> BelongsToYou(x))", "all x.(Benefits(x) -> Buys(x))", "all x.(Buys(x) -> BelongsTo(x,y))", "all x.(Bachets(x) -> BelongsTo(x,y))", "all x.(BelongsTo(x,y) -> Buys(x,y))", "all x.((Buys(x) & Buys(x)) -> BelongsTo(x,y))", "all x.(Buys(x) -> BelongsTo(x,y))"]}
{"id": "enwn_validation_587", "nl": "You shouldn't take someone else's belongings without their permission.", "fol": "", "prediction": ["all x y.((LowerPart(x,y) & InProtection(y,z)) -> -TakesWithoutPermission(x,y))", "all x y.((Foundation(x) & Person(y) & TakesWithoutPermission(x,y)) -> -TakesWithoutPermission(x,y))", "all x y.((Worth(x,y) & Belonging(y,z)) -> -TakeWithoutPermission(x,z,y))", "all x.((IsPerson(x) & -TakeNotHadGivenProperty(x)) -> UnlikelyToTakeWithoutPermission(x))", "all x y.((Client(x) & TakesWithoutPermission(x,y)) -> -DamagedWithoutPermission(x,y))", "all x y.((Person(x) & Belongs(y)) -> -TakeWithoutPermission(x,y))", "all x y.((HasPair(x,y) & TakesWithoutPermission(x,y)) -> -TakesWithoutPurpose(x,y))", "all x.((YouChallenge(x,y) & SomeoneAlthoughts(y)) -> -TakeWithoutPermission(x,y))", "all x y.((Alter(x) & Belongings(y)) -> -TakeWithoutPermission(x,y))", "all x y.((Person(x) & Belonging(y)) -> -Museum(x,y))", "all x y.((Member(x) & Other(y)) -> -TakesWithoutPermission(x,y))", "all x y.((HasPassion(x,y) & TakesWithoutPermission(y,x)) -> -TakesWithoutPerson(x,y))", "all x y.((Member(x) & Belonging(y) & -UnderPermission(x,y)) -> -Takes(x,y))", "all x y.((Person(x) & Belonging(y) & -TakeWithoutPermission(x,y)) -> -TakeWithoutPermission(x,y))", "all x y.((Another(x) & Belonging(y) & -Permission(x,y)) -> TakesWithoutPermission(x,y))", "all x y.((Welcome(x) & Neighbor(y)) -> -TakeWithoutPerson(x,y))"]}
{"id": "enwn_validation_588", "nl": "The Clif bars in the pantry belonged to Jenna's friend.", "fol": "", "prediction": ["all x y.((Leaf(x) & Pantry(y)) -> BelongsToFriend(x,y))", "all x.((ClifBarsInPantries(x) & JennasFriend(x)) -> BelongsTo(x,y))", "all x.((ClifBar(x) & Pantry(x)) -> BelongedToFriend(x,BelongsToFriend(x,BelongsToFriend(x,BelongsToFriend(x,BelongsToFriend(x,BelongsToFriend(x,BelongsToFriend,BelongsToFriend,BelongsToFriend(x,BelongedToFriend(x,BelongsToFriend(x,BelongsToFriend(x,BelongsToFriend(x,BelongsToFriend(x,Bible,BelongsFriend))", "all x.(ClifBar(x) -> BelongedToFriend(x,Benjamin(x))", "all x.(ClifBar(x) -> BelongsToFriend(x,Jenna))", "all x.(ClifBar(x) -> BelongedToFriend(x,y))", "all x.((ClifBars(x) & Pantry(x)) -> BelongsToFriend(x,y))", "all x.(ClifBars(x) -> BelongedToFriendWalter(x))", "all x.(ClifBar(x) -> BelongedToFriend(x,Jenna,x))", "all x y.((ClifBar(x) & Pantry(y)) -> BelongsToFriend(x,y))", "all x y.((ClifBar(x) & Pantry(y)) -> BelongsToFriend(x,y))", "all x y z.((ClifBar(x) & Pantry(y) & Jenna(z) & BelongsToFriend(x,z)) -> BelongedToFriend(x,z))", "all x.(ClifBar(x) -> BelongedToFriend(x,Jenna,Executive))", "all x.(ClifBar(x) -> BelongsToFriend(x, Jenna))", "all x y.((ClifBar(x) & Pantry(y)) -> BelongsToFriend(y,j))", "all x.(ClifBar(x,y) -> Friend(y,Jenna))"]}
{"id": "enwn_validation_589", "nl": "Jenna took one of her friend's Clif bars.", "fol": "", "prediction": ["Jenna tookClifBar(j) & OneFamily(j))", "all x.((Jenna(x) & ClifBar(y)) -> Takes(x,y))", "all x y.((Jenna (Jenna,y) & ClifBar(y)) -> TakenBy(x,y))", "all x y.((Jenna(x) & Freund(y)) -> TakesClifBar(x,y))", "Jenna took ClifBar(Jenna,Friend(Jenna))", "all x y z.((Evening(x) & Friends(y) & ClifBar(z) & Jenna (x)) -> Takes(x,y,z))", "Jenna took one of her friend's Clif bars.", "all x y.((Jenna(x) & ClifBar(y) & Take.(Jenna))) -> Take!", "all x y.((Jenna(x) & ClifBar(y)) -> TakenBy(x,y))", "all x y.((Jenna(x) & BestFriend(y,x)) -> TakesClifBar(x,y))", "all x y.((Jenna(x) & FriendsClif Bar(y)) -> TakenIn(x,y))", "Jenna took one of her friend's Clif bars.", "all x y z.((Jenna(x) & Friend(y) & ClifBar(z)) -> Takes(x,y,z))", "all x y.((Friend(x) & Jenna) & ClifBar(y)) -> TakenBy(x,y))", "all x y.((Jenna(x) & ClifBar(y)) -> TakenBy(x,y))", "all x y.((Jenna(x) & ClifBar(y) & TakenBy(x,y)) -> Taked(x,y))"]}
{"id": "enwn_validation_590", "nl": "Jenna took one of her friend's Clif bars without her permission.", "fol": "", "prediction": ["Jenna took one of ClifBars(x) & -Permission(x))", "all x.((Yenne(x) & ClifBar(y)) -> Takes(x,y))", "all x y.((Jenna(x) & FreundClifBar(y)) -> TakenWithoutPermission(x,y))", "(TakenWithoutPermission(Jenna,FriendClifBar))", "Jenna took one of her friend's Clifbars -withoutPermission(Jenna,2008))", "all x y.((Jenna(x) & ColleagueBar(y)) -> TakesWithoutPermission(x,y))", "all x y.((Jenna(x) & ClifBar(y)) -> TakenWithoutPermission(x,y))", "all x y.((Jenna(x) & ClifBar(x)) -> TakenWithoutPermission(x,y))", "all x y.((Jenna'sClifBar(y) & SheFriend(z) & -Person(x,y)) -> TakenWithoutPerson(y,z))", "all x y.((Jenna(x) & ClawBag(y)) -> TakenUnderPermission(x,y))", "all x y z.((Jenna'sClifBar(x) & Bekannte(y) & FriendsClifBar(z)) -> TakenByWithoutPermission(x,y,z))", "all x.((Jenna,Friend(x) & ClifBar(x)) -> TakesWithoutPermission(x,Jenna))", "all x.((Jenna'sClifBar(x) & -Person(x)) -> TakenWithoutPermission(x))", "(famousFamily(Jenna,ClifBar,NegativeForBeing(Jenna,NegativeForBeing)))", "all x y z.((Jenna'sFriend(x) & ClifBar(y) & ClifBar(z) & -Permission(x,y,z)) -> UsedWith(x,y,z))", "all x.(Jenna(x) -> (RetainsClifBar(x) & -Permission(x)))"]}
{"id": "enwn_validation_591", "nl": "Jenna shouldn't have taken the Clif bar.", "fol": "", "prediction": ["(-ShouldTakeClifBar(Jenna))", "all x.(Jenna(x) -> -ShouldFadClifBar(x))", "all x.(Jenna(x) -> -NeedsClifBar(x))", "-HadClifBar(Jenna)", "all x.(Helena(x) -> -TakenClifBar(x))", "all x.((Jenna(x) & -HasClifBar(x)) -> -HasClifBar(x))", "all x.(NJenna(x) -> -HasClifBar(x))", "Jenna shouldn't have taken the ClifBar.", "(-Fan(Jenna) & TakenClifBar(Jenna))", "Jenna shouldn'tAntHasClifBar(Jenna,ClifBar)", "all x.((Jenna(x) & ClifBar(x)) -> -NeedsClifBar(x))", "all x.((Jenna(x) & -HasClifBar(x)) -> ShouldNeedCompletion(x))", "all x.((Jenna(x) & ClifBar(y)) -> -NeedLeftBall(x,y))", "all x.((Jenna(x) & -ClifBar(x)) -> -Changed(x))", "all x y.((Jenna(x) & ClifBar(y)) -> -shouldHaveCold(x,y))", "Jenna shouldn't've takenClifBar."]}
{"id": "enwn_validation_592", "nl": "Rich deducted points from two students because they submitted the same project.", "fol": "", "prediction": ["all x y z.((Student(x) & Student(y) & Student(z) & SubmittedSameProject(x,y,z)) -> DeductedPoints(x,y))", "all x y.((Student(x) & Student(y) & SubmittedSameProject(x,y)) -> DeductedPointsFrom(x,y))", "all x y z.((Student(x) & Student(y) & Project(z) & InSubmission(y,z)) -> DeductedPoints(x,y))", "all x y z.((Student(x) & Student(y) & Student(z) & SubmittedSameProject(j,y)) -> DeductPoints(x,y,z))", "All x y.((Student(x) & Student(y) & SubmittedSameProject(x,y)) -> DeductedPoints(x,y))", "the same project submitted to Rich.", "Student(x) & Student(x) & SameProject(x))", "all x y.((Student(x) & Student(y) & SubmittedLiamProject(x,y)) -> DeductedPointsFrom(x,y))", "all x y.((Student(x) & Student(y) & SubmittedSameProject(x,y)) -> DeductedPoints(x,y))", "all x y.((Student(x & Student(y) & SubmittedSameProject(x,y)) -> DeductsPoints(x,y))", "all x y.((Student(x) & Student(y) & SubmittedSameProject(y,x)) -> DeductedPoints(x,y))", "all x y.((Chief(x) & Student(y) & SubmittedTheSameProject(y)) -> DeductedPoints(x,y))", "all x y z.((Student(x) & Student(y) & Student(z) & SubmittedSameProject(x,y,z)) -> DeductedPoints(x,y))", "all x.((Student(x) & Student(x) & SubmittedSameProject(x)) -> DeductedPoints(x,y))", "all x y.((Student(x) & Student(y) & SubmittedSameProject(x,y)) -> DeductsPoints(x,y))", "all x y.((Student(x) & Student(y) & SubmittedSameProject(x,y)) -> DeductsPointsFor(x,Y))"]}
{"id": "enwn_validation_593", "nl": "The project worksheet said that everyone was supposed to do the project on their own.", "fol": "", "prediction": ["all x.(ProjectWorksheet(x) -> AlleySaidHeartSonders(x))", "all x.(ProjectWorksheet(x) -> EveryoneSustainedDoProjectOnOwn(x))", "all x.(ProjectWorksheet(x) -> (AboutToDoProjectOnOfOrigin(x) & -AboutDoingProjectOnOfOwn(x)))", "all x.(ProjectWorksheet(x) -> EveryoneSeen(x))", "all x.(ProjectWorksheet(x) -> SaidEveryoneSaidToDoProjectOnOfOwn(x))", "all x.(ProjectWorksheet(x) -> ScenarioOnOfOwn(x))", "all x.((ProjectWorksheet(x) & Person(y)) -> ShouldDoProjectOnOfOwn(y,x))", "all x y.((ProjectWorksheet(x) & Everyone(y)) -> ShouldDoProjectOnOfOfOfOfPlot(x,y))", "all x.((ProjectWorksheet(x) & ShouldDoProjectOnOwn(x)) -> EveryoneDoes(x))", "all x y.((ProjectWorksheet(x) & Project(y)) -> MeansToDoOnOfOnce(x,y))", "all x y.((ProjectWillow(x) & Query(y)) -> SympathizedToOwn(x,y))", "all x.(ProjectWorksheet(x) -> ProjectWord(x))", "all x y.((ProjectWorksheet(x) & Person(y)) -> ShouldBeSuchAsOf(y,x))", "all x.(ProjectWorksheet(x) -> ShouldDoEssentialGroupwork(x))", "all x.(ProjectWorksheet(x) -> ItSaidEveryoneSolved(x))", "all x y.((ProjectWillsheet(x) & Person(y)) -> ShouldDoOnOwn(y,x))"]}
{"id": "enwn_validation_594", "nl": "People working independently on a creative task will produce different results.", "fol": "", "prediction": ["all x.((WorkingIndependently(x) & CreativeTask(x)) -> DifferentResults(x))", "all x y.((WorkingIndependently(x) & CreativeTask(y)) -> DifferentResults(x,y))", "all x.((WorkingIndependently(x) & CreativeTask(x)) -> DifferentResults(x))", "all x y.((Person(x) & CreativeTask(y)) -> ProducingDifferentResults(x,y))", "all x.(WorkingIndependentOnCreativeTask(x) -> DifferentResults(x))", "all x y.((Person(x) & CreativeTask(y) & WorksIndependently(x,y)) -> DifferentResults(x))", "all x y.((WorkingIndependently(x) & CreativeTask(y)) -> ProducesDifferentResults(x,y))", "all x y z.((Human(x) & CreativeTask(y) & Creative(z)) -> DifferencesResults(x,y))", "all x.(WorkingIndependently(x) -> DifferentResults(x))", "all x y.((Person(x) & CreativeTask(y)) -> DifferentResults(x,y))", "all x y.((WorkingIndependently(x) & CreativeTask(y) & Creating(y)) -> DifferentResults(x,y))", "all x y.((WorkingIndependent(x) & CreativeTask(y)) -> ProducedDifferentResults(x,y))", "all x y.((WorkingIndependently(x) & CreativeTask(y)) -> DifferentResults(x,y))", "all x y.((WorkingIndependently(x) & CreativeTask(y)) -> ProducesDifferentResults(x,y))", "all x.(WorkingIndependentlyOnCreativeTask(x) -> DifferentResults(x))", "all x y.((PeopleWorkingIndependently(x) & CreativeTask(y)) -> DifferentResults(x,y))"]}
{"id": "enwn_validation_595", "nl": "A school project is a creative task.", "fol": "", "prediction": ["all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x.exists y.((SchoolProject(x) & CreativeTask(y)) -> Creative(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeToy(x))"]}
{"id": "enwn_validation_596", "nl": "Deducting points from a student for violating rules is a valid response.", "fol": "", "prediction": ["all x.((Student(x) & ViolatesRules(x)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(x,y)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & VaguesRules(x,y)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(x,y)) -> ValidResponse(x))", "all x.((Student(x) & ViolationRules(x)) -> ValidResponse(x))", "all x y z.((PreferredPiece(x) & Student(y) & Rules(z) & Violation(y,z)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(x,y)) -> ValidResponse(x,y))", "all x.((Student(x) & ViolationOfRules(x) & DeductsPointsForBehavior(x)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(x,y)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(x,y)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(y,x)) -> ValuableResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(y,x)) -> ValidResponse(x))", "all x y z.((Student(x) & Student(y) & Rule(z) & Violation(z) & DeductsPoints(x,y)) -> ValidResponse(x))", "all x.((Student(x) & DeviatesPoints(x)) -> ValidResponse(x))", "all x y.((Student(x) & StudentViolationRules(y) & DeductsPoints(x,y)) -> ValidResponse(x))", "all x y z.((Student(x) & Student(y) & RuleViolation(z) & DeductsPoints(x,y,z)) -> ValidResponse(x))"]}
{"id": "enwn_validation_597", "nl": "People working independently on a school project will produce different results.", "fol": "", "prediction": ["all x y.((Person(x) & SchoolProject(y) & WorksIndependently(x,y)) -> DifferentResults(x,y))", "all x y.((WorkingIndependently(x) & SchoolProject(y)) -> DifferentResults(x,y))", "all x.(WorkingIndependently(x) -> DifferentResults(x))", "all x.((WorkingIndependently(x) & SchoolProject(x)) -> DifferentResults(x))", "all x.(WorkingIndependently(x) -> DifferentResults(x))", "all x y.((WorkingIndependentlyOnSchoolProject(x) & SchoolProject(y)) -> DifferentResults(x,y))", "all x y.((WorkingIndependently(x) & SchoolProject(y)) -> DifferentResults(x,y))", "all x y.((Person(x) & SchoolProject(y) & WorksIndependently(x,y)) -> DifferentResults(x,y))", "all x y.((WorkingIndependently(x) & SchoolProject(y)) -> ProducesDifferentResults(x,y))", "all x y.((WorkingIndependently(x) & SchoolProject(y)) -> DifferentResults(x,y))", "all x.((WorkingIndependentlyOnSchoolProject(x)) -> DifferentResults(x))", "all x.(IndependentWorkingStateProject(x) -> DifferentResults(x))", "all x y.((Workindependent(x) & SchoolProject(y)) -> DifferentResults(x,y))", "all x y z.((Person(x) & SchoolProject(y) & School(z) & WorksIndependently(x,y) & ProducesDifferentResults(x,z)) -> Independent(x))", "all x.(WorkingIndependentlyOnSchoolProject(x) -> DifferentResults(x))", "all x.(WorkingIndependently(x) -> DifferentResults(x))"]}
{"id": "enwn_validation_598", "nl": "The two students must have worked together if they produced the same project.", "fol": "", "prediction": ["all x y z.((Student(x) & Student(y) & Project(z) & ProducedSame(x,y,z)) -> WorkedTogether(x,y,z))", "all x.(WorkedTogether(x) -> (TwoStudents(x) & ProducedSameProject(x)))", "all x y.((Student(x) & Student(y) & ProducesSameProject(x,y)) -> WorkedTogether(x,y))", "all x.((Student(x) & Student(x) & Student(x) & ProducedSameProject(x,2)) -> WorkedTogether(x))", "all x.((Student(x) & SameProject(x)) -> WorkingInCommunity(x))", "all x.(WorkedOnOneProject(x) -> Student(x))", "all x.((Student(x) & WorkedTogether(x)) -> ProducedSameProject(x))", "all x.(WorkedTogether(x) -> ProducerMiamis(x))", "all x.((Student(x) & Student(x) & KnownProject(x,y)) -> WorkedTogether(x,y))", "all x y z.((Student(x) & Student(y) & Project(z) & Same(x,y,z)) -> WorkedTogether(x))", "all x y.((Student(x) & Student(y) & ProductedSameProject(x,y)) -> WorkedTogether(x,y))", "all x y.((Student(x) & Student(y) & ProduceStudent(x,y)) -> WorkedTogether(x,y))", "all x.((Student(x) & SameProject(x)) -> WorksTogether(x))", "all x y.((Student(x) & Student(y) & Project(y) & ProducedSame(x,y)) -> WorksTogether(x,y))", "all x y.((Student(x) & Student(y) & ProducesSameProject(x,y)) -> WorkedTogether(x,y))", "all x.((Student(x) & ProducedSameProject(x)) -> WorkedTogether(x))"]}
{"id": "enwn_validation_599", "nl": "The two students broke the rules by submitting the same project.", "fol": "", "prediction": ["all x y.(FreshRecks(x) & Student(y) & Student(z) & SubmitsSameProject(y,z))", "-CrossRestrictsBySubmittingSameProject(2 Student,EquivalentTime(2,2))", "((Student(Student,1) & Student(Student,2)) -> BreaksRules(Studies,1))", "all x y.((Student(x) & Student(y)) -> BreaksRulesBySubmittingTheSameProject(x,y))", "all x y.((Student(x) & Student(y)) -> BreakerRules(x,y))", "all x y.((Student(x) & Student(y)) -> BreaksRules(x,y))", "all x y z.((Student(x) & Student(y) & Project(z) & Submit(x,y,z)) -> BreaksRules(x))", "all x.((Student(x) & Students(x)) -> SplitsRulesBySendingTheSameProject(x))", "All x.((Student(x) & StudentsChaseReference(x)) -> SubmitsMameProject(x))", "all x y.((Student(x) & Student(y)) -> BannedRulesBySubmittingTheSameProject(x,y))", "the rules were broken by the same student(s) & submittedthem\u2019s project(s))", "all x.((Student(x) & Student(x)) -> BreaksRules(x))", "all x y.((Student(x) & Student(y)) -> BreaksRulesBySubmitting(x,y))", "all x y.((Student(x) & Student(y) & SubmitsAsMitigation(x,y)) -> BreaksReels(x))", "has been determined that the student(s) that submittedsthesameProject(s) brokerules(s))", "the rules are violated by the students, as both students submits the same project."]}
{"id": "enwn_validation_600", "nl": "Rich deducted points from the students for breaking the rules.", "fol": "", "prediction": ["all x y.((Reich(x) & Student(y) & BreakingRules(y)) -> DeductedPoints(x,y))", "all x y.((Student(x) & Student(y) & BreaksRules(x,y)) -> DeductsPoints(x,y))", "all x y.((Student(x) & Rich(y)) -> DeductedPointsForbrokenRules(y))", "all x y z.((Rich(x) & Student(y) & Rule(z)) -> (DeductedPoints(x,y) & BreakingRules(y,z)))", "all x y z.((Rich(x) & Student(y) & Rule(z)) -> DeductedPointsForBreaking(x,y,z))", "all x y.((Rich(x) & Student(y)) -> DeductsPointsForBreachingRules(x,y))", "all x y.((Rich(x) & Student(y)) -> DetectedPoints(x,y))", "all x y.((Rich(x) & Student(y)) -> DeductsPointsForBreachingRules(x,y))", "all x y z.((Rich(x) & Student(y) & Rule(z) & BreaksRules(y,z)) -> DeductsPoints(x,y))", "all x y.((Rich(x) & Student(y) & BreaksRules(x,y)) -> DeductsPoints(x,y))", "all x.((Student(x) & Rich(x)) -> DeductsPointsFrom(x,y))", "all x y.((Student(x) & Rich(y)) -> DeductsPoints(y,x))", "all x y.((High(x) & Student(y)) -> DeductsPoints(x,y))", "all x y.((Rich(x) & Student(y)) -> DeductedPointsForRefusingRules(x,y))", "all x y.((Student(x) & Rich(y)) -> DeductedPointsForReleasingRules(y,x))", "all x y.((Pond(x) & Student(y)) -> HeatedRevenue(x,y))"]}
{"id": "enwn_validation_601", "nl": "Rich was right to deduct points from the students.", "fol": "", "prediction": ["all x.(Reich(x) -> DeductsPointsFromStudents(x))", "Rich was right to deduct point(Rich and Student(s))", "all x y.((Rich(x) & Student(y)) -> DeductedPoints(x,y))", "Rich was right to claim that all x.((Student(x) & Stupid(x)) -> DeductsPoints(x))", "(Rich was RightToDeductPointsFromStudents(Rich,Students))", "all x y.((Rich(x) & Student(y)) -> DeductsPoints(x,y))", "all x y z.((Rich(x) & Student(y) & Point(z)) -> RightToDeduct(x,y,z))", "all x.(Rich(x) -> Deduct(x,students))", "all x.(Rich(x) -> DeductPointsFromStudents(x))", "all x y.((Rich(x) & Student(y)) -> DeductsPoints(x,y))", "all x.(Reich(x) -> DeductsPoints(x))", "all x y.((Rich(x) & Student(y)) -> RightToDeductPoints(x,y))", "Rich was wrong to deduct points from students.", "Rich was right to deduct points from students.", "all x.(Rich(x) -> DeductPoints(x))", "all x.(Rich(x) -> DeductsPoints(x))"]}
{"id": "enwn_validation_602", "nl": "It's okay to sell lost items if you can't find their owner.", "fol": "", "prediction": ["all x.((LostItem(x) & -FindOwner(x)) -> OKToSell(x))", "all x.((LostItem(x) & CannotFindOwner(x)) -> OKToSell(x))", "all x.((LostItem(x) & -FindOwner(x)) -> OKToSell(x))", "all x.((LopedItem(x) & UnableToFindOwner(x)) -> OKToSell(x))", "all x.((LostItem(x) & -FindOwner(x)) -> OKToSell(x))", "all x.((Losing(x) & -FindOwner(x)) -> OKToSell(x))", "all x.((Ordonnance(x) & CannotFindOwner(x)) -> SellsLostItems(x))", "all x.((Lost(x) & -Find(x)) -> OKToSell(x))", "all x.((LostItems(x) & -ReturnOwner(x)) -> OkayToSell(x))", "all x.((LoseItem(x) & -FindOwner(x)) -> OKToSell(x))", "all x.((LostItem(x) & -FindOwner(x)) -> OKToSell(x))", "all x.((SellsLosseItems(x) & -FindsOwner(x)) -> OkayToSell(x))", "all x.((IsLadyFindsOwner(x) & -FindsOwner(x)) -> OkayToSell(x))", "all x.((LostItem(x) & CannotFindOwner(x)) -> Akash(x))", "all x.((LossItem(x) & -CanFindOwner(x)) -> OkayToSell(x))", "all x.((LoseItem(x) & -FindOwner(x)) -> Okay(x))"]}
{"id": "enwn_validation_603", "nl": "Jamie didn't try to find the camera's owner.", "fol": "", "prediction": ["Jamie -TriedToFindOwner(Jamie,Camera).", "just didn't find camera's owner.", "(-trysToFindOwner(Jamie,Camera))", "Jamie -(TryToFindOwner(Jamie) -> Camera(Jamie))", "the owner of the camera.", "Jamie didn't try to find the camera's owner.", "(-TryToFinishOwner(Jamie,Camera) & Jamie.", "all x y.((Appliance(x) & Camera(y)) -> -TryToFindOwner(x,y))", "(-tryedToFindOwner(Jamie) & CameraOwner(Jamie))", "(-tryedToFindOwner(jamie,x))", "-AppearedToFindOwner(Jackie,Camera)", "but Jamie didn't TryToFindScameraOwner(Jamie,Camera)", "-(Jamie(Jamie) & Camera(Jamie))", "-SearchedForOwner(Jamie,Camera)", "all x.((Jamie(x) & Camera(y)) -> -TriesToFindOwner(x,y))", "-(EssayEmail(Jamie,Camera) & -Position(Jamie))"]}
{"id": "enwn_validation_604", "nl": "Jamie sold the camera on Ebay.", "fol": "", "prediction": ["Jamie sold the camera on Ebay.", "Jamie sold the camera on eBay.", "Jamie & Camera(Jamie) & SoldOnEbay(Jamie)", "Jamie SoldCameraOnEbay.", "Jamie sold the camera on Ebay.", "(SoldOnEbay(Jamie) -> Camera(Jamie))", "Jamie sold camera on Ebay.", "Jamie sold the camera on Ebay.", "Jamie sold the camera on Ebay.", "-SoldOnEbay(Jamie,Camera)", "Jamie sold a camera on eBay.", "Jamie sold CameraOnEbay(Jamie)", "Jamie sold it on Ebay.", "(SoldOnEbay(Jamie) & Camera(Jamie))", "Jamie sold the camera on eBay.", "Jamie sold the camera on Ebay."]}
{"id": "enwn_validation_605", "nl": "Losing something means leaving it somewhere accidentally.", "fol": "", "prediction": ["all x y z.((Losing(x) & Something(y) & Place(z) & UnexpectedLoss(x,y,z)) -> Leaves(x,z))", "all x.(Losing(x) -> (Launches(x,Intentionally) & Where(x,Intentionally)))", "all x.((Lose(x) & Something(y)) -> LeftOrganic(y))", "all x.(LaysIt(x) -> LeaveTooTooIntentionally(x))", "all x y.((Losing(x) & Something(y)) -> LeavesOrganically(y,x))", "all x.((Losing(x) -> LeaveProperly(x)))", "all x.(LosingSomething(x) -> LeavesSomewhereInaccidentally(x))", "all x.(Losing(x) -> (LeavingPoorneurInstinctly(x)))", "all x.(Losing(x) -> (Leaving(x,y) & Inaccurately(x)))", "all x.(Losing(x) -> LeavesAndOrderProfoundly(x))", "all x.(LosingAnt(x) -> LeavesAndUnexpectedly(x))", "all x y.((Losing(x) & Something(y)) -> LeavesInaccidentally(x,y))", "all x.(LootsSomething(x) -> LeaveInaccidentallySomewhere(x))", "all x.(Losing(x) -> LeavesSomewhereInaccidentally(x))", "all x.(Losing(x) -> LeavesPoorAnchorUnexpectedly(x))", "all x.(Lose(x) -> AlwaysLays(x,y))"]}
{"id": "enwn_validation_606", "nl": "People don't leave valuables in public on purpose.", "fol": "", "prediction": ["exists x.(People(x) & -LaysValuablesInPublic(x))", "all x.((Person(x) & -LaysValuablesInPublic(x)) -> -LaysVouchersOnPurpose(x))", "all x y.((Person(x) & Valuable(y)) -> -LeavesInPublic(x,y))", "all x y.((Person(x) & Valued(y) & Public(z)) -> -LeavesInPublicOnPurpose(x,y))", "all x.((Person(x) & -LaunchesValuablesInPublic(x)) -> -LoadsValuablesOnPurpose(x))", "all x.((People(x) & -LeavingValuablesInPublic(x)) -> (-LaunchesValuablesOnPurpose(x)))", "all x y.((Person(x) & Valuables(y)) -> -LayInPublic(x,y))", "all x y.((Personal(x) & Value(y)) -> -LaysInPublic(x,y))", "all x.((Person(x) & -LeaveValuables(x)) -> WeaveOnPurpose(x))", "all x y.((Product(x) & Person(y)) -> -LeaveValuablesInPublic(y,Purpose))", "all x.(Significant(x) -> -LeavedInPublicOnPurpose(x))", "all x.((People(x) & LeavesValuablesInPublic(x)) -> -LeavesValuablesOnProperTax(x))", "all x.(People(x) -> \"BreatheValuables(x) & -LaunchValuables(x) & -LaunchValuables(x) & Purpose(x)))", "all x y.((Person(x) & PublicLower(y)) -> -LeaveValuables(x,y))", "all x.(Person(x) -> -LeaveValuablesInPublic(x))", "exists x.(Persons(x) & LeavesValuablesInPublic(x))"]}
{"id": "enwn_validation_607", "nl": "Jamie found a camera sitting on a park bench.", "fol": "", "prediction": ["all x y.((Jamie(x) & Camera(y)) -> FoundOnParkBenches(x,y))", "all x y.((Jamie(x) & Camera(y) & SissesOnParkBenches(x,y)) -> Found(x,y))", "all x.((Camera(x) & SittingOnParkBenches(x)) -> JamieFinds(x,curious))", "(existes x.(Camera(x) & Sitting(x,ParkBenches)) -> JamieFounds(Jarry,Camera))", "all x y.((Camera(x) & ParkBenches(y)) -> FoundOn(x,y))", "exists x.(Camera(x) & satsOnPentParkBenches(x))", "all x.((Jamie(x) & Camera(y)) -> SittingOnParkBenches(y))", "all x y z.((Jamie(x) & Camera(y) & ParkBenches(z)) -> FoundSittingOn(y,z))", "Jamie FoundCameraOnParkBenches(James,Jamie)", "all x.(Jamie(x) & Camera(x) & FoundOnParkBench(x))", "all x.((Jamie(x) & Camera(x)) -> SittingOnParkBenches(x))", "all x.((Jamie(x) & FoundCamera(x) & SittingOnParkBench(x)) -> HasCamera(x))", "(SittingOnPentainBenchesJamie(Jamie): FoundCamera(Jamie))", "all x y.((Jamie(x) & Camera(y)) -> SittingOnParkBench(x,y))", "all x.((Jamie(x) & FoundCamera(x)) -> SittingOnParkBenches(x))", "all x.((Jamie(x) & Camera(x)) -> FoundOnParkBenches(x))"]}
{"id": "enwn_validation_608", "nl": "Cameras don't put themselves on benches.", "fol": "", "prediction": ["all x.(Camera(x) -> -PutsOnBenches(x))", "all x.(Camera(x) -> -PutsOnBenches(x))", "all x.(Camera(x) -> -PutsOnBenches(x))", "all x.(Camera(x) -> -PlacesOnBenches(x))", "all x.(Camera(x) -> -PutsOnBenches(x))", "all x.(Camera(x) -> -PutsOnBench(x))", "all x.(Camera(x) -> -InBenches(x))", "all x y.((Camera(x) & Breeze(y)) -> -PlacesOn(x,y))", "all x.(Camera(x) -> -PutsOnBench(x))", "exists x.(Camera(x) & -PlacesOnBenches(x))", "all x.(Camera(x) -> -PutsOnBenches(x))", "all x.(Camera(x) -> -PutsOnBench(x))", "all x.(Camera(x) -> -PutsOnBenches(x))", "all x.(Camera(x) -> -PutsOnBench(x))", "all x y.((Camera(x) & Benches(y)) -> -PutsOn(x,y))", "all x.(Camera(x) -> -PosesOnBench(x))"]}
{"id": "enwn_validation_609", "nl": "If someone left a valuable item in public, they lost it.", "fol": "", "prediction": ["all x.(LeavesItemToPublic(x) -> LostItem(x))", "all x.((LeavesValuableItem(x) & LostItem(x)) -> PeopleLeaveInPublic(x))", "all x y.((Person(x) & ValuableItem(y) & LeftItemInPublic(x,y)) -> LostItem(x,y))", "all x y.((LeavedValuableItem(x) & Public(y)) -> LostItem(x,y))", "all x y.((Person(x) & ValuableItem(y) & LeftInPublic(x,y)) -> Lost(x,y))", "all x.((LeavedValuableItem(x) & LostItem(x)) -> PeopleLostItem(x))", "all x.((LeavesValuableItem(x) & LeavesInPublic(x)) -> LosesItem(x))", "all x.(LeavesValuableItem(x,Public) -> Lost(x))", "all x.(LayValuableItemOnPublic(x) -> LosesItem(x))", "all x y.((Person(x) & ValuableItem(y) & LeftInPublic(x,y)) -> LostItem(x,y))", "all x.(LeavesValuableItemInPublic(x) -> LosesItem(x))", "all x y.((Person(x) & ValuableItem(y) & LeftInPublic(x,y)) -> Lost(x,y))", "all x.((Person(x) & LeftValuableItem(x,public)) -> LostItem(x))", "all x y z.((Person(x) & ValuableItem(y) & Public(z) & LeftInPublic(x,y,z)) -> Lost(x,y))", "all x.((LeapedValuableItem(x) & PublicItem(x)) -> LostItem(x))", "all x.(LeavesWorthInPublic(x) -> Lost(x))"]}
{"id": "enwn_validation_610", "nl": "Someone left the camera on the park bench.", "fol": "", "prediction": ["(exists x.(Camera(x) & ParkBenches(x) & LeftOn(x,x)))", "exists x.(Camera(x) & LeftOnParkBench(x))", "all x.(Son(x) -> LeftCameraOnParkBench(x))", "exists x.(Camera(x) & LeftOnBenches(x))", "exists x.(Camera(x) & LeftOn(x,ParkBenches))", "exists x.(Camera(x) & LeftOnBenches(x))", "all x.((Camera(x) & ParkBenches(x)) -> LeftOn(x,Camera))", "existed x.(Camera(x) & LeftOnParkBenches(x))", "exists x.(Camera(x) & LeftBetween(x,ParkBench))", "all x y.((Camera(x) & ParkBench(y)) -> LeftOn(x,y))", "all x.(Person(x) -> LeftCameraAtParkBenches(x))", "exists x.(Camera(x) & LeftAt(x,ParkBenches))", "exists x y.((Camera(x) & ParkBenches(y)) -> LeftOn(x,y))", "all x.(LeavesCameraOnParkBenches(x) -> LeavesCameraOnBenches(x))", "all x.((Camera(x) & ParkBenches(x)) -> LeftOn(x,Camera,ParkBenches))", "exists x.(Camera(x) & LeftBy(x,ParkBenches))"]}
{"id": "enwn_validation_611", "nl": "Someone lost the camera.", "fol": "", "prediction": ["-LostCamera(y)", "is lost.", "-LostCamera(n)", "exists x.(Loss(x) & Camera(x))", "exists x.(LossCamera(x))", "-LosensCamera(x)", "OccupiedCamera.", "all x.(LoseCamera(x) -> CameraLost(x))", "(LoseCamera(x) -> LostCamera(x))", "all x.(LostCamera(x) -> Camera(x))", "(OfCamera(x) -> Lost(x))", "all x.(LoseCamera(x) -> RetainsCamera(x))", "(lostCamera(e) -> LostCamera(e))", "FriendLossCamera(x)", "all x.(Person(x) -> LostCamera(x))", "exists x.(Camera(x) & Lost(x))"]}
{"id": "enwn_validation_612", "nl": "Jamie sold a lost camera.", "fol": "", "prediction": ["(Sold(Jamie,Saving(Jamie) | LostCamera(Jamie)))", "Jamie soldlost(Jamie)", "all x y.((Jamie(x) & Camera(y)) -> Sells(x,y))", "all x y.((Jamie(x) & Camera(y) & Lost(y)) -> Sold(x,y))", "Jamie soldSoldLostCamera(Jamie)", "Jamie sold a lostCamera(Jamie)", "all x y.((James(x) & Camera(y) & Lost(y)) -> Sold(x,y))", "all x.((Jamie(x) & LostCamera(x)) -> Sold(x,y))", "all x.(Sold(x,majail) -> LostCamera(x))", "Jamie sold lostCamera(Jim)", "Jamie soldlossCamera(James)", "(SoldByJamie(Jamie) & LostCamera(Jamie))", "Jamie sold a lost camera.", "all x.((Jamie(x) & LosedCamera(x,y)) -> Sold(x,y))", "all x.(Sold(x,MarryJamie,LossCamera) -> Sold(x,Jamie))", "all x y.((Miami(x) & Camera(y)) -> Sells(x,y))"]}
{"id": "enwn_validation_613", "nl": "Jamie sold a lost camera without trying to find its owner first.", "fol": "", "prediction": ["all x y.((Sold(x,y) & Camera(y) & Owner(x,y)) -> LostSon(x,y))", "all x y z.((Jamie(x) & Camera(y) & Owner(z)) -> (Sold(x,y) & Lost(y) & -InformationAbout(x,z)))", "all x y.((Jamie(x) & Camera(y) & Lost(y)) -> SoldWithoutFindingOwner(x,y))", "all x y.((James(x) & LostCamera(y)) -> SoldWithoutFirstSearch(x,y))", "all x y.((Sold(x,y) & LostCamera(x,y)) -> NoOwner(x,y))", "all x.((Jamie(x) & LostCamera(x) & -TogetherWithOwner(x)) -> Sold(x,y))", "all x.((Jamie(x) & LostCamera(x)) -> SoldWithoutFindingOwner(x))", "(lostCamera(Jamie) & sold(Jamie,lostCamera) & -DoesFindOwnerFirst(Jamie,Maple))", "all x y.((Jay(x) & Camera(y)) -> (Lived(y,x) & -FindOwner(y,x)))", "all x.((Jamie(x) & LostCamera(x)) -> SoldRefused(x,y))", "all x y z.((Jamie(x) & Camera(y) & Owner(z)) -> SoldWithoutFirstLook(x,y,z))", "exists x.((Jamie(x) & LostCamera(x) & -FindsOwner(x)) -> Sold(x))", "all x.((Jamie(x) & LosedCamera(x) & -FindOwnerFirst(x)) -> Sold(x,y))", "all x y z.((Jamie(x) & Camera(y) & Owner(z)) -> Sells(x,y))", "all x y z.((Jamie(x) & Camera(y) & Owner(z)) -> (Sold(x,y,z) & Lost(y) & -Searched(z,y)))", "all x y z.((Executive(x) & Camera(y) & Owner(z)) -> Sold(x,y))"]}
{"id": "enwn_validation_614", "nl": "Jamie should have tried to find the camera's owner before selling it.", "fol": "", "prediction": ["all x.(MajorMajor(x) -> (TriedToFindOwner(x,camera) & BeforeSelling(x,camera)))", "all x y.((Camera(x) & Jamie(y)) -> ShouldHaveTriedToFindOwnerBeforeSelling(y,x))", "all x.((DarkShapedCamera(x) & FindsOwnerThanSell(x)) -> JamieBuys(x))", "all x y.((Camera(x) & Camera(y) & Owner(z)) -> ShouldTryToSell(x,y,z) & Jamie(x))", "was ineffective to find Owner(Jamie)", "all x y z.((Camera(x) & Owner(y) & Jamie(z) & ShouldTryToReach(x,y,z)) -> Selling(z,x))", "-(LaysCamera(Jarson) & FoundOwner(Jarson,Camera))", "all x y.((Camera(x) & Owner(y)) -> (Searched(x,y) & Sells(x,y)))", "all x y.((Camera(x) & Jamie(y)) -> ShouldTrySoonAfterSell(y,x))", "all x.(ToteFirstPet(x) -> OwnerTried(x,SellsCamera))", "all x y.((Camera(x) & Jamie(y)) -> shouldTryToFindOwnerAndSell(x,y))", "Obviously, Jamie should have tried to find camera's owner before selling it.", "all x y z.((RadingCamera(x) & Owner(y) & Camera(z)) -> ShouldAngry(y,z))", "all x.((Camera(x) & Person(y)) -> ShouldSell(x,y))", "Jamie should have tried to find the camera's owner before selling it.", "all x y.((Past(x) & Camera(y) & Solved(x,y)) -> ShouldBeBefore(x,y))"]}
{"id": "enwn_validation_615", "nl": "Removing bad players from a competitive sports team because they are unskilled is okay.", "fol": "", "prediction": ["all x y.((BadPlayers(x) & CompetitiveSportsTeam(y) & -SkilledPlayers(x)) -> OK(x))", "all x y.((BadPlayers(x) & CompetitiveSportsTeam(y) & Unskilled(x)) -> Okay(x))", "all x.((BadPlayers(x) & IncompetitiveSportsTeam(x) & Unworked(x)) -> OK(x))", "all x.((BadPlayers(x) & Unskilled(x)) -> OK(x))", "all x.((BadPlayers(x) & Unskilled(x)) -> OK(x))", "all x y z.((BadPlayer(x) & -Skilled(y) & CompetitiveSportsTeam(z) & RemovedFrom(x,z)) -> Okay(x))", "all x.((BadPlayers(x) & Unskilled(x)) -> Okay(x))", "all x.((BadPlayers(x) & Unskilled(x)) -> Okay(x))", "all x.((BadPlayers(x) & Unskilled(x)) -> Okay(x))", "all x y.((BadPlayers(x) & CompetitiveSportsTeam(y) & Unskilled(x)) -> OK(x))", "all x.((MoveBadPlayers(x) & Unskilled(x)) -> Okay(x))", "all x y z.((ChallengingSportsTeam(x) & BadPlayers(y) & Unskilled(z)) -> OK(x))", "all x y.((BadPlayer(x) & CompetitiveSportsTeam(y) & Unskilled(x)) -> Okay(x,y))", "all x.((BadPlayers(x) & Unskilled(x)) -> OK(x))", "all x y.((BadPlayer(x) & CompetitiveSportsTeam(y) & Unskilled(x,y)) -> OK(x))", "all x.((BadPlayers(x) & -Skilled(x)) -> OK(x))"]}
{"id": "enwn_validation_616", "nl": "A player performing poorly in a single game is not conclusive evidence that they are unskilled.", "fol": "", "prediction": ["all x.((Player(x) & PerformsPoorly(x) & SingleGame(x)) -> -ConclusiveEvidence(x))", "all x.((Player(x) & PerformsPoorlyInSingleGame(x)) -> -DefinitiveEvidenceNotUnskilled(x))", "all x.((Player(x) & PerformsPoorlyInSingleGame(x)) -> -CognitiveEvidenceUnskilled(x))", "all x.(PoorPerformance(x) -> -Unskilled(x))", "all x.((Player(x) & PerformsPoorly(x) & SingleGame(x)) -> -UnskilledEvidence(x))", "all x.((Player(x) & PerformancesPoorlyInSingleGame(x)) -> -UnskilledInSingleGame(x))", "all x y.((Player(x) & SingleGame(y) & PerformsPoorly(x,y)) -> -Unskilled(x))", "all x.((Player(x) & PerformancePoorInSingleGame(x)) -> -NeccessiveEvidence(x))", "all x.((Player(x) & PerformsPoorInSingleGame(x)) -> -ConclusiveEvidence(x))", "all x.((Player(x) & PerformsPoorly(x) & SingleGame(x)) -> -ConclusiveEvidence(x))", "all x.((Player(x) & PerformsPoorlyInSingleGame(x)) -> -ConclusiveEvidence(x))", "all x.((Player(x) & PerformsPoorlyInSingleGame(x)) -> -CruizableEvidence(x))", "all x.((Player(x) & PerformsPoorlyInSingleGame(x)) -> -ConclusiveEvidenceStillUnskilled(x))", "all x.((Player(x) & PerformsPoorly(x) & SingleGame(x)) -> -ConclusiveEvidence(x))", "all x.(DeepInSingleGame(x) -> -SuccessfulEvidence(x))", "all x.((Player(x) & PerformsPoorlyInSingleGame(x)) -> -Wired(x))"]}
{"id": "enwn_validation_617", "nl": "The other players on Cindy's soccer team voted to kick her off the team because she let three goals through in a playoff game.", "fol": "", "prediction": ["all x y z.((Player(x) & SoccerTeam(y) & Cindy(z)) -> (VotedToKickChindyOff(x,y) & LetGoalsThrough(y,z)))", "all x y.((Player(x) & PlayingSoccerTeam(y) & Cindy(x)) -> (votedToKick(x,y) & LetsThreeGoals(x)))", "all x.((Player(x) & OnCindySoccerTeam(x)) -> VotedToKickSheOffOfTeam(x))", "all x y z.((Player(x) & SoccerTournament(y) & Cindy(z)) -> (CarvedOffTournament(x,z) & LetGoalsThroughPlayoffGame(x,y,z)))", "all x y.((Player(x) & SoccerTeam(y) & Cindy(x,y)) -> VotedToKickOff(x,y))", "all x y.((Player(x) & Player(y) & OnCindySoccerTeam(x,y)) -> votedToKickOf(x,y))", "all x.((Player(x) & PlayingCindysSoccerTeamTeam(x) & LetsGoalsThrough(x,3)) -> KicksOut(x))", "all x y z.((Player(x) & PlayingCindySoccerTeam(y) & PlayingCindySolvedSoccerGame(z)) -> VotedToKickCindyOffTeam(x,y,z))", "all x y.((Player(x) & Player(y) & Cindy(x)) -> (KicksOffSoccerTeam(x,y) & LetsThreeGoals(x) & PlayoffGame(y)))", "all x y.((Player(x) & PlayingCindy(y) & SoccerTeam(z) & LetsGoalsThrough(x,z)) -> KicksOff(x,z))", "all x y.((Player(x) & SoccerTeam(y) & Cindy(x) & Poll-SpoilerGame(x,y)) -> AvowsKickOff(x,y))", "all x y.((Player(x) & SoccerTeam(y) & PlayoffGame(y)) -> kickedOffCindy(x,y))", "all x y.((Player(x) & Player(y) & SoccerTeam(x) & Cindy(y) & Let(z) & GoalsThroughPalodiumGame(w)) -> VotedToKick(x,y,z))", "all x y.((Player(x) & PlaysCindysSoccerTeam(x)) -> KickedOffTeam(x,y))", "all x y.((Playress(x) & Player(y) & OnSoccerTeam(x,y)) -> VotedToKickOff(y,x))", "all x y.((Player(x) & SoccerTeam(y) & Cindy(x)) -> (LetsThreeGoalsPlay(x,y) & PlayoffGame(x,y)))"]}
{"id": "enwn_validation_618", "nl": "A goalie's performance is reflected by the number of goals they let through.", "fol": "", "prediction": ["all x.(Goalie(x) -> NumberOfGoals(x))", "all x.((Goalie(x) & NumberOfGoals(x)) -> PerformanceReflects(x,y))", "all x y.((Goalie(x) & Goal(y)) -> ReflectsPerformance(x,y))", "all x.(Goalie(x) -> LetsThrough(x,y))", "all x.(Groundie(x) -> NumberOfGoals(x))", "all x.((Goalie(x) & NumberOfGoals(x)) -> ReflectedPerformance(x))", "all x.((Goalie(x) & NumberOfGoals(x)) -> ReflectsPerformance(x))", "all x.((Goalie(x) & NumberOfGoals(x)) -> ReflectsPerformance(x))", "all x y.((Goalie(x) & NumberOfGoals(y)) -> ReflectsPerformance(x))", "all x.((Goalie(x) & NumberOfGoals(x)) -> ReflectedPerformance(x))", "all x.(GoalIef(x) -> LetsThroughGoals(x))", "all x.(Goalie(x) -> PerformanceReflectedByGoalNumber(x))", "all x.(Goalie(x) -> LetsThrough(x,Goal_Number))", "all x y.((Goalie(x) & NumberOfGoals(y)) -> ReflectedPerformance(x,y))", "all x.(Goalite(x) -> PerformanceReflectedByGoals(x))", "all x.((Goalie(x) & NumberOfGoals(x)) -> ReflectedPerformance(x))"]}
{"id": "enwn_validation_619", "nl": "Cindy is a goalie.", "fol": "", "prediction": ["All x.(Cindy(x) -> Goalie(x))", "all x.(Cindy(x) -> Goalie(x))", "(Goalie(Cynthia))", "all x.(Cindy(x) -> Goalie(x))", "all x.((Cinema(x) & Goalie(x)) -> Goalie(x))", "all x.(Cindy(x) -> Goalie(x))", "All x.(Cindy(x) -> Goalie(x))", "is Goalie(Cindy)", "all x.(Goalie(x) -> Cindy(x))", "all x.(Goalie(x) -> Cindy(x))", "exists x.(Goalie(x) & Cindy(x))", "all x.(Cindy(x) -> Goalie(x))", "(Goalie(Cindy) -> Goalie(Cindy))", "all x.((Cindy(x) & Goalie(x)) -> Can(x))", "all x.(Goalie(x) -> Cindy(x))", "all x.(Goalie(x) -> Cindy(x))"]}
{"id": "enwn_validation_620", "nl": "A player's performance in one game isn't enough of a reason to remove them from a team.", "fol": "", "prediction": ["all x.((Player(x) & PerformanceInOneGame(x)) -> -RightToRemoveFromTeam(x))", "all x.((Player(x) & PerformancePosition(x,y)) -> -EnoughToRemoveFromTeam(y))", "all x.((Player(x) & PerformanceInOneGame(x)) -> -AnEnoughToRemove(x,team))", "all x.((Player(x) & PerformanceInOneGame(x)) -> -SufferingAnotherRightToRemove(x,Team))", "all x.((Player(x) & PerformanceInOneGame(x)) -> -EnoughRightToRemoveFromTeam(x))", "all x y z.((Player(x) & PerformanceInGame(x,y) & Team(z)) -> -MustRemove(x,y,z))", "all x y.((Player(x) & PerformanceInOneGame(x,y)) -> -ExclusiveCommission(y,y))", "all x y.((Player(x) & Team(y)) -> (Performance(x,y) & -SufferingRight(x,y)))", "all x y.((Player(x) & Game(y) & PerformanceInOneGame(x,y)) -> -EnoughAreaToRemove(x,y))", "all x y z.((Player(x) & Game(y) & Team(z)) -> PerformanceInOne(x,y))", "all x y.((Player(x) & Game(y) & PerformanceIn(x,y)) -> -SufficientRightToRemove(x,y))", "all x.((Player(x) & PerformanceInOneGame(x)) -> -AblevantFromTeam(x))", "all x y z.((Player(x) & Game(y) & Team(z) & PerformanceIn(x,y)) -> -(SufferingRightToRemoveFrom(x,z))))", "all x y.((Player(x) & Game(y) & PerformsIn(x,y)) -> -SensitiveRightToRemove(x,y))", "all x.((Player(x) & PerformanceInOneGame(x)) -> -HasSinceByTeam(x))", "all x y.((Player(x) & Team(y) & PerformanceInGame(x,y)) -> -EnoughForTeamRemoval(x,y))"]}
{"id": "enwn_validation_621", "nl": "The number of goals Cindy let through is a reflection of her performance.", "fol": "", "prediction": ["all x.((MinimumGoalsChicagoLeathedThrough(x)) -> ReflectsPerformance(x))", "all x y.((Goals(x) & Cindy(y)) -> ReflectsPerformance(y,x))", "all x.((Goals(x) & Cindy(x)) -> ReflectsPerformance(x))", "all x.((TotalGoals(x) & Cindy(x)) -> ReflectsPerformance(x))", "all x y z.((Goal(x,y) & Cindy(z) & Letthrough(y,z)) -> ReflectsPerformance(z))", "everything you want to know about Cindy.", "all x.((Goal(x) & LetThrough(x)) -> ReflectsPerformance(x))", "all x.((Goals(x) & Cindy(x)) -> ReflectsPerformance(x))", "all x.((Goals(x) & Cindy) & LetThroughAsPerformance(x)) -> ReflectsPerformance(x))", "all x.((Givers(x,y) & Cindy(y)) -> ReflectsPerformance(y))", "all x.((Goal(x) & LetsThrough(x)) -> ReflectsPerformance(x))", "all x.((Goals(x) & LetThrough(x)) -> ReflectionsPerformance(x))", "all x y.((GOALS(x) & Goals(y) & LetThroughCindy(x,y)) -> ReflectionOfPerformance(y))", "all x.(Goals(x) -> ReflectsPerformance(x))", "all x.((Goals(x) & CindyLeapsThrough(x)) -> ReflectiveOfPerformance(x))", "all x.((Guards(x) & CindyLeatsThrough(x)) -> ReflectsPerformance(x))"]}
{"id": "enwn_validation_622", "nl": "The other players kicked Cindy off of the team based on her performance in a single game.", "fol": "", "prediction": ["(Downplay(CFy) & PlayingSingleGame(CFy))", "all x y.((Player(x) & Player(y)) -> (KicksCindy(x,y) & BasedOnPerformance(x,y)))", "all x.((Player(x) & PlaysDivision(x)) -> KicksCynthiaOffTeam(x))", "all x y.((Player(x) & Player(y)) -> KickedCindyOffTeam(x))", "all x y.((Player(x) & Player(y)) -> KickdCindyOffTeam(x,y))", "all x.((Player(x) & CindyOfTeam(x)) -> KickedOff(x,Cindy))", "all x y z.((Player(x) & Cindy(y) & Team(z)) -> KickedOff(y,z,x))", "all x y z.((Player(x) & Coach(y) & Cindy(z) & InSingleGame(y,z)) -> KickedOffTeam(x,z))", "all x y z.((Player(x) & Player(y) & Cindy(z) & SingleGame(z)) -> KickedOffTeam(x,z))", "all x.((Player(x) & PlaysCinema(x) & SingleGame(x)) -> KickedOff(x))", "all x y.((Player(x) & Player(y)) -> KickedCindyOffByPerformance(x,y))", "all x.((Player(x) & Cindy(y) & SingleGamePerformance(x,y)) -> KickedAoff(y,x))", "all x y.((Player(x) & Player(y)) -> (KicksCindyOffTeam(x,y) & BasedOnPerformance(x,y)))", "all x y.((Player(x) & Player(y) & Cindy(x)) -> CaughtOffTeamBasedOnPerformance(x,y))", "all x y.((Cindy(x) & Player(y) & PlaysSingleGame(x)) -> KickedOffTeam(x,y))", "all x y z.((Player(x) & Team(y) & Cindy(z)) -> KickedOfDueToPerformance(x,z))"]}
{"id": "enwn_validation_623", "nl": "The other players shouldn't have kicked Cindy off the team.", "fol": "", "prediction": ["(all x.(Player(x) -> -KickedCindyOffTeam(x)))", "all x.((Player(x) & Cindy(x)) -> -kicked(x,y))", "all x.((Player(x) & Cindy(y)) -> -KickedOffTeam(x,y))", "all x y.((Player(x) & Cindy(y)) -> -KickedOffTeam(x,y))", "all x.((Player(x) & -ShouldCindy(x)) -> PlaysOnTeam(x).)", "all x.((Player(x) & Cindy(y)) -> -KickedOffTeam(x,y))", "all x.((Player(x) & Didn'tKickCindyOffTeam(x)) -> -CindyKickedOffTeam(x))", "all x y.(MotherPlayer(x) -> Shouldn'tKickedCindyOffTeam(x,y))", "(NeighborsCindy(Cindy,team) -> -Caught(Cindy)).", "all x.((Cindy(x) & -Cindy(x)) -> CoulledOffTeam(x))", "(all x.(Player(x) -> CluckedCindy(x)))", "all x.((Player(x) & -KickedCindy(x)) -> -KickedCindy(x))", "all x.((Player(x) & -KickedCindy(x)) -> -ShouldConscious(x))", "all x y.((Player(x) & Cindy(y)) -> -CritikedOffTeam(x,y))", "all x y.((Player(x) & Player(y)) -> -CindyKickedOffTeam(x,y))", "all x.(Kicked(x) -> -Connie(x))"]}
{"id": "enwn_validation_624", "nl": "You should not discriminate against people on the basis of sexuality.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y)) -> -(Discriminate(x,y) & Sexuality(x)))", "all x.((Person(x) & -DiscriminateOnSexuality(x)) -> There's no Discrimination(x))", "all x.(Discriminate(x) -> -exists y.(Problem(y) & Person(x) & exists z.(Sexuality(z) & Discriminate(x,z))))", "all x y.((Person(x) & Person(y) & Form(x,y)) -> -DiscriminatesCauseOfSexuality(x,y))", "all x.((Person(x) & -DiscriminationThe basisOfSexuality(x)) -> -DiscriminationOnFacility(x))", "all x.(DiscriminateOnSexuality(x) -> -exists y.(Person(y) & DiscriminatesOnSexuality(x,y)))", "all x.((Person(x) & -DiscriminateOnBaseOfSexuality(x)) -> -DiscriminationOnBaseOfSexuality(x))", "all x.(Discrimination(x) & -SubjectToSexuality(x))", "all x.(DiscriminateOnSexuality(x) -> -exists y.(Person(y) & Person(y) & DiscriminatesOnSexuality(x,y)))", "all x.(DoesPorn(x) -> -Problems(x,Sexuality))", "all x.(Discrimination(x) -> -OnBaseOfSexuality(x))", "all x.((Person(x) & -DiscriminateOnSexuality(x)) -> -DiscriminateOnSexuality(x))", "all x.((People(x) & -OfferedMajority(x)) -> -DiscriminateAgainst(x,sexuality))", "all x y.((DiscriminateAgainst(x,y) & Person(y)) -> -(DiscriminateOnSexuality(x,y) | DiscriminateOnSexuality(x,y)))", "all x.((Person(x) & -DiscriminatesOnBaseOfSexuality(x)) -> -(DiscriminateOnSexuality(x) & DiscriminateOnBasicOfSexuality(x)))", "all x.((People(x) & -DiscriminateOnBaseOfSexuality(x)) -> -(DiscriminatedOnBaseOfSexuality(x) | DiscriminatedAgainst(x))))"]}
{"id": "enwn_validation_625", "nl": "Doing detrimental things to someone because of their identity is discrimination.", "fol": "", "prediction": ["all x.((DoingDefeiringThings(x) & IdentityDefinite(x)) -> Discrimination(x))", "all x.((DoingDeteriorableThings(x) & Person(x) & IdentityCause(x)) -> Discrimination(x))", "all x y.((DoesDiscrimination(x) & Person(y) & Identity(y)) -> Discrimination(x,y))", "all x.(DoesDeafBody(x) -> Discrimination(x))", "all x.((Damage(x) & DetrimentalThings(x)) -> Discrimination(x))", "all x.((DoesDestructiveThingsToPerson(x) & BecauseOfIdentity(x)) -> Discrimination(x))", "all x.((DoingDetratingThings(x) & InvolvesIdentity(x)) -> Discrimination(x))", "all x.((DoDefeiblingThings(x) & IdentityDeficiency(x)) -> Discrimination(x))", "all x y.((Person(x) & Person(y) & DoseDegradingThings(x,y)) -> Discrimination(x,y))", "all x.((DoingDeviantThan(x,y) & Person(y) & BecauseOfIdentity(y,x)) -> Discrimination(x))", "all x y.((DoingDeepThan(x,y) & Person(y) & DueToIdentity(x,y)) -> Discrimination(x))", "all x y.((DoingDeepThings(x) & Person(y) & ObstructiveName(x,y)) -> Discrimination(x))", "all x.(DoingDesirableThings(x) -> Discrimination(x))", "all x.((DoingHazardousThan(x) & SomeoneEmotionalForIdentity(x)) -> Discrimination(x))", "all x.((DoingDefeitiveThingsBecauseOfIdentity(x) & Person(x)) -> Discrimination(x))", "all x y.((DoesDeafThing(x) & Person(y) & DestroyingIdentity(x,y)) -> Discrimination(x))"]}
{"id": "enwn_validation_626", "nl": "Removing someone from your will is detrimental to them.", "fol": "", "prediction": ["all x y.((Slovak(x) & RemovedFromWill(y)) -> DetrimentalTo(x,y))", "all x y.((NoName(x) & Will(y)) -> DelauntingTo(x,y))", "all x.(RemoveRightElbow(x) -> DetrimentalToOne(x))", "all x y.((Person(x,y) & Will(y)) -> WorseTo(x,y))", "all x y.((Removes(x,y) & Person(y)) -> DefendantToYou(x,y))", "all x y.((Wear(x) & Will(y) & Removes(x,y)) -> DetrimentalTo(x,y))", "all x.(RemovesPerson(x) -> DetrimentalTo(x,Person))", "all x.(Remove(x,a) -> DetrimentousTo(x,y))", "all x y.((Loan(x) & Will(y)) -> (Deep(x,y) & Does(x,y)))", "all x.(Removes(x,y) -> DestroyingToHasLimit(x))", "all x y.((Will(x) & Person(y)) -> DetrimentalTo(x,y))", "all x.(RemoveFromWill(x) -> DetrimentalToPerson(x))", "all x y.((Person(x) & Will(y)) -> DetrimentalRemoval(x,y))", "all x.((Removes(x,y) & Person(x)) -> DefensiveTo(y))", "all x.(RemovingCandidate(x) -> DefensiveTo(x,y))", "all x.(Removes(x,y) -> DelayedTo(y,x))"]}
{"id": "enwn_validation_627", "nl": "Martin's father removed Martin from his will because Martin came out as gay.", "fol": "", "prediction": ["all x y.((Martin(x) & Father(y)) -> RemovedFromWill(x,y))", "all x.((Martin(x) & FatherWithheld(x,Martin)) -> ComesOutAsGay(x))", "all x y.((Martin(x) & Father(y) & CameOutToGay(x,y)) -> RemovedFromWill(x,y))", "all x y.((Martin(x) & Father(y) & CameOutAsGay(z)) -> RemovedFromWill(x,y,z))", "all x y.((Martin(x) & Father(y)) -> RemovedMartinFromWill(x,y))", "all x y.((Martin(x) & Father(y)) -> RemovedFromWill(y,x))", "all x y.((MartinPaternal(x) & MartinBab(y)) -> RemovedFromWill(x,y))", "All x y.((Martin(x) & Father(y)) -> RemovedFromWill(x,y))", "all x y z.((Martin(x) & Father(y) & Martin(z)) -> (RemovedFromWill(y,z) & ComesOutAsGay(z)))", "all x.((MartinsFather(x) & MartinsSoul(x) & HecameOutAsGay(x)) -> RemovedFromWill(x,Martin))", "all x y.((Martin(x) & Father(y)) -> RemovedFromWill(x,y))", "(Martin'sfatherRemovedFromWill(Martin,Egyptian) & Martin CameOutAsGay(Martin,Egyptian))", "all x y.((Martin(x) & Father(y)) -> RemovedFromWill(y,x))", "all x y.((Martin(x) & Father(y)) -> RemovedMartinFromWill(x,y))", "is a family owned by Martin\u2019s father. Martin came out as gay.", "all x y.((MartinsFather(x) & MartinsWord(y)) -> CameOutAsGay(x,y))"]}
{"id": "enwn_validation_628", "nl": "You should not do something detrimental to someone because of their sexuality.", "fol": "", "prediction": ["all x.((Executive(x) & Sexuality(x)) -> -Disadvantageous(x))", "all x.((YouBelong(x) & NotDefeivingForSexuality(x)) -> -DoDefeitfulForSexuality(x))", "all x y.((Agency(x) & Detrimental(y) & Sexuality(x)) -> -DueTo(x,y))", "all x y.(((SexualBehavior(x) & Patient(y)) -> -DamageAndDamage(x,y))", "all x.((Person(x) & Sexuality(x)) -> -Discriminating(x,y))", "all x y.((Person(x) & Sexuality(y)) -> -Discriminatory(x,y))", "all x y.((SexualHope(x) & Person(y)) -> -Devourable(x,y))", "all x.((About(x,sexuality)) -> -HasSexuality(x))", "all x y.((DoPromise(x) & Sexuality(y)) -> -Destroys(x,y))", "all x.((Human(x) & Sexuality(y)) -> -Defeitful(x,y))", "all x.((TreatmentDetrimental(x) & Sexuality(y)) -> -Daily(x,y))", "all x y.((Sexuality(x) & Person(y)) -> -DeafEnough(x,y))", "all x y.((Person(x) & Sexuality(y) & -DeniableDueTo(x,y)) -> -DisruptiveDueTo(x,y))", "all x y.(((Sexuality(x) & Person(y)) -> -Defeit(x,y))", "all x y.((Person(x) & Sexuality(y)) -> -Disaffective(x,y))", "(-(Damage(Aunt & Sexuality(Aunt) & DepravedDueTo(Aunt,Ant) & Sexuality(Alter)))"]}
{"id": "enwn_validation_629", "nl": "You should not remove someone from your will because of their sexuality.", "fol": "", "prediction": ["all x y.((Sexuality(x) & Person(y)) -> -RemoveSexuality(x,y))", "all x y.((Involves(x,y) & Person(x) & Sexuality(y)) -> -RemovesFromWillFromWill(x,y))", "you should not remove someone from your will because of sexuality.", "all x.((Sexual(x) & -Removes(x,sexual)) -> -Removes(x,sexual))", "all x.((Person(x) & -Remove(x)) -> Sexuality(x))", "all x.((Sexuality(x) & Person(x)) -> -Remove(x,y))", "all x.((Sexuality(x) & -Remove(x)) -> -Remove(x))", "all x.((Person(x) & -Removes(x,Sexuality)) -> -(Sexuality(x,Sexuality) & Discrimination(x))))", "all x.((Person(x) & RemovedFromWill(x) & Sexuality(x)) -> -(Remove(x,y) & Remove(y,y)))", "all x y.((Sexuality(x) & Person(y)) -> -RemovesAtWill(x,y))", "all x.((People(x) & Sexuality(y)) -> -RemoveFromWill(x,y))", "all x.(((Product(x) & Sexuality(x)) -> -Demarcates(x,y))", "all x y.((Person(x) & Will(y) & Sexuality(z)) -> -RemovesFrom(x,y))", "all x y.((Product(x) & Sexuality(y)) -> -Removes(x,y))", "all x.((Rescue(x) & Sexuality(x)) -> -Remove(x,y))", "all x.((Person(x) & -Sexuality(x)) -> RemovesFromWill(x))"]}
{"id": "enwn_validation_630", "nl": "Martin's father should not have removed Martin from his will.", "fol": "", "prediction": ["Martin's Father should not have removed from will.", "((Martinsfather(Martin) & -RemovedFromBook(Martin)) -> ParentalDeprivation(Martin))", "all x y.((Martin(x) & Father(y) & -MattRemoved(y,Martin,x)) -> Don'tRemoveFromWill(y,Martin,y))", "Martin's father should nothave removed Martin's will.", "Martin's father should not have removed from his will.", "all x.(Martin(x) -> FatherAboveSaving(x,Martin))", "all x.((Daughter(x) & Martin(x)) -> -RemovedFromWill(x,Martin))", "defiledAndRemoved(Martin,Vater,Vater,Name) -> Father(Martin,Vater))", "(Answer fromBatman(Martin'sFather))", "the Will(Martin,father) & -shouldRemoveDaughterFromWill(Martin,father))", "Martin's Father should not have removed from his will.", "Martin's father should not have removed Martin from his will.", "Martinsfather should not have removed MartinsFromWill.", "Martin's father should not have removed Martin from his will.", "Martinsfather(Mattin) -RemovedFromWill(Martin,Mattin))", "all x.((Baton(x) & Martin'sDaddy(x)) -> -RemovedFromWill(x,Martin))"]}
{"id": "enwn_validation_631", "nl": "Elaine slapped her brother because he ate the last two pudding cups.", "fol": "", "prediction": ["all x y.((Elaine(x) & Brother(y) & AppearsPuddingCups(x,y)) -> Slapped(x,y))", "all x y z.((Elaine(x) & Brother(y) & PuddingCup(z)) -> Slapped(x,y,z))", "Eileen slappedFraternate(e) & FoodedPupcakes(e) & CookedPupcakes(e,e,s))", "Elaine slapped(email.ep.(Bird(e) & EatsPuddingCups(e))", "all x y.((Elaine(x) & Brother(y) & CookedPuddingCups(y,2)) -> Slapped(x,y))", "(SlappedBrother(Elaine) & HadPuddingCups(Elaine,2))", "Elaine slapped her brother because he ate the last two pudding cups.", "Elaine slapped her brother because he had eaten the last two pudding cups.", "Elaine slapped-a-boss-mister-for-ate-pudding-cups(elaine,foot)", "Elaine slapped her brother & ateThePuddingCups(Elaine,2).", "Elaine slapped brother because he ate the last two pudding cups.", "Elaine slapped her brother because he ate the last two pudding cups.", "all x y.((Elaine(x) & Brother(y) & ) -> Slapped(x,y))", "(StaysEllene(LastCheek(Elaine,2) & BrotherSlapped(Elaine,4))", "all x y.((Elaine(x) & Brother(y) & EatsPupcake(x,y)) -> Slapped(x,y))", "- Elaine's brother ate pudding cups 2 & -1(Elaine-Brewers)"]}
{"id": "enwn_validation_632", "nl": "Elaine felt she deserved one of the last two pudding cups.", "fol": "", "prediction": ["(LoseOfPuddingCups(Elaine))", "Elaine felt she deserved one of the last two puddingcups.", "((Elaine(Elaine) & PuddingCup(Elaine)) -> BoughtOne(Elaine,pupcakes))", "all x.((Elaine(x) & PeacockCup(x)) -> Won(x,2))", "Elaine felt she deserved one of the last two pudding cups.", "Elaine felt she deservedllbopper(Elaine,one)", "(ShouldneedPuddingCup(Elaine) -> -MeantPuddingCup(Elaine,3))", "(DebenestedPuddingCup(Elaine) | FeltMadePuddingCup(Elaine)))", "all x y.((Elaine(x) & PuddingCup(y)) -> (deserved(x,y) & Won(x,y)))", "Elaine felt she deserved one of the last two pudding cup(Elaine,6).", "Elaine felt she deserved one of the last two pudding cups.", "all x.(ElaineFeltBeloved(x) -> IsPuddingCup(x))", "Elaine felt she deserved was lasttwoPuppenCups.", "((Elaine(Elaine) & PuddingCup(Elaine)) -> Worried(Elaine))", "all x y.((Elaine(x) & PuddingCup(y)) -> Sought(x,y))", "Elaine felt that she deserved one of the last two PuddingCups."]}
{"id": "enwn_validation_633", "nl": "It's petty to retaliate when someone wrongs you in a minor way.", "fol": "", "prediction": ["all x.((Petty(x) & Pedalous(x)) -> PersonInMinorMode(x))", "all x.((Petty(x) & PersonOfMinorMoment(x)) -> Retaliate(x))", "all x.((PettyToRetaliate(x) & PersonOpposesMinimal(x)) -> Retaliates(x))", "all x y.((PettyRetaliation(x) & Person(y) & IsMinorInMajorWay(x,y)) -> Retaliate(x))", "all x.((Petty(x) & PersonWorstInMinimalBehavior(x)) -> Retaliate(x))", "all x y z.((Petty(x) & Person(y) & WorsenInMinorMander(z) & Persecutes(x,y)) -> Retaliates(x,y,z))", "all x.((Petty(x) & SomeoneWornMinorly(x)) -> Retaliate(x))", "all x.((Petty(x) & IsMinorManifest(x)) -> Retaliates(x))", "all x.((PettyToRetaliate(x) & MinorWay(x)) -> Bad(x))", "all x.((Petty(x) & PersonMammal(x)) -> RetaliatesInMinorManner(x))", "all x.((RapidYou(x) & PersonUsesMinorMath(x)) -> Reprieve(x))", "all x y.((Petty(x) & Person(y) & LeftInMinorManner(y)) -> Repels(x,y))", "all x y.((PettyRetrogression(x,y) & Person(y)) -> CorrectsMinorWay(x,y))", "all x.((Retaliate(x,y) & MinorBath(y)) -> Petty(x))", "all x.((Petty(x) & Person(x) & CorrectsMinorMistake(x)) -> Retaliate(x))", "all x.((Petty(x) & PersonWrongsInMinorKind(x)) -> Retaliate(x))"]}
{"id": "enwn_validation_634", "nl": "Taking someone's snacks is wrong, but it doesn't harm them significantly.", "fol": "", "prediction": ["all x y.((Snack(x) & Swing(y)) -> (IsWrong(x) & -HarmsSignificantly(x)))", "all x.(TakesPersonsSnacks(x) -> (Wrong(x) & -Damage(x)))", "all x y.((Snack(x) & Person(y)) -> (Wrong(x,y) & -Harms(x,y)))", "all x y.((Snack(x) & Snack(y)) -> (Wrong(x,y) & -Hazards(x,y)))", "all x.(TakingSnacks(x) -> (Wrong(x) & -DamagesSensitivities(x)))", "all x y.((Person(x) & Snack(y)) -> (Wrong(x) & -Harms(x,y)))", "all x.((Snack(x) & TakenFast(x)) -> (Wrong(x) & -HazardsSignificantly(x)))", "all x y.((Snack(y) & Person(z)) -> (IsWrong(x,y) & -HazardsSignificantly(y)))", "all x y.((Snack(x) & Person(y)) -> (NotWrong(x) & -HasSignificantHarm(y)))", "all x y.((Snack(x) & Person(y)) -> (Wrong(x) & -DamagesSensors(x)))", "all x y.((Snack(x) & Person(y) & Taken(x,y)) -> (Wrong(x) & -Harms(y,x)))", "all x.((TakesSnacks(x) & Person(x)) -> (Neat(x) & -HazardsSignificantly(x)))", "all x y.((Snacks(x) & Person(y)) -> (Wrong(x) & -HarmsPerson(y)))", "all x y.((Person(x) & SnackTaker(y)) -> (IsWrong(x) & -HarmsSignificantly(y)))", "all x y.((Snack(x) & (Person(y) | Person(y)) & Takes(x,y)) -> (IsWrong(x) & -HazardsMinorally(x)))", "all x.(TakesSnacks(x) -> (Wrong(x) & -HasHazard(x)))"]}
{"id": "enwn_validation_635", "nl": "You shouldn't hurt people for petty reasons.", "fol": "", "prediction": ["all x y.((Petty(x) & Person(y)) -> -HasPetty(y))", "all x.((PettyPurpose(x) & -HasPettyPurpose(x)) -> -HasPettyPurpose(x))", "all x y.((Petty(x) & Person(y)) -> -Ihres(x,y))", "all x.((PettyPoor(x) & -Hire(x,Participants)) -> -Harm(x,Participants))", "all x y.((PettyMatter(x) & Person(y)) -> -HasToleration(x,y))", "all x.((Hunger(x) & PettyAreas(x)) -> -Injure(x,y))", "all x.((PettyGrant(x) & -PettyGrant(x)) -> HelpsPeople(x))", "all x.((PettyPoorFunctions(x) & HurtPeople(x)) -> -HasPettyMeasures(x))", "all x.((PettyArea(x) & -PettyArea(x)) -> PeopleShrink(x))", "all x y.((PettyMad(x) & Person(y)) -> -Illegally(x,y))", "all x.((LetPetty(x) -> -Persevere(x))", "all x.((PettyRights(x) & DoesNecessarilyHitPeople(x)) -> -(HasPettyRights(x) & InvolvesPettyRights(x)))", "all x.((Cause(x) & -Petty(x)) -> IgnorePeople(x))", "all x.((Petty(x) & -Ihicle(x?)) -> -Injures(x))", "all x.((Petty(x) & -HasKid(x,y)) -> -Harms(x,y))", "all x.((PettyMatter(x) & -Hint(x)) -> -Hint(x,PettyMatters))"]}
{"id": "enwn_validation_636", "nl": "Elaine slapped her brother in retaliation for taking her snacks.", "fol": "", "prediction": ["(Eleaine,brother, and retaliation(Elaine,Snacks,ColdCoffee,Snacks))", "Elaine slapped her brother and tookssips(Elaine,Snacks)", "Elaine slappedBrotherInRetaliationForTapping(Elaine,Yet)", "(RetaliationForSnacks) -> ElainesbrotherSlapped(Elaine,Jr.))", "Elaine slappedBrotherInRetaliationForTakingSheSnacks(Elaine,Bird)", "-(Elaine(Elaine) & SlappedBrother(Elaine))", "Elaine slapped(Elaine,Bird,Retaliation)", "Elaine's brother died while sitting at her brother's desk.", "all x.((Elaine(x) & Brother(x) & TakenSnacks(x)) -> Slapped(x))", "Elaine slapped brother for stealing snacks.", "Elaine, a girl with a bad reputation for Snacks, slapped brother in retaliation for takings(Elaine, & FetchItSnacks))", "(asksEllaine(Elaine) & slapsBrother(Elaine) & RetaliatesForSnacks(Elaine))", "Elaine slapped brother in retaliation for taking snacks.", "(-(Elaine(Elaine) & Brother(Elaine)) -> Slapped(Elaine))", "Elaine slappedBrotherInRetaliationForTakingSnacks(Elaine,Brother)", "Elaine slapped brother in retaliation for taking snacks."]}
{"id": "enwn_validation_637", "nl": "It's petty to retaliate against someone for taking your snacks.", "fol": "", "prediction": ["all x.((Retaliate(x) & TakeSnacks(x)) -> Petty(x))", "all x y.((Taxation(x) & Retreason(y)) -> Petty(x))", "all x y.((Petty(x) & Person(y) & TakesSnacks(x,y)) -> Retaliate(x,y))", "(RetaliateAgainst(petty) & TakeSnacks(p))", "all x.((Petty(x) -> Retaliate(x)))", "all x.((RetaliateAgainst(x,y) & TakesSnacks(x)) -> Petty(x))", "all x y.((PettyToRetaliateAgainstParticipants(x,y) & TakeCheese(y)) -> Petty(x,y))", "all x y z.((PettyRetaliation(x) & Infringement(y) & Person(z)) -> TakesSnacks(x,y,z))", "all x.((Retaliate(x) & Someone(x) & TakesSnacks(x)) -> Petty(x))", "all x y.((Petty(x) & Resident(y) & TakesSnacks(x,y)) -> Retaliate(x,y))", "all x.((RetaliatedAgainst(x,takesSnacks)) -> Petty(x))", "all x.((Snack(x) & RetaliationOf(x,share)) -> Petty(x))", "all x.(RetaliatedAgainstPeasants(x) -> Petty(x))", "all x.((RetaliateAgainst(x) & TakeSnacks(x)) -> Petty(x))", "all x.((RetaliateAgainst(x) & TakesSnacks(x)) -> Petty(x))", "-PollyToRetaliateAgainst(\"Person(x,y) & ForTakingSnacks(x))"]}
{"id": "enwn_validation_638", "nl": "Elaine slapped her brother for a petty reason.", "fol": "", "prediction": ["all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyRaison(x,y))", "all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyMeaning(x,y))", "all x y z.((Elaine(x) & Brother(y) & Purpose(z)) -> Slapped(x,y,z))", "Elaine slappedBrother(Elaine,Brother) -PettyRun(Elaine,Brother))", "(SlappedBrother(Elaine) & PettyRun(Elaine,Brother,PettyRight))", "all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyThought(x,y))", "(Petty(Elaine) & SlappedBrother(Elaine))", "(Petty(Elaine) & SlappedBrother(Elaine))", "(SlappedBenjaminForPettyRaison(Elaine)", "Elaine slappedBrotherForPettyRight(Elaine,June,1985)", "all x y.((Elaine(x) & Brother(y)) -> Slammed(x,y))", "Elaine slapsBrotherForPettyRightes.", "all x y z.((Elaine(x) & Brother(y) & PettyRun(z)) -> Slapped(x,y))", "all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyMoment(x,y))", "Elaine slapped Brother(Elaine)", "all x y.((Elaine (x) & Brother(y)) -> Slapped(x,y))"]}
{"id": "enwn_validation_639", "nl": "Elaine should not have slapped her brother.", "fol": "", "prediction": ["Elaine shouldn't have slappedBrother(elaine,e))", "Elaine neafaqluredBrother(n)", "Elaine -SlappedSister(ellen) -FewHours(elen).", "-slappedBrend(Elaine)", "Elaine ad ne'slappedBird(n)", "Elaine shouldn\u2019t have slapped(elaine,b)", "Elaine -SlappedBrother(Elaine)", "Elaine shouldn\u2019t have slappedBrother(e)", "Elaine should not have slappedBrother(Elaine & Brother(Elaine))", "Elaine should not have slapped herBrief.", "Elaine's brother, who is at the helm of the household, should not have slapped.", "Elaine ne should.(SoulSlap(Nurse(Elaine) -> -Elaine,Nurse))", "Elaine should not have slappedBrotherLittle(Elaine)", "Elaine ne trebuiase slapped(Elaine,Brunel)", "all x.(Elaine(x) -> -SlappedBrother(x))", "Elaine ne should have slappedBrother(n)"]}
{"id": "enwn_validation_640", "nl": "You shouldn't insult people for no good reason.", "fol": "", "prediction": ["all x.((IndignatePerson(x) & -GoodRaison(x)) -> -IndignatePerson(x))", "all x.((InflictYou(x) & NoGoodRight(x)) -> -Does(x))", "all x.((People(x) & -GoodMotor(x)) -> -Inflict(x))", "all x.((Young(x) & -GoodRaison(x)) -> -InflamePeople(x))", "all x.((Use(x) & -Intimidate(x,y)) -> -Intimidate(x,y))", "all x.((Young(x) & -InflamePeople(x)) -> -InflamePeople(x))", "all x.((YouDiscard(x) & -GoodRun(x)) -> -IntimidatePeople(x))", "all x y.((User(x) & Person(y) & -GoodRaison(x)) -> -InjuridousFor(x,y))", "all x y.((Inflicts(x,y) & Person(y)) -> -GoodRation(x))", "all x.((Borrow People(x) & -InflictGoodPoorArgument(x)) -> -InflictPeople(x))", "all x.((Indignations(x) & -GoodPretty(x)) -> -Indignies(x))", "all x.((InvitesPeople(x) & -GoodRaison(x)) -> -InflamesPeople(x))", "all x y.((Men(x) & Person(y)) -> -Inflicts(x,y))", "all x.((InterestsPeople(x) & NoGoodMatter(x)) -> -InvolvesMore(x,y))", "all x.((Involves(x) & -WellCredible(x)) -> -Inflicts(x,y))", "all x.((Invites(x,y) & -GoodMoment(y)) -> -Injure(x,y))"]}
{"id": "enwn_validation_641", "nl": "Someone's appearance is not a good reason to insult them.", "fol": "", "prediction": ["all x y.((Person(x) & Appearance(y)) -> -GoodRunDown(x,y))", "all x.(IrresponsibleAppearance(x) -> -GoodRightToInflict(x))", "all x.(SuchAge(x) -> -GunRightToInjure(x))", "all x y.((Person(x) & Appearance(y)) -> -GoodStormToInflict(x,y))", "(-GoodGunMomentToInflict(Me) & ImperfectAppearance(Me))", "all x.((Person(x) & Appearance(x)) -> -GoodRightToIrrupt(x))", "all x.((Person(x) & Appearance(x)) -> -GoodRightToInflict(x))", "all x y.((Person(x) & Appearance(x,y)) -> -GoodRightToInflict(x,y))", "all x y.((Appearance(x,y) & Person(y)) -> -GoodRightToInjure(x,y))", "all x.((Person(x) & Appearance(x)) -> -GoodRightToInvoke(x))", "all x.((Person(x) & Appearance(x)) -> -GoodRaisonToInflict(x))", "all x.((Person(x) & Anapparence(x)) -> -GoodAreaToInflict(x,y))", "all x.((Person(x) & Appearance(x)) -> -GoodRuntoToInflict(x,y))", "all x.((LookingFor(x) & BadRightToInflict(x)) -> -DoesThemInflict(x))", "all x.(Sorry,Person(x) & AppearanceOfFavorite(x))", "all x.((Person(x) & Appearance(x) & -GoodPriorityToInflict(x)) -> -GoodRendenceToInflict(x))"]}
{"id": "enwn_validation_642", "nl": "Calling something dirty is an insult.", "fol": "", "prediction": ["all x.((Diy(x) & Calling(x,y)) -> Insult(x))", "all x.(Dirty(x) -> Affliction(x))", "all x.((Dirty(x) & Calls(x,y)) -> Irresponsible(x))", "all x.(Dynamic(x) -> Irresponsible(x))", "all x.((Purchase(x) & Dilly(x)) -> Inflicted(x))", "all x.(Dirty(x) -> IsOdd(x))", "all x.(Dirty(x) -> Insult(x))", "all x.(Dirt(x) -> Inflicted(x))", "all x.(Dirty(x) -> Insult(x))", "all x.((Dry(x) & Appelled(x)) -> Inflict(x))", "all x.(Diy(x) -> Bad(x))", "all x.((Dish(x) & Calls(x,dish)) -> Insult(x))", "all x.(Dirty(x) -> Insult(x))", "all x.((Diy(x) & Dirty(x)) -> Insult(x))", "all x.((Dynamic(x) & Calls(x,y)) -> Inflict(x))", "all x.((Dragon(x) & Calls(x)) -> Insult(x))"]}
{"id": "enwn_validation_643", "nl": "Dishrags are stereotypically dirty.", "fol": "", "prediction": ["all x y.((Schoolrag(x) & Dishrag(y)) -> StereotypicallyDry(x))", "all x.(Dishrag(x) -> StereotypicallyDirty(x))", "all x.(Dishrag(x) -> StereotypicallyDiy(x))", "all x.(Dishrag(x) -> StylisticDish(x))", "all x.(Dishrag(x) -> StereotypicallyDry(x))", "all x.(Dischrag(x) -> StereotypicallyDirty(x))", "all x.(Dishrag(x) -> StereotypicallyDry(x))", "all x.(Dishrag(x) -> (StereotypicallyDirty(x) | StereotypicallyDirty(x)))", "all x.(Dischrag(x) -> StereotypicallyDiy(x))", "all x.(Dishrag(x) -> StereotypicallyDry(x))", "all x.(Dishrag(x) -> StereotypicallyDirty(x))", "all x.(Dishrag(x) -> StereotypicallyDynamic(x))", "all x.(Dischrag(x) -> StereotypicallyDrinky(x))", "all x.(Dischrag(x) -> StereotypicallyDirty(x))", "all x.(Dishrag(x) -> StereotypicallyDishable(x))", "all x.(Dishrag(x) -> StereotypicallyDynamic(x))"]}
{"id": "enwn_validation_644", "nl": "Comparing things implies that they share properties.", "fol": "", "prediction": ["all x.exists y.(ComparingThings(x) & Properties(y) & Shares(x,y))", "all x.(ComparesThings(x) -> ShareProperties(x))", "all x.(Compares(x) -> SharesProperties(x))", "all x.(ComparingThings(x) -> ShareProperties(x))", "all x.(Compare(x,y) -> ShareProperties(x,z))", "all x.(CompareThings(x) -> InvolvesShareProperties(x))", "all x.(CompareItems(x) -> InvolvesShareProperties(x))", "all x y.((ComparesThings(x) & Property(y)) -> SharesProperties(x,y))", "all x.(ComparingThings(x) -> HasSharedProperties(x))", "all x.(ComparesThings(x) -> ShareProperties(x))", "all x.(ComparingThings(x) -> HasProperties(x,y))", "all x.(ComparesThings(x) -> ShareProperties(x))", "all x.(Compares(x) -> HasProperties(x))", "all x.(CompareTothing(x) -> ShareProperties(x))", "all x y.((Compares(x) & Things(y)) -> ShareProperties(x,y))", "all x y z.((ComparingThings(x) & Property(y) & Property(z)) -> Involves(x,y,z))"]}
{"id": "enwn_validation_645", "nl": "Derek told Cammy that her hair looked like a dishrag.", "fol": "", "prediction": ["the dishrag(Devon, Cammy)", "Derek adamantly told Cammy, \"HerhairLooksMuchlikeDishrag\")", "Derek drewoutmism from Cammy: \"HairLooksAlikeDishrag\"\"", "all x y.((Derek(x) & Cammy(y)) -> HairLookedLikeDishrag(y,x))", "(LadiesHair(Knight) -> LooksAlikeDishrag(Knight))", "all x y z.((De Derek(x) & Cammy(y) & Hair(z)) -> HairLooks(x,z))", "(Derek (AppearedVeryDishrag(DeepCammy))", "all x y.((Derek(x) & Cammy(y)) -> HairLook(x,y))", "all x y z.((Deboree(x) & Cammy(y) & Hair(z)) -> HairLooksMoreForDishrag(x,z))", "Cammy aveoodsHairStyle(DealsPork(Desert,Cammy))", "Cammy told Derek, \u201cMadeHairLookSameHowAsDishrag(cammy)\u201d", "camey (Chammy) & talked about her hair (Dishrag))", "all x y.((Derek(x) & Cammy(y)) -> LookedJustANYGrag(x,y))", "Derek enshrined Cammy's hairstyle as Dishrag(s)", "all x y.((Deboree(x) & Cammy(y) & HasDishrag(y)) -> SaidAndSpoken(z,x))", "all x y.((Desktop(x) & Cammy(y)) -> LooksAlikeDishrag(y,x))"]}
{"id": "enwn_validation_646", "nl": "Someone's hair is part of their appearance.", "fol": "", "prediction": ["all x.(Hair(x) -> PartOfAppearance(x))", "all x y z.((Hair(x) & Person(y) & Appearance(z)) -> PartOf(x,y,z))", "all x.(Hair(x) -> AppearancePartOf(x,y))", "all x.(Hair(x) -> PartOfAppearance(x))", "all x.(Hair(x) -> PartOfAppearance(x))", "all x.(Hair(x) -> PartOfAppearance(x))", "all x.(Hair(x) -> PartOfAppearance(x))", "all x.(Hair(x) -> AppearancePart(x))", "all x.(Human(x) -> PartOfApearance(x))", "all x.(HairPartOfAppearance(x) -> Person(x))", "all x y.((Hair(x) & Person(y)) -> PartOfAppearance(y,x))", "all x.(Human(x) -> PartOfAppearance(x))", "all x.(Hair(x) -> PartOfAppearance(x))", "exists x.(Hair(x) & PartOfAppearance(x))", "all x.(HairPartOfAppearance(x) -> ToPerson(x))", "all x.(Hair(x) -> PartOfAppearance(x))"]}
{"id": "enwn_validation_647", "nl": "Comparing something to a dishrag implies that it's dirty.", "fol": "", "prediction": ["all x.((Dishrag(x) & Dishrag(x)) -> Dirty(x))", "all x y.(Dishrag(x) -> (ComparesAtom(x,y) & Dirty(y)))", "all x y.((Dishrag(x) & Dishrag(y)) -> Dirty(x,y))", "all x y.((Dishrag(x) & Dishrag(y)) -> Dirty(y))", "all x.((LimitsThing(x) & Dishrag(x)) -> Dirty(x))", "all x y.((Dishrag(x) & Dishrag(y)) -> Dirty(x,y))", "all x y.((Dishrag(x) & Dishrag(y)) -> Dirty(x))", "all x y.((Dishrag(x) & Dishrag(y)) -> Dirty(x))", "all x.((TaskShandrag(x) & Dishrag(x)) -> Drirt(x))", "all x y.((DispatchRaw(x) & Dishrag(y)) -> Dirty(x,y))", "all x.((Dishrag(x) & Dishrag(x)) -> Dirty(x))", "all x y.((Dishrag(x) & Dishrag(y)) -> Dirty(x))", "all x y.((Compare(x) & Dishrag(y)) -> Dirty(y))", "all x y.((Dishrag(x) & Dishrag(y)) -> Dirty(x))", "all x.(ComparesAliceToDishrag(x) -> Dirty(x))", "all x.((Dishrag(x) & Similar(x)) -> Dirty(x))"]}
{"id": "enwn_validation_648", "nl": "Derek's comment was implying that Cammy's hair looked dirty.", "fol": "", "prediction": ["Derek's Comment WasIndicatingDirtyHair(DarkHouse)", "Derek's comment was implying that Cammy's hair lookedDirty(ceremony))", "Derek's comment was implying that Cammy's Hair lookedDirty.", "all x y.((Commentary(x) & Commentary(y) & CammysHairLooksDirty(x)) -> Depicts(x,y))", "Derek's comment was implying that Cammy's HairLookedDirty.", "(Remark(Deboree) & InvolvesDirtyHair(Deboree))", "Derek's comment implied that Cammy's hair lookedDirty.", "all x.((Comment(x) & CammyPopsUp(x)) -> InvolvesDirtyHair(x))", "all x y.((Derek(x) & CammysHair(y)) -> -Dishy(y))", "(De Derek's comment implyingDryHair(Dammy) -> CammyHair(Dammy))", "all x y z.((Comment(x) & Derek(y) & Cammy'sHair(z) & Didn'tLookDry(y,z)) -> Impossible(y))", "all x.((Comment(x) & Cammy(x)) -> LooksDirty(x))", "all x y.((Comment(x) & Derek(y)) -> InvolvesDirtyHair(y,x))", "Dereks Kommentar Made ImpossibleToLookDirtyCammysHair(x)", "All x y.((Comment(x) & Cammy(y)) -> Teased(x,y))", "(BerryColor(Chammy,Red) & Cammy(Chammy)))"]}
{"id": "enwn_validation_649", "nl": "Derek's comment was an insult.", "fol": "", "prediction": ["Derek's comment is an insult.", "all x.((Comment(x) & Derek(x)) -> Inflict(x))", "all x.(Comment(x) -> Dissipation(x))", "(Commentator(Devan) & Offense(Devan))", "(Under(Derek) & CommentOfNation(Derek))", "all x.((Derek(x) & CommentAsInfliction(x)) -> Defamatory(x))", "\"Derek's Comment\"", "(Commentary(Derek) -> Tort(Deepa))", "(Meanwhile(Deborah) sCommentOfTarget(Deborah))", "all x.(Comment(x) -> Odd(x))", "Dereks comment was insulted.", "(WasInflicted(Derek))", "\"BattleStar\" -> DereksComment IsOutrage(x)\"", "Derk's Comment WasAnInfliction (And Derek HasRemark(Rivous,r) -> Attempted(R)))", "Derek's comment was an insult.", "all x.((Comment(x) & Derek's(x)) -> Laughter(x))"]}
{"id": "enwn_validation_650", "nl": "Derek's comment was about Cammy's appearance.", "fol": "", "prediction": ["Worst Commentary(Excerpt,Relationship,Mammal)", "Derek's comments were about Cammy's appearance.", "all x.((Comment(x) & CammyAppearance(x)) -> DerekConfession(x,Episode,Elevation))", "was about Cammy's appearance.", "all x y.((Derrod(x) & Cammy(y)) -> CommentAbout(x,y))", "Derek was joking about Cammy's appearance.", "Derek's comment was about Camby's appearance.", "Derek's Comment was about Cammy's appearance.", "(LastComment(Derek) | ThisError(Derek)))", "All x.((Commentary(x) & Derek(x)) -> CammyAppearance(x))", "all x y.((Derek(x) & Cammy(y)) -> CommentOnAvatar(x,y))", "(Comment(Devon,Maria) & Cammy(Cammy))", "(Comment(Derek) & CammyAppearance(Derek))", "All x y.((Erics(x) & CammyApplication(y)) -> CammyApplicationComment(x,y))", "Derek's comment was about Cammy's appearance.", "(Laughs(Deborah) & CammyAngelation(Deborah))"]}
{"id": "enwn_validation_651", "nl": "Derek insulted Cammy's appearance.", "fol": "", "prediction": ["Derek insulted Cammy's appearance.", "(InflictedBreath(Developer,Cammy))", "Derek insulted CammysAppearance( Derek)", "all x y z.((Derek(x) & Cammy(y) & AppearsToBe(z)) -> Infuriated(x,y,z))", "Derek insulted Cammy's Appearance(Derek)", "Derek insulted Cammy's appearance.", "Derek insulted(Dethrone(Dethrone,CAMmy))", "Derek insultsEarlyAppearance(Destroyer)", "Derek insulted Cammy(Derek)", "Derek insulted Cammy'sAppearance(Deeply)", "-MakingAngry((Devon,CCammy))", "all x y.((Developer(x) & Cammy(y)) -> Irrespective(x,y))", "Derek insulted Cammy's appearance.", "Derek insulted Cammy's Appearance.", "Derek insulted CammysAperture(Deborah)", "(InvokesChammyArrival(Desert,CAMY) -> Adverse(Desert,CAMY))"]}
{"id": "enwn_validation_652", "nl": "Derek insulted Cammy for no good reason.", "fol": "", "prediction": ["(all x.((Deboree(x) & Cammy(y)) -> -Accused(x,y))", "(AggravatedBy(Derek) | NoGoodMoment(Derek)))", "all x y.((Devon(x) & Cammy(y)) -> Irresponsible(x,y))", "Derek insultedDannyCammy for no GoodRun.", "all x.((Desire(x) & Cammy(x)) -> -GoodRight(x))", "Derek insulted Cammy -goodRight.", "all x.((Deborah(x) & Cammy(x)) -> Injuridized(x,y))", "(InjectedBy(Devon(Deb) & Cammy(Cammy) & -GoodGuided(Deb))", "all x y.((Depth(x) & Cammy(y)) -> InjuresForNoGoodGrant(x,y))", "-(ConfrontedChammy(Derek) & NoGoodRite(Derek))", "all x y.((Derek(x) & Cammy(y)) -> Against(x,y))", "all x y.((Danny(x) & Cammy(y)) -> Irresponsible(x,y))", "all x y.((Derek(x) & Cammy(y)] -> Insulted(x,y))", "all x y.((Derek(x) & Cammy(y)) -> InfuriatedFor(x,y))", "(SarcastedByCammy(Deborah,Cammy) & -GoodRaison(Deborah,Downtown))", "All x.(Involves(x,Drew,Cammy) -> -Qualified(Derek))"]}
{"id": "enwn_validation_653", "nl": "Derek should not have insulted Cammy.", "fol": "", "prediction": ["this week - Illusions(Despare(Descarce) & Cammy(Cammy))", "IndulgedCammy(Devon)", "-(Individual(Processor) & Cammy(Chammy))", "-DearDeborah(Devon)", "-(Initial[Deborah,Cammy) -> -Initial(Deborah,Cammy))", "no insultedCammy.", "(-Indignized(Derek) & Cammy(Derek))", "all x.((Derek(x) & Cammy(y)) -> -Injures(x,y))", "all x y.((Deborah(x) & Cammy(y)) -> -Iraqu\u00e9d(x,y))", "Derek & Cammy(Cammy): -Blashed(Cammy))", "-HasAngelled(Derek)", "all x.((Desert(x) & Cammy(y)) -> -Injuriated(x,y))", "all x.((Derek(x) & Cammy(x)) -> -HasInjures(x,cammy))", "Derek should not have insulted Cammy.", "all x.((Devan(x) & Cammy(y)) -> -Inflamed(x,y))", "all x y.((Derek(x) & Cammy(y)) -> ShouldNotAccuse(x,y))"]}
{"id": "enwn_validation_654", "nl": "You should be polite.", "fol": "", "prediction": ["all x.(Polite(x) -> PreparationAbout(x))", "all x.(Polite(x) -> AuthenticAdvertisement(x))", "all x.(Polite(x) -> Polite(x))", "all x.(Polite(x) -> (Celebrates(x) & Reads(x)))", "all x.((Polite(x) -> -Polite(x)))", "all x.((Polite(x)) -> MakesYouAffordable(x))", "all x.(WantToBePolite(x) -> NotPolite(x))", "all x.(Polite(x) -> Remains(x))", "all x.((Polite(x) & Polite(x)) -> -Polite(x))", "all x.(Polite(x) -> ShouldBe(x))", "all x.(Polite(x) -> CanBeBuilt(x))", "all x.(Polite(x) -> AdoptLeaf(x))", "all x.((Dad(x) & Polite(x)) -> AlwaysRemains(x))", "all x.(Polite(x) -> TakesMajorName(x))", "all x.((Polite(x) & Polite(x))", "all x.(Polite(x) -> -Polite(x))"]}
{"id": "enwn_validation_655", "nl": "Melanie closed the doors immediately when she saw someone approaching the elevator she was in.", "fol": "", "prediction": ["all x y.(((Executivator(x) & Person(y)) -> ClosedDoorsImmediately(x,y))", "all x y.((Hair(x) & Door(y) & PersonApproaching(x,y)) -> Closed(x))", "all x y.((Melanie(x) & Person(y) & AppearingElevator(z) & Melvin(x)) -> ClosedDoorsImmediately(x,y))", "(All x y.((Melanie(x) & Person(y)) -> AssemblingElevator(x)))", "all x y.((Melanie(x) & Person(y) & ApproachedElevator(x,y)) -> ClosedDoors(x,y))", "all x y.((Melanie(x) & Person(y) & InElevator(x,y)) -> ClosesDoors(x,y))", "all x y.((Decline(x) & SomeoneApproachingElevator(y) & InElevator(x,y)) -> MelanieClosedDoorsOnly(x))", "all x y.((Magn\u00e9me(x) & Person(y)) -> ClosesDoorsImmediately(x))", "all x.((Melanie(x) & SeenAvailing(x,Elevator)) -> ClosingDoors(x))", "all x y z.((Extractor(x) & Person(y) & Elevator(z)) -> Closed(x,y,z))", "all x y.((Melissa(x) & Person(y) & ReachedElevator(x,y)) -> ClosedDoors(x,y))", "all x y z.((RelatedElevator(x) & Person(y) & Elevator(z)) -> Close DoorsImmediately(x,y,Z))", "all x ((SassingAttachable(x) & Elevator(x)) -> CloseDoors(x))", "all x y.((Melanie(x) & PersonAnthropportunity(y) & InElevator(x,y)) -> ClosedDoors(x))", "all x y.((Elevator(x) & Melandra(y) & SeeingAn Approaching(y,x)) -> ClosedDoors(x,y))", "all x y z.((Melanie(x) & Person(y) & Elevator(z) & Apronsited(x,y,z)) -> ClosedDoors(x))"]}
{"id": "enwn_validation_656", "nl": "It's polite to hold the door for people.", "fol": "", "prediction": ["all x y.((Polite(x) & Door(y)) -> HoldsFor(x,y))", "all x y.((Door(x) & Person(y)) -> Polite(x))", "all x.(HoldsDoor(x,people) -> Polite(x))", "all x y.((Door(x) & Person(y)) -> Polite(x,y))", "all x.((Door(x) & HoldsForPeople(x)) -> Polite(x))", "all x.(PoliteToHoldDoor(x) -> InYourDoor(x))", "all x.((Polite(x) & HoldsDoor(x)) -> People(x))", "all x.((Door(x) & Holds(x,People)) -> Polite(x))", "all x.((PoliteToHoldDoor(x)) -> Untouchable(x))", "all x.((HostDoor(x) & People(x)) -> Polite(x))", "all x.((TasksDoor(x) & ForPeople(x)) -> Polite(x))", "all x.(ProneHoldsDoor(x) -> Polite(x))", "all x.(PoliteToHoldDoor(x) -> ForPeople(x))", "all x.((Door(x) & Hold(x,y)) -> Polite(x))", "all x.(PoliteToHoldDoor(x) -> PeopleHandleDoor(x))", "all x.(PoliteToHold(x) -> ForPeople(x))"]}
{"id": "enwn_validation_657", "nl": "It was impolite for Melanie to close the elevator doors.", "fol": "", "prediction": ["all x.((Melanie(x) & ClosesElevatorDoors(x)) -> Impossible(x))", "all x.((Melanie.com) & ClosedElevatorDoors(Melanie)) -> Impolite(Melanie,ElevatorDoors))", "-Melanie ClosedElevatorDoors(Melanie)", "all x.((Melanie(x) & CloseElevatorDoors(x)) -> Impolite(x))", "\"Ipolite\" for Melanie to CloseElevatorDoors(Melanie)", "(ImpoliteForMelissa(Melissa) to CloseElevatorDoors(Melissa))", "all x.((Melissa(x) & CloseElevatorDoors(x)) -> Impostible(x))", "Ignite for Melanie to CloseElevatorDoors.", "all x.((Melissabeth(x) & CloseElevatorDoors(x)) -> Impolite(x,y))", "all x.((Melanie(x) & CloseElevatorDoors(x)) -> Impolite(x))", "all x.((Melanie(x) & ClosesElevatorDowers(x)) -> Impossible(x))", "all x.(Impolite(x) -> MelanieClosedElevatorDoors(x))", "all x y.((Melanie(x) & Elevator(y)) -> ImpoliteToClose(x,y))", "(Impolite(Melanie) -> CloseDrawers(Melanie))", "Was impolite for Melanie to CloseElevatorDoors&(Melissa))", "all x.((Melissa(x) & ClosesElevatorDoors(x)) -> Impolite(x))"]}
{"id": "enwn_validation_658", "nl": "Melanie shouldn't have closed the elevator doors.", "fol": "", "prediction": ["Melanie shouldn't have closededElevatorDoors(melanor)", "Melanie shouldn't have closed elevator doors.", "everything.HasDone(melandra,Melbourne,ElevatorDoors) -ShouldClosed(melandra))", "-ClosedElevatorDoors(Melanie,2012)", "Melanie shouldn'thaveClosedElevatorDoors(melanor)", "Melanie shouldn't have closed the elevator doors.", "-ClosedElevatorDoors(Melanie)", "all x.((Melena(x) & ElevatorDoors(y)) -> ShouldntClosed(x,y))", "all x.((Melanie(x) & Elevator(y)) -> -Closed(x,y))", "Melanie shouldn't have closed elevator doors.", "(-closedElevator(Melanie))", "all x.((Melanie(x) & ClosedElevatorDoors(x)) -> -Melanie(x))", "all x.((Melanie(x) & ElevatorDoor(y)) -> -Closed(x,y))", "all x.((Melanie(x) & ClosedElevatorDoors(x)) -> -Melissa(x))", "-(MelissabethOwen(Melissa) & ElevatorDoorsClosed(Melissa))", "-ClosedElevatorDoors(Melena)."]}
{"id": "enwn_validation_659", "nl": "You should avoid doing unethical things.", "fol": "", "prediction": ["all x.((DoingUnethicalThings(x)) -> Avoid(x))", "all x.(Uses(x,UnethicalThings) -> Avoid(x))", "all x.((EarthfriendlyThing(x) & Avoid(x)) -> Avoid(x))", "all x.((DoesUnethicalThings(x)) -> Avoid(x))", "avoid doing unethicalthings.", "all x.((DoesUnethicalThings(x)) -> Avoids(x))", "all x.((UnthicalThing(x)) -> -Do(x\"))", "all x.((DoesUnethicalThings(x) & Avoid(x)) -> -Try(x))", "all x.(AvoidUnethicalCauses(x) -> EliminateThan(x))", "all x.((DoingUnethicalThings(x)) -> -DoingUnethicalThings(x))", "all x.(DoesUnethicalThings(x) -> Avoids(x))", "all x.(LessThanUnethicalThings(x) -> Avoid(x))", "all x.((Manual(x) & UnethicalThing(x)) -> Avoids(x))", "all x.((YouToo(x) & UnethicalThing(x)) -> Avoid(x))", "all x.(UsesUnethicalThings(x) -> ShouldBeAvoid(x))", "all x.(Event(x) -> AvoidUnethicalTeathings(x))"]}
{"id": "enwn_validation_660", "nl": "Bribing someone to do something wrong is unethical.", "fol": "", "prediction": ["all x y.((Brings(x) & Person(y) & DidWrong(y)) -> Unethical(x))", "all x y.((Conductor(x) & DoStock(y)) -> Unethical(x))", "all x y.((Betrayal(x) & Person(y)) -> Unethical(x))", "all x y.((Broker(x) & Person(y) & DoseWrong(y)) -> Unethical(x))", "all x y.((Bird(x) & Person(y) & DoingWrong(y)) -> Unethical(x))", "all x y.((Bird(x,y) & Person(y)) -> Unethical(x))", "all x y.((Birding(x,y) & Person(x) & DoesSomethingWrong(y)) -> Unethical(x))", "all x y.((Brings(x,y) & Person(y)) -> Unethical(x))", "all x.((BreakAndDothing(x) & Bribing(x,y)) -> Unethical(x))", "all x.(BirdsPerson(x) -> Unethical(x))", "all x y.((Bird(x,y) & Person(y)) -> Unethical(x))", "all x.(BirdingToDoWrong(x) -> Unethical(x))", "all x y.((Bird(x) & Person(y) & Do(x,y)) -> Unethical(x))", "all x.((Breaks(x) & HappensWrong(x)) -> Unethical(x))", "all x y.((Brings(x) & Person(y)) -> Unethical(x,y))", "all x y.((Birds(x) & Person(y) & DoesWrong(x,y)) -> Unethical(x))"]}
{"id": "enwn_validation_661", "nl": "It's wrong to keep quiet about misconduct.", "fol": "", "prediction": ["all x.((WearWrong(x) & Disguise(x)) -> Quiet(x))", "all x.((WrongToKeepQuiet(x) & Confessional(x)) -> IsReckless(x))", "all x.((Conflict(x) & KeepQuiet(x)) -> IsWrong(x))", "all x.((KeepsSilent(x) & Unconciseful(x)) -> WorstToKeepSmoking(x))", "all x.(WrongToKeepShauntedAboutConflicts(x) -> Warns(x))", "all x.((WrongToKeepQuiet(x) & Disgrace(x)) -> RejectsMoralities(x))", "all x.(IrresponsibleSleepInConflict(x) -> IsWrong(x))", "all x.((KeepSquiet(x) & Disguised(x)) -> Wrong(x))", "all x.((Wrong(x) & KeepsQuiet(x) & Discipline(x)) -> Misconduct(x))", "all x.((Quiet(x) & Disregards(x)) -> -Incorrect(x))", "All x.((TeacherShish(x) & Misconduct(x)) -> Irresponsible(x))", "all x.((Sweet(x) & Conduct(x)) -> ((Negligent(x) & Disgraceful(x))))", "all x.((WrongToKeepQuiet(x) & Disgraceful(x)) -> Ignore(x))", "all x.((KeepsQuiet(x) & Disrespectful(x)) -> Irresponsible(x))", "all x.(SetsQuiet(x) -> Misconduct(x))", "all x.((Wrong(x) & QuietAroundMisconduct(x)) -> IsUgly(x))"]}
{"id": "enwn_validation_662", "nl": "Offering someone something valuable in exchange for their cooperation is bribery.", "fol": "", "prediction": ["all x y.((Offer(x,y) & Person(y) & ValuableInExpirationForCooperation(y)) -> Bribery(x))", "all x.((Offering(x,y) & VowableInExchangeForCooperation(y)) -> Bribery(x))", "all x.((OfferThemValuableInExchange(x) & PeopleCooperate(x)) -> Bribery(x))", "all x y.((Person(x) & Provider(y)) -> Bribery(x))", "all x.((OfferingEmployeesInBrutalityForCooperation(x) & Valuable(x)) -> Bribery(x))", "all x.((Person(x) & OffersValuable(x)) -> Bribery(x))", "all x y.((Person(x) & ValuableThing(y) & Offers(x,y)) -> Bribery(x))", "all x.((Offer(x) & ValueAdded(x) & ExchangeForCooperation(x)) -> Bribery(x))", "all x y.((Person(x) & OfferInEarchange(y,x)) -> Bribery(x))", "all x.((OfferPerson(x) & Valuable(x) & Cooperation(x)) -> Bribery(x))", "all x y.((Offer(x,y) & Person(y)) -> Bribe(x))", "all x.((Offer(x) & ValueAdded(x) & OffersCooperation(x)) -> Bribery(x))", "all x.(OfferingWordlessInExchangeForCooperation(x) -> Bribery(x))", "all x.((OfferingSomeoneValuableInCompetition(x)) -> Bribery(x))", "all x.(Birthy(x) -> OffersValuableInExchangeForCooperation(x))", "all x y.((Offering(x,y) & Person(y)) -> Bribery(x))"]}
{"id": "enwn_validation_663", "nl": "Jarad's project manager Mike offered him tickets to a sold-out concert in exchange for not discussing Mike's behavior in the office during an HR inquiry.", "fol": "", "prediction": ["all x y z.((ProjectManager(x) & Jarad(y) & Mike(z)) -> OfferedTicketTo(x,y,z))", "(Kim'sProjectManagerMikeOfferedTickets(Yo) & SeatsSoldOutConcert(Jarad,SoldOutConcert) & -DiscussedBehaviorDuringHurgInquiry(Jarad))", "all x y.((Jarad(x) & ProjectManager(y) & Mike(y)) -> (OferedTickets(y,z) & SoldOutConcert(z) & ExchangeMika(y) & -DiscussedBehavior(y,z)))", "all x y,z.((ProjectManager(x) & Jarad(y) & Event(z) & SoldOutConcert(y,z)) -> OffersTickets(x,y))", "all x y.((ProjectManager(x) & Jarad(y) & ProjectManagerMike(x,y)) -> OfferedTicketsAtSoldOutConcert(x,y))", "all x y z.((Jarad(x) & ProjectManager(y) & ProjectManager(z)) -> (OfferedTickets(y,x) & SoldOutConcert(y,z) & -DiscussedBehavior(y,z)))", "all x.((Counseling(x) & Mike(x) & Jarad'sProjectManager(x)) -> SoldOutConcert(x))", "all x y z.((ProjectManager(x) & Jarad(y) & Mike(z) & SellOutConcert(z,y) & -Relationship(z,y)) -> (OfferedTickets(x,y,z,y) & ExchangingBehavior(y,z)))", "all x y.((ProjectManager(x) & ProjectManagerMike(x) & Jarad(y) & SoldOutConcert(y) & -TalksBehavior(x,y)) -> OffersTicketsForRemoval(x,y))", "all x y.((Jarad'sProjectManager(x) & ProjectManager(x,y)) -> (OwnedTicketsSoldOut(x,y) & -DisclosingBehavior(x,y)).)", "all x.((ProjectManager(x) & ProjectManager(x) & Jarad(x) & ProjectManager(x,Mike)) -> OffersTicketsToSoldOutConcert(x))", "all x y.((JaradProjectManger(x) & ProjectManagerDex Mike(y) & OfferedTickets(y,x)) -> (OfferedBenefit(y,x) & -DiscussedBehavior(y,HRInquiry)))", "all x y z.((Jarad's ProjectManagerHectorMike(x) & Concert(y) & SaledOut(z) & -DiscussingHireBehavior(x,y,z)) -> OfferedTickets(x,y))", "all x y.((Jarad(x) & ProjectManager(y) & Mike(y) & offeredSoldOutConcertTickets(y,x) & -DiscussedBehavior(y,HRInquiry)) -> OffersInRisk(x,y))", "all x.((ProjectManager(x) & ProjectManager(x) & Jarad(x) & Mike(x)) -> (OfferedTickets(x,soldOutConcert) & -DisclosingBehaviorInOffice(x,HRInquiry)))", "all x.(Jarad(x) -> (ProjectManager(x,mine) & OfferedTickets(x,Jarad) & -DiscussedBehaviorInBusiness(x,HPInquiry)))"]}
{"id": "enwn_validation_664", "nl": "Bribing someone to keep quiet about misconduct is unethical.", "fol": "", "prediction": ["all x.((Bring(x) & -Brings(x,Conflict)) -> Unethical(x))", "all x.((Bringer(x) & Disguise(x)) -> Unethical(x))", "all x.(Braids(x) -> Unethical(x))", "all x.((Biding(x) & KeepQuiet(x)) -> Unethical(x))", "all x.((Brawling(x) & KeepsShauntOnConflict(x)) -> Unethical(x))", "all x.((Bribbing(x) & QuietWhenConflicting(x)) -> Unethical(x))", "all x.((Blobes(x) & KeepsQuiet(x)) -> Unethical(x))", "all x.((BridgeMental(x) & KeepSleepAbout(x)) -> Unethical(x))", "all x.((Bird(x) & KeepsWitnessAboutConflict(x,y)) -> Unethical(x))", "all x.((BringsToKillAbuse(x) & Disgrace(x)) -> Unethical(x))", "all x y.((Brake(x) & Person(y) & KeepShushAboutConflict(y)) -> Unethical(x,y))", "all x.(IsUnethicalToBring(x) -> QuietAboutMisconduct(x))", "all x y.((Beverage(x) & Person(y) & KeepsQuiet(x,y)) -> Unethical(x))", "all x.((BringsBail(x) & KillsConsistent(x)) -> Unethical(x))", "all x y.(BringsToKnow(x,y) -> Unethical(x))", "all x.((Beiring(x) & KeepsQuiet(x) & InvolvesConflicting(x)) -> Unethical(x))"]}
{"id": "enwn_validation_665", "nl": "Mike was attempting to bribe Jarad to keep quiet about his misconduct by offering him the tickets.", "fol": "", "prediction": ["all x y.((Mike(x) & Jarad(y) & OfferTickets(x,y)) -> TryToBone(x,y))", "all x.((Mike(x) & BribesJarad(x) & OffersTickets(x,y)) -> KeepsQuietAroundMisconduct(x))", "all x y.((Mike(x) & Jarad(y) & ExposedTickets(x,y)) -> BribedMikeToKeepSilentAboutConflict(x,y))", "all x y.((Mike(x) & Jarad(y)) -> TrysToBurn(x,y))", "(AttemptingToBbribe(Mike,Jarad) & OfferingTickets(Mike) & WasGuiltyAboutMisconduct(Mike,Jarad,Jarad))", "all x y.((Mike(x) & Jarad(y) & Biege(x,y)) -> OffersTicketsToBeQueet(x,y))", "all x y.((Mike(x) & Jarad(y) & OffersTickets(x,y)) -> Struggling(x))", "all x.((Hey(x) & TryingToBibeJarad(x) & OffersTickets(x)) -> Quiet(x))", "Mike attempted to BribeDavidHisStatusByOfferingTickets(Mike,Jarad)", "(TryingToBrief(Mike,Jarad) & OfferingTickets(Mike,Jarad))", "all x y z.((Buy(x) & JaradBuck(y) & Tickets(z) & -(Sweet(y,z) | Misconduct(z)))) -> TryingToBbribeAndOffer(x,y))", "All x.((Mike(x) & Beef(x) & OffersTicket(x)) -> WantsToGuiltAndBecause(x))", "Attempt to BribeJarad(mic,x) -> (OffersTickets(mike,x) & Quiet(y) for Dissappointing(y)))", "all x y z.((Mike(x) & Jarad(y) & Tickets(z)) -> (TryingToBring(x,y,z) & KeepsQuietAboutDisgusted(x,y) & Offers(x,y,z)))", "(all x.(Birth(x) -> Quiet(x)))", "all x y.((Mike(x) & Jarad(y)) -> Bestoked(x,y))"]}
{"id": "enwn_validation_666", "nl": "It was unethical for Mike to offer Jarad the tickets.", "fol": "", "prediction": ["(UnethicalForMikeToOfferTickets(Mike) & Jarad(Jarad))", "Unethical for Mike to offer Jarad tickets!", "-(Unethical(Mike) & OfferToJarad(Mike)))", "it was deniable for Mike to offer Jarad the tickets.", "Man was unethical to OfferJaradSoldTickets(Mike)", "All x.(UnethicalToOfferJaradTickets(x) -> MikeStopsOffering(x,y))", "Undethical for Mike to offer Jarad's tickets.", "all x.((Mike(x) & OffersJaradTickets(x)) -> Unethical(x))", "Ich haltedAllEngages(Mike,Jarad) & OfferTickets(Mike,Jarad))", "Es ist unethical, dass Mike,Jarad,HasTickets(Mike)", "WeirdToOfferTicketsToJarad(Mike,Jarad)", "Es ist unethical for Mike to offer Jarad tickets.", "Es war unethical for Mike (ToOfferTicketsToJarad))", "all x.((Mike(x) & Jarad(y)) -> Unethical(x))", "-(UnethicalForMike(Mike,Jarad) & OffersTickets(Mike,Jarad))", "Es war unethical for Mike to offerJaradTrips(miaw) the tickets(miaw))"]}
{"id": "enwn_validation_667", "nl": "Mike should not have offered Jarad the tickets.", "fol": "", "prediction": ["all x.(Mike(x) -> Doesn'tOfferedJaradTickets(x))", "Mike NutsJarredTickets(Mike)", "all x y.((Mike(x) & Jarad(y)) -> -OfferedTickets(x,y))", "All x.(Mike(x) -> -OfferedTickets(x,Jarad))", "all x.((Mike(x) & Jarad(x)) -> -OfferedTicket(x,y))", "(Neighbors(Mike) & -OfferedTickets(Mike,Jarad))", "-(Mike(Mike) -> OfferedTickets(Mike,Jarad))", "all x.((Mike(x) & Jarad(y)) -> -OfferedTickets(x,y))", "-OwnedTickets(Mike,Jarad)", "the tickets.", "-OfferedJaradTickets(Mike)", "all x.((Mike(x) & Jarad(x)) -> -OfferedTickets(x,Jarad))", "all x.((Mike(x) & Jarad(y)) -> -OfferedTickets(x,y))", "Jarad and Mike -shouldn'thaveOwnedTickets(Mike,Sacha))", "Jarad is an idiot whose tickets he should not have offered.", "all x.((Mike(x) & Jarad(x)) -> -OfferedTickets(x,y))"]}
{"id": "enwn_validation_668", "nl": "If someone asks you for a small favor, it's polite to accept.", "fol": "", "prediction": ["all x.((AsksForSmallFavor(x) & PoliteToAccept(x)) -> AsksForSmallFavor(x))", "all x.(SmallFavour(x) -> Polite(x))", "all x.(SmallFavour(x) -> PoliteToAgree(x))", "all x.((Principal(x) & AsksForSmallFavor(x)) -> PoliteToAccept(x))", "all x.((SmallFavor(x) & AsksFor(x,1)) -> PoliteToAccept(x))", "all x.((Person(x) & AsksForSmallFavour(x)) -> PoliteToAccept(x))", "all x.(InvolvesSmallFavor(x) -> PoliteToAccept(x))", "all x.((Person(x) & AsksSmallFavour(x)) -> PoliteToAccept(x))", "all x.((PeopleAskYouForSmallFun(x)) -> PoliteToAccept(x))", "all x.((Person(x) & AsksForSmallFavor(x)) -> PoliteToAccept(x))", "all x.((AskForSmallFavour(x) & PoliteToAccept(x)) -> Polite(x))", "all x.((AsksForSmallProfit(x)) -> Polite(x))", "all x.(SmoothFavor(x) -> PoliteToAccept(x))", "all x.((ApposesForSmallFavorite(x) & PoliteToAccept(x)) -> SmallFavorite(x))", "all x.((AsksForSmallFavour(x) & PoliteToAccept(x)) -> SmallFavour(x))", "all x.((AntwerpForDisgrace(x) & AskForSmallFavour(x)) -> PoliteToAccept(x))"]}
{"id": "enwn_validation_669", "nl": "Letting someone use the shower before you is a small favor.", "fol": "", "prediction": ["all x.(LettingUseRainBy(x,Person) -> SmallFantasy(x))", "all x.(LetsPersonUseBaby(x) -> SmallFavor(x))", "all x.((LetsPersonUse(x,Swathe) & Before(x)) -> SmallFavor(x))", "all x.(LetsPersonUseRunShowerBefore(x) -> SmallFun(x))", "all x.(LettingPersonUseWaterBeforeYou(x) -> SmallFavorite(x))", "all x.((LetsPersonUseSpouch(x) & BeforeYou(x)) -> SmallFavor(x))", "all x.((LoadPerson(x) & UsesBain(x)) -> SmallFavorite(x))", "all x y z.((LittingPersonWait(x,y) & Shower(z)) -> SmallFavor(x))", "all x.((LettingPersonUseSprinkler(x) & BeforeYou(x)) -> SmallFat(x))", "all x y.((LetsPersonUseWebCropBefore(x,y)) -> SmallFavorite(x))", "all x.(LettingPersonUseShowerBefore(x) -> SmallFat(x))", "all x.(LetsPersonOwnYou(x) -> SmallFavor(x))", "all x y.((UsesBaby(x) & Person(y) & Before(y)) -> SmallFavor(x,y))", "all x y.((Advertisement(x) & Person(y) & UsedBreakby(y)) -> SmallFavor(x))", "all x.(LettingSomeoneUseShower(x) -> SmallFavor(x))", "all x.(LettingPersonneUseJacketBefore(x) -> SmallFavor(x))"]}
{"id": "enwn_validation_670", "nl": "Elle's sister asked her if she could use the shower first.", "fol": "", "prediction": ["EllesSisterAnswer(a) asked her if she could useBath(a) &.", "Ellesse(sister) -SheAnsweredToUseBathFirst(s))", "Sie's SiblingsPlaza()", "Elle's sister asked if she could usetheshowerFirst.", "Elle's sister asked her if she could use ShowerFirst.", "Elle's sister asked if she could useBathFirst.", "Elle's sister kindly asked her if she could use shower first.", "Ellessia's sister asked her if she could useShowerFirst.", "Elle's sister asked if she could use shower first.", "Ellesse'sSisterBoastedSheSheHearsToDropSheNeedsToSplashFirst.", "Elle's sister asked if she could usestheshowerFirst.", "Elle's sister asked if she could usetheShowerFirst.", "Elle's sister asked her if she could use shower first.", "EllesSisterShelteredAskedForBachelorFirst(IsCanUseShower(I))", "Elle's sister asked if she could use shower first.", "SeenBySister(Shell) & SheCoveredPriorToBath(Shell)"]}
{"id": "enwn_validation_671", "nl": "Elle ignored her sister's request and showered for 30 minutes.", "fol": "", "prediction": ["Elle neameds request from sister but left, so the woman sported, until 30 minutes.", "Elle ignored Request(elle,Sister) & Showered(elle,30))", "Sie ignoraseeeeeeesSistersRequest(elle,30) & Showered(elle,30))", "Elle a ignorated sister's requestandshoweredFor30Minutes.", "Elle nabbed sister\u2019s request and asked to be shaved 30 minutes.", "Elle ignored request of sister, and ShoweredFor30Minutes.", "Elle a ignorats request from sister for arrival and showered for 30 minutes.", "Elle & IgnoredSisterRequest(sister) & ShoweredFor30Minutes(sister)", "Elle a ignoratRequestOfSisterSister(it) & StarkedFor30Mesunches(it))", "Elle a resisted request(elle,31) & swooped(elle,30))", "Elle ignored sister's request and showedered for 30 minutes.", "Elle ignored request of Sister, and ShoweredForThreeMinutes.", "Elle ignoredSisterRequest(e) & ShoweredFor30Minutes(e))", "Elle a ignoredsSistersRequest(ELLE,35) & Showered(ELLE,30))", "Elle ignorait sister's request and showedered for 30 minutes.", "(OccupiedRequest(Ellen,Sister) & ShoweredForTuesday(Ellen))"]}
{"id": "enwn_validation_672", "nl": "Elle's sister was requesting a small favor.", "fol": "", "prediction": ["Ellessia asked forsmallfavour(elle)", "Elle's sister requestedCandy(Sheri,Sister(Shelby) -> RequestedSmallF favor(Sheri,Sister))", "(Sheri'sSisterRachedSmallFair(Shelby))", "Elle's Sister RequestedSmallFavorite(Sheila).", "EllesSisterRequestedSmallFavorite(elle,sister)", "Elle's sister, Elle, asked for small favor.", "Elle's sister was requestingSmallF favor.", "EllesSisterRequiresSmallFat(Elle's)", "Elle is a therapist (sister to Elle) & requestedsSmallFavor(s))", "Elle's sister requestedsSmallFavorite(Shelter)", "Elle's sister requestedsSmallFavor(elle)", "EllesSister RequestedSmallFavor(ELLE,Shelby))", "Elle's sister requestedSmallFavor(ELLE)", "Elle's sister was requestingSmallFavour( Elle,i,x))", "EllesSisterRequiresSmallFavour(ELLE,sister)", "Elle's sister requestedSmallFavour(elle,2000)"]}
{"id": "enwn_validation_673", "nl": "Elle ignored her sister's request for a small favor.", "fol": "", "prediction": ["Elle ignored her sister's request for smallFat(ELLE)", "Elle ignored-sistersRequestForSmallFavor(elles,fiant)", "Elle ignored request for a small favor (and her sister's) request for a smaller favor (and Elle's request for a small favor)))", "(IllustratingSister(Ellie) & SmallFavor(Ellie,Sister))", "Elle nixedsSisterRequestForSmallFavor(n) & WorriedAboutFat(n) & DontPayFavor(n))", "all x y.((Sister(x) & Elle(y)) -> Done(x,y))", "Elle a ignoratSisterRequestForSmallFavorite(Ice,Sister,Sister).", "Elle a ignoratsSisterSiblingFavor(Ellen)", "Elle a ignorats request for SmallFat(elle,fame,fame)", "all x.((Ellie_Request(x,a,Member)) -> Invalidate(x,y))", "Elle ignores sister's request for a smallFavor.", "Elle ignored the request for a small favor from her sister.", "all x y.((Ellie(x) & Sister(y) & SmallFavor(y)) -> Unaccepted(x,y))", "Elle ignored her sister's request for a small favor.", "Elle ignoredsSisterTryPurchase(ELLE)", "Elle ignored sister's request for SmallFavor(Alain)"]}
{"id": "enwn_validation_674", "nl": "It was impolite for Elle to ignore her sister's request.", "fol": "", "prediction": ["Estelle apologises for her sister's request and ignores it.", "Elle swore to ignore sister's request & drank.", "Allel's request to ignore SisterRequest(ELLE)", "IllogicalForSheila(illiterate) -> IgnoresSisterRequest(illiterate))", "(ImpoliteForEllenToIgnoreSisterRequest(Ellen,Sister))", "Elle decryed siblings request for \"unpolite\"\"", "-ImpoliteForSheila(RiseSheRequest(i) & UnacceptableForSheila(i)", "Elle chose to ignore her sister's request.", "Sie neid a pity to ignore SisterRequest.", "Ilielle felt that she was impolite to ignoresSisterRequest.", "Elle refused to ignore sister's request.", "(ImpossibleForSisterToIgnore(Elle,Sister) & IgnoreRequest(Elle,Sister))", "C\u2019\u00e9tait impolite pour Elle, to ignoreSisterRequest.", "Elle admonished request to ignore.", "-ImpoliteForShelve toIgnoreSisterRequest(ELLE)", "Es war impolite for Elle to ignoreSisterRequest."]}
{"id": "enwn_validation_675", "nl": "Elle should not have ignored her sister's request.", "fol": "", "prediction": ["Elle should not have ignored her sister's request.", "Elle should not have ignored her sister's request.", "all x.((Ellie(x) & NotIgnoredSistersRequest(x)) -> -Ignored(x))", "Elle ne doit pas avoir ignor\u00e9 sisters request.", "Elle ne should of ignored sister's request.", "Elle ne should have ignored sister's request.", "Elle n'avait pas ignoratedsFifthRequestSister(n)", "Elle ne should have ignored sister's request.", "Elle ne sabotagedSisterRequest(i,e).", "Elle should not have ignoredSisterRequest(elle)", "Elle ne dreads 'ignoringSisterRequest'(Ellen,2001)", "Elle's request should not have ignored.", "Elle ne swore to never-ignoreSisterRequest(n).", "Elle n'aurait pas omitted sister's request.", "Illustre (-IgnoredRequest(ILELLE, Sister))", "Elle should not have ignoredsSisterSection(elle)"]}
{"id": "enwn_validation_676", "nl": "It's okay to do things that are generally frowned upon if they have positive outcomes.", "fol": "", "prediction": ["all x.((DoesWhatGenerallyFownedUpon(x) & PositiveOutcomes(x)) -> Okay(x))", "all x.(((FownedOn(x) & PositiveOutcomes(x)) -> OK(x))", "all x.((PositiveOutcomes(x) & FreownedOn(x)) -> Okay(x))", "all x.((Doing(x) & FrownedOn(x)) -> PositiveOutcomes(x))", "all x y.((PositiveOutcomes(x) & Doing(x,y) & GenerallyFownedOn(y)) -> OkayFor(x,y))", "all x y.((Doing(x) & FrownedOn(y) & PositiveOutcomes(x)) -> OK(x))", "all x.((DoesFranchishes(x) & PositiveOutcomes(x)) -> Okay(x))", "all x y.((DoingLikeFrownedOn(x) & PositiveOutcomes(y)) -> OK(x))", "all x y z.((Good(x) & FownedOn(y) & PositiveOutcomes(z)) -> OKToDo(x,y,z))", "all x.((DoingPositiveOutcomes(x) & GenerallyFownedOn(x)) -> OkayTo(x))", "all x.((PositiveOutcomes(x) & FrownedOn(x)) -> Okay(x))", "all x.((FreudLike(x) & PossibileOutcomes(x)) -> OKForGood(x))", "all x.((Doing(x) & GenerallyFownedUpon(x)) -> PositiveOutcomes(x))", "all x y.((PromoableOutcomes(x) & FrownedOn(y) & PositiveOutcomes(x)) -> Okay(x))", "all x.((Freakfree(x) & PositiveOutcomes(x)) -> OkayToDo(x))", "all x.((FownedOn(x) & PositiveOutcomes(x)) -> Okay(x))"]}
{"id": "enwn_validation_677", "nl": "Lying is generally wrong.", "fol": "", "prediction": ["all x.(Lying(x) -> Incorrect(x))", "all x.(Liking(x) -> Irregular(x))", "all x.(Living(x) -> Worst(x))", "all x.(Liking(x) -> Worst(x))", "all x.(Lying(x) -> Worst(x))", "all x.(Liking(x) -> Worst(x))", "all x.(Lying(x) -> Worst(x))", "all x.(Living(x) -> Worst(x))", "all x.(Living(x) -> Worst(x))", "all x.(Liking(x) -> Incorrect(x))", "all x.(Liking(x) -> Worst(x))", "all x.(Likin(x) -> Worst(x))", "all x.(Liking(x) -> Worst(x))", "all x y.((Lying(x) & Right(y)) -> Ignorable(x,y))", "all x.(Lying(x) -> Worst(x))", "all x.(Liking(x) -> Worst(x))"]}
{"id": "enwn_validation_678", "nl": "Xirong lied to his boss to protect his coworker from being fired for organizing a walk-out.", "fol": "", "prediction": ["all x y.((Xirong(x) & Boss(y)) -> LiliedToProtect(x,y))", "all x y z.((Sick(x) & Coworker(y) & Employee(z) & WalkOutBuy(y)) -> LiliedToBoss(x,y,z))", "all x.((Xirong(x) & Coworker(y)) -> LiesToBoss(x,y))", "all x y.((Xirong(x) & Worker(y)) -> Leaped(x,y))", "all x y.((Xirong(x) & Boss(y)) -> LiliedToProtect(x,y))", "all x.((Xirong) & Boss(x) & Coworker(y)) -> LoudToProtectFromFilm(x,y))", "all x y.((MajorCoworker(x) & Company(y) & OrganizedWalkOut(x,y)) -> LiliedToBoss(x,y))", "all x y.(((Child(x) & Coworker(y)) -> LyingToBussToProtectFromBeingSacked(x,y))", "all x.((Xirong(x) & Boss(y)) -> liedToProtectCoworker(x))", "all x y.((ProtectCoworkerFromGasFun(x),y)) -> (LikedToBoss(x) & WorriedAbout(x,y) & WorriedAbout(x,y)))", "all x y.((Exirong(x) & Coworker(y)) -> LiliedToBelongTo(x,y))", "All x.((Xirong(x) & Boss(y) & Boss(z) & OrganizedWalk-Out(x)) -> LiliedToProtect(x,y,z))", "all x y.((Boss(x) & Coworker(y) & ExecutedWalkOut(x,y)) -> LiedToToProtectFromFilm(x,y))", "all x y.((Xirong(x) & Boss(y) & LiedTo(x,y)) -> ProtectsCoworkerFromSignificantFire(x))", "all x y.((Xirong(x) & Boss(y)) -> LiesToProtect(x,y))", "all x y z.((Issue(x) & Coworker(y) & WalkOut(z)) -> (LiesToBoss(x,y) & ProtectsCoworkerFromThreat(x,y & OrganizesTrip(x,z)))"]}
{"id": "enwn_validation_679", "nl": "Firing someone for organizing a walk-out is a form of retaliation.", "fol": "", "prediction": ["all x.((Firing(x) & OrganisesWalkOut(x)) -> Retaliation(x))", "all x.((FiringPerson(x) & OrganizingWalkOut(x)) -> Retaliation(x))", "all x.((FiringPeople(x) & OrganizingWalkOut(x)) -> Retaliation(x))", "all x.(Finging(x) -> (OrganizesWalkOut(x) | Retaliation(x)))", "all x.(Firing(x) -> (OrganizesWalkOut(x) & Retaliation(x)))", "all x y.((Firing(x,y) & OrganisingWalkOut(x,y)) -> Retaliation(x))", "all x y.((Firing(x,y) & WalkOut(y)) -> Retaliation(x))", "all x y.((Firing(x,y) & CaringForWalkOut(x)) -> Retaliation(y))", "all x y.((Firing(x,y) & OrganizingWalkOut(y)) -> Retaliation(x))", "all x y.((Firing(x,y) & WalkOutOrganizer(y)) -> FormOfRetaliation(x,y))", "all x y.((FiringForOrganizingWalkout(x) & Person(y)) -> Retaliation(x,y))", "all x y.((Firing(x,y) & WalkoutOrganization(y)) -> Retaliation(x))", "all x y.((Firing(x) & WalkOut(y,x)) -> Retaliation(x))", "all x.((FiringForWalkOut(x) & OrganisesWalkOut(x)) -> Retaliation(x))", "all x.((Firing(x) & WalkOutOrganization(x)) -> Retaliation(x))", "all x.(Firing(x) -> WalkOutOrganization(x))"]}
{"id": "enwn_validation_680", "nl": "Preventing someone from doing something wrong is a good thing.", "fol": "", "prediction": ["all x.(ProtectsFromDoingWrong(x) -> GoodThing(x))", "all x y.(((Person(x) & DoingWrong(y)) -> GoodThing(x))", "all x.((DoingWhatWrong(x) & Prevents(x)) -> GoodThing(x))", "all x.((Protects(x) & Person(x) & DoesWrong(x)) -> GoodThing(x))", "all x.((PreventsPersonFromDoingWrong(x)) -> GoodThing(x))", "all x,y.((Person(x) & Wrong(y) & Prevents(x,y)) -> GoodThing(x))", "all x.((PreventsMortality(x) & Person(x)) -> GoodThing(x))", "all x.((People(x) & Can(x,Do SomethingWrong)) -> GoodThing(x))", "all x y.((Person(x) & Happening(y) & SoupDown(z)) -> GoodThing(x,y))", "all x.((PreventsMistakeInPerson(x) & Wrong(x)) -> GoodThan(x))", "all x.((Peer(x) & WorstDoing(x)) -> GoodThing(x))", "all x.(PreventsThemFromWrong(x) -> GoodThing(x))", "all x.((Person(x) & -DoingWrong(x)) -> GoodThing(x))", "all x.(Prevents(x) -> GoodThing(x))", "all x y.((Person(x) & DoneWarning(y)) -> GoodThing(x))", "all x.((PreventsDamage(x) & BadThing(x)) -> GoodThing(x))"]}
{"id": "enwn_validation_681", "nl": "Retaliating against worker organization is wrong.", "fol": "", "prediction": ["all x.(RetaliatesAgainstWorkerOrganization(x) -> Irresponsible(x))", "all x.((RetaliateAgainstWorkerOrganization(x)) -> Worst(x))", "all x.((WorkerOrganization(x) & RetaliatesAgainst(x)) -> Wrong(x))", "all x y.((WorkerOrganization(x) & Person(y) & RetaliatesAgainst(x,y)) -> Wrong(x))", "all x y.((WorkerOrganization(x) & RetaliateAgainst(x,y)) -> Irresponsible(x))", "all x.((RetaliatingAgainstWorkerOrganization(x)) -> (Wrong(x)))", "all x.((RetaliateAgainstWorkerOrganization(x)) -> Wrong(x))", "all x.(IsRetaliation(x) -> Wrong(x))", "all x.((RetaliatingAgainstWorkerOrganization(x)) -> Irresponsible(x))", "all x.((RetaliatingAgainstWorkerOrganization(x)) -> Wrong(x))", "all x y.((Worker(x) & EmployeeOrganization(y)) -> IsWrong(x,y))", "all x.(RetaliatesAgainstWorkerOrganization(x) -> Irresponsible(x))", "all x.(RetaliatoryAgainstWorkerOrganization(x) -> Worst(x))", "all x y.((WorkerOrganization(x) & Retaliation(y)) -> Wrong(x))", "All x.(Retaliatory(x) -> Bad(x))", "all x.((Retaliate(x) & WorkersOrganization(x)) -> Irresponsible(x))"]}
{"id": "enwn_validation_682", "nl": "It's okay to lie if it does more good than harm.", "fol": "", "prediction": ["all x.((Limit(x) & BestThanHarm(x)) -> Okay(x))", "all x.((Limits(x) & MoreGoodThanHarm(x)) -> OK(x))", "all x.((Likel(x) & MoreGood(x)) -> Better(x))", "all x.((Limit(x) & Lie(x)) -> (MoreGood(x) | LessHarm(x)))", "all x.((Livre(x) & BetterGodThanHarm(x)) -> OK(x))", "all x.((Livin(x) & AllOfGood(x) & AllOfHarm(x)) -> OK(x))", "all x.((Lilies(x) & (MoreGood(x) | MoreHarm(x))) -> OK(x))", "all x.((Lird(x) & DoesMoreGood(x) & -Harm(x)) -> OK(x))", "all x.(Lie(x) -> (DoesMoreGood(x) & -DoesMoreHarm(x)))", "all x.((Limit(x) & DidMoreGoodThanHarm(x)) -> Okay(x))", "all x.((Liar(x) & DoesMoreGood(x)) -> Okay(x))", "all x.((Lik(x) & BetterThanHarm(x)) -> Okay(x))", "all x.((Limits(x) & MoreGood(x)) -> MoreHarm(x))", "all x y.((Limit(x) & GreaterGood(y) & BetterHarm(x)) -> Alright(x))", "all x.((Limits(x) & DoesMoreGoodThanHazard(x)) -> OK(x))", "exists x.((Liking(x) & ItDoesMoreGoodThanHarm(x)) -> Okay(x))"]}
{"id": "enwn_validation_683", "nl": "Xirong lied to his boss to prevent him from retaliating against worker organization.", "fol": "", "prediction": ["all x y z.((Asssignment(x) & Boss(y) & Xirong(x) & WorkerOrganization(z)) -> LeakedToProtect(x,y,z))", "all x.((Xirong(x) & Boss(x)) -> Ilied(x))", "all x y.((Xirong(x) & Boss(y)) -> LiliedToOperateToPreventTaxation(x,y))", "all x y.((Exirong(x) & Boss(y)) -> IliedToPreventRetaliation(x,y))", "all x.((Xirong(x) & Boss(x)) -> IlliedToPreventRetaliationAndRetaliation(x))", "Xirong lied to his boss to prevent RetaliationAgainstWorkerOrganization (Xirong).", "all x y.((Xirong(x) & Boss(y)) -> LiliesToPreventRetaliation(x,y))", "Xirong lied to his boss to prevent retaliation against workerorganization(x))", "all x y.((Xirong(x) & Boss(y)) -> LyingToBoss(x,y))", "all x y.((Xirong(x) & Boss(y)) -> LynkedToRetaliate(x,y))", "all x.((Killer(x) & Boss(x)) -> Lilied(x))", "all x.((Xirong(x) & Boss(x)) -> IlliedToForSterment(x))", "all x y.((Xirong(x) & Boss(y) & DeleteRetaliationsAgainstWorkersOrganization(x,y)) -> LiliedTo(x,y))", "all x y.((Xirong(x) & Boss(y)) -> LyingToPreventRetaliation(x,y))", "all x y.((Kiss(x) & Manager(x) & Y.(WorkerOrganization(y)) & LyingToBoss(x,y)) -> NotRetaliatedAgainst(x,y)))", "all x y.((Boss(x) & Xirong(y)) -> DroveToRetaliation(x,y))"]}
{"id": "enwn_validation_684", "nl": "Preventing someone from retaliating against worker organization is a good thing.", "fol": "", "prediction": ["all x.(Protects(x) -> GoodThing(x))", "all x.(PreventsRetaliationAgainstWorkerOrganization(x) -> GoodThing(x))", "all x y.((WorkerOrganization(x) & Person(y) & PreventsRetaliation(y,x)) -> GoodThing(x))", "all x.(PreventsRetaliationAgainstWorkerOrganization(x) -> GoodThing(x))", "all x.((Prevents(x) & RetaliateAgainstWorkerOrganization(x)) -> GoodThing(x))", "all x.((PreventsRetaliation(x) & WorkerOrganization(y)) -> GoodThing(x))", "all x.((Dog(x) & PreventsRetaliation(x)) -> GoodThing(x))", "all x.((Protects(x) & RetaliatesAgainstWorkerOrganization(x)) -> GoodThing(x))", "all x.(PreventsRetaliation(x) -> GoodThing(x))", "all x.((Person(x) & PreventsRetaliationAgainstWorkerOrganization(x)) -> GoodThing(x))", "all x y.((WorkerOrganization(x) & Person(y) & PreventsRetaliation(y,x)) -> GoodThing(y))", "all x.((Person(x) & CanPreventRetaliation(x)) -> GoodThing(x))", "all x.((Prevents(x,y) & Person(y) & RetaliatesAgainstWorkerOrganization(y)) -> GoodThing(x))", "all x.((Person(x) & -RetaliatesAgainstWorkerOrganization(x)) -> GoodThing(x))", "all x.((PreventRetaliation(x) & WorkersOrganization(x)) -> GoodThing(x))", "all x.((ProtectsTaxationAgainstWorkerOrganization(x) & GoodThing(x)) -> RetaliatesAndGoodThing(x))"]}
{"id": "enwn_validation_685", "nl": "The consequence of Xirong's lie was a good thing.", "fol": "", "prediction": ["all x.((AssertionOfXirongsLie(x) & GoodThing(x)) -> Lith(x))", "all x.((Lird(x) & Xirong)) -> GoodThing(x))", "all x.((Little(x) & Xirong(x)) -> GoodThing(x))", "all x.((ConsequenceOfXirongLay(x)) -> GoodThing(x))", "all x.((SignificantConsequence(x) & Lie(x)) -> GoodThing(x))", "all x.((Little(x) & Xirong(x)) -> GoodThing(x))", "all x.((Consequence(x) & Lie(x)) -> GoodThing(x))", "all x.(Limit(x) -> GoodThing(x))", "all x.((ConsequenceOfXirongsLie(x) & GoodThing(x)) -> GoodThing(x))", "all x.((Little(x) & Xirong(x)) -> GoodThing(x))", "all x.((Liz(x) & ConvictedBy(x,x)) -> GoodThing(x))", "all x.((XirongLired(x) & Good(x)) -> Limise(x))", "all x.((Lird(x) & Xirong)) -> GoodThing(x))", "all x.((LifulConsequence(x) & XirongsLie(x)) -> GoodThing(x))", "all x.((Lird(x) & Xirong(x)) -> GoodThing(x))", "all x.((ExecutiveOfLittle(x) & Xirong)) -> GoodThing(x))"]}
{"id": "enwn_validation_686", "nl": "It was okay for Xirong to lie to his boss.", "fol": "", "prediction": ["all x.((Xirong(x) & Boss(x)) -> OkayLiked(x))", "all x.((Xirong(x) & Boss(x)) -> NotAlwaysLirtTo(x,y))", "all x.((Xirong(x) & Boss(x)) -> OkayToLieTo(x,y))", "all x.((Xirong(x) & Wot(x)) -> OkayToLieToBosse(x))", "all x.(TellYouBoss(x) -> OkayToLireTo(x,y))", "all x.((Xirong(x) & Boss(x)) -> OkayToLieTo(x))", "all x.((Xirong(x) & Boss(x)) -> Okay(x))", "all x.((Xirong(x) & Boss(x)) -> OkayToLieTo(x,x))", "all x.((Xirong(x) & Boss(x)) -> OkayToLieTo(x,x))", "all x y.((Xirong(x) & Boss(y)) -> LiesTo(x,y))", "all x.((Xirong(x) & Boss(x)) -> OKToLieTo(x))", "all x.((Xirong(x) & Boss(x)) -> OKToLieTo(x))", "all x.(Goal(x,y,z) -> AlrightForXirongToLieToBoss(y,z))", "all x.(LikedToBoss(x) -> OK(Xirong))", "all x.((Xirong(x) & Boss(x)) -> OkayToLieTo(x,y))", "all x.((Xirong(x) & Boss(y)) -> OKLiking(x,y))"]}
{"id": "enwn_validation_687", "nl": "Dita cut the brakes on Martin's car after he cheated on her.", "fol": "", "prediction": ["Dita CutsBrakesOnMartinCar(d) & CheatedOnMatt.", "all x y z.((Dita(x) & Martin(y) & Chopped(z)) -> CutsBrakesOnCar(x,y,z))", "all x.((Dita(x) & Martin(x)) -> CutBrakesOnCar(x,bin,moon))", "Dita cutBrexionsOnMartin'sCarAfterHecheatedOnMatt.", "all x y z.((Dita(x) & Martin(y) & Car(z) & CheatedOn(y,z)) -> CutBremsOn(x,y,z))", ",(Car(Dita,Martin) & Cheated(Martin)) -> CutBrakesOnRed.(Dita,Martin))", "Dita (HackedBrakes(Dita) & MartinPacedOnTo(Dita))", "-((Dista(d) & Martin(m) & CheatedOn(t)) -> CutsBrakes(d))", "all x y.((Dita(x) & Martin(y) & CheatedOn(x,y)) -> CutsBrembos(x,y))", "Dita cut the Brakes on MartinCar after he CheatedOn(dita,b) & LaughedOn(martin,b))", "it seems Martin took a lot of care of their brakes (StuntsInCar(Dita,MarcoMike) & CheatedOn(Dita,Martin))", "Dita CutsBrakesOnMartinCar(d) s CheatedOn(m.Martin(i) & CheatedOn(d))", "(MattCar(Dita) & CheatedOn(Martin,Dita)))", "all x y.((Dita(x) & Martin(y) & Cheated(y,x)) -> CutsBrakesOn(x,y))", "all x y.((Dita(x) & Martin(y) & CheatedOn(y,x)) -> CutBrexis(x,y))", "Dita CutBreaksIfMartinPcheatedOnHer((Dita\" & MartinCar(Dita))"]}
{"id": "enwn_validation_688", "nl": "Someone cheating on you is not a good enough reason to put them in mortal danger.", "fol": "", "prediction": ["all x y.((Cheating(x) & Person(y)) -> -GoodEnoughRightToPutInMortalDanger(x,y))", "all x.((CheatingOn(x) & -GoodEnoughRight(x)) -> -MortalDanger(x))", "all x.(CheatsOn(x,y) -> -GoodEnoughRightToPlaceInMortalDanger(x))", "all x y.((Commercial(x) & CheatingOn(x,y)) -> -GoodEnoughRightToInput(x,y))", "all x.(CheatsOn(x) -> -MortalDange(x))", "all x.((Person(x) & CheatingOn(x)) -> -CanPermitMortalDanger(x))", "all x y.((HasCheat(x) & IsGoodEnoughFor(x,y)) -> MortalDanger(x))", "all x y.((Person(x) & Cheating(x) & -GoodEnoughRightToPutInMortalDanger(y)) -> -PutInMortalDange.(x,y))", "all x.((CheatsOnYou(x) & -GoodEnoughRight(x)) -> MortalDangerous(x))", "all x y.((CheatingPerson(x) & Someone(y) & MortalDangerous(x)) -> -GoodEnoughRightToPut(y,x))", "all x.(EmployerCheat(x) -> -GoodEnoughRightToMortalDanger(x))", "all x.((Person(x) & CheatingOn(x)) -> -GoodEnoughRunToMortalDanger(x))", "all x.((CheatingOn(x) & -GoodEnoughRightForMormonDangerous(x)) -> -(Commitment(x) & CheatingOn(x)))", "all x.((KillingOn(x) & -GoodEnoughRightToMortalDanger(x)) -> UnacceptableStorm(x))", "all x.((People(x) & CheatingOnYou(x)) -> -GoodEnoughRightSurvivalDangerous(x))", "all x.(Cheat(x) -> NotGoodEnoughForMormonDanger(x))"]}
{"id": "enwn_validation_689", "nl": "Cutting the brakes on someone's car puts them in mortal danger.", "fol": "", "prediction": ["all x y.((Person(x) & Car(y) & CutsBrakes(x,y)) -> MortalDangerous(x))", "all x.((CuesBrakesOnCar(x) & PutsInMortalDanger(x)) -> PutsInCar(x))", "all x y z w.((Car(z) & Brake(w) & Person(z) & BreathingOn(w,z,w)) -> MortalDangerous(z,w))", "all x.((CuttingBrakes(x) & PersonsCar(x)) -> PutsMoralDanger(x))", "all x y.((Car(y) & Person(y) & CutsBrakes(x,y)) -> MortalDisaster(y))", "all x y z.((Break(x) & Car(y) & Car(z)) -> CutsBreak(x,y,z))", "all x y.((Car(x) & Person(y) & CutsBreats(x,y)) -> PuttingInMortalDanger(x,y))", "all x.((Brake(x) & Car(y) & CutsOn(x,y)) -> MortalDanger(x,y))", "all x y.((Car(x) & Car(y)) -> CutBrakesOnPond(x,y))", "all x y.((Car(x) & Car(y) & CutsBrakesOn(x,y)) -> MortalDangerous(x))", "all x.((CuttingBrakesOnPerson'sCar(x)) -> PutsInMortalDanger(x))", "all x y.((CuttingBrex(x) & Car(y)\" -> PutsToMortalDanger(x,y))", "all x.((CuttingBrakes(x) & IgnoresCar(x)) -> MortalDangerous(x))", "all x.((CuttingBrake(x) & Person(x)) -> PutsInMortalDanger(x))", "all x y.((Car(x) & BreakingBrakesOn(x,y)) -> MortalDangerement(x))", "all x.((CuttingBrakes(x) & PuttingCarInMortalDangery(x)) -> MortalDanger."]}
{"id": "enwn_validation_690", "nl": "Someone cheating on you is not a good enough reason to cut the brakes on their car.", "fol": "", "prediction": ["all x y.((Betrayal(x) & Car(y) & CheatsOn(x,y)) -> -GoodEnoughRightStorageToCutBrakes(x,y))", "all x y.((Personal(x) & CheatingOnYou(x)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x.(KickingOnYou(x) -> -GoodEnoughRightToCutBrakes(x))", "all x.((Person(x) & CheatingOnYou(x)) -> -GoodEnoughRightToCutBrakesOnCar(x))", "all x y.((RightFailure(x) & Car(y) & CheatingOn(x,y)) -> -GoodEnoughCriteriaToCutBrakes(x,y))", "all x.((CheatsOn(x) & Car(x)) -> -GoodEnoughForBreaks(x))", "all x y.(((CheatingOn(x) & Car(y)) -> -GoodEnoughForBreaks(x,y))", "all x.((CheatsOn(x) & Car(y) & CutsBrakes(x,y)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x.((Person(x) & CheatingOnYou(x)) -> -GoodEnoughSaintToCutBrakes(x))", "all x y.((Teacher(x) & Car(y) & CheatingYou(x,y)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x.((CheatingOn(x) & People(x)) -> -GoodEnoughRightThoughtToCutBrakesOnCar(x))", "all x.((Person(x) & CheatingOn(x)) -> -GoodEnoughRightToCutBrakes(x))", "all x.(CheatsOn(x) -> -GoodEnoughRightToCutBrakes(x))", "all x y.((CheatingOnYou(x) & Car(y)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x y z.((Prohibitor(x) & Car(y) & FraudingOn(x,y) & Car(y) & Brems(z,y)) -> -GoodEnoughBreathToCutter(x,y))", "all x.((CheatingOnYou(x) & PoorEnoughToCutBrakesOnCar(x)) -> -GoodEnoughCheatingOnCar(x))"]}
{"id": "enwn_validation_691", "nl": "Dita should not have cut the brakes on Martin's car.", "fol": "", "prediction": ["all x.((Dita(x) & MartinCar(x)) -> -CutBrakes(x,MartinCar))", "Dita should not have cut brakes on Martin's car.", "all x y.((Dita(x) & MartinCar(y)) -> -CrossedBrakes(x,y))", "Dita should not cut brakes on Martin's car.", "all x y z.((Tita(x) & Car(y) & Brakes(z)) -> -CutsBrems(x,y,z))", "Dita shouldn't have cut BrakesOnMartinsCar(d))", "Dita did not cut brakes on Martin's car.", "Dita did not cutBreaksOnMartinsCar(d))", "all x.(Dita(x) -> -CutBrokesOnMartinsCar(x))", "all x.((Dita(x) & -CutsBrakes(x,Martin)) -> -CutsBrakes(x,Martin))", "Dita should have cutthebrakesOnMartinsCar(d)).", "Dita should not have cut brakes on Martin's car.", "all x y.((Dita(x) & Martin(y)) -> -CheatedRebrakes(x,y))", "Martin's car should not have cut brakes on Dita's.", "Dita should not have cutBrakesOnMartinsCar(d))", "Dita & -CutBrake(d) & MartinsCar(a))"]}
{"id": "enwn_validation_692", "nl": "It's okay to break rules that aren't important.", "fol": "", "prediction": ["all x.((Rules(x) & -Important(x)) -> OK(x))", "all x.((Right(x) & -InterestingRight(x)) -> OKToBreak(x))", "all x.((Rules(x) & -Important(x)) -> OkToBreak(x))", "all x.((RuleBreakthrough(x) & -Important(x)) -> Okay(x))", "all x.(BreaksRules(x) & -Important(x))", "all x.((Rules(x) & -Instant(x)) -> OK(x))", "all x.((Rules(x) & -Important(x)) -> OK(x))", "all x.((Right(x) & -Important(x)) -> OKToBreak(x))", "all x.((Rules(x) & -Influential(x)) -> OK(x))", "all x.((Rule(x) & -Important(x)) -> OK(x))", "exists x.((Rules(x) & -Distinct(x)) -> OK(x))", "all x y.((Rule(x) & Rule(y) & -Important(y)) -> OkToBreak(x,y))", "all x.((Rules(x) & -Important(x)) -> OK(x))", "all x.((Rules(x) & -Important(x)) -> OK(x))", "all x.((Right(x) & -ImportantRules(x)) -> OK(x))", "all x y z.((Right(x) & Unimportant(y) & Rule(z)) -> OkayToBreak(x,z))"]}
{"id": "enwn_validation_693", "nl": "Movie theater rules say that no outside food is allowed.", "fol": "", "prediction": ["all x.(Directive(x) -> -(OutsideFoodAgreement(x) & AwareOf(x)))", "all x.((MovieTheaterRules(x) & -OutsideFood(x)) -> -Allowed(x))", "all x.(MovieTheaterRules(x) -> -BreaksOutsideFood(x))", "all x.(MovieTheaterRules(x) -> -OutsideFoodAllowed(x))", "all x.(MovieTheaterRules(x) -> -OutsideFoodAgain(x))", "all x.(MovieTheaterRule(x) -> -WithoutOutdoorFood(x))", "all x.(MovieTheaterRule(x) -> -OutsideFoodAllowed(x))", "all x.(MovieTheaterRule(x) -> -OutsideFoodAye(x))", "all x y z.((MovieTheaterRule(x) & Food(y) & Outside(z)) -> -LessTogether(x,y,z))", "all x.(MovieTheaterRules(x) -> NoOutsideFood(x))", "all x.((MovieTheaterRules(x) & -OutsideFoodAngled(x)) -> -Allowed(x))", "all x.(MovieTheaterRule(x) -> -OutsideFoodAvoided(x))", "all x.(MovieTheaterRules(x) -> (NoOutsideFood(x) & Allows(x)))", "all x.(MovieTheaterRules(x) -> -OutsideFood(x))", "exists x y.(MovieTheaterRules(x) & OutsideFood(y) & -LikelyLawn(x))", "all x y.((MovieTheaterRule(x) & OutsideFood(y)) -> -ArizonaAllowed(x,y))"]}
{"id": "enwn_validation_694", "nl": "Rules about not bringing outside food into establishments exist to increase on-site concession sales.", "fol": "", "prediction": ["all x y.((Rules(x) & OutsideFood(y) & InEstablishment(x,y)) -> IncreasesOnSiteConcessionSales(x,y))", "all x.((Rule(x) & -IncreasedConcessionSales(x)) -> OutdoorFoodNotFindable(x))", "all x.((Rules(x) & -BringHalloweenIntoEstablishments(x)) -> IncreasesOnSiteConcessionSales(x))", "all x y.((Rules(x) & OutsideFood(y) & Establishment(z) & -IncreasesConcessionDeals(x)) -> ThereAttributes(x,yz))", "all x y.((BringOutsideFood(x) & Establishment(y) & IncreasesOnSiteConcessionSales(x,y)) -> -BringsOutsideFood(x,y))", "all x.((Rules(x) & LimitsOutsideFood(x)) -> IncreasesOnSiteConcessionSales(x))", "all x.((Rules(x) & -OutsideFood(x) inEstablishments(x)) -> IncreasesConcessionSales(x))", "all x y.((Rule(x) & -BreakingOutsideFoodInEntablishments(x)) -> IncreasesOnSiteConcessionSales(y))", "all x.((Rule(x) & -IncreasesOnSiteConcessionSales(x)) -> ComesOutsideFood(x))", "exists x.(RuleAboutNotBringingOutsideFood(x) & IncreasesOnSiteConcessionSales(x))", "to increase OnSiteConcessionSales(x) -> RequirementsReducedWithoutOutsideFood(x))", "all x.((Rules(x) & -(OutsideFood(x) | Establishment(x))) -> IncreasesOnSiteConcessionSales(x))", "all x y.((Rule(x) & NonBringingOutsideFood(x) & Establishment(y)) -> IncreasesOnSiteConcessionSales(x,y))", "all x.((Rules(x) & -BringsOutsideFood(x)) -> IncreasesOnSiteConcessionSales(x))", "all x.((Rule(x) & -BringsOutsideFood(x)) -> IncreasesConcessionSales(x))", "all x.((Rules(x) & -BringOutsideFood(x) & Establishment(x)) -> IncreasesOnSiteConcessionSales(x))"]}
{"id": "enwn_validation_695", "nl": "Increasing on-site concession sales isn't important.", "fol": "", "prediction": ["all x.((ConcessionSales(x) & IncreasesOnSite(x)) -> -Important(x))", "all x.(SupplyOnSiteConcessionSales(x) -> -Important(x))", "all x.((OnSiteConcessionSales(x) & -Maintaining(x)) -> -Unimportant(x))", "all x.((ConcessionSales(x) & IncreasedOnSite(x)) -> -Important(x))", "all x.(IncreasingOnSiteConcessionSales(x) -> -Important(x))", "all x.((ConcessionSales(x) & IncreasedOnSite(x)) -> -Important(x))", "all x.((OnSiteConcessionSales(x) & -Important(x)) -> -Important(x))", "all x.((OnSiteConcessionSales(x) & Increased(x)) -> -Important(x))", "all x.((ConcessionSales(x) & IncreasesOnSite(x)) -> -Affluent(x))", "all x.(IncreasedOnSiteConcessionSales(x) -> -Important(x))", "all x.((CentricationSales(x) & Increase(x,onSiteSite)) -> -Important(x))", "all x.((ConcessionSales(x) & IncreasedOnSite(x)) -> -Important(x))", "all x.((OnSite(x) & ConcessionSales(x)) -> -Important(x))", "all x.((IncreasesConcessionSales(x) & OnSite(x)) -> Null(x))", "all x.((IncreasesOnSiteSales(x) & -NotImportant(x)) -> ConcessionSales(x))", "all x.((SupportsOnSiteConcessions(x) & Assembles(x)) -> -Important(x))"]}
{"id": "enwn_validation_696", "nl": "Sam broke the theater rules by bringing chips into the movie.", "fol": "", "prediction": ["all x y.((Sam(x) & TheaterRules(y)) -> BreaksByBringingChipsInto(x,y))", "all x.((Sam(x) & CameInFilm(x)) -> BreaksTheaterRules(x))", "all x y.((Sam(x) & Movie(y) & BringsChips(x,y)) -> BreaksTheaterRules(x,y))", "all x y.((Sam(x) & Company(y)) -> BreaksTheaterRules(x,y))", "all x.((Sam(x) & BreaksTheaterRules(x)) -> BringsChipsIntoMovie(x))", "all x y.((Sam(x) & Movie(y)) -> BreaksTheaterRules(x,y))", "all x y.((Sam(x) & TheaterRules(y) & BringsChipsIntoMovie(x,y)) -> Breaks(x,y))", "all x.((Sam(x) & Movie(y)) -> BreaksTheaterRules(x,y))", "all x y z.((Sam(x) & Theater(y) & Movie(z) & Playing(x,y)) -> BreaksRulesByBringingChips(x,z))", "all x y.((Sam(x) & Movie(y) & BringsChips(x,y)) -> BreaksTheaterRules(x))", "all x y z.((Sam(x) & Theater(y) & Movie(z) & BringsChips(x,y,z)) -> BreaksRules(x,y,z))", "all x.((Sam(x) & BreaksTheaterRules(x)) -> BringsChipsIntoMovie(x))", "all x y.((Sam(x) & TheaterRule(y)) -> Breaks(x,y))", "all x y z.((Sam(x) & Theater(y) & Chip(z)) -> BreaksRulesByBringingInto(x,y,z))", "all x.((Sam(x) & Chips(x)) -> BreaksTheaterRules(x))", "(BreaksTheater(sam) & BringsChipsIntoMovie(sam,sam))"]}
{"id": "enwn_validation_697", "nl": "Rules about not bringing food into establishments aren't important.", "fol": "", "prediction": ["all x.((Rules(x) & -IncludesFood(x)) -> -InterestsInEstablishments(x))", "all x.((Rule(x) & -BringingFoodIntoEstablishments(x)) -> -Irrelevant(x))", "all x.((Rule(x) & -InSettlements(x)) -> -Instant(x))", "all x.((Rules(x) & -BringFoodIntoElements(x)) -> -Important(x))", "all x.((Rule(x) & -MigratesFoodStartups(x)) -> -LimitsFoodIn(x))", "all x.((Rule(x) & -BringsFoodIn(x,Energy)) -> -important(x))", "all x.((Rule(x) & -RidesFoodIntoEntreprenures(x)) -> -Important(x))", "all x.(Regules(x) -> -ImportantInEstablishments(x))", "all x.((Regulation(x) & -BringsFoodInto(x,Establishments)) -> -Important(x))", "all x.((Rule(x) & -RigFoodInEmployments(x)) -> -Important(x))", "all x.((Rule(x) & -BringingFood(x)) -> -Imming(x))", "all x.((Rule(x) & -BringsFoodIntoEstablishments(x)) -> -Important(x))", "all x.((Rules(x) & -BringingFoodIntoEtablissements(x)) -> -Important(x))", "all x.((Rules(x) & -RequiresFood(x)) -> -Important(x))", "all x.((Rule(x) & -BringsFoodIntoEtablishments(x)) -> -Poor(x))", "all x y.((Role(x) & -Food(y) & Establishment(z)) -> -Important(x,y,z))"]}
{"id": "enwn_validation_698", "nl": "The movie theater rule that says no outside food is allowed is not important.", "fol": "", "prediction": ["all x.((MovieTheaterRule(x) & -OutsideFood(x)) -> -Important(x))", "all x.((MovieTheaterRule(x) & -OutsideFoodAllowed(x)) -> -Important(x))", "all x.((MovieTheater(x) & -OutsideFood(x)) -> -Important(x))", "all x.((MovieTheaterRoute(x) & -AboutOutsideFood(x)) -> -Important(x))", "all x.((MovieTheaterRule(x) & SaysNoOutsideFood(x)) -> -Important(x))", "all x.((MovieTheaterRange(x) & There's NoOutdoorFood(x)) -> -Important(x))", "all x.((MovieTheaterRight(x) & -ExternalFood(x)) -> -Important(x))", "all x.((MovieTheaterRichter(x) & -OutsideFoodAlert(x)) -> -Important(x))", "all x.((MovieTheaterRule(x) & NoOutdoorFood(x)) -> -Important(x))", "all x.((MovieTheaterRule(x) & -OutdoorFoodAdmitted(x)) -> -Important(x))", "all x.((MovieTheaterRight(x) & -OutsideFood(x)) -> -Instant(x))", "all x.((MovieTheaterRule(x) & -OutsideFoodAlike(x)) -> -LiMITILAR(x))", "all x.((MovieTheaterRange(x) & -OutsideFoodAtLarge(x)) -> -Important(x))", "all x y.((MovieTheaterRig(x) & -OutsideFood(y)) -> -Relevant(x,y))", "all x.((MovieTheaterRun(x) & -ExternalFood(x)) -> -Important(x))", "all x.((MovieTheaterRule(x) & ForbiddingOutsideFood(x)) -> -Important(x))"]}
{"id": "enwn_validation_699", "nl": "It's okay to break the movie theater rule that says no outside food is allowed.", "fol": "", "prediction": ["all x.((MovieTheaterRule(x) & -OutsideFood(x)) -> OKToBreak(x))", "all x.((MovieTheaterRule(x) & OutsideFoodIsAvoidable(x)) -> OKToBreak(x))", "all x.((MovieTheaterRegule(x) & SaysNoOutsideFood(x)) -> Okay(x))", "all x.((MovieTheaterRange(x) & -OutdoorFood(x)) -> Okay(x))", "all x.((MovieTheaterRange(x) & -OutsideFood(x)) -> OkayToBreak(x))", "all x.((Reflection(x) & MovieTheater(x)) -> BreaksRegel(x))", "exists x.(MovieTheaterRule(x) & SaysNoOutsideFoodLeak(x))", "all x y.((MovieTheater(x) & OutsideFood(y)) -> OKToBreak(x,y))", "all x.((MovieTheater(x) & BreaksFlashRight(x)) -> -OutsideFoodAtgranted(x))", "all x.((MovieTheater(x) & -OutsideFood(x)) -> OKToBreathe(x))", "exists x.(MovieTheaterRule(x) & -ExtendsOutsideFood(x))", "all x.((MovieTheaterRichard(x) & SaysNoOutsideFood(x)) -> OkayToBreak(x))", "can breakMovieTheaterRule(x) & -OutsideFoodAgreed(x))", "all x.((MovieTheaterRule(x) & -OutsideFood(x)) -> OK(x))", "all x.((MovieTheaterRole(x) & -OutsideFood(x)) -> OKToBreak(x))", "all x.((MovieTheaterRule(x) & RuleNoOutsideFood(x)) -> OKToBreak(x))"]}
{"id": "enwn_validation_700", "nl": "It was okay for Sam to take the chips into the theater.", "fol": "", "prediction": ["all x y.((Sam(x) & Theater(y)) -> TakeChipsInto(x,y))", "all x y.((Sam(x) & Theater(y)) -> TakesChips(x,y))", "all x y.((Sam(x) & Chips(y)) -> OkayToTakeIntoTheater(x,y))", "all x y z.((Sam(x) & Chips(y) & Theater(z)) -> OkToTakeInto(x,y,z))", "all x y.((Sam(x) & Chip(y) & ToLimit(x,y)) -> Okay(x))", "all x.((Sam(x) & TakesChipsInTheater(x)) -> OK(x))", "all x.((Sam(x) & TakeChipsIntoTheater(x)) -> AmenableToPresideInTheater(x))", "all x.((Sam(x) & TakesChips(x,Theater)) -> Okay(x))", "all x y.((Sam(x) & MovieTheater(y)) -> TakesChipsIn(x,y))", "all x.((Sam(x) & TakesChips(x) & Theater(x)) -> Accepted(x))", "all x y.((Sam(x) & Theater(y)) -> TakesCheopsInto(x,y))", "all x.((Sam(x) & Chips(x)) -> OKInTheater(x))", "All x.((Sam(x) & TakesChipsIntoTheater(x)) -> Okay(x))", "it was okay for Sam to take chipes into theater.", "all x.((Sam(x) & TakesChips(x)) -> Okay(x))", "all x y.((Sam(x) & Chips(y)) -> OKToTakeIntoTheater(x,y))"]}
{"id": "enwn_validation_701", "nl": "A physical response to a remark is escalation.", "fol": "", "prediction": ["all x.((Remark(x) & PhysicalResponse(x)) -> Escalation(x))", "all x y.((PhysicalResponse(x,y) & Remark(y)) -> Escalation(x))", "all x.(Response(x) -> Escales(x))", "all x y.((Remark(x) & Remark(y) & PhysicalResponse(x,y)) -> Escalade(x,y))", "all x.(Response(x) -> Escalation(x))", "all x y.((PhysicalResponse(x) & Remark(y)) -> Escalation(x))", "all x y z.((PhysicalResponse(x) & Remark(y) & Remark(z)) -> Escalation(x))", "all x.((Remark(x) & PhysicalResponse(x)) -> Escalation(x))", "all x y.((PhysicalResponse(x) & Remark(y)) -> Escalade(x))", "all x.((Remark(x) & Elements(x)) -> PhysicalResponse(x))", "all x y.((Remark(x) & Remark(y)) -> Escalade(y))", "all x.(PhysicalResponseToRemark(x) -> Escalation(x))", "all x.((Remark(x) & PhysicalResponse(x)) -> Escalation(x))", "all x.((PhysicalResponse(x) & Remark(x)) -> Escalade(x))", "all x y.((PhysicalResponse(x) & Remark(y)) -> Escalation(x))", "all x y.((Remark(x) & PhysicalResponse(x)) -> Escalation(y))"]}
{"id": "enwn_validation_702", "nl": "Luis dumped his soda on the guy sitting in front of him because the guy made a snide remark about Ravens fans.", "fol": "", "prediction": ["all x y z.((Gay(x) & Guy(y) & Raven(z)) -> DumpedSodaBecause(x,y,z))", "all x y.((Luis(x) & Guy(y) & SittingInFrontOf(y,x)) -> DumpedSodaForRemark(x,y,remember RavensFans))", "all x y z.((Luis(x) & Guy(y) & RavensFan(z) & SnideRemark(y,z)) -> DumpedSoda(x,y,z))", "all x y.((Addict(x) & Guy(y) & SeatedInFrontOf(y,x)) -> DumpedSoda(x,y))", "all x y.((Person(x) & Guy(y) & SitsInFrontOf(x,y)) -> DumpedSodaHasRemarkAboutRavensFans(x))", "all x y.((Gay(x) & Guy(y) & RavensFan(x)) -> DumpedSodaOn(x,y))", "all x y z.((Luis(x) & Guy(y) & RavensFan(z)) -> DumpedSodaOn(x,y,z))", "all x y z.((Curios(x) & Guy(y) & Raven(z)) -> DumpedSodaOn(x,y,z))", "all x y.((Luis(x) & Guy(y) & SittingInFrontOf(x,y)) -> DumpedSodaBecauseOfRemarkAboutRavensFans(x,y))", "all x y.((Luis(x) & Guy(y) & SittingInFront(x,y)) -> DumpedSoda(x,y,x))", "all x y.((Luis(x) & Guy(y) & SittingInFrontOf(y,x)) -> DumpedSoda(x,y))", "all x y.((Luis(x) & Guy(y) & SittingInFront(x,y)) -> DumpedSoda(x,y))", "all x y.((Luis(x) & Guy(y) & SittingInFront(y,x) & RavensFans(y,x)) -> DumpedSodaTo(x,y))", "all x y.((LuisSimpson(x) & Guy(y) & SittingInFrontOf(y,x)) -> DumpedSodaAgain(x,y))", "all x y z.((SittingInFrontOf(x,y) & RavensFan(z)) -> (DumpedSoda(x,y) & DumpedSodaOn(y,z)))", "all x y.((Man(x) & Raven(y)\" -> DumpedSodaBefore(x,y))"]}
{"id": "enwn_validation_703", "nl": "You shouldn't escalate conflicts.", "fol": "", "prediction": ["all x.(Conflict(x) -> -Execute(x))", "all x.((Conflict(x) & -Increase(x)) -> -Eschewed(x))", "all x.(Conflict(x) -> -Elevate(x))", "all x.(AcademicConflicts(x) -> -Together(x,y))", "all x.((Conflict(x)) -> -Increase(x))", "all x.(Conflict(x) -> -Engage(x))", "all x.((Conflict(x) & -Conflict(x)) -> -Evolve(x))", "all x.(Conflict(x) -> -Erupts(x))", "all x.((Conflict(x) & -Insurgent(x)) -> -Inflame(x))", "-((InitiatesConflicts(ish)) -> Not(x))", "all x.(DesescalatingConflicts(x) -> -(Issue(x) & Issue(x))))", "all x.(Conflict(x) -> -Escalation(x))", "-In escalatedConflicts((you may be doing somewhat(i))", "all x.(Conflict(x) -> -Execute(x))", "all x.(Confrontation(x) -> -Escalated(x))", "all x.((Traffic(x) & -Emulated(x)) -> -Emotion(x))"]}
{"id": "enwn_validation_704", "nl": "Luis escalated the situation by dumping his soda on the guy.", "fol": "", "prediction": ["Luis escalated the situation by DumpingSodaOnGuy(luis)", "Luis escalated the situation by dumpedSodaOnGuy(liu)", "Luis escalated the situation by DumpingSodaOnGuy(Luis,X))", "Luis escalated the situation by dumpingSodaOnGuy(luis)", "Luis escalated the situation by dumpingSodaOnGuy(luis,y))", "Luis escalated the situation by dumpingSodaOnGuy(Luis)", "Luis escalated the situation by dumpingSodaOnGuy.", "all x y.((Luis(x) & Guy(y) & DumpedSoda(x,y)) -> InescalatedSituation(x))", "Luis escalated the situation by dumpingSodaOnGuy(luis,y)", "EffortedSituationRainforth(Luis,DumpsSodaOnGuy)", "-EmulatedSituation(luis,danger) wasdumpedBySodaOn(luis,danger))", "(DumpingSodaOnGuy(Luis,x))", "all x y.((Luis(x) & DangerousSoda(y,x)) -> Dumped(x,y))", "all x y z.((Luis(x) & Soda(y) & Guy(z)) -> DumpedInIstanbul(x,y,z))", "all x y z.((Luis(x) & Soda(y) & Guy(z)) -> DumpedOn(x,y,z))", "Luis escalated the situation by dumpingSodaOnGuy(luis,y))"]}
{"id": "enwn_validation_705", "nl": "Luis shouldn't have dumped his soda on the guy.", "fol": "", "prediction": ["(DoubledSoda(x) | Luis(x)))", "-DumpedSodaOnLuis(Luis)", "all x.((Luis(x) & DumpedSodaOn(x)) -> -DumpedSodaOn(x))", "all x y.((Luis(x) & Guy(y)) -> -DumpedSoda(x,y))", "all x y.((Luis(x) & Guy(y)) -> -DumpedSodaOn(x,y))", "-DumpedSodaOnOtherGuy(luis,luis)", "man.NoDumpingSaft(Luis,DumbedSoda)", "Luis & DumpedSodaBefore(Luis)", "(Luis should've dumpedSodaOnGuy(luis))", "-DumpedSodaOnLuis.", "all x y.(((Luis(x) & Bicarbonate(y)) -> -DumpedOn(x,y))", "man, man.", "-DumpedSodaOnLucs(Lucs)", "all x.((Luis(x) & Soda(x)) -> -DumpedOn(x,y))", "all x y.((Luis(x) & Soda(y)) -> -DumpedOn(x,y))", "all x y.((Luis(x) & Soda(y)) -> -DumpedOn(x,y))"]}
{"id": "enwn_validation_706", "nl": "Esme copied a section of the Wikipedia article on Thomas Jefferson to put in her school report.", "fol": "", "prediction": ["all x.((Esme(x) & WikipediaArticle(y)) -> CopyToFocus(x,y))", "all x y.((Esme(x) & WikipediaArticle(y)) -> Copy(x,y))", "all x.((Esme(x) & wikipediaarticle(x,y)) -> Copy-PutInSchoolReport(x,y))", "all x y z.((Esme(x) & WikipediaArticle(y) & TaylorAndJefferson(z)) -> (CopiesSection(x,y,z) | PutsInSchoolReport(x)))", "all x y z.((Esme(x) & WikipediaArticle(y) & SchoolReport(z)) -> Copy(x,y,z))", "all x y.((Esme(x) & WikipediaArticle(y) & ThomasJeffrey(y)) -> Copy(x,y))", "all x y z.((Esme(x) & Wikipedia(y) & Book(z)) -> Copy-inToSchoolRule(x,y,z))", "all x y.((Esme(x) & WikipediaArticle(y) & ThomasJeffrey(y)) -> CopyedToReport(x,y))", "all x y z.((SectionOfWikipediaArticle(x) & ThomasJewish(y) & SchoolReport(z)) -> CopyedIn(x,y,z))", "all x.((Esme(x) & SubmittedNewSection(x)) -> ToReport(x))", "all x y.((Esme(x) & WikipediaArticle(y,x) & ThomasJefferson(y) & SchoolReport(t)) -> Copy(x,y))", "all x y.((Esme(x) & Wikipedia(y) & ThomasJeffrey(x)) -> UsedThan(x,y,Z))", "all x y.((Esme(x) & WikipediaArticle(y) & ThomasJefferson(x)) -> Copy(x,y))", "(CopiesTitusJeffreyOfWikipediaArticle(Esme) -> PutsInSchoolReport(Esme))", "all x.((Esme(x) & WikipediaArticle(x,y) & ThomasJefferson(y)) -> CopyAtomicToIntendSchoolReport(x,y))", "all x.((Esme(x) & WikipediaArticleOnTomWesley(x)) -> PutsInSchoolReport(x))"]}
{"id": "enwn_validation_707", "nl": "If you copy something without attribution, you're representing it as your own work.", "fol": "", "prediction": ["all x.((CopiesFree(x) & -Attribution(x)) -> RepresentsAsOwnWork(x))", "all x y.((CopyWithoutAttribution(x) & RepresentsAsOwnWork(x,y)) -> CopyWithAttribution(x,y))", "all x.((Copys(x) & -Authorization(x)) -> RepresentsWork(x))", "all x y.((Copy(x) & Work(y)) -> ReposesOwnWork(x,y))", "all x y.((Copie(x) & Copy(y) & NoAttribution(x)) -> RepresentsAsOwnWork(y))", "all x y.((Copy(x) & Work(y) & -Attribution(x,y)) -> RepelsAsOwn(x,y))", "all x.((CopyNotAttribution(x) & CopyWithAttribution(x)) -> ReprezentsOwnWork(x))", "all x.((OwnWork(x) & CopyWithoutAttribution(x)) -> Represents(x,ect.))", "all x.((Copys(x,y) & -Authorizes(x,y)) -> RepresentsWork(x,y))", "all x.((Copy(x) & -Attribution(x)) -> RepelsAsOwnWork(x))", "all x.(Cyclop(x) -> (Represent(x,OwnWork) & CopyWithoutAttribution(x)))", "all x.((Copys(x) & -Authorization(x)) -> RepealsAsOwnWork(x))", "all x.((Copy(x) & WithoutAttribution(x)) -> RepresentsAsOwnWork(x))", "all x.((CopyWithoutAttribution(x) & -AuthorizedWork(x)) -> RepresentsAsOwnWork(x))", "all x.((Copy(x) & -Attribution(x)) -> RepresentsOwnWork(x))", "all x.((Copy(x) & -Attribution(x)) -> OwnWork(x))"]}
{"id": "enwn_validation_708", "nl": "Esme didn't attribute the copied section.", "fol": "", "prediction": ["all x.(Esme(x) -> -AttributesCopy(x))", "Esme did not attributeCopyChange(esme.Section)", "all x.(Esme(x) -> -AttributesCopiedSection(x))", "Esme n'attributes(N.Cypher(N) / CopySection(Esme))", "Esme didn'tattributeCopy(e) -> -(CopySection(e) | Section(e)))", "Esme didn't attributeCopySite(x)", "Esme and CopiesTheSection(e) -> -Attributes(e,e,x))", "Esme n'attributesCopySection(Esme)", "Esme.((CopySection(Esme,x)) -> -Attributes(Esme,x))", "Esme didn't attributeCopyCitedSection(Esme)", "all x.(Esme(x) -> -AttributesCopies(x))", "exists x.(Esme(x) & -AttributesCopies(x))", "(-AttributesCopedSection(Esme))", "Esme -AttributesCopy(Esme,CrossedSection))", "Esme was not attributeingthecopyedSection(x) -> -IdentifiedCopy(x))", "Esme didn't attributeCopedSection(Esme)"]}
{"id": "enwn_validation_709", "nl": "Copying someone else's writing and representing it as your own work is plagiarism.", "fol": "", "prediction": ["all x y.((CopiesWriting(x,y) & Writing(y) & RepresentsAsOwnWork(x,y)) -> Plagiarism(x))", "all x.(CopiesAnotherWriting(x) & RepresentsAsOwnWork(x) -> Plagiarism(x))", "all x y.((Copy(x,y) & SomeoneMore(y)) -> Plagiarism(x))", "all x.(CopiesOtherWriting(x) & ReplacingAsOwnWork(x) -> Plagiarism(x))", "all x.((Copying(x,y) & Writing(y) & RepresentsAsOwnWork(x,y)) -> Plagiarism(x))", "all x y.((Copys(x,y) & WritesAndRepresents(x,y)) -> Plagiarism(x))", "all x y.((Copies(x,y) & SomeoneOtherWriting(x) & ReprezentsAsOwnWork(x,y)) -> Plagiarism(x))", "all x y z.((CopiesPersonalWriting(x) & OwnWork(y) & Represents(y,x)) -> Plagiarism(z))", "all x y.((Copies(x,y) & Writing(y) & RepresesAsOwnWork(x,y)) -> Plagiarism(x))", "all x.((CopiesAnotherWriting(x) & RepresentsAsOwnWork(x)) -> Plagiarism(x))", "all x y.((Copies(x,y) & Writing(y)) -> Plagiarism(x))", "all x y.((Copies(x,y) & Writing(y) & ReposesAsOwnWork(x,y)) -> Plagiarism(x))", "all x.((CopysWriting(x) & RepresentsAsOwnWork(x)) -> Plagiarism(x))", "all x.((CopiesWriting(x) & RepelsAsOwnWork(x)) -> Plagiarism(x))", "all x.((CopiesEachAlterWriting(x) & RepresentsAlterWork(x)) -> Plagiarism(x))", "all x.(CopiesPerson(x) & RepresentsAsOwnWork(x) -> Plagiarism(x))"]}
{"id": "enwn_validation_710", "nl": "Plagiarism is wrong.", "fol": "", "prediction": ["all x.(Plagiarism(x) -> Right(x))", "all x.(Plagiarism(x) -> Wrong(x))", "all x.(Plagiarism(x) -> Wound(x))", "all x.(Plaagiarism(x) -> Worst(x))", "all x.(Plagiarism(x) -> Irregular(x))", "all x.(Plagiarism(x) -> Worst(x))", "all x.(Poliarism(x) -> Wrong(x))", "all x.(Piliciarism(x) -> Worst(x))", "all x.(Plagiarism(x) -> False(x))", "all x.(Plagiarism(x) -> Wrong(x))", "all x.(Plagiarism(x) -> Worst(x))", "all x.(Plagiarism(x) -> Worst(x))", "all x and wrong(Plagiarism)", "all x.(Plagiarism(x) -> Wrong(x))", "all x.(Plagiarism(x) -> Worst(x))", "all x.(Plagiarism(x) -> Wrong(x))"]}
{"id": "enwn_validation_711", "nl": "Esme represented the copied section as her own work.", "fol": "", "prediction": ["all x.((Esme(x) & CopywrittenSection(x)) -> OwnWork(x))", "all x.(Esme(x) -> RepliedLayered(x,copying))", "all x y.((Esme(x) & CopyingSection(y)) -> RepresentedAsOwnWork(x,y))", "ALL x y.((Esme(x) & Copie(y)) -> ReplicatedSection(x,y))", "all x y.((Esme(x) & CopyedSection(y)) -> ReputedAsOwnWork(x,y))", "Esme represented the copied section as her own work.", "all x y.((Esme(x) & Copycat(y)) -> RepliedAsOwnWork(x,y))", "Esme represented the copiedSectionAsOwnWork(Esme)", "Esme representedcopiedSectionAsOwnWork(e) of.", "-CoveredSection(Esme)", "all x.(Esme(x) -> ReposesCopiedSectionAsOwnWork(x))", "Esme represented the copied section of her own work.", "all x y.((Esme(x) & CopycatSection(y)) -> Represented(x,y))", "(CopySection(esme) & OwnWork(esme))", "Esme representedCopiedSectionAsOwnWork.", "all x.(Esme(x) -> ReplacingCopyAsOwnWork(x))"]}
{"id": "enwn_validation_712", "nl": "Esme copied someone else's writing from Wikipedia and represented it as her own work.", "fol": "", "prediction": ["all x y z.((Esme(x) & Writing(y) & Wikipedia(z) & CopyedFrom(x,y) & RepresentedAsOwnWork(x)) -> CopyedFrom(x,z))", "all x y z.((Esme(x) & Author(y) & Writing(z)) -> (Copies(x,y,z) & Reprezentes(x,y)))", "all x y z.((Esme(x) & Writing(y) & Wikipedia(z)) -> (Copys(x,y,z) & Reprezents(x,y,z)))", "all x y.((Esme(x) & Writing(y)) -> (CopiesFrom(x,y) & RepresentsAsYourWork(x)))", "(CopiesWriting(Esme,Wikipedia) & Repr\u00e9sents(Esme,Wikipedia))", "all x.(Esme(x) -> (copyWriting(x) & RepresentsWork(x) & OccursFromWikipedia(x)))", "(CopysWikipediaWriting(Esme,Majikipedia) & ReprezentesAsOwnWork(Esme,Wikipedia))", "all x.(Esme(x) -> (CopiesWikipediaWriting(x) & RepresentsAsOwnWork(x)))", "all x.(Esme(x) -> CopyesWriting(x,Empirical) & RepresentsLifeWork(x,Empirical))", "all x y.((Esme(x) & Writing(y)) -> (Copys(x,y) & Represents(x,y)))", "all x.(Esme(x) -> (CopiesAndRepresentsFromWikipedia(x) & WorksAsDwelling(x)))", "all x y.((Esme(x) & Writing(y)) -> (CopiesFromWikipedia(x,y) & RepresentsAsOwnWork(x,y)))", "Esme croamed(e)'s writings(e) & RepeachedAsOwnWork(e))", "Esme aspires to become a copywriter. She copies writings from Wikipedia and represents them as ownwork.", "all x y.((Esme(x) & Writing(y)) -> (IsCopies(x,y) & IsTransformed(x,y)))", "all x y.((Esme(x) & Writing(y) & FromWikipedia(y,x)) -> (Copys(x,y) & Repels(x,y)))"]}
{"id": "enwn_validation_713", "nl": "Copying someone else's writing and representing it as your own work is wrong.", "fol": "", "prediction": ["all x.((CopysAndRepresentsOtherWriting(x) & Copying(x)) -> IsWrong(x))", "all x y.((CopyWriting(x) & Text(y) & ReplacingSecretWork(x,y)) -> Wasnt(x))", "all x y.((CopyingWriting(x) & CopyingAnotherWriting(y) & ReprezentingAsOwnWork(x,y)) -> Wrong(x))", "all x.((Copying(x,y) & Writing(y) & Replacing(x,y)) -> Wrong(x))", "all x.((CopysEvergreen(x) & RepresentsEitherWork(x,EachWord)) -> Irresponsible(x))", "all x.((CopiesWriting(x) & RepresentsAsOwnWork(x)) -> Irresponsible(x))", "all x y z.((CopiersPerson'sWriting(x) & ReplacingWork(y,z) & Work(z)) -> IsWrong(x))", "all x.((Copies(x,y) & Writing(y) & RepresentsAsOwnWork(x,y)) -> Wrong(x))", "all x y.((Copy(x) & Writer(y) & ReprezentsAsOwnWork(x,y)) -> IsWrong(x))", "all x.((CopyPersonalWriting(x) & RepresentsAltWord(x,Bush,AllowsWork)) -> Wrong(x))", "all x.((CopyTheFiction(x) & Person(x)) -> Wrong(x))", "all x.(CopyingSomeoneTwoWrongWriting(x) -> IsWrong(x))", "all x y.((Copies(x,y) & WritesOn(y) & Represents(x,y)) -> Irresponsible(x))", "all x y.(CopyingWriting(x,y) & ReplacingAsOwnWork(x) -> Wrong(x))", "all x y.((Poet(x) & Writing(y) & Replacing(x,y)) -> Wrong(x))", "all x.(Copies(x,y) -> (DepictsWork(x) & You(y) & Write(x,y)))"]}
{"id": "enwn_validation_714", "nl": "Esme shouldn't have copied from Wikipedia without attributing the copied section.", "fol": "", "prediction": ["all x.((Esme(x) & -CopiesFromWikipedia(x)) -> AttributedAttribution(x,X))", "all x y.((Esme(x) & Wikipedia(y)) -> Idle(x,y))", "(CopysFromWikipediaWithoutAttributing(Esme,Wikipedia))", "all x.(Esme(x) -> -CopiesFromWikipediaWithoutAttributingCopies(x))", "all x y.((Esme(x) & Wikipedia(y) & Copyed(x,y)) -> -Created(x,y))", "all x.((Esme(x) & Copy(x,Y) & Wikipedia(y)) -> -AttributesCopy(x,y))", "all x.((Esme(x) & CopyFrom(x,Wikipedia)) -> -CopiesFrom(x,Wikipedia))", "all x y.((Esme(x) & Wikipedia(y)) -> -CopiesFrom(x,y))", "all x.(Esme(x) -> (-CopyFromWikipedia(x) & AttributesCopy(x)))", "all x y.((Esme(x) & Wikipedia(y) & CopiedFrom(x,y)) -> -CopiedFromWithoutAttributing(x,y))", "all x.(Esme(x) -> Shouldn'tCopy(x))", "all x y z.((Esme(x) & Wikipedia(y) & Section(z)) -> -CopiesWithoutAttributing(x,z))", "all x.((Esme(x) & CopyRelatedSection(x)) -> -HasCroppedFromWikipedia(x))", "all x y.((Esme(x) & WikipediaPage(y)) -> -Copies(x,y))", "all x.(Esme(x) -> -CopysFromWikipediaWithoutAttributingCopy(x))", "(Layout(Esme,wiki) & Attributes(Esme,Copy))"]}
{"id": "enwn_validation_715", "nl": "You shouldn't induce people to help you do bad things.", "fol": "", "prediction": ["all x.((InducesPeople(x) & NoBadThings(x)) -> -InducesPeople(x))", "all x.(InducesPerson(x) -> -HelpDoBadThings(x))", "all x.((Induce(x) & -InduceBadPeople(x)) -> -InduceHelpForBadThings(x))", "all x.((InducingPeople(x) & -HelpDoBadThings(x)) -> -InducePeopleToHelpDoBadThings(x))", "all x.((InvitesPeople(x) & HelpsDoBadThings(x)) -> -InducesPeople(x))", "all x.((InducesPeople(x) & -HelpsDoBadThings(x)) -> -InducesPeople(x))", "none.(InducesPerson(x) -> HelpDoBadThings(x))", "-Induce(r) & InducesBadThings(r) & DosingBadThings(r))", "all x.((InducePerson(x) & DoBadThings(x)) -> -InducePerson(x))", "all x.((InducesPeople(x) & -HelpDoBadThings(x)) -> -InducesBadThings(x))", "all x.((InducesSomebody(x) & InvolvesBadThings(x)) -> -InducesIndividuals(x))", "(-InducesIgniteToHelpDoBadThings(x))", "all x.(InduceDoingBadThings(x) -> -Induce(x))", "all j.((Person(j) & Helping(z)) -> -InducesSpoilage(x,y,z))", "all x.((Person(x) & -Induces(x,y)) -> DoseBadThings(x))", "all x y.((Person(x) & BadThing(y)) -> -InducesToHelp(x,y))"]}
{"id": "enwn_validation_716", "nl": "Faking drug test results in competitive sports is cheating.", "fol": "", "prediction": ["all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))", "all x y.((FakingDrugTestResultsInCompetitiveSports(x) & CompetitiveSports(y)) -> Cheating(x))", "all x y.((FakingDrugTestResults(x) & CompetitiveSports(y)) -> Cheating(x))", "all x.((DrugTestResultFaking(x) & CompetitiveSports(x)) -> Cheating(x))", "all x y.((Faking(x) & CompetitorSports(y) & DrugTestScores(x,y)) -> Cheating(x,y))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))", "all x y.((FakingDrugTestResultsInCompetitiveSports(x) & CompetitiveSport(y)) -> Cheating(x))", "all x y z.((DopingResult(x) & CompetitiveSports(y) & CompetitiveSports(z)) -> Cheating(x))", "all x.((Faking(x) & DrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))", "all x y.((FakingDrugTestResults(x) & CompetitiveSports(y) & InCompetitiveSports(x,y)) -> Cheating(x))", "all x.((CompetitiveSport(x) & FakingDrugTestResults(x)) -> Cheating(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))", "all x.((FakingDrugExpects(x) & CompetitiveSports(x)) -> Cheating(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSportsResults(x)) -> Cheating(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))"]}
{"id": "enwn_validation_717", "nl": "Giles paid his friend for a urine sample to pass a drug test for a crew competition.", "fol": "", "prediction": ["all x.((Giles(x) & FriendsFriend(x)) -> PaidForUrineSampling(x))", "all x y.((Giles(x) & friend(y) & ToPassDrugTest(x,y)) -> paidForUrineSample(x))", "all x y z.((Giles(x) & friend(y) & UrineSample(z)) -> (PayedFor(x,y) & PassEdCroopCompetitions(y,z)))", "all x y.((Giles(x) & friend(y)) -> PaidForUrineSample(x,y))", "all x.(Giles-Paped(x) -> (Paid(x,y) & friend(y) & UrineSample(y) & DrugTest(z) & CrewCompetition(z)))", "all x y z.((Giles(x) & friend(y) & UrineSample(z) & DrugTest(z)) -> PaidForForProvides(x,y,z))", "all x y z.((Giles(x) & Friends(y) & UrineSample(z) & DrugToPassCompetition(x,y)) -> PaidFor(x,y,z))", "all x y.((Giles(x) & HisFriend(y)) -> (Payed(x,y) & UrineSample(x,y) & PharmaceuticalToPass(y,CrewCompetition)))", "all x y z.((Giles(x) & Pale(y) & UrineSampling(z)) -> PaidFor(x,y,z))", "all x.((Giles(x) & Friends(x,y)) -> PaidForUrineSampledToPassDrugTest(y,CrewCompetition))", "all x y.((Giles(x) & Friends(y) & PaddedForAugenis(x,y)) -> PassedAddictionTest(x))", "all x y.((Giles(x) & Freund(y)) -> PaidForUrineSample(x,y))", "all x.((Giles(x) & Pet(y)) -> (PaysForUrineSample(x,y) & PassDemoTest(x,y)))", "all x y.((Giles(x) & Friends(y,x)) -> PaidForYouthSample(x,y))", "Originally, Giles paid for urine sample by paying for drug test(r) & crewcompetition(g))", "all x y z.((Giles(x) & friend(y) & UreineSample(z) & PassDrugTest(y) & CrewCompetition(z)) -> PaidFor(x,y,z))"]}
{"id": "enwn_validation_718", "nl": "Using someone else's urine to pass a drug test is faking.", "fol": "", "prediction": ["all x y.((UseUnclessableUrine(x,y) & DrugTest(y)) -> Faking(x))", "all x y.((UsePersonsUrine(x,y) & DrugTest(y)) -> Faking(x,y))", "all x y.((UsePurpose(x,y) & DrugTest(y)) -> Faking(x))", "all x y.((UsesUseOfUse(x,y) & DrogenTest(y)) -> Faking(x))", "all x.((UsesUrine(x) & DrugTest(x)) -> Faking(x))", "all x y.((UsesEarningsToPassDrugTest(x) & DrugTest(y)) -> Faking(x))", "all x.((UsesUpper(x,y) & Urine(x)) -> Faking(x))", "all x y.((UsesNature(x,y) & DrugTest(x)) -> Faking(x))", "all x y.((UsesUserUrine(x,y) & DrugTest(y) & Passes(x,y)) -> Faking(x))", "all x y.((UsesUseNotYourUse(x,y) & DrugTest(y)) -> Faking(x))", "all x.((UsesUrine(x) & UsesAnotherUrine(x) & DrugTest(x)) -> Faking(x))", "all x.(PastsDrug(x) -> FakingUrine(x))", "all x.((UsesPerson'sUreine(x) & DrugTest(x)) -> Faking(x))", "all x y.((UsesPurine(x) & DrugTest(y)) -> Faking(x))", "All x.((UsesUseUse(x,y) & DrugTest(y)) -> Faking(x))", "all x y.((UsesPersonOtherUrine(x) & DrugTestPresent(y)) -> Faking(x))"]}
{"id": "enwn_validation_719", "nl": "Faking drug test results in competitive sports is wrong.", "fol": "", "prediction": ["all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Wrong(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Irresponsible(x))", "all x.((DrugTestResults(x) & CompetitiveSports(x)) -> Irresponsible(x))", "all x.(CompetitiveSports(x) & FakingDrugTestResults(x)) -> Wrong(x))", "all x.(FakingDrugTestResultsInCompetitiveSports(x) -> Wrong(x))", "all x.((FakingDrugTestResultsInCompetitiveSports(x)) -> Wrong(x))", "all x.((FailingDrugTestResults(x) & CompetitiveSports(x)) -> Wrong(x))", "all x.((CompetitiveSports(x) & FakingDrugTestResults(x)) -> Irresponsible(x))", "all x y.((FakingDrugTestResults(x) & CompetitiveSport(y)) -> Wrong(z))", "all x y.((Faking(x) & DrugTestResult(y) & CompetitiveSport(y)) -> Worst(x,y))", "all x.((DrugTestResults(x) & CompetitiveSports(x)) -> False(x))", "all x y.((DrugTestResult(x) & CompetitiveSport(y)) -> False(x))", "all x.((DrugTestResult(x) & CompetitiveSport(x)) -> Right(x))", "all x.((FakingDrugTestResults(x) & InCompetitiveSports(x)) -> Irrt(x))", "all x.((DrugTestResult(x) & CompetitiveSport(x)) -> WRONG(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> IsWrong(x))"]}
{"id": "enwn_validation_720", "nl": "Giles paid his friend for the sample to help him fake a drug test for a crew competition.", "fol": "", "prediction": ["all x y.((Giles(x) & Sampling(x,y) & Mate(y)) -> (PaysFor(x,y) & FakedDrugTestForCrewCompetition(x)))", "all x y z.((Giles(x) & Friends(y) & Sample(z)) -> PaidForToFakeDrug(x,y,z))", "all x y.((Gulles(x) & Friends(y)) -> PaidForSample(x,y))", "all x y.((Giles(x) & Friendsaur(y)) -> PaidFor(x,y))", "all x y.((Giles(x) & Freund(y)) -> PaidForSample(x,y))", "all x y z.((Giles(x) & Freund(y) & Sample(z)) -> (PaidFor(x,y) & FakesDrugTest(y,z)))", "all x y'all z.((Giles(x) & Sample(y) & Friend(z)) -> (PayedPrice(x,y,z) & HelpsFakeDrugTest(x,y,z)))", "all x y z.((Giles(x) & Freund(y) & Sample(z) & WasFakeDrugTest(y)) -> PaidFor(x,y,z))", "all x y z.((Giles(x) & Preferred(x) & Freund(y) & Sample(z)) -> PaidForToMakeDrugTest(x,y,z))", "all x y.((Giles(x) & Friends(y)) -> (PaidForSample(x,y) & FakeDrugTest(x,y)))", "all x y.((Giles(x) & Friends(y)) -> PaidFor(x,y))", "all x y.((Giles(x) & Friend(y)) -> ClaimForSample(x,y))", "all x y.((Giles,y) & ReviewedSample(y,x)) -> PaidToFakeDrugTestForCrewCompetition(y))", "all x y z.((Giles(x) & NewFriend(y) & Sample(z)) -> PaidToFakeDrugTest(x,y,z))", "(PayedGiles(Gipsey,Excel) & HelpedFakeDrugTest(Gipsey,CrewCompetition))", "all x y z.((Friend(x) & Giles(y) & Sample(z) & RepaidFor(y,z)) -> FakeDrugTest(y,z))"]}
{"id": "enwn_validation_721", "nl": "Giles paid his friend for the sample to help him do something wrong.", "fol": "", "prediction": ["all x y.((Giles(x) & Friends(y)) -> PaidForSample(x,y))", "all x y z.((Giles(x) & Friends(y) & Sample(z)) -> PaidFor(x,y,z))", "all x y.((Giles(x) & friend(y)) -> PaidForSampleToHelp(x,y))", "all x y.((Giles(x) & NewFriend(y)) -> PaidFor(x,y))", "all x y.((Friend(x) & Giles(y)) -> PaidForSample(y,x))", "all x y z.((Giles(x) & Freund(y) & Sample(z)) -> PaidFor(x,y,z))", "(PayedFamilyForSample(Giles) & HelpsDoMore(Giles))", "all x y.((Giles(x) & Pal(y)) -> PaidForSample(x,y))", "all x y.((Giles(x) & Friends(y)) -> PaidFor(x,y))", "all x y z.((Fate(x) & Friends(y) & Sample(z)) -> PaidFor(x,y,z))", "all x.((Giles(x) & Friendship(x)) -> Paid(x,y,z))", "all x y.((Giles(x) & Friends(y)) -> PaidForSampleToHelpDoWrong(x,y))", "all x y.((Giles(x) & friend(y)) -> PaidForSample(x,y))", "(PaysFriendForSample(Giles) & HelpsDoWrong(Giles))", "all x y.((Giles(x) & Friends(y)) -> Paid(x,y))", "(HasSample(Giles,Sample) & HelpIsWrong(Giles,Sample))"]}
{"id": "enwn_validation_722", "nl": "Giles shouldn't have paid his friend for the sample.", "fol": "", "prediction": ["Giles shouldn't have paid for sample(g.j.)", "exists x y.(Giles(x) & Friends(y) & -FundedForSample(x,y))", "all x.(Giles(x) -> -PayedFriendForSample(x))", "(-PaidForSample(Giles(Giles) -> -MoneyedForSample(Giles))", "Giles shouldn't have paid for sample(Giles)", "all x.((Friend(x) & Giles(x)) -> ShouldNeverPayedForSample(x))", "all x.((Giles(x) & Friend(x)) -> -PayedForSample(x))", "(-KeithGiles(Giles) - PaidForSample(Giles))", "(HasHiddenFriend(Giles,AdvisorSample))", "-(Giles(g) & friend(g)) -> -PaidForSample(g,s,g))", "((Giles(g) & BestFriend(g)) -> -PaidForSample(g,y)))", "all x.((Giles(x) & DonationsSample(x)) -> -HasFriendCrownedFor(x,sample,sample,sample))", "all x.((Giles(x) & Gaffe(x)) -> -CeredForSample(x,y))", "Giles should have paid her friend $3000 for the sample.", "all x.((Giles(x) & friend(x)) -> Shouldn'tPayed(x,Sample))", "all x y.((Giles(x) & friend(y)) -> -PayedForSample(x,y))"]}
{"id": "enwn_validation_723", "nl": "A store is a public location.", "fol": "", "prediction": ["all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x.exists y.(Store(x) & Location(y) & Public(x,y))", "all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))"]}
{"id": "enwn_validation_724", "nl": "It's polite to cover your mouth when coughing in a public location.", "fol": "", "prediction": ["all x.((Coughing(x) & PublicLocation(x)) -> PoliteToCoverMouth(x))", "all x y.((Coughing(x) & PublicLocation(y)) -> PoliteToCoverMouth(x,y))", "all x.(PoliteToPossiblyCoverMouthWhenCoughingInPublicLocation(x) -> (CoughsInPublicLocation(x) & -CoughsInPublicLocation(x)))", "all x y.((Cough(x) & PublicLocation(y)) -> Polite(x))", "all x.((Coughing(x) & PublicLocation(x)) -> PoliteToCoverMouth(x))", "all x y.((CoughingState(x) & PublicLocation(y)) -> PoliteToCoversMouth(x,y))", "all x y.((PoliteToCoverMouth(x) & PublicLocation(y)) -> (CoversMouth(x,y) & CoughsIn(x,y)))", "all x y.((CoughingLocation(x) & PublicLocation(y)) -> PoliteToCoverMouth(x,y))", "all x.((Coughing(x) & PublicLocation(x)) -> PoliteToCoverMouth(x))", "all x.((Coughing(x) & PublicLocation(x)) -> PoliteToCoverMouth(x))", "all x y.((Coughing(x) & PublicLocation(y)) -> PoliteToCollar(x,y))", "all x.((Coughing(x) & PublicLocation(x)) -> PoliteToCoverMouth(x))", "all x y.((Conversation(x) & Public(y)) -> Polite(x))", "all x.((Coughing(x) & PublicLocation(x)) -> PoliteToCoverMouth(x))", "all x.((CoughingLocation(x) & CoversMouth(x)) -> Polite(x))", "all x y.((PoleTick(x) & PublicLocation(y)) -> CoversMouth(x,y))"]}
{"id": "enwn_validation_725", "nl": "Rajesh coughed without covering his mouth in line at the drugstore.", "fol": "", "prediction": ["all x y.((Rajhesh(x) & Drugstore(y)) -> NoCoveredMouth(x))", "all x.(Rajesh(x) -> (CoopsWithoutCoveringMouth(x) & Drugstore(x)))", "all x y.((Rajesh(x) & Drugstore(y)) -> CoughedWithoutColour(x,y))", "all x.(Rajash(x) -> (Coughed(x) & -CoveredMouthInLine(x)))", "all x y.((Patient(x) & Drugstore(y) & Rajesh(x)) -> CoughsDry(x,y))", "all x.((Rajash(x) & Coughed(x)) -> NoMouthCovering(x))", "all x y.((Rajesh(x) & Drugstore(y)) -> CoughedWell(x,y))", "all x y.((Rajesh(x) & Drugstore(y)) -> CoughedAndFoundAt(x,y))", "\u0435\u0440(Rajesh,MuseumClosing) & CashStore(Rajesh,MouthClosure))", "all x.(Rajesh(x) -> Cought(x))", "all x.((Rajesh(x) & Coughed(x) & -CoilsMouth(x)) -> Drugstore(x))", "all x y.((Rajesh(x) & Drugstore(y)) -> CoughedWithoutCoveringMouth(x,y))", "all x.(Rajesh(x) & Coughmed(x) & -CoversMouth(x))", "all x y.((Rajash(x) & Drugstore(y)) -> CoughsMouthBecauses(x,y))", "all x y.((Rajash(x) & Drugstore(y)) -> DoesCough(x,y))", "all x.((Rajish(x) & CoughedWithoutCoveringMouth(x)) -> Drugstore(x))"]}
{"id": "enwn_validation_726", "nl": "It's polite to cover your mouth when coughing in a store.", "fol": "", "prediction": ["all x.((CoughingInStore(x) & CoversMouth(x)) -> Polite(x))", "all x y.((CoughingStore(x) & Store(y)) -> Polite(x))", "all x.((CoughingInStore(x) & CoversMouth(x)) -> Polite(x))", "all x y.(((CoughingStore(x) & Store(y)) -> PoliteToCover(x,y))", "all x y.((ToCough(x) & StoreIn(y)) -> Polite(x,y))", "all x y.((Polite(x) & Store(y) & CoughsIn(x,y)) -> CoversMouth(x))", "all x y.((CoughingCenter(x) & Store(y)) -> PoliteToCoverMouth(x))", "all x.((CoughingInStore(x) & CoversMouth(x)) -> Polite(x))", "all x y.((CropInStore(x) & Store(y)) -> Porous(x,y))", "everyone is polite & exists x.(CoughingStore(x) & CoversMouth(x))", "all x y.((Coughing(x) & Store(y)) -> PoliteToCoverMouth(x,y))", "all x y.(((Polite(x) & Store(y) & CoughingIn(x,y)) -> CoversMouth(x))", "all x y.(((Store(x) & Store(y)) -> CoversMouth(x,y))", "all x y z.((Coughing(x) & Store(y) & MouthCoughing(z)) -> (Polite(x,y) & Covers(x,z)))", "all x.((Coughing(x) & Store(x)) -> Polite(x))", "all x y.((CoughingStore(x) & Store(y)) -> PoliteToCoverMouthIn(x,y))"]}
{"id": "enwn_validation_727", "nl": "Rajesh should have covered his mouth.", "fol": "", "prediction": ["Rajesh should have covered mouth(Rajesh)", "all x y.((Rajesh(x) & Mouth(y)) -> ShouldHaveCovered(x,y))", "-(Rajesh(r) & CoveredMouth(r)))", "All x.((Rajesh(x) & MustCoverMouth(x)) -> ShouldFundament(x))", "Rajesh should have covered mouth.", "all x.(Rajesh(x) -> ShouldHaveCoveredMouth(x))", "Rajesh should have covered mouth(r)", "-(Rajesh(r) & ShouldCoveredMouth(r))", "Rajesh should have covered mouth.", "Rajesh should have covered mouth.", "all x.(Redesh(x) -> ShouldHaveCoveredMouth(x))", "-(Jayesh(Rajesh) & Mummy(Rajesh))", "all x.(Rajesh(x) -> ShouldAccompaniedMouth(x))", "Rajesh should have covered mouth.", "all x.((Rajesh(x) & Mama(y)) -> ShouldCoverMouth(x))", "Rajesh should have covered mouth."]}
{"id": "enwn_validation_728", "nl": "Marina told her parents that she was going to be staying over at a friend's house.", "fol": "", "prediction": ["all x y.((Marina(x) & Parent(y)) -> Intervened(x,y))", "all x y z.((Marina(x) & Parent(y) & FriendsHouse(z)) -> SpottyAt(x,y,z))", "all x y z.((Marina(x) & Dad(y) & House(z)) -> (StayingAtFriend(x,z) & For(x,y,z)))", "all x y z.((Marine(x) & Parent(y) & FriendsHouse(z) & SingingAt(x,z)) -> Tells(x,y))", "all x.((Marina(x) & FriendsHouse(x)) -> SheWorriedToStayAt(x,y))", "all x y z.((Marina,Storm,FriendsHouse(z) & InHome(m)) -> InformsParents(m,a))", "all x y z.((Marina(x) & Parent(y) & House(z)) -> HasHouse(x,y,z))", "all x y.((Marine(x) & Parent(y) & FriendsHouse(z)) -> SobbedAt(x,y,z))", "all x y z.((Madame(x) & Parent(y) & FriendsHouse(z)) -> WillStayOverAt(x,z))", "all x.((Marina(x) & FriendsHouse(x)) -> StayingAt(x,Marina,1))", "all x y z.((Marina(x) & Parents(y) & Room(z)) -> WillStayAtFriendCompact(x,z))", "all x y.((Marina) & Parent(y)) -> (LocationAtFriendsHouse(y) & Marina(x,y)))", "((Marina (Marina) | -StayingAtFriendsHouse(Marina)))", "all x y z.((Marina(x) & Parent(y) & FriendsHouse(z) & StaysAt(x,y,z)) -> SpentAt(x,y,z))", "all x.(Nature(x) & SpentInFriendsHouse(x))", "all x y z.((Mama(x) & Parents(y) & Food(z)) -> (StolingOverAtFriendsHouse(x,z) & Moms(x,y)))"]}
{"id": "enwn_validation_729", "nl": "In reality, she was going to be at an all-night house party.", "fol": "", "prediction": ["all x.((Reality(x) & SheWasAtAllNightHouseParty(x)) -> NothingSilent(x))", "in reality, she was going to be atallnightHouseParty(s)", "all x.(Reality(x) -> AllNightHouseParty(x))", "all x.(RealityDatAllNightHouseParty(x) -> MissKate(x))", "(all x.(HallAt(x) -> WillBeAt(x)))", "all x.((Clothing(x) & AllNightHouseParty(x)) -> Started(x))", "all x.((SheHouseParty(x) & AllNight(x)) -> GoingToBe(x))", "all x.((RealThan(x) & AllNightHouseParty(x)) -> GoingToBe(x))", "(all x.(HouseParty(x) & NightParty(x)) -> AllNight(x))", "all x.(SheWasLivingAtAllNightHouseParty(x) -> ComingTo(x))", "(all x.(Danny(x) -> AllNightHouseParty(x)))", "all x.((At(x,allnightHouseParty)) -> GoingToBe(x))", "(AllNightHouseParty(Nataly) -> GoingTo(Nataly)))", "all x.((Reality(x) & Event(x)) -> AllNightHouseParty(x))", "(all x.((Joan(x) & HouseParty(x)) -> AllNight(x)))", "\u043e\u043e\u043b\u043e\u0438\u0435 \u0440\u0430\u043e\u0442y, \u043a\u043e\u0442\u043e\u0440\u0435 \u043d\u0435 SHE WASATINGATallNightHouseParty(Camille) \u043e \u0440\u0430\u0432\u043e."]}
{"id": "enwn_validation_730", "nl": "You're lying to someone if you tell them you're planning one thing but you're really planning something else.", "fol": "", "prediction": ["all x.((ListensTo(x,y) & PlanOneThing(x) & PlanOneOtherThing(y)) -> Liking(x))", "all x.((Liking(x) -> (PlansOneThing(x) & PlansDifferentThing(x)))", "all x y.((Dose(x) & People(y) & Plans(x,y) & Planes(x,y)) -> Loyal(x))", "all x y.((Liking(x) & TellsOneThing(x) & TellsAnotherThing(x)) -> -Lirting(x))", "all x y.((Liking(x) & Person(y) & TellsYouPlanPlansOneThingButPlansOtherThing(x,y)) -> L\u00fcdging(x))", "all x y.((Liking(x) & TellsPerson(y) & PlanOneThing(y) & PlanAndOtherThing(y)) -> (Lays(x,y) & IsPlanningOneThing(y)))", "(Liking(Liking(Living(Liking(Liking(Liking(Liking) -> (PlansOneThing(Liking(Liking) | PlanesWanderingThing(Liking))))", "all x y.((Liking(x) & TellsPeople(y) & PlanningOneThing(x,y) & PlanningAnotherThing(y)) -> L\u00fcgsTo(x,y))", "all x y.((Liking(x) & Tellment(y) & PlanOneThing(y) & PlanAndOtherThing(y)) -> Lies(x,y))", "all x y.((Living(x) & TellsPlanning(x,y) & Someone(y) & Planned(x,y)) -> Plagiarism(x))", "all x.((Likel(x) & SaysPlanThem(x) & TellsEm(x) & PlanningAnotherThing(x)) -> LiesTo(x))", "all x y z.((LikingTo(x) & TellsPerson(y) & Planning(z) & OneThing(y) & AnotherThing(z)) -> Lie(x))", "all x y.(((PlanningThing(x) & PlanningSomething(y)) -> IsLiving(x,y))", "all x y z.((Runway(x) & Person(y) & Things(z) & Tells(x,y,z)) -> (Liking(x,y) & PlanningOneThing(x) & PlanningMoreThing(x)))", "all x y.((Lying(x) & Tell(y) & PlanningOneThing(y) & RequiresOtherThing(x,y)) -> L\u00fcfting(x))", "all x y.((Liking(x) & TellsProject(y) & PlannedThing(x) & PlannedThing(x)) -> Claims(x))"]}
{"id": "enwn_validation_731", "nl": "Lying to someone that you're not doing something dangerous prevents them from helping you in an emergency.", "fol": "", "prediction": ["all x y.((LikingTo(x,y) & Person(y) & -Dangerous(y)) -> ReproducesHidingInEmergency(x,y))", "all x y.((LikesTo(x,y) & (DoingDanger(y) | DoingDangerous(y))) -> PreventsHelping(x,y))", "all x.((Lying(x) & -Dangerous(x)) -> PreventsEmergencyHelp(x))", "all x y.((Person(x) & ProvidingDangerous(x)) -> NotHelpingInEmergency(x,y))", "all x y.((LikingToTheMom(x) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))", "all x y.((Person(x) & -Dangerous(y)) -> PreventsHelpInEmergency(x,y))", "all x y.((Liking(x) & Person(y) & -Dangerous(y)) -> -NecessaryInEmergency(x,y))", "all x y.((LikingTo(X) & Person(y) & -Dangerous(y)) -> PreventsHelpingInEmergency(y,x))", "all x y.((Lying(x) & Friend(y)) -> -Dangerous(x,y)))", "all x y.((Lying(x) & Someone(y) & -Dangerous(x)) -> PreventsHelpingInEmergency(y,x))", "all x y.((Person(x) & Person(y) & -Dangerous(x)) -> PreventsHelpingInEmergency(y,x))", "all x y.((Liking(x) & NotDangerous(x)) -> (ProhibitsHelpingInEmergency(y)))", "all x.((LivingToDoDangerous(x) & NotDoingDangerous(x)) -> PreventsHelpingInEmergency(x))", "all x y.((LyingTo(x,y) & Person(x) & -Dangerous(x)) -> PreventsHelpingInEmergency(x,y))", "all x.((LaysTo(x,y) & -DangerousDoes(y)) -> PreventsHelpingInEmergency(x,y))", "all x y.((LiesTo(x) & Person(y) & -DangerousDaily(y)) -> -HelpsInEmergency(y,x,y))"]}
{"id": "enwn_validation_732", "nl": "Partying is potentially dangerous.", "fol": "", "prediction": ["all x.(Partying(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))", "all x y.((Party(x) & Party(y)) -> PotentiallyDangerous(x))", "all x.((Partying(x) & PotentiallyDiagnostic(x)) -> CanMakeYouParty(x))", "all x.(Party(x) -> PotentiallyDangerous(x))", "exists x.(Party(x) & PotentiallyDangerous(x))", "all x.(Party(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))"]}
{"id": "enwn_validation_733", "nl": "Preventing someone from helping you in an emergency is potentially very harmful.", "fol": "", "prediction": ["all x.((PreventsPeopleHelpingInEmergency(x) & PersonHelpingInEmergency(x)) -> PotentiallyHarmful(x))", "all x.(PreventsHelpingInEmergency(x) -> PotentiallyHarmful(x))", "all x y.((HelpInEmergency(x) & Person(y)) -> PotentiallyHarmful(x,y))", "all x.(PreventsHelping(x) -> PotentiallyHarmful(x))", "all x y.((Helps(x,y) & Emergency(y)) -> -Hazardous(x))", "all x.((PreventsAttendance(x) & InEmergency(x)) -> PotentiallyHarmful(x))", "all x.(PreventsAnyoneFromHousingInEmergency(x) -> PotentiallyHarmful(x))", "all x y.((ParticipatesInEstablism(x) & Person(y)) -> CanBeHarmfulLawyer(y))", "all x.(PreventsHelpInEmergency(x) -> PotentiallyHarmful(x))", "all x.((PreventsHelpingEmergency(x) & Person(x)) -> PotentiallyHarmful(x))", "all x.((PreventsHelpingInEmergency(x) & HelpingInEmergency(x)) -> PotentlyHarmful(x))", "all x.((PreventsHelping(x) & Emergency(x)) -> PotentiallyHarmful(x))", "all x y.((Door(x) & Emergency(y) & Helping(x,y)) -> Harmful(x))", "all x y.((Prevent[x,y) & EmergencyEmergency(y)) -> PotentiallyHarmful(x,y))", "all x.((PreventsHelpingInEmergency(x) & HelpingInEmergency(x)) -> PotentiallyHarmful(x))", "all x.((ProtectsHelpingInEmergency(x) & HelpingInEmergency(x)) -> PotentiallyHarmful(x))"]}
{"id": "enwn_validation_734", "nl": "Marina told her parents she wouldn't be at a party, but she was actually going to a house party.", "fol": "", "prediction": ["all x.((Miami(x) & Divorce(x)) -> (-AtParty(x) | GoingToHouseParty(x)))", "(all x.((Marina(x) & PartyParty(x)) -> -(Marina(x) | HouseParty(x))))", "all x y.((Marina (x) & Parent(y) & AtParty(y,x)) -> NoParty(x))", "(all x.((Marine(x) & -Party(x)) -> Afraid(x)))", "(all x.(Marina(x) -> -AtParty(x)))", "(all x y.((Marine(x) & Parents(y)) -> -AtParty(x,y)) & all z.((Marine(z) & -AtParty(z,y))) -> AtHouseParty(z,y)))", "all x y.((Marine(x) & RoomParty(y)) -> (-AtParty(x,y) | In-Party(x,y)))", "all x y z.((Madame(x) & Parent(y) & Party(z)) -> (-AtParty(x,y) & BecameHouseParty(x,z)))", "all x y.((Brata(x) & Parent(y)) -> (-AtParty(x,y) & GoingToHouseParty(y)))", "((Marina(Marina) & Party(Marina)) | (-Marina(Marina) & HouseParty(Marina))))", "(all x y.((Marina(x) & Parent(y)) -> -AtParty(x,y)) & -((Marina(x) & HouseParty(y))) -> WasAtParty(x,y)))", "all x y.((Mama(x) & Parent(y)) -> (Clicks(x,y) | Has(x,y)))", "exists x.(Campaign(x) & -(Yougly(x) & Friend(x)) & -(Youngy(x) & Friend(x)))", "all x y z.((Marine(x) & Parent(y) & HouseParty(z)) -> (-AtParty(x,y) & GoingToParty(x,z)))", "all x y z.((Marina(x) & Parent(y) & Parent(z) & -AtParty(x,y)) -> (Marina(x) & GoingToHouseParty(x,z)))", "all x y.((Miami(x) & Parent(y) & -AtParty(x,y)) -> (SeemsToBeAtHouseParty(x) & GoingToParty(x)))"]}
{"id": "enwn_validation_735", "nl": "Marina lied to her parents to give them the impression she wouldn't be going to a house party.", "fol": "", "prediction": ["all x y.((Marina(x) & Parent(y)) -> LiesTo(x,y))", "all x.((Marina(x) & LiesToParents(x)) -> -GoingToHouseParty(x))", "all x y z.((IsPast(x) & Marina(y) & Parent(z) & LedTo(y,z)) -> -HouseParty(z))", "all x.(LikedToParents(x) -> \"Marine-NoHouseParty(x)\")\"", "all x.(LiredToParents(x) -> -BeingToHouseParty(x))", "all x y z.((Marina(x) & Parent(y) & HouseParty(z) & Lies(x,y)) -> -AtHouseParty(x,z))", "all x y.((Marina) & Parent(y)) -> (LikedTo(x,y) & GonnaGainImpression(x,y)))", "all x y.((Marine(x) & Parents(y)) -> (Lied(x,y) & WasOnlyToBeToHouseParty(x,y)))", "all x y.((Marina(x) & Parents(y) & LilliedTo(x,y)) -> -AtHouseParty(x))", "all x.(LikedToParents(x) -> -(MargarettaSheep(x) & HouseParty(x)))", "(LiredToParents(Marina) & BesideHouseParty(Marina))", "all x y z.((Marine(x) & Parent(y) & HouseParty(z)) -> LyingTo(x,y) & Didn'tBeGoingTo(x,z)))", "all x.(LikedToParents(x) -> Marina & NeverMarinaGoesToHouseParty(x))", "all x y.((Marina(x) & Parent(y)) -> IlliedToToGivingImpression(x,y))", "all x.((Marina,Pastor) & LeftImpression(Marina,Pastor)) -> LiedToToss(Marina,Pastor))", "all x.((Marina(x) & LiliedToParents(x)) -> -HouseParty(x))"]}
{"id": "enwn_validation_736", "nl": "Lying to someone that you're not partying prevents them from helping you in an emergency.", "fol": "", "prediction": ["all x y z.((Less(x,y) & Person(z) & -Partying(x,z)) -> PreventsHelping(x,z))", "all x y.((LyingTo(x,y) & -Partying(y)) -> PreventsEmergencyHelp(x,y))", "all x.((Liking(x) & -Partying(x)) -> AxisProvidesEmergencyHelp(x,y))", "all x y.((Lying(X) & / _Participating(x)) -> StopsInterference(y,x))", "all x.((LyingTo(x) & -Partying(x)) -> PreventsEmergencyHelp(x))", "all x.((Liking(x) & -Partying(x)) -> PreventsEmergencyHelp(x))", "all x.(LiliesTo(x,y) -> -Partying(y))", "all x y.((LikingTo(x,y) & Person(y) & -Partying(x)) -> -HasHelpedInEmergency(y))", "all x y.((Person(x) & -Partying(x) & Partying(y)) -> HelpfulInEmergency(x,y))", "all x y.((Reacts(x) & Partying(y)) -> PreventsHelpingInEmergency(x,y))", "all x y.((LivingTo(x,y) & -Partying(x,y)) -> PreventsEmergencyHelp(x))", "all x y.((LikingTo(x,y) & ThenPartying(x)) -> PreventsSincerity(x,y))", "all x y.((Licken(x) & Person(y) & -Partying(y)) -> PreventsHelpingElectricity(y,x))", "all x.((Spoiling(x) & -Partying(x)) -> PreventsHelpingEmergency(x))", "all x.((Living(x) & -Partying(x)) -> PreventsEmergencyHelp(x))", "all x y.((LiesTo(x,y) & Person(x) & -Partying(x)) -> -HelpsInEmergency(x,y))"]}
{"id": "enwn_validation_737", "nl": "Lying to someone that you're not partying does more harm than good.", "fol": "", "prediction": ["all x y.((Act(x) & Person(y)) -> -Partying(y))", "all x y.((Intimate(x) & Person(y)) -> -Partying(y))", "all x.((Lying(x) & -Partying(x)) -> DoesMoreHarmThanGood(x))", "all x.((Liking(x) & -Partying(x)) -> DoesMoreHarmThanGood(x))", "all x.((LyingTo(x,y) & -Partying(y)) -> InfectsMore(x,y))", "all x.(NoPartying(x) -> DamageDoesMoreThanGood(x))", "all x.((Lies(x) & -Partying(x)) -> MoreHarmThanGood(x))", "all x.((LyingTo(x) & -Partying(x)) -> DoesMoreHarm(x,Good))", "all x y.((Loves(x,y) & Person(x)) -> -Partying(y))", "all x y.((Relating(x,y) & Person(y) & -Partying(x)) -> DoesMoreHarm(x,y))", "all x y.((LikingTo(x,y) & Person(y) & -Partying(x)) -> DoesMoreHarmTheftOfGood(x,y))", "all x.(LyingTo(x,y) -> -Partying(x))", "all x y.((LyingTo(x,y) & Person(y) & -Partying(y)) -> MoreHarmDiseaseThanGood(x))", "all x y.((LyingTo(x,y) & Partying(y)) -> MoreHarm(x,y))", "all x y.((LyingTo(x,y) & -Partying(y)) -> MoreHarmThanGood(x))", "all x.((LyingToPerson(x) & -Partying(x)) -> DoesMoreHarmThanGood(x))"]}
{"id": "enwn_validation_738", "nl": "Marina's lie to her parents did more harm than good.", "fol": "", "prediction": ["all x y.((LieTo(x,y) & Marina'sParents(x)) -> DoesMoreHarmThanGood(y))", "all x.((Learn(x,Marina) & Parents(x)) -> BetterThanGood(x))", "all x y.((Marine(x) & Marina(y)) -> LibelToParentsDoesMoreHarm(y,x))", "all x.((LieToMadmothers(x) & Marina'sPatients(x)) -> DoneMoreHarmThanGood(x))", "all x y.((Liar(x) & Marina(y) & Parents(y)) -> DidMoreHarmThanGood(y))", "all x y.((Marina(x) & Loy(y,x)) -> InHazardFactors(x))", "all x y.((LittleToPrimary(x,y) & Marina(y)) -> DidMoreHarmThanGood(y))", "all x y.((LessTo(x,y) & Marina'sParents(y)) -> DidMoreHarmThanGood(y))", "all x y z.((Marina'sLieToParents(x) & Marina's(y,z)) -> MoreHarmThanGood(z))", "all x y z.((Marine(x) & LieToParents(y) & Marina(z)) -> (DoesMoreHarm(x,z) & BetterBenefit(x,z)))", "all x y.((LayToNadine(x) & Family(y) & Marina(x)) -> (Damaged(x,y) | Developed(x,y)))", "all x y z.((Marine(x) & LinyTo(x,y) & Parents(y)) -> DidMoreHarmThanGood(x,y))", "all x.(LittleToParents(x) -> (MoreHarm(x) | MoreGood(x))))", "all x.((Marine(x) & LigeToParents(x)) -> DoesMoreHarmAndGood(x))", "all x y.((Lird(x) & MarinasParents(y)) -> DidMoreHarmThanGood(x,y))", "all x.((LikeyToParents(x) & Marina(x)) -> DidMoreHarmThanGood(x))"]}
{"id": "enwn_validation_739", "nl": "Marina shouldn't have lied to her parents.", "fol": "", "prediction": ["all x.((Marina(x) & -DelusionsToParents(x)) -> -LimitsToParents(x))", "(IlliedToParents(Marina))", "all x y.((Marina(x) & Parents(y)) -> -Liked(x,y))", "all x y.((Marina(x) & Parent(y)) -> -LikedTo(x,y))", "all x.((Marina(x) & -LikedToParents(x)) -> Shouldn'tHaveLikedToParents(x))", "Marina should've never lied to her parents.", "all x.((Marina(x) & Parent(x)) -> -Lired(x))", "all x.((Marina(x) & -LiredToParents(x)) -> -LikedToParents(x))", "all x.(Marina(x) -> -LikedToParents(x))", "all x.((Marina(x) & -LikedToParents(x)) -> Neat(x))", "all x.((Marina(x) & Mother(y)) -> -LikedTo(x,y))", "Marina ne's liedToParents.", "(-LikedToParents(Marina))", "Marina shouldn't have lied to her parents.", "all x.(Marina(x) -> -LikedToParents(x))", "all x.((Marina(x) & -Liked(x,Parents)) -> -Liked(x,Parents))"]}
{"id": "enwn_validation_740", "nl": "Bugging someone's phone is an invasion of their privacy.", "fol": "", "prediction": ["all x y.((BuggingPhone(x) & Person(y)) -> InvasionOfPrivacy(x))", "all x y.((Bugging(x) & Phone(y)) -> InvasionOfPrivacy(x,y))", "all x.(BbuggingPhone(x) -> InvasionOfPrivacy(x))", "all x.((BugsPhone(x) | InvasionOfPrivacy(x)) -> PrivacyInvasion(x))", "all x y.((Phone(x) & Bug(y)) -> InvasionOfPrivacy(y))", "all x.(BbuggingPhone(x) -> InvasionOfPrivacy(x))", "all x.(BuggingPhone(x) -> InvasionOfPrivacy(x))", "all x.(BuggingPhone(x) -> invadingPrivacy(x))", "all x.(BuggingPhone(x) -> InvasionOfPrivacy(x))", "all x y.((Phone(x) & Bug(y)) -> InvasionOfPrivacy(y))", "all x.((PhoneBang(x) & Person(x)) -> InvasionOfPrivacy(x))", "all x y.((BugsPhone(x) & Person(y)) -> InvasionOfPrivacy(x))", "all x y.((BuggingPhone(x) & -BuggingPhone(y)) -> InvasionOfPrivacy(x,y))", "all x y.((BugsPhone(x) & Person(y)) -> InvasionOfPrivacy(x,y))", "all x y.((BugsPhone(x) & Person(y)) -> InvasionOfPrivacy(x,y))", "all x y.((Bugs(x) & Phone(y)) -> InvasionOfPrivacy(x,y))"]}
{"id": "enwn_validation_741", "nl": "Invading people's privacy without a good reason is wrong.", "fol": "", "prediction": ["all x.((InvadingPerson(x) & -GoodRight(x)) -> False(x))", "all x.((InvadingPublicPrivacy(x) & NoGoodRaison(x)) -> Irresponsible(x))", "all x.((InvadingPeoplesPrivacy(x) & NoGoodRight(x)) -> Worst(x))", "all x.((InvadingPrivacy(x) & -GoodRight(x)) -> Worst(x))", "all x y.((InvadingPrivacy(x) & Person(y) & -GoodStandard(x)) -> Wrong.", "all x.((InvadingPersonPrivacy(x) & -GoodRight(x)) -> Wrong(x))", "all x.((InvadingPrivacy(x) & -GoodRight(x)) -> Worst(x))", "all x.((InvadingPrivacy(x) & -GoodRight(x)) -> Wrong(x))", "all x.((Privacy(x) & InvadingWithoutGoodRight(x)) -> Wrong(x))", "all x.((InvadingPeoplesPrivacy(x) & But-GoodRight(x)) -> Wrong(x))", "all x.((InvadingPrivacy(x) & GoodRisk(x)) -> Wrong(x))", "all x.(InvadingPrivacyWithoutGoodRefut(x) -> Wrong(x))", "all x y z.((InvadingPrivacy(x) & Person(y) & Reason(z) & Good(z)) -> Irresponsible(x,y,z))", "all x.((InvadingPeopleSecurityWithoutGoodRight(x)) -> Worst(x))", "all x.((InvadingPrivacy(x) & -GoodRaison(x)) -> Wrong(x))", "all x.((InvadingPrivacy(x) & -GoodRaison(x)) -> Worst(x))"]}
{"id": "enwn_validation_742", "nl": "Omar bugged his girlfriend's phone because he thought she was lying.", "fol": "", "prediction": ["all x y.((Omar(x) & HisFriend(y)) -> BuggedPhoneDuration(x,y))", "all x.((Living(x) & Love(x)) -> Bugged(x,y))", "Omar bugged girlfriendsphones because he was thinking she was lying.", "all x y.((Prince(x) & Phone(y) & Omar(z)) -> Bugged(x,y,z))", "(Bogged(Omar,PartyPhone) | WorriedSheLiking(Omar,Phone)))", "Omar bugged girlfriendssphones(Omar,Living,ItThan(Omar))", "all x.(Liking(x) -> Bugged(x))", "Omar bugged girlfriendssphone(Omar) & PristineLiving(Omar))", "Omar bugged girlfriendsPhone(Omar) -> (BangeredSweetPhone(Omar,Y) & ThinksSheLiking(Omar,Y)))", "Omar bugged girlfriends's phone because he thought she was lying.", "all x.((Omar(x) & BuggedGasPhone(x)) -> WereSheLying(x))", "all x y.((Gayfriend(x) & Phone(y) & Bugged(x,y)) -> ThoughtSheLirting(x))", "-Bingged(-Amare'sPhone) because he thoughtSheLiving(-Amare))", "Omar bugged girlfriendsphone for Lying(o).", "all x y z.((Omar's(x) & Phone(y) & Girlfriend(z)) -> Bugged(x,y,z))", "Omar bugged girlfriend's phone, thought she was lying."]}
{"id": "enwn_validation_743", "nl": "Omar suspected his girlfriend was lying because she came home at 3 AM.", "fol": "", "prediction": ["Omar suspects girlfriend wasLiking(Omar,35)", "all x.((Partner(x) & CameHomeFrom(x,3)) -> Liking(x))", "all x y.((Party(x) & Omar(y)) -> Lieving(y))", "Omar suspected that his girlfriend was lying, as she came home at 3 AM.", "Omar suspected his girlfriend wasLiving BecauseSheReturnedAt3AM.", "Omar suspected his girlfriend was lying, as she came home at 3 AM.", "Omar suspected his girlfriend was lying because she came homeat3AM.", "Omar suspected girlfriend was lying. He was awake at 3 AM.", "Omar suspected his girlfriend was lying x.(RiddenGirlfriend(x) -> ArrivedAt(x,3)))", "Omar supposed girlfriend wasLivingGirlfriendByComingHomeAt3AM.", "Omar suspected girlfriend wasLivingHeat(omar) & cameHomeAt3AM(omar))", "all x.((Andall(x) & CameHomeAt3AM(x)) -> Suspicious(x))", "Omar suspected his girlfriend was lying, because she came home at 3 AM.", "Omar suspected his girlfriend was lying because she cameHomeAtReturn(Omar,39))", "Omar suspected his girlfriend was lying because she came home at 3AM.", "Omar suspected his girlfriend was lying because she came home at 3 a.m."]}
{"id": "enwn_validation_744", "nl": "It's normal to be out late when you're drinking with friends.", "fol": "", "prediction": ["all x y z.(((DrinkingWithFriends(x) & Party(y) & Party(z)) -> Normal(x))", "all x.((Drinking(x) & HasFriends(x)) -> OutLater(x))", "all x y.(((Drinking(x) & Friends(y)) -> NormalDrinkoutLast(x,y))", "all x.((DrinkingWithFriends(x) & Regular(x)) -> LateOut(x))", "all x.((DrinkingWithFriends(x) & DrinksWithFriends(x)) -> EndAtLast(x))", "all x.((DrinkingWithFriends(x) & DrinkingWithFriends(x)) -> NormalToBeLast(x))", "all x.((Drinking(x) & DrinkingWithFriends(x)) -> NormalOutLate(x))", "all x y.(((DrinkingWithFriends(x) & Alone(y)) -> NormalLateOut(x,y))", "all x.((DrinkingWithFriends(x) & OutLater(x)) -> Normal(x))", "all x.((Drinking(x) & DrinkingWithFriends(x)) -> Normal(x))", "all x y.((Beverage(x) & Party(y) & DrinkingWithFriends(x)) -> Normal(x))", "all x y z.((EnjoyDecoration(x) & Friends(y) & Drinking(z)) -> NormalOutLate(x,y))", "all x y.((Drinking(x) & Friends(y)) -> NormalLateOut(x,y))", "all x.(LaterLife(x) -> DrinkingWithFriends(x))", "all x y.((DrinkingFriends(x) & Bargains(y)) -> NormalToBeOutLater(x,y))", "all x.((OutLater(x) & DrinkingWithFriends(x)) -> Normal(x))"]}
{"id": "enwn_validation_745", "nl": "Omar's girlfriend told him she was going out drinking with her friends.", "fol": "", "prediction": ["Omar's girlfriend said she was going out drinking with friends.", "Omarsgirlfriend liads him about her outings with her friends.", "Omar's girlfriend told him she was going outdrinking with herfriends.", "Omar's girlfriend told him she was going out drinkingwithfriends.", "Omar's girlfriend told him she was going out drinking with friends.", "Omar's girlfriend told him she was going out drinking with her friends.", "Omar's girlfriend told him she was going out drinking with her friends.", "(Groomfriend(Omar) | -StartedCoast(Omar,British)))", "Omar's girlfriend told him she was going out drinking with friends.", "Omar's girlfriend told him she was going out drinking with Friends.", "Omar's girlfriend told him she was going out drinking with friends.", "Omars girlfriend told him she was going out drinking with friends.", "Omar's girlfriend told him she was going out drinking with her friends.", "Omar's girlfriend told him she was going out drinking with her friends.", "all x.((Advice(x) & Omar(x)) -> WorriedOutWithFriendsToDrink(x))", "Omar's girlfriend told him she was going out drinking(omar,y) -> MadeUse(a,x))"]}
{"id": "enwn_validation_746", "nl": "It's irrational to be suspicious of someone who is behaving normally.", "fol": "", "prediction": ["(SuspiciousOfNormallyBehaving(x) -> Irrational(x))", "all x y.((Suspicious(x) & NormalBehaving(y)) -> Irrational(x))", "all x.((Suspicious(x) & NormalBehaving(x)) -> Irrational(x))", "(IrrationalSuspiciousOfBehavingNormally(IrrationalOf(Irrational(Irrational))", "all x.(IrrationalToSuspicious(x) -> (BehavingSecondarily(x) & Normal(x)))", "all x.((Suspicious(x) & BehavingNormally(x)) -> Irrational(x))", "all x y.((SuspiciousOf(x,y) & BehavingNormal(y)) -> Irrational(x))", "all x.(SuspiciousOfNormalBehaved(x) -> Irrational(x))", "all x.(IrrationalToBeSuspiciousOfOthers(x) -> NormalBehaving(x))", "all x.((Suspicious(x) & BehavingNormally(x)) -> Irrational(x))", "all x y.((SuspiciousOf(x,y) & NormalBehaving(y)) -> Irrational(x))", "all x y.((Suspicious(x) & BehavingRegularly(y)) -> Irrational(x))", "all x.(IrrationalToSuspiciousOf(x,normalBehaving(x)) -> Irrational(x))", "exists x.((SuspiciousOf(x) & NormalBehaving(x)) -> Irrational(x))", "all x.(SuspiciousOf(x,normal(x) -> Irrational(x))", "all x y.((Suspicious(x) & NormalHair(y)) -> Irrational(x))"]}
{"id": "enwn_validation_747", "nl": "Bugging someone's phone without a good reason is wrong.", "fol": "", "prediction": ["all x y.((BugsPhone(x) & Person(y) & -GoodRun(x)) -> Wrong(x))", "all x.(BoggingPhone(x) -> Wrong(x))", "all x.((BugsPhone(x) & -GoodRaison(x)) -> IsWrong(x))", "all x y.((Bugging(x) & Phone(y) & -GoodRight(x)) -> Wrong(x))", "all x y.((BuggingPhone(x) & Person(y) & -GoodResponse(x)) -> Worst(x))", "all x.((BuggingPhone(x) & -GoodRight(x)) -> Wrong(x))", "all x y.((Bug(x) & Phone(y)) -> Wrong(x))", "all x.((BbuggingPhone(x) & GoodRaison(x)) -> Wrong(x))", "all x.(BbuggingPhone(x) & -GoodRight(x)) -> Wrong(x))", "all x.((Bugs(x) & -GoodWithin(x,y)) -> Wrong(x))", "all x.((BugsPhone(x) & -GoodRaison(x)) -> Irresponsible(x))", "all x y.((Phone(x) & Bug(y) & -GoodRight(y)) -> Wrong(x))", "all x y.((BugsPhone(x) & Person(y)) -> IsWrong(x,y))", "all x.((BuggingPhone(x) & WithoutGoodRight(x)) -> Worst(x))", "all x.((BugsPhone(x) & NoGoodRight(x)) -> Wrong(x))", "all x.((BbuggingPhone(x) & -GoodRunning(x)) -> Irresponsible(x))"]}
{"id": "enwn_validation_748", "nl": "It was normal for Omar's girlfriend to be out late.", "fol": "", "prediction": ["all x.(NoLost(x) -> Omar(x))", "all x.((Groomer(x) & Omar(x)) -> OutLast(x))", "(All x.((Gayfriend(x) & OutLater(x)) -> Normal(x)))", "all x.((Party(x) & Omar(x)) -> OutLast(x))", "Omar's girlfriend was out late, normal.", "all x.((Girlfriend(x) & Omar(x)) -> OutLast(x))", "all x.((Groomer(x) & Omar(x)) -> OutLate(x))", "all x.((Groomer(x) & Omar(x)) -> OutLate(x))", "all x.((Giant(x) & Omar(x)) -> OutLater(x))", "(Night(Omar) & Out(Omar,Saul))", "Omar's girlfriend was out late.", "all x.((Palm(x) & Omar(x)) -> OutLater(x))", "Omar's girlfriend is out late.", "-SoCaliburate(Omar,Party,NoMeal)", "every few weeks.(OmarsGroom(Omar,EndTime))", "all x.((Groomer(x) & Omar(x)) -> OutLate(x))"]}
{"id": "enwn_validation_749", "nl": "Omar suspected his girlfriend was lying because she did something normal.", "fol": "", "prediction": ["Omar suspected his girlfriend was lying because she did somethingNormal(Omar,Father,(Omar))", "Omar suspected his girlfriend was lying because she did somethingnormal.", "Omar suspected his girlfriend was lying because she didnormally(Omar)", "Omar suspected his girlfriend of lying because she didsomethingnormal.", "Omar suspected girlfriend wasLiving(Omar,0)", "Omar suspected girlfriend waslyingbecauseSheDidNormalThing(Omar))", "Omar suspectsSexualMulking(Omar,Yet)", "Omar suspected that his girlfriend was lying because she did somethingnormal.", "all x.((Angel(x) & DidNormalToOmar(x,y)) -> SpentLieuting(x,y))", "Omar suspected his girlfriend was lying because she did somethingnormal.", "Omar cradled girlfriend(o) & suspected(o) & Lieving(o) -> DoingNormalCause(o))", "Omar suspected his girlfriend was lying because she did somethingnormal.", "Omar suspected his girlfriend was lying as she did somethingnormal.", "Omar suspected his girlfriend was lying because she did something Normal.", "Omar suspected that his girlfriend was lying because she did somethingnormal.", "Omar suspects girlfriend isLying(Omar,DoesNormal(Omar,Coast))"]}
{"id": "enwn_validation_750", "nl": "Omar didn't have good reason to suspect his girlfriend was lying.", "fol": "", "prediction": ["Omar n'avowedly suspected his girlfriend of lying.", "Omar's girlfriend lacked good reason to suspect that she was lying.", "Omar n'avait aucun good reason to suspect his girlfriend was lying.", "Omar n'avait pas good reason to suspect girlfriend was lying.", "Omar - had GoodRightToSuspect(om,(o) & HisProject(o))", "all x.((Omar(x) & -GoodSupport(x)) -> Fraud(x))", "Omar n'adapposesgoodRuntime(Omar,Lying)", "(-GayfriendSuspect(Omar) & Loves(Omar))", "Omar ne avait aucune reason to suspect girlfriend was lying.", "(all x.((Omar(x) & Liking(x)) -> -GoodArgument(x)))", "Omar n'avait pas d'unique reason to suspect girlfriend was lying.", "((Omar(o) & -GoodArgumentToSuspect(o,liar)) -> -Suspicious(o,liar))", "Omar n'existed x.(Gayfriend(x) & Suppressed(x,Living))", "Omar n'avegedgtherArgumentToConsueLiking(Omar,x)", "Omar n'avedgoodGuardianToSuspectLiking(Omar).", "Omar n'aveughed(n) de racials(n) & girlfriend(x) & livid(n))"]}
{"id": "enwn_validation_751", "nl": "Omar bugged his girlfriend's phone without a good reason.", "fol": "", "prediction": ["all x y z.((Omar(x) & Gimme(y) & Phone(z) & BuggedWithin(x,z)) -> GoadAndFootbal(x,y,z))", "Omar bugged girlfriendsPhone(Omar,(Omar,Phone) | BadgedWithWithoutGoodRun(Omar,Phone)))", "Omar BuggedPhoneWithoutGoodRight(Omar,ThanGiant(Omar))", "all x y z.((Omar(x) & Partner(y) & Phone(z)) -> BuggedWithoutGoodRight(x,y,z))", "Omar BuggedPhoneAndGroomer(Omar,neatRight(Omar))", "all x y z.((Anthony(x) & Omar's(y) & Phone(z)) -> Bugged(y,z,y))", "all x y.((Omar(x) & girlfriend(y)) -> BuggedWithoutGoodRun(x,y))", "all x y.((AngryFriend(x) & Omar(y)) -> Bugged(y,x))", "Omar bugged girlfriends phone - & WithoutGoodRight(Omar,2))", "Omar bugged girlfriend's phone withoutGoodRuntime(Omar,p.10))", "all x y.((Omar(x) & Girlfriend(y) & Bugged(x,y)) -> -GoodRight(x,y))", "all x y.(Bag(x) &((Asian(y) & Mobile(y)) & -SolidMeaning(x,y)) -> Bugged(x,y))", "all x y.((Omar(x) & Mate(y)) -> Bugged(x,y))", "Omar (bumberedGiantSamePhone(Omar,2019) & WithoutGoodRight(Omar,2019))", "Omar bugged girlfriendsPhone(Omar,0) & -GoodRight(Omar,5))", "Omar bugged girlfriend's phone without goodreason."]}
{"id": "enwn_validation_752", "nl": "Omar shouldn't have bugged his girlfriend's phone.", "fol": "", "prediction": ["Omar should've -BuggedPhone(Omar,girlfriend))", "Omar shouldn't have bugged girlfriendsPhone(Omar).", "all x.((Omar(x) & girlfriendsPhone(x)) -> -BuggedReview(x))", "all x.((Omar(x) & Girlfriend(x)) -> -BbuggedPHONE(x))", "Omar shouldn't have bugged girlfriends phone.", "all x y.((Omar(x) & Partner(y)) -> -BbuggedPhone(x,y))", "Omar isn't buggedByPhone(omar,girlfriend,x)", "Omar sollteedNotBanggedGirlfriendsPhone(Omar)", "Omar shouldn't've bugged girlfriend\u2019s phone.", "Omar shouldn't-BaggedGhostTalk(Omar, girlfriend)", "Omar shouldn't have bugged girlfriendsphone.", "Omar shouldn't have bugged girlfriendsphphone(Omar)", "Omar obbotted(Ormar) & -Bagging(Omar'sFriendsPhone))", "all x.((Groomer(x) & Omar(x)) -> - BuggedPhone(x))", "Omar shouldn't have bugged girlfriendsphone(Omar)", "Omar shouldn't have buggedGayfriendsPhone."]}
{"id": "enwn_validation_753", "nl": "It's inappropriate for supervisors to behave unprofessionally.", "fol": "", "prediction": ["all x.((Supervisor(x) & -Professional(x)) -> Unprofessional(x))", "all x.((Supervisor(x) & Unprofessional(x)) -> Inappropriate(x))", "all x.((Supervisor(x) & Unprofessional(x)) -> Inappropriate(x))", "all x.((Supervisor(x) & Unprofessional(x)) -> Inappropriate(x))", "all x.((Supervisor(x) & InappropriateBehavior(x)) -> UnprofessionalBehavior(x))", "all x.((Supervisor(x) & UnprofessionalBehavior(x)) -> Inappropriate(x))", "all x.(Inappropriate(x) -> Supervisor(x))", "all x.((Supervisor(x) & Professional(x)) -> Drunken(x))", "all x.((Supervisor(x) & Disprofessional(x)) -> Impropriety(x))", "all x.((Supervisor(x) & Unprofessional(x)) -> Inappropriate(x))", "all x.((Supervisor(x) & UnprofessionalBehavior(x)) -> UnprofessionalBehavior(x))", "inappropriate behavior of supervisors.", "all x.((Supervisor(x) & Unprofessional(x)) -> InappropriateBehavior(x))", "all x y.((Supervisor(x) & Supervisor(y) & RegulatedUnprofessionally(x)) -> Inappropriate(x,y))", "all x y.((Supervisor(x) & Supervisor(y)) -> UnprofessionalBehavior(x,y))", "all x.((Supervisor(x) & -Professional(x)) -> Unprofessional(x))"]}
{"id": "enwn_validation_754", "nl": "It's unprofessional to let personal matters interfere with workplace matters.", "fol": "", "prediction": ["all x.(Unprofessional(x) -> InterferenceWithWorkplaceMatters(x))", "all x.(Unprofessional(x) -> (LetsPersonalMattersInterfereWithWorkplaceMatters(x)))", "all x.((PersonalMatter(x) & -Professional(x)) -> InterfereWithWorkplaceMatter(x))", "all x.((PersonalMatter(x) & WorksAtWork(x)) -> Unprofessional(x))", "all x.((PersonalMatter(x) & WorkplaceMatter(x)) -> Unprofessional(x))", "all x.(Unprofessional(x) -> (PersonalMattersInterfere(x) & WorkplaceMattersInterference(x)))", "all x.((LaysPersonalMattersInterfereWithWorkplaceMatters(x)) -> Unprofessional(x))", "all x.((LetPersonalMattersInterfereWithWorkplaceMatters(x)) -> Unprofessional(x))", "all x y.((PersonalMatter(x) & WorkplaceMatter(y)) -> Unprofessional(x))", "all x.((PersonalMatters(x) & InterfereWithWorkplaceMatters(x)) -> Unprofessional(x))", "all x.((PersonalMatter(x) & WorksForWorkplaceMatter(x)) -> Unprofessional(x))", "all x.((PersonalMatter(x) & IrrespectiveWorkplaceMatter(x)) -> Unprofessional(x))", "all x.((PersonalMatter(x) & InterferenceWithWorkplaceMatters(x)) -> Unprofessional(x))", "all x.((PersonalMatter(x) & InterfereWorkplaceMatter(x)) -> Unprofessional(x))", "all x.((PersonalMatters(x) & InterfereWithWorkplaceMatters(x)) -> Unprofessional(x))", "all x.(PersonalMattersInterference(x) & -Professional(x))"]}
{"id": "enwn_validation_755", "nl": "An employer's influence over their employees' pay is a workplace matter.", "fol": "", "prediction": ["all x.(BusinessplaceMatter(x) -> InfluenceOfEmployeesPay(x))", "all x.((Employer(x) & Employer(y) & EmployeePay(y)) -> WorkplaceMatter(x,y))", "all x.((Employer(x) & InfluenceOverEmployeesPay(x)) -> WorkplaceMatter(x))", "all x y.((Employee(x) & Employee(y)) -> InfluenceOverPay(x,y))", "all x y.((Employer(x) & Employee(y,x)) -> Impact(x,y))", "all x.((EmployerInfluence(x) & EmployeesPay(y)) -> WorkplaceMatter(x))", "all x.(InfluenceOverPay(x,Employees,Company) -> WorkplaceMatter(x))", "all x y.((Employee(x) & Employer(y)) -> InterferenceOverPay(x,y))", "all x.((Employer(x) & EmployeesPay(x)) -> WorkplaceMatter(x))", "all x y.((Employee(x) & Employee(y)) -> InfluenceOverPay(x,y))", "all x y.((Employer(x) & Employee(y) & InfluenceOverPay(x,y)) -> WorkplaceMatter(x,y))", "all x y.((Employer(x) & Employee(y)) -> InfluenceOverPayAsWorkplaceMatter(x,y))", "all x.((Employer(x) & Employee(y)) -> InfluenceSupportDomain(x,y))", "all x.((Employer(x) & EmployerInfluenceOverEmployeesPay(x)) -> WorkplaceMatter(x))", "all x.((Employer(x) & OverPay(x,employees) & Inclusive(x,employees)) -> WorkplaceMatter(x))", "all x y.((Employer(x) & Employee(y)) -> InfluenceOverPay(x,y))"]}
{"id": "enwn_validation_756", "nl": "Alan docked Tim's pay because Tim gave Alan's daughter a low score on a test.", "fol": "", "prediction": ["all x y.((Alan(x) & Tim(y) & -HighScoreOnTest(y,x)) -> DockedPay(x,y))", "all x y z.((Alan(x) & Tim(y) & HighScore(z)) -> DockedPay(x,y))", "all x y.((Alan(x) & Tim(y) & Dax(y)) -> DockedPay(x,y))", "all x y.((Altan(x) & Tim(y)) -> DockedPay(x,y))", "all x y.((Alan(x) & Tim(y) & LowScore(y,x)) -> DockedPay(x,y))", "(AnalystDoorsPay(Alan) & TimScore(Alan) & AlanSize(Alan) & LowScore(Alan,Alan))", "all x y.((Alan(x) & Tim(y)) -> DischargedPay(x,y))", "all x y z.((Alan(x) & TimsPay(y) & Test(z) & LowScore(z)) -> Docked(x,y,z))", "all x y z.((Alan(x) & Tim'sPay(y) & Analyse(z) & LowScoreOnTest(z)) -> Docked(x,y,z))", "all x y.(Docked(x,y) -> (AlanAlan'sPay(x) & TimAlan(y) & LowScoreTest(y)))", "all x y z.((Alan(x) & Tim(y) & Test(z) & LowScore(y,z)) -> DockedTim'sPay(x,y))", "all x y.((Alan(x) & Tim(y) & LowScore(y)) -> DockedPay(x,y))", "all x y z.((Alan(x) & Tim(y) & Pay(z) & LowScoreOnTest(z,y)) -> DocksTim(x,z))", "all x y z.((Alan(x) & Tim(y) & TestScore(z) & GivenLowScore(y,z)) -> DockedPay(x))", "all x y z.((Alan(x) & Tim(y) & Test(z) & LowScore(y,z)) -> DockedPay(x,y))", "(Alan DocksTimPercent(Alan) & TimsPension(Alan) & LowScoreOnTest(Alan,Tim,Tim,Tim)))"]}
{"id": "enwn_validation_757", "nl": "Doing something because of a familial relationship is doing it for a personal reason.", "fol": "", "prediction": ["all x.(Doing(x) -> (PersonalRation (FamilyRelationship(x,forfemale) & Does(x,forfemale))))", "all x y.((DoesAsFamilyFriendlyRelationship(x) & FamilielRelationship(y)) -> PersonalResult(x))", "all x.((DoingByFamily(x) & FamilialRelationship(x)) -> DoesForPersonalRaison(x))", "all x.((DoingProperlyForFamilyRelationship(x) & FamilyRelationship(x)) -> PersonalRaison(x))", "all x.((Doing(x) & FamilialRelationship(x)) -> DoingForPersonalRaison(x))", "all x.(Doing(x) -> InFamilyLimit(x))", "all x.(DoingFamilyLiam(x) -> PersonalRaison(x))", "all x.((Doing(x) & FamilyalRelationship(x)) -> Doing(x))", "all x.(FamilyRelationship(x) -> PersonalResult(x))", "all x.((DoingSomething(x) & FamilialRelationship(x)) -> PersonalResult(x))", "all x.((Doing(x) & FamilialRelationship(x)) -> PersonalRaison(x))", "all x.(FamilyLiaison(x) -> DoingForPersonalProne(x))", "all x y.((DoingPersonalRelationship(x) & FamilyLimit(y)) -> DoingPersonalRelationship(x,y))", "all x y.((Doing(x,y) & FamilyLimit(x) & FamilyLimit(y)) -> PersonalRule(x))", "all x.((Doing(x) & FamilyRelationship(x)) -> PersonalRitue(x))", "all x y.((Doing(x,y) & FamilialRelationship(x)) -> PersonalRaison(x))"]}
{"id": "enwn_validation_758", "nl": "It's unprofessional to dock your employee's pay for personal reasons.", "fol": "", "prediction": ["all x.((WorkerDocksPayForPersonalFactors(x)) -> Unprofessional(x))", "all x.((DockersEmployeesPay(x) & PersonalRates(x)) -> Unprofessional(x))", "all x.((DocksEmployeesPay(x) & PersonalFunctions(x)) -> Unprofessional(x))", "all x.((DocksEmployeePay(x) & PersonalRefuses(x)) -> Unprofessional(x))", "all x y.((DockingEmployee(x) & PersonalReason(y)) -> Unprofessional(x))", "all x y z.((Employee(x) & Pay(y) & PersonalRights(z)) -> Docked(x,y,z))", "all x.((DocksEmployeePay(x) & PersonalRates(x)) -> Unprofessional(x))", "all x.(Dock EmployeePay(x) -> Unprofessional(x))", "all x.(DockEmployeesPay(x) -> Unprofessional(x))", "all x.((Dose(x) & EmployeePay(x) & PersonalRation(x)) -> Unprofessional(x))", "all x.((DockEmployeePay(x) & PersonalFavors(x)) -> Unprofessional(x))", "all x.((Dosage(x) & EmployeePay(x) & PersonalRights(x)) -> Unprofessional(x))", "all x.((DocksEmployeesPay(x) & ForPersonalAttributes(x)) -> Unprofessional(x))", "all x.((Don'tDockEmployeePay(x) & PersonalResponse(x)) -> Unprofessional(x))", "all x.((HonoringEmployeePay(x) & PersonalBreaths(x)) -> Unprofessional(x))", "all x.((Employee(x) & DockPayForPersonalCauses(x)) -> Unprofessional(x))"]}
{"id": "enwn_validation_759", "nl": "Alan docked Tim's pay for a personal reason.", "fol": "", "prediction": ["(PersonalNotification(Alan) & DockedTim'sPay(Alan))", "((Alan,Tim) & PersonalRaison(Alan,Tim)) -> DockedPay(Alan,Tim))", "all x y z.((Alan(x) & Tim(y) & Pay(z) & PersonalResult(x,y)) -> DockedFor(x,y,z))", "all x.((Alan(x) & Tim(z)) -> DockedPay(x,z))", "all x y.((Alan(x) & Tim(y)) -> DockedPayForPersonalMoment(x,y))", "all x y z w.((Alan(x) & Tim(y) & Pay(z) & Personal(w)) -> DockedFor(x,y,z))", "all x y.((Alan(x) & Tim(y)) -> Docked(x,y))", "all x y.((Alan(x) & Tim(y)) -> DockedPaid(x,y))", "Alan docked Tim's pay for a personal reason.", "Alan docked Tim's pay for personal reason.", "all x.(DoubledYa(x,y) -> TimsPay(y))", "all x y.((Alan(x) & Tim(y)) -> DockedPay(x,y))", "Alan docked his pay for a personal reason.", "all x.((Alan(x) & Tim(y)) -> DockedPay(x,y))", "Alan docked Tim's pay for personal reason.", "all x y.((Alan(x) & Tim(y) & PersonalRun(x,y)) -> DockedPay(x,y))"]}
{"id": "enwn_validation_760", "nl": "It was unprofessional for Alan to dock Tim's pay.", "fol": "", "prediction": ["all x.((Alan(x) & DocksTimPay(x)) -> Unprofessional(x))", "Es war unprofessional for Alan to dock Tim'sPay(Alan,Jacks,EarlyPay)", "this was unprofessional for Alan to Dock Tim'sPay(a).", "(Unprofessional(Alan) & DocksTimPay(Alan))", "all x.((File(x) & Alan'sPay(x)) -> Unprofessional(x))", "all x.((Alan(x) & DocksTimsPay(x)) -> Unprofessional(x))", "all x y.((Alan(x) & Tim(y)) -> DocksPay(x,y))", "-ProfessionalToDo DockTimPay(Alan)", "all x.((Alan(x) & DockStandAlone(x)) -> Unprofessional(x))", "Es war unprofessional for Alan to dock TimsPay(a)", "all x y.((Alan(x) & Tim(y)) -> DocksPay(x,y))", "it was unprofessional for Alan to dock Tim's pay.", "all x.((Alan(x) & DockTimPay(x)) -> Unprofessional(x))", "(UnprofessionalForAlanToDockTimesPay(Alan,Edinburgh) & UnprofessionalForAlan,Tim))", "It was unprofessional(all x.((Alan(x) & DockTimsPay(x)) -> -Professional(x))", "all x.((Alan(x) & DocksTimPay(x)) -> Unprofessional(x))"]}
{"id": "enwn_validation_761", "nl": "Alan should not have docked Tim's pay.", "fol": "", "prediction": ["all x.((Alan(x) & Tim(y)) -> (NoDockedPay(x,y)))", "all x y z.((Alan(x) & Tim(y) & Pay(z)) -> -Docked(x,y,z))", "-DockedTimsPay(Alan)", "(dockedTimspay(Alan) & -DockedTimsPay(Alan))", "all x.((Alan(x) & Tim(y)) -> -DockedPaid(x,y))", "All x.((Alan(x) & Tim(x)) -> -DockedPay(x,y))", "(all x.(Alan(x) -> -DockedTimpay(x)))", "all x y.((Alfred(x) & Tim(y)) -> -DockedPay(x,y))", "(Alan(Alan) & Tim(Tim)) -> -DockedPay(Alan,Alan))", "Alan should not have docked TimsPay(Alan,Phone,Pay)", "all x.((Alan(x) & Tim(y)) -> -DockedPaid(x,y))", "all x.((Alan(x) & Tim(y)) -> -DockedPaid(x,y))", "Alan should not have docked Tim's pay.", "all x.(Alan(x) -> -DockedTimPay(x))", "all x.((Alan(x) & Tim(t)) -> -DockedPaid(x,t))", "all x.(DrockedTimPay(x) -> -HasPayPaid(x))"]}
{"id": "enwn_validation_762", "nl": "You should not inconvenience people.", "fol": "", "prediction": ["all x,y.((Person(x) & Inconvenient(x)) -> -Inconvenient(y))", "(-InfuriatePeople(you))", "you should not inconvenience people.", "all x y.((People(x) & Indignifies(y)) -> -HasInconvenience(x,y))", "all x.((Person(x) & -Indignify(x)) -> -Indignify(x))", "all x.((Indignifies(x) & -Incomfortable(x)) -> -Incomfortable(x))", "all x.(Inconvenience(x) -> -Inconvenience(x))", "all x.(InconvenientPerson(x) -> -Inconvenient(x))", "all x.(Indignity(x) -> -InsanityInhabitsPeople(x))", "-InadequateSort(x) -> (DoNotIncanditePeople(x) & Don'tIncensePeople(x)))", "all x.(Inconvenient(x) -> -Incomfortable(x))", "all x.(Inconvenient(x) -> -Inconvenient(x))", "all x.(Inconvenient(x) -> -Inconvenient(x))", "-inconvenient(y)", "all x.(Innadvantage(x) -> -Inconvenient(x))", "all x.(IndignitatePeople(x) -> -IndignifyPeople(x))"]}
{"id": "enwn_validation_763", "nl": "Preetha parked in front of her neighbor's car, blocking them in their shared driveway.", "fol": "", "prediction": ["all x y.((Person(x) & Neighbor(y) & ParksIn(x,y)) -> BlocksInSharedDownswing(x,y))", "all x y.((Petetha(x) & Neighbor(y)) -> ParksInFrontOfBlocks(x,y))", "all x y.((Petetha(x) & NearbyCar(y) & ParkedInForward(x,y)) -> BlocksInSharedDriveway(x,y))", "all x y z.((Person(x) & Neighbor(y) & Car(z) & Parking(x,z)) -> PavedInPast(x,y))", "all x y.((Neighbors(x) & Preetha(y)) -> ParksInFrontOfCar(y,x))", "(ParksInFrontOfNeighborsCar(Preetha,NE) & BlocksDownDriveway(Preetha,NE))", "all x y.((Neighbor(x) & Preetha(y)) -> (ParkingInFrontOfCar(y,x) & BlockingInSharedDriveway(y,x)))", "(parkedInFrontOfNeighborCar(Preetha) & BlocksSecondDriveway(Preetha))", "all x.((Preetha(x) & NeighborsCar(y)) -> ParksInFront(x,y))", "all x y.((Person(x) & Neighbor(y)) -> ParkedInFront(x,y))", "all x y.((Preetha(x) & Car(y) & Neighbor(z)) -> Parked(x,y,z))", "-(ParkedInFrontOfNeighborsCar(Preetha) & BlockedInSharedDrainage(Preetha,NeighborsCar)))", "all x y.((Preetha(x) & Neighbor(y)) -> ParksInFrontOfCar(x,y))", "all x y z.((Person(x) & Neighbor(y) & Car(z)) -> ParkedInFrontOf(x,y,z))", "all x y z.((Preetha) & Neighbor(z)) -> (ParkedInFrontOf(x,y,z) & BlocksInSharedDriveway(x,z)))", "all x.(PawnTerrain(x) -> (ParkingInFrontOfNeighborsCar(x) & BlockingDevice(x,SharedDriveway)))"]}
{"id": "enwn_validation_764", "nl": "It's inconvenient to have your car blocked.", "fol": "", "prediction": ["all x.((Car(x) & Blocked(x)) -> Inconvenient(x))", "(Inconvenient(auto) -> Blocked(auto))", "all x.((Car(x) & Blocked(x)) -> Inconvenient(x))", "all x.((Car(x) & Blocked(x)) -> Inconvenient(x))", "all x.((Car(x) & Blocked(x)) -> Inconvenient(x))", "all x.(CouldCarBlock(x,y) -> Inconvenient(y))", "all x.((Car(x) & Thruaged(x)) -> Inconvenient(x))", "All x.((Cheat(x) & Blocked(x)) -> Inconvenient(x))", "all x.((Car(x) & Blocked(x)) -> Inconvenient(x))", "all x.((Car(x) & Blocked(x)) -> Inconvenient(x))", "all x.(Inconvenient(x) -> CarBlocked(x))", "all x.((CarBlock(x) & Inconvenient(x)) -> CarBlock(x))", "all x.((Car(x) & Blocked(x)) -> Inconvenient(x))", "all x.((Car(x) & Blocked(x)) -> Inconvenient(x))", "all x.((Car(x) & Blocked(x)) -> Inconvenient(x))", "all x.((Car(x) & Blocked(x)) -> Inconvenient(x))"]}
{"id": "enwn_validation_765", "nl": "Preetha parking in front of her neighbor's car inconvenienced her neighbor.", "fol": "", "prediction": ["all x y.((Preetha(x) & NeighborsCar(y)) -> ParksInFrontDemandInconveniently(x,y))", "all x.((ParkingInfrontOfNeighborScar(x) & UncomfortableNeighbor(x,uncomfortableNeighbor(x)) -> Preetha(x))", "all x.((Person(x) & Neighbor(x)) -> Inconvenient(x))", "all x y.((Person(x) & Neighbor(y) & ParkingInfront(x,y)) -> Inconvenient(x,y))", "all x y z.((Preetha(x) & NeighborCar(y) & ParkingInFront(x,y) & Car(z)) -> Inconvenient(x,y,z))", "all x y.((PreethaParking(x) & Neighbor(y)) -> Inconvenient(x,y))", "all x y.((Person(x) & Neighbor(y) & ParksInfrontOfCar(x,y)) -> Inconvenient(x,y))", "preetha parking out front of neighbor's car inconvenienced.", "all x.(PreethaParksInFrontOfNeighborsCar(x) -> Uncomfortable(x))", "all x y.((Preetha(x) & Neighbor(y)) -> ParkingInFrontOfCar(x,y))", "preetha parking just in front of neighbor's car inconveniently.", "-(ParksInfrontOfNeighborsCar(Pepetha) & InconvenientForNeighbor(Peethetha))", "all x y.((Person(x) & Neighbor(y) & ParkingInFrontOf(x,y)) -> Uncomfortable(x,y))", "all x y.((Neighbor(x) & Preetha(y)) -> ParksInFrontOf(x,y))", "all x y.((Preetha(x) & Neighbor(y)) -> ParkingInFront(x,y))", "all x y.((Preetha(x) & NonneedsCar(y)) -> UnfortunateParkingNeighbor(x,y))"]}
{"id": "enwn_validation_766", "nl": "Preetha should not have parked in front of her neighbor's car.", "fol": "", "prediction": ["-ParkedInFrontOfNeighbor'sCar(Preetha) -> -FrontOfNeighborsCar(Preetha))", "(-ParkedInFrontOfNeighbor'sCar(Preetha,Newsnede,Neighbor))", "(-ParkedInFrontOfNeighborsCar(Preetha))", "(parksInFrontOfNeighborCar(Preetha,3) & -ParksInFrontOfNeighborCar(Preetha,NeighborCar))", "(Car(Preetha) & -ParkedInFrontOfNeighbors(Preetha\")", "Preetha should have parked in front of neighbor's car.", "preetha should not have parked in front of neighbor's car.", "all x.((Person(x) & NeighborCar(x)) -> -ParkedInFront(x,PaveredIn(x,PaveredIn(x,PaveredIn(x,PavedIn(x)))", "all x.((Preetha(x) & NeighborCar(x)) -> -ParkedInFrontOf(x,y))", "all x y.((Neighbor(x) & Preetha(y)) -> -ParkedInFrontOf(y,x))", "all x y.((Preetha(x) & NeighborsCar(y)) -> -ParkedInFront(x,y))", "(instead,ParkingInFrontOfNeighborsCar(Preetha,NewFriendsCar))", "all x y z.(Peacetha(x) & Neighbor(y) & Deed(z) & Ate(x,y,z))", "-ParkedInFrontOfNeighborsCar(Preetha,05)", "all x.((Preetha(x) & Neighbor(x)) -> -ParkedInFrontOf(x,Neighbor))", "all x.((Person(x) & -PatchedInNeighborsCar(x)) -> -ParkedInFrontOf(x,Neighbor,Neighbor,Neighbor,Neighbor,Neighbor))"]}
{"id": "enwn_validation_767", "nl": "It's rude to spoil a show.", "fol": "", "prediction": ["all x.(SpoisesShow(x) -> Reputable(x))", "all x.((SpoilageShow(x) & Risible(x)) -> Punish(x))", "all x.((Spoik(x) & Show(x)) -> Rustic(x))", "all x y.((Spoilage(x) & Show(y)) -> Rupid(x))", "all x.((SpoilShow(x) & Show(y)) -> Rultic(x))", "all x.(RullyToSpreadShow(x) -> Reprehensive(x))", "all x.(Rush(x) -> SpoilShow(x))", "all x.(RuleBySplashingShow(x) -> ShowSpoiled(x))", "all x.((SpoilageShow(x) & Ruinful(x)) -> -HasDocument(x))", "(ReasonableToSpoil(show))", "all x y.((SpokenShow(x) & Show(y)) -> R rude(x))", "all x.(SpoisesShow(x) -> Rustic(x))", "all x y.((SpoilShow(x) & Show(y)) -> Requires(x,y))", "all x y.((Spoilage(x) & Show(y)) -> Rupid(x))", "all x.((SpoisesShow(x)) -> Rust(x))", "all x.((SpoiledShow(x)) -> Rupid(x))"]}
{"id": "enwn_validation_768", "nl": "You shouldn't be rude.", "fol": "", "prediction": ["all x.((Rule(x) & -Rule(x)) -> -Rule(x))", "all x.((Dude(x) & -Roast(x)) -> -(Rule(x) & Rust(x)))", "in your life.", "I would like to thank all the organisers of this site.", "all x.((Rule(x) & -Rule(x)) -> -Poor(x))", "all x.(NoRust(x) -> -Regret(x))", "all x.(Rue(x) -> -Rule(x))", "and you shouldn't beRuleful(x)", "-Relax(s)", "-Rure(you)", "all x.(Rule(x) -> -Rule(x))", "all x.((Rule(x)) -> -Ripe(x))", "all x.((Rudy(x) & Refusing(x)) -> -TooRusty(x))", "all x.((Rule(x) & -Rule(x)) -> \"Rewards(x\")\")", "all x.(Rule(x) -> -SpeakTheThin(x))", "all x.(Ruin(x) -> -IsRelevant(x))"]}
{"id": "enwn_validation_769", "nl": "Spoiling something means revealing a detail to someone before they get a chance to learn it for themselves.", "fol": "", "prediction": ["all x y z.((Spoiling(x) & Detachment(y) & Person(z) & Unlearns(z,y)) -> Secret(x,y,z))", "all x y.((Spooling(x) & Detail(y)) -> Uncovers(x,y))", "all x y.((SpoilingDetail(x) & SpoilingDetail(y)) -> LearnToPerson(x,y))", "all x y.((Spoil(x) & Detail(y)) -> DisclosesBeforeLearning(x,y))", "all x y.(Spooling(x) -> (BeforeLearnAtHome(y) & ExplicitDetail(x,y)))", "all x y.((Spoiling(x) & Detail(y)) -> UsuallyDisclosingTo(x,y))", "all x y.((Spoiling(x) & Person(y)) -> FindsDetail(x,y))", "all x y.((Spoiling(x) & Person(y)) -> (RestsInDetail(y,x) & -Selects(y,x)))", "all x y z.((Spoken(x) & Detail(y) & Person(z) & Spoiling(x,y)) -> (Provokes(x,y,z) & LearnsFor(z,y,z)))", "all x y z.((Spoiling(x) & Person(y) & Detail(z) & LearnsFollowing(y,z)) -> Exposes(x,z))", "all x y.((Spoiling(x) & SpoiledInDetail(x)) -> (LearnsDetail(x,y) & PeopleEatMe(x)))", "all x y z.((Spots(x) & Detail(y) & Person(z) & Learns(x,z)) -> (Pronounces(x,y) | GetsChanceToLearn(z,y)))", "all x.(Spools(x) -> Defines(x,y))", "all x y.((Spots(x) & Details(y)) -> (Divide(x,y) & Learns(x,y)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Decouvrir(y,z) & Learn(z,y)))", "all x y.((Spoiling(x) & Person(y)) -> (InvolvesDetail(x,y) & UntilCanLearn(y,x)))"]}
{"id": "enwn_validation_770", "nl": "Dane told Demarcus how the show ended before Demarcus got a chance to finish watching it.", "fol": "", "prediction": ["Dannie Davine hat Demarcus how the show ended BeforeDemarcusCanFinish(Dene,Movement))", "(Relatedly(Dane & Demarcus) -> \"LastDate(Dane & EndsShow(Dane,Deardemarcus)))", "Dane told Demarcus how the show ended before Demarcus finished watching it.", "all x y.((Dane(x) & Demarcus(y)) -> [EndorsedBeforeChance(x,y)))", "Dane told Demarcus how the show ended before anyone finished watching it.", "Dane told Demarcus how the show ended before he got the chance to finish watching it.", "Dane told Demarcus how the show ended before he got chance to finish watching it.", "Demarcus was elated to hear Dane tell him about how show ended before he got a chance to finish watching it.", "(WasDustDoneAndDemarcus(Dane)? DemarcusQuestionChance(Dane,Dane)) & ShowEndsBeforeDemarcus(Dane,Damarrus))", "Dane gave an account to Demarcus on how it ended before the show was finished.", "Dane told Demarcus how show ended before watching (demostal) -> DaneDone(d))", "all x y z.((Dane(x) & Democrus(y) & Show(z) & Ends(y,z)) -> (Tells(x,y) | Tells(x,y) & Despite(x,y))))", "demarcus X rays(x) & Dane(x) & AfterShowEnd(x,y) & BeforeDemarcusFinishedWatchingShow(x,y))", "(FoundAfterShow(Dane,Demarcus) & DemarcusWatchesTiming(Dane,Demarcus))", "(ShowEnded(Dane,Damaris) & BeforeDemarcusCanFinish(Dane,Dane))", "Dane tells Demarcus(Danes) -> \"EndsPresentTime(Dumber) & EndsPresentTime(Dumber)\")"]}
{"id": "enwn_validation_771", "nl": "You shouldn't spoil shows for people.", "fol": "", "prediction": ["all x y.((Show(x) & Person(y)) -> -Spool(x,y))", "all x.((Show(x) & People(y)) -> -Spoises(x,y))", "all x y.((Show(x) & Person(y)) -> -Spoils(x,y))", "all x y.((Show(x) & Person(y) & Brim(x,y)) -> NotSpoilage(x,y))", "all x y.((Show(x) & Person(y)) -> -PawnSeen(x,y))", "all x.(DoesSpoilingShowsForPeople(x) -> -ShadowsToMembers(x))", "all x.((Show(x) & -Spoises(x)) -> -Spoises(x))", "all x.(SpoilShow(x) -> -(SpoilShow(x) & People(x)))", "all x.((Producer(x) & -Spoils(x,Shows)) -> -Spoils(x,People))", "all x.((Show(x) & People(y)) -> -Spoises(x,y))", "all x.((Show(x) & People(x)) -> -Spoils(x,y))", "all x.((Show(x) & -SpoisesForPeople(x)) -> -SpoisesForPeople(x))", "all x.(SpoilageShow(x) -> -SpoisesForPeople(x))", "all x.((Show(x) & -SpoisesForPeople(x)) -> -SpoilsForPeople(x))", "all x.(Spoises(x,shows) -> -Spoils(x,people))", "all x.(SpoilShows(x) -> -SpoilProgress(x))"]}
{"id": "enwn_validation_772", "nl": "Dane spoiled the show for Demarcus.", "fol": "", "prediction": ["(SplurgedDane(Dane,Darcus))", "all x y.((Danes(x) & Demarcus(y)) -> SpottedTheShow(x,y))", "Deanna has spoilt the show for Demarcus.", "Dane spoiledDarcus.", "-SpluckedNight(Dane,Darcus)", "Dannie spoiledDangerShow(Danger) & Demarcus(Dragon)", "(sourcedShow(Dane,StolenForDarcus)", "all x y z.((Dane(x) & Demarcus(y) & Show(z) & Spot(x,z)) -> spoiled_g.(Dane(x,z)))", "(SpoiledShow(Dane) -> Demarcus(Dane))", "(SpoiledShow(Dane) & ForDarcus(Dane))", "All x y.((Dane(x) & Demarcus(y)) -> SpoiltsShowFor(x,y))", "DANE(DangerousShow)", "((Dane(Dane) & Demarcus(Dane)) -> SpoilShow(Dane))", "(SpookedByDanie(Danie) & Demarcus(Danie))", "Dane spoiltsDarcusShow.", "Dane spoiled the show for Demarcus."]}
{"id": "enwn_validation_773", "nl": "Dane should not have spoiled the show for Demarcus.", "fol": "", "prediction": ["all x.(Dane(x) -> -CrackedShowForDarcus(x))", "-SpoilersDemarcus(Dane)", "Dane should not have spoilt the show for Demarcus.", "All x y.((Dane(x) & Demarcus(y)) -> -BeautifulTheatre(x,y))", "all x.((Dane(x) & -SpoichedShow(x)) -> -Demarcus(x))", "(-spoiledShowForDane(daniel,Dumarcus))", "all x.((Dane(x) & Demarcus(y)) -> -ScruffyShow(x,y))", "all x.(Demand(x) -> -ShapedShowForDemandus(x))", "-(Dane(Danie) & Demarcus(Demarcus))", "(BeautifulDane(Dane) & -SplitsShow(Dane,Darcus))", "(FruitlessDane(d) & -BreathedShow(d))", "-spoiledDemarcus(Dane,demarcus)", "-SpoisedDane.com(Dane)", "Dane should not have spoiledTheShowforDemacus(Dane)", "((Dane(d) & Demarcus(d)) -> -SpooledShow(d)))", "all x.(Dane(x) -> -SpoiledShowForDarcus(x))"]}
{"id": "enwn_validation_774", "nl": "You should only call emergency services in an emergency.", "fol": "", "prediction": ["all x.(CallEmergencyServicesInEmergency(x) -> Don'tCallEmergencyServicesInEmergency(x))", "all x.(CallsEmergencyServicesInEmergency(x) -> -CallsEmergencyServices(x))", "all x y.((Emergency(x) & Emergency(y)) -> CallEmergencyServices(x,y))", "all x y.((Emergency(x) & EmergencyService(y)) -> Call(x,y))", "all x.((Emergency(x) & CallEmergencyServices(x)) -> -SpeakEmergency(x))", "all x.(Emergency(x) -> YouBehavior(x))", "all x y.((Emergency(x) & Emergency(y) & Calls(x,y)) -> CallsEmergencyServices(x,y))", "all x y.((Emergency(x) & Emergency(y)) -> Calls(x,y))", "all x.((Emergency(x) & CallEmergency(x)) -> UsesEmergency(x))", "all x.((EmergencyService(x) & CallsEmergencyService(x)) -> -CallsEmergency(x))", "all x.(Emergency(x) -> CallUnderstandingServices(x))", "all x.(Emergency(x) -> CallsEmergencyServices(x))", "all x.((EmergencyService(x) & Call(x)) -> Calls(x,Emergency))", "all x y.(Establish(x,y) -> (Call(x,y) & EmergencyServices(y)))", "all x.((Emergency(x) & CallEmergencyServices(x)) -> CallsEmergencyServices(x))", "all x y.((EmergencyService(x) & Calls(y,x)) -> Calls(y,x))"]}
{"id": "enwn_validation_775", "nl": "The police are an emergency service.", "fol": "", "prediction": ["all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "exists x.(Police(x) & EmergencyStaff(x))", "all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))", "all x.(Police(x) -> EmergencyService(x))"]}
{"id": "enwn_validation_776", "nl": "Alina called the police on some teenagers who were sitting across the street from her house because she thought they looked suspicious.", "fol": "", "prediction": ["all x y z.((Alina(x) & Teenagers(y) & Street(z) & NotSick(y) & SittingAcrossFrom(y,z)) -> CalledPolice(x,y,z))", "all x y.((CallsPolice(x) & Teenagers(y) & SittingAcrossStreet(y,x)) -> Suspicious(y))", "all x.((Alina(x) & Youth(u) & SittingAcrossStreetFromHasHouse(u) & AlinaImaginesLookingSuspicious(u)) -> CalldPolice(x,u))", "all x y.((Alina(x) & Teenage(y)) -> CallsPoliceBetween(x,y))", "all x y z.((Alina(x) & Teenager(y) & House(z) & SittingAcrossStreet(y,z)) -> (CallsPolice(x,y,z) & Suspicionous(y)))", "all x y z.((Alina(x) & Teenager(y) & Student(z) & SittingAcrossStreetFromFrom(x,z) & ShethoughtLooksSuspicious(x,y,z)) -> CalledPolice(x,y,z))", "all x y.((Alina(x) & Teenager(y) & SatAcrossStreet(y)) -> CalledPoliceAlong(x,y))", "all x.((Alina(x) & Teenage(x) & SittingAcrossStreet(x) & InitiallyBuried(x)) -> CalledPolice(x))", "all x y.(Deeper(x) -> (CallsPolice(x) & Teenage(y) & SittingAcrossStreet(y) & ThoughtSuspicious(y)))", "all x y.((Alina(x) & Teenager(y) & SittingAcrossStreet(y)) -> CalledPolice(x,y))", "all x y.((Alina(x) & Teenager(y) & SittingAcrossStreet(x,y)) -> PoliceCalledForLookingSuspicious(x))", "all x y.((Alina(x) & Teenager(y) & SittingAcrossStreetFrom(x,y)) -> PoliceReport(x,y))", "all x y z.((Alina(x) & Teenage(y) & Street(z) & SittingAbove(x,y,z)) -> PoliceCall(x,y,z))", "all x y z.((Alina(x) & Teenager(y) & Home(z) & SittingAcrossStreet(y,z)) -> CallsPolice(x))", "(SittingStandby(Alina) & Spy(Alina,teen)) -> called PoliceInPrison(Alina))", "all x y.((Alina(x) & Teenage(y)) -> (CallsPoliceOn(x,y) & SittingAcrossStreetFrom(x,y) & ThoughtSheHasLookedSuspicious(x,y)))"]}
{"id": "enwn_validation_777", "nl": "Seeing someone who you think looks suspicious is not an emergency.", "fol": "", "prediction": ["all x y.((Doctor(x) & Person(y) & Sees(x,y)) -> -Emergency(x))", "all x.((SeesPerson(x) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "all x.((Person(x) & LooksSuspicious(x)) -> -Emergency(x))", "all x y.(((Says(x,y) & ThinkingLooksSuspicious(x)) -> -Emergency(x))", "all x y.((Person(x) & LooksSuspicious(x)) -> -Emergency(y))", "all x y.((Person(x) & Conspiracy(y)) -> -Emergency(x,y))", "all x.((Seeth(x) & -Emergency(x)) -> SuspicionousLooks(x))", "all x.((Sees(x) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "exists x.(Desired(x) & Individual(x) & Observe(x,y) & ConsidersSuspicious(x))", "all x.((Seeing(x,y) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "all x.((Says(x,y) & ThinksLooksSuspicious(y)) -> -Emergency(x))", "all x.((Says(x) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "all x.((Sees(x) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "all x.((Person(x) & LooksSuspicious(x)) -> -Emergency(x))", "all x.(Says(x,y) & ThinksLooksSuspicious(x))", "all x.((Knife(x) & LooksSuspicious(x)) -> -Emergency(x))"]}
{"id": "enwn_validation_778", "nl": "You should only call the police in an emergency.", "fol": "", "prediction": ["all x.((CallPolice(x) & Emergency(x)) -> CallPolice(x))", "all x y.((Police(x) & Emergency(y)) -> UseSnap(x,y))", "all x.((Experiment(x) & CallsPolice(x)) -> Emergency(x))", "all x y.((Police(x) & Emergency(y)) -> CallNever(x,y))", "all x y.((PoliceOffice(x) & EmergencyCall(y)) -> AlwaysCall(x,y))", "all x.((PoliceService(x) & Emergency(x)) -> Call(x))", "all x.(Emergency(x) -> CallPolice(x))", "all x y.((CallPolice(x) & Emergency(y)) -> CallPolice(x,y))", "all x.((Police(x) & Emergency(x)) -> Calls(x,y))", "all x.((Police(x) & EmergencyCall(x)) -> NotRequired(x))", "all x.((Police(x) & Emergency(x)) -> Calls(x,y))", "all x.((CallPolice(x) & Emergency(x)) -> CallPolice(x))", "all x y.((Police(x) & Emergency(y)) -> OnlyCall(x,y))", "all x.((Police(x) | Emergency(x))) -> Call(x,police))", "all x.((CallPoliceInEmergency(x)) -> CallPolice(x))", "all x.((Police(x) & Emergency(x)) -> CallIn(x,Police,Emergency))"]}
{"id": "enwn_validation_779", "nl": "Alina was not in an emergency when she called the police.", "fol": "", "prediction": ["Alina calledPolice(Alina,Call(Alina,Police) & -InEmergency(Alina,Police))", "all x.(CallToPolice(x) -> -Emergency(x))", "all x y.((Alina(x) & Police(y) & Called(x,y)) -> -InEmergency(x))", "all x.((Alina(x) & CalledPolice(x)) -> -Rinse(x))", "Alina was not in Emergency(Alina,c) now that she calledPolice(Alina,c))", "Alina's call to police -emergency(a) & called999(d) & -emergency(a))", "when she called the police, Alina was not inevitability.", "Alina called police and was not in emergency.", "Alina neemergency(a) -> CallsPolice(a))", "all x.((Alina(x) & CallsPolice(x)) -> -Emergency(x))", "Alina called police. She is not in a gurgle of emergency.", "Alina called the police but he was not inemergency.", "all x y.((Alina(x) & Police(y)) -> -Emergency(x,y))", "Alina a notInEmergency(a)? CalledPolice(b))", "all x.((Alina(x) & CallsPolice(x)) -> -Emergency(x))", "all x.((Alina(x) & Police(x)) -> -InEmergency(x))"]}
{"id": "enwn_validation_780", "nl": "Alina shouldn't have called the police.", "fol": "", "prediction": ["Alina shouldn't have called police.", "Alina doesn't call police.", "Alina shouldn't have called police.", "Alina shouldn't have called police.", "Alina would not have called the Police.", "Alina shouldn't have called police.", "Alina didn't call police.", "Alina should've called-offPolice.", "Alina shouldn't have called police.", "Alina nedeathCall(nopolice)", "Alina shouldn't have called police.", "Alina shouldn't have called police.", "Alina shouldn't have called Police.", "Alina shouldn't have called the police.", "-NoPolice(Alina,Natal)", "all x.((Alina(x) & -CallPolice(x)) -> -CallPolice(x))"]}
{"id": "enwn_validation_781", "nl": "You should generally follow the law.", "fol": "", "prediction": ["all x.(FollowLaw(x) -> GeneratesFreedom(x))", "all x.(TaiwanCode(x) -> FollowsLaw(x))", "all x.(ConsiderFollowLaw(x) -> Follow(x))", "all x.(Lehre(x) -> Follow(x))", "all x.(ShouldGovernment(x) -> FollowStatus(x))", "all x.(SufficientlyFollowsLaw(x) -> KeepsPrimar(x))", "all x.((AllowsLawSecurity(x)) -> FollowsLiability(x))", "all x.((FollowLight(x) & KeepsLicense(x)) -> Generally(x))", "all x y.(((User(x) & Law(y)) -> Follows(x,y))", "you should generallyfollowLiability(i)", "all x.((MrGov) & Law(x)) -> Follow(x,y))", "all x.((FollowsLaw(x)) -> FollowsLaw(x))", "all x.((FollowLegal(x) & FollowLaw(x)) -> TheNature(x))", "all x.((Doctor(x) & FollowLaw(x)) -> Open(x))", "all x.((Law(x) & GenerallyUsed(x)) -> Follows(x))", "all x.(CommitLaw(x) -> FollowsLaw(x))"]}
{"id": "enwn_validation_782", "nl": "Darrel bought a 48-rack of beer for his highschool nephew's friend.", "fol": "", "prediction": ["all x y z.((Darrel(x) & HighschoolNephew(y) & Nephew(z)) -> PurchasedBeer(x,y,z))", "all x.((Dorrel(x) & HighschoolNephew(x,y)) -> BuysGiftRackOfBeer(x,y))", "all x y.((Darrel(x) & HighSchoolNephew(y)) -> BuysRackOfBeer(x,y))", "all x y.((Darrel(x) & HighSchoolNephew(y) & Nephew(y)) -> BuyingGround(x,y))", "all x.(Derel(x) -> (BuysElement(x,48) & BuysElement(x,48) & ForNephew(x) & HighSchoolNephewFriend(x)))", "(HitPrize(Experience) & PurchasedBeer(Experience))", "-Darrel(Darrel,48) PurchasingWare(Darrel,Jennifer)", "all x y.((Derel(x) & Nephew(y) & HighSchoolBruceFriend(z)) -> BuysBeerFor(x,y,z))", "all x y.((Darrel(x) & HighschoolNephew(y)) -> boughtBeer(x,y))", "(BuysArticle(Darrel) & LowschoolBrunchGuest(Darrel))", "all x.((Darrel(x) & Neeple(nee) ofHighSchool(x,48)) -> PurchasesBeerForFriend(x,nee))", "all x y z.((Darrel(x) & HighSchoolNephew(y) & Brewery(z)) -> (Buys48Rack(x,z) & Neighbor(y) & Neighbor(z)))", "both the grandfather and nephew bought a 48Rack of Beer for his friend, the highschoolnephew(Darrel)", "Darrel bought a 48-rack of beer for a friend of his nephew at highschool (Darrel, y.a.).)", "all x y.((Darrel(x) & HighSchoolNephew(y) & BuysBeer(x,y)) -> BuysBeer(x,drew,y))", "all x y.((Darrel(x) & Niece(y) & HighSchoolFriend(z) & Buys(x,y)) -> BuysFreeZeroRackOfBeer(x,z))"]}
{"id": "enwn_validation_783", "nl": "People in highschool mostly have highschool-aged friends.", "fol": "", "prediction": ["all x.(Highschool(x) -> HasHighschoolAgedFriends(x))", "all x.(HighSchoolAge(x) -> HasHighschoolAgeFriends(x))", "all x.((PeopleInHighschool(x) & HighschoolAgeFriends(x)) -> Has.(Friend(x,highschoolAge)))", "all x.(Highschool(x) -> HasHighSchoolAgeFrereunds(x))", "all x.(Highschool(x) -> HasHighSchoolAgedFriends(x))", "all x.((Person(x) & HighSchoolAgeFriends(x)) -> HasHighSchoolAgeFriends(x))", "all x.(HochSchool(x) -> MostHasHighschoolAgedFriends(x))", "all x.(Highschool(x) -> HasHighschoolAgeFriends(x))", "all x.(HighschoolPsychologist(x) -> HasHighschoolAgeFriends(x))", "all x y.((LowerSchool(x) & Highschool(y)) -> HasHighschoolAgedFriends(x,y))", "all x.(HighschoolPersonnel(x) -> (HasHighschoolAgeFavorites(x)))", "(all x.(Highschooler(x) -> HighSchoolAgeFriends(x)))", "all x.(HighSchool(x) -> HighschoolAgeFriends(x))", "all x.(Highschool(x) -> HasHighSchoolAgeFriends(x))", "all x.(HighSchoolPerson(x) -> (HasHighschoolAgeFamilies(x)))", "all x.(HighSchoolCompany(x) -> HasHighschoolAdvancedFriends(x))"]}
{"id": "enwn_validation_784", "nl": "Supplying minors with alcohol is illegal.", "fol": "", "prediction": ["all x.(SupplyingAlcohol(x) -> Illegal(x))", "all x.((Minor(x) & DrinksAlcohol(x)) -> Illegal(x))", "exists x.(Minor(x) & SupplyingWithAlcohol(x))", "all x.((Minor(x) & SupplyingAlcohol(x)) -> Illegal(x))", "all x.((Minor(x) & SupplyWithAlcohol(x)) -> Illegal(x))", "all x.((Minor(x) & ProvidesAlcohol(x)) -> Illegal(x))", "all x.((MinorMinor(x) & SupplyingAlcohol(x)) -> Illegal(x))", "all x.(SupplyMinorsWithAlcohol(x) -> Illegal(x))", "all x y.((Minor(x) & Alcohol(y)) -> Illegal(x,y))", "all x.((Minor(x) & SupplyingAlcohol(x)) -> Illegal(x))", "all x.(SupplyMinorsWithAlcohol(x) -> Illegal(x))", "all x.((Minor(x) & SuppliesAlcohol(x,y)) -> Illegal(x))", "all x y.((Minor(x) & Minor(y)) -> SupplyingWithAlcohol(x,y))", "all x.((Minor(x) & SuppliesALcohol(x)) -> Illegal(x))", "(All x.((Minor(x) & Alcohol(x)) -> Illegal(x))", "all x.((Minor(x) & Alcohol(y)) -> Illegal(x))"]}
{"id": "enwn_validation_785", "nl": "Darrel's nephew's friend was probably a minor.", "fol": "", "prediction": ["all x.((Derrel'sNeighbor(x) & NeighborFriend(x)) -> Minor(x))", "all x.((NecclesiasteFriend(x,Darrel) & Neighbor(x)) -> Minor(x))", "all x.((DerelsNotefulFriend(x) & Nephew(x)) -> Minor(x))", "all x.((Nephew(x) & NeighborFriend(x)) -> Minor(x))", "all x.(Liar(x) & Neighbor(x) & Neighbor(x))", "(MinorNephewFriend(Darrel))", "all x.((Delawaren(x) & Neighbor(x)) -> Minor(x))", "all x.((Nephew(x) & Neighbor(x) & Neighbor(x)) -> Minor(x))", "all x.((Neighbor(x) & NeighborFriendOf(x,y)) -> Minor(y))", "all x.((NegroGiver(x) & DarrelsNegroFriend(x)) -> Minor(x))", "(Pair(Darrel) Neighbor(Darrel) & Neighbor(Darrel))", "(Friend(DarrelsNeonfriend) & MightYear(Darrel) & Minor(Darrel))", "all x.((Neeper(x) & Neighbor(x)) -> Kid(x))", "(Neighbor(Darrel) & NeighborFriend(Darel))", "all x.((Neighbor(x) & Neighbor(x)) -> MayBeMinor(x))", "all x.((Neighbor(x) & Nefe(x,decade,n)) -> WasMinor(x))"]}
{"id": "enwn_validation_786", "nl": "Darrel was probably buying the beer for a minor.", "fol": "", "prediction": ["all x y.((Darrel(x) & Beer(y) & Minor(z)) -> PurchasedFor(x,y,z))", "(WhoKnew(Darrel) & Brew(a) -> Minor(b)))", "all x y.((Darrel(x) & Beer(y) & Minor(z)) -> BuysFor(x,y,z))", "all x.((Derrel(x) & Minor(y)) -> ForBuyer(x,y))", "(BrewBear(Darrel) & PurchasedForMinor(Darrel))", "all x y.((Dartrel(x) & Major(y)) -> PurchasesBeerFor(x,y))", "the beers he bought for a minor.", "all x.(Darrel(x) -> BuysBeerForMinor(x))", "all x y z.((Darrel(x) & Beverage(y) & Minor(z)) -> ProbablyBuying(x,y,z))", "all x y.((Darrel(x) & Brewer(y)) -> BuysForMinor(x,y))", "all x.((Darrel(x) & Mindless(x)) -> BuyingBeerFor(x,beerand,beermind))", "(Beverage(Darrel) & Minor(Darrel))", "Darrel probably bought the beer for a minor.", "all x y.((Darrel(x) & Minor(y)) -> PurchasedBeerFor(x,y))", "Probably purchasedBerryForMinor(Darrel)", "all x.((Darrel(x) & Buys(x,bird)) -> Minor(x))"]}
{"id": "enwn_validation_787", "nl": "It was probably illegal for Darrel to buy the beer.", "fol": "", "prediction": ["Probably IllegalToBuyBeer(Dorrel)", "(IlllegalFor(Darrel) & Brew(Brew))", "IllegalToBuyBeer(darrel)", "Es war wohl illegal for Darrel to BuyBeer(d)", "Probably IllegalForDarrelToBuyBeer(d,e,f))", "(LikelyIsInterest(Darrel) & PurchaseBerry(Darrel))", "probably illegal for Darrel to buy beer.", "All x y.((Darrel(x) & Beer(y)) -> ProbablyIllegal(x,y))", "all x y.((Derel(x) & Beer(y)) -> Illegal(x,y))", "Possibly illegal for Darrel to BuyBerry(darel.com).", "all x.((Brewer(x) & Darrel(x)) -> Illegal(x))", "probably illegal for Darrel to buy the beer.", "probably illegal for Darrel to buy the beer.", "probably illegal for Darrel to BuyBerry(Durrel)", "definitely illegal for Darrel to buy the beer.", "(IsAlmostIllegal(Darrel) & BuysBier(Darrel,Beer))"]}
{"id": "enwn_validation_788", "nl": "Darrel shouldn't have bought the beer.", "fol": "", "prediction": ["-BuyedBerry(Darrel,Beer)", "(-BuriedBeer(Darrel))", "-shouldHaveBuyedBeer(Darrel)", "Darrel shouldn't have bought the beer so he can't have bought it.", "all x.(Dorel(x) -> -BuyedBeer(x))", "(He shouldn't-BuysBier(Darrel))", "-DarrelBuyed(n)", "Darrel shouldn'thaveBuyedTheBier(s)", "(Is-BreadBuy((Darrel) & Darrel(Darrel))", "Darrel should never have bought beer.", "Darrel sollte -BuyedBread(darl,bi-beer)", "Darrel shouldn't have bought the beer.", "Darrel shouldn't have boughtthebeer(Darrel)", "(-BuysBerry(Darel,Beer))", "-Buyed(Darrel)", "(-BuyedBerry(darrel))"]}
{"id": "enwn_validation_789", "nl": "It's rude to interrupt people.", "fol": "", "prediction": ["all x.(It'sRuleToInterruptPeople(x))", "all x.((InterruptsPeople(x) & Rude(x)) -> Reine(x))", "all x.(RuleInterruptingPeople(x) -> InterruptedPeople(x))", "all x.(RugileInterruptsPerson(x) -> Interrupts(x))", "(Relax(InterruptedPeople) -> Rude(InterruptsPeople))", "all x.((InterruptsPeople(x) & Rupid(x)) -> -Relaxing(x))", "all x.(RuleInterrupts(x) -> -InterruptsPeople(x))", "all x.((InterruptsPeople(x) & Rusty(x)) -> -UtilizesPeople(x))", "all x.(InterruptPerson(x) -> Rusty(x))", "all x.(Rully(x) -> InterruptsPeople(x))", "-RubiousToInterruptPeople(-)", "(InterruptPeople(a) -> Rupid(a))", "all x.(RuleInterrupters(x) -> InterruptPeople(x))", "(RuleInterruptsPeople(i) & People(f))", "all x.((Interrupter(x) & Inconvenient(x)) -> Rutile(x))", "all x.(RudeToInterrupt(x) -> People(x))"]}
{"id": "enwn_validation_790", "nl": "Miguel interrupted the song that Alice was listening to on the wireless speaker to play his song.", "fol": "", "prediction": ["all x y z.((Miliz(x) & Song(y) & WirelessSpeaker(z)) -> InterruptsToPlay(x,y,z))", "all x y.((Miguillos(x) & Alice(y)) -> (InterruptsSong(x,y) & PlaysSong(x,y)))", "all x y.((Mamil(x) & Alice(y)) -> InterruptsAllMichiganSongs(x,y))", "all x.((Michael,Alice) & WirelessSpeaker(a)) -> InterruptTheAliceSongToPlay(a,mystic))", "all x y.((Child(x) & WiredSpeaker(y)) -> MiguelInterruptedSong(x,y))", "((Alice(Miguel) | Alice(Alice))) - InterruptsSoundOnWirelessSpeaker(Miguel))", "all x.((Alice(x) & InterruptsSong(x,Alice) & WirelessSpeaker(x)) -> PlayMusic(x,Alice))", "-InterruptsSong(Michael,Alice,wirelessSpeaker) -> PlaysSong(Michael,Alice))", "all x y z.((Elizabeth(x) & Song(y) & WirelessSpeaker(z)) -> Interrupted(x,y))", "all x y z.((ExecutiveSong(x) & AliceListeningTo(y) & WirelessSpeaker(z)) -> Musician(x,z))", "all x.((Michlio(x) & Alice(x)) -> Played(x,Miguel,Alice))", "all x y.((MobileSpeaker(x) & Alice(y)) -> -InterruptsSong(x,y))", "all x y z.((Milco(x) & Song(y) & WirelessSpeaker(z) & AliceCooks(z)) -> Interrupts(x,y))", "all x.((Mizmo(x) & Alice(y) & WirelessSpeaker(x)) -> PlaysSong(x,y))", "all x y z.((Michael(x) & Song(y) & WirelessSpeaker(z)) -> Interrupts(x,y))", "all x y.((Miguel(x) & Alice(y) & InSite(x,y)) -> InterruptsSong(x,y))"]}
{"id": "enwn_validation_791", "nl": "You shouldn't interrupt people.", "fol": "", "prediction": ["all x.(InterruptPeople(x) -> -Interrupt(x))", "all x.((Interrupt(x) & Person(y)) -> -Interrupts(x,y))", "all x.((InterruptsPeople(x)) -> -IgnoresPeople(x))", "all x.(InterruptsPeople(x) -> -Initiates(x))", "all x.((Interrupts(x) | People(x))) -> -Interrupts(x))", "all x.((UseInPerson(x) & -Interrupt(x)) -> -Interrupt(x))", "all x.((Person(x) & -Interrupts(x)) -> -Interrupts(x))", "-InterruptPeople(x)", "all x.(InterruptPeople(x) -> -InterruptPeople(x))", "all x.((InterruptPeople(x) & DoNotInitializePeople(x)) -> -InterruptPeopleFromInterruptingPeople(x))", "all x.(InterruptPerson(x) -> -InterruptPeople(x))", "all x.(InterruptPeople(x) -> -InterruptEveryONE(x))", "all x.(Interrupts(x) -> -Person(x))", "all x.(ConquerPeople(x) -> -InterruptPeople(x))", "all x.(InterruptPeople(x) -> -InterruptPeople(x))", "all x.((InterruptPerson(x) & -InterruptPerson(x)) -> KeepsPeopleOperated(x))"]}
{"id": "enwn_validation_792", "nl": "Miguel shouldn't have interrupted Alice's song.", "fol": "", "prediction": ["Alice's song was a bad one.", "all x.((Miguel(x) & AliceTheSong(x)) -> -Interrupted(x,macarena,macarena))", "all x.((Miguel(x) & Alice(y)) -> -ContrayedSong(x,y))", "-InterruptedAlice'sSong(Michael)", "all x.(BeautifulSong(x) -> -InterruptedAlice(x))", "all x.(Milgourello(x) -> -InterruptedAlicesSong(x))", "(And AliceSong(Miguillo) -> -Interrupted(Miguillo))", "all x.((Michael(x) & -InitiatedAliceSong(x)) -> -InterruptedSong(x,AliceSong))", "all x.((Michael(x) & -InterruptedAlicesSong(x)) -> -InterruptedAlicesSong(x))", "all x.((Miguel(x) & AliceSong(Alice)) -> -Interrupted(x,Alice))", "-InterruptedAlbum(Michael)", "(-InterruptsAlice'sSong(Michael))", "all x.(Miguel(x) -> -InterruptsAlicesSong(x))", "all x.((Muriel(x) & AlicesSong(x)) -> -Interrupted(x,m,j))", "all x.((Michele(x) & Alice(y)) -> -InterruptedSong(x,y))", "all x.((Miguel(x) & -InterruptedAlicesSong(x)) -> -InterruptedAlicesSong(x))"]}
{"id": "enwn_validation_793", "nl": "Foods that contain a lot of sugar are unhealthy.", "fol": "", "prediction": ["all x.((Food(x) & ContainsBoardOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & Contains(x,y)) -> Unhealthy(x))", "all x.((Food(x) & LotsOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & LotsOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsTaskOfSugar(x)) -> Healthless(x))", "all x.((Food(x) & ContainsLotsOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLotOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLotOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsBonusOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLotOfSugar(x)) -> Unhealthy(x))", "all x y.((Food(x) & Sugar(y) & Contains(x,y)) -> Unhealthy(x))", "all x.((Food(x) & LotsOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & LotsOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLotsOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & LotsOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLotOfSugar(x)) -> Unhealthy(x))"]}
{"id": "enwn_validation_794", "nl": "Monica refused to get her son Froot Loops because she thought they were too sugary.", "fol": "", "prediction": ["(RossMonica(Monique) & SonFrootLoops(Monica))", "(Riskant(Monica,Sulfones) | -TooSugary(Monica,Sulfones)))", "all x y.((Monica(x) & Son(y) & FrootLoops(y)) -> RailedDisappointed(x,y))", "all x y.((Monica(x) & Son(y) & FoundTooSugary(x,y)) -> DontGetForFrootLoops(x,y))", "(RefusedToKneeFrootLoops(Monica,FrootLoops) -> TooSugary(Monica,FrootLoops))", "she refused to get sons FrootLoops because they were too sugary.", "(-RefusedToGetSon(MeanMomBy(Mom) & ThoughtTooSugary(Mom))", "all IsEnough(Monica,HasSugaryFrootLoops) -> -GivesFor(Monica,HasSugaryFrootLoops))", "(RefusedToGetFrootLoops(Mom,Mary) & IsTooSugary(Mom,Mary)))", "ALL X Y.((Monica(x) & Son(y) & FrootLoops(y)) -> (RefusedToGet(x,y) & Tried(x,y)))", "all x y.((Monica(x) & SonFrootLoops(y)) -> -RefusedToGoGo(x,y))", "-(RissfulToGive(mom,FrootLoops) & TooSugary(mom,frootLoops))", "all x y.((Monica(x) & Son(y) & -OfFrootLoops(x,y)) -> (RefusedToGet(x,y) & -TooSugary(x)))", "all x.((Monica(x) & SonLoops(y) & TooSugary(x,y)) -> -RentedToGiving(x,y))", "all x y.((Monica(x) & Son(y) & -TooSugary(y,x)) -> RefusedToGrowFrootLoops(x,y))", "all x y.((Monica(x) & Son(y) & Smoky(y)) -> -TooSugary(x,y))"]}
{"id": "enwn_validation_795", "nl": "It's okay to refuse to do something if you have a good reason.", "fol": "", "prediction": ["(all x.((Movement(x) & Cause(x)) -> Accept(x)))", "all x.((IsIllensive(x) & GoodRaison(x)) -> Refuse(x))", "all x.((IsAlrightToRefuse(x) & GoodGrandma(x)) -> AcceptedFor(x))", "all x.((GoodRaison(x) & RefusesDoing(x)) -> OKToRefuse(x))", "all x.((Bath(x) & Reason(x)) -> Good(x))", "all x.((RefusesToDo(x) & GoodRight(x)) -> OK(x))", "all x.((RefuseToDo(x,y) & GoodRaison(y)) -> Okay(x))", "all x.((Refusal(x) & GoodRight(x)) -> GoodFocused(x))", "all x.((Refuses(x) & GoodRandom(x)) -> Acceptable(x))", "all x.((Principled(x) -> GoodDemand(x))", "all x.((RefusingToDoAgree(x) & GoodRunnin(x)) -> OK(x))", "all x.((Breaking(x) & GoodRight(x)) -> OKToRefuse(x))", "all x.((Refusal(x) & GoodRun(x)) -> Acceptable(x))", "all x.((IsAlways(x) & GoodPrain(x)) -> RefusesToDo(x))", "all x.((UseRefusal(x) & GoodRight(x)) -> OK(x))", "all x.((GoodRight(x) & RefusingToDo(x)) -> Okay(x))"]}
{"id": "enwn_validation_796", "nl": "It's a good idea to prevent your children from eating unhealthy food.", "fol": "", "prediction": ["all x.((GoodIdeaToPrevent(x,ChildrenEatUnhealthyFood)) -> GoodIdea(x))", "all x.((Child(x) & UnhealthyFood(x)) -> GoodIdea(x))", "all x y z.((Child(x) & Cheese(y) & Food(z)) -> PreventsFromEatingUnhealthy(x,z))", "all x.((Child(x) & GoodIdea(x)) -> PreventsUnhealthyFood(x))", "all x.((Child(x) & HasUnhealthyFood(x)) -> GoodInterest(x))", "all x y.((Child(x) & Food(y)) -> PreventsFromEating(x,y))", "all x.((GoodIdea(x) & Children(x)) -> -EatunicFood(x))", "all x.((IncreasesChildrenEatingUnhealthyFood(x)) -> GoodIdea(x))", "all x.((Child(x) & -UnhealthyFood(x)) -> GoodIdeaToPrevent(x))", "all x.(DoesInstructMeNotToEatUnhealthyFood(x) -> GoodOneToPrevent(x))", "all x.((It'sGoodToPreventChildrenEatingUnhealthyFood(x)) -> GoodIdea(x))", "all x.((Child(x) & -Child(x)) -> GoodIdea(x))", "all x.((Child(x) & UnhealthyFood(x)) -> GoodIdea(x))", "all x.((GoodIdea(x) & DoesSeason(x)) -> PreventsCandies(x))", "all x.((PositiveToIncreaseEatingDeadness(x) & Children(x)) -> GoodIdea(x))", "all x y.((Child(x) & Child(y)) -> PreventsUnhealthyFood(x,y))"]}
{"id": "enwn_validation_797", "nl": "Monica refused to get her son Froot Loops because she thought they were unhealthy.", "fol": "", "prediction": ["all x y.((Monica(x) & Son(y)) -> (RefusedToGive(x,y) & ThoughtsSoundUnhealthy(y)))", "(Nefastosic(Monica) & SonFrootLoops(Monica))", "ALL x.((Monica(x) & Son(y)) -> RefusedThanBeingFrootLoopsMeanings(x,y))", "all x y.((Monica(x) & Son(y) & Unhealthy(y)) -> Refused(x,y))", "all x.((Monica(x) & SonFrootLoops(x)) -> (RefusedToGet(x,y) & Unhealthy(y)))", "all x y z.((Monica(x) & Son(y) & Loose(z)) -> (RefusedToGet(x,y,z) | Unhealthy(y)))", "(Insane(Micah) & Son(Adam).NeverGiveFrootLoops(Micah))", "all x.((Monica(x) & MongumFrootLoops(x)) -> -(Unhealthy(x) | Unhealthy(x))))", "(Refused(Monica,FrootLoops) & ThoughtFrootLoopsUnhealthy(Marica))", "all x y.((Monica(x) & SonFrootLoops(y)) -> (ReceivedDueToUnhealthy(x,y) & -Unhealthy(y)))", "all x y.((Monica(x) & Son(y)) -> (RefusedToGet(x,y) & Unhealthy(y)))", "all x y z.((Monique(x) & Son(y) & Son(z) & Unhealthy(ez)) -> REVERTEEDFrootLoops(x,y,z))", "all x y z.((Monica(x) & Son(y) & Son(z)) -> (RunsRuns(x,y) | Blessed(y)))", "all x.((Monica(x) & SonFrootLoops(x)) -> Unhealthy(x))", "all x y.((Son(x) & Son(y) & NotHasBeenHairy(x,y)) -> RefusedToGet(x,y))", "(NeedsFrootLoops(Monica,X) | IsUnhealthy(Monica,FrootLoops)))"]}
{"id": "enwn_validation_798", "nl": "It's okay to refuse to give your children unhealthy food.", "fol": "", "prediction": ["all x.((Child(x) & RefusedWithChild(x)) -> UnhealthyFood(x))", "all x.((Child(x) & -UnhealthyFood(x)) -> Acceptable(x))", "all x y.((Child(x) & RefusesUnhealthyFood(x,y)) -> OkayToRefuse(x,y))", "all x.(RefusesInfamy(x) -> UnhealthyFood(x))", "all x.((Child(x) & -UnhealthyFood(x)) -> Refusal(x))", "all x.((Child(x) & RefusesUnhealthyFood(x)) -> -NotGood(x))", "all x.((Children(x) & DishonestFood(x)) -> OKToRefuse(x,unhealthyFood))", "all x.((Children(x) & UnhealthyFood(x)) -> OKToRefuse(x,y))", "all x.((Child(x) & RefusesSadFood(x)) -> SafeToRefuse(x))", "all x.(AcceptableToBirthUnhealthyFood(x) -> Kids(x))", "all x.((Child(x) & -GiveUnhealthyFood(x,y)) -> OKToRejected(x))", "all x.(RefusesUnhealthyFood(x) -> Acceptable(x))", "all x.((Child(x) & DoneWithUnhealthyFood(x)) -> Acceptable(x))", "all x.((Child(x) & RefusesUnhealthyFood(x)) -> OKToFight(x))", "all x.((Current(x) & RejectsUnhealthyFood(x)) -> Okay.", "all x.((Child(x) & RefusesSuchUnhealthyFood(x)) -> OK(x))"]}
{"id": "enwn_validation_799", "nl": "It was okay for Monica to refuse to get her son Froot Loops.", "fol": "", "prediction": ["all x y z.((Mona Lisa(x) & Son(y) & Son(z)) -> BeamedToRefuse(x,y,z))", "all x.((Mmonica(x) & RefusedToGiveFrootLoops(x)) -> Okay(x))", "all x.((Monica(x) & KrakenLoops(x)) -> -GrabsRents(x))", "all x y.((Monica(x) & Son(y) & RefusesCutting(x,y)) -> Weak(x,y))", "all x y.((Monica(x) & Son(y)) -> RefusedToGet(x,y))", "all x.((Monica(x) & RefusedToGetFrootLoops(x)) -> OK.", "all x.((Monica(x) & RefusedToGive(x,FrootLoops)) -> Agrees(x,Mondo,FrootLoops))", "all x y.((Monica(x) & Son(y)) -> RefusedToGetFrootLoops(x,y))", "all x.((Monica(x) & RefusedHasSonFrootLoops(x)) -> OK(x))", "all x y.((Monica(x) & SonFrootLoops(y)) -> RefusedToGet(x,y))", "all x.((Momophone(x) & RefusedSonFrootLoops(x)) -> Okay(x))", "all x.((Monica(x) & SangsterFrootLayers(x)) -> OkayForRefusing(x,y))", "all x y.((Monica(x) & Son(y)) -> InacceptableToWithholdGivenFrootLoops(x,y))", "(allowed.((Monica,FrootLoops)) | Ridden((Monica,FrootLoops)))", "[(BritainsRefusalElements(Momia,FrootLoops)) -> Acceptable(Momia,FrootLoops))", "((Momione(Mary) & Son(FrootLoops)) -> RefusedToGet(Monyon(Monie)))"]}
{"id": "enwn_validation_800", "nl": "Tax fraud is inadvisable.", "fol": "", "prediction": ["all x.(TaxFraud(x) -> Inadvisable(x))", "all x.(TaxFraud(x) -> Inadvisable(x))", "all x.(TaxFraud(x) -> Inadvisable(x))", "all x.(TaxFraud(x) -> Inadvisable(x))", "all x.(TaxeFraud(x) -> Inadvisable(x))", "all x.(TaxFraud(x) -> Inadvisable(x))", "all x.(TaxFraud(x) -> (Inadvisable(x)))", "all x.(TaxFraud(x) -> Inadvisable(x))", "all x.(TaxFraud(x) -> Inadvisable(x))", "(FraudulentTax(tax) & Inadvisable(tax,tax))", "all x.(TaxFraud(x) -> -Advenged(x))", "all x.(TaxFraud(x) -> Inadvisable(x))", "all x.(TaxFraud(x) -> -advisable(x))", "all x.(TaxFraud(x) -> Inadvisable(x))", "all x.((TaxFraud(x) & Inadvisable(x)) -> TaxFraud(x))", "all x.(TaxFraud(x) -> Inadvisable(x))"]}
{"id": "enwn_validation_801", "nl": "Writing personal purchases off as business expenses is tax fraud.", "fol": "", "prediction": ["all x y.((PersonalPurchase(x) & BusinessExpense(y) & WritesOff(x,y)) -> TaxFraud(x))", "all x y z.((PersonalPurchase(x) & BusinessExpense(y) & PersonalPurchase(z) & WritenOff(x,y,z)) -> TaxFraud(x))", "all x.((WritingPersonalPurchasesOffAsBusinessExpenses(x)) -> TaxFraud(x))", "all x.((WritesPersonalPurchasesOffOffAsBusinessExpenses(x)) -> TaxFraud(x))", "all x.((PersonalPurchase(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x y.((PersonalPurchase(x) & BusinessExpense(y)) -> TaxFraud(x))", "all x.((WritesPersonalCostsOffAsBusinessExpenses(x)) -> TaxFelt(x))", "all x.((WritesPersonalPurchasesOffAsBusinessExpenses(x)) -> TaxFraud(x))", "all x.(WritesPersonalExpenses(x) -> TaxFraud(x))", "all x y.((PersonalPurchase(x) & BusinessExpense(y) & OffPurchase(x,y)) -> TaxFraud(x))", "all x y.((PersonalCredit(x) & BusinessExpense(y)) -> TaxFraud(x,y))", "all x.((RealizingPersonalPurchases(x) & BusinessExpenses(x)) -> TaxFraud(x))", "all x.(WritesPersonalProcessesAsBusinessExpenses(x) -> TaxFraud(x))", "all x.((PersonalPurchase(x) | BusinessExpense(x)) -> TaxFraud(x))", "all x.((WritesPersonalPurchasesOffAsBusinessExpenses(x)) -> TaxFraud(x))", "all x y.((PersonalCaution(x) & BusinessExpense(y)) -> TaxFraud(x))"]}
{"id": "enwn_validation_802", "nl": "Patrice bought himself a jacuzzi and wrote it off as a business expense.", "fol": "", "prediction": ["all x y z.((Patrice(x) & Jacuzzi(y) & BusinessExpense(z)) -> (Buys(x,y) & WritesOff(x,z)))", "all x.(Patrice(x) -> (BuyedJackiotto(x) & WrittenOffAsBusinessExpense(x)))", "all x y.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesAsBusinessExpense(x)))", "all x y z.((Patrice(x) & Jacuzzi(y) & BusinessExpense(z)) -> (Buys(x,y) & WritesOff(x,z)))", "(BuysJacuzzi(Patrice) & WrittenOffAsBusinessExpense(Patrice))", "(Appreciate(Patrice) & Purchase(Patrice,Jacuzzi) & WriteOff(Patrice,BusinessExpense))", "all x y z.((Patrice(x) & Jacuzzi(y) & BusinessExpense(z)) -> (Buys(x,y) & WritesOff(x,z)))", "all x y.((Patrice(x) & Jacuzzi(y)) -> (Buyer(x,y) & wrote off(x,y)))", "all x.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOff(x,y)))", "all x y.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOffAsBusinessExpense(x,y)))", "all x y.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOff(x,y)))", "all x.((Patrice(x) & Jacuzzi(y)) -> BuysAndWritesOffBusinessExpense(x,y))", "all x.(Patrice(x) -> (BuysJacuzzi(x) & WritesOffBusinessExpense(x)))", "all x y z.((Patrice's Jacuzzi(x) & BusinessExpense(y) & Purchase(z,x)) -> PurchasedAndWrittenOff(x,y,z))", "all x y.((Patrice(x) & Jacuzzi(y)) -> (Built(x,y) & WritedAcclaim(x,y)))", "all x.(BoughtJacuzzi(x) & RushedOffBusinessExpense(x))"]}
{"id": "enwn_validation_803", "nl": "Writing the jacuzzi off as a business expense was tax fraud.", "fol": "", "prediction": ["all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jackacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jakuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jcuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))"]}
{"id": "enwn_validation_804", "nl": "Patrice should not have written off the jacuzzi.", "fol": "", "prediction": ["-written off jacuzzi(Patrice)", "the jacuzzi.", "Patrice should not have written off jacuzzi.", "all x.((Patrice(x) & Jacuzzi(x)) -> -WrittenOff(x,y))", "(-WrittenOffJacuzzi(Patrice))", "-(WrittenOffJacuzzi(Patrice))", "Patrice n'adopted(n) & Jacuzzi(z) & -WrittenOff(n,z))", "all x.((Patrice(x) & -WrittenOffJacuzzi(x)) -> -Patrice(x))", "(-(PatriceAndJacuzzi(Patrice)))", "-Would(Patrice,Jacuzzi)", "-(WrittenOffJacuzzi(Patrice) & -ReadyOffJacuzzi(Patrice)))", "-WrittenOffJacuzzi(Patrice)", "Oops, Patrice.", "all x.((Patrice(x) & -WrittenOffJacuzzi(x)) -> -WrittenOffJacuzzi(x))", "-Couldn'tWriteOffJacuzzi(Patrice)", "(-WrittenOffJacuzzi(Patrice))"]}
{"id": "enwn_validation_805", "nl": "Spiking someone's drink is a very bad thing to do.", "fol": "", "prediction": ["all x.((SpikingDrink(x) & Person(y)) -> BadThingToDo(x,y))", "all x y.((Drink(x) & Spit(y,x)) -> BadThingToDo(x,y))", "all x y.((Drink(x) & Spiking(x,y)) -> BadThingToDo(x))", "all x y.((Drink(x) & Spiking(x,y)) -> BadThingToDo(x))", "all x.((Spide(x) & Drink(y)) -> BadThingToDo(x))", "all x y z.((Drink(x) & Spiking(y) & Drink(z)) -> VeryBadThing(x,y,z))", "all x y.((Drink(x) & Spiking(y,x)) -> BadThingToDo(x,y))", "all x.((Drink(x) & Spiking(x)) -> BadThingToDo(x))", "all x.((SpidingDrink(x) & Drinker(x)) -> VeryBadThing(x))", "all x.(Spiding(x) -> BadThingToDo(x))", "all x.(Spriking(x) -> BadThingToDo(x))", "all x y.((Drink(x) & Spiking(x,y)) -> VeryBadThing(y))", "all x.((SpikingDrink(x) & BadThanDo(x)) -> Drinking(x))", "all x y.((Spider(x) & Man(y)) -> BadThingToDo(x,y))", "all x.((SpikingDrink(x) -> BadThing(x))", "all x.(SpitzingDrink(x) -> BadThingToDo(x))"]}
{"id": "enwn_validation_806", "nl": "If someone does something bad to you, it makes sense to want to avoid them.", "fol": "", "prediction": ["all x.((DoesBadToYou(x) & WantsToAvoid(x)) -> MakesSense(x))", "all x.(DoesBadToYou(x) -> MakesSenseToAvoid(x))", "all x y.((DoesBadToYou(x,y) & HasPoorEssential(x)) -> WantsToAvoid(x,y))", "all x.(DoesBadToYou(x) -> MakesSenseToVoteToAvoidThis(x))", "all x y.((DoesBadToYou(x,y)) -> WantsToAvoid(x,y))", "all x.(DoesBadToYou(x) -> MakesSenseForAvoidance(x))", "all x.((DoesBadToYou(x)) -> MakesSense(x))", "all x.((DoesBadTo(x) & ToYou(x)) -> WantsToAvoid(x))", "all x.((DoesBad(x) & ToYou(x)) -> MakesSenseToVisit(x))", "all x.(DoseBadTo(x,y) -> NeedToAvoid(x,y))", "all x.((DoesBadToYou(x) | WantsToAvoid(x)) -> NecessaryAvoidance(x))", "all x.(DoesBadToYou(x) -> MakesSenseForAvoidingThis(x))", "all x.(DoesBadToYou(x) -> MakesSenseToVisit(x))", "all x.((Person(x) & BadToYou(x)) -> MakesSense(x))", "all x y.((DoesBadTo(x,y) & Person(x)) -> MakesSenseToAvoid(x,y))", "all x y.((DoesBadTo(x,y) & Person(x)) -> WantsAvoidance(y,x))"]}
{"id": "enwn_validation_807", "nl": "Elena told her friends to cut ties with Pat after he spiked her drink.", "fol": "", "prediction": ["all x y.((Ellen(x) & Pat(y) & SpikesDrink(y)) -> CutTies(x,y))", "all x y z.((Ellen(x) & Pat(y) & Tie(z) & SpikesDrink(x)) -> CutsTiesAfterPatSpike(x,y,z))", "all x y.((Female(x) & Pat(y) & SpikesDrink(x,y)) -> CutTiesWith(x,y))", "Pat spiked her drink, so Elena told her friends to cuttties with Pat.", "((Friend(Ellen) & PatSpizedDrink(Ellen)) -> CutTies(Ellen))", "all x y.((Elecena(x) & Pat(y) & SpikedDrink(y)) -> CutTies(x,y))", "all x y z.(((Eliza(x) & Friends(y) & Pat(z) & SpikesDrink(x,y) & GaveIn(y,z)) -> CutTies(x,y,z))", "all x y.((Girl(x) & Pat(y) & SpoiledDrink(x)) -> Avail[x,y))", "all x y.((Ellen(x) & Pat(h) & SpikesDrink(x)) -> CutsTiesWith(x,y))", "all x y.((Invitation(x) & Nick(y) & SpikedDrink(x,y)) -> CutTiesWithPat(y,x))", "all x y.((Ellen(x) & Pat(y) & SpingedDrink(y)) -> CutDeeds(x,y))", "all x y z.((Family(x) & Pat(y) & Tie(z) & SpikedDrink(z)) -> CutTies(x,y,z))", "all x y.(((Ellen(x) & Pat(y)) -> SpikeDrink(x,y))", "(CutTiesWith(Elena) & PatSpidedDrink(Elena))", "all x y.((Aid(x) & Friends(y) & Spike(x,y)) -> CatchesTies(y,x))", "all x y.((Valley(x) & Pat(y) & SpikedDrink(x)) -> LetsCutTiesWith(x,y))"]}
{"id": "enwn_validation_808", "nl": "If you don't want social contact with someone, your friends also need to stop associating with them.", "fol": "", "prediction": ["all x.((Friend(x) & -WantsSocialContact(x)) -> StopsAssociated(x))", "all x.(RegardsSocialContact(x) -> -AssociatesWithAgent(x))", "all x y.((Friend(x) & Friend(y)) -> WantsSocialContact(x,y))", "all x.((Friend(x) & -SocialContact(x)) -> StopAssociating(x))", "all x.((Friend(x) & -WantsSolventContact(x)) -> HasToStopAssociating(x))", "all x.((Friend(x) & -WantSocialContact(x)) -> NeedsStopAssociating(x))", "all x.((Friend(x) & -GaysOrGutsSocialContact(x)) -> NeedsStopAssociating(x))", "all x.((Friend(x) & -WantsSocialContact(x2)) -> ShouldStopAssociating(x))", "all x y.((Friend(x) & Friends(y) & -WantSocialContact(x,y)) -> StopAssociating(x,y))", "all x.((Friend(x) & -WantsSocialContact(x)) -> StopsAssociatingWith(x,y))", "all x y.((Friend(x) & Friend(y) & -SocialContact(x,y)) -> StopAssociatingWith(x,y))", "all x.((Friend(x) & -WantSocialContact(x,2)) -> CanstopAssociatingWith(x,2))", "all x y.((Friend(x) & Person(y) & -WantsSocialContact(x,y) (Call(x,y) | Ask(x,y))) -> StopsAssociating(x,y))", "all x y.((Friend(x) & -BakeSocialContact(x,y)) -> StopAssociatingWith(x,y))", "all x.((Friend(x) & -DoesSocialContact(x)) -> StopsAssociating(x))", "all x.((Friend(x) & -WantSocialContact(x)) -> StopAssociatingWith(x))"]}
{"id": "enwn_validation_809", "nl": "If someone spikes your drink, it makes sense to want to avoid them.", "fol": "", "prediction": ["all x.(Spiders(x) -> Avoids(x,y))", "all x.(SpikesDrink(x) -> MakesSenseAboutHasDrink(x))", "all x.(SpidesDrink(x) -> Appropriate(x))", "all x.(SpidersYourDrink(x) -> MakesSenseToEvit(x))", "all x y.((Pander(x) & Drink(y) & spikes(x,y)) -> MakesSenseToAvoid(x,y))", "all x.(SpidesDrink(x) -> MakesSenseAndNecessisToAvoid(x))", "all x.(SpidesDrink(x) -> MakesSenseToReplace(x))", "all x.(SpidesDrink(x) -> MakesSenseToAvoid(x))", "all x.(SpidersDrink(x) -> MakesSenseToAvoid(x))", "all x.(SpidesDrink(x) -> MakesSenseToVisit(x))", "all x.((Person(x) & SpikesDrink(x)) -> AvoidsDrink(x))", "all x.(SpunsDrink(x) -> (AvoidsHeartPops(x) & SpinsDrink(x)))", "all x.(SpidersDrink(x) -> MakesSenseToAvoid(x))", "all x.(StepsDrink(x) -> MakesSenseToVisit(x))", "all x.(SpidersDrink(x) -> ItMakesSenseToAvoid(x))", "all x.SpidersDrink(x) -> MakesSenseToVisit(x))"]}
{"id": "enwn_validation_810", "nl": "Elena was justified in wanting to avoid Pat.", "fol": "", "prediction": ["Elena a justly justifieden(x) -> Evacuates(x, Pat))", "Elena a justifi\u00e9e in wanting to avoidPat.", "Elena was justly justified in wanting to AvoidPat.", "Elena wished to avoidPat.", "all x.((Elenia (x) & Pat(x)) -> Justified(x))", "Elena war justifiable in avoidingPat.", "Elena was justified in wanting to avoid Pat.", "(WantToAvoid(Elena,Pat))", "((Ellen(Ellen) & Pat) & -Emerge(Elen)) -> Justified(Ellen))", "Elena a justifiablewonderingata@hmwcpa.g.p.((Elegance(u) & Pat(u))", "Elena is a Friend((Electra,AvoidsPat))", "Elena wusste, was justifiable, ne sat pat.", "Elena & Pat were justifiables in wanting to Avoid(Laura,Pat))", "Elena w\u00fcnschte esoterically s\u0103 \u00e9vitePat.", "Elena was justified in wanting to AvoidPat.", "Elena n.((SolicitedInWantingToAvoid(Nepal,Pat))"]}
{"id": "enwn_validation_811", "nl": "If Elena didn't want social contact with Pat, her friends would also need to stop associating with him.", "fol": "", "prediction": ["all x.((Family(x) & -CanGoSocialContact(x) & AlsoStopAssociatingWith(x,Pat)) -> Done(x))", "(NeedsToEndAssociatingWithPat.", "all x.((Eleanor(x) & -WantSocialContact(x,Pat)) -> Stopassociating(x))", "all x y.(((Ellen(x) & Pat(y)) -> -Alliance(x,y))", "all x.((Ellen(x) & -WantSocialContact(x,Pat)) -> FriendsPatTeachy(x,Pat))", "all x y.(((Ellen(x) & Pat(y)) -> -WantsSocialContact(x,y))", "all x y z.((Family(x) & Friends(y) & Pat(z) & NotSocialChange(x,y)) -> StopAssociating(y,z))", "all x.((Friend(x) & -WantSocialContactWithPat(x)) -> WouldStopAssociatingWithPat(x))", "all x.((Eleanor(x) & -SocialContact(xx) & Pat(x)) -> StopAssociatingTo(x,y))", "all x.((Father(x) & -(WantSocialContact(x,Pat) | Friends(x,Pat))) -> CanStopAssociating(x))", "all x y.((Friend(x) & -WantSocialContact(x,y)) -> -WantSocialContact(x,y))", "all x y.((Friend(x) & -InspiresIn(x,Eleanor) & Pat(y)) -> StopsAssociating(x,y))", "all x.((NeedsSocialContact(x) & Elena,Pat) & HasSocialContact(x)) -> HasSocialContact(x,Pat))", "all x.((Fall(x) & -WantSocialContact(x)) -> FacebookRef=TostopAssociating(x,Pat))", "all x y.((Friend(x) & Friends(y) & -WantSocialContact(x,y)) -> StopsAssociating(x,y))", "all x y.((Ellen(x) & Pat(y)) -> (-SocialContact(x,y) & Friends(x) & WillStopAssociating(x,y)))"]}
{"id": "enwn_validation_812", "nl": "Elena was justified in telling her friends to cut ties with Pat.", "fol": "", "prediction": ["all x y.((Element(x) & Friends(y)) -> CutTie(x,y))", "(RightedlyIntelligent(Elizabeth,CoatTies))", "all x.((Father(x) & Pat(y)) -> JustifiedToCutTies(x,y))", "all x.((Jay(x) & Pat(x)) -> JustifiedInCuttingTies(x))", "all x y.((Estella(x) & Pat(y)) -> RidiculousTeethingShuts(x,y))", "Elena was justly justified in telling friends to cut ties with Pat.", "all x y.(((Elizabeth(x) & Pat(y)) -> HadJustifiedInDecidingToCutTies(x,y))", "all x y.((Elena(x) & Pat(y)) -> JustifiedInTeething(x,y))", "(RightedInSendingTies(Elady,Pat) & Friends(Elady))", "all x y z.((Elena(x) & Friends(y) & Pat(z)) -> ReduedInTeethingSix(x,y,z))", "all x y z.((Exelna(x) & Pat(y) & Friends(z)) -> CutTies(x,y,z))", "all x y z.((Ellen(x) & Friends(y) & Pat(z)) -> RidiculousToCutTies(x,y,z))", "Elena deservedly told friends to cut ties with Pat.", "all x y z.((Eleana(x) & Pat(y) & Friends(z) & CutTies(x,y,z)) -> JustifiedLiving(x))", "all x y.((Elena'sFriend(x) & Friends(y) & CutTiesWith(x,y)) -> Justified(x))", "all x y.((Father(x) & Friends(y) & Pat(y)) -> IsJustifiedInTipCutting(x,y))"]}
{"id": "enwn_validation_813", "nl": "When you hit someone's car, you should leave a note.", "fol": "", "prediction": ["all x y.((Car(x) & Hit(x,y)) -> LeaveNote(x))", "all x y.((Attack(x,y) & Car(y)) -> LeaveNote(x,y))", "all x y.((ToxicCar(x) & Hit(x,y)) -> LeaveNote(x,y))", "all x.((HitPerson'sCar(x) & LeaveNote(x)) -> ShouldHitCar(x))", "all x.((HitCar(x) & Person(x,x)) -> ShouldLeaveNote(x))", "all x y.((HittingCar(x) & Hits(x,y)) -> LeaveNote(x))", "all x.((Flip(x,y) & Car(y)) -> ShouldLeaveNote(x,y))", "all x y.((HitCar(x) & Person(y) & HitsCar(x,y)) -> LeaveNote(x,y))", "all x.((InitialCar(x) & Hits(x,(x) -> LeaveNote(x)))", "all x y.((Car(x) & Hit(y) & Person(y)) -> LeaveNote(x,y))", "all x y.((Cake(x) & Hit(is(x,y)) -> YouMadeNote(x,y))", "all x.((HitCar(x) & Someone(y)) -> LeaveNote(x,y))", "all x y.((Drag(x,y) & Person(y)) -> ShouldLeaveNote(x,y))", "all x.((HittingCar(x) & HitsPerson(x)) -> LeaveNote(x))", "all x y.((MakingCar(x) & Person(y)) -> LeaveNote(x,y))", "all x y.((HitCar(x,y) & Car(y)) -> LeaveNote(x,y))"]}
{"id": "enwn_validation_814", "nl": "Biff backed into someone in the parking lot, then drove away without stopping.", "fol": "", "prediction": ["all x y.((Biff(x) & TheParkingLlot(y) & BackpedInto(x,y)) -> DrivenAway(x,y))", "(BacksInto(Biff) | DrivesAway(Biff))", "all x y z.((Biff(x) & ParkingLower(y) & Person(z)) -> (BacktapedInto(x,y) & DrivenWithoutStop(x,y)))", "Biff backed into someone in parking lot, drove away without stopping.", "all x y z.((Biff(x) & Person(y) & ParkingLot(z) & BackpedIntoInPast(x,y,z)) -> DrivenWithoutStop(x))", "all x y.((Biff(x) & Person(y)) -> (BacktrackedInto(x,y) & DrivedAbove(x)))", "all x y.((Biff(x) & ParkingLocation(y),y)) -> (BacktachedInto(x,y) & DrivedAway(x,y)))", "all x y.((Biff(x) & Person(y)) -> (BackfiredInto(x,y) & DrivenAwayWithoutHunting(x)))", "all x y z.((Biff(x) & Person(y) & ParkingLlot(z)) -> (BacksInto(x,y) & DrivesAway(x,z)))", "all x y z.((BBF(x) & Person(y) & ParkingLlot(z)) -> (BackpedInto(x,y,z) & DrivesAwayWithoutStop(x)))", "all x y.((Biff(x) & ParkingLot(y)) -> (BackpedInto(x,y) & Driver(x)))", "all x y.((Biff(x) & (Positioner(y) | ParkingLot(y))) -> (BacksInto(x,y) & DrivesWithoutStop(x)))", "all x y z.((Biff(x) & Person(y) & Parking(z)) -> (BacksInto(x,y) & DrivesAway(x) & NoStops(y,z)))", "all x.(Biff(x) -> (BacksInto(x,y) & ParkingLlt(x) & DriverDrivesWithoutStop(x)))", "all x y z.((Biff(x) & Someone(y) & ParkingLlot(z)) -> BacksInto(x,y,z))", "all x y.((Biff(x) & ParkingLeaf(y)) -> BackpedInto(x,y))"]}
{"id": "enwn_validation_815", "nl": "If you don't stop your car, you can't get out and leave a note.", "fol": "", "prediction": ["all x.((Cave(x) & -Stops(x)) -> -CanGetOut(x) & LeaveNote(x))", "all x.((Car(x) & Stops(x,x)) -> (-CanGetOutAndLeaveNote(x)))", "all x.((Car(x) & -Stops(x)) -> -CanGetOut(x) & CanLeaveNote(x))", "all x.((DrinksOnCar(x) & -Stops(x)) -> -CanGetOutAndLeaveNote(x))", "all x.((Runs(x) & -StopCar(x)) -> -CanGetOut(x) & CanLeaveNote(x))", "all x.((StopCar(x) & -StopCar(x)) -> -CanGoOut(x) & CanLeaveNote(x))", "all x.(StopCar(x) -> -InCar(x))", "all x.((Car(x) & -Stops(x)) -> -CanGrowOut(x) & CanLeaveNote(x))", "all x.((EmbarkCar(x) & -StopCar(x)) -> -CanGetOutAndLeaveNote(x))", "all x.(Opposes(x) -> (-StopCar(x) & -GetOut(x) & LeaveNote(x)))", "all x.((Don'tStopCar(x)) -> -CanGetOutAndLayNote(x))", "all x.((Car(x) & -StopYourCar(x)) -> -CanGetOutAndLeaveNote(x))", "all x.((Car(x) & -Stop(x)) -> -CanGetOutAndLeaveNote(x))", "all s.((StopCar(s) & DoesNoStop(x)) -> Can'tGetOutAndLayNote(s))", "all x.((Car(x) & -Stops(x)) -> (-LeaveNote(x) & GetOut(x)))", "all x.((Car(x) & -Stops(x)) -> -(GetOut(x,y) & LeaveNote(y)))"]}
{"id": "enwn_validation_816", "nl": "Biff hit someone's car but didn't leave a note.", "fol": "", "prediction": ["(HitCar(Biff,someone's) & -LeaveNote(Biff,Chess))", "(incidental(Biff) & HitsCar(Biff,Adult) & -LaysNote(Biff))", "(HuntsCar(Biff) & -LaysNote(Biff))", "all x y.((Biff(x) & Person(y)) -> (HitCar(x,y) & -LayNote(x,y)))", "all x y.((Biff(x) & Person(y)) -> (Hit(x,y) & LeavesNote(x)))", "all x.(Biff(x) -> (Hitcar(x) & -EmailNote(x)))", "all x y.((Biff(x) & Car(y)) -> (Has(x,y) & -LaysNote(x)))", "all x.(Biff(x) -> (HitCar(x) & -LayNote(x)))", "(HitCar(Biff) & -LeavesNote(Biff))", "all x.(Biff(x) -> (HasCar(x,y) & NoNote(x)))", "all x y z.((Biff(x) & Car(y) & Note(z)) -> (Hit(x,y) & -LoseNote(x,z)))", "all x y.((Biff(x) & Car(y)) -> (Hit(x,y) & LeaveNote(x)))", "all x y.((Biff(x) & Person(y)) -> (HasCar(x,y) & -LeavesNote(x,y)))", "all x y.((Biff(x) & Car(y)) -> (Hart(x,y) & -LaysNote(x)))", "all x y.((Biff(x) & Driver(y)) -> (StruckCar(x,y) & -LeaveNote(x,y)))", "all x.(Biff(x) -> (HitCar(x) & -LeaveNote(x)))"]}
{"id": "enwn_validation_817", "nl": "Biff should have left a note.", "fol": "", "prediction": ["(LoadANote(Biff) | -BiffLoadBiffNote(Biff)))", "all x.(Biff(x) -> ShouldLeaveNote(x))", "all x.(Biff(x) -> ShouldLoadNote(x))", "all x.(Biff(x) -> ShouldLeaveNote(x))", "all x.(Biff(x) -> ShouldLeaveNote(x))", "all x.((Biff(x) & Note(y)) -> Left(x,y))", "all x.(Biff(x) -> LeftNote(x))", "Biff should have left a note.", "all x.(Biff(x) -> ShouldLeaveNote(x))", "All x.(Biff(x) -> LeftNote(x))", "Biff shoulda left note", "all x y.((Biff(x) & Note(y)) -> ShouldLeave(x,y))", "all x.(Biff(x) -> ShouldHaveLeadNote(x))", "(LeavedNote(biff,x))", "all x.(Biff(x) -> ShouldBeLeapedNote(x))", "Biff should have left Note."]}
{"id": "enwn_validation_818", "nl": "You should pay attention to people when they're talking to you.", "fol": "", "prediction": ["all x y z.((Teen(x) & Person(y) & Interaction(z)) -> PaysAttentionTo(x,y,z))", "all x.((Person(x) & ChatsTo(x)) -> PaysAttentionTo(x,Y))", "all x y.((Person(x) & TalkingTo(x,y)) -> PayAttentionTo(x,y))", "all x.((Person(x) & TalkingTo(x)) -> PaysAttention(x,y))", "all x.(AttentionToPerson(x) -> SpeakingTo(x))", "all x y.((Person(x) & TalkingToYou(x,y)) -> PaysAttentionTo(x,y))", "all x y.((Person(x) & TalkingTo(x,y)) -> PaysAttentionTo(x,y))", "all x y.((Person(x) & TalkingTo(y)) -> PaysAttentionTo(x,y))", "all x.((Talking(x) & Talking(x)) -> PaysAttentionTo(x,y))", "all x.((Person(x) & TalkingTo(x)) -> PaysAttentionTo(x,Person(x))", "all x y.((Talking(x,y) & Person(y)) -> PayAttentionTo(x,y))", "all x y.((Person(x) & TalkingTo(y)) -> YouPayAttentionTo(x,y))", "all x y.((Person(x) & PersonTalkingTo(x,y)) -> PaysAttention(x,y))", "all x y.((People(x) & TalkingTo(x,y)) -> PaysAttentionTo(x,y))", "all x y.((Person(x) & TalkingTo(y)) -> PaysAttentionTo(x,y))", "all x y.((Person(x) & TalkingTo(x,y)) -> PaysAttentionTo(x,y))"]}
{"id": "enwn_validation_819", "nl": "If you're ignoring someone, you aren't paying attention to them.", "fol": "", "prediction": ["all x.(Ignoring(x) -> -PayingAttentionTo(x))", "all x.(Ignoring(x) -> -PayingAttention(x))", "all x.((Ignoring(x) & DoingThis(x)) -> -PayingAttention(x))", "all x y.((Opportunity(x) & -PayingAttention(y,x)) -> Ignores(x,y))", "all x.((You'reIgnoring(x) & Person(x)) -> -PayingAttentionTo(x,Current(x))", "(all x.((Ignoring(x) & -PayingAttentionTo(x)) -> NotPayingAttention(x)))", "all x y.((Ignoring(x,y) & Person(z)) -> -PayingAttentionTo(x,z))", "all x y.((Ignores(x,y) & Person(y)) -> -PayingAttentionTo(x,y))", "all x.(Ignoring(x) -> -PayingAttention(x))", "all x y.((Alert(x) & Ignoring(x,y)) -> -PayingAttendanceTo(x,y))", "all x.(Maintaining(x,y) -> -PayingAttentionTo(x,y))", "all x.((Ignoring(x) -> -PayingAttention(x))", "all x.((Ignoring(x) -> -PayingAttentionTo(x)))", "all x.((Ignores(x,SomeOne) & -PaysAttentionTo(x,Many)) -> Inspects(x,Many))", "all x.((Ignoring(x) -> -PayingAttendance(x))", "all x y.((Negligent(x) & Person(y)) -> -PayingAttentionTo(x,y))"]}
{"id": "enwn_validation_820", "nl": "Terry pretended to not be able to hear Michelle because she wouldn't agree with his dinner plan.", "fol": "", "prediction": ["all x y.((Trendy(x) & Michelle(y)) -> PretendedToBeNotableToHear(x,y))", "the two of them, I really don't know how anyone else uses this service (but Terry & Michelle O'Day, \"IndependenceWarrior(t) & DinnerPlan(t)))", "all x y.((Try(x) & Michelle(y)) -> (PretendedToNotBeAffordableToHear(x,y) & -AgreeUnder(x,y)))", "all x y.((Terry(x) & Michelle(y) & -AcquiredDinnerPlan(y,x)) -> PretendedToBeUnableToHear(x,y))", "all x y.((Terry(x) & Michelle(y)) -> PretendedToNotBeAffordableToHear(x,y))", "all x y.((Treeth(x) & Michelle(y)) -> (AgreeWithDinnerPlan(x,y) | PretendedToBeNotAcquainted(x,y)))", "(Attack(Melissa) & -AccommodatesPlan(Melissa))", "all x y z.((Terry(x) & Michelle(y) & DinnerPlan(z)) -> (Plied(x,y) & -AgreeWith(y,z)))", "all x y.((Turner(x) & Michelle(y)) -> -AtEndAsia(x,y))", "all x.((Treeves(x) & -CanHearMichelle(x)) -> -AgreesWithDinnerPlan(x,y))", "(UnableToHear(Terry,Melissa) & NotAfcomeWithDinnerPlan(Emmel,Michele))", "desperatingly, Terry pretended to not be ableToHearMichelle because she wouldn't agree with his dinner plan.", "all x y.((Terry(x) & Michelle(y) & -AgreeWithDinnerPlan(y,x)) -> PretendedToBeUnableToHear(x,y))", "all x.((Terry(x) & Mangy(x)) -> (RetachedToNeverHearMichelle(x) & -CoveredDessertPlan(x)))", "all x y.((Treeth(x) & Michelle(y)) -> (PretendedToNotBeAbleToHire(x,y) & ToldHerLike(x,y)))", "all x y z.((Terrell(x) & Michelle(y) & DinnerPlan(z)) -> (PretendedToAffordToHear(x,y) & -Agreed(y,z)))"]}
{"id": "enwn_validation_821", "nl": "If you're pretending not to hear someone, you're ignoring them.", "fol": "", "prediction": ["all x y.((PretendsNotToHear(x) & -Hear(x)) -> Ignorant(y))", "all x.((PretendsNotToHear(x) & Ignores(x)) -> Ignores(x))", "all x.((PretendingTrust(x) & -HearPersonnel(x)) -> Ignores(x))", "all x.((PretendsNotToHear(x) & NotHearing(x)) -> Ignoring(x))", "all x.((PretendingNoHear(x) -> Ignoring(x))", "all x.((PretentsToNotHear(x) & Ignores(x)) -> Discrimination(x))", "all x.((PretendingNoHear(x) & HasAudience(x)) -> Ignoring(x))", "all x.((PretendingNotToHear(x) & Ignoring(x)) -> NoOneHears(x))", "all x.([DesperateMeNotToHear(x)) -> Ignoring(x))", "all x.((PretendingNullHearing(x) & Ignoring(x)) -> NotHiring(x))", "all x.((PretendingToBetween(x) & -HearSomeone(x)) -> Ignores(x))", "all x.(Eats(x) -> Dismisses(x))", "all x.((PretendsNotToHear(x) -> Ignores(x,unknown,Unknown))", "all x.((PretendsNotToHear(x) & Overhears(x)) -> Ignoring(x))", "all x.(Pretending(x) -> Ignoring(x))", "all x.( (PretendingNotToHearAnother(x) -> IgnoringAllAnother(x)))"]}
{"id": "enwn_validation_822", "nl": "You shouldn't ignore people.", "fol": "", "prediction": ["all x.(IgnoresPeople(x) -> -IssuesInformation(x))", "all x.(IgnorePersonnel(x) -> -IgnorePersons(x))", "all x.(IgnorePeople(x) -> Don'tIgnorePeople(x))", "all x.(NoMoon(x) -> PeopleIgnore(x))", "all x.((People(x) & -Ignore(x)) -> -Ignore(x))", "all x.(IgnorePeople(x) -> -Ignore(x))", "all x.(InsistsPeople(x) -> -Ignores(x))", "all x.((People(x) & -Ignore(x)) -> -Ignore(x,y))", "all x.((IgnorePeople(x)) -> -IgnorePeople(x))", "all x.((People(x) & -Ignore(x)) -> -Ignore(x))", "all x.(IgnorePeople(x) -> -IgnoresPeople(x))", "all x.(IgnorePeople(x) -> -IgnorePeople(x))", "all x.(IgnoringPerson(x) -> -Ignore(x))", "all x.(IgnorePeople(x) -> -Father(x))", "all x.(IgnorePeople(x) -> -IgnorePeople(x))", "all x.((People(x) & -Ignore(x)) -> Weak(x))"]}
{"id": "enwn_validation_823", "nl": "Terry ignored Michelle.", "fol": "", "prediction": ["Terry ignoredMimie(Terry)", "-(ExcusedMelissa(Teter) | Persuaded(Terry,Michelle))", "all x.(Trey(x) -> Ignored(x,myme))", "only ignored(Terry,Michelle)", "-Ignored(Terry,Michelle)", "all x y.((Terry(x) & Michelle(y)) -> Ignored(x,y))", "Terry ignoredMelissa.", "all x.(TookInsight(x,Melain) -> TerryIgnored(x,Melain))", "(IgnoredInMemoir(Terry,Memoir) -> IgnoredInSemoir(Terry,Memoir))", "all x.((Teery(x) & Michelle(x)) -> Ignored(x,y))", "Terry ignoredMelissa.", "all x.((Terry(x) & Michelle(y)) -> ignored(x,y))", "(Ignores(Tennessee) & ignored(Trendy))", "all x.(Temperary(x) -> IgnoredMichelle(x))", "(Individual(Terry) & -Melena(Terry))", "(IgnoredBy(Treya) & -Melissa))"]}
{"id": "enwn_validation_824", "nl": "Terry shouldn't have ignored Michelle.", "fol": "", "prediction": ["-Ignored(Tractor,Michelle)", "all x.((Trey(x) & Michelle(y)) -> -Ignored(x,y))", "(-IgnoredMelain(Treynor))", "(-Ignored(Terry,Michelle) at school(Terry))", "all x.((Terry(x) & Michelle(y)) -> -Ignored(x,y))", "all x.((Trevor(x) & Michelle(y)) -> ShouldNotHungry(x,y))", "(unclearly (with Michelle) & no-one(terry)!", "-(HasTookOutMike( Terry)?", "all x.((Treeth(x) & -IgnoredMelissa(x)) -> -Insomniac(x))", "(-all x,y.((Trevor(x) & Michelle(y)) -> ShouldNotIgnored(x,y)))", "all x.((T Terry(x) & Michelle(x)) -> -Ignored(x,y))", "all x.((Trey(x) & Michelle(y)) -> -Ignored(x,y))", "all x.((Terry(x) & Michelle(y)) -> -Ignored(x,y))", "(-Ignored(Terry) -Leeps(Terry))", "(Noma(Terry,Michelle) & -Ignored(Terry,Michelle))", "all x.((Terry(x) & Michelle(y)) -> Shouldn'tHave(x,y))"]}
