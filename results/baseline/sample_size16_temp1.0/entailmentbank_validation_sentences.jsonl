{"id": "entailmentbank_validation_0", "nl": "the sun rising / setting occurs once per day.", "fol": "", "prediction": ["all x.(SunRising(x) -> Setting(x))", "all x.((Sun(x) & SunRising(x)) -> Set(x))", "all x.((Sun(x) | Sets(x,x)) -> OccursOfDay(x))", "all x.(SunRising(x) & SunSetting(x))", "all x y.((Sun(x) & Day(y)) -> Rising(x,y))", "all x y.((Sun(x) & Day(y)) -> HappensLast(x,y))", "all x.(Sun(x) -> (Rising(x) | Setting(x)))", "all x.(SunRising(x) -> SettingOccurs(x))", "all x y.((Sun(x) & Day(y)) -> (Rising(x,y) | Setting(x,y)))", "all x.(SunRising(x) -> Setting(x))", "all x.(Sun(x) -> Yes(Rising(x) & Setting(x))", "exists x.(SunRising(x) & SunSetting(x) & Occurs(x) & OncePerDay(x))", "all x.(SunRising(x) | Setting(x))", "ALL x y z.((Sun(x) & Day(y) & Day(z)) -> OccursOncePerDay(x,y,z))", "all x.(SunRising(x) -> SettingOccurs(x))", "exists x.(SunRising(x) & SunSetting(x) & Once(x))"]}
{"id": "entailmentbank_validation_1", "nl": "the sun rising is a kind of event.", "fol": "", "prediction": ["all x.((SunRising(x) & Event(x)) -> Event(x))", "all x.(SunRising(x) -> Event(x))", "all x.(Rising(x) -> ArtOfEvent(x))", "all x.(SunRereaching(x) -> Event(x))", "all x.(SunRooming(x) -> Event(x))", "(SunRising(x) -> Event(x))", "all x.((SunRising(x) & Event(x)) -> Events(x))", "all x.(RisingSun(x) -> Event(x))", "all x.((SunRising(x) & Event(x)) -> Upcoming(x))", "all x.(Recognition(x) -> IsSun(x))", "all x.(SunRising(x) -> Event(x))", "all x.(SunRising(x) -> Event(x))", "all x.(SunRising(x) -> Event(x))", "all x.(RecognitionOfSun(x) -> Event(x))", "all x.(SunRising(x) -> Event(x))", "all x.(SunRising(x) -> Event(x))"]}
{"id": "entailmentbank_validation_2", "nl": "the sun setting is a kind of event.", "fol": "", "prediction": ["all x.(SunSetting(x) -> Event(x))", "all x.(SunSetting(x) -> Event(x))", "all x.(SunSetting(x) -> Event(x))", "all x.(SunSetting(x) -> Event(x))", "all x.(SunSigning(x) -> Event(x))", "all x y.((SunSetting(x) & Event(y)) -> Setup(x,y))", "all x.(SunSetting(x) -> Event(x))", "all x.(SunSetting(x) -> Event(x))", "all x.((SunSetting(x) & Event(x)) -> Event(x))", "all x.(SunSetting(x) -> Event(x))", "all x.((SunSetting(x) & Event(x)) -> Event(x))", "all x.(SunSetting(x) -> Event(x))", "all x.(SunSetting(x) -> Event(x))", "all x.((SunSetting(x) & Event(x)) -> Event(x))", "all x.(SunSetting(x) -> Event(x))", "is a typeOfEvent(SunSetting)"]}
{"id": "entailmentbank_validation_3", "nl": "the sun rising and setting is the event that occurs once per day.", "fol": "", "prediction": ["all x.(RisingAndSetting(x) -> OccursOnce(x,Day))", "all x.(SunRising(x) & SunSetting(x)) -> OccursOnePerDay(x))", "all x.((Sunrises(x) & Sets(x)) -> OccursOncePerDay(x))", "all x.(SunRisingAndSetting(x) -> OccursOnceAperDay(x))", "all x.((SunRising(x) & Setting(x)) -> OccursOncePerDay(x))", "all x.((SunRising(x) & SunSetting(x)) -> OccursEachDay(x\")", "all x y.((SunRising(x) & SunSetting(y)) -> EventOccursOncePerDay(x,y))", "all x.((SunRising(x) & SunSetting(x)) -> OccursOneDay(x))", "all x.((SunRising(x) & Setting(x)) -> OccursOncePerDay(x))", "all x.(SunRisingAndSetting(x) -> OccursOncePerDay(x))", "all x.((Sun(x) & RisesAndSets(x)) -> OccursOncePerDay(x))", "all x.(SunRising(x) & Splating(x)) -> EventOfDays(x))", "all x y z.((Sun(x) & Rising(x) & Setting(y) & Day(z)) -> OccursOf(x,z))", "all x.(SunRisingAndSetting(x) -> OccursOncePerDay(x))", "all x.((SunRising(x) & SunSetting(x)) -> OccursOncePerDay(x))", "all x.((SunRising(x) & Seton(x)) -> OccursOncePerDay(x))"]}
{"id": "entailmentbank_validation_4", "nl": "a star produces light and heat.", "fol": "", "prediction": ["all x y.((Star(x) & Light(y) & Heat(z)) -> Produces(x,y,z))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x.(Star(x) -> (Produces(x,Light) & Produces(x,Heat)))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))"]}
{"id": "entailmentbank_validation_5", "nl": "a source of something emits / produces / generates / provides that something.", "fol": "", "prediction": ["all x y z.((SourceOf(x,y) & Something(z) & EmitsProducesGasesPurposes(x,z)) -> SourceOf(x,y))", "all x.((Source(x) & Something(x)) -> (EmitsPublicProductionsPublicGeneratesPublicProvides(x)))", "all x y.((Source(x) & Something(y)) -> (EmitsProducesGeneratesProvides(x,y)))", "all x y.((Source(x) & Something(y)) -> (EmitsProducesGenerates(x,y) | Provides(x,y)))", "all x.(SourceOf(x) -> (EmitsProducesGeneratesProvides(x) & Something(x)))", "all x.((SourceOfIssue(x) & EmitsProducesGeneratesProvides(x)) -> SourceOfIssue(x))", "all x.(SourceOfQuest(x) -> (Emits(x) & Produces(x) & Generates(x)))", "all x.(SourceOfAnthony(x) -> (EmitsProducesGeneratesProvidesAndProvides(x,anthony)))", "all x y z.((Source(x) & Something(y) & EmitsProducesGeneratesProvides(x,y)) -> SourceOf(x,z))", "all x y z.((Source(x) & Something(y) & Person(z) & EmitsProducesOfGeneratesOfProvides(x,y,z)) -> SourceOf(x,y))", "all x y.((Source(x) & Something(y) & EmitsProducesGeneratesOrProvides(x,y)) -> SourceOfThan(x,y))", "all x.(SourceOf(x,y) -> (EmitsProducesGeneratesProvides(x,y)))", "all x.(SourceOf(x,y) -> (EmitsProducesGeneratesProvides(x,y)))", "all x y z.((SourceOf(x,y) & Something(z)) -> EmitsProducesGenerates/Provides(x,z))", "all x y.((Source(x) & Something(y)) -> (EmitsProducesGeneratesProvides(x,y)))", "exists x.(SourceOf(x,y) & EmitsProducesGeneratesProvides(x,y))"]}
{"id": "entailmentbank_validation_6", "nl": "a star is a source of light.", "fol": "", "prediction": ["all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> QuelleOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> LightSource(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))"]}
{"id": "entailmentbank_validation_7", "nl": "as the source of light becomes closer, that source of light will appear brighter.", "fol": "", "prediction": ["all x.((SourceOfLight(x) & Closer(x)) -> Brighter(x))", "all x.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x))", "all x.((SourceOfLight(x) & CloserToSourceOfLight(x)) -> AppearsBrighter(x))", "all x.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x))", "all x.((SourceOfLight(x) & Closer(x)) -> IsBrighter(x))", "all x.(LightSource(x) -> (BecomesCloser(x) & AppearsBrighter(x)))", "all x y.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(y))", "all x y.((SourceOfLight(x) & Closer(x)) -> AppearBrighter(x,y))", "all x.((SourceOfLight(x) & Closer(x)) -> Brighter(x))", "all x.((SourceOfLight(x) & Closer(x)) -> AppearBrighter(x))", "all x.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x))", "all x.((SourceOfLight(x) & Closer(x)) -> (AppearsBrighter(x)))", "all x.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x))", "all x.((SourceOfLight(x) & Closer(x)) -> AppearBrighter(x))", "all x.((SourceOfLight(x) & Nearer(x)) -> AppearsBrighter(x))", "all x.((SourceOfLight(x) & Closer(x)) -> AppearBrighter(x))"]}
{"id": "entailmentbank_validation_8", "nl": "distance is a property of space and includes ordered values of close / far.", "fol": "", "prediction": ["all x y.((Distance(x) & Space(y)) -> (PropertyOfSpace(x,y) & IncorporatesOrderedValues(x,close,far)))", "all x.(Discrete(x) -> (PropertyOfSpace(x) & IncludesOrdonnancedValuesOfClose/Far(x)))", "all x y.((Distance(x) & Space(y) & OrderedValue(x,y)) -> (PropertyOf(x,y) & Includes(x,y)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValuesOfCloseFar(x)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValues(x,close) & IncludesOrderedValues(x,far)))", "all x y.((Distance(x) & Space(y)) -> (IsPropertyOf(x,y) & IncludesOrderedValues(x,Close,Far)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludedInOrderdedValuesOfCloseFar(x)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & OrdnancedValuesOfClose(x) & OrdnancedValuesOfFar(x)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValuesOfCloseToFar(x)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderingValuesOfClose(x) & IncludesOrderedValuesOfFar(x)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValues(x,simple,far)))", "all x.((Distance(x) & Space(x)) -> (OrderedValues(x,Close) & OrderedValues(x,Far)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderingValues(x,Close,Far)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValuesOfCloseOrFarge(x)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValues(x,close) & IncludesOrderedValues(x,far)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludedVariables(x,Such,Far)))"]}
{"id": "entailmentbank_validation_9", "nl": "as the distance of the star to earth decreases, the star will appear brighter.", "fol": "", "prediction": ["all x y.((Star(x) & Earth(y) & DecreasedDistance(x,y)) -> AppearsBrighter(x))", "all x y z.((Star(x) & Distance(y) & Earth(z)) -> DefeatsDecrease(x,y,z))", "all x y.((Star(x) & Distance(y) & Decreases(x,y)) -> AppearsBrighter(x))", "all x y.((Star(x) & Earth(y) & DistanceDecreases(x,y)) -> AgpearsBrighter(x,y))", "all x y.((Star(x) & DistanceToEarth(y)) -> AppearsBrighter(x))", "all x.((Star(x) & DistanceDecreases(x)) -> AppearsBrighter(x))", "all x y.((Star(x) & DistanceDecrease(x)) -> AppearsBrighter(x))", "all x.((Star(x) & DistanceDecrease(x)) -> StarAppearsBrighter(x))", "(DecreasedDistance(stere) -> AppearsBrighter(star))", "all x.((Star(x) & DistanceDecreased(x)) -> AppearsBrighter(x))", "all x.((Star(x) & DistanceDecrease(x)) -> ArrivesBrighter(x))", "all x y.((Star(x) & Distance(y,z) & Earth(z)) -> AppearsBrighter(x))", "all x.((Star(x) & DecreasedDistance(x)) -> AppearsBrighter(x))", "all x y.((Star(x) & Earth(y) & DecreasesDistance(x,y)) -> AppearsBrighter(x))", "all x y.((Star(x) & DistanceDecrease(x,y)) -> AppearBrighter(y))", "all x.(DecreasedDistance(x) -> StarAppearsBrighter(x))"]}
{"id": "entailmentbank_validation_10", "nl": "a star is a kind of celestial object / celestial body.", "fol": "", "prediction": ["all x.(Star(x) -> (CelestialObject(x) | CelestialBody(x)))", "all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Star(x) -> CelestialObject(x))", "all x.(Star(x) -> (CelestialObject(x) | CelestialBody(x)))", "all x.(Star(x) -> CelestialObject(x))", "all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Star(x) -> CelestialObject(x))", "all x.(Star(x) -> Object(x) -> CelestialBody(x))", "all x y.((Star(x) & CelestialObject(y) & CelestialBody(x)) -> Celestial(x))", "all x.(Star(x) -> (ArtOfCelestialObject(x) & CelestialBody(x)))", "all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))"]}
{"id": "entailmentbank_validation_11", "nl": "apparent magnitude is a measure of the brightness of a celestial object / celestial body as observed on earth.", "fol": "", "prediction": ["all x.(ApparentMagnitude(x) -> [MeasuresBrightness(x) & CelestialObject(x) & CelestialBody(x) & ObservedOnEarth(x)))", "all x y.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(y)) -> (MeasuresBrightness(x,y) & AnObservedOnEarth(x,y)))", "all x y.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(z)) -> MeasuresBrightness(x,y))", "all x y.((CelestialObject(x) & CelestialBody(y)) -> AffiantMagnitude(x))", "all x.(AppearingMagnitude(x) -> (MeasuresBrightnessOfCelestialObject(x) | MeasuresBrightnessOfCelestialBody(x)))", "all x.(ApparentMagnitude(x) : (MeasuresBrightness(x) & ObservedOnEarth(x)))", "all x.(ApparentMenge(x) -> (MeasuresBrightness(x) & ObservedOnEarth(x)))", "all x y z.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(z)) -> MeasuresBrightness(x,y,z))", "all x y.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(y)) -> ObservedOnEarth(x,y))", "all x.(AppealingMagnitude(x) -> (MeasureBrightness(x) & CelestialObject(x) & CelestialBody(x) & ObservedOnEarth(x)))", "all x y z.((AppearanceMagnitude(x) & CelestialObject(y) & CelestialBody(z) & ObservedOnEarth(x,y)) -> MeasuresBrightness(x,y))", "all x y z.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(z) & ObservedOnEarth(x)) -> MeasuresBrightnessAsObservedOnEarth(x,y,z))", "all x.(AccurateMagnitude(x) -> MeasuresBrightness(x))", "all x y.((ArrangeMagnitude(x) & CelestialObject(y) & CelestialBody(y)) -> MeasuresBrightness(x,y))", "all x.(AppealingMagnitude(x) -> (CelestialObject(x) -> CelestialBody(x)))", "all x y.((AppearingMagnitude(x) & CelestialObject(y)) -> MeasuresBrightnessAsObservedOnEarth(x,y))"]}
{"id": "entailmentbank_validation_12", "nl": "apparent magnitude is a measure of the brightness of a star as observed on earth.", "fol": "", "prediction": ["all x y.((ApparentMajority(x) & Star(y) & MeasuredOnEarth(x,y)) -> Brightness(x,y))", "all x.((Star(x) & ApparentMagnitude(x)) -> MeasuresBrightness(x,brightness,observedOnEarth(x))", "all x y z.((ArrangeMagnitude(x) & Star(y) & Earth(z)) -> measuresBrightness(x,y,z))", "all x.((AppearanceMagnitude(x) & Star(x) & ObservedOnEarth(x)) -> MeasuresBrightness(x,merced,blue))", "all x y.((AppearingMajority(x) & Star(y)) -> MeasuresBrightness(x,y))", "all x y.((ApparentMagnitude(x) & Star(y) & ObservedOnEarth(x,y)) -> MeasuresBrightness(x,y))", "all x.(ApparentMagnitude(x) -> (MeasuresBrightness(x,y) & Star(y) & ObservedOnEarth(x)))", "all x y z.((AppearingMagnitude(x) & Star(y) & Earth(z)) -> MeasuresBrightness(x,y,z))", "all x.(AppearingMagnitude(x) -> (MeasuresBrightnessOfStar(x) & ObservedOnEarth(x)))", "all x.(AppearingMagnitude(x) -> (MeasuresBrightness(x) & ObservedOnEarth(x)))", "all x.(ApparentMagnitude(x) -> MeasuresBrightnessOfStar(x))", "all x.(ApparentMagnitude(x) -> MeasureageOfBrightnessOfStarBetweenEarth(x,y))", "all x.(ApparentMagnitude(x) -> MeasuresBrightnessOfStarAsObservedOnEarth(x))", "all x y.((Star(x) & Earth(y)) -> AppearingMagnitude(x,y))", "all x.(SolidMagnitude(x) -> MeasuresBrightness(x))", "all x y.((Stern(x,y) & Earth(y)) -> MeasuresBrightness(x,y))"]}
{"id": "entailmentbank_validation_13", "nl": "united states is located in the northern hemisphere.", "fol": "", "prediction": ["all x y z.((UnitedState(x) & NorthernHemisphere(y) & LocatedIn(x,y)) -> LocatedIn(x,z))", "all x y.((UnitedStates(x) & NorthernHemispheric(y)) -> LocatedIn(x,y))", "all x.(UnitedStates(x) -> Location(x,NorthernHemisphere))", "all x.(UnitedStates(x) -> LocatedInNorthernHemisphere(x))", "all x.(UnitedStates(x) -> LocatedInNorthernHemisphere(x))", "all x y.((UnitedStates(x) & NorthernHemispheric(y)) -> LocalizedIn(x,y))", "all x.(UnitedStates(x) -> (NorthernHemisphere(y) | NorthernHemisphere(z)))", "all x y.((UnitedState(x) & NorthernHemisphere(y)) -> LocatedIn(x,y))", "all x.(UnitedStates(x) -> Location(x,NorthernHemisphere))", "all x.(UnitedStates(x) -> LocatedInNorthernHemisphere(x))", "all x.(UnitedStates(x) -> LocationInNorthernHemisphere(x))", "all x.(UnitedStates(x) -> LocatedInNorthernHemisphere(x))", "all x.(UnitedStates(x) -> LocatedInNorthernHemispheric(x))", "all x y.((UnitedStates(x) & NorthernHemisphere(y)) -> LocatedIn(x,y))", "all x.(UnitedStates(x) -> LocatedInNorthernHemisphere(x))", "all x.(U.S.(x) -> NorthernHemisphere(x))"]}
{"id": "entailmentbank_validation_14", "nl": "new york / new york state is a state located in the united states of america.", "fol": "", "prediction": ["all x.((State(x) & NewYork(x)) -> StateInUnitedStatesOfAmerica(x))", "all x.(NewYoung(x) -> USA(x))", "all x y z.((NewYork(x) & NewYork(y) & UnitedState(z)) -> StateLikedIn(x,y,z))", "all x.((State(x) & NewYork(x)) -> LocatedInUnitedStatesOfAmerica(x))", "all x.(NewYork(x) / NewYorkState(x)) -> FoundInUnitedStates(x))", "all x y.((State(x) & State(y)) -> (State(x,y) & UnitedStatesOfAmerica(y)))", "all x y.(((NewYork(x) & State(y)) -> RegionInUnitedStatesOfAmerica(x))", "all x.(NewYorkState(x) -> InUnitedStatesOfAmerica(x))", "all x.(NewYork(x) -> (State(x) & LocatedInUnitedStatesOfAmerica(x)))", "all x.((State(x) & NewYork(x)) -> (LocatedInUnitedStates(x) & USA(x)))", "all x.((State(x) & NewYork(x)) -> LocatedInUSOfAmerica(x))", "((State(newYork) & StateUnitedStates(NewYork)) -> LocatedIn(y,x))", "all x y.((State(x) & State(y)) -> (Northern(x,y) & State(x,y)))", "all x.((State(x) & NewYork(x)) -> LocatedInUnitedStatesOfAmerica(x))", "all x.(NewYork(x) -> (WesternState(x) & UnitedStatesOfAmerican(x)))", "all x y.((NewYork(x) & NewYorkState(y)) -> LocatedInUnitedStatesOfAmerica(x,y))"]}
{"id": "entailmentbank_validation_15", "nl": "new york state is located in the northern hemisphere.", "fol": "", "prediction": ["all x.(NewYorkState(x) -> LocatedInNorthernHemisphere(x))", "all x.(NewYorkState(x) -> LocatedInNorthernHemisphere(x))", "all x.((NewYorkState(x) & NorthernHemisphere(x)) -> SituatedIn(x,y))", "all x.(NewYorkState(x) -> NorthWesternHemisphere(x))", "all x.((NewYork(x) & NorthHemisphere(y)) -> SitedIn(x,y))", "all x.(NewYorkState(x) -> LocalledInNorthernHemisphere(x))", "all x y.((NewYorkState(x) & Northern(y)) -> LocatedIn(x,y))", "all x.((NewYorkState(x) & NorthernHemisphere(y)) -> LocatedIn(x,y))", "all x.(NewYorkState(x) -> LocatedInNorthernHemisphere(x))", "all x.(NewYorkState(x) -> LocatedInNorthernHemisphere(x))", "all x.(NewYorkState(x) -> LocatedInNorthernHemisphere(x))", "all x.(NewYorkState(x) -> LocatedInNorthernHemisphere(x))", "all x.(NewYorkState(x) -> (LocatedInNorthernHemisphere(x) | LocalizedInNorthernHemisphere(x)))", "all x.(NewYorkState(x) -> (LocatedInNorthernHemisphere(x) & LocatedInNorthernHemisphere(x)))", "all x y.((NewYorkState(x) & NorthernHemisphere(y)) -> FoundIn(x,y))", "all x.(NewYorkState(x) -> LocatesInNorthernHemisphere(x))"]}
{"id": "entailmentbank_validation_16", "nl": "december is during the winter in the northern hemisphere.", "fol": "", "prediction": ["all x.(December(x) -> Winter(x,NorthernHemisphericAncient))", "(Winter(december) & NorthernHemisphere(december))", "all x.(December(x) -> WinterInNorthernHemisphere(x))", "(WarmWinter(december) & NorthernHemisphere(december))", "all x.(December(x) -> WinterInNorthernHemispheric(x))", "all x.(December(x) -> WinterHipisphere(x,NorthernHim).)", "all x.((December(x) & NorthernHemisphere(x)) -> Winter(x))", "the december-winter(now) & NorthernHemisphere(w))", "the wintertime for ectodie(e,(december) & NorthernHemisphere(e,e))", "all x.(December(x) -> WinterInNorthernHemisphere(x))", "all x.(December(x) -> WinterIsInNorthernHemisphere(x))", "(NorthernHemisphere(365) & Winter(365))", "all x y.((December(x) & NorthernHemisphere(y)) -> Winter(x,y))", "all x y.((December(x) & NorthernHemisphere(y)) -> Winter(x,y))", "all x y.((December(x) & NorthernHemisphere(y)) -> Winter(x,y))", "all x y.((December(x) & NorthernHemisphere(y)) -> Winter(x,y))"]}
{"id": "entailmentbank_validation_17", "nl": "december is during the winter for new york state.", "fol": "", "prediction": ["all x.((December(x) & WinterForNewYorkState(x)) -> WinterForNewYorkState(x,y))", "all x.(NewYorkState(x) -> Winter(x))", "all x y.((December(x) & NewYorkState(y)) -> Winter(y,x))", "all x y.((NewYorkState(x) & December(x)) -> ByWinter(y))", "all x y.((December(x) & NewYorkState(y)) -> DuringWinter(x,y))", "december is duringnegy(newYorkState)", "all x.((December(x) & Winter(x)) -> NewYorkState(y))", "all x y.((NewYorkState(x) & December(y)) -> Winter(y))", "all x.(December(x) -> Winter(x))", "all x.((December(x) & WinterForNewYorkState(x)) -> WinterForNYState(x))", "all x.(NewYorkState(x) -> Winter(x))", "all x.((December(x) & Winter(y) & NewYorkState(y)) -> Winter(x,y))", "all x.((December(x) & Winter(x,NewYork)) -> Winter(x,NewYork))", "all x.((DecemberForNewYorkState(x)) -> Winter(x))", "all x y.((December(x) & NewYorkState(y)) -> Winter(x,y))", "all x.((December(x) & Winter(x)) -> NewYorkState(x))"]}
{"id": "entailmentbank_validation_18", "nl": "winter has the least sunlight.", "fol": "", "prediction": ["all x.(Winter(x) -> LeastSunlight(x))", "all x.(Winter(x) -> (LeastSunlight(x)))", "all x.(Wine(x) -> WeakestSunlight(x))", "all x.(Winter(x) -> LessSunlight(x))", "all x.(Winter(x) -> HasLeastSunlight(x))", "all x.(Winter(x) -> -LeastSunlight(x))", "all x.(Winter(x) -> LessSunlight(x))", "all x.(Winter(x) -> LowSunlight(x))", "all x.(Winter(x) & LessSunlight(x))", "all x.(Winter(x) -> -LeastSunlight(x))", "all x.(Winter(x) -> -LastSunlight(x))", "all x.(Winter(x) -> LessSunlight(x))", "((Winter(w) & LowSunlight(w,x)))", "(LeastSunlight(winter)", "all x.(Winter(x) -> LessSunlight(x))", "all x.(Winter(x) -> LessSunlight(x))"]}
{"id": "entailmentbank_validation_19", "nl": "new york state has the least sunlight during december.", "fol": "", "prediction": ["all x y.((NewyorkState(x) & December(y)) -> LessSunlight(x,y))", "all x.((New York State(x) & -SunlightDuringDecember(x)) -> LeastSunlightDuringDecember(x))", "all x y.((NewYorkState(x) & December(y)) -> HasLeastSunlight(x,y))", "all x.(NewYorkState(x) -> (LeastSunlightDuringDecember(x) | LeeastSunlightDuringDecember(x)))", "all x.((NewYorkState(x) & DecemberSunlight(x)) -> -LittleSunlight(x))", "all x.(NewYork(x) -> LessSunlightDuringDecember(x))", "all x.((NewYorkState(x) & December(x)) -> DoesLeastSunlight(x))", "all x y.((NewYorkState(x) & Dec(y)) -> -HasLeastSunlight(x,y))", "all x.(NewYorkState(x) & LowSunlightDuringDecember(x))", "all x.(NewYorkState(x) -> TheLeastSunlightLastDecember(x))", "all x.(LeastSunlightDuringDecember(x) -> NewYork(x))", "all x.((NewYorkState(x) & LessSunlight(x,December)) -> -LeastSunlight(x,December))", "all x.(NewYorkState(x) -> HasLeastSunlightDuringDecember(x))", "all x.((NewYorkState(x) & Sunlight(x)) -> LessSunlight(x,december))", "all x.(NewYorkState(x) -> HasLeastSunlight(x))", "all x.((NewYorkState(x) & -Sunlight(x)) -> HasLeastSunlightDuringDecember(x))"]}
{"id": "entailmentbank_validation_20", "nl": "earth is a kind of planet.", "fol": "", "prediction": ["all x.(Earth(x) -> Planet(x))", "all x.((Earth(x) & Planet(y)) -> Requires(x,y))", "all x.(Earth(x) -> Planet(x))", "all x.(Earth(x) -> Planet(x))", "all x.(Earth(x) -> Planet(x))", "all x.(Earth(x) -> Planet(x))", "all x.(Earth(x) -> Planet(x))", "all x.(Earth(x) -> Planet(x))", "all x.(Earth(x) -> Planet(x))", "all x.(Earth(x) -> Planet(x))", "all x.(Earth(x) -> Planet(x))", "all x.(Earth(x) -> Planet(x))", "all x y.((Earth(x) & Planet(y)) -> TypeOf(x,y))", "all x.(Earth(x) -> Planet(x))", "all x.(Earth(x) -> Planet(x))", "all x.(Earth(x) -> Planet(x))"]}
{"id": "entailmentbank_validation_21", "nl": "the earth rotates on its tilted axis.", "fol": "", "prediction": ["all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "exists x.(Earth(x) & RotatesOnTiltedAxis(x))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "all x y z.((Earth(x) & ElasticAxis(y) & TiltedAxis(z)) -> RotatesOn(x,y,z,x))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "all x.(TiltedAxis(x) -> EarthRotates(x))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "(AxisMovement(Earth) & Tilted(Earth))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "all x.(TiltedAxis(x) -> EarthRotsOn(x,y))", "all x.(TiltedAxis(x) -> EarthRotates(x))", "all x y z.((Earth(x) & TiltedAxis(y) & Earth(z)) -> RotatesOn(x,y))", "all x y.((Earth(x) & TiltedAxis(y)) -> RotatesOn(x,y))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x))"]}
{"id": "entailmentbank_validation_22", "nl": "earth is a planet that rotates on its tilted axis.", "fol": "", "prediction": ["all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x.(Earth(x) -> (Planet(x) & rotatesOnTiltedAxis(x)))", "all x y.((Earth(x) & Planet(y)) -> RotatesOnTiltedAxis(x,y))", "all x.(Earth(x) -> (Planet(x) & TiltedAxis(x)))", "all x y.((Planet(x) & Earth(y)) -> RotatesOnTiltedAxis(x,y))", "all x y.((Planet(x) & TiltedAxis(y)) -> RotatesOn(x,y))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x y.((Planet(x) & Earth(y)) -> RotatesOnTiltedAxis(x,y))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x.(Earth(x) -> (PlanetTiltedAxis(x) & RotatesOn(x,y)))", "all x.((Planet(x) & TiltedAxis(x)) -> Rotates(x))"]}
{"id": "entailmentbank_validation_23", "nl": "rotation is the circular movement of an object around a center / axis.", "fol": "", "prediction": ["all x y z.((Rotation(x) & Object(y) & Center(z) & Axis(y)) -> CircularMovement(x,y,z))", "all x y z.((Rotation(x) & Object(y) & CenterAxis(z)) -> CircularMovementAround(x,y,z))", "all x.(Rotation(x) -> (ReciprocalMovement(x) & ObjectAroundCenterAxis(x)))", "all x y z.((Rotation(x) & Object(y) & CenterPointAxis(z)) -> CircularMovement(x,y,z))", "all x.(Rotation(x) -> (CircularMovement(x) & Object(x) & Center(x) & Axis(x)))", "all x y.((Rotation(x) & Object(y) & Center(y) & Axis(y)) -> CircularMovementAround(x,y))", "all x.(Rotation(x) -> (CircularMovement(x) & ObjectAroundCenterInAxis(x)))", "all x.(Rotation(x) -> (CircularMovement(x) & ObjectAroundCenterAxis(x)))", "all x y.((Object(x) & Center(y)) -> Rotation(x))", "all x y.((Rotation(x) & Object(y) & HasCenterAxis(x,y)) -> CircularMovement(x,y))", "all x y z.((Rotation(x) & Object(y) & CenterAxis(z)) -> CircularMovementAround(x,y,z))", "all x y.((Rotation(x) & Object(y)) -> MovementAroundCenter(x,y))", "all x.(Rotation(x) -> CircularMovementOfObject(x))", "all x.(Rotation(x) -> (CircularMovement(x) & ObjectAroundCenterAndAxis(x)))", "all x y z.((Rotation(x) & Object(y) & CenterAxis(z)) -> CircularMovement(x,y,z))", "all x.(Rotation(x) -> (CircularMovement(x) & ObjectAroundCenterAxis(x)))"]}
{"id": "entailmentbank_validation_24", "nl": "a planet rotating causes cycles of day and night on that planet.", "fol": "", "prediction": ["all x.((Planet(x) & Rotating(x)) -> CausesCycle(x,Day,Night))", "all x.(Planet(x) -> CausesCyclesDayAndNight(x))", "all x y.((Planet(x) & Rotating(x)) -> (CausesDayAndNightCycles(x,y) & OnPlanet(y,x)))", "all x.((Planet(x) & Rotating(x)) -> CausesCyclesOfDayAndNight(x))", "all x y.((Planet(x) & Rotating(x)) -> CausesCyclesOfDayAndNight(x,y))", "all x y z.((Planet(x) & Rotating(x) & CausesCycle(y) & Temperature(z)) -> Causes(x,y,z))", "all x.(RotatingPlanet(x) -> CausesCyclesOfDayAndNight(x))", "all x y.((Planet(x) & Rotating(x)) -> (CausesDayAndNightCycles(x,y)))", "all x y z.(Cycles(x,y,z) & Planet(z) & Rotating(x,y,z)) -> CausesDateAndNight(x,y,z))", "all x.(Planet(x) -> (CausesDayAndNightCycles(x) & RotatingPlanet(x)))", "all x.(ReleasingPlanet(x) -> CausesCyclesOfDayAndNightOn(x,y))", "all x.((Planet(x) & Planet(x) & RotatingVoice(x)) -> CausesCyclesOfDayAndNight(x))", "all x y.((Planet(x) & Rotating(x) & Planet(y) & CausesCycle(x,y)) -> CausesCycle(x,y))", "all x.((Planet(x) & Rotating(x)) -> (CausesDayDamNightCycles(x) & CausesNightCycles(x)))", "all x.(Planet(x) -> (Rotating(x) & CausesDayAndNightCycles(x)))", "all x y.((Planet(x) & Rotating(x,y)) -> CausesCyclesOfDayAndNightOn(x,y))"]}
{"id": "entailmentbank_validation_25", "nl": "earth rotating on its axis causes the cycle of day and night on earth.", "fol": "", "prediction": ["all x.((Earth(x) & RotatesOnAxis(x)) -> CausesCycle(x,Day&Night))", "all x y.((Earth(x) & RotatingOnAxis(x)) -> (CycleOfDay(y) & CycleOfNight(y)))", "all x y.((Earth(x) & Earth(y) & RotatingOnAxis(x,y)) -> CultivatesDeadAndNight(x,y))", "all x.(Electricity(x) -> CausesCycle(x,a,d,e,Night))", "all x y.((Earth(x) & EarthRotatingOnAxis(x,y)) -> (CycleOfDayAndNight(y)))", "all x y.((Earth(x) & RotatingOnAxis(x,y)) -> (CycleOfDayAndNight(y)))", "all x.(RotationOnAxis(x) -> CausesByDayAndNight(x))", "all x y.((Earth(x) & RotatingOnAxis(x) & CausesDailyAndNight(x)) -> OnEarth(y))", "all x y.((EarthRotatingOnAxis(x) & Earth(y)) -> CausesCycleOfDayAndNight(x,y))", "all x y z.((Earth(x) & RevolvingOnAxis(x) & Axis(y) & Day(z) & Night(z)) -> CausesCycleOnEstablishment(x,y,z))", "all x y.((Earth(x) & Earth(y) & RotatesOnAxis(x)) -> (CycleOfDayAndNight(x,y)))", "all x.(Toxin(x) -> EarthRotatingOnAxisCausesCycle(x,Day,Night))", "all x y z.((Earth(x) & Axis(y) & Axis(z)) -> (RotatingOn(x,y,z) & CausesCycle(x,Day,Night)))", "all x.((Earth(x) & RotatingOnAxis(x)) -> CausesCycleOfDayAndNight(x))", "all x.((Earth(x) & RotatingOnAxis(x)) -> (CycleOfDay(x) & CycleOfNight(x)))", "all x.((Earth(x) & Earth(y) & RotatingOnAxis(x)) -> CausesCycle(x,Day,Night))"]}
{"id": "entailmentbank_validation_26", "nl": "gradens contain plants.", "fol": "", "prediction": ["all x.(Graden(x) -> ContainsPlants(x))", "all x.(Graden(x) -> ContainsPlants(x))", "all x.(Graden(x) -> ContainsPlants(x))", "all x.(Graden(x) -> ContainsPlants(x))", "all x.(Graden(x) -> ContainsPlants(x))", "all x.(Graden(x) -> ContainsPlants(x))", "all x y.((Graden(x) & Plant(y)) -> Includes(x,y))", "all x y.((Graden(x) & Plant(y)) -> Incorporates(x,y))", "all x y.((Graden(x) & Plant(y)) -> Contains(x,y))", "all x.(Graden(x) -> ContainsPlants(x))", "all x y.((Graden(x) & Plant(y)) -> Contains(x,y))", "all x.(Graden(x) -> ContainsPflanzes(x))", "all x y.((Gradein(x) & Plant(y)) -> Contains(x,y))", "all x.(Graden(x) -> ContainsPlants(x))", "all x.(Graden(x) -> ContainsPlants(x))", "all x.(Ggraden(x) -> In containsPlants(x))"]}
{"id": "entailmentbank_validation_27", "nl": "gardens are located outside.", "fol": "", "prediction": ["all x.(Garden(x) -> Outside(x))", "all x.(Garden(x) -> LocatedOutside(x))", "all x.(Garden(x) -> Outside(x))", "all x.(Garden(x) -> (LocatedOutside(x) & LocatedOutside(x)))", "all x.(Garden(x) -> LocationWithoutOutdoor(x))", "all x.(Greenhouse(x) -> LocationOutside(x))", "all x.(Garden(x) -> Organism(x))", "all x.(Garden(x) -> LocatedOutside(x))", "all x.(Garden(x) -> Outside(x))", "all x.(Garden(x) -> LocatedOutside(x))", "all x.(Garden(x) -> (HasOutdoorVerdepartment(x) & LocatedOutside(x)))", "all x y.((Garden(x) & Garden(y)) -> LocatedOutside(x))", "all x.(Garden(x) -> LocatedOutside(x))", "all x.(Garden(x) -> PositionedOutside(x))", "all x.(Garden(x) -> Outside(x))", "all x.(Garden(x) -> LocatedOutside(x))"]}
{"id": "entailmentbank_validation_28", "nl": "the plants in the gardens are located outside.", "fol": "", "prediction": ["all x.(Farmer(x) -> exists y.(Garden(y) & PlantIn(x,y))))", "all x y.((Plant(x) & Garden(y)) -> LocationOutside(x,y))", "all x y.((Plants(x) & Garden(y)) -> Outside(x,y))", "all x.(Garden(x) -> PlantsOutside(x))", "all x y.((Plant(x) & Garden(y) & In(x,y)) -> LocatedOutside(x))", "all x y.((Plant(x) & Garden(y) & In(x,y)) -> LocatedOutside(x,y))", "all x.((Plant(x) & Gardening(x)) -> LocatedOutside(x))", "all x y.((Plant(x) & Garden(y)) -> LocatedOutside(x,y))", "all x y.((Plant(x) & Garden(y)) -> Outside(x))", "all x y z.((Garden(x) & Plant(y) & Garden(z)) -> Outside(y,z))", "all x y.((Plant(x) & Garden(y)) -> LocatedExternally(x,y))", "ALL OCCUMEN(I) -> (LocatedOutside(i) & InGarden(i)))", "all x.(Garden(x) -> IsOutside(x))", "all x.((Plant(x) & WithinGarden(x)) -> Outdoor(x))", "all x y.((PlantLife(x) & Garden(y)) -> LocatedOutside(x,y))", "all x y.((Plant(x) & Garden(y) & LocatedOutside(x,y)) -> LocatedOutside(x,y))"]}
{"id": "entailmentbank_validation_29", "nl": "if something is outside during the day then that something will receive sunlight.", "fol": "", "prediction": ["all x.((OutsideDuringDay(x) & DateRun(x)) -> ReceivesSunlight(x))", "all x y.((IsOutside(x) & Day(y) & Day(z)) -> ReceivesSunlight(x,y,z))", "all x.((OutsideDuringDay(x) & OutsideDuringDay(x)) -> ReceivesSunlight(x))", "all x.((OutdoorSunlight(x) & Day(x)) -> ReceivesSunlight(x))", "all x.((Outside(x) & Day(x)) -> ReceivesSunlight(x))", "all x y.((OutdoorPeriod(x) & Day(y,x)) -> ReceivesSunlight(x))", "all x.((Sunlight(x) & OutsideAtDay(x)) -> ReceivesSunlight(x))", "exists x.((Outdoor(x) & Day(x)) -> ProvidesSunlight(x))", "all x y z.((Externing(x) & Day(y) & Outside(z)) -> ReceivesSunlight(x,y,z))", "all x.((OutsideDuringDay(x) & HasSunlight(x)) -> ReceivesSunlight(x))", "all x.((Outside(x) & Day(x)) -> ReceivesSunlight(x))", "all x.((Outdoor(x) & Day(x)) -> ReceivesSunlight(x))", "all x.((OutsideDuringDay(x) & OutsideDuringDay(x)) -> ReceivesSunlight(x))", "all x.((Outside(x) & Day(x)) -> ReceivesSunlight(x))", "all x.((OutsideDuringDay(x) & OutsideDuringDay(x)) -> ReceivesSunlight(x))", "all x.((ExternalDuringDay(x) & OutsideDuringDay(x)) -> ReceivesSunlight(x))"]}
{"id": "entailmentbank_validation_30", "nl": "the plants in the gardens will receive sunlight during the day.", "fol": "", "prediction": ["all x y.((Grounds(x) & Plant(y)) -> ReceivesSunlightDuringDay(y))", "all x y.((Plant(x) & Garden(y) & ReceivesSunlight(x,y)) -> DuringDay(x,y))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> ReceiveSunlight(x))", "all x.(Plant(x) -> ReceivesSunlightDuringDay(x))", "all x.((Plant(x) & InGardens(x)) -> ReceivesSunlightDuringDay(x))", "all x y.((Plant(x) & Garden(y)) -> ReceivesSunlight(x,y))", "all x y.((Plant(x) & Garden(y)) -> ReceivesSunlight(x,y))", "all x.(GreenhouseInGardens(x) -> ReceivesSunlight(x))", "all x.(Greenhouse(x) -> ReceivesSunlight(x))", "all x.((Plant(x) & InGarden(x)) -> ReceivesSunlightDuringDay(x))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> ReceivesSunlightDuringDay(x,y))", "all x.((PlantInGarden(x) & SunlightDuringDay(x)) -> Receives(x,y))", "all x y.((Plant(x) & GardenParticipation(y)) -> ReceivesSunlight(x,y))", "all x y.((Plant(x) & Garden(y) & ReceivesSunlight(x,y)) -> DuringDay(x,y))", "all x.(Garden(x) -> ReceiveSunlight(x))", "all x y.((Plant(x) & Garden(y)) -> ReceivesSunlightDuringDay(x,y))"]}
{"id": "entailmentbank_validation_31", "nl": "a plant requires sunlight to grow.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresSunlight(x)) -> Grows(x))", "all x.((Plant(x) & RequiresSunlight(x)) -> Grows(x))", "all x.((Plant(x) & RequiresSunlight(x)) -> Grows(x))", "all x y z.((Plant(x) & Sunlight(z) & Requires(x,y,z)) -> Grows(x))", "all x.((Plant(x) & NeedsSunlight(x)) -> Grows(x))", "all x.((Plant(x) & RequiresSunlightToGrow(x)) -> Grow(x))", "all x.(Plant(x) -> RequiresSunlightToGrow(x))", "all x.((Plant(x) & RequiresSunlightToGrow(x)) -> NeedsSunlight(x))", "all x.(Plant(x) -> RequiresSunlightToGrow(x))", "all x.((Plant(x) & RequiresSunlight(x)) -> Grows(x))", "all x.(Plant(x) -> RequiresSunlightToGrow(x))", "all x.(Plant(x) -> RequiresSunlight(x))", "all x.(Plant(x) -> RequiresSunlight(x))", "all x.((Plant(x) & RequiresSunlight(x)) -> Grows(x))", "all x.((Plant(x) & IsRichToSunlight(x)) -> RequiresSunlightToGrow(x))", "all x.(Plant(x) -> RequiresSunlightToGrow(x))"]}
{"id": "entailmentbank_validation_32", "nl": "the plants in the gardens will receive sunlight to grow during the day.", "fol": "", "prediction": ["all x y z.((Plant(x) & Garden(y) & Day(z)) -> ReceivesSunlightToGrow(x,y,z))", "all x y.((Plant(x) & Garden(y) & Sunlight(x,y)) -> Receives(x,y))", "all x.((Plant(x) & InGarden(x,y)) -> ReceivesSunlight(x))", "all x.(GardenPlant(x) -> (RenabesSunlight(x) & GrowsDuringDay(x)))", "all x y z.((Plant(x) & Garden(y) & Garden(z)) -> ReceivesSunlight(x,y))", "all x.((Plants(x) & InGardens(x)) -> ReceivesSunlightToGrowDuringDay(x))", "all x.((Plant(x) & InGardens(x)) -> ReceivesSunlightToGrow(x))", "all x y.((Plant(x) & Garden(y) & ReceivesSunlight(x,y)) -> GrowsDuringDay(y))", "all x y.((Plant(x) & Garden(y)) -> ReceivesSunlightToGrow(y,x))", "all x y.((Grange-Garden(x) & Plant(y) & InGarden(x,y)) -> ReceivesSunlight(x,y))", "all x y.((Plant(x) & Garden(y)) -> ReceivesSunlightToGrow(x,y))", "all x.((Plant(x) & InGardens(x)) -> ReceivesSunlight(x))", "all x y.((Plant(x) & Garden(y)) -> ReceivesSunlight(x,y))", "all x.((Plant(x) & InGardens(x)) -> ReceivesSunlight(x))", "all x y.((Plant(x) & Garden(y)) -> ReceivesSunlightToGrowDuringDay(x,y))", "all x y z.((Plant(x) & Garden(y) & Day(z)) -> ReceivesSunlightToGrowDuring(x,y,z))"]}
{"id": "entailmentbank_validation_33", "nl": "summer has the most sunlight.", "fol": "", "prediction": ["(HasMostSunlight(summer) & SummerHasMostSunlight(summer))", "can be found in the above:(Summer(Sunlight) & MostSunlight(Sunlight))", "all x.((Summer(x) & MostSunlight(x)) -> HasSunlight(x))", "all x.(Summer(x) -> MostSunlight(x))", "all x.(Summer(x) -> MostSunlight(x))", "all x.(Summer(x) -> MostSunlight(x))", "all x.(Summer(x) -> MostSunlight(x))", "all x.(Summer(x) -> MostSunlight(x))", "all x.(Summer(x) -> (MostSunlight(x) | MostSunlight(x)))", "all x.((Summer(x) & Sunshine(s)) -> HasMost(x,s))", "all x.(Summer(x) -> MostSunlight(x))", "all x.(Summer(x) -> HasMostSunlight(x))", "all x.(Summer(x) -> MostSunlight(x))", "all x.(Summer(x) -> Sunlight(x))", "all x.(Summer(x) -> HasMostSunlight(x))", "all x.( Summer(x) -> MostSunlight(x))"]}
{"id": "entailmentbank_validation_34", "nl": "the plants in the gardens will receive the most sunlight in summer to grow during the day.", "fol": "", "prediction": ["all x y.((Plant(x) & Garden(y) & Summer(z)) -> MostSunlight(x,z))", "all x y z.((Plant(x) & Garden(y) & Sunlight(z)) -> MostSunlight(x,z,y))", "all x y.((Plant(x) & Gardens(y) & Summer(y)) -> ReceivesMostSunlightToGrow(x,y))", "all x.((Plant(x) & InGardens(x)) -> ReceivesMostSunlightInSummer(x))", "all x.((Plant(x) & Greenhouse(x)) -> ReceivesSunlightInSummer(x))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> MostSunlight(y))", "all x y.((Plant(x) & Garden(y) & Summer(y) & InGarden(x,y)) -> GetsMostSunlightToGrowDuringDay(x,y))", "all x.((Plant(x) & InGardens(x)) -> MostSunlightInSummerToGrowDuringDay(x))", "all x y.((Plant(x) & Garden(y)) -> MostSunlight(x,y))", "all x.((Plant(x) & Greenhouse(x)) -> MostSunlightInSummerToGrowDuringDay(x))", "all x.((PlantsInGardens(x) & MostSunlightAtSummer(x)) -> GrowsDuringDay(x))", "all x.((Plants(x) & InGardens(x)) -> MostSunlightInSummer(x))", "all x y.((Plants(x) & Garden(y) & MostSunlightInSummer(x,y)) -> GrowsDuringDay(x))", "all x.((Plant(x) & Garden(x)) -> MostSunlightInSummer(x))", "all x.((Plant(x) & Garden(x)) -> ReceivesMostSunlightInSummerToGrow(x,Day))", "all x.((Plants(x) & Gardens(x)) -> ObtainsMostSunlight(x,Summer))"]}
{"id": "entailmentbank_validation_35", "nl": "andy lives in southern hemisphere.", "fol": "", "prediction": ["andy exists in southern hemisphere.", "andy laisesin(hemisphere)", "andy lives in southern hemisphere.", "andy lives in southern hemisphere.", "andy lives in southern hemisphere.", "andy live's in southern hemisphere.", "andy lives in southernHemisphere.", "(LisesInSouthHemisphere(andy))", "andy lives in southern Hemisphere (S\u00fcdeasterHemisphere)", "&y.UsesInSouthHemisphere(y)", "andy lives in southernHemisphere(Andy)", "andy lives in southern hemisphere.", "andy lives in southernhemisphere.", "andy lives in southern hemisphere.", "andyl exists x.((Hemispheric(x) & Southern(x)) -> LivesIn(y))", "andy lives in southern hemisphere."]}
{"id": "entailmentbank_validation_36", "nl": "it is august.", "fol": "", "prediction": ["AUGUST(a)", ".((Autumn(x))", "it is august.", ".(Autumn(x) -> -AndRainy(x))", "it is august.", "(Autumn(x) -> FoundInSurface(x))", "all x.(Autumn(x) -> AddedOnly(x))", "!Autumn(s) ->.", "the best at this month.", "-AugUST(almost)", "all x.(Autumn(x) -> PostedBy(x,y))", "Es ist August!", "and now August.", "(Autumn(s) & -Significant(d) & Finished(d))", "all x.(Autumn(x) -> Is(x,Y))", "to august."]}
{"id": "entailmentbank_validation_37", "nl": "august is during the winter in the southern hemisphere.", "fol": "", "prediction": ["all x y.((Augment(x) & SouthernHemisphere(y)) -> Winter(x,y))", "(Winter-SouthHemisphere(aug) & Mid-Winter(aug))", "all x.((August(x) & SouthernHemisphere(x)) -> WinterInHemisphere(x))", "(Autumn(August) & Winter(August))", "August is the Month(August) & WinterInSouthernHemisphere(August))", "all x.(August(x) -> WinterInSouthernHemispheric(x))", "all x.((Autumn(x) & Summer(x)) -> SouthernHemisphere(x))", "all xt.((August(x) & SouthernHemisphere(t)) -> Winter(x,t))", "all x y.((August(x) & SouthernHemisphere(y)) -> Winter(x,y))", "all x.(Autumn(x) -> WinterMidnightInSouthernHemisphere(x))", "(Himmisphere(a) & SouthernHemispheric(k) & Winter(a))", "all x.(Autumn(x) -> WinterHemisphere(x))", "Duringwinterinst(austinhemisphere)", "all x.((August(x) & Winter(y)) -> InTheSouthernHemisphere(x,y))", "all x y.((Autumn(x) & SouthernHemisphere(y)) -> WinterInHemisphere(x,y))", "all x y.((AugustSeasonalHemisphere(x) & SouthernHemisphere(y)) -> WinterIn(x,y))"]}
{"id": "entailmentbank_validation_38", "nl": "andy will experience winter in southern hemisphere in august.", "fol": "", "prediction": ["all x y.((Andy(x) & SouthernHemisphere(y)) -> ExperiencesWinterInAug(x,y))", "andy will experience winter in southern hemisphere in august.", "All x.(Andy(x) -> ExperienceWinterSouthHemisphere(x,Aug))", "andy will experience winter in southernhemisphere in august.", "andy will experience winter in southern hemisphere in august.", "andy experiences winter in hemisphere in august.", "andy experienceeswinterInSouthernHemisphereInAug.", "andy experiences winter in southern hemisphere in august.", "andy will experience winter in southern hemisphere in august.", "andy experiencees(a) summer(b) & SouthernHemisphere(c) & InAugust(a))", "Andy experiences (hiver/humidity) & Summer(v))", "((Andy\" & SouthernHemisphere(Aug.)) -> ExperienceHiverInAug.(Andy\" & ExperienceSummerH\u00e9misphere(Aug.)))", "andy will experience winter in southerlyhemisphere in august.", "andy writs to become a year after his return to the southern hemisphere in august.", "andy experiences winter in southernhemisphere in august.", "andy experiences winter in southern Hemisphere in august."]}
{"id": "entailmentbank_validation_39", "nl": "the sun is a kind of star.", "fol": "", "prediction": ["all x.(Sun(x) -> Star(x))", "all x.(Sun(x) -> 'Star(x)')", "all x.(Sun(x) -> Star(x))", "all x.(Sun(x) -> Star(x))", "all x.(Sun(x) -> Star(x))", "all x.(Sun(x) -> Star(x))", "all x.(Sun(x) -> Star(x))", "all x.(Sun(x) -> Star(x))", "all x.(Sun(x) -> Star(x))", "all x.(Sun(x) -> Star(x))", "all x y.((Sun(x) & Star(y)) -> VariousStones(x))", "all x.(Sun(x) -> Star(x))", "all x.(Sun(x) -> Star(x))", "all x.(Sun(x) -> Star(x))", "all x.(Sun(x) -> Star(x))", "all x y.((Sun(x) & Star(y)) -> Like(x,y))"]}
{"id": "entailmentbank_validation_40", "nl": "the earth revolves around the sun.", "fol": "", "prediction": ["all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))", "all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))", "all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))", "all x.(Earth(x) -> RevolvesAroundSun(x))", "all x y z.((Earth(x) & Sun(y) & Sun(z)) -> Resemble(x,y,z))", "all x.(Earth(x) -> RevolvesAroundSun(x))", "all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))", "all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))", "all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))", "all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))", "all x.(Earth(x) -> RevolvesAroundSun(x))", "all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))", "all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))", "exists x.(Earth(x) & Reverses(x,Sun))", "all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))", "all x.(Earth(x) -> RevolvesAround(x,Sun))"]}
{"id": "entailmentbank_validation_41", "nl": "earth revolving the sun is an example of a planet revolving around its star.", "fol": "", "prediction": ["all x.((Planet(x) & ResolvesSun(x)) -> RevolvesAroundStar(x))", "all x.((Earth(x) & Revolving(x,sun)) -> PlanetRevolvingAroundStar(x))", "all x y.((Planet(x) & Earth(y) & RevolvesSun(x,y)) -> RevolvingAroundStar(y))", "all x.((Earth(x) & RevolvingSun(x)) -> PlanetRevolvingAroundStar(x))", "all x y.((Earth(x) & Sun(y) & Revolving(x,y)) -> RevolvingAroundStar(x))", "all x.((Earth(x) & RevolvesSun(x)) -> RevolvingAroundStar(x))", "all x.((Earth(x) & RevolvingSun(x)) -> PlanetRevolvingAroundStar(x))", "all x y.((Earth(x) & Sun(y)) -> RevolvingAround(x,y))", "all x y.((Earth(x) & Sun(y) & Revolving(x,y)) -> PlanetRevolvingAroundStar(x))", "all x y.((Earth(x) & Sun(y) & Revolving(x,y)) -> RevolvingAroundStar(x,y))", "all x y.((Earth(x) & Sun(y) & Revolving(x,y)) -> Planet(x))", "all x.((Planet(x) & EarthRevolvesSun(x)) -> RevolvingAroundStar(x))", "all x y.((Earth(x) & Sun(y) & Elements(x,y)) -> RevolvingAround(x))", "all x.((Earth(x) & RevolvingSun(x)) -> RevolvingAroundStar(x))", "all x.((Earth(x) & RevolvingSun(x)) -> PlanetRevolvingAroundStar(x))", "all x.((Earth(x) & RevolvingSun(x)) -> PlanetRevolvingAroundStar(x))"]}
{"id": "entailmentbank_validation_42", "nl": "a complete revolution / orbit of a planet around its star takes 1 / one planetary year.", "fol": "", "prediction": ["all x.((Planet(x) & CompleteRevolution(x) & OrbitOfPlanetAroundStar(x)) -> TakesOnePlanetaryYear(x))", "all x y z.((Planet(x) & Earth(y) & Planet(z) & TotalRevolution(x,y,z)) -> TakesAroundStar(x,y,z))", "all x y z.((CompleteRevolution(x) & OrbitOfPlanet(y) & Star(z) & AroundAround(y,z) & TakesOfOnePlanetaryYear(x)) -> TakesOneYear(x))", "all x.((Planet(x) & CompleteRevolution(x) & Orbit(x)) -> TakesOnePlanetaryYear(x))", "all x y.((CompleteRavolution(x) & Orbit(x,y) & Planet(y) & Star(y)) -> TakesOne(x,y))", "all x y.((Planet(x) & Planet(y) & CompleteRevolution(x,y)) -> OrbitAroundStar(x,y))", "all x y z.((CompleteRevolution(x) & Orbit(y) & Planet(z) & Star(w)) -> Takes(x,y,z,w))", "all x y.((CompleteRevolution(x) & Orbit(x) & Planet(y) & AroundStar(y)) -> TakesOnePlanetaryYear(x,y))", "all x y.((CompleteRevolution(x) & TotalOrbitOfPlanet(x,y) & Star(y)) -> TakesOne(x,y))", "all x y.((Planet(x) & Planet(y)) -> TakesOnePlanetaryYear(x,y))", "all x y z.((CompleteRevolution(x) & Orbit(y) & Planet(z) & Star(y) & Takes1Person(x,y,z)) -> TakesOnePlanetaryYear(x,y))", "all x y.((Planet(x) & CompleteRotation(x) & Orbit(x) & Star(y)) -> TakesOne(x,y))", "all x y z.((Planet(x) & CompleteRevolution(x) & Orbit(y) & Star(z)) -> TakesOne(x,y,z))", "all x y.((CompleteRevolution(x) & Orbit(y) & Planet(x) & Star(r) & Around(y,r)) -> TakesOne(x,y))", "all x.((Planet(x) & CompleteRevolution(x)) -> OrbitsAroundStar(x))", "all x y z.((Rotation(x) & Orbit(y) & Planet(z) & AroundStar(z) & CompleteRole(x,x,y,z)) -> TakesOnePlanetaryYear(x,y,z))"]}
{"id": "entailmentbank_validation_43", "nl": "a complete revolution of earth around the sun takes an earth year.", "fol": "", "prediction": ["all x.((CompleteRevolution(x) & EarthAroundSun(x)) -> EarthYear(x))", "all x.((RevolutionOfEarthAroundSun(x) & TakesEarthYear(x)) -> Total(x))", "all x.((RevolutionOfEarth(x) & Sun(x)) -> TakesEarthYear(x))", "all x y.((CompleteRevolutionOfEarth(x) & Sun(y)) -> TakesEarthYear(x,y))", "all x y.((RevolutionOfEarth(x) & Sun(y)) -> TakesEarthYear(x,y))", "all x y.((RevolutionOfEarth(x) & Sun(y) & Complete(x,y)) -> TakesEarthYear(x))", "all x y.((CompleteRevolutionOfEarth(x,y) & Sun(y)) -> TakesEarthYear(x))", "all x y.((CompleteRevolutionUnderSun(x) & Earth(y)) -> TakesEarthYear(x,y))", "all x y.((CompleteRevolution(x) & Earth(x,y)) -> ComesAroundSun(x,y))", "all x.((CompleteRevolutionOfEarth(x) & Sun(x)) -> TakesEarthYear(x))", "all x.((CompleteRevolutionOfEarth(x) & Sun(x)) -> TakeEarthYear(x))", "all x.((RevolutionOfEarth(x) & Sun(x)) -> TakesEarthYear(x))", "all x y.((CompleteRevolution(x,y) & Earth(y)) -> TakesEarthYear(x,y))", "all x y z.((RevolutionOfEarth(x) & Sun(y) & EarthYear(z)) -> TakesEarthYear(x,y,z))", "all x y.((RevolutionOfEarth(x) & Sun(y)) -> TakesEarthYear(x,y))", "all x.((CompleteRevolutionOfEarth(x) & Sun(x)) -> EarthYear(x))"]}
{"id": "entailmentbank_validation_44", "nl": "earth rotating on its tilted axis occurs once per day.", "fol": "", "prediction": ["all x.((Earth(x) & TiltedAxis(x)) -> OccursOnePerDay(x))", "all x.(TiltedAxis(x) -> EarthRotatingOn(x,Day))", "all x y z.((Earth(x) & TidedAxis(y) & Earth(z) & TravelsOn(x,z)) -> OccursOncePerDay(x))", "all x y z.((Earth(x) & TiltedAxis(y) & Day(z) & RotatesOn(x,y)) -> OccursEveryDay(x,z))", "all x y z.((Earth(x) & TippedAxis(y) & Earth(z) & RotatesOn(x,y,z)) -> OccursOnlyRotatedAxis(x,y etc))", "all x.(TiltedAxis(x) -> RotatingEarthOn(x,Earth,Movement))", "all x y.((Earth(x) & TiltedAxis(x)) -> OccursOncePerDay(x))", "all x.(TiltedAxisOccurrence(x) -> EarthRotatingOnSidedAxis(x))", "all x.(TiltedAxis(x) -> EarthRotatingOccursOnePerDay(x))", "all x y.((TiltedAxis(x) & Earth(y) & RotatesOn(y,x)) -> OccursOneTimePerDay(y))", "all x.((Earth(x) & TiltedAxis(x)) -> OccursFalseOnDay(x))", "all x.((Earth(x) & TurnedAxis(x)) -> OccursOncePerDay(x))", "all x y.((Earth(x) & TiltedAxis(x,y)) -> OccursOnTiltedAxis(x,y))", "all x.(EarthRotatingOnTiltedAxis(x) -> OccursOncePerDay(x))", "all x.(TippedAxisOperation(x) -> EarthTilted(x))", "all x.(TiltedAxis(x) -> OccursOn(x,Day))"]}
{"id": "entailmentbank_validation_45", "nl": "the earth is a planet that rotates on its tilted axis once per day.", "fol": "", "prediction": ["(AxisRotation(earth) & TwistedAndThick(earth))", "all x.((Earth(x) & RotatesOnTiltedAxis(x)) -> RotatesOn(x,Daily))", "all x.((Earth(x) & RotatesOnTiltedAxis(x,x)) -> Planet(x))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x) & OncePerDay(x)))", "all x y.((Earth(x) & Planet(y)) -> (RotatesOnTiltedAxis(x,y) & OncePerDay(x,y)))", "all x.(Planet(x) -> (RobotsOnTiltedAxis(x,OfDay) & rotatesOnAxis(x,OfDay)))", "all x.(Planet(x) -> (TiltedAxis(x) | RotatesOnAxis(x)))", "all x y.((Earth(x) & Planet(y)) -> TiltedAxis(y))", "all x.(Planet(x) & RotatesOnTiltedAxis(x))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x,everyday))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "all x.((Planet(x) & RotatesOnTiltedAxis(x)) -> Earth.", "all x.((Earth(x) & RotatesOnTiltedAxis(x,onceAxis)) -> Planet(x))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x) & OncePerDay(x)))"]}
{"id": "entailmentbank_validation_46", "nl": "the earth rotating on its tilted axis causes the cycles of day and night on earth.", "fol": "", "prediction": ["all x y.((Earth(x) & RotatingOnTiltedAxis(x)) -> CausesCyclesOfDayAndNightOnEarth(y))", "all x y z.((Earth(x) & SlopedAxis(y) & Earth(z)) -> CausesCycles(x,z))", "all x y z.((Earth(x) & TiltedAxis(y) & Earth(z) & RotatingOn(x,y)) -> (CyclesDate(x,z) & CyclesNight(x)))", "all x y.((Earth(x) & TurbulentYacht(y) & TiltedAxis(x) & Earth(x)) -> CausesCyclesOn(x,Day,Night))", "all x y.((Earth(x) & TippedAxis(y)) -> CausesCyclesOfDayAndNight(x))", "all x.(TiltedAxis(x) -> CausesCycle(x,Day,Night))", "all x y.((Earth(x) & TidyAxis(y) & RotatingOnAxis(x,y)) -> CreatesDayAndNightCycles(x,y))", "all x y z.((Earth(x) & TiltedAxis(y) & Earth(z)) -> CausesCycles(x,y,z))", "all x y.((Earth(x) & RotatingOnTiltedAxis(x)) -> (CausesCycles(y) & OnEarth(y)))", "all x y z.((Earth(x) & TiltedAxis(y) & Earth(z)) -> CausesCyclesOn(x,y,z))", "all x.((EarthRotatingOnTiltedAxis(x) & CausesCyclesOnEarth(x)) -> DayAndNightOnEarth(x))", "all x.((Earth(x) & TiltedAxis(x)) -> CausesCalculationsFollowingDayAndNight(x))", "all x.((EarthRotatingOnTippedAxis(x) & CausesDayAndNight(x)) -> EarthCourseOn(x,Earth))", "all x y.((Earth RotatingOnTiltedAxis(x) & Earth(y)) -> CausesDayAndNightCycles(x,y))", "all x.(Earth(x) & rotates(x) & TetheredAxis(x)) -> CausesCycle(x,y))", "all x.((EarthRotation(x) & TiltedAxis(x)) -> CausesCyclesOfDayAndNight(x))"]}
{"id": "entailmentbank_validation_47", "nl": "mercury is located in the solar system.", "fol": "", "prediction": ["(MercuryInSolarSystem(m) & LocatedInSolarSystem(m))", "all x y.((Mercury(x) & SolarSystem(y)) -> LocatesIn(x,y))", "all x.(Quercetin(x) -> LocatedInSolarSystem(x))", "all x.(Mercury(x) -> (LocatedInSolarSystem(x) & LocatedInSolarSystem(x)))", "all x.(M mercury(x) -> SolarSystem(x))", "all x y.((Mercury(x) & SolarSystem(y)) -> LocatedIn(x,y))", "all x.(Mercury(x) -> ExistsInSolarSystem(x))", "all x.(Hydrocloradia(x) -> LocalizedInSolarSystem(x))", "all x.(Quecksilver(x) -> LivesInSolarSystem(x))", "all x.(HasHydrogen(x) -> LocatedInSolarSystem(x))", "all x.(Mixer(x) -> (LocatedInSolarSystem(x) & LocalizedInSolarSystem(x)))", "exists x.(Quercetin(x) & LocatedInSolarSystem(x))", "all x.(Quercetin(x) -> FindsInSolarSystem(x))", "all x.(McCarbon(x) -> SolarSystem(x))", "all x.(Microfluorescein(x) -> LocatedInSolarSystem(x))", "all x.(Mercury(x) -> SolarSystem(x))"]}
{"id": "entailmentbank_validation_48", "nl": "mercury is a kind of planet.", "fol": "", "prediction": ["all x.(Quecksilber(x) -> Planet(x))", "all x.(Quecksilver(x) -> Earth(x))", "all x.(Hydrogen(x) -> Planet(x))", "all x.(Quercus(x) -> Planet(x))", "all x.(Mixer(x) -> Planet(x))", "all x.(Quecksilber(x) -> Planet(x))", "all x y.((Quartz(x) & Planet(y)) -> IsSoCalled(x,y))", "all x.(Mercure(x) -> Planet(x))", "all x.(M mercury(x) -> Planet(x))", "all x.(Mercury(x) -> Planet(x))", "all x.(Mercury(x) -> Planet(x))", "all x.(Quecksilver(x) -> Planet(x))", "all x.(Mercury(x) -> Planet(x))", "all x.(Mercury(x) -> Planet(x))", "all x.(Mixer(x) -> Planet(x))", "all x y.((Mercury(x) & Planet(y)) -> Exists z.(Potential(z) & KnownFor(y,z))))"]}
{"id": "entailmentbank_validation_49", "nl": "mercury is a planet in the solar system.", "fol": "", "prediction": ["all x y z.((Mercury(x) & SolarSystem(y) & Planet(z)) -> InSystem(x,y,z))", "all x.(Mercury(x) -> PlanetInSolarSystem(x))", "all x.(Mercury(x) -> PlanetInSolarSystem(x))", "all x.(Magnetic(x) -> (Planet(x) & SolarSystem(x)))", "all x.(Quartz(x) -> PlanetInSolarSystem(x))", "all x.(Quercus(x) -> Planet(x))", "all x.(Mercury(x) -> PlanetInSolarSystem(x))", "all x.(Quaternary(x) -> PlanetInSolarSystem(x))", "all x.(Mercury(x) -> Planet(x))", "all x.(Mercury(x) -> PlanetInSolarSystem(x))", "all x.(Mercury(x) -> PlanetInSolarSystem(x))", "all x.(Mercury(x) -> (Planet(x) & InSolarSystem(x)))", "all x.(Quarry(x) -> PlanetInSolarSystem(x))", "all x.(Quirmal(x) -> PlanetInSolarSystem(x))", "all x.(Mercury(x) -> PlanetInSolarSystem(x))", "all x.(Magnetic(x) -> PlanetInSolarSystem(x))"]}
{"id": "entailmentbank_validation_50", "nl": "planets in the solar system orbit the sun.", "fol": "", "prediction": ["all x y.((Planet(x) & SolarSystem(y)) -> Orbits(x,y))", "all x y z.((Planet(x) & SolarSystem(y) & SolarSystem(z)) -> Orbits(x,y,z))", "all x.((Planet(x) & InSolarSystem(x)) -> OrbitsSun(x))", "all x.(Planet(x) -> OrbitsSun(x))", "all x.((Planet(x) & SolarSystem(x)) -> Orbits(x,y))", "all x y z.((Planet(x) & SolarSystem(y) & Sun(z)) -> Orbits(x,y,z))", "all x.((Planet(x) & SolarSystem(x)) -> OrbitsSun(x))", "all x.(Planet(x) -> OrbitSun(x))", "all x y.((Planet(x) & SolarSystem(y)) -> Orbits(x,y))", "all x.(Planet(x) -> OrbitSun(x))", "all x y.((Planet(x) & SolarSystem(y)) -> Orbits(x,y))", "all x y.((Planet(x) & SolarSystem(y)) -> OrbitsSun(x,y))", "all x.((Planet(x) & Sun(x)) -> Orbits(x,y))", "all x.((Planet(x) & SolarSystem(x)) -> OrbitSun(x))", "all x.((Planet(x) & SolarSystem(x)) -> OrbitSun(x))", "all x.((Planet(x) & SolarSystem(x)) -> OrbitSun(x))"]}
{"id": "entailmentbank_validation_51", "nl": "mercury is a planet orbits the sun in the solar system.", "fol": "", "prediction": ["all x.(Querum(x) -> OrbitsSun(x))", "all x.(Mercury(x) -> OrbitsSun(x))", "all x.(Mercury(x) -> OrbitsSunInSolarSystem(x))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x)))", "all x y z.((M mercury(x) & Sun(y) & SolarSystem(z)) -> Orbits(x,y,z))", "all x.(Quercus(x) -> (Planet(x) & OrbitsSun(x)))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x)))", "all x y z.((Marquer(x) & Sun(y) & SolarSystem(z)) -> OrbitsIn(x,y,z))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x)))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x)))", "all x.(M mercury(x) -> OrbitsSunInSolarSystem(x))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x) & SolarSystem(x)))", "all x y z.((Mercurium(x) & Sun(y) & SolarSystem(z)) -> Orbits(x,y,z,w))", "all x.(Mercury(x) -> OrbitsSun(x))", "all x.(Mercury(x) -> OrbitsTheSun(x))", "all x.(Mercury(x) -> OrbitsSun(x))"]}
{"id": "entailmentbank_validation_52", "nl": "a complete orbit of mercury around the sun takes one mercury year.", "fol": "", "prediction": ["all x.((QualifyingOrbit(x) & MercuryAroundSun(x)) -> Takes(x,mageriumYear))", "all x.((CorrectOrbitOfMercury(x) & AroundSun(x)) -> TakesOneMagnumberYear(x))", "all x.((CompleteOrbitOfMethane(x) & Sun(x)) -> TakesOneMerckYear(x))", "all x.((CompleteOrbitOfMercuryAroundSun(x) & TakesOneMercuryYear(x)) -> TakesOne(x))", "all x.((CompleteOrbitOfMercury(x) & AroundSun(x)) -> TakesOneMercuryYear(x))", "all x.((CompleteOrbitOfMercury(x) & AroundSun(x)) -> TakesOneMercuryYear(x))", "all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesHour(x))", "all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesOneMercuryYear(x))", "all x y.((Orbit(x) & Mercury(y)) -> TakesOneMormonYear(x,y))", "all x.((Operation(x) & Complete(x,magnesium) & Sun(x)) -> TakesOneMercuryYear(x))", "all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesOneMercuryYear(x))", "all x.((Orbit(x) & Complete(x) & MercuryAroundSun(x)) -> TakesOneMercuryYear(x))", "all x y.((CompletOrbitOfMercury(x) & Sun(y)) -> TakesOneMercuryYear(x,y))", "all x y.((CompleteOrbitOfMercuryAroundSun(x) & Earth(y)) -> TakesOneMercuryYear(x,y))", "all x.((CopiestOrbitOfMercuryAroundSun(x)) -> TakesOneMercuryYear(x))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesOneMercuryYear(x,y))"]}
{"id": "entailmentbank_validation_53", "nl": "one mercury year is about 88 earth days.", "fol": "", "prediction": ["all x.(MercuryYear(x) -> AboutElectronicDays(x,88))", "all x.(MercuryYear(x) -> EarthDays(x,88))", "all x.(CadmiumYear(x) -> EarthDays(x,8))", "soy vs. mercuryyuan(v) & EarthDay(v) & About88Together(v,z,v))", "all x y.((MarshmintedYear(x) & EarthDay(y)) -> Approximately(x,y))", "all x.(MercuryYear(x) -> AboutEarthDays(x,88))", "all x y.((MercuryYear(x) & EarthDay(y)) -> ExistsSupply(x,y))", "all x.(MercuryYear(x) -> EarthDays(x,88))", "all x.(MercuryYear(x) -> EarthDays(x,88))", "all x.(MercuryYear(x) -> EarthDays(x,88))", "all x.((MercuryYear(x) & EarthDays(x,88)) -> Period(x))", "all x.(QuarryYear(x) -> EarthDays(x,88))", "all x.(MercuryYear(x) -> EarthDays(x,88))", "all x.((MercuryYear(x) & EarthDay(x,88)) -> Year(x,8))", "all x.(MercuryYear(x) -> EarthDay(x,88))", "all x.(Quercus(x) -> HasEarthDays(x,88))"]}
{"id": "entailmentbank_validation_54", "nl": "a complete orbit of mercury around the sun takes around 88 earth days.", "fol": "", "prediction": ["all x y.((CompleteOrbitOfMortality(x) & Sun(y)) -> TakesEarthDays(x,88))", "all x.((CompletOrbitOfMercury(x) & Sun(x)) -> TakesEarthDays(x,88))", "all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesEarthDays(x,88))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesEarthDays(x,88))", "all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesEarthDays(x,88))", "all x.(CompleteOrbitOfMercuryAroundSun(x) -> TakesAbout88EarthDays(x))", "all x.((CoralOrbit(x) & MercuryAroundSun(x)) -> TakesAbout88EarthDays(x))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesEarthDays(x,88))", "all x y.((CompleteOrbitOfQuarry(x,y) & Sun(y)) -> TakesEarthDays(z,88))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesAbout(x,88))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesEarthDays(x,y))", "all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesAbout88EarthDays(x))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesEarthDays(x,8))", "all x.((CompletOrbitOfMercury(x) & Sun(x)) -> TakesEarthDays(x,88))", "all x.((CoralOrbitOfMercuryAroundSun(x) & TakesEarthDay(x,88)) -> Complete(x))", "all x.((CompleteOrbitOfMercury(x) & AroundSun(x)) -> TakesEarthDays(x,88))"]}
{"id": "entailmentbank_validation_55", "nl": "the new moon is when the dark half of the moon faces the earth.", "fol": "", "prediction": ["all x.((Moon(x) & DarkHalfFacesEarth(x)) -> New(x))", "all x.(NewMoon(x) -> whenDarkFacesMoon(x))", "all x.((Moon(x) & DarkHalfFacesEarth(x)) -> NewMoon(x))", "all x.((Moon(x) & DarkHalfFacesEarth(x)) -> NewMoon(x))", "all x.((NewMoon(x) & DarkHalfOfMoon(x)) -> FacesEarth(x))", "all x.((Moon(x) & DarkHalfAndEarth(x)) -> NewMoon(x))", "all x.(NewMoon(x) -> (DarkHalf(x) & FacesEarth(x)))", "all x y.((NewMoon(x) & DarkHalfMinute(y)) -> FacesEarth(x,y))", "all x y.((Moon(x) & DarkHalf(y) & FacesEarth(x,y)) -> NewMoon(x))", "all x.(NewMoon(x) -> DarkHalfFacesEarth(x))", "all x.((NewMoon(x) & DarkHalfOfMoon(x)) -> FacesEarth(x))", "all x.(NakedMoon(x) -> DarkHathFacesEarth(x))", "all x y.((NewMoon(x) & DarkHalf(y)) -> FacesEarth(y))", "all x.(NewMoon(x) -> (DarkHalfOfMoon(x) & FacesEarth(x)))", "all x.(NewMoon(x) -> FairSide(x,y))", "all x.((Moon(x) & DarkHalf(x)) -> FacesEarth(x))"]}
{"id": "entailmentbank_validation_56", "nl": "the new moon is when the moon is in between the sun and the earth.", "fol": "", "prediction": ["all x.(NewMoon(x) -> (MoonInBetweenSunAndEarth(x)))", "all x.(NewMoon(x) -> (MoonBreaking(x,Sun) & MoonBreaking(x,Earth)))", "all x.(NewMoon(x) -> isMoonInBetween(x,Sun,Earth))", "all x.((Moon(x) & MoonInBetweenSunAndEarth(x)) -> NewMoon(x))", "all x y.((Moon(x) & Sun(y)) -> InBetween(x,y))", "all x.((Moon(x) & SunBetween(x,sun,earth)) -> NewMoon(x))", "all x.(NewMoon(x) -> (MoonBetweenSunAndEarth(x)))", "all x y.((Moon(x) & Sun(y)) -> InBetween(x,y))", "all x.((Moon(x) & Sun(x) & Earth(x)) -> NewMoon(x))", "all x.((Moon(x) & MoonInSun(x) & InEarth(x)) -> NewMoon(x))", "all x y z.((Sun(x) & Earth(y) & Moon(z)) -> InBetween(z,x))", "all x y.((Moon(x) & Moon(y)) -> InBetweenSunAndEarth(y))", "all x y.((Moon(x) & Sun(y) & Earth(x)) -> InBetween(x,y))", "all x.((Moon(x) & SunInBorder(x)) -> NewMoon(x))", "all x y.((Moon(x) & Sun(y) & Earth(y)) -> InBoth(x,y))", "all x.(NewMoon(x) -> MoonEarth(x))"]}
{"id": "entailmentbank_validation_57", "nl": "the new moon is when the moon could block the earth from the sun.", "fol": "", "prediction": ["all x.((Moon(x) & BlocksEarthFromSun(x)) -> NewMoon(x))", "all x.(NewMoon(x) -> (MoonBlocksEarthFromSun(x)))", "all x y.((Moon(x) & Moon(y)) -> BlocksEarthFromSun(y,x))", "all x y.((Moon(x) & Moon(y)) -> BlocksEarthFromSun(x,y))", "all x y z.((NewMoon(x) & Moon(y) & Earth(z) & Blocks(y,z)) -> NewMoon(x))", "all x.(NewMoon(x) -> BlocksEarthFromSun(x))", "all x.(NewMoon(x) -> CanBlockEarthFromSun(x))", "all x.(NewMoon(x) -> CouldBlockEarthFromSun(x))", "all x y.((Moon(x) & Earth(y) & BlocksFrom(x,y)) -> NewMoon(x))", "all x.(NewMoon(x) -> BlocksEarthFromSun(x))", "all x.(NewMoon(x) -> (MoonBlocksEarthFromSun(x)))", "all x.((Moon(x) & BlocksEarthFromSun(x)) -> NewMoon(x))", "all x.((Moon(x) & MoonBlockSun(x)) -> NewMoon(x))", "all x y z.((Moon(x) & Earth(y) & Sun(z)) -> BlocksFrom(x,y,z))", "all x y.((Moon(x) & Moon(y)) -> BlocksEarthFromSun(y,x))", "all x.((Moon(x) & BlocksEarthFromSun(x)) -> NewMoon(x))"]}
{"id": "entailmentbank_validation_58", "nl": "a solar eclipse is when the moon blocks the earth from the sun.", "fol": "", "prediction": ["all x.(SolarEclipse(x) -> MoonBlocksEarthFromSun(x))", "all x y z.((SolarEclipse(x) & Moon(y) & Earth(z) & BlocksFromSun(y,z)) -> BlocksFromSun(x,z))", "all x y z.((SolarEclipse(x) & Moon(y) & Earth(z) & BlocksFromSun(y,z)) -> Blocks(y,z))", "all x.(SolarEclipse(x) -> MoonBlocksEarthFromSun(x))", "all x.(SolarEclipse(x) -> MoonBlocksFromSun(x))", "all x.((Moon(x) & BlocksEarthFromSun(x)) -> SolarEclipse(x))", "all x y.((SolarEclipse(x) & Moon(y)) -> BlocksEarthFromSun(y,x))", "all c.((Moon(c) & BlocksEarth(c)) -> SolarEclipse(c))", "all x.(SolarEclipse(x) -> MoonBlocksEarthFromSun(x))", "all x y z.(SolarEclipse(x) -> (MoonBlocksEarthFromSun(x,y) & EarthFromSun(y)))", "all x y z.((SolarEclipse(x) & Moon(y) & Earth(z) & BlocksFromSun(y,z)) -> SolarEclipse(x))", "all x.(SolarEclipse(x) -> MoonBlocksEarthFromSun(x))", "all x.(SolarEclipse(x) -> MoonBlocksFromSun(x))", "all x y z.((SolarEclipse(x) & Moon(y) & Earth(z)) -> BlocksFromSun(y,z))", "all x.(SolarEclipse(x) -> (MoonBlocksEarthFromSun(x) & EarthBlocksEarthFromSun(x)))", "all x.(SolarEclipse(x) -> MoonBlocksEarthFromSun(x))"]}
{"id": "entailmentbank_validation_59", "nl": "a solar eclipse could only happen during the new moon.", "fol": "", "prediction": ["all x.(SolarEclipse(x) -> NewMoon(x))", "all x.(SolarEclipse(x) -> WaitsDuringNewMoon(x))", "all x.(SolarEclipse(x) -> -exists y.(NewMoon(x) & OccursDuring(x,y))))", "all x y.((SolarEclipse(x) & NewMoon(y)) -> CanOccurWith(x,y))", "all x.(SolarEclipse(x) -> (NeverMoon(x) | AtNewMoon(x)))", "all x.(SolarEclipse(x) -> NewMoon(x))", "all x y.((SolarEclipse(x) & Moon(y)) -> CouldPainToCause(x,y))", "all x.(SolarEclipse(x) -> ExistsOnceNewMoon(x))", "all x.(SolarEclipse(x) -> CanOccursDuringNewMoon(x))", "all x.(SolarEclipse(x) -> (IsNeverUnderNewMoon(x)))", "all x.(SolarEclipse(x) -> NewMoon(x))", "all x.(SolarEclipse(x) -> (NewMoon(x) & CanComeDuring(x)))", "all x.(SolarEclipse(x) -> (SunnyMoon(x) & InMoon(x)))", "all x.(SolarEclipse(x) -> CanOccurDuringNewMoon(x))", "all x.(SolarEclipse(x) -> CouldBeLimit(x,newMoon))", "all x y.((SolarEclipse(x) & NewMoon(y)) -> CanCause(x,y))"]}
{"id": "entailmentbank_validation_60", "nl": "objects generally are made of ice in the kuiper belt.", "fol": "", "prediction": ["all x y z.((Object(x) & KuiperBelt(y) & Ice(z)) -> MadeOf(x,y,z))", "all x.((Object(x) & MakesOfIce(x)) -> KuiperBelt(x))", "all x.((Object(x) & MadeOfIce(x)) -> KuiperBelt(x))", "all x.(Ice(x) -> InKuiperBelt(x))", "all x.(KuiperBelt(x) -> MadeOfIce(x))", "all x.(KuiperBelt(x) -> MadeOfIce(x))", "all x y.((Object(x) & KuiperBelt(y)) -> MadeOfIce(x,y))", "all x.((Object(x) & MadeOfIce(x) & InKuiperBelt(x)) -> MadeOfIce(x))", "all x.(Ice(x) -> KuiperBelt(x))", "all x y.((Object(x) & KuiperBelt(y)) -> MadeOfIce(x,y))", "all x.(MadeOfIce(x) -> KuiperBelt(x))", "all x y.((Object(x) & KuiperBelt(y)) -> MadeOfIce(x,y))", "all x.((Object(x) & MadeOfIce(x) & KuiperBelt(x)) -> MakesOfIce(x))", "all x.(MadeOfIceInKuiperBelt(x) -> MadeOfIce(x))", "all x.((Object(x) & MadeOfIce(x) & KuiperBelt(x)) -> MadeOfIce(x))", "all x.(MadeOfIce(x) -> KuiperBelt(x))"]}
{"id": "entailmentbank_validation_61", "nl": "icy can be used to describe objects that are made of ice.", "fol": "", "prediction": ["all x y.((Ice(x) & Object(y)) -> MadeOfIce(y,x))", "all x.(Ice(x) -> CanBeTermoredToDescribe(x,Ice))", "all x.(Ice(x) -> (DefinesMadeOfIce(x) & Object(x)))", "all x y.((Ice(x) & Object(y)) -> (MadeOfIce(y) & BelongsTo(x,y)))", "all x.(Ice(x) -> DefinesIce(x))", "exists x.(Ice(x) & DefinesObjects(x,Ice))", "all x y.((Ice(x) & Object(y) & MadeOfIce(y)) -> Description(x,y))", "all x.(Ice(x) -> DescriptsMadeOfIce(x))", "all x.(Ice(x) -> (MadeOfIce(x) & DeclaredOnIce(x)))", "all x y.((Ice(x) & InObject(y)) -> Defines(x,y))", "all x y.((Ice(x) & Object(y)) -> MadeOfIce(y))", "all x.(Ice(x) -> (AcquaintsObjects(x) & MadeOfIce(x)))", "all x.(Ice(x) -> (DepictsManyIce(x) | DescriptionOfIce(x)))", "all x y.((Ice(x) & Object(y)) -> DefinesMadeOfIce(x,y))", "all x.(Ice(x) -> Defines(x,y))", "all x y.((Ice(x) & Object(y)) -> DefinedBy(x,y))"]}
{"id": "entailmentbank_validation_62", "nl": "objects in kuiper belt are icy.", "fol": "", "prediction": ["all x.((Object(x) & KuiperBelt(x)) -> Ice(x))", "all x y.((Object(x) & KuiperBelt(y) & InBelt(x,y)) -> Icy(x))", "all x.((Object(x) & KuiperBelt(x)) -> Ice(x))", "all x.((Object(x) & KuiperBelt(x)) -> Ice(x))", "all x.((Object(x) & KiriperBerg(x)) -> Icy(x))", "all x.(KuiperBelt(x) -> Ice(x))", "all x.((Object(x) & KuiperBelt(x)) -> Icy(x))", "all x.((Object(x) & KuiperBelt(x)) -> Ice(x))", "all x.((Object(x) & KuiperBelt(x)) -> Ice(x))", "all x.((Object(x) & KuiperBelt(x)) -> Icy(x))", "all x y.((Object(x) & KuiperBelt(y) & InBelt(y,x)) -> Icy(x))", "all x.((Object(x) & KuiperBelt(x)) -> Icy(x))", "all x.(KuiperBelt(x) -> Ice(x))", "all x.(KuiperBelt(x) -> Icy(x))", "all x.((Subject(x) & KuiperBelt(x)) -> Ice(x))", "all x y.((Object(x) & KuiperBelt(y) & InShower(x,y)) -> Icy(x))"]}
{"id": "entailmentbank_validation_63", "nl": "a comet orbit occurs usually once per 1000 years.", "fol": "", "prediction": ["all x.(CometOrbit(x) -> OccursOnce(x,1000))", "all x.(CommetOrbit(x) -> exists y.(Year(y) & OccursIn(x,y))))", "all x.(CometOrbit(x) -> OccursOncePer1000Years(x))", "all x.(CometOrbitOccursIn(x,1000Years) -> Usually(x))", "all x y.((Comet(x) & Orbit(y)) -> OccursOfPer1000Years(x,y))", "all x.(CometOrbit(x) -> OccursLastPer1000Years(x))", "all x.(CometOrbit(x) -> OccursLastPer1000Years(x))", "all x y.((CometOrbit(x) & Annual(y) & OccursSince(x,y)) -> OccursOncePer1000Years(z))", "all x.(CometOrbit(x) -> (OccursOnce(x,1000)))", "all x.(CometOrbit(x) -> OrdinarilyOccursOncePer1000Years(x))", "all x.(CometOrbit(x) -> TypicallyOccursOnce(x,(1000Years) | 11,000Years(x,10)))", "all x.(CometOrbit(x) -> OccursTwoPer1000Years(x))", "all x y z.((CometOrbit(x) & Years(y) & Period(z)) -> OccursOncePer1000(x,y,z))", "all x.(CometOrbit(x) -> OccursOncePer1000Years(x))", "all x.(CometOrbit(x) -> OccursOncePer1000Years(x))", "all x.(Comet(x) -> OccursInPer1000Years(x))"]}
{"id": "entailmentbank_validation_64", "nl": "a comet is a kind of celestial object.", "fol": "", "prediction": ["all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(CelestialObject(x) -> Comet(x))", "all x.(Comet(x) -> CelestialObject(x))"]}
{"id": "entailmentbank_validation_65", "nl": "comet orbits are elliptical.", "fol": "", "prediction": ["all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x.(CometOrbit(x) -> Elliptical(x))"]}
{"id": "entailmentbank_validation_66", "nl": "comets are the kind of celestial object that has a highly elliptical orbit and has a period of over 1000 years.", "fol": "", "prediction": ["all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & AlmostWinter(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & Over1000YearsPeriod(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & PeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & PeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & Period(x,1000)))", "all x.(Comets(x) -> (CelestialObject(x) & AxialOrbit(x) & Period(x,1000)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & HasPeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEquippedOrbit(x) & PeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & highlyEllipticalOrbit(x) & HasPeriodOver1000Years(x)))", "all x.(Comet(x) -> (IsCelestialObject(x) & HighlyEllipticalOrbit(x) & HasPeriodOver1000Years(x)))", "all x.(Comet(x) -> ((CelestialObject(x) & HighlyEllipticalOrbit(x) & HasPeriodOver(x,1000))))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & HasPeriodOfOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & EllipticalOrbit(x) & PeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & PeriodSupplyOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & PeriodOfOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & HasPeriodOver1000Years(x)))"]}
{"id": "entailmentbank_validation_67", "nl": "the milky way galaxy appears as a glowing band across the night sky.", "fol": "", "prediction": ["all x.(MilkyWay(x) -> AppearsAsGlowingBand(x))", "all x y.((MilkyWearGalaxy(x) & NightSky(y)) -> AppearsAsGlowingBand(x,y))", "all x y.((MilkyTailGalaxy(x) & MilkyMan(y)) -> AppearsAsGlowingBandAcrossNightSky(x))", "all x.(MilkyWay(x) -> AppearsAsGlowingBandAcrossNightSky(x))", "all x.(MilkyWeaveGalaxy(x) -> AppearsAsGlowingBandAcrossNightSky(x))", "all x y.((MilkyWayGalaxy(x) & NightSky(y)) -> AppearsAsGlowingBand(x,y))", "all x.(MilkyWayGalaxy(x) -> AppearsAsGlowingBandAcrossNightSky(x))", "all x.(MilkyWeaveGalaxy(x) -> (AppearsAsGlowingBandAcrossNightSky(x)))", "all x.(MilkyWakeGalaxy(x) -> AppearsAsGriningBandAcrossNightSky(x))", "all x y.((MilkyWearGalaxy(x) & NightSky(y)) -> AppearsAsGlowingBand(x,y))", "all x y.((MilkyHow(x) & NightSky(y)) -> appearsAsGlowingBand(x,y))", "all x.((MilkyTail(x) & GlowingBandAcrossNightSky(x)) -> AppearsAs(x,y))", "all x.(MilkyWayGalaxy(x) -> appearsAsGlowingBandAcrossNightSky(x))", "all x.(MilkyWayGalaxy(x) -> AppearsAsGlowingBandAcrossNightSky(x))", "all x.(MilkyHowGalaxy(x) -> appearsAsGlowingBand(x))", "all x y.((MilkyWayColumn(x) & MilkyWay(y)) -> AppearsAsGlowingBandAcrossNightSky(x,y))"]}
{"id": "entailmentbank_validation_68", "nl": "a student observes a glowing band across the night sky.", "fol": "", "prediction": ["all x y.((Student(x) & GirlingBand(y)) -> ObservesAcrossNightSky(x,y))", "all x y.((Student(x) & GlowingBand(y)) -> ObservesAcrossNightSky(x,y))", "all x y z.((Student(x) & BrighteningBand(y) & NightSky(z)) -> ObservesOvernight(x,y,z))", "all x y.((Student(x) & Student(y)) -> ObservesGlowingBandAcrossNightSky(x,y))", "all x y.((Student(x) & ObservesGlowingBand(x,y)) -> ObservesAcrossNightSky(x,y))", "all x y.((Student(x) & GlowingBand(y)) -> ObservesAcrossNightSky(x,y))", "all x y z.((Student(x) & GlowingBand(y) & NightSky(z)) -> ObservesAcross(x,y,z))", "all x y.((Student(x) & Student(y)) -> ObservesGlowingBand(x,y))", "all x y.((Student(x) & GlowingBand(y)) -> ObservesAcrossNightSky(x,y))", "all x y.((Student(x) & BrighteningBand(y) & NightSky(z)) -> Observes(x,y,z))", "all x y z.((Student(x) & GlowingBand(y) & NightSky(z) & Observes(x,y,z)) -> Overlaps(x,y,z))", "all x y.((Student(x) & (GlowingBand(y) | NightSky(y))) -> Observes(x,y))", "all x y z.((Student(x) & Band(y) & NightSky(z) & Observes(x,y)) -> GlowingAcross(x,y,z))", "all x y.((Student(x) & BrighteningBand(y)) -> ObservesAcrossNightSky(x,y))", "all x.(Student(x) -> ObservesGlowingBand(x))", "all x y z.((Student(x) & BrighteningBand(y) & NightSky(z)) -> Observes(x,y,z))"]}
{"id": "entailmentbank_validation_69", "nl": "the student observes the milky way galaxy at night.", "fol": "", "prediction": ["all x y.((Student(x) & MilkyWeayGalaxy(y)) -> ObservesAtNight(x,y))", "all x.(Student(x) -> ObservesMilkyWeayAtNight(x))", "all x y.((Student(x) & MilkyLongGalaxy(y)) -> ObservesAtNight(x,y))", "all x y.((Student(x) & MilkyWayGalaxy(y)) -> ObservesAtNight(x,y))", "all x.(Student(x) -> ObservesMilkyWeay(x))", "all x y.((Student(x) & MilkyWeayGalaxy(y)) -> ObservesAtNight(x,y))", "all x y.((Student(x) & MilkyWeaver(y)) -> ObservesAtNight(x,y))", "all x y.((Student(x) & MilkyWay(y)) -> ObservesAtNight(x,y))", "all x y z.((Student(x) & MilkyWeayGalaxy(y) & Night(z)) -> Observes(x,y,z))", "all x y.((Student(x) & MilkyWeaver(y)) -> ObservesAtNight(x,y))", "observesMilkyWayGalaxy(Student)", "all x y.((Student(x) & MilkywayGalaxie(y) & Opposite(x,y)) -> ObservesAtNight(x,y))", "all x.(Student(x) -> ObservesMilkyWayGalaxieAtNight(x))", "all x y.((Student(x) & MilkyWay(y)) -> ObservesAtNight(x,y))", "all x.(Student(x) -> ObservesMilkyWayGalaxyAtNight(x))", "all x y.((Student(x) & MilkyWayGalaxy(y) & ObservesAtNight(x,y)) -> MilkyWareGalaxy(x))"]}
{"id": "entailmentbank_validation_70", "nl": "looking at bright objects has a negative impact on the eyes.", "fol": "", "prediction": ["all x y.((BrightObject(x) & Eye(y)) -> NegativeImpact(x,y))", "all x y.((BrightObject(x) & Eyes(y)) -> NegativeImpact(x,y))", "all x y.((BrightObject(x) & LookingAt(x,y)) -> NegativeImpactOnEyes(x))", "all x.(BrightObject(x) -> NegativeImpactOnEyes(x))", "all x y.((BrightObject(x) & Eye(y)) -> NegativeImpact(x,y))", "all x y.((BrightObject(x) & Eyes(y)) -> NegativeImpactOn(x,y))", "all x.(FocusOnBrightObjects(x) -> NegativeImpactOnEyes(x))", "all x.((LooksAtBrightObjects(x) & NegativeImpactOnEyes(x)) -> DarkObjects(x))", "all x.((LookingAtBrightObjects(x) & NegativeImpactOnEyes(x)) -> -EyesReading(x))", "all x y.((BrightObject(x) & Eye(y)) -> NegativeImpact(x,y))", "all x.(BrightObject(x) -> NegativeImpactOnEyes(x))", "all x y.((BrightObject(x) & Eyes(y)) -> NegativeImpactOn(x,y))", "all x.(BrightObject(x) -> NegativeImpactOnEyes(x))", "all x.((LookingAtBrightObjects(x) & NegativeImpactOnEyes(x)) -> LookAtBrightObjects(x))", "all x.(LooksAtBrightObjects(x) -> NegativeImpactOnEyes(x))", "all x.(BrightObjects(x) -> NegativeImpactOnEyes(x))"]}
{"id": "entailmentbank_validation_71", "nl": "the moon is less bright than the sun.", "fol": "", "prediction": ["all x.(Sun(x) -> LessBright(x,Moon))", "all x y.((Moon(x) & Sun(y)) -> LessBright(x,y))", "all x y.((Moon(x) & Sun(y)) -> LessBright(x,y))", "all x y.((Moon(x) & Sun(y)) -> -Bright(x,y))", "all x y.((Moon(x) & Sun(y)) -> LessBright(x,y))", "all x y.((Moon(x) & Sun(y)) -> LessBright(x,y))", "all x y.((Moon(x) & Sun(y)) -> LessLuminous(x,y))", "all x y.((Moon(x) & Sun(y)) -> LessBright(x,y))", "all x y.((Moon(x) & Sun(y)) -> LessBrightThan(x,y))", "all x y.((Moon(x) & Sun(y)) -> LessBrightEnoughToBeLessBrightEnough(x,y))", "all x y.((Moon(x) & Sun(y)) -> LessBright(x,y))", "all x y.((Moon(x) & Sun(y)) -> LessBright(x,y))", "all x y z.((Moon(x) & Sun(y) & Moon(z)) -> LessBright(x,z))", "all x.(Moon(x) -> LessBrightThanSun(x))", "all x y.((Moon(x) & Sun(y)) -> LessBright(x,y))", "(LossBright(Moon) -> LessBright(Moon,Sun,Sun))"]}
{"id": "entailmentbank_validation_72", "nl": "looking at the moon has less of a negative impact on the eyes.", "fol": "", "prediction": ["all x y.((Moon(x) & Eyes(y)) -> LessNegativeImpact(x,y))", "all x.(LooksAtMoon(x) -> LessOfNegativeImpactOnEyes(x))", "all x.((LookingAtMoon(x) & LessDatenativeImpactOnEyes(x)) -> ReachesLossOf(x))", "all x.(LooksAtMoon(x) -> LessNegativeImpactOnEyes(x))", "all x.(LookingAtMoon(x) -> LessOfNegativeImpactOnTheEyes(x))", "all x.(LooksAtMoon(x) -> LessNegativeImpactOnEyes(x))", "all x.(LooksAtMoon(x) -> LessNegativeImpactOnEyes(x))", "all x.((LookingAtMoon(x) & LessNegativeEffectOnEyes(x)) -> LessOfBreakingNegativeEffectOnEyes(x))", "all x y.((LooksAtMoon(x) & Eyes(y)) -> LessNegativeImpact(x,y))", "all x y.((Moon(x) & Eye(y)) -> LessNegativeImpact(x,y))", "all x.(LookingAtMoon(x) -> LessOfAngerImpactOnEyes(x))", "all x.(LookingAtMoon(x) -> LessOfNegativeImpactOnEyes(x))", "all x.(LookingAtMoon(x) -> LessNegativeImpactOnEyes(x))", "all x.(LookingAtMoon(x) -> LessOfNegativeImpactOnEyes(x))", "all x y.((ShoutingAtMoon(x) & Eyes(y)) -> FarLessNegativeImpact(x,y))", "all x.((LookingAtMoon(x) & LessNegativeImpactOnEyes(x)) -> LessSevereImpactOnEyes(x))"]}
{"id": "entailmentbank_validation_73", "nl": "the surface of the earth contains mountains.", "fol": "", "prediction": ["all x.(EarthSurface(x) -> ContainsMountains(x))", "all x y z.((Earth(x) & Surface(y) & Mountain(z)) -> Contains(x,y,z))", "all x y.((EarthSurface(x) & Mountain(y)) -> Contains(x,y))", "all x.((EarthSurface(x) & ContainsMountains(x)) -> HasMountains(x))", "all x.(EarthSurface(x) -> HasMountains(x))", "all x.((EarthSurface(x) & ContainsMountains(x)) -> SiteContents(x,y))", "all x y.((EarthSurface(x) & Mountain(y)) -> Contains(x,y))", "all x.(EarthSurface(x) -> ContainsMountains(x))", "all x.(EarthSurface(x) -> ContainsMountains(x))", "all x y.((Earth(x) & Surface(y) & ContainsMountains(x,y)) -> ContainsMountain(x,y))", "all x.((EarthSurface(x) & ContainsMountains(x)) -> ContainMountains(x))", "all x.(EarthSurface(x) -> ContainsMountains(x))", "all x.(EarthSurface(x) -> ContainsMountains(x))", "all x y.((Surface(x) & Earth(y)) -> ContainsMountains(x,y))", "all x y.((EarthSurface(x) & Mountain(y)) -> Contains(x,y))", "all x.(SurfaceOfEarth(x) -> ContainsMountains(x))"]}
{"id": "entailmentbank_validation_74", "nl": "the surface of the moon contains mountains.", "fol": "", "prediction": ["all x.(Moon(x) -> ContainsMountains(x))", "all x.(MoonSurface(x) -> ContainsMountains(x))", "all x.(MoonSurface(x) -> ContainsMountains(x))", "all x.(MondSurface(x) -> ContainsMountains(x))", "all x.(MoonSurface(x) -> ContainsMountains(x))", "all x y.((Moon(x) & Surface(y)) -> ContainsMountains(x))", "all x.(MoonSurface(x) -> ContainsMountains(x))", "all x.(MoonSurface(x) -> ContainsMountains(x))", "all x y.((Moon(x) & Surface(y)) -> ContainsMountains(x,y))", "all x y.((Moon(x) & Surface(y)) -> ContainsMountains(y,x))", "all x.(MountainSurface(x) -> ContainsMountains(x))", "all x y.((MoonSurface(x) & Moon(y)) -> ContainsMountains(x,y))", "all x.(MoonSurface(x) -> ContainsMountains(x))", "all x.(MountainSurface(x) -> ContainsMountains(x))", "all x.(MoonSurface(x) -> ContainsMountains(x))", "all x.(MoonSurface(x) -> ContainsMountains(x))"]}
{"id": "entailmentbank_validation_75", "nl": "both the surface of the moon and the surface of the earth contain mountains.", "fol": "", "prediction": ["all x y.((SurfaceOfMoon(x) & SurfaceOfEarth(y)) -> ContainsMountains(x,y))", "((SurfaceOfMoon(Moon) & SurfaceOfEarth(Moon)) | SurfaceOfEarth(Earth)) ContainsMountains(Moon,Moon))", "all x y.((Surface(x,y) & Moon(y) & Earth(y)) -> ContainMountains(x,y))", "all x y.((Moon(x) & Earth(y)) -> (ContainMountains(x,y) & ContainMountains(x,y)))", "all x.((Moon(x) & Earth(x)) -> ContainsMountains(x))", "all x y z.((Moon(x) & Earth(y) & MoonSpeed(z)) -> ContainsMassages(y,z))", "all x y.((MoonSurface(x) & EarthSurface(y)) -> ContainsMountains(x,y))", "all x.(SurfaceOfMoon(x) and SurfaceOfEarth(x)) -> ContainsMountains(x))", "(ContentsMountains(Moon) & ContainsMountains(Moon))", "all x.((Moon(x) & Earth(x)) -> ContainsMountains(x))", "exists x y.(MoonSurface(x) & EarthSurface(y) & ContainsMountains(x,y))", "all x y.((MoonSurface(x) & EarthSurface(y)) -> ContainsMountains(x,y))", "all x y.((LunarSurface(x) & EarthSurface(y)) -> ContainsMountains(x,y))", "all x y z.((MoonSurface(x) & EarthSurface(y) & Mountains(z)) -> Contains(x,y,z))", "all x y.((MoonSurface(x) & EarthSurface(y)) -> ContainsMountains(x,y))", "all x y z.((MoonSurface(x) & EarthSurface(y) & Mountains(z)) -> Contains(x,y))"]}
{"id": "entailmentbank_validation_76", "nl": "the asteroid belt is located between mars and jupiter.", "fol": "", "prediction": ["all x y z.((AsteroidBelt(x) & Mars(y) & Jupiter(z)) -> LocatedBetween(x,y,z))", "all x y z.((AsteroidBelt(x) & Mars(y) & Jupiter(z)) -> LocatedBetween(x,y,z))", "all x.(AsteroidBend(x) -> (Mars(x) | Jupiter(x)))", "all x.(AsteroidBelt(x) -> (LastsBetweenMarsAndJupiter(x)))", "all x y z.((AsteroidBelt(x) & Mars(y) & Jupiter(z)) -> ConnectsMovement(x,y,z))", "all x.(AsteroidBelt(x) -> (LocatedBetweenMarsAndJupiter(x)))", "all x.(AsteroidBelt(x) -> (Mars(x) | Jupiter(x)))", "all x.(AsteroidBelt(x) -> (Mars(x) & Jupiter(x)))", "all x y.((AsteroidBelt(x) & Mars(y)) -> LocatedBetween(x,y,z))", "all x.(AsteroidBelt(x) -> (LocatedBetweenMarsAndJupiter(x)))", "all x y z.((Asteroid(x) & Mars(y) & Jupiter(z)) -> LocatedBetween(x,y,z))", "all x.(AsteroidBelt(x) -> (LocatedBetweenMarsAndJupiter(x)))", "all x.(AsteroidBelt(x) -> (Mars(x) | Piter(x)))", "all x.(Asteroid(x) -> exists y.(Mars(y) | Jupiter(y))))", "all x.(AsteroidBelt(x) -> (LocatedBetweenMarsAndJupiter(x)))", "all x y z.((AsteroidBear(x) & Mars(y) & Jupiter(z)) -> LocatesBetween(x,y,z))"]}
{"id": "entailmentbank_validation_77", "nl": "the asteroid belt contains the largest concentration of asteroids in the solar system.", "fol": "", "prediction": ["all x.(AsteroidBelt(x) -> LargestConcentrationOfAsteroidsInSolarSystem(x))", "all x y.((AsteroidBelt(x) & System(y) & LargestConcentration(x,y)) -> ContainsAsteroids(x,y))", "the largest concentrations of asteroids in the solar system.", "the asteroidbelt containsLargestConcentrationOfAsteroidsInSolarSystem(a,s))", "all x.(AsteroidBelt(x) -> ContainsLargestConcentrationOfAsteroids(x))", "all x.(AsteroidBelt(x) -> ContainsLargestConcentrationOfAsteroids(x))", "all x.(AsteroidBelt(x) -> ContainsMostAsteroidsInSolarSystem(x))", "all x.(AsteroidBelt(x) -> ContainsLargestConcentrationOfAsteroids(x))", "all x.(AsteroidBelt(x) -> ContainsLargestConcentrationOfAsteroidsInSolarSystem(x))", "all x.(AsteroidBelt(x) -> ContainsLargestConcentrationOfAsteroids(x))", "all x.(AsteroidBelt(x) -> ContainsLargestConcentrationOfAsteroids(x))", "all x.(AsteroidBelt(x) -> ContainsLargestConcentrationOfAsteroidsInSolarSystem(x))", "all x.(AsteroidBelt(x) -> ContainsLargestConcentrationOfAsteroids(x))", "all x y.((AsteroidBelt(x) & Aceroid(y) & SolarSystem(x)) -> LargestConcentrationInSolarSystem(x,y))", "all x y z.((AsteroidBelt(x) & Asteroid(y) & SolarSystem(z)) -> LargestConcentrationOf(x,y,z))", "all x.(AsteroidBelt(x) -> ContainsLargestAsteroidConcentration(x))"]}
{"id": "entailmentbank_validation_78", "nl": "the asteroid belt that contains the most asteroids is located between mars and jupiter.", "fol": "", "prediction": ["all x y.((AsteroidBelt(x) & Mars(y) & Jupiter(y)) -> IsLocatedBetween(x,y,x))", "all x y.((AsteroidBelt(x) & Asteroids(y) & Contains(x,y)) -> (BetweenMars(x) & BetweenJupiter(x)))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> (BetweenMarsAndJupiter(x)))", "all x.(InAsteroidBelt(x) -> (ContainsMostAsteroids(x) & Mar(x) & Jupiter(x)))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> (Tree(x,Mars) & Tread(x,Jupiter)))", "all x y z.((AsteroidBelt(x) & Asteroids(y) & Mars(z)) -> LocatedBetween(x,y,z))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> LocatedBetweenMarsAndJupiter(x))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> (LocatedBetweenMarsAndJupiter(x)))", "all x y.((AsteroidBelt(x) & Asteroid(y) & ContainingMostAsteroids(x)) -> (BetweenMarsAndJupiter(y)))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> LocatesBetweenMarsAndJupiter(x))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> LocatedBirth(x,Mars) & Jipiter(x))", "all x.((AsteroidBelt(x) & MostAsteroids(x)) -> (BetweenMarsAndJupiter(x)))", "all x.((AsteroidBelt(x) & MostAsteroids(x)) -> (BetweenMarsAndJupiter(x)))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> locatedBetweenMarsAndJupiter(x))", "all x.((AsteroidBelt(x) & MostAsteroids(x)) -> (AeroplanetaryBelt(x) & LocatedBetweenMarsAndJupiter(x)))", "all x y z.((AsteroidBelt(x) & Asteroids(y) & Mars(z)) -> (Restaurant(x,y,z) & Between(x,y) & Jupiter(x)))"]}
{"id": "entailmentbank_validation_79", "nl": "the sun is average in temperature for a star in our galaxy.", "fol": "", "prediction": ["all x y.((Sun(x) & Star(y)) -> AverageTemperature(x,y))", "all x.(Sun(x) -> AverageTemperature(x))", "all x y z of w.((Sun(x) & Star(y) & Galaxy(z) & InGalaxy(w,z,w)) -> AverageTemperature(x,y,z,w))", "all x y.((Sun(x) & Star(y) & InGalaxy(x,y)) -> AverageTemperatureInGalaxy(x,y))", "all x y z.((Sun(x) & Star(y) & Galaxy(z)) -> AverageTemperatureIngalaxy(x,y,z))", "all x y z.((Sun(x) & Star(y) & Galaxy(z) & AverageTemperature(x,y,z)) -> AverageInTemperature(x,y))", "all x.((Sun(x) & InGalaxies(x)) -> AverageTemperature(x))", "all x.(Sun(x) -> AverageInTemperature(x))", "all x.((Sun(x) & Star(y) & Galaxy(z)) -> AverageTemperature(x,y,z))", "all x.(OfSun(x) -> AverageTemperature(x))", "all x y z.(AverageTemperature(x & Sun(y) & Star(p) & InLagrangianGalaxy(z)) -> AverageTemperatureInSun(y,p))", "all x.(Sun(x) -> AverageTemperatureForStarInGalaxies(x))", "all x y.((Sun(x) & Star(y)) -> AverageTemperatureInGalaxy(x,y))", "all x y.((Sun(x) & Star(y) & Galaxy(y)) -> AverageTemperature(x,y))", "all x y.((Sun(x) & Star(y)) -> AverageTemperature(x,y))", "all x y.((Sun(x) & Star(y) & InGalaxy(x,y)) -> AverageTemperature(x,y))"]}
{"id": "entailmentbank_validation_80", "nl": "the sun is average in size for a star in our galaxy.", "fol": "", "prediction": ["all x y.((Sun(x) & Star(y) & InGalaga(x,y)) -> AverageSize(x,y))", "all x y.((Sun(x) & Star(y)) -> AverageSizeFor(x,y))", "all x.(Sun(x) -> AverageSize(x,star,galaxy))", "all x y z.((Sun(x) & Star(y) & Galaxy(z) & AverageSizeSize(x,y)) -> InColumn(x,z))", "all x y.((Sun(x) & Star(y)) -> AverageSize(x,y))", "all x y.((Sun(x) & Star(y)) -> AverageSize(x,y))", "all x.(Sun(x) -> AverageSize(x,y))", "all x.((Sun(x) & NormalSize(x)) -> InMygalaxy(x))", "all x.(Sun(x) -> AverageSizeInGalaxies(x))", "all x y.((Sun(x) & Star(y) & InGalaxy(x,y)) -> AverageSize(x,y))", "all x y z.((Sun(x) & Star(y) & Galaxy(z)) -> AverageSize(x,y,z))", "all x.(Sun(x) -> AverageSizeInGalaxies(x))", "all x.((Sun(x) & Star(x)) -> AverageSizeOfSatellite(x))", "all x y.((Sun(x) & StarInGalaxy(y)) -> AverageInSize(x,y))", "all x.((Sun(x) & StarInGalaxy(x)) -> AverageSizeInGalaxy(x))", "all x y.((Sun(x) & Star(y) & InGalagasian(y,x)) -> AverageSize(x,y))"]}
{"id": "entailmentbank_validation_81", "nl": "the sun is average in siza and average in temperature in our galaxy.", "fol": "", "prediction": ["all x y z.((Sun(x) & Siza(y) & Galaxy(z)) -> (AverageIn(x,y) & AverageIn(x,z)))", "all x.(Sun(x) -> (AverageInSiza(x) & AverageInTemperature(x)))", "all x.(Sun(x) -> (AverageInSiza(x) & AverageInTemperature(x) & InGalaxy(x)))", "all x y.((Sun(x) & Galaxy(y)) -> (AverageInSiza(x) & AverageInTemperature(x)))", "all x y.((Sun(x) & Galaxy(y)) -> (AverageInSiza(x) & AverageInTemperature(x)))", "all x.(Sun(x) -> (AverageInSiza(x) & AverageInTemperature(x)))", "all x.(Sun(x) -> (averageLimits(x,siza) & AverageTemperature(x,satellites)))", "(AverageSun(Siza) | AverageTemperatureInGalaxy(Siza)))", "all x y.((Sun(x) & Galaxy(y)) -> (AverageInSiza(x) & AverageInTemperature(x,y)))", "all x y.((Sun(x) & siza(y)) -> Average(x,y)) & ((Sun(x) & siza(x)) | AverageTemperature(x,y))))", "all x.(Sun(x) -> (AverageAtSiza(x) & AverageAtTemperature(x)))", "(AverageSunInSiza(sun) & AverageTemperatureInGalaxie(sun))", "all x.(Sun(x) -> (AverageInSiza(x) & AverageInTemperatureInSiza(x)))", "all x y z.((Sun(x) & Sense(y) & Galaxy(z) & AverageAtomsIn(x,y)) -> (AtomsIn[x,z) & AverageAtomsIn(x,z)))", "all x.(Sun(x) -> (AverageInSiza(x) & AverageInTemperature(x)))", "most of our galaxy's solar system is siza-evolving(sun) & siza-evolving(sun) & aegistsAm\u00e9lior(sun))"]}
{"id": "entailmentbank_validation_82", "nl": "as the mass of a celestial object decreases, the surface gravity of that celestial object weakens.", "fol": "", "prediction": ["all x y z.((CelestialObject(x) & Mass(y) & Mass(z) & Decreases(y,z)) -> WeaksSurfaceGravity(x,y))", "all x.((CelestialObject(x) & MassDecreases(x)) -> SurfaceGravityWeakens(x))", "all x y.((CelestialObject(x) & MassDecreases(x)) -> SurfaceGravityWeaks(x,y))", "all x y.((CelestialObject(x) & DecreasesMass(x) & Curves(y)) -> WeakenedSurfaceGravity(x,y))", "all x.((CelestialObject(x) & MassDecreases(x)) -> SurfaceGravityWeakens(x))", "all x y.((CelestialObject(x) & MassDecrease(x)) -> SurfaceGravityWickens(x))", "all x y.((CelestialObject(x) & MassDecrease(x,y)) -> SurfaceGravityWeakens(x))", "all x y.((CelestialObject(x) & MassDecrease(x)) -> SurfaceGravityWeakens(x,y))", "all x.(DecreasesMassOfCelestialObject(x) -> WeakensSurfaceGravity(x))", "all x y.((CelestialObject(x) & DecreasedMass(x)) -> WeakensSurfaceGravity(x,y))", "all x.((CelestialObject(x) & MassDecrease(x)) -> SurfaceGravityWeakens(x))", "all x y.((CelestialObject(x) & MassDecrease(x) & SurfaceGravityWeakens(y)) -> Decline(x,y))", "all x y.((CelestialObject(x) & Mass(y) & Demonstrates(x,y)) -> SheathesSurfaceGravity(x,y))", "all x y.((CelestialObject(x) & MassDecreases(x) & SurfaceGravityWeakens(x)) -> IncreasesMass(x,y))", "all x y.((CelestialObject(x) & CelestialObject(y) & MassDecreases(x,y)) -> SurfaceGravityWeakens(x,y))", "all x y.((CelestialObject(x) & MassDecrease(x)) -> SurfaceGravityWeakened(x,y))"]}
{"id": "entailmentbank_validation_83", "nl": "as the force of gravity decreases, the weight of the object will decrease.", "fol": "", "prediction": ["all x.(DecreasesForceOfGravity(x) -> WeightDecrease(x))", "everything x y.((ForceOfGravity(x) & Object(y) & Encouraging(x,y)) -> WeightDecreases(y))", "all x y.((GravityFrequency(x) & Object(y) & DecreasesForceOfGravity(x)) -> DecreasedWeight(y))", "all x.((Furniture(x) & ReducesForceOfGravity(x)) -> WeightDecrease(x))", "all x.(DecreasedForceOfGravity(x) -> WeightDecrements(x))", "all x y.((Frequency(x) & Motion(y)) -> WeightDecrease(x,y))", "all x y.((ForceOfGravity(x) & Object(y) & DecreasesForceOfGravity(x,y)) -> DecreasesWeight(x,y))", "all x.(Surface(x) -> -AsGravityDecreasesForceBetweenCenters(x))", "all x y.((ForceOfGravity(x) & Object(y)) -> DecreasesWeight(y))", "all x y.(((ForceOfGravity(x) & TheObject(y)) -> DecreasesWeight(x,y))", "all x y.((Object(x) & ForceOfGravity(y) & Decreases(x,y)) -> DecreasesWeight(x,y))", "Likewise, as ForceOfGravityDecreases, WeightDecreases.", "all x y.((Word(x) & ForceOfGravity(y) & DecreasesForceOfGravity(y)) -> DecreasesWeight(x,y))", "all x y.((Other(x) & ForceOfGravity(y)) -> ReducesWeight(x,y))", "all x.((GravityDecrease) & WeightDecrease(x)) -> ObjectDecrease(x))", "all x y.((Function(x) & Gravity(y) & Decreases(x,y)) -> WeightDecreases(x,y))"]}
{"id": "entailmentbank_validation_84", "nl": "as the mass of a celestial object decreases, the weight of an object on that celestial object will decrease.", "fol": "", "prediction": ["all x y.((CelestialObject(x) & MassDiminishes(x,y)) -> WeightDecreases(x,y))", "all x y.((CelestialObject(x) & MassDecrease(x) & BodyMassDecrease(y)) -> WeightDecrease(y))", "all x y z.((CelestialObject(x) & Mass(y) & Weight(z)) -> DecreasesMass(x,y,z))", "all x y.((CelestialObject(x) & Mass(x) & Decreases(x)) -> WeightDecreases(y))", "all x y z.((CelestialObject(x) & MassDecrease(x) & WeightDecrease(y) & Object(z)) -> Decreases(z))", "all x.(DecreasesMass(x) -> WeightDecreasesOnCelestialObject(x))", "all x y.((CelestialObject(x) & MassDecrease(x,y)) -> WeightDecrease(x,y))", "all x y.((CelestialObject(x) & CelestialObject(y) & MassDecreases(x,y)) -> WeightDecrease(y,x))", "all x.((CelestialObject(x) & MassDecreaseAsDecrease(x)) -> WeightDecreaseAtCelestialObject(x))", "all x y.((CelestialObject(x) & CelestialObject(y)) -> MassDecreases(x,y))", "all x y.((CelestialObject(x) & CelestialObject(z) & MassDecreases(x,y)) -> WeightDecreases(x,z))", "all x y z.((CelestialObject(x) & Mass(y) & WeightOn(z)) -> MassDecreases(x,y))", "all x.((CelestialObject(x) & MassDecrease(x)) -> WeightDecrease(x))", "all x y.((CelestialObject(x) & CelestialObject(y) & DecreasesMass(x,y)) -> DecreasesWeight(x,y))", "all x y.((CelestialObject(x) & MassDecreases(x,y)) -> WeightDecreases(y,z))", "all x y.((CelestialObject(x) & CelestialObject(y) & MassDecreases(x)) -> WeightDecrease(y))"]}
{"id": "entailmentbank_validation_85", "nl": "the earth has more mass than the moon.", "fol": "", "prediction": ["all x y.((Earth(x) & Moon(y)) -> MoreMass(x,y))", "all x y.((Earth(x) & Moon(y)) -> MoreMass(x,y))", "exists x.(Earth(x) & Moon(x) & MoreMass(x,Earth,Moon))", "all x y z.((Earth(x) & Moon(y) & Earth(z)) -> ContainsMoreMass(x,z))", "all x y.((Earth(x) & Moon(y)) -> MoreMass(x,y))", "all x.(Earth(x) -> MoreMass(x,y))", "all x.((Earth(x) & Moon(y)) -> MoreMass(x,y))", "all x y.((Earth(x) & Moon(y)) -> HasMoreMass(x,y))", "(MoreMass(Earth) -> MoreMass(Earth,Moon)))", "all x y.((Earth(x) & Moon(y)) -> MoreMassTo(x,y))", "all x y.((Earth(x) & Moon(y)) -> MoreMass(x,y))", "exists x.(Earth(x) & HasMoreMass(x,y))", "all x y z.(( Earth(x) & Moon(y) & Mass(z)) -> Mass(x,y,z))", "all x y.((Earth(x) & Moon(y)) -> MoreMass(x,y))", "all x y.((Earth(x) & Moon(y)) -> HasMoreMass(x,y))", "all x y.((Earth(x) & Moon(y)) -> HasMoreMass(x,y))"]}
{"id": "entailmentbank_validation_86", "nl": "an object weighs more on earth than on the moon because earth has more mass than the moon.", "fol": "", "prediction": ["all x y.((Object(x) & Earth(y) & Moon(y)) -> WeighsMore(x,y,y))", "all x.((Object(x) & WeighsMoreOnEarth(x)) & WeighsMoreOnMoon(x))", "all x y.((Object(x) & Earth(y) & Moon(z)) -> WeighsMore(x,y,z))", "all x y.((Object(x) & Earth(y) & Moon(z)) -> WeighsMore(x,y,z))", "all x y.((Object(x) & Earth(y) & Moon(z)) -> WeighsMore(x,y,z))", "all x y z.(Weigh(x,y) -> (Object(x) & Object(z) & Earth(y) & Moon(z) & EarthMass(y) & MoreMass(z)))", "all x y.((Object(x) & Earth(y) & Moon(z)) -> WeighsMore(x,y,z))", "all x y.((Object(x) & Earth(y) & Moon(z) & HasMoreMass(x,y,z)) -> WeighsMore(x,y))", "all x y.((Object(x) & Earth(y) & Moon(z) & MoreMass(x,y)) -> WeighsMore(x,y,z))", "all x y.((Object(x) & Earth(y) & Moon(z) & MoreMass(x,y)) -> WeighsMore(x,y,z))", "all x y.((Object(x) & Earth(y) & Moon(z)) -> WeighsMoreBetween(x,y,z))", "all x y.((Object(x) & Earth(y) & Moon(z)) -> WeighsMore(x,y,z))", "all x y z.((Object(x) & Earth(y) & Moon(z)) ->WeighsMoreOn(x,y,z))", "all x y.((Object(x) & Earth(y) & Moon(y)) -> WeighsMore(x,y))", "all x y.((Object(x) & Earth(y) & Moon(z)) -> WeighsMore(x,y,z))", "all x y.((Object(x) & Earth(y)) -> WeighsMoreOn(x,y))"]}
{"id": "entailmentbank_validation_87", "nl": "less is the opposite of more.", "fol": "", "prediction": ["all x.(Least(x) -> TheOpposeOfMore(x))", "all x.(LessAndMore(x) -> OppositeOfMore(x))", "all x.(LessThanMore(x) -> OppositeOfMore(x))", "all x.(Less(x) -> OppositeOfMore(x))", "all x.(LessThin(x) -> OppositeOfMain(x))", "all x y.((Lower(x) & More(y)) -> OppositeOf(x,y))", "all x.(Less(x) -> OppositeOfMore(x))", "all x.((Less(x) & More(x)) -> OppositeOf(x,y))", "all x.(LessIsOppositeOfMore(x) -> OppositeOfMore(x))", "all x.(Less(x) -> OppositeOfMore(x))", "all x.(LessIsTooOppositeOf(x,More))", "all x.(Less(x) = OppositeOfMore(x))", "all x.(Less(x) -> OppositeOfMore(x))", "all x.(Less(x) -> OppositeOfMore(x))", "all x.(Lessis(x) -> TheOppositeOfMore(x))", "all x.(Less(x) -> OppositeOfMore(x))"]}
{"id": "entailmentbank_validation_88", "nl": "an object will weigh less on the moon than on the earth because the moon has less mass than the earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y) & Moon(x,y)) -> WeighsLess(x,y))", "all xi y.((Object(x) & Moon(y) & Earth(z)) -> WeighLikelsLess(x,y,z))", "all x y.((Object(x) & Moon(y) & Earth(z)) -> WeighLess(x,y,z))", "all x y z.((Object(x) & Moon(y) & Earth(z) & HasLessMassToEarth(x,y,z)) -> WeighLessOn(x,y,z))", "all x y.(Word(x) & Moon(y) & Weight(x,y) -> WeighsMinor(x,y))", "all x y.((Object(x) & Moon(y) & Earth(y)) -> WeighsLess(x,y))", "all x y.((Object(x) & Moon(y) & Earth(y)) -> WeighLess(x,y))", "all x y z.((Object(x) & Moon(y) & Earth(z)) -> WeighsLessOn(x,y,z))", "all x y z.((Moon(x) & Earth(y) & Moon(z)) -> WeighsLessWeighing(x,y,z))", "all x.((Moon(x) & Earth(x)) -> WeighLess(x,y))", "all x.((Moon(x) & Earth(x) & MoonLessMass(x,y)) -> WeighsLessOn(x,y))", "all x y z.((Moon(x) & Earth(y) & Moon(z) & -Math(z) & Earth(z)) -> WeighsLess(x,y,z))", "all x y.((Object(x) & Moon(y) & Earth(z) & HasLessMass(x,y)) -> WeighsLess(x,z))", "all x y z.((Moon(x) & Earth(y) & Moon(z) & HasLessMassThan(z,y,z)) -> WeighsLess(x,y))", "all x y.((Moon(x) & Earth(y) & Moon(x,y)) -> WeighsLessOn(x,y))", "all x y.((Object(x) & Moon(y) & Earth(y)) -> WeighsLess(x,y))"]}
{"id": "entailmentbank_validation_89", "nl": "an astronaut is a kind of object.", "fol": "", "prediction": ["all x.(Astronaut(x) -> IsObject(x))", "all x.(Astronaut(x) -> Object(x))", "all x.(Astronaut(x) -> IsObject(x))", "all x.(Astronaut(x) -> Object(x))", "all x.(Astronaut(x) -> Object(x))", "all x.(Astronaut(x) -> Object(x))", "all x.(Astronaut(x) -> Object(x))", "all x.(Astronaut(x) -> Object(x))", "all x.(Astronaut(x) -> Object(x))", "all x.(Astronaut(x) -> Object(x))", "all x.(Astronaut(x) -> Object(x))", "all x.(Astronaut(x) -> IsObject(x))", "exists x.(Astronaut(x) & Object(x))", "all x.(Astronaut(x) -> IsObject(x))", "all x.(Astronaut(x) -> Object(x))", "all x.(Astronaut(x) -> Object(x))"]}
{"id": "entailmentbank_validation_90", "nl": "an astronaut will weigh less on the moon than on earth because the moon has less mass than the earth.", "fol": "", "prediction": ["all x y.((Astronaut(x) & Moon(y) & Earth(y)) -> WeighsLess(x,y))", "all x y.((Astronaut(x) & Moon(y) & Earth(z)) -> WeighLess(y,z))", "all x y.((Astronaut(x) & Moon(y)) -> WeighlessOn(x,y))", "all x y z.((Astronaut(x) & Moon(y) & Earth(z) & InMoon(x,y,z)) -> WeighsLeven(x,y,z))", "all x y z.((Astronaut(x) & Moon(y) & Earth(z)) -> WeighsLess(x,y,z))", "all x y.((Astronaut(x) & Moon(y) & Earth(y)) -> WeighsLessOn(x,y))", "all x y.((Astronaut(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighsLessOn(x,y,z))", "all x y.((Astronaut(x) & Moon(y) & Earth(y)) -> WeighLess(x,y))", "all x y.((Astronaut(x) & Moon(y) & Earth(y)) -> WeighLessOn(x,y))", "all x y.((Astronaut(x) & Moon(y) & Earth(y)) -> WeighsLessOn(x,y))", "all x y.((Astronaut(x) & Moon(y) & Earth(y)) -> WeighsLessThan(x,y))", "all x y.((Airplane(x) & Moon(y)) -> WeighLessInMoonThanEarth(x,y))", "all x y z.((Astronaut(x) & Moon(y) & Earth(z)) -> WeighsLessOn(x,y,z))", "all x y.((Astronaut(x) & Moon(y) & Earth(z)) -> WeighsLessOn(x,y))", "all x y.((Astronaut(x) & Moon(y) & Earth(z)) -> WeighsLess(x,y,z))", "all x y.((Astronaut(x) & Moon(y) & Earth(z)) -> WeighLessOn(x,y,z))"]}
{"id": "entailmentbank_validation_91", "nl": "using a telescope to photograph solar events requires a light filter.", "fol": "", "prediction": ["all x.((ToPhotographSolarEvents(x) & UsesTelescope(x)) -> RequiresLightFilter(x))", "all x y.((Telescope(x) & SolarEvent(y)) -> RequiresLightFilter(x,y))", "all x y.((Telescope(x) & SolarEvent(y) & Photograph(x,y)) -> RequiresLightFilter(x))", "all x y.((Telescope(x) & SolarEvent(y)) -> RequiresLightFilter(x))", "all x.((Telescope(x) & PhotographSolarEvents(x)) -> RequiresLightFilter(x))", "all x.((UsingTelescope(x) & PhotogalacticEvents(x)) -> RequiresLightFilter(x))", "all x.((Telescope(x) & PhotographSolarEvents(x)) -> RequiresLightFilter(x))", "all x y.((Telescope(x) & PhotographSolarEvents(y)) -> RequiresLightFilter(x))", "all x.((Telescope(x) & PhotographSolarEvents(x)) -> RequiresLightFilter(x))", "all x.((Telescope(x) & PhotographsSolarEvents(x)) -> RequiresLightFilter(x))", "all x.((Telescope(x) & PhotographSolarEvents(x)) -> RequiresLightFilter(x))", "all x.((Telescope(x) & Photograph(x,SolarEvents)) -> RequiresLightFilter(x))", "all x.((Telescope(x) & PhotographsSolarEvents(x)) -> RequiresLightFilter(x))", "all x y z.((Telescope(x) & SolarEvent(y) & Photo(z)) -> UsesLightFilter(x))", "all x.((Telescope(x) & PhotographSolarEvents(x)) -> RequiresLightFilter(x))", "all x.((ProjectingSolarEvents(x) & UsesTelescope(x)) -> RequiresLightFilter(x))"]}
{"id": "entailmentbank_validation_92", "nl": "a solar flare is a kind of solar event.", "fol": "", "prediction": ["all x.(SolarFlash(x) -> SolarEvent(x))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x y.((SolarFlash(x) & SolarEvent(y)) -> A TypeOf(x,y))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x y z.((SolarFlash(x) & Sunlight(y) & Event(z)) -> SolarEvent(x,y,z))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x.(SolarFlash(x) -> SolarEvent(x))"]}
{"id": "entailmentbank_validation_93", "nl": "a solar prominence is a kind of solar event.", "fol": "", "prediction": ["all x.(SolarProminence(x) -> SolarEvent(x))", "all x.(SolarProfessement(x) -> SolarEvent(x))", "all x.(SolarProminence(x) -> SolarEvent(x))", "all x.(SolarProminence(x) -> SolarEvent(x))", "all x.(SolarProminence(x) -> SolarEvent(x))", "all x y.((SolarProminence(x) & SolarEvent(y)) -> SolarEvent(x,y))", "all x.(SolarProminence(x) -> SolarEvent(x))", "all x.(SolarProminence(x) -> SolarEvent(x))", "all x.(SolarProminence(x) -> SolarEvent(x))", "all x.(SolarProminence(x) -> SolarEvent(x))", "all x.(SolarProminence(x) -> SolarEvent(x))", "all x.(SolarProminence(x) -> SolarEvent(x))", "all x.(SolarPredominance(x) -> SolarEvent(x))", "all x.(SolarProminence(x) -> SolarEvent(x))", "all x.(SolarProminence(x) -> SolarEvent(x))", "all x.(SolarProminence(x) -> SolarEvent(x))"]}
{"id": "entailmentbank_validation_94", "nl": "using a telescope to photograph a solar prominence and a solar flare requires a light filter.", "fol": "", "prediction": ["(all x y.((Telescope(x) & SolarProminence(y)) -> Photograph(x,y)) & all z w.((SolarFlare(z) & LightFilter(w)) -> Require(z,w)))", "all x y.((Telescope(x) & SolarProfubile(y) & SolarFlash(z)) -> (Photographs(x,y) & RequiresLightFilter(z)))", "all x y.((Telescope(x) & SolarProminence(y)) -> (Photograph(x,y) & ReplaceLightFilter(x)))", "all x y.((Telescope(x) & SolarProminence(y) & SolarFlash(y)) -> (Photographs(x,y) & RequiresLightFilter(x)))", "(all x.((Telescope(x) & PhotocopySolarProminence(x)) | (SolarFlash(x) & RequiresLightFilter(x))))", "all x y.((Telescope(x) & SolarProminence(y)) -> Photographs(x,y)) & (SolarFlame(x) -> RequiresLightFilter(x)))", "all x y z.((Telescope(x) & SolarProminence(y) & SolarFlare(z)) -> (PhotographsWith(x,y) & RequiresLightFilter(x,z)))", "all x y.((Telescope(x) & SolarProminence(y) & SolarFlare(x)) -> (Photographs(x,y) & RequiresLightFilter(x)))", "all x y.((Telescope(x) & SolarProminence(y)) -> Photograph(x,y)) & ((SolarFlame(x,y) | SunlightFilter(x))) -> Photograph(x,y)))", "all x y.((Telescope(x) & SolarProminence(y) & SolarFlash(z)) -> (RequiresLightFilter(z) & Photographs(x,y)))", "all x y z.((Telescope(x) & SolarProminence(y) & SolarFlower(z)) -> (Photographs(x,y) & RequiresLightFilter(x,z)))", "all x y ((Telescope(x) & SolarProminence(y)) -> Photographing(x,y)) & ((SolarFlare(x) & LightFilter(x)) -> Requires(x,y)))", "all x y.((Telescope(x) & SolarProminence(y)) -> (Photographs(x,y) & RequiresLightFilter(x,y)))", "(all x.((Telescope(x) & SolarProminence(x)) -> Photographs(x)) & all y.((SolarFlash(y) & LightFilter(y)) -> RequiresDicing(y)))", "all x y z.((Telescope(x) & SolarProminence(y) & SolarFlare(z)) -> (Photograph SolarProminence(x,y) & RequiresLight(z)))", "all x y.((Telescope(x) & SolarFlash(y)) -> (PhotographsSolarProminence(x,y) & RequiresLightFilter(y,z)))"]}
{"id": "entailmentbank_validation_95", "nl": "if something is required for something else then that something allows that something else.", "fol": "", "prediction": ["all x.((Required(x) & Allows(x,y)) -> Enables(x,y))", "all x.((RequiredForSomething(x) & AllowsAnything(x)) -> Allows(x))", "exists x.(Provides(x,y) & RequiredFor(y,x))", "all x y z.((RequiredFor(x,y) & (AndIsRequiredFor(y,z) & Does(x,y,z)) & Other(x)) -> Allows(x,y))", "all x.((RequiredForWhatever(x) & Allows(x,something)) -> Allows(x,something))", "all x.((RequiredFor(x) & NotRequiredFor(x)) -> Allows(x,y))", "all x.((RequiredFor(x) & Allows(x,ExistingThan(x)) -> Allows(x,existingThan(x))", "all x y.((RequiredFor(x,y) & RequiredFor(y,x)) -> Allows(x,y))", "all x y z.((RequiredFor(x,y) & WhatAlrights(z)) -> Allows(x,z))", "all x.(RequiredFor(x) -> AllowsAlternatives(x))", "all x.((RequiredFor(x,x) & Allows(x,x)) -> Allows(x,y))", "all x y z.((RequiredFor(x,y) & OtherPersonal(z)) -> Allows(x,y,z))", "all x y.((RequiredFor(x,y) & Something(y)) -> Allows(x,y))", "all x y.((RequiredFor(x,y) & Other(y)) -> Allows(x,y))", "all x y.((Order(x) & RequiredBy(x,y)) -> Allows(x,y))", "all x.((RequiredForAnother(x) & AllowsAnother(x)) -> RequiresAndAuthorizesAnother(x))"]}
{"id": "entailmentbank_validation_96", "nl": "detailed observation of celestial objects requires a telescope.", "fol": "", "prediction": ["all x y.((CelestialObject(x) & Telescope(y)) -> Requires(x,y))", "all x.(DetailedObservationOfCelestialObjects(x) -> RequiresTelescope(x))", "all x.((DetailedObservationOfCelestialObjects(x) & Telescope(x)) -> Requires(x,telscope,nix))", "all x.((DetailedObservation(x) & CelestialObject(x)) -> RequiresTelescope(x))", "all x y.((CelestialObject(x) & Telescope(y)) -> Requires(x,y))", "all x.((DetailedObservationOfCelestialObjects(x) & RequiresTelescope(x)) -> Requires(x))", "all x.(DepthObservationOfCelestialObjectsRequiresTelescope(x) -> RequiresTelescope(x))", "all x y.((RequiresTelescope(x) & CelestialObject(y)) -> DeepObservation(x,y))", "all x.(DetailedObservationOfCelestialObjects(x) -> RequiresTelescope(x))", "all x.((CelestialObject(x) & Telescope(x)) -> RequiresDetailledObservation(x))", "all x.(DetailedObservationOfCelestialObjects(x) -> RequiresTelescope(x))", "all x y z.((ExplicitObservationOfCelestialObjects(x,y) & Telescope(z)) -> Requires(x,z))", "all x y.((CelestialObject(x) & Telescope(y)) -> Requires(x,y))", "all x y z.((RequiresTelescope(x) & CelestialObject(y) & Telescope(z) & ExtensiveObservation(y,z)) -> Requires(x,y))", "all x.(DetailedObservationOfCelestialObjects(x) -> RequiresTelescope(x))", "all x.(DetaillableObservationOfCelestialObjectsRequiresTelescope(x))"]}
{"id": "entailmentbank_validation_97", "nl": "telescopes allow the detailed observation of celestial objects.", "fol": "", "prediction": ["all x y.((Telescope(x) & CelestialObject(y)) -> AllowsDetailedObservation(x,y))", "all x y.((Telescope(x) & CelestialObject(y)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))", "all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))", "all x y.((Telescope(x) & CelestialObject(y)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))", "all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))", "all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))", "all x y z.((Telescope(x) & CelestialObject(y) & Opposite(z)) -> AllowsDetailedObservation(x,y,z))", "all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))", "all x y.((Telescope(x) & CelestialObject(y)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))", "all x.(Telescope(x) -> AllowsDetailsObservationOfCelestialObjects(x))", "all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))", "all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))", "all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))"]}
{"id": "entailmentbank_validation_98", "nl": "a planet is a kind of celestial object / celestial body.", "fol": "", "prediction": ["all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Planet(x) -> (CelestialObject(x) | CelestialBody(x)))", "all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Planet(x) -> (CelestialObject(x) | CelestialBody(x)))", "all x.(Planet(x) -> CelestialObjectOrCelestialBody(x))", "all x.(Planet(x) -> (CelestialObject(x) | CelestialBody(x)))", "all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Planet(x) -> (CelestialObject(x) | CelestialBody(x)))", "all x.(Planet(x) -> (CelestialObject(x) | CelestialBody(x)))", "all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Planet(x) -> CelestialObject(x))", "all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))"]}
{"id": "entailmentbank_validation_99", "nl": "telescopes allow the detailed observation of planets.", "fol": "", "prediction": ["all x.(Telescope(x) -> AllowsDetailedObservationOfPlanets(x))", "all x.(Telescope(x) -> AllowsDetailedObservationOfPlanets(x))", "all x.(Telescope(x) -> AllowsDetailedObservationOfPlanets(x))", "all x.(Telescope(x) -> AllowsDetailedObservationOfPlanets(x))", "all x.(Telescope(x) -> AllowsDetailedObservation(x))", "all x y.((Telescope(x) & Planet(y)) -> AllowsDetailedObservation(x,y))", "all x y z.((Telescope(x) & Planet(y) & Observation(z)) -> Allows(x,y,z))", "all x.(Telescope(x) -> AllowsDetailedObservation(x))", "all x y.((Telescope(x) & Planet(y) & AllowsDetailedObservation(x,y)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailledObservation(x,Planet))", "all x.(Telescope(x) -> AllowsDetailedObservation(x))", "all x y.((Telescope(x) & Planet(y)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailsObservationOfPlanets(x))", "all x.(Telescope(x) -> AllowsDetailedObservationOfPlanets(x))", "all x.(Telescope(x) -> AllowsDetailedObservionOfPlanets(x))", "all x.(Telescope(x) -> AllowsDetailedObservation(x))"]}
{"id": "entailmentbank_validation_100", "nl": "gravity causes orbits.", "fol": "", "prediction": ["all x y.((Groom(x) & Orbit(y)) -> Causes(x,y))", "all x.(GravityCausesOrbits(x) -> GravityCausesOrbits(x))", "all x.(Gravity(x) -> CausesOrbits(x))", "all x.(Gravity(x) -> CausesOrbit(x))", "all x y.((Gravity(x) & Orbit(y)) -> Cause(x,y))", "all x.(Gear(x) -> CausesOrbits(x))", "all x y.((Gravity(x) & Orbit(y)) -> Causes(x,y))", "all x.(Gravity(x) -> CausesOrbits(x))", "all x.(GravityCausesOrbits(x) -> GravityCausesOrbits(x))", "all x.(Element(x) -> CausesOrbits(x))", "all x.(Gravity(x) -> CausesOrbits(x))", "all x.(Gravity(x) -> CausesOrbits(x))", "all x y z.((Gravity(x) & Orbit(y) & Gravity(z)) -> Causes(x,y,z))", "all x.(Gravity(x) -> CausesOrbits(x))", "all x.(Gravity(x) -> CausesOrbits(x))", "all x.(Gravity(x) -> CausesOrbits(x))"]}
{"id": "entailmentbank_validation_101", "nl": "gravity causes the earth to revolve around the sun.", "fol": "", "prediction": ["all x y.((Gravity(x) & Earth(y)) -> RevolvesAround(y,y))", "all x.(GravityCausesEarthToRevokeAroundSun(x))", "all x y.((Gravity(x) & Earth(y)) -> MovesAround(y,y))", "all x y.((Gravity(x) & Earth(y)) -> Result(x,y))", "all x y.((Gravity(x) & Earth(y)) -> ReversesAround(y,x))", "all x.(GravityCausesEarthToRotateAround(x,Sun))", "all x.(Gravity(x) -> EarthRevolveAround(x,sun))", "all x y.((Gravity(x) & Earth(y)) -> CausesRevolvesAround(y,x))", "all x y.((Gravity(x) & Earth(y)) -> RevolvesAround(y,Sun))", "all x y z.((Groovy(x) & Earth(y) & Sun(z)) -> CausesToRevokeAround(x,y,z))", "all x y.((Gravity(x) & Earth(x)) -> CausesRevolvesAroundSun(x,y))", "all x y z.((Gravity(x) & Earth(y) & Sun(z)) -> Causes(y,z))", "all x y z.((Gravity(x) & Earth(y) & Sun(z)) -> CausesRevolves(y,z))", "all x.(Gravity(x) -> CausesEarthToRevokeAroundSun(x))", "all x y z.((Gravity(x) & Earth(y) & Sun(z)) -> CausesToRotaaround(y,z))", "all x.(GravityCausesEarthToRevolveAroundSun(x))"]}
{"id": "entailmentbank_validation_102", "nl": "the moon orbits the earth.", "fol": "", "prediction": ["all x.(Moon(x) -> OrbitsEarth(x))", "all x.(Moon(x) -> Orbits(x,Earth))", "all x.(Moon(x) -> OrbitsEarth(x))", "exists x.(Moon(x) & Orbits(x,Earth))", "all x.(Moon(x) -> OrbitsEarth(x))", "all x y.((Moon(x) & Earth(y)) -> Orbits(x,y))", "(Orbits(Moon,Earth))", "all x y.((Moon(x) & Earth(y)) -> Orbits(x,y))", "all x y z.((Moon(x) & Earth(y)) -> Orbits(x,y,z))", "all x y.((Moon(x) & Earth(y)) -> Orbits(x,y))", "all x y.((Moon(x) & Earth(y)) -> Orbits(x,y))", "all x.(Moon(x) -> OrbitsEarth(x))", "all x y.((Moon(x) & Earth(y)) -> Orbits(x,y))", "all x y.((Moon(x) & Earth(y)) -> Orbits(x,y))", "all x y z.((Moon(x) & Earth(y) & Orbits(x,y)) -> (Orbits(x,y) & Orbits(x,z)))", "all x.(Moon(x) -> Orbits(x,earth))"]}
{"id": "entailmentbank_validation_103", "nl": "gravity causes the moon to orbit the earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Gravity(y)) -> Orbits(x,y))", "all x y.((Moon(x) & Gravity(y)) -> OrbitsEarth(x,y))", "all x y.((Moon(x) & Gravity(y)) -> OrbitEarth(x,y))", "all x y.((Moon(x) & Gravity(y)) -> OrbitsEarth(x,y))", "all x y z.((Moon(x) & Gravity(y) & Earth(z)) -> Orbits(x,y,z))", "all x y.((Moon(x) & Gravity(y)) -> CausesOrbit(x,y))", "all x y z.((Moon(x) & Gravity(y) & Earth(z)) -> CausesOrbit(x,y,z))", "all x.(Gravity(x) -> CausesMoonToOrbitEarth(x))", "all x y z.((Moon(x) & Gravity(y) & Earth(z)) -> CausesAbdomenEarth(x,y,z))", "exists x.(Moon(x) & CausesOrbit(x,earth))", "all x.((Moon(x) & Gravity(x)) -> OrbitsEarth(x))", "all x y z.((Moon(x) & Gravity(y) & Earth(z)) -> CausesOrbit(x,y,z))", "all x y.((Moon(x) & Earth(y)) -> CausedByGravity(x,y))", "all x y.((Moon(x) & Gravity(y)) -> Orbits(x,y))", "all x.(Moon(x) -> OrbitsEarth(x))", "all x y z.((Moon(x) & Gravity(y) & Earth(z) & Causes(x,y,z)) -> Orbits(x,x,y))"]}
{"id": "entailmentbank_validation_104", "nl": "gravity causes both the orbit of the earth around the sun and the orbit of the moon around the earth.", "fol": "", "prediction": ["all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (Orbit(x,y) & Orbit(z)))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (Orbit(x,y) & Orbit(x,z)))", "all x y.((Gravity(x) & Earth(y)) -> (CausesOrbit(x,y) & CausesOrbit(x,z) & CausesOrbit(z,y)))", "all x y.((Gravity(x) & Earth(y)) -> (OrbitsAroundSun(y,x) & OrbitsAroundMoon(y,x)))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (CausesOrbit(x,y) & CausesOrbit(x,z)))", "all x y.((Gravity(x) & Earth(y)) -> (Orbit(x,y) & Orbit(x,z) & EarthAndMoon(z)))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (CausesOrbit(x,y) & CausesOrbit(x,z)))", "all x y.((Gravity(x) & Earth(y)) -> (OrbitAround(x,y) & OrbitAround(x,y)))", "all x y.((Gravity(x) & Earth(y)) -> (OrbitAround(x,y) & OrbitAround(x,y)))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (Orbit(y,z) & OrbitOfEarth(x)))", "all x y z.((Germinal(x) & Earth(y) & Moon(z)) -> (Orbit(y) & Orbit(z,y)))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (OrbitOf(x,y) & OrbitOf(x,z)))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (Orbits(x,y) & Orbits(z,y,z)))", "all x y.((Gravity(x) & Earth(y)) -> (Orbit(x,y) & Orbit(x,z)))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (OrbitAroundSun(y,x) & OrbitAroundMoon(z,x)))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (Orbit(y,z) & CausesOrbit(y,x)))"]}
{"id": "entailmentbank_validation_105", "nl": "spring tide is when the distance between high tide and low tide is the greatest.", "fol": "", "prediction": ["all x.(SpringTidal(x) -> (HighTidalDistance(x) | LowTidalDistance(x)))", "all x y.((SpringTidal(x) & HighTidal(y) & LowTidal(x)) -> BestDistance(y))", "all x.(SprayTidal(x) -> (greatestDistance(x,y) & LowTidal(y)))", "all x.((HighTidal(x) & LowTidal(x)) -> GreatestDiscretion(x))", "all x.(SpringTide(x) -> (DistanceGrandest(x,HighTide) & DistanceGrandest(x,LowTide)))", "all x.((HighTidal(x) & LowTidal(x)) -> GreatestDistance(x))", "all x.((HighTide(x) & LowTidal(x)) -> DistinctionGreatest(x))", "all x.((HighTide(x) & LowTide(x)) -> DistanceGreatest(x))", "all x.((HighTidal(x) & LowTidal(x)) -> DistanceGreatest(x))", "all x.((HighTiece(x) & LowerTiece(x)) -> DistanceGreatest(x,1))", "all x.(SpringTidal(x) -> (RidersAt(x,HighTidal) & RidersAt(x,LowTidal)))", "all x.((HighTide(x) & LowTidal(x)) -> WorstDistance(x))", "all x.(SpringTide(x) -> (DistanceBetweenHighTideToLowTide(x) & MostRisual(x)))", "all x.((HighTidal(x) & LowTidal(x)) -> DistanceMoreFit(x,y))", "all x y.((SpawTide(x) & HighTide(y) & LowTide(x,y)) -> GreatestDistance(x,y))", "all x.((HighTie(x) & LowTie(x)) -> ExceptionalDistance(x))"]}
{"id": "entailmentbank_validation_106", "nl": "spring tides occur during a full moon.", "fol": "", "prediction": ["all x.(SpringTidy(x) -> exists y.(FullMoon(y) & OccursDuring(x,y)))", "all x y.((SpringTide(x) & FullMoon(y)) -> OccursDuring(x,y))", "all x.(RoseTile(x) -> FullMoon(x))", "all x.((SpringTide(x) & FullMoon(x)) -> OccursDuring(x))", "all x y.((SpringTide(x) & FullMoon(y)) -> OccursDuring(x,y))", "all x.(Tidal(x) -> OccursAt(x,fullMoon))", "all x.((SpringTidal(x) & FullMoon(x)) -> OccursDuring(x))", "all x.(SpringTide(x) -> OnFullMoon(x))", "all x y.((JulyTidal(x) & FullMoon(y) & FullMoon(x,y)) -> OccursDuring(x,y))", "all x y.((SpringTide(x) & FullMoon(y)) -> OccursIn(x,y))", "all x.(SpringTide(x) -> OccursDuringFullMoon(x))", "all x.(Tidy(x) -> MayOccursDuringFullMoon(x))", "all x.(FullMoon(x) -> SpringTidal(x))", "all x y.((SpringTide(x) & FullMoon(y)) -> OccursDuring(x,y))", "all x.((SpringTide(x) & FullMoon(x)) -> Occurs(x,y))", "all x.((SpringTide(x) & FullMoon(x)) -> OccursDuring(x,y))"]}
{"id": "entailmentbank_validation_107", "nl": "the highest tides occur during a full moon.", "fol": "", "prediction": ["all x y.((River(x) & FullMoon(y)) -> VeryHighest(x,y))", "all x y.((HighestTidal(x) & FullMoon(y)) -> OccursDuring(x,y))", "all x y.((Tidal(x) & FullMoon(y)) -> (Highest(x,y) | Highest(x,y)))", "all x.((Tide(x) & FullMoon(x)) -> Highest(x))", "all x.(HighestTide(x) -> OccursDuringFullMoon(x))", "all x y z.((ShippingTide(x) & FullMoon(y) & FullMoon(z)) -> OccursDuring(x,y,z))", "all x y.((Tidal(x) & FullMoon(y)) -> HighestDuring(x,y))", "all x.((Tyre(x) & FullMoon(y)) -> HighestDuring(x,y))", "all x.((Tide(x) & FullMoon(x)) -> Highest(x))", "all x y.((Title(x) & FullMoon(y) & OccursDuring(x,y)) -> Highest(x))", "all x.((FullMoon(x) & LowTidal(x)) -> OccursDuring(x,y))", "all x y.((Tide(x) & FullMoon(y)) -> (Highest(x,y) & OccursDuring(x,y)))", "all x y.((Tide(x) & FullMoon(y)) -> Highest(x,y))", "all x.((Tide(x) & FullMoon(x)) -> Highest(x))", "all x y.((Tidest(x) & FullMoon(y)) -> OccursIn(x,y))", "all x.((HighestTide(x) & FullMoon(x)) -> OccursDuring(x,y))"]}
{"id": "entailmentbank_validation_108", "nl": "marine fossils means fossils of marine animals.", "fol": "", "prediction": ["all x.(MarineFossil(x) -> (MeansFossil(x,MarineAnimal) & MarineAnimal(x)))", "all x.(MarineFossil(x) -> MeansFossilOfMarineAnimals(x))", "all x y.((MarineFossil(x) & MarineAnimal(y)) -> MeansFossil(x,y))", "all x.(MarineFossil(x) -> exists y.(MarineAnimal(y) & MarineAnimal(x,y)))", "all x.(MarineFossil(x) -> MeansMostMarineAnimals(x))", "all x.(MarineFossil(x) -> FossilOfMarineAnimals(x))", "all x.(MarineFossil(x) -> (MeaningOfCausesOfAnimals(x)))", "all x y.((MountainDomestic(x) & MarineAnimal(y)) -> Mineral(x,y))", "all x.(MarineFossil(x) -> Means(x,(MarineAnimal(x) | MarineAnimal(x)))", "all x y.((MarineFossil(x) & MarineAnimal(y)) -> (Meanings(x,y) | Means(x,y)))", "all x y.((MarineFossil(x) & MarineAnimal(y)) -> MeansFossils(x,y))", "all x.(MarineFossil(x) -> (Meets(x,marineAnimal) | SeaAnimal(x)))", "all x y.((MarineFossil(x) & MarineAnimal(y)) -> MeansFishes(x,y))", "all x.(MarineFossil(x) -> MeansMexicalAnimalFossils(x))", "all x.(MeanFossil(x) -> MarineAnimalDemon(x))", "all x.(MarineFossil(x) -> (MarineAnimal(x) & MarineAnimal(x)))"]}
{"id": "entailmentbank_validation_109", "nl": "marine animals are water animals.", "fol": "", "prediction": ["all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> Water Animal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x y.((MarineAnimal(x) & WaterAnimal(y)) -> WaterAnimal(x))"]}
{"id": "entailmentbank_validation_110", "nl": "marine fossils are fossils of water animals.", "fol": "", "prediction": ["all x y.((MarineFossil(x) & WaterAnimal(y)) -> Fossil(x,y))", "all x y z.((MarineFossil(x) & Animal(y) & Animal(z)) -> Fossil(x,y,z))", "all x.(MarineFossil(x) -> FossilOfWaterAnimals(x))", "all x.(MarineFossil(x) -> (Fossil(x) ofWaterAnimals(x)))", "all x.(MarineFossil(x) -> (FossilOfWaterAnimals(x)))", "all x.(MarineFossil(x) -> WaterAnimalFossil(x))", "all x y.((MarineFossil(x) & WaterAnimal(y)) -> Fossil(x,y))", "all x y z.((MarineFossil(x) & Animal(y) & Water(z)) -> FossilOf(x,y,z))", "all x.(MarineFossil(x) -> FossilOfWaterAnimals(x))", "all x.(MarineFossil(x) -> (FossilOfWaterAnimals(x) | FossilOfWaterAnimals(x)))", "all x.(MarineFossil(x) -> FossilOfWaterAnimals(x))", "all x.(MarineFossil(x) -> WaterAnimal(x))", "all x.(MarineFossil(x) -> FossilOfWaterAnimals(x))", "all x.(MarineFossil(x) -> FossilOfWaterAnimals(x))", "all x.(MarineFossil(x) -> FossilOfWaterAnimals(x))", "all x.(MarineFossil(x) -> WaterAnimal(x))"]}
{"id": "entailmentbank_validation_111", "nl": "marine fossils are found in mountains.", "fol": "", "prediction": ["all x.(MarineFossil(x) -> FoundInMountains(x))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x y.((MarineFossil(x) & Mountain(y)) -> FoundIn(x,y))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x y.((MarineFossil(x) & Mountain(y)) -> FoundIn(x,y))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x y.((Mountain(x) & MarineFossil(y)) -> FoundIn(y,x))"]}
{"id": "entailmentbank_validation_112", "nl": "fossils of water animals are found in mountains.", "fol": "", "prediction": ["all x y.((Fossil(x) & WaterAnimal(y)) -> FoundIn(x,y))", "all x y.((Fossil(x) & WaterAnimal(y)) -> FoundInMountains(x,y))", "all x y.((Fossil(x) & WaterAnimal(y) & FoundInMountains(x)) -> FoundIn(x,y))", "all x.(Fossil(x) -> FoundInMountain(x))", "all x.(Fossil(x) -> FoundInMountains(x))", "all x y z.((Fossil(x) & WaterAnimal(y) & Mountain(z)) -> FoundIn(x,y,z))", "all x y.((WaterVehicle(x) & Mountain(y)) -> FoundIn(x,y))", "all x.((Fossil(x) & FoundInMountain(x)) -> WaterAnimal(x))", "all x y.((WaterAnimal(x) & Mountain(y)) -> FoundIn(x,y))", "all x y z.((Fossil(x) & WaterAnimal(y) & Mountain(z)) -> FoundIn(x,y))", "all x y.((WaterAnimal(x) & Mountain(y)) -> FoundIn(x,y))", "all x.(Fossil(x) -> FoundInMountains(x))", "all x y.((Fossil(x) & WaterAnimal(y) & Mountain(z)) -> FoundIn(x,y,z))", "all x y.((Fossil(x) & WaterAnimal(y)) -> FoundInMountains(x,y))", "all x y z w.((Fossil(x) & WaterAnimal(y) & Mountain(z)) -> FoundIn(x,y,z,w))", "all x y.((Hollows(x) & Mountain(y)) -> FoundIn(x,y))"]}
{"id": "entailmentbank_validation_113", "nl": "if fossils of a water animal or plant are found in a place then that place used to be covered by water in the past.", "fol": "", "prediction": ["all x y.((WoodAnimalOrPlant(x) & FoundInPlace(x,y)) -> UsedToBeCoveredByWater(x))", "all x y z.((Fossil(x) & (WaterAnimal(y) | WaterPlant(y) & Place(z)) & FoundIn(x,y,z)) -> UsedToBeColoredByWater(x,z))", "all x y.((WaterAnimalOrPlant(x) & Place(y) & FoundIn(x,y)) -> UsedToBeCoveredByWater(x,y))", "all x y.((Fossil(x) & WaterAnimal(x) | WaterPlant(y)) -> UsedToBeCoveredByWater(x,y))", "all x y z.((Fossil(x) & WaterAnimalOrPlant(y) & Place(z) & FoundIn(x,y,z)) -> UsedToBeColoredByWater(z))", "all x y z.(((WaterAnimalOrPlant(x) & Place(y) & FoundIn(x,y)) -> CoveredByWater(y))", "all x y.((OrganicPlace(x) & WaterAnimalOrPlant(x) & FoundIn(x,y)) -> UsedToBeCoveredByWaterInPast(x))", "all x y z w.((Fossil(x) & WaterAnimalOrPlant(y) & Place(z) & FoundIn(x,y,z)) -> CoveredByWater(w))", "all x y.((Fossil(x) & FoundInPlace(x,y) & WaterAnimalOrPlant(y)) -> UsedToBeCovertByWaterInPast(x))", "all x y.((Decade(x) & WaterAnimalOrPlant(y) & FoundInPlace(x,y)) -> UsedToBeCoveredByWater(y,x))", "all x.(Fossil(x) -> (Foossil(x,WaterAnimal) | Fossil(x,WaterPlant)) & FoundInPlace(x)))", "all x y.((Widow(x) & (WaterAnimal(x) | WaterPlant(x))) -> UsedToBeCoveredByWater(y))", "all x y z.((Fossil(x) & WaterAnimalOrPlant(y) & Place(z) & FoundIn(x,y)) -> CoveredByWater(z,y))", "all x y.((Fossil(x) & (WaterAnimal(y) | WaterPlant(y)) & FoundInPlace(x,y)) -> CoveredByWater(y))", "all x y z.((Fossil(x) & WaterAnimalOrPlant(y) & Place(z) & FoundIn(x,y) & (CoveredByWater(z) | CoveredByWater(z))) -> FoundInPlace(x,z))", "all x y.((Fossil(x) & WaterAnimal(y) & Place(y) & FoundIn(x,y)) -> UsedToBeCoveredByWater(y))"]}
{"id": "entailmentbank_validation_114", "nl": "the mountains used to be covered by water in the past.", "fol": "", "prediction": ["all x.(Mountain(x) -> CoveredByWater(x))", "all x.(Mountain(x) -> CoveredByWater(x))", "all x.(Mountain(x) -> UsedToBeCoveredByWater(x))", "all x.(Mountain(x) -> UsedToBeCoveredByWaterInPast(x))", "all x.(Mountain(x) & WaterCover(x))", "all x.(Mountain(x) -> CoveredByWaterInPast(x))", "Those mountaineers used to be covered by water in the past.", "all x.(Mountain(x) -> UsedToBeCoveredByWater(x))", "all x.(Mountain(x) -> UsedToBeColouredWithWater(x))", "all x.(Mountain(x) -> CoveredByWater(x))", "all x.(Mountain(x) -> CoveredByWater(x))", "all x.(Mountain(x) -> UsedBecauseOfWater(x))", "all x.(Mountain(x) -> UsedToBeCoveredByWater(x))", "all x.(Mountain(x) -> CoveredByWaterInPast(x))", "all x.(Mountain(x) -> UsedToBeCompaniedByWater(x))", "all x.(Magnitude(x) -> UsedDrop ByWater(x))"]}
{"id": "entailmentbank_validation_115", "nl": "a mountain is a kind of environment.", "fol": "", "prediction": ["all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> IsEnvironment(x))", "all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))"]}
{"id": "entailmentbank_validation_116", "nl": "if something used to be in the past then that something has changed.", "fol": "", "prediction": ["all x y.((InThePast(x) & InThePast(y)) -> HasChanged(x))", "all x.((Present(x) & UsedToBe(x)) -> Changed(x))", "all x.((Past(x) & UsedToBe(x)) -> Changed(x))", "all x.(((UsedToBe(x) & PastToBe(x)) -> Changed(x))", "all x.((Season(x) & WasInPast(x)) -> Changed(x))", "all x.((InThePast(x) & WasInPast(x)) -> Changed(x))", "all x.((Past(x) & Changed(x)) -> HasSpoken(x))", "all x.((ActuallyInThePast(x)) -> Changed(x))", "all x y.((Past(x) & Past(y)) -> HasChange(x,y))", "all x.((UsedToBe(x) & Past(x)) -> Changed(x))", "all x.((Past(x) & New(x)) -> Changed(x))", "all x.((Temperature(x) & UsedToBe(x)) -> Change inTemperature(x))", "all x y.((Past(x) & Reason(y)) -> Changed(x,y))", "all x.((Past(x) & UsedToBe(x)) -> Changed(x))", "all x.((UsedToBe(x) & Past(x)) -> HasChanged(x))", "all x.((Past(x) & UsedIn(x)) -> Changed(x))"]}
{"id": "entailmentbank_validation_117", "nl": "a body of water is a kind of environment.", "fol": "", "prediction": ["all x.(BodyOfWater(x) -> Environment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "all x.((BodyOfWater(x) & Environment(x)) -> -Environment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "(Environment(BodyOfWater) -> Exactly(Water(Water)))", "all x.(BodyOfWater(x) -> Environment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "all x.(BodyOfWater(x) -> Environmental(x))"]}
{"id": "entailmentbank_validation_118", "nl": "the environment has changed from a body of water to mountains.", "fol": "", "prediction": ["all x.(EnvironmentChangesFromBodyOfWaterToMountains(x) -> EnvironmentChange(x))", "all x y z.((Environment(x) & BodyOfWater(y) & Mountain(z)) -> ChangedFromPrototypeTo(x,y,z))", "all x.((Environment(x) & BodyOfWater(x) & Mountains(x)) -> Changed(x))", "all x.(Environment(x) -> (BodyOfWater(x) & Mountains(x)))", "all x y.((Environment(x) & BodyOfWater(y)) -> Moose(x))", "all x y.((Environment(x) & BodyOfWater(y)) -> ChangedToMountains(x))", "all x.(EnvironmentChange(x) -> (BodyOfWater(x) & Mountains(x)))", "all x.((Environment(x) & BodyOfWater(x) & Mountain(x)) -> ChangedFrom(x,water,mountains))", "all x y.((Environment(x) & BodyOfWater(y)) -> ChangedToMountains(x,y))", "all x y.((Environment(x) & BodyOfWater(y) & Mountain(y)) -> SwitchedTo(x,y))", "all x y.((Environment(x) & BodyOfWater(y) & Mountains(z)) -> Changed(x,y,z))", "all x y.((Environment(x) & BodyOfWater(y) & Mountain(z)) -> Changed(x,y,z))", "all x.((Environment(x) & BodyOfWater(x)) -> Changed(x))", "all x.(Environment(x) -> ChangedFromBodyOfWaterToMountains(x))", "all x y.((Environment(x) & BodyOfWater(y,x)) -> Mountain(x))", "all x.(Environment(x) -> (BodyOfWater(x) & Mountain(x)))"]}
{"id": "entailmentbank_validation_119", "nl": "environments are found on the crustal surface of earth.", "fol": "", "prediction": ["all x.(Environment(x) -> FoundOnCrustalSurfaceOfEarth(x))", "all x.(Environment(x) -> FoundOnCrustalSurface(x))", "all x.(Environment(x) -> FoundOnCrustalSurface(x))", "all x.(Environment(x) -> FoundOnCrustalSurfaceOfEarth(x))", "all x y z.((Environment(x) & CrustalSurface(z)) -> FoundOn(x,y,z))", "all x.(Environment(x) -> CommonsOnCrustalSurfaceOfEarth(x))", "all x.(Environment(x) -> FoundOnCrustalSurfaceOfEarth(x))", "all x.(Environment(x) -> FoundOnCrustalSurfaceOfEarth(x))", "all x.(Environment(x) -> CrustalSurfaceOfEarth(x))", "all x y.((Environment(x) & Earth(y)) -> FoundOnCornalSurface(x,y))", "all x.(Environment(x) -> CrustalSurfaceOfEarth(x))", "all x.(Environment(x) -> exists y z.(CrustalSurface(y) & Earth(z) & FoundOn(x,y,z)))", "all x.(Environment(x) -> FoundOnCrustalSurface(x))", "all x y.((Environment(x) & Earth(y)) -> CrustalSurface(x,y))", "all x.(Environment(x) -> FoundOnCrustalSurfaceOfEarth(x))", "all x.(Environment(x) -> OrbitalSurfaceOfEarth(x))"]}
{"id": "entailmentbank_validation_120", "nl": "the environments on the crustal surface of earth have changed from a body of water to mountains.", "fol": "", "prediction": ["all x y.((CrustalSurface(x) & Earth(y) & ChangesEnvironmentsFromWaterToMountains(x,y)) -> ChangesEnvironment(x,y))", "all x y z.((CrustalSurface(x) & CrustalSurface(y) & Earth(z)) -> (ChangeDimensionals(y,z) & Changed(z,y)))", "all x.((CrustalSurface(x) & CrustalSurface(x)) -> ChangedFromBodyOfWaterToMountains(x))", "all x.(Species(x) -> (CrustalSurface(x) & CrassalSurface(x) & ChangedFromWaterToMountains(x)))", "all x y.((CrustalSurface(x) & CrustalSurface(y) & CrustalSurface(x,y)) -> ChangedFrom(x,z))", "all x.((Environment(x) & CrustalSurfaceSurfaceOfEarth(x)) -> (Cleared(x) & 'BeltOfWater(x) & Mountains(x)))", "all x.((Environment(x) & CrassalSurface(x)) -> ChangedFromBodyOfWaterToMountains(x))", "all x.((CrustalSurface(x) & BodyOfWater(x) & Mountain(x)) -> ChangedEnvironmentOn(x,CrustalSurface))", "all x.((Environment(x) & CrassalSurface(x)) -> (BodyOfWater(x) & Mountain(x)))", "all x y.((CrustalSurface(x) & Earth(y)) -> (CrostalSurface(x,y) & ChangedEnvironment(x,y)))", "all x y z.((CrustalSurface(x) & CrustalSurface(y) & Earth(z)) -> (ChangeMountain(x,y,z)))", "all x y z.((Environment(x) & CrastalSurfaceOfEarth(y) & CranalSurfaceOfEarth(z)) -> (ChangeFromBodyOfWaterToMountains(x,z)))", "all x y.((CrustalSurface(x,y) & Earth(y)) -> (ChangedFromBodyOfWaterToMassive(x)))", "all x y z.((Environment(x) & EarthSurface(y) & Crustal(z)) -> (BodyOfWater(y) & Mountain(z)))", "all x y.((CrustalSurface(x) & Earth(y) & ChangingEnvironment(x,y)) -> ChangesFromBodyOfWaterToMountains(x))", "all x y z.((Environment(x) & CrustalSurface(y) & Earth(z) & BodyOfWater(w)) -> ChangedFromToMountains(x,w))"]}
{"id": "entailmentbank_validation_121", "nl": "organisms remains can be preserved in sedimentary rock.", "fol": "", "prediction": ["all x.(Organism(x) -> CanPreserveInSedimentaryRock(x))", "all x y.((Organism(x) & SedimentaryRock(y)) -> CanPreserve(x,y))", "all x y.((Organism(x) & Remains(y)) -> CanBePreservedInSedimentaryRock(x))", "all x.(Organism(x) -> PreservedInSedimentaryRock(x))", "all x.(Organism(x) -> CanBePreservedInSedimentaryRock(x))", "all x y.((Organism(x) & SedimentaryRock(y)) -> CanBePreserved(x,y))", "all x y.((Organism(x) & SedimentaryRock(y)) -> Preserves(x,y))", "all x.(Organism(x) -> (PreservedInSedimentaryRock(x)))", "all x.(OrganismRemains(x) -> CanBePreservedInSedimentaryRock(x))", "all x y z.((Organism(x) & SedimentaryRock(y) & Remains(z) & CanBePreserved(y,x)) -> CanBePreservedIn(x,y))", "all x.(Organism(x) -> PreservationInSedimentaryRock(x))", "all x.(Organism(x) -> PreservedInSedimentaryRock(x))", "all x.(Organism(x) -> (RemainsPlayedInSedimentaryRock(x)))", "all x.(Organism(x) -> CanBePreservedInSedimentaryRock(x))", "all x.(Organism(x) -> CanBePreservedInSedimentaryRock(x))", "all x y.((Organism(x) & SedimentaryRock(y)) -> PreservedIn(x,y))"]}
{"id": "entailmentbank_validation_122", "nl": "fossils are the remains of organisms or part of organisms.", "fol": "", "prediction": ["all x.(Fossil(x) -> (RemainsOfOrganisms(x) | PartOfOrganisms(x)))", "all x.(Fossil(x) -> (Rain(x,Organism) | PartOfOrganism(x,Organism)))", "all x.(Fossil(x) -> (Organism(x) | OrganismPartOf(x)))", "all x.(Fossil(x) -> (OrganismRemains(x) | PartOfOrganisms(x)))", "(Molecule(fossil) -> (Organism(c) | Organ(c))))", "all x.(Fossil(x) -> (OccursOfOrganisms(x) | PartOfOrganisms(x)))", "all x.(Fossil(x) -> (Organism(x) | OrganismPart(x)))", "all x.(Fossil(x) -> (RemainsOfOrganisms(x) | PartOfOrganisms(x)))", "all x.(Fossil(x) -> (Organism(x) | OrganismPartOfOrganism(x)))", "all x.(Fossil(x) -> exists y.(Organism(y) | PartOfOrganism(x,y))))", "all x y z.((Fossil(x) & (Organism(y) | Organism(y))) -> (RemainsOf(x,y) | PartOf(x,y)))", "all x.(Fossil(x) -> (Organism(x) | Organism(x)))", "all x.(Fossil(x) -> (RemainsOfOrganisms(x) | PartOfOrganisms(x)))", "all x.(Fossil(x) -> (RemainsOfOrganisms(x) | PartOfOrganisms(x)))", "all x.(Fossil(x) -> (Organism(x) | OrganismPartOfOrganism(x)))", "all x.(Fossil(x) -> (RemainsOfOrganisms(x) | PartOfOrganisms(x)))"]}
{"id": "entailmentbank_validation_123", "nl": "fossils are mostly found in sedimentary rock.", "fol": "", "prediction": ["all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x y.((Fossil(x) & SedimentaryRock(y)) -> FoundIn(x,y))", "all x.(Fossil(x) -> (MostlyFoundInSedimentaryRock(x)))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(DiverseFossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x y.((Fossil(x) & SedimentaryRock(y)) -> FoundIn(x,y))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> (ReceivedInSedimentaryRock(x) | FoundInSedimentaryRock(x)))", "all x.(Fossil(x) -> exists y.(SedimentaryRock(y) & FoundIn(x,y))))"]}
{"id": "entailmentbank_validation_124", "nl": "a mineral usually has a crystal structure.", "fol": "", "prediction": ["all x.(Mineral(x) -> HasCarterialStructure(x))", "all x.(Mineral(x) -> HasCrystalStructure(x))", "all x.(Mineral(x) -> HasCrystalStructure(x))", "all x.(Mineral(x) -> StandardExistsNaturalCrystalStructure(x))", "all x.(Mineral(x) -> HasCrystalStructure(x))", "all x.(Mineral(x) -> UsuallyHasCrystalStructure(x))", "all x.(Mineral(x) -> HasCrystalStructure(x))", "all x.(Mineral(x) -> HasCrystalStructure(x))", "all x.(Mineral(x) -> UsuallyHasCrystalStructure(x))", "all x.(Mineral(x) -> HasCrystalStructure(x))", "all x.(Mineral(x) -> HasCrystalStructure(x))", "all x.(Mineral(x) -> HasCrystalStructure(x))", "all x.(Mineral(x) -> UsuallyHasCrystalStructure(x))", "all x.(Mineral(x) -> CrystalStructure(x))", "all x.(Mineral(x) -> HasKrystalStructure(x))", "all x.(Malinum(x) -> HasCrystalStructure(x))"]}
{"id": "entailmentbank_validation_125", "nl": "a quartz is made of six-sided transparent crystals.", "fol": "", "prediction": ["all x y.((Quarz(x) & SixSidedTransparentCrystals(y)) -> MadeOf(x,y))", "all x.(Quarz(x) -> MadeOfSixSidedTransparentCrystals(x))", "all x.(Quarz(x) -> (MakenOfSixSidedTransparentCrystals(x) & TransparentCrystals(x)))", "all x.(Quarz(x) -> MadeOfSixSidedTransparentCrystals(x))", "all x.(Quarz(x) -> (MakesOfSixSidedTransparentCrystals(x) & TransparentCrystals(x)))", "all x.(Quarz(x) -> (GasKrase(x) & SixSided(x)))", "all x.(Quarz(x) -> MadeOfSixSidedTransparentCrystals(x))", "all x.(Quarz(x) -> exists y.(SixSidedTransparentCrystal(y) & MadeOf(x,y)))", "all x.(Quarz(x) -> MadeOfShiefSidedTransparentCrystals(x))", "all x.(Quarry(x) -> MadeOfSixSidedTransparentCrystals(x))", "all x.(Quarcony(x) -> MadeOfSixSidedTransparentCrystals(x))", "all x.(Quarry(x) -> MadeOfSixSidedTransparentCrystals(x))", "all x.(Quarz(x) -> (MadeOfSixSidedTransparentCrystals(x)))", "all x.(Quarz(x) -> (MadeOfSixSidedTransparentCrystals(x)))", "all x.(Quarz(x) -> madeOfSixSidedTransparentCrystals(x))", "all x.(Quarz(x) -> (SixSidedTransparentCrystals(x) & MadeOf(x,y)))"]}
{"id": "entailmentbank_validation_126", "nl": "quartz is a kind of mineral.", "fol": "", "prediction": ["all x.(Quarry(x) -> Mineral(x))", "all x.(Quarz(x) -> Mineral(x))", "all x.(Quarz(x) -> Mineral(x))", "all x.(Quartz(x) -> Mineral(x))", "all x.(Quarz(x) -> Mineral(x))", "all x.(Quarz(x) -> Mineral(x))", "all x.(Quarz(x) -> Mineral(x))", "all x.(Quarz(x) -> Mineral(x))", "all x.(Quarz(x) -> Mineral(x))", "all x.(Quarry(x) -> Mineral(x))", "all x.(Quarz(x) -> Mineral(x))", "all x.(Quarz(x) -> Mineral(x))", "exists x.(Quarry(x) & Mineral(x))", "all x.(Quarz(x) & Mineral(x))", "all x.(Quarz(x) -> Mineral(x))", "all x.(Quarz(x) -> Mineral(x))"]}
{"id": "entailmentbank_validation_127", "nl": "different classes of rocks are formed by different methods.", "fol": "", "prediction": ["all x.(Rock(x) -> FormedByDifferentMethods(x))", "exists x.(RockClass(x) & FormedByNecessaryMethod(x))", "all x.(Rock(x) -> FormedByVariousMethods(x))", "all x.(Felt(x) -> (FormedByVariousMethods(x) & VariousClassesOfRock(x)))", "differingclasses of rocks formedByVariousMethods(Rocks)", "all x y.((RockClass(x) & Method(y)) -> FormedBy(x,y))", "all x y.((Class(x) & Rock(y)) -> FormedByMethod(x,y))", "all x y.((Rock(x) & Class(y)) -> FormedByVariousMethods(x,y))", "all x.(Rock(x) -> (FormedBy(x,Classes) | FormedBy(x,Methods)))", "all x.(Rock(x) -> (FormedByVariousMethods(x)|FormedByVariousMethods(x)))", "exists x.(Rock(x) & DifferentMethod(x))", "all x.(Rock(x) -> Formed(x,y))", "exists x.(RockClass(x) & FormedByMethod(x))", "all x y.((Class(x) & Rock(y)) -> FormedBy(x,y))", "all x y.((Rock(x) & Class(y)) -> FormedByMethod(x,y))", "all x y.((Class ofRock(x) & Method(y)) -> FormedBy(x,y))"]}
{"id": "entailmentbank_validation_128", "nl": "class is a measure of how a rock is formed.", "fol": "", "prediction": ["all x.(Class(x) -> MeasuresRockFormation(x))", "all x.(Class(x) -> MeasuresRockFormation(x))", "all x.(Class(x) -> MeasuresFormation(x))", "all x.(Class(x) -> MeasuresFormation(x))", "all x y.((Rock(x) & Rock(y) & Forms(x,y)) -> ClassMeasures(x,y))", "all x.(Rock(x) -> MeasuresFormation(x))", "all x.(Class(x) -> MeasuresRockFormation(x))", "all x.(Class(x) -> MeasuresOfRockFormation(x))", "all x.(Class(x) -> MeasuresHowRockFormed(x))", "all x y.((Rock(x) & Class(y)) -> MeasuresHow(x,y))", "all x.((Rock(x) & Class(x)) -> MeasuresFormation(x))", "all x.(RockClass(x) -> MeasurementOfFormation(x))", "all x.(Class(x) -> MeasuresHowRockFormed(x))", "all x.(List(x) -> MeasuresColor(x,rock))", "all x.((RockClass(x) & Formed(x)) -> MeasuresClass(x))", "all x y.((RockClass(x) & Rock(y)) -> MeasuresFormationMeasurement(x,y))"]}
{"id": "entailmentbank_validation_129", "nl": "the method by which a rock is formed can be used to classify rocks.", "fol": "", "prediction": ["all x y.((Method(x) & Rock(y) & FormedBy(x,y)) -> CanBeUsedToClassifyRocks(x))", "all x y.((Method(x) & Rock(y) & Formed(x,y)) -> ClassifiesRocks(x))", "all x y.((Method(x) & Rock(y) & Formed(y)) -> ClassifyRocks(x,y))", "all x.((MethodByFoundation(x) & Rock(x)) -> ClassifyRocks(x))", "all x.((Method(x) & FormedRock(x)) -> ClassifyRocks(x))", "all x y.((Method(x) & Rock(y) & Formed(x,y)) -> ClassifyRocks(x))", "all x.((Method(x) & RockFormed(x)) -> ClassifyRock(x))", "all x y z.((MeasureBy(x,y) & Rock(z)) -> Forms(x,z))", "all x.((MethodByFormingRock(x) & Formed(x)) -> ClassifiesRocks(x))", "all x.((Method(x) & RockFormed(x)) -> ClassifyRocks(x))", "all x y z.((Method(x) & Rock(y) & Rock(z) & FormedBy(y,z)) -> ClassifiesRocks(x,y,z))", "all x y.((MethodVia(x,y) & Rock(y)) -> ClassifiesRocks(x,y))", "all x y.((Method(x) & Rock(y) & Formed(x,y)) -> ClassifyRocks(x,y))", "all x y z.((MethodByFacingRock(x) & Rock(y) & Rock(z) & FormedBy(x,y,z)) -> ClassifiedRocks(x))", "all x y.((Method(x) & Rock(y) & FormedBy(y,x)) -> ClassifiesRocks(x))", "all x.((Method(x) & RockFormed(x)) -> ClassifyRocks(x))"]}
{"id": "entailmentbank_validation_130", "nl": "the origin of a rock means the method by which a rock is formed.", "fol": "", "prediction": ["all x.((Rock(x) & Origin(x)) -> MethodByWorth(x,rock,rock))", "all x.((Rock(x) & Origin(x)) -> FormedByMethod(x))", "all x y.((Rock(x) & Origin(y)) -> FormedBy(y,x))", "all x.((Rock(x) & Origin(x)) -> Format(x))", "all x y.((Rock(x) & Rock(y) & FormedByMethod(x,y)) -> origin(x,y))", "all x y.((Rock(x) & Origin(y)) -> HasMethodBeyondFormation(x,y))", "all x.((Rock(x) & FormsRock(x)) -> Origin(x))", "all x y.((Rock(x) & Origin(y)) -> (FormsBetween(x,y) & FormsBetween(y,x)))", "all x.((Rock(x) & Origin(x)) -> FormedBy(x,Rock))", "all x y.((Rock(x) & Rock(y)) -> Origin(x,y))", "all x y z.((Rock(x) & Origin(y) & Method(z)) -> FormedBy(z,x))", "all x.((Rock(x) & Origin(x)) -> MethodByMeasureFormation(x))", "all x y z.((Rock(x) & Origin(y) & Method(z) & FormedByRock(y,z)) -> OriginOf(x,y))", "all x.((Rock(x) & Origin(x)) -> FormsBy(x,Rock))", "all x.((Rock(x) & Origin(x)) -> formedBy(x))", "all x y z.((Rock(x) & Rock(y) & Method(z) & Forms(x,y)) -> OriginOf(x,y,z))"]}
{"id": "entailmentbank_validation_131", "nl": "the origin of rocks can be used to classify rocks.", "fol": "", "prediction": ["all x y.((Rock(x) & Origin(y)) -> CanBeClassified(x,y))", "all x y.((Rock(x) & Origin(y) & Classify(z)) -> UsedToClassify(x,z))", "all x.((Rock(x) & Origin(x)) -> ClassifiesRocks(x))", "all x.(Rock(x) -> Classifies(x,rock))", "all x.(Rock(x) -> Classified(x))", "all x.(Rock(x) -> Classify(x,rock))", "all x.(Rock(x) -> Classifies(x))", "all x y.((Rock(x) & Origin(y)) -> Classified(x,y))", "all x.((Rock(x) & Origin(x)) -> ClassifiesRocks(x))", "all x y.((Rock(x) & Origin(y)) -> Classify(z))", "all x.((Rock(x) & Origin(x)) -> CanClassifyRocks(x))", "all x y.((Rock(x) & Origin(y)) -> Classified(x,y))", "all x y z.((Rock(x) & Origin(y) & Rock(z)) -> Classifies(x,z))", "all x y.((Rock(x) & Origin(y)) -> ClassifyRocks(x,y))", "all x y.((Rock(x) & Origin(y)) -> Classify(x,y))", "all x.(Rock(x) -> CanBeClassified(x))"]}
{"id": "entailmentbank_validation_132", "nl": "rock formation can be used to study the history of rocks on earth.", "fol": "", "prediction": ["all x y z.((RockFormation(x) & Rock(y) & Earth(z)) -> CanStudyHistory(x,y,z))", "all x.(RockFormation(x) -> (StudiesRockHistory(x) | StudiesRockHistory(x)))", "all x y.((RockFormation(x) & Rock(y)) -> StudiesHistory(x,y))", "all x.(RockFormation(x) -> (StudiesRockHistory(x) & OnEarth(x)))", "all x y z.((RockFormation(x) & Rock(y) & Earth(z)) -> (StudiesHistory(x,y,z) & On(x,y,z)))", "all x.(RockFormation(x) -> StudiesRockHistoryOnEarth(x))", "all x.(RockFormation(x) -> (StudiesRockHistory(x) & OnEarth(x)))", "all x y.((RockFormation(x) & Rock(y)) -> UsedFormation(x,y))", "all x y.((RockFormation(x) & Rock(y)) -> CanBeUsedToStudyHousesOffEarth(x,y))", "all x.(RockFormation(x) -> (StudyRockHistoryOnEarth(x)))", "all x y.((RockFormation(x,y) & Earth(y)) -> CanBeUsedToStudy(x,y))", "all x y.((RockFormation(x) & Rock(y)) -> CanBeUsedFormation(x,y))", "all x.(RockFormation(x) -> (UsedToStudyRocksOnEarth(x)))", "all x y.((RockFormation(x) & Rock(y)) -> StudiesHistoryOnEarth(x))", "all x.(RockFormation(x) -> CanBeUsedToStudyRockStoryOnEarth(x))", "all x.(RockFormation(x) -> StudyRockHistory(x))"]}
{"id": "entailmentbank_validation_133", "nl": "the formation of something is a kind of process.", "fol": "", "prediction": ["all x.(FormationOf(x) -> Process(x))", "all x.(FormationOf(x) -> Process(x))", "all x.exists y.((Formation(x) & Something(y) & Forms(x,y)) -> Process(x))", "all x y.((Formation(x) & Something(y)) -> Process(x))", "all x y.((Formation(x) & Whatever(y) & Forms(x,y)) -> Process(x))", "all x.(Formation(x) -> Process(x))", "all x.(Formation(x) -> Process(x))", "all x.(FormationOf(x) -> FormamentOf(x))", "all x y.((Formation(x) & Something(y)) -> Process(x))", "all x y.((FormationOf(x,y) & Something(y)) -> ProcessFormation(x,y))", "all x.((FormationOf(x,y) & Something(y)) -> Process(x))", "all x.(Formation(x) -> Process(x))", "all x.(Formation(x) -> Process(x))", "all x y.((Formation(x) & Something(y)) -> Process(x))", "all x.(FormationOfWhat(x) -> Process(x))", "all x y.((Formation(x) & Something(y)) -> Process(x,y))"]}
{"id": "entailmentbank_validation_134", "nl": "studying rock formations can mean studying the history and processes of earth.", "fol": "", "prediction": ["all x y.((RockFormation(x) & Earth(y)) -> StudiesStoryAndProcesses(x,y))", "all x y.((RockFormation(x) & Earth(y)) -> (StudiesHistoryAndProcesses(x,y)))", "all x.(StudiesRockFormation(x) -> (EnsemblesHistory(x) & StudiesProcesses(x)))", "all x (StudiesRockFormation(x) -> ExploresEarth(x))", "all x.(StudyRockFormation(x) -> (Studies(x) & Studies(x) & Studies(x,Earth(x)))", "all x y.((RockFormation(x) & Earth(y)) -> (StudiesHistory(x,y) | StudiesProcesses(x,y)))", "all x.((StudiesRockFormation(x) & StudiesEarthHistory(x)) -> StudiesEarthProcesses(x))", "all x.(StudiesRockFormations(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x.(StudyingRockFormation(x) -> StudiesEarthHistoryAndProcesses(x))", "all x.(StudyingRockFormation(x) -> UnderstandingEarthHistoryAndProcesses(x))", "all x y.((RockFormation(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x.(SavingRockFormation(x) -> (StudiesHistoryAndProcesses(x)))", "all x y.((RockFormation(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x y.(UnderstandingRockFormation(x) -> StudiesEarthHistoryAndProcesses(x))", "all x.(StudyingRockFormation(x) -> (TrainHistory(x) & ExploreProcessesOfEarth(x)))", "all x.((StudiesRockFormation(x) & StudiesGeography(x)) -> StudiesEarth(x))"]}
{"id": "entailmentbank_validation_135", "nl": "structural geologists study rock formations.", "fol": "", "prediction": ["all x y.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x y.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x y.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x.(StructuralGeologist(x) -> StudiesRockFormations(x))", "all x.(StrategeticGeologist(x) -> StudiesRockFormations(x))", "all x y.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x y.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x y z.((StructuralGeologist(x) & RockFormation(y) & RockFormation(z)) -> Studies(x,y))", "all x y.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x y z.((StructuralGeologist(x) & RockFormation(y) & Structure(z)) -> Studies(x,y,z))", "all x y.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x.(StructuralGeologist(x) -> StudiesRockFormations(x))", "all x y.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x.(StructuralGeologist(x) -> StudyRockFormations(x))", "all x y.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x.(StructuralGeologist(x) -> StudyRockFormation(x))"]}
{"id": "entailmentbank_validation_136", "nl": "structural geologists study the history and processes of earth.", "fol": "", "prediction": ["all x y z.((StructuralGeologist(x) & Earth(y) & History(z)) -> Studies(x,y))", "all x.((StructuralGeologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x y.((StructuralGeologist(x) & Earth(y)) -> StudiesTheHistoryAndProcesses(x,y))", "all x.(StructuralGeologist(x) -> (StudiesGeography(x) & StudiesHistoryAndProcesses(x)))", "all x y.((StructuralGeologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x.(StructuralGeologist(x) -> (StudiesHistoryAndProcessesOfEarth(x)))", "all x.(StructuralGeologist(x) -> StudiesEarthHistoryAndProcesses(x))", "all x y.((StructuralGeologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x:(StructuralGeologist(x) -> StudiesEarthHistoryAndProcesses(x))", "all x y.((StructuralGeologists(x) & Earth(y)) -> Studies(x,y))", "all x y.((StructuralGeologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x y z.((StructuralGeologist(x) & Earth(y) & HistoryAndProcesses(z)) -> Studies(x,y,z))", "all x.(StudiesAgeology(x) -> (StructuralGeologists(x) & StudiesEarthHistoryAndProcesses(x)))", "all x y.((StructuralGeologist(x) & Earth(y)) -> (StudiesHistory(x,y) & StudiesProcesses(x,y)))", "all x y.((StructuralGeologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x y.((StructuralGeologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))"]}
{"id": "entailmentbank_validation_137", "nl": "how earth's environment changed is a part of the history of earth's environment.", "fol": "", "prediction": ["all x y.((Environment(x) & EarthsEnvironment(y)) -> ChangesAsPartOfHistory(x,y))", "all x.((EarthEnvironment(x) & ChangedEnvironment(x)) -> PartOfEarth'sEnvironment(x))", "all x y.((EarthsEnvironment(x) & EarthsEnvironment(y)) -> InHistory(x,y))", "all x.(EarthsEnvironment(x) -> LikelyInHistoryOfEnvironment(x))", "all x.(ChangeDistantEnvironment(x) -> PartOfOrbit(x))", "all x.((EarthsEnvironment(x) & ChangedEnvironment(x)) -> PartOfHistoryOfEnvironment(x))", "all x y z.((EarthsEnvironment(x) & Environment(y) & History(z)) -> Changed(x,y))", "all x y.((Earth(x) & Environment(y)) -> Changed(x,y))", "all x.((EarthEnvironment(x) & HowWeaponsChanged(x)) -> PartOfAgeOfEarthEnvironment(x))", "all x.((EarthElement(x) & HowEarthEnvironmentChanged(x)) -> PartOfEarthEnvironmentHistory(x))", "all x.((EarthsEnvironment(x) & Changed(x)) -> HistoryOfEnvironment(x))", "all x.(ChangedEarthsEnvironment(x) -> PartOfEarthsEnvironmentHistory(x))", "all x.((EarthsEnvironment(x) & Changed(x)) -> HistoryOfEarthsEnvironment(x))", "all x.(EarthEnvironment(x) -> EvolvedInHistory(x))", "all x y z.((EarthsEnvironment(x) & Environment(y) & EarthsEnvironment(z)) -> Changes(x,y,z))", "all x.((EarthsEnvironment(x) & Changed(x)) -> PartOfHistoryOfEarthsEnvironment(x))"]}
{"id": "entailmentbank_validation_138", "nl": "fossils can be used to study the history of organisms and environments on earth.", "fol": "", "prediction": ["all x y z.((Fossil(x) & Organ(y) & Environment(z)) -> (EngineersEarth(x,y) | EnvironmentsOnEarth(x,z)))", "all x y by the time you have visited earth, you'll have a better view of life on earth.", "all x y z.((Fossil(x) & Organism(y) & Environment(z)) -> CanBeUsedToStudyHistory(x,y,z))", "all x.(Fossil(x) -> (StudiesOrganismsAndEnvironments(x)))", "all x.(Fossil(x) -> (StudyOrganismsAndEnvironments(x) | StudyEarth(x)))", "all x.(Fossil(x) -> (StudiesOrganismAndEnvironmentHistory(x) | StudiesEarthOfOrganismAndEnvironmentHistory(x)))", "all x.(Fossil(x) -> (SolvesAt(x,Organisms) & StudiesEnvironment(x,Earth)))", "all x y.((Fossil(x) & OrganismOrganismOrEnvironment(y)) -> CanBeUsedToStudyOf(x,y))", "all x y.((Fossil(x) & Organism(y)) -> CanSelect(x,y))", "all x.(Fossil(x) -> (CanBeUsedToStudyOrganismAndEnvironmentHistory(x)))", "all x.(Fossil(x) -> (SearchingOrganisms(x) & StudyingEnvironments(x)))", "all x.(Fossil(x) -> (StudiesOrganismsOnEarth(x) & StudiesEnvironmentsOnEarth(x)))", "all x y.((Fossil(x) & Organism(y)) -> (StudiesHistory(x,y) & StudiesEnvironment(x,y)))", "all x y z.((Fossil(x) & Organism(y) & Environment(z)) -> StudiesHistory(x,y,z))", "all x y z.((Fossil(x) & Organism (y) & Environment(z)) -> CanScannen(x,y,z))", "all x y.((Fossil(x) & Organism(y)) -> (StudiesHeritageOnEarth(x,y) & StudiesEnvironmentHistory(x,y)))"]}
{"id": "entailmentbank_validation_139", "nl": "studying fossils in rock formations can mean studying the history and processes of earth.", "fol": "", "prediction": ["all x.(SearchingEarthTime(x) -> SolvesInRockFormation(x,y))", "all x.(StudiesFossil(x) -> (EnhancesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x y.((Study(x) & RockFormation(y) & Paleo(x,y)) -> (StudiesHistoryAndProcessesOfEarth(x)))", "all x.((StudiesFossils(x) & InRockFormation(x)) -> StudiesEarthHistoryAndProcesses(x)1)", "all x.((ResearchingFossilsInRockFormation(x) & StudiesEarthHistoryAndProcesses(x)) -> ImportantForEarth(x))", "all x.(StudiesFossilsInRockFormation(x) -> StudiesEarthHistoryAndProcesses(x))", "all x y.((Study(x) & Formation(y)) -> (StudiesRockFormation(x,y) & StudiesEarthHistoryAndProcesses(x,y)))", "all x.(ResearchingFossilsInRockFormation(x) | StudiesEarthHistoryAndProcesses(x))", "all x y z.((Fossil(x) & RockFormation(y) & RockFormation(z)) -> (StudiesEarthHistoryAndProcesses(x,y,z)))", "all x y z.((Study(x) & Fossil(y) & RockFormation(z) & LocatedIn(x,y,z)) -> StudiesEarthHistoryAndProcesses(x,z))", "all x y.((Fossil(x) & RockFormation(y) & Investigates(x,y)) -> DetailedHistoryAndProcessesOfEarth(x))", "all x.(StudiesFossil(x) -> (EnoughToStudyEarth(x) & InRockFormation(x)))", "all x y.((StudyFossil(x) & RockFormation(y) & InRockFormation(x,y)) -> StudiesEarthHistoryAndProcesses(x,y))", "all x y.((StudyFossil(x) & RockFormation(y)) -> CanSpeak(x))", "all x.(Earth(x) -> StudyEarth(x))", "all x y z.((StudyFossil(x) & RockFormation(y) & RockFormation(z) & StudyChemicalHeritageAndProcessesOfEarth(x,y,z)) -> CanAverage(x,y,z))"]}
{"id": "entailmentbank_validation_140", "nl": "paleontologists study fossils in rock formations.", "fol": "", "prediction": ["all x y z.((Paeontologist(x) & RockFormation(y) & Fossil(z)) -> StudiesIn(x,y,z))", "all x y.((Pleontologist(x) & RockFormation(y)) -> StudiesFossilsIn(x,y))", "all x y.((Paleontologist(x) & RockFormation(y)) -> StudiesFossil(x,y))", "all x.(Pelontologist(x) -> StudiesFossil(x,rockFormations))", "all x y.((Paleontologist(x) & RockFormation(y)) -> StudiesFossil(x))", "all x y z.((Paleontologist(x) & RockFormation(y) & Fossil(z) & StudiesIn(y,z)) -> (Studies(x,y) & Studies(x,z))))", "all x y.((Paleontologist(x) & RockFormation(y)) -> StudiesFossil(x,y))", "all x y z.((Palaeontologist(x) & RockFormation(y) & Domestic(z)) -> StudiesIn(x,y,z))", "all x y z.((Palaeontologist(x) & RockFormation(y) & Fossil(z)) -> StudiesIn(x,y,z))", "all x y z.((Paleontologist(x) & RockFormation(y) & Fossil(z)) -> StudyIn(x,y,z))", "all x y z.((Paleontologist(x) & RockFormation(y) & Fossil(z)) -> (StudiesIn(x,y,z) & In(x,y)))", "all x y.((Paleontologist(x) & RockFormation(y)) -> StudiesFossil(x,y))", "all x y z.((Paleontologist(x) & RockFormation(y) & Fossil(z)) -> StudiesIn(x,y,z))", "all x y z.((Paleontologist(x) & RockFormation(y) & Fossil(z)) -> Studies(x,y,z))", "all x y z.((Paleontologist(x) & Fossil(y) & RockFormation(z)) -> StudiesIn(x,y,z))", "all x y z.((Pallenologist(x) & RockFormation(y) & Fossil(z)) -> StudiesIn(x,y,z))"]}
{"id": "entailmentbank_validation_141", "nl": "paleontologists study the history and processes of earth.", "fol": "", "prediction": ["all x.(Palaeontologist(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x.(Paleontologist(x) -> StudiesHistoryAndProcessesOfEarth(x))", "all x y.((Paleontologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x y z.((Paleontologist(x) & Earth(y) & History(z) & Processes(z)) -> Studies(x,y,z))", "all x y.((Paleontologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x y.((Pelontologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x.(Paeontologist(x) -> (StudiesHuman(x) & StudiesEarth(x)))", "all x.(Paleontologist(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x.(Paleontologist(x) -> (StudiesEras... Earth(x) & StudiesEarth(x)))", "all x.(PALEOtologist(x) -> (StudiesHistory(x) & StudiesEarthProcesses(x)))", "all x.(Paeontologist(x) -> StudiesEarthHistoryAndProcesses(x))", "all x y.((Paleontologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x y.((Paleontologist(x) & Earth(y)) -> (Studies(x,y) & Studies(x,y)))", "all x.(Palaeontologist(x) -> StudiesHistoryAndProcessesOfEarth(x))", "all x y.((Paleontologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x.(Paleontologist(x) -> Studies(x))"]}
{"id": "entailmentbank_validation_142", "nl": "structural geologists and paleontologists both study the history and processes of earth.", "fol": "", "prediction": ["(StudiesEarth(structuralGeologist) & StudiesEarth(paleontologist))", "all x y z.((StructuralGeologist(x) & Paleontologist(y) & EarthHistory(z)) -> StudiesEarth(x,y,z))", "all x.((SollasticGeologist(x) & Paleontologist(x)) -> (StudiesEarthHistoryAndProcesses(x)))", "(StudiesLiquidityOfEarth(structuralGeologist,structuralGeologist,structuralGeologist) & Studies(Pallotogiologist,structuralGeologist))", "all x y.((StructuralGeologist(x) & Palaeontologist(y)) -> StudiesEarthHistoryAndProcesses(x,y))", "all x y.((StructuralGeologist(x) & Paleontologist(y)) -> (StudiesEarth(x,y) & StudiesEarth(x,y)))", "(StudiesHistoryAndProcessesOfEarth(StructuralGeologist) & StudiesEarthProcesses(Paleontologist))", "(StudiesEarth(historicalGeologist) | StudiesEarth(palaeontologist))", "(StudiesEarthHistoryAndProcesses(structuralGeologists) & StudiesEarth(paleontologists))", "(StudiesEarth(structuralGeologists) | StudiesEarthProcesses(paleontologists))", "all x y.((StructuralGeologist(x) & Paleontologist(y)) -> Study(x,y))", "(StructuralGeologists(x) | Paleontologists(x)) StudyEarthHistoryAndProcesses(x))", "all x y.((StructuralGeologist(x) & Paleontologist(y)) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(y)))", "((StructuralGeologist(x) & Paleontologist(x)) & StudiesEarth(x))", "all x y.((StraticGeologist(x) & Paleontologist(y)) -> (StudiesEarth(x) & StudiesEarthHistoryAndProcesses(x)))", "(StudiesEarth(structuralGeologists) & StudiesEarth(paeontologists))"]}
{"id": "entailmentbank_validation_143", "nl": "metamorphic rocks do not contain fossils.", "fol": "", "prediction": ["all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x.(MetomorphicRock(x) -> -ContainsFossil(x))", "all x y.((MetamorphicRock(x) & Fossil(y)) -> -Contains(x,y))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainsFossils(x))", "all x.(MetamorphicRock(x) -> -ContainsFossils(x))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))"]}
{"id": "entailmentbank_validation_144", "nl": "nearly all fossils are found in sedimentary rock.", "fol": "", "prediction": ["all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", ", almost all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "(Nearlyallfossils(fossil) -> FoundInSedimentaryRock(fossil))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x y.((Fossil(x) & SedimentaryRock(y)) -> FoundIn(x,y))"]}
{"id": "entailmentbank_validation_145", "nl": "fossils are lost / destroyed when sedimentary rock changes to metamorphic rock.", "fol": "", "prediction": ["all x.((Fossil(x) & SedimentaryRockChange(x,MetamorphicRock)) -> LostOrDisturbed(x))", "all x.((Fossil(x) & SedimentaryRockChange(x) ThenMetamorphicRock(x)) -> LostOrDestroyed(x))", "all x y.((Fossil(x) & SedimentaryRock(y) & ChangetoMetamorphicRock(y)) -> LostAndDestroyed(x,y))", "all x.((Fossil(x) & SedimentaryRockChangesToMetamorphicRock(x)) -> LostOrDestroyed(x))", "all x y.((Fossil(x) & SedimentaryRock(y) & MetamorphicRock(z)) -> Lost(x))", "all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> Lost(x))", "all x.((Fossil(x) & SedimentaryRockChangesToMetamorphicRock(x)) -> LostOrDestroyed(x))", "all x.((Fossil(x) & SedimentaryRockChange(x,MetamorphicRock)) -> LoseOrDestroyed(x))", "all x.((Fossil(x) & SedimentaryRockChanges(x,MetamorphicRock)) -> LostOrDestroyed(x))", "all x.((Fossil(x) & SedimentaryRockChange(x)) -> Loses(x))", "all x y.((Fossil(x) & SedimentaryRock(y)) -> (Lose(x,y) | Demolished(x)))", "all x y.((Fossil(x) & SedimentaryRock(y) & MetamorphicRock(x)) -> LostOrDestroyed(x))", "all x.((Fossil(x) & SedimentaryRockChange(x) to MetamorphicRock(x)) -> LostDestroyed(x))", "all x y.((Fossil(x) & SedimentaryRock(y) & ChangesToMetamorphicRock(y)) -> LostOrDisturbed(x))", "all x.((Fossil(x) & SedimentaryRockChangesToMetamorphicRock(x)) -> LostOrDestroyed(x))", "all x.((Fossil(x) & Lost(x)) -> MetamorphicRock(x))"]}
{"id": "entailmentbank_validation_146", "nl": "if fossils are destroyed in rock transition, then there will be gaps in the fossil record.", "fol": "", "prediction": ["all x y.((Fossil(x) & RockTransition(y) & DestroyedIn(x,y)) -> GapsInFossilRecord(x))", "all x y.((Fossil(x) & RockTransition(y) & D\u00e9molishedIn(x,y)) -> Gaps(x))", "all x y.((Fossil(x) & RockTransition(y) & DestroyedIn(x,y)) -> LargeGaps(x,y))", "all x.((Fossil(x) & DefectedInRockTransition(x)) -> GapsInFossilRecord(x))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> exists y.(FossilRecord(y) & Gap(y))))", "all x.(Z.((DefosseFossil(x) & RockTransition(x)) -> ConsistsOfGaps(x,fossilRecord))", "all x.((Fossil(x) & DemonstratedInRockTransition(x)) -> ThereWallsInFossilRecord(x))", "all x y.((Fossil(x) & RockTransition(y) & Destroyed(x,y)) -> ThereLiquidationsInFossilRecord(z))", "all x y.((Fossil(x) & RockTransition(y) & DestroyedIn(x,y)) -> GapsInFossilRecord(x))", "all x.((Fossil(x) & -DestroyedInRockTransition(x)) -> ThereWaysInFossilRecord(x))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> ThereWaysInFossilRecord(x))", "all x y.((Fossil(x) & RockTransition(y)) -> GapsInFossilRecord(x))", "all x y.((Fossil(x) & RockTransformation(y) & Demolished(x,y)) -> ThereNumberOfFossilRecord(x,y))", "all x y.((Fossil(x) & RockTransition(y) & DemolishedIn(x,y)) -> ThereWaysInFossilRecord(x))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> GlancesInFossilRecord(x))", "all x.((Fossil(x) & DisassembledInRockTransition(x)) -> exists y.(FossilRecord(y) & GapsIn(y,x)))"]}
{"id": "entailmentbank_validation_147", "nl": "sedimentary rock changing to metamorphic rock causes gaps in the fossil record.", "fol": "", "prediction": ["all x y.((SedimentaryRock(x) & MetamorphicRock(y) & ChangesTo(x,y)) -> CausesGapsInFossilRecord(x))", "all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))", "all x y.((SedimentaryRockRelatedToMetamorphicRock(x) & Fissure(y)) -> CausesGapsInRecord(y))", "all x y z.((SedimentaryRock(x) & MetamorphicRock(y) & FossilRecord(z)) -> CausesGapsIn(x,y,z))", "all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))", "all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))", "all x y z.((SedimentaryRock(x) & MetamorphicRock(y) & FossilRecord(z) & ChangesTo(x,y)) -> CausesGapsIn(x,z))", "all x y.((SedimentaryRock(x) & MetamorphicRock(y) & ChangesTo(x,y)) -> CausesGapsInFossilRecord(x))", "all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))", "all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))", "all x y z.((SedimentaryRock(x) & MetamorphicRock(y) & FossilRecord(z)) -> CausesGaps(x,y,z))", "all x y.((SedimentaryRock(x) & MetamorphicRock(y)) -> CausesGapsInFossilRecord(x))", "all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))", "all x y.((SedimentaryRock(x) & MetamorphicRock(y)) -> CausesGapsInFossilRecord(x,y))", "all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))", "all x y.((SedimentaryRock(x) & MetamorphicRock(y)) -> CausesGapsInFossilRecord(x))"]}
{"id": "entailmentbank_validation_148", "nl": "heat is a kind of energy.", "fol": "", "prediction": ["all x.(Heat(x) -> Energy(x))", "all x.(Heat(x) -> Energy(x))", "all x.(Heat(x) -> Energy(x))", "all x.(Heat(x) -> Energy(x))", "all x.(Heat(x) -> Energy(x))", "all x.(Heat(x) -> Energy(x))", "all x.(Heat(x) -> Energy(x))", "all x.(Heat(x) -> Energy(x))", "all x y.((HasHeat(x) & Energy(y)) -> Energy(x))", "all x.(Heat(x) -> Energy(x))", "all x.(Heat(x) -> Electricity(x))", "all x.(Heat(x) -> Energy(x))", "all x.(Heat(x) -> Energy(x))", "all x.(Heat(x) -> Energy(x))", "all x.(Heat(x) -> IsEnergy(x))", "all x.(Heat(x) -> Energy(x))"]}
{"id": "entailmentbank_validation_149", "nl": "metamorphic rocks are formed by rocks being exposed to extreme heat and pressure.", "fol": "", "prediction": ["all x.(MetamorphicRock(x) -> (FormedByExposed(x,heat) & FormedByExposedToExtremePressure(x)))", "all x.(MetomorphicRock(x) -> (FormedByExposedRocksToExtremeHeatAndPressure(x)))", "all x.(MetamorphicRock(x) -> (FormedByExposed(x) & ExtremeHeatAndPressure(x)))", "all x.(MetamorphicRock(x) -> (FormedByExposedRocksToExtremeHeat(x) & FormedByExposedRocksToExtremePressure(x)))", "all x y.((MetamorphicRock(x) & Rock(y) & ExposedToExtremeHeatAndPressure(x)) -> FormedBy(x,y))", "all x.(MetamorphicRock(x) -> FormedByExposedRocksToExtremeHeatAndPressure(x))", "all x.(MotomorphicRock(x) -> (FormedByExposed(x) & ExposedToExtremeHeat(x) & ExposedToExtremePressure(x)))", "all x.((Rock(x) & ExposureToExtremeHeat(x) & ExposureToExtremePressure(x)) -> Metamorphic(x))", "all x.(MetamorphicRock(x) -> (FormedByExposedRocksToExtremeHeatAndPressure(x)))", "all x.(MetamorphicRock(x) -> (ExposedToExtremeHeat(x) & ExposedToExtremePressure(x)))", "all x.(MetamorphicRock(x) -> (ExposedToExtremeHeat(x) & ExposedToExtremePressure(x)))", "all x y z.((MetamorphicRock(x) & Rock(y) & ExtremeHeat(z) & ExtremePressure(z)) -> FormedByExposedTo(x,y,z))", "all x.(MetamorphicRock(x) -> (ExposureToExtremeHeat(x) & ExposureToExtremePressure(x)))", "all x y z.((MetamorphicRock(x) & Rock(y) & ExposedToExtremeHeatAndPressure(y,z)) -> FormedBy(z,x))", "all x y.((MetamorphicRock(x) & Rock(y)) -> (ExposedToExtremeHeat(y) & ExposedToExtremePressure(x)))", "all x.(MetamorphicRock(x) -> (FormedByExposedRocks(x) & ExposedToExtremeHeatAndPressure(x)))"]}
{"id": "entailmentbank_validation_150", "nl": "heat energy can change igneous rock into metamorphic rock.", "fol": "", "prediction": ["all x y z.((HeatEnergy(x) & IgneousRock(y) & MetamorphicRock(z)) -> ChangesInto(x,y,z))", "all x.(HeatEnergy(x) -> CanChangeIgneousRock(x))", "all x.(HeatEnergy(x) -> (ChangesIgneousRock(x) & ChangesMetamorphicRock(x)))", "all x.(HeatEnergy(x) -> ChangesIgneousRockIntoMetamorphicRock(x))", "all x.(HeatEnergy(x) -> CanChangeIgneousRockIntoMetamorphicRock(x))", "all x.(HeatEnergy(x) -> (ChangesIgneousRock(x) | ChangesMetamorphicRock(x)))", "all x y.((HeatEnergy(x) & IgneousRock(y)) -> ChangesToMetamorphicRock(x,y))", "all x.(HeatEnergy(x) -> CanChangeIgnitedRockToMetamorphicRock(x))", "all x.(HeatEnergy(x) -> ChangesIgneousRockIntoMetamorphicRock(x))", "all x.(HeatEnergy(x) -> (ChangesIgneousRock(x) | ChangesMetamorphicRock(x)))", "all x y.((HeatEnergy(x) & IgneousRock(y)) -> ChangedIntoMetamorphicRock(x,y))", "all x.(HeatEnergy(x) -> (ChangesIgneousRock(x) & BecomesMetamorphicRock(x)))", "all x.((HeatEnergy(x) & IgneousRock(x)) -> MetamorphicRock(x))", "all x.(HeatEnergy(x) -> ChangesIgneousRockToMetamorphicRock(x))", "all x y.((HeatEnergy(x) & IgneousRock(y) & MetamorphicRock(y)) -> CanChange(x,y))", "all x.(HeatEnergy(x) -> ChangesIgneousToMetamorphicRock(x))"]}
{"id": "entailmentbank_validation_151", "nl": "a tree is a kind of habitat.", "fol": "", "prediction": ["all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))", "all x.(Tree(x) -> Habitat(x))"]}
{"id": "entailmentbank_validation_152", "nl": "cutting down trees in a forest causes the number of trees to decrease in that forest.", "fol": "", "prediction": ["all x y.((Tree(x) & Forest(y) & CuttingDown(x,y)) -> DecreaseDown(x,y))", "all x y.((CuttingDownTrees(x) & Forest(y) & In(y,x)) -> Decrease(y))", "all x y z.((ChoppingDownTrees(x) & Forest(y) & Forest(z)) -> NumberDescendsIn(x,y,z))", "all x y.((CuttingDownTreesInForest(x) & Forest(y)) -> ReducesTreeNumber(x,y))", "all x y.((Tree(x) & Forest(y) & CutsDownIn(x,y)) -> NumberDecreasesIn(x,y))", "all x y.((CivilDownTreesInForest(x) & Forest(y)) -> DescrementOfTrees(x,y))", "all x y.((SlicingDownTreesInForest(x) & Tree(y)) -> DecreasesInForest(x,y))", "all x y.((CirdingDownTrees(x) & Forest(y) & InForest(x,y)) -> NumberOfTreesDecreased(x,y))", "all x y z.((CropTrees(x) & Forest(y) & Forest(z) & CutsDownTrees(x,y,z)) -> NumberOfTreesDecreases(y,z))", "all x.((TreeCutting(x) & Forest(y) & Forest(z)) -> NumberDecreasesIn(x,y,z))", "all x y z.((CuttingDownTreesInForest(x) & Forest(y) & Forest(z)) -> NumericalDecrementInForest(x,y,z))", "all x y.((Forest(x) & Forest(y) & CutsDownTrees(x)) -> NumberDeclines(x,y))", "all x y.((ClearingDownTreesInForest(x,y) & Forest(y)) -> DecreasedTreeNumber(x,y))", "all x y.((CivilizingDownTrees(x) & Forest(y) & InForest(x,y)) -> IncreasesNumberOfTrees(x,y))", "all x y.((ClearingDownTrees(x) & Forest(y)) -> NumberOfTreesDecrements(x,y))", "all x y.((CirtingDownTrees(x) & Forest(y) & InForest(x,y)) -> NumberOfTreesDecrease(x))"]}
{"id": "entailmentbank_validation_153", "nl": "cutting down trees in a forest causes the number of habitat to decrease.", "fol": "", "prediction": ["all x y.((CuttingDownTrees(x) & Forest(y) & DecreasesHabitat(x,y)) -> CutsDownTrees(x,y))", "all x y.((Field(x) & Forest(y) & CutsDownTrees(x,y)) -> DecreasesHabitat(x))", "all x y.((Forest(x) & Tree(y)) -> (Cutdown(x,y) & DecreasesHabitat(y)))", "all x.((Trees(x) & Forest(y) & CuttingDownIn(x,y)) -> SmallHabitat(x))", "all x y z.((ConceivingDownTrees(x) & Forest(y) & Forest(z)) -> DecreasesHabitat(x))", "all x y.((Tree(x) & Forest(y) & CuttingDown(x,y)) -> ThousandsOfHabitatsDecrease(x))", "all x y z.((OilCuttingDecline(x) & Tree(y) & Forest(z)) -> DecreasesNumberOfHabitat(y,z))", "all x.((CircingDownTreesInForest(x) & DecreaseNumberOfHabitat(x)) -> DecreaseNumberOfHabitat(x))", "all x y.((Forest(x) & Forest(x)) -> ReducesHabitat(x,y))", "all x y z.((Tree(x) & Forest(y) & CuttingDown(x,y) & Habitat(z) & InForest(x,z)) -> Decrease(z))", "all x y z.((Tree(x) & Forest(y) & Forest(z) & CuttingIn(x,y,z)) -> NumberOfHabitatDecrease(x,y))", "all x y.((CuttingDownTrees(x) & Forest(y)) -> DecreasesHabitat(x,y))", "all x y.((CircingDownTrees(x) & Forest(y)) -> DecreasesHabitat(x))", "all x y.((CutsDownTrees(x) & Forest(y) & DecreasesHabitat(x,y)) -> NumberOfHabitat(x,y))", "all x y.((CirdingDownTrees(x) & Forest(y)) -> DecreasesHabitat(x,y))", "all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> DecreasesHabitat(x))"]}
{"id": "entailmentbank_validation_154", "nl": "an animal requires a habitat for survival.", "fol": "", "prediction": ["all x.((Animal(x) & RequiresHabitat(x)) -> Survival(x))", "all x.((Animal(x) & RequiresHabitat(x)) -> Survival(x))", "all x.((Animal(x) & RequiresHabitat(x)) -> RequiresHabitat(x))", "all x.(Animal(x) -> RequiresHabitat(x))", "all x.(Animal(x) -> RequiresHabitatForSurvival(x))", "all x.((Animal(x) & Habitat(x)) -> RequiresForSurvival(x))", "all x.((Animal(x) & RequiresHabitat(x)) -> SurvivalRequirementsHabitat(x))", "all x.(RequiresHabitat(x) -> AnimalBurial(x))", "all x y.((Animal(x) & Habitat(y) & Requires(x,y)) -> Requires(x,y))", "all x y.((Animal(x) & Habitat(y) & Requires(x,y)) -> Survives(y))", "all x.(Animal(x) -> RequiresHabitatForSurvival(x))", "all x.(Animal(x) -> RequiresHabitat(x))", "all x.((Animal(x) & Habitat(x)) -> RequiresForSurvival(x))", "all x.((Animal(x) & ResponsivesHabitat(x)) -> RequiresHabitat(x))", "all x.((Animal(x) & RequiresHabitat(x)) -> Survival(x))", "all x.(RequiresHabitatForSurvival(x) -> Animal(x))"]}
{"id": "entailmentbank_validation_155", "nl": "cutting down trees in a forest causes the number of habitat required by animals for survival to decrease.", "fol": "", "prediction": ["all x y.((Tree(x) & Forest(y)) -> (CuttingDownTreesInForest(x,y) & -HabitatNumberRequiredByAnimals(y)))", "all x.((ChoppingDownTrees(x) & Forest(x)) -> DecreasedHabitatRequiredByAnimals(x))", "all x y.((ClearingDeclineTrees(x) & Forest(y)) -> DecreasesHabitat(x,y))", "all x.((CutteringTheTreesInForest(x) & InForest(x,forest)) -> DecreasesNumericalHabitat(x,animal))", "all x y.((CivilsDownTrees(x) & Forest(y)) -> DecreaseDownHabitatRequiredByAnimals(x,y))", "all x.((CuttingDownTreesInForest(x) & inForest(x)) -> DecreaseInHabitatRequiredByAnimals(x))", "all x y.((CircingDeadTrees(x) & Forest(y)) -> AllowsNumberOfHabitat(x,y))", "all x y z.((CircingAdditionalTree(x) & Forest(y) & Wildlife(z)) -> DecreasesNumberOfHabitat(z))", "all x y.((KnifeDownTrees(x,y) & Forest(y)) -> DecreasedHabitat(x,y))", "all x y.((CrossingDeadTrees(x) & Forest(y)) -> TheNumberOfHabitat(x,y))", "all x y z.((CirdingDownTrees(x) & Forest(y) & Animal(z) & In(z,y)) -> TheNumberOfHabitatDecreases(z))", "all x y z.((Tree(x) & Forest(y) & Animal(z) & CutsIn(x,y)) -> DecreasesHabitat(y,z))", "all x y.((CivilizingTreesInForest(x) & Forest(y)) -> DecreasesHabitat(x,y))", "all x y z.((CribbingDownTrees(x) & Forest(y) & Animal(z)) -> DidesHabitat(z,y))", "all x y.((CreatingDownTrees(x) & Forest(y) & Animal(z)) -> DEcreasesNumberOfHabitat(x,z))", "all x y.((Cutter-DownTreesInForest(x) & Animal(y)) -> ReducesHabitat(x,y))"]}
{"id": "entailmentbank_validation_156", "nl": "humans changing ecosystems usually has a negative impact on an ecosystem / organisms living in an ecosystem.", "fol": "", "prediction": ["all x y.((Human(x) & Ecosystem(y) & Changes(x,y)) -> NegativeImpactOn(x,y))", "all x.(ChangeSeasuringEcosystems(x) -> NegativeImpactOnEcosystem(x))", "all x.(ChangesEcosystems(x) -> NegativeImpact(x))", "all x y.((Human(x) & Ecosystem(y) & Changes(x,y)) -> NegativeImpact(x,y))", "all x y.((Human(x) & Ecosystem(y)) -> CanChange(x,y))", "all x y.((Human(x) & EcosystemChange(y)) -> NegativeImpact(x,y))", "all x y.((Human(x) & Ecosystem(y)) -> (Changes(x,y) & NegativeImpact(x)))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & In(y,x)) -> NegativeImpactOn(x,y,z))", "all x y z.((HumansChangesEcosystems(x) & Ecosystem(y) & Organism(z)) -> NegativeImpact(x,y,z))", "all x y.((Human(x) & Ecosystem(y) & Changing(x,y)) -> NegativeImpactOn(x,y))", "all x.(Ecosystem(x) -> NegativeImpact(x))", "all x y.((Human(x) & Ecosysty(y)) -> ChangedEcosystem(x,y))", "all x y.((Human(x) & Ecosystem(y) & Changes(x,y)) -> NegativeImpact(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Organism(z) & Changing(x,y)) -> NegativeImpact(y,z))", "all x y.((Human(x) & Ecosystem(y) & Changes(x,y)) -> NegativeImpactOnEcosystemOrganisms(x))", "all x y.((Human(x) & Ecosystem(y) & Changes(x,y)) -> NegativeImpactOn(x,y))"]}
{"id": "entailmentbank_validation_157", "nl": "humans building homes in an ecosystem causes that ecosystem to change.", "fol": "", "prediction": ["all x y z w.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildingHomes(x,y,z) & Ecosystem(w)) -> CausesChange(x,y,z,w))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> CausesChange(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildingHomes(x,y)) -> CausesChangeInEcosystem(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> CausesChange(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> CausesChange(y,x))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> CausesEcosystemToChange(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHome(x,y)) -> CausesChange(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildingIn(x,y)) -> CausesChange(x,y))", "all x y z.((Human(x) & Ecosystem(y) & EcosystemChange(z)) -> BuildsIn(x,y,z))", "all x.((Human(x) & Ecosystem(y) & BuildsHousesIn(x,y)) -> CausesChange(y,y))", "all x.((Human(x) & BuildsHomes(x)) -> CausesEcosystemToChange(x))", "all x.((Human(x) & Ecosystem(y)) -> CausesChange(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> BuildsHome(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildingIn(x,y)) -> CausesChange(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildingHome(x,y)) -> CausesChange(x,y))", "all x y.((Human(x) & Emosphere(y) & BuildsHomesIn(x,y)) -> CausesEcosystemChange(x,y))"]}
{"id": "entailmentbank_validation_158", "nl": "humans building homes in an ecosystem has a negative impact on an ecosystem and organisms living in the ecosystem.", "fol": "", "prediction": ["all x y z.((Human(x) & Ecosystem(y) & Organism(z)) -> BuildingHomeIn(x,y,z))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomeIn(x,y)) -> NegativeImpactIsland(x))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomeIn(x,y)) -> NegativeImpactOn(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildingHomes(x,y)) -> NegativeImpactOn(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildsHomes(x,y)) -> NegativeImpact(x,z))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildingHomesIn(x,y)) -> NegativeImpact[x,z))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> BuildsHomesIn(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> NegativeImpactOn(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHousesIn(x,y)) -> NegativeImpactOn(x,y))", "all x.(BuildingHomesInEcosystem(x) -> NegativeImpactOnEcosystemAndOrganisms(x))", "all x y.((Human(x) & Ecosystem(y) & BuildingHomes(x,y)) -> NegativeImpactOn(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> NegativeImpactOn(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> NegativeRelevantOn(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Habitat(z)) -> BuildsHomesInEcosystemDesiredInEcosystemAndOrganisms(x,y,z))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildsHomesIn(x,y)) -> NegativeImpact(x,z))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> BuildsHomesInEcosystem(x,y,z))"]}
{"id": "entailmentbank_validation_159", "nl": "a wetland is a kind of ecosystem.", "fol": "", "prediction": ["all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "exists x.(Wetland(x) & Ecosystem(x))"]}
{"id": "entailmentbank_validation_160", "nl": "humans building homes in a wetland has a negative impact on a wetland and organisms living in the wetland.", "fol": "", "prediction": ["all x y.((Human(x) & Wetland(y)) -> (BuildsHomesIn(x,y) & NegativeImpactOnWetland(x) & NegativeImpactOnOrganisms(x)))", "all x y z.((Human(x) & Wetland(y) & Wetland(z)) -> CanBuildHomesInIslandAndCanLivingOrganismsInIsland(x,y,z))", "all x y.((Human(x) & Wetland(y) & BuildsHasHomesIn(x,y)) -> NegativeImpact(x,y))", "all x y.((Human(x) & Wetland(y) & BuildsHomeIn(x,y)) -> NegativeImpactOn(x,y))", "all x y.((Human(x) & Wetland(y) & BuildingHomes(x,y)) -> NegativeImpactOnWetlandAndOrganisms(x,y))", "all x y z.((Human(x) & Wetland(y) & Wetland(z) & BuildsHomeIn(x,y),z)) -> NegativeImpactOn(x,y,z))", "all x y.((Human(x) & Wetland(y) & BuildsHomesIn(x,y)) -> NegativeImpact(x,y))", "all x y z.((Human(x) & Wetland(y) & Home(z) & BuildingInWetland(x,z)) -> NegativeImpactOnWetlandAndOrganism(x))", "all x.(BuildingHomesInWetland(x) -> NegativeImpactOnWetlandAndOrganismsLivingInWetland(x))", "all x y.((Human(x) & Wetland(y) & BuildsHomesIn(x,y)) -> NegativeImportanceOnWetlandAndOrganisms(x,y))", "all x y z.((Human(x) & Wetland(y) & Wetland(z) & BuildsHomesIn(x,y,z)) -> NegativeImpactOnWetlandAndOrganisms(x,y))", "all x y z.((Human(x) & Wetland(y) & Wetland(z) & BuildsHome(x,y,z)) -> NegativeImpactOn(x,y,z))", "all x y z.((Human(x) & Wetland(y) & WetlandOrganism(z)) -> (BuildingHome(x,y) & NegativeImpact(x,z) & HasRelativeImpactOn(x,y)))", "all x y.((Human(x) & Wetland(y) & BuildingHomesIn(x,y)) -> NegativeImpactOnWetlandAndOrganisms(x,y))", "all x y.((Human(x) & Wetland(y) & BuildsHomes(x,y)) -> NegativeImpactOnWetlandAndOrganisms(x,y))", "all x y z.((Human(x) & Wetland(y) & Wetland(z)) -> (BuildingHomesInWetland(x,y) & NegativeImpactOnWetland(x) & NegativeImpactOnOrganisms(x,z)))"]}
{"id": "entailmentbank_validation_161", "nl": "if an animal eats other animals for food, then the animal will be the predator.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x))", "all x.((Animal(x) & EatsOtherAnimals(x)) -> Predator(x))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & EatsForFood(x,y,z)) -> Predator(x))", "all x y.((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x))", "all x.((Animal(x) & EatsOtherAnimalsForFood(x)) -> Predator(x))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & EatsForFood(x,y,z)) -> Predator(x))", "all x y.((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & EatsForFood(x,y,z)) -> Predator(x,y))", "all x y.((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x,y))", "all x y.((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x))", "all x y.((Animal(x) & Alien(y) & Eats(x,y)) -> Predator(x,y))", "all x yt((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x))", "all x y.((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x,y))", "all x y z.((Animal(x) & Animal(y) & Food(z) & EatsFor(x,y,z)) -> Predator(x))", "all x.(EatsOtherAnimals(x) -> Predator(x))", "all x y.((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x))"]}
{"id": "entailmentbank_validation_162", "nl": "tuna eat fish.", "fol": "", "prediction": ["all x.((Tuna(x) & Fish(y)) -> Eat(x,y))", "all x.(Tonka(x) -> EatsFish(x))", "all x.(Tuna(x) -> EatsFish(x))", "all x y.((Tuna(x) & Fish(y)) -> Eats(x,y))", "all x y z.((Tuna(x) & Fish(y) & Fish(z)) -> Eats(x,y,z))", "all x.(Tuna(x) -> EatsFish(x))", "all x.(Tuna(x) -> EatsFish(x))", "all x.(Tuna(x) -> EatsFish(x))", "all x.(Tuna(x) -> EatsFish(x))", "all x y.((Tuna(x) & Fish(y)) -> Eats(x,y))", "all x y z.((Tuna(x) & Fish(y) & Fish(z)) -> Eats(x,y,z))", "all x y.((Tuna(x) & Fish(y)) -> Eat(x,y))", "all x.(Tuna(x) -> EatsFish(x))", "all x.((Tuna(x) & Fish(y)) -> Eats(x,y))", "all x.(Tuna(x) -> EatsFish(x))", "all x.(Tuna(x) -> EatsFish(x))"]}
{"id": "entailmentbank_validation_163", "nl": "tuna is a kind of predator.", "fol": "", "prediction": ["all x.(Tuna(x) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "all x.((Tunnel(x) & Predator(x)) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "all x.(Tunnel(x) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))"]}
{"id": "entailmentbank_validation_164", "nl": "tuna is a kind of fish.", "fol": "", "prediction": ["all x.(Tuna(x) -> Fish(x))", "all x.(Tuna(x) -> Fish(x))", "all x.(Tuna(x) -> Fish(x))", "all x.(Tuna(x) -> Fish(x))", "all x.(Tunnel(x) -> Fish(x))", "all x.(Tuna(x) -> Fish(x))", "all x.(Tuna(x) -> Fish(x))", "all x.(Tuna(x) -> Fish(x))", "all x.(Tongue(x) -> Fish(x))", "all x.(Tuna(x) -> Fish(x))", "all x.(Tuna(x) -> Fish(x))", "all x.(Tunnel(x) -> Fish(x))", "all x.(Tuna(x) -> Fish(x))", "all x y.((Tuna(x) & Fish(y)) -> Is(x,y))", "all x.(Tuna(x) -> Fish(x))", "all x y.((Tuna(x) & Fish(y)) -> Fish(x))"]}
{"id": "entailmentbank_validation_165", "nl": "tuna is a kind of predatory fish.", "fol": "", "prediction": ["(PredatoryFish(tuna))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tune(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tunnel(x) -> PredatoryFish(x))"]}
{"id": "entailmentbank_validation_166", "nl": "commercial harvesting from the ocean has caused populations of large predatory fish to decrease.", "fol": "", "prediction": ["all x.((CommercialHarvestingFromOcean(x) & ConsumesLargePredatoryFish(x)) -> PopulationDecrease(x))", "all x y.((CommercialHarvestingFromOcean(x) & LargePredator(y)) -> PopulationDecrease(x,y))", "all x.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(x)) -> PopulationDecrease(x))", "all x y.((CommercialHarvesting(x) & Ocean(y) & LargePredatoryFish(z) & PopulationDecrease(z)) -> CommercialHasHasHasHasHasHasHasHasHas(x,z))", "all x y.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y)) -> (DiminishedPopulation(y)))", "all x.((CommercialHarvesting(x) & Marine(x)) -> DecreasedPopulations(x))", "all x y.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y)) -> DecreasedPopulations(x,y))", "all x.(CommercialHarvestingFromOcean(x) -> (CausedDecreasesInPopulationsOfPredatoryFish(x)))", "all x y.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y)) -> (DecreasedPopulation(y,x)))", "all x y.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y)) -> PopulationDecrease(x,y))", "all x y.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y)) -> CausedPopulationDecrease(x,y))", "all x y.((CommercialHasHarvestingFromOcean(x) & LargePredatoryFish(y)) -> PopulationDecrease(x))", "all x y.((CommercialHarvesting(x) & Ocean(y) & LongPredatoryFish(x)) -> CausedPopulationDecline(x,y))", "all x y.((CommercialHarvesting(x) & Ocean(y)) -> CausedPopulationDecline(x,y))", "all x.((MarualHarvesting(x) & Ocean(x)) -> PopulationDecreases(x))", "all x y.((CommercialHarvesting(x) & Ocean(y)) -> (DiminishedPopulations(x,y)))"]}
{"id": "entailmentbank_validation_167", "nl": "commercial harvesting from the ocean has caused the populations of tuna to decrease.", "fol": "", "prediction": ["all x y.((TunaPopulation(x) & CommercialHarvesting(x) & Ocean(y)) -> Decreased(x,y))", "all x y.((CommercialHarvesting(x) & Ocean(y) & TunaBetween(x,y)) -> PopulationDecrease(x))", "all x y.((CommercialHarvestingFromOcean(x) & TunaPopulation(y)) -> DoesDecrease(x,y))", "all x y.((CommercialHarvesting(x) & Ocean(y)) -> (DecreasedPopulation(x,y)))", "all x y z.((CommercialHarvesting(x) & Tuna(y) & Ocean(z) & From(x,z)) -> CausesDecreases(y))", "all x y z.((CommercialHunting(x) & Omean(y) & Tuna(z)) -> (DiminishedPopulation(z) | ReducedPopulation(z)))", "all x y.((CommercialHarvesting(x) & Ocean(y)) -> CausesDecreases(x,tunaPopulation))", "all x.((CreateTunaPopulationDecrease(x) & CommercialHarvesting(x)) -> TunaPopulationDecrease(x))", "all x y.((MarqueRecapture(x) & Ocean(y) & Sea(z)) -> CausesDecreasedPopulations(x,y,z))", "all x.((CommercialHarvestingFromOcean(x) & TunaPopulationsDecrease(x)) -> Commercial(x))", "all x y.((CommercialHarvestingFromOcean(x) & Tuna(y)) -> PopulationDecrease(x))", "all x y z.((CommercialHarvesting(x) & Ocean(y) & TunaPopulation(z)) -> CausedDecrease(z))", "all x.((CommercialHarvesting(x) & FromOcean(x)) -> PopulationDecline(x))", "all x.((CommercialHarvestingFromOcean(x) & TunaPopulationDecrease(x)) -> HarvestedFromOcean(x))", "all x y.((MarualHarvesting(x) & Ocean(y) & TunaPopulation(y)) -> Decreased(y))", "all x.((CommercialHarvesting(x) & Ocean(x)) -> ThePopulationDecrease(x))"]}
{"id": "entailmentbank_validation_168", "nl": "an organism becoming extinct causes a change in the organism's food web.", "fol": "", "prediction": ["all x.((Organism(x) & Extinct(x)) -> CausesChangeInFoodWeb(x))", "all x.((Organism(x) & Extinct(x)) -> ChangeInFoodWeb(x))", "all x.((Organism(x) & Extinct(x)) -> ChangeInFoodWeb(x))", "all x.((Organism(x) & Extinct(x)) -> CausesChangeInFoodWeb(x))", "all x.((Organism(x) & Extinct(x)) -> ChangeInFoodWeb(x))", "all x.((Organism(x) & Extinct(x)) -> CausesChangInFoodWeb(x))", "all x.((Organism(x) & Extinct(x)) -> ChangeInFoodWeb(x))", "all x.((Organism(x) & Extinct(x)) -> ChangeInFoodWeb(x))", "all x.((Organism(x) & Extinct(x)) -> ChangeInFoodWeb(x))", "all x y.((Organism(x) & Extinct(x) & FoodWeb(y)) -> CausesChange(x,y))", "all x y.((Organism(x) & Extinct(y)) -> CausesFoodWebChange(x,y))", "all x.((Organism(x) & Extinct(x)) -> ChangeInFoodWeb(x))", "all x.((Organism(x) & Extinct(x)) -> CausesChangeInFoodWeb(x))", "all x.((Organism(x) & Extinct(x)) -> ChangeInFoodWeb(x))", "all x.((Organism(x) & Extinct(x)) -> CausesChangeInFoodWeb(x))", "all x.((Organism(x) & Extinct(x)) -> ChangesFoodWeb(x))"]}
{"id": "entailmentbank_validation_169", "nl": "a change in a food web can cause damage to an ecosystem.", "fol": "", "prediction": ["all x y.((FoodWebChange(x) & Ecosystem(y)) -> CausesDamage(x,y))", "all x y.((ChangeInFoodWeb(x) & Ecosystem(y)) -> CausesDamage(x,y))", "all x y.((ChangeInFoodWeb(x) & Ecosystem(y)) -> CausesDamage(x,y))", "all x y z.((ChangeInFoodWeb(x) & Ecosystem(y) & FoodNet(z)) -> CausesDamageTo(x,y,z))", "all x y.((FoodWebChange(x) & Environment(y)) -> CausesDamage(x,y))", "all x y z.((ChangInFoodWeb(x) & Ecosystem(y) & Ecosystem(z)) -> CausesDamage(x,y,z))", "all x y.((FoodWebChange(x) & Ecosystem(y)) -> CausesDamage(x,y))", "all x y z.((ChangeInFoodWeb(x) & Ecosystem(y) & Environmental(z)) -> CausesDamage(x,y))", "all x y.((FoodWebChange(x) & Ecosystem(y)) -> CauseDamage(x,y))", "all x y.((ChangeInFoodWeb(x) & Ecosystem(y)) -> CausesDamage(x,y))", "all x y.((ChangeInFoodWeb(x) & Ecosystem(y)) -> CanCauseDamage(x))", "all x y z.((ChangeInFoodWeb(x) & Ecosystem(y) & Ecosystem(z)) -> CanCauseDamage(x,y,z))", "all x y.((ChangeInFoodWeb(x) & Ecosystem(y)) -> CanCauseDamage(x,y))", "all x.(ChangeInFoodWeb(x) -> CausesDamageToEcosystem(x))", "all x y.((ChanginFoodWeb(x) & Ecosystem(y)) -> CausesDamage(x,y))", "all x y.((ChangeInFoodWeb(x) & Ecosystem(y)) -> CanCauseDamage(x,y))"]}
{"id": "entailmentbank_validation_170", "nl": "extinctions of organisms can cause damage to an ecosystem by changing the food web.", "fol": "", "prediction": ["all x y.((Organism(x) & Extinction(y) & ChangesFoodWeb(y,x)) -> CausesDamage(x,y))", "all x y.((Extinction(x) & Organism(y)) -> (ChangeOfFoodWeaver(y) | CauseDamage(x,y)))", "all x y.((Organism(x) & Organism(y)) -> (Extinction(x,y) & ClaimsFoodWeb(x,y)))", "all x y.((Extinction(x) & Organism(y)) -> CausesDamage(x,y))", "all x.(ExtinctionOfOrganisms(x) -> (CausesDamage(x) & ChangesFoodWeb(x)))", "all x y z.((Extinction(x) & Organism(y) & Ecosystem(z) & ChangedFoodWeb(y)) -> CausesDamageByChange(x,y,z))", "all x y.((Organism(x) & Extinction(x,y)) -> CausesDamageToEcosystem(x,y))", "all x y.((Organism(x) & Extinction(x,y) & Event(y) & ChangesFoodWeb(y)) -> CausesDamageToEcosystem(x,y))", "all x y.((Endomination(x) & Organism(y)) -> (CausesDamage(x,y) & ChangesFoodWeb(x,y)))", "all x y.((Organism(x) & ExpirationOf(x) & ChangingFoodWeb(y)) -> CausesDamageToEcosystem(x,y))", "all x y z.((Extinction(x) & Organism(y) & Ecosystem(z) & ChangesFoodWeb(y)) -> CausesDamage(x,y,z))", "all x y.((Organism(x) & Extinction(y)) -> CanCauseDamage(x,y))", "all x.((Organisms(x) & Extinctions(x)) -> CausesDamageToEcosystemByChangetingFoodWeb(x))", "all x y.((Organism(x) & Extinction(y)) -> CausesDamage(x,Ecosystem))", "all x y.((Extinction(x) & Organism(y)) -> CausesDamageToEcosystem(x,y))", "all x.(Extinction(x) -> CausesDamage(x))"]}
{"id": "entailmentbank_validation_171", "nl": "california is located on the boundary of two tectonic plates.", "fol": "", "prediction": ["all x.(California(x) -> LocatedOnBoundaryOfTectonicPlates(x))", "all x y.((California(x) & TectonicPlate(y)) -> PlacedOnBoundary(x,y))", "all x.(California(x) -> LocatedOnBoundaryOfTwoTectonicPlates(x))", "all x y.((Country(x) & TheBoundary(y,x)) -> Calfornia(x))", "all x.(California(x) -> exists y.(TectonicPlate(y) & Plate(z) & OnBoundary(x,y,z))))", "all x.(California(x) -> LocatedOnBoundaryOfTwoTectonicPlates(x))", "all x y.((California(x) & TectonicPlate(y)) -> LocatedOnBoundary(x,y))", "all x y.((California(x) & TectonicPlate(y)) -> LocatedOnBoundary(x,y))", "all x y.((California(x) & TectonicPlate(y)) -> LocatedOnBoundary(x,y))", "all x y z.((california(x) & TectonicPlate(y) & TectonicPlate(z)) -> LocatedOnBoundary(x,y,z))", "all x y z.((California(x) & TectonicPlate(y) & TectonicPlate(z)) -> LocatedOnBoundary(x,y,z))", "all x y.((California(x) & TectonicPlate(y)) -> LocatedOnBoundary(x,y))", "all x.(Caprifornia(x) -> LocatedOnBoundaryOfTwoTectonicPlates(x))", "all x.((California(x) & TectonicPlate(y)) -> LocatedOnBoundary(x,y))", "all x y.((California(x) & TectonicPlate(y)) -> LocatedOnBorder(x,y))", "all x y.((California(x) & TectonicPlate(y)) -> LocalizedOnBorder(x,y))"]}
{"id": "entailmentbank_validation_172", "nl": "earthquakes are most common along tectonic plate boundaries.", "fol": "", "prediction": ["all x.(Earthquake(x) -> (CrossBorders(x) & TectonicPlateBoundaries(x)))", "all x y.((Earthquake(x) & TectonicPlateBoundaries(y)) -> MostCommonLayer(x,y))", "all x.(Earthquake(x) -> MostCommonAlongTectonicPlateBoundaries(x))", "all x y.((Earthquake(x) & TectonicPlateBoundary(y)) -> MostCommonAlong(x,y))", "all x y.((Earthquake(x) & TectonicPlateBoundaries(y)) -> MostCommon(x,y))", "all x.(Earthquake(x) -> MostCommonAlongTectonicPlateBoundaries(x))", "all x.(Earthquake(x) -> (MaintainsAlongTectonicPlateBoundaries(x)))", "all x.(Earthquake(x) -> MostCommonLunarBeyondTectonicPlateBoundaries(x))", "all x.(Earthquake(x) -> CommuneLayoutTectonicPlateBeginnings(x))", "all x.(Earthquake(x) -> (CrosssBenchmarks(x) & TectonicPlateBoundaryBoundaries(x)))", "all x.(Earthquake(x) -> ExpathsTectonicPlateBoundaries(x))", "all x.(Earthquake(x) -> MostCommonAlongTectonicPlateBoundaries(x))", "all x.(Seismic(x) -> VeryCommonLikeTechtonicPlateBoundaries(x))", "all x.(Earthquake(x) -> (CrossLayoutBoundaries(x) & TectonicPlateBoundaries(x)))", "all x.(Earthquake(x) -> (PlaceBoundary(x,tectonicPlate) & MostCommon(x)))", "all x.(Earthquake(x) & TectonicPlateBoundaries(x))"]}
{"id": "entailmentbank_validation_173", "nl": "massachusetts is not located on the boundary of two tectonic plates.", "fol": "", "prediction": ["all x.(Massachusetts(x) -> -BelongsOnTectonicPlateBoundary(x,2))", "(all x.(Massachusetts(x) -> -LocatedOnBoundaryOfTectonicPlates(x)))", "all x.(Massachusetts(x) -> -LaunchedOnBoundaryOfTwoTectonicPlates(x))", "all x.(Masachusetts(x) -> -BoundaryOfTwoTectonicPlates(x))", "all x y.((Massachusetts(x) & TectonicPlate(y) & TectonicPlate(x,y)) -> -FixedOnBoundary(x,y))", "all x.(Massachusetts(x) -> -LudorOneTonkOfCectonicPlates(x))", "all x.(Massachusetts(x) -> -(EntouragedOnBoundaryOfTwoTectonicPlates(x) & LocatedOnBoundaryOfTwoTectonicPlates(x)))", "all x.(Massachusetts(x) -> -DependentOnThreeTectonicPlates(x))", "all x y.((Massachusetts(x) & TectonicPlate(y)) -> -LocatedOnBoundary(x,y))", "all x.(Massachusetts(x) -> -LikedOnBoundaryOfTwoTectonicPlates(x))", "exists x.(Massachusetts(x) & -LocatedOnBenchmark(x))", "all x.(Massachusetts(x) -> -BelongsToTectonicPlateBoundary(x,2))", "all x.(Massachusetts(x) -> -BeltihoodOfTwoTectonicPlates(x))", "all x.(Massachusetts(x) -> -BeltwixtTectonicPlates(x))", "all x.(Massachusetts(x) -> -exists y.(TectonicPlate(y) & Entrance(x,y))))", "all x.(Massachusetts(x) -> -LievedOnBegin(x,technoCells2))"]}
{"id": "entailmentbank_validation_174", "nl": "earthquakes are more likely to occur in california than in massachusetts.", "fol": "", "prediction": ["all x.(Earthquake(x) -> (MoreLikelyToOccurInCalifornia(x) | MoreLikelyToOccurInMassachusetts(x)))", "all x y.((Earthquake(x) & California(y)) -> MoreLikelyToOccur(x,y))", "all x y.((Earthquake(x) & California(y) & Massachusetts(x)) -> MoreLikely(x,y))", "all x y.((Earthquake(x) & California(y) & Massachusetts(y)) -> MoreLikelyToOccur(x,california))", "all x y.((Earthquake(x) & California(y)) -> MoreLikelyIn(x,y))", "all x.(Earthquake(x) -> (LikelyToOccur(x,california) | LikelyLikely(x,Massachusetts)))", "all x y.((Earthquake(x) & California(y)) -> MoreLikelyToOccur(x,y))", "all x y z.((Earthquake(x) & California(y) & Massachusetts(z)) -> MoreLikelyToOperate(x,y,z))", "all x y.((Earthquake(x) & California(y)) -> MoreLikelyIn(x,y))", "all x y.((Earthquake(x) & California(y)) -> MoreLikelyToOccurIn(x,y))", "all x y.((Earthquake(x) & In(x,y)) -> (LikelyToOccur(x,california) | LikelyToOccur(x,Massachusetts)))", "all x y.((Earthquake(x) & California(y)) -> MoreLikely(x,y))", "all x y.((Earthquake(x) & California(y)) -> MoreLikely(x,y))", "all x y.((Earthquake(x) & California(y) & Massachusetts(y)) -> MoreLikelyToOccurIn(x,y))", "all x y.((Earthquake(x) & California(y)) -> MoreLikelyInCommunity(x,y))", "all x y.((Earthquake(x) & California(y)) -> MoreLikelyToOccurs(x,y))"]}
{"id": "entailmentbank_validation_175", "nl": "the oceanic plate is a kind of tectonic plate.", "fol": "", "prediction": ["all x.(OceanPlate(x) -> (TectonicPlate(x) & SealedOcean(x)))", "all x.(OceanicPlate(x) -> TectonicPlate(x))", "all x.(OceanicPlate(x) -> TectonicPlate(x))", "all x.(OceanicPlate(x) -> TectonicPlate(x))", "all x.(OceanCell(x) -> TectonicPlate(x))", "all x.(OceanicPlate(x) -> TectonicPlate(x))", "all x.(OceanPlate(x) -> TectonicPlate(x))", "all x.(OceanPlate(x) -> TectonicPlate(x))", "all x.(OceanicPlate(x) -> TectonicPlate(x))", "all x.(OceanPlate(x) -> TectonicPlate(x))", "all x.(OceanPlate(x) -> TectonicPlate(x))", "all x.(OceanPlate(x) -> TectonicPlate(x))", "all x.(OceanicPlate(x) -> TectonicPlate(x))", "exists x y.(OceanPlate(x) & TectonicPlate(y))", "all x.(OceanPlate(x) -> (TectonicPlate(x) & -TectonicPlate(x)))", "all x.(OceanicPlate(x) -> TectonicPlate(x))"]}
{"id": "entailmentbank_validation_176", "nl": "the subduction of tectonic plates may cause magma to surface from underneath.", "fol": "", "prediction": ["all x.(SubductionOfTectonicPlates(x) -> MayCauseMagmaToSurfaceFromUnderfloor(x))", "all x y.((SubductionOfTectonicPlates(x) & Magma(y)) -> MayFailFromUnderside(x))", "all x.(SubductionOfTectonicPlates(x) -> MayCauseMagmaToSurface(x))", "all x.(SubductionOfTectonicPlates(x) -> MayCauseMagmaToSurface(x))", "all x y.((SubductionOfTectonicPlates(x) & Magma(y)) -> MayCauseSurface(x,y))", "all x y.((Subduction(x) & TectonicPlate(y)) -> (FacesMagma(x,y) & CausesMagmaToSurfaceFromUnderside(x,y)))", "all x.((SubductionOfTectonicPlates(x) & MayCauseMagmaFromBelowBudget(x)) -> PossibleMagmaInterference(x))", "all x.((SubductionOfTectonicPlatels(x) & MagmaSurface(x)) -> MayCause(x,Magma,Bunderwater))", "all x.((SubductionOfTectonicPlates(x) & MagmaSurface(x)) -> MayCause(x,MagmaSurface))", "all x y.((SubductionOfTectonicPlates(x) & Matrix(y)) -> MayCauseMagmaToSurface(x,y))", "all x y.((TectonicPlate(x) & Subduction(x,y)) -> MayCauseMagmaToSurface(x,y))", "the subduction of tectonicplates may cause magmatosurface(s)", "all x y.((TectonicPlate(x) & Subduction(y)) -> MagnaSurface(x,y))", "all x y.((TectonicPlate(x) & Subduction(y)) -> CanCauseMagmaToSurface(y,Underside))", "all x.((SubductionOfTectonicPlates(x) & MagmaSurface(x)) -> MayCause(x,MagmaSurface,Underside))", "all x y z.((SubductionOfTectonicPlates(x) & Magma(y) & Underground(z)) -> CausesToSurface(y,z))"]}
{"id": "entailmentbank_validation_177", "nl": "the subduction of an oceanic plate may cause magma to surface from underneath.", "fol": "", "prediction": ["all x y.((SubductionOceanicPlate(x) & OceanicPlate(y)) -> (MayCauseMagmaSurface(x,y)))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y) & MayCauseMagmaDepends(x,y)) -> CanCauseMagmaDepends(x,y))", "all x y.((Subduction(x) & OceanicPlate(y) & Subduction(x,y)) -> MayCauseMagmaToSurface(x,y))", "all x.((SubductionOceanPlate(x) & OceanicPlate(x)) -> CausesMagmaToSurfaceFromUnderside(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> MayCauseMagmaToSurface(x,y))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> MayCauseMagmaToSurface(x,y))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> MayCauseMagmaToSurface(x,y))", "all x y.((SubductionOfOceanPlate(x) & OceanicPlate(y)) -> (MagmaSurface(y,underside)))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> MayCauseMagmaSurface(x,y))", "all x y.((OceanPlate(x) & SubductionOf(x,y)) -> CausesMagmaSurface(x,y))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> MayCauseMagmaToSurface(x,y))", "all x y z.((SubductionOfOceanPlaque(x) & OceanicPlate(y) & Magma(z) & SubductionOf(z,y)) -> MayCauseSurface(z,horz))", "all x y.((SubductionOcean(x) & OceanicPlate(y)) -> (MagmaSurfaceFromBunker(x)))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> MayCauseMagmaToSurface(x,y))", "all x.(SubductionOfOceanPlate(x) -> CanCauseMagmaSurface(x))", "all x y.((SubductionOceanPlace(x) & OceanicPlate(y)) -> MayCauseMagmaToSurface(x,y))"]}
{"id": "entailmentbank_validation_178", "nl": "magma cools down when it comes to the surface from underneath.", "fol": "", "prediction": ["all x y.((Magma(x) & Surface(y) & Burden(z)) -> CoolsDown(x,y,z))", "all x y.((Magma(x) & Surface(y) & FromUnderside(x)) -> CoolsDown(x))", "all x.((Magma(x) & Surface(y) & FromUnderside(x,y)) -> CoolsDown(x))", "all x.((Magma(x) & SurfaceFromUnderside(x)) -> CoolsDown(x))", "all x.((Magma(x) & ComesToSurfaceFromUnderside(x)) -> CoolsDown(x))", "all x.((Magma(x) & Surface(y) & Underside(z)) -> CoolsDown(x,y,z))", "all x y.((Magma(x) & Surface(y) & UndersideOf(x,y)) -> CoolsDown(x,y))", "all x y.((Magma(x) & SurfaceFromBottom(x)) -> CoolsDown(x))", "all x.((Magma(x) & Surface(y) & Underside(z)) -> CoolsDown(x,y,z))", "all x y z.((Magma(x) & Surface(y) & Underside(z)) -> CoolingDown(x))", "all x y.((Magma(x) & Surface(y) & FromUnderside(x,y)) -> CoolsDown(x,y))", "all x.((Magma(x) & Surface(x) & Underside(x)) -> CoolsDown(x))", "all x y.((Magma(x) & Surface(y) & Underneath(x)) -> CoolsDown(x,y))", "all x.((Magma(x) & SurfaceFromBottom(x)) -> CoolsDown(x))", "all x y z.((Magma(x) & Surface(y) & Underside(z)) -> CoolsDown(x,y,z))", "all x y z.((Magma(x) & Surface(y) & Underside(z)) -> CoolsDownToBelow(x,y,z))"]}
{"id": "entailmentbank_validation_179", "nl": "the subduction of an oceanic plate will cause magma to surface and cool down.", "fol": "", "prediction": ["all x y.((Subduction(x) & OceanicPlate(y)) -> (CausesMagmaToSurface(x,y) & CoolsDown(x,y)))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> (CausesMagmaSurface(x,y) & CoolsDown(x,y)))", "all x y z.((OceanicPlate(x) & Subduction(y) & OceanicPlate(z) & Magma(x)) -> (CausesToSurface(x,z) & CoolsDown(x,z)))", "all x y.((OceanPlate(x) & Subduction(x,y)) -> CausesMagmaToSurfaceAndCoolDown(y))", "all x.(SubductionOceanPlate(x) -> (MagmaSurface(x) & CoolDown(x)))", "all x y.((OceanPlate(x) & OceanicPlate(y) & Subduction(x,y)) -> (Magma(x) & Surface(y) & CoolDown(y)))", "all x.((SubductionOcean(x) & OceanicPlate(x)) -> (MagmaSurface(x) & CoolDown(x)))", "all x.((OceanPlate(x) & OceanicPlate(x)) -> CauseMagmaToSurfaceAndColdDown(x))", "all x y.((OceanPlate(x) & Subduction(x,y)) -> (MagmaSurface(y) & CoolsDown(y)))", "all x y.((SubductionOceanPile(x) & OceanicPlate(y)) -> (MagmaSurface(x,y) & CoolsFoot(x)))", "all x.(SubductionOceanCell(x) -> (MagmaSurface(x) & CoolDown(x)))", "all x y.((OceanPlate(x) & SubductionOf(x,y) & MagmaSurface(y) & CoolDown(y)) -> Causes(x,y))", "all x y z.((OceanPlate(x) & Subduction(y) & Magma(z) & Subduction(z)) -> (CausesSurface(z,x) & CoolsDown(z)))", "all x.((OceanPressure(x) & SubductionOf(x,EarthCrust)) -> (MagmaSurface(x) & CoolDown(x)))", "all x y.((OceanPlate(x) & OceanicPlate(y)) -> (Subduction(x,y) & CausesMagmaToSurface(x) & CoolsDesert(x)))", "all x.(MinutionOceanPlate(x) -> (MagmaSurface(x) & CoolDown(x)))"]}
{"id": "entailmentbank_validation_180", "nl": "magma cooling can form volcanic mountains.", "fol": "", "prediction": ["all x.(MagmaCooling(x) -> CanFormVolcanicMountains(x))", "all x.(MagmaCooling (x) -> LikesVolcanicMountains(x))", "all x.(MagmaClimate(x) -> FormsVolcanicMountains(x))", "all x.(MagmaCooling(x) -> CanFormVolcanicMountains(x))", "all x.(MagmaCooling(x) -> CanFormVolcanicMountains(x))", "all x.(MagmaCooling(x) -> CanFormVolcanicMountains(x))", "all x.(MagmaCooling(x) -> FormsVolcanicMountains(x))", "all x.(MagmaCooling(x) -> CanFormVolcanicMountains(x))", "all x.(MagmaCooling(x) -> CanFormVolcanicMountains(x))", "all x.(MagmaCooling(x) -> CreatesVolcanicMountains(x))", "all x.(MagmaCooling(x) -> FormsVolcanicMountains(x))", "all x.(MagmaCooling(x) -> CanFormVolcanicMountains(x))", "all x.(MagmaCooling(x) -> CanFormVolcanicMountains(x))", "all x.(MagmaColding(x) -> CanFormenVolcanicMountains(x))", "all x.(MagmaCooling(x) -> CanFormVolcanicMountains(x))", "all x.(MagmaCooling(x) -> CanFormVolcanicMountains(x))"]}
{"id": "entailmentbank_validation_181", "nl": "the subduction of an oceanic plate can form volcanic mountians.", "fol": "", "prediction": ["all x y.((SubductionLime(x) & OceanicPlate(y)) -> CanFormVolcanicMountainians(x,y))", "all x.(SubductionOfOceanPlate(x) -> FormVolcanicMonotories(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> FormsVolcanicMountainians(x))", "all x y.((Subduction(x,y) & OceanicPlate(y)) -> CanFormVolcanicMountainians(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y) & FormsVolcanicMountians(x)) -> CanForm(x,y))", "all x.(SubductionOceanPlate(x) -> FormsVolcanicMonotians(x))", "all x.(SubductionOceanPlate(x) -> CanFormVolcanicMountainians(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y) & HasSubduction(x,y)) -> CanFormVolcanicMountains(x))", "all x.((SubductionOceanPlate(x) & OceanicPlate(y)) -> FormsVolcanicMonotians(x))", "all x.(SubductionOceanPlate(x) -> CanFormVolcanicMontanians(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> CanFormVolcanicMonitorians(x))", "all x.(SubductionOceanPlate(x) -> CanFormVolcanicMountainians(x))", "all x.((SubductionOceanPlate(x) & OceanicPlate(x)) -> FormVolcanicMountainians(x))", "all x.((SubductionOceanPlate(x) & OceanicPlate(x) & VolcanicMountain(x)) -> Forms(x,v))", "all x.((OceanPlate(x) & OceanicPlate(y)) -> FormsVolcanicMonopoles(x,y))", "all x y.((OceanPlate(x) & Subduction(x,a)) -> CanFormVolcanicMontians(x))"]}
{"id": "entailmentbank_validation_182", "nl": "emitting sulfur dioxide causes acid rain.", "fol": "", "prediction": ["all x y.((SulfurDioxide(x) & Emits(x,y)) -> CausesAcidRain(x))", "all x.((Emitting(x,sulfurDioxide) & AcidRain(x)) -> Causes(x,saltyWater))", "all x.(EmittingSulfurDioxide(x) -> CausesAcidRain(x))", "all x.(EmittingSulfurDioxide(x) -> CausesAcidRain(x))", "all x.((EmitsSulfurDioxide(x) & CausesAcidRain(x)) -> CarbonDisoxideCausesAcidRain(x))", "all x.((EmittingSulfurDioxide(x) & AcidRain(x)) -> Causes(x,acidRain))", "all x.((EmittingSulfurDioxide(x) & AcidRain(x)) -> Causes(x))", "all x.((EmitsSulfurDioxide(x) & CausesAcidRain(x)) -> Oxidation(x))", "all x.((SulfurDioxide(x) & Emits(x,salt)) -> CausesAcidRain(x))", "all x.((EmitsSulfurDioxide(x) & AcidRain(x)) -> Causes(x,acidrain))", "all x.((EmittingSulfurDioxide(x) & AcidRain(x)) -> Causes(x,AcidRain))", "all x.((EmittingSulfurDioxide(x) & CausesAcidRain(x)) -> CausesAcidRain(x))", "all x.((EmitsSulfurDioxide(x) & CausesAcidRain(x)) -> CausesRain(x))", "all x.(EmitsSulfurDioxide(x) -> CausesAcidRain(x))", "all x.(EmittingSulfurDioxide(x) -> CausesAcidRain(x))", "all x.((EmittingSulfurDioxide(x) & AcidRain(x)) -> Causes(x,AcidRain))"]}
{"id": "entailmentbank_validation_183", "nl": "volcanic ash in the atmosphere decreases the temperature by blocking the sun.", "fol": "", "prediction": ["all x y z.((VolcanicAsh(x) & Temperature(y) & Sun(z) & LocatedInAtmosphere(x) & Block(x,z)) -> Decreases(x,y,z))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperatureByBlockingSun(x,y)))", "all x y.((VikingAsh(x) & Atmosphere(y)) -> (DecreasesTemperature(x,y) & BlocksSun(x,y)))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> DiesModeratorTemperature(x,y))", "all x y.((VolcanicAsh(x) & Atmosphere(y) & Blocks(x,y) & DisplacesTemperature(x)) -> IncreasesTemperature(x,y))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> DecreasesTemperatureByBlockingSun(x,y))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> DecreasesTemperatureByBlockingSun(x,y))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperature(x,y) & BlocksSun(x)))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperatureByBlockingSun(x,y)))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> DecreasesTemperatureAndBlocksSun(x,y))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> DecreasesTemperatureByBlockingSun(x,y))", "all x.((VolcanicAsh(x) & AccumulatedAtmosphere(x)) -> DecreasesTemperatureByBlockingSun(x))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> DecreasesTemperatureByBlockingSun(x,y))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperatureByBlockingSun(x,y)))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> DecreasesTemperatureByBlockingSun(x))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperature(x,y) & BlocksSun(x,y)))"]}
{"id": "entailmentbank_validation_184", "nl": "an erupting volcano releases sulfur gas and ash into the atmosphere.", "fol": "", "prediction": ["all x.((Volcano(x) & Erupting(x)) -> ReleaseSulfurGasAndAshIntoAtmosphere(x))", "all x.(EruptingVolcano(x) -> (ReleasesSulfurGas(x) & ReleasesAsh(x)))", "all x.((Volcano(x) & Erupting(x)) -> Release(x,sulfurGas,ash))", "all x.(EruptingVolcano(x) -> ReleasesSulfurGasAndAsh(x))", "all x y z.((EruptingVolcano(x) & SulfurGas(y) & Ash(z)) -> ReleasesToAtmosphere(x,y,z))", "all x.((Volcano(x) & Erupting(x)) -> ReleasesSulfurGasAndAsh(x))", "all x.((Volcano(x) & Erupting(x)) -> (ReleasesSulfurGas(x) & ReleasesAsh(x)))", "all x.((Volcano(x) & Erupting(x)) -> ReleasesSulfurGasAndAshIntoAtmosphere(x))", "all x.(EruptingVolcano(x) -> (ReleasesSulfurGas(x) & ReleasesAsh(x)))", "all x.((Volcano(x) & Erupting(x)) -> (ReleasesSulfurGas(x) & ReleasesAsh(x)))", "all x.((Volcano(x) & Erupting(x)) -> ReleasesSulfurGasAndAsh(x))", "all x.(EruptingVolcano(x) -> (ReleasesSulfurGas(x) & ReleasesAsh(x)))", "all x.(EruptingVolcano(x) -> ReleasesSulfurGasAndAsh(x))", "all x.(EruptingVolcano(x) -> ReleasesSulfurGasAndAshIntoAtmosphere(x))", "all x.(EruptingVolcano(x) -> (ReleasesSulfurGas(x) & ReleasesAsh(x)))", "all x.(EruptingVolcano(x) -> (ReleasesSulfurGas(x) & ReleasesAsh(x)))"]}
{"id": "entailmentbank_validation_185", "nl": "a volcanic eruption can cause acid rain and decrease the temperature.", "fol": "", "prediction": ["all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & DecreasesTemperature(x)))", "all x.((VolcanicEruption(x) & CausesAcidRain(x) & DecreasesTemperature(x)) -> CanDecreaseTemperature(x))", "all x.((VolcanicEruption(x) & CausesAcidRain(x) & DecreasesTemperature(x)) -> Causes(x,AcidRain,Temperature))", "all x.(VolcanicEruption(x) -> (EndsAcidRain(x) & DecreasesTemperature(x)))", "all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & DecreasesTemperature(x)))", "all x.((VolcanicEruption(x) & CausesAcidRain(x) & DecreasesTemperature(x)) -> CanCause(x,AcidRain(x))", "all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & DecreasesTemperature(x)))", "all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & DecreasesTemperature(x)))", "all x.((VolcanicEruption(x) & CausesAcidRain(x) & DecreasesTemperature(x)) -> CanCause(x,AcidRain))", "all x y.((VolcanicEruption(x) & CausesAcidRainDecreasesTemperature(x)) -> Cures(x,y))", "all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & DecreasesTemperature(x)))", "all x y.((VolcanicEruption(x) & AcidRain(y) & TemperatureDecrease(y)) -> CanCause(x,y))", "all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & DecreasesTemperature(x)))", "all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & DecreasesTemperature(x)))", "all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & DecroisesTemperature(x)))", "all x y z.((VolcanicEruption(x) & AcidRain(y) & Temperature(z)) -> (Causes(x,y) & Decreases(x,z)))"]}
{"id": "entailmentbank_validation_186", "nl": "europe was unusally cold and had acid rain in 1783.", "fol": "", "prediction": ["all x.((Europe(x) & UnusallyCold(x) & AcidRain(x)) -> In1783(x))", "all x.((Europe(x) & UnusallyCold(x) & AcidRain(x)) -> 1783(x))", "all x.((European(x) & UnusallyCold(x) & AcidRain(x)) -> 1783(x))", "all x.(European(x) -> (UnusallyCold(x) & AcidRain(x)))", "all x.(Europe(x) -> (UnusallyCold(x) & AcidRain(x,1783)))", "all x.(Europe(x) -> (UnusallyCold(x) & AcidRain(x)))", "all x.(Europe(x) -> (UnusallyCold(x) & AcidRain(x,1783)))", "all x.(Europe(x) -> (UnusallyCold(x) & AcidRain(x)))", "all x y z.((Europe(x) & Ice(y) & AcidRain(z)) -> (UnusallyCold(x,y) & AcidRain(x 24.(y) & 1783(z))))", "all x.((European(x) & UnusallyCold(x) & AcidRain(x)) -> In(x,1783))", "all x.(Europe(x) -> (UnusallyCold(x) & AcidRain(x)))", "all x.(Europe(x) -> (UnusallyCold(x) & HadAcidRain(x,1783)))", "all x.(Europe(x) -> (UnusallyCold(x) & AcidRain(x) & 1683(x)))", "all x y.((European(x) & UnusallyCold(x) & AcidRain(y)) -> 1783(x))", "all x.(Eutropera(x) -> (UnusallyCold(x) & AcidRain(x)))", "all x y.((Europe(x) & UnusallyCold(x)) -> AcidRain(x,1783))"]}
{"id": "entailmentbank_validation_187", "nl": "a volcanic eruption may have happened to cause the cold weather and acid rain.", "fol": "", "prediction": ["all x.(VolcanicEruption(x) -> Caused(x, ColdWeather) & AcidRain(x))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(y)) -> MayOccurred(x,y))", "all x.(VolcanicEruption(x) -> (CausedColdWeather(x) & CausedAcidRain(x)))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(y)) -> Affected(x,y))", "all x.(VolcanicEruption(x) -> (CausedColdWeather(x) & AcidRain(x)))", "all x.(VolcanicEruption(x) -> (ContributesToColdWeather(x) & CausesAcidRain(x)))", "all x.(VolcanicEruption(x) -> (PausedToCueColdWeatherAndAcidRain(x)))", "all x.((VolcanicEruption(x) & ColdWeather(x) & AcidRain(x)) -> Happened(x))", "all x.(VolcanicEruption(x) -> (OracledSoonForColdWeatherAndAcidRain(x)))", "all x.(VolcanicEruption(x) -> (OccursToCauseColdWeather(x) & CausesAcidRain(x)))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(y)) -> Y.((Eruption(x) & ColdWeather(x,y)) & AcidRain(x,y)))", "all x y z.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(z)) -> (Gasts(x,y) & Causes(x,z)))", "all x.(VolcanicEruption(x) -> (CausedColdWeather(x) & AcidRain(x)))", "all x.(VolcanicEruption(x) -> (Occurred(x,ColdWeather) & AccidRain(x)))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(y)) -> HappenedToCause(x,y))", "all x.(VolcanoEruption(x) -> (YetSuredColdWeather(x) & AcidRain(x)))"]}
{"id": "entailmentbank_validation_188", "nl": "the earth's atmosphere is made of 78 percent nitrogen by mass.", "fol": "", "prediction": ["all x y.((EarthAtmosphere(x) & Nitric(y)) -> (MadeOf(x,y) & 78Pent(x,y,z)))", "all x.(EarthsAtmosphere(x) -> 78PentNitrogenByMass(x))", "all x.(EarthsAtmosphere(x) -78PercentNitrogenByMass(x))", "all x y.((EarthSatmosphere(x) & Sodium(y) & 70RecentByMass(x,y)) -> MadeOf(x,y))", "all x.((EarthsAtmosphere(x) & MadeOf(x,78)) -> NitrogenByMass(x))", "all x.(EarthsAtmosphere(x) -> (HasNitrogenInMass(x,78)))", "all x y.((EarthsAtmosphere(x) & Nitrogen(y)) -> (Beneath(x,y) & MadeOf(x,y) & 78PercentByMass(x)))", "all x.((EarthsAtmosphere(x) & MadeOf(x,78)) -> NitrogenByMass(x))", "all x y.((EarthsAtmosphere(x) & Molecule(y)) -> (RequiresNitrogen(x,y) & 78PercentByMass(x,y)))", "all x.((EarthsAtmosphere(x) & MakesOfNitrogen(x,78)) -> MadeOfNitrogen(x))", "all x.(EarthsAtmosphere(x) -> (MadeOf(x,78) & Contains(x,78)))", "all x.((EarthsAtmosphere(x) & Makes(x,78)) -> Nitrogen(x))", "all x.(Atmosphere(x) -> MadeOf(x,78))", "all x.((EarthsAtmosphere(x) & MadeOf(x,78)) -> NitrogenByMass(x))", "all x.(EarthsAtmosphere(x) -> MadeOf(x,78))", "all x.((EarthAtmosphere(x) & 78PercentNitrogenAtmosphere(x,mass)) -> MadeOf(x))"]}
{"id": "entailmentbank_validation_189", "nl": "most means over 50% of something.", "fol": "", "prediction": ["all x.(Methers(x,over50%)) -> ProbablyIs(x))", "all x.(MeansOver50%OfSomething(x) -> Medium(x))", "all x y.((Sound(x) & Measure(y,x) & Over50%(x,y)) -> MinimumFaith(x,y))", "all x.(MoreFaithOrLimit(x) -> MeansOver50%(x))", "all x.((MeansOver50%(x) & Somewhat(x)) -> Allowed(x))", "all x y.((MeasuresOver50(x) & SomeThing(y)) -> Over50(x))", "all x.(More(x,50%) -> MeansOver50%(x))", "all x y.((More(x,y) & More(y)) -> Over50%OfWhat(x))", "all x.(MeansOver50%(x) -> Means(x))", "all x y.((More(x,y) & Over50PercentInFacing(y)) -> Means(x,y))", "all x.(MeansOver50(x))", "all x.(MoreMeantOver50Percent(x) -> Means(x,100))", "all x y.((More(x) & NumberOfCross(y)) -> OverFiftyPercent(x,y))", "all x.(MoreManyMeasuresOver50Percent(x) -> MoreInformation(x))", "all x.(WithoutHearingHunder50(x) -> TypicallyMight(x))", "all x.(MeansOverFifty(x) -> Means(x))"]}
{"id": "entailmentbank_validation_190", "nl": "the earth's atmosphere is made of mostly nitrogen.", "fol": "", "prediction": ["all x.(EarthsAtmosphere(x) -> (MadeOfNitrogen(x) & MostlyNitrogen(x)))", "all x.((Earth(x) & Atmosphere(x)) -> MadeOfNitrogen(x))", "all x.(EarthsAtmosphere(x) -> MakesOfNitrogen(x))", "all x.(EarthsAtmosphere(x) -> MadeOfNitrogen(x))", "all x.(EarthsAtmosphere(x) -> MostlyNitrogen(x))", "all x.(EarthsAtmosphere(x) -> MostAtmosphereOfNitrogen(x))", "all x.(EarthsAtmosphere(x) -> MajorityNitrogen(x))", "all x.(EarthsAtmosphere(x) -> (MadeOfNitrogen(x) & MainlyNitrogen(x)))", "all x.(EarthsAtmosphere(x) -> MadeOfNitrogen(x))", "all x.(EarthsAtmosphere(x) -> PrimarilyNitrogen(x))", "all x.(EarthsAtmosphere(x) -> MeasurableOfNitrogen(x))", "all x.(EarthsAtmosphere(x) -> (MadeOfNitrogen(x) & MostlyNitrogen(x)))", "all x.(EarthsAtmosphere(x) -> MakesOfNitrogen(x))", "all x.((EarthsAtmosphere(x) & MostlyNitrogen(x)) -> MadeOf(x))", "all x.(EarthsAtmosphere(x) -> MainlyNitrogen(x))", "all x y.((EarthsAtmosphere(x) & BasicallyNewNitrogen(x)) -> MadeOf(x,y))"]}
{"id": "entailmentbank_validation_191", "nl": "oceans cover 70% of the surface of the earth.", "fol": "", "prediction": ["(occupiers(oceans) & -70%OfSurface(ocean))", "all x y.((Ocean(x) & Earth(y)) -> CoversSurface(x,y))", "all x y z.((Ocean(x) & Surface(y) & Earth(z)) -> Covers(x,y,z))", "all x.(Ocean(x) -> Covers69%OfEarth(x))", "all x y z.((Ocean(x) & Earth(y) & Surface(z)) -> Covers(x,y,z))", "all x.((Ocean(x) & EarthSurface(x,70)) -> Covers(x,70))", "all x.(Ocean(x) -> CoversCoverage(x,75%))", "all x.(Ocean(x) -> CoversSurfaceOfEarth(x,70))", "all x.(Ocean(x) -> Covers70%OfEarthSurface(x))", "all x.(Ocean(x) -> CoversSurfaceOf(x,70))", "all x.(Ocean(x) -> Covers80%(x,EarthSurface))", "all x.(Ocean(x) -> CoversSurface(x,70,EarthBody))", "all x y.((Ocean(x) & Earth(y)) -> CoversAquariumSurface(x,y))", "all x y z.((Ocean(x) & Earth(y) & Surface(z)) -> Covers70%(x,z))", "all x.(Ocean(x) -> Covers(x,70))", "all x.(Ocean(x) -> (Covers(x,70) & (SurfaceOfEarth(x,7) | SurfaceOfEarth(x,7))))"]}
{"id": "entailmentbank_validation_192", "nl": "oceans cover most of earth's surface.", "fol": "", "prediction": ["all x.(Ocean(x) -> CoversMostOfEarthSurface(x))", "all x.(Ocean(x) -> CoversEarthSurface(x))", "all x.(Ocean(x) -> CoversMostOfEarthSurface(x))", "all x.(Ocean(x) -> CoversMostOfEarthsSurface(x))", "all x y.((Ocean(x) & EarthsSurface(y)) -> CoversOverall(x,y))", "all x.(Ocean(x) -> CoversMostOfEarthSurface(x))", "all x.(Ocean(x) -> (CoversSurface(x) & CoversSurface(x)))", "all x.(Ocean(x) -> CoversEarthSurface(x))", "all x.(Ocean(x) -> (CoversMostOfEarth(x)))", "all x.(Ocean(x) -> CoversMostOfEarthsSurface(x))", "all x.(Ocean(x) -> CoversMostOfEarth(x))", "all x.(Ocean(x) -> DisappearsAndCoversSurface(x))", "all x.(Ocean(x) -> CoversMost(x,EarthsSurface))", "all x.(Ocean(x) -> CoversMostOfEarthSurface(x))", "all x.(Ocean(x) -> CoversMost(x,EarthSurface))", "all x.(Ocean(x) -> CoversMostOfEarthSurface(x))"]}
{"id": "entailmentbank_validation_193", "nl": "an ocean is a kind of body of water.", "fol": "", "prediction": ["all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> (BodyOfWater(x) & BelongsToWater(x)))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))"]}
{"id": "entailmentbank_validation_194", "nl": "water covers most of earth's surface.", "fol": "", "prediction": ["all x.(Water(x) -> CoversMostOfEarthSurface(x))", "all x y.((Water(x) & EarthSurface(y)) -> Covers(x,y))", "all x.(Water(x) -> CoversMostOfEarthSurface(x))", "all x.(Water(x) -> CoversMoreEarthSurface(x))", "all x.(Water(x) -> (CoversMostOfEarthsSurface(x)))", "all x.(Water(x) -> CoversEarthsSurface(x))", "all x.(Water(x) -> CoversMostAssureSurface(x))", "all x y.((Water(x) & Earth(y)) -> CoversSurface(x,y))", "all x!(Water(x) -> CoversMostOfEarthSurface(x))", "all x.(Water(x) -> CoversMostOfEarthSurface(x))", "all x y.((Water(x) & Earth(y)) -> CoversMost(x,y))", "all x.(Water(x) -> CoversMostOfEarthSurface(x))", "all x y z.((Water(x) & EarthSurface(y)) -> Covers(x,y))", "ALL NEXT ((Water(n) & EarthsSurface(n)) v2 (WaterSurface(n) & WaterCoversSurface(n)))", "all x y.((Water(x) & EarthSurface(y)) -> Covers(x,y))", "all x.((Water(x) & EarthSurface(x)) -> Covers(x,y))"]}
{"id": "entailmentbank_validation_195", "nl": "oceans contain most of earth's water.", "fol": "", "prediction": ["all x y.((Ocean(x) & EarthsWater(y)) -> Contain(x,y))", "all x.(Ocean(x) -> (ContainsEarthsWater(x) & LivesIn(x,y)))", "all x.(Ocean(x) -> ContainsMuchOfEarthsWater(x))", "all x.(Ocean(x) -> Contain99%OfEarthsWater(x))", "all x.(Ocean(x) -> ContainsMost(x,EarthsWater))", "all x y.((Ocean(x) & EarthsWater(y)) -> Contains(x,y))", "all x y.((Ocean(x) & Earth(y)) -> ContainsMostOfWater(x,y))", "all x.(Ocean(x) -> MostAreasOfWater(x))", "all x.(Ocean(x) -> ContainsMostOfEarthsWater(x))", "all x.(Ocean(x) -> ContainsMinoritiesOfEarthsWater(x))", "all x.(Ocean(x) -> ContainsMostOfEarthsWater(x))", "all x.(Ocean(x) -> (ContainsMostOfWater(x,Earth)))", "all x y.((Ocean(x) & EarthsWater(y)) -> ContainsMuch(x,y))", "all x y.((Ocean(x) & EarthWater(y)) -> Contains(x,y))", "all x.(Ocean(x) -> (ContainsAll(x,EarthSeed) & Contains(x,EarthSeed)))", "all x.(Ocean(x) -> EarthsWater(x))"]}
{"id": "entailmentbank_validation_196", "nl": "water is made of hydrogen and oxygen.", "fol": "", "prediction": ["all x.(Water(x) -> (Hydrogen(x) & Oxygen(x)))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(Water(x) -> (Hydrogen(x) & Oxygen(x)))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(Water(x) -> (MadeOf(x,Hydrogen) & MadeOf(x,Oxygen)))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(Water(x) -> (HasHydrogen(x) & HasOxygen(x)))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(Water(x) -> (madeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))"]}
{"id": "entailmentbank_validation_197", "nl": "ocean water is made of hydrogen and oxygen.", "fol": "", "prediction": ["all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(OceanWater(x) -> (MakesOfHydrogen(x) & MakesOfOxygen(x)))", "all x.(OceanWater(x) -> (Hydrogen(x) & Oxygen(x)))", "all x.(OceanWater(x) -> (MadeOfHomogeneity(x) & MadeOfOxygen(x)))", "all x.(OceanWater(x) -> MadeOfHydrogen(x) & MadeOfOxygen(x))", "all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(OceanWater(x) -> (Hydrogen(x) & Oxygen(x)))", "all x.(OceanWater(x) -> (HasHydrogen(x) & HasOxygen(x)))", "all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(OceanWater(x) -> (Hazard(x) & Oxygen(x)))", "all x.(OceanWater(x) -> exists y z.(Hydrogen(y) & Oxygen(z) & MadeOf(x,y)))", "all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(OceanWater(x) -> (MadeOfHoxygen(x) & MadeOfOxygen(x)))"]}
{"id": "entailmentbank_validation_198", "nl": "oxygen is more common than hydrogen on earth.", "fol": "", "prediction": ["all x y.((Oxygen(x) & Hydrogen(y)) -> MoreCommon(x,y))", "all x.((Oxygen(x) & Hydrogen(x)) -> MoreCommonOnEarth(x))", "all x.(Oxygen(x) -> CommonerOnEarth(x,y))", "all x.((Oxygen(x) & Hydrogen(y)) -> MoreCommonOnEarth(x,y))", "all x.((Oxygen(x) -> MoreCommonThatHydrogen(x))", "all x y.((Oxygen(x) & Hydrogen(y)) -> MoreCommonOnEarth(x,y))", "all x y.((Oxygen(x) & Hydroxygen(y)) -> MoreCommonOnEarth(x,y))", "all x.(Oxygen(x) -> (MoreCommonOnEarth(x,y) & MoreCommonOnEarth(x,y)))", "all x.(Oxygen(x) -> RarerThanHydrogenOnEarth(x))", "all x y.((Oxygen(x) & Hydrogen(y)) -> MoreCommonOnEarth(x,y))", "all x.(Oxygen(x) -> MoreCommonThanHydrogen(x))", "all x.((Oxygen(x) & Hydrogen(x)) -> MoreVariety(x,Earth))", "all x y.((Oxygen(x) & Hydrogen(y)) -> MoreCommonOnEarth(x,y))", "ALL x.((Oxygen(x) & Hydroxygen(x)) -> MoreCommonOnEarth(x,y))", "all x y.((Oxygen(x) & Hydroxygen(y)) -> CommonOnEarth(x,y))", "all x.(Oxygen(x) -> MoreCommonThanHydrogen(x,Earth))"]}
{"id": "entailmentbank_validation_199", "nl": "oxygen is the most common element found in the compounds that make up ocean water.", "fol": "", "prediction": ["all x.((Oxygen(x) & Compound(x,y) & MakesUpOceanWater(x,y)) -> CommonElementFoundInOceanWater(x))", "all x.(Orbital(x) -> MostCommonElementInCompounds(x))", "all x.(Orbital(x) -> FoundInCompounds(x))", "all x y.((Oxygen(x) & Compound(y)) -> MostCommonElementIn(x,y))", "all x y.((Oxygen(x) & OceanWater(y)) -> (MostCommonElement(x,y) & FoundInCompounds(x,y)))", "all x.(Oxygen(x) -> (MostCommonElement(x,Compounds) & MakesOceanWater(x)))", "all x y.((Oxygen(x) & OceanWater(y)) -> CommonElementInCompounds(x,y))", "all x y.((Oxygen(x) & Compound(y)) -> (MostCommonElement(x,y,MakingUpOceanWater)))", "all x.(Oxygen(x) -> (MostCommonElement(x) & FoundInCompounds(x) & MakesUpOceanWater(x)))", "all x.(OxygenChemistry(x) -> CommonElementInOceanWater(x))", "all x.(Oxygen(x) -> (MostCommonElement(x,y) & Compounds(x,y)))", "all x.(Oxygen(x) -> (CompoundsMakeUpOceanWater(x) & MostCommonElement(x)))", "all x.(Oxygen(x) -> (HasMadeUpOrganicWater(x) & MostCommonElement(x)))", "all x y.((OxygenElement(x) & OceanWater(y)) -> MostCommonElementRelatedToCompounds(x,y))", "all x.(Oxygen(x) -> CommonElementInCompounds(x))", "all x.(Oxygen(x) -> CommonElementInCompoundsOceanWater(x))"]}
{"id": "entailmentbank_validation_200", "nl": "if something is permeable, then the water will flow through something easily.", "fol": "", "prediction": ["all x.((Permeable(x) -> WaterFlowsImprovely(x))", "all x.((WhatisPermeable(x) & WaterFlowsEasily(x)) -> Permeable(x))", "all x.(Permeable(x) -> WaterFlowsEfficiently(x))", "all x.((Water(x) & Permeable(x)) -> WaterFlowsEasily(x))", "all x.((Permeable(x) & WaterFlowsWithoutEngagement(x)) -> Permeable(x))", "all x.((Permeable(x) -> WaterFlowsEasily(x))", "all x y.((Water(x) & Permeable(x) & Material(y)) -> FlowsEasily(x,y))", "all x.((Water(x) & Permeable(x)) -> FlowsFacilly(x))", "all x.((Permeable(x) & WaterFlowsInto(x)) -> EasyFlow(x))", "all x.((Permeable(x) & WaterFlowsEasily(x)) -> Permeable(x))", "all x.((Permeable(x) & WaterFlowsThrough(x)) -> WaterFlowsEasily(x))", "all x.((Water(x) & Permeable(x)) -> WaterFlowsEasily(x))", "all x.((Permeable(x) & HasPenetrable(x)) -> WaterFlowsInEasily(x))", "all x.((Permeable(x) & WaterFlowsWithoutFailing(x)) -> Permeable(x))", "all x.((Permeable(x) & WaterFlowsEasily(x)) -> Permeable(x))", "all x.(Permeable(x) -> WaterFlowsEasily(x))"]}
{"id": "entailmentbank_validation_201", "nl": "soil is permeable.", "fol": "", "prediction": ["all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permable(x))", "all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))"]}
{"id": "entailmentbank_validation_202", "nl": "water will flow through soil easily.", "fol": "", "prediction": ["all x y.((Water(x) & Soil(y)) -> FlowsEasily(x,y))", "all x.(Water(x) -> FliesEasilyThroughSoil(x))", "all x.(Water(x) -> (FlowInSoil(x) & Easily(x)))", "all x.(Water(x) -> VeryEfficient(x))", "all x.(WhichWoodFlows(x,Soil)) -> Easily(x))", "all x.(Water(x) -> FlowsEasily(x))", "all x.(Water(x) -> FlowsThroughSoil(x))", "all x.(Water(x) -> FlowsIntoSoil(x))", "all x y.((Water(x) & Soil(y)) -> FlowsEasily(x,y))", "all x.(Water(x) -> FlowsThroughSoil(x))", "all x.(Water(x) -> FlowsEasily(x))", "all x.(Water(x) -> WaterFlowsEasily(x))", "all x.(Water(x) -> FlowsEasily(x,Soil))", "all x y.((Water(x) & Soil(y)) -> WeighsThan(x,y))", "all x y.((Water(x) & Soil(y)) -> FliesEasily(x,y))", "all x y.((Water(x) & Soil(y)) -> FliesEasily(x,y))"]}
{"id": "entailmentbank_validation_203", "nl": "color of the soil can be used to indicate the soil component.", "fol": "", "prediction": ["all x.((Soil(x) & ColorOfSoil(x)) -> IndicatesSoilComponent(x))", "all x y.((Soil(x) & SoilComponent(y)) -> ColorIndic\u0103ting(x,y))", "all x y.((Soil(x) & Soil(y) & ColorOf(x,y)) -> IndicatesSoilComponent(x,y))", "all x y z.((SoilComponent(x) & Color(y) & SoilComponent(z)) -> Indicate(x,y,z,x))", "all x y.((Soil(x) & Color(y)) -> IndicatesSoilComponent(x,y))", "all x.(SoilComponent(x) -> (ColourSoil(x) & IndicateSoilComponent(x)))", "all x.(ColourOfSoil(x) -> IndicatesSoilComponent(x))", "all x.((Soil(x) & ColorOfSoil(x)) -> CanIndicateSoilComponent(x))", "all x.((Soil(x) & Color(x)) -> IndicatesSoilComponent(x))", "all x y.((SoilComponent(x) & SoilColor(y)) -> Indicates(x,y))", "all x y.((Soil(x) & SoilComponent(y)) -> CanIndicate(x,y))", "all x.((Soil(x) & ColorOfSoil(x)) -> IndicatesSoilComponent(x))", "all x.(Soil(x) -> IndicatesSoilComponent(x))", "all x y z.((Soil(x) & SoilColor(y) & SoilComponent(z)) -> Identifies(x,y,z))", "all x y.((SoilComponent(x) & SoilColor(y)) -> IndicatesComponent(y,x))", "all x y.((Soil(x) & ColorOfSoil(y)) -> CanIndicateSoilComponent(x,y))"]}
{"id": "entailmentbank_validation_204", "nl": "high humus content causes the soil to be brown.", "fol": "", "prediction": ["all x.((HumusContent(x) & Soil(s) & High(x,s)) -> Brown(s))", "all x.(HighHumorContent(x) -> SoilBrown(x))", "all x.(HighHumorContent(x) -> SoilBrown(x))", "all x.(HighHumusContent(x) -> CausesBrownSoil(x))", "all x.(HighHumusContent(x) -> SoilBrown(x))", "all x.(HighHumusContent(x) -> BrownSoil(x))", "all x y.((HighHumidContent(x) & Soil(y)) -> CausesBrown(y))", "all x.(HighHumusContent(x) -> SoilBrown(x))", "all x.((HumusContent(x) & SoilBrown(x)) -> High(x))", "all x.((HighHumusContent(x)) -> BrownSoil(x))", "all x.((HasHumusContent(x) & SoilBrown(x)) -> High(x))", "all x.(HighHumorContent(x) -> BrownSoil(x))", "all x.((HighHumidContent(x) & RedSoil(x)) -> Causes(x,Soil,Soil))", "all x y.((HighHumusContent(x) & Soil(y)) -> Brown(y))", "all x.((HumusContent(x) & Soil(y)) -> Brown(y))", "all x.(HighHumidContent(x) -> BrownSoil(x))"]}
{"id": "entailmentbank_validation_205", "nl": "brown is a kind of color.", "fol": "", "prediction": ["exists x.(Brown(x) & Color(x))", "all x.(Brown(x) -> Color(x))", "all x.(Brown(x) -> Color(x))", "all x.(Brown(x) -> Color(x))", "all x.(Brown(x) -> Color(x))", "all x.(Brown(x) -> Color(x))", "all x.(Brown(x) -> Color(x))", "all x.(Brown(x) -> Color(x))", "all x.(Brown(x) -> Color(x))", "all x.(Color(x) -> Brown(x))", "all x.(Brown(x) -> Color(x))", "all x.(Brown(x) -> Color(x))", "all x.(Brown(x) -> Color(x))", "all x.(Brown(x) -> Color(x))", "all x.(Brown(x) -> Color(x))", "all x.(Brown(x) -> Color(x))"]}
{"id": "entailmentbank_validation_206", "nl": "if the soil has high humus content, then the soil will be brown in color.", "fol": "", "prediction": ["all x.((Soil(x) & HighHumorContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHubusContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumorContent(x)) -> BrownColour(x))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownInColor(x))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))", "all x.(HighHumorContent(x) -> BrownColor(x))", "all x.((Soil(x) & HighHumorContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumorContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumorContent(x)) -> BrownColor(x))"]}
{"id": "entailmentbank_validation_207", "nl": "mountains can cause the water in the air mass to condense.", "fol": "", "prediction": ["all x y z.((Mountain(x) & Water(y) & AirMass(z)) -> CausesCondense(x,y,z))", "all x y z.((Mountain(x) & Water(y) & AirMass(z)) -> WaterCondensing(y,z))", "all x y.((Mountain(x) & Water(y)) -> Condenses(x,y))", "all x y z.((Mountain(x) & Water(y) & AirMass(z)) -> Condense(x,y,z))", "all x.(Mountain(x) -> CanCondenseWaterInAirMass(x))", "all x.(Mountain(x) -> CausesWaterCondense(x))", "all x.(Mountain(x) -> CausesCondense(x))", "all x y.((Mountain(x) & Water(y) & AirMass(y)) -> DoesCondense(x,y))", "all x.(Mountain(x) -> CausesCondensationOfWater(x))", "all x.(Mountain(x) -> WaterCondenses(x,Mountain,AirMass,Mountain))", "all x.(Mountain(x) -> (CanCauseWaterCondense(x)))", "all x.(Mountain(x) -> CausesWaterCondensation(x))", "all x y.((Mountain(x) & Water(y)) -> Condenses(x))", "all x.(Mountain(x) -> CausesWaterCondense(x))", "all x.(Mountain(x) -> AllowsWaterCondense(x))", "all x y.((Mountain(x) & Water(y) & AirMass(z)) -> Condense(x,y))"]}
{"id": "entailmentbank_validation_208", "nl": "mountain is a kind of geographic obstacles.", "fol": "", "prediction": ["all x.(Mountain(x) -> GeospatialObstacle(x))", "all x.(Mountain(x) -> GeographicObstacle(x))", "all x.(Mountain(x) -> GeographicObstacle(x))", "all x.(Mountain(x) -> GeographicObstacle(x))", "all x.(Mountain(x) -> GeographicObstacle(x))", "all x.(Mountain(x) -> GeospatialObstacle(x))", "all x.(Mountain(x) -> GeographicalObstacle(x))", "all x.(Mountain(x) -> GeospatialObstacle(x))", "all x.(Mountain(x) -> GeographicObstacle(x))", "all x.(Mountain(x) -> GeographicalObstacle(x))", "all x.(Mountain(x) -> geographicObstacle(x))", "all x.(Mountain(x) -> GeographicObstacle(x))", "all x.(Mountain(x) -> Geo-Obstacle(x))", "all x.(Mountain(x) -> GeographicObstacle(x))", "all x.(Mountain(x) -> GeographicObstacle(x))", "all x.(Mountain(x) -> HasGeographicalObstacle(x))"]}
{"id": "entailmentbank_validation_209", "nl": "mountain is the geographic obstacle that can cause the water in the air mass to condense.", "fol": "", "prediction": ["all x.(Mountain(x) -> (CausesWater(x) & CondensesAirMass(x)))", "all x.(Mountain(x) -> (GeographicalObstacle(x) & CondenseWater(x)))", "all x.(Mountain(x) -> (GeographicObstacle(x) & CanCondenseWater(x)))", "all x y z.((Mountain(x) & Water(y) & AirMass(z)) -> CausesCondense(x,y,z))", "all x.(Mountain(x) -> exists y.(GeographicObstacle(y) & CausesWaterCondense(y) & Condense(z)))", "all x y.((Mountain(x) & AirMass(y) & CausesWaterCondensation(x,y)) -> GeospatialObstacle(x,y))", "all x.(Mountain(x) -> CausesWaterToCondense(x))", "all x.(Mountain(x) -> CausesWaterCondense(x))", "all x.(Mountain(x) -> (GeographicObstacle(x) & CausesWaterToCondense(x)))", "all x y.((Mountain(x) & Water(y)) -> CausesCondense(x,y))", "all x.(Mountain(x) -> CausesCondense(x))", "all x.(Mountain(x) -> (GeographicObstacle(x) & CausesWaterCondensation(x)))", "all x y.((Mountain(x) & AirMass(y)) -> CausesWaterCondense(x,y))", "all x y.((Mountain(x) & AirMass(y)) -> (GeographicalObstacle(x,y) & CausesWaterToCondense(x,y)))", "all x.(Mountain(x) -> CausesCondenseSignificance(x))", "all x.(Mountain(x) -> CausesCondense(x))"]}
{"id": "entailmentbank_validation_210", "nl": "if something causes a process then that something is required for that process.", "fol": "", "prediction": ["all x y.((CausesProcess(x) & Process(y)) -> Requires(x,y))", "all x.((CausesProcess(x) & RequiresForProcess(x)) -> Requires(x))", "all x y.((Causes(x,y) & Process(y)) -> RequiresFor(x,y))", "all x y.((CausesProcess(x) & Process(y)) -> Requires(x,y))", "all x.((CausesProcess(x) & Process(x)) -> Required(x))", "all x.((CausesProcess(x) & Process(x)) -> RequiresProcess(x))", "all x y.((CausesProcess(x) & Process(y)) -> Requires(x,y))", "all x y.(CausesProcess(x) -> Requires(y))", "all x.((CausesProcess(x) & RequiresProcess(x)) -> CausedProcess(x))", "all x y.((CausesProcess(x) & Process(y)) -> RequiresProcess(x,y))", "all x y.((CauseOfProcess(x,y) & CausesProcess(x,y)) -> RequiredForProcess(x,y))", "all x y.((CausesProcess(x) & Process(y)) -> RequiredForProcess(x,y))", "all x y z.((CausesProcess(x) & CausesProcess(x,y) & Procedure(z)) -> Requires(x,z))", "all x y.((Causes(x,y) & Process(y)) -> Requires(x,y))", "all x y.((Process(x) & Causes(x,y)) -> RequiredFor(y,x))", "all x.(CausesProcess(x) -> RequiresProcess(x))"]}
{"id": "entailmentbank_validation_211", "nl": "condensation causes clouds to form.", "fol": "", "prediction": ["all x y.((Condensation(x) & Cloud(y)) -> CausesToForm(x,y))", "all x.(Condensation(x) -> CausesClouds(x))", "all x.(Condensation(x) -> CausesCloudsToForm(x))", "all x.(Condensation(x) -> CausesCloudsToForm(x))", "all x y.((Condensation(x) & Cloud(y)) -> CausesFormation(x,y))", "all x y.((Condensation(x) & Cloud(y)) -> CausesToForm(x,y))", "all x y z.(Condensation(x) -> CausesClouds(y))", "all x y.((Condensation(x) & Cloud(y)) -> Forms(x,y))", "all x.(Condensation(x) -> CausesCloudsToForm(x))", "all x.(Condensation(x) -> CausesCloudsToForm(x))", "all x y.((Condensation(x) & Cloud(y)) -> CausesToFollow(x,y))", "all x.(Condensation(x) -> CausesCloudsToForm(x))", "all x.(Condensation(x) -> CausesCloudsToForm(x))", "all x y.((Condensation(x) & Cloud(y)) -> Forms(x,y))", "all x.(Condensation(x) -> CausesCloudsToForm(x))", "all x y.((Condensation(x) & Cloud(y)) -> CausesToForm(x,y))"]}
{"id": "entailmentbank_validation_212", "nl": "condensation is required for clouds to form.", "fol": "", "prediction": ["all x.(Condensation(x) -> CloudStrength(x))", "all x.(Condensation(x) -> CloudForm(x))", "all x.(Condensation(x) -> CloudForm(x))", "All x.(Condensation(x) -> CloudsForm(x))", "all x.((Condensation(x) & Cloud(y)) -> Forms(z))", "all x.(Cloud(x) -> CondensationRequiredForFormation(x))", "all x.(Cloud(x) -> NeedsCondensation(x))", "all x.(Cloud(x) & CondensationRequired(x))", "all x y.((Cloud(x) & Condensation(y)) -> RequiredForFormation(x,y))", "all x.(Condensation(x) -> CloudsForm(x))", "all x y.((Cloud(x) & Condensation(x)) -> Requires(x,y))", "all x.(Condensation(x) -> CloudFormation(x))", "all x.(Condensation(x) -> CloudFormation(x))", "all x.((Condensation(x) & Cloud(x)) -> Form(x))", "all x.(Condensation(x) -> CloudForm(x))", "all x.(Cloud(x) -> CondensationRequired(x))"]}
{"id": "entailmentbank_validation_213", "nl": "erosion is when wind transports sediments from one place to another place for a long distance.", "fol": "", "prediction": ["all x.((WindTransportsSediments(x) & LongDistance(x)) -> Erosion(x))", "all x.((WindTransportsSediments(x) & LongDistance(x)) -> Erosion(x))", "all x y z.((Erosiration(x) & Wind(y) & Sediment(z)) -> TransportsForLongDistance(y,z))", "all x y z.((Wind(x) & Sediment(y) & Place(z)) -> TransportsForLongDistance(x,y,z))", "all x y.((Erosiation(x) & Wind(y)) -> TransportsSedimentsForLongDistance(y,x))", "all x y z.((Erosion(x) & Wind(y) & Place(z)) -> TransportsSedimentsForLongDistance(x,y,z))", "all x y.((Erosion(x) & Wind(y)) -> TransportsSediments(y,x))", "all x y z.((Erosiation(x) & Wind(y) & Sediments(z)) -> TransportsForLongDistance(y,z))", "all x y z.((Erosion(x) & Wind(y) & Sediments(z) & Transports(y,z)) -> LongDistance(x,z))", "all x y z.((Erosion(x) & Wind(y) & Place(z) & TransportsSedimentsForLongDistance(x,y,z)) -> (WindTransportsSediments(x,y,z)))", "all x y.((Erosion(x) & Wind(y)) -> TransportsSedimentsForLongDistance(y,x))", "all x y.((Erosion(x) & Wind(al) & Place(y)) -> TransportsSediments(x,y))", "all x y.((Erosiation(x) & Wind(y)) -> TransportsSedimentsForLongDistance(y,x))", "all x y.((Wind(x) & Sediment(y) & Place(y)) -> TransportsForLongDistance(x,y))", "all x y z.((Erosion(x) & Wind(y) & Sediment(z) & ShipsForLongDistance(y,z)) -> Transports(y,z))", "all x y z.((Erosion(x) & Wind(y) & Precipitation(z) & TransportsSediments(y,z)) -> LongDistance(x,y,z))"]}
{"id": "entailmentbank_validation_214", "nl": "sand dunes / arches are formed by the wind transporting and depositing sand.", "fol": "", "prediction": ["all x.(SandDunes(x) -> Arches(x))", "all x.(SandDunes(x) -> (FormedByWindTransportingAndDepositingSand(x)))", "all x y.((SandDunes(x) & Arches(y)) -> (FormedByWindTransporting(x,y) & FormedByWind(x,y) & FormedByDepositing(x,y)))", "all x.((SandDune(x) & Arches(x)) -> FormedByWindToTransportAndDepositSand(x))", "all x y.((SandDune(x) & Arches(y)) -> (FormedByWind(x,y) & TransportingAndDepositingSand(x)))", "all x.(SandDunes(x) -> (Flower(y) & Wind(z)) and Transports(y) & Deposits(z))", "all x.(SandDunes(x) -> (FormedByWindTransporting(x) & FormedByDestinating(x)))", "all x.(SandDune(x) & Arches(x)) -> FormedByWindTransportingAndDepositingSand(x))", "all x y.((SandDune(x) & Arches(y)) -> FormedByWindWithdrawal(x,y))", "all x.((SandDune(x) | Arches(x)) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x.((SandDunes(x) & Arches(x)) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x y.((SandDune(x) & Arches(y)) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x.(SandDunes(x) -> (FormedByWindTransportingAndDepositingSand(x)))", "all x y z.((SandDune(x) & Arch(y) & Wind(z)) -> (FormedBy(x,y,z) & TransportsAndDepositsSand(x)))", "all x y z.((SandDune(x) & Arche(y) & Wind(z)) -> (FormedByPassingAndDepositingSand(y) & Sand(z)))", "all x.((SandSand(x) | Arches(x)) -> (FormedByWindTransporting(x) & DeposingSand(x)))"]}
{"id": "entailmentbank_validation_215", "nl": "wind erosion can form sand dunes and arches.", "fol": "", "prediction": ["all x.(WindErosion(x) -> (FormsSandDunes(x) | FormsArrows(x)))", "all x y.((WindErosion(x) & SandDun(y) & Arches(y)) -> Forms(x,y))", "all x y.((WindErosion(x) & SandDune(y)) -> (Forms(x,y) & Forms(x,y)))", "all x.(WindErosion(x) -> (FormSandDunes(x) & Formarches(x)))", "all x y z.((WindErosion(x) & SandDunes(y) & Arches(z)) -> (Forms(x,y) & Forms(x,z)))", "all x.(WindErosion(x) -> FormsSandDunesAndArches(x))", "all x.(WindErosion(x) -> (FormsSandDunes(x) | FormsArches(x)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) | FormsArches(x)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) | FormsArches(x)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) | FormsArches(x)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) & FormsArches(x)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) | FormsArches(x)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) & FormsARches(x)))", "all x.(WindErosiation(x) -> (FormSandDunes(x) | FormArches(x)))", "all x y z.((WindErosion(x) & SandDunes(y) & Arches(z)) -> Forms(x,y,z))", "all x.(WindErosion(x) -> (FormsSandDunes(x) & FormsArmies(x)))"]}
{"id": "entailmentbank_validation_216", "nl": "rain causes erosion.", "fol": "", "prediction": ["all x y.((Rain(x) & CausesErosion(x)) -> Causes(x,y))", "all x.(Rain(x) -> CausesErosion(x))", "all x.(Rain(x) -> CausesErosion(x))", "all x.(Rain(x) -> CausesErosion(x))", "all x.(Rain(x) -> CausesErosion(x))", "all x.(Rain(x) -> CausesErosion(x))", "all x.(Rain(x) -> CausesErosion(x))", "all x y z.((Rain(x) & Erosion(y) & Rain(z)) -> Cause(x,y,z))", "all x.(Rain(x) -> CausesErosion(x))", "all x.(Rain(x) -> CausesErosion(x))", "all x.(Rain(x) -> CausesErosion(x))", "all x y.((Rain(x) & Water(y)) -> CausesErosion(x))", "all x.(Rain(x) -> CausesErosion(x))", "all x.(Rain(x) -> CausesErosion(x))", "all x.(Rain(x) -> CausesErosion(x))", "all i.(Rain(i) -> CausesErosion(i))"]}
{"id": "entailmentbank_validation_217", "nl": "erosion sometimes decreases the amount of nutrients in soil.", "fol": "", "prediction": ["all x y.((Erosion(x) & Soil(y)) -> (DecreasesNutrients(x,y)))", "all x.(Erosimination(x) -> (DecreasesNutrients(x) & InSoil(x)))", "all x.(Erosion(x) -> -DecreasesNutrients(x))", "all x y.((Erosion(x) & Soil(y)) -> DecreasesNutrients(x,y))", "all x y.((Erosion(x) & Soil(y)) -> (LimitedNutrients(x,y)))", "all x y z.((Erosion(x) & Nutrients(y) & Soil(z)) -> DecreasedBy(x,y,z))", "all x y z.((Erosion(x) & Soil(y) & NutrientDistribution(z)) -> DecreasesIn(x,y,z))", "all x y z.((Erosion(x) & Nutrients(y) & Soil(z)) -> Decreases(x,y,z))", "all x y.((Erosion(x) & Soil(y)) -> OftenDecreasesNutrients(x,y))", "all x.(Erosion(x) -> (DecreasesNutrientsInSoil(x)))", "all x.(Erosion(x) -> (DecreasesNutrients(x)))", "all x y.((Erosion(x) & Soil(y)) -> DecreasesNutrients(x,y))", "all x y.((Erosion(x) & Soil(y)) -> DecreasesNutrients(x,y))", "all x y z.((Erosive(x) & Soil(y) & Nutrients(z)) -> Downgrades(x,z))", "all x y.((Erosion(x) & Soil(y)) -> SometimesDecreasesNutrients(x,y))", "all x y.((Erosion(x) & Soil(y)) -> DecreasesNutrients(x,y))"]}
{"id": "entailmentbank_validation_218", "nl": "rain can decrease the amount of nutrients in soil.", "fol": "", "prediction": ["all x.(Rain(x) -> DecreasesNutrientsInSoil(x))", "all x.(Rain(x) -> DecreasesSoilNutrients(x))", "all x.(Rain(x) -> DecreasesNutrientsInSoil(x))", "all x y z.((Rain(x) & Nutrient(y) & Soil(z)) -> CanDecrease(x,y,z))", "all x y.((Rain(x) & Soil(y)) -> CanDecreaseNutrients(x,y))", "all x.(Rain(x) -> DecreasesNutrientsInSoil(x))", "all x y.((Rain(x) & Soil(y)) -> DecreasesNutrientPropensity(x,y))", "all x y z.((Rain(x) & Nutrients(y) & Soil(z)) -> DecreasesAmount(x,y,z))", "all x.(Rain(x) -> IncreasedNutrientsInSoil(x))", "all x y.((Rain(x) & Soil(y)) -> ReducesNutrients(x,y))", "all x.(Rain(x) -> DecreasesNutrients(x))", "all x y.((Rain(x) & Soil(y)) -> DecreaseRainRainAmount(x,y))", "all x y.((Rain(x) & Soil(y)) -> CanDecreaseNutrients(x,y))", "all x y z.((Rain(x) & Nitrates(y) & Soil(z)) -> DecreaseIn(x,y,z))", "all x.(Rain(x) -> CanDecreaseNutrients(x,Soil))", "all x y.((Rain(x) & DecreasesNutrientsInSoil(x,y)) -> CanDecrease(x,y))"]}
{"id": "entailmentbank_validation_219", "nl": "as the availability of water decreases, the environment will become more dry.", "fol": "", "prediction": ["all x.(DecreasedAvailabilityOfWater(x) -> MoreDryEnvironment(x))", "all x.((WaterAvailabilityDecrease(x) & EnvironmentDisposable(x)) -> MoreDry(x))", "all x.(DecreasedWaterAvailability(x) -> EnvironmentMoreDry(x))", "all x y.((WaterAvailabilityDecrease(x) & Environment(y)) -> MoreDry(y))", "all x.(DryEnvironment(x) -> DecreasesWaterAvailability(x))", "all x y.((WaterAvailabilityDecreases(x) & Environment(y)) -> Dry(y))", "all x.((WaterAvailabilityDecreases(x) & EnvironmentDecreases(x)) -> MoreDry(x))", "all x y.((WaterAvailability(x) & Environment(y) & Decreases(x,y)) -> MoreDry(y))", "all x.(DecreasedWaterAvailability(x) -> EnvironmentAncient(x))", "all x y.((WaterAvailabilityDecrease(x) & Environment(y)) -> MoreDry(y))", "all x y.((WaterAvailabilityDecreases(x) & Environment(y)) -> MoreDry(y))", "all x.((AvailabilityOfWater(x) & Decreases(x)) -> EnvironmentDecreived(x))", "all x y.((WaterAvailability(x) & Environment(y) & Decreases(x)) -> Dries(y))", "all x.(DecreasesWaterAvailability(x) -> EnvironmentOfLargerDry(x))", "all x.(DecreasesWaterAvailability(x) -> EnvironmentDead(x))", "all x.((WaterAvailabilityDecreases(x) & EnvironmentDecreased(x)) -> MoreDry(x))"]}
{"id": "entailmentbank_validation_220", "nl": "drought is when available water decreases in an environment.", "fol": "", "prediction": ["all x.(Drought(x) -> (DecreasesWaterAccess(x) & InEnvironment(x)))", "all x y.((Drought(x) & Environment(y)) -> DecreasedAvailableWater(x,y))", "all x y z.((Drought(x) & Water(y) & Environment(z)) -> DependsAndDecreases(x,y,z))", "all x y.((Drought(x) & Environment(y)) -> AvailableWaterDecreases(x,y))", "all x.(Drought(x) -> (DowngradesAvailability(x) & Environment(x)))", "all x.(Drought(x) -> (DecreasedWaterVery(x)))", "all x y.((Drought(x) & Environment(y) & AvailableWater(x,y)) -> Decreases(x,y))", "all x.(Drought(x) -> (DecreasesWater(x) & InEnvironment(x)))", "all x y.(Drought(x) -> WaterDecrease(x,y))", "all x y.((Drought(x) & Environment(y)) -> AvailableWaterDecreases(x,y))", "all x.(Drought(x) -> AvailableWaterDecreases(x))", "all x y z.((Shrink(x) & Environment(y) & WaterDependent(z)) -> DecreasesAvailability(x,z))", "all x y.((Drought(x) & Environment(y)) -> DecreasesWater(x,y))", "all x.(Drought(x) -> (DiminishedAvailabilityOfWater(x) & Environment(x)))", "all x.(DecreasedAvailabilityOfWater(x) -> Drought(x))", "all x.(Drought(x) -> DwarfOrDecrementInEnvironment(x))"]}
{"id": "entailmentbank_validation_221", "nl": "drought causes the environment to be dry.", "fol": "", "prediction": ["all x.(Drought(x) -> EnvironmentDry(x))", "all x.(Deed(x) -> EnvironmentDry(x))", "all x.(Drought(x) -> CausesEnvironmentToBeDry(x))", "all x y.((Drought(x) & Environment(y)) -> CausesDry(x,y))", "all x y.((Drought(x) & Environment(y)) -> CausesDry(x,y))", "all x y.((Drought(x) & Environment(y)) -> CausesDry(x,y))", "all x.(Drought(x) -> CausesEnvironmentToBeDry(x))", "all x.(Drought(x) -> EnvironmentDry(x))", "all x.(Drought(x) -> EnvironmentDry(x))", "all x.(Drought(x) -> EnvironmentDry(x))", "all x y z.((Drought(x) & Environment(y) & Environment(z)) -> CausesToBeDry(x,y,z))", "all x.(Drought(x) -> CausesEnvironmentToBeDry(x))", "all x.(Drought(x) -> CausesEnvironmentToBeDry(x))", "all x y.((Drought(x) & Environment(y)) -> DroughtCauses(x,y))", "all x.(Drought(x) -> CausesEnvironmentToBeDry(x))", "all x.(Drought(x) -> EnvironmentDry(x))"]}
{"id": "entailmentbank_validation_222", "nl": "dry conditions can cause fire.", "fol": "", "prediction": ["all x.((DryConditions(x) & DoesCauseFire(x)) -> CanCauseFire(x))", "all x.(DryConditions(x) -> CausesFire(x))", "all x.(InDryConditions(x) -> CausesFire(x))", "all x.(DryConditions(x) -> CausesFire(x))", "all x y.((DryCondition(x) & DryCondition(y)) -> CanCauseFire(x,y))", "all x.(DustConditions(x) -> CausesFire(x))", "all x.((DryConditions(x) & CanCauseFire(x)) -> CanCauseFire(x))", "dryconditions(c) & CanCauseFire(i))", "all x.((DryConditions(x) & CausesFire(x)) -> CanCauseFire(x))", "all x.(DryConditions(x) -> CanCauseFire(x))", "all x.(DryConditions(x) -> CanCauseFire(x))", "all x.(DryConditions(x) -> CanCauseFire(x))", "all x.(DryConditions(x) & CanCauseFire(x))", "all x.(DryConditions(x) -> CanCauseFire(x))", "all x.(DryCondition(x) -> CanCauseFire(x))", "all x.(DryConditions(x) -> CausesFire(x))"]}
{"id": "entailmentbank_validation_223", "nl": "drought may cause wildfires.", "fol": "", "prediction": ["all x y.((Drought(x) & WildFire(y)) -> MayCause(x,y))", "all x.(Drought(x) -> (CausesWildfires(x)))", "all x.(Drought(x) -> CanCauseWildfires(x))", "all x.(Drought(x) -> MayCauseWildfires(x))", "all x y.((Drought(x) & Wildfire(y)) -> CanCause(x,y))", "all x.(Drought(x) -> MayCauseWildfire(x))", "exists x.(Drought(x) & Wildfire(x))", "all x.(Drought(x) -> MayCauseWildfires(x))", "all x.(Drought(x) -> MayCauseWildfires(x))", "all x.(Drought(x) -> MayCauseWildfires(x))", "all x.(Drought(x) -> MayCauseWildfires(x))", "all x.(Drought(x) -> MayCauseWildfires(x))", "all x.(Drought(x) -> Wildfire(x))", "all x.(Drought(x) -> MayCauseWildfires(x))", "all x.(Drought(x) -> CanCauseWildfires(x))", "all x.(Drought(x) -> MayCauseWildfires(x))"]}
{"id": "entailmentbank_validation_224", "nl": "a prairie is a kind of ecosystem.", "fol": "", "prediction": ["all x.(Prairie(x) -> Ecosystem(x))", "all x.(Briars(x) -> Ecosystem(x))", "all x.(Primary(x) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "exists x.(Prairie(x) & Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))"]}
{"id": "entailmentbank_validation_225", "nl": "drought may cause wildfires to a prairie.", "fol": "", "prediction": ["all x y z.((Drought(x) & Prairie(y) & Wildfire(z)) -> MayCause(x,y,z))", "all x.(Drought(x) -> MayCauseWildfires(x))", "all x.(Drought(x) -> (CausesWildfire(x) | CausesToPrairie(x)))", "all x y.((Drought(x) & Prairie(y)) -> CanCauseWildfires(x,y))", "all x y.((Drought(x) & Prairie(y)) -> MayCauseWildfiresTo(x,y))", "all x y z.((Drought(x) & Prairie(y) & Wildfire(z)) -> Causes(x,y,z))", "all x y.((Drought(x) & Prairie(y)) -> MayCauseWildfires(x,y))", "all x y.((Drought(x) & Prairie(y)) -> MayCause(x,y))", "all x y z.((Drought(x) & Prairie(y) & Wildfire(x)) -> MayCauseTo(x,y))", "all x y.((Drought(x) & Prairie(y)) -> CausesWildfires(x,y))", "all x.(Drought(x) -> (MayCauseWildfires(x) & Prairie(x)))", "all x.(Drought(x) -> MayCauseWildfires(x))", "all x.(Drought(x) -> (CanCauseWildfires(x) & Prairie(x)))", "all x.(Drought(x) -> (CausesWildfiresToPresbyterian(x)))", "all x.(Drought(x) -> MayCauseWildfires(x))", "all x y.((Drought(x) & Prairie(y)) -> MayCauseWildfires(x,y))"]}
{"id": "entailmentbank_validation_226", "nl": "a barometer is a kind of instrument.", "fol": "", "prediction": ["all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "all x y.((Barometer(x) & Instrument(y)) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))"]}
{"id": "entailmentbank_validation_227", "nl": "a barometer is used to measure air pressure.", "fol": "", "prediction": ["all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x y z.((Barometer(x) & AirPressure(y) & AirPressure(z)) -> Measure(x,y,z))", "all x y.((Barometer(x) & AirPressure(y)) -> UsedToMeasure(x,y))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasureAirPressure(x))", "all x.(Barometer(x) -> UsedToMeasureAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasureAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x y.((Barometer(x) & AirPressure(y)) -> Measure(x,y))"]}
{"id": "entailmentbank_validation_228", "nl": "a barometer is an instrument used to measure air pressure.", "fol": "", "prediction": ["all x y.((Barometer(x) & AirPressure(y)) -> Measures(x,y))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> Measure(x,AirPressure))", "all x.(Barometer(x) -> (InstrumentUsedToMeasureAirPressure(x)))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x y.((Barometer(x) & AirPressure(y)) -> Measures(x,y))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))"]}
{"id": "entailmentbank_validation_229", "nl": "a property is a kind of information.", "fol": "", "prediction": ["all x.(Property(x) -> Information(x))", "all x.(Property(x) -> Information(x))", "all x.((Property(x) & Information(x)) -> FormOf(x,y))", "all x.(Property(x) -> Information(x))", "all x.(Property(x) -> Information(x))", "all x.(Property(x) -> Information(x))", "all x.(Property(x) -> Information(x))", "all x.(Property(x) -> Information(x))", "all x.(Property(x) -> Information(x))", "all x.(Property(x) -> Information(x))", "all x.(Property(x) -> Information(x))", "all x.(Property(x) -> Information(x))", "all x.exists y.(Property(x) & Information(y) & Information(x,y))", "all x.(Property(x) -> Information(x))", "all x.(Property(x) -> Information(x))", "all x.(Property(x) -> Information(x))"]}
{"id": "entailmentbank_validation_230", "nl": "temperature is a property of weather.", "fol": "", "prediction": ["all x.(Temperature(x) -> WeatherProperty(x))", "all x.(Temperature(x) -> PropertyOfWeather(x))", "all x.(Temperature(x) -> WeatherProperty(x))", "all x.(Temperature(x) -> WeatherProperty(x))", "all x y.((Temperature(x) & Weather(y)) -> PropertyOf(x,y))", "all x y z.((Temperature(x) & Weather(y) & Weather(z)) -> PropertyOf(x,y,z))", "all x.(Temperature(x) -> WeatherProperty(x))", "all x.(Temperature(x) -> PropertiesOfWeather(x))", "all x.(Temperature(x) -> WeatherProperty(x))", "all x.(Temperature(x) -> WeatherProperty(x))", "all x.(Temperature(x) -> PropertyOfWeather(x))", "all x.(Temperature(x) -> WeatherProperty(x))", "all x y.((Temperature(x) & Weather(y)) -> Possibility(x,y))", "all x.(Temperature(x) -> WeatherProperty(x))", "all x.(Temperature(x) -> WeatherProperty(x))", "all x.(Temperature(x) -> WeatherProperty(x))"]}
{"id": "entailmentbank_validation_231", "nl": "temperature is a kindof information about weather.", "fol": "", "prediction": ["all x.(Temperature(x) -> WeatherPath(x))", "all x.(Temperature(x) -> InformationAboutWeather(x))", "all x.(Temperature(x) -> WeatherInformation(x))", "all x.(Temperature(x) -> InformationAboutWeather(x))", "all x.(Temperature(x) -> WeatherInformation(x))", "all x.(Temperature(x) -> WeatherInformation(x))", "all x.(Temperature(x) -> (InformationAboutWeather(x)))", "all x.(Temperature(x) -> InformationOfWeather(x))", "all x.(Temperature(x) -> WeatherInformation(x))", "all x.(Temperature(x) -> WeatherUpdate(x))", "all x.(Temperature(x) -> InformationaboutWeather(x))", "all x.(Temperature(x) -> WeatherInformation(x))", "all x.(Temperature(x) -> WeatherInformation(x))", "all x.(Temperature(x) -> WeatherInformation(x))", "all x.(Temperature(x) -> WeatherInformation(x))", "all x.(Temperature(x) -> WeatherInformation(x))"]}
{"id": "entailmentbank_validation_232", "nl": "a thermometer is used to measure temperature.", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x.(Thermometer(x) -> UsedToMeasureTemperature(x))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x y.((Thermometer(x) & Temperature(y)) -> Measures(x,y))", "all x.(Thermometer(x) -> UsedToMeasureTemperature(x))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x y.((Thermometer(x) & TemperatureMeasure(y)) -> UsedForMeasure(x,y))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x y.((Thermometer(x) & Temperature(y)) -> Measures(x,y))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x y.((Thermometer(x) & Temperature(y)) -> UsedToMeasure(x,y))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x.(Thermometer(x) -> MeasuresTemperature(x))"]}
{"id": "entailmentbank_validation_233", "nl": "a thermometer is used to measure the information about weather on temperature.", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresWeatherDataOnTemperature(x))", "all x.(Thermometer(x) -> MeasuresWeatherInformationOnTemperature(x))", "all x.(Thermometer(x) -> MeasuresWeatherInformationOnTemperature(x))", "all x y.((Thermometer(x) & WeatherInfo(y)) -> MeasuresOnTemperature(x,y))", "all x.(Thermometer(x) -> MeasuresWeatherInformationOnTemperature(x))", "all x.(Thermometer(x) -> MeasuresWeatherInformationOnTemperature(x))", "all x.(Thermometer(x) -> UsedToMeasureWeatherInformation(x))", "all x y.((Thermometer(x) & WeatherInformation(y)) -> MeasuresOnTemperature(x,y))", "all x.(Thermometer(x) -> MeasuresWeatherInformation(x))", "all x.(Thermometer(x) -> MeasuresWeatherInformationOnTemperature(x))", "all x y.((Thermometer(x) & Weather(y)) -> MeasuresInformationOnTemperature(x,y))", "all x.(Thermometer(x) -> MeasuresWeatherInformation(x))", "all x y.((Thermometer(x) & Weather(y)) -> MeasuresBeforeTemperature(x,y))", "all x y.((Thermometer(x) & Weather(y)) -> MeasuresInformationOnTemperature(x,y))", "all x.(Thermometer(x) & MeasuresWeatherInformation(x))", "all x y z.(:Thermometer(x) & Weather(y) & Temperature(z) & MeasuresInformationOn(x,y,z)) -> TemperatureApplication(x))"]}
{"id": "entailmentbank_validation_234", "nl": "wind direction is a property of weather.", "fol": "", "prediction": ["all x.(WindDirection(x) -> WeatherProperty(x))", "all x.(WindDirection(x) -> WeatherProperty(x))", "all x.(WindDirection(x) -> WeatherProperty(x))", "all x.(WindDirection(x) -> WeatherProperty(x))", "all x.(WindDirection(x) -> WeatherProperty(x))", "all x.(WindDirection(x) -> WeatherProperty(x))", "exists x.(WindDirection(x) & Weather(x))", "all x.(WindDirection(x) -> WeatherProperty(x))", "all x.(WindDirection(x) -> WeatherProperty(x))", "all x.(WindDirection(x) -> WeatherProperty(x))", "all x.(WindDirection(x) -> WeatherProperty(x))", "all x.(WindDirection(x) -> WeatherProperty(x))", "all x.(WindDirection(x) -> WeatherProperty(x))", "all x y.((WindDirective(x) & Weather(y)) -> PropertyOf(x,y))", "all x.(WindDirection(x) -> WeatherProperty(x))", "all x.(WindDirection(x) -> WeatherProperty(x))"]}
{"id": "entailmentbank_validation_235", "nl": "wind direction is a kind of information about weather.", "fol": "", "prediction": ["all x.(WindDirection(x) -> WeatherInformation(x))", "all x.(WindDirection(x) -> InformationAboutWeather(x))", "all x.(WindDirection(x) -> InformationAboutWeather(x))", "all x.(WindDirection(x) -> InformationAboutWeather(x))", "all x.(WindDirection(x) -> WeatherInformation(x))", "all x.(WindDirection(x) -> WeatherInformation(x))", "all x.(WindDirection(x) -> InformationAboutWeather(x))", "all x.(WindDirection(x) -> WeatherInformation(x))", "all x.(WindDirection(x) -> InformationAboutWeather(x))", "all x.(WindDirection(x) -> InformationAboutWeather(x))", "all x.(WindDirection(x) -> WeatherInformation(x))", "all x.(WindDirection(x) -> InformationOfWeather(x))", "all x.(WindDistance(x) -> InformationAboutWeather(x))", "all x.(WindDirection(x) -> WeatherInformation(x))", "all x y.((WindDirection(x) & Weather(y)) -> InformationAbout(x,y))", "all x.(WindDirection(x) -> InformationAboutWeather(x))"]}
{"id": "entailmentbank_validation_236", "nl": "a station model is used for displaying information about weather in a particular point and time.", "fol": "", "prediction": ["all x.((StationModel(x) & Site(x)) -> DisplaysInformationAboutWeather(x,PointAndTime))", "all x.((StationModel(x) & DisplaysWeatherInSpecificPointAndTime(x)) -> UsedFor(x))", "all x y.((StationModel(x) & WeatherMeasurement(y)) -> UsedForDisplayingInfo(x,y))", "all x.(StationModel(x) -> DisplaysWetterInformation(x,point,time))", "all x.(StationModel(x) -> DisplaysWeatherInfoInPunchAndTime(x,y))", "all x y.((StationModel(x) & StationModel(y)) -> DisplaysWeatherInformation(x,y))", "all x y z.((StationModel(x) & InformationToSpecify(y) & WeatherPoint(z) & Time(z)) -> UsedForDisplaying(x,y,z))", "all x.(StationModel(x) -> DisplaysInformationAroundWeatherInPresentPointAndTime(x))", "all x y.((StationModel(x) & Weather(y)) -> DisplayingInformationTo(x,y))", "all x y.((StationModel(x) & Information(y)) -> DisplaysInformation(x,y))", "all x.(StationModel(x) -> DisplaysInformationAboutWeather(x))", "all x y.((StationModel(x) & DetailedWeatherInfo(y) & InPosition(x,y)) -> Displays(x,y))", "all x.((StationModel(x) & DisplaysWeatherInFocus(x)) -> ParticularPointAndTime(x))", "all x y.((StationModel(x) & WeatherMode(y)) -> DisplaysInformationInPointAndTime(x,y))", "all x y.((StationModel(x) & Point(y) & Time(y)) -> DisplaysWeatherInformation(x,y))", "all x y.((StationModel(x) & Person(y)) -> (DisplaysWeatherInPointAndTime(x,y)))"]}
{"id": "entailmentbank_validation_237", "nl": "wind direction in a particular point and time is displayed in a station model.", "fol": "", "prediction": ["all x y.((WoodDirection(x) & PointAndTime(y)) -> DisplayedInStationModel(x,y))", "all x y z.((WindDirection(x) & PointAndTime(y) & StationModel(z)) -> DisplayedIn(x,y,z))", "all x y.((StationModel(x) & WindDirection(y)) -> DisplayedIn(x,y))", "all x y z.((StationModel(x) & WindDirection(y) & Point(z)) -> DisplayedIn(x,y,z))", "all x y z.((WindDirection(x) & Point(y) & Time(z)) -> DisplayedInStationModel(x,y,z))", "all x.((WindDirection(x) & InPointAndTime(x)) -> DisplayedInStationModel(x))", "all x y.((WindDirection(x) & Point(x) & Time(y)) -> DisplayedInStationModel(x))", "all x y z.((WoodDirection(x) & PointAndTime(y) & StationModel(z)) -> Displayed(x,y,z))", "all x y.((Neon(x) & StationModel(y)) -> (AlwaysArrivedInPoster(x,y) & InVehicleAndTime(y,x)))", "all x y z.((WindDirection(x) & Point(y) & Time(z) & StationModel(y)) -> DisplayedIn(x,y,z))", "all x y z.((WindDirection(x) & PointAndTime(y) & StationModel(z)) -> DisplayedIn(x,z))", "all x.((WindDirection(x) & ParticularPointAndTime(x)) -> DisplayedInStationModel(x))", "all x.((WindDirection(x) & Point(x) & Time(x)) -> DisplayedInStationModel(x))", "all x y.((WindDirection(x) & Point(y) & Time(y)) -> DisplayedInStationModel(x))", "all x y z.((WindDirection(x) & Point(y) & Time(z) & StationModel(x)) -> DisplayedIn(x,y,z))", "all x y z.((WindDirection(x) & Point(y) & Time(z) & StationModel(x)) -> DisplaysIn(x,y,z))"]}
{"id": "entailmentbank_validation_238", "nl": "sleet is a kind of precipitation.", "fol": "", "prediction": ["all x.(Sleet(x) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))(Redaction(x))", "all x y z.((Sleet(x) & Precipitation(y) & Spring(z)) -> Precipitation(x,y,z))", "all x.(Sleet(x) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))", "all x.(Sleet(x) -> Precipitation(x))"]}
{"id": "entailmentbank_validation_239", "nl": "hail is a kind of precipitation.", "fol": "", "prediction": ["all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))", "all x.(Hail(x) -> Precipitation(x))"]}
{"id": "entailmentbank_validation_240", "nl": "hail and sleet are different kinds of precipitation.", "fol": "", "prediction": ["all x.(Hail(x) | Sleet(x))", "all x.((Hail(x) | Sleet(x)) -> Precipitation(x))", "(all x.(Hail(x) -> Shallow(x)))", "all x.((Hail(x) | Sleet(x)) -> Precipitation(x))", "all x y.((Hail(x) | Sleet(y)) -> Precipitation(x,y))", "all x y.((Hail(x) & Sleet(y)) -> Precipitation(x))", "all x.((Hail(x) | Sleet(x)) -> DifferentPrecipitation(x))", "(all x.(Hail(x) | -Sleet(x)))", "(DifferentPrecipitation(hail) & DifferentPrecipitation(sleet))", "all x.(Hail(x) | Sleet(x)) -> PrimarilyPrecipitation(x))", "((Hole(alpha) & -Sleet(b)) | (Sleet(a) & Hail(b))))", "all x.(Precipitation(x) -> (Hail(x) & Sceet(x)))", "both x.(Hail(x) & Scleet(x))", "all x.((Hail(x) | Sleet(x)) -> Precipitation(x))", "all x.(Hail(x) | Sleet(x)) -> Precipitation(x))", "all x.(Hail(x) & Sleep(x)) -> Precipitation(x))"]}
{"id": "entailmentbank_validation_241", "nl": "when one kind of energy changes into another kind of energy, the total amount of energy is constant.", "fol": "", "prediction": ["all x.((Energy(x) & ChangesToAnotherEnergy(x)) -> TotalEnergyConstant(x))", "all x y.((Energy(x) & Energy(y)) -> ChangesInto(x,y))", "all x y z.((Energy(x) & Energy(y) & Energy(z) & ChangesInto(x,y) & ChangesInto(x,z)) -> TotalAmountConstantAmountConstantAmountConstant(x,y))", "all x y.((Energy(x) & Energy(y)) -> ChangesInto(x,y))", "all x.((EnergyChangsIntoEnergy(x,y) & TransitionsInto(x,y)) -> TotalEnergyConstant(x))", "all x y.((Energy(x) & Energy(y) & ChangesInto(x,y,x)) -> TotalAmountConstant(y))", "all x.((Energy(x) & ChangesIntoEnergy(x,y)) -> TotalEnergyConstant(x,y))", "all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> TotalAmountOfEnergyConstant(z))", "all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> Constant(x,y))", "all x y.((Energy(x) & Energy(y,x) & ChangesTo(x,y)) -> Constant(x))", "all x.((EnergyCoppling(x) & EnergyCoppling(x)) -> TheTotalAmountOfEnergyConstant(x))", "all x y.((Energy(x) & Energy(y)) -> ChangesInto(x,y))", "all x y z.((Energy(x) & Energy(y) & Energy(z) & ChangesInto(x,y,z)) -> TotalAmountConstant(x,y,z))", "all x y.(((Energy(x) & Energy(y) & ChangesInto(x,y)) -> TotalAmount(x,y))", "all x y.((Energy(x) & Energy(y)) -> ChangesIntoEnergy(x,y))", "all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> TotalEnergyConstant(x))"]}
{"id": "entailmentbank_validation_242", "nl": "energy transformation means one kind of energy changes into another kind of energy.", "fol": "", "prediction": ["all x y.((EnergyTransformation(x) & Energy(y)) -> ChangesInto(x,y))", "all x y.(((Energy(x) & Energy(y)) -> EnergyTransformation(x,y))", "all x.(EnergyTransformation(x) -> The EnergyChange(x,Energy.Sorrow(x))", "all x y.((EnergyTransformation(x) & Energy(y)) -> -> ChangesIntoEnergy(x,y))", "all x y.((EnergyTransformation(x) & Energy(y)) -> ChangesInto(x,y))", "all x y.((EnergyTransformation(x) & Energy(y)) -> (ChangesEnergy(x,y) | ChangesEnergy(x,y)))", "all x y.((EnergyTransformation(x) & Energy(y)) -> ConstantEnergyChange(x,y))", "all x y.((EnergyTransformation(x) & Energy(y)) -> ChangeAgain(x,y))", "all x y z.((EnergyTransformation(x) & Energy(y) & Energy(z)) -> (Consumes(x,y) & ChangesInto(y,z)))", "all x.exists y z.((EnergyTransformation(x) & EnergyTree(y) & Energy(z)) -> ChangesInto(y,z))", "all x y.((EnergyTransformation(x) & Energy(y)) -> ChangesInto(x,y))", "all x y.((EnergyTransformation(x,y) & Energy(y)) -> (Changes(x,y) | Changes(x,y)))", "all x y.((EnergyTransformation(x) & Energy(y)) -> ChangesInto(x,y))", "all x.(EnergyTransformation(x) -> (Energy(x) & Energy(x) & Energy(x)))", "all x y.((EnergyTransformation(x) & Energy(y)) -> Means(x,y))", "all x y z.((EnergyTranscription(x) & Energy(y) & Energy(z)) -> ChangesInto(x,y,z))"]}
{"id": "entailmentbank_validation_243", "nl": "when energy transformation happens, the total amount of energy is constant.", "fol": "", "prediction": ["all x y.((EnergyTransformation(x) & Energy(y)) -> TotalAmountConstant(x))", "all x.(EnergyTransformation(x) -> TotalAmountOfEnergyConstant(x))", "all x.(EnergyTransformation(x) -> TotalAmountOfEnergyConstant(x))", "all x.((EnergyTransformation(x) & TotalEnergy(x)) -> Constant(x))", "all x.((EnergyTransformation(x) & TotalAmountAsIsConstant(x)) -> Energy(x))", "all x y.((EnergyTransformation(x) & Energy(y)) -> ConstantAmount(x,y))", "all x.((EnergyTransformation(x) & ConvexEnergy(x)) -> Constant(x))", "all x.((EnergyTransformation(x) & EnergyAmountConstant(x)) -> TransformationOfEnergy(x))", "all x.(EnergyTransformation(x) -> TotalEnoughTotalEnergy(x))", "all x.(EnergyTransformationOccurs(x) -> TotalEnergyConstant(x))", "all x.((EnergyTransformation(x) & TotalAmountOfEnergy(x)) -> Constant(x))", "all x.((EnergyTransformation(x) & EnergyConstant(x)) -> HappensTotal(x))", "all x.((EnergyTransformation(x) & EnergyAmountConstant(x)) -> EnergyTransformation(x))", "all x.((EnergyTransformation(x) & Occurs(x)) -> TotalEnergyConstant(x))", "all x y.((EnergyTransformation(x) & Energy(y)) -> Constant(y))", "all x y z.((EnergyTransformation(x) & Energy(y) & TotalAmount(z)) -> Constant(z))"]}
{"id": "entailmentbank_validation_244", "nl": "energy transformation means energy conversion.", "fol": "", "prediction": ["all x.(EnergyTransformation(x) -> EnergyConversion(x))", "all x.(EnergyTransformation(x) -> MeansEfficiencyConversion(x))", "all x.(EnergyTransformation(x) -> EnergyConversion(x))", "all x.(EnergyTransformation(x) -> EnergyConversion(x))", "all x.(EnergyTransformation(x) -> EnergyConversion(x))", "all x.(EnergyTransformation(x) -> EnergyConversion(x))", "all x.(EnergyTransformation(x) -> EnergyConversion(x))", "all x.(EnergyTransformation(x) -> MeansEnergyConversion(x))", "all x.(EnergyTransformation(x) -> EnergyConversion(x))", "all x.(EnergyTransformation(x) -> DoesEnergyConversion(x))", "all x.(EnergieTransformation(x) -> EnergyConversion(x))", "all x.(EnergyTransformation(x) -> EnergyConversion(x))", "all x.(EnergyTransformation(x) -> MeansEnergyConversion(x))", "all x.(EnergyTransformation(x) -> MeansEnergyConversion(x))", "all x.(EnergyTransformation(x) -> (EnergyConversion(x)))", "all x.(EnergyTransformation(x) -> EnergyConversion(x))"]}
{"id": "entailmentbank_validation_245", "nl": "when energy conversion happens, the total amount of energy is constant.", "fol": "", "prediction": ["all x.(EnergyConversion(x) -> CompleteAmountOfEnergyConstant(x))", "all x.((EnergyConversion(x) & Happens(x)) -> TotalEnergyConstant(x))", "all x.((EnergyConversion(x) & ChangesTotalEnergy(x)) -> Constant(x))", "all x y.((EnergyConversion(x) & Energy(y)) -> ReturnsConstant(x,y))", "all x.(SitutesInEnergyConversion(x) -> TotalEnergyConstant(x))", "all x.((EnergyConversion(x) & TakenFrom(x,y) & Converts(x,z)) -> ConstantVolumeOfEnergy(x))", "all x y.((EnergyConversion(x) & Energy(y)) -> TotalAmountConstant(x,y))", "all x.(EnergyConversion(x) -> TotalAmountOfEnergyConstant(x))", "all x y.((EnergyConversion(x) & Energy(y)) -> TotalAmountConstant(x,y))", "all x.(EnergyConversion(x) -> TotalAmountOfEnergy(x))", "all x.((EnergyConversion(x) & TotalAmountOfEnergy(x)) -> Constant(x))", "all x y.((EnergyConversion(x) & Energy(y)) -> ConstantAmount(y,x))", "all x.((EnergyConversion(x) & Throughout(x)) -> TotalAmountOfEnergyConstant(x))", "all x.(EnergyConversion(x) -> TotalEnergyConstant(x))", "all x.((EnergyConversion(x) & EnergyConversion(x)) -> TotalEnergyConstant(x))", "all x.(EnergyConversion(x) -> TotalEnergyConstant(x))"]}
{"id": "entailmentbank_validation_246", "nl": "solid is a kind of state of matter.", "fol": "", "prediction": ["all x.(Solid(x) -> StateOfMatter(x))", "all x.(Solid(x) -> StateOfMatter(x))", "all x.(Solid(x) -> StateOfMatter(x))", "all x.(Solid(x) -> StateOfMatter(x))", "all x.(Solid(x) -> StateOfMatter(x))", "all x.(Solid(x) -> StateOfMatter(x))", "all x.(Solid(x) -> StateOfMatter(x))", "all x.(Solid(x) -> StateOfMatter(x))", "all x.(Solid(x) -> StateOfMatter(x))", "all x.(Solid(x) -> StateOfMatter(x))", "all x.(Solid(x) -> SortOfStateOfMatter(x))", "all x.((Solid(x) & StateOfMatter(x)) -> Natural(x))", "all x.(Solid(x) -> StateOfMatter(x))", "all x.(Solid(x) -> StateOfMatter(x))", "all x.(Solid(x) -> StateOfMatter(x))", "all x.(Solid(x) -> StateOfMatter(x))"]}
{"id": "entailmentbank_validation_247", "nl": "heat energy can change the state of matter.", "fol": "", "prediction": ["all x.((HeatEnergy(x) & stateOfMatter(x)) -> Changes(x))", "all x.(HeatEnergy(x) -> CanChangeStateOfMatter(x))", "all x y z.((HeatEnergy(x) & Matter(y) & State(z)) -> Changes(x,y,z))", "all x.(HeatEnergy(x) -> (ChangesCause(x,Matter) & Time(x,Matter)))", "all x.(HeatEnergy(x) -> CanChangeStateOfMatter(x))", "all x.(HeatEnergy(x) -> CanChangeStateOfMatter(x))", "all x.(HeatEnergy(x) -> ChangeNumberOfMatter(x))", "all x.(Heat(x) -> ChangesStateOfMatter(x))", "all x.(HeatEnergy(x) -> CanChangeStateOfMatter(x))", "all x y.((HeatEnergy(x) & Matter(y)) -> ChangesState(x,y))", "all x.(HeatEnergy(x) -> ChangesStateOfMatter(x))", "all x.(HeatEnergy(x) -> ChangesStateOfMatter(x))", "all x y.((HeatEnergy(x) & StateOfMatter(y)) -> ChangeStateOfMatter(x,y))", "all x.(Heat(x) -> ChangeStateOfMatter(x))", "all x y.((HeatEnergy(x) & StateOfMatter(y)) -> CanChange(x,y))", "all x.(HeatEnergy(x) -> ChangesStateOfMatter(x))"]}
{"id": "entailmentbank_validation_248", "nl": "liquid is a kind of state of matter.", "fol": "", "prediction": ["all x.(Liquid(x) -> SortOfMatter(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x.(StateOfMatter(x) -> Liquid(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x.(Liquid(x) -> StateOfMatter(x))"]}
{"id": "entailmentbank_validation_249", "nl": "heat can change a substance from a solid to liquid.", "fol": "", "prediction": ["all x y z.((Heat(x) & Substance(y) & Solid(z) & Liquid(w)) -> CanChangeInto(x,y,z,w))", "all x y.((Substance(x) & Substance(y) & HeatChanges(x,y)) -> CanCompateToLiquid(x,y))", "all x y.((Substance(x) & Heat(x)) -> HasChange(x,y))", "all x.(Heat(x) -> CanChangeSubstance(x,Solid,Liquid))", "all x y.((Substance(x) & Heat(y)) -> CanChangeFromSolidToLiquid(x,y))", "all x y.((Substance(x) & Heat(x) & Solid(y) & Liquid(y)) -> CanChangeTo(x,y))", "all x y.((Substance(x) & Heat(x)) -> CanChangeFromSolidToLiquid(x,y))", "all x.(Heat(x) -> CanChangeSubstanceFromSolidToLiquid(x))", "all x y.((Substance(x) & Heat(x)) -> CanChangeFromSolidToLiquid(x,y))", "all x y.((Substance(x) & Heat(y)) -> CanChangeFromSolidToLiquid(x))", "all x y.((Substance(x) & Heat(x)) -> CanChangeFromSolidToLiquid(x,y))", "all x y.((Substance(x) & Heat(y)) -> (ChangesFromSolidToLiquid(y,x)))", "all x y z w.((Substance(x) & Heat(y) & Solid(z) & Liquid(w)) -> CanChange(y,x,z))", "all x.(Heat(x) -> ChangesSubstance(x,Solid,Liquid))", "all x y.((Substance(x) & Heat(y)) -> CanChange(x,y,Solid,Clothing))", "all x y.((Substance(x) & Heat(x,y) & Solid(y)) -> ChangeStructure(x,y))"]}
{"id": "entailmentbank_validation_250", "nl": "melting means a substance changes from a solid into a liquid by increasing heat energy.", "fol": "", "prediction": ["all x y.((Substance(x) & Solid(y)) -> ChangesToLiquid(x,y))", "all x y.((Substance(x) & Solid(y) & Liquid(y)) -> ChangesByIncreasedHeatEnergy(x,y))", "all x y.((Substance(x) & Solid(y) & Liquid(y)) -> ChangesFromTo(x,y))", "all x.(Melting(x) -> (ChangesFromSolidToLiquid(x) & IncreasesHeatEnergy(x)))", "all x y.((Substance(x) & Solid(y) & Liquid(y) & IncreasesHeatEnergy(x,y)) -> Melting(x))", "all x y z.((Substance(x) & Solid(y) & Liquid(z)) -> (ChangesFromTo(x,y,z) & IncreasesHeatEnergy(x)))", "all x.(Melting(x) -> (ChangesSolid(x) & ChangesLiquid(x) & IncreasesHeatEnergy(x)))", "all x.(Melting(x) -> (ChangesByIncreasingHeatEnergy(x) & SolidIntoLiquid(x)))", "all x y.((Substance(x) & Solid(y)) -> ChangesToLiquid(x,y))", "all x y.((Substance(x) & Solid(y) & Liquid(y)) -> ChangesByIncreasedHeatEnergy(x,y))", "all x y.((Substance(x) & Solid(y)) -> Changes(x,y))", "all x y.((Substance(x) & Solid(y) & Liquid(z)) -> (ChangesFromTo(x,y,z) & IncreasesHeatEnergy(x,z)))", "all x y.((Substance(x) & Solid(y)) -> Changes(x,y))", "all x y z.((Consumption(x) & Solid(y) & Liquid(z) & IncreasesHeatEnergy(x,y,z)) -> Changes(x,y,z))", "all x.(Melting(x) -> (ChangesFromSolidToLiquid(x) & IncreasesHeatEnergy(x)))", "all x.(Melting(x) -> (ChangesSolidToLiquid(x) & IncreasesHeatEnergy(x)))"]}
{"id": "entailmentbank_validation_251", "nl": "heat can cause a solid substance to melt.", "fol": "", "prediction": ["all x y z.((SolidSubstance(x) & Heat(y) & Melt(z)) -> CanCause(x,y,z))", "all x y.((SolidSubstance(x) & Heat(y)) -> CanMelt(x,y))", "all x y.((Heat(x) & SolidSubstance(y)) -> CanMelt(x,y))", "all x.((Heat(x) & SolidContain(x)) -> Melts(x))", "all x y z.((Structure(x) & SolidSubstance(y) & Heat(z)) -> Melt(y))", "all x y z.((Hot(x) & SolidSubstance(y) & Heat(z)) -> CanMelt(z))", "all x.((Heat(x) & SolidSubstance(y)) -> CanMelt(x,y))", "all x.(Heat(x) -> CanCauseSolidSubstanceToMelt(x))", "all x.((SolidSubstance(x) & Heat(heat)) -> Melt(heat))", "all x.(Heat(x) -> (SolidSubstance(x) & Melts(x)))", "all x y.((Stomat(x) & SolidSubstance(y)) -> CanMore(x,y))", "all x y.((SolidSubstance(x) & Heat(y)) -> Contains(x,y))", "all x y.((SolidSubstance(x) & Heat(y)) -> Melts(x))", "all x y.((SolidSubstance(x) & Heat(y)) -> CanMelt(x,y))", "all x y.((SolidSubstance(x) & Heat(y)) -> Melt(x,y))", "all x.((SolidSubstance(x) & Heat(x)) -> InherentToMelt(x))"]}
{"id": "entailmentbank_validation_252", "nl": "ice is a kind of solid.", "fol": "", "prediction": ["all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))", "all x.(Ice(x) -> Solid(x))"]}
{"id": "entailmentbank_validation_253", "nl": "heat can cause ice to melt.", "fol": "", "prediction": ["all x.(Heat(x) -> CausesIceToMelt(x))", "all x y.((Heat(x) & Ice(y)) -> Melts(y))", "all x y.((Heat(x) & Ice(y)) -> DoesMelt(y,x))", "all x y z.((Heat(x) & Ice(y) & Heat(z)) -> CanCauseMelt(x,y,z))", "all x y z.((Heat(x) & Ice(y) & Heat(z)) -> Melt(y))", "all x.(Heat(x) -> CausesIceToMelt(x))", "all x y.((Heat(x) & Ice(y)) -> CausesToMelt(y,x,y))", "all x y.((Heat(x) & Ice(y)) -> Melts(y))", "all x.(Heat(x) -> IceToMelt(x))", "all x.(Heat(x) -> CanCauseIceToMelt(x))", "all x.(Heat(x) -> CausesIceToMelt(x))", "all x y.((Heat(x) & Ice(y)) -> Melt(y))", "all x.(Heat(x) -> IceMelt(x))", "all x.(Heat(x) -> CausesIceToMelt(x))", "all x.(Heat(x) -> CausesIceToMelt(x))", "all x.(Heat(x) -> CausesIceToMelt(x))"]}
{"id": "entailmentbank_validation_254", "nl": "the sun is a source of radiation / heat called sunlight.", "fol": "", "prediction": ["all x.(Sun(x) -> SourceOfRadiation(x) & SourceOfHeat(x))", "all x.((Sun(x) & Radiation(x)) | Heat(x)) -> Sunlight(x))", "all x.((Sun(x) & SourceOfRadiation(x) & SourceOfHeat(x)) -> Sunlight(x))", "all x.(Sound(x) -> SourceOfRadiation(x) & SourceOfHeat(x,Sunlight))", "all x.(Sun(x) -> Sunlight(x))", "all x.(Sun(x) -> SourceOfRadiation(x) & SourceOfHeat(x))", "all x y.((Sun(x) & SourceOfRadiation(x) & SourceOfHeat(y)) -> Sunlight(x))", "all x.(Sun(x) -> (SourceOfRadiation(x) & SourceOfHeat(x)))", "all x.(Sun(x) -> SourceOfRadiation(x) & SourceOfHeat(x))", "all x.(Sun(x) -> (SourceOfRadiation(x) & SourceOfHeat(x)) & Sunlight(x)))", "all x.(Sun(x) -> (SourceOfRadiation(x) | SourceOfHeat(x)))", "all x.(Sun(x) -> SourceOfRadiation(x) & SourceOfHeat(x))", "all x y.((Sun(x) & SourceOfRadiation(y) & SourceOfHeat(x,y)) -> Sunlight(x))", "all x.(Sun(x) -> (SourceOfRadiation(x) & SourceOfHeat(x):Sunlight(x)))", "all x.(Sun(x) -> exists y.(Radiation(y) & Heat(y) & Sunlight(x,y)))", "all x.(Sun(x) -> (SourceOfRadiation(x) & SourceOfHeat(x) & Sunlight(x)))"]}
{"id": "entailmentbank_validation_255", "nl": "the heat energy from the sunlight cause ice to melt.", "fol": "", "prediction": ["all x y.((Sunlight(x) & HeatEnergy(x) & Ice(y)) -> Melts(y))", "all x.((HeatEnergyFromSunlight(x) & Ice(y)) -> Melts(y,x))", "all x y.((HeatEnergy(x) & Sunlight(y)) -> CausesIceToMelt(x,y))", "all x y z.((Sunlight(x) & HeatEnergy(y) & Ice(z)) -> CausesMelt(y,z))", "all x.(HeatEnergyFromSunlight(x) -> CausesIceToMelt(x))", "all x.((HeatEnergy(x) & Sunlight(x)) -> CausesIceToMelt(x))", "all x y z.((HeatEnergy(x) & Sunlight(y) & Ice(z)) -> Melts(z))", "all x y z.((HeatEnergy(x) & Sunlight(y) & Ice(z) & HeatEnergy(y)) -> Melts(z))", "all x.((HeatEnergy(x) & Sunlight(x)) -> CausesIceToMelt(x))", "all x.((HeatEnergy(x) & Sunlight(x)) -> CausesIceToMelt(x))", "all x.((HeatEnergy(x) & Sunlight(x)) -> CausesIceToMelt(x))", "all x.(HeatEnergy(x) -> (CausesIceToMelt(x)))", "all x y.((HeatEnergy(x) & Sunlight(y)) -> CausesIceToMelt(x,y))", "(HeatEnergy(Sheat) & Sunlight(Sunlight) - MeltsIce(Ice))", "all x.((HeatEnergy(x) & Sunlight(x)) -> CausesIceToMelt(x))", "all x y.((Sunlight(x) & HeatEnergy(y) & Ice(y)) -> Melt(y))"]}
{"id": "entailmentbank_validation_256", "nl": "a wagon is a kind of vehicle.", "fol": "", "prediction": ["all x.(Wagon(x) -> Vehicle(x))", "all x.(Wagon(x) -> Vehicle(x))", "all x.(Wagon(x) -> Vehicle(x))", "all x.(Wagon(x) -> Vehicle(x))", "all x.(Vehicle(x) -> Wagon(x))", "all x.(Wagon(x) -> Vehicle(x))", "all x.(Wagon(x) -> Vehicle(x))", "all x.(Wagon(x) -> Vehicle(x))", "all x.(Wagon(x) -> Vehicle(x))", "all x.(Wag(x) -> Vehicle(x))", "all x.(Wagon(x) -> Vehicle(x))", "all x.(Wave(x) -> Vehicle(x))", "all x.(Wagon(x) -> Vehicle(x))", "all x.(Wagon(x) -> Vehicle(x))", "all x.(Wagon(x) -> Vehicle(x))", "all x.(Wagon(x) -> Vehicle(x))"]}
{"id": "entailmentbank_validation_257", "nl": "a vehicle is a kind of object.", "fol": "", "prediction": ["all x.(Vehicle(x) -> Object(x))", "all x.(Vehicle(x) -> Object(x))", "all x.(Vehicle(x) -> (Object(x) & Object(x)))", "all x.(Vehicle(x) -> Object(x))", "all x.(Vehicle(x) -> Object(x))", "all x.(Vehicle(x) -> Object(x))", "all x.(Vehicle(x) -> Object(x))", "all x.(Vehicle(x) -> Object(x))", "all x.(Vehicle(x) -> Object(x))", "exists x.(Vehicle(x) & Object(x))", "all x.(Vehicle(x) -> Object(x))", "all x.(Vehicle(x) -> Object(x))", "all x.(Vehicle(x) -> Object(x))", "all x.(Vehicle(x) -> Object(x))", "all x.(Vehicle(x) -> (Object(x) & Object(x)))", "all x.(Vehicle(x) -> NatureOfObject(x))"]}
{"id": "entailmentbank_validation_258", "nl": "a wagon is a kind of object.", "fol": "", "prediction": ["all x.(Wagon(x) -> Object(x))", "all x.(Wagon(x) -> Object(x))", "all x.(Wagon(x) -> Object(x))", "all x.(Wagon(x) -> Object(x))", "all x.(Waves(x) -> Object(x))", "all x.(Wagon(x) -> Object(x))", "all x.(Wagon(x) -> Object(x))", "all x.(Wagon(x) -> Object(x))", "all x.(Wagon(x) -> Object(x))", "all x.(Wagon(x) -> Object(x))", "all x.(Wagon(x) -> Object(x))", "all x.(Wagon(x) -> Object(x))", "all x.(Wagon(x) -> Object(x))", "all x.(Wagon(x) -> Objective(x))", "all x.(Wagon(x) -> Object(x))", "all x.(Vanish(x) -> Object(x))"]}
{"id": "entailmentbank_validation_259", "nl": "rolling is a kind of motion.", "fol": "", "prediction": ["all x.(Rolling(x) -> Motion(x))", "all x.(Rolling(x) -> (Motion(x) & Move(x)))", "all x.(Rolling(x) -> Motion(x))", "all x.(Rolling(x) -> Motion(x))", "all x.(Rolling(x) -> Motion(x))", "all x.(Rolling(x) -> Motion(x))", "all x.(Rolling(x) -> Motion(x))", "all x.(Rolling(x) -> Motion(x))", "all x.((Rolling(x) & Motion(x)) -> Motion(x))", "all x.(Rolling(x) -> Motion(x))", "all x.(Rolling(x) -> Motion(x))", "all x.(Rolling(x) -> Motion(x))", "all x.(Rolling(x) -> [Motion(x) | Motion(x)])", "all x.(Rolling(x) -> Move(x))", "all x.(Rolling(x) -> Motion(x))", "all x.(Rolling(x) -> Motion(x))"]}
{"id": "entailmentbank_validation_260", "nl": "a wagon rolling is an example of an object in motion.", "fol": "", "prediction": ["all x.(WagonRolling(x) -> ObjectInMotion(x))", "all x.((WagonRolling(x) & InMotion(x)) -> Object(x))", "all x.(WagonRolling(x) -> ObjectInMotion(x))", "all x.((WagonRolling(x) & ObjectInMotion(x)) -> ModelFootball(x))", "all x.((WagonRolling(x) & Movement(x)) -> Object(x))", "all x y.((WagonRolling(x) & ObjectInMotion(y)) -> ExampleOf(x,y))", "all x.((WagonRolling(x) & ObjectInMotion(x)) -> ExampleOf(x,w))", "all x.((WagonRolling(x) & ObjectInMotion(x)) -> ExamplesOfMotion(x))", "all x.((WagonRolling(x) & ObjectInMotion(x)) -> ExampleOf(x,X))", "all x.((WagonRolling(x) & ObjectInMotion(x)) -> Example(x))", "all x.(WagonRolling(x) -> ObjectInMotion(x))", "all x.(WagonRolling(x) -> ObjectInMotion(x))", "all x.(WagonRolling(x) -> ObjectInMotion(x))", "all x.(RollingWagon(x) -> ObjectInMotion(x))", "all x.((Wag(x) & Rolling(x)) -> ObjectInMotion(x))", "all x.(WagonRolling(x) -> ObjectInMotion(x))"]}
{"id": "entailmentbank_validation_261", "nl": "an example of mechanical energy is an object in motion.", "fol": "", "prediction": ["all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x.((MechanicalEnergy(x) & ObjectInMotion(x)) -> ContainsLike(x,y))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x.((MechanicalEnergyExemple(x) & ObjectInMotion(x)) -> MechanicalEnergy(x))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x.(Motion(x) -> MechanicalEnergy(x))"]}
{"id": "entailmentbank_validation_262", "nl": "a wagon rolling is an example of mechanical energy.", "fol": "", "prediction": ["all x.(WagonRolling(x) -> MechanicalEnergy(x))", "all x.(WagonRolling(x) -> MechanicalEnergy(x))", "all x.(RollingWagon(x) -> MechanicalEnergy(x))", "all x.(WagonRolling(x) -> MechanicalEnergy(x))", "all x.((WagonRolling(x) & MechanicalEnergy(x)) -> MechanicalEnergy(x))", "all x.((WagonRolling(x) & MechanicalEnergy(x)) -> MechanicalEnergy(x))", "all x y.((WagonRolling(x) & MechanicalEnergy(y)) -> Example(x))", "all x.(WagonRolling(x) -> MechanicalEnergy(x))", "all x.(WagonRolling(x) -> MechanicalEnergy(x))", "all x.(VanillaRolling(x) -> MechanicalEnergy(x))", "all x.(WagonRolling(x) -> MechanicalEnergy(x))", "all x.((WagonRolling(x) & MechanicalEnergy(x)) -> MechanicalEnergy(x))", "all x.((WagonRolling(x) & MechanicalEnergy(x)) -> MechanicalEnergy(x))", "all x.(RollingWagon(x) -> MechanicalEnergy(x))", "all x.((WagonRolling(x) & MechanicalEnergy(x)) -> MechanicalEnergy(x))", "all x.(WagonRolling(x) -> MechanicalEnergy(x))"]}
{"id": "entailmentbank_validation_263", "nl": "loud means high in sound energy / sound intensity.", "fol": "", "prediction": ["all x.(Loud(x) -> (HighSoundEnergy(x) | HighSoundIntensity(x)))", "all x.(Loud(x) -> HighInSoundEnergy(x))", "loud(loud)", "all x.(Loud(x) -> (HighSoundEnergy(x) & HighSoundIntensity(x)))", "all x.(Loud(x) -> (HighSoundEnergy(x) & HighSoundIntensity(x)))", "all x.(Loud(x) -> (HighInSoundEnergy(x) & HighInSoundIntense(x)))", "all x.(Loud(x) -> (HighSonorEnergy(x) | HighSoundIntegrity(x)))", "all x.(Loud(x) -> (HighSoundEnergy(x) & HighSoundIntensity(x)))", "all x.(Loud(x) -> (HighInSoundEnergy(x) & HighInSoundIntensity(x)))", "all x.(Hot(x) -> (High(x) & SoundEnergy(x) & SoundIntense(x)))", "all x.(Loud(x) -> (HighHourSoundEnergy(x) & HighHourSoundIntensity(x)))", "all x.(Loud(x) -> (High(x) & High(x) & High(x) & High(x)))", "all x.(Loud(x) -> HighInSoundEnergy(x))", "all x.(Loud(x) -> (HighSoundEnergy(x) & HighSoundIntensity(x)))", "all x.(Loud(x) -> (HighInSoundEnergy(x) | HighInSoundIntensity(x)))", "all x.(Loud(x) -> (HighSoundEnergy(x) & HighSoundIntense(x)))"]}
{"id": "entailmentbank_validation_264", "nl": "sound is a kind of energy.", "fol": "", "prediction": ["all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Power(x))", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy.", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) : Energy(x))"]}
{"id": "entailmentbank_validation_265", "nl": "a classroom is a kind of area.", "fol": "", "prediction": ["all x.(Classroom(x) -> Area(x))", "all x.(Classroom(x) -> IsArea(x))", "all x.(Classroom(x) -> Area(x))", "all x.(Classroom(x) -> Area(x))", "all x.(Classroom(x) -> Area(x))", "all x.(Classroom(x) -> Area(x))", "all x.(Classroom(x) -> Area(x))", "all x.(Classroom(x) -> Area(x))", "all x.(Classroom(x) -> KindOfArea(x))", "all x.(Classroom(x) -> Area(x))", "all x.(Classroom(x) -> Area(x))", "all x.(Clarkedum(x) -> Area(x))", "all x.(Classroom(x) -> Area(x))", "all x.(Classroom(x) -> ThereOfArea(x))", "all x y.((Classroom(x) & Area(y)) -> DefinitelyArea(x))", "all x.((Classroom(x) & Area(x)) -> KindOf(x))"]}
{"id": "entailmentbank_validation_266", "nl": "the sound in a loud class room is an example of high sound energy.", "fol": "", "prediction": ["all x.((Sound(x) & LoudClassRoom(x)) -> HighSoundEnergy(x))", "all x.((Sound(x) & LoudClassRoom(x)) -> HighSoundEnergy(x))", "all x.((Sound(x) & LoudClassRoom(x)) -> HighSoundEnergy(x))", "all x.(LoudClassroom(x) -> HighSoundEnergy(x))", "all x.((ClassRoom(x) & Loud(x)) -> HighSoundEnergy(x))", "all x.((Sound(x) & LoudClassRoom(x)) -> HighSoundEnergy(x))", "all x.((Sound(x) & LoudClassRoom(x)) -> HighSoundEnergy(x))", "all x.((Sound(x) & LoudClassRoom(x)) -> HighSoundEnergy(x))", "all x.((Sound(x) & LoudClassRoom(x)) -> HighSoundEnergy(x))", "all x.((Sound(x) & LoudClassRoom(x)) -> HighSoundEnergy(x))", "all x.(LoudClassRoom(x) -> HighSoundEnergy(x))", "all x y.((Sound(x) & LoudClassRoom(y) & BuiltWith(x,y)) -> HighSoundEnergy(x))", "all x y z.((Sound(x) & LoudClassRoom(y) & ClassRoom(z) & InClassRoom(x,y,z)) -> HighSoundEndurance(x))", "all x y.((ClassRoom(x) & Audio(y) & Loud(x)) -> HighSoundEnergy(x))", "all x y.((Sound(x) & LoudClassRoom(y) & ExhibitOfHighSoundEnergy(x)) -> HighSoundEnergy(x))", "all x y.((Sound(x) & LoudClassRoom(y) & InClassRoom(x,y)) -> HighSoundEnergy(x))"]}
{"id": "entailmentbank_validation_267", "nl": "if an object / something is in the sunlight then that object / that something will absorb solar energy.", "fol": "", "prediction": ["all x y.((Object(x) & Something(y) & InSunlight(x)) -> AbsorbsSolarEnergy(x,y))", "all x.((ObjectInSunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x,y,z))", "all x.((Object(x) & ItsSunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.((Object(x) & Something(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.((Object(x) & -Object(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.((Object(x) | WhatIsInSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Object(x) & Something(y) & InSunlight(x)) -> AbsorbsSolarEnergy(x,y))", "all x.((Object(x) & -> InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.((Object(x) | Something(x)) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Object(x) & Something(y) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.((Object(x) | Something(x)) -> InSunlight(x))", "all x.((Object(x) & Something(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Object(x) & Something(y) & InSunlight(x,y)) -> AbsorbsSolarEnergy(z))", "all x.((Object(x) | SomethingInSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.((Object(x) & Something(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.((Object(x) & SomethingInSunlight(x)) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_validation_268", "nl": "a sidewalk is located outside.", "fol": "", "prediction": ["all x.(Sidewalk(x) -> LocalizedOutside(x))", "all x.(Spoitlight(x) -> LocatedOutside(x))", "all x.exists y.(Standard(x) & Outside(y) & LocatedOf(x,y))", "exists x.(Sidewalk(x) & LocatedOutside(x))", "exists x.(Sandwich(x) & LocatedOutside(x))", "all x.(Sidewalk(x) -> LocationOfOutside(x))", "all x.(Sandwich(x) -> LocatedOutside(x))", "all x.(Surface(x) -> LocatedOutside(x))", "all x.(Sidewalk(x) -> LocatedOutside(x))", "exists x.(Standard(x) & LocatedOutside(x))", "all x.(Standard(x) -> LocatedOutside(x))", "all x.(Mountain(x) -> Outside(x))", "all x y.((Sidewalk(x) & Outside(y)) -> LocatedInside(x,y))", "all x.(Standard(x) -> PositionedOutside(x))", "all x.(Sidewalk(x) -> LocatedOutside(x))", "all x.(Spotlight(x) -> LocatedOutside(x))"]}
{"id": "entailmentbank_validation_269", "nl": "a sidewalk located outside will absorb solar energy.", "fol": "", "prediction": ["all x.(Standard(x) -> AbsorbSolarEnergy(x))", "all x.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Standard(x) & Street(y) & LocatedOutside(x,y)) -> AbsorbsSolarEnergy(x))", "all x.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x.((Sidewalk(x) & LocatedOutside(x)) -> AbsorbSolarEnergy(x))", "all x.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x.((Scene(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x.((Standard(x) & FoundOutside(x)) -> AbsorbsSolarEnergy(x))", "all x.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x,y))", "all x.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x.(Sidewalk(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Standard(x) & LocatedOutside(x)) -> AbsorbsPhotonEnergy(x,y))"]}
{"id": "entailmentbank_validation_270", "nl": "absorbing sunlight causes objects to heat.", "fol": "", "prediction": ["all x y.((Sunlight(x) & Object(y)) -> CausesToHeat(x,y))", "all x.((AbsorbsSunlight(x) & CausesHeat(x)) -> AbsorbsSunlight(x))", "all x y.(CausesHeat(x,y) -> AbsorbsSunlight(y))", "all x.(AbsorbsSunlight(x) -> CausesHeat(x))", "all x.(AbsorbsSunlight(x) -> CausesHeat(x))", "all x y.((Sunlight(x) & Object(y)) -> Absorbs(x,y))", "all x.((SunlightAbsorber(x) & Object(x)) -> CausesHeat(x))", "all x y z.((AbsorbsSunlight(x) & Object(y) & Heat(z)) -> Causes(x,y,z))", "all x y.((Sunlight(x) & Object(y)) -> AbsorbsFocusesToHeat(y,x))", "all x y z.((Sunlight(x) & Object(y) & Heat(z) & AbsorbedBy(x,y)) -> CausesTo(y,z))", "all x.((SunlightAbsorbent(x) & Object(y)) -> CausesToHeat(x))", "all x y.((Sunlight(x) & Exposure(y)) -> Heat(y))", "all x.(Sunlight(x) -> CausesHeat(x))", "all x.(AbsorbsSunlight(x,sunlight) -> CausesHeat(x,sunlight))", "all x y.((Sunlight(x) & Sunlight(y)) -> CausesHeatTo(x,y))", "(AbsorbingSunlight(Sunlight) & CausesHeatIn(Sunlight))"]}
{"id": "entailmentbank_validation_271", "nl": "the sidewalk located outsie will heat.", "fol": "", "prediction": ["all x.((Standard(x) & LocatedOutsie(x)) -> Heats(x))", "all x.((Sidewalk(x) & LocatedOutsie(x)) -> Heat(x))", "all x.(Potential(x) -> Heat(x))", "all x.((Standard(x) & LocatedOutsie(x)) -> Heats(x))", "all x y.((Standard(x) & Street(y)) -> (LocatedOutsie(x,y) & Heat(x,y)))", "all x.(Standard(x) -> Heat(x))", "all x.((Standard(x) & LocatedOutsie(x)) -> Heat(x))", "all x.(Sidewalk(x) -> Heat(x))", "all x y z.((Standard(x) & InStation(y,z)) -> HeatSet(x))", "all x.((Sidewalk(x) & Outsie(x)) -> Heats(x))", "all x.((Sidewalk(x) & Outsie(y)) -> Heats(x,y))", "all x.((Sidewalk(x) & LocatedOutsie(x)) -> Heats(x))", "all x.((Sidewalk(x) & LocatedOutsie(x)) -> Heat(x))", "all x.(Shuttle(x,Outsie) -> Heats(x))", "all x.((Standard(x) & LocatedOutsie(x)) -> Heat(x))", "all x.((Sidewalk(x) & LocatedOutsie(x)) -> Heat(x))"]}
{"id": "entailmentbank_validation_272", "nl": "if something heat, it will feel hot.", "fol": "", "prediction": ["all x.(Heat(x) -> FeelsHot(x))", "(Heat(hot) -> FeelsHot(hot))", "all x.(Heat(x) -> FeelHot(x))", "all x y.((Heat(x) & Heat(y)) -> FeelsHot(x))", "all x.(Heat(x) -> FeelHot(x))", "all x.(Heat(x) -> FeelHot(x))", "all x.(Heat(x) -> FeelsHot(x))", "all x.(Heat(x) -> FeelHot(x))", "all x.((Heat(x) & FeelHot(x)) -> Heat(x))", "all x.(Heat(x) -> FeelHot(x))", "all x.(Heat(x) -> FeelHot(x))", "all x.(Heat(x) -> FeelsHot(x))", "all x.(Heat(x) -> FeelHot(x))", "all x.(Heat(x) -> FeelHot(x))", "all x y.((Heat(x) & Hot(y)) -> Feeling(x,y))", "all x.(Heat(x) -> FeelHot(x))"]}
{"id": "entailmentbank_validation_273", "nl": "the sidewalk located outside will feel hot.", "fol": "", "prediction": ["all x.((Sidewalk(x) & LocatedOutside(x)) -> FeelsHot(x))", "all x.((Sidewalk(x) & LocatedOutside(x)) -> FeelsHot(x))", "all x.((Standard(x) & LocatedOutside(x)) -> FeelsHot(x))", "all x.((Standard(x) & LocationOutside(x)) -> FeelsHot(x))", "all x.((Sidewalk(x) & LocatedOutside(x)) -> FeelsHot(x))", "all x.((Standard(x) & Outside(x)) -> FeelsHot(x))", "all x.((Sidewalk(x) & LocatedOutside(x)) -> FeelHot(x))", "all x.((Standard(x) & LocatedOutside(x)) -> FeelsHot(x))", "all x.((Standard(x) & Outside(x)) -> FeelHot(x))", "all x.((Standard(x) & Outside(x)) -> FeelsHot(x))", "all x.((Sidewalk(x) & LocatedOutside(x)) -> FeelsHot(x))", "all x.((Standard(x) & Outside(x)) -> FeelsHot(x))", "all x.((Standard(x) & LocationOutside(x)) -> FeelsHot(x))", "all x.((Standard(x) & LocatedOutside(x)) -> FeelsHot(x))", "all x y.((Standard(x) & LocatedOutside(x,y)) -> FeelsHot(x))", "all x.((Standard(x) & LocatedOutside(x)) -> FeelsHot(x))"]}
{"id": "entailmentbank_validation_274", "nl": "there is a person in a dark room looking out a window in the day.", "fol": "", "prediction": ["exists x y z.(Property(x) & DarkRoom(y) & Window(z) & SeesOut(x,z))", "exists x.(Person(x) & InDarkRoom(x) & LooksOutWindow(x))", "exists x.(Person(x) & DarkRoom(x) & LooksOutWindow(x))", "all x.(CellsOut(x) -> exists y.(Person(y) & InDarkRoom(y,x)))", "exists x y.((Person(x) & DarkRoom(y) & LookingOutWindow(x,y))", "all x.(DarkRoom(x) -> LooksOutWindow(x))", "exists x.(Person(x) & DarkRoom(x) & LooksOutWindow(x))", "exists x y.(DarkRoom(x) & Person(y) & LooksOutWindow(y,Day))", "exists x y z w.((Person(x) & DarkRoom(y) & Window(z) & inDarkRoom(y) & LookingOut(x,z)) -> Day(z))", "all x y.((Person(x) & DarkRoom(x) & LooksOutWindow(x,y)) -> DoesTheDay(x))", "exists x y.(Person(x) & DarkRoom(y) & LooksOutWindow(x,y))", "exists x y z.((Person(x) & DarkRoom(y) & Window(z)) -> LooksOut(x,y,z))", "exists x.(Person(x) & DarkRoomLookingOutWindow(x))", "all x y.((Person(x) & DarkRoom(y) & LooksOutWindow(x,y)) -> InDayTime(x,y))", "exists x y.(Person(x) & DarkRoom(y) & LookingOutWindow(x,y))", "exists x y.((Person(x) & DarkRoom(y) & LookingOutWindow(z,day)) -> PresentedIn(x,y))"]}
{"id": "entailmentbank_validation_275", "nl": "if something is in a dark place, then that something will not reflect enough light to be seen.", "fol": "", "prediction": ["all x y.((DarkPlace(x) & DarkPlace(y)) -> -ReflectsEnoughLightToBeSeen(x,y))", "all x.((DarkPlace(x) & InReflectingLight(x)) -> -ReflectsLightToBeSeen(x))", "all x.(DarkPlace(x) -> -ReflectsEnoughLight(x))", "all x y.((DarkPlace(x) & DarkPlace(y)) -> -ReflectsEnoughLight(y,x))", "all x.((Property(x) & DarkPlace(x)) -> -ReflectsEnoughLightForSight(x))", "all x.(DarkPlace(x) -> -ReflectsEnoughLightToBeSeen(x))", "all x y.((DarkPlace(x) & DarkPlace(y)) -> -ReflectsEnoughLight(x,y))", "all x y.((DarkPlace(x) & Dish(y)) -> -ReflectsEnoughLightToBeSeen(x,y))", "all x.((DarkPlace(x) & DarkPlace(x)) -> -ReflectsEnoughLightToBeSeen(x))", "all x.(DarkPlace(x) -> -ReflectsEnoughLightToBeSeen(x))", "all x.(DarkPlace(x) -> -ReflectLightToBeSeen(x))", "all x.((DarkPlace(x) & ReflectsLight(x)) -> NotSeen(x))", "all x.(DarkPlace(x) -> BecauseShewnLight(x))", "all x.(DarkPlace(x) -> -ReflectsEnoughLight(x))", "all x.(DarkPlace(x) -> -ReflectsEnoughLightToBeSeen(x))", "all x y.(((IsDark(x) & In(y,x)) -> -ReflectsEnoughLight(y,x))"]}
{"id": "entailmentbank_validation_276", "nl": "the person in the dark room will not reflect enough light to be seen.", "fol": "", "prediction": ["all x.(DarkRoom(x) -> -ReflectsEnoughLightForSight(x))", "all x.(DarkRoom(x) -> LightReflection(x))", "all x.(DarkRoom(x) -> -ReflectsEnoughLight(x))", "all x.((Person(x) & DeepRoom(x)) -> -ReflectsEnoughLight(x))", "all x.(DarkRoom(x) -> (Person(x) & ReflectsInEnoughLight(x,y)))", "all x.((Person(x) & DarkRoom(x)) -> -ReflectsEnoughLightToBeSeen(x))", "all x.(Same(x) -> -GlateLight(x))", "all x.((Person(x) & DarkRoom(x)) -> -ReflectsEnoughLightForSight(x))", "all x.(DarkRoom(x) -> -ReflectsEnoughLightToBeSeen(x))", "all x y.((Person(x) & DarkRoom(y)) -> -ReflectsEnoughLightToBeSeen(x,y))", "all x.(DarkRoom(x) -> ReflectsEnoughLight(x))", "all x y.((Person(x) & DarkRoom(y)) -> -ReflectsEnoughLight(x,y))", "all x y.((Person(x) & DarkRoom(y)) -> -ReflectsEnoughLightToBeSeen(x,y))", "all x.(DarkRoom(x) -> -ReflectsEnoughLight(x))", "all x y.((Person(x) & DarkRoom(y)) -> -ReflectsEnoughLight(x,y))", "all x.(DarkRoom(x) -> -ReflectsEnoughLight(x))"]}
{"id": "entailmentbank_validation_277", "nl": "there is a person outside in the day looking into the dark room.", "fol": "", "prediction": ["exists x.(PersonOutside(x) & DayInDayLooksIntoDarkRoom(x))", "exists x y.(PersonOutside(x) & Day(y) & LooksIntoDarkRoom(x,y))", "exist x.(Person(x) & Outside(x) & NightLookingIntoDarkRoom(x))", "all x y.((Person(x) & Outside(y,x)) -> LooksIntoDarkRoom(x))", "exists x.(Outside(x) & inDay(x) & LooksIntoDarkRoom(x))", "exists x.(Outside(x) & Day(x) & LooksIntoDarkRoom(x))", "exists x.(Person(x) & OutsideInDay(x) & LooksIntoDarkRoom(x))", "exists x.(Outside(x) & Day(x) & LooksIntoDarkRoom(x))", "all x.(Outside(x) & LookingIntoDarkRoom(x))", "all x.(IsOutside(x) & LookingIntoDarkRoom(x))", "all x y.((Person(x) & Outside(y) & Day(x,y)) -> LooksIntoDarkRoom(x,y))", "exists x.(PersonOutside(x) & DayOutlooksDarkRoom(x))", "all x y.((Person(x) & Outside(y)) -> LooksIntoDarkRoom(x,y))", "exists x.(Outside(x) & LooksIntoDarkRoom(x))", "exists x.(PersonOutside(x) & DayOutsideLookingIntoDarkRoom(x))", "all x y.((Person(x) & Outside(x) & Day(y)) -> LooksIntoDarkRoom(x,y))"]}
{"id": "entailmentbank_validation_278", "nl": "the person outside cannot see the person in the dark room.", "fol": "", "prediction": ["all x y.((Person(x) & Outside(y)) -> -HeadsInDarkRoom(x,y))", "all x.(Outside(x) -> -CanSeeInDarkRoom(x))", "all x y.((Person(x) & Outside(x)) -> -exists z.(DarkRoom(y) & DarkRoom(z) & Outside(x) & -exists w.(Person(w) & Outside(x,w))))", "all x y.((Person(x) & Outside(x)) -> -SeesInDarkRoom(x))", "all x y.((Extending(x) & Person(y) & DarkRoom(x)) -> -SeenIn(x,y))", "all x y.((Person(x) & Outside(x) & DarkRoom(y)) -> -CanSeeIn(x,y))", "all x.(OutsideDarkRoom(x) -> NoSeeInDarkroom(x))", "all x y.((Person(x) & OutsideRoom(y)) -> -CanSeeInDarkRoom(x,y))", "all x.(OutsidePerson(x) -> -SeenInDarkRoom(x))", "all x y.((Person(x) & Outside(y) & DarkRoom(z)) -> -SeeIn(x,z))", "all x y.((Person(x) & DarkRoom(y)) -> -ViewsIn(x,y))", "all x y.((PersonFromOutside(x) & DarkRoom(y)) -> -CanSeeIn(x,y))", "all x y.((Person(x) & Outside(y) & DarkRoom(x)) -> -HasToSee(x,y))", "all x y.((Person(x) & OutsidePerson(y)) -> -SeeInDarkRoom(x,y))", "all x.(Outside(x) -> & -CanSeeInDarkRoom(x))", "all x y.((Person(x) & Outside(y)) -> -SeeInDarkRoom(x,y))"]}
{"id": "entailmentbank_validation_279", "nl": "a prism refracts light.", "fol": "", "prediction": ["all x.(Prism(x) -> RefractsLight(x))", "all x y.((Prism(x) & Light(y)) -> Refracts(x,y))", "all x.(Prism(x) -> RefractsLight(x))", "all x.(Prism(x) -> RefractsLight(x))", "all x.(Prism(x) -> RefractsLight(x))", "all x.(Prism(x) -> RefractsLight(x))", "all x.(Prism(x) -> RefractsLight(x))", "all x.(Prism(x) -> RefractsLight(x))", "all x.(Prime(x) -> RefractsLight(x))", "all x.(Prism(x) -> RefractsLight(x))", "all x.(Prism(x) -> RefractsLight(x))", "all x.(Prism(x) -> RefractsLight(x))", "all x.(Prism(x) -> RefractsLight(x))", "all x.(Prism(x) -> RefractsLight(x))", "all x.(Prism(x) -> RefractsLight(x))", "all x.(Prism(x) -> RefractsLight(x))"]}
{"id": "entailmentbank_validation_280", "nl": "refracting sunlight / light causes sunlight / light to split into different colors.", "fol": "", "prediction": ["all x y.((RefractingSunlight(x) & Sunlight(y)) -> CausesSunlightToSplitIntoDifferentColors(x,y))", "all x.(RefractingSunlightOrLight(x) -> CausesSunlightOrLightSplitting(x,y))", "all x y.((RefractingSunlight(x) & Light(y)) -> (SunlightSplitting(x,y) & LightSplitting(y,z)))", "all x.((RefractingSunlight(x) & RefractingLight(x)) -> ItSplitsIntoDifferentColors(x))", "all x y.((RefractingSunlight(x) & RefractingSunlight(y)) -> CausesSunlight(x,y))", "all x.((RefractingSunlight(x) & Light(y)) -> CausesSunlight(x,y))", "all x y z.((Sunlight(x) & Light(y) & Refracting(x,y)) -> CausesSunlightSplitting(x,z))", "all x.((RefractingSunlight(x) & ReducesSunlight(x)) -> CausesSunlight(x))", "all x y.((RefractingSunlight(x,y) & Sunlight(y)) -> CausesSunlight(x))", "all x.(RefractingSunlight(x) -> CausesSunlightToSplitIntoDifferentColors(x))", "all x.(RefractingSunlight(x) -> CausesSunlight/LightToSplitIntoVariousColors(x))", "all x y.((Refracting(x) & Sunlight(y)) -> CausesSunlightToSplitIntoDifferentColors(x,y))", "all x y.((RefractingSunlight(x) & Redshift(y)) -> CausesSunlight(x,y))", "all x y.((RefractingSunlight(x) & RefractingSunlight(x)) -> CausesSunlightToSplitIntoColors(x,y))", "all x.((RefractingSunlight(x) & RefractingLight(x)) -> CausesSunlightToSplitIntoDifferentColors(x))", "all x y z.((Sunlight(x) & Light(y) & Refracting(x,y)) -> CausesSunlightToSplitIntoStayColors(x,z))"]}
{"id": "entailmentbank_validation_281", "nl": "a prism can refract light and split the light into different colors.", "fol": "", "prediction": ["all x.(Primum(x) -> (RefractsLight(x) & SplitsLightIntoDifferentColors(x)))", "all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoDifferentColors(x)))", "all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoDifferentColors(x)))", "all x y.((Prism(x) & Light(y)) -> (Refracts(x,y) & SplitsIntoColors(x)))", "all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoDifferentColors(x)))", "all x.(Prism(x) -> (refractsLight(x) & SplitsLightIntoDifferentColors(x)))", "all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoDifferentColors(x)))", "all x y.((Prism(x) & Light(y)) -> (Refract(x,y) & SplitIntoPaints(x,y)))", "all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoCarotenes(x)))", "all x.(Prism(x) -> (Color(x,red) & LightColor(x,red)))", "all x y.((Prism(x) & Light(y)) -> (Refracts(x,y) & SplitsIntoColors(x,y)))", "all x y.((Prism(x) & Light(y) & CanRefract(x,y)) -> CanSplitIntoColors(x,y))", "all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoColors(x)))", "exists x.(Prism(x) & RefractsLight(x) & SplitsLightIntoColors(x))", "all x.(Prism(x) -> (CanRefractLight(x) & CanSplitlightIntoDifferentColors(x)))", "all x.(Primsm(x) -> (RefractsLight(x) & SplitsLight(x)))"]}
{"id": "entailmentbank_validation_282", "nl": "white light is made of all colors of visible light combined.", "fol": "", "prediction": ["all x.(WhiteLight(x) -> (OfVisibleLight(x) | ColorsMixed(x)))", "all x.(WhiteLight(x) -> ColorsOfVisibleLight(x))", "all x y.((WhiteLight(x) & VisibleLightColor(y)) -> MadeOf(x,y))", "all x.(WhiteLight(x) -> (ColoredLight(x) & Colors(y) & VisibleLight(y)))", "all x.(WhiteLight(x) -> exists y.(VisibleLight(y) & CombinedColor(x,y))))", "all x.(WhiteLight(x) -> (ColorsOfVisibleLight(x) & ColorsOfVisibleLight(x)))", "all x.(WhiteLight(x) -> MadeOf(x,VisibleLight,ColoredLight))", "all x.(WhiteLight(x) -> MadeOfCreativeCreativeLight(x))", "all x.(WhiteLight(x) -> MadeOfVisibleLight(x))", "all x.(WhiteLight(x) -> exists y.(VisibleLightColor(y) & MadeOf(x,y)))", "all x.(WhiteLight(x) -> (UniqueVisibleLight(x) & IdenticalVisibleLight(x)))", "all x.(WhiteLight(x) -> (ContainsVisibleLight(x) & MadeOf(x,y)))", "all x.(WhiteLight(x) -> (VisibleLight(x) & Color(x)))", "all x.(WhiteLight(x) -> (HasCalibrationOfVisibleLight(x) & HasColors(x,see) & CombinedLayers(x)))", "all x.(WhiteLight(x) -> ConsistsOfVisibleLight(x))", "all x.(WhiteLight(x) -> (AllColors(x) | VisibleLightCombined(x)))"]}
{"id": "entailmentbank_validation_283", "nl": "a prism can refract white light and split the light into all colors of visible light.", "fol": "", "prediction": ["all x.(Prism(x) -> (RefractWhiteLight(x) & SplitLightIntoAllColorsOfVisibleLight(x)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColorsVisibleLight(x)))", "all x.(Prime(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColorsOfVisibleLight(x)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoColories(x)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColorsOfVisibleLight(x)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColors(x)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoSeparateCameras(x)))", "all x y.((Prism(x) & WhiteLight(y)) -> RefractsAndSplits(x,y))", "all x.(Prism(x) -> (RefractWhiteLight(x) & SplitLightIntoAllColorsOfVisibleLight(x)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColors(x)))", "all.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLight(x) & Colors(x)))", "all x.(Prism(x) -> CanRefractWhiteLight(x) & CanSplitLightIntoSeriousLight(x))", "all x y.((Prism(x) & RefractsWhiteLight(y)) -> SplitsLightIntoAllColors(x,y))", "all x y.((Prism(x) & WhiteLight(y)) -> (Refract(x,y) & SplitLightIntoAllColors(x,y)))", "all x y.((Prism(x) & WhiteLight(y)) -> CanRefractAndSplit(x,y))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColors(x)))"]}
{"id": "entailmentbank_validation_284", "nl": "a vacuum has no matter in it.", "fol": "", "prediction": ["all x.(Vacuum(x) -> NoMatterIn(x))", "all x.((Vacuum(x) & -Matter(x)) -> HasInVacuum(x))", "all x.(Vacuum(x) -> -MatterInVacuum(x))", "all x.(Vacuum(x) -> NoMatterInSelf(x))", "all x.(Vacuum(x) -> - MatterInVacuum(x))", "all x.(Vacuum(x) -> -MatterInVacuum(x))", "all x.(Vacuum(x) -> -MatterInVacuum(x))", "all x.(Vacuum(x) -> NoMatterIn(x))", "all x.(Vacuum(x) -> -Matter(x))", "all x.(Vacuum(x) -> NoMatterIn(x))", "all x y.((Vacuum(x) & MatterInVacuum(x)) -> -MatterInVacuum(x))", "all x.(Vacuum(x) -> NoMatterIn(x))", "all x.(Vacuum(x) -> -MatterIn(x))", "all x.(Vacuum(x) -> -HasMatter(x))", "all x.(Vacuum(x) -> NoMatterInVacuum(x))", "all x.(Vacuum(x) -> ThereIsNoMatterIn(x))"]}
{"id": "entailmentbank_validation_285", "nl": "sound requires matter to travel.", "fol": "", "prediction": ["all x.(Sound(x) -> RequiresMatterToTravel(x))", "all x.(Sound(x) -> RequiresMatterToTravel(x))", "all x.(SoundRequiresMatter(x) -> Travel(x))", "all x.(Sound(x) -> HasMatterToTravel(x))", "all x.(Sound(x) -> RequiresMatterToTravel(x))", "all x.(Sound(x) -> RequiresMatterToTravel(x))", "all x.(Sound(x) -> RequiresMatterToTravel(x))", "all x.(Sound(x) -> RequiresMatterToTravel(x))", "all x.(Sound(x) -> RequiresMatter(x))", "all x.(Sound(x) -> RequiresMatterToTravel(x))", "all x.(Sound(x) -> RequiresMatter(x))", "all x.(Sound(x) -> RequiresMatterToTravel(x))", "all x.(Sound(x) -> RequiresMatterToTravel(x))", "all x.(Sound(x) -> RequiresMatterToTravel(x))", "all x.(Sound(x) -> RequiresMatterToTravel(x))", "all x.(Sound(x) -> RequiresMatterToTravel(x))"]}
{"id": "entailmentbank_validation_286", "nl": "sound cannot travel through a vacuum.", "fol": "", "prediction": ["all x.(Sound(x) -> -(TravelsThroughVacuum(x) | TravelsThroughVapor(x)))", "all x.(Sound(x) -> -TravelsThroughVacuum(x))", "all x.(Sound(x) -> -TravelsThroughVacuum(x))", "all x.(Sound(x) -> -TravelsThroughVacuum(x))", "all x.(Sound(x) -> -ContrariesThroughVacuum(x))", "all x.(Sound(x) -> -TransportsThroughVacuum(x))", "all x.(Sound(x) -> -TravelsThroughVapor(x))", "all x.(Sound(x) -> -TravelsThroughVacuum(x))", "all x.(Sound(x) -> -CanTravelThroughVacuum(x))", "all x.((Sound(x) & Vacuum(y)) -> -TravelsThrough(x,y))", "all x.(Sound(x) -> -TravelsThroughVacuum(x))", "all x.(Sound(x) -> -TravelsThroughVacuum(x))", "all x.(Sonic(x) -> -FacesVacuum(x))", "all x.(Sound(x) -> -TravelsThroughVapor(x))", "all x.(Sound(x) -> -TravelsThroughVacuum(x))", "all x.(Sound(x) -> -TreatthroughVapor(x))"]}
{"id": "entailmentbank_validation_287", "nl": "metal is a thermal / thermal energy conductor.", "fol": "", "prediction": ["all x.(Metal(x) -> ThermalEnergyConductor(x))", "all x.(Metal(x) -> ThermalEnergyConductor(x))", "all x.(Metal(x) -> ThermalEnergyConductor(x))", "all x.(Metal(x) -> ThermalEnergyConductor(x))", "all x.(Metal(x) -> Thermal(x) & ThermalEnergyConductor(x))", "all x.(Metal(x) -> ThermalConductor(x))", "all x.(Metal(x) -> ThermalEnergyConductor(x))", "all x.(Metal(x) -> ThermalEnergyConductor(x))", "all x.(Metal(x) -> Thermal(x))", "all x.(Metal(x) -> ThermalEnergyConductor(x))", "all x.(Metal(x) -> ThermalEnergyConductor(x))", "all x.(Metal(x) -> (Thermal(x) | ThermalEnergyConductor(x)))", "all x.(Metal(x) -> ThermalConductor(x))", "all x.(Metal(x) -> ThermalEnergyConductor(x))", "all x.(Metal(x) -> ThermalEnergyConductor(x))", "all x.(Metal(x) -> Thermal/thermalEnergyConductor(x))"]}
{"id": "entailmentbank_validation_288", "nl": "a spoon sometimes is made of metal.", "fol": "", "prediction": ["exists x.(Spoon(x) & MadeOfMetal(x))", "exists x.(Spoon(x) & MadeOfMetal(x))", "exists x.(Spoon(x) & MadeOfMetal(x))", "exists x.(Spoon(x) & MadeOfMetal(x))", "all x.(Spoon(x) -> SometimesMadeOfMetal(x))", "exists x.(Spoon(x) & MadeOfMetal(x))", "exists x.(Spoon(x) & MadeOfMetal(x))", "exists x.(Spoon(x) & MadeOfMetal(x))", "all x.(Spoon(x) -> MadeOfMetal(x))", "all x.(Spoon(x) -> MadeOfMetal(x))", "all x.(Spoon(x) -> MadeOfMetal(x))", "exists x.(Spoon(x) & MadeOfMetal(x))", "exists x.(Spoon(x) & MadeOfMetal(x))", "exists x.(Spoon(x) & MadeOfMetal(x))", "exists x.(Spoon(x) & MadeOfMetal(x))", "exists x.(Spoon(x) & MADEOfMetal(x))"]}
{"id": "entailmentbank_validation_289", "nl": "a metal spoon is a thermal conductor.", "fol": "", "prediction": ["all x.(MetalSpoon(x) -> ThermalConductor(x))", "all x.(MetalSpoon(x) -> ThermalConductor(x))", "all x.((MetalSpoon(x) & ThermalConductor(x)) -> CanConduct(x))", "all x.(MetalSpoon(x) -> ThermalConductor(x))", "all x.((MetalSpoon(x) & ThermalConductor(x)) -> Heater(x))", "all x.(MetalSpoon(x) -> ThermalConductor(x))", "all x.(MetalSpoon(x) -> ThermalConductor(x))", "all x.(MetalSpoon(x) -> ThermalConductor(x))", "all x.(MetalSponge(x) -> ThermalConductor(x))", "all x.((MetalSpoon(x) & ThermalConductor(x)) -> ThermalConductor(x))", "all x.((MetalSpoon(x) & ThermalConductor(x)) -> ThermalConductor(x))", "all x.(Spoon(x) -> ThermalConductor(x))", "all x.(MetalSpoon(x) -> ThermalConductor(x))", "all x.(MetalSpoon(x) -> ThermalConductor(x))", "all x.(MetalSpoon(x) -> ThermalConductor(x))", "all x.(MetalSpoke(x) -> ThermalConductor(x))"]}
{"id": "entailmentbank_validation_290", "nl": "a hot substance is a source of heat.", "fol": "", "prediction": ["all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x.((HotSubstance(x) & SourceOfHeat(x)) -> SourceOfHeat(x))", "all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x y.((HotSubstance(x) & HeatSource(y)) -> SourceOf(x,y))", "all x.(HotSubstance(x) -> HeatSource(x))", "all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x.((HotSubstance(x) & SourceOfHeat(x)) -> HeatSource(x))", "all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x.(HotSubstance(x) -> SourceOfHeat(x))"]}
{"id": "entailmentbank_validation_291", "nl": "a metal spoon is placed in a pot of hot soup.", "fol": "", "prediction": ["all x y z.((MetalSpoon(x) & PotOfHotSoup(y) & PotOfSoup(z)) -> PlacedIn(x,y,z))", "all x y z oracles ((MetalSpoon(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))", "all x y.((MetalSpoon(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))", "all x y z.((MetalSpooner(x) & HotSoup(y) & Pot(z)) -> PlacedIn(x,y,z))", "all x y.((MetalSpoon(x) & HotSoupPot(y)) -> PlacedIn(x,y))", "all x y.((MetalSpoon(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))", "all x y.((MetalSpoon(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))", "all x y z.((MetalSpoon(x) & PotOfHotSoup(y) & PotOfHotSoup(z)) -> PlacedIn(x,y,z))", "all x y.((MetalSpoon(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))", "all x y.((MetalSpoon(x) & HotSoup(y)) -> PlacedInPot(x,y))", "all x y z.((MetalSpoon(x) & PotOfHotSoup(y) & In(x,y)) -> PlacedIn(x,y))", "all x y.((MetalSpoon(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))", "all x y.((MetalSpoon(x) & HotSoupPot(y)) -> PlacedIn(x,y))", "all x y.((MetalSpoon(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))", "all x y.((MetalSpoon(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))", "all x y.((MetalSpoon(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))"]}
{"id": "entailmentbank_validation_292", "nl": "the hot soup will be a source of heat for the metal spoon.", "fol": "", "prediction": ["-SourceOfHeatForMetalSpoon(hotSoup)", "all x y.((HotSoup(x) & MetalSpoon(y)) -> HeatSource(x,y))", "all x y z.((HotSoup(x) & MetalSpoon(y) & Soup(z)) -> SourceOfHeat(x,y,z))", "all x y.((HotSoup(x) & MetalSpoon(y)) -> SourceOfHeat(x,y))", "all x.(HotSoup(x) -> InsituteOfHeat(x))", "all x.(HotSoup(x) -> HeatSource(x))", "all x y.((HotSoup(x) & Snail(y)) -> SourceOfHeat(x,y))", "all x y.((HotSoup(x) & MetalSpoon(y)) -> SourceOfHeat(x,y))", "all x y.((HotSoup(x) & MetalSpoon(y)) -> SourceOfHeat(x,y))", "all x.(HotSoup(x) -> HeatSource(x))", "all x y.((HotSoup(x) & MetalSpoon(y)) -> SourceOfHeat(x,y))", "all x.(HotSoup(x) -> HeatSource(x,metalSpoon))", "all x y.((HotSoup(x) & MetalSpoon(y)) -> SourceOfHeat(x,y))", "all x.(HotSoup(x) -> HeatSourceForMetalSpoke(x))", "all x.(HotSoup(x) -> SourceOfHeat(x,MetalSpoon))", "all x.(HotSoup(x) -> HeatSource(x))"]}
{"id": "entailmentbank_validation_293", "nl": "if a thermal conductor is exposed to a source of heat, then thermal conduction will make the thermal conductor become hot.", "fol": "", "prediction": ["all x y z.((TermalConductor(x) & SourceOfHeat(y) & ThermalConductor(z)) -> ExposedToHeat(x,y))", "all x y.((TerminalConductor(x) & ExposedToHeatSource(x,y)) -> ThermalConductionMakesTemperaryConductorHot(x))", "all x y.((ThermalConductor(x) & ExposedToHeat(x)) -> ThermalConductionMakesThermalConductorHot(x))", "all x.((TemperatureConductor(x) & ExposedToHeat(x)) -> ThermalConductionMakesTemperatureHot(x))", "all x y.((ThermalConductor(x) & ExposedToHeat(x) & ThermalConduction(y)) -> Hot(x))", "all x y z.((ThermalConductor(x) & SourceOfHeat(y) & ExposedTo(x,y)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y.(((ThermalConductor(x) & ExposedToHeat(x) & SourceOfHeat(y)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y z.((ThermalConductor(x) & SourceOfHeat(y) & ExposedTo(x,y)) -> ThermalConductionMakes(x,z))", "all x.((ThermalConductor(x) & ExposedToHeatSource(x)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y.((ThermalConductor(x) & SourceOfHeat(y) & ExposedTo(x,y)) -> ThermalConductionMakesThermalConductorHot(x))", "all x.((ThermalConductor(x) & ExposedToHeatSource(x)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y z.((ThermalConductor(x) & SourceOfHeat(y) & ExposureTo(x,y) & ThermalConduction(z)) -> HeatGift(x,z))", "all x y.((ThermalConductor(x) & ExposedToHeatSource(x)) -> ThermalConductionMakesThermalConductorHot(y))", "all x y.((ThermalConductor(x) & ExposedToHeat(x) & ThermalConduction(y)) -> Hot(x))", "all x.((ThermalConductor(x) & ExposedToHeat(x)) -> HeatSource(x))", "all x y.((ThermalConductor(x) & ExposedToHeat(x)) -> ThermalConductionMakesThermalConductorHot(x,y))"]}
{"id": "entailmentbank_validation_294", "nl": "the metal spoon will be heated up by thermal conduction.", "fol": "", "prediction": ["all x.(MetalSpoon(x) -> Heat(x,thermalConduction))", "all x.(MetalSpoon(x) -> Heater(x,thermalConduction))", "all x.(MetalSpoon(x) -> HeatsUpByThermalConduction(x))", "all x.(MetalSpoon(x) -> HeatsUpByThermalConduction(x))", "all x.(MetalSpoon(x) -> HeattedInThermalConduction(x))", "all x y.((MetalSpoon(x) & ThermalConduction(y)) -> HeatedUp(x,y))", "all x.(MetalSpoon(x) -> Heater(x))", "all x.(ServingSpoon(x) -> HeaterByThermalConduction(x))", "all x.(MetalSpoon(x) -> HeatingUp(x))", "all x.(MetalSpoon(x) -> Hit(x,thermalConduction))", "all x.(MetalSpoon(x) -> HeatsUpByThermalConduction(x))", "all x.(MetalSpoon(x) -> HeatsUpByThermalConduction(x))", "all x.(MetalSpoon(x) -> HeatsUpByThermalConduction(x))", "all x.(MetalSpoon(x) -> HeatsUpByThermalConduction(x))", "all x.((MetalSpoon(x) & ThermalConduction(x)) -> HeatsUp(x))", "all x.(MetalSpoon(x) -> HeatableByThermalConduction(x))"]}
{"id": "entailmentbank_validation_295", "nl": "thermal conduction is when heat flows from warmer object to cooler object.", "fol": "", "prediction": ["all x.(ThermalConduction(x) -> HeatFlowsFromWarmerObjectToCrowderObject(x))", "all x.((Warmer(x) & Cooler(x)) -> ThermalConduction(x))", "all x y.((ThermalConduction(x) & WarmerObject(y)) -> HeatFlowsToCoolerObject(x,y))", "all x.(HeatConduction(x) -> HeatFlowsFromWarmerObjectToCreator(x))", "all x.((ThermalConduction(x) & WarmerObject(x) & CoolerObject(x)) -> HeatFlowsFromTo(x,warmerObject,coolerObject))", "all x y.((TemperatureConduction(x) & WarmerObject(y)) -> HeatFlowsFromToColder(x,y))", "all x y.((TemperatileConduction(x) & WarmerObject(y)) -> HeatFlow(x,y))", "all x y.((TemperalConduction(x) & WarmerObject(y)) -> HeatFlows(x,y))", "all x y z.((ThermalConduction(x) & WarmerObject(y) & CoolerObject(z)) -> HeatFlowsFromTo(x,y,z))", "all x.(ThermalConduction(x) -> HeatFlowsFromWarmerToCooler(x))", "all x y.((ThermalConduction(x) & WarmerObject(y)) -> HeatFlowsToColderObject(x,y))", "all x.((WarmerObject(x) & CoolerObject(x)) -> DisruptsHeat(x))", "all x y z.((TemperatureConduction(x) & WarmerObject(y) & CoolerObject(z)) -> HeatFlowsFromTo(x,y,z))", "all x y.((TemperalConduction(x) & WarmerObject(y) & CoolerObject(y)) -> HeatFlowsTo(x,y))", "all x.(ThermalConduction(x) -> HeatFlowsFromWarmer(x))", "all x y.((TemperatureConduction(x) & WarmerObject(y) & CoolerObject(y)) -> HeatFlowsFromTo(x,y))"]}
{"id": "entailmentbank_validation_296", "nl": "thermal conduction is when materials conduct heat through those materials through collision of particles.", "fol": "", "prediction": ["all x.((Material(x) & ConductsHeatThrough(x,CombateParticles)) -> ThermalConduction(x))", "all x y.((Material(x) & Material(y) & ConductsHeatThrough(x,y)) -> CollisionOfParticles(x))", "all x.((Materials(x) & ConductsHeat(x) & Hits(x,y)) -> ThermalConduction(x))", "all x.((Material(x) & ConductsHeat(x) & Collision(x)) -> ThermalConduction(x))", "all x y.((Material(x) & Material(y) & ConductsHeatTo(x,y) & CollisionOfParticles(x)) -> ThermalConduction(x,y))", "all x.((Material(x) & ConductsHeat(x) & Parcel(x)) -> ThermalConduction(x))", "all x y.((Material(x) & Material(y) & ConductsHeat(x,y)) -> ByCollusionOfParticles(x,y))", "all x.(ThermalConduction(x) -> (ConductsHeat(x) & MaterialsCollision(x)))", "all x.((Material(x) & ConductsHeat(x) & ByCollisionOfParticles(x)) -> ThermalConduction(x))", "all x y.((Material(x) & Material(y)) -> ConductsHeat(x,y))", "all x.(ThermalConduction(x) -> ConductsHeatThroughCouplingOfProbability(x))", "all x.(ThermalConduction(x) \u2013 ConductsHeatThroughMaterials(x))", "all x.((Material(x) & ConductsHeat(x) & CollisionOfParticles(x)) -> ThermalConduction(x))", "all x.(ThermalConduction(x) -> ConductsHeatThroughCouples(x))", "all x.(ThermalConduction(x) -> (ConductsHeat(x) & Materials(x) & CollisionOfParticles(x)))", "all x.((Material(x) & ConductsHeat(x,y) & CollisionOfParticles(x)) -> ThermalConduction(x))"]}
{"id": "entailmentbank_validation_297", "nl": "thermal conduction is a heat exchange process involving the collision of particles.", "fol": "", "prediction": ["all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCollusionOfParticles(x)))", "all x.(ThermalConduction(x) -> (HeatExchange(x) & CollisionOfParticles(x)))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & ContainsPollution(x)))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & CollisionOfParticles(x)))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCollisionOfParticles(x)))", "all x y z.((ThermalConduction(x) & HeatExchangeProcess(y) & Particle(z)) -> InvolvesCollision(x,y,z))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & CollisionOfParticles(x)))", "(HeatExchangeProcess(thermalConduction) & CollisionOfParticles(thermalConduction,10))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCompromeationOfParticles(x)))", "all x.(ThermalConduction(x) -> (CouplesParticles(x) & HeatExchange(x)))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & CollisionOfParticles(x)))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCollisionOfParticles(x)))", "all x.(ThermalConduction(x) -> HeatExchange(x))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCollicationOfParticles(x)))", "all x.(HeatExchangeProcess(x) & (CollidationOfParticles(x,y) | CollisionOfParticles(y))) -> ThermalConduction(x))", "all x.((ThermalConduction(x) & HeatExchangeProcess(x) & CollisionOfParticles(x)) -> HeatEducation(x))"]}
{"id": "entailmentbank_validation_298", "nl": "longitudinal waves travel through pattern of compressions and rarefactions.", "fol": "", "prediction": ["all x y.((LentilWaves(x) & PatternOfCompressions(x) & Rarefactions(y)) -> TravelsThrough(x,y))", "all x y z.((LanguageWaves(x) & Compression(y) & Rarefaction(z)) -> TravelsThrough(x,y,z))", "all x.(LanguageWaves(x) -> (TravelsThroughCompressions(x) & TravelsThroughRecroisfactions(x)))", "all x.(LanguageWaves(x) -> (TravelsThrough(x,Compressions) & TravelsThrough(x,Rarefactions)))", "all x.(Waves(x) & Longitudinal(x)) -> TravelsThroughPatternOfCompressionsAndRarefactions(x))", "all x y.((LanguageWaves(x) & Pattern(y) & Compressions(y) & Rarefactions(x)) -> TravelsThrough(x,y))", "all x y.((LanguageWaves(x) & PatternOfCompressions(y) & Rarefactions(y)) -> TravelsThrough(x,y))", "all x y z.((LanguageWaves(x) & Compactions(y) & Rarefactions(z)) -> TravelsThrough(x,y,z))", "all x.(LivingWaves(x) -> (TravelsThroughCompressions(x) & TravelsThroughRareFactions(x)))", "all x.(LanguageWaves(x) -> (TravelsThroughCommuctions(x) & TravelsThroughRarefactions(x)))", "all x y.((LanguageWaves(x) & PatternOfCompressions(y) & Rarefactions(y)) -> Travels(x,y))", "all x.(LanguageWaves(x) -> (TravelsThroughCompressionsAndRarefactions(x)))", "all x.(LanguageWaves(x) -> TravelsThroughPackageOfCompressionsAndRarefactions(x))", "all x.(LanguageWaves(x) -> (TravelsThroughCompressions(x) & TravelsThroughRarefactions(x)))", "all x.(LanguageWaves(x) ->(TravelsThroughCompressions(x) & TravelsThroughRarefactions(x)))", "all x.(LingualWaves(x) -> Travel(x))"]}
{"id": "entailmentbank_validation_299", "nl": "compression waves produces compressions and rarefactions.", "fol": "", "prediction": ["all x y.((CompressionWaves(x) & (Compression(y) | Rarefaction(y))) -> Produces(x,y))", "all x y.((CompressionWaves(x) & Compression(y)) -> (Produces(x,y) & Produces(x,y)))", "all x.(Compression(x) -> (ConductsCompressionAndRarefaction(x)))", "all x y.((Compression Wave(x) & RealCompression(x)) -> (ProducesCompressions(x) | ProducesRulefactions(x)))", "all x.(CompressorWaves(x) -> (ProducesCompressions(x) & ProducesRarefactions(x)))", "all x.(CompressionWaves(x) -> ProducesCompressionsAndRarefactions(x))", "all x.((CompressionWaves(x) & CompressionWaves(x)) -> (Produces(x,CompressionSigns) | Produces(x,Rarefactions)))", "all x.exists y.((CompressionSwift(x) & Compression(y) & Produces(x,y)) -> (Compressions(y) | Rarefactions(y)))", "all x.(CompressionWaves(x) -> (ProducesCompressions(x) & ProducesRareFactions(x)))", "all x.(CompressionWaves(x) -> (ProducesCompressions(x) & ProducesRarefactions(x)))", "all x.(CompressionWaves(x) -> (ProducesCompressions(x) & ProducesRareFactions(x)))", "all x.(CompressionWaves(x) -> (ProducesCompressions(x) & ProducesRarefactions(x)))", "all x.(CompressionWave(x) -> (ProducesCompressionSignals(x) & Rarefactions(x)))", "all x y.((KompressionWaves(x) & Compression(y)) -> (Produces(x,y) & Produces(x,y)))", "all x.(CompressionWaves(x) -> (ProducesCompressions(x) & ProducesRarefactions(x)))", "all x.(CompressionYouth(x) -> exists y.(Compression(y) & exists z.(Finds(z) & DesignedFor(z,e)) & exists w.(Faces(w) & Produces(x,w))))"]}
{"id": "entailmentbank_validation_300", "nl": "longitudinal waves are also called compression waves.", "fol": "", "prediction": ["all x.(LanguageWaves(x) -> CompressionWaves(x))", "all x.((LongitudinalWaves(x) & CompressionWaves(x)) -> Sound(x))", "all x.(LanguageWaves(x) -> (CompressionWaves(x)))", "all x.(LongitudinalWaves(x) -> (CompressionWaves(x) & LongitudinalWaves(x)))", "all x.(LengthyWaves(x) -> CompressionWaves(x))", "all x.((LengthlessWaves(x) & CompressionWaves(x)) -> Is(x))", "all x.(LongitudinalWaves(x) -> CompressionWaves(x))", "all x.(LanguageWaves(x) -> KnownAsCompressionWaves(x))", "all x.(LungularWaves(x) -> (CompressionWaves(x)))", "all x.(LanguageWaves(x) -> (CompressionWaves(x)))", "all x.(LanguageWaves(x) -> AlsoNumberOfCompressionWaves(x))", "all x.((LengthlessWaves(x) & CompressionWaves(x)) -> ConstraintWaves(x))", "all x.(LanguageWaves(x) -> CompressionWaves(x))", "all x.(LanguageWaves(x) -> CompressionWaves(x))", "all x.(LengthlessWaves(x) -> (CompressionWaves(x) | LongitudinalWaves(x)))", "all x.(LanguageWaves(x) -> CompressionWaves(x))"]}
{"id": "entailmentbank_validation_301", "nl": "longitudinal waves cause object to move in the same direction of the wave.", "fol": "", "prediction": ["all x y.((LanguageWaves(x) & Object(y)) -> MovesInSameDirection(y,x))", "all x y.((Lentil Wave(x) & Object(y)) -> MovesInSameDirection(y,x))", "all x.(LungularWaves(x) -> CausesMovementOnWaves(x))", "all x.(LanguageWaves(x) -> CausesMovementInSameDirectionOfWaves(x))", "all x y.((LanguageWaves(x) & Assocation(y)) -> CausesObjectToMoveInDirection(x,y))", "all x.(LentilWaves(x) -> CausesObjectToMoveInSameDirection(x))", "all x y.((LengthyWaves(x) & Object(y)) -> MoveInSameDirectionOfWaves(y,x))", "all x y.((LengthLanguageWaves(x) & Object(y)) -> MovesInSameDirection(x,y))", "all x y.((Language(x) & Wave(y)) -> CausesObjectToMoveInSameDirection(x,y))", "all x.(LungularWaves(x) -> CausesObjectToMoveInSameDirectionAsWaves(x))", "all x y.((LanguageWave(x) & Object(y)) -> MovesInSameDirection(y,x))", "all x.((LanguageWaves(x) & CausesObjectToMove(x)) -> SameDirectionOfWaves(x))", "all x y.((LensiformWave(x) &Object(y)) -> CausesToMove(x,y))", "all x y.((LengthlyWaves(x) & Object(y)) -> MovesInSameDirectionOfWaves(x,y))", "all x y.((LongitutorialWaves(x) & Object(y)) -> MovesInSameDirection(y,x))", "all x y.((LengthSpannerWaves(x) & Obstruction(y)) -> MovementSameDirection(x,y))"]}
{"id": "entailmentbank_validation_302", "nl": "compression waves cause object to move in the same direction of the wave.", "fol": "", "prediction": ["all x.(CompressionWaves(x) -> CausesObjectToMove(x,sameDirectionOfWaves))", "all x y z.(CompressionWaves(x) -> CausesObjectToMoveInSameDirection(x,y,z))", "all x.(CompressionWaves(x) -> CausesObjectToMoveInSameDirection(x))", "all x.(Compression(x) -> CausesObjectToMoveInSameDirection(x))", "all x.(CompressionWaves(x) -> CausesObjectToMoveInSameDirection(x,Y))", "all x y.((CompressionWaves(x) & Object(y)) -> MoveInDistanceOf(x,y))", "all x y.((CompressionWaves(x) & Object(y)) -> CausesToMoveInSameDirection(y,x))", "all x y.(((CompressionWing(x) & Object(y))) -> MovesInSameDirection(y,x))", "all x.(CompressionWaves(x) -> CauseMovement(x,SameDirection(x))", "all x.exists y.((CompressionWaves(x) & Object(y) & MovesInDirection(y,x)) -> CausesEmotion(x,y))", "all x y.((CompressionWing(x) & Object(y)) -> MoveInSameDirectionOfWing(y,x))", "all x.(CompressionWaves(x) -> CausesObjectToMoveInSameDirectionOfWaves(x))", "all x.(CompressionWaves(x) -> CausesMovement(x))", "all x y.((CompressionWaves(x) & Object(y)) -> CausesMovement(x,y))", "all x.(CompressionWaves(x) -> CauseObjectToMoveInSameDirection(x))", "all x y.((CompressionWaves(x) & Object(y)) -> MovesInSameDirection(y,x))"]}
{"id": "entailmentbank_validation_303", "nl": "a surface is a part of an object.", "fol": "", "prediction": ["all x y.((Surface(x) & Object(y)) -> PartOf(x,y))", "all x y.((Surface(x) & Object(y)) -> PartOf(x,y))", "all x.(Surface(x) -> PartOfObject(x))", "exists x.(Surface(x) & PartOfObject(x))", "all x.(Surface(x) -> PartOfObject(x))", "all x y z.((Surface(x) & Object(y) & IsPartOf(x,y)) -> PartOf(x,z))", "all x y.((Surface(x) & Object(y)) -> PartOf(x,y))", "all x y.((Surface(x) & Object(y)) -> PartOf(x,y))", "all x.((Surface(x) & PartOfObject(x)) -> PartOfObject(x))", "all x.(Surface(x) -> PartOfObject(x))", "all x y.((Surface(x) & Object(y)) -> PartOf(x,y))", "all x.(Surface(x) -> PartOfObject(x))", "all x y.((Surface(x) & Object(y)) -> PartOf(x,y))", "all x y.((Surface(x) & Object(y)) -> PartOf(x,y))", "all x.(Surface(x) -> PartOfObject(x))", "all x.(Surface(x) -> PartOfObject(x))"]}
{"id": "entailmentbank_validation_304", "nl": "friction occurs when two object's surfaces move against each other.", "fol": "", "prediction": ["all x.((Object(x) & MovesAgainst(x,y)) -> FrictionOfSurface(x))", "all x y z.((Object(x) & Surface(y) & Surface(z) & MoveAgainstOther(w)) -> FrictionOccurs(x,y,z))", "all x y.((Objects(x) & Surface(y) & Move(x,y)) -> FrictionOccurs(x))", "all x.(CrossFiber(x) -> MoveAgainstIce(x,2,2))", "all x.(FrictionOfObject(x) -> MovesAgainstSurface(x,2))", "all x y.((Object(x) & Surface(y) & MoveInFriction(x,y)) -> Reconcile(x,y))", "all x y.((Object(x) & Surface(y) & MovesAgainst(x,y)) -> FrictionOccurs(x))", "all x.((ObjectSurfaceMovement(x) & SurfaceMovement(x)) -> Friction(x))", "all x.((Object(x) & SurfaceMovement(x)) -> FrictionOccurrs(x))", "all x y z.((ObjectSurface(x) & Surface(y) & Surface(z) & MoveAgainst(x,z) & ObjectSurface(y)) -> FrictionOccurrence(x))", "all x y z.((Object(x) & Surface(y) & Surface(z)) -> MoveOnly(x,y,z))", "all x.((ObjectSurfacesMove(x) & ObjectSurfacesMove(x)) -> FrictionOf(x,2))", "all x y.((Object(x) & Surface(y)) -> MoveBy(x,y))", "all x y.((Object(x) & Surface(y) & MovingAgainst(x,y)) -> Friction(x,y))", "all x y.((ObjectSurface(x) & ObjectSurface(y) & MovesAgainst(x,y)) -> FrictionOccurs(x))", "all x.((Object(x) & Surface(x) & MovesAgainst(x,2)) -> FrictionOccurs(x))"]}
{"id": "entailmentbank_validation_305", "nl": "skidding is when the tire of a vehicle slides on the road without rotating.", "fol": "", "prediction": ["all x.((TireOfVehicle(x) & SlidesOnRoad(x)) -> Skidding(x))", "all x.(Skidding(x) -> (TireDecoratesOnRoad(x) & -Rotating(x)))", "all x y.((Vehicle(x) & Tire(y) & SlidesOnRoad(y,x)) -> Skidding(x))", "all x.(Skid(x) -> (RotarySledsOnRoad(x) & -Rotating(x)))", "all x y.((Vehicle(x) & Tire(y) & SlidesOnRoad(y,x)) -> Skidding(x))", "all x y.((Vehicle(x) & Tire(y) & SlidesOnRoad(y,x)) -> Skidding(x))", "all x y.((Vehicle(x) & Tire(y) & SlidesOnRoad(y,x) & -Rotating(y)) -> Skidding(x,y))", "all x y z.((Tire(x) & Vehicle(y) & Road(z) & SlidesOn(x,z)) -> -Rotating(x,y,z))", "all x.((Vehicle(x) & TireSlidsOnRoad(x) & -Rotating(x)) -> Skidding(x))", "all x y z.((Tire(x) & Vehicle(y) & Road(z) & SlidesOn(x,y,z) & -TorqueRotating(x)) -> Skidding(x))", "all x y.((Vehicle(x) & Tire(y) & SlidesOnRoadSince(y)) -> -Rotating(y))", "all x.(Skidding(x) -> (TireSlidesOnRoadWithoutRotating(x)))", "all x y.((Vehicle(x) & Tire(y)) -> SlidesOnRoad(y,x))", "all x y.((Vehicle(x) & Tire(y) & SlidesOnRoad(y,x) & -Rotates(y)) -> Skidding(x))", "all x y.((Vehicle(x) & Tire(y) & SlidesOnRoad(y,x)) -> Skidding(x))", "all x.(Skidding(x) -> (TireSlideOnRoad(x) & -Rotating(x)))"]}
{"id": "entailmentbank_validation_306", "nl": "a tire is a kind of object.", "fol": "", "prediction": ["all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> Object(x))", "all x.(Toy(x) -> Object(x))", "all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> KindOfObject(x))", "all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> Object(x))"]}
{"id": "entailmentbank_validation_307", "nl": "skidding causes friction between the tire and the road.", "fol": "", "prediction": ["all x y z.((Skidding(x) & Tire(y) & Road(z) & CausesFriction(x,y,z)) -> CausesFrictionAndRoad(x))", "all x y z.((Skidding(x) & Tire(y) & Road(z)) -> (CausesFlourishes(x,y) & CausesFlourishes(x,z)))", "all x.(Skidding(x) -> CausesFrictionWithTireAndRoad(x))", "all x.(Skidding(x) -> CausesFriction(x))", "all x y.((Skidding(x) & Tire(y)) -> CausesFriction(x,y))", "all x y.((SkiddingTire(x) & Road(y)) -> CausesFrictionBetween(x,y))", "all x.(Skidding(x) -> CausesFrictionBetweenTireAndRoad(x))", "all x y.((Skidding(x) & Tire(y)) -> CausesFriction(x,y))", "all x.(Skidding(x) -> CausesFrictionBetweenTireAndRoad(x))", "all x.(Skidding(x) -> CausesFrictionBetweenTireAndRoad(x))", "all x y.((Skidding(x) & Tire(y)) -> CausesFriction(x,y))", "all x y.((Skidding(x) & Tire(y) & Road(y)) -> CausesFriction(x,y))", "all x.(Skidding(x) -> CausesFrictionBetweenTireAndRoad(x))", "all x.(Skidding(x) -> CausesFrictionBetweenTireAndRoad(x))", "all x.(Skidding(x) -> CausesFriction(x))", "all x.(Skidding(x) -> (CausesFriction(x) & Tire(x) & Road(x)))"]}
{"id": "entailmentbank_validation_308", "nl": "friction causes the temperature of an object to increase.", "fol": "", "prediction": ["all x y.((Friction(x) & Object(y)) -> CausesTemperatureDecrease(x,y))", "all x.(Friction(x) -> IncreaseTemperature(x))", "all x y.((Friction(x) & Object(y)) -> IncreasesTemperature(x,y))", "all x.((Friction(x) & Object(y)) -> CausesTemperatureIncrease(x,y))", "all x y.((Document(x) & Object(y)) -> TemperatureIncrease(x,y))", "all x.(Friction(x) -> CausesTemperature(x,y))", "all x y.((Friction(x) & Object(y)) -> CausesTemperatureIncrease(x,y))", "all x y.((Friction(x) & Object(y)) -> CausesTemperatureIncrease(x,y))", "all x.(Friction(x) -> CausesTemperatureAccrosure(x))", "all x.(Friction(x) -> CausesTemperatureToIncrease(x))", "all x y z.((Friction(x) & Object(y) & Temperature(z)) -> Decreases(y,z,y))", "all x y.((Friction(x) & Object(y)) -> IncreasesTemperature(x,y))", "all x y.((Friction(x) & Object(y)) -> IncreasesTemperature(x,y))", "all x y.((Friction(x) & Object(y)) -> IncreasesTemperature(x,y))", "all x y z.((Friction(x) & Object(y) & Fracture(z)) -> CausesTemperatureToIncrease(z,y))", "all x y.((Friction(x) & Object(y)) -> IncreasesTemperature(x,y))"]}
{"id": "entailmentbank_validation_309", "nl": "friction causes the temperature of the tire to increase.", "fol": "", "prediction": ["all x.(Friction(x) -> CausesTemperatureToIncrease(x))", "all x.(Friction(x) -> CausesTemperatureIncrease(x))", "all x.(Friction(x) -> TemperatureIncrease(x))", "all x.(Tire(x) -> CurvedByFriction(x))", "all x.(Friction(x) -> IncreasesTemperatureOfTire(x))", "all x.((Tire(x) & TriggersTemperature(x)) -> Increases(x))", "all x y z.((Tire(x) & Friction(y) & Temperature(z) & CausesToIncrease(x,y)) -> Temperature(x,z))", "all x.(FrictionIncreasesTemperature(x) -> TireRelease(x))", "all x.(Friction(x) -> PressureIncrease(x))", "all x y.((Tire(x) & Friction(y)) -> IncreasesTemperature(x,y))", "all x.(Tire(x) -> IncreasesTemperature(x))", "all x y.((Tire(x) & Friction(y)) -> TemperatureIncrease(x,y))", "all x.(Friction(x) -> ThermalIncrease(x))", "all x y z.((Tire(x) & Friction(y) & Temperature(z)) -> Increases(x,z))", "all x y.((Tire(x) & Friction(y)) -> TemperatureIncreases(x,y))", "all x y.((Tire(x) & Friction(y)) -> CausesTemperatureIncrease(x,y))"]}
{"id": "entailmentbank_validation_310", "nl": "if the tire overheats, some chemical in the tire will vaporized.", "fol": "", "prediction": ["all x.((TireOverheats(x) & ChemicalInTire(x)) -> Vaporized(x))", "all x.((Tire(x) & Overheats(x)) -> exists y.(Chemical(y) & VaporizedIn(y))))", "all x.((Tire(x) & Overheats(x)) -> ChemicalIn(x,y))", "all x.((Tire(x) & Overheats(x)) -> ChemicalIn(x,y))", "all x y.((Tire(x) & Overheats(x)) -> ChemicalInTire(y))", "all x.((Tire(x) & Overheats(x)) -> Vaporized(x))", "all x.((Tire(x) & Overheats(x)) -> Vaporized(x))", "all x.((Tire(x) & Overheats(x)) -> Vaporized(x))", "all x y.((Tire(x) & Overheats(x)) -> Chemical(y))", "all x.((Tire(x) & Overheats(x)) -> Vaporized(x))", "all x.((Tire(x) & Overheats(x)) -> Vaporized(x))", "all x.((Tire(x) & Overheats(x)) -> Chemical(x))", "all x y.((Tire(x) & Overheats(x)) -> Vaporized(y))", "all x.(OverheatsTire(x) -> -Chemical(x))", "exists x.(Tire(x) & Overheats(x) & Chemical(x) & Vaporized(x))", "all x.((Tire(x) & Overheats(x)) -> ChemicalInTireVaporized(x))"]}
{"id": "entailmentbank_validation_311", "nl": "if the temperature of the tire keeps increasing, the tire will overheat.", "fol": "", "prediction": ["all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheat(x))", "all x.((Tire(x) & IncreasesTemperature(x)) -> Overheats(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheats(x))", "all x.((Tire(x) & TemperatureIncrementing(x)) -> Overheat(x))", "all x.((Tire(x) & TemperatureIncrease(x)) -> Overheat(x))", "all x.((Tire(x) & TemperatureIncreasing(x)) -> Overheat(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheats(x))", "all x y.((Tire(x) & TemperatureIncreasing(x) & Tire(y) & Overheats(y)) -> PressureToRisk(x,y))", "all x y.((Tire(x) & Tire(y) & HeatsIncreases(x,y)) -> Overheats(z))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> WillOverheat(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheat(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheats(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheats(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheats(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheats(x))", "all x.((Tire(x) & TemperatureKeepingIncreasing(x)) -> TireOverheat(x))"]}
{"id": "entailmentbank_validation_312", "nl": "if the temperature of the tire keeps increasing, some chemical in the tire will be vaporized.", "fol": "", "prediction": ["all x.((TireTemperatureIncreasing(x) & KeepsIncreasing(x)) -> Vaporized(x))", "all x.((Tire(x) & IncreasedTemperature(x)) -> Vaporized(x))", "all x.((TireTemperature(x) & Increases(x),) -> (ChemicalInTire(x) & Vaporized(x)))", "all x y.((Tire(x) & TireTemperature(y) & KeepsIncreasing(x,y)) -> Vaporized(x))", "all x.((Tire(x) & TemperatureIncrease(x)) -> ChemicalSupport(x))", "all x y.((Tire(x) & Temperature(y) & Increased(y)) -> Vaporized(x))", "all x y.((Tire(x) & Temperature(y) & KeepsIncreasing(x,y)) -> Chemical(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> ChemicalProtein(x))", "all x.((Tire(x) & MaintainingTemperature(x)) -> Vaporized(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Vaporized(x))", "all x.((Tire(x) & IncreasedTemperature(x)) -> Vaporized(x))", "exists x.(Tire(x) & TemperatureContinuesIncreasing(x) & Vaporized(x))", "all x.((Time(x) & SteadyToIncreasing(x)) -> Chemical(x))", "all x y.((Tire(x) & TemperatureIncreasing(x) & CompoundInTire(y)) -> Vaporized(x,y))", "all x.((Tire(x) & KeepsAncreasingTemperature(x)) -> Vaporized(x))", "all x y.((HeatInitiation(x,y) & Tire(y)) -> (Valorized(y,x) | Vaporized(y)))"]}
{"id": "entailmentbank_validation_313", "nl": "friction causes some chemicals in the tire to vaporize.", "fol": "", "prediction": ["all x y z.((Friction(x) & Tire(y) & Chemical(z)) -> CausesToVaporize(z,y))", "all x.((Ribber(x) & Chemicals(y)) -> CausesToDecompose(x,y))", "all x y.((Tire(x) & Chemicals(y)) -> CausesToVaporize(x,y))", "all x y z.((Ribbet(x) & Chimic(y) & Tire(z) & CausesToVaporize(x,y,z)) -> Grit(x))", "all x y z w.((Friction(x) & Chemical(y) & Tire(z) & Fuel(w)) -> CausesToVaporize(x,y,z,w))", "all x y.((Tire(x) & Refriction(y)) -> CausesChemicalsToDamage(x,y))", "all x.(Friction(x) -> CausesChemicalsInTireToVaporize(x))", "all x y.((Tire(x) & Friction(y)) -> CausesChemicalsInToVaporize(x,y))", "all x.((Friction(x) & Tire(y)) -> CausesToVaporize(x,y))", "all x y.((Tire(x) & Chemicals(y)) -> CausesToVaporize(x,y))", "all x y.((Tire(x) & Chemical(y)) -> CausesToVaporize(y,x))", "(Chemicals(Friction) & CausesToVaporize(Friction))", "all x y z.((Tire(x) & Chemicals(y) & Heater(z)) -> CausesToVaporize(x,y,z))", "all x y.((Friction(x) & Tire(y)) -> CausesChemistryToVaporize(x,y))", "all x y z.((Refrigeration(x) & Tire(y) & Chemical(z)) -> GassingVertebrate(x,x))", "all x y.((Tire(x) & Product(y)) -> CausesToVaporize(x,y))"]}
{"id": "entailmentbank_validation_314", "nl": "vaporizing a substance causes smoke.", "fol": "", "prediction": ["all x y z.((Substance(x) & Vaporizing(y,z)) -> CausesSmoke(x))", "all x.((Substance(x) & Vaporizing(x)) -> CausesSmoke(x))", "all x y.((Substance(x) & Vaporization(y)) -> CausesSmoke(y,x))", "all x y.((Substance(x) & Vaporization(x,y)) -> CausesSmoke(x))", "all x y.((Substance(x) & Vaporizing(x,y)) -> CausesSmoke(x))", "all x y.((Substance(x) & Vaporizing(x,y)) -> CausesSmoking(y))", "all x y.((Substance(x) & Vaporizing(x,y)) -> CausesSmoke(x))", "all x y.((Substance(x) & Vaporizing(x,y)) -> CausesSmoke(y))", "all x y.((Substance(x) & Vaporizing(x)) -> CausesSmoke(y))", "all x.(ValvagingSubstance(x) -> CausesSmoke(x))", "all x.(ValmingSubstance(x) -> CausesSmoke(x))", "all x y.((Substance(x) & Vaporizing(x,y)) -> CausesSmoke(x))", "all x.((Substance(x) & Vaporize(x)) -> CausesSmoke(x))", "all x y.((Substance(x) & Vaporized(x,x)) -> CausesSmoke(y))", "all x y.((Substance(x) & Vaporized(x)) -> CausesSmoke(x,y))", "all x y.((Substance(x) & Vaporize(y)) -> CausesSmoke(x,y))"]}
{"id": "entailmentbank_validation_315", "nl": "friction causes the tire to produce smoke.", "fol": "", "prediction": ["all x.(Tire(x) -> ProducesSmoke(x))", "all x y.((Tire(x) & Friction(y)) -> CausesToProduceSmoke(x))", "all x y.((Tire(x) & Friction(y) & CausesToProduceSmoke(x,y)) -> ProducesSmoke(x))", "all x.(Friction(x) -> CausesTireToProduceSmoke(x))", "all x.((Tire(x) & Friction(x)) -> ProducesSmoke(x))", "all x y.((Friction(x) & Tire(y)) -> ProducesSmoke(y))", "all x y.((Tire(x) & Friction(y)) -> ProducesSmoke(x,y))", "all x y.((Tire(x) & FrictionCauses(x,y)) -> ProducesSmoke(y))", "all x.(Friction(x) -> ProducesSmoke(x,y))", "all x y.((Tire(x) & Friction(y)) -> ProducesSmoke(x,y))", "all x.(Ribber(x) -> ProducesSmoke(x))", "all x.(FrictionAsKindToProduceSmoke(x) -> TireProduces(x))", "all x y z.((Tire(x) & Friction(y) & Smoke(z)) -> Produces(x,y,z))", "all x.(Scramble(x) -> CausesItTireToProduce(x))", "all x y z.((Tire(x) & Friction(y) & Smoke(z)) -> Produce(x,y,z))", "all x y.((Tire(x) & Friction(y)) -> (CausesToProduceSmoke(x,y)))"]}
{"id": "entailmentbank_validation_316", "nl": "as the friction increases, the resistance on the object to move will increase.", "fol": "", "prediction": ["all x.((FrictionIncrease(x) & IncreaseResistanceOnObject(x)) -> MoveResistance(x))", "all x.((Friction(x) & Increases(x)) -> IncreasesResistanceOnObjectToMove(x))", "all x.((Friction(x) & IncreasesFriction(x)) -> IncreasesResistance(x))", "all x.((FrictionIncreases(x) & ResistantOnObject(x)) -> Increasing(x))", "(FrictionIncreases(x) & IncreasesResistance(x))", "all x.(FrictionIncrease(x) -> IncreasedResistance(x))", "all x.(FrictionIncreases(x) -> IncreasedResistanceOnObjectToMove(x))", "all x.((Friction(x) & IncreasedFriction(x)) -> IncreasedResistance(x))", "all x y.((Friction(x) & Object(y) & IncreasedFriction(x)) -> IncreasedResistance(x,y))", "(all x.(Friction(x) -> IncreasedResistance(x)))", "all x.((FrictionIncreases(x) & IncreasesResistance(x)) -> MovesObject(x))", "all x y.((FrictionIncreases(x) & Object(y)) -> IncreasesResistanceToMove(y,x))", "all x y.((Friction(x) & ObjectToMove(y)) -> IncreasedResistanceOnMove(z))", "all x.((Friction(x) & Increased(x)) -> ResistantOnObjectToMove(x))", "all x.((EfficiencyIncrease(x) & IncreaseResistance(x)) -> MovingObject(x))", "all x y z.((Friction(x) & Object(y) & Friction(z)) -> IncreasedResistance(x,y,z))"]}
{"id": "entailmentbank_validation_317", "nl": "as roughness of a surface increases, friction will increase.", "fol": "", "prediction": ["all x.((RoughnessHoweverIncreases(x) & Surface(x)) -> FrictionIncreases(x))", "all x y.((Surface(x) & Surface(y) & IncreasedRoughness(x,y)) -> IncreasedFriction(x))", "all x.((Roughness(x) & Surface(x)) -> FrictionIncreases(x))", "all x y z.((Roughness(x) & Surface(y) & Friction(z) & Increases(y,x)) -> Increases(z))", "all x.((Roughness(x) & Increases(x)) -> FrictionIncreases(x))", "all x y.((Surface(x) & Surface(y) & IncreasedRoughness(x,y)) -> FrictionAcreasing(x))", "all x y.((Surface(x) & Surface(y) & IncreasedRoughness(x)) -> IncreasedFriction(x,y))", "all x y.((Surface(x) & Roughness(x)) -> Friction(x))", "all x y z.((Surface(x) & Roughness(y) & Friction(z)) -> Increases(x,y))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesFriction(x))", "all x y.((Roughness(x) & Surface(y)) -> IncreaseDistraction(x,y))", "all x y.((Ruggedness(x) & Surface(y)) -> IncreasesFriction(x))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> FrictionIncreases(x,y))", "all x y.((Surface(x) & Roughness(x,y)) -> FrictionIncrease(x))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesFriction(x,y))", "all x y.((Surface(x) & Roughness(y) & Increases(x,y)) -> FrictionIncreases(y))"]}
{"id": "entailmentbank_validation_318", "nl": "as the roughness of a surface increases, the resistance on the object to move will increase.", "fol": "", "prediction": ["all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasedResistanceOnMove(x))", "all x y.((Roughness(x) & Surface(y) & Increased(x,y)) -> Increased(y))", "all x y.((Roughness(x) & Surface(y)) -> IncreasedResistanceToMove(y,x))", "all x.((Roughness(x) & SurfaceIncrease(x)) -> ResistanceOnObjectToMove(x))", "all x y z.((RoughnessOfSurface(x) & Roughness(y) & Roughness(z) & Increases(y,z)) -> ResistanceIncrements(z,y))", "all x y.((Shift(x) & Surface(y) & IncreasesRoughness(x,y)) -> IncreasesResistance(x))", "all x y.((RoughnessOfSurface(x) & Surface(y)) -> Resistant(x,y))", "all x y.((Roughness(x) & Surface(y)) -> IncreasesResistanceOnMovement(x))", "all x.((Surface(x) & RoughnessIncreases(x)) -> ResistanceIncreases(x))", "all x.((Roughness(x) & Surface(x)) -> Resistance(x))", "all x y.((Roughness(x) & Surface(y) & Increased(x)) -> IncreasedResistance(x,y))", "all x y.((Roastness(x) & Surface(y) & Increases(x,y)) -> IncreasesResistance(x))", "all x y.((Surface(x) & Roughness(x,y)) -> IncreasesResistanceToMove(x))", "all x y z.((RoughnessOfSurface(x) & Surface(y) & Surface(z) & Increases(x,y)) -> IncreasesResistanceToMove(x,z))", "all x.((Roughness(x) & Surface(x)) -> IncreasedResistance(x))", "all x y.((RoughnessAsSurface(x) & Surface(y)) -> IncreasesResistanceToMove(y))"]}
{"id": "entailmentbank_validation_319", "nl": "carpet has a rough surface.", "fol": "", "prediction": ["all x.((Cathedral(x) & RoughSurface(x)) -> Has(x,y))", "all x.(Cedar(x) -> HasRoughSurface(x))", "all x.(Carpet(x) -> HasRoughSurface(x))", "all x.(Carpet(x) -> RoughSurface(x))", "all x.(Cedar(x) -> HatesRoughSurface(x))", "all x.(Decorate(x) -> RoughSurface(x))", "all x.(Kitchen(x) -> HasRoughSurface(x))", "all x.(Tread(x) -> RoughSurface(x))", "all x.(Teeth(x) -> RoughSurface(x))", "all x.(Carpet(x) -> RoughSurface(x))", "all x.(Kitchen(x) -> RoughSurface(x))", "all x.(Dusty(x) -> HasRoughSurface(x))", "all x y.((Kitchen(x) & Rug(y)) -> RoughSurface(x))", "all x.(Kitchen(x) -> RoughSurface(x))", "all x.(Coat(x) -> HasRoughSurface(x))", "all x.(Cotton(x) -> RoughSurface(x))"]}
{"id": "entailmentbank_validation_320", "nl": "wood has a smooth surface.", "fol": "", "prediction": ["all x.(Wood(x) -> SmoothSurface(x))", "all x.(Wood(x) -> SmoothSurface(x))", "all x.(Wood(x) & SmoothSurface(x))", "all x.(Wood(x) -> SmoothSurface(x))", "all x.(Wood(x) -> SmoothSurface(x))", "all x.(Wood(x) -> SmoothSurface(x))", "all x.(Wood(x) -> SmoothSurface(x))", "all x.(Wood(x) -> SmoothSurface(x))", "all x.(Wood(x) -> SmoothSurface(x))", "all x.(Wood(x) -> SmoothSurface(x))", "all x.(Wood(x) -> SmoothSurface(x))", "all x.(Wood(x) -> SmoothSurface(x))", "all x.(Wood(x) & SmoothSurface(x))", "all x.(Wood(x) & SmoothSurface(x))", "all x.(Wood(x) -> SmoothSurface(x))", "all x.(Wood(x) -> SmoothSurface(x))"]}
{"id": "entailmentbank_validation_321", "nl": "the resistance on the object to move on the carpet will be larger than on the wood.", "fol": "", "prediction": ["all x y.((Object(x) & Carpet(y) & Chair(y)) -> (LargerResistanceSurfaceOn(x,y)))", "all x.(ResistanceOn(x,Warmboard,Cathedral,Wood) -> LargerResistanceOn(x,InCathedral,Wood))", "all x.((Object(x) & ResistantOnCafet(x)) -> LargerThanWood(x))", "all x y.((Object(x) & Carpet(y) & ResistanceOn(x,y)) -> LargerThan(x,y))", "all x y.((Object(x) & Carpet(y) & Object(x,y)) -> LargerResistance(x,y))", "all x y.((Object(x) & Carpet(y) & Object(y) & Wood(y)) -> ResistanceLarger(x,y))", "all x y.((Object(x) & Carpet(y) & Wood(x)) -> LargerResistance(x,y))", "all x y z.((Object(x) & Carpet(y) & Wood(z)) -> TheResistance(x,y,z))", "all x y.((Object(x) & Carpet(y) & Object(x)) -> Resistant(x,y))", "all x.(RisisOnObject(x) -> LargerRisisOnWood(x))", "all x y.((Object(x) & Carpet(y) & Wood(z)) -> (ResistanceOnObject(x,y) & ExpandedOnWood(x)))", "all x y z.((Object(x) & Carpet(y) & Wood(z) & LargerResistance(x,y,z)) -> MoveOn(x,y))", "all x y.((Object(x) & Rug(y) & Wood(y)) -> (ResistanceOn(x,y) & LargerOff(x,y)))", "all x.((Object(x) & Motion(x,D carpet)) -> LargerResistance(x,Wood))", "all x y.((Object(x) & Carpet(y) & Petal(y)) -> WiderResistance(x,y))", "all x y.((Movement(x) & Carpet(y)) -> LargerResistance(x,y))"]}
{"id": "entailmentbank_validation_322", "nl": "a toy car is a kind of object.", "fol": "", "prediction": ["all x.(ToyCar(x) -> IsObject(x))", "all x.(ToyCar(x) -> Object(x))", "all x.(ToyCar(x) -> Object(x))", "all x.(ToyCar(x) -> Object(x))", "all x.(ToyCar(x) -> (Object(x) & Object(x)))", "all x.(ToyCar(x) -> Object(x))", "all x y.((ToyCar(x) & Object(y)) -> Object(x))", "all x.(Tycar(x) -> Object(x))", "all x.(ToyCar(x) -> Object(x))", "all x.(ToyCar(x) -> Object(x))", "all x.(ToyCar(x) -> Object(x))", "all x.(ToyCar(x) -> Object(x))", "exists x.(ToyCar(x) & Object(x))", "all x.(ToyCar(x) -> Object(x))", "all x.(ToyCar(x) -> Object(x))", "all x.(ToyCar(x) -> Object(x))"]}
{"id": "entailmentbank_validation_323", "nl": "the resistance on the toy car to move on the carpet is larger than on the wood.", "fol": "", "prediction": ["all x y.((ToyCar(x) & Wood(y)) -> (LargerResistanceOnCoat(x,y) & HarderOnCoat(x,y)))", "all x y.((ToyCar(x) & Carpet(y) & Wood(x)) -> WiderResistanceToMove(x,y))", "all x y.((ToyCar(x) & Carpet(y) & Wood(z)) -> (ResistanceOnToyCar(x,y) & ResistanceOnToyCar(x,z)))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> ResistanceToMove(x,y,z))", "all x y.((ToyCar(x) & Carpet(y)) -> LargerResistanceToMoveOn(x,y))", "all x y.((ToyCar(x) & Wood(y)) -> ResistantOnMovingCandle(x,y))", "all x y.((Tycar(x) & Wood(y)) -> LargerResistanceToMoveOn(x,y))", "all x y.((ToyCar(x) & Carpet(y)) -> ResistanceWorthResistance(x,y))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> (ResistanceOnYardToMoveOn(x,y,z) & LargerOnResistanceOnWooden(x)))", "all x y.((ToyCar(x) & Wood(y)) -> ResistanceForMovement(x,y))", "all x y.((ToyCar(x) & Carpet(y) & Wood(s)) -> (LargerResistance(x,y) & MovesOn(x,y)))", "all x y.((ToyCar(x) & Carpet(y)) -> ResistanceLargerThanWood(x,y))", "all x y.((ToyCar(x) & Carpet(y)) -> ResistanceOnResistance(x,y))", "all x y z.((ToyCar(x) & Wood(y) & Carpet(z)) -> (LargerResistance(x,z) & MoveOnBeam(x,y,z)))", "all x y.((ToyCar(x) & Carpet(y) & Wood(z)) -> LargerResistanceOnWood(x,y,z))", "all x y.((ToyCar(x) & Carpet(y) & Wood(x)) -> LargerResistance(x,y))"]}
{"id": "entailmentbank_validation_324", "nl": "as the resistance on the object to move increase, the object will move slower.", "fol": "", "prediction": ["all x y.((Object(x) & ResistanceAn increase(x) & Increase(y)) -> MoveSlower(x,y))", "all x y.((Object(x) & IncreasedRezist(x) & IncreasedResistanceOnMove(x)) -> MoveSlower(x))", "all x.((Resistance(x) & Increased(x)) -> MovesSlower(x))", "all x.((Object(x) & IncreasedResistance(x)) -> MovesSlower(x))", "all x.((Object(x) & PercentResistance(x)) -> MoveSlower(x))", "all x.((Object(x) & IncreasedResistanceToMove(x)) -> MoveSlower(x))", "all x.((Object(x) & ResistanceIncrease(x)) -> Slower(x))", "all x.((Object(x) & IncreasedResistanceOnMovement(x)) -> MovesSlower(x))", "all x.((Object(x) & ResistencyAccrobates(x) & MovementSlower(x)) -> MovesSlower(x))", "all x.((Object(x) & IncreasesResistance(x)) -> MovesSlower(x))", "all x.((Object(x) & IncreasedResistanceOnMovement(x)) -> MoveSlowly(x))", "all x.((Object(x) & IncreasedResistance(x)) -> MovesSlower(x))", "as the resistance on object(s) increases, object-wise-movessier(s))", "as the ResistanceOnObjectToMove Increases, the ObjectMovesSlower(x))", "all x y.((Object(x) & IncreasedResistance(x,y)) -> MovesSlower(x))", "all x y.((Object(x) & Resistance(y)) -> MoveSlower(x))"]}
{"id": "entailmentbank_validation_325", "nl": "the toy car will move slower on the carpet than on the wood.", "fol": "", "prediction": ["all x y.((ToyCar(x) & Carpet(y)) -> MoveSlower(x,y))", "all x y.((ToyCar(x) & Carpet(y)) -> MovesSlower(x,y))", "all x y.((ToyCar(x) & Carpet(y) & Wood(y)) -> MoveSlower(x,y))", "all x y.((ToyCar(x) & Carpet(y)) -> MOVESlower(x,y))", "all x y.((ToyCar(x) & Carpet(y)) -> MovesSlowerOn(x,y))", "all x y.((ToyCar(x) & Carpet(y)) -> MovesSlower(x,y))", "all x y.((TyCar(x) & Carpet(y)) -> MoveSlowly(x,y))", "all x.(ToyCar(x) -> MovesSlowerOnTallThanWood(x))", "all x y.((ToyCar(x) & Carpet(y)) -> SlowMovement(x,y))", "all x y.((ToyCar(x) & Carpet(y)) -> MoveSlowerOn(x,y))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> MovesSlower(x,y,z))", "all x y.((TyCar(x) & Carpet(y)) -> MobilizesSlower(x,y))", "all x y.((ToyCar(x) & Carpet(y)) -> LoaderMovement(x,y))", "all x y.((ToyCar(x) & Carpet(y)) -> MovesSlowerOn(x,y))", "all x y.((ToyCar(x) & Carpet(y)) -> MoveSlowerOn(x,y))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> MoveSlower(x,y,z))"]}
{"id": "entailmentbank_validation_326", "nl": "a glider is a kind of object.", "fol": "", "prediction": ["all x.(Glider(x) -> IsObject(x))", "all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> TypeOfObject(x))", "all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> ObjectType(x))", "all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> Object(x))"]}
{"id": "entailmentbank_validation_327", "nl": "flying an object requires lift to oppose the object's weight.", "fol": "", "prediction": ["all x y.((Object(x) & Object(y) & RequiresLift(x,y)) -> OpposesWeight(y))", "all x y.((Airment(x) & Object(y)) -> RequiresLiftToOpposeWeight(z))", "all x y.((Object(x) & Pilot(y)) -> RequiresLiftToOpposeWeight(y))", "all x.(FlyingObject(x) -> RequiresLiftToSuppressWeight(x))", "all x y.((Flying(x) & Obscension(y) & RequiresLift(x)) -> OpposesWeight(x,y))", "all x.((Flying(x) & RequiresLift(x)) -> ApproximatesObjectWeight(x))", "all x.(Flying(x) -> RequiresLiftToObjectionWeight(x))", "all x y.((Flying(x) & Object(y)) -> RequiresLift(x,y))", "all x.((FlyingObject(x) & RequiresLift(x)) -> OpposesWeight(x))", "all x y z.((Flying(x) & Object(y) & Lift(z) & OpposesWeight(a,y,z)) -> Requires(x,y))", "all x.(FlyingObject(x) -> RequiresLift(x))", "all x y.(FlyingObject(x) -> RequiresLift(x,y))", "all x.((Flying(x) & RequiresLift(x)) -> OpposesWeight(x,y))", "all x y.((Object(x) & RequiresLift(x,y)) -> OpposesWeight(x,y))", "all x y.((Jet(x) & Object(y)) -> RequiresLiftToOpposeWeight(x,y))", "all x y.((Aircraft(x) & FlightObject(x)) -> RequiresLift(x))"]}
{"id": "entailmentbank_validation_328", "nl": "flying a glider requires lift to oppose the weight of the glider.", "fol": "", "prediction": ["all x y.((Glider(x) & Glider(y)) -> RequiresLiftToOpposeWeight(x,y))", "all x y z w.((Glider(x) & Glider(y) & Lift(z)) -> RequiresToBoyWeight(x,y,z))", "all x y z.((Glider(x) & Glider(y) & Lift(z)) -> RequiresForWomen(x,y))", "all x.((Glider(x) & RequiresLift(x)) -> OpposesWeight(x))", "all x y.((Wind(x) & Glider(y)) -> RequiresLift(x,y))", "all x y.((Glider(x) & Glider(y)) -> RequiresLift(x,y))", "all x.((Glider(x) & RequiresLift(x)) -> ObscuresWeight(x))", "all x y.((Glider(x) & Glider(y)) -> RequiresLift(x,y))", "all x.((FlyingGlider(x) & RequiresLift(x)) -> OpposesWeight(x))", "all x.((Glider(x) & AffordsLiftToOpposeWeight(x)) -> RequiresLift(x))", "all x y.((Glower(x) & Glider(y)) -> RequiresLiftToOpposeWeight(x,y))", "all x.(Flying(x) -> (RidesLift(x) & OpposesWeight(x)))", "all x y.((Flying(x) & Glider(y)) -> RequiresLiftToFight(y,x))", "all x.((Glider(x) & FlyingRequiresLift(x)) -> OpposesWeight(x))", "all x y.((Glider(x) & Glider(y)) -> RequiresLiftToOpposeWeight(x,y))", "all x.(Flying(x) -> RequiresLift(x))"]}
{"id": "entailmentbank_validation_329", "nl": "pedals are part of a bicycle for pedalling.", "fol": "", "prediction": ["all x.(Pedals(x) -> PartOfBicycle(x))", "all x y.((Pedal(x) & Bicycle(y)) -> ForPedaling(x,y))", "all x y.((Pedal(x) & Bicycle(y)) -> PartOf(x,y))", "all x.(Pedal(x) -> PartOfBicycleForPedaling(x))", "all x.(Pedals(x) -> ForPedaling(x))", "all x.(Pedals(x) -> PartOfBicycleForPedaling(x))", "all x.(Pedals(x) -> ForPedaling(x))", "all x y.((Pedal(x) & Bicycle(y)) -> PartOf(x,y))", "all x.(Pedals(x) -> PartOfBicycle(x))", "all x y.((Pedals(x) & Bicycle(y)) -> PartOf(x,y))", "all x.(Pedal(x) -> PartOfBicycle(x))", "all x.(Pedals(x) -> PartOfBicycle(x))", "all x.(Pedals(x) -> PartOfBicycle(x))", "all x.(Pedals(x) -> PartOfBicycleForPedaling(x))", "all x.(Pedals(x) -> PartOfBicycleForPedaling(x))", "all x.(Pedal(x) -> PartOfBicycleForPedaling(x))"]}
{"id": "entailmentbank_validation_330", "nl": "pedalling a bicycle requires moving the pedals in a circular motion.", "fol": "", "prediction": ["all x y.((Bicycle(x) & Bicycle(y)) -> NeedsGlacialMotion(x,y))", "all x y.((PedalingBicycle(x) & CircularMotion(y)) -> RequiresMovingPedals(x,y))", "all x y.((Bicycle(x) & Cycle(y)) -> RequiresTrailingInCircularMotion(x,y))", "all x y.((Bicycle(x) & Bicycle(y)) -> (RequiresMovingPedalsInCircularMotion(x,y)))", "all x y z.((Bicycle(x) & Pedal(y) & Radical(z)) -> (Requires(y,z) & CircularMotion(w)))", "all x.(Pedalling(x) -> (RequiresCircularMotion(x) & MovementRequired(x)))", "all x y z.((Piece(x) & Bicycle(y) & Requires(x,y)) -> MovePedalsInCircularMotion(x,y))", "all x y.((Bicycle(x) & pedalling(y)) -> RequiresCircularMotion(x,y))", "all x.(PedalingBicycle(x) -> RequiresMovementInCircularMotion(x))", "all x y z.((Pedaling(x) & Bicycle(y) & CircularMotion(z)) -> Requires(x,y,z))", "all x y.((Bicycle(x) & pedalling(y)) -> RequiresMovingPedals(x,y))", "all x y.((Bicycle(x) & Bicycle(y)) -> (MoveFiltersInCircularMotion(x,y)))", "all x y.((Bicycle(x) & Bicycle(y)) -> MeasuredInCircularMotion(x,y))", "all x y z.((PedallingBicycle(x) & Pedal(y) & CircularMotion(z)) -> Requires(x,y,z))", "all x.(PedalingBicycle(x) -> RequiresVibralMotion(x))", "all x.(PedalingBicycle(x) -> MovesPedalsInCircularMotion(x))"]}
{"id": "entailmentbank_validation_331", "nl": "the pedals are the part of a bicycle that moves in circular motion.", "fol": "", "prediction": ["all x y z.((Pedals(x) & Bicycle(y) & CircularMotion(z)) -> MovesIn(x,y,z))", "all x y.((Pedals(x) & Bicycle(y) & MovesInCircularMotion(x,y)) -> PartOf(x,y))", "all x y.((Pedals(x) & Bicycle(y)) -> MovesInCircularMotion(x,y))", "all x.(Pedals(x) -> CircularMotion(x))", "all x.(PedalsApart(x) -> CycleMotion(x))", "all x.(Pedals(x) -> PositionOfBicycle(x))", "all x y z.((Pedal(x) & Bicycle(y) & CircularMotion(z)) -> Move(x,y,z))", "all x y.((Pedal(x) & Bicycle(y)) -> MovesInCircularMotion(x,y))", "all x y.((Pedals(x) & Bicycle(y)) -> MovesInCircularMotion(x,y))", "all x y.((PedalsPart(x) & Bicycle(y) & MovesInCircularMotion(x)) -> PedalsAlways(x,y))", "all x.(Pedals(x) -> (MovesInCircularMotion(x) & PartOfBicycle(x)))", "all x.(Pedals(x) -> MovesInCircularMotion(x))", "all x y.((Pedals(x) & Bicycle(y) & CircularMotion(y)) -> MovesIn(x,y))", "all x.(Pedals(x) -> MovesInCircularMotion(x))", "all x.(Pedals(x) -> (PartOfBicycle(x) & CircularMotion(x)))", "all x.(Pedals(x) -> MovesInCircularMotion(x))"]}
{"id": "entailmentbank_validation_332", "nl": "north / northward is a kind of direction.", "fol": "", "prediction": ["all x.(North(x) -> Northward(x))", "all x y.((North(x) & Northward(y)) -> Direction(x))", "all x.((North(x) & Northward(x)) -> Direction(x))", "all x.((North(x) & Northward(x)) -> Direction(x))", "all x.((North(x) & Northward(x)) -> KindOfDirection(x))", "all x.(North(x) -> Direction(x))", "all x.((North(x) & Northward(x)) -> Direction(x))", "all x.(North(x) -> Northward(x))", "all x.(North(x) -> NorthWideDirection(x))", "all x.((North(x) & Northward(x)) -> Direction(x))", "all x.((North(x) | Northward(x)) -> Direction(x))", "all x.((North(x) & Northward(x)) -> Direction(x))", "all x.(North(x) -> Northward(x))", "all x.(North(x) -> Northward(x))", "all x.(North(x) -> NorthWarth(x))", "all x.(NorthAndNorthward(x) -> Direction(x))"]}
{"id": "entailmentbank_validation_333", "nl": "velocity is a measure of a speed in a direction.", "fol": "", "prediction": ["all x y.((Vibration(x) & Direction(y)) -> MeasuresSpeed(x,y))", "all x y.((Velocity(x) & Direction(y)) -> MeasuresSpeed(x,y))", "all x.(Velocity(x) -> MeasuresSpeedInDirection(x))", "all x.(Vibration(x) -> Discharge(x))", "all x y z.((GasChange(x) & Flow(y) & Direction(z) & MeasuresSpeedInDirection(x,y,z)) -> EnsuresSpeedInDirection(y,x))", "all x y.((Vibration(x) & Speed(y)) -> MeasuresInDirection(x,y))", "all x y.((Velocity(x) & Direction(y)) -> MeasuresSpeedInDirection(x,y))", "all x.(Velocity(x) -> MeasuresSpeedInDirection(x))", "all x.(Velocity(x) -> MeasuresSpeedInDirection(x))", "all x.(Velocity(x) -> MeasuresSpeedInDirection(x))", "all x y.((Velocity(x) & Direction(y)) -> MeasuresSpeedInDirection(x,y))", "all x.(Vibration(x) -> MeasuresSpeedInDirection(x))", "all x y.((Velocity(x) & Direction(y)) -> MeasuresSpeed(x,y))", "all x.(Velocity(x) -> MeasuresSpeedInDirection(x))", "all x y z.((Velocity(x) & direction(y) & Speed(z)) -> Measure(x,y,z))", "all x y.((Velocity(x) & Direction(y)) -> Measures(x,y))"]}
{"id": "entailmentbank_validation_334", "nl": "40 m/s describes the speed of an object.", "fol": "", "prediction": ["all x.((Model(x,40)) -> DescribesSpeedOfObject(x,70))", "the speed of a particular object is described as 40 m/s.", "all x.((40M/s) & Object(x)) -> DescriptionLimitedSpeed(x))", "all x.(40M/s(x) -> DescribesSpeedOfObject(x))", "all x y.((X(40) & Object(y)) -> Description(x,y))", "all x.((Dating(x,40) & Object(x)) -> DefinesSpeed(x,40))", "all x y.((Optic(x) & Object(y) & 40M/s(x)) -> DefinesSpeedOf(x,y))", "all x y z.((Length(x,y) & Object(z)) -> SpecificSpeed(x,z))", "all x y.((OfObject(x) & Object(y)) -> DescribesSpeed(x,y))", "all x y z.((Motor(x) & Object(y) & Object(z)) -> DescriptionsSpeed(x,y,z))", "all x.((Speed(x) & Object(x)) -> 40M/s(x))", "all x.((Time(x,40) & Object(x)) -> DescribesSpeed(x,40))", "all x.((Object(x) & Speed(x,40)) -> DefinesSpeed(x,39))", "all x.((Fast(x) & Object(x)) -> Description(x,40))", "all x y.((Vibration(x) & Object(y)) -> Speed(x,y))", "all x.(Radius(x) -> (40M/s)"]}
{"id": "entailmentbank_validation_335", "nl": "40 m/s north describes the velocity of an object.", "fol": "", "prediction": ["all x y z.((40 m/s North(x) & Object(y) & Object(z)) -> DescriptionOfVoxage(x,y,z))", "all x y.((40M/sNorth(x) & Vehicle(y)) -> DescriptionOfVibration(x,y))", "all x.(40M/sNorth(x) -> DescriptionOfVibrationOfObject(x))", "all x.((Volume(x,north) & 40M/sNorth(n)) -> DescriptionOfVibration(x,north))", "all x y.((Door(x) & Object(y)) -> DefinesVariation(x,y))", "all x.((40M/sNord(x) & Object(y)) -> DescriptionOfVibration(x,y))", "all x.((Vibration(x,40) & North(x)) -> DescribesVibration(x))", "all x y.(((Vibration(x) & Object(y)) -> 40M/sNorth(x))", "exists x.(LastVibration(x,40) & Object(x))", "40 m/sNorth(x) -> DefinesVelocityOfObject(x))", "all x.((HotMo(x) & NorthVelocity(x)) -> DescriptionOfObject(x))", "all x.((OrientalVelocity(x) & 40M/sNorth(x)) -> Description(x))", "all x.((40M/s(x)) -> DescriptionOfVelocity(x))", "all x.((40M/s North(x) & Object(y)) -> DefinesVelocity(x,y))", "all x y.((40m/s North(x) & Object(y)) -> DefinesVelocity(x,y))", "all x.((40M/sNorth(x) & Object(y)) -> DefinesVoice(x,y))"]}
{"id": "entailmentbank_validation_336", "nl": "inherited characteristics can deterimne the structure of an organism's anatomy.", "fol": "", "prediction": ["all x y.((ErroredCharacteristics(x) & Organism(y)) -> DeterimneAnalysis(x,y))", "all x.((HeritageCharacteristics(x) & Generated(x)) -> CanDeterimneStructureOfOrganism(x))", "all x.(EarnedCaracteristics(x) -> CanDeterimneStructureOrganism(x))", "all x.((ErasedCharacteristics(x) & Organon(y)) -> DesterimneStructure(x,y))", "all x.((ErasedCharacteristics(x) & Anatomy(y)) -> DeterimneStructure(x,y))", "all x.(HerinheritedCharacteristics(x) -> DeterimneOrganismStructure(x))", "all x.((ErasedCharacteristics(x) & Anatomy(x)) -> CanDeterimne(x,anatomy))", "all x.(EinheritedCharacteristics(x) -> CanDeterimneAnatomy(x))", "all x y.((ErasedCharacteristics(x) & Organism(y)) -> CanDeterimneStructure(x,y))", "all x y.((ErinheritedCharacteristics(x) & Organism(y)) -> DeterimneStructure(x,y))", "all x y.((ErasedCharacteristics(x) & Organism(y)) -> CanDeferimneAnatomy(x,y))", "all x y z.((EarnedCharacteristics(x) & Organism(y) & Anatomy(z)) -> Deterimnises(x,y,z))", "all x.(EarnedCharacteristics(x) -> DeterimneAnatomy(x))", "all x y.((ErasedCharacteristics(x) & Organism(y)) -> CanDeterimneAnatomy(x,y))", "all x y.((EarnedCharacteristics(x) & Organism(y)) -> CanDeferimneAnatomy(x,y))", "all x.((EborrowedCharacteristics(x) & Organism(x)) -> CanDeterimneStructure(x))"]}
{"id": "entailmentbank_validation_337", "nl": "the structure of an organism's anatomy is used to classify the organism into the appropriate taxonomic rank.", "fol": "", "prediction": ["all x y.((Organism(x) & AnatomicStructure(y)) -> ClassifiedIntoAppropriateTaxinomicalRank(x,y))", "all x y z.((Organism(x) & Anatomy(y) & Anatomy(z) & Organ(z)) -> ClassifiesIntoTaxonomicRank(x,y,z))", "all x y.((Organism(x) & Anatomy(y) & Organ(y)) -> ClassifiedIntoAppropriateTaxonomicRank(x,y))", "all x y.((Organism(x) & Anatomology(y) & Structure(x,y)) -> ClassifiesIntoAppropriateTaxonomicRank(y))", "all x y z.((Organism(x) & AnatomicStructure(y) & TaxononomicRank(z)) -> Classifies(x,y,z))", "all x y.((Organism(x) & Analogy(y)) -> ClassifiesIntoAppropriateTaxonomicRank(x,y))", "all x y z.((Organism(x) & StructureOfAnatomy(x,y) & TaxonomicRank(z)) -> ClassifiesInto(x,z))", "all x y z.((Organism(x) & Anatomy(y) & TaxonomicRank(z)) -> ClassifiedInto(x,y,z))", "all x y.((Organism(x) & AnatomicStructure(x,y)) -> ClassifiedIntoTaxonomicRank(x,x))", "all x y.((Organism(x) & Structure(x,y)) -> ClassifyToTaxonomicRank(y,x))", "all x y.((Organism(x) & Organization(y) & StructureDurableAnatomy(x,y)) -> ClassifiesIntoTaxonomicRank(y,x))", "all x y.((Organism(x) & Anatomy(y) & Structure(z)) -> ClassifyToClassifyInto(x,y,z))", "all x y.((Organism(x) & AnatomicStructure(y)) -> CategorizesInto(x,y))", "all x y.((Organism(x) & Anatomology(y) & Structure(x,y)) -> ClassifiesIntoTaxonomicRank(x,y))", "all x y.((Organism(x) & Anatomy(y) & Athlete(y)) -> ClassifiesIntoAppropriateTaxonomicRank(x,y))", "all x y.((Organism(x) & Anatomy(y)) -> ClassifiesIntoAppropriateTaxinomialRank(x,y))"]}
{"id": "entailmentbank_validation_338", "nl": "inherited characteristics can be used to classify an oganism into the apropriate taxonomic rank.", "fol": "", "prediction": ["all x.(EarnedCharacteristicsCanBeUsedToClassifyAganism(x) -> AppropriateTaxonomicRank(x))", "all x y.((EarnedCharacteristic's(x) & Yoganism(y)) -> CanBeClassifiedInApropriateRank(y,x))", "all x.((EarnedCharacteristics(x) & Gagenism(x)) -> ClassifiesIntoApropriateRank(x))", "all x.((EarnedCharacteristics(x) & ClassifiesOgony(x)) -> ApropriateTaxonomicRank(x))", "all x y.((Ogynist(x) & inheritedCharacteristics(y) & ClassifiesIntoApropriateTaxononicRank(x,y)) -> ClassifiedIntoApropriateRank(x,y))", "all x y.((DescendantCharacteristics(x) & Agnostic(y) & GeneratedForClassification(x,y)) -> AppropriateRank(x,y))", "all x y.((Organic(x) & ErasedCharacteristics(x) & Generated(y)) -> ClassifiesIntoApropriateTaxonomicRank(x,y))", "all x y.((ErasedCharacteristics(x) & Gongan(y)) -> CanClassifyIntoApropriateTaxonomicRank(x,y))", "all x.((EratedCharacteristics(x) & GeneratedToClassifyNoganism(x)) -> AppropriateTaxonomicRank(x))", "all x.((EarnedCharacteristics(x) & ClassifiesOgonymaInto(x,apropriatetaxonomicalRank)) -> Uses(x,y))", "all x.((EarnedCharacteristics(x) & ClassifiedIntoApropriateTaxenomicRank(x)) -> CanCalculateOgonion(x))", "all x.((ErasedCharacteristics(x) & oganism(x)) -> ClassifiedIntoApropriateTaxonomicRank(x))", "all x y.((EarnedCharacteristics(x) & Originate(y)) -> ClassifiedIntoApropriateTaxonomicRank(x,y))", "all x.(ErasedCharacteristics(x) -> ClassifiedUnderachievement(x))", "all x.((Gagnism(x) & ErasedCharacteristics(x)) -> ApropriateTaxonomicalRank(x))", "all x.(Ogganism(x) -> ClassifiesIntoApropriateTaxonomicRank(x))"]}
{"id": "entailmentbank_validation_339", "nl": "genes are able to determine the inherited characteristics of a living thing.", "fol": "", "prediction": ["all x.(Genes(x) -> DeterminesHazardousCharacteristics(x,livingThing))", "all x.(Genes(x) -> (DeterminesHeadnedCharacteristics(x) & LivingThing(x)))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesEarnedCaracteristics(x,y))", "all x y z.((Gene(x) & LivingThing(y) & Herb(z)) -> CanDetermineCaracteristics(x,y,z))", "all x y z.((Gene(x) & LivingThing(y) & Gene(z)) -> DeterminesEarnedCharacteristics(x,y,z))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesEarnedCharacteristics(x,y))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesEerectedCharacters(x,y))", "all x y.((Genes(x) & LivingThing(y)) -> DeterminesHaveDisinheritedCharacteristics(x,y))", "all x y z.((Gene(x) & LivingThing(y)) -> DeterminesHazardouslyPerformances(x,y,z))", "all x y z.((Gene(x) & LivingThing(y) & HealedCharacteristics(z)) -> Determines(x,z))", "all x.(Genes(x) -> DeterminesAllergicCharacteristicsOfLivingThing(x))", "all x y.((Genes(x) & LivingTree(y)) -> DeterminesHealedCharacteristics(x,y))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesExectedCharacteristics(x,y))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesHierarchicalCharacteristics(x,y))", "all x y.((Gain(x) & LivingThing(y)) -> DeterminesEarnedCaracteristics(x,y))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesEarnedCharacteristics(x,y))"]}
{"id": "entailmentbank_validation_340", "nl": "genes can be used for classifying organisms.", "fol": "", "prediction": ["all x.(Gene(x) -> ClassifiedOrganisms(x))", "all x y.((Gene(x) & Organism(y)) -> Classifies(x,y))", "all x.(Gene(x) -> ClassifiedOrganism(x))", "all x.(Gene(x) -> ClassifyOrganisms(x))", "all x.(Gene(x) -> CanBeUsedForClassifyingOrganisms(x))", "all x.(Gene(x) -> ClassifyingOrganisms(x))", "all x.(Gene(x) -> CanBeUsedForClassifyingOrganisms(x))", "all x.(Gene(x) -> ClassificativeOccult(x))", "all x.(Gene(x) -> ClassifiedOrganism(x))", "all x.(Gene(x) -> CanBeUsedForClassifyingOrganisms(x))", "all x y.((Gene(x) & Organism(y)) -> CanBeClassified(x,y))", "all x y.((Gene(x) & Organism(y)) -> Classifies(x,y))", "all x y.((Gene(x) & Organism(y)) -> ClassifiedFor(x,y))", "all x.(Benefit(x) -> ClassifiesOrganisms(x))", "all x.(Gene(x) -> ClassifiedOrganism(x))", "all x.(Gene(x) -> ClassifiesOrganism(x))"]}
{"id": "entailmentbank_validation_341", "nl": "genes are made of dna.", "fol": "", "prediction": ["all x.(Gas(x) -> MadeOfDna(x))", "all x.(Gene(x) -> MadeOfDna(x))", "all x.(Gain(x) -> MadeOfDna(x))", "all x.(Gene(x) -> MadeOfDna(x))", "all x.(Gene(x) -> MadeOfDna(x))", "all x.(Gene(x) -> MadeOfDna(x))", "all x.(Genes(x) -> MadeOfDna(x))", "all x.(Gene(x) -> MadeOfDna(x))", "all x.(Gain(x) -> MadeOfDna(x))", "all x.(Gather(x) -> MadeOfDna(x))", "all x.(Gene(x) -> MadeOfDna(x))", "all x.(Gene(x) -> MadeOfDna(x))", "all x.(Gene(x) -> MadeOfDna(x))", "all x.(Gain(x) -> MadeOfDna(x))", "all x.(Gaen(x) -> MadeOfDna(x))", "all x.(Gain(x) -> ManufacturedOfDna(x))"]}
{"id": "entailmentbank_validation_342", "nl": "dna can be used for classifying organisms.", "fol": "", "prediction": ["all x.(Dna(x) -> ClassifyOrganism(x))", "all x.(Dna(x) -> ClassifiedOrganism(x))", "all x y.((Dna(x) & Organism(y)) -> Classify(x,y))", "all x y.((Dna(x) & Organism(y)) -> CanBeClassifiedFor(x,y))", "all x.(Dna(x) -> ClassifiesOrganisms(x))", "all x.(Dna(x) -> CanBeUsedForClassifyingOrganisms(x))", "all x.(Dna(x) -> CanBeUsedForClassifyingOrganisms(x))", "all x y.((Dna(x) & Organism(y)) -> Classified(x,y))", "all x y.((Dna(x) & Organism(y)) -> Classified(x,y))", "all x.(Dna(x) -> ClassifiesOrganisms(x))", "all x.(Dna(x) -> CanBeUsedForClassifyingOrganisms(x))", "all x y.((Dna(x) & Organism(y)) -> Classify(x,y))", "all x y.((Dna(x) & Organism(y)) -> Classifies(x,y))", "all x.(Dna(x) -> ClassifiesOrganisms(x))", "all x.(Dna(x) -> ClassifiesOrganisms(x))", "all x.(Dna(x) -> ClassifiesOrganisms(x))"]}
{"id": "entailmentbank_validation_343", "nl": "dna is a kind of molecule.", "fol": "", "prediction": ["all x.(Dna(x) -> Molecule(x))", "all x.(Dna(x) -> Molecule(x))", "all x.(Dna(x) -> Molecule(x))", "all x.(Dna(x) -> Molecule(x))", "all x.(Dna(x) -> Molecule(x))", "all x y.((Dna(x) & Molecule(y)) -> SpeciesOf(x,y))", "all x.(Dna(x) -> Molecule(x))", "all x y.((Dna(x) & Molecule(y)) -> Molecular(x))", "exists x.(Dna(x) & Molecule(x))", "all x.(Dna(x) -> Molecule(x))", "all x.(Dna(x) -> Gene(x))", "all x.(Dna(x) -> Molecule(x))", "all x.(Drena(x) -> Molecule(x))", "all x.(Dna(x) -> Molecule(x))", "all x.(Dna(x) -> Molecule(x))", "all x.(Dna(x) -> Molecule(x))"]}
{"id": "entailmentbank_validation_344", "nl": "molecules are used for classifying organisms.", "fol": "", "prediction": ["all x y.((Molecular(x) & Organism(y)) -> Classificating(x,y))", "all x y.((Molecule(x) & Organism(y)) -> Classified(x,y))", "all x.(Molecular(x) -> ClassifiesOrganism(x))", "all x.(Molecule(x) -> ClassifiesOrganism(x))", "all x y.((Molecule(x) & Organism(y)) -> ClassifiedFor(x,y))", "all x y.((Molecule(x) & Organism(y)) -> ClassifiedFor(x,y))", "all x.(Molecular(x) -> ClassifiesOrganisms(x))", "all x.(Molecular(x) -> ClassifyOrganism(x))", "all x.(Molecule(x) -> ClassifiesOrganism(x))", "all x.(Molecular(x) -> ClassifiedOrganism(x))", "all x y z.((Molecule(x) & Organism(y) & Organism(z)) -> Classified(x,y,z))", "all x y.((Molecular(x) & Organism(y)) -> Classified(x,y))", "all x.(Molecule(x) -> ClassifyOrganism(x))", "all x y.((Molecule(x) & Organism(y)) -> ClassifiedForClassification(x,y))", "all x y.((Molecule(x) & Organism(y)) -> Classified(x,y))", "all x y.((Molecule(x) & Organism(y)) -> Classified(x,y))"]}
{"id": "entailmentbank_validation_345", "nl": "a frog is a kind of amphibian.", "fol": "", "prediction": ["all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))"]}
{"id": "entailmentbank_validation_346", "nl": "a tadpole is a kind of young / baby frog.", "fol": "", "prediction": ["all x.(Tadpole(x) -> Y.(BabyFrog(y)))", "all x.(Tadpole(x) -> (Young(x) | Baby(x)))", "all x.(Tadpole(x) -> (YoungFrog(x) | BabyFrog(x)))", "all x.(Tadpole(x) -> \"YoungFrog(x) & BabyFrog(x)\"))", "all x.(Tadpole(x) -> (YoungFrog(x) | BabyFrog(x)))", "all x.(Tadpole(x) -> (YoungFrog(x) | BabyFrog(x)))", "all x.(Tadpole(x) -> (YoungFrog(x) & BabyFrog(x)))", "all x.(Tadpole(x) -> (YoungFrog(x) | BabyFrog(x)))", "all x.(Tadpole(x) -> (YoungFrog(x) | BabyFrog(x)))", "all x.(Tadpole(x) -> (YearOfFrog(x) & BabyOfFrog(x)))", "all x.(Tadpole(x) -> (Frog(x) & Young(x) & Baby(x)))", "all x.(Tadpole(x) -> (YoungFrog(x) & BabyFrog(x)))", "all x.(Tadpole(x) -> (YoungFrog(x) & BabyFrog(x)))", "all x.(Tadpole(x) -> (YoungBabyFrog(x) & HasTooLoving(x)))", "all x.(Tadpole(x) -> (YoungBabyFrog(x) | LittleFrog(x)))", "all x.(Tadpole(x) -> (YoungFrog(x) & BabyFrog(x)))"]}
{"id": "entailmentbank_validation_347", "nl": "a tadpole is a kind of young amphibian.", "fol": "", "prediction": ["all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> KindOfYoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> Amphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))"]}
{"id": "entailmentbank_validation_348", "nl": "metamorphosis is when an amphibian changes from an immature form to an adult form.", "fol": "", "prediction": ["all x.((Amphibian(x) & ChangesFromImmatureToAdult(x)) -> Metamorphosis(x))", "all x.(Metamorphosis(x) -> (Amphibian(x) & ChangesFromImmatureToAdult(x)))", "all x.(Metamorphosis(x) -> (AmphibianChangsFromImmatureToAdult(x)))", "all x.(Metamorphosis(x) -> (Amphibian(x) & Immature(x) & Adult(x)))", "all x y.((Amphibian(x) & ImmatureForm(y) & AdultForm(x)) -> Transforms(x,y))", "all x.((Amphibian(x) & ImmatureForm(x)) -> AdultForm(x))", "all x y.((Amphibian(x) & ImmatureForm(y) & AdultForm(z)) -> Metamorphosis(x))", "all x.(Memomorphosis(x) -> (Amphibian(x) & Immature(x) & Adult(x)))", "all x.(Metamorphosis(x) -> (Amphibian(x) & ImmatureForm(x) & AdultForm(x)))", "all x y.((Amphibian(x) & Immature(y) & Adult(y)) -> ChangesFrom(x,y))", "all x y z.((Amphibian(x) & ImmatureForm(y) & AdultForm(z)) -> ChangesForm(x,y,z))", "all x.(Amphibian(x) -> (ChangesFromImmatureToAdult(x)))", "all x y.((Amphibian(x) & ImmatureForm(y) & AdultForm(y)) -> Metamorphosis(x))", "all x y.((Amphibian(x) & Immature(y) & Adult(y)) -> ChangesFormToForm(x,y))", "all x y z.((Amphibian(x) & ImmatureForm(y) & AdultForm(z)) -> Metamorphosis(x))", "all x.(Amphibian(x) & Metamorphosis(x))"]}
{"id": "entailmentbank_validation_349", "nl": "an example of metamorphosis is when a tadpole changes from a an immature form to and adult form.", "fol": "", "prediction": ["all x y.((Tadpole(x) & ImmatureForm(y) & AltersForm(x,y)) -> Metamorphosis(x))", "all x.((Tadpole(x) & ImpureForm(x) & AdultForm(x)) -> Metamorphosis(x))", "all x.(Metamorphosis(x) -> ChangesIntoAdultForm(x))", "all x.(Metamorphosis(x) -> WapsTadpole(x),immatureForm,adultForm,adultForm))", "all x.([Tadpole(x) & ChangesFormTo(x,adult)) -> Metamorphosis(x))", "all x.((Tadpole(x) & ChangesIntoAdult(x)) -> Metamorphosis(x))", "all x.(Metamorphosis(x) -> (TadpoleChangeFromImmatureToAdvancedForm(x)))", "all x.((Tadpole(x) & ImmatureForm(x) & AdultForm(x)) -> Metamorphosis(x))", "all x.((Tadpole(x) & ChangesFromImmatureToAdult(x)) -> Metamorphosis(x))", "all x.(Metamorphosis(x) -> (TadpoleChangesFromImmatureToAdultForm(x)))", "all x.((Tadpole(x) & ChangesFromImmatureToAdult(x)) -> Metamorphosis(x))", "all x.(Metamorphosis(x) -> (TadpoleChangeFromImmatureToAdult(x)))", "all x.(Metamorphosis(x) -> (TadpoleChange(x) & ImmatureForm(x) & AdultForm(x)))", "all x y.((Tadpole(x) & ImmatureForm(y) & ChangesForm(x,y)) -> Metamorphosis(x))", "all x.(Metamorphosis(x) -> (TadpoleChange(x) & ImmatureForm(x) & AdultForm(x)))", "all x y.((Tadpole(x) & ImmatureForm(y) & AdultForm(y)) -> ChangesForm(x,y))"]}
{"id": "entailmentbank_validation_350", "nl": "the immature form of a frog is called a tadpole.", "fol": "", "prediction": ["all x.((Frog(x) & ImmatureForm(x)) -> Tadpole(x))", "all x.((Frog(x) & ImmatureSign(x)) -> Tadpole(x))", "all x y.((Frog(x) & ImmatureForm(x,y)) -> Tadpole(x))", "all x.((Frog(x) & ImmatureForm(x)) -> Tadpole(x))", "all x.((Frog(x) & ImmatureForm(x)) -> Tadpole(x))", "all x.(Frog(x) -> Tadpole(x))", "all x.((Frog(x) & Immature(x)) -> Tadpole(x))", "all x.(Frog(x) -> Tadpole(x))", "all x.(Frog(x) & ImmatureForm(x) -> Tadpole(x))", "all x.(Frog(x) -> Tadpole(x))", "all x.(Frog(x) & ImmatureForm(x,frog) -> Tadpole(x))", "all x.((Frog(x) & ImmatureForm(x)) -> Tadpole(x))", "all x.((Frog(x) & Immature(x)) -> Tadpole(x))", "all x.((Frog(x) & Immature(x)) -> Tadpole(x))", "all x.(ImmatureFrog(x) -> Tadpole(x))", "all x.((Frog(x) & ImmatureForm(x)) -> Tadpole(x))"]}
{"id": "entailmentbank_validation_351", "nl": "the adult form of a tadpole is called a frog.", "fol": "", "prediction": ["all x.(AdultFormOfTadpole(x) -> Frog(x))", "all x.((Tadpole(x) & AdultForm(x)) -> Frog(x))", "all x.(Adventure(x) -> Frog(x))", "all x.((Adult(x) & Tadpole(x)) -> Frog(x))", "all x.((TadpoleEnd(x) & AdultForm(x)) -> Frog(x))", "all x y.((Tadpole(x) & AdultForm(x,y)) -> Frog(x,y))", "all x.(Tadpole(x) -> (adultFragment(x) & Frog(x))))", "all x.(Tadpole(x) -> Frog(x))", "all x.(Tadpole(x) -> Frog(x))", "all x y.((Tadpole(x) & Adult(y)) -> Frog(x))", "all x.(Tadpole(x) -> Frog(x))", "all x y.((Tadpole(x) & AdultDog(x) & HasTadpole(x)) -> Froth(x))", "all x.((Tadpole(x) & AdultForm(x)) -> Frog(x))", "all x.(Tadpole(x) -> Frog(x))", "all x.(AdultTadpole(x) -> Frog(x))", "all x.(Tadpole(x) -> Frog(x))"]}
{"id": "entailmentbank_validation_352", "nl": "the imature form of a frog is called a tadpole and the adult form of a tadpole is called a frog.", "fol": "", "prediction": ["all x y.((Frog(x) & ImatureHasTadpole(x)) -> (adultHasTadpole(y)))", "all x y.((Frog(x) & Tidpole(y)) -> (Imature(x) & Adult(x) & Tadpole(y)))", "all x y.((Frog(x) & ImatureForm(x) & Tadpole(y)) -> (TadpoleForm(x) & AdultForm(y)))", "all x y.((Frog(x) & ImatureForm(x) & AdultForm(y)) -> (Tadpole(x) & Frog(y)))", "(all x.(Frog(x) -> Tadpole(x)) & all y.(Tadpole(y) -> Frog(y)))", "all x y.((Frog(x) & ImagurateForm(x) & Tadpole(y)) -> (InnerForm(x,y) & AdultForm(x,y)))", "all x y.((Frog(x) & ImmatureForm(x) & Tadpole(y)) -> (AdultForm(x) & Frog(x)))", "(all x.(Frog(x) -> Tadpole(x)) & (Tadpole(x) -> Frog(x)))", "(all x.(FrogImature(x) -> Tadpole(x)) & all y.(TadpoleAdult(y) -> Frog(x)))", "all x y.((Frog(x) & Tactical(y)) -> ((Imature(x) & Tadpole(y)) | Adult(x) & Tadpole(y))))", "(all x.(Frog(x) -> Tadpole(x)) & all y.(Tadpole(y) -> Frog(y)))", "all x y.((Frog(x) & ImatureForm(x) & AdultForm(y)) -> (Tadpole(x) & Frog(y)))", "(all x.(Frog(x) -> Tadpole(x)) & (Tadpole(x) -> Frog(x)))", "all x y.((Frog(x) & ImatureForm(x) & AdultForm(y)) -> (Tadpole(x) & Float(y)))", "all x y.((Frog(x) & Imature(x) & Tadpole(y)) -> (Adult(x) & Tadpole(x) & Frog(x)))", "all x y.((Frog(x) & ImatureForm(x) & Tadpole(y)) -> (Tadpole(x) & AdultForm(y)))"]}
{"id": "entailmentbank_validation_353", "nl": "an example of metamorphosis is when a tadpole changes from a tadpole into a frog.", "fol": "", "prediction": ["all x y.(Metamorphosis(x) -> (TadpoleChange(x,y) & FromTadpoleToFrog(x)))", "all x y z.((Tadpole(x) & Dwarf(y) & Tadpole(z) & ChangesFromToFrog(x,y,z)) -> Metamorphosis(x))", "all x.((Tadpole(x) & FromTadpoleToFrog(x)) -> Metamorphosis(x))", "all x.((Tadpole(x) & ChangesFromTadpoleToFrog(x)) -> Metamorphosis(x))", "all x.(Metamorphosis(x) -> ChangesTadpoleToFrog(x))", "exists x.(Tadpole(x) & ChangesIntoFrog(x))", "all x.((Tadpole(x) & HasTadpole(x)) -> ChangesIntoFrog(x))", "all x.(Metamorphosis(x) -> (TadpoleChange(x) & FromTadpoleToFrog(x)))", "all x y.((Tadpole(x) & Fetus(y)) -> ChangesFromTadpoleToFrog(x,y))", "all x.(MetamorphosisExample(x) -> (TadpoleChange(x) & TransformsFromTadpoleToFrog(x)))", "all x y z.((Tadpole(x) & Tardpole(y) & Frog(z)) -> ChangesFrom(x,y,z))", "all x.(Metamorphosis(x) -> ChangesTadpoleIntoFrog(x))", "all x.((Tadpole(x) -> ChangesFromTadpoleToFrog(x))", "all x y.((Tadpole(x) & Tadpole(y)) -> TransitionsIntoFrog(x))", "all x.(Metamorphosis(x) -> (TadpoleChange(x) & InFrog(x)))", "all x y.((Tadpole(x) & ChangingFromTadpoleToFrog(x,y)) -> Metamorphosis(x))"]}
{"id": "entailmentbank_validation_354", "nl": "reproduction occurs during adulthood.", "fol": "", "prediction": ["all x y.((Reproduction(x) & Adulthood(y)) -> OccursDuring(x,y))", "all x.(Reproduction(x) -> Adulthood(x))", "all x.(Reproduction(x) -> Adulthood(x))", "all x.(Reproduction(x) | Adulthood(x))", "all x.(Proceeding(x) -> Adulthood(x))", "all x.((Reproduction(x) & Adulthood(x)) -> Perinatal(x))", "all x.(Reproduction(x) -> Adulthood(x))", "all x.(ReproductionOfAdulthood(x) -> (OccursAtAdulthood(x) & Reproductive(x)))", "all x.((Reproduction(x) & Adulthood(x)) -> Reproductive(x))", "all x.(ReproductionOfAdulthood(x) -> Reproductive(x))", "all x.((Reproduction(x) & Adulthood(x)) -> OftenExperiences(x))", "all x.(Reproduction(x) -> Adulthood(x))", "all x.(ReproductionOf(x,adulthood) -> OccursDuring(x,adulthood))", "all x.(Reproduction(x) -> Adulthood(x))", "all x y.((Reproduction(x) & Adulthood(y)) -> OccursDuring(x,y))", "all x y.((Reproduction(x) & Adulthood(y)) -> Reproductive(x,y))"]}
{"id": "entailmentbank_validation_355", "nl": "an example of reproduction is laying eggs.", "fol": "", "prediction": ["all x.(Reproduction(x) -> LaysEggs(x))", "all x.(Reproduction(x) -> LayingEggs(x))", "all x.((Reproduction(x) & LayingEggs(x)) -> Reproduction(x))", "all x.(Reproduction(x) -> LaysEggs(x))", "all x.(Reproduction(x) -> LaysEggs(x))", "all x.(Reproduction(x) -> LayingEggs(x))", "all x.(Reproduction(x) -> LayingEggs(x))", "all x.(Reproduction(x) -> LaysEggs(x))", "all x.((Reproduction(x) & LayingEggs(x)) -> Reproduction(x))", "all x.(Reproduction(x) -> LaysEggs(x))", "all x y.((LayingEggs(x) & BreedingColor(y)) -> Reproduction(x))", "all x.(Reproduction(x) -> LayingEggs(x))", "all x.((LaysEggs(x) & Overlays(x)) -> Reproduction(x))", "all x.((Parent(x) & LaysEggs(x)) -> Reproduction(x))", "all x.(Reproduction(x) -> LayingEggs(x))", "exists x.(ProductionExample(x) & LaysEggs(x))"]}
{"id": "entailmentbank_validation_356", "nl": "laying eggs occurs during adulthood.", "fol": "", "prediction": ["all x.(LayEggs(x) -> Adulthood(x))", "all x.(LayingEggs(x) -> Adulthood(x))", "all x.((Egg(x) & Adulthood(x)) -> Lays(x))", "all x.(LivingEggs(x) -> Adulthood(x))", "all x.((ElsingEggs(x) & Adulthood(x)) -> OccursDuring(x,y))", "all x y.((Egg(x) & Adulthood(y)) -> Lays(x,y))", "all x.(LaysEggs(x) -> Adulthood(x))", "all x.((Eggs(x) & Adulthood(x)) -> Lays(x))", "all x y.((ElatingEggs(x) & Adulthood(y)) -> OccursIn(x,y))", "all x.(ElingEggs(x) -> Adulthood(x))", "all x y.((Egg(x) & Adulthood(y)) -> Lays(x,y))", "all x.(LaysEggs(x) -> Adulthood(x))", "all x y.((Egg(x) & Adulthood(y)) -> Lays(x,y))", "all x.((Eggs(x) & Adulthood(x)) -> LaysDuring(x,y))", "all x.(LayingEggs(x) -> Adulthood(x))", "all x.(LivingEggs(x) -> Adulthood(x))"]}
{"id": "entailmentbank_validation_357", "nl": "adulthood is a stage in the life cycle process.", "fol": "", "prediction": ["all x.(Adult(x) -> StageInLivingCycleProcess(x))", "all x.(Adult(x) -> StapleInLifeCycleProcess(x))", "all x.(Adult(x) -> LifeCycleProcess(x))", "all x.(Adult(x) -> StageInLifeCycleProcess(x))", "all x.((Adulthood(x) & LifeCycleProcess(x)) -> StageIn(x,y))", "all x.(Adulthood(x) -> LifeCycleProcess(x))", "all x.(Adult(x) -> StageInLifeCycleProcess(x))", "all x.(Adult(x) -> StageInLifeCycle(x))", "all x.(Adulthood(x) -> LifeCyclicProcess(x))", "all x.(Adulthood(x) -> StageInLifeCycle(x))", "all x.(Adulthood(x) -> StageInLifeCycleProcess(x))", "all x.(Adulthood(x) -> LifeCycleProcess(x))", "all x.(Adulthood(x) -> StageInLifeCycleProcess(x))", "all x.(Adult(x) -> StageInLifeCycleProcess(x))", "all x.(Term(x) -> StageInLifeCycleProcess(x))", "all x.(Adult(x) -> StageInLifeCycle(x))"]}
{"id": "entailmentbank_validation_358", "nl": "laying eggs occurs during the adult stage in the life cycle.", "fol": "", "prediction": ["all x.(LayingEggs(x) -> AdultStageInLifeCycle(x))", "all x.(EltingEggs(x) -> AdultStage(x))", "all x.((LaysEggs(x) & AdultStage(x)) -> LifeCycle(x))", "all x y.((Eggs(x) & LifeStage(z)) -> LaysIn(x,y,z))", "all x y.((LivingEggs(x) & AdultStage(y)) -> InLifeCycle(x,y))", "all x.(ElingEggs(x) -> AdultStageInLifeCycle(x))", "all x y z.((ExecutesStage(x) & Egg(y) & AdultStage(z) & LifeCycle(z)) -> Lays(y,z))", "all x y z.((Egg(x) & AdultStage(y) & LifeCycle(z)) -> Lays(x,y,z))", "all x y.((Egg(x) & Adult(y)) -> LaysDuringLifeCycle(x,y))", "all x.((BearingEggs(x) & AdultStage(x)) -> Lays(x))", "all x.(ElvingEggs(x) -> AdultStage(x))", "all x.((Egg(x) & AdultStage(x)) -> LaysDuringLifeCycle(x))", "all x.(Stage(x) -> LaysEggsDuringAdult(x))", "all x.(LaysEggs(x) -> AdultStageInLifeCycle(x))", "all x.(LaysEggs(x) -> AdultLifeChain(x))", "all x.(AdultStage(x) -> LaysEggs(x))"]}
{"id": "entailmentbank_validation_359", "nl": "a female insect lays eggs.", "fol": "", "prediction": ["all x.(FemaleInsect(x) -> LaysEggs(x))", "all x.(Insect(x) -> LaysEggs(x))", "all x.(FemaleInsect(x) -> LaysEggs(x))", "all x.(FemaleInsect(x) -> LaysEggs(x))", "all x.(FemaleInsect(x) -> LaysEggs(x))", "all x.(FemaleInsect(x) -> LaysEggs(x))", "all x.(FemaleInsect(x) -> LaysEggs(x))", "all x.((FemaleInsect(x) & LaysEggs(x)) -> FemaleInsect(x))", "all x.(FemaleInsect(x) -> LaysEggs(x))", "all x.(FemaleInsect(x) -> LaysEggs(x))", "all x.(FemaleInsect(x) -> LaysEggs(x))", "all x y.((FemaleInsect(x) & Egg(y)) -> Lays(x,y))", "all x.(FemaleInsect(x) -> LaysEggs(x))", "all x.(FemaleInsect(x) -> LaysEggs(x))", "all x.((FemaleInsect(x) & LaysEggs(x)) -> FemaleInsect(x))", "all x.(FemaleInsect(x) -> LaysEggs(x))"]}
{"id": "entailmentbank_validation_360", "nl": "a female insect lays eggs during the adult stage of an insect's life cycle.", "fol": "", "prediction": ["all x y z.((FemaleInsect(x) & Egg(y) & AdultStageOfLifeCycle(z) & LaysDuring(x,y,z)) -> InsectLifeCycle(x,y))", "all x y.((FemaleInsect(x) & Egg(y)) -> LaysDuringAdultStage(x,y))", "all x y.(((FemaleInsect(x) & AdultInsect(y)) -> LaysEggsDuring(x,y))", "all x y.((FemaleInsect(x) & Insect(y)) -> LaysEggsDuringAdultStageOfLifeCycle(x,y))", "all x y.((FemaleInsect(x) & Insect(y)) -> LaysEggsDuringAdultStageOfLifeCycle[x,y))", "all x y z w.((FemaleInsect(x) & Egg(y) & AdultStage(z) & InsectLifeCycle(w) & Lays(x,y,z)) -> InsectLifeCycle(x,y,x))", "all x y z.((FemaleInsect(x) & Egg(y) & AdultStage(z) & InsectLifeCycle(g)) -> LaysDuring(x,y,z))", "all x y z.((FemaleInsect(x) & Eggs(y) & AdultStage(z)) -> LaysDuringLifeCycle(x,y,z))", "all x y.((FemaleInsect(x) & AdultStage(x)) -> LaysEggs(x,y))", "all x y.((FemaleInsect(x) & AdultStage(y)) -> LaysEggs(x,y))", "all x y.((FemaleInsect(x) & AdultStudyOfLifeCycle(y)) -> LaysEggs(x,y))", "all x y.((FemaleInsect(x) & AdultStage(y)) -> LaysEggsInInsectLifeCycle(x,y))", "all x.((FemaleInsect(x) & LaysEggsOnInsect(x,AdultStage)) -> InInsectLifeCycle(x))", "all x.((FemaleInsect(x) & LaysEggs(x)) -> InsectLifeCycle(x))", "all x.((FemaleInsect(x) & LaysEggsDuringAdultStage(x)) -> InsectLifeChild(x))", "all x.((FemaleInsect(x) & LaysEggsOnAdultStage(x)) -> InsectLifeCycle(x))"]}
{"id": "entailmentbank_validation_361", "nl": "a cat is a kind of mammal.", "fol": "", "prediction": ["all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "exists x.(Cat(x) & Mammal(x))"]}
{"id": "entailmentbank_validation_362", "nl": "mammals give birth to live young.", "fol": "", "prediction": ["all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x.(Mammal(x) -> GivesBirthToRelevant(x))", "all x.(Mammal(x) -> GiveBirthToLiveYoung(x))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x.(Mammal(x) -> GiveBirthToLiveYoung(x))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x.(Mammal(x) -> GivesBirthToLiveYoung(x))"]}
{"id": "entailmentbank_validation_363", "nl": "a cat gives birth to live young.", "fol": "", "prediction": ["all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x.(Cat(x) -> GibtBirthToLiveYoung(x))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x.(Cat(x) -> LiveYoung(x))", "all x y.((Cat(x) & Young(y)) -> GivesBirthTo(x,y))", "all x.(Cat(x) -> GivesBirthToLiveYoung(x))"]}
{"id": "entailmentbank_validation_364", "nl": "to give birth to live young means to undergo live birth.", "fol": "", "prediction": ["all x.((GivingBirthToLiveYoung(x) & OngoingLiveBirth(x)) -> Lifeless(x))", "all x.((GivingBirth(x) & LiveYoung(x)) -> UndergoesLiveBirth(x))", "all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> SubmitsLiveBirth(x))", "all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> GivesBirthToLiveYoung(x))", "all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> LiveCrybaby(x))", "all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> LiveBirth(x))", "all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> GivesBirthToLiveYoung(x))", "all x.(GivesBirthToLiveYoung(x) -> UndergoesLiveBirth(x))", "all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> GivesBirthToLiveYoung(x))", "all x.((GivesBirthToLiveYoung(x) -> UndergoesLiveBirth(x))", "all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> LiveBirth(x))", "all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> GivesBirthToLiveYoung(x))", "all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> LiveBirth(x))", "all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> GivesBirthToLiveYoung(x))", "all x y z.((GiveBirthToLiveYoung(x) & LiveBirth(y) & LiveBirth(z)) -> UndergoesLiveBirth(x,y,z))", "all x y.((GivesBirthToLiveYoung(x) & LiveBirth(y)) -> UndergoesLiveBirth(x,y))"]}
{"id": "entailmentbank_validation_365", "nl": "a cat undergoes live birth.", "fol": "", "prediction": ["all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.(Cat(x) -> LiveBirth(x))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.(Cat(x) -> LiveBirth(x))"]}
{"id": "entailmentbank_validation_366", "nl": "live birth means developing inside the mother instead of an egg.", "fol": "", "prediction": ["all x.(LiveBirth(x) -> (DevelopsInside(x,mother) & -ChangesEgg(x)))", "all x y z.((LiveBirth(x) & Mother(y) & Egg(z)) -> DevelopingInside(x,y,z))", "all x.(LiveBirth(x) -> inHerm(x))", "all x.(LiveBirth(x) -> (DevelopingInside(x,Mother) & -ConsidersEgg(x)))", "all x.(LiveBirth(x) -> (EntwickelsInside(x) & -EntersEgg(x)))", "all x.(LiveBirth(x) -> (DevelopsInsideMother(x) & -FollowingEgg(x)))", "all x.(LiveBirth(x) -> (DevelopsInsideMain(x) & -InsideEgg(x)))", "all x.(LiveBirth(x) -> (DevelopsInsideMother(x) & -InsideEgg(x)))", "all x y.((LiveBirth(x) & Mother(y)) -> (DevelopsInside(y,x) & -Egg(y)))", "all x y.((LiveBirth(x) & Mother(y)) -> DevelopingInside(x,y))", "all x y.((LiveBirth(x) & Mother(y)) -> DevelopingInside(y,x))", "all x.(LiveBirth(x) -> (DevelopsInsideMother(x) & -Egg(x)))", "all x y.((LiveBirth(x) & Mother(y)) -> (DevelopsInside(x,y) & -Egg(y)))", "all x y z.((LiveBirth(x) & Mother(y) & Egg(z)) -> (DevelopsInside(x,y,z) & -Inside(x,y)))", "all x.(LiveBirth(x) -> (DevelopsInside(x) & -Easter(x)))", "all x y z.((LiveBirth(x) & Mother(y) & Egg(z)) -> (DevelopsInside(x,y) & -Contains(x,z)))"]}
{"id": "entailmentbank_validation_367", "nl": "a cat develops inside its mother.", "fol": "", "prediction": ["all x.(Cat(x) -> UsuallyDevelopsInsideMother(x))", "all x.(Cat(x) & DevelopsInsideMammal(x))", "all x.(Cat(x) -> developsinsideMother(x))", "all x.(Cat(x) -> exists y.(Mother(y) & DevelopsWithin(x,y))))", "all x y.((Cat(x) & Mother(y)) -> Development(x,y))", "all x.(Cat(x) -> DevelopsInsideMammal(x))", "all x y.((Cat(x) & Mother(y)) -> DevelopsInside(x,y))", "all x.((Cat(x) & Mother(x)) -> DevelopsInside(x))", "all x y.((Cat(x) & Mother(y)) -> DevelopsInside(x,y))", "all x.(Cat(x) -> DoesInside(x))", "all x.(Cat(x) -> DevelopsItselfInsideMother(x))", "all x.(Cat(x) -> DevelopsItselfInsideMother(x))", "all x y.((Cat(x) & Mother(y)) -> DevelopsInside(x,y))", "all x y.((Cat(x) & Mother(y)) -> DevelopsInside(x,y))", "all x.(Cat(x) -> DevelopsInsideMother(x))", "all x.(Cat(x) -> DevelopingInsideMother(x))"]}
{"id": "entailmentbank_validation_368", "nl": "the opposite of the same is different.", "fol": "", "prediction": ["all x.((OppositeOfSame(x) & OppositeOfSame(x)) -> Different(x))", "all x.((OppositeOfSame(x) & OppositeOfSame(x)) -> Different(x))", "all x y.((OppositeOfSame(x) & OppositeOfSame(x,y)) -> Different(x))", "all x.((OppositeOfSame(x) & OppositeOfSame(x)) -> Different(x))", "all x.((OppositeOfSame(x) & OppositeOfSame(x)) -> Different(x))", "all x.(OppositeOfSame(x) -> Different(x))", "all x.((SameOpponent(x) & OppositeOfSame(x)) -> Different(x))", "all x.((OpposeOfSame(x) & OppositeOfSame(x)) -> Different(x))", "all x.((OppositeOfSame(x) & OppositeOfSame(x)) -> Different(x))", "all x.((OpponentOfSame(x)) -> Different(x))", "all x!(OppositeOfSame(x) -> Different(x))", "all x.((OpponentOfSame(x) & OppositeOfSame(x)) -> Different(x))", "all x.((OppositeOfSame(x) & OppositeOfSame(x)) -> Different(x))", "all x.(DifferentOppositeOfSame(x) -> Different(x))", "all x.(OppositeOfSame(x) -> Different(x))", "all x.(OppositeOfSame(x) -> Different(x))"]}
{"id": "entailmentbank_validation_369", "nl": "two birds are not in the same taxonomic family.", "fol": "", "prediction": ["all x.((Bird(x) & Bird(x)) -> -EqualThonomonicFamily(x))", "all x.(Bird(x) -> -SameTyponomicFamily(x))", "all x.(Bird(x) & -TalwinOfTreatment(x))", "all x.(Journalist(x) -> -InCambodia(x))", "all x.(Bird(x) -> -InTotalTaxonomicFamily(x))", "all x.(Bird(x) & -(TaxinomianFamily(x) & TaxonomicFamily(x)))", "all x.(Bird(x) -> -CollaborateByTaxonomicFamily(x))", "all x y.((Bird(x) & Bird(y)) -> -TropicalFamily(x,y))", "all x y.((Bird(x) & Bird(y)) -> -InTaxinomicalFamily(x,y))", "all x.(Bird(x) -> -TaxinomianFamily(x))", "all x.(Bird(x) -> -TaxinomicalFamily(x,z))", "all x.(Bird(x) -> -TaxinomicalFamily(x))", "all x,y.((Bird(x) & Bird(y)) -> -TaxinomonomicalFamily(x,y))", "all x.(Bird(x) -> -TaxinomicalFamily(x))", "all x.(Bird(x) -> -TaxonomicFamily(x))", "all x y.((Bird(x) & Bird(y) & -Taxinominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominominomia-nomi-Quii-Quii-Quii-Nii-Nia-Ni-Ni-Ni-Ni-Ni-Ni-Ni-Ni-Ni-Ni-Ni-Nu-Ni-Ni-Ni-Ni-Ni-Tin-Ni-Ni-Ni-Ni-Li-Ni-Ni-Ni-Ni-Ni-Ni-Ni-Ni))"]}
{"id": "entailmentbank_validation_370", "nl": "two birds are in different taxonomic families.", "fol": "", "prediction": ["all x.(Bird(x) -> (InTaxinomicianFamily(x) | InTaxinomianFamily(x)))", "all x.(Bird(x) & DifferentTaxonomicFamily(x))", "all x.(Bird(x) -> TaxonomicFamily(x,two))", "all x.(Bird(x) -> DifferentThanSpecies(x))", "all x.(Bird(x) -> (DifferentTaxonomicFamilies(x) & DifferentTaxonomicFamilies(x)))", "all x.(Bird(x) -> TaxonomicFormation(x))", "all x.(Bird(x) -> DifferentFamily(x))", "all x.(Bird(x) -> (DifferentTaxonomicFamilies(x) & DifferentTaxonomicFamilies(x)))", "all x.(Bird(x) -> DifferentT\u00e9nonomicalFamily(x))", "all x.(Bird(x) -> DifferentTaxonomicFamilies(x))", "all x.(Bird(x) -> DifferingThan(x))", "all x.((Bird(x) & Bird(x)) -> TaxonomicFamily(x,y))", "all x y.((Bird(x) & Bird(y)) -> DifferentTyranomicFamily(x,y))", "all x y.((Bird(x) & Bird(y)) -> DifferentTyranomicFamily(x,y))", "all x.(Bird(x) -> TaxonomicalFamily(x))", "all x.(Bird(x) -> TaxonomicFamily(x,2))"]}
{"id": "entailmentbank_validation_371", "nl": "environments with similar characteristics place similar environmental pressures on the organisms in them.", "fol": "", "prediction": ["all x y.((Environment(x) & Environment(y) & SimilarCharacteristics(x)) -> PlacesSimilarEnvironmentalPressions(x,y))", "all x.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSimilarEnvironmentalPressions(x))", "all x y z.((Environment(x) & Organism(y) & SimilarCharacteristics(z)) -> PlacesDependencies(x,y))", "all x y.((Environment(x) & Environment(y) & SimilarCharacteristics(x,y)) -> PlacesSimmonEnvironmentalPressions(x,y))", "all x.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSubstantialPositions(x,Organisms))", "all x y.((Environment(x) & SimilarCharacteristics(x) & Organism(y)) -> PlacesSameEnvironmentalPressionsOn(x,y))", "all x y.((Environment(x) & SimilarCharacteristics(x,y)) -> PlacesEnvironmentalPressionsOnOrganisms(x,y))", "all x.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSimultaneousPresencesOnOrganisms(x))", "all x y.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressures(x,y))", "all x y z.((Environment(x) & Environment(y) & SimilarCharacteristics(z) & SimilarCharacteristics(x,y,z)) -> PlacesEnvironmentalPressureOnOrganisms(x,y,z))", "all x y z.((Environment(x) & Organism(y) & SimilarCharacteristics(x,y) & Environment(z) & SimilarCharacteristics(w)) -> PlacesEnvironmentalPressures(x,y,z))", "all x y.((Environment(x) & Environment(y) & SimilarCharacteristics(x)) -> PlacesSimilarEnvironmentalPressures(y))", "all x y.((Environment(x) & Environment(y) & SimilarCharacteristics(x)) -> PlacesSimilarEnvironmentalPressionsOnOrganisms(x,y))", "all x y.((Environment(x) & Environment(y) & SimilarCharacteristics(x) & Organisms(y)) -> PlacesSameEnvironmentalPressures(x,y))", "all x y.((Environment(x) & SimilarCharacteristics(x) & Organism(y)) -> PlacesSimultaneousEnvironmentalPressures(x,y))", "all x.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressure(x))"]}
{"id": "entailmentbank_validation_372", "nl": "two birds live in environments with similar characteristics.", "fol": "", "prediction": ["all x.(Bird(x) -> LivesInSameEnvironments(x))", "all x y.((Bird(x) & Environment(y) & SimilarCharacteristics(x,y)) -> LivesIn(x,y))", "all x.(Bird(x) -> LivesInSameEnvironment(x,2))", "all x.(Bird(x) -> (LivesInEnvironment(x) & SimilarCharacteristics(x)))", "all x.((Bird(x) & Environment(x) & SimilarCharacteristics(x)) -> LivesIn(x,y))", "both birds live in environments similar in characteristics.", "all x y z.((Bird(x) & Environment(y) & Environment(z) & SimilarCharacteristics(y)) -> LivesIn(x,y,z))", "all x.(Bird(x) -> LivesInEnvironment(x))", "all x y.((Bird(x) & Environment(y) & SimilarCharacteristics(x,y)) -> LivesIn(x,y))", "all x y.((Bird(x) & Environment(y) & SimilarCharacteristics(x,y)) -> LivesIn(x,y))", "all x y.((Bird(x) & Environment(y)) -> LivesIn(x,y))", "all x y z.((Bird(x) & Environment(y) & Environment(z) & SimilarCharacteristics(x,y,z)) -> LivesIn(x,y,z))", "all x y.((Bird(x) & Environment(y) & SimilarCharacteristics(x,y)) -> LivesIn(x,y))", "all x.(Bird(x) -> LivesInEnvironment(x))", "all x.(Bird(x) -> LivesInSameEnvironment(x))", "all x.(Bird(x) -> LivesInSameEnvironment(x,y))"]}
{"id": "entailmentbank_validation_373", "nl": "two birds developed under similar environmental pressures.", "fol": "", "prediction": ["all x y.((Bird(x) & Bird(y) & SimilarElements(x,y)) -> DifferentResourcesAndPressures(x))", "all x.((Bird(x) & Bird(x)) -> (DevelopedUnderSameEnvironmentalPressures(x) & RetainedUnderSameEnvironmentalPressures(x)))", "all x.(Bird(x) & SimilarEnvironmentalPressures(x))", "all x.((Bird(x) & Bird(y)) -> SimilarEnvironmentalPressions(x,y))", "(EarlyPeace(s) & SimilarEnvironmentalPressures(s))", "all x.(Bird(x) -> (DevelopedUnderSameUrbanPressures(x) & Bird(y)))", "all x.(Bird(x) & SimilarEnvironmentalPressures(x))", "the same environment pressures were felt by the two birds.", "all x.(Bird(x) -> DevelopsUnderSameEnvironmentalPressures(x))", "(developments(birds,y) & SimilarEnvironmentalPressions(birds,y))", "two birds developed under similar environmental pressures.", "the likes of which exist x.(Bird(x) & Bird(y) & BasedOnSameEnvironmentalPressures(x))", "(exists x.(Bird(x) & DevelopedUnderSameEnvironmentalPressions(x)))", "all x.(Bird(x) & SimilarEnvironmentalPressions(x))", "all x y.((Bird(x) & Bird(y)) -> DevelopedUnderSameEnvironmentalPressures(y,x))", "all x.(Bird(x) & SimilarEnvironment(x))"]}
{"id": "entailmentbank_validation_374", "nl": "two birds developed thousands of miles apart.", "fol": "", "prediction": ["all x y z.((Bird(x) & Bird(y) & Bird(z)) -> (DevelopedThousandsOfMilesApart(x,y,z)))", "all x y.((Bird(x) & Bird(y)) -> DevelopsThousandsOfMilesApart(x,y))", "all x.(Bird(x) -> (Developed(x,000) | Developed(x,000)))", "all x.(Bird(x) -> HundredsOfMilesApart(x))", "all x y.((Bird(x) & Bird(y)) -> DevelopedThousandsOfMilesApart(x,y))", "all x.((Bird(x) & Bird(y)) -> DevelopedMillionsOfPeals(x,y))", "all x y.((Bird(x) & Bird(y)) -> IsMilesAbove(x,y))", "all x.(Between(x) -> (DevelopsThousandsOfMiles(x)))", "all x y.((Bird(x) & Bird(y)) -> CreatedThousandsOfMilesApart(x,y))", "all x.((Bird(x) & Bird(y)) -> DevelopedThousandsOfMilesApart(x,y))", "all x.(Bird(x) -> SeenMillionsOfMiles(x))", "all x y.((Bird(x) & Bird(y)) -> DevelopmentsMilesAway(x,y))", "all x.(Bird(x) -> (DevelopedMilesAway(x) & WentSorting(x)))", "all x.(Bird(x) -> (DevelopedKnowledge(x,000) | DevelopedCounterCentricMiles(x)))", "(exists x.(Bird(x) & DevelopsKindsApart(x)))", "all x.(Bird(x) -> DevelopmentEngagementMilesApart(x))"]}
{"id": "entailmentbank_validation_375", "nl": "if two things are thousands of miles apart then those two things are separate from each other.", "fol": "", "prediction": ["all x.((MillionsOfMilesAbove(x) & Things(x)) -> SeparateFromOther(x))", "all x y.((TwoThings(x) & ThousandsOfMilesAttached(x,y)) -> SeparateFrom(x,z))", "all x y.((Thing(x) & Thing(y) & ThousandsOfMilesApart(x,y)) -> SeparateAndSeparate(x,y))", "all x.((TwoThings(x) & MarkingLivingRelaxation(x)) -> SeparateThanOtherThing(x))", "all x y.((Thing(x) & ThingsMillionsOfMilesApart(x)) -> SeparateFrom(x,y))", "all x.((TwoThings(x,YearsApart) & ThousandOfMilesApart(x)) -> SeparateFromSeparateThings(x))", "exists x.((Thing(x) & TaustausendsOfMilesApart(x)) -> DifferentFromBothOthers(x))", "all x y.((Thing(x) & Thing(y) & ThousandsOfMilesApart(x)) -> Separate(x,y))", "all x.((TwoThings(x) & TauntsOfMilesApart(x)) -> SeparateFrom(x,y))", "all x y.((Thing(x) & Thing(y) & ThousandsOfMilesApart(x)) -> SeparateFrom(y,x))", "all x y.((TwoThings(x) & TausionsOfMilesApart(x)) -> SeparateFrom(x,y))", "all x.((TwoThing(x) & TausendsOfMilesAdrift(x)) -> SeparateFromHasHasThing(x))", "all x y.((Wealth(x) & Things(y) & ThousandOfMilesApart(x)) -> Separate(y,x))", "all x.((TwoDiverseThan(x) & CentennialOfMiles(x)) -> SeparateThanOneOther(x))", "all x.((TwoThings(x) & ThousandOfMilesApart(x)) -> Separate(x))", "-(MillionsOfMilesApart(x) & TwoThingsMilksSides(x))"]}
{"id": "entailmentbank_validation_376", "nl": "two birds developed separate from each other.", "fol": "", "prediction": ["all x.((Bird(x) & Bird(y)) -> DevelopedSeparate(x))", "all x y.((Bird(x) & Bird(y)) -> DevelopsSeparateFrom(x,y))", "all x.(Bird(x) -> (DevelopmentSeparate(x) & DevelopingSeparate(x)))", "all x.(Bird(x) & DevelopmentSeparate(x))", "all x y z.((Bird(x) & Bird(y) & Bird(z)) -> (DevelopedSeparate(x,y,z) | TheEvolution(x,y)))", "all x.(Bird(x) -> (DevelopedSeparateFrom(x,y) & DevelopedSeparateFrom(y,z)))", "all x y.((Bird(x) & Bird(y)) -> WeirdDevelopment(x,y))", "all x.(Bird(x) -> (DevelopedSeparateFrom(x,1) & DevelopedSeparateFrom(x,2)))", "all x.(Bird(x) -> DevelopedSeparateFrom(x,y))", "all x y z.((Bird(x) & Bird(y) & Bird(z)) -> (BuildsSeparately(x,y,z) & DevelopsSeparately(y,z)))", "all x y.((Bird(x) & Bird(y)) -> DevelopmentSeparate(x,y))", "all x.((Bird(x) & Bird(y)) -> DevelopmentSeparate(x,y))", "all x y.(Bird(x) & Bird(y) & Different(x,y))", "all x y.((Bird(x) & Bird(y)) -> Separated(x,y))", "all x.(Bird(x) -> (DevelopedSeparateFrom(x) & DevelopedSeparateFrom(x,x)))", "all x.(Bird(x) -> DevelopedSeparateFrom(x,y))"]}
{"id": "entailmentbank_validation_377", "nl": "two birds developed in separate environments under similar environmental pressures.", "fol": "", "prediction": ["all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))", "all x.(Bird(x) -> (exists y.(SeparateEnvironment(y) & Environment(x,y)) & Generates(x,y))))", "all x.(Bird(x) -> (DevelopedInSeparateEnvironment(x) & SimilarEnvironmentalPressures(x)))", "all x y.((Bird(x) & Bird(y)) -> DevelopedInSeparateEnvironments(x,y))", "all x.(Bird(x) & Environment(y) & SameEnvironmentPressures(x,y))", "is possible to find y.(Bird(y) & Bird(y) & EnvironmentalPresence(z)) & SeparateEnvironment(x,y) & SimilarEnvironmentPressure(x,z))", "all x.(Bird(x) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))", "all x.(Bird(x) & Breed(x) & DevelopsInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x))", "exist x.(Bark(x) & DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressure(x))", "all x.(Bird(x) -> (DevelopedInSeparateEnvironment(x) & UnderSameEnvironmentalPressions(x)))", "all x.(Bird(x) -> (exists y.(Environment(y) & DevelopsIn(x,y)) & DevelopedInSeparateEnvironment(x,y) & UnderSameEnvironmentalPressure(x))))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressures(x,y)))", "all x.(Bird(x) -> (DevelopedInSeparateEnvironment(x) & UnderSameEnvironmentalPressures(x)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressure(x,y)))", "all x.(Bird(x) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressions(x)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressures(y)))"]}
{"id": "entailmentbank_validation_378", "nl": "two birds from different taxonomic families developed in separate environments under similar environmental pressures.", "fol": "", "prediction": ["all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & TaxonomicFamily(P) & Environment(w) & ProducedInSpecificVessels(x,y,w)) -> SeparateEnvironment(x,y))", "all x y.((Bird(x) & Bird(y)) -> DifferentTaxonomicFamily(x,y))", "all x y.((Bird(x) & Bird(y) & DevelopedInSeparateEnvironments(x,y) & WithSameAlarm(y,x)) -> DifferentTaxonomicFamilies(x))", "DevelopedInExistentEnvironments(bird,x) -TwoBirdsFromDifferentTaxonomicFamilies(b) & DifferentTaxonomicFamilies(c))", "all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z)) -> SeperateEnvironment(x,y,z))", "all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & TaxononomicFamily(y) & TaxonomicFamily(z)) -> DifferentEnvironments(x))", "all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z)) -> (DevelopingInSeparateEnvironment(x) & SimilarEnvironmentalPressures(x)))", "all x.((Bird(x) & DifferentTaxonomicFamily(x) & DifferentTaxonomicFamily(x)) -> Develop(x,separateEnvironment))", "all x.((Bird(x) & TaxonomicFamily(x) & DifferentTyponomialFamily(x)) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressions(x)))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x) & TaxonomicFamily(y) & Different(x,y)) -> DifferentEnvironment(x,y))", "all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & Different(x,y) & EnvironmentalPositive(x,z)) -> CreatedInSeparateEnvironments(x))", "all x y z.((Bird(x) & TaxonomicFamily(y) & Environment(z) & DifferentFamily(y) & DifferentFamily(z)) -> (DevelopedInSeparateEnvironments(x,z) & SimilarEnvironmentalPressures(z)))", "all x.(Bird(x) -> (DifferentTrellonomicFamily(x) & DifferentTrellonomicFamily(x) & DifferentEnvironmentPressures(x)))", "all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomyFamily(z)) -> (DifferentEnvironment(x,y,z) & DifferentEnvironmentPressures(x,y)))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x,y) & Different(y)) -> DevelopDifferentEnvironment(x,y))", "all x.(Bird(x) -> (DifferentTaxinomianFamilies(x) & SeparateEnvironments(x) & SimilarEnvironmentPressures(x)))"]}
{"id": "entailmentbank_validation_379", "nl": "convergent evolution is when two species in different taxonomic families develop in different places under similar environmental pressures.", "fol": "", "prediction": ["all x.(ConvergentEvolution(x) -> (SixtySpecies(x) & TaxonomicFamilies(x) & DifferentPlants(x) & SimilarEnvironmentalPressures(x)))", "all x.(ComconvergentEvolution(x) -> (CreateLife(x) & DifferentTaxonomicFamilies(x) & DifferentPlacesUnderSimilarEnvironmentalPaints(x)))", "all x y z.((Species(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & DifferentPlaces(y) & DifferentPlaces(z)) -> ConvergentEvolution(x))", "all x.(ConvergencentEvolution(x) -> (exists y.(Species(y) & TaxonomicFamily(y) & DifferentThanDistantPlaces(y,x)) & exists z.(ThanCamian(z) & Development(z) & DifferentEnvironment(z)) & Develop(x,z))))", "all x.(ConvergentEvolution(x) -> exists y z.(Species(y) & TaxonomicFamily(z) & TaxonomicFamily(z) & Dynasty(y) & DifferentPlaces(z) & SimilarEnvironmentalPressions(w) & DifferentEnvironmentalPressures(w) & DifferentEnvironmentalPressures(w)))", "all x y z.((ConvergentEvolution(x) & TaxonomicFamily(y) & DifferentThanGermany(z)) -> (AnimalsInDifferentPlaces(x,y,z) & DevelopsNecessarilyUnderSimultaneousPressures(x)))", "all x.(ConvergentEvolution(x) -> (exists y z.(Species(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & DevelopInDifferentPlaces(x,y,z)) & SimilarEnvironmentalPressures(x)))", "all x y z w.((Evolution(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & Taxonomic(w)) -> Complexes(x,y,z))", "all x.(ConvergentEvolution(x) -> (exists y.(Species(y,x) & DifferentTaxonomicFamily(y,x))) & exists z.(Species(z) & DifferentTaxonomicFamily(z)) & DevelopsInTrongPlaces(x,z) & SimilarEnvironmentalPressures(z))))", "all x.(ConvergentEvolution(x) -> (DevelopStudiesForSpecies(x) & DifferentTiranomicFamilies(x) & DifferentAreas(x) & SimilarEnvironmentalPressions(x)))", "all x.(ConvergentEvolution(x) -> (exists y.(Species(y,x) & DifferentTaxonomicFamily(x)) & DifferentPlaces(y) & DifferentEnvironmentalPressures(x))))", "all x.((Species(x) & TaxonomicFamilies(x) & DifferentFamilies(x)) -> ConvergentEvolution(x))", "all x y.((Species(x) & TaxonomicFamily(y) & TaxonomicFamily(x,y)) -> ConvergentEvolution(x))", "all x.(ConvergentEvolution(x) -> (exists y.(Species(y) & DifferentOrbit(y) & TaxonomyFamily(z)) & DevelopedAtEveningPlots(x,z) & SimilarEnvironmentOfPositions(x))))", "all x.((Species(x) & WithDifferentTaxonomicFamilies(x)) -> ConvergentEvolution(x))", "all x.(ConvergentEvolution(x) -> (exists y.(Species(y) & DifferentTaxonomicFamily(y)) & exists z.(SameEnvironment(z) & DifferentPlaces(z) & DifferentOccupations(z) & DevelopedIn(x,z))))"]}
{"id": "entailmentbank_validation_380", "nl": "an example of convergent evolution is two birds from different taxonomic families developing in separate environments under similar environmental pressures.", "fol": "", "prediction": ["all x y.((Bird(x) & Bird(y) & TaxonomicFamily(l) & TaxonomicFamily(w) & SeparateEnvironment(y) & UnderSimultaneousEnvironment(y)) -> ConvergentEvolution(x,y,l))", "all x.((Bird(x) & Bird(x) & DifferentTonomicFamily(x) & SeparateEnvironments(x)) -> ConvergentEvolution(x))", "all x y.((CanDo(x) & Bird(y) & TaxonomicFamily(z) & DifferentFamily(y) & DifferentEnvironments(z) & DevelopInSeparateEnvironments(y,z)) -> ConvergentEvolution(x,y,z))", "all x.(ConvergentEvolution(x) -> (NearlyCoveredEvolution(x) & exists y.(Bird(y) & TaxonomicFamily(y)) & DifferentTaxonomicalFamily(y) & DevelopingInSeparateEnvironments(x,y))))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(y) & Different(y)) -> ConvergentEvolution(x))", "all x.(ConvergentEvolution(x) -> (exists y.(Bird(y) & TaxonomicFamily(x,y)) & DevelopmentInSeparateEnvironments(x,y)))", "all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & TaxonomicFamily(z)) -> SimilarEnvironmentalPressures(x,y,z))", "all x.((Bird(x) & TaxonomicFamily(x) & TaxonomicFamily(x) & SeparateEnvironment(x) & SimilarEnvironment(x)) -> ConvergentEvolution(x))", "(exists x.(Bird(x) & SeparateEnvironments(x) & DifferentTaxonomicFamilies(x)) & SimilarEnvironmentalPressures(x))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(y) & TaxonomicFamily(z)) -> ConvergentEvolution(x))", "all x.((Bird(x) & TaxonomicFamily(x) & DifferentFamily(x)) -> ConvergentEvolution(x))", "all x.((BrunniformEvolution(x) & NestRidge(x) & TwoBirdsFromDifferentTremonomicFamilies(x) & SeparateEnvironnements(x) & SimilarEnvironmentalPressures(x)) -> ConvergentEvolution(x))", "all x.(CrudentEvolution(x) -> (SingleEnvironments(x) & CreatedInSeparateEnvironments(x)))", "all x.(ConvergentEvolution(x) -> (Bird(x) & DifferentTaxonomicFamilies(x) & SeparateEnvironments(x) & SimilarEnvironmentPressures(x)))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x) & DifferentFamily(x,y)) -> DevelopInSeparateEnvironment(x,y))", "all x y z.((Bird(x) & TaxonomicFamily(y) & DevelopmentSpace(z) & ForEnvironments(x,y,z)) -> ConvergentEvolution(x))"]}
{"id": "entailmentbank_validation_381", "nl": "winter is a kind of season.", "fol": "", "prediction": ["all x.(Winter(x) -> Season(x))", "all x.(Winter(x) -> Season(x))", "all x y.((Winter(x) & Season(y)) -> IsNickAndSeason(x,y))", "all x.(Winter(x) -> Season(x))", "all x.(Winter(x) -> Season(x))", "all x.(Winter(x) -> Season(x))", "all x.(Winter(x) -> Season(x))", "all x.(Winter(x) -> Season(x))", "all x.(Winter(x) -> Season(x))", "all x.(Winter(x) -> Season(x))", "all x.(Winter(x) -> Season(x))", "all x.((Winter(x) & Season(x)) -> Season(x))", "all x.(Winter(x) -> Season(x))", "all x.(Winter(x) -> Season(x))", "all x.(Winter(x) -> Season(x))", "all x.(Winter(x) -> Season(x))"]}
{"id": "entailmentbank_validation_382", "nl": "seasons cause change to the environment.", "fol": "", "prediction": ["all x.(Seasons(x) -> CauseChangeToEnvironment(x))", "all x y.((Season(x) & Environment(y)) -> Cause(x,y))", "all x.(Season(x) -> CausesChangeToEnvironment(x))", "all x.(Season(x) -> CausesChangeToEnvironment(x))", "all x y.((Season(x) & Environment(y)) -> CausesChange(x,y))", "all x y.((Season(x) & Environment(y)) -> CausesChange(x,y))", "all x y.((Season(x) & Environment(y)) -> CausesChange(x,y))", "all x.(Seasons(x) -> CausesChangeToEnvironment(x))", "all x.(Seasons(x) -> CausesChangeToEnvironment(x))", "all x.(Season(x) -> CausesChangeToEnvironment(x))", "all x.(Season(x) -> CausesChangeToEnvironment(x))", "all x.(Seasons(x) -> CausesCancellationToEnvironment(x))", "all x.(Season(x) -> CausesChangeToEnvironment(x))", "all x y.((Season(x) & Environment(y)) -> CausesChange(x,y))", "all x y.((Season(x) & Environment(y)) -> CausesChange(x,y))", "all x.(Season(x) -> CausesEnvironmentChange(x))"]}
{"id": "entailmentbank_validation_383", "nl": "the winter season can cause change to the environment.", "fol": "", "prediction": ["ALL x y.((WinterSeason(x) & Environment(y)) -> CanCauseChange(x,y))", "all x.(WinterSeason(x) -> CanCauseChangeToEnvironment(x))", "all x.(WinterSeason(x) -> CanCauseChangeToEnvironment(x))", "all x y.((WinterSeason(x) & Environment(y)) -> CanCauseChange(x,y))", "all x y.((WinterSeason(x) & EnvironmentChange(x)) -> CanCause(x,y))", "all x.(WinterSeason(x) -> CanCauseChangeToEnvironment(x))", "all x.(WinterSeason(x) -> CanCauseChangeToEnvironment(x))", "all x.(WinterSeason(x) -> CanCauseChangeToEnvironment(x))", "all x.((WinterSeason(x) & Environment(x)) -> CausesChange(x))", "all x.(HasWinnerSeason(x) -> CausesEnvironmentalChange(x))", "all x.(WinterSeason(x) -> CanCauseEnvironmentChange(x))", "all x.(WinterSeason(x) -> CanCauseChangeToEnvironment(x))", "all x y.((WinterSeason(x) & Environment(y)) -> CanCauseChange(x,y))", "all x.(WinterSeason(x) -> CanCauseChange(x,Environment))", "all x y.((WinterSeason(x) & Environment(y)) -> CanCauseChange(x,y))", "all x.(WinterSeason(x) -> ChangeToEnvironment(x))"]}
{"id": "entailmentbank_validation_384", "nl": "usually plants die or become dormant during the winter.", "fol": "", "prediction": ["all x.((Plant(x) & Winter(x)) -> (Die(x) | Dormant(x)))", "all x y.((Plant(x) & Winter(y)) -> (Die(x,y) | Dormant(x,y)))", "all x.(Plant(x) -> (Dies(x) | Dormant(x)))", "all x.(Plant(x) -> (Dies(x) | Dormant(x)))", "all x.(HasPlant(x) -> (Die(x) | Dormant(x)))", "all x.(Plant(x) -> (DeletesDuringWinter(x) | DormantDuringWinter(x)))", "all x.(Plant(x) -> (Dies(x) | Dormant(x)))", "all x.(Plant(x) -> (Death(x) | Dormant(x)))", "all x y.((Plant(x) & Winter(y)) -> (Dies(x,y) | Dormant(x,y)))", "all x.((Plant(x) & Winter(x)) -> (Die(x) | Dormant(x)))", "all x.(Plant(x) -> (Die(x) | Dormant(x)))", "all x.(Plant(x) -> (Die(x) | Dormant(x)))", "all x.((Plant(x) & Winter(x)) -> (Dies(x) | Dormant(x)))", "all x.((Plant(x) & Winter(x)) -> (Met(x) | Dormant(x))))", "all x.(Plant(x) -> (Deaths(x) | Dormant(x)))", "all x y.((Plant(x) & Winter(y)) -> (Die(x,y) | Dormant(x,y)))"]}
{"id": "entailmentbank_validation_385", "nl": "an example of a seasonal change is plants dying or becoming dormant in the winter.", "fol": "", "prediction": ["all x.(SeasonalChange(x) -> (PlantsDied(x) | Dormant(x)))", "all x.(SeasonalChange(x) -> (PlantsDeadInWinter(x) | PlantsBecomeDormantInWinter(x)))", "all x.(SeasonalChange(x) -> (PlantsDerming(x) | PlantsBecomingDormant(x)))", "all x.(SeasonalChange(x) -> (PlantsDeadInWinter(x) | PlantsDeadInWinter(x)))", "all x.((Plant(x) & (Destinates(x) | Dormant(x))) -> SeasonalChange(x))", "all x.((Plant(x) & (Deniving(x) | Dormant(x))) -> SeasonalChange(x))", "all x y.((SeasonalChange(x) & Plant(y) & Forwinter(x)) -> (Diesing(y) | Dormant(y)))", "all x y.((Plant(x) & Winter(y) & DiedIn(x,y)) | Dormant(x,y)) -> SeasonalChange(x))", "all x.((Plant(x) & (Daining(x) | Dormant(x))) -> SeasonalChange(x))", "all x.(SeasonalChange(x) -> (PlantsDieding(x) | PlantsDormant(x)))", "all x.(SeasonalChange(x) -> (PlantsDieting(x) | PlantsBecomeDormant(x)))", "all x.(Plant(x) -> ((DiedInWinter(x) | DormantInWinter(x))))", "all x.(SeasonalChange(x,Years,Vegetables) -> (DiesingOrDormant(x,Winter)))", "all x.((Plant(x) & (DeadPlant(x) | DormantPlant(x))) -> SeasonalChange(x))", "all x.(SeasonalChange(x) -> (PlantsDowningOrDormantInWinter(x)))", "all x.((Plant(x) & Windy(x)) -> (Derived(x) | Dormant(x)))"]}
{"id": "entailmentbank_validation_386", "nl": "an animal requires enough nutrients to survive.", "fol": "", "prediction": ["all x.((Animal(x) & RequiresEnoughNutrients(x)) -> Survives(x))", "all x.(Animal(x) -> RequiresEnoughNutrients(x))", "all x.((Animal(x) & RequiresEnoughNutrients(x)) -> Survives(x))", "all x.(Animal(x) -> RequiresEnoughNutrients(x))", "all x.((Animal(x) & RequiresElements(x)) -> Survives(x))", "all x.(Animal(x) -> RequiresEnoughNutrientsForSurvival(x))", "all x.((Animal(x) & RequiresEnoughNutrients(x)) -> Survives(x))", "all x.(Animal(x) -> RequiresEnoughNutrientsToSurvive(x))", "all x.((Animal(x) & RequiresEnoughNutrients(x)) -> Survives(x))", "all x.((Animal(x) & RequiresEnoughNutrientsToSurvive(x)) -> RequiresEnoughNutrients(x))", "all x.(Of(x) -> RequiresEnoughNutrientsToSurvive(x))", "all x.((Animal(x) & RequiresEnoughNutrients(x)) -> Survives(x))", "all x.((Animal(x) & EnoughNutrients(x)) -> Survives(x))", "all x.(Animal(x) -> RequiresEnoughNutrients(x))", "all x.((Animal(x) & RequiresEnoughNutrients(x)) -> Survives(x))", "all x y.((Animal(x) & Nutrients(y) & Requires(x,y)) -> Survive(x))"]}
{"id": "entailmentbank_validation_387", "nl": "eating food is used to get nutrients by animals.", "fol": "", "prediction": ["all x y.((EatingFood(x) & Animal(y)) -> GetsNutrients(x,y))", "all x y z.((EatingFood(x) & Animal(y) & Nutrients(z)) -> UsedFor(x,y,z))", "all x.(EatingFood(x) -> UsedToGetNutrients(x))", "all x y.((EatingFood(x) & Animal(y)) -> UsedToGetNutrients(x,y))", "all x y z.((EatingFood(x) & Animal(y) & Nutrients(z)) -> UsedToGoTo(x,y,z))", "all x y.((EatingFood(x) & Animal(y)) -> UsedToGetNutrientsBy(x,y))", "all x y.((EatsFood(x) & Animal(y)) -> GetsNutrientsFrom(x,y))", "all x y.((EatingFood(x) & Animal(y)) -> GetsNutrientsBy(x,y))", "all x y.((Animal(x) & EatingFood(x)) -> ObtainsNutrients(y,x))", "all x y z.((EatingFood(x) & Animal(y) & Nutrients(z)) -> UsedFor(x,y,z))", "all x y.((EatingFood(x) & Animal(y)) -> UsedToGetNutrients(x,y))", "all x y.((EatingFood(x) & Animal(y)) -> GetsNutrients(x,y))", "all x.(EatsFood(x) -> UsedToGrowNutrients(x))", "all x y.((EatingFood(x) & Animal(y)) -> UsedToGetNutrients(x,y))", "all x y.((Eatment(x) & Animal(y)) -> GetsNutrients(x,y))", "all x y.((EatingFood(x) & Animal(y)) -> UsedToGetNutrients(x,y))"]}
{"id": "entailmentbank_validation_388", "nl": "an animal needs to eat food for nutrients.", "fol": "", "prediction": ["all x.(Animal(x) -> NeedsToEatFood(x))", "all x.(Animal(x) -> NeedsToEatFoodForNutrients(x))", "all x.(Animal(x) -> NeedsWeather(x))", "all x.(Animal(x) -> NeedsToEat(x))", "all x.(Animal(x) -> NeedsFoodToEat(x))", "all x.(HasToEat(x) -> Nutrients(x))", "all x.(Animal(x) -> NeedsFoodForNutrients(x))", "all x.(Animal(x) -> Needs(x,Food))", "all x.(Dog(x) -> NeedsToEatFood(x))", "all x.(Animal(x) -> NeedsFoodForNutrients(x))", "all x.(Animal(x) -> NeedsFoodForNutrients(x))", "all x.(Animal(x) -> NeedsEatFoodForNutrients(x))", "all x.(Animal(x) -> NeedsNutrientsForEating(x))", "all x.(Animal(x) -> (NeedsEatFoodForNutrients(x) & HasNutrients(x)))", "all x.(Animal(x) -> NeedsToEatFood(x))", "all x.(Animal(x) -> NeedsToEatFoodForNutrients(x))"]}
{"id": "entailmentbank_validation_389", "nl": "plants are a source of food for animals.", "fol": "", "prediction": ["all x y z.((Plant(x) & Animal(y) & Animal(z)) -> SourceOfFood(x,y,z))", "all x.(Plant(x) -> SourceOfFood(x))", "all x.(Plant(x) -> SourceOfFoodForAnimals(x))", "all x.(Plant(x) -> SourceOfFood(x))", "all x.(Plant(x) -> SourceOfFood(x))", "all x y.((Plant(x) & Animal(y)) -> SourceOfFood(x,y))", "all x.(Plant(x) -> SourceOfFood(x))", "all x.(Plant(x) -> SourceOfFood(x))", "all x.(Plant(x) -> SourceOfFoodForAnimals(x))", "all x.(Plant(x) -> (SourceOfFood(x) & Animal(x)))", "all x.(Plant(x) -> FoodSource(x))", "all x.((Plant(x) & AnimalFoodSource(x)) -> FoodSourceFor(x,Animals))", "all x y.((Plant(x) & Animal(y)) -> SourceOfFood(x,y))", "all x.(Plant(x) -> SourceOfFood(x,Animals))", "all x.(Plant(x) -> FoodSource(x))", "all x y.((Plant(x) & Animal(y)) -> SourceOfFood(x,y))"]}
{"id": "entailmentbank_validation_390", "nl": "an animal can eat plants for nutrients.", "fol": "", "prediction": ["all x y.((Animal(x) & Plant(y)) -> CanEat(x,y))", "all x.(Animal(x) -> CanEatPlantsForNutrients(x))", "all x.(Animal(x) -> CanEatPlants(x))", "all x.(Animal(x) -> CanEatPlantsForNutrients(x))", "all x.(Animal(x) -> CanEatPlants(x))", "all x.(Animal(x) -> CanEatPlantsForNutrients(x))", "all x.(Animal(x) -> CanEatPlants(x))", "all x y.((Animal(x) & Plant(y)) -> CanEatForNutrients(x,y))", "all x y.((Animal(x) & Plant(y)) -> CanEat(x,y))", "all x.(Animal(x) -> CanEatPlants(x))", "all x.(Animal(x) -> HasPlants(x))", "all x.(Animal(x) -> CanEatPlantsForNutrients(x))", "all x y.((Animal(x) & Plant(y)) -> CanEat(x,y))", "all x.(Animal(x) -> CanEatPlantsForNutrients(x))", "all x.(Animal(x) -> CanEatPlantsForNutrients(x))", "all x.(Animal(x) -> CanEatPlants(x))"]}
{"id": "entailmentbank_validation_391", "nl": "an example of seasonal change is some animals' food dying in the winter.", "fol": "", "prediction": ["exists x.(Animal(x) & Food(x) & DiedInWinter(x))", "all x.(SeasonalChange(x) -> FoodDestination(x))", "all x.((Animal(x) & SeasonalChange(x)) -> DiesInWinter(x))", "all x.(SeasonalChange(x) -> (exists y.(Animal(y) & Winter(y) & EatsIn(z,w)))))", "all x.((AnimalFood(x) & DiedInWinter(x)) -> SeasonalChange(x))", "exists x.(AnimalFoodDeath(x) & WinterFormation(x))", "all x.(SeasonalChange(x) -> DiedInWinter(x))", "all x.(SeasonalChange(x) -> (AnimalFoodDiesingInWinter(x)))", "all x.(SeasonalChange(x) -> (Animals(x) & DiesInWinter(x)))", "all x y.((Animal(x) & SeasonalChange(x)) -> DiesInWinter(x,y))", "all x y.((Animal(x) & Winter(y)) -> DiesIn(x,y))", "all x.(SeasonalChange(x) -> DiesInWinter(x))", "all x.(SeasonalChange(x) -> (AnimalFoodDeadingInWinter(x)))", "exists x.(AnimalsFoodDealingDuringWinter(x))", "all x.(SeasonalChange(x) -> (AnimalsFeedDiesingInWinter(x)))", "all x.(SeasonalChange(x) -> (AnimalFoodDiesingInWinter(x)))"]}
{"id": "entailmentbank_validation_392", "nl": "an example of preparing is storing something for use later.", "fol": "", "prediction": ["all x.(Prepares(x) -> StoresForUseLater(x))", "all x.(Processing(x) -> StoresForUseFollowing(x))", "all x.((Preparing(x) & StoresForUseLater(x)) -> PreparesForUse(x))", "all x.((ExempleOfPreparing(x) & StoresForUseLater(x)) -> ForUseLater(x))", "all x y.((Preparing(x) & Stores(x,y)) -> ForUseLater(x))", "all x.(PreparingForUse(x) -> StoresForUse(x))", "all x.(Preparing(x) -> Stores(x,z))", "all x.(Organizing(x) -> StoresAndUse(x))", "all x y.((Preparing(x) & Storage(y)) -> UsedForNearerUse(x,y))", "all x.(Preparing(x) -> Store(x))", "all x.(Preparing(x) -> StoresForUse(x))", "all x.((Already(x) & StoresForUse(x)) -> PreparesForUse(x))", "all x.((Releasing(x) & StoresForUseLater(x)) -> Prepares(x))", "all x.((Preparing(x) & Stores(x)) -> UsesLater(x))", "all x.((Preparing(x) & StoresForUse(x)) -> InDesign(x))", "all x.((Preparing(x) & StoresForUseLater(x)) -> Prepared(x))"]}
{"id": "entailmentbank_validation_393", "nl": "if an animal relies on plants for food then that animal must store enough food to last through the winter.", "fol": "", "prediction": ["all x y.((Animal(x) & ReliesOnPlants(x,y)) -> StoresEnoughFoodForWinter(x,y))", "all x.((Animal(x) & (ReliesOnPlants(x) | StoresEnoughFood(x))) -> LastsThroughWinter(x))", "all x.((Animal(x) & ReliesOnPlantsForFood(x)) -> StoresEnoughFood(x))", "all x.(ReliesOnPlantsForFood(x) -> StoresEnoughFood(x))", "all x y.((Animal(x) & ReliesOnPlants(x)) -> StoresEnoughFoodForWinter(x))", "all x.(ReliesOnPlants(x) -> StoresEnoughFood(x))", "all x y.((Animal(x) & Animal(y) & ReliesOnPlants(x,y)) -> StoresEnoughFood(x,y))", "all x.((Animal(x) & ReliesOnPlants(x)) -> StoresEnoughFoodToShortenWinter(x))", "all x.(ReliesOnPlantsForFood(x) -> StoresEnoughFoodToLastWinter(x))", "all x.((Animal(x) & ReliesOnPlants(x)) -> StoresEqualFoodToLastThroughoutWinter(x))", "all x y.((Animal(x) & ReliesOnPlants(x,y)) -> StoresEnoughFoodToLadiesWinter(x,y))", "all x.((Animal(x) & ReliesOnPlants(x)) -> StoresEnoughFood(x))", "all x.((Animal(x) & ReliesOnPlantsForFood(x)) -> StoresEnoughFoodForWinter(x))", "all x y.((Animal(x) & ReliesOnPlants(x,y) & Winter(y)) -> StoresEnoughFoodForWinter(x,y))", "all x.(ReliesOnPlants(x) -> StorageEnoughFoodForWinter(x))", "all x.((Animal(x) & Plants(x)) -> StoresEnoughFood(x))"]}
{"id": "entailmentbank_validation_394", "nl": "an example of preparing is an animal storing food to last through the winter.", "fol": "", "prediction": ["all x y.((Animal(x) & StoresFood(x,y)) -> WillLastThroughWinter(x))", "all x.(Preparing(x) -> exists y.(Animal(y) & StoresFood(y,x)))", "all x.(Preparing(x) -> (Animal(x) & StoresFood(x) & LastsThroughWinter(x)))", "all x.((Animal(x) & StoresFood(x,y)) -> Prepares(x))", "all x.((Animal(x) & StoresFood(x)) -> PreparesForWinter(x))", "all x.(Preparing(x) -> (AnimalStoresFood(x) & LastsThroughWinter(x)))", "all x.(Preparing(x) -> (AnimalStoring(x) & LastsThroughoutWinter(x)))", "all x.(Preparing(x) -> (Animal(x) & StoresFood(x) & LastsThroughoutWinter(x)))", "all x y.((Animal(x) & Winter(y)) -> StoresFood(x,y))", "all x.((Animal(x) & StoresFood(x) & LastsThroughWinter(x)) -> Preparing(x))", "all x y.((Animal(x) & Winter(y)) -> StoresFood(x,y))", "all x.((Animal(x) & StoresFood(x) & DuringWinter(x)) -> PreparesForWinter(x))", "all x.((Animal(x) & StoresFood(x)) -> PreparingForWinter(x))", "all x y.((Animal(x) & Winter(y)) -> (StoresFood(x,y) & LastsThrough(x,y)))", "all x.((Animal(x) & StoresFood(x)) -> ThroughWinter(x))", "all x y.((Animal(x) & Winter(y)) -> StoresFood(x,y))"]}
{"id": "entailmentbank_validation_395", "nl": "an example of preparing for seasonal change is an animal storing food for the winter.", "fol": "", "prediction": ["all x.((Animal(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x y.((Animal(x) & Food(y) & StoresForWinter(x,y)) -> PreparingForSeasonalChange(x))", "all x.(PreparesForSeasonalChange(x) -OrganismStoringFoodForWinter(x))", "all x y.((Animal(x) & WinterStorage(y)) -> VariousForSeasonalChange(x,y))", "all x.(PreparesForSeasonalChange(x) -> (AnimalStoresFoodForWinter(x)))", "all x.((Animal(x) & StocksFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.(PreparingForSeasonalChange(x) & AnimalStoresFoodForWinter(x))", "all x.((Animal(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.((Animal(x) & StoresFood(x,Warm)) -> PreparesForSeasonalChange(x))", "all x.(PreparingForSeasonalChange(x) -> (AnimalStoresFood(x) & ForWinter(x)))", "all x.((Animal(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.(SeasonalChange(x) -> StoresFoodForWinter(x))", "all x.((Animal(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.((Animal(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.((Animal(x) & StoresFoodForWinter(x)) -> PreparesSeasonalChange(x))", "all x.((Animal(x) & StoresFoodForWinter(x)) -> PreparingForSeasonalChange(x))"]}
{"id": "entailmentbank_validation_396", "nl": "a squirrel is a kind of animal.", "fol": "", "prediction": ["all x.(Squirrel(x) -> Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "exists x.(Squirrel(x) & Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "all x.(Sparrow(x) -> Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "exists x.(Squirrel(x) & Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "all x.(Squirrel(x) -> Animal(x))"]}
{"id": "entailmentbank_validation_397", "nl": "an example of preparing for seasonal change is a squirrel storing food for the winter.", "fol": "", "prediction": ["all x.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.(FoodPreparation(x) -SquirrelStorage(x))", "all x y.((Squirrel(x) & StoresFood(x,y)) -> SeasonalChangePrepare(x,y))", "all x.((Squirrel(x) & StoresFood(x,Winter)) -> PreparesForSeasonalChange(x))", "all x.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.((Squirrel(x) & StoringFood(x)) -> PreparesForSeasonalChange(x))", "all x y.((Squirrel(x) & Winter(y)) -> PreparesForSeasonalChange(x,y))", "all x y.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.(PreparingForSeasonalChange(x) -> (Squirrel(x) & StoresFood(x,winter)))", "all x.((Squirrel(x) & StoresFood(x) & Winter(x)) -> PreparesForSeasonalChange(x))", "all x.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.(PrepareForSeasonalChange(x) -> (Squirrel(x) & StoresFoodForWinter(x)))", "all x y.((Squirrel(x) & WinterViolet(y)) -> PreparesForSeasonalChange(x,y))"]}
{"id": "entailmentbank_validation_398", "nl": "nut is a kind of food.", "fol": "", "prediction": ["all x.(Nut(x) -> Food(x))", "all x.(Nut(x) -> Food(x))", "all x.(Nut(x) -> Food(x))", "all x.(Nut(x) -> Food(x))", "all x.(Nutty(x) -> Food(x))", "all x.(Nut(x) -> Food(x))", "all x.(Nut(x) -> Food(x))", "all x.(Nut(x) -> Food(x))", "all x.(Nut(x) -> Food(x))", "all x.(Nutty(x) -> Food(x))", "all x.(Nut(x) -> Food(x))", "all x.(Nut(x) -> Food(x))", "all x.(Nut(x) -> Food(x))", "all x.(Nut(x) -> Food(x))", "all x.(Nut(x) -> Food(x))", "all x.(Nut(x) -> Food(x))"]}
{"id": "entailmentbank_validation_399", "nl": "an example of preparing for seasonal change is an squirrel storing nuts for the winter.", "fol": "", "prediction": ["all x y.((Squirrel(x) & StoresNuts(y) & Winter(y)) -> PreparesForSeasonalChange(x,y))", "all x.((Squirrel(x) & StoresNutsForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.(AlternativeForSeasonalChange(x) -> (Squirrel(x) & StoresNuts(x) & ForWinter(x)))", "all x.((Squirrel(x) & StoresNutsForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.(PreparingForSeasonalChange(x) -> (Squirrel(x) & StoresNutsForWinter(x)))", "all x.((Snail(x) & StoresNutsForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.(Snake(x) -> StoresNutsForWinter(x))", "all x.((Squash(x) & StoresNutsForWinter(x)) -> PreparesFastForSeasonalChange(x))", "all x.((Squirrel(x) & StoresNuts(x) & WinterWinterWinter(x)) -> PreparedForSeasonalChange(x))", "all x y.((Swimming(x) & Snowy(y)) -> StoresNuts(x,y))", "all x y.((Squirrel(x) & Squirrel(y) & StoresNutsForWinter(x,y)) -> PreparesForSeasonalChange(x))", "all x y.(SoilSquash(x) & StoresNuts(y))", "all x y z.((Squash(x) & Sage(y) & Winter(z)) -> StoresNutsFor(x,y,z))", "all x.(Squirrel(x) -> (StoresNuts(x,winter)))", "all x.((Squirrel(x) & StoresNutsForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.((Squirrel(x) & StoresNutsForWinter(x)) -> PreparesForSeasonalChange(x))"]}
{"id": "entailmentbank_validation_400", "nl": "an animal requires warmth for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.(AnimalRequiresWarmthForSurvival(x) -> RequiresWarmth(x))", "all x.(RequiresWarmthForSurvival(x) -> Animal(x))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.(RequiresWarmth(x) -> Survival(x))", "All x.((Animal(x) & RequiresWarmth(x)) -> Survival(x))", "all x.(Animal(x) -> RequiresWarmthForSurvation(x))", "all x.(Animal(x) -> RequiresWarmth(x))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.(Animal(x) -> RequiresWarmth(x))", "all x.(Animal(x) -> RequiresWarmth(x))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.(RequiresWarmth(x) -> Survival(x))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))"]}
{"id": "entailmentbank_validation_401", "nl": "winter has cold temperatures / weather.", "fol": "", "prediction": ["(ColdTemperatures(winter) & ColdWeather(winter))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Wine(x) -> (ColdTemperatures(x) & ColdWeather(x)))", "all x.(Winter(x) -> (ColdTemperatures(x) & ColdWeather(x)))", "all x.(Winter(x) -> (ColdTemperatures(x) & ColdWeather(x)))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> (ColdTemperatures(x) & ColdWeather(x)))", "all x y.((Winter(x) & ColdTemperatures(y)) -> HasWeather(x))", "all x y.((Winter(x) & ColdTemperatures(y)) -> ColdWeather(x))", "all x.(WINTER(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> (ColdTemperatures(x) & ColdWeather(x)))", "all x.(Winter(x) -> (ColdTemperatures(x) | ColdWeather(x)))", "all x y.((Winter(x) & ColdTemperatures(y)) -> ColdWeather(x))", "all x.(Winter(x) & ColdTemperatures(x) & ColdWeather(x))"]}
{"id": "entailmentbank_validation_402", "nl": "some animals must move to warmer climates in the winter.", "fol": "", "prediction": ["exists x.(Animal(x) & MovesToWarmerClimates(x))", "exists x.(Animal(x) & MigratesToWarmerClimates(x))", "exists x.(Animal(x) & MovesToWarmerClimates(x))", "exists x.(Animal(x) & MovesToWarmerClimates(x,Winter))", "exists x.(Animal(x) & MovesToWarmerClimateInWinter(x))", "exists x.(Animal(x) & MoveToWarmerClimatesInWinter(x))", "exists x.(Animal(x) & MovesToWarmerClimates(x))", "exists x.(Animal(x) & Winter(y) & MovesToWarmerClimates(x,y))", "exists x.(Animal(x) & MovesToWarmerClimates(x))", "exists x y z.(Animal(x) & WarmerClimate(y) & Winter(z) & MovesTo(x,y))", "exists x.(Animal(x) & MovesToWarmerClimates(x) & Winter(x))", "exists x.(Animal(x) & MovesToWarmerClimates(x))", "exists x.(Animal(x) & MovesToWarmerClimates(x))", "exists x.(Animal(x) & MustMoveToWarmerClimatesInWinter(x))", "exists x.(Animal(x) & Winter(y) & MustMoveToWarmerClimates(x,y))", "exists x y.(Animal(x) & Winter(y) & (MoveToWarmerClimates(x,y) | MoveToWarmerClimates(x,y)))"]}
{"id": "entailmentbank_validation_403", "nl": "migration is when animals move themselves from a cooler climate to a warmer climate for the winter.", "fol": "", "prediction": ["all x.(Migration(x) -> (AnimalsMoveFromKillerToWarmerClimate(x) & Winter(x)))", "all x y.((Animal(x) & ColderClimate(y) & WarmerClimate(x,y)) -> MOVESEMEATO(x,y))", "all x y z.((Animal(x) & CoolerClimate(y) & WarmerClimate(z)) -> MovesToForWinter(x,y,z))", "all x.(Migratory(x) -> ShiftingAnimalsFromCoolerClimateToWarmerClimateForWinter(x))", "all x.(Migration(x) -> (AnimalsMove(x) & fromColderClimateToWarmerClimate(x)))", "all x y.((Animal(x) & Climate(y) & MovesFromToWarmerClimate(x,y)) -> MigratationForWinter.(x))", "all x y.((Animal(x) & CoolerClimate(y) & WarmerClimate(y)) -> MigrationForWinter(x))", "all x y.(WinterMigration(x) -> (AnimalsMoveFromCoolerClimateToWarmerClimate(x)))", "all x y.((Animal(x) & Climate(y)) -> MovesFromColderToWarmerForWinter(x))", "all x y z.((Animal(x) & CoolerClimate(y) & WarmerClimate(z)) -> MigratesForWinter(x,y,z))", "all x y.((AnimalMigration(x) & CoolerClimate(y) & WarmerClimate(x)) -> MovesFromForMigrationForWinter(x,y))", "all x y.((Animal(x) & CoolerClimate(y)) -> (Migration(x,y) & WarmerClimate(x,y)))", "all x.(Migration(x) -> (AnimalsMoveFromColderClimateToWarmerClimate(x) & Winter(x)))", "all x.(Migration(x) -> (AnimalsMoveFromClimateToWarmerClimate(x) & ForWinter(x)))", "all x y.((Animal(x) & CoolerClimate(y) & WarmerClimate(y)) -> MoveForWinter(x,y))", "all x y z.((AnimalMigration(x) & -ColderClimate(y) & WarmerClimate(z)) -> MoveDownForWinter(x,y,z))"]}
{"id": "entailmentbank_validation_404", "nl": "an example of migration is moving to a warmer climate in the winter.", "fol": "", "prediction": ["all x.(Migratation(x) -> MoveToWarmerClimateInWinter(x))", "all x.(Migration(x) -> MovesToWarmerClimate(x))", "all x.(Migration(x) -> (MovingToWarmerClimate(x) & Winter(x)))", "all x.(Migration(x) i.E.Winter(i) & WarmerClimate(i))", "all x.(Migration(x) -> (MovingToWarmerClimateInWinter)))", "all x.(Migratation(x) -> (MovesToWarmerClimateInWinter(x)))", "all x.((Movement(x) & WarmerClimate(x) & Winter(x)) -> Migration(x))", "all x.(Migratation(x) -> (MovingToWarmerClimate(x) & Winter(x)))", "all x y.((Migrator(x) & Winter(y)) -> MovingToWarmerClimate(x,y))", "all x.(Migrate(x) -> MovesToWarmerClimateInWinter(x))", "all x.((Migrator(x) & WarmerClimate(x)) -> WinterMigration(x))", "all x.(MigrateOn(x) -> (MovingToWarmerClimateInWinter(x)))", "all x y.((Migratation(x) & Winter(y) & WarmerClimate(x,y)) -> MigrationIn(x,y))", "all x.(Migration(x) -> (Movement(x,winter) & WarmerClimate(w)))", "all x.(Migration(x) -> (MovingToWarmerClimate(x) & Winter(x)))", "all x y z.((Migration(x) & Winter(y) & WarmerClimate(z)) -> Migrate(x,y))"]}
{"id": "entailmentbank_validation_405", "nl": "some birds fly south for the winter.", "fol": "", "prediction": ["exists x.(Bird(x) & FlySouth(x))", "exists x.(Bird(x) & FlySouthForWinter(x))", "exists x.(Bird(x) & FlowsSouthForWinter(x))", "exists x.(Bird(x) & Fly(x,y))", "exists x.(Bird(x) & FlySouthForWinter(x))", "exists x.(Bird(x) & FlySouth(x))", "exists x.(Bird(x) & FlySouthForWinter(x))", "exists x.(Bird(x) & FlySouthForWinter(x))", "exists x.(Bird(x) & FliesSouthForWinter(x))", "exists x.(Bird(x) & FliesSouth(x))", "exists x.(Bird(x) & FlySOUTH(x))", "exists x.(Bird(x) & FlySouthForWinter(x))", "exists x.(Bird(x) & FlySouth(x))", "exists x.(Bird(x) & FlySouth(x))", "exists x.(Bird(x) & FlySouth(x))", "exists x.(Bird(x) & FlySouthForWinter(x))"]}
{"id": "entailmentbank_validation_406", "nl": "an example of migration is birds flying south in the winter.", "fol": "", "prediction": ["all x.((Bird(x) & FlyingSouth(x)) -> Migration(x))", "all x.((Bird(x) & FlyingSouthInWinter(x)) -> Migration(x))", "all x.((Bird(x) & FlyingSouthInWinter(x)) -> Migration(x))", "all x.((Bird(x) & FlyingSouth(x,winter)) -> Migratation(x))", "all x.((Bird(x) & FlyingSouthInWinter(x)) -> Migratory(x))", "all x.(Migratation(x) -> (Bird(x) & FloatsSouthInWinter(x)))", "all x.((Bird(x) & FlysSouth(x)) -> Migration(x))", "all x.(Migration(x) -> (BirdsFlyingSouthInWinter(x)))", "(exists x.(Bird(x) & FlyingSouth(x)))", "exists x.(Migration(x) & Bird(x) & FlyingSouth(x))", "all x.(Migration(x) -> (BirdsFlyingSouthInWinter(x)))", "all x y.((Bird(x) & Bird(y)) -> (FlyingSouthInWinter(y,x)))", "all x.(Migration(x) -> (BirdsFlyingSouth(x,winter)))", "all x.((Bird(x) & FlyingSouth(x)) -> Migratation(x))", "all x.(Migrament(x) -> (Birds(x) & FlySouthInWinter(x)))", "all x.(Migration(x) -> (Birds(x) & FlyingSouth(x)))"]}
{"id": "entailmentbank_validation_407", "nl": "migration is a kind of adaptation.", "fol": "", "prediction": ["all x.(Migration(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "all x.(Migratory(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "all x y.((Migratory(x) & Adaptation(y)) -> Is(x,y))", "all x.(Migration(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "all x:(Migration(x) -> Adaptation(x))"]}
{"id": "entailmentbank_validation_408", "nl": "an example of an adaptation is birds migrating south in the winter.", "fol": "", "prediction": ["exists x.(Adaptation(x) & Bird(x) & MigratesSouth(x))", "all x.(Adaptation(x) -> MigratingSouthInWinter(x))", "all x.(Adaptation(x) -> (BirdsMigratingSouth(x) & Winter(x)))", "all x.((Bird(x) & MigratingSouthInWinter(x)) -> Adaptation(x))", "all x.(Adaptation(x) -> (BirdsMigratingSouthInWinter(x)))", "all x.((Bird(x) & MigratingSouthInWinter(x)) -> Adaptation(x))", "all x y.((Bird(x) & SouthWinter(y)) -> Adaptation(x,y))", "all x.(Adaptation(x) -> (BirdsMigratingSouthInWinter(x)))", "all x.(Adaptation(x) -> (Bird(x) & MigratingSouth(x)))", "all x.(Adaptation(x) -> (Birds(x) & MigratesSouthInWinter(x)))", "all x y z.((Bird(x) & SouthwestMoon(y) & Winter(z)) -> MigratesSouth(x,y,z))", "all x.(Adaptation(x) -> (BirdsMigratingSouthInWinter(x)))", "all x.((Bird(x) & MigratingSouthInWinter(x)) -> Adaptation(x))", "all x.(Adaptation(x) -> MigratingSouthInWinter(x))", "all x.(Adaptation(x) -> (BirdsMigratesSouth(x) & Winter(x)))", "all x y.((Bird(x) & MigratingSouthInWinter(x)) -> Adaptation(y))"]}
{"id": "entailmentbank_validation_409", "nl": "wasp's stinger contains poison.", "fol": "", "prediction": ["all x.(WaspStinger(x) -> ContainsPoison(x))", "all x.(WaspStinger(x) -> ContainsPoison(x))", "all x.(Stinger(x) -> WollenPoison(x))", "all x.(HasWaster(x) -> ContainsPoison(x))", "all x.(Wasp(x) -> ContainsPoison(x))", "all x.(Wasp(x) -> ContainsPoison(x))", "all x.(Wasp(x) -> ContainsPoison(x))", "all x.(WaspStinger(x) -> ContainsPoison(x))", "all x.(Wasp(x) -> ContainsPoison(x))", "all x.(WaspsStinger(x) -> ContainsPoison(x))", "all x y.((Wasp(x) & Stinger(y)) -> ContainsPoison(x,y))", "all x.(Stinger(x) -> ContainsPoison(x))", "all x.((WaspStinger(x) & ContainsPoison(x)) -> ContainsPoison(x))", "all x.(WaspStinger(x) -> ContainsPoison(x))", "all x.(WaspStinger(x) -> ContainsPoison(x))", "all x.(WaspStinger(x) -> ContainsPoison(x))"]}
{"id": "entailmentbank_validation_410", "nl": "poison causes harm to living things.", "fol": "", "prediction": ["all x y.((Poison(x) & LivingThing(y)) -> CausesHarmTo(x,y))", "all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x y.((Poison(x) & LivingThing(y)) -> CausesHarm(x,y))", "all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x y z.((Poison(x) & LivingThing(y) & Product(z)) -> CausesHarm(x,y,z))", "all x y.((Poison(x) & LivingItem(y)) -> CausesHarmTo(x,y))", "all x y.((Poison(x) & LivingThing(y)) -> CausesHarmTo(x,y))", "all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x y.((Poison(x) & LivingThing(y)) -> CausesHarm(x,y))", "all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x y.((Poison(x) & LivingThing(y)) -> CausesHarm(x,y))"]}
{"id": "entailmentbank_validation_411", "nl": "a wasp's stinger can be used to cause harm to living things.", "fol": "", "prediction": ["all x.(WaspsStinger(x) -> CausesHarmForLivingThings(x))", "all x.(WaspStinger(x) -> CausesHarmToLivingThings(x))", "all x y.((WaspsStinger(x) & LivingThing(y)) -> CausesHarm(x,y))", "all x y.((WaspsStinger(x) & LivingThing(y)) -> CausesHarmTo(x,y))", "all x.((WaspStinger(x) & CausesHarm(x,livingThings)) -> CanCause(x,livingThings))", "all x.((Stinger(x) & Wasp(x)) -> CausesHarmToLivingThings(x))", "all x.((WaspStinger(x) & CanCauseHarmToLivingThings(x)) -> CanCauseHarmToLivingThings(x))", "all x y.((Sstinger(x) & Wasp(y)) -> CausesHarmToLife(x,y))", "all x.(Stinger(x) -> CanCauseHarmToLivingThings(x))", "all x y.((WaspStinger(x) & LivingObject(y)) -> CanFactureHarm(x,y))", "all x y z.((WaspStinger(x) & LivingThing(y) & LivingThing(z)) -> CanBeUsedToCauseHarm(x,y,z))", "all x y.((Stinger(x) & Wasp(y)) -> CanCauseHarm(x,y))", "all x y.((WaspsStinger(x) & LivingProduct(y)) -> CausesHarmTo(x,y))", "all x.((WaspStinger(x) & CausesHarmToLivingThings(x)) -> CanBeUsedToCauseHarmToLivingThings(x))", "all x.(WaspStinger(x) -> CanCauseHarmToLivingThings(x))", "all x y.((WaspsStinger(x) & LivingThing(y)) -> CausesHarm(x,y))"]}
{"id": "entailmentbank_validation_412", "nl": "harming is a kind of defense.", "fol": "", "prediction": ["all x.(HasDefense(x) -> Harms(x))", "all x.(HasHazard(x) -> Defense(x))", "All x.(Bearing(x) -> Defense(x))", "all x.(HasDefense(x) -> Harming(x))", "all x.(Harming(x) -> Defense(x))", "all x y.(Injuring(x) -> Defense(x))", "all x.(Harming(x) -> Defense(x))", "all x.(HasDefense(x) -> Harming(x))", "all x.(Hazoning(x) -> Defense(x))", "all x.(Has(x,y) -> Defense(y))", "all x.(Harming(x) -> Defense(x))", "all x.(Harming(x) -> Defense(x))", "all x.(Harming(x) -> Defense(x))", "all x.(Harming(x) -> Defense(x))", "all x.(Harming(x) -> Defense(x))", "all x.(Harming(x) -> Defense(x))"]}
{"id": "entailmentbank_validation_413", "nl": "a stinger is used for defense by a wasp.", "fol": "", "prediction": ["all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "exists x y.(Stinger(x) & Wasp(y) & UsedForDefense(x,y))", "all x y z.((Stinger(x) & Wasp(y) & Wasp(z)) -> UsedForDefense(x,y))", "all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x y z.((Stinger(x) & Wasp(y) & CanDefend(z)) -> UsedBy(x,y))", "all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x.(Stinger(x) -> UsedForDefense(x,wasp))", "all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x y z.((Stinger(x) & Wasp(y) & Wasp(z)) -> UsedForDefense(x,y,z))", "all x.(Stinger(x) -> UsedForDefenseByWasp(x))", "all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))"]}
{"id": "entailmentbank_validation_414", "nl": "color is a property of an organism that describes what it looks like.", "fol": "", "prediction": ["all x.(Color(x) -> (PropertyOfOrganism(x) & DeclinesLook(x)))", "all x.(Color(x) -> (DescribedByOrganism(x) & DescribesLooks(x)))", "all x y.((Organism(x) & Organism(y)) -> ColorPropertyDecribesAppearance(x,y))", "all x y.((Organism(x) & Organism(y)) -> ColorPropertyDescription(x,y))", "all x.(Color(x) -> (Organism(x) & DefinesAppearance(x)))", "all x y.((Organism(x) & Organ(y)) -> DepictsLooksBetween(x,y))", "all x.(Color(x) -> (DescribesLooksAlike(x) & Organism(x)))", "all x.(Color(x) -> (DepictsLook(x) & Organism(x)))", "all x y z.((Color(x) & Organism(y) & Animal(z)) -> DefinesLooksAlike(x,y,z))", "all x y.((Organism(x) & Organism(y) & Color(x,y)) -> DepictsLooking(x,y))", "all x y.((Organism(x) & Organism(y)) -> DefinesLooks(x,y))", "all x y.((Organism(x) & Organ(y)) -> DescriptionOfLooksAlike(x,y))", "all x y.((Organism(x) & Color(y)) -> DescribedProperty(x,y))", "all x.(Color(x) -> (Organism(x) & DescriptionOfLooksAlike(x)))", "all x.(ColorProperty(x) -> DescribesLooksAlike(x))", "all x.(Colour(x) -> (SpecialPropertyOfOrganism(x) & DescriptionAbout(x)))"]}
{"id": "entailmentbank_validation_415", "nl": "an example of camouflage is an organism looking like its environment.", "fol": "", "prediction": ["all x.((Organism(x) & LooksAlikeEnvironment(x)) -> Camouflage(x))", "all x.(Camouflage(x) -> (OrganismLookingAlikeEnvironment(x)))", "all x.((Organism(x) & LooksAlikeEnvironment(x)) -> Camouflage(x))", "all x.((Organism(x) & LooksAlikeEnvironment(x)) -> Camouflage(x))", "all x.((Organism(x) & LooksAlikeEnvironment(x)) -> Camouflage(x))", "all x.((Organism(x) & LooksAlikeEnvironment(x)) -> Camouflage(x))", "all x.(Camouflage(x) -> LooksAlikeEnvironment(x))", "all x.(Camouflage(x) -> LooksAndLooksCamouflage(x))", "all x.((Organism(x) & LooksAlikeEnvironment(x)) -> Camouflage(x))", "all x.(Camouflage(x) -> isLookingAlikeEnvironment(x))", "all x.(Chamouflage(x) -> LooksAlikeEnvironment(x))", "all x.(Cambolage(x) -> LooksAlikeEnvironment(x))", "all x.(Camored(x) -> LooksAlikeEnvironment(x))", "all x.(CamouflageExemple(x) -> LooksAlikeEnvironment(x))", "all x.(Camouflage(x) -> (OrganismLookingAlikeEnvironment(x)))", "all x.(Commouflage(x) -> LooksAlikeEnvironment(x))"]}
{"id": "entailmentbank_validation_416", "nl": "an example of camouflage is organism having the same color as its environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> HasSameColorAsEnvironment(x))", "all x.(Camouflage(x) -> (Organism(x) & HasSameColor(x,Environment)))", "all x.((Organism(x) & SameColorEnvironment(x)) -> Camouflage(x))", "all x.((Organism(x) & SameColor(x)) -> Camouflage(x))", "all x.((Organism(x) & Camouflage(x)) -> SameColor(x))", "all x.((Organism(x) & Camouflage(x)) -> HasCamoolSameColorAsEnvironment(x))", "all x.(Chamouflage(x) -> (OrganismEqualColor(x) & HavingEqualEnvironment(x)))", "all x.(CamouflageArticle(x) -> (Organism(x) & SameColorAsEnvironment(x)))", "all x.(Camouflage(x) -> (Organism(x) & SameColor(x) & SameEnvironment(x)))", "all x.((Organism(x) & SameColor(x,Ecosystem)) -> Camouflage(x))", "all x.(Camouflage(x) -> SameColorAsEnvironment(x))", "all x.(Camouflage(x) -> SameColorAsEnvironment(x,y))", "all x.((Organism(x) & Camouflage(x)) -> SameColorEnvironment(x))", "all x.(ColorDamouflage(x) -> (OrganismSameColor(x) & Environment(x)))", "all x.((Organism(x) & Environment(x)) -> SameColor(x))", "all x.(Camouflage(x) -> (OrganismHasSameColorAsEnvironment(x)))"]}
{"id": "entailmentbank_validation_417", "nl": "if an animal's skin is a certain color then that animal is that color.", "fol": "", "prediction": ["all x.((Animal(x) & SkinNumberColour(x)) -> Color(x))", "all x y.((Animal(x) & SkinColor(y) & Certain(y)) -> Color(x,y))", "all x.((Animal(x) & SkinColor(x)) -> Color(x))", "all x.((Animal(x) & SkinColor(x)) -> Color(x))", "all x.((Animal(x) & SkinColor(x)) -> ColorColour(x))", "all x.((Animal(x) & SkinColor(x,y) & CertainColor(y)) -> Color(x,y))", "all x.((Animal(x) & SkinColour(x,2)) -> ColorComparison(x,2))", "all x y.((Animal(x) & Animal(y) & SkinColor(x,y)) -> Color(x,y))", "all x.((Animal(x) & HasSkin(x,y) & CertainColor(y)) -> Color(x,y))", "all x.((Animal(x) & SkinColor(x)) -> Color(x))", "all x.((Animal(x) & SkinColor(x,y)) -> Color(x,y))", "all x y.((Animal(x) & SkinCreation(y) & CertainColor(x,y)) -> ColorCode(x,y))", "all x.((Animal(x) & SkinColor(x)) -> Color(x))", "all x y.((Animal(x) & Skin(y) & Color(x,y)) -> IdentifiesColor(x,y))", "all x y.((Animal(x) & Skin(y) & CertainColor(x,y)) -> Color(x,y))", "all x.((Animal(x) & SkinColor(x,y)) -> Color(x,y))"]}
{"id": "entailmentbank_validation_418", "nl": "an example of camouflage is an animal's skin having the same color as its environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (AnimalSkinDecidingColour(x) & Environment(x)))", "all x y.((Animal(x) & Environment(y) & HasSameColor(x,y)) -> Camouflage(x,y))", "all x.((AnimalSkin(x) & SameColorOrEnvironment(x)) -> Camouflage(x))", "all x.((Animal(x) & Camouflage(x)) -> SameColorSkin(x,Elements))", "all x.(Camouflage(x) -> SkinInAnimal(x))", "all x.(Camouflage(x) -> (AnimalSkinNumber(x) & SameColor(x,Environment)))", "all x.(Cambolage(x) -> SameColor(x))", "all x y.((Animal(x) & Skin(y)) -> SameColorThanEnvironment(y))", "all x.((Animal(x) & Camouflage(x)) -> SameColorAsEnvironment(x))", "all x.(Camouflage(x) -> (AnimalSkin(x) & SameColorAsEnvironment(x)))", "all x y.((Animal(x) & Skin(y) & HasSameColor(x,y)) -> Camouflage(x,y))", "all x.(Camouflage(x) -> (AnimalSkin(x) & ColorsSame(x,Environment)))", "all x.(Chamouflage(x) -> SameColorSkinAsEnvironment(x))", "all x.((Animal(x) & Camouflage(x)) -> SameColorSkinAsEnvironment(x))", "all x y z.((Animal(x) & Skin(y) & Environment(z)) -> SimilarColorSameCell(x,y,z))", "all x.(Camouflage(x) -> (AnimalSkin(x) & SameColorAsEnvironment(x)))"]}
{"id": "entailmentbank_validation_419", "nl": "camouflage is a kind of adaptation for hiding in an environment.", "fol": "", "prediction": ["all x.(CAMouflage(x) -> Adaptation(x))", "all x.(Camouflage(x) -> AdaptationForHidingInEnvironment(x))", "all x.(Camouflage(x) -> IsAdaptationForHiding(x,ed))", "all x.(Cambolage(x) -> (AdaptationForSheddingInEnvironment(x)))", "all x.(Camouflage(x) -> (AdaptationForHiding(x) & InEnvironment(x)))", "all x.(Camouflage(x) -> (AdaptationForHiding(x) | Requires(x,environment)))", "all x y.((Camouflage(x) & Environment(y)) -> Adaptation(x,y))", "all x.(Camouflage(x) -> (AdaptationForHidingInEnvironment(x)))", "exists x.(Camouflage(x) & AdaptationForHiding(x))", "all x.(Camouflage(x) -> AdheresTo(x,y))", "all x y.((Commaouflage(x) & Environment(y)) -> AdheresFor(x,y))", "all x.(Camouflage(x) -> (Adaptation(x) & ForHidingInEnvironment(x)))", "all x.(Camouflage(x) -> (AdaptationForShedding(x) & InEnvironment(x)))", "all x y.((Camouflage(x) & Environment(y)) -> AdaptationForHirning(x,y))", "all x.(Camouflage(x) -> AnticipationForHiding(x))", "all x.(Camouflage(x) -> HasAdaptation(x))"]}
{"id": "entailmentbank_validation_420", "nl": "an animal having the same skin color as its environment is an adaptation for hiding in an environment.", "fol": "", "prediction": ["all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> AdaptationForHidingInEnvironment(x))", "all x.((Animal(x) & SameSkinColorAlongEnvironment(x)) -> AdaptationForHidingInEnvironment(x))", "all x y z.((Animal(x) & SkinColor(y) & Environment(z) & SameSkinColor(x,y) & Environment(x,z)) -> Adaptation(x))", "all x.((Animal(x) & SameSkinColorAsEnvironment(x)) -> AdaptationForHittingInEnvironment(x))", "all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> AdaptationForHidingInEnvironment(x))", "all x y.((Animal(x) & Environment(y) & SameSkinColor(x,y)) -> AdaptationForHiding(x,y))", "all x y.((Animal(x) & Environment(y) & SameSkinColor(x,y)) -> AdaptationForHidingInEnvironment(x,y))", "all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> AdaptationForHuntingInEnvironment(x))", "all x y.((Animal(x) & SkinColor(y) & Environment(a)) -> AdaptationForHuntingInEnvironment(x,y))", "all x.((Animal(x) & SkinColorSameAsEnvironment(x)) -> AdaptationForSheltingInEnvironment(x))", "all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> AdaptationForHiingInEnvironment(x))", "all x.((Animal(x) & SameSkinColorAsEnvironment(x)) -> AdaptationForHidingInEnvironment(x))", "all x y.((Animal(x) & SameSkinColor(x,y) & Environment(y)) -> AdaptationForShelter(x,y))", "all x y.((Animal(x) & SameSkinColor(x,y)) -> AdaptationForHiding(x,y))", "all x y.((Animal(x) & Environment(y) & SameSkinColor(x,y)) -> AdaptationForHiding(x))", "all x y.((Animal(x) & Environment(y) & SameSkinColor(x,y)) -> AdaptationForHunting(x,y))"]}
{"id": "entailmentbank_validation_421", "nl": "predators usually must see their prey in order to catch them.", "fol": "", "prediction": ["all x y.((Predator(x) & Prey(y)) -> (Sees(x,y) & Catches(x,y)))", "all x.(Predator(x) -> (MustSeePrey(x) & Caught(x)))", "all x.((Predator(x) & SeesPrey(x)) -> Catches(x))", "all x y.((Predator(x) & Prey(y)) -> Sees(x,y))", "all x.(Predator(x) -> SeesPrey(x,y))", "all x y.((Predator(x) & Prey(y)) -> (MustSee(x,y) & Usually(x,y)))", "all x.(Predator(x) -> (MustSeePrey(x) & CatchesPrey(x)))", "all x y.((Predator(x) & Prey(y)) -> MostSemanticToCatch(x,y))", "all x y z.((Predator(x) & Prey(y) & Prey(z)) -> MustSee(x,z))", "all x.(Predator(x) -> (MustSeePrey(x) & CatchPrey(x)))", "all x y.((Predator(x) & Prey(y)) -> MustSee(x,y))", "all x y.((Predator(x) & Prey(y)) -> Sees(x,y))", "all x y.((Predator(x) & Prey(y)) -> Speaks(x,y))", "all x y.((Predator(x) & Prey(y)) -> MustSee(x,y))", "all x.(Predator(x) -> (MustSee(x) & Catches(x)))", "all x.(Predator(x) -> (MustSee(x,Prey) & Catch(x,Prey)))"]}
{"id": "entailmentbank_validation_422", "nl": "hiding means visibility / ability to be seen decreases for camouflage.", "fol": "", "prediction": ["all x y z w.((Hunting(x) & Camouflage(y) & Visibility(z) & AbilityToBeSeen(w)) -> Decreases(x,y))", "all x.((Chaining(x) & Camouflage(y)) -> (VisibilityDecrease(x,y) & AbilityToBeSeen(x,y)))", "all x.(HasHunting(x) -> (DecreasesVisibility(x) & IncreasesAbilityToBeSeen(x)))", "all x.(Hunting(x) -> (DamagesVisibility(x) & DecreasesAffordabilityToBeSeen(x)))", "all x y z.((Hunting(x) & Camouflage(y) & Visibility(x,y) & AbilityToBeSeen(z)) -> DecreasesFor(x,y,z))", "all x.(Hitting(x) -> (DecreasesVisibility(x) & ReducesAbilityToBeSeeded(x)))", "all x.((Histing(x) & Camouflage(y)) -> Visibility(x,y))", "all x.(HideSight(x) -> (DecreasesVisibility(x) | DecreasesAbilityToBeSeen(x)))", "all x y.((Hidden(x) & Camouflage(y)) -> (VisibilityDecrease(x,y) | AbilityToBeSeen(x,y)))", "all x.((Hiding(x) & Camouflage(x)) -> VisibilityDicrease(x))", "all x.(ChainingVisibility(x) -> VisibleToBeSeen(x))", "all x.(HidingMeasures(x) -> (DecreasesVisibility(x) & DecreasesAbilityToBeSeen(x)))", "all x.(Chamouflage(x) -> (DecreasesVisibility(x) | AptitudeToBeSeen(x)))", "all x.((Hunting(x) & Camouflage(x)) -> VisibilityDecrease(x))", "all x.(Hunting(x) -> DecreasesVisibility(x))", "all x.(Camera(x) -> (DecreasedVisibility(x) | GreaterAbilityToBeSeen(x)))"]}
{"id": "entailmentbank_validation_423", "nl": "hiding can be used to avoid being seen by predators.", "fol": "", "prediction": ["all x y.((Hunting(x) & Predator(y)) -> AvoidsSight(x,y))", "all x y z.((Hunting(x) & Predator(y) & Predator(z) & AvoidsSeen(x,y)) -> UsedToAvoid(x,z))", "all x y.((Hidening(x) & Predator(y)) -> AvoidsSeenBy(x,y))", "all x.(Hunting(x) -> AvoidsPredators(x))", "all x.(Hunting(x) -> AvoidsPredators(x))", "all x.((Hunting(x) & PredatorSide(y)) -> -Seeded(x,y))", "all x y.((Hunting(x) & Predator(y)) -> CanBeUsedToPreventSight(x,y))", "all x y.((Hunting(x) & Predator(y)) -> AvoidSeenBy(x,y))", "all x.(Helving(x) -> AvoidsBeingSeededByPredators(x))", "all x y.((Hunting(x) & Predator(y)) -> -SeenBy(x,y))", "all x.(Healing(x) -> AvoidsPredators(x))", "all x.(Hunting(x) -> (NecessaryToBeSeenByPredators(x)))", "all x.((Shaking(x) & Predator(y)) -> BeenSeenBy(x,y))", "all x y.((Hunting(x) & Predator(y)) -> AvoidsSeeing(x,y))", "all x.(Hiding(x) -> AvoidsSeedByPredators(x))", "all x.(HasHunting(x) -> -SeedByPredators(x))"]}
{"id": "entailmentbank_validation_424", "nl": "not being seen by predators is a kind of protection against predators.", "fol": "", "prediction": ["all x y.((Meeting(x) & Predator(y)) -> ProtectiveAgainst(x,y))", "all x.((Predator(x) & -SeedBy(x,y)) -> ProtectionAgainst(x,z))", "all x.((NeSeenByPredators(x) & NotSeededByPredators(x)) -> ProtectionAgainstPredators(x))", "all x.((Pharmacist(x) & -SeedBy(x,p)) -> ProtectiveAgainst(x,p))", "all x.((Father(x) & -SeenBy(x,y)) -> ProtectionAgainst(x,lady,y))", "all x.(((Predator(x) & -Seen(x)) -> ProtectionAgainst(x,Predators))", "all x.(Damage(x) -> ProtectionAgainstDamage(x))", "all x.((Predator(x) & -SeenBy(x)) -> ProtectionAgainst(x))", "all x.(NecessitatingSeeingVast(x) -> ProtectiveAgainstPredators(x))", "all x.(ProtectionAgainstPredators(x) -> NotSeedByPredators(x))", "all x.((ProtectionAgainstPredators(x) & -SeedByPredators(x)) -> -SeedByPredators(x))", "all x.((Anti-Predator(x) & -SeedBy(x,predators)) -> ProtectiveAgainst(x,predators))", "all x.((BeingNotSeedByPredators(x) & ProtectionAgainstPredators(x)) -> ProtectionAgainstPredators(x))", "all x.((Protection(x) & AntiPredator(x)) -> -SeenByPredators(x))", "all x y.((Predator(x) & -SungledBy(x,y)) -> ProtectionAgainst(x,y))", "all x.(ProtectAgainstPredators(x) -> -BeingSeenByPredators(x))"]}
{"id": "entailmentbank_validation_425", "nl": "hiding is a kind of protection against predators.", "fol": "", "prediction": ["all x.(Hintering(x) -> ProtectionAgainstPredators(x))", "all x.(Hunting(x) -> ProtectsAgainstPredators(x))", "all x.(Hiding(x) -> PredatorProtection(x))", "all x.(Hiding(x) -> (ProtectionAgainstPredators(x)))", "all x.((Hunting(x) & Predators(x)) -> ProtectionAgainst(x,y))", "all x.(Hideaway(x) -> Protection(x))", "all x.(Hide(x) -> ProtectsAgainstPredators(x))", "all x.(Hunting(x) -> KillsPredators(x))", "all x.(Hiding(x) -> ProtectionAgainstPredators(x))", "all x y.((Hunting(x) & Predator(y)) -> ProtectsAgainst(x,y))", "all x.(Hunting(x) -> ProtectionAgainstPredators(x))", "all x.(hiding(x) & ProtectionAgainstPredators(x))", "all x.(Hunting(x) -> PredatorsProtection(x))", "all x y.((Hiding(x) & Predator(y)) -> ProtectsAgainst(x,y))", "all x.(Hunting(x) -> ProtectionAgainstPredators(x))", "all x.(HasHunting(x) -> ProtectorAgainstPredators(x))"]}
{"id": "entailmentbank_validation_426", "nl": "an animal having the same skin color as its environment is a kind of protection against predators.", "fol": "", "prediction": ["all x y.((Animal(x) & SkinColor(x,y) & Environment(y)) -> ProtectionAgainstPredators(x))", "all x y.((Animal(x) & SkinColor(x,y) & SameSkinColor(x,y) & Environment(y)) -> ProtectionAgainstPredators(x,y))", "all x.((Animal(x) & SameSkinColor(x,Environment)) -> ProtectionAgainstPredators(x))", "all x.((Animal(x) & SkinColorsSame(x) & Environment(x)) -> ProtectionAgainstPredators(x))", "all x y z.((Animal(x) & SkinColor(y) & Environment(z) & SameSkinColor(x,y)) -> PredatorProtection(x,z))", "all x y.((Animal(x) & SkinColor(y) & Environment(y)) -> ProtectionAgainstPredators(x,y))", "all x y.((Animal(x) & SameSkinColor(x,y) & Environment(y)) -> ProtectiveAgainstPredators(x))", "all x.((Animal(x) & SameSkinColor(x,Environment)) -> PredatorProtection(x))", "all x.((Animal(x) & SameSkinColor(x,Environment)) -> ProtectionVisitsPredators(x))", "all x.(Animal(x) -> (SameSkinColor(x) & SameEnvironment(x) & ProtectsAgainstPredators(x)))", "all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> ProtectionAgainstPredators(x))", "all x y.((Animal(x) & SkinColor(x,y) & Environment(y) & SameColor(x,y)) -> ProtectionAgainstPredators(x))", "all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> ProtectionAgainstPredators(x))", "all x y z.((Animal(x) & SkinColor(y) & Environment(z) & SameSkinColor(x,y,z) & Has(x,y)) -> ProtectionAgainstPredators(x))", "all x y.((Animal(x) & SkinColor(y) & Same(x,y)) -> ProtectionAgainstPredators(x))", "all x.((Animal(x) & SameSkinColor(x,y) & Environment(y)) -> ProtectiveAgainstPredators(x,y))"]}
{"id": "entailmentbank_validation_427", "nl": "hiding means ability to be seen decreases for camouflage.", "fol": "", "prediction": ["all x.(Cambolage(x) -> IncreasedEvolvingAbility(x))", "all x.(Shapping(x) -> ThenDecreasesAchanceToBeSeen(x))", "all x.((Sheltering(x) & Camouflage(x)) -> AbilityDecreases(x))", "all x.((Halfting(x) & Camouflage(x)) -> AbilityDecreases(x))", "all x.(HuntingMeasures(x) -> DecreasesCabouflageAbilities(x))", "all x.(HuntingMeasures(x) -> Reduces(x))", "all x.(HuntingMeansAbilityToBeSided(x) -> DecroisesForCamouflage(x))", "all x.(HuntingMethod(x) -> DecreasesAbilitiesForCamouflage(x))", "all x.((Shaping(x) & Camouflage(x)) -> -CanBeSeen(x))", "all x.(Shadowing(x) -> DecreasesAffordanceToBeSeen(x))", "all x.(HasHuntingVerySeen(x) -> DecreasesCamouflageAbility(x))", "all x.(Chingle(x) -> DecreasesAptitudeToBeSinned(x))", "all x.(HideMeal(x) -> CapabilityDecreasesForCamouflage(x))", "all x.(Hunts(x) -> AbilityToBeSeenDecreasesForCabouflage(x))", "all x.(ShallowingVeryDescends(x) -> Camouflage(x))", "all x.(HuntingWith(x) -> AbilityDecreases(x))"]}
{"id": "entailmentbank_validation_428", "nl": "to blend into something means ability to be seen decreases when around that something.", "fol": "", "prediction": ["all x y.((BlendedInto(x,y) & Something(y)) -> CumulativeAbilityDecreases(a,y))", "all x.(BlendedInto(x) -> IncreasesAtMoment(x))", "all x y z.((BlendedInto(x,y) & Something(z)) -> (DecreasesAbilityToBeSeen(y,z)))", "all x y z.((BlendTo(x) & Something(y) & Around(z)) -> AbilityToBeSeenDecreases(x,y))", "all x y z.((BlendedIntoOrganic(x) & Something(y) & Activity(z)) -> DecreasesResponsibility(x,y,z))", "all x y.((BlendedInto(x) & Something(y)) -> CapacityDecreasesWithout(x,y))", "all x.((BlendedInto(x) & ExceptionalWhenAround(x)) -> Reduces(x))", "all x.((BlenderInto(x) & Something(x)) -> AbilityToBeSeededDecreases(x))", "all x.((BlendedInto(x,y) & Something(y)) -> AbilityDecreaseInAround(x,y))", "all x.((BlendedIntoSomething(x) & AimToBeSeeded(x)) -> DecreasesAroundSomething(x))", "all x.(FilmInto(x) -> NoVision(x))", "all x y.((BlendedInto(x,y) & Something(y)) -> NeedsDecreasedBodyViewInTheMoment(x,y))", "all x.((BlendedInto(x) & Something(x)) -> AbilityToBeSeenDecreases(x))", "all x y.((BlendedInto(x,y) & Something(y)) -> AbilityDecreasesWithinAround(x,y))", "all x y.((BlendInto(x) & Something(x) & InArea(y,x)) -> -DescendsSeen(x))", "all x.((BlendsInto(x) & Something(x)) -> AbilityDecreasesWhenAround(x))"]}
{"id": "entailmentbank_validation_429", "nl": "to blend into something means to hide in something.", "fol": "", "prediction": ["all x y.((BloodInto(x,y) & Something(z)) -> HungryIn(x,z))", "all x y.((MulkInto(x) & Something(y)) -> HideIn(x,y))", "all x y.((BlenderInto(x) & Something(y)) -> HideIn(x,y))", "all x.(BlenderInto(x) -> exists y.(HuntIn(y) & Something(z)))", "all x.(BlendInto(x) -> HoverIn(x))", "all x.((BloodInto(x) & In(x,y)) -> ShieldIn(y,z))", "all x.((BlendingInto(x) & Something(x)) -> HideIn(x))", "all x.(BlendInto(x) -> -HalloweenIn(x))", "all x.((BlendedInto(x) & CanHideIn(x)) -> CanHideIn(x))", "all x.(BlenderIn(x) -> (HideIn(x)))", "all x.(Blend-Into(x) -> (HuntIn(x) & HasAlways(x)))", "all x.(BlendedInto(x) -> HiddenIn(x))", "all x.(BloodInto(x,z) -> (HasShideIn(x,z) & For(x,y) & For(x,z)))", "all x y.((GlideInto(x,y) & Contains(x,y)) -> HatesIn(x))", "all x.(BlendedInto(x) -> BindsIn(x))", "all x.((BleedInto(x) & Something(x)) -> (HideIn(x) | HideIn(x)))"]}
{"id": "entailmentbank_validation_430", "nl": "white fur blends into snow.", "fol": "", "prediction": ["all x.(WhiteFur(x) -> BlendsIntoSnow(x))", "all x.(WhiteFur(x) -> BlendsIntoSnow(x))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsInto(x,y))", "all x.(WhiteFur(x) -> BlendsIntoSnow(x))", "all x.(WhiteFur(x) -> BlendInSnow(x))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsInto(x,y))", "all x.(WhiteFur(x) -> BlendsIntoSnow(x))", "all x y.(Wallace(x) & WhiteFur(y) & Snow(z))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsInto(x,y))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsInto(x,y))", "all x.(WhiteFur(x) -> BlendsIntoSnow(x))", "all x y z.((WhiteFur(x) & Snow(y) & Snow(z)) -> BlendsInto(x,y,z))", "all x.(WhiteFur(x) -> BlendsIntoSnow(x))", "all x.(WhiteFur(x) -> BlendsIntoSnow(x))", "all x.(WhiteFur(x) -> BlendsIntoSnow(x))", "all x.(WinterFur(x) -> BlendsIntoSnow(x))"]}
{"id": "entailmentbank_validation_431", "nl": "an example of hiding is white fur blending in with snow.", "fol": "", "prediction": ["all x.(Shelving(x) -> (WhiteFurBlendering(x) & Snow(x)))", "all x y.((WhiteFur(x) & Snow(y)) -> LinkedWith(x,y))", "all x.((WhiteFur(x) & Blending(x,snow)) -> Inhiding(x))", "all x y z.((WhiteFur(x) & Snow(y) & BlendsIn(x,y)) -> Hidden(x))", "all x.((WhiteFur(x) & BlendedInMountain(x)) -> Hidden(x))", "all x.(Shapping(x) -> (WhiteFur(x) & BlendsInWithSnow(x)))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendedIn(x,y))", "all x.((WhiteFur(x) & Snow(y)) -> Hidden(x))", "all x y z.((WhiteFur(x) & Snow(y) & WhiteCut(z)) -> Hidden(x,y,z))", "all x y z.((Hunting(x) & WhiteFur(y) & Snow(z)) -> BlendingIn(y,z))", "all x y.((HuntingExample(x) & WhiteFur(x) & Snow(x)) -> BlendsWith(x,y))", "all x.(Hunting(x) -> (WhiteFur(x) & BlendsInWithSnow(x)))", "all x.(Hitting(x) -> (WhiteFurBloodingWithSnow(x)))", "all x y.((WhiteFur(x) & Snow(y)) -> Hidden(x))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsIn(x,y))", "exists x.(Hudging(x) & WhiteFur(x) & BlendedInWithSnow(x))"]}
{"id": "entailmentbank_validation_432", "nl": "an example of camouflage is white fur blending in with snow.", "fol": "", "prediction": ["exists x.(Camouflage(x) & WhiteFur(x) & BlendsInWithSnow(x))", "all x.((WhiteFur(x) & Snow(x)) -> Camouflage(x))", "all x.((WhiteFur(x) & BlendedInWithSnow(x)) -> Camouflage(x))", "all x.(Campouflage(x) -> (WhiteFur(x) & BlendedInWithSnow(x)))", "all x.((WhiteFur(x) & BlendedInWithSnow(x)) -> Camouflage(x))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendedIn(x,y))", "all x.((WhiteFur(x) & Snow(x)) -> Camouflage(x))", "all x.((WhiteFur(x) & BlendingWithSnow(x)) -> Camouflage(x))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsInWith(x,y))", "all x.(Campouflage(x) -> (WhiteFur(x) & BlendingInWithSnow(x)))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsInWith(x,y))", "all x.((WhiteFur(x) & BlendedInWithSnow(x)) -> Camouflage(x))", "all x.((WhiteFur(x) & BlendsWithSnow(x)) -> Camouflage(x))", "all x.((WhiteFur(x) & BlendWithSnow(x)) -> Camouflage(x))", "all x.((WhiteFur(x) & BlendedWithSnow(x)) -> Camouflage(x))", "all x.((WhiteFur(x) & BlendsWithSnow(x)) -> Camouflage(x))"]}
{"id": "entailmentbank_validation_433", "nl": "some leaves have a speckled brown color.", "fol": "", "prediction": ["exists x.(Leaves(x) & SpoiledBrownColor(x))", "exists x.(Leaves(x) & SpoiledBrownColor(x))", "exists x.(Leaves(x) & SpewedBrownColor(x))", "exists x.(Leaves(x) & SpikeckledBrownColor(x))", "exists x.(Leaves(x) & SpckledBrownColor(x))", "exists x.(Leaves(x) & SpechtBrownColor(x))", "exists x.(Leaves(x) & SpeckledBrownColor(x))", "exists x.(Leaves(x) & SpckledBrownColor(x))", "exists x y.(Leaves(x) & SpeckledBrownColor(y))", "exists x.(Leaves(x) & SpoiledBrownColor(x))", "exists x.(Leaves(x) & SpeckledBrownColor(x))", "exists x.(Leaves(x) & SpoiledBrownColor(x))", "exists x.(Leaves(x) & SpangledBrownColor(x))", "exists x.(Leaf(x) & SpckledBrownColor(x))", "exists x.(Leaf(x) & SpongedBrownColor(x))", "exists x.(Leaves(x) & SpunkedBrownColor(x))"]}
{"id": "entailmentbank_validation_434", "nl": "some birds have a speckled brown color.", "fol": "", "prediction": ["exists x.(Bird(x) & SpckledBrownColor(x))", "exists x.(Bird(x) & SpoiledMoonColor(x))", "exists x.(Bird(x) & SpeckledBrownColor(x))", "exists x.(Bird(x) & SpckledBrownColor(x))", "exists x.(Bird(x) & SpangledBrownColor(x))", "exists x.(Bird(x) & SpckledBrownColor(x))", "exists x.(Bird(x) & SpckledBrownColor(x))", "exists x.(Bird(x) & SpckledBrownColor(x))", "exists x.(Bird(x) & SpoiledBrownColor(x))", "exists x.(Bird(x) & SpangledBrownColor(x))", "exists x.(Bird(x) & SpckledBrownColor(x))", "exists x.(Bird(x) & SpokenBrownColor(x))", "exists x.(Bird(x) & SpckledBrownColor(x))", "exists x.(Bird(x) & SpyckledBrownColor(x))", "exists x.(Bird(x) & SpoiledBrownColor(x))", "exists x.(Bird(x) & SpeckledBrownColor(x))"]}
{"id": "entailmentbank_validation_435", "nl": "some birds look like leaves.", "fol": "", "prediction": ["exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LooksLikeLeaves(x))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LooksAlike(x,Leaves))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LooksAboveLeaves(x))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LookslikeLeaves(x))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LooksAlike(x,Leaves))"]}
{"id": "entailmentbank_validation_436", "nl": "something that looks like another thing is difficult to distinguish from that thing.", "fol": "", "prediction": ["all x.((Thing(x) & LooksAlike(x,x)) -> DifficultToDistinctFrom(x,y))", "all x.((Thing(x) & LooksAlike(x,X)) -> DifficultToDistinctFrom(x,X))", "all x y.((IsThing(x) & LooksAlike(x,y)) -> DifficultToDiffuser(x))", "all x.((Distinct(x) & LooksAlike(x,Y)) -> DifficultToDistinctFromThing(x,Y))", "all x y.((Tree(x) & LooksAlike(x,y)) -> DifficultToDistinct(x,y))", "all x.(LooksAlikeAnotherThing(x) -> DiligibleFromThing(x))", "all x y.((Matter(x) & AnotherThing(y)) -> DifficultToDistinctFrom(x,y))", "all x y.((Taste(x) & LooksAlike(x,y)) -> DifficultToDistinct(x,y))", "all x y.((Tax(x) & LooksAlike(x,y)) -> DifficultToDistinctFrom(x,y))", "all x.((LooksAndEasy(x) & LooksAndEasy(x)) -> DifficultToDistinct(x))", "all x y.((Gift(x) & LooksAlike(x,y)) -> DifficultToDistinctFrom(x,y))", "all x y z.((Body(x) & Thing(y) & LooksAlike(x,y)) -> DifficultToDistinctFrom(x,z))", "all x.((LooksAlike(x,SameThing)) -> DifficultToDistinctFrom(x,SameThing))", "all x y.((Difference(x,y) & LooksAlike(x,y)) -> HardToDistractFrom(x,y))", "all x y.((Thing(x) & LooksAlike(x,y)) -> DifficultToDistinct(x,y))", "all x y.((Dog(x) & LooksLike(x,y)) -> HardToDistinct(x,y))"]}
{"id": "entailmentbank_validation_437", "nl": "some birds are difficult to distinguish from leaves.", "fol": "", "prediction": ["exists x.(Bird(x) & DifficultToDiffersFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistingFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x.(Bird(x) & DifficultToDiscertFromLeaves(x))", "exists x.(Bird(x) & DistinctFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistractFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x.(Bird(x) & DiffersFromLeaves(x))", "exists x.(Bird(x) & HardToDiscriminate(x,Leaves))", "exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistractFromLaws(x))"]}
{"id": "entailmentbank_validation_438", "nl": "difficult to distinguish can mean difficult to see in something else.", "fol": "", "prediction": ["all x y.((DifficultToDistinct(x) & (DifficultToSee(y) | DifferentToSee(y))) -> DifficultToSee(x,y))", "all x.(DifficultToDistinct(x) -> DifficultToSee(x))", "all x.(DifficultToDistinct(x) -> HardToSee(x))", "all x.(DifficultToDistinct(x) -> Discrimination(x))", "all x y.(DifficultToDifferent(x) -> (DifficultToSee(y) & InOther(x)))", "all x y.((DifficultToDifferent(x) & Distinct(y)) -> DistractsMeanders(x,y))", "all x.(DifficultToDistinct(x) -> MeansDifficultToSee(x))", "all x.(DifficultToDistinct(x) -> (DifficultToSee(x) & ForAndOne(x)))", "all x y.((DifficultToDistinct(x) & (DifficultToSee(y) & SomethingOther(z))) -> DisagreeFrom(x,y,z))", "all x y.((DifficultToDistinct(x) & Other(y)) -> DFIDIGNIBLE(x))", "all x y.((DifficultToDistort(x) & SomethingOther(y)) -> MeansDifficultToSee(x,y))", "all x y z.((DifficultToDistract(x) & Distinct(y) & DistinctTo(z)) -> DifficultToSee(x,y,z))", "all x.(DifficultToDistort(x) -> DistinctIsDifficultToSee(x))", "all x y.((DifficultToDistinct(x) & Another(y)) -> DistractDoubleToSee(x,y))", "all x y.((DifficultToDiffuse(x) & DifficultToSee(y)) -> -DifficultToSee(y))", "all x.(DifficultToDistinct(x) -> DifficultToSeeThan(x))"]}
{"id": "entailmentbank_validation_439", "nl": "some birds are difficult to see in leaves.", "fol": "", "prediction": ["exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSelectInLeaves(x))", "exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSee(x,leaves))", "exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x.(Bird(x) & DifficulttoSelectInLeaves(x))", "exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x.(Bird(x) & -SeesInLeaves(x))", "exists x.(Bird(x) & DifficultToSightEachInLeaves(x))", "exists x.(Bird(x) & DistinctToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x.(Bird(x) & DistinctToSeeInLeaves(x))"]}
{"id": "entailmentbank_validation_440", "nl": "an example of camouflage is a bird looking like leaves.", "fol": "", "prediction": ["all x y.((Bird(x) & Leaf(y)) -> LooksAlike(x,y))", "all x.((Bird(x) & LooksAlikeLeaves(x)) -> Camouflage(x))", "all x.((Bird(x) & LookslikeLeaves(x)) -> Camouflage(x))", "all x.(Camouflage(x) -> (BirdLookingLips(x)))", "all x.((Bird(x) & LooksRelativeLeaves(x)) -> Camouflage(x))", "all x.((Bird(x) & LooksLikeLeaves(x)) -> Camouflage(x))", "all x.((Bird(x) & LooksAlikeLeaves(x)) -> Camouflage(x))", "all x.((Bird(x) & LooksAlikeLeaves(x)) -> Camouflage(x))", "all x.((Bird(x) & Camouflage(x)) -> LooksAlikeLeaves(x))", "all x.((Bird(x) & LookslikeLeaves(x)) -> Camouflage(x))", "all x.((Bird(x) & LooksAlikeLeaves(x)) -> Camouflage(x))", "all x.((Bird(x) & LookslikeLeaves(x)) -> Camouflage(x))", "all x.((Bird(x) & LooksAlikeLeaves(x)) -> Camouflage(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x)) -> Camouflage(x))", "all x.(Cambolage(x) -> (AngelLookingAlikeLeaves(x)))", "all x y.((Bird(x) & LooksAlikeLeaves(x,y)) -> Camouflage(x))"]}
{"id": "entailmentbank_validation_441", "nl": "camouflage is used for hiding by animals from predators.", "fol": "", "prediction": ["all x y.((Camouflage(x) & Animal(y)) -> UsedForHunting(x,y))", "all x.(Cambolage(x) -> HiddenByAnimals(x))", "all x y.((Camouflage(x) & Animal(y)) -> HiddenFromPredators(x,y))", "all x y.((Camouflage(x) & Predator(y)) -> UsedForShedding(x,y))", "all x y.((Footwear(x) & Animal(y)) -> UsedForHealing(x,y))", "all x.(Camouflage(x) -> UsedForShedding(x,Animals,Predators))", "all x y.((Camouflage(x) & Animal(y)) -> UsedForHiding(x,y))", "all x y z.((Camouflage(x) & Animal(y) & Predator(z)) -> UsedForHiding(x,y,z))", "all x y.((Animal(x) & Predator(y)) -> Camouflage(x))", "all x.(Camouflage(x) -> UsedForHiding(x))", "all x y.((Camouflage(x) & Animal(y)) -> UsedForHiding(x,y))", "all x y.((Camouflage(x) & Animal(y)) -> UsedForHidingFromPredators(x,y))", "all x y.((Caveuflage(x) & Animal(y)) -> UsedForHidingFromPredators(x,y))", "all x.(Camouflage(x) -> (HuntsAnimals(x) | Predators(x)))", "all x y z.((Camobilization(x) & Animal(y) & Predator(z)) -> UsedForHunting(x,y,z))", "all x y.((Camouflage(x) & Predator(y) & UsedForHiding(x,y)) -> Camouflage(x,y))"]}
{"id": "entailmentbank_validation_442", "nl": "looking like leaves can be used by birds for hiding from predators.", "fol": "", "prediction": ["all x y.((Bird(x) & DecorativeLeaves(y)) -> UsedForHealing(x,y))", "all x y z.((Bird(x) & Leave(y) & Predator(z)) -> WorksFor(x,y,z))", "all x.(LookingTalbans(x) -> CanBeUsedByBirdsForHuntingFromPredators(x))", "all x y.((Bird(x) & LooksLikeLeaves(x)) -> CanHideFromPredators(x,y))", "all x.((LookinglikeLeaves(x) & CanBeUsedByBirdsForShelting(x)) -> Predator(x))", "all x.(LookingAlikeLeaves(x) -> CanBeUsedByBirdsForHuntingFromPredators(x))", "all x.(LooksWildLeaves(x) -> CanBeUsedByBirdsForHiding(x))", "all x.((LookingAsLeaves(x) & Bird(x)) -> CanBeUsedForHealingFromPredators(x))", "all x.((LookingForLeaves(x) & Bird(x)) -> CanBeHuntedAgainstPredators(x))", "all x.(LookingSoCalledLeaves(x) -> CanBeUsedByBirdsForHuntingFromPredators(x))", "all x y.((Bird(x) & Leaf(y) & LooksAlike(x,y)) -> CanHuntFromPredators(x,y))", "all x.(RunsSmoothLeaves(x) -> CanBeUsedByBirdsForHitting(x))", "all x.((ExecutingBeans(x) & LooksAlikeLeaves(x)) -> CanBeUsedForHunting(x))", "all x.((LookingSmoothLeaves(x) & Bird(x)) -> CanBeUsedForHuntingFromPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x)) -> (UsedForHunting(y) & Predator(y)))", "all x y.((Bird(x) & LookingLikeLeaves(x,y) & Predator(y)) -> CanHideFrom(x,y))"]}
{"id": "entailmentbank_validation_443", "nl": "hiding can be used to avoid something.", "fol": "", "prediction": ["all x.(hiding(x) -> Avoids(x))", "all x y.((Hunting(x) & Something(y)) -> UsedToAvoid(x,y))", "all x.(Hiking(x) -> CanBeUsedToAvoidSomething(x))", "all x.((Hunting(x) & Avoids(x)) -> HasHunting(x))", "all x.(Hiding(x) -> CanBeUsedToAvoid(x))", "all x.(Hiding(x) -> ObjectAvoids(x))", "all x.(Hacking(x) -> CanBeUsedToAvoid(x))", "all x y.((Hunting(x) & Something(y)) -> CanAvoid(x,y))", "all x.(Hiding(x) -> CanAvoid(x))", "all x.(Shelters(x) -> AvoidsSomething(x))", "all x.(Shallow(x) -> CanBeUsedToAvoid(x))", "all x y.((HasHunting(x) & Object(y)) -> -Avoid(x,y))", "all x y.((HasHunting(x) & (Has(y) | Has(z))) & Avoiding(y,z)) -> CanBeUsedToAvoid(x))", "all x.(HasHost(x) -> CanAvoid(x))", "all x y.((Shaking(x) & Something(y)) -> UsedToAvoid(x,y))", "all x.(Hunting(x) -> CanBeUsedToAvoid(x))"]}
{"id": "entailmentbank_validation_444", "nl": "looking like leaves can be used by birds for avoiding predators.", "fol": "", "prediction": ["all x.((LookingVariety(x,Leaves) & Bird(x)) -> AvoidsDamage(x))", "all x.((LookingAsLeaves(x) & Bird(x)) -> CanAvoidPredators(x))", "all x y.((Bird(x) & LooksSkinnyLeaves(x) & Predator(y)) -> Avoids(x,y))", "all x y.((Bird(x) & LooksLilac(x)) -> EasilyAvoidsPredators(y))", "all x.((Bear(x) & LooksAlikeLeaves(x)) -> AvoidsPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x)) -> CanBeAvoidedForPredators(x,y))", "all x y.((Bird(x) & LooksAlikeLeaves(x,y) & Bird(y)) -> CanBeUsedForAnticipatingPredators(x,y))", "all x.((LookingLimbish(x) & Bird(x)) -> AvoidsPredators(x))", "all x.((LooksAlikeLeaves(x) & Bird(x)) -> AvoidsPredators(x))", "all x.(LookinglikeLeaves(x) -> CanBeUsedForPredators(x))", "all x.((LookingLilacs(x) & Bird(x)) -> CanBeUsedForPredators(x))", "all x.((LookingLilies(x) & Bird(x)) -> CanBeUsedForEvitingPredators(x))", "all x y.((Bird(x) & LeavesLooking(x)) -> AvoidsPredators(y))", "all x y.((Bird(x) & LooksLilies(x) & Predator(y)) -> Avoids(x,y))", "all x.((Bird(x) & LookslikeLeaves(x)) -> AvoidsPredators(x))", "all x.((LooksAlikeLeaves(x)), -> CanBeUsedByBirds(x))"]}
{"id": "entailmentbank_validation_445", "nl": "keeping warm is the opposite of becoming cold.", "fol": "", "prediction": ["is the opposite(KeepWarm(x) & GetCold(x))", "all x.(KeepsWarm(x) -> OppositeOfClothing(x))", "all x.(KeepCool(x) -> OppositeOfClothing(x))", "All x.(KeepsWarm(x) -> OppositeOfClothing(x))", "all x.(KeepsWarm(x) -> OppositeOfGettingCold(x))", "keepingWarm(x) -> OppositeOfToleratingCold(x))", "all x.(KeepsWarm(x) -> OppositeOfClimate(x))", "(KeepingWarm(KeepsWarm) & Token(KeepsCold(KeepsWarm))", "KeepingWarm(x) -> OppositeOfBeingCold(x))", "all x.(KeepsWarm(x) -> OppositeOfCold(x))", "(KeepsWarm(KeepsWarm) & OppositeOfDecline(KeepsCold))", "all x y.((KeepsWarm(x) & KeepsCold(y)) -> OppositeOf(x,y))", "keepingWarm(x) -> -BelowCold(x))", "all x.(KeepsWarm(x) -> TheOpponentOfBecomingCold(x))", "keepingWarm(x) -> AgainstCold(x))", "(KeepsWarm(Wood) & -BecomesCold(Warm))"]}
{"id": "entailmentbank_validation_446", "nl": "if a living thing becomes too cold then that living thing will die.", "fol": "", "prediction": ["all x.((LivingThing(x) & TooCold(x)) -> Dies(x))", "all x.((LivingThing(x) & TooCold(x)) -> Die(x))", "all x.((LivingThing(x) & TooCold(x)) -> DieLivingThing(x))", "all x.((LivingThing(x) & TooCold(x)) -> Dies(x))", "all x.((LivingThing(x) & TooCold(x)) -> Die(x))", "all x.(TooCold(x) -> LivingThing(x))", "all x.((LivingTree(x) & TooCold(x)) -> WillDie(x))", "all x.((LivingThing(x) & TooCold(x)) -> Die(x))", "all x.((LivingThing(x) & TooCold(x)) -> Dies(x))", "all x.((LivingThing(x) & TooCold(x)) -> Die(x))", "all x.((LivingThing(x) & TooCold(x)) -> DieIn(x))", "all x.((LivingThing(x) & TooCold(x)) -> Die(x))", "all x.((LivingThing(x) & TooCold(x)) -> Dies(x))", "all x y.((LivingThing(x) & TooCold(y)) -> Dies(x,y))", "all x.((LivingThing(x) & TooCold(x)) -> Dies(x))", "all x y.((LivingThing(x) & BecomesTooCold(x)) -> Die(x,y))"]}
{"id": "entailmentbank_validation_447", "nl": "an animal usually requires warmth for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresWarmth(x))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x y.((Animal(x) & Temperature(y)) -> RequiresForSurvival(x,y))", "all x.(RequiresWarmth(x) -> NormallyForSurvival(x))", "all x.(Animal(x) -> (RequiresWarmthForSurvival(x)))", "all x.((Animal(x) & RequiresWarmth(x)) -> RequiresForSurvival(x))", "all x.((Animal(x) & UsuallyRequiresWarmthForSurvival(x)) -> RequiresWarmthForSurvival(x))", "all x.(Animal(x) -> RequiresWarmth(x))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.(Animal(x) -> RequiresFloodWarmthForSurvival(x))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.(Animal(x) -> NeedsWarmthForSurvival(x))", "all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.((Animal(x) & RequiresWarmth(x)) -> SurvivalIsRequired(x))"]}
{"id": "entailmentbank_validation_448", "nl": "if the environmental temperature is too cold then an animal in that environment may become cold.", "fol": "", "prediction": ["all x.((Environment(x) & TooCold(x)) -> CouldBecomeCold(x))", "all x.((Environment(x) & TooCold(x)) -> MayBecomeCold(x))", "all x.((Environment(x) & TemperatureTooCold(x)) -> MayBecomeCold(x))", "all x.((Animal(x) & DecreasedEnvironmentTemperature(x)) -> Allergy(x))", "all x.((Environment(x) & TooCold(x)) -> MayBeCold(x))", "all x.(Milk(x) -> MayBecomeCold(x))", "all x.((Environment(x) & TooCold(x)) -> (AnimalInEnvironment(x) & MayBecomeCold(x)))", "all x.((Animal(x) & TooColdEnvironment(x)) -> MayBecomeCold(x))", "all x.((Environment(x) & TooCold(x)) -> MayBeCold(x))", "all x.((Environment(x) & ClimateTooCold(x)) -> MayBecomeCold(x))", "all x.((Environment(x) & TooCold(x)) -> MayBecomeCold(x))", "all x.(TooCold(x) -> Cold(x))", "all x.((Environment(x) & TooCold(x)) -> MayBecomeCold(x))", "all x.((Animal(x) & EnvironmentTooCold(x)) -> MayBecomeCold(x))", "all x.((Environment(x) & TooCold(x)) -> MayBecomeCold(x))", "all x y.((Environment(x) & ExtremeCold(x)) -> MayBecomeCold(y))"]}
{"id": "entailmentbank_validation_449", "nl": "an animal requires warmth in cold temperatures.", "fol": "", "prediction": ["all x.((Animal(x) & ColdTemperature(x)) -> RequiresWarmth(x))", "all x.((Animal(x) & ColdTemperatures(x)) -> RequiresWarmth(x))", "all x.(RequiresWarmth(x) -> ColdTemperature(x))", "all x.((Animal(x) & ColdTemperature(x)) -> RequiresWarmth(x))", "all x.((Animal(x) & ColdTemperatures(x)) -> RequiresWarmth(x))", "all x.((Animal(x) & ColdTemperatures(x)) -> RequiresWarmth(x))", "all x y.((Animal(x) & ColdTemperature(y)) -> RequiresWarmth(x,y))", "all x y.((Animal(x) & ColdTemperatures(y)) -> RequiresWarmth(x,y))", "all x y z.((Animal(x) & Temperature(y) & ColdTemperature(z)) -> RequiresWarmth(x,y,z))", "all x.((Animal(x) & ColdTemperature(x)) -> RequiresWarmth(x))", "all x.(RequiresWarmthInColdTemperatures(x) -> Animal(x))", "all x.((Animal(x) & ColdTemperatures(x)) -> RequiresWarmth(x))", "all x.((Animal(x) & ColdTemperatures(x)) -> RequiresWarmth(x))", "all x.(RequiresWarmth(x) -> ColdTemperatures(x))", "all x.(RequiresWarmthInColdTemperatures(x) -> Animal(x))", "all x.((Animal(x) & ColdTemperatures(x)) -> RequiresWarmth(x))"]}
{"id": "entailmentbank_validation_450", "nl": "thick fur can be used for keeping warm.", "fol": "", "prediction": ["all x y.((ThickFur(x) & Warm(y)) -> CanBeUsedFor(x,y))", "all x.(ThickFur(x) -> CanKeepWarm(x))", "all x.(ThickFur(x) -> KeepsWarm(x))", "all x.(ThickFur(x) -> KeepsWarm(x))", "all x.(Heat(x) -> UsefulForWarming(x))", "all x.(ThickFur(x) -> SuitableForWarming(x))", "all x y.((Hexagon(x) & Fur(y)) -> WantedForWarm(x,y))", "all x.(ThickFur(x) -> StoresWarm(x))", "all x.(ThickFur(x) -> KeepsWarm(x))", "all x.(ThickFur(x) -> KeepsWarm(x))", "all x.(ThickFur(x) -> CanKeepWarm(x))", "all x y.((ThickFur(x) & Warm(y)) -> CanBeUsedFor(x,y))", "all x.(ThickFur(x) -> CanBeUsedForWarm(x))", "all x.(ThickFur(x) -> CanBeUsedForKeepingWarm(x))", "all x.((ThickFur(x) & KeepsWarm(x)) -> CanBeUsedFor(x))", "all x.(ThickFur(x) -> CanBeUsedForWarming(x))"]}
{"id": "entailmentbank_validation_451", "nl": "thick fur can be used by animals for survival in cold temperatures.", "fol": "", "prediction": ["all x.((ThickFur(x) & Animal(y)) -> UseForSurvival(y,coldTemperatures))", "all x.(ThickFur(x) -> UsedForSurvivalInColdTemperature(x))", "all x y.((ThickFur(x) & Animal(y)) -> CanUseForSurvivalInColdTemperatures(y,x))", "all x y.((ThickFur(x) & Animal(y)) -> CanBeUsedForSurvivalInColdTemperatures(x,y))", "all x y.((Species(x) & ThickFur(y) & Animal(x)) -> UsedForSurvivalInColdTemperatures(x,y))", "all x.(ThickFur(x) -> (UsedBy(x,y) & ColdTemperatures(y)))", "all x.(ThickFur(x) -> CanBeUsedInColdTemperature(x))", "all x.((ThickFur(x) & ColdTemperatures(x)) -> CanBeUsedByAnimals(x))", "all x.((ThickFur(x) & Use(x,coldTemperatures)) -> CanSurvive(x,coldTemperatures))", "all x y.((Fur(x) & Animal(y)) -> -BeginForSurvival(x,y))", "all x y.((ThickFur(x) & Animal(y) & ColdTemperature(y)) -> UsedForSurvival(x,y))", "all x.(ThickFur(x) -> CanBeUsedForSurvival(x))", "all x.(ThickFur(x) -> (UsedByAnimalsForSurvival(x) & ColdTemperatures(x)))", "all x y.((ThickFur(x) & Animal(y)) -> UsesForSurvivalInColdTemperatures(y))", "all x.(ThickFur(x) -> (UsedForSurvivalInColdTemperatures(x) | UsedForSurvivalInColdTemperatures(x)))", "all x.(ThickFur(x) -> UsesForSurvival(x,ColdTemperatures))"]}
{"id": "entailmentbank_validation_452", "nl": "winter has cold temperatures.", "fol": "", "prediction": ["all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> HasColdTemperature(x))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> ColdTemperatures(x))", "All x y.((Winter(x) & Spring(y)) -> ColdTemperatures(x).)", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> ColdTemperatures(x))"]}
{"id": "entailmentbank_validation_453", "nl": "thick fur can be used by animals for survival survival during winter.", "fol": "", "prediction": ["all x.(ThickFur(x) -> AppliedForSurvivalInWinter(x))", "all x.((ThickFur(x) & UsesForSurvival(x)) -> WorksDuringWinter(x))", "all x.(ThickFur(x) -> UsedByAnimalsForSurvival(x,winter))", "all x.((ThickFur(x) & Animal(y)) -> CanUseForSurvivalDuringWinter(x,y))", "all x y.((ThickFur(x) & Animal(y)) -> UsesForSurvival(x,y))", "all x.(ThickFur(x) -> UsedByAnimalsForSurvivalDuringWinter(x))", "all x.(ThickFur(x) -> UsesForSurvival(x,Winter))", "all x.(ThickFur(x) -> RepresentasUse(x,Nurture,Winter))", "all x y z.((ThickFur(x) & Animal(y) & Winter(z)) -> CanUseForSurvival(x,y,z))", "all x y.((ThickFur(x) & Animal(y)) -> CanBeUsedForSurvival(x,y))", "all x.(ThickFur(x) -> UsedByAnimalsForSurvivalDuringWinter(x))", "all x y.((ThickFur(x) & Animal(y) & Winter(y)) -> CanBeUsedForSurvival(x,y))", "all x.((ThickFur(x) & Animal(y)) -> UsesForSurvivalDuringWinter(x,y))", "all x.((ThickFur(x) & Animal(x)) -> UsefulForSurvivalDuringWinter(x))", "all x.((HasThickFur(x) & UsedForSurvival(x,winter)) -> CanBeUsedByAnimalsForSurvival(x,winter))", "all x y.((ThickFur(x) & Animal(y)) -> UseForSurvival(x,y))"]}
{"id": "entailmentbank_validation_454", "nl": "a bear is a kind of animal.", "fol": "", "prediction": ["all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x.(Bubble(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))"]}
{"id": "entailmentbank_validation_455", "nl": "thick fur can be used by bears for survival during winter.", "fol": "", "prediction": ["all x.(ThanThickFur(x) -> CanBeUsedByBearsForSurvival(x))", "all x.((ThickFur(x) & Bears(x)) -> CanResurviveDuringWinter(x))", "all x y.((ThickFur(x) & Bear(y)) -> CanUseForSurvival(y,winter))", "all x y.((ThickFur(x) & Bear(y)) -> UsedForSurvival(x,y))", "all x.((ThickFur(x) & Bear(y) & Winter(y)) -> CanForemost(x,y))", "all x y.((ThickFur(x) & Bear(y) & Winter(y)) -> CanUseForSurvival(x,y))", "all x.((ThickFur(x) & Bear(y) & Winter(z)) -> UsesForSurvival(x,y,z))", "all x.(ThickFur(x) -> CanBeUsedByBears(x))", "all x.((ThickFur(x) & Bear(x)) -> CanUseForSurvival(x,Winter))", "all x.((ThickFur(x) & Bear(x)) -> UsesForSurvivalDuringWinter(x))", "all x.(ThickFur(x) -> CanBeUsedByBears(x))", "all x y.((ThickFur(x) & Bear(y)) -> UsedForSurvivalDuringWinter(y,x))", "all x y.((Bear(x) & ThickFur(y) & Winter(y)) -> CanUseForSurvival(x,y))", "all x.((ThickFur(x) & Bear(x)) -> CanBeUsedForSurvivalDuringWinter(x))", "all x y.((ThickFur(x) & Bear(y)) -> CanUseForSurvival(y,Winter))", "all x y.((ThickFur(x) & Bear(y)) -> CanBeUsedForSurvivalDuringWinter(y,x))"]}
{"id": "entailmentbank_validation_456", "nl": "hunting is a kind of method for obtaining food.", "fol": "", "prediction": ["all x.(Hunting(x) -> AForEngagingFood(x))", "all x.(Hunting(x) -> (ObtainsFood(x) & ObtainsFood(x)))", "all x.(Hunting(x) -> (AncientMethod(x) & AcquiresFood(x)))", "all x.(Hunting(x) -> ObtainsFood(x))", "all x.(Hunting(x) -> (ObtainsFood(x) & ObtainsFood(x)))", "all x.(Hunting(x) -> (ObtainedFood(x) & FormOfMethod(x)))", "all x y z.((Hobbling(x) & Food(y) & Food(z)) -> (Order(x,y) & Obtains(x,z)))", "all x y.((Hunting(x) & Food(y)) -> (OtherMethod(x,y)))", "all x.(Hunting(x) -> (AssertElement(x) & Food(y)))", "all x.(Hunting(x) -> ForObtainingFood(x))", "all x.(Hunting(x) -> ForObtainingFood(x))", "all x.(Hunting(x) -> exists y.(Food(y) & ObtainsMethod(x,y)))", "all x.(Hunting(x) -> AccessingFood(x))", "all x.(Hunting(x) -> An OccurringTreatmentOfFood(x))", "all x.(Hunting(x) -> MeasurableForObstacles(x))", "all x.(Hunting(x) -> ObtainingFood(x))"]}
{"id": "entailmentbank_validation_457", "nl": "animals require food for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresFoodForSurvival(x))", "all x.((Animal(x) & RequiresFood(x)) -> Survival(x))", "all x.(Animal(x) -> RequiresFoodForSurvival(x))", "all x.(Animal(x) -> RequiresFoodForSurvival(x))", "all x.(Animal(x) -> RequiresFood(x))", "all x y.((Animal(x) & Food(y)) -> RequiresForSurvival(x,y))", "all x.(Animal(x) -> RequiresFoodForSurvival(x))", "all x.(Animal(x) -> RequiresFoodForSurvival(x))", "all x.(Meat(x) -> AnimalRequiresForSurvival(x))", "all x.(Animal(x) -> (RequiresFoodForSurvival(x)))", "all x y.((Animal(x) & Food(y)) -> RequiresForSurvival(x,y))", "all x.(Animal(x) -> RequiresFoodForSurvival(x))", "all x.(Animal(x) -> RequiresFoodForSurvival(x))", "all x.(Animal(x) -> RequiresFood(x))", "all x.(Animal(x) -> RequiresFoodForSurvival(x))", "all x.(Animal(x) -> RequiresFood(x))"]}
{"id": "entailmentbank_validation_458", "nl": "some animals must hunt to survive.", "fol": "", "prediction": ["exists x.(Animal(x) & HuntsToSurvive(x))", "exists x.(Animal(x) & HuntToSurvive(x))", "exists x.(Animal(x) & Hunts(x))", "exists x.(Animal(x) & HasHunt(x))", "exists x.(Animal(x) & MustHunt(x))", "exists x.(Animal(x) & MustHunt(x))", "exists x.(Animal(x) & MustHuntToSurvive(x))", "exists x.(Animal(x) & Hunt(x))", "exists x.(Animal(x) & MustHunt(x))", "exists x.(Animal(x) & MustHunt(x))", "exists x.(Animal(x) & MustHull(x))", "exists x.(Animal(x) & Hunt(x))", "exists x.(Animal(x) & Hunts(x))", "exists x.(Animal(x) & Hunts(x))", "exists x.(Animal(x) & MustHunt(x))", "exists x.(Animal(x) & HuntsToSurvive(x))"]}
{"id": "entailmentbank_validation_459", "nl": "hunting requires sensing prey.", "fol": "", "prediction": ["all x.(Hunting(x) -> RequiresSensingPrey(x))", "all x.(Hunting(x) -> RequiresSenseInOrder(x))", "all x.(Hunting(x) -> RequiresSense(x,Prey))", "all x.(Hunting(x) -> RequiresSenseingPrey(x))", "all x.(Hunting(x) -> RequiresSensingPrey(x))", "all x.(Hunting(x) -> RequiresSensingPrey(x))", "all x y.((Hunting(x) & Prey(y)) -> RequiresSense Of(x,y))", "all x.(Hunting(x) -> RequiresSensingPrey(x))", "all x y z.((Hunting(x) & Prey(y) & Prey(z)) -> RequiresSensing(x,y,z))", "all x.(Hunting(x) -> RequiresSensingPrey(x))", "all xl.(Hunting(x) -> RequiresSensingPrey(x))", "all x y.((Hunting(x) & Prey(y)) -> RequiresSensing(x,y))", "all x.(Hopping(x) -> RequiresSensingPrey(x))", "all x.(Hunting(x) -> RequiresSensingPrey(x))", "all x y.((Hunting(x) & Prey(y)) -> RequiresSense(x,y))", "all x y.((Hunting(x) & Prey(y)) -> RequiresSensing(x,y))"]}
{"id": "entailmentbank_validation_460", "nl": "better senses have a positive impact on an animal's survival.", "fol": "", "prediction": ["all x y.((BetterSenses(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(BetterSenses(x) -> PositiveImpactOnBatterySurvival(x))", "all x.(BetterSenses(x) -> PositiveImpact(x))", "all x y.((Sense(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((BetterSenses(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((BetterSenses(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((BetterSenses(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(BetterSenses(x) -> PositiveImpactOnAnimalSurvival(x))", "all x y.((Sense(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((BetterSense(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(BetterSenses(x) -> PositiveImpactOnLifessurvival(x))", "all x.(BetterSenses(x) -> PositiveImpactOnAnimalSurvival(x))", "all x y.((BetterSense(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(BetterSenses(x) -> PositiveImpactOnAnimalSurvival(x))", "all x y.((BetterSenses(x) & Animal(y)) -> PositiveInfluence(x,y))", "all x y.((BetterSenses(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_validation_461", "nl": "hearing is used for sensing sound by animals.", "fol": "", "prediction": ["all x y z.((Hearing(x) & Animal(y) & Sound(z)) -> Sensations(x,y,z))", "all x y.((Hearing(x) & Animal(y)) -> SensitiveSign(x,y))", "all x y.((Hearing(x) & Animal(y)) -> SensingSound(x,y))", "all x.(Hearing(x) -> SenseOnSound(x))", "all x y.((HasHearing(x) & Animal(y)) -> UsedForSensingSound(x,y))", "all x.(Hearing(x) -> SenseSoundByAnimals(x))", "all x y.((Hearing(x) & Animal(y)) -> SenseSound(x,y))", "all x y.((Hearing(x) & Animal(y)) -> SensingSound(x,y))", "all x.(Hearing(x) -> UsedForSensingSound(x))", "all x y.((HasHearing(x) & Animal(y)) -> SensingSound(x,y))", "all x.(Hearing(x) -> UsedForSensingSound(x))", "all x.(HasHearing(x) -> SensingSoundByAnimals(x))", "all x.(Hearing(x) -> SensingSoundByAnimals(x))", "all x y.((Hearing(x) & Animal(y)) -> UsedForSensingSound(x,y))", "all x.((Hearing(x) & SensingSound(x,animals)) -> UsedFor(x,animals))", "all x.(Hunger(x) -> SensingSoundByAnimals(x))"]}
{"id": "entailmentbank_validation_462", "nl": "better hearing has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & BetterHearing(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((BetterHearing(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((Animal(x) & BetterHearing(x)) -> PositiveImpactOnSurvival(x,y))", "all x.(BetterHearing(x) -> PositiveImpactOnAnimalSurvival(x))", "all x y.((Animal(x) & BetterHearing(x)) -> PositiveImpactOnSurvival(x,y))", "all x.(BetterHearing(x) -> PositiveImpactOnSurvival(x))", "all x y.((BuiltHearing(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(BetterHearing(x) -> PositiveImpactOnImplantsSolvability(x))", "all x.(BetterHearing(x) -> PositiveImpactOnSurvival(x))", "all x.(BetterHearing(x) -> PositiveImpactOnSurvival(x))", "all x y.((Animal(x) & BetterHearing(x)) -> PositiveImpactOnSurvival(x,y))", "all x.(BetterHearing(x) -> PositiveImpactOnAnimalSurvival(x))", "all x.(BetterHearing(x) -> PositiveImpactOnSurvivalInAnimal(x))", "all x.(BetterHearing(x) -> PositiveImpactOnSurvival(x))", "all x y.((BetterHearing(x) & Animal(y) & PositiveImpact(x)) -> Survives(y))", "all x y.((Animal(x) & Animal(y)) -> (GreaterHearing(x,y) & PositiveImpact(x,y)))"]}
{"id": "entailmentbank_validation_463", "nl": "senses are passed down from parent to offspring.", "fol": "", "prediction": ["all x y.((Sensor(x) & Offspring(y)) -> PassedDown(x,y))", "all x y.((Parent(x) & Offspring(y)) -> PassesSensesFrom(x,y))", "all x y.((Sensus(x) & Offspring(y)) -> PassedDeadFromParentToOffspring(x,y))", "all x y z.((Sensor(x) & Offspring(y) & Parent(z)) -> PassedDown(x,y,z))", "all x y z.((Sense(x) & Parent(y) & Offspring(z)) -> PassedDeepFromTo(x,y,z))", "all x y z.((Parent(x) & Offspring(y) & Sensor(z)) -> PassesDown(x,unfolded,z))", "all x y z.((Sense(x) & Parent(y) & Offspring(z)) -> PassedDown(x,y,z))", "all x.(Sense(x) -> PassedFromParentToOffspring(x))", "all x y.((Parent(x) & Offspring(y)) -> PassedSensesTo(x,y))", "all x y z.((Sensor(x) & Offspring(y) & Parent(z)) -> PassedDown(x,y,z))", "all x y z.((Sensor(x) & Offspring(y) & Parent(z)) -> PassedDown(x,y,z))", "all x y z.((Sense(x) & Parent(y) & Offspring(z)) -> Passed(x,y,z))", "all x y z.((Sensor(x) & Offspring(y) & Parent(z)) -> PassedDown(x,z))", "all x y z.((Sensor(x) & Offspring(y) & Parent(z)) -> PassedDown(x,y,z))", "all x y z.((Senses(x) & Parent(y) & Offspring(z)) -> PassedFromTo(x,y,z))", "all x y z.((Senses(x) & Parent(y) & Offspring(z)) -> PassedDown(x,Y,z))"]}
{"id": "entailmentbank_validation_464", "nl": "inheriting is when an inherited characteristic is passed from parent to offspring by genetics / dna.", "fol": "", "prediction": ["all x y.((Parent(x) & Offspring(y) & Genetically(x)) -> ExemplifiedCharacteristic(x,y))", "all x.((Genetics(x) -> inheritedCharacteristicPassed(x)))", "all x.((Parent(x) & Offspring(x) & Genesets(x) & Dna(x)) -> InheritsCharacteristic(x))", "all x y z.((Eleving(x) & GeneticalResource(y) & Offspring(z)) -> PassedBy(x,y,z))", "all x y z.((Product(x) & Parent(y) & Offspring(z)) -> (EarnedCharacteristicPassedBy(x,y,z) & Genetics(x,z) & Dna(x)))", "all x y.((Earning(x) & Parent(y) & Offspring(z)) -> PassesGeneticResistance(x,y,z))", "all x y z.((Ethics(x) & Parent(y) & Offspring(z)) -> (SustainedByGenetics/Dna(x) & PassedByGenetics(y,z)))", "all x.(Holding(x) -> (HasLegacy(x) & Passed(x) & -Holds(x,Parent) & PassesLegacy(x,Dna)))", "all x y.((Sheltering(x) & Parent(y) & Offspring(y) & Genetics(z) & DnaPath(x,z)) -> InheritsCharacteristic(x))", "all x.((Leisure(x) & Genealogicals(x) & Genetics(x) & Dna(x)) -> GeneratesCharacteristic(x))", "all x.((Parent(x) & Offspring(x) & Geneetics(x) & Dna(x)) -> inheritedCharacteristic(x))", "all x y.((HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasDna(x) & GaveThroughGenetics(x)) -> inheritsCharacteristic(x))", "all x y.((Heritage(x) & Parent(y) & Offspring(z) & Genetics(y) & Dna(z)) -> PassedCharacteristic(x,y,z))", "all x y z.(Machine(x) -> (Inheriting(y,x) & Parent(z) & Offspring(z) & Genetics(z) & Dna(w) & PassedThrough(x,z,w)))", "all x y z.((HasEnhancedCharacteristic(x) & Parent(y) & Offspring(z) & GeneticallyInfluential(x,y,z)) -> PassedBetween(x,dna))", "all x y z.((Hibernating(x) & Parent(y) & Offspring(z)) -> (DisinheritedCharacteristic(x,y,z) & PassedBy(x,genetics,dna)))"]}
{"id": "entailmentbank_validation_465", "nl": "senses are an inherited characteristic.", "fol": "", "prediction": ["all x.(Senses(x) -> ErasedCharacteristic(x))", "all x.(Senses(x) -> ErasedCharacteristic(x))", "all x.(Senses(x) -> HedgedCharacteristic(x))", "all x.(Senses(x) -> ErectedCharacteristic(x))", "all x.(Sense(x) -> EerdedCharacteristic(x))", "all x.(Sense(x) -> EternalCharacteristic(x))", "all x.(Sense(x) -> HasKeptSignificance(x))", "all x.(Sense(x) -> IinheritedCharacteristic(x))", "all x.(Sense(x) -> AllergicToAbundant(x))", "all x.(Sense (x) -> ErasedCharacteristic(x))", "all x.(Senses(x) -> ErasedCharacteristic(x))", "all x.(Sense(x) -> HeardHasCharacteristic(x))", "all x y.((Sense(x) & RemainsWithin(y)) -> EradicatedCharacteristic(x,y))", "all x.(Sense(x) -> H\u00e9dgedCharacteristic(x))", "all x.(Sense(x) -> ErasedCharacteristic(x))", "all x.(Sense(x) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_validation_466", "nl": "hearing is an inherited characteristic.", "fol": "", "prediction": ["All x.((Hearing(x) & ErasedCharacteristic(x)) -> Hearing(x))", "all x.(HasHearing(x) -> ErasedCharacteristic(x))", "all x.(Hearing(x) -> ErasedCharacteristic(x))", "all x.(HiddenCharacteristic(x) -> Hearing(x))", "all x.(Hardness(x) -> Hearse(x))", "all x.(HasHearing(x) -> ErasedCharacteristic(x))", "all x.(Hearing(x) -> ErasedCharacteristic(x))", "all x.(Hearing(x) -> ErasedCharacteristic(x))", "all x.(Hearing(x) -> ErasedCharacteristic(x))", "(HeritageCharacteristic(Hearing))", "all x.(Hearing(x) -> ErasedCharacteristic(x))", "all x.(Hearing(x) -> ErasedCharacteristic(x))", "all x.(Head(x) -> HealedCharacteristic(x))", "all x.(EarnedCharacteristic(x) -> Hearing(x))", "all x.(Hearing(x) -> ErasedCharacteristic(x))", "All x.(Hearing(x) -> ShedgedCharacteristic(x))"]}
{"id": "entailmentbank_validation_467", "nl": "better hearing is an inherited characteristic that has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x y.((EarnedCaracteristic(x) & Animal(y) & BetterHearing(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x.((HasBetterHearing(x) & ErasedCharacteristic(x) & HasPositiveImpactOnAnimalSurvival(x)) -> BetterHearing(x))", "all x y.((Animal(x) & Animal(y)) -> KnownForBetterHearing(x,y))", "all x.(BetterHearing(x) -> (HasPositiveImpactOnAnimalSurvival(x) & Inheritance(x)))", "all x.(BetterHearing(x) -> (ErasedCharacteristic(x) & PositiveInfluenceOnSurvival(x)))", "all x.(BetterHearing(x) -> (ElectedCharacteristic(x) & PositiveImpactOnSurvival(x)))", "all x.(Knowledge(x) -> (BetterHearing(x) & ErasedCharacteristic(x) & PositiveImpactOnSurvival(x)))", "all x.(BetterHearing(x) -> (EarnedCharacteristic(x) & PositiveImpactOnSurvival(x)))", "all x.(BetterHearing(x) -> (HiredCharacteristic(x) & PositiveImpactOnSurvival(x)))", "all x y.((Animal(x) & Animal(y)) -> BetterHearing(x))", "all x.(BetterHearing(x) -> (EmbracedCharacteristic(x) & PositiveImpactOnSurvivalOfAnimal(x)))", "all x.(BetterHearing(x) -> (ErasedCharacteristic(x) & PositiveImpactOnAnimalSurvival(x)))", "all x.((BetterHearing(x) & ErasuredCharacteristic(x) & PositiveImpactOnAnimalSurvival(x)) -> BetterHearing(x))", "all x.(BetterHearing(x) -> (ErasedCharacteristic(x) & PositiveImpactOnAnimalSurvival(x)))", "all x.((HasSurvivalInFamily(x) & ErasedCharacteristic(x)) -> BetterHearing(x))", "all x.(BetterHearing(x) -> (EarnedCaracteristic(x) & PositiveImpactOnAnimalSurvival(x)))"]}
{"id": "entailmentbank_validation_468", "nl": "as the ability of a living thing to survive / to reproduce increases, the likelihood of passing on its traits to its decendents will increase.", "fol": "", "prediction": ["all x y z.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(y) & Certs(z) & IncreasedLikelihoodOfPassingTreatmentsToDecendents(x)) -> IncreasedLikelihoodOfPassingTreats(x))", "all x y.((LivingThing(x) & AbilityToSurvive/ReproduceIncreases(x) & AbilityToReproduceIncreases(y)) -> MostlikelyPassesOnTraitsTo(x,y))", "all x y.((LivingThing(x) & GeneratesAdaptation(x) & SurvivesOperately(x,y) & Reproduces(x,y)) -> IncreasesLikelihoodOfPassingOnTraitsToDecendents(x))", "all x y z.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x) & PerceptionOfPassingOnTalents(y) & Decendents(z)) -> Increases(x))", "all x y.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ChanceOfPassingOnTraits(y,x))", "all x y.((LeavingTalent(x,y) & EnablesSurvival(x) & EnablesReproduction(x,y)) -> ProbabilityOfPassingTraitsToDecendents(x,y))", "all x y.((LivingThing(x) & AptitudeToSurviveAndReproduce(x,y) & IncreasedRiskOfPassingOnTraits(x,y)) -> IncreasedLikelihoodToDecendents(x,y))", "all x y.((LivingThing(x) & IncreasedAbilityToSurvive(x) & IncreasedAbilityToReproduce(x)) -> LikelyPassedTreatmentsToDecendents(y))", "all x y.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingOnTrends(y,x))", "all x.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingOnTraits(x))", "all x.(AsNeedToSurviveAndReproduce(x) -> IncreaseInLikelihoodOfPassingTraitsToDecendents(x))", "all x.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityToPassOnTraitsToDefendents(x))", "all x.((LivesThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> LikelyPassesTraitsToDecendents(x))", "all x.((LivingThing(x) & AbilityToSurvive/Reproduce(x)) -> LeastLimitToPassOnTreats(x))", "all x.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> LiesOnPassingTraitsToDefendents(x))", "all x y.((LivingThing(x) & IncreaseInsurvive(x) & IncreaseInReproduce(x)) -> IncreaseLikelihoodOfPassingOnTraitsToDecendents(y))"]}
{"id": "entailmentbank_validation_469", "nl": "animals with traits that positively impact their survival have a greater ability to survive / reproduce.", "fol": "", "prediction": ["all x.((Animal(x) & PositivelyImpactsSurvival(x)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositiveTreatmentImpactsSurvival(x)) -> GreaterAbilityToSurviveAndReproduce(x))", "all x.((Animal(x) & PositiveSurvivalTraits(x)) -> GreaterAbilityToSurviveOrReproduce(x))", "all x.((Animal(x) & PositivelyImpactsSurvival(x)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositivelyImpactsSurvival(x)) -> GreaterAbilityToSurviveOrReproduce(x))", "all x.((Animal(x) & PositivelyImpactsSurvival(x)) -> GreaterAbilityToSurviveOrReproduce(x))", "all x.((Animal(x) & PositiveTreatments(x)) -> (GreaterAbilityToSurvive(x) & GreaterAbilityToReproduce(x)))", "all x.((Animal(x) & PositiveSurvivalTraits(x)) -> GreaterAbilityToSurviveOrReproduce(x))", "all x.((Animal(x) & PositiveTreatment(x,survival)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositiveTreatments(x) & ImpactsSurvival(x)) -> GreaterAbilityToSurvive(x))", "all x y.((Animal(x) & Tailors(x,y) & PositivelyImpactSurvival(y)) -> GreaterAbilityToSurviveReproduce(x))", "all x.((Animal(x) & PositiveInfluence(x)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositiveSurvivalTax(x)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositiveSurvivalTait(x)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositiveInfluence(x,Survival)) -> GreaterAbilityToSurvive(x))", "all x.(SpecificTraits(x) -> (Enable(x) & PositiveInfluencesSurvival(x)))"]}
{"id": "entailmentbank_validation_470", "nl": "the decendants of an animal with traits that positively impacted their survival will also have traits that positivley impact their survival.", "fol": "", "prediction": ["all x y.((Decendant(x) & Animal(y) & PositivelyImpactSurvival(x,y)) -> PositivelyImpactSurvival(x,y))", "all x.((AnimalDecendant(x) & PositiveTrends(x) & PositiveTrends(x)) -> PositiveTrendsInternational(x))", "all x y.((Decendant(x) & Animal(y) & PositiveTalentsOrImpact(x,y)) -> PositiveTaterns(x,y))", "all x y.((Decendant(x) & Animal(y) & PositivelyImpactsSurvival(x,y)) -> PositivelyImpactsSurvival(x,y))", "all x y.((Decendant(x) & Animal(y) & PositivelyInfluencerTreatments(x,y)) -> PositivelyInfluencerSurvivalTreatments(x,y))", "all x.((Decendant(x) & HasTraits(x) & PositivelyImpactsSurvival(x)) -> HasTraits(x))", "all x.((Animal(x) & Decendants(x) & Positivetain(x) & Positivetain(x)) -> Positivetain(x))", "all x.((Decendant(x) & PositivelyInfluentialTraits(x)) -> PositivelyImpactsSurvival(x))", "all x y.((Decendant(x) & Animal(y) & PositiveRatedTreatments(x,y) & PositiveRatedTreatments(x,y)) -> PositiveRatedTreatments(x,z))", "all x y.((AnimalDecendant(x) & AnimalTraits(y) & PositivelyInfluenzadInsurance(x,y)) -> PositivelyInfluencedInsurance(x,y))", "all x y.((Decendant(x) & Animal(y) & PositivelyInfluencerImpact(x,y)) -> PositivelyInfluencer(x,y))", "all x y.(((Animal(x) & Decendant(x) & Tacts(x,y) & PositivelyImpactsSurvival(y)) -> PositivelyImpactsSurvival(x,y))", "all x y z.((Decendant(x) & Animal(y) & Trait(z) & PositivelyInfluencesSurvival(z,y) & PositivelyInfluencesSurvival(s)) -> HasTrait(x,z))", "all x.((Animal(x) & DecendantOf(x,x) & PositivelyInfluentsSurvivalTraits(x)) -> PositivelyInfluentsSurvivalTraits(x))", "all x y.((Decendant(x) & Animal(y) & PositivelyInfluentialTails(x,y)) -> PositivelyInfluentialTails(x,y))", "all x y.((Decendant(x) & Animal(y) & PositivelyImpactsSurvival(x,y)) -> PositivelyImpactsSurvival(x,y))"]}
{"id": "entailmentbank_validation_471", "nl": "the decendants of an animal with better hearing will also have better hearing.", "fol": "", "prediction": ["all x y.((Animal(x) & Decendant(y) & BetterHearing(x) & Animal(y)) -> BetterHearing(x))", "all x y.((Animal(x) & Decendant(x,y) & BetterHearing(y)) -> BetterHearing(x))", "all x.((Decendant(x) & Animal(x) & BetterHiring(x)) -> BetterHiring(x))", "all x.((Decendant(x) & Animal(x) & BetterHearing(x)) -> BetterHearing(x))", "all x y.((Animal(x) & Decendant(x,y)) -> BetterHearing(x,y))", "all x y.((Decendant(x) & Animal(y) & BetterHearing(y)) -> BetterHearing(x,y))", "all x.((Animal(x) & Decentant(x) & BetterHearing(x)) -> BetterHearing(x))", "all x y.((Decendant(x) & Animal(y) & BetterHearing(y)) -> BetterHearing(x,y))", "all x y.((Decendant(x) & Animal(y) & BetterHearing(y)) -> BetterHearing(x,y))", "all x.((Animal(x) & DecendantOfBetterHearing(x)) -> BetterHearing(x))", "all x.((Decendant(x) & Animal(x) & BetterHearing(x)) -> BetterHearing(x))", "all x.((Animal(x) & BetterHearing(x)) -> BetterHearing(x))", "all x.((Decendant(x) & Animal(x) & BetterHearing(x)) -> BetterHearing(x))", "all x y.((Decendant(x) & Animal(y) & BetterHearing(y,x)) -> BetterHearing(x,y))", "all x.((Animal(x) & BetterHearing(x)) -> BetterHearing(x))", "all x y.((Defendant(x) & Animal(y) & BetterHearing(y)) -> BetterHearing(x,y))"]}
{"id": "entailmentbank_validation_472", "nl": "mosquitos can sense carbon dioxide in the air.", "fol": "", "prediction": ["all x.(Moskito(x) -> SensiblesCarbonDioxide(x))", "all x.(Mosquito(x) -> CanSenseCirCO2(x))", "all x.(Mouse(x) -> (SensesCarbonDioxide(x) & InAir(x)))", "all x.(Moustic(x) -> SensitiveCarbonDioxide(x))", "all x.(Mosquito(x) -> (SensesCarbonDioxide(x) & InAir(x)))", "all x y.((Moskito(x) & Air(y)) -> Sensitor(x,y))", "all x.(Mosquito(x) -> CanSenseCarbonDioxide(x))", "all x.(Mosquito(x) -> SensitsCarbonDioxideInAir(x))", "all x.(Moisture(x) -> (SensesCarbonDioxide(x,air) | SenseCanSenseCarbonDioxide(x,air)))", "all x.(Mouse(x) -> CanSenseCarbonDioxideInAir(x))", "all x.(Mouse(x) -> CanSenseCarbonDioxideInAir(x))", "all x.(Moskito(x) -> SensitsCarbonDioxide(x))", "all x.(Moskito(x) -> Sensitor(x,CarbonDioxide))", "all x.(Mosquito(x) -> CanSenseCarbonDioxide(x))", "all x.(Moisquito(x) -> SensorsCarbonDioxide(x))", "all x.(Mosquito(x) -> SensesCarbonDioxide(x))"]}
{"id": "entailmentbank_validation_473", "nl": "animals are a source of carbon dioxide by exhaling.", "fol": "", "prediction": ["all x.(Animal(x) -> SourceOfCarbonDioxideByExhaling(x))", "all x.(Animal(x) -> SourceOfCarbonDioxide(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByExhaling(x))", "all x.(Animal(x) -> SourceOfCarbonDioxide(x,Exhaling))", "all x.(Animal(x) -> SourceOfCarbonDioxideByExhaling(x))", "all x y.((Animal(x) & CO2Source(y)) -> Exhale(x,y))", "all x.(Animal(x) -> SourceOfCarbonDioxideByExhaling(x))", "all x y.((Animal(x) & CarbonDioxide(y)) -> SourceByExhaling(x,y))", "all x.(Animal(x) -> SourceOfCarbonDioxideByExhaling(x))", "all x.(Animal(x) -> SourceOfCarbonDioxide(x))", "all x.(Animal(x) -> CarbonDioxideSource(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByExhaling(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByExhaling(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByExhaling(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByExhaling(x))", "all x.(Animal(x) -> SourceOfCarbonDioxide(x))"]}
{"id": "entailmentbank_validation_474", "nl": "mosquitos sense animals by sensing their carbon dioxide emissions.", "fol": "", "prediction": ["all x y.((Mosquito(x) & Animal(y)) -> Sensite(x,y))", "all x.(Moskito(x) -> (SensesAnimals(x) & SensitsCarbonDioxideEmissions(x)))", "all x y.((Mosquito(x) & Animal(y)) -> SensitsBySensingCarbonDioxideEmissions(x,y))", "all x.(Mosquito(x) -> (SensesAnimals(x) & SenseCarbonDioxideEmissions(x)))", "all x y.((Mosquito(x) & Animal(y) & SenseIt(x,y)) -> SensorsCO2Emissions(x,y))", "all x.(Mosquito(x) -> (SensesAnimals(x) & SenseCarbonDioxideExmissions(x)))", "all x.(Mouse(x) -> (SensesAnimalsBySensingCarbonDioxideEmissions(x)))", "all x.((Mush(x) & SensitCarbonDioxide(x)) -> SenseAnimal(x))", "all x y.((Mosquito(x) & Animal(y)) -> SensitsByCarbonDioxideEmissions(x,y))", "all x y z.((Mosquito(x) & Animal(y) & CarbonDioxideEmission(z)) -> SenseBy(x,z))", "all x.(Mosquito(x) -> (SensesAnimals(x) & SensingCarbonDioxideEmissions(x)))", "all x y z.((Mosquito(x) & Animal(y) & CarbonDioxide(z)) -> Sense(x,y,z))", "all x.(Moissock(x) -> (SensesAnimals(x) & SentsCarbonDioxideEmissions(x)))", "all x y.((Moskito(x) & Animal(y) & CarbonDioxideEmissions(x)) -> Sense(x,y))", "all x.(Moskito(x) -> (SensesAnimals(x) & SensesesCarbonDioxideEmissions(x)))", "all x y.((Moskito(x) & Animal(y)) -> Sensits(x,y))"]}
{"id": "entailmentbank_validation_475", "nl": "living things eat their food source.", "fol": "", "prediction": ["all x y.((LivingAtmosphere(x) & FoodSource(y)) -> Eats(x,y))", "all x.(LivingThing(x) -> EatsFoodSource(x))", "all x y.((LivingThing(x) & FoodSource(y)) -> Eats(x,y))", "all x.(LivingThing(x) -> EatsFoodSource(x))", "all x.(LivingThing(x) -> EatsFoodSource(x))", "all x.(LivingThing(x) -> EatsFoodSource(x))", "all x.((LivingThing(x) & FoodSource(x)) -> Eats(x))", "all x.(LivingThou(x) -> EatsFoodSource(x))", "all x.((LivingThing(x) & EatsFoodSource(x)) -> LivesIn(x))", "all x.(Living(x) -> EatFoodSource(x))", "all x.((Living(x) & FoodSource(x)) -> Eats(x))", "all x.(LivingThing(x) -> EatsFoodSource(x))", "all x.(LivingThing(x) -> EatsFoodSource(x))", "all x.(LivingThing(x) -> EatsFoodSource(x))", "all x.(FoodSource(x) -> EatsSurplus(x))", "all x.(LivingThing(x) -> EatsFoodSource(x))"]}
{"id": "entailmentbank_validation_476", "nl": "mosquitos eat blood of animals.", "fol": "", "prediction": ["all x.(Moskito(x) -> EatsLiverOfAnimals(x))", "all x.(Moisquito(x) -> EatsBloodOfAnimals(x))", "all x y z.((Mosquito(x) & Animal(y) & Blood(z)) -> Eats(x,y,z))", "all x.(Mosquito(x) -> EatsBloodOfAnimals(x))", "all x.(Mouse(x) -> EatsBloodOfAnimals(x))", "all x y z.((Mouse(x) & Animal(y) & Animal(z)) -> EatsBlood(x,y,z))", "all x.(Mosquito(x) -> EatsBloodOfAnimals(x))", "all x y.((Mosquito(x) & Animal(y)) -> EatsBlood(x,y))", "all x y z.((Mosquito(x) & Animal(y) & (Blood(z) | Animal(z))) -> Eats(x,y,z))", "all x y.((Mouse(x) & Animal(y)) -> EatsBlood(x,y))", "all x y z.((Mouse(x) & Animal(y) & Blood(z)) -> Eat(x,y,z))", "all x y.((Mosquito(x) & Animal(y)) -> EatsBlood(x,y))", "all x.(Mosquito(x) -> EatsBloodOfAnimals(x))", "all x.(Moskito(x) -> EatsBloodOfAnimal(x))", "all x y z.((Mouse(x) & Animal(y) & Blood(z)) -> Eats(x,y,z))", "all x.(Mustach(x) -> EatsBloodOfAnimals(x))"]}
{"id": "entailmentbank_validation_477", "nl": "animals are a source of food for mosquitos.", "fol": "", "prediction": ["all x y.((Animal(x) & Mosquito(y)) -> SourceOfFood(x,y))", "all x.(Animal(x) -> FoodSourceForMoskitos(x))", "all x.(Animal(x) -> SourceOfFood(x))", "all x y.((Animal(x) & Mosquito(y)) -> SourceOfFoodFor(x,y))", "all x.(Animal(x) -> SourceOfFoodForMouses(x))", "all x y.((Animal(x) & Mosquito(y)) -> FoodSourceFor(x,y))", "all x.(Animal(x) -> SourceOfFood(x,Mooshes))", "all x.(Animal(x) -> SourceOfFoodForMouses(x))", "all x.(Animal(x) -> FoodSourceForMoskitos(x))", "all x y.((Animal(x) & Mosquito(y)) -> SourceOfFood(x,y))", "all x.(Animal(x) -> SourceOfFoodForMosquitos(x))", "all x.(Animal(x) -> SourceOfFood(x))", "all x.(Animal(x) -> ProvidesFoodForMouses(x))", "all x.(Animal(x) -> SourceOfFoodForMouses(x))", "all x.(Animal(x) -> SourceOfFood(x))", "all x.(Animal(x) -> (SourceOfFood(y) & Mosquitos(z)))"]}
{"id": "entailmentbank_validation_478", "nl": "sensing food has a positive impact on finding food.", "fol": "", "prediction": ["all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))", "all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))", "all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))", "all x y.((SensingFood(x) & Food(y)) -> PositiveImpactOnFinding(x,y))", "all x.(SensingFood(x) -> PositiveImpactOnFallingFood(x))", "all x y z.((SensingFood(x) & Food(y) & Food(z)) -> PositiveImpactOnFinding(x,y,z))", "all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))", "all x y.((SensingFood(x) & Food(y)) -> PositiveImpact(x,y))", "all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))", "all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))", "all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))", "all x y.((SensingFood(x) & Food(y)) -> PositiveImpactOnFindingFood(x,y))", "all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))", "all x y.((SensingFood(x) & FindingFood(y)) -> PositiveImpact(x,y))", "all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))", "all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))"]}
{"id": "entailmentbank_validation_479", "nl": "sensing animals has a positive impact on a mosquito's ability to find food.", "fol": "", "prediction": ["all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOn(x,y))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFoodFacilitability(x,y))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFunction(x,y))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFacilityToFindFood(y,x))", "all x.(SensingAnimals(x) -> PositiveImpactOnMouthBeverage(x))", "all x y z.((SensingAnimals(x,y) & Mosquito(z)) -> PositiveImpact(x,z))", "all x y.((SensingAnimals(x) & Mosquito(y) & EasilyReachesFood(x,y)) -> PositiveImpactOnFacility(x,y))", "all x.((SensingAnimals(x) & PositiveImpact(x)) -> LocatesFood(x))", "all x y z.((SensingAnimals(x) & Mosquito(y) & Food(z)) -> PositiveImpactOnImpactOnImpact(x,y,z))", "all x y.((SensingAnimals(x,y) & Mosquito(y)) -> PositiveImpactOnFindingFood(y))", "all x y z.((SensesAnimals(x) & Mosquito(y) & Food(z)) -> PositiveImpactOn(y,z))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnSearch(y,food))", "all x y.((SensesAnimal(x) & Mosquito(y)) -> PositiveImpactOnAbilityToFindFood(x,y))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFacilityToFindFood(x,y))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFacility(x,y))", "all x.(SensesAnimals(x) -> PositiveImpactOnFindFood(x))"]}
{"id": "entailmentbank_validation_480", "nl": "sensing carbon dioxide has a positive impact on a mosquito's ability to find food.", "fol": "", "prediction": ["all x.((SensingCarbonDioxide(x) & Mosquito(x)) -> PositiveImpactOnQueueToFindFood(x))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFoodChange(x,y))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFacilityToFindFood(x,y))", "all x.(SensingCarbonDioxide(x) -> PositiveImpactOnFollowingFood(x))", "all x y z.((Sensing(x,y) & CarbonDioxide(y) & Mosquito(z)) -> PositiveImpactOnFood(z,x))", "all x.((SensingCarbonDioxide(x) & Moth(x)) -> PositiveImpactOnFindingFood(x))", "all x.(InsightingCarbonDioxide(x) -> PositiveImpactOnMosquitosFacility(x))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpact(x,y))", "all x.(SensingCarbonDioxide(x) -> PositiveImpactOnMouse(x))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpact(x,y))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpact(x,y))", "all x.(SensingCarbonDioxide(x) -> PositiveImpactOnMouseFindingFood(x))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> (PositiveImpact(x,y) & FindFood(y)))", "all x.((SensingCarbonDioxide(x) & Moth(y)) -> PositiveImpactOnFacility(x,y))", "all x.(SensingCarbonDioxide(x) -> PositiveImpactOnMosquitosCaliber(x))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpact(x,y))"]}
{"id": "entailmentbank_validation_481", "nl": "if a living thing requires something then that something has a positive impact on that living thing.", "fol": "", "prediction": ["all x.((LivingThing(x) & Requires(x)) -> PositiveImpact(x))", "all x.((LivingThing(x) & Requires(x)) -> PositiveImpactOnLivingThing(x))", "all x y.((LivingWord(x) & LivingThing(y) & Requires(x,y)) -> PositiveImpact(x,y))", "all x y.((LivingThing(x) & Requires(x,y) & Requires(x,y)) -> PositiveImpact(x))", "all x y.((LivingThing(x) & Requires(x,y)) -> PositiveImpact(x,y))", "all x.((LivingThing(x) & Requires(x,y)) -> PositiveImpactOn(x,z))", "all x.((LivingThing(x) & Requires(x)) -> PositiveImpactOn(x,livingThing))", "all x y z.((LivingThing(x) & Requires(x,y) & LivingThing(z) & PositiveImpact(x,z)) -> HasInfluence(x,y,z))", "all x y z.((LivingThing(x) & Requires(x,y) & LivingThing(z)) -> PositiveImpact(x,z))", "all x.((LivingDoor(x) & Requires(x)) -> PositiveImpact(x))", "all x.((LivingThing(x) & Requires(x)) -> PositiveImpact(x))", "all x y.((Requires(x,y) & LivingThing(y)) -> HasPositiveImpact(x,y))", "all x.((LivingThing(x) & Requires(x)) -> PositiveImpactOn(x,LivingThing))", "all x y.((LivingThing(x) & LivingThing(y)) -> Requires(x,y))", "all x y.((LivingThing(x) & LivingThing(y)) -> PositiveImpact(x,y))", "all x y.((LivingThing(x) & Requires(x)) -> PositiveImpact(y))"]}
{"id": "entailmentbank_validation_482", "nl": "a living things require water for survival.", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresWaterForSurvival(x))", "all x.(Woman(x) -> RequiresWaterForSurvival(x))", "all x.(LivingThing(x) -> RequiresWaterForSurvival(x))", "all x.(LivingThing(x) -> RequiresWaterForSurvival(x))", "all x.(LivingThing(x) -> RequiresWaterForSurvival(x))", "all x.((LivingThing(x) & RequiresWaterForSurvival(x)) -> RequiresWaterForSurvival(x))", "all x.(LivingThing(x) -> RequiresWaterForSurvival(x))", "all x.(LeivingThing(x) -> RequiresWaterForSurvival(x))", "all x.(LivingThing(x) -> RequiresWaterForSurvival(x))", "all x.(LivingThing(x) -> RequiresWaterForSurvival(x))", "all x.((LivingThing(x) & RequiresWater(x)) -> SurvivalRequiresWater(x))", "all x y.((LivingThing(x) & Water(y)) -> RequiresForSurvival(x,y))", "all x.(LivingThing(x) -> RequiresWaterForSurvival(x))", "all x.((LivingThing(x) & RequiresWater(x)) -> Sustained(x))", "all x.(LivingThing(x) -> RequiresWater(x))", "all x.(LivingThing(x) -> RequiresWaterForSurvival(x))"]}
{"id": "entailmentbank_validation_483", "nl": "water has a positive impact on a living thing's survival.", "fol": "", "prediction": ["all x.(Water(x) -> PositiveImpactOnLifesurvival(x))", "all x.((Water(x) & PositiveImpactOnLivingThingsSurvival(x)) -> PositiveImpactOnDating(x))", "all x y z.((Water(x) & LivingThing(y) & Survance(z)) -> PositiveImpactOn(x,y,z))", "all x y.((Water(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((Water(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(Water(x) -> PositiveImpactOnLiveingThingsSurvival(x))", "all x y.((Water(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((Water(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x y z.((Water(x) & LivingThing(y) & ImpactOverSurvival(z)) -> PositiveImpactOnSurvival(x,y,z))", "all x.(Water(x) -> (PositiveImpactOnLivingThingsSurvival(x)))", "all x.(Water(x) -> (ImpactsOnSurvival(x,livingThing) | PositiveImpact(x,livingThing)))", "all x y.((Water(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(Water(x) -> PositiveImpactOnLivingThingSurvival(x))", "all x y.((Water(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(Water(x) -> PositiveImpactOnLivingThingsSurvival(x))", "all x.((Water(x) & LivesThing(y)) -> PositiveImpact(x,z))"]}
{"id": "entailmentbank_validation_484", "nl": "increasing the availability of something that has a positive impact on a living thing's survivial can have a positive impact on that living thing's survival.", "fol": "", "prediction": ["all x y.((IncreasingAvailabilityOf(x,y) & LivingThing(s) & PositiveImpactOnsurvivial(x,y)) -> PositiveImpactOnSurvivial(y,z))", "all x y.((IncreasingAvailability(x) & PositiveImpactOnLivingThingsurvival(x) & LivingThingSurvival(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((IncreasedAvailabilityOf(x,y) & PositiveImpact(x)) -> PositiveImpactOnSurvival(y))", "all x y.((IncreasingAvailabilityOfAnother(x) & PositiveInfluence(x,y) & LivingThingsSurvival(y)) -> PositiveInfluence(x,y))", "all x y.((ReducingAvailabilityOfSomething(x) & PositiveImpactOnLivingThingSurvivial(x)) -> PositiveImpactOnLivingThingSurvivial(y))", "all x.((IncreasingAvailabilityOfAnother(x) & PositiveImpactOnLivedThingSurvival(x)) -> PositiveImpactOnLivingThingSurvivial(x))", "all x y.((IncreasingAvailability(x) & LivingThing(y) & PositiveImpact(x,y)) -> PositiveImpact(x,y))", "all x y.((IncreasingAvailability(x) & LivingThingToCurrent(x,y) & PositiveImpactOnSurvival(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((IncreasingAvailabilityOfAdvanced(x) & ChangingRealityOfAdvanced(x,y) & LivingThing(y)) -> PositiveImpactOnSurvival(y,z))", "all x y.((GrowingAvailabilityOf(x,y) & PositiveImpactOnSurvival(x,y)) -> PositiveImpactOnSurvivial(y,x))", "all x y.((IncreasedAvailabilityOfResearch(x) & LivingThing(y) & PositiveImpactAtSurvivial(x,y)) -> PositiveImpactOnSurvivial(x,y))", "all x.((IncreasingAvailability(x) & PositiveImpactOnLivingTree(x)) -> PositiveImpactOnBluthingSurvivial(x))", "all x.(CanhavePositiveImpact(x) -> PositiveImpactOnSurvivial(x))", "all x.((IncreasedAvailabilityOfSpecialTrust(x) & PositiveImpactOnLiveingThingsSurvival(x)) -> PositiveImpactOnLiveingThingsSurvival(x))", "all x y.((PositiveImpactOnLivedThing(x,y) & LivingThing(y)) -> PositiveImpactOnSurvivial(x,y))", "all x y.((IncreasedAvailability(x) & LivingThings(y) & BenefitsCanWithholdSurvival(x,y)) -> PositiveImpactOnSurvivial(x,y))"]}
{"id": "entailmentbank_validation_485", "nl": "increasing the availability of water for a living thing has a positive impact on that living thing's survival.", "fol": "", "prediction": ["all x y z.((LivingThing(x) & Water(y) & LivingThing(z) & IncreasedAvailability(x,y)) -> PositiveImpact(x))", "all x.((IncreasedWaterAvailability(x) & LivingThing(x)) -> PositiveImpactOnSurvival(x))", "all x y z.((LivingThing(x) & WaterAvailability(y) & LivingThing(z)) -> PositiveImpactOnSurvival(x,y,z))", "all x.(IncreaseDistributionOfWater(x) -> PositiveResultaneance(x))", "all x.((QuickWater(x) & LivingThing(x)) -> PositiveSurvivalImpact(x,livingThing))", "all x y.((LivingThing(x) & LivingThing(y)) -> (IncreasesWaterAvailability(x,y) & PositiveInfluenceOnSurvival(x,y)))", "all x y.((LivingThing(x) & AvailableWater(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((LivingThing(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((LivingThing(x) & LivingThing(y) & IncreasesWaterAvailability(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((LivingThing(x) & LivingThing(y)) -> IncreasesWaterAvailabilityPositiveInterval(x,y))", "all x y.((LivingThing(x) & LivingThing(y)) -> IncreasesWaterAvailability(x,y))", "all x.(IncreasedWaterAvailability(x) -> PositiveInfluenceOnLivingThingSurvival(x))", "all x y.((LivingThing(x) & LivingThing(y) & AccessHopWater(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((LivingThing(x) & LivingThing(y) & IncreasesAvailabilityOfWater(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((LivingThing(x) & LivingThing(y)) -> IncreasedWaterAvailabilityInfluenceOnSurvival(x,y))", "all x y.((LivingThing(x) & LivingThing(y)) -> IncreasesWaterAvailability(x,y))"]}
{"id": "entailmentbank_validation_486", "nl": "storing something is a kind of method for increasing the availability of something.", "fol": "", "prediction": ["all x.((Stores(x) & IncreasesAvailabilityOf(x)) -> AvailabilityMode(x))", "all x y.((Storage(x) & Something(y)) -> IncreasesAvailability(x,y))", "all x.((Stores(x) & AccessibilityOf(x)) -> MethodForIncreases(x))", "all x y.(Stores(x,y) -> IncreasesAvailabilityOf(y,x))", "all x y.((Stores(x) & Something(y)) -> IncreasedAvailabilityOf(x,y))", "all x y.((Stores(x,y) & Something(y)) -> IncreasesAvailability(x,y))", "all x.(Storing(x) -> IncreasesAvailabilityOf(x,something))", "all x.(Storing(x) -> IncreasesAvailabilityAtWork(x))", "all x.(Stores(x) -> IncreasesAvailability(x))", "all x.(StoresSomething(x) -> IncreasesAvailabilityOfSomething(x))", "all x.(Stores(x) -> IncreasesAvailabilityOfSomething(x))", "all x y.((Stores(x) & Something(y)) -> IncreasingAvailabilityOf(x,y))", "all x y.((Stores(x) & Something(y)) -> IncreasesAvailability(x,y))", "all x.(Store(x) -> IncreasesAvailabilityOfSomething(x))", "all x.(Storing(x) -> IncreasesAvailabilityOfSomething(x))", "all x y.((Stores(x) & Something(y)) -> (IncreasesAvailabilityOfSomething(x,y) | IncreasesAvailabilityOfSomething(x,y)))"]}
{"id": "entailmentbank_validation_487", "nl": "storing water has a positive impact on a living thing's survival by increasing the availability of water.", "fol": "", "prediction": ["all x y.((StoresWater(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x.((StoresWater(x) & IncreasesWaterAvailability(x)) -> PositiveImpactOnLivingThingSurvival(x))", "all x y.((StoresWater(x) & LivingThing(y) & Water(z)) -> PositiveImpactOnSurvivalThroughIncreasedAvailability(x,y,z))", "all x y.((StoredWater(x) & LivingThing(y)) -> (PositiveImpactOnSurvival(x,y) & IncreasedAvailabilityOfWater(x,y)))", "all x y.((StoragesWater(x) & LivingThing(y)) -> (PositiveImpact(x,y) & ImprovesWaterAvailability(x,y)))", "all x y.((StoresWater(x) & LivingThing(y)) -> IncreasesWaterAvailabilityIncreasesSurvival(x,y))", "all x.((StoresWater(x) & PositiveImpactOnLivingDingsSurvival(x)) -> IncreasesAvailabilityOfWater(x))", "all x.((StoresWater(x) & PositiveImpactOnLivingThingSurvival(x)) -> IncreasesWaterAvailability(x))", "all x y.((StoresWater(x) & LivingThing(y)) -> PositiveImpact(x,y))", "all x y.((StoresWater(x) & LivingThing(y) & IncreasesWaterAvailability(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x.(StoresWater(x) -> PositiveImpactOnSurvival(x))", "all x y z.((StoredWater(x) & LivingThing(y) & Water(z) & PositiveImpactOfSurvival(x,y,z)) -> ImprovesAvailabilityNumberOfWater(x,y,z))", "all x.(StoresWater(x) -> (PositiveImpactOnSurvival(x) & IncreasesAvailabilityOfWater(x)))", "all x y.((StoresWater(x) & LivingThing(y) & IncreasesAvailabilityOfWater(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((StoredWater(x) & LivingThing(y) & IncreasedWaterAvailability(x,y)) -> PositiveImpactOnSurvival(x))", "all x y.((StoresWater(x) & LivingThing(y)) -> (PropositiveImpact(x,y) & IncreasedAvailabilityOfWater(y)))"]}
{"id": "entailmentbank_validation_488", "nl": "dry means low in amount of water.", "fol": "", "prediction": ["all x.(Dry(x) -> LowRangeOfWater(x))", "all x.(Dry(x) -> LowWaterAmount(x))", "all x.(Dry(x) -> LowWaterAmount(x))", "all x.(Drough(x) -> LowInAmountOfWater(x))", "all x.(Dry(x) -> LowWaterAmount(x))", "all x.(Dry(x) -> LowEnoughWater(x))", "all x.(Dry(x) -> LowSurfaceWater(x))", "all x.(Dry(x) -> LowInWater(x))", "all x.(Dry(x) -> LowInWater(x))", "all x.(Dry(x) -> LowInWater(x))", "all x.(Dry(x) -> LowEnoughWater(x))", "all x.(Dry(x) -> LowWaterVolume(x))", "all x.(Drough(x) -> LowWaterElements(x))", "all x.(Dry(x) -> LowWaterAmount(x))", "all x.(Dry(x) -> LowWaterAmount(x))", "all x.(Dry(x) -> LowAmountOfWater(x))"]}
{"id": "entailmentbank_validation_489", "nl": "as dryness increases in an environment, the available water in that environment will decrease.", "fol": "", "prediction": ["all x.(DrynessIncreasesInEnvironment(x) -> DecreasedWaterInEnvironment(x))", "all x.([DustnessInDecline(x) & Environment(x)) -> AvailableWaterDecrease(x))", "all x y.((Dryness(x) & Environment(y)) -> DecreaseInWater(x,y))", "all x y.(AsDrynessIncreases(x,y) -> WaterDecreases(y))", "all x y.((Dryness(x) & Environment(y) & IncreasedDryness(x,y)) -> DeclinedWater(x,y))", "all x y.((Environment(x) & Environment(y) & IncreasesDryness(x,y)) -> DecroisesWaterDisposal(x,y))", "everything x.((DrynessElevatedInEnvironment(x) | WaterAvailableInEnvironment(x))) -> WithIncrease(x))", "all x y.((Dryness(x) & Environment(y) & IncreasesEnergy(x,y)) -> AvailableWaterDecreases(x,y))", "all x y.((Dryness(x) & Environment(y)) -> Increases(x,y))", "all x y.((Dryness(x) & Environment(y) & IncreasesIn(x,y)) -> DecreasesWaterAvailability(x,y))", "all x y.((Dryness(x) & Environment(y) & Increased(x,y)) -> DispatchResourcedWater(x,y))", "all x y.((Dryness(x) & Environment(y) & Increases(x,y)) -> DecreasesWaterAvailability(x,y))", "all x y.((DrynessIncreases(x) & Environment(y)) -> DecreasesWaterAvailable(x,y))", "all x y z.((Environment(x) & DrynessIncrease(x,y) & Environment(z)) -> DecreasedWaterDepends(x,z))", "all x y z.((Environment(z) & Environment(x,y) & Dryness(z)) -> DecreasedStateWater(x,z))", "all x y.((Environment(x) & Environment(y)) -> (DecreasesWater(x) & IncreasesDryness(x)))"]}
{"id": "entailmentbank_validation_490", "nl": "a dry environment is low in availability of water.", "fol": "", "prediction": ["all x.(DryEnvironment(x) -> LowAvailabilityOfWater(x))", "all x.(DryEnvironment(x) -> LowAvailabilityOfWater(x))", "all x.(DryEnvironment(x) -> LowWaterAvailability(x))", "all x.(DryEnvironment(x) -> LowAvailabilityOfWater(x))", "all x.(DryEnvironment(x) -> LowAvailabilityOfWater(x))", "all x.(DryEnvironment(x) -> LowAvailabilityOfWater(x))", "all x.(DryEnvironment(x) -> LowWaterAvailability(x))", "all x.(DryEnvironment(x) -> LowAvailabilityOfWater(x))", "all x.(DryEnvironment(x) -> LowWaterAvailability(x))", "all x.(DryEnvironment(x) -> LowAvailabilityOfWater(x))", "all x.(DryEnvironment(x) -> LowAvailabilityOfWater(x))", "all x.(DryEnvironment(x) -> LowAvailabilityOfWater(x))", "all x.(DryEnvironment(x) -> LowAvailabilityOfWater(x))", "all x.(DryEnvironment(x) -> LowWaterAvailability(x))", "all x.(DryEnvironment(x) -> LowWaterAvailability(x))", "all x.(DryEnvironment(x) -> LowWaterAvailability(x))"]}
{"id": "entailmentbank_validation_491", "nl": "storing water increases the water available to organisms in a dry environment.", "fol": "", "prediction": ["all x.((StoresWater(x) & IncreasesWaterAvailableInDryEnvironment(x)) -> IncreasesWaterAvailableToOrganisms(x))", "all x y.((OrganizingWater(x) & Bioorganism(y)) -> IncreasesWaterAvailableTo(x,y))", "all x y.((OrganizingWater(x) & Organism(y) & DistinctEnvironment(y)) -> IncreasesWaterAvailability(x,y))", "all x.((StoresWater(x) & WaterStart(x)) -> IncreasesWaterAvailability(x))", "all x.((StoringWater(x) & IncreasedWaterAvailability(x)) -> OrganismsAvailDryEnvironment(x))", "all x y.((StoredWater(x) & Organism(y)) -> IncreasesWaterAvailable(x,y))", "all x y z.((StoresWater(x) & Organism(y) & DryEnvironment(z)) -> IncreasesWaterResponsibility(x,y,z))", "all x y.((StoresWater(x) & Organism(y)?) -> IncreasesWaterInDryEnvironment(x,y))", "all x y.((StoragesWater(x) & Organism(y)) -> IncreasesWaterAcquiredInDryEnvironment(x,y))", "all x y.((StoresWater(x) & Organism(y)) -> IncreasesWaterAvailableTo(x,y))", "all x y.((StoredWater(x) & Organism(y)) -> IncreasesWaterAvailability(x,y))", "all x.(StoresWater(x) -> IncreasesWaterWaterAvailability(x))", "all x y.((OrganizingWater(x) & DryEnvironment(y)) -> ImprovesWaterAvailability(x,y))", "all x y z.((StoresWater(x) & Organism(y) & DryEnvironment(z)) -> IncreasesWaterAvailability(x,y,z))", "all x y.((StoragesWater(x) & Organism(y)) -> IncreasesWaterAvailability(x,y))", "all x y.((StoresWater(x) & Organism(y) & DryEnvironment(y)) -> IncreasesWaterAvailability(x,y))"]}
{"id": "entailmentbank_validation_492", "nl": "adapting is when a living thing responds to a change in an environment.", "fol": "", "prediction": ["all x.(Adapting(x) -> (LivingThing(x) & RespondsToChange(x)))", "all x y.((LivingThing(x) & EnvironmentChange(y)) -> RespondsTo(x,y))", "all x y.((LevingThing(x) & Environment(y) & RespondsToChange(x,y)) -> Adapting(x))", "all x y.((LivingThing(x) & Environment(y) & RespondsToChange(x,y)) -> Adapting(x))", "all x y z.((LivingThing(x) & Environment(y) & Change(z) & RespondsTo(x,y,z)) -> Adapting(x))", "all x y z.((LivingThing(x) & Environment(y) & ChangeInEnvironment(z)) -> ReactsTo(x,y,z))", "all x y z.((LivingThing(x) & Environment(y) & Changed(x,y)) -> Adapts(x,z))", "all x.(Adapting(x) -> (LivingThingRespondsToChang(x) & Environment(x)))", "all x.(Adapting(x) -> (LivingThing(x) & RespondsToChange(x)))", "all x.(Adapting(x) -> RespondsToChange(x))", "all x y.((LivingThing(x) & Environment(y) & RespondsToChange(x,y)) -> Adapting(x))", "all x y.((LivingThing(x) & Environment(y)) -> RespondsToChangeInEnvironment(x,y))", "all x.(Adapting(x) -> exists y.(LivingThing(y) & ResponsesToChange(y,x)))", "all x y.((LivingThing(x) & Environment(y) & RespondsToChange(x,y)) -> Adapting(x,y))", "all x y.((LivingThing(x) & Environment(y) & RespondsToChange(x,y)) -> Adapting(x,y))", "all x y.((LivingThing(x) & Environment(y)) -> RespondsToChange(x,y))"]}
{"id": "entailmentbank_validation_493", "nl": "storing water is an adaptation to a dry environment.", "fol": "", "prediction": ["(StoresWater(s) & DryEnvironment(s))", "all x.(Water(x) -> AdaptationToDryEnvironment(x))", "all x y.((StoresWater(x) & DryEnvironment(y)) -> AdaptationTo(x,y))", "all x.((StoresWater(x) & DryEnvironment(x)) -> AdaptationTo(x,y))", "all x y.((StoresWater(x) & DryEnvironment(y)) -> Adaptation(x,y))", "all x y.((StoredWater(x) & DryEnvironment(y)) -> AdaptationTo(x,y))", "all x.(StoringWater(x) -> AffinedToDryEnvironment(x))", "all x.(StoreWater(x) -> AdaptationToDryEnvironment(x))", "all x.(StoresWater(x) -> DryEnvironmentAdaptation(x))", "all x y.((StorageWater(x) & DryEnvironment(y)) -> AdaptationTo(x,y))", "all x.(StoresWater(x) -> AdaptationToDryEnvironment(x))", "all x.(StoresWater(x) -> AdoptionToDryEnvironment(x))", "all x.(StoresWater(x) -> AdaptationToDryEnvironment(x))", "all x.(StoresWater(x) -> AdaptationToDryEnvironment(x))", "all x.(StoresWater(x) -> AdaptationToDryEnvironment(x))", "all x.(StoresWater(x) -> AdaptationToDryEnvironment(x))"]}
{"id": "entailmentbank_validation_494", "nl": "as the available water in an environment increases, the populations of organisms in that environment will increase.", "fol": "", "prediction": ["all x y.((MoreWater(x) & Environment(y) & IncreasesAvailableWater(x,y)) -> IncreasesPopulation(x,y))", "all x.((WaterAvailability(x) & Environment(x)) -> PopulationAccrostination(x))", "all x y z.((WaterAvailability(x) & Environment(y) & OrganismPopulation(z) & Increases(x,y,z)) -> PopulationInEnvironment(z,y))", "all x y z.((Availability(x) & Environment(y) & Organism(z)) -> (Increases(x,y) & Population(y)))", "all x y z.(((AvailabilityWater(x) & Environment(y) & Organism(z) & Increases(x,y)) -> PopulationsInEnvironment(z,y,z))", "all x y z.((WaterInEnvironment(x) & AvailableWater(x) & Organismpopulation(y) & Environment(z)) -> Increases(y,z))", "all x.((AvailabilityWater(x) & Environment(x)) -> PopulationInEnvironment(x))", "all x y.((WaterAvailability(x) & Environment(y) & Increasing(x,y)) -> PopulationsInEnvironment(x,y))", "all x.((WaterAvailability(x) & Environment(x)) -> PopulationInEnvironment(x))", "all x y.((AsWaterAvailabilityInEnvironment(x) & Available(y)) -> PopulationDecrease(x,y))", "all x.((AsWaterAvailabilityInEnvironment(x) & Increases(x)) -> PopulationsAncientEnvironmentIncreases(x))", "all x y.((AsWaterAvailabilityInEnvironment(x) & OrganismPopulation(y)) -> Increases(y))", "all x y z.((AllowsWaterInEnvironment(x,y) & Environment(z) & IncreasesRelease(y,z)) -> Population(w))", "all x y.((AvailabilityToWater(x) & Environment(y)) -> PopulationInEnvironment(x,y))", "all x.((AvailabilityInEnvironment(x) & Increases(x)) -> PopulationInEnvironment(x))", "all x y.((WaterAvailable(x) & Environment(y) & Increases(x,y)) -> PopulationsAdequacySupply(x,y))"]}
{"id": "entailmentbank_validation_495", "nl": "an aquatic animal requires great amounts of water to thrive.", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWater(x))", "all x.(AquaticAnimal(x) -> RequiresEnormousLevelsOfWaterToThrive(x))", "all x.(AquaticAnimal(x) -> RequiresMoreWaterToThrive(x))", "all x.((AquaticAnimal(x) & GreatAmountsOfWater(x)) -> Thrives(x))", "all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWater(x))", "all x.(AquaticAnimal(x) -> (RequiresGreatAmountsOfWater(x) & Thrives(x)))", "all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWaterToThrive(x))", "all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWater(x))", "all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWaterToThrive(x))", "all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWater(x))", "all x.(WaterProximity(x) -> AquaticAnimalRequiresGreatAmountsToThrive(x))", "all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWaterSurvival(x))", "all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWater(x))", "all x.((AquaticAnimal(x) & GreatAmountsOfWater(x)) -> Thrives(x))", "all x.((AquaticAnimal(x) & GreatAmountsOfWater(x)) -> Thrives(x))", "all x.((Animal(x) & Aquatic(x)) -> RequiresGreatAmountsOfWaterToThrive(x))"]}
{"id": "entailmentbank_validation_496", "nl": "as water increases in an environment, the population of aquatic animals will increase.", "fol": "", "prediction": ["all x y z.((Water(x) & Environment(y) & AquaticAnimal(z)) -> IncreasesPopulation(z))", "all x y.((Water(x) & Environment(y) & Increases(x,y)) -> AquaticAnimalPopulation(x,y))", "all x y.((Water(x) & Environment(y) & Increases(x,y)) -> PopulationIncreases(y))", "all x y.((WaterInEnvironment(x) & AquaticAnimal(y) & IncreasesInEnvironment(x,y)) -> PopulationIncreases(y))", "all x y z.((Water(x) & Environment(y) & AquaticAnimal(z) & Increases(x,y)) -> PopulationIncreases(z,x))", "all x.((WaterInitial(x) & Environment(x)) -> PopulationImproves(x,AquaticAnimal))", "all x.((WaterInEnvironment(x) & IncreasedInEnvironment(x)) -> PopulationIncreased(x))", "all x y.((Water(x) & Environment(y) & Increases(x,y)) -> PopulationAquaticAnimal(x))", "all x y z.((Water(x) & Environment(y) & AquaticAnimal(z)) -> IncreasedPopulation(x,z))", "all x y.((Water(x) & Environment(y) & Increases(x,y)) -> PopulationIncrease(x))", "all x y.((Water(x) & EnvironmentalEnvironment(y)) -> Population(x,AquaticAnimals))", "all x y.((WaterInEnvironment(x) & AquaticAnimal(y)) -> IncreasedPopulation(y,x))", "all x.((Water(x) & Increases(x)) -> PopulationIncreases(x))", "all x y.((Water(x) & Environment(y) & Increases(x,y)) -> PopulationIncreases(x))", "all x.(((WaterInEnvironment(x) & IncreasesInEnvironment(x)) -> PopulationIncreases(x))", "all x.((water(x) & IncreasesEnvironment(x)) -> PopulationIncreasesAquaticAnimals(x))"]}
{"id": "entailmentbank_validation_497", "nl": "a salamander is a kind of aquatic animal.", "fol": "", "prediction": ["all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))"]}
{"id": "entailmentbank_validation_498", "nl": "as water increases in an environment, the population of salamanders may increase.", "fol": "", "prediction": ["all x.((WaterExpansion(x) & Environment(x)) -> PopulationIncrease(x))", "all x y.((Salamander(x) & Environment(y)) -> (IncreasesWater(x,y) & IncreasesPopulation(x,y)))", "all x.((WaterInEnergy(x) & Environment(y)) -> PopulationImproves(x,y))", "all x y.((Water(x) & Environment(y) & IncreasesIn(x,y)) -> -PopulationLimits(x,y))", "all x y.((Water(x) & Environment(y) & IncreasesInEnvironment(x,y)) -> IncreasesSalamanderPopulation(x))", "all x y z.((Salamander(x) & Water(y) & Environment(z)) -> IncreasedPopulation(x,y,z))", "all x y.((SalamanderPopulation(x) & Water(y) & IncreasesInEnvironment(y,x)) -> Increases(x,y))", "all x y.((WaterInEnvironment(x) & Population(y)) -> Increase(y))", "all x.((WaterIncreasesInEnvironment(x) & PopulationIncrease(x)) -> Salamander(x))", "all x y.((Water(x) & EnvironmentReduction(y)) -> (Population(y) & PopulationIncrease(y)))", "all x.((WaterIncrease(x) & Environment(x)) -> PopulationIncrease(x))", "all x y.((WaterInadequate(x) & Environment(y)) -> PopulationIncreases(x,y))", "all x y.((Salamander(x) & Environment(y) & WaterIncrease(y,x)) -> Population(x,y))", "all x.((WaterInEnvironment(x) & IncreaseDependent(x)) -> PopulationIncrease(x))", "all x y.((Water(x) & Environment(y) & Increased(x,y)) -> IncreasedPopulation(x,salamander))", "all x y.((Water(x) & Environment(y) & Increases(x,y)) -> PopulationIsIncreased(x,y))"]}
{"id": "entailmentbank_validation_499", "nl": "when a body of water receives more water than it can hold, a flood occurs.", "fol": "", "prediction": ["all x y z.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHoldMoreWater(x,z)) -> Flood(x))", "all x.((BodyOfWater(x) & ReceivesMoreWater(x) & CapableOfHolding(x)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWater(x) & CanHold(x,y)) -> Flood(x))", "all x y.((BodyOfWater(x) & ReceivesMoreWaterThanCanHold(x)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWater(x)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWater(x) & CanHold(x)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWaterThanCanHold(x)) -> FloodOccurs(x))", "all x y.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHost(y,x)) -> (Flood(x)))", "all x y.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHold(y)) -> FloodOccurs(x))", "all x y z.((BodyOfWater(x) & ReceivesMoreWaterThen(y) & CanHold(z) & MoreWaterThan(y,z)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWater(x) & CanHoldMoreWater(x)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWaterThanCanHold(x)) -> FloodOccurs(x))", "all x y z.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHold(x,z)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWater(x) & CanHave(x)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWaterThanCanFold(x)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWater(x)) -> FloodOccurs(x))"]}
{"id": "entailmentbank_validation_500", "nl": "as the amount of water in a body of water increases, the water levels will increase especially at the edge of that body of water.", "fol": "", "prediction": ["all x.((IncreasedBodyOfWater(x) & IncreasedWaterAmount(x)) -> An IncreasedWaterLevel(x))", "all x y.((BodyOfWater(x) & WaterAmount(y) & Increases(x,y)) -> WaterLevelsIncreasingEvenAtEdge(x,y))", "all x.((BodyOfWater(x) & IncreasesWaterAmount(x)) -> WaterLevelsIncrease(x))", "all x y z.((WaterLevelInBodyOfWater(x) & WaterAmountInAbodyOfWater(y) & Edge(z)) -> IncreasedWeatherLevelInBodyOfWater(x))", "all x y.((Cell(x,y) & BodyOfWater(y)) -> IncreasesWaterLevelsAtEdge(x,y))", "all x.((BodyOfWater(x) & IncreasedAmountOfWater(x)) -> WaterLevelsIncrease(x))", "all x.((BodyOfWater(x) & IncreasesWaterAmount(x)) -> WaterLevelsAtEdgeOfWater(x))", "all x y.((Beyond(x) & BodyOfWater(y)) -> IncreasesWaterLevels(x,y))", "all x.((IncreasesWaterAmount(x) & WaterLevelsAtEdge(x)) -> IncreasedWaterAtEdge(x))", "all x y.((BodyOfWater(x) & WaterLevel(y)) -> IncreasedAtEdge(x,y))", "all x y.((Product(x) & BodyOfWater(y) & IncreasesWaterAmount(x)) -> WaterLevelsIncrease(x,y))", "all x.((BodyOfWater(x) & IncreasesWasthOfWater(x)) -> WaterLevelsIncrease(x,y))", "all x y.((BodyOfWater(x) & WaterLevel(y) & Increases(x,y)) -> Increases(y))", "all x y.((BodyOfWater(x) & IncreasedAmountOfWater(x)) -> IncreasedWaterLevels(x,y))", "all x y z.((BodyOfWater(x) & WaterAmount(x,y) & BodyOfWater(z) & Increases(x)) -> WaterLevelsAtEdge(x,x,z))", "all x y.((BodyOfWater(x) & IncreasingWaterAmount(x) & WaterLevelIncreaseEdge(y)) -> Increase(x,y))"]}
{"id": "entailmentbank_validation_501", "nl": "a flood is a result of a large increase of water in a body of water.", "fol": "", "prediction": ["all x.(Flood(x) -> (LargeIncreaseOfWaterInBodyOfWater(x)))", "all x.(Flood(x) -> LargeIncreaseOfWater(x))", "all x y.((Flood(x) & BodyOFoot(y)) -> LargeIncreaseOfWater(x,y))", "all x.(Flood(x) -> (LargeIncreaseInWater(x) & BodyOfWater(x)))", "all x.(Flood(x) -> (LargeIncreaseOfWater(x) & InBodyOfWater(x)))", "all x y z.((Flood(x) & BodyOfWater(y) & InWater(z)) -> LargeIncreaseOfWater(x,y,z))", "all x.(Flood(x) -> LargeIncreaseOfWater(x))", "all x y.((Flood(x) & BodyOfWater(y)) -> LargeIncreaseOfWater(x,y))", "all x y.((Flood(x) & LargeIncrease(y,x)) -> ResultsOf(x,y))", "all x y.((Flood(x) & BodyOfWater(y)) -> LargeIncreaseOfWater(x,y))", "all x y.((Flood(x) & LargeIncreaseOfWater(y)) -> InWaterBodyOfWater(x,y))", "all x y.((Flood(x) & BodyOfWater(y) & LargeIncreaseOfWater(x,y)) -> Flood(z))", "all x.((Flood(x) & LargeIncreaseInWater(x)) -> InFlood(x))", "all x.(Lop(x) -> (LargeWaterIncrease(x) & BoundOfWater(x)))", "all x y.((Flood(x) & WaterInBodyOfWater(y)) -> LargeElevation(x,y))", "all x y.((Flood(x) & WaterBody(y)) -> LargeIncrease(x,y))"]}
{"id": "entailmentbank_validation_502", "nl": "a body of water is a part of some environments.", "fol": "", "prediction": ["all x y.((BodyOfWater(x) & Environment(y)) -> PartOf(x,y))", "all x.((BodyOfWater(x) & PartOfEnvironment(x)) -> PartOfEnvironment(x))", "all x.(BodyOfWater(x) -> PartOfEnvironments(x))", "all x.(BodyOfWater(x) -> PartOfEnvironments(x))", "all x.(BodyOfWater(x) -> PartOfEnvironment(x))", "all x y.((BodyOfWater(x) & Environment(y)) -> PartOf(x,y))", "all x.(BodyOfWater(x) -> PartOfEnvironment(x))", "exists x.(BodyOfWater(x) & PartOfEnvironments(x))", "all x.(BodyOfWater(x) -> PartOfEnvironment(x))", "all x.(BodyOfWater(x) -> PartOfEnvironments(x))", "all x y.((BodyOfWater(x) & Environment(y)) -> PartOf(x,y))", "all x.(BodyOfWater(x) -> PartOfEnvironments(x))", "all x.((BodyOfWater(x) & PartOfEnvironments(x)) -> PartOfEnvironments(x))", "all x.(BodyOfWater(x) -> PartOfEnvironments(x))", "all x.(BodyOfWater(x) -> PartOfEnvironment(x))", "all x.(BodyOfWater(x) -> PartOfEnvironment(x))"]}
{"id": "entailmentbank_validation_503", "nl": "a flood is a result of a large increase of water in an environment.", "fol": "", "prediction": ["all x.(Flood(x) -> LargeIncreaseOfWaterInEnvironment(x))", "all x y.((Flood(x) & Environment(y) & LargeIncreaseInWater(x,y)) -> ResultOf(x,y))", "all x.(Fluid(x) -> (LargeIncreaseOfWater(x) & InEnvironment(x)))", "all x.(Fluid(x) -> LargeIncreaseOfWater(x))", "all x.(Flood(x) -> (LargeIncreaseOfWater(x) & InEnvironment(x)))", "all x y.((Flood(x) & Environment(y)) -> LargeIncreaseOfWater(x,y))", "all x.(Flood(x) -> IncreasedWaterInEnvironment(x))", "all x.(Flood(x) -> LargeIncreaseInWater(x))", "all x.(Flood(x) -> exists y.(LargeIncrease(y) & Water(x) & Environment(x)))", "all x y.(Flood(x) -> (LargeIncreaseInWater(y) & Environment(z) & ResultOfIncrease(x,z)))", "all x y.((Flood(x) & Environment(y)) -> LargeIncrease(x,y))", "all x.(Flood(x) -> (LargeIncreaseOfWater(x) & InEnvironment(x)))", "all x y.((Flood(x) & Water(y)) -> LargeIncrease(x,y))", "all x y z.((Flood(x) & Water(y) & Environment(z) & LargeIncrease(x,y,z)) -> Flood(x))", "all x.(Flood(x) -> (LargeWaterInEnvironment(x) & IncreasedInEnvironment(x)))", "all x y.((Flood(x) & LargeWaterInEnvironment(y)) -> ResultsOf(x,y))"]}
{"id": "entailmentbank_validation_504", "nl": "a flood may cause the population of salamander to increase in an environment.", "fol": "", "prediction": ["all x y.((Flood(x) & Salamander(y) & Environment(z)) -> CanCausePopulationIncrease(x,y,z))", "all x y.((Flood(x) & Salamander(y)) -> MayFailToIncrease(x,y))", "all x y z.((Flood(x) & Salamander(y) & Environment(z)) -> CausesPositionToIncrease(x,y,z))", "all x y.((Flood(x) & SalamanderPopulation(y)) -> IncreasedInEnvironment(y))", "all x y.((Flood(x) & Salamander(y)) -> mayIncreasePopulation(y,Y))", "all x y.((Flood(x) & SalamanderPopulation(y) & Environment(y)) -> IncreasesInEnvironment(y,x))", "all x.((Flood(x) & SlamanderPopulationInEnvironment(x)) -> MayIncrease(x,SalamanderPopulation))", "all x.(Flood(x) -> CanCauseRapidLimitation(x))", "all x.(Lamp(x) -> MayIncreaseSalamanderPopulation(x))", "all x y.((Flood(x) & Salamander(y)) -> (ReducesPopulationInEnvironment(x,y)))", "all x y.((Flood(x) & SalamanderPopulation(y)) -> IncreaseSalamanderPopulation(x,y))", "all x y.((Flood(x) & SalamanderPopulation(y)) -> IncreasesInEnvironment(x,y))", "all x y z.((Flood(x) & Salamander(y) & Environment(z) & IncreaseSalamanderPopulation(y,z)) -> CausesIncrease(x,y,z))", "all x y.((Flood(x) & Salamander(y)) -> PopulationIncreases(x,y))", "all x y.((Light(x) & SalamanderPopulation(y) & Environment(z)) -> MayIncrease(y,z))", "all x.((Flood(x) & SalamanderPopulation(x)) -> IncreasesInEnvironment(x))"]}
{"id": "entailmentbank_validation_505", "nl": "frogs / turtles / fish / mice / birds are kinds of animals.", "fol": "", "prediction": ["all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)) -> Animal(x))", "all x.((Frog(x) & Turtle(x) & Fish(x) & Mouse(x) & Bird(x)) -> Animal(x))", "all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)) -> Animal(x))", "all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)) -> Animal(x))", "all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x)) -> Animal(x))", "all x.((Frog(x) | Turtle(x)) | Fish(x) | Mouse(x) | Bird(x)) -> Animal(x))", "all x.(Frog(x) & (Turtle(x) | Fish(x) | Mouse(x) | Bird(x))) -> Animal(x))", "all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)) -> Animal(x))", "all x.((Frog(x) | Turtle(x) | Fish(x)|Mouse(x) | Bird(x)) -> Animal(x))", "all x y z.((Frog(x) & Turtle(y) & Fish(z) & Mouse(x)) -> Animal(x))", "all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)) -> Animal(x))", "all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)) -> Animal(x))", "all x.((Frog(x) | Turtle(x) | Fish(x) | Mice(x) | Bird(x)) -> Animal(x))", "all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)) -> Animal(x))", "all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)) -> Animal(x))", "all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)) -> Animal(x))"]}
{"id": "entailmentbank_validation_506", "nl": "alligators eat frogs / turtles / fish / mice / birds.", "fol": "", "prediction": ["all x.(Alligator(x) -> (EatsFrogsTurtlesFish(x) & EatsMouses(x) & EatsBirds(x)))", "all x y.((Alligator(x) & Frog(y) & Turtle(y)) -> (Eats(x,y) & Eats(x,y)))", "all x.(Alligator(x) -> (EatsFrogs(x) & EatsTurtles(x) & EatsFish(x) & EatsMice(x) & EatsBirds(x)))", "all x.(Alligator(x) -> (EatsFrogs(x)) | EatsTurtles(x) | EatsFish(x)) | EatsMouses(x)))", "all x.(Alligator(x) -> (EatsFrogs(x) & EatsTurtles(x) & EatsFish(x) & EatsMice(x) & EatsBirds(x)))", "all x.(Alligator(x) -> (EatsFrogs(x) & EatsTurtles(x) & EatsFish(x) & EatsMouses(x) & EatsBirds(x)))", "all x.(Alligator(x) -> (ApesFrogs(x) | EatsTurtles(x) | EatsFish(x) | EatsMice(x) | EatsBirds(x)))", "all x.(Alligator(x) -> (Eat(x,frogs) & Eat(x,turtles) & Eat(x,fish)))", "all x.(Alligator(x) -> (EatsFrogs(x) & EatsTurtles(x) & EatsFish(x) & EatsMouses(x) & EatsBirds(x)))", "all x.(Alligator(x) -> (EatsFrogs(x) | EatsTurtles(x) | EatsFish(x) | EatsMouses(x) | EatsBirds(x)))", "all x.(Alligator(x) -> Eats(x,frogs,ticks,fish,cyber,birds))", "all x.(Alligator(x) -> (EatsFrogs(x) | EatsTurtles(x) | EatsFish(x) | EatsMouses(x) | EatsBirds(x)))", "all x.(Alligator(x) -> (EatsFrogs(x) & EatsTurtles(x) & EatsFish(x) & EatsMouses(x) & EatsBirds(x)))", "all x.(Alligator(x) -> (EatsFrogs(x) & EatsTurtles(x) & EatsFish(x) & EatsMouses(x) & EatsBirds(x)))", "all x.(Alligator(x) -> Eats(x,Frogs,Turtles,Fish,Mice,Birds))", "all x y z.((Alligator(x) & Frog(y) & Turtle(z)) -> (Eat(x,y) | Eat(x,z)))"]}
{"id": "entailmentbank_validation_507", "nl": "alligators eat animals.", "fol": "", "prediction": ["all x.(Alligator(x) -> EatsAnimals(x))", "all x.(Alligator(x) -> EatAnimals(x))", "all x.(Alligator(x) -> EatAnimals(x))", "all x.(Alligator(x) -> EatsAnimals(x))", "all x.(Alligator(x) -> EatsAnimals(x))", "all x.(Alligator(x) -> Eat(x,Animals))", "all x.(Alligator(x) -> EatAnimals(x))", "all x.(Alligator(x) -> EatsAnimals(x))", "all x.(Alligator(x) -> EatsAnimals(x))", "all x.(Alligator(x) -> EatsAnimals(x))", "all x.(Alligator(x) -> EatsAnimals(x))", "all x.(Alligator(x) -> EatsAnimals(x))", "all x.(Alligator(x) -> EatsAnimals(x))", "all x.(Alligator(x) -> EatAnimals(x))", "all x.(Alligator(x) -> EatsAnimals(x))", "all x.(Alligator(x) -> EatsAnimals(x))"]}
{"id": "entailmentbank_validation_508", "nl": "a predator eats other animals for food.", "fol": "", "prediction": ["all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "all x y z.((Predator(x) & Animal(y) & Animal(z)) -> EatsForFood(x,y,z))", "all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "all x y.((Predator(x) & Animal(y)) -> Eats(x,y))", "all x y z.((Predator(x) & Animal(y) & Animal(z)) -> EatsForFood(x,y,z))", "all x y z.((Predator(x) & Animal(y) & Animal(z)) -> EatsForFood(x,y,z))", "all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))"]}
{"id": "entailmentbank_validation_509", "nl": "alligators are a kind of predator.", "fol": "", "prediction": ["all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x y.((Alligator(x) & Predator(y)) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))", "all x.(Alligator(x) -> Predator(x))"]}
{"id": "entailmentbank_validation_510", "nl": "as the population of prey decreases, competition between predators will increase.", "fol": "", "prediction": ["all x y.((Predator(x) & Prey(x) & PopulationDecrease(x,y)) -> Competes(x,y))", "all x y z.((Predator(x) & PopulationDecrease(x,y) & Prey(z)) -> ComparedCompetitions(x,z))", "all x.((PopulationDecreases(x) & PopulationOfPrey(x)) -> CompetitionIncreases(x))", "all x y.((Predator(x) & Prey(y)) -> IncreasedCool(x,y))", "all x.(DecreasesPoy(x) -> IncreasesCompetition(x))", "all x.((Predator(x) & PopulationDecreases(x)) -> Competitive(x))", "all x y.((DeficitsPreyPopulation(x) & ReducesPreyPopulation(x)) -> CompetitionAtTrapsIncreases(y))", "all x y.((Predator(x) & PopulationDecrease(x,y)) -> Increase(y,Competition))", "all x.(DecreasedPreyPopulation(x) -> IncreasedPredatorCompetition(x))", "all x.((Predator(x) & PopulationDecreases(x)) -> CompetitionIncreases(x))", "all x y.((Predator(x) & Prey(y) & PopulationDecrease(x,y)) -> IncreasedCompetition(y,x))", "all x.(DecreasesPreyPopulation(x) & IncreasesPredatorCompetition(x))", "all x.(DecreasedPreyPopulation(x) -> IncreasedPredatorCompetitions(x))", "all x y.((Predator(y) & PopulationDecrease(y)) -> CompetitionIncrease(y,x))", "all x.((PredatorPredator(x) & PopulationDecrease(x)) -> CompetitionIncrease(x))", "all x y.((Predator(x) & Prey(y) & MineratureDecrease(x,y)) -> CompetitiveCompetitionAddition(x,y))"]}
{"id": "entailmentbank_validation_511", "nl": "as the population of prey decreases, competition between alligators will increase.", "fol": "", "prediction": ["all x.((BetweenPreyPopulationAndDecreasedPopulation(x)) -> IncreasedCompetition(x))", "all x.((PreyPopulationDecreases(x) & Alligator(x)) -> IncreasedCompetition(x))", "all x y z.((PreyPopulation(x) & PopulationDecrease(y) & Alligator(z) & IncreasingCompetition(x,z)) -> Increases(z))", "all x.((PreyPopulation(x) & PopulationDecrease(x)) -> CompetitiveCompetition(x))", "all x y z.((PreyMinimum(x) & Alligator(y) & Population(z)) -> DecreasesCompetition(y,z))", "all x.((PreyPopulation(x) & PopulationDecreases(x)) -> CompetitionIncreases(x))", "all x y.((PreyPopulation(x) & Decreases(x)) -> CompetitionIncreased(y))", "all x.(DecreasesPreyPopulation(x) -> IncreasesCompetition(x))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasedPopulation(x,y) & IncreasedCompetitions(y,x)).)", "all x y.((Prey(x) & PopulationDecrease(x)) -> Increase(y))", "all x y.((PreyPopulation(x) & PreyPopulation(y) & Decreased(x,y)) -> IncreasedCompetition(x))", "all x.(DecreasesPreyPopulation(x) -> IncreasesCompetition(x))", "all x.((PreyPopulation(x) & PopulationDecrease(x)) -> CompetitionIncrease(x))", "all x.((PreyPopulation(x) & PopulationDecreases(x)) -> CompetitionIncreases(x))", "all x.((PreyPopulation(x) & PopulationDecrease(x)) -> CompetitionIncrease(x))", "all x.((PreyPopulation(x) & PopulationDecrease(x)) -> Competes(x))"]}
{"id": "entailmentbank_validation_512", "nl": "competition may cause animals to act aggressively towards members of their own species.", "fol": "", "prediction": ["all x y.((Competition(x) & Animal(y)) -> AggressivelyAttendees(y,x))", "all x y.((Competition(x) & Animal(y)) -> (AggressiveAggressionTowardsMemberSizedSpecies(y)))", "all x y.((Cuppet(x) & Animal(y)) -> AggressiveCast(x,y))", "all x y z.((Competition(x) & Animal(y) & MemberOfOwnSpecies(z)) -> AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveBactingAggressiveAggressiveBag", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z) & Aggressive(z)) -> MayCause(x,y,z))", "all x y.((Competition(x) & Animal(y)) -> AggressiveAtmosphereToward(y,x))", "all x y.((Animal(x) & Animal(y) & Organism(x)) -> AggressiveAttention(x,y))", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressiveAction(y,z))", "all x y.((Competition(x) & Animal(y) & MemberOfSpecies(y)) -> AggressivelyDesiring(y,x))", "all x y.((Attribution(x) & Animal(y)) -> AggressiveAttributionTowardsSpecies(y,x))", "all x y.((Competition(x) & Animal(y)) -> ActAggressivelyTowardsInvolvesSpecies(y,x))", "all x y.((Competition(x) & Animal(y)) -> (AggressivelyAffects(y,x) & RespectsOwnSpecies(y)))", "all x.(Coupon(x) -> (AnimalAggressively(x) | AnimalSpecies(x)))", "all x y.((Animal(x) & Competition(y)) -> AggressivelyAggressingToward(x,y))", "all x y.((Competition(x) & Animal(y)) -> AggressivelyAggressTowardSeatingSpecies(y,x))", "all x y.(Selling(x) -> (Animal(y) & Animal(x) & ActsAggressively(y)))"]}
{"id": "entailmentbank_validation_513", "nl": "as the population of prey decreases, agression between alligators will increase.", "fol": "", "prediction": ["all x.(DecreasesPopulationOfPrey(x) -> IncreasesAgression(x))", "all x y z.((Prey(x) & PopulationDecrease(y) & Alligator(z)) -> AggressionIncreases(z))", "all x y.((Prey(x) & Prey(y) & DecreasesKpopulation(x,y)) -> Agression(x,y))", "all x.(DecreasesPreyPopulation(x) -> IncreasesAgression(x))", "all x y.((Prey(x) & Atlas(y) & DecreasesPopulation(x)) -> IncreasesAgression(y))", "all x.((PreyCountry(x) & PopulationDecreases(x)) -> Aggression(x))", "all x y.((Predator(x) & Alligator(y)) -> (DecreasedPopulation(x,y) & IncreasedAgression(y,x)))", "all x.(DecreasesPreyPopulation(x) -> Anagression(x))", "all x y.((PreyPopulation(x) & Alligator(y)) -> AgressionMore(x,y))", "all x.(DecreasesPreyPopulation(x) -> IncreasesAgression(x))", "all x.((PreyDecreasement(x) & Addition(x,alligator)) -> AggressionIncrease(x,alligators))", "all x y.((Prey(x) & Agression(y)) -> DecreasesPopulationIn(x,y))", "all x y.((PreyPopulation(x) & ThePreyPopulation(y)) -> IncreasesAgression(x,y))", "all x y.((PreyDescrocation(x) & AlligatorAgression(y)) -> Increases(y))", "all x.((PreyPopulation(x) & PopulationDecrease(x)) -> AggressionEqual(x))", "all x.(DecreasedPreyPopulation(x) -> IncreasedAgression(x))"]}
{"id": "entailmentbank_validation_514", "nl": "a drought occurs over a period of months / years.", "fol": "", "prediction": ["all x.(Drought(x) -> OccursOverUnderMonthsYearsRange(x))", "all x y.((Drought(x) & Month(y)) -> ObtainedOverPeriod(x,y))", "all x.(Drought(x) -> (OccursOverMonths(x) & OccursOverYears(x)))", "all x y.((Drought(x) & Months(y)) -> OccursOver(y,x))", "all x.(Drought(x) -> OccursAcross(x,months,years))", "all x.(Drought(x) -> ObservedOverMonthsYears(x))", "all x y.((Drought(x) & Months(y)) -> Occurs(x,y))", "all x.(Drought(x) -> (OccursOverMonths(x) & OccursOverYears(x)))", "all x.(Drought(x) -> occursInMonths(x))", "all x y.((Drought(x) & Months(y) & Years(x,y)) -> OccursOver(x,y))", "all x.(Drought(x) -> OccursOverMonthsYears(x))", "all x y.((Drought(x) & Months(y) & Years(z)) -> OccursOver(x,y,z))", "all x y.((Drought(x) & Months(y)) -> Years(y))", "all x.((Drought(x) & Duration(x,month) & Duration(x,year)) -> Occurs(x,month))", "all x y.((Drought(x) & Month(y)) -> OccursOverPeriod(x,y))", "all x.(Drought(x) -> OccursOverMonthsYears(x))"]}
{"id": "entailmentbank_validation_515", "nl": "drought is when available water decreases in an environment over a period of months / years.", "fol": "", "prediction": ["all x.(Drought(x) -> (DecreasedWater(x) & Environment(x) & Months(x) & Years(x)))", "all x.(Drought(x) -> (WaterDecrease(x) & Environment(x) & MonthsAndYears(x)))", "all x.(Drought(x) -> (DecreasesWater(x) & Environment(x) & OverMonthsOrYears(x)))", "all x.(Drought(x) -> (DecreasedWaterAvailability(x) & Environment(x) & Duration(x,months) & Duration(x,years)))", "all x.(Drought(x) -> DecreasesWaterOverMainsPeriod(x))", "all x.(Dust(x) -> (DecreasesWaterInEnvironment(x) & MonthsOrYears(x)))", "all x.(Drought(x) -> (DecreasesWaterInEnvironment(x) & MonthsAndYears(x)))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecrease(x,y)) -> DurationOfMonthsYears(x))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecrease(x,y)) -> OverMonthsYears(x))", "all x.(Drought(x) -> (DecreasesWaterInEnvironment(x) & OverMonthsAndYears(x)))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecreases(x,y)) -> Durable(x,y))", "all x.(DecreaseDrought(x) -> AvailableWater(x))", "all x.(Drought(x) -> (DecreasedWater(x) & Environment(x)))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecrease(x,y)) -> LastsMonthsYears(x))", "all x y z.((Drought(x) & Water(y) & Environment(z) & AvailabilityDecreasesIn(y,z)) -> OverMornsYearsPeriod(x,y))", "all x y.((Drought(x) & Environment(y)) -> DecreasesWater(x,y))"]}
{"id": "entailmentbank_validation_516", "nl": "as available water decreases, the population of plants will decrease.", "fol": "", "prediction": ["all x y.((Runs(x) & AvailableWater(y)) -> DecreasesPopulation(x))", "all x y.((AsWaterDecreases(x) & Plant(y)) -> PopulationDecrease(y,x))", "all x.(DecreasedAvailabilityOfWater(x) -> PopulationDecreases(x))", "all x.((AvailabilityWater(x) & Decreases(x)) -> PopulationDecrease(x))", "all x y.(((AvailableWater(x) & Plant(y)) & DecreasedPopulation(y)) -> DecreasedPopulation(y))", "all x.((AvailableWater(x) & Decrease(x)) -> PopulationDecrease(x))", "all x.(DecreasedWater(x) -> DecreasedPopulation(x))", "all x.((AvailableWater(x) & Decreases(x)) -> PopulationDecreasers(x))", "all x.((AvailabilityWaterDecrease(x) & PopulationDecreases(x)) -> PlantPopulationDecreases(x))", "all x.(DecreasesAvailableWater(x) -> PopulationDecrease(x))", "all x y.((Water(x) & AvailableDowns(x) & PlantPurpose(y)) -> DecreasesPopulation(y))", "all x y.((DownsAvailableWater(x) & PlantPopulation(y)) -> Decreases(y))", "all x.((AvailabilityOfWater(x) & Decreases(x)) -> PopulationDecreases(x))", "all x.((AvailabilityWaterDecreases(x) & PlantPopulationDecreases(x)) -> AvailableWaterDecrease(x))", "all x y.((Place(x) & AvailableWater(y) & Decreases(x,y)) -> PopulationDeclines(x))", "all x.((ArrangedWater(x) & LocatedIn(x,y) & DecreasedPopulation(x)) -> DecreasedPopulation(x))"]}
{"id": "entailmentbank_validation_517", "nl": "a drought that occurs over a period of months / years may cause the population of plants in an environment to decrease.", "fol": "", "prediction": ["all x y.((Drought(x) & PeriodOfMonths(x) & Environment(y)) -> MayDecreasePopulation(x,y))", "all x y.((Drought(x) & OccursOverMeanings(x) & OverYears(x)) -> DecreasesPopulationInEnvironment(y))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecrementOfPlantsInEnvironment(x))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> (DescropsPopulation(x) & PlantsInEnvironment(x)))", "all x.(Drought(x) -> (OccursPeerOfMonths(x) & PeriodOfYears(x) & MayCauseDecreaseDownhillInEnvironment(x)))", "all x.((Drought(x) & OccursOverMonthsAndYears(x)) -> MayCauseDecreasedPopulation(x,Plants))", "all x y.((Drought(x) & ObservedOverMoment(x) & OccursInInEnvironment(x,y)) -> MayCauseDecreasedPopulation(x,y))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> (DecreaseDecreaseDownPopulation(x)))", "all x y z.((Drought(x) & Months(y) & Years(z)) -> DEcreasedPopulation(x,y))", "all x y deviated(x,y) -> (Drought(x) & OccursOverMeals(x) & OccursOverYears(x) & Plant PopulationDecreases(y)))", "all x y.((Drought(x) & OccursOverMeals(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulation(y))", "all x.((Drought(x) & OccursOverMoreThanYears(x)) -> PopulationDecrease(x))", "all x.((Drought(x) & OccursOverMonthsOrYears(x)) -> PopulationDecrease(x))", "all x y.((Drought(x) & OccursOver(x,y) & SeasonsOrJanuaries(x,y)) -> MayCausePositionDecrease(x))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> CausesDecreasedPopulation(y))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayDecreasePlantPopulation(x))"]}
{"id": "entailmentbank_validation_518", "nl": "a marsh willow herb is a kind of plant.", "fol": "", "prediction": ["all x.(MarshWillowHerb(x) -> Plant(x))", "all x.(MarshWildowHerb(x) -> Plant(x))", "all x.(MarshWillowHerb(x) -> Plant(x))", "all x.(MarshWildowHerb(x) -> Plant(x))", "all x.(MarshWallow(x) -> Plant(x))", "all x.(MarshWildowHerb(x) -> Plant(x))", "all x.(MarshWildow(x) -> Plant(x))", "all x.(MarshWallowHerb(x) -> Plant(x))", "all x.(MarshWildowHerb(x) -> Plant(x))", "all x.(MashWillowHerb(x) -> Plant(x))", "all x y.((MarshWildowHerb(x) & Herb(y)) -> Plant(x))", "all x.(MarshWildowHerb(x) -> Plant(x))", "all x.(MarshWillowHerb(x) -> Plant(x))", "all x.(MarshWillowHerb(x) -> Plant(x))", "all x.(MarshWildowHerb(x) -> Plant(x))", "all x.(MarshWillowHerb(x) -> Plant(x))"]}
{"id": "entailmentbank_validation_519", "nl": "a drought that occurs over a period of months / years may cause the population of marsh willow herb in an environment to decrease.", "fol": "", "prediction": ["all x y.((Drought(x) & OccursOfMonths(x) & OccursYears(x)) -> CausesDecreasedPopulation(x,y))", "all x.((Drought(x) & Occurs(x)) -> PopulationDecrease(x))", "all x y.((Drought(x) & OccursOverMonthsAndYears(x) & Environment(y)) -> [DecreasesPopulationOfMarshWildowInEnvironment(x,y)))", "all x y.((Drought(x) & OccursOverMoisages(x) & -OccursOverYears(x)) -> CausesDecreasedPopulationOfMarshWillowHerb(y))", "all x y.((Drought(x) & OccursOverMeltsAndYears(x)) -> MarshWildHerb(y))", "all x y.((Drought(x) & OccursUnderMonthsYears(x)) -> MayDecreaseDisturbanceOfMarshWillowHerb(y))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulationOfMarshWildowHerb(x))", "all x y z.((Drought(x) & OccursOver(x,month) & Year(y) & Environment(z) & -MarshWildgreen(x)) -> MayCausePopulationToDecrease(x,z))", "all x.((Drought(x) & OccursInMonthsYears(x)) -> PopulationDecreasesMarshWildow(x))", "all x.((Drought(x) & OccursOverMonths(x)) -> MayCauseDecreasedPopulation(x))", "all x.((Drought(x) & OccursOverMonthsYears(x)) -> PopulationDecrease(x))", "all x.((Drought(x) & OccursOverMeal(x) & Years(x)) -> DecreasedPopulationOfMarshWildowHerb(x))", "all x y.((Drought(x) & OccursOverMiles(x) & OccursOverYears(x) & MarshWildflowerHerb(y)) -> PopulationDecrease(x,y))", "all x y.((Drought(x) & OccursOverMomentsAndYears(x)) -> DecreasedPopulationOfMarshWillowHerb(y))", "all x y.((Drought(x) & OccursOverMonthsAndYears(x,y)) -> MayCauseDecreaseInEnvironment(x,y))", "all x y.((Drought(x) & OccursOver(x,y) & PeriodOfMonthsOrYears)) -> MayDecreasepopulationOfMarshWildweedHerb(y))"]}
{"id": "entailmentbank_validation_520", "nl": "sweat is used for adjusting to hot temperatures by some animals.", "fol": "", "prediction": ["exists x.(Animal(x) & UsedForAdaptingToHotTemperatures(x))", "exists x.(Animal(x) & UsedForAdjustingToHotTemperatures(x))", "exists x.(Animal(x) & Sweat(x) & AdjustsToHotTemperatures(x))", "exists x.(Animal(x) & UsesThickSweat(x))", "exists x.(Animal(x) & Sweat(z) & UsedFor(x,z) & AdjustsToHotTemperatures(x,z))", "exists x.(Animal(x) & -Sweat(x) & AdjustedToHotTemperatures(x))", "exists x.(Animal(x) & Sweat(s) & UsedForAdaptingToHotTemperatures(x))", "all x y.((Animal(x) & Sweat(y)) -> AdjustsToHotTemperatures(y,x))", "exists x.(Animal(x) & Sweat(x) & HotTemperatureAdjustment(x))", "exists x.(Animal(x) & Sweat(x) & AdjustsToHotTemperatures(x))", "exists x.(Animal(x) & AdaptsToHotTemperatures(x))", "exists x.(Animal(x) & SweatUsedFor(x,hotTemperatures))", "exists x.(Animal(x) & UsedForAdaptingToHotTemperature(x))", "exists x.(Animal(x) & UsedForAdaptingToHotTemperatures(x))", "exists x.(Animal(x) & HatesHotTemperatures(x))", "exists x.(Animal(x) & Sweat(x) & AdjustsToHotTemperatures(x))"]}
{"id": "entailmentbank_validation_521", "nl": "sweat cools a body.", "fol": "", "prediction": ["all x y.((Sweat(x) & Body(y)) -> Cools(x,y))", "all x.(Sweat(x) -> CoolsBody(x))", "exists x.(Sweat(x) & CoolsBody(x))", "all x.(Exercise(x) -> CoolsBody(x))", "all x y.((Sweat(x) & Body(y)) -> Cools(x,y))", "all x.(Sweat(x) -> CoolsBody(x))", "all x y.((Sweat(x) & Body(y) & Cools(x,y)) -> Cools(x,y))", "all x y.((Sweat(x) & Body(x,y)) -> Cools(x,y))", "all x y.((Sleep(x) & Body(y)) -> Cools(x,y))", "all x.(Sweat(x) -> Cools(x))", "all x.(Thought(x) -> CoolsBody(x))", "all x y.((Sweat(x) & Body(y)) -> Cools(x,y))", "all x y.((Sweat(x) & Body(y)) -> Cools(x,y))", "all x y.((Sweat(x) & Body(y)) -> Cools(x,y))", "all x y z.((Sweat(x) & Body(y) & Body(z)) -> Cools(x,y,z))", "all x y.((Sweet(x) & Body(y)) -> Cools(x,y))"]}
{"id": "entailmentbank_validation_522", "nl": "when the body is hot, sweat is used to cool the body.", "fol": "", "prediction": ["all x.((Body(x) & Hot(x)) -> TemperatureFilter(x))", "all x.((Body(x) & Hot(x)) -> UsedToCool(x))", "all x y.((BodyHot(x) & Sweat(y)) -> CoolsBody(y,x))", "all x y.((Body(x) & Body(y) & Hot(x)) -> Sweat(x))", "all x y.((Body(x) & Body(y) & Hot(y)) -> UsedForCool(x,y))", "all x.((Body(x) & Hot(x)) -> UsedToCold(x))", "all x y.((Body(x) & Body(y) & Hot(x)) -> SweatCool(y,x))", "all x y.((Body(x) & BodyHot(x)) -> WorksWithSweat(y))", "all x y.((Body(x) & Body(y) & Hot(x)) -> UsedToCool(x,y))", "all x y.((Body(x) & Body(y) & Hot(x) & UsesSweat(x,y)) -> CoolsBody(x,y))", "all x y.((Body(x) & BodyHot(x,y)) -> UsedToCool(y,z))", "all x y.((Body(x) & Body(y) & Hot(x)) -> UsedToCool(x,y))", "(Hot(sweat) & Cool(s))", "all x.(KissenHeat(x) -> SweatUsedToCool(x))", "all x.((BodyHot(x) & SweatUsed(x)) -> CoolBody(x))", "all x y.((Body(x) & BodyHot(x) & Sweat(y)) -> CoolBody(y))"]}
{"id": "entailmentbank_validation_523", "nl": "panting is when an animal's body is cooled by hanging out their tongue.", "fol": "", "prediction": ["all x y.((Animal(x) & Body(y) & HangedOutTongue(x,y)) -> CooledBy(x,y))", "all x.(Pantting(x) -> (CoolsBody(x) & HangsOutTongue(x)))", "all x.(Panting(x) -> (IsClouredByHangingTongue(x)))", "all x y.((Animal(x) & Body(y)) -> CooledByHangingOutTongue(x,y))", "all x.(Pantting(x) -> (Animal(x) & CooledByHangingOutTongue(x)))", "all x y.((Animal(x) & Body(y) & HangingOutTouch(x,y)) -> CoolsBy(x,y))", "all x.(Panting(x) -> (Raindown(x) & Animal(x) & HangsOutTongue(x)))", "all x y.((Animal(x) & Body(y) & HangingOutTongue(x,y)) -> CooledByPanting(x,y))", "all x.(Panting(x) - (Animal(x) & BodyCold(x) & HangsOutTongue(x)))", "all x y.((Animal(x) & Body(y)) -> CooledByHangingOutTongue(x,y))", "all x.(Panting(x) -> (AnimalClimatedByHangingOutTongue(x) & CoolsBody(x)))", "all x y z.((Animal(x) & Body(y) & Tongue(z)) -> GrippedByHangingOut(x,y,z))", "all x y.((Animal(x) & Body(y) & CannotHeatOut(x)) -> Panting(x))", "all x y.((Animal(x) & Body(y) & HangingOutTongue(x)) -> CooledBy(x,y))", "all x.(Pant(x) -> (Animal(x) & CoolsBodyByHangingOutTongue(x)))", "all x.(Panging(x) -> (ComfortsBody(x) & Animal(x) & HangsOutTongue(x)))"]}
{"id": "entailmentbank_validation_524", "nl": "panting and sweating are used to cool the body.", "fol": "", "prediction": ["all x.((Panting(x) | Sweeping(x)) -> CoolBody(x))", "all x.((Pantting(x) & Sweating(x)) -> CoolBody(x))", "all x.((Panting(x) | Sweating(x)) -> CoolsBody(x))", "all x y.((Body(x) & Body(y) & (Panning(x) | Sweating(x))) -> Cools(x,y))", "all x y.((Body(x) & Body(y)) -> (Care(x,y) | Sweat(x,y)))", "all x y.((Body(x) & Body(y) & (Pant(x,y) | Sweat(x,y))) -> UsedToCool(x,y))", "all x y.((Pant(x) & Sweating(y)) -> CoolsBody(x,y))", "all x.((Pantting(x) | Sweating(x)) -> CoolsBody(x))", "all x.((Body(x) & CoolBody(x)) -> (Panting(x) | Sweating(x)))", "all x y.((Body(x) & Body(y)) -> (Perfitting(x) | Sweating(x)))", "all x.((Body(x) & Body(y)) -> (Panting(x) | Sweating(x)))", "all x.((Pantting(x) | Sweeping(x)) -> CoolsBody(x))", "all x y.((Pantting(x) & Sweating(y)) -> CoolsBody(x,y))", "all x y.((Body(x) & Body(y)) -> (CanCool(x,y) & (Pants(x) | Swothing(x))))", "all x.((Body(x) & Pantting(x)) -> Sweating(x))", "all x.((Panting(x) | Sweating(x)) -> CoolsBody(x))"]}
{"id": "entailmentbank_validation_525", "nl": "cooling means decreasing heat / temperature.", "fol": "", "prediction": ["all x.(Cooling(x) -> (ReducedHeat(x) & ReducedTemperature(x)))", "all x.(Climate(x) -> (DecreasesHeat(x) | DecreasesTemperature(x)))", "all x.(Cooling(x) -> (DecreasesHeat(x) | IncreasesTemperature(x)))", "all x.(Cooling(x) -> ReducingCool(x))", "all x.(Cooling(x) -> (ChangesHeat(x,Heat,Hotness) & ReducesTemperature(x,Hot)))", "all x.(Cooling(x) -> (DecreasesHeat(x) & DecreasesTemperature(x)))", "all x.((Cooling(x) & Heat(x) & Temperature(x)) -> Decreases(x,Heat))", "all x y.((Climate(x) & Heat(y) & Temperature(z)) -> Decreases(x,y,z))", "all x.(Cooling(x) -> (DecreasesHeat(x) & DecreasesTemperature(x)))", "all x y.((Cooling(x) & Heat(y) & Temperature(y)) -> Decreasing(x,y))", "all x.(Cooling(x) -> (DecreasedHeat(x) | ReducedTemperature(x)))", "all x.(Climating(x) -> (DecreasedHeatBy(x) & -DecreasedTemperatureBy(x)))", "all x y.((Cooling(x) & Heat(y)) -> DecreasesTemperature(x,y))", "all x.(Cooling(x) -> (DecreasesHeat(x) | DecreasesTemperature(x)))", "all x.(Cooling(x) -> -DefeatsHeat(x) & ReducesTemperature(x))", "all x y.((Cooling(x) & Heat(y)) -> Reduced(x,y))"]}
{"id": "entailmentbank_validation_526", "nl": "if an animal becomes too hot then that animal may die.", "fol": "", "prediction": ["all x.((Animal(x) & TooHot(x)) -> MayDie(x))", "all x.((Animal(x) & TooHot(x)) -> MayDie(x))", "all x.((Animal(x) & TooHot(x)) -> MayDie(x))", "all x y.((Animal(x) & TooHot(x)) -> MayDie(x,y))", "all x.((Animal(x) & TooHot(x)) -> MayDie(x))", "all x.((Animal(x) & TooHot(x)) -> MayDie(x))", "all x y.((Animal(x) & High(x)) -> MayDer(x))", "all x.( (Animal(x) & TooHot(x)) -> MayDie(x))", "all x.((Animal(x) & TooHot(x)) -> MayDerive(x))", "all x.((Animal(x) & TooHot(x)) -> MayDie(x))", "all x.((Animal(x) & TooHot(x)) -> MayDie(x))", "all x.((Animal(x) & Heat(x)) -> MayDie(x))", "all x.((Animal(x) & TooHot(x)) -> AnimalMayDie(x))", "all x.((Animal(x) & TooHot(x)) -> MayDie(x))", "all x.((Animal(x) & HeatToo(x)) -> MayDie(x))", "all x y.((Animal(x) & TooHot(x)) -> MayDestroy(x,y))"]}
{"id": "entailmentbank_validation_527", "nl": "cooling can be used by an animal for survival.", "fol": "", "prediction": ["all x y.((Animal(x) & Cooling(y)) -> UseForSurvival(x,y))", "all x y.((Animal(x) & Cooling(y)) -> CanUseForSurvival(x,y))", "all x y.((Animal(x) & Animal(y)) -> UsedForSurvival(x,y))", "all x.(Climate(x) -> UsesForSurvival(x))", "all x.(Climate(x) -> Survival(x))", "all x y.((Animal(x) & Animal(y)) -> UsedForSurvival(x,y))", "all x.((Animal(x) & Cooling(x)) -> UsesForSurvival(x))", "all x y.((Animal(x) & Animal(y)) -> UsesCoolingForSurvival(x,y))", "exists x.(Animal(x) & UsesCoolingForSurvival(x))", "all x.((Animal(x) & Cooling(x)) -> UsesForSurvival(x))", "all x y.((Animal(x) & Animal(y)) -> CoolingForSurvival(x,y))", "all x.(Cooling(x) -> UsedForSurvival(x))", "all x y.((Animal(x) & Animal(y)) -> CoolingUsedForSurvival(x,y))", "all x y.((Animal(x) & Cooling(y)) -> UsedForSurvival(x,y))", "all x.(CoolingCanBeUsedForSurvival(x) -> Animal(x))", "all x y.((Animal(x) & TheNeckit(y)) -> SuitableForSurvival(x,y))"]}
{"id": "entailmentbank_validation_528", "nl": "if the environmental temperature is too hot then an animal in that environment may become hot.", "fol": "", "prediction": ["all x.((EnvironmentalTemperature(x) & TooHot(x)) -> MayBecomeHot(x))", "all x.((Environment(x) & TooHot(x)) -> MayBecomeHot(x))", "all x y.((Animal(x) & Environment(y) & Hot(y)) -> MayBecomeHot(x,y))", "all x.((Environment(x) & TooHot(x)) -> CanBecomeHot(x))", "all x.((Environment(x) & TooHot(x)) -> MAYBecomeHot(x))", "all x.((Environment(x) & TooHot(x)) -> MayBecomeHot(x))", "all x y.((Animal(x) & EnvironmentalTemperature(y) & TooHot(y)) -> MayBecomeHot(x,y))", "all x.((EnvironmentalTemperature(x) & Hot(x)) -> MayBecomeHot(x))", "all x.((Environment(x) & TooHot(x)) -> MayBecomeHot(x))", "all x y.((Environment(x) & EnvironmentalTemperatureTooHot(x)) -> MayBecomeHot(y))", "all x.((Environment(x) & TooHot(x)) -> MayBecomeHot(x))", "all x.((Environment(x) & TooHot(x)) -> MayBecomeHot(x))", "all x.((EnvironmentalTemperature(x) & TooHot(x)) -> MayBecomeHot(x))", "all x.((Environment(x) & TooHot(x)) -> BecomesHot(x))", "all x.((EnvironmentalTemperature(x) & TooHot(x)) -> MayBecomeHot(x))", "all x.((Environment(x) & TooHot(x)) -> (AnimalInEnvironment(x) & MayBecomeHot(x)))"]}
{"id": "entailmentbank_validation_529", "nl": "if the temperature of an animal's environment becomes too hot then that animal must cool itself.", "fol": "", "prediction": ["all x y.((Animal(x) & Temperature(y) & TooHot(y)) -> CoolsItself(x,y))", "all x y.((Animal(x) & Environment(y) & TemperatureTooHot(x,y)) -> Cooles(x,y))", "all x.((Animal(x) & HeatUnderEnvironment(x)) -> HeatUnderEnvironment(x))", "all x.((Animal(x) & TooHotTexture(x)) -> CoolsItself(x))", "all x.((Animal(x) & TooHotTemperature(x)) -> CoolsOff(x))", "all x.((Animal(x) & TemperatureTooHot(x)) -> Cools(x))", "all x y.((Animal(x) & HeatZero(y)) -> CoolsEmployment(x,y))", "all x.((Animal(x) & HeatEnvironment(x) & TooHot(x)) -> Cool(x))", "all x y.((Animal(x) & TooHot(x,y)) -> MustCool(x,y))", "all x y.((Animal(x) & TemperatureOfEnvironment(x) & TooHot(x)) -> MustCool(x,y))", "all x.((Animal(x) & TooHot(x)) -> CoolsItself(x))", "all x.((Animal(x) & HeatTooClothing(x)) -> CoolsItself(x))", "all x y.((Animal(x) & Temperature(y) & TooHot(y) & Environment(y)) -> CoolSelf(x,y))", "all x.((Animal(x) & HeatTooHerx(x)) -> CoolsItself(x))", "all x.((Animal(x) & TooHot(x)) -> CoolsForever(x))", "all x y.((Animal(x) & Heat(y)) -> CoolsItself(x,y))"]}
{"id": "entailmentbank_validation_530", "nl": "an animal cooling itself is an adaptation to hot temperatures.", "fol": "", "prediction": ["all x.(Cooling(x) -> HotTemperaturesAdaptation(x))", "all x.((Animal(x) & Cooling(x)) -> AdaptationToHotTemperatures(x))", "all x.(Chocolate(x) -> HotTemperatures(x))", "all x y.((Animal(x) & Cooling(x)) -> HotTemperaturesAdaptation(x))", "all x.(Cooling(x) -> HateToHotTemperatures(x))", "all x.(CountsOf(x) -> HotTemperatures(x))", "all x.((Animal(x) & CoolsItself(x)) -> AdjustmentToHotTemperatures(x))", "all x.(cooling(x) -> HotTemperatureAdaptation(x))", "all x.((Animal(x) & Cools(x)) -> AppropriationToHotTemperatures(x))", "all x.((Animal(x) & CooledIn(x)) -> HeatAdaptation(x))", "all x.((Animal(x) & CoolsEmself(x)) -> AdaptationToHotTemperatures(x))", "all x.((Animal(x) & CoolingEachother(x)) -> AdaptationToHotTemperatures(x))", "all x.((Animal(x) & Cooling(x)) -> HeatAdaptation(x))", "all x.((Animal(x) & Cooling(x)) -> HotTemperaturesAdaptation(x))", "all x y.((Animal(x) & HotTemperatures(y)) -> Cools(x,y))", "all x.(Cooling(x) -> AdaptationToHotTemperatures(x))"]}
{"id": "entailmentbank_validation_531", "nl": "an example of adaptations to hot temperatures are panting and sweating.", "fol": "", "prediction": ["all x.(Adaptation(x) -> (Panning(x) | Sweeping(x)))", "all x.(AdaptationToHotTemperatures(x) -> (Panting(x) | Sweating(x)))", "all x.(Adaptation(x) -> (Panning(x) | Sweating(x)))", "all x.((AdaptationsToHotTemperatures(x) & Panting(x) & Sweeping(x)) -> AdaptationsToHotTemperatures(x))", "(all x.((AdaptationToHotTemperatures(x) & Panting(x)) & All ((AdaptationToHotTemperatures(x) & Sweating(x))) -> AdaptationsToHotTemperatures(x)))", "all x.(Adaptation(x:(HotTemperature(x) & Panda(x)) & Sweating(x))", "all x.(AdaptationsToHotTemperatures(x) -> (Panting(x) | Sweeping(x)))", "all x.(Adaptation(x) -> (HotTemperature(x) & HotTemperature(x) & CoolTemperature(x)))", "all x.(Adaptations(x) -> (HotTemperatures(x) | HotTemperatures(x)))", "all x.(AdaptationsToHotTemperatures(x) -> (Pantting(x) | Sweating(x)))", "all x.((AdaptationToHotTemperatures(x) & Panting(x) & Sweating(x)) -> AdaptationToHotTemperatures(x))", "all x.(Adaptation(x) -> (Panting(x) & Sweating(x)))", "all x.(AdaptationsToHotTemperatures(x) -> (Panding(x) | Sweating(x)))", "all x.(Adaptation(x) -> (Pants(x) | Sweats(x)))", "all x.((AdaptationToHotTemperatures(x) & Panting(x)) -> Sweating(x))", "all x.((Adaptation(x) & HotTemperature(x)) -> (Patterning(x) | Swooning(x)))"]}
{"id": "entailmentbank_validation_532", "nl": "cellular respiration is when a cell converts from oxygen and carbohydrates into carbon dioxide, water, and energy.", "fol": "", "prediction": ["all x.((CellularRespiration(x) & ConvertsFromOxygenAndCarbohydratesTo(x,carbonDioxide,water,energy)) -> CellularRespiration(x))", "all x.(CellularRespiration(x) -> (ConvertsOxygenAndCarbohydrates(x) & CO2WaterEnergy(x)))", "all x.((CellularRespiration(x) & ConvertsOxygenAndCarbohydrates(x)) -> (CarbonDioxideWaterEnergy(x) & ConvertsCarbonDioxide(x)))", "all x.((CellularRespiration(x) & ConvertsFromOxygenToCarbohydrates(x) & CarbonDioxideToWaterToEnergy(x)) -> CellularRespiration(x))", "all x.((CellularRespiration(x) & CellConvertsOxygen(x) & ConvertsCarbohydrates(x)) -> CementDioxideWaterEnergy(x))", "all x.((CellularRespiration(x) & ConvertsEnergyStart(x) & OxygenCarbohydratesToCarbonDioxideWaterEnergy(x)) -> CellularRespiration(x))", "all x.(CellularRespiration(x) -> (ConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))", "all x.(CellularRespiration(x) -> (CellConverts(x) & OxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))", "all x.(CellularRespiration(x) -> (ConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))", "all x.(CellularRespiration(x) -> (convertsOxygenAndCarbohydratesFromPollutantIntoCarbonDioxideWaterEnergy(x)))", "all x.((CellularRespiration(x) & CellConvertsFromOxygenAndCarbohydrates(x,carbonDioxide) & WaterAndEnergy(x)) -> CellulateRespiration(x))", "all x.((CellularRespiration(x) & ConvertsOxygenToCarbohydrates(x)) -> (ConvertsCarbonDioxideToWaterToEnergy(x)))", "all x.(CellularRespiration(x) -> (ConvertsOxygenAndCarbohydrates(x) & CarbonDioxideAndWaterAndEnergy(x)))", "all x.(CellularRespiration(x) -> (ConvertsOxygenAndCarbohydratesIntoCarbonDioxideWaterEnergy(x)))", "all x.(CellularRespiration(x) -> (CellConvertsFromOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))", "all x y.((CellularRespiration(x) & Cell(y)) -> (ConvertsOxygenOxygenCarbohydratesToCarbonDioxideWaterEnergy(x,y)))"]}
{"id": "entailmentbank_validation_533", "nl": "living things require respiration to use energy.", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresRespirationToUseEnergy(x))", "all x.(LivingThing(x) -> RequiresRespirationToUseEnergy(x))", "all x.(LivingThing(x) -> RequiresRespiration(x))", "all x.((WildHuman(x) & RequiresRespiration(x)) -> UsesEnergy(x))", "all x.(LivingThing(x) -> RequiresRespirationToUseEnergy(x))", "all x.(LivingThing(x) -> RequiresRespirationToUseEnergy(x))", "all x.(LivingThing(x) -> RequiresRespiration(x))", "all x.(LivingThing(x) -> RequiresRespiration(x))", "all x.(LivingThing(x) -> RequiresRapidation(x))", "all x.((LivingThing(x) & RequiresRespiration(x)) -> UsesEnergy(x))", "all x.(LivingThing(x) -> RequiresRespiration(x))", "all x.(LivingThing(x) -> RequiresRespirationToUseEnergy(x))", "all x.(LivingThing(x) -> RequiresRespirationToUseEnergy(x))", "all x y.((LivingGood(x) & Respiration(y)) -> Requires(x,y))", "all x.(LivingThing(x) -> RequiresRespiration(x))", "all x.(LivingThing(x) -> RequiresRespiration(x))"]}
{"id": "entailmentbank_validation_534", "nl": "living things must convert oxygen into carbon dioxide to use energy.", "fol": "", "prediction": ["all x.(LivingThing(x) -> ConvertOxygenIntoCarbonDioxide(x))", "all x.(LivingThing(x) -> ConvertsOxygenToCarbonDioxide(x))", "all x.(LivingThing(x) -> (ConvertsOxygen(x) & ProducesCarbonDioxide(x) & UsesEnergy(x)))", "all x y.((LivingThing(x) & Oxygen(x) & CarbonDioxide(y)) -> ConvertsToUseEnergy(x,Y))", "all x.(LivingThing(x) -> ConvertsOxygenToCarbonDioxide(x))", "all x.((LivingThing(x) & Oxygen(y)) -> ConvertsToCarbonDioxideToUseEnergy(x))", "all x.(LivingThing(x) -> ConvertsOrganicToCarbonDioxide(x))", "all x y.((LivingThing(x) & Oxygen(y)) -> UsedToConvertToCarbonDioxide(x,y))", "all x.(LivingThing(x) -> ConvertsOxygenToCarbonDioxide(x))", "all x.(LivingThing(x) -> (ConvertsOxygenToCarbonDioxide(x) & UsesEnergy(x)))", "all x.(LivingThing(x) -> ConvertOxygenToCarbonDioxide(x))", "all x y.((LivingThing(x) & Oxygen(y)) -> ConvertsToCarbonDioxide(x,y))", "all x.((Action(x) & OxygenConversion(x)) -> UsesEnergy(x))", "all x.(LivingThing(x) x.(ConvertsOxygenToCarbonDioxide(x) & UsesEnergy(x)) -> ConvertsToEnergy(x))", "all x y.((LivingThing(x) & Oxygen(y)) -> ConvertsToCarbonDioxide(x,y))", "all x.(LivingDevice(x) -> ConvertTo(x,Oxygen,CarbonDioxide))"]}
{"id": "entailmentbank_validation_535", "nl": "breathing is when animals convert oxygen into carbon dioxide.", "fol": "", "prediction": ["all x.(Bearing(x) -> ConvertsOxygenToCarbonDioxide(x))", "all x.(Breathing(x) -> ConvertsOxygenToCarbonDioxide(x))", "all x.(Breathing(x) -> (AnimalConvertsOxygen(x) & ToCarbonDioxide(x)))", "all x.(Breathing(x) -> (AnimalsConvertOxygenToCarbonDioxide(x)))", "all x.(Breathing(x) -> ConvertsOxygenToCarbonDioxide(x))", "all x y.((Animal(x) & OxygenConversion(y)) -> CarbonDioxideConversion(x,y))", "all x.(Breathing(x) -> (ConvertsOxygenIntoCarbonDioxide(x)))", "all x.(Breathing(x) -> (AnimalsConvertOxygenToCarbonDioxide(x)))", "all x.((Animal(x) & OxygenConvert(x,y)) -> CarbonDioxide(y))", "all x y.((Animal(x) & Oxygen(y) & CarbonDioxide(z)) -> ConvertsTo(x,y,z))", "all x.(Breathing(x) -> (Voice(x) & Oxygen(x) & CarbonDioxide(x)))", "all x.(Breathing(x) -> ConvertsOxygenIntoCarbonDioxide(x))", "all x.(Breathing(x) -> (Animals(x) & ConvertsOxygenToCarbonDioxide(x)))", "all x y.((Animal(x) & Oxygen(y) & TransformsIntoCarbonDioxide(x,y)) -> Breathing(x))", "all x y.((Animal(x) & Oxygen(y) & ConvertsToCarbonDioxide(x,y)) -> Breathing(x))", "all x y.((Animal(x) & Oxygen(y) & CarbonDioxide(z)) -> ConvertsTo(x,y,z))"]}
{"id": "entailmentbank_validation_536", "nl": "living things must breathe to use energy.", "fol": "", "prediction": ["all x.((LivingThing(x) & Breathes(x)) -> UsesEnergy(x))", "all x y.((LivingThing(x) & Breathes(x,y)) -> UsesEnergy(x))", "all x y.((LivingThing(x) & Breathes(x)) -> UsesEnergy(x))", "all x.((LivingThing(x) & Breathes(x)) -> UsesEnergy(x))", "all x.(LivingThing(x) -> MustBreatheByUseofEnergy(x))", "all x.((LivingThing(x) & Breathes(x)) -> UsesEnergy(x))", "all x.(Life(x) -> BlowsToUseEnergy(x))", "all x.((LivingThing(x) & Breathes(x)) -> UsesEnergy(x))", "all x.((LivingThing(x) & Breathe(x)) -> UsesEnergy(x))", "all x.((LivingThing(x) & Breathes(x)) -> UsesEnergy(x))", "all x.((LivingThing(x) & AirSense(x)) -> UsedToUseEnergy(x))", "all x.((LivingThing(x) & Breathes(x)) -> UsesEnergy(x))", "all x y.((LivingThing(x) & Breathes(y)) -> UsesEnergy(x,y))", "all x y.((LivingThing(x) & Breathes(y)) -> UsesEnergy(x,y))", "all x.(Alternative(x) -> Breathes(x))", "all x.(LivingThing(x) -> BreatheToUseEnergy(x))"]}
{"id": "entailmentbank_validation_537", "nl": "breathing out is when animals exhale carbon dioxide from their lungs into the air.", "fol": "", "prediction": ["all x.(Novel(x) -> (ExhalesCarbonDioxide(x) & FromLungsIntoAir(x)))", "all x.(BreathingOut(x) -> (ExhalesCarbonDioxideFromLungs(x) & InToAir(x)))", "all x y.((Animal(x) & Lung(y)) -> ExhalesCarbonDioxide(x,y))", "all x y.((Animal(x) & LaughsOut(x)) -> ExhalesCarbonDioxide(x,y))", "all x.((Animal(x) & ExhalesCarbonDioxideFromLungs(x)) -> BreathesOut(x))", "all x y.((Animal(x) & Lung(y) & ExhalesCarbonDioxideIntoAir(x,y)) -> BreathesOut(x,y))", "all x y.((Animal(x) & CarbonDioxide(y) & Exhales(x,y)) -> BreathesOut(x))", "all x.((Animal(x) & ExhalesCarbonDioxide(x)) -> BreathesOut(x))", "all x.(BreathingOut(x) -> (ExhaleCarbonDioxide(x) & FromLungsToAir(x)))", "all x.(BreathingOut(x) -> ExhalesCarbonDioxideBetweenTheLungs(x))", "all x y z.((BreathingOut(x) & Animal(y) & CarbonDioxide(z) & ExhaleFromLungsIntoAir(y,z)) -> AirBreathingOut(y,z))", "all x.((Animal(x) & ExhalesCarbonDioxide(x)) -> BreathingOut(x))", "all x.(BreathingOut(x) -> ExhalesCarbonDioxideFromLungsIntoAir(x))", "all x.(BreathingOut(x) -> ExhaleCirobonDioxide(x))", "all x y z.((Animal(x) & CarbonDioxideDependent(y) & Air(z)) -> BreathesOut(x,y,z))", "all x.(BreathingOut(x) -> ExhalesCarbonDioxide(x,Y))"]}
{"id": "entailmentbank_validation_538", "nl": "animals are a source of carbon dioxide by breathing.", "fol": "", "prediction": ["all x.(Animal(x) -> SourceOfCarbonDioxide(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))", "all x.((Animal(x) & SourceOfCO2ByBreathing(x)) -> SourceOfCO2(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))", "all x.((Animal(x) & SourceOfCarbonDioxide(x)) -> Breathes(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> SourceOfCO2ByBreathing(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> CarbonDioxideBreathe(x))", "all x.(Animal(x) -> SourceOfCO2ByBreathing(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))"]}
{"id": "entailmentbank_validation_539", "nl": "a source of something produces that something.", "fol": "", "prediction": ["all x y.((Source(x) & Source(y)) -> Produces(x,y))", "all x.(ProducesSource(x) -> SourceOfSomething(x))", "all x y.((SourceOf(x,y) & Something(y)) -> Produces(x,y))", "all x.(SourceOf(x,y) -> ProducesSameType(x,y))", "all x y.((Source(x) & Source(y)) -> Produces(x,y))", "all x y.((SourceOf(x,y) & Something(y)) -> Produces(x,y))", "all x.(SourceOf(x,y) -> Produces(y,z))", "all x y.((Source(x) & Something(y)) -> Produces(x,y))", "all x y.((Source(x) & Product(y)) -> Produces(x,y))", "all x.(SourceOf(x,y) -> Produces(y,z))", "all x.(Source(x) -> Produces(x,x))", "all x y.((Source(x) & SourceOf(x,y)) -> Produces(x,y))", "exists x y.(SourceOf(x,y) & Something(y) & Produces(x,y))", "all x y.((Source(x) & Something(y)) -> Produces(x,y))", "all x.(SourceOfPhenomenon(x) -> Produces(x,cyber))", "all x.(SourceOf(x,y) -> ProducesOf(x,y))"]}
{"id": "entailmentbank_validation_540", "nl": "animals produce carbon dioxide by breathing.", "fol": "", "prediction": ["all x.(Animal(x) -> ProducesCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> ProducesCarbonDioxideByBreathing(x))", "all x y.((Animal(x) & Breathing(y)) -> ProducesCarbonDioxide(x,y))", "all x.(Animal(x) -> ProducesCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> ProducesCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> ProducesCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> (ProducesCarbonDioxide(x,Breathing)))", "all x.(Animal(x) -> ProducesCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> ProducedByBreathing(x))", "all x y z.((Animal(x) & CarbonDioxide(y) & Breathing(z)) -> ProducesBy(x,y,z))", "all x.(Animal(x) -> ProducesCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> ProducesCarbonDioxide(x))", "all x.(Animal(x) -> ProducesCarbonDioxide(x))", "all x.(Animal(x) -> ProducesCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> ProducesCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> ProducesCarbonDioxideByBreathing(x))"]}
{"id": "entailmentbank_validation_541", "nl": "animals produce carbon dioxide by using energy.", "fol": "", "prediction": ["all x.(Animal(x) -> ProducesCarbonDioxide(x))", "all x.(Animal(x) -> ProducesCarbonDioxide(x))", "all x.(Animal(x) -> ProducesCarbonDioxideByEnergy(x))", "all x.(Animal(x) -> (ProducesCarbonDioxide(x) & UsesEnergy(x)))", "all x.(Animal(x) -> ProducesCarbonDioxide(x))", "all x.(Animal(x) -> (ProducesCarbonDioxide(x) | UsesEnergy(x)))", "all x.(Animal(x) -> (ProducesCarbonDioxideByEnergy(x) & UsesEnergy(x)))", "all x.(Animal(x) -> ProducesCarbonDioxideByUsingEnergy(x))", "all x.(Animal(x) -> ProducesCarbonDioxide(x))", "all x.(Animal(x) -> ProducesCarbonDioxideByEnergy(x))", "all x.(Animal(x) -> ProducesCarbonDioxideByEnergy(x))", "all x.(Animal(x) -> (ProducesCarbonDioxide(x) & UsesEnergy(x)))", "all x.(Animal(x) -> ProducesCarbonDioxide(x))", "all x.(Animal(x) & UsesEnergy(x) -> ProducesCarbonDioxide(x))", "all x.(Animal(x) -> ProducesCarbonDioxide(x))", "all x.(Animal(x) -> ReleasesCarbonDioxide(x))"]}
{"id": "entailmentbank_validation_542", "nl": "carbohydrates are used for storing energy.", "fol": "", "prediction": ["all x y.((Carbohydrate(x) & Carbohydrate(y)) -> UsedForStoringEnergy(x,y))", "all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))", "all x y.((Carbohydrate(x) & Energy(y)) -> UsedFor(x,y))", "all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))", "all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))", "all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))", "all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))", "all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))", "all x.(Carbohydrate(x) -> StoresEnergy(x))", "all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))", "all x.(Carbohydrate(x) -> UsedForShapingEnergy(x))", "all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))", "all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))", "all x.exists y.(Carbohydrate(x) & UsesToStoreEnergy(y))", "all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))", "all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))"]}
{"id": "entailmentbank_validation_543", "nl": "photosynthesis makes energy for the plant by converting carbon dioxide, water, and sunlight into carbohydrates.", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & Plant(y)) -> (ConvertsCarbonDioxideWaterSunlight(x,y) & IntoCarbohydrates(x,y)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxide(x) & ConvertsWater(x) & ConvertsSunlight(x)))", "all x y.((Photosynthesis(x) & Plant(y)) -> (MakesEnergyForPlant(x,y) & ConvertsCarbonDioxideWaterSunlightToCarbohydrates(x)))", "all x y z.((Photosynthesis(x) & CarbonDioxide(y) & Water(z) & Sunlight(s) & IntoCarbohydrates(x,y,s,z)) -> MakesEnergyForPlant(x))", "all x.(Photosynthesis(x) -> (MakesEnergy(x) & CarbonDioxide(x) & Water(x) & Sunlight(x)))", "all x y z.((Photosynthesis(x) & Plant(y) & CarbonDioxide(z) & Water(z) & Sunlight(z)) -> ConvertsToCarbohydrates(x,y,z.(y,x))))", "all x y.((Photosynthesis(x) & Plant(y)) -> (ConvertsCarbonDioxideWaterSunlight(x,y) & ToCarbohydrates(x,y)))", "all x.((Photosynthesis(x) & ConvertsCarbonDioxideWaterSunlight(x) & CarbonDioxide(x)) -> GivesEnergyForPlant(x))", "all x y z.((Photosynthesis(x) & Plant(y) & CarbonDioxide(z) & Water(z) & Sunlight(z)) -> MadeEnergy(x,y,Z))", "all x y z.((Photosynthesis(x) & CarbonDioxide(y) & Water(z) & Sunlight(z)) -> (MadeForPlant(x,y) & ConvertsIntoCarbohydrates(x,z)))", "all x y z.((Photosynthesis(x) & Plant(y) & Carbohydrates(z)) -> (MakesEnergyForPlant(x,y,z) & ConvertsCarbonDioxideWaterAndSunlight(x,y,z)))", "all x.(Photosynthesis(x) -> (CarbonDioxideConversion(x) & WaterConversion(x) & SunlightConversion(x)))", "all x.(Photosynthesis(x) -> (MakesEnergyForPlant(x) & ConvertsCarbonDioxideWaterSunlightToCarbohydrates(x)))", "all x y.((Photosynthesis(x) & Plant(y) & CarbonDioxide(x) & Water(y) & Sunlight(y)) -> (MakesEnergyForPlant(x,y) & ConvertsEnergy(x,y)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxide(x) & ConvertsWater(x) & ConvertsSunlight(x) & ToCarbohydrates(x)))", "all x.(Photosynthesis(x) -> (MadeEnergyForPlant(x) & ConvertsCarbonDioxideWaterSunlight(x)))"]}
{"id": "entailmentbank_validation_544", "nl": "photosynthesis stores energy.", "fol": "", "prediction": ["all x.(PhotosynthesisStoresEnergy(x) -> StoresEnergy(x))", "all x.(Photosynthesis(x) -> StoresEnergy(x))", "all x.(PhotosynthesisStoresEnergy(x) -> Photosynthesis(x))", "all x.(PhotosynthesisStoresEnergy(x) -> Photosynthesize(x))", "all x.(Photosynthesis(x) -> StoresEnergy(x))", "all x.(Photosynthesis(x) -> StoresEnergy(x))", "all x.(Photosynthesis(x) -> StoresEnergy(x))", "all x.(Photosynthesis(x) -> StoresEnergy(x))", "all x.(Photosynthesis(x) -> StoresEnergy(x))", "all x.(PhotosynthesisStoresEnergy(x) -> StoresEnergy(x))", "all x.(Photosynthesis(x) -> StoresEnergy(x))", "all x.(Photosynthesis(x) -> StoresEnergy(x))", "all x y.((Photosynthesis(x) & Energy(y)) -> Stores(x,y))", "all x.(Photosynthesis(x) -> StoresEnergy(x))", "all x.(Photosynthesis(x) -> StoresEnergy(x))", "all x.(Photosynthesis(x) -> StoresEnergy(x))"]}
{"id": "entailmentbank_validation_545", "nl": "if something is required to use something else then that something is a source of that something else.", "fol": "", "prediction": ["all x.((RequiredToUse(x) & NotRequiredToUse(x)) -> SourceOfAllOther(x))", "all x y.((Other(x) & Requires(x,y) & HasSomethingOther(x),y)) -> SourceOf(x,z))", "all x y z.((RequiredToUse(x) & Other(y) & SourceOf(x,y)) -> SourceOf(x,z))", "all x.(RequiredToUse(x) -> SourceOf(x))", "all x y.((Required(x) & (Provides(x,y) | MakesCurrent(x,y))) -> SourceOf(x,y))", "all x y.((RequiredToUse(x,y) & Uses(y)) -> SourceOf(x,y))", "all x y.((RequiredFor(x,y) & ProvidedFor(x,y)) -> Source(x,y))", "all x.((Required(x) & Used(x)) -> SourceOfAlso(x))", "all x y.((Required(x) & Person(y) & Used(y)) -> SourceOfNegative(y,x))", "all x.(((RequiredToUse(x) & SourceOf(x,y)) -> SourceOf(x,z))", "all x.((RequiredForUse(x) & Uses(x,y)) -> SourceOfSourceOfSourceOfSourceOfSourceOfSourceOfSourceOfSourceOfSourceOfSourceOfSource(y,x))", "all x y.((RequiredAndOrder(x) & (UsedToUse(x,y) | SourceOf(x,y))) -> SourceOf(x,y))", "all x y.((RequiredFor(x,y) & Other(y)) -> SourceOf(x,y))", "all x.((RequiredToUse(x) & Uses(x,y)) -> SourceOf(x,y))", "all x y.((QualityOf(x,y) & Required(y)) -> SourceOf(x,y))", "all x y.((RequiredToUse(x,y) & Something(y)) -> SourceOf(y,y))"]}
{"id": "entailmentbank_validation_546", "nl": "respiration is a source of energy for living things.", "fol": "", "prediction": ["all x.(Respiration(x) -> SourceOfEnergyForLivingTrees(x))", "all x.(Respiration(x) -> SourceOfEnergy(x))", "all x.(Respiration(x) -> SourceOfEnergy(x,ForLivingThings))", "all x.(Respiration(x) -> SourceOfEnergyForLivingThings(x))", "all x.(Respiration(x) -> EnergySourceForLivingThings(x))", "all x.(Respiration(x) -> SourceOfEnergy(x))", "all x.(Respiration(x) -> SourceEnergyForLivingThings(x))", "all x.(Respiration(x) -> LivesIn(x))", "all x.(Respiration(x) -> SourceOfEnergyForLivingThings(x))", "all x.(Respiration(x) -> SourceOfEnergy(x))", "all x.(Respiration(x) -> SourceOfEnergy(x))", "all x y.((Respiration(x) & LivingThing(y)) -> SourceOfEnergy(x,y))", "all x.(Respiration(x) -> SourceOfEnergyForLivingThings(x))", "all x y.((Respiration(x) & LivingThing(y)) -> SourceOfEnergy(x,y))", "all x.(Respiration(x) -> SourceOfEnergyForLivingThings(x))", "all x y.((Respiration(x) & LivingThing(y)) -> SourceOfEnergy(x,y))"]}
{"id": "entailmentbank_validation_547", "nl": "if something releases something else then that something is the source of that something else.", "fol": "", "prediction": ["all x y.((Releases(x,y) & SomethingOther(y)) -> SourceOf(x,y))", "all x y.((Releases(x,y) & Other(z)) -> SourceOf(x,z))", "all x.((Releases(x,x) & SomethingOther(x)) -> SourceOf(x,y))", "all x.((Releases(x) & Releases(x)) -> SourceOf(x,y))", "all x.(Releases(x,y) -> SourceOf(x,y))", "all x y.((Releases(x,y) & Something(x)) -> SourceOf(x,y))", "all x.((Releases(x,y) & Something(x)) -> SourceOf(x,y))", "all x y.((Release(x) & Releases(x,y)) -> Source(x))", "all x y.((Releases(x,y) & Person(y)) -> SourceOf(x,y))", "all x.(((Releases(x) & Releases(x)) -> SourceOf(x,a,b,c))", "all x y.((Releases(x,y) & Releases(y)) -> SourceOf(x,y))", "all x.((Releases(x) & SomethingOther(x)) -> SourceOf(x,y))", "all x y.((Releases(x,y) & Releases(x,y)) -> SourceOf(x,y))", "all x.((Releases(x) & SomethingOther(x)) -> TheSource(x,y))", "all x y.((Release(x) & Release(y)) -> SourceOf(x,y))", "all x y.((Release(x) & Release(y)) -> Source(x,y))"]}
{"id": "entailmentbank_validation_548", "nl": "respiration releases energy.", "fol": "", "prediction": ["all x.(Respiration(x) -> ReleasesEnergy(x))", "all x y.((Respiration(x) & Energy(y)) -> Release(x,y))", "all x.(Respiration(x) -> ReleasesEnergy(x))", "all x.(Respiration(x) -> ReleasesEnergy(x))", "all x.(Respiration(x) -> ReleasesEnergy(x))", "all x.(Respiration(x) -> ReleasesEnergy(x))", "all x.(Respiration(x) -> ReleasesEnergy(x))", "all x y.((Respiration(x) & Energy(y)) -> Releases(x,y))", "all x.(Respiration(x) -> ReleasesEnergy(x))", "all x y.((Respiration(x) & Energy(y)) -> Releases(x,y))", "all x.(Respiration(x) -> ReleasesEnergy(x))", "all x y.((Respiration(x) & Energy(y)) -> Release(x,y))", "all x.(Respiration(x) -> ReleasesEnergy(x))", "all x.(Respiration(x) -> ReleasesEnergy(x))", "all x.(Respiration(x) -> ReleasesEnergy(x))", "all x.(Respiration(x) -> ReleasesEnergy(x))"]}
{"id": "entailmentbank_validation_549", "nl": "photosynthesis stores energy and respiration releases energy.", "fol": "", "prediction": ["(all x.(Photosynthesis(x) -> StoreEnergy(x)) & (Respiration(x) -> ReleaseEnergy(x)))", "all x y.((Photosynthesis(x) & Respiration(y)) -> StoresEnergy(x))", "all x y.((Photosynthesis(x) & respiration(y)) -> (StoresEnergy(x) & ReleasesEnergy(x)))", "all x y.((Photosynthesis(x) & respiration(y)) -> (StoresEnergy(x) & ReleasesEnergy(y)))", "(all x.(Photosynthesis(x) -> StoresEnergy(x)) & (Respiration(x) -> ReleasesEnergy(x)))", "(all x.(Photosynthesis(x) -> StoresEnergy(x)) & (Respiration(x) -> ReleasesEnergy(x)))", "(all x y.((Photosynthesis(x) & Energy(y)) -> Stores(x,y)) & ((Respiration(x) & Energy(y)) -> Releases(x,y)))", "all x y.((Photosynthesis(x) & Respiration(y)) -> (StoresEnergy(x) | ReleasesEnergy(y)))", "all x y.((Photosynthesis(x) & Respiration(y)) -> (StoresEnergy(x,x) & ReleasesEnergy(y)))", "all x y.((Photosynthesis(x) & Respiration(y)) -> (StoresEnergy(x) & ReleasesEnergy(y)))", "(all x.(Photosynthesis(x) -> StoresEnergy(x)) & (Respiration(x) -> ReleasesEnergy(x)))", "all x.((Photosynthesis(x) & Respiration(x)) -> (StoresEnergy(x) & ReleasesEnergy(x)))", "(all x.(Photosynthesis(x) -> StoresEnergy(x)) & all y.(Respiration(y) -> ReleasesEnergy(y)))", "all x y.((Photosynthesis(x) & Respiration(y)) -> (StoresEnergy(x) & ReleasesEnergy(y)))", "all x.((Photosynthesis(x) & Respiration(x)) -> (StoresEnergy(x) & ReleasesEnergy(x)))", "all x y.((Photosynthesis(x) & respiration(y)) -> StoresEnergy(x))"]}
{"id": "entailmentbank_validation_550", "nl": "digestion is when stomach acid breaks down food.", "fol": "", "prediction": ["all x.(Digestment(x) -> (StomachAcid(x) & BreaksDownFood(x)))", "all x.(Diagnosis(x) -> BurnsDownFood(x))", "all x.(Digestation(x) -> BreaksDownFood(x))", "all x.(Digestion(x) -> BreaksDownFood(x))", "all x y.((StomachAcid(x) & Food(y)) -> BreaksDown(x,y))", "all x.(Digestation(x) -> BreaksDownFood(x))", "all x.((StomachAcid(x) & BreaksFeelDay(x)) -> Digestive(x))", "all x y z.((Digestation(x) & Gastroesophage(y) & Food(z) & BreaksDown(y,z)) -> Digestive(x))", "all x y.((StomachAcid(x) & Food(y)) -> BreaksDown(x,y))", "all x.(Digestion(x) -> BreaksDownFood(x))", "all x.(Digestion(x) -> BreaksDownFood(x))", "all x.(Digestion(x) -> BreaksDownFood(x))", "all x.(Digestion(x) -> BreaksDownFood(x))", "all x.(Digestion(x) -> (BreaksDownFood(x) & InStomachAcid(x)))", "all x.(Digestration(x) -> BreaksDownFood(x))", "all x.(Digestion(x) -> BreaksDownFoodByStomachAcid(x))"]}
{"id": "entailmentbank_validation_551", "nl": "the digestive system digests food for the body.", "fol": "", "prediction": ["all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> DigestsFor(x,y,z))", "all x.(DigestiveSystem(x) -> DigestsFoodForBody(x))", "all x.(DigestiveSystem(x) -> DigestsForBody(x))", "all x y.((DigestiveSystem(x) & Body(y)) -> DigestsFoodFor(x,y))", "all x y.((DigestiveSystem(x) & Food(y)) -> DigestsFor(x,y))", "all x y.((DigestiveSystem(x) & Body(y)) -> DigestsFoodFor(x,y))", "all x.(DigestiveSystem(x) -> DigestsFood(x))", "all x y.((DigestiveSystem(x) & Food(y)) -> Digests(x,y))", "all x y.((DigestiveSystem(x) & Food(y) & Digests(x,y)) -> ForBody(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> DigestsFor(x,y,z))", "all x y.((DigestiveSystem(x) & Body(y)) -> DigestionsFood(x,y))", "all x y.((DigestiveSystem(x) & Body(y)) -> DigestsFood(x,y))", "all x y.((DigestiveSystem(x) & Body(y)) -> DigestsFor(x,y))", "all x y.((DigestiveSystem(x) & Food(y)) -> DigestsForBody(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> Digests(x,y,z))", "all x.(DigestiveSystem(x) -> DigestsFoodForBody(x))"]}
{"id": "entailmentbank_validation_552", "nl": "the digestive system breaks down food.", "fol": "", "prediction": ["all x y z.((DigestiveSystem(x) & Food(y) & Food(z)) -> BreaksDown(x,y,z))", "all x.(DigestiveSystemBreaksDownFood(x) -> BreaksDownFood(x))", "all x.(DigestiveSystem(x) -> BreaksDownFood(x))", "all x.(DigestiveSystem(x) -> BreaksDownFood(x))", "all x.(DigestiveSystem(x) -> BreaksDownFood(x))", "all x.(DigestiveSystem(x) -> BreaksDownFood(x))", "all x.(DigestiveSystem(x) -> BreaksDownFood(x))", "all x y.((DigestrativeSystem(x) & Food(y)) -> BreaksDown(x,y))", "all x.(DermalSystem(x) -> BreaksDownFood(x))", "all x.(Breakdown(x) -> DigestiveSystem(x))", "all x.(DigestricSystem(x) -> BreaksDeadFood(x))", "all x.(BreaksDownSytem(x) -> DigestiveSystem(x))", "all x.(DietarySystem(x) -> BreaksDeadFood(x))", "all x.(DigestiveSystem(x) -> BreaksDownFood(x))", "all x.(DigestiveSystem(x) -> BreaksDownFood(x))", "all x.(DigestiveSystem(x) -> BreaksDownFood(x))"]}
{"id": "entailmentbank_validation_553", "nl": "if something is made of something else then that something can be broken down into that something else.", "fol": "", "prediction": ["all x y.((MadeOf(x,y) & MadeOf(x,y)) -> CanBreakDownInto(x,y))", "all x.(MakesOther(x) -> BrokenDownIntoAther(x))", "all x.((MadeOf(x,y) & MadeOf(y)) -> CanBeBreakdownInto(x,y))", "all x y.((MadeOf(x,y) & Other(y)) -> BreaksDownInto(x,y))", "all x.((MadeOf(x,y) & MadeOf(y)) -> BrokenDownInto(z,x))", "all x.((MadeOf(x,y) & BreaksDownInto(x,y)) -> MadeOf(x,y))", "all x.((MadeOf(x,y) & MadeOf(y,z)) -> BreakableInto(z,y))", "all x.((MadeOf(x,y) & MakesOf(x,y)) -> CanBeBreadedInto(x,y))", "all x.((MakesOtherMaterials(x) & BrokenDownInto(x,y)) -> PossibleBreakdownFrom(x,y))", "all x.((MadeOfOther(x) & BrokenInto(x,y)) -> BreakedDownInto(x,y))", "all x.((MadeOf(x,y) & Other(y)) -> BreakableInto(x,y))", "all x y.((MadeOfWhatever(x) & MadeOfWhatever(x)) -> BrokenDownInto(y,x))", "all x.((MadeOf(x,y) & MadeOf(y,X)) -> BrokenDownInto(x,y))", "all x.((MadeOf(x,y) & MadeOf(y,z)) -> CanBeBreakdownInto(z,y))", "all x.((MadeOfAnother(x) -> BreakedIntoAnother(x))", "all x y.((MadeOf(x,y) & MadeOf(x,y)) -> BrokenDeliveredInto(x,y))"]}
{"id": "entailmentbank_validation_554", "nl": "if something is made of something else then that something contains that something else.", "fol": "", "prediction": ["all x y.((MadeOf(x,y) & Other(y)) -> Contains(x,y))", "all x.((ManufacturedOf(x,y) & SomethingOther(y)) -> ContainsProperDomain(x,y))", "all x y.((MadeOf(x,y) & Matter(x)) -> Contains(x,y))", "all x y.((MakesOf(x,y) & makes(x,y)) -> Contains(x,y))", "all x.((MadeOf(x,other) & Contains(x,other)) -> Contains(x,other))", "all x.((MadeOf(x,y) & MadeOf(x,y)) -> Contains(x,y))", "all x.((MadeOf(x,something) & MadeOf(x,something)) -> Contains(x,something))", "all x y.((Function(x) & MadeOf(x,y)) -> ContainsAnother(x,y))", "all x.((MadeOf(x,Y) & MadeOf(x,Y)) -> Contains(x,y))", "all x y.((MadeOf(x) & MadeOf(x,y)) -> Contains(x,y))", "all x y.((MadeOf(x,y) & MadeOf(y)) -> ContainsThat(x,y))", "all x.((ProducedOf(x,y) & MadeOf(y)) -> Contains(x,y))", "all x y.((MadeOf(x,y) & (MadeOf(x,y) & MadeOf(x,y))) -> Contains(x,y))", "all x.((MadeOfOther(x) & MakingOther(x)) -> ContainsThatOther(x))", "all x y z.((MadeOf(x,y) & MakesOf(x,z)) -> Contains(x,y,z))", "all x.((MadeOfAnother(x) & MadeOfAnother(x)) -> Contains(x,y))"]}
{"id": "entailmentbank_validation_555", "nl": "if something contains something else then that something can be broken down into that something else.", "fol": "", "prediction": ["all x y.(((Content(x) & Contains(x)) -> CanBeBrokenDownInto(y))", "all x y.((SingleType(x) & Contains(x,y)) -> BreaksDownInto(x,y))", "all x y.((Breakdown(x) & Piece(y)) -> Contains(x,y))", "all x.((BelongsToOther(x) & Contains(x,y)) -> BrokenDown(x,z))", "all x y z.((Contains(x,y) & Something(z)) -> CanBeBreakdownInto(x,z))", "all x.(Breakdown(x) -> SomethingAbout(x))", "all x.(PropertiesOthers(x) -> BrokenDownIntoOther(x))", "all x.((ContainsMuchOther(x) & BrokenInto(x,y)) -> BreakingDown(x,z))", "all x y.((Creates(x,y) & Contains(x,y)) -> BrokenDownInto(x,y))", "all x.((ContainsMore(x)) -> CanBeBreakdownInto(x,y))", "all x y z.(((Content(x) & Contains(x,y) & Other(z)) -> CanBeBreakdownInto(x,z))", "all x y.((Product(x) & ContentedIn(x,y)) -> Breakable(x,y))", "all x.((ContainsElement(x) & ContainsElement(x)) -> CanBeBreakdown(x))", "all x y.((SpecificGroup(x) & Contains(x,y)) -> BrokenDownInto(x,y))", "all x.((ContainsOrMore(x) & BrokenDownInto(x,y)) -> ContainsOrMore(y))", "all x y.((RequiredInPotential(x) & ContainsPotential(y)) -> BreaksDownInto(x,y))"]}
{"id": "entailmentbank_validation_556", "nl": "the digestive system breaks down food into the substances it contains.", "fol": "", "prediction": ["all x y z.((GastralSystem(x) & Food(y) & Substance(z)) -> BreaksDownInto(x,y,z))", "all x y.((DigestiveSystem(x) & Food(y) & Contains(x,y)) -> BreaksDownIntoSubstances(x,y))", "all x.(DigestiveSystem(x) -> BreaksDependentFoodIntoSubstances(x))", "all x y z.((DigestiveSystem(x) & Food(y) & Substance(z) & BreaksDownInto(x,y,z)) -> ContainsDown(y,z))", "all x y z.((DigestiveSystem(x) & Food(y) & Substance(z) & BreaksDownInto(x,y,z)) -> Contains[x,y,z))", "all x.(BreaksDownFood(x) -> ContainsSubstances(x))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoSubstances(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Contains(z)) -> BreaksDownInto(x,y,z))", "all x y.((DigestiveSystem(x) & Substance(y)) -> BreaksDownInto(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Substance(z) & BreaksDown(x,y,z)) -> Contains(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Substance(z)) -> BreaksDownInto(x,y,z))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoSubstances(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Substance(z)) -> BreaksDownInto(x,y,z))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksBetweenSubstances(x,y))", "all x y.((DigestiveSystem(x) & Food(y) & ContainsSubstances(y)) -> BreaksDownIntoSubstances(x,y))", "all x.(DigestiveSystem(x) -> BreaksDownFood(x))"]}
{"id": "entailmentbank_validation_557", "nl": "food contains nutrients for living things.", "fol": "", "prediction": ["all x y.((Food(x) & LivingThing(y)) -> ContainsNutrientsFor(x,y))", "all x.(Food(x) -> ContainsNutrients(x))", "all x.(Food(x) -> ContainsNutrientsForLivingThings(x))", "all x.(Food(x) -> ContainsNutrients(x,LivingThings))", "all x = Nutrients(x,livingThings))", "all x y.((Food(x) & LivingThing(y)) -> ContainsNutrients(x,y))", "all x.(Food(x) -> ContainsNutrientsForLivingThings(x))", "all x.(Food(x) -> ContainsNutrientsForLivingThings(x))", "all x y.((Food(x) & LivingThing(y)) -> ContainsNutrients(x,y))", "all x y.((Food(x) & LivingThing(y)) -> ContainsNutrients(x,y))", "all x.(Food(x) -> ContainsNutrientsForLivingThings(x))", "all x.(Food(x) -> (ContainsNutrients(x) & LivesThing(x)))", "exists x.(Food(x) & ContainsNutrients(x))", "all x y.((Food(x) & LivedThing(y)) -> ContainsNutrients(x,y))", "all x.(Food(x) -> ContainsNutrientsForLivingThings(x))", "all x y.((Food(x) & Necessity(y)) -> ContainsForLivingThings(x,y))"]}
{"id": "entailmentbank_validation_558", "nl": "the digestive system breaks down food into nutrients for the body.", "fol": "", "prediction": ["all x.(BreaksDownFoodToNutrients(x) -> DigestiveSystem(x))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoNutrients(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> BreaksDownIntoNutrients(x,y,z))", "all x y.((DigestiveSystem(x) & Body(y)) -> BreaksDownFoodIntoNutrients(x,y))", "all x y.((DigestiveSystem(x) & Body(y)) -> BreaksDownIntoNutrients(x,y))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoNutrients(x,y))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownAndIntoNutrients(x,y))", "all x y.((DigestiveSystem(x) & Body(y)) -> BreaksDownFoodIntoNutrients(x,y))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoNutrients(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> BreaksDownToNutrients(x,y,z))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownInNutrients(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> BreaksDownIntoNutrients(x,y,z))", "all x.(DigestiveSystem(x) -> BreaksDownOfFood(x))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDown(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> BreaksDownIntoNutrients(x,y,z))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> BreaksDownIntoNutrients(x,y,z))"]}
{"id": "entailmentbank_validation_559", "nl": "scales are a covering around the body of a scaled animal.", "fol": "", "prediction": ["all x y z.((Scales(x) & ScaledAnimal(y) & Body(z) & Covering(x,y,z)) -> ScaledAnimal(y,z))", "all x.(Scales(x) -> CoveredAByScenes(x))", "all x.(Scales(x) -> CoversAbout(x))", "all x.(Scales(x) -> (CoveringAboveBody(x,scaledAnimal)))", "all x.(Scales(x) -> (CoversAboutBodyOfScales(x) & ScaledAnimal(x)))", "all x y.((Scales(x) & ScalpedAnimal(y)) -> CoversAboutBody(x,y))", "all x y.((Scales(x) & ScaledAnimal(y)) -> CoversAboutBody(x,y))", "all x y.((Scales(x) & ScaledAnimal(y)) -> CoversAboutBody(x,y))", "all x y.((Scales(x) & Scale(y) & ScaledAnimal(x)) -> CoverageAfterBody(x,y))", "all x.(Scales(x) -> CoversAroundBug(x))", "all x y.((Scales(x) & Scaled(y)) -> CoversAboutBody(x,y))", "all x y z.((Scales(x) & ScaledAnimal(y) & Body(z)) -> CoversAround(x,y,z))", "all x.(Scales(x) -> CoversAroundScales(x))", "all x y.((Scales(x) & ScaledAnimal(y)) -> (CoversBody(x,y) | ScaledAnimal(y)))", "all x.(Scales(x) -> (CoversBody(x) & ScaledAnimal(x)))", "all x.(Scales(x) -> (CoversBodyOfScaledAnimal(x) & ScaledAnimal(x)))"]}
{"id": "entailmentbank_validation_560", "nl": "a fish is a kind of scaled animal.", "fol": "", "prediction": ["all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScalpedAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScalpedAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x y.((Fish(x) & ScaldAnimal(y)) -> ScalpedAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))"]}
{"id": "entailmentbank_validation_561", "nl": "fish is a kind of scaled animal with scales covering around the body.", "fol": "", "prediction": ["all x.(Fish(x) -> (ScalesAroundBody(x) & HasScalesAroundBody(x)))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> (Scalped(x) & ScalesCovelingAboutBody(x)))", "all x.(Fish(x) -> (ScalesInFish(x) & HasScalesCoversBody(x)))", "all x.(Fish(x) -> (Scales(x) & ScaledAnimal(x) & CoversBody(x)))", "all x.(Fish(x) -> (Scales(x) & ScalesCovered(x) & AroundBody(x)))", "all x.(Fish(x) -> (Scales(x) & Scales(x) & CoversAroundBody(x)))", "all x.(Fish(x) -> (Scales(x) & ScalesCoverAroundBody(x)))", "all x.(Fish(x) -> (ScavedAnimal(x) & ScalesCoveling(x)))", "all x y.((Fish(x) & Scaled(x)) -> (ScalesCoveringMolecule(x) & Species(y)))", "all x.(Fish(x) -> (Scales(x) & Scales(x) & CoversBody(x)))", "all x.(Fish(x) -> (ScalpedAnimal(x) & ScaledCoveringAboutBody(x)))", "all x.(Fish(x) -> (Scales(x) & HasScalesCovering(x)))", "all x.(Fish(x) -> (Scales(x) & ScalecrowdsAroundBody(x)))", "all x.(Fish(x) -> (ScalpedAnimal(x) & ScalesCoversAboutBody(x)))", "all x.(Fish(x) -> (Scales(x) & HasScalesCovering(x)))"]}
{"id": "entailmentbank_validation_562", "nl": "scales are used for protection by scaled animals.", "fol": "", "prediction": ["all x.(Scales(x) -> UsedForScaling(x))", "all x.(Scales(x) -> UsedForProtection(x,scaledAnimals))", "all x.(Scales(x) -> UsedForProtectionByScales(x))", "all x.(Scales(x) -> (UsedForProtectionByScaledAnimals(x)))", "all x y z.((Scales(x) & Scale(y) & ScaledAnimal(z)) -> UsedForProtection(x,y,z))", "all x y z.((Scales(x) & Scale(y) & ScaledAnimal(z)) -> UsedForProtection(x,y,z))", "all x.(Scales(x) -> UsedForProtectionByScaledAnimals(x))", "all x y z.((Scales(x) & Scale(y) & ScalingAnimal(z)) -> UsedForProtection(x,y,z))", "all x y.((Scales(x) & ScaledAnimal(y)) -> UsedForSafety(x,y))", "all x y z.((Scales(x) & ScaledAnimal(y) & ScaledAnimal(z)) -> UsedForProtection(x,y,z))", "all x.(Scales(x) -> UsedForProtection(x))", "all x y z.((Scales(x) & ScaledAnimal(y) & ScaledAnimal(z)) -> UsedForProtection(x,y,z))", "all x y.((Scales(x) & ScaledAnimal(y)) -> UsedForProtection(x,y))", "all x.(Scales(x) -> UsedForProtection(x,ScalpedAnimals))", "all x y.((Scales(x) & ScaledAnimal(y)) -> UsedForProtection(x,y))", "all x y.((Scales(x) & ScaledAnimal(y)) -> UsedForProtection(x,y))"]}
{"id": "entailmentbank_validation_563", "nl": "scales are used for protection by fish.", "fol": "", "prediction": ["all x y.((Scales(x) & Fish(y)) -> UsedForProtection(x,y))", "all x y.((Scales(x) & Fish(y)) -> UsedForProtection(x,y))", "all x y.((Scales(x) & Fish(y)) -> UsedForProtection(x,y))", "all x.(Scales(x) -> UsedForProtectionByFish(x))", "all x.(Scanning(x) -> UsedForProtection(x,fish))", "all x.(Scales(x) -> UsedForProtectionByFish(x))", "all x.(Scales(x) -> UsedForProtection(x))", "all x.(Scales(x) -> UsedForProtectionByFish(x))", "all x.(Scales(x) -> UsedForProtection(x,Fish))", "all x.(Scales(x) -> UsedForProtectionByFish(x))", "all x y.((Scales(x) & Fish(y)) -> UsedForProtection(x,y))", "all x.(Scale(x) -> UsedForProtection(x))", "all x.(Scales(x) -> UsedForProtection(x,fish))", "all x.(Scales(x) -> UsedForProtection(x,fish))", "all x y.((Scales(x) & Fish(y)?) -> UsedForProtection(x,y))", "all x.(Scales(x) -> UsedForProtection(x))"]}
{"id": "entailmentbank_validation_564", "nl": "a human is a kind of animal.", "fol": "", "prediction": ["all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))"]}
{"id": "entailmentbank_validation_565", "nl": "an animal is a kind of living thing.", "fol": "", "prediction": ["all x.(Animal(x) -> LivingThing(x))", "all x.(Animal(x) -> LivingThing(x))", "all x.(Animal(x) -> LivingThing(x))", "all x.(Animal(x) -> LivingThing(x))", "all x.(Animal(x) -> LivesThing(x))", "all x.(Animal(x) -> LivingThing(x))", "all x.(Animal(x) -> LivingThing(x))", "all x.(Animal(x) -> LivingTree(x))", "all x.(Animal(x) -> LivingThing(x))", "all x.(Animal(x) -> LivesThing(x))", "all x.(Animal(x) -> LivingThing(x))", "all x.(Animal(x) -> LivingThing(x))", "all x.(Animal(x) -> LivingThing(x))", "all x.(Animal(x) -> LivingThing(x))", "all x.(Animal(x) -> LivingThing(x))", "all x.(Animal(x) -> LivingThing(x))"]}
{"id": "entailmentbank_validation_566", "nl": "a human is a kind of living thing.", "fol": "", "prediction": ["all x.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivesThing(x))", "all x.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivesThing(x))", "all x.(Human(x) -> LivesThing(x))", "all x.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivelyThing(x))", "all x.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivingThing(x))"]}
{"id": "entailmentbank_validation_567", "nl": "a plant is a kind of living thing.", "fol": "", "prediction": ["all x.(Plant(x) -> LivingThing(x))", "all x.(Plant(x) -> LivedThing(x))", "all x.(Plant(x) -> LivingThing(x))", "all x.exists y.(Plant(x) & LivingThing(y) & LivingThing(x))", "all x.((Plant(x) & LivingThing(x)) -> LivingThing(x))", "exists x.(Plant(x) & LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))"]}
{"id": "entailmentbank_validation_568", "nl": "an apple tree is a kind of plant.", "fol": "", "prediction": ["all x.(AppleTree(x) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x y.((AppleTree(x) & Plant(y)) -> SortOf(x,y))", "all x.(AppleTree(x) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))"]}
{"id": "entailmentbank_validation_569", "nl": "an apple tree is a kind of living thing.", "fol": "", "prediction": ["all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingDing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x y.((AppleTree(x) & LivingThing(x)) -> LivedThing(y))"]}
{"id": "entailmentbank_validation_570", "nl": "all living things are made of cells according to the cell theory.", "fol": "", "prediction": ["all x.(LivingThing(x) -> MadeOfCells(x))", "all x y.((LivingThing(x) & CellTheory(y)) -> MADEOfCells(x,y))", "all x.(Alternative(x) -> (MadeOfCells(x) & CellTheory(x)))", "all x.(LivingThing(x) -> MakesOfCells(x))", "all x.((LivingTHE(x) & MadeOfCells(x)) -> CellTheory(x))", "all x.(CellTheory(x) -> MadeOfCells(x))", "all x.(LivingThing(x) -> MadeOfCells(x))", "all x.(LivingThing(x) -> MadeOfCells(x))", "all x.(LivingThing(x) -> MadeOfCells(x))", "all x.(LivingThing(x) -> MadeOfCells(x))", "all x y z.((LivingThing(x) & CellTheory(y) & Cell(z)) -> MadeOfCells(x,y,z))", "all x y.((LivingThing(x) & CellTheory(y)) -> MadeOfCells(x,y))", "all x.(LivingThing(x) -> MadeOfCells(x))", "all x.(LivingThing(x) -> MadeOfCells(x))", "all x y z.((LivingThing(x) & CellTheory(y) & CellTheory(z)) -> MadeOfCells(x,y,z))", "all x.(LivingThing(x) -> MadeOfCellsDependableToCellTheory(x))"]}
{"id": "entailmentbank_validation_571", "nl": "both the human and the apple tree are made of cells.", "fol": "", "prediction": ["all x y.(FoundIn(x,y) & Animal(x) & -FoundIn(y,x))", "all x.((HasCell(x) | AppleTree(x)) -> MadeOf(x))", "all x y z.((Human(x) & AppleTrue(y) & Cell(z)) -> MADEOf(x,y,z))", "all x.((Human(x) & AppleTree(x)) -> MadeOfCells(x))", "all x y.((Human(x) & AppleTree(y)) -> MadeOfCells(x))", "all x.((Human(x) & Apple(x)) -> MadeOfCells(x))", "all x.(Human(x) -> MadeOfCells(x))", "all x y.((Human(x) & Apple(y)) -> MadeOfCells(x,y))", "all x.((Human(x) & AppleTree(x)) -> MadeOfCells(x)) & MadeOfCells(x))", "exists x.(HumanTree(x) & AppleTree(x) & MadeOfCells(x))", "(MadeOfCells(human,y) & MadeOfCells(apple,y))", "all x.(HumanTree(x) -> (Machinery(x) | AppleTree(x)))", "all x y.((HumanTree(x) & AppleTree(y)) -> MadeOfCells(x))", "all x.(HumanElement(x) & AppleElement(x) -> MadeOfCells(x))", "(MadeOfCells(Human,Cells) & MadeOf(Apple,Apple,Cells))", "all x.(Ancient(x) -> (Human(x) & AppleTree(x)))"]}
{"id": "entailmentbank_validation_572", "nl": "a plant cell is a kind of cell.", "fol": "", "prediction": ["all x.(PlantCell(x) -> Cell(x))", "all x.(PlantCell(x) -> Cell(x))", "all x.(PlantCell(x) -> Cell(x))", "all x.(PlantCell(x) -> ACell(x))", "all x.(PlantCell(x) -> Cell(x))", "all x.(PlantCell(x) -> Cell(x))", "all x.(PlantCell(x) -> Cell(x))", "all x.(PlantCell(x) -> Cell(x))", "all x.(PlantCell(x) -> Cell(x))", "all x.(PlantCell(x) -> Cell(x))", "all x.(PlantCell(x) -> Cell(x))", "all x.(PlantCell(x) -> Cell_Type(x))", "all x.((PlantCell(x) & Cell(x)) -> Cell(x))", "all x.(PlantCell(x) -> Cell(x))", "exists x.(PlantCell(x) & Cell(x))", "all x.(PlantCell(x) -> Cell(x))"]}
{"id": "entailmentbank_validation_573", "nl": "a cell nucleus is a part of a cell.", "fol": "", "prediction": ["all x.(CellNucleus(x) -> PartOfCell(x))", "all x.(CellNucleus(x) -> PartOfCell(x))", "all x y.((CellNucleus(x) & Cell(y)) -> PartOf(x,y))", "all x.(CellNucleus(x) -> PartOfCell(x))", "all x y z.((CellNucleus(x) & Cell(y) & Cell(z)) -> PartOf(x,y,z))", "all x y.((CellNucleus(x) & Cell(y)) -> PartOfCell(x,y))", "all x y.((CellNucleus(x) & Cell(y)) -> PartOf(x,y))", "all x.(CellNucleus(x) -> PartOfCell(x))", "all x.(CellNucleus(x) -> PartOfCell(x))", "all x.(CellNucleus(x) -> PartOfCell(x))", "all x.(CellNucleus(x) -> PartOfCell(x))", "all x.(CellNucleus(x) -> PartOfCell(x))", "all x y.((CellNucleus(x) & Cell(y)) -> PartOf(x,y))", "all x y.((CellNucleus(x) & Cell(y)) -> PartOf(x,y))", "all x y.((CellNucleus(x) & Cell(y)) -> PartOf(x,y))", "all x.(CellNucleus(x) -> PartOfCell(x))"]}
{"id": "entailmentbank_validation_574", "nl": "a cell nucleus is a part of a plant cell.", "fol": "", "prediction": ["all x y.((CellNucleus(x) & PlantCell(y)) -> PartOf(x,y))", "all x.(CellNucleus(x) -> PartOfPlantCell(x))", "all x.(CellNucleus(x) -> PartOfPlantCell(x))", "all x.(CellNucleus(x) -> PartOfPlantCell(x))", "all x y.((CellNucleus(x) & PlantCell(y)) -> PartOf(x,y))", "all x y.((CellNucleus(x) & PlantCell(y)) -> PartOf(x,y))", "all x y.((CellNucleus(x) & PlantCell(y)) -> PartOfPlantCell(x))", "all x y.((CellNucleus(x) & PlantCell(y)) -> PartOf(x,y))", "all x y.((CellNucleus(x) & PlantCell(y)) -> PartOf(x,y))", "all x.(CellNucleus(x) -> PartOfPlantCell(x))", "all x.(CellNucleus(x) -> PartOfPlantCell(x))", "all x.(CellNucleus(x) -> PartOfPlantCell(x))", "all x y.((CellNucleus(x) & PlantCell(y)) -> PartOf(x,y))", "all x y.((CellNucleus(x) & PlantCell(y)) -> PartOf(x,y))", "all x y.((CellNucleus(x) & PlantCell(y)) -> PartOf(x,y))", "all x.((CellNucleus(x) & PlantCell(x)) -> PartOfCell(x))"]}
{"id": "entailmentbank_validation_575", "nl": "a cell wall is a part of a plant cell for supporting and protecting the cell membrane.", "fol": "", "prediction": ["all x.(CellWall(x) -> (PartOfPlantCell(x) & SupportsAndProtectsCellMembrane(x)))", "all x.((CellWall(x) & PlantCell(y) & PartOf(x,y)) -> SupportsAndProtectsCellMembrane(x))", "all x y.((CellWall(x) & PlantCell(y)) -> (PartOfCell(x,y) & SupportingAndProtectingCellMembrane(x,y)))", "all x y z.((CellWall(x) & PlantCell(y) & PlantCell(z) & SupportsAndProtectsMembrane(x,y,z)) -> PartOf(x,y,z))", "all x.(CellWall(x) -> PartOfPlantCell(x))", "all x y.((CellWall(x) & PlantCell(y)) -> SupportsAndProtectsMembrane(x,y))", "all x y.((CellWall(x) & PlantCell(y)) -> (PartOf(x,y) & Supports(x,y) & Protects(x,y)))", "all x y.((CellWall(x) & PlantCell(y)) -> SupportsAndProtectsCellMembrane(x,y))", "all x y.((CellWall(x) & PlantCell(y)) -> SupportsAndProtectsCellMembrane(x,y))", "all x.(CellWall(x) -> PartOfPlantCellForSupportingAndProtectingCellMembrane(x))", "all x y.((CellWall(x) & PlantCell(y) & PartOf(x,y)) -> SupportsAndProtects(x,y))", "all x y.((CellWall(x) & PlantCell(y)) -> (PartOf(x,y) & SupportsMachinery(x) & ProtectsCellMembrane(x)))", "all x.(CellWall(x) -> (PartOfPlantCell(x) & SupportsAndProtectsCellMembrane(x)))", "all x y.((CellWall(x) & PlantCell(y)) -> SupportsAndProtectsMembrane(x,y))", "all x y z.((CellWall(x) & PlantCell(y) & CellMembrane(z)) -> (PartOf(x,y,z) & SupportsAndProtects(x,y,z)))", "all x y.((CellWall(x) & PlantCell(y)) -> (PartOf(x,y) & SupportsAndProtectsCellMembrane(x)))"]}
{"id": "entailmentbank_validation_576", "nl": "chloroplast is a part of a plant cell.", "fol": "", "prediction": ["all x.(Clorophyll(x) -> PartOfPlantCell(x))", "all x.(Chlorophyll(x) -> PartOfPlantCell(x))", "all x.(Chlorophyll(x) -> PlantCell(x))", "all x.(Chlorophyll(x) -> PartOfPlantCell(x))", "all x y.((Chlorophyll(x) & PlantCell(y)) -> PartOf(x,y))", "all x.(Chlorophyll(x) -> PartOfPlantCell(x))", "all x y.((Chlorophyll(x) & PlantCell(y)) -> PartOf(x,y))", "all x.(Chloroplast(x) -> PartOfPlantCell(x))", "all x y.((Clorophyll(x) & PlantCell(y)) -> PartOf(x,y))", "all x.(Chlorophyll(x) -> PartOfPlantCell(x))", "all x.(Chlorophyll(x) -> PlantCell(x))", "all x.(Chlorophyll(x) -> PartOfPlantCell(x))", "all x.(Chlorophyll(x) -> PartOfPlantCell(x))", "all x.(Chlorophyll(x) -> PartOfPlantCell(x))", "all x.(Chlorophyll(x) -> PartOfPlantCell(x))", "all x.(Chlorophyll(x) -> PartOfPlantCell(x))"]}
{"id": "entailmentbank_validation_577", "nl": "a cell nucleus, chloroplast and a cell wall are part of a plant cell.", "fol": "", "prediction": ["all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> PartOfPlantCell(x))", "all x.((CellNucleus(x) & Chlorophyll(x) & CellWall(x)) -> PlantCell(x))", "all x.((CellNucleus(x) | Chlorophyll(x) | CellWall(x)) -> PlantCell(x))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> PartOfPlantCell(x))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> PartOfPlantCell(x))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> PlantCell(x,y,z))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> (PartOf(x,y) & PartOfPlantCell(x)))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> (PartOfPlantCell(x) & PartOfPlantCell(x,y,z)))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> PartOfPlantCell(x))", "all x.((CellNucleus(x) | Chlorophyll(x) | CellWall(x)) -> PlantCell(x))", "all x y z.((CellNucleus(x) & Chloroplast(y) & CellWall(z)) -> PlantCell(x))", "all x.((CellNucleus(x) & Chlorophyll(x) & CellWall(x)) -> PlantCell(x))", "all x y.((CellNucleus(x) & Chlorophyll(y) & CellWall(y)) -> PartOfPlantCell(x,y))", "all x.((CellNucleus(x) & Chlorophyll(x) & CellWall(x)) -> PlantCell(x))", "all x y z w.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> (PartOfPlantCell(x) & PartOfPlantCell(y)))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> (PartOfPlantCell(x) & PartOfPlantCell(x)))"]}
{"id": "entailmentbank_validation_578", "nl": "a computer room is used to control the assembly process in a factory.", "fol": "", "prediction": ["all x y z.((ComputerRoom(x) & Factory(y) & AssemblyProcess(z)) -> ControlsIn(x,y,z))", "all x y z.((ComputerRoom(x) & Factory(y) & AssemblyProcess(z)) -> UsedToControl(x,y,z))", "all x y z.((ComputerRoom(x) & Factory(y) & AssemblyProcess(z)) -> UsedToControl(x,y,z))", "all x y.((ComputerRoom(x) & Factory(y)) -> ControlAssemblyProcess(x,y))", "all x y.((ComputerRoom(x) & Factory(y)) -> ControlsAssemblyProcessIn(x,y))", "all x y.((ComputerRoom(x) & Factory(y)) -> ControlsAssemblyProcessIn(x,y))", "all x y z.((ComputerRoom(x) & Factory(y) & AssemblyProcessIn(z)) -> ControlledIn(x,y,z))", "all x y z.((ComputerRoom(x) & Factory(y) & AssemblyProcess(z)) -> UsedToControlInFabric(x,y,z))", "all x y.((ComputerRoom(x) & Factory(y)) -> ControlsAssemblyProcessIn(x,y))", "all x y.((ComputerRoom(x) & Factory(y)) -> ControlsAssemblyProcess(x,y))", "all x y.((ComputerRoom(x) & Factory(y)) -> ControlsAssemblyProcessIn(x,y))", "all x y.((ComputerRoom(x) & Factory(y)) -> ControlsSamblingProcessIn(x,y))", "all x y.((ComputerRoom(x) & Factory(y)) -> UsedToControlAssemblyProcess(x,y))", "all x y.((ComputerRoom(x) & Factory(y) & UsedToControlMassemblyProcess(x,y)) -> UsedToControlMassembly(x,y))", "all x y z.((ComputerRoom(x) & Factory(y) & AssemblyProcess(z)) -> Controls(x,y,z))", "all x y.((ComputerRoom(x) & Factory(y)) -> ControlsAssemblyProcess(x,y))"]}
{"id": "entailmentbank_validation_579", "nl": "the cell nucleus controls many of the functions of the cell.", "fol": "", "prediction": ["all x.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))", "all x y z.((CellNucleus(x) & Cell(y) & Function(z)) -> Controls(x,z))", "all x.(CellNucleus(x) -> ControlsFunctions(x))", "all x y z.((CellNucleus(x) & Cell(y) & Function(z)) -> Controls(x,y,z))", "all x.(CellNucleus(x) -> ControlsFunctions(x,cell,cell))", "all x y.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))", "all x.(CellNucleus(x) -> ControlsFunctionsOfCell(x))", "all x.(Change(x) -> Controls(x,y))", "all x y.((InCellNucleus(x) & CellFunction(y)) -> Controls(x,y))", "all x y.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))", "all x y z.((CellNucleus(x) & Cell(y) & Function(z)) -> Controls(x,y,z))", "all x y.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))", "all x y.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))", "all x y.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))", "all x.((CellNucleus(x) & Cell(y)) -> ControlsFunction(x,y))", "all x y.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))"]}
{"id": "entailmentbank_validation_580", "nl": "controlling is a kind of function.", "fol": "", "prediction": ["all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> LikeFunction(x))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))"]}
{"id": "entailmentbank_validation_581", "nl": "a computer room in a factory has a similar function to the cell nucleus in controlling the functions.", "fol": "", "prediction": ["all x y.((ComputerRoom(x) & Factory(y) & InFabrik(x,y)) -> SimilarFunction(x))", "all x y.((ComputerRoom(x) & Factory(y) & InFabric(x,y)) -> SimilarFunctionToCellNucleus(x))", "all x y z.((ComputerRoom(x) & Factory(y) & CellNucleus(z)) -> SimilarFunctionToControl(x,z))", "all x y.((ComputerRoom(x) & Factory(y) & In(x,y)) -> (SameFunction(x) & CellNucleus(x) & ControlsFunctions(x)))", "all x y.((ComputerRoom(x) & Factory(y)) -> SharesFunction(x,y))", "all x y.((ComputerRoom(x) & Factory(y) & InFactory(x,y)) -> exists z.(CellNucleus(z) & InControllingFunctions(z,y))))", "all x y.((ComputerRoom(x) & Factory(y) & ControlsFunctions(x,y)) -> SimilarFunctionToCellNucleus(x))", "all x.((ComputerRoom(x) & Factory(x)) -> SimilarFunctionToCellNucleus(x))", "all x y.((ComputerRoom(x) & Factory(y) & In(x,y)) -> SimilarFunctionToCellNucleus(x,y))", "all x y.((ComputerRoom(x) & Factory(y) & InFabric(x,y) & CellNucleus(y)) -> SimilarFunction(x,y))", "all x y.((ComputerRoom(x) & Factory(y)) -> SimilarFunctionToCellNucleus(x,y))", "all x y z.((ComputerRoom(x) & Factory(y) & CellNucleus(z)) -> ClosestFlowForControllingFunctions(x,y))", "all x y.((ComputerRoom(x) & Factory(y) & InFactory(x,y) & CellNucleus(x,y)) -> SimilarFunctionInControllingFunctions(x,y,CellNucleus))", "all x y.((ComputerRoom(x) & Factory(y) & InFactory(x,y)) -> SimilarFunctionToCellNucleus(x,y))", "all x y.((ComputerRoom(x) & Factory(y) & Incandescent(y)) -> SimilarFunctionToCellNucleus(x,y))", "all x y.((ComputerRoom(x) & Factory(y) & InFabric(x,y)) -> SimilarFunction(x,y))"]}
{"id": "entailmentbank_validation_582", "nl": "if something does not contain something else, then that something else cannot be found in that something.", "fol": "", "prediction": ["all x.((Excludes(x,y) & Contains(y)) -> -CanBeFoundIn(x,y))", "all x y.((Exclusive(x) & -Contain(x,y)) -> -CanbeGift(y))", "all x y.(((DoesNotContain(x) & SomethingAndOtherName(x)) -> -CanBeFindtIn(x,y))", "all x.((TenNumbers(x) & -Contains(x,something)) -> -FoundIn(x,something))", "all x y.(((DoesNotContain\" & -Contain(x,y)) -> -CanBeFoundIn(y,x))", "all x.((Matter(x) & -Contains(x,Element)) -> -CanBeRelated(x,Element))", "all x.((DoesNotContainOneElement(x) & -ContainOther(x)) -> -FoundIn(x,y))", "all x.((DoesntContainOtherThings(x) & -Contains(x,other)) -> -CanFindIn(x,other))", "all x y.((DoesNotContain(x,y) & Contains(y,x)) -> -CanBeFoundIn(x,y))", "all x.((Resists(x) & -Contain(x)) -> -CanBeFoundIn(x,y))", "all x y.((Causes(x,y) & -Contains(x,y)) -> -FindsIn(x,y))", "all x y.((Does(x,y) & -Contains(x,y)) -> -CanFindIn(x,y))", "all x y.((Exclusive(x) & -Contains(x,y)) -> -CanFollow(x))", "all x y.(((Natter(x) & & -Contains(x,y)) -> -Contains(x,y))", "all x.((SinceDispose(x) & -ContainsThingSask(x)) -> -ContainSask(x))", "all x.((Inclusion(x) & -Contain(x)) -> -FindAttribution(x))"]}
{"id": "entailmentbank_validation_583", "nl": "a prokaryotic cell does not contain a nucleus.", "fol": "", "prediction": ["all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x.(ProkaryoticCell(x) -> -HasNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContainNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x.(ProkaryoticCell(x) -> -ExistsNucleus(x))", "all x.((ProkaryoticCell(x) & -ContainsNucleus(x)) -> -ContainsNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x y.((ProkaryoticCell(x) & Nucleus(y)) -> -Contains(x,y))"]}
{"id": "entailmentbank_validation_584", "nl": "a nucleus cannot be found in prokaryotic cells.", "fol": "", "prediction": ["all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -FindsIn(x,y))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -FoundIn(x,y))", "all x.(Nucleus(x) -> -FindInProkaryoticCell(x))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -FoundIn(x,y))", "all x.(TaldensNucleus(x) -> -CanBeFoundInProkaryoticCells(x))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -FoundIn(x,y))", "all x.(Nucleus(x) -> -FoundInProkaryoticCells(x))", "all x.(Nucleus(x) -> -FoundInProkaryoticCells(x))", "all x.(Nucleus(x) -> -FoundInProkaryoticCells(x))", "all x.(SelfFoundUrcleus(x) -> -FoundInProkaryoticCells(x))", "all x.(Nucleus(x) -> -FoundInProkaryoticCells(x))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -CausedIn(x,y))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -FindableIn(x,y))", "all x.((Nucleus(x) & -ProkaryoticCells(x)) -> -FoundIn(x,ProkaryoticCells))", "all x y z.((Nucleus(x) & ProkaryoticCell(y) & Cell(z)) -> -FoundIn(x,y,z))", "all x.(Nucleus(x) -> -InProkaryoticCell(x))"]}
{"id": "entailmentbank_validation_585", "nl": "photosynthesis makes food for the plant.", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & Plant(y)) -> MakesFood(x,y))", "all x.(Photosynthesis(x) -> MakesFoodForPlant(x))", "all x y z.((Photosynthesis(x) & Plant(y) & Food(z)) -> MakesFor(x,y,z))", "all x.(Photosynthesis(x) -> MakesFoodForPlant(x))", "all x.(Photosynthesis(x) -> MakesFood(x,Plant))", "all x y.((Photosynthesis(x) & Plant(y)) -> MakesFoodFor(x,y))", "all x.(Photosynthesis(x) -> MakesFoodForPlant(x))", "all x y.((Photosynthesis(x) & Plant(y)) -> MakesFoodFor(x,y))", "all x y.((Photosynthesis(x) & Plant(y)) -> MakesFood(x,y))", "all x y.((Photosynthesis(x) & Plant(y)) -> MakesFood(x,y))", "all x y.((Plant(x) & Photosynthesis(y)) -> MakesFoodFor(y,x))", "all x.(Photosynthesis(x) -> MakesFoodForPlant(x))", "all x y.((Photosynthesis(x) & Plant(y)) -> MakesFoodFor(x,y))", "all x.(Photosynthesis(x) -> MakesFood(x))", "all x y.((Photosynthesis(x) & Plant(y)) -> MakesFood(x,y))", "all x y.((Photosynthesis(x) & Plant(y)) -> MakesFoodFor(x,y))"]}
{"id": "entailmentbank_validation_586", "nl": "a leaf performs photosynthesis / gas exchange.", "fol": "", "prediction": ["all x.(Leaf(x) -> (Photosynthesis(x) | GasExchange(x)))", "all x.(Leaf(x) -> PerformsPhotosynthesisGasExchange(x))", "all x.(Leaf(x) -> PerformsPhotosynthesisAndGasExchange(x))", "all x.(Leaf(x) -> PerformsPhotosynthesisEqExchange(x))", "all x.(Leaf(x) -> (PhotosynthesisExchange(x) | GasExchange(x)))", "all x.(Leaf(x) -> (PerformsPhotosynthesis(x) | PerformsGasExchange(x)))", "all x.(Element(x) -> (PerformsPhotosynthesis/GoalsExchange(x)))", "all x.(Leaf(x) -> (Photosynthesis(x) | GasExchange(x)))", "all x.(Leaf(x) -> PerformsPhotosynthesis / PerformsGasExchange(x))", "all x.(Leaf(x) -> PerformsPhotosynthesis(x))", "all x.(Leaf(x) -> PerformsPhotosynthesis/GasExchange(x))", "all x.(Leaves(x) -> (PerformsPhotosynthesis(x) & PerformsGasExchange(x)))", "all x.(Layer(x) -> PerformsPhotosynthesis(x) & PerformsGasExchange(x))", "all x.(Leaf(x) -> PerformsPhotosynthesis(x))", "all x.(Leaf(x) -> (PerformsPhotosynthesis(x) & PerformsGasExchange(x)))", "all x.(Leaf(x) -> PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_587", "nl": "a leaf makes food for the plant by performing photosynthesis.", "fol": "", "prediction": ["all x.((Leaf(x) & ProducesFood(x,Plant) & PerformsPhotosynthesis(x)) -> MakesFoodForPlant(x,Plant))", "all x.((Leaf(x) & Plant(x)) -> MakesFoodByPhotosynthesis(x))", "all x y.((Leaf(x) & Plant(y)) -> MakesFoodWithPhotosynthesis(x,y))", "all x.((Leaf(x) & MakesFood(x,Plant,Photosynthesis)) -> MakesFood(x,Plant))", "all x y.((Plant(x) & Leaf(y) & Photosynthesis(y)) -> MakesFoodFor(x,y))", "all x y.((Leaf(x) & Plant(y)) -> MakesFood(x,y))", "all x y.((Leaf(x) & Plant(y)) -> (MakesFoodFor(x,y) & PerformsPhotosynthesis(x,y)))", "all x y.((Leg(x) & Plant(y) & PerformsPhotosynthesis(x)) -> MakesFoodFor(x,y))", "all x y z.((Leaf(x) & Plant(y) & Photosynthesis(z)) -> MakesFoodForBy(x,y,z))", "all x y.((Leaf(x) & Plant(y)) -> MakesFoodFor(x,y))", "all x y.((Leaf(x) & Plant(y) & PerformsPhotosynthesis(x,y)) -> MakesFoodFor(x,y))", "all x y.((Leaf(x) & Plant(y)) -> MakesFood(x,y))", "all x.((Leaf(x) & MakesFood(x,Plant)) -> Photosynthesis(x))", "all x y.((Leaf(x) & Plant(y) & PerformsPhotosynthesis(x,y)) -> ProducesFood(x,y))", "all x y.((Leaf(x) & Plant(y) & MakesFood(x,y)) -> Photosynthesis(x))", "all x y.((Leaf(x) & Plant(y)) -> MakesFoodFromPhotosynthesis(x,y))"]}
{"id": "entailmentbank_validation_588", "nl": "providing food is a kind of specific life process.", "fol": "", "prediction": ["all x.(FoodProvider(x) -> LifeProcess(x))", "all x.(ProvidesFood(x) -> LifeProcess(x))", "all x.(ProvidesFood(x) -> LifeProcess(x))", "all x.(ObteningFood(x) -> LifeProcess(x))", "all x.(ProvidesFood(x) -> LifeProcess(x))", "all x.(ProvidesFood(x) -> SpecificLifeProcess(x))", "all x.(ProvidesFood(x) -> LifeProcess(x))", "all x.(FoodProcess(x) -> SpecificLifeProcess(x))", "all x.(ProvidesFood(x) -> LifeProcess(x))", "all x.(FoodPromotion(x) -> SpecificLifeProcess(x))", "all x.(ProvidesFood(x) -> SpecificLifeProcess(x))", "all x.(ProvidesFood(x) -> LifeProcess(x))", "all x y.((FoodProcess(x) & Provides(y)) -> LifeProcess(x,y))", "all x.(ProvidesFood(x) -> LifeProcess(x))", "all x.(FoodProcurement(x) -> LifeProcess(x))", "all x.(FoodProceeding(x) -> LifeProcess(x))"]}
{"id": "entailmentbank_validation_589", "nl": "a leaf performs a specific life process of making food for the plants.", "fol": "", "prediction": ["all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcessOfMakingFood(x,y))", "all x y.((Leaf(x) & Plant(y)) -> PerformsSpecificLifeProcess(x,y))", "all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcessOfMakesFood(x,y))", "all x.(Leaf(x) -> PerformsLifeProcess(x,food))", "all x y.((Leaf(x) & Plant(y)) -> PerformsSpecificLifeProcess(x,y))", "all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcess(x,y))", "all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcessInFish(x,y))", "all x y z.((Leaf(x) & LifeProcess(y) & Plant(z)) -> Performs(x,y,z))", "all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcessOfMakingFood(x,y))", "all x.(LeavesLifeProcess(x) -> MeetsPlants(x))", "all x.(Leaf(x) -> PerformsLifeProcessOfFerning(x))", "all x y z.((Leaf(x) & LifeProcess(y) & Plant(z)) -> PerformsSpecificLifeProcessOfMakingFood(x,y,z))", "all x y.((Leaf(x) & Plant(y) & PerformsLifeProcess(x,y)) -> MakesFood(x,y))", "all x y z.((Leaf(x) & LifeProcess(y) & Plant(z) & Performs(x,y)) -> MakesFood(x,z))", "all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcessOfMakingFood(x,y))", "all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcessOfFood(x,y))"]}
{"id": "entailmentbank_validation_590", "nl": "organs perform specific life process in organisms.", "fol": "", "prediction": ["all x y.((Organ(x) & Organism(y)) -> PerformLifeProcessInOrganism(x,y))", "all x y.((Organ(x) & Organism(y)) -> PerformsLifeProcessOf(x,y))", "all x y.((Organ(x) & Organism(y)) -> PerformsSpecificLifeProcessInOrganism(x,y))", "all x y.((Organ(x) & Organism(y)) -> PerformsLifeProcess(x,y))", "all x y.((Organ(x) & Organism(y)) -> PerformsLifeProcess(x,y))", "all x y z.((Organ(x) & Organism(y) & Organism(z)) -> PerformsLifeProcess(x,y))", "all x y z.((Organ(x) & Organism(y) & LifeProcess(z)) -> PerformsIn(x,y,z))", "all x.(Organ(x) -> PerformsSpecificLifeProcessInOrganism(x))", "all x y.((Organ(x) & Organism(y)) -> PerformsLifeProcess(x,y))", "all x y.((Organ(x) & Organism(y)) -> PerformsLifeProcessInOrganism(x,y))", "all x.(Organ(x) -> PerformsLifeProcess(x))", "all x y.((Organ(x) & Organism(y)) -> PerformsLifeProcessIn(x,y))", "all x.((Organ(x) & Organism(x)) -> PerformsLifeProcess(x))", "all x y.((Organ(x) & Organism(y)) -> PerformsSpecificLifeProcessIn(x,y))", "all x.(Organ(x) -> PerformsLifeProcessInOrganisms(x))", "all x y.((Organ(x) & Organism(y)) -> PerformsSpecificLifeProcess(x,y))"]}
{"id": "entailmentbank_validation_591", "nl": "a leaf in a plant is performing like an organ in organisms.", "fol": "", "prediction": ["all x y.((Leaf(x) & Plant(y) & ProducesOrgan(x,y)) -> OrganInOrganism(x))", "all x y z.((Leaf(x) & Plant(y) & Organism(z)) -> PerformsAsOrgan(x,y,z))", "all x y.((Leaf(x) & Plant(y)) -> PerformsDailyInOrganisms(x,y))", "all x y z.((Leaf(x) & Plant(y) & Organism(z)) -> PerformsAmong(x,y,z))", "all x y.((Leaf(x) & Plant(y)) -> (PerformsAsOrgan(x,y) | InOrganisms(y)))", "all x y z.((Leaf(x) & Plant(y) & Organism(z)) -> PerformsLikeOrgan(x,y,z))", "all x y.((Leaf(x) & Plant(y) & InPlant(x,y)) -> PerformsFunctionalAtOrgan(x,y))", "all x y.((LeafInPlant(x) & Plant(y)) -> PerformsAsOrganInOrganisms(x,y))", "all x y z.(Lark(x) & Plant(y) & Organism(z)) -> PerformsAlone(x,y,z))", "all x y z.((Leaf(x) & Plant(y) & Organism(z)) -> PerformsAlsOrigin(x,y,z))", "all x y z.((Leaf(x) & Plant(y) & Organism(z)) -> PerformsAsOrganIn(x,y,z))", "all x y.((Leaf(x) & Plant(y) & InPlant(x,y)) -> PerformsAsOrganInOrganisms(x))", "all x y.((Leaf(x) & Plant(y) & Organism(z)) -> PerformsAsOrgan(x,y,z))", "all x y z.((Leaf(x) & Plant(y) & Organism(z)) -> PerformsInPotentialOrgan(x,y,z))", "all x y z.((Leaf(x) & Plant(y) & Organism(z)) -> PerformsLikeOrgan(x,y,z))", "all x y.((Leaf(x) & Plant(y) & InPlant(x,y)) -> PerformsAsOrgan(x,y))"]}
{"id": "entailmentbank_validation_592", "nl": "taking in carbon dioxide is a stage in the photosynthesis process.", "fol": "", "prediction": ["all x y.((PhotosynthesisProcess(x,y) & CarbonDioxide(y)) -> StageInProcess(x))", "all x.((Photosynthesis(x) & TakesInCarbonDioxide(x)) -> StageInPhotosynthesis(x))", "all x.(CarbonDioxideStage(x) -> Photosynthesis(x))", "all x.((TakesInCarbonDioxide(x) & PhotosynthesisProcess(x)) -> StageIn(x,Photosynthesis))", "all x.((PhotosynthesisProcess(x) & TakesInCarbonDioxide(x)) -> StageInPhotosynthesis(x))", "all x.(TakingInCarbonDioxide(x) -> PhotosynthesisStage(x))", "all x.((StageInPhotosynthesis(x) & TakesInCarbonDioxide(x)) -> PhotosynthesisProcess(x))", "all x.(Photosynthesis(x) -> TakeInCarbonDioxide(x))", "all x.((Stage(x) & TakesInCarbonDioxide(x)) -> PhotosynthesisProcess(x))", "all x.((Cirp2Cirp(x) & TakesIn(x)) -> PhotosynthesisProcess(x))", "all x.(Photosynthesis(x) -> StageInPhotosynthesis(x))", "all x.((FollowingInCarbonDioxide(x) & PhotosynthesisProcess(x)) -> Stage(x))", "the photosynthesis (photosynthesis) -> TakeInCarbonDioxide(x))", "all x y.((CarbonDioxide(x) & PhotosynthesisProcess(y)) -> StageIn(x,y))", "all x.(TakesInCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x y.((StageInPhotosynthesis(x) & TakesInCarbonDioxide(x,y)) -> Photosynthesis(x))"]}
{"id": "entailmentbank_validation_593", "nl": "absorbing something is a kind of method for taking something in.", "fol": "", "prediction": ["all x.(Absorbs(x,y) -> TakesIn(y,x))", "all x.(AbsorbsAndTakesIn(x) -> A MethodForTakingIn(x))", "all x.(Absorbs(x) -> TakesInIn(x))", "all x.(Absorbing(x) -> TakesIn(x))", "all x y.((Absorbs(x) & Material(y)) -> TakesIn(x,y))", "all x.(AbsorbsSomething(x) -> TakesInWhatIs(x))", "all x.(AbsorbingAnything(x) -> CapturesSomething(x))", "all x.(Absorbing(x) -> TakeMeNotIn(x))", "all x.(Absorbs(x,y) -> TakesIn(y,x))", "all x.(AbsorbingPartOf(x,y) -> TakesInPartOf(x,y))", "all x.(AbsorbingToOf(x) -> TakesInToOtherThing(x))", "all x.(Absorbs(x) -> TakesIn(x))", "all x y.((Absorbs(x,y) & Something(y)) -> takesIn(x,y))", "all x.(Absorbing(x) -> (TakesIn(x) & FormsOf(x)))", "all x.((Absorbing(x) & SomethingIn(x)) -> TakesIn(x))", "all x.(Absorbing(x) -> TakeIn(x))"]}
{"id": "entailmentbank_validation_594", "nl": "absorbing carbon dioxide is a stage in the photosynthesis process.", "fol": "", "prediction": ["all x y.((Stage(x) & Photosynthesis(y)) -> AbsorbsCarbonDioxide(x,y))", "all x.((StageInPhotosynthesis(x) & AbsorbsCarbonDioxide(x)) -> PhotosynthesisProcess(x))", "all x y z.((CarbonDioxideAbsorbtion(x) & PhotosynthesisProcess(y) & PhotosynthesisProcess(z)) -> StageInProcess(x,y,z))", "all x y.((Stage(x) & PhotosynthesisProcess(y)) -> AbsorbsCarbonDioxide(x,y))", "all x y.((Photosynthesis(x) & CarbonDioxide(x)) -> StageInPossitiveProcess(y))", "all x.((AbsorbsCarbonDioxide(x) & Photosynthesis(x)) -> StageInProcess(x))", "all x y.((Stage(x) & PhotosynthesisProcess(y)) -> AbsorbsCarbonDioxide(x,y))", "all x.((AbsorbingCarbonDioxide(x) & Photosynthesis(x)) -> StageInProcess(x))", "all x y z.((PhotosynthesisProcess(x) & CarbonDioxide(y) & PhotosynthesisProcess(z)) -> Adsorbs(x,y))", "all x.(AbsorbingCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x.(AbsorbsCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x.(AbsorbsCarbonDioxide(x) -> PhaseInPhotosynthesis(x))", "all x.(AbsorbsCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x.(AbsorbingCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x.(AbsorbsCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x y z.((Photosynthesis(x) & CarbonDioxide(y) & Stage(z) & Absorbs(x,y)) -> Photosynthesis(x,z))"]}
{"id": "entailmentbank_validation_595", "nl": "carbon dioxide can be found in the air.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> CanFunction(x,air))", "all x.((CarbonDioxide(x) & Air(y)) -> FoundIn(x,y))", "all x.(CarbonDioxide(x) -> CanFoundInAir(x))", "all x.(CarbonDioxide(x) -> FoundInAir(x))", "all x.(CarbonDioxide(x) -> FoundInAir(x))", "exists x.(CarbonDioxide(x) & FoundInAir(x))", "all x.(CarbonDioxide(x) -> CanBeFoundInAerospace(x))", "all x y.((CarbonDioxide(x) & Air(y)) -> CanFoundIn(x,y))", "all x.(CarbonDioxide(x) -> FoundInAir(x))", "all x y.((CarbonDioxide(x) & Air(y)) -> Found(x,y))", "all x y.((CarbonDioxide(x) & Air(y)) -> FoundIn(x,y))", "all x.(CarbonDioxide(x) -> FoundInAir(x))", "all x.(CarbonDioxide(x) -> FoundInAir(x))", "all x y.((CarbonDioxide(x) & Air(y)) -> FoundIn(x,y))", "exists x.(CarbonDioxide(x) & FoundInAir(x))", "all x.(CarbonDioxide(x) -> FoundInAir(x))"]}
{"id": "entailmentbank_validation_596", "nl": "absorbing carbon dioxide from the air is a stage in the photosynthesis process.", "fol": "", "prediction": ["all x.((AbsorbsCarbonDioxide(x) & Air(x)) -> Photosynthesis(x))", "all x.(AbsorbsCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x.(AbsorbsCarbonDioxide(x) -> Photosynthesis(x))", "all x.(StageInPhotosynthesis(x) -> AbsorbsCarbonDioxideFromAir(x))", "all x.((AbsorbingCarbonDioxideFromAir(x) & Photosynthesis(x)) -> StageInProcess(x))", "all x y z.((Coloquine(x) & CarbonDioxide(y) & Air(z) & AbsorbsFrom(x,y,z)) -> PhotosynthesisProcess(x))", "all x y.((Absorbs(x,CarbonDioxide) & Air(y)) -> PhotosynthesisProcess(x))", "all x y.((Stage(x) & PhotosynthesisProcess(y)) -> AbsorbsCarbonDioxideFromAir(x,y))", "all x y z.((CarbonDioxideAbsorbingFromAir(x) & PhotosynthesisProcess(y) & Air(z)) -> StageInPhotosynthesisProcess(x,y))", "all x.((AbsorbingCarbonDioxide(x) & InPhotosynthesisProcess(x)) -> StageInPhotosynthesis(x))", "all x y.((PhotosynthesisProcess(x) & AbsorbsCarbonDioxide(x,y)) -> Stage(x))", "all x.((AbsorbsCarbonDioxideFromAir(x) & Photosynthesis(x)) -> StageInPhotosynthesisProcess(x))", "all x y z.((CarbonDioxide(x) & Air(y) & PhotosynthesisProcess(z)) -> AbsorbsInStageInPhotosynthesisProcess(x,y,z))", "all x.((PhotosynthesisStage(x) & AbsorbsCarbonDioxide(x)) -> Photosynthetic(x))", "all x y.((AbsorbingCarbonDioxide(x) & Air(y) & Photosynthesis(x)) -> StageInProcess(x,y))", "all x y.((Stage(x) & AbsorbsCarbonDioxideFromAir(x,y)) -> PhotosynthesisProcess(x))"]}
{"id": "entailmentbank_validation_597", "nl": "plants perform photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x y.((Plant(x) & Photosynthesis(y)) -> Performs(x,y))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x.(GreenPlant(x) -> PhotosynthesisPerformance(x))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x.(Plant(x) -> PerformPhotosynthesis(x))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x.(Plant(x) -> PhotosynthesisPerformance(x))", "all x.(Plant(x) -> PerformPhotosynthesis(x))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x.(Plant(x) -> PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_598", "nl": "a plant absorbs carbon dioxide from the air to perform photosynthesis.", "fol": "", "prediction": ["all x y z.((Plant(x) & CarbonDioxide(y) & Air(z)) -> AbsorbsToPerformPhotosynthesis(x,y,z))", "all x y z.((Plant(x) & CarbonDioxide(y) & Air(z)) -> AbsorbsForPhotosynthesis(x,y,z))", "all x y.((Plant(x) & AbsorbsCarbonDioxide(x) & Air(y)) -> PerformsPhotosynthesis(x))", "all x y z.((Plant(x) & CarbonDioxide(y) & Air(z) & AbsorbsIntoPhotosynthesis(x,y,z)) -> PerformsPhotosynthesis(x))", "all x.((Plant(x) & AbsorbsCarbonDioxide(x)) -> PerformsPhotosynthesis(x))", "all x y.((Plant(x) & CarbonDioxide(y)) -> AbsorbsFromAirForPhotosynthesis(x,y))", "all x y z.((Plant(x) & CarbonDioxide(y) & Air(z)) -> AbsorbsToPerformPhotosynthesis(x,y,z))", "all x y.((Plant(x) & CarbonDioxide(y)) -> AbsorbsForPhotosynthesis(x,y))", "all x.((Plant(x) & AbsorbsCarbonDioxide(x) & PerformsPhotosynthesis(x)) -> Photosynthesis(y))", "all x y z.((Plant(x) & CarbonDioxide(y) & Air(z)) -> AbsorbsToPerformPhotosynthesis(x,y,z))", "all x.(Plant(x) -> AbsorbsCarbonDioxide(x) & PerformsPhotosynthesis(x))", "all x y.((Plant(x) & AbsorbsCarbonDioxide(x,y)) -> PerformsPhotosynthesis(x,y))", "all x y.((Plant(x) & Air(y)) -> AbsorbsCarbonDioxideForPhotosynthesis(x,y))", "all x.((Plant(x) & AbsorbsCarbonDioxideFromAir(x) & PerformsPhotosynthesis(x)) -> Photographic(x))", "all x y.((Plant(x) & Air(y) & AbsorbsCarbonDioxide(x,y)) -> PerformsPhotosynthesis(x))", "all x.((Plant(x) & AbsorbsCarbonDioxide(x) & PerformsPhotosynthesis(x)) -> Photosynthesis(x))"]}
{"id": "entailmentbank_validation_599", "nl": "when carbon dioxide in the atmosphere is absorbed by plants, the amount of carbon dioxide in the atmosphere is reduced in the atmosphere.", "fol": "", "prediction": ["all x.((ConsumesCarbonDioxideInAtmosphere(x) & AbsorbedByPlants(x)) -> ReducesAmountOfCarbonDioxideInAtmosphere(x))", "all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> CarbonDioxideReducedInAtmosphere(x,y))", "all x y.((Plant(x) & CarbonDioxideInAtmosphere(x) & AbsorbedBy(y,x)) -> ReducedAtmosphereAmount(x))", "all x y.((CirCO2(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> NoCarbonDioxide(x,y))", "all x y.((Production(x) & CarbonDioxide(x) & Atmosphere(y)) -> ReducedAtmosphereAtmosphereAtmosphere(x))", "all x y.(((CarbonDioxideInAtmosphere(x) & AbsorbedByPlants(x)) -> ReducedSufficientCarbonDioxideInAtmosphere(y))", "all x y.((CarbonDioxideAtmosphere(x) & CarbonDioxideAtmosphere(y,x)) -> AbsorbedByPlants(x))", "all x y z.((CarbonDioxide(x) & Atmosphere(y) & Plant(z) & AbsorbedBy(x,y,z)) -> ReducedAmountOfCarbonDioxide(x))", "all x y z.((CarbonDioxide(x) & Atmosphere(y) & Plant(z)) -> AbsorbsBy(x,y,z))", "all x y.((CarbonDioxideAtmosphere(x) & AbsorbedByPlants(x)) -> ReducedCarbonDioxideAtmosphere(y))", "all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> CarbonDioxideReduced(x,y))", "all x y.((CarbonDioxide(x) & Altitude(y)) -> AbsorbsByPlants(x,y))", "all x y.((CarbonDioxideInAtmosphere(x) & AbsorbedByPlants(x)) -> ReducedAtmosphereBetweenAtmosphereAndAtmosphere(y))", "all x y.((CarbonDioxideInAtmosphere(x) & AbsorbedByPlants(x)) -> ReducedAtmosphere(x))", "all x y.((Co2(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> ReducedAmount(x,y))", "all x.(((CarbonDioxide(x) & EmbeddedByPlants(x)) -> ReducesAmountOfCarbonDioxide(x))"]}
{"id": "entailmentbank_validation_600", "nl": "plant photosynthesis reduces the amount of carbon dioxide in the air.", "fol": "", "prediction": ["all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxideInAir(x))", "all x y z.((PlantPhotosynthesis(x) & CarbonDioxide(y) & Air(z)) -> Reduces(x,y,z))", "all x y.((PlantPhotosynthesis(x) & CarbonDioxide(y)) -> ReducesInAir(x,y))", "all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxideInAir(x))", "all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxideLiquidation(x))", "all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxideInAir(x))", "all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxide(x))", "all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxide(x))", "all x y.((Plant(x) & CarbonDioxide(y)) -> ReducesAirLiquidity(x,y))", "all x y.((Plant(x) & Sunlight(y)) -> ReducesCarbonDioxide(x))", "all x y.((Plant(x) & CarbonDioxide(y) & Air(z)) -> Reduces(x,y))", "all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxideInAir(x))", "all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxide(x))", "all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxide(x))", "all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxideInAerospace(x))", "all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxide(x))"]}
{"id": "entailmentbank_validation_601", "nl": "sunlight is a kind of solar energy.", "fol": "", "prediction": ["all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))"]}
{"id": "entailmentbank_validation_602", "nl": "photosynthesis means green plants convert from carbon dioxide and water and solar energy into carbohydrates and food and oxygen for themselves.", "fol": "", "prediction": ["all x.(GreenPlant(x) -> (ConvertsFromCarbonDioxide(x) & ConvertsFromWaterAndSolarEnergy(x)))", "all x.(Photosynthesis(x) -> (GreenPlants(x) & CarbonDioxideWaterSolarEnergy(x) & CarbohydratesFoodOxygenFor(x,autonomy)))", "all x.(GreenPlant(x) -> (ConvertsCarbonDioxideWaterAndSolarEnergy(x,carbohydrates,food and oxygen) & ForDioxideAndOxygen(x)))", "all x y z.((GreenPlant(x) & CarbonDioxide(y) & Water(z)) -> (ConvertsFromCarbohydratesToFoodToOxygen(x,y,z)))", "all x.((GreenPlant(x) & ConvertsFromCarbonDioxideAndWaterAndSolarEnergyToCarbohydratesAndFoodAndOxygen(x)) -> Photosynthesis(x))", "all x y z.((GreenPlant(x) & CarbonDioxide(y) & WaterAndSolarEnergy(z)) -> Photosynthesis(x,y,z))", "all x.((GreenPlant(x) & OrganicCarbohydratesAndFoodOxygen(x)) -> (ConvertsFromCarbonDioxideAndWeatherAndSolarEnergy(x)))", "all x.(GreenPlant(x) -> (ConvertsFromCarbonDioxideAndWaterAndSolarEnergy(x) & (Carbohydrates(x) | FoodAndOxygen(x))))", "all x.(Photosynthesis(x) -> (GreenPlants(x) & CarbonDioxide(x) & Water(x) & SolarEnergy(x) & Carbohydrates(x) & Food(x) & Oxygen(x)))", "all x.(Photosynthesis(x) -> (GreenPlant(y) & Oxygen(x) & FromCarbonDioxideAndWaterAndSolarEnergy(x,carbohydrates,food,oxygen)))", "all x.((GreenPlant(x) & Photosynthesis(x)) -> (CreatesCarbonDioxide(x) & Converts(x,Water,SolarEnergy) & Carbohydrates(x) & Carbohydrates(x) & Food(x) & Oxygen(x)))", "all x y z.((GreenPlant(x) & CarbonDioxide(y) & Water(z)) -> (ConvertsFromCarbonDioxideAndSolarEnergy(x,z) & (Carbohydrates(x) | Food(x) | Oxygen(x))))", "all x.((GreenPlant(x) & CarbonDioxide(x,carbohydrates,food,oxygen)) -> Convert(x,carbohydrates,solarEnergy,carbohydrates,eatables,Oxygen))", "all x y z.((GreenPlant(x) & CarbonDioxide(y) & WaterAndSolarEnergy(z) & Carbohydrates(x) & FoodAndOxygen(x)) -> ConvertsFrom(x,y,z))", "all x y.((GreenPlant(x) & CarbonDioxide(y) & Water(y) & SolarEnergy(x)) -> ConvertsFromCarbohydratesAndFoodAndOxygen(x,y))", "all x.(Photosynthesis(x) -> (GreenPlants(x) & ConvertCarbonDioxideWaterSolarEnergyIntoCarbohydratesFoodOxygenForEthiopia(x)))"]}
{"id": "entailmentbank_validation_603", "nl": "photosynthesis means plants convert carbon dioxide and water and sunlight into carbohydrates and food and oxygen.", "fol": "", "prediction": ["all x.((Plant(x) & Photosynthesis(x)) -> (ConvertsCarbonDioxide(x) & ConvertsWater(x) & ConvertsSunlight(x) & Carbohydrates(x) & FoodOxygen(x)))", "all x y z w.((Plant(x) & CarbonDioxide(y) & Water(z) & Sunlight(x)) -> (Converts(x,y,z) & Carbohydrates(w) & FoodAndOxygen(w)))", "all x.(Photosynthesis(x) -> (PlantsConverts(x,Carbohydrates) & ToFoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (PlantsConvertCarbonDioxideWaterAndSunlightIntoCarbohydratesAndFoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> ConvertsCarbonDioxideAndWaterAndSunlightIntoCarbohydratesAndFoodAndOxygen(x))", "all x.(Photosynthesis(x) -> (CanConvertCarbonDioxideWaterAndSunlight(x) & CarbohydratesFoodOxygen(x)))", "all x.(Photosynthesis(x) -> (PlantsConvertCarbonDioxideWaterSunlightIntoCarbohydratesAndFoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (Converts(x,carbonDioxide) & WaterAndSunlight(x) & CarbohydratesAndFoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWaterAndSunlightToCarbohydrates(x) & ToFoodAndOxygen(x)))", "all x y.((Plant(x) & CarbonDioxide(y) & Water(z) & Sunlight(x)) -> (Converts(x,y,z) & ProducesCarbohydrates(x) & ProducesFoodAndOxygen(x)))", "all x y.((Plant(x) & Oxygen(y)) -> (ConvertsCarbonDioxideAndWaterAndSunlight(x,y) & (GetsCarbohydrates(x,y) | GetsFood(x,y)) | GetsOxygen(x,y)))", "all x.(Photosynthesis(x) -> (Plant(x) & ConvertsCarbonDioxideAndWaterAndSunlightToCarbohydratesAndFoodAndOxygen(x)))", "all x y.((Plant(x) & CarbonDioxide(y) & Water(x) & Sunlight(x)) -> (ConvertsIntoCarbohydrates(x,y) & ProducesCarbohydrates(x,y) & ProducesFood(x,y) & ProducesOxygen(x,y)))", "all x y z.((Plant(x) & CarbonDioxide(y) & Water(z)) -> (ConvertsToCarbohydrates(x,y) & ProducesFoodAndOxygen(x,z)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWaterAndSunlight(x) & CarbohydratesAndFoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWaterAndSunlightIntoCarbohydrates(x) & ToFoodAndOxygen(x)))"]}
{"id": "entailmentbank_validation_604", "nl": "if an orgnism uses a process to convert something into something else, then that something is used for that process.", "fol": "", "prediction": ["all x y.((Organnism(x) & Process(x) & Convert(x) & Converts(x,y)) -> UsedForProcess(x))", "all x y z.((Orgnism(x) & Process(y) & Process(z) & ConvertsInto(x,z)) -> UsedFor(x,y,z))", "all x y.(Converts(x,y) -> InOrgnism(x))", "all x y.((Organnism(x) & Process(y) & UsesToConvertProcess(x,y)) -> UsedForProcess(x,y))", "all x y.((Orgnism(x) & Process(y) & Converts(x,y)) -> UsedForInProcess(x,y))", "all x y z.((Organnism(x) & Process(y) & Process(z)) -> ConvertsInto(x,y,z))", "all x y z.((Orgnism(x) & Process(y) & Process(z) & ConvertsInto(x,y) & Change(z,y)) -> UsedFor(x,z))", "all x y z.((Orgnism(x) & Process(y) & Process(z) & Converts(x,y,z)) -> UsedFor(x,y,z))", "all x y.((Organnism(x) & Process(y) & ConvertsInto(x,y)) -> UsedFor(x,y))", "all x y.((Orgnism(x) & Process(y) & ConvertsInto(x,y)) -> UsedFor(x,y))", "all x y.((Organnism(x) & Process(y) & ConvertsProcess(x,y)) -> UsedForProcess(x,y))", "all x y.((Orgnism(x) & Process(y) & ConvertsInto(x,y)) -> UsedForProcess(x))", "all x y.((Organnism(x) & Process(y) & Converts(x,y) & Product(z)) -> UsedForProcess(x,z))", "all x.(EnjoysConverting(x) -> UsesProcessToConvertPhone(x))", "all x y z.((Organnism(x) & Process(y) & Process(z) & ConvertsInto(x,y,z)) -> UsedForProcess(x,y,z))", "all x y z.((Organnism(x) & Process(y) & Person(z) & ConvertsInto(x,y,z)) -> UsedFor(x,y,z))"]}
{"id": "entailmentbank_validation_605", "nl": "a plant uses sunlight for photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> UsesSunlightForPhotosynthesis(x))", "all x y z.((Plant(x) & Sunlight(y) & Photosynthesis(z)) -> Uses(x,y,z))", "all x.(Plant(x) -> UsesSunlightForPhotosynthesis(x))", "all x.(Plant(x) -> UsesSunlightForPhotosynthesis(x))", "all x.(Plant(x) -> UsesSunlightForPhotosynthesis(x))", "all x.((Plant(x) & UsesSunlight(x)) -> Photosynthesis(x))", "all x.(Plant(x) -> UsesSunlightForPhotosynthesis(x))", "all x.(Plant(x) -> UsesSunlightForPhotosynthesis(x))", "all x:(Plant(x) & UsesSunlightForPhotosynthesis(x))", "all x y.((Plant(x) & Sunlight(y)) -> UsedForPhotosynthesis(x,y))", "all x.(Plant(x) -> UsesSunlightForPhotosynthesis(x))", "all x y.((Plant(x) & Sunlight(y)) -> UsesForPhotosynthesis(x,y))", "all x.(Plant(x) -> UsesSunlightForPhotosynthesis(x))", "exists x.(Plant(x) & UsesSunlightForPhotosynthesis(x))", "all x.(Treatment(x) -> UsesSunlight(x))", "all x.(Plant(x) -> UsesSunlightForPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_606", "nl": "in the photosynthesis process sunlight has the role of raw material.", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & Sunlight(y)) -> HasRoleOfRawMaterial(x,y))", "all x.((Sunlight(x) & InPhotosynthesisProcess(x)) -> RaisesRoleOfRoleOfRawMaterial(x))", "all x.(Sunlight(x) -> RawMaterial(x))", "all x.(Photosynthesis(x) -> HasRoleOfRoleOfRawMaterial(x))", "all x.(Sunlight(x) -> HasRole(x,RawMaterial))", "all x y.((PhotosynthesisProcess(x) & Sunlight(y)) -> RawMaterial(x,y))", "all x y.((PhotosynthesisProcess(x) & Sunlight(y)) -> HasRoleOfRawMaterial(y,x))", "all x y z.((Sunlight(x) & PhotosynthesisProcess(y) & RawMaterial(z)) -> HasRoleOf(x,z))", "all x.(Sunlight(x) -> HasRoleOfRawMaterial(x))", "all x.((Sunlight(x) & Photosynthesis(x)) -> RawMaterial(x))", "all x y.((Photosynthesis(x) & Sunlight(y)) -> HasRootOfRoot(y,RawMaterial))", "all x.(Photosynthesis(x) -> (Sunlight(x) & RawMaterial(x)))", "all x y.((PhotosynthesisProcess(x) & Sunlight(y)) -> RawMaterial(y))", "all x y.((Sunlight(x) & PhotosynthesisProcess(y)) -> HasRoleOfRoleOfRawMaterial(x,y))", "all x.(Photosynthesis(x) -> IdentifiesRoleOfRawMaterial(x))", "all x.((Sunlight(x) & PhotosynthesisProcess(x)) -> RawMaterial(x))"]}
{"id": "entailmentbank_validation_607", "nl": "a plant uses the raw material sunlight for photosynthesis.", "fol": "", "prediction": ["all x y.((Plant(x) & RawMaterial(y) & Sunlight(x)) -> UsesRawMaterial(x,y))", "all x.(Plant(x) -> UsesRawMaterialSunlight(x))", "all x.(Plant(x) -> UsesRawMaterial(x,Sunlight))", "all x y.((Plant(x) & RawMaterial(y) & Sunlight(z) & UsedUpon(x,y,z)) -> CreatesPhotosynthesis(x))", "all x.((Plant(x) & RawMaterialSunlight(x)) -> UsesForPhotosynthesis(x))", "all x.((Plant(x) & RawSunlight(x)) -> UsesForPhotosynthesis(x))", "all x y.((Plant(x) & RawMaterial(y)) -> UsesRawSunlightForPhotosynthesis(x,y))", "all x.(Plant(x) -> UsesRawMaterial(x,Sunlight))", "all x y z.((Plant(x) & RawMaterial(y) & Sunlight(z) & UsesForPhotosynthesis(x,y,z)) -> Photosynthesis(x))", "all x.(Plant(x) -> UsesRawMaterial(x,Sunlight))", "all x.(UsesRawMaterial(x) -> Photosynthesis(x))", "all x.(Plant(x) -> UsesRawMaterialSunlightForPhotosynthesis(x))", "all x.(Plant(x) -> UsesRawMaterial(x,Sunlight))", "all x.(UsesSunlight(x) -> Photosynthesis(x))", "all x y.((Plant(x) & RawMaterialSunlight(y)) -> UsesForPhotosynthesis(x,y))", "all x.((Plant(x) & RawMaterialSunlight(x)) -> UsesForPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_608", "nl": "using a raw material sometimes requires absorbing that raw material.", "fol": "", "prediction": ["all x.((UsingRawMaterial(x) & OccasionallyRequiresAbsorbingRawMaterial(x)) -> RequiresAbsorbingRawMaterial(x))", "all x y.((RawMaterial(x) & Use(y)) -> RequiresAbsorbing(x,y))", "all x y.((UseRawMaterial(x) & RawMaterial(y) & RequiresAbsorbing(x,y)) -> SometimesRequiresAbsorbing(x,y))", "all x y.((UseRawMaterial(x) & RawMaterial(y)) -> RequiresAbsorbing(x,y))", "exists x.(RawMaterial(x) & Uses(x,absorbsRawMaterial))", "all x.((RawMaterial(x) & UsedWith(x,y)) -> RequiresAbsorbing(y,x))", "all x.(RawMaterial(x) -> SometimesRequiresAbsorbing(x,r,r))", "all x y.((UsesRawMaterial(x) & RawMaterial(y)) -> RequiresAbsorbing(x,y))", "all x y.((UseUse(x,y) & RawMaterial(y)) -> RequiresAbsorption(x,y))", "all x y.((UsingRawMaterial(x) & RawMaterial(y)) -> SometimesRequiresAbsorbing(x,y))", "all x.((RawMaterial(x) & UsedWith(x)) -> RequiresAbsorbing(x,rawMaterial))", "all x.exists y.((UseRoofMaterial(x) & RawMaterial(y)) -> RequiresAbsorbing(x,y))", "all x.((UsesRawMaterial(x) & RequiresAbsorbingViableRawMaterial(x)) -> RequiresRobust(x))", "all x.(RawMaterial(x) -> RequiresAbsorption(x))", "all x y.((RawMaterial(x) & RawMaterial(y)) -> RequiresAbsorbing(x,y))", "all x.(UsesRawMaterial(x) -> SometimesRequiresAbsorption(x))"]}
{"id": "entailmentbank_validation_609", "nl": "a plant absorbs sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x.((Plant(x) & AbsorbsSunlight(x)) -> PerformsPhotosynthesis(x))", "all x.((Plant(x) & AbsorbsSunlight(x)) -> PerformsPhotosynthesis(x))", "all x.((Plant(x) & AbsorbsSunlightForPhotosynthesis(x)) -> PerformsPhotosynthesis(x))", "all x.((Plant(x) & AbsorbsSunlight(x)) -> PerformsPhotosynthesis(x))", "all x y.((Plant(x) & Sunlight(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "all x.((Plant(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)) -> HasPhotosynthesis(x))", "all x.(Plant(x) -> AbsorbsSunlight(x))", "all x.((Plant(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)) -> Photosynthesis(x))", "all x y.((Plant(x) & Sunlight(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "all x y.((Plant(x) & Sunlight(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "all x.(Plant(x) -> AbsorbsSunlight(x))", "all x.(AbsorbsSunlightToPerformPhotosynthesis(x) -> Plant(x))", "all x.((Plant(x) & AbsorbsSunlight(x)) -> PerformsPhotosynthesis(x))", "all x.((Plant(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)) -> AbsorbsSunlightForPhotosynthesis(x))", "all x.(Place(x) -> AbsorbsSunlightToPerformPhotosynthesis(x))", "all x.((Plant(x) & AbsorbsSunlight(x)) -> PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_610", "nl": "a leaf absorbs sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x.(Leaf(x) -> (AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x y.((Leaf(x) & Sunlight(y)) -> AbsorbsToProperPhotosynthesis(x,y))", "all x.(Leaf(x) -> AbsorbsSunlightToPerformPhotosynthesis(x))", "all x y.((Leaf(x) & Sunlight(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "all x.(Leaf(x) -> AbsorbsSunlightToPerformPhotosynthesis(x))", "all x.(Leaf(x) -> AbsorbsSunlight(x))", "all x.(Leaf(x) -> AbsorbsSunlight(x))", "all x.((Leaf(x) & AbsorbsSunlight(x,Sunlight)) -> PerformsPhotosynthesis(x))", "all x.(Leaf(x) -> AbsorbsSunlight(x))", "all x.(Leaf(x) -> AbsorbsSunlight(x))", "all x y z.((Leaf(x) & Sunlight(y) & Photosynthesis(z)) -> AbsorbsToPerform(x,y,z))", "all x.(Leaf(x) -> AbsorbsSunlight(x))", "all x.((Leaf(x) & AbsorbsSunlight(x)) -> PerformsPhotosynthesis(x))", "all x.(Left(x) -> (AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x.(Leaf(x) -> (AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x.(Leaf(x) -> AbsorbsSunlight(x))"]}
{"id": "entailmentbank_validation_611", "nl": "chlorophyll is found in the cells of leaves.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> FoundInLeaves(x))", "all x y.((Chemophyll(x) & Leaf(y)) -> FishedIn(x,y))", "all x y.((Chlorophyll(x) & LeafCell(y)) -> FoundIn(x,y))", "all x.(Claroxophyll(x) -> FoundInLeaves(x))", "all x.(Chlorophyll(x) -> FoundInLeaves(x))", "all x.(Chlorophyll(x) -> FoundInLeaves(x))", "all x y.((Clorophyll(x) & Leaf(y)) -> FoundInCells(x,y))", ", (exists x.(Clorophyll(x) & FoundIn(x,Leaves)))", "all x.(Chlorophyll(x) -> FoundInLeavesCells(x))", "all x.(Chlorophyll(x) -> FoundInLeaves(x))", "all x y.((Chlorophyll(x) & Leaf(y)) -> FoundInCells(x,y))", "all x.(Chlorophyll(x) -> FoundInLeaves(x))", "all x.(Chlorophyll(x) -> FoundInLeavesStructures(x))", "all x.(Chlorophyll(x) -> FoundInLeaves(x))", "all x y.((Chromophyll(x) & Leaf(y)) -> FoundInCells(x,y))", "all x.(Chlorophyll(x) -> FoundInLeaves(x))"]}
{"id": "entailmentbank_validation_612", "nl": "chlorophyll is found in the cells of parts of plants that absorb sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsSunlight(x,y))", "all x.(Chlorophyll(x) -> (FoundInCells(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x.(Chlorophyll(x) -> exists y z.(Cell(y) & PartOfPlantSystem(z) & AbsorbsSunlight(x,y) & PerformsPhotosynthesis(x,z)))", "all x y.((Chlorophyll(x) & PlantPart(y)) -> AbsorbsSunlightForPhotosynthesis(x,y))", "all x y.((Chlorophyll(x) & PlantPart(y) & AbsorbsSunlight(x,y)) -> FoundInCells(x,y))", "all x y z.((Chlorophyll(x) & PlantPart(y) & SunlightToPerform(z)) -> FoundInCells(x,y,z))", "all x y z.((Chlorophyll(x) & PlantPart(y) & Sunlight(z) & Absorbs(y,z)) -> FoundInCells(x,y,z))", "all x.(Clorophyll(x) -> (AbsorbSunlight(y) & FoundInCells(x,y) & Photosynthesis(y)))", "all x.(Chlorophyll(x) -> exists y.(PlantPart(y) & AbsorbsSunlight(x,y)))", "all x y.((Chlorophyll(x) & PlantPart(y)) -> FoundInCellsOf(x,y))", "all x.(Chlorophyll(x) -> (FindsInCellsOfPartsOfPlants(x) & AbsorbSunlight(x) & PerformPhotosynthesis(x)))", "all x y z.((Clorophyll(x) & PlantPart(y) & PartOrdner(z) & AbsorbSunlightToPhotosynthesis(x)) -> FoundInCellsOf(x,y,z))", "all x,y.((Chlorophyll(x) & PlantPart(y)) -> LocatedInCells(x,y))", "all x.(Chlorophyll(x) -> (FindsInCellsOfPlantparts(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x y.((Clorophyll(x) & PlantPart(y) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)) -> FoundInCells(x,y))", "all x y.((Chemophyll(x) & PlantPart(y) & AbsorbsSunlightToPerformPhotosynthesis(x)) -> FoundInCellsOf(x,y))"]}
{"id": "entailmentbank_validation_613", "nl": "chlorophyll is used for absorbing sunlight by plants.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> AbsorbsSunlight(x))", "all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsSunlight(x,y))", "all x y.((Clorophyll(x) & Plant(y)) -> AbsorbsSunlightBy(x,y))", "all x.(Chlorophyll(x) -> AbsorbsSunlight(x))", "all x.(Chlorophyll(x) -> AbsorbsSunlight(x))", "all x.(Chlorophyll(x) -> AbsorbsSunlightByPlants(x))", "all x y.((Clorophyll(x) & Plant(y)) -> AbsorbsSunlight(x,y))", "all x.(Chlorophyll(x) -> AbsorbsSunlight(x))", "all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsSunlight(x,y))", "all x.(Chlorophyll(x) -> AbsorbsSunlight(x))", "all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsSunlight(x,y))", "all x y z.((Chlorophyll(x) & Plant(y) & Sunlight(z) & AbsorbsBy(x,y,z)) -> UsedFor(x,y))", "all x.(Chlorophyll(x) -> AbsorbsSunlight(x))", "all x.(Chlorophyll(x) -> AbsorbsSunlightByPlants(x))", "all x.(Chlorophyll(x) -> (AbsorbsSunlight(x,Plants) & Sunlight(x)))", "all x y.((Chlorophyll(x) & Plant(y) & UsesForAbsorbingSunlight(x,y)) -> AbsorbsSunlight(x,y))"]}
{"id": "entailmentbank_validation_614", "nl": "sunlight is a kind of light.", "fol": "", "prediction": ["all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))", "all x.(Sunlight(x) -> Light(x))"]}
{"id": "entailmentbank_validation_615", "nl": "light is a kind of energy.", "fol": "", "prediction": ["all x.(Light(x) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "all x,y.((Light(x) & Energy(y)) -> Like(x,y))", "all x.(Light(x) -> Energy(x))", "all x.(Light(x) -> Energy(x))", "all x.(Light(x) -> Energy(x))"]}
{"id": "entailmentbank_validation_616", "nl": "sunlight is a kind of light energy.", "fol": "", "prediction": ["all x.(Sunlight(x) -> LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x y.((Sunlight(x) & LightEnergy(y)) -> LightEnergy(x,y))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x y.((Sunlight(x) & LightEnergy(y)) -> Light(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))"]}
{"id": "entailmentbank_validation_617", "nl": "chlorophyll is used for absorbing light energy by plants.", "fol": "", "prediction": ["all x y z.((Chlorophyll(x) & Plant(y) & LightEnergy(z)) -> AbsorbsBy(x,y,z))", "all x y.((Coryophyll(x) & Plant(y)) -> AbsorbsLightEnergy(x,y))", "all x y.((Clorophyll(x) & Plant(y)) -> AbsorbsLightEnergy(x,y))", "all x.(Chlorophyll(x) -> AbsorbsLightEnergy(x))", "all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsLightEnergy(x,y))", "all x.(Chlorophyll(x) -> AbsorbsLightEnergy(x,Plants))", "all x.(Chlorophyll(x) -> UsedForAbsorbingLightEnergy(x))", "all x.(Chlorophyll(x) -> AbsorbsLightEnergy(x))", "all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsLightEnergy(x,y))", "all x.(Clorophyll(x) -> AbsorbsLightEnergyByPlants(x))", "all x.(Chlorophyll(x) -> UsedForAbsorbingLightEnergy(x,Plants))", "all x.(Chlorophyll(x) -> AbsorbsLightEnergy(x))", "all x.(Chlorophyll(x) -> AbsorbsLightEnergyByPlants(x))", "all x.(Chlorophyll(x) -> UsedForAbsorbingLightEnergy(x))", "all x y.((Clorophyll(x) & Plant(y)) -> AbsorbsLightEnergy(x,y))", "all x y.((Clorophyll(x) & Plant(y)) -> AbsorbsLightEnergy(x,y))"]}
{"id": "entailmentbank_validation_618", "nl": "some microorganisms have a positive impact on human body.", "fol": "", "prediction": ["exists x.(Smicroorganism(x) & PositiveImpact(x,humanBody))", "exists x.(Microorganism(x) & ImpactOnHumanBody(x))", "exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))", "exists x.(Microorganism(x) & HasPromotiveImpact(x))", "exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))", "exists x.(Microorganism(x) & PositiveImpact(x))", "exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))", "exists x:(Miniorganism(x) & PositiveImpactOnHumanBody(x))", "exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))", "exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))", "exists x y.(Microorganism(x) & HumanBody(y) & PositiveImpact(x,y))", "exists x.(Microorganism(x) & PositiveImpact(x))", "exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))", "exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))", "exists x.(Microorganism(x) & PositiveImpact(x))", "exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))"]}
{"id": "entailmentbank_validation_619", "nl": "if something has a positive impact on another thing, then the relationship is benificial.", "fol": "", "prediction": ["all x y.((PositiveImpact(x) & PositiveImpact(y) & PositiveImpactOn(y,x)) -> BenificialRelationship(x))", "all x y.((PositiveImpact(x) & Person(y) & HasElement(x,y)) -> BenificialRelationship(x))", "all x y.((PositiveImpact(x) & PositiveImpact(y)) -> BenificialRelationship(x,y))", "all x.((PositiveImpact(x) & PositiveImpact(x) & PositiveImpact(x)) -> BenificialRelationship(x))", "all x y.((AsSmileForThing(x) & PositiveInfluence(x,y) & ForMotherThing(x,y)) -> BenificialRelationship(x))", "all x y.((PositiveImpact(x) & PositiveImpact(y)) -> BenificialRelationship(x,y))", "all x.(PositiveImpactOnThatThanThing(x) -> BenificialRelationship(x))", "all x.((PositiveImpact(x) & WorksOnOtherThing(x)) -> BenificialRelationship(x))", "all x.(BenificialRelationship(x) -> PositiveImpactOnTwoThings(x))", "all x y.((PositiveImpact(x) & PositiveImpact(x) & PositiveImpactOnThing(x,y)) -> BenificialRelationship(x))", "all x.((PositiveImpact(x) & PositiveImpactOnOneThing(x)) -> BenificialRelationship(x))", "all x y.((NaturalRelationship(x) & PositiveImpactOn(x,y) & PositiveActOn(y,z)) -> BenificialRelationship(x))", "all x y z.((PositiveImpact(x) & PositiveImpact(y) & PositiveImpact(z) & Has(x,y)) -> BenificialRelationship(x))", "all x.((PositiveImpact(x) & PositiveImpactOn(x)) -> BenificialRelationship(x))", "all x y.((PositiveImpact(x) & PositiveImpact(y)) -> BenificialRelationship(x,y))", "all x y.((PositiveImpact(x) & PositiveImpact(x) & PositiveImpact(y)) -> BenificialRelationship(x))"]}
{"id": "entailmentbank_validation_620", "nl": "some microorganisms are benificial to human body.", "fol": "", "prediction": ["exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Miniorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & Benificial(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))"]}
{"id": "entailmentbank_validation_621", "nl": "disease-causing microbes have a negative impact on the body.", "fol": "", "prediction": ["all x.(DiseaseCausingMicrobe(x) -> NegativeImpact(x))", "all x.(DiseaseCausingMicrobes(x) -> NegativeImpactOnBody(x))", "all x.(DiseaseCausingMicrobesWithNutritiousImpactOnBody(x) -> NegativeImpactOnBody(x))", "all x.(DiseaseCausingMicrobe(x) -> NegativeImpactOnBody(x))", "all x.(Microbe(x) -> DiseaseCausing(x))", "all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x))", "all x.(DiseaseCausingMicrobe(x) -> NegativeImpactOnBody(x))", "all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpact(x))", "all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x))", "all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x))", "all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x))", "all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x))", "all x.((Microbe(x) & CauseMoreDisease(x)) -> NegativeImpactOnBody(x))", "all x y.((DiseaseCausingMicrobe(x) & Body(y)) -> NegativeInfluence(x,y))", "all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x))", "all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x))"]}
{"id": "entailmentbank_validation_622", "nl": "if something has a negative impact on another thing, then the relationship is harmful.", "fol": "", "prediction": ["all x y.((NegativeImpact(x) & NegativeImpact(x,y) & Another(x)) -> HarmfulRelationship(y))", "all x y.(((NegativeImpact(x) & NegativeImpact(x,y)) -> HarmfulRelationship(x))", "all x y.((Relationship(x) & NegativeImpactOn(x,y)) -> Harmful(x))", "all x y.((Relationship(x,y) & NegativeImpact(x,y)) -> Harmful(x))", "all x y.((PositiveImpact(x) & NegativeImpact(x) & NegativeImpact(x)) -> HarmfulRelationship(y))", "all x y.((NegativeImpact(x,y) & NegativeImpact(x,y)) -> HarmfulRelationship(y))", "all x y.((Joy(x) & NegativeImpact(x) & Dangerous(y)) -> NegativeImpact(x,y))", "all x y.((Attribution(x) & NegativeImpact(x) & Thing(y)) -> HarmfulRelationship(x))", "all x y.((Problem(x) & NegativeImpact(x) & Thing(y)) -> HarmfulRelationship(x,y))", "all x.((NegativeImpact(x) & NegativeImpact(x)) -> HarmfulRelationship(x))", "exists x.(ProblemWithDisruption(x) & NegativeImpact(x))", "all x y.((NegativeImpact(x) & NegativeImpact(y)) -> HarmfulRelationship(x,y))", "all x.((NegativeImpact(x) & NegativeImpact(x)) -> HarmfulRelationship(x))", "all x.(Ratement(x) -> Harmful(x))", "all x y.((NegativeImpact(x,z) & OtherThing(x)) -> HarmfulRelationship(x))", "all x.((NegativeImpact(x) & NegativeImpactOnAndOtherThing(x)) -> HarmfulRelationship(x))"]}
{"id": "entailmentbank_validation_623", "nl": "some disease-causing microbes are harmful to human body.", "fol": "", "prediction": ["exists x.(Microbe(x) & DiseaseCausing(x) & HarmfulToHumanBody(x))", "exists x.(DiseaseCausingMicrobe(x) & HarmfulToHumanBody(x))", "exists x.(DiseaseCausingMicrobe(x) & HarmfulToHumanBody(x))", "exists x.(Microbe(x) & DiseaseCausing(x) & HarmfulToHumanBody(x))", "exists x.(DiseaseCausingMicrobe(x) & HarmfulToHumanBody(x))", "exists x.(Microbe(x) & DiseaseInducing(x) & HarmfulToHumanBody(x))", "exists x.(Microbe(x) & DiseaseCausing(x) & HarmfulToHumanBody(x))", "exists x.(DiseaseCausingMicrobe(x) & HarmfulToHumanBody(x))", "exists x.(Microbe(x) & CausesDiagnosis(x) & HarmfulToHumanBody(x))", "exists x.(AlwaysDiseaseCausingMicrobe(x) & HarmfulToHumanBody(x))", "exists x.((Microbe(x) & DiseaseCausing(x)) -> HarmfulToHumanBody(x))", "exists x.(DiseaseCausingMicrobe(x) & HarmfulToHumanBody(x))", "exists x.((DiseaseCausingMicrobe(x) & HarmfulToHumanBody(x))", "exists x.(Microbe(x) & DiseaseCausing(x) & HarmfulToHumanBody(x))", "exists x y.(Microbe(x) & DiseaseCausing(y) & HarmfulToHumanBody(x,y))", "exists x.(Microbe(x) & DiseaseCausing(x) & HarmfulToHumanBody(x))"]}
{"id": "entailmentbank_validation_624", "nl": "the relationship between human and microorganisms is sometimes beneficial and sometimes harmful.", "fol": "", "prediction": ["all x y z.((Human(x) & Microorganism(y) & Relationship(z)) -> (Beneficial(x,y) | Harshful(x,z)))", "exists x.(Relationship(x,y) & HumanAndMicroorganism(y) & (Benefitful(x) | Harmful(x)))", "all x.((Relationship(x) & Human(x) & Microorganism(x)) -> (Beneficial(x) | Harmful(x)))", "all x,y.((HasRelationship(x) & Human(y) & HasRelationship(x,y)) -> (Beneficial(x) | Harmful(x)))", "all x y.((Relationship(x,y) & Human(x,y)) -> (Beneficial(x) | Harmful(x)))", "all x.((Human(x) & Microorganism(x)) -> (BenefitfulRelationship(x) | HarmfulRelationship(x)))", "all x.((Relationship(x,human) & Relationship(x,microorganisms)) -> (Beneficial(x) | Harmful(x)))", "all x.((Relationship(x) & Human(x) & Microorganisms(x)) -> (Benefiting(x) | Harmful(x)))", "all x y.((Relationship(x) & Humans(y) & Microorganisms(y)) -> (Benefitful(x) | Harmful(x)))", "exists x.(Human(x) & Microorganism(x) & (Benefitful(x) | Harmful(x)))", "all x y z.((Human(x) & Microorganism(y) & Relationship(z,y)) -> (Benefitful(z) | Harmful(z)))", "exists x y z.(Relationship(x,y,z) & Human(y) & Microorganism(z) & Biological(y) & Harmful(z))", "all x.((Relationship(x) & Human(x) & Microorganism(x)) -> (Benefitful(x) | Harmful(x)))", "all x y z.((Human(x) & Microorganism(y) & Human(z)) -> (Beneficial(x) | Harmful(x)))", "all x.((Human(x) & Microorganism(x)) -> (BeneficialRelationship(x) | HarmfulRelationship(x)))", "all x.((Human(x) & Microorganism(x)) -> (Beneficial(x) | Harmful(x)))"]}
{"id": "entailmentbank_validation_625", "nl": "water is a kind of nonliving thing.", "fol": "", "prediction": ["all x.(Water(x) -> NonLivingThing(x))", "all x.(Water(x) -> NonLivingThing(x))", "all x.(Water(x) -> NonlivingThing(x))", "all x.(Water(x) -> NonlivingThing(x))", "all x.(Water(x) -> NonlivingThing(x))", "all x.(Water(x) -> NonlivingDog(x))", "all x.(Water(x) -> NonLivingTHing(x))", "all x.(Water(x) -> NonlivingThing(x))", "all x.(Water(x) -> NonlivingThing(x))", "all x.(Water(x) -> NonLivingThing(x))", "all x.(Water(x) -> NonLivingThing(x))", "all x.(Water(x) -> NonlivingTend(x))", "all x.(Water(x) -> NonlivingThing(x))", "all x.(Water(x) -> NonlivingThing(x))", "all x.(Water(x) -> NonlivingThing(x))", "all x.(Water(x) -> NonlivingThing(x))"]}
{"id": "entailmentbank_validation_626", "nl": "a river is a kind of body of water.", "fol": "", "prediction": ["all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> WaterBody(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))"]}
{"id": "entailmentbank_validation_627", "nl": "a river is a nonliving thing.", "fol": "", "prediction": ["all x.(River(x) -> NonLivingThing(x))", "all x.(River(x) -> NonLivingThing(x))", "all x y.((River(x) & FlowingThing(x)) -> NonlivingThing(y))", "all x.(River(x) -> NonLivingThing(x))", "all x.(River(x) -> NonlivingThing(x))", "all x.(River(x) -> NonlivingThing(x))", "all x.(River(x) -> NonLivingThing(x))", "all x.(River(x) -> NonLivingThing(x))", "all x.(River(x) -> NonlivingThing(x))", "all x.(River(x) -> NonlivingThing(x))", "all x.(River(x) -> NonlivingThing(x))", "all x.(River(x) -> NonLivingThing(x))", "all x.(River(x) -> NonlivingThing(x))", "all x.(River(x) -> NonLivingThing(x))", "all x.(River(x) -> NonLivingThing(x))", "all x.(River(x) -> NonlivingThing(x))"]}
{"id": "entailmentbank_validation_628", "nl": "preferences are generally learned characteristics.", "fol": "", "prediction": ["all x.(Preference(x) -> LearnedCharacteristics(x))", "all x.(Preference(x) -> LearnedCharacteristic(x))", "all x.(Preference(x) -> LearnedCharacteristics(x))", "all x.((Preference(x) & LearnedCaracteristics(x)) -> LearnedCaracteristics(x))", "(LearnedCharacteristics(Preferences))", "all x.(Preference(x) -> LearnedCharacteristics(x))", "all x.(Private(x) -> LearnedCharacteristics(x))", "all x.(Preference(x) -> LearningCharacteristic(x))", "all x.(Preference(x) -> LearnedCharacteristics(x))", "all x y.((Preference(x) & KnowledgeableCharacteristic(y)) -> Learned(x))", "all x.(Preference(x) -> LearnedCharacteristics(x))", "all x.(Preferences(x) -> LearnedCharacteristics(x))", "all x.(Preference(x) -> LearnedCharacteristics(x))", "all x.(Preference(x) -> LearnedCharacteristics(x))", "all x.(Preference(x) -> LearnedCharacteristics(x))", "all x.(Preference(x) -> LearnedCharacteristics(x))"]}
{"id": "entailmentbank_validation_629", "nl": "a food preference is a kind of preference.", "fol": "", "prediction": ["all x.(FoodPreference(x) -> Preference(x))", "all x.(FoodPreference(x) -> Preference(x))", "all x.(FoodPrage(x) -> Preference(x))", "all x.(FoodPreference(x) -> Preference(x))", "all x.(FoodPreference(x) -> Preference(x))", "all x.(FoodPreference(x) -> Preference(x))", "all x.(FoodPreference(x) -> Preference(x))", "all x.(FoodPreference(x) -> Preference(x))", "all x.(FoodPreference(x) -> Preference(x))", "all x.(FoodPurpose(x) -> Preference(x))", "all x.(FoodPetition(x) -> Preference(x))", "all x.(FoodPreference(x) -> Preference(x))", "all x.(FoodPreference(x) -> Preference(x))", "all x.(FoodPreference(x) -> Preference(x))", "all x.(FoodPreference(x) -> Preference(x))", "all x.(FoodPreference(x) -> Preference(x))"]}
{"id": "entailmentbank_validation_630", "nl": "food preference is a kind of learned characteristics.", "fol": "", "prediction": ["all x.(FoodPreference(x) -> LearnedCharacteristics(x))", "all x.(FoodPreference(x) -> LearnedCharacteristics(x))", "all x.(FoodPreference(x) -> LearnedCharacteristics(x))", "all x.((FoodPreference(x) & LearnedCharacteristics(x)) -> Learning(x))", "all x.(FoodPreference(x) & LearnedCharacteristics(x))", "all x.(FoodPreference(x) -> LearntCharacteristics(x))", "all x.(FoodPreference(x) -> LearnedCharacteristics(x))", "all x.(FoodPreference(x) -> LearningCharacteristic(x))", "all x.(FoodPreference(x) -> LearnedCharacteristics(x))", "all x.(FoodPreference(x) -> LearntCharacteristics(x))", "all x.(Preference(x) -> LearnedCharacteristics(x))", "all x.(FoodPreference(x) -> LearnedCharacteristics(x))", "all x.(FoodPreference(x) -> LearningCharacteristics(x))", "all x.(FoodPreference(x) -> LearntCharacteristics(x))", "(all x.(FoodPreference(x) -> LearntCharacteristics(x)))", "all x.(FoodPreference(x) -> LearnedCharacteristics(x))"]}
{"id": "entailmentbank_validation_631", "nl": "learned characteristics are similar to acquired characteristics.", "fol": "", "prediction": ["all x.((LesserCharacteristics(x) & AcquiredCharacteristics(x)) -> Similar(x))", "all x y.((ApprovedCharacteristics(x) & LearnedCharacteristics(y)) -> Similar(x,y))", "all x y.((LearnedCharacteristic(x) & AcquiredCharacteristic(y)) -> Likely(x))", "all x y.((LearningCharacteristic(x) & AcquiredCharacteristics(y)) -> Similar(x,y))", "all x y.((LeivedCharacteristics(x) & AcquiredCharacteristics(y)) -> SimilarTo(z,x))", "all x y z.((LevedCharacteristic(x) & AcquiredCharacteristic(y) & AcquiredCharacteristic(z)) -> Similar(x,y,z))", "all x.((HowlerntCharacteristics(x) & AcquiredCharacteristics(x)) -> SimilarTo(x,exquisite))", "all x.((LearningCharacteristic(x) | AcquiredCharacteristics(x)))", "all x y.((LevenedCharacteristic(x) & AcquiredCharacteristic(y)) -> SimilarTo(x,y))", "all x y.((LectureDiscipline(x) & AcquiredCharacteristic(y)) -> SimilarTo(x,y))", "all x.(HasCertain(x) -> SimilarTo(x,(Certain(x) & Acquired(x)))", "all x y.((LevedCharacteristic(x) & AppropriateCharacteristic(y)) -> Similar(x,y))", "all x.((LecturedCharacteristics(x) & AcquiredCharacteristics(x)) -> Similar(x))", "all x.(ProfiledCharacteristics(x) -> AcquiredCharacteristics(x))", "all x.(LearnedCharacteristics(x) -> SimilarToAcquiredCharacteristics(x))", "all x y z.((LearnedCharacteristic(x) & AcquiredCharacteristics(y) & AcquiredCharacteristics(z)) -> SimilarTo(x,y,z))"]}
{"id": "entailmentbank_validation_632", "nl": "food preference is a kind of acquired characteristics.", "fol": "", "prediction": ["all x.(FoodPreference(x) -> AchievedCharacteristics(x))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "all x.(FoodPurpose(x) -> AcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AcquiredCaracteristics(x))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AcquiredCaracteristics(x))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "all x.(FoodPreferred(x) -> AcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> ObtainedCharacteristics(x))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))"]}
{"id": "entailmentbank_validation_633", "nl": "an animal is a kind of organism.", "fol": "", "prediction": ["all x.(Animal(x) -> Organism(x))", "all x.(Animal(x) -> Organism(x))", "all x.(Animal(x) -> Organism(x))", "all x.(Animal(x) -> Organism(x))", "all x.(Animal(x) -> Organism(x))", "all x y.((Animal(x) & Organism(y)) -> Body(x))", "all x.(Animal(x) -> Organism(x))", "all x.(Animal(x) -> Organism(x))", "all x.(Animal(x) -> Organospheric(x))", "all x.(Animal(x) -> Organism(x))", "all x.(Animal(x) -> Organism(x))", "all x.(Animal(x) -> Organism(x))", "all x.(Animal(x) -> Organism(x))", "all x.(Animal(x) -> Organism(x))", "all x.(Animal(x) -> Organism(x))", "all x.(Animal(x) -> Organism(x))"]}
{"id": "entailmentbank_validation_634", "nl": "a dog is a kind of animal.", "fol": "", "prediction": ["all x.(Dog(x) -> Animal(x))", "all x.(Dog(x) -> Animal(x))", "all x.(Dog(x) -> Animal(x))", "all x y.((Dog(x) & Animal(y)) -> Animal(x))", "all x.(Dog(x) -> Animal(x))", "all x.(Dog(x) -> Animal(x))", "all x.(Dog(x) -> Animal(x))", "all x.(Dog(x) -> Animal(x))", "all x.(Dog(x) -> Animal(x))", "all x.(Dog(x) -> Animal(x))", "all x.(Dog(x) -> Animal(x))", "all x.(Dog(x) -> Animal(x))", "all x.(Dog(x) -> Animal(x))", "exists x.(Dog(x) & Animal(x))", "all x.(Dog(x) -> Animal(x))", "all x.(Dog(x) -> Animal(x))"]}
{"id": "entailmentbank_validation_635", "nl": "a dog is a kind of organism.", "fol": "", "prediction": ["all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x.(Dog(x) -> Organism(x))"]}
{"id": "entailmentbank_validation_636", "nl": "an organism's environment affects that organism's acquired characteristics.", "fol": "", "prediction": ["all x y.((Organism(x) & Environment(y)) -> AffectsAcquiredCharacteristics(x,y))", "all x y.((Organism(x) & Environment(y)) -> AffectsAcquiredCharacteristics(x,y))", "all x y.((Organism(x) & Environment(y)) -> AffectsAcquiredCharacteristics(x,y))", "all x y.((Organism(x) & Environment(y) & AffectsAcquiredCharacteristics(x,y)) -> AffectsAcquiredCharacteristics(x,y))", "all x y.((Organism(x) & Environment(y)) -> AffectsAcquiredCharacteristics(x,y))", "all x y.((Organism(x) & Environment(y)) -> AffectsAcquiredCharacteristics(x,y))", "all x y.((Organism(x) & Environment(y)) -> AffectsAcquiredCharacteristics(x,y))", "all x y.((Organism(x) & Environment(y)) -> AffectsCertainings(x,y))", "all x.(Organism(x) -> AffectsEnvironment(x,OrganismAcquiredCharacteristics))", "all x y.((Organism(x) & Environment(y)) -> InfluencesAcquiredCentrics(x,y))", "all x.((Organism(x) & Environment(x)) -> AffectsAcquiredCharacteristics(x))", "all x y.((Organism(x) & Environment(y)) -> (AffectsAcquiredCharacteristics(y,x)))", "all x y.((Organism(x) & Environment(y)) -> affectsCertainClaims(x,y))", "all x.((Organism(x) & EnvironmentAffectsChildren(x,y)) -> AcquiredCharacteristicsAffect(x,z))", "all x y.((Organism(x) & Environment(y)) -> AffectsAcquiredCharacteristics(x,y))", "all x y z.((Organism(x) & Environment(y) & Organism(z)) -> AffectsAcquiredCharacteristics(x,z))"]}
{"id": "entailmentbank_validation_637", "nl": "the food preference of a dog is affected by its environment.", "fol": "", "prediction": ["all x.(Dog(x) -> FoodPreferenceAffectedByEnvironment(x))", "all x.((Dog(x) & FoodPreference(x)) -> AffectedByEnvironment(x,x))", "all x y.((Dog(x) & Environment(y) & FoodPreference(x,y)) -> AffectedBy(x,y))", "all x y.((Dog(x) & Environment(y)) -> FoodPreferenceAffectedBy(x,y))", "all x y.((Dog(x) & FoodPeriphery(y)) -> AffectedByEnvironment(x,y))", "all x.(Dog(x) -> AnimalEnvironment(x))", "all x y.((Dog(x) & Environment(y)) -> FoodPreferenceAffectedBy(x,y))", "all x y z.((Dog(x) & FoodPreference(y) & Environment(z)) -> AffectedBy(x,y,z))", "all x y.((Dog(x) & Dog(y)) -> AffectedByEnvironment(x,y))", "all x y.((Dog(x) & Environment(y)) -> AppropriateFoodPreference(x,y))", "exists x y.(Dog(x) & FoodPriority(y) & TouchedByEnvironment(x,y))", "all x y.((Dog(x) & Environment(y)) -> FoodPreferenceAffectedBy(x,y))", "all x.(Dog(x) & AgitatedByEnvironment(x))", "all x.(Dog(x) -> AffectedByEnvironment(x))", "all x.(Dig(x) -> AppliedFoodPfeifference(x))", "all x.(Dog(x) -> AffectedByEnvironment(x))"]}
{"id": "entailmentbank_validation_638", "nl": "following orders is a learned characteristic.", "fol": "", "prediction": ["all x y.((Order(x) & Order(y)) -> LearnedCharacteristic(x))", "all x.((Order(x) & Following(x)) -> LearnedCharacteristic(x))", "all x.(Celebrate(x) -> LearnedCharacteristic(x))", "all x.((Order(x) & Following(x)) -> LearnedCharacteristic(x))", "all x.((Order(x) & OftenOfOrder(x)) -> LearntCharacteristic(x))", "all x.(Order(x) -> LearnedCharacteristic(x))", "all x.(LearntCharacteristic(x) -> FollowingOrders(x))", "all x.((Order(x) & FollowesOrder(x)) -> LearnedCharacteristic(x))", "all x.(LearntCharacteristic(x) -> FollowedOrders(x))", "all x.(LearntCharacteristic(x) -> FollowOrders(x))", "all x.((Order(x) & FollowingOrder(x)) -> LearnedCaracteristic(x))", "all x.(LearntCharacteristic(x) -> FollowsOrders(x))", "all x.((Order(x) & LedGeneration(x)) -> LearnedCharacteristic(x))", "all x.((Order(x) & FollowingOrder(x)) -> LearnedCharacteristic(x))", "all x.((Order(x) & Follows(x)) -> LearnedCharacteristic(x))", "all x.((Order(x) & FollowedBy(x)) -> LearnedCharacteristic(x))"]}
{"id": "entailmentbank_validation_639", "nl": "an example of following orders is coming when called.", "fol": "", "prediction": ["all x.((ExempleOfFollowingOrders(x) & Called(x)) -> Coming(x))", "all x.((ExempleOfFocusingOrders(x) & Calls(x)) -> ComingInFoundation(x))", "all x y z.((ExempleOfFollowingOrders(x) & Call(y)) -> Coming(z))", "all x.((ExempleOfFollowingOrders(x) & Called(x)) -> Coming(x))", "all x y.((Order(x) & Code(y)) -> ComingWhenCall(x,y))", "all x.((Order(x) & Call(x)) -> Following(x))", "all x.((ExempleOfSeatingOrders(x) & Called(x)) -> Coming(x))", "all x.((ExampleOf(x) & FollowedOrders(x)) -> Coming(x))", "all x.((ExempleOfFollowingOrders(x) & Called(x)) -> Coming(x))", "exists x.((ExempleOfFollowingOrders(x) & Called(x)) -> ComingWhenCalled(x))", "all x.((ExempleOfFollowingOrders(x) & Called(x)) -> Coming(x))", "exists x.(ExempleOfFollingOrders(x) & Called(x))", "all x.((ExampleOfFollowingOrders(x) & Called(x)) -> Coming(x))", "all x.((ExampleOfFollowingOrders(x) & Called(x)) -> Coming(x))", "all x.((ExempleOfFollowingOrders(x) & Called(x)) -> Coming(x))", "all x.((ExempleOfFollowingOrders(x) & Called(x)) -> ComingIn(x))"]}
{"id": "entailmentbank_validation_640", "nl": "a dog coming when called is a kind of learned characteristic.", "fol": "", "prediction": ["all x.(ComesWhenCalled(x) -> LearningCharacteristic(x))", "all x.((Dog(x) & ComingWhenCalled(x)) -> LearnedCharacteristic(x))", "all x.((Dog(x) & ComesWhenCall)) -> LearnedCharacteristic(x))", "all x.(WhenCalled(x) -> LearningCharacteristic(x))", "all x.((Dog(x) & ComesWhenCalled(x)) -> LearnedCharacteristic(x))", "all x.((Dog(x) & ComingWhenCalled(x)) -> LearnedCharacteristic(x))", "all x.(ComesWhenCalled(x) -> LearnedCaracteristic(x))", "all x.((Dog(x) & ComingWhenCalled(x)) -> LearnedCharacteristic(x))", "all x.((Dog(x) & ComingWhenCalled(x)) -> LearnedCharacteristic(x))", "all x.((Dog(x) & ComingWhenCall(x)) -> LearntCharacteristic(x))", "all x.((Dog(x) & ComesWhenCalled(x)) -> LearnedCharacteristic(x))", "all x.((Dog(x) & ComingWhenCalled(x)) -> LearnedCharacteristic(x))", "all x.((Dog(x) & ComingWhenCalled(x)) -> LearnedCharacteristic(x))", "all x.((Dog(x) & ComingWhenCall(x)) -> LearntCharacteristic(x))", "all x y.((Dog(x) & Call(y)) -> LearnedCharacteristic(x,y))", "all x.((Dog(x) & ComingWhenCall(x)) -> LearnedCharacteristic(x))"]}
{"id": "entailmentbank_validation_641", "nl": "hunting is a kind of skill.", "fol": "", "prediction": ["all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skills(x))", "all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))"]}
{"id": "entailmentbank_validation_642", "nl": "skills are learned characteristics / behaviors.", "fol": "", "prediction": ["all x.(Skill(x) -> (LearningCharacteristics(x) | LearnedBehaviors(x)))", "all x.(Skill(x) -> (LecturedCharacteristics(x) | LearnedBehaviors(x)))", "all x.(Skill(x) -> (LearnsCharacteristics(x) & LearnsBehaviors(x)))", "all x.(Skill(x) -> (LeisureCharacteristics(x) | Behaviors(x)))", "all x y.((Skill(x) & LearnedCharacteristics(x)) -> LearnedBehaviors(y))", "all x.(Skill(x) -> (LearntCharacteristics(x) & LearnedBehavior(x)))", "all x.(Skill(x) -> (LesserCharacteristics(x) & LesserBehaviors(x)))", "all x.(Skill(x) -> (LearnedCharacteristics(x) & LearnedBehaviors(x)))", "all x.(Skill(x) -> (LecturedCharacteristics(x) & LearnedBehaviors(x)))", "all x.(Skill(x) -> LearnedCharacteristics(x))", "all x.(Skill(x) -> (LessenCharacteristics(x) & LessenBehavior(x)))", "all x.(Skill(x) -> LearnedCharacteristics(x))", "all x.(Skill(x) -> (LearnedCharacteristics(x) (Documents(x) & LearnedBanefits(x))))", "all x y.((Skill(x) & LearnedCharacteristics(y)) -> LearnedBehaviors(x,y))", "all x.(Skill(x) -> (LesserCharacteristics(x) | LesserBehaviors(x)))", "all x.(Skill(x) -> (LecturedCharacteristics(x) | LearnedBehaviors(x)))"]}
{"id": "entailmentbank_validation_643", "nl": "hunting is a kind of learned behaviors.", "fol": "", "prediction": ["all x.(Hunting(x) -> LearnedBehavior(x))", "all x.(Hounting(x) -> LearnedBehavior(x))", "all x.(Judging(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearnedBodies(x))", "all x.(Hunting(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearntBehavior(x))", "all x.(Hunting(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearnedBehaviors(x))", "all x.(Hunting(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearningBehavioral(x))"]}
{"id": "entailmentbank_validation_644", "nl": "inherited characteristics are the opposite of learned characteristics.", "fol": "", "prediction": ["exists x.(EinheritedCharacteristics(x) & OppositeToLearntCharacteristics(x))", "all x.((ErasedCharacteristics(x) & LearnedCharacteristics(x)) -> Opposite(x,hereafterLearningCharacteristics))", "all x y.((ErasedCharacteristic(x) & LearnedCharacteristic(y)) -> OppositeOf(x,y))", "all x y.((EarnedCharacteristics(x) & LearnedCharacteristics(y)) -> OppositeOf(x,y))", "all x.(HereditaryCharacteristics(x) -> OppositeOfLecturedCharacters(x))", "all x.(EarnedCharacteristics(x) -> OppositeOfLearningCharacteristics(x))", "all x.(EarnedCharacteristics(x) -> TheoppositeOfLesserCharacteristics(x))", "all x.(EminheritedCharacteristics(x) -> OppositeOfLevedCharacteristics(x))", "all x y.((EinheritedComponent(x) & LearnedComponent(y)) -> OppositeOf(x,y))", "all x y.((EarnedCharacteristics(x) & LearnedCharacteristics(y)) -> OppositeOf(x,y))", "all x.(AllegedCharacteristics(x) -> OppositeOfLessingCharacteristics(x))", "all x y.((HasEarnedCharacteristics(x) & LearnedCharacteristics(y)) -> OppositeOf(x,y))", "all x.(inheritedCharacteristics(x) -> OppositeOfLearntCharacteristics(x))", "all x y.((ErasedCaracteristics(x) & LearnedCarateria(y)) -> OppositeOf(x,y))", "all x.(AllegedCharacteristics(x) -> OppositeOfLecturedCharacteristics(x))", "(inheritedCharacteristics(inherited))"]}
{"id": "entailmentbank_validation_645", "nl": "learned characteristics are not inherited from parents.", "fol": "", "prediction": ["all x.(LearnedCharacteristics(x) -> -EarnedFromParents(x))", "all x.(Children(x) -> LearnedCharacteristics(x))", "all x y.((Doctor(x) & Learned(y)) -> -HornedFromParent(y,x))", "all x y.((LevedCharacteristics(x) & Parent(y)) -> -HasHearnedFrom(x,y))", "all x.(LessTeachingCaracteristics(x) -> -HeritableFromParent(x))", "all x y.((LesserCharacteristics(x) & Parent(y)) -> -ThrownedFrom(x,y))", "all x.(LevedCharacteristics(x) -> -ErasedFromParents(x))", "all x.((LevedCharacteristics(x) & -Healed(x)) -> -ElectedFromParents(x))", "all x y.((Knowledge(x) & Parent(y)) -> -HasHeadwrittenCharacteristics(x,y))", "all x.(LevedCaracteristics(x) -> -Generation(x))", "all x y.((EducatedCharacteristics(x) & Parent(y)) -> -HeritagedFrom(y,x))", "all x.(LearningCharacteristics(x) -> -TreatedFromParents(x))", "all x y.((LearntCaracteristics(x) & Parent(y)) -> -EarntFrom(x,y))", "all x.(LecturedCharacteristics(x) -> -HerroneouslyErasedFromParents(x))", "all x y.((LevenedCharacteristics(x) & Parent(y)) -> -inherited(x,y))", "all x y.((LesserCharacteristics(x) & Parent(y)) -> -Healed(x))"]}
{"id": "entailmentbank_validation_646", "nl": "food preference is not inherited from parents.", "fol": "", "prediction": ["all x.(FoodPreferred(x) -> -ErasedFromParents(x))", "all x.(FoodPreference(x) -> -ErasedFromParents(x))", "all x y.((FoodPreference(x) & Parent(y) & Has(x,y)) -> -EminheritedFrom(x,y))", "all x.(FoodPreference(x) -> -GoneFromParents(x))", "all x.(FoodPreference(x) -> -EarnedFromParents(x))", "all x y z.((FoodPreference(x) & Parent(y) & Parent(z)) -> -ErasedBy(x,y,z))", "all x.(FoodPrivate(x) -> -HasAllergicSingleMornings(x))", "all x y.((FoodPrivilege(x) & Parent(y)) -> -inheritedFrom(x,y))", "all x.(FoodPreference(x) -> -EarnedFromParents(x))", "-EarnedFromParents(foodPreference)", "all x.(FoodPreference(x) -> -ErasedFromParent(x))", "all x.(FoodPreference(x) -> -ErasedFromParents(x))", "all x.(FoodPseudo(x) -> -HeritagedFromParent(x))", "all x.(FoodPreference(x) & -HerogeneousFromParent(x))", "all x.(FoodPreference(x) -> -Heritage(x))", "all x.(PreferredFood(x) -> -ErasedFromParents(x))"]}
{"id": "entailmentbank_validation_647", "nl": "the intelligence of animals is an acquired characteristic.", "fol": "", "prediction": ["all x.((Animal(x) & Intelligence(x)) -> AcquiredCharacteristic(x))", "all x.((Animal(x) & Intelligence(x)) -> AcquiredCharacteristic(x))", "all x.((AnimalIntelligence(x) & AcquiredCaracteristic(x)) -> Intelligence(x))", "all x y.((Animal(x) & Animal(y)) -> IntelligenceAcquiredCharacteristic(x))", "all x y.((Animal(x) & Animal(y)) -> AgreedCharacteristic(x,y))", "all x.((Animal(x) & Intelligence(x)) -> AcquiredCharacteristic(x))", "all x.((Animal(x) & Intelligence(x)) -> AcquiredCharacteristic(x))", "all x.(Intellect(x) -> AcquiredCharacteristic(x))", "all x.(IntelligenceOfAnimals(x) -> AcquiredCharacteristic(x))", "all x.((Animal(x) & Intelligence(x)) -> AgreedCharacteristic(x))", "all x.((Animal(x) & Intelligence(x)) -> AcquiredCharacteristic(x))", "all x.(AcquiredCharacteristic(x) -> IntelligenceOfAnimals(x))", "all x.(AcquiredCaracteristic(x) -> IntelligenceOfAnimals(x))", "all x.(IntelligenceOfAnimals(x) -> AcquiredCharacteristic(x))", "all x.((AnimalIntelligence(x) & AppropriateCharacteristic(x)) -> Intelligence(x))", "all x y.((Animal(x) & Animal(y)) -> AppropriatedCaracteristic(x,y))"]}
{"id": "entailmentbank_validation_648", "nl": "the intelligence of a human is an acquired characteristic.", "fol": "", "prediction": ["all x.(Human(x) -> CultivatedCharacteristic(x))", "all x y.((Human(x) & Human(y)) -> AppropriateCharacteristic(x,y))", "all x y.((Human(x) & Intelligence(y)) -> AwakenedCharacteristic(x))", "all x.(Human(x) -> AcquiredCharacteristic(x))", "all x y.((Human(x) & Human(y)) -> AggregatedCharacteristic(x,y))", "all x.((Human(x) & IntelligenceApprovedCharacteristic(x)) -> AppropriateCharacteristic(x))", "all x.(Human(x) -> AcquiredCharacteristic(x))", "all x y.((Human(x) & Human(y)) -> AcquiredCharacteristic(x,y))", "all x.(AcquiredCaracteristic(x) -> IntelligenceOfHuman(x))", "all x.(Human(x) -> ApheredCharacteristic(x))", "all x.(HumanIntelligence(x) -> AgreedCharacteristic(x))", "all x.((Human(x) & Intelligence(x)) -> AcquiredCharacteristic(x))", "all x y.((Human(x) & Human(y)) -> IntelligenceAcquiredCharacteristic(x,y))", "all x.(Human(x) -> ApearnedCharacteristic(x))", "all x.(Human(x) -> AcquiredCaracteristic(x))", "all x.((Human(x) & AcquiredCharacteristic(x)) -> Intelligence(x))"]}
{"id": "entailmentbank_validation_649", "nl": "inherited characteristics are the opposite of acquired characteristics.", "fol": "", "prediction": ["all x.(ErasedCharacteristics(x) -> OppositeOfAcquiredCharacteristics(x))", "all x y.((EarnedCharacteristics(x) & AcquiredCharacteristics(y)) -> OppositeOf(x,y))", "all x.((ErasedCharacteristics(x) & AcquiredCharacteristics(x)) -> Opposite(x, acquiredCharacteristics))", "all x.(HeritageCharacteristics(x) -> OppositeOfAcquiredCharacteristics(x))", "all x.(RinheritedCharacteristics(x) -> OppositeOfAcquiredCharacteristics(x))", "all x.(EarnedCharacteristics(x) -> OppositeOfAcquiredCharacteristics(x))", "all x.(RinheritedCharacteristics(x) -> OppositeOfAcquiredCharacteristics(x))", "all x.(EarnedCharacteristics(x,AcquiredCharacteristics) -> OppositeOfCharacteristics(x,AcquiredCharacteristics))", "all x y.((EarnedCharacteristics(x) & AcquiredCharacteristics(y)) -> AsideFrom(x,y))", "all x.(EarnedCharacteristics(x) -> OppositeOfAcceptedCharacteristics(x))", "all x.(EarnedCharacteristics(x) -> Opposite(x))", "all x.(EarnedCharacteristics(x) -> OppositeOfApprovedCharacteristics(x))", "all x.((ErasedCharacteristics(x) & AcquiredCharacteristics(x)) -> Opposite(x,acquiredCharacteristics))", "all x.(EarnedCharacteristics(x) -> OppositeOfAcquiredCharacteristics(x))", "all x y.((ErasedCharacteristics(x) & AcquiredCharacteristics(y)) -> OppositeOf(x,y))", "all x.((ErasedCharacteristics(x) & AcquiredCharacteristics(x)) -> OppositeOf(x,acquiredCharacteristics))"]}
{"id": "entailmentbank_validation_650", "nl": "the intelligence of a human is not an inherited characteristic.", "fol": "", "prediction": ["all x.(HumanIntelligence(x) -> -EarnedCharacteristic(x))", "all x.(Human(x) -> -Intelligence(x))", "all x.((Human(x) & Intelligence(x)) -> -HerroneousCharacteristic(x))", "all x.((Human(x) & Intelligence(x)) -> -ErectedCharacteristic(x))", "all x.(Human(x) -> Intelligence(x))", "all x.(Human(x) -> -IntelligenceAlteredCharacteristic(x))", "all x.(Human(x) -> -HiggeredCharacteristic(x))", "all x.(Human(x) -> -Intelligence(x))", "all x.(Human(x) -> -ErasedCharacteristic(x))", "all x.(Intelligence(x) -> -OverriddenCharacteristic(x))", "all x.(Human(x) -> -Herevity(x))", "all x.(HumanIntelligence(x) -> -ErasedCharacteristic(x))", "all x.(Human(x) -> -HealedCharacteristic(x))", "all x y.((Human(x) & Human(y)) -> -EmbeddedCharacteristic(x,y))", "all x.(Human(x) -> -IntelligenceCharacteristic(x))", "all x y.((Human(x) & Human(y)) -> Intelligence (x,y) & -EinheritedCharacteristic(x,y)))"]}
{"id": "entailmentbank_validation_651", "nl": "genes is a vehicle for passing inherited characteristics from parent to offspring.", "fol": "", "prediction": ["all x.(Genes(x) -> VehicleForPassingErasedCharacteristics(x))", "all x y z.((Genes(x) & Parent(y) & Offspring(z)) -> CarriedFromTo(x,y,z))", "all x y.((Genes(x) & Parent(y) & Offspring(z)) -> PassedCaracteristics(x,y,z))", "all x.(Genes(x) -> (PassesParentFromToOffspring(x) & inheritsParentFromOffspring(x)))", "all x y.((Genes(x) & Offspring(y)) -> VehicleForPassingEarnedCharacteristics(x,y))", "all x.(Genes(x) -> -> (PassesExpectedCharacteristics(x) & fromParentToOffspring(x)))", "all x.(Gain(x) -> (PassesEarnedCharacteristicsFromParentToOffspring(x)))", "all x.(Genes(x) -> PassingEmbeddedCharacteristicsFromParentToOffspring(x))", "all x.(Genes(x) -> TransfersEarningCharacteristics(x))", "all x y.((Gene(x) & Parent(y)) -> Carried(y,x))", "all x.(Genes(x) -> VehicleForPassingEarnedCharacteristics(x))", "all x y z.((Gene(x) & Parent(y) & Offspring(z)) -> PassesGenes(x,y,z))", "all x y.((Gene(x) & Parent(y) & Offspring(z)) -> VehicleForPassingHappiness(x,y,z))", "all x.(Genes(x) -> TracesInheritance(x))", "all x.(Genes(x) -> PassesHorrorizedCharacteristics(x))", "all x y z.((Genes(x) & Genes(y) & Offspring(z) & Parent(y) & HasHereditaryCharacteristics(x,y,z)) -> PassesFromTo(x,y,z))"]}
{"id": "entailmentbank_validation_652", "nl": "a father is a kind of male parent.", "fol": "", "prediction": ["all x.(Parent(x) -> MaleParent(x))", "all x.(Daddy(x) -> MaleParent(x))", "all x.(Parent(x) -> MaleParent(x))", "exists x.(Parent(x) & Father(x))", "all x.(Father(x) -> MaleParent(x))", "all x.((Parent(x) & Father(x)) -> MaleParent(x))", "all x.(Father(x) -> MaleParent(x))", "all x.(Parent(x) -> MalePast(x))", "all x.(Treason(x) -> MaleParent(x))", "exists x.(Parent(x) & Father(x))", "all x.(father(x) -> MaleParent(x))", "all x.(Father(x) -> MaleParent(x))", "all x.(Parent(x) -> MalePatron(x))", "all x.(Paper(x) -> MaleParent(x))", "all x.(Tax(x) -> MaleParent(x))", "all x.(Parent(x) -> Male(x))"]}
{"id": "entailmentbank_validation_653", "nl": "a mother is a kind of female parent.", "fol": "", "prediction": ["all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FemalePatron(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FeminineParent(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FemaleParent(x))"]}
{"id": "entailmentbank_validation_654", "nl": "genes are a vehicle for passing inherited characteristics from a mother and a father to offspring.", "fol": "", "prediction": ["all x y z.((Gene(x) & Mother(y) & Father(z)) -> GenesVehicleForLeapingCharacteristics(x,y,z))", "all x y.((Gene(x) & Mother(y) & Father(y)) -> PassingCharacteristics(x,y))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (Genes(x) & PassesHeritage(x,y,z)))", "all x y.((Gene(x) & Mother(y) & Father(y)) -> VehicleForPassingOnlyIntroductions(x,y))", "all x y z.(Gene(x) -> (Vehicle(x,y) & Gene(y) & Mother(z) & Father(z) & PassesHeadsets(x,y,z,offspring)))", "all x y.((Gene(x) & Mother(y) & Father(y)) -> PassesHeritageToOffspring(x,y))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> VehicleForTracingEarnedCharacteristicsToOffspring(x,y,z))", "all x.(Genes(x) -> (PassesEmbertainedCharacteristics(x) & FromMother(x) & FromToOffspring(x)))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> PassesEarnedCharacteristicsToOffspring(x,y,z))", "all x y.((Genes(x) & Mother(y) & Father(y)) -> TransfersHigherCreativityToOffspring(x,y))", "all x y z.((Gene(x) & Mother(y) & Father(z) & Offspring(x)) -> PassesSequentialsAt(x,y,z))", "all x y z.((Genes(x) & (Mother(y) | Father(y)) & Offspring(z)) -> CarriedBy(x,y,z))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> CarriedFromToOffspring(x,y,z))", "all x y.((Gene(x) & Mother(y) & Father(y)) -> PassesHeritage(x,y))", "all x y.(Genes(x) -> (Genes(y) & PassesInheritance(x,y) & FromMotherToOffspring(x,z)))", "all x.(Genes(x) -> (PassingMotherAndDaughterCharacteristics(x) & PassingToOffspring(x)))"]}
{"id": "entailmentbank_validation_655", "nl": "in sexual reproduction sperm is a vehicle for the genes from the father to the offspring.", "fol": "", "prediction": ["all x.((Sparrow(x) & InDiscrimination(x)) -> VehicleForGenes(x))", "all x y z.((SexualReproduction(x) & Sperm(y) & Gene(z) & FromPastorToOffspring(a)) -> VehicleForGenes(y,z))", "all x y z.((Sparrow(x) & SexualReproduction(y) & Genes(z) & FromPastorToOffspring(x,z)) -> VehicleForGenes(x))", "all x.(SpiderMerit(x) -> VehicleForGenes(x))", "all x y z.((Ssperm(x) & SexualReproduction(y) & Genes(z)) -> CarriesFromFatherToOffspring(x,z))", "all x.((Sparrow(x) & SexualReproduction(x)) -> VehicleForGenes(x))", "all x y.((Spoken(x) & SexualReproduction(y) & Gene(x) & Father(y)) -> VehicleForGenesFromToOffspring(x,y))", "all x y.((Sparrow(x) & SexualReproduction(y)) -> VehicleForGenes(x,y))", "all x y z.((Ssperm(x) & SexualReproduction(y) & Gene(z)) -> VehicleForGenesAbout(x,z))", "all x.((Ssperm(x) & SexualReproduction(x)) -> Vehicle(x))", "all x y.((Permaceutical(x) & Sperm(y) & SexualReproduction(x)) -> VehicleForGenes(y,x))", "all x y z.((Ssperm(x) & SexualReproduction(y) & Gene(z)) -> (Vehicle(x,x,z) & FromFatherToOffspring(x)))", "all x.(Sparrow(x) -> (VehicleForGenes(x) & InSexualReproduction(x)))", "all x y z.((Sparrow(x) & SexualReproduction(y) & Genes(z) & FromFather(x,z) & FromOffspring(z)) -> VehicleForGenes(x,y,z))", "all x y.((SexualReproduction(x) & Sperm(y)) -> (VehicleForGenes(x,y) & FromTheFatherToOffspring(y)))", "all x.(SexualReproduction(x) -> (VehicleForGenes(x) & FromFatherToOffspring(x)))"]}
{"id": "entailmentbank_validation_656", "nl": "in sexual reproduction the egg is a vehicle for the genes from the mother to the offspring.", "fol": "", "prediction": ["all x.((Egg(x) & Genes(x,Mother and Offspring)) -> CarriesFromToOffspring(x))", "all x.((Egg(x) & SexualReproduction(x)) -> VehicleForGenesFromMotherToOffspring(x))", "all x y z.((Egg(x) & SexualReproduction(y) & Gene(z) & FromMotherToOffspring(x,z)) -> VehicleForGenes(x,y,z))", "all x y z.((Egg(x) & SexualReproduction(y) & Genes(z)) -> VehicleFrom(x,y,z))", "all x y.(SexualReproduction(x,y) -> (Egg(y) & Genes(z) & FromMotherToOffspring(x)))", "all x.((Egg(x) & HumanGenen(x)) -> VehicleForGenesFromMotherToOffspring(x))", "all x y z.((Egg(x) & SexualReproduction(y) & Genes(z)) -> VehicleForGenes(x,y,z))", "all x y.((Egg(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromMotherToOffspring(y)))", "all x y.((Egg(x) & SexualReproduction(y) & Mother(y) & Offspring(y)) -> VehicleForGenes(x,y))", "all x.(SexualReproduction(x) -> VehicleFollowingGenes(x,Mother))", "all x.((Egg(x) & SexualReproduction(x)) -> VehicleForGenes(x,matter,offspring))", "all x y z.((Egg(x) & SexualReproduction(y) & Gene(z) & Embraces(x,z)) -> VehicleForGenes(x,y,z))", "all x y z.((Egg(x) & SexualReproduction(y) & Egg(z)) -> (VehicleForGenesFromMotherToOffspring(x,y,z)))", "all x.((Egg(x) & GeneVector(x,Mother) & GeneVector(x,Offspring)) -> InSexualReproduction(x))", "all x.((Egg(x) & SexualReproduction(x)) -> VehicleForGenesFromMotherToOffspring(x))", "all x y.((Egg(x) & SexualReproduction(y)) -> VehicleForGenes(x,y))"]}
{"id": "entailmentbank_validation_657", "nl": "genes are passed from a mother and a father to offspring through the egg and sperm.", "fol": "", "prediction": ["all x y.((Genes(x) & Mother(y)) -> Passed(y))", "all x y.((Genes(x) & Mother(y) & Father(z)) -> ProvidesGenesToOffspring(x,y,z))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassedFrom(x,y,z) & Offspring(x,z)))", "all x y.((Genes(x) & Mother(y) & Father(z)) -> PassedToOffspring(x,y,z))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassedBy(x,y,z) & Onspring(x) & ThroughEgg(x) & ThroughSperm(x)))", "all x y z.((Gene(x) & Mom(y) & Father(z)) -> (Passed(x,y,z) & ForOffspring(y)))", "all x y z.((Gene(x) & Mother(y) & Father(z) & Offspring(z)) -> PassedByEggAndSperm(x,y,z))", "all x y z.(Genes(x) & Mother(y) & Father(z) & Passed(x,y,z) & Offspring(x,o) & Egg(y) & Sperm(z))", "all x y z.( (Gene(x) & Mother(y) & Father(z)) -> (PassedFromToOffspring(x,y,z) & (Embryon(x,x) | Sperm(x))))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> PassedThroughEgg(x,y,z))", "all x y.((Gene(x) & Mother(y) & Father(z)) -> PassedToOffspring(x,y,z))", "all x y z.((Genes(x) & Mother(y) & Father(z)) -> PassedToOffspring(x,y,z))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> PassedToOffspring(x,y,z))", "all x y.((Gene(x) & Mother(y) & Father(y)) -> (PassedToOffspring(x,y) & ThroughEgg(x) & ThroughSperm(x)))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> PassedFromToOffspring(x,y,z))", "all x y.((Genes(x) & Mother(y) & Father(z) & CeremonialBirth(y)) -> PassedByToOffspring(x,y,z))"]}
{"id": "entailmentbank_validation_658", "nl": "genes determine the traits for the living things.", "fol": "", "prediction": ["all x y.((Gene(x) & LivingTreat(y)) -> DeterminesTreatments(x,y))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesTraits(x,y))", "all x.(Gene(x) -> DeterminesTraitsForLivingThings(x))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesTaitor(x,y))", "all x.(Gaxy(x) -> DefiningTaite(x))", "all x.(Gene(x) -> DeterminesTraits(x,livingThings))", "all x y z.((Gene(x) & LivingThing(y) & Traits(z)) -> Determines(x,z))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesTreatments(x,y))", "all x y z.((Gene(x) & LivingTax(y) & LivingTax(z)) -> DeterminesFor(x,y,z))", "all x y.((Gene(x) & LivingThing(y)) -> DetermineTraits(x,y))", "all x y z.((Gene(x) & LivingThing(y) & LivingThing(z)) -> DeterminesTays(x,y,z))", "all x.(Genes(x) -> DeterminesTratches(x,livingThings))", "all x y.((Gene(x) & LivingThing(y)) -> DECLINETasksFor(x,y))", "all x.(Gene(x) -> DeterminesTreatments(x,livingThings))", "all x y z.((Gastro(x) & LivingThing(y) & LivingThing(z)) -> DecidesTraitsFor(x,y,z))", "all x.(Genes(x) -> DetermineTreatments(x,livingThings))"]}
{"id": "entailmentbank_validation_659", "nl": "traits are passed from a mother and a father to offspring through the egg and sperm.", "fol": "", "prediction": ["all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z)) -> PassesTraits(x,y,z))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> TraitsPassedFromTo(x,y,z))", "all x y.((Talent(x) & Mother(y) & Father(y)) -> PerceivedBy(x,y,EggSperm))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> PassedTreatments(x,y,z))", "all x y.((Mother(x) & Father(y)) -> (PassedBy(x,y) & FromToOffspring(x,y)))", "all x y z.((Mother(x) & Daughter(y) & Offspring(z)) -> (PassesTraits(y,z) & ThroughEgg(z,x) & ThroughSperm(x)))", "all x y z.((Mother(x) & Father(y) & Offspring(z)) -> PassedThroughEggAndSsperm(x,y,z))", "all x y.((Mother(x) & Father(y) & Offspring(x,y,z)) -> (PassesTaleTo(x,z) & EggAndSperm(z)))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> (PassedThrough(x,y,z) & Has(x,z)))", "all x y.((Mother(x) & Father(y) & Offspring(x,y)) -> PassedTailorsThroughEggFromSpermToOffspring(x,y))", "all x y z.((Mother(x) & Father(y) & Offspring(z)) -> (MaternTraits(x,y) & FatherTraits(x,z) & Passed(y)))", "all x y.((Mother(x) & Father(y) & Offspring(y,x)) -> TraitsPassedThroughEggAndSsperm(x,y))", "all x.(Talents(x) -> (PassedFromMother(x) & PassedFromJasonToOffspring(x)))", "all x y.((Mother(x) & Father(y)) -> (TraitsPassed(x,y) & Offspring(y) & InMother(x,y) & InPeril(y,z)))", "all x y.((Mother(x) & Father(y) & Offspring(y) & Through(x,y)) -> PassedTarot(x,y))", "all x y.((Mother(x) & Father(y)) -> (RouteGivenToOffspringFrom(x,y) & via(x,y)))"]}
{"id": "entailmentbank_validation_660", "nl": "dna is a kind of nucleic acid.", "fol": "", "prediction": ["all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NIClOfAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(NocicleicAcid(x) -> Dna(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))"]}
{"id": "entailmentbank_validation_661", "nl": "thymine is found in dna.", "fol": "", "prediction": ["all x y.((Thymine(x) & Dna(y)) -> FoundIn(x,y))", "all x y.((Thymine(x) & DistinctDna(y)) -> FoundIn(x,y))", "all x.(Thymine(x) -> FoundInDna(x))", "all x.(Thymine(x) -> FoundInDNA(x))", "all x y.((Thymine(x) & Dna(y)) -> FoundIn(x,y))", "all x.(Thymine(x) -> FoundInDna(x))", "all x.(Thymine(x) -> FoundInDna(x))", "(Thymine(dna) -> FoundIn(dna))", "all x.(Thymine(x) -> FoundInDna(x))", "all x y.((Thrymine(x) & Dna(y)) -> FoundIn(x,y))", "all x.(Thymine(x) -> FoundInDna(x))", "all x.(Thymine(x) -> FoundInDna(x))", "all x.(Thymine(x) -> FoundInDna(x))", "all x.(Thymine(x) -> FoundInDna(x))", "all x.(Thymine(x) -> FoundInDna(x))", "all x.(Thymine(x) -> FoundInDna(x))"]}
{"id": "entailmentbank_validation_662", "nl": "thymine cannot be found in rna.", "fol": "", "prediction": ["all x y.((Thymine(x) & Rna(y)) -> -FoundIn(x,y))", "all x y.((Thymine(x) & Rhina(y)) -> -CanBeFoundIn(x,y,y))", "-CanBeFindedInRna(thymine)", "-exists x.(Thymine(x) & -InventedIn(x,Rna))", "-CanBeFindedInRna.", "all x y.((Thymine(x) & Rina(y)) -> -Finding(x,y))", "-exists rna.(Thymine(r) & -Together(th,r))", "all x.(Thymine(x) -> -FindsInRna(x))", "all x y.((Thymine(x) & Rna(y)) -> -FindtIn(x,y))", "all x.(Thymine(x) -> -FindsInRna(x))", "-FindsThymineInRna(th))", "-exists x.(Thymine(x) & -InRna(x))", "all x y.((Thymine(x) & Rhna(y)) -> -FoundIn(x,y))", "-exists x.(Thymine(x) & Rna(x))", "-(Thymine(x) & -InRna(x))", "-exists x.(Thymine(x) & -InRna(x))"]}
{"id": "entailmentbank_validation_663", "nl": "if thymine is found in a strand of nucleic acid, then the nucleic acid is dna.", "fol": "", "prediction": ["all x y.((Thymine(x) & UsingSstrandOfNucleicAcid(x)) -> Dna(y))", "all x.((Thymine(x) & FoundInNucleicAcidString(x)) -> Dna(x))", "(See ThymineInNucleicAcid(th) & FoundInString(th)) -> Dna(th))", "all x.((Thymine(x) & FoundInNucleicAcid(x)) -> Dna(x))", "all x.((Thymine(x) & FoundInNucleicAcid(x)) -> Dna(x))", "all x.((Thymine(x) & FoundInNucleicAcid(x)) -> Dna(x))", "all x.((Thymine(x) & FoundInNucleicAcid(x)) -> Dna(x))", "all x.((Thymine(x) & FoundInNucleicAcid(x)) -> Dna(x))", "all x y.((Thymine(x) & NucleicAcid(y) & FoundInString(x,y)) -> Dna(x))", "all x y z.((Thymine(x) & NucleicAcid(y) & String(z) & FoundIn(x,y)) -> Dna(x))", "all x.((Thymine(x) & FoundInNucleicAcid(x)) -> Dna(x))", "all x y.((OralString(x) & Thymine(y) & FoundIn(y,x)) -> NucleicAcid(x))", "all x.((Thymine(x) & FoundInNucleicAcid(x)) -> Dna(x))", "all x.((Thymine(x) & FoundInNucleicAcid(x)) -> Dna(x))", "all x y.((StringOfNucleicAcid(x) & ThymineIn(x,y)) -> Dna(x))", "all x.(Tymine(x) -> (FormsInNucleicAcid(x) & Dna(x)))"]}
{"id": "entailmentbank_validation_664", "nl": "a researcher found thymine in a strand of nucleic acid.", "fol": "", "prediction": ["all x y z.((Researcher(x) & Thymine(y) & NucleicAcid(z)) -> FoundInString(x,y,z))", "all x y z.((Researcher(x) & Thymine(y) & NucleicAcid(z)) -> FoundInLayer(x,y,z))", "all x y z.((Researcher(x) & Thymine(y) & NucleicAcid(z)) -> FoundInString(x,y,z))", "(FoundThymineInNucleicAcid(red) & FoundInString(red))", "all x y.((Researcher(x) & Thymine(y)) -> FoundInDstrandOfNucleicAcid(x,y))", "all x y z.((Researcher(x) & Thymine(y) & NucleicAcid(z) & Strand(x,z)) -> FoundIn(x,y,z))", "all x y z.((Researcher(x) & Thymine(y) & NucleicAcid(z)) -> FoundInString(x,y,z))", "all x y z.((Researcher(x) & Thymine(y) & NucleicAcid(z)) -> FoundInString(x,y,z))", "all x y.((Researcher(x) & Thymine(y)) -> FoundInNucleicAcid(x,y))", "all x y.((Researcher(x) & Thymine(y)) -> FoundInNucleicAcid(y,x))", "all x y.((Researcher(x) & Thymine(y)) -> FoundInNucleicAcid(x))", "all x y z.((Researcher(x) & Thymine(y) & MolecularString(z)) -> FoundInNucleicAcid(x,y))", "all x y.((Researcher(x) & Thymine(y)) -> FoundInNucleicAcid(x,y))", "all x.((Researcher(x) & Thymine(y) & InSstrandOfNucleicAcid(x,y)) -> FoundIn(x,y))", "all x y.((Researcher(x) & Thymine(y) & NucleicAcid(y)) -> FoundInString(x,y))", "all x y.((Researcher(x) & Thymine(y)) -> FoundInNucleicAcidSstrand(x,y))"]}
{"id": "entailmentbank_validation_665", "nl": "the researcher found a strand of dna.", "fol": "", "prediction": ["all x y.(Dna(x) & Researcher(y) & FoundsStringOfDna(y,x))", "all x y.((Researcher(x) & EndangeredDna(y)) -> Found(x,y))", "all x y.((Researcher(x) & Draena(y)) -> FoundStringOfDna(x,y))", "all x.((Researcher(x) & FoundDna(x)) -> FoundDna(x))", "all x y.((Researcher(x) & Dna(y)) -> FoundSstrand(x,y))", "all x.((Researcher(x) & FoundDna(x)) -> StrandOfDna(x))", "all x y.((Researcher(x) & Dna(y)) -> FoundString(x,y))", "all x y z.((Researcher(x) & Dna(y) & Detects(x,y)) -> FoundStringOf(x,y))", "all x.((Researcher(x) & FoundDna(x)) -> DramaticDNA(x))", "all x y.((Researcher(x) & DnaString(y)) -> Found(x,y))", "all x.(Researcher(x) -> FoundDnaString(x))", "all x y z.((Researcher(x) & dna(y) & Strand(z)) -> Found(x,y))", "all x y.((Researcher(x) & StringOfDna(y)) -> Found(x,y))", "all x.((Researcher(x) & FoundDnaString(x)) -> DnaDrift(x))", "all x y.((Researcher(x) & Dna(y)) -> FoundDna(x,y))", "all x y.((Researcher(x) & StrandOfDna(y)) -> Found(x,y))"]}
{"id": "entailmentbank_validation_666", "nl": "if a pure dominant organism is crossed a recessive organism, then the offspring will have a 100% probability of being heterozygous dominant.", "fol": "", "prediction": ["all x y z.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y) & RecessiveOrganism(z)) -> HeterozygousDominantOrganism(x))", "all x y.((CorrectsRecessiveOrganism(x) & PureDominantOrganism(y) & Crossed(y,x)) -> HeterozygousDistantOffspring(x))", "all x y.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> 100%ProbabilityOfHeterozygousDominantOffspring(x))", "all x.((PureDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> 100%ProbabilityOfHeterozygousDominant(x))", "all x y z.((FressiveOrganism(x) & PureDominantOrganism(y) & RecessiveOrganism(z) & Crossed(x,y,z)) -> 100%ProbabilityOfHeterozygousDominantOffspring(x,y,z))", "all x y.((PlateDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> Has100%ProbabilityOfInferiorHeterozygousOrganism(y))", "all x y z.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> (HybridDominantOffspring(z) & 100%Possibility(z)))", "all x.((PureDominantOrganism(x) & CrossesRecessiveOrganism(x)) -> 100%ProbabilityOfHeterozygousDisruptor(x))", "all x y.((PureDominatingOrganism(x) & CrossedRecessiveOrganism(x)) -> HasHydrogousDistantNumberOfOffspring(x))", "all x.((PureDominatingOrganism(x) & CrossedRecessiveOrganism(x)) -> 100%ProbabilityOfHeterozygousDominantOffspring(x))", "all x.((PlatinumDominantOrganism(x) & CrossesRecessiveOrganism(x)) -> AlloyedHeterozygous(x))", "all x y.((PureDominatingOrganism(x) & CrossedRecessiveOrganism(x)) -> 100%ProbabilityOfHeterozygousDominantOffspring(y))", "all x.((PureDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> 100%ProbabilityOfHeterozygousDominant(x))", "all x.((PureDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> 100%ProbabilityOfHeterozygousDistantOffspring(x))", "all x y.((PureDescendantOrganism(x) & -RecessiveOrganism(y)) -> (NumberOfHostelygousDescendant(x) & 100%Probability(x)))", "all x y.((PrincipleDominantOrganism(x) & RecessiveOrganism(y)) -> (Crossed(x,y) & OffspringHas100%ProbabilityOfHeterozygousDominant(x)))"]}
{"id": "entailmentbank_validation_667", "nl": "a scientist crosses a red-flowered plant with a white-flowered plant, and all offspring have red flowers.", "fol": "", "prediction": ["all x y.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(y)) -> RedFlower(x,y))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y) & AllOffspringHaveRedFlowers(x)))", "all x y.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(y)) -> RedFlowersOffspring(x))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y) | AllOffspring(x,z))))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y) & AllOffspringHaveRedFlowers(x)))", "all x y.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(y)) -> HasRedFlowers(x))", "all x y.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(y)) -> (Constracts(x,y) & RedFlowers(x)))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> CrossesAndHasRedFlowers(x,y))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y) & OffspringHasRedFlowers(x,z)))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y) & AllOffspringHaveRedFlowers(x)))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y,z) & HasRedFlower(x)))", "all x y.((Scientist(x) & RedFloweredPlant(x) & WhiteFloweredPlant(y)) -> HasRedFlowers(x))", "all x y.((Scientist(x) & RedFloweredPlant(y,x)) -> (CrossesWithWhiteFloweredPlant(x) & HasRedFlowers(x)))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y,z) & AllOffspringHaveRedFlowers(x)))", "all x y.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y) & OffspringHaveRedFlowers(x)))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y) & AllOffspringHaveRedFlowers(x)))"]}
{"id": "entailmentbank_validation_668", "nl": "all the offspring with red flowers are heterozygous dominant.", "fol": "", "prediction": ["all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDisdominant(x))", "all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDominant(x))", "all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDisrupting(x))", "all x.((Offspring(x) & HasRedFlower(x)) -> HeterozygousDominant(x))", "all x.((Offspring(x) & RedFlowers(x)) -> HeterozygousDominant(x))", "all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDistant(x))", "all x.((Offspring(x) & HasRedFlowers(x)) -> HeterozygousDominant(x))", "all x.((Offspring(x) & HasRedFlowers(x)) -> HeterozogousDisruptive(x))", "all x.((Offspring(x) & HasRedFlowers(x)) -> Heterozygousdominant(x))", "all x y.((Offspring(x) & RedFlower(y)) -> HeterozygousDescendant(x))", "all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDominant(x))", "all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDistant(x))", "all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDenominative(x))", "all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDominant(x))", "all x.((Offspring(x) & RedFlowers(x)) -> HeterozygousDistant(x))", "all x.((Offspring(x) & RedFlowers(x)) -> HeterozygousDominant(x))"]}
{"id": "entailmentbank_validation_669", "nl": "the offspring with red flowers are crossed with pure recessive white flowered plants.", "fol": "", "prediction": ["all x y.((Offspring(x) & OffspringWithRedFlowers(x) & WhiteFloweredPlants(y)) -> CrossedWithRecessive(x,y))", "all x y.((Offspring(x) & RedFlowers(x) & WhiteFloweredPlant(y)) -> CrossedWith(x,y))", "all x y.((Onspring(x) & RedFlower(x) & Offspring(y) & Crossed(y,x)) -> RecessiveWhiteFloweredPlants(z))", "all x.((Offspring(x) & RedFlowers(x)) -> CrossedWithRecessiveWhiteFloweredPlants(x))", "all x.((Offspring(x) & RedFlower(x)) -> CrossedWithRecessiveWhiteFloweredPlants(x))", "all x y.((Offspring(x) & RedFlower(y) & CrossedWithWhiteFloweredPlants(x,y)) -> (RecessiveFloweredPlant(x,y)))", "all x y.((Offspring(x) & RedFlowers(x)) -> (CrossedWithRecessiveWhiteFloweredPlants(x)))", "all x y.((Offspring(x) & RedFlower(x)) -> CrossedWithRecessiveWhiteFloweredPlants(y))", "all x y.((Offspring(x) & RedFlower(x) & WhiteFloweredPlant(y)) -> CrossedWith(x,y))", "all x y.((Offspring(x) & HatredRedFlowers(x) & WhiteFloweredPlant(y)) -> Crossed(x,y))", "all x y.((Offspring(x) & RedFlowers(x) & WhiteFloweredPlant(y)) -> CrossedWith(x,y))", "all x y.((Offspring(x) & RedFlower(x) & WhiteFloweredPlant(y)) -> Crossedwith(x,y))", "all x y.((Offspring(x) & RedFlowers(y)) -> (CrossedWithWhiteFloweredPlants(x) & PureRecessiveWhiteFloweredPlants(x)))", "all x.((Offspring(x) & RedFlowers(x)) -> CrossedWithRecessiveWhiteFloweredPlants(x))", "all x.((OffspringRedFlowers(x) & Crossed(x)) -> RecessiveWhiteFloweredPlants(x))", "all x y.((Offspring(x) & RedFlowers(y)) -> Crossed(x,y))"]}
{"id": "entailmentbank_validation_670", "nl": "heterozygous dominant red flowered plants are crossed with pure recessive white flowered plants.", "fol": "", "prediction": ["all x.(HeterozygousDominantRedFloweredPlant(x) -> CrossedWithRecessiveWhiteFloweredPlant(x))", "all x.((Horozygous(x) & DominantRedFlowered(x) & ResistiveWhiteFlowered(x)) -> Crossed(x))", "all x y.((HydrocygousDominantRedFlowered(x) & PredominantRedFlowered(y)) -> CrossedWithRecessiveWhiteFlowered(x,y))", "all x y.((HeterozygousDominantRedFloweredPlant(x) & WhiteFloweredPlant(y)) -> CrossedWith(x,y))", "all x.((HydrozygousDistantRedFloweredPlant(x) & CrossedWithRecessiveWhiteFloweredPlant(x)) -> HeterozygousDistantRedFloweredPlant(x))", "all x.(HeterozygousDescendantMade(x) -> Crossed(x))", "all x.((HydrogousDisruptiveRedFloweredPlants(x) & RecessiveWhiteFloweredPlants(x)) -> Crossed(x))", "all x y.((HydrozygousDominantRedFloweredPlants(x) & HeterozygousDominantRedFloweredPlants(x)) -> CrossedWithRecessiveWhiteFloweredPlants(y))", "all x y.((HeterozygousDulgingRedFloweredPlant(x) & RecessiveWhiteFloweredPlant(y)) -> Crossed(x,y))", "all x y.((HysterozygousHerbazinde(x) & RedFloweredPlant(y) & CrossedTo(x,y)) -> RecessiveWhiteFloweredPlant(z))", "all x y.((HyperzygousHybridating(x,y) & RedFlowered(y)) -> CrossedWithRecessiveWhiteFlowered(x))", "all x y.((Heterozygous(x) & DominantRedFloweredPlants(y)) -> Crossed(x))", "all x y.((Hydrozygous(x) & DominantRedFloweredPlants(y) & Crossed(x,y)) -> RecessiveWhiteFloweredPlants(c))", "all x y z.((HoterzygousDominantRedFloweredPlant(x) & HeterozygousDominantRedFloweredPlant(y) & WhiteFloweredPlant(z)) -> CrossedWith(x,y,z))", "all x y.((HeterozygousHumanFertile(x) & PredominantRedFlowered(x) & RecessiveWhiteFlowered(y)) -> CrossedWith(x,y))", "all x y.((Hydrocygous(x) & DominantRedFloweredPlant(x)) -> CrossedWithRecessiveWhiteFloweredPlant(y))"]}
{"id": "entailmentbank_validation_671", "nl": "crossing a heterozygous dominant organism with a homozygous recessive organism causes their offspring to be dominant or recessive with either of 50% probability.", "fol": "", "prediction": ["all x y.((Breeding(x,y) & HortzygousDominantOrganism(y) & HomozygousRecessiveOrganism(y)) -> (DominantSurvival(y) | RecessiveSurvival(y)))", "all x y.((Crossing(x,y) & HomozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> (Distant(y) | Recessive(y)))", "all x y.((HysterozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> (Crossing(x,y) & (DominantOrRecessive(x) | Recessive(x))))", "all x y z.((Scraping(x,y) & HeterozygousDominantOrganism(y) & HomozygousRecessiveOrganism(z) & For(x,z)) -> (Of(x,fifteenth(x) | Of(x,fifth(x,z))))", "all x y.((HysterozygousDistantOrganism(x) & HomozygousRecessiveOrganism(y) & Crossing(x,y)) -> (CausesOffspringToBeDistantOrRecessive(x) & (HyperzygousDominantOrganism(x) & 50%Probability(x))))", "all x y.((SherozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> (Distinct(x) | Recessive(x))))", "all x y.((ScrollingHysterozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> (DisruptiveOrRecessiveOffspring(x) | Prestigious(y)))", "all x y.((Crossing(x,y) & HeterozygousDominatingOrganism(y) & RecessiveOrganism(y)) -> (CausesOffspring(x,y) & (Disruptive(y) | Recessive(y))))", "all x y z.((Striking(x,y) & HeterozygousDominantOrganism(z) & RecessiveOrganism(y)) -> (An Offspring(x,z) & (Distinct(z) | Recessive(z) & 50% Probability(z))))", "all x y.((MoveredOrganism(x) & HomozygousRecessiveOrganism(y) & Crosses(x,y)) -> (DisruptorOfOffspring(y,50%) | RecessiveOfOffspring(y,50%)))", "all x y.((Crossing(x,y) & heterozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> ((Offspring(x,y) & (Dominant(y) | Recessive(y)) | 50%Probability(y))))", "all x y.((Crossing(x,y) & (HyperzygousDominantOrganism(y) | HomozygousRecessiveOrganism(y))) -> (DominantOrRecessive(y)))", "all x y z.((HydrogousDamningOrganism(x) & HomozygousRecessiveOrganism(y) & Crossing(x,y)) -> (Buoyable(z) | Recessive(z) & 50%Probability(z)))", "all x y z.((RecessiveOrganism(x) & HeterozygousDominantOrganism(y) & RecessiveOrganism(z)) -> (Crosses(x,y) & (Dominant(y) | Recessive(y))))", "all x y.((HeterozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> (Following(x,y) | RecessiveOrganism(x,y)))", "all x y.((Crossing(x,y) & HomozygousDisruptiveOrganism(x)) -> (Shooting(x,y) | Hovering(x,y)))"]}
{"id": "entailmentbank_validation_672", "nl": "the offspring will have either dominant red flowers or recessive white flowers with either of 50% probability.", "fol": "", "prediction": ["all x.(Offspring(x) -> (TrumpetRed(x) | RespirativeWhite(x)) & (DominantRed(x) | RespirantWhite(x)) & (50%) Probability(x) | 50% Probability(x)))))", "all x.(Offspring(x) -> (DistinctRedFlowers(x) | RecessiveWhiteFlowers(x)))", "all x.(Offspring(x) -> ((DistinctRedFlowers(x) ou ResponsiveWhiteFlowers(x)) | (DominantRedFlowers(x) & FrequentRecessiveWhiteFlowers(x))))", "all x.(Offspring(x) -> (DominantRedFlowers(x) | ResesciveWhiteFlowers(x)))", "all x.(Offspring(x) -> ((DistinctRedFlowers(x) | ResistiveWhiteFlowers(x)) & ((DistinctRedFlowers(x) & 50% Probability(x)) | (RecessiveWhiteFlowers(x) & 50% Probability(x)))))", "all x y.((Offspring(x) & (DistinctRedFlowers(y) | ResponsiveWhiteFlowers(y))) -> (Has(x,y) = 50%Probability(x)))", "all x.(Offspring(x) -> (DistinctRedFlowers(x) | ResistiveWhiteFlowers(x)))", "all x.(Offspring(x) -> ((DominantRedFlowers(x) | RecessiveWhiteFlowers(x)) & (FiftyProbability(x) | 50%Probability(x))))", "all x y.(Sixty(x) -> (DominantRedFlowers(x) | ResponsiveWhiteFlowers(x)))", "all x.(Offspring(x) -> (Has(x,RedFlowers) | Has(x,RecessiveWhiteFlowers) & PossibleProbability(x,50%)))", "all x.(Offspring(x) -> ((DistinctRedFlowers(x) | RespiratoryWhiteFlowers(x)) & (HasFiftyProbability(x) | HasFiftyFiftyProbability(x))))", "all x.(Offspring(x) -> ((DominantRedFlowers(x) | ResistiveWhiteFlowers(x)) & With(x,50%)))", "all x.(Offspring(x) -> ((DominantRedFlowers(x) | RecessiveWhiteFlowers(x)) & (50PercentProbability(x) | 50PercentProbability(x))))", "all x.(Offspring(x) -> ((DistinctRedFlowers(x) | RecessiveWhiteFlowers(x)) & -(DominantRedFlowers(x) | RecessiveWhiteFlowers(x)))))", "all x.(Offspring(x) -> ((DistantRedFlowers(x) | ResistiveWhiteFlowers(x))))", "all x.(Offspring(x) -> ((DescendantRedFlowers(x) | ResecutiveWhiteFlowers(x)) & (FamilyProbability(x,Fifty) | -FamilyProbability(x,Fifty))))"]}
{"id": "entailmentbank_validation_673", "nl": "each parent carries one sickle cell allele.", "fol": "", "prediction": ["all x.(Parent(x) -> CarriesSilentCellAllele(x))", "all x.(Parent(x) -> CarriesSickleCellAllele(x))", "all x.(Parent(x) -> CarriesSickleCellAllele(x))", "all x.(Parent(x) -> HasSickleCellAllele(x))", "all x.(Parent(x) -> CarriesOneSilentCellAllele(x))", "all x.(Parent(x) -> HasSilentCellAllele(x))", "all x.(Parent(x) -> CarryOneSickleCellAllele(x))", "all x.((Parent(x) & CarriesSickleCell(x)) -> CarriesSilentCellAllele(x))", "all x y.(PassesSickleCellAllele(x) -> Carries(y))", "all x y.((Parent(x) & Parent(y)) -> CarriesOneSilentCellAllele(x,y))", "all x.(Parent(x) -> CarriesSilentCellAllele(x))", "all x.(Parent(x) -> CarriesOneSickleCellAllele(x))", "all x.(Purse(x) -> CarriesSickleCellAllele(x))", "all x y z.((Parent(x) & SickleCell(y) & Allele(z)) -> Carries(x,y,z))", "all x y.((Parent(x) & SickleCellAllele(x)) -> Carries(x,y))", "all x.(Parent(x) -> CarriesSickleCell(x))"]}
{"id": "entailmentbank_validation_674", "nl": "sickle cell anemia is a recessive trait in human.", "fol": "", "prediction": ["all x.(SickleCellAnemia(x) -> RecessiveTrait(x))", "all x.(SickleCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x.(SickleCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x.(SickleCellAnemia(x) -> RecessiveTrait(x))", "all x.(SilentCellAnemia(x) -> RecessiveTrait(x))", "all x.(SickleCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x.(SillleCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x.(SickleCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x.(SickleCellAnemia(x) -> RecessiveTrait(x))", "all x.(SickleCellAnemia(x) -> RecessiveTrait(x))", "all x.(SickleCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x.(SickleCellAnemia(x) -> RessiveTrait(x))", "all x.(SilentCellAnemia(x) -> RecessiveTreatment(x,Human))", "all x.(SickleCellAnemia(x) -> RecessiveTrait(x))", "all x.(SickleCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x.(SickleCellAnemia(x) -> RecessiveTraitInHuman(x))"]}
{"id": "entailmentbank_validation_675", "nl": "each parent has one dominant gene and a recessive gene for sickle cell anemia.", "fol": "", "prediction": ["all x y.((Parent(x) & Parent(y)) -> (DominantGene(x) & RecessiveGene(x) & ForSickleCellAnemia(x)))", "all x y z.((Parent(x) & DominantGene(y) & RecessiveGene(z)) -> Has(x,y,z))", "all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x y.((Parent(x) & Parent(y)) -> (DominantGene(x,y) & ResponsiveGene(x,y)))", "all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x) & ForSilentCellAnemia(x)))", "all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x y z.((Parent(x) & Parent(y) & DominantGene(z) & Has(x,z,y)) -> SickleCellAnemiaRecessiveGene(y))", "all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x y z.((Parent(x) & Parent(y) & Parent(z)) -> (DominantGene(x,y) & ResusciveGene(z) & ForSickleCellAnemia(x,z)))", "all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(Parent(x) -> (HasDominantGene(x,SickleCellAnemia) & HasRecessiveGene(x,SickleCellAnemia)))", "all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x) & ForSickleCellAnemia(x)))", "all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))"]}
{"id": "entailmentbank_validation_676", "nl": "heterozygous dominant organisms have one dominant gene and one recessive gene.", "fol": "", "prediction": ["all x.((HeterozygousDominantOrganism(x) & HasDominantGene(x,2) & HasRecessiveGene(x,1)) -> HeterozygousDominantOrganism(x))", "all x.((Organism(x) & HeterozygousFocused(x)) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(DominantOrganism(x) -> (Hygrozygous(x) & HasDominantGene(x) & HasRecessiveGene(x)))", "all x.((Hybrid(x) & Homozygous(x)) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HeterozygousDistantOrganism(x) -> (HasPerformance(x,1) & HasRecessiveGene(x,2)))", "all x.(HybridObstacleOfDistantOrganisms(x) -> (HasDominatingGene(x) & HasRecessiveGene(x)))", "all x.((HybridousDominantOrganism(x) & HasDominantGene(x) & HasRecessiveGene(x)) -> H\u00e9t\u00e9rozygousDominantOrganism(x))", "all x.((HydrogousDominatingOrganism(x) & OneDominantGene(x) & OneRecessiveGene(x)) -> HeterozogousOverdominantOrganism(x))", "all x.(HeterozygousDominantOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HomozygousDominantOrganism(x) -> (HasOneDominantGene(x) & HasOneRecessiveGene(x)))", "all x.(HeterozygousDominantOrganism(x) -> (exists y.(DominantGene(y) & Has(x,y))) & exists z.(RecessiveGene(z) & Has(x,z)))))", "all x.(HomozygousDominantOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HeterozygoticDominantOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HeterozygousDominantOrganism(x) -> (exists y.(DominantGene(y) & Has(x,y))) | exists z.(RecessiveGene(z) & Has(x,z)))))", "all x.(HomozygousDominantOrganism(x) -> (OneDominantGene(x) & OneRecessiveGene(x)))", "all x.(DuboseOrganism(x) -> (exists y.(DropidGene(y) & Has(x,y))))"]}
{"id": "entailmentbank_validation_677", "nl": "both parents are heterozygous dominant for sickle cell anemia.", "fol": "", "prediction": ["all x.((Parent(x) & HeterozygousDominant(x)) -> SickleCellAnemia(x))", "(HeterozygousDistinctForSickleCellAnemia(p) & DependentForSickleCellInitial(p))", "all x y.((Parent(x) & Parent(y)) -> HeterozygousDominantOfSickleCellAnemia(x,y))", "all x.(Heterozygous(x) -> SchickleCellAnemia(x))", "(Hysterzygous(parent) & SickleCellAnemia(parent))", "all x y.((Parent(x) & Parent(y) & HeterozygousDominant(y,SickleCellAnemia)) -> Predominant(x,y))", "all x.((Parent(x) & HeterozygousDominantForSickleCellAnemia(x)) -> Heterozygous(x))", "both parents are HeterozygousHotelygousDisruptiveForSilentCellAnemia(x)", "all x.((Parent(x) & SpottedForSilentCellAnemia(x)) -> HeterozygousDictativeForSickleCellAnemia(x))", "all x y.((Parent(x) & Parent(y) & StomachAnemia(y)) -> HeterozygousDuodentForSickleCellAnemia(x,y))", "all x.(SilentCellAnemia(x) -> (HydrazygousDominant(x) & HeterozygousDominant(x,SickleCellAnemia)))", "all x.((Parent(x) & HeterozygousDisruptiveForSickleCellAnemia(x)) -> (HeterozygousDisruptiveForSickleCellAnemia(x)))", "exists x.(Parent(x) & DiffusiveForSickleCellAnemia(x))", "all x.(HistozygousDominantForSickleCellAnemia(x) -> Parent(x))", "all x y.((Parent(x) & Parent(y)) -> HeterozygousDominant(x,y))", "all x.((Parent(x) & HeterozygousDominantForSickleCellAnemia(x)) -> BothParentsDominantForSilentCellAnemia(x))"]}
{"id": "entailmentbank_validation_678", "nl": "if a heterozygous dominant organism is crossed with a heterozygous dominant organism, then the offspring will have a 25% probability of being homozygous recessive.", "fol": "", "prediction": ["all x y.((HeterozygousDistantOrganism(x) & CrossedWith(x,y) & HomozygousDistantOrganism(y)) -> HasProbabilityOfHomozygousRecessive(x,y))", "all x y z.((HydrozygousDominantOrganism(x) & CrossedWith(x,y) & HeterozygousDominantOrganism(x)) -> OffspringProbability(x,z))", "all x y.((HoratigousDistantOrganism(x) & Crossed(x,y) & HeterozygousDominantOrganism(y)) -> HasMoreProbabilityOfHomosygousRecessive(x,y))", "all x.((HeterozygousDominantOrganism(x) & CrossedWithHterozygousDominantOrganism(x)) -> 25.5%ProbabilityOfHygousRecessiveOrganism(x))", "all x y.((HeterozygousDominantOrganism(x) & Crossed(x,y)) -> (HomozygousRecessiveOffspring(x) & 25%ProbabilityOf(x,y)))", "all x y z w.((HarzygousDominantOrganism(x) & HeterozygousDominantOrganism(y) & Offspring(z) & CrossedThan(y,z)) -> 25%ProbabilityOfHomozygousRecessive(z,x))", "all x y z.((HydrogousDominion(x) & HydrogousDominion(y) & Offspring(z) & Crossed(x,y)) -> (HydrogousRecessive(z) | 25% probability(z)))", "all x y.((Organism(x) & TheosophicRoot(y) & CrossedWithOrganism(x,y)) -> (HydrozygousDescentOrganism(x) & 25%PercentProbability(x,y)))", "all x y.((HydrozygousDominantOrganism(x) & CrossedWith(x,y)) -> (HydrozygousDominantOrganism(x) & 25%ProbabilityOfHomozygousRecessive(y)))", "all x y.((HeterozygousDominantOrganism(x) & Crossed(x,y) & HeterozygousDominantOrganism(y,x)) -> HomozygousRecessiveOffspring(x,y))", "all x y.((HydrozygousDominantOrganism(x) & Crossed(x,y) & HeterozygousDominantOrganism(y)) -> 25%ProbabilityOfHobozygousRecessive(x))", "all x y z.(HeterozygousDominantOrganism(x) & Crossed(x,y) & HeterozygousDominantOrganism(z)) -> Has(x,z) & 25%ProbabilityOfHomozygousRecessive(x))", "all x y.((HotterzygousDominantOrganism(x) & Crossed(x,y) & HeterozygousDominantOrganism(y)) -> HasMagnitudeOfRecessive(x,25,000))", "all x.((HeterozygousDominantOrganism(x) & CrossedCuz(x) & HeterozygousDominantOrganism(x)) -> 25%ProbabilityOfHomozygousRecessive(x))", "all x y.((HothomozygousDominantOrganism(x) & Crossed(x,y)) -> (HygrozygousDominantOrganism(x,y) & 25%ProbabilityOfHomozygousRecessive(x)))", "all x y.((HostozygousDistantOrganism(x) & Crossed(x,y) & HomozygousDistantOrganism(x)) -> Has25.8%ProbabilityOfRecessive(x))"]}
{"id": "entailmentbank_validation_679", "nl": "the offspring of heterozygous dominant parents will have 25% probability of being homozygous recessive for sickle cell anemia.", "fol": "", "prediction": ["all x.((Offspring(x) & HeterozygousDuplicateParents(x)) -> -65A ProbabilityOfHomozygousRecessive(x))", "all x.((Offspring(x) & HomozygousDistantParents(x) & Hs(x,250)) -> HasMagnitudeOfRecessiveSillleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDuplicateParents(x)) -> 25%ProbabilityOfSickleCellAnemia(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfHomozygousRecessive(x) & SickleCellAnemia(x)) -> HomozygousRecessive(x))", "all x y.((Offspring(x) & HeterozygousDominantParents(y) & HyperzygousDisruptiveParents(y,x)) -> HsmartnessForSickleCellAnemia(x,y))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfHomozygousRecessiveForSickleCellAnemia(x)) -> HomozygousRecessiveForSickleCellAnemia(x))", "all x.((Offspring(x) & HomozygousDominantParents(x)) -> 25%ProbabilityOfSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParent(x) & RecessiveForSickleCellAnemia(x)) -> 25%Probability(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> HasMarginProbability(x,25))", "all x.((Offspring(x) & PrevalentHomozygousDominantParents(x)) -> Stamina(x,25))", "all x y.((Offspring(x) & HeterozygousDominantParents(y)) -> HasMaximumProbabilityOfHomozygousRecessiveCellAnemia(x,y))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfHomozygousRecessiveSickleCellAnemia(x)) -> -HeterozygousRecessiveSickleCellAnemia(x))", "all x.((OffspringOfHiggozygousDominantParents(x) & PositivePerformanceFollowingSickleCellAnemia(x)) -> 25%HomozygousRecessive(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfHomozygousRecessive(x)) -> Stem CellAnemia(x))", "all x y.((Offspring(x) & HomozygousDominantParents(y)) -> HasProbability(x,y))", "all x.((Offspring(x) & HomozygousDominantParents(x)) -> 30%ProbabilityToSickleCellAnemia(x))"]}
{"id": "entailmentbank_validation_680", "nl": "homozygous recessive organisms will show the recessive trait.", "fol": "", "prediction": ["all x.((Homozygous(x) & RecessiveOrganism(x)) -> ShowRecessiveTrait(x))", "all x.((HomozygousRecessiveOrganism(x) & ShowsRecessiveTrait(x)) -> Shows(x,RecessiveOrganism(x))", "all x.(HomozygousRecessiveOrganism(x) -> ShowsRecessiveTrait(x))", "all x.((Homozygous(x) & RecessiveOrganism(x)) -> ShowsRecessiveTrait(x))", "all x.(HomozygousRecessiveOrganism(x) -> ShowsRecessiveTrait(x))", "all x.(His(x) -> RessiveTrait(x))", "all x y.((HomozygousRecessiveOrganism(x) & Homozygose(y) & ShowsRecessiveTrait(x,y)) -> ShowsRecessiveTrait(x,y))", "all x.(HomozygousRecessiveOrganism(x) -> ShowsRecessiveTrait(x))", "all x.((HomozygousRecessiveOrganism(x) -> ShowsRecessiveTrait(x))", "all x.((HomozygousRecessiveOrganism(x) & ShowsRecessiveTrait(x)) -> HomozygousRecessiveOrganism(x))", "all x.(HybridOrganism(x) -> ShowRecessiveTrait(x))", "all x.(HybridOxygenElectron(x) -> ShowsRecessiveTrait(x))", "all x.((Organism(x) & Homozygous(x)) -> HasRecessiveTreat(x))", "all x.(HomozygousRecessiveOrganism(x) -> ShowsRecessiveTrait(x))", "all x.(HomozygousRecessiveOrganism(x) -> ShowGrecessiveTrait(x))", "all x.((Organism(x) & HomozygousOrganism(x)) -> ShowsRecessiveTreatment(x))"]}
{"id": "entailmentbank_validation_681", "nl": "the offspring of heterozygous dominant parents will have 25% probability of having sickle cell anemia.", "fol": "", "prediction": ["all x.((Offspring(x) & HeterozygousDominantParents(x)) -> WithHysteresis(x,25))", "all x y.((Offspring(x) & Homozyge(x) & DogmaticParent(y)) -> ProbabilityWithSickleCellAnemia(x,25))", "all x.((OffspringOfHeterozygousDominantParents(x) & HasSickleCellAnemia(x,25)) -> HasSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> 25PercentSickleCellAnemiaProbability(x))", "all x.((Offspring(x) & heterozygousDominantParents(x)) -> 50%ProbabilityOfSilentCellAnemia(x))", "all x y.((Offspring(x) & HomozygousDominantParent(y) & HeterozygousDominant(x,y)) -> 25%ProbabilityOfSickleCellAnemia(x))", "all x.((Offspring(x) & HybridDominantParents(x)) -> 50%ProbabilityOfSickleCellAnemia(x))", "all x.((OffspringOfHomozygousD dominantParents(x) & HasSickleCellAnemia(x,4)) -> 25%Popularity(x))", "all x.((OffspringStormHeterozygousDominantParents(x) & SexualAnnemia(x,25)) -> HasAllergy(x,25))", "all x.((Offspring(x) & OutspringOfHeterozygousPooral(x)) -> (SickleCellAnemia(x) & Probability(x,25)))", "all x y.((Offspring(x) & HeterozygousDominantParents(y,x) & HeterozygousDominantParents(x)) -> HasMagnitudeOfSickleCellAnemia(x,25))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> 25%ProbabilityOfSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParent(x)) -> 25%ProbabilityOfSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> HasSilentCellAnemia(x,25))", "all x.(HygrozygousDominantParents(x) -> AllowsSickleCellAnemia(x,25))", "all x y.((Offspring(x) & HeterozygousDominantParents(y) & HeterozygousDominantParents(x,y)) -> Has25.5%PossibilityOfSilkleCellAnemia(x))"]}
{"id": "entailmentbank_validation_682", "nl": "one in four is the same as 25%.", "fol": "", "prediction": ["all x.((OneInFour(x) & Same(x,25%)) -> Same(x,250%))", "all x.((OneInFour(x) & SameAt25(x)) -> SameAt25(x))", "all x.(OneInFour(x) -> SameAt25Percent(x))", "all x.((OneInFour(x) & SameAt25(x)) -> SameAt25(x))", "all x y.((Equal(x,y) & OneInFour(y)) -> 25%(y))", "all x y.((InFour(x) & SameAverage(y,25)) -> 25%Average(x))", "all x.(FourInFour(x) -> SameAtMark(x,25%))", "all x.(OneInFour(x) -> SameAt25(x))", "all x.(InFour(x) -> SameAlmost25(x))", "all x.((OneInFour(x) & SameAt25(x)) -> SameAt25(x))", "all x.((OneInFour(x) & 25%(x)) -> Same(x))", "all x.((InFour(x) & SameAt25(x)) -> SameSameAt25(x))", "all x y.((InFour(x) & OneInFour(y)) -> SameAt(x,25))", "all x.((OneInFour(x) & SameAtMargin(x)) -> SameAt25(x))", "all x.(OneInFour(x) -> SameAt25(x))", "all x.(OneInFour(x) -> SameWith25.5%(x))"]}
{"id": "entailmentbank_validation_683", "nl": "one in four of the offspring of heterozygous dominant parents will have sickle cell anemia.", "fol": "", "prediction": ["all x y z.((Offspring(x) & OverwhelmingParent(y) & Heterozygous(z) & Homozygous(z)) -> HasSickleCellAnemia(x,y,z))", "all x.((OffspringThanTheHomozygousDominantParents(x) & HeterozygousPathers(x)) -> WithSickleCellAnemia(x))", "all x y z.((Offspring(x,y) & HistozygousDominantParent(z) & Offspring(y,z)) -> HasSilverCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> HungryCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> HasSickleCellAnemia(x))", "all x.(SherzlinAnemia(x) -> (OffspringHygrozygousDominantParents(x) & OfOffspringSixLungVariety(x)))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> SickleCellAnemia(x))", "all x.((OffspringAnaemia(x) & HeterozygousDominantParent(x)) -> HasSilentCellAngelIssue(x))", "all x y.((Offspring(x) & HeterozygousDominantParent(y)) -> HasSilentCellAnemia(x,y))", "all x.((Offspring(x) & HomozygousDominantParents(x)) -> HasSickleCellAnemia(x))", "all x y.((Offspring(x,y) & HeterozygousDominantParents(y)) -> HasSickleCellAnemia(x,y))", "all x.((Offspring(x) & HeterozygousDominantParent(x)) -> HasSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParent(x)) -> SickleCellAnemia(x))", "all x y.((Offspring(x) & HeterozygousDestinant(y) & Offspring(x,x)) -> WillHaveSickleCellAnemia(x))", "all x.(HysterozygousDescendantParents(x) -> HasSickleCellAnemia(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & OnionInFour(x)) -> WillHaveSickleCellAnemia(x))"]}
{"id": "entailmentbank_validation_684", "nl": "a plant is a kind of organism.", "fol": "", "prediction": ["all x.(Plant(x) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x.exists y.(Plant(x) & Organism(y) & BiologicalType(x,y))", "exists x.(Plant(x) & Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x.(Plant(x) -> Organism(x))"]}
{"id": "entailmentbank_validation_685", "nl": "flower is a part of a plant.", "fol": "", "prediction": ["all x.(Flower(x) -> PartOfPlant(x))", "all x y.((Flower(x) & Plant(y)) -> PartOf(x,y))", "all x.(Flower(x) -> PartOfPlant(x))", "all x.(Flower(x) -> PartOfPlant(x))", "all x.(Flower(x) -> PartOfPlant(x))", "all x.(Flower(x) -> PartOfPlant(x))", "all x.(Flower(x) -> PartOfPlant(x))", "all x.(Flower(x) -> PartOfPlant(x))", "all x y.((Flower(x) & Plant(y)) -> PartOf(x,y))", "all x y.((Flower(x) & Plant(y)) -> PartOf(x,y))", "all x.(Flower(x) -> PartOfPlant(x))", "all x.(Flower(x) -> PartOfPlant(x))", "all x.(Flower(x) -> PartOfPlant(x))", "all x.(Flower(x) -> PartOfPlant(x))", "all x.(Flower(x) -> PartOfPlant(x))", "all x.(Flower(x) -> PartOfPlant(x))"]}
{"id": "entailmentbank_validation_686", "nl": "the colors of parts of an organism are inherited characteristics.", "fol": "", "prediction": ["all x y.((Organism(x) & Color(y)) -> inheritedCharacteristics(x))", "all x.((Color(x) & Organ(x)) -> ErasedCharacteristics(x))", "all x.((Color(x) & PartOfOrganism(x)) -> inheritedCharacteristics(x))", "all x y.((Part(x) & Color(y)) -> LegacyCharacteristics(x,y))", "all x y z.((Color(x) & Part(y) & Organism(z)) -> ErinheritedCharacteristics(x,y,z))", "all x.((Piece(x) & ColorsOfOrganism(x)) -> ErasedCharacteristics(x))", "all x.((OrganismPart(x) & Color(x)) -> ErasonedCharacteristics(x))", "all x y.((Organism(x) & Color(y) & IsPartOf(x,y)) -> inheritedCharacteristics(x))", "all x.((Colors(x) & Organ(x)) -> ErasedCharacteristics(x))", "all x.((PiecesOfOrganism(x) & HasCarnamics(x)) -> HasCarnamics(x))", "all x.((Color(x) & BodyPart(x)) -> inheritedCharacteristics(x))", "all x.((Colors(x) & PartOfOrganism(x)) -> LegacyCharacteristics(x))", "all x.((PiecesOfOrganism(x) & Color(x)) -> HistorianCharacteristics(x))", "all x.((Colors(x,organism) & PartOf(x,organisme)) -> ErasedCharacteristics(x))", "all x.((Organism(x) & Colors(x)) -> GenearedCharacteristics(x))", "all x.((Color(x) | PartOfOrganism(x)) -> ErasedCharacteristics(x))"]}
{"id": "entailmentbank_validation_687", "nl": "the color of plants' flowers is a kind of inherited characteristic.", "fol": "", "prediction": ["all x y.((Flowering(x) & Plant(y) & Flowers(x,y)) -> HasHeritageCharacteristic(x))", "all x.((PetalColor(x) & Plant(x)) -> ErasedCharacteristic(x))", "all x.((PopularColor(x) & PlantsFlowers(x)) -> ErasedCharacteristic(x))", "all x y.((PlantFlowerColor(x) & Plant(y)) -> IinheritedCharacteristic(x))", "all x y z.((Habitat(x) & Flower(y) & Plant(z) & Color(x,y,z)) -> IsHereditary(x))", "all x y.((Plant(x) & Flower(y)) -> (Color(x,y) | Pathogen(x,y)))", "all x y.((Pest'sFlower(x) & Plant(y)) -> HasHazard(x))", "all x.((Plant(x) & Flowers(x)) -> ErasedCharacteristic(x))", "all x.((Wildlife(x) & Plant(y)) -> HadOrinheritedCharacteristic(x,y))", "all x y.((Plant(x) & Flower(y)) -> (Color(x,y) & EmbracedCharacteristic(x)))", "all x y.(((Plant(x) & Flower(y)) -> ColorEstablishedCharacteristic(x,y))", "all x.((ColourOfPlantsFlowers(x) & inheritedCharacteristic(x)) -> InheritableCharacteristic(x))", "all x y.((Flower(x) & Plant(y)) -> \"ColorOf(x,y)\")", "all x y.((Plant(x) & Flower(y)) -> Color(x,y))", "all x y z.((Flowering(x) & Plant(y) & Flower(z) & Color(x,y)) -> GenealogicalCharacteristic(x,z))", "all x y.((Place(x) & Flower(y)) -> ColorOf(x,y))"]}
{"id": "entailmentbank_validation_688", "nl": "inheriting is when an inherited characteristic is passed down from parent to offspring by genetics / dna.", "fol": "", "prediction": ["all x y.((Eleving(x) & Parent(y) & Offspring(y) & GeneticsDna(x)) -> PassedDown(x,y))", "all x y z.((HeartedCharacteristics(x) & Parent(y) & Offspring(z)) -> PassedBy(x,y,z))", "all x y.((Heritage(x) & ParentInOffspring(y)) -> PassedByGeneticsOrDna(x,y))", "all x y z.((EarlyCaracteristic(x) & Parent(y) & Offspring(z)) -> PassedThroughGeneticsDna(x,y,z))", "all x y z.((Heritance(x) & Generics(y) & Dna(z)) -> (PassedDown(x,y,z) & FromParentToOffspring(x,y,z)))", "all x y z.((Inheriting(x) & Parent(y) & Offspring(z)) -> (HasEarnedCharacteristic(x,y,z) & GeneticsDna(x)))", "all x y z.((ElevingCharacteristic(x) & Parent(y) & Offspring(z) & Genetics/Dna(y)) -> passedBy(x,y,z))", "all x y.((Inheriting(x) & Parent(y) & Offspring(y)) -> PassedBy(x,genetics & dna))", "all x.((Earning(x) & (Parent(x) | Offspring(x))) -> PassedDeeperFromTo(x,gynetics,dna))", "all x y.((Inheriting(x) & Parent(y) & Offspring(z)) -> PassedDownByGeneticsDna(x,y,z))", "all x y.((Inheriting(x) & Parent(y) & Offspring(y)) -> PassedDownByGeneticalsDna(x,y))", "all x.(Earning(x) -> (inheritedCharacteristicSeason(x) & PassedByGenetics(x,dna)))", "all x y.((AllegedCharacteristic(x) & Parent(y) & Offspring(z)) -> PassedDownByGenetics(x,y,z))", "all x y.((Inheriting(x) & Parent(y) & Offspring(y) & Genetics(z) & Dna(x)) -> PassesCaracteristic(x,y,z))", "all x.(Inheriting(x) -> (PassedDownByGeneticsOfDna(x) & FromParentToOffspring(x)))", "all x y.((Heritage(x) & RemainingCharacteristic(y)) -> (PassedDownFromParentToOffspring(x,y) & GeneticsDna(x)))"]}
{"id": "entailmentbank_validation_689", "nl": "plants offspring can inherit the flower color from their parents.", "fol": "", "prediction": ["all x y.((Plant(x) & PlantOffspring(y)) -> (InheritsFlowerColorFromParents(y) | InheritsFlowerColor(y)))", "all x y.((Plant(x) & Offspring(x)) -> (HeritsFlowerColor(x,y) & FromParents(x,y)))", "all x y.((Plant(x) & Garden(y) & Parent(y)) -> HasToHelveFloweredColor(x,y))", "all x y.((PlantsOffspring(x) & Parent(y)) -> HebesFlowerColorFrom(x,y))", "all x y.((PlantOffspring(x) & Parent(y)) -> HearsFlourColor(x,y))", "all x y.((Plant(x) & Offspring(y)) -> HasEmbrace(y,z))", "all x y.((Plant(x) & FlowerColor(y)) -> HasBirth(x,y))", "all x y.((Plant(x) & Offspring(y)) -> HasFlowerColor(x,y))", "all x.(Pot(x) -> EmbracesFlowerColorFromParents(x))", "all x y.((Plant(x) & Flower(y)) -> EmbracesColor(x,y))", "all x y.((PlantOffspring(x) & Plant(y)) -> (InheritsFlowerColorFromParent(x,y)))", "all x.((PlantsOffspring(x) & Parent(x)) -> WillLevetFlowerColor(x,y))", "all x.(Offspring(x) -> (Plant(x) & inheritsFlourisheColor(x)))", "all x y.((Plant(x) & Offspring(y)) -> CanHeritFlowerColor(x,y))", "all x y.((Plant(x) & Offspring(y) & Parent(z)) -> CouldHearseFlowerColor(y,z))", "all x y z.((Plant(x) & Offspring(y) & Flower(z)) -> (Sheeps(x,y,z) & Has(y,z)))"]}
{"id": "entailmentbank_validation_690", "nl": "yellow is a kind of color.", "fol": "", "prediction": ["all x.(Yellow(x) -> Color(x))", "all x.(Yellow(x) -> Color(x))", "all x.(Yellow(x) -> Color(x))", "all x.(Yellow(x) -> Color(x))", "all x.(Yellow(x) -> Color(x))", "all x.(Yellow(x) -> Color(x))", "all x.(Yellow(x) -> Color(x))", "all x.((Yellow(x) & Color(x)) -> Color(x))", "all x.((Yellow(x) & Color(x)) -> Color(x))", "all x.(Yellow(x) -> Color(x))", "all x.(Yellow(x) -> Color(x))", "all x.(Yellow(x) -> Color(x))", "all x.((Yellow(x) & Color(x)) -> Color(x))", "all x.(Yellow(x) -> Color(x))", "all x.(Yellow(x) -> Color(x))", "all x.(Yellow(x) -> Color(x))"]}
{"id": "entailmentbank_validation_691", "nl": "the plant offspring has yellow flowers.", "fol": "", "prediction": ["all x.((PlantOffspring(x) & YellowFlowers(x)) -> Has(x))", "all x.(PlantOffspring(x) -> YellowFlowers(x))", "all x.((PlantOffspring(x) & YellowFlowers(x)) -> YellowFlowers(x))", "all x.((PlantOffspring(x) & YellowFlowers(x)) -> Has(x,y))", "all x.(PlantOffspring(x) -> HasYellowFlowers(x))", "all x.(PestOfspring(x) -> HasYellowFlowers(x))", "all x.(PlantOffspring(x) -> HasYellowFlowers(x))", "all x.(Tree(x) -> HasYellowFlowers(x))", "all x.((PlantOffspring(x) & YellowFlowers(x)) -> Has(x))", "all x.(PlantOffspring(x) -> HasYellowFlowers(x))", "all x.((PlantOffspring(x) & YellowFlowers(x)) -> Has(x,y))", "all x.(PlantOffspring(x) -> HasYellowFlowers(x))", "all x.(PlantOffspring(x) -> HasYellowFlowers(x))", "all x.((PlantOffspring(x) & YellowFlowers(x)) -> Has(x))", "all x.(PlantOffspring(x) -> HasYellowFlowers(x))", "all x.((PlantOffspring(x) & YellowFlowers(x)) -> Has(x,4))"]}
{"id": "entailmentbank_validation_692", "nl": "the parents of the plant are likely to have yellow flowers.", "fol": "", "prediction": ["all x.(Parent(x) -> YellowFlowers(x))", "all x.((PlantParents(x) & YellowFlowers(x)) -> LikelyHas(x,y))", "all x.((Plant(x) & Parent(x)) -> YellowFlowers(x))", "all x.((Parents(x) & Plant(x)) -> YellowFlowers(x))", "all x.(Parent(x) -> YellowFlower(x))", "all x.((Parent(x) & Plant(y) & HasYellowFlowers(x,y)) -> LikelyHasYellowFlowers(y))", "all x y.((Plant(x) & Parent(y)) -> YellowFlowers(x))", "all x.(SurseOfPlant(x) -> YellowFlowers(x))", "all x.((PlantParent(x) & YellowFlowers(x)) -> LikelyHas(x))", "all x.(ParentOfPlant(x) -> YellowFlowers(x))", "all x.(Parent(x) -> YellowFlowers(x))", "all x.(Parent(x) -> YellowFlowers(x))", "all x.((Parent(x) & Plant(x)) -> YellowFlowers(x))", "all x.(ParentsOfPlant(x) -> YellowFlower(x))", "all x y.((PlantParent(x) & Plant(y)) -> YellowFlowers(y))", "all x y z.((Plant(x) & Parent(y) & Flower(z)) -> HasYellow(y))"]}
{"id": "entailmentbank_validation_693", "nl": "a newly hatched sea turtle walks toward the ocean.", "fol": "", "prediction": ["all x.((NewlyHatched(x) & SeaTurtle(x)) -> WalksTowardsOcean(x))", "all x.(IncompletelyHatchedSeaTurtle(x) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & NewlyHatched(x)) -> WalksTowardsOcean(x))", "all x y z.((NewlyHatchedSeaTurtle(x) & Ocean(y) & Ocean(z) & WalksTowards(x,y)) -> SeaTurtle(x))", "all x.((RecentlyHatchedSealTurtle(x) & WalksTowardsOcean(x)) -> SeaTurtle(x))", "all x y z.((NewlyHatchedSeaTurtle(x) & Ocean(y) & SeaTurtle(z)) -> WalksTowards(x,y,z))", "all x y.((NewlyHatchedSeaTurtle(x) & Ocean(y)) -> WalksToward(x,y))", "all x y.((NewlyHaughtchedSeaTurtle(x) & Ocean(y)) -> WalksTowards(x,y))", "all x.((SeaTurtle(x) & EducatedOnOcean(x)) -> WalksToOcean(x))", "all x y.((NewlyHatched(x) & SeaTurtle(y)) -> WalksTowardsOcean(x,y))", "all x y.((NewlyHatched(x) & SeaTurtle(y) & Ocean(x)) -> WalksTowards(y,x))", "all x y.((SeaTurtle(x) & LocatedInOcean(x,y)) -> HasHatched(x))", "all x.((NewlyHatchedSeaTurtle(x) & Ocean(y)) -> WalksTowards(x,y))", "all x y.((RecentlyHatchedSeaTurtle(x) & Sea(y)) -> WalksTowardsOcean(x,y))", "all x.((NewlyHatchedSeaTurtle(x) & SeaTurtle(x)) -> WalksTowardsOcean(x))", "all x.((NewlyHatchedSeaTurtle(x) & WalksTowardsOcean(x)) -> SeaTurtle(x))"]}
{"id": "entailmentbank_validation_694", "nl": "if an animal hatches from an egg then that animal is born.", "fol": "", "prediction": ["all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> LivedIn(x,y))", "all x.(HacksFromEgg(x) -> Born(x))", "all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x))", "all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x))", "all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x,y))", "all x.((Animal(x) & HatchesFromEgg(x)) -> Born(x))", "- exists x y.(Animal(x) & Egg(y) & HatchesFrom(x,y))", "all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x))", "all x.((Animal(x) & HatchesFromEgg(x)) -> Born(x))", "all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x))", "all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x))", "all x y.(IfAnimalHautesFromEgg(x,y) -> Born(y))", "all x.((Animal(x) & HatchesFromEgg(x)) -> Born(x))", "all x.((Animal(x) & HatchesFromEgg(x)) -> Born(x))", "all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x,y))", "all x.((Animal(x) & HatchesFromEgg(x)) -> Born(x))"]}
{"id": "entailmentbank_validation_695", "nl": "a sea turtle that is just born walks toward the ocean.", "fol": "", "prediction": ["all x.((SeaTurtle(x) & JustBorn(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardOcean(x))", "all x.((SeeTurtle(x) & JustBirth(x)) -> WalksAtOcean(x))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & JustBorn(x)) -> WalkersTowardsOcean(x))", "all x.((SeaTurtle(x) & Born(x)) -> WalksTowardsOcean(x))", "all x y.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(y))", "all x.((SeaTurtle(x) & Born(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksAttooTowardsOcean(x))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x))"]}
{"id": "entailmentbank_validation_696", "nl": "an animal knows how to do instinctive behaviors when it is born.", "fol": "", "prediction": ["all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x.(Official(x) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x y.((Animal(x) & Born(y)) -> KnowsHowToDoInstinctiveBehaviors(x,y))"]}
{"id": "entailmentbank_validation_697", "nl": "walking toward the ocean is sea turtles' instinct behavior.", "fol": "", "prediction": ["all x y z.((SeaTurtle(x) & Ocean(y) & Ocean(z) & WalkingTowards(x,y,z)) -> InstinctBehavior(x,y,z))", "all x.(WalkingTowardsOcean(x) -> SeaTurtleInstinctBehavior(x))", "all x y.((SeaTurtle(x) & Ocean(y)) -> InstinctBody(x,y))", "all x.(WalkingTowardsOcean(x) -> SeaTurtleInstinctBody(x))", "all x.(WalkingTowardOcean(x) -> SeaTurtleInstinctBehavior(x))", "all x.((WalkingTowardsOcean(x) & SeaTurtle(x)) -> InstinctBehavior(x))", "all x y.((SeaTurtle(x) & Ocean(y)) -> Instinct(x,y))", "all x.(WalkingTowardsOcean(x) -> SeaTurtleInstinct(x))", "all x.((WalkingTowardsOcean(x) & SeaTurtle(x)) -> InstinctBehavior(x))", "all x y.((WalkingTowardsOcean(x) & Ocean(y)) -> InstinctBehavior(x,y))", "all x.(WalkingTowardsOcean(x) -> SeaTurtleInstinctBehavior(x))", "all x.(WalkingTowardsOcean(x) -> SeaTurtleInstinct(x))", "all x y.((SeaTurtle(x) & Ocean(y)) -> InstinctBehavior(x,y))", "all x.(WalkingTowardsOcean(x) -> SeaTurtleInstinctBehavior(x))", "all x y.((SeaTurtle(x) & Ocean(y)) -> InstinctBehavior(x,y))", "all x.((WalkingTowardsOcean(x) & SeaTurtle(y)) -> InstinctBehavior(y))"]}
{"id": "entailmentbank_validation_698", "nl": "a chicken is a kind of bird.", "fol": "", "prediction": ["all x.(Chicken(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x.(Choine(x) -> Bird(x))"]}
{"id": "entailmentbank_validation_699", "nl": "a chick is a kind of young / baby chicken.", "fol": "", "prediction": ["all x.(Cicken(x) -> (YoungChild(x) | BabyChild(x)))", "all x.(Chick(x) -> (YoungChicken(x) | BabyChicken(x)))", "all x.(Chick(x) -> (Young(x) | Baby(x)))", "all x.(Chick(x) -> -> Young(x) & BabyChick(x))", "all x.(Chick(x) -> (YoungChick(x) & BabyChick(x)))", "all x.(Chick(x) -> (Young(x) & Baby(x)))", "all x.(Chick(x) -> (Young(x) | Baby(x)))", "all x.(Chick(x) -> (YoungChick(x) | BabyChick(x)))", "all x.(Chick(x) -> (YoungChick(x) | BabyChick(x)))", "all x y.((Chick(x) & YoungChild(y)) -> BabyChild(x))", "all x.(Chick(x) -> (YoungChick(x) | BabyChick(x)))", "all x.(Chick(x) -> (YoungChilk(x) & BabyChild(x)))", "exists x.(Chick(x) & Young(x) & Baby(x))", "all x.(Chick(x) -> (YoungChicken(x) | BabyChicken(x)))", "all x.(Chick(x) -> (YoungChick(x) | BabyChick(x)))", "all x.(Chick(x) -> (Year(x) | Baby(x)))"]}
{"id": "entailmentbank_validation_700", "nl": "a chick is a kind of baby bird.", "fol": "", "prediction": ["all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "all x.(CHICK(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))"]}
{"id": "entailmentbank_validation_701", "nl": "an example of an instinctive behavior is a baby bird pecking at its shell to hatch.", "fol": "", "prediction": ["all x.(BuyerBird(x) -> (PecksAtShell(x) & HatchesShell(x)))", "all x.(InstinctiveBehavior(x) -> (BabyBird(x) & PeckingAtShell(x) & Hatches(x)))", "all x.(InstinctiveBehavior(x) -> (BabyBird(x) & PecksAtShell(x) & Hatches(x)))", "all x y.((BabyBird(x) & Shell(y) & PecksAt(x,y)) -> InstinctiveBehavior(x,y))", "all x.((BabyBird(x) & PecksAtShell(x)) -> InstinctiveBehavior(x))", "all x.((BabyBird(x) & PecksAtShell(x) & HatchesShell(x)) -> InstinctiveBehavior(x))", "all x y.((BabyBird(x) & Shell(y) & PecksAt(x,y)) -> InstinctiveBehavior(x))", "all x.((BabyBird(x) & PecksAtShell(x)) -> InstinctiveBehavior(x))", "all x.((BabyBird(x) & PecksAtShell(x)) -> InstinctiveBehavior(x))", "all x.(InstinctiveBehavior(x) -> (BabyBirdPeckingAtShellToHatch(x)))", "all x.((BabyBird(x) & PeckingAtShelle(x) & Hatched(x)) -> InstinctiveBehavior(x))", "all x y.((Bird(x) & Baby(y) & PecksSillToHatch(y)) -> InstinctiveBehavior(x))", "all x.((BabyBird(x) & PeckingAtShell(x)) -> InstinctiveBehavior(x))", "all x y.((BabyBird(x) & Shell(y) & PockedAt(x,y)) -> InstinctiveBodies(x))", "all x.((Bird(x) & BabyPeckingAtShell(x)) -> InstinctiveBehavior(x))", "all x y.((Bird(x) & Baby(y) & PecksAtShell(x,y) & Hatches(y)) -> InstinctiveBehavior(x,y))"]}
{"id": "entailmentbank_validation_702", "nl": "a chick pecking at its shell to hatch is an example of an instictive behavior.", "fol": "", "prediction": ["all x y.((Chick(x) & Shell(y) & PecksAt(x,y)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShellToHatch(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksShell(x) & HatchesShell(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShellToHatch(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShell(x) & HatchesShell(x)) -> InstictiveBehavior(x))", "all x.(Chick(x) -> (PecksShellToHash(x) & InstictiveBehavior(x)))", "all x y.((Chick(x) & Shell(y) & PecksAt(x,y)) -> InstictiveBehavior(x))", "all x y.((Chick(x) & Shell(y) & PeckingAtSnake(x,y) & Hatch(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShell(x) & StupidBehavior(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShell(x) & Hatches(x)) -> InstictiveBody(x))", "all x.((Chick(x) & PecksAtShell(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShell(x) & Harvests(x)) -> InstictiveBehavior(x))", "all x y.((Chick(x) & Shell(y) & PecksToHatch(x,y)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShell(x) & Hatch(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShellToHatch(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShellToHatch(x)) -> InstictiveBehavior(x))"]}
{"id": "entailmentbank_validation_703", "nl": "receiving the recessive gene for a trait from each parent causes the offspring to have that recessive trait.", "fol": "", "prediction": ["all x.((Parent(x) & ReceivesRecessiveGene(x)) -> HasRecessiveTrait(x))", "all x.((RecessiveGene(x) -> DownplaysRecessiveTrait(x)))", "all x.(ReceivesRecessiveGene(x) -> HasRecessiveTrait(x))", "all x y z.((RecessiveGene(x) & ParentTrait(y) & ParentTrait(z) & RecessessiveTrait(y)) -> CausesOffspringToHaveRecessiveTrait(t,x,z))", "all x y.((Parent(x) & Parent(y) & RecessiveGene(x,y)) -> RecessiveTrait(x,y))", "all x y.((Parent(x) & Parent(y) & ReceivesRecessiveGeneForTrait(x,y)) -> CausesOffspringToHaveRecessiveTreat(x,y))", "all x.((RecessiveGene(x) & ParentTrait(x)) -> OffspringTrait(x))", "all x.(ReceivingRecessiveGene(x) -> ParentTax(x,offspringTat,recessiveTax))", "all x y.((Pastor(x) & Parent(y) & ReceivesRecessiveGene(x,y)) -> GeneCausesRecessiveTrait(x,y))", "all x y.((Parent(x) & Parent(y) & ReceivesRecessiveGene(x,y)) -> HasRecessiveTrait(x,Y))", "all x.((Parent(x) & ReceivingRecessiveGene(x)) -> RecessiveTrait(x))", "all x y.((Parent(x) & Parent(y) & ReceivesRecessiveGene(x,y)) -> HasRecessiveTrait(x,y))", "all x y.((ReceivingRecessiveGene(x) & ParentTot trait(y)) -> CausesOffspringToHaveRecessiveTrait(x,y))", "all x y z.((RecessiveGene(x) & ParentTrait(y,z)) -> RecessiveTraitForOffspring(y,z))", "all x y z.((RecessiveGene(x,y) & Trait(y) & Parent(z) & ReceivesRecessiveGene(x,y,z)) -> CausesOffspringToHaveRecessiveTrait(x,y,z))", "all x y.((ReceivingRecessiveGene(x) & Trait(y) & Parent(x,y)) -> OffspringHasRecessiveTrait(x,y))"]}
{"id": "entailmentbank_validation_704", "nl": "blue eye is a recessive trait in human.", "fol": "", "prediction": ["all x.(BlueEye(x) -> RecessiveTrait(x))", "all x.(BlueEye(x) -> RecessiveTait(x))", "all x.(BlueEye(x) -> RecessiveTraitInHuman(x))", "all x.(BlueEye(x) -> RecessiveTrait(x,Human))", "all x.(BlueEye(x) -> RecessiveTrait(x))", "all x.(BlueEye(x) -> (RecessiveTait(x) & Human(x)))", "all x.(BlueEye(x) -> RecessiveTraitInHuman(x))", "all x.(BlueEye(x) -> RecessiveTreatmentInHuman(x))", "all x y.((BlueEye(x) & Human(y)) -> RecessiveTrait(x,y))", "all x.(BlueEye(x) -> RecessiveTrait(x))", "all x.(BlueEye(x) -> RecessiveTraitInHuman(x))", "all x.(BlueEye(x) -> RecessiveTrait(x))", "all x.(BlueEye(x) -> RecessiveTail(x))", "all x.(BlueEye(x) -> RecessiveTraitInHuman(x))", "all x.(BlueEye(x) -> RecessiveTraitInHuman(x))", "all x.(BlueEye(x) -> RecessiveTraitInHuman(x))"]}
{"id": "entailmentbank_validation_705", "nl": "to have blue eyes requires receiving the recessive gene from each parent.", "fol": "", "prediction": ["all x.(BlueEyes(x) -> ReceivesRecessiveGenet(x))", "all x y.((RecessiveGene(x) & Parent(y)) -> BlueEyes(x))", "(ReceivesRecessiveGene(x,y) & FromParent(y,x))", "all x.(BlueEyes(x) -> RequiresRecessiveGene(x))", "all x.(BlueEyes(x) -> RequiresRecessiveGene(x))", "all x y.(HasBlueEyes(x) -> RevealsRecessiveGene(y,x))", "all x.(BlueEyes(x) -> RequiresRecessiveGene(x))", "all x.(BlueEyes(x) -> RequiresRecessiveGene(x))", "all x.(BlueEyes(x) -> RequiresRecessiveGene(x))", "all x.(BlueEyes(x) -> RequiresRecessiveGene(x,Parent,Pair))", "all x.(BlueEyes(x) -> RequiresRecessiveGene(x))", "all x y z.((BlueEnd(x) & Parent(y) & RecessiveGene(z)) -> RequiresRecessiveGene(x,y,z))", "all x.(BloodEyes(x) -> ReceivingRecessiveGene(x))", "all x.(BlueEyes(x) -> RequiresRecessiveGene(x))", "all x.(BlueEyes(x) -> RequiresRecessiveGene(x))", "all x y.((Parent(x) & Parent(y)) -> RequiresRecessiveGene(x,y))"]}
{"id": "entailmentbank_validation_706", "nl": "an egg cell is a kind of sex cell.", "fol": "", "prediction": ["all x.(EggCell(x) -> SexCell(x))", "all x.(EggCell(x) -> SexualCell(x))", "all x.(EggCell(x) -> SexualCell(x))", "all x.(EggCell(x) -> SpeciesCell(x))", "all x.(EggCell(x) -> SoleSexCell(x))", "all x.(EggCell(x) -> SortOfSexCell(x))", "all x.((EggCell(x) & SexualCell(x)) -> Alike(x))", "all x.(EggCell(x) -> SexualCell(x))", "all x y.((EggCell(x) & SexualCell(y)) -> Is(x,y))", "all x.(EggCell(x) -> SexualCell(x))", "all x.(EggCell(x) -> SortOfSexCell(x))", "all x.(EggCell(x) -> (SexCell(x) | SexualCell(x)))", "all x.(EggCell(x) -> SexualCell(x))", "all x.(EggCell(x) -> SexCell(x))", "exists x.(EggCell(x) & SexualCell(x))", "all x.(EggCell(x) -> SexualCell(x))"]}
{"id": "entailmentbank_validation_707", "nl": "a sperm cell is a kind of sex cell.", "fol": "", "prediction": ["all x.(SpermCell(x) -> SexCell(x))", "all x.(SpermCell(x) -> SexCell(x))", "all x.((SpermCell(x) & SexualCell(x)) -> Generic(x))", "all x.(SpermCell(x) -> SortOfSexCell(x))", "all x.((SpermCell(x) & SexualCell(x)) -> Sponge(x))", "all x.(SpermCell(x) -> SexCell(x))", "all x.(SpamCell(x) -> SexualCell(x))", "all x.((SporeCell(x) & LivesIn(x)) -> Sexual(x))", "all x.(SpermCell(x) -> SexCell(x))", "all x.(TheSpermCell(x) -> SexCell(x))", "all x.(StermCell(x) -> SexCell(x))", "all x.(SpermCell(x) -> SexCell(x))", "all x.(SpermCell(x) -> SexCell(x))", "all x.(SpermCell(x) -> SexCell(x))", "all x.(SpectrumCell(x) -> SexualCell(x))", "all x.(SpermCell(x) -> (SexCell(x) & SpecificCell(x)))"]}
{"id": "entailmentbank_validation_708", "nl": "a mutation in the sex cells of a parent can cause a new trait to appear in the parent's offspring.", "fol": "", "prediction": ["all x y z.((MutationInSexCellsOfPath(x) & ParentOffspring(y) & ParentSexCells(z)), -> NewTraitAppearsInOffspring(x,y,z))", "all x y z.((Mutation(x) & Parent(y) & SexualCells(z)) -> CanParseTraitWedding(x,y,z))", "all x y.((Mutation(x) & Parent(y) & SexCell(x)) -> DoesNewTraitAppears(x,y))", "all x y z.((Mutation(x) & SexCells(y) & Parent(z) & MutationInParentSexCells(x,y)) -> NewTrait(x,z))", "all x y z.((MutationInSexCellsOfParent(x) & Child(z) & HasSexCells(x,y,z) & HasSexCells(x,z)) -> CouldDepictNeutralTrait(x,z))", "all x y.((Mut mutation(x) & Mom(y)) -> ChangesSexCells(x,y))", "all x y z.((MutationInSexCells(x) & Parent(y) & Onspring(z)) -> NewTrait(x,y,z))", "all x y z.((MutationInSexCellsOfParent(x) & Parent(y) & Trait(z)) -> NewTraitInOffspring(x,y,z))", "all x.(MutationInSexCellsOfPast(x) -> NewTrait(x))", "all x y.((Mutation(x) & ParentParent(y) & SexCells(x,y)) -> CanCauseNewTrait(x,y))", "all x y.((MutationInSexCells(x,y) & Parent(y)) -> (CausesNewTraitInOffspring(x,y)))", "all x y.((MutationInSexCells(x,y) & Parent(y)) -> (CausesNewTrait(x,y) & AppearsInOffspring(x,y)))", "all x y.((MutationInSexCells(x) & Parent(y)) -> AllocatesNewTrait(y,x))", "all x y.((Mutation(x) & ParentSexCells(x,y)) -> NewTraitInOffspring(x,y))", "all x y.((MutationInSexCells(x) & Parent(y) & ParentOffspring(y)) -> CanCauseNewTrait(x,y))", "all x y.((MutationInSexCells(x) & Parent(y)) -> NewTrait(x,y))"]}
{"id": "entailmentbank_validation_709", "nl": "a mutation in sperm or egg of a parent can cause a new trait to appear in the parent's offspring.", "fol": "", "prediction": ["all x y.((Mutual(x) & Parent(y) & InSporemOrEgg(x)) -> NewTraitInOffspring(x,y))", "all x y.((Mutation(x) & Parent(y)) -> (Decline(x,y) & Parent(y)))", "all x.(MutationInSpormOrEgg(x) -> NewTrait(x))", "all x y.((MutationInSspermOrEgg(x) & Parent(y)) -> NewTraitEmitsInOffspring(x,y))", "all x y.((Mutation(x) & SpeciesOfParent(y)) -> NewTraitAnalyzedInOffspring(x,y))", "all x y.(MutuationIn(x,y) -> (Parent(z) & SporommOrEgg(y,z) & DependsOn(z) & ManifestsNewTrait(x,z)))", "all x y.((Mutation(x) & Parent(y)) -> (SpermOrEggMutation(x,y) & ParentOffspring(x,y)))", "all x.((Mutation(x) & InSpermOrEgg(x) & Parent(x)) -> NewTraitToAppearInOffspring(x))", "all x y.((Mutation(x,y) & Parent(y)) -> (FacesPatient(x,y) | ContainsPatient(x,y)))", "all x y.((Mut mutation(x) & Parent(y)) -> (AppearsInOffspring(x,y) & FragmentsInSspermOrEgg(y,x)))", "all x y.((Mutation(x) & Parent(y)) -> (SpermTreat(x,y) | EggTrait(x,y)))", "all x y z.((SpermTransmutation(x) | EggTransmutation(x)) -> OffspringSeeds(x,y))", "all x y.((Mutation(x) & Parent(y) & (Ssperm(y) | Egg(y))) -> NewTrait(x,y))", "all x y.((MutationInDerived(x) & Parent(y)) -> CausesNewTrait(x,y))", "all x y.(((MutationInSspermOrEgg(x) & Parent(y)) -> CanCauseNewTrait(x,y))", "all x y z.((MutationInSspermOrEgg(x) & Parent(y) & Offspring(z)) -> NewTraitOfOtherPatient(x,y,z))"]}
{"id": "entailmentbank_validation_710", "nl": "smaller dogs have genetic trait of smaller size.", "fol": "", "prediction": ["all x.(SmallerDogs(x) -> HasGeneticTreatmentSmallerSize(x))", "all x.((Dog(x) & MinimalSize(x)) -> HasGeneticTrait(x,SmallSize))", "all x.(SmallerDog(x) -> GeneticTrait(x,sharpSize))", "all x.((Dog(x) & Smaller(x)) -> HasGeneticTrait(x))", "all x.(LargerDog(x) -> HasGeneticTrait(x,SmallerSize))", "all x.(SmallerDog(x) -> HasGeneticTrait(x,SmallerSize))", "all x.(SmallerDog(x) -> GeneticTreatmentOfSmallerSize(x))", "all x.(SmallerCanine(x) -> GeneticTreatment(x,SmallerSize))", "all x.(SmallerDog(x) -> HasGeneticTraitSmallerSize(x))", "all x.(SmallerDog(x) -> HasGeneticTrait(x,SmallerSize))", "all x.(SmallerDog(x) -> HasGeneticTraitOfSmallerSize(x))", "all x.(SmallerDog(x) -> GeneticTreatmentOfSmallerSize(x))", "all x.((Dog(x) & Smaller(x)) -> HasGeneticTrait(x,SmallerSize))", "all x.(SmallerDog(x) -> GeneticTranquil(x))", "all x.((Dog(x) & Smaller(x)) -> GeneticTreatmentSmall(x))", "all x.(SmallerDog(x) -> GeneticTraitOfSmallerSize(x))"]}
{"id": "entailmentbank_validation_711", "nl": "human are breeding german shepherd dogs to other smaller dogs.", "fol": "", "prediction": ["all x y z.((Human(x) & GermanShark(y) & SmallerDog(z)) -> BreedsTo(x,y,z))", "all x y.((Hour(x) & GermanSherlock(y) & BreedsToSmallDogs(x,y)) -> Breeds(x,y))", "all x y.((Human(x) & ShepherdDorf(y) & BreedsTo(x,y)) -> BreedsToSmallerDogs(y))", "all x y.((Human(x) & ShepherdDog(y)) -> BreedingTo(x,y))", "all x y z.((Human(x) & GermanSheepdog(y) & SmallerDog(z)) -> BreedsTo(x,y,z))", "all x y.((Human(x) & ShepherdDog(y)) -> BreedsToSmallerDogs(y,x))", "all x.(Human(x) -> BreedsOtherSmallDogs(x,Schotter,Human))", "all x y z.((Human(x) & ShepherdDog(y) & SmallerDog(z)) -> BreedsTo(x,y,z))", "all x y.((Human(x) & Dog(y)) -> BreedsTo(x,y)))", "all x y.((Human(x) & GermanShark(y)) -> BreedsTo(x,y))", "all x y.((Human(x) & ShepherdDog(y)) -> BreedsToSmallerDog(x,y))", "all x y.((Human(x) & GermanShipping(y)) -> BreedingToSmallerDog(x,y))", "all x y.((Human(x) & GermanShark(y)) -> BreedingToSmallDogs(x,y))", "all x y z.((Human(x) & GermanSharkdog(y) & SmallerDog(z)) -> BreedsTo(x,y,z))", "all x y.((Human(x) & GermanShippingDog(y)) -> BreedsToSmallerDogs(x,y))", "all x y.((Human(x) & GermanShepardDog(y)) -> BreedsToSmallerDogs(x,y))"]}
{"id": "entailmentbank_validation_712", "nl": "human are breeding german shepherd dogs with dogs with genetic trait of smaller size.", "fol": "", "prediction": ["all x y.((Human(x) & Dog(y) & BreedingGertinalTrait(x,y)) -> Breeding(x,y))", "all x y z.((Human(x) & GermanShark(y) & GeneticTreatment(z) & SmallerSize(z)) -> BreedsWith(x,y,z))", "all x y z.((Human(x) & GermanShooter(y) & Dog(z)) -> BreedingWithGeographicalTraitOfSmallerSize(x,y,z))", "all x y.((Human(x) & GermanShooterDog(y) & BreedingWith(x,y) & SmallerTreatment(y)) -> BreedingWith(x,y))", "all x y z.((Human(x) & GermanShipperDog(y) & Dog(z) & Breeding(x,z)) -> BreedingWithSmallerSize(x,y,z))", "all x.((Human(x) & BreedsSecurity(x,GermanShoot,German)) -> CanBreedWithAllergy(x,GermanShooterGeometricTreatment,SmallerSize))", "all x y.((Human(x) & GermanSherlock(y)) -> BreedingWithLargerGeneticTrait(x,y))", "all x.((Human(x) & BreedingGermanSheepdogs(x) & BreedingDogsWithSmallerGeneticTreat(x)) -> ShepherdDogs(x))", "all x y.((Human(x) & GermanShoredog(y)) -> BreedingByGMO(x,y))", "all x y.((Human(x) & ShepherdDog(y) & Breeding(x,y) & BreedingCreativeTreatment(x,y)) -> Breeds(x,y))", "all x y.((Human(x) & Shepherd(y) & BreedsWith(x,y) & Dog(z) & GeneticTraitSmallerSize(z)) -> BreedsWithAloysmalSize(x,z))", "all x y.((Human(x) & GermanShark(y) & BreedingWithSmallerSize(x,y)) -> BreedingWithSmallerSize(x,y))", "all x.((Human(x) & BreedsGermanShipperDogs(x) & BreedsDistantGenetically(x)) -> SmallerSizeSizeDogs(x))", "all x.((Human(x) & BreedingGermanShipper(x) & BreedingSmallerSize(x)) -> BreedingSmallerSizeOrganicTreatment(x))", "all x y.((Human(x) & GermanShooterDog(y) & BreedsWithSmallerSpecificTreat(x,y)) -> BreedsWithSmallerSpecificTreat(x,y))", "all x y.((Human(x) & GermanShipperDog(y)) -> BreedsWithSmallerSize(x,y))"]}
{"id": "entailmentbank_validation_713", "nl": "selective breeding is when an organism receives selective genetic traits from its parents by human design.", "fol": "", "prediction": ["all x y.((Organism(x) & Parent(y) & ReceivesSelectiveGeneticTraits(x,y) & HumanDesign(x)) -> SelectiveBreeding(x))", "all x y.((Organism(x) & Person(y)) -> ReceivesSelectiveGeneticTreatments(x,y))", "all x y.((Organism(x) & Organism(y)) -> ReceivesSelectiveGeneticTreatmentsByHumanDesign(x,y))", "all x y.((Organism(x) & HumanDesign(x)) -> ReceivesSelectiveGeneticTreatmentsBy(x,y))", "all x y.((Organism(x) & Parent(y) & ReceivesSelectiveGeneticTreatments(x,y)) -> HumanDesigned(x))", "all x y.((Organism(x) & GeneticTraits(y) & BiologicalDesigned(z)) -> RetrievesSelective(x,y,z))", "all x y z.((Organism(x) & Organism(y) & HumanDesign(z) & ReceivesGeneticTraits(y,z)) -> SelectiveBreeding(x))", "all x y.((Organism(x) & Organism(y)) -> ReceivesSelectiveGeneticallyTraitsByHumanDesign(x,y))", "all x y.((Organism(x) & HumanDesign(y)) -> (ReceivesSelectiveGeneticTraits(x,y)))", "all x y.((Organism(x) & Organism(y) & ReceivesSelectiveGeneticTreatments(x,y) & HumanDesigned(x)) -> SelectiveBreeding(x))", "all x y.((Organism(x) & HumanDesign(y) & ReceivesSelectiveGeneticTraits(x,y)) -> SelectiveBreeding(x!))", "all x y z.((Organism(x) & GeneticTraits(y) & Parent(z) & Primarily(x,y,z)) -> ReceivesSolative(x))", "all x y.((Organism(x) & GeneticallySelectiveBreeding(x,y) & HumanDesign(y)) -> ReceivesSelectiveTargetsFrom(x,y))", "all x.((Organism(x) & ReceivesSelectiveGeneticTraits(x) & HumanDesign(x)) -> SelectiveBreeding(x))", "all x y.((Organism(x) & HumanDesign(y)) -> ReceivesSelectiveGeneticTreatments(x,y))", "all x y.((Organism(x) & Embryo(y)) -> ReceivesSelectiveGeneticalTreatments(x,y))"]}
{"id": "entailmentbank_validation_714", "nl": "human breeding german shepherd dogs with dogs with genetic trait of smaller size is an example of selective breeding.", "fol": "", "prediction": ["all x.(FindingGermanSheepherdDogs(x) & BreedingFindingRufOfSmallerSizeDogs(x))", "all x y z.((Human(x) & GermanShipperDog(y) & Dog(z) & HasGeneticTraitLargerSize(x,z)) -> SpecializedBreeding(x))", "all x.((Human(x) & BreedsGermanScholarDogs(x) & BreedsSmallerSizeDogs(x)) -> SelectiveBreeding(x))", "all x y z.((Human(x) & GermanSheepdog(y) & DogWithSmallerSize(z) & Breeding(x,y,z)) -> SelectiveBreeding(x))", "all x y.((Human(x) & GermanSheepdog(y) & BreedingWithDishesWithBudget(x,y)) -> SelectiveBreeding(x,y))", "all x.((Human(x) & BreedsGermanSharkCanine(x) & BreedsDogsWithSmallerGyneticTreatment(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedsGermanSheepherd(x) & BreedsDogsWithGeneticTraitSmallerSize(x)) -> SpecialBreeding(x))", "all x.((Human(x) & BreedsGermanShippingDogs(x) & BreedsDogsWithGatheticTraitSize(x)) -> SeletiveBreeding(x))", "all x.((Human(x) & BreedingGermanSharkDogs(x) & BreedingChestDiagnosticTreatments(x,SmallerSize)) -> SelectiveBreeding(x))", "all x y.((Human(x) & GeralHunt(y) & BreedsWith(x,y) & GermanSharkDog(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedingGermanSheepherdDogs(x) & BreedingDogsWithGeneticallySmallerSize(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedingGermanSharkdogs(x) & BreedingDogs(x) & GeneticTreatmentOfSmallerSize(x)) -> SelectiveBeing(x))", "all x y.((Human(x) & Breeding(y,x) & GermanSheepherdDog(y,x) & Breeding(y,x)) -> SelectiveBreeding(x))", "all x y z.((Human(x) & GermanSheik(y) & Dog(z) & GeneticTreat(z) & SmallerSize(z)) -> SelectiveBreeding(x))", "all x.(SelectiveBreeding(x) -> (HasGermanShishDogOrChestInPosition(x,ZeroSize)))", "all x y z.((Human(x) & GermanSharkdog(y) & BreedingDog(z) & GeneticTreatment(z) & SmallerSize(x,y)) -> SelectiveBreeding(x))"]}
{"id": "entailmentbank_validation_715", "nl": "sexual reproduction requires both sperm and egg.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> (RequiresSsperm(x) & RequiresEgg(x)))", "all x.(SexualReproduction(x) ->(RequiresSsperm(x) & RequiresEgg(x)))", "(all x.(SexualReproduction(x) & Sperm(x) & Egg(x)) -> Required(x))", "all x.(SexualReproduction(x) -> (Requires(x,sperm) & Requires(x,egg)))", "all x.(SexualReproduction(x) -> (RequiresSsperm(x) & RequiresEgg(x)))", "all x.((SexualReproduction(x) & RequiresSsperm(x) & RequiresEgg(x)) -> RequiresSsperm(x))", "all x y z.((SexualReproduction(x) & Sperm(y) & Egg(z)) -> Requires(x,y,z))", "all x.(SexualReproduction(x) -> (RequiresSsperm(x) & RequiresEgg(x)))", "all x y.((SexualReproduction(x) & Sperm(y) & Egg(y)) -> Requires(x,y))", "all x.(SexualReproduction(x) -> (RequiresSperm(x) & RequiresEgg(x)))", "(RequiresSsperm(x) & RequiresEgg(x))", "(RequiresSperm(spoil) & RequiresEgg(sexualReproduction))", "all x.(SexualReproduction(x) -> (Requires(x,sperm) & Requires(x,egg)))", "all x.(SexualReproduction(x) -> (Requires(x,sperm,egg) & Requires(x,sperm)))", "all x.(SexualReproduction(x) -> (RequiresSsperm(x) & RequiresEgg(x)))", "all x.(SexualReproduction(x) -> (Requires(x,sperm,egg)))"]}
{"id": "entailmentbank_validation_716", "nl": "the sperm production is prevented in male insects.", "fol": "", "prediction": ["all x.(PseudoInsect(x) -> PresumedSspermProduction(x))", "all x y.((Pharmacist(x) & MaleInsect(y)) -> IsPrevented(x,y))", "all x.((MammalInsect(x) & PreventsSpermProduction(x)) -> SpermProduction(x))", "all x.((MaleInsect(x) & MaleInsect(x)) -> PreventsSpermProduction(x))", "all x.((Menu(x) & MaleInsect(x)) -> PreventsSspermProduction(x))", ".(MaleInsect(x) & PreventsSpermProduction(x))", "all x.(MammalInsect(x) -> CanPreventSpermProductionInInsect(x))", "all x y.((Gynotype(x) & MaleInsect(y)) -> PreventsSpermProduction(x,y))", "all x y.((Insect(x) & Male(y) & Male(x)) -> -ExcludesKernForspermProduction(x,y))", "all x.(MaleInsect(x) -> -PreventsSspermProduction(x))", "all x.(HasAsperm(x) -> PreventsProduceInMaleInsect(x))", "all x y.((Insect(x) & Male(y)) -> PreventsSpermProduction(x,y))", "all x y.((MammalInsect(x) & MaleInsect(y)) -> PreventsSpermProduction(x,y))", "all x.((MaleInsect(x) & MaleInsect(x)) -> PreventsSpermProduction(x))", "all x y.((MaleInsect(x) & MaleInsect(y)) -> PreventsSspermProduction(x,y))", "all x.((MaleInsect(x) & MaleInsect(x)) -> PreventsSspermProduction(x))"]}
{"id": "entailmentbank_validation_717", "nl": "if something required for a process is not produced then that process is prevented from occurring.", "fol": "", "prediction": ["all x.((Process(x) & -Produced(x)) -> Term(x))", "all x y.((Process(x) & Process(y) & RequiredFor(x,y)) -> -Produced(x))", "all x y.((RequiredForProcess(x) & Process(y) & -Produced(x)) -> PreventsOccurrence(x,y))", "all x y.((Process(x) & Product(y) & ThenNotProduced(x,y)) -> Preventable(y))", "all x y z.((Process(x) & Process(y) & ProcessProduction(z) & -Produced(x,y,z)) -> PreventsProcessFromOccurring(x))", "all x y.((Process(x) & RequiredForProcess(y) & -Produces(x,y)) -> PreventsOccurrence(x,y))", "all x y.((Process(x) & Process(y) & Requires(x,y)) -> PreventsProcess(z))", "all x y.((Process(x) & Product(y) & -Produced(x,y)) -> Preventable(x,y))", "all x y.((Process(x) & RequiredFor(x,y)) -> -Produced(x))", "all x y.((Process(x) & Process(y) & NotProduced(x)) -> PreventsProcessOfOccurrence(x,y))", "all x y.((Process(x) & Process(y) & PreventsProduction(x,y)) -> RequiredFor(x,y))", "all x y.((Process(x) & RequiredForProcess(x,y) & -Produced(y)) -> PreventsProcess(y))", "all x y.((Process(x) & RequiredFor(x,y)) -> PreventsOccurrence(x))", "all x.((Process(x) & RequiredForProcess(x) & -Produced(x)) -> ObjectProhibitedFromOccurring(x))", "all x y.((Process(x) & Process(y) & RequiredFor(x,y) & -Produced(x)) -> PreventsOccurrence(x,y))", "all x y.((Process(x) & RequiredForProcess(x,y)) -> -Produced(x))"]}
{"id": "entailmentbank_validation_718", "nl": "the sexual reproduction process is prevented in the insects.", "fol": "", "prediction": ["all x y.((Insect(x) & Insect(y)) -> PreventsSexualReproduction(x,y))", "all x y.((Insect(x) & FemaleReproductionProcess(y)) -> Threatened(x,y))", "all x y.((Insect(x) & Insect(y)) -> PreventsSexualReproduction(x,y))", "all x.(Insect(x) -> -ProcessForSexualReproduction(x))", "all x.(Insect(x) -> PreventsSexualReproductionProcess(x))", "all x y.((Insect(x) & Insect(y)) -> PreventsSexualReproduction(x,y))", "all x y z.((Insect(x) & Insect(y) & SexualReproduction(z)) -> -Private(x,z))", "all x y.((Insect(x) & Insect(y)) -> PreventsSexualReproduction(x,y))", "all x.(Insect(x) -> PreventsSexualReproduction(x))", "all x.((Insect(x) & -Process(x)) -> PreventsToReproduction(x))", "all x.((Insect(x) & PreventsSexualReproduction(x)) -> PreventsSexualReproduction(x & KeepingInsects(x))", "all x y.((Insect(x) & Insect(y)) -> PreventSexualReproduction(x,y))", "all x y.((Insect(x) & Insect(y)) -> PreventsSexualReproduction(x,y))", "all x.((Insect(x) & PreventsSexualReproduction(x)) -> SexualReproduction(x))", "all x y.((Insect(x) & Insect(y)) -> SexualReproductionProcessPreventable(x,y))", "all x y z.((Insect(x) & Insect(y) & SexualReproductionProcess(z)) -> Prevents(x,z))"]}
{"id": "entailmentbank_validation_719", "nl": "preventing reproduction decreases the rate of reproduction.", "fol": "", "prediction": ["all x.(ProtectsReproduction(x) -> DecreasesReproductionRate(x))", "all x y.((PreventingReproduction(x) & ReproductionRate(y)) -> Decreases(x,y))", "all x.(Production(x) -> ReduceRateOfReproduction(x))", "all x.((PreventsReproduction(x) & DecreasesReproductionRate(x)) -> ReducesReproductionRate(x))", "all x.(PreventsReproduction(x) -> DeclineInReproduction(x))", "all x.((Protection(x) & ReproductionRate(x)) -> DecreasesRate(x,Reproduction))", "all x.(PreventsReproduction(x) -> DecreasesRuleOfReproduction(x))", "all x.((PreventsReproduction(x) & ReducesRateOfReproduction(x)) -> DecreasesRateOfReproduction(x))", "all x.(Protection(x) -> DecreasesReproduction(x))", "all x.((Production(x) & ReducesRateOfReproduction(x)) -> PreventsReproduction(x))", "all x.((PreventsReproduction(x) & ReducesRateOfReproduction(x)) -> ReducesRateOfReproduction(x))", "all x.(PreventsReproduction(x) -> ReducesRateOfReproduction(x))", "all x y.((Antireproduction(x) & Reproduction(y) & DeathRate(x,y)) -> Reduces(x,y))", "all x.((PreventsReproduction(x) & DecreasesReproductionRate(x)) -> ReproductionDecreases(x))", "all x.((PreventsReproduction(x) & DecreasesRateOfReproduction(x)) -> DecreasesRateOfReproduction(x))", "all x.(PreventionOfReproduction(x) -> ReducesRateOfReproduction(x))"]}
{"id": "entailmentbank_validation_720", "nl": "sexual reproduction is a kind of reproduction.", "fol": "", "prediction": ["all x.((SexualReproduction(x) & Production(x)) -> Reproduction(x))", "all x.(SexualReproduction(x) -> Reproduction(x))", "all x.(RationalReproduction(x) -> Reproduction(x))", "all x.(SexualReproduction(x) -> Reproduction(x))", "all x.(SexualReproduction(x) -> Reproduction(x))", "all x y.((SexualReproduction(x) & Reproduction(y)) -> Reproduction(x,y))", "all x.(SexualReproduction(x) -> Reproduction(x))", "all x.((SexualReproduction(x) & FormOfReproduction(x)) -> Reproduction(x))", "all x.(SexualReproduction(x) -> Reproduction(x))", "all x.(SexualReproduction(x) -> Reproduction(x))", "all x.(SexualReproduction(x) -> Reproduction(x))", "all x.((SexualReproduction(x) & Reproduction(x)) -> Reproduction(x))", "all x.(SexualReproduction(x) -> Reproduction(x))", "all x.((SexualReproduction(x) & Production(x)) -> Reproduction(x))", "all x.((SexualReproduction(x) & Reproduction(x)) -> Reproduction(x))", "all x.(Reproduction(x) -> SexualReproduction(x))"]}
{"id": "entailmentbank_validation_721", "nl": "the reproduction rate in the insects will decrease.", "fol": "", "prediction": ["all x.(Insects(x) -> DecreaseReproductionRate(x))", "all x.((Insect(x) & Insect(x)) -> ReproductionRateDecreased(x))", "all x.(Insect(x) -> ReproductionRateDecrease(x))", "all x y.((Insect(x) & Insect(y)) -> DecreasesReproductionRate(x,y))", "all x.((Insect(x) & Insect(y)) -> DecreasingReproductionRate(x,y))", "all x y.((Insect(x) & Insect(y)) -> PreparationRateDecreased(x,y))", "all x y.((Insect(x) & Insect(y)) -> DecreasedReproductionRate(x,y))", "all x y.((Insect(x) & Insect(y)) -> DecreasedReproductionRate(x,y))", "all x.((Insect(x) & Insect(y)) -> DecreaseInReproduction(x,y))", "all x y.((Insect(x) & Insect(y) & ReducedReproductionRate(x,y)) -> DecreasedReproductionRate(x,y))", "all x y.((Insect(x) & Insect(y) & Insect(x)) -> DecreasedReproductionRate(x,y,z))", "all x y.((ConspirationRate(x) & Insect(y)) -> Decreases(x,y))", "the reproduction rate in Insects (Decrease)", "all x y.((Insect(x) & Insect(y)) -> ReproductionRateDecrease(x,y))", "all x.((Insect(x) & Insect(x)) -> DecreasingReproductionRate(x))", "all x.(Insect(x) -> DecreasesReproductionRate(x))"]}
{"id": "entailmentbank_validation_722", "nl": "as the rate of reproduction decreases, the population will decrease.", "fol": "", "prediction": ["all x.((RateOfReproduction(x) & Declines(x)) -> PopulationDecrease(x))", "all x y.((ReproductionDecline(x) & Population(y)) -> Decreases(y))", "all x y.((ReproductionRate(x) & Population(y)) -> Reduces(x,y))", "all x y.((Population(x) & DownRateOfReproduction(x,y)) -> Decreased(x,y))", "all x y.((RateOfReproduction(x) & Population(y)) -> Decreaser(x,y))", "all x.((ReproductionRate(x) & Decreases(x)) -> PopulationDecreases(x))", "all x.((Between(x,y) & ReproductionRate(y,x)) -> PopulationDecreases(x))", "all x y.((RateOfReproduction(x) & Population(y) & Decreases(x,y)) -> Decreases(y,z))", "all x.((ReproductionRate(x) & Decreases(x)) -> PopulationDecrease(x))", "all x.(DescendsReproduction(x) -> DemographyDecreases(x))", "all x.((RateOfReproductionDecreases(x) & PopulationDecreases(x)) -> PopulationDecreases(x))", "(DecreasesReproduction(x) | PopulationDecreases(x))", "all x y.((RateOfReproduction(x) & Population(y) & DecreasesRateOfReproduction(x)) -> DecreasesPopulation(y))", "all x y.((RateOfReproduction(x) & Population(y) & Decreases(y)) -> PopulationDecreases(y))", "all x.((DecreasedReproduction(x) & PopulationDecreased(x)) -> Reduced(x))", "all x y z.((RateOfReproduction(x) & Population(y) & (Decreases(x) | PopulationDecreases(y))) -> ReproductiveDecrease(x))"]}
{"id": "entailmentbank_validation_723", "nl": "the population of the insects will decrease.", "fol": "", "prediction": ["all x.(Insect(x) -> populationDecreases(x))", "all x.(Insect(x) -> PopulationDecrease(x))", "all x.(Insect(x) -> DecreasedPopulation(x))", "all x.(Insect(x) -> PopulationDecrease(x))", "all x.(Insect(x) -> PopulationDecreases(x))", "all x.(Insect(x) -> IncreasingPopulation(x))", "all x.(InsectPopulationDecrease(x) -> InsectPopulationDecrease(x))", "each y.((Insect(x) & Population(y)) -> Decreases(x,y))", "all x.(Insects(x) -> PopulationDiminished(x))", "all x.(Insect(x) -> PopulationDecrease(x))", "all x y.((Insect(x) & Population(y)) -> Decrease(x),y))", "all x y.((Insect(x) & PopulationDecrease(y)) -> Insect(x))", "all x y.((Insect(x) & Population(y) & Reduced(x,y)) -> Decline\"", "all x.(Insect(x) -> PopulationDecrease(x))", "all x.(Insect(x) -> PopulationDecline(x))", "all x.(Insect(x) -> DecreasedPopulation(x))"]}
{"id": "entailmentbank_validation_724", "nl": "a hammer often is made of metal.", "fol": "", "prediction": ["all x.(Hammer(x) -> LikelyMadeOfMetal(x))", "all x.(Hammer(x) -> MadeOfMetal(x))", "all x.(Hammer(x) -> (MadeOfMetal(x) & MakesOfMetal(x)))", "all x.(Hammer(x) -> MadeOfMetal(x))", "all x.(Hammer(x) -> MakesOfMetal(x))", "all x.(Hammer(x) -> MadeOfMetal(x))", "all x.(Hammer(x) -> MadeOfMetal(x))", "all x.(Hammer(x) -> MadeOfMetal(x))", "all x.(Hammer(x) -> (MadeOfMetal(x) & FrequentlyHammed(x)))", "all x.(Hammer(x) -> MadeOfMetal(x))", "all x.(Hammer(x) -> MadeOfMetal(x))", "all x.(Hammer(x) -> MadeOfMetal(x))", "exists x.(Hammer(x) & MadeOfMetal(x))", "all x.(Hammer(x) -> MadeOfMetal(x))", "all x.(Hammer(x) -> OftenMadeOfMetal(x))", "all x.(Hammer(x) -> MadeOfMetal(x))"]}
{"id": "entailmentbank_validation_725", "nl": "when a metal rusts, that metal becomes flaky on the surface.", "fol": "", "prediction": ["all x.(RosagesMetal(x) -> FlakyOnSurface(x))", "all x.((Metal(x) & Ruins(x)) -> FlakyOnSurface(x))", "all x.((Metal(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x.((Metal(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x.((Metal(x) & Rusts(x)) -> Flaky(x))", "all x.((Metal(x) & Ruins(x)) -> FlakyOnSurface(x))", "all x.((Metal(x) & Ruins(x)) -> FlakyOnSurface(x))", "all x.(RosesMetal(x) -> FlakyOnSurface(x))", "all x.(RotsMetal(x) -> FlakyOnSurface(x))", "all x y.((Metal(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x.((Metal(x) & Rusts(x)) -> FlakySurface(x))", "all x y.((Metal(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x y.((Metal(x) & Rusts(x)) -> FlakyOnSurface(y))", "all x.((Metal(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x.((Metal(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x y.((Metal(x) & Rushed(x)) -> Flaky(y))"]}
{"id": "entailmentbank_validation_726", "nl": "when a hammer rusts, the hammer will becom flaky on the surface.", "fol": "", "prediction": ["all x.(Roses(x) -> FlakyOnSurface(x))", "all x.((Hammer(x) & Rusts(x)) -> FlakySurface(x))", "all x.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x.(Rusts(x) -> FlakyOnSurface(x))", "all x.((Hammer(x) -> Rusts(x))", "all x y.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x.(Rots(x) -> FlakyOnSurface(x))", "all x.(Rrusts(x) -> FlakyOnSurface(x))", "all x.((Hammer(x) & Ruins(x)) -> FlakyOnSurface(x))", "all x.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x.(Rots(x) -> FlakySurface(x))", "all x.(Rorusts(x) -> Flaky(x))", "all x.((Hammer(x) & Rusts(x)) -> FlakySurface(x))", "all x.((Hammer(x) & Ruins(x)) -> FlakyOnSurface(x))", "all x.(Roses(x) -> FlakyOnSurface(x))"]}
{"id": "entailmentbank_validation_727", "nl": "kim's hammer is flaky on the surface.", "fol": "", "prediction": ["all x.(Hammer(x) -> FlakyOnSurface(x))", "(Flaky(hammer) -> Y.C.Taurus(hammer,surface)))", "all x.(Hammer(x) -> FlakyOnSurface(x))", "all x y.((Hammer(x) & Kim(y)) -> FlakyOnSurface(y,x))", "exists x.(Hammer(x) & Flaky(x))", "all x.(Hammer(x) -> FlakyOnSurface(x))", "all x.(Hammer(x) -> Flaky(x))", "all x.(Hammer(x,kim) -> FlakyOnSurface(x))", "all x.(Hammer(x) -> FlakyOnSurface(x))", "all x.(Kim'sHammer(x) -> FlakyOnSurface(x))", "all x y.((Hammer(x) & Kim(y)) -> FlakyOnSurface(x))", "all x.((Kim'sHammer(x) & FlakyOnSurface(x)) -> FlakyOnSurface(x))", "exists x.(Hammer(x) & Flaky(x))", "all x.(Hammer(x) -> FlakyOnSurface(x))", "all x.(Hammer(x) -> FlakyOnSurface(x))", "all x.(Hammer(x) -> FlakyOnSurface(x))"]}
{"id": "entailmentbank_validation_728", "nl": "the hammer has rusted.", "fol": "", "prediction": ["all x.(Hammer(x) -> Rusted(x))", "all x.(Hammer(x) -> Rusted(x))", "all x.(Hammer(x) -> Rosted(x))", "all x.(Hammer(x) -> Rusted(x))", "all x.(Hammer(x) -> Rusted(x))", "all x y.((Hammer(x) & Hammer(y)) -> Rusted(x,y))", "all x.(Hammer(x) -> Rusted(x))", "During the hammer process the hammer,lemons,sun,rock,andspots have been broken.", "is currently rusted.", "all x.(Hammer(x) -> Rusted(x))", "(rusted(hammer) -> HasMade(hammer))", "all x.(Hammer(x) -> Rusted(x))", "all x.(Hammer(x) -> Rusted(x))", "all x y.((Hammer(x) & Hammer(y)) -> Rusted(x))", "(Hammer(hammer) & Rusted(hammer))", "the hammer has rusted."]}
{"id": "entailmentbank_validation_729", "nl": "rust forming is a kind of chemical change.", "fol": "", "prediction": ["all x.(RustForming(x) -> ChemicalChange(x))", "all x.(RustForming(x) -> ChemicalChange(x))", "all x.(RoseForming(x) -> ChemicalChange(x))", "all x.((RustForming(x) & ChemicalChange(x)) -> ChemicalManipulation(x))", "all x.(RustForming(x) -> ChemicalChange(x))", "all x.(RustForming(x) -> ChemicalChange(x))", "all x.(RustForming(x) -> ChemicalChange(x))", "all x.(RustForming(x) -> ChemicalChange(x))", "all x.(RustForming(x) -> ChemicalChange(x))", "all x.(RustFormingChemicalChange(x) -> ChemicalChange(x))", "all x y.((RoseForming(x) & ChemicalChange(y)) -> ChemicalChange(x,y))", "all x.(RustForming(x) -> ChemicalChange(x))", "all x.(RustForming(x) -> ChemicalChange(x))", "all x.(RustForming(x) -> ChemicalChange(x))", "all x.(RustForming(x) -> ChemicalChange(x))", "all x.(RustForming(x,y) -> ChemicalChange(y))"]}
{"id": "entailmentbank_validation_730", "nl": "the hammer has undergone a chemical change.", "fol": "", "prediction": ["all x.(Hammer(x) -> ChemistryChange(x))", "all x.(Hammer(x) -> ChemicalChange(x))", "the hammer has undergone chemical change.", "all x y.((Hammer(x) & ChemicalChange(y)) -> Undergone(x,y))", "all x.(Hammer(x) -> UndergoneChange(x))", "all x.(Hammer(x) -> HasChemicalChange(x))", "all x.(Hammer(x) -> HasChange(x))", "all x.(Hammer(x) -> ChemicalChange(x))", "all x.(Hammer(x) -> ChemicalChange(x))", "(ChangeChange(hammer) & UnderwentChange(hammer))", "all x.(Hammer(x) -> UnderwentChemicalChange(x))", "all x y z.((Hammer(x) & ChemicalChange(y) & Product(z)) -> Undergone(x,y))", "all x.(Hammer(x) -> ChemicalChange(x))", "all x.(Hammer(x) -> HungryChemicalChange(x))", "all x.(Hammer(x) -> UndergoneChemicalChange(x))", "all x.(Hammer(x) -> ChemicalChange(x))"]}
{"id": "entailmentbank_validation_731", "nl": "element 3 turns to a greenish color.", "fol": "", "prediction": ["all x.(Element3(x) -> GreenishColor(x))", "all x.(Element3(x) -> GreenishColor(x))", "all x.(Element3(x) -> GreenishColor(x))", "all x.(Element3(x) -> GreenishColor(x))", "all x.((Element3) & TurnsToGreenishColor(x)) -> Element3.", "all x.(Element3(x) -> GreenishColor(x))", "all x.(Element3(x) -> GreenishColor(x))", "all x.((Element3) & GreenCream(x)) -> TurnsTo(x,1))", "all x.(Element3) -> GreenishColour(x))", "all x.(Element3(x) -> GreenishColor(x))", "all x.(Element3(x) -> GreenishColor(x))", "all x.(Element3) -> GreenishColor(x))", "all x.(Element(x) -> GreenishColor(x))", "all x.(Element3) -> TurnsToGreenishColor(x))", "all x.(Element3(x) -> GreenishColor(x))", "all x.(Element3(x) & GreenishColor(x))"]}
{"id": "entailmentbank_validation_732", "nl": "an element is a kind of substance.", "fol": "", "prediction": ["all x.(Element(x) -> Substance(x))", "all x.(Element(x) -> Substance(x))", "all x.(Element(x) -> Substance(x))", "all x.(Element(x) -> Substance(x))", "all x.((Element(x) & Substance(x)) -> FormOf(x))", "all x.(Element(x) -> Substance(x))", "all x.(Element(x) -> Substance(x))", "all x.(Element(x) -> Substance(x))", "all x.(Element(x) -> Substance(x))", "all x.(Element(x) -> Substance(x))", "all x.(Element(x) -> Substance(x))", "all x.(Element(x) -> Substance(x))", "all x.(Element(x) -> Substance(x))", "all x.((Element(x) & Substance(x)) -> Substance(x))", "exists x.(Element(x) & Substance(x))", "all x.(Element(x) -> Substance(x))"]}
{"id": "entailmentbank_validation_733", "nl": "element 3 turning green is an example of a substance turning green.", "fol": "", "prediction": ["all x.(TurningGreen(x) -> SubstanceTurningGreen(x))", "all x.((Element3) & TurningGreen(x)) -> TurningGreen(x))", "all x.((Element3 & TurningGreen(x)) -> TurningGreen(x))", "all x.(TurningGreen(x) -> SubstanceTranquility(x))", "all x.((Element3(x) & TurningGreen(x)) -> TurningGreen(x))", "all x.((Element3 & TurningGreen(x)) -> TurningGreen(x))", "all x y.((Element(x) & Substance(y) & TurnsGreen(x)) -> IsTendingGreen(x))", "all x.((Element3) & TurningGreen(x)) -> TurnsGreen(x))", "all x.((Element3 & TurnsGreen(x)) -> TurnsGreen(x))", "all x.((Substance(x) & Element3TurningGreen(x)) -> TurningGreen(x))", "all x.((Element(x) & OnElement3(x) & TurningGreen(x)) -> TurningGreen(x))", "all x.(Reinvents(x,n,x) -> TurningGreen(x))", "all x.((Element3,TurningGreen) & Substance(x)) -> TurningGreen(x))", "all x y.((Element3 & Substance(y) & TurnsGreen(y)) -> TurnsGreen(y))", "all x.((Element3) & TurningGreen(x)) -> TurningGreen(x))", "all x.(TurningGreen(x) -> SubstanceTurningGreen(x))"]}
{"id": "entailmentbank_validation_734", "nl": "if the color of a substance changes then a chemical change may have occurred.", "fol": "", "prediction": ["all x.((Substance(x) & ColorChange(x)) -> ChemicalChangeOccurred(x))", "all x.(ChangeColor(x) -> ChemicalChange(x))", "all x.((Substance(x) & ColorChange(x)) -> ChemicalChangeMayHavenCurrent(x))", "all x.((Substance(x) & ColorChange(x)) -> ChemicalChangeOccurs(x))", "all x y.((Substance(x) & Color(y) & Changes(x,y)) -> ChemicalChangeOccurs(x))", "all x.(ChangeOf(x,Color) -> ChemicalChangeOccurred(x))", "all x y.((Substance(x) & ColorChange(x,y) & ChemicalChange(y)) -> ChemicalChangeOccurred(y))", "all x.((Substance(x) & ColorChange(x)) -> ProcessedChange(x))", "all x y.((Substance(x) & ColorChange(x) & ChemicalChange(y)) -> MayAccurred(x,y))", "all x.((Substance(x) & ColorChange(x)) -> MayHaveChemicalChange(x))", "all x y.((Substance(x) & Substance(y) & ColorChange(x,y)) -> MightHaveSurvowedChemicalChange(x))", "all x y.((Substance(x) & Color(x,y) & Changed(x)) -> ChemicalChange(y))", "all x.((Substance(x) & ColorChange(x)) -> ChemicalChangeOccurs(x))", "all x.((Substance(x) & ColorChange(x)) -> ChemicalChangeOccurred(x))", "all x.((Substance(f) & ColorChange(f)) -> ChemicalChange(f))", "all x y.((Substance(x) & ColorChange(x) & ChemicalChange(y)) -> MightHaveChemicalChange(x,y))"]}
{"id": "entailmentbank_validation_735", "nl": "a chemical change may occur to element 3.", "fol": "", "prediction": ["all x.((ChangeChemical(x) & Element3)) -> MayOccursTo(x,element3))", "all x.(ChemicalChange(x) -> Element3(x))", "all x.(ChangeChemical(x) -> MayOccurToElement3(x))", "all x.(ChemicalChange(x) -> MayOccurToElement3. (ChemicalChange(x) -> Element3.))", "all x y.((Element3Element(x) & ChemicalChange(y)) -> MayOccur(x,y))", "all x.(ChemicalChange(x) -> MayOccurToElement3(x))", "all x.(ChemicalChange(x) -> ObservableToElement3(x))", "all x y.((Element3 & Element3(x)) -> ChemicalChangeOccurredCompletely(y))", "all x y.((Element3(x) & Element3(y)) -> MayChangeChemical(x,y))", "all x y.((ChemicalChange(x) & Element3) & ChemicalChange(y)) -> MayOccurTo(x,y))", "all x y.((ChemicalChange(x) & Element(y)) -> MAYOccur(x,y))", "all x y z.((ChemicalChange(x) & Elements3(y) & Subid(z)) -> ObjectChange(x,y,z))", "exists x.(ChemicalChange(x) -> MayOccurToElement(x))", "all x.(ChemicalChange(x),element3) -> MayOccur(x,element3))", "all x.(ChangeChemical(x) -> Element3(x))", "all x y z.((Element(x) & ChemicalChange(y) & Element3M) & ChemicalChange(z)) -> MayOccur(x,y,z))"]}
{"id": "entailmentbank_validation_736", "nl": "fire is a kind of chemical reaction.", "fol": "", "prediction": ["all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_737", "nl": "fire causes burning.", "fol": "", "prediction": ["all x.(Fire(x) -> CausesBurning(x))", "all x y.((Fire(x) & Burning(y)) -> Causes(x,y))", "all x y.((Fire(x) & Burning(y)) -> Causes(x,y))", "all x.(Fire(x) -> CausesBurning(x))", "all x.((Fire(x) & CausesBurning(x)) -> CausesBurning(x))", "all x.(Fire(x) -> CausesBrunking(x))", "all x.(Fire(x) -> CausesBurning(x))", "all x.(Fire(x) -> CausesBurning(x))", "all x.(Fire(x) -> CausesBurning(x))", "all x.(Fire(x) -> CausesBurning(x))", "all x y.((Fire(x) & Burning(y)) -> Causes(x,y))", "all x.(Fire(x) -> CausesBurning(x))", "all x.(Fire(x) -> CausesBurning(x))", "all x y.((Fire(x) & Burning(y)) -> Causes(x,y))", "all x.(Fire(x) -> CausesBurning(x))", "all x.(Fire(x) -> CausesBurning(x))"]}
{"id": "entailmentbank_validation_738", "nl": "burning something with fire is a kind of chemical reaction.", "fol": "", "prediction": ["all x y.((Burning(x) & Fire(x) & Something(y)) -> ChemicalReaction(x))", "all x.((BurnsWithFire(x) & ChemicalReaction(x)) -> ChemicalReaction(x))", "all x y.((Burning(x) & Fire(y)) -> ChemicalReaction(x))", "all x.((BurningWithFire(x) & ChemicalReaction(x)) -> ChemicalReaction(x))", "all x.((Burning(x) & UsingFire(x)) -> ChemicalReaction(x))", "all x y.((Burning(x) & Fire(y)) -> ChemicalReaction(x,y))", "all x y.((BurningWithFire(x) & Things(y)) -> ChemicalReaction(x))", "all x y.((Burning(x,y) & Fire(y)) -> ChemicalReaction(x))", "all x y.((Burning(x) & Fire(y)) -> ChemicalReaction(x))", "all x.((BurningWithFire(x) & ChemicalReaction(x)) -> ChemicalReaction(x))", "all x y.((Burning(x,y) & Fire(y)) -> ChemicalReaction(x))", "all x.(BurningWithFire(x) -> ChemicalReaction(x))", "all x y.((Burns(x,y) & Fire(y)) -> ChemicalReaction(x))", "all x y.((GasReaction(x) & Fire(y) & Burns(x,y)) -> Chemical(x))", "all x y.((BurningWithFire(x) & Fire(y)) -> ChemicalReaction(x))", "all x.((BurningWithFire(x) & ChemicalReaction(x)) -> ReactsIn(x))"]}
{"id": "entailmentbank_validation_739", "nl": "a lit candle is a source of fire.", "fol": "", "prediction": ["all x.((LitCandle(x) & SourceOfFire(x)) -> SourceOfFire(x))", "all x.(LitCandle(x) -> SourceOfFire(x))", "all x.(LitCandle(x) -> SourceOfFire(x))", "all x.(Candle(x) & Lit(x)) -> SourceOfFire(x))", "all x.(LitCandle(x) -> SourceOfFire(x))", "all x.(LitCandle(x) -> SourceOfFire(x))", "all x.(LitCandle(x) -> SourceOfFire(x))", "all x.(LitCandle(x) -> SourceOfFire(x))", "all x.(LitCandle(x) -> SourceOfFire(x))", "all x.(LitCandle(x) -> SourceOfFire(x))", "all x.((Candle(x) & Led(x)) -> SourceOfFire(x))", "all x.(LitCandle(x) -> SourceOfFire(x))", "all x.(LitCandle(x) -> SourceOfFire(x))", "all x y.((LitCandle(x) & Candle(y)) -> SourceOfFire(x))", "all x.(LitCandle(x) -> SourceOfFire(x))", "all x.((Candle(x) & Lit(x)) -> SourceOfFire(x))"]}
{"id": "entailmentbank_validation_740", "nl": "burning something with a lit candle is a kind of chemical reaction.", "fol": "", "prediction": ["all x.(Burning(x) -> ChemicalReaction(x))", "all x.((Burning(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x.((Burning(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x y z.((Burning(x,y) & LitCandle(y) & Object(z)) -> ChemicalReaction(x))", "all x y.((Burning(x,y) & LitCandle(x)) -> ChemicalReaction(x))", "all x y.((Firing(x) & LitCandle(x)) -> ChemicalReaction(y))", "all x.((Filling(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x y.((Burn(x) & LitCandle(y) & Something(x)) -> ChemicalReaction(x))", "all x y.((Burning(x) & LitCandle(y) & Has(x,y)) -> ChemicalReaction(x,y))", "all x.((BurningWithLitCandle(x) & SomethingNotLit(x)) -> ChemicalReaction(x))", "all x y.((Burning(x,y) & LitCandle(y)) -> ChemicalReaction(x))", "all x.((Candle(x) & Burned(x)) -> ChemicalReaction(x))", "all x y.((Burning(x,y) & LitCandle(y)) -> ChemicalReaction(x))", "all x y.((Burning(x) & LitCandle(y)) -> ChemicalReaction(x))", "all x.(BurningWithLitCandle(x) -> ChemicalReaction(x))", "all x y.((Braining(x) & LitCandle(y)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_741", "nl": "magnesium is a kind of substance.", "fol": "", "prediction": ["all x.(Magnesium(x) -> Material(x))", "all x.(Magnesium(x) -> Substance(x))", "all x.(Mesh(x) -> Substance(x))", "all x.(Magnesium(x) -> Substance(x))", "all x.(Magnesium(x) -> Substance(x))", "all x.(Magnesium(x) -> Substance(x))", "all x.(Magnesium(x) -> Substance(x))", "all x.(Magnesium(x) -> Substance(x))", "all x.(Magnesium(x) -> Substance(x))", "all x.(Magnesium(x) -> Material(x))", "all x.(Magnesium(x) -> Substance(x))", "all x.(Magnetic(x) -> Substance(x))", "all x.(Magnesium(x) -> Substance(x))", "all x.(Magnesium(x) -> Substance(x))", "all x.(Magnesium(x) -> ArtOfSubstance(x))", "all x.(Magnesium(x) -> Substance(x))"]}
{"id": "entailmentbank_validation_742", "nl": "burning magnesium with a lit candle is a kind of chemical reaction.", "fol": "", "prediction": ["all x.((BurningMagnesium(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x.((BurningMagnesium(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x.((BurningMagnesiumWithLitCandle(x) & BurningMagnesiumWithLitCandle(x)) -> ChemicalReaction(x))", "all x.((BurningMagnesium(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x y.((BurningMagnesium(x) & LitCandle(y)) -> ChemicalReaction(x))", "all x.((BurningMagnesium(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x.((BurnsMagnesiumWithLitCandle(x)) -> ChemicalReaction(x))", "all x.((BurningMagnesium(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x.((BurningMagnesium(x) & LitChandle(x)) -> ChemicalReaction(x))", "all x.((BoilingMagnesium(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x y.((BurnMelium(x) & LitCandle(y)) -> ChemicalReaction(x))", "all x y.((BurningMagnesium(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x y.((BurningMagnesium(x) & LampedCandle(y)) -> ChemicalReaction(x))", "all x.((BurningMagnesium(x) & BurningWithLitCandle(x)) -> ChemicalReaction(x))", "all x y.((BurnsMagnesium(x) & LitCandle(y)) -> ChemicalReaction(x,y))", "all x.(BurningMagnesiumWithLitCandle(x) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_743", "nl": "chemical reactions cause chemical change.", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> CausesChange(x))", "all x.(ChemicalReaction(x) -> CausesChemicalChange(x))", "all x.(ChemicalReaction(x) -> ChemicalChange(x))", "all x.(ChemicalReaction(x) -> CausesChemicalChange(x))", "all x y.((ChemicalReaction(x) & ChemicalReaction(y)) -> CausesChange(x,y))", "all x y.((ChemicalReaction(x) & ChemicalChange(y)) -> Causes(x,y))", "all x y.((ChemicalReaction(x) & ChemicalChange(y)) -> Causes(x,y))", "all x.(ChemicalReaction(x) -> CauseChemicalChange(x))", "all x.(ChemicalReaction(x) -> CausesChemicalChange(x))", "all x y.((ChemicalReaction(x) & ChemicalChange(y)) -> Causes(x,y))", "all x y z.((ChemicalReaction(x) & ChemicalChange(y) & Chemical(z)) -> Causes(x,y,z))", "all x y.((ChemicalReaction(x) & ChemicalChange(y)) -> Cause(x,y))", "all x.(ChemicalReaction(x) -> CausesChemicalChange(x))", "all x y.((ChemicalReaction(x) & ChemicalChange(y)) -> Causes(x,y))", "all x.(ChemicalReaction(x) -> CausesChemicalChange(x))", "all x y.((ChemicalReaction(x) & ChemicalChange(y)) -> Causes(x,y))"]}
{"id": "entailmentbank_validation_744", "nl": "burning magnesium with fire will lead to a chemical change.", "fol": "", "prediction": ["all x.((BoilingMagnesium(x) & Fire(x)) -> ChemicalChange(x))", "all x y.((BurnsMagnesiumWithFire(x) & ChemicalChange(y)) -> LeadsTo(x,y))", "all x.((BurningMagnesiumWithFire(x) & ChemicalChange(x)) -> LeadsTo(x,y))", "all x.((BoilingMagnesiumWithFire(x)) -> ChemicalChange(x))", "all x y z.((BurningMagnesium(x) & Fire(y) & ChemicalChange(z)) -> LeadsTo(x,y,z))", "all x y.((BurningMagnesiumWithFire(x) & ChemicalChange(y)) -> OrganicChange(x,y))", "all x.((BurningMagnesium(x) & Fire(x)) -> ChemicalChange(x))", "all x.((BrowningMethaneWithFire(x) & ChemicalChange(x)) -> LeadsToChange(x))", "all x y.((WoodingMagnesiumWithFire(x) & ChemicalChange(y)) -> LeadsTo(x,y))", "all x.((BoilingMagnesiumWithFire(x) & ChemicalChange(x)) -> LeadTo(x,Magnesium,Rigor,ChemicalChange))", "all x.((BurningMagnesiumWithFire(x) & LeadsToChemicalChange(x)) -> LeadsToChange(x))", "all x.((BurningMagnesium(x) & Fire(x)) -> ChemicalChange(x))", "all x y.((Frosting(x,y) & Fire(y)) -> ChemicalChange(x))", "all x y.((BurningMagnesiumWithFire(x) & ChemicalChange(y)) -> LeadsTo(x,y))", "all x.((CirculatingMagnesiumWithFire(x)) -> ChemicalChange(x))", "all x y.((Burning(x,Magnesium) & Fire(x)) -> ChemicalChange(y))"]}
{"id": "entailmentbank_validation_745", "nl": "chemical reactions cause new materials to form.", "fol": "", "prediction": ["all x y.((ChemicalReaction(x) & ChemicalReaction(y)) -> (CausesNewMaterials(x,y)))", "all x.(ChemicalReaction(x) -> CausesNewMaterials(x))", "all x.(ChemicalReaction(x) -> FormsNewMaterials(x))", "all x.(ChemicalReaction(x) -> NewMaterial(x))", "all x y.((ChemicalReaction(x) & Material(y)) -> CausesNewMaterials(x,y))", "all x y.((ChemicalReaction(x) & Material(y)) -> Causes(x,y))", "all x.(ChemicalReaction(x) -> CausesNewMaterials(x))", "all x.(ChemicalReaction(x) -> (CausesNewMaterials(x) & FormsNewMaterials(x)))", "all x.(ChemicalReaction(x) -> CausesNewMaterials(x))", "all x.(ChemicalReaction(x) -> CausesNewMaterials(x))", "all x y.((ChemicalReaction(x) & Material(y)) -> CausesFormation(x,y))", "all x.(ChemicalReaction(x) -> CausesNewMaterials(x))", "all x.(ChemicalReactions(x) -> NewMaterialsForm(x))", "all x y.((ChemicalReaction(x) & Material(y)) -> Causes(x,y))", "all x y z.((ChemicalReaction(x) & Material(y) & ChemicalReaction(z)) -> CreateSpace(x,y,z))", "all x y z.((ChemicalReaction(x) & Material(y) & ChemicalReaction(z)) -> CausesFormation(x,y))"]}
{"id": "entailmentbank_validation_746", "nl": "chemical change is a kind of chemical reaction.", "fol": "", "prediction": ["all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x y.((Chemistry(x) & ChemicalReaction(y)) -> ChemicalChange(x,y))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x.(ChemicalMigration(x) -> ChemicalReaction(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_747", "nl": "chemical changes cause new materials to form.", "fol": "", "prediction": ["all x.(ChemicalChange(x) -> CausesNewMaterials(x))", "all x y.((ChemicalChange(x) & Material(y)) -> CausesFormation(x,y))", "all x y.((ChemicalChange(x) & Material(y)) -> CausesNew(x,y))", "all x y.((ChemicalChange(x) & Material(y)) -> CanConductNewProduction(x,y))", "all x.(ChemicalChange(x) -> CausesNewMaterials(x))", "all x.(ChemisticalChange(x) -> NewMaterialsOf(x,y))", "all x.(ChemicalChange(x) -> CausesNewMaterialsToForm(x))", "all x.(ChemicalChange(x) -> CausesNewMaterials(x))", "all x y.((ChemicalChange(x) & ChemicalChange(y)) -> CausesNewMaterials(x,y))", "all x.(ChemicalChange(x) -> CausesNewMaterials(x))", "all x.(ChemicalChange(x) -> CausesNewMaterialsFormation(x))", "all x.(ChemicalChange(x) -> NewMaterialsForm(x))", "all x.(ChemicalChange(x) -> CausesNewMaterials(x))", "all x.(ChemicalChange(x) -> NewMaterialsForm(x))", "all x.((ChemicalChange(x) & CausesNewMaterials(x)) -> CausesMaterials(x,y))", "all x.(ChemicalChange(x) -> CausesNewMetalFormation(x))"]}
{"id": "entailmentbank_validation_748", "nl": "an example of a chemical property is the elements making up a compound.", "fol": "", "prediction": ["all x.(ChemicalProperty(x) -> Compound(x))", "all x.((Elements(x) & Compound(x)) -> ChemicalProperty(x))", "all x.(ChemicalProperty(x) -> MakesCompound(x))", "all x.(ChemicalProperty(x) -> CompleteCompound(x))", "all x.(ChemicalProperty(x) -> AddedElements(x))", "all x.(ChemicalProperty(x) -> (ElementsMakingUpCompound(x)))", "all x.((ElementsMakeupCompound(x) & ChemicalProperty(x)) -> MakeUpCompound(x))", "all x.(ChemicalProperty(x) -> CompoundElements(x))", "all x.((ChemicalProperty(x) & Compound(x)) -> ElementsMakingUp(x),Compound))", "all x.(ChemicalProperty(x) -> ElementsMakingUpCompound(x))", "all x.(ChemicalProperty(x) -> CompoundElements(x))", "all x.((ElementsElementsCompound(x)) -> ChemicalProperty(x))", "all x y.((ChemicalProperty(x) & Compound(y)) -> ElementsMakingUp(x,y))", "all x.(ChemicalProperty(x) -> ElementsMakingUpCompound(x))", "all x y.((ChemicalProperty(x) & Compound(y) & Amount(x,y)) -> ElementsMakingUp(x,y))", "all x y.((ChemicalProperty(x) & Compound(y)) -> Compound(x,y))"]}
{"id": "entailmentbank_validation_749", "nl": "water is a kind of compound.", "fol": "", "prediction": ["all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "all x.((Water(x) & Compound(x)) -> Compound(x))", "all x y.((Water(x) & Compound(y)) -> Compound(x,y))", "all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))", "all x.(Water(x) -> Compound(x))"]}
{"id": "entailmentbank_validation_750", "nl": "an example of chemical property is the elements making up water.", "fol": "", "prediction": ["all x.((Elements(x) & MakeUpWater(x)) -> ChemicalProperty(x))", "all x.(ChemicalProperty(x) -> TheElementsMakingUpWater(x))", "all x.((Elements(x) & Water(x)) -> ChemicalProperty(x))", "all x.(ChemicalProperty(x) -> ElementsMakingUpWater(x))", "all x.(ChemicalProperty(x) -> MakesUpWater(x))", "all x.((Elements(x) & Water(x)) -> ChemicalProperty(x))", "all x.(ChemicalProperty(x) -> ElementsMakingUpWater(x))", "all x.((Elements(x) & MakesUpWater(x)) -> ChemicalProperty(x))", "all x.((Elements(x) & Water(x)) -> ChemicalProperty(x))", "all x.((Elements(x) & Water(y)) -> ChemicalProperty(x))", "all x.((Elements(x) & MakesUpWater(x)) -> ChemicalProperty(x))", "all x.((Elements(x) & Water(x)) -> ChemicalProperty(x))", "all x.(ChemicalProperty(x) -> (ElementsGainingUpWater(x)))", "all x.((Elements(x) & MakingUpWater(x)) -> ChemicalProperty(x))", "all x.(ChemicalProperty(x) -> (ElementsMakingUpWater(x)))", "all x y.((Elements(x) & Water(y) & MakeUp(x,y)) -> ChemicalProperty(x))"]}
{"id": "entailmentbank_validation_751", "nl": "a chemical property of water is that it is made of hydrogen and oxygen.", "fol": "", "prediction": ["all x.(ChemicalPropertyOfWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.((WaterProperty(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> ChemicalPropertyOfWater(x))", "all x.((Water(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> ChemicalProperty(x,water))", "all x.((Water(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> ChemicalPropertyOf(x))", "all x.(ChemicalPropertyOfWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.((ChemicalPropertyOfWater(x) & Hydrogen(x) & Oxygen(x)) -> MadeOf(x,y,z))", "all x.((ChemicalPropertyOfWater(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> MadeOfOxygen(x))", "all x.((Water(x) & Hydroxygen(x) & Oxygen(x)) -> ChemicalProperty(x))", "all x.((Water(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> ChemicalProperty(x))", "all x.((Water(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> ChemicalProperty(x))", "all x.((ChemicalPropertyOfWater(x) & Hydrogen(x) & Oxygen(x)) -> MadeOf(x,y))", "all x.(Water(x) -> MadeOfHydrogenAndOxygen(x))", "all x.((Water(x) & MadeOf(x,Hydrogen) & MadeOf(x,Oxygen)) -> ChemicalProperty(x))", "all x.((Water(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> ChemicalProperty(x))", "all x.(ChemicalPropertyOfWater(x) -> (Hydrogen(x) & Oxygen(x)))", "all x.((ChemicalPropertyOfWater(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> MakesOf(x,Hydrogen,Oxygen))"]}
{"id": "entailmentbank_validation_752", "nl": "a compound can be chemically separated into the elements that it is made of.", "fol": "", "prediction": ["all x.(Compound(x) -> ChemicallySeparatedIntoElements(x))", "all x.(Compound(x) -> ChemicallySeparatedIntoElements(x))", "all x.(Compound(x) -> CanBeChemicallySeparated(x))", "all x.(Compound(x) -> ChemicallySeparatedIntoElements(x))", "all x y.((Compound(x) & Element(y)) -> CanBeChemicallySeparated(x,y))", "all x y.((Compound(x) & (Element(y) | Compound(y))) -> ChemicallySeparated(x,y))", "all x.(Compound(x) -> ChemicallySeparatedForElements(x))", "all x.(Common(x) -> ChemicallySeparatedToElements(x))", "all x.(Compound(x) -> ChemicallySeparatedIntoElements(x))", "all x.(Compound(x) -> CanBeChemicallySeparated(x))", "all x.(Compound(x) -> (ChemicallySeparatedIntoElements(x) & MadeOf(x)))", "all x y.((Compound(x) & Compound(y) & MadeOf(y,x)) -> ChemicallySeparatedIntoElements(x))", "all x y z.((Compound(x) & Element(y) & Compound(z)) -> (ChemicallySeparated(x,y) & MadeOf(y,z)))", "all x y.((Compound(x) & MadeOf(y)) -> ChemicallySeparated(x,y))", "all x.(Compound(x) -> CanBeChemicallySeparatedIntoElements(x))", "all x y.((Compound(x) & Element(y)) -> ChemicallySeparatedInto(x,y))"]}
{"id": "entailmentbank_validation_753", "nl": "water can be separated into hydrogen and oxygen.", "fol": "", "prediction": ["all x.(Water(x) -> (SeparateWaterFilter\" & SeparateWaterFilter(x\")))", "all x.(Water(x) -> (Hydrogen(x) | Oxygen(x)))", "all x.(Water(x) -> (Hydrogen(x) | Oxygen(x)))", "all x y.((Water(x) & Hydrogen(y) & Oxygen(y)) -> SeparatedIn(x,y))", "all x.(Water(x) -> (Hydrogen(x) | Oxygen(x)))", "all x.(Water(x) -> (SeparatesInto(x,hydrogen) & SeparatesInto(x,oxygen)))", "all x.(Water(x) -> (WaterPenetration(x,hydrogen) | WaterPenetration(x,oxygen)))", "all x.(Water(x) -> (SeparatedInto(x,Hydrogen,Oxygen)))", "all x.(Water(x) -> (Separate(x,Hydrogen) | Separate(x,Oxygen)))", "all x.(Water(x) -> (SeparateInto(x,Hydrogen) & SeparateInto(x,Oxygen)))", "all x.(Water(x) -> (SeparatedInto(x,Hotter) | SeparatedInto(x,Oxygen)))", "all x.(Water(x) -> (Hydrogen(x) & Oxygen(x)))", "all x.(Water(x) -> (SeparatedIntoHydrogen(x) & SeparatedIntoOxygen(x)))", "all x y.((Water(x) & Hydrogen(y)) -> SeparatedInto(x,y))", "all x.(Water(x) -> (Separate(x,Hydrogen) | Separate(x,Oxygen)))", "all x y.((Water(x) & Hydrogen(y)) -> SeparatedInto(x,y))"]}
{"id": "entailmentbank_validation_754", "nl": "carbon dioxide is a new substance produced by sodium bicarbonate.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> (NaturalSubstance(x) & ProducedBySodiumCirculate(x)))", "all x.(CarbonDioxide(x) -> ProducedBySodiumBicarbonate(x))", "all x y.((CarbonDioxide(x) & NaphthalicBicarbonate(y)) -> NewSubstance(x,y))", "all x.(CarbonDioxide(x) -> (NaturalSubstance(x) & ProducedBySulfurBicarbonate(x)))", "all x.(CarbonDioxide(x) -> (NaturalSubstance(x) & ProducedBySodiumBicarbonate(x)))", "all x.(CarbonDioxide(x) -> ProducedBySodiumBicarbonate(x))", "all x.(CarbonDioxide(x) -> (nothingnew(x) & ProducedBySodiumBicarbonate(x)))", "all x.(CarbonDioxide(x) -> (SodiumBicarbonate(x) & NewSubstance(x)))", "all x.(CarbonDioxide(x) -> (NaturalSubstance(x) & ProducedBySodiumBicarbonate(x)))", "all x.(CarbonDioxide(x) -> NewSubstance(x))", "all x.(CarbonDioxide(x) -> ProducedBySodiumBicarbonate(x))", "all x.(CarbonDioxide(x) -> (NewSubstance(x) & ProducedBySodiumBicarbonate(x)))", "all x.(CarbonDioxide(x) -> ProducedBySodiumBicarbonate(x))", "all x.(CarbonDioxide(x) -> (NewSubstance(x) & ProducedBySodiumBicarbonate(x)))", "all x.(Bicarbonate(x) -> ProducedBySodiumBicarbonate(x))", "all x.(CarbonDioxide(x) -> (NewSubstance(x) & ProducedBySodiumBicarbonate(x)))"]}
{"id": "entailmentbank_validation_755", "nl": "chemical reactions cause new substances to form.", "fol": "", "prediction": ["all x y.((ChemicalReaction(x) & Substance(y)) -> Awakens(x,y))", "all x y.((ChemicalReaction(x) & Substance(y)) -> CausesNewSubstancesToForm(x,y))", "all x y.((ChemicalReaction(x) & ChemicalSubstance(y)) -> CausesFormation(x,y))", "all x.(ChemicalReaction(x) -> CausesNewSubstances(x))", "all x.(ChemicalReaction(x) -> CausesNewSubstances(x))", "all x y.((ChemicalReaction(x) & Substance(y)) -> CausesFormation(x,y))", "all x.(ChemicalReaction(x) -> CausesNewSubstances(x))", "all x.(ChemicalReaction(x) -> CausesSubstanceFormation(x))", "all x.(ChemicalReaction(x) -> (CausesNewSubstances(x)))", "all x y.((ChemicalReaction(x) & Chemical(y)) -> CausesNewSubstances(x,y))", "all x y.((ChemicalReaction(x) & Substance(y)) -> CausesToForm(x,y))", "all x y.(ChemicalReaction(x) -> CausesNewSubstancesForm(y))", "all x y.((ChemicalReaction(x) & Substance(y)) -> CausesFormation(x,y))", "all x y.((Protocol(x) & Substance(y)) -> CausesToForm(x,y))", "all x y.((ChemicalReaction(x) & Substance(y)) -> CausesToForm(x,y))", "all x y.((ChemicalReaction(x) & Substance(y)) -> CausesToForm(x,y))"]}
{"id": "entailmentbank_validation_756", "nl": "sodium bicarbonate releasing carbon dioxide is a chemical reaction.", "fol": "", "prediction": ["all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x.(SodiumBicarbonate(x) -> ReleasesCarbonDioxide(x))", "all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & CarbonDioxide(x)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & CarbonDioxide(x)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x.(Liberating(x,CarbonDioxide) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_757", "nl": "an example of a chemical property is how a material reacts chemically.", "fol": "", "prediction": ["all x.(ChemicalProperty(x) -> HowMaterialReactsChemically(x))", "all x.((Material(x) & ReactsChemically(x)) -> ChemicalProperty(x))", "all x y.((ExempleOfChemicalProperty(x) & Material(y)) -> ReactsChemically(y))", "all x.(ChemicalProperty(x) -> ReactsChemically(x))", "exists x.(DefinitionOfChemicalProperty(x) & MaterialReactsChemically(x))", "all x.(ChemicalProperty(x) -> (ReactsChemically(x) & Concrete(x)))", "all x.(ChemicalProperty(x) -> ReactsChemically(x))", "all x y.((Material(x) & ChemicalProperty(y)) -> ReactsChemically(x))", "all x y.((Material(x) & Material(y) & ReactsAlone(x,y)) -> ChemicalProperty(x))", "all x.(ChemicalProperty(x) -> ReactsChemically(x))", "all x.((Material(x) & ChemicalProperty(x)) -> ReactsChemically(x))", "all x.((Material(x) & ChemicalProperty(x)) -> ReactsChemically(x))", "all x.(ChemicalProperty(x) -> (ReactsChemically(x) & Material(z)))", "all x.(ChemicalProperty(x) -> (ReactsChemically(x) & Material(x)))", "all x.((Material(x) & ChemicalProperty(x)) -> BiologicalReaction(x))", "all x.(ChemicalProperty(x) -> (ReactsChemically(x) | Materials(x)))"]}
{"id": "entailmentbank_validation_758", "nl": "releasing carbon dioxide is a kind of chemical property of sodium bicarbonate.", "fol": "", "prediction": ["all x.((Releasing(x,carbonDioxide) & NaOHBicarbonate(x)) -> ChemicalProperty(x))", "all x.(ReleasingCarbonDioxide(x) -> ChemicalPropertyOfSodiumBicarbonate(x))", "all x.(RainingCarbonDioxide(x) -> ChemicalPropertyOfSodiumBicarbonate(x))", "all x.(ReleasingCarbonDioxide(x) -> (SodiumBicarbonate(x) & ChemicalProperty(x)))", "all x y z.((CarbonDioxide(x) & NabisonBicarbonate(y) & ChemicalProperty(x,y)) -> Releases(x,z))", "all x.((ReleasesCarbonDioxide(x) & LikeSodiumBicarbonate(x)) -> ChemicalProperty(x))", "all x y.(((Property(x) & ReleasesCarbonDioxide(x) & NatriumBicarbonate(y)) -> ChemicalProperty(x,y))", "all x.((LiberatesCarbonDioxide(x) & SplendidSodiumBicarbonate(x)) -> ChemicalProperty(x))", "all x.((ReleasesCarbonDioxide(x) & SaltyBicarbonate(x)) -> ChemicalProperty(x))", "all x.((ReleavingCarbonDioxide(x) & HydrogenBicarbonate(x)) -> ChemicalProperty(x))", "all x.((ReleasesCarbonDioxide(x) & NatalBicarbonate(x)) -> ChemicalProperty(x))", "all x.((ReleasesCarbonDioxide(x) & NatriumBicarbonate(x)) -> ChemicalProperty(x))", "all x.((ReleasesCarbonDioxide(x) & SodiumBicarbonate(x)) -> ChemicalProperty(x))", "all x.((PropertyOfSodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalPropertyOfSodiumBicarbonate(x))", "all x.(ReleasingCarbonDioxide(x) -> (SodiumBicarbonate) & ChemicalProperty(x)))", "all x.(ReleasesCarbonDioxide(x) -> ChemicalPropertyOfSodiumBicarbonate(x))"]}
{"id": "entailmentbank_validation_759", "nl": "a pencil is a kind of object.", "fol": "", "prediction": ["all x.(Pencil(x) -> ArtOfObject(x))", "all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> IsObject(x))", "all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> Object(x))"]}
{"id": "entailmentbank_validation_760", "nl": "sharpening a pencil changes the shape of the pencil.", "fol": "", "prediction": ["all x y.((Pencil(x) & Sharpens(x,y)) -> ChangesShapeOf(y,x))", "all x y.((Pencil(x) & Sharpening(x)) -> ChangesShapeOf(x,y))", "all x y.((Pencil(x) & Sharpening(x)) -> ChangesShapeOf(y,x))", "all x y z.((Pencil(x) & Sharpening(x,y) & Pencil(y) & Shape(z)) -> ChangesShapedShapedShape(x,y,z))", "all x.((Pencil(x) & Sharpens(x)) -> ChangesShape(x))", "all x.(NatureShaping(x) -> ChangesShapeOfPencil(x))", "all x y z.((Pencil(x) & Sharpening(y) & Pencil(z)) -> ChangesShapeOf(x,y,z))", "all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShapeOf(x,y))", "all x.(SharpeningPencil(x) -> ChangesShape(x,y))", "all x y.((Pencil(x) & Sharpening(x)) -> ChangesShapeOf(x,y))", "all x.(Sharpening(x) -> ChangesShapeOfPencil(x))", "all x.(Sharpening(x) -> ChangesShapeOfPencil(x))", "all x y z.((Pencil(x) & Sharpening(y) & Pencil(z) & ChangesShape(x,z)) -> ChangesShape(x,z))", "all x.(SharpeningPencil(x) -> ChangesShapeOfPencil(x))", "all x y.((Pencil(x) & Sharpens(x,y)) -> ChangesShape(x))", "all x.(Sharpening(x) -> ChangesShapeOfPencil(x))"]}
{"id": "entailmentbank_validation_761", "nl": "sharpening a pencil changes the shape of an object.", "fol": "", "prediction": ["all x y.((Pencil(x) & Sharpening(x)) -> ChangesShapeOfObject(y))", "all x y.((Pencil(x) & Sharpening(x,y) & Object(y)) -> ChangesShapeOf(x,y))", "all x.(SharpeningPencil(x) -> ChangesShapeOfObject(x))", "all x.((Pencil(x) & Sharpens(x)) -> ChangesShapeOfObject(x))", "all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShape(y))", "all x y.((Pencil(x) & Sharpens(x,y)) -> ChangesShapeOfObject(x,y))", "all x y.((Pencil(x) & Sharpens(x,y)) -> ChangesShapeOfObject(x,y))", "all x y.((Pencil(x) & Sharpening(x)) -> ChangesShapeOfObject(y))", "all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShapeOfObject(x,y))", "all x y.((Pencil(x) & Sharpening(x)) -> ChangesShapeOfObject(y))", "all x y.((Pencil(x) & Sharpening(x) & Object(y)) -> ChangesShapeAt(x,y))", "all x.((Pencil(x) & Sharpens(x)) -> ChangesShape(x))", "all x.((Pencil(x) & Sharpens(x)) -> ChangesShapeOfObject(x))", "all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShapeOfObject(x,y))", "all x y z.((Pencil(x) & Sharpening(y) & Object(z)) -> ChangesShape(y,z))", "all x.((Pencil(x) & Sharpens(x)) -> ChangesShapeOfObject(x))"]}
{"id": "entailmentbank_validation_762", "nl": "tearing paper changes the shape of the paper.", "fol": "", "prediction": ["all x y.((TornPaper(x) & Paper(y)) -> ChangesShape(x,y))", "all x y z.((Paper(x) & Paper(y) & Tears(z)) -> ChangesShape(x,y,z))", "all x y.((TearingPaper(x) & Paper(y)) -> ChangedShape(x,y))", "all x.(TearingPaper(x) -> ChangesShapeOfPaper(x))", "all x.(TornPaper(x) -> ChangesShapeOfPaper(x))", "all x.(TorningPaper(x) -> ChangesShapeOfPaper(x))", "all x.(RottingPaper(x) -> ChangesShapeOfPaper(x))", "all x y.((TornPaper(x) & Paper(y)) -> ChangesShape(x,y))", "all x y z.((ArrovingPaper(x) & Paper(y) & Paper(z)) -> ChangesShape(x,y,z))", "all x y.(TearPaper(x) -> ChangesShapeOfPaper(x))", "all x y.((Paper(x) & Torn(y)) -> ChangesShape(x,y))", "all x y.((ShapedPaper(x) & Rotating(y,x)) -> ChangesShapeOfPaper(x))", "all x y.((Paper(x) & Tear(y)) -> ChangesShape(x,y))", "all x y.((TearingPaper(x) & Paper(y)) -> ChangesShape(x,y))", "all x.(TornsPaper(x) -> ChangesShapeOfPaper(x))", "all x y.((ThrowingPaper(x) & Paper(y)) -> ChangesShape(x,y))"]}
{"id": "entailmentbank_validation_763", "nl": "paper is a kind of object.", "fol": "", "prediction": ["all x.(Paper(x) -> Object(x))", "all x.(Paper(x) -> Object(x))", "all x.(Paper(x) -> Object(x))", "all x.(Paper(x) -> Object(x))", "all x.(Paper(x) -> Material(x))", "all x.(Paper(x) -> Object(x))", "all x.(Paper(x) -> Object(x))", "all x.(Paper(x) -> Object(x))", "all x.(Paper(x) -> Object(x))", "all x.(Paper(x) -> Object(x))", "all x.(Paper(x) -> Object(x))", "all x y z.((Paper(x) & Object(y) & Form#(z)) -> Paper(x))", "all x.(Paper(x) -> Object(x))", "all x.(Paper(x) -> Object(x))", "all x.(Paper(x) -> Object(x))", "all x.(Paper(x) -> Object(x))"]}
{"id": "entailmentbank_validation_764", "nl": "tearing paper changes the shape of an object.", "fol": "", "prediction": ["all x y.((RoasingPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x y.((TarningPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x y.((TornPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x y.((TroshingPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x.(TornPaper(x) -> ChangesShapeOfObject(x))", "all x y z.((Ordering(x) & Paper(y) & Object(z)) -> ChangesShape(x,y,z))", "all x.(TearingPaper(x) -> ChangesShapeOfObject(x))", "all x.(TornPaper(x) -> ChangesShapeOfObject(x))", "all x.(TornsPaper(x) -> ChangesShapeOfObject(x))", "all x y.((TornPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x y.((TornPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x y.((TornPaper(x) & Object(y)) -> ChangeShape(x,y))", "all x y.((TearingPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x y.((TurningPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x y z.((Paper(x) & Torn(y) & Object(z)) -> ChangesShape(x,z))", "all x y z.((TrippingPaper(x) & Object(y) & Text(z)) -> ChangesShape(x,y,z))"]}
{"id": "entailmentbank_validation_765", "nl": "sharpening a pencil and tearing paper both change the shape of the object.", "fol": "", "prediction": ["all x y.((SharpeningPencil(x) & TorningPaper(y)) -> (ChangesShapeOfObject(x,y)))", "all x.((Pencil(x) & Paper(y)) -> (Sharpening(x) & Torn(x)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x) & Tearing(x) & ChangesShape(x)))", "all x y.((Pencil(x) & Paper(y)) -> (Shakens(x,y) & Tears(x,y)))", "all x y z.((Pencil(x) & Paper(y) & Sharpening(x,y) & LettingsChange(x,z)) -> ChangesShape(x,y,z))", "all x y.((SharpeningPencil(x) & TorningPaper(y)) -> (ChangesShapeOfObject(x,y) & ChangesShapedShapeOfObject(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x) & Torning(x,y)))", "all x y.((Sharpening(x,y) & Pencil(y) & TornPaper(x)) -> ChangesShapeOfObject(y))", "all x y z.((Pencil(x) & Paper(y) & Sharpens(x,y) & Tears(x,z)) -> ChangesShapeOfObject(x,y,z))", "(SharpeningPencil(x) & TearingPaper(x))", "all x y.((Sharpening(x) & Sharpening(x) & Worn(x,y)) -> ChangeShapeOfObject(x))", "all x y.((Sharpening(x) & Sharpening(x) & TorningPaper(x)) -> (ChangesShapeOfObject(y) & ChangesShapeOfObject(y)))", "(Learning(Pencil) & Tearing(Paper) & Sharpens(Pencil) -> ChangesShapeOfObject(Pencil).", "all x y.((StrikingPencil(x) & RobbingPaper(x)) -> ChangesShapeOfObject(x))", "all x y.((Sharpening(x) & Sharpening(x) & Tearing(y)) -> (ChangesShape(x,y) & Object(y)))", "all x y.(((Pencil(x) & Paper(y)) -> (Shaken(x) & Torn(x,y)))"]}
{"id": "entailmentbank_validation_766", "nl": "shape is a property of the appearance of an object.", "fol": "", "prediction": ["all x y.((Shape(x) & Object(y)) -> PropertiesOfAppearance(x,y))", "all x y.((Shape(x) & Object(y)) -> PropertyOfAppearance(x,y))", "all x y.((Shape(x) & Object(y)) -> Property(x,y))", "all x.(Shape(x) -> AppearanceOfObject(x))", "all x y.((Shape(x) & Object(y)) -> PropertyOfAppearance(x,y))", "all x y.((Shape(x) & Object(y)) -> PropertyOfAppearance(x,y))", "all x.(Shape(x) -> AppearanceOfObject(x))", "all x.(Shape(x) -> PropertyOfAppearanceOfObject(x))", "all x.(Shape(x) -> AppearanceProperty(x))", "all x y z.((Shape(x) & Object(y) & Appearance(z)) -> PropertyOf(x,y,z))", "all x y.((Shape(x) & Object(y)) -> PropertyOfAppearance(x,y))", "all x.(Shape(x) -> PropertyOfAppearance(x))", "all x y.((Shape(x) & Object(y)) -> AppearanceProperty(x,y))", "all x.(Shape(x) -> PropertyOfAppearance(x))", "all x.(Shape(x) -> AppearanceProperty(x))", "all x.(Shape(x) -> Appearance(x))"]}
{"id": "entailmentbank_validation_767", "nl": "sharpening a pencil and tearing paper both change the appearance of the object.", "fol": "", "prediction": ["all x y.((Grandma(x) & Pencil(y) & Paper(z) & Sharpens(x,y) & Tears(x,z)) -> ChangesAppearance(x))", "all x y.((Pencil(x) & Paper(y) & Sharpens(x,y)) -> ChangesAppearance(x))", "all x y.((Pencil(x) & Paper(y)) -> (CandlesAppearance(x,y) | TorchesAppearance(x,y)))", "all x.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) | Torning(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Tears(x,y)))", "all x.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Tearing(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,z) & Ruining(z,y)))", "all x.((SharpeningPencil(x) & TorningPaper(x)) -> ChangedAppearance(x))", "all x y z.((Pencil(x) & Paper(y) & Sharpening(x) & Tears(x,y)) -> ChangesAppearance(x,y))", "((SharpeningPencil(x) & TearPaper(x)) = ChangesAppearance(x)))", "all x y.((Pencil(x) & Paper(y)) -> (Shaping(x,y) & Wearing(x,y)))", "one's own appearance changes between sharpening pencil and torningPaper(e))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Torn(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Torn(x,y)))", "all x y.((Sharpening(x) & Sharpening(x) & ThrobbingPaper(y)) -> ChangesAppearsOfObject(x,y))", "all x.((Pencil(x) & Paper(y)) -> (Sharpening(x) | Tripping(x)))"]}
{"id": "entailmentbank_validation_768", "nl": "appearance is a kind of physical property.", "fol": "", "prediction": ["all x.(Appearance(x) -> PhysicalProperty(x))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x.(AppearsToBePhysicalProperty(x) -> PhysicalProperty(x))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x.exists y.(PhysicalProperty(x,y) & Appearance(y))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x.(Appearance(x) -> PhysicalProperty(x))"]}
{"id": "entailmentbank_validation_769", "nl": "sharpending a pencil and tearing paper both change the physical property of the object.", "fol": "", "prediction": ["all x.((Pencil(x) & Paper(y)) -> (Shakes(x) & Tries(x,y)))", "all x y.((CulturalProperty(x) & SharpeningPencil(x) & TearsPaper(y)) -> ChangeDispatteriesRegardlessOfProperties(x,y))", "(SofteningPencil(sharp) & TorningPaper(sharp))", "all x.((SharpendingPencil(x) & TorningPaper(x)) -> ChangesPhysicalProperty(x))", "(Sharpending(sheer(s pencil) & Trolling(savepapier) & PhysicalProperty(s) & PhysicalProperty(s) & PhysicalProperty(s))", "all x y z.((Sharpending(x) & Pencil(y) & Paper(z)) -> (ChangesPhysicalProperty(x,y,z) & Torches(x,z)))", "all x y.((Sharpending(x) & Sharpening(x)) -> (ChangesPhysicalProperty(x,y) & BreaksPaper(x,y)))", "all x y.((Pencil(x) & Paper(y) & Sharpending(x,y) & Tapping(x,y)) -> ChangesPhysicalProperty(x))", "all x y.((Sharpending(x) & Sharpening(x) & Tearing(y)) -> (ChangesPhysicalPropertyOfObject(x,y)))", "all x.((SharpendingPencil(x) & TornPaper(x)) -> ChangesPhysicalPropertyOfObject(x))", "all x.((Pencil(x) & Paper(y)) -> (Sharpend(x) & Torroof(x) & ChangesPhysicalProperty(x)))", "all x y.((Sharpending(x) & Sharpening(x) & Torning(x,y)) -> ChangesPhysicalPropertyOfObject(x))", "all x y.((Sharpending(x) & Object(y) & Sharpening(x)) -> ChangesPhysicalProperty(x,y))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpend(x) & Torn(x,y)))", "(ShavingPencil(x) | TwistingPaper(x)))", "all x y.((Sharpending(x,y) & Sharpening(x,y)) -> (Torn(x,y) & Object(y)))"]}
{"id": "entailmentbank_validation_770", "nl": "if something undergoes a physical change then the physical properties of that something will change.", "fol": "", "prediction": ["all x.((EnvelopesPhysicalChange(x) & PhysicalPropertiesChange(x)) -> PhysicalPropertiesChange(x))", "all x.((PhysicalChange(x) & UndergoesChange(x)) -> PhysicalPropertiesChange(x))", "all x y.((Properties(x) & PhysicalChange(y) & Subsists(x,y)) -> PhysicalPropertiesTransform(x,y))", "all x y.((ExercisesPhysicalChange(x) & PhysicalPropertiesChange(y)) -> Change(y))", "all x y.((Individual(x) & UndergoesPhysicalChange(x)) -> PhysicalPropertiesChange(y))", "all x y.((SubmitsPhysicalChange(x) & PhysicalProperties(y)) -> WillChange(x,y))", "all x.((Change(x) & UndergoesPhysicalChange(x)) -> PhysicalPropertiesChange(x))", "all x.(BetweenPhysicalChanges(x) -> PhysicalPropertiesChange(x))", "all x y.((SubjectsPhysicalChange(x) & PhysicalProperties(y)) -> Change(y))", "all x.((PhenomenalChange(x) & UndergoesChange(x)) -> PhysicalPropertiesChange(x))", "all x.(UndergoesPhysicalChange(x) -> PhysicalPropertiesChange(x))", "all x y.((Behavior(x) & PhysicalProperties(y) & UndergoesChange(x,y)) -> PhysicalPropertiesChange(x,y))", "all x.((ArtificialChange(x) & BodyPropertiesChange(x)) -> PhysicalPropertiesChange(x))", "all x y.((SubjectsPhysicalChange(x) & PhysicalProperties(y)) -> PhysicalPropertiesChange(x,y))", "all x y.((PhysicalChange(x) & PhysicalProperties(y) & Undergoes(x,y)) -> PhysicalPropertiesChange(y))", "all x.(Change(x) -> PhysicalPropertiesChange(x))"]}
{"id": "entailmentbank_validation_771", "nl": "pencil and paper underwent a physical change.", "fol": "", "prediction": ["all x.(Inkjet(x) & Paper(x) UnderwentPhysicalChange(x))", "all x y z.((Pencil(x) & Paper(y) & PhysicalChange(z)) -> UnderwentChange(x,y))", "all x.(PencilAndPaper(x) -> PhysicalChange(x))", "all x.((Pencil(x) & Paper(x)) -> PhysicalChange(x))", "all x.((Pencil(x) & Paper(x)) -> PhysicalChange(x))", "all x.((Pencil(x) & Paper(x)) -> UnderwentPhysicalChange(x))", "((Pencil(Pencil) & Paper(Pencil)) -> UndergoesPhysicalChange(Pencil,Pencil) & UndergoesPhysicalChange(Paper)))", "all x.((Pencil(x) & Paper(x)) -> PhysicalChange(x))", "all x.((Pencil(x) & Paper(x)) -> UnderwentPhysicalChange(x))", "all x y z.((Pencil(x) & Paper(y) & Change(z)) -> UnderwentPhysicalChange(x,y,z))", "all x.((Pencil(x) & Paper(x)) -> UnderwentPhysicalChange(x))", "all x.((Pencil(x) & Paper(x)) -> UnderwentPhysicalChange(x))", "all x y z.((Pencil(x) & Paper(y) & PhysicalChange(z)) -> UnderwentChange(x,y,z))", "all x y z.((Pencil(x) & Paper(y) & PhysicalChange(z)) -> Underwent(x,y,z))", "(PhysicalChangement(Pencil) & PhysicalChange(Paper))", "all x.((Pencil(x) & Paper(x)) -> UnderwentPhysicalChange(x))"]}
{"id": "entailmentbank_validation_772", "nl": "heat means temperature increases.", "fol": "", "prediction": ["all x.(Heat(x) -> TemperatureIncrease(x))", "all x y.((Heat(x) & Heat(y)) -> Increase(x,y))", "all x.(Heat(x) -> TemperatureIncrease(x))", "all x.(Heat(x) -> TemperatureHead(x))", "all x.(Heat(x) -> HeatIncrease(x))", "all x.(Heat(x) -> TemperatureIncrease(x))", "all x.(Heat(x) -> TemperatureAlcrease(x))", "all x.(Heat(x) -> MeansTemperature(x))", "all x.(Heat(x) -> TemperatureImprovements(x))", "all x.(Heat(x) -> TemperatureIncrease(x))", "all x.(Heat(x) -> TemperatureWarmth(x))", "all x.(Heat(x) -> MeansTemperatureIncrease(x))", "all x.(Heat(x) -> TemperatureIncrease(x))", "all x y.((Heat(x) & Temperature(y)) -> HeatUpside(x,y))", "all x.(Heat(x) -> CausesTemperature(x))", "all x y.((Heat(x) & Temperature(y)) -> TemperatureIncrease(x,y))"]}
{"id": "entailmentbank_validation_773", "nl": "a solid is heated.", "fol": "", "prediction": ["all x.(Solid(x) -> Heated(x))", "all x.(Solid(x) -> Heats(x))", "all x.(Solid(x) -> Heated(x))", "all x.(Solid(x) -> Heats(x))", "all x.(Solid(x) -> Heatened(x))", "all x.((Solid(x) & Heats(x)) -> Heated(x))", "all x.(Standard(x) -> Heated(x))", "all x.(Stories(x) -> Heater(x))", "all x.(Solid(x) -> Heater(x))", "all x.(Solid(x) -> Heated(x))", "all x.(Solid(x) -> Heats(x))", "all x.(Solid(x) -> Heated(x))", "all x.(Solid(x) -> Heat(x))", "all x.(HasSolid(x) -> Heats(x))", "all x.(Heated(x) -> Solid(x))", "all x.(Shelter(x) -> Solid(x))"]}
{"id": "entailmentbank_validation_774", "nl": "the temperature of the solid increases.", "fol": "", "prediction": ["all x.((Solid(x) & TemperatureDecrease(x)) -> Increase(x))", "it increases the temperature of solid(ist,z)", "all x y.((Solid(x) & Solid(y)) -> IncreasesTemperature(x,y))", "all x y.((Solid(x) & Solid(y)) -> IncreasedTemperature(x,y))", "all x y.((Solid(x) & Solid(y)) -> TemperatureIncreases(x,y))", "all x y.((Solid(x) & Solid(y)) -> IncreasesTemperature(x,y))", "all x y.((Solid(x) & Temperature(y)) -> Increases(x,y))", "all x.(Solid(x) -> TemperatureIncreases(x))", "all x.((Solid(x) & Temperature(x,Solid)) -> Increases(x))", "all x y.((Solid(x) & Solid(y)) -> IncreasesTemperature(x,y))", "all x.((Solid(x) & TemperatureReduced(x)) -> Increased(x))", "all x.((Solid(x) & Temperature(y)) -> Increases(x,y))", "all x.((Solid(x) & Temperature(x,y)) -> Increases(s))", "all x.((Solid(x) & Temperature(x)) -> Increases(x))", "all xx.((Solid(x) & Temperature(x)) -> Increases(x))", "all x.((Solid(x) & Temperature(x)) -> Increase(x))"]}
{"id": "entailmentbank_validation_775", "nl": "a solid is a kind of substance.", "fol": "", "prediction": ["all x.(Solid(x) -> Substance(x))", "all x.(Solid(x) -> Substance(x))", "all x.(Solid(x) -> Substance(x))", "all x.(Solid(x) -> Substance(x))", "all x.(Solid(x) -> KindOfSubstance(x))", "all x.(Solid(x) -> Substance(x))", "all x.(Solid(x) -> UsuallyDependent(x))", "all x.(Solid(x) -> Substance(x))", "all x.(Solid(x) -> SpeciesOfSubstance(x))", "all x.(Solid(x) -> (Substance(x)))", "all x.(Solid(x) -> Substance(x))", "all x.(Solid(x) -> Substance(x))", "all x.(Solid(x) -> Substance(x))", "all x.(Solid(x) -> Substance(x))", "all x.(Solid(x) -> Substance(x))", "all x.(Solid(x) -> (Consistency(x) & Dissert(x)))"]}
{"id": "entailmentbank_validation_776", "nl": "the temperature of the solid substance increases.", "fol": "", "prediction": ["all x.((SolidSubstance(x) & TemperatureAncreases(x)) -> Increases(x))", "all x.((SolidSubstance(x) & TemperatureCupdate(x)) -> Increases(x))", "all x.((SolidSubstance(x) & TemperatureIncrease(x)) -> Increase(x))", "all x.(AsTemperature(x) -> Increases(x))", "all x y.((FiberSubstance(x) & SolidSubstance(y)) -> TemperatureIncrease(x,y))", "all x y.((SolidSubstance(x) & Temperature(y)) -> Increases(x,y))", "all x.(Temperature(x) -> Increases(x))", "all x y z.((SolidSubstance(x) & SolidSubstance(y) & Temperature(z) & Increases(z)) -> Increases(x,y,z))", "all x.((SteelSubstance(x) & IncreasedTemperature(x)) -> SolidSubstance(x))", "all x.((SolidSubstance(x) & TemperatureIncreases(x)) -> Increases(x))", "all x.((StickSubstance(x) & Temperature(x)) -> Increases(x))", "exists x.(SolidSubstance(x) & IncreasesTemperature(x))", "all x.((SolidSubstance(x) & Temperature(x,y)) -> Increases(y))", "all x.(SolidSubstance(x) -> TemperatureIncrease(x))", "the temperatureofSolidSubstanceAccrodes((sodSubstance) & IncreasedTemperature(sodSubstance))", "all x y.((SolidSubstance(x) & Temperature(y)) -> Increases(x,y))"]}
{"id": "entailmentbank_validation_777", "nl": "as the temperature of a substance increases, the molecules in that substance will move faster.", "fol": "", "prediction": ["all x y.((Substance(x) & Temperature(y)) -> MoveSlower(x,y))", "all x.((Substance(x) & IncreasesTemperature(x)) -> MovesFasterMolecules(x))", "all x y.((Substance(x) & TemperatureIncrease(x,y)) -> MoleculesMoveRapidly(x,y))", "all x y.((Substance(x) & Temperature(y)) -> HowToMove(x,y))", "all x.((Substance(x) & IncreasesTemperature(x)) -> MovesFaster(x))", "all x.((Substance(x) & TemperatureIncrease(x)) -> MoleculesMoveFaster(x))", "all x y z.((Substance(x) & Temperature(y) & Molecule(z) & Increases(x,y) & InSubstance(z,y)) -> MovesFaster(z,x))", "all x y.((Substance(x) & GrowthOfTemperature(x)) -> MobilizationFaster(x,y))", "all x y.((Substance(x) & Temperature(y)) -> (Increases(y) & MoleculesInSubstance(x,y)))", "all x y.((Substance(x) & Temperature(y) & Increases(x)) -> MoleculesMoveFaster(x,y))", "all x y z.((Substance(x) & Temperature(y) & Molecule(z)) -> (Increases(y) & More(z) & MovesFaster(z,y)))", "all x y z.((Substance(x) & Temperature(y) & Molecule(z)) -> IncreasesToIncrease(x,y,z))", "all x y.((Substance(x) & AdditionOfTemperature(x)) -> MobilizedFaster(y))", "all x y.((Substance(x) & IncreasedTemperature(x)) -> MoveLetter(x,y))", "all x y z.((Substance(x) & Temperature(y) & Temperature(z) & Increases(x,y)) -> MobilizationFast(x,z))", "all x y.((Substance(x) & TemperatureIncrease(x,y)) -> MoleculesMoveFaster(x,y))"]}
{"id": "entailmentbank_validation_778", "nl": "the molecules in the solid substance moves faster.", "fol": "", "prediction": ["all x.(Molecules(x) -> MovesFaster(x))", "all x y.((SolidSubstance(x) & Molecule(y)) -> MovesFaster(y,x))", "all x.((Moleculars(x) & SolidSubstance(x)) -> MovesFaster(x))", "all x y z.((Molecule(x) & SolidSubstance(y) & Molecule(z)) -> MovesFaster(x,y,z))", "all x.((Molecules(x) & SolidSubstance(x)) -> MovesFaster(x))", "all x y.((Molecule(x) & SolidSubstance(y)) -> MovesFaster(x,y))", "all x.((Homolecule(x) & SolidSubstance(x)) -> MovesFaster(x))", "all x y.((Domestic(x) & SolidSubstance(y) & MovesFast(x,y)) -> MoleculeInSubstance(x,y))", "all x.((Molecules(x) & SolidSubstance(x)) -> MovesFaster(x))", "all x.((Molecules(x) & SolidSubstance(x)) -> MovesFaster(x))", "all x.((Molecule(x) & SolidSubstance(x)) -> MovesFaster(x))", "all x y z.((SolidSubstance(x) & Molecule(y) & SolidSubstance(z)) -> MovesFaster(y,z))", "all x y.((Molecule(x) & SolidSubstance(y)) -> MovesFaster(x,y))", "all x y.((Molecule(x) & SolidSubstance(y)) -> MovesFaster(x,y))", "all x.((Molecules(x) & SolidSubstance(x)) -> MovesFaster(x))", "all x.((Molecules(x) & SolidSubstance(x)) -> MovesFaster(x))"]}
{"id": "entailmentbank_validation_779", "nl": "faster means an increase / higher in speed.", "fol": "", "prediction": ["all x y.((Fast(x) & Speed(y)) -> Increases/Higher(x,y))", "all x.((Faster(x) & SpeedIncrease(x)) -> SpeedHigher(x))", "all x.(Faster(x) -> (IncreaseInSpeed(x) | HigherInSpeed(x)))", "all x.(RetroRapider(x) -> IncreaseInSpeed(x))", "all x.(Faster(x) -> (IncreaseSpeed(x) & HigherSpeed(x)))", "all x.(Faster(x) -> IncreasedSpeed(x))", "all x.(Faster(x) -> IncreaseInSpeed(x))", "all x.(Faster(x) -> IncreasesSpeed(x))", "all x.(Faster(x) -> (IncreaseSpeed(x) | IncreaseSpeed(x)))", "all x.(Faster(x) -> (Increase(x) | HigherSpeed(x)))", "all x.(Faster(x) -> (IncreaseInSpeed(x) & HigherSpeedInSpeed(x)))", "all x.(Fast(x) -> IncreaseInSpeed(x))", "all x.(Houcher(x) -> IncreaseInSpeed(x))", "all x.(Faster(x) -> (IncreaseInSpeed(x) | HigherInSpeed(x)))", "all x.(Crooker(x) -> IncreasesSpeed(x))", "all x.(Faster(x) -> (IncreaseSpeed(x) & HigherSpeed(x)))"]}
{"id": "entailmentbank_validation_780", "nl": "the molecules in the solid substance increases in speed.", "fol": "", "prediction": ["all x.((Molecules(x) & SolidSubstance(x) & IncreasesSpeed(x)) -> IncreasesSpeed(x))", "all x.((MoleculesInSolidSubstance(x) & IncreasesSpeed(x)) -> IncreasesSpeed(x))", "all x.((Molecule(x) & SolidSubstance(x)) -> IncreasesSpeed(x))", "all x y z.((Molecule(x) & SolidSubstance(y) & Mass(z)) -> IncreasesSpeedIn(x,y,z))", "all x y.((Molecules(x) & SolidSubstance(y) & IncreasesSpeed(x,y)) -> IncreasesSpeed(x))", "all x y.((Molecule(x) & SolidSubstance(y) & IncreasesSpeed(x,y)) -> IncreasesSpeed(x,y))", "all x.((MoleculesInSolidSubstance(x)) -> IncreasesSpeed(x))", "all x y.((Dome(x) & SolidSubstance(y)) -> IncreasesSpeed(x,y))", "all x.((Molecules(x) & SolidSubstance(x)) -> IncreasesSpeed(x))", "all x.((MoleculesInSolidSubstance(x)) -> IncreasesSpeed(x))", "all x y.((MoleculesInSolidSubstance(x) & SolidSubstance(y)) -> IncreasesSpeed(x,y))", "all x.((Molecule(x) & SolidSubstance(x)) -> IncreasesSpeed(x))", "all x.(AggregatesMolecules(x) -> IncreasesSpeed(x))", "all x y.((Molecule(x) & SolidSubstance(y)) -> IncreasesInSpeed(x,y))", "all x.((Molecular(x) & SolidSubstance(x)) -> IncreasesSpeed(x))", "all x.((Molecular(x) & SolidSubstance(x)) -> IncreasesSpeed(x))"]}
{"id": "entailmentbank_validation_781", "nl": "proton is a kind of subatomic particles.", "fol": "", "prediction": ["all x.(Proton(x) -> SubatomicParticle(x))", "all x.(Proton(x) -> SubatomicParticle(x))", "all x.(Proton(x) -> SubatomicParticle(x))", "all x.(Proton(x) -> SubatomicParticle(x))", "all x.(Proton(x) -> PartOfSubatomicParticles(x))", "all x.(Proton(x) -> SubatomicParticle(x))", "all x.(Proton(x) -> SubatomicParticle(x))", "all x.(Protein(x) -> SubatomicParticles(x))", "all x.(Proton(x) -> SubatomicParticle(x))", "all x.(Proton(x) -> SubatomicParticles(x))", "all x.(Proton(x) -> (SubatomicParticle(x) & InThem(x)))", "all x.(Protein(x) -> SubatomicParticle(x))", "all x.(Proton(x) -> IsSubatomicParticipation(x))", "all x.(Proton(x) -> SubatomicParticle(x))", "all x y.((Proton(x) & SubatomicParticle(y)) -> Exists A.(Proton(x) & SubatomicParticle(x)))", "all x.(Proton(x) -> SubatomicParticles(x))"]}
{"id": "entailmentbank_validation_782", "nl": "neutrons are a kind of subatomic particle.", "fol": "", "prediction": ["all x.(Neutron(x) -> SubatomicParticle(x))", "all x.(Neutron(x) -> SubatomicParticle(x))", "all x.(Neutron(x) -> SubatomicParticle(x))", "all x.(Neutron(x) -> SubatomicParticle(x))", "all x.(Neutron(x) -> SubatomicParticle(x))", "all x y.((Neutron(x) & SubatomicParticle(y)) -> SubatomicParticle(x,y))", "all x.(Neutron(x) -> SubatomicParticle(x))", "all x.(Neutron(x) -> SubatomicParticle(x))", "all x.(Neutron(x) -> SubatomicParticle(x))", "all x.(Nitrogen(x) -> SubatomicParticle(x))", "all x.(Neutron(x) -> SubatomicParticle(x))", "all x.(Nucleon(x) -> SubatomicParticle(x))", "(SolidParticle(neutron))", "all x.(Neutron(x) -> SubatomicParticle(x))", "all x.(Neutron(x) -> SubatomicParticle(x))", "all x.((Neutron(x) & SubatomicParticle(x)) -> Subatomic(x))"]}
{"id": "entailmentbank_validation_783", "nl": "atomic mass is determined by the sum of protons and neutrons numbers in an atom.", "fol": "", "prediction": ["all x y.((AtomicMass(x) & Atom(y)) -> (SumOfProtonsAndNeurons(x,y) | SumOfNucleons(x,y)))", "all x y.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBySum(x,y,z))", "all x y.((AtomicMass(x) & Atom(y) & SumOfProtonsAndNeutrons(x,y)) -> DeterminesMass(x,y))", "all x y.((AtomicMass(x) & Atom(y)) -> DeterminedBySumOfProtonsAndNeutrons(x,y))", "all x y.((Atom(x) & Proton(y) & Neutron(y)) -> DeterminesMore(x,y))", "all x y.((AtomicMass(x) & AtomicMode(y) & SumOfProtonsAndNeutrons(x,y)) -> DeterminedBySum(x,y))", "all x.(AtomicMass(x) -> DeterminedBySumOfProtonsAndNeutrons(x))", "all x.((AtomicMass(x) & SumOfProtonsNumbers(x) & SumOfNeutronsNumbers(x)) -> DeterminedBy(x))", "all x.((AtomicMass(x) & SumOfProtonsAndNeutrons(y) & Atom(z)) -> DeterminedBySum(x,y,z))", "all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminesSum(x,y,z))", "all x y.((AtomicMass(x) & Atom(y)) -> SumOfProtonsAndNeutrons(x,y))", "all x y z.((AtomicMass(x) & ProtonsAndNeutronsNumbers(y) & Atom(z)) -> DeterminedBy(x,y,z))", "all x y z.((AtomicMass(x) & Proton(y) & Neutron(z)) -> DeterminedBySum(z))", "all x y.((AtomicMass(x) & SumOfProtonsAndNeutrons(y)) -> DeterminedBy(x,y))", "all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBySum(x,y,z,x))", "all x y z.((AtomicMass(x) & Proton(y) & Neutron(z)) -> DeterminedBySum(x,y,z))"]}
{"id": "entailmentbank_validation_784", "nl": "atomic mass is determined by the sum of protons and neutrons particle numbers.", "fol": "", "prediction": ["all x y z.((AtomicMass(x) & Proton(y) & Neutron(z) & Sum(y,z)) -> DeterminedBy(x,z))", "all x.((AtomicMass(x) & SumOfProtonsAndNeutrons(x)) -> DeterminedByParticleNumbers(x))", "all x.(AtomicalMass(x) -> SumOf(x,protons,neutrons))", "all x.(OrbitalMass(x) -> DeterminedBySumOfProtonsAndNeutrons(x))", "all x y.((AtomicMass(x) & Protons(y) & Neutrons(y)) -> DeterminedBySum(x,y))", "all x y.((AtomicalMass(x) & Proton(y) & Neutron(x)) -> Sum(x,y))", "all x.(AtomicMass(x) -> (SumOfProtons(x) & SumOfNeutrons(x)))", "all x y z.((AtomicMass(x) & Proton(y) & Neutron(z)) -> DeterminedBySum(x,y,z))", "all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBySumNumismatics(x,y,z))", "all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBySum(x,z))", "all x.(AtomicMass(x) -> (SumOfProtons(x) & SumOfNeutrons(x)))", "all x.(AtomicMass(x) -> (DeterminedBySumOfProtons(x) & DeterminedBySumOfNeutrons(x)))", "all x.(AtomicalMass(x) -> DeterminedBySum(x,protons,neutrons))", "all x.(AtomicMass(x) -> DeterminedBySumOfProtonsAndNeutronsparticleNumbers(x))", "all x y z.((AtomicMass(x) & Proton(y) & Neutron(z) & Sum(x,y,z)) -> CalculatedBy(x,y))", "all x.(AtomicalMass(x) -> DeterminedBySum(x,protons andneutrons))"]}
{"id": "entailmentbank_validation_785", "nl": "a proton has a positive 1 electric charge.", "fol": "", "prediction": ["all x.(Proton(x) -> PossibleFencing(x,1))", "all x.(Proton(x) -> PositiveEnergyCharge(x,1))", "all x.(Proton(x) -> PositiveElectricCharge(x,1))", "all x.(Proton(x) -> Positive(x,1))", "all x.(Proton(x) -> HasPositive1ElectricCharge(x))", "all x.(Proton(x) -> Positive1ElectricCharge(x))", "all x.(Proton(x) -> Positive(x,1))", "all x.(Proton(x) -> Positive1ElectricCharge(x))", "all x.(Proton(x) -> Positive(x,1))", "all x.(Proton(x) -> PositiveAutumn(x))", "all x y.((Proton(x) & ElectricCharge(y,x)) -> Positive(x,y))", "all x.(Proton(x) -> PositiveOneElectricCharge(x))", "all x.(Proton(x) -> PositivePowered(x,1))", "all x.(Proton(x) -> PositiveCurrent(x))", "all x.(Proton(x) -> PositiveElectricCharge(x,1))", "all x.(Proton(x) -> PositiveNineElectricCharge(x))"]}
{"id": "entailmentbank_validation_786", "nl": "a electron has a negative -1 electric charge.", "fol": "", "prediction": ["all x.(Electron(x) -> Nigative(x,1))", "all x.(Electron(x) -> NegativeElectricCharge(x,1))", "all x.(Electron(x) -> NegativeElectricCharge(x,1))", "all x.(Electron(x) -> NegativeElectricCharge(x,1))", "all x.(Electron(x) -> NegativeElectricCharge(x,1))", "all x.(Electron(x) -> NegativeElectricCharge(x,1))", "all x.(Electron(x) -> ElectricCharge(x,0,1))", "all x.(Electron(x) -> NegativeElectricCharge(x,1))", "all x.(Electron(x) -> NegativeElectricCharge(x,0))", "all x.(Electron(x) -> (NegativeElasticCharge(x,1)))", "all x.(Electron(x) -> NegativeElectricCharge(x,1))", "all x.(Electron(x) -> NegativeElectricCharge(x,1))", "all x.(Electron(x) -> Negative(x,1))", "all x.(Electron(x) -> NegativeCurrent(x,1))", "all x.(Electron(x) -> Negative(x,1))", "all x.(Electron(x) -> Negative(x,1))"]}
{"id": "entailmentbank_validation_787", "nl": "equal numbers of protons and electrons result in a neutral 0 electric charge.", "fol": "", "prediction": ["all x y.((Proton(x) & Electron(y) & Equal(x,y)) -> Neutral(x,y))", "all x.(TasksEqualNumbersOfProtonsAndElectrons(x) -> Neutral(x))", "all x y.((Proton(x) & Electron(y) & Equal(x,y)) -> Neutral(x,y))", "all x.((Proton(x) & Electron(x) & Equal(x,x)) -> Neutral0ElectricCharge(x))", "all x.((EqualProtons(x) & EqualElectrons(x)) -> Neutral(x,0))", "all x.((Protons(x) | Electrons(x)) -> NeutralAlcove(x))", "all x.((Proton(x) & Electron(x)) -> NeutralCurrent(x))", "all x.((Protons(x) & Electrons(x)) -> Neutral(x))", "all x.((Protones(x) | Electrons(x)) -> NeutralElectricCharge(x))", "all x y z.((Proton(x) & Electron(y) & ElectricCharge(z)) -> EqualNumbersResultinto(x,y,z))", "all x.((Proton(x) | Elektron(x)) -> Neutral0ElectricCharge(x))", "all x.(EqualProtonsAndElectrons(x) -> Neutral(x))", "all x.((Proton(x) | electron(x)) -> NeutralCouple(x))", "all x y z.((Proton(x) & Electron(y) & Electron(z)) -> Equivalent#(x,y,z))", "all x.((EqualProtons(x) & EqualElectronNumbers(x)) -> Neutral0ElectricCharge(x))", "all x y.((EqualProtons(x) & EqualElectrons(y)) -> NeutralElectricCharge(x,y))"]}
{"id": "entailmentbank_validation_788", "nl": "a neutron has a neutral electric charge.", "fol": "", "prediction": ["all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "all x.(Neutron(x) -> NegativeElectricCharge(x))", "all x.(NegativeCharge(x) -> HasNeutralCard(x))", "all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "all x.(Neutron(x) -> NeutralElectricCharge(x))", "all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "all x.(Neutron(x) -> HasNeutralElectricalCharge(x))", "all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "all x.(Neutron(x) -> NeutralElectricCharge(x))", "all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "all x y.((Neutron(x) & ElectricCharge(y)) -> HasNeutral(x,y))", "all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "all x y.((Neutron(x) & ElectricCharge(y)) -> Neutral(x,y))"]}
{"id": "entailmentbank_validation_789", "nl": "equal numbers of protons and electrons and any number of neutrons result in a neutral 0 electric charge.", "fol": "", "prediction": ["all x.((EqualProtons(x) | EqualElectrons(x)) -> RequiresNeutrons(x))", "all x.((Solomon(x) & EqualNumbersOfProtonsAndElectrons(x) & AnyNumberOfNeutrons(x)) -> Neutral0ElectricCharge(x))", "all x y.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x) & AnyNumberOfNeutrons(y)) -> Neutral0ElectricCharge(y))", "all x y z.((Proton(x) & Electron(y) & Neutron(z)) -> (EqualNumbers(x,y,z) & NullAmount(x)))", "all x y.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x) & Neutrons(y)) -> NeutralNullElectricCharge(x,y))", "all x y.((Proton(x)) | Electron(y)) -> (EqualNumbersOf(x,y) & EqualNumbersOf(x,z) & AllNitrons(x) -> Neutral(x,z)))", "all x.((EqualNodesOfProtons(x) | EqualNumbersOfElectrons(x)) -> Neutral0ElectricCharge(x))", "all x y z.((EqualNumbersOfProtons(x,y) & EqualNumbersOfElectrons(x,z) & EqualNumbersOfNeutrons(x,y,z)) -> neutralElement(x))", "all x y z.((Dimension(x,y) & Protone(y) & Electron(z) & Neutron(z)) -> (Equal(x,y) & Equal(y,z)))", "all x.((EqualNumberOfProtons(x) & EqualNumberOfElectrons(x) & AnyNumberOfNeutrons(x)) -> Neutral(x))", "all x.((EqualProtons(x) & EqualElectrons(x) & Nullinos(x)) -> Neutral0ElectricCharge(x))", "all x.(EqualNumbersOfProtonsAndElectrons(x) & AllNumbersOfNeutrons(x)) -> Neutral(x))", "all x y z.((EqualNumbers(x,y) & NumberOfProtons(y) & NumberOfElectrons(z)) -> NeutralCouple(x))", "all x.((Proton(x) | Electron(x)) & AnyNumberOfNeutrons(x)) -> Neutral0Charge(x))", "all x.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x) & AnyNumberOfNeutrons(x)) -> neutral0ElectricCharge(x))", "all x.((Proton(x) | Electron(x)) -> (EqualNodes(x,y) & AnyNumberOfNeutrons(x)))"]}
{"id": "entailmentbank_validation_790", "nl": "an atom is made of protons / neutrons / electrons.", "fol": "", "prediction": ["all x.(Atom(x) -> (MadeOfProtons(x) | MadeOfNeutrons(x) | MadeOfElectrons(x)))", "all x.(Atom(x) -> (MadeOf(x,Protons) & MadeOf(x,Neutrons) & MadeOf(x,Electrons)))", "all x.(Atom(x) -> (MadeOfProtons(x) & MadeOfNeutrons(x) & MadeOfElectrons(x)))", "all x y.((Atom(x) & Protons(y) & Neutrons(y)) -> MadeOfElectrons(x,y))", "all x.(Atom(x) -> (Protons(x) | Neutrons(x) | Electrons(x)))", "all x.(Atom(x) -> (MadeOf(x,Protons) | MadeOf(x,Neutrons) | MadeOf(x,Electrons)))", "all x.(Atom(x) -> (HasProtons(x) & HasNeutrons(x) & HasElectrons(x)))", "all x.(Atom(x) -> (MadeOfProtons(x) | MadeOfNeutrons(x) | MadeOfElectrons(x)))", "all x.((Atom(x) & MadeOfProtons(x)) -> MadeOfNeutrons(x))", "all x.(Atom(x) -> (MadeOfProtons(x) | MadeOfNeutrons(x) | MadeOfElectrons(x)))", "all x.(Atom(x) -> (IsMadeOf(x,Protons) | IsMadeOf(x,Neutrons) | IsMadeOf(x,Electrons)))", "all x.(Atom(x) -> (Protons(y) & Neutrons(y) & Electrons(y)))", "all x.(Atom(x) -> (MadeOfProtons(x) | MadeOfNeutrons(x) | MadeOfElectrons(x)))", "all x.(Atom(x) -> (MadeOfProtons(x) | MadeOfNeutrons(x) | MadeOfElectrons(x)))", "all x.(Atom(x) -> (MadeOfProtons(x) & MadeOfNeutrons(x) & MadeOfElectrons(x)))", "all x.(Atom(x) -> MadeOfProtonsNotronsElectrons(x))"]}
{"id": "entailmentbank_validation_791", "nl": "if an atom has an equal number of protons and electrons, then the atom will have a neutral charge.", "fol": "", "prediction": ["all x.((Atom(x) & EqualProtonsAndElectrons(x)) -> NeutralCharge(x))", "all x y.((Atom(x) & Atom(y) & EqualNumberOfProtonsAndElectrons(x,y)) -> NeutralCharge(y))", "all x.((Atom(x) & EqualNumberOfProtonsAndElectrons(x)) -> neutralCharge(x))", "all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> NeutralCharge(x))", "all x.((Atom(x) & EqualNumberOfProtons(x) & EqualNumberOfElectrons(x)) -> NeutralCharge(x))", "all x.((Atom(x) & EqualNumberOfProtonsAndElectrons(x)) -> NeutralCharge(x))", "all x y z.((Atom(x) & Atom(y) & Protons(y) & Electrons(z) & Equal(y,z)) -> NeutralCharge(x))", "all x.((Atom(x) & HasEqualProtons(x) & HasEqualElectrons(x)) -> NeutralCharge(x))", "all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> NeutralCharge(x))", "all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> NeutralCharge(x))", "all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> NeutralCharge(x))", "all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> neutralCharge(x))", "all x y.((Atom(x) & EqualProtonsAndElectrons(y)) -> HasNeutralCharge(x))", "all x.((Atom(x) & EqualNumberOfProtons(x) & EqualNumberOfElectrons(x)) -> NeutralCharge(x))", "all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> NeutralCharge(x))", "all x y.((Atom(x) & EqualProtons(y) & EqualElectrons(x)) -> NeutralCharge(x))"]}
{"id": "entailmentbank_validation_792", "nl": "an normal atom has a neutral electric charge.", "fol": "", "prediction": ["all x.((Atom(x) & Normal(x)) -> HasNeutralElectricCharge(x))", "all x.((Magnetic(x) & Atom(x)) -> HasNeutralElectricCharge(x))", "all x.((Atom(x) & Normal(x)) -> HasNeutralElectricCharge(x))", "all x.((Atom(x) & Normal(x)) -> NeutralElectricCharge(x))", "all x.((Atom(x) & Normal(x)) -> HasNeutralElectricCharge(x))", "all x.((Atom(x) & Normal(x)) -> HasNeutralElectricCharge(x))", "all x.(NormalAtom(x) -> NeutralElectricCharge(x))", "all x.(NormalAtom(x) -> NeutralElectricCharge(x))", "all x.((Atom(x) & Normal(x)) -> NeutralElectricCharge(x))", "all x.(NormalAtom(x) -> HasNeutralElectricCharge(x))", "all x.((Atom(x) & Normal(x)) -> NeutralElectricCharge(x))", "all x.((Atom(x) & Normal(x)) -> NeutralElectricCharge(x))", "all x.((NaturalAtom(x) & NeutralElectricCharge(x)) -> Has(x,y))", "all x.(NormalAtom(x) -> HasNeutralElectricCharge(x))", "all x.((Atom(x) & Normal(x)) -> NeutralElectricCharge(x))", "all x.((Atom(x) & Normal(x)) -> HasNeutralElectricCharge(x))"]}
{"id": "entailmentbank_validation_793", "nl": "that atom has an equal number of protons and electrons.", "fol": "", "prediction": ["all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> Atom(x))", "all x y z.((Atom(x) & NumberOfProtons(x,y) & NumberOfElectrons(x,z)) -> Equal(x,y,z))", "all x y.((Atom(x) & Atom(y)) -> (EqualProtons(x,y) & EqualElectrons(x,y)))", "all x.(Atom(x) -> (EqualProtons(x) & EqualElectrons(x)))", "all x.((Atom(x) & EqualNumberOfProtons(x) & EqualNumberOfElectrons(x)) -> AtomToHas(x,y))", "all x.((Atom(x) & EqualNumberOfProtons(x) & EqualNumberOfElectrons(x)) -> AtomThin(x))", "all x.(Atom(x) -> (InEndNumberOfProtons(x) & InEndNumberOfElectrons(x)))", "all x.(Atom(x) -> (IsEqualProton(x) & EqualElectrons(x)))", "all x.(Atom(x) -> (EqualProtons(x) & EqualElectrons(x)))", "all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> Atom(x))", "all x.(Atom(x) -> (EqualProtons(x) | EqualElectrons(x)))", "all x y z.((Atom(x) & Protons(y) & Electrons(z)) -> Equal(x,y,z))", "all x.(Atom(x) -> (EqualProtons(x) & EqualElectrons(x)))", "all x.((Atom(x) & NumberOfProtons(x) & NumberOfElectrons(x)) -> Equal(x))", "all x.(Atom(x) -> exists y z.(Degree(y) & Number(z)) & HasProtons(x,y) & HasElectrons(x,z)))", "all x.(Atom(x) -> (EqualNumberOfProtons(x) & EqualNumberOfElectrons(x)))"]}
{"id": "entailmentbank_validation_794", "nl": "iron in contact with water and oxygen will rust.", "fol": "", "prediction": ["all x.((InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x y.((Iron(x) & Water(y) & Oxygen(x,y)) -> Rust(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x.((Iron(x) & inContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x y.((Iron(x) & ContactsWater(x) & ContactsOxygen(y)) -> Rusts(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x.((Iron(x) & InWater(x) & InOxygen(x)) -> Rust(x))", "all x y.((Iron(x) & Water(y) & Oxygen(x)) -> Rust(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x.((Iron(x) & Water(x) & Oxygen(x)) -> Rust(x))", "all x.((Iron(x) & ContactsWater(x) & ContactsOxygen(x)) -> WillRrust(x))", "all x.((Iron(x) & InContactWithWaterAndOxygen(x)) -> Rust(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x.((IronInContactWithWater(x) & Oxygen(x)) -> Rrust(x))"]}
{"id": "entailmentbank_validation_795", "nl": "iron in contact with water and oxygen causes a chemical change.", "fol": "", "prediction": ["all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalChange(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalChange(x))", "all x.((Iron(x) & ContactsWater(x) & CanCauseChemicalChange(x)) -> ChemicalChange(x))", "all x.((Iron(x) & Contact(y,Water,Oxygen)) -> ChemicalChange(x))", "all x.((Iron(x) & ContactsWater(x) & ContactsOxygen(x)) -> CausesChemicalChange(x))", "all x.((Iron(x) & InContactWithWaterAndOxygen(x)) -> ChemicalChange(x))", "all x.((Iron(x) & InContactWithWaterAndOxygen(x)) -> ChemicalChange(x))", "all x.((Iron(x) & ContactsWater(x) & ContactsOxygen(x)) -> ChemicalChange(x))", "all x.((Iron(x) & Water(h) & Oxygen(x)) -> ChemicalChange(x))", "all x.((Iron(x) & Water(x) & Oxygen(x)) -> ChemicalChange(x))", "all x y.((Iron(x) & Water(y) & Oxygen(y)) -> ChemicalChange(x,y))", "all x y.((Iron(x) & Water(y) & Oxygen(z)) -> CausesChange(x,y))", "all x y.((Iron(x) & Water(y)) -> (CausesChange(x,y) | CausesChange(x,y)))", "all x.((Iron(x) & InContactWithWaterAndOxygen(x)) -> ChemicalChange(x))", "all x y.((Iron(x) & Water(y) & Oxygen(z) & InContact(x,y,z)) -> ChemicalChange(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalChange(x))"]}
{"id": "entailmentbank_validation_796", "nl": "iron in contact with water and oxygen is an example of chemical reactions.", "fol": "", "prediction": ["all x.((Iron(x) & ContactsWaterAndOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & ContactsWater(x) & ContactsOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & ContactsWater(x) & MeetsOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & ContactWithWater(x) & ContactWithOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_797", "nl": "alkaline earth metals are highly chemically reactive.", "fol": "", "prediction": ["all x.((AlkalineEarthMetal(x) & HighlyChemicallyReactive(x)) -> HighlyChemical(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.(AlkalineEarthMetal(x) -> HighlyResponsive(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x y.((AlkalineEarthMetal(x) & ChemicallyReactive(y)) -> HighlyResponsive(x))", "all x.((AlkalineEarth(x) & ReactiveChemically(x)) -> Highly(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.((alkaline(x) & EarthMetal(x)) -> HighlyChemicallyReactive(x))"]}
{"id": "entailmentbank_validation_798", "nl": "elements from the same group in the periodic table are chemically reactive in a similar way.", "fol": "", "prediction": ["all x y.((Element(x) & Group(x,y) & GroupInPeriodicTable(x,y)) -> SimilarlyReactive(x,y))", "all x y z.((Group(x) & Element(y) & SubGroup(z) & PeriodicalTable(z)) -> ChemicallyReactiveInSameMode(y,z))", "all x.((Element(x) & SameGroupInPeriodicalTable(x)) -> ChemicallyReactive(x))", "all x y.((Group(x) & Element(y) & SameGroup(x,y)) -> ChemicallyReactiveInSameMeaning(x))", "all x.((Elements(x) & SameGroupInPeriodicalTable(x)) -> ChemicallyReactiveInAnAppropriateManner(x))", "all x y z.((Element(x) & Element(y) & Element(z) & Group(y,z) & PeriodicTable(z)) -> ChemicallyReactiveInSameWeapon(x,y,z))", "all x.((Elements(x) & SameGroupInPeriodicTable(x)) -> Similar(x))", "all x y.((Elements(x) & Elements(y) & SameGroup(x) & PeriodicalTable(x)) -> ChemicallyReactive(x,y))", "all x.((Elements(x) & SameGroup(x) & PeriodicTable(x)) -> ChemicallyReactiveInSameMath(x))", "all x.((ElementsFromTheSameGroupInPeriodicTable(x) & ChemicallyReactive(x,simmular)) -> ChemicallyReactive(y))", "all x.((Element(x) & SameGroupInPeriodicTable(x)) -> ChemicallyReactive(x))", "all x y.((Element(x) & Element(y) & Element(x,y)) -> ChemicallyReactiveInSameFormationInExperimentaryTable(x,y))", "all x.((Element(x) & SameGroupInPeriodicTable(x)) -> ChemicallyReactive(x))", "all x.((ElementsFromSameGroup(x) & PeriodicalTable(x)) -> ChemicallyReactiveInSameMeaning(x))", "all x y.((Element(x) & Element(y) & SameGroup(x,y)) -> ChemicallyReactiveInSameManner(x,y))", "all x y.((Element(x) & ElementsFromSameGroup(x,y) & PeriodicalTable(y)) -> ChemicallyReactive(x))"]}
{"id": "entailmentbank_validation_799", "nl": "elements that belong to alkaline earth metals are highly chemically reactive.", "fol": "", "prediction": ["all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x y.((Element(x) & AlkalineEarthMetal(y)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Elements(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Elements(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Elements(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & AlkalineElectricMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Elements(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))"]}
{"id": "entailmentbank_validation_800", "nl": "magnesium belongs to alkaline earth metal family, group 2 on the periodic table.", "fol": "", "prediction": ["all x y.((Magnesium(x) & AlkalineEarthMetal(y)) -> Group2AtPediatricTable(x))", "all x.(Magnesium(x) -> (BelongsToAlkalineEarthMetal(x) & Group2OnPeriodicalTable(x)))", "all x.(Magnesium(x) -> AlkalineEarthMetallefamily(x,2,periodicalTable))", "all x.(Melium(x) -> (AlphalineEarthMetal(x) & Group2OnP\u00e9riodicalTable(x)))", "all x y.((Magnesium(x) & AlkalineEarth(y)) -> Group2OnPeriodicTable(x))", "all x.(Magnesium(x) -> (AlkalineEarthMetalFamily(x) & Group2)))", "all x.(Magnesium(x) -> (AlphalineEarthMetal(x) & Group2OnPeriodicTable(x)))", "all x.(Magnesium(x) -> AlkalineEarthMetalFamilyGroup2OnPeriodicalTable(x))", "all x.(Magnesium(x) -> (AlkalineEarthMetal(x,5) & Group2OnPeriodicTable(x)))", "all x.(Magnesium(x) -> (AlkalineEarthMetalFamily(x) & Group2OnPeriodicTable(x)))", "all x y.((Magnesium(x) & AlkalineEarthMetal(y)) -> Group2(x,y))", "all x y.((Magnesium(x) & AlkalineEarth(y)) -> GroupOnPeriodicTable(x,y))", "all x.(Magnetic(x) -> AlkalineEarthMetalFamily_2(x))", "all x y.((Magnesium(x) & AlkalineEarthMetalFamily(y)) -> (InPediatricTable(x,y) & OnPeriodicTable(y,z)))", "all x.(Magnesium(x) -> (AlkalineEarthMetalFamily(x) & Group2OnPeriodicTable(x)))", "all x.(Magnesium(x) -> (AlpiumEarthMetal(x) & Group2OnPeriodicTable(x)))"]}
{"id": "entailmentbank_validation_801", "nl": "magnesium is highly chemically reactive.", "fol": "", "prediction": ["all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magn\u00e9sium(x) -> HighlyChemicallyReactive(x))"]}
{"id": "entailmentbank_validation_802", "nl": "an element cannot be decomposed into two or more different substances by simple chemical methods.", "fol": "", "prediction": ["all x y.((Element(x) & Substance(y) & ChemicalMeasures(e)) -> -DecomposedBy(x,y))", "all x y.((Element(x) & Substance(y)) -> -CanBeDecomposedBySimpleChemicalMethods(x,y))", "all x.((Element(x) & -Decomposed(x,2)) -> -SimpleChemicalMethods(x,2))", "all x.(Element(x) -> -(RequiresSimpleChemicalMethods(x) & CanDecompose(x,2)))", "all x.(Element(x) -> -DecomposedBySimpleChemistryMethods(x))", "all x.(Element(x) -> -DecomposedBySimpleChemicalMethods(x))", "all x.(Element(x) -> -DecomposesToDifferentSubstances(x))", "all x y.((Element(x) & Substance(y) & SimpleChemicalMethods(x)) -> -DecomposedBy(x,y))", "all x.(Element(x) -> -DecomposedBySimpleChemicalMethods(x))", "all x.(Element(x) -> -ExtraDifferentSubstances(x))", "all x y.((Element(x) & Substance(y) & DecomposedTo(x,y)) -> -(SimpleChemistryMethod(x) & MultiPurpose(x,y)))", "all x.((Element(x) & DecomposedToDifferentSubstances(x,1)) -> -SimpleChemicalMethods(x))", "all x.((Element(x) & -ComposedBySimpleChemicalMethods(x)) -> -DecomposableByComposing(x,y))", "all x.((Substance(x) & Element(x)) -> -DecomposedBySimpleChemicalMethods(x))", "all x.(Element(x) -> -(ComposedBySimpleChemicalMethods(x) & InSubstance(x,d,e,f)))", "all x.(Element(x) -> -DecomposedWithSimpleChemicalMethods(x))"]}
{"id": "entailmentbank_validation_803", "nl": "sulfur cannot be decomposed into different substances by simple chemical methods.", "fol": "", "prediction": ["all x.(Sulfur(x) -> -CanBeDecomposedBySimpleChemicalMethods(x))", "all x.(Sulfur(x) -> -CanBeDecomposedBySimpleChemicalMethods(x))", "all x y z.((Sulfur(x) & Substance(y) & SimpleChemicalMethod(z)) -> -RecognizedBy(x,y,z))", "all x.((Sulfur(x) & SimpleChemicalMethods(x)) -> PreventsDecomposition(x))", "all x.(Sulfur(x) -> -ComposedThroughSimpleChemicalMethods(x))", "all x.((Sulfur(x) & -Decomposed(x)) -> SimpleChemicalMethods(x))", "all x.(Sulfur(x) -> -DecomposedBySimpleChemicalMethods(x))", "all x.(Sulfur(x) -> -ComposedBySimpleChemicalMethods(x))", "all x.(Sulfur(x) -> -DecomposesToSubstances(x,SimpleChemicalMethods))", "all x.(Sulfur(x) -> -DecomposedBySimpleChemicalMethods(x))", "all x.(Sulfur(x) -> -CanBeDecomposedSimplyBySimpleChemicalMethods(x))", "all x y z.((Sulfur(x) & Substance(y) & SimpleChemicalMethod(z),) -> -ChemicallyDecomposed(x,y))", "all x.(Sulfur(x) -> -IsDecomposedBySimpleChemicalMethods(x))", "all x.(Sulfur(x) -> -DecomposedBySimpleChemicalMethods(x))", "all x.(Sulfur(x) -> -CanBeDecomposedBySimpleChemicalMethods(x))", "all x.(Sulfur(x) -> -CanBeDecomposedBySimpleChemicalMethods(x))"]}
{"id": "entailmentbank_validation_804", "nl": "sulfur is a kind of element.", "fol": "", "prediction": ["all x.(Sulfur(x) -> Element(x))", "all x.(Sulfur(x) -> Element(x))", "all x.(Sulfur(x) -> Element(x))", "all x.(Sulfur(x) -> Element(x))", "all x.(Sulfur(x) -> Element(x))", "all x.(Sulfur(x) -> Element(x))", "all x.(Sulfur(x) -> Elements(x))", "all x.(Sulfur(x) -> Element(x))", "all x.(Sulfur(x) -> Element(x))", "exists x.(Sulfur(x) & Element(x))", "all x.(Sulfur(x) -> Elements(x))", "all x.(Sulfur(x) -> Element(x))", "All x.(Sulfur(x) -> Element(x))", "all x.(Sulfur(x) -> Elements(x))", "all x.(Sulfur(x) -> Elements(x))", "all x.(Sulfur(x) -> Element(x))"]}
{"id": "entailmentbank_validation_805", "nl": "iron is a kind of element.", "fol": "", "prediction": ["all x.(Iron(x) -> Element(x))", "all x.(Element(x) -> Iron(x))", "all x.(Iron(x) -> Elements(x))", "all x.(Iron(x) -> Element(x))", "all x.(Iron(x) -> PartOfElement(x))", "all x.(Iron(x) -> Elements(x))", "all x.(Iron(x) -> Element(x))", "all x.(Iron(x) -> Elements(x))", "all x.(Iron(x) -> Element(x))", "all x.(Iron(x) -> Element(x))", "all x.(Iron(x) -> Elements(x))", "all x.(Iron(x) -> KindOfElement(x))", "all x.(Iron(x) -> Element(x))", "all x.(Iron(x) -> Elements(x))", "exists x.(Iron(x) & Element(x))", "all x.(Element(x) -> Iron(x))"]}
{"id": "entailmentbank_validation_806", "nl": "the chemical symbol for iron is fe.", "fol": "", "prediction": ["all x.(Iron(x) -> Flows(x))", "all x.((ChemicalSymbol(x) & Iron(x)) -> Fe(x))", "all x.(Iron(x) -> ChemicalSymbol(x))", "all x.(Iron(x) -> ChemicalSymbolFe(x))", "is the chemical symbol for iron(fe)", "(ChemicalSymbol(iron) -> Fe(iron))", "all x.((ChemicalSymbol(x) & Iron(x)) -> Fe(x))", "all x.(Iron(x) -> Fe(x))", "all x.((ChemicalSymbol(x) & Iron(x)) -> Fe(x))", "-Fe (chemicalSymbol(iron) & For(iron,iron)))", "all x.(ChemicalSymbol(x,iron) -> Fe(x))", "all x.(Iron(x) -> ChemicalSymbol(x,fe))", "(CSMolecule(iron) & -(Fe) & Iron(iron))))", "Symbols ForIron(chemical) fe(f))", "all x.((ChemicalSymbol(x) & Iron(x)) -> Fe(x))", "all x.(Fe(x) -> ChemicalSymbol(x))"]}
{"id": "entailmentbank_validation_807", "nl": "fe is the chemical symbol for iron element.", "fol": "", "prediction": ["is the chemical symbol for ironElement(fe)", "(ChemicalSymbol(fe) & IronElement(fe))", "(ChemicalSymbolFeForIronElement(fe))", "all x.(Fe(x) -> ChemicalSymbolForIronElement(x))", "all x.(Fe(x) -> ChemicalSymbol(x))", "every fe(fe) -> ChemicalSymbolForIronElement(f,i))", "Symbol(fe) -> IronElement(f))", "all x.(Fe(x) -> ChemicalSymbolForIronElement(x))", "all x.(Fe(x) -> ChemicalSymbolForIronElement(x))", "(ChemicalSymbol(Fe,ironElement))", "fe (Firs(f) & ChemicalSymbolForIronElement(x))", "all x.(Fe(x) -> ChemistrySymbolForIronElement(x))", "all x.(Fe(x) -> ChemicalSymbolForIronElement(x))", "all x.(Fe(x) -> ChemicalSymbolForIronElement(x))", "(Fe(fe) -> ChemicalSymbolForIronElement(f))", "all x.(Fe(x) -> ChemicalSymbolForIronElement(x),x))"]}
{"id": "entailmentbank_validation_808", "nl": "if a substance is made of one element, then the substance is called an element.", "fol": "", "prediction": ["all x.((Substance(x) & MadeOfOneElement(x)) -> Elements(x))", "all x.((Substance(x) & MadeOfElement(x)) -> Element(x))", "all x.((Substance(x) & MadeOfOneElement(x)) -> Elements(x))", "all x.((Substance(x) & MakesOfOneElement(x)) -> Elements(x))", "all x.((Substance(x) & MadeOfOneElement(x)) -> Elements(x))", "all x.((Substance(x) & MadeOfOneElement(x)) -> Elements(x))", "all x.((Substance(x) & MadeOfOneElement(x)) -> Elements(x))", "all x.((Substance(x) & MadeOfOneElement(x)) -> Element(x))", "all x.((Substance(x) & MadeOfOneElement(x)) -> Elements(x))", "all x.((Substance(x) & MadeOfOneElement(x)) -> Element(x))", "all x.((Substance(x) & MadeOfElement(x)) -> Element(x))", "all x.((Substance(x) & MadeOfOneElement(x)) -> Elements(x))", "all x.((Substance(x) & MakesOfElement(x)) -> Elements(x))", "all x.((Substance(x) & MadeOfElement(x)) -> Element(x))", "all x.((Substance(x) & MadeOfOneElement(x)) -> Elements(x))", "all x.((Substance(x) & MadeOfOneElement(x)) -> Element(x))"]}
{"id": "entailmentbank_validation_809", "nl": "oxygen gas is made of only oxygen element.", "fol": "", "prediction": ["all x.(OxygenGas(x) -> MadeOfOxygenElement(x))", "all x.(OxygenGas(x) -> MadeOfOxygenElement(x))", "all x.(OxygenGas(x) -> MakesOfOxygenElement(x))", "all x.(OxygenGas(x) -> (BreaksOfOxygenElement(x) & ContainsOxygenElement(x)))", "all x.(OxygenGas(x) -> MadeOfOxygenElement(x))", "all x y.((OxygenGas(x) & -OxygenElement(y)) -> MadeOf(x,y))", "all x.(OxygenGas(x) -> MadeOfOxygenElement(x))", "all x.(OxygenGas(x) -> MadeOfOtherElement(x))", "all x.(OxygenGas(x) -> madeOfOxygenElement(x))", "all x.(OxygenGas(x) -> MadeOfOxygenElement(x))", "all x y.((OxygenGas(x,y) & OxygenElement(y)) -> MadeOfOnly(x,y))", "all x.(OxygenGas(x) -> (MadeOfOxygenElement(x) & ContainsOxygenElement(x)))", "all x y.((OxygenGas(x) & (OxygenElement(y) | AlcoholElement(y))) -> MadeOfElement(x,y))", "all x.(OxygenGas(x) -> MadeOfOxygenElement(x))", "(OxygenGas(x) & MadeOfOxygenElement(x))", "all x.(OxygenGas(x) -> MadeOfOxygenElement(x))"]}
{"id": "entailmentbank_validation_810", "nl": "oxygen gas is an element.", "fol": "", "prediction": ["all x.(OxygenGas(x) -> Element(x))", "all x.(OxygenGas(x) -> Element(x))", "all x.(OxygenGas(x) -> Element(x))", "all x.(OrganismGas(x) -> Element(x))", "all x y.((OxygenGas(x) & Element(y)) -> Element(x,y))", "all x.(OxygenGas(x) -> Element(x))", "all x.(OxygenGas(x) -> Element(x))", "all x.(OxygenGas(x) -> Element(x))", "all x.(OxygenGas(x) -> Element(x))", "(Element(OxygenGas))", "all x.(OxygenGas(x) -> Element(x))", "all x.(OxygenGas(x) -> Element(x))", "All x.(OxygenGas(x) -> Element(x))", "all x.(OxygenGas(x) -> Element(x))", "all x.(OxygenGas(x) -> Element(x))", "all x.(OxygenGas(x) -> Element(x))"]}
{"id": "entailmentbank_validation_811", "nl": "o2 is a chemical formula for oxygen gas.", "fol": "", "prediction": ["all x.(O2(x) -> ChemicalFormation(x))", "all x.(O2(x) -> ChemicalForm(x))", "all x.(O2(x) -> ChemicalFormula(x))", "all x.(O2(x) -> ChemicalFormationForOxygenGas(x))", "all x.(O2(x) -> OxygenGasFormula(x))", "all x y.((O2(x) & OxygenGas(y)) -> ChemicalForm(x,y))", "all x.(O2(x) -> ChemicalFormationForOxygen(x))", "all x.(O2(x) -> ChemicalFormation(x))", "all x.(O2(x) -> ChemicalFormulaForOxygen(x))", "all x.(O2) -> ChemicalFormationForOxygenGas(x))", "all x y.((O2(x) & OxygenGas(y)) -> ChemicalForm for(x,y))", "all x.(O2(x) -> ChemicalFormation(x))", "all x.(O2(x) -> ChemicalFormation(x))", "all x.(O2(x) -> ChemicalFormationForOxygenGas(x))", "all x.(O2(x) -> (ChemicalFormationForOxygenGas(x)))", "all x.(O2(x) -> ChemicalFormationForOxygen(x))"]}
{"id": "entailmentbank_validation_812", "nl": "o2 is an element.", "fol": "", "prediction": ["all x.(O2Element(x) -> Elements(x))", "all x.(O2(x) -> Element(x))", "all x.(O2Element(x) -> Elements(x))", "all x.(O2,O3) -> Element(x))", "o2 is a ltd.", "all x.(O2(x) -> Element(x))", "all x.(O2(x) -> Element(x))", "all x.((O2O2) & Element(x)) -> Element(x))", "all x.(O2Element(x) -> Is(x,y))", "all x.(O2(x) -> Element(x))", "all x.(O2(x) -> Element(x))", "all x.(O2(x) -> Elements(x))", "all x.(O2(x) -> Element(x))", "all x.(O2(x) -> Element(x))", "all x.(O2(x) -> Element(x))", "all x.(O2(x) -> Element(x))"]}
{"id": "entailmentbank_validation_813", "nl": "the chemical symbol for tellurium is te.", "fol": "", "prediction": ["(ChemicalSymbol(c) & Tellurium(d) & Te(c))", "(ChemicalSymbol(x) & Tellurium(x))", "all x.((ChemicalSymbol(x) & Tellurium(x)) -> Te(x))", "all x.(Te(x) -> ChemicalSymbolForTellurium(x))", "all x.(Listenurium(x) -> ChemicalSymbol(x,te))", "all x.(ChemicalSymbol(x,Tinurum) -> Te(x))", "(ChemicalSymbol(te) & Tellurium(te))", "all x.((ChemicalSymbol(x) & Tellurium(x)) -> Te(x))", "(ChemicalSymbolForTellurium(Te))", "all x.(ChemicalSymbolForTellurium(x) -> Ta(x))", "all x.((ChemicalSymbol(x) & Tellurium(x)) -> Te(x))", "all x.(ChemicalSymbol(x) -> Tellurium(x))", "that for tellurium(chemicalSymbol(chem) & RecallsTe(chem))", "-Te(x)", "exists x y.(ChemicalSymbol(x) & Tellurium(y) & Te(x))", "all x.(ChemicalSymbol(x) & Tellurium(x))"]}
{"id": "entailmentbank_validation_814", "nl": "tellurium is a kind of metalloid.", "fol": "", "prediction": ["all x.(Tellurium(x) -> Metalloid(x))", "all x.(Tellurium(x) -> Metalloid(x))", "all x.(Tintrium(x) -> Metalloid(x))", "all x.(Teacherium(x) -> Metalloid(x))", "all x.(Tellurium(x) -> Metalloid(x))", "all x.(Tetrahydrocytic(x) -> Metalloid(x))", "all x.(Tellurium(x) -> Metalloid(x))", "all x.(Tellurium(x) -> Metalloid(x))", "all x.(Tellurium(x) -> Metalloid(x))", "all x.(Tellurium(x) -> Metalloid(x))", "all x.(T tellurium(x) -> Metalloid(x))", "all x.(Tellurium(x) -> Metalloid(x))", "all x.(Tellurium(x) -> (Metalloid(x) & Contains(x,t)))", "all x.(Tellurium(x) -> (Metalloid(x) & OftenOwn(x)))", "all x.(Tellurium(x) -> Metalloid(x))", "all x.(Tellurum(x) -> (Metalloid(x) & IsIn(x,Variety,Vertical)))"]}
{"id": "entailmentbank_validation_815", "nl": "te is a kind of metalloid.", "fol": "", "prediction": ["all x.(Te(x) -> Metalloid(x))", "all x.(Te(x) -> Metalloid(x))", "all x.(Te(x) -> Metalloid(x))", "all x.(TheEarth(x) -> Metalloid(x))", "all x.(Te(x) -> Metalloid(x))", "all x y.((Te(x) & Metalloid(y)) -> HasEnvironment(x,y))", "all x.((Te(x) & Metalloid(x)) -> Metalloid(x))", "all x.(Te(x) -> Metalloid(x))", "all x.(Te(x) -> Metalloid(x))", "all x.(Te(x) -> Metalloid(x))", "all x.(Te(x) -> Metalloid(x))", "all x.(Te(x) -> Metalloid(x))", "all x.(Te(x) -> Metalloid(x))", "all x.(Te(x) -> Metalloid(x))", "all x.(Te(x) -> Metalloid(x))", "(all x.(Te(x) -> Metalloid(x)))"]}
{"id": "entailmentbank_validation_816", "nl": "antimony is a kind of metalloid.", "fol": "", "prediction": ["all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> (Metalloid(x) & Metalloid(x)))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))"]}
{"id": "entailmentbank_validation_817", "nl": "the chemical symbol for antimony is sb.", "fol": "", "prediction": ["-Symbol(x).", "(ChemicalSymbol(antimony) -> sb))", "(ChemicalSymbol(antimony) | ChemicalSymbol(antimony,sb))", "all x.(AntimonyChemicalSymbol(x) -> sb(x))", "the chemical symbol for antimony is sb.", "Sb(x) -ChemicalSymbol(x))", "all x.(AntimonySymbol(x) -> Sb(x))", "all x.(Antimony(x) -> ChemicalSymbol(x))", "(ChemicalSymbolForAntimony(ChemicalSymbolForAntimony(ChemicalSymbol(ChemicalSymbol(cmo) & isSb))", "all x.(Antimony(x) -> ChemicalSymbol(x,sb))", "all x.(Antimony(x) -> ChemicalSymbol(x,sb))", "all x.(Antimony(x) -> ChemicalSymbol(x,sb))", "all x.(Antimony(x) -> ChemicalSymbol(x(x))", "(ChemicalSymbol(antimony) -> sb(antimony))", "(ChemicalSymbol(antimony) -> sb(antimony))", "all x.(Antimony(x) -> ChemicalSymbol(x))"]}
{"id": "entailmentbank_validation_818", "nl": "sb is a kind of metalloid.", "fol": "", "prediction": ["all x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "All x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "all x.(SB(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))"]}
{"id": "entailmentbank_validation_819", "nl": "sb and te are both metalloids.", "fol": "", "prediction": ["all x.(Metalloid(x) -> (SB(x) | Te(x)))", "all x.(Metalloid(x) -> (Sb(x) | Tee(x)))", "((Sb(Sb) & -Te(Te)) | Metalloid(Te)))", "(Metalloid(sb) & Metalloid(te))", "(Melloid(Sb) & Metalloid(Te))", "(Materialloid(sb) & Metalloid(te))", "(Metalloid(sb) & Metalloid(te))", "(Solid(sb) & Metalloid(te))", "all x.((Sb(x) | Te(x)) -> Metalloid(x))", "((Sb(SB) & -Te(Te)) -> Metalloid(Sb) & Metalloid(Te))", "(Metalloid(Sb) & Metalloid(Te))", "(Metalloids(sb) & Metalloids(te))", "all x y.((Sb(x) & Te(y)) -> Metalloid(x))", "all x.((Sb(x) | Te(x)) -> Metalloid(x))", "(Metalloids(sb) & Metalloid(te))", "all x.((Sb(x) & -Te(x)) -> Metalloid(x))"]}
{"id": "entailmentbank_validation_820", "nl": "helium / neon / argon / krypton / xenon / radon belongs to noble gases family, group 18 on the periodic table.", "fol": "", "prediction": ["all x y.((Helium(x) & Neon(y) & Argon(y) & Krypton(y) & Xenon(y)) -> NobleGasFamily(x,y))", "all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> NobleGasFamily(x))", "all x.((Leaf(x) & NobleGasFamily(x) & Group18(x)) -> (Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)))", "all x y z.((ExternalTab(x) & Helium(y) & Neon(z)) -> (Argon(y) & Kratos(z) & Krypton(w) & Xenon(w) & Radon(y)))", "all x y z.((Helium(x) & Neon(y) & Argon(z)) -> (NobleGasFamily(x) & Group18(z) & OnPeriodicTable(x)))", "all x.((Holium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x)) -> NobleGases(x,19,18))", "all x y z.((Helium(x) & Neon(y) & Argon(z) & Krypton(z) & Xenon(z)) -> NobleGasesFamilyChapters18(x,y,z))", "all x y z.((Hydro(x) & Helium(y) & Neon(y) & Argon(x) & Krypton(z) & Xenon(z)) -> NobleGases(x,y))", "all x y.((HollowGas(x) & NobleGas(y) & (Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> NobleGasFamily(x,y))", "all x y z.((Holium(x) & NobleGasFamily(y) & Neo(z) & ARGON (alpha) & Krypton(y) & Xenon(z)) & Radon(x)) -> Afto(x,y,z))", "all x.((Helium(x) & Neon(x) & Argon(x) & Kypton(x) & Xenon(x) & Radon(x)) -> RooseGasesFamily(x))", "all x y.((Hydro(x) & Neon(y) & Argon(y) & Krypton(y) & Retina(x)) -> (NobleGasFamily(x,y) & Group18(x)))", "all x y.((HolyGases(x) & NobleGasFamily(y) & Group18(x,y)) -> (HeliumNeonArgonKryptonDynonRodson(x) | NobleGasFamily(y)))", "all x y.((HollowGasFamily(x) & HomologousGasfamily(x) & Group18(x)) -> (HeliumNeonArgonKryptonxxenonRodon(y)))", "all x.((HollowGases(x) & NobleGases(x,8)) -> (Hydroium(x) & Neon(x) & Argon(x) & Rypton(x) & Xenon(x) & Radon(x)))", "all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x)) -> NobleGasesFamily(x,18))"]}
{"id": "entailmentbank_validation_821", "nl": "elements in group 18 have complete outer electron shells on the periodic table of elements.", "fol": "", "prediction": ["all x.((Element(x) & Group18(x)) -> CompleteOuterElectronShells(x,p\u00e9riodicalTableOfElements))", "all x.((ElementsInGroup18(x) & CompleteOuterElectronShells(x)) -> PeriodicTableOfElements(x))", "all x.((ElementsInGroup18(x) & CompleteOuterElectronShells(x)) -> PeriodicTableOfElements(x))", "all x y.((Element(x) & Group18(x)) -> (CompleteOuterElectronShell(y) & OnPeriodicalTableCall(y)))", "all x.((Elements(x) & Group18(x)) -> CompleteExternalElectronShells(x))", "all x.(Element(x) -> (ExternalElectronShells(x) & PeriodicTable(x)))", "all x.(Element(x) -> ToHaveElectronShellOnElementDate(x,8))", "all x.((Element(x) & Group18) & CompleteOuterElectronShells(x)) -> PeriodicTableOfElements(x))", "all x.(Group18(x) -> CompleteOuterElectronShells(x))", "all x.(Group18(x) -> WholeOuterElectronShells(x))", "all x y.((Element(x) & Group18(y) & CompleteOuterElectronShellOnPeriodicalTable(x,y)) -> NoOuterElectronShells(x,y))", "all x.((Elements(x) & Group18(x)) -> CompleteOuterElectronShells(x))", "all x.((ElementsInGroup18(x) & CompleteOuterElectronShells(x)) -> PeriodicTableOfElements(x))", "all x.((Element(x) & Group18(x)) -> CompleteOuterElectronShell(x))", "all x y z.((Element(x) & Element(y) & MolecularShelf(z) & Group18) & PeriodicalTableOfElements(x,y)) -> CompleteOuterElectronshell(x,z))", "all x.((ElementsInGroup18(x) & CompleteOuterElectrodenShells(x)) -> PeriodicTableBetweenElements(x))"]}
{"id": "entailmentbank_validation_822", "nl": "helium, neon, argon, krypton, xenon, and radon have complete outer electron shells.", "fol": "", "prediction": ["all x.((Shelium(x) | Neon(x) | Argon(x) | Krypton(x) | xenon(x) | Radon(x)) -> CompleteOuterElectronShells(x))", "(ElectromagneticShells(helium) & CompleteOuterElectronShells(neon) & CompleteOuterElectronShells(argon) & CompleteOuterElectronShell(krypton) & CompleteOuterElectronShell(xenon))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> CompleteOuterElectronShells(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> CompleteOuterElectronShell(x))", "all x y z.((Hydrome(x) & Neon(y) | Argon(z) | Krypton(z) | Xenon(z) | Radon(z)) & CompleteOuterElectronShells(x)) -> CompleteOuterElectronShells(x))", "(Harmonium(helium) | Neon(neon) | Argon(neon) | Krypton(neon) | Xenon(neon) | radon(neon))) have complete outer electronshells (external), outer,neon,neon,argon,krypton) & inner,xenon)))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> CompleteOuterElectronShell(x))", "all x.((Hydro(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> CompleteOuterElectronShells(x))", "all x y z.((Hydro(x) & Neon(y) & Argon(z) & Krypton(w) & Xenon(z)) -> CompleteOuterElectronShells(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> CompleteOuterElectronShells(x))", "all x y.(((Helium(x) & Neon(x) & Argon(y) & Kraypton(y) & Xenon(y)) | Radon(y)) -> HasCompleteOuterElectronShells(x))", "(ExteriorElectronShell(helium) & Complete(neon) & Complete(argon) & Complete(arken))", "(OuterElectronShell(helium) & OuterElectronShell(neon) & OuterElectronShell(argon) & OuterElectronShell(xenon) & OuterElectronShell(x,neon) & OuterElectronShell(x,argon))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> CompleteOuterElectronShells(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> CompleteOuterElectronShell(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> HasCompleteOuterElectronShells(x))"]}
{"id": "entailmentbank_validation_823", "nl": "if the outermost electron shell of an atom is complete, then the element of those atoms will not react with other elements easily.", "fol": "", "prediction": ["all x y.((Atom(x) & CompleteElectronShell(x) & Atom(y)) -> -ReactWithElementsEasily(x,y))", "all x.((OutermostElectronShell(x) & Complete(x)) -> -ReactsEasilyWithOtherElements(x))", "all x.((OutermostElectronShell(x) & Complete(x)) -> ElementOfAtomsDoorThanReactWithElementsEasily(x))", "all x.((OutermostElectronShell(x) & Complete(x)) -> Element(x))", "all x y.((OutermostElectronShell(y) & Atom(x) & Complete(y)) -> -ReactsWithElementsEasily(x))", "all x y z.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> (Element(z) & -ReactsWithElementsEasily(z)))", "all x.((OutermostElectronShell(x) & Complete(x)) -> ElementOfAtom(x))", "all x y z.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> -ReactsWithElements(z,y))", "all x.((OutermostElectronShell(x) & Complete(x)) -> ElementOfAtoms(x))", "all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> ElementOf(x,y))", "all x y.(((OutermostElectronShell(x) & Atom(y) & Complete(x)) -> -ReactsWithOtherElementsEasily(x,y)))", "all x.((OutermostElectronShell(x) & Complete(x)) -> Elements(x))", "all x.((OutermostElectronShell(x) & Complete(x)) -> Element(x,y))", "all x.((OutermostElectronShell(x) & Complete(x)) -> WillNotReactWith(x,y))", "all x.((OutermostElectronShell(x) & Complete(x)) -> ElementNotReactsWithElements(x))", "all x.((OutermostElectronShell(x) & Complete(x)) -> -ReactsWithOtherElementsEasily(x))"]}
{"id": "entailmentbank_validation_824", "nl": "helium, neon, argon, krypton, xenon, and radon will not react with other elements easily.", "fol": "", "prediction": ["all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> -ReactsWithElementsEasily(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> -Reacts(x))", "all x y z w.((Helium(x) & Neon(y) & Argon(z) & Krypton(w) & Xenon(w) & Radon(w)) -> -ReactsEasilyWithElements(x,y,z,w))", "(all x.(Holium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> -ReactsWithItem(x))", "(all x y z.(Helium(x) & Natron(y) & Argon(y) & Krypton(z) & Xenon(z) & radon(y)) -> -ReactsEasilyWithElements(x,y))", "all x y.((Hexameter(x) & Neon(y) & Argon(y)) -> -(ReactsWithElements(x,y) & ReactsWithElements(x,y)))", "all x.((Holeum(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> -ReactWithAlways(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> -reactsWithElementsEasily(x))", "all x y z.((Helium(x) & Neon(y) & Argon(z) & Krypton(y) & Xenon(z) & Radon(y)) -> -ReactsWithOtherElementsEasily(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> -ReactsWithElementsEasily(x))", "all x.((Helium(x) & Neon(x) & Ardon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> -ReactsExactly(x))", "(ReactsWithElements(helium,neon,argon,krypton,xenon,radon))", "all x y z.((Helium(x) & Neon(y) & Argon(z) & Krypton(a) & xenon(z)) -> -ReactsWith(x,y,z))", "all x y z.((Helium(x) | Neon(y) | Argon(y) | Krypton(z) | Xenon(z) | Radon(x)) -> -ReactsEasilyWithFollowingElements(x,y))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> -EasilyReactsWithElements(x))", "all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> -ReactsEasilyWithElements(x))"]}
{"id": "entailmentbank_validation_825", "nl": "water is a kind of substance.", "fol": "", "prediction": ["all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> TypeOfSubstance(x))", "all x.(Water(x) -> TypeOfSubstance(x))", "all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> isSubstance(x))", "all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> Substance(x))"]}
{"id": "entailmentbank_validation_826", "nl": "boiling means matter / a substance changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x y.((Boiling(x) & Processions(y) & HeatEnergy(y)) -> ChangesFromLiquidToGas(x,y))", "all x y.((BoilingHasMatter(x) & Substance(y)) -> (ChangesFromLiquidToGas(y) & IncreasesHeatEnergy(y)))", "all x y.((Boiling(x) & Substance(y)) -> (MatterChange(x,y) & GasChange(y)))", "all x y z.((Boiling(x) & Matter(y) & Gas(z) & Liquid(x) & HeatEnergy(z)) -> ChangesFromTo(x,y,z))", "all x y.(BoilingMatter(x) -> (CausesLegacy(x,y) & Chemical(y) & IncreasesHeatEnergy(x)))", "all x y.((Boiling(x) & Dissolving(y)) -> (ChangesNegativity(x,y) & IncreasesHeatEnergy(x,y)))", "all x y.((BoilingMedium(x) & Substance(y)) -> (ChangesFromLiquidIntoGasByIncreasedHeatEnergy(y,x)))", "all x.(BoilingMatter(x) -> (ChangesFromLiquid(x) & IntoGas(x) & IncreasesHeatEnergy(x)))", "all x.(BoilingMatter(x) -> (ChangesFromLiquid(x) & IncreasesHeatEnergy(x)))", "all x y.((BoilingMatter(x) & Substance(y)) -> (ChangesFromLiquidToGas(y) & IncreasesHeatEnergy(x,y)))", "all x y z.((BoilingMethod(x) & Substance(y) & Liquid(z)) -> ChangesIntoGasByHeatEnergy(y,z))", "all x y.((Boiling(x) & Substance(y)) -> (ShiftsFromLiquidToGas(x,y) & IncreasesHeatEnergy(y)))", "all x y z.((Boiling(x) & Substance(y) & Liquid(z) & ChangesFromToGasByIncreasedHeatEnergy(x,y,z)) -> Changes(y,z))", "all x y.((BoilingMethod(x) & Substance(y)) -> (ChangesFromLiquidToGas(x,y) & IncreasesHeatEnergy(z)))", "all x y z.((Boiling(x) & Substance(y) & Liquid(z)) -> ChangesStopsToGasByIncreasingHeatEnergy(y,z))", "all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidToGasByIncreasingHeatEnergy(y,x)))"]}
{"id": "entailmentbank_validation_827", "nl": "water boiling is when water changes from a liquid into a gas.", "fol": "", "prediction": ["all x y z.((Water(x) & Liquid(y) & Gas(z)) -> Boiling(x,y))", "all x.(BoilingWater(x) -> ChangesFromLiquidToGas(x))", "all x y.((Water(x) & Liquid(x) & Gas(y)) -> ChangesTo(x,y))", "all x y.((Water(x) & Liquid(y) & Gas(y)) -> ChangesFrom(x,y))", "all x y z.((Water(x) & Liquid(y) & Gas(z)) -> WaterBoiling(x))", "all x.((Water(x) & Liquid(x) & Gas(x)) -> Boiling(x))", "all x.((Water(x) & Liquid(x) & Gas(x)) -> Boiling(x))", "all x y.((Water(x) & Liquid(y)) -> Transition(x,y))", "all x.((Water(x) & Liquid(x)) -> Gas(x))", "all x.(WaterBoiling(x) -> ChangesLiquidIntoGas(x))", "all x.(WaterBoiling(x) -> WaterChangesFromLiquidToGas(x))", "all x.(Boiling(x) -> ChangesLiquidIntoGas(x))", "all x.((Water(x) & Liquid(x) & Gas(x)) -> HotWater(x))", "all x.((Water(x) & Liquid(x) & Gas(x)) -> BoilingWater(x))", "all x.((Water(x) & Liquid(x) & Gas(x)) -> Boiling(x))", "all x y z.((WaterBoiling(x) & Liquid(y) & Gas(z)) -> WaterChangesTo(x,y,z))"]}
{"id": "entailmentbank_validation_828", "nl": "water is in the gas state, called water vapor / steam, for temperatures above 100 c.", "fol": "", "prediction": ["all x y.((Water(x)) -> GasState(x,y))", "all x.((Water(x) & WaterVapor(x) & WaterSteam(x)) -> Above100C(x))", "all x.((Water(x) & GasState(x)) -> exists y.(Temperature(y) & Above(y,100c))))", "all x.((Water(x) & Gas(x) & Temperature(x,alt)) -> WaterVaporSteam(x))", "all x.((Water(x) & WaterVapor(x) & WaterSteam(x)) -> TemperaturesAbove100C(x))", "all x.((Waiting(x) & GasState(x) & TemperatureAboveChance(x,100C)) -> WaterVapor/Steam(x))", "all x.((Water(x) & GasState(x)) -> (WaterVapor(x) | WaterSteam(x)))", "all x.((Water(x) & WaterVapor(x) & HeatsAbove100C(x)) -> GasState(x))", "all x.((Water(x) & WaterVapor(x)) -> Gas(x))", "all x.((Water(x) & Gas(x)) -> (WaterVapor(x) & WaterSteam(x) & TemperatureAbove100C(x)))", "all x.(Water(x) -> (WeatherVapor/Steam(x) & TemperatureAbove100C(x)))", "all x.((Water(x) & GasState(x) & HeatTemperatureOver100C(x)) -> WaterVaporSteam(x))", "all x.((Water(x) & GasState(x)) -> (WaterVaporSteam(x) & PresencesAbove100C(x)))", "all x.((Water(x) & WaterVapor(x) & Steam(x)) -> ForTemperaturesAbove100C(x))", "all x.((Water(x) & WaterVapor(x)) -> (InGas(x) & ForTemperaturesAbove100C(x)))", "all x.((Water(x) & Gas(x)) -> (WaterVapor(x) | WaterSteam(x)))"]}
{"id": "entailmentbank_validation_829", "nl": "water is in the liquid state, called liquid water, for temperatures between 0 c and 100 c.", "fol": "", "prediction": ["all x.((Water(x) & LiquidState(x) & TemperaturesBetween(x,0,125)) -> LiquidWater(x))", "all x.((Water(x) & LiquidState(x)) -> (TemperatureFrom0To100C)))", "all x.((Water(x) & Liquid(x) & TemperatureBetween0(x,0) & TemperatureBetween100(x)) -> LiquidWater(x))", "all x.((Water(x) & LiquidState(x)) -> TemperatureMovement(x,0,100C))", "all x.((Water(x) & LiquidState(x) & Temperatures(x,y) & NoTemperature(x,y)) -> LiquidWaterForTemperature(x,y))", "all x y z.((Water(x) & LiquidState(y) & Temperature(z)) -> UsedFor(x,y,z))", "all x.((Water(x) & LiquidState(x)) -> (ForTemperaturesBetween0C and (From0C) -> From100C))))", "all x.((Water(x) & LiquidState(x)) -> (IsBetweenClock(x,0) & IsBetweenClock(x,100)))", "all x y.((Water(x) & Temperature(y) & Temperature(y) & Between(x,y,z)) -> LiquidStateLiquidWater(x))", "all x.((Water(x) & LiquidState(x)) -> TemperatureArea(x,0,C) & TemperatureArea(x,100C))", "all x.((Water(x) & LiquidState(x) & TemperaturesBetween0And100C(x)) -> LiquidWater(x))", "all x.(Arrival(x) -> LiquidState(x))", "all x.(LiquidState(x) -> ForTemperaturesBetween0(x,0) & ForTemperaturesBetween100(x)))", "all x.((Water(x) & LiquidState(x)) -> (TemperatureBetween(x,0,100,10)))", "all x.(LiquidState(x) & HeatsBetween(x,0,100,C))", "all x.((Water(x) & LiquidState(x) & TemperaturesBeyond0C>(x,100C)) -> LiquidWater(x))"]}
{"id": "entailmentbank_validation_830", "nl": "water boiling is when water changes from liquid water to water vapor.", "fol": "", "prediction": ["all x.(WaterBoiling(x) -> (ChangesLiquidWater(x) & ChangesToWaterVapor(x)))", "all x.(WaterBoiling(x) -> WaterChange(x))", "all x.(WaterBoiling(x) -> ChangesLiquidWaterToWaterVapor(x))", "all x.(WaterBoiling(x) -> WaterChangesFromLiquidWaterToWaterVapor(x))", "all x.(BoilingWater(x) -> ChangeOrLiquidWaterToWaterVapor(x))", "all x.(Boiling(x) -> WaterChangesFromLiquidWaterToWaterVapor(x))", "all x.(WaterBoiling(x) -> (WaterChangesFromLiquidToWaterVapor(x)))", "all x.(WaterBoiling(x) -> ChangesFromLiquidWaterToWaterVapor(x))", "all x.(WaterBoiling(x) -> ChangesFromLiquidWaterToWaterVapor(x))", "all x.(Water(x) -> (ChangesFromLiquidWaterToWaterVapor(x)))", "all x.((WaterChange(x) & LiquidWater(x)) -> WaterVapor(x))", "all x.(Water(x) -> ChangesFromLiquidWaterToWaterVapor(x))", "all x.((Water(x) & LiquidWater(x)) -> WaterVolume(x))", "all x.(WaterBoiling(x) -> WaterChangesFromLiquidWaterToWaterVapor(x))", "all x.((Water(x) & ChangesFromLiquidWaterToWaterVapor(x)) -> WaterBoiling(x))", "all x.(BoilingWater(x) -> WaterChange(x,LiquidWater,WaterVapor))"]}
{"id": "entailmentbank_validation_831", "nl": "water boiling is when water changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x y z.((Water(x) & Liquid(y) & Gas(z) & IncreasesHeatEnergy(x,y)) -> BoilingWater(x))", "all x y z.((Water(x) & Liquid(y) & Gas(z) & IncreasesHeatEnergy(x,y)) -> Boiling(x))", "all x.((Water(x) & Liquid(x) & Gas(x)) -> IncreasesHeatEnergy(x))", "all x.((Water(x) & Liquid(x)) -> Gas(x))", "all x y.((Water(x) & Liquid(y) & Gas(z)) -> WaterBoiling(x,y,z))", "all x.(WaterBoiling(x) -> (WaterChange(x) & LiquidIntoGasByIncreasingHeatEnergy(x)))", "all x y z.((Water(x) & Liquid(y) & Gas(z)) -> (Changes(x,y,z) & IncreasesHeatEnergy(x)))", "all x y.((WaterBoiling(x) & Liquid(y) & Gas(z)) -> ChangesColor(x,y,z))", "all x.((WaterBoiling(x) & IncreasedHeatEnergy(x)) -> WaterChangesFromLiquidToGas(x))", "all x y.((Water(x) & Liquid(y)) -> ChangesToGasBetweenHeatEnergy(x,y))", "all x y.((Water(x) & Liquid(y) & Gas(y)) -> ChangesByIncreasingHeatEnergy(x,y))", "all x.((WaterBoiling(x) & ChangesLiquidToGas(x) & IncreasesHeatEnergy(x)) -> WaterChangesByIncreasingHeatEnergy(x))", "all x y.((Water(x) & Liquid(y) & Gas(y)) -> ChangesByEnhancedHeatEnergy(x,y))", "all x y.((WaterBoiling(x) & Liquid(y)) -> WaterChangesWithIncreasedHeatEnergy(x,y))", "all x.((WaterChanges(x) & LiquidIntoGas(x)) -> IncreasedHeatEnergy(x))", "all x.((Water(x) & Liquid(x) & Gas(x) & IncreasesHeatEnergy(x)) -> Boiling(x))"]}
{"id": "entailmentbank_validation_832", "nl": "a puddle is a kind of body of water.", "fol": "", "prediction": ["all x.(Puddle(x) -> BodyOfWater(x))", "all x.(Puddle(x) -> BodyOfWater(x))", "all x.(Puddle(x) -> (BodyOfWater(x)))", "all x.(Puddle(x) -> KindOfWater(x))", "all x.(Puddle(x) -> (BodyOfWater(x)))", "all x.(Puddle(x) -> BodyOfWater(x))", "all x.(Puddle(x) -> BodyOfWater(x))", "all x.(Puddle(x) -> BodyOfWater(x))", "all x.(Puddle(x) -> BodyOfWater(x))", "all x.(Puddle(x) -> BodyOfWater(x))", "all x.(Puddle(x) -> BodyOfWater(x))", "all x.((Puddle(x) & BodyOfWater(x)) -> SmellsOfWater(x))", "exists x.(Puddle(x) & BodyOfWater(x))", "all x.(Puddle(x) -> BodyOfWater(x))", "all x.(Puddle(x) -> BodyOfWater(x))", "all x.(Puddle(x) -> (BodyOfWater(x) & ContainsWater(x)))"]}
{"id": "entailmentbank_validation_833", "nl": "being in the sun will cause the puddle to absorb heat energy.", "fol": "", "prediction": ["all x.((Puddle(x) & InSun(x)) -> AbsorbsHeatEnergy(x))", "all x y.((Puddle(x) & Sun(y)) -> AbsorbHeatEnergy(x,y))", "all x.(SunInPuddle(x) -> AbsorbsHeatEnergy(x))", "all x.(InSun(x) -> AbsorbsHeatEnergy(x))", "all x.((Sun(x) & Puddle(x)) -> AbsorbsHeatEnergy(x))", "all x y.((Puddle(x) & Sun(y)) -> AbsorbsHeatEnergy(x,y))", "all x y.((Puddle(x) & Sun(y) & In(x,y)) -> AbsorbsHeatEnergy(x))", "all x.(SunIn(x) -> AbsorbsHeatEnergy(x))", "ALL x.(InSun(x) -> AbsorbsHeatEnergy(x))", "all x.(Sun(x) -> AbsorbedHeatEnergy(x))", "all x y.((Puddle(x) & InSun(x)) -> AbsorbsHeatEnergy(x,y))", "all x.(SunBeingInPuddle(x) -> AbsorbsHeatEnergy(x))", "all x.(Sun(x) -> AppearsHeatEnergy(x))", "all x.((InSun(x) & PuddleInSun(x)) -> AbsorbsHeatEnergy(x))", "all x.(Sun(x) -> AbsorbsHeatEnergy(x))", "all x.(SunIn(x) -> AbsorbsHeatEnergy(x))"]}
{"id": "entailmentbank_validation_834", "nl": "the puddle will evaporate.", "fol": "", "prediction": ["all x.(Puddle(x) -> Evaporates(x))", "all x.(Puddle(x) -> Evaporate(x))", "all x.(Puddle(x) -> Evaporate(x))", "all x.(Puddle(x) -> Evaporates(x))", "all x.(Puddle(x) -> Evaporates(x))", "all x.((Puddle(x) & WillEvaporate(x)) -> Towel(x))", "all x.(Puddle(x) -> Evaporates(x))", "all x.(Puddle(x) -> Evaporates(x))", "all x.((Puddle(x) & Water(t)) -> Evaporate(x))", "all x.(Puddle(x) -> Evaporate(x))", "all x y.((Puddle(x) & Puddle(y)) -> Evaporate(x,y))", "all x.(Puddle(x) -> Evaporates(x))", "all x y.((Puddle(x) & Stream(y)) -> Evaporates(x,y))", "all x.(Puddle(x) -> Evaporates(x))", "all x.(Puddle(x) -> Evaporates(x))", "all x y.((Puddle(x) & Puddle(y)) -> Evaporates(x))"]}
{"id": "entailmentbank_validation_835", "nl": "an example of evaporation is a body of water drying up by absorbing heat energy.", "fol": "", "prediction": ["all x.(Evaporation(x) -> (BodyOfWater(x) & DrysUpByAbsorbingHeatEnergy(x)))", "all x y.(Evaporation(x) -> (BodyOfWater(y) & DryingUp(y) & AbsorbsHeatEnergy(y)))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & AbsorbsHeatEnergy(y)) -> DryingUpBeforeEvaporation(x,y))", "all x.((BodyOfWater(x) & DrysUpByAbsorbingHeatEnvironment(x)) -> Evaporation(x))", "all x.((BodyOfWater(x) & DryingUpByAbsorbingHeatEnergy(x)) -> Evaporation(x))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & DriesUp(x,y)) -> AbsorbsHeatEnergy(x))", "all x.((BodyOfWater(x) & DrysUpByAbsorbingHeatEnergy(x)) -> Evaporation(x))", "all x.((BodyOfWater(x) & AbsorbsHeatEnergy(x)) -> Evaporation(x))", "all x.((BodyOfWater(x) & DrainingByAbsorbingHeat(x)) -> Evaporation(x))", "all x.((BodyOfWater(x) & DusksUpByAbsorbingHeatEnergy(x)) -> Evaporation(x))", "all x.((BodyOfWater(x) & DrainingByAbsorbingHeatEnergy(x)) -> Evaporation(x))", "all x.((BodyOfWater(x) & DrysUp(x) & AbsorbsHeatEnergy(x)) -> Evaporation(x))", "all x.(Evaporation(x) -> (BodyOfWater(x) & DryingUp(x) & AbsorbingHeatEnergy(x)))", "all x.(Evaporation(x) -> (BodyOfWater(x) & DrysUpByAbsorbingHeatEnergy(x)))", "all x y.((BodyOfWater(x) & HeatEnergy(y) & DrysUpByAbsorbing(x,y)) -> Evaporation(x))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & AbsorbsHeatEnergy(x)) -> Evaporation(x))"]}
{"id": "entailmentbank_validation_836", "nl": "a puddle drying in the sun is an example of evaporation.", "fol": "", "prediction": ["all x.((Puddle(x) & DryingInSun(x)) -> evaporation(x))", "all x.((Puddle(x) & DryingInSun(x)) -> Evaporation(x))", "all x.(PuddleDryingInSun(x) -> Evaporation(x))", "all x y.((Puddle(x) & Sun(y) & DryingIn(x,y)) -> Evaporation(x))", "all x.(Evaporation(x) -> (DryingInSun(x) & Sun(x)))", "all x y z.((Puddle(x) & Sun(y) & Sun(z) & DrysIn(x,y)) -> Evaporation(x))", "all x.((Puddle(x) & DryingInSun(x)) -> Evaporation(x))", "all x.((Puddle(x) & DryingInSun(x)) -> Evaporation(x))", "all x.((Puddle(x) & DryingInSun(x)) -> Evaporation(x))", "all x.((Puddle(x) & Drying(x) & Sun(x)) -> Evaporation(x))", "all x y.((Puddle(x) & Sun(y) & DrysIn(x,y)) -> Evaporation(x))", "all x.((Puddle(x) & DryingInSun(x)) -> Evaporation(x))", "all x y z.((Puddle(x) & Sun(y) & Sun(z)) -> DryingIn(x,y,z))", "all x y.((Puddle(x) & Sun(y) & DryingIn(x,y)) -> Evaporation(x))", "all x.((Puddle(x) & DryingInSun(x)) -> Evaporation(x))", "all x y.((Puddle(x) & DriesInSun(x)) -> Evaporation(y))"]}
{"id": "entailmentbank_validation_837", "nl": "if something is in the sunlight then that something will absorb solar energy.", "fol": "", "prediction": ["all x.((InSunlight(x) & Sunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.(Sunlight(x) -> AbsorbsSolarEnergy(x))", "all x.((InSunlight(x) & AtomicEnergy(x)) -> AbsorbSolarEnergy(x))", "all x.((Sunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.(BetweenSunlightAndSolarEnergy(x)) -> AbsorbsSolarEnergy(x))", "all x.((Sunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.((InSunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.((Sunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.((Sunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.((Sunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.(Sunlight(x) -> AbsorbsSolarEnergy(x))", "all x y.((Sunlight(x) & Sunlight(y)) -> AbsorbsSolarEnergy(x,y))", "all x.((Sunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Sunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(y))", "all x.(Sunlight(x) -> AbsorbsSolarEnergy(x))", "all x.(RainingInSunlight(x) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_validation_838", "nl": "a bucket of water in in the sunlight.", "fol": "", "prediction": ["all x y z.((Pool(x) & Water(y) & Sunlight(z)) -> In(x,y,z))", "all x.((BoatOfWater(x) & inSunlight(x)) -> InWater(x))", "all x y.((BoatOfWater(x) & Sunlight(y)) -> InIn(x,y))", "all x.(BootOfWater(x) -> InInSunlight(x))", "all x y.(BoatOfWater(x,y) -> InSunlight(y))", "all x y.((HootOfWater(x) & Sunlight(y)) -> In(x,y))", "all x.(WaterBoon(x) -> InSunlight(x))", "exists x.(BootOfWater(x) & InSunlight(x))", "all x y.((BogonOfWater(x) & Sunlight(y)) -> In(x,y))", "all x y.((BeepOfWater(x) & Sunlight(y)) -> InIn(x,y))", "all x.((BedollOfWater(x) & InSunlight(x)) -> SetIn(x))", "all x.(BubbleOfWater(x) -> InSunlight(x))", "exists x.(PouchOfWater(x) & InSunlight(x))", "all x.((BoatOfWater(x) & Sunlight(x)) -> InIn(x,light,sunlight))", "exists x.(BookOfWater(x) & InSunlight(x))", "all x y.((BockOfWater(x) & Sunlight(y)) -> InIn(x,y))"]}
{"id": "entailmentbank_validation_839", "nl": "the water in the bucket will absorb solar energy.", "fol": "", "prediction": ["all x y.((Water(x) & Bucket(y) & AbsorbsSolarEnergy(y)) -> WaterInBeak(x,y))", "all x.((WaterEnergy(x) & InBoot(x,y)) -> AbsorbsSolarEnergy(y))", "all x y.((Water(x) & BucketPouch(y)) -> AbsorbsSolarEnergy(x,y))", "all x y.((WaterInBeak(x) & WaterInBeak(y)) -> AbsorbsSolarEnergy(x))", "all x.((WaterInBoot(x) & AbsorbsSolarEnergy(x)) -> WaterInBoot(x))", "all x y.((Water(x) & Bucket(y)) -> AbsorbsSolarEnergy(x,y))", "all x.((WaterInBoot(x) & AbsorbsSolarEnergy(x)) -> Splutters(x))", "(BeakwaterAbsorbsSolarEnergy(x))", "all x.((Water(x) & Bucket(x)) -> AbsorbsSolarEnergy(x))", "all x.((Water(x) & Bucket(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Water(x) & Bucket(y)) -> AbsorbsSolarEnergy(x,y))", "all x.((WaterInBo bucket(x) & AbsorbsSolarEnergy(x)) -> WaterInBoot(x))", "all x y.((Water(x) & Bucket(y)) -> AbsorbsSolarEnergy(x,y))", "all x.((Water(x) & Bucket(x)) -> AbsorbsSolarEnergy(x))", "all x.((Water(x) & Bucket(x)) -> AbsorbsSolarEnergy(x))", "all x.(Water(x) -> AbsorbSolarEnergy(x))"]}
{"id": "entailmentbank_validation_840", "nl": "if a substance absorbs solar energy then that substance will increase in temperature.", "fol": "", "prediction": ["all x.(AbsorbsSolarEnergy(x) -> IncreasesTemperature(x))", "all x.(Absorbs(x,SolarEnergy) -> IncreasesTemperature(x))", "all x.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(x))", "all x.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasedTemperature(x))", "all x.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreaseInTemperature(x))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x) & ImpropriateTemperature(y)) -> Resistant(x,y))", "all x.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreaseNumberToTemperature(x))", "all x.(AbsorbsSolarEnergy(x) -> IncreasesTemperature(x))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(y))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x) & AdsorbsSolarEnergy(x)) -> IncreasedAtTemperature(y))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreaseInTemperature(x,y))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x) & SunSolarEnergy(y)) -> IncreasesTemperature(x,y))", "all x.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasedTemperature(x))", "all x.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(x))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x,y)) -> IncreaseInTemperature(y))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(x,y))"]}
{"id": "entailmentbank_validation_841", "nl": "the water in the bucket will increase in temperature.", "fol": "", "prediction": ["all x.(Hooped(x) -> IncreasedTemperature(x))", "all x y.(((Water(x) & Bucket(y) & IncreaseInTemperature(x,y)) -> IncreaseInTemperature(x,y))", "all x y.((Water(x) & Bucket(y)) -> IncreasedTemperature(x,y))", "all x y.((Water(x) & Bucket(y)) -> IncreasedTemperature(x,y))", "all x.(WaterInBoot(x) -> IncreasesTemperature(x))", "all x y.((Water(x) & Bucket(y)) -> TemperatureIncreaser(x,y))", "all x.((WaterInBoot(x) & IncreasedTemperature(x)) -> WaterInBoot(x))", "all x.((Water(x) & Bucket(x)) -> IncreasedTemperature(x))", "all x y.((Boot(x) & -Container(y)) -> HeatsUp(x,y))", "all x y.((Hood(x) & Water(y)) -> SteampsInTemperature(x,y))", "all x.((Water(x) & Bucket(x)) -> IncreasesTemperature(x))", "all x.(Beak(x) -> IncreasesTemperature(x))", "all x y.((Water(x) & Bucket(y)) -> IncreasesTemperature(x,y))", "all x.(Water(x) -> IncreasesTemperature(x))", "all x.(Boot(x) -> IncreasedTemperature(x))", "all x.(Beak(x) -> AddsTemperature(x))"]}
{"id": "entailmentbank_validation_842", "nl": "evaporation means a substance changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x y.((Substance(x) & Liquid(y) & Gas(z)) -> ChangesFromTo(x,y,z))", "all x y z.(Exvaporation(x) -> (ChangesFromLiquidIntoGas(y) & IncreasesHeatEnergy(z)))", "all x.(Evaporation(x) -> ChangesLiquid(x) & Gas(x) & IncreasesHeatEnergy(x))", "all x y.((Substance(x) & Liquid(y) & Gas(y)) -> ChangesTo(x,y))", "all x y.((Substance(x) & Liquid(y) & Gas(y,x)) -> ChangesFromTo(x,y))", "all x y z.((Substance(x) & Liquid(y) & Gas(z) & IncreasedHeatEnergy(x,z)) -> ChangesInto(x,y,z,y))", "all x.(Evaporation(x) -> (ChangesFromLiquidInTOGas(x) & IncreasesHeatEnergy(x)))", "all x.(Evaporation(x) -> (ChangesFromLiquid(x) & Gas(x) & IncreasesHeatEnergy(x)))", "all x.(Evaporation(x) -> (ChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))", "all x y.(Evaporation(x) -> (ChangesFromLiquidIntoGas(x) & IncreasesHeat(y)))", "all x.(Evaporation(x) -> (ChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))", "all x y.((Substance(x) & Liquid(y) & Gas(y)) -> ChangesFromTo(x,y))", "all x y.((Substance(x) & Substance(y) & Evaporation(x)) -> ChangesFromLiquidToGasByIncreasedHeatEnergy(x,y))", "all x y.(Evaporation(x) -> (ChangesLiquidToGas(y) & IncreasesHeatEnergy(x,y)))", "all x.(Evaporation(x) -> (ChangesLiquidIntoGas(x) & IncreasesHeatEnergy(x)))", "all x y.((Substance(x) & Liquid(y) & Gas(z) & TemperatureEnergy(x)) -> Evaporation(x,y))"]}
{"id": "entailmentbank_validation_843", "nl": "the water in the bucket will evaporate.", "fol": "", "prediction": ["all x.((Water(x) & Bucket(y) & EvaporatesIn(x,y)) -> WaterInBoot(x))", "all x y.((EvaporateWater(x) & Bucket(y)) -> Vaporize(x,y))", "all x.((Water(x) & Bucket(x)) -> Evaporates(x))", "all x.((WaterInBoot(x)) -> Evaporates(x))", "all x.((Water(x) & Bucket(x)) -> Evaporates(x))", "all x.(Water(x) -> Evaporates(x))", "all x y.((Boot(x) & Water(y)) -> Evaporates(y))", "all x.(Water(x) -> Evaporates(x))", "all x y.((Water(x) & Bucket(y)) -> Evaporates(x,y))", "all x.((Water(x) & Bucket(x)) -> Evaporates(x))", "all x.((WaterInBoot(x) & Evaporates(x)) -> -DryOnGuard(x))", "all x y.((Water(x) & Bucket(y)) -> Evaporation(x,y))", "all x.(Buoy(x) -> WaterEvaporates(x))", "all x.((Water(x) & Bucket(x)) -> Evaporates(x))", "all x.(EvaporatesWater(x) -> InBeak(x))", "all x y.((WaterPackage(x) & Bucket(y)) -> Evaporates(x,y))"]}
{"id": "entailmentbank_validation_844", "nl": "gas is a kind of substance.", "fol": "", "prediction": ["exists x.(Gas(x) & Substance(x) -- Gas(x))", "all x.(Gas(x) -> TypeOfSubstance(x))", "all x.(Gas(x) -> (Substance(x) | Substance(x)))", "all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> Substance(x))"]}
{"id": "entailmentbank_validation_845", "nl": "substances are made of molecules.", "fol": "", "prediction": ["all x.(Substance(x) -> MadeOfMolecules(x))", "all x.(Substance(x) -> MadeOfMolecules(x))", "all x.(Substance(x) -> MadeOfMolecules(x))", "all x.(Substance(x) -> MadeOfMolecules(x))", "all x.(Substance(x) -> MadeOfMolecules(x))", "all x.(Substance(x) -> MadeOfMolecules(x))", "all x.(Substance(x) -> MadeOfMolecules(x))", "all x.(Substance(x) -> MadeOfMolecules(x))", "all x y.((Substance(x) & Molecule(y)) -> MadeOf(x,y))", "all x.(Substance(x) -> MadeOfMolecules(x))", "all x.exists y.(Substance(x) & Molecule(y) & MadeOf(x,y))", "all x.(Substance(x) -> MadeOfMolecules(x))", "all x.(Substance(x) -> MadeOfMolecules(x))", "all x.(Substance(x) -> MadeOfMoleculars(x))", "all x y.((Substance(x) & Molecule(y)) -> MadeOf(x,y))", "all x.(Substance(x) -> MadeOfMolecules(x))"]}
{"id": "entailmentbank_validation_846", "nl": "a gas is made of its molecules.", "fol": "", "prediction": ["all x.(Gas(x) -> MadeOfMoleculars(x))", "all x.(Gas(x) -> MadeOfMolecules(x))", "all x.(Gas(x) -> MadeOfMolecules(x))", "all x.(Gas(x) -> MadeOfMolecules(x))", "all x.(Gas(x) -> MadeOfMolecules(x))", "all x.(Gas(x) -> MadeOfMolecules(x))", "all x.(Gas(x) -> MadeOfMolecules(x))", "all x y.((Gas(x) & Molecule(y)) -> MadeOf(x,y))", "all x.(Gas(x) -> MakesOfMolecules(x))", "all x y.((Gas(x) & Molecule(y)) -> MadeOf(x,y))", "all x.(Gas(x) -> MadeOfMolecules(x))", "all x.(Gas(x) -> MadeOfMolecules(x))", "all x.(Gas(x) -> MadeOfMolecules(x))", "all x.(Gas(x) -> MadeOfMoleculars(x))", "all x.(Gas(x) -> MadeOfMolecules(x))", "all x.(Gas(x) -> MadeOfMolecules(x))"]}
{"id": "entailmentbank_validation_847", "nl": "a gas is heated and its temperature increases.", "fol": "", "prediction": ["all x.(Gas(x) -> (Heated(x) & IncreasedTemperature(x)))", "all x.(Gas(x) -> (Heated(x) & TemperatureIncreased(x)))", "all x y.((Gas(x) & Gas(y)) -> Heated(x,y))", "all x.(Gas(x) -> (Heated(x) & TemperatureIncreased(x)))", "all x.(Gas(x) -> (Heated(x) & IncreasedTemperature(x)))", "all x.((Gas(x) & Heated(x)) -> IncreasesTemperature(x))", "all x.(Gas(x) -> (Heated(x) & TemperatureIncrease(x)))", "all x.(Gas(x) -> Heats(x) & TemperatureIncreases(x))", "all x.(Gas(x) -> (Heated(x) & TemperatureIncreased(x)))", "all x.(Gas(x) -> (Heated(x) & TemperatureIncrease(x)))", "all x.(Gas(x) -> (Heated(x) & TemperatureIncrease(x)))", "all x.(Gas(x) -> (Heated(x) & TemperatureIncreases(x)))", "all x.(Gas(x) -> (Heated(x) & TemperatureInvestition(x)))", "all x.(Gas(x) -> (Heated(x) & IncreasedTemperature(x)))", "all x.((Gas(x) & Heated(x)) -> TemperatureIncrease(x))", "all x.(Gas(x) -> Heats(x) & TemperatureIncreases(x))"]}
{"id": "entailmentbank_validation_848", "nl": "as the temperature of a substance increases, the molecules in that substance will move faster / farther apart.", "fol": "", "prediction": ["all x.((Substance(x) & IncreasesTemperature(x)) -> MoleculesMoveFaster(x))", "all x y.((Substance(x) & TemperatureIncrease(x,y)) -> Moles(x))", "all x.((Substance(x) & IncreasesTemperature(x)) -> MoveFasterAndFarmerApart(x))", "all x y.((Substance(x) & Temperature(y)) -> MobilizedIn(x,y))", "all x.((Substance(x) & TemperatureIncrease(x)) -> MovementFaster(x))", "all x y.((Substance(x) & TemperatureIncrease(x,y)) -> InMoon(x,y))", "all x.((Substance(x) & IncreasedTemperature(x)) -> MovableMolecules(x))", "all x y z.((Substance(x) & Temperature(y) & Mass(z) & Increases(y)) -> MobiliarsMoveFasterAndFixed(z))", "all x y z.((Substance(x) & Temperature(y) & Molecule(z)) -> (TemperatureIncreases(x,y) & MoveFaster(x,z) & FartherApart(x,z)))", "all x.((Substance(x) & TemperatureIncreases(x)) -> MoleculesMoveFaster(x))", "all x y z.((Substance(x) & Temperature(y) & Mass(z)) -> (Increases(x,y) & MobilizationHasScarce(z,y)))", "all x.((Substance(x) & IncreasedTemperature(x)) -> MoveMolecules(x))", "all x.((Substance(x) & TemperatureIncreases(x,e)) -> MembraneMovementApart(x,flash))", "all x y.((Substance(x) & IncreasedTemperature(x)) -> MovesFaster(x,y))", "all x y.((Substance(x) & TemperatureIncreases(x)) -> MoleculesMoveFasterAndFarter(y))", "all x y z.((Substance(x) & Temperature(y) & Molecule(z)) -> (Together(z,y) & Increased(z,y)))"]}
{"id": "entailmentbank_validation_849", "nl": "the molecules in the gas will move faster.", "fol": "", "prediction": ["all x y.((Molecules(x) & Gas(y)) -> MovingFaster(x,y))", "all x.(Molecule(x) -> MobilizeFaster(x))", "all x.(Molecules(x) -> MovesFaster(x))", "all x y z.((Molecule(x) & Gas(y) & Gas(z)) -> MovesFaster(x,y))", "all x y.((Molecule(x) & Gas(y)) -> MoveFaster(x,y))", "all x y.((Molecule(x) & Gas(y)) -> MoveFaster(x,y))", "all x.((Molecule(x) & Gas(x)) -> MoveFasterDomestic(x))", "all x.((Molecules(x) & Gas(y)) -> WillMoveFaster(x,y))", "all x y.((Molecule(x) & Gas(y)) -> MoveFaster(x,y))", "all x.(FasterMoleculesInGas(x) -> MobilizesFaster(x))", "all x y.((Molecule(x) & Gas(y)) -> MoveFaster(x,y))", "all x y.((Molecule(x) & Gas(y)) -> MovesFaster(x,y))", "all x y.((Molecular(x) & Gas(y) & In(x,y)) -> MoveFaster(x,y))", "all x.(InGas(x) -> MigrateMoreMolecules(x))", "all x.(Gas(x) -> MobilizedFaster(x))", "all x.(Gas(x) -> MoveInFaster(x))"]}
{"id": "entailmentbank_validation_850", "nl": "comparing a property of two objects requires knowing the property of each object.", "fol": "", "prediction": ["all x y.((Object(x) & Property(y)) -> KnowsProperty(x,y))", "all x y.((Property(x) & Object(y) & Comparing(x,y)) -> NeedsPropertyIdentification(x,y))", "all x y.((Property(x) & Property(y) & Object(y)) -> InProperty(x,y))", "all x.(ComparesObjectProperties(x) -> KnowsPropertyOfObject(x,y))", "all x y z.((Property(x,y) & Property(z) & Object(w)) -> RequiresWaiting(x,y,z,w))", "all x y z.((Property(x) & Object(y) & Property(z) & Comparing(x,y,z)) -> RequiresKnowing(x,y))", "all x y.((Object(x) & Property(y)) -> KnowProperty(x,y))", "all x y z.((Property(x) & Property(y) & Object(z) & Comparing(x,y,z)) -> RequiresknowingProperty(x,y,z))", "all x y.((Pattern(x) & Property(y) & Object(y)) -> Knowledge(x,y))", "all x y.((AppropriateProperty(x,y) & Object(y)) -> WantsPropertyCounse(x,y))", "all x y z.((Property(x) & Property(y) & Object(z)) -> Requires(x,y,z))", "all x y.((Property(x,y) & Object(y)) -> NotBehind(x,y))", "all x y.((Object(x) & Property(y) & Property(z) & Compares(x,y,z)) -> KnowsPropertyOfObject(x,y))", "all x y.((Property(x) & Property(y) & Object(z)) -> exists w.property(w,z) & Requires(x,w,z))", "all x y.((Property(x,y) & Property(y)) -> KnowsPropertyOf(x,y))", "all x y.((Property(x) & Object(y) & Object(y)) -> KnowsPropertyOf(x,y))"]}
{"id": "entailmentbank_validation_851", "nl": "a rock is a kind of object.", "fol": "", "prediction": ["all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> LikeObject(x))", "all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> Object(x))"]}
{"id": "entailmentbank_validation_852", "nl": "mass is a property of objects / matter.", "fol": "", "prediction": ["all x y.((Mass(x) & Object(y) & Matter(y)) -> PropertyOf(x,y))", "all x.(Mass(x) -> (PropertyOfObjects(x) & PropertyOfMatter(x)))", "all x.(Mass(x) -> (PropertyOfObjects(x) & PropertyOfMatter(x)))", "all x.(Mass(x) -> PropertiesOfMatter(x))", "all x.(Mass(x) -> PropertyOfObjects(x))", "all x.(Mass(x) -> PropertyOfObjects/Matter(x))", "all x.(Mass(x) -> PropertyOfObjectsMatter(x))", "all x.(Mass(x) -> PropertyOfObjects(x))", "all x.(Mass(x) -> PropertyOfObjects(x))", "all x.(Mass(x) -> PropertyOfObjectsMatter(x))", "all x.(Mass(x) -> (PropertyOfObjects(x) & PropertyOfMatter(x)))", "all x.(Mass(x) -> PropertyOfObjectsOrMatter(x))", "all x y z.((Mass(x) & Object(y) & Matter(z)) -> PropertyOf(x,y,z))", "all x.(Mass(x) -> (PropertyOfObjects(x) & PropertyOfMatter(x)))", "all x.(Mass(x) -> PropertyOfObjects(x))", "all x y z.((Mass(x) & Object(y) & Matter(z)) -> Real Property(x,y,z))"]}
{"id": "entailmentbank_validation_853", "nl": "comparing the mass of two rocks requires knowing the mass of each rock.", "fol": "", "prediction": ["all x y z.((Rock(x) & Rock(y) & Rock(z)) -> (ComparesMass(x,y,z) & KnowsMass(y,z)))", "all x y.((Rock(x) & Rock(y) & ComparesMass(x,y)) -> KnowsMass(x,y))", "all x.(ComparingMass(x) -> KnowledgeOfMassOfRock(x))", "all x y.((Rock(x) & Rock(y)) -> ComparesMass(x,y))", "all x.((Rock(x) & Rock(y)) -> CalculatesMass(x,y))", "all x y.((Rock(x) & Rock(y) & ComparesMass(x,y)) -> InformationMath(x,y))", "all x y.((Rock(x) & Rock(y)) -> ComparingMassRequiresKnowingMass(x,y))", "all x y.((Rock(x) & Rock(y)) -> KnowsMass(x,y))", "all x.((Rock(x) & Rock(y) & ComparingMass(x,y)) -> KnowsMass(x,y))", "all x y z.((Rock(x) & Rock(y) & Rock(z) & ComparingMass(x,y,z)) -> KnowsMassOf(x,y,z))", "all x y.((Rock(x) & Rock(y)) -> CompareMass(x,y))", "all x y.((Rock(x) & Rock(y)) -> CompareMass(x,y))", "all x y.((Rock(x) & Rock(y)) -> CombinedMassRequiresMassKnowledge(x,y))", "all x y z.((Rock(x) & Rock(y) & Rock(z) & ComparesMass(x,y,z)) -> (LectureMass(x) | MassMath(x,y)))", "all x y.((Rock(x) & Rock(y)) -> CompareMass(x,y))", "all x y z.((Rock(x) & Rock(y) & Rock(z) & ComparingMass(x,y,z)) -> Knowledge(x,y))"]}
{"id": "entailmentbank_validation_854", "nl": "student is trying to compare the mass of two small rocks.", "fol": "", "prediction": ["all x y.((Student(x) & SmallRock(y)) -> ComparesMass(x,y))", "all x y z w.((Student(x) & SmallRock(y) & SmallRock(z) & ComparesMass(x,y,z)) -> TryingToCompareMass(x,y,z))", "all x y.(Travels(x,y,z) -> ComparesMassOfSmallRocks(x,z))", "all x y.((Student(x) & SmallRock(y)) -> CompareMass(x,y))", "all x y.((Student(x) & SmallRock(y)) -> CompareMass(x,y))", "all x y.((Student(x) & SmallRock(y)) -> ComparingMass(x,y))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z)) -> ComparingMass(x,y,z))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z)) -> CompareMass(x,y,z))", "all x y.((Student(x) & SmallRock(y)) -> ComparesMass(x,y))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z) & TrysToCompareMass(x,y,z)) -> TriedToCompareMass(x,y,z))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z)) -> ComparesMass(x,y,z))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z)) -> ComparesMass(x,y,z))", "all x y.((Student(x) & SmallRock(y)) -> CompareMass(x,y))", "all x y.((Student(x) & SmallRock(y) & TrysToCompareMass(x,y)) -> Compare(x,y))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z)) -> ComparesMass(x,y,z))", "all x y.((Student(x) & SmallRock(y)) -> ComparingMass(x,y))"]}
{"id": "entailmentbank_validation_855", "nl": "the student has to know the mass of each rock to compare them.", "fol": "", "prediction": ["all x y.((Student(x) & Rock(y)) -> HasMassToCompare(x,y))", "all x y.((Student(x) & Rock(y)) -> KnowsMassToCompare(x,y))", "all x.((Student(x) & KnowsMassOfRock(x)) -> Compare(x,rock,rock))", "all x y.((Student(x) & Rock(y)) -> KNOWMosture(x,y))", "all x.(Student(x) -> knowsMassForRock(x))", "all x y z.((Student(x) & Rock(y) & Mass(z,y) & KnowsMass(x,z)) -> Compares(x,y))", "all x.((Student(x) & KnowsMass(x)) -> ComparesRocks(x))", "all x y.((Student(x) & Rock(y)) -> KnowsMass(x,y))", "all x y.((Student(x) & Rock(y) & KnowledgeMassOf(x,y)) -> Compare(x,y,y))", "all x y.((Student(x) & Rock(y)) -> KnowsMass(x,y))", "all x y.((Student(x) & Rock(y)) -> KnowsMassForComparing(x,y))", "all x y.((Student(x) & Rock(y) & MetMass(x,y)) -> CompareRock(x,y))", "all x y z.((Student(x) & Rock(y) & Mass(z)) -> KnowsMassToCompareMass(x,y,z))", "all x y z.((Student(x) & Rock(y) & Rock(z)) -> (KnowsMassOf(x,y,z) & ComparesMass(x,y,z)))", "all x y z.((Student(x) & Rock(y) & Mass(z)) -> KnowsMass(x,y,z))", "all x.((Student(x) & KnowsMassOfRock(x)) -> CompareRocks(x))"]}
{"id": "entailmentbank_validation_856", "nl": "a balance is used for measuring mass / weight of an object / of a substance.", "fol": "", "prediction": ["all x.(Balance(x) -> MeasuresMassWight(x,OfSubstance))", "all x y.((Balance(x) & Object(y) & Substance(y)) -> MeasuresMassWightOf(x,y))", "all x y z.((Balance(x) & Mass(y) & Weight(z) & Body(w)) -> Measures(x,y,w))", "all x y.((Balance(x) & Object(y)) -> MeasuresMass(x,y))", "all x.(Balance(x) -> (MeasuresMassOrWeight(x) & MeasuresSubstance(x)))", "all x y.((Balance(x) & Object(y)) -> MeasuresMassWelling(x,y))", "all x.(Balance(x) -> MeasuresMass(x) | MeasuresWeight(x))", "all x y z.((Balance(x) & Object(y) & Substance(z)) -> MeasuresMass/Weight(x,y,z))", "all x y z.((Balance(x) & MeasuresMolecule(x,y) & Object(y) & Substance(z)) -> (Same(y,z) & MeasuresMass(x,y) & MeasuresWeight(x,z)))", "all x.(Balance(x) -> (MeasuresMass(x) | MeasuresWeight(x)) & MeasuresSubstance(x)))", "all x y z.((Balance(x) & Object(y) & Substance(z)) -> UsedForMeasuringMassWorthFor(x,y,z))", "all x y.((Balance(x) & Object(y)) -> MeasuresMassAndWeight(x,y))", "all x y.((Balance(x) & Object(y)) -> MeasuresMassToWeight(x,y))", "all x y z.((Balance(x) & Mass(y) & Weight(z)) -> Measures(x,y,z))", "all x.(Balance(x) -> (AsMeasuresMass(x) & MeasuresWeight(x) & MeasuresSubstance(x)))", "all x y.((Balance(x) & Object(y)) -> MeasuresMassWight(x,y))"]}
{"id": "entailmentbank_validation_857", "nl": "a balance is a kind of instrument.", "fol": "", "prediction": ["all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x y.((Balance(x) & Instrument(y)) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))"]}
{"id": "entailmentbank_validation_858", "nl": "the student can use balance to know the mass of each rock to compare them.", "fol": "", "prediction": ["all x y z.((Student(x) & Rock(y) & Balance(z)) -> ComparesMass(x,y,z))", "all x.((Student(x) & Know(x,Mass)) -> CompareRocks(x))", "all x.((Student(x) & Balance(x)) -> (SeeMath(x,Rocks) & Compare(x,Rocks)))", "all x y z.((Student(x) & Rock(y) & Rock(z)) -> (CalculatesMass(x,y) & UsesSalary(x,z)))", "all x y.((Student(x) & Rock(y)) -> (PursucesBalance(x,y) & KnowledgeMassOf(x,y)))", "all x y.((Student(x) & Rock(y) & UsesBalance(x,y)) -> KnowsMassToCompare(x,y))", "all x y.((Student(x) & Rock(y)) -> (UsesBalance(x,y) & KnowsMass(x,y)))", "all x.(Scientist(x) -> (UsesBalance(x) & KnowsMassOnRock(x) & ComparesRocks(x)))", "all x y.((Student(x) & Rock(y)) -> (CuesMath(x,y) & ComparesMass(x,y)))", "all x y.((Student(x) & Rock(y) & WorksWithWith(x,y)) -> (KnowsMass(x,y) & Compares(x,y)))", "all x y.((Student(x) & Rock(y)) -> CanBalanceBeAware(x,y))", "all x y z.((Student(x) & Rock(y) & Rock(z) & BalanceMethod(x,y)) -> Compare(x,z))", "all x y.((Student(x) & Rock(y) & UsesBalance(x,y)) -> CanCompareRockMole(x,y))", "all x y.((Student(x) & Rock(y)) -> UsesBalanceToKnowMass(x,y))", "all", "all x.((Student(x) & ExploreDimensional(x) & CheckMath(x)) -> CanCompareRocks(x))"]}
{"id": "entailmentbank_validation_859", "nl": "a balance is used for measuring mass of a substance.", "fol": "", "prediction": ["all x y.((Balance(x) & Substance(y)) -> MeasuresMass(x,y))", "all x.(Balance(x) -> MeasuresMassOfSubstance(x))", "all x y.((Balance(x) & Substance(y)) -> MeasuresMass(x,y))", "all x y.((Balance(x) & Substance(y)) -> MeasuresMass(x,y))", "all x y.((Balance(x) & Substance(y)) -> MeasuresMass(x,y))", "all x y.((Balance(x) & Substance(y)) -> MeasuredMass(x,y))", "all x y z.((Statut(x) & Balance(y) & Substance(z)) -> UsedForMeasuringMass(x,y,z))", "all x y.((Balance(x) & Substance(y)) -> MeasuresMass(x,y))", "all x y.((Balance(x) & Substance(y)) -> MeasuresMass(x,y))", "all x y.((Balance(x) & Substance(y)) -> UsedForMeasuringMass(x,y))", "all x.(Balance(x) -> UsedForMeasuringMass(x,substance))", "all x y z.((Balance(x) & Substance(y) & Mass(z)) -> UsedForMeasuringProtein(x,y,z))", "all x y.((Balance(x) & Substance(y)) -> UsedForMetaphoringMass(x,y))", "all x y.((Balance(x) & Substance(y)) -> MeasureMath(x,y))", "all x y.(Factor(x) & Balance(y) -> MeasuresMass(x,y))", "all x y z.((Balance(x) & Substance(y) & Mass(z)) -> Measures(x,y,z))"]}
{"id": "entailmentbank_validation_860", "nl": "sand is a kind of substance.", "fol": "", "prediction": ["all x.(Sand(x) -> Substance(x))", "all x.(Sand(x) -> Substance(x))", "all x.(Sand(x) -> LikeSubstance(x))", "all x.(Sand(x) -> KindOfSubstance(x))", "all x.(Sand(x) -> Substance(x))", "all x.(Sand(x) -> Substance(x))", "all x.(Sand(x) -> Substance(x))", "all x y.((Sand(x) & Substance(y)) -> Substance(x))", "all x.(Sand(x) -> Substance(x))", "all x.(Sand(x) -> Substance(x))", "all x.(Sand(x) -> PartOfSubstance(x))", "all x.(Sand(x) -> Substance(x))", "all x.(Sand(x) -> Substance(x))", "all x.(Sand(x) -> Substance(x))", "all x.(Sand(x) -> Substance(x))", "all x.(Sand(x) -> Substance(x))"]}
{"id": "entailmentbank_validation_861", "nl": "a balance can be used for measure the mass of sand.", "fol": "", "prediction": ["all x y.((Balance(x) & Sand(y)) -> MeasureMass(x,y))", "all x.(IsBalance(x) -> MeasureInSand(x))", "all x.(Balance(x) -> MeasuresMassOfSand(x))", "all x.(Balance(x) -> QuantifiesMassOfSand(x))", "all x.(Balance(x) -> MeasuresMassOfSand(x))", "all x y.((Balance(x) & Sand(y)) -> MeasuresMass(x,y))", "all x.(Balance(x) -> MeasureSandMass(x))", "all x.(Balance(x) -> MeasuresMassOfSand(x))", "all x.(Balance(x) -> MeasureMassOfSand(x))", "all x y.((Balance(x) & Sand(y)) -> MeasureMass(x,y))", "all x y z.((Background(x) & Sand(y) & Mass(z)) -> Measure(x,y,z))", "all x y.((Balance(x) & Sand(y)) -> MeasuresMass(x,y))", "all x y.((Balance(x) & SandMasture(y)) -> UsesForMeasures(x,y))", "all x.((Balance(x) & MeasuresMassOfSand(x)) -> CanBeUsedFor(x,sand))", "all x.(Balance(x) -> MeasuresMassOfSand(x))", "all x.(Balance(x) -> MeasuresMassOfSand(x))"]}
{"id": "entailmentbank_validation_862", "nl": "determining something often requires measuring that something.", "fol": "", "prediction": ["all x y.((IsSomething(x) & Measuring(y,x)) -> Measure(y,x))", "all x y.((Metaphor(x) & Something(y)) -> Determines(x,y))", "all x.((Determining(x) & Something(x)) -> RequiresMeasuring(x))", "all x y.((Determining(x) & Something(y)) -> RequiresMeasurement(x,y))", "all x y z.((Defining(x) & Something(y) & Measurement(z)) -> Requires(x,y))", "all x.(DeterminingThis(x) -> RequiresMeasuring(x))", "all x.(RequiresMeasurement(x) -> Determines(x))", "all x.((Determining(x) & Something(x)) -> RequiresMeasuring(x))", "all x.(Does(x) -> RequiresMeasuring(x))", "all x.(Establishing(x) -> RequiresMeasuring(x))", "all x.(Determining(x) -> RequiresMeasuring(x))", "all x y.((Determining(x) & Something(y)) -> RequiresMeasuring(x,y))", "all x y.((Calibration(x) & Specify(y)) -> RequiresMeasuring(x,y))", "all x.(Nature(x) -> RequiresMeasuring(x))", "all x y.((Determining(x,y) & Something(y)) -> RequiresMeasuring(x,y))", "all x y.((DeterminationOf(x,y) & Something(y)) -> RequiresMeasuring(x,y))"]}
{"id": "entailmentbank_validation_863", "nl": "determining the mass of the sand requires using a balance to measure the mass of the sand.", "fol": "", "prediction": ["all x y.((Sand(x) & Balance(y)) -> AchievesMass(x,y))", "all x y.((Sand(x) & Balance(y)) -> DeterminesMass(x,y))", "all x.((Sand(x) & Balance(x)) -> DeterminesMass(x,sand))", "all x y.((Sand(x) & Balance(y) & DeterminesMass(x,y)) -> MeasuresMass(x,y))", "all x y.((Sand(x) & Balancing(y,x)) -> DetermineMass(x,y))", "all x.((SandMass(x) & Balance(x)) -> MeasureMassOf(x,sand))", "all x.((Sand(x) & Balance(x)) -> DeterminesMass(x,sand,sand))", "all x y.((Sand(x) & Balance(y)) -> DeterminesMass(x,y))", "all x.((Sand(x) & Balance(x)) -> DeterminesMass(x))", "all x y.((Math(x) & Sand(y)) -> Determined(x,y))", "all x y z.((Sand(x) & Balance(y) & Mass(z)) -> Calculates(x,y,z))", "all x.((Sand(x) & Balance(y)) -> DeterminesMass(x,y))", "all x.((Sand(x) & Balance(x)) -> DeterminesMassOf(x,sand))", "all x y.((SandFactory(x) & Balance(y)) -> DeterminesMass(x,y))", "all x.(MeasuresMassOfSand(x) -> RequiresBalance(x))", "all x y.((Sand(x) & Balance(y) & MeasuresMass(x,y)) -> DeterminesMass(x,y))"]}
{"id": "entailmentbank_validation_864", "nl": "a balance is used for measuring the mass of an object.", "fol": "", "prediction": ["all x.(Balance(x) -> MeasuresMassOfObject(x))", "all x.(Balance(x) -> MeasuresMassOfObject(x))", "all x y.((Balance(x) & Object(y)) -> UsedForMeasuringMass(x,y))", "all x y.((Balance(x) & Object(y)) -> MeasuresMassOf(x,y))", "all x.(Balance(x) -> MeasuresMassOfObject(x))", "all x.((Balance(x) & MeasuresMass(x)) -> Balance(x))", "all x.(Balance(x) -> MeasuresMass(x))", "all x y z.((Balance(x) & Object(y) & Mass(z)) -> UsedForMeasuring(x,y,z))", "all x.(Balance(x) -> MeasuresMassOfObject(x))", "all x.(Balance(x) -> UsedForMeasuringMass(x))", "all x.(Balance(x) -> MeasuresMass(x))", "all x.(Balance(x) -> MeasuresMassOfObject(x))", "all x y.((Balance(x) & Object(y)) -> UsedForMeasuringMass(x,y))", "all x y.((Balance(x) & Object(y)) -> MessagedMass(x,y))", "all x y z.((Balance(x) & Object(y) & Measure(z)) -> MassOf(x,y,z))", "all x y.((Balance(x) & Object(y)) -> UsedForMeasuringMass(x,y))"]}
{"id": "entailmentbank_validation_865", "nl": "density can be calculated by measuring the mass of an object divided by the volume of that object.", "fol": "", "prediction": ["all x y.((Object(x) & Mass(y) & Volume(z)) -> CanCompensateDensityFocused(x,y,z))", "all x y z.((Length(x) & Mass(y) & Volume(z) & Measures(x,y,z)) -> CalculatesDensity(x,y,z))", "all x.((Object(x) & MeasuresMass(x) & DividedByVolume(x)) -> KnownConstant(x))", "all x y.((Subject(x) & Mass(y) & Measures(x,y)) -> IncludesVolume(x,y))", "all x y z.((MeasuresMass(x) & MeasuresVolume(z) & Object(y) & DivisibleBy(z,y)) -> DensityCalculated(x,y))", "all x y.((Object(x) & Mass(y) & DisputedByVolume(x,y)) -> Density(x))", "all x y.((Object(x) & Mass(y) & ConvertedBy(x,y)) -> DensityCompilation(x,y))", "all x y.((Object(x) & Mass(y)) -> CalculatedByMeasuring(x,y))", "all x y z.((MeasuresMassOfObject(x) & Volume(y) & DilutesMass(x,y) & Value(z)) -> DensityCalculatedBy(x,y,z))", "all x.((Object(x) & MeasuresMass(x,y) & MeasuresVolume(x,z)) -> DensityCalculated(x))", "all x y.((Object(x) & MeasuresMass(x,y) & MeasuresVolume(x,y)) -> DensityCalculated(x,y))", "all x.((Object(x) & MeasureSmathematics(x) & DividedByVolume(x)) -> DensityCalculated(x))", "all x y z.((Density(x) & Mass(y) & Volume(z)) -> MeasuresBy(x,y,z))", "all x y.((MeasureMass(x) & MassIndex(y)) -> CalculatedByDivision(x,y))", "all x y z.((Object(x) & Mass(y) & Volume(z) & Measures(x,y)) -> DiesiencyCalculated(x,y,z))", "all x y.((Execution(x) & Mass(y) & MeasuredByVolume(x,y)) -> CalculatedDensity(x))"]}
{"id": "entailmentbank_validation_866", "nl": "a graduated cylinder is used to measure volume of an object.", "fol": "", "prediction": ["all x y.((GraduatedCylinder(x) & Object(y)) -> MeasuresVolumeOf(x,y))", "all x y.((GraduatedCylinder(x) & Object(y)) -> MeasuresVolumeOf(x,y))", "all x y.((GraduatedCylinder(x) & ExpensiveObject(y)) -> MeasuresVolume(x,y))", "all x.(GraduatedCylinder(x) -> MeasureMaxVolumeOfObject(x))", "all x y z.((GraduatedCylinder(x) & Object(y) & Object(z) & MeasuresVolume(x,z)) -> UsedFor(x,y,z))", "all x y z.((GraduatedCylinder(x) & DistantObject(y) & MeasuresVolume(x,z)) -> UsedFor(x,y))", "all x y.((Cylinder(x) & Gradient(y)) -> UsedToMeasureVolumeOfObject(x,y))", "all x y.((GraduatedCylinder(x) & Object(y) & MeasuresVolume(x,y)) -> Applied(x))", "all x.(DegmentedCylinder(x) -> UsedForConstruction(x))", "all x y.((GraduatedCylinder(x) & Object(y) & MeasuresVolume(x,y)) -> UsedFor(x,y))", "all x y z.((GraduatedCylinder(x) & Object(y) & MeasuresVolume(x,y)) -> MeasuresVolume(x,z))", "all x y z.((GraduatedCylinder(x) & Object(y) & Object(z)) -> MeasuresVolume(x,y,z))", "all x y.((GraduatedCylinder(x) & Object(y)) -> MeasuresVolume(x,y))", "all x.(GraduatedCylinder(x) -> MeasuresVolumeOfObject(x))", "all x.(ProgressiveCylinder(x) -> MeasuresVolumeOfObject(x))", "all x y.((GradedCylinder(x) & Object(y)) -> MeasuresVolume(x,y))"]}
{"id": "entailmentbank_validation_867", "nl": "the density of an object can be measured using a graduated cylinder and a balance.", "fol": "", "prediction": ["all x.((Object(x) & GradientCylinder(x) & Balance(x)) -> CanBeMeasured(x))", "all x y.((Object(x) & GradientCylinder(y) & Balance(z)) -> MeasuresDensity(x,y,z))", "all x y z.((Object(x) & GraduatedCylinder(y) & Balance(z)) -> MeasuresDensityUsing(x,y,z))", "all x y.((Object(x) & GradientCylinder(y) & Balance(x) & CanMeasureDensity(x,y)) -> MeasuresDensity(x,y))", "all x y.((Object(x) & GradientCylinder(y) & Balance(y)) -> MeasuresDensity(x,y))", "all x y.((Object(x) & GradientCylinder(y) & Balance(z)) -> MeasuredDensity(x,y,z))", "all x y.((Object(x) & GradientCylinder(y) & Balance(y)) -> CanMeasureDensity(x,y))", "all x y.((Object(x) & GraduatedCylinder(y) & Balance(y)) -> MeasuresDensityWith(x,y))", "all x y z.((Object(x) & GraduatedCylinder(y) & Balance(z)) -> DiesityMethod(x,y,z))", "all x y z.((Object(x) & GradientCylinder(y) & Balance(z)) -> MeshDensityUsing(x,y,z))", "all x y.((Object(x) & GradientCylinder(y) & Balance(y)) -> MeasuredDensity(x,y))", "all x y z.((Object(x) & GradientCylinder(y) & Balance(z)) -> DensityMeasured(x,y,z))", "all x y z.((Object(x) & GradientCylinder(y) & Balance(z)) -> DensityMeasurement(x))", "all x y.((Object(x) & GraduatedCylinder(y) & Balance(x,y)) -> MeasuringDensity(x,y))", "all x y.((Object(x) & GradientCylinder(y) & Balance(y,x)) -> MeasuresDensity(x,y))", "all x.((Object(x) & GraduatedCylinder(x) & Balance(x)) -> MeasuredDensity(x))"]}
{"id": "entailmentbank_validation_868", "nl": "a marble is a kind of object.", "fol": "", "prediction": ["all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> IsObject(x))", "all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> (Object(x) & RequiresType(x)))", "all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> ArtOfObject(x))", "all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> Object(x))"]}
{"id": "entailmentbank_validation_869", "nl": "the density of a marble can be measured using a graduated cylinder and a balance.", "fol": "", "prediction": ["all x.((Marble(x) & GradientCylinder(x) & Balance(x)) -> DimensionsMeasured(x))", "all x y.((Marble(x) & GraduatedCylinder(y) & Balance(y)) -> DensityMeasured(x,y))", "all x.(Marble(x) -> (StayingDensity(x) & UsingDegmentedCylinder(x) & UsingBalance(x)))", "all x y.((Marble(x) & GraduatedCylinder(y) & Balance(y)) -> MeasureDensity(x,y))", "all x.((Marble(x) & GraduatedCylinder(x) & Balance(x)) -> DensityMet(x,marble))", "all x.(Marble(x) -> (MeasureDensityWithGraduatedCylinder(x) & MeasureBalance(x)))", "all x y.((Marble(x) & GraduatedCylinder(y) & Balance(y)) -> DensityMeasuredUsing(x,y))", "all x y.((Marble(x) & GradientCylinder(y) & Balance(y)) -> MeasuresDensity(x,y))", "all x y z.((Marble(x) & GraduatedCylinder(y) & Balance(z)) -> MeasuresDensityOn(x,y,z))", "all x.((Marble(x) & GraduatedCylinder(x) & Balance(x)) -> DensityMet(x,Marble))", "all x.((Marble(x) & GraduatedCylinder(x) & Balance(x)) -> MassivelyMeasuresDensity(x))", "all x y.((Marble(x) & RecessedCylinder(y) & Balance(y)) -> MeasureDensity(x,y))", "all x y.((Marble(x) & GradientCylinder(y) & Balance(y)) -> DensityMet(x,y))", "all x y.((Measurement(x) & Marble(y) & GraduatedCylinder(z) & Balance(x,y)) -> DensityMeasuredWith(x,z))", "all x y.((Marble(x) & GraduatedCylinder(y) & Balance(y)) -> DensityMeasured(x,y))", "all x y.((Marble(x) & GradientCylinder(y) & Balance(y)) -> DensityMeasured(x,y))"]}
{"id": "entailmentbank_validation_870", "nl": "if a unit of for something is being measured, then it requires a measurement tool for measuring that something.", "fol": "", "prediction": ["all x y.((ForMeasurement(x) & UnitOfForSomething(x,y)) -> RequiresMeasurementTool(y,x))", "all x y.((UnitOfFor(x,y) & Measure(y)) -> RequiresMethodForMeasuring(x,y))", "all x y.((UnityOfFor(x) & UnitOfFor(x)) -> MeasurementToolRequiredForMonitoring(x))", "all x.((UnitOfForThing(x) & Measurable(x)) -> RequiresMeasuringTool(x))", "all x.((UnitOfFor(x) & Measuring(x)) -> RequiresMeasurementTool(x))", "all x.((MeasurementTool(x) & ForUnit(x)) -> Requires(x,m,something))", "all x.((UnitOfFor(x,y) & Measured(y)) -> RequiresMetameter(x,y))", "all x y.((UnitOf(x) & ForComputer(y) & Measurable(x,y)) -> RequiresMeasurementTool(x))", "all x.((UnitOf(x) & MeasurablyForWhat(x)) -> RequiresMeasurementTool(x))", "all x y.((UnitOf(x,y) & ForUnit(x,y)) -> NeedsMeasurementTool(x))", "all x.((ForUnit(x) & MeasuringUnit(x)) -> MeasuringTool(x))", "all x y.((Measurement(x) & UnitOfForSomething(x) & MeasurementTool(y)) -> Requires(x,y))", "all x.((UnitOf(x) & MeasuredOf(x)) -> RequiresMeasurementTool(x))", "all x y.((UnitOf(x) & MeasuredFor(x,y) & Something(y)) -> RequiresMeasurementTool(x))", "all x.((UnitOf(x,y) & Forsomething(x)) -> MeasurementsFor(x,y))", "all x.((UnitOf(x) & Measured(x)) -> RequiresMethod(x))"]}
{"id": "entailmentbank_validation_871", "nl": "milliliters ml are a metric unit used for measuring volume.", "fol": "", "prediction": ["all x.(MillilitersMl(x) -> MetricUnitMeasuringVolume(x))", "all x.(Milliliters(x) -> MemorizedUnit(x))", "all x.(Milliliters(x) -> UsedForMeasuringVolume(x))", "all x.(MillilitersMl(x) -> MetricUnit(x))", "all x y.((Liquid(x) & Milliliter(y)) -> MetricUnit(x))", "all x.(MillilitersMl(x) -> MeasuresVolume(x))", "all x.(MillilitersMl(x) -> MeasuresVolume(x))", "all x.(Milliliters(x) -> MeasuresVolume(x))", "all x.(MillilitersMl(x) -> UsedForMeasuringVolume(x))", "all x.(Milliliters(x) -> MeasuresVolume(x))", "all x.(MillilitersMl(x) -> UsedForMeasuringVolume(x))", "all x.(Milliliters(x) -> MeasuresVolume(x))", "all x.(MillilitersMl(x) -> MeasuresVolume(x))", "all x.((Milliliters(x) & MetricUnit(x)) -> MeasuresVolume(x))", "all x.(Milliliters(x) -> MetricUnit(x))", "all x.((Milliliters(x) & MeasuresVolume(x)) -> MetricUnit(x))"]}
{"id": "entailmentbank_validation_872", "nl": "measuring milliliters requires a tool for measuring volume.", "fol": "", "prediction": ["all x y z.((MeasuresMilliliters(x) & Tools(y) & Volume(z)) -> Requires(y,x))", "all x.(MeasuresMilliliters(x) -> ThereIsToolForMeasuringVolume(x))", "all x.(MeasuresMilliliters(x) -> exists y.(MeasuresVolume(y) & HasMeasuresVolume(x,y))))", "all x.(MeasuresMilliliters(x) -> exists y z.(Tool(y) & Volume(z) & Measures(y,z))))", "all x.(MeasuringMilliliters(x) -> RequiresTool(x))", "all x.(MeasuresMilliliters(x) -> NeedsToolToMeasureVolume(x))", "all x.(MeasuresMilliliters(x) -> (RequiresMeasurement(x,Volume)))", "all x.(Measurable(x,milliliters) -> RequiresMeasurableTool(x,volume))", "all x.(MeasuresMilliliters(x) -> MeasuresVolume(x))", "all x.(MeasuringMilliliters(x) -> NeedsToolForMeasuringVolume(x))", "all x.(MeasuringMinimales(x) -> RequiresToolForMeasuringVolume(x))", "all x.(MeasuringMilliliters(x) -> RequiresMeasurementTool(x))", "all x.(MeasuresMilliliters(x) -> MeasuresVolume(x))", "all x.(MeasuresMilliliters(x) -> RequiresMeasurementOfVolume(x))", "all x.(MeasuresMilliliters(x) -> RequiresMeasuresVolume(x))", "all x.(MeasuresMilliliters(x) -> UsesToolForMeasuringVolume(x))"]}
{"id": "entailmentbank_validation_873", "nl": "measuring milliliters requires a graduated cylinder.", "fol": "", "prediction": ["all x.(MeasuresMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x.(MeasuresMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x.(MeasuresMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x.(MeasureMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x y.((MeasuresMilliliters(x) & GraduatedCylinder(y)) -> Requires(x,y))", "all x.(MeasuresMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x.(MeasureMilliliters(x) -> (RequiresDegreedCylinder(x)))", "all x.(MeasuresMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x.(MeasuresMilliliters(x) -> RequiresDecline(x))", "all x.(MeasuresMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x.(MeasuresMillifugels(x) -> RequiresGraduatedCylinder(x))", "all x y.((Measurement(x,y) & Milliliter(y)) -> RequiresGraduatedCylinder(x))", "all x.(MeasuringMilliliters(x) -> (DiscreteCylinder(x) & Requires(x,y)))", "all x.(MeasuresMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x.(Measurement(x,milliliters) -> RequiresGraduatedCylinder(x))", "all x.(MeasuresMilliliters(x) -> RequiresGraduatedCylinder(x))"]}
{"id": "entailmentbank_validation_874", "nl": "a sample in a cylindrical container has a cylindrical shape and a fixed volume.", "fol": "", "prediction": ["all x.((Sample(x) & CylindricalContainer(x)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x y z.((Sample(x) & CylindricalContainer(y) & CylindricalShape(z) & Has(x,z) & FixedVolume(x,z)) -> Has(x,y))", "all x.((Sample(x) & CylindricalContainer(x)) -> (HasCylindricalShape(x) & HasFixedVolume(x)))", "all x y z.((Sample(x) & CylindricalContainer(y) & CylindricalShape(z) & FixedVolume(z)) -> (HasCylindricalShape(x,y,z) & HasFixedVolume(x,y)))", "all x y.((Staple(x) & CylindricalContainer(y) & In(x,y)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x.((Sample(x) & CylindricalContainer(x)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x y.((Special(x) & CrystalContainer(y)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x y.((Sample(x) & CylindricalContainer(y)) -> (HasCylindricalShape(x,y) & HasFixedVolume(x,y)))", "all x.((Sample(x) & CylindricalContainer(x)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x y.((Sample(x) & CylindricalContainer(y)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x y.((Sample(x) & CylindricalContainer(y)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x.((Sample(x) & CranicalContainer(x)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x.((Sample(x) & InCylindricalContainer(x)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x y.((Sample(x) & CylindricalContainer(y)) -> (HasCylindricalShape(x,y) & HasFixedVolume(x,y)))", "all x.((Sample(x) & InCylinderContainer(x)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x.((Sample(x) & CylindricalContainer(x)) -> (CylindricalShape(x) & FixedVolume(x)))"]}
{"id": "entailmentbank_validation_875", "nl": "a sample is a kind of matter.", "fol": "", "prediction": ["all x.(Sample(x) -> Matter(x))", "all x.(Sample(x) -> Matter(x))", "all x.((Sample(x) & Material(x)) -> KindOf(x,e))", "all x.(Sample(x) -> FormOfMatter(x))", "all x.(Sample(x) -> KindOfMatter(x))", "all x.((Sampled(x) & Matter(x)) -> KindOf(x))", "all x.(Sampler(x) -> KindOfMatter(x))", "all x.(Sample(x) -> LikesMatter(x))", "all x.(Sample(x) -> TypeOfMatter(x))", "all x.(Sample(x) -> KindOfMatter(x))", "all x.(Sample(x) -> KindOfMatter(x))", "all x y.((Sample(x) & Matter(y)) -> Material(x))", "all x.(Sample(x) -> Matter(x))", "all x.(Mineral(x) -> Sample(x))", "all x.((Sample(x) & Material(x)) -> KindOf(x))", "all x.(Sample(x) -> Matter(x))"]}
{"id": "entailmentbank_validation_876", "nl": "the matter has the same shape as the container and fixed volume.", "fol": "", "prediction": ["all x.((Matter(x) & Container(y) & SameShapeAside(x,y) & FixedVolume(x)) -> SameShapeAs(x,y))", "all x.((Matter(x) & SameShapeAsContainer(x) & FixedVolume(x)) -> HasSameShapeAsContainer(x))", "all x y z.((Matter(x) & Container(y) & Container(z)) -> (SameShape(x,y) & FixedVolume(x,z)))", "all x.(Matter(x) -> (SameShape(x,Container) & NoDisplace(x,Volume)))", "all x.(Matter(x) -> (SameShapeAsContainer(x) & FixedVolume(x)))", "all x.(Matter(x) & SameShapeAsContainer(x) & FixedVolume(x))", "all x.(Matter(x) -> (SameShape(x) & SameVolume(x)))", "all x y.((Container(x) & Container(y)) -> (HasSameShape(x,y) & HasFixedVolume(x,y)))", "all x.((Matter(x) & SameShapeAsContainer(x) & FixedVolume(x)) -> HasSameShapeAsContainer(x))", "all x.(Matter(x) -> (SameShape(x) & SameShape(x,container) & FixedVolume(x)))", "all x.((Matter(x) & Container(x)) -> SameShapeAndFixedVolume(x))", "all x y z.((Matter(x) & Container(y) & Container(z)) -> SameShape(x,y,z) & FixedVolume(x,y))", "all x.(Matter(x) -> (OtherShape(x) & SameShapeAsContainer(x) & FixableVolume(x)))", "all x.((Matter(x) & Container(x)) -> (SameShape(x) & FixedVolume(x)))", "all x y.((Matter(x) & Container(y)) -> (HasShape(x,y) & HasFixedVolume(x,y)))", "all x.(Minute(x) -> HasSameShapeAsContainer(x) & FixedVolume(x))"]}
{"id": "entailmentbank_validation_877", "nl": "matter with variable shape changes shape in different container.", "fol": "", "prediction": ["all x y.((Matter(x) & VariableShapeChange(x)) -> ChangesShapeInDifferentContainer(x,y))", "all x y.((Matter(x) & VariableShapeChange(x) & DifferentContainer(y)) -> ChangesShape(x,y))", "all x y z.((Matter(x) & VariableShapeChange(y) & Container(z)) -> ChangeInContainer(z))", "all x y z.((Matter(x) & VariableShapeChange(y) & Container(z)) -> Change(x,y,z))", "all x.((Matter(x) & VariableShaping(x)) -> ShapeChanges(x))", "all x y.((Matter(x) & VariableShapeChange(x,y) & Container(y)) -> ShapeChange(x,y))", "all x.((Matter(x) & VariableShapeChange(x)) -> InContainer(x,difficultContainer))", "all x y z.((Matter(x) & VariableShapeChange(y) & Container(z)) -> ShapeChange(x,y,z))", "all x y.((Matter(x) & VariableShapeChange(x,y)) -> DifferentContainer(y))", "all x.((Matter(x) & VariableShapeChange(x)) -> DifferentContainers(x))", "all x.((Matter(x) & VariableShapeChange(x)) -> VariousContainer(x))", "all x.((Matter(x) & VariableShapeChange(x) & DifferentContainer(x)) -> ShapeChange(x))", "all x.((Matter(x) & VariableShapeChange(x) & DifferentContainer(x)) -> FormChange(x,x))", "all x.((Matter(x) & VariableShapeChange(x),) -> Change(x,container,container,container))", "all x.((Matter(x) & VariableShapeChange(x) & DifferentContainer(x)) -> VariableShapeChange(x))", "all x y.((Matter(x) & Container(y)) -> VariableShapeChanges(x,y))"]}
{"id": "entailmentbank_validation_878", "nl": "the matter may have a variable shape and a fixed volume.", "fol": "", "prediction": ["exists x.(Matter(x) & (VariableShape(x) | FixedVolume(x)))", "all x.(Matter(x) -> (VariableShape(x) & FixedVolume(x)))", "all x y.((Matter(x) & VariableShape(x) & FixedVolume(y)) -> CanHave(x,y))", "exists x.(Matter(x) & VariableShape(x) & FixedVolume(x))", "all x.(Matter(x) -> (VariableShape(x) & FixedVolume(x)))", "exists x.(Matter(x) & VariableShape(x) & FixedVolume(x))", "exists x.(Layer(x) & VariableShape(x) & FixableVolume(x))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> MayHave(x,y))", "exists x.(Matter(x) & VariableShape(x) & FixedVolume(x))", "all x.(Matter(x) -> (VariableShape(x) & FixedVolume(x)))", "all x.(Matter(x) -> (VariableShape(x) & FixedVolume(x)))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> MayPosition(x,y))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> VariableShape(x))", "(VariableShape(Matter) & FixedVolume(Matter))", "(VariableShape(m) | FixedVolume(m)))", "all x.(FragileShape(x) -> StructureInMatter(x) & FixedVolumeInMatter(x))"]}
{"id": "entailmentbank_validation_879", "nl": "the matter may have a fixed shape and a fixed volume.", "fol": "", "prediction": ["all x.((Matter(x) & CanBeFixedShape(x) & HasFixedVolume(x)) -> HasFixedVolume(x))", "exists x.(Matter(x) & FixedShape(x) & FixedVolume(x))", "all x.(Matter(x) -> (FobbedShape(x) & FixedVolume(x)))", "all x.(Matter(x) -> (FastShape(x) & FixableVolume(x)))", "all x.(Matter(x) -> (FobusedShape(x) & FixedVolume(x)))", "all x.((Matter(x) & FixedShape(x) & FixedVolume(x)) -> HasFixed(x,y))", "all x.(Matter(x) -> (FixedShape(x) & FixedVolume(x)))", "all x.((Matter(x) & FixedShape(x) & FixedVolume(x)) -> Fixed(x))", "all x.(Matter(x) -> (FixedShape(x) & FixedVolume(x)))", "all x.((Matter(x) & FixedShape(x) & FixedVolume(x)) -> Fixed(x))", "all x.(Draft(x) -> (FernishedShape(x) & FixedVolume(x)))", "all x.((Matter(x) & FixedShape(x) & FixedVolume(x)) -> CanBeFather(x))", "(FastShape(m) & FixedVolume(m))", "all x.(Matter(x) -> (FobbyShape(x) & FixedVolume(x)))", "all x.(Matter(x) -> (FutureShape(x) & FixedVolume(x)))", "all x.((Matter(x) & FixedShape(x) & FixedVolume(x)) -> Fixed(x))"]}
{"id": "entailmentbank_validation_880", "nl": "the matter may have a fixed or variable shape and fixed volume.", "fol": "", "prediction": ["all x.(Matter(x) -> (FloatedShape(x) | VariableShape(x) & FixedVolume(x)))", "all x y.((Matter(x) & FixedShape(y) & VariableShape(x)) -> FixedVolume(x))", "exists x.(Matter(x) & HasFixed(x) & (Variable(x) | Fixed(x))) & HasFixedVolume(x))", "all x.((Matter(x) & (FixedShape(x) | VariableShape(x)) & FixedVolume(x)) -> FixedMargin(x))", "all x.((Matter(x) & ObscureShape(x) & VariableShape(x) & FixedVolume(x)) -> FixedVariableVolume(x))", "all x.(Matter(x) -> (FixedShape(x) | VariableShape(x) & FixedVolume(x)))", "all x.(Matter(x) -> (FixedShape(x) | VariableShape(x) & FixedVolume(x)))", "all x.((Matter(x) & FixedShape(x) & VariableShape(x) & VariableVolume(x)) -> Fixed(x))", "all x.(Matter(x) -> (FixedShape(x) | VariableShape(x) | FixedVolume(x)))", "all x.((Matter(x) & FixedShape(x)) | VariableShape(x)) & FixedVolume(x))", "all x.(Found(x) | VariableShape(x) | FixedVolume(x))", "all x.((Matter(x) & (FixedShape(x) | VariableShape(x)) & FixedVolume(x)) -> Fixed(x))", "all x.(Matter(x) -> (TerminalShape(x) | VariableShape(x) | VariableVolume(x)))", "all x.((Matter(x) & FixedShape(x)) | VariableShape(x)) & FixedVolume(x))", "all x.((Matter(x) & (FixedShape(x) | VariableShape(x)) & FixedVolume(x)) -> Fixed(x)))", "all x.((Matter(x) & FixedShape(x) & FixedVolume(x)) -> VariableShapeAndVolume(x))"]}
{"id": "entailmentbank_validation_881", "nl": "matter in the solid phase has definite shape.", "fol": "", "prediction": ["all x.((MatterInSolidPhase(x) & DefiniteShape(x)) -> InSolidPhase(x))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefiniteShape(x))", "all x.(SolidPhase(x) -> HasDefinedShape(x))", "all x.((Matter(x) & SolidPhase(x)) -> DefiniteShape(x))", "all x.((Matter(x) & SolidPhase(x)) -> HASDefiniteShape(x))", "all x.((MatterInSolidPhase(x) & ConveyingShape(x)) -> RetainsShape(x).", "all x.(SolidPhaseMatter(x) -> HasFinancialShape(x))", "all x y.((Matter(x) & SolidPhase(y)) -> HasDefinedShape(x,y))", "all x.(SolidPhase(x) -> DefiniteShape(x))", "all x.((Matter(x) & SolidPhase(x)) -> DefinedShape(x))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefinableShape(x))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefiniteShape(x))", "all x.(SolidPhaseMatter(x) -> HasDefinableShape(x))", "all x.(SolidPhase(x) -> HasDefinedShape(x))", "all x.(CompleteShape(x) -> HasDefinableShape(x))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefiniteShape(x))"]}
{"id": "entailmentbank_validation_882", "nl": "matter in the solid phase has definite volume.", "fol": "", "prediction": ["all x.(SolidPhase(x) -> HasDefinedVolume(x))", "all x y.((Matter(x) & SolidPhase(y)) -> DefiniteVolume(x,y))", "all x.((Matter(x) & SolidPhase(x)) -> DeterminedVolume(x))", "all x.(SolidPhaseMatter(x) -> DefiniteVolume(x))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefinableVolume(x))", "all x.((Matter(x) & SolidPhase(x)) -> DefiniteVolume(x))", "all x.((Matter(x) & SolidPhase(x)) -> DefiniteVolume(x))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefiniteVolume(x))", "all x.(SolidPhase(x) -> WellDefinedVolume(x))", "all x.(DistinctVolume(x) -> MatterInSolidPhase(x))", "all x.(SatelliteMatter(x) -> HasDefinedVolume(x))", "all x.(SolidPhase(x) -> HasDefinedVolume(x))", "all x.((Pattern(x) & SolidPhase(x)) -> HasdefiniteVolume(x))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefiniteVolume(x))", "all x.(ConsistentPhase(x) -> DefiniteVolume(x))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefinedVolume(x))"]}
{"id": "entailmentbank_validation_883", "nl": "matter in solid phase has definite volume and definite shape.", "fol": "", "prediction": ["all x.((Matter(x) & SolidPhase(x)) -> (DefinedVolume(x) & DeterminedShape(x)))", "all x.((MatterInSolidPhase(x) & DistinctVolume(x) & DistinctShape(x)) -> Has(x,definite))", "all x.((MatterInSolidPhase(x) & HasDefinedVolume(x) & HasDefinedShape(x)) -> HasDefinedShape(x))", "all x.((Matter(x) & SolidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.((FixedFunction(x) & SolidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.((MatterInSolidPhase(x) & SolidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.(SolidPhase(x) -> (DefinedVolume(x) & DefiniteShape(x)))", "all x.((MatterInSolidPhase(x) & ClearVoyage(x) & ClearShape(x)) -> ClearShape(x))", "all x.(SolidPhase(x) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.((Matter(x) & SolidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.((MatterInSolidPhase(x) & DefiniteVolume(x) & DefiniteShape(x)) -> Has(x,x))", "all x.((Matter(x) & SolidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.((Matter(x) & SolidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.((Matter(x) & SolidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.(SolidPhase(x) -> (EntirelyDefiniteVolume(x) & DefiniteShape(x)))", "all x.((Matter(x) & SolidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))"]}
{"id": "entailmentbank_validation_884", "nl": "matter in the liquid phase has variable shape.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> VariableShape(x))", "all x.((MatterInLiquidPhase(x) & VariableShape(x)) -> Has(x,y))", "all x.((Matter(x) & LiquidPhase(x)) -> VariableShape(x))", "all x.(LiquidPhase(x) -> VariableShape(x))", "all x.((MatterInLiquidPhase(x)) -> VariableShape(x))", "all x.((Matter(x) & LiquidPhase(x)) -> VariableShape(x))", "all x y.((Matter(x) & LiquidPhase(y)) -> VariableShape(x,y))", "all x.(Matter(x) -> VariableShape(x))", "all x.(LiquidPhaseMatter(x) -> VariableShape(x))", "all x.(LiquidPhase(x) -> VariableShape(x))", "all x y z.((Matter(x) & LiquidPhase(y) & LiquidPhase(z)) -> VariableShape(x,y,z))", "all x.(LiquidPhase(x) -> VariableShape(x))", "all x.(LiquidPhase(x) -> VariableShape(x))", "all x.(LiquidPhase(x) -> VariableShape(x))", "all x y.((Matter(x) & LiquidPhase(y)) -> VariableShape(x,y))", "all x.(LiquidPhase(x) -> VariableShape(x))"]}
{"id": "entailmentbank_validation_885", "nl": "matter in the liquid phase has definite volume.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> HasDefinedVolume(x))", "all x.((MatterInLiquidPhase(x) & DefiniteVolume(x)) -> Has(x,y))", "all x.(Related(x) -> HasDefiniteVolume(x))", "all x.(LiquidPhase(x) -> HasDefiniteVoyage(x))", "all x.((MatterInLiquidPhase(x)) -> DefiniteVolume(x))", "all x.((Particle(x) & LiquidPhase(x)) -> DeclaredVolume(x))", "all x.(TheMatterInLiquidPhase(x) -> HasDefiniteVolume(x))", "all x.(AliquidPhase(x) -> DefiniteVolume(x))", "all x.((Matter(x) & LiquidPhase(x)) -> DefiniteVolume(x))", "all x.((Matter(x) & LiquidPhase(x)) -> HasDefiniteVolume(x))", "all x y.((Matter(x) & LiquidPhase(y) & InPhase(x,y)) -> HasDefiniteVolume(x,y))", "all x.(SharkFoot(x) -> SpecifiedVolume(x))", "all x.((Matter(x) & LiquidPhase(x)) -> DefiniteVolume(x))", "all x y.((Matter(x) & LiquidPhase(y)) -> HasDefinedVolume(x,y))", "all x y.((Matter(x) & LiquidPhase(y)) -> HasDefinition(x,y))", "all x.(HasDefiniteVolume(x) -> MaterialInLiquidPhase(x))"]}
{"id": "entailmentbank_validation_886", "nl": "matter in the liquid phase has a variable shape and definite volume.", "fol": "", "prediction": ["all x.(LiquidPhase(x) -> (UsesVariableShape(x) & HasDefiniteVolume(x)))", "all x.(LiquidPhase(x) -> (HasVariableShape(x) & HasDefiniteVolume(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (VariableShape(x) & DefiniteVolume(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (VariableShape(x) & DesirableVolume(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (VariableShape(x,y) & DefiniteVolume(x,y)))", "all x.(LiquidPhase(x) -> (FragileShaped(x) & DefiniteVolume(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (VariableShape(x) & DefiniteVolume(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (VariableShape(x) & DefiniteVolume(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (VariableShape(x) & DefiniteVolume(x)))", "all x.(LiquidPhaseMineral(x) -> (VariableShape(x) & DesirableVolume(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (VariableShape(x) & DefiniteVolume(x)))", "all x.((MatterInLiquidPhase(x) & VariableShape(x) & DefiniteVolume(x)) -> VariableShapeAndDefiniteVolume(x))", "all x.((MatterInLiquidPhase(x) & VariableShape(x) & DefiniteVolume(x)) -> VariableShape(x))", "all x.((MatterInLiquidPhase(x) & VariableShape(x) & DefiniteVolume(x)) -> (ExposesHas(x,VariableShape) & DefiniteVolume(x)))", "all x.(LiquidPhase(x) -> (VariableShape(x) & DefinableVolume(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (VariableShape(x) & DefiniteVolume(x)))"]}
{"id": "entailmentbank_validation_887", "nl": "the matter may be in solid phase or in liquid phase.", "fol": "", "prediction": ["all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "exists x.(Matter(x) & (SolidPhase(x) | LiquidPhase(x)))", "the matter may be in SolidPhaseOrLiquidPhase(x)", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))"]}
{"id": "entailmentbank_validation_888", "nl": "seeing small things with bare eyes is difficult.", "fol": "", "prediction": ["all x.((SmallThing(x) & BareEyes(x)) -> DifficultToSee(x))", "all x.((SameSmallThings(x) & BareEyes(x)) -> Difficult(x))", "all x y.((SmallThing(x) & BareEyes(y)) -> DifficultToSeeWith(x,y))", "all x.((SaysBareEyes(x) & SmallThings(x)) -> Difficult(x))", "all x.(BareEyes(x) -> DifficultYet.", "all x y.((SmallThing(x) & BareEyes(x)) -> DifficultToSee(y,x))", "all x.((SmallThing(x) & BareEyes(x)) -> DifficultToSight(x))", "all x.((SeenSmallProjects(x) & BareEyes(x)) -> Difficult(x))", "all x.((SmallTask(x) & BineEyes(x)) -> DifficultToSettle(x))", "all x.((SmallThing(x) & BareEyes(x)) -> Difficult(x))", "all x.((SaysSmallThings(x) & BareEyes(x)) -> Difficult(x))", "all x.((SmallProduct(x) & -BarreEyes(x)) -> DifficultToSelect(x))", "all x.((SmallThings(x) & BareEyes(x)) -> DifficultToSee(x))", "all x.((SmallThing(x) & BareEyes(x)) -> DifficultToSee(x))", "all x.((HasBaireEyes(x) & SmallThing(x)) -> Difficult(x))", "all x y.((SmallThing(x) & BareEyes(y)) -> DifficultToSeeWith(x,y))"]}
{"id": "entailmentbank_validation_889", "nl": "an insect usually has a small size.", "fol": "", "prediction": ["all x.(Insect(x) -> SmallSize(x))", "all x.(Insect(x) -> HasSmallSize(x))", "all x.(Insect(x) -> SmallSize(x))", "all x.(Insect(x) -> SmallSize(x))", "all x.(Insect(x) -> SmallSize(x))", "all x.(Insect(x) -> SmallSize(x))", "all x.(Insect(x) -> SmallSize(x))", "all x.(Insect(x) -> SmallSize(x))", "all x.(Insect(x) -> SmallSize(x))", "all x.(Insect(x) -> SmallSize(x))", "all x.(Insect(x) -> HasSmallSize(x))", "all x.(Insect(x) -> HasSmallSize(x))", "all x.(Insect(x) -> HasSmallSize(x))", "all x.(Insect(x) -> SmallSize(x))", "all x.(Insect(x) -> (SmallSize(x) | SmallSize(x)))", "all x.(Insect(x) -> SmallSize(x))"]}
{"id": "entailmentbank_validation_890", "nl": "seeing an insect with bare eyes is difficult.", "fol": "", "prediction": ["all x y.((Insect(x) & BaireEyes(y)) -> Difficult(x,y))", "all x.((Insect(x) & HasBareEyes(x)) -> DifficultToSeeing(x))", "all x.((Insect(x) & BareEyes(x)) -> DifficultToSee(x))", "all x.((Insect(x) & HarshEyes(x)) -> DifficultToSeen(x))", "all x y.((Insect(x) & Human(y) & HasBarbedEyes(x,y)) -> DifficultToSeen(x,y))", "all x.((Insect(x) & BareEyes(x)) -> DifficultToSee(x.))", "all x y.((Insect(x) & HasBareEyes(x)) -> DifficultToSee(x,y))", "all x.(BareEyes(x) -> DifficultToSeen(x))", "all x.((Insect(x) & BareEyes(x)) -> DifficultToSeen(x))", "all x.((Insect(x) & HasBareEyes(x)) -> DifficultToSeen(x))", "all x.((Insect(x) & BaggedEyes(x)) -> DifficultToSee(x))", "all x.((Insect(x) & BareEyes(x)) -> DifficultThanSeeing(x))", "all x y.((Insect(x) & BarredEyes(y)) -> DifficultToSee(x,y))", "all x.((Insect(x) & BareEyes(x)) -> DifficultToSeeing(x,x))", "all x.((Insect(x) & BareEyes(x)) -> Difficult(x))", "all x.((Insect(x) & BareEyes(x)) -> DifficultToSee(x))"]}
{"id": "entailmentbank_validation_891", "nl": "magnifying glass is used to see small things by making objects appear bigger.", "fol": "", "prediction": ["all x y.((MagnifyingGlass(x) & SmallThing(y)) -> UsedForSightingByMakingItemsBigger(x))", "all x.(MagnifyingGlass(x) -> (SmallThings(x) & MakesObjectsAppearBigger(x)))", "all x.(MagnifyingGlass(x) -> (SeesmallThings(x) & MakesObjectAppearLarger(x)))", "all x.(MagnifyingGlass(x) -> (SeeSmallThings(x) & MakesObjectsAppearBigger(x)))", "all x y.((MagnifyingGlass(x) & SmallThing(y)) -> UsedToSee(x,y))", "all x.(MagnifyingGlass(x) -> UsedToSeeSmallThings(x))", "all x y.((MagnifyingGlass(x) & SmallThing(y)) -> (Identifies(x,y) & MakesAppearMore(x,y)))", "all x.(MagnifyingGlass(x) -> (SmallThings(x) & MakesObjectsAppearLarger(x)))", "all x y z.((MagnifyingGlass(x) & SmallThing(y) & Object(z) & SmallThing(y,z) & ComesBetter(y,z)) -> UsedToSee(x,y,z))", "all x y.((MagnifyingGlass(x) & SmallThing(y) & IsMaking(x,y)) -> UsedToSeeForClear(x,y))", "all x.(MagnifyingGlass(x) -> (SeesSmallThings(x) & MakesObjectsAppearBigger(x)))", "all x y.((MagnifyingGlass(x) & SmallThing(y)) -> MadeAppearsBigger(z))", "all x y.((MagnifyingGlass(x) & SmallThing(y) & MakesOpaqueMore(x,y)) -> UsedToSee(x,y))", "all x y z.((MagnifyingGlass(x) & SmallThing(y) & Object(z)) -> UsedToSee(x,y))", "all x y.((MagnifyingGlass(x) & SmallThing(y) & AppearLarger(x)) -> UsedToSeeBy(x,y))", "all x y.((MagnifyingGlass(x) & SmallThing(y)) -> SeesByAppearingBigger(x,y))"]}
{"id": "entailmentbank_validation_892", "nl": "magnifying glass can be used to see an insect by making it appear bigger.", "fol": "", "prediction": ["all x.(MiflifyingGlass(x) -> (MeetsInsect(x) & MakesItAppearBigger(x)))", "all x y.((MagnifyingGlass(x) & Insect(y) & Angry(y,y)) -> CanSee(x,y))", "all x y.((MagnifyingGlass(x) & Insect(y)) -> SeesByAppealingBigger(y,x))", "all x y.((MagnifyingGlass(x) & Insect(y)) -> CanBeUsedToSee(x,y))", "all x.(MagnifyingGlass(x) -> (CanSelectInsect(x) & MakesIsmaphoreBigger(x)))", "all x y z.((MagnifyingGlass(x) & Insect(y) & Size(z) & AppearsBigger(z)) -> CanSee(x,y,z))", "all x y.((MillenniumGlass(x) & Insect(y) & UsedToSee(x,y) & AppearBigger(x,y)) -> CanBeUsedToSee(x,y))", "all x.(MagnifyingGlass(x) -> VisesInsect(x))", "all x y.((MagnifyingGlass(x) & Insect(y)) -> SeesByAmprovingBigger(x,y))", "ALL X Y.((MagnifyingGlass(x) & Insect(y)) -> CanAppearBigger(y))", "all x y.((MillenniumGlass(x) & Insect(y)) -> UsesToSeeByMakingAppearBigger(x,y))", "all x.(MagnifyingGlass(x) -> CanBeUsedToSeeInsect(x))", "all x y.((MagnifyingGlass(x) & Insect(y)) -> SeesByAppearingBigger(x,y))", "all x y.((MagnifyingGlass(x) & Insect(y)) -> IsAppearingBigger(y))", "all x y.((MagnifyingGlass(x) & Insect(y)) -> MakesAppearBerger(x,y))", "all x y.((MagnifyingGlass(x) & Insect(y) & AppearsWearer(y)) -> SeesWithMagnifyingGlass(x,y))"]}
{"id": "entailmentbank_validation_893", "nl": "a hand lens is a kind of magnifying glass.", "fol": "", "prediction": ["all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x y.((HandLens(x) & MagnifyingGlass(y)) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))"]}
{"id": "entailmentbank_validation_894", "nl": "a hand lens can help seeing the insect by magnifying the insect.", "fol": "", "prediction": ["all x y.((HandLens(x) & Insect(y)) -> HelpsSee(x,y))", "all x.(HandLens(x) -> (HoldLens(x) & MagnifiesInsect(x)))", "all x y.((HandLens(x) & Insect(y)) -> HelpsSee(x,y))", "all x y.((HandLens(x) & (Insect(y) | Insect(y))) -> HelpsSee(x,y))", "all x y z.((HandLens(x) & Insect(y) & Eye(z)) -> (HelpsSeeing(x,y,z) & Magnifies(x,y,z)))", "all x y.((HandLens(x) & Insect(y)) -> Specifies(x,y))", "all x y.((HandLens(x) & Insect(y)) -> (HelpsSeeSeeing(x,y) & Magnifies(x,y)))", "all x y z.((HandLens(x) & Insect(y) & Insect(z) & Magnifies(x,y,z)) -> CanHelpSeeing(x,y,z))", "all x.(HandLens(x) -> HelpsSeeingInsectByMagnifyingInsect(x))", "all x y.((HandLens(x) & Insect(y)) -> CanHelpSeeSeeing(x,y))", "all x y.((HandLens(x) & Insect(y)) -> (HelpsSeeing(x,y) & Magnifies(x,y)))", "all x.(HandLens(x) -> ThereAlwaysAssistsSeeingInsectByMagnifyingInsect(x))", "all x y.((HandLens(x) & Insect(y) & Magnifies(x,y)) -> HelpsSeeSeeing(x,y))", "all x y.((HandLens(x) & Insect(y)) -> CanHelpSeeingByMagnifying(x,y))", "all x y.((HandLens(x) & Insect(y) & Magnifies(x,y)) -> HelpsSeeSeeing(x,y))", "all x y.((HandLens(x) & Insect(y) & Magnifies(x,y)) -> HelpsSeeSeeing(x,y))"]}
{"id": "entailmentbank_validation_895", "nl": "building a doghouse requires cutting materials into a fixed size.", "fol": "", "prediction": ["all x.(Doghouse(x) - CuttingMaterials(x))", "all x.(Doghouse(x) -> (RequiresCuttingMaterials(x) & FixedSize(x)))", "all x.((Doghouse(x) & NeedsCuttingMaterials(x)) -> HaveFixedSize(x))", "all x.(Doghouse(x) -> (CutsMaterials(x,fixSize) | BuildsDoghouse(x)))", "all x.(Doghouse(x) -> RequiresCuttingMaterials(x))", "all x y.((Doghouse(x) & Material(y) & RigorousSize(x,y)) -> RequiresCutting(x,y))", "all x.(Doghouse(x) -> (CuttingMaterials(x) & FixedSize(x)))", "all x y.((Doghouse(x) & Doghouse(y)) -> CutsMaterialsIntoFixedSize(x,y))", "all x.(Doghouse(x) -> RequiresCuttingMaterials(x))", "all x.(Doghouse(x) -> (CuttingMaterialsIntoFixedSize(x) & Builds(x,d,e)))", "all x.(Doghouse(x) -> NeedsCuttingMaterialsToFixedSize(x))", "all x.(Doghouse(x) -> (CuttingMaterials(x) & FixableSize(x)))", "all x.(Doghouse(x) -> RequiresFalteredSizeCutting(x))", "all x.((Doghouse(x) & Building(x)) -> RequiresCuttingMaterialsIntoFixedSize(x))", "all x y.((Doghouse(x) & Doghouse(y)) -> (RequiresCuttingMaterials(x,y) & FixedSize(y)))", "all x y.((Doghouse(x) & CutsMaterials(x,y)) -> FixableSize(y))"]}
{"id": "entailmentbank_validation_896", "nl": "cutting a material usually requires measuring length.", "fol": "", "prediction": ["all x.(Cutting(x) -> RequiresMeasurementLength(x))", "all x.((Capping(x) & Material(y)) -> RequiresMeasuringLength(x,y))", "all x y.((Material(x) & Material(y) & Cuts(x,y)) -> NeedsMetalLengthFor(x,y))", "all x.(CuttingMaterial(x) -> PrefersMeasuringLength(x))", "all x.((MakingMaterial(x) & MeasuringLength(x)) -> Requires(x,x))", "all x.(Cutting(x,y) -> MeasuringLength(y))", "all x y.((Material(x) & Material(y)) -> (Cuts(x,y) & MeasuresLength(x)))", "all x y.((Material(x) & Material(y)) -> RequiresMeasuringLength(x,y))", "all x.(Cutting(x) -> MeasuringLength(x))", "all x y.((Material(x) & Material(y)) -> RequiredForCutting(x,y))", "all x y.((Material(x) & Material(y)) -> MeasuringLength(y))", "all x.(CuttingMaterial(x) -> (RequiresMeasuringLength(x)))", "all x y.((Material(x) & Material(y)) -> RequiresMethestingLength(x,y))", "all x.((MakingMaterial(x) & RequiresMeasuringLength(x)) -> Cut(x))", "all x.(CuttingMaterial(x) -> RequiresMeasuringLength(x))", "all x.((Cutting(x) & Material(x) & MeasuresLength(x)) -> MeasuresLength(x))"]}
{"id": "entailmentbank_validation_897", "nl": "cutting a material when building a doghouse  requires measuring length.", "fol": "", "prediction": ["all x.((CuttingMaterial(x) & BuildingDoghouse(x)) -> RequiresMeasuringLength(x))", "all x y.((Doghouse(x) & CuttingMaterial(x,y)) -> RequiresMetalLength(x))", "all x.((Doghouse(x) & Builds(y)) -> DoesRequireMethodLengthScreen(x,y))", "all x y z.((Doghouse(x) & Doghouse(y) & Material(z) & Building(er,y) & Cuts(y,z)) -> RequiresMeasuring(y,Length))", "all x y.((Doghouse(x) & Material(y) & Knifting(x,y)) -> RequiresMeasuringLength(x))", "all x.((Length(x) & Doghouse(y)) -> RequiresMeasuringLength(z))", "all x y.((Doghouse(x) & Material(y) & Cuts(x,y)) -> RequiresMeasuringLength(x))", "all x.((Doghouse(x) & Doghouse(y)) -> CanCut(x,MeasureLength))", "all x y z.((Doghouse(x) & Material(y) & Cuts(x,y) & Doghouse(z)) -> RequiresMeasuringLength(x,z))", "all x y z.((Doghouse(x) & Material(y) & Doghouse(z) & Building(x,y,z)) -> RequiresMeasureDistance(x))", "all x.((ProcessingMaterial(x) & BuildingDoghouse(x)) -> RequiresMeasuringLength(x))", "all x.((DogHouse(x) & CutsMaterial(x) & BuildsDoghouse(x)) -> RequiresMeasuringLength(x))", "all x.((Doghouse(x) & Builds(x,Dumberhouse)) -> SizesLength(x))", "all x.((Dighouse(x) & CutsMaterial(x)) -> RequiresMeasuresLength(x))", "all x.((Doghouse(x) & CutsMaterial(x) & BuildsDoghouse(x)) -> MeasuresLength(x))", "all x y.((Doghouse(x) & Material(y)) -> (MetalLength(x,y) & Precaution(x,y)))"]}
{"id": "entailmentbank_validation_898", "nl": "a tape can be used to measure length.", "fol": "", "prediction": ["all x.(Tape(x) -> (MeasureLength(x) & Tape(x)))", "all x.(Dape(x) -> MeasureLength(x))", "all x.(Tampa(x) -> MeasuresLength(x))", "all x.(Camera(x) -> MeasuresLength(x))", "all x.(A tape(x) -> CanBeUsedToMeasureLength(x))", "all x.(Mapped(x) -> MeasuresLength(x))", "all x.(Tape(x) -> MeasureLawn(x))", "all x.(Tape(x) -> MeasureLength(x))", "all x.(Tape(x) -> MeasuresLength(x))", "all x y.((Teeth(x) & Tape(y)) -> MeasureLength(x,y))", "all x.(Tape(x) -> MeasuresLength(x))", "all x.(Tape(x) -> MeasuresLength(x))", "all x y.((Tape(x) & MeasureLength(y)) -> CanBeUsedToMeasureLength(x,y))", "all x.(Tape(x) -> MeasureLength(x))", "all x.(Teape(x) -> CanBeUsedToMeasureLength(x))", "all x.(Tape(x) -> MeasuresLength(x))"]}
{"id": "entailmentbank_validation_899", "nl": "cutting wood when building a doghouse requires using a tape.", "fol": "", "prediction": ["all x.((DropHouse(x) & BuildDoghouse(x)) -> RequiresTape(x))", "all x.((Doghouse(x) & Builds(x)) -> RecognizesAdvantageBuyTeeth(x))", "all x.((CuttingWood(x) & Doghouse(x) & BuildingRequiresPaint(x)) -> RequiresPaint(x))", "all x.((Doghouse(x) & Building(x) & UsesTape(x)) -> CutsWoodWhenUsingTape(x))", "all x.(((Doghouse(x) & CutsWood(x) & Builds(x)) -> RequiresTape(x))", "all x y.((DoghouseBuilding(x) & Doghouse(y)) -> CutsWood(x,y))", "all x.((BuiltDoghouse(x) & CutsWood(x)) -> RequiresAdjustment(x))", "all x.((Doghouse(x) & Building(x,y)) -> (CuttingWoodWithTape(x)))", "all x.((Dighouse(x) & CanDoghouse(x) & UsingTeap(x)) -> CutsWoodWithTeap(x))", "all x.((Dighouse(x) & Building(x,Doghouse)) -> CutsWood(x))", "all x y.((Doghouse(x) & Doghouse(y)) -> CutsWoodRequiresTape(x,y))", "all x.((Doghouse(x) & CutsWood(x)) -> RequiresTape(x))", "all x y.((Doghouse(x) & Doghouse(y)) -> CutsWoodForBuildingRequiresTape(x,y))", "all x y.((Doghouse(x) & Doghouse(y) & CutsWood(x,y) & RequiresTape(x)) -> RequiresTape(x))", "all x.((Doghouse(x) & Builds(x,Doghouse)) -> RequiresTape(x))", "all x.((BuildsDoghouse(x) & CutsWood(x) & UsesCamera(x)) -> RequiresCamera(x))"]}
{"id": "entailmentbank_validation_900", "nl": "food is a kind of substance.", "fol": "", "prediction": ["all x.(Food(x) -> Substance(x))", "all x.(Food(x) -> Substance(x))", "all x.(Food(x) -> Substance(x))", "exists x.(Food(x) & Substance(x))", "all x.(Food(x) -> Substance(x))", "all x.(Food(x) -> Substance(x))", "all x.exists y.(Food(x) & Substance(y),x)) -> Substance(x))", "all x.(Food(x) -> Substance(x))", "all x.(Food(x) -> Substance(x))", "all x.(Food(x) -> Substance(x))", "all x.(Food(x) -> Substance(x))", "all x.(Food(x) -> Substance(x))", "all x.(Food(x) -> Substance(x))", "all x.(Food(x) -> Substance(x))", "exists x.(Food(x) & Substance(x))", "all x.(Food(x) -> Substance(x))"]}
{"id": "entailmentbank_validation_901", "nl": "candy is a kind of food.", "fol": "", "prediction": ["all x.(Chocolate(x) -> Food(x))", "all x.(Candy(x) -> Food(x))", "all x.((Candy(x) & Food(x)) -> Food(x))", "all x.(Condit(x) -> Food(x))", "all x.(Candy(x) -> Food(x))", "all x.(Candy(x) -> Food(x))", "exists x.(Candy(x) & TypeOfFood(x))", "all x.(Chocolate(x) -> Food(x))", "all x.(Candy(x) -> Food(x))", "all x.(Candy(x) -> Food(x))", "all x.(Candy(x) -> Food(x))", "all x.(Candy(x) -> Food(x))", "all x.(Candy(x) -> Food(x))", "all x.(Candy(x) -> Food(x))", "all x.(Candy(x) -> Food(x))", "all x.((Candy(x) & Food(x)) -> Good(x))"]}
{"id": "entailmentbank_validation_902", "nl": "candy is a kind of substance.", "fol": "", "prediction": ["all x y.((Candy(x) & Substance(y)) -> Substance(x))", "all x.(Chocolate(x) -> Substance(x))", "all x.(Conditon(x) -> Substance(x))", "all x.(Candy(x) -> Substance(x))", "all x.(Candy(x) -> IsSubstance(x))", "all x.(Candy(x) -> Substance(x))", "all x.(Candy(x) -> Material(x))", "all x.(Candy(x) -> Substance(x))", "all x.(Candy(x) -> Substance(x))", "all x.(Candy(x) -> Substance(x))", "all x.(Candy(x) -> Substance(x))", "all x.(Candy(x) -> Substance(x))", "all x.(Candy(x) -> Substance(x))", "all x.(Candy(x) -> Substance(x))", "all x.(Candy(x) -> Substance(x))", "all x.(Candy(x) -> Material(x))"]}
{"id": "entailmentbank_validation_903", "nl": "a thermometer is used to measure temperature of substance.", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresTemperatureOfSubstance(x))", "all x y.((Thermometer(x) & Substance(y)) -> MeasuresTemperature(x,y))", "all x y.((Thermometer(x) & Substance(y)) -> MeasuresTemperature(x,y))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x y.((Thermometer(x) & Substance(y)) -> MeasuresTemperature(x,y))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x y.((Thermometer(x) & Substance(y)) -> MeasuresTemperature(x,y))", "all x y.((Thermometer(x) & Substance(y)) -> MeasuresTemperature(x,y))", "all x.(Thermometer(x) -> MeasuresTemperatureOfSubstance(x))", "all x.(Thermometer(x) -> MeasuresTemperatureOfSubstance(x))", "all x.(Thermometer(x) -> MeasuresTemperatureOfSubstance(x))", "all x y.((Thermometer(x) & Substance(y)) -> MeasuresTemperatureOf(x,y))", "all x.(Thermometer(x) -> MeasuresTemperatureOfSubstance(x))", "all x.(Thermometer(x) -> MeasuresTemperatureOfSubstance(x))", "all x y.((Thermometer(x) & Substance(y)) -> MeasuresTemperature(x,y))", "all x y z.((Thermometer(x) & Substance(y) & Temperature(z)) -> Measures(x,y,z))"]}
{"id": "entailmentbank_validation_904", "nl": "a thermometer is used to measure the temperautre of the candy.", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresTemperatureOfCandy(x))", "all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperature(x,y))", "all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperature(x,y))", "all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperature(x,y))", "all x y z.((Thermometer(x) & Candy(y) & TemperanceNote(z)) -> Measures(x,y,z))", "all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperatureOf(x,y))", "all x y z.((Thermometer(x) & Candy(y) & Temperance(z)) -> MeasuresPoorPerson(x,y,z))", "all x y z.((Thermometer(x) & Candy(y) & Temperature(z)) -> UsedToMeasure(x,y,z))", "all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperature(x,y))", "all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperatureOf(x,y))", "all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperatureAndDoesNotHaveTemperature(x,y))", "all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperature(x,y))", "all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperature(x,y))", "all x y.((Thermometer(x) & Candy(y) & MeasuresTemperature(x,y)) -> UsedToMeasure(x,y))", "all x y z w.((Thermometer(x) & Candy(y) & Temperature(z) & UsedFor(x,y,z)) -> Measures(x,y,z))", "all x y z.((Thermometer(x) & Candy(y) & Candy(z)) -> MeasuresTemperature(x,y,z))"]}
{"id": "entailmentbank_validation_905", "nl": "a string is short in length.", "fol": "", "prediction": ["all x.(String(x) -> ShortInLength(x))", "all x.(String(x) -> ShortLength(x))", "all x.(String(x) -> ShortLength(x))", "all x.(String(x) -> ShortInLength(x))", "all x.(String(x) -> ShortLength(x))", "all x.(String(x) -> ShortLength(x))", "all x.(String(x) -> ShortLength(x))", "all x.(String(x) -> ShortInLength(x))", "all x.(String(x) -> ShortLength(x))", "all x.(String(x) -> ShortLength(x))", "all x.(String(x) -> ShortLength(x))", "all x.(String(x) -> ShortInLength(x))", "all x.(String(x) -> ShortLength(x))", "all x.(String(x) -> ShortLength(x))", "all x.(String(x) -> ShortLength(x))", "all x.(String(x) -> ShortLength(x))"]}
{"id": "entailmentbank_validation_906", "nl": "centimeter is usually used to measure short length.", "fol": "", "prediction": ["all x.(Centimeter(x) -> MeasuresShortLength(x))", "all x.((Centric(x) & ShortLength(x)) -> UsedToMeasure(x,x))", "all x.((Centimeter(x) & ShortLength(x)) -> UsedToMeasure(x,x))", "all x.(Centimeter(x) -> UsedToMeasureShortLengths(x))", "all x.(Centimeter(x) -> MeasuresShortLength(x))", "all x.(Centimeter(x) -> MeasuresShortLength(x))", "all x.(Centimeter(x) -> UsedToMeasureShortLength(x))", "all x.(Centimeter(x) -> UsedToMeasureShortLength(x))", "all x.(Centimeter(x) -> UsedToMeasureShortLength(x))", "all x y.((Centimeter(x) & ShortLength(y)) -> Measures(x,y))", "all x.(Centimeter(x) -> UsedToMeasureShortLength(x))", "all x.(Centimeter(x) -> MeasuresShortLength(x))", "all x.(Centrimeter(x) -> MeasuresShortLength(x))", "all x.(Understanding(x) -> MeasuresShortLength(x))", "all x.((Cencilimeter(x) & ShortLength(x)) -> UsedToMeasure(x))", "all x.(Centimeter(x) -> UsedToMeasureShortLength(x))"]}
{"id": "entailmentbank_validation_907", "nl": "centimeter is a better unit to measure the length of the string.", "fol": "", "prediction": ["all x.(CMD(x) -> BetterUnitToMeasureLength(x))", "all x.(Centimeter(x) -> BetterUnitForMeteringStringLength(x))", "all x.((Centimeter(x) & String(y)) -> BetterUnitToMeasureLength(x,y))", "all x.((Centimeter(x) & MeasureStringLength(x)) -> BetterUnit(x))", "all x.((Centimeter(x) & String(y)) -> BetterUnitsToMeasureLength(x,y))", "all x.((Centimeter(x) & TestString(x)) -> BetterUnitToMeasureLength(x))", "all x.((Centimeter(x) & String(y)) -> BetterUnit(x,y))", "all x.((Centimeter(x) & String(y)) -> BetterUnitToMeasureLength(x,y))", "all x.(Centimeter(x) & WorstUnitToMeasureLengthOfString(x))", "all x y.((Centimeter(x) & String(y)) -> BetterUnitToMeasureLength(x,y))", "all x.((Centimeter(x) & MeasureLengthOfString(x)) -> BetterUnitToMeasureLength(x,y))", "all x.((Centimeter(x) & String(y)) -> BetterUnitToMeterLength(x,y))", "all x.(Centimeter(x) -> BetterUnitToMeasureLengthOfString(x))", "all x.((Centimeter(x) & MeasuresStringLength(x)) -> BetterUnit(x))", "all x.(Centimeter(x) -> BetterUnitToMeasureStringLength(x))", "all x.(Unit(x) & BetterUnit(x,stringAnalysis,stringLength))"]}
{"id": "entailmentbank_validation_908", "nl": "meters m are a metric / si unit used for measuring length.", "fol": "", "prediction": ["all x.(Meter(x) -> (Metal(x) | Si(x)))", "all x.((Meter(x) & Metric(x)) -> MeasuresLength(x))", "all x.(Measurements(x) -> (Metric(x) | SiUnit(x)) & MeasurableLength(x)))", "all x.(Medical(x) -> MeasuresLength(x))", "all x.(MeasuresLength(x) -> (Metal(x) & SiUnit(x) & UsedForMeasuringLength(x)))", "all x.(MeasureMeter(x) -> MeasuresLength(x))", "all x.(Measurement(x) -> ((MetalUnit(x) | SizeUnit(x)) & MeasuresLength(x))))", "all x.(Method(x) -> (MeasuresLength(x) & MeasuringLength(x)))", "all x.(Meter(m) -> (MeterUnit(x) & SiUnit(x) & UsedForMeasuringLength(x)))", "all x.(Meaning(x) -> (Metal(x) & SiUnit(x) & UsedForMeasuringLength(x)))", "all x.(MeasuresLength(x) -> (MetalUnit(x) | StylizedUnit(x)))", "all x.(Meter(x) -> (MeasuresLength(x) | MeasuresLength(x)))", "all x.(MeasuresLength(x) -> MeasuresLength(x))", "all x.(Measurement(x) -> (MetalUnit(x) & SiUnit(x)))", "all x.(Measurement(x) -> (Meter(x) | SimUnit(x)))", "all x y z.((Meter(x) & Metric(y) & SiUnit(z)) -> MeasuresLength(x,y,z))"]}
{"id": "entailmentbank_validation_909", "nl": "yard is an imperial unit used for measuring length.", "fol": "", "prediction": ["all x.(MeasuresLength(x) -> ImperialUnit(x))", "all x.(MeasuresLength(x) -> ImperialUnit(x))", "all x.(yard(x) -> ImperialUnitMeasuringLength(x))", "all x.(MetalUnit(x) -> ImperialUnit(x))", "all x.(Metameter(x) -> ImperialUnit(x))", "all x.(Ground(x) -> (ImperialUnit(x) & MeasurableLength(x)))", "all x.(MeasuresLength(x) -> ImperialUnit(x))", "all x.(Metal(x) -> ImperialUnit(x))", "all x.(Meta-Length(x) -> ImperialUnit(x))", "all x.(Garden(x) & ImperialUnit(x) & MeasuresLength(x))", "all x.(Garden(x) -> MeasuresLength(x))", "all x y.((Mortgage(x) & ImperialUnit(y)) -> MeasuresLength(x,y))", "is an imperialUnit UsedForMeasuringLength(x))", "all x.(Homeyard(x) -> (ImperialUnit(x) & UsedForMeasuringLength(x)))", "all x.(Grayard(x) -> (ImperialUnit(x) & UsedForMeasuringLength(x)))", "yard (imperialUnit(im) & UsedForMeasuringLength(im))"]}
{"id": "entailmentbank_validation_910", "nl": "yard and meter are both unit used for measuring length.", "fol": "", "prediction": ["all x.((Treatment(x) & Yard(x) & Meter(x)) -> (MeasuresLength(x) & MeasuresLength(x)))", "all x y.((MeasuresLength(x) & Yard(y)) -> Uses(x,Y))", "all x.((Garden(x) | Meter(x)) -> MeasuresLength(x))", "all x.(Meter(x) -> (MeasuresLength(x) | MeasuresLength(x)))", "all x.((Measurements(x) & Yard(x) & Meter(x)) -> MeasuresLength(x))", "(UsedForMeasuringLength(yard) & UsedForMeasuringLength(meter))", "(MeasuresLength(yard) & MeasuresLength(meter))", "(MeasuresLength(y) & MeasuresLength(y))", "all x.((Meter(x) & Yard(x)) -> MeasuringLength(x))", "(Measure-LengthUsing(yard,x) & MeasuresLength(meter),x))", "(MeasureSsleep(yard) & MeasureSleep(meter))", "Yard (Unit) & Meter (Unit))", "all x y.((Meter(x) & Yard(y)) -> Measuring(x,y))", "(MeasuresLength(yard) & MeasuresLength(meter))", "all x.((MeasuresLength(x) & MeasuresLength(x)) -> (MeasuresLength(x) & MeasuresLength(x)))", "all x.((MeasuresLength(x) & MeasuresLength(x)) -> (MeasuresLength(x) & MeasuresLength(x)))"]}
{"id": "entailmentbank_validation_911", "nl": "1 yard equals to 09 meter.", "fol": "", "prediction": ["all x.((F yard(x) & SquareNine(x)) -> Equivalent(x,y))", "all x.(Mile(x) -> Yard(x,09))", "all x.((Garden(x) & Yard(x)) -> ((Equals09Meter(x) & Yard(x))))", "all x.(Garden(x) -> EquivalentTo(x,09))", "all x.(Mile(x) -> (Jewel(x) & Yard(x)))", "all x.((Garage(x) & Defines(x,9)) -> Yard(x,1))", "all x.((Garden(x) & 10Meter(x)) -> ApproximatelyNox(x))", "all x.((Grammar(x) & Yard(x,9)) -> EquivalentMeter(x,9))", "all x.(( Yard(x) & Yard(x)) -> Meter(x,9))", "all x.(Grand(x) -> 1 Yard(x))", "all x.(Yard(x) -> EqualsWall(x,9Memeter))", "all x.((Garage(x,y) & Yard(y)) -> EquivalentMeter(x,09))", "all x y.((Handy(x) & Yard(y)) -> (EqualTo(x,y) & Percentage(x,y)))", "all x.((Garage(x) & Yard(x,9)) -> EqualsTo(x,9))", "all x.(Morning(x) -> EquivalentTo(x,09))", "all x.((Garden(x) & Yard(x)) -> ElementsMeter(x,e,9))"]}
{"id": "entailmentbank_validation_912", "nl": "meter is the metric unit that is the most similar to yard.", "fol": "", "prediction": ["all x.(Meter(x) -> MostSameToM Yard(x))", "all x y.((Meter(x) & Yard(y)) -> MostSameTo(x,y))", "all x y,z.((Met(x) & Yard(z)) -> MostSame(x,y,z))", "all x.(Meter(x) -> MostSameOfM Yard(x))", "all x y.((Meter(x) & Yard(y)) -> MostSilicon(x,y))", "all x.(Meter(x) -> MOSTSameMeter(x))", "all x.(Meter(x) -> SimilarToMetricUnit(x,yard))", "all x.(MetricUnit(x) -> SingularToGarage(x))", "all x.(Meter(x) -> MostSimilarToM yard(x))", "all x.(Meter(x) -> TheMetricUnit(x))", "all x.(Meter(x) -> AlmostSameAtM yard(x))", "all x.(Meter(x) -> (MetricalUnit(x) & SympathicalToGarden(x)))", "all x.(Meter(x) -> (Met(x) & SimilarTo(x,yard)))", "all x y.((Meter(x) & Yard(y)) -> Similar(x,y))", "all x.(Meter(x) -> (MeteorialUnit(x) & AlmostSameWord(x)))", "all x.(Metal(x) -> MostSameSideToGarden(x))"]}
{"id": "entailmentbank_validation_913", "nl": "zinc is a kind of metal.", "fol": "", "prediction": ["all x.(Zine(x) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "all x.((Zinc(x) & Metal(x)) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "all x.(Zinc(x) -> Metal(x))", "all x.(Zinc(x) & Metal(x))", "all x.(Zinc(x) -> Metal(x))"]}
{"id": "entailmentbank_validation_914", "nl": "copper is a kind of metal.", "fol": "", "prediction": ["all x.((Cuircon(x) & Metal(x)) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))", "all x.(CuirCone(x) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))", "all x.(Cupulb(x) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))"]}
{"id": "entailmentbank_validation_915", "nl": "copper and zinc are two metals.", "fol": "", "prediction": ["all x.((Metal(x) & Copper(x) & Zinc(x)) -> Metal(x))", "((Copper(copper) | Zinc(copper)))", "all x.((Metal(x) & Metal(x,Cuivre) & Metal(x,Zinc)) -> Metal(x))", "(Material(copper) & Metal(zinc))", "all x.((Metal(x) & Copper(x) & Zinc(x)) -> Metal(x))", "((Copper(copper) | Zinc(copper)))", "(Material(copper) & Metal(zinc))", "all x.((Metal(x) & Metal(x)) -> (Cuircon(x) & Metal(x,Zinc)))", "(Metal(copper) & Metal(zinc))", "all x.((Metal(x) & Copper(x) & Zinc(x)) -> Metal(x))", "((Electric(copper) & Zinc(z)))", "(Material(copper,x) & Metal(zinc,x))", "(Metal(copper) & Metal(zinc))", "all x.((Metal(x) & Metal(x)) -> (Cuivre(x) & Zinc(x)))", "(Metal(copper) & Metal(zinc))", "all x.((Metal(x) & Metal(x)) -> (Cuid(x) & Zinc(x)))"]}
{"id": "entailmentbank_validation_916", "nl": "brass is made of copper and zinc.", "fol": "", "prediction": ["all x.(Balloy(x) -> (MadeOfCuiper(x) & MadeOfZinc(x)))", "all x.(Brass(x) -> (MadeOfCuid(x) & MadeOfZinc(x)))", "all x.(Brass(x) -> (IsMadeOfCuid(x) & IsMadeOfZinc(x)))", "all x.(Brass(x) -> (MadeOf(x,Copper) & MadeOf(x,Zinc)))", "all x.(Brass(x) -> (MadeOf(x,Cuid) & MadeOf(x,Zinc)))", "all x.(Brass(x) -> (MadeOf(x,Copper) & MadeOf(x,Zinc)))", "all x.(Brass(x) -> (MadeOfCuip(x) & MadeOfZinc(x)))", "all x.(Brass(x) -> (MadeOf(x,Copper) & MadeOf(x,Zinc)))", "all x.(Brass(x) -> (MadeOf(x,Copper) & MadeOf(x,Zinc)))", "all x.(Brass(x) -> (MadeOf(x,y) & MadeOf(x,z) & MadeOf(x,p) & MadeOf(y,z)))", "all x.(Brass(x) -> (MadeOfCuid(x) & MadeOfZinc(x),z)))", "all x.(Brass(x) -> (MadeOfCuid(x) & MadeOfZinc(x)))", "all x.(Balloy(x) -> (MadeOfCuiper(x) & MadeOfZinc(x)))", "all x.(Brass(x) -> (MadeOf(x,Cuid) & MadeOf(x,Zinc)))", "all x y.((Brass(x) & Copper(y) & Zinc(x)) -> MadeOf(x,y))", "all x.(Brass(x) -> (MadeOf(x,Copper) & MadeOf(x,Zinc)))"]}
{"id": "entailmentbank_validation_917", "nl": "brass is made of two metals.", "fol": "", "prediction": ["all x.(Brass(x) -> exists y.(Metal(y) & Metal(z)) & MadeOf(x,y,z)))", "all x.(Ball(x) -> MadeOfTwoMetals(x))", "all x.(Brass(x) -> MadeOfTwoMetals(x))", "all x.(Brass(x) -> MakerOfTwoMetals(x))", "all x.(Brass(x) -> MadeOfTwoMetals(x))", "all x.(Brass(x) -> MadeOfMadeOfTwoMetallics(x))", "all x.(Brass(x) -> MadeOfTwoMetals(x))", "all x.(Brass(x) -> MadeOf(x,2))", "all x.(Brass(x) -> ThereTwoMetals(x))", "all x.(Brass(x) -> MadeOfTwoMetals(x))", "all x.(Brass(x) -> ThereOfTwoMetals(x))", "all x.(Brass(x) -> MadeOfTwoMetals(x))", "all x.(Ball(x) -> MadeOfTwoMetals(x))", "all x y.((Brass(x) & Metal(y)) -> MadeOf(x,y))", "all x.(Brass(x) -> TwoMetal(x))", "all x.(Brass(x) -> MadeOfTwoMetals(x))"]}
{"id": "entailmentbank_validation_918", "nl": "an alloy is made of two or more metals.", "fol": "", "prediction": ["all x.(Alloy(x) -> exists y.(Metal(y) & MadeOf(x,y))))", "all x.(Alloy(x) -> (MadeOfMetals(x,2) | MadeOfMoreMetals(x,3)))", "all x y.((Alloy(x) & Metal(y)) -> MadeOf(x,y,X))", "all x.(Alloy(x) -> exists y.(SixMetals(y) & MadeOf(x,y)))", "all x.(Alloy(x) -> (MadeOfTwoOrMoreMetals(x)))", "all x.(Alloy(x) -> (MakesOfMetals(x,2) | MakesOfMoreMetals(x,5)))", "all x.(Alloy(x) -> exists y.(Metal(y) & MadeOf(x,y))))", "all x.(Alloy(x) -> (Metal(x) & Metal(x)))", "all x.(Alloy(x) -> MadeOfTwoOrMoreMetals(x))", "all x.(Alison(x) -> (MadeOfMetal(x,2) | MadeOfMetal(x,3)))", "all x.(Alloy(x) -> (MadeOf(x,2) & MadeOfMetals(x,3)))", "all x.(Alloy(x) -> (MadeOfMetal(x,Y) | MadeOfMetal(y),x)))", "all x.(Alloy(x) -> (MadeOfMetals(x,2) | MadeOfMetals(x,3)))", "all x.(Alloy(x) -> (MadeOfMetals(x,2) | MadeOfMoreMetals(x,2)))", "all x.(Alloy(x) -> (Metal(x,2) | Metal(x,3)))", "all x.(Alloy(x) -> MadeOfMetals(x,2))"]}
{"id": "entailmentbank_validation_919", "nl": "brass is a kind of alloy.", "fol": "", "prediction": ["all x.(Brass(x) -> Alloy(x))", "all x.(Balloy(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))", "all x.(Brass(x) -> Alloy(x))"]}
{"id": "entailmentbank_validation_920", "nl": "a rough surface can absorb sound.", "fol": "", "prediction": ["all x.(RoughSurface(x) -> CanAbsorbSound(x))", "exists x.(RoughSurface(x) & AbsorbSound(x))", "all x.(RoughSurface(x) -> AbsorbsSound(x))", "all x.(RoughSurface(x) -> CanAbsorbSound(x))", "all x.(RoughSurface(x) -> AbsorbSound(x))", "all x.(RoughSurface(x) -> AbsorbVoice(x))", "all x.(RoughSurface(x) -> AbsorbsSound(x))", "exists x.(RoughSurface(x) & AbsorbSound(x))", "all x.(RoughSurface(x) -> AbsorbSound(x))", "all x.(RoughSurface(x) -> CanAbsorbSound(x))", "all x.(RoughSurface(x) -> AbsorbsSound(x))", "all x.(RoughSurface(x) -> AbsorbsSound(x))", "all x.(RoughSurface(x) -> CanAbsorbSound(x))", "all x.(RoughSurface(x) -> CanAbsorbSound(x))", "all x.(RoughSurface(x) -> AbsorbsSound(x))", "all x.(RoughSurface(x) -> CanAbsorbSound(x))"]}
{"id": "entailmentbank_validation_921", "nl": "a carpet can absorb sound.", "fol": "", "prediction": ["all x.(Carpet(x) -> CanAbsorbSound(x))", "all x.(Tattoo(x) -> AbsorbSound(x))", "all x.(Kitchen(x) -> AbsorbsSound(x))", "all x.(Cedar(x) -> CanAbsorbSound(x))", "all x.(Cedar(x) -> AbsorbsSound(x))", "all x.(Carpet(x) -> CanAbsorbSound(x))", "all x.(Marble(x) -> AbsorbsSound(x))", "all x.((Cedar(x) & SoundAbsorption(x)) -> CanAbsorb(x,sound))", "all x.(Cathedral(x) -> CanAbsorbSound(x))", "all x.(Deck(x) -> AbsorbSound(x))", "all x.((Cedar(x) & CanAbsorbSound(x)) -> CanAbsorbSound(x))", "all x.(Cedar(x) -> CanAbsorbSound(x))", "all x.(Tread(x) -> AbsorbsSound(x))", "all x.(Tread(x) -> AbsorbsSound(x))", "all x.(Carpet(x) -> CanAbsorbSound(x))", "all x.(Tread(x) -> CanAbsorbSound(x))"]}
{"id": "entailmentbank_validation_922", "nl": "if sound is absorbed, then sound can not reflect off the surface.", "fol": "", "prediction": ["all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -Reflect(x))", "all x.((SoundAbsorbed(x)) -> -ReflectOffSurface(x))", "all x y.((Sound(x) & Absorbed(x)) -> -ReflectsOffSurface(y))", "all x.((SoundAbsorbable(x) & SoundReflectsOffSurface(x)) -> -ReflectsOffSurface(x))", "all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -ReflexRadius(x))", "all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -ReflectsOffSurface(x))", "all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -ReflectsOffSurface(x))", "all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -Asserted(x))", "all x.((SoundAbsorbed(x)) -> SoundCannotReflectOffSurface(x))", "all x.((Sound(x) & Absorbed(x)) -> -ReflectsOffSurface(x))", "all x.(AbsorbedSound(x) -> -ReflectsOffSurface(x))", "all x y.((SoundAbsorbed(x) & Sound(y)) -> -ReflectOffSurface(y))", "all x.((SoundAbsorbed(x)) -> CannotReflectOffSurface(x))", "all x.((SoundAbsorbed(x) & SoundReflectsOffSurface(x)) -> CanTelefy(x))", "all x y.((Sound(x) & Absorbed(x)) -> SoundCannotReflectOffSurface(y))", "(AbsorbedSound(x) -> -ReflectsOffSurface(x))"]}
{"id": "entailmentbank_validation_923", "nl": "sound cannot reflect off the surface of a carpet.", "fol": "", "prediction": ["all x.((Sound(x) & -ReflectsOffCoror(x)) -> -ReflectsOff(x,y))", "all x.(NonReflectsOffCoatSurface(x) -> SoundCannotReflectOffCoatSurface(x))", "all x y.((Sound(x) & CarpetSurface(y)) -> -ReflectOffSurface(x,y))", "all x y.((Sound(x) & Carpet(y)) -> -ReflectsOffSurface(x,y))", "all x y.((Sound(x) & CarpetSurface(y)) -> CannotReflectOffSurface(x,y))", "all x y.((Sound(x) & Carpet(y)) -> -ReflectsOffSurface(x,y))", "all x y.((KitchenSurface(x) & Sound(y)) -> -ReflectsOff(x,y))", "all x.((Sound(x) & Carpet(x)) -> -SurfaceReflectsOf(x,y))", "all x.((Sound(x) & Carpet(y)) -> -ReflectsOffSurface(x,y))", "all x y.((Surface(x) & Carpet(y)) -> Sound-CannotReflectOff(x,y))", "all x.((Sound(x) & CarpetSurface(x)) -> -Reflect(x))", "all x y.((Sound(x) & Carpet(y)) -> -ReflectSurface(x,y))", "all x.(None(x) -> ReflectsOffCedar(x))", "all x.((Sound(x) & -ReflectOffMarbleSurface(x)) -> CannotBeReflectOff(x))", "all x y.((Sound(x) & Carpet(y)) -> -ReflectOffSurface(x,y))", "all x.((Sound(x) & Carpet(y)) -> -ReflectsOffSurface(x,y))"]}
{"id": "entailmentbank_validation_924", "nl": "echo is when sound reflects off a smooth surface.", "fol": "", "prediction": ["all x.(Echo(x) -> (SoundReflectsOffSmoothSurface(x)))", "all x.(Echo(x) -> ReflectsSoundOffSmoothSurface(x))", "all x.(Echo(x) -> ReflectsOffSmoothSurface(x))", "all x.(Echo(x) -> (ReflectsSoundOffSmoothSurface(x)))", "all x.(Echo(x) -> SoundReflectsOffSmoothSurface(x))", "all x.(Echo(x) -> ReflectsOnSmoothSurface(x))", "all x.(Echo(x) -> (Reflects(x) & SmoothSurface(x)))", "all x.(Echo(x) -> ReflectsOfSmoothSurface(x))", "all x.(Echo(x) -> ReflectsOffSmoothSurface(x))", "all x y.((Sound(x) & SmoothSurface(y)) -> ReflectsOff(x,y))", "all x.(Echo(x) -> ReflectsBySmoothSurface(x))", "all x.(Echo(x) -> SoundReflectsOffSmoothSurface(x))", "all x.(Echo(x) -> ReflectionsOffSmoothSurface(x))", "all x.(Echo(x) -> ReflectsSolidSurface(x))", "all x.(Echo(x) -> ReflectsOffSmoothSurface(x))", "all x.(Echo(x) -> (SoundReflectsOffSmoothSurface(x)))"]}
{"id": "entailmentbank_validation_925", "nl": "echo will not be produced.", "fol": "", "prediction": ["all x.(Echo(x) -> -Produced(x))", "(all x.(Echo(x) -> -Produced(x)))", "all x.(Echo(x) -> -Produced(x))", "all x.(Echo(x) -> -Produced(x))", "all x.(Echo(x) -> -Produced(x))", "all x.(Echo(x) -> -Produced(x))", ".(Echo(e) -> -Produced(e))", "all x.(Echo(x) -> -Produced(x))", "all x.(Echo(x) -> -Produced(x))", "none.", "all x.(Echo(x) -> -Produced(x))", "all x.(Echo(x) -> -Produced(x))", "all x y.((Echo(x) & Product(y)) -> -Produced(x,y))", "all x.(Echo(x) -> -Produced(x))", "no echo will be produced.", "all x.(Echo(x) -> -Produced(x))"]}
{"id": "entailmentbank_validation_926", "nl": "helium is less in density than air.", "fol": "", "prediction": ["all x.(Helium(x) -> LessInDensityThanAir(x))", "all x y.((Helium(x) & Air(y)) -> LessDensity(x,y))", "all x.(Helium(x) -> LessInDensityThanAir(x))", "all x y.((Helium(x) & Air(y)) -> LessInDensity(x,y))", "all x.(Helium(x) -> LessDensityThanAir(x))", "all x.(Helium(x) -> LessDensityLikeAir(x))", "all x.(Helium(x) -> LessInDensityThanAir(x))", "all x y.((Helium(x) & Air(y)) -> LessDensity(x,y))", "all x.(Helium(x) -> LessDensityThanAir(x))", "all x y.((Helium(x) & Air(y)) -> LessDensity(x,y))", "all x.(Holium(x) -> LessDensityThanAir(x))", "all x y.((Helium(x) & Air(y)) -> LessDensity(x,y))", "all x.(Helium(x) -> LessDensityThanAir(x))", "all x y.((Helium(x) & Air(y)) -> (LessDensity(x,y)))", "all x y.((Helium(x) & Air(y)) -> LessInDensity(x,y))", "all x y.((Helium(x) & Air(y)) -> -LikeliumDensity(x,y))"]}
{"id": "entailmentbank_validation_927", "nl": "a balloon is a kind of container.", "fol": "", "prediction": ["all x.(Balloon(x) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x y.((Balloon(x) & Container(y)) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "all x.(Balloon(x) -> Container(x))"]}
{"id": "entailmentbank_validation_928", "nl": "a balloon filled with helium is an example of a container contains a substance with less density than air.", "fol": "", "prediction": ["all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLessDensity(x))", "all x y.((Balloon(x) & FilletWithHelium(x) & Container(y)) -> ContainsLikelioseDensityThenAir(y))", "all x.((Balloon(x) & FilledWithHelium(x)) -> Container(x))", "all x y.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceLossDensityThanAir(y))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSweetDensityThanAir(x))", "all x y.((Balloon(x) & Helium(y) & FilledWith(x,y)) -> ContainerWithLowerDensityThanAir(x))", "all x y.((Balloon(x) & FilledWithHelium(x)) -> (Container(y) & ContainsLowerDensity(y,x)))", "all x y.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsFewerDensityThanAir(x,y))", "all x.((Balloon(x) & FilletedWithHelium(x)) -> ContainerContainsLessDensityThanAir(x))", "all x y.((Balloon(x) & FilledWithHelium(x) & Container(y) & ContainsSubstanceWithLessDensityThanAir(y)) -> Container(y,x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLessDensityThanAir(x))", "all x y.((Balloon(x) & FilledWithHelium(x)) -> Container(y))", "all x y.((Balloon(x) & FilledWithHelium(x) & Container(y) & SubstanceLowerDensity(y,x)) -> ContainsLossDensity(y,x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainsSubstanceWithLessDensityThanAir(x))", "all x.(BalloonFilledWithHelium(x) -> ContainerContainsSubstanceWithLessDensityThanAir(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLessDensityThanAir(x))"]}
{"id": "entailmentbank_validation_929", "nl": "if a container contains a substance with less density than air then that container may move upward.", "fol": "", "prediction": ["all x.((Container(x) & ContainsSubstanceWithLessDensityThanAir(x)) -> MayMoveUpward(x))", "all x y.((Container(x) & ContainsSubstance(x,y) & LessDensityThanAir(y)) -> MayMoveUpward(x))", "all x y.((Container(x) & Container(y) & Contains(x,y) & lessDensityThanAir(x)) -> MayMoveUpward(x,y))", "all x.((Container(x) & ContainsSubstanceWithLossDensity(x)) -> CanMoveUpward(x))", "all x y.((Container(x) & ContainsSubstance(x,y) & LowerDensityOfAir(x)) -> MayMoveAhead(x))", "all x y z.((Container(x) & Substance(y) & Content(z) & Contains(x,y,z)) -> MayMoveUpward(x))", "all x y.((Container(x) & Substance(y) & LessDensityThanAir(y)) -> MovedUpward(x))", "all x.((Container(x) & ContainsSubstance(x) & LeanerDensityThanAir(x)) -> MayMoveUpward(x))", "all x.((Container(x) & ContainsSubstanceWithLessDensityThanAir(x)) -> MayMoveUpward(x))", "all x.((Container(x) & ContainsSubstanceWithLessDensityThanAir(x)) -> PotenciesUpwardMovement(x))", "all x.(LowerDensitySubstance(x) -> MayMoveUpward(x))", "all x y.((Container(x) & Material(y) & DensityYouLessThanAir(y)) -> MayMoveUpward(x,y))", "all x.((Container(x) & ContainsSubstanceWithLowerDensityThanAir(x)) -> MayMoveUpward(x))", "all x.(Container(x) -> (ContainsSubstance(x,air) & LessDensity(x,air)))", "all x y.((Container(x) & Substance(y) & MuchLessDensityThanAir(y)) -> MayMoveUpward(x,y))", "all x.((Container(x) & ContainsSubstance(x) & -DensityOffAir(x)) -> MayMoveUpward(x))"]}
{"id": "entailmentbank_validation_930", "nl": "the balloon filled with helium may move upward if released.", "fol": "", "prediction": ["all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))", "all x y.((Balloon(x) & FilledWithHelium(x) & Freed(y)) -> MayMoveUpward(x))", "all x y.((Balloon(x) & Helium(y) & Served(x,y)) -> MovesUpward(x))", "all x.((Balloon(x) & Felt(x,Helium)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpwardSinceReleased(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FlownWithHelium(x)) -> MayMoveUpward(x))", "all x.((BalloonFilledWithHelium(x) & Released(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MovesUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))", "all x y.((Balloon(x) & FilledWithHylium(x) & Released(x)) -> MayMoveUpward(x,y))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MAYMoveUpward(x))"]}
{"id": "entailmentbank_validation_931", "nl": "a white object reflects all visible light.", "fol": "", "prediction": ["all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))"]}
{"id": "entailmentbank_validation_932", "nl": "the floor is a kind of object.", "fol": "", "prediction": ["all x.(Floor(x) -> Object(x))", "all x.(Floor(x) -> Object(x))", "all x.(Floor(x) -> Object(x))", "all x.(Floor(x) -> Object(x))", "all x.(Floor(x) -> Object(x))", "all x.(Floor(x) -> Object(x))", "all x.(Floor(x) -> (Object(x) & Object(x)))", "all x.(Floor(x) -> ArtOfObject(x))", "all x.(Floor(x) -> Object(x))", "all x.(Floor(x) -> Object(x))", "all x.(Floor(x) -> Object(x))", "all x y.((Floor(x) & Floor(y)) -> Obscious(x,y))", "all x.(Floor(x) -> Object(x))", "all x.(Floor(x) -> Object(x))", "all x.(Floor(x) -> SpeciesOfObject(x))", "all x y.((Floor(x) & Object(y)) -> Object(x,y))"]}
{"id": "entailmentbank_validation_933", "nl": "a white door will reflect all visible light.", "fol": "", "prediction": ["all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsAllVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x (WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsAllVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))"]}
{"id": "entailmentbank_validation_934", "nl": "the ice melts.", "fol": "", "prediction": ["all x.exists y.(Ice(x) & Ice(y) & Melts(x,y))", "all x.(Ice(x) -> Melts(x))", "all x.(Ice(x) -> Melts(x))", "all x.(Ice(x) -> Melts(x))", "all x y.((Ice(x) & Ice(y)) -> Melts(x,y))", "all x.(Ice(x) -> Melts(x))", "all x.(Ice(x) -> Melts(x))", "all x y.((Ice(x) & Ice(y)) -> Melts(x,y))", "all x.(Ice(x) -> Melts(x))", "all x.(Ice(x) -> Melts(x))", "all x.(Ice(x) -> Melts(x))", "all x y.((Ice(x) & Ice(y)) -> Melts(x,y))", "all x.(Ice(x) -> Melts(x))", "all x.((Ice(x) & Melts(x)) -> IceMelts(x))", "all x.(Ice(x) -> Melts(x))", "all x.(Ice(x) -> Melts(x))"]}
{"id": "entailmentbank_validation_935", "nl": "melting is a kind of phase change.", "fol": "", "prediction": ["all x.(Melting(x) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "all.(Melting(x) -> PhaseChange(x))", "all x.(Melting(x) -> There's a PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "all x.((Melting(x) & PhaseChange(x)) -> Shape(x))", "(SmeltingPartOfPhaseChange(Melting,PhaseChange))", "all x.(Melting(x) -> PhaseChange(x))"]}
{"id": "entailmentbank_validation_936", "nl": "the ice undergoes a phase change.", "fol": "", "prediction": ["all x2.(Ice(x) -> PhaseChange(x))", "all x.(Ice(x) -> UndergoesPhaseChange(x))", "all x.(Ice(x) -> PhaseChange(x))", "all x.(Ice(x) -> UndergoesPhaseChange(x))", "all x.(Ice(x) -> UndergoesPhaseChange(x))", "all x.(Ice(x) -> UndergoesPhaseChange(x))", "all x.(Ice(x) -> PhaseChange(x))", "all x y.((Ice(x) & PhaseChange(y)) -> Undergoes(x,y))", "all x.(Ice(x) -> UndergoesPhaseChange(x))", "all x.(Ice(x) -> UndergoesPhaseChange(x))", "all x.(Ice(x) -> UndergoesPhaseChange(x))", "all x.(Ice(x) -> UndergoesPhaseChange(x))", "all x.(Ice(x) -> UndergoesPhaseChange(x))", "all x y.((Ice(x) & PhaseChange(y)) -> Undergoes(x,y))", "all x.(Ice(x) -> UndergoesPhaseChange(x))", "all x.(Ice(x) -> UndergoesPhaseChange(x))"]}
{"id": "entailmentbank_validation_937", "nl": "phase changes do not change mass.", "fol": "", "prediction": ["all x.(PhaseChange(x) -> -ChangeMass(x))", "all x.(PhaseChange(x) -> -ChangeMass(x))", "all x.(CourseChange(x) -> -CausesMass(x))", "all x.(LanguageChange(x) -> NoMassChange(x))", "all x.(PhaseChange(x) -> -ChangeMass(x))", "all x.(PhaseChange(x) -> -ChangsMass(x))", "all x.(PhaseChange(x) -> -ChangsMass(x))", "all x.(PhaseChange(x) -> -ChangsMass(x))", "all x.(PhaseChange(x) -> -ChangeMass(x))", "all x.(PhaseChange(x) -> -ChangeMass(x))", "all x.(PhaseChange(x) -> -ChangeMass(x))", "all x.(ProphaseChange(x) -> -ChangeMass(x))", "all x.((PhaseChange(x) & -(ChangeMass(x)))) -> -ChangeMass(x))", "all x.(PhaseChange(x) -> -ChangeMass(x))", "all x.(PhaseChange(x) -> -ChangeMass(x))", "all x.(PhaseChange(x) -> -ChangeMass(x))"]}
{"id": "entailmentbank_validation_938", "nl": "the mass of the ice will not change.", "fol": "", "prediction": ["all x.(IceMass(x) -> -Change(x))", "all x.(Ice(x) -> -MassChange(x))", "all x.(IceMass(x) -> -Change(x))", "all x.(IceMass(x) -> -Changing(x))", "all x.(IceMasth(x) -> -Change(x))", "all x.(Ice(x) -> MassChange(x))", "all x y.((Ice(x) & Mass(y) & Mass(y,x)) -> -Changes(x))", "all x.(Ice(x) -> -ChangeMass(x))", "all x.(IceMass(x) -> -ChangeMass(x))", "all x.(Ice(x) -> -MassChange(x))", "all x.(IceMass(x) & -ChangeMass(x))", "all x.(Ice(x) -> -ChangeMass(e))", "(Mass(ice) & -ChangeMass(ice))", "all x.(IceMass(x) -> -ChangesMass(x))", "all x.(IceMass(x) -> -KillsMass(x))", "all x.(IceMass(x) -> -Change(x))"]}
{"id": "entailmentbank_validation_939", "nl": "a bubble is made of pockets of gas trapped inside a liquid or solid.", "fol": "", "prediction": ["all x.(Blowball(x) -> (PotsOfGas(x) & EmbractedInLiquidOrSolid(x)))", "all x.(Blowout(x) -> (MadeOfPotsOfGas(x) & ContainsLiquidOrSolid(x)))", "all x y.((Bubble(x) & (Liquid(y) | Solid(y))) -> MadeOfPotsOfGasCapturedInside(x,y))", "all x.(Bubble(x) -> (CrackedByPotsOfGas(x) & (BreakOutInLiquid(x) | BreakOutInSolid(x))))", "all x y.((Bubble(x) & PouchOfGas(y) & (Liquid(y) | Solid(y))) -> MadeOf(x,y))", "all x.(Babble(x) -> (PocketsOfGasCapturedInLiquidOrSolid(x)))", "all x.(Bubble(x) -> (PouchOfGas(x) & CatchedInsideLiquidOrSolid(x)))", "all x.(Balloon(x) -> (PotsOfGas(x) & IntoLiquidOrSolid(x)))", "all x.(Balloon(x) -> exists y.(PotsOfGas(y) & ChastenedIn(x,y)))", "all x.(Blowhole(x) -> (MadeOfPotsOfGas(x) & LocatedInLiquidOrSolid(x)))", "all x.(Bubble(x) -> exists y z.(Pot(y) & Pouch(z) & TearsOffIn(x,y,z) & (Liquid(y) | Solid(z)))))", "all x.(Bubble(x) -> (PotsOfGas(x) & CaughtInLiquidOrSolid(x)))", "all x.(Bubbly(x) -> UsuallyMadeOfPotsOfGasCausedInLiquidOrSolid(x))", "all x.(Blower(x) -> exists y.(PocketOfGas(y) & CausedIn(y,x,liquid,solid))))", "all x.(Bubble(x) -> (PotsOfGas(x) & LocatedInLiquidOrSolid(x)))", "all x.(Bubble(x) -> exists y z.(Pot(y,z) & Pouch(y,z))))"]}
{"id": "entailmentbank_validation_940", "nl": "soap bubbles are made of air trapped inside soap liquid.", "fol": "", "prediction": ["all x.(SoapBlowup(x) -> AirHoldingInSoapLiquid(x))", "all x.(SoapBubble(x) -> (MadeOfAir(x) & PrisonedInSoapLiquid(x)))", "all x y.((SoapBoom(x) & Air(y)) -> MadeOf(x,y))", "all x.(SoapBall(x) -> MadeOfAir(x))", "all x.(SoapBolt(x) -> MadeOfAirPocketedInSheathering(x))", "all x.(SoapBlowout(x) -> (MadeOfAirCapturedInSoapLiquid(x)))", "all x.(SoapBaby(x) -> (MadeOfAirPlashedInSoapLiquid(x)))", "all x.(SoapBlast(x) -> MadeOfAirCausedInSoapLiquid(x))", "all x y.((SoapBall(x) & SoapLiquid(y)) -> (AirPackedInside(x,y)))", "all x.(SoapBall(x) -> (HotAir(y) & StoredInSoapLiquid(x,y)))", "all x.(SoapBall(x) -> (MadeOfAirCaughtInSoapLiquid(x) & MadeOfAir(x)))", "all x.(SoapBliss(x) -> (madeOfAirCapturedInSoapLiquid(x) & MadeOfAirFoundInSoapLiquid(x)))", "all x.(SoapBubble(x) -> MadeOf(x,Air))", "all x.(SoapBaby(x) -> (AirCaughtIn(x,SoapLiquid) & MadeOf(x,SoapLiquid)))", "all x.(SoapBubble(x) -> MadeOfAirCapturedInSoapLiquid(x))", "all x.(SoapBall(x) -> MadeOfPaint(x,Air))"]}
{"id": "entailmentbank_validation_941", "nl": "air is inside the soap bubbles.", "fol": "", "prediction": ["all x.(Air(x) -> InsideSoapBullets(x))", "all x.(ShampooBubble(x) -> Inside(x))", "all x y.((Air(x) & SoapBalloon(y)) -> Inside(x,y))", "all x y.((SoapBubble(x) & SoapBubble(y)) -> Insides(x,y))", "all x y.(SoapBubble(x) & Air(y)) -> Inside(x,y))", "all x y.((Air(x) & SoapBubble(y)) -> Inside(x,y))", "all x y.((SoapBalloon(x) & Air(y)) -> Inside(x,y))", "all x.(Air(x) -> InsideSoapBolts(x))", "all x y.((SoapBalloon(x) & Clean(y)) -> Inside(x,y))", "all x.(ShampooBlast(x) -> AirInside(x))", "exists x.(SoapBalloon(x,y) & Inside(y,x))", "all x.(AirInsideSoapBullets(x) -> SoapBalloons(x))", "all x.(Air(x) -> InsideSoapBalls(x))", "all x.(SoapBalloon(x) -> AirInside(x))", "all x.(SoapBalloon(x) -> Inside(x,SoapBalloon))", "all x y.((SoapBalloon(x) & SoapBubble(y)) -> Inside(x,y))"]}
{"id": "entailmentbank_validation_942", "nl": "matter in the liquid phase has definite volume and variable shape.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> (ContainsDefiniteVolume(x) & HasVariableShape(x)))", "all x.(LiquidPhase(x) -> (DefinitiveVolume(x) & VariableShape(x)))", "all x.(LiquidPhase(x) -> (DefinedVolume(x) & VariableShape(x)))", "all x.(LiquidPhase(x) -> (DefiniteVolume(x) & VariableShape(x)))", "all x.(LiquidPhase(x) -> (DefiniteVolume(x) & VariableShape(x)))", "all x.(LiquidPhase(x) -> (DefiniteVolume(x) & VariableShape(x)))", "all x.(LiquidPhase(x) -> (DefentialVolume(x) & VaryingShape(x)))", "all x.((Matter(x) & Liquid(x)) -> (DefiniteVolume(x) & VariableShape(x)))", "all x.((MatterInLiquidPhase(x) & DefiniteVolume(x) & VariableShape(x)) -> DefiniteVolumeAndVeganShape(x))", "all x.((MatterInLiquidPhase(x)) -> (DefiniteVolume(x) & VariableShape(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & VariableShape(x,y)))", "all x.(LiquidPhase(x) -> (Legacy(x) | VariableShape(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (DefinedVolume(x) & VariableShape(x)))", "all x.((MatterInLiquidPhase(x) & InLiquidPhase(x)) -> (DefiniteVolume(x) & VariableShape(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & VariableShape(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & VariableShape(x,y)))"]}
{"id": "entailmentbank_validation_943", "nl": "indefinite means variable.", "fol": "", "prediction": ["all x.(IndefiniteMeanVariable(x) -> Variable(x))", "all x.(IndefiniteMean(x) -> Variable(x))", "all x.(IndefiniteMeanVariable(x) -> Variable(x))", "all x.(IndefiniteMean(x) -> Variable(x))", "all x.(Indefinite MeansVariable(x) -> IndefiniteMeanVariable(x))", "all x.(IndefiniteMean(x) -> Variable(x))", "all x.((Verboiler(x) & Indefinite(x)) -> Variable(x))", "all x.(IndefiniteMean(x) -> Variable(x))", "all x.(IndefiniteMeansVerboiler(x) -> Variable(x))", "all x.(IndefiniteMeanVariable(x) -> IndefiniteVariable(x))", "all x.(IndefiniteMeans(x) | Variable(x))", "all x.(IndefiniteVariable(x) -> Variable(x))", "all x.(IndefiniteMediumVariable(x) -> IndefinitelyMeansVariable(x))", "all x y.((IndefiniteMeanValue(x) & IndefiniteMean(y)) -> Variable(x,y))", "all x.(IndefiniteMeansVariable(x) -> Indefinite(x))", "all x.(IndefiniteMeans(x) -> Variable(x))"]}
{"id": "entailmentbank_validation_944", "nl": "matter in the liquid phase has definite volume and indefinite shape.", "fol": "", "prediction": ["all x.(LiquidPhase(x) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.(AliliquidPhase(x) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.(LiquidPhaseMatter(x) -> (HasDefiniteVolume(x) & HasInfiniteShape(x)))", "all x.((MatterInLiquidPhase(x) & DefiniteVolume(x) & DefiniteShape(x)) -> DefiniteShape(x))", "all x.((MatterInLiquidPhase) & DefiniteVolume(x) & DefiniteShape(x)) -> HasDefinedShape(x))", "all x.((Matter(x) & LiquidPhase(x)) -> (HasDefiniteVolume(x) & HasIndefiniteShape(x)))", "all x.(LiquidPhase(x) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & IndefiniteShape(x,y)))", "all x.((Matter(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((Matter(x) & InLiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.(LiquidPhase(x) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (DefinitiveVolume(x) & IndefiniteShape(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.(LiquidPhase(x) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (ConfidentVolume(x) & IndefiniteShape(x)))"]}
{"id": "entailmentbank_validation_945", "nl": "substances are made of matter.", "fol": "", "prediction": ["all x.(Substance(x) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x y.((Substance(x) & Matter(y)) -> MadeOf(x,y))", "all x.(Substance(x) -> MadeOfMatter(x))"]}
{"id": "entailmentbank_validation_946", "nl": "a compound is a kind of substance.", "fol": "", "prediction": ["all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> -Substance(x))", "all x y.((Compound(x) & Substance(y)) -> Type(x,y))", "all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> ArtOfSubstance(x))", "all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> Material(x))"]}
{"id": "entailmentbank_validation_947", "nl": "a compound is made of matter.", "fol": "", "prediction": ["all x.(Compound(x) -> MadeOfMatter(x))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x.(Compound(x) -> MakesOfMatter(x))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x.(Compound(x) -> MadeOfMatter(x))"]}
{"id": "entailmentbank_validation_948", "nl": "a compound in the liquid phase has definite volume and indefinite shape.", "fol": "", "prediction": ["all x.((Compound(x) & inLiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((Compound(x) & InLiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x y.((Compound(x) & LiquidPhase(y)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.(Compound(x) -> (EndsLiquidPhase(x) & DefiniteVolume(x) & IndefiniteShape(x)))", "all x.(Plastic(x) -> (DefiniteVolume(x) & NonDefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (DefinedVolume(x) & IndefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.(Compound(x) -> (HasDefiniteVolume(x) & HasIndefiniteShape(x)))", "all x y.((Compound(x) & LiquidPhase(y) & InLiquidPhase(x,y)) -> (HasDefinedVolume(x) & HasIndefiniteShape(x)))", "all x y.((Compound(x) & LiquidPhase(y)) -> (DefiniteVolume(x) & IndefiniteShape(x)))"]}
{"id": "entailmentbank_validation_949", "nl": "water is in the solid state, called ice.", "fol": "", "prediction": ["all x.(Water(x) -> SolidState(x))", "all x.(Water(x) -> SolidStateChemical(x))", "all x.(Water(x) -> SolidState(x))", "all x.(Water(x) -> (SolidState(x) & Ice(x)))", "all x.(Water(x) -> SolidState(x))", "all x.(Water(x) -> SolidState(x,ice))", "all x.(Water(x) -> SolidState(x))", "all x.(Water(x) -> SolidState(x))", "all x.(Water(x) -> (SolidState(x) & Ice(x)))", "all x.(Water(x) -> SolidState(x))", "all x.(Water(x) -> SolidState(x))", "all x.(Water(x) -> Solid(x))", "all x.(Water(x) -> SolidState(x))", "all x.(Water(x) -> SolidState(x))", "all x.(Water(x) -> SolidState(x))", "all x.(Water(x) -> SolidState(x))"]}
{"id": "entailmentbank_validation_950", "nl": "hail is a kind of ice.", "fol": "", "prediction": ["all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> KindOfIce(x))", "all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Icy(x))", "((Hail(h) & Ice(i)))", "all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Ice(x))"]}
{"id": "entailmentbank_validation_951", "nl": "hail is water in solid ice.", "fol": "", "prediction": ["all x.(Hail(x) -> Water(x))", "all x.(Hail(x) -> WaterInSolidIce(x))", "all x.(Hail(x) -> WaterInSolidIce(x))", "all x.(Hail(x) -> WaterInSolidIce(x))", "all x.(Hail(x) -> WaterInSolidIce(x))", "all x y z.((Hail(x) & SolidIce(y) & Water(z)) -> In(x,y,z))", "all x.(Hail(x) -> Water(x))", "all x.(Hail(x) -> WaterInSolidIce(x))", "all x.(Hail(x) -> WaterInSolidIce(x))", "all x.(Hail(x) -> WaterInSolidIce(x))", "all x.(Hail(x) -> WaterInSolidIce(x))", "all x.(Hail(x) -> WaterInSolidIce(x))", "all x.(Hail(x) -> WaterInSolidIce(x))", "all x.(Hail(x) -> Water(x))", "all x.(Hair(x) -> WaterInSolidIce(x))", "all x y.((Hail(x) & SolidIce(y)) -> WaterInIce(x,y))"]}
{"id": "entailmentbank_validation_952", "nl": "an airplane is used for moving people to far away places.", "fol": "", "prediction": ["all x y.((Airplane(x) & Person(y) & FarAwayPlace(z)) -> MovesTo(x,y,z))", "all x.(Airplane(x) -> MovesToFarAwayPlaces(x))", "all x.(Airplane(x) -> MovesPeopleToFarAwayPlaces(x))", "all x y.((Airplane(x) & Person(y)) -> UsedForMovingToFarAwayPlaces(x))", "all x.(Airplane(x) -> UsedForMovingPeopleToFarAwayPlaces(x))", "all x y.((Airplane(x) & Person(y)) -> MovesToFarAwayPlaces(x,y))", "all x.(Airplane(x) -> ForMovingPeopleToFarAwayPlaces(x))", "all x.(Airplane(x) -> UsedForMovingToFarAwayPlaces(x))", "all x.(Airplane(x) -> (MovesToFarAwayPlaces(x) & People(y) & FarAwayPlaces(z) & FarAwayPlaces(x,z)))", "all x.(Airplane(x) -> MovesToFarAwayPlaces(x))", "all x.(Airplane(x) -> MovesUsedToFarAwayPlaces(x))", "all x.(Airplane(x) -> (MovesToFarAwayPlaces(x) & MovesToFarAwayPlaces(x)))", "all x y.((Airplane(x) & Person(y) & FarAwayPlace(y)) -> MovesTo(x,y))", "all x.(Airplane(x) -> UsedForMovingPeopleToFarAwayPlaces(x))", "all x.(Airplane(x) -> MeasuringPersonToFarAwayPlaces(x))", "all x y z.((Airplane(x) & Person(y) & Place(z)) -> UsedForMovingTo(x,y,z))"]}
{"id": "entailmentbank_validation_953", "nl": "an airplane is fast in speed.", "fol": "", "prediction": ["all x.(Airplane(x) -> FastSpeed(x))", "all x y.((Airplane(x) & Airplane(y)) -> FastSpeed(x,y))", "all x.(Airplane(x) -> FastSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))"]}
{"id": "entailmentbank_validation_954", "nl": "an airplane can move people to far away places quickly.", "fol": "", "prediction": ["all x y.((Airplane(x) & Person(y)) -> MoveToFarAwayPlacesQuickly(x))", "all x.(Airplane(x) -> CanMovePeopleToFarAwayPlacesQuickly(x))", "all x y.((Airplane(x) & Person(y)) -> MovesToFarAwayPlaces(x,y))", "all x y.((Airplane(x) & Person(y)) -> MovesToFarAwayPlacesQuickly(x,y))", "all x y z.((Airplane(x) & Person(y) & Place(z)) -> CanMoveTo(x,y,z))", "all x.(Airplane(x) -> MovesPeopleToFarAwayPlacesQuickly(x))", "all x y z.((Airplane(x) & Person(y) & Place(z)) -> CanMove(x,y,z))", "all x y.((Airplane(x) & Person(y)) -> MovesToFarAwayPlaces(x,y))", "all x y.((Airplane(x) & Person(y)) -> MovesQuickly(x,y))", "all x y.((Airplane(x) & Person(y)) -> MovesToTallAwayPlacesQuickly(x,y))", "all x.(Airplane(x) -> CanMoveToFarAwayPlacesQuickly(x))", "all x.(Airplane(x) -> MovesPeopleQuickly(x))", "all x y.((Airplane(x) & Person(y)) -> MovesToFarAwayPlacesQuickly(x,y))", "all x.(Airplane(x) -> CanMoveToFarAwayPlacesQuickly(x))", "all x y.((Airplane(x) & Person(y)) -> MovesToFastAwayPlaces(x,y))", "all x y z.((Airplane(x) & Person(y) & Place(z)) -> MovesToProximity(x,y,z))"]}
{"id": "entailmentbank_validation_955", "nl": "a cake is a kind of baked product.", "fol": "", "prediction": ["all x.(Cake(x) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x y.((Cake(x) & BakedProduct(y)) -> Baked(x,y))", "all x.(Cake(x) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))"]}
{"id": "entailmentbank_validation_956", "nl": "baking is when a human makes food by adding heat.", "fol": "", "prediction": ["all x y.((Human(x) & Heat(y)) -> MakesFoodByAdditing(x,y))", "all x.(Baking(x) -> (Human(x) & MakesFoodByAdditiveHeat(x)))", "all x.((Human(x) & MakesFoodByAdditingHeat(x)) -> Bakes(x))", "all x y.((Human(x) & Food(y) & Creates(x,y)) -> AddsHeat(x))", "all x.(Baking(x) -> (HumanMakesFood(x) & AddsHeatToFood(x)))", "all x.(Baking(x) -> (HumanMakingFoodByAddivingHeat(x)))", "all x y.((Human(x) & Food(y)) -> MakesByAdditingHeat(x,y))", "all x.(Baking(x) -> (HumanMakesFood(x) & AddsHeat(x)))", "all x y.((Human(x) & Food(y) & AddsHeat(x,y)) -> Bakes(x))", "all x y.((Human(x) & Food(y) & AddsHeat(x,y)) -> Bakes(x,y))", "all x y.((Human(x) & Hot(y)) -> MakesFood(x,y))", "all x.(Baking(x) -> (Human(x) & MakesFoodByAdditingHeat(x)))", "all x.((Human(x) & MakesFoodByAdditioningHeat(x)) -> BakeDining(x))", "all x y.((Human(x) & Heat(y) & MakesFood(x,y)) -> Bakes(x))", "all x y.((Human(x) & Cooks(x,y)) -> AddsHeat(x))", "all x y.((Human(x) & Food(y) & AddsHeat(x,y)) -> Baked(x))"]}
{"id": "entailmentbank_validation_957", "nl": "a cake is a product made by human adding heat to it.", "fol": "", "prediction": ["all x.(Cloud(x) -> (MadeByHumans(x) & AddsHeatTo(x)))", "all x.(Cake(x) -> (UsemadeByHuman(x) & AddsHeat(x)))", "all x.(Cake(x) -> (MadeByHuman(x) & AddsHeat(x)))", "all x.(Cake(x) -> (HumanPurpose(x) & AddsHeat(x)))", "all x.(Cake(x) -> exists y.(Human(y) & AddsHeat(x,y))))", "all x.(Cake(x) -> HumanAddsHeat(x))", "all x.(Cake(x) -> AddsHeatTo(x))", "all x y.((Cake(x) & Human(y)) -> AddsHeat(x,y))", "all x.(Cake(x) -> HumanAddedHeat(x))", "all x y.((Cake(x) & Human(y)) -> AddsHeat(x,y))", "all x y.((Cake(x) & Human(y)) -> AddsHeatTo(x,y))", "all x.(Cake(x) -> (Product(x) & HumanAddsHeat(x)))", "all x.(Cake(x) -> MadeByHumanAddingHeat(x))", "all x.(Cake(x) -> (Human(x) & AddsHeatTo(x)))", "all x y.((Cake(x) & Human(y)) -> MadeByAddingHeat(x,y))", "all x.(Cake(x) -> (HumanAddingHeatTo(x) & Product(x)))"]}
{"id": "entailmentbank_validation_958", "nl": "transportation technology is a kind of system for moving people and products.", "fol": "", "prediction": ["all x y z.((TransportationTechnology(x) & Person(y) & Products(z)) -> MovesIn(x,y,z))", "all x.(TransportationTechnology(x) -> (MovingPeople(x) & MovingProducts(x)))", "all x.(TransportationTechnology(x) -> MovingPeopleAndProducts(x))", "all x.(TransportationTechnology(x) -> (MovingPeople(x) & MovingProducts(x)))", "all x.(TransportationTechnology(x) -> (movingPeople(x) & MovingProducts(x)))", "all x.(TransportationTechnology(x) -> (MovingPeople(x) & MovingProducts(x)))", "all x.(TransportationTechnology(x) -> (SystemForMovingPeopleAndProducts(x) & -MovingProducts(x)))", "all x.(TransportationTechnology(x) -> (MovingPeople(x) & MovingProducts(x)))", "all x.(TransportationTechnology(x) -> (SystemForMoving(x) & ForMovingPeopleAndProducts(x)))", "all x.(TransportationTechnology(x) -> (MovingPeopleAndProducts(x) & MovingSomething(x)))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> Moves(x,y))", "all x.(Transportation(x) -> (FlowsPerson(x) & MovesProducts(x)))", "all x.(TransportationTechnology(x) -> (Syst\u00e8me(x) & ForMoveringPeople(x) & ForMoveringProducts(x)))", "all x.(TransportationTechnology(x) -> (MovingPeople(x) & MovingProducts(x)))", "all x.(TransportationTechnology(x) -> (ForMovingPeople(x) & ForMovingProducts(x)))", "all x.(TransportationTechnology(x) -> (MovingPersons(x) & MovingProducts(x)))"]}
{"id": "entailmentbank_validation_959", "nl": "transportation technology is used for moving people / products.", "fol": "", "prediction": ["all x.(TransportationTechnology(x) -> UsedForMovingPeopleAndProducts(x))", "all x.(TransportationTechnology(x) -> UsedForMovingPeopleOrProducts(x))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> UsedForMoving(x,y))", "all x.(TransportationTechnology(x) -> MovesPeopleAndProducts(x))", "all x y.((TransportationTechnology(x) & Person(y)) -> UsedForMoving(x,y))", "all x.(TransportationTechnology(x) -> (ExpandsPeople(x) | PromotesProducts(x)))", "all x.(TransportationTechnology(x) -> (MovingPeople(x) | MovingProducts(x)))", "all x.(TransportationTechnology(x) -> (MovingPeople(x) | MovingProducts(x)))", "all x.(TransportationTechnologie(x) -> (Moving(x,People) & Moving(x,Products)))", "all x.((TransportationTechnology(x) & MovesPeopleOrProducts(x)) -> UsedFor(x,m,m,y))", "all x y.((TransportationTechnology(x) & Person(y)) -> UsedForMoving(x,y))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> UsedForMovement(x,y))", "all x y.((TransportationTechnology(x) & (Person(y) | Product(y))) -> UsedFor(x,y))", "all x y.((TransportationTechnology(x) & Person(y)) -> UsedForMovement(x,y))", "all x.(TransportationTechnique(x) -> (Moving(x,people) & Moving(x,products)))", "all x y.((TransportationTechnology(x) & People(y) & Product(y)) -> UsedForMoving(x,y))"]}
{"id": "entailmentbank_validation_960", "nl": "transportation technology is a system that moves people and products.", "fol": "", "prediction": ["all x.(TransportationTechnology(x) -> (SystemToMove(x) & MovesPeople(x) & MovesProducts(x)))", "all x.(TransportationTechnology(x) -> MovesPeopleAndProducts(x))", "all x.(TransportationTechnology(x) -> (MovesPeopleAndProducts(x) & MovesProducts(x)))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x.(TransportationTechnology(x) -> (Network(x) & MovesPeopleAndProducts(x)))", "all x.(TransportationTechnology(x) -> (System(x) & MovesPeople(x) & MovesProducts(x)))", "all x.(TransportationTechnology(x) -> (MovesPeopleAndProducts(x) & MovesPersonAndProducts(x)))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> Moves(x,y))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x.(TransportationTechnology(x) -> MovesPeopleAndProducts(x))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> Moves(x,y))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x.(TransportationTechnology(x) -> (MovesPersons(x) & MovesProducts(x)))"]}
{"id": "entailmentbank_validation_961", "nl": "a refrigerator is used for keeping food fresh for a long period of time.", "fol": "", "prediction": ["all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriod(x)))", "exists x.(Refrigerator(x) & UsedForKeepingFreshHomeFood(x) & LongPeriodOfTime(x))", "all x.(Refrigerator(x) -> (MaintainsFoodFresh(x) & LongPeriodOfTime(x)))", "all x y.((Refrigerator(x) & LongPeriodOfTime(y)) -> (KeepsFoodFresh(x,y) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> KeepsFoodFresh(x))", "all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x y.((Refrigerator(x) & Food(y)) -> (KeepsFreshFood(x,y) & LongPeriod(x)))", "all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> StoresFoodFresh(x))", "all x.(Refrigerator(x) -> UsedForKeepingFoodFreshForLongPeriod(x))", "all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x y.((Refrigerator(x) & Food(y)) -> (KeepsFreshForLongPeriod(x,y) & LongPeriodOfTime(y)))", "all x.(Refrigerator(x) -> (MaintainsFoodFresh(x) & LongPeriod(x)))", "all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Rafficher(x) -> (KeepingFoodFresh(x) & LongPeriodOfTime(x)))", "all x y.((Refrigerator(x) & Food(y)) -> UsesForKeepingFreshForLongPeriod(x,y))"]}
{"id": "entailmentbank_validation_962", "nl": "the invention of the refrigerator with self-contained unit occurred in 1923.", "fol": "", "prediction": ["1923 /InventsRefrigerator(x,Refrigerator,SelfContainedUnit)", "-inventionOfRefrigeratorWithSelfContainedUnit(1923)", "all x.((Inventory(x) & Refrigerator(x) & SelfContainedUnit(x)) -> OccurredIn1923(x))", "invents(r) & Refrigerator(r) & SelfContainedUnit(r) & HappenedIn1923(r))", "all x y.((Refrigerator(x) & SelfContainedUnit(y)) -> Invention(x,y))", "all x.((Refrigerator(x) & SelfContainedUnit(x)) -> Coincidence1923(x))", "all x.((Regiver(x) & SelfContainedUnit(x)) -> Invention(x,1923))", "Invention ofRefrigeratorWithSelfContainedUnit(Failure,1923)", "all x y.((Refrigerator(x) & SelfContainedUnit(y)) -> IncovedIn 1923(x))", "inventsrefrigeratorwithselfContainedUnit(x,1923)", "the invention of the refrigerator with self-containedUnit(i) occurred in 1923(i))", "the invention (conducts(Refrigerator,1923) & SelfContainedUnit(Refrigerator))", "the invention of refrigerator with self-containedUnitFocusedIn1923.", "InventoryOfRefrigeratorWithSelfContainedUnit(1923)", "invented by inventor(i) & SelfContainedUnit(i,i))", "all x.((Refrigerator(x) & SelfContainedUnit(x)) -> Invention(x))"]}
{"id": "entailmentbank_validation_963", "nl": "refrigerator is the invention that can keep food fresh for a long period of time.", "fol": "", "prediction": ["all x.(Refrigerator(x) -> (Inventive(x) & CanKeepFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> (Ideation(x) & KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> (Invention(x) & KeepsFoodFreshForLongPeriod(x)))", "all x y z.((Refrigerator(x) & Food(y) & LongPeriod(z)) -> IsInvention(x,z))", "all x.(Refrigerator(x) -> (Invention(x) & KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> (Invention(x) & CanKeepFoodFresh(x) & LongPeriodOfTime(x)))", "all x y.((Refrigerator(x) & Food(y) & LongPeriodOfTime(z)) -> CanKeepFresh(x,y,z))", "all x y.((Refrigerator(x) & Food(y)) -> KeepsFreshForLongPeriodOfTime(x,y))", "all x y z.((Freezer(x) & Food(y) & PeriodOf(z)) -> KeepsFreshForLongPeriod(x,y))", "all x.(Refrigerator(x) -> (Invention(x) & KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> (GatherFoodFresh(x) & LongPeriodOfTime(x)))", "All x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriod(x)))", "all x.(Refrigerator(x) -> (Invention(x) & CanKeepFoodFresh(x) & LongPeriodOfTime(x)))", "all x.((Refrigerator(x) & KeepsFoodFresh(x) & LongPeriodOfTime(x)) -> CanKeepFoodFresh(x))", "all x.(Refrigerator(x) -> (Invention(x) & KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> (Invention(x) & CanKeepFoodFresh(x) & LongPeriodOfTime(x)))"]}
{"id": "entailmentbank_validation_964", "nl": "radio station broadcasting is a source of radio waves.", "fol": "", "prediction": ["all x.(RadioStation(x) -> RadioWavesSource(x))", "all x.(RadioStation(x) -> BroadcastingSourceOfRadioWaves(x))", "all x y.((RadioStation(x) & Broadcasting(x)) -> RadioWavesSource(y))", "all x y.((RadioStation(x) & Broadcasting(y)) -> RadioWavesSource(x))", "all x y.((RadioStation(x) & Broadcasting(y)) -> (SourceOfRadioWaves(x,y)))", "all x y z.((RadioStation(x) & Broadcasting(y) & RadioWaves(z)) -> Source(x,y,z))", "all x.(RadioStation(x) -> RadioWavesSource(x))", "all x.(RadioStationBroadcasting(x) -> SourceOfRadioWaves(x))", "all x.(RadioStation(x) -> (EncouragesRadioWaves(x) & Broadcasting(x)))", "all x.(RadioStation(x) -> SourceOfRadioWaves(x))", "all x y.((RadioStation(x) & RadioStation(y)) -> BroadcastingSourceOfWaves(x,y))", "all x.(RadioStation(x) -> RadioWavesSource(x))", "all x.(RadioStation(x) -> RadioWavesSource(x))", "all x y.((RadioRadioStation(x) & Broadcasting(y)) -> SourceOfRadioWaves(z))", "all x.((RadioStation(x) & Broadcasting(x)) -> RadioWavesSource(x))", "all x.((RadioStation(x) & Broadcasting(x)) -> SourceOfRadioWaves(x))"]}
{"id": "entailmentbank_validation_965", "nl": "a source of something emits that something.", "fol": "", "prediction": ["all x y.((Source(x) & Problem(y)) -> Emits(x,y))", "all x.((Source(x) & Something(x)) -> Emits(x,y))", "all x.(Source(x) -> Emits(x,y))", "all x.((SourceOf(x) & Something(x)) -> Emits(x,y))", "all x y z.((Source(x) & Something(y) & Source(z)) -> Emits(x,y,z))", "all x y z.((Source(x) & Something(y) & Source(z)) -> EmitsItem(x))", "all x y.((Source(x) & Something(y) & SourceOf(x,y)) -> Emits(x,y))", "all x y.((Source(x) & Something(y)) -> Emits(x,y))", "all x y.((Source(x) & Something(y)) -> Emits(x,y))", "all x y.((Source(x) & Something(y)) -> Emits(x,y))", "all x.((Source(x) & Something(y)) -> Emits(x,y))", "all x y.((Source(x) & Content(y)) -> Emits(x,y))", "all x.((Source(x) & Something(x)) -> Emits(x,y))", "all x y.((SourceOf(x,y) & Something(y)) -> Emits(x,y))", "all x y.((Source(x) & Something(y)) -> Emits(x,y))", "all x.(EmitsSourceOfWhat(x) -> SomethingEmits(x))"]}
{"id": "entailmentbank_validation_966", "nl": "radio station broadcasting emits radio waves.", "fol": "", "prediction": ["all x.(RadioStation(x) & Broadcasting(x)) -> EmitsRadioWaves(x))", "all x y.((RadioStation(x) & RadioStationBroadcasting(y)) -> EmitsRadioWaves(x,y))", "all x.(RadioStation(x) & Broadcasting(x) & EmitsRadioWaves(x))", "all x.((RadioStation(x) & Broadcasting(x)) -> EmitsRadioWaves(x))", "all x.(RadioStation(x) -> BroadcastingEmitsRadioWaves(x))", "all x.((RadioStation(x) & Broadcasting(x)) -> EmitsRadioWaves(x))", "all x.(RadioStation(x) & Broadcasting(x)) -> EmitRadioWaves(x))", "all x y z.((RadioStation(x) & RadioStation(y) & Broadcasting(z) & RadioWaves(w)) -> Emits(x,y,z))", "all x.(RadioStation(x) -> BroadcastingEmitsRadioWaves(x))", "all x.(RadioStation(x) & BroadcastingEmitsRadioWaves(x))", "all x.(RadioStation(x) -> BroadcastingEmitsRadioWaves(x))", "all x.((RadioStation(x) & Broadcasting(y)) -> EmitsRadioWaves(x,y))", "all x y.((RadioStation(x) & Broadcasting(y)) -> EmitsRadioWaves(x,y))", "all x y.((RadioStation(x) & Broadcasting(y)) -> EmitsRadioWaves(x,y))", "all x.((RadioStation(x) & Broadcasting(x)) -> EmitsRadioWaves(x))", "all x y.((RadioStation(x) & RadioStation(y,x)) -> BroadcastingEmitsRadioWaves(x))"]}
{"id": "entailmentbank_validation_967", "nl": "radio transmitter emits radio waves.", "fol": "", "prediction": ["all x.(RadioTransmitter(x) -> EmitsRadioWaves(x))", "all x.(RadioTransmitter(x) -> EmitsRadioWaves(x))", "all x.(RadioSender(x) -> EmitsRadioWaves(x))", "all x.(RadioSender(x) -> EmitsRadioWaves(x))", "all x.(RadioTransmitter(x) -> EmitsRadioWaves(x))", "all x y z.((RadioTransmitter(x) & RadioWaves(y) & RadioWaves(z)) -> Emits(x,y,z))", "all x.(RadioSender(x) -> EmitsRadioWaves(x))", "all x.(RadioTransmitter(x) -> EmitsRadioWaves(x))", "all x.(RadioTransmitter(x) -> EmitsRadioWaves(x))", "all x.(RadioSender(x) -> EmitsRadioWaves(x))", "all x.((RadioSender(x) & Broadband(w)) -> EmitsRadioWaves(x,w))", "all x.(RadioTransmitter(x) -> EmitsRadioWaves(x))", "all x.(RadioSender(x) -> EmitRadioWaves(x))", "all x.(RadioTransmitter(x) -> ElectsRadioWaves(x))", "all x.(RadioTransmitter(x) -> EmitsRadioWaves(x))", "all x.(RadioSender(x) -> EmitRadioWaves(x))"]}
{"id": "entailmentbank_validation_968", "nl": "radio station is a radio transmitter.", "fol": "", "prediction": ["all x.(RadioStation(x) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x.(RadioRadioStation(x) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioSender(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))"]}
{"id": "entailmentbank_validation_969", "nl": "pliers are a kind of hand tool.", "fol": "", "prediction": ["all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x.(Pler (z) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))"]}
{"id": "entailmentbank_validation_970", "nl": "pliers are made of two levers for gripping.", "fol": "", "prediction": ["all x.(Plier(x) -> exists y.(Lever(y) & Lever(x,y)))", "all x.(Plier(x) -> (HasTwoLevers(x) & ForGripping(x)))", "all x y.((Plier(x) & Lever(y)) -> (HasTwoLevers(x) & ForGripping(y)))", "all x.(Plier(x) -> MadeOfTwoLeversForGripping(x))", "all x.(Plier(x) -> MadeOfTwoLevers(x))", "all x.(Plier(x) -> (HasLevers(x,2) & ForGripping(x)))", "all x.(Plier(x) -> madeOfSixLevers(x))", "all x.(Pliner(x) -> exists y.(Lever(y) & Lever(y) & MakesAs(x,y)))", "all x y z.((Plier(x) & Lever(y) & Lever(z)) -> ForGripping(x,y,z))", "all x.(Pilier(x) -> BothLevers(x))", "all x.(Plier(x) -> (HasTwoLens(x) & ForGrappling(x)))", "all x.(Plier(x) -> MadeOfTwoLifts(x))", "all x y.((Plier(x) & Lever(y)) -> MadeOf(x,y))", "all x.(Plier(x) -> MadeOfTwoLifts(x))", "all x.(Plier(x) -> (ContainsTwoLevers(x) & ForGripping(x)))", "all x.(Plier(x) -> exists y.(Levers(y) & ForGripping(y) & MadeOf(x,y)))"]}
{"id": "entailmentbank_validation_971", "nl": "pliers are a tool made of two levers for gripping.", "fol": "", "prediction": ["all x.(Plier(x) -> (Tool(x) & TwoLevers(x)))", "all x.(Plier(x) -> (GrippingTool(x) & MadeOfTwoLevers(x)))", "all x.(Plier(x) -> (MadeOfFourLevers(x) & ForGripping(x)))", "all x.(Plier(x) -> (Tool(x) & MadeOfTwoLens(x)])", "all x y.((Plier(x) & Lever(y) & MadeOf(x,y)) -> ForGripping(x))", "all x.(Plier(x) -> (ToolMadeOfTwoLevers(x) & ForGripping(x)))", "all x y.((Plier(x) & Tool(y)) -> (MakesOfTwoLanges(y) & ForGripping(x)))", "all x.(Plier(x) -> (Tool(x) & MadeOfTwoLevers(x) & ForGripping(x)))", "all x.(Plier(x) -> (TwoLifts(x) & UsedForGripping(x)))", "all x y z.((Plier(x) & Lever(y) & Lever(z)) -> (MadeOf(x,y,z) & MadeOf(x,z) & ForGripping(x)))", "all x.(PLier(x) -> (Tool(x) & MadeOfTwoLevers(x) & ForGrappling(x)))", "all x.(Plier(x) -> (Uhl(x,2) & ForGrappling(x)))", "all x.(PLIER(x) -> exists y.(Lever(y) & Makes(x,y) & HasLever(x,y)))", "all x.(Plier(x) -> (Tool(x) & MadeOfTwoLevers(x) & For(x,Gripping)))", "all x y.((Plier(x) & Lever(y)) -> UsedForGripping(x,y))", "all x.(Plier(x) -> (ToolMadeOfTwoLevers(x) & ForGripping(x)))"]}
{"id": "entailmentbank_validation_972", "nl": "gripping produces gripping force.", "fol": "", "prediction": ["all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.((Gripping(x) & GrippingForce(x)) -> Produces(x,Gripping))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) => ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x y.((Gripping(x) & Product(y)) -> ProducesGrippingForce(x,y))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))"]}
{"id": "entailmentbank_validation_973", "nl": "pliers are a tool that can produce gripping force.", "fol": "", "prediction": ["all x.(Plier(x) -> CanProduceGrippingForce(x))", "all x.(Plier(x) -> ProducesGrippingForce(x))", "all x.(Plier(x) -> ProducesGrippingForce(x))", "all x.(Plier(x) -> (GrippingForce(x) & (Produces(x) | Produces(x)))))", "all x y z.((Plier(x) & Tool(y) & GrappingForce(z)) -> CanProduce(x,y,z))", "all x y.((Plier(x) & Tool(y) & ProducesGrippingForce(x)) -> CanProduceGrippingForce(x))", "all x.(Plier(x) -> (Tool(x) & ProducesGrippingForce(x)))", "all x.(Plier(x) -> (IsTool(x) & ProducesGrippingForce(x)))", "all x.(Plier(x) -> CanProduceGrazingForce(x))", "all x.(Plier(x) -> (Tool(x) & ProducesGrippingForce(x)))", "all x.(Plier(x) -> (GrippingForce(x) | CanProduce(x,GrippingForce)))", "all x y.((Plier(x) & Tool(y)) -> ProducesGrippingForce(x,y))", "all x.(Plier(x) -> (ProducesGrippingForce(x) & CanGrippingForceProduce(x)))", "all x.(Plier(x) -> (Tool(x) & CanProduceGroppingForce(x)))", "all x.(Plier(x) -> (ProducesGrippingForce(x)...))", "all x.(Plier(x) -> (Tool(x) & ProducesGrippingForce(x)))"]}
{"id": "entailmentbank_validation_974", "nl": "a gripping force can be used to tighten a mechanical fastener.", "fol": "", "prediction": ["all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightening(x,y))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x.(GrippingForce(x) -> TightensMechanicalFastener(x))", "all x.(GrippingForce(x) -> UsedToTightenMechanicalFastener(x))", "all x.(GrippingForce(x) -> TightensMechanicalFastener(x))", "all x.(GrippingForce(x) -> TightensMechanicalFastener(x))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y.((GrippingForce(x) & MechanicalFastener(y) & Tighten(x,y)) -> Tighten(x,y))", "all x.(GrippingForce(x) -> TightensMechanicalFastener(x))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> TightenAn(x,y))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> CanTighten(x,y))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))"]}
{"id": "entailmentbank_validation_975", "nl": "pliers can be used to tighten a mechanical fastener.", "fol": "", "prediction": ["all x.(Pliers(x) -> CanTightenMechanicalFasteners(x))", "all x y.((Plier(x) & MechanicalFastener(y)) -> Tighten(x,y))", "all x y.((Plier(x) & MechanicalFastener(y) & Tightens(x,y)) -> CanBeUsedToTighten(x,y))", "all x on y.((Plier(x) & MechanicalFastener(y)) -> CanTighten(x,y))", "all x y.((Plier(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y.((Plier(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y.((Plier(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y.((Plier(x) & MechanicalFastener(y)) -> Tighten(x,y))", "all x y.((Pliner(x) & MechanicalFastener(y)) -> Tighten(x,y))", "all x.(Plier(x) -> TightensMechanicalFastener(x))", "all x y.((Plier(x) & MechanicalFasteneur(y)) -> Tightens(x,y))", "all x.(Plier(x) -> TightensMechanicalFastener(x))", "all x y.((Plier(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y.((Plier(x) & MechanicalFastener(y)) -> CanTighten(x,y))", "all x y z.((Plier(x) & MechanicalFastener(y) & Fastener(z)) -> Tightens(x,y,z))", "all x y.((Plier(x) & MechanicalFastener(y)) -> Tighten(x,y))"]}
{"id": "entailmentbank_validation_976", "nl": "advances in technology sometimes cause human jobs to be replaced by more efficient machines.", "fol": "", "prediction": ["all x y.((AdvancesInTechnology(x) & HumanJobProduction(y)) -> CanBeReplaced(x,y))", "all x y.((AvancesInTechnology(x) & HumanJob(y)) -> (Replaces(x,y) & MakesMachinesEfficient(x,y)))", "all x.((AdvancesInTechnology(x) & HumanJob(y)) -> (ReplacedByMachines(y)))", "all x y.((TechnologicalAdvance(x) & HumanJob(z)) -> ReplacedByEfficientMachines(x))", "all x y.((InTechnologyAdvances(x) & HumanJob(y) & MoreEfficientMetrix(x)) -> ReplacedBy(y,x))", "all x y z.((TechnologyAdvance(x) & HumanJob(y) & Machine(z)) -> (ProducedByEfficient(y,z) & ReplacedByEfficient(z,y)))", "all x.((ProgressesInTechnology(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(z))", "all x y.((TechnologyAdvancement(x) & HumanJob(y)) -> ReplacedByEfficientMachines(x,y))", "all x.((TechnologicalAvances(x) & HumanJobs(y) & MoreEfficientMachines(x)) -> OftenFindsReplacement(y,y))", "all x.((TechnologyAdvance(x) & HumanJob(y)) -> ReplacedByEfficientMachines(y))", "all x y.((TechnologicalAdvancement(x) & HumanJob(y)) -> ReplacedThroughMachines(y,x))", "all x y z.((Technology(x) & HumanJob(y) & Machine(z) & Advances(x)) -> SometimesFacesReplacement(y,z))", "all x y.((ProgressesInTechnology(x) & HumanJob(y)) -> (CausesReplacement(x,y) & MoreEfficientMachines(z)))", "all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> OftenFollows(x,y))", "all x.((TechnologyAdvance(x) & HumanJob(y)) -> ReplacedByEfficientMachines(y))", "all x.((TechnologienAdvances(x) & HumanJobs(x)) -> ReplacedByMoreEfficientMachines(x))"]}
{"id": "entailmentbank_validation_977", "nl": "replacing something decreases that something.", "fol": "", "prediction": ["all x y.((Computing(x) & Something(y)) -> Reduces(x,y))", "all x.((Placement(x) & (Placing(x) & Changes(x))) -> Diminution(x))", "all x y z.((Replacing(x) & Something(y) & Something(z)) -> Decreases(y,z))", "all x y.((Replaces(x,y) & Something(y)) -> Decreased(x,y))", "all x y.((Microsoft(x) & Something(y)) -> -Decreases(x,y))", "all x y.((Replacment(x) & PartOf(y)) -> Alters(x,y))", "all x.((Replacing(x) & Decrease)) -> Replaces(x))", "all x y.((Factory(x) & Something(y) & Replaces(x,y)) -> Decreases(x,y))", "all x y.((Displacing(x,y) & Something(x)) -> Decreases(y,x))", "all x.((Replacement(x) & Decreases(x,y)) -> Replaces(x,y)))", "all x.(Replaces(x,y) -> Reduces(y,y))", "all x y.((Replacement(x) & Something(y)) -> Decreases(x,y))", "all x y.((Provides(x,y) & Something(y)) -> Decreases(x,y))", "all x.(ReplacingTheft(x) -> DecreasesThatThing(x))", "all x.((Replacing(x) & Decreases(x)) -> Replaces(x))", "all x.((Timing(x) & Something(y) & Replacemburses(x,y)) -> Decreased(y,z))"]}
{"id": "entailmentbank_validation_978", "nl": "advances in technology decrease human jobs by replacing them with efficient machines.", "fol": "", "prediction": ["all x y.((AdvancementsInTechnology(x) & HumanJob(y) & ReplacedWithEfficientMachines(x,y)) -> Decreases(x,y))", "all x y.((AdvancementInTechnology(x) & HumanJob(y) & ReplacedWithEfficientMachines(x,y)) -> DecreasesByReplacingWithEfficientMachines(y,x))", "all x y.((AdvancementsInTechnology(x) & HumanJob(y) & EnablesProblems(x,y)) -> DecreasesByReplacingWithEfficientMachines(x,y))", "all x.((TechnologicalAdvances(x) & (HealthyJobs(x) | EfficiencyMachines(x))) -> Decreases(x))", "all x y z.((AdvancesInTechnology(x) & HumanJob(y) & Machine(z)) -> (DecreasesBetween(x,y,z) & ReplacesWith(x,y,z)))", "all x y.((TechnologyAdvances(x) & HumanJob(y)) -> (Decreases(x,y) & ReplacesWithEfficientMachines(x)))", "all x.(((ProgressesInTechnology(x) & HumanJob(y)) -> DecreasesByReplacingWithEfficientMachines(x,y))", "all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> (Decline(x,y) & Replace(y,y)))", "all x y.((Advancement(x) & Technology(y)) -> (DecreaseHumanJobs(x,y) & ReplaceEfficientMachines(x,y)))", "all x.((TechnologyAdvancesInTechnology(x) & HumanJobs(x) & EfficientMachines(x)) -> Decrease(x))", "all x y.((InTechnologyAdvances(x) & HumanJob(y)) -> (Decreased(y) & ReplacedWithEfficientMachines(y)))", "all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> (Decreases(x,y) & ReplacedWithEfficientMachines(y)))", "all x y.((AdvancesInTechnology(x) & HumanJob(y) & ReplacedWithEfficientMachines(y,x)) -> Minimizes(x,y))", "all x y.((Progress(x) & Technology(y) & HumanJob(z) & EfficientMachines(z)) -> DecreasesByPlacingWith(x,y,z))", "all x y.((AdvancementsInTechnology(x) & HumanJob(y)) -> (Decrease(x,y) & ReplacesWithEfficientMachines(x)))", "all x.(AvancesInTechnology(x) -> (MhallowJobChange(x) & ReplaceMachines(x)))"]}
{"id": "entailmentbank_validation_979", "nl": "having a job has a positive impact on a human.", "fol": "", "prediction": ["all x.(Job(x) -> PositiveImpactOnHuman(x))", "all x.(Human(x) -> (HasJob(x) & PositiveImpactOn(x,Human)))", "all x.((Job(x) & Human(y)) -> PositiveImpact(x,y))", "all x y.((Job(x) & Human(y) & PositiveImpactOn(x,y)) -> Has(x,y))", "all x.(Company(x) -> PositiveImpactSonHuman(x))", "all x.(HasJob(x) -> PositiveImpactOnHuman(x))", "all x.(Job(x) -> PositiveImpact(x,Human))", "all x.(HasJob(x) -> PositiveImpactOnHuman(x))", "all x.(Job(x) -> PositiveImpactOnHuman(x))", "all x.(Job(x) -> PositiveImpactOnHuman(x))", "all x.(Job(x) -> PositiveImpactOnHuman(x))", "all x.(Job(x) -> PositiveInfluenceOnHuman(x))", "all x.((Job(x) & Human(y)) -> PositiveImpact(x,y))", "all x.(Job(x) -> PositiveImpactOnHuman(x))", "all x.(Job(x) -> PositiveImpactOnHuman(x))", "all m.((Job(m) & Human(m)) -> PositiveImpact(m))"]}
{"id": "entailmentbank_validation_980", "nl": "decreasing something positive has a negative impact on a thing.", "fol": "", "prediction": ["all x.((DecrementativeThing(x) & PositiveThing(x)) -> NegativeImpact(x))", "all x y.((Positive(x) & Positive(y)) -> NegativeImpact(x,y))", "all x.(DecreasingPositive(x) -> NegativeImpact(x))", "all x.(DecreasingWhatPositive(x) -> NegativeImpactOnThing(x))", "all x.(DecreasedPositive(x) -> NegativeImpact(x))", "all x y.((PositiveThing(x) & PositiveThing(y)) -> NegativeEffect(x,y))", "all x.(DecreasingPositive(x) -> NegativeImpactOnThing(x))", "all x y.((Positive(x) & Positive(y)) -> NegativeImpact(x,y))", "all x.((Positive(x) & Positive(x)) -> NegativeImpact(x,y))", "all x y.((Positive(x) & Positive(y) & Positive(y)) -> NegativeImpactOnThing(x,y))", "all x.(Decreasing(x) -> NegativeImpact(x))", "all x y.((EndingPositive(x) & Thing(y)) -> NegativeImpact(x,y))", "all x y.((Document(x) & Positive(y) & PositiveAndThing(x,y)) -> NegativeImpact(x,y))", "all x y.((NegativeImpact(x) & Positive(y) & PositiveImpact(z)) -> NegativeImpact(x,y))", "all x.(Decline(x) -> HasNegativeImpactOnThing(x))", "all x.((Positive(x) & Positive(x)) -> NegativeImpact(x))"]}
{"id": "entailmentbank_validation_981", "nl": "advances in technology decreasing human jobs by more efficient machines has a negative impact on human.", "fol": "", "prediction": ["all x.((AdvancesInTechnology(x) & HumanJobsDecline(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x.((TechnologyAdvances(x) & JobDecrease(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x.((AdvancementsInTechnology(x) & HumanHouses(y) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x,y))", "all x.(DecreasingHumanJobs(x) -> NegativeImpactOnHuman(x))", "all x.((TechnologyAdvances(x) & DecreasesHumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x y.((Advancement(x) & Technology(y) & HumanJob(x) & MoreEfficientMachines(y)) -> NegativeImpactOnHuman(x,y))", "all x y z.((AdvancesInTechnology(x) & HumanAssignment(y) & Machine(z)) -> (Decreating(x,y) & MoreEfficient(z)))", "all x y z.((AdvancesInTechnology(x) & HumanJobs(y) & Machine(z) & DecreasedByMoreEfficient(z)) -> NegativeImpactOnHuman(x))", "all x.((ProgressesInTechnology(x) & HumanJobsDecreasing(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x.((TechnologienAdvancement(x) & HumanJobDecrease(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x y z.((Technology(x) & HumanJobs(y) & AdvancesInTechnology(z) & DecreasesByEfficientMachines(x,y)) -> NegativeInfluenceOnHuman(x))", "all x y.((FactorsInTechnology(x) & HumanEfficientMachinery(y) & DecreasesHumanJobs(x,y)) -> NegativeImpactOnHuman(x))", "all x.((AdvancesInTechnology(x) & DecreasesHumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x.((TechnologyAdvances(x) & DecreasingHumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x.((Metropolis(x) & TechnologyAdvancements(x) & DecreasesHumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x y.((ReportsInTechnology(x) & Technologies(y) & HumanJob(z)) -> NegativeImpact(x,y,z))"]}
{"id": "entailmentbank_validation_982", "nl": "days are a kind of unit for measuring time.", "fol": "", "prediction": ["all x.(Day(x) -> MeasuresTime(x))", "all x.(Day(x) -> MeasuresTime(x))", "all x.(Day(x) -> MeasuringTime(x))", "all x.(Day(x) -> MeasuresTime(x))", "all x.(Day(x) -> MeasuresTime(x))", "all x.(Day(x) -> MeasuresTime(x))", "all x.(Day(x) -> MeasuresTime(x))", "all x.(Day(x) -> MeasuresTime(x))", "all x.(Day(x) -> MeasuresTime(x))", "all x.(Days(x) -> CanMeasureTime(x))", "all x.(Day(x) -> MeasuringTime(x))", "all x.(Day(x) -> MeasuresTime(x))", "all x.(Day(x) -> MeasuresTime(x))", "all x.(Day(x) -> MeasuringTime(x))", "all x.(Day(x) -> MeasuresTime(x))", "all x.(Day(x) -> MeasuresTime(x))"]}
{"id": "entailmentbank_validation_983", "nl": "a student wants to record the data of the growth of a vine over a period of a day.", "fol": "", "prediction": ["all x y.((Student(x) & Vine(y) & DayPeriod(x)) -> WantsToRecordDataOfGrowthOverDay(x,y))", "all x y z.((Student(x) & Veine(y) & DayPeriod(z)) -> WantsToRecordDataOfVegetation(x,y,z))", "all x y.((Student(x) & Vines(y) & WantsToRecordDataOfGrowth(x,y)) -> RepeatsOverDay(x,y))", "all x y z.((Student(x) & Vine(y) & DayPeriod(z) & DuringTime(x,y)) -> WantsToRecordDataOfGrowth(x,y))", "all x y.((Student(x) & Vine(y) & DayPeriod(y)) -> WantsToRecordTaxData(x,y))", "all x y z.((Student(x) & Vine(y) & Day(z)) -> WantsToRecordDataOfGrowth(x,y,z))", "all x y z.((Student(x) & Vibrant(y) & Date(z) & PeriodOfDay(x,y)) -> WantsToRecordGrowth(x,y,z))", "all x y.((Student(x) & Grape(y) & WantsToRecordDepth(x,y)) -> OverDays(x,y))", "all x y z.((Student(x) & Vegetable(y) & Day(z)) -> WantsOrPlantsToRecordDataAt(x,y,z))", "all x y z.((Student(x) & Vine(y) & PeriodOfDay(z)) -> WantsToRecordDataOfGrowthOverDay(x,y,z))", "all x.((Student(x) & WantsToRecordGrowthOfVine(x)) -> WeekToDay(x))", "all x y.((Student(x) & Vine(y)) -> WantsToRecordDataOnGrowth(x,y))", "all x y.((Student(x) & Vine(y) & WantsToRecordGrowthDuringDay(x,y)) -> WantsToRecordGrowthAndDay(x,y))", "all x y z.((Student(x) & Vegetable(y) & GrowthPeriod(z)) -> WantsToRecordData(x,y,z))", "all x y z.((Student(x) & Vineyard(y) & TimeOfDay(z) & WantsToRecordTheDataOfGrowth(x,y,z)) -> WantsToRecordGrowth(x,y,z))", "all x y z.((Student(x) & Vain(y) & DayInDay(z,x)) -> WantsToRecordDataOfGrowthOverDay(x,y,z))"]}
{"id": "entailmentbank_validation_984", "nl": "the student wants to record the data of the growth of a vine over a period of time.", "fol": "", "prediction": ["all x y z.((Student(x) & Vine(y) & Time(z) & WantsToRecordDataPosition(x,y,z)) -> GrowsOverPosition(x,y,z))", "all x y z.((Student(x) & Vein(y) & DatePeriod(z)) -> WantsToRecordDataOfGrowthOverPeriod(x,y,z))", "all x y.((Student(x) & Vine(y) & WantsToRecordData(x,y)) -> EndsGrowthOverPeriod(x,y))", "all x y z.((Student(x) & Vines(y) & Vine(z) & WantsToRecordData(x,y,z)) -> GrowthAtPeriodOfTime(x,z))", "all x y.((Student(x) & Vine(y)) -> WantsToRecordDataOfGrowthOverPeriod(x,y))", "all x y.((Student(x) & Grape(y) & WantsToRecordDataOnGrowthOverPeriod(x,y)) -> WantsToRecordData(x,y))", "all x y.((Student(x) & Vine(y) & WantsDataFromGrowthOverPeriod(x,y)) -> WantsDataTracking(x,y))", "all x y.((Student(x) & Grape(y) & WantsToRecordData(x,y)) -> DetailedGrowthRecording(x,y))", "all x y.((Student(x) & Vine(y) & WantsToRecordData(x,y)) -> GrowsThroughoutTime(x,y))", "all x y z.((Student(x) & Vine(y) & TimePeriod(z)) -> WantsDataForGrowthOverTime(x,y,z))", "all x y.((Student(x) & Wine(y) & WantsToRecordDataOfGrowth(x,y)) -> OverTime(x))", "all x y z.((Student(x) & Vegetable(y) & Data(z) & HasVine(x,y,z)) -> DescribesGardenOverPeriod(x,y,z))", "all x y.((Student(x) & Vine(y) & InterestedInToRecordGrowth(x,y)) -> WantedToRecordGrowth(x))", "all x.((Student(x) & WantsToRecordGrowthOfVine(x)) -> RecordOverTime(x))", "all x y z.((Student(x) & Vine(y) & GrowsWithOverTime(x,y)) -> WantsToRecordData(x,y,z))", "all x y.((Student(x) & Vine(y)) -> WantsRecordDataForGrowthOverPeriod(x,y))"]}
{"id": "entailmentbank_validation_985", "nl": "a line graph is used for showing change / data over time.", "fol": "", "prediction": ["all x.(LineGraph(x) -> ShowsChangeOrDataOverTime(x))", "all x y.((LineGraph(x) & Change(y) & Data(y)) -> ShowsOverTime(x,y))", "all x.(LineGraph(x) -> UsedForShowingChangeOrDataOverTime(x))", "all x y.((LineGraph(x) & Change(y)) -> ShowsOverTime(x,y))", "all x.(LineGraph(x) -> ShowsChangeOverTime(x))", "all x.(LineGraph(x) -> ShowsChangersTravel(x))", "all x.((LineGraph(x) & ChangeInTime(x)) -> ShowsData(x))", "all x.(LineGraph(x) -> ShowsChangeOverTime(x))", "all x y.((LineGraph(x) & Change(y) & DataOverTime(y)) -> Shows(x,y))", "all x y.((LineGraph(x) & Change(y)) -> ShownOverTime(x,y))", "all x y.((LineGraph(x) & Change(y) & Data(y)) -> ShowsOverTime(x,y))", "all x y.((LineGraph(x) & Change(y) & Data(y)) -> ShowsOverTime(x,y))", "all x.(LineGraph(x) -> ShowsChangeOverTime(x))", "all x.(LineGraph(x) -> ShowsChange(x))", "all x.(LineGraph(x) -> ShowsMutualChange(x))", "all x.(LineGraph(x) -> ShowsChange(x))"]}
{"id": "entailmentbank_validation_986", "nl": "a line graph an be used to show the data of the growth of the vine over a period of time.", "fol": "", "prediction": ["all x.((LineGraph(x) & ShowsDataOfGrowth(x)) -> PlantsAsApplication(x))", "all x y.((LineGraph(x) & Vine(y) & TimePeriod(x)) -> ShowsData(x,y))", "all x y.((LineGraph(x) & Vine(y)) -> ShowsDataOfGrowthAsPeriodOfTime(x,y))", "all x y.((Vine(x) & LineGraph(y)) -> ShowsDataOfGrowthBetweenPeak(y,x))", "all x y.((LineGraph(x) & Vine(y)) -> ShowsDataOfGrowth(x,y))", "all x y.((LineGraph(x) & Vine(y) & GrowthPeriod(y)) -> ShowsData(x,y))", "all x y z.((LineGraph(x) & Vine(y) & GrowsOverPeriod(x,y) & Time(z)) -> ShowsData(x,y,z))", "all x y.((LineGraph(x) & Vein(y)) -> ShowsDataOfGrowth(x,y))", "all x y.((LineGraph(x) & Vine(y)) -> ShowsDataOfGrowthByPeriod(x,y))", "all x y.((LineGraph(x) & Vine(y) & Time(y)) -> ShowsDataOverPeriodOfGrowth(x,y))", "all x y z.((LineGraph(x) & Grape(y) & PeriodOfTime(z) & ShowsDataOfGrowth(x,y,z)) -> GeneratesOver(x,y,z))", "all x y.((LineGraph(x) & Vegetable(y) & TimePeriod(y)) -> ShowsDataOfGrowthShows(x,y))", "all x y z.((LineGraph(x) & Veine(y) & TimePeriod(z)) -> ShowsDataOfGrowth(x,y,z))", "all x y.((LineGraph(x) & Vine(y) & OverPeriod(y)) -> ShowsData(x,y))", "all x y.((LineGraph(x) & Vine(y) & Time(z) & Shows(x,y,z)) -> Growth(y,z))", "all x.(LineGraph(x) -> ShowsVineGrowthOverPeriod(x))"]}
