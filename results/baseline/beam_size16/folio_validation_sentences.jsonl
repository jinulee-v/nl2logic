{"id": "folio_validation_0", "nl": "If people perform in school talent shows often, then they attend and are very engaged with school events.", "fol": "all x.(PerformInTalentShows(x) -> EngagedWithSchoolEvents(x))", "prediction": ["all x.((PerformsInSchoolTalentShows(x) & Often(x)) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "all x.(PerformsInSchoolTalentShowsOften(x) -> (AttendsSchoolEvents(x) & EngagedWithSchoolEvents(x)))", "all x.((Person(x) & PerformsInSchoolTalentShowsOften(x)) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "all x.((PerformsInSchoolTalentShowsOften(x) & AttendsSchoolEvents(x) & EngagedWithSchoolEvents(x)) -> EngagedWithSchoolEvents(x))", "all x.(PerformsInSchoolTalentShows(x) -> (AttendsSchoolEvents(x) & EngagedWithSchoolEvents(x)))", "all x.((PerformsInSchoolTalentShows(x) & Often(x)) -> (AttendsSchoolEvents(x) & EngagedWithSchoolEvents(x)))", "all x.(PerformsInSchoolTalentShowsOften(x) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "all x.((Person(x) & PerformsInSchoolTalentShowsOften(x)) -> (AttendsSchoolEvents(x) & EngagedWithSchoolEvents(x)))", "all x.(PerformsInSchoolTalentShowsOften(x) -> (AttendsSchoolEvents(x) & EngagedWithSchoolEvents(x)))", "all x.((PerformsInSchoolTalentShowsOften(x) & AttendsSchoolEvents(x) & EngagedWithSchoolEvents(x)) -> EngagedWithSchoolEvents(x))", "all x.(PerformsInSchoolTalentShows(x) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "all x.((Person(x) & PerformsInSchoolTalentShows(x)) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "all x.((Person(x) & PerformsInSchoolTalentShowsOften(x)) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "all x.(PerformsInSchoolTalentShowsOften(x) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "all x.((PerformsInSchoolTalentShowsOften(x) & AttendsSchoolEvents(x) & EngagedWithSchoolEvents(x)) -> VeryEngagedWithSchoolEvents(x))", "all x.((PerformsInSchoolTalentShowsOften(x)) -> (Attends(x) & EngagedWithSchoolEvents(x)))"]}
{"id": "folio_validation_1", "nl": "People either perform in school talent shows often or are inactive and disinterested members of their community.", "fol": "all x.(PerformInTalentShows(x) | InactiveCommunityMember(x))", "prediction": ["all x.(Person(x) -> (PerformsInSchoolTalentShows(x) | InactiveAndDisinterestedMember(x)))", "all x.(Person(x) -> (PerformsInSchoolTalentShows(x) | InactiveAndDisinterested(x)))", "all x.((Person(x) & PerformsInSchoolTalentShows(x)) | (Inactive(x) & Disinterested(x))))", "all x.(Person(x) -> (PerformsInSchoolTalentShows(x) | (Inactive(x) & Disinterested(x)))))", "all x y.((Person(x) & SchoolTalentShow(y)) -> (PerformsIn(x,y) | Inactive(x) & Disinterested(x)))", "all x.((Person(x) & PerformsInSchoolTalentShows(x)) | (Inactive(x) & DisinterestedMember(x))))", "exists x.(Person(x) & ((PerformsInSchoolTalentShows(x) & Often(x)) | (Inactive(x) & Disinterested(x)))))", "all x.(Person(x) -> (PerformsInSchoolTalentShows(x) | (Inactive(x) & Disinterested(x))))", "all x.(Person(x) -> ((PerformsInSchoolTalentShows(x) & Often(x)) | (Inactive(x) & Disinterested(x)))))", "all x.(Person(x) -> (PerformsInSchoolTalentShows(x) | Inactive(x) & Disinterested(x)))", "all x.(Person(x) -> (PerformsInSchoolTalentShowsOften(x) | InactiveAndDisinterestedMember(x)))", "all x.(Person(x) -> (PerformsInSchoolTalentShows(x) | Inactive(x) & DisinterestedMember(x)))", "all x y.((Person(x) & SchoolTalentShow(y)) -> (PerformsIn(x,y) | Inactive(x) & DisinterestedMember(x)))", "all x.(Person(x) -> ((PerformsInSchoolTalentShows(x) & Often(x)) | (Inactive(x) & Disinterested(x))))", "all x.(Person(x) -> (PerformsInSchoolTalentShowsOften(x) | InactiveAndDisinterested(x)))", "all x y.((Person(x) & SchoolTalentShow(y)) -> (PerformsIn(x,y) | Disinterested(x)))"]}
{"id": "folio_validation_2", "nl": "If people chaperone high school dances, then they are not students who attend the school.", "fol": "all x.(ChaperoneHighSchoolDances(x) -> -AttendsSchool(x))", "prediction": ["all x.(ChaperonesHighSchoolDances(x) -> -AttendsSchool(x))", "all x.((Person(x) & ChaperonesHighSchoolDances(x)) -> -AttendsSchool(x))", "all x.((Person(x) & ChaperonesHighSchoolDances(x)) -> -StudentsAttendingSchool(x))", "all x.(ChaperonesHighSchoolDances(x) -> -StudentsAttendingSchool(x))", "all x.(ChamperonesHighSchoolDances(x) -> -AttendsSchool(x))", "all x.(ChamperonesHighSchoolDances(x) -> -StudentsAttendingSchool(x))", "all x.((Person(x) & ChaperonesHighSchoolDances(x)) -> -StudentAttendsSchool(x))", "all x.(ChaperonesHighSchoolDances(x) -> -StudentAttendsSchool(x))", "all x.(ChamperonesHighSchoolDances(x) -> -StudentAttendsSchool(x))", "all x.((Person(x) & ChaperonesHighSchoolDances(x)) -> -Students(x))", "all x.((Person(x) & ChaperonesHighSchoolDances(x)) -> -AttendeesSchool(x))", "all x y.((Person(x) & ChaperonesHighSchoolDances(x)) -> -AttendsSchool(y))", "all x.((Person(x) & ChaperonesHighSchoolDances(x)) -> -StudentsAttendsSchool(x))", "all x.((Person(x) & ChaperonesHighSchoolDances(x)) -> -StudentsAttendeesSchool(x))", "all x.(ChaperonesHighSchoolDances(x) -> -StudentsAttendsSchool(x))", "all x.(ChaperonesHighSchoolDances(x) -> -AttendeesSchool(x))"]}
{"id": "folio_validation_3", "nl": "All people who are inactive and disinterested members of their community chaperone high school dances.", "fol": "all x.(InactiveCommunityMember(x) -> ChaperoneHighSchoolDances(x))", "prediction": ["all x.((Person(x) & Inactive(x) & Disinterested(x)) -> ChaperoneHighSchoolDance(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x)) -> CommunityChamperoneHighSchoolDance(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x) & CommunityChamperone(x)) -> HighSchoolDance(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x)) -> ChaperoneHighSchoolDances(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x)) -> CommunityChamperoneHighSchoolDances(x))", "all x.((Person(x) & Inactive(x) & DisinterestedMember(x)) -> ChaperoneHighSchoolDance(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x) & CommunityChamperoneHighSchoolDances(x)) -> Disinterested(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x)) -> CommunityChaperoneHighSchoolDance(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x)) -> HighSchoolChamperoneDance(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x) & CommunityChamperone(x)) -> HighSchoolDances(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x) & CommunityChaperone(x)) -> HighSchoolDance(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x) & CommunityChamperone(x) & HighSchoolDance(x)) -> Disinterested(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x) & CommunityChamperoneHighSchoolDance(x)) -> Disinterested(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x)) -> ChaparoneHighSchoolDance(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x) & CommunityChamperoneHighSchoolDance(x)) -> ChaperoneHighSchoolDance(x))", "all x.((Person(x) & Inactive(x) & Disinterested(x)) -> Chaperone(x))"]}
{"id": "folio_validation_4", "nl": "All young children and teenagers who wish to further their academic careers and educational opportunities are students who attend the school.", "fol": "all x.(WishesToFurtherAcademicCareer(x) -> AttendsSchool(x))", "prediction": ["all x.((YoungChild(x) | Teenager(x)) -> AttendsSchool(x))", "all x.((YoungChildren(x) & Teenagers(x) & WishesToFurtherAcademicCareers(x) & WishesToFurtherEducationalOpportunities(x)) -> AttendsSchool(x))", "all x.((YoungChild(x) & Teenager(x) & WishesToFinishAcademicCareers(x) & WishesToFinishEducationalOpportunities(x)) -> AttendsSchool(x))", "all x.((YoungChildren(x) & Teenagers(x) & WishesToFinishAcademicCareers(x) & WishesToFinishEducationalOpportunities(x)) -> AttendsSchool(x))", "all x.((YoungChildren(x) & Teenagers(x) & WishesToFinishAcademicCareersAndEducationalOpportunities(x)) -> AttendsSchool(x))", "all x.((YoungChildren(x) & YoungAdults(x) & WishesToFinishAcademicCareers(x) & WishesToFinishEducationalOpportunities(x)) -> AttendsSchool(x))", "all x.((YoungChild(x) & Teenager(x) & WishesToFinishAcademicCareersAndEducationalOpportunities(x)) -> AttendsSchool(x))", "all x.((YoungChildren(x) & Teenagers(x) & WishesToFurtherAcademicCareers(x) & WishesToFinishEducationalOpportunities(x)) -> AttendsSchool(x))", "all x.((YoungChildren(x) | Teenagers(x)) -> AttendsSchool(x))", "all x.((YoungChild(x) & Teenager(x) & WishesToFinishAcademicCareers(x) & WishesToFurtherEducationalOpportunities(x)) -> AttendsSchool(x))", "all x.((YoungChildren(x) & Teenagers(x) & WishesToFinishAcademicCareers(x) & WishesToFurtherEducationalOpportunities(x)) -> AttendsSchool(x))", "all x.((YoungChildren(x) & Teenagers(x) & WishesToFurtherAcademicCareers(x) & WishesToFurtherEducationalOpportunities(x)) -> StudentsAttendSchool(x))", "all x.((YoungChild(x) & YoungAcademicCareers(x) & YoungAcademicOpportunities(x)) -> AttendsSchool(x))", "all x.((YoungChild(x) | YoungAdult(x)) -> AttendsSchool(x))", "all x.((YoungChildren(x) & Teenagers(x) & WishesToFinishAcademicCareers(x) & WishesToFinishEducationalOpportunities(x)) -> StudentsAttendSchool(x))", "all x.((YoungChildren(x) & YoungAcademicCareers(x) & YoungAcademicOpportunities(x)) -> AttendsSchool(x))"]}
{"id": "folio_validation_5", "nl": "Bonnie either both attends and is very engaged with school events and is a student who attends the school, or she neither attends and is very engaged with school events nor is a student who attends the school. ", "fol": "((EngagedWithSchoolEvents(Bonnie) & AttendsSchool(Bonnie) & -(-EngagedWithSchoolEvents(Bonnie) & -AttendsSchool(Bonnie))) | (-(EngagedWithSchoolEvents(Bonnie) & AttendsSchool(Bonnie)) & -EngagedWithSchoolEvents(Bonnie) & -AttendsSchool(Bonnie)))", "prediction": ["all x.(Bonnie(x) -> ((Attends(x) & VeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x))))", "all x.(Bonnie(x) -> ((Attends(x) & VeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x)))))", "all x.(Bonnie(x) -> ((Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x)))))", "all x.(Bonnie(x) -> ((Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x) & AttendsSchool(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x))))", "((Attends(Bonnie) & VeryEngagedWithSchoolEvents(Bonnie)) | (-Attends(Bonnie) & VeryEngagedWithSchoolEvents(Bonnie)) | (-Attends(Bonnie) & VeryEngagedWithSchoolEvents(Bonnie)))))", "all x.(Bonnie(x) -> ((Attends(x) & VeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x))))", "all x y.((Bonnie(x) & School(y)) -> ((Attends(x,y) & VeryEngagedWith(x,y) & Student(x,y)) | (-Attends(x,y) & VeryEngagedWith(x,y)) | (-Attends(x,y) & Student(x,y)))))", "all x.(Bonnie(x) -> ((AttendsAndVeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x)) | (-AttendsAndVeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x)) | (-AttendsAndVeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x))))", "all x.(Bonnie(x) -> ((Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x) & AttendsSchool(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x)))))", "all x.(Bonnie(x) -> ((Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x) & AttendsSchool(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x) & AttendsSchool(x))))", "all x.(Bonnie(x) -> ((Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x) & AttendsSchool(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x)))))", "all x.(Bonnie(x) -> ((Attends(x) & VeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x))))", "(all x.(Bonnie(x) -> (Attends(x) & VeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x))) | (-Attends(x) & VeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x))))", "all x.(Bonnie(x) -> ((Attends(x) & VeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x)) | (-Attends(x) & StudentAttendsSchool(x)))))", "all x.(Bonnie(x) -> ((AttendsAndVeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x)) | (-AttendsAndVeryEngagedWithSchoolEvents(x) & StudentAttendsSchool(x))))", "all x.(Bonnie(x) -> ((Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x))))"]}
{"id": "folio_validation_6", "nl": "Bonnie performs in school talent shows often.", "fol": "PerformInTalentShows(Bonnie)", "prediction": ["all x y.((Bonnie(x) & SchoolTalentShow(y)) -> PerformsIn(x,y))", "all x.(Bonnie(x) -> PerformsInSchoolTalentShows(x))", "all x y.((Bobby(x) & SchoolTalentShow(y)) -> PerformsIn(x,y))", "all x y.((Bonnie(x) & TalentShow(y)) -> PerformsIn(x,y))", "all x y.((Boy(x) & SchoolTalentShow(y)) -> PerformsIn(x,y))", "all x y z.((Bonnie(x) & TalentShow(y) & School(z)) -> PerformsIn(x,y,z))", "all x.((Bonnie(x) & SchoolTalentShow(x)) -> PerformsIn(x,y))", "all x y z.((Bonnie(x) & SchoolTalentShow(y) & Talent(z)) -> PerformsIn(x,y,z))", "all x y z.((Bonnie(x) & SchoolTalentShow(y) & SchoolTalent(z)) -> PerformsIn(x,y,z))", "all x y z.((Bonnie(x) & SchoolTalentShow(y) & School(z)) -> PerformsIn(x,y,z))", "all x.(Bobby(x) -> PerformsInSchoolTalentShows(x))", "all x.(Bonnie(x) -> (PerformsInSchoolTalentShows(x) & Often(x)))", "all x y.((Bonnie(x) & SchoolTalentShow(y)) -> Performs(x,y))", "all x.((Bobby(x) & SchoolTalentShow(x)) -> PerformsIn(x,y))", "all x.((Bonnie(x) & PerformsInSchoolTalentShows(x)) -> Often(x))", "all x y.((Bonnie(x) & SchoolTalentShow(y)) -> PerformsOften(x,y))"]}
{"id": "folio_validation_7", "nl": "If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community.", "fol": "(((((WishesToFurtherAcademicCareer(Bonnie) & -ChaperoneHighSchoolDances(Bonnie)) | (-WishesToFurtherAcademicCareer(Bonnie) & ChaperoneHighSchoolDances(Bonnie))) -> WishesToFurtherAcademicCareer(Bonnie)) & -InactiveCommunityMember(Bonnie)) | (-(((WishesToFurtherAcademicCareer(Bonnie) & -ChaperoneHighSchoolDances(Bonnie)) | (-WishesToFurtherAcademicCareer(Bonnie) & ChaperoneHighSchoolDances(Bonnie))) -> WishesToFurtherAcademicCareer(Bonnie)) & InactiveCommunityMember(Bonnie)))", "prediction": ["all x.((YoungChild(x) | Teenager(x)) & (WantsAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-WantsAcademicCareerAndEducationalOpportunities(x) & AttendsSchool(x)) | (-WantsAttendsSchool(x) & DisinterestedMemberOfCommunity(x))))", "all x.((YoungChild(x) | Teenager(x)) & (WantsToFinishAcademicCareerAndEducationalOpportunities(x) | -WantsToFinishAcademicCareerAndEducationalOpportunities(x))) -> (Student(x) | DisinterestedMemberOfCommunity(x)))", "all x.((YoungChild(x) | Teenager(x)) & (WantsToFinishAcademicCareerAndEducationalOpportunities(x) | -WantsToFinishAcademicCareerAndEducationalOpportunities(x))) -> (StudentAttendsSchool(x) | DisinterestedMemberOfCommunity(x)))", "all x.((YoungChild(x) | Teenager(x)) & (WantsToFurtherAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-WantsToFurtherAcademicCareerAndEducationalOpportunities(x) & AttendsSchool(x) & InactiveAndDisinterestedMemberOfCommunity(x))))", "all x.((YoungChild(x) | Teenager(x)) & (WantsAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-WantsAcademicCareerAndEducationalOpportunities(x) & AttendsSchool(x) & InactiveAndDisinterestedMemberOfCommunity(x))))", "all x.((YoungChild(x) | Teenager(x)) & (WantsToFurtherAcademicCareerAndEducationalOpportunities(x) | -WantsToFurtherAcademicCareerAndEducationalOpportunities(x))) -> (Student(x) | DisinterestedMemberOfCommunity(x)))", "all x.((YoungChild(x) | Teenager(x)) & (WantsToFinishAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x))) | (-(YoungChild(x) & Teenager(x)) & WantsToFinishAcademicCareerAndEducationalOpportunities(x)))))", "all x.((YoungChild(x) | Teenager(x)) & (WantsToFinishAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-WantsToFinishAcademicCareerAndEducationalOpportunities(x) & AttendsSchool(x) & InactiveAndDisinterestedMemberOfCommunity(x))))", "all x.((YoungChild(x) | Teenager(x)) & ((WantsAcademicCareer(x) & WantsEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-WantsAcademicCareer(x) & WantsEducationalOpportunities(x))))) -> (Student(x) & AttendsSchool(x)))", "all x.((YoungChild(x) | Teenager(x)) & (WantsToFurtherAcademicCareerAndEducationalOpportunities(x) | -WantsToFurtherAcademicCareerAndEducationalOpportunities(x))) -> (StudentAttendsSchool(x) | DisinterestedMemberOfCommunity(x)))", "all x.((YoungChild(x) | Teenager(x)) & (WantsToFurtherAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-WantsToFurtherAcademicCareerAndEducationalOpportunities(x) & AttendsSchool(x))))", "all x.((YoungChild(x) | Teenager(x)) & (WantsToFinishAcademicCareerAndEducationalOpportunities(x) | ChaperonesHighSchoolDances(x))) -> (StudentAttendsSchool(x) | DisinterestedMemberOfCommunity(x)))", "all x.((YoungChild(x) | Teenager(x)) & (WantsAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-WantsAcademicCareerAndEducationalOpportunities(x) & AttendsSchool(x)) | (-WantsAttendsSchool(x) & DisinterestedMemberOfCommunity(x)))))", "all x.((YoungChild(x) | Teenager(x)) & (WantsToFinishAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-WantsToFinishAcademicCareerAndEducationalOpportunities(x) & AttendsSchool(x))))", "all x.((YoungChild(x) | Teenager(x)) & (WantsToFurtherAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-WantsToFurtherAcademicCareerAndEducationalOpportunities(x) & AttendsSchool(x)) | (-WantsToFurtherAcademicCareer(x) & DisinterestedMember(x))))", "all x.((YoungChild(x) | Teenager(x)) & (WantsAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-WantsAcademicCareerAndEducationalOpportunities(x) & AttendsSchool(x))))"]}
{"id": "folio_validation_8", "nl": "If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community.", "fol": "(((ChaperoneHighSchoolDances(Bonnie) & -PerformInTalentShows(Bonnie)) | (-ChaperoneHighSchoolDances(Bonnie) & PerformInTalentShows(Bonnie))) -> (WishesToFurtherAcademicCareer(Bonnie) & InactiveCommunityMember(Bonnie)))", "prediction": ["all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YoungChild(x) | Teenager(x) & WishesToFurtherAcademicCareerAndEducationalOpportunities(x) & InactiveAndDisinterestedMemberOfCommunity(x)))", "all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YoungChild(x) | Teenager(x) & WishesToFinishAcademicCareerAndEducationalOpportunities(x) & InactiveAndDisinterestedMemberOfCommunity(x)))", "all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YoungChild(x) | Teenager(x) & WantsToFinishAcademicCareerAndEducationalOpportunities(x) & InactiveAndDisinterestedMemberOfCommunity(x)))", "all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YoungChild(x) | Teenager(x)) & WishesToFurtherAcademicCareerAndEducationalOpportunities(x) & InactiveAndDisinterestedMemberOfCommunity(x)))", "all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YearChild(y) | Teenager(y) & WantsToFinishAcademicCareerAndEducationalOpportunities(y) & InactiveAndDisinterestedMemberOfCommunity(y)))", "all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YearChild(y) | Teenager(y) & WishesToFurtherAcademicCareerAndEducationalOpportunities(y) & InactiveAndDisinterestedMemberOfCommunity(y)))", "all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YearChild(y) | Teenager(y) & WishesToFinishAcademicCareerAndEducationalOpportunities(y) & InactiveAndDisinterestedMemberOfCommunity(y)))", "all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YoungChild(x) | Teenager(x)) & WishesToFinishAcademicCareerAndEducationalOpportunities(x) & InactiveAndDisinterestedMemberOfCommunity(x)))", "all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YoungChild(x) | Teenager(x)) & InactiveAndDisinterestedMemberOfCommunity(x)))", "all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YoungChild(x) | YoungTeenager(x) & WishesToFinishAcademicCareerAndEducationalOpportunities(x) & InactiveAndDisinterestedMemberOfCommunity(x)))", "all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> ((YoungChild(x) | Teenager(x)) & WishesToFinishAcademicCareerAndEducationalOpportunities(x) & InactiveAndDisinterestedMemberOfCommunity(x)))", "all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> ((YoungChild(x) | Teenager(x)) & WishesToFurtherAcademicCareerAndEducationalOpportunities(x) & InactiveAndDisinterestedMemberOfCommunity(x)))", "all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> ((YoungChild(x) | Teenager(x)) & WishesToFurtherAcademicCareerAndEducationalOpportunities(x) & InactiveAndDisinterestedMemberOfCommunity(x))))", "all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YoungChild(x) | Teenager(x)) & -InactiveAndDisinterestedMemberOfCommunity(x)))", "all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> ((YoungChild(x) | Teenager(x)) & WishesToFinishAcademicCareerAndEducationalOpportunities(x) & InactiveAndDisinterestedMemberOfCommunity(x))))", "all x.((ChaperonesHighSchoolDances(x) | (-ChaperonesHighSchoolDances(x) & PerformsInSchoolTalentShowsOften(x))) -> (YoungChild(x) | Teenager(x)) & InactiveAndDisinterestedMemberOfCommunity(x)))"]}
{"id": "folio_validation_9", "nl": "All employees who schedule a meeting with their customers will appear in the company today. ", "fol": "all x.(SchedulesMeetingWithCustomers(x) -> AppearsInCompanyToday(x))", "prediction": ["all x.((Employee(x) & SchedulesMeetingWithCustomers(x)) -> AppearsInCompany(x))", "all x y.((Employee(x) & Customer(y) & SchedulesMeeting(x,y)) -> AppearsInCompany(x,y))", "all x y.((Employee(x) & Customer(y) & SchedulesMeeting(x,y)) -> AppearsInCompany(x,y))", "all x.((Employee(x) & SchedulesMeetingWithCustomers(x)) -> AppearsInCompany(x))", "all x y.((Employee(x) & Customer(y) & SchedulesMeeting(x,y)) -> AppearsInCompany(x))", "all x.((Employee(x) & SchedulesMeeting(x) & Customer(x)) -> AppearsInCompany(x))", "all x y.((Employee(x) & Customer(y) & SchedulesMeeting(x,y)) -> AppearsInCompany(x))", "all x.((Employee(x) & SchedulesMeeting(x) & Customer(x)) -> AppearsInCompany(x))", "all x.((Employee(x) & SchedulesMeeting(x)) -> AppearsInCompany(x))", "all x.((Employee(x) & SchedulesMeeting(x) & Customers(x)) -> AppearsInCompany(x))", "all x.((Employee(x) & SchedulesMeeting(x) & Customers(x)) -> AppearsInCompany(x))", "all x.((Employee(x) & SchedulesMeeting(x)) -> AppearsInCompany(x))", "all x y.((Employee(x) & SchedulesMeeting(x,y) & Customer(y)) -> AppearsInCompany(x,y))", "all x.((Employee(x) & SchedulesMeetingWithCustomers(x)) -> AppearsInCompanyToday(x))", "all x y.((Employee(x) & Customer(y) & SchedulesMeeting(x,y)) -> AppearInCompany(x,y))", "all x y.((Employee(x) & Customer(y) & SchedulesMeetingWith(x,y)) -> AppearsInCompany(x))"]}
{"id": "folio_validation_10", "nl": "Everyone who has lunch in the company schedules meetings with their customers. ", "fol": "all x.(HasLunchInCompany(x) -> SchedulesMeetings(x))", "prediction": ["all x.((HasLunch(x) & Company(x)) -> SchedulesMeetingsWithCustomers(x))", "all x.((HasLunch(x) & InCompany(x)) -> SchedulesMeetingsWithCustomers(x))", "all x y.((HasLunch(x) & Company(y)) -> SchedulesMeetingsWithCustomers(x,y))", "all x y.((HasLunch(x) & Company(y)) -> SchedulesMeetings(x,y))", "all x.((HasLunch(x) & InCompany(x)) -> SchedulesMeetings(x))", "all x y z.((HasLunch(x) & Company(y) & Customer(z)) -> SchedulesMeetings(x,y,z))", "all x.((HasLunch(x) & Company(x)) -> SchedulesMeetings(x))", "all x.((HasLunchInCompany(x)) -> SchedulesMeetingsWithCustomers(x))", "all x y z.((HasLunch(x) & Company(y) & Customer(z)) -> SchedulesMeeting(x,y,z))", "all x.(HasLunch(x) -> SchedulesMeetingsWithCustomers(x))", "all x y z.((HasLunch(x) & Company(y) & Customer(z)) -> SchedulesMeetingsWith(x,y,z))", "all x.(HasLunchInCompany(x) -> SchedulesMeetingsWithCustomers(x))", "all x y.((HasLunch(x) & Company(y)) -> SchedulesMeeting(x,y))", "all x.((HasLunch(x) & inCompany(x)) -> SchedulesMeetingsWithCustomers(x))", "all x.((HasLunchInCompany(x) & InCompany(x)) -> SchedulesMeetingsWithCustomers(x))", "all x y.((HasLunchInCompany(x) & Customer(y)) -> SchedulesMeetings(x,y))"]}
{"id": "folio_validation_11", "nl": "Employees will either have lunch in the company or have lunch at home.", "fol": "all x.(HasLunchInCompany(x) | HasLunchAtHome(x))", "prediction": ["all x.(Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x)))", "all x.(Employee(x) -> (HasLunch(x,Company) | HasLunch(x,Home)))", "all x y.((Employee(x) & Company(y)) -> (HasLunch(x,y) | HasLunch(x,y)))", "all x y.((Employee(x) & Company(y)) -> (HasLunchIn(x,y) | HasLunchAtHome(x,y)))", "all x y.((Employee(x) & Company(y)) -> (HasLunch(x,y) | HasLunchAtHome(x,y)))", "all x.((Employee(x) & (HasLunchInCompany(x) | HasLunchAtHome(x))) -> HasLunchInCompany(x))", "all x.(Employee(x) -> ((HasLunchInCompany(x) | HasLunchAtHome(x))))", "all x y.((Employee(x) & Company(y)) -> (HasLunchInCompany(x,y) | HasLunchAtHome(x,y)))", "all x.(Employee(x) -> (HasLunch(x,company) | HasLunch(x,home)))", "all x y.((Employee(x) & (Company(y) | Home(y))) -> (HasLunch(x,y) | HasLunch(x,y)))", "all x y.((Employee(x) & Company(y)) -> (HasLunchIn(x,y) | HasLunchAtHome(x)))", "all x.(Employee(x) -> (HasLunch(x) | HasLunch(x)))", "all x y z.((Employee(x) & Company(y) & Home(z)) -> (HasLunch(x,y) | HasLunch(x,z)))", "all x y.((Employee(x) & Company(y)) -> (Has(x,y) | Has(x,y)))", "all x y z.((Employee(x) & Company(y) & Company(z)) -> (HasLunchIn(x,y) | HasLunchAtHome(x,z)))", "all x y.((Employee(x) & Company(y) & (HasLunch(x,y) | HasLunch(x,y))) -> HasLunch(x,y))"]}
{"id": "folio_validation_12", "nl": "If an employee has lunch at home, then he/she is working remotely from home.", "fol": "all x.(HasLunchAtHome(x) -> WorksRemotelyFromHome(x))", "prediction": ["all x.((Employee(x) & HasLunchAtHome(x)) -> WorkingRemotelyFromHome(x))", "all x.((Employee(x) & LunchAtHome(x)) -> WorkingRemotelyFromHome(x))", "all x.((Employee(x) & HasLunchAtHome(x)) -> WorksRemotelyFromHome(x))", "all x.((Employee(x) & HasLunchAtHome(x)) -> WorkingRemotelyFromHome(x))", "all x.(HasLunchAtHome(x) -> WorkingRemotelyFromHome(x))", "all x.((Employee(x) & HasLunchAtHome(x)) -> RemoteWorkingFromHome(x))", "all x.((Employee(x) & HasLunchAtHome(x)) -> WorkingRemotely(x))", "all x.((Employee(x) & HasLunch(x)) -> WorkingRemotelyFromHome(x))", "all x.((Employee(x) & LunchAtHome(x)) -> RemoteWorkingFromHome(x))", "all x.((Employee(x) & HasLunch(x,Home)) -> WorkingRemotelyFromHome(x))", "all x.((Employee(x) & LunchAtHome(x)) -> WorkingRemotelyFromHome(x))", "all x.((Employee(x) & LunchAtHome(x)) -> WorkingRemotely(x))", "all x.((Employee(x) & HasHomeLunch(x)) -> WorkingRemotelyFromHome(x))", "all x.((Employee(x) & HasLunchAtHome(x)) -> RemoteWorking(x))", "all x y.((Employee(x) & HasLunchAtHome(x)) -> WorkingRemotelyFromHome(x))", "all x.((Employee(x) & LunchAtHome(x)) -> RemoteWorking(x))"]}
{"id": "folio_validation_13", "nl": "All employees who are in other countries work remotely from home. ", "fol": "all x.(IsInOtherCountries(x) -> WorksRemotelyFromHome(x))", "prediction": ["all x.((Employee(x) & InOtherCountries(x)) -> WorksRemotelyFromHome(x))", "all x.((Employee(x) & InOtherCountry(x)) -> WorksRemotelyFromHome(x))", "all x.((Employee(x) & InAnotherCountry(x)) -> WorksRemotelyFromHome(x))", "all x.((Employee(x) & InOtherCountries(x)) -> WorkRemotelyFromHome(x))", "all x.((Employee(x) & InAnotherCountry(x)) -> WorkRemotelyFromHome(x))", "all x.((Employee(x) & InOtherCountry(x)) -> WorkRemotelyFromHome(x))", "all x.((Employee(x) & OtherCountry(x)) -> WorksRemotelyFromHome(x))", "all x.((Employee(x) & InAlterCountry(x)) -> WorksRemotelyFromHome(x))", "all x.((Employee(x) & OtherCountry(x)) -> WorkRemotelyFromHome(x))", "all x.((Employee(x) & InCountry(x)) -> WorksRemotelyFromHome(x))", "all x.((Employee(x) & WorkInOtherCountries(x)) -> WorksRemotelyFromHome(x))", "all x.((Employee(x) & InAlterCountry(x)) -> WorkRemotelyFromHome(x))", "all x.((Employee(x) & WorkingInOtherCountries(x)) -> WorksRemotelyFromHome(x))", "all x.((Employee(x) & InOtherCountries(x)) -> WorksRemotely(x))", "all x.((Employee(x) & InCountry(x)) -> WorkRemotelyFromHome(x))", "all x y.((Employee(x) & Country(y)) -> WorksRemotelyFromHome(x,y))"]}
{"id": "folio_validation_14", "nl": "No managers work remotely from home. ", "fol": "all x.(IsManager(x) -> -WorksRemotelyFromHome(x))", "prediction": ["-exists x.(Manager(x) & WorksRemotely(x))", "-exists x.(Manager(x) & WorksRemotelyFromHome(x))", "-exists x.(Manager(x) & WorkRemotely(x))", "-exists x.(Manager(x) & WorkRemotelyFromHome(x))", "-exists x.(Manager(x) & WorksFromHome(x))", "-exists x.(Manager(x) & WorkFromHome(x))", "all x.(Manager(x) -> -WorksRemotelyFromHome(x))", "-exists x.(Manager(x) & Work(x) & Remote(x))", "-exists x.(Manager(x) & WorkRemoteFromHome(x))", "-exists x.(Manager(x) & Work(x,Home))", "all x.(Manager(x) -> -WorksRemotely(x))", "-exists x.(Manager(x) & RemoteWork(x))", "-exists x.(Manager(x) & WorksRemotely(x,Home))", "(-exists x.(Manager(x) & WorksRemotely(x)))", "-exists x.(Manager(x) & WorksRemotely(x,home))", "-exists x.(Manager(x) & Work(x) & Remotely(x))"]}
{"id": "folio_validation_15", "nl": "James is either a manager and appears in the company today or neither a manager nor appears in the company today.", "fol": "((IsManager(James) & -AppearsInCompanyToday(James)) | (-IsManager(James) & AppearsInCompanyToday(James)))", "prediction": ["all x.(James(x) -> ((Manager(x) & AppearsInCompany(x)) | -Manager(x) & AppearsInCompany(x))))", "all x.(James(x) -> ((Manager(x) & AppearsInCompany(x)) | (-Manager(x) & AppearsInCompany(x)))))", "all x.(James(x) -> ((Manager(x) & AppearsInCompany(x)) | (-Manager(x) & AppearsInCompany(x)))))", "all x.(James(x) -> ((Manager(x) & AppearsInCompany(x)) | -Manager(x) & AppearsInCompany(x))))", "(exists x.(Manager(x) & AppearsInCompany(x)) | -exists y.(Manager(y) & AppearsInCompany(y))))", "all x.(James(x) -> ((Manager(x) & AfpearsInCompany(x)) | (-Manager(x) & AfpearsInCompany(x)))))", "all x.(James(x) -> ((Manager(x) & appearsInCompany(x)) | (-Manager(x) & appearsInCompany(x)))))", "all x.(James(x) -> ((Manager(x) & AfpearsInCompany(x)) | -Manager(x) & -AfpearsInCompany(x))))", "(exists x.(Manager(x) & AppearsInCompany(x)) | -exists y.(Manager(y) & AppearsInCompany(y))))", "all x.(James(x) -> ((Manager(x) & appearsInCompany(x)) | -Manager(x) & appearsInCompany(x))))", "all x.(James(x) -> ((Manager(x) & AfpearsInCompany(x)) | -Manager(x) & AfpearsInCompany(x))))", "all x.(James(x) -> ((Manager(x) & AppearsInCompany(x)) | (-Manager(x) & AppearsInCompany(x))))", "all x.(James(x) -> ((Manager(x) & AppearsInCompany(x)) | (-Manager(x) & AppearsInCompany(x))))", "(all x.(James(x) -> (Manager(x) & AppearsInCompany(x)) | (-Manager(x) & AppearsInCompany(x)))))", "all x.(James(x) -> ((Manager(x) & AfpearsInCompany(x)) | (-Manager(x) & AfpearsInCompany(x))))", "(exists x.(Manager(x) & AfpearsInCompany(x)) | -exists y.(Manager(y) & AfpearsInCompany(y))))"]}
{"id": "folio_validation_16", "nl": "James has lunch in the company.", "fol": "HasLunchInCompany(James)", "prediction": ["all x y.((James(x) & Company(y)) -> HasLunch(x,y))", "all x y z.((James(x) & Company(y) & Lunch(z)) -> Has(x,y,z))", "all x.((James(x) & Company(y)) -> HasLunch(x,y))", "all x y z.((James(x) & Company(y) & Lunch(z)) -> HasInCompany(x,y,z))", "all x y z.((James(x) & Company(y) & Company(z)) -> HasLunch(x,y,z))", "all x y.((James(x) & Company(y)) -> HasLunchIn(x,y))", "all x.(James(x) -> HasLunch(x))", "all x.((James(x) & Company(x)) -> HasLunch(x))", "(HasLunch(James) & InCompany(James))", "all x y z.((James(x) & Company(y) & Lunch(z)) -> HasIn(x,y,z))", "all x y z.((James(x) & Company(y) & Lunch(z)) -> Has(x,y))", "all x y.((Company(x) & James(y)) -> HasLunch(y,x))", "all x.((James(x) & Company(x)) -> HasLunch(x,y))", "(HasLunch(James,Company) -> HasLunch(James,Company))", "all x y.((James(x) & Company(y)) -> LunchIn(x,y))", "all x y.((James(x) & Company(y)) -> Lunch(x,y))"]}
{"id": "folio_validation_17", "nl": "James does not have lunch in the company.", "fol": "-HasLunchInCompany(James)", "prediction": ["all x.((James(x) & -HasLunch(x)) -> -HasLunch(x))", "all x y.((James(x) & Company(y)) -> -HasLunch(x,y))", "all x.((James(x) & Company(y)) -> -HasLunch(x,y))", "all x.((James(x) & Company(x)) -> -HasLunch(x))", "all x.((James(x) & -HasLunchInCompany(x)) -> -HasLunchInCompany(x))", "all x.((James(x) & -HasLunch(x)) -> -HasLunchInCompany(x))", "all x.(James(x) -> -HasLunch(x))", "all x y.((James(x) & Company(y) & -HasLunch(x,y)) -> -HasLunch(x,y))", "all x.(James(x) -> -HasLunchInCompany(x))", "all x.((James(x) & -HasLunch(x,Company)) -> -HasLunch(x,Company))", "all x.((James(x) & Company(x)) -> -HasLunch(x,Company))", "all x y.((James(x) & Company(y)) -> -HasLunchIn(x,y))", "all x.((James(x) & -HasLunchInCompany(x)) -> -HasLunch(x))", "all x.((James(x) & -HasLunch(x)) -> -HasLunch(x,Company))", "all x.((James(x) & -HasLunch(x)) -> -InCompany(x))", "(-HasLunch(James,Company))"]}
{"id": "folio_validation_18", "nl": "Monkeypox is an infectious disease caused by the monkeypox virus.", "fol": "exists x.(OccursMonkeypoxVirus(x) & ContractMonkeypox(x))", "prediction": ["all x.(Monkeypox(x) -> (InfectiousDisease(x) & CausedByMonkeypoxVirus(x)))", "all x.(Monkeypox(x) -> (InfectiousDisease(x) & CausedByMammalpoxVirus(x)))", "all x.(Monkeypox(x) -> (InfectiousDisease(x) & CausedByMonkeypoxVirus(x)))", "all x y.((Monkeypox(x) & Monkeypox(y)) -> (InfectiousDisease(x,y) & CausedBy(x,y)))", "all x y.((Monkeypox(x) & MonkeypoxVirus(y)) -> InfectiousDiseaseCausedBy(x,y))", "all x y.((Monkeypox(x) & MonkeypoxVirus(y)) -> InfectiousDisease(x,y))", "all x.(Monkeypox(x) -> (InfectiousDisease(x) & CausedBy(x,y) & MonkeypoxVirus(y)))", "all x.(Monkeypox(x) -> (InfectiousDisease(x) & CausedByMousepoxVirus(x)))", "all x.(Monkeypox(x) -> (InfectiousDisease(x) & CausedByMammalpoxVirus(x)))", "all x y.((Monkeypox(x) & Monkeypox(y)) -> (InfectiousDisease(x) & CausedBy(x,y)))", "all x.(Monkeypox(x) -> (InfectiousDisease(x) & CausedBy(x,monkeypox)))", "all x y.((Monkeypox(x) & Monkeypox(y)) -> InfectiousDisease(x,y))", "all x.(Monkeypox(x) -> InfectiousDiseaseCausedByMonkeypoxVirus(x))", "all x y.((Monkeypox(x) & Monkeypox(y)) -> CausedBy(x,y))", "all x.(Monkeypox(x) -> (InfectiousDisease(x) & CausedByMonkeypox(x)))", "(InfectiousDisease(monkeypox) & CausedByMonkeypoxVirus(monkeypox))"]}
{"id": "folio_validation_19", "nl": "Monkeypox virus can occur in certain animals, including humans.", "fol": "exists x.(IsAnimal(x) & OccursMonkeypoxVirus(x))", "prediction": ["all x y.((MonkeypoxVirus(x) & Animal(y)) -> CanOccur(x,y))", "all x y.((MonkeypoxVirus(x) & Animal(y)) -> CanOccurIn(x,y))", "all x y.((MonkeypoxVirus(x) & Animal(y)) -> OccursIn(x,y))", "all x y.((MonkeypoxVirus(x) & Animal(y)) -> (OccursIn(x,y) | OccursIn(x,y)))", "all x y.((MonkeypoxVirus(x) & Animal(y) & Human(y)) -> CanOccur(x,y))", "all x y z.((MonkeypoxVirus(x) & Animal(y) & Animal(z)) -> CanOccur(x,y,z))", "all x y z.((MonkeypoxVirus(x) & Animal(y) & Human(z)) -> CanOccur(x,y,z))", "all x y z.((MonkeypoxVirus(x) & Animal(y) & Animal(z)) -> CanOccurIn(x,y,z))", "all x y z.((MonkeypoxVirus(x) & Animal(y) & Animal(z)) -> OccursIn(x,y,z))", "all x y z.((MonkeypoxVirus(x) & Animal(y) & Human(z)) -> CanOccurIn(x,y,z))", "all x.(MonkeypoxVirus(x) -> (OccursInAnimals(x) & IncludingHumans(x)))", "all x.(MonkeypoxVirus(x) -> exists y.(Animal(y) & OccursIn(x,y)))", "all x y.((MonkeypoxVirus(x) & Animal(y) & Human(y)) -> CanOccurIn(x,y))", "all x y.((MonkeypoxVirus(x) & Animal(y)) -> (OccursIn(x,y) & Human(y)))", "all x.(MonkeypoxVirus(x) -> exists y.(Animal(y) & OccursIn(x,y))))", "all x.(MonkeypoxVirus(x) -> CanOccurInAnimals(x))"]}
{"id": "folio_validation_20", "nl": "Humans are mammals.", "fol": "all x.(IsHuman(x) -> IsMammal(x))", "prediction": ["all x.(Human(x) -> Mammal(x))", "all x y.((Human(x) & Mammal(y)) -> Mammal(x))", "all x y.((Human(x) & Mammal(y)) -> Mammal(x,y))", "all x.(Human(x) -> Mammal(x))", "all x y.((Human(x) & Mammal(y)) -> (Mammal(x) & Mammal(y)))", "all x.(Human(x) -> (Mammal(x) & Mammal(x)))", "all x y.((Human(x) & Mammal(y)) -> (Mammal(x) & Mammal(x)))", "(Mammal(Human) & Mammal(Human))", "all x y.((Human(x) & Mammal(y)) -> (Mammal(x,y) & Mammal(x,y)))", "all x y.((Human(x) & Mammal(y)) -> (Mammal(x,y) & Mammal(y)))", "exists x.(Human(x) & Mammal(x))", "all x y.((Human(x) & Mammal(y)) -> (Mammal(x,y) & Mammal(x)))", "all x.(Human(x) -> Mammal(x))", "all x y.((Human(x) & Mammal(y)) -> (Mammal(x) | Mammal(y)))", "all x y.((Human(x) & Mammal(y)) -> Is(x,y))", "all x y.((Human(x) & Mammal(y)) -> Mammal(x))"]}
{"id": "folio_validation_21", "nl": "Mammals are animals.", "fol": "all x.(IsMammal(x) -> IsAnimal(x))", "prediction": ["all x.(Mammal(x) -> Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> Animal(x,y))", "all x.(Mammal(x) -> Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> (Animal(x) & Animal(y)))", "all x y.((Mammal(x) & Animal(y)) -> Is(x,y))", "all x y.((Mammal(x) & Animal(y)) -> (Animal(x) & Animal(x)))", "all x y.((Mammal(x) & Animal(y)) -> (Animal(x) | Animal(y)))", "exists x.(Mammal(x) & Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> (Animal(x) | Animal(x)))", "all x.((Mammal(x) & Animal(x)) -> Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> (Animal(x,y) | Animal(x,y)))", "all x.(Mammal(x) -> (Animal(x) & Animal(x)))", "all x y.((Mammal(x) & Animal(y)) -> Animal(z))", "all x y.((Mammal(x) & Animal(y)) -> (Animal(x,y) & Animal(y)))", "all x.((Mammal(x) & Animal(x)) -> (Animal(x) & Animal(x)))"]}
{"id": "folio_validation_22", "nl": "Symptons of Monkeypox include fever, headache, muscle pains, feeling tired, and so on.", "fol": "exists x.(ContractMonkeypox(x) & (HasFever(x) | HasHeadache(x) | HasMusclePain(x) | FeelsTired(x)))", "prediction": ["all x.((Sympton(x) & Monkeypox(x)) -> (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))", "all x.((Sympton(x) & Monkeypox(x)) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingFat(x)))", "all x.((Sympton(x) & Monkeypox(x)) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTense(x)))", "all x.(Monkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))", "all x.((Sympton(x) & Monkeypox(x)) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingFat(x)))", "all x.((Symptons(x) & Monkeypox(x)) -> (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))", "all x.(Monkeypox(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingFat(x)))", "all x.((SymptonsOfMonkeypox(x)) -> (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))", "all x.((Symptons(x) & Monkeypox(x)) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingFat(x)))", "all x.((Sympton(x) & Monkeypox(x)) -> (Fever(x) & Headache(x) & MusclePains(x) & Tired(x)))", "all x.((Sympton(x) & Monkeypox(x)) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTense(x)))", "all x.(Monkeypox(x) -> (IncludesFever(x) & IncludesHeadache(x) & IncludesMusclePains(x) & FeelsFat(x)))", "all x.((Symptons(x) & Monkeypox(x)) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingFat(x)))", "all x.((Symptons(x) & Monkeypox(x)) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTense(x)))", "all x.((Sympton(x) & Monkeypox(x)) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingTight(x)))", "all x.(Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingFat(x)))"]}
{"id": "folio_validation_23", "nl": "People feel tired when they get a glu.", "fol": "all x.((IsHuman(x) & HasFlu(x)) -> FeelsTired(x))", "prediction": ["all x.((Person(x) & GetsGlu(x)) -> Tired(x))", "all x.((Person(x) & GetsGlu(x)) -> FeelsStorm(x))", "all x.((Person(x) & GetsGlu(x)) -> FeelsTense(x))", "all x.((Person(x) & GetsGlu(x)) -> FeelsFeeled(x))", "all x.((Person(x) & GetsGlu(x)) -> FeelsFat(x))", "all x.((Person(x) & Glu(x)) -> Tired(x))", "all x.((Person(x) & GetsGlu(x)) -> FeelsFatigue(x))", "all x.((Person(x) & GetsGlu(x)) -> FeelsStiff(x))", "all x y.((Person(x) & Glu(y)) -> FeelsFat(x,y))", "all x.((Person(x) & GetsGlu(x)) -> FeelsStill(x))", "all x y.((Person(x) & Glu(y)) -> FeelsStorm(x,y))", "all x.((Person(x) & Glu(x)) -> FeelsStorm(x))", "all x.((Person(x) & GetsGlu(x)) -> FeelsFeelingStorm(x))", "all x y.((Person(x) & Glu(y) & Gets(x,y)) -> Tired(x))", "all x.((Person(x) & Glu(x)) -> FeelsFat(x))", "all x y.((Person(x) & Glu(y)) -> FeelsFeeled(x,y))"]}
{"id": "folio_validation_24", "nl": "There is an animal.", "fol": "exists x.IsAnimal(x)", "prediction": ["exists x.(Animal(x) & Animal(x))", "exists x.(Animal(x) & LivesIn(x))", "exists x.(Animal(x) & -Animal(x))", "exists x.(Animal(x) & LivesIn(x,y))", "exists x.(Animal(x) & HasAnimal(x))", "exists x.exists y.(Animal(x) & Animal(y))", "exists x.(Animal(x) & Pet(x))", "exists x.(Animal(x) & InAnimal(x))", "exists x.(Animal(x) & Breed(x))", "exists x.(Animal(x) & ExistsOf(x,y))", "exists x.(Animal(x) & Animal(y))", "exists x.(Animal(x) & LocatedIn(x,y))", "exists x.(Animal(x) & Animated(x))", "exists x.(Animal(x) & Dog(x))", "exists x.(Animal(x) & Eats(x))", "exists x.(Animal(x) & Is(x))"]}
{"id": "folio_validation_25", "nl": "If James is either a manager or in other countries,  then James either has lunch at home and works remotely from home, or neither has lunch at home nor works remotely from home.", "fol": "((IsManager(James) | IsInOtherCountries(James)) -> (HasLunchAtHome(James) <-> WorksRemotelyFromHome(James)))", "prediction": ["all x.((Manager(x) | InOtherCountries(x)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "all x.((James(x) & (Manager(x) | InOtherCountries(x))) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "all x.((Manager(x) | Manager(x)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "all x.((James(x) & (Manager(x) | InOtherCountries(x))) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | -HasLunchAtHome(x) & WorksRemotelyFromHome(x)))", "all x.((Manager(x) | InOtherCountries(x)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | -HasLunchAtHome(x) & WorksRemotelyFromHome(x)))", "all x.((Manager(x) | ManagerInOtherCountries(x)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "all x.((James(x) & (Manager(x) | InOtherCountries(x))) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x) | -HasLunchAtHome(x) & WorksRemotelyFromHome(x)))", "all x.((Manager(x) | Manager(x)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | -HasLunchAtHome(x) & WorksRemotelyFromHome(x)))", "all x.((Manager(x) | Manager(x)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x) | -HasLunchAtHome(x) & WorksRemotelyFromHome(x)))", "all x.((Manager(x) | InOtherCountries(x)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x) | -HasLunchAtHome(x) & WorksRemotelyFromHome(x)))", "all x.((James(x) & (Manager(x) | InOtherCountries(x))) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x)))))", "all x.((Manager(x) | OtherCountries(x)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "all x.((Manager(x) | InOtherCountries(x)) -> (HasLunchAtHome(x) | WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "all x.((Manager(x) | InOtherCountries(x)) -> (HasLunchAtHome(x) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "all x.((Manager(x) | InOtherCountries(x)) -> (HasLunchAtHome(x) | WorksRemotelyFromHome(x)))", "all x.((James(x) & (Manager(x) | InOtherCountries(x))) -> (HasLunchAtHome(x) & WorksRemotely(x)) | (-HasLunchAtHome(x) & WorksRemotely(x))))"]}
{"id": "folio_validation_26", "nl": "No one gets flu.", "fol": "all x.(IsHuman(x) -> -HasFlu(x))", "prediction": ["-exists x.(Person(x) & GetsFlu(x))", "-exists x.(Flu(x) & -HasFlu(x))", "-exists x.(Flu(x) & Gets(x,y))", "-exists x.(Number(x) & GetsFlu(x))", "-exists x.(Flu(x) & -GivesFlu(x))", "-exists x.(Flu(x) & GetsFlu(x))", "-exists x.(Flu(x) & Gets(x,Flu))", "-exists x.(Flu(x) & -Gives(x,flu))", "-exists x.(Flu(x) & -Gives(x,Flu))", "-exists x.(Flu(x) & Gets(x,flu))", "-exists x.(Flu(x) & HasFlu(x))", "all x.(Flu(x) -> -HasFlu(x))", "-exists x.(Human(x) & GetsFlu(x))", "-exists x.(Flu(x) & -GetsFlu(x))", "-all x.(Flu(x) -> Gets(x,y))", "-exists x.(Flu(x) & Gets(x))"]}
{"id": "folio_validation_27", "nl": "Symptons of Monkeypox include coughing.", "fol": "exists x.(ContractMonkeypox(x) & Coughing(x))", "prediction": ["all x.((Sympton(x) & Monkeypox(x)) -> IncludesCoughing(x))", "all x.((Sympton(x) & Monkeypox(x)) -> Coughing(x))", "all x y.((Sympton(x) & Monkeypox(y)) -> IncludesCoughing(x,y))", "all x.((Sympton(x) & Monkeypox(x)) -> IncludesCoughing(x))", "all x.((Sympton(x) & MonkeyPox(x)) -> IncludesCoughing(x))", "all x.((Symptote(x) & Monkeypox(x)) -> IncludesCoughing(x))", "all x.((Symptons(x) & Monkeypox(x)) -> IncludesCoughing(x))", "all x.((SymptonOfMonkeypox(x) & Coughing(x)) -> Includes(x,y))", "all x.((SymptonOfMonkeypox(x) & Coughing(x)) -> Includes(x,y))", "all x y.((Sympton(x) & Monkeypox(y)) -> (IncludesCoughing(x,y)))", "all x.((SymptonOfMonkeypox(x) & Coughing(x)) -> Includes(x))", "all x.((Sympton(x) & Monkeypox(x)) -> (IncludesCoughing(x)))", "all x.(SymptonOfMonkeypox(x) -> IncludesCoughing(x))", "all x.((Sympton(x) & Monkeypox(y)) -> IncludesCoughing(x,y))", "all x.((SymptonsOfMonkeypox(x) & Coughing(x)) -> Includes(x,y))", "all x.((SymptonsOfMonkeypox(x) & Coughing(x)) -> Includes(x,y))"]}
{"id": "folio_validation_28", "nl": "There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould's wild turkey, Merriam's wild", "fol": "all x.(IsWildTurkey(x) -> (IsEasternWildTurkey(x) | IsOsceolaWildTurkey(x) | IsGouldsWildTurkey(x) | IsMerriamsWildTurkey(x) | IsRioGrandeWildTurkey(x) | IsOcellatedWildTurkey(x)))", "prediction": ["all x.(WildTurkey(x) -> (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x)))", "all x.((WildTurkey(x) & EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x)) -> WildTurkey(x))", "all x.(WildTurkey(x) -> (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x)))", "exists x.(WildTurkey(x) & (EasternWildTurkey(x) | OsceolaWildTurkey(x) | GouldsWildTurkey(x) | MerriamsWildTurkey(x)))", "all x.(WildTurkey(x) -> (EasternWildTurkey(x) & OsceolaWildTurkey(x) & GouldsWildTurkey(x) & MerriamsWildTurkey(x)))", "exists x.(WildTurkey(x) & ((EasternWildTurkey(x) & OsceolaWildTurkey(x)) | (GouldsWildTurkey(x) & MerriamsWildTurkey(x))))", "all x y z.((WildTurkey(x) & (EasternWildTurkey(y) | OsceolaWildTurkey(y) | GouldsWildTurkey(z) | MerriamsWildTurkey(z))) -> WildTurkey(x,y,z))", "exists x.(WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & MerriamsTurkey(x))", "all x y z.((WildTurkey(x) & EasternWildTurkey(y) & OsceolaWildTurkey(z) & GouldsWildTurkey(x) & MerriamsWildTurkey(x)) -> WildTurkey(x,y,z))", "all x.(WildTurkey(x) -> (EasterwildTurkey(x) | OsceolawildTurkey(x) | GouldswildTurkey(x) | MerriamswildTurkey(x)))", "exists x.(WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & WildTurkey(x) & MerriamsTurkey(x))", "all x.((WildTurkey(x) & (EasternWildTurkey(x) | OsceolaWildTurkey(x))) -> (GouldsWildTurkey(x) | MerriamsWildTurkey(x)))", "exists x.(WildTurkey(x) & ((EasternWildTurkey(x) | OsceolaWildTurkey(x)) | (GouldsWildTurkey(x) | MerriamsWildTurkey(x))))", "all x y z.((WildTurkey(x) & EasternWildTurkey(y) & OsceolaWildTurkey(z) & GouldsWildTurkey(y) & MerriamsWildTurkey(y)) -> WildTurkey(x,y,z))", "exists x.(WildTurkey(x) & ((EasternWildTurkey(x) | OsceolaWildTurkey(x)) | (GouldsWildTurkey(x) & MerriamsWildTurkey(x))))", "all x y z.((WildTurkey(x) & EasternWildTurkey(y) & OsceolaWildTurkey(z) & GouldsWildTurkey(z) & MerriamsWildTurkey(x)) -> WildTurkey(x,y,z))"]}
{"id": "folio_validation_29", "nl": "turkey, Rio Grande wild turkey, and Ocellated wild turkey.", "fol": "-(IsWildTurkey(Tom) & IsEasternWildTurkey(Tom))", "prediction": ["(all x.(RioGrand(x) -> WildTurkey(x)) & all y.(RioGrand(y) -> WildTurkey(y))) & all z.(Ocellated(z) -> WildTurkey(z)))", "(all x.(RioGrand(x) -> WildTurkey(x)) & (RioGrand(x) -> WildTurkey(x)) & (Ocellated(x) -> WildTurkey(x)))", "(all x.(Rio GrandeWildTurkey(x) -> WildTurkey(x)) & all y.(OcellatedWildTurkey(y) -> WildTurkey(y)))", "(all x.(Rio Grande(x) -> WildTurkey(x)) & all y.(Ocellated(y) -> WildTurkey(y)))", "(all x.(RioGrand(x) -> WildTurkey(x)) & all y.(Ocellated(y) -> WildTurkey(y)))", "(all x.(RioGrand(x) -> WildTurkey(x)) & all y.(RioGrand(y) -> WildTurkey(y)) & all z.(Ocellated(z) -> WildTurkey(z)))", "(all x.(Rio GrandeWildTurkey(x) -> Wild(x)) & all y.(OcellatedWildTurkey(y) -> Wild(y)))", "(all x.(RioGrand(x) -> WildTurkey(x)) & all y.(RioGrand(y) -> WildTurkey(y)) & all z.(Ocellated(z) -> WildTurkey(z))))", "(all x y.((Rio Grande(x) & Wild(y)) -> Turkey(x)) & ((Rio Grande(y) & Wild(y)) -> Turkey(y)) & ((Ocellated(y) & Wild(y)) -> Turkey(y)))", "(all x.(RioGrand(x) -> WildTurkey(x)) & (Ocellated(x) -> WildTurkey(x)))", "(all x.(RioGrand(x) -> WildTurkey(x)) & all y.(RioGrand(y) -> WildTurkey(y))) & all z.(OcellatedWildTurkey(z) -> WildTurkey(z)))", "(all x y.((Rio Grande(x) & Wild(y)) -> Turkey(x)) & ((Rio Grande(x) & Wild(y)) -> Turkey(y)) & ((Ocellated(y) & Wild(y)) -> Turkey(y)))", "(all x.(RioGrand(x) -> WildTurkey(x)) & all y.(RioGrand(y) -> WildTurkey(y))) & all z.((RioGrand(z) -> WildTurkey(z)) -> Ocellated(z)))", "(all x y.((Rio Grande(x) & Wild(y)) -> Turkey(x)) & ((Rio Grande(y) & Wild(y)) -> Turkey(y)) & ((Rio Grande(y) & Wild(y)) -> Turkey(y)))", "(all x.(RioGrand(x) -> WildTurkey(x)) & (RioGrand(x) -> WildTurkey(x)) & (OcellatedWildTurkey(x) -> WildTurkey(x)))", "(all x.(Rio GrandeWildTurkey(x) -> WildTurkey(x)) & all y.(OcellatedWildTurkey(y)) -> WildTurkey(y)))"]}
{"id": "folio_validation_30", "nl": "Tom is not an Eastern wild turkey.", "fol": "-(IsWildTurkey(Tom) & IsOsceolaWildTurkey(Tom))", "prediction": ["all x.((Tom(x) & -EasternWildTurkey(x)) -> -EasternWildTurkey(x))", "(-EasternWildTurkey(Tom))", "all x.(Tom(x) -> -EasternWildTurkey(x))", "(-EasterlyWildTurkey(Tom))", "all x.((Tom(x) & -EasterlyWildTurkey(x)) -> -EasternWildTurkey(x))", "Tom is not EasternWildTurkey(Tom)", "all x.((Tom(x) & -EasterlyWildTurkey(x)) -> -EasterlyWildTurkey(x))", "all x.((Tom(x) & -EasternWildTurkey(x)) -> -EasterlyWildTurkey(x))", "-(EasternWildTurkey(Tom) & -EasternWildTurkey(Tom))", "all x.((Tom(x) & -EasternWildTurkey(x)) -> -EasternTurkey(x))", "-(EasternWildTurkey(Tom))", "-EasternWildTurkey(Tom)", "all x.((Tom(x) & -EasternWildTurkey(x)) -> -WildTurkey(x))", "all x.((Tom(x) & -EasternWildTurkey(x)) -> -EstonianWildTurkey(x))", "all x.((Tom(x) & -EasternWildTurkey(x)) -> -Easterly(x))", "all x.(Tom(x) -> -EasterlyWildTurkey(x))"]}
{"id": "folio_validation_31", "nl": "Tom is not an Osceola wild turkey.", "fol": "(IsWildTurkey(Tom) -> -(IsGouldsWildTurkey(Tom) | IsMerriamsWildTurkey(Tom) | IsRioGrandeWildTurkey(Tom)))", "prediction": ["all x.((Tom(x) & -OsceolaWildTurkey(x)) -> -OsceolaWildTurkey(x))", "all x.((Tom(x) & -OsceolaWildTurkey(x)) -> -WildTurkey(x))", "all x.(Tom(x) -> -OsceolaWildTurkey(x))", "all x.((Tom(x) & -OsceolawildTurkey(x)) -> -OsceolawildTurkey(x))", "(-OsceolaWildTurkey(Tom))", "Tom is not OsceolaWildTurkey(Tom)", "all x.((Tom(x) & -OsceolaWildTurkey(x)) -> -SceolaWildTurkey(x))", "all x.((Tom(x) & -OsceolaWildTurkey(x)) -> -(WildTurkey(x) & OsceolaWildTurkey(x)))", "all x.((Tom(x) & -OsceolaWildTurkey(x)) -> -(WildTurkey(x) & OsceolaWildTurkey(x))))", "all x.((Tom(x) & -OsceolaWildTurkey(x)) -> -(WildTurkey(x) & Osceola(x))))", "Tom is not OsceolawildTurkey(Tom)", "all x.((Tom(x) & -OsceolaWildTurkey(x)) -> -Osceola(x))", "all x.((Tom(x) & -OsceolaWildTurkey(x)) -> -(WildTurkey(x) & Osceola(x)))", "(-WildTurkey(Tom) & Osceola(Tom))", "-(OsceolaWildTurkey(Tom))", "all x.((Tom(x) & -OsceolaWildTurkey(x)) -> -OsceolawildTurkey(x))"]}
{"id": "folio_validation_32", "nl": "Tom is also not a Gould's wild turkey, or a Merriam's wild turkey, or a Rio Grande wild turkey.", "fol": "IsWildTurkey(Tom)", "prediction": ["all x.(Tom(x) -> (-GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x)))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x))) -> -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x))))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x))) -> -GouldsWildTurkey(x))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x))) -> -(GouldsWildTurkey(x) & MerriamsWildTurkey(x)))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x))) -> -(GouldsWildTurkey(x) | MerriamsWildTurkey(x)))", "all x.(Tom(x) -> -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x)))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x))) -> -(GouldsWildTurkey(x) | MerriamsWildTurkey(x)) | RioGrandwildTurkey(x)))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x))) -> -WildTurkey(x))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x))) -> -(GouldsWildTurkey(x) & MerriamsWildTurkey(x)) & -(MerriamsWildTurkey(x) & RioGrandwildTurkey(x)))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandiaWildTurkey(x))) -> -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandiaWildTurkey(x))))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x))) -> -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x)))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandeWildTurkey(x))) -> -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandeWildTurkey(x))))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x))) -> -(GouldsWildTurkey(x) | MerriamsWildTurkey(x)) & -(MerriamsWildTurkey(x) & RioGrandwildTurkey(x)))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x))) -> -(GouldsWildTurkey(x) & MerriamsWildTurkey(x)) & -(MerriamsWildTurkey(x) & RioGrandwildTurkey(x))))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x))) -> -(GouldsWildTurkey(x) | MerriamsWildTurkey(x))))", "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandinWildTurkey(x))) -> -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandinWildTurkey(x))))"]}
{"id": "folio_validation_33", "nl": "Tom is an Ocellated wild turkey.", "fol": "IsOcellatedWildTurkey(Tom)", "prediction": ["Tom is OcellatedWildTurkey(Tom)", "all x.((Tom(x) & OcellatedWildTurkey(x)) -> Ocellated(x))", "All x.(Tom(x) -> OcellatedWildTurkey(x))", "All x.((Tom(x) & OcellatedWildTurkey(x)) -> Ocellated(x))", "all x.((Tom(x) & Ocellated(x)) -> WildTurkey(x))", "all x.(Tom(x) -> OcellatedWildTurkey(x))", "All x.((Tom(x) & Ocellated(x)) -> WildTurkey(x))", "(Ocellated(Tom) & WildTurkey(Tom))", "all x.((Tom(x) & OcellatedWildTurkey(x)) -> OcellatedWildTurkey(x))", "(OcellatedWildTurkey(Tom) & Ocellated(Tom))", "(OcellatedWildTurkey(Tom) -> Ocellated(Tom))", "All x.((Tom(x) & OcellatedWildTurkey(x)) -> OcellatedWildTurkey(x))", "all x.((Tom(x) & OcellatedWildTurkey(x)) -> WildTurkey(x))", "Tom is a OcellatedWildTurkey(Tom)", "(OcellatedWildTurkey(Tom) & OcellatedWildTurkey(Tom))", "All x.((Tom(x) & OcellatedWildTurkey(x)) -> WildTurkey(x))"]}
{"id": "folio_validation_34", "nl": "Tom is an Eastern wild turkey.", "fol": "IsEasternWildTurkey(Tom)", "prediction": ["Tom is EasternWildTurkey(Tom)", "all x.((Tom(x) & EasternWildTurkey(x)) -> WildTurkey(x))", "all x.(Tom(x) -> EasternWildTurkey(x))", "All x.(Tom(x) -> EasternWildTurkey(x))", "(EasternWildTurkey(Tom)", "all x.((Tom(x) & EasternWildTurkey(x)) -> Wild(x))", "(EasternWildTurkey(Tom) & EasternTurkey(Tom))", "(EasternWildTurkey(Tom) & -EasternWildTurkey(Tom))", "(EasternWildTurkey(Tom) -> WildTurkey(Tom))", "(EasternWildTurkey(Tom) & WildTurkey(Tom))", "All x.(Tom(x) -> WildTurkey(x))", "(EasternWildTurkey(Tom) & LivesIn(Tom))", "(EasternWildTurkey(Tom) & -Easterly(Tom))", "Tom is a EasternWildTurkey(Tom)", "Tom is an EasternWildTurkey(Tom)", "(EasternWildTurkey(Tom) & -EasternTurkey(Tom))"]}
{"id": "folio_validation_35", "nl": "Joey is a wild turkey.", "fol": "IsWildTurkey(Joey)", "prediction": ["all x.(Joey(x) -> WildTurkey(x))", "All x.(Joey(x) -> WildTurkey(x))", "all x.((Joey(x) & WildTurkey(x)) -> WildTurkey(x))", "(WildTurkey(Joey) -> WildTurkey(Joey))", "(WildTurkey(Joey) & WildTurkey(Joey))", "(WildTurkey(Joey))", "(WildTurkey(Joey) & -WildTurkey(Joey))", "all x.((Joey(x) & WildTurkey(x)) -> Wild(x))", "(WildTurkey(Joey) & Wild(Joey))", "(WildTurkey(Joey)", "(WildTurkey(Joey) -> Wild(Joey))", "all x.(Joey(x) -> WildTurkey(x))", "(WildTurkey(Joey) -> WildTurkey(Joey))", "(WildTurkey(Joey) -> Wild(Joey))", "all x y.((Joey(x) & Turkey(y)) -> Wild(x,y))", "all x y.((Joey(x) & Turkey(y)) -> Wild(x))"]}
{"id": "folio_validation_36", "nl": "A Japanese game company created the game the Legend of Zelda.", "fol": "exists x.(IsJapanese(x) & IsVideoGameCompany(x) & IsGame(Thelegendofzelda) & CreatedGame(x,Thelegendofzelda))", "prediction": ["all x y.((JapaneseGameCompany(x) & LegendOfZelda(y)) -> CreatedBy(x,y))", "all x y z.((JapaneseGameCompany(x) & LegendOfZelda(y) & Game(z)) -> CreatedBy(x,y,z))", "all x.((JapaneseGameCompany(x) & LegendOfZelda(x)) -> CreatedBy(x,y))", "all x y z.((JapaneseGameCompany(x) & LegendOfZelda(y) & Game(z)) -> CreatedBy(x,y))", "all x y z.((JapaneseGameCompany(x) & LegendOfZelda(y) & Game(z)) -> CreatedBy(x,z))", "all x y z.((JapaneseGameCompany(x) & Game(y) & LegendOfZelda(z)) -> CreatedBy(x,y,z))", "all x y.((JapaneseGameCompany(x) & LegendOfZelda(y)) -> Creates(x,y))", "all x y.((JapaneseGameCompany(x) & LegendOfZelda(y)) -> Created(x,y))", "all x y z.((JapaneseGameCompany(x) & LegendOfZelda(y)) -> CreatedBy(x,y))", "all x y.((JapaneseGameCompany(x) & LegendOfZelda(y)) -> CreatesGame(x,y))", "all x y z.((JapaneseGameCompany(x) & LegendOfZelda(y) & Game(z)) -> Creates(x,y,z))", "all x.((JapaneseGameCompany(x) & LegendOfZelda(x)) -> CreatedBy(x,z))", "all x y z.((JapaneseGameCompany(x) & LegendOfZelda(y) & LegendOfZelda(z)) -> CreatedBy(x,y,z))", "all x y.((JapaneseGameCompany(x) & Game(y)) -> LegendOfZelda(x,y))", "all x y z.((JapaneseGameCompany(x) & LegendOfZelda(y) & Game(z)) -> Created(x,y,z))", "all x.(JapaneseGameCompany(x) -> CreatesGame(x,LegendOfZelda))"]}
{"id": "folio_validation_37", "nl": "All games in the Top 10 list are made by Japanese game companies.", "fol": "all x y.((IsGame(x) & IsInTop10List(x) & CreatedGame(x,y)) -> IsJapanese(y))", "prediction": ["all x.((Game(x) & Top10List(x)) -> MadeByJapaneseGameCompanies(x))", "all x.((Game(x) & Top10List(x)) -> MadeByJapaneseGameCompany(x))", "all x.(Top10(x) -> MadeByJapaneseGameCompanies(x))", "all x.(Top10List(x) -> MadeByJapaneseGameCompanies(x))", "all x.((Game(x) & Top10(x)) -> MadeByJapaneseGameCompanies(x))", "all x.((Game(x) & Top10(x)) -> MadeByJapaneseGameCompany(x))", "all x.(Top10(x) -> MadeByJapaneseGameCompany(x))", "all x y.((Game(x) & Top10List(y)) -> MadeByJapaneseGameCompany(x,y))", "all x y.((Game(x) & Top10List(y)) -> MadeByJapaneseGameCompanies(x,y))", "all x.(Top10(x) -> (MadeByJapaneseGameCompanies(x) & MadeByJapaneseGameCompanies(x)))", "all x.(Top10List(x) -> MadeByJapaneseGameCompany(x))", "all x.(Top10List(x) -> (MadeByJapaneseGameCompanies(x) & MadeByJapaneseGameCompanies(x)))", "all x.((Game(x) & InTop10List(x)) -> MadeByJapaneseGameCompanies(x))", "all x.(Top10(x) -> (MadeByJapaneseGameCompanies(x) | MadeByJapaneseGameCompanies(x)))", "all x y.((Game(x) & Top10List(y)) -> MadeBy(x,y))", "all x.((Game(x) & InTop10List(x)) -> MadeByJapaneseGameCompany(x))"]}
{"id": "folio_validation_38", "nl": "[BG] If a game sells more than one million copies, then it will be selected into the Top 10 list.", "fol": "all x.((IsGame(x) & SellsMoreThanCopies(x,Onemillioncopies)) -> IsTop10Game(x))", "prediction": ["all x.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> Top10List(x))", "all x.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> SelectedIntoTop10List(x))", "all x.(SellsMoreThanOneMillionCopies(x) -> Top10List(x))", "all x.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> SelectedIntoTop10(x))", "all x.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> TopTenList(x))", "all x.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> SelectedIntoTop10List(x))", "all x y.((Game(x) & SellsMoreThan(x,y) & MillionCopies(y)) -> Top10List(x))", "all x y.((Game(x) & SellsMoreThanOneMillionCopies(x) & Top10List(y)) -> SelectedInto(x,y))", "all x y.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> Top10List(y))", "all x.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> Top10(x))", "all x.((Game(x) & SellsMoreThanMillionCopies(x)) -> Top10List(x))", "all x.((Game(x) & SellsMoreThan(x,y) & MillionCopies(y)) -> Top10List(x))", "all x.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> SelectedIntoTop10(x))", "all x y.((Game(x) & SellsMoreThanOneMillionCopies(x,y)) -> Top10List(x))", "all x.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> Top-10List(x))", "all x y.((Game(x) & SellsMoreThan(x,y) & MillionCopies(x)) -> Top10List(x))"]}
{"id": "folio_validation_39", "nl": "The Legend of Zelda sold more than one million copies.", "fol": "SellsMoreThanCopies(Thelegendofzelda,Onemillioncopies)", "prediction": ["All x.(LegendOfZelda(x) -> SoldMoreThanOneMillionCopies(x))", "All x.(LegendOfZelda(x) -> SoldMoreThanMillionCopies(x))", "all x.(LegendOfZelda(x) -> SoldMoreThanOneMillionCopies(x))", "All x.(LegionOfZelda(x) -> SoldMoreThanOneMillionCopies(x))", "The LegendOfZelda(x) soldMoreThanOneMillionCopies(x))", "The LegendOfZeldaSoldMoreThanOneMillionCopies(x)", "(SoldMoreThanOneMillionCopies(LegendOfZelda))", "The LegendOfZeldaSoldMoreThanOneMillionCopies(LegendOfZelda)", "The LegendOfZeldaSoldMoreThanOneMillionCopies(LetterOfZelda)", "The LegendOfZelda(x) & SoldMoreThanOneMillionCopies(x))", "The LegendOfZeldaSoldMoreThanOneMillionCopies(LordOfZelda)", "The LegendOfZeldaSoldMoreThanOneMillionCopies(x) -> LegendOfZelda(x))", "all x.(LegendOfZelda(x) -> SoldMoreThanMillionCopies(x))", "All x.(LegendOfZelda(x) -> SoldMoreThan(x,million))", "All x.(LegionOfZelda(x) -> SoldMoreThanMillionCopies(x))", "All x.(LegendOfZelda(x) -> SoldMoreThan(x,y))"]}
{"id": "folio_validation_40", "nl": "The Legend of Zelda is in the Top 10 list.", "fol": "IsTop10Game(Thelegendofzelda)", "prediction": ["All x.(LegendOfZelda(x) -> Top10List(x))", "The LegendOfZelda(x) -> Top10List(x))", "All x.(LegendOfZelda(x) -> Top10(x))", "The LegendOfZelda(x) -> Top10List(x))", "All x.(LegionOfZelda(x) -> Top10List(x))", "All x.(LegendOfZelda(x) -> TopTenList(x))", "All x.(LegendOfZelda(x) -> InTop10List(x))", "All x.(LegendOfZelda(x) -> InTop10(x))", "All x.(LegendOfZelda(x) -> TopThan(x))", "The LegendOfZelda(x) -> TopTenList(x))", "The LegendOfZelda(x) -> InTop10List(x))", "The LegendOfZeldaInTop10List(x)", "All x.(LegendOfZelda(x) -> Top-10List(x))", "The LegendOfZelda(x) & Top10List(x))", "All x.(LegionOfZelda(x) -> InTop10List(x))", "The LegendOfZelda(x) -> TopTenList(x))"]}
{"id": "folio_validation_41", "nl": "FIFA 22 is made by a Japanese video game company.", "fol": "all x.((CreatedGame(Fifa22,x) -> IsJapanese(x)) & IsVideoGameCompany(x))", "prediction": ["all x y.((Football(x) & JapaneseVideoGameCompany(y)) -> MadeBy(x,y))", "all x.(FoxFox22(x) -> MadeByJapaneseVideoGameCompany(x))", "all x.((Football(x) & JapaneseVideoGameCompany(x)) -> MadeBy(x,Football22))", "all x y z.((Football(x) & VideoGameCompany(y) & Japanese(z)) -> MadeBy(x,y,z))", "all x.(Football(x) -> MadeByJapaneseVideoGameCompany(x))", "all x y.((Football(x) & VideoGameCompany(y)) -> MadeBy(x,y))", "all x.(Football22(x) -> MadeByJapaneseVideoGameCompany(x))", "all x y.((FoxFamous(x) & JapaneseVideoGameCompany(y)) -> MadeBy(x,y))", "all x y z.((Football(x) & JapaneseVideoGameCompany(y) & Company(z)) -> MadeBy(x,y,z))", "all x y z.((Football(x) & VideoGameCompany(y) & Japanese(z)) -> MadeBy(x,y))", "all x y.((Football(x) & VideoGameCompany(y) & MadeBy(x,y)) -> MadeBy(x,y))", "all x y.((FoxFame(x) & JapaneseVideoGameCompany(y)) -> MadeBy(x,y))", "all x.(FoxFame(x) -> MadeByJapaneseVideoGameCompany(x))", "all x y z.((Football(x) & VideoGameCompany(y) & Japan(z)) -> MadeBy(x,y,z))", "all x.(Football(x) -> (MadeByJapaneseVideoGameCompany(x) & MadeByJapaneseCompany(x)))", "all x.((Football22(x) & JapaneseVideoGameCompany(x)) -> MadeBy(x,y))"]}
{"id": "folio_validation_42", "nl": "The Legend of Zelda is not in the Top 10 list.", "fol": "-IsTop10Game(Thelegendofzelda)", "prediction": ["All x.(LegendOfZelda(x) -> -Top10List(x))", "(-Top10List(LegendOfZelda))", "All x.(LegendOfZelda(x) -> -Top10(x))", "The LegendOfZelda(x) - Top10List(x))", "The LegendOfZelda(x) -Top10List(x))", "(-Top10(LegendOfZelda))", "The LegendOfZelda - Top10List(x)", "Die LegendOfZelda(x) - Top10List(x))", "The LegendOfZelda(x) & -Top10List(x))", "(-Top10List(LegendOfZelda) & -Top10List(LegendOfZelda))", "-Top10List(LegendOfZelda)", "All x.(LegendOfZelda(x) -> -TopTenList(x))", "All x.(LegendOfZelda(x) -> -Top-10List(x))", "All x.(LegendOfZelda(x) -> -InTop10List(x))", "(-Top10List(LegionOfZelda))", "The LegendOfZelda -Top10List(x)"]}
{"id": "folio_validation_43", "nl": "All squares have four sides.", "fol": "all x.(IsSquare(x) -> HasFourSides(x))", "prediction": ["all x.(Square(x) -> HasFourSides(x))", "all x.(Square(x) -> FourSides(x))", "all x.(Square(x) -> HasSides(x,4))", "all x y.((Square(x) & Side(y)) -> HasFour(x,y))", "all x.(Square(x) -> HasFourSides(x))", "all x.((Square(x) & HasFourSides(x)) -> HasFourSides(x))", "all x y.((Square(x) & Square(y)) -> HasFourSides(x,y))", "all x y.((Square(x) & Side(y)) -> HasFourSides(x,y))", "all x.exists y.(Square(x) & Side(y) & HasFour(x,y))", "All x.(Square(x) -> HasFourSides(x))", "all x.(Square(x) -> HasQuadrantSides(x))", "all x.exists y.(Square(x) & Side(y) & HasFourSides(x,y))", "all x.(Square(x) -> (HasFourSides(x)))", "all x.(Shaped(x) -> HasFourSides(x))", "all x y.((Square(x) & Side(y)) -> HasFourSides(x))", "(all x.(Square(x) -> HasFourSides(x)))"]}
{"id": "folio_validation_44", "nl": "All four-sided things are shapes. ", "fol": "all x.(HasFourSides(x) -> IsShape(x))", "prediction": ["all x.(FourSidedThing(x) -> Shape(x))", "all x.(FourSided(x) -> Shape(x))", "all x.((FourSidedThing(x) & Shape(x)) -> Shape(x))", "all x.((FourSided(x) & Shape(x)) -> Shape(x))", "all x.(FourSides(x) -> Shape(x))", "all x.(FourSided(x) -> Shape(x))", "all x.(FourSidedThing(x) -> Shape(x))", "all x.((FourSides(x) & Shape(x)) -> Shape(x))", "all x.(FourSidedIssue(x) -> Shape(x))", "all x.((FourSidedThing(x) & Shapes(x)) -> Shape(x))", "all x.(FourSidedWord(x) -> Shape(x))", "all x.(FourSidedWhat(x) -> Shape(x))", "all x.(FourSidedItem(x) -> Shape(x))", "all x.(FourSidedShape(x) -> Shape(x))", "all x.((FourSidedThing(x) & Shape(x)) -> Shapes(x))", "all x.(FourSidedTen(x) -> Shape(x))"]}
{"id": "folio_validation_45", "nl": "All squares are shapes.", "fol": "all x.(IsSquare(x) -> IsShape(x))", "prediction": ["all x.(Square(x) -> Shape(x))", "all x y.((Square(x) & Shape(y)) -> Shape(x))", "all x.(Square(x) -> Shape(x))", "all x y.((Square(x) & Shape(y)) -> Shape(x,y))", "all x.((Square(x) & Shape(x)) -> Shape(x))", "all x.exists y.(Square(x) & Shape(y) & Shape(x,y))", "(all x.(Square(x) -> Shape(x)))", "all x.exists y.(Square(x) & Shape(y) & Shape(x))", "all x.exists y.(Square(x) & Shape(y) & Shape(y))", "all x.exists y.(Square(x) & Shape(y))", "All x.(Square(x) -> Shape(x))", "all x.(Shaped(x) -> Shape(x))", "(all x.(Square(x) -> Shape(x))", "exists x.(Square(x) & Shape(x))", "all x.exists y.(Square(x) & Shape(y) & Shape(z))", "-all x.(Square(x) -> Shape(x))"]}
{"id": "folio_validation_46", "nl": "All rabbits are cute. ", "fol": "all x.(IsRabbit(x) -> IsCute(x))", "prediction": ["all x.(Rabbit(x) -> Cute(x))", "all x y.((Rabbit(x) & Rabbit(y)) -> Cute(x))", "all x.(Bat(x) -> Cute(x))", "all x y.((Rabbit(x) & Rabbit(y)) -> Cute(x,y))", "all x.(Rabbit(x) -> CUTE(x))", "all x.(Rainbow(x) -> Cute(x))", "all x.((Rabbit(x) & Cute(x)) -> Cute(x))", "all x.(Rabbit(x) -> Cute(x))", "all x y.((Rabbit(x) & Rabbit(y)) -> Cute(y))", "(all x.(Rabbit(x) -> Cute(x)))", "all x.(Rabbit(x) -> Chic(x))", "all x.((Rabbit(x) & Cute(x)) -> Rabbit(x))", "-all x.(Rabbit(x) -> Cute(x))", "(all x.(Rabbit(x) -> Cute(x))", "exists x.(Rabbit(x) & Cute(x))", "All x.(Rabbit(x) -> Cute(x))"]}
{"id": "folio_validation_47", "nl": "Some turtles exist. ", "fol": "exists x.IsTurtle(x)", "prediction": ["exists x.(Turtle(x) & Turtle(x))", "exists x.(Turtle(x) & Exists(x))", "exists x.(Turtle(x) & Turtle(y))", "exists x.(Turtle(x) & -exists y.(Turtle(y) & Turtle(z)))", "exists x.(Turtle(x) & -exists y.(Turtle(y) & Turtle(y)))", "exists x.(Turtle(x) & Lives(x))", "exists x.(Turtle(x) & LivesIn(x))", "exists x.(Turtle(x) & exists y.(Turtle(y) & Exists(x,y))))", "exists x.(Turtle(x) & -exists y.(Turtle(y) & Turtle(x)))", "exists x.(Turtle(x) & exists y.(Turtle(y) & Turtle(z)))", "exists x.(Turtle(x) & exists y.(Turtle(y) & Exists(x,y)))", "exists x.(Turtle(x) & exists y.(Turtle(y) & Turtle(y)))", "exists x.(Turtle(x) & -exists y.(Turtle(y) & Exists(x,y)))", "exists x.(Turtle(x) & exists y.(Turtle(y) & LivesIn(x,y)))", "exists x.(Turtle(x) & -exists y.(Turtle(y) & Exists(x,y))))", "exists x.(Turtle(x) & -exists y.(Turtle(y) | Turtle(y)))"]}
{"id": "folio_validation_48", "nl": "An animal is either a rabbit or a squirrel.", "fol": "all x.(IsRabbit(x) | IsSquirrel(x))", "prediction": ["all x.(Animal(x) -> (Rabbit(x) | Squirrel(x)))", "all x.(Animal(x) -> (Rabbit(x) | Squirrel(x)))", "all x.(Animal(x) -> ((Rabbit(x) | Squirrel(x))))", "exists x.(Animal(x) & (Rabbit(x) | Squirrel(x)))", "all x.(Animal(x) -> (HasRabbit(x) | HasSquirrel(x)))", "all x.(Animal(x) -> (Bat(x) | Squirrel(x)))", "all x.(Animal(x) -> (Batman(x) | Squirrel(x)))", "all x.(Animal(x) -> (Rabbit(x) | Squash(x)))", "all x.(Animal(x) -> (IsRabbit(x) | IsSquirrel(x)))", "all x.(Animal(x) -> (Rainbow(x) | Squirrel(x)))", "all x.((Animal(x) & Rabbit(x)) | Squirrel(x))", "all x.(Animal(x) -> (Rabbit(x) | Snuggle(x)))", "all x.(Animal(x) -> (Baton(x) | Squirrel(x)))", "all x y.((Animal(x) & Rabbit(y)) | Squirrel(y))", "all x y.((Animal(x) & Rabbit(y)) | Squirrel(x))", "all x.(Animal(x) -> (Poodle(x) | Squirrel(x)))"]}
{"id": "folio_validation_49", "nl": "If something is skittish, then it is not still.", "fol": "all x.(IsSkittish(x) -> -IsStill(x))", "prediction": ["all x.(Skittish(x) -> -Still(x))", "all x.((Skittish(x) & -Still(x)) -> Skittish(x))", "all x.((Skittish(x) & -Still(x)) -> -Still(x))", "all x.((Still(x) & Skittish(x)) -> -Still(x))", "all x.((Skittish(x)) -> -Still(x))", "all x.((Skittish(x) & -Still(x)) -> -Skittish(x))", "all x.(Stictish(x) -> -Still(x))", "all x.((Skittish(x) -> -Still(x))", "all x.((Skittish(x) & -Still(x)) -> NotStill(x))", "all x.(Skittish(x) -> -Still(x))", "all x.(Sketchish(x) -> -Still(x))", "all x.(Sskittish(x) -> -Still(x))", "all x.(Scartish(x) -> -Still(x))", "all x.(Still(x) -> -Skittish(x))", "all x.(Stiktish(x) -> -Still(x))", "all x.(Skirtish(x) -> -Still(x))"]}
{"id": "folio_validation_50", "nl": "All squirrels are skittish.", "fol": "all x.(IsSquirrel(x) -> IsSkittish(x))", "prediction": ["all x.(Squirrel(x) -> Skittish(x))", "all x.(Spider(x) -> Skittish(x))", "all x y.((Squirrel(x) & Squirrel(y)) -> Skittish(x))", "all x.(Squirrel(x) -> Skittish(x))", "all x y.((Squirrel(x) & Squirrel(y)) -> Skittish(x,y))", "all x.(Squash(x) -> Skittish(x))", "(all x.(Squirrel(x) -> Skittish(x)))", "all x y.((Squirrel(x) & Squirrel(y)) -> Skittish(y))", "all x.(Snake(x) -> Skittish(x))", "all x.(Scarlet(x) -> Skittish(x))", "all x.(Snowflake(x) -> Skittish(x))", "exists x.(Squirrel(x) & Skittish(x))", "all x.(Squaw(x) -> Skittish(x))", "all x.(Sparrow(x) -> Skittish(x))", "all x.(Snail(x) -> Skittish(x))", "(all x.(Squirrel(x) -> Skittish(x))"]}
{"id": "folio_validation_51", "nl": "Rock is still.", "fol": "IsStill(Rock)", "prediction": ["Rock is still.", "all x.(Rock(x) -> Still(x))", "All x.(Rock(x) -> Still(x))", "Rock exists x.(Rock(x) & Still(x))", "exists x.(Rock(x) & Still(x))", "Rock is Still(Rock)", "(Rock(Rock) & Still(Rock))", "Rock is Still.", "all x.(Rock(x) -> Still(x))", "RockIsStill(Rock)", "Rock is Still(rock)", "All x.(Rock(x) -> Still(x))", "Rock(rock) -> Still(rock))", "Rock is Still(Rock,y)", "Rock IsStill(Rock)", "Rock(rock) & Still(rock))"]}
{"id": "folio_validation_52", "nl": "Rock is a turtle.", "fol": "IsTurtle(Rock)", "prediction": ["all x.(Rock(x) -> Turtle(x))", "All x.(Rock(x) -> Turtle(x))", "(Turtle(Rock) & Turtle(Rock))", "((Rock(Rock) & Turtle(Rock)) -> Turtle(Rock))", "(Turtle(Rock))", "exists x.(Rock(x) & Turtle(x))", "Rock is Turtle(Rock)", "(Turtle(Rock) -> Turtle(Rock))", "Rock is a Turtle(Rock)", "(Turtle(Rock) -> Turtle(Rock))", "(Turtle(Rock) & -Turtle(Rock))", "All x.(Rock(x) -> Turtle(x))", "all x.(Rock(x) -> Turtle(x))", "((Rock(Rock) & Turtle(Rock)) -> -Turtle(Rock))", "Rock is turtle.", "((Rock(Rock) & Turtle(Rock)) -> Is(Rock,Turtle))"]}
{"id": "folio_validation_53", "nl": "Rock is not a turtle.", "fol": "-IsTurtle(Rock)", "prediction": ["all x.(Rock(x) -> -Turtle(x))", "-Turtle(Rock)", "All x.(Rock(x) -> -Turtle(x))", "(-Turtle(Rock))", "exists x.(Rock(x) & -Turtle(x))", "Rock is notTurtle(Rock)", "all x.(Rock(x) -> -Turtle(x))", "-(Rock(Rock) & Turtle(Rock))", "(-Turtle(Rock) & -Turtle(Rock))", "All x.(Rock(x) -> -Turtle(x))", "all x.(Rock(x) -> -Treek(x))", "Rock is -Turtle(Rock)", "(-Turtle(Rock) -> -Turtle(Rock))", "all x.(Rock(x) & -Turtle(x))", "Rock -Turtle(Rock)", "(-Turtle(Rock) -> -Turtle(Rock))"]}
{"id": "folio_validation_54", "nl": "Rock is a turtle or cute.", "fol": "(IsTurtle(Rock) | IsCute(Rock))", "prediction": ["all x.(Rock(x) -> (Turtle(x) | Cute(x)))", "exists x.(Rock(x) & (Turtle(x) | Cute(x)))", "all x.(Rock(x) -> ((Turtle(x) | Cute(x))))", "(all x.(Rock(x) -> (Turtle(x) | Cute(x))))", "all x.(Rock(x) -> (Treek(x) | Cute(x)))", "all x.(Rock(x) -> (Turtle(x) | Cute(x)))", "all x.(Rock(x) -> (Turtle(x) | CUTE(x)))", "exists x.(Rock(x) & (Turtle(x) | Cute(x))))", "All x.(Rock(x) -> (Turtle(x) | Cute(x)))", "all x y.((Rock(x) & Turtle(y)) | Cute(y))", "all x.(Rock(x) -> (Storm(x) | Cute(x)))", "exists x.(Rock(x) & ((Turtle(x) | Cute(x))))", "all x.(Rock(x) -> (Teacher(x) | Cute(x)))", "(exists x.(Rock(x) & Turtle(x)) | Cute(x)))", "all x.(Rock(x) -> (Turtle(x) | Chic(x)))", "(all x.(Rock(x) -> Turtle(x)) | Cute(x)))"]}
{"id": "folio_validation_55", "nl": "If Rock is not both a turtle and a squirrel, then Rock is either cute or skittish.", "fol": "(((-(IsTurtle(Rock) & IsSquirrel(Rock)) -> IsCute(Rock)) & -IsSkittish(Rock)) | (-(-(IsTurtle(Rock) & IsSquirrel(Rock)) -> IsCute(Rock)) & IsSkittish(Rock)))", "prediction": ["all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Cute(x) | Skittish(x)))", "all x.((Rock(x) & -Turtle(x) & Squirrel(x)) -> (Cute(x) | Skittish(x)))", "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Cute(x) | Skittish(x))))", "all x.((Rock(x) & -(Turtle(x) | Squirrel(x))) -> (Cute(x) | Skittish(x)))", "all x.((Rock(x) & -Turtle(x) & Squirrel(x)) -> (Crazy(x) | Skittish(x)))", "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Crazy(x) | Skittish(x)))", "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Cozy(x) | Skittish(x)))", "all x.((Rock(x) & -Turtle(x) & Squirrel(x)) -> (Cozy(x) | Skittish(x)))", "all x.((Rock(x) & -Turtle(x) & Squirrel(x)) -> (CUTE(x) | Skittish(x)))", "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (CUTE(x) | Skittish(x)))", "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) | Skittish(x)))", "all x.((Rock(x) & -(Turtle(x) | Squirrel(x)))) -> (Cute(x) | Skittish(x)))", "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Cozy(x) | Skittish(x))))", "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Crazy(x) | Skittish(x))))", "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (CUTE(x) | Skittish(x))))", "all x.((Rock(x) & -(Turtle(x) | Squirrel(x))) -> (Cute(x) | Skittish(x))))"]}
{"id": "folio_validation_56", "nl": "If Rock is cute and still, then Rock is a turtle and skittish.", "fol": "(((IsCute(Rock) & IsStill(Rock)) -> IsTurtle(Rock)) & IsSkittish(Rock))", "prediction": ["all x.((Rock(x) & Cute(x) & Still(x)) -> (Turtle(x) & Skittish(x)))", "all x.((Rock(x) & CuteAndStill(x)) -> (Turtle(x) & Skittish(x)))", "all x.((Rock(x) & CUTE(x) & Still(x)) -> (Turtle(x) & Skittish(x)))", "all x.((Cute(x) & Still(x)) -> (Turtle(x) & Skittish(x)))", "all x.((Rock(x) & Cute(x) & Still(x)) -> (Treek(x) & Skittish(x)))", "all x.(((Rock(x) & Cute(x) & Still(x)) -> (Turtle(x) & Skittish(x)))", "all x.((Crazy(x) & Still(x)) -> (Turtle(x) & Skittish(x)))", "all x.((CuteAndStill(x) & Rock(x)) -> (Turtle(x) & Skittish(x)))", "all x.(CuteAndStill(x) -> (Turtle(x) & Skittish(x)))", "all x.((Rock(x) & Cute(x) & Still(x)) -> Turtle(x) & Skittish(x))", "all x.((Cozy(x) & Still(x)) -> (Turtle(x) & Skittish(x)))", "all x.((Rock(x) & Cute(x) & Still(x)) -> (Tilt(x) & Skittish(x)))", "all x y.((Rock(x) & Cute(x) & Still(x)) -> (Turtle(y) & Skittish(y)))", "all x.(CuteAndStillRock(x) -> (Turtle(x) & SkittishRock(x)))", "all x.(CrazyAndStill(x) -> (Turtle(x) & Skittish(x)))", "all x.((CuteAndStillRock(x) & Turtle(x) & SkittishRock(x)) -> Turtle(x))"]}
{"id": "folio_validation_57", "nl": "\"Stranger Things\" is a popular Netflix show.", "fol": "(IsNetflixShow(StrangerThings) & IsPopular(StrangerThings))", "prediction": ["\"StrangerThings\" is a popular NetflixShow(x))", "all x y.((StrangerThings(x) & Netflix(y)) -> PopularShow(x,y))", "all x.(StrangerThings(x) -> PopularNetflixShow(x))", "all x y.((StrangerThings(x) & NetflixShow(y)) -> Popular(x,y))", "(Popular(StrangerThings) & NetflixShow(StrangerThings))", "\"StrangerThings\" is popular NetflixShow(x))", "all x y.((StrangerThings(x) & NetflixShow(y)) -> Popular(x))", "all x.(StrangerThings(x) -> NetflixShow(x))", "all x.(StrangerThings(x) -> PopularNinetyNinety(x))", "all x.(StrangerThings(x) -> Popular(x))", "all x.(StrangerThings(x) -> PopularFilmShow(x))", "all x.((StrangerThings(x) & PopularFilm(x)) -> PopularFilm(x))", "all x.(StrangerThings(x) -> PopularNinetyNinetyNinety(x))", "\"StrangerThanThings\" is a popular NetflixShow(x))", "\"StrangerThings\" is a popular NetflixShow(x) & Popular(x))", "all x.(StrangerThings(x) -> PopularNFC(x))"]}
{"id": "folio_validation_58", "nl": "If a Netflix show is popular, Karen will binge-watch it.", "fol": "all x.((IsNetflixShow(x) & IsPopular(x)) -> BingeWatchShow(Karen,x))", "prediction": ["all x.((NetflixShow(x) & Popular(x)) -> BingeWatch(x))", "all x.((Fan(x) & Popular(x)) -> BingeWatch(x))", "all x.((NinetyNinetyShow(x) & Popular(x)) -> BingeWatch(x))", "all x.((FilmNetflixShow(x) & Popular(x)) -> BingeWatch(x))", "all x.((NinetyNinety(x) & Popular(x)) -> BingeWatch(x))", "all x.(Popular(x) -> BingeWatch(x))", "all x.(( NetflixShow(x) & Popular(x)) -> BingeWatch(x))", "all x.((FandomShow(x) & Popular(x)) -> BingeWatch(x))", "all x.((NinetyFilmShow(x) & Popular(x)) -> BingeWatch(x))", "all x.((Fan(x) & Popular(x)) -> BingeWatches(x))", "all x.((NinetyOneShow(x) & Popular(x)) -> BingeWatch(x))", "all x.((FunnyShow(x) & Popular(x)) -> BingeWatch(x))", "all x.((NetflixShow(x) & Popular(x)) -> BingeWatches(x))", "all x.((NinetyShow(x) & Popular(x)) -> BingeWatch(x))", "all x.((Show(x) & Popular(x)) -> BingeWatch(x))", "all x.((NinetyNinetyShow(x) & Popular(x)) -> BingeWatches(x))"]}
{"id": "folio_validation_59", "nl": "If and only if Karen binge-watches a Netflix show, she will download it.", "fol": "all x.((IsNetflixShow(x) & BingeWatchShow(Karen,x)) <-> DownloadShow(Karen,x))", "prediction": ["all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> Downloads(x,y))", "all x y.((Karen(x) & Netflix(y) & BingeWatches(x,y)) -> Downloads(x,y))", "all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> Downloads(x,y))", "all x y.((Karen(x) & NetflixShow(y)) -> (BingeWatches(x,y) & Downloads(x,y)))", "all x y.((Karen(x) & NetflixShow(y) & Watches(x,y)) -> Downloads(x,y))", "all x y.((BingeWatches(x,y) & NetflixShow(y)) -> Downloads(x,y))", "all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> WillDownload(x,y))", "all x y.((Karen(x) & Netflix(y) & Watches(x,y)) -> Downloads(x,y))", "all x y z.((Karen(x) & NetflixShow(y) & NetflixShow(z) & BingeWatches(x,y)) -> Downloads(x,z))", "all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> Downloads(x))", "all x.((Karen(x) & BingeWatches(x,Netflix)) -> Downloads(x))", "all x.((KarenBingeWatches(x) & NetflixShow(x)) -> Downloads(x))", "all x y.((Karen(x) & NetflixShow(y) & Binges(x,y)) -> Downloads(x,y))", "all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> Download(x,y))", "all x y.((Karen(x) & NetflixShow(y)) -> (BingeWatches(x,y) | Downloads(x,y)))", "all x y.((BingeWatches(x,y) & Netflix(y)) -> Downloads(x,y))"]}
{"id": "folio_validation_60", "nl": "Karen does not download \"Black Mirror\".", "fol": "-DownloadShow(Karen,BlackMirror)", "prediction": ["(-DownloadBlackMirror(Karen))", "Karen -DownloadsBlackMirror(Karen))", "all x.(Karen(x) -> -DownloadsBlackMirror(x))", "all x.(Karen(x) -> -DownloadBlackMirror(x))", "exists x.(Karen(x) & -DownloadsBlackMirror(x))", "(-DownloadsBlackMirror(Karen))", "exists x.(Karen(x) & -DownloadBlackMirror(x))", "All x.(Karen(x) -> -DownloadsBlackMirror(x))", "Karen does not DownloadBlackMirror(Karen)", "All x.(Karen(x) -> -DownloadBlackMirror(x))", "(-DownloadBlackMirror(Karen,BlackMirror))", "Karen does not download \"BlackMirror\"", "all x.(Karen(x) -> -Download(x,BlackMirror))", "(-DownloadsBlackMirror(Karen,BlackMirror))", "Karen -Downloads(Karen,BlackMirror))", "exists x.(Karen(x) & -Downloads(x,BlackMirror))"]}
{"id": "folio_validation_61", "nl": "\"Black Mirror\" is a Netflix show.", "fol": "IsNetflixShow(BlackMirror)", "prediction": ["all x.(BlackMirror(x) -> NetflixShow(x))", "(BlackMirror(BlackMirror) & NetflixShow(BlackMirror))", "exists x.(BlackMirror(x) & NetflixShow(x))", "\"BlackMirror\" is a NetflixShow(x))", "\"BlackMirror\" is NetflixShow(x))", "All x.(BlackMirror(x) -> NetflixShow(x))", "all x y.((BlackMirror(x) & Netflix(y)) -> Show(x,y))", "\"BlackMirror\" - NetflixShow(x))", "all x.(BlackMirror(x) -> NetflixShow(x))", "(Show(BlackMirror) & Netflix(BlackMirror))", "\"BlackMirror\" & NetflixShow(x))", "all x y.((BlackMirror(x) & NetflixShow(y)) -> AvailableOn(x,y))", "(BlackMirror(BlackMirror) & Netflix(BlackMirror))", "all x y.((BlackMirror(x) & NetflixShow(y)) -> Show(x,y))", "\"BlackMirror\" is a NetflixShow(x)", "((BlackMirror(Black)) & NetflixShow(Black))"]}
{"id": "folio_validation_62", "nl": "If Karen binge-watches a Netflix show, she will share it to Lisa.", "fol": "all x.((IsNetflixShow(x) & BingeWatchShow(Karen,x)) -> ShareShowWith(x,Lisa))", "prediction": ["all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> SharesToLisa(x,y))", "all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> SharesTo(x,y))", "all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> Shares(x,y))", "all x y z.((Karen(x) & NetflixShow(y) & Lisa(z)) -> (BingeWatches(x,y) & Shares(x,z)))", "all x y.((Karen(x) & Netflix(y) & Watches(x,y)) -> Shares(x,y))", "all x y z.((Karen(x) & NetflixShow(y) & Lisa(z)) -> (BingeWatches(x,y) & Shares(x,y,z)))", "all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> SharesToLisa(x,y))", "all x y z.((Karen(x) & Netflix(y) & Lisa(z)) -> (BingeWatches(x,y) & Shares(x,z)))", "all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> SharesTo(x,y))", "all x y.((Karen(x) & Netflix(y) & Watches(x,y)) -> SharesToLisa(x,y))", "all x y.((Karen(x) & Netflix(y) & Watches(x,y)) -> SharesTo(x,y))", "all x y z.((Karen(x) & NetflixShow(y) & Lisa(z)) -> BingeWatches(x,y,z))", "all x y z.((Karen(x) & NetflixShow(y) & Lisa(z) & BingeWatches(x,y)) -> Shares(x,z))", "all x y.((BingeWatches(x,y) & NetflixShow(y)) -> SharesTo(x,y))", "all x y z.((Karen(x) & NetflixShow(y) & Lisa(z)) -> (BingeWatches(x,y) & SharesTo(x,z)))", "all x y z.((Karen(x) & NetflixShow(y) & Lisa(z) & BingeWatches(x,y)) -> SharesTo(x,z))"]}
{"id": "folio_validation_63", "nl": "Karen will share \"Stranger Things\" to Lisa.", "fol": "ShareShowWith(StrangerThings,Lisa)", "prediction": ["all x y.((Karen(x) & Lisa(y)) -> SharesStrangerThings(x,y))", "all x y.((Karen(x) & Lisa(y)) -> ShareStrangerThings(x,y))", "All x y.((Karen(x) & Lisa(y)) -> SharesStrangerThings(x,y))", "all x.((Karen(x) & Lisa(y)) -> SharesStrangerThings(x,y))", "all x y z.((Karen(x) & Lisa(y) & \"StrangerThings(z))) -> Share(x,y,z))", "all x y.((Karen(x) & Lisa(y)) -> WillShareStrangerThings(x,y))", "all x y.((Karen(x) & Lisa(y)) -> (ShareStrangerThings(x,y) | ShareStrangerThings(x,y)))", "all x y.((Karen(x) & Lisa(y)) -> (ShareStrangerThings(x,y)))", "all x y z.((Karen(x) & Lisa(y) & StrangerThings(z)) -> Share(x,y,z))", "all x.((Karen(x) & Lisa(x)) -> SharesStrangerThings(x,y))", "all x y z.((Karen(x) & Lisa(y) & \"StrangerThings(z)) -> Share(x,y,z))", "all x y z.((Karen(x) & Lisa(y) & \"StrangerThings(z))) -> SharesTo(x,y,z))", "all x.((Karen(x) & Lisa(y)) -> ShareStrangerThings(x,y))", "all x y.((Karen(x) & Lisa(y)) -> SharesStrangerThan(x,y))", "all x y z.((Karen(x) & Lisa(y) & \"StrangerThings(z))) -> Shares(x,y,z))", "all x y z.((Karen(x) & Lisa(y) & StrangerThings(z)) -> SharesTo(x,y,z))"]}
{"id": "folio_validation_64", "nl": "\"Black Mirror\" is popular.", "fol": "IsPopular(BlackMirror)", "prediction": ["\"BlackMirror\" is popular.", "\"BlackMirror\" (exists x.(BlackMirror(x) & Popular(x)))", "(Popular(BlackMirror) -> Popular(BlackMirror))", "(Popular(BlackMirror) -> Popular(BlackMirror))", "all x.(BlackMirror(x) -> Popular(x))", "\"BlackMirror\" (exists y.(BlackMirror(y) & Popular(y)))", "\"BlackMirror\" is Popular(x)", "(Popular(BlackMirror)", "\"BlackMirror\" (exists y.(BlackMirror(y) & Popular(x)))", "\"BlackMirror(x) -> Popular(x))", "(Popular(BlackMirror) & Popular(BlackMirror))", "\"BlackMirror\" - Popular(x))", "\"BlackMirror\" (exists x.(BlackMirror) & Popular(x)))", "\"BlackMirror\" -> Popular(x))", "\"BlackMirror\" (exists x.(Black(x) & Popular(x)))", "\"BlackMirror\" (exists x.(BlackMirror(x)) & Popular(x)))"]}
{"id": "folio_validation_65", "nl": "Karen will share \"Black Mirror\" to Lisa.", "fol": "ShareShowWith(BlackMirror,Lisa)", "prediction": ["all x y.((Karen(x) & Lisa(y)) -> SharesBlackMirror(x,y))", "all x y.((Karen(x) & Lisa(y)) -> ShareBlackMirror(x,y))", "all x y z.((Karen(x) & Lisa(y) & BlackMirror(z)) -> Share(x,y,z))", "All x y.((Karen(x) & Lisa(y)) -> SharesBlackMirror(x,y))", "all x y z.((Karen(x) & Lisa(y) & BlackMirror(z)) -> Shares(x,y,z))", "All x y.((Karen(x) & Lisa(y)) -> ShareBlackMirror(x,y))", "all x y z.((Karen(x) & Lisa(y) & BlackMirror(z)) -> SharesTo(x,y,z))", "(ShareBlackMirror(Karen) & ShareBlackMirror(Karen))", "All x y z.((Karen(x) & Lisa(y) & BlackMirror(z)) -> Share(x,y,z))", "all x y z.((Karen(x) & Lisa(y) & BlackMirror(z)) -> Share(x,z))", "All x y z.((Karen(x) & Lisa(y) & BlackMirror(z)) -> Shares(x,y,z))", "all x.((Karen(x) & Lisa(y)) -> SharesBlackMirror(x,y))", "all x y z.((Karen(x) & Lisa(y) & BlackMirror(z)) -> WillShare(x,y,z))", "all x y z.((Karen(x) & Lisa(y) & BlackMirror(z)) -> Shares(x,z))", "all x.((Karen(x) & Lisa(y)) -> ShareBlackMirror(x,y))", "All x y z.((Karen(x) & Lisa(y) & BlackMirror(z)) -> SharesTo(x,y,z))"]}
{"id": "folio_validation_66", "nl": "Beijing is the capital of the People's Republic of China. ", "fol": "IsCapitalOf(Beijing,Prx)", "prediction": ["all x.((Beijing(x) & PeoplesRepublicOfChina(x)) -> Capital(x))", "all x y.((Beijing(x) & PeoplesRepublic(y)) -> Capital(x,y))", "all x.((Beijing(x) & PeoplesRepublic(x)) -> Capital(x))", "all x y.((Beijing(x) & PeoplesRepublicOfChina(y)) -> Capital(x,y))", "(Capital(Beijing) & PeoplesRepublicOfChina(Beijing))", "(Capital(Beijing) & PeoplesRepublic(Beijing))", "all x y.((Beijing(x) & PeoplesRepublic(y)) -> CapitalOf(x,y))", "all x.((Beijing(x) & PeoplesRepublic(x)) -> CapitalOf(x,y))", "all x.((Beijing(x) & CapitalOfPeoplesRepublic(x)) -> PeoplesRepublicOfChina(x))", "all x.((Beijing(x) & PeoplesRepublic(y)) -> Capital(x,y))", "all x.(Beijing(x) -> CapitalOfPeoplesRepublicOfChina(x))", "all x.(Peking(x) -> CapitalOfPeoplesRepublicOfChina(x))", "(Capital(Beijing) & CapitalOfPeoplesRepublic(Beijing))", "all x.((Beijing(x) & PeopleRepublic(x)) -> Capital(x))", "(CapitalOfPeoplesRepublicOfChina(Beijing))", "(Capital(Beijing) & CapitalOfPeoplesRepublicOfChina(Beijing))"]}
{"id": "folio_validation_67", "nl": "Beijing is the world's most populous national capital city.", "fol": "IsMostPopulousNationalCapital(Beijing)", "prediction": ["all x.((Beijing(x) & PopulousNationalCapitalCity(x)) -> Populous(x))", "all x.((Beijing(x) & NationalCapitalCity(x)) -> Populous(x))", "all x.((Beijing(x) & PopulousNationalCapitalCity(x)) -> MostPopular(x))", "all x.((Beijing(x) & PopulousNationalCapital(x)) -> MostPopular(x))", "all x.((Beijing(x) & PopulousNationalCapital(x)) -> MostPopularCity(x))", "all x.((Beijing(x) & NationalCapital(x)) -> Populous(x))", "all x.((Beijing(x) & PopulousNationalCapital(x)) -> Populous(x))", "all x y.((Beijing(x) & NationalCapitalCity(y)) -> Populous(x,y))", "all x.((Beijing(x) & Populous(x)) -> NationalCapitalCity(x))", "all x y.((Beijing(x) & NationalCapital(y)) -> Populous(x,y))", "all x.((Beijing(x) & PopulousNationalCapitalCity(x)) -> MostPopulous(x))", "all x.(Beijing(x) -> PopulousNationalCapitalCity(x))", "all x.((Beijing(x) & WorldPopularCapital(x)) -> NationalCapital(x))", "all x.((Beijing(x) & MostPopular(x)) -> NationalCapitalCity(x))", "all x.((Beijing(x) & CapitalCity(x)) -> Populous(x))", "all x.((Beijing(x) & WorldPopularCapitalCity(x)) -> NationalCapital(x))"]}
{"id": "folio_validation_68", "nl": "Beijing is located in Northern China.", "fol": "LocatedInNorthernChina(Beijing)", "prediction": ["all x.(Beijing(x) -> NorthernChina(x))", "all x y.((Beijing(x) & NorthernChina(y)) -> LocatedIn(x,y))", "all x.(Beijing(x) -> LocatedInNorthernChina(x))", "all x.((Beijing(x) & NorthernChina(x)) -> LocatedIn(x,y))", "all x.(Beijing(x) -> NorthernChinese(x))", "all x y.((Peking(x) & NorthernChina(y)) -> LocatedIn(x,y))", "all x.(Beijing(x) -> (LocatedInNorthernChina(x) & LocatedInNorthernChina(x)))", "all x y.((Beijing(x) & NorthernChina(y)) -> LocatedIn(x,y))", "all x.(Peking(x) -> LocatedInNorthernChina(x))", "All x.(Beijing(x) -> NorthernChina(x))", "all x.(Beijing(x) -> LocatedInNorthernChina(x))", "all x.(Peking(x) -> NorthernChina(x))", "all x y.((Beijing(x) & NorthernChina(y)) -> LocalizedIn(x,y))", "all x.(Beijing(x) -> (LocatedInNorthernChina(x) | LocatedInNorthernChina(x)))", "All x.(Beijing(x) -> LocatedInNorthernChina(x))", "(NorthernChina(Beijing) & LocatedIn(Beijing))"]}
{"id": "folio_validation_69", "nl": "Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games.", "fol": "(HostedEvent(Beijing,Summer2008olympic) & HostedEvent(Beijing,Summer2008paralympicgames))", "prediction": ["all x y.((Beijing(x) & SummerOlympics(y) & SummerParalympics(y)) -> (Hosts(x,y) & Hosts(x,y)))", "all x y.((Beijing(x) & SummerOlympics(y) & Paralympics(y)) -> (Hosts(x,y) & Hosts(x,y)))", "all x y z.((Beijing(x) & SummerOlympics(y) & Paralympics(z)) -> (Hosts(x,y) & Hosts(x,z)))", "all x y.((Beijing(x) & SummerOlympics(y) & SummerParalympics(y)) -> (Hosts(x,y) | Hosts(x,y)))", "all x y z.((Beijing(x) & SummerOlympics(y) & Paralympics(z)) -> (Hosts(x,y) | Hosts(x,z)))", "all x.((Beijing(x) & 2008SummerOlympics(x) & 2008SummerParalympics(x)) -> Hosts(x,y))", "all x y.((Beijing(x) & SummerOlympics(y) & Paralympics(y)) -> (Hosts(x,y) | Hosts(x,y)))", "all x.((Beijing(x) & SummerOlympics(x) & SummerParalympics(x)) -> Hosts(x,2008))", "all x.((Beijing(x) & SummerOlympics(x) & SummerParalympics(x)) -> Hosts(x,y))", "all x.((Beijing(x) & 2008SummerOlympics(x) & 2008SummerParalympics(x)) -> Hosted(x,y))", "all x.((Beijing(x) & SummerOlympics(x) & SummerParalympics(x)) -> Hosted(x,2008))", "(HostsSummerOlympics(Beijing) & HostsSummerParalympics(Beijing))", "all x.((Beijing(x) & SummerOlympics(x,2008) & SummerParalympics(x,2008)) -> Hosts(x,2008))", "all x.((Beijing(x) & 2008SummerOlympics(x) & 2008SummerParalympics(x)) -> Host(x,y))", "all x.((Beijing(x) & SummerOlympics(x) & SummerParalympics(x)) -> Host(x,2008))", "all x.((Beijing(x) & 2008SummerOlympics(x) & 2008SummerParalympics(x)) -> HostedBy(x,y))"]}
{"id": "folio_validation_70", "nl": "Beijing has hosted both the Summer and Winter Olympics, along with the Summer and Winter Paralympics", "fol": "(HostedEvent(Beijing,Summerolympic) & HostedEvent(Beijing,Winterolympic) & HostedEvent(Beijing,Summerparalympicgames) & HostedEvent(Beijing,Winterparalympicgames))", "prediction": ["all x.((Beijing(x) & SummerOlympics(x) & WinterOlympics(x)) -> (HostsSummerOlympics(x) & HostsWinterOlympics(x) & HostsSummerParalympics(x) & HostsWinterParalympics(x)))", "(HostsSummerOlympics(Beijing) & HostsWinterOlympics(Beijing) & HostsSummerParalympics(Beijing) & HostsWinterParalympics(Beijing))", "all x.(Beijing(x) -> (HostsSummerOlympics(x) & HostsWinterOlympics(x) & HostsSummerParalympics(x) & HostsWinterParalympics(x)))", "(HostsSummerAndWinterOlympics(Beijing) & HostsSummerAndWinterOlympics(Beijing) & HostsSummerAndWinterParalympics(Beijing))", "(HostsSummerOlympics(Beijing) & HostsWinterOlympics(Beijing) & HostsSummerOlympics(Beijing) & HostsWinterOlympics(Beijing) & HostsSummerParalympics(Beijing) & HostsWinterParalympics(Beijing))", "all x.((Beijing(x) & SummerOlympics(x) & WinterOlympics(x)) -> (HostsSummerOlympics(x) & HostsWinterOlympics(x) & HostsSummerOlympics(x) & HostsWinterParalympics(x)))", "(HostsSummerOlympics(Beijing) & HostsWinterOlympics(Beijing) & HostsSummerOlympics(Beijing) & HostsWinterOlympics(Beijing) & HostsSummerOlympics(Beijing) & HostsWinterParalympics(Beijing))", "all x y.((Beijing(x) & SummerOlympics(y) & WinterOlympics(y)) -> (HostsSummerOlympics(x,y) & HostsWinterOlympics(x,y) & HostsSummerParalympics(x,y) & HostsWinterParalympics(x,y)))", "(HostsSummerOlympics(Beijing) & HostsWinterOlympics(Beijing) & HostsSummerOlympics(Beijing) & HostsWinterOlympics(Beijing)) & HostsSummerParalympics(Beijing) & HostsWinterParalympics(Beijing))", "(HostsSummerOlympics(Beijing) & HostsWinterOlympics(Beijing)) & HostsSummerParalympics(Beijing) & HostsWinterParalympics(Beijing))", "all x.(Beijing(x) -> (HostsSummerOlympics(x) & HostsWinterOlympics(x) & HostsSummerParalympics(x) & HostsWinterParalympics(x) & HostsSummerParalympics(x) & HostsWinterParalympics(x)))", "(HostsSummerOlympics(Beijing) & HostsWinterOlympics(Beijing) & HostsSummerOlympics(Beijing) & HostsWinterParalympics(Beijing))", "all x y z.((Beijing(x) & SummerOlympics(y) & WinterOlympics(z)) -> (HostsSummerOlympics(x,y) & HostsWinterOlympics(x,z) & HostsSummerParalympics(x) & HostsWinterParalympics(x)))", "(HostsSummerOlympics(Beijing) & HostsWinterOlympics(Beijing) & HostsSummerOlympics(Beijing) & HostsWinterOlympics(Beijing) & HostsSummerParalympics(Beijing) & HostsWinterParalympics(Beijing)", "all x y z.((Beijing(x) & SummerOlympics(y) & WinterOlympics(z)) -> (Hosts(x,y) & Hosts(x,z)))", "all x.(Beijing(x) -> (HostsSummerOlympics(x) & HostsWinterOlympics(x) & HostsSummerParalympics(x) & HostsWinterParalympics(x) & HostsWinterParalympics(x)))"]}
{"id": "folio_validation_71", "nl": "Many of Beijing's 91 universities consistently rank among the best in the Asia-Pacific and the world.", "fol": "exists x.(UniversityInBeijing(x) & RanksAmongBestUniversities(x))", "prediction": ["all x.((University(x) & Beijing(x)) -> (BestInAsiaPacific(x) & BestInWorld(x)))", "all x.((BeijingUniversity(x) & BeijingUniversity(x)) -> (BestInAsiaPacific(x) & BestInWorld(x)))", "all x.((University(x) & Beijing(x)) -> (BestInAsiaPacific(x) | BestInWorld(x)))", "all x.((University(x) & Peking(x)) -> (BestInAsiaPacific(x) & BestInWorld(x)))", "all x.((BeijingUniversity(x) & BeijingUniversity(x)) -> (BestAsiaPacificUniversity(x) & BestWorldUniversity(x)))", "all x.((University(x) & Beijing(x)) -> (AsiaPacific(x) & World(x)))", "all x.((BeijingUniversity(x) & BeijingUniversity(x)) -> (BestInAsiaPacific(x) | BestInWorld(x)))", "all x.((University(x) & InAsiaPacific(x) & InWorld(x)) -> BestInAsiaPacificAndWorld(x))", "all x.((University(x) & InAsiaPacific(x) & InWorld(x)) -> Best(x))", "all x.((University(x) & Beijing(x)) -> (BestAsiaPacificUniversity(x) & BestWorldUniversity(x)))", "all x.((BeijingUniversity(x) & BeijingUniversity(x)) -> (BestAsiaPacificUniversity(x) | BestWorldUniversity(x)))", "all x.((University(x) & Beijing(x)) -> (BestAsiaPacific(x) & BestWorld(x)))", "all x.((University(x) & Beijing(x)) -> (BestAsiaPacific(x) & BestWorldwide(x)))", "all x.((University(x) & InAsiaPacific(x) & InWorld(x)) -> BestInAsiaPacific(x))", "all x.((University(x) & Beijing(x)) -> (BestAsiaPacific(x) | BestWorld(x)))", "all x.((University(x) & BestInAsiaPacific(x) & BestInWorld(x)) -> Beijing(x))"]}
{"id": "folio_validation_72", "nl": "Beijing has hosted both the 2008 Summer Olympics and a winter olympics.", "fol": "(HostedEvent(Beijing,Summer2008olympic) & HostedEvent(Beijing,Winterolympic))", "prediction": ["all x.(Beijing(x) -> (HostsSummerOlympics(x,2008) & HostsWinterOlympics(x,2008)))", "all x y z.((Beijing(x) & SummerOlympics(y) & WinterOlympics(z)) -> (Hosts(x,y) & Hosts(x,z)))", "all x.((Beijing(x) & 2008SummerOlympics(x) & WinterOlympics(x)) -> Hosts(x,y))", "all x y.((Beijing(x) & SummerOlympics(y) & WinterOlympics(y)) -> Hosts(x,y))", "all x.(Beijing(x) -> (HostsSummerOlympics(x) & HostsWinterOlympics(x)))", "all x y.((Beijing(x) & SummerOlympics(y) & WinterOlympics(y)) -> (Hosts(x,y) & Hosts(x,y)))", "all x.((Beijing(x) & SummerOlympics(x) & WinterOlympics(x)) -> Hosts(x,y))", "all x y.((Beijing(x) & SummerOlympics(y) & WinterOlympics(y)) -> Host(x,y))", "all x y.((Beijing(x) & SummerOlympics(y)) -> (Hosts(x,y) & Hosts(x,y)))", "all x.((Beijing(x) & SummerOlympics(x) & WinterOlympics(x)) -> Hosts(x,2008))", "all x.(Beijing(x) -> (HostedSummerOlympics(x,2008) & HostedWinterOlympics(x,2008)))", "all x y z.((Beijing(x) & SummerOlympics(y) & WinterOlympics(z)) -> (Hosts(x,y) | Hosts(x,z)))", "all x.((Beijing(x) & 2008SummerOlympics(x) & WinterOlympics(x)) -> Host(x,y))", "all x.((Beijing(x) & SummerOlympics(x,2008) & WinterOlympics(x,2008)) -> Hosts(x,2008))", "all x y.((Beijing(x) & SummerOlympics(y)) -> (Hosts(x,y) & Hosts(x,y) & Hosts(x,y)))", "all x.(Beijing(x) -> (HostedSummerOlympics(x) & HostedWinterOlympics(x)))"]}
{"id": "folio_validation_73", "nl": "Beijing is located in southern China.", "fol": "InSouthernChina(Beijing)", "prediction": ["all x.(Beijing(x) -> LocatedInSouthChina(x))", "all x y.((Beijing(x) & SouthernChina(y)) -> LocatedIn(x,y))", "all x.(Beijing(x) -> LocatedInSouthernChina(x))", "all x.(Beijing(x) -> SouthernChina(x))", "all x.((Beijing(x) & SouthernChina(x)) -> LocatedIn(x,y))", "all x y.((Beijing(x) & SouthChina(y)) -> LocatedIn(x,y))", "all x.(Beijing(x) -> LocationInSouthChina(x))", "all x.(Beijing(x) -> SouthChina(x))", "all x.(Peking(x) -> LocatedInSouthChina(x))", "all x.(Beijing(x) -> (LocatedInSouthernChina(x) & LocatedInSouthernChina(x)))", "all x y.((Beijing(x) & SouthernChina(y)) -> LocatedIn(x,y))", "all x.(Beijing(x) -> LocatedInSouthChina(x))", "all x.(Beijing(x) -> (LocatedInSouthChina(x) & LocatedInSouthChina(x)))", "all x.(Beijing(x) -> LocatedInSouthernChina(x))", "all x y.((Beijing(x) & SouthernChina(y)) -> LocalizedIn(x,y))", "all x.(Beijing(x) -> LocationInSouthernChina(x))"]}
{"id": "folio_validation_74", "nl": "Beijing is the second largest Chinese city by urban population.", "fol": "SecondLargestChineseCity(Beijing)", "prediction": ["all x.((City(x) & City(x) & UrbanPopulation(x)) -> SecondLargest(x))", "all x.((City(x) & LargestByUrbanPopulation(x)) -> Beijing(x))", "(SecondLargestChineseCity(Beijing) & UrbanPopulation(Beijing))", "all x.((City(x) & City(x) & UrbanPopulation(x)) -> SecondLargest(x,y))", "all x.((City(x) & ChineseCity(x) & UrbanPopulation(x)) -> SecondLargest(x))", "(SecondLargestChineseCityByUrbanPopulation(Beijing))", "all x.((City(x) & City(x) & City(x)) -> LargestByUrbanPopulation(x))", "all x y.((City(x) & City(y) & UrbanPopulation(y)) -> SecondLargest(x,y))", "all x.((City(x) & UrbanPopulation(x)) -> SecondLargest(x))", "all x.((City(x) & City(x)) -> LargestByUrbanPopulation(x))", "all x y.((City(x) & City(y) & UrbanPopulation(x,y)) -> SecondLargest(x,y))", "all x.((City(x) & City(x) & City(x)) -> SecondLargestByUrbanPopulation(x))", "all x.((City(x) & City(x) & City(x) & UrbanPopulation(x)) -> SecondLargest(x))", "(SecondLargestCity(Beijing) & UrbanPopulation(Beijing))", "all x.((City(x) & ChineseCity(x)) -> SecondLargestByUrbanPopulation(x))", "all x.((City(x) & City(x) & UrbanPopulation(x)) -> SecondLargest(x,Chinese))"]}
{"id": "folio_validation_75", "nl": "All aliens are extraterrestrial.", "fol": "all x.(IsAlien(x) -> IsExtraterrestrial(x))", "prediction": ["all x.(Alien(x) -> Extraterrestrial(x))", "all x.(Aliens(x) -> Extraterrestrial(x))", "all x.(Extraterrestrial(x) -> Alien(x))", "all x.(Abstract(x) -> Extraterrestrial(x))", "all x.((Alien(x) & Extraterrestrial(x)) -> Extraterrestrial(x))", "all x.((Alien(x) & Extraterrestrial(x)) -> (Extraterrestrial(x) | Extraterrestrial(x)))", "all x.(Alien(x) -> Extraterrestrial(x))", "all x y.((Alien(x) & Extraterrestrial(y)) -> Extraterrestrial(x))", "all x.(Individual(x) -> Extraterrestrial(x))", "all x.((Alien(x) & Extraterrestrial(x)) -> -Extraterrestrial(x))", "all x.((Alien(x) & Extraterrestrial(x)) -> (Extraterrestrial(x) & -Extraterrestrial(x)))", "all x.(Extraterrestrial(x) -> Alien(x))", "all x.(Extraterrestrial(x) -> Aliens(x))", "all x.((Alien(x) & Extraterrestrial(x)) -> Is(x,y))", "all x.((Alien(x) & Extraterrestrial(x)) -> HasExtraterrestrial(x))", "all x.((Alien(x) & Extraterrestrial(x)) -> Aliens(x))"]}
{"id": "folio_validation_76", "nl": "If someone is from Mars, then they are aliens.", "fol": "all x.(IsFromMars(x) -> IsAlien(x))", "prediction": ["all x.((Alien(x) & FromMars(x)) -> Alien(x))", "all x.((Person(x) & FromMars(x)) -> Alien(x))", "all x.((Person(x) & Mars(x)) -> Alien(x))", "all x.(Mars(x) -> Alien(x))", "all x.((Alien(x) & Mars(x)) -> Alien(x))", "all x.((FromMars(x)) -> Alien(x))", "all x.((Mars(x) & Alien(x)) -> Alien(x))", "all x.((Mars(x) & Alien(x)) -> From(x,Mars))", "all x.((FromMars(x) & Alien(x)) -> Alien(x))", "all x.((People(x) & FromMars(x)) -> Alien(x))", "all x.(FromMars(x) -> Alien(x))", "all x.((Morn(x) & FromMars(x)) -> Alien(x))", "all x.((PersonalFromMars(x)) -> Alien(x))", "all x.((InMars(x) & Alien(x)) -> Alien(x))", "all x.((IsFromMars(x)) -> Alien(x))", "all x.((OfMars(x) & Alien(x)) -> Alien(x))"]}
{"id": "folio_validation_77", "nl": "No extraterrestrial is human.", "fol": "all x.(IsExtraterrestrial(x) -> -IsHuman(x))", "prediction": ["-exists x.(Extraterrestrial(x) & Human(x))", "-exists x.(extraterrestrial(x) & Human(x))", "all x.(Extraterrestrial(x) -> Human(x))", "all x.(Extraterrestrial(x) -> -Human(x))", "-exists x.(Exterrestrial(x) & Human(x))", "(-exists x.(Extraterrestrial(x) & Human(x)))", "all x.((Extraterrestrial(x) & Human(x)) -> -exists y.(Extraterrestrial(y) & Human(y)))", "(-exists x.(extraterrestrial(x) & Human(x)))", "all x.((Extraterrestrial(x) & Human(x)) -> -exists y.(Exterrestrial(y) & Human(y)))", "all x.((Extraterrestrial(x) & Human(x)) -> -(Extraterrestrial(x) & Human(x)))", "all x.((Extraterrestrial(x) & Human(x)) -> -exists y.(Extraterrestrial(y) & Human(x)))", "(-exists x.(Extraterrestrial(x) & Human(x)) & -exists y.(Extraterrestrial(y) & Human(y)))", "(-exists x.(Extraterrestrial(x) & Human(x)) & -exists y.(Extraterrestrial(y) & Human(y))))", "(-exists x.(extraterrestrial(x) & Human(x)) & -exists y.(extraterrestrial(y) & Human(y))))", "exists x.(Extraterrestrial(x) & Human(x))", "(-exists x.(extraterrestrial(x) & Human(x)) & -exists y.(extraterrestrial(y) & Human(y)))"]}
{"id": "folio_validation_78", "nl": "Everyone from Earth is a human.", "fol": "all x.(IsFromEarth(x) -> IsHuman(x))", "prediction": ["all x.(Earth(x) -> Human(x))", "all x.((Earth(x) & Human(x)) -> Human(x))", "all x.((Earth(x) & Human(x)) -> FromEarth(x))", "all x.((Earth(x) & FromEarth(x)) -> Human(x))", "all x.((Earth(x) & Person(x)) -> Human(x))", "all x.((Earth(x) & Human(x)) -> exists y.(Earth(y) & From(x,y))))", "all x.((Earth(x) & Human(x)) -> AllOf(x,y))", "all x.(FromEarth(x) -> Human(x))", "all x.((Earth(x) & Human(x)) -> AllOf(x))", "all x.((Earth(x) & Human(x)) -> AllOf(x,Earth))", "all x.((Earth(x) & Human(x)) -> EverythingFromEarth(x))", "all x.((Earth(x) & Human(x)) -> exists y.(Earth(y) & Human(x)))", "all x.((Earth(x) & Human(x)) -> exists y.(Earth(y) & LivesIn(x,y))))", "all x.((Earth(x) & Human(x)) -> exists y.(Earth(y) & Human(y)))", "all x.((Earth(x) & Human(x)) -> exists y.(Human(y) & From(x,y))))", "all x.((Earth(x) & Human(x)) -> exists y.(Earth(y) & FromEarth(x,y))))"]}
{"id": "folio_validation_79", "nl": "Marvin cannot be from Earth and from Mars.", "fol": "(-IsFromEarth(Marvin) & -IsFromMars(Marvin))", "prediction": ["all x.(Marvin(x) -> -(FromEarth(x) & FromMars(x)))", "all x.(Marvin(x) -> (-FromEarth(x) & -FromMars(x)))", "exists x.(Marvin(x) & -(FromEarth(x) & FromMars(x)))", "all x.(Marvin(x) -> -(FromEarth(x) | FromMars(x)))", "all x y.((Marvin(x) & Earth(y)) -> -(From(x,y) & From(x,y))))", "all x.(Marvin(x) -> (-(FromEarth(x) & FromMars(x))))", "all x y.((Marvin(x) & Earth(y)) -> -(From(x,y) & From(x,y)))", "-exists x.(Marvin(x) & Earth(x) & Mars(x))", "all x y.((Marvin(x) & Earth(y)) -> -(From(x,y) | From(x,y))))", "all x.(Marvin(x) -> -(From(x,Earth) & From(x,Mars)))", "(exists x.(Marvin(x) & Earth(x)) & -exists y.(Mars(y) & Mars(z))))", "all x.(Marvin(x) -> -(FromEarth(x) | FromMars(x))))", "(exists x.(Marvin(x) & Earth(x)) & -exists y.(Mars(y) & Mars(y))))", "(-exists x.(Marvin(x) & Earth(x)) & -exists y.(Mars(y) & Mars(z))))", "(-exists x.(Marvin(x) & Earth(x)) & -exists y.(Mars(y) & Mars(y))))", "exists x.(Marvin(x) & -(FromEarth(x) & FromMars(x))))"]}
{"id": "folio_validation_80", "nl": "If Marvin is not from Earth, then Marvin is an extraterrestrial.", "fol": "(-IsFromEarth(Marvin) -> IsExtraterrestrial(Marvin))", "prediction": ["all x.((Marvin(x) & -FromEarth(x)) -> Extraterrestrial(x))", "all x.((Marvin(x) & -Earth(x)) -> Extraterrestrial(x))", "all x.((Marvin(x) & -MarvinFromEarth(x)) -> Extraterrestrial(x))", "all x.((Marvin(x) & -fromEarth(x)) -> Extraterrestrial(x))", "All x.((Marvin(x) & -FromEarth(x)) -> Extraterrestrial(x))", "all x.((Marvin(x) & -FromEarth(x)) -> Extraterrestrial(x))", "all x.((Marvin(x) & -(FromEarth(x) | Extraterrestrial(x))) -> Marvin(x))", "(-MarvinFromEarth(Marvin) -> Extraterrestrial(Marvin))", "all x y.((Marvin(x) & -FromEarth(x)) -> Extraterrestrial(x))", "all x.((Marvin(x) & -MarineFromEarth(x)) -> Extraterrestrial(x))", "all x.((Marvin(x) & -(FromEarth(x) & Marvin(x))) -> Extraterrestrial(x))", "all x.((Marvin(x) & -From(x,Earth)) -> Extraterrestrial(x))", "exists x.((Marvin(x) & -FromEarth(x)) -> Extraterrestrial(x))", "all x.((Marvin(x) & -DepartsFromEarth(x)) -> Extraterrestrial(x))", "all x y.((Marvin(x) & -FromEarth(x)) -> Extraterrestrial(y))", "all x.((Marvin(x) & -(FromEarth(x) | Extraterrestrial(x))) -> -Marvin(x))"]}
{"id": "folio_validation_81", "nl": "Marvin is an alien.", "fol": "IsAlien(Marvin)", "prediction": ["all x.(Marvin(x) -> Alien(x))", "All x.(Marvin(x) -> Alien(x))", "Marvin is alien(Marvin)", "(Alien(Marvin) & Alien(Marvin))", "Marvin is alien(marvin)", "Marvin ist Alien(Marvin)", "Marvin is alien.", "all x.(Marvin(x) -> Aliens(x))", "All x.(Marvin(x) -> Aliens(x))", "(Alien(Marvin) & Aliens(Marvin))", "All x.(Marvin(x) -> Alien(x))", "all x.(Marvin(x) -> Alien(x))", "(Alien(Marvin) & -Alien(Marvin))", "(Alien(Marvin) & Extinct(Marvin))", "(Alien(Marvin) -> Alien(Marvin))", "Marvin ist Alien(marvin)"]}
{"id": "folio_validation_82", "nl": "Marvin is neither a human nor from Mars.", "fol": "(-IsHuman(Marvin) & -IsFromMars(Marvin))", "prediction": ["(-Human(Marvin) & -Mars(Marvin))", "all x.(Marvin(x) -> (-Human(x) & -Mars(x)))", "all x.(Marvin(x) -> (-Human(x) | FromMars(x)))", "all x.(Marvin(x) -> (-Human(x) | Mars(x)))", "-(Human(Marvin) | Mars(Marvin))", "(-Human(Marvin) & -FromMars(Marvin))", "all x.(Marvin(x) -> (-Human(x) & -FromMars(x)))", "Marvin is -Human(Mars) & -Mars(Mars))", "-(Human(Marvin) & -Mars(Marvin))", "all x.(Marvin(x) -> -Human(x) & -Mars(x))", "Marvin is -Human(Mars) & -FromMars(Mars))", "(-Human(Mars) & -Mars(Mars))", "Marvin -(Human(Mars) | Mars(Mars)))", "all x.(Marvin(x) -> -Human(x) & -FromMars(x))", "Marvin & -(Human(Mars) | Mars(Mars)))", "all x.(Marvin(x) -> (-Human(x) | -Mars(x)))"]}
{"id": "folio_validation_83", "nl": "If Marvin is not from Mars, then Marvin is a human.", "fol": "(-IsFromMars(Marvin) -> IsHuman(Marvin))", "prediction": ["all x.((Marvin(x) & -Mars(x)) -> Human(x))", "all x.((Marvin(x) & -FromMars(x)) -> Human(x))", "all x.((Marvin(x) & -MarsFrom(x)) -> Human(x))", "All x.((Marvin(x) & -Mars(x)) -> Human(x))", "all x.(Marvin(x) -> (-Mars(x) & Human(x)))", "all x.((Marvin(x) & -Mars(x)) -> Human(x))", "all x.((Marvin(x) & NotFromMars(x)) -> Human(x))", "all x.((Marvin(x) & -fromMars(x)) -> Human(x))", "all x y.((Marvin(x) & -Mars(x)) -> Human(x))", "all x y.((Marvin(x) & -Mars(y)) -> Human(x))", "all x y.((Marvin(x) & -Mars(x)) -> Human(y))", "all x.(Marvin(x) -> -Mars(x))", "all x.((Marvin(x) & -Morn(x)) -> Human(x))", "all x.((Marvin(x) & -MarsInMars(x)) -> Human(x))", "(-Mars(Marvin) -> Human(Marvin))", "exists x.(Marvin(x) & -Mars(x))"]}
{"id": "folio_validation_84", "nl": "A person is either a Grand Slam champion or an Oscar-nominated actor.", "fol": "all x.((IsGrandSlamChampion(x) & -IsOscarNominatedActor(x)) | (-IsGrandSlamChampion(x) & IsOscarNominatedActor(x)))", "prediction": ["all x.(Person(x) -> (GrandSlamChampion(x) | OscarnominatedActor(x)))", "all x.(Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))", "exists x.(Person(x) & (GrandSlamChampion(x) | OscarnominatedActor(x)))", "exists x.(Person(x) & (GrandSlamChampion(x) | OscarNominatedActor(x)))", "all x.(Person(x) -> (GrandSlamChampon(x) | OscarNominatedActor(x)))", "all x.(Person(x) -> (GrandSlamChampon(x) | OscarnominatedActor(x)))", "all x.((Person(x) & GrandSlamChampion(x)) | OscarNominatedActor(x))", "all x.((Person(x) & GrandSlamChampion(x)) | OscarnominatedActor(x))", "all x.(Person(x) -> ((GrandSlamChampion(x) | OscarNominatedActor(x))))", "all x.(Person(x) -> (GrandSlamchampion(x) | OscarnominatedActor(x)))", "all x.(Person(x) -> ((GrandSlamChampion(x) | OscarnominatedActor(x))))", "all x.(Person(x) -> (GrandSlamChampion(x) | OscarnominatedActor(x)))", "all x.(Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))", "all x.(Person(x) -> (GrandSlamChampion(x) | OscarNominated(x)))", "exists x.(Person(x) & (GrandSlamChampon(x) | OscarNominatedActor(x)))", "all x.(Person(x) -> (GrandSlamchampion(x) | OscarNominatedActor(x)))"]}
{"id": "folio_validation_85", "nl": "All people who are Grand Slam champions are professional tennis players.", "fol": "all x.(IsGrandSlamChampion(x) -> IsProfessionalTennisPlayer(x))", "prediction": ["all x.(GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x.((Person(x) & GrandSlamChampion(x)) -> ProfessionalTennisPlayer(x))", "all x.(GrandSlamChampions(x) -> ProfessionalTennisPlayer(x))", "all x.((Person(x) & GrandSlamChampions(x)) -> ProfessionalTennisPlayer(x))", "all x.((Person(x) & GrandSlamChampon(x)) -> ProfessionalTennisPlayer(x))", "all x.((People(x) & GrandSlamChampion(x)) -> ProfessionalTennisPlayer(x))", "all x.(GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x.(GreatSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x.((Person(x) & GrandSlamChampion(x)) -> TennisPlayer(x))", "all x.(GrandSlamChampion(x) -> TennisPlayer(x))", "all x.((Person(x) & GrandSlamChampion(x)) -> ProTennisPlayer(x))", "all x.(GrandSlamChampion(x) -> ProTennisPlayer(x))", "all x.((Person(x) & GrandSlamChampion(x)) -> ProfessionalTennisPilot(x))", "all x.((Person(x) & GrandSlamChampion(x)) -> ProfessionalTennisPerson(x))", "all x.(grandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "all x.( GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))"]}
{"id": "folio_validation_86", "nl": "All Oscar-nominated actors are celebrities.", "fol": "all x.(IsOscarNominatedActor(x) -> IsCelebrity(x))", "prediction": ["all x.(OscarnominatedActor(x) -> Celebrity(x))", "all x.(OscarNominatedActor(x) -> Celebrity(x))", "all x.((Actor(x) & OscarNominated(x)) -> Celebrity(x))", "all x.((Actor(x) & Oscarnominated(x)) -> Celebrity(x))", "all x.((Actor(x) & NominatedByOscar(x)) -> Celebrity(x))", "all x.(Oscarnominated(x) -> Celebrity(x))", "all x.((Actor(x) & Nominated(x)) -> Celebrity(x))", "all x.(OscarNominated(x) -> Celebrity(x))", "all x.((Actor(x) & NominatedForOscar(x)) -> Celebrity(x))", "all x y.((Actor(x) & OscarNominated(x)) -> Celebrity(y))", "all x y.((Actor(x) & Oscarnominated(x)) -> Celebrity(y))", "all x y.((Actor(x) & OscarNominated(x) & Actor(y)) -> Celebrity(x))", "all x y.((Actor(x) & OscarNominated(x)) -> Celebrity(x))", "all x.(OscarnominatedActor(x) -> Celebrity(x))", "all x.(OscarnominatedActor(x) -> Celebrity(x))", "all x y.((Actor(x) & Oscarnominated(x) & Actor(y)) -> Celebrity(x))"]}
{"id": "folio_validation_87", "nl": "All professional tennis players are athletes.", "fol": "all x.(IsProfessionalTennisPlayer(x) -> IsAthlete(x))", "prediction": ["all x.(ProfessionalTennisPlayer(x) -> Athlete(x))", "all x.((ProfessionalTennisPlayer(x) & Athlete(x)) -> Athlete(x))", "all x.(ProffessionalTennisPlayer(x) -> Athlete(x))", "all x.(TennisPlayer(x) -> Athlete(x))", "all x y.((ProfessionalTennisPlayer(x) & Athlete(y)) -> Athlete(x))", "all x y.((ProfessionalTennisPlayer(x) & Professional(y)) -> Athlete(x))", "all x.(ProfessionalTennisPlayer(x) -> Athlete(x))", "all x.((ProfessionalTennisPlayer(x) & Athlete(x)) -> Professional(x))", "all x.(ProfessionalTennisPlayer(x) -> Athletic(x))", "all x y.((ProfessionalTennisPlayer(x) & ProfessionalTennisPlayer(y)) -> Athlete(x))", "all x y.((ProfessionalTennisPlayer(x) & Player(y)) -> Athlete(x))", "all x.((TennisPlayer(x) & Professional(x)) -> Athlete(x))", "all x.(Player(x) -> Athlete(x))", "all x.(ProfessionalPlayer(x) -> Athlete(x))", "(all x.(ProfessionalTennisPlayer(x) -> Athlete(x))", "all x y.((ProfessionalTennisPlayer(x) & Athlete(y)) -> Athlete(x,y))"]}
{"id": "folio_validation_88", "nl": "If a person is a celebrity then they are well paid.", "fol": "all x.(IsCelebrity(x) -> IsWellPaid(x))", "prediction": ["all x.((Person(x) & Celebrity(x)) -> WellPaid(x))", "all x.((Person(x) & Celebrity(x)) -> WellPayed(x))", "all x.(Celebrity(x) -> WellPaid(x))", "all x.(Celebrity(x) -> WellPayed(x))", "all x.(Celebrities(x) -> WellPaid(x))", "all x.(Celebrities(x) -> WellPayed(x))", "all x.((Person(x) & Celebrity(x)) -> WellPaid(x))", "all x.((Person(x) & Celebrity(x)) -> WellPayed(x))", "all x.(Celebrate(x) -> WellPaid(x))", "all x.(Celebrate(x) -> WellPayed(x))", "all x.((Person(x) & Celeb(x)) -> WellPaid(x))", "all x.((Person(x) & Celebrity(x)) -> WellFunded(x))", "all x.((Person(x) & Celeb(x)) -> WellPayed(x))", "all x y.((Person(x) & Celebrity(x)) -> WellPayed(x))", "all x y.((Person(x) & Celebrity(x)) -> WellPaid(x))", "all x.(Celebration(x) -> WellPaid(x))"]}
{"id": "folio_validation_89", "nl": "If a person is an athlete then they are famous.", "fol": "all x.(IsAthlete(x) -> IsFamous(x))", "prediction": ["all x.(Athlete(x) -> Famous(x))", "all x.((Person(x) & Athlete(x)) -> Famous(x))", "all x y.((Person(x) & Athlete(x)) -> Famous(x))", "all x.((Person(x) & Athletic(x)) -> Famous(x))", "all x.((Person(x) & Athlete(x)) -> Famous(x))", "all x.((Person(x) & Athlete(x)) -> Famed(x))", "all x.(Athlete(x) -> FamousAthlete(x))", "all x y.((Person(x) & Athlete(x)) -> Famous(y))", "all x.(Athlete(x) -> Famous(x))", "all x.((Athlete(x) & Famous(x)) -> Athlete(x))", "all x.(Athlete(x) -> Famed(x))", "all x.((Person(x) & Athlete(x)) -> Familiar(x))", "all x.((Person(x) & Athlete(x)) -> Famille(x))", "all x y.((Person(x) & Athlete(y)) -> Famous(x))", "all x.(FamousAthlete(x) -> FamousAthlete(x))", "all x.(Athlete(x) -> Famous(x))"]}
{"id": "folio_validation_90", "nl": "All well-paid people live in tax havens.", "fol": "all x.(IsWellPaid(x) -> LivesInTaxHaven(x))", "prediction": ["all x.(WellPaid(x) -> LivesInTaxHaven(x))", "all x.(WellPaidPerson(x) -> LivesInTaxHaven(x))", "all x.(WellPayedPerson(x) -> LivesInTaxHaven(x))", "all x.(WellPaid(x) -> LivesInTaxHavens(x))", "all x.(WellPayedPerson(x) -> LivesInTaxehaven(x))", "all x.(WellPaid(x) -> LivesInTaxen(x))", "all x.(WellPayed(x) -> LivesInTaxHaven(x))", "all x.(WellPayedPerson(x) -> LivesInTaxeHaven(x))", "all x.(WellPaid(x) -> LivesInTaxehaven(x))", "all x.(WellPaidPerson(x) -> LivesInTaxehaven(x))", "all x.(WellPayed(x) -> LivesInTaxehaven(x))", "all x.(WellPayed(x) -> LivesInTaxHavens(x))", "all x.(WellPaid(x) -> LivesInTaxeHaven(x))", "all x.(WellPaidPerson(x) -> LivesInTaxen(x))", "all x.(WellPaidPerson(x) -> LivesInTaxHavens(x))", "all x.(WellPayedPerson(x) -> LivesInTaxHavens(x))"]}
{"id": "folio_validation_91", "nl": "If Djokovic is famous and is an athlete, then Djokovic lives in well paid.", "fol": "((IsFamous(Djokovic) & IsAthlete(Djokovic)) -> LivesInTaxHaven(Djokovic))", "prediction": ["all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> WellPayed(x))", "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> LivesWellPayed(x))", "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> WellPaid(x))", "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> LivesWellPaid(x))", "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> LivesInWellPayed(x))", "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> WellPayedLife(x))", "all x.((Famous(x) & Athlete(x)) -> WellPayed(x))", "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> LivesInWellPaid(x))", "all x.((Famous(x) & Athlete(x)) -> LivesWellPayed(x))", "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> WellPayedLiving(x))", "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> WellPaidLife(x))", "all x.((Famous(x) & Athlete(x)) -> WellPaid(x))", "all x.((Famous(x) & Athlete(x)) -> LivesWellPaid(x))", "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> LivingWellPayed(x))", "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> WellPaidLiving(x))", "all x.((Famous(x) & Athlete(x)) -> LivesInWellPayed(x))"]}
{"id": "folio_validation_92", "nl": "Djokovic is a Grand Slam champion.", "fol": "IsGrandSlamChampion(Djokovic)", "prediction": ["all x.((Djokovic(x) & GrandSlamChampion(x)) -> GrandSlamChampion(x))", "(GrandSlamChampion(Djokovic))", "all x.(Djokovic(x) -> GrandSlamChampion(x))", "all x.((Djokovic(x) & GrandSlamChampion(x)) -> Champion(x))", "all x.((Djokovic(x) & GrandSlamChampon(x)) -> GrandSlamChampion(x))", "all x.((Djokovic(x) & GrandSlamChampion(x)) -> GrandSlam(x))", "all x.(GrandSlamChampion(x) -> Djokovic(x))", "(GrandSlamChampion(Djokovic) & GrandSlamChampion(Djokovic))", "all x.((Djokovic(x) & GrandSlamChamp(x)) -> GrandSlamChampion(x))", "all x y.((Djokovic(x) & GrandSlamChampion(y)) -> GrandSlamChampion(x,y))", "all x y.((Djokovic(x) & GrandSlamChampion(y)) -> GrandSlamChampion(x))", "(GrandSlamChampion(Djokovic)", "all x.((Djokovic(x) & GrandSlamChampon(x)) -> GrandSlamChampon(x))", "all x.((Djokovic(x) & GrandSlamChampion(x)) -> -GrandSlamChampion(x))", "All x.(Djokovic(x) -> GrandSlamChampion(x))", "all x.((Djokovic(x) & GrandSlamChampion(x)) -> GrandSlamChampon(x))"]}
{"id": "folio_validation_93", "nl": "Djokovic lives in a tax haven.", "fol": "LivesInTaxHaven(Djokovic)", "prediction": ["all x y.((Djokovic(x) & TaxHaven(y)) -> LivesIn(x,y))", "all x.(Djokovic(x) -> exists y.(TaxHaven(y) & LivesIn(x,y))))", "all x.(Djokovic(x) -> LivesInTaxHaven(x))", "all x.(Djokovic(x) -> TaxHaven(x))", "all x.((Djokovic(x) & TaxHaven(x)) -> LivesIn(x,y))", "all x.(Djokovic(x) -> LivesInTaxen(x))", "all x.(Djokovic(x) -> exists y.(Taxen(y) & LivesIn(x,y))))", "all x y z.((Djokovic(x) & TaxHaven(y) & TaxHaven(z)) -> LivesIn(x,y,z))", "all x.(Djokovic(x) -> exists y.(TaxHaven(y) & LivesIn(x,y)))", "all x y z.((Djokovic(x) & TaxHaven(y) & Tax(z)) -> LivesIn(x,y,z))", "all x y z.((Djokovic(x) & TaxHaven(y) & TaxHenry(z)) -> LivesIn(x,y,z))", "all x.((Djokovic(x) & TaxHaven(x)) -> LivesIn(x))", "all x.(Djokovic(x) -> exists y.(Taxhaven(y) & LivesIn(x,y))))", "all x y z.((Djokovic(x) & TaxHaven(y) & Tax(z)) -> LivesIn(x,y))", "all x.((Djokovic(x) & TaxHaven(x)) -> LivesIn(x,Djokovic))", "all x y z.((Djokovic(x) & TaxHaven(y) & TaxHaven(z)) -> LivesIn(x,y))"]}
{"id": "folio_validation_94", "nl": "Djokovic does not live in a tax haven.", "fol": "-LivesInTaxHaven(Djokovic)", "prediction": ["all x.(Djokovic(x) -> -TaxHaven(x))", "all x y.((Djokovic(x) & TaxHaven(y)) -> -LivesIn(x,y))", "all x.(Djokovic(x) -> -TaxeHaven(x))", "Djokovic -exists x.(TaxHaven(x) & -LivesIn(x,Djokovic))", "-exists x.(Djokovic(x) & TaxHaven(x))", "Djokovic - exists x.(TaxHaven(x) & -LivesIn(x,Djokovic))", "(-exists x.(Djokovic(x) & TaxHaven(x)))", "all x.(Djokovic(x) -> -LivingInTaxHaven(x))", "all x y.((Djokovic(x) & TaxHaven(y)) -> -LivingIn(x,y))", "all x.((Djokovic(x) & TaxHaven(x)) -> -LivesIn(x,y))", "all x.((Djokovic(x) & -TaxHaven(x)) -> -LivesIn(x,y))", "all x.(Djokovic(x) -> -LivesInTaxHaven(x))", "Djokovic -exists x.(TaxHaven(x) & LivesIn(x,Djokovic))", "all x.(Djokovic(x) -> -LivingInTaxen(x))", "all x.((Djokovic(x) & TaxHaven(x)) -> -LivesIn(x,Djokovic))", "Djokovic - exists x.(TaxHaven(x) & -LivesIn(x,Djokovic)))"]}
{"id": "folio_validation_95", "nl": "Diamond Mine is a professional wrestling stable, formed in WWE.", "fol": "(IsProfessionalWrestlingStable(Diamondmine) & IsFormedIn(Diamondmine,Wwe))", "prediction": ["all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestling(x)))", "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestleMania(x)))", "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestling(x)))", "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestling(x)))", "All x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestling(x)))", "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWWE(x)))", "all x.(DiamondMirror(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestling(x)))", "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedIn(x,Wrestling)))", "all x.((DiamondMine(x) & ProfessionalWrestlingStable(x) & FormedInWrestling(x)) -> FormedIn(x,Wrestling))", "all x.((DiamondMine(x) & ProfessionalWrestlingStable(x) & FormedInWrestling(x)) -> FormedInWrestling(x))", "all x.((DiamondMine(x) & ProfessionalWrestlingStable(x) & FormedInWrestleMania(x)) -> FormedInWrestleMania(x))", "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestleMania(x)))", "all x.(DiamondMiner(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestling(x)))", "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestleMuseum(x)))", "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestleMean(x)))", "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestling(x)))"]}
{"id": "folio_validation_96", "nl": "Roderick Strong leads Diamond Mine.", "fol": "LeaderOf(Roderickstrong,Diamondmine)", "prediction": ["Roderick Strong leads Diamond Mine.", "RoderickStrongLeadsDiamondMine(Roderick)", "Roderick Strong leads DiamondMine.", "Roderick Strong leads DiamondMine(Roderick)", "Roderick Strong leadsDiamondMine(Roderick)", "RoderickStrongLeadsDiamondMine(Roderick(Roderick) & LeadsDiamondMine(Roderick(Roderick))", "RoderickStrongLeadsDiamondMine(Roderick(Roderick(Roderick) & LeadsDiamondMine(Roderick(Roderick))", "RoderickStrongLeadsDiamondMine(Roderick(Roderick) & Leads(Roderick(Roderick))", "RoderickStrong leadsDiamondMine(Roderick)", "RoderickStrongLeadsDiamondMine(Roderick(Roderick) -> Leads(Roderick(Roderick))", "RoderickStrongLeadsDiamondMine(Roderick(Roderick) & LeadsMine(Roderick(Roderick))", "RoderickStrongLeadsDiamondMine(Roderick)", "RoderickStrongLeadsDiamondMine(roderick,strong)", "RoderickStrongLeadsDiamondMine(Roderick(Roderick) -> LeadsMine(Roderick(Roderick))", "RoderickStrongLeadsDiamondMine(Roderick(Roderick) & LeadsDiamondMine(Roderick(Roderick(Roderick))", "RoderickStrongLeadsDiamondMine(Roderick(Roderick) & LeadsDiamondMine(Roderick))"]}
{"id": "folio_validation_97", "nl": "Diamond Mine includes the Creed Brothers, and Ivy Nile.", "fol": "(IncludesMember(Diamondmine,Creedbrothers) & IncludesMember(Diamondmine,Ivynile))", "prediction": ["all x.(DiamondMine(x) -> (CreedBrothers(x) & IvyNile(x)))", "(all x.(DiamondMine(x) -> CreedBrothers(x)) & all y.(DiamondMine(y) -> IvyNile(y)))", "all x.(DiamondMine(x) -> (IncludesCreedBrothers(x) & IncludesIvyNile(x)))", "all x y z.((DiamondMine(x) & CreedBrothers(y) & IvyNile(z)) -> Includes(x,y,z))", "all x.(DiamondMine(x) -> (CreedBrothers(x) | IvyNile(x)))", "all x.(DiamondMiner(x) -> (CreedBrothers(x) & IvyNile(x)))", "all x.(DiamondMine(x) -> (ContainsCreedBrothers(x) & IncludesIvyNile(x)))", "(IncludesCreedBrothers(diamondmine) & IncludesIvyNile(diamondmine))", "(exists x.(DiamondMine(x) & CreedBrothers(x)) & exists y.(IvyNile(y) & Includes(x,y))))", "(CreedBrothers(diamondmine) & IvyNile(diamondmine))", "all x y.((DiamondMine(x) & CreedBrothers(y) & IvyNile(x)) -> Includes(x,y))", "all x.(DiamondMine(x) -> (CreedBrothers(x) & IvyNile(x)))", "(all x.(DiamondMine(x) -> (CreedBrothers(x) | IvyNile(x))))", "all x y.((DiamondMine(x) & CreedBrothers(y) & IvyNile(z)) -> Includes(x,y))", "(exists x.(DiamondMine(x) & CreedBrothers(x)) & exists y.(IvyNile(y) & Mine(z))))", "all x.(DiamondMine(x) -> (CreedBrothers(x) & IvyNile(x)))"]}
{"id": "folio_validation_98", "nl": "Imperium has a feud with Diamond Mine.", "fol": "HasFeudWith(Imperium,Diamondmine)", "prediction": ["all x.(Imperium(x) -> FeudWithDiamondMine(x))", "all x y.((Imperium(x) & DiamondMine(y)) -> Feud(x,y))", "all x y.((Imperium(x) & DiamondMine(y)) -> FeudWith(x,y))", "all x y z.((Imperium(x) & DiamondMine(y) & Feud(z)) -> Has(x,y,z))", "all x y z.((Imperium(x) & DiamondMine(y) & Feud(z)) -> HasFeud(x,y,z))", "all x y.((Imperium(x) & DiamondMine(y)) -> FeudWith(x,y))", "all x y.((Imperium(x) & DiamondMine(y)) -> Feud(x,y))", "all x.(Impederium(x) -> FeudWithDiamondMine(x))", "all x.(Imperium(x) -> FeudWithDiamondMine(x))", "all x y.((Imperium(x) & DiamondMine(y)) -> HasFud(x,y))", "all x y.((Impederium(x) & DiamondMine(y)) -> FeudWith(x,y))", "all x y.((Impederium(x) & DiamondMine(y)) -> Feud(x,y))", "all x y z.((Imperium(x) & DiamondMine(y) & Feud(z)) -> HasFud(x,y,z))", "all x y.((Imperium(x) & DiamondMine(y)) -> HasFeud(x,y))", "all x.(Iperium(x) -> FeudWithDiamondMine(x))", "all x y z.((Imperium(x) & DiamondMine(y) & Feud(z)) -> Has(x,y))"]}
{"id": "folio_validation_99", "nl": "Roderick strong leads a professional wrestling stable.", "fol": "exists x.(LeaderOf(Roderickstrong,x) & IsProfessionalWrestlingStable(x))", "prediction": ["all x y.((Roderick(x) & ProfessionalWrestlingStable(y)) -> StrongLeads(x,y))", "all x y.((Roderick(x) & ProfessionalWrestlingStable(y)) -> StrongLeads(x,y))", "all x y.((Roderick(x) & ProfessionalWrestlingStable(y)) -> LeadsStrong(x,y))", "all x.((Roderick(x) & StrongLeadsProfessionalWrestlingStable(x)) -> Strong(x))", "all x.((Roderick(x) & StrongLeadsProfessionalWrestlingStable(x)) -> ProfessionalWrestlingStable(x))", "Roderick StrongLeadsProfessionalWrestlingStable(Roderick)", "all x y.((Roderick(x) & ProfessionalWrestlingStable(y)) -> Leads(x,y))", "all x y.((Roderick(x) & ProfessionalWrestlingStable(y)) -> LeadsStrong(x,y))", "all x.((Roderick(x) & StrongLeadsProfessionalWrestlingStable(x)) -> ProfessionalWrestlingStable(x))", "all x.((Roderick(x) & StrongLeadsProfessionalWrestlingStable(x)) -> ProfessionalWrestling(x))", "all x.((Roderick(x) & StrongLeadsProfessionalWrestlingStable(x)) -> Strong(x))", "all x.((Roderick(x) & StrongLeadsProfessionalWrestling(x)) -> Stable(x))", "Roderick StrongLeadsProfessionalWrestlingStable(roderick)", "all x y.((Roderick(x) & ProfessionalWrestlingStable(y)) -> Leads(x,y))", "all x.((Roderick(x) & StrongLeadsProfessionalWrestlingStable(x)) -> Professional(x))", "all x y.((Roderick(x) & ProfessionalWrestlingStable(y)) -> LeadsStrongly(x,y))"]}
{"id": "folio_validation_100", "nl": "Roderick strong leads the Creed Brothers.", "fol": "LeaderOf(Roderickstrong,Creedbrothers)", "prediction": ["all x y.((Roderick(x) & CreedBrothers(y)) -> StrongLeads(x,y))", "Roderick StrongLeadsCreedBrothers(roderick)", "Roderick StrongLeadsCreedBrothers(Roderick)", "Roderick StrongLeadsCreedBrothers.", "all x y.((Roderick(x) & CreedBrothers(y)) -> StrongLeads(x,y))", "Roderick StrongLeadsCreedBrothers(Roderick,CreedBrothers)", "all x.((Roderick(x) & CreedBrothers(x)) -> StrongLeads(x))", "all x.((Roderick(x) & CreedBrothers(x)) -> StrongLeads(x,CreedBrothers))", "all x y.((Roderick(x) & CreedBrother(y)) -> StrongLeads(x,y))", "all x.((Roderick(x) & CreedBrothers(x)) -> StrongLeads(x,Roderick))", "all x.((Roderick(x) & CreedBrothers(y)) -> StrongLeads(x,y))", "all x.((Roderick(x) & CreedBrothers(x)) -> StrongLeads(x,y))", "Roderick StrongLeadsCreedBrothers(roderick,creedbrothers)", "all x y.((Roderick(x) & CreedBrothers(y)) -> StrongLead(x,y))", "all x y.((Roderick(x) & CreedBrothers(y)) -> StrongLeader(x,y))", "Roderick StrongLeadsCreedBrothers(roderick,CreedBrothers)"]}
{"id": "folio_validation_101", "nl": "Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile.", "fol": "all x.((IsProfessionalWrestlingStable(x) & IncludesMember(x,Ivynile)) -> -HasFeudWith(Imperium,x))", "prediction": ["all x.((Imperium(x) & -FeudWithProfessionalWrestlingStable(x) & IncludesIvyNile(x)) -> -FeudWithIvyNile(x))", "all x.(Imperium(x) -> -exists y.(ProfessionalWrestlingStable(y) & IncludesIvyNile(x,y)))", "all x.(Imperium(x) -> (-FudWithProfessionalWrestlingStable(x) & IncludesIvyNile(x)))", "all x y.((Imperium(x) & ProfessionalWrestlingStable(y) & IncludesIvyNile(x,y)) -> -Feud(x,y))", "all x y.((Imperium(x) & ProfessionalWrestlingStable(y) & IncludesIvyNile(x,y)) -> -FeudWith(x,y))", "all x.((Imperium(x) & -FudWithProfessionalWrestlingStable(x) & IncludesIvyNile(x)) -> -FudWithIvyNile(x))", "all x.(Imperium(x) -> (-FeudWithProfessionalWrestlingStable(x) & IncludesIvyNile(x)))", "all x y.((Imperium(x) & ProfessionalWrestlingStable(y) & IncludesIvyNile(x)) -> -Feud(x,y))", "all x.((Imperium(x) & -FudWithProfessionalWrestlingStable(x) & IncludesIvyNile(x)) -> -FeudWithIvyNile(x))", "all x y z.((Imperium(x) & ProfessionalWrestlingStable(y) & IvyNile(z)) -> -Feud(x,y,z))", "all x y.((Imperium(x) & ProfessionalWrestlingStable(y) & IvyNile(y)) -> -Feud(x,y))", "all x y.((Imperium(x) & ProfessionalWrestlingStable(y) & IvyNile(x)) -> -Feud(x,y))", "all x y z.((Imperium(x) & ProfessionalWrestlingStable(y) & IvyNile(z)) -> -FeudWith(x,y,z))", "all x y.((Imperium(x) & ProfessionalWrestlingStable(y) & IncludesIvyNile(x,y)) -> -Fud(x,y))", "all x y.((Imperium(x) & ProfessionalWrestlingStable(y) & IncludesIvyNile(x)) -> -FeudWith(x,y))", "all x y.((Imperium(x) & ProfessionalWrestlingStable(y) & IvyNile(x)) -> -FeudWith(x,y))"]}
{"id": "folio_validation_102", "nl": "Symphony No. 9 is a music piece.", "fol": "IsMusicPiece(Symphony9)", "prediction": ["all x.(SymphonyNo.9(x) -> MusicPiece(x))", "All x.(SymphonyNo.9(x) -> MusicPiece(x))", "all x.((SymphonyNo.9(x) & MusicPiece(x)) -> MusicPiece(x))", "all x.(SymphonyNo9.(x) -> MusicPiece(x))", "all x.((SymphonyNo.9) & MusicPiece(x)) -> MusicPiece(x))", "(MusicPiece(SymphonyNo.9) & MusicPiece(SymphonyNo.9))", "all x y.((Symphony(x) & SymphonyNo.9(y)) -> MusicPiece(x))", "all x y.((Symphony(x) & SymphonyNo.9) & MusicPiece(y)) -> MusicPiece(x,y))", "all x.(Symphony(x) -> MusicPiece(x))", "all x.(SymphonyNo.9) -> MusicPiece(x))", "All x.(Symphony(x) -> MusicPiece(x))", "all x y.((Symphony(x) & SymphonyNo.9(y)) -> MusicPiece(x,y))", "all x.(SymphonyNo9(x) -> MusicPiece(x))", "all x.(SymphonyNo.9(x) -> MusicPiece(x))", "(MusicPiece(symphony) & SymphonyNo.9(symphony))", "(MusicPiece(SymphonyNo.9))"]}
{"id": "folio_validation_103", "nl": "Composers write music pieces.", "fol": "all x y.((IsMusicPiece(x) & WrittenBy(x,y)) -> Composer(y))", "prediction": ["all x y.((Composer(x) & MusicPiece(y)) -> Writes(x,y))", "all x.(Composer(x) -> WritesMusicPiece(x))", "all x.(Composer(x) -> WritesMusicPieces(x))", "all x y.((Composer(x) & MusicPiece(y)) -> Write(x,y))", "all x y z.((Composer(x) & MusicPiece(y) & MusicPiece(z)) -> Writes(x,y,z))", "all x y z.((Composer(x) & MusicPiece(y) & MusicPiece(z)) -> Write(x,y,z))", "all x y z.((Composer(x) & MusicPiece(y) & MusicPiece(z)) -> Writes(x,y))", "all x.(Composer(x) -> WriteMusicPiece(x))", "all x y z.((Composer(x) & MusicPiece(y) & MusicPiece(z)) -> Write(x,y))", "all x y z.((Composer(x) & MusicPiece(y) & Composer(z)) -> Writes(x,y,z))", "all x y z.((Composer(x) & MusicPiece(y) & Composition(z)) -> Writes(x,y,z))", "all x y z.((Composer(x) & MusicPiece(y) & Music(z)) -> Writes(x,y,z))", "all x y.((Composer(x) & Music(y)) -> Writes(x,y))", "all x.(Composer(x) -> WritesMusic(x))", "all x y z.((Composer(x) & MusicPiece(y) & Song(z)) -> Writes(x,y,z))", "all x y.((Composer(x) & MusicPiece(y) & Writes(x,y)) -> Writes(x,y))"]}
{"id": "folio_validation_104", "nl": "Beethoven wrote Symphony No. 9.", "fol": "WrittenBy(Symphony9,Beethoven)", "prediction": ["all x y z.((Boboss(x) & SymphonyNo.9(y) & SymphonyNo.9(z)) -> WrittenBy(x,y,z))", "all x y z.((Boboss(x) & SymphonyNo.9(y) & Symphony(z)) -> WrittenBy(x,y,z))", "all x y z.((Benedicton(x) & SymphonyNo.9(y) & Symphony(z)) -> WrittenBy(x,y,z))", "all x y z.((Benedicton(x) & SymphonyNo.9(y) & SymphonyNo.9(z)) -> WrittenBy(x,y,z))", "all x y z.((Boltz(x) & SymphonyNo.9(y) & SymphonyNo.9(z)) -> WrittenBy(x,y,z))", "all x y.((Boboss(x) & SymphonyNo.9(y)) -> WrittenBy(x,y))", "all x y z.((Bobson(x) & SymphonyNo.9(y) & Symphony(z)) -> WrittenBy(x,y,z))", "all x y z.((Boltz(x) & SymphonyNo.9(y) & Symphony(z)) -> WrittenBy(x,y,z))", "all x y z.((Boboss(x) & SymphonyNo.9(y) & Symphony(z)) -> WrittenBy(x,y))", "all x y.((Benedicton(x) & SymphonyNo.9(y)) -> WrittenBy(x,y))", "all x y.((Benjamin(x) & SymphonyNo.9(y)) -> WrittenBy(x,y))", "all x y z.((B Beethoven(x) & SymphonyNo.9(y) & Symphony(z)) -> WrittenBy(x,y,z))", "all x y z.((Benjamin(x) & SymphonyNo.9(y) & Symphony(z)) -> WrittenBy(x,y,z))", "all x y z.((Benedicton(x) & SymphonyNo.9(y) & Symphony(z)) -> WrittenBy(x,y))", "all x y.((Bobo Beethoven(x) & SymphonyNo.9(y)) -> WrittenBy(x,y))", "all x y z.((Boboston(x) & SymphonyNo.9(y) & Symphony(z)) -> WrittenBy(x,y,z))"]}
{"id": "folio_validation_105", "nl": "Vienna Music Society premiered Symphony No. 9.", "fol": "PremieredBy(Viennamusicsociety,Symphony9)", "prediction": ["All x y.((ViennaMusicSymphony(x) & SymphonyNo.9(y)) -> Premiered(x,y))", "all x y.((ViennaMusicSymphony(x) & SymphonyNo.9(y)) -> Premiered(x,y))", "All x y z.((ViennaMusicSymphony(x) & SymphonyNo.9(y) & SymphonyNo.9(z)) -> Premiered(x,y,z))", "All x y.((ViennaMusicSociety(x) & SymphonyNo.9(y)) -> Premiered(x,y))", "All x y z.((ViennaMusicSymphony(x) & SymphonyNo.9(y) & Symphony(z)) -> Premiered(x,y,z))", "all x y.((ViennaMusicSociety(x) & SymphonyNo.9(y)) -> Premiered(x,y))", "all x y z.((ViennaMusicSymphony(x) & SymphonyNo.9(y) & Symphony(z)) -> Premiered(x,y,z))", "All x y.((ViennaMusicStadium(x) & SymphonyNo.9(y)) -> Premiered(x,y))", "all x y.((ViennaMusicStadium(x) & SymphonyNo.9(y)) -> Premiered(x,y))", "All x y z.((ViennaMusicSymphony(x) & SymphonyNo.9(y) & SymphonyNo.9(z)) -> PremieredBy(x,y,z))", "All x y.((ViennaMusicSymphony(x) & SymphonyNo.9)) -> Premiered(x,y))", "all x y.((ViennaMusicSymphony(x) & SymphonyNo.9)) -> Premiered(x,y))", "All x y z.((ViennaMusicSymphony(x) & SymphonyNo.9(y) & Symphony(z)) -> PremieredBy(x,y,z))", "All x y.((ViennaMusicSymphony(x) & SymphonyNo.9(y)) -> PremieredBy(x,y))", "all x y z.((ViennaMusicSymphony(x) & SymphonyNo.9(y) & Symphony(z)) -> PremieredBy(x,y,z))", "all x y.((ViennaMusicSociety(x) & SymphonyNo.9)) -> Premiered(x,y))"]}
{"id": "folio_validation_106", "nl": "Vienna Music Society is an orchestra.", "fol": "IsOrchestra(Viennamusicsociety)", "prediction": ["all x.(ViennaMusicSyst\u00e8me(x) -> Orchestra(x))", "all x.(ViennaMusicStadium(x) -> Orchestra(x))", "All x.(ViennaMusicSyst\u00e8me(x) -> Orchestra(x))", "all x.(ViennaMusicSymposia(x) -> Orchestra(x))", "All x.(ViennaMusicStadium(x) -> Orchestra(x))", "(ViennaMusicSyst\u00e8me(Vienna) & Orchestra(Vienna))", "All x.(ViennaMusicSymposia(x) -> Orchestra(x))", "(ViennaMusicStadium(Vienna) & Orchestra(Vienna))", "all x.(ViennaMusicSociety(x) -> Orchestra(x))", "(ViennaMusicSociety(Vienna) & Orchestra(Vienna))", "all x.(ViennaMusicStay(x) -> Orchestra(x))", "All x.(ViennaMusicSociety(x) -> Orchestra(x))", "All x.(ViennaMusicStay(x) -> Orchestra(x))", "all x.((ViennaMusicSymposia(x) & Orchestra(x)) -> Operation(x))", "all x.((ViennaMusicStadium(x) & Orchestra(x)) -> Operation(x))", "all x.((ViennaMusicSymposia(x) & Orchestra(x)) -> Orchestra(x))"]}
{"id": "folio_validation_107", "nl": "Beethoven leads the Vienna Music Society.", "fol": "Leads(Beethoven,Viennamusicsociety)", "prediction": ["all x y.((Boboss(x) & ViennaMusicSociety(y)) -> Leads(x,y))", "all x y.((Boboss(x) & ViennaMusicSyst\u00e8me(y)) -> Leads(x,y))", "all x y.((Boboss(x) & ViennaMusicScientific(y)) -> Leads(x,y))", "all x y.((Boboss(x) & ViennaMusicScientist(y)) -> Leads(x,y))", "all x y.((B Beethoven(x) & ViennaMusicSociety(y)) -> Leads(x,y))", "all x y.((B Beethoven(x) & ViennaMusicSyst\u00e8me(y)) -> Leads(x,y))", "all x.((Bobo Beethoven(x) & ViennaMusicSociety(x)) -> Leads(x,y))", "all x.((Bobo Beethoven(x) & ViennaMusicSyst\u00e8me(x)) -> Leads(x,y))", "all x.((Boboss(x) & ViennaMusicSyst\u00e8me(x)) -> Leads(x,y))", "all x.((Boboss(x) & ViennaMusicSociety(x)) -> Leads(x,y))", "all x y.((Boboss(x) & ViennaMusicSect.(y))) -> Leads(x,y))", "all x.((Bobo Beethoven(x) & ViennaMusicScientific(x)) -> Leads(x,y))", "all x.((Bobo Beethoven(x) & ViennaMusicSyst\u00e8me(y)) -> Leads(x,y))", "all x.((Boboss(x) & ViennaMusicSyst\u00e8me(y)) -> Leads(x,y))", "all x.((Boboss(x) & ViennaMusicSociety(x)) -> Leads(x,Boboss))", "all x.((Boboss(x) & ViennaMusicSyst\u00e8me(x)) -> Leads(x,Boboss))"]}
{"id": "folio_validation_108", "nl": "Orchestras are led by conductors.", "fol": "all x y.((IsOrchestra(x) & Leads(y,x)) -> IsConductor(y))", "prediction": ["all x y.((Orchestra(x) & Conductor(y)) -> Leads(x,y))", "all x y z.((Orchestra(x) & Conductor(y) & Conductor(z)) -> Leads(x,y,z))", "all x y.((Orchestra(x) & Conductor(y)) -> LedBy(x,y))", "all x.(Orchestra(x) -> LeadByConductor(x))", "all x y z.((Orchestra(x) & Conductor(y) & Conductor(z)) -> LedBy(x,y,z))", "all x y.((Orchestra(x) & Conductor(y)) -> Lead(x,y))", "all x y.((Orchestra(x) & Conductor(y)) -> LeadsBy(x,y))", "all x y z.((Orchestra(x) & Conductor(y) & Conductor(z)) -> Leads(x,y))", "all x.(Orchestra(x) -> LeadsByConductor(x))", "all x.(Orchestra(x) -> LedByConductor(x))", "all x y z.((Orchestra(x) & Conductor(y) & Conductor(z)) -> Lead(x,y,z))", "all x.(Orchestra(x) -> LeadsByConductors(x))", "all x.(Orchestra(x) -> LeadByConductors(x))", "all x.(Orchestra(x) -> exists y.(Conductor(y) & Leads(x,y)))", "all x y z.((Orchestra(x) & Conductor(y) & Conductor(z)) -> LedBy(x,y))", "all x.(Orchestra(x) -> LedByConductors(x))"]}
{"id": "folio_validation_109", "nl": "Beethoven is a composer.", "fol": "Composer(Beethoven)", "prediction": ["all x.((Bobo Beethoven(x) & Composer(x)) -> Composer(x))", "all x.(Bobo Beethoven(x) -> Composer(x))", "all x.((B Beethoven(x) & Composer(x)) -> Composer(x))", "all x.((Bobop Beethoven(x) & Composer(x)) -> Composer(x))", "all x.((Bobophren(x) & Composer(x)) -> Composer(x))", "all x.((Bop Beethoven(x) & Composer(x)) -> Composer(x))", "all x.(( Beethoven(x) & Composer(x)) -> Composer(x))", "all x.((Boboss(x) & Composer(x)) -> Composer(x))", "all x.(Bobo(x) -> Composer(x))", "all x.((Bobo Beethoven(x) & Composer(x)) -> Composite(x))", "all x.(Bobos Beethoven(x) -> Composer(x))", "all x.(Benedict(x) -> Composer(x))", "all x.((Bobophren(x) & Composer(x)) -> Composite(x))", "all x.(Conductor(x) -> Beethoven(x))", "all x.(Bonus(x) -> Composer(x))", "all x.((Bobop Beethoven(x) & Composer(x)) -> Composite(x))"]}
{"id": "folio_validation_110", "nl": "Some orchestras premiered music pieces.", "fol": "exists x y.(IsOrchestra(x) & IsMusicPiece(y) & PremieredBy(x,y))", "prediction": ["exists x.(Orchestra(x) & PremieredMusicPieces(x))", "exists x.(Orchestra(x) & PremieredMusicPiece(x))", "exists x y.(Orchestra(x) & MusicPiece(y) & Premiered(x,y))", "exists x.(Orchestra(x) & PremieredMusic(x))", "exists x y.(Orchestra(x) & MusicPiece(y) & PremieredBy(x,y))", "exists x.(Orchestra(x) & PrimedMusicPieces(x))", "exists x.(Orchestra(x) & MusicPiece(x) & Premiered(x))", "exists x.(Orchestra(x) & PrimedMusicPiece(x))", "exists x.(Orchestra(x) & PremieresMusicPieces(x))", "exists x.(Orchestra(x) & PrimeredMusicPieces(x))", "exists x y.(Orchestra(x) & Orchestra(y) & PremieredMusicPieces(x,y))", "exists x.(Orchestra(x) & PrimitivedMusicPieces(x))", "exists x y.(Orchestra(x) & MusicPiece(y) & Premieres(x,y))", "exists x.(Orchestra(x) & MusicPiece(x) & Premiered(x,y))", "exists x y.(Orchestra(x) & Orchestra(y) & PremieredMusicPiece(x,y))", "exists x.(Orchestra(x) & PrimarilyPremieredMusicPieces(x))"]}
{"id": "folio_validation_111", "nl": "Beethoven is not a conductor.", "fol": "-IsConductor(Beethoven)", "prediction": ["all x.(Bobo Beethoven(x) -> -Conductor(x))", "all x.(Benedict(x) -> -Conductor(x))", "all x.(Bobo(x) -> -Conductor(x))", "(-Conductor(Benjamin))", "(-Conductor(Benjamin) & -Conductor(Benjamin))", "(-Conductor(Benedict) & Beethoven(Benedict))", "(-Conductor(Benedict) & -Conductor(Benedict))", "(-Conductor(Benedict))", "(-Conductor(Benedict(Benedict) & -Conductor(Benedict))", "all x.(Conductor(x) -> -Conductor(x))", "all x.(Conductor(x) -> Beethoven(x))", "(-Conductor(Benjamin) & Beethoven(Benjamin))", "(-Conductor(Benedikt) & -Conductor(Benedikt))", "(-Conductor(Benjamin) & -Conducts(Benjamin))", "(-Conductor(Benedict) & -Conducts(Benedict))", "(-Conductor(Benedict(Benedict))"]}
{"id": "folio_validation_112", "nl": "All of Zaha Hadid's design styles are timeless.", "fol": "all x.(ZahaHadidDesignStyle(x) -> IsTimeless(x))", "prediction": ["all x.(ZahaHadidDesignStyle(x) -> Timeless(x))", "all x.(ZahaHadid(x) -> TimelessDesignStyle(x))", "all x.((DesignStyle(x) & ZahaHadid(x)) -> Timeless(x))", "all x.((ZahaHadid(x) & DesignStyle(x)) -> Timeless(x))", "all x.(DesignStyle(x) -> Timeless(x))", "all x.(ZahaHadid(x) -> Timeless(x))", "all x y.((DesignStyle(x) & ZahaHadid(y)) -> Timeless(y))", "all x y.((DesignStyle(x) & ZahaHadid(y)) -> Timeless(x))", "all x.(ZahaHadid(x) -> TimelessDesignStyles(x))", "all x y.((ZahaHadid(x) & DesignStyle(y)) -> Timeless(x))", "all x.(ZahaHadid(x) -> (DesignStyle(x) & Timeless(x)))", "all x y.((ZahaHadid(x) & DesignStyle(y)) -> Timeless(x,y))", "all x.(ZahaHadidStyle(x) -> Timeless(x))", "all x.((ZahaHadid(x) & DesignsStyle(x)) -> Timeless(x))", "all x y.((DesignStyle(x) & ZahaHadid(y)) -> Timeless(x,y))", "all x.(ZahaHadid(x) -> TimelessStyle(x))"]}
{"id": "folio_validation_113", "nl": "No mass product design is timeless.", "fol": "all x.(IsMassProductDesign(x) -> -IsTimeless(x))", "prediction": ["-exists x.(MassProductDesign(x) & Timeless(x))", "-exists x.(MassProductDesign(x) & -Timeless(x))", "all x.(MassProductDesign(x) -> -Timeless(x))", "-exists x.(MassProductDesign(x) & Ageless(x))", "\u2013exists x.(MassProductDesign(x) & Timeless(x))", "-exists x.(MassProductDesign(x) & TimesNew(x))", "-exists x.(MassProduct(x) & Timeless(x))", "-exists x.(MassProductDesign(x) & CanBeTimeless(x))", "-exists x.(MassProductDesign(x) & Lasting(x))", "-exists x.(MassProductDesign(x) & Temporary(x))", "-exists x.(MassProductDesign(x) & Timesaver(x))", "-exists x.(MassProductDesign(x) & Contemporary(x))", "-exists x.(MassProductDesign(x) & -Temperature(x))", "-exists x.(MassProductDesign(x) & Momentum(x))", "-all x.(MassProductDesign(x) -> Timeless(x))", "all x.(MassProductDesign(x) -> Timeless(x))"]}
{"id": "folio_validation_114", "nl": "Either Zaha Hadid's design style or Kelly Wearstler's design style. ", "fol": "all x.(ZahaHadidDesignStyle(x) | KellyWearstlerDesignStyle(x))", "prediction": ["(exists x.(DesignStyle(x) & ZahaHadid(x)) | exists y.(DesignStyle(y) & KellyWearstler(y))))", "((DesignStyle(ZahaHadid) | DesignStyle(KellyWearstler)))", "exists x.(DesignStyle(x) & (ZahaHadidDesignStyle(x) | KellyWearstlerDesignStyle(x)))", "((ZahaHadidDesignStyle(z) | KellyWearstlerDesignStyle(z)))", "(exists x.(DesignStyle(x) & ZahaHadid(x)) | exists y.(DesignStyle(y) & KellyWearstler(z))))", "(exists x.(DesignStyle(x) & ZahaHadid(x)) | exists y.DesignStyle(y) & KellyWearstler(y)))", "(DesignStyle(ZahaHadid) | DesignStyle(KellyWearstler))", "exists x.(DesignStyle(x) & (ZahaHadid(x) | KellyWearstler(x)))", "(exists x.(DesignStyle(x) & (ZahaHadid(x) | KellyWearstler(x))))", "(exists x.(DesignStyle(x) & ZahaHadid(x)) | exists y.(DesignStyle(y) & KellyWearstler(x))))", "(exists x.(ZahaHadidDesignStyle(x) | KellyWearstlerDesignStyle(x)))", "(exists x.(DesignStyle(x) & ZahaHadid(x)) | exists y.(DesignStyle(y) & KellyWeaverstler(y))))", "all x.((ZahaHadid(x) | KellyWearstler(x)) -> (DesignStyle(x) | DesignStyle(x)))", "(exists x.(DesignStyle(x) & ZahaHadid(x)) | exists y.(DesignStyle(y) & KellyWorstler(y))))", "(exists x.(DesignStyle(x) & ZahaHadid(x)) | exists y.(DesignStyle(y) & KellyWeather(y))))", "(exists x.(DesignStyle(x) & ZahaHadid(x)) | exists y.(DesignStyle(y) & KellyWeavestler(y))))"]}
{"id": "folio_validation_115", "nl": "All of Kelly Wearstler's design styles are evocative.", "fol": "all x.(KellyWearstlerDesignStyle(x) -> IsEvocative(x))", "prediction": ["all x.((DesignStyle(x) & KellyWearstler(x)) -> Evocative(x))", "all x.(KellyWearstlerDesignStyle(x) -> Evocative(x))", "all x.((KellyWearstler(x) & DesignStyle(x)) -> Evocative(x))", "all x y.((DesignStyle(x) & KellyWearstler(y)) -> Evocative(y))", "all x.(KellyWearstler(x) -> EvocativeDesignStyle(x))", "all x.((KellyWearstlerDesignStyle(x) & Evocative(x)) -> Evocative(x))", "all x y.((KellyWearstler(x) & DesignStyle(y)) -> Evocative(x))", "all x.(KellyWearstler(x) -> EvocativeDesignStyles(x))", "all x.((KellyWearstlerDesignStyle(x) & Evocative(x)) -> DesignStyle(x))", "all x y.((DesignStyle(x) & KellyWearstler(y)) -> Evocative(x))", "all x y.((KellyWearstler(x) & DesignStyle(y)) -> Evocative(x,y))", "all x.((KellyWearstler(x) & DesignsStyle(x)) -> Evocative(x))", "all x y.((DesignStyle(x) & KellyWearstler(y)) -> Evocative(x,y))", "all x.(KellyWearstler(x) -> Evocative(x))", "all x.((KellyWearstler(x) & Style(x)) -> Evocative(x))", "all x y.((KellyWearstler(x) & DesignStyle(y)) -> Evocative(y))"]}
{"id": "folio_validation_116", "nl": "All of Kelly Wearstler's design styles are dreamy.", "fol": "all x.(KellyWearstlerDesignStyle(x) -> IsDreamy(x))", "prediction": ["all x.((DesignStyle(x) & KellyWearstler(x)) -> Dreamy(x))", "all x.(KellyWearstlerDesignStyle(x) -> Dreamy(x))", "all x.((KellyWearstler(x) & DesignStyle(x)) -> Dreamy(x))", "all x.(KellyWearstler(x) -> DreamyDesignStyle(x))", "all x y.((DesignStyle(x) & KellyWearstler(y)) -> Dreamy(y))", "all x y.((KellyWearstler(x) & DesignStyle(y)) -> Dreamy(x))", "all x.((KellyWearstlerDesignStyle(x) & Dreamy(x)) -> Dreamy(x))", "all x.(KellyWearstler(x) -> Dreamy(x))", "all x.((KellyWearstlerDesignStyle(x) & Dreamy(x)) -> DesignStyle(x))", "all x y.((DesignStyle(x) & KellyWearstler(y)) -> Dreamy(x))", "all x.(KellyWearstler(x) -> DreamyDesignStyles(x))", "all x y.((KellyWearstler(x) & DesignStyle(y)) -> Dreamy(x,y))", "all x.((KellyWearstlerDesignStyle(x) & Dreamy(x)) -> DesignerStyle(x))", "all x.(DesignStyle(x) -> Dreamy(x))", "all x.((KellyWearstler(x) & DesignsStyle(x)) -> Dreamy(x))", "all x.((KellyWearstler(x) & Designs(x)) -> Dreamy(x))"]}
{"id": "folio_validation_117", "nl": "If a design by Max is timeless, then a design by Max is a mass product design and evocative.", "fol": "((IsTimeless(ADesignByMax) -> IsMassProductDesign(ADesignByMax)) & IsEvocative(ADesignByMax))", "prediction": ["all x.((Design(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x.((DesignByMax(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x.((DesignbyMax(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x y.((Design(x) & Max(y)) -> (Timeless(x) & MassProductDesign(y) & Evocative(y)))", "all x.((DesignByMax(x) & Timeless(x)) -> (MassProductDesign(x) & Emoticative(x)))", "all x y.((Design(x) & Max(y) & Timeless(x)) -> (MassProductDesign(y) & Evocative(y)))", "all x.((Design(x) & Timeless(x)) -> (MassProductDesign(x) & Emoticative(x)))", "all x.((Design(x) & Timing(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x.((Design(x) & Contemporary(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x.((Design(x) & Timesaver(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x.((MaxDesign(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x.((DesignByMax(x) & Timesaver(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x.((Design(x) & timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x.((DesignByMax(x) & Timeless(x)) -> (MassProductDesign(x) & Empirative(x)))", "all x.((Design(x) & Countless(x)) -> (MassProductDesign(x) & Evocative(x)))", "all x.((Design(x) & Timeless(x)) -> (MassProductDesign(x) & Empirative(x)))"]}
{"id": "folio_validation_118", "nl": "A design by Max is a mass product design.", "fol": "IsMassProductDesign(ADesignByMax)", "prediction": ["all x.((Design(x) & Max(x)) -> MassProductDesign(x))", "all x.(Design(x) -> MassProductDesign(x))", "all x.((Design(x) & ByMax(x)) -> MassProductDesign(x))", "all x y.((Design(x) & Max(y)) -> MassProductDesign(x,y))", "all x y.((Design(x) & Max(y)) -> MassProductDesign(x))", "all x.((DesignByMax(x) & MassProductDesign(x)) -> MassProductDesign(x))", "all x.((Design(x) & Max(x)) -> MassProduct(x))", "all x.(MaxDesign(x) -> MassProductDesign(x))", "all x y.((Design(x) & Max(y)) -> MassProductDesign(y))", "all x.((Design(x) & DesignedByMax(x)) -> MassProductDesign(x))", "all x y.((Design(x) & Max(x)) -> MassProductDesign(x))", "all x y.((Design(x) & Max(y)) -> MassProduct(x,y))", "all x y.((Design(x) & Max(x)) -> MassProductDesign(y))", "all x.((DesignByMax(x) & MassProduct(x)) -> MassProductDesign(x))", "all x.(Design(x) -> MassProduct(x))", "all x.(DesignByMax(x) -> MassProductDesign(x))"]}
{"id": "folio_validation_119", "nl": "A design by Max is evocative and dreamy.", "fol": "(IsEvocative(ADesignByMax) & IsDreamy(ADesignByMax))", "prediction": ["all x.((Design(x) & Max(x)) -> (Evocative(x) & Dreamy(x)))", "all x.(Design(x) -> (Evocative(x) & Dreamy(x)))", "all x.((Design(x) & ByMax(x)) -> (Evocative(x) & Dreamy(x)))", "all x y.((Design(x) & Max(y)) -> (Evocative(y) & Dreamy(y)))", "all x y.((Design(x) & Max(y)) -> (Evocative(x) & Dreamy(x)))", "all x.(Max(x) -> (Evocative(x) & Dreamy(x)))", "all x y.((Design(x) & Max(y)) -> (Evocative(x) & Dreamy(y)))", "all x.((Design(x) & Max(x)) -> EvocativeAndDreamy(x))", "all x y.((Design(x) & Max(y)) -> (Evocative(x,y) & Dreamy(x)))", "all x y.((Design(x) & Max(y)) -> (Evocative(x,y) & Dreamy(x,y)))", "all x.((Design(x) & Max(x)) -> (Evocative(x) | Dreamy(x)))", "all x.((Design(x) & byMax(x)) -> (Evocative(x) & Dreamy(x)))", "all x.((Design(x) & Max)) -> (Evocative(x) & Dreamy(x)))", "all x.(DesignByMax(x) -> (Evocative(x) & Dreamy(x)))", "all x.((DesignByMax(x) & Evocative(x) & Dreamy(x)) -> DesignByMax(x))", "all x.((DesignByMax(x) & Evocative(x) & Dreamy(x)) -> Evocative(x))"]}
{"id": "folio_validation_120", "nl": "A design by Max is either evocative or dreamy.", "fol": "((IsEvocative(ADesignByMax) & -IsDreamy(ADesignByMax)) | (-IsEvocative(ADesignByMax) & IsDreamy(ADesignByMax)))", "prediction": ["all x.(Design(x) -> (Evocative(x) | Dreamy(x)))", "all x.((Design(x) & Max(x)) -> (Evocative(x) | Dreamy(x)))", "all x.(Design(x) -> ((Evocative(x) | Dreamy(x))))", "all x y.((Design(x) & Max(y)) -> (Evocative(y) | Dreamy(y)))", "all x.((Design(x) & ByMax(x)) -> (Evocative(x) | Dreamy(x)))", "all x.((Design(x) & Max)) -> (Evocative(x) | Dreamy(x)))", "all x.((Design(x) & Max(x)) -> ((Evocative(x) | Dreamy(x))))", "all x y.((Design(x) & Max(y)) -> (Evocative(x) | Dreamy(y)))", "all x.(DesignByMax(x) -> (Evocative(x) | Dreamy(x)))", "all x.(Max(x) -> (Evocative(x) | Dreamy(x)))", "all x.(Design(x,Max) -> (Evocative(x) | Dreamy(x)))", "all x.(MaxDesign(x) -> (Evocative(x) | Dreamy(x)))", "all x.(DesignedByMax(x) -> (Evocative(x) | Dreamy(x)))", "exists x.(Design(x) & ByMax(x) & (Evocative(x) | Dreamy(x)))", "exists x.(Design(x) & ByMax(x) & (Evocative(x) | Dreamy(x))))", "exists x.(Design(x) & Max(x) & (Evocative(x) | Dreamy(x))))"]}
{"id": "folio_validation_121", "nl": "If a player is ranked highly by the Women's Tennis Association, then they are among the most active players in major tennis. ", "fol": "all x.(RankedHighlyByWTA(x) -> MostActivePlayersInMajorTennis(x))", "prediction": ["all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> ActivePlayerInMajorTennis(x))", "all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> MostActivePlayerInMajorTennis(x))", "all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> ActivePlayer(x))", "all x.((Player(x) & HighlyRatedByWomensTennisAssociation(x)) -> ActivePlayerInMajorTennis(x))", "all x.((Player(x) & HighlyRatedByWomensTennisAssociation(x)) -> MostActivePlayerInMajorTennis(x))", "all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> AmongMostActivePlayersInMajorTennis(x))", "all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> ActiveInMajorTennis(x))", "all x y.((Player(x) & HighlyRankedByWomensTennisAssociation(x) & MajorTennis(y)) -> ActivePlayer(x,y))", "all x.((Player(x) & HighlyRatedByWomensTennisAssociation(x)) -> ActivePlayer(x))", "all x.((Player(x) & HighlyRatedByWomensTennisAssociation(x)) -> AmongMostActivePlayersInMajorTennis(x))", "all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> MostActiveInMajorTennis(x))", "all x.((Player(x) & HighlyRatedByWomensTennisAssociation(x)) -> ActiveInMajorTennis(x))", "all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> MostActivePlayer(x))", "all x y.((Player(x) & HighlyRatedByWomensTennisAssociation(x) & MajorTennis(y)) -> ActivePlayer(x,y))", "all x y.((Player(x) & HighlyRankedByWomensTennisAssociation(x) & MajorTennis(y)) -> MostActivePlayer(x,y))", "all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> ActiveTennisPlayer(x))"]}
{"id": "folio_validation_122", "nl": "Everyone who lost to Iga Swiatek is ranked highly by the Women's Tennis Association.", "fol": "all x.(DefeatedByIgaSwiatek(x) -> RankedHighlyByWTA(x))", "prediction": ["all x.((LoseToIgaSwiatek(x)) -> HighlyRankedByWomensTennisAssociation(x))", "all x.(LoseToIgaSwiatek(x) -> HighlyRankedByWomensTennisAssociation(x))", "all x.((LostToIgaSwiatek(x)) -> HighlyRankedByWomensTennisAssociation(x))", "all x.(LostToIgaSwiatek(x) -> HighlyRankedByWomensTennisAssociation(x))", "all x.(LosingToIgaSwiatek(x) -> HighlyRankedByWomensTennisAssociation(x))", "all x.(LossToIgaSwiatek(x) -> HighlyRankedByWomensTennisAssociation(x))", "all x.((LosingToIgaSwiatek(x)) -> HighlyRankedByWomensTennisAssociation(x))", "all x.(LoseToIgaSwiatek(x) -> HighlyRatedByWomensTennisAssociation(x))", "all x.((LoseToIgaSwiatek(x)) -> HighlyRatedByWomensTennisAssociation(x))", "all x.((LostToIgaSwiatek(x)) -> HighlyRatedByWomensTennisAssociation(x))", "all x.(LostToIgaSwiatek(x) -> HighlyRatedByWomensTennisAssociation(x))", "all x.((LoserToIgaSwiatek(x)) -> HighlyRankedByWomensTennisAssociation(x))", "all x.(LosingToIgaSwiatek(x) -> HighlyRatedByWomensTennisAssociation(x))", "all x.((LossToIgaSwiatek(x)) -> HighlyRankedByWomensTennisAssociation(x))", "all x y.((LostToIgaSwiatek(x) & WomensTennisAssociation(y)) -> HighlyRanked(x,y))", "all x.(LossToIgaSwiatek(x) -> HighlyRatedByWomensTennisAssociation(x))"]}
{"id": "folio_validation_123", "nl": "All female tennis players at Roland Garros 2022 lost to Iga Swiatek.", "fol": "all x.(FemalePlayersRolandGarros2022(x) -> DefeatedByIgaSwiatek(x))", "prediction": ["all x.((FemaleTennisPlayer(x) & RolandGarros2022(x)) -> LostToIgaSwiatek(x))", "all x.((FemaleTennisPlayer(x) & RolandGarros2022(x)) -> LosesToIgaSwiatek(x))", "all x y z.((FemaleTennisPlayer(x) & RolandGarros(y) & IgaSwiatek(z)) -> LostTo(x,y,z))", "all x.((FemaleTennisPlayer(x) & RolandGarros(x)) -> LostToIgaSwiatek(x))", "all x.((FemaleTennisPlayer(x) & RolandGarros(x) & IgaSwiatek(x)) -> LostTo(x,y))", "all x.((FemaleTennisPlayer(x) & RolandGarros2022(x)) -> LostTo(x,IgaSwiatek))", "all x.((TennisPlayer(x) & RolandGarros2022(x)) -> LostToIgaSwiatek(x))", "all x y.((FemaleTennisPlayer(x) & RolandGarros(y) & IgaSwiatek(z)) -> LostTo(x,y,z))", "all x.((FemaleTennisPlayer(x) & RolandGarros(x) & IgaSwiatek(x)) -> Lost(x))", "all x y.((FemaleTennisPlayer(x) & RolandGarros(y) & IgaSwiatek(y)) -> LostTo(x,y))", "all x y.((FemaleTennisPlayer(x) & RolandGarros2022(y)) -> LostToIgaSwiatek(x,y))", "all x y.((FemaleTennisPlayer(x) & RolandGarros(y) & IgaSwiatek(x)) -> LostTo(x,y))", "all x.((FemaleTennisPlayer(x) & RolandGarros2022(x) & LostToIgaSwiatek(x)) -> LostToIgaSwiatek(x))", "all x.((FemaleTennisPlayer(x) & RolandGarros2022(x)) -> LostToIgaSweatek(x))", "all x.((FemaleTennisPlayer(x) & RolandGarros(x) & IgaSwiatek(x)) -> LostTo(x))", "all x.((FemaleTennisPlayer(x) & RolandGarros(x) & IgaSwiatek(x)) -> LostTo(x,IgaSwiatek))"]}
{"id": "folio_validation_124", "nl": "Either female tennis players at Roland Garros 2022 or male tennis players at Roland Garros 2022. ", "fol": "all x.(FemalePlayersRolandGarros2022(x) | MalePlayersRolandGarros2022(x))", "prediction": ["(exists x.(FemaleTennisPlayer(x) & RolandGarros(x)) | exists y.(MaleTennisPlayer(y) & RolandGarros(y))))", "(exists x.(FemaleTennisPlayer(x) & RolandGarros2022)) | exists y.(MaleTennisPlayer(y) & RolandGarros2022))))", "(exists x.(FemaleTennisPlayer(x) & RolandGarros2022(x)) | exists y.(MaleTennisPlayer(y) & RolandGarros2022(y))))", "(exists x.(Female(x) & TennisPlayer(x) & RolandGarros(x)) | exists y.(Male(y) & TennisPlayer(y) & RolandGarros(y))))", "(exists x.(Female(x) & RolandGarros(x)) | exists y.(Male(y) & RolandGarros(y))))", "(exists x.(FemaleTennisPlayer(x) & RolandGarros(x)) | exists y.(FemaleTennisPlayer(y) & RolandGarros(y))))", "(exists x.(TennisPlayer(x) & Female(x)) | exists y.(TennisPlayer(y) & Male(y))))", "(exists x.(FemaleTennisPlayer(x) & RolandGarros(x)) | exists y.(MaleTennisPlayer(y) & RolandGarros(y) & RolandGarros(y))))", "(exists x.(FemaleTennisPlayer(x) & RolandGarros2022)) | exists y.(FemaleTennisPlayer(y) & RolandGarros2022))))", "(exists x.(TennisPlayer(x) & Female(x) & RolandGarros(x)) | exists y.(TennisPlayer(y) & Male(y) & RolandGarros(y))))", "(exists x.(FemaleTennisPlayer(x) & RolandGarros(x)) | exists y.(MaleTennisPlayer(y) & RolandGarros(z))))", "(exists x.(TennisPlayer(x) & Female(x) & RolandGarros(x)) | exists y.(TennisPlayer(y) & Male(y))))", "(exists x.((FemaleTennisPlayer(x) & RolandGarros2022)) | exists y.(MaleTennisPlayer(y) & RolandGarros2022))))", "(exists x.(FemaleTennisPlayer(x) & RolandGarros(x)) | exists y.(MaleTennisPlayer(y) & RolandGarros(x))))", "(exists x.(Female(x) & TennisPlayer(x) & RolandGarros2022)) | exists y.(Male(y) & TennisPlayer(y) & RolandGarros2022))))", "(exists x.(FemaleTennisPlayer(x) & RolandGarros2022)) | exists y.(MaleTennisPlayer(y) & RolandGarros2022)))"]}
{"id": "folio_validation_125", "nl": "All male tennis players at Roland Garros 2022 lost to Rafael Nadal.", "fol": "all x.(MalePlayersRolandGarros2022(x) -> DefeatedByRafaelNadal(x))", "prediction": ["all x.((MaleTennisPlayer(x) & RolandGarros2022(x)) -> LostToRafaelNadal(x))", "all x.((Male(x) & RolandGarros2022(x)) -> LostToRafaelNadal(x))", "all x.((MalePlayer(x) & RolandGarros2022(x)) -> LostToRafaelNadal(x))", "all x.((MaleTennisPlayer(x) & RolandGarros(x) & RolandGarros(x)) -> LostToRafaelNadal(x))", "all x.((MaleTennisPlayer(x) & RolandGarros2022(x)) -> LosesToRafaelNadal(x))", "all x.((MaleTennisPlayer(x) & RolandGarros(x)) -> LostToRafaelNadal(x))", "all x.((TennisPlayer(x) & RolandGarros2022(x)) -> LostToRafaelNadal(x))", "all x.((Male(x) & RolandGarros(x) & RolandGarros(x)) -> LostToRafaelNadal(x))", "all x.((MaleTennisPlayer(x) & RolandGarros(x) & RolandGarros2022)) -> LostToRafaelNadal(x))", "all x.((Male(x) & RolandGarros(x) & RolandGarros2022)) -> LostToRafaelNadal(x))", "all x y.((MaleTennisPlayer(x) & RolandGarros(y) & RolandGarros(y)) -> LostToRafaelNadal(x,y))", "all x.((MalePlayer(x) & RolandGarros(x) & RolandGarros(x)) -> LostToRafaelNadal(x))", "all x.((Male(x) & RolandGarros(x)) -> LostToRafaelNadal(x))", "all x.((MaleTennisPlayer(x) & RolandGarros2022(x)) -> LostTo(x,RafaelNadal))", "all x.((MaleTennisPlayer(x) & RolandGarros(x) & RolandGarros(x)) -> LostTo(x,RafaelNadal))", "all x y.((MaleTennisPlayer(x) & RolandGarros(y) & RolandGarros(y)) -> LostTo(x,RafaelNadal))"]}
{"id": "folio_validation_126", "nl": "If Coco Gauff is a player who is ranked highly by the Women's Tennis Association or a player who lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022.", "fol": "((RankedHighlyByWTA(CocoGauff) | DefeatedByRafaelNadal(CocoGauff)) -> -MalePlayersRolandGarros2022(CocoGauff))", "prediction": ["all x.((Player(x) & (RatedHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "all x.((Player(x) & (RatedHighlyByWomensTennisAssociation(x) | PlayerLostToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "all x.((Player(x) & (RankedHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "all x.((Player(x) & (RatedHighly(x) | LostToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "all x.((Player(x) & (HighlyRatedByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "all x.((Player(x) & (RatedHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -MalePlayer(x))", "all x.((Player(x) & (HighlyRankedByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "all x.((Player(x) & (RatedHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -Male(x))", "all x.((Player(x) & (RanksHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "all x.((Player(x) & (RatedHighlyByWomensTennisAssociation(x) | PlayerLostToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "all x.((Player(x) & (RatedHighlyByWomensTennisAssociation(x) | PlayerLoseToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "all x.((Player(x) & (RatedHighlyByWomensTennisAssociation(x) | PlayerLostToRafaelNadal(x))) -> -MalePlayer(x))", "all x.((Player(x) & (RatedHighly(x) | LostToRafaelNadal(x))) -> -MalePlayer(x))", "all x.((Player(x) & (RankedHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -MalePlayer(x))", "all x.((Player(x) & (RatedHighlyByWomensTennisAssociation(x) | PlayerLostToRafaelNadal(x))) -> -Male(x))", "all x.((Player(x) & (HighRatedByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -MaleTennisPlayer(x))"]}
{"id": "folio_validation_127", "nl": "Coco Gauff is among the most active players in major tennis.", "fol": "MostActivePlayersInMajorTennis(CocoGauff)", "prediction": ["all x y.((CocoGauff(x) & MajorTennis(y)) -> ActivePlayer(x,y))", "all x.((CocoGauff(x) & MajorTennisPlayer(x)) -> Active(x))", "all x.(CocoGauff(x) -> ActivePlayerInMajorTennis(x))", "all x.((CocoonGauff(x) & MajorTennisPlayer(x)) -> Active(x))", "all x.((CocoGauff(x) & ActivePlayer(x)) -> MajorTennis(x))", "all x y.((CocoGauff(x) & MajorTennisPlayer(y)) -> Active(x,y))", "all x.((CocoGauff(x) & MajorTennisPlayer(x)) -> ActivePlayer(x))", "all x.((CocoGauff(x) & MajorTennis(x)) -> ActivePlayer(x))", "all x.(CocoGauff(x) -> ActivePlayer(x))", "all x.((CocoonGauff(x) & MajorTennisPlayer(x)) -> ActivePlayer(x))", "all x y.((CocoGauff(x) & MajorTennis(y)) -> ActivePlayerIn(x,y))", "all x y.((CocoGauff(x) & MajorTennis(y)) -> MostActivePlayer(x,y))", "CocoGauff is amongstMostActivePlayersInMajorTennis(coco)", "all x y.((CocoGauff(x) & MajorTennis(y)) -> Active(x,y))", "CocoGauff is amongstMostActivePlayersInMajorTennis(Coco)", "all x.(CocoGauff(x) -> ActivePlayerInTennis(x))"]}
{"id": "folio_validation_128", "nl": "Coco Gauff has lost to Rafael Nadal.", "fol": "DefeatedByRafaelNadal(CocoGauff)", "prediction": ["all x y.((CocoonGauff(x) & RafaelNadal(y)) -> LosesTo(x,y))", "all x y.((CocoonGauff(x) & RafaelNadal(y)) -> LostTo(x,y))", "all x y.((CocoaGauff(x) & RafaelNadal(y)) -> LosesTo(x,y))", "all x y.((CocoonGauff(x) & RafaelNadal(y)) -> Loses(x,y))", "all x y.((CocoaGauff(x) & RafaelNadal(y)) -> LostTo(x,y))", "all x y.((CocoaGauff(x) & RafaelNadal(y)) -> Loses(x,y))", "all x.(CocoonGauff(x) -> LosesToRafaelNadal(x))", "all x.(CocoaGauff(x) -> LosesToRafaelNadal(x))", "all x.(CocoonGauff(x) -> LostToRafaelNadal(x))", "all x.(CocoaGauff(x) -> LostToRafaelNadal(x))", "all x y.((Cocoon(x) & RafaelNadal(y)) -> LosesTo(x,y))", "all x y.((CocoonGauff(x) & RafaelNadal(y)) -> Lost(x,y))", "all x y.((Cocoon(x) & RafaelNadal(y)) -> LostTo(x,y))", "all x y.((CocoonGauff(x) & RafaelNadal(y)) -> Lose(x,y))", "all x y.((CocoaGauff(x) & RafaelNadal(y)) -> Lose(x,y))", "all x y.((Cocoon(x) & RafaelNadal(y)) -> Loses(x,y))"]}
{"id": "folio_validation_129", "nl": "Coco Gauff is not a player who lost to Iga Swiatek or one of the most active players in major tennis.", "fol": "(-DefeatedByIgaSwiatek(CocoGauff) | -MostActivePlayersInMajorTennis(CocoGauff))", "prediction": ["all x.((Player(x) & -(LostToIgaSwiatek(x) | MostActivePlayerInMajorTennis(x))) -> CocoGauff(x))", "all x.((Player(x) & -LostToIgaSwiatek(x) & -MostActivePlayerInMajorTennis(x)) -> CocoGauff(x))", "all x.(CocoGauff(x) -> (-(Player(x) & LostToIgaSwiatek(x)) | (Player(x) & MostActiveInMajorTennis(x)))))", "all x.(CocoaGauff(x) -> (-(Player(x) & LostToIgaSwiatek(x)) | (Player(x) & MostActiveInMajorTennis(x)))))", "all x.((Player(x) & -(LostToIgaSwiatek(x) | MostActivePlayer(x))) -> CocoGauff(x))", "all x.(CocoGauff(x) -> (-(Player(x) & LostToIgaSwiatek(x)) | Player(x) & MostActiveInMajorTennis(x))))", "all x.(CocoaGauff(x) -> (-(Player(x) & LostToIgaSwiatek(x)) | Player(x) & MostActiveInMajorTennis(x))))", "all x.(Coco(x) -> (-(Player(x) & LostToIgaSwiatek(x)) | (Player(x) & MostActiveInMajorTennis(x)))))", "all x.(CocoonGauff(x) -> (-(Player(x) & LostToIgaSwiatek(x)) | (Player(x) & MostActiveInMajorTennis(x)))))", "all x.((Player(x) & -LostToIgaSwiatek(x) & -MostActivePlayer(x)) -> CocoGauff(x))", "all x.(Coco(x) -> (-(Player(x) & LostToIgaSwiatek(x)) | Player(x) & MostActiveInMajorTennis(x))))", "all x.(CocoGauff(x) -> (-LostToIgaSwiatek(x) | MostActivePlayerInMajorTennis(x)))", "all x.(CocoGauff(x) -> (-LostToIgaSwiatek(x) & -MostActivePlayerInMajorTennis(x)))", "all x.(CocoaGauff(x) -> (-LostToIgaSwiatek(x) | MostActivePlayerInMajorTennis(x)))", "all x.(CocoonGauff(x) -> (-(Player(x) & LostToIgaSwiatek(x)) | Player(x) & MostActiveInMajorTennis(x))))", "all x.(CocoGauff(x) -> (-(Player(x) & LostToIgaSwiatek(x)) | (Player(x) & MostActive(x)))))"]}
{"id": "folio_validation_130", "nl": "All cats are mammals.", "fol": "all x.(IsCat(x) -> IsMammal(x))", "prediction": ["all x.(Cat(x) -> Mammal(x))", "all x y.((Cat(x) & Mammal(y)) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x y.((Cat(x) & Mammal(y)) -> Mammal(x,y))", "(all x.(Cat(x) -> Mammal(x)))", "(all x.(Cat(x) -> Mammal(x))", "all x.exists y.(Cat(x) & Mammal(y) & Mammal(x))", "all x.exists y.(Cat(x) & Mammal(y) & Mammal(y))", "exists x.(Cat(x) & Mammal(x))", "all x.exists y.(Cat(x) & Mammal(y) & Mammal(x,y))", "all x.(Kat(x) -> Mammal(x))", "all x.exists y.(Cat(x) & Mammal(y) & Mammal(z))", "all x.(Kit(x) -> Mammal(x))", "all x.exists y.(Cat(x) & Mammal(y))", "all x.(Cat(x) -> Mammal(x))", "all x.exists y.(Cat(x) & Mammal(y) & -Mammal(x))"]}
{"id": "folio_validation_131", "nl": "Some pets are not mammals.", "fol": "exists x.(IsPet(x) & -IsMammal(x))", "prediction": ["exists x.(Pet(x) & -Mammal(x))", "exists x.(Pet(x) & -Mammal(x))", "exists x y.(Pet(x) & Pet(y) & -Mammal(x))", "exists x.(Pet(x) & -(Mammal(x) | Animal(x))))", "exists x y.(Pet(x) & Animal(y) & -Mammal(x))", "exists x.(Animal(x) & -Mammal(x))", "exists x.(Pet(x) & Animal(x) & -Mammal(x))", "exists x.(Pet(x) & -(Mammal(x) | Animal(x)))", "exists x.(Pet(x) & -(Mammal(x) | Mammal(x)))", "exists x y.(Pet(x) & Animal(y) & -Mammal(y))", "exists x.(Pet(x) & -(Mammal(x) | -Mammal(x)))", "exists x y.(Pet(x) & Pet(y) & -Mammal(y))", "exists x.(Pet(x) & -(Mammal(x) | Pet(x))))", "(exists x.(Pet(x) & -Mammal(x)))", "exists x.(Pet(x) & -Marine(x))", "exists x y.(Pet(x) & Animal(y) & -Mammal(x,y))"]}
{"id": "folio_validation_132", "nl": "No pets are cats.", "fol": "all x.(IsPet(x) -> -IsCat(x))", "prediction": ["-exists x.(Pet(x) & Cat(x))", "all x.(Pet(x) -> -Cat(x))", "(-exists x.(Pet(x) & Cat(x)))", "(exists x.(Pet(x) & Cat(x)))", "exists x.(Pet(x) & -Cat(x))", "-exists x.(Pet(x) & Cat(y))", "-all x.(Pet(x) -> Cat(x))", "\u2013exists x.(Pet(x) & Cat(x))", "all x.(Pet(x) -> -Cat(x))", "all x.(Pet(x) -> Cat(x))", "exists x.(Pet(x) & Cat(x))", "All x.(Pet(x) -> -Cat(x))", "all x.(Pet(x) & -Cat(x))", "-exists x.(Pet(x) & -Cat(x))", "-(Pet(x) & Cat(x))", "-exists x.(Pet(x) & Pet(x))"]}
{"id": "folio_validation_133", "nl": "No one has both summer and fall as their favorite season.", "fol": "all x.((FavoriteSeason(x,Summer) & -FavoriteSeason(x,Fall)) | (-FavoriteSeason(x,Summer) & FavoriteSeason(x,Fall)))", "prediction": ["-exists x.(FavoriteSeason(x) & Summer(x) & Fall(x))", "-exists x.(FavoriteSeason(x) & FavoriteSeason(x) & Summer(x) & Fall(x))", "-exists x.(FavoriteSeason(x) & FavoriteSeason(x,Summer) & FavoriteSeason(x,Fall))", "-exists x.(FavoriteSeason(x,Summer) & FavoriteSeason(x,Fall))", "-exists x.(FavoriteSeason(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x))", "-exists x.(FavoriteSeason(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x))", "-exists x.(FavoriteSeason(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x))", "-exists x.(FavoriteSeason(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x))", "-exists x.(FavoriteSeason(x) & (Summer(x) | Fall(x)))", "-exists x.(FavoriteSeason(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x))", "-exists x.(FavoriteSeason(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedFall(x))", "-exists x.(FavoriteSeason(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x))", "-exists x.(FavoriteSeason(x) & FavoriteSeason(x))", "-exists x.(FavoriteSeason(x) & HasSummer(x) & HasFavoriteSeason(x) & HasFavoriteSeason(x))", "-exists x.(FavoriteSeason(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedFall(x))", "-exists x.(FavoriteSeason(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedFall(x))"]}
{"id": "folio_validation_134", "nl": "All students who want to have a long vacation love summer the most.", "fol": "all x.(WantsLongVacation(x) -> FavoriteSeason(x,Summer))", "prediction": ["all x.((Student(x) & LongVacation(x)) -> LovesSummer(x))", "all x.((Student(x) & WantsLongVacation(x)) -> LovesSummer(x))", "all x.((Student(x) & LongVacation(x)) -> LovesSummerMost(x))", "all x.((Student(x) & WantsLongVacation(x)) -> LovesSummerMost(x))", "all x.((Student(x) & LovesSummer(x)) -> LongVacation(x))", "all x.((Student(x) & WantsLongVacation(x)) -> LovesSummerTheMost(x))", "all x.((Student(x) & LongVacation(x)) -> LovesSummerTheMost(x))", "all x.((Student(x) & WishesLongVacation(x)) -> LovesSummer(x))", "all x.((Student(x) & LongVacation(x)) -> LoveSummer(x))", "all x.((Student(x) & LongVacation(x)) -> Loves(x,Summer))", "all x.((Student(x) & WantsLongVacation(x)) -> LoveSummer(x))", "all x.((Student(x) & LongVacation(x)) -> Loves(x,summer))", "all x.((Student(x) & WantsToHaveLongVacation(x)) -> LovesSummer(x))", "all x.((Student(x) & LongVacation(x)) -> Loves(x))", "all x.((Student(x) & WantsLongVacation(x)) -> Loves(x,Summer))", "all x.((Student(x) & LongVacation(x)) -> Loves(x,summer))"]}
{"id": "folio_validation_135", "nl": "Emma's favorite season is summer.", "fol": "FavoriteSeason(Emma,Summer)", "prediction": ["all x.(FavoriteSeason(x) -> Summer(x))", "(FavoriteSeason(Emma) & Summer(Emma))", "(FavoriteSeason(Emma,Summer))", "(FavoriteSeason(Emma) -> Summer(Emma))", "all x.((Emma'sFavoriteSeason(x) & Summer(x)) -> FavoriteSeason(x))", "(FavoriteSeason(Emma) -> Summer(Emma))", "all x.((Emma(x) & Summer(x)) -> FavoriteSeason(x))", "(FavoriteSeason(Emma,Summer) -> FavoriteSeason(Emma,Summer))", "all x.(FavoriteSeason(x) -> Summer(x))", "all x.((Emma'sFavoriteSeason(x) & Summer(x)) -> LovedSeason(x))", "(FavoriteSeason(Emma,Summer) & Summer(Emma,Summer))", "(FavoriteSeason(Emma): Summer(Emma))", "(FavoriteSeason(Emma) - Summer(Emma))", "(FavoriteSeason(Emma,Summer) -> Favorite(Emma,Summer))", "all x.((Emma'sFavoriteSeason(x) & Summer(x)) -> FavouriteSeason(x))", "all x.((Emma'sFavoriteSeason(x) & Summer(x)) -> Favorite(x))"]}
{"id": "folio_validation_136", "nl": "Mia's favorite season is not the same as Emma's. ", "fol": "-exists x.(FavoriteSeason(Mia,x) & FavoriteSeason(Emma,x))", "prediction": ["(FavoriteSeason(Mia,Emma) & -FavoriteSeason(Mia,Emma))", "all x y.((Mia(x) & Emma(y)) -> -FavoriteSeason(x,y))", "(FavoriteSeason(Mia) & FavoriteSeason(Emma))", "(FavoriteSeason(Mia,Emma) & -SameSeason(Mia,Emma))", "all x y.((Mia(x) & Emma(y)) -> -(FavoriteSeason(x,y) & FavoriteSeason(x,y)))", "all x y.((MiaSeason(x) & EmmaSeason(y)) -> -SameSeason(x,y))", "-(FavoriteSeason(Mia,Emma) & FavoriteSeason(Mia,Emma))", "(FavoriteSeason(Mia) & FavoriteSeason(Mia)) & -(FavoriteSeason(Mia) & FavoriteSeason(Mia))))", "(FavoriteSeason(Mia) & FavoriteSeason(Mia)) & -(FavoriteSeason(Mia) & FavoriteSeason(Emma)))", "(FavoriteSeason(Mia,Emma) & -FavoriteSeason(Emma,Emma))", "(FavoriteSeason(Mia) & FavoriteSeason(Mia)) & -(FavoriteSeason(Mia) & FavoriteSeason(Mia)))", "all x y.((Mia(x) & Emma(y)) -> -(FavoriteSeason(x,y) & FavoriteSeason(x,y))))", "all x y.((Mia(x) & Emma(y)) -> -SameSeason(x,y))", "(FavoriteSeason(Mia,Emma) | FavoriteSeason(Mia,Emma)))", "all x y.((FavoriteSeason(x) & Mia(y)) -> -SameSeason(y,x))", "all x y.((Mia(x) & Emma(y)) -> -(FavoriteSeason(x,y) & FavoriteSeason(y,x)))"]}
{"id": "folio_validation_137", "nl": "James wants to have a long vacation.", "fol": "WantsLongVacation(James)", "prediction": ["all x.((James(x) & LongVacation(x)) -> Wants(x,y))", "all x.((James(x) & LongVacation(x)) -> WantsToHave(x,y))", "all x.((James(x) & LongVacation(x)) -> Wants(x))", "all x.(James(x) -> WantsLongVacation(x))", "all x.((James(x) & LongVacation(x)) -> WantsToHave(x,x))", "all x.((Jimmy(x) & LongVacation(x)) -> WantsToHave(x,y))", "all x.((Jimmy(x) & LongVacation(x)) -> Wants(x,y))", "all x.(James(x) -> LongVacation(x))", "all x y.((James(x) & Vacation(y)) -> Wants(x,y))", "all x.((James(x) & LongVacation(x)) -> WantsToHave(x,James))", "all x y.((James(x) & Vacation(y)) -> Long(x,y))", "all x.((James(x) & LongVacation(x)) -> Wanted(x))", "all x.((James(x) & LongVacation(x)) -> WantsToHave(x))", "all x.((James(x) & LongVacation(x)) -> Wants(x,x))", "all x y.((James(x) & Vacation(y)) -> WantsToHave(x,y))", "all x.((James(x) & Vacation(x)) -> Long(x))"]}
{"id": "folio_validation_138", "nl": "James's favorite season is summer.", "fol": "FavoriteSeason(James,Summer)", "prediction": ["(FavoriteSeason(James) -> Summer(James))", "all x.(FavoriteSeason(x) -> Summer(x))", "(FavoriteSeason(James) & Summer(James))", "James's favoriteSeason(James) -> Summer(James))", "(FavoriteSeason(James) -> Summer(James))", "all x.(FavoriteSeason(x) -> Summer(x))", "James's favoriteSeason(James) -> Summer(James))", "all x.(JamesFavoriteSeason(x) -> Summer(x))", "(FavoriteSeason(James,Summer))", "James's favoriteSeason(James,Summer)", "All x.(FavoriteSeason(x) -> Summer(x))", "\"FavoriteSeason(James) -> Summer(James))", "(FavoriteSeason(James): Summer(James))", "(FavoriteSeason(James) -> Summer(James,James))", "James's FavoriteSeason(James) -> Summer(James))", "(FavoriteSeason(Jimmy) & Summer(Jimmy))"]}
{"id": "folio_validation_139", "nl": "James's favorite season is fall.", "fol": "FavoriteSeason(James,Fall)", "prediction": ["(FavoriteSeason(James) -> Fall(James))", "all x.(FavoriteSeason(x) -> Fall(x))", "(FavoriteSeason(James) & Fall(James))", "(FavoriteSeason(James) -> Fall(James))", "all x.(FavoriteSeason(x) -> Fall(x))", "James's favoriteSeason(James) -> Fall(James))", "(FavoriteSeason(James,Fall))", "all x.(FavoriteSeason(x) -> Autumn(x))", "All x.(FavoriteSeason(x) -> Fall(x))", "(FavoriteSeason(James) -> Autumn(James))", "all x.(FavoriteSeason(x,James) -> Fall(x))", "\"FavoriteSeason(James) -> Fall(James))", "(FavoriteSeason(James): Fall(James))", "(FavoriteSeason(James):Fall(James))", "(FavoriteSeason(James) -> Fall(James,James))", "James's favoriteSeason(James) -> Fall(James))"]}
{"id": "folio_validation_140", "nl": "Mia's favorite season is spring.", "fol": "FavoriteSeason(Mia,Spring)", "prediction": ["all x.(Mia(x) -> FavoriteSeason(x,spring))", "all x.(FavoriteSeason(x) -> Spring(x))", "(FavoriteSeason(Mia,Spring))", "(FavoriteSeason(Mia) -> Spring(Mia))", "all x y.((Mia(x) & Season(y)) -> Favorite(x,y))", "(FavoriteSeason(Mia) & Spring(Mia))", "(FavoriteSeason(Mia) -> Spring(Mia))", "all x.(MiaFavoriteSeason(x) -> Spring(x))", "all x.(Mia(x) -> FavoriteSeason(x))", "all x.(Mia(x) -> FavoriteSeason(x,Spring))", "all x.(MiasFavoriteSeason(x) -> Spring(x))", "(FavoriteSeason(Mia,Spring) -> MiaFavoriteSeason(Mia,Spring))", "all x.(FavoriteSeason(x) -> (Mia'sFavoriteSeason(x) & Spring(x)))", "(FavoriteSeason(Mia):Spring(Mia))", "all x.(FavoriteSeason(x) -> Spring(x))", "all x y.((Mia(x) & Season(y)) -> (Favorite(x,y) & Spring(y)))"]}
{"id": "folio_validation_141", "nl": "No digital media are analog.", "fol": "all x.(IsDigital(x) -> -IsAnalog(x))", "prediction": ["-exists x.(DigitalMedia(x) & Analog(x))", "all x.(DigitalMedia(x) -> -Analog(x))", "-exists x.(DigitalMedium(x) & Analog(x))", "(-exists x.(DigitalMedia(x) & Analog(x)))", "all x.(DigitalMedia(x) -> -AnalogMedia(x))", "all x.(DigitalMedia(x) -> -(AnalogMedia(x) | AnalogMedia(x)))", "all x.(DigitalMedium(x) -> -Analog(x))", "-all x.(DigitalMedia(x) -> Analog(x))", "all x.(DigitalMedia(x) -> -(AnalogMedia(x) & -AnalogMedia(x)))", "-exists x.(DigitalMedia(x) & Analog(x))", "all x.(DigitalMedia(x) -> -(AnalogMedia(x) & AnalogMedia(x)))", "-exists x.(DigitalMedia(x) & AnalogMedia(x))", "-exists x.(DigitalMedia(x) & Analogue(x))", "exists x.(DigitalMedia(x) & -Analog(x))", "exists x.(DigitalMedia(x) & Analog(x))", "all x.(DigitalMedia(x) -> -(AnalogMedia(x) & DigitalMedia(x)))"]}
{"id": "folio_validation_142", "nl": "Every printed text is analog.", "fol": "all x.(IsPrintedText(x) -> IsAnalog(x))", "prediction": ["all x.(PrintedText(x) -> Analog(x))", "all x.(PrintedText(x) -> Analog(x))", "all x.(PrintableText(x) -> Analog(x))", "all x y.((PrintedText(x) & Text(y)) -> Analog(x))", "exists x.(PrintedText(x) & Analog(x))", "all x y.((PrintedText(x) & Print(y)) -> Analog(x))", "all x y.((PrintedText(x) & Text(y)) -> Analog(x,y))", "all x y.((PrintedText(x) & Print(y)) -> Analog(x,y))", "-all x.(PrintedText(x) -> Analog(x))", "all x.(PrintedText(x) -> Analogue(x))", "all x.(PrintedText(x) -> Analog(x))", "(all x.(PrintedText(x) -> Analog(x)))", "all x.exists y.(PrintableText(x) & PrintableText(y) & Analog(x,y))", "all x.exists y.(PrintableText(x) & PrintableText(y) & Analog(x))", "all x.(PrintedText(x) -> Analog(x))", "all x.exists y.(PrintedText(x) & PrintText(y) & Analog(x,y))"]}
{"id": "folio_validation_143", "nl": "All streaming services are digital.", "fol": "all x.(IsStreamingService(x) -> IsDigital(x))", "prediction": ["all x.(StreamingService(x) -> Digital(x))", "all x y.((StreamingService(x) & StreamingService(y)) -> Digital(x))", "all x y.((StreamingService(x) & Service(y)) -> Digital(x))", "all x y.((StreamingService(x) & Digital(y)) -> Streaming(x))", "(all x.(StreamingService(x) -> Digital(x)))", "all x y.((StreamingService(x) & Digital(y)) -> Streaming(x,y))", "all x y.((StreamingService(x) & Online(y)) -> Digital(x))", "all x y.((StreamingService(x) & StreamingService(y)) -> Digital(y))", "all x y.((StreamingService(x) & Digital(y)) -> Is(x,y))", "all x y.((StreamingService(x) & Digital(y)) -> CanStream(x,y))", "all x y.((StreamingService(x) & Streaming(y)) -> Digital(x))", "all x y.((StreamingService(x) & StreamingService(y)) -> Digital(x,y))", "all x.(StreamingService(x) -> Digital(x))", "all x y.((StreamingService(x) & Digital(y)) -> Digital(x))", "all x y.((StreamingService(x) & Digital(y)) -> AvailableOn(x,y))", "all x y.((StreamingService(x) & Digital(y)) -> StreamingService(x))"]}
{"id": "folio_validation_144", "nl": "If an object is a hardcover book then it is printed text.", "fol": "all x.(IsHardcoverBook(x) -> IsPrintedText(x))", "prediction": ["all x.((Object(x) & HardcoverBook(x)) -> PrintText(x))", "all x.(HardcoverBook(x) -> PrintText(x))", "all x.((Object(x) & HardcoverBook(x)) -> PrintedText(x))", "all x.((HardcoverBook(x) & PrintText(x)) -> PrintText(x))", "all x.((HardcoverBook(x) & Object(x)) -> PrintText(x))", "all x.(HardcoverBook(x) -> PrintedText(x))", "all x.((HardcoverBook(x)) -> PrintText(x))", "all x.((HardcoverBook(x) & PrintedText(x)) -> PrintableText(x))", "all x.(HasHardcoverBook(x) -> PrintText(x))", "all x.((Object(x) & HardcoverBook(x)) -> PrintedText(x))", "all x.((HardcoverBook(x) & PrintText(x)) -> PrintedText(x))", "all x.((HardcoverBook(x) & PrintedText(x)) -> PrintedText(x))", "all x.((HardcoverBook(x) & Object(x)) -> PrintedText(x))", "all x.((HardcoverBook(x) & HardcoverBook(x)) -> PrintText(x))", "all x.((Object(x) & HardcoverBook(x)) -> PrinteredText(x))", "all x.((HardcoverBook(x) & PrintedText(x)) -> PrintingText(x))"]}
{"id": "folio_validation_145", "nl": "If 1984 is a streaming service, then 1984 is a hardcover book.", "fol": "(IsStreamingService(Y1984) -> IsHardcoverBook(Y1984))", "prediction": ["all x.((StreamingService(x) & 1984(x)) -> HardcoverBook(x))", "all x.(StreamingService(x) -> HardcoverBook(x))", "all x.(((StreamingService(x) & 1984(x)) -> HardcoverBook(x))", "all x.((FilmingService(x) & 1984(x)) -> HardcoverBook(x))", "all x y.((StreamingService(x) & 1984(y)) -> HardcoverBook(y))", "all x.((84(x) & StreamingService(x)) -> HardcoverBook(x))", "all x.((Streaming(x) & 1984(x)) -> HardcoverBook(x))", "all x.((TransmissioningService(x) & 1984(x)) -> HardcoverBook(x))", "all x.((StreamingService(x) & 1983(x)) -> HardcoverBook(x))", "all x.((StreamingService(x) & StreamingService(x)) -> HardcoverBook(x))", "all x y.((StreamingService(x) & 1984(y)) -> HardcoverBook(x,y))", "all x.((1984(x) & StreamingService(x)) -> HardcoverBook(x))", "all x.((StreamingService(x) & Streaming(x)) -> HardcoverBook(x))", "all x.((StreamingService(x) & 1984) -> HardcoverBook(x))", "all x.((StreamingService(x) & 1984(x)) -> Hardcover(x))", "all x.(((StreamingService(x) & 1984)) -> HardcoverBook(x))"]}
{"id": "folio_validation_146", "nl": "1984 is printed text.", "fol": "IsPrintedText(Y1984)", "prediction": ["all x.((1984(x) & PrintText(x)) -> PrintText(x))", "1984 is printedText(84)", "all x.((1984(x) & PrintText(x)) -> PrintedText(x))", "All x.((1984(x) & PrintText(x)) -> PrintText(x))", "all x.((1984(x) & PrintedText(x)) -> PrintedText(x))", "all x.((1984(x) & PrintText(x)) -> IsPrintedText(x))", "all x.((1984(x) & PrintedText(x)) -> PrintingText(x))", "all x.((PrintableText(x) & 1984) -> PrintableText(x))", "all x.((PrintableText(x) & 1984(x)) -> PrintableText(x))", "all x.((1984(x) & PrintedText(x)) -> PrintText(x))", "All x.((1984(x) & PrintText(x)) -> PrintedText(x))", "all x.((1984(x) & PrintText(x)) -> Printed(x))", "all x.((84(x) & PrintText(x)) -> PrintText(x))", "1984 is printedText(x)", "All x.((1984(x) & PrintText(x)) -> IsPrintedText(x))", "all x.((1984(x) & PrintedText(x)) -> Print(x))"]}
{"id": "folio_validation_147", "nl": "1984 is a streaming service.", "fol": "IsStreamingService(Y1984)", "prediction": ["all x.((1984(x) & StreamingService(x)) -> StreamingService(x))", "all x.((84(x) & StreamingService(x)) -> StreamingService(x))", "All x.((1984(x) & StreamingService(x)) -> StreamingService(x))", "all x.((1984(x) & StreamingService(x)) -> (StreamingService(x) & StreamingService(x)))", "all x.((84(x) & StreamingService(x)) -> (StreamingService(x) & StreamingService(x)))", "1984 is streamingService(x) -> (StreamingService(x) & StreamingService(x)))", "all x.((1984(x) & StreamingService(x)) -> Streaming(x))", "All x.((1984(x) & StreamingService(x)) -> Streaming(x))", "all x.((84(x) & StreamingService(x)) -> Streaming(x))", "all x.((1984(x) & StreamingService(x)) -> (StreamingService(x) & -StreamingService(x)))", "all x.((84(x) & StreamingService(x)) -> (StreamingService(x) & -StreamingService(x)))", "all x.((1984(x) & StreamingService(x)) -> (StreamingService(x) | StreamingService(x)))", "all x.((1984(x) & StreamingService(x)) -> Is(x,y))", "(StreamingService(84) & StreamingService(84))", "all x.((84(x) & StreamingService(x)) -> Is(x,y))", "all x.((84(x) & StreamingService(x)) -> (StreamingService(x) | StreamingService(x)))"]}
{"id": "folio_validation_148", "nl": "1984 is not a streaming service.", "fol": "-IsStreamingService(Y1984)", "prediction": ["1984 -StreamingService(84))", "all x.((1984(x) & -StreamingService(x)) -> -StreamingService(x))", "All x.((1984(x) & -StreamingService(x)) -> -StreamingService(x))", "1984 is notStreamingService(84)", "all x.((1984) & -StreamingService(x)) -> -StreamingService(x))", "all x.(84(x) -> -StreamingService(x))", "all x.((1984(x) & -StreamingService(x)) -> -Streaming(x))", "1984 is notStreamingService(84) -> -StreamingService(84))", "All x.((1984(x) & -StreamingService(x)) -> -Streaming(x))", "1984 - StreamingService(84))", "(StreamingService(84) & -StreamingService(84))", "all x.((1984) & -StreamingService(x)) -> -Streaming(x))", "1984 & -StreamingService(84))", "1984 -StreamingService(84)", "all x.((1984(x) & -StreamingService(x)) -> -StreamingService(x))", "1984 is notStreamingService(84) & -StreamingService(84))"]}
{"id": "folio_validation_149", "nl": "All Romance languages are Indo-European languages.", "fol": "all x.(IsRomanceLanguage(x) -> IsIndoEuropeanLanguage(x))", "prediction": ["all x.(RomanceLanguage(x) -> IndoEuropeanLanguage(x))", "all x.(Romance(x) -> IndoEuropeanLanguage(x))", "all x.((RomanceLanguage(x) & IndoEuropeanLanguage(x)) -> RomanceLanguage(x))", "all x.(RomanceLanguage(x) -> IndoEuropeanLanguages(x))", "all x.(RainforceLanguage(x) -> IndoEuropeanLanguage(x))", "all x y.((RomanceLanguage(x) & IndoEuropeanLanguage(y)) -> IndoEuropeanLanguage(x))", "all x y.((RomanceLanguage(x) & IndoEuropeanLanguage(y)) -> IndoEuropeanLanguage(x,y))", "all x.((RomanceLanguage(x) & IndoEuropeanLanguage(x)) -> IndoEuropeanLanguage(x))", "all x.((RomanceLanguage(x) & IndoEuropeanLanguage(x)) -> IndoEuropeanLanguage(x))", "all x.(RomanceLanguage(x) -> IndoEuropean(x))", "all x.(RomanceLanguage(x) -> Indo-EuropeanLanguage(x))", "all x.(RainfallLanguage(x) -> IndoEuropeanLanguage(x))", "all x y.((RomanceLanguage(x) & IndoEuropeanLanguage(y)) -> IndoEuropeanLanguage(x))", "all x.(RomanceLanguage(x) -> IndoEuropeanLanguage(x))", "all x.(Romance(x) -> IndoEuropean(x))", "all x.((RomanceLanguage(x) & IndoEuropeanLanguage(x)) -> -IndoEuropeanLanguage(x))"]}
{"id": "folio_validation_150", "nl": "The Romance languages are a language family.", "fol": "all x.(IsRomanceLanguage(x) -> BelongsToFamily(x,Romancefamily))", "prediction": ["all x.(RomanceLanguage(x) -> LanguageFamily(x))", "all x.(Romance(x) -> LanguageFamily(x))", "all x y.((RomanceLanguage(x) & LanguageFamily(y)) -> LanguageFamily(x,y))", "all x y.((RomanceLanguage(x) & LanguageFamily(y)) -> LanguageFamily(x))", "all x.((RomanceLanguage(x) & LanguageFamily(x)) -> LanguageFamily(x))", "all x.((LanguageFamily(x) & Romance(x)) -> LanguageFamily(x))", "all x y.((RomanceLanguage(x) & LanguageFamily(y)) -> Language(x,y))", "all x y z.((RomanceLanguage(x) & LanguageFamily(y) & LanguageFamily(z)) -> LanguageFamily(x,y,z))", "all x y z.((RomanceLanguage(x) & LanguageFamily(y) & Language(z)) -> LanguageFamily(x,y,z))", "all x y.((Romance(x) & LanguageFamily(y)) -> LanguageFamily(x,y))", "all x.(RomanceLanguage(x) -> LanguageFamily(x))", "all x.(RainforceLanguage(x) -> LanguageFamily(x))", "all x.((LanguageFamily(x) & RomanceLanguage(x)) -> LanguageFamily(x))", "all x.((Language(x) & Romance(x)) -> LanguageFamily(x))", "all x y.((Romance(x) & LanguageFamily(y)) -> LanguageFamily(x))", "all x y.((RomanceLanguage(x) & LanguageFamily(y)) -> IsLanguage(x,y))"]}
{"id": "folio_validation_151", "nl": "All languages within a language family are related to each other.", "fol": "all z.((BelongsToFamily(x,z) & BelongsToFamily(y,z)) -> (IsRelatedTo(x,y) & IsRelatedTo(y,x)))", "prediction": ["all x y.((Language(x) & LanguageFamily(y)) -> Relationship(x,y))", "all x y.((Language(x) & LanguageFamily(y)) -> Related(x,y))", "all x y.((LanguageFamily(x) & LanguageFamily(y)) -> Relationship(x,y))", "all x y.((LanguageFamily(x) & LanguageFamily(y)) -> Related(x,y))", "all x y.((Language(x) & LanguageFamily(y)) -> Relative(x,y))", "all x y.((LanguageFamily(x) & LanguageFamily(y)) -> Relative(x,y))", "all x.exists y.(Language(x) & LanguageFamily(y) & WithinLanguageFamily(x,y))", "all x y z.((Language(x) & LanguageFamily(y) & LanguageFamily(z)) -> Relationship(x,y,z))", "all x y.((Language(x) & LanguageFamily(y)) -> RelatedTo(x,y))", "all x y.((Language(x) & LanguageFamily(y)) -> Related(x,y))", "all x y.((LanguageFamily(x) & LanguageFamily(y)) -> Related(x,y))", "all x y z.((Language(x) & LanguageFamily(y) & LanguageFamily(z)) -> RelatedTo(x,y,z))", "all x y.((LanguageFamily(x) & LanguageFamily(y)) -> RelatedTo(x,y))", "all x y z.((Language(x) & LanguageFamily(y) & LanguageFamily(z)) -> Related(x,y,z))", "all x y.((Language(x) & LanguageFamily(y)) -> RelatedTo(x,y))", "all x y z.((Language(x) & LanguageFamily(y) & LanguageFamily(z)) -> Relative(x,y,z))"]}
{"id": "folio_validation_152", "nl": "French and Spanish are both Romance languages.", "fol": "(IsRomanceLanguage(French) & IsRomanceLanguage(Spanish))", "prediction": ["(RomanceLanguage(French) & RomanceLanguage(Spanish))", "all x.((French(x) | Spanish(x)) -> RomanceLanguage(x))", "all x.((French(x) & Spanish(x)) -> RomanceLanguage(x))", "all x.(RomanceLanguage(x) -> (FrenchLanguage(x) | SpanishLanguage(x)))", "all x y.((French(x) & Spanish(y)) -> RomanceLanguage(x))", "all x.(RomanceLanguage(x) -> (FrenchLanguage(x) & SpanishLanguage(x)))", "(RomanceLanguage(French) | RomanceLanguage(Spanish))", "(RomanceLanguage(French,Spanish) & RomanceLanguage(French,Spanish))", "all x.((FrenchLanguage(x) & SpanishLanguage(x)) -> RomanceLanguage(x))", "(RomanceLanguage(french) & RomanceLanguage(spanish))", "all x y.((French(x) & Spanish(y)) -> RomanceLanguage(x,y))", "(RomanceLanguage(french) & RomanceLanguage(fspan))", "((French(French) & Spanish(Spanish)) -> RomanceLanguage(French) & RomanceLanguage(Spanish))", "(RomanceLanguage(french) & RomanceLanguage(fspanish) & RomanceLanguage(fspanish))", "(RomanceLanguage(french) & RomanceLanguage(fspan) & RomanceLanguage(fspan))", "(Romance(French) & Romance(Spanish))"]}
{"id": "folio_validation_153", "nl": "German is related to Spanish.", "fol": "IsRelatedTo(German,Spanish)", "prediction": ["all x.(German(x) -> RelatedToSpanish(x))", "all x y.((German(x) & Spanish(y)) -> Related(x,y))", "all x y.((German(x) & Spanish(y)) -> RelatedTo(x,y))", "all x.(Deutsch(x) -> RelatedToSpanish(x))", "all x y.((Deutsch(x) & Spanish(y)) -> Related(x,y))", "all x y.((Deutsch(x) & Spanish(y)) -> RelatedTo(x,y))", "all x.(German(x) -> Spanish(x))", "all x y.((German(x) & Spanish(y)) -> Relationship(x,y))", "all x y.((German(x) & Spanish(y)) -> RelatedTo(x,y))", "(all x.(German(x) -> Spanish(x)))", "all x y.((German(x) & Spanish(y)) -> Relative(x,y))", "all x y.((Deutsch(x) & Spanish(y)) -> Relationship(x,y))", "all x.(Deutsch(x) -> Spanish(x))", "all x.(German(x) -> RelationshipToSpanish(x))", "all x y.((Deutsch(x) & Spanish(y)) -> RelatedTo(x,y))", "all x y.((German(x) & Spanish(y)) -> Related(x,y))"]}
{"id": "folio_validation_154", "nl": "Basque is not related to any other language.", "fol": "all x.-IsRelatedTo(Basque,x)", "prediction": ["all x.(Basque(x) -> -RelatedToOtherLanguage(x))", "all x y.((Basque(x) & Language(y)) -> -RelatedTo(x,y))", "all x.(Basque(x) -> -RelatedToLanguage(x))", "all x.(Basque(x) -> -RelatedTo(x,y))", "all x.(Basque(x) -> -RelatedToAnotherLanguage(x))", "all x y.((Basque(x) & Language(y)) -> -Related(x,y))", "all x.(Basque(x) -> -RelatedToAnyOtherLanguage(x))", "all x y z.((Basque(x) & Language(y) & Language(z)) -> -RelatedTo(x,y,z))", "all x y.((BasqueLanguage(x) & Language(y)) -> -RelatedTo(x,y))", "all x.(Basque(x) -> -exists y.(Language(y) & RelatedTo(x,y))))", "all x.(Basque(x) -> -RelatedToAnyLanguage(x))", "all x y z.((Basque(x) & Language(y) & Language(z)) -> -Related(x,y,z))", "all x.(Basque(x) -> -exists y.(Language(y) & RelatedTo(x,y)))", "all x y.((BasqueLanguage(x) & Language(y)) -> -Related(x,y))", "all x.(Basque(x) -> -exists y.Language(y) & RelatedTo(x,y)))", "all x.(Basque(x) -> -RelatedToOtherLanguages(x))"]}
{"id": "folio_validation_155", "nl": "Basque is a Romance language.", "fol": "IsRomanceLanguage(Basque)", "prediction": ["all x.(Basque(x) -> RomanceLanguage(x))", "(RomanceLanguage(Basque) & RomanceLanguage(Basque))", "all x.(Basque(x) -> RomanceLanguage(x))", "all x y.((Basque(x) & RomanceLanguage(y)) -> RomanceLanguage(x,y))", "all x y.((Basque(x) & RomanceLanguage(y)) -> RomanceLanguage(x))", "all x y z.((Basque(x) & RomanceLanguage(y) & RomanceLanguage(z)) -> RomanceLanguage(x,y,z))", "all x y z.((Basque(x) & RomanceLanguage(y) & RomanceLanguage(z)) -> RomanceLanguage(x))", "all x y.((Basque(x) & RomanceLanguage(y)) -> Romance(x))", "all x y z.((Basque(x) & RomanceLanguage(y) & RomanceLanguage(z)) -> RomanceLanguage(x,y))", "All x.(Basque(x) -> RomanceLanguage(x))", "(RomanceLanguage(basque) & RomanceLanguage(basque))", "(RomanceLanguage(Basque) & RomanceLanguage(Basque) & RomanceLanguage(Basque))", "all x.(Basque(x) -> RomanceLanguage(x))", "all x y.((Basque(x) & RomanceLanguage(y)) -> Romance(x,y))", "all x y.((Basque(x) & Romance(y)) -> RomanceLanguage(x))", "all x y.((Basque(x) & RomanceLanguage(x)) -> RomanceLanguage(y))"]}
{"id": "folio_validation_156", "nl": "German is a Romance language.", "fol": "IsRomanceLanguage(German)", "prediction": ["all x.(German(x) -> RomanceLanguage(x))", "all x.(Deutsch(x) -> RomanceLanguage(x))", "all x y.((German(x) & RomanceLanguage(y)) -> RomanceLanguage(x,y))", "all x.((German(x) & RomanceLanguage(x)) -> RomanceLanguage(x))", "all x.(German(x) -> RomanceLanguage(x))", "all x y.((German(x) & RomanceLanguage(y)) -> RomanceLanguage(x))", "(RomanceLanguage(German) & RomanceLanguage(German))", "all x y.((Deutsch(x) & RomanceLanguage(y)) -> RomanceLanguage(x,y))", "all x.((German(x) & RomanceLanguage(x)) -> German(x))", "all x y.((Deutsch(x) & RomanceLanguage(y)) -> RomanceLanguage(x))", "All x.(German(x) -> RomanceLanguage(x))", "all x.(German(x) & RomanceLanguage(x))", "all x y.((German(x) & RomanceLanguage(x)) -> RomanceLanguage(y))", "all x y.((German(x) & RomanceLanguage(y)) -> Romance(x,y))", "all x y.((German(x) & RomanceLanguage(y)) -> Romance(x))", "all x.(Germany(x) -> RomanceLanguage(x))"]}
{"id": "folio_validation_157", "nl": "French is an Indo-European language.", "fol": "IsIndoEuropeanLanguage(French)", "prediction": ["all x.(French(x) -> IndoEuropeanLanguage(x))", "(IndoEuropeanLanguage(French) & IndoEuropeanLanguage(French))", "All x.(French(x) -> IndoEuropeanLanguage(x))", "all x.(French(x) -> IndoEuropeanLanguage(x))", "(IndoEuropeanLanguage(french) & IndoEuropeanLanguage(french))", "(IndoEuropeanLanguage(French) & IndoEuropeanLanguage(French) & IndoEuropeanLanguage(French))", "(IndonesianLanguage(French) & IndoEuropeanLanguage(French))", "all x y.((French(x) & IndoEuropeanLanguage(y)) -> IndoEuropeanLanguage(x,y))", "(IndoEuropeanLanguage(French) & IndoEuropeanLanguage(French))", "all x y.((French(x) & IndoEuropeanLanguage(y)) -> IndoEuropeanLanguage(x))", "all x y.((French(x) & IndoEuropeanLanguage(y)) -> IndoEuropeanLanguage(x,y))", "(IndoEuropeanLanguage(French) | IndoEuropeanLanguage(French))", "(IndoEuropeanLanguage(French) & IndoEuropeanLanguage(French) & IndoEuropeanLanguage(French))", "(IndoEuropeanLanguage(French) & IndoEuropeanLanguage(French) & IndoEuropeanLanguage(French))", "(IndoEuropeanLanguage(french) & IndoEuropeanLanguage(french) & IndoEuropeanLanguage(french))", "(IndonesiaEuropeanLanguage(French) & IndoEuropeanLanguage(French))"]}
{"id": "folio_validation_158", "nl": "Robert Lewandowski is a striker.", "fol": "IsStriker(RobertLewandowski)", "prediction": ["all x.((RobertLewandowski(x) & Striker(x)) -> Striker(x))", "all x.(Striker(x) -> (RobertLewandowski(x) & Striker(x)))", "All x.((RobertLewandowski(x) & Striker(x)) -> Striker(x))", "all x.(Striker(x) -> (RobertLewandowski(x) & Striker(x)))", "(Striker(RobertLewandowski)", "all x.(Striker(x) -> RobertLewandowski(x))", "all x.(RobertLewandowski(x) -> Striker(x))", "all x y.((RobertLewandowski(x) & Striker(y)) -> Striker(x))", "all x.((RobertLewandowski(x) & Striker(x)) -> Is(x,y))", "all x.((RobertLewandowski(x) & Striker(x)) -> Striker(x))", "((RobertLewandowski(Robert) & Striker(Robert)) -> Striker(Robert))", "all x.((RobertLewandowski(x) & Striker(x)) -> Strikes(x))", "Robert Lewandowski is a striker.", "(Striker(RobertLewandowski) & Striker(RobertLewandowski))", "(Striker(RobertLewandowski) & Striker(RobertLewandowski))", "all x.((RobertLewandowski(x) & Striker(x)) -> Star(x))"]}
{"id": "folio_validation_159", "nl": "[BG] Strikers are soccer players.", "fol": "all x.(IsStriker(x) -> IsSoccerPlayer(x))", "prediction": ["all x.(Striker(x) -> SoccerPlayer(x))", "all x.((Striker(x) & SoccerPlayer(x)) -> Striker(x))", "all x.(Striker(x) -> SoccerPlayer(x))", "all x.(Striker(x) -> SoccerPlayer(x))", "all x y.((Striker(x) & SoccerPlayer(y)) -> Striker(x))", "all x y.((Striker(x) & SoccerPlayer(y)) -> Striker(x,y))", "all x.(Strike(x) -> SoccerPlayer(x))", "all x.(Striker(x) -> (SoccerPlayer(x) | SoccerPlayer(x)))", "all x.(Striker(x) -> SoccerPlayer(x))", "all x y.((Striker(x) & SoccerPlayer(y)) -> Is(x,y))", "all x.(Streak(x) -> SoccerPlayer(x))", "(all x.(Striker(x) -> SoccerPlayer(x)))", "all x y.((Striker(x) & SoccerPlayer(y)) -> Plays(x,y))", "all x.(Strength(x) -> SoccerPlayer(x))", "all x y.((Striker(x) & SoccerPlayer(y)) -> SoccerPlayer(x,y))", "all x.(Strummer(x) -> SoccerPlayer(x))"]}
{"id": "folio_validation_160", "nl": "Robert Lewandowski left Bayern Munchen.", "fol": "LeftTeam(RobertLewandowski,BayernMunchen)", "prediction": ["Robert Lewandowski left Bayern Munchen.", "All x.(RobertLewandowski(x) -> LeftBayernMunchen(x))", "Robert Lewandowski has left Bayern Munchen.", "Robert Lewandowski hat Bayern Munchen verlassen.", "All x.(RobertLewandowski(x) -> LeftBundesligaMunchen(x))", "Robert Lewandowski (left Bayern Munchen)", "All x.(RobertLewandowski(x) -> LeftBundesliga(x))", "All x.(RobertLewandowski(x) -> Left(x,BayernMunchen))", "All x.(RobertLewandowski(x) -> LeftBerlinMunchen(x))", "Robert Lewandowski (left, Bayern Munchen))", "Robert Lewandowski - Bayern Munchen.", "All x.(RobertLewandowski(x) -> Left BayernMunchen(x))", "Robert Lewandowski & BayernMunchen(RobertLewandowski)", "All x.(RobertLewandowski(x) -> LeftBayern Munchen(x))", "All x.(RobertLewandowski(x) -> Left Bayern Munchen(x))", "All x.(RobertLewandowski(x) -> Left(x,Bundesliga,Munchen))"]}
{"id": "folio_validation_161", "nl": "[BG] If a player left a team they no longer play for that team.", "fol": "all x y.(LeftTeam(x,y) -> -PlaysForTeam(x,y))", "prediction": ["all x y.((Player(x) & Team(y) & Left(x,y)) -> -PlayFor(x,y))", "all x y.((Player(x) & Team(y) & Left(x,y)) -> -PlaysFor(x,y))", "all x y z.((Player(x) & Team(y) & Team(z) & Left(x,y)) -> -PlaysFor(x,z))", "all x y z.((Player(x) & Team(y) & Team(z) & Left(x,y)) -> -PlayFor(x,z))", "all x y.((Player(x) & Team(y) & Left(x,y)) -> NoPlayFor(x,y))", "all x y.((Player(x) & Team(y) & Leaved(x,y)) -> -PlayFor(x,y))", "all x y z.((Player(x) & Team(y) & Team(z) & Left(x,y,z)) -> -PlaysFor(x,y,z))", "all x y z.((Player(x) & Team(y) & Team(z) & Left(x,y,z)) -> -PlayFor(x,y,z))", "all x y.((Player(x) & Team(y) & Leaves(x,y)) -> -PlaysFor(x,y))", "all x y.((Player(x) & Team(y) & Leaved(x,y)) -> -PlaysFor(x,y))", "all x y.((Player(x) & Team(y) & Left(x,y)) -> -Play(x,y))", "all x y.((Player(x) & Team(y) & Leaves(x,y)) -> -PlayFor(x,y))", "all x y z.((Player(x) & Team(y) & Team(z) & Left(x,y)) -> -PlaysFor(x,y,z))", "all x y z.((Player(x) & Team(y) & Team(z) & Left(x,y,z)) -> -PlaysFor(x,y))", "all x y z.((Player(x) & Team(y) & Team(z) & Left(x,y,z)) -> -PlayFor(x,y))", "all x y z.((Player(x) & Team(y) & Team(z) & Left(x,y)) -> -PlayFor(x,y,z))"]}
{"id": "folio_validation_162", "nl": "Robert Lewandowski is a soccer player.", "fol": "IsSoccerPlayer(RobertLewandowski)", "prediction": ["all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> Plays(x,y))", "all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> Plays(x))", "(SoccerPlayer(RobertLewandowski)", "all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> PlaysIn(x,y))", "all x.(RobertLewandowski(x) -> SoccerPlayer(x))", "all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> Plays(x,Soccer))", "all x.(SoccerPlayer(x) -> RobertLewandowski(x))", "all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> SoccerPlayer(x))", "all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> CanPlay(x))", "all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> Plays(x,soccer))", "all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> FootballPlayer(x))", "all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> Is(x,y))", "All x.((RobertLewandowski(x) & SoccerPlayer(x)) -> Plays(x,y))", "all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> PlayedIn(x,y))", "all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> PlayedBy(x,y))", "all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> PlaysWith(x,y))"]}
{"id": "folio_validation_163", "nl": "Robert Lewandowski plays for Bayern Munchen.", "fol": "PlaysForTeam(RobertLewandowski,BayernMunchen)", "prediction": ["all x y.((RobertLewandowski(x) & BayernMunchen(y)) -> PlaysFor(x,y))", "Robert Lewandowski plays for Bayern Munchen.", "all x.((RobertLewandowski(x) & BayernMunchen(x)) -> PlaysFor(x,y))", "All x y.((RobertLewandowski(x) & BayernMunchen(y)) -> PlaysFor(x,y))", "all x.((RobertLewandowski(x) & PlaysFor(x,BayernMunchen)) -> PlaysFor(x,BayernMunchen))", "all x.((RobertLewandowski(x) & PlaysFor(x,Bundesliga)) -> PlaysFor(x,Bundesliga))", "(PlaysFor(RobertLewandowski,Bundesliga) & PlaysFor(RobertLewandowski,Bundesliga))", "all x y z.((RobertLewandowski(x) & BayernMunchen(y) & PlaysFor(x,y)) -> PlaysFor(x,z))", "all x y.((RobertLewandowski(x) & Bayern(y)) -> PlaysFor(x,y))", "All x.((RobertLewandowski(x) & BayernMunchen(x)) -> PlaysFor(x,y))", "all x y z.((RobertLewandowski(x) & BayernMunchen(y) & Player(z)) -> PlaysFor(x,y,z))", "all x.((RobertLewandowski(x) & PlaysForBundesliga(x)) -> PlaysForBundesliga(x))", "all x y.((RobertLewandowski(x) & BayernMunchen(y)) -> Plays(x,y))", "all x.((RobertLewandowski(x) & BayernMunchen(x)) -> PlaysFor(x,Bundesliga,Munchen))", "(PlaysFor(RobertLewandowski,Bundesliga) & BayernMunchen(RobertLewandowski,Bundesliga))", "(PlaysFor(RobertLewandowski,Bundesliga) & BayernMunchen(RobertLewandowski))"]}
{"id": "folio_validation_164", "nl": "Robert Lewandowski is a star.", "fol": "IsSoccerStar(RobertLewandowski)", "prediction": ["all x.((RobertLewandowski(x) & Star(x)) -> Star(x))", "All x.((RobertLewandowski(x) & Star(x)) -> Star(x))", "all x.(Star(x) -> (RobertLewandowski(x) & Star(x)))", "all x.(RobertLewandowski(x) -> Star(x))", "all x.(Star(x) -> (RobertLewandowski(x) & Star(x)))", "all x y.((RobertLewandowski(x) & Star(y)) -> Star(x))", "all x.((RobertLewandowski(x) & Star(x)) -> IsStar(x))", "all x.((RobertLewandowski(x) & Star(x)) -> Is(x,y))", "all x.((RobertLowandowski(x) & Star(x)) -> Star(x))", "all x.((RobertLewandowski(x) & Star(x)) -> Star(x))", "all x y.((RobertLewandowski(x) & Star(y)) -> Star(x,y))", "all x.((RobertLewandowski(x) & Star(x)) -> -Star(x))", "ALL x.((RobertLewandowski(x) & Star(x)) -> Star(x))", "all x.((RobertLewandowski(x) & Star(x)) -> (Star(x) & Star(x)))", "all x.(Star(x) -> RobertLewandowski(x))", "all x.(RogerLewandowski(x) -> Star(x))"]}
{"id": "folio_validation_165", "nl": "Billings is a city in Montana.", "fol": "IsCityInState(Billings,Montana)", "prediction": ["all x.(Billings(x) -> (City(x) & InMontana(x)))", "all x.(Billings(x) -> (CityInMontana(x) & LocatedIn(x,Montana)))", "all x.(Billings(x) -> (CityInMontana(x) & InMontana(x)))", "all x y.((Billings(x) & Montana(y)) -> City(x,y))", "(City(Billings) & InMontana(Billings))", "all x.(Billings(x) -> CityInMontana(x))", "all x.(Billings(x) -> (MontanaCity(x) & LocatedIn(x,Montana)))", "all x.(Billings(x) -> (City(x) & InMountain(x)))", "all x.(Billings(x) -> (City(x) & Montana(x)))", "all x.(Billings(x) -> (City(x) & InMontana(x)))", "all x.(Billings(x) -> (City(x) & inMontana(x)))", "all x.(Billings(x) -> (CityInMontana(x) | CityInMontana(x)))", "(City(Billings) & LocatedInMontana(Billings))", "all x.((City(x) & Billings(x)) -> MontanaCity(x))", "all x.(Billings(x) -> (Montana(x) & City(x)))", "all x.(Billings(x) -> MontanaCity(x))"]}
{"id": "folio_validation_166", "nl": "Montana includes the cities of Butte, Helena, and Missoula.", "fol": "(IsCityInState(Butte,Montana) & IsCityInState(Helena,Montana) & IsCityInState(Missoula,Montana))", "prediction": ["(all x.(Mountain(x) -> Butte(x)) & all y.(Mountain(y) -> Helena(y)) & all z.(Mountain(z) -> Missoula(z))))", "(all x.(Mountain(x) -> Butte(x)) & all y.(Mountain(y) -> Helena(y))) & all z.(Mountain(z) -> Missoula(z)))", "(all x.(Mountain(x) -> (Butte(x) | Helena(x) | Missoula(x))))", "all x.(Mountain(x) -> (City(x,Butte) | City(x,Helena) | City(x,Missoula)))", "All x.(Mountain(x) -> (City(x,Butte) | City(x,Helena) | City(x,Missoula)))", "(all x.(Mountain(x) -> Butte(x)) & all y.((Mountain(y) & Helena(y)) -> Missoula(y)))", "(all x.(Montana(x) -> (Butte(x) | Helena(x) | Missoula(x))))", "(all x.(Mountain(x) -> Butte(x)) & all y.(Mountain(y) -> Helena(y)) & all z.((Mountain(z) & Butte(z)) -> Missoula(z))))", "(all x.(Mountain(x) -> Butte(x)) & all y.(Mountain(y) -> Helena(y))) & all z.(Mountain(z) -> Missoula(z))))", "(all x.(Montana(x) -> Butte(x)) & all y.((Montana(y) & Helena(y)) -> Missoula(y)))", "(all x.(Mountain(x) -> Butte(x)) & all y.(Mountain(y) -> Helena(y))) & all z.((Mountain(z) & Butte(z)) -> Missoula(z)))", "(All x.(Mountain(x) -> (Butte(x) | Helena(x) | Missoula(x))))", "((Mountain(Mountain) & Butte(Mountain)) | (Mountain(Mountain) & Helena(Mountain)) | (Mountain(Mountain) & Missoula(Mountain))))", "((Montana(Montana) & Butte(Montana)) | (Butte(Montana) | Helena(Montana) | Missoula(Montana))))", "((Montana(Montana) & Butte(Montana)) | (Butte(Montana) & Helena(Montana)) | Missoula(Montana)))", "All x.(Mountain(x) -> (Butte(x) | Helena(x) | Missoula(x)))"]}
{"id": "folio_validation_167", "nl": "White Sulphur Springs and Butte are cities in the same state.", "fol": "exists x.(IsCityInState(Whitesulphursprings,x) & IsCityInState(Butte,x))", "prediction": ["(SameState(WhiteSulphurSprings) & SameState(Butte))", "(SameStateCity(WhiteSulphurSprings) & SameStateCity(Butte))", "(City(WhiteSulphurSprings) & City(Butte))", "(City(WhiteSulphurSprings) & City(Butte) & InSameState(WhiteSulphurSprings))", "(City(WhiteSulphurSprings) & City(Butte) & State(WhiteSulphurSprings))", "(City(WhiteSulphurSprings) & City(Butte) & InSameState(WhiteSulphurSprings,SameState))", "all x y.((WhiteSulphurSprings(x) & Butte(y)) -> (City(x,y) & State(y)))", "all x y.((WhiteSulphurSpring(x) & Butte(y)) -> (City(x,y) & State(y)))", "All x y.((WhiteSulphurSprings(x) & Butte(y)) -> (City(x,y) & State(y)))", "((WhiteSulphurSprings(White) & Butte(Butte)) -> CitiesInSameState(White))", "all x.((WhiteSulphurSprings(x) & Butte(x)) -> CitiesInSameState(x))", "all x.((WhiteSulphurSprings(x) & Butte(x)) -> State(x))", "All x.((WhiteSulphurSprings(x) & Butte(x)) -> State(x))", "all x.((WhiteSulphurSprings(x) & Butte(x)) -> CityInSameState(x))", "(City(WhiteSulphurSprings) & City(Butte) & SameState(WhiteSulphurSprings))", "((WhiteSulphurSprings(x) & Butte(x)) -> CitiesInSameState(x))"]}
{"id": "folio_validation_168", "nl": "The city of Pierre is not in Montana.", "fol": "-IsCityInState(Pierre,Montana)", "prediction": ["all x.((City(x) & Pierre(x)) -> -InMontana(x))", "all x.((City(x) & Pierre(x)) -> -Montana(x))", "all x.((City(x) & Pierre(x)) -> -Mt.(Montana(x)))", "all x.((City(x) & Pierre(x)) -> -Malitoba(x))", "(-(City(Pierre) & Montana(Pierre)) -> -(City(Pierre) & Montana(Pierre)))", "all x.((City(x) & Pierre(x)) -> -Mountain(x))", "all x.(City(x) -> -InMontana(x))", "(-(City(Pierre) & Montana(Pierre)))", "all x.((City(x) & Pierre(x)) -> -InMissouri(x))", "-(City(Pierre) & Montana(Pierre))", "(-(City(Pierre) & Montana(Pierre)) -> -(City(Pierre) & Montana(Pierre))))", "all x.((City(x) & Pierre(x)) -> -InMountain(x))", "(-Montana(City(City) & Pierre(City))", "all x.((City(x) & Pierre(x)) -> -Missouri(x))", "(-InMontana(City(City) & Pierre(City))", "(-(City(Pierre) & Montana(Pierre)) -> -(City(Pierre) | City(Pierre))))"]}
{"id": "folio_validation_169", "nl": "Any city in Butte is not in Pierre.", "fol": "all x.(IsCityInState(Butte,x) -> -IsCityInState(Pierre,x))", "prediction": ["all x.((City(x) & Butte(x)) -> -Pierre(x))", "all x.((City(x) & InButte(x)) -> -InPierre(x))", "all x.((City(x) & Butte(x)) -> -InPierre(x))", "all x.((City(x) & Butte(x)) -> -Pierce(x))", "all x.((City(x) & Butte(x)) -> -InPierce(x))", "all x.((City(x) & LocatedInButte(x)) -> -InPierre(x))", "all x.((City(x) & InButte(x)) -> -Pierre(x))", "all x.((City(x) & InButte(x)) -> -InPierce(x))", "all x.((City(x) & Butte(x)) -> -Piece(x))", "all x.((CityInButte(x) & -InPierre(x)) -> -InPierre(x))", "all x.((City(x) & LocatedInButte(x)) -> -Pierre(x))", "all x y.((City(x) & Butte(y)) -> -InPierre(x,y))", "(all x.(City(x) & Butte(x)) -> -Pierre(x))", "all x.((City(x) & Butte(x)) -> -InPitte(x))", "all x y.((City(x) & Butte(y)) -> -Pierre(x,y))", "all x.((City(x) & LocatedInButte(x)) -> -InPierce(x))"]}
{"id": "folio_validation_170", "nl": "Butte and Pierre are in the same state.", "fol": "exists x.(IsCityInState(Butte,x) & IsCityInState(Pierre,x))", "prediction": ["(SameState(Butte) & SameState(Pierre))", "(SameState(Butte,Pierce) & SameState(Butte,Pierce))", "All x.((Butte(x) & Pierre(x)) -> SameState(x))", "(SameState(Butte,Pierce) & SameState(Pierce,Butte))", "All x.((Butte(x) & Pierre(x)) -> InSameState(x))", "All x y.((Butte(x) & Pierre(y)) -> InSameState(x,y))", "All x.((Butte(x) | Pierre(x)) -> SameState(x))", "All x.((Butte(x) | Pierre(x)) -> InSameState(x))", "All x y.((Butte(x) & Pierre(y)) -> SameState(x,y))", "(SameState(Butte,Pierce) -> SameState(Butte,Pierce))", "(SameState(Butte,Piece) & SameState(Butte,Piece))", "(SameState(Butte,Pierce) & SameState(Pierce))", "(SameState(Butte) & SameState(Pierce))", "(SameState(Butte,Pierce) & SameState(Pierce,Butte,Pierce))", "(SameState(Butte,Pierce) & SameState(Pierre,Butte))", "(SameState(Butte,Piece) & SameState(Piece,Butte))"]}
{"id": "folio_validation_171", "nl": "Pierre and Bismarck are in the same state.", "fol": "exists x.(IsCityInState(Pierre,x) & IsCityInState(Bismarck,x))", "prediction": ["(SameState(Pierre) & SameState(Bismarck))", "all x.((Pierre(x) | Bismarck(x)) -> SameState(x))", "all x y.((Piece(x) & Bismarck(y)) -> InSameState(x,y))", "all x.((Pierre(x) & Bismarck(x)) -> SameState(x))", "all x y.((Piece(x) & Bismarck(y)) -> SameState(x,y))", "all x.((Piece(x) & Bismarck(x)) -> SameState(x))", "all x y.((Pierre(x) & Bismarck(y)) -> InSameState(x,y))", "all x.((Pierre(x) & Bismarck(x)) -> InSameState(x))", "all x.((Pierre(x) | Bismarck(x)) -> InSameState(x))", "all x.((Piece(x) & Bismarck(x)) -> InSameState(x))", "all x y.((Pierre(x) & Bismarck(y)) -> SameState(x,y))", "(SameState(Pierre,Bismarck))", "all x.((Piece(x) | Bismarck(x)) -> SameState(x))", "(SameState(Pierre) & SameState(bismarck))", "all x.((Pierce(x) & Bismarck(x)) -> SameState(x))", "(SameState(Pierce) & SameState(Bismarck))"]}
{"id": "folio_validation_172", "nl": "Montana is home to the city of Missoula.", "fol": "IsCityInState(Missoula,Montana)", "prediction": ["all x y.((Montana(x) & City(y)) -> HomeTo(x,y))", "all x.((Montana(x) & City(x,Missoula)) -> HomeTo(x,Missoula))", "all x.((Montana(x) & CityOfMissoula(x)) -> HomeTo(x,Missoula))", "all x.((Montana(x) & City(y) & Missoula(z)) -> HomeTo(x,y,z))", "all x.(Missoula(x) -> HomeTo(x,Missoula))", "all x y z.((Montana(x) & City(y) & City(z) & Missoula(y)) -> HomeTo(x,y,z))", "all x y z.((Montana(x) & City(y) & City(z)) -> HomeTo(x,y,z))", "all x y.((Missoula(x) & Montana(y)) -> HomeTo(x,y))", "all x y.((Montana(x) & City(y) & Missoula(y)) -> HomeTo(x,y))", "all x y.((Montana(x) & City(y) & Missoula(z)) -> HomeTo(x,y,z))", "all x y z.((Montana(x) & City(y) & City(z) & Missoula(z)) -> HomeTo(x,y,z))", "all x.(Mountain(x) -> HomeToMissoula(x))", "all x y.((Montana(x) & City(y)) -> Missoula(x))", "all x.(Montana(x) -> HomeToMissoula(x))", "all x.((Montana(x) & CityOfMissoula(x)) -> HomeTo(x,Misoula))", "all x.((Montana(x) & City(y)) -> HomeTo(x,y))"]}
{"id": "folio_validation_173", "nl": "International students in US have either an F1 visa or a J1 visa.", "fol": "all x.(((IsInternationalStudent(x) -> HasF1Visa(x)) & -HasJ1Visa(x)) | (-(IsInternationalStudent(x) -> HasF1Visa(x)) & HasJ1Visa(x)))", "prediction": ["all x.((InternationalStudent(x) & InUS(x)) -> (HasF1Visa(x) | HasJ1Visa(x)))", "all x.((InternationalStudent(x) & InUS(x)) -> (F1Visa(x) | J1Visa(x)))", "all x.(InternationalStudent(x) -> (HasF1Visa(x) | HasJ1Visa(x)))", "all x y.((InternationalStudent(x) & US(y)) -> (HasF1Visa(x,y) | HasJ1Visa(x,y)))", "all x y.((InternationalStudent(x) & Student(y) & InUS(x,y)) -> (HasF1Visa(x) | HasJ1Visa(x)))", "all x y.((InternationalStudent(x) & Student(y)) -> (HasF1Visa(x,y) | HasJ1Visa(x,y)))", "all x y.((InternationalStudent(x) & Student(y) & InUS(x,y)) -> (HasF1Visa(x,y) | HasJ1Visa(x,y)))", "all x.((InternationalStudent(x) & US(x)) -> (HasF1Visa(x) | HasJ1Visa(x)))", "all x.((InternationalStudent(x) & InUS(x)) -> (HasVisa(x,F1) | HasVisa(x,J1)))", "all x.(InternationalStudent(x) -> (F1Visa(x) | J1Visa(x)))", "all x y.((InternationalStudent(x) & US(y)) -> (F1Visa(x,y) | J1Visa(x,y)))", "all x y.((InternationalStudent(x) & Student(y) & InUS(x,y)) -> (F1Visa(x) | J1Visa(x)))", "all x.((InternationalStudent(x) & US(x)) -> (F1Visa(x) | J1Visa(x)))", "all x.((InternationalStudent(x) & inUS(x)) -> (HasF1Visa(x) | HasJ1Visa(x)))", "all x y.((InternationalStudent(x) & US(y)) -> (F1Visa(x) | J1Visa(x)))", "all x y.((InternationalStudent(x) & US(y)) -> (HasF1Visa(x) | HasJ1Visa(x)))"]}
{"id": "folio_validation_174", "nl": "An international student in US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US.", "fol": "all x.(((IsInternationalStudent(x) & HasF1Visa(x) & DesiresToWorkInUS(x)) -> SubmitApplication(x,Cpt)) | SubmitApplication(x,Opt))", "prediction": ["all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (ApplicationForCPT(x) | ApplicationForOPT(x)))", "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (AppliesForCPT(x) | AppliesForOPT(x)))", "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (ApplicationForCPT(x) | ApplicationForOPT(x)))", "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (ApplyForCPT(x) | ApplyForOPT(x)))", "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (ApplicationForCPT(x) | ApplicationForOPT(x)))", "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (AppliesForCPT(x) | AppliesForOPT(x)))", "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (ApplicationForCPT(x) | AppropriateForOPT(x)))", "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (ApplicationForCPT(x) | ApplicationForOPT(x)))", "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (CPT(x) | OPT(x)))", "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (AppliesForCPT(x) | ApplyForOPT(x)))", "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (ApplyForCPT(x) | ApplyForOPT(x)))", "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (ApplicationForCPT(x) | ApplyForOPT(x)))", "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (NeedsCPT(x) | NeedsOPT(x)))", "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (ApplicationForCPT(x) | ApplyForOPT(x)))", "all x y.((InternationalStudent(x) & InternationalStudent(y) & InUS(x,y) & HasF1Visa(x)) -> (ApplicationForCPT(x) | ApplicationForOPT(x)))", "all x y.((InternationalStudent(x) & InternationalStudent(y) & InUS(x,y) & HasF1Visa(x)) -> (AppliesForCPT(x) | AppliesForOPT(x)))"]}
{"id": "folio_validation_175", "nl": "Mike is an international student.", "fol": "IsInternationalStudent(Mike)", "prediction": ["(InternationalStudent(Mike) & InternationalStudent(Mike))", "all x.(Mike(x) -> InternationalStudent(x))", "all x.((Mike(x) & InternationalStudent(x)) -> InternationalStudent(x))", "(InternationalStudent(Mike) & -InternationalStudent(Mike))", "Mike is InternationalStudent(Mike)", "(InternationalStudent(Mike) | InternationalStudent(Mike)))", "All x.(Mike(x) -> InternationalStudent(x))", "(InternationalStudent(Mike)", "all x.((Mike(x) & InternationalStudent(x)) -> -InternationalStudent(x))", "(InternationalStudent(Mike) -> InternationalStudent(Mike))", "all x.(InternationalStudent(x) -> Mike(x))", "(InternationalStudent(Mike) -> InternationalStudent(Mike))", "all x.((Mike(x) & InternationalStudent(x)) -> Is(x,y))", "(InternationalStudent(Mike) & International(Mike))", "all x.((Mike(x) & InternationalStudent(x)) -> Student(x))", "all x.((Mike(x) & InternationalStudent(x)) -> Graduate(x))"]}
{"id": "folio_validation_176", "nl": "Mike needs to apply for CPT if he wants to work in the US.", "fol": "(DesiresToWorkInUS(Mike) -> SubmitApplication(Mike,Cpt))", "prediction": ["all x.((Mike(x) & WantsToWorkInUS(x)) -> NeedsCPT(x))", "all x.((Mike(x) & WantsToWorkInUS(x)) -> NeedsCPTA(x))", "all x.((Mike(x) & WantsWorkInUS(x)) -> NeedsCPT(x))", "all x.((Mike(x) & WantsToWorkInUS(x)) -> NeedsToApplyForCPT(x))", "all x.((Mike(x) & WorkInUS(x)) -> NeedsCPT(x))", "all x.((Mike(x) & WorksInUS(x)) -> NeedsCPT(x))", "all x.((Mike(x) & WantsToWorkInUS(x)) -> NeedsCPT(x))", "all x.((Mike(x) & WantsToWorkInUS(x)) -> NeedsCPTApplication(x))", "all x.((Mike(x) & WantsToWorkInTheUS(x)) -> NeedsCPT(x))", "all x.((Mike(x) & WantsToWorkInUS(x)) -> NeedsApplicationForCPT(x))", "all x.((Mike(x) & WantsToWorkIn(x,US)) -> NeedsCPT(x))", "all x y.((Mike(x) & US(y)) -> NeedsCPT(x,y))", "all x.((Mike(x) & WillWorkInUS(x)) -> NeedsCPT(x))", "all x.((Mike(x) & WorkInUS(x)) -> NeedsCPTA(x))", "all x.((Mike(x) & WorksInUS(x)) -> NeedsCPTA(x))", "all x.((Mike(x) & WantsWorkInUS(x)) -> NeedsCPTA(x))"]}
{"id": "folio_validation_177", "nl": "Mike has an F1 visa.", "fol": "HasF1Visa(Mike)", "prediction": ["all x.(Mike(x) -> HasF1Visa(x))", "all x.(Mike(x) -> F1Visa(x))", "(HasVisa(Mike) & F1(Mike))", "All x.(Mike(x) -> HasF1Visa(x))", "(exists x.(Mike(x) & F1Visa(x)))", "Mike has a F1Visa(Mike)", "All x.(Mike(x) -> F1Visa(x))", "(HasF1Visa(Mike) & -HasF1Visa(Mike))", "-exists x.(Mike(x) & F1Visa(x))", "(HasVisa(Mike) & -HasVisa(Mike))", "(exists x.(Mike(x) & HasF1Visa(x)))", "-exists x.(Mike(x) & HasF1Visa(x))", "exists x.(Mike(x) & F1Visa(x))", "(HasVisa(Mike,F1))", "Mike has an F1Visa(Mike)", "(HasVisa(Mike) & HasVisa(Mike))"]}
{"id": "folio_validation_178", "nl": "Mike has a J1 visa.", "fol": "HasJ1Visa(Mike)", "prediction": ["all x.(Mike(x) -> HasJ1Visa(x))", "all x.(Mike(x) -> J1Visa(x))", "all x.((Mike(x) & HasJ1Visa(x)) -> HasJ1Visa(x))", "all x.((Mike(x) & J1Visa(x)) -> Has(x,Mike))", "all x.((Mike(x) & J1Visa(x)) -> Has(x,y))", "(J1Visa(Mike) & -J1Visa(Mike))", "All x.(Mike(x) -> HasJ1Visa(x))", "(HasJ1Visa(Mike) & -HasJ1Visa(Mike))", "all x.(Mike(x) -> HASJ1Visa(x))", "all x y.((Mike(x) & Visa(y)) -> HasJ1(x,y))", "exists x.(Mike(x) & HasJ1Visa(x))", "all x.((Mike(x) & J1Visa(x)) -> Has(x))", "(HasJ1Visa(Mike))", "all x.((Mike(x) & HasJ1Visa(x)) -> HasVisa(x))", "exists x.(Mike(x) & J1Visa(x))", "all x.(Mike(x) -> HasJ1Visa(x))"]}
{"id": "folio_validation_179", "nl": "All cows are bovines.", "fol": "all x.(IsCow(x) -> IsBovine(x))", "prediction": ["all x.(Cow(x) -> Bovine(x))", "all x.(Cow(x) -> Bovine(x))", "all x.(Cole(x) -> Bovine(x))", "all x.(Chocolate(x) -> Bovine(x))", "all x.(Cow(x) -> Bovine(x))", "all x y.((Cow(x) & Bovine(y)) -> Bovine(x))", "all x.(Bovine(x) -> Cow(x))", "all x.(Cow(x) -> Bovine(x))", "all x.(Choice(x) -> Bovine(x))", "all x y.((Cow(x) & Bovine(y)) -> Cow(x))", "all x.(Chow(x) -> Bovine(x))", "(all x.(Cow(x) -> Bovine(x)))", "all x.(Cold(x) -> Bovine(x))", "all x.(Kind(x) -> Bovine(x))", "all x y.((Cow(x) & Bovine(y)) -> Bovine(x,y))", "(all x.(Cow(x) -> Bovine(x)))"]}
{"id": "folio_validation_180", "nl": "Some pets are cows.", "fol": "exists x.(IsPet(x) & IsCow(x))", "prediction": ["exists x.(Pet(x) & Cow(x))", "exists x.(Animal(x) & Cow(x))", "exists x.(Pet(x) & Cow(x))", "exists x y.(Pet(x) & Cow(y))", "exists x.(Dog(x) & Cow(x))", "exists x.(Puppet(x) & Cow(x))", "exists x.((Pet(x) & Cow(x))", "(exists x.(Pet(x) & Cow(x)))", "exists x.(Treatment(x) & Cow(x))", "exists x y.(Pet(x) & Cow(y) & Pet(x))", "exists x.(Pup(x) & Cow(x))", "exists x y.(Pet(x) & Cow(y) & Pet(x,y))", "exist x.(Pet(x) & Cow(x))", "exists x.(Pet(x) & Cow(y))", "exists x.((Pet(x) & Cow(x)) -> Pet(x))", "exists x.(Female(x) & Cow(x))"]}
{"id": "folio_validation_181", "nl": "If something is a bovine, then it is domesticated.", "fol": "all x.(IsBovine(x) -> IsDomesticated(x))", "prediction": ["all x.(Bovine(x) -> Domesticated(x))", "all x.((Bovine(x) & Domesticated(x)) -> Bovine(x))", "all x.((Bovine(x) & Domesticated(x)) -> Domesticated(x))", "all x.((Bovine(x)) -> Domesticated(x))", "all x.((Bovine(x) & Domesticated(x)) -> Exists y.(Bovine(y) & Domesticated(x)))", "all x.((Bovine(x) & Domesticated(x)) -> IsBovine(x))", "all x.((Animal(x) & Bovine(x)) -> Domesticated(x))", "all x.((Bovine(x) & Domesticated(x)) -> -Bovine(x))", "all x.((Bovine(x) & Domesticated(x)) -> Exists y.(Bovine(y) & Domesticated(y)))", "all x.((Bovine(x) & Domesticated(x)) -> Animal(x))", "all x.((Bovine(x) & Domesticated(x)) -> Exists y.(Bovine(y) & Domesticated(x,y)))", "all x.((Bovine(x) -> Domesticated(x))", "all x.((Bovine(x) & Domesticated(x)) -> HasBovine(x))", "all x.((IsBovine(x) & Domesticated(x)) -> Bovine(x))", "all x.((Bovine(x) & Domesticated(x)) -> Householdated(x))", "all x.((Bovine(x) & Domesticated(x)) -> Exists y.(Bovine(y) & Domesticated(x,y))))"]}
{"id": "folio_validation_182", "nl": "No domesticated animals are alligators.", "fol": "all x.(IsDomesticated(x) -> -IsAlligator(x))", "prediction": ["all x.(DomesticatedAnimal(x) -> -Alligator(x))", "-exists x.(DomesticatedAnimal(x) & Alligator(x))", "-all x.(DomesticatedAnimal(x) -> Alligator(x))", "all x.((DomesticatedAnimal(x) & -Alligator(x)) -> -(DomesticatedAnimal(x) & Alligator(x)))", "-exists x.(DomesticatedAnimal(x) & -Alligator(x))", "all x.((DomesticatedAnimal(x) & -Alligator(x)) -> -DomesticatedAnimal(x))", "all x.((DomesticatedAnimal(x) & -Alligator(x)) -> -Alligator(x))", "all x.((DomesticatedAnimal(x) & -Alligator(x)) -> -(DomesticatedAnimal(x) & -Alligator(x)))", "-exists x.(Domesticated(x) & Animal(x) & Alligator(x))", "(-exists x.(DomesticatedAnimal(x) & Alligator(x)))", "all x.((DomesticatedAnimal(x) & -Alligator(x)) -> -(DomesticatedAnimal(x) & -DomesticatedAnimal(x)))", "all x.(DomesticatedAnimal(x) -> -Alligator(x))", "all x.(DomesticatedAnimal(x) & -Alligator(x))", "all x.(DomesticatedAnimal(x) -> Alligator(x))", "all x.(DomesticatedAnimal(x) -> NoAlligator(x))", "all x.(Domesticated(x) -> -Alligator(x))"]}
{"id": "folio_validation_183", "nl": "Ted is an aligator.", "fol": "IsAlligator(Ted)", "prediction": ["all x.(Ted(x) -> Aligator(x))", "(Aligator(Ted) & Aligator(Ted))", "exists x.(Ted(x) & Aligator(x))", "All x.(Ted(x) -> Aligator(x))", "all x.((Ted(x) & Aligator(x)) -> Aligator(x))", "(Alligator(Ted) & Aligator(Ted))", "(Aligator(Ted)", "Ted is Aligator(Ted)", "all x.(Aligator(x) -> Ted(x))", "(Aligator(Ted))", "(Aligator(Ted) -> Aligator(Ted))", "all x.(Aligator(x) -> Ted(x))", "(Aligator(Ted) -> Aligator(Ted))", "all x.((Ted(x) & Aligator(x)) -> Alive(x))", "(Aligator(Ted) & -Aligator(Ted))", "(Aligator(Ted) & LivesIn(Ted))"]}
{"id": "folio_validation_184", "nl": "Ted is a pet.", "fol": "IsPet(Ted)", "prediction": ["all x.(Ted(x) -> Pet(x))", "(Pet(Ted) & Pet(Ted))", "(Pet(Ted) | Pet(Ted)))", "all x.((Ted(x) & Pet(x)) -> Pet(x))", "exists x.(Ted(x) & Pet(x))", "(Pet(Ted) & -Pet(Ted))", "all x.(Pet(x) -> Ted(x))", "all x.(Ted(x) -> Pet(x))", "All x.(Ted(x) -> Pet(x))", "(Pet(Ted) & LivesIn(Ted))", "((Ted(Ted) & Pet(Ted)))", "(Pet(Ted) & -Pet(Ted)))", "((Ted(Ted) & Pet(Ted)) -> Pet(Ted))", "all x.(Pet(x) -> Ted(x))", "exists x.(Pet(x) & Ted(x))", "all x.((Ted(x) & Pet(x)) -> Dog(x))"]}
{"id": "folio_validation_185", "nl": "Ted is a pet and a cow.", "fol": "(IsPet(Ted) & IsCow(Ted))", "prediction": ["(Pet(Ted) & Cow(Ted))", "all x.(Ted(x) -> (Pet(x) & Cow(x)))", "exists x.(Ted(x) & Pet(x) & Cow(x))", "all x y.((Ted(x) & Cow(y)) -> (Pet(x) & Cow(x)))", "((Ted(Ted) & Pet(Ted)) & Cow(Ted))", "all x.(Ted(x) -> (Pet(x) & Cow(x)))", "(all x.(Ted(x) -> Pet(x)) & all y.(Ted(y) -> Cow(y)))", "(all x.(Ted(x) -> Pet(x)) & all y.(Cow(y) -> Cow(y)))", "all x y.((Ted(x) & Cow(y)) -> (Pet(x) & Cow(y)))", "((Ted(Ted) & Pet(Ted)) | Cow(Ted)))", "(all x.(Ted(x) -> Pet(x)) & all y.(Cow(y) -> Cow(x)))", "(Pet(Ted) | Cow(Ted)))", "(all x.(Ted(x) -> Pet(x)) & (Ted(x) -> Cow(x)))", "(all x.(Ted(x) -> Pet(x)) & all y.(Ted(y) -> Cow(y))))", "all x.((Ted(x) & Pet(x)) -> Cow(x))", "(all x.(Ted(x) -> Pet(x)) & all y.(Cow(y) -> Cow(y)))"]}
{"id": "folio_validation_186", "nl": "If Ted is a cow, then Ted is not a pet.", "fol": "(IsCow(Ted) -> -IsPet(Ted))", "prediction": ["all x.((Ted(x) & Cow(x)) -> -Pet(x))", "all x.((Cow(x) & Ted(x)) -> -Pet(x))", "all x.(Cow(x) -> -Pet(x))", "all x.((Cow(x) & Ted(x)) -> -Pet(x))", "all x.(Cow(x) -> -Pet(x))", "all x.(((Ted(x) & Cow(x)) -> -Pet(x))", "all x.((Ted(x) & Cow(x)) -> -TedPet(x))", "all x.((Teddy(x) & Cow(x)) -> -Pet(x))", "all x.((Ted(x) & Cow(x)) -> -Pet(ted))", "all x.((Tree(x) & Cow(x)) -> -Pet(x))", "(all x.((Ted(x) & Cow(x)) -> -Pet(x)))", "all x.((Cow(x) & TedIs(x)) -> -Pet(x))", "all x.((Valley(x) & Cow(x)) -> -Pet(x))", "all x.((Chow(x) & Ted(x)) -> -Pet(x))", "all x.((Ted(x) & Cow(x)) -> -Pet(x,Ted))", "all x.((Ted(x) & Cow(x)) -> -Ted(x))"]}
{"id": "folio_validation_187", "nl": "Badults is a British Sitcom series, starring members of Pappy's.", "fol": "exists x.(MemberOfPappys(x,Pappys) & IsBritishSitcom(Badults) & IsSeries(Badults) & StarsIn(Badults,x))", "prediction": ["all x.(Badults(x) -> (BritishSitcomSeries(x) & StarsPappys(x)))", "all x.(Badults(x) -> (BritishSitcomSeries(x) & StarsMembersOfPappys(x)))", "all x.(Badults(x) -> (BritishSitcomSeries(x) & StarsPappys(x)))", "all x.(Badults(x) -> (BritishSitcomSeries(x) & StarsPappy(x)))", "all x.(Badults(x) -> (SitcomSeries(x) & StarsPappys(x)))", "all x.((Badults(x) & BritishSitcomSeries(x)) -> StarsPappys(x))", "all x.(Badults(x) -> (BritishSitcomSeries(x) & StarsMembersOfPappys(x)))", "all x.(Badults(x) -> (BritishSitcomSeries(x) & StarsMembersOfPappy's(x)))", "all x.((Badults(x) & BritishSitcomSeries(x) & StarsPappys(x)) -> BritishSitcomSeries(x))", "All x.(Badults(x) -> (BritishSitcomSeries(x) & StarsPappys(x)))", "all x y.((Badults(x) & BritishSitcomSeries(y)) -> StarsPappys(x,y))", "all x.(Badults(x) -> (BritishSitcom(x) & StarsPappys(x)))", "all x.((Badults(x) & BritishSitcomSeries(x) & StarsPappys(x)) -> StarsPappys(x))", "all x.(Badults(x) -> (SitcomSeries(x) & StarsPappys(x)))", "all x.(Badults(x) -> (SitcomSeries(x) & StarsPappy(x)))", "all x.((Badults(x) & BritishSitcomSeries(x) & StarsMembersOfPappys(x)) -> Stars(x))"]}
{"id": "folio_validation_188", "nl": "Badults piloted in July 2013 on BBC Three.", "fol": "(PilotedInMonthYear(Badults,July2013) & AiredOnChannel(Badults,Bbcthree))", "prediction": ["all x y.((Badult(x) & BBCThree(y)) -> PilotedInJuly2013(x,y))", "all x.(Badult(x) -> PilotedOnBroadcastThree(x))", "all x.(Badult(x) -> PilotedInJuly2013(x))", "all x.((Badult(x) & PilotedInJuly2013(x)) -> BBCThree(x))", "all x y.((Badult(x) & BBCThree(y)) -> PilotedOn(x,y))", "all x y z.((Badult(x) & BBCThree(y) & July2013(z)) -> PilotedOn(x,y,z))", "all x y.((Badult(x) & BBCThree(y)) -> PilotedInJuly(x,y))", "all x.(Badult(x) -> PilotedInJuly2013OnBroadcastThree(x))", "all x y.((Badult(x) & BBCThree(y)) -> PilotedIn(x,y))", "all x.((Badult(x) & PilotedOnBroadcastThree(x)) -> PilotedOnBroadcastThree(x))", "all x.((Badult(x) & PilotedOnBroadcastThree(x)) -> PilotedInJuly2013(x))", "all x y z.((Badult(x) & BBCThree(y) & July(z)) -> PilotedOn(x,y,z))", "all x y.((Badult(x) & BBC(y)) -> PilotedInJuly2013(x,y))", "all x.(Badult(x) -> PilotedOnBroadcastThree(x,July2013))", "all x y z.((Badult(x) & BBCThree(y) & July2013(z)) -> Piloted(x,y,z))", "all x y z.((Badult(x) & BBC(y) & BBC(z)) -> PilotedInJuly2013(x,y,z))"]}
{"id": "folio_validation_189", "nl": "The Working title \"The Secret Dude Society\" was used for Badults.", "fol": "HasWorkingTitle(Thesecretdudesociety,Badults)", "prediction": ["all x.((WorkingTitle(x) & SecretDude(x)) -> UsedForBadults(x))", "all x.((WorkingTitle(x) & SecretDudeSociety(x)) -> UsedForBadults(x))", "All x.((WorkingTitle(x) & SecretDude(x)) -> UsedForBadults(x))", "all x.((WorkingTitle(x) & SecretDudeScientific(x)) -> UsedForBadults(x))", "all x.((WorkingTitle(x) & SecretDudeSatellite(x)) -> UsedForBadults(x))", "All x.((WorkingTitle(x) & SecretDudeSociety(x)) -> UsedForBadults(x))", "All x.((WorkingTitle(x) & SecretDudeScientific(x)) -> UsedForBadults(x))", "all x.((WorkingTitle(x) & SecretDudeSsociety(x)) -> UsedForBadults(x))", "all x.((WorkingTitle(x) & SecretDudeSky(x)) -> UsedForBadults(x))", "all x y.((WorkingTitle(x) & SecretDude(y)) -> UsedForBadults(x,y))", "all x.((WorkingTitle(x) & SecretDudeShow(x)) -> UsedForBadults(x))", "All x.((WorkingTitle(x) & SecretDudeSatellite(x)) -> UsedForBadults(x))", "All x y.((WorkingTitle(x) & SecretDude(y)) -> UsedForBadults(x,y))", "all x y.((WorkingTitle(x) & Badult(y)) -> UsedFor(x,y))", "all x y.((WorkingTitle(x) & SecretDude(y)) -> UsedForBadults(x))", "All x y.((WorkingTitle(x) & SecretDude(y)) -> UsedForBadults(x))"]}
{"id": "folio_validation_190", "nl": "Andrew Collins was the script editor for Badults", "fol": "HasScriptEditor(Andrewcollins,Badults)", "prediction": ["Andrew Collins was the scripteditor for Badults.com.", "(ScriptEditor(AndrewCollins) & Badults(AndrewCollins))", "Andrew Collins was the scripteditor for Badults.", "Andrew Collins was the scripteditor for Badults(x) & ScriptEditorForBadults(x))", "(ScriptEditor(AndrewCollins) & Badults(Andrew Collins))", "Andrew Collins was scripteditor for Badults.com.", "(Scientist(AndrewCollins) & Badults(AndrewCollins))", "(ScriptEditor(AndrewCollins) | Badults(AndrewCollins)))", "(ScriptEditor(AndrewCollins) & Badults(AndreasCollins))", "(Scientist(AndrewCollins) & Badults(Andrew Collins))", "AndrewCollins (AndrewCollins) was the scripteditor for Badults(x))", "Andrew Collins was scripteditor for Badults(x) & ScriptEditorForBadults(x))", "(ScriptEditor(AndrewCollins) & Badults(Andrew))", "Andrew Collins was the scripteditor for Badults(AndrewCollins)", "AndrewCollins (AndrewCollins) was the scripteditor for Badults(AndrewCollins))", "(ScriptEditor(AndrewCollins) & Badults(Andrew(Andrew))"]}
{"id": "folio_validation_191", "nl": "Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\".", "fol": "exists x.(HasScriptEditor(Andrewcollins,x) & IsSeries(x) & HasWorkingTitle(Thesecretdudesociety,x))", "prediction": ["all x y z.((AndrewCollins(x) & Series(y) & WorkingTitle(z)) -> (ScriptEditor(x,y) & SecretDudeScientific(y)))", "all x y z.((AndrewCollins(x) & ScriptEditor(y) & Series(z) & WorkingTitle(z)) -> SecretDudeSatellite(x,y,z))", "all x y.((AndrewCollins(x) & Series(y) & WorkingTitleSecretDudeScientific(y)) -> Writer(x,y))", "all x y z.((AndrewCollins(x) & Series(y) & SecretDude(z)) -> (ScriptEditor(x,y) & WorkingTitle(y,z)))", "all x y z.((AndrewCollins(x) & ScriptEditor(y) & Series(z) & WorkingTitle(z)) -> SecretDudeSatellite(x,z))", "all x y.((AndrewCollins(x) & Series(y)) -> (ScriptEditor(x,y) & WorkingTitle(y) & SecretDudeScientific(y)))", "all x y.((AndrewCollins(x) & Series(y)) -> (ScriptEditor(x,y) & WorkingTitleSecretDudeScientific(y)))", "all x y z.((AndrewCollins(x) & ScriptEditor(y) & Series(z) & WorkingTitle(z)) -> SecretDudeScientific(x,y,z))", "all x y z.((AndrewCollins(x) & Series(y) & WorkingTitle(z)) -> (ScriptEditor(x,y) & SecretDudeShow(y)))", "all x y.((AndrewCollins(x) & Series(y) & WorkingTitle(x,y)) -> ScriptEditor(x,y))", "all x y z.((AndrewCollins(x) & Series(y) & WorkingTitle(z)) -> (ScriptEditor(x,y) & SecretDudeScientist(y)))", "all x y z.((AndrewCollins(x) & Series(y) & WorkingTitle(z)) -> (ScriptEditor(x,y) & SecretDudeSky(y)))", "all x y z.((AndrewCollins(x) & Series(y) & WorkingTitle(z)) -> (ScriptEditor(x,y,z) & SecretDudeScientific(y)))", "all x y z.((AndrewCollins(x) & Series(y) & WorkingTitle(z)) -> (ScriptEditor(x,y) & SecretDudeSatellite(y)))", "all x y z.((AndrewCollins(x) & Series(y) & WorkingTitle(z) & SecretDudeScientific(y)) -> Writer(x,y,z))", "all x y z.((AndrewCollins(x) & ScriptEditor(y) & Series(z) & WorkingTitle(z)) -> SecretDudeScientific(x,z))"]}
{"id": "folio_validation_192", "nl": "No members of Pappy's have starred for a show piloting on BBC Two or BBC Three.", "fol": "all x y.((MemberOfPappys(x,Pappys) & StarsIn(y,x)) -> -(AiredOnChannel(y,Bbctwo) | AiredOnChannel(y,Bbcthree)))", "prediction": ["all x.((MemberOfPappy's(x) & (BroadcastTwo(x) | BBCThree(x))) -> StartedFor(x,BroadcastTwo(x))", "-exists x.(Pappy's(x) & (StartedOnBroadcastTwo(x) | StartedOnBroadcastThree(x))))", "-exists x.(Pappys(x) & (StartedOnBroadcastTwo(x) | StartedOnBroadcastThree(x))))", "-exists x.(Pappys(x) & (StartedOnBroadcastTwo(x) | StartedOnBroadcastThree(x)))", "-exists x.(Member(x) & Pappy's(x) & (StartedOnBroadcastTwo(x) | StartedOnBroadcastThree(x))))", "-exists x.(MemberOfPappys(x) & (StartedOnBroadcastTwo(x) | StartedOnBroadcastThree(x))))", "-exists x.(MemberOfPappy's(x) & (StartedOnBroadcastTwo(x) | StartedOnBroadcastThree(x))))", "-exists x.(PappysMember(x) & (StartedOnBroadcastTwo(x) | StartedOnBroadcastThree(x))))", "-exists x.(MemberOfPappys(x) & (StartedOnBroadcastTwo(x) | StartedOnBroadcastThree(x)))", "-exists x.(PappySisters(x) & (StartedOnBroadcastTwo(x) | StartedOnBroadcastThree(x))))", "-exists x.(PappySisters(x) & (StartedOnBroadcastTwo(x) | StartedOnBroadcastThree(x)))", "-exists x.(MemberOfPappy's(x) & (StartedOnBroadcastTwo(x) | StartedOnBroadcastThree(x)))", "-exists x.(Pappy's(x) & (StartedOnBroadcastTwo(x) | StartedOnBroadcastThree(x)))", "all x.((MemberOfPappy's(x) & (BroadcastTwo(x) | BBCThree(x))) -> StartedForShow(x))", "-exists x.(MemberOfPappys(x) & StartedForShow(x,BroadcastTwo) & -StartedForShow(x,BroadcastThree))", "all x.((MemberOfPappy's(x) & (BroadcastTwo(x) | BBCThree(x))) -> Started(x))"]}
{"id": "folio_validation_193", "nl": "All growth companies' stocks are volatile.", "fol": "all x.(StocksOfGrowthCompanies(x) -> StockPriceIsVolatile(x))", "prediction": ["all x.(GrowthCompany(x) -> VolatileStock(x))", "all x.(GrowthCompany(x) -> VolatileStocks(x))", "all x.(GrowthCompany(x) -> Volatile(x))", "all x.(GrowthCompany(x) -> VolatilStock(x))", "all x y.((GrowthCompany(x) & GrowthCompany(y)) -> VolatileStock(x,y))", "all x.(GrowthCompany(x) -> VolatileShares(x))", "all x.((GrowthCompany(x) & GrowthCompany(x)) -> VolatileStock(x))", "all x.((GrowthCompany(x) & Stock(x)) -> Volatile(x))", "all x y.((GrowthCompany(x) & Stock(y)) -> Volatile(y))", "all x.(GrowthCompany(x) -> VolatileShare(x))", "all x y.((GrowthCompany(x) & Stock(y)) -> Volatile(x,y))", "all x.((GrowthCompany(x) & Stock(y)) -> Volatile(y))", "all x.((GrowthCompany(x) & Stock(y)) -> Volatile(x))", "all x.((GrowthCompany(x) & GrowthCompany(x)) -> VolatileStocks(x))", "all x y.((GrowthCompany(x) & GrowthCompany(y)) -> VolatileStocks(x,y))", "all x y.((GrowthCompany(x) & Stock(y)) -> Volatile(x))"]}
{"id": "folio_validation_194", "nl": "If the stock price is volatile, then it is not suitable for a retirement fund.", "fol": "all x.(StockPriceIsVolatile(x) -> -SuitableForRetirementFund(x))", "prediction": ["all x.((StockPrice(x) & Volatile(x)) -> -SuitableForRetirementFund(x))", "all x.(VolatileStockPrice(x) -> -SuitableForRetirementFund(x))", "all x.((StockPrice(x) & Volatil(x)) -> -SuitableForRetirementFund(x))", "all x.((StockPriceVolatile(x) & -SuitableForRetirementFund(x)) -> -SuitableForRetirementFund(x))", "all x.((StockPrice(x) & Volatile(x)) -> -SuitableForRetirement(x))", "all x.((StockPrice(x) & Volatility(x)) -> -SuitableForRetirementFund(x))", "all x.((SharePrice(x) & Volatile(x)) -> -SuitableForRetirementFund(x))", "all x.((StockPriceVolatile(x)) -> -SuitableForRetirementFund(x))", "all x.((StockPriceVolatil(x) & -SuitableForRetirementFund(x)) -> -SuitableForRetirementFund(x))", "all x.((StockPriceVast(x) & -SuitableForRetirementFund(x)) -> -SuitableForRetirementFund(x))", "all x.(Volatile(x) -> -SuitableForRetirementFund(x))", "all x.((StoragePrice(x) & Volatile(x)) -> -SuitableForRetirementFund(x))", "all x y.((StockPrice(x) & Volatile(x)) -> -SuitableForRetirementFund(y))", "all x.((StockPrice(x) & Volatile(x)) -> -SuitableForretirementFund(x))", "all x.((StockPrice(x) & Volatile(x)) -> -SuitableForRetirnmentFund(x))", "all x.((stockPrice(x) & Volatile(x)) -> -SuitableForRetirementFund(x))"]}
{"id": "folio_validation_195", "nl": "Some companies' stocks are growth companies' stocks.", "fol": "exists x.(StocksOfCompanies(x) & StocksOfGrowthCompanies(x))", "prediction": ["exists x.(Company(x) & GrowthCompany(x))", "exists x.(CompanyStock(x) & GrowthCompanyStock(x))", "exists x.(CompanyStock(x) & GrowthStock(x))", "exists x.(Company(x) & Stock(x) & GrowthCompany(x))", "exists x y.(Company(x) & Company(y) & Stock(x,y) & GrowthCompany(y))", "exists x y.(Company(x) & Company(y) & Stock(x,y) & GrowthCompany(x,y))", "exists x y.(Company(x) & Stock(y) & GrowthCompany(x,y))", "exists x.(Company(x) & CompanyStock(x) & GrowthCompanyStock(x))", "exists x.(Company(x) & GrowthStock(x))", "exists x y.(Company(x) & Company(y) & Stock(x,y) & GrowthCompany(x))", "exists x y.(Company(x) & Company(y) & Stock(x,y))", "exists x.(Company(x) & Stock(x,GrowthCompany))", "exists x.(Company(x) & GrowthCompanyStock(x))", "exists x y.(Company(x) & Company(y) & Stock(x) & GrowthCompany(y))", "exists x y.(Company(x) & Company(y) & Stock(z) & GrowthCompany(z))", "exists x y.(Company(x) & Stock(y) & GrowthCompany(y))"]}
{"id": "folio_validation_196", "nl": "All mature companies' stocks are suitable for a retirement fund.", "fol": "all x.(StocksOfMatureCompanies(x) -> SuitableForRetirementFund(x))", "prediction": ["all x.(MatureCompanyStock(x) -> SuitableForRetirementFund(x))", "all x.(MatureCompanyStocks(x) -> SuitableForRetirementFund(x))", "all x.((MatureCompany(x) & Stock(x)) -> SuitableForRetirementFund(x))", "all x.(MatureCompany(x) -> SuitableForRetirementFund(x))", "all x.((MatureCompany(x) & Stock(y)) -> SuitableForRetirementFund(x,y))", "all x.((MatureCompany(x) & Stock(x)) -> SuitableForRetirement(x))", "all x y.((MatureCompany(x) & Stock(y)) -> SuitableForRetirementFund(x,y))", "all x.(MaturityCompanyStock(x) -> SuitableForRetirementFund(x))", "all x.((MatureCompany(x) & Stocks(x)) -> SuitableForRetirementFund(x))", "all x.(MatureCompanyStock(x) -> SuitableForRetirement(x))", "all x.((MatureCompanyStocks(x) & SuitableForRetirementFund(x)) -> SuitableForRetirementFund(x))", "all x.((MatureCompanyStock(x) & SuitableForRetirementFund(x)) -> SuitableForRetirementFund(x))", "all x.(MatureCompanyShares(x) -> SuitableForRetirementFund(x))", "all x.((MatureCompanyStocks(x) & SuitableForRetirementFund(x)) -> SuitableForRetirement(x))", "all x.((MatureCompanyStock(x) & SuitableForRetirementFund(x)) -> SuitableForRetirement(x))", "all x.(MaturityCompanyStocks(x) -> SuitableForRetirementFund(x))"]}
{"id": "folio_validation_197", "nl": "KO is a mature company's stock.", "fol": "StocksOfMatureCompanies(KO)", "prediction": ["all x.(Kos(x) -> MatureCompanyStock(x))", "all x.((Ko) & MatureCompanyStock(x)) -> Stock(x))", "all x.(Koyo(x) -> MatureCompanyStock(x))", "all x.(Koho(x) -> MatureCompanyStock(x))", "all x.((Kob(x) & MatureCompanyStock(x)) -> Stock(x))", "all x.(Kob(x) -> MatureCompanyStock(x))", "all x.((Koo(x) & MatureCompanyStock(x)) -> Stock(x))", "all x.((Kos(x) & MatureCompanyStock(x)) -> Stock(x))", "all x.((Ko) & MatureCompany(x)) -> Stock(x))", "all x.(Korea(x) -> MatureCompanyStock(x))", "all x.(Ko(x) -> MatureCompanyStock(x))", "all x.(Kobo(x) -> MatureCompanyStock(x))", "all x.(Koyo(x) -> (MatureCompanyStock(x) & -MatureCompanyStock(x)))", "all x.((KO) & MatureCompanyStock(x)) -> Stock(x))", "all x.(Koyo(x) -> (MatureCompanyStock(x) & Stock(x)))", "all x.(Koyo(x) -> (MatureCompanyStock(x) & MatureCompanyStock(x)))"]}
{"id": "folio_validation_198", "nl": "KO is a company stock.", "fol": "StocksOfCompanies(KO)", "prediction": ["all x.(KO(x) -> CompanyStock(x))", "all x.(Kos(x) -> CompanyStock(x))", "all x.(Kob(x) -> CompanyStock(x))", "all x.(Kobo(x) -> CompanyStock(x))", "all x.(Korea(x) -> CompanyStock(x))", "all x.(Ko(x) -> CompanyStock(x))", "all x.(Koyo(x) -> CompanyStock(x))", "all x.(Ko.(x) -> CompanyStock(x))", "all x.(Koho(x) -> CompanyStock(x))", "all x.(Kos(x) -> CompanyStock(x))", "all x.(KO) -> CompanyStock(x))", "all x.(KO(x) -> CompanyStock(x))", "all x.(Koya(x) -> CompanyStock(x))", "all x.(Ko (CompanyStock) -> CompanyStock(x))", "all x.(Ko (CompanyStock) -> Stock(x))", "all x.(KO,CompanyStock(x) -> Stock(x))"]}
{"id": "folio_validation_199", "nl": "KO is a company stock and a growth company's stock.", "fol": "(StocksOfCompanies(KO) & StocksOfGrowthCompanies(KO))", "prediction": ["all x.(KO(x) -> (CompanyStock(x) & GrowthStock(x)))", "all x.(Korea(x) -> (CompanyStock(x) & GrowthStock(x)))", "all x.(Kos(x) -> (CompanyStock(x) & GrowthStock(x)))", "all x.(Ko(x) -> (CompanyStock(x) & GrowthStock(x)))", "all x.(Koyo(x) -> (CompanyStock(x) & GrowthStock(x)))", "all x.(Koho(x) -> (CompanyStock(x) & GrowthStock(x)))", "all x.(KO(x) -> (CompanyStock(x) & GrowthCompanyStock(x)))", "all x.(Kobo(x) -> (CompanyStock(x) & GrowthStock(x)))", "all x.(Koo(x) -> (CompanyStock(x) & GrowthStock(x)))", "all x.(Kosher(x) -> (CompanyStock(x) & GrowthStock(x)))", "all x.(KO(x) -> (CompanyShare(x) & GrowthShare(x)))", "all x.(Ko (x) -> (CompanyStock(x) & GrowthStock(x)))", "all x.(KO(x) -> (CompanyStock(x) & GrowthStock(x)))", "all x.(Kob(x) -> (CompanyStock(x) & GrowthStock(x)))", "all x.(Ko(x) -> (CompanyStock(x) & GrowthCompanyStock(x)))", "all x.(KO) -> (CompanyStock(x) & GrowthStock(x)))"]}
{"id": "folio_validation_200", "nl": "If KO is a growth company's stock or if its price is volatile, then KO is neither a company's stock nor is its price volatile.", "fol": "(((StocksOfGrowthCompanies(KO) | StockPriceIsVolatile(KO)) -> -StocksOfCompanies(KO)) | -StockPriceIsVolatile(KO))", "prediction": ["all x.((Korea(x) & (GrowthCompanyStock(x) | VolatilePrice(x))) -> (-GrowthCompanyStock(x) & -VolatilePrice(x)))", "all x.((Korea(x) & GrowthCompanyStock(x)) | (PriceVolatile(x) & -CompanyStock(x) & PriceVolatile(x))))", "all x.((Korea(x) & (GrowthCompanyStock(x) | VolatilePrice(x))) -> -(CompanyStock(x) | VolatilePrice(x))))", "all x.((Korea(x) & (GrowthCompanyStock(x) | VolatilePrice(x))) -> -(GrowthCompanyStock(x) | VolatilePrice(x))))", "all x.((Korea(x) & (GrowthCompanyStock(x) | PriceVolatile(x))) -> (-GrowthCompanyStock(x) & -PriceVolatile(x)))", "all x.((Korea(x) & GrowthCompanyStock(x)) | (PriceVolatile(x) & -CompanyStock(x))))", "all x.((Korea(x) & (GrowthCompanyStock(x) | VolatilePrice(x))) -> -(GrowthCompanyStock(x) & VolatilePrice(x)))", "all x.((Korea(x) & (GrowthCompanyStock(x) | VolatilePrice(x))) -> -(Korea(x) & GrowthCompanyStock(x) & VolatilePrice(x))))", "all x.((KO(x) & (GrowthCompanyStock(x) | VolatilePrice(x))) -> -(CompanyStock(x) | VolatilePrice(x))))", "all x.((Korea(x) & GrowthCompanyStock(x)) | PriceVolatile(x))", "all x.((Korea(x) & (GrowthCompanyStock(x) | VolatilePrice(x))) -> -CompanyStock(x) & -VolatilePrice(x)))", "all x.((Korea(x) & (GrowthCompanyStock(x) | VolatilePrice(x))) -> (-GrowthCompanyStock(x) | VolatilePrice(x)))", "all x.((Korea(x) & (GrowthCompanyStock(x) | VolatilePrice(x))) -> (-KoreaStock(x) & -VolatilePrice(x)))", "all x.((Korea(x) & (GrowthCompanyStock(x) | VolatilePrice(x))) -> -(GrowthCompanyStock(x) & VolatilePrice(x))))", "all x.((Korea(x) & GrowthCompanyStock(x)) | PriceVolatile(x)) -> -(Korea(x) & GrowthCompanyStock(x) & PriceVolatile(x)))", "all x.((Korea(x) & (GrowthCompanyStock(x) | VolatilePrice(x))) -> -(Korea(x) & GrowthCompanyStock(x)) & -VolatilePrice(x)))"]}
{"id": "folio_validation_201", "nl": "All vehicle registration plates in Istanbul begin with the number 34.", "fol": "all x.(VehicleRegistrationPlate(x,Istanbul) -> BeginsWithNumber(x,Number34))", "prediction": ["all x.((VehicleRegistrationPlate(x) & InIstanbul(x)) -> Number34(x))", "all x.((VehicleRegistrationPlate(x) & InIstanbul(x)) -> StartsWithNumber34(x))", "all x.((VehicleRegistrationPlate(x) & Istanbul(x)) -> Number34(x))", "all x.(VehicleRegistrationPlate(x) -> StartsWithNumber34(x))", "all x y.((VehicleRegistrationPlate(x) & Istanbul(y)) -> StartsWithNumber34(x,y))", "all x.((VehicleRegistrationPlate(x) & InIstanbul(x)) -> StartsWith(x,34))", "all x.(VehicleRegistrationPlate(x) -> Number34(x))", "all x y.((VehicleRegistrationPlate(x) & Istanbul(y)) -> Number34(x,y))", "all x.((VehicleRegistrationPlate(x) & Istanbul(x)) -> StartsWithNumber34(x))", "all x.((VehicleRegisterPlate(x) & InIstanbul(x)) -> Number34(x))", "all x.((VehicleRegistrationPlate(x) & LocatedInIstanbul(x)) -> Number34(x))", "all x.(VehicleRegistrationPlate(x) -> InIstanbul(x))", "all x.((VehicleRegistrationPlate(x) & InIstanbul(x)) -> StartsWithNo.34(x))", "all x.((VehicleRegistrationPlate(x) & InIstanbul(x,34)) -> StartsWith(x,34))", "all x.((VehicleRegisterPlate(x) & InIstanbul(x)) -> StartsWithNumber34(x))", "all x y.((VehicleRegistrationPlate(x) & Istanbul(y)) -> StartsWith(x,34))"]}
{"id": "folio_validation_202", "nl": "Plates that do not begin with the number 34 are not from Istanbul. ", "fol": "all x.(-BeginsWithNumber(x,Number34) -> -IsFromIstanbul(x))", "prediction": ["all x.((Plate(x) & -EndsWith34(x)) -> -Istanbul(x))", "all x.((Plate(x) & -EndsWith34(x)) -> -FromIstanbul(x))", "all x.((Plate(x) & -EndsWithNumber34(x)) -> -Istanbul(x))", "all x.((Plate(x) & -EndsWithNumber34(x)) -> -FromIstanbul(x))", "all x.((Plate(x) & -EndsWith(x,34)) -> -Istanbul(x))", "all x.((Plate(x) & -EndsWith34(x)) -> -Instanbul(x))", "all x.((Plate(x) & -EndsWithProng(x,34)) -> -Istanbul(x))", "all x.((Plate(x) & -StartsWith34(x)) -> -Istanbul(x))", "all x.((Plate(x) & -BeginsWith34(x)) -> -Istanbul(x))", "all x.((Plate(x) & -ProvidesNumber34(x)) -> -Istanbul(x))", "all x.((Plate(x) & -StartWith34(x)) -> -Istanbul(x))", "all x.((Plate(x) & -EndsWithProv.(x,34)) -> -Istanbul(x))", "all x.((Plate(x) & -BeginsWithNumber34(x)) -> -Istanbul(x))", "all x.((Plate(x) & -EndedWith34(x)) -> -Istanbul(x))", "all x.((Plate(x) & -EndsWith(x,34)) -> -FromIstanbul(x))", "all x.((Plate(x) & -EndeWith34(x)) -> -Istanbul(x))"]}
{"id": "folio_validation_203", "nl": "Joe's vehicle registration plate is from Istanbul. ", "fol": "VehicleRegistrationPlate(Joe,Istanbul)", "prediction": ["(VehicleRegistrationPlate(Joe) & FromIstanbul(Joe))", "all x.(Joe'sVehicleRegistrationPlate(x) -> FromIstanbul(x))", "all x.((Joe(x) & VehicleRegistrationPlate(x)) -> FromIstanbul(x))", "all x y.((Joe(x) & VehicleRegistrationPlate(y)) -> FromIstanbul(x,y))", "(VehicleRegistrationPlate(Joe) & From(Joe,Istanbul))", "all x.(Joe'sVehicleRegistrationPlate(x) -> Istanbul(x))", "all x.((Joe(x) & VehicleRegistrationPlate(x)) -> Istanbul(x))", "all x y.((Joe(x) & VehicleRegistrationPlate(y)) -> FromIstanbul(x))", "all x y.((Joe(x) & VehicleRegistrationPlate(y)) -> From(x,y))", "all x.((Joe'sVehicleRegistrationPlate(x) & FromIstanbul(x)) -> Vehicle(x))", "all x.((Joe(x) & VehicleRegistrationPlate(x,Istanbul)) -> Has(x,Istanbul))", "all x.((VehicleRegistrationPlate(x) & Joe(x)) -> FromIstanbul(x))", "all x y.((Joe(x) & VehicleRegistrationPlate(y) & From(x,y)) -> From(x,y))", "(VehicleRegisterPlate(Joe) & FromIstanbul(Joe))", "all x.(Joe(x) -> VehicleRegistrationPlateFromIstanbul(x))", "all x.((Joe'sVehicleRegistrationPlate(x) & FromIstanbul(x)) -> Has(x,y))"]}
{"id": "folio_validation_204", "nl": "Tom's license plate begins with the number 35. ", "fol": "BeginsWithNumber(Tom,Number35)", "prediction": ["all x.((Tom(x) & LicensePlate(x,35)) -> StartsWith(x,35))", "all x.((Tom(x) & LicensePlate(x)) -> Number35(x))", "all x.((Tom'sLicensePlate(x) & Number35(x)) -> StartsWith(x,35))", "all x y z.((Tom(x) & LicensePlate(y) & Number(z)) -> StartsWith(x,y,z))", "all x y.((Tom(x) & LicensePlate(y)) -> Number35(y))", "all x y.((Tom(x) & LicensePlate(y)) -> Number35(x,y))", "all x.((TomsLicensePlate(x) & Number35(x)) -> StartsWith(x,35))", "all x y.((Tom(x) & LicensePlate(y) & Number35(y)) -> StartsWith(x,y))", "all x y.((Tom(x) & LicensePlate(y)) -> StartsWith(x,y))", "all x y.((Tom(x) & LicensePlate(y)) -> StartsWithNumber35(x,y))", "all x.((Tom(x) & Number35(x)) -> LicensePlate(x))", "all x.(TomsLicensePlate(x) -> Number35(x))", "all x y.((Tom(x) & LicensePlate(y)) -> StartsWith(x,35))", "all x.((Tom'sLicensePlate(x) & Number35(x)) -> LicensePlate(x))", "all x.(TomLicensePlate(x) -> Number35(x))", "all x.((LicensePlate(x) & Tom(x)) -> Number35(x))"]}
{"id": "folio_validation_205", "nl": "[BG] If a license plate begins with the number 35, then it does not begin with the number 34.", "fol": "all x.(BeginsWithNumber(x,Number35) -> -BeginsWithNumber(x,Number34))", "prediction": ["all x.((LicensePlate(x) & Number35(x)) -> -Number34(x))", "all x.((LicensePlate(x) & StartsWithNumber35(x)) -> -EndsWithNumber34(x))", "all x.((LicensePlate(x) & StartsWith(x,35)) -> -EndsWith(x,34))", "all x.((LicensePlate(x) & EndsWithNumber35(x)) -> -EndsWithNumber34(x))", "all x.((LicensePlate(x) & EndsWith(x,35)) -> -EndsWith(x,34))", "all x.((LicensePlate(x) & Number(x,35)) -> -Number(x,34))", "all x.((LicensePlate(x) & StartsWithNumber35(x)) -> -EnginsWithNumber34(x))", "all x.((LicensePlate(x) & BeginningWithNumber35(x)) -> -EndsWithNumber34(x))", "all x.((LicensePlate(x) & StartsWith(x,35)) -> -EnginsWith(x,34))", "all x.((LicensePlate(x) & StartsWith(x,35)) -> -StartsWith(x,34))", "all x.((LicensePlate(x) & BeginsWith(x,35)) -> -BeginsWith(x,34))", "all x.((LicensePlate(x) & Number35(x)) -> -LicensePlate(x))", "all x.((LicensePlate(x) & BeginsWith(x,35)) -> -BeginsWith(x,34))", "all x.((LicensePlate(x) & StartsWith(x,35)) -> -EndesWith(x,34))", "all x.((LicensePlate(x) & Number35(x)) -> -Numbers34(x))", "all x.((LicensePlate(x) & Number35(x)) -> -LicensePlate(x,34))"]}
{"id": "folio_validation_206", "nl": "Joe's license plate begins with the number 34.", "fol": "BeginsWithNumber(Joe,Number34)", "prediction": ["all x.(Joe'sLicensePlate(x) -> Number34(x))", "all x.((Joe(x) & LicensePlate(x,34)) -> StartsWith(x,34))", "all x.(Joe(x) -> LicensePlate(x,34))", "all x.((Joe'sLicensePlate(x) & Number34(x)) -> StartsWith(x,34))", "all x y.((Joe(x) & LicensePlate(y)) -> Number34(y))", "all x y.((Joe(x) & LicensePlate(y)) -> StartsWith(x,y))", "all x.(Joe'sLicensePlate(x) -> StartsWithNumber34(x))", "all x y z.((Joe(x) & LicensePlate(y) & Number(z)) -> StartsWith(x,y,z))", "all x.((Joe'sLicensePlate(x) & Number34(x)) -> LicensePlate(x))", "all x y.((Joe(x) & LicensePlate(y) & Number34(y)) -> StartsWith(x,y))", "all x.(Joe'sLicensePlate(x) -> StartsWith(x,34))", "all x y.((Joe(x) & LicensePlate(y)) -> Number34(x,y))", "all x y.((Joe(x) & LicensePlate(y)) -> StartsWith(x,34))", "all x.((Joe(x) & LicensePlate(x)) -> Number34(x))", "all x.(Joe'sLicensePlate(x,34) -> StartsWith(x,34))", "all x.(JoesLicensePlate(x) -> Number34(x))"]}
{"id": "folio_validation_207", "nl": "Tom's license plate is from Istanbul.", "fol": "VehicleRegistrationPlate(Tom,Istanbul)", "prediction": ["Tom's license plate is from Istanbul.", "(LicensePlate(Tom) & FromIstanbul(Tom))", "Tom's LicensePlateFrom(Tom,Istanbul)", "all x y.((Tom(x) & LicensePlate(y)) -> FromIstanbul(x,y))", "(LicensePlate(Tom) & From(Tom,Istanbul))", "all x y.((Tom(x) & LicensePlate(y)) -> FromIstanbul(x))", "all x y.((Tom(x) & LicensePlate(y)) -> From(x,y))", "TomsLicensePlateFrom(Tom,Istanbul)", "all x y.((Tom(x) & LicensePlate(y)) -> From(x,Istanbul))", "TomsLicensePlateFrom(Tom) -> IstanbulLicensePlate(Tom))", "all x y.((Tom(x) & LicensePlate(y)) -> FromInstanbul(x,y))", "all x y.((Tom(x) & LicensePlate(y)) -> Istanbul(x))", "Tom's LicensePlateFromIstanbul(Tom)", "all x y.((Tom(x) & LicensePlate(y)) -> Istanbul(y))", "Tom's LicensePlateFrom(Tom) -> FromIstanbul(Tom))", "(LicensePlateFrom(Tom) & From(Tom,Istanbul))"]}
{"id": "folio_validation_208", "nl": "If people work in student jobs on campus, then they need to earn money to help pay for their college tuition.", "fol": "all x.(WorksInStudentJobs(x) -> NeedsToEarnMoneyForTuition(x))", "prediction": ["all x.(WorksInStudentJobsOnCampus(x) -> NeedsEarnMoneyToPayForCollegeTuition(x))", "all x.(WorksInStudentJobsOnCampus(x) -> NeedsToEarnMoneyToPayForCollegeTuition(x))", "all x.(WorksInStudentJobsOnCampus(x) -> NeedsToEarnMoney(x))", "all x.((WorksInStudentJobsOnCampus(x) & CollegeTuition(x)) -> NeedsToEarnMoney(x))", "all x.(WorksInStudentJobsOnCampus(x) -> EarnsMoneyToPayForCollegeTuition(x))", "all x.(WorksInStudentJobsOnCampus(x) -> NeedsToEarnMoneyForCollegeTuition(x))", "all x.(WorksInStudentJobsOnCampus(x) -> NeedsMoneyToPayForCollegeTuition(x))", "all x.((WorksInStudentJobsOnCampus(x) & CollegeTuition(x)) -> NeedsEarnMoney(x))", "all x.(WorksInStudentJobsOnCampus(x) -> NeedsEarnMoneyToPayCollegeTuition(x))", "all x y.((Person(x) & WorkInStudentJobs(x) & Campus(y)) -> NeedsToEarnMoney(x,y))", "all x.(WorksInStudentJobsOnCampus(x) -> NeedsEarnMoney(x))", "all x y z.((Person(x) & StudentJob(y) & College(z) & WorksIn(x,y)) -> NeedsToEarnMoney(x,z))", "all x y.((Person(x) & WorksInStudentJobs(x) & Campus(y)) -> NeedsToEarnMoney(x,y))", "all x.(WorkInStudentJobsOnCampus(x) -> NeedsToEarnMoney(x))", "all x y.((WorksInStudentJobsOnCampus(x) & CollegeTuition(y)) -> NeedsEarnMoney(x,y))", "all x y.((WorksInStudentJobsOnCampus(x) & CollegeTuition(y)) -> NeedsEarnMoneyToPay(x,y))"]}
{"id": "folio_validation_209", "nl": "If people order takeout frequently in college, then they work in student jobs on campus.", "fol": "all x.(OrdersTakeoutFrequently(x) -> WorksInStudentJobs(x))", "prediction": ["all x y.((Person(x) & College(y) & OrdersTakeoutFrequently(x,y)) -> WorksInStudentJobs(x,y))", "all x.((Person(x) & OrdersTakeoutFrequentlyInCollege(x)) -> WorksInStudentJobsOnCampus(x))", "all x y.((Person(x) & College(y) & OrdersTakeoutFrequently(x,y)) -> WorkInStudentJobs(x,y))", "all x.((Person(x) & OrdersTakeoutFrequentlyInCollege(x)) -> WorkInStudentJobsOnCampus(x))", "all x.((Person(x) & OrdersTakeoutFrequentlyInCollege(x)) -> WorksInStudentJobsOnCampus(x))", "all x y.((Person(x) & College(y) & OrdersTakeoutFrequently(x,y)) -> WorksInStudentJobs(x,y))", "all x.((Person(x) & OrdersTakeoutFrequently(x)) -> WorksInStudentJobs(x))", "all x y.((Person(x) & College(y) & OrdersTakeoutFrequently(x,y)) -> WorksInStudentJobsOnCampus(x))", "all x.((Person(x) & OrdersTakeoutFrequently(x) & College(x)) -> WorksInStudentJobs(x))", "all x y.((Person(x) & College(y) & OrdersTakeoutFrequently(x,y)) -> WorksInStudentJobsOnCampus(x,y))", "all x.((Person(x) & OrdersTakeoutFrequentlyInCollege(x)) -> WorkInStudentJobsOnCampus(x))", "all x.((Person(x) & OrdersTakeoutFrequently(x) & College(x)) -> WorksInStudentJobsOnCampus(x))", "all x.((Person(x) & OrdersTakeoutFrequently(x)) -> WorksInStudentJobsOnCampus(x))", "all x.((Person(x) & OrdersTakeoutFrequentlyInCollege(x)) -> WorksInStudentJobs(x))", "all x y.((Person(x) & College(y) & OrdersTakeoutFrequently(x,y)) -> WorkInStudentJobsOnCampus(x))", "all x y.((Person(x) & College(y) & OrdersTakeout(x,y)) -> WorksInStudentJobs(x,y))"]}
{"id": "folio_validation_210", "nl": "People either order takeout frequently in college or enjoy the dining hall meals and recipes.", "fol": "all x.(OrdersTakeoutFrequently(x) | EnjoysDiningHallMeals(x))", "prediction": ["all x y.((Person(x) & College(y)) -> (OrdersTakeoutFrequently(x,y) | EnjoysDiningHallMealsAndRecipes(x,y)))", "all x y.((Person(x) & College(y)) -> (OrdersTakeoutFrequently(x,y) | EnjoysDiningHouseMealsAndRecipes(x,y)))", "all x y.((Person(x) & College(y)) -> (OrdersTakeoutFrequently(x,y) | EnjoysDiningHallMealsAndRecipes(x,y)))", "all x y z.((Person(x) & College(y) & College(z)) -> (OrdersTakeoutFrequently(x,y) | EnjoysDiningHallMealsAndRecipes(x,z)))", "all x y.((Person(x) & College(y)) -> (OrdersTakeout(x,y) | EnjoysDiningHallMealsAndRecipes(x,y)))", "all x y.((Person(x) & College(y)) -> (OrdersTakeoutFrequently(x,y) | EnjoysDiningHallMeals(x,y)))", "all x y.((People(x) & College(y)) -> (OrdersTakeoutFrequently(x,y) | EnjoysDiningHallMealsAndRecipes(x,y)))", "all x y.((Person(x) & College(y)) -> (OrdersTakeoutFrequently(x,y) | EnjoysDiningHallMealsAndRecipes(x)))", "all x y.((Person(x) & College(y) & OrdersTakeoutFrequently(x,y)) | EnjoysDiningHallMealsAndRecipes(x,y))", "all x.(Person(x) -> (OrdersTakeoutFrequently(x) | EnjoysDiningHallMealsAndRecipes(x)))", "all x y z.((Person(x) & College(y) & College(z)) -> (OrdersTakeoutFrequently(x,y) | EnjoysDiningHouseMealsAndRecipes(x,z)))", "all x.(Person(x) -> (OrdersTakeoutFrequentlyInCollege(x) | EnjoysDiningHallMealsAndRecipes(x)))", "all x y.((Person(x) & College(y)) -> (OrdersTakeout(x,y) | EnjoysDiningHallMeals(x,y)))", "all x y.((Person(x) & College(y)) -> (OrdersTakeout(x,y) | EnjoysDiningHouseMealsAndRecipes(x,y)))", "all x y.((Person(x) & College(y)) -> (OrdersTakeoutFrequently(x,y) | EnjoysDiningHouseMeals(x,y)))", "all x y.((Person(x) & College(y)) -> (OrdersTakeoutFrequently(x,y) | EnjoysDiningHallMeals(x,y) & EnjoysRecipes(x,y)))"]}
{"id": "folio_validation_211", "nl": "If people enjoy the dining hall meals and recipes, then they are not picky eaters.", "fol": "all x.(EnjoysDiningHallMeals(x) -> IsNotPickyEater(x))", "prediction": ["all x.((Person(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -PickyEather(x))", "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -PickyEather(x))", "all x.((Person(x) & EnjoysDiningHouseMeals(x) & EnjoysRecipes(x)) -> -PickyEather(x))", "all x.((People(x) & EnjoysDiningHouseMeals(x) & EnjoysRecipes(x)) -> -PickyEather(x))", "all x.((Person(x) & EnjoysDiningHallMeals(x) & EnjoysDiningHallRecipes(x)) -> -PickyEather(x))", "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysDiningHallRecipes(x)) -> -PickyEather(x))", "all x.((People(x) & EnjoysDiningHouseMeals(x) & EnjoysDiningHouseRecipes(x)) -> -PickyEather(x))", "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -pickyEather(x))", "all x.((Person(x) & EnjoysDiningHouseMeals(x) & EnjoysDiningHouseRecipes(x)) -> -PickyEather(x))", "all x.((Person(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -PickyEater(x))", "all x.((Person(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -pickyEather(x))", "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -CpickyEather(x))", "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -SpickyEather(x))", "all x.((People(x) & EnjoyDiningHallMeals(x) & EnjoyDiningHallRecipes(x)) -> -PickyEather(x))", "all x.((People(x) & EnjoyDiningHallMeals(x) & EnjoyRecipes(x)) -> -PickyEather(x))", "all x.(EnjoysDiningHallMealsAndRecipes(x) -> -PickyEather(x))"]}
{"id": "folio_validation_212", "nl": "If people enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls.", "fol": "all x.(EnjoysDiningHallMeals(x) -> SpendsTimeEatingWithFriends(x))", "prediction": ["all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysDiningHallRecipes(x)) -> SpendsLittleTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))", "all x.((People(x) & EnjoysDiningHouseMeals(x) & EnjoysDiningHouseRecipes(x)) -> SpendsLittleTimeEatingAndCatchingUpWithFriendsInCampusDiningHouses(x))", "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysDiningHallRecipes(x)) -> SpendsLittleTimeEatingAndCatchingUpWithFriends(x))", "all x.((Person(x) & EnjoysDiningHallMeals(x) & EnjoysDiningHallRecipes(x)) -> SpendsLittleTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))", "all x.((People(x) & EnjoysDiningHouseMeals(x) & EnjoysDiningHouseRecipes(x)) -> SpendsLittleTimeEatingAndCatchingUpWithFriends(x))", "all x.((Person(x) & EnjoysDiningHouseMeals(x) & EnjoysDiningHouseRecipes(x)) -> SpendsLittleTimeEatingAndCatchingUpWithFriendsInCampusDiningHouses(x))", "all x.((Person(x) & EnjoysDiningHallMeals(x) & EnjoysDiningHallRecipes(x)) -> SpendsLittleTimeEatingAndCatchingUpWithFriends(x))", "all x.(EnjoysDiningHallMealsAndRecipes(x) -> SpendsLittleTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))", "all x.((Person(x) & EnjoysDiningHouseMeals(x) & EnjoysDiningHouseRecipes(x)) -> SpendsLittleTimeEatingAndCatchingUpWithFriends(x))", "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysDiningHallRecipes(x)) -> SpendsAtLeastTimeEatingAndCatchingUpWithFriendsInCampusDiningHalls(x))", "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysDiningHallRecipes(x)) -> SpendsLittleTimeEatingAndCatchingUpInCampusDiningHalls(x))", "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysDiningHallRecipes(x)) -> SpendsLittleTimeEatingAndCatchingUpWithFriendsInCampusDiningHouses(x))", "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysDiningHallRecipes(x)) -> SpendsAtLeastTimeEatingAndCatchingUpWithFriends(x))", "all x.((People(x) & EnjoysDiningHouseMeals(x) & EnjoysDiningHouseRecipes(x)) -> SpendsAtLeastTimeEatingAndCatchingUpWithFriends(x))", "all x.((Person(x) & EnjoysDiningHallMeals(x) & EnjoysDiningHallRecipes(x)) -> SpendsLittleTimeEatingAndCatchingUpWithFriendsInCampusDiningHouses(x))", "all x.((Person(x) & EnjoysDiningHallMeals(x) & EnjoysDiningHallRecipes(x)) -> SpendsAtLeastTimeEatingAndCatchingUpWithFriends(x))"]}
{"id": "folio_validation_213", "nl": "If Mary works in student jobs on campus and needs to earn money to help pay for her college tuition, then Mary is neither picky nor needs to earn money to help pay for her college tuition.", "fol": "((WorksInStudentJobs(Mary) & NeedsToEarnMoneyForTuition(Mary)) -> -(IsNotPickyEater(Mary) | NeedsToEarnMoneyForTuition(Mary)))", "prediction": ["all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoneyToPayForCollegeTuition(x)) -> (-Picky(x) & -NeedsEarnMoneyToPayForCollegeTuition(x)))", "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoneyToPayForCollegeTuition(x)) -> -(Picky(x) | NeedsEarnMoneyToPayForCollegeTuition(x)))", "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoney(x)) -> (-Picky(x) & -NeedsEarnMoney(x)))", "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoneyToPayForCollegeTuition(x)) -> (-Spicky(x) & -NeedsEarnMoneyToPayForCollegeTuition(x)))", "all x.((Mary(x) & WorksInStudentJobs(x) & NeedsEarnMoney(x)) -> (-Picky(x) & -NeedsEarnMoney(x)))", "all x.((Mary(x) & WorksInStudentJobs(x) & NeedsEarnMoney(x) & CollegeTuition(x)) -> -(Picky(x) | NeedsEarnMoney(x))))", "all x.((Mary(x) & WorksInStudentJobs(x) & NeedsEarnMoney(x) & CollegeTuition(x)) -> (-Picky(x) & -NeedsEarnMoney(x)))", "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoney(x)) -> (-picky(x) & -NeedsEarnMoney(x)))", "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoneyToPayForCollegeTuition(x)) -> -(Spicky(x) | NeedsEarnMoneyToPayForCollegeTuition(x)))", "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoney(x)) -> -(Picky(x) | NeedsEarnMoney(x))))", "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoney(x)) -> -(Picky(x) | NeedsEarnMoney(x)))", "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoneyToPayForCollegeTuition(x)) -> -(Picky(x) | NeedsEarnMoneyToPayForCollegeTuition(x))))", "all x.((Mary(x) & WorksInStudentJobs(x) & NeedsEarnMoney(x) & CollegeTuition(x)) -> (-Picky(x) & -NeedsEarnMoney(x) & CollegeTuition(x)))", "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoney(x)) -> (-Picky(x) & -NeedsEarnMoneyToPayForCollegeTuition(x)))", "all x.((Mary(x) & WorksInStudentJobs(x) & NeedsEarnMoney(x)) -> -(Picky(x) | NeedsEarnMoney(x))))", "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoney(x) & CollegeTuition(x)) -> -(Picky(x) | NeedsEarnMoney(x))))"]}
{"id": "folio_validation_214", "nl": "Mary needs to earn money to help pay for her college tuition.", "fol": "NeedsToEarnMoneyForTuition(Mary)", "prediction": ["all x.((Mary(x) & CollegeTuition(x)) -> NeedsEarnMoney(x))", "all x.((Mary(x) & CollegeTuition(y)) -> NeedsEarnMoney(x,y))", "all x.((Mary(x) & CollegeTuition(y)) -> NeedsToEarnMoney(x,y))", "all x.((Mary(x) & CollegeTuition(x)) -> NeedsToEarnMoney(x))", "all x y.((Mary(x) & CollegeTuition(y)) -> NeedsToEarnMoney(x,y))", "all x y.((Mary(x) & CollegeTuition(y)) -> NeedsEarnMoney(x,y))", "all x y z.((Mary(x) & CollegeTuition(y) & CollegeTuition(z)) -> NeedsToEarnMoney(x,y,z))", "all x.((Mary(x) & CollegeTuition(y)) -> NeedsEarnMoneyToPay(x,y))", "all x y z.((Mary(x) & CollegeTuition(y) & CollegeTuition(z)) -> NeedsEarnMoney(x,y,z))", "all x.((Mary(x) & CollegeTuition(y)) -> NeedsMoney(x,y))", "all x y.((Maria(x) & CollegeTuition(y)) -> NeedsToEarnMoney(x,y))", "all x.((Mary(x) & CollegeTuition(x)) -> NeedsMoney(x))", "all x y.((Mary(x) & CollegeTuition(y)) -> NeedsEarnMoneyToPay(x,y))", "all x.((Mary(x) & CollegeTuition(x)) -> NeedsEarnMoneyToPay(x,Mary))", "all x y.((Maria(x) & CollegeTuition(y)) -> NeedsEarnMoney(x,y))", "all x y z.((Mary(x) & CollegeTuition(y) & CollegeTuition(z)) -> NeedsEarnMoneyToPay(x,y,z))"]}
{"id": "folio_validation_215", "nl": "Mary is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls.", "fol": "(IsNotPickyEater(Mary) & SpendsTimeEatingWithFriends(Mary))", "prediction": ["all x.((Mary(x) & -pickyEater(x)) -> (SpontaneousEating(x) & CatchingUpWithFriends(x)))", "all x.((Mary(x) & -pickyEater(x)) -> (SpoisesTimeEating(x) & SpendsTimeCatchingUpWithFriends(x)))", "all x.((Mary(x) & -pickyEather(x)) -> (SpoisesTimeEating(x) & SpendsTimeCatchingUpWithFriends(x)))", "all x.((Mary(x) & -pickyEater(x)) -> (SpoisesTimeEating(x) & SpendsTimeCatchingUpWithFriends(x)))", "all x.((Mary(x) & -pickyEater(x)) -> (SpoisesTimeEating(x) & CatchingUpWithFriends(x)))", "all x.((Mary(x) & -PickyEater(x)) -> (SpoisesTimeEating(x) & SpendsTimeCatchingUpWithFriends(x)))", "all x.((Mary(x) & -pickyEater(x)) -> (SpreadsTimeEating(x) & SpendsTimeCatchingUpWithFriends(x)))", "all x.((Mary(x) & -pickyEather(x)) -> (SpoisesTimeEating(x) & CatchingUpWithFriends(x)))", "all x.((Mary(x) & -pickyEater(x)) -> (SpoisesTimeEating(x) & CatchingUpWithFriends(x)))", "all x.((Mary(x) & -pickyEather(x)) -> (SpreadsTimeEating(x) & SpendsTimeCatchingUpWithFriends(x)))", "all x.((Mary(x) & -pickyEater(x)) -> (SpoisesEating(x) & CatchingUpWithFriends(x)))", "all x.((Mary(x) & -pickyEater(x)) -> (SpreadsTimeEating(x) & CatchingUpWithFriends(x)))", "all x.((Mary(x) & -pickyEater(x)) -> (SpoisesEating(x) & CatchingUpWithFriends(x)))", "all x.((Mary(x) & -pickyEater(x)) -> (SpoisesTimeEating(x) & SpendsTimeCatchingUp(x)))", "all x.((Mary(x) & -pickyEather(x)) -> (SpoisesTimeEating(x) & SpendsTimeCatchingUp(x)))", "all x.((Mary(x) & -pickyEater(x)) -> (SpontaneousEating(x) & CatchingUpWithFriends(x) & OnCampus(x)))"]}
{"id": "folio_validation_216", "nl": "Mary either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls.", "fol": "((IsNotPickyEater(Mary) & -SpendsTimeEatingWithFriends(Mary)) | (-IsNotPickyEater(Mary) & SpendsTimeEatingWithFriends(Mary)))", "prediction": ["all x.((Mary(x) & -PickyEater(x)) | (-PickyEater(x) & SpendsLittleTimeEating(x) & CatchingUpWithFriends(x))))", "all x.((Mary(x) & -PickyEater(x)) | (-PickyEater(x) & SpendsLittleTimeEating(x) & CatchingUpWithFriends(x))))", "all x.((Mary(x) & -PickyEater(x)) | (-PickyEater(x) & SpendsLittleTimeEatingAndCatchingUpWithFriends(x))))", "all x.((Mary(x) & -pickyEather(x)) | (-pickyEater(x) & SpendsLittleTimeEating(x) & CatchingUpWithFriends(x))))", "all x.((Mary(x) & -pickyEater(x)) | (-pickyEater(x) & SpendsLittleTimeEating(x) & CatchingUpWithFriends(x))))", "all x.((Mary(x) & -PickyEather(x)) | (-PickyEather(x) & SpendsLittleTimeEating(x) & CatchingUpWithFriends(x))))", "all x.((Mary(x) & -PickyEather(x)) | (-PickyEater(x) & SpendsLittleTimeEating(x) & CatchingUpWithFriends(x))))", "all x.((Mary(x) & -PickyEater(x)) | (-PickyEater(x) & SpendsLittleTimeEatingAndCatchingUpWithFriends(x))))", "all x.((Mary(x) & -pickyEater(x)) | (-pickyEater(x) & SpendsLittleTimeEating(x) & CatchingUpWithFriends(x))))", "all x.((Mary(x) & -pickyEather(x)) | (-pickyEater(x) & SpendsLittleTimeEatingAndCatchingUpWithFriends(x))))", "all x.((Mary(x) & -pickyEater(x)) | (-pickyEater(x) & SpendsLittleTimeEatingAndCatchingUpWithFriends(x))))", "all x.((Mary(x) & -PickyEather(x)) | (-PickyEater(x) & SpendsLittleTimeEatingAndCatchingUpWithFriends(x))))", "all x.((Mary(x) & -PickyEater(x)) | (-PickyEater(x) & SpendsAlotOfTimeEatingAndCatchingUpWithFriends(x))))", "all x.((Mary(x) & -PickyEather(x)) | (-PickyEather(x) & SpendsLittleTimeEatingAndCatchingUpWithFriends(x))))", "all x.((Mary(x) & -PickyEater(x)) | (-PickyEater(x) & SpendsLittleTimeEating(x) & CatchingUpWithFriendsInCampusDiningHouses(x))))", "all x.((Mary(x) & -PickyEater(x)) | (-PickyEater(x) & SpendsLittleTimeEating(x) & CatchingUpWithFriendsInCampusDiningHalls(x))))"]}
{"id": "folio_validation_217", "nl": "No bakery is spicy.", "fol": "all x.(IsBakery(x) -> -IsSpicy(x))", "prediction": ["-exists x.(Bakery(x) & Spicy(x))", "all x.(Bakery(x) -> Spicy(x))", "(-exists x.(Bakery(x) & Spicy(x)))", "-all x.(Bakery(x) -> Spicy(x))", "(-exists x.(Bakery(x) & Spicy(x)) & -exists y.(Bakery(y) & Spicy(y))))", "all x.(Bakery(x) -> -Spicy(x))", "-exists x.(Bakery(x) & Spicy(x)) & -exists y.(Bakery(y) & Spicy(y)))", "-exists x.(Bakery(x) & Spicy(x) & -exists y.(Bakery(y) & Spicy(y)))", "-(Bakery(x) & Spicy(x))", "(-exists x.(Bakery(x) & Spicy(x)) & -exists y.(Bakery(y) & Spicy(y)))", "-exists x.(Bakery(x) & Spicy(x) & -exists y.(Bakery(y) & Spicy(y))))", "- exists x.(Bakery(x) & Spicy(x))", "exists x.(Bakery(x) & Spicy(x))", "-exists x y.(Bakery(x) & Bakery(y) & Spicy(x))", "-exists x.(Bakery(x) & Spiced(x))", "(-exists x.(Bakery(x) & Spicy(x)) & -exists y.(Bakery(y) & Spicy(x))))"]}
{"id": "folio_validation_218", "nl": "All cupcakes are bakeries.", "fol": "all x.(IsCupcake(x) -> IsBakery(x))", "prediction": ["all x.(Cupcake(x) -> Bakeries(x))", "all x.(Cupcake(x) -> Bakery(x))", "all x.(Coffee(x) -> Bakeries(x))", "all x.(Cupcake(x) -> Bakery(x))", "all x y.((Cupcake(x) & Bakery(y)) -> Baked(x))", "all x.(Cuisine(x) -> Bakeries(x))", "all x.(Coffee(x) -> Bakery(x))", "all x y.((Cupcake(x) & Bakery(y)) -> Bakeries(x))", "all x.(Cupcake(x) -> Bakeery(x))", "all x y.((Cupcake(x) & Bakery(y)) -> Baked(x,y))", "all x.(Cupcake(x) -> Bakeries(x))", "all x y.((Cupcake(x) & Bakery(y)) -> Bakes(x,y))", "(all x.(Cupcake(x) -> Bakeries(x))", "(all x.(Cupcake(x) -> Bakeries(x)))", "all x y.((Cupcake(x) & Bakery(y)) -> Bakes(x))", "all x.(Cupcake(x) -> Baked(x))"]}
{"id": "folio_validation_219", "nl": "All hotpots are spicy.", "fol": "all x.(IsHotpot(x) -> IsSpicy(x))", "prediction": ["all x.(Hotpot(x) -> Spicy(x))", "all x y.((Hotpot(x) & Hotpot(y)) -> Spicy(x))", "all x.exists y.(Hotpot(x) & Hotpot(y) & Spicy(x))", "all x y.((Hotpot(x) & Hotpot(y)) -> Spicy(x,y))", "all x.exists y.(Hotpot(x) & Hotpot(y) & Spicy(x,y))", "all x y.((Hotpot(x) & Peppery(y)) -> Spicy(x))", "all x.exists y.(Hotpot(x) & Hotpot(y) & Spicy(y))", "(all x.(Hotpot(x) -> Spicy(x)))", "all x.(Hotpot(x) -> Spicy(x))", "all x.exists y.(Hotpot(x) & HotPot(y) & Spicy(x))", "all x y.((Hotpot(x) & Spicy(y)) -> Spicy(x))", "all x y.((Hotpot(x) & Spicy(y)) -> Hotpot(x))", "all x.exists y.(Hotpot(x) & HotPot(y) & Spicy(x,y))", "all x.exists y.(Hotpot(x) & HotPot(y) & Spicy(y))", "all x y.((Hotpot(x) & Spicy(x)) -> Hotpot(y))", "all x y.((Hotpot(x) & Hotpot(y)) -> Spicy(y))"]}
{"id": "folio_validation_220", "nl": "All products of Baked by Melissa are cupcakes.", "fol": "all x.(IsProductOfBakedByMelissa(x) -> IsCupcake(x))", "prediction": ["all x.((Product(x) & BakedByMelissa(x)) -> Cupcake(x))", "all x.((BakedByMelissa(x) & BakedByMelissa(x)) -> Cupcake(x))", "all x.(BakedByMelissa(x) -> Cupcake(x))", "all x.((BakedByMelissa(x) & Product(x)) -> Cupcake(x))", "all x.((BakedByMelissa(x) & BakedByMelissa(x)) -> Cupcake(x))", "all x.((Product(x) & BakedByMelanie(x)) -> Cupcake(x))", "all x y.((Product(x) & BakedByMelissa(y)) -> Cupcake(x))", "all x.((BakedByMelissa(x) & Product(x)) -> Cupcake(x))", "all x.((Product(x) & BakedByMelissa(x)) -> Cupcakes(x))", "All x.((Product(x) & BakedByMelissa(x)) -> Cupcake(x))", "all x.((BakedByMelissa(x) & BakedByMelissa(x)) -> Cupcakes(x))", "all x.((Product(x) & BakedByMelain(x)) -> Cupcake(x))", "all x.((BakedByMelissa(x) & BakedByMelissa(x)) -> Cupcakes(x))", "all x.(BakedByMelissa(x) -> Cupcake(x))", "all x y.((Product(x) & BakedByMelissa(x)) -> Cupcake(y))", "all x.((BakedByMelissa(x) & Product(x,y)) -> Cupcake(x))"]}
{"id": "folio_validation_221", "nl": "If dried Thai chilies are spicy or a bakery, then dried Thai chilies are a hotpot or are spicy.", "fol": "(((IsSpicy(DriedThaiChilies) | IsBakery(DriedThaiChilies)) -> IsHotpot(DriedThaiChilies)) | IsSpicy(DriedThaiChilies))", "prediction": ["all x.((DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChicken(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChips(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChinese(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChili(x) & (Spicy(x) | Baked(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x))))", "all x.((DriedThaiChili(x) & Spicy(x)) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChilibes(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChili(x) & (Spicy(x) | Baker(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThailandChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x y.((DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChiles(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DryThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> ((Hotpot(x) | Spicy(x))))", "all x.((DriedThaiChiefs(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "all x.((DriedThaiChili(x) & Spicy(x) | Bakery(x)) -> (Hotpot(x) | Spicy(x)))"]}
{"id": "folio_validation_222", "nl": "Dried Thai chilies are a product of Baked by Melissa.", "fol": "IsProductOfBakedByMelissa(DriedThaiChilies)", "prediction": ["all x.((ThaiChili(x) & BakedByMelissa(x)) -> Dried(x))", "all x.(DriedThaiChili(x) -> BakedByMelissa(x))", "all x.((ThaiChinese(x) & BakedByMelissa(x)) -> Dried(x))", "all x y.((DriedThaiChili(x) & Melissa(y)) -> BakedBy(x,y))", "all x.((DriedThaiChili(x) & BakedByMelissa(x)) -> ProductOf(x,y))", "all x y.((DriedThaiChili(x) & Melissa(y)) -> ProductOf(x,y))", "all x.((DriedThaiChili(x) & BakedByMelissa(x)) -> Product(x))", "all x.(DriedThaiChinese(x) -> BakedByMelissa(x))", "all x.(DriedThaiChicken(x) -> BakedByMelissa(x))", "all x y.((DriedThaiChili(x) & BakedByMelissa(y)) -> ProductOf(x,y))", "all x y.((DriedThaiChinese(x) & BakedByMelissa(y)) -> ProductOf(x,y))", "all x.((ThaiChicken(x) & BakedByMelissa(x)) -> Dried(x))", "all x y.((DriedThaiChili(x) & BakedByMelissa(y)) -> Product(x,y))", "all x y.((DriedThaiChili(x) & Melissa(y)) -> ProductOfBakedBy(x,y))", "all x.((ThaiChili(x) & BakedByMelissa(x)) -> Dry(x))", "all x y.((DriedThaiChinese(x) & BakedByMelissa(y)) -> Product(x,y))"]}
{"id": "folio_validation_223", "nl": "Dried Thai chilies are not a product of Baked by Melissa.", "fol": "-IsProductOfBakedByMelissa(DriedThaiChilies)", "prediction": ["all x.(DriedThaiChili(x) -> -BakedByMelissa(x))", "all x.((DriedThaiChili(x) & -BakedByMelissa(x)) -> -Product(x))", "all x.((DriedThaiChili(x) & -BakedByMelissa(x)) -> -BakedByMelissa(x))", "all x.((DriedThaiChili(x) & -BakedByMelissa(x)) -> -(BakedByMelissa(x) & BakedByMelissa(x)))", "all x.((ThaiChili(x) & BakedByMelissa(x)) -> -Product(x))", "all x.((DriedThaiChili(x) & -BakedByMelissa(x)) -> -ProductOf(x,BakedByMelissa))", "all x.((DriedThaiChili(x) & -BakedByMelissa(x)) -> -Product(x,BakedByMelissa))", "all x.(DriedThaiChili(x) -> -(BakedByMelissa(x) & BakedByMelissa(x)))", "all x.((DriedThaiChili(x) & -BakedByMelissa(x)) -> -ProductOf(x,y))", "all x.(DriedThaiChili(x) -> -ProductOfBakedByMelissa(x))", "all x.((DriedThaiChili(x) & -ProductOfBakedByMelissa(x)) -> -ProductOfBakedByMelissa(x))", "all x.((DriedThaiChinese(x) & -BakedByMelissa(x)) -> -Product(x))", "all x y.((DriedThaiChili(x) & BakedByMelissa(y)) -> -Product(x,y))", "all x.((DriedThaiChili(x) & BakedByMelissa(x)) -> -ProductOf(x,BakedByMelissa))", "all x.((ThaiChili(x) & BakedByMelissa(x)) -> -ProductOf(x,y))", "all x.((DriedThaiChili(x) & -BakedByMelissa(x)) -> -ProductOfBakedByMelissa(x))"]}
{"id": "folio_validation_224", "nl": "Dried Thai chilies are a hotpot.", "fol": "IsHotpot(DriedThaiChilies)", "prediction": ["all x.(DriedThaiChili(x) -> Hotpot(x))", "all x.((ThaiChili(x) & Dried(x)) -> Hotpot(x))", "all x.((DriedThaiChili(x) & Hotpot(x)) -> Hotpot(x))", "all x.((DriedThaiChili(x) & Hotpot(x)) -> DriedThaiChili(x))", "all x.((DriedThaiChili(x) & Hotpot(x)) -> Dried(x))", "all x.(DriedThaiChinese(x) -> Hotpot(x))", "all x.((DriedThaiChinese(x) & Hotpot(x)) -> Hotpot(x))", "all x.((ThaiChinese(x) & Dried(x)) -> Hotpot(x))", "all x.(DriedThaiChicken(x) -> Hotpot(x))", "all x.((DriedThaiChinese(x) & Hotpot(x)) -> Dried(x))", "all x y.((DriedThaiChili(x) & Chili(y)) -> Hotpot(x))", "all x.((ThaiChicken(x) & Dried(x)) -> Hotpot(x))", "all x.((DriedThaiChicken(x) & Hotpot(x)) -> Hotpot(x))", "all x.((DriedThaiChinese(x) & Hotpot(x)) -> DriedThaiChinese(x))", "all x.((DriedThaiChili(x) & Hotpot(x)) -> ThaiChili(x))", "all x y.((DriedThaiChili(x) & Chili(y)) -> Hotpot(x,y))"]}
{"id": "folio_validation_225", "nl": "Dried Thai chilies are neither a product of Baked by Melissa nor a bakery.", "fol": "(-IsProductOfBakedByMelissa(DriedThaiChilies) & -IsBakery(DriedThaiChilies))", "prediction": ["all x.((ThaiChili(x) & -(BakedByMelissa(x) | Bakery(x))) -> Dried(x))", "all x.(DriedThaiChili(x) -> (-BakedByMelissa(x) & -Bakery(x)))", "all x.((ThaiChili(x) & BakedByMelissa(x)) -> -(ProductOf(x,BakedByMelissa) | Bakery(x)))", "all x.((DriedThaiChili(x) & -(BakedByMelissa(x) | Bakery(x))) -> -(BakedByMelissa(x) & BakedByMelissa(x)))", "all x.(DriedThaiChili(x) -> (BakedByMelissa(x) & -Bakery(x)))", "all x.((ThaiChili(x) & BakedByMelissa(x)) -> -(BakedByMelissa(x) | BakedByMelissa(x)))", "all x.((ThaiChili(x) & BakedByMelissa(x)) -> -(BakedByMelissa(x) | BakedByMelissa(x))))", "all x.((ThaiChili(x) & -BakedByMelissa(x)) -> -Bakery(x))", "all x.(DriedThaiChili(x) -> ((BakedByMelissa(x) & -Bakery(x)) | (-BakedByMelissa(x) & -Bakery(x))))", "all x.(DriedThaiChili(x) -> (-ProductOfBakedByMelissa(x) & -Bakery(x)))", "all x.(DriedThaiChili(x) -> ((BakedByMelissa(x) & -Bakery(x)) | (-Bakery(x) & BakedByMelissa(x))))", "all x.(DriedThaiChili(x) -> ((BakedByMelissa(x) & -Bakery(x)) | BakedByMelissa(x))))", "all x.(DriedThaiChili(x) -> ((BakedByMelissa(x) & -Bakery(x)) | (-Bakery(x) & BakedByMelissa(x)))))", "all x.(DriedThaiChili(x) -> ((BakedByMelissa(x) & -Bakery(x)) | (-BakedByMelissa(x) & Bakery(x))))", "all x.(DriedThaiChili(x) -> ((BakedByMelissa(x) & -Bakery(x)) | (-BakedByMelissa(x) & BakedByMelissa(x))))", "all x.((DriedThaiChili(x) & -(BakedByMelissa(x) | Bakery(x))) -> -(BakedByMelissa(x) & -Bakery(x)))"]}
{"id": "folio_validation_226", "nl": "Dried Thai chilies are cupcakes and a product of Baked by Melissa.", "fol": "(Cupcake(DriedThaiChilies) & IsProductOfBakedByMelissa(DriedThaiChilies))", "prediction": ["all x.(DriedThaiChili(x) -> (Cupcake(x) & BakedByMelissa(x)))", "all x.(DriedThaiChili(x) -> (Cupcake(x) & ProductOfBakedByMelissa(x)))", "all x.(DriedThaiChicken(x) -> (Cupcake(x) & BakedByMelissa(x)))", "all x.(DriedThaiChinese(x) -> (Cupcake(x) & BakedByMelissa(x)))", "all x.((DriedThaiChili(x) & Cupcake(x) & BakedByMelissa(x)) -> BakedByMelissa(x))", "all x.((DriedThaiChili(x) & Cupcake(x)) -> BakedByMelissa(x))", "all x.(DriedThaiChili(x) -> (Coffee(x) & BakedByMelissa(x)))", "all x.(DriedThaiChicken(x) -> (Cupcake(x) & ProductOfBakedByMelissa(x)))", "all x.((ThaiChili(x) & Cupcake(x) & BakedByMelissa(x)) -> Dried(x))", "all x.(DriedThaiChili(x) -> (Coffee(x) & ProductOfBakedByMelissa(x)))", "all x.(DriedThaiChinese(x) -> (Cupcake(x) & ProductOfBakedByMelissa(x)))", "all x y.((DriedThaiChili(x) & Cupcake(y)) -> BakedByMelissa(x))", "all x y.((DriedThaiChili(x) & Cupcake(y)) -> BakedByMelissa(x,y))", "all x.((ThaiChili(x) & BakedByMelissa(x)) -> Cupcake(x))", "all x y.((DriedThaiChili(x) & Cupcake(y) & BakedByMelissa(x)) -> BakedByMelissa(x))", "all x y.((DriedThaiChili(x) & Cupcake(y) & BakedByMelissa(x)) -> BakedByMelissa(y))"]}
{"id": "folio_validation_227", "nl": "If the restaurant is listed in Yelp's recommendations, then the restaurant does not receive many negative reviews.", "fol": "all x.(ListedInYelpRecommendations(x) -> -ReceivesNegativeReviews(x))", "prediction": ["all x.((Restaurant(x) & YelpRecommendations(x)) -> -NegativeReviews(x))", "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -ReceivesNegativeReviews(x))", "all x.((Restaurant(x) & YelpRecommendations(x)) -> -ManyNegativeReviews(x))", "all x.((Restaurant(x) & YelpRecommendations(x)) -> -(NegativeReviews(x) | NegativeReviews(x))))", "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -ManyNegativeReviews(x))", "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -ReceivesNegativeReviews(x))", "all x.((Restaurant(x) & YelpRecommendations(x)) -> -ReceivesNegativeReviews(x))", "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -(NegativeReviews(x) | NegativeReviews(x))))", "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -NegativeReviews(x))", "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -ReceivesManyNegativeReviews(x))", "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -ManyNegativeReviews(x))", "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -HasNegativeReviews(x))", "all x.((Restaurant(x) & ListedInYelpsRecommendations(x)) -> -ReceivesNegativeReviews(x))", "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -NegativeReviews(x))", "all x.((Restaurant(x) & YelpRecommendations(x)) -> -HasNegativeReviews(x))", "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -(ReceivesNegativeReviews(x) | ReceivesNegativeReviews(x))))"]}
{"id": "folio_validation_228", "nl": "All restaurants with a rating greater than 9 are listed in Yelp's recommendations.", "fol": "all x.(HasRatingGreaterThan9(x) -> ListedInYelpRecommendations(x))", "prediction": ["all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> ListedInYelpRecommendations(x))", "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> ListedInYelpRecommendations(x))", "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> YelpRecommendations(x))", "all x.((Restaurant(x) & RatingGreaterThan9(x)) -> ListedInYelpRecommendations(x))", "all x.((Restaurant(x) & RatingGreaterThan9(x)) -> ListedInYelpRecommendations(x))", "all x.((Restaurant(x) & RatingGreaterThan9(x)) -> YelpRecommendations(x))", "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> ListingInYelpRecommendations(x))", "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> ListedInRecommendations(x))", "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> ListedInYelpsRecommendations(x))", "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> ListedInYelpsRecommendations(x))", "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> YelpRecommendation(x))", "all x y.((Restaurant(x) & RatingGreaterThan(x,9)) -> YelpRecommendations(y))", "all x.((Restaurant(x) & RatingGreaterThan9(x)) -> ListingInYelpRecommendations(x))", "all x.((Restaurant(x) & RatingGreaterThan9(x)) -> ListedInRecommendations(x))", "all x.((Restaurant(x) & RatingGreaterThan9(x)) -> YelpRecommendation(x))", "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> RecommendedInYelp(x))"]}
{"id": "folio_validation_229", "nl": "Some restaurants that do not provide take-out service receive many negative reviews.", "fol": "exists x.(DoesNotProvideTakeOutService(x) & ReceivesNegativeReviews(x))", "prediction": ["exists x.(Restaurant(x) & -ProvidesTakeOutService(x))", "exists x.(Restaurant(x) & -ProvidesTakeOutService(x) & ManyNegativeReviews(x))", "exists x.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ManyNegativeReviews(x))", "exists x.(Restaurant(x) & -ProvidesTakeOutService(x) & ReceivesNegativeReviews(x))", "exists x.(Restaurant(x) & -ProvidesTakeOutService(x) & ReceivesManyNegativeReviews(x))", "exists x.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ReceivesNegativeReviews(x))", "all x.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ManyNegativeReviews(x))", "exists x.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ReceivesManyNegativeReviews(x))", "all x.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ReceivesNegativeReviews(x))", "exists x.(Restaurant(x) & -ProvidesTakeOut(x))", "exists x.(Restaurant(x) & -ProvidesTakeoutService(x) & ManyNegativeReviews(x))", "exists x.(Restaurant(x) & -PurchaseTakeOutService(x) & ManyNegativeReviews(x))", "exists x.(Restaurant(x) & -ProvidesTakeOutService(x)) -> ManyNegativeReviews(x))", "all x.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ReceivesManyNegativeReviews(x))", "exists x.(Restaurant(x) & -providesTakeOutService(x) & ManyNegativeReviews(x))", "exists x y.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ManyNegativeReviews(x))"]}
{"id": "folio_validation_230", "nl": "All restaurants that are popular among local residents have ratings greater than 9.", "fol": "all x.(PopularWithLocalResidents(x) -> HasRatingGreaterThan9(x))", "prediction": ["all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> HasRatingsGreaterThan(x,9))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> RatingGreaterThan(x,9))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> RatingsGreaterThan(x,9))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> HasRatingsGreaterThan9(x))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> RatingGreaterThan9(x))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> RatingsGreaterThan9(x))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> HasRatingGreaterThan(x,9))", "all x.((Restaurant(x) & PopularWithLocalResidents(x)) -> HasRatingsGreaterThan(x,9))", "all x.((Restaurant(x) & PopularWithLocalResidents(x)) -> RatingGreaterThan(x,9))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> HasRatingsGreaterThan9.(x))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> RatingGreaterThan9.(x))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> RatingGreaterThanFive(x))", "all x.((Restaurant(x) & PopularWithLocalResidents(x)) -> RatingsGreaterThan(x,9))", "all x y.((Restaurant(x) & PopularAmongLocalResidents(x)) -> HasRatingsGreaterThan(x,9))", "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> RatingsGreaterThan9.(x))", "all x y.((Restaurant(x) & PopularAmongLocalResidents(x)) -> HasRatingsGreaterThan(x,y))"]}
{"id": "folio_validation_231", "nl": "Subway has a rating greater than 9 or is popular among local residents.", "fol": "((HasRatingGreaterThan9(Subway) & -PopularWithLocalResidents(Subway)) | (-HasRatingGreaterThan9(Subway) & PopularWithLocalResidents(Subway)))", "prediction": ["all x.(Subway(x) -> (RatingGreaterThan(x,9) | PopularAmongLocalResidents(x)))", "all x.(Subway(x) -> (RatingGreaterThan(x,9) | PopularAmongLocalResidents(x,10)))", "all x.(Subway(x) -> (HasRatingGreaterThan(x,9) | PopularAmongLocalResidents(x)))", "all x.(Subway(x) -> (RatingGreaterThan9(x) | PopularAmongLocalResidents(x)))", "all x.(Subway(x) -> (HasRatingGreaterThan(x,9) | PopularAmongLocalResidents(x,10)))", "all x.(Subway(x) -> (HasRatingGreaterThan9(x) | PopularAmongLocalResidents(x)))", "all x.(Subway(x) -> (RatingGreaterThan(x,9)) | PopularAmongLocalResidents(x)))", "all x.(Subway(x) -> (RatingGreaterThan(x,9) | PopularAmongLocalResidents(x,9)))", "all x.(Subway(x) -> ((RatingGreaterThan9(x) | PopularAmongLocalResidents(x))))", "all x.(Subway(x) -> (RatingGreaterThan(x,9) | PopularAmongLocalResidents(x,1)))", "all x.(Subway(x) -> ((RatingGreaterThan(x,9) | PopularAmongLocalResidents(x))))", "all x.(Subway(x) -> (HasRatingGreaterThan(x,9) | PopularAmongLocalResidents(x,9)))", "all x.(Subway(x) -> (RatingGreaterThan(x,9)) | PopularAmongLocalResidents(x,10)))", "all x.(Subway(x) -> ((RatingGreaterThan(x,9)) | PopularAmongLocalResidents(x))))", "all x.(Subway(x) -> (HasRatingGreaterThan(x,9)) | PopularAmongLocalResidents(x)))", "all x.(Subway(x) -> (HasRatingGreaterThan(x,9) | PopularAmongLocalResidents(x,1)))"]}
{"id": "folio_validation_232", "nl": "If Subway provides take-out service and receives many negative reviews, then its rating is greater than 9 and it does not provide take-out service.", "fol": "DoesNotProvideTakeOutService(Subway)", "prediction": ["all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan(x,9) & -ProvidesTakeOutService(x)))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan9(x) & -ProvidesTakeOutService(x)))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ReceivesManyNegativeReviews(x)) -> (RatingGreaterThan(x,9) & -ProvidesTakeOutService(x)))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ReceivesManyNegativeReviews(x)) -> (RatingGreaterThan9(x) & -ProvidesTakeOutService(x)))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan(x,9) & -PurchaseOutService(x)))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (GreaterThan(x,9) & -ProvidesTakeOutService(x)))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan(x,9) & -ProvidingTakeOutService(x)))", "all x.((Subway(x) & ProvidesTakeoutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan(x,9) & -ProvidesTakeOutService(x)))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan9(x) & -PurchaseOutService(x)))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> RatingGreaterThan(x,9))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan9(x) & -ProvidingTakeOutService(x)))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (GreaterThan9(x) & -ProvidesTakeOutService(x)))", "all x.((Subway(x) & ProvidesTakeOut(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan(x,9) & -ProvidesTakeOut(x)))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> RatingGreaterThan9(x) & -ProvidesTakeOutService(x))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan(x,9) & -ProvidesTakeoutService(x)))", "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan(x,9) & -ProvidesTakeOutService(x,10)))"]}
{"id": "folio_validation_233", "nl": "Subway provides take-out service and does not receive many negative reviews.", "fol": "-(DoesNotProvideTakeOutService(Subway) & ReceivesNegativeReviews(Subway))", "prediction": ["all x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesNegativeReviews(x)))", "all x.(Subway(x) -> (exists y.(TakeOutService(y) & Provides(x,y)) & -exists z.(NegativeReview(z) & Receives(x,z)))))", "all x.(Subway(x) -> (ProvidesTakeOut(x) & -ReceivesNegativeReviews(x)))", "all x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesManyNegativeReviews(x)))", "all x.(Subway(x) -> (exists y.(TakeOutService(y) & Provides(x,y)) & -exists z.(NegativeReviews(z) & Receives(x,z)))))", "all x y.((Subway(x) & TakeOutService(y)) -> (Provides(x,y) & -ReceivesNegativeReviews(x)))", "all x.(Subway(x) -> (PursuesTakeOutService(x) & -ReceivesNegativeReviews(x)))", "all x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesMoreNegativeReviews(x)))", "all x.(Subway(x) -> (ProvidesTakeoutService(x) & -ReceivesNegativeReviews(x)))", "all x y.((Subway(x) & TakeOutService(y)) -> (Provides(x,y) & -Receives(x,y)))", "all x.(Subway(x) -> (ProvidesTakeOutService(x) & -(ReceivesNegativeReviews(x) | ReceivesNegativeReviews(x))))", "All x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesNegativeReviews(x)))", "all x.(Subway(x) -> (PurchasesTakeOutService(x) & -ReceivesNegativeReviews(x)))", "all x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesNegativeReviews(x)))", "exists x.(Subway(x) & ProvidesTakeOutService(x) & -ReceivesNegativeReviews(x))", "all x.(Subway(x) -> (exists y.(TakeOutService(y) & Provides(x,y)) & -exists z.(NegativeReview(z) & Receives(x,z))))"]}
{"id": "folio_validation_234", "nl": "Subway does not provide take-out service.", "fol": "((-(DoesNotProvideTakeOutService(Subway) & ReceivesNegativeReviews(Subway)) -> PopularWithLocalResidents(Subway)) & DoesNotProvideTakeOutService(Subway))", "prediction": ["all x.(Subway(x) -> -ProvidesTakeOutService(x))", "All x.(Subway(x) -> -ProvidesTakeOutService(x))", "all x.(Subway(x) -> -exists y.(TakeOutService(y) & Provides(x,y)))", "all x y.((Subway(x) & TakeOutService(y)) -> -Provides(x,y))", "all x.(Subway(x) -> -exists y.(TakeOutService(y) & Provides(x,y))))", "all x.(Subway(x) -> -PurchaseOutService(x))", "all x.(Subway(x) -> -OfferTakeOutService(x))", "all x.(Subway(x) -> -PurchaseTakeOutService(x))", "(exists x.(Subway(x) & -ProvidesTakeOutService(x)))", "-exists x.(Subway(x) & ProvidesTakeOutService(x))", "all x.(Subway(x) -> -providesTakeOutService(x))", "all x.(Subway(x) -> -PrescribesTakeOutService(x))", "exists x.(Subway(x) & -ProvidesTakeOutService(x))", "all x.(Subway(x) -> -PursuesTakeOutService(x))", "all x.(Subway(x) -> -ProvidesTakeOut(x))", "all x.(Subway(x) -> -ProvidingTakeOutService(x))"]}
{"id": "folio_validation_235", "nl": "In superhero movies, the good guys always win.", "fol": "all x y.((IsSuperheroMovie(x) & IsGoodGuy(y) & AppearsInMovie(y,x)) -> WinsFight(y))", "prediction": ["all x y.((SuperheroMovie(x) & GoodGuy(y)) -> Wins(y))", "all x.((SuperheroMovie(x) & GoodGuy(x)) -> Wins(x))", "all x.((SuperheroMovie(x) & GoodGuys(x)) -> Wins(x))", "all x y.((SuperheroMovie(x) & GoodGuy(y)) -> Wins(y,x))", "all x y z.((SuperheroMovie(x) & GoodGuy(y) & Movie(z)) -> Wins(y,z))", "all x y.((SuperheroMovie(x) & GoodGuy(y)) -> AlwaysWins(y))", "all x y.((SupermanMovie(x) & GoodGuy(y)) -> Wins(y))", "all x.(SuperheroMovie(x) -> GoodGuysWin(x))", "all x y z.((SuperheroMovie(x) & GoodGuy(y) & Movie(z)) -> AlwaysWins(y,z))", "all x y.((Superhero(x) & GoodGuy(y)) -> Wins(y))", "all x.((Superhero(x) & GoodGuy(x)) -> Wins(x))", "all x y.((SuperheroMovie(x) & GoodGuy(y)) -> Win(y))", "all x.((CaptainMovie(x) & GoodGuy(x)) -> Wins(x))", "all x y z.((SuperheroMovie(x) & GoodGuy(y) & Movie(z)) -> Win(y,z))", "all x.((SuperheroMovie(x) & GoodGuys(x)) -> Win(x))", "all x y.((SuperheroMovie(x) & GoodGuy(y)) -> AlwaysWins(y,x))"]}
{"id": "folio_validation_236", "nl": "The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie.", "fol": "IsSuperheroMovie(SurprisingAdventuresofSirDigbyChickenCaesar)", "prediction": ["The SurprisingAdventuresOfSir DigbyChickenCaesar(x) -> SuperheroMovie(x))", "All x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigbyCaesar(x)) -> SuperheroMovie(x))", "All x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigbyCaesar(x)) -> SuperheroMovie(x))", "All x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigbyChickenCaesar(x)) -> SuperheroMovie(x))", "all x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigbyCaesar(x)) -> SuperheroMovie(x))", "All x.((SurprisingAdventuresOfSirDigglyChickenCaesar(x) & SirDigglyCaesar(x)) -> SuperheroMovie(x))", "all x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigbyCaesar(x)) -> SuperheroMovie(x))", "All x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigbyChicken(x)) -> SuperheroMovie(x))", "The SurprisingAdventuresOfSir DigbyChickenCaesar(x) -> SuperheroMovie(x))", "all x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigbyChicken(x)) -> SuperheroMovie(x))", "All x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigbyChicken(x)) -> SuperheroMovie(x))", "The SurprisingAdventuresOfSirDigbyChickenCaesar(x) -> SuperheroMovie(x))", "All x.((SurprisingAdventuresOfSirDigglyChickenCaesar(x) & SirDiggly(x)) -> SuperheroMovie(x))", "all x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigbyChicken(x)) -> SuperheroMovie(x))", "All x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigby(x)) -> SuperheroMovie(x))", "All x.((SurprisingAdventuresOfSir DigbyChickenCaesar(x) & SirDiggly(x)) -> SuperheroMovie(x))"]}
{"id": "folio_validation_237", "nl": "Good guys fight bad guys and vice versa.", "fol": "all x y.(((IsGoodGuy(x) & EngagesInFight(x,y)) <-> IsBadGuy(y)) & EngagesInFight(y,x))", "prediction": ["all x y.((GoodGuy(x) & BadGuy(y)) -> Fights(x,y))", "all x y.((GoodGuy(x) & BadGuy(y)) -> (Fights(x,y) & -Fights(x,y)))", "all x y.((GoodGuy(x) & BadGuy(y)) -> (Fights(x,y) & Via(x,y)))", "all x y.((GoodGuy(x) & BadGuy(y)) -> Fight(x,y))", "all x y.((GoodGuy(x) & BadGuy(y)) -> (Fights(x,y) & ViaVia(x,y)))", "all x y z.((GoodGuy(x) & BadGuy(y) & GoodGuy(z)) -> (Fights(x,y) & Via(x,z)))", "all x y.((GoodGuy(x) & BadGuy(y)) -> (Fights(x,y) & ViaViaVia(x,y)))", "all x y z.((GoodGuy(x) & BadGuy(y) & GoodGuy(z)) -> (Fights(x,y) & -Fights(x,z)))", "all x.(GoodGuy(x) -> (FightsBadGuys(x) & -FightsBadGuys(x)))", "all x y.((GoodGuy(x) & BadGuy(y)) -> (Fights(x,y) & Vice Versa)))", "all x y z.((GoodGuy(x) & BadGuy(y) & GoodGuy(z)) -> (Fights(x,y) & Vice Versa)))", "all x.(GoodGuy(x) -> (FightsBadGuys(x) & Vice Versa(x)))", "all x y.((GoodGuy(x) & BadGuy(y)) -> (Fights(x,y) & (Fights(x,y) | -Fights(x,y))))", "all x y.((GoodGuy(x) & BadGuy(y)) -> (Fights(x,y) & (Fights(x,y) | Fights(x,y))))", "all x y z.((GoodGuy(x) & BadGuy(y) & GoodGuy(z)) -> (Fights(x,y) & ViaVia(x,z)))", "all x y.((GoodGuy(x) & BadGuy(y)) -> (Fights(x,y) & Vice Versa(x)))"]}
{"id": "folio_validation_238", "nl": "Sir Digby fights his nemesis.", "fol": "EngagesInFight(SirDigby,SirDigbyNemesis)", "prediction": ["all x y.((SirDigby(x) & Nemesis(y)) -> Fights(x,y))", "all x y.((SirDigby(x) & Nemesis(y)) -> Fighting(x,y))", "all x y.((SirDiggs(x) & Nemesis(y)) -> Fights(x,y))", "all x y.((SirDiggs(x) & Nemesis(y)) -> Fighting(x,y))", "all x y.((SirDigby(x) & Nemesis(y)) -> Fights(x,y))", "all x.(SirDigby(x) -> FightingNemesis(x))", "all x y.((SirDigby(x) & Nemesis(y)) -> Fighting(x,y))", "all x.(SirDiggs(x) -> FightingNemesis(x))", "all x y.((SirDiggs(x) & Nemesis(y)) -> Fights(x,y))", "all x y.((SirDigby(x) & Nemesis(y)) -> Defeats(x,y))", "Sir Digby FightsNemesis(SirDigby)", "all x y.((SirDiggs(x) & Nemesis(y)) -> Fighting(x,y))", "all x y.((SirDigby(x) & Nemesis(y)) -> Feats(x,y))", "Sir Digby FightsNemesis(SirDiggs)", "all x y.((SirDigby(x) & Nemesis(y)) -> Feathers(x,y))", "all x y.((SirDigby(x) & Nemesis(y)) -> Combats(x,y))"]}
{"id": "folio_validation_239", "nl": "If a superhero movie is named after a character, that character is a good guy.", "fol": "all x y.((IsSuperheroMovie(x) & CharacterNamedAfter(x,y)) -> IsGoodGuy(y))", "prediction": ["all x.((SuperheroMovie(x) & NamedAfterCharacter(x)) -> GoodGuy(x))", "all x y.((SuperheroMovie(x) & Character(y) & NamedAfter(x,y)) -> GoodGuy(y))", "all x y z.((SuperheroMovie(x) & Character(y) & Character(z) & NamedAfter(x,y,z)) -> GoodGuy(y,z))", "all x y.((SuperheroMovie(x) & Character(y) & NamedAfter(x,y)) -> GoodGuy(x))", "all x y z.((SuperheroMovie(x) & Character(y) & Character(z) & NamedAfter(x,y,z)) -> GoodGuy(y))", "all x y.((SuperheroMovie(x) & Character(y) & NamedAfter(x,y)) -> GoodGuy(x,y))", "all x y.((SupermanMovie(x) & Character(y) & NamedAfter(x,y)) -> GoodGuy(y))", "all x y z.((SuperheroMovie(x) & Character(y) & Character(z) & NamedAfter(x,y)) -> GoodGuy(y,z))", "all x y.((SuperheroMovie(x) & Character(y) & NamedAgain(x,y)) -> GoodGuy(y))", "all x.((SupermanMovie(x) & NamedAfterCharacter(x)) -> GoodGuy(x))", "all x y z.((SuperheroMovie(x) & Character(y) & Character(z) & NamedAfter(x,y,z)) -> GoodGuy(y,x))", "all x y.((SuperheroMovie(x) & Character(y)) -> GoodGuy(y))", "all x y z.((SuperheroMovie(x) & Character(y) & Character(z) & NamedAfter(x,y) & GoodGuy(y,z)) -> GoodGuy(y,z))", "all x y z.((SuperheroMovie(x) & Character(y) & Character(z) & NamedAfter(x,y) & GoodGuy(y)) -> GoodGuy(z))", "all x y z.((SuperheroMovie(x) & Character(y) & Character(z) & NamedAfter(x,y,z)) -> GoodGuy(x))", "all x.((SuperheroMovie(x) & NamedAgainCharacter(x)) -> GoodGuy(x))"]}
{"id": "folio_validation_240", "nl": "The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby.", "fol": "CharacterNamedAfter(SurprisingAdventuresofSirDigbyChickenCaesar,SirDigby)", "prediction": ["(SurprisingAdventuresOfSirDigbyChickenCaesar(SirDigby) & NamedAfterSirDigby(SirDigby))", "The SurprisingAdventuresOfSirDigbyChickenCaesar(x) -> NamedAfterSirDigby(x))", "All x.(SurprisingAdventuresOfSirDigbyChickenCaesar(x) -> NamedAfterSirDigby(x))", "The SurprisingAdventuresOfSirDigbyChickenCaesar(x) -> NamedAfterSirDigby(x))", "All x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigby(x)) -> NamedAfter(x,SirDigby))", "All x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigby(x)) -> NamedAfter(x,SirDigby))", "(SurprisingAdventuresOfSirDigbyChickenCaesar(SirDigby) & NamedAfter(SirDigby))", "All x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigby(x)) -> NamedAfter(x))", "The SurprisingAdventuresOfSirDiggbyChickenCaesar(x) -> NamedAfterSirDiggby(x))", "The SurprisingAdventuresOfSirDigbyChickenCaesar(x) -> NamedAfterSirDigby(x))", "All x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigby(x)) -> NamedAfter(x))", "All x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigby(x)) -> NamedAfter(x,Digby))", "The SurprisingAdventuresOfSirDiggbyChickenCaesar(x) -> NamedAfterSirDiggby(x))", "(SurprisingAdventuresOfSirDigglyChickenCaesar(SirDiggly) & NamedAfterSirDiggly(SirDiggly))", "All x.((SurprisingAdventuresOfSirDigbyChickenCaesar(x) & SirDigby(x)) -> NamedAfter(x,Digby))", "The SurprisingAdventuresOfSirDigglyChickenCaesar(x) -> NamedAfterSirDiggly(x))"]}
{"id": "folio_validation_241", "nl": "If somebody wins a fight, the person they are fighting loses.", "fol": "all x y.((EngagesInFight(x,y) & WinsFight(x)) -> -WinsFight(y))", "prediction": ["all x y.((WinsFight(x) & Person(y)) -> LosesFight(y))", "all x y.((WinsFight(x) & Person(y)) -> Loses(y))", "all x y.((WinsFight(x) & Person(y)) -> LosesFight(y,x))", "all x y.((WinsFight(x) & Person(y) & Fighting(y)) -> Loses(y))", "all x y.((WinsFight(x) & Person(y) & Fighting(y)) -> LosesFight(y))", "all x y.((WinsFight(x) & Person(y) & Fighting(y)) -> LosesFight(x,y))", "all x y.((WinsFight(x) & Person(y)) -> LosesFight(x,y))", "all x y.((WinsFight(x) & Person(y) & Fighting(y)) -> Loses(x,y))", "all x y.((WinsFight(x) & Person(y)) -> Loses(y,x))", "all x.(WinsFight(x) -> LosesPerson(x))", "all x y.((WinsFight(x) & Person(y) & Fighting(y)) -> LosesFight(y,x))", "all x y.((WinsFight(x) & Person(y) & Fighting(y)) -> Loses(y,x))", "all x y z.((WinsFight(x) & Person(y) & Fighting(z)) -> Loses(y,z))", "all x y.((WinsFight(x) & Person(y) & Fighting(x,y)) -> LosesFight(y))", "all x y.((Person(x) & WinsFight(x) & Person(y)) -> LosesFight(y))", "all x y.((WinsFight(x) & Person(y) & Fighting(x,y)) -> Loses(y))"]}
{"id": "folio_validation_242", "nl": "Sir Digby's nemesis loses.", "fol": "all x y.((IsSuperheroMovie(x) & AppearsInMovie(y,x)) -> IsGoodGuy(y))", "prediction": ["all x.((SirDiggsNemesis(x) & SirDiggsNemesis(x)) -> Loses(x))", "all x.(SirDiggsNemesis(x) -> Loses(x))", "all x y.((SirDiggs(x) & Nemesis(y)) -> Loses(x,y))", "all x.((SirDiggsNemesis(x) & SirDiggs(x)) -> Loses(x))", "all x.((Nemesis(x) & SirDiggs(x)) -> Loses(x))", "all x.(SirDiggsNemesisLoses(x) -> NemesisLoses(x))", "all x y.((Nemesis(x) & SirDiggs(y)) -> Loses(x,y))", "all x.(SirDiggs(x) -> NemesisLoses(x))", "all x.(Nemesis(x,SirDigby) -> Loses(x))", "all x.(Nemesis(x,SirDiggs) -> Loses(x))", "all x.(SirDigby(x) -> NemesisLoses(x))", "all x.((Nemesis(x) & SirDigby(x)) -> Loses(x))", "all x y.((Nemesis(x) & SirDigby(y)) -> Loses(x,y))", "all x.(SirDiggsNemesisLoses(x) -> SirDiggsNemesis(x))", "all x.((SirDiggsNemesis(x) & NemesisLoses(x)) -> NemesisLoses(x))", "(LosesNemesis(SirDiggs) & SirDiggs(SirDiggs))"]}
{"id": "folio_validation_243", "nl": "[BG] Books contain tons of knowledge.", "fol": "all x.(IsBook(x) -> ContainsKnowledge(x))", "prediction": ["all x y.((Book(x) & Knowledge(y)) -> Contains(x,y))", "all x.(Book(x) -> ContainsTooOfKnowledge(x))", "all x.((Book(x) & ContainsKnowledge(x)) -> ContainsKnowledge(x))", "all x.((Book(x) & ContainsTooOfKnowledge(x)) -> ContainsTooOfKnowledge(x))", "all x y z.((Book(x) & Knowledge(y) & Knowledge(z)) -> Contains(x,y,z))", "all x.(Book(x) -> ContainsTonsOfKnowledge(x))", "all x.((Book(x) & TonsOfKnowledge(x)) -> Contains(x,y))", "all x.((Book(x) & [BG]) -> ContainsTooOfKnowledge(x))", "all x.((Book(x) & ContainsTotalKnowledge(x)) -> ContainsTotalKnowledge(x))", "all x.(Book(x) -> ContainsTotalKnowledge(x))", "all x.((Book(x) & ContainsTooOfKnowledge(x)) -> IncludesTooOfKnowledge(x))", "all x.((Book(x) & ContainsKnowledge(x)) -> IncludesKnowledge(x))", "all x.((Book(x) & ContainsTonsOfKnowledge(x)) -> ContainsTonsOfKnowledge(x))", "all x.((Book(x) & ContainsKnowledge(x)) -> (ContainsKnowledge(x) & ContainsKnowledge(x)))", "all x.(Book(x) -> ContainsKnowledge(x))", "all x.((Book(x) & ContainsKnowledge(x)) -> HasKnowledge(x))"]}
{"id": "folio_validation_244", "nl": "[BG] When a person reads a book, that person gains knowledge. ", "fol": "all x y.(ReadsBook(x,y) -> GainsKnowledge(x))", "prediction": ["all x y.((Person(x) & Book(y) & Reads(x,y)) -> GainsKnowledge(x,y))", "all x y.((Person(x) & Book(y) & Reads(x,y)) -> GainsKnowledge(x))", "all x y z.((Person(x) & Book(y) & Reads(x,y)) -> GainsKnowledge(x,z))", "all x.(ReadsBook(x) -> GainsKnowledge(x))", "all x y.((Person(x) & Book(y)) -> Reads(x,y))", "all x y z.((Person(x) & Book(y) & Reads(x,y)) -> GainsKnowledge(x,y))", "all x y.((Person(x) & ReadsBook(x,y)) -> GainsKnowledge(x,y))", "all x.((Person(x) & ReadsBook(x)) -> GainsKnowledge(x))", "all x y z.((Person(x) & Book(y) & Reads(x,y)) -> GainsKnowledge(x))", "all x y.((Person(x) & ReadsBook(x,y)) -> GainsKnowledge(x))", "all x y z.((Person(x) & Book(y) & Reads(x,y) & Person(z)) -> GainsKnowledge(x,z))", "all x y z.((Person(x) & Book(y) & Book(z) & Reads(x,y)) -> GainsKnowledge(x,z))", "all x y.((Person(x) & ReadsBook(x)) -> GainsKnowledge(x,y))", "all x y z.((Person(x) & Book(y) & Reads(x,y) & Knowledge(z)) -> Gains(x,z))", "all x y.((Person(x) & Book(y)) -> (Reads(x,y) & GainsKnowledge(x,y)))", "all x y z.((Person(x) & Book(y) & Reading(x,y)) -> GainsKnowledge(x,z))"]}
{"id": "folio_validation_245", "nl": "[BG] If a person gains knowledge, they become smarter.", "fol": "all x.(GainsKnowledge(x) -> IsSmarter(x))", "prediction": ["all x.((Person(x) & GainsKnowledge(x)) -> Smarter(x))", "all x.(GainKnowledge(x) -> Smarter(x))", "all x.(GainsKnowledge(x) -> Smarter(x))", "all x y.((Person(x) & GainsKnowledge(x)) -> Smarter(x))", "all x y.((Person(x) & GainsKnowledge(x) & Smarter(y)) -> GainsKnowledge(x,y))", "all x y.((Person(x) & GainsKnowledge(x,y)) -> Smarter(x))", "all x.(GainsKnowledge(x) -> Smarter(x))", "all x.(GasesKnowledge(x) -> Smarter(x))", "all x y.((Person(x) & GainsKnowledge(x) & Smarter(y)) -> GainsKnowledge(x))", "all x y.((Person(x) & GainsKnowledge(x)) -> Smarter(y))", "all x y.((Person(x) & GainsKnowledge(x) & Smarter(x)) -> GainsKnowledge(x))", "all x.(GainingKnowledge(x) -> Smarter(x))", "all x y.((Person(x) & GainsKnowledge(x) & Smarter(x)) -> GainsKnowledge(x,y))", "all x.(GrowsKnowledge(x) -> Smarter(x))", "all x.(Gain(x) -> Smarter(x))", "all x y.((Person(x) & GainsKnowledge(x,y)) -> Smarter(y))"]}
{"id": "folio_validation_246", "nl": "Harry read the book \"Walden\" by Henry Thoreau.", "fol": "(ReadsBook(Harry,Walden) & IsBook(Walden))", "prediction": ["all x y z.((Harry(x) & Book(y) & Thoreau(z)) -> Reads(x,y,z))", "all x y.((Harry(x) & Book(y)) -> Reads(x,y))", "all x y z.((Harry(x) & Book(y) & Thoreau(z)) -> Read(x,y,z))", "all x y z.((Harry(x) & Book(y) & Thoreau(z)) -> Reads(x,y))", "all x y z.((Harry(x) & Book(y) & Thoreau(z)) -> ReadsBy(x,y,z))", "all x y.((Harry(x) & Book(y) & Thoreau(z)) -> Reads(x,y,z))", "all x y z.((Harry(x) & Book(y) & HenryThoreau(z)) -> Reads(x,y,z))", "all x y.((Harry(x) & Book(y)) -> Read(x,y))", "all x y z.((Harry(x) & Book(y) & Thoreau(z)) -> ReadsWalden(x,y,z))", "all x y.((Harry(x) & Book(y) & Thoreau(y)) -> Reads(x,y))", "all x y z.((Harry(x) & Book(y) & Thoreau(z)) -> Read(x,y))", "all x y z.((Harry(x) & Book(y) & Thoreau(z)) -> ReadBy(x,y,z))", "Harry reads the book \"Walden\" by Henry Thoreau.", "all x y.((Harry(x) & Book(y) & HenryThoreau(y)) -> Reads(x,y))", "all x y.((Harry(x) & Book(y) & Thoreau(z)) -> Read(x,y,z))", "all x y z.((Harry(x) & Book(y) & HenryThoreau(z)) -> Read(x,y,z))"]}
{"id": "folio_validation_247", "nl": "Walden contains knowledge.", "fol": "ContainsKnowledge(Walden)", "prediction": ["all x.(Wilden(x) -> ContainsKnowledge(x))", "all x.(Walden(x) -> ContainsKnowledge(x))", "all x y.((Walden(x) & Knowledge(y)) -> Contains(x,y))", "all x.(Wilden(x) -> HasKnowledge(x))", "all x y.((Wilden(x) & Knowledge(y)) -> Contains(x,y))", "all x.(Wilden(x) -> Knowledge(x))", "all x.(Walden(x) -> ContainsKnowledge(x))", "all x.(Walden(x) -> HasKnowledge(x))", "exists x.(Walden(x) & Knowledge(x))", "exists x.(Wilden(x) & Knowledge(x))", "All x.(Wilden(x) -> ContainsKnowledge(x))", "all x.(Walden(x) -> Knowledge(x))", "all x.(Wilden(x) -> ContainsKnowledge(x))", "all x.(Wilden(x) -> containsKnowledge(x))", "all x.(Wilden(x) -> ContentsKnowledge(x))", "All x.(Walden(x) -> ContainsKnowledge(x))"]}
{"id": "folio_validation_248", "nl": "Harry is smarter than before.", "fol": "IsSmarter(Harry)", "prediction": ["all x.(Harry(x) -> SmarterThanBefore(x))", "all x.((Harry(x) & SmarterThanBefore(x)) -> SmarterThanBefore(x))", "All x.(Harry(x) -> SmarterThanBefore(x))", "all x y.((Harry(x) & Before(y)) -> Smarter(x,y))", "all x y.((Harry(x) & Before(y)) -> SmarterThan(x,y))", "all x.(Harris(x) -> SmarterThanBefore(x))", "all x.(Harry(x) -> Smarter(x))", "all x.((Harry(x) & SmarterThanBefore(x)) -> Smarter(x))", "all x.((Harry(x) & Before(x)) -> Smarter(x))", "all x.((Harry(x) & SmarterThanBefore(x)) -> SmarterThanBefore(x))", "all x.((Harry(x) & Smarter(x)) -> Smarter(x))", "all x.((Harry(x) & Before(x)) -> SmarterThan(x))", "all x.((Harry(x) & SmarterThanBefore(x)) -> Intelligent(x))", "all x.(Harry(x) -> SmarterThanBefore(x))", "all x.((Harry(x) & SmarterThanBefore(x)) -> IntelligenterThanBefore(x))", "Harry is SmarterThanBefore(Harry)"]}
{"id": "folio_validation_249", "nl": "A person who is smarter has gained knowledge.", "fol": "all x.(IsSmarter(x) -> GainsKnowledge(x))", "prediction": ["all x.(Smarter(x) -> GainedKnowledge(x))", "all x.((Person(x) & Smarter(x)) -> GainedKnowledge(x))", "all x.(Smarter(x) -> GainedKnowledge(x))", "all x.((Person(x) & Smarter(x)) -> HasGainKnowledge(x))", "all x.((Person(x) & Smarter(x)) -> GainsKnowledge(x))", "all x.(SmarterPerson(x) -> GainedKnowledge(x))", "all x.(SmarterPerson(x) -> GainedKnowledge(x))", "all x y.((Person(x) & Smarter(x)) -> GainedKnowledge(x))", "all x.(Smarter(x) -> GainsKnowledge(x))", "all x.((Person(x) & Smarter(x)) -> HasKnowledge(x))", "all x.((Person(x) & Smarter(x)) -> HasGatheredKnowledge(x))", "all x.(Smarter(x) -> GainsKnowledge(x))", "all x.(Smarter(x) -> HasGainKnowledge(x))", "all x y.((Person(x) & Smarter(x)) -> GainedKnowledge(y))", "all x.((Person(x) & Smarter(x)) -> gainedKnowledge(x))", "all x.(Smarter(x) -> HasGainKnowledge(x))"]}
{"id": "folio_validation_250", "nl": "Natural language processing tasks can be categorized as either language generation task or language understanding task.", "fol": "all x.(((NaturalLanguageProcessingTask(x) -> LanguageGenerationTask(x)) & -LanguageUnderstandingTask(x)) | (-(NaturalLanguageProcessingTask(x) -> LanguageGenerationTask(x)) & LanguageUnderstandingTask(x)))", "prediction": ["all x.(NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))", "all x.(NaturalLanguageProcessingTask(x) -> ((LanguageGenerationTask(x) | LanguageUnderstandingTask(x))))", "all x.(NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))", "all x.(NaturalLanguageProcessingTask(x) -> (LanguageGeneration(x) | LanguageUnderstanding(x)))", "all x.(NaturalLanguageProcessingTask(x) -> (GenerationTask(x) | UnderstandingTask(x)))", "all x.(NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))", "all x.((NaturalLanguageProcessingTask(x) & (LanguageGenerationTask(x) | LanguageUnderstandingTask(x))) -> Processes(x))", "all x y.((NaturalLanguageProcessingTask(x) & LanguageGenerationTask(y)) | LanguageUnderstandingTask(y))", "all x.((NaturalLanguageProcessingTask(x) & (LanguageGenerationTask(x) | LanguageUnderstandingTask(x))) -> NaturalLanguageProcessingTask(x))", "all x y.((NaturalLanguageProcessingTask(x) & (LanguageGenerationTask(y) | LanguageUnderstandingTask(y))) -> CategorizedAs(x,y))", "all x.((NaturalLanguageProcessingTask(x) & (LanguageGenerationTask(x) | LanguageUnderstandingTask(x))) -> CategorizedAs(x,y))", "all x.((NaturalLanguageProcessingTask(x) & (LanguageGenerationTask(x) | LanguageUnderstandingTask(x))) -> CategorizedAs(x,LanguageGenerationTask(x))", "all x.((NaturalLanguageProcessingTask(x) & (LanguageGenerationTask(x) | LanguageUnderstandingTask(x))) -> Categorized(x))", "all x.((NaturalLanguageProcessingTask(x) & (LanguageGenerationTask(x) | LanguageUnderstandingTask(x))) -> ProcessingTask(x))", "all x.((NaturalLanguageProcessingTask(x) & (LanguageGenerationTask(x) | LanguageUnderstandingTask(x))) -> NaturalTask(x))", "all x.(NutritionalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))"]}
{"id": "folio_validation_251", "nl": "If the output of a natural language processing task is a text sequence, then it is a language generation task.", "fol": "all x.((NaturalLanguageProcessingTask(x) & IsTextSequenceOutput(x)) -> LanguageGenerationTask(x))", "prediction": ["all x.((OutputOfNaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x.((Output(x) & NaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x.((NaturalLanguageProcessingTask(x) & OutputTextSequence(x)) -> LanguageGenerationTask(x))", "all x.((OutputFromNaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x.((NaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x.((NaturalLanguageProcessingTask(x) & TextSequenceOutput(x)) -> LanguageGenerationTask(x))", "all x.((InputOfNaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x.((OutputAtNaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x.((OutputOfNaturalLanguageProcessing(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x.((NaturalLanguageProcessingTaskOutput(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x.(((OutputOfNaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x.((OutputNaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "all x y.((NaturalLanguageProcessingTask(x) & TextSequence(y) & Output(x,y)) -> LanguageGenerationTask(x))", "all x.((Output(x) & NaturalLanguageProcessingTask(x,TextSequence)) -> LanguageGenerationTask(x))", "all x y.((NaturalLanguageProcessingTask(x) & OutputTextSequence(x)) -> LanguageGenerationTask(y))", "all x.((OutputOfNaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGatherationTask(x))"]}
{"id": "folio_validation_252", "nl": "Machine translation is a natural language processing task.", "fol": "NaturalLanguageProcessingTask(MachineTranslation)", "prediction": ["all x.(MachineTranslation(x) -> NaturalLanguageProcessingTask(x))", "all x.(MachineTranslation(x) -> NaturalLanguageProcessingTask(x))", "all x.(MachineTranslation(x) -> NaturalLanguageProcessing(x))", "all x.(MachineTranslation(x) -> (NaturalLanguageProcessingTask(x) & NaturalLanguageProcessingTask(x)))", "all x.(MachineTranslation(x) -> NaturalLanguageProcessingTask(x))", "all x y.((MachineTranslation(x) & NaturalLanguageProcessingTask(y)) -> Works(x,y))", "all x.(MachineTranslationTask(x) -> NaturalLanguageProcessingTask(x))", "all x y.((MachineTranslation(x) & NaturalLanguageProcessingTask(y)) -> Translates(x,y))", "all x.(MachineTreatment(x) -> NaturalLanguageProcessingTask(x))", "all x.(MachineTranscription(x) -> NaturalLanguageProcessingTask(x))", "all x y.((MachineTranslation(x) & NaturalLanguageProcessingTask(y)) -> Processes(x,y))", "all x.(MachineTraduction(x) -> NaturalLanguageProcessingTask(x))", "all x.((MachineTranslation(x) & NaturalLanguageProcessingTask(x)) -> Works(x))", "all x y.((MachineTranslation(x) & NaturalLanguageProcessingTask(y)) -> Requires(x,y))", "all x.((MachineTranslation(x) & NaturalLanguageProcessingTask(x)) -> Translates(x))", "all x.(MachineTranslation(x) -> NaturalLanguageProcessing(x))"]}
{"id": "folio_validation_253", "nl": "The output of machine translation is a text sequence.", "fol": "IsTextSequenceOutput(MachineTranslation)", "prediction": ["all x.(MachineTranslation(x) -> TextSequence(x))", "all x.((MachineTranslation(x) & Output(x)) -> TextSequence(x))", "all x y.((MachineTranslation(x) & Output(y)) -> TextSequence(x))", "all x.((MachineTranslation(x) & TextSequence(x)) -> Output(x))", "all x.(MachineTranslation(x) -> OutputTextSequence(x))", "all x y.((MachineTranslation(x) & Output(y)) -> TextSequence(y))", "all x y.((MachineTranslation(x) & TextSequence(y)) -> Output(x,y))", "all x y.((MachineTranslation(x) & Output(y)) -> TextSequence(x,y))", "all x.((MachineTranslation(x) & Output(x,TextSequence)) -> MachineTranslation(x))", "all x y z.((MachineTranslation(x) & Output(y) & TextSequence(z)) -> Output(x,y,z))", "all x y.((MachineTranslation(x) & Output(y,x)) -> TextSequence(x))", "all x.((MachineTranslation(x) & OutputTextSequence(x)) -> MachineTranslation(x))", "all x.((MachineTranslation(x) & Output(x,TextSequence)) -> Output(x,TextSequence))", "all x y.((MachineTranslation(x) & Output(y,x)) -> TextSequence(y))", "all x.((MachineTranslation(x) & OutputSequence(x)) -> Text(x))", "all x y.((MachineTranslation(x) & Output(x,y)) -> TextSequence(x))"]}
{"id": "folio_validation_254", "nl": "Machine translation is a language generation task.", "fol": "LanguageGenerationTask(MachineTranslation)", "prediction": ["all x.(MachineTranslation(x) -> LanguageGenerationTask(x))", "all x.(MachineTranslation(x) -> LanguageGenerationTask(x))", "all x.(MachineTranslation(x) -> LanguageGeneration(x))", "all x y.((MachineTranslation(x) & LanguageGenerationTask(y)) -> Translates(x,y))", "all x y.((MachineTranslation(x) & LanguageGenerationTask(y)) -> TranslationTask(x,y))", "all x y.((MachineTranslation(x) & LanguageGenerationTask(y)) -> Generates(x,y))", "all x.(MachineTreatment(x) -> LanguageGenerationTask(x))", "all x.((MachineTranslation(x) & LanguageGenerationTask(x)) -> TranslationTask(x))", "all x.((MachineTranslation(x) & LanguageGenerationTask(x)) -> Translates(x))", "all x.(MachineTranslation(x) -> LanguageGenerationTask(x))", "all x y.((MachineTranslation(x) & LanguageGenerationTask(y)) -> Translate(x,y))", "all x y.((MachineTranslation(x) & LanguageGenerationTask(y)) -> LanguageGeneration(x,y))", "all x y.((MachineTranslation(x) & LanguageGenerationTask(y)) -> Translation(x,y))", "all x y.((MachineTranslation(x) & LanguageGenerationTask(y)) -> Has(x,y))", "all x y.((MachineTranslation(x) & LanguageGenerationTask(y)) -> Creates(x,y))", "all x y.((MachineTranslation(x) & LanguageGenerationTask(y)) -> Works(x,y))"]}
{"id": "folio_validation_255", "nl": "Machine translation is a language understanding task.", "fol": "LanguageUnderstandingTask(MachineTranslation)", "prediction": ["all x.(MachineTranslation(x) -> LanguageUnderstandingTask(x))", "all x.(MachineTranslation(x) -> LanguageUnderstanding(x))", "all x.(MachineTranslation(x) -> LanguageUnderstandingTask(x))", "all x y.((MachineTranslation(x) & Language(y)) -> UnderstandingTask(x,y))", "all x.(MachineTranslation(x) -> LanguageUnderstandingTask(x))", "all x y.((MachineTranslation(x) & LanguageUnderstandingTask(y)) -> Translates(x,y))", "all x.(MachineTranscription(x) -> LanguageUnderstandingTask(x))", "all x.(MachineTraduction(x) -> LanguageUnderstandingTask(x))", "all x.(MachineTreatment(x) -> LanguageUnderstandingTask(x))", "all x.((MachineTranslation(x) & LanguageUnderstandingTask(x)) -> Translates(x))", "all x y.((MachineTranslation(x) & LanguageUnderstandingTask(y)) -> LanguageUnderstanding(x,y))", "all x y.((MachineTranslation(x) & LanguageUnderstandingTask(y)) -> Understands(x,y))", "all x y.((MachineTranslation(x) & LanguageUnderstandingTask(y)) -> Is(x,y))", "all x y.((MachineTranslation(x) & LanguageUnderstandingTask(y)) -> LanguageUnderstandingTask(x,y))", "all x y.((MachineTranslation(x) & LanguageUnderstandingTask(y)) -> UnderstandingTask(x,y))", "all x y.((MachineTranslation(x) & Language(y)) -> LanguageUnderstandingTask(x,y))"]}
{"id": "folio_validation_256", "nl": "Pets are allowed in some managed buildings.", "fol": "exists x.(IsManagedBuilding(x) & AllowsPets(x))", "prediction": ["exists x.(ManagedBuilding(x) & AllowsPets(x))", "exists x.(ManagedBuilding(x) & AllowsPet(x))", "exists x.(Pet(x) & ManagedBuilding(x))", "all x y.((Pet(x) & ManagedBuilding(y)) -> AllowedIn(x,y))", "all x.((Pet(x) & ManagedBuilding(x)) -> AllowedIn(x,y))", "exists x y.((Pet(x) & ManagedBuilding(y)) -> AllowedIn(x,y))", "exists x.(ManagedBuilding(x) & AllowsPetsIn(x))", "exists x y.((Pet(x) & ManagedBuilding(y)) -> Allowed(x,y))", "exists x y.(ManagedBuilding(x) & Pet(y) & AllowedIn(y,x))", "exists x y.((ManagedBuilding(x) & Pet(y)) -> AllowedIn(y,x))", "all x.((Pet(x) & ManagedBuilding(x)) -> AllowedIn(x))", "exists x.(Animal(x) & ManagedBuilding(x))", "all x y.((ManagedBuilding(x) & Pet(y)) -> AllowedIn(y,x))", "exists x.(ManagedBuilding(x) & AllowsPetsIn(x,y))", "exists x.(MostManagedBuilding(x) & AllowsPets(x))", "exists x.((Pet(x) & ManagedBuilding(x)) -> AllowedIn(x,y))"]}
{"id": "folio_validation_257", "nl": "[BG] A deposit is required to rent an apartment in a managed building.", "fol": "all x.(IsManagedBuilding(x) -> RequiresDeposit(x))", "prediction": ["all x y.((Apartment(x) & ManagedBuilding(y)) -> RequiresDeposit(x,y))", "all x.((Apartment(x) & ManagedBuilding(x)) -> RequiresDeposit(x))", "all x y.((Apartment(x) & ManagedBuilding(y)) -> RequiredDeposit(x,y))", "all x y.((Apartment(x) & ManagedBuilding(y) & RequiresDeposit(x,y)) -> RentsIn(x,y))", "all x y z.((Apartment(x) & ManagedBuilding(y) & Apartment(z)) -> RequiresDeposit(x,y,z))", "all x y.((Apartment(x) & ManagedBuilding(y) & RequiredDeposit(x,y)) -> RentsIn(x,y))", "all x y.((Apartment(x) & ManagedBuilding(y) & RentsIn(x,y)) -> RequiresDeposit(x,y))", "all x y.((Apartment(x) & ManagedBuilding(y)) -> RequiresDepositToRent(x,y))", "all x y z.((Apartment(x) & ManagedBuilding(y) & Deposit(z)) -> RequiredToRent(x,y,z))", "all x y.((Board(x) & Apartment(y) & ManagedBuilding(y)) -> RequiresDeposit(x,y))", "all x y.((Apartment(x) & ManagedBuilding(y) & RentsIn(x,y)) -> RequiresDeposit(x))", "all x y.((Apartment(x) & ManagedBuilding(y) & Rents(x,y)) -> RequiresDeposit(x,y))", "all x y.((Apartment(x) & ManagedBuilding(y) & RequiresDeposit(x,y)) -> Rents(x,y))", "all x y.((Apartment(x) & ManagedBuilding(y)) -> DepositRequired(x,y))", "all x y.(((Apartment(x) & ManagedBuilding(y)) -> RequiresDeposit(x,y))", "all x y z.((Apartment(x) & ManagedBuilding(y) & Apartment(z)) -> RequiredDeposit(x,y,z))"]}
{"id": "folio_validation_258", "nl": "The security deposit can be either equal to one month's rent or more.", "fol": "all x.(MonthlyRent2000(x) <-> -DepositLessThanEqual1500(x))", "prediction": ["all x.(SecurityDeposit(x) -> (EqualMonthsRent(x) | MoreMonthsRent(x)))", "all x.(SecurityDeposit(x) -> (EqualToMonthsRent(x) | More(x)))", "all x.(SecurityDeposit(x) -> (OneMonthRent(x) | More(x)))", "all x.(SecurityDeposit(x) -> (OneMonthRent(x) | MoreMonthsRent(x)))", "all x.(SecurityDeposit(x) -> (EqualsMonthsRent(x) | MoreMonthsRent(x)))", "all x.(SecurityDeposit(x) -> (EqualMonthRent(x) | MoreMonthRent(x)))", "all x.(SecurityDeposit(x) -> (EqualToOneMonthsRent(x) | More(x)))", "all x.(SecurityDeposit(x) -> (Equal(x,months) | More(x,months)))", "all x.(SecurityDeposit(x) -> (OneMonthsRent(x) | MoreMonthsRent(x)))", "all x.(SecurityDeposit(x) -> (EqualMonthRent(x) | MoreMonthsRent(x)))", "all x.(SecurityDeposit(x) -> (EqualsMonthsRent(x) | More(x)))", "all x.(SecurityDeposit(x) -> (EqualToOneMonthRent(x) | More(x)))", "all x.(SecurityDeposit(x) -> (EqualMonthsRent(x) | More(x)))", "all x.(SecurityDeposit(x) -> (EqualsOneMonthsRent(x) | MoreMonthsRent(x)))", "all x.(SecurityDeposit(x) -> (EqualMomentRent(x) | More(x)))", "all x.(SecurityDeposit(x) -> (OneMonthsRent(x) | More(x)))"]}
{"id": "folio_validation_259", "nl": "Fluffy is Tom's cat.", "fol": "all x.(MonthlyRent2000(x) <-> DepositAtLeast2000(x))", "prediction": ["Fluffy is Tom's cat.", "((Fluffy(Fluffy) & TomsCat(Fluffy)) -> Cat(Fluffy))", "all x.(Fluffy(x) -> TomsCat(x))", "All x.(Fluffy(x) -> TomsCat(x))", "All x.(Fluffy(x) -> TomCat(x))", "(Cat(Fluffy) & TomsCat(Fluffy))", "all x.(Fluffy(x) -> TomCat(x))", "(Tom(Fluffy) & Cat(Fluffy))", "(Cat(Fluffy) & Tom(Fluffy))", "(TomCat(Fluffy) & Cat(Fluffy))", "((Fluffy(Fluffy) & TomsCat(Flucty)) -> Cat(Flucty))", "((Fluffy(Fluffy) & TomsCat(Flucy)) -> Cat(Flucy))", "((Fluffy(Fluffy) & TomsCat(Fluffy)) -> Cat(Flucy))", "(Cat(Fluffy) & Toms(Fluffy))", "(Fluffy(Fluffy) & TomsCat(Fluffy))", "Fluffy is Tom'sCat(x)"]}
{"id": "folio_validation_260", "nl": "Cats are pets.", "fol": "IsCat(Fluffy)", "prediction": ["all x.(Cat(x) -> Pet(x))", "all x y.((Cat(x) & Pet(y)) -> Pet(x,y))", "all x y.((Cat(x) & Pet(y)) -> Pet(x))", "all x y.((Cat(x) & Pet(y)) -> (Pet(x) & Pet(y)))", "all x y.((Cat(x) & Pet(y)) -> (Pet(x,y) | Pet(x,y)))", "all x y.((Cat(x) & Pet(y)) -> (Pet(x) | Pet(y)))", "all x.(Cat(x) -> Pet(x))", "all x y.((Cat(x) & Pet(y)) -> (Pet(x,y) & Pet(y)))", "all x y.((Cat(x) & Pet(y)) -> (Pet(x,y) & Pet(x,y)))", "all x y.((Cat(x) & Pet(y)) -> Animal(x))", "all x y.((Cat(x) & Pet(y)) -> (Animal(x) & Pet(y)))", "all x y.((Cat(x) & Pet(y)) -> (Pet(x) & Pet(x)))", "all x y.((Cat(x) & Pet(y)) -> (Pet(x,y) | Pet(y)))", "all x y.((Cat(x) & Pet(y)) -> (Pet(x) | Pet(x)))", "all x y.((Cat(x) & Pet(y)) -> Animal(x,y))", "all x y.((Cat(x) & Animal(y)) -> Pet(x,y))"]}
{"id": "folio_validation_261", "nl": "The Olive Garden is a managed building.", "fol": "all x.(IsCat(x) -> IsPet(x))", "prediction": ["all x.(OliveGarden(x) -> ManagedBuilding(x))", "All x.(OliveGarden(x) -> ManagedBuilding(x))", "all x.(OliveGarden(x) -> ManagedBuilding(x))", "all x y.((OliveGarden(x) & ManagedBuilding(y)) -> ManagedBuilding(x))", "exists x.(OliveGarden(x) & ManagedBuilding(x))", "all x.((OliveGarden(x) & ManagedBuilding(x)) -> ManagedBuilding(x))", "all x y.((OliveGarden(x) & ManagedBuilding(x)) -> ManagedBuilding(y))", "all x y.((OliveGarden(x) & ManagedBuilding(y)) -> ManagedBuilding(x,y))", "all x y.((OliveGarden(x) & ManagedBuilding(y)) -> Managed(x,y))", "all x y.((OliveGarden(x) & ManagedBuilding(x)) -> ManagedBuilding(x))", "all x y.((OliveGarden(x) & ManagedBuilding(y)) -> Managed(x))", "(ManagedBuilding(OliveGarden) & ManagedBuilding(OliveGarden))", "all x y.((OliveGarden(x) & ManagedBuilding(y)) -> LocatedIn(x,y))", "all x y.((OliveGarden(x) & ManagedBuilding(x)) -> Managed(y))", "All x.(OliveGarden(x) -> ManagedBuilding(x))", "all x.(OliveGarden(x) & ManagedBuilding(x))"]}
{"id": "folio_validation_262", "nl": "The monthly rent at the Olive Garden is $2000.", "fol": "IsManagedBuilding(OliveGarden)", "prediction": ["all x.((MonthlyRent(x) & OliveGarden(x)) -> $2000(x))", "all x.((MonthlyRent(x,y) & OliveGarden(y)) -> $2000(y))", "all x.((MonthlyRent(x,y) & OliveGarden(y)) -> $2000(x))", "all x.(MonthlyRent(x,y) -> OliveGarden(y))", "All x.((MonthlyRent(x) & OliveGarden(x)) -> $2000(x))", "all x y.((OliveGarden(x) & MonthlyRent(y)) -> $2000(y))", "all x y.((OliveGarden(x) & MonthlyRent(y,x)) -> $2000(y))", "all x y.((MonthlyRent(x,y) & OliveGarden(y)) -> $2000(y))", "all x y.((MonthlyRent(x) & OliveGarden(y)) -> $2000(y))", "all x y.((MonthlyRent(x,y) & OliveGarden(y)) -> $2000(x))", "all x y.((OliveGarden(x) & MonthlyRent(x,y)) -> $2000(y))", "all x y.((MonthlyRent(x,y) & OliveGarden(y)) -> Rent(x,y))", "all x y.((MonthlyRent(x) & OliveGarden(y)) -> Rent(x,y))", "all x y.((OliveGarden(x) & MonthlyRent(y)) -> $2000(x))", "All x.((MonthlyRent(x,y) & OliveGarden(y)) -> $2000(y))", "all x.(MonthlyRent(x) -> $2000(x))"]}
{"id": "folio_validation_263", "nl": "Tom will rent an apartment in a managed building if and only if he is allowed to move in with Fluffy, and the security deposit is no more than $1500.", "fol": "MonthlyRent2000(OliveGarden)", "prediction": ["all x y.((Tom(x) & ManagedBuilding(y) & MovesInWithFluffy(x,y) & SecurityDeposit(x,y)) -> RentsApartment(x,y))", "all x y.((Tom(x) & ManagedBuilding(y) & MovesInWithFluffy(x) & SecurityDeposit(x,y)) -> RentsApartment(x,y))", "all x y.((Tom(x) & ManagedBuilding(y) & MovesInWithFluffy(x,y) & SecurityDepositNoMoreThan(x,y)) -> RentsApartment(x,y))", "all x y.((Tom(x) & ManagedBuilding(y) & MovesInWithFluffy(x) & SecurityDeposit(x,y)) -> RentsApartment(x,y))", "all x y.((Tom(x) & ManagedBuilding(y) & MovesInWithFluffy(x,y) & SecurityDeposit(x,y)) -> RentsApartment(x,y))", "all x y.((Fluffy(x) & Apartment(y) & ManagedBuilding(x) & AllowedToMoveInWith(x,y) & SecurityDepositNoMoreThan(x,y)) -> Rents(x,y))", "all x y.((Fluffy(x) & Apartment(y) & ManagedBuilding(x) & MovesInWith(x,y) & SecurityDeposit(x,y)) -> Rents(x,y))", "all x y.((Tom(x) & ManagedBuilding(y) & AllowedToMoveInWithFluffy(x,y) & SecurityDeposit(x,y)) -> RentsApartment(x,y))", "all x y.((Tom(x) & ManagedBuilding(y) & AllowedToMoveInWithFluffy(x,y) & SecurityDeposit(x,y)) -> RentsApartment(x,y))", "all x y z.((Tom(x) & Apartment(y) & ManagedBuilding(z) & MovesInWithFluffy(x,y) & SecurityDeposit(x,z)) -> Rents(x,y,z))", "all x y.((Tom(x) & ManagedBuilding(y) & MovesInWithFluffy(x,y) & SecurityDeposit(x,y)) -> Rents(x,y))", "all x y z.((Apartment(x) & ManagedBuilding(y) & Fluffy(z) & MovesInWith(x,z) & SecurityDeposit(x,y,z)) -> Rents(x,y,z))", "all x y.((Tom(x) & ManagedBuilding(y) & MovesInWithFluffy(x) & SecurityDeposit(x,y)) -> Rents(x,y))", "all x y z.((Apartment(x) & ManagedBuilding(y) & Fluffy(z) & MovesInWith(x,z) & SecurityDepositNoMoreThan(x,y,z)) -> Rents(x,y,z))", "all x y z.((Tom(x) & Apartment(y) & ManagedBuilding(z) & MovesInWithFluffy(x,y) & SecurityDeposit(x,z)) -> RentsIn(x,y,z))", "all x y.((Fluffy(x) & Apartment(y) & ManagedBuilding(x) & AllowedToMoveInWith(x,y) & SecurityDepositNoMoreThan(x,y)) -> RentsIn(x,y))"]}
{"id": "folio_validation_264", "nl": "2000$ is more than $1500.", "fol": "all x.(TomRentingConditions(x) <-> (IsManagedBuilding(x) & AllowsPets(x) & DepositLessThanEqual1500(x)))", "prediction": ["all x.((2000$(x) & MoreThan(x,1000)) -> MoreThan(x,1000))", "all x.(2000$(x) -> MoreThan(x,1000))", "all x.((2000$(x) & MoreThan(x,1000)) -> MoreThan(x,2000))", "all x.((2000$(x) & MoreThan(x,500)) -> MoreThan(x,2000))", "(MoreThan(2000$) -> MoreThan(2000$))", "all x.((2000$(x) & MoreThan(x,1500)) -> MoreThan(x,2000))", "All x.((2000$(x) & MoreThan(x,1000)) -> MoreThan(x,1000))", "all x.(2000$(x) -> MoreThan(x,500))", "all x.((2000$(x) & MoreThan(x,500)) -> MoreThan(x,1000))", "All x.(2000$(x) -> MoreThan(x,1000))", "all x.((2000$(x) & MoreThan(x,1000)) -> MoreThan(x,500))", "all x.((2000$(x) & MoreThan(x,1000)) -> MoreThan(x,5000))", "all x.(2000$(x) -> MoreThan(x,1500))", "all x.((2000$(x) & MoreThan(x,1000)) -> MoreThan(x,1500))", "all x.((2000$(x) & MoreThan(x,500)) -> MoreThan(x,500))", "All x.((2000$(x) & MoreThan(x,1000)) -> MoreThan(x,2000))"]}
{"id": "folio_validation_265", "nl": "Tom will rent an apartment in The Olive Garden.", "fol": "TomRentingConditions(OliveGarden)", "prediction": ["all x y.((Tom(x) & Apartment(y)) -> RentsInOliveGarden(x,y))", "all x y z.((Tom(x) & Apartment(y) & OliveGarden(z)) -> Rents(x,y,z))", "all x y z.((Tom(x) & Apartment(y) & OliveGarden(z)) -> RentsIn(x,y,z))", "all x y.((Tom(x) & Apartment(y) & OliveGarden(y)) -> Rents(x,y))", "All x y.((Tom(x) & Apartment(y)) -> RentsInOliveGarden(x,y))", "All x y z.((Tom(x) & Apartment(y) & OliveGarden(z)) -> RentsIn(x,y,z))", "All x y z.((Tom(x) & Apartment(y) & OliveGarden(z)) -> Rents(x,y,z))", "all x y.((Tom(x) & OliveGarden(y)) -> RentsApartment(x,y))", "all x y.((Tom(x) & Apartment(y)) -> Rents(x,y))", "all x y.((Tom(x) & Apartment(y) & OliveGarden(y)) -> RentsIn(x,y))", "all x y.((Tom(x) & Apartment(y)) -> RentInOliveGarden(x,y))", "all x y z.((Tom(x) & Apartment(y) & OliveGarden(z)) -> Rent(x,y,z))", "all x.((Tom(x) & OliveGarden(y)) -> RentsApartment(x,y))", "all x y z.((Tom(x) & Apartment(y) & OliveGarden(z)) -> RentIn(x,y,z))", "all x y.((Tom(x) & Apartment(y) & OliveGarden(z)) -> Rents(x,y,z))", "all x y.((Tom(x) & Apartment(y) & OliveGarden(z)) -> RentsIn(x,y,z))"]}
{"id": "folio_validation_266", "nl": "Tom is allowed to move in an apartment in The Olive Garden with Fluffy.", "fol": "AllowsPets(OliveGarden)", "prediction": ["all x y z.((Tom(x) & Apartment(y) & OliveGarden(z) & Fluffy(x)) -> MovesIn(x,y,z))", "all x y z.((Tom(x) & Apartment(y) & OliveGarden(z) & Fluffy(y)) -> MovesIn(x,y,z))", "all x y z.((Tom(x) & Apartment(y) & OliveGarden(z) & Fluffy(z)) -> MovesIn(x,y,z))", "all x y z.((Tom(x) & Apartment(y) & OliveGarden(z)) -> MovesIn(x,y,z))", "all x y.((Tom(x) & Apartment(y) & OliveGarden(y) & Fluffy(x)) -> MovesIn(x,y))", "All x y z.((Tom(x) & Apartment(y) & OliveGarden(z) & Fluffy(x)) -> MovesIn(x,y,z))", "all x y z.((Tom(x) & Apartment(y) & OliveGarden(z) & Fluffy(x)) -> AllowedToMoveIn(x,y,z))", "all x y.((Tom(x) & Apartment(y) & InOliveGarden(x,y) & Fluffy(x)) -> MovesIn(x,y))", "all x y.((Tom(x) & Apartment(y) & OliveGarden(y) & Fluffy(x)) -> AllowedToMoveIn(x,y))", "all x y z.((Tom(x) & Apartment(y) & OliveGarden(z) & Fluffy(x)) -> AllowedToMoveIn(x,y,z))", "all x y z.((Tom(x) & Apartment(y) & OliveGarden(z) & Fluffy(x)) -> AllowedToMove(x,y,z))", "all x y z.((Tom(x) & Apartment(y) & OliveGarden(z) & Fluffy(x)) -> MovesInWith(x,y,z))", "all x y.((Tom(x) & Apartment(y) & InOliveGarden(x,y) & Fluffy(x)) -> AllowedToMoveIn(x,y))", "all x y z.((Tom(x) & Apartment(y) & OliveGarden(z) & Fluffy(x)) -> CanMoveIn(x,y,z))", "all x y.((Tom(x) & Apartment(y) & InOliveGarden(x,y) & Fluffy(x)) -> AllowedToMove(x,y))", "all x y.((Tom(x) & Apartment(y) & OliveGarden(y)) -> MovesIn(x,y))"]}
{"id": "folio_validation_267", "nl": "The security deposit at the Olive Garden is either $2000 or more.", "fol": "DepositAtLeast2000(OliveGarden)", "prediction": ["all x.(OliveGarden(x) -> (SecurityDeposit(x,2000) | SecurityDeposit(x,2000)))", "all x.(OliveGarden(x) -> (SecurityDeposit(x,2000) | More(x,2000)))", "all x.((SecurityDeposit(x) & OliveGarden(x)) -> (Mars2000(x) | More(x)))", "all x.(OliveGarden(x) -> (SecurityDeposit(x,250) | More(x,250)))", "all x.(OliveGarden(x) -> (SecurityDeposit(x,2) | SecurityDeposit(x,2)))", "all x.((SecurityDeposit(x) & OliveGarden(x)) -> ($2000(x) | More(x)))", "all x.(OliveGarden(x) -> (SecurityDeposit(x,250) | SecurityDeposit(x,250)))", "all x.(OliveGarden(x) -> (SecurityDeposit(x,2) | SecurityDeposit(x,3)))", "all x.((SecurityDeposit(x) & OliveGarden(x)) -> (Value(x,2000) | More(x,2000)))", "all x.(OliveGarden(x) -> (SecurityDeposit(x,2000) | SecurityDeposit(x,5000)))", "all x.(OliveGarden(x) -> (SecurityDeposit(x,2500) | SecurityDeposit(x,2500)))", "all x.((SecurityDeposit(x) & OliveGarden(x)) -> (Value(x,2000) | MoreValue(x,2000)))", "all x.((SecurityDeposit(x) & OliveGarden(x)) -> (Value(x,2000) | Value(x,2000)))", "all x.(OliveGarden(x) -> (SecurityDeposit(x,250) | More(x,2000)))", "all x.((SecurityDeposit(x) & OliveGarden(x)) -> (EstablishedAt(x,2000) | More(x,2000)))", "all x.(OliveGarden(x) -> (SecurityDeposit(x,2000) | SecurityDeposit(x,200)))"]}
{"id": "folio_validation_268", "nl": "If animals are loved by tourists, then they are Max's favorite animals. ", "fol": "all x.(LovedByTourists(x) -> MaxsFavoriteAnimals(x))", "prediction": ["all x.((Animal(x) & LovedByTourists(x)) -> FavoriteAnimal(x))", "all x.((Animal(x) & LovedByTourists(x)) -> MaxFavoriteAnimal(x))", "all x y.((Animal(x) & Tourist(y) & LovedBy(x,y)) -> FavoriteAnimal(x,y))", "all x.((Animal(x) & LovedByTourists(x)) -> Max'sFavoriteAnimal(x))", "all x.((Animal(x) & LovedByTourists(x)) -> FavoriteAnimal(x,Max))", "all x.((Animal(x) & LovedByTourists(x)) -> MaxsFavoriteAnimal(x))", "all x y.((Animal(x) & Tourist(y) & LovedBy(x,y)) -> MaxFavoriteAnimal(x))", "all x.((Animal(x) & LovedByTours(x)) -> MaxFavoriteAnimal(x))", "all x y.((Animal(x) & Tourist(y) & LovedBy(x,y)) -> MaxFavoriteAnimal(x,y))", "all x.((Animal(x) & LovedByTourist(x)) -> MaxFavoriteAnimal(x))", "all x.((Animal(x) & LovedByTourist(x)) -> FavoriteAnimal(x))", "all x.((Animals(x) & LovedByTourists(x)) -> MaxFavoriteAnimal(x))", "all x.((Animal(x) & LovedByTours(x)) -> FavoriteAnimal(x))", "all x y.((Animal(x) & Tourist(y) & LovedBy(x,y)) -> FavoriteAnimal(x))", "all x.((Animal(x) & LovedByTourists(x)) -> MaxFavoriteAnimal(x))", "all x.((Animals(x) & LovedByTourists(x)) -> FavoriteAnimal(x))"]}
{"id": "folio_validation_269", "nl": "All animals from Australia are loved by tourists. ", "fol": "all x.(FromAustralia(x) -> LovedByTourists(x))", "prediction": ["all x.((Animal(x) & FromAustralia(x)) -> LovedByTourists(x))", "all x.(Animal(x) -> LovedByTourists(x))", "all x.(AustralianAnimal(x) -> LovedByTourists(x))", "all x.((Animal(x) & LocatedInAustralia(x)) -> LovedByTourists(x))", "all x.((Animal(x) & FromAustralia(x)) -> LovedByTourists(x))", "all x.((Animal(x) & Australia(x)) -> LovedByTourists(x))", "all x y.((Animal(x) & Tourist(y)) -> LovedBy(x,y))", "all x.((Animal(x) & Australian(x)) -> LovedByTourists(x))", "all x.((Animal(x) & LocatedInAustralia(x)) -> LovedByTourists(x))", "all x.((Animal(x) & FromAustralia(x)) -> LovedByTourist(x))", "all x.((Animal(x) & FromAustralia(x)) -> LovedByTours(x))", "all x.((Animal(x) & FromAustralia(x)) -> LovedByTourists(x))", "all x.((Animal(x) & FromAustralie(x)) -> LovedByTourists(x))", "all x.(AustraliaAnimal(x) -> LovedByTourists(x))", "all x.((Animal(x) & FromAustralia(x)) -> LovedBy(x,Tourists))", "all x.((Animal(x) & FromAustralia(x)) -> LovedByTravelers(x))"]}
{"id": "folio_validation_270", "nl": "All quokka are animals from Australia. ", "fol": "all x.(IsQuokka(x) -> FromAustralia(x))", "prediction": ["all x.(Quokka(x) -> Animal(x))", "all x.(Quokka(x) -> AnimalFromAustralia(x))", "all x.(Quokka(x) -> (Animal(x) & FromAustralia(x)))", "all x.(Quokka(x) -> AustralianAnimal(x))", "all x.(Quokka(x) -> AnimalFromAustralia(x))", "all x.(Quokka(x) -> (Animal(x) & LocatedInAustralia(x)))", "all x.(Quokka(x) -> Animal(x))", "all x.(Quokka(x) -> AnimalFromAustralia(x))", "all x.(Quokka(x) -> Animal(x,Australia))", "all x.(Quokka(x) -> (Animal(x) & FromAustralia(x)))", "all x.(Quokka(x) -> (Animal(x) & Australia(x)))", "all x.(Quokka(x) -> AnimalsFromAustralia(x))", "all x.(Quokka(x) -> (Animal(x) & Australian(x)))", "all x.(Quokka(x) -> (Animal(x) & -Australian(x)))", "all x.(Quokka(x) -> (Animal(x) & OriginallyFromAustralia(x)))", "all x.(Quokka(x) -> (Animal(x) & LocatedIn(x,Australia)))"]}
{"id": "folio_validation_271", "nl": "All of Max's favorite animals are very fluffy.", "fol": "all x.(MaxsFavoriteAnimals(x) -> IsVeryFluffy(x))", "prediction": ["all x.(FavoriteAnimal(x) -> VeryFluffy(x))", "all x.(MaxFavoriteAnimal(x) -> VeryFluffy(x))", "all x.((Max(x) & FavoriteAnimal(x)) -> VeryFluffy(x))", "all x.((Animal(x) & Favorite(x,Max)) -> VeryFluffy(x))", "all x.(FavoriteAnimal(x,Max) -> VeryFluffy(x))", "all x.((Animal(x) & Favorite(x)) -> VeryFluffy(x))", "all x.(FavoriteAnimal(x) -> (FavoriteAnimal(x) & VeryFluffy(x)))", "all x.(FavoriteAnimal(x) -> Fluffy(x))", "all x.(MattFavoriteAnimal(x) -> VeryFluffy(x))", "all x.(FavoriteAnimal(x) -> (Fantastic(x) & VeryFluffy(x)))", "all x.(FavoriteAnimal(x) -> VeryFluffy(x))", "all x.(FavoriteAnimal(x) -> (Fantastic(x) | VeryFluffy(x)))", "all x.(FavouriteAnimal(x) -> VeryFluffy(x))", "all x.(FavoriteAnimal(x) -> (Favorite(x) & VeryFluffy(x)))", "all x.(FavoriteAnimal(x) -> Fancy(x))", "all x.(FavoriteAnimal(x) -> VeryFunny(x))"]}
{"id": "folio_validation_272", "nl": "All of Max's favorite animals love to sleep. ", "fol": "all x.(MaxsFavoriteAnimals(x) -> LovesToSleep(x))", "prediction": ["all x.(FavoriteAnimal(x) -> LovesToSleep(x))", "all x.(FavoriteAnimal(x) -> LoveToSleep(x))", "all x.(MaxFavoriteAnimal(x) -> LovesToSleep(x))", "all x.(FavoriteAnimal(x) -> LovesSleep(x))", "all x.((Animal(x) & Favorite(x)) -> LovesToSleep(x))", "all x.((Animal(x) & Favorite(x,Max)) -> LovesToSleep(x))", "all x.(FavoriteAnimal(x,Max) -> LovesToSleep(x))", "all x.((Max(x) & FavoriteAnimal(x)) -> LovesToSleep(x))", "all x.(MattFavoriteAnimal(x) -> LovesToSleep(x))", "all x.(FavoriteAnimal(x) -> LovesToSleep(x))", "all x y.((Animal(x) & Max(y)) -> LovesToSleep(x,y))", "all x.(FavoriteAnimal(x) -> Loves(x,Sleep))", "(FavoriteAnimal(Max) & LovesToSleep(Max))", "all x.(Animal(x) -> LovesToSleep(x))", "all x.((Animal(x) & Favorite(x)) -> LovesSleep(x))", "all x.((Animal(x) & Favorite(x,Max)) -> LovesSleep(x))"]}
{"id": "folio_validation_273", "nl": "If a koala is very fluffy, then the koala is not a quokka.", "fol": "(IsVeryFluffy(Koala) -> -IsQuokka(Koala))", "prediction": ["all x.((Koala(x) & VeryFluffy(x)) -> -Quokka(x))", "all x.(Fluffy(x) -> -Quokka(x))", "all x.((Koala(x) & Fluffy(x)) -> -Quokka(x))", "all x.((Koala(x) & VeryFuffy(x)) -> -Quokka(x))", "all x.((Koala(x) & Fluffy(x)) -> -Quokka(x))", "all x.((Koala(x) & SuperFluffy(x)) -> -Quokka(x))", "all x.((Koala(x) & VeryFlouncy(x)) -> -Quokka(x))", "all x.((Koala(x) & VeryFunny(x)) -> -Quokka(x))", "all x.((Koala(x) & Fluttery(x)) -> -Quokka(x))", "all x y.((Koala(x) & VeryFluffy(x)) -> -Quokka(y))", "all x.((Koala(x) & VeryFlucty(x)) -> -Quokka(x))", "all x.((Koala(x) & VeryFlourish(x)) -> -Quokka(x))", "all x.((Koala(x) & VeryFluffy(x)) -> -Quokka(x))", "all x.((Coala(x) & VeryFluffy(x)) -> -Quokka(x))", "all x.((Koala(x) & VeryFluffy(x)) -> NoQuokka(x))", "all x.((Koala(x) & Fancy(x)) -> -Quokka(x))"]}
{"id": "folio_validation_274", "nl": "Koalas love to sleep.", "fol": "LovesToSleep(Koala)", "prediction": ["all x.(Koala(x) -> LovesToSleep(x))", "all x.(Koala(x) -> LovesSleep(x))", "all x.(Koala(x) -> LovesSleeping(x))", "all x.(Koala(x) -> LoveToSleep(x))", "all x y.((Koala(x) & Sleep(y)) -> Loves(x,y))", "all x.(Koala(x) -> Loves(x,Sleep))", "all x y.((Koala(x) & Sleep(y)) -> Love(x,y))", "all x y.((Koala(x) & Sleep(y)) -> LovesToSleep(x,y))", "all x.(Koala(x) -> LoveSleep(x))", "all x y.((Koala(x) & Sleep(y)) -> LovesTo(x,y))", "all x.(Koala(x) -> LovesToSleep(x))", "all x y.((Koala(x) & Sleep(y)) -> LoveToSleep(x,y))", "all x.(Kala(x) -> LovesToSleep(x))", "all x.(Koala(x) -> Loves(x,sleep))", "all x y.((Koala(x) & Sleep(y)) -> LoveTo(x,y))", "all x.((Koala(x) & LovesSleeping(x)) -> LovesSleeping(x))"]}
{"id": "folio_validation_275", "nl": "Koalas love to sleep and are quokka.", "fol": "(LovesToSleep(Koala) & IsQuokka(Koala))", "prediction": ["all x.(Koala(x) -> (LovesSleeping(x) & Quokka(x)))", "all x.(Koala(x) -> (LovesToSleep(x) & Quokka(x)))", "all x.(Koala(x) -> (LovesSleep(x) & Quokka(x)))", "all x.(Koala(x) -> (LivingToSleep(x) & Quokka(x)))", "all x.(Koala(x) -> (LikesToSleep(x) & Quokka(x)))", "all x.(Koala(x) -> (LovesToSleep(x) & Quokka(x)))", "all x.(Koala(x) -> (Loves(x,Sleep) & Quokka(x)))", "all x.(Koala(x) -> (LikesSleeping(x) & Quokka(x)))", "all x.(Koala(x) -> (LoveToSleep(x) & Quokka(x)))", "all x.(Koala(x) -> (LittleToSleep(x) & Quokka(x)))", "all x.(Koala(x) -> (LOVESleep(x) & Quokka(x)))", "all x.(Koala(x) -> (LisesToSleep(x) & Quokka(x)))", "all x.(Koala(x) -> (LovingToSleep(x) & Quokka(x)))", "all x y.((Koala(x) & Sleep(y)) -> (Loves(x,y) & Quokka(x)))", "all x.(Koala(x) -> (LovesSleeping(x) & Quokka(x)))", "all x.(Koala(x) -> (LoveSleep(x) & Quokka(x)))"]}
{"id": "folio_validation_276", "nl": "If a koala is a quokka, then the koala either loves to sleep or is very fluffy, but not both.", "fol": "(IsQuokka(Koala) -> ((LovesToSleep(Koala) & -IsVeryFluffy(Koala)) | (-LovesToSleep(Koala) & IsVeryFluffy(Koala))))", "prediction": ["all x.((Koala(x) & Quokka(x)) -> ((LovesToSleep(x) | VeryFluffy(x)) & -(LovesToSleep(x) & VeryFluffy(x))))", "all x.((Koala(x) & Quokka(x)) -> ((LovesSleep(x) | VeryFluffy(x)) & -(LovesSleep(x) & VeryFluffy(x))))", "all x.((Koala(x) & Quokka(x)) -> ((LovesToSleep(x) | VeryFluffy(x)) & -(LovesToSleep(x) & VeryFluffy(x)))))", "all x.(Quokka(x) -> ((LovesToSleep(x) | VeryFluffy(x)) & -(LovesToSleep(x) & VeryFluffy(x))))", "all x.((Koala(x) & Quokka(x)) -> ((LovesSleep(x) | VeryFluffy(x)) & -(LovesSleep(x) & VeryFluffy(x)))))", "all x.((Koala(x) & Quokka(x)) -> (LovesToSleep(x) | VeryFluffy(x)))", "all x.((Koala(x) & Quokka(x)) -> ((LovesSleeping(x) | VeryFluffy(x)) & -(LovesSleeping(x) & VeryFluffy(x))))", "all x.(Quokka(x) -> ((LovesSleep(x) | VeryFluffy(x)) & -(LovesSleep(x) & VeryFluffy(x))))", "all x.((Koala(x) & Quokka(x)) -> ((LovesToSleep(x) | VeryFluffy(x)) & -(LovesToSleep(x) & Fluffy(x))))", "all x.((Koala(x) & Quokka(x)) -> (LovesSleep(x) | VeryFluffy(x)))", "all x.((Koala(x) & Quokka(x)) -> ((LovesSleeping(x) | VeryFluffy(x)) & -(LovesSleeping(x) & VeryFluffy(x)))))", "all x.((Koala(x) & Quokka(x)) -> ((LovesSleep(x) | VeryFluffy(x)) & -(LovesSleep(x) & Fluffy(x))))", "all x.(Quokka(x) -> ((Koala(x) & LovesSleep(x)) | (-LovesSleep(x) & Fluffy(x))))", "all x.((Koala(x) & Quokka(x)) -> ((LovesSleeping(x) | VeryFluffy(x)) & -(LovesSleeps(x) & VeryFluffy(x))))", "all x.((Koala(x) & Quokka(x)) -> ((LovesToSleep(x) & -Fluffy(x)) | (-LovesToSleep(x) & Fluffy(x))))", "all x.((Koala(x) & Quokka(x)) -> ((LovesSleeping(x) | VeryFluffy(x)) & -(LovesSleep(x) & VeryFluffy(x))))"]}
{"id": "folio_validation_277", "nl": "A man is either kind or evil.", "fol": "all x.((IsKind(x) & -IsEvil(x)) | (-IsKind(x) & IsEvil(x)))", "prediction": ["all x.(Man(x) -> (Kind(x) | Evil(x)))", "all x.(Man(x) -> ((Kind(x) | Evil(x))))", "all x.(Man(x) -> (Art(x) | Evil(x)))", "all x.(Man(x) -> (Type(x) | Evil(x)))", "exists x.(Man(x) & (Kind(x) | Evil(x)))", "all x.(Man(x) -> (IsKind(x) | IsEvil(x)))", "all x.(Man(x) -> (Good(x) | Evil(x)))", "all x.(Man(x) -> (Tief(x) | Evil(x)))", "all x.(Man(x) -> (Evil(x) | Kind(x)))", "all x.(Man(x) -> (kind(x) | evil(x)))", "all x.(Man(x) -> (Tirn(x) | Evil(x)))", "all x.(Man(x) -> ((Tief(x) | Evil(x))))", "exists x.(Man(x) & ((Kind(x) | Evil(x))))", "all x.(Man(x) -> ((Art(x) | Evil(x))))", "all x.(Man(x) -> ((kind(x) | evil(x))))", "exists x.(Man(x) & ((Kind(x) & Evil(x)) | Kind(x))))"]}
{"id": "folio_validation_278", "nl": "No ugly person is handsome.", "fol": "all x.(IsUgly(x) -> -IsHandsome(x))", "prediction": ["-exists x.(UglyPerson(x) & Beautiful(x))", "-exists x.(Ugly(x) & Beautiful(x))", "-exists x.(UglyPerson(x) & Beautiful(x))", "-exists x.(UglyPerson(x) & Nice(x))", "-all x.(UglyPerson(x) -> Beautiful(x))", "all x.(UglyPerson(x) -> -Beautiful(x))", "-exists x.(UglyPerson(x) & Pretty(x))", "-exists x.(UglyPerson(x) & Spacious(x))", "-exists x.(Ugly(x) & Beautiful(x))", "-exists x.(UglyPerson(x) & Beauteous(x))", "-exists x.(Ugly(x) & Nice(x))", "-exists x.(UglyPerson(x) & Brave(x))", "-exists x.(UglyPerson(x) & Beauty(x))", "-exists x.(UglyPerson(x) & Lovely(x))", "-all x.(UglyPerson(x) -> Pretty(x))", "-(UglyPerson(x) & Beautiful(x))"]}
{"id": "folio_validation_279", "nl": "All evil people are ugly.", "fol": "all x.(IsEvil(x) -> IsUgly(x))", "prediction": ["all x.(EvilPerson(x) -> Ugly(x))", "all x.(EvilPeople(x) -> Ugly(x))", "all x.(OddPerson(x) -> Ugly(x))", "all x.(Evil(x) -> Ugly(x))", "all x.(OddPeople(x) -> Ugly(x))", "all x.((EvilPerson(x) & Ugly(x)) -> Evil(x))", "all x.(OdiousPerson(x) -> Ugly(x))", "all x.(Odd(x) -> Ugly(x))", "all x.((EvilPerson(x) & Ugly(x)) -> Ugly(x))", "all x.(EvilPerson(x) -> Ugliest(x))", "all x.(EvilPerson(x) -> Ugly(x))", "all x.(EvilPerson(x) -> Uglier(x))", "all x.(Odious(x) -> Ugly(x))", "all x.((EvilPerson(x) & Ugly(x)) -> EvilPerson(x))", "all x.(EvilPopulist(x) -> Ugly(x))", "all x.(OdiousPeople(x) -> Ugly(x))"]}
{"id": "folio_validation_280", "nl": "All gentlemen are handsome.", "fol": "all x.(IsGentleman(x) -> IsHandsome(x))", "prediction": ["all x.(Gentleman(x) -> Beautiful(x))", "all x.(Gentlemen(x) -> Beautiful(x))", "all x.(Gentleman(x) -> Spacious(x))", "all x.(Gentlemen(x) -> Spacious(x))", "all x.(Gentleman(x) -> Pretty(x))", "all x.(Gentleman(x) -> Nice(x))", "all x.(Gentlemen(x) -> Pretty(x))", "all x.(Gentlemen(x) -> Nice(x))", "all x.(Gentleman(x) -> Beautiful(x))", "all x.(Groomer(x) -> Beautiful(x))", "all x.(Gentleman(x) -> Splendid(x))", "all x.(Groomer(x) -> Spacious(x))", "all x.(Gentleman(x) -> Lovely(x))", "all x.( Gentleman(x) -> Beautiful(x))", "all x.(Girlfriend(x) -> Beautiful(x))", "all x.(Gentleman(x) -> LooksSmooth(x))"]}
{"id": "folio_validation_281", "nl": "All CEOs are gentlemen.", "fol": "all x.(IsCEO(x) -> IsGentleman(x))", "prediction": ["all x.(CEO(x) -> Gentlemen(x))", "all x.(CEO(x) -> Gentleman(x))", "all x.(Chairman(x) -> Gentlemen(x))", "all x.(Chairman(x) -> Gentleman(x))", "all x y.((CEO(x) & Gentleman(y)) -> Gentleman(x))", "all x y.((CEO(x) & Gentleman(y)) -> Gentlemen(x))", "all x.(CEO(x) -> Gentlemen(x))", "all x.(Chair(x) -> Gentlemen(x))", "all x.exists y.(CEO(x) & Gentleman(y))", "all x.(CFO(x) -> Gentlemen(x))", "all x.(CEO(x) -> Gentleman(x))", "all x.(Company(x) -> Gentlemen(x))", "all x.(Chair(x) -> Gentleman(x))", "all x y.((CEO(x) & Gentleman(y)) -> Gentleman(x,y))", "(all x.(CEO(x) -> Gentleman(x)))", "(all x.(CEO(x) -> Gentlemen(x)))"]}
{"id": "folio_validation_282", "nl": "Harry is a gentleman.", "fol": "IsGentleman(Harry)", "prediction": ["all x.(Harry(x) -> Gentleman(x))", "all x.(Harris(x) -> Gentleman(x))", "all x.((Harry(x) & Gentleman(x)) -> Gentleman(x))", "(Person(Harry) & Gentleman(Harry))", "All x.(Harry(x) -> Gentleman(x))", "all x.((Harry(x) & Gentleman(x)) -> Is(x,y))", "(Gentleman(Harry) & Gentleman(Harry))", "all x.(Harry(x) -> Gentleman(x))", "all x.((Harry(x) & Gentleman(x)) -> Man(x))", "all x.(Harry(x) -> Gentlemen(x))", "exists x.(Harry(x) & Gentleman(x))", "all x.(Harris(x) -> Gentleman(x))", "all x.((Harry(x) & Gentleman(x)) -> Prince(x))", "all x.(Hory(x) -> Gentleman(x))", "all x.((Harry(x) & Gentleman(x)) -> Excellent(x))", "all x.((Harry(x) & Gentleman(x)) -> Fantastic(x))"]}
{"id": "folio_validation_283", "nl": "Harry is a CEO.", "fol": "IsCEO(Harry)", "prediction": ["(CEO(Harry) & CEO(Harry))", "all x.((Harry(x) & CEO(x)) -> CEO(x))", "all x.(Harry(x) -> CEO(x))", "all x.(Harris(x) -> CEO(x))", "all x.((Harry(x) & CEO(x)) -> Is(x,y))", "(CEO(Harry) | CEO(Harry)))", "all x.((Harry(x) & CEO(x)) -> Becomes(x))", "Harry is CEO.", "all x.((Harry(x) & CEO(x)) -> Has(x,y))", "all x.((Harry(x) & CEO(x)) -> Jobseeker(x))", "all x.((Harry(x) & CEO(x)) -> WorksFor(x,y))", "(CEO(Harry) & Founder(Harry))", "all x.(Chief(x) -> CEO(x))", "(CFO(Harry) & CEO(Harry))", "All x.(Harry(x) -> CEO(x))", "(Chairman(Harry) & CEO(Harry))"]}
{"id": "folio_validation_284", "nl": "Harry is kind or a CEO.", "fol": "(IsKind(Harry) | IsCEO(Harry))", "prediction": ["all x.(Harry(x) -> (Kind(x) | CEO(x)))", "all x.(Harry(x) -> (Art(x) | CEO(x)))", "all x.(Harry(x) -> (Type(x) | CEO(x)))", "all x.(Harry(x) -> ((Kind(x) | CEO(x))))", "all x.(Harris(x) -> (Kind(x) | CEO(x)))", "all x.(Harry(x) -> (IsKind(x) | CEO(x)))", "(exists x.(Harry(x) & Kind(x)) | exists y.(Harry(y) & CEO(y))))", "all x.(Harry(x) -> (Person(x) | CEO(x)))", "all x.(Harry(x) -> (HasKind(x) | HasCEO(x)))", "all x.(Harris(x) -> (Art(x) | CEO(x)))", "all x.(Harry(x) -> (Tief(x) | CEO(x)))", "(exists x.(Harry(x) & Kind(x)) | CEO(x)))", "all x.(Harris(x) -> ((Kind(x) | CEO(x))))", "all x.(Harry(x) -> ((Art(x) | CEO(x))))", "((Harry(Harry) | CEO(Harry)))", "all x.(Harry(x) -> (Tirn(x) | CEO(x)))"]}
{"id": "folio_validation_285", "nl": "If Harry is either both evil and ugly, or neither evil nor ugly, then Harry is neither kind nor a CEO.", "fol": "((((IsEvil(Harry) & IsUgly(Harry) & -(-IsEvil(Harry) & -IsUgly(Harry))) | (-(IsEvil(Harry) & IsUgly(Harry)) & -IsEvil(Harry) & -IsUgly(Harry))) -> -IsKind(Harry)) & -IsCEO(Harry))", "prediction": ["all x.((Harry(x) & (Evil(x) | Ugly(x))) | (-Evil(x) | Ugly(x)))))", "all x.((Harry(x) & (Evil(x) | Ugly(x))) | (-Evil(x) & Ugly(x))))", "all x.((Harry(x) & (Evil(x) | Ugly(x))) | (-Evil(x) & Ugly(x)))))", "all x.((Harry(x) & (Evil(x) | Ugly(x)) | -Evil(x) | -Ugly(x))) -> -(Kind(x) | CEO(x)))", "all x.((Harry(x) & (Evil(x) | Ugly(x))) | -Evil(x) | -Ugly(x)))", "all x.((Harry(x) & (Evil(x) | Ugly(x))) | -(Evil(x) | Ugly(x)))) -> -(Kind(x) | CEO(x)))", "all x.((Harry(x) & (Evil(x) | Ugly(x)) | -Evil(x) | -Ugly(x))) -> -Kind(x) & -CEO(x))", "all x.((Harry(x) & (Evil(x) | Ugly(x))) | -(Evil(x) & Ugly(x)))) -> -(Kind(x) | CEO(x)))", "all x.((Harry(x) & (Evil(x) | Ugly(x)) | -Evil(x) | -Ugly(x))) -> -Chairman(x))", "all x.((Harry(x) & (Evil(x) | Ugly(x)) | -Evil(x) | -Ugly(x))) -> (-Kind(x) & -CEO(x)))", "all x.((Harry(x) & (Evil(x) | Ugly(x))) | -Evil(x) & -Ugly(x)))", "all x.((Harry(x) & (Evil(x) | Ugly(x)) | -Evil(x) & Ugly(x))) -> -(Kind(x) | CEO(x)))", "all x.((Harry(x) & (Evil(x) | Ugly(x))) | (-Evil(x) & Ugly(x)))) -> -(Kind(x) | CEO(x)))", "all x.((Harry(x) & (Evil(x) | Ugly(x))) | -Evil(x) & -Ugly(x))) -> -(Kind(x) | CEO(x)))", "all x.((Harry(x) & (Evil(x) | Ugly(x))) | -(Evil(x) | Ugly(x)))))", "all x.((Harry(x) & (Evil(x) | Ugly(x)) | (-Evil(x) & Ugly(x)))) -> -(Kind(x) | CEO(x)))"]}
{"id": "folio_validation_286", "nl": "If people are twins or triplets, then they spend a lot of time hanging out with and playing with their siblings.", "fol": "all x.(IsTwinOrTriplet(x) -> SpendingTimeWithSiblings(x))", "prediction": ["all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithAndPlayingWithSiblings(x))", "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutAndPlayingWithSiblings(x))", "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithSiblingsAndPlayingWithSiblings(x))", "all x.(Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithAndPlayingWithSiblings(x))", "all x.(Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutAndPlayingWithSiblings(x))", "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithSistersAndPlayingWithSisters(x))", "all x.((Twin(x) | Triplet(x)) -> SpendsLossOfTimeHangingOutWithAndPlayingWithSiblings(x))", "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeWithSiblingsAndPlaysWithSiblings(x))", "all x.((Twins(x) | Triplets(x)) -> SpendsLittleTimeHangingOutWithAndPlayingWithSiblings(x))", "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithAndPlayingWithSisters(x))", "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOut(x) & PlayingWithSiblings(x))", "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHungingOutWithAndPlayingWithSiblings(x))", "all x.((Twins(x) | Triplets(x)) -> SpendsLittleTimeHangingOutAndPlayingWithSiblings(x))", "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHungryWithAndPlayingWithSiblings(x))", "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTime(x))", "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutAndPlayingWithSisters(x))"]}
{"id": "folio_validation_287", "nl": "If people have siblings who are the same age, then they are twins or triplets.", "fol": "all x.(SiblingsSameAge(x) -> IsTwinOrTriplet(x))", "prediction": ["all x.((Siblings(x) & SameAge(x)) -> (Twins(x) | Triplets(x)))", "all x.((Sibling(x) & SameAge(x)) -> (Twins(x) | Triplets(x)))", "all x.((Person(x) & SiblingsSameAge(x)) -> (Twins(x) | Triplets(x)))", "all x.((Person(x) & HasSiblingsSameAge(x)) -> (Twins(x) | Triplets(x)))", "all x.(Siblings(x) -> (Twins(x) | Triplets(x)))", "all x.((Sibling(x) & SameAge(x)) -> (Twin(x) | Triplet(x)))", "all x.(SiblingsSameAge(x) -> (Twins(x) | Triplets(x)))", "all x.((People(x) & SiblingsSameAge(x)) -> (Twins(x) | Triplets(x)))", "all x.((People(x) & HasSiblingsSameAge(x)) -> (Twins(x) | Triplets(x)))", "all x.((HasSiblings(x) & SameAge(x)) -> (Twins(x) | Triplets(x)))", "all x.((Person(x) & SiblingsAgeSame(x)) -> (Twins(x) | Triplets(x)))", "all x.(Sibling(x) -> (Twin(x) | Triplet(x)))", "all x.((Person(x) & HasSiblingsSameAge(x)) -> (Twin(x) | Triplet(x)))", "all x.((Person(x) & SiblingsSameAge(x)) -> (Twin(x) | Triplet(x)))", "all x.(SiblingSameAge(x) -> (Twins(x) | Triplets(x)))", "all x.((Siblings(x) & SameAge(x)) -> (Twin(x) | Triplet(x)))"]}
{"id": "folio_validation_288", "nl": "If people complain often about annoying siblings, then they have siblings who are the same age.", "fol": "all x.(ComplainAboutSiblings(x) -> SiblingsSameAge(x))", "prediction": ["all x.((Person(x) & ComplainsOfEnormousSiblings(x)) -> SameAgeSiblings(x))", "all x.((People(x) & ComplainsOfEnormousSiblings(x)) -> SiblingsSameAge(x))", "all x.((People(x) & ComplainsOfEnormousSiblings(x)) -> SameAgeSiblings(x))", "all x.((Person(x) & ComplainsOfEnormousSiblings(x)) -> SiblingsSameAge(x))", "all x.((Person(x) & ComplainsOfEnormousSiblings(x)) -> HasSiblingsSameAge(x))", "all x.((People(x) & ComplainsOften(x) & EnnoblingSiblings(x)) -> SameAgeSiblings(x))", "all x.((People(x) & ComplainsOfEnormousSiblings(x)) -> HasSiblingsSameAge(x))", "all x.((Person(x) & ComplainsOften(x) & EnnoblingSiblings(x)) -> SameAgeSiblings(x))", "all x.((People(x) & ComplainsOften(x) & EnnoblingSiblings(x)) -> SiblingsSameAge(x))", "all x.((People(x) & ComplainsOfEnnoblingSiblings(x)) -> SiblingsSameAge(x))", "all x.((Person(x) & ComplainsOfEnnoblingSiblings(x)) -> SiblingsSameAge(x))", "all x.((Person(x) & ComplainsOftenAboutIntriguingSiblings(x)) -> SiblingsSameAge(x))", "all x.((Person(x) & ComplainsOftenAboutEnormousSiblings(x)) -> SiblingsSameAge(x))", "all x.((Person(x) & ComplainsOften(x) & EnnoblingSiblings(x)) -> SiblingsSameAge(x))", "all x y.((Person(x) & Sibling(y) & ComplainsOf(x,y)) -> SameAge(x,y))", "all x y.((Person(x) & Sibling(y) & ComplainsOften(x,y)) -> SameAge(x,y))"]}
{"id": "folio_validation_289", "nl": "If people do not live at home regularly, then they do not develop strong bonds with their family members.", "fol": "all x.(DoesNotLiveAtHome(x) -> -DevelopStrongFamilyBonds(x))", "prediction": ["all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(x))", "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(x))", "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopingStrongBondsWithFamily(x))", "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBonds(x))", "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopedStrongBondsWithFamily(x))", "all x.((People(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(x))", "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBonds(x))", "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -StrongBondsWithFamily(x))", "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamilyMembers(x))", "all x.((People(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(x))", "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopingStrongBonds(x))", "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -BuildsStrongBondsWithFamily(x))", "all x.((People(x) & -LivesAtHomeRegularly(x)) -> -DevelopingStrongBondsWithFamily(x))", "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamilyMembers(x))", "all x.((Person(x) & LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(x))", "all x.((People(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBonds(x))"]}
{"id": "folio_validation_290", "nl": "If people spend a lot of time hanging out with and playing with their siblings, then they often did not live at home regularly.", "fol": "all x.(SpendingTimeWithSiblings(x) -> DoesNotLiveAtHome(x))", "prediction": ["all x.((People(x) & SpendsLotOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> OftenDoesNotLiveAtHomeRegularly(x))", "all x.((People(x) & SpendsLootOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> OftenDoesNotLiveAtHomeRegularly(x))", "all x.((Person(x) & SpendsLotOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> OftenDoesNotLiveAtHomeRegularly(x))", "all x.((People(x) & SpendsLotOfTimeHangingOut(x) & PlayingWithSiblings(x)) -> OftenDoesNotLiveAtHomeRegularly(x))", "all x.((People(x) & SpendsLotOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> OftenNotLiveAtHomeRegularly(x))", "all x.((Person(x) & SpendsLootOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> OftenDoesNotLiveAtHomeRegularly(x))", "all x.((Person(x) & SpendsLittleTimeHangingOutWithSiblings(x) & SpendsLittleTimePlayingWithSiblings(x)) -> OftenDoesNotLiveAtHomeRegularly(x))", "all x.((People(x) & SpendsLotOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> -LivesAtHomeRegularly(x))", "all x.((People(x) & SpendsLotOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> -LiveAtHomeRegularly(x))", "all x.((Person(x) & SpendsLittleTimeHangingOutWithSiblings(x) & SpendsLittleTimePlayingWithSiblings(x)) -> -LivesAtHomeRegularly(x))", "all x.((Person(x) & SpendsLotOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> -LivesAtHomeRegularly(x))", "all x.((Person(x) & SpendsLittleTimeHangingOutWithSiblings(x) & SpendsLittleTimePlayingWithSiblings(x)) -> OftenLittleAtHomeRegularly(x))", "all x.((People(x) & SpendsLotOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> OftenLittleAtHomeRegularly(x))", "all x.((People(x) & SpendsLotOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> OftenLittleAtHome(x))", "all x.((Person(x) & SpendsLotOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> OftenLittleAtHome(x))", "all x.((People(x) & SpendsLootOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> OftenLittleAtHome(x))"]}
{"id": "folio_validation_291", "nl": "Luke is either both a twin or triplet and develops strong bonds with his family members, or he neither is a twin or triplet nor develops strong bonds with his family members.   ", "fol": "((IsTwinOrTriplet(Luke) & DevelopStrongFamilyBonds(Luke) & -(-IsTwinOrTriplet(Luke) & -DevelopStrongFamilyBonds(Luke))) | (-(IsTwinOrTriplet(Luke) & DevelopStrongFamilyBonds(Luke)) & -IsTwinOrTriplet(Luke) & -DevelopStrongFamilyBonds(Luke)))", "prediction": ["all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & StrongBondsWithFamily(x)) | (-Twin(x) | Triplet(x)) & StrongBondsWithFamily(x))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & StrongBondsWithFamily(x)) | (-Twin(x) & Triplet(x) & StrongBondsWithFamily(x))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & StrongBonds(x)) | (-Twin(x) & StrongBonds(x)) | (-Twin(x) & StrongBonds(x)))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & StrongBondsWithFamily(x)) | (-Twin(x) & StrongBondsWithFamily(x)) | (-Twin(x) & StrongBondsWithFamily(x)))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & StrongBonds(x)) | (-Twin(x) | Triplet(x)) & StrongBonds(x))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & DevelopsStrongBonds(x)) | (-Twin(x) & Triplet(x) & DevelopsStrongBonds(x))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & StrongBondsWithFamily(x)) | (-Twin(x) & Triplet(x)) & -StrongBondsWithFamily(x))))", "all x y.((Luke(x) & FamilyMember(y)) -> ((Twin(x) | Triplet(x)) & StrongBonds(x,y)) | (-Twin(x) & Triplet(x) & StrongBonds(x,y))))", "all x y.((Luke(x) & FamilyMember(y)) -> ((Twin(x) | Triplet(x)) & StrongBonds(x)) | (-Twin(x) & Triplet(x) & StrongBonds(x))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & DevelopsStrongBondsWithFamily(x)) | (-Twin(x) & Triplet(x) & DevelopsStrongBondsWithFamily(x))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & StrongBonds(x)) | (-Twin(x) & Triplet(x) & StrongBonds(x))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & StrongBonds(x)) | (-Twin(x) & StrongBonds(x)) | (-Twin(x) & StrongBonds(x) & StrongBonds(x)))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & DevelopsStrongBonds(x)) | (-Twin(x) & Triplet(x)) & -DevelopsStrongBonds(x))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & DevelopsStrongBonds(x)) | (-Twin(x) & Triplet(x) & DevelopsStrongBonds(x)))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & StrongBondsWithFamily(x)) | (-Twin(x) & Triplet(x)) & StrongBondsWithFamily(x))))", "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & StrongBondsWithFamily(x)) | (-Twin(x) & StrongBondsWithFamily(x)))))"]}
{"id": "folio_validation_292", "nl": "Luke spends a lot of time hanging out and playing with his siblings.", "fol": "SpendingTimeWithSiblings(Luke)", "prediction": ["all x.(Luke(x) -> (HangsOut(x) & PlaysWithSiblings(x)))", "all x y.((Luke(x) & Sibling(y)) -> (HangsOut(x,y) & PlaysWith(x,y)))", "all x y.((Luke(x) & Siblings(y)) -> (HangsOut(x,y) & PlaysWith(x,y)))", "all x y z.((Luke(x) & Sibling(y) & Sibling(z)) -> (HangsOut(x,y) & PlaysWith(x,z)))", "all x y.((Luke(x) & Sibling(y)) -> SpendsLittleTimeHangingOutAndPlayingWith(x,y))", "all x y.((Luke(x) & Sibling(y)) -> SpendsLittleTimeHangingOutAndPlaying(x,y))", "all x y.((Luke(x) & Siblings(y)) -> SpendsLittleTimeHangingOutAndPlaying(x,y))", "all x y z.((Luke(x) & Sibling(y) & Sibling(z)) -> (HangsOut(x,y) & PlaysWith(x,y,z)))", "all x y.((Luke(x) & Siblings(y)) -> SpendsLittleTimeHangingOutAndPlayingWith(x,y))", "all x y z.((Luke(x) & Siblings(y) & Siblings(z)) -> (HangsOut(x,y) & PlaysWith(x,z)))", "all x.((Luke(x) & Siblings(y)) -> SpendsLittleTimeHangingOutAndPlaying(x,y))", "all x y.((Luke(x) & Sibling(y)) -> SpendsLittleTime(x,y))", "all x.(Luke(x) -> (StaysOut(x) & PlaysWithSiblings(x)))", "all x y z.((Luke(x) & Sibling(y) & Sibling(z)) -> (StaysOut(x,y) & PlaysWith(x,z)))", "all x.(Luke(x) -> SpendsLittleTimeHangingOutAndPlayingWithSiblings(x))", "all x.((Luke(x) & Sibling(y)) -> SpendsLittleTimeHangingOutAndPlayingWith(x,y))"]}
{"id": "folio_validation_293", "nl": "Luke complains often about annoying siblings.", "fol": "ComplainAboutSiblings(Luke)", "prediction": ["all x y.((Luke(x) & Sibling(y)) -> ComplainsOf(x,y))", "all x y.((Luke(x) & Sibling(y)) -> ComplainsAbout(x,y))", "all x y.((Luke(x) & Sibling(y)) -> ComplainsOften(x,y))", "all x y.((Luke(x) & Sibling(y)) -> ComplainsFor(x,y))", "all x y.((Luke(x) & Sibling(y)) -> Complains(x,y))", "all x y.((Luke(x) & Sibling(y)) -> OftenComplainsAbout(x,y))", "all x y.((Luke(x) & Sister(y)) -> ComplainsOf(x,y))", "all x.((Luke(x) & IntriguingSiblings(x)) -> ComplainsOf(x,Luke))", "all x y z.((Luke(x) & Sibling(y) & Sibling(z)) -> ComplainsOf(x,y,z))", "all x y.((Luke(x) & Sibling(y)) -> (Complains(x,y) & Enrages(x,y)))", "all x y.((Luke(x) & Sibling(y)) -> ComplainsAt(x,y))", "all x y z.((Luke(x) & Sibling(y) & Sibling(z)) -> ComplainsAbout(x,y,z))", "all x.((Luke(x) & IntriguingSiblings(x)) -> ComplainsOf(x,y))", "all x y.((Luke(x) & Sibling(y)) -> OftenComplains(x,y))", "all x y.((Luke(x) & Sibling(y)) -> (Complains(x,y) & Intriguing(x,y)))", "all x.((Luke(x) & EnragedSiblings(x)) -> ComplainsOf(x,Luke))"]}
{"id": "folio_validation_294", "nl": "Luke is neither a twin nor triplet nor complains often about annoying siblings.", "fol": "-(IsTwinOrTriplet(Luke) | ComplainAboutSiblings(Luke))", "prediction": ["(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuurururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururur", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-LuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuurururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururUUUUUUUUUUUUUUUUU", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-LuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururUUUUUUUUUUUUUUUU", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "(-(Twin(Luke) | Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke))) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Triplet(Luke)) & -(Luke(Luke) & -Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-Luke-LuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuurururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururururU"]}
{"id": "folio_validation_295", "nl": "It costs US $205 to take the GRE test.", "fol": "CostOfGRE(Gre)", "prediction": ["all x y.((GRETest(x) & US$205(y)) -> Costs(x,y))", "all x y.((GRETest(x) & Takes(x,y)) -> Costs(x,y))", "all x.((GRETest(x) & CostsUS205(x)) -> TakesTest(x))", "all x.((GRETest(x) & CostsUS205(x)) -> Takes(x,y))", "all x y.((GRETest(x) & US$205(y)) -> CostToTake(x,y))", "all x.((GRETest(x) & US$205(x)) -> Costs(x))", "all x.((GRETest(x) & Costs$205(x)) -> Takes(x,y))", "All x.((GRETest(x) & CostsUS205(x)) -> Takes(x,y))", "All x.((GRETest(x) & CostsUS205(x)) -> TakesTest(x))", "all x.((GRETest(x) & Costs(x,US)) -> Costs(x,US))", "all x.((GRETest(x) & Costs(x,US,205)) -> Costs(x,US,205))", "all x y.((GRETest(x) & Cost(y)) -> Costs(x,y))", "all x y.((GRETest(x) & Takes(x,y)) -> Costs(y,x))", "all x.((GRETest(x) & Costs(x,205)) -> Costs(x,205))", "all x.((GRETest(x) & Costs(x,200)) -> Costs(x,200))", "all x.(GRETest(x) -> CostsUS205(x))"]}
{"id": "folio_validation_296", "nl": "ETS provides financial aid to those GRE applicants who prove economic hardship.", "fol": "all x.(CostOfGRE(x) -> AffordableCost(x))", "prediction": ["all x.((GREApplication(x) & EconomicHardness(x)) -> ProvidesFinancialAid(x))", "all x y.((ETS(x) & GREApplication(y) & EconomicHardness(y)) -> ProvidesFinancialAid(x,y))", "all x.((ETS(x) & GREApplication(x) & EconomicHardness(x)) -> ProvidesFinancialAid(x))", "all x y.((ETS(x) & GREApplication(y) & ProvesEconomicHardness(x,y)) -> ProvidesFinancialAid(x,y))", "all x y.((ETS(x) & GREApplication(y) & ProvesEconomicHardness(y)) -> ProvidesFinancialAid(x,y))", "all x y z.((ETS(x) & GREApplication(y) & EconomicHardness(z)) -> ProvidesFinancialAid(x,y,z))", "all x y.((ETS(x) & GREApplication(y) & EconomicHardship(y)) -> ProvidesFinancialAid(x,y))", "all x.((GREApplication(x) & ProvesEconomicHardness(x)) -> ProvidesFinancialAid(x))", "all x.((GREApplication(x) & EconomicHardship(x)) -> ProvidesFinancialAid(x))", "all x y z.((ETS(x) & GREApplication(y) & EconomicHardness(z)) -> ProvidesFinancialAid(x,y))", "all x y.((ETS(x) & GREApplication(y) & ProvesEconomicHardness(x)) -> ProvidesFinancialAid(x,y))", "all x y.((GREApplication(x) & GREApplication(y) & ProvesEconomicHardness(x,y)) -> ProvidesFinancialAid(x,y))", "all x.((GREApplicant(x) & EconomicHardness(x)) -> ProvidesFinancialAid(x))", "all x y.((GREApplication(x) & GREApplication(y) & EconomicHardness(y)) -> ProvidesFinancialAid(x,y))", "all x y z.((ETS(x) & GREApplication(y) & EconomicHardness(z) & Proves(x,y,z)) -> ProvidesFinancialAid(x,y))", "all x y z.((ETS(x) & GREApplication(y) & EconomicHardness(z) & Proves(x,y,z)) -> ProvidesFinancialAid(x))"]}
{"id": "folio_validation_297", "nl": "Economic hardship refers to difficulty caused by having too little money or too few resources.", "fol": "all x.(EconomicHardship(x) -> ProvidesFinancialAid(x))", "prediction": ["all x.((EconomicHardship(x) & (LittleMoney(x) | FewResources(x))) -> Difficulty(x))", "all x.((EconomicHardship(x) & (LittleMoney(x) | FewResources(x))) -> DifficultyCausedBy(x))", "all x.((EconomicHardness(x) & (LittleMoney(x) | FewResources(x))) -> Difficulty(x))", "all x.((EconomicHardness(x) & (LittleMoney(x) | FewResources(x))) -> DifficultyCausedBy(x))", "all x.((EconomicHardship(x) & (LittleMoney(x) | FewResources(x))) -> CausedBy(x))", "all x.((EconomicHardship(x) & (LittleMoney(x) | FewResources(x))) -> CausesDifficulty(x))", "all x.((EconomicHardship(x) & (LittleMoney(x) | FewResources(x))) -> CausedDifficulty(x))", "all x.((EconomicHardship(x) & (TooLittleMoney(x) | TooLittleResources(x))) -> Difficulty(x))", "all x.((EconomicHardness(x) & (LittleMoney(x) | FewResources(x))) -> CausedBy(x))", "all x y.((EconomicHardship(x) & (LittleMoney(y) | FewResources(y))) -> DifficultyCausedBy(x,y))", "all x.((EconomicHardship(x) & (LittleMoney(x) | FewResources(x))) -> DifficultyCaused(x))", "all x.((EconomicHardship(x) & (LittleMoney(x) | FewResources(x))) -> DifficultyCausedBy(x,y))", "all x y.((EconomicHardship(x) & (LittleMoney(y) | FewResources(y))) -> CausedBy(x,y))", "all x y.((EconomicHardness(x) & (LittleMoney(y) | FewResources(y))) -> CausedBy(x,y))", "all x.((EconomicalHardship(x) & (LittleMoney(x) | FewResources(x))) -> Difficulty(x))", "all x y.((EconomicHardship(x) & (LittleMoney(y) | FewResources(y))) -> Difficulty(x,y))"]}
{"id": "folio_validation_298", "nl": "Tom lives in a single-parent family.", "fol": "all x.((LivesInSingleParentFamily(x) | HasFewResources(x)) -> EconomicHardship(x))", "prediction": ["all x.((Tom(x) & SingleParentFamily(x)) -> LivesIn(x,Tom))", "all x y.((Tom(x) & SingleParentFamily(y)) -> LivesIn(x,y))", "all x.((Tom(x) & SingleParentFamily(x)) -> LivesIn(x))", "all x y.((Tom(x) & SingleParent(y)) -> LivesIn(x,y))", "all x.((Tom(x) & SingleParentFamily(x)) -> LivesIn(x,y))", "all x.((Tom(x) & SingleParentFamily(x)) -> LivesIn(x,tom))", "all x.((Tom(x) & SingleParent(x)) -> LivesIn(x,Tom))", "all x.((Tom(x) & SingleParent(x)) -> LivesIn(x,y))", "all x y z.((Tom(x) & SingleParent(y) & Family(z)) -> LivesIn(x,y,z))", "all x y z.((Tom(x) & SingleParentFamily(y) & Family(z)) -> LivesIn(x,y,z))", "all x.((Tom(x) & SingleParentFamily(x)) -> LivesIn(x,Tom,x))", "all x.(Tom(x) -> exists y.(SingleParentFamily(y) & LivesIn(x,y)))", "all x.(Tom(x) -> exists y.(SingleParentFamily(y) & LivesIn(x,y))))", "all x.(Tom(x) -> SingleParentFamily(x))", "all x y.((Tom(x) & SingleParentFamily(x)) -> LivesIn(x,y))", "all x.(Tom(x) -> LivesInSingleParentFamily(x))"]}
{"id": "folio_validation_299", "nl": "His dad has been out of work for more than a year.", "fol": "LivesInSingleParentFamily(Tom)", "prediction": ["all x.(Dad(x) -> OutOfWorkForMoreThanYear(x))", "all x.((Dad(x) & OutOfWork(x)) -> MoreThanYear(x))", "all x y.((Dad(x) & Dad(y)) -> OutOfWorkForMoreThanYear(x,y))", "all x.((Dad(x) & OutOfWorkForMoreThanYear(x)) -> OutOfWork(x))", "all x.(Dad(x) & OutOfWorkForMoreThanYear(x))", "all x y.((Dad(x) & OutOfWork(y)) -> MoreThanYear(x,y))", "all x.((Dad(x) & OutOfWork(x)) -> MoreThanYears(x))", "all x y.((Dad(x) & Dad(y)) -> OutOfWork(x,y))", "all x.(Dad(x) -> OutOfWorkForMoreThanOneYear(x))", "all x.(Dad(x) & OutOfWork(x) & MoreThanYear(x))", "all x y.((Dad(x) & OutOfWork(x,y)) -> MoreThanYear(x))", "all x.((Dad(x) & OutOfWork(x,y)) -> MoreThanYear(y))", "all x.(Dad(x) -> OutOfWorkForMoreThanAyr(x))", "all x.((Dad(x) & OutOfWorkForMoreThanYear(x)) -> DadOutOfWork(x))", "all x y.((Dad(x) & OutOfWork(x,y)) -> MoreThanYear(y))", "exists x.(Dad(x) & OutOfWork(x) & MoreThanYear(x))"]}
{"id": "folio_validation_300", "nl": "Tom can apply for financial aid from ETS to take the GRE test.", "fol": "ProvidesFinancialAid(Tom)", "prediction": ["all x y.((Tom(x) & ETS(y)) -> CanApplicationForFinancialAid(x,y))", "all x y.((Tom(x) & ETS(y)) -> CanApplyForFinancialAid(x,y))", "all x y.((Tom(x) & ETS(y)) -> (AppliesForFinancialAid(x,y) & TakesGRETest(x,y)))", "all x y.((Tom(x) & ETS(y)) -> (AppliesForFinancialAid(x,y) & TakesGRETest(x)))", "all x y.((Tom(x) & FinancialAid(y) & ETS(x)) -> CanTakeGRETest(x,y))", "all x y.((Tom(x) & ETS(y)) -> CanApplyForFinancialAidToTakeGRETest(x,y))", "all x y z.((Tom(x) & FinancialAid(y) & ETS(z)) -> CanApplyFor(x,y,z))", "all x y.((Tom(x) & ETS(y)) -> CanAppointForFinancialAid(x,y))", "all x y.((Tom(x) & ETS(y)) -> CanApplicationForFinancialAidToTakeGRETest(x,y))", "all x y z.((Tom(x) & FinancialAid(y) & ETS(z)) -> CanApplicationFor(x,y,z))", "all x y.((Tom(x) & FinancialAid(y) & ETS(x)) -> CanTakeGRE(x,y))", "all x y.((Tom(x) & FinancialAid(y) & ETS(y)) -> CanTakeGRETest(x,y))", "all x y.((Tom(x) & ETS(y)) -> (AppliesForFinancialAid(x,y) & TakesGRE(x)))", "all x.((Tom(x) & ETSFinancialAid(x)) -> TakesGRETest(x))", "all x y.((Tom(x) & ETS(y)) -> CanApplyForFinancialAidToTakeGRE(x,y))", "all x.((Tom(x) & ETS(x)) -> CanApplyForFinancialAid(x))"]}
{"id": "folio_validation_301", "nl": "It cost below US $300 to take the GRE test.", "fol": "AffordableCost(Gre)", "prediction": ["all x.((GRETest(x) & UnderUS300(x)) -> CostsAboveUS300(x))", "all x.((GRETest(x) & BelowUS300(x)) -> CostsAboveUS300(x))", "all x.((GRETest(x) & CostBelowUS300(x)) -> CostsAboveUS300(x))", "all x.((GRETest(x) & AboveUS300(x)) -> CostsAboveUS300(x))", "all x.((GRETest(x) & CostBelowUS300(x)) -> CostsBelowUS300(x))", "all x.((GRETest(x) & UnderUS300(x)) -> CostsBelowUS300(x))", "all x.((GRETest(x) & BelowUS300(x)) -> CostsBelowUS300(x))", "all x.((GRETest(x) & CostsBelowUS300(x)) -> CostsAboveUS300(x))", "all x y.((GRETest(x) & US300(y)) -> CostBelow(x,y))", "all x.((GRETest(x) & CostsBelowUS300(x)) -> CostsBelowUS300(x))", "all x.((GRETest(x) & CostBelowUS300(x)) -> CostUnderUS300(x))", "all x.((GRETest(x) & CostBelow(x,300)) -> CostsAbove(x,300))", "all x.((GRETest(x) & CostBelow300(x)) -> CostsAbove300(x))", "all x.((GRETest(x) & CostBelowUS300(x)) -> TakesTest(x))", "all x.(GRETest(x) -> CostBelowUS300(x))", "all x.((GRETest(x) & CostsBelowUS300(x)) -> TakesTest(x))"]}
{"id": "folio_validation_302", "nl": "There is no financial aid available for the GRE test.", "fol": "-exists x.ProvidesFinancialAid(x)", "prediction": ["-exists x.(FinancialAid(x) & AvailableForGRETest(x))", "-exists x.(FinancialAid(x) & GRETest(x))", "-exists x.(FinancialAid(x) & ForGRETest(x))", "(-exists x.(FinancialAid(x) & AvailableForGRETest(x)))", "all x.((FinancialAid(x) & GRETest(x)) -> -exists y.(FinancialAid(y) & AvailableFor(x,y))))", "all x.((FinancialAid(x) & GRETest(x)) -> -exists y.(FinancialAid(y) & AvailableFor(x,y)))", "all x.((FinancialAid(x) & GRETest(x)) -> -exists y.(FinancialAid(y) & AvailableFor(y,x))))", "-exists x.(FinancialAid(x) & AvailableForGRE(x))", "all x.((FinancialAid(x) & GRETest(x)) -> -exists y.(FinancialAid(y) & AvailableFor(y,x)))", "-exists x.(FinancialAid(x) & -AvailableForGRETest(x))", "exists x.(FinancialAid(x) & -AvailableForGRETest(x))", "(-exists x.(FinancialAid(x) & GRETest(x)))", "-exists x.(FinancialAid(x) & FinancialAid(x) & GRETest(x))", "-exists x.(FinancialAid(x) & -GRETest(x))", "all x.((FinancialAid(x) & GRETest(x)) -> -AvailableFor(x,GRETest))", "-exists x.(GRETest(x) & FinancialAid(x))"]}
{"id": "folio_validation_303", "nl": "If people spill a lot of food on their clothing, then they do not tidy their spaces consistently and enjoy the process of cleaning.", "fol": "all x.(SpillFoodOnClothing(x) -> -TidySpacesConsistently(x))", "prediction": ["all x.((Person(x) & SpillsLotsOfFoodOnClothing(x)) -> (-TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((Person(x) & SpillsLotsOfFoodOnClothing(x)) -> (-StylishSpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((Person(x) & SpillsLotsOfFood(x)) -> (-TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((Person(x) & SpillsFoodOnClothing(x)) -> (-TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.(SpreadsLotsOfFoodOnClothing(x) -> (-TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((People(x) & SpillsLotsOfFoodOnClothing(x)) -> (-TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.(SpreadsLotsOfFoodOnClothing(x) -> (-StylishSpacesConsistently(x) & EnjoyCleaning(x)))", "all x y.((Person(x) & SpillsLotsOfFood(x) & Clothing(y)) -> (-TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((Person(x) & SpillsLotsOfFoodOnClothing(x)) -> (-TidySpaces(x) & EnjoyCleaning(x)))", "all x.((Person(x) & SpillsLotsOfFood(x)) -> (-StylishSpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((Person(x) & SpillsLotsOfFoodOnClothing(x)) -> (-StylishSpaces(x) & EnjoyCleaning(x)))", "all x.(SpreadsLotsOfFoodOnClothing(x) -> (-StylishSpacesConsistently(x) & EnjoysCleaning(x)))", "all x y.((Person(x) & SpillsLotsOfFood(x) & Clothing(y)) -> (-TidySpacesConsistently(x,y) & EnjoyCleaning(x,y)))", "all x.((Person(x) & SpillsLotsOfFood(x)) -> (-TidySpaces(x) & EnjoyCleaning(x)))", "all x.((Person(x) & SpillsLotsOfFoodOnClothing(x)) -> (-TidySpacesConsistently(x) & EnjoyCleaningProcess(x)))", "all x.(SpoilsLotsOfFoodOnClothing(x) -> (-TidySpacesConsistently(x) & EnjoyCleaning(x)))"]}
{"id": "folio_validation_304", "nl": "All foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing.", "fol": "all x.(FrequentFoodie(x) -> SpillFoodOnClothing(x))", "prediction": ["all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpillsLotsOfFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpillsFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequentlyToFindNewFoodRestaurants(x)) -> SpillsLotsOfFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsFoodRestaurants(x)) -> SpillsFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpillsLotOfFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpillsMoreFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpillsLotsOfFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsFoodRestaurants(x)) -> SpillsLotsOfFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpoutsLotsOfFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpillsLotsOfFood(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SplendsLotsOfFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpontaneousFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpontaneousFood(x))", "all x.((Foodie(x) & GoesOutOfFrequently(x) & FindsNewFoodRestaurants(x)) -> SpillsLotsOfFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> PeopleSpreadsLotsOfFoodOnClothing(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> PeopleSpoutsLotsOfFoodOnClothing(x))"]}
{"id": "folio_validation_305", "nl": "If people grew up as only children with no siblings, then they tidy their spaces consistently and enjoy the process of cleaning.", "fol": "all x.(GrewUpAsOnlyChild(x) -> TidySpacesConsistently(x))", "prediction": ["all x.((Person(x) & GrownUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((People(x) & GrownUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((Person(x) & GrownUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpaces(x) & EnjoyCleaning(x)))", "all x.((People(x) & GrownUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpaces(x) & EnjoyCleaning(x)))", "all x.((People(x) & grewUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((People(x) & GrowsUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((People(x) & GrowingUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((Person(x) & GrownUpAsOnlyChildren(x) & -Siblings(x)) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((Person(x) & GrownUpAsOnlyChildren(x) & -Siblings(x)) -> (TidySpaces(x) & EnjoyCleaning(x)))", "all x.((People(x) & GrownUpAsOnlyChildren(x) & -Siblings(x)) -> (TidySpaces(x) & EnjoyCleaning(x)))", "all x.((Person(x) & GrowsUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((People(x) & GrownUpAsOnlyChildrenWithNoSiblings(x)) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "all x.((People(x) & grewUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpaces(x) & EnjoyCleaning(x)))", "all x.((People(x) & grewUpAsOnlyChildren(x) & -Siblings(x)) -> (TidySpaces(x) & EnjoyCleaning(x)))", "all x.((People(x) & GrowsUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpaces(x) & EnjoyCleaning(x)))", "all x.((Person(x) & GrowsUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpaces(x) & EnjoysCleaning(x)))"]}
{"id": "folio_validation_306", "nl": "If people have parents who are very busy with their regular jobs, then they grew up as only children with no siblings.", "fol": "all x.(ParentsHaveBusyJobs(x) -> GrewUpAsOnlyChild(x))", "prediction": ["all x.((Person(x) & HasParents(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Person(x) & Parents(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Person(x) & HasParents(x) & BusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Person(x) & Parent(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Parent(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Person(x) & HasParents(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSisters(x))", "all x.((Person(x) & HasParents(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildren(x))", "all x.((Person(x) & Parents(x) & BusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Person(x) & HasParents(x) & VeryBusyWithRegularJobs(x)) -> GrowingUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Person(x) & HasParents(x) & VeryBusyWithRegularJobs(x)) -> grewUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Person(x) & Parents(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSisters(x))", "all x.((Person(x) & Parents(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildren(x))", "all x.((Person(x) & HasParents(x) & BusyRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Person(x) & Parents(x) & VeryBusyWithRegularJobs(x)) -> GrowingUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Person(x) & HasParents(x) & VeryBusy(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "all x.((Person(x) & Parents(x) & VeryBusy(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))"]}
{"id": "folio_validation_307", "nl": "All households with a high net income have people who have parents who are very busy with their regular jobs.", "fol": "all x.(HouseholdHighNetIncome(x) -> ParentsHaveBusyJobs(x))", "prediction": ["all x.((Household(x) & HighNetIncome(x)) -> (HasParents(x) & BusyWithRegularJobs(x)))", "all x.((Household(x) & HighNetIncome(x)) -> (HasParents(x) & VeryBusyWithRegularJobs(x)))", "all x.((Haushold(x) & HighNetIncome(x)) -> (HasParents(x) & BusyWithRegularJobs(x)))", "all x.((Hauslet(x) & HighNetIncome(x)) -> (HasParents(x) & BusyWithRegularJobs(x)))", "all x.((Household(x) & HighNetIncome(x)) -> (HasParents(x) & BusyRegularJobs(x)))", "all x.((Household(x) & HighNetIncome(x)) -> (Person(x) & HasParents(x) & BusyWithRegularJobs(x)))", "all x.((Haushold(x) & HighNetIncome(x)) -> (HasParents(x) & VeryBusyWithRegularJobs(x)))", "all x.((Household(x) & HighNetIncome(x)) -> (HasParents(x) & VeryBusy(x)))", "all x.((Hauslet(x) & HighNetIncome(x)) -> (HasParents(x) & VeryBusyWithRegularJobs(x)))", "all x.((Household(x) & HighNetIncome(x)) -> (Person(x) & HasParents(x) & VeryBusyWithRegularJobs(x)))", "all x.((Household(x) & HighNetIncome(x)) -> (HasParents(x) & Busy(x)))", "all x.((Household(x) & HighNetIncome(x)) -> HasParents(x))", "all x.((Household(x) & HighNetIncome(x)) -> (HasParents(x) & BusyInRegularJobs(x)))", "all x y.((Household(x) & HighNetIncome(x)) -> (HasParents(x,y) & BusyWithRegularJobs(y)))", "all x.((Household(x) & HighNetIncome(x)) -> exists y.(Parent(y) & HasParent(y,x) & BusyWithRegularJobs(y)))", "all x.((Household(x) & HighNetIncome(x)) -> exists y.(Person(y) & HasParent(y,x) & BusyWithRegularJobs(y)))"]}
{"id": "folio_validation_308", "nl": "Peter is either both a person who spills a lot of food on his clothing and grew up as an only child with no siblings, or he is neither a person who spills a lot of food on his clothing nor grew up as an only child with no siblings. ", "fol": "((SpillFoodOnClothing(Peter) & GrewUpAsOnlyChild(Peter)) | (-SpillFoodOnClothing(Peter) & -GrewUpAsOnlyChild(Peter)))", "prediction": ["all x.(Peter(x) -> (SpreadsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x) & -SpreadsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x)))", "all x.((Peter(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x)) | (-SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x))))", "all x.(Peter(x) -> ((Person(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x) & NoSiblings(x)) | (-Person(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x))))", "all x.(Peter(x) -> ((Person(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x) & -GrownUpAsOnlyChild(x)) | (-Person(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x))))", "all x.(Peter(x) -> ((Person(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x) & NoSiblings(x)) | (-Person(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x)))))", "all x.(Peter(x) -> ((Person(x) & SpillsLotOfFood(x) & OnlyChild(x) & NoSiblings(x)) | (-Person(x) & SpillsLotOfFood(x) & NoSiblings(x))))", "all x.(Peter(x) -> ((SpoilsLotsOfFoodOnClothing(x) & GrownUpAsOnlyChild(x) & NoSiblings(x)) | (-SpoilsLotsOfFoodOnClothing(x) & GrownUpAsOnlyChild(x))))", "all x.(Peter(x) -> ((SpoilsLotsOfFoodOnClothing(x) & GrownUpAsOnlyChild(x) & NoSiblings(x)) | (-SpoilsLotsOfFoodOnClothing(x) & GrownUpAsOnlyChild(x)))))", "all x.((Peter(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x) & -GrownUpAsOnlyChild(x)) -> (Peter(x) & -SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x)))", "all x.(Peter(x) -> ((Person(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x) & NoSiblings(x)) | (-Person(x) & SpillsLotOfFoodOnClothing(x) & NoSiblings(x))))", "all x.(Peter(x) -> ((Person(x) & SpillsLotOfFoodOnClothing(x) & OnlyChild(x) & NoSiblings(x)) | (-Person(x) & SpillsLotOfFoodOnClothing(x) & NoSiblings(x))))", "all x.(Peter(x) -> ((Person(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x) & NoSiblings(x)) | (-Person(x) & SpillsLotOfFoodOnClothing(x) & -GrownUpAsOnlyChild(x))))", "all x.(Peter(x) -> ((Person(x) & SpillsFoodOnClothing(x) & GrownUpAsOnlyChild(x) & NoSiblings(x)) | (-Person(x) & SpillsFoodOnClothing(x) & GrownUpAsOnlyChild(x))))", "all x.(Peter(x) -> ((Person(x) & SpillsFoodOnClothing(x) & GrownUpAsOnlyChild(x) & NoSiblings(x)) | (-Person(x) & SpillsFoodOnClothing(x) & GrownUpAsOnlyChild(x)))))", "all x.((Peter(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x) & -GrownUpAsOnlyChild(x)) -> (Peter(x) & SpillsLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x)))", "all x.((Peter(x) & SpillsLotOfFoodOnClothing(x) & OnlyChild(x) & NoSiblings(x)) | (-SpillsLotOfFoodOnClothing(x) & NoSiblings(x))))"]}
{"id": "folio_validation_309", "nl": "Peter tidies his space consistently and enjoys the process of cleaning.", "fol": "TidySpacesConsistently(Peter)", "prediction": ["all x y.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaning(x,y)))", "all x.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaning(x,y)))", "all x y.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaning(x)))", "all x.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaning(x)))", "all x.(Peter(x) -> (TidiesSpaceConsistently(x) & EnjoysCleaning(x)))", "all x y z.((Peter(x) & Space(y) & CleaningProcess(z)) -> (TidiesConsistently(x,y) & Enjoys(x,z)))", "all x.((Peter(x) & Space(x)) -> (TidiesConsistently(x) & EnjoysCleaning(x)))", "all x y.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysProcessOfCleaning(x,y)))", "all x.((Peter(x) & Space(y)) -> (TidiesConsistently(x) & EnjoysCleaning(x)))", "all x y z.((Peter(x) & Space(y) & Cleaning(z)) -> (TidiesConsistently(x,y) & Enjoys(x,z)))", "all x y.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysProcessOfCleaning(x)))", "all x.(TidiesSpaceConsistently(x) & EnjoysCleaning(x))", "all x y.((Peter(x) & Space(y)) -> (TidiesConsistently(x) & EnjoysCleaning(x)))", "all x.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysProcessOfCleaning(x,y)))", "all x y.((Peter(x) & Space(y)) -> (Tidies(x,y) & EnjoysCleaning(x)))", "all x y z.((Peter(x) & Space(y) & CleaningProcess(z)) -> (Tidies(x,y) & Enjoys(x,z)))"]}
{"id": "folio_validation_310", "nl": "Peter is either a foodie who goes out frequently to find new food restaurants to try or belongs to a household with a high net income.", "fol": "(FrequentFoodie(Peter) | HouseholdHighNetIncome(Peter))", "prediction": ["all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | BelongsToHighNetIncome(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | HouseholdWithHighNetIncome(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | Household(x) & HighNetIncome(x))", "all x.(Peter(x) -> ((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | Household(x) & HighNetIncome(x)))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | HighNetIncome(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | HighNetIncomeHousehold(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | BelongsToHighNetIncomeHousehold(x))", "all x.(Peter(x) -> ((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | Household(x) & HighNetIncome(x))))", "all x.(Peter(x) -> ((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | (HasHighNetIncome(x) & Household(x))))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsFoodRestaurants(x)) | BelongsToHighNetIncome(x))", "all x.(Peter(x) -> ((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | BelongsToHighNetIncome(x)))", "all x.((Foodie(x) & GoesOutFrequentlyToFindNewFoodRestaurants(x)) | HouseholdWithHighNetIncome(x))", "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | BelongsToHighNetIncome(x)) -> Peter(x))", "all x.((Foodie(x) & GoesOutFrequentlyToFindFoodRestaurants(x)) | HouseholdWithHighNetIncome(x))", "all x.((Foodie(x) & GoesOutFrequentlyToFindNewFoodRestaurants(x)) | BelongsToHighNetIncome(x)) -> Peter(x))", "all x.(Peter(x) -> ((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | HouseholdWithHighNetIncome(x)))"]}
{"id": "folio_validation_311", "nl": "Peter is either a foodie who goes out frequently to find new food restaurants to try and belong to a household with a high net income or he is a foodie who goes out frequently to find new food restaurants to try nor belongs to a household with a high net income.", "fol": "((FrequentFoodie(Peter) & HouseholdHighNetIncome(Peter)) | (-FrequentFoodie(Peter) & -HouseholdHighNetIncome(Peter)))", "prediction": ["all x.((Foodie(x) & GoesOutFrequentlyToFindNewFoodRestaurants(x) & HighNetIncome(x)) | (Foodie(x) & -FindsNewFoodRestaurants(x) & HighNetIncome(x))))", "all x.(Foodie(x) -> ((GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x)) | (-GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x))))", "exists x.(Foodie(x) & ((GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x)) | (-GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x)))))", "all x.(Foodie(x) -> ((GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x)) | (GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x))))", "((Foodie(Peter) & GoesOutFrequentlyToFindNewFoodRestaurants(Peter) & HighNetIncome(Peter)) | (Foodie(Peter) & -FindsNewFoodRestaurants(Peter) & HighNetIncome(Peter))))", "all x.(Foodie(x) -> ((GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x)) | (-GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x)))))", "all x.((Foodie(x) & GoesOutFrequentlyToFindNewFoodRestaurants(x) & HighNetIncome(x)) | (Foodie(x) & -FrequentFindingNewFoodRestaurants(x) & HighNetIncome(x))))", "all x.((Foodie(x) & GoesOutFrequentlyToFindNewFoodRestaurants(x) & BelongsToHighNetIncome(x)) | (Foodie(x) & -BelongsToHighNetIncome(x))))", "all x.((Foodie(x) & GoesOutFrequentlyToFindFoodRestaurants(x) & HighNetIncome(x)) | (Foodie(x) & -FindsFoodRestaurants(x) & HighNetIncome(x))))", "all x.((Foodie(x) & (GoesOutFrequentlyToFindNewFoodRestaurants(x) | BelongsToHighNetIncome(x))) | (BelongsToHighNetIncome(x) & -BelongsToHighNetIncome(x))))", "all x.(Foodie(x) -> ((GoesOutFrequentlyToFindNewFoodRestaurants(x) & HighNetIncome(x)) | (GoesOutFrequentlyToFindNewFoodRestaurants(x) & HighNetIncome(x))))", "exists x.(Foodie(x) & ((GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x)) | (-GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x))))", "all x.(Foodie(x) -> ((GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x)) | (GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & -HighNetIncome(x))))", "all x.(Foodie(x) -> ((GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x)) | (GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & HighNetIncome(x)))))", "all x y.((Foodie(x) & Foodie(y) & GoesOutFrequentlyToFindNewFoodRestaurants(x) & HighNetIncome(x)) | (Foodie(y) & -FindsNewFoodRestaurants(y) & HighNetIncome(y))))", "all x.(Foodie(x) -> ((GoesOutFrequentlyToFindNewFoodRestaurants(x) & HighNetIncome(x)) | (GoesOutFrequentlyToFindNewFoodRestaurants(x) & -HighNetIncome(x))))"]}
{"id": "folio_validation_312", "nl": "All fir trees are evergreens.", "fol": "all x.(IsFirTree(x) -> IsEvergreen(x))", "prediction": ["all x.(FfirTree(x) -> Evergreen(x))", "all x.(FernTree(x) -> Evergreen(x))", "all x.(FirmTree(x) -> Evergreen(x))", "all x.(FireTree(x) -> Evergreen(x))", "all x.(FrinTree(x) -> Evergreen(x))", "all x.(FruitTree(x) -> Evergreen(x))", "all x.(FinnTree(x) -> Evergreen(x))", "all x.(FierTree(x) -> Evergreen(x))", "all x.(Far(x) -> Evergreen(x))", "all x.(FarTree(x) -> Evergreen(x))", "all x.(FairTree(x) -> Evergreen(x))", "all x.(FfirTree(x) -> Evergreen(x))", "all x.(Fin(x) -> Evergreen(x))", "all x.(Fern(x) -> Evergreen(x))", "all x.(Fruit(x) -> Evergreen(x))", "all x.(Fin Tree(x) -> Evergreen(x))"]}
{"id": "folio_validation_313", "nl": "Some objects of worship are fir trees.", "fol": "exists x.(IsObjectOfWorship(x) & IsFirTree(x))", "prediction": ["exists x.(ObjectOfWorship(x) & FirTree(x))", "exists x.(WorshipObject(x) & FirTree(x))", "exists x.(ObjectOfWorship(x) & FfirTree(x))", "exists x.(Worship(x) & FirTree(x))", "exists x.(WorshipObject(x) & FfirTree(x))", "exists x.(ObjectOfWorship(x) & FurTree(x))", "exists x.(Object(x) & Worship(x) & FirTree(x))", "exists x.(WorshipObject(x) & FurTree(x))", "exists x.(OfWorship(x) & FirTree(x))", "exists x.(ObjectOfWorship(x) & Fire Tree(x))", "exists x.(Worship(x) & FfirTree(x))", "exists x.(ObjectOfWorship(x) & FirTrees(x))", "exists x.((ObjectOfWorship(x) & FirTree(x))", "exists x.(ObjectOfWorship(x) & FireTree(x))", "exists x.(ObjectOfWorship(x) & firTree(x))", "exists x.(WorshipObject(x) & Fire Tree(x))"]}
{"id": "folio_validation_314", "nl": "Some evergreens are not objects of worship.", "fol": "exists x.(IsEvergreen(x) & -IsObjectOfWorship(x))", "prediction": ["exists x.(Evergreen(x) & -ObjectOfWorship(x))", "exists x.(Evergreen(x) & -(ObjectOfWorship(x) | -ObjectOfWorship(x)))", "exists x.(Evergreen(x) & -(ObjectOfWorship(x) | ObjectOfWorship(x)))", "exists x.(Evergreen(x) & -WorshipObject(x))", "exists x.(Evergreen(x) & -OfWorship(x))", "exists x.(Evergreen(x) & -(ObjectOfWorship(x) | ObjectOfWorship(x))))", "exists x.(Evergreen(x) & -(ObjectOfWorship(x) & -ObjectOfWorship(x)))", "exists x.(Evergreen(x) & -Worship(x))", "exists x.(Evergreen(x) & -OrderOfWorship(x))", "exists x.(Evergreen(x) & -(ObjectOfWorship(x) | -(ObjectOfWorship(x))))", "exists x y.(Evergreen(x) & ObjectOfWorship(y) & -ObjectOfWorship(x,y))", "exists x y.(Evergreen(x) & ObjectOfWorship(y) & -ObjectOfWorship(x))", "all x.(Evergreen(x) -> -ObjectOfWorship(x))", "exists x.(Evergreen(x) & -(ObjectOfWorship(x) | -ObjectOfWorship(x))))", "exists x.(Evergreen(x) & -(ObjectOfWorship(x) & Worship(x)))", "exists x.(Evergreen(x) & -(ObjectOfWorship(x) | (-ObjectOfWorship(x)))))"]}
{"id": "folio_validation_315", "nl": "The Picuris Mountains are a mountain range in New Mexico or Texas.", "fol": "(IsMountainRange(Picurismountains) & (LocatedIn(Picurismountains,Newmexico) | LocatedIn(Picurismountains,Texas)))", "prediction": ["all x.(PicurisMountain(x) -> (MountainRange(x) & (NewMexico(x) | Texas(x))))", "all x.(PicurisMountain(x) -> (MountainRange(x) & (InNewMexico(x) | InTexas(x))))", "all x.(PicurisMountain(x) -> (MountainRange(x,NewMexico) | MountainRange(x,Texas)))", "all x.(PicurisMountain(x) -> (MountainRangeIn(x,NewMexico) | MountainRangeIn(x,Texas)))", "all x.(PicurisMountain(x) -> (MountainRangeInNewMexico(x) | MountainRangeInTexas(x)))", "all x.(PicurisMountain(x) -> (MountainRange(x) & (NewMexico(x) | Texas(x))))", "All x.(PicurisMountain(x) -> (MountainRange(x) & (NewMexico(x) | Texas(x))))", "all x.((Mountain(x) & (NewMexico(x) | Texas(x))) -> PicurisMountain(x))", "all x.(PicurisMountain(x) -> (MountainRange(x) & (NewMexico) | Texas(x))))", "all x.(Picuris(x) -> (MountainRange(x) & (NewMexico(x) | Texas(x))))", "all x.(PicurisMountain(x) -> (MountainRange(x) & (Nevada(x) | Texas(x))))", "all x.((MountainRange(x) & (NewMexico(x) | Texas(x))) -> PicurisMountain(x))", "all x y.((PicurisMountain(x) & (NewMexico(y) | Texas(y))) -> MountainRange(x,y))", "all x.((Mountain(x) & (NewMexico(x) | Texas(x))) -> Picuris(x))", "all x.(PicurisMountain(x) -> (MountainRange(x) & (NewMexico) | Texas))))", "all x.(PicurisMountain(x) -> (MountainRange(x) & (InNewMexico(x) | InTexas(x)))))"]}
{"id": "folio_validation_316", "nl": "Juan de Onate visited the Picuris Mountains.", "fol": "VisitedLocation(Juandeonate,Picurismountains)", "prediction": ["Juan de Onate visited PicurisMountains.", "all x y.((JuanDeOnate(x) & PicurisMountain(y)) -> Visited(x,y))", "all x y z.((JuanDeOnate(x) & PicurisMountain(y) & PicurisMountain(z)) -> Visited(x,y,z))", "all x y.((JuanDeOnate(x) & PicurisMountains(y)) -> Visited(x,y))", "all x y z.((JuanDeOnate(x) & PicurisMountain(y) & Visited(x,y)) -> Visited(x,z))", "Juan de Onate visited the PicurisMountains.", "all x y z.((JuanDeOnate(x) & PicurisMountains(y) & PicurisMountain(z)) -> Visited(x,y,z))", "all x y.((JuanDeOnate(x) & Picuris(y)) -> Visited(x,y))", "all x y z.((JuanDeOnate(x) & PicurisMountain(y) & PicurisMountain(z)) -> Visited(x,y))", "all x.((JuanDeOnate(x) & PicurisMountain(y)) -> Visited(x,y))", "all x y z.((JuanDeOnate(x) & PicurisMountains(y) & PicurisMountains(z)) -> Visited(x,y,z))", "all x.(JuanDeOnate(x) -> VisitedPicurisMountains(x))", "all x.((JuanDeOnate(x) & PicurisMountains(x)) -> Visited(x,y))", "all x.((JuanDeOnate(x) & PicurisMountains(y)) -> Visited(x,y))", "all x y z.((JuanDeOnate(x) & PicurisMountain(y) & Picuris(z)) -> Visited(x,y,z))", "all x.((JuanDeOnate(x) & PicurisMountain(x)) -> Visited(x,y))"]}
{"id": "folio_validation_317", "nl": "The Harding Pegmatite Mine, located in the Picuris Mountains, was donated.", "fol": "(LocatedIn(Hardingpegmatitemine,Picurismountains) & IsMine(Hardingpegmatitemine) & IsDonated(Hardingpegmatitemine))", "prediction": ["all x.((HardingPegmatiteMine(x) & LocatedInPicurisMountains(x)) -> Donated(x))", "all x y.((HardingPegmatiteMine(x) & PicurisMountains(y)) -> Donated(x,y))", "All x.((HardingPegmatiteMine(x) & LocatedInPicurisMountains(x)) -> Donated(x))", "all x y.((HardingPegmatiteMine(x) & PicurisMountain(y)) -> Donated(x,y))", "all x.((HardingPegmatiteMine(x) & FoundInPicurisMountains(x)) -> Donated(x))", "all x y.((HardingPegmatiteMine(x) & PicurisMountains(y)) -> Donated(x))", "all x.((HardingPegmatiteMiner(x) & LocatedInPicurisMountains(x)) -> Donated(x))", "all x y.((HardingPegmatiteMine(x) & PicurisMountain(y)) -> Donated(x))", "all x.((HardingPegmatiteMine(x) & InPicurisMountains(x)) -> Donated(x))", "all x y.((HardingPegmatiteMine(x) & PicurisMountain(y) & LocatedIn(x,y)) -> Donated(x))", "all x y z.((HardingPegmatiteMine(x) & PicurisMountains(y) & Mine(z)) -> Donated(x,y,z))", "all x y z.((HardingPegmatiteMiner(x) & PicurisMountain(y) & Mine(z)) -> Donated(x,y,z))", "(HardingPegmatiteMine(x) & LocatedInPicurisMountains(x))", "all x y z.((HardingPegmatiteMine(x) & PicurisMountain(y) & Mine(z)) -> Donated(x,y,z))", "all x y z.((HardingPegmatiteMine(x) & PicurisMountains(y) & Mine(z)) -> Donated(x))", "all x y.((HardingPegmatiteMiner(x) & PicurisMountain(y)) -> Donated(x,y))"]}
{"id": "folio_validation_318", "nl": "There are no mountain ranges in texas that have mines which have been donated.", "fol": "all x y.((IsMine(x) & IsDonated(x) & LocatedIn(x,y) & IsMountainRange(y)) -> -LocatedIn(y,Texas))", "prediction": ["-exists x.(MountainRange(x) & -HasMines(x) & Donated(x))", "-exists x.(MountainRange(x) & -HasMine(x) & Donated(x))", "-exists x.(MountainRange(x) & -exists y.(MountainRange(y) & Mine(y) & Donated(y)))", "all x.((MountainRange(x) & -HasMines(x) & Donated(x)) -> -HasMines(x))", "-exists x.(MountainRange(x) & InTexas(x) & exists y.(Mine(y) & Donated(y))))", "exists x.(MountainRange(x) & -exists y.(MountainRange(y) & Mine(y) & Donated(y)))", "all x.((MountainRange(x) & -HasMinesDonated(x)) -> -HasMinesDonated(x))", "-exists x.(MountainRange(x) & -HasMinesDonated(x))", "exists x.(MountainRange(x) & -HasMines(x) & Donated(x))", "all x.((MountainRange(x) & -MinesDonated(x)) -> -TexasMountainRange(x))", "-exists x.(MountainRange(x) & InTexas(x) & MinesDonated(x))", "-exists x.(MountainRange(x) & -exists y.(MountainRange(y) & Mine(z) & Donated(z)))", "-exists x.(MountainRange(x) & exists y.(Mine(y) & Donated(y))))", "-exists x.(MountainRange(x) & -HasMine(x,donated))", "-exists x.(MountainRange(x) & -exists y.(MountainRange(y) & Mine(y) & Donated(y,x)))", "-exists x.(MountainRange(x) & InTexas(x) & exists y.(Mine(y) & Donated(y)))"]}
{"id": "folio_validation_319", "nl": "Juan de Onate visited a mountain range in New Mexico.", "fol": "exists x.(VisitedLocation(Juandeonate,x) & IsMountainRange(x) & LocatedIn(x,Newmexico))", "prediction": ["all x y z.((JuanDeOnate(x) & MountainRange(y) & NewMexico(z)) -> Visited(x,y,z))", "all x y.((JuanDeOnate(x) & MountainRange(y)) -> VisitedInNewMexico(x,y))", "all x y.((JuanDeOnate(x) & MountainRange(y)) -> Visited(x,y))", "all x y z.((JuanDeOnate(x) & MountainRange(y) & NewMexico(z)) -> VisitedIn(x,y,z))", "all x y z.((JeanDeOnate(x) & MountainRange(y) & NewMexico(z)) -> Visited(x,y,z))", "all x y.((JuanDeOnate(x) & MountainRange(y) & NewMexico(y)) -> Visited(x,y))", "Juan de Onate visited a mountain range in New Mexico.", "all x y z.((JuanDeOnate(x) & MountainRange(y) & NewMexico(z) & Visited(x,y,z)) -> Visited(x,y,z))", "all x y z.((JuanDeOnate(x) & MountainRange(y) & MountainRange(z)) -> VisitedInNewMexico(x,y,z))", "all x y z.((JuanDeOnate(x) & MountainRange(y) & NewMexico(z)) -> Visited(x,y))", "all x y.((JuanDeOnate(x) & MountainRange(y)) -> VisitedIn(x,y))", "all x y.((JonDeOnate(x) & MountainRange(y)) -> VisitedInNewMexico(x,y))", "all x y.((JeanDeOnate(x) & MountainRange(y)) -> VisitedInNewMexico(x,y))", "all x y z.((JeanDeOnate(x) & MountainRange(y) & NewMexico(z)) -> VisitedIn(x,y,z))", "all x.((JuanDeOnate(x) & MountainRange(y)) -> VisitedInNewMexico(x,y))", "all x y z.((JuanDeOnate(x) & MountainRange(y) & MountainRange(z)) -> Visited(x,y,z))"]}
{"id": "folio_validation_320", "nl": "Juan de Onate visited a mountain range in Texas.", "fol": "exists x.(VisitedLocation(Juandeonate,x) & IsMountainRange(x) & LocatedIn(x,Texas))", "prediction": ["all x y z.((JuanDeOnate(x) & MountainRange(y) & Texas(z)) -> Visited(x,y,z))", "all x y.((JuanDeOnate(x) & MountainRange(y)) -> VisitedInTexas(x,y))", "all x y.((JuanDeOnate(x) & MountainRange(y)) -> Visited(x,y))", "all x y z.((JuanDeOnate(x) & MountainRange(y) & Texas(z)) -> VisitedIn(x,y,z))", "all x y.((JuanDeOnate(x) & MountainRange(y)) -> VisitedIn(x,y))", "all x y z.((JuanDeOnate(x) & MountainRange(y) & Texas(z)) -> Visited(x,y))", "all x y z.((JuanDeOnate(x) & MountainRange(y) & Texas(z) & Visited(x,y,z)) -> Visited(x,y,z))", "all x y z.((JuanDeOnate(x) & MountainRange(y) & Texas(z) & Visited(x,y)) -> Visited(x,z))", "all x.((JuanDeOnate(x) & MountainRange(y)) -> VisitedInTexas(x,y))", "all x y.((JuanDeOnate(x) & MountainRange(y) & InTexas(x,y)) -> Visited(x,y))", "all x y z.((JuanDeOnate(x) & MountainRange(y) & Texas(z) & Visited(x,y,z)) -> Visited(x,y))", "all x y z.((JuanDeOnate(x) & MountainRange(y) & Texas(z) & Visited(x,y)) -> Visited(x,y,z))", "Juan de Onate visited a mountain range in Texas.", "all x y.((JonDeOnate(x) & MountainRange(y)) -> VisitedInTexas(x,y))", "all x y z.((JuanDeOnate(x) & MountainRange(y) & Texas(z) & Visited(x,y,z)) -> VisitedIn(x,y,z))", "all x y.((MontanRange(x) & JuanDeOnate(y)) -> VisitedInTexas(y,x))"]}
{"id": "folio_validation_321", "nl": "The Harding Pegmatite Mine is not located in a mountain range in New Mexico.", "fol": "all x.((IsMountainRange(x) & LocatedIn(Hardingpegmatitemine,x)) -> -LocatedIn(x,Newmexico))", "prediction": ["all x.(HardingPegmatiteMine(x) -> -MountainRangeInNewMexico(x))", "all x.(HardingPegmatiteMine(x) -> -LocatedInMountainRangeInNewMexico(x))", "all x.(HardingPegmatiteMine(x) -> -InMountainRangeInNewMexico(x))", "all x.(HardingPegmatiteMine(x) -> -InMountainRange(x))", "all x.(HardingPegmatiteMine(x) -> -MountainRange(x))", "all x y.((HardingPegmatiteMine(x) & MountainRange(y)) -> -LocatedIn(x,y))", "all x.(HardingPegmatiteMine(x) -> -LocatedInMountainRange(x))", "all x y.((HardingPegmatiteMine(x) & MountainRange(y)) -> -InNewMexico(x,y))", "all x.(HardingPegmatiteMine(x) -> -LocatedInMountainRangeInNewMexico(x))", "all x y.((HardingPegmatiteMine(x) & MountainRange(y)) -> -LocatedInNewMexico(x,y))", "all x.(HardingPegmatiteMine(x) -> -InMountainRange(x,NewMexico))", "All x.(HardingPegmatiteMine(x) -> -MountainRangeInNewMexico(x))", "all x.(HardingPegmatiteMine(x) -> -MountainRange(x,NewMexico))", "all x.(HardingPegmatiteMiner(x) -> -MountainRangeInNewMexico(x))", "all x.(HardingPegmatiteMine(x) -> -(MountainRange(x) & NewMexico(x)))", "All x.(HardingPegmatiteMine(x) -> -InMountainRangeInNewMexico(x))"]}
{"id": "folio_validation_322", "nl": "If a man is taller than another man, the taller one can block the other's shooting.", "fol": "all x y.((IsMale(x) & IsMale(y) & IsTallerThan(x,y)) -> CanBlockShooting(x,y))", "prediction": ["all x y.((Man(x) & Man(y) & Taller(x,y)) -> BlocksShooting(x,y))", "all x y.((Man(x) & Man(y) & Taller(x,y)) -> BlocksShooting(y,x))", "all x y.((Man(x) & Man(y) & Taller(x,y)) -> CanBlockShooting(x,y))", "all x y.((Man(x) & Man(y) & TallerThan(x,y)) -> BlocksShooting(x,y))", "all x y.((Man(x) & Man(y) & TallerThan(x,y)) -> BlocksShooting(y,x))", "all x y.((Man(x) & Man(y) & Taller(x,y)) -> CanBlockShooting(y,x))", "all x y.((Man(x) & Man(y) & Taller(x,y)) -> BlocksShooting(y,z))", "all x y.((Man(x) & Man(y) & TallerThan(x,y)) -> CanBlockShooting(x,y))", "all x y.((Man(x) & Man(y) & Taller(x,y)) -> BlocksShooting(y,y))", "all x y z.((Man(x) & Man(y) & Taller(x,y) & Man(z) & Taller(y,z)) -> BlocksShooting(y,z))", "all x y z.((Man(x) & Man(y) & Taller(x,y) & Man(z)) -> BlocksShooting(y,z))", "all x y z.((Man(x) & Man(y) & Taller(x,y) & Man(z)) -> BlocksShooting(x,z))", "all x y.((Man(x) & Man(y) & TallerThan(x,y)) -> CanBlockShooting(y,x))", "all x y z.((Man(x) & Man(y) & Taller(x,y) & Man(z)) -> CanBlockShooting(x,z))", "all x y z.((Man(x) & Man(y) & Taller(x,y) & Man(z) & Taller(y,z)) -> BlocksShooting(x,y,z))", "all x y.((Man(x) & Taller(x,y)) -> BlocksShooting(x,y))"]}
{"id": "folio_validation_323", "nl": "Michael is a man who is taller than everyone else in his class.", "fol": "all x.((IsMale(x) & InSameClassAs(x,Michael) & -IsEqualTo(x,Michael)) -> IsTallerThan(Michael,x))", "prediction": ["all x y.((Michael(x) & Class(y)) -> TallerThan(x,y))", "all x.(Michael(x) -> TallerThanEveryone(x))", "all x.(Michael(x) -> (Man(x) & TallerThanEveryone(x)))", "all x.(Michael(x) -> TallerThanEveryoneInClass(x))", "all x.((Michael(x) & TallerThanEveryone(x)) -> Man(x))", "all x y.((Man(x) & Class(y)) -> TallerThan(x,y))", "all x.((Man(x) & TallerThanEveryone(x)) -> Michael(x))", "all x.(Michael(x) -> (Man(x) & TallerThanEveryoneInClass(x)))", "all x y.((Michael(x) & Class(y)) -> TallerThanEveryone(x,y))", "all x.(Michael(x) -> (Man(x) & TallerThanEveryone(x)))", "all x.(Michael(x) -> TallerThanAllOthersInClass(x))", "all x.(Michael(x) -> TallerThanEveryOneInClass(x))", "all x y.((Michael(x) & Class(y)) -> Taller(x,y))", "all x.(Michael(x) -> (TallerThanEveryone(x) & InClass(x)))", "all x.(Michael(x) -> TallerThanClass(x))", "all x.(Michael(x) -> (Man(x) & TallerThanAllOthers(x)))"]}
{"id": "folio_validation_324", "nl": "If person x is taller than person y, and person y is taller than person z, than x is taller than z", "fol": "all z.((IsTallerThan(x,y) & IsTallerThan(y,z)) -> IsTallerThan(x,z))", "prediction": ["all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,z))", "all x y.((Person(x) & Person(y) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,z))", "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y,z)) -> TallerThan(x,z))", "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,y,z))", "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y,z)) -> TallerThan(x,y,z))", "all x y.((Person(x) & Person(y) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,y,z))", "all x y.((Person(x) & Person(y) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,x))", "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,y))", "all x y.((Person(x) & Person(y) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,x,z))", "all x y.((Person(x) & Person(y) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,y))", "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y) & TallerThan(x,z)) -> TallerThan(x,z))", "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,x,z))", "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,x))", "all x.((Person(x) & Person(y) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,z))", "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y,z) & TallerThan(y,z)) -> TallerThan(x,z))", "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y,z)) -> TallerThan(x,y))"]}
{"id": "folio_validation_325", "nl": "Peter is a man who is taller than Michael.", "fol": "(IsMale(Peter) & IsTallerThan(Peter,Michael))", "prediction": ["all x y.((Peter(x) & Michael(y)) -> TallerThan(x,y))", "all x.((Man(x) & TallerThan(x,Michael)) -> Peter(x))", "(TallerThanMichael(Peter) & TallerThanMichael(Peter))", "all x.((Man(x) & TallerThanMichael(x)) -> Peter(x))", "(TallerThan(Peter,Michael) & TallerThan(Peter,Michael))", "all x.((Peter(x) & TallerThan(x,Michael)) -> Man(x))", "all x.((Peter(x) & TallerThanMichael(x)) -> Man(x))", "(Taller(Peter,Michael) & Taller(Peter,Michael))", "(TallerThanMichael(Peter) & TallerThanMichael(Peter,Michael))", "(Man(Peter,Michael) & TallerThan(Peter,Michael))", "all x y.((Man(x) & Man(y) & TallerThan(x,y)) -> Peter(x))", "all x y.((Man(x) & Michael(y)) -> TallerThan(x,y))", "all x y.((Peter(x) & Michael(y)) -> Taller(x,y))", "all x.(Peter(x) -> TallerThanMichael(x))", "(TallerThanMichael(Peter,Michael))", "exists x.(Man(x) & TallerThan(x,Michael))"]}
{"id": "folio_validation_326", "nl": "Michael can block any shooting from a person as long as the person does not jump when shooting.", "fol": "all x.(-CanJumpWhenShooting(x) -> CanBlockShooting(Michael,x))", "prediction": ["all x y.((Person(x) & Person(y) & -JumpWhenShooting(y)) -> CanBlockShooting(x,y))", "all x y.((Person(x) & Person(y) & -JumpWhenShooting(y)) -> BlocksShooting(x,y))", "all x y.((Michael(x) & Person(y) & -JumpWhenShooting(y)) -> BlocksShooting(x,y))", "all x y.((Person(x) & Person(y) & -JumpWhenShooting(y,x)) -> BlocksShooting(x,y))", "all x y.((Person(x) & Person(y) & -JumpWhenShooting(y,x)) -> CanBlockShooting(x,y))", "all x y z.((Michael(x) & Person(y) & Shooting(z) & -Jump(y,z)) -> CanBlock(x,y,z))", "all x y.((Person(x) & Person(y) & -JumpWhenShooting(y)) -> CanBlock(x,y))", "all x y z.((Michael(x) & Person(y) & Shooting(z) & -Jump(y,z)) -> Blocks(x,y,z))", "all x.((Person(x) & -JumpWhenShooting(x)) -> CanBlockShooting(x))", "all x y z.((Michael(x) & Shooting(y) & Person(z) & -JumpWhenShooting(z)) -> CanBlock(x,y,z))", "all x y z.((Michael(x) & Shooting(y) & Person(z) & -JumpWhenShooting(z)) -> Blocks(x,y,z))", "all x.((Person(x) & -JumpWhenShooting(x)) -> BlocksShooting(x))", "all x y.((Person(x) & Michael(y)) -> BlocksShooting(y,x))", "all x y.((Michael(x) & Person(y) & -JumpWhenShooting(y)) -> CanBlockShooting(x,y))", "all x y.((Person(x) & Person(y) & -Jump(y)) -> BlocksShooting(x,y))", "all x y.((Person(x) & Michael(y) & -JumpWhenShooting(y)) -> BlocksShooting(y,x))"]}
{"id": "folio_validation_327", "nl": "Michael cannot block Windy's shooting.", "fol": "-CanBlockShooting(Michael,Windy)", "prediction": ["all x.((Michael(x) & Windy(y)) -> -BlocksShooting(x,y))", "all x y.((Michael(x) & Windy(y)) -> -BlocksShooting(x,y))", "all x y.((Michael(x) & Windy(y)) -> -Blocks(x,y))", "all x.((Michael(x) & Windy(x)) -> -BlocksShooting(x))", "all x.(Michael(x) -> -BlocksWindysShooting(x))", "all x.((Michael(x) & Windy(x)) -> -BlocksShooting(x,y))", "all x y.((Michael(x) & Windy(y)) -> CannotBlock(x,y))", "all x.((Michael(x) & Windy(y)) -> -Blocks(x,y))", "all x.((Michael(x) & Windy(y)) -> CannotBlock(x,y))", "all x y.((Michael(x) & Windy(y)) -> -CanBlock(x,y))", "all x.((Michael(x) & Windy(x)) -> -Blocks(x,Windy))", "all x y.((Michael(x) & Windy(y)) -> -Block(x,y))", "all x.(Michael(x) -> -BlocksWindy(x))", "all x.((Michael(x) & Windy(x)) -> CannotBlock(x,y))", "all x.((Michael(x) & Windy(y)) -> -CanBlock(x,y))", "all x.((Michael(x) & Windy(x)) -> -BlocksShooting(x,Windy))"]}
{"id": "folio_validation_328", "nl": "Every shooter who can jump when shooting is a great shooter.", "fol": "all x.(CanJumpWhenShooting(x) -> IsGreatShooter(x))", "prediction": ["all x.((Shooter(x) & CanJumpWhenShooting(x)) -> GreatShooter(x))", "all x.((Shotter(x) & CanJumpWhenShooting(x)) -> GreatShotter(x))", "all x.((Shooter(x) & JumpsWhenShooting(x)) -> GreatShooter(x))", "all x.((Shoter(x) & CanJumpWhenShooting(x)) -> GreatShoter(x))", "all x.((Shooter(x) & CanJumpWhenShowing(x)) -> GreatShooter(x))", "all x.((Shotter(x) & CanJumpWhenShooting(x)) -> GreatShooter(x))", "all x.((Shooter(x) & CanJump(x)) -> GreatShooter(x))", "all x.((Shooter(x) & CanJump(x) & Shooting(x)) -> GreatShooter(x))", "all x.((Shooter(x) & CanJumpWhenShooting(x)) -> GreatShoter(x))", "all x.((Shotter(x) & CanJumpWhenShooting(x)) -> GreatShoter(x))", "all x.((Shooter(x) & JumpWhenShooting(x)) -> GreatShooter(x))", "all x.((Shoter(x) & CanJumpWhenShooting(x)) -> GreatShooter(x))", "all x.((Shooter(x) & CanJumpWhenShooting(x)) -> GreatShotter(x))", "all x.((Shoter(x) & CanJumpWhenShooting(x)) -> GreatShotter(x))", "all x.((Shooter(x) & CanJumpWhenSharing(x)) -> GreatShooter(x))", "all x.((Shotter(x) & JumpsWhenShooting(x)) -> GreatShotter(x))"]}
{"id": "folio_validation_329", "nl": "Peter is shorter than a man in Michael's class.", "fol": "exists x.(IsMale(x) & InSameClassAs(x,Michael) & -IsEqualTo(x,Michael) & -IsTallerThan(Peter,x))", "prediction": ["all x y.((Peter(x) & Man(y)) -> ShorterThan(x,y))", "all x y.((Peter(x) & Man(y) & InClass(x,y)) -> ShorterThan(x,y))", "all x y.((Peter(x) & Man(y) & InMichaelsClass(x,y)) -> ShorterThan(x,y))", "all x y.((Peter(x) & Man(y)) -> Shorter(x,y))", "all x.((Peter(x) & Man(x)) -> ShorterThan(x,Michael))", "all x y.((Peter(x) & Man(y) & InMichaelsClass(x,y)) -> Shorter(x,y))", "all x y.((Peter(x) & Man(y) & InClass(x,y)) -> Shorter(x,y))", "all x y.((Peter(x) & Man(y) & InMichael'sClass(x,y)) -> ShorterThan(x,y))", "all x y z.((Peter(x) & Man(y) & Class(z)) -> ShorterThan(x,y,z))", "all x y.((Peter(x) & Man(y) & InMichael'sClass(x,y)) -> Shorter(x,y))", "all x.((Peter(x) & ManInMichaelsClass(x)) -> ShorterThan(x,Michael))", "all x y.((Michael(x) & Peter(y)) -> ShorterThan(y,x))", "all x y.((Man(x) & Peter(y)) -> ShorterThan(y,x))", "all x.((Peter(x) & ManInMichael'sClass(x)) -> ShorterThan(x,Michael))", "all x y.((Peter(x) & Man(y)) -> ShorterInClass(x,y))", "all x.((Peter(x) & Man(x) & InMichaelsClass(x)) -> Shorter(x))"]}
{"id": "folio_validation_330", "nl": "Windy is a great shooter.", "fol": "IsGreatShooter(Windy)", "prediction": ["all x.(Windy(x) -> GreatShooter(x))", "all x.(Windy(x) -> GreatShoter(x))", "(GreatShooter(Windy) & GreatShooter(Windy))", "all x.(Windy(x) -> GreatShotter(x))", "(GreatShooter(Windy) -> GreatShooter(Windy))", "(GreatShooter(Windy) & GreatShotter(Windy))", "All x.(Windy(x) -> GreatShooter(x))", "(GreatShooter(Windy) -> GreatShotter(Windy))", "(GreatShooter(Windy) -> GreatShoter(Windy))", "(GreatShooter(Windy) -> GreatShooter(Windy))", "(GreatShooter(Windy)", "(GreatShoter(Windy) -> Great(Windy))", "All x.(Windy(x) -> GreatShoter(x))", "(GreatShotter(Windy) -> Great(Windy))", "(GreatShooter(Windy) -> Great(Windy))", "(GreatShooter(Windy) & Great(Windy))"]}
{"id": "folio_validation_331", "nl": "Peter can block Windy's shooting.", "fol": "CanBlockShooting(Peter,Windy)", "prediction": ["all x y.((Peter(x) & Windy(y)) -> CanBlock(x,y))", "all x y.((Peter(x) & Windy(y)) -> BlocksShooting(x,y))", "all x.((Peter(x) & Windy(x)) -> BlocksShooting(x))", "all x y z.((Peter(x) & Windy(y) & Shooting(z)) -> CanBlock(x,y,z))", "all x.((Peter(x) & Windy(y)) -> BlocksShooting(x,y))", "all x.((Peter(x) & Windy(x)) -> CanBlock(x,Windy))", "all x y z.((Peter(x) & Windy(y) & Shooting(z)) -> Blocks(x,y,z))", "all x.((Peter(x) & Windy(y)) -> CanBlock(x,y))", "all x.((Peter(x) & Windy(x)) -> CanBlock(x,y))", "all x y.((Peter(x) & Windy(y)) -> CanBlockShooting(x,y))", "All x y.((Peter(x) & Windy(y)) -> BlocksShooting(x,y))", "All x y.((Peter(x) & Windy(y)) -> CanBlock(x,y))", "all x.((Peter(x) & Windy(x)) -> BlocksShooting(x,y))", "all x.((Peter(x) & CanBlockWindy(x)) -> CanBlockWindy(x))", "all x y.((Peter(x) & Windy(y)) -> BlocksShowing(x,y))", "all x.(Peter(x) -> BlocksWindysShooting(x))"]}
{"id": "folio_validation_332", "nl": "Barutin Cove is named after the Bulgarian settlement of Barutin.", "fol": "(BarutinCove(Barutin) & NamedAfterSettlement(Barutin,Settlement) & LocationOf(Settlement,Bulgaria))", "prediction": ["all x y.((BarutinCove(x) & BulgarianStandard(y)) -> NamedAfter(x,y))", "all x.(BarutinCove(x) -> NamedAfterBulgarianStandard(x))", "all x.(BarutinCove(x) -> NamedAfterBulgarianStandard(x,Barutin))", "BarutinCove (BulgarianStandard(Barutin) & NamedAfter(BulgarianStandard(Barutin))", "all x.(BarutinCove(x) -> NamedAfterBulgarianStadium(x,Barutin))", "all x.(BarutinCove(x) -> NamedAfterBulgarianStadion(x))", "all x.(BarutinCove(x) -> NamedAfterBulgarianStadion(x,Barutin))", "BarutinCove (BulgarianStandard(Barutin) & NamedAfter(Barutin))", "all x.(BarutinCove(x) -> NamedAfterBulgarianStadium(x))", "all x.(BarutinCove(x) -> NamedAfterBulgarishStandard(x))", "all x.(BarutinCove(x) -> NamedAfterBulgarianStanding(x))", "all x.(BarutinCove(x) -> NamedAfterBulgarianStation(x))", "BarutinCove is named after the BulgarianStadionOfBarutin.", "BarutinCove is named after the BulgarianStandard(Barutin)", "all x.(BarutinCove(x) -> NamedAfterBulgarianStandard(x))", "all x.(BarutinCove(x) -> NamedAfterBulgarishStanding(x))"]}
{"id": "folio_validation_333", "nl": "Barutin Cove is on the southwest coast of Snow Island.", "fol": "LocationOf(Barutin,Snow)", "prediction": ["BarutinCove is located on the southwest coast of SnowIsland.", "(SnowIsland(BarutinCove) & OnSudwestCoast(BarutinCove))", "BarutinCove is onSnowIsland(BarutinCove,SouthwestCoast)", "all x.(BarutinCove(x) -> OnSnowIslandSudwestCoast(x))", "(SnowIsland(BarutinCove) & OnSudwestCoast(BarutinCove,SnowIsland))", "BarutinCove is onSnowIslandSudwestCoast(BarutinCove)", "all x.(BarutinCove(x) -> OnSnowIsland(x))", "BarutinCove is located on the SouthwestCoastOfSnowIsland(BarutinCove,SnowIsland)", "BarutinCove is onSnowIsland(BarutinCove)", "BarutinCove is onSnowIsland(BarutinCove,SudwestCoast)", "BarutinCove is onSnowIslandSudwestCoast(BarutinCove,SnowIsland)", "BarutinCove is onSnowIsland(BarutinCove,SouthwesternCoast)", "all x.(BarutinCove(x) -> (OnSnowIsland(x) & SouthwestCoast(x)))", "BarutinCove (SnowIsland(Barutin) & SouthwestCoast(Barutin))", "All x.(BarutinCove(x) -> OnSnowIslandSudwestCoast(x))", "all x.(BarutinCove(x) -> OnSnowIslandSufficientCoast(x))"]}
{"id": "folio_validation_334", "nl": "The South Shetland Islands include Snow Island, Greenwich Island, and Deception Island.", "fol": "(LocationOf(Snow,Shetland) & LocationOf(Greenwich,Shetland) & LocationOf(Deception,Shetland))", "prediction": ["all x.(SouthShetlandIsland(x) -> (IncludesSnowIsland(x) | IncludesGreenwichIsland(x) | IncludesDeceptionIsland(x)))", "all x.(SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))", "(SouthShetlandIsland(SnowIsland) & GreenwichIsland(SnowIsland) & DeceptionIsland(SnowIsland))", "all x.(SouthShetlandIsland(x) -> (IncludesSnowIsland(x) | IncludesGreenwichIsland(x) | IncludesDeceptionIsland(x)))", "all x.(SouthShetlandIsland(x) -> (IncludesSnowIsland(x) & IncludesGreenwichIsland(x) & IncludesDeceptionIsland(x)))", "all x.(SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))", "All x.(SouthShetlandIsland(x) -> (IncludesSnowIsland(x) | IncludesGreenwichIsland(x) | IncludesDeceptionIsland(x)))", "(SouthShetlandIsland(SnowIsland) & GreenwichIsland(GreenwichIsland) & DeceptionIsland(DeceptionIsland))", "(SouthShetlandIsland(SnowIsland) | GreenwichIsland(SnowIsland) | DeceptionIsland(SnowIsland)))", "all x.(SouthShetlandIsland(x) -> (SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x)))", "(SouthShetlandIsland(SnowIsland) & GreenwichIsland(GreenwichIsland) & DeceptionIsland(SnowIsland))", "all x.(SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))", "(SnowIsland(SnowIsland) & GreenwichIsland(SnowIsland) & DeceptionIsland(SnowIsland))", "All x.(SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))", "(SnowIsland(SnowIsland) & GreenwichIsland(GreenwichIsland) & DeceptionIsland(SnowIsland))", "(SouthShetlandIslands(SnowIsland) & GreenwichIsland(SnowIsland) & DeceptionIsland(SnowIsland))"]}
{"id": "folio_validation_335", "nl": "The South Shetland Islands are considered part of Antarctica.", "fol": "LocationOf(Shetland,Antarctica)", "prediction": ["all x.(SouthShetlandIslands(x) -> PartOfAntarctica(x))", "all x.(SouthShetlandIsland(x) -> PartOfAntarctica(x))", "all x.(SouthShetlandIslands(x) -> PartOfAntarctica(x))", "all x.(SouthShetlandIsland(x) -> PartOfAntarctica(x))", "all x.(SouthShetlandIslands(x) -> PartOfAntarctica(x))", "all x y.((SouthShetlandIsland(x) & Antarctica(y)) -> PartOf(x,y))", "all x.(SouthShetlandIsland(x) -> PartOfAntarctica(x))", "all x.(SouthShetlandIslands(x) -> PartOfAntarctica(x))", "All x.(SouthShetlandIsland(x) -> PartOfAntarctica(x))", "All x.(SouthShetlandIslands(x) -> PartOfAntarctica(x))", "all x.(SouthShetlandIsland(x) -> PartOfAntarctica(x))", "all x.((SouthShetlandIsland(x) & Antarctica(x)) -> PartOf(x,y))", "all x.(SouthShetlandIslands(x) -> PartOfAntarcticAntarctica(x))", "All x.(SouthShetlandIsland(x) -> PartOfAntarctica(x))", "All x.(SouthShetlandIslands(x) -> PartOfAntarctica(x))", "all x.(SouthShetlandIslands(x) -> PartOfAntarctica(x))"]}
{"id": "folio_validation_336", "nl": "If A is located in B and B is located in C, then A is located in C.", "fol": "all x y z.((LocationOf(x,y) & LocationOf(y,z)) -> LocationOf(x,z))", "prediction": ["all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x.((LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x))", "all x.((LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x))", "all x.((A(x) & LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x))", "all x.((LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocalizedIn(x,C))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x y.((A(x) & B(y) & LocatedIn(x,y)) -> LocatedIn(x,y))", "all x.((LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x y z.((A(x) & B(y) & C(z)) -> (LocatedIn(x,y) & LocatedIn(x,z)))", "all x y z.((A(x) & B(y) & C(z)) -> (LocatedIn(x,y) & LocatedIn(y,z)))"]}
{"id": "folio_validation_337", "nl": "Barutin is named after all islands in Antarctica.", "fol": "all x.(LocationOf(x,Antarctica) -> NamedAfterSettlement(Barutin,x))", "prediction": ["all x y.((Barutin(x) & Island(y)) -> NamedAfter(x,y))", "all x.(Barutin(x) -> NamedAfterAllIslandsInAntarctica(x))", "all x y z.((Barutin(x) & Island(y) & Antarctica(z)) -> NamedAfter(x,y,z))", "all x.(Barutin(x) -> NamedAfterAllIslands(x))", "all x.(Barutin(x) -> NamedAfterIslandsInAntarctica(x))", "all x.(Barutin(x) -> exists y.(Island(y) & InAntarctica(x,y))))", "all x.(Barutin(x) -> exists y.(Island(y) & NamedAfter(x,y))))", "all x y.((Barutin(x) & Island(y) & Antarctica(y)) -> NamedAfter(x,y))", "all x.(Barutin(x) -> NamedAfterIslands(x))", "all x.(Barutin(x) -> exists y.(Island(y) & InAntarctica(x,y))))", "all x.((Barutin(x) & Island(y)) -> NamedAfter(x,y))", "all x.(Barutin(x) -> exists y.(Island(y) & InAntarctica(x,y)))", "all x.(Barutin(x) -> exists y.(Island(y) & LocatedIn(x,y))))", "all x.(Barutin(x) -> exists y.(Island(y) & NamedAfter(x,y)))", "all x.(Barutin(x) -> exists y.(Island(y) & NamedAfter(x,y))))", "all x.(Barutin(x) -> exists y.(Island(y) & InAntarctica(x) & NamedAfter(x,y)))"]}
{"id": "folio_validation_338", "nl": "There is at least one cove in Antarctica named after a place in Bulgaria.", "fol": "exists x y.(BarutinCove(x) & NamedAfterSettlement(x,y) & LocationOf(y,Bulgaria))", "prediction": ["exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlaceInBulgaria(x))", "exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlaceInBulgaria(x))", "exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlace(x,Bulgaria))", "exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlace(x,Bulgaria))", "exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlace(x))", "exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlace(x))", "exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlace(x) & InBulgaria(x))", "exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlace(x) & InBulgaria(x))", "exists x y.(Cove(x) & Antarctica(y) & NamedAfterPlace(x,y))", "exists x.(Cove(x) & InAntarcticAntarctica(x) & NamedAfterPlaceInBulgaria(x))", "exists x y.(Cove(x) & Antarctica(y) & NamedAfter(x,y))", "exists x y z.(Cove(x) & Antarctica(y) & Place(z) & NamedAfter(x,z))", "exists x.(AntarcticCove(x) & NamedAfterPlace(x,Bulgaria))", "exists x.(AntarcticCove(x) & NamedAfterPlaceInBulgaria(x))", "exists x.(CoveInAntarctica(x) & NamedAfterPlaceInBulgaria(x))", "exists x.(Cove(x) & Antarctica(x) & NamedAfterPlace(x,Bulgaria))"]}
{"id": "folio_validation_339", "nl": "Barutin is not located in Antarctica.", "fol": "-LocationOf(Barutin,Antarctica)", "prediction": ["all x.(Barutin(x) -> -LocatedInAntarctica(x))", "(-LocatedInAntarctica(Barutin))", "all x.(Barutin(x) -> -LocatedInAntarctica(x))", "-exists x.(Barutin(x) & -LocatedInAntarctica(x))", "Barutin is not locatedInAntarctica(Barutin)", "Barutin -LocatedInAntarctica(Barutin)", "-exists x.(Barutin(x) & -LocatedInAntarctica(x))", "-(Barutin(Barutin) & LocatedInAntarctica(Barutin))", "-LocatedInAntarctica(Barutin)", "all x.(Barutin(x) -> -LocatedInAntarctica(x))", "-exists x.(Barutin(x) & -LocatedIn(x,Antarctica))", "-exists x.(Barutin(x) & -InAntarctica(x))", "(-exists x.(Barutin(x) & LocatedInAntarctica(x)))", "(-exists x.(Barutin(x) & LocatedIn(x,Antarctica)))", "-exists x.(Barutin(x) & -LocatedIn(x,Antarctica))", "Barutin -LocatedInAntarctica(Barutin,Antarctica))"]}
{"id": "folio_validation_340", "nl": "Some affection is love.", "fol": "exists x.(Affection(x) & IsLove(x))", "prediction": ["exists x.(Affection(x) & Love(x))", "exists x.(Affliction(x) & Love(x))", "exists x.(Affidavitation(x) & Love(x))", "exists x y.(Affection(x) & Love(y))", "exists x.((Affection(x) & Love(x))", "exists x.(Affection(x) & Love(x))", "all x.(Affection(x) -> Love(x))", "exists x.exists y.(Affection(x) & Love(y))", "exists x y.((Affection(x) & Love(y)) -> Affection(x,y))", "exists x y.((Affection(x) & Love(y)) -> Love(x))", "exists x.exists y.(Affection(x) & Affection(y) & Love(x))", "(exists x.(Affection(x) & Love(x)))", "exists x.(Animation(x) & Love(x))", "exists x y.((Affection(x) & Love(y))", "exists x.exists y.(Affection(x) & Affection(y) & Love(y))", "exists x y.((Affection(x) & Love(y)) -> Is(x,y))"]}
{"id": "folio_validation_341", "nl": "Some love is positive.", "fol": "exists x.(IsLove(x) & IsPositive(x))", "prediction": ["exists x.(Love(x) & Positive(x))", "exists x.(Living(x) & Positive(x))", "exists x.(Loving(x) & Positive(x))", "exists x.(Love(x) & Positive(x))", "exists x.(Love(x) & Possible(x))", "exists x.(Like(x) & Positive(x))", "exists x.(Lover(x) & Positive(x))", "exists x y.(Love(x) & Positive(y))", "exists x.(Lord(x) & Positive(x))", "exists x.(Love(x) & Positive(x))", "exists x.(LOVE(x) & Positive(x))", "exists x.(Lise(x) & Positive(x))", "exists x.(Lie(x) & Positive(x))", "exists x.(Love(x) -> Positive(x))", "all x.(Love(x) -> Positive(x))", "exists x.(Lieu(x) & Positive(x))"]}
{"id": "folio_validation_342", "nl": "Some affection is positive.", "fol": "exists x.(Affection(x) & IsPositive(x))", "prediction": ["exists x.(Affection(x) & Positive(x))", "exists x.(Affliction(x) & Positive(x))", "exists x.(Affidavitation(x) & Positive(x))", "exists x.(Affection(x) & Positive(x))", "exists x.((Affection(x) & Positive(x))", "exists x.(Affection(x) & PositiveAffection(x))", "exists x.(Affection(x) & Positive(x))", "exists x.(Animation(x) & Positive(x))", "exists x y.(Affection(x) & Positive(y))", "exists x.(Affection(x) & Possible(x))", "exists x.(Affidavite(x) & Positive(x))", "exists x.(Affection(x) -> Positive(x))", "exists x.(Animal(x) & Positive(x))", "all x.(Affection(x) -> Positive(x))", "exists x.(Affinity(x) & Positive(x))", "exists x.(PositiveAffection(x))"]}
{"id": "folio_validation_343", "nl": "If something can transport multiple passengers, then they are not empty.", "fol": "all x.(CanTransportMultiplePassengers(x) -> -IsEmpty(x))", "prediction": ["all x.((TransportsMultiplePassengers(x) & -Empty(x)) -> CanTransportMultiplePassengers(x))", "all x.((TransportsMultiplePassengers(x)) -> -Empty(x))", "all x.((TransportsMultiplePassengers(x) & -Empty(x)) -> TransportsMultiplePassengers(x))", "all x.(TransportsMultiplePassengers(x) -> -Empty(x))", "all x.((TransportsMultiplePassengers(x) & -Empty(x)) -> -TransportsMultiplePassengers(x))", "all x.((TransportsMultiplePassengers(x) & CanTransportMultiplePassengers(x)) -> -Empty(x))", "all x.((TransportMultiplePassengers(x) & -Empty(x)) -> CanTransportMultiplePassengers(x))", "all x.((Passenger(x) & TransportsMultiplePassengers(x)) -> -Empty(x))", "all x.(TransportMultiplePassengers(x) -> -Empty(x))", "all x.((CanTransportMultiplePassengers(x)) -> -Empty(x))", "all x.((CanTransportMultiplePassengers(x) & -Empty(x)) -> TransportsMultiplePassengers(x))", "all x.((Person(x) & TransportsMultiplePassengers(x)) -> -Empty(x))", "all x.((TransportMultiplePassengers(x) & -Empty(x)) -> TransportMultiplePassengers(x))", "all x.((TravelsMultiplePassengers(x) & -Empty(x)) -> CanTransportMultiplePassengers(x))", "all x.((CanTransportMultiplePassengers(x) & -Empty(x)) -> CanTransportMultiplePassengers(x))", "all x.((TransportsMultiplePassengers(x) & -Empty(x)) -> CanTravelMultiplePassengers(x))"]}
{"id": "folio_validation_344", "nl": "All airlines can transport multiple passengers.", "fol": "all x.(IsAirline(x) -> CanTransportMultiplePassengers(x))", "prediction": ["all x.(Airline(x) -> TransportsMultiplePassengers(x))", "all x.(Airline(x) -> CanTransportMultiplePassengers(x))", "all x.(Airline(x) -> TransportMultiplePassengers(x))", "all x y.((Airline(x) & Passenger(y)) -> CanTransport(x,y))", "all x y.((Airline(x) & Passenger(y)) -> TransportsMultiplePassengers(x,y))", "all x y.((Airline(x) & Passenger(y)) -> TransportsMultiple(x,y))", "all x y.((Airline(x) & Passenger(y)) -> Transports(x,y))", "all x y z.((Airline(x) & Passenger(y) & Passenger(z)) -> CanTransport(x,y,z))", "all x y z.((Airline(x) & Passenger(y) & Passenger(z)) -> Transports(x,y,z))", "all x y z.((Airline(x) & Passenger(y) & Passenger(z)) -> TransportsMultiplePassengers(x,y,z))", "all x.(Airline(x) -> exists y.(Passenger(y) & Transports(x,y))))", "all x y.((Airline(x) & Passenger(y)) -> TransportMultiple(x,y))", "all x y z.((Airline(x) & Passenger(y) & Passenger(z)) -> TransportsMultiple(x,y,z))", "all x.(Airline(x) -> exists y.(Passenger(y) & Transport(x,y))))", "all x.(Airline(x) -> (TransportMultiplePassengers(x) | TransportMultiplePassengers(x)))", "all x.(Airline(x) -> exists y.(Passenger(y) & Transports(x,y)))"]}
{"id": "folio_validation_345", "nl": "All planes are empty.", "fol": "all x.(IsPlane(x) -> IsEmpty(x))", "prediction": ["all x.(Plane(x) -> Empty(x))", "all x.(Plane(x) -> Blank(x))", "all x.(Panel(x) -> Empty(x))", "all x y.((Plane(x) & Plane(y)) -> Empty(x))", "all x.(Pilot(x) -> Empty(x))", "all x.(Plane(x) -> -Empty(x))", "all x y.((Plane(x) & Plane(y)) -> Empty(x,y))", "all x.(Plane(x) -> Empty(x))", "all x.(Planet(x) -> Empty(x))", "all x.(Pavion(x) -> Empty(x))", "all x.(Airplane(x) -> Empty(x))", "all x.(Plane(x) -> Ego(x))", "All x.(Plane(x) -> Empty(x))", "all x.(Plane(x) -> Eschew(x))", "all x.(Plane(x) -> Erase(x))", "all x.(Pace(x) -> Empty(x))"]}
{"id": "folio_validation_346", "nl": "All Boeing 707s are planes.", "fol": "all x.(IsBoeing707(x) -> IsPlane(x))", "prediction": ["all x.(Boeing707(x) -> Plane(x))", "all x.(Boeing(x) -> Plane(x))", "all x.(BoeingBoaton707(x) -> Plane(x))", "all x.(Boeing(x) -> Airplane(x))", "all x.(Boeing737(x) -> Plane(x))", "all x.(Boeing707(x) -> Airplane(x))", "all x.(BoeingBoeing707(x) -> Plane(x))", "all x.(Boeing707.(x) -> Plane(x))", "all x.(Boeing777(x) -> Plane(x))", "all x.((Boeing(x) & Boeing707(x)) -> Plane(x))", "all x.(BoeingBombardier(x) -> Plane(x))", "all x.(Boeing(x) & Boeing(x) -> Plane(x))", "all x.(BoeingBoarding707(x) -> Plane(x))", "all x.(BoeingBoaton707(x) -> Airplane(x))", "all x.(Boeing-707(x) -> Plane(x))", "all x.(Boeing 707(x) -> Plane(x))"]}
{"id": "folio_validation_347", "nl": "If Greyhound is not an airline, then there are no Greyhound planes.", "fol": "(-IsAirline(GreyhoundBus) -> -(IsAirline(GreyhoundBus) | IsPlane(GreyhoundBus)))", "prediction": ["all x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlane(x))", "all x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlanes(x))", "all x.((Greyhound(x) & -Airline(x)) -> NoGreyhoundPlanes(x))", "all x.((Airline(x) & -Greyhound(x)) -> -GreyhoundPlane(x))", "all x.((Airline(x) & -Greyhound(x)) -> -GreyhoundPlanes(x))", "all x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlanet(x))", "all x.((Greyhound(x) & -Airline(x)) -> -GrinhoundPlane(x))", "All x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlane(x))", "all x.((Greyhound(x) & -Airline(x)) -> -GrinhoundPlanes(x))", "All x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlanes(x))", "all x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPilots(x))", "all x.((Greyhound(x) & -Airline(x)) -> -GrayhoundPlanes(x))", "all x.((Greyhound(x) & -Airline(x)) -> NoGrayhoundPlanes(x))", "all x.((Greyhound(x) & -Airline(x)) -> -GrayhoundPlane(x))", "all x.((Grayhound(x) & -Airline(x)) -> -GreyhoundPlane(x))", "all x.((Grinhound(x) & -Airline(x)) -> -GrinhoundPlane(x))"]}
{"id": "folio_validation_348", "nl": "Greyhound is an airline.", "fol": "IsAirline(GreyhoundBus)", "prediction": ["all x.(Greyhound(x) -> Airline(x))", "all x.(Greyhound(x) -> Airlines(x))", "All x.(Greyhound(x) -> Airline(x))", "(Airline(Greyhound) & Airline(Greyhound))", "All x.(Greyhound(x) -> Airlines(x))", "(Airline(Greyhound) & -Airline(Greyhound))", "all x.(Grayhound(x) -> Airline(x))", "exists x.(Greyhound(x) & Airline(x))", "all x.((Greyhound(x) & Airline(x)) -> Airline(x))", "all x.((Greyhound(x) & Airline(x)) -> Flying(x))", "all x.(Greyhound(x) -> Airline(x))", "all x.(Grinhound(x) -> Airline(x))", "(Airline(greyhound) & Airline(greyhound))", "(Airline(Greyhound) & Flyer(Greyhound))", "all x.(Grayhound(x) -> Airlines(x))", "(Airline(Greyhound) & Airlines(Greyhound))"]}
{"id": "folio_validation_349", "nl": "A Greyhound is a Boeing 707.", "fol": "IsBoeing707(GreyhoundBus)", "prediction": ["all x.(Greyhound(x) -> Boeing707(x))", "all x.(Greyhound(x) -> Boeing707.", "all x.(Greyhound(x) -> Boeing707(x))", "all x.(Greyhound(x) -> Boeing707.(Greyhound(x)))", "all x.(Greyhound(x) -> Boeing707.(Greyhound(x) & Boeing707.(Greyhound(x)))", "all x.(Greyhound(x) -> (Boeing707(x) & Boeing707(x)))", "all x.(Greyhound(x) -> Boeing707.(Greyhound(x)))", "all x.(Greyhound(x) -> Boeing707.(Greyhound(x) & Boeing707.(Greyhound(x)))", "all x.(Greyhound(x) -> (Boeing707(x) & Boeing707(x)))", "all x.(Greyhound(x) -> Boeing707.Boeing(x))", "all x.(Greyhound(x) -> (Boeing707(x) | Boeing707(x)))", "all x.(Grayhound(x) -> Boeing707(x))", "all x.(Greyhound(x) -> Boeing707.Boeing707.(Greyhound(x)))", "all x.(Greyhound(x) -> (Boeing707(x) & Boeing707.(x))))", "all x.(Grinhound(x) -> Boeing707(x))", "all x.(Greyhound(x) -> Boeing707. (Boeing(x) & Boeing(x) & Boeing(x)))"]}
{"id": "folio_validation_350", "nl": "A Greyhound is not a Boeing 707.", "fol": "-IsBoeing707(GreyhoundBus)", "prediction": ["all x.(Greyhound(x) -> -Boeing707(x))", "all x.(Greyhound(x) -> -Boeing737(x))", "all x.(Greyhound(x) -> -Boeing(x) & Boeing(x) & 707(x)))", "all x.(Greyhound(x) -> -Boeing707.(x))", "all x.(Greyhound(x) -> -Boeing707.(Greyhound(x)))", "all x.((Greyhound(x) & -Boeing707(x)) -> -Boeing707.(x))", "all x.(Greyhound(x) -> -Boeing(x) & Boeing(x))", "all x.(Greyhound(x) -> (-BoeingBoeing707(x)))", "all x.(Greyhound(x) -> -Boeing-707(x))", "all x.(Greyhound(x) -> -BoeingBoeing707(x))", "all x.(Greyhound(x) -> -Boeing(x) & Boeing(x) & 707.(Greyhound(x)))", "all x.(Greyhound(x) -> -BoeingBoeing707.(x))", "all x.(Greyhound(x) -> -Boeing(x) & Boeing(x) & 707(x))", "all x.(Greyhound(x) -> -Boeing707.(x)))", "all x.(Greyhound(x) -> -Boeing777(x))", "all x.(Greyhound(x) -> -BoeingBoeing707.(x)))"]}
{"id": "folio_validation_351", "nl": "All mammals are animals.", "fol": "all x.(IsMammal(x) -> IsAnimal(x))", "prediction": ["all x.(Mammal(x) -> Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> Animal(x,y))", "all x.exists y.(Mammal(x) & Animal(y))", "all x.((Mammal(x) & Animal(x)) -> Animal(x))", "(all x.(Mammal(x) -> Animal(x)))", "all x.exists y.(Mammal(x) & Animal(y) & Animal(y))", "all x.exists y.(Mammal(x) & Animal(y) & Animal(x))", "all x.exists y.(Mammal(x) & Animal(y) & Animal(z))", "all x.exists y.(Mammal(x) & Animal(y) & Animal(x,y))", "(all x.(Mammal(x) -> Animal(x))", "exists x.(Mammal(x) & Animal(x))", "all x.exists y.(Mammal(x) & Animal(y) & LivesIn(x,y))", "all x.exists y.(Mammal(x) & Animal(y) & Animated(x,y))", "all x.exists y.(Mammal(x) & Animal(y) & Animated(x))"]}
{"id": "folio_validation_352", "nl": "All monkeys are mammals. ", "fol": "all x.(IsMonkey(x) -> IsMammal(x))", "prediction": ["all x.(Monkey(x) -> Mammal(x))", "all x.(Mammal(x) -> Monkey(x))", "all x.(Mammal(x) -> Monkey(x))", "all x y.((Monkey(x) & Mammal(y)) -> Mammal(x))", "all x.((Monkey(x) & Mammal(x)) -> Mammal(x))", "all x.(Moon(x) -> Mammal(x))", "all x.(Mammal(x) -> (Monkey(x) & Mammal(x)))", "all x y.((Monkey(x) & Mammal(y)) -> Mammal(x,y))", "all x.(Monkey(x) -> Mammal(x))", "all x.(Mongolian(x) -> Mammal(x))", "(all x.(Monkey(x) -> Mammal(x))", "all x.(Mammal(x) -> (Monkey(x) & -Mammal(x)))", "all x.(Mammal(x) -> Monk(x))", "(all x.(Monkey(x) -> Mammal(x)))", "all x.(Mammal(x) & Monkey(x))", "(all x.(Mammal(x) -> Monkey(x)))"]}
{"id": "folio_validation_353", "nl": "An animal is either a monkey or a bird.", "fol": "all x.(IsMonkey(x) | IsBird(x))", "prediction": ["all x.(Animal(x) -> (Monkey(x) | Bird(x)))", "all x.(Animal(x) -> (Mammal(x) | Bird(x)))", "all x.(Animal(x) -> ((Monkey(x) | Bird(x))))", "all x.(Animal(x) -> (Mouse(x) | Bird(x)))", "all x.(Animal(x) -> (Monkey(x) | Bird(x)))", "all x.(Animal(x) -> (Maintan(x) | Bird(x)))", "all x.(Animal(x) -> (Moon(x) | Bird(x)))", "exists x.(Animal(x) & (Monkey(x) | Bird(x)))", "all x.(Animal(x) -> (IsMonkey(x) | IsBird(x)))", "all x.(Animal(x) -> (Mammal(x) | Bird(x)))", "all x.(Animal(x) -> ((Mammal(x) | Bird(x))))", "all x.(Animal(x) -> (Munkey(x) | Bird(x)))", "all x.(Animal(x) -> (Magpie(x) | Bird(x)))", "all x y.((Animal(x) & Monkey(y)) | Bird(y)) -> Animal(x))", "all x.(Animal(x) -> (Muny(x) | Bird(x)))", "all x.(Animal(x) -> (Jungle(x) | Bird(x)))"]}
{"id": "folio_validation_354", "nl": "All birds fly.", "fol": "all x.(IsBird(x) -> CanFly(x))", "prediction": ["all x.(Bird(x) -> Fly(x))", "all x.(Bird(x) -> Flies(x))", "all x.(Bird(x) -> Floats(x))", "all x.exists y.(Bird(x) & Bird(y) & Flies(x,y))", "all x y.((Bird(x) & Bird(y)) -> Flies(x,y))", "all x.exists y.(Bird(x) & Bird(y) & Fly(x,y))", "all x y.((Bird(x) & Bird(y)) -> Fly(x,y))", "all x.(Bird(x) -> Float(x))", "all x y.((Bird(x) & Bird(y)) -> Flies(x))", "all x y.((Bird(x) & Bird(y)) -> Fly(x))", "all x.(Bird(x) -> Flows(x))", "all x.exists y.(Bird(x) & Bird(y) & Fly(y))", "all x.exists y.(Bird(x) & Bird(y) & Flies(x))", "(all x.(Bird(x) -> Fly(x)))", "(all x.(Bird(x) -> Flies(x)))", "all x.exists y.(Bird(x) & Bird(y) & Fly(x))"]}
{"id": "folio_validation_355", "nl": "All animals breathe.", "fol": "all x.(IsAnimal(x) -> CanBreathe(x))", "prediction": ["all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathe(x))", "all x y.((Animal(x) & Breathes(x)) -> Breathes(x))", "all x y.((Animal(x) & Breathes(x)) -> Breathes(y))", "all x y.((Animal(x) & Breathe(y)) -> Breathe(x,y))", "all x y.((Animal(x) & Breathes(x,y)) -> Breathes(x,y))", "all x y.((Animal(x) & Breathes(y)) -> Breathes(x,y))", "all x y.((Animal(x) & Breathe(y)) -> Breathes(x,y))", "all x y.((Animal(x) & Breathes(x)) -> Breathes(x,y))", "all x y.((Animal(x) & Animal(y)) -> Breathes(x,y))", "all x.((Animal(x) & Breathes(x)) -> Breathes(x))", "(all x.(Animal(x) -> Breathes(x)))", "all x y.((Animal(x) & Breathes(x,y)) -> Breathes(x))", "all x y.((Animal(x) & Breathes(y)) -> Breathes(x))", "all x y.((Animal(x) & Breathes(x,y)) -> Breathes(y))", "all x y.((Animal(x) & Breathe(y)) -> Breathe(x))"]}
{"id": "folio_validation_356", "nl": "If something can fly, then it has wings.", "fol": "all x.(CanFly(x) -> HasWings(x))", "prediction": ["all x.((CanFly(x) & HasWings(x)) -> CanFly(x))", "all x.(CanFly(x) -> HasWings(x))", "all x.((Fly(x) & HasWings(x)) -> CanFly(x))", "all x.((CausesFly(x) & HasWings(x)) -> CanFly(x))", "all x.((Calls(x) & CanFly(x)) -> HasWings(x))", "all x.((CanFly(x) | HasWings(x)) -> CanFly(x))", "all x.((CanFly(x) & Wings(x)) -> CanFly(x))", "all x.((CableFly(x) & HasWings(x)) -> CanFly(x))", "all x.((CanFly(x)) -> HasWings(x))", "all x.(Fly(x) -> HasWings(x))", "all x.((CanFly(x) & HasWings(x)) -> HasWings(x))", "all x.((CanFly(x) & HasWings(x)) -> -CanFly(x))", "exists x.(CanFly(x) & HasWings(x))", "all x y.((CanFly(x) & Wings(y)) -> Has(x,y))", "all x.((CanFly(x) & HasWings(x)) -> CanFly(x))", "all x.((CanFly(x) -> HasWings(x))"]}
{"id": "folio_validation_357", "nl": "If Rock is neither a fly nor a bird, then Rock neither flies nor breathes.", "fol": "((-CanFly(Rock) & -IsBird(Rock)) -> (-CanFly(Rock) & -CanBreathe(Rock)))", "prediction": ["all x.((Rock(x) & -Fly(x) & -Bird(x)) -> -Flies(x) & -Breathes(x))", "all x.((Rock(x) & -Fly(x) & -Bird(x)) -> (-Flies(x) & -Breathes(x)))", "all x.((Rock(x) & -Fly(x) & -Bird(x)) -> (-Flies(x) | Breathes(x)))", "all x.((Rock(x) & -Fly(x) | Bird(x)) -> -Flies(x) & -Breathes(x))", "all x.((Rock(x) & -Fly(x) | Bird(x)) -> (-Flies(x) & -Breathes(x)))", "all x.((Rock(x) & -Flies(x) & -Bird(x)) -> -Flies(x) & -Breathes(x))", "all x.((Rock(x) & -Fly(x) & -Bird(x)) -> -Flies(x) & -Breathes(x)))", "all x.((Rock(x) & -(Fly(x) | Bird(x))) -> -(Flies(x) | Breathes(x))))", "all x.((Rock(x) & -Fly(x) & -Bird(x)) -> -Flies(x) -Breathes(x))", "all x.((Rock(x) & -(Fly(x) | Bird(x))) -> (-Flies(x) & -Breathes(x)))", "all x.((Rock(x) & -Fly(x) & -Bird(x)) -> -(Flies(x) | Breathes(x))))", "all x.((Rock(x) & -(Fly(x) | Bird(x))) -> -(Flies(x) | Breathes(x)))", "all x.((Rock(x) & -(Fly(x) | Bird(x))) -> -Flies(x) & -Breathes(x)))", "all x.((Rock(x) & -(Fly(x) | Bird(x))) -> (-Flies(x) | Breathes(x))))", "all x.((Rock(x) & -(Fly(x) | Bird(x))) -> (-Flies(x) | Breathes(x)))", "all x.((Rock(x) & -Fly(x) | Bird(x)) -> (-Flies(x) | Breathes(x)))"]}
{"id": "folio_validation_358", "nl": "Rock is a monkey.", "fol": "IsMonkey(Rock)", "prediction": ["all x.(Rock(x) -> Monkey(x))", "All x.(Rock(x) -> Monkey(x))", "Rock is monkey.", "exists x.(Rock(x) & Monkey(x))", "all x.(Rock(x) -> Monkey(x))", "All x.(Rock(x) -> Monkey(x))", "(Mouse(Rock) & Monkey(Rock))", "(Monkey(Rock) & Monkey(Rock))", "Rock is monkey(Rock)", "(Mammal(Rock) & Monkey(Rock))", "Rock is a monkey.", "(Muny(Rock) & Monkey(Rock))", "all x.(Rock(x) -> monkey(x))", "all x.(Rock(x) -> Mummy(x))", "(Munny(Rock) & Monkey(Rock))", "(Munkey(Rock) & Monkey(Rock))"]}
{"id": "folio_validation_359", "nl": "Rock has wings.", "fol": "HasWings(Rock)", "prediction": ["all x.(Rock(x) -> HasWings(x))", "Rock exists x.(Rock(x) & HasWings(x))", "All x.(Rock(x) -> HasWings(x))", "exists x.(Rock(x) & HasWings(x))", "all x y.((Rock(x) & Wing(y)) -> Has(x,y))", "(HasWings(Rock))", "all x y.((Rock(x) & Wings(y)) -> Has(x,y))", "ALL x.(Rock(x) -> HasWings(x))", "Rock hasWings(Rock)", "all x.(Rock(x) -> HasWings(x))", "Rock exists x.(Rock(x) & Wings(x))", "-HasWings(Rock)", "exists x.(Rock(x) & Wings(x))", "RockHasWings(Rock)", "All x.(Rock(x) -> HasWings(x))", "(HasWings(Rock) -> HasWings(Rock))"]}
{"id": "folio_validation_360", "nl": "Rock does not have wings.", "fol": "-HasWings(Rock)", "prediction": ["all x.(Rock(x) -> -HasWings(x))", "(-HasWings(Rock))", "exists x.(Rock(x) & -HasWings(x))", "-HasWings(Rock)", "All x.(Rock(x) -> -HasWings(x))", "(exists x.(Rock(x) & -HasWings(x)))", "Rock exists x.(Rock(x) & -HasWings(x))", "Rock -HasWings(Rock)", "Rock exists x.(Wings(x) & -Has(x,Rock))", "all x.(Rock(x) -> NoWings(x))", "(-HasWings(Rock) -> -HasWings(Rock))", "(-HasWings(Rock) & -HasWings(Rock))", "Rock exists x.(Wings(x) & -Has(x))", "Rock exists x.(Wings(x) & -HasWings(x))", "all x.(Rock(x) -> -HasWing(x))", "Rock & -HasWings(Rock)"]}
{"id": "folio_validation_361", "nl": "All people who have a wedding are people who have at least one child.", "fol": "all x.(HasWedding(x) -> HasChild(x))", "prediction": ["all x.((Person(x) & HasWedding(x)) -> exists y.(Child(y) & HasChild(x,y))))", "all x.((Person(x) & HasWedding(x)) -> HasAtLeastOneChild(x))", "all x.((Person(x) & HasWedding(x)) -> exists y.(Child(y) & HasChild(x,y)))", "all x.((Person(x) & HasWedding(x)) -> HasChild(x))", "all x.((Person(x) & Wedding(x)) -> exists y.(Child(y) & HasChild(x,y))))", "all x.((Person(x) & HasWedding(x)) -> Person(x) & exists y.(Child(y) & HasChild(x,y))))", "all x.((People(x) & HasWedding(x)) -> exists y.(Child(y) & HasChild(x,y))))", "all x.(HasWedding(x) -> exists y.(Child(y) & HasChild(x,y)))", "all x.((Person(x) & HasWedding(x)) -> exists y.(Child(y) & HasChild(x,y))))", "all x.(Wedding(x) -> exists y.(Child(y) & HasChild(x,y)))", "all x.(HasWedding(x) -> exists y.(Child(y) & HasChild(x,y))))", "all x.((Person(x) & HasWedding(x)) -> (HasChild(x) & HasChild(x)))", "all x.((Person(x) & HasWedding(x)) -> Person(x) & HasAtLeastOneChild(x))", "all x.((Person(x) & Wedding(x)) -> exists y.(Child(y) & HasChild(x,y)))", "all x.(Wedding(x) -> exists y.(Child(y) & HasChild(x,y))))", "all x.((Person(x) & HasWedding(x)) -> exists y.(Child(y) & HasChild(x))))"]}
{"id": "folio_validation_362", "nl": "All people who travel to Paris for their honeymoon are people who have a wedding.", "fol": "all x.(TravelToParis(x) -> HasWedding(x))", "prediction": ["all x.((Person(x) & TravelsToParis(x)) -> HasWedding(x))", "all x.((Person(x) & TravelsToParis(x) & Honeymoon(x)) -> HasWedding(x))", "all x.((Person(x) & TravelsToParisForHoneymoon(x)) -> HasWedding(x))", "all x.((Person(x) & TravelsToParisForHoliday(x)) -> HasWedding(x))", "all x y.((Person(x) & TravelsToParis(x) & Honeymoon(y)) -> HasWedding(x))", "all x.((Person(x) & TravelsToParis(x)) -> Wedding(x))", "all x.((Person(x) & TravelsToParis(x) & Honeymoon(x)) -> Wedding(x))", "all x.((TravelsToParis(x) & Honeymoon(x)) -> HasWedding(x))", "all x.((People(x) & TravelsToParis(x) & Honeymoon(x)) -> HasWedding(x))", "all x y.((Person(x) & TravelsToParis(x) & Honeymoon(y)) -> HasWedding(x,y))", "all x.((Person(x) & TravelsToParisForHomily(x)) -> HasWedding(x))", "all x.((Person(x) & TravelsToParisForHoneymoon(x)) -> Wedding(x))", "all x.((Person(x) & TravelsToParis(x) & HasWedding(x)) -> HasWedding(x))", "all x.((People(x) & TravelsToParis(x)) -> HasWedding(x))", "all x.(TravelsToParisForHoneymoon(x) -> HasWedding(x))", "all x.(TravelsToParis(x) -> HasWedding(x))"]}
{"id": "folio_validation_363", "nl": "All weddings that occur in July belong to people who travel to Paris for their honeymoon.", "fol": "all x.(WeddingsInJuly(x) -> TravelToParis(x))", "prediction": ["all x.((Wedding(x) & OccursInJuly(x)) -> TravelsToParis(x))", "all x.((Wedding(x) & OccursInJuly(x)) -> TravelsToParisForHoneymoon(x))", "all x.((Wedding(x) & OccursInJuly(x)) -> exists y.(Person(y) & TravelsToParis(y)))", "all x.((Wedding(x) & OccursInJuly(x)) -> TravelToParis(x))", "all x.((Wedding(x) & OccursInJuly(x)) -> BelongsToPerson(x))", "all x.((Wedding(x) & OccursInJuly(x)) -> exists y.(Person(y) & TravelsToParis(y))))", "all x.((Wedding(x) & OccursInJuly(x)) -> TravelToParisForHoneymoon(x))", "all x.((Wedding(x) & OccursInJuly(x)) -> (BelongsToParis(x) & TravelsToParis(x)))", "all x y.((Wedding(x) & OccursInJuly(x) & Person(y) & TravelsToParis(y)) -> BelongsTo(y,x))", "all x.((Wedding(x) & OccursInJuly(x)) -> exists y.(Person(y) & TravelsToParis(y,x)))", "all x.((Wedding(x) & OccursInJuly(x)) -> belongsToPerson(x))", "all x.((Wedding(x) & OccursInJuly(x)) -> TravelsToParisForHoliday(x))", "all x.((Wedding(x) & OccursInJuly(x)) -> exists y.(Person(y) & TravelsToParisForHoneymoon(y)))", "all x.((Wedding(x) & OccursInJuly(x)) -> BelongsToParis(x))", "all x.((Wedding(x) & OccursInJuly(x)) -> PeopleTravelToParis(x))", "all x.((Wedding(x) & OccursInJuly(x)) -> BelongsToPeople(x))"]}
{"id": "folio_validation_364", "nl": "Some weddings in July are well-attended.", "fol": "exists x.(WeddingsInJuly(x) & IsWellAttended(x))", "prediction": ["exists x.(Wedding(x) & InJuly(x) & WellAttended(x))", "exists x.(Wedding(x,July) & WellAttended(x))", "exists x.(Wedding(x) & InJuly(x))", "exists x.(Wedding(x) & July(x) & WellAttended(x))", "exists x.(JulyWedding(x) & WellAttended(x))", "exists x.(Wedding(x) & inJuly(x) & WellAttended(x))", "exists x.((Wedding(x) & InJuly(x)) -> WellAttended(x))", "exists x.(WeddingInJuly(x) & WellAttended(x))", "exists x.(Wedding(x) & InJune(x) & WellAttended(x))", "exists x.(Wedding(x) & Date(x,July) & WellAttended(x))", "exists x.(Wedding(x,July) & WellAttended(x,July))", "exists x.(Wedding(x,y) & InJuly(y) & WellAttended(x,y))", "exists x.((Wedding(x) & July(x)) -> WellAttended(x))", "exists x.(Wedding(x,y) & InJuly(y) & WellAttended(x))", "exists x.(Wedding(x) & In(x,July) & WellAttended(x))", "exists x.(Wedding(x,July) & WellAttended(x,y))"]}
{"id": "folio_validation_365", "nl": "If John has at least one child, then John does not travel to Paris for his honeymoon and does not have a wedding.", "fol": "(HasChild(John) -> -(TravelToParis(John) & HasWedding(John)))", "prediction": ["all x.((John(x) & HasAtLeastOneChild(x)) -> (-TravelsToParis(x) & -HasWedding(x)))", "all x.((John(x) & HasAtLeastOneChild(x)) -> (-TravelToParis(x) & -HasWedding(x)))", "all x.((John(x) & AtLeastOneChild(x)) -> (-TravelsToParis(x) & -HasWedding(x)))", "all x.((John(x) & HasAtLeastOneChild(x)) -> (-TravelsToParis(x) & -Wedding(x)))", "all x.((John(x) & Child(x)) -> (-TravelsToParis(x) & -Wedding(x)))", "all x.((John(x) & Child(x)) -> (-TravelsToParis(x) & -HasWedding(x)))", "all x.((John(x) & Child(x)) -> (-TravelToParis(x) & -Wedding(x)))", "all x.((John(x) & HasAtLeastOneChild(x)) -> (-TravelsToParisForHoneymoon(x) & -HasWedding(x)))", "all x.((John(x) & HasAtLeastOneChild(x)) -> (-TravelToParis(x) & -Wedding(x)))", "all x.((John(x) & HasChild(x)) -> (-TravelsToParis(x) & -HasWedding(x)))", "all x.((John(x) & AtLeastOneChild(x)) -> (-TravelToParis(x) & -HasWedding(x)))", "all x.((John(x) & AtLeastOneChild(x)) -> (-TravelsToParis(x) & -Wedding(x)))", "all x.((John(x) & Child(x)) -> (-TravelToParis(x) & -HasWedding(x)))", "all x.((John(x) & AtLeastOneChild(x)) -> (-TravelToParis(x) & -Wedding(x)))", "all x.((HasChild(x) & -TravelsToParis(x) & -HasWedding(x)) -> -HasWedding(x))", "all x.((John(x) & HasChild(x)) -> (-TravelToParis(x) & -HasWedding(x)))"]}
{"id": "folio_validation_366", "nl": "If John has a wedding that is well-attended, then John has a wedding in July or, if not, then John travels to Paris for their honeymoon. ", "fol": "(((IsWellAttended(John) -> WeddingsInJuly(John)) & -TravelToParis(John)) | (-(IsWellAttended(John) -> WeddingsInJuly(John)) & TravelToParis(John)))", "prediction": ["all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & -WeddingInJuly(x)))))", "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | TravelsToParis(x)))", "all x.((Wedding(x) & WellAttended(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & -WeddingInJuly(x)))))", "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | WeddingInParis(x)))", "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | -WeddingInJuly(x)))", "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & TravelsToParis(x)))))", "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) | WeddingInParis(x)))))", "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & JohnTravelsToParis(x)))))", "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & -Wedding(x)))))", "all x.((John(x) & WellAttendedWedding(x)) -> (HasWeddingInJuly(x) | TravelsToParis(x)))", "all x.((John(x) & WellAttended(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & -WeddingInJuly(x)))))", "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & -WeddingToParis(x)))))", "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & TravelsToParis(x))))", "all x.((Wedding(x) & WellAttended(x)) -> (WeddingInJuly(x) | TravelsToParis(x)))", "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & -WeddingInJuly(x))))", "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) | WeddingInJuly(x)))))"]}
{"id": "folio_validation_367", "nl": "John has a wedding that is well-attended.", "fol": "IsWellAttended(John)", "prediction": ["all x.((John(x) & Wedding(x)) -> WellAttended(x))", "all x.((John(x) & Wedding(x) & WellAttended(x)) -> WellAttended(x))", "all x.((John(x) & WellAttendedWedding(x)) -> HasWedding(x))", "all x.((John(x) & WellAttendedWedding(x)) -> WellAttendedWedding(x))", "all x.(John(x) -> WellAttendedWedding(x))", "all x y.((John(x) & Wedding(y)) -> WellAttended(y))", "all x y.((John(x) & Wedding(y) & WellAttended(y)) -> WellAttended(x,y))", "all x y.((John(x) & Wedding(y)) -> WellAttended(x,y))", "all x.((John(x) & Wedding(x) & WellAttended(x)) -> Has(x,y))", "all x y.((John(x) & Wedding(y) & WellAttended(y)) -> WellAttended(y))", "all x.((John(x) & Wedding(y)) -> WellAttended(y))", "all x.((John(x) & WellAttendedWedding(x)) -> Wedding(x))", "all x.((John(x) & WellAttendedWedding(x)) -> WellAttended(x))", "all x.((John(x) & WellAttended(x)) -> Wedding(x))", "all x y.((John(x) & Wedding(y) & WellAttended(y)) -> Has(x,y))", "all x.((John(x) & Wedding(y) & WellAttended(y)) -> WellAttended(x,y))"]}
{"id": "folio_validation_368", "nl": "John does not have a wedding that is well-attended.", "fol": "-IsWellAttended(John)", "prediction": ["all x.((John(x) & -WellAttendedWedding(x)) -> -WellAttendedWedding(x))", "all x.(John(x) -> -WellAttendedWedding(x))", "all x.((John(x) & Wedding(x) & -WellAttended(x)) -> -WellAttended(x))", "all x.((John(x) & Wedding(x)) -> -WellAttended(x))", "all x.((John(x) & -WellAttendedWedding(x)) -> -(WellAttendedWedding(x) & -WellAttendedWedding(x)))", "all x.((John(x) & -WellAttendedWedding(x)) -> -(WellAttendedWedding(x) & WellAttendedWedding(x)))", "all x.((John(x) & -WellAttendedWedding(x)) -> -HasWedding(x))", "all x.((Jon(x) & -WellAttendedWedding(x)) -> -WellAttendedWedding(x))", "all x.((John(x) & -WellAttendedWedding(x)) -> -(Wedding(x) & WellAttended(x))))", "all x.((John(x) & -WellAttendedWedding(x)) -> -(Wedding(x) & WellAttended(x)))", "all x.((John(x) & WellAttendedWedding(x)) -> -WellAttendedWedding(x))", "all x.((John(x) & Wedding(x) & -WellAttended(x)) -> -HasWellAttended(x))", "all x.((John(x) & -WellAttendedWedding(x)) -> -(WellAttendedWedding(x) & WellAttendedWedding(x))))", "all x.((John(x) & WellAttendedWedding(x)) -> -HasWedding(x))", "all x.((John(x) & -WellAttendedWedding(x)) -> -IsWellAttendedWedding(x))", "all x.((John(x) & Wedding(x) & -WellAttended(x)) -> -(WellAttended(x) & WellAttended(x)))"]}
{"id": "folio_validation_369", "nl": "John has at least one child.", "fol": "HasChild(John)", "prediction": ["all x.(John(x) -> exists y.(Child(y) & HasChild(x,y))))", "all x.(John(x) -> exists y.(Child(y) & HasChild(x,y)))", "all x.(John(x) -> HasChild(x))", "All x.(John(x) -> exists y.(Child(y) & HasChild(x,y))))", "All x.(John(x) -> exists y.(Child(y) & HasChild(x,y)))", "(exists x.(John(x) & Child(x)))", "exists x.(John(x) & HasChild(x))", "all x.(John(x) -> exists y.(Child(y) | Child(y))))", "exists x.(John(x) & Child(x))", "John exists x.(Child(x) & HasChild(x))", "all x.(John(x) -> HasAtLeastOneChild(x))", "All x.(John(x) -> HasChild(x))", "all x.(John(x) -> exists y.(Child(y) & Has(x,y))))", "all x.(John(x) -> exists y.(Child(y) & LivesIn(x,y))))", "-exists x.(John(x) & Child(x))", "all x.(John(x) -> exists y.(Child(y)) & HasChild(x,y)))"]}
{"id": "folio_validation_370", "nl": "John has neither a wedding that is well-attended nor does he travel to Paris for his honeymoon.", "fol": "-(IsWellAttended(John) | WeddingsInJuly(John))", "prediction": ["all x.((John(x) & -(WellAttendedWedding(x) & TravelsToParis(x))) -> -(WellAttendedWedding(x) & TravelsToParis(x)))", "all x.((John(x) & -(WellAttendedWedding(x) | TravelsToParis(x))) -> -(WellAttendedWedding(x) & TravelsToParis(x)))", "all x.((John(x) & -(WellAttendedWedding(x) | TravelsToParis(x))) -> -(WellAttendedWedding(x) & WellAttendedWedding(x)))", "all x.((John(x) & -(WellAttendedWedding(x) & TravelsToParis(x))) -> -(WellAttendedWedding(x) & -(WellAttendedWedding(x) & TravelsToParis(x))))", "all x.((John(x) & -(WellAttendedWedding(x) | TravelsToParisForHoneymoon(x))) -> -(WellAttendedWedding(x) & TravelsToParisForHoneymoon(x)))", "all x.((John(x) & -(WellAttendedWedding(x) | TravelsToParis(x))) -> -(WellAttendedWedding(x) & -(WellAttendedWedding(x) & WellAttendedWedding(x)) & -(WellAttendedWedding(x) & WellAttendedWedding(x)) & -(WellAttendedWedding(x))))", "all x.((John(x) & -(WellAttendedWedding(x) | TravelsToParis(x))) -> -(WellAttendedWedding(x) & -(WellAttendedWedding(x) & WellAttendedWedding(x)) & -(WellAttendedWedding(x) & WellAttendedWedding(x)) & -(WellAttendedWedding(x) & TravelsToParis(x))))", "all x.((John(x) & -(WellAttendedWedding(x) & TravelsToParis(x))) -> -(WellAttendedWedding(x) & -(WellAttendedWedding(x) & TravelsToParis(x)) & -(WellAttendedWedding(x) & TravelsToParis(x))))", "all x.((John(x) & -(WellAttendedWedding(x) & TravelsToParis(x))) -> -(WellAttendedWedding(x) & -(WellAttendedWedding(x) & WellAttendedWedding(x)) & -(WellAttendedWedding(x) & WellAttendedWedding(x)) & -(WellAttendedWedding(x) & TravelsToParis(x))))", "all x.((John(x) & -(WellAttendedWedding(x) & TravelsToParis(x))) -> -(WellAttendedWedding(x) & -(WellAttendedWedding(x) & WellAttendedWedding(x)) & -(WellAttendedWedding(x) & WellAttendedWedding(x) & WellAttendedWedding(x))))", "all x.((John(x) & -(WellAttendedWedding(x) & TravelsToParis(x))) -> -(WellAttendedWedding(x) & -(WellAttendedWedding(x) & WellAttendedWedding(x)) & -(WellAttendedWedding(x) & WellAttendedWedding(x)) & -(WellAttendedWedding(x))))", "all x.((John(x) & -(WellAttendedWedding(x) | TravelsToParis(x))) -> -(WellAttendedWedding(x) & Honeymoon(x)))", "all x.((John(x) & -(WellAttendedWedding(x) | TravelsToParis(x))) -> -(WellAttendedWedding(x) & -(WellAttendedWedding(x) & WellAttendedWedding(x)) & -(WellAttendedWedding(x) & WellAttendedWedding(x) & WellAttendedWedding(x))))", "all x.((John(x) & -(WellAttendedWedding(x) & TravelsToParis(x))) -> -(WellAttendedWedding(x) & -(WellAttendedWedding(x) & -(WellAttendedWedding(x) & WellAttendedWedding(x)) & -(WellAttendedWedding(x) & WellAttendedWedding(x))))", "all x.((John(x) & -(WellAttendedWedding(x) | TravelsToParisForHoneymoon(x))) -> -(WellAttendedWedding(x) & -(WellAttendedWedding(x) & TravelsToParisForHoneymoon(x))))", "all x.((John(x) & -(WellAttendedWedding(x) & TravelsToParis(x))) -> -(WellAttendedWedding(x) & -(WellAttendedWedding(x) & WellAttendedWedding(x)) & -(WellAttendedWedding(x) & TravelsToParis(x))))"]}
{"id": "folio_validation_371", "nl": "[BG] Some mammals have teeth.", "fol": "exists x.(IsMammal(x) & HasTeeth(x,Teeth))", "prediction": ["exists x.(Mammal(x) & HasTeeth(x))", "(exists x.(Mammal(x) & HasTeeth(x)))", "exists x y.(Mammal(x) & Mammal(y) & HasTeeth(x,y))", "exists x.(Mammal(x) & (HasTeeth(x) | HasTeeth(x)))", "all x.(Mammal(x) -> HasTeeth(x))", "[BG] - exists x.(Mammal(x) & HasTeeth(x)))", "exists x y.(Mammal(x) & HasTeeth(x,y))", "exists x y.(Mammal(x) & (HasTeeth(x,y) | HasTeeth(x,y)))", "exists x y.(Mammal(x) & Mammal(y) & HasTeeth(x))", "exists x y.(Mammal(x) & (HasTeeth(x) | HasTeeth(y)))", "exists x y.(Mammal(x) & (HasTeeth(x) | HasTeeth(x)))", "exists x y.(Mammal(x) & HasTeeth(x))", "exists x y.(Mammal(x) & (HasTeeth(y) | HasTeeth(y)))", "exists x y.(Mammal(x) & (HasTeeth(x,y) | HasTeeth(y)))", "[BG] -exists x.(Mammal(x) & HasTeeth(x)))", "exists x.(Mammal(x) & HasTeeth(x))"]}
{"id": "folio_validation_372", "nl": "Platypus have no teeth.", "fol": "-HasTeeth(Platypus,Teeth)", "prediction": ["all x.(Platypus(x) -> -HasTeeth(x))", "all x.(Platypus(x) -> -HasTeeth(x))", "all x.(Platypus(x) -> NoTeeth(x))", "all x.(Plutypus(x) -> -HasTeeth(x))", "all x.(Plasticus(x) -> -HasTeeth(x))", "all x.(Plactus(x) -> -HasTeeth(x))", "all x.(Plastic(x) -> -HasTeeth(x))", "all x.(Plavix(x) -> -HasTeeth(x))", "all x.(Pluto(x) -> -HasTeeth(x))", "all x.(Platypus(x) -> NoTeeth(x))", "all x.(Plasticus(x) -> NoTeeth(x))", "all x.(Plutypus(x) -> NoTeeth(x))", "all x.(Platypus(x) -> HasNoTeeth(x))", "all x.(Plactus(x) -> NoTeeth(x))", "all x.(Plastic(x) -> NoTeeth(x))", "all x.(Platypus(x) -> -Teeth(x))"]}
{"id": "folio_validation_373", "nl": "Platypus are mammals. ", "fol": "IsMammal(Platypus)", "prediction": ["all x.(Platypus(x) -> Mammal(x))", "all x.(Plasticus(x) -> Mammal(x))", "all x.(Plutypus(x) -> Mammal(x))", "all x.(Plactus(x) -> Mammal(x))", "all x.(Pluto(x) -> Mammal(x))", "all x.(Platypus(x) -> Mammal(x))", "all x.(Plavix(x) -> Mammal(x))", "all x.(Plarkton(x) -> Mammal(x))", "all x.(Plavis(x) -> Mammal(x))", "all x.(Plutospheric(x) -> Mammal(x))", "all x.(Plotypus(x) -> Mammal(x))", "all x.(Plavius(x) -> Mammal(x))", "all x.(Plaus(x) -> Mammal(x))", "all x.(Plaviform(x) -> Mammal(x))", "all x.(Platypus(x) -> Mammal(x))", "all x.(Plutus(x) -> Mammal(x))"]}
{"id": "folio_validation_374", "nl": "Humans have teeth.", "fol": "HasTeeth(Humans,Teeth)", "prediction": ["all x.(Human(x) -> HasTeeth(x))", "all x y.((Human(x) & Teeth(y)) -> Has(x,y))", "all x.(Human(x) -> (HasTeeth(x) & HasTeeth(x)))", "all x.exists y.(Human(x) & Teeth(y) & Has(x,y))", "all x y.((Human(x) & Tissue(y)) -> Has(x,y))", "all x.(Human(x) -> HasTeeth(x))", "all x.(Human(x) -> (HasTeeth(x) | HasTeeth(x)))", "exists x.(Human(x) & HasTeeth(x))", "(HasTeeth(Human) & HasTeeth(Human))", "(all x.(Human(x) -> HasTeeth(x)))", "all x.(HasTeeth(x) -> Human(x))", "all x.exists y.(Human(x) & Teeth(y)) -> Has(x,y))", "(HasTeeth(Human) & HasTeeth(Human) & HasTeeth(Human))", "all x y.((Human(x) & Teeth(y)) -> HasTeeth(x,y))", "all x.(HasTeeth(x) -> HasTeeth(x))", "all x.(Human(x) -> (HasTeeth(x)))"]}
{"id": "folio_validation_375", "nl": "Platypus are mammals with no teeth.", "fol": "(IsMammal(Platypus) & -HasTeeth(Platypus,Teeth))", "prediction": ["all x.(Platypus(x) -> (Mammal(x) & -HasTeeth(x)))", "all x.(Platypus(x) -> (Mammal(x) & -Teeth(x)))", "all x.(Plasticus(x) -> (Mammal(x) & -HasTeeth(x)))", "all x.(Platypus(x) -> (Mammal(x) & NoTeeth(x)))", "all x.(Plasticus(x) -> (Mammal(x) & -Teeth(x)))", "all x.(Plactus(x) -> (Mammal(x) & -HasTeeth(x)))", "all x.(Platypus(x) -> (Mammal(x) & HasNoTeeth(x)))", "all x.(Pluto(x) -> (Mammal(x) & -HasTeeth(x)))", "all x.(Platypus(x) -> (Mammal(x) & -HasTeeth(x)))", "all x.(Plasticus(x) -> (Mammal(x) & NoTeeth(x)))", "all x.(Plavix(x) -> (Mammal(x) & -HasTeeth(x)))", "all x.(Platypus(x) -> (Mammal(x) & -HasTeeth(x)))", "all x.(Plutypus(x) -> (Mammal(x) & -HasTeeth(x)))", "all x.(Plactus(x) -> (Mammal(x) & -Teeth(x)))", "all x.(Platypus(x) -> (Mammal(x) & -Teeth(x)))", "all x.(Plutypus(x) -> (Mammal(x) & -Teeth(x)))"]}
{"id": "folio_validation_376", "nl": "Platypus are reptiles.", "fol": "Reptile(Platypus)", "prediction": ["all x.(Platypus(x) -> Reptile(x))", "all x.(Plasticus(x) -> Reptile(x))", "all x.(Plarkton(x) -> Reptile(x))", "all x.(Pluto(x) -> Reptile(x))", "all x.(Plactus(x) -> Reptile(x))", "all x.(Plutypus(x) -> Reptile(x))", "all x.(Platypus(x) -> Reptile(x))", "all x.(Plavix(x) -> Reptile(x))", "all x.(Plotypus(x) -> Reptile(x))", "all x.(Plutospheric(x) -> Reptile(x))", "all x.(Plavis(x) -> Reptile(x))", "all x.(Plutos(x) -> Reptile(x))", "all x.(Plaza(x) -> Reptile(x))", "all x.(Plactid(x) -> Reptile(x))", "all x.(Plutus(x) -> Reptile(x))", "all x.(Plavius(x) -> Reptile(x))"]}
{"id": "folio_validation_377", "nl": "Plungers suck.", "fol": "all x.(IsPlunger(x) -> Sucks(x))", "prediction": ["all x.(Plunger(x) -> Suck(x))", "all x.(Plunger(x) -> Sucks(x))", "all x.(Plunger(x) -> Saute(x))", "all x.(Plunger(x) -> Stuck(x))", "all x.(Plunger(x) -> Sautes(x))", "all x.(Plunger(x) -> Stucks(x))", "all x y.((Plunger(x) & Suck(y)) -> Suck(x,y))", "all x y.((Plunger(x) & Suck(y)) -> Sucks(x,y))", "all x.(Plunger(x) -> Suckle(x))", "all x y.((Plunger(x) & Suck(y)) -> Suck(x))", "all x.(Plunger(x) -> Spuck(x))", "all x.(Plunger(x) -> sucks(x))", "all x y.((Plunger(x) & Suck(y)) -> Sucks(x))", "all x.(Plunger(x) -> Sucker(x))", "all x.(Plunger(x) -> suck(x))", "all x.(Plunger(x) -> Suckles(x))"]}
{"id": "folio_validation_378", "nl": "Vacuums suck.", "fol": "all x.(IsVacuum(x) -> Sucks(x))", "prediction": ["all x.(Vacuum(x) -> Suck(x))", "all x.(Vacuum(x) -> Sucks(x))", "all x.(Vacuum(x) -> Saute(x))", "all x.(Vacuum(x) -> Sautes(x))", "all x.(Vacuum(x) -> Stuck(x))", "all x.(Vacuum(x) -> Suck(x))", "all x.(Vacuum(x) -> Sucks(x))", "all x.(Vacuum(x) -> Suckle(x))", "all x.(Vacuum(x) -> Saute(x))", "all x.(Vacuum(x) -> Spuck(x))", "all x.(Vacuum(x) -> Stucks(x))", "all x.(Vacuum(x) -> Sucker(x))", "all x.(Vacuum(x) -> Sautes(x))", "all x.(Vacuum(x) -> Suckles(x))", "all x.(Vacuum(x) -> Stuck(x))", "all x.(Vakuum(x) -> Suck(x))"]}
{"id": "folio_validation_379", "nl": "Vampires suck.", "fol": "all x.(IsVampire(x) -> Sucks(x))", "prediction": ["all x.(Vampire(x) -> Suck(x))", "all x.(Vampire(x) -> Sucks(x))", "all x.(Vampire(x) -> Stuck(x))", "all x.(Vampire(x) -> Saute(x))", "all x.(Vampire(x) -> Stucks(x))", "all x.(Vampire(x) -> Sautes(x))", "all x.(Vampire(x) -> Suckle(x))", "all x y.((Vampire(x) & Suck(y)) -> Suck(x,y))", "all x.(Vampire(x) -> Spuck(x))", "all x y.((Vampire(x) & Suck(y)) -> Sucks(x,y))", "all x y.((Vampire(x) & Suck(y)) -> Suck(x))", "all x.(Vampire(x) -> Suckles(x))", "all x.(Vampire(x) -> Sucker(x))", "all x y.((Vampire(x) & Suck(y)) -> Sucks(x))", "all x.(Vampire(x) -> Sag(x))", "all x.(Vampire(x) -> sucks(x))"]}
{"id": "folio_validation_380", "nl": "Space is a vacuum.", "fol": "IsVacuum(Space)", "prediction": ["all x.(Space(x) -> Vacuum(x))", "all x y.((Space(x) & Vacuum(y)) -> Vacuum(x))", "all x.(Space(x) -> Vacuum(x))", "all x y.((Space(x) & Vacuum(y)) -> Is(x,y))", "all x y.((Space(x) & Vacuum(y)) -> Vacuum(x,y))", "exists x.(Space(x) & Vacuum(x))", "all x y z.((Space(x) & Vacuum(y) & Vacuum(z)) -> Vacuum(x,y,z))", "all x y z.((Space(x) & Vacuum(y) & Vacuum(z)) -> Vacuum(x))", "all x y z.((Space(x) & Vacuum(y) & Vacuum(z)) -> Is(x,y,z))", "all x.(Space(x) -> Vapor(x))", "all x.exists y.(Space(x) & Vacuum(y) & LocatedIn(x,y))", "all x y.((Space(x) & Vacuum(y)) -> Space(x))", "all x y.((Space(x) & Vapor(y)) -> Vacuum(x))", "all x y.((Space(x) & Vacuum(y)) -> Vacuum(x))", "all x y z.((Space(x) & Vacuum(y) & Vacuum(z)) -> Is(x,y))", "all x y.((Space(x) & Vapor(y)) -> Vapor(x))"]}
{"id": "folio_validation_381", "nl": "A duster is a household appliance that doesn't suck.", "fol": "(IsHouseholdAppliance(Duster) & -Sucks(Duster))", "prediction": ["all x.(Duster(x) -> (HouseholdAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HouseholdAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HausletAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HasHouseholdAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HausholdAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HomemadeAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HouseholdAppliance(x) & -Suck(x)))", "all x.(Duster(x) -> (HausletAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HasAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HaustierAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HausworkAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HausholdAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HaushaltAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HasHaustowelAppliance(x) & -Sucks(x)))", "all x.(Duster(x) -> (HouseholdAppliance(x) & DoesNotSuck(x)))", "all x.(Duster(x) -> (HouseholdAppliance(x) & -Suck(x)))"]}
{"id": "folio_validation_382", "nl": "Space sucks.", "fol": "Sucks(Space)", "prediction": ["all x.(Space(x) -> Sucks(x))", "all x.(Space(x) -> Stucks(x))", "all x.(Space(x) -> Sautes(x))", "all x.(Space(x) -> Suckles(x))", "all x.(Space(x) -> Sucks(x))", "all x.(SpaceSucks(x) -> SpaceSucks(x))", "all x.(Space(x) -> Spucks(x))", "all x.(Space(x) -> Suits(x))", "all x.(Space(x) -> Sakes(x))", "all x.(Space(x) -> Suckers(x))", "all x.(Space(x) -> Sags(x))", "all x.(Space(x) -> Sukes(x))", "all x.(Space(x) -> Sucker(x))", "all x.(SpaceSucks(x) -> -Sucks(x))", "all x.(Space(x) -> Sustains(x))", "all x.(Space(x) -> Sails(x))"]}
{"id": "folio_validation_383", "nl": "Space is a vampire.", "fol": "IsVampire(Space)", "prediction": ["all x.(Space(x) -> Vampire(x))", "all x.(Space(x) -> Vampiric(x))", "all x.(Space(x) -> Vampire(x))", "All x.(Space(x) -> Vampiric(x))", "All x.(Space(x) -> Vampire(x))", "exists x.(Space(x) & Vampire(x))", "exists x.(Space(x) & Vampiric(x))", "exists x.(Space(x) & Vampire(x))", "All x.(Space(x) -> Vampire(x))", "all x.(Space(x) -> Vampy(x))", "all x.(Space(x) -> Vampir(x))", "all x y.((Space(x) & Vampire(y)) -> Is(x,y))", "all x.(Space(x) -> Vampiric(x))", "all x y.((Space(x) & Vampire(y)) -> Vampire(x))", "all x.(Space(x) -> Vampire(x))", "all x.(Space(x) -> Venom(x))"]}
{"id": "folio_validation_384", "nl": "If something is a household appliance, it sucks.", "fol": "all x.(IsHouseholdAppliance(x) -> Sucks(x))", "prediction": ["all x.((Appliance(x) & HouseholdAppliance(x)) -> Sucks(x))", "all x.((HouseholdAppliance(x) & Sucks(x)) -> HouseholdAppliance(x))", "all x.((HouseholdAppliance(x) & Sucks(x)) -> Appliance(x))", "all x.((HomemadeAppliance(x) & Sucks(x)) -> HouseholdAppliance(x))", "all x.((HausletAppliance(x) & Sucks(x)) -> HouseholdAppliance(x))", "all x.((HausletAppliance(x) & HouseholdAppliance(x)) -> Sucks(x))", "all x.(HouseholdAppliance(x) -> Sucks(x))", "all x.((Appliance(x) & Household(x)) -> Sucks(x))", "all x.((HouseholdAppliance(x)) -> Sucks(x))", "all x.((Appliance(x) & HouseholdAppliance(x)) -> Stucks(x))", "all x.((HouseholdAppliance(x) & Spucks(x)) -> HouseholdAppliance(x))", "all x.((HouseholdAppliance(x) & Appliance(x)) -> Sucks(x))", "all x.((HouseholdAppliance(x) & Spucks(x)) -> Appliance(x))", "all x.((HausletAppliance(x) & HouseholdAppliance(x)) -> Stucks(x))", "all x.((HouseholdAppliance(x) & HasAppliance(x)) -> Sucks(x))", "all x.((Appliance(x) & HouseholdAppliance(x)) -> Spucks(x))"]}
{"id": "folio_validation_385", "nl": "Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning.", "fol": "all x.(MachineLearningAlgorithm(x) -> (CategorizedAsSupervisedLearning(x) | CategorizedAsUnsupervisedLearning(x) | CategorizedAsReinforcementLearning(x)))", "prediction": ["all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "all x.(MachineLearningAlgorithm(x) -> (SupportedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "all x.(MachineLearning(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | Reconciling(x)))", "all x.((MachineLearningAlgorithm(x) & SupervisedLearning(x) & UnsupervisedLearning(x) & ReinforcementLearning(x)) -> MachineLearningAlgorithm(x))", "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReconcileLearning(x)))", "all x.((MachineLearningAlgorithm(x) & SupervisedLearning(x) & UnsupervisedLearning(x)) -> ReinforcementLearning(x))", "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) & UnsupervisedLearning(x) & ReinforcementLearning(x)))", "all x.(MachineLearningAlgorithm(x) -> (SupervizedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "all x y.((MachineLearningAlgorithm(x) & SupervisedLearning(y) & UnsupervisedLearning(y)) -> ReinforcementLearning(x))", "all x.((MachineLearningAlgorithm(x) & SupervisedLearning(x) & UnsupervisedLearning(x) & ReinforcementLearning(x)) -> CanBeCategorized(x))", "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | RetardationLearning(x)))", "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "all x.((MachineLearningAlgorithm(x) & SupervisedLearning(x) & UnsupervisedLearning(x) & ReinforcementLearning(x)) -> Categorized(x))"]}
{"id": "folio_validation_386", "nl": "Unsupervised learning doesn't require labelled data.", "fol": "all x.(CategorizedAsUnsupervisedLearning(x) -> -RequiresLabelledData(x))", "prediction": ["all x.(UnsupervisedLearning(x) -> -RequiresLabeledData(x))", "all x.(UnsupervisedLearning(x) -> -RequiresLabelledData(x))", "all x.(UnsupervisedLearning(x) -> -RequireslabelledData(x))", "all x.(UnsupervisedLearning(x) -> -RequiresLabeledData(x))", "all x.((UnsupervisedLearning(x) & -RequiresLabeledData(x)) -> -RequiresLabeledData(x))", "all x y.((UnsupervisedLearning(x) & Data(y)) -> -Requires(x,y))", "all x.((UnsupervisedLearning(x) & -RequiresLabelledData(x)) -> -RequiresLabeledData(x))", "all x.((UnsupervisedLearning(x) & -RequiresLabelledData(x)) -> -RequiresLabelledData(x))", "all x y.((UnsupervisedLearning(x) & Data(y)) -> -RequiresLabeled(x,y))", "all x.(UnsupervisedLearning(x) -> -RequiresCalledData(x))", "all x.(UnsupervisedLearning(x) -> -RequiresTaggedData(x))", "all x.(UnsupervisedLearning(x) -> -RequiresLayeredData(x))", "all x.(UnsupervisedLearning(x) -> -RequiresMarkedData(x))", "all x.(UnsupervisedLearning(x) -> -RequiresLabeledData(x))", "all x.(UnsupervisedLearning(x) -> -RequiresLayedData(x))", "all x.(UnsupervisedLearning(x) -> -Requires(x,labelledData))"]}
{"id": "folio_validation_387", "nl": "The state-of-the-art text summarization model is BART.", "fol": "TextSummarizationModel(Bart)", "prediction": ["all x.(StateOfTheArtTextSummarizationModel(x) -> BART(x))", "all x.((TextSummarizationModel(x) & BART(x)) -> StateOfTheArt(x))", "all x.((TextSummarizationModel(x) & StateOfTheArt(x)) -> BART(x))", "all x.((StateOfTheArtTextSummarizationModel(x) & BART(x)) -> SummarizationModel(x))", "all x.((StateOfTheArtTextSummarizationModel(x) & BART(x)) -> TextSummarizationModel(x))", "all x.((StateOfTheArtTextSummarizationModel(x) & BART(x)) -> Summarization(x))", "all x.((StateOfTheArtTextSummarizationModel(x) & BART(x)) -> TextSummarization(x))", "all x.((StateOfTheArt(x) & TextSummarizationModel(x)) -> BART(x))", "all x.((StateOfTheArtTextSummarizationModel(x) & BART(x)) -> Summarizes(x))", "all x.(StateOfTheArtTextSummarization(x) -> BART(x))", "all x y.((StateOfTheArtTextSummarizationModel(x) & TextSummarizationModel(y)) -> BART(x))", "all x.((StateOfTheArtTextSummarizationModel(x) & BART(x)) -> SummarizesText(x))", "all x.((StateOfTheArtTextSummarization(x) & BART(x)) -> SummarizationModel(x))", "all x y.((StateOfTheArtTextSummarizationModel(x) & TextSummarization(y)) -> BART(x))", "all x.((StateOfTheArtTextSummarizationModel(x) & BART(x)) -> Summarized(x))", "all x.((StateOfTheArtTextSummarizationModel(x) & BART(x)) -> SummarizationMode(x))"]}
{"id": "folio_validation_388", "nl": "The state-of-the-art text summarization model is trained with machine learning algorithms.", "fol": "all x.(TextSummarizationModel(x) -> MachineLearningAlgorithm(x))", "prediction": ["all x.(StateOfTheArtTextSummarizationModel(x) -> TrainedWithMachineLearningAlgorithms(x))", "all x.((TextSummarizationModel(x) & StateOfTheArt(x)) -> TrainedWithMachineLearningAlgorithms(x))", "all x y.((StateOfTheArtTextSummarizationModel(x) & MachineLearningAlgorithms(y)) -> TrainedWith(x,y))", "all x.((TextSummarizationModel(x) & MachineLearningAlgorithms(x)) -> TrainedWith(x))", "all x.((TextSummarizationModel(x) & TrainedWithMachineLearningAlgorithms(x)) -> StateOfTheArt(x))", "all x.((TextSummarizationModel(x) & MachineLearningAlgorithms(x)) -> Trained(x))", "all x.((StateOfTheArtTextSummarizationModel(x) & MachineLearningAlgorithms(x)) -> TrainedWith(x))", "all x.((TextSummarizationModel(x) & MachineLearningAlgorithms(x)) -> TrainedWith(x,y))", "all x.((StateOfTheArtTextSummarizationModel(x) & MachineLearningAlgorithms(x)) -> TrainedWith(x,y))", "all x.((StateOfTheArtTextSummarizationModel(x) & TrainedWithMachineLearningAlgorithms(x)) -> TrainedWith(x))", "all x.((TextSummarizationModel(x) & StateOfArt(x)) -> TrainedWithMachineLearningAlgorithms(x))", "all x y.((StateOfTheArtTextSummarizationModel(x) & MachineLearningAlgorithm(y)) -> TrainedWith(x,y))", "all x.(StateOfArtTextSummarizationModel(x) -> TrainedWithMachineLearningAlgorithms(x))", "all x.((StateOfTheArtTextSummarizationModel(x) & MachineLearningAlgorithms(x)) -> Trained(x))", "all x.(StateOfTheArtTextSummarization(x) -> TrainedWithMachineLearningAlgorithms(x))", "all x y.((StateOfArtTextSummarizationModel(x) & MachineLearningAlgorithms(y)) -> TrainedWith(x,y))"]}
{"id": "folio_validation_389", "nl": "Reinforcement learning is not used to train the state-of-the-art text summarization model.", "fol": "all x.(TextSummarizationModel(x) -> -CategorizedAsReinforcementLearning(x))", "prediction": ["all x.((ReinforcementLearning(x) & -TrainStateOfTheArtTextSummarizationModel(x)) -> -TrainStateOfTheArtTextSummarizationModel(x))", "all x.(ReinforcementLearning(x) -> -TrainsStateOfTheArtTextSummarizationModel(x))", "all x.((ReinforcementLearning(x) & -TrainStateOfTheArtTextSummarization(x)) -> -TrainStateOfTheArtTextSummarization(x))", "all x.(ReinforcementLearning(x) -> -TrainStateOfTheArtTextSummarizationModel(x))", "all x.((ReinforcementLearning(x) & -StateOfTheArtTextSummarizationModel(x)) -> -Trains(x,StateOfTheArtTextSummarizationModel))", "all x y.((ReinforcementLearning(x) & TextSummarizationModel(y)) -> -Trains(x,y))", "all x.((ReinforcementLearning(x) & -TrainsStateOfTheArtTextSummarizationModel(x)) -> -TrainsStateOfTheArtTextSummarizationModel(x))", "all x.((ReinforcementLearning(x) & -TrainStateOfTheArtTextSummarizationModel(x)) -> -Trains(x,StateOfTheArtTextSummarizationModel))", "all x.((ReinforcementLearning(x) & -StateOfTheArtTextSummarizationModel(x)) -> -Trains(x))", "all x.((ReinforcementLearning(x) & -TrainStateOfTheArtTextSummarizationModel(x)) -> -TrainsStateOfTheArtTextSummarizationModel(x))", "all x.((ReinforcementLearning(x) & -TrainStateOfTheArtTextSummarizationModel(x)) -> -TrainStateOfTheArtTextSummarization(x))", "all x.(ReinforcementLearning(x) -> -TrainsStateOfTheArtTextSummarization(x))", "all x.(ReinforcementLearning(x) -> -TrainStateOfTheArtTextSummarization(x))", "all x.((ReinforcementLearning(x) & -TrainedStateOfTheArtTextSummarizationModel(x)) -> -Trains(x,StateOfTheArtTextSummarizationModel))", "all x y.((ReinforcementLearning(x) & StateOfTheArtTextSummarizationModel(y)) -> -Trains(x,y))", "all x y.((ReinforcementLearning(x) & TextSummarizationModel(y)) -> -Train(x,y))"]}
{"id": "folio_validation_390", "nl": "The Machine Learning algorithm for training text summarization model requires labelled data.", "fol": "all x.((MachineLearningAlgorithm(x) & TextSummarizationModel(x)) -> RequiresLabelledData(x))", "prediction": ["all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresLabeledData(x))", "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequireslabelledData(x))", "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresLabeledData(x))", "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresLabelledData(x))", "all x y.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(y)) -> RequiresLabeledData(x,y))", "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresMarkedData(x))", "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresTaggedData(x))", "all x y z.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(y) & LabeledData(z)) -> Requires(x,y,z))", "all x.((MachineLearningAlgorithm(x) & ForTrainingTextSummarizationModel(x)) -> RequiresLabeledData(x))", "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresCalledData(x))", "all x y.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(y)) -> RequiresLabelledData(x,y))", "all x y.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(y)) -> RequiresLabeledData(x,y))", "all x y.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(y)) -> RequireslabelledData(x,y))", "all x y.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(y)) -> RequiresLabeledData(x))", "all x y z.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(y) & LabeledData(z)) -> Requires(x,y))", "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarization(x)) -> RequiresLabeledData(x))"]}
{"id": "folio_validation_391", "nl": "Supervised learning is used to train the state-of-the-art text summarization model.", "fol": "all x.(TextSummarizationModel(x) -> CategorizedAsSupervisedLearning(x))", "prediction": ["all x.(SupervisedLearning(x) -> TrainsStateOfTheArtTextSummarizationModel(x))", "all x y.((SupervisedLearning(x) & StateOfTheArtTextSummarizationModel(y)) -> Trains(x,y))", "all x y.((SupervisedLearning(x) & TextSummarizationModel(y)) -> Trains(x,y))", "all x y.((SupervisedLearning(x) & StateOfTheArtTextSummarizationModel(y)) -> UsedToTrain(x,y))", "all x y z.((SupervisedLearning(x) & TextSummarizationModel(y) & StateOfTheArt(z)) -> Trains(x,y,z))", "all x y.((SupervisedLearning(x) & StateOfTheArtTextSummarization(y)) -> Trains(x,y))", "all x y.((SupervisedLearning(x) & TextSummarizationModel(y)) -> UsedToTrain(x,y))", "all x.(SupervisedLearning(x) -> TrainsStateOfTheArtTextSummarization(x))", "all x y z.((SupervisedLearning(x) & TextSummarizationModel(y) & StateOfTheArt(z)) -> UsedToTrain(x,y,z))", "all x y.((SupervisedLearning(x) & StateOfTheArtTextSummarization(y)) -> UsedToTrain(x,y))", "all x.(SupervisedLearning(x) -> UsedToTrainStateOfTheArtTextSummarizationModel(x))", "all x y.((SupervisedLearning(x) & TextSummarization(y)) -> Trains(x,y))", "all x.(SupervisedLearning(x) -> TrainStateOfTheArtTextSummarizationModel(x))", "all x y z.((SupervisedLearning(x) & TextSummarization(y) & StateOfTheArt(z)) -> Trains(x,y,z))", "all x y z.((SupervisedLearning(x) & TextSummarization(y) & StateOfTheArt(z)) -> UsedToTrain(x,y,z))", "all x.(SupervisedLearning(x) -> (TrainsStateOfTheArtTextSummarizationModel(x)))"]}
{"id": "folio_validation_392", "nl": "Unsupervised learning is used to train the state-of-the-art text summarization model.", "fol": "all x.(TextSummarizationModel(x) -> CategorizedAsUnsupervisedLearning(x))", "prediction": ["all x.(UnsupervisedLearning(x) -> TrainsStateOfTheArtTextSummarizationModel(x))", "all x y.((UnsupervisedLearning(x) & StateOfTheArtTextSummarizationModel(y)) -> Trains(x,y))", "all x y.((UnsupervisedLearning(x) & TextSummarizationModel(y)) -> Trains(x,y))", "all x y.((UnsupervisedLearning(x) & StateOfTheArtTextSummarizationModel(y)) -> UsedToTrain(x,y))", "all x.((UnsupervisedLearning(x) & StateOfTheArtTextSummarizationModel(x)) -> Trains(x))", "all x y.((UnsupervisedLearning(x) & TextSummarizationModel(y)) -> UsedToTrain(x,y))", "all x y z.((UnsupervisedLearning(x) & TextSummarizationModel(y) & StateOfTheArt(z)) -> Trains(x,y,z))", "all x y.((UnsupervisedLearning(x) & StateOfTheArtTextSummarization(y)) -> Trains(x,y))", "all x y z.((UnsupervisedLearning(x) & TextSummarizationModel(y) & StateOfTheArt(z)) -> UsedToTrain(x,y,z))", "all x.(UnsupervisedLearning(x) -> UsedToTrainStateOfTheArtTextSummarizationModel(x))", "all x.((UnsupervisedLearning(x) & StateOfTheArtTextSummarizationModel(x)) -> Trains(x,y))", "all x y.((UnsupervisedLearning(x) & StateOfTheArtTextSummarization(y)) -> UsedToTrain(x,y))", "all x.((UnsupervisedLearning(x) & StateOfTheArtTextSummarizationModel(x)) -> Trains(x,StateOfTheArtTextSummarizationModel))", "all x.(UnsupervisedLearning(x) -> TrainStateOfTheArtTextSummarizationModel(x))", "all x.((UnsupervisedLearning(x) & StateOfTheArtTextSummarizationModel(x)) -> UsedToTrain(x))", "all x y.((UnsupervisedLearning(x) & TextSummarization(y)) -> Trains(x,y))"]}
{"id": "folio_validation_393", "nl": "If a cartoon character is funny, then it is popular.", "fol": "all x.(IsFunny(x) -> IsPopular(x))", "prediction": ["all x.((CartoonCharacter(x) & Funny(x)) -> Popular(x))", "all x.(FunnyCharacter(x) -> Popular(x))", "all x.((Character(x) & Funny(x)) -> Popular(x))", "all x.(FunnyCartoonCharacter(x) -> Popular(x))", "all x.((CaricatureCharacter(x) & Funny(x)) -> Popular(x))", "all x.(FunnyCartoon(x) -> Popular(x))", "all x.((CartoonCharacter(x) & Funny(x)) -> Popular(x))", "all x.((CartoonCartoonCharacter(x) & Funny(x)) -> Popular(x))", "all x.(Funny(x) -> PopularCharacter(x))", "all x.((CardinalCharacter(x) & Funny(x)) -> Popular(x))", "all x.((CartoonCard(x) & Funny(x)) -> Popular(x))", "all x.((CartoonCartoon(x) & Funny(x)) -> Popular(x))", "all x y.((CartoonCharacter(x) & Funny(x)) -> Popular(y))", "all x.((CardiganCharacter(x) & Funny(x)) -> Popular(x))", "all x y.((CartoonCharacter(x) & Funny(x)) -> Popular(x))", "all x.(FunnyCartoon(x) -> PopularCharacter(x))"]}
{"id": "folio_validation_394", "nl": "If a cartoon character is ugly, then it is not popular.", "fol": "all x.(IsUgly(x) -> -IsPopular(x))", "prediction": ["all x.((CartoonCharacter(x) & Ugly(x)) -> -Popular(x))", "all x.(UglyCharacter(x) -> -Popular(x))", "all x.((Character(x) & Ugly(x)) -> -Popular(x))", "all x.((CaricatureCharacter(x) & Ugly(x)) -> -Popular(x))", "all x.((CartoonCharacter(x) & Ugly(x)) -> NotPopular(x))", "all x.((CartoonCartoonCharacter(x) & Ugly(x)) -> -Popular(x))", "all x.(Ugly(x) -> -PopularCharacter(x))", "all x.((CartoonCard(x) & Ugly(x)) -> -Popular(x))", "all x.((CardinalCharacter(x) & Ugly(x)) -> -Popular(x))", "all x.((CartoonCharacter(x) & Ugliest(x)) -> -Popular(x))", "all x.(UglyCartoonCharacter(x) -> -Popular(x))", "all x y.((CartoonCharacter(x) & Ugly(x)) -> -Popular(y))", "all x.((CartoonCartoon(x) & Ugly(x)) -> -Popular(x))", "all x.((CartoonCharacter(x) & Uglier(x)) -> -Popular(x))", "all x.((CardiganCharacter(x) & Ugly(x)) -> -Popular(x))", "all x.(Ugly(x) -> -Popular(x))"]}
{"id": "folio_validation_395", "nl": "If a cartoon character is loved by children, then it is funny.", "fol": "all x.(IsLovedByChildren(Children,x) -> IsFunny(x))", "prediction": ["all x.((CartoonCharacter(x) & LovedByChildren(x)) -> Funny(x))", "all x.(LovedByChildren(x) -> FunnyCharacter(x))", "all x.((Character(x) & LovedByChildren(x)) -> Funny(x))", "all x y.((CartoonCharacter(x) & LovedByChildren(x)) -> Funny(x))", "all x.((CaricatureCharacter(x) & LovedByChildren(x)) -> Funny(x))", "all x y.((CartoonCharacter(x) & LovedByChildren(x,y)) -> Funny(x))", "all x.((CartoonCartoonCharacter(x) & LovedByChildren(x)) -> Funny(x))", "all x.((CartoonCartoon(x) & LovedByChildren(x)) -> Funny(x))", "all x.(Funny(x) -> (CartoonCharacter(x) & LovedByChildren(x)))", "all x y.((CartoonCharacter(x) & LovedByChildren(x)) -> Funny(y))", "all x y.((CartoonCharacter(x) & LovedByChildren(x) & Cartoon(y)) -> Funny(x))", "all x.(LovedByChildren(x) -> FunnyCartoonCharacter(x))", "all x.((CardinalCharacter(x) & LovedByChildren(x)) -> Funny(x))", "all x.((CartoonCharacter(x) & LovedBy(x,Children)) -> Funny(x))", "all x.((CartoonCard(x) & LovedByChildren(x)) -> Funny(x))", "all x.((CartoonCharacter(x) & LovedByChildren(x)) -> FunnyCharacter(x))"]}
{"id": "folio_validation_396", "nl": "If a cartoon character is from The Simpsons, then it is loved by children.", "fol": "all x.(IsFromTheSimpsons(x) -> IsLovedByChildren(Children,x))", "prediction": ["all x.((CartoonCharacter(x) & Simpsons(x)) -> LovedByChildren(x))", "all x.((CartoonCharacter(x) & FromTheSimpsons(x)) -> LovedByChildren(x))", "all x.((CartoonCharacter(x) & FromSimpsons(x)) -> LovedByChildren(x))", "all x.((CartoonCharacter(x) & SimpsonsCharacter(x)) -> LovedByChildren(x))", "all x.((Character(x) & Simpsons(x)) -> LovedByChildren(x))", "all x y.((CartoonCharacter(x) & Simpsons(y)) -> LovedByChildren(x,y))", "all x.((CartoonCharacter(x) & FromSimpson(x)) -> LovedByChildren(x))", "all x.((CartoonCharacter(x) & FromTheSims(x)) -> LovedByChildren(x))", "all x.((CartoonCharacter(x) & FromTheSpiders(x)) -> LovedByChildren(x))", "all x.((CartoonCharacter(x) & FromTheSpices(x)) -> LovedByChildren(x))", "all x.((Character(x) & FromTheSimpsons(x)) -> LovedByChildren(x))", "all x.((CartoonCharacter(x) & SimpsonsCartoon(x)) -> LovedByChildren(x))", "all x.((CartoonCharacter(x) & FromTheSimpsons(x)) -> LovedByChildren(x))", "all x.((CartoonCharacter(x) & FromSims(x)) -> LovedByChildren(x))", "all x.((Character(x) & FromSimpsons(x)) -> LovedByChildren(x))", "all x y.((CartoonCharacter(x) & Simpsons(y)) -> LovedByChildren(x))"]}
{"id": "folio_validation_397", "nl": "If a cartoon character is yellow, then it is from The Simpsons.", "fol": "all x.(IsYellow(x) -> IsFromTheSimpsons(x))", "prediction": ["all x.((CartoonCharacter(x) & Yellow(x)) -> Simpsons(x))", "all x.((CartoonCharacter(x) & Yellow(x)) -> FromTheSimpsons(x))", "all x.((CartoonCharacter(x) & Yellow(x)) -> SimpsonsCharacter(x))", "all x.((CartoonCharacter(x) & Yellow(x)) -> FromSimpsons(x))", "all x.((CartoonCharacter(x) & Yellow(x)) -> SimpsonsCartoon(x))", "all x.((CartoonCharacter(x) & Yellow(x)) -> FromTheSims(x))", "all x.((Character(x) & Yellow(x)) -> Simpsons(x))", "all x.((CartoonCharacter(x) & Yellow(x)) -> TheSimpsons(x))", "all x.((CartoonCartoonCharacter(x) & Yellow(x)) -> Simpsons(x))", "all x.((CartoonCharacter(x) & Yellow(x)) -> SimpsonsCartoonCharacter(x))", "all x.((CardinalCharacter(x) & Yellow(x)) -> Simpsons(x))", "all x.((CartoonCharacter(x) & Yellow(x)) -> FromTheSpiders(x))", "all x y.((CartoonCharacter(x) & Yellow(x)) -> Simpsons(y))", "all x.(YellowCartoonCharacter(x) -> FromTheSimpsons(x))", "all x.((CartoonCharacter(x) & Yellow(x)) -> FromTheSimpsons(x))", "all x.((Cardio(x) & Yellow(x)) -> Simpsons(x))"]}
{"id": "folio_validation_398", "nl": "Ben is either from The Simpsons or funny.", "fol": "((IsFromTheSimpsons(Ben) & -IsFunny(Ben)) | (-IsFromTheSimpsons(Ben) & IsFunny(Ben)))", "prediction": ["exists x.(Ben(x) & (FromSimpsons(x) | Funny(x)))", "all x.(Ben(x) -> (FromSimpsons(x) | Funny(x)))", "all x.(Ben(x) -> (FromTheSimpsons(x) | Funny(x)))", "exists x.(Ben(x) & (FromTheSimpsons(x) | Funny(x)))", "all x.(Ben(x) -> (FromTheSimpsons(x) | Funny(x)))", "all x.(Ben(x) -> (FromSimpsons(x) | Funny(x)))", "exists x.(Ben(x) & (Sims(x) | Funny(x)))", "(exists x.(Ben(x) & Simpsons(x)) | Funny(x)))", "exists x.(Ben(x) & (FromSimpsons(x) | Funny(x)))", "exists x.(Ben(x) & (Simpsons(x) | Funny(x)))", "all x.(Ben(x) -> (Sims(x) | Funny(x)))", "all x.(Ben(x) -> (Simpsons(x) | Funny(x)))", "exists x.(Ben(x) & (FromSims(x) | Funny(x)))", "exists x.(Ben(x) & (FromSimpson(x) | Funny(x)))", "all x.(Ben(x) -> (FromSimpson(x) | Funny(x)))", "exists x.(Ben(x) & (FromSimpsons(x) | Funny(x))))"]}
{"id": "folio_validation_399", "nl": "Ben is loved by children.", "fol": "IsLovedByChildren(Children,Ben)", "prediction": ["all x.(Ben(x) -> LovedByChildren(x))", "all x.((Ben(x) & LovedByChildren(x)) -> LovedByChildren(x))", "all x.(Ben(x) -> LovedByChildren(x))", "all x y.((Ben(x) & Child(y)) -> LovedBy(x,y))", "all x.((Ben(x) & LovedByChildren(x)) -> LovedByChildren(x))", "all x.((Ben(x) & LovedByChildren(x)) -> LovedBy(x,Children))", "all x.((Ben(x) & LovedByChildren(x)) -> LovedBy(x))", "exists x.(Ben(x) & LovedByChildren(x))", "all x.((Ben(x) & LovedByChildren(x)) -> LovedBen(x))", "all x.((Ben(x) & LovedBy(x,Children)) -> LovedBy(x,Children))", "all x y.((Ben(x) & Child(y)) -> LovedBy(x,y))", "all x.((Ben(x) & LovedBy(x,Children)) -> LovedBen(x))", "all x.((Ben(x) & LovedByChildren(x)) -> LovedBy(x))", "all x.((Ben(x) & LovedByChildren(x)) -> LovedBy(x,Children))", "all x.((Ben(x) & LovedByChildren(x)) -> Loves(x))", "exists x.(Ben(x) & LovedBy(x,Children))"]}
{"id": "folio_validation_400", "nl": "Ben is ugly or yellow.", "fol": "(IsUgly(Ben) | IsYellow(Ben))", "prediction": ["all x.(Ben(x) -> (Ugly(x) | Yellow(x)))", "all x.(Ben(x) -> (Ugly(x) | Yellow(x)))", "exists x.(Ben(x) & (Ugly(x) | Yellow(x)))", "exists x.(Ben(x) & (Ugly(x) | Yellow(x)))", "all x.((Ben(x) & (Ugly(x) | Yellow(x))) -> Ugly(x))", "(Ugly(Ben) | Yellow(Ben))", "all x.((Ben(x) & (Ugly(x) | Yellow(x))) -> Ugly(x))", "exists x.(Ben(x) & (Ugly(x) | Yellow(x))))", "all x.((Ben(x) & (Ugly(x) | Yellow(x))) -> (Ugly(x) | Yellow(x)))", "exists x.(Ben(x) & (Ugly(x) | Yellow(x))))", "all x.((Ben(x) & (Ugly(x) | Yellow(x))) -> (Ugly(x) | Yellow(x)))", "all x.((Ben(x) & (Ugly(x) | Yellow(x))) -> (Ugly(x) | Yellow(x))))", "all x.(Ben(x) -> (Ugly(x) | Yellow(x)))", "all x.((Ben(x) & (Ugly(x) | Yellow(x))) -> (Ugly(x)))", "all x.(Been(x) -> (Ugly(x) | Yellow(x)))", "all x.((Ben(x) & (Ugly(x) | Yellow(x))) -> -Ugly(x))"]}
{"id": "folio_validation_401", "nl": "Ben is either yellow and ugly or neither yellow nor ugly.", "fol": "((IsYellow(Ben) & IsUgly(Ben) & -(-IsYellow(Ben) & -IsUgly(Ben))) | (-(IsYellow(Ben) & IsUgly(Ben)) & -IsYellow(Ben) & -IsUgly(Ben)))", "prediction": ["all x.(Ben(x) -> ((Yellow(x) & Ugly(x)) | (-Yellow(x) & Ugly(x)))))", "all x.(Ben(x) -> ((Yellow(x) & Ugly(x)) | -Yellow(x) & Ugly(x))))", "exists x.(Ben(x) & ((Yellow(x) & Ugly(x)) | -Yellow(x) & Ugly(x))))", "all x.(Ben(x) -> ((Yellow(x) & Ugly(x)) | -(Yellow(x) & Ugly(x)))))", "exists x.(Ben(x) & ((Yellow(x) & Ugly(x)) | (-Yellow(x) & Ugly(x)))))", "all x.(Ben(x) -> ((Yellow(x) & Ugly(x)) | (-Yellow(x) & Ugly(x))))", "all x.(Ben(x) -> ((Yellow(x) & Ugly(x)) | (-Yellow(x) & Ugly(x)))))", "all x.(Ben(x) -> ((Yellow(x) & Ugly(x)) | -Yellow(x) & Ugly(x))))", "exists x.(Ben(x) & ((Yellow(x) & Ugly(x)) | -Yellow(x) & Ugly(x))))", "all x.(Ben(x) -> ((Yellow(x) & Ugly(x)) | -Yellow(x) & Ugly(x)))", "all x.(Ben(x) -> ((Yellow(x) & Ugly(x)) | -(Yellow(x) & Ugly(x)))))", "all x.(Ben(x) -> (Yellow(x) & Ugly(x)) | (-Yellow(x) & Ugly(x))))", "exists x.(Ben(x) & ((Yellow(x) & Ugly(x)) | (-Yellow(x) & Ugly(x)))))", "all x.(Ben(x) -> ((Yellow(x) & Ugly(x) | -Yellow(x) & Ugly(x))))", "all x.(Ben(x) -> ((Yellow(x) & Ugly(x)) | (-Yellow(x) & Ugly(x))))", "all x.(Ben(x) -> (Yellow(x) & Ugly(x) | -Yellow(x) & Ugly(x)))"]}
{"id": "folio_validation_402", "nl": "Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals.", "fol": "all x y.(DeliberateSelectiveBreeding(x,y) -> IsArtificialSelection(x))", "prediction": ["all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimals(x)))", "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreedingOfDomesticAnimals(x)))", "all x y.((BreedingBack(x) & DomesticAnimal(y)) -> (ArtificialSelection(x,y) & DeliberateSelectiveBreeding(x,y)))", "all x y.((BreedingBack(x) & DomesticAnimal(y)) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x,y)))", "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimal(x)))", "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimals(x)))", "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x)))", "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreedingOfDomesticAnimals(x)))", "all x y.((BreedingBack(x) & DomesticAnimal(y)) -> DeliberateSelectiveBreeding(x,y))", "all x y.((BreedingBack(x) & DomesticAnimal(y)) -> ArtificialSelectionByDeliberateBreeding(x,y))", "all x y.((BreedingBack(x) & DomesticAnimal(y)) -> (ArtificialSelection(x,y) & DeliberateBreeding(x,y)))", "all x.((BreedingBack(x) & ArtificialSelection(x) & DeliberateSelectiveBreedingOfDomesticAnimals(x)) -> ArtificialSelection(x))", "all x.((BreedingBack(x) & ArtificialSelection(x) & DeliberateSelectiveBreeding(x)) -> DomesticAnimal(x))", "all x y.((BreedingBack(x) & DomesticAnimal(y) & DeliberateSelectiveBreeding(x,y)) -> ArtificialSelection(x))", "all x.((BreedingBack(x) & ArtificialSelection(x) & DeliberateSelectiveBreedingOfDomesticAnimals(x)) -> BreedingBack(x))", "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelection(x) & BreedingDomesticAnimals(x)))"]}
{"id": "folio_validation_403", "nl": "Heck cattle were bred-back in the 1920s to resemble the aurochs.", "fol": "exists x y.(HeckCattle(x) & Aurochs(y) & DeliberateSelectiveBreeding(x,y))", "prediction": ["all x y.((Heck(x) & Auroch(y)) -> (BredBack(x,y) & Reresembles(x,y)))", "all x y.((Heck(x) & Auroch(y)) -> BredBack(x,y))", "all x y.((Heck(x) & Auroch(y)) -> (BredBack(x,y) & RemindsAuroch(x,y)))", "all x y.((Heck(x) & Auroch(y)) -> (BredBack(x,y) & RelativeTo(x,y)))", "all x y.((Heck(x) & Auroch(y)) -> (BredBack(x,y) & Recalls(x,y)))", "all x y.((Heck(x) & Auroch(y)) -> (BredBack(x,y) & RelativeToAuroch(x,y)))", "all x y.((Heck(x) & Auroch(y)) -> (BredBack(x,y) & RelatesTo(x,y)))", "all x y.((Heck(x) & Auroch(y)) -> (BredBack(x,y) & RemindsAuroch(x)))", "all x.(Heck(x) -> (BredBack(x,20) & RemindsAurochs(x)))", "all x y.((Heck(x) & Auroch(y)) -> BredBackIn(x,y))", "all x y.((Heck(x) & Auroch(y)) -> (BredBack(x,y) & ReactsTo(x,y)))", "all x y.((Heck(x) & Auroch(y)) -> (BredBack(x,y) & ReresemblesAuroch(x,y)))", "all x y.((Heck(x) & Auroch(y)) -> (BredBack(x,y) & Reminisces(x,y)))", "all x y.((Heck(x) & Auroch(y)) -> BredBackInThe20s(x,y))", "all x y z.((Heck(x) & Cattle(y) & Auroch(z)) -> BredBack(x,y,z))", "all x y.((Heck(x) & Auroch(y)) -> (BredBack(x,y) & RecallsAuroch(x,y)))"]}
{"id": "folio_validation_404", "nl": "[BG] Heck cattle are animals.", "fol": "all x.(HeckCattle(x) -> IsAnimal(x))", "prediction": ["[BG] HeckCattle(x) -> Animal(x))", "[BG] HeckCattle(x) -> Animal(x))", "all x.(HeckCattle(x) -> Animal(x))", "all x.(HellCattle(x) -> Animal(x))", "[BG] HeckCattle(x) & Animal(x))", "[BG] HeckCowboy(x) -> Animal(x))", "[BG] HeckCowls(x) -> Animal(x))", "[BG] HeckCowl(x) -> Animal(x))", "[BG] HeckCowboys(x) -> Animal(x))", "[BG] HeckCowboy(x) -> Animal(x))", "[BG] HeckCowls(x) & Animal(x))", "[BG] HeckCattle(x) - Animal(x))", "all x.(HeckCow(x) -> Animal(x))", "[BG] HeckChowder(x) -> Animal(x))", "[BG] HeckCalf(x) -> Animal(x))", "[BG] HeckCowboy(x) & Animal(x))"]}
{"id": "folio_validation_405", "nl": "[BG] Aurochs are animals.", "fol": "all x.(Aurochs(x) -> IsAnimal(x))", "prediction": ["all x.(Auroch(x) -> Animal(x))", "all x.((Auroch(x) & Animal(x)) -> Animal(x))", "all x.(Aroch(x) -> Animal(x))", "all x.(Arach(x) -> Animal(x))", "all x.((Auroch(x) & Animal(x)) -> (Animal(x) | Animal(x)))", "all x.((Auroch(x) & Animal(x)) -> (Animal(x) & Animal(x)))", "All x.(Auroch(x) -> Animal(x))", "all x y.((Auroch(x) & Animal(y)) -> Animal(x,y))", "all x y.((Auroch(x) & Animal(y)) -> (Animal(x) & Animal(y)))", "all x.(Auroch(x) -> Animal(x))", "all x y.((Auroch(x) & Animal(y)) -> Animal(x))", "all x.(Auroch(x) -> (Animal(x) & Animal(x)))", "all x y.((Auroch(x) & Animal(y)) -> (Animal(x,y) | Animal(x,y)))", "all x.(Arroch(x) -> Animal(x))", "all x y.((Auroch(x) & Animal(y)) -> (Animal(x,y) & Animal(y)))", "all x.((Auroch(x) & Animal(x)) -> (Auroch(x) & Animal(x)))"]}
{"id": "folio_validation_406", "nl": "Some animals to be bred-back resemble animals that are extinct.", "fol": "exists x y.(IsAnimal(x) & IsAnimal(y) & DeliberateSelectiveBreeding(x,y) & IsExtinct(y))", "prediction": ["exists x.(Animal(x) & BredBack(x) & RemindsExtinctAnimals(x))", "exists x.(Animal(x) & BredBack(x) & ReresemblesExtinctAnimals(x))", "exists x.(Animal(x) & BredBack(x) & ReresemblesExtinct(x))", "exists x.(Animal(x) & BredBack(x) & RemindsExtinct(x))", "exists x.(Animal(x) & BredBack(x) & Animal(x) & Extinct(x))", "exists x.(Animal(x) & BredBack(x) & Extinct(x))", "exists x.(Animal(x) & BredBack(x) & ReresemblesExtinctAnimal(x))", "exists x.(Animal(x) & BredBack(x) & resemblesExtinctAnimals(x))", "exists x.(Animal(x) & BredBack(x) & resemblesExtinct(x))", "exists x.(Animal(x) & BredBack(x) & RemindsExtinction(x))", "exists x.(Animal(x) & BredBack(x) & RecallsExtinctAnimals(x))", "exists x.(BredBack(x) & Animal(x) & Extinct(x))", "exists x.(Animal(x) & BredBack(x))", "exists x.(Animal(x) & BredBack(x) & RelativeToExtinct(x))", "exists x.(Animal(x) & BredBack(x) & ReresemblesExtinction(x))", "exists x.(Animal(x) & BredBack(x) & RecallsExtinct(x))"]}
{"id": "folio_validation_407", "nl": "Some Heck cattle are artificially selected.", "fol": "exists x.(HeckCattle(x) & IsArtificialSelection(x))", "prediction": ["exists x.(HellCattle(x) & ArtificiallySelected(x))", "exists x.(HeckCattle(x) & ArtificiallySelected(x))", "exists x.(HellChowder(x) & ArtificiallySelected(x))", "exists x.(Heck(x) & ArtificiallySelected(x))", "exists x.(HellCalf(x) & ArtificiallySelected(x))", "exists x.(HeckChowder(x) & ArtificiallySelected(x))", "exists x.(HackCattle(x) & ArtificiallySelected(x))", "exists x.(HeckCowl(x) & ArtificiallySelected(x))", "exists x.(HoffCattle(x) & ArtificiallySelected(x))", "exists x.(HitCattle(x) & ArtificiallySelected(x))", "exists x.(HellCow(x) & ArtificiallySelected(x))", "exists x.(HahCattle(x) & ArtificiallySelected(x))", "exists x.(HellCake(x) & ArtificiallySelected(x))", "exists x.(HeckCow(x) & ArtificiallySelected(x))", "exists x.(HellCattle(x) & ArtificiallySelected(x))", "exists x.(Heck(x) & ArtificiallySelected(x))"]}
{"id": "folio_validation_408", "nl": "Aurochs are extinct.", "fol": "all x.(Aurochs(x) -> IsExtinct(x))", "prediction": ["all x.(Auroch(x) -> Extinct(x))", "all x.(Auro(x) -> Extinct(x))", "all x.(Auroscope(x) -> Extinct(x))", "all x.(Auchs(x) -> Extinct(x))", "all x.(Aroquois(x) -> Extinct(x))", "all x.(Auris(x) -> Extinct(x))", "all x.(Aroch(x) -> Extinct(x))", "all x.(Auropod(x) -> Extinct(x))", "all x.(Auroch(x) -> Extinct(x))", "All x.(Auroch(x) -> Extinct(x))", "all x.(Arach(x) -> Extinct(x))", "all x.(Auroch(x) -> Extinct(x))", "all x.(Aurops(x) -> Extinct(x))", "all x y.((Auroch(x) & Species(y)) -> Extinct(x))", "all x.(Auroctus(x) -> Extinct(x))", "all x y.((Auroch(x) & Animal(y)) -> Extinct(x))"]}
{"id": "folio_validation_409", "nl": "All students are humans. ", "fol": "all x.(IsStudent(x) -> IsHuman(x))", "prediction": ["all x.(Student(x) -> Human(x))", "all x.(Student(x) -> Human(x))", "all x.exists y.(Student(x) & Human(y))", "all x y.((Student(x) & Human(y)) -> Human(x))", "all x y.((Student(x) & Student(y)) -> Human(x))", "all x y.((Student(x) & Human(y)) -> (Human(x) & Human(y)))", "all x y.((Student(x) & Human(y)) -> Is(x,y))", "all x y.((Student(x) & Human(y)) -> HasStudent(x,y))", "all x y.((Student(x) & Human(y)) -> (Human(x) & Human(x)))", "all x y.((Student(x) & Human(y)) -> (Human(x) | Human(y)))", "(all x.(Student(x) -> Human(x))", "all x y.((Student(x) & Human(y)) -> (Human(x) | Human(x)))", "all x y.((Student(x) & Human(y)) -> Becomes(x,y))", "all x y.((Student(x) & Human(y)) -> Human(x,y))", "(all x.(Student(x) -> Human(x)))", "all x y.((Student(x) & Human(y)) -> Has(x,y))"]}
{"id": "folio_validation_410", "nl": "If someone studies, then they are a student.", "fol": "all x.(Studies(x) -> IsStudent(x))", "prediction": ["all x.(Studies(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x.(Studies(x) -> Student(x))", "all x.((Studies(x) & Student(x)) -> Student(x))", "all x.((Student(x) & Studies(x)) -> Student(x))", "all x y.((Student(x) & Person(y) & Studies(x,y)) -> Student(x))", "all x y.((Student(x) & Person(y)) -> Student(x))", "all x y.((Student(x) & Person(y) & Studies(x)) -> Student(y))", "all x y.((Student(x) & Person(y) & Studies(x)) -> Student(x))", "all x.(Students(x) -> Student(x))", "all x.(Student(x) -> Studies(x))", "all x y.((Student(x) & Person(y) & Studies(x,y)) -> Student(y))", "exists x.(Student(x) & Studies(x))", "all x.(Student(x) -> Student(x))", "all x y.((Student(x) & Person(y)) -> Student(x,y))", "all x y.((Student(x) & Person(y) & Studies(y)) -> Student(x))"]}
{"id": "folio_validation_411", "nl": "A person either studys or teaches.", "fol": "all x.(Studies(x) | Teaches(x))", "prediction": ["all x.(Person(x) -> (Studies(x) | Teaches(x)))", "all x.(Person(x) -> (Studies(x) | Teaches(x)))", "all x.(Person(x) -> (Studies(x) | Taught(x)))", "exists x.(Person(x) & (Studies(x) | Teaches(x)))", "exists x.(Person(x) & (Studies(x) | Teaches(x)))", "all x.(Person(x) -> (Studies(x) | Educates(x)))", "all x.(Studies(x) | Teaches(x))", "all x y.((Person(x) & Person(y)) -> (Studies(x,y) | Teaches(x,y)))", "exists x.(Person(x) & (Studies(x) | Taught(x)))", "all x y.((Person(x) & Person(y)) -> (Studies(x,y) | Teaches(x,y)))", "all x.((Person(x) & (Studies(x) | Teaches(x))) -> (Studies(x) | Teaches(x)))", "all x.(Person(x) -> (Studies(x) | Teaches(x)))", "all x.(Studies(x) | Teaches(x))", "all x.((Person(x) & (Studies(x) | Teaches(x))) -> (Studies(x) | Teaches(x)))", "all x.(Person(x) -> (Studies(x) | teaches(x)))", "all x.((Person(x) & (Studies(x) | Teaches(x))) -> Person(x))"]}
{"id": "folio_validation_412", "nl": "No young person teaches.", "fol": "all x.(IsYoung(x) -> -Teaches(x))", "prediction": ["-exists x.(YoungPerson(x) & Teaches(x))", "-exists x.(YoungPerson(x) & Teaches(x))", "-exists x.(YoungPerson(x) & -Teaches(x))", "-exists x.(YoungPerson(x) & Taught(x))", "-exists x.(YoungPerson(x) & Educates(x))", "-exists x.(YoungPerson(x) & Teacher(x))", "-exists x.(YearPerson(x) & Teaches(x))", "-exists x.(YoungPerson(x) & Teach(x))", "-exists x.(YearPerson(x) & Teaches(x))", "all x.(YoungPerson(x) -> -Teaches(x))", "-exists x.(Young(x) & Teaches(x))", "-exists x.(Young(x) & Teaches(x))", "-exists x.(YoungPerson(x) & teaches(x))", "-exists x.(YearlyPerson(x) & Teaches(x))", "-exists x.(YoungPerson(x) & Teachers(x))", "-exists x.(YoungPerson(x) & Teaching(x))"]}
{"id": "folio_validation_413", "nl": "Jerry neither teaches nor is a manager.", "fol": "(-Teaches(Jerry) & -IsManager(Jerry))", "prediction": ["-(Jerry(Jerry) & -Teaches(Jerry) & -Manager(Jerry))", "-(Jerry(Jerry) & -(Teaches(Jerry) | Manager(Jerry)))", "all x.((Jerry(x) & -Teaches(x) & -Manager(x)) -> -Manager(x))", "all x.(Jerry(x) -> (-Teaches(x) & -Manager(x)))", "exists x.(Jerry(x) & -(Teaches(x) | Manager(x)))", "(-(Jerry(Jerry) | Manager(Jerry)))", "(-Teaches(Jerry) & -Manager(Jerry))", "all x.(Jerry(x) -> (-Teaches(x) | Manager(x)))", "all x.((Jerry(x) & -(Teaches(x) | Manager(x))) -> -(Teaches(x) | Manager(x)))", "-(Jerry(Jerry) | Manager(Jerry)))", "all x.((Jerry(x) & -(Teaches(x) | Manager(x))) -> -(Teaches(x) | Manager(x))))", "(-(Jerry(Jerry) & -Teaches(Jerry)) | (-Jerry(Jerry) & Manager(Jerry))))", "all x.((Jerry(x) & -Teaches(x) & -Manager(x)) -> -Teaches(x))", "(-(Jerry(Jerry) & -Teaches(Jerry)) | -Manager(Jerry)))", "Jerry -(Teaches(Jerry) | Manager(Jerry)))", "-(Jerry(Jerry) & -Teaches(Jerry) | Manager(Jerry)))"]}
{"id": "folio_validation_414", "nl": "Rose is young or a student.", "fol": "(IsYoung(Rose) | IsStudent(Rose))", "prediction": ["all x.(Rose(x) -> (Young(x) | Student(x)))", "exists x.(Rose(x) & (Young(x) | Student(x)))", "(Young(Rose) | Student(Rose))", "((Rose(Rose) & (Young(Rose) | Student(Rose))))", "all x.(Rose(x) -> ((Young(x) | Student(x))))", "(Young(Rose) | Student(Rose)))", "all x.(Rose(x) -> (Year(x) | Student(x)))", "((Rose(Rose) & Young(Rose)) | Student(Rose)))", "all x.(Rose(x) -> (Young(x) | Student(x)))", "All x.(Rose(x) -> (Young(x) | Student(x)))", "all x.(Roose(x) -> (Young(x) | Student(x)))", "((Rose(Rose) | Student(Rose)))", "Rose (Young(Rose) | Student(Rose)))", "Rose is (Young(Rose) | Student(Rose)))", "all x.(Rose(x) -> (Yet(x) | Student(x)))", "(Year(Rose) | Student(Rose))"]}
{"id": "folio_validation_415", "nl": "Jerry is young.", "fol": "IsYoung(Jerry)", "prediction": ["Jerry is young.", "exists x.(Jerry(x) & Young(x))", "all x.(Jerry(x) -> Young(x))", "All x.(Jerry(x) -> Young(x))", "((Jerry(Jerry) & Young(Jerry)) -> Young(Jerry))", "(Young(Jerry) & Young(Jerry))", "((Jerry(Jerry) & Young(Jerry)) | (Jerry(Jerry) & Young(Jerry))))", "all x.((Jerry(x) & Young(x)) -> Is(x,y))", "(Young(Jerry) & -Young(Jerry))", "(Jerry(Jerry) & Young(Jerry))", "(Year(Jerry) & Young(Jerry))", "(Young(Jerry) -> Jerry(Jerry))", "all x.((Jerry(x) & Young(x)) -> Young(x))", "(Year(Jeffrey) & Young(Jeffrey))", "((Jerry(Jerry) & Young(Jerry)) | (Jerry(Jerry) & Young(Jerry)))))", "((Jerry(Jerry) & Young(Jerry)))"]}
{"id": "folio_validation_416", "nl": "Jerry is not young.", "fol": "-IsYoung(Jerry)", "prediction": ["exists x.(Jerry(x) & -Young(x))", "all x.(Jerry(x) -> -Young(x))", "-Young(Jerry)", "Jerry is notyoung(Jerry)", "-(Jerry(Jerry) & Young(Jerry))", "(-Young(Jerry))", "exists x.(Jerry(x) & -Yearly(x))", "all x.(Jerry(x) -> -Yearly(x))", "Jerry is notYoung(Jerry)", "(-Year(Jerry) & -Young(Jerry))", "(-Jerry(Jerry) & -Young(Jerry))", "(-Young(Jerry) & -Young(Jerry))", "all x.(Jerry(x) -> -Year(x))", "exists x.(Jerry(x) & -Year(x))", "(-Jerry(Jerry) & Young(Jerry))", "-(Jerry(Jerry) & -Young(Jerry))"]}
{"id": "folio_validation_417", "nl": "Rose is a human or a manager.", "fol": "(IsHuman(Rose) | IsManager(Rose))", "prediction": ["all x.(Rose(x) -> (Human(x) | Manager(x)))", "exists x.(Rose(x) & (Human(x) | Manager(x)))", "(Human(Rose) | Manager(Rose))", "all x.(Rose(x) -> (Human(x) | Manager(x)))", "(exists x.(Rose(x) & Human(x)) | exists y.(Manager(y) & Manager(y))))", "(Human(Rose) | Manager(Rose)))", "all x.(Rose(x) -> (HasHuman(x) | HasManager(x)))", "all x.(Roose(x) -> (Human(x) | Manager(x)))", "(all x.(Rose(x) -> Human(x)) | All y.(Rose(y) -> Manager(y))))", "all x y.((Rose(x) & Human(y)) | Manager(y)) -> (Human(x) | Manager(x)))", "all x y.((Rose(x) & Human(y)) | Manager(y)) -> (Has(x,y) | Has(x,y)))", "(HasHuman(Rose) | HasManager(Rose))", "all x y.((Rose(x) & Human(y)) | Manager(y)) -> (Human(x) | Manager(y)))", "all x y.((Rose(x) & Human(y)) | Manager(y))", "(exists x.(Rose(x) & Human(x)) | exists y.(Manager(y) & Manager(x))))", "(exists x.(Rose(x) & Human(x)) | exists y.(Manager(y) & Manager(z))))"]}
{"id": "folio_validation_418", "nl": "Rose is a human or Jerry is a manager.", "fol": "(IsHuman(Rose) | IsManager(Jerry))", "prediction": ["(all x.(Rose(x) -> Human(x)) | (Jerry(x) -> Manager(x))))", "(all x.(Rose(x) -> Human(x)) | all y.(Jerry(y) -> Manager(y))))", "(exists x.(Rose(x) & Human(x)) | exists y.(Jerry(y) & Manager(y))))", "((Rose(Rose) & Human(Rose)) | Jerry(Rose) & Manager(Rose)))", "all x y.((Rose(x) & Jerry(y)) -> (Human(x) | Manager(y)))", "(exists x.(Rose(x) & Human(x))) | exists y.(Jerry(y) & Manager(y))))", "(all x y.((Rose(x) & Human(x)) | ((Jerry(y) & Manager(y)))))", "(all x y.((Rose(x) & Human(x)) | ((Jerry(y) & Manager(y)))) -> Human(x))", "((Rose(Rose) | Jerry(Rose))) -> Human(Rose)) | Jerry(Rose) -> Manager(Rose)))", "(all x y.(Rose(x) -> Human(x)) | (Jerry(y) -> Manager(y))))", "(all x.(Rose(x) -> Human(x)) & (Jerry(x) -> Manager(x)))", "(all x.(Rose(x) -> Human(x)) | (Jerry(x) -> Manager(x)))", "((Rose(Rose) | Jerry(Rose))) -> Human(Rose)) & (Jerry(Jerry) -> Manager(Jerry)))", "(all x.(Rose(x) -> Human(x)) & all y.(Jerry(y) -> Manager(y)))", "((Rose(Rose) & Human(Rose)) | Jerry(Jerry)))", "((Rose(Rose) -> Human(Rose)) | Jerry(Rose) -> Manager(Rose)))"]}
{"id": "folio_validation_419", "nl": "It is not true that Rose is a student and Jerry is a human.", "fol": "-(IsStudent(Rose) & IsHuman(Jerry))", "prediction": ["all x y.((Rose(x) & Jerry(y)) -> -(Student(x) & Human(y)))", "all x.((Rose(x) & Jerry(x)) -> -Student(x) & Human(x))", "all x y.((Rose(x) & Jerry(y)) -> (-Student(x) & Human(y)))", "(-exists x.(Rose(x) & Student(x)) & exists y.(Jerry(y) & Human(y))))", "all x y.((Rose(x) & Jerry(y)) -> -Student(x) & Human(y))", "(-all x.(Rose(x) -> Student(x)) & all y.(Jerry(y) -> Human(y)))", "(-(Student(Rose) & Human(Rose)) -> -Student(Rose)) & Human(Rose))", "(-exists x.(Student(x) & Rose(x)) & exists y.(Human(y) & Jerry(y))))", "-((Rose(Rose) & Jerry(Rose)) & Human(Rose))", "(-(Rose(Rose) & Jerry(Rose)) -> Student(Rose)) & -(Rose(Rose) -> Human(Rose)))", "-((Rose(Rose) & Jerry(Rose)) -> Human(Rose))", "(-(Rose(Rose) & Jerry(Rose)) -> Student(Rose) & Jerry(Rose) -> Human(Rose)))", "(-(Rose(Rose) & Jerry(Rose)) -> Student(Rose) & Jerry(Rose)) & Jerry(Rose) -> Human(Rose))", "(-(Rose(Rose) & Jerry(Rose)) & Human(Rose))", "(-(Rose(Rose) & Jerry(Rose)) -> Student(Rose)) & -(Jerry(Rose) -> Human(Rose)))", "(-exists x.(Student(x) & Rose(x)) & exists y.(Human(y) & Jerry(x))))"]}
{"id": "folio_validation_420", "nl": "New Vessel Press is a publishing house which specializes in translating foreign literature into English.", "fol": "(IsPublishingHouse(Newvesselpress) & SpecializesInTranslation(Newvessel,Translatingforeignliteratureintoenglish))", "prediction": ["all x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingFrenchLiteratureIntoEnglish(x)))", "all x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingForeignLiterature(x) & SpecializesInTranslatingIntoEnglish(x)))", "all x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingFrenchLiterature(x) & SpecializesInTranslatingEnglish(x)))", "all x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingForeignLiterature(x)))", "all x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingFrenchLiterature(x) & IntoEnglish(x)))", "all x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingForeignLiteratureIntoEnglish(x)))", "all x.(NewVesselPress(x) -> (PublishingHouse(x) & TranslatesFrenchLiteratureIntoEnglish(x)))", "all x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingFrenchLiterature(x) & SpecializesInTranslatingEnglishIntoEnglish(x)))", "all x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingFrenchLiterature(x) & SpecializesInTranslatingIntoEnglish(x)))", "all x y.((NewVesselPress(x) & ForeignLiterature(y)) -> SpecializesInTranslatingIntoEnglish(x,y))", "all x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingForeignLiterature(x) & IntoEnglish(x)))", "all x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingFrenchLiterature(x)))", "all x.(NewVesselPress(x) -> (PublishingHouse(x) & TranslatesForeignLiteratureIntoEnglish(x)))", "All x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingFrenchLiteratureIntoEnglish(x)))", "all x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingFrenchLiterature(x) & TranslatesIntoEnglish(x)))", "All x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingForeignLiterature(x)))"]}
{"id": "folio_validation_421", "nl": "All of New Vessel Press's published books are in English.", "fol": "all x.((IsBook(x) & PublishedByPublisher(x,Newvesselpress)) -> IsInLanguage(x,English))", "prediction": ["all x.((NewVesselPress(x) & PublishedBook(x)) -> English(x))", "all x.(PublishedBook(x) -> NewVesselPress(x))", "all x.((NewVesselPress(x) & PublishedBooks(x)) -> English(x))", "all x.(PublishedBook(x) -> (NewVesselPress(x) & InEnglish(x)))", "all x.((NewVesselPress(x) & PublishedBook(x)) -> InEnglish(x))", "all x.(NewVesselPress(x) -> PublishedBooksInEnglish(x))", "all x y.((NewVesselPress(x) & Book(y)) -> PublishedInEnglish(x,y))", "all x.(PublishedBook(x) -> (NewVesselPressPublishedBook(x) & InEnglish(x)))", "all x.(PublishedByNewVesselPress(x) -> English(x))", "all x.(NewVesselPress(x) -> (PublishedBooks(x) & InEnglish(x)))", "all x.(PublishedBook(x) -> (NewVesselPressPublishedBooks(x) & InEnglish(x)))", "all x.((NewVesselPress(x) & PublishedBooks(x)) -> InEnglish(x))", "all x.(PublishedBook(x) -> InEnglish(x))", "all x.(NewVesselPressPublishedBooks(x) -> English(x))", "all x.(PublishedByNewVesselPress(x) -> InEnglish(x))", "all x.(NewVesselPressPublishedBooks(x) -> InEnglish(x))"]}
{"id": "folio_validation_422", "nl": "Neapolitan Chronicles is a book published by New Vessel Press.", "fol": "(IsBook(Neapolitanchronicles) & PublishedByPublisher(Neapolitanchronicles,Newvesselpress))", "prediction": ["all x.(NeapolitanChronicles(x) -> PublishedByNewVesselPress(x))", "all x y.((NeapolitanChronicles(x) & NewVesselPress(y)) -> PublishedBy(x,y))", "All x.(NeapolitanChronicles(x) -> PublishedByNewVesselPress(x))", "NeapolitanChronicles(n) -> PublishedByNewVesselPress(n))", "all x.(NeapolitanChronicles(x) -> PublishedByNewVesselPress(x))", "(NewVesselPress(NeapolitanChronicles) & PublishedBy(NeapolitanChronicles))", "(Book(NeapolitanChronicles) & PublishedByNewVesselPress(NeapolitanChronicles))", "NeapolitanChronicles(n) & PublishedByNewVesselPress(n))", "all x y.((NeapolitanChronicles(x) & NewVesselPress(y)) -> BookPublishedBy(x,y))", "NeapolitanChronicles(x) -> PublishedByNewVesselPress(x))", "(PublishedByNewVesselPress(NeapolitanChronicles) & NewVesselPress(NeapolitanChronicles))", "(PublishedByNewVesselPress(NeapolitanChronicles) & NeapolitanChronicles(NeapolitanChronicles))", "NeapolitanChronicles(x) & PublishedByNewVesselPress(x))", "(NewVesselPress(NeapolitanChronicles) & PublishedBy(NeapolitanChronicles,NewVesselPress))", "NeapolitanChronicles(n) & PublishedByNewVesselPress(n) & PublishedByNewVesselPress(n))", "all x.(NeapolitanChronicles(x) -> NewVesselPress(x))"]}
{"id": "folio_validation_423", "nl": "Neapolitan Chronicles was translated from Italian.", "fol": "TranslatedFromLanguage(Neapolitanchronicles,Italian)", "prediction": ["all x.(NeapolitanChronicles(x) -> TranslatedFromItalian(x))", "all x y.((NeapolitanChronicle(x) & Italian(y)) -> TranslatedFrom(x,y))", "all x y.((NeapolitanChronicles(x) & Italian(y)) -> TranslatedFrom(x,y))", "all x y z.((NeapolitanChronicle(x) & Italian(y) & Italian(z)) -> TranslatedFrom(x,y,z))", "(NeapolitanChronicles(n) & TranslatedFromItalian(n))", "All x.(NeapolitanChronicles(x) -> TranslatedFromItalian(x))", "all x y z.((NeapolitanChronicles(x) & Italian(y) & Italian(z)) -> TranslatedFrom(x,y,z))", "(NeapolitanChronicles(Neapolitan) & TranslatedFromItalian(Neapolitan))", "all x.(NeapolitanChronicle(x) -> TranslatedFromItalian(x))", "All x y.((NeapolitanChronicle(x) & Italian(y)) -> TranslatedFrom(x,y))", "all x.((NeapolitanChronicles(x) & TranslatedFromItalian(x)) -> NeapolitanChronicles(x))", "(TranslatedFromItalian(neapolitanChronicles) & TranslatedFromItalian(neapolitanChronicles))", "all x.((NeapolitanChronicles(x) & TranslatedFromItalian(x)) -> TranslatedFromItalian(x))", "all x.(NeapolitanChronicles(x) -> TranslatedFromItalian(x))", "all x y.((NeapolitanChronicle(x) & Italian(y)) -> Translated(x,y))", "all x y.((NeapolitanChronicles(x) & Italian(y)) -> Translated(x,y))"]}
{"id": "folio_validation_424", "nl": "Palace of Flies is a book published by New Vessel Press.", "fol": "(IsBook(Palaceofflies) & PublishedByPublisher(Palaceofflies,Newvesselpress))", "prediction": ["all x.((Book(x) & PublishedByNewVesselPress(x)) -> PalaceOfFlies(x))", "all x.(PalaceOfFlies(x) -> PublishedByNewVesselPress(x))", "all x.((Book(x) & NewVesselPress(x)) -> PalaceOfFlies(x))", "all x.(PalaceOfFlies(x) -> PublishedByNewVesselPress(x))", "All x.(PalaceOfFlies(x) -> PublishedByNewVesselPress(x))", "all x y.((Book(x) & PalaceOfFlies(x) & NewVesselPress(y)) -> PublishedBy(x,y))", "all x y.((Book(x) & NewVesselPress(y)) -> PalaceOfFlies(x))", "All x.((Book(x) & PublishedByNewVesselPress(x)) -> PalaceOfFlies(x))", "all x y.((PalaceOfFlies(x) & NewVesselPress(y)) -> PublishedBy(x,y))", "all x.(PalaceOfFlies(x) -> (PublishedByNewVesselPress(x) & PublishedByNewVesselPress(x)))", "all x y.((Book(x) & PalaceOfFlies(x)) -> PublishedByNewVesselPress(x))", "all x.(PalaceOfFlies(x) -> (PublishedByNewVesselPress(x) & PublishedByNewVesselPress(x)))", "all x y.((Book(x) & NewVesselPress(y)) -> PalaceOfFlies(x,y))", "all x y.((Book(x) & PalaceOfFlies(x)) -> PublishedByNewVesselPress(y))", "All x.(PalaceOfFlies(x) -> PublishedByNewVesselPress(x))", "all x.(PalmOfFlies(x) -> PublishedByNewVesselPress(x))"]}
{"id": "folio_validation_425", "nl": "Neapolitan Chronicles is an English book.", "fol": "(IsBook(Neapolitanchronicles) & IsInLanguage(Neapolitanchronicles,English))", "prediction": ["all x.(NeapolitanChronicles(x) -> EnglishBook(x))", "All x.(NeapolitanChronicles(x) -> EnglishBook(x))", "NeapolitanChronicles(x) -> EnglishBook(x))", "NeapolitanChronicles(x) & EnglishBook(x))", "(EnglishBook(NeapolitanChronicles) | EnglishBook(NeapolitanChronicles)))", "(EnglishBook(NeapolitanChronicles) & NeapolitanChronicles(NeapolitanChronicles))", "(EnglishBook(NeapolitanChronicles) & -EnglishBook(NeapolitanChronicles))", "(EnglishBook(NeapolitanChronicles) & Book(NeapolitanChronicles))", "(EnglishBook(NeapolitanChronicles) & Contains(NeapolitanChronicles))", "(EnglishBook(NeapolitanChronicles) & NeapolitanChronicles(Neapolitan))", "NeapolitanChronicles(n) -> EnglishBook(n))", "all x.((NeapolitanChronicles(x) & EnglishBook(x)) -> NeapolitanChronicles(x))", "(EnglishBook(NeapolitanChronicles) & -EnglishBook(NeapolitanChronicles) & -EnglishBook(NeapolitanChronicles))", "(EnglishBook(NeapolitanChronicles) & Contains(NeapolitanChronicles) & Contains(NeapolitanChronicles))", "(EnglishBook(NeapolitanChronicles) & NeapolitanChronicle(NeapolitanChronicles))", "NeapolitanChronicles(n) & EnglishBook(n))"]}
{"id": "folio_validation_426", "nl": "Harry Potter was published by New Vessel Press.", "fol": "PublishedByPublisher(Harrrypotter,Newvesselpress)", "prediction": ["all x.(HarryPotter(x) -> PublishedByNewVesselPress(x))", "All x.(HarryPotter(x) -> PublishedByNewVesselPress(x))", "all x y.((HarryPotter(x) & NewVesselPress(y)) -> PublishedBy(x,y))", "All x y.((HarryPotter(x) & NewVesselPress(y)) -> PublishedBy(x,y))", "all x.(HarryPotter(x) -> NewVesselPress(x))", "all x y z.((HarryPotter(x) & NewVesselPress(y) & NewVesselPress(z)) -> PublishedBy(x,y,z))", "Harry Potter was published by NewVesselPress.", "all x y.((Harry Potter(x) & NewVesselPress(y)) -> PublishedBy(x,y))", "All x.(HarryPotter(x) -> NewVesselPress(x))", "all x y z.((HarryPotter(x) & NewVesselPress(y) & Publisher(z)) -> PublishedBy(x,y,z))", "(PublishedByNewVesselPress(HarryPotter) & NewVesselPress(HarryPotter))", "(NewVesselPress(HarryPotter) & PublishedBy(HarryPotter))", "all x y z.((HarryPotter(x) & NewVesselPress(y) & Press(z)) -> PublishedBy(x,y,z))", "all x y z.((HarryPotter(x) & NewVesselPress(y) & NewVesselPress(z)) -> PublishedBy(x,y))", "all x.(HarryPotter(x) -> PublishedByNewVesselPress(x))", "all x y.((HarryPotter(x) & NewVesselPress(y)) -> PublicatedBy(x,y))"]}
{"id": "folio_validation_427", "nl": "Palace of Flies was translated from Italian.", "fol": "TranslatedFromLanguage(Palaceofflies,Italian)", "prediction": ["all x.(PalaceOfFlies(x) -> TranslatedFromItalian(x))", "all x y.((PalaceOfFlies(x) & Italian(y)) -> TranslatedFrom(x,y))", "All x.(PalaceOfFlies(x) -> TranslatedFromItalian(x))", "All x y.((PalaceOfFlies(x) & Italian(y)) -> TranslatedFrom(x,y))", "all x y.((PalastOfFlies(x) & Italian(y)) -> TranslatedFrom(x,y))", "all x.(PalastOfFlies(x) -> TranslatedFromItalian(x))", "all x.(PalaceOfFlies(x) -> TranslatedFromItalian(x))", "All x.(PalastOfFlies(x) -> TranslatedFromItalian(x))", "PalaceOfFlies(PalaceOfFlies) -> TranslatedFromItalian(PalaceOfFlies))", "PalaceOfFlies(PalaceOfFlies) -> TranslatedFromItalian(PalaceOfFlies(PalaceOfFlies))", "all x y.((PalaceOfFlies(x) & ItalianItalian(y)) -> TranslatedFrom(x,y))", "(TranslatedFromItalian(PalaceOfFlies) -> TranslatedFromItalian(PalaceOfFlies))", "All x.(PalaceOfFlies(x) -> TranslatedFromItalian(x))", "(TranslatedFromItalian(PalaceOfFlies))", "(TranslatedFromItalian(PalaceOfFlies) -> TranslatedFromItalian(PalaceOfFlies))", "all x y.((PalaceOfFlies(x) & Italian(y)) -> Translated(x,y))"]}
{"id": "folio_validation_428", "nl": "If people own a large desktop monitor at their home, then they work regularly and often at home.", "fol": "all x.(OwnsLargeDesktopMonitor(x) -> WorksRegularlyAtHome(x))", "prediction": ["all x.((Person(x) & OwnsLargeDesktopMonitor(x)) -> (WorksRegularly(x) & WorksOftenAtHome(x)))", "all x.((Person(x) & OwnsLargeDesktopMonitor(x)) -> (WorkRegularly(x) & WorkOftenAtHome(x)))", "all x.(OwnsLargeDesktopMonitor(x) -> (WorksRegularly(x) & WorksOftenAtHome(x)))", "all x.((Person(x) & LargeDesktopMonitor(x)) -> (WorkRegularly(x) & WorkOftenAtHome(x)))", "all x.(OwnsLargeDesktopMonitorAtHome(x) -> (WorkRegularly(x) & WorkOftenAtHome(x)))", "all x.((Person(x) & OwnsLargeDesktopMonitor(x)) -> WorksRegularlyAndOftenAtHome(x))", "all x.(OwnsLargeDesktopMonitorAtHome(x) -> (WorksRegularly(x) & WorksOftenAtHome(x)))", "all x.(OwnsLargeDesktopMonitor(x) -> (WorkRegularly(x) & WorkOftenAtHome(x)))", "all x.(OwnsLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))", "all x.((Person(x) & OwnsLargeDesktopMonitor(x)) -> WorksRegularlyAndOftenAtHome(x))", "all x.((Person(x) & OwnsLargeDesktopMonitor(x)) -> WorkRegularlyAndOftenAtHome(x))", "all x.((Person(x) & OwnsLargeDesktopMonitor(x)) -> WorkRegularlyAndOftenAtHome(x))", "all x.((Person(x) & OwnsLargeDesktopMonitorAtHome(x)) -> WorksRegularlyAndOftenAtHome(x))", "all x.((OwnsLargeDesktopMonitor(x) & AtHome(x)) -> WorksRegularlyAndOftenAtHome(x))", "all x.((OwnsLargeDesktopMonitor(x) & AtHome(x)) -> WorkRegularlyAndOftenAtHome(x))", "all x.((Person(x) & OwnsLargeDesktopMonitorAtHome(x)) -> WorksRegularlyAndOftenAtHome(x))"]}
{"id": "folio_validation_429", "nl": "All people who have a fully stocked and impressive home office are people who own a large desktop monitor at their home.", "fol": "all x.(HasImpressiveHomeOffice(x) -> OwnsLargeDesktopMonitor(x))", "prediction": ["all x.((Person(x) & FullyStockedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.((Person(x) & FullySpaciousHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.((Person(x) & FullyStampedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.((Person(x) & FullyStandardizedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.((Person(x) & FullySstockedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.((Person(x) & FullyStokedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.((Person(x) & FullyStockedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitorAtHome(x))", "all x.((Person(x) & FullyStockedAndImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.((Person(x) & FullyStockedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnerOfLargeDesktopMonitor(x))", "all x.((Person(x) & FullyStockedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnersLargeDesktopMonitor(x))", "all x.((Person(x) & FullyStockagedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.((Person(x) & FullySpreadHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.((Person(x) & FullySpaciousHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitorAtHome(x))", "all x.((Person(x) & FullyStandardHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "all x.((Person(x) & FullyStampedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitorAtHome(x))", "all x.((Person(x) & FullyShoppedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))"]}
{"id": "folio_validation_430", "nl": "All people who work regularly and often at home spend their free time tidying and organizing the spaces in their homes.", "fol": "all x.(WorksRegularlyAtHome(x) -> TidiesAndOrganizesHome(x))", "prediction": ["all x.((WorksRegularly(x) & OftenAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "all x.((WorksRegularly(x) & OftenAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpacesInHomes(x))", "all x.((Person(x) & WorksRegularly(x) & OftenAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "all x.(WorksRegularlyAndOftenAtHome(x) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "all x.((WorksRegularly(x) & OftenAtHome(x)) -> SpendsFreeTimeTiffiningAndOrganizingSpaces(x))", "all x.((WorksRegularly(x) & ManyAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "all x.((WorksRegularly(x) & WorksAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "all x.((Person(x) & WorksRegularly(x) & OftenAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpacesInHomes(x))", "all x.((WorksRegularly(x) & WorksOftenAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "all x.((WorksRegularly(x) & OftenAtHome(x)) -> SpendsFreeTimeTiethingAndOrganizingSpaces(x))", "all x.((WorksRegularly(x) & OftenAtHome(x)) -> SpendsFreeTimeTiffiningAndOrganizingSpacesInHomes(x))", "all x.(WorksRegularlyAndOftenAtHome(x) -> SpendsFreeTimeTidyingAndOrganizingSpacesInHomes(x))", "all x.((Person(x) & WorksRegularly(x) & OftenAtHome(x)) -> SpendsFreeTimeTiffiningAndOrganizingSpaces(x))", "all x.((WorksRegularly(x) & ManyAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpacesInHomes(x))", "all x y.((WorksRegularly(x) & OftenAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(y))", "all x.((Person(x) & WorksRegularly(x) & ManyAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))"]}
{"id": "folio_validation_431", "nl": "All people who work regularly and often at home visit the office supply store regularly.", "fol": "all x.(WorksRegularlyAtHome(x) -> VisitsOfficeSupplyStore(x))", "prediction": ["all x.((WorksRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.((Person(x) & WorksRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.(WorksRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.(WorksRegularlyAndOftenAtHome(x) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.((People(x) & WorksRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.((WorksRegularly(x) & ManyAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.((WorksRegularly(x) & WorksAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.((Personnel(x) & WorksRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.((Person(x) & WorkRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.((WorksRegularly(x) & FrequentlyAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.((Person(x) & WorksRegularly(x) & ManyAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.(WorksRegularlyAndAtHome(x) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.((Person(x) & WorksRegularly(x) & WorksAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.(WorksRegularlyAndFrequentlyAtHome(x) -> VisitsOfficeSupplyStoreRegularly(x))", "all x y.((Person(x) & WorkRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "all x.((WorksRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStore(x))"]}
{"id": "folio_validation_432", "nl": "If people spend their free time tidying and organizing the spaces in their home, then they do not go to bed late and wake up every day after noon. ", "fol": "all x.(TidiesAndOrganizesHome(x) -> -GoesToBedLate(x))", "prediction": ["all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLast(x) & WakesUpAfterMorning(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLast(x) & WakesUpEveryDayAfterMorning(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLate(x) & WakesUpEveryDayAfterMorning(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLater(x) & WakesUpAfterMorning(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLate(x) & WakesUpAfterMorning(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLater(x) & WakesUpEveryDayAfterMorning(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLast(x) & WakesUpEveryDayAfterPaint(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLast(x) & WakesUpAfterMoon(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLast(x) & WakesUpAfterMeal(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLast(x) & WakesUpEveryDayAfterMeal(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoToBedLast(x) & WakeUpEveryDayAfterMorning(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLast(x) & WakesUpEveryDayAfterMoon(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingSpaces(x) & OrganizesSpaces(x)) -> -(GoesToBedLast(x) & WakesUpAfterMorning(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingSpaces(x) & OrganizesSpaces(x)) -> -(GoesToBedLast(x) & WakesUpEveryDayAfterMorning(x)))", "all x y.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x) & Home(y)) -> -(GoesToBedLast(x) & WakesUpAfterMorning(x)))", "all x.((Person(x) & SpendsFreeTimeTidyingSpaces(x) & OrganizesSpaces(x)) -> -(GoesToBedLast(x) & WakesUpAfterMeal(x)))"]}
{"id": "folio_validation_433", "nl": "Remy either both goes to bed late and wakes up every day after noon and spends their free time tidying and organizing the spaces in their home, or they do not go to bed late and wake up every day after noon nor spend their free time tidying and organizing the spaces in their home. ", "fol": "((GoesToBedLate(Remy) & TidiesAndOrganizesHome(Remy) & -(-GoesToBedLate(Remy) & -TidiesAndOrganizesHome(Remy))) | (-(GoesToBedLate(Remy) & TidiesAndOrganizesHome(Remy)) & -GoesToBedLate(Remy) & -TidiesAndOrganizesHome(Remy)))", "prediction": ["all x.(Remy(x) -> ((GoesToBedLast(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) | (-GoesToBedLast(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)))))", "(all x.(Remy(x) -> (GoesToBedLast(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoesToBedLast(x) & WakesUpAfterMorning(x) & -SpoilsFreeTimeTidyingAndOrganizingSpaces(x))))", "all x.(Remy(x) -> ((GoesToBedLast(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) | (-GoesToBedLast(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))))", "(all x.(Remy(x) -> (GoesToBedLast(x) & WakesUpAfterPaint(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoesToBedLast(x) & WakesUpAfterPaint(x) & -SpoilsFreeTimeTidyingAndOrganizingSpaces(x))))", "(all x.(Remy(x) -> (GoesToBedLast(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoesToBedLast(x) & WakesUpAfterMorning(x) & -SponsorsFreeTimeTidyingAndOrganizingSpaces(x))))", "(all x.(Remy(x) -> (GoesToBedLast(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTiffiningAndOrganizingSpaces(x))) | (-GoesToBedLast(x) & WakesUpAfterMorning(x) & -SpoilsFreeTimeTiffiningAndOrganizingSpaces(x))))", "(all x.(Remy(x) -> (GoesToBedLast(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoesToBedLast(x) & WakesUpAfterMorning(x) & -SpreadsFreeTimeTidyingAndOrganizingSpaces(x))))", "(all x.(Remy(x) -> (GoesToBedLast(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingSpaces(x))) | (-GoesToBedLast(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingSpaces(x) & SpendsFreeTimeOrganizingSpaces(x))))", "(all x.(Remy(x) -> (GoesToBedLast(x) & WakesUpAfterPaint(x) & SpendsFreeTimeTiffiningAndOrganizingSpaces(x))) | (-GoesToBedLast(x) & WakesUpAfterPaint(x) & -SpoilsFreeTimeTiffiningAndOrganizingSpaces(x))))", "(all x.(Remy(x) -> (GoesToBedLay(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoesToBedLay(x) & WakesUpAfterMorning(x) & -SpoilsFreeTimeTidyingAndOrganizingSpaces(x))))", "(all x.(Remy(x) -> (GoesToBedLast(x) & WakesUpAfterPaint(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoesToBedLast(x) & WakesUpAfterPaint(x) & -SpreadsFreeTimeTidyingAndOrganizingSpaces(x))))", "(all x.(Remy(x) -> (GoesToBedLay(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoesToBedLay(x) & WakesUpAfterMorning(x) & -SpoilsFreeTimeTidyingAndOrganizingSpaces(x)))))", "(all x.(Remy(x) -> (GoesToBedLay(x) & WakesUpAfterPaint(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoesToBedLay(x) & WakesUpAfterPaint(x) & -SpoilsFreeTimeTidyingAndOrganizingSpaces(x)))))", "(all x.(Remy(x) -> (GoesToBedLast(x) & WakesUpAfterMoon(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoesToBedLast(x) & WakesUpAfterMoon(x) & -SpoilsFreeTimeTidyingAndOrganizingSpaces(x))))", "(all x.(Remy(x) -> (GoesToBedLay(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoesToBedLay(x) & WakesUpAfterMorning(x) & -SponsorsFreeTimeTidyingAndOrganizingSpaces(x)))))", "(all x.(Remy(x) -> (GoesToBedLast(x) & WakesUpAfterMoon(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoesToBedLast(x) & WakesUpAfterMoon(x) & -SpoilsFreeTimeTidyingAndOrganizingSpaces(x)))))"]}
{"id": "folio_validation_434", "nl": "Remy visits the office supply store regularly.", "fol": "VisitsOfficeSupplyStore(Remy)", "prediction": ["all x y.((Remy(x) & OfficeSupplyStore(y)) -> VisitsRegularly(x,y))", "all x y.((Remy(x) & OfficeSupplyStore(y) & VisitsRegularly(x,y)) -> Visits(x,y))", "all x.(Remy(x) -> VisitsOfficeSupplyStore(x))", "(VisitsOfficeSupplyStore(Remy) & Regularly(Remy))", "all x.(Remy(x) -> VisitsOfficeSupplyStoreRegularly(x))", "all x y.((Remy(x) & OfficeSupplyStore(y)) -> VisitsRegularly(x,y))", "all x y.((Remy(x) & OfficeSupplyStore(y)) -> Visits(x,y))", "all x y.((Remy(x) & OfficeSuppliesStore(y)) -> VisitsRegularly(x,y))", "all x y.((Remy(x) & OfficeSupplyStore(y) & Visits(x,y)) -> VisitsRegularly(x,y))", "all x y.((Remy(x) & OfficeSupplyStore(y)) -> VisitsRapidly(x,y))", "(Remy visitsOfficeSupplyStore(Remy) & Regularly(Remy))", "all x y.((Remy(x) & OfficeSupplyStore(y) & Visits(x,y)) -> Regular(x))", "all x y.((Remy(x) & OfficeSupplyStore(y) & VisitsRegularly(x,y)) -> VisitsRemy(x,y))", "(VisitingOfficeSupplyStore(Remy) & Regularly(Remy))", "all x y.((Remy(x) & OfficeSupplyStore(y) & VisitsRegularly(x,y)) -> VisitsRegularly(x,y))", "Remy visitsOfficeSupplyStoreRegularly(Remy)"]}
{"id": "folio_validation_435", "nl": "Remy has a fully stocked and impressive home office and also visits the office supply store regularly.", "fol": "(HasImpressiveHomeOffice(Remy) & VisitsOfficeSupplyStore(Remy))", "prediction": ["all x.(Remy(x) -> (FullyStandardHomeOffice(x) & ImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "all x.(Remy(x) -> (FullyStokedHomeOffice(x) & ImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "all x y.((Remy(x) & OfficeSupplyStore(y)) -> (FullyStandardHomeOffice(x) & ImpressiveHomeOffice(x) & VisitsRegularly(x,y)))", "all x y.((Remy(x) & OfficeSupplyStore(y)) -> (FullyStocked(x) & ImpressiveHomeOffice(x) & VisitsRegularly(x,y)))", "all x.(Remy(x) -> (HasFullyStockedAndImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "all x.(Remy(x) -> (HasFullyStockedAndImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "all x y.((Remy(x) & OfficeSupplyStore(y)) -> (FullyStandardHomeOffice(x) & ImpressiveHomeOffice(x) & Visits(x,y)))", "all x y.((Remy(x) & OfficeSupplyStore(y)) -> (FullyStokedHomeOffice(x) & ImpressiveHomeOffice(x) & VisitsRegularly(x,y)))", "all x y.((Remy(x) & OfficeSupplyStore(y)) -> (FullyStayed(x) & ImpressiveHomeOffice(x) & VisitsRegularly(x,y)))", "all x y.((Remy(x) & OfficeSupplyStore(y)) -> (FullyStoked(x) & ImpressiveHomeOffice(x) & VisitsRegularly(x,y)))", "all x.(Remy(x) -> (FullyStockedAndImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "all x y.((Remy(x) & OfficeSupplyStore(y)) -> (FullySstocked(x) & ImpressiveHomeOffice(x) & VisitsRegularly(x,y)))", "all x y.((Remy(x) & OfficeSupplyStore(y)) -> (FullyStamped(x) & ImpressiveHomeOffice(x) & VisitsRegularly(x,y)))", "all x y.((Remy(x) & OfficeSupplyStore(y)) -> (FullyStocked(x) & ImpressiveHomeOffice(x) & Visits(x,y)))", "all x.(Remy(x) -> (FullyStockedAndImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "all x y.((Remy(x) & OfficeSupplyStore(y)) -> (FullyStamped(x) & ImpressiveHomeOffice(x) & Visits(x,y)))"]}
{"id": "folio_validation_436", "nl": "If Remy either goes to bed late and wakes up every day after noon or visits the office supply store regularly, then Remy neither spends their free time tidying and organizing the spaces in their home nor has a fully stocked and impressive home office.", "fol": "((GoesToBedLate(Remy) | VisitsOfficeSupplyStore(Remy)) -> -(TidiesAndOrganizesHome(Remy) | HasImpressiveHomeOffice(Remy)))", "prediction": ["all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullySaturatedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullySaturatedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullyStockedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullySstockedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLate(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullySaturatedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLast(x) & WakesUpAfterMorning(x) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullySaturatedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -HasFullySaturatedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStoreRegularly(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullySaturatedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullyStockedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullyStokedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullySstockedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLate(x) & WakesUpAfterMorning(x) | VisitsOfficeSupplyStoreRegularly(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullySaturatedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -HasFullySstockedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStoreRegularly(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullyStockedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStoreRegularly(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullySaturatedAndImpressiveHomeOffice(x)))", "all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMorning(x)) | VisitsOfficeSupplyStoreRegularly(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -FullyStockedAndImpressiveHomeOffice(x)))"]}
{"id": "folio_validation_437", "nl": "All humans are mortal.", "fol": "all x.(IsHuman(x) -> IsMortal(x))", "prediction": ["all x.(Human(x) -> Mortal(x))", "all x.exists y.(Human(x) & Mortal(y))", "all x y.((Human(x) & Mortal(y)) -> Mortal(x))", "all x.(Habitat(x) -> Mortal(x))", "(all x.(Human(x) -> Mortal(x)))", "exists x.(Human(x) & Mortal(x))", "all x y.((Human(x) & Mortal(y)) -> Mortal(x,y))", "all x y.((Human(x) & Human(y)) -> Mortal(x))", "all x.(Human(x) -> Mortal(x))", "(All x.(Human(x) -> Mortal(x)))", "all x y.((Human(x) & Mortal(y)) -> Human(x))", "all x y.((Human(x) & Human(y)) -> Mortal(x,y))", "all x.(Human(x) -> Morbid(x))", "All x.(Human(x) -> Mortal(x))", "-all x.(Human(x) -> Mortal(x))", "all x y.((Human(x) & Mortal(y)) -> Is(x,y))"]}
{"id": "folio_validation_438", "nl": "All Greeks are humans.", "fol": "all x.(IsGreek(x) -> IsHuman(x))", "prediction": ["all x.(Greek(x) -> Human(x))", "all x.(Grief(x) -> Human(x))", "all x.((Greek(x) & Human(x)) -> Human(x))", "all x y.((Greek(x) & Human(y)) -> Human(x))", "all x.(Greek(x) -> Human(x))", "all x.(Graeco(x) -> Human(x))", "all x.(Gray(x) -> Human(x))", "all x.exists y.(Greek(x) & Human(y))", "all x y.((Greek(x) & Human(y)) -> Human(x,y))", "all x.((Greek(x) & Human(x)) -> Is(x,y))", "all x y.((Greek(x) & Human(y)) -> Is(x,y))", "all x.((Greek(x) & Human(x)) -> (Human(x) | Human(x)))", "all x.(Griec(x) -> Human(x))", "(all x.(Greek(x) -> Human(x))", "(all x.(Greek(x) -> Human(x)))", "all x.((Greek(x) & Human(x)) -> AllOf(x,y))"]}
{"id": "folio_validation_439", "nl": "Some Greeks are mortal.", "fol": "exists x.(IsGreek(x) & IsMortal(x))", "prediction": ["exists x.(Greek(x) & Mortal(x))", "exists x.(Grief(x) & Mortal(x))", "exists x.(Gray(x) & Mortal(x))", "exists x.(Griec(x) & Mortal(x))", "exists x.(Greek(x) & Morbid(x))", "exists x.(Graeco(x) & Mortal(x))", "exists x y.(Greek(x) & Grief(y) & Mortal(y))", "exists x.(Graetian(x) & Mortal(x))", "exists x.(Grandparent(x) & Mortal(x))", "exists x y.(Greek(x) & Grief(y) & Mortal(x))", "exists x y.(Greek(x) & Mortal(y))", "exists x.(Griek(x) & Mortal(x))", "exists x.(Greek(x) & Mortal(x))", "exists x.(Grieco(x) & Mortal(x))", "exists x.(Griechen(x) & Mortal(x))", "exist x.(Greek(x) & Mortal(x))"]}
{"id": "folio_validation_440", "nl": "No students who work in the library are from the computer science department. ", "fol": "all x.(WorksInLibrary(x) -> -IsComputerScienceStudent(x))", "prediction": ["all x.((Student(x) & WorksInLibrary(x)) -> -ComputerScienceDepartment(x))", "all x.((Student(x) & WorkInLibrary(x)) -> -ComputerScienceDepartment(x))", "all x.((Student(x) & WorksInLibrary(x)) -> ComputerScienceDepartment(x))", "all x.((Student(x) & WorksInLibrary(x)) -> NoComputerScienceDepartment(x))", "all x.((Student(x) & WorksInLibrary(x)) -> -ComputerScientificDepartment(x))", "all x.((Student(x) & WorksInLibrary(x)) -> ComputerScientificDepartment(x))", "all x.((Student(x) & WorksInLibrary(x)) -> (ComputerScienceDepartment(x) & -ComputerScienceDepartment(x)))", "-exists x.(Student(x) & WorksInLibrary(x) & ComputerScienceDepartment(x))", "all x.(WorksInLibrary(x) -> -ComputerScienceDepartment(x))", "-exists x.(Student(x) & WorksInLibrary(x) & FromComputerScienceDepartment(x))", "all x.((Student(x) & WorksInLibrary(x)) -> -FromComputerScienceDepartment(x))", "all x y.((Student(x) & WorkInLibrary(x)) -> -ComputerScienceDepartment(y))", "all x.((Student(x) & WorksInLibrary(x)) -> (ComputerScienceDepartment(x) | ComputerScienceDepartment(x)))", "all x.((Student(x) & WorksInLibrary(x)) -> -(ComputerScienceDepartment(x) | ComputerScienceDepartment(x)))", "-exists x.(Student(x) & WorksInLibrary(x) & -ComputerScienceDepartment(x))", "all x y.((Student(x) & Library(y) & WorksIn(x,y)) -> ComputerScienceDepartment(x))"]}
{"id": "folio_validation_441", "nl": "All students who have part-time jobs offered by the university are students who work in the library. ", "fol": "all x.(HasPartTimeJob(x) -> WorksInLibrary(x))", "prediction": ["all x.((Student(x) & PartTimeJob(x) & OfferedByUniversity(x)) -> WorksInLibrary(x))", "all x.((Student(x) & PartTimeJobOfferedByUniversity(x)) -> WorksInLibrary(x))", "all x.((Student(x) & PartTimeJob(x) & OfferedByUniversity(x)) -> WorkInLibrary(x))", "all x.((Student(x) & PartTimeJobsOfferedByUniversity(x)) -> WorksInLibrary(x))", "all x.((Student(x) & PartTimeJobOfferedByUniversity(x)) -> WorkInLibrary(x))", "all x.((Student(x) & PartTimeJob(x) & OfferedByUniversity(x)) -> WorksInLibrary(x))", "all x.((Student(x) & PartTimeJobsOfferedByUniversity(x)) -> WorkInLibrary(x))", "all x.((Student(x) & PartTimeJob(x) & OfferedByUniversity(x)) -> WorkInLibrary(x))", "all x.((Student(x) & PartTimeJobOffered(x)) -> WorksInLibrary(x))", "all x.((Student(x) & PartTimeJobOffered(x)) -> WorkInLibrary(x))", "all x.((Student(x) & PartTimeJobs(x) & OfferedByUniversity(x)) -> WorksInLibrary(x))", "all x.((Student(x) & PartTimeJobsOffered(x)) -> WorksInLibrary(x))", "all x.((Student(x) & HasPartTimeJob(x) & OfferedByUniversity(x)) -> WorksInLibrary(x))", "all x.((Student(x) & HasPartTimeJobsOfferedByUniversity(x)) -> WorksInLibrary(x))", "all x.((Student(x) & PartTimeJob(x)) -> WorksInLibrary(x))", "all x.((Student(x) & PartTimeJobs(x) & OfferedByUniversity(x)) -> WorkInLibrary(x))"]}
{"id": "folio_validation_442", "nl": "All students who take the database course are from the computer science department. ", "fol": "all x.(TakesDatabaseCourse(x) -> IsComputerScienceStudent(x))", "prediction": ["all x.((Student(x) & TakesDatabaseCourse(x)) -> ComputerScienceDepartment(x))", "all x.(TakesDatabaseCourse(x) -> ComputerScienceDepartment(x))", "all x.((Student(x) & TakesDatabaseCourses(x)) -> ComputerScienceDepartment(x))", "all x.((Student(x) & TakesDatabaseCourse(x)) -> ComputerScientificDepartment(x))", "all x.((Student(x) & TakesDatabaseCourse(x)) -> FromComputerScienceDepartment(x))", "all x.(TakesDatabaseCourses(x) -> ComputerScienceDepartment(x))", "all x.((Student(x) & TakesDatabaseCourses(x)) -> ComputerScientificDepartment(x))", "all x.((Student(x) & TakesDatabaseCourses(x)) -> FromComputerScienceDepartment(x))", "all x.(TakesDatabaseCourse(x) -> ComputerScientificDepartment(x))", "all x.(TakesDatabaseCourse(x) -> FromComputerScienceDepartment(x))", "all x y.((Student(x) & TakesDatabaseCourse(x)) -> ComputerScienceDepartment(y))", "all x.(TakesDatabaseCourses(x) -> ComputerScientificDepartment(x))", "all x.((Student(x) & TakesDatabaseCourse(x)) -> ComesFromComputerScienceDepartment(x))", "all x.(TakesDatabaseCourses(x) -> FromComputerScienceDepartment(x))", "all x y.((Student(x) & TakesDatabaseCourse(x,y)) -> ComputerScienceDepartment(y))", "all x y.((Student(x) & TakesDatabaseCourse(x)) -> ComputerScientificDepartment(y))"]}
{"id": "folio_validation_443", "nl": "All students instructed by professor David are taking the database course. ", "fol": "all x.(InstructedByProfessorDavid(x) -> TakesDatabaseCourse(x))", "prediction": ["all x.((Student(x) & InstructedByProfessorDavid(x)) -> TakesDatabaseCourse(x))", "all x.((Student(x) & InstructedByProfessorDavid(x)) -> TakesDatabaseCourses(x))", "all x.((Student(x) & InstructedByProfessorDavid(x)) -> DatabaseCourse(x))", "all x.((Student(x) & InstructedByProfessorDavid(x)) -> TakesDBCourses(x))", "all x y.((Student(x) & ProfessorDavid(y)) -> TakesDatabaseCourse(x,y))", "all x.((Student(x) & InstructedByProfessorDavid(x)) -> DatabaseCourses(x))", "all x y.((Student(x) & ProfessorDavid(y)) -> TakesDatabaseCourses(x,y))", "all x.(InstructedByProfessorDavid(x) -> TakesDatabaseCourse(x))", "all x y.((Student(x) & ProfessorDavid(y) & InstructedBy(x,y)) -> TakesDatabaseCourse(x))", "all x.((Student(x) & InstructedByProfessorDavid(x)) -> TakesDatabaseCourse(x))", "all x y.((Student(x) & ProfessorDavid(y) & InstructedBy(x,y)) -> TakesDatabaseCourses(x))", "all x.((Student(x) & InstructedByProfessorDavid(x)) -> TakesBaseworkCourse(x))", "all x y.((Student(x) & ProfessorDavid(y) & InstructedBy(x,y)) -> TakesDatabaseCourse(x,y))", "all x.(InstructedByProfessorDavid(x) -> TakesDatabaseCourses(x))", "all x.((Student(x) & InstructedByProfessor(x,David)) -> TakesDatabaseCourse(x))", "all x.((Student(x) & InstructedByProfessorDavid(x)) -> TakesDatabaseCourses(x))"]}
{"id": "folio_validation_444", "nl": "All students working in the lab are instructed by professor David. ", "fol": "all x.(WorksInLab(x) -> InstructedByProfessorDavid(x))", "prediction": ["all x.((Student(x) & WorkingInLab(x)) -> InstructedByProfessorDavid(x))", "all x y.((Student(x) & Lab(y)) -> InstructedByProfessorDavid(x,y))", "all x.((Student(x) & WorksInLab(x)) -> InstructedByProfessorDavid(x))", "all x y.((Student(x) & Lab(y) & WorksIn(x,y)) -> InstructedByProfessorDavid(x))", "all x y.((Student(x) & Lab(y)) -> InstructedByProfessor(x,y))", "all x.(Student(x) -> InstructedByProfessorDavid(x))", "all x y z.((Student(x) & Lab(y) & Professor(z)) -> InstructedBy(x,y,z))", "all x y.((Student(x) & Lab(y) & WorksIn(x,y)) -> InstructedByProfessorDavid(x,y))", "all x.((Student(x) & WorkingInLab(x)) -> InstruedByProfessorDavid(x))", "all x.(WorkingInLab(x) -> InstructedByProfessorDavid(x))", "all x y.((Student(x) & Lab(y) & WorksIn(x,y)) -> InstructedByProfessor(x,y))", "all x.((Student(x) & WorksInLab(x)) -> InstruedByProfessorDavid(x))", "all x.((Student(x) & WorkingInLab(x)) -> InstructionByProfessorDavid(x))", "all x y.((Student(x) & Lab(y)) -> InstruedByProfessorDavid(x,y))", "all x.((Student(x) & WorksInLab(x)) -> InstructionByProfessorDavid(x))", "all x y z.((Student(x) & Lab(y) & Professor(z)) -> InstructedBy(x,z))"]}
{"id": "folio_validation_445", "nl": "James is a student working in the lab. ", "fol": "WorksInLab(James)", "prediction": ["all x.((Student(x) & WorkingInLab(x)) -> James(x))", "all x.(James(x) -> StudentWorkingInLab(x))", "all x y.((James(x) & Lab(y)) -> StudentWorkingIn(x,y))", "all x y.((Student(x) & Lab(y)) -> WorksIn(x,y))", "all x.((Student(x) & WorkingInLab(x)) -> JamesWorksInLab(x))", "all x.((Student(x) & WorksInLab(x)) -> JamesWorksInLab(x))", "all x.((Student(x) & WorksInLab(x)) -> James(x))", "all x y.((Student(x) & Lab(y)) -> WorkingIn(x,y))", "all x y.((James(x) & Lab(y)) -> StudentWorking(x,y))", "(Student(James) & WorksInLab(James))", "all x y.((James(x) & Lab(y)) -> WorksIn(x,y))", "all x y.((James(x) & Lab(y)) -> WorkingIn(x,y))", "(Student(James) & WorkingInLab(James))", "all x.((James(x) & Student(x)) -> WorkingInLab(x))", "all x.((James(x) & StudentWorkingInLab(x)) -> WorksInLab(x))", "all x.((James(x) & Student(x) & WorkingInLab(x)) -> WorkingInLab(x))"]}
{"id": "folio_validation_446", "nl": "Jack neither has a part-time job offered by the university nor works in the lab. ", "fol": "(-HasPartTimeJob(Jack) & -WorksInLab(Jack))", "prediction": ["all x.((Jack(x) & -PartTimeJobOfferedByUniversity(x) & -WorksInLab(x)) -> -PartTimeJobOfferedByUniversity(x))", "(-PartTimeJobOfferedByUniversity(Jack) & -WorksInLab(Jack))", "all x.(Jack(x) -> (-PartTimeJobOfferedByUniversity(x) & -WorksInLab(x)))", "all x y.((Jack(x) & University(y)) -> (-PartTimeJob(x,y) | WorksInLab(x,y)))", "all x.((Jack(x) & -PartTimeJobOfferedByUniversity(x) & -WorksInLab(x)) -> -WorksInLab(x))", "-(PartTimeJobOfferedByUniversity(Jack) & -WorksInLab(Jack))", "all x.((Jack(x) & -PartTimeJobOfferedByUniversity(x) & WorksInLab(x)) -> -PartTimeJobOfferedByUniversity(x))", "-exists x.(Jack(x) & -PartTimeJobOfferedByUniversity(x) & -WorksInLab(x))", "all x.((Jack(x) & -PartTimeJobOfferedByUniversity(x) & -WorksInLab(x)) -> -(Jack(x) & WorksInLab(x)))", "all x y.((Jack(x) & University(y)) -> (-PartTimeJobOffered(x,y) | WorksInLab(x,y)))", "all x.((Jack(x) & -PartTimeJobOfferedByUniversity(x)) -> WorksInLab(x))", "-(PartTimeJobOfferedByUniversity(Jack) | WorksInLab(Jack))", "-(HasPartTimeJob(Jack) | WorksInLab(Jack))", "all x.((Jack(x) & -PartTimeJobOfferedByUniversity(x)) | WorksInLab(x)) -> -PartTimeJobOfferedByUniversity(x))", "all x.((Jack(x) & -PartTimeJobOfferedByUniversity(x) & -WorksInLab(x)) -> -OfferedByUniversity(x))", "all x y.((Jack(x) & University(y)) -> (-PartTimeJobOffered(x,y) & -WorksInLab(x,y)))"]}
{"id": "folio_validation_447", "nl": "James has a part-time job offered by the university.", "fol": "HasPartTimeJob(James)", "prediction": ["all x.((Job(x) & PartTime(x)) -> OfferedByUniversity(x))", "all x.(Job(x) -> (OfferedByUniversity(x) & PartTime(x)))", "all x y.((Job(x) & University(y)) -> PartTimeOffered(x,y))", "all x y.((Job(x) & James(y)) -> OfferedByUniversity(y,x))", "all x.((Job(x) & James(x)) -> OfferedByUniversity(x))", "all x.((Job(x) & OfferedByUniversity(x)) -> JamesPartTime(x))", "all x y.((Job(x) & University(y)) -> PartTime(x,y))", "all x y.((Job(x) & James(y)) -> OfferedByUniversity(x,y))", "all x y z.((Job(x) & James(y) & University(z)) -> PartTimeOffered(y,z))", "all x y.((Job(x) & University(y)) -> OffersPartTime(x,y))", "all x y.((Job(x) & James) & University(y)) -> PartTimeOffered(x,y))", "all x.((Job(x) & PartTime(x) & OfferedByUniversity(x)) -> James(x))", "all x y.((Job(x) & University(y)) -> PartTimeOfferedBy(x,y))", "all x y.((Job(x) & University(y) & PartTime(x,y)) -> Offers(x,y))", "all x y.((Job(x) & University(y)) -> HasPartTime(x,y))", "all x.((Job(x) & PartTime(x) & OfferedByUniversity(x)) -> JamesHas(x,y))"]}
{"id": "folio_validation_448", "nl": "James does not have a part-time job offered by the university.", "fol": "-HasPartTimeJob(James)", "prediction": ["all x.(James(x) -> -PartTimeJobOfferedByUniversity(x))", "all x.((James(x) & -PartTimeJobOfferedByUniversity(x)) -> -PartTimeJobOfferedByUniversity(x))", "all x.((James(x) & -PartTimeJob(x)) -> -OfferedByUniversity(x))", "all x y.((James(x) & University(y)) -> -PartTimeJobOffered(x,y))", "all x y.((James(x) & University(y)) -> -PartTimeJob(x,y))", "all x.((James(x) & -PartTimeJobOfferedByUniversity(x)) -> -JobOfferedByUniversity(x))", "all x.((James(x) & -PartTimeJobOfferedByUniversity(x)) -> -OfferedByUniversity(x))", "all x.((James(x) & -OfferedPartTimeJob(x)) -> -OfferedPartTimeJob(x))", "all x.((Judge(x) & James(x)) -> -PartTimeJobOfferedByUniversity(x))", "all x.((James(x) & -PartTimeJobOfferedByUniversity(x)) -> -HasPartTimeJobOfferedByUniversity(x))", "all x.((James(x) & -OfferedPartTimeJob(x)) -> -OfferedByUniversity(x))", "all x.((James(x) & PartTimeJob(x)) -> -OfferedByUniversity(x))", "all x.((James(x) & -PartTimeJobOfferedByUniversity(x)) -> -HasJobOfferedByUniversity(x))", "all x.((James(x) & -PartTimeJobOffered(x)) -> -OfferedByUniversity(x))", "all x y.((James(x) & University(y)) -> -PartTimeJobOfferedBy(x,y))", "all x.((Job(x) & James(x)) -> -PartTimeOfferedByUniversity(x))"]}
{"id": "folio_validation_449", "nl": "James either takes the database course or has a part-time job offered by the university.", "fol": "((TakesDatabaseCourse(James) & -HasPartTimeJob(James)) | (-TakesDatabaseCourse(James) & HasPartTimeJob(James)))", "prediction": ["all x y.((James(x) & University(y)) -> (TakesDatabaseCourse(x,y) | HasPartTimeJob(x,y)))", "all x.(James(x) -> (TakesDatabaseCourses(x) | HasPartTimeJobOfferedByUniversity(x)))", "all x y.((James(x) & University(y)) -> (TakesDatabaseCourses(x,y) | HasPartTimeJob(x,y)))", "all x.(James(x) -> (TakesDatabaseCourse(x) | HasPartTimeJobOfferedByUniversity(x)))", "all x.(James(x) -> (TakesDatabaseCourse(x) | HasPartTimeJob(x)))", "all x.(James(x) -> (TakesDatabaseCourse(x) | PartTimeJobOfferedByUniversity(x)))", "all x.(James(x) -> (TakesDatabaseCourses(x) | PartTimeJobOfferedByUniversity(x)))", "all x y.((James(x) & University(y)) -> (TakesDatabaseCourse(x) | HasPartTimeJob(x,y)))", "all x y.((James(x) & University(y)) -> (TakesDatabaseCourses(x) | HasPartTimeJob(x,y)))", "all x.(James(x) -> (TakesDatabaseCourses(x) | HasPartTimeJob(x)))", "all x y.((James(x) & University(y)) -> (TakesDatabaseCourse(x,y) | PartTimeJob(x,y)))", "all x y.((James(x) & University(y)) -> (TakesDBCourses(x,y) | HasPartTimeJob(x,y)))", "all x y.((James(x) & University(y)) -> (TakesDatabaseCourses(x,y) | PartTimeJob(x,y)))", "all x y.((James(x) & University(y)) -> (TakesDatabaseCourse(x,y) | PartTimeJobOffered(x,y)))", "all x y.((James(x) & University(y)) -> (TakesDatabaseCourses(x,y) | PartTimeJobOffered(x,y)))", "all x.((James(x) & DatabaseCourse(x)) | PartTimeJobOfferedByUniversity(x)) -> Takes(x,y))"]}
{"id": "folio_validation_450", "nl": "Jack takes the database course.", "fol": "TakesDatabaseCourse(Jack)", "prediction": ["all x.(Jack(x) -> TakesDatabaseCourse(x))", "all x y.((Jack(x) & DatabaseCourse(y)) -> Takes(x,y))", "all x.(Jack(x) -> TakesDatabaseCourses(x))", "all x.((Jack(x) & DatabaseCourse(x)) -> Takes(x,y))", "all x y.((Jack(x) & Database(y)) -> Takes(x,y))", "All x.(Jack(x) -> TakesDatabaseCourse(x))", "all x.(Jack(x) -> TakesDBCourses(x))", "all x y.((Jack(x) & DatabaseCourses(y)) -> Takes(x,y))", "all x y.((Jack(x) & Database(y)) -> TakesCourses(x,y))", "all x y.((Jack(x) & Database(y)) -> TakesCourse(x,y))", "all x.((Jack(x) & DatabaseCourses(x)) -> Takes(x,y))", "All x.(Jack(x) -> TakesDatabaseCourses(x))", "(TakesDatabaseCourse(Jack))", "All x.(Jack(x) -> TakesDBCourses(x))", "all x.((Jack(x) & Database(y)) -> TakesCourses(x,y))", "all x.((Jack(x) & Database(y)) -> Takes(x,y))"]}
{"id": "folio_validation_451", "nl": "If George likes music, he wants to compose.", "fol": "(LikesMusic(George) -> DesiresToCompose(George))", "prediction": ["all x.((George(x) & LikesMusic(x)) -> WantsToCompose(x))", "all x.((George(x) & LikesMusic(x)) -> WantsCompose(x))", "all x.((George(x) & LikesMusic(x)) -> WantsToCompose(x))", "all x.((Gerry(x) & LikesMusic(x)) -> WantsToCompose(x))", "all x.((Greg(x) & LikesMusic(x)) -> WantsToCompose(x))", "all x.(LikesMusic(x) -> WantsToCompose(x))", "all x.((George(x) & LikesMusic(x)) -> WantsComposition(x))", "all x.((Gather(x) & LikesMusic(x)) -> WantsToCompose(x))", "all x.((Gerald(x) & LikesMusic(x)) -> WantsToCompose(x))", "all x.((Gary(x) & LikesMusic(x)) -> WantsToCompose(x))", "all x.((George(x) & LikesMusic(x)) -> WantsToCompose(x))", "all x.((George(x) & LikesMusic(x)) -> WantsCompose(x))", "all x.((George(x) & LikesMusic(x)) -> Compose(x))", "(LikesMusic(George) -> WantsToCompose(George))", "all x.((Gerry(x) & LikesMusic(x)) -> WantsCompose(x))", "all x.((Greg(x) & LikesMusic(x)) -> WantsCompose(x))"]}
{"id": "folio_validation_452", "nl": "If George has access to a program, he can compose.", "fol": "(HasAccessToProgram(George) -> AbleToCompose(George))", "prediction": ["all x.((George(x) & AccessToProgram(x)) -> CanCompose(x))", "all x.((George(x) & AccessToProgram(x)) -> CanCompose(x))", "all x.((George(x) & HasAccessToProgram(x)) -> CanCompose(x))", "all x.((Gerry(x) & AccessToProgram(x)) -> CanCompose(x))", "all x.((Greg(x) & AccessToProgram(x)) -> CanCompose(x))", "all x.((George(x) & HasAccessToProgram(x)) -> CanCompose(x))", "all x.((HasAccessToProgram(x) & George(x)) -> CanCompose(x))", "all x y.((George(x) & Program(y) & AccessTo(x,y)) -> CanCompose(x))", "all x.((Gary(x) & AccessToProgram(x)) -> CanCompose(x))", "all x y.((George(x) & Program(y) & AccessTo(x,y)) -> CanCompose(x))", "all x.(AccessToProgram(x) -> CanCompose(x))", "all x.(HasAccessToProgram(x) -> CanCompose(x))", "all x.((AccessToProgram(x) & George(x)) -> CanCompose(x))", "all x y.(((George(x) & Program(y)) & AccessTo(x,y)) -> CanCompose(x))", "all x.(((George(x) & AccessToProgram(x)) -> CanCompose(x))", "all x y.((George(x) & Program(y) & AccessTo(x,y)) -> CanCompose(x,y))"]}
{"id": "folio_validation_453", "nl": "If George can compose and wants to compose, he will compose.", "fol": "((DesiresToCompose(George) & AbleToCompose(George)) -> WillCompose(George))", "prediction": ["all x.((George(x) & CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))", "all x.((George(x) & CanCompose(x) & WantsToCompose(x)) -> Compose(x))", "all x.((George(x) & CanCompose(x) & WantsToCompose(x)) -> Composes(x))", "all x.((George(x) & CanCompose(x) & WantsCompose(x)) -> WillCompose(x))", "all x.((CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))", "all x.((George(x) & CanCompose(x) & WillCompose(x)) -> WillCompose(x))", "all x.((George(x) & CanCompose(x) & WantsToCompose(x)) -> CanCompose(x))", "all x.((CanCompose(x) & WantsToCompose(x)) -> Compose(x))", "all x.((George(x) & CanCompose(x) & WantsCompose(x)) -> Compose(x))", "all x.((George(x) & Compose(x) & WantsToCompose(x)) -> Compose(x))", "all x.((George(x) & CanCompose(x) & WillCompose(x)) -> Compose(x))", "all x.((George(x) & CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))", "all x.((George(x) & CanCompose(x) & WantsToCompose(x)) -> Composes(x))", "all x.((George(x) & CanCompose(x) & WantsCompose(x)) -> Composes(x))", "all x.((George(x) & Compose(x) & WantsCompose(x)) -> Compose(x))", "all x.((CanCompose(x) & WantsCompose(x)) -> WillCompose(x))"]}
{"id": "folio_validation_454", "nl": "If George likes music and has access to a program, he will compose.", "fol": "((LikesMusic(George) & HasAccessToProgram(George)) -> WillCompose(George))", "prediction": ["all x.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> Compose(x))", "all x.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> Composes(x))", "all x.((George(x) & LikesMusic(x) & HasAccessToProgram(x)) -> Composes(x))", "all x.((George(x) & LikesMusic(x) & HasAccessToProgram(x)) -> Compose(x))", "all x.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> Composes(x))", "all x.((LikesMusic(x) & AccessToProgram(x)) -> Compose(x))", "all x.((George(x) & LikesMusic(x) & HasAccessToProgram(x)) -> Composes(x))", "all x.((LikesMusic(x) & AccessToProgram(x)) -> Composes(x))", "all x.((LikesMusic(x) & HasAccessToProgram(x)) -> Composes(x))", "all x.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> WillCompose(x))", "all x.((LikesMusic(x) & HasAccessToProgram(x)) -> Compose(x))", "all x.((George(x) & LikesMusic(x) & HasAccessToProgram(x)) -> WillCompose(x))", "all x.(((George(x) & LikesMusic(x) & AccessToProgram(x)) -> Compose(x))", "all x.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> Composes(x))", "all x.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> Compose(x))", "all x.((LovesMusic(x) & AccessToProgram(x)) -> Compose(x))"]}
{"id": "folio_validation_455", "nl": "If George will not compose, George can not compose.", "fol": "(-DesiresToCompose(George) -> -WillCompose(George))", "prediction": ["all x.((George(x) & -Compose(x)) -> -Compose(x))", "all x.((George(x) & -Composes(x)) -> -Composes(x))", "all x.((George(x) & -Compose(x)) -> CannotCompose(x))", "all x.((George(x) & WillNotCompose(x)) -> -CanCompose(x))", "all x.((George(x) & WillNotCompose(x)) -> CannotCompose(x))", "all x.((George(x) & -Composes(x)) -> -Compose(x))", "all x.((George(x) & -Composes(x)) -> CannotCompose(x))", "all x.((George(x) & WillNotCompose(x)) -> -Compose(x))", "all x.((George(x) & -Compose(x)) -> CanNotCompose(x))", "all x y.((George(x) & -Compose(x)) -> -Compose(y))", "all x.((George(x) & WillnotCompose(x)) -> -CanCompose(x))", "all x.((George(x) & WillNotCompose(x)) -> CanNotCompose(x))", "all x.((George(x) & CannotCompose(x)) -> -CanCompose(x))", "all x.((George(x) & -Compose(x)) -> -Compose(x))", "all x.((Gerald(x) & -Compose(x)) -> -Compose(x))", "all x.((George(x) & -Composed(x)) -> -Compose(x))"]}
{"id": "folio_validation_456", "nl": "A hawk never lands. ", "fol": "all x.(IsHawk(x) -> -Lands(x))", "prediction": ["all x.(Hawk(x) -> -Lands(x))", "all x.(Hawk(x) -> NeverLands(x))", "all x.(hawk(x) -> -Lands(x))", "all x.(hawk(x) -> NeverLands(x))", "exists x.(Hawk(x) & -Lands(x))", "all x y.((Hawk(x) & Land(y)) -> -Lands(x,y))", "all x.(Hawk(x) -> -Lands(x))", "all x y.((Hawk(x) & Lands(y)) -> -Lands(x,y))", "all x.(Hawk(x) -> NeverLands(x))", "all x y.((Hawk(x) & Lands(y)) -> NeverLands(x))", "all x y.((Hawk(x) & Land(y)) -> NeverLands(x))", "all x y.((Hawk(x) & Lands(y)) -> -Lands(x))", "all x y.((Hawk(x) & Land(y)) -> NeverLands(x,y))", "all x y.((Hawk(x) & Land(y)) -> -Lands(x))", "all x y.((Hawk(x) & Lands(y)) -> NeverLands(x,y))", "all x.(HasLand(x) -> -Lands(x))"]}
{"id": "folio_validation_457", "nl": "Some birds are hawks.", "fol": "exists x.(IsBird(x) & IsHawk(x))", "prediction": ["exists x.(Bird(x) & Hawk(x))", "exists x.(Bird(x) & Hawk(x))", "exists x y.(Bird(x) & Hawk(y))", "exists x.(Bird(x) & HasHawk(x))", "(exists x.(Bird(x) & Hawk(x)))", "exists x.(Bird(x) & Hulk(x))", "exists x.((Bird(x) & Hawk(x))", "exist x.(Bird(x) & Hawk(x))", "exists x.(Bird(x) & Hoax(x))", "exists x.(Bird(x) & Hawk(x))", "exists x.(Bird(x) & Husk(x))", "exists x.(Bird(x) & Hatch(x))", "exists x.(Bird(x) & Husky(x))", "exists x.(Bird(x) & hawk(x))", "exists x.(Bird(x) & Hover(x))", "exists x.(Bull(x) & Hawk(x))"]}
{"id": "folio_validation_458", "nl": "All birds land", "fol": "all x.(IsBird(x) -> Lands(x))", "prediction": ["all x.(Bird(x) -> Lands(x))", "all x.(Bird(x) -> LandsOn(x))", "all x.(Bird(x) -> Land(x))", "all x.(Bird(x) -> LandsOn(x,y))", "all x y.((Bird(x) & Bird(y)) -> Lands(x,y))", "all x.(Bird(x) -> LandsIn(x,y))", "all x y.((Bird(x) & Bird(y)) -> LandsOn(x,y))", "all x.(Bird(x) -> LandsOnLand(x))", "all x.(Bird(x) -> LandsOn(x,LandsOn(x,LandsOn(x,LandsOn(x,LandsOn(x)))", "all x.(Bird(x) -> LandsAtLand(x))", "all x.(Bird(x) -> LandsOn(x,LandsOn(x,LandsOn(x,LandsOn(x)))", "all x.(Bird(x) -> LandsOn(x,LandsOn(x,LandsOn(x,LandsOn(x,LandsOn(x,LandsOn(x)))", "all x.(Bird(x) -> LandsOn(x,LandsOn(x,LandsOn(x,LandsOn(x,LandsOn(x,LandsOn(x,LandsOn(x)))", "all x.(Bird(x) -> LandsOn(x,LandsOn(x,LandsOn(x)))", "all x.(Bird(x) -> LandsAndLands(x))", "all x y.((Bird(x) & Bird(y)) -> Land(x,y))"]}
{"id": "folio_validation_459", "nl": "On some Mondays at 8 pm, roses are given out on TV.", "fol": "exists x.(OnMondayAt8PM(x) & RosesGivenOutOnTV(x))", "prediction": ["(exists x.(Monday(x) & 8pm(x)) & exists y.(Monday(y) & 8pm(y)) & exists z.(Rose(z) & GivenOnTV(z))))", "(exists x.(Monday(x) & 8pm(x)) & exists y.(Monday(y) & 8pm(y)) & exists z.(Rose(z) & GivenOutOnTV(z))))", "(exists x.(Monday(x) & 8PM(x)) & exists y.(Monday(y) & 8pm(y)) & exists z.(Rose(z) & GivenOnTV(z))))", "(exists x.(Monday(x) & 8PM(x)) & exists y.(Monday(y) & 8PM(y)) & exists z.(Rose(z) & GivenOnTV(z))))", "(exists x.(Monday(x) & 8pm(x)) & exists y.(Monday(y) & 8pm(y)) & exists z.(Rose(z) & GivenOut(z)))))", "(exists x.(Monday(x) & 8pm(x)) & exists y.(Monday(y) & 8pm(y)) & exists z.(Rose(z) & GivesOut(z,x))))", "(exists x.(Monday(x) & 8PM(x)) & exists y.(Monday(y) & 8pm(y)) & exists z.(Rose(z) & GivenOutOnTV(z))))", "(exists x.(Monday(x) & 8pm(x)) & exists y.(Monday(y) & 8pm(y)) & exists z.(Rose(z) & GivenOnTV(z,x))))", "(exists x.(Monday(x) & 8pm(x)) & exists y.(Monday(y) & 8pm(y)) & exists z.(Rose(z) & GivenOutOnTV(z,x))))", "(exists x.(Monday(x) & 8PM(x)) & exists y.(Monday(y) & 8PM(y)) & exists z.(Rose(z) & GivenOutOnTV(z))))", "(exists x.(Monday(x) & 8pm(x)) & exists y.(Monday(y) & 8pm(y)) & exists z.(Rose(z) & GivenOut(z))))", "(exists x.(Monday(x) & 8pm(x)) & exists y.(Monday(y) & 8pm(y)) & exists z.(Rose(z) & GivenOnTV(z)))))", "(exists x.(Monday(x) & 8pm(x)) & exists y.(Monday(y) & 8pm(y)) & exists z.(Rose(z) & GivenOut(z,x)))))", "(exists x.(Monday(x) & 8pm(x)) & exists y.(Monday(y) & 8pm(y)) & exists z.(Rose(z) & GivenOut(z,x))))", "all x.((Monday(x) & At8PM(x)) -> RosesGiftedOnTV(x))", "all x y.((Monday(x) & 8pm(x) & TV(y)) -> GivesRose(x,y))"]}
{"id": "folio_validation_460", "nl": "Every rose given out on TV is on the Bachelor.", "fol": "all x.(RosesGivenOutOnTV(x) -> IsOnBachelor(x))", "prediction": ["all x.(Rose(x) -> Bachelor(x))", "all x.((Rose(x) & GivenOutOnTV(x)) -> Bachelor(x))", "all x.(Rose(x) -> OnBachelor(x))", "all x.((Rose(x) & GivenOutOnTV(x)) -> Bachelor(x))", "all x.(Rose(x) & GivenOutOnTV(x)) -> Bachelor(x))", "all x.(Rose(x) & GivenOutOnTV(x) -> Bachelor(x))", "all x y.((Rose(x) & GivenOutOnTV(x) & Bachelor(y)) -> On(x,y))", "all x y.((Rose(x) & GivenOutOnTV(x) & Bachelor(y)) -> On(x,y))", "all x.(Rose(x) & GivenOutOnTV(x) -> Bachelor(x))", "all x.(Rose(x) -> GivenOutOnTV(x))", "all x.(Rose(x) -> (GiftedOutOnTV(x) & Bachelor(x)))", "all x.(Rose(x) & GivenOutOnTV(x)) -> Bachelor(x))", "all x y.((Rose(x) & GivenOutOnTV(x)) -> Bachelor(y))", "all x.((Rose(x) & DoneOnTV(x)) -> Bachelor(x))", "all x y.((Rose(x) & GivenOutOnTV(x,y)) -> Bachelor(y))", "all x y.((Rose(x) & GivenOutOnTV(x,y)) -> Bachelor(y))"]}
{"id": "folio_validation_461", "nl": "Everything on the Bachelor portrays the lives of real people.", "fol": "all x.(IsOnBachelor(x) -> PortraysLivesOfRealPeople(x))", "prediction": ["all x.(Bachelor(x) -> (PortraysLivesOfRealPeople(x)))", "all x.(Bachelor(x) -> PortraysLivesOfRealPeople(x))", "all x.(Bachelor(x) -> DescribesLivesOfRealPeople(x))", "all x.(Bachelor(x) -> DepictsLivesOfRealPeople(x))", "all x y.((Bachelor(x) & Bachelor(y)) -> (PortraysLivesOfRealPeople(x,y)))", "all x y.((Bachelor(x) & Bachelor(y)) -> PortraysLivesOfRealPeople(x,y))", "all x.(Bachelor(x) -> LivesOfRealPeople(x))", "all x y.((Bachelor(x) & Bachelor(y)) -> DescribesLivesOfRealPeople(x,y))", "all x.(Bachelor(x) -> RepresentsLivesOfRealPeople(x))", "all x y.((Bachelor(x) & Bachelor(y)) -> (PortraysLives(x,y) & RealPeople(y)))", "all x.(Bachelor(x) -> portraysLivesOfRealPeople(x))", "all x.(Bachelor(x) -> PortraitsLivesOfRealPeople(x))", "all x.(Bachelor(x) -> (PortraysLives(x) & RealPeople(x)))", "all x y.((Bachelor(x) & RealPeople(y)) -> PortraysLives(x,y))", "all x y.((Bachelor(x) & Bachelor(y)) -> PortraitsLivesOfRealPeople(x,y))", "all x y.((Bachelor(x) & Bachelor(y)) -> (PortraysLivingsOfRealPeople(x,y)))"]}
{"id": "folio_validation_462", "nl": "All shows portraying the lives of real people are reality TV shows.", "fol": "all x.(PortraysLivesOfRealPeople(x) -> IsRealityTVShow(x))", "prediction": ["all x.((Show(x) & LivesOfRealPeople(x)) -> RealityTVShow(x))", "all x.((Show(x) & RealPeople(x)) -> RealityTVShow(x))", "all x.((Show(x) & DescribesLivesOfRealPeople(x)) -> RealityTVShow(x))", "all x.((Show(x) & RealPeopleLives(x)) -> RealityTVShow(x))", "all x.((Show(x) & PortraysLivesOfRealPeople(x)) -> RealityTVShow(x))", "all x.((Show(x) & RepelsLivesOfRealPeople(x)) -> RealityTVShow(x))", "all x.((Show(x) & ProfilesRealPeople(x)) -> RealityTVShow(x))", "all x.((Show(x) & CapturesLivesOfRealPeople(x)) -> RealityTVShow(x))", "all x.((Show(x) & RealLife(x)) -> RealityTVShow(x))", "all x.((Show(x) & LivesRealPeople(x)) -> RealityTVShow(x))", "all x.((Show(x) & ShowsLivesOfRealPeople(x)) -> RealityTVShow(x))", "all x.((Show(x) & CarriesLivesOfRealPeople(x)) -> RealityTVShow(x))", "all x.((Show(x) & RepresentsLivesOfRealPeople(x)) -> RealityTVShow(x))", "all x.((Show(x) & DescribesLives(x) & RealPeople(x)) -> RealityTVShow(x))", "all x y.((Show(x) & RealPeople(y)) -> RealityTVShow(x))", "all x y.((Show(x) & RealPeople(y)) -> RealityTVShow(x,y))"]}
{"id": "folio_validation_463", "nl": "Breaking Bad is not a reality TV show.", "fol": "-IsRealityTVShow(BreakingBad)", "prediction": ["all x.((BreakingBad(x) & -RealityTVShow(x)) -> -RealityTVShow(x))", "all x.(BreakingBad(x) -> -RealityTVShow(x))", "all x.((BreakingBad(x) & -RealityTVShow(x)) -> -RealityTVShow(x))", "All x.(BreakingBad(x) -> -RealityTVShow(x))", "(RealityTVShow(BreakingBad) & -RealityTVShow(BreakingBad))", "-RealityTVShow(BreakingBad)", "all x.((BreakingBad(x) & -RealityTelevisionShow(x)) -> -RealityTVShow(x))", "all x.((BreakingBad(x) & -RealityTVShow(x)) -> -RealityTelevisionShow(x))", "all x.(BreakingBad(x) -> -RealityTelevisionShow(x))", "all x.((BreakingBad(x) & -RealityTelevisionShow(x)) -> -RealityTVShow(x))", "all x.((BreakingBad(x) & -RealityTVShow(x)) -> -RealityTelevisionShow(x))", "all x.((BreakingBad(x) & -RealityTelevisionShow(x)) -> -RealityTvShow(x))", "all x.((BreakingBad(x) & -RealityTVShow(x)) -> -RealityTvShow(x))", "all x.((BreakingBad(x) & -RealityTVShow(x)) -> -TelevisionShow(x))", "All x.(BreakingBad(x) -> -RealityTelevisionShow(x))", "all x.((BreakingBad(x) & RealityTVShow(x)) -> -RealityTVShow(x))"]}
{"id": "folio_validation_464", "nl": "Breaking Bad is on Monday at 8 pm.", "fol": "OnMondayAt8PM(BreakingBad)", "prediction": ["All x.((BreakingBad(x) & Monday(x) & 8pm(x)) -> BreakingBad(x))", "All x.(BreakingBad(x) -> MondayAt8pm(x))", "All x.((BreakingBad(x) & Monday(x,8)) -> BreakingBad(x))", "All x.(BreakingBad(x) -> MondayAt8PM(x))", "All x.((BreakingBad(x) & Monday(x) & 8PM(x)) -> BreakingBad(x))", "All x.((BreakingBad(x) & Monday(x)) -> 8pm(x))", "All x.(BreakingBad(x) -> MondayAt8Pm(x))", "All x.(BreakingBad(x) -> OnMondayAt8pm(x))", "All x.(BreakingBad(x) -> OnMondayAt8PM(x))", "All x.(BreakingBad(x) -> (OnMonday(x,8) & 8pm(x)))", "All x.((BreakingBad(x) & Monday(x)) -> 8PM(x))", "All x.((BreakingBad(x) & Monday(x)) -> 8P.M.(BreakingBad(x)))", "All x.(BreakingBad(x) -> (OnMonday(x,8) & BreakingBad(x)))", "All x.(BreakingBad(x) -> MondayAt8:00pm(x))", "All x.((BreakingBad(x) & Monday(x)) -> 8Pm(x))", "All x.(BreakingBad(x) -> Monday(x))"]}
{"id": "folio_validation_465", "nl": "Breaking Bad is a TV show in which roses are given out on Monday at 8 pm.", "fol": "(OnMondayAt8PM(BreakingBad) & RosesGivenOutOnTV(BreakingBad))", "prediction": ["all x.(BreakingBad(x) -> (TVShow(x) & exists y.(Rose(y) & GivesOut(x,y)))))", "all x.(BreakingBad(x) -> (TVShow(x) & exists y.(Rose(y) & GivenOut(x,y)))))", "all x.(BreakingBad(x) -> (TelevisionShow(x) & RosesGivenOutOnMondayAt8pm(x)))", "all x.(BreakingBad(x) -> (TelevisionShow(x) & RosesGivenOutOnMondayAt8PM(x)))", "all x.(BreakingBad(x) -> (TVShow(x) & exists y.(Rose(y) & GivenOutOnMonday(x,y)))))", "all x.(BreakingBad(x) -> (TelevisionShow(x) & exists y.(Rose(y) & GivesOut(x,y)))))", "all x.(BreakingBad(x) -> (TelevisionShow(x) & exists y.(Rose(y) & GivenOut(x,y)))))", "all x.(BreakingBad(x) -> (TelevisionShow(x) & exists y.(Rose(y) & GivenOutOnMonday(x,y)))))", "all x.(BreakingBad(x) -> (TVShow(x) & RosesGivenOutOnMondayAt8pm(x)))", "all x.(BreakingBad(x) -> (TVShow(x) & RosesGivenOutOnMondayAt8PM(x)))", "all x.(BreakingBad(x) -> (TelevisionShow(x) & RosesGiftedOutOnMondayAt8pm(x)))", "all x.(BreakingBad(x) -> (TVShow(x) & exists y.(Rose(y) & GivesOutOnMonday(x,y)))))", "all x.(BreakingBad(x) -> (TelevisionShow(x) & RosesGiftedOutOnMondayAt8PM(x)))", "all x.(BreakingBad(x) -> (TVShow(x) & RosesGiftedOutOnMondayAt8pm(x)))", "all x.(BreakingBad(x) -> (TVShow(x) & RosesGivenOutOnMonday(x) & 8pm(x)))", "all x.(BreakingBad(x) -> (TelevisionShow(x) & exists y.(Rose(y) & GivesOutOnMonday(x,y)))))"]}
{"id": "folio_validation_466", "nl": "If roses are given out during Breaking Bad, then it is on Monday at 8 pm.", "fol": "(RosesGivenOutOnTV(BreakingBad) -> OnMondayAt8PM(BreakingBad))", "prediction": ["all x.((Rose(x) & BreakingBad(x)) -> MondayAt8pm(x))", "all x.((Rose(x) & GivenOutDuringBreakingBad(x)) -> MondayAt8pm(x))", "all x.((Rose(x) & GivenOutDuringBreakingBad(x)) -> MondayAt8PM(x))", "all x.((Rose(x) & BreakingBad(x)) -> MondayAt8PM(x))", "all x.((Roses(x) & GivenOutDuringBreakingBad(x)) -> MondayAt8pm(x))", "all x.((Roses(x) & GivenOutDuringBreakingBad(x)) -> MondayAt8PM(x))", "all x.((Rose(x) & BreakingBad(x)) -> MondayAt8Pm(x))", "all x.((Rose(x) & GivenOutDuringBreakingBad(x)) -> MondayAt8Pm(x))", "all x.((Roses(x) & BreakingBad(x)) -> MondayAt8pm(x))", "all x.((Roses(x) & GivenOutDuringBreakingBad(x)) -> MondayAt8Pm(x))", "all x.((Rose(x) & GivenOutDuringBreakingBad(x)) -> MondayAt8pm(x))", "all x.((Roses(x) & BreakingBad(x)) -> MondayAt8PM(x))", "all x.((Rose(x) & GivenOutDuringBreakingBad(x)) -> MondayAt8PM(x))", "all x.((Roses(x) & GivenOutDuringBreakingBad(x)) -> MondayAt8pm(x))", "all x.((Roses(x) & BreakingBad(x)) -> MondayAt8Pm(x))", "all x.((Rose(x) & GivenOutDuringBreakingBad(x)) -> MondayAt8:00pm(x))"]}
{"id": "folio_validation_467", "nl": "Heinrich Scmidt was a Nazi German politician. ", "fol": "(OriginatesFrom(HeinrichScmidt,NaziGermany) & IsPolitician(HeinrichScmidt))", "prediction": ["Heinrich Scmidt (NaziGermanPolitician)", "Heinrich Scmidt (nastGermanPolitician(n) & ServedIn(nast(n) & ServedIn(nast(n) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast(nast(nast(nast(nast))))", "Heinrich Scmidt (nastGermanPolitician(n) & ServedIn(nast(n) & ServedIn(nast(n) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast(nast(nast(nast))))", "Heinrich Scmidt (nastGermanPolitician(n) & ServedIn(nast(n) & ServedIn(nast(n) & ServedIn(nast(n) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast(nast(nast(nast(nast(nast))))", "Heinrich Scmidt (nastGermanPolitician(n) & ServedIn(nast(n) & ServedIn(nast(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast(nast(nast(nast(nast(nast))))", "Heinrich Scmidt (nastGermanPolitician(n) & ServedIn(nast(n) & ServedIn(nast(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast(nast(nast(nast(nast(nast(nast))))", "Heinrich Scmidt (nastGermanPolitician(n) & ServedIn(nast(n) & ServedIn(nast(n) & ServedIn(nast(n) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast(nast(nast(nast(nast))))", "Heinrich Scmidt (nastGermanPolitician(n) & ServedIn(nast(n) & ServedIn(nast(n) & ServedIn(nast(n) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast(nast(nast(nast(nast(nast(nast(nast))))", "Heinrich Scmidt (nastGermanPolitician(n) & ServedIn(nast(n) & ServedIn(nast(n) & ServedIn(nast(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast(nast(nast(nast(nast(nast(nast))))", "Heinrich Scmidt (nastGermanPolitician(n) & ServedIn(nast(n) & ServedIn(nast(n) & ServedIn(nast(n) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast(nast(nast(nast(nast(nast(nast(nast)))))", "Heinrich Scmidt (nastGermanPolitician(n) & ServedIn(nast(n) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast(nast(nast(nast(nast(nast(nast(nast))))", "Heinrich Scmidt (nastGermanPolitician(n) & ServedIn(nast(n) & ServedIn(nast(n) & ServedIn(nast(n) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast(nast(nast(nast(nast(nast(nast))))", "Heinrich Scmidt (nastGermanPolitician(n) & ServedIn(nast(n) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast(nast(nast(nast(nast(nast(nast))))", "Heinrich Scmidt (nastGermanPolitician(n) & ServedIn(nast(n) & ServedIn(nast(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast(nast(nast(nast(nast(nast(nast(nast(nast)))))", "Heinrich Scmidt (nastGermanPolitician(n) & ServedIn(nast(n) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast(nast(nast(nast(nast(nast(nast(nast(nast(nast)))))", "Heinrich Scmidt (nastGermanPolitician(n) & ServedIn(nast(n) & ServedIn(nast(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast) & ServedIn(nast(nast(nast(nast(nast(nast(nast(nast(nast))))"]}
{"id": "folio_validation_468", "nl": "Heeinrich Scmidt was also a member of the Prussian State Parliament and the Nazi Reichstag.", "fol": "(IsMemberOf(HeinrichScmidt,PrussianStateParliament) & IsMemberOf(HeinrichScmidt,NaziReichstag))", "prediction": ["(MemberOfPrussianStateParliament(Heeinrich Scmidt) & MemberOfNaziRangestag(Heeinrich Scmidt))", "all x.((Heeinrich Scmidt(x) & PrussianStateParliament(x) & NaziRangestag(x)) -> Member(x))", "all x.(Scmidt(x) -> (PrussianStateParliament(x) & NaziRangestag(x)))", "(Member(Heeinrich Scmidt) & MemberOfPrussianStateParliament(HeeinrichScmidt) & MemberOfNaziRangestag(HeeinrichScmidt))", "(MemberOfPrussianStateParliament(Heeinrich Scmidt) & MemberOfNaziRangstag(Heeinrich Scmidt))", "(Member(Heeinrich Scmidt) & MemberOfPrussianStateParliament(HeeinrichScmidt) & MemberOfNaziRangstag(HeeinrichScmidt))", "(MemberOfPrussianStateParliament(Heeinrich Scmidt) & MemberOfNaziRichstag(Heeinrich Scmidt))", "(Member(Heeinrich Scmidt) & MemberOfPrussianStateParliament(HeeinrichScmidt) & MemberOfNaziRichstag(HeeinrichScmidt))", "(Member(Heeinrich Scmidt) & MemberOfPrussianStateParliament(Heeinrich Scmidt) & MemberOfNaziRangestag(Heeinrich Scmidt))", "all x.((HeeinrichScmidt(x) & PrussianStateParliament(x) & NaziRangestag(x)) -> Member(x))", "(MemberOfPrussianStateParliament(HeeinrichScmidt) & MemberOfNaziRangestag(HeeinrichScmidt))", "All x.(Scmidt(x) -> (PrussianStateParliament(x) & NaziRangestag(x)))", "all x.(Scmidt(x) -> (MemberOfPrussianStateParliament(x) & MemberOfNaziRangestag(x)))", "all x.((Heeinrich Scmidt(x) & PrussianStateParliament(x) & NaziRangstag(x)) -> Member(x))", "all x.(Scmidt(x) -> (PrussianStateParliament(x) & NaziRangstag(x)))", "(Member(Heeinrich Scmidt) & MemberOfPrussianStateParliament(Heeinrich Scmidt) & MemberOfNaziRangstag(Heeinrich Scmidt))"]}
{"id": "folio_validation_469", "nl": "Heinrich Schmidt was either German or Russian.", "fol": "(OriginatesFrom(HeinrichScmidt,NaziGermany) | OriginatesFrom(HeinrichScmidt,Russia))", "prediction": ["all x.(Schmidt(x) -> (German(x) | Russian(x)))", "all x.(HelenSchmidt(x) -> (German(x) | Russian(x)))", "all x.(HenrySchmidt(x) -> (German(x) | Russian(x)))", "Heinrich Schmidt (German(hereinafter) | Russian(hereinafter))", "all x.(Schmidt(x) -> (Deutsch(x) | Russian(x)))", "Heinrich Schmidt (German(h) | Russian(h)))", "all x.(Schmidt(x) -> (Deutsch(x) | Russ(x)))", "Heinrich Schmidt (German(hereinafter) | Russian(hereinafter)))", "all x.(Schmidt(x) -> (German(x) | Russ(x)))", "all x.(Schmidt(x) -> (Deutsche(x) | Russian(x)))", "Heinrich Schmidt (German( Heinrich) | Russian( Heinrich)))", "all x.(HelenSchmidt(x) -> (Deutsch(x) | Russian(x)))", "all x.(HenrySchmidt(x) -> (Deutsch(x) | Russian(x)))", "all x.(HelenSchmidt(x) -> (Deutsch(x) | Russ(x)))", "all x.(HelenSchmidt(x) -> (Deutsche(x) | Russian(x)))", "all x.(HelenSchmidt(x) -> (German(x) | Russ(x)))"]}
{"id": "folio_validation_470", "nl": "Some Nazi German politician was part of both the Prussian State Parliament and the Nazi Reichstag.", "fol": "exists x.(OriginatesFrom(x,NaziGermany) & IsPolitician(x) & IsMemberOf(x,PrussianStateParliament) & IsMemberOf(x,NaziReichstag))", "prediction": ["exists x.(NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziRangestag(x))", "all x.(NaziGermanPolitician(x) -> (PartOfPrussianStateParliament(x) & PartOfNaziRangestag(x)))", "exists x.(NaziGermanPolitician(x) & PartOfPrussianStateParliament(x) & PartOfNaziRangestag(x))", "all x.(NaziGermanPolitician(x) -> (PartOfPrussianStateParliament(x) & PartOfNaziRichstag(x)))", "all x.(NaziGermanPolitician(x) -> (PartOfPrussianStateParliament(x) & PartOfNaziRangstag(x)))", "exists x.(NaziGermanPolitician(x) & PartOfPrussianStateParliament(x) & PartOfNaziRichstag(x))", "exists x.(NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziRichstag(x))", "exists x.(NaziGermanPolitician(x) & PartOf(x,PrussianStateParliament) & PartOf(x,NaziRangestag))", "exists x.(NaziGermanPolitician(x) & PartOfPrussianStateParliament(x) & PartOfNaziRangstag(x))", "exists x.(NaziGermanPolitician(x) & PartOf(x,PrussianStateParliament) & PartOf(x,NaziRichstag))", "all x y.((NaziGermanPolitician(x) & PrussianStateParliament(y) & NaziRangestag(x)) -> PartOf(x,y))", "exists x.(NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziRangstag(x))", "exists x.(NaziGermanPolitician(x) & PartOf(x,PrussianStateParliament) & PartOf(x,NaziRangstag))", "all x.(NaziGermanPolitician(x) -> (PartOfPrussianStateParliament(x) & PartOfNaziRandstag(x)))", "all x y.((NaziGermanPolitician(x) & PrussianStateParliament(y) & NaziRichstag(x)) -> PartOf(x,y))", "exists x.(NaziGermanPolitician(x) & PartOfPrussianStateParliament(x) & PartOfNaziRandstag(x))"]}
{"id": "folio_validation_471", "nl": "No politicans are part of the Nazi Reichstag.", "fol": "all x.(IsPolitician(x) -> -IsMemberOf(x,NaziReichstag))", "prediction": ["-exists x.(Politican(x) & PartOfNaziRangestag(x))", "-exists x.(Politican(x) & NaziRangestag(x))", "all x.(Politican(x) -> -PartOfNaziRangestag(x))", "-exists x.(Politican(x) & PartOfRangestag(x))", "-exists x.(Politician(x) & PartOfNaziRangestag(x))", "-exists x.(Politican(x) & NaziRichstag(x))", "-exists x.(Politican(x) & PartOfNaziRichstag(x))", "-exists x.(Politician(x) & NaziRangestag(x))", "all x.(Politician(x) -> -PartOfNaziRangestag(x))", "all x.(Politican(x) -> -PartOfNaziRichstag(x))", "-exists x.(Politician(x) & PartOfRangestag(x))", "-exists x.(Politican(x) & NaziReichstag(x))", "all x.(Politican(x) -> -PartOfRangestag(x))", "-exists x.(Politician(x) & NaziRichstag(x))", "-exists x.(Politican(x) & NaziRandstag(x))", "-exists x.(Politican(x) & NaziRangstag(x))"]}
{"id": "folio_validation_472", "nl": "If something is a deadly disease, then its survival rate is low. ", "fol": "all x.(IsDeadlyDisease(x) -> HasLowSurvivalRate(x))", "prediction": ["all x.((Disease(x) & Lethal(x)) -> LowSurvivalRate(x))", "all x.(LethalDisease(x) -> LowSurvivalRate(x))", "all x.((DeadlyDisease(x)) -> LowSurvivalRate(x))", "all x.((DeadlyDisease(x) & LowSurvivalRate(x)) -> LowSurvivalRate(x))", "all x.((Disease(x) & Deadly(x)) -> LowSurvivalRate(x))", "all x.((DeadlyDisease(x) & LowSurvivalRate(x)) -> LowSurvival(x))", "all x.(DeadlyDisease(x) -> LowSurvivalRate(x))", "all x.((DeadlyDisease(x) & LowSurvivalRate(x)) -> LethalDisease(x))", "all x.((Disease(x) & Devastating(x)) -> LowSurvivalRate(x))", "all x.((DeadlyDisease(x) & LowSurvivalRate(x)) -> Lethal(x))", "all x.((LethalDisease(x) & LowSurvivalRate(x)) -> LowSurvivalRate(x))", "all x.((Disease(x) & Lethal(x)) -> SurvivalRateLow(x))", "all x.((Disease(x) & Delayed(x)) -> LowSurvivalRate(x))", "all x.((Disease(x) & Debilitating(x)) -> LowSurvivalRate(x))", "all x.((LethalDisease(x)) -> LowSurvivalRate(x))", "all x.((DeadlyDisease(x) & LowSurvivalRate(x)) -> Low(x))"]}
{"id": "folio_validation_473", "nl": "All severe cancers are deadly diseases.", "fol": "all x.(IsSevereCancer(x) -> IsDeadlyDisease(x))", "prediction": ["all x.(SevereCancer(x) -> LethalDisease(x))", "all x.(SevereCancer(x) -> DeadlyDisease(x))", "all x.(SevereCancer(x) -> DeathlyDisease(x))", "all x.(SevereCancer(x) -> Die-hardDisease(x))", "all x.(SevereCancer(x) -> DietaryDisease(x))", "all x.(SevereCancer(x) -> DangerousDisease(x))", "all x.(SevereCancer(x) -> DelayedDisease(x))", "all x y.((SevereCancer(x) & Disease(y)) -> Lethal(x,y))", "all x.(SevereCancerous(x) -> LethalDisease(x))", "all x.(SevereCancer(x) -> LessLethalDisease(x))", "all x.(SevereCancer(x) -> KillingDisease(x))", "all x.((SevereCancer(x) & LethalDisease(x)) -> LethalDisease(x))", "all x.(SevereCancer(x) -> (LethalDisease(x) & -LethalDisease(x)))", "all x.((SevereCancer(x) & LethalDisease(x)) -> All(x))", "all x y.((SevereCancer(x) & Disease(y)) -> Lethal(x))", "all x.(SevereCancer(x) -> DietingDisease(x))"]}
{"id": "folio_validation_474", "nl": "Bile duct cancer is a severe cancer. ", "fol": "all x.(IsBileDuctCancer(x) -> IsSevereCancer(x))", "prediction": ["all x.(BileDuctCancer(x) -> SevereCancer(x))", "all x.(BileDuctCancer(x) -> SevereCancer(x))", "all x.(BileDuitCancer(x) -> SevereCancer(x))", "all x.(BuleDuctCancer(x) -> SevereCancer(x))", "all x.(BileDuitCancer(x) -> SevereCancer(x))", "all x.(BileDductCancer(x) -> SevereCancer(x))", "all x.(BileDuctCancer(x) -> SevereCancer(x))", "all x.(BileDeptCancer(x) -> SevereCancer(x))", "all x.(BileDuctCancer(x) -> SevereCancer(x))", "all x.(BileDoubleCancer(x) -> SevereCancer(x))", "all x.(BileDupontCancer(x) -> SevereCancer(x))", "all x.(BileDeptCancer(x) -> SevereCancer(x))", "all x.(BileDductCancer(x) -> SevereCancer(x))", "all x.(BileDoubleCancer(x) -> SevereCancer(x))", "all x.(BileDistrictCancer(x) -> SevereCancer(x))", "all x.(BileDuctCancer(x) -> SevereCancer(x))"]}
{"id": "folio_validation_475", "nl": "All Cholangiocarcinoma is bile duct cancer.", "fol": "all x.(IsCholangiocarcinoma(x) -> IsBileDuctCancer(x))", "prediction": ["all x.(Cholangiocarcinoma(x) -> BileDuctCancer(x))", "all x.(Chlolangiocarcinoma(x) -> BileDuctCancer(x))", "all x.(Clolangiocarcinoma(x) -> BileDuctCancer(x))", "all x.(Cholangiocarcinoma(x) -> BileDductCancer(x))", "all x.(Chlolangiocarcinoma(x) -> BileDductCancer(x))", "all x.(Cholingiocarcinoma(x) -> BileDuctCancer(x))", "all x.(Challengiocarcinoma(x) -> BileDuctCancer(x))", "all x.(Chloangiocarcinoma(x) -> BileDuctCancer(x))", "all x.(Cholangiocarcinoma(x) -> BileDuctCancer(x))", "all x.(Cholangiocarcinoma(x) -> BileDoubleCancer(x))", "all x.(Clolangiocarcinoma(x) -> BileDductCancer(x))", "all x.(Cholangiocarcinoma(x) -> (BileDuctCancer(x)))", "all x.(Chlongiocarcinoma(x) -> BileDuctCancer(x))", "all x.(Cholangiocarcinoma(x) -> BileDuitCancer(x))", "all x.(Cholangiocarcinoma(x) -> (BileDuctCancer(x)))", "all x.(Chlolangiocarcinoma(x) -> BileDuitCancer(x))"]}
{"id": "folio_validation_476", "nl": "No one with mild flu has a low survival rate.", "fol": "all x.(HasMildFlu(x) -> -HasLowSurvivalRate(x))", "prediction": ["-exists x.(MildFlu(x) & LowSurvivalRate(x))", "all x.((MildFlu(x) & -LowSurvivalRate(x)) -> -(MildFlu(x) & LowSurvivalRate(x)))", "all x.((MildFlu(x) & -LowSurvivalRate(x)) -> -LowSurvivalRate(x))", "all x.(MildFlu(x) -> LowSurvivalRate(x))", "all x.(MildFlu(x) -> -LowSurvivalRate(x))", "all x.((MildFlu(x) & LowSurvivalRate(x)) -> -(MildFlu(x) & LowSurvivalRate(x)))", "all x.((MildFlu(x) & -LowSurvivalRate(x)) -> -HasLowSurvivalRate(x))", "all x.((MildFlu(x) & LowSurvivalRate(x)) -> -LowSurvivalRate(x))", "all x.((MildFlu(x) & LowSurvivalRate(x)) -> -exists y.(MildFlu(y) & Has(x,y)))", "all x.((MildFlu(x) & -LowSurvivalRate(x)) -> -HasSurvivalRate(x))", "all x.((MildFlu(x) & -LowSurvivalRate(x)) -> -SurvivalRate(x))", "all x.((MildFlu(x) & -LowSurvivalRate(x)) -> -(MildFlu(x) & -LowSurvivalRate(x)))", "all x.((MildFlu(x) & -LowSurvivalRate(x)) -> -LowSurvival(x))", "all x.((MildFlu(x) & LowSurvivalRate(x)) -> -HasLowSurvivalRate(x))", "all x.((MildFlu(x) & -LowSurvivalRate(x)) -> -(MildFlu(x) & LowSurvivalRate(x))))", "all x.((MildFlu(x) & -LowSurvivalRate(x)) -> -MildFlu(x))"]}
{"id": "folio_validation_477", "nl": "If colorectal cancer is a bile duct cancer and the survival rate is low, then colorectal cancer is not a bile duct cancer.", "fol": "((IsBileDuctCancer(ColorectalCancer) | HasLowSurvivalRate(ColorectalCancer)) -> -IsBileDuctCancer(ColorectalCancer))", "prediction": ["all x.((ColoredCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "all x.((ColoredCancer(x) & BileDductCancer(x) & LowSurvivalRate(x)) -> -BileDductCancer(x))", "all x.((ColoredCancer(x) & BileDuctCancer(x) & SurvivalRateLow(x)) -> -BileDuctCancer(x))", "all x.((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "all x.((ColoredCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "all x.((ColoredCancer(x) & BileDductCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "all x.((ColorectalCancer(x) & BileDuctCancer(x) & SurvivalRateLow(x)) -> -BileDuctCancer(x))", "all x.((ColorectalCancer(x) & BileDductCancer(x) & LowSurvivalRate(x)) -> -BileDductCancer(x))", "all x.((ColoredCancer(x) & BileDductCancer(x) & SurvivalRateLow(x)) -> -BileDductCancer(x))", "all x.((ColoredCancer(x) & BileDuctCancer(x) & LowSurvival(x)) -> -BileDuctCancer(x))", "all x.((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "all x.((ColoredCancer(x) & BileDductCancer(x) & LowSurvivalRate(x)) -> -BileDductCancer(x))", "all x.((ColoredCancerous(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "all x.((ColoredCancer(x) & BileDuctCancer(x) & SurvivalRateLow(x)) -> -BileDuctCancer(x))", "all x.((ColoredCancer(x) & BileDuctCancer(x) & SurvivalRateLow(x)) -> -BileDuctCancer(x))", "all x.((ColoredCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDductCancer(x))"]}
{"id": "folio_validation_478", "nl": "Colorectal cancer is a severe cancer", "fol": "IsSevereCancer(ColorectalCancer)", "prediction": ["all x.(ColorectalCancer(x) -> (SevereCancer(x) & SevereCancer(x)))", "all x.(ColoredCancer(x) -> (SevereCancer(x) & ColorectalCancer(x)))", "all x.(ColoredCancer(x) -> (SevereCancer(x) & SevereCancer(x) & ColorectalCancer(x)))", "all x.(ColoredCancer(x) -> (SevereCancer(x) & SevereCancer(x)))", "all x.(ColoredCancer(x) -> SevereCancer(x))", "all x.(ColorealCancer(x) -> (SevereCancer(x) & ColorectalCancer(x)))", "all x.(ColonialCancer(x) -> (SevereCancer(x) & ColorectalCancer(x)))", "all x.(ColorectalCancer(x) -> SevereCancer(x))", "all x.(ColorectalCancer(x) -> (SevereCancer(x) & SevereCancer(x) & ColorectalCancer(x)))", "all x.(ColonialCancer(x) -> (SevereCancer(x) & SevereCancer(x) & ColorectalCancer(x)))", "all x.(ColoredCancer(x) -> (SevereCancer(x) & ColorectalCancer(x)))", "all x.(ColoredCancer(x) -> (SevereCancer(x) & SevereCancer(x) & ColorectalCancer(x)))", "all x.(ColorealCancer(x) -> (SevereCancer(x) & SevereCancer(x) & ColorectalCancer(x)))", "all x.(ColorectalCancer(x) -> (SevereCancer(x) & SevereCancer(x) & SevereCancer(x)))", "all x.(ColorectalCancer(x) -> (SevereCancer(x) & RareCancer(x)))", "all x.(ColorectalCancer(x) -> (SevereCancer(x) & SevereCancer(x)))"]}
{"id": "folio_validation_479", "nl": "If colorectal cancer is a bile duct cancer or a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer and a mild flu.", "fol": "((IsBileDuctCancer(ColorectalCancer) | IsCholangiocarcinoma(ColorectalCancer)) -> (IsBileDuctCancer(ColorectalCancer) & HasMildFlu(ColorectalCancer)))", "prediction": ["all x.((ColonialCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.((ColoredCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.((ColonialCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.((ColoredCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.((ColonialCancer(x) & (BileDductCancer(x) | Cholangiocarcinoma(x))) -> (BileDductCancer(x) & MildFlu(x)))", "all x.((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.((ColonialCancer(x) & (BileDductCancer(x) | Cholangiocarcinoma(x))) -> (BileDductCancer(x) & MildFlu(x)))", "all x.((ColonialCancer(x) & (BileDuctCancerous(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.((ColoredCancer(x) & (BileDductCancer(x) | Cholangiocarcinoma(x))) -> (BileDductCancer(x) & MildFlu(x)))", "all x.((ColonialCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFluid(x)))", "all x.((ColonialCancer(x) & (bileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.((ColoradolCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.((ColorectalCancer(x) & (BileDductCancer(x) | Cholangiocarcinoma(x))) -> (BileDductCancer(x) & MildFlu(x)))", "all x.((ColonialCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "all x.((ColoredCancer(x) & (BileDductCancer(x) | Cholangiocarcinoma(x))) -> (BileDductCancer(x) & MildFlu(x)))"]}
{"id": "folio_validation_480", "nl": "If colorectal cancer is not a mild flu and a Cholangiocarcinoma, then colorectal cancer is a bile duct cancer or a Cholangiocarcinoma.", "fol": "(((-HasMildFlu(ColorectalCancer) | -IsCholangiocarcinoma(ColorectalCancer)) -> IsBileDuctCancer(ColorectalCancer)) | IsCholangiocarcinoma(ColorectalCancer))", "prediction": ["all x.((ColonialCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColorectalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColoredCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColonialCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColorectalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColoredCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColoradolCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColonialCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BuleDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColonialCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDductCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColorectalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BuleDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColorectalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDductCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColonialCancer(x) & -MildFluid(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColonialCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColonialCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDductCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColorectalCancerous(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "all x.((ColorectalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDductCancer(x) | Cholangiocarcinoma(x)))"]}
{"id": "folio_validation_481", "nl": "All people who eat salads regularly are very conscious about their health and eating habits.", "fol": "all x.(EatsSaladRegularly(x) -> ConsciousAboutHealth(x))", "prediction": ["all x.((Person(x) & EatsSaladsRegularly(x)) -> VeryConsciousAboutHealthAndEatingHabits(x))", "all x.((Person(x) & EatsSaladsRegularly(x)) -> VeryConsciousAboutHealthAndEatingHabits(x))", "all x.((Person(x) & EatsSaladsRegularly(x)) -> (ConsciousOfHealth(x) & ConsciousOfEatingHabits(x)))", "all x.(EatsSaladsRegularly(x) -> VeryConsciousAboutHealthAndEatingHabits(x))", "all x.(EatsSaladsRegularly(x) -> (ConsciousOfHealth(x) & ConsciousOfEatingHabits(x)))", "all x.((Person(x) & EatsSaladsRegularly(x)) -> VeryConsciousOfHealthAndEatingHabits(x))", "all x.((Person(x) & EatsSaladsRegularly(x)) -> (ConsciousAboutHealth(x) & ConsciousAboutEatingHabits(x)))", "all x.((Person(x) & EatsSaladsRegularly(x)) -> ConsciousOfHealthAndEatingHabits(x))", "all x.((People(x) & EatsSaladsRegularly(x)) -> VeryConsciousAboutHealthAndEatingHabits(x))", "all x.((Person(x) & EatsSaladsRegularly(x)) -> VeryConscientiousAboutHealthAndEatingHabits(x))", "all x.((Person(x) & EatsSaladsRegularly(x)) -> ConsciousAboutHealthAndEatingHabits(x))", "all x.((Person(x) & EatsSaladsRegularly(x)) -> (ConsciousOfHealth(x) & ConsciousOfEatingHabits(x)))", "all x.(EatsSaladsRegularly(x) -> ConsciousOfHealthAndEatingHabits(x))", "all x.((Person(x) & EatsSaladsRegularly(x)) -> (ConsciousOfHealth(x) & ConciousOfEatingHabits(x)))", "all x.(EatsSaladsRegularly(x) -> VeryConsciousOfHealthAndEatingHabits(x))", "all x.(EatsSaladsRegularly(x) -> (ConsciousOfHealthAndEatingHabits(x)))"]}
{"id": "folio_validation_482", "nl": "All people who grew up in health-conscious childhood homes eat salads regularly.", "fol": "all x.(GrewUpInHealthConsciousHome(x) -> EatsSaladRegularly(x))", "prediction": ["all x.((Person(x) & GrownUpInHealthConsciousChildrenHomes(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & GrownUpInHealthConsciousHomes(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & grewUpInHealthConsciousChildrenHomes(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & grewUpInHealthConsciousHomes(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & GrowingUpInHealthConsciousHomes(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & GrownUpInHealthConsciousHouses(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & GrowingUpInHealthConsciousChildrenHomes(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & GrownUpInHealthConsciousChildrenHome(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & GrownInHealthConsciousChildrenHomes(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & GrownInHealthConsciousHomes(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & grewUpInHealthConsciousChildrenHome(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & grewUpInHealthConsciousHouses(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & GrownUpInHealthConsciousCrownHomes(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & GrowingUpInHealthConsciousHouses(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & GrownInHealthConsciousChildrenHome(x)) -> EatsSaladsRegularly(x))", "all x.((Person(x) & GrowingUpInHealthConsciousChildrenHome(x)) -> EatsSaladsRegularly(x))"]}
{"id": "folio_validation_483", "nl": "All people who fulfill their nutritional daily intakes grew up in health-conscious childhood homes.", "fol": "all x.(FulfillsNutritionalIntake(x) -> GrewUpInHealthConsciousHome(x))", "prediction": ["all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> grewUpInHealthConsciousChildrenHomes(x))", "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> GrownUpInHealthConsciousChildrenHomes(x))", "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> GrownUpInHealthConsciousHomes(x))", "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> GrowsUpInHealthConsciousHomes(x))", "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> grewUpInHealthConsciousHomes(x))", "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> GrowsUpInHealthConsciousChildrenHomes(x))", "all x.((Person(x) & FulfillsNutritionalDaylyIntakes(x)) -> grewUpInHealthConsciousChildrenHomes(x))", "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> GrownUpInHealthConsciousHouses(x))", "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> grewUpInHealthConsciousHouses(x))", "all x.((Person(x) & FulfillsNutritionalDaylyIntakes(x)) -> GrownUpInHealthConsciousChildrenHomes(x))", "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> GrowsUpInHealthConsciousHouses(x))", "all x.((Person(x) & FulfillsNutritionalDaylyIntakes(x)) -> GrownUpInHealthConsciousHomes(x))", "all x.((Person(x) & FulfillsNutritionalDaylyIntakes(x)) -> grewUpInHealthConsciousHomes(x))", "all x.((Person(x) & FulfillsNutritionalDaylyIntakes(x)) -> GrowsUpInHealthConsciousHomes(x))", "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> HealthConsciousChildrenHome(x))", "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> grewUpInHealthConsciousChildrenHome(x))"]}
{"id": "folio_validation_484", "nl": "If people have good relationships with their parents, then they fulfill their nutritional daily intakes.", "fol": "all x.(HasGoodRelationshipWithParents(x) -> -ConsciousAboutHealth(x))", "prediction": ["all x.((Person(x) & GoodRelationshipsWithParents(x)) -> FulfillsNutritionalDailyIntakes(x))", "all x.((Person(x) & GoodRelationships(x)) -> FulfillsNutritionalDailyIntakes(x))", "all x y.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> FulfillsNutritionalDailyIntakes(x,y))", "all x.((Person(x) & GoodRelationshipsWithParents(x)) -> FulfillsNutritionalDaylyIntakes(x))", "all x y.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> FulfillsNutritionalDailyIntakes(x))", "all x.(GoodRelationshipsWithParents(x) -> FulfillsNutritionalDailyIntakes(x))", "all x.((People(x) & GoodRelationshipsWithParents(x)) -> FulfillsNutritionalDailyIntakes(x))", "all x y.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> FulfillsNutritionalDaylyIntakes(x,y))", "all x.((Person(x) & HasGoodRelationshipsWithParents(x)) -> FulfillsNutritionalDailyIntakes(x))", "all x y.((Person(x) & Parent(y) & HasGoodRelationships(x,y)) -> FulfillsNutritionalDailyIntakes(x,y))", "all x.((Person(x) & GoodRelationships(x)) -> FulfillsNutritionalDaylyIntakes(x))", "all x y.((Person(x) & Parent(y) & GoodRelationshipsWith(x,y)) -> FulfillsNutritionalDailyIntakes(x))", "all x y.((Person(x) & Parent(y) & HasGoodRelationships(x,y)) -> FulfillsNutritionalDailyIntakes(x))", "all x.((Person(x) & GoodRelationships(x) & Parent(x)) -> FulfillsNutritionalDailyIntakes(x))", "all x y.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> FulfillsNutritionalDaylyIntakes(x))", "all x y.((Person(x) & Parent(y) & GoodRelationshipsWith(x,y)) -> FulfillsNutritionalDailyIntakes(x,y))"]}
{"id": "folio_validation_485", "nl": "If people have good relationships with their parents, then they do not eat salads regularly.", "fol": "all x.(VisitsGymRegularly(x) -> FulfillsNutritionalIntake(x))", "prediction": ["all x.((Person(x) & GoodRelationshipsWithParents(x)) -> -EatsSaladsRegularly(x))", "all x.((Person(x) & GoodRelationships(x)) -> -EatsSaladsRegularly(x))", "all x.((Person(x) & GoodRelationshipsWithParents(x)) -> -EatSaladsRegularly(x))", "all x y.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> -EatsSaladsRegularly(x))", "all x.((Person(x) & GoodRelationships(x)) -> -EatSaladsRegularly(x))", "all x.((Person(x) & HasGoodRelationshipsWithParents(x)) -> -EatsSaladsRegularly(x))", "all x.((People(x) & GoodRelationshipsWithParents(x)) -> -EatsSaladsRegularly(x))", "all x y.((Person(x) & Parent(y) & HasGoodRelationships(x,y)) -> -EatsSaladsRegularly(x))", "all x.((Person(x) & HasGoodRelationships(x)) -> -EatsSaladsRegularly(x))", "all x y.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> -EatSaladsRegularly(x))", "all x.(GoodRelationshipsWithParents(x) -> -EatsSaladsRegularly(x))", "all x.((Person(x) & GoodRelationships(x) & Parent(x)) -> -EatsSaladsRegularly(x))", "all x.((People(x) & GoodRelationshipsWithParents(x)) -> -EatSaladsRegularly(x))", "all x.((Person(x) & GoodRelationships(x) & Parents(x)) -> -EatsSaladsRegularly(x))", "all x.(GoodRelationshipsWithParents(x) -> -EatSaladsRegularly(x))", "all x.((Person(x) & GoodRelationships(x,Parents)) -> -EatsSaladsRegularly(x))"]}
{"id": "folio_validation_486", "nl": "If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes.", "fol": "(((GrewUpInHealthConsciousHome(Taylor) & HasGoodRelationshipWithParents(Taylor)) | -GrewUpInHealthConsciousHome(Taylor)) & -HasGoodRelationshipWithParents(Marcy))", "prediction": ["all x.((Person(x) & VisitsGym(x) & AtLeastOnceADay(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x.((Person(x) & VisitsGym(x) & AtLeastOneDay(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x.((Person(x) & VisitsGym(x) & AtLeastOnceADay(x)) -> FulfillsNutritionalIntakes(x))", "all x.((Person(x) & VisitsGym(x) & AtLeastOneDay(x)) -> FulfillsNutritionalIntakes(x))", "all x.((People(x) & VisitsGym(x) & AtLeastOnceADay(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x.((Person(x) & VisitsGym(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x.((People(x) & VisitsGym(x) & AtLeastOneDay(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x.((People(x) & VisitGym(x) & AtLeastOnceADay(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x.((Person(x) & VisitsGym(x,y) & AtLeastOnceADay(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x.((People(x) & VisitGym(x) & AtLeastOneDay(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x.((Person(x) & VisitsGym(x,y) & AtLeastOneDay(x)) -> FulfillsDailyNutritionalIntakes(x))", "all x.((Person(x) & VisitsGym(x)) -> FulfillsNutritionalIntakes(x))", "all x.((Person(x) & VisitsGym(x,y) & AtLeastOneDay(y)) -> FulfillsDailyNutritionalIntakes(x))", "all x.((Person(x) & VisitsGym(x,y) & AtLeastOneDay(y)) -> FulfillsDailyNutritionalIntakes(x,y))", "all x.((Person(x) & VisitsGym(x,x)) -> FulfillsDailyNutritionalIntakes(x))", "all x.((Person(x) & VisitsGym(x) & EveryDay(x)) -> FulfillsNutritionalIntakes(x))"]}
{"id": "folio_validation_487", "nl": "Taylor eats salads regularly.", "fol": "EatsSaladRegularly(Taylor)", "prediction": ["all x.(Taylor(x) -> EatsSaladsRegularly(x))", "all x y.((Taylor(x) & Salad(y)) -> EatsRegularly(x,y))", "Taylor eatsSaladsRegularly.", "Taylor eatsSaladsRegularly(Taylor)", "All x.(Taylor(x) -> EatsSaladsRegularly(x))", "(Eats(Taylor,Salad) & Regularly(Taylor,Salad))", "(Eats(Taylor,Salads) & Regularly(Taylor,Salads))", "all x y.((Taylor(x) & Salad(y)) -> EatsRegularly(x,y))", "(Eats(Taylor,Salad) & Regular(Taylor,Salad))", "(EatsSalads(Taylor) & Regularly(Taylor))", "all x y.((Taylor(x) & Salad(y)) -> Eats(x,y))", "(Eats(Taylor(Taylor) & Salad(Taylor))", "all x y.((Taylor(x) & Salad(y)) -> EatingRegularly(x,y))", "(EatsSaladsRegularly(Taylor))", "(Eats(Taylor,Salads) & Regular(Taylor,Salads))", "(Eats(Taylor(Taylor) & Salads(Taylor))"]}
{"id": "folio_validation_488", "nl": "Taylor visits the gym at least once a day.", "fol": "VisitsGymRegularly(Taylor)", "prediction": ["all x.(Taylor(x) -> VisitsGym(x))", "all x y.((Taylor(x) & Gym(y)) -> VisitsAtLeastOneDay(x,y))", "all x y.((Taylor(x) & Gym(y)) -> Visits(x,y))", "all x.(Taylor(x) -> exists y.(Gym(y) & Visits(x,y))))", "all x.(Taylor(x) -> VisitsGym(x,y))", "all x y.((Taylor(x) & Gym(y)) -> VisitsAtLeast(x,y))", "all x y.((Taylor(x) & Gym(y)) -> VisitsAtLeastOnceADay(x,y))", "all x y z.((Taylor(x) & Gym(y) & Gym(z)) -> VisitsAtLeastOneDay(x,y,z))", "all x y.((Taylor(x) & Gym(y)) -> VisitsAtLeastOneDaily(x,y))", "all x y z.((Taylor(x) & Gym(y) & Gym(z)) -> Visits(x,y,z))", "all x y.((Taylor(x) & Gym(y)) -> VisitsAtLeastOnly(x,y))", "all x.(Taylor(x) -> (VisitsGym(x) & AtLeastOneDay(x)))", "all x y.((Taylor(x) & Gym(y)) -> VisitsAtLeastOnce(x,y))", "all x y.((Taylor(x) & Gym(y)) -> VisitsAtLeastOneOfDay(x,y))", "all x y z.((Taylor(x) & Gym(y) & Day(z)) -> Visits(x,y,z))", "all x y.((Taylor(x) & Gym(y)) -> VisitsAtLeastOf(x,y))"]}
{"id": "folio_validation_489", "nl": "Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day.", "fol": "-(GrewUpInHealthConsciousHome(Taylor) | VisitsGymRegularly(Taylor))", "prediction": ["all x.(Taylor(x) & -(GrowsUpInHealthConsciousHome(x) | VisitsGym(x))) -> -(GrowsUpInHealthConsciousHome(x) & VisitsGym(x)))", "all x.(Taylor(x) & -(GrowsUpInHealthConsciousChildrenHome(x) | VisitsGym(x))) -> -(GrowsUpInHealthConsciousChildrenHome(x) & VisitsGym(x)))", "all x.((Taylor(x) & -(GrowsUpInHealthConsciousHome(x) | VisitsGym(x))) -> -(GrowsUpInHealthConsciousHome(x) & VisitsGym(x))))", "all x.(Taylor(x) & -(GrowsUpInHealthConsciousHome(x) | VisitsGymAtLeastOneDay(x))) -> -(GrowsUpInHealthConsciousHome(x) & VisitsGymAtLeastOneDay(x)))", "all x.(Taylor(x) & -(GrowsUpInHealthConsciousHome(x) | VisitsGym(x))) -> -(GrowsUpInHealthConsciousHome(x) & -(GrowsUpInHealthConsciousHome(x) & VisitsGym(x))))", "all x.((Taylor(x) & -(GrowsUpInHealthConsciousHome(x) | VisitsGym(x))) -> -(GrowsUpInHealthConsciousHome(x) & -(GrowsUpInHealthConsciousHome(x) & VisitsGym(x))))", "-(Taylor(Taylor) & -(GrowsUpInHealthConsciousHome(Taylor) | VisitsGym(Taylor)))", "all x.((Taylor(x) & -(GrowsUpInHealthConsciousHome(x) | VisitsGym(x))) -> -(GrowsUpInHealthConsciousHome(x) | VisitsGym(x))))", "all x.(Taylor(x) & -(GrowsUpInHealthConsciousHome(x) | VisitsGym(x))) -> -(GrowsUpInHealthConsciousHome(x) & -GrowsUpInHealthConsciousHome(x)))", "all x.(Taylor(x) & -(GrowsUpInHealthConsciousHome(x) | VisitsGymAtLeastOnceADay(x))) -> -(GrowsUpInHealthConsciousHome(x) & VisitsGymAtLeastOnceADay(x)))", "all x.(Taylor(x) & -(GrowsUpInHealthConsciousHome(x) | VisitsGym(x))) -> -(GrowsUpInHealthConsciousHome(x) & -GrowsUpInGym(x)))", "all x.((Taylor(x) & -(GrowsUpInHealthConsciousHome(x) | VisitsGym(x))) -> -(GrowsUpInHealthConsciousHome(x) & -(GrowsUpInHealthConsciousHome(x) & VisitsGym(x)))))", "all x.((Taylor(x) & -(GrowsUpInHealthConsciousHome(x) | VisitsGym(x))) -> -(GrowsUpInHealthConsciousHome(x) & VisitsGym(x)))", "all x.(Taylor(x) & -(GrowsUpInHealthConsciousChildrenHome(x) | VisitsGym(x))) -> -(GrowsUpInHealthConsciousChildrenHome(x) & -GrowsUpInHealthConsciousChildrenHome(x)))", "all x.(Taylor(x) -> (-GrowsUpInHealthConsciousHome(x) & -VisitsGym(x)))", "all x.(Taylor(x) & -(GrowsUpInHealthConsciousHome(x) | VisitsGym(x))) -> -(GrowsUpInHealthConsciousHome(x) | VisitsGym(x)))"]}
{"id": "folio_validation_490", "nl": "[BG] The Olympic games is a sporting event. ", "fol": "IsSportingEvent(Olympics)", "prediction": ["all x.(OlympicGames(x) -> SportingEvent(x))", "[BG] The OlympicGames(Olympics) is a sportingEvent(Olympics)", "[BG] (OlympicGames(Olympics) & SportingEvent(Olympics))", "all x.(OlympicGames(x) -> SportsalEvent(x))", "all x.(OlympicGame(x) -> SportingEvent(x))", "all x.(OlympicGames(x) -> SportsingEvent(x))", "all x.(OlympicGames(x) -> SportiveEvent(x))", "[BG] The OlympicGames(OlympicGames) is a sportingEvent(OlympicGames)", "all x.(OlympicGames(x) -> SportsmanlikeEvent(x))", "[BG] (OlympicGames(Olympics) & SportiveEvent(Olympics))", "[BG] The OlympicGames(Olympics) is sportingEvent(Olympics)", "[BG] (OlympicGames(x) & SportingEvent(x))", "all x.(OlympicGames(x) -> SportsionalEvent(x))", "all x y.((OlympicGames(x) & SportingEvent(y)) -> [BG]]", "[BG] The OlympicGames(x) is a sportingEvent(x))", "[BG] The OlympicGames(Olympics) is a sportingEvent(OlympicGames)"]}
{"id": "folio_validation_491", "nl": "The last Olympic games was in Tokyo.", "fol": "LastOlympicGames(Tokyo)", "prediction": ["all x.(OlympicGames(x) -> InTokyo(x))", "all x.(OlympicGame(x) -> InTokyo(x))", "(OlympicGames(Olympics) & InTokyo(Olympics))", "all x y.((OlympicGame(x) & Tokyo(y)) -> LastGame(x,y))", "All x.(OlympicGames(x) -> InTokyo(x))", "all x y.((OlympicGame(x) & Tokyo(y)) -> Last(x,y))", "all x y.((OlympicGames(x) & Tokyo(y)) -> Last(x,y))", "all x y.((OlympicGame(x) & Tokyo(y)) -> LastOlympicGame(x,y))", "all x.(OlympicGames(x) -> Tokyo(x))", "all x y.((OlympicGames(x) & Tokyo(y)) -> LastOlympicGames(x,y))", "All x.(OlympicGame(x) -> InTokyo(x))", "all x y.((OlympicGame(x) & Tokyo(y)) -> PlayedIn(x,y))", "all x.(OlympicGames(x) -> InTokyo(x))", "all x y.((OlympicGame(x) & Tokyo(y)) -> HeldIn(x,y))", "all x.(OlympicGames(x) -> WasInTokyo(x))", "all x.(OlympicGames(x) -> Tokio(x))"]}
{"id": "folio_validation_492", "nl": "The United States won the most medals in Tokyo. ", "fol": "WonMostMedals(UnitedStates,Tokyo)", "prediction": ["all x y.((UnitedStates(x) & Tokyo(y)) -> WonMostMedals(x,y))", "all x y.((UnitedStates(x) & Tokyo(y)) -> WinsMostMedals(x,y))", "all x y.((UnitedStates(x) & Tokyo(y)) -> WonMostMedal(x,y))", "all x y.((UnitedStates(x) & Tokyo(y)) -> WinsMostMedal(x,y))", "all x y z.((UnitedStates(x) & Tokyo(y) & Medal(z)) -> WonMostIn(x,y,z))", "all x y.((UnitedState(x) & Tokyo(y)) -> WonMostMedals(x,y))", "all x y.((UnitedStates(x) & Tokyo(y)) -> WinsMoreMedals(x,y))", "all x y z.((UnitedState(x) & Tokyo(y) & Medal(z)) -> WonMostIn(x,y,z))", "all x y.((UnitedStates(x) & Tokyo(y)) -> WonMoreMedals(x,y))", "all x y.((UnitedState(x) & Tokyo(y)) -> WinsMostMedals(x,y))", "all x y z.((UnitedStates(x) & Tokyo(y) & Medals(z)) -> WonMostIn(x,y,z))", "all x y.((U.S.A.(x) & Tokyo(y)) -> WonMostMedals(x,y))", "all x.((UnitedStates(x) & MostMedals(x,Tokyo)) -> Won(x,Tokyo))", "all x y.((UnitedStates(x) & Tokyo(y)) -> wonMostMedals(x,y))", "all x y z.((UnitedStates(x) & Tokyo(y) & Medal(z)) -> WonMostIn(x,z))", "all x y z.((UnitedStates(x) & Tokyo(y) & Medal(z)) -> WinsMostIn(x,y,z))"]}
{"id": "folio_validation_493", "nl": "The world championships is a sporting event.", "fol": "IsSportingEvent(Champs)", "prediction": ["all x.(WorldChampionship(x) -> SportingEvent(x))", "all x.(WorldChampionship(x) -> SportsalEvent(x))", "all x.(WorldChampionship(x) -> SportiveEvent(x))", "all x.(WorldChampionship(x) -> SportsiveEvent(x))", "all x.(WorldChampionship(x) -> SportsingEvent(x))", "all x.(WorldChampionship(x) -> SportsionalEvent(x))", "all x.(WorldChampionship(x) -> SportsmanlikeEvent(x))", "all x.(WorldChampionship(x) -> SportsyEvent(x))", "all x.(WorldChampionship(x) -> Sportsmanship(x))", "all x.(WorldChampionship(x) -> AthleticEvent(x))", "all x.(WorldCampionate(x) -> SportingEvent(x))", "all x y.((WorldChampionship(x) & SportingEvent(y)) -> Is(x,y))", "all x y.((WorldChampionship(x) & World(y)) -> SportingEvent(x))", "all x.(WorldCampaign(x) -> SportingEvent(x))", "all x.(WorldChampionship(x) -> (SportingEvent(x) & -SportingEvent(x)))", "all x y.((WorldChampionship(x) & SportingEvent(y)) -> Competes(x,y))"]}
{"id": "folio_validation_494", "nl": "The last Olympic games were not in Tokyo.", "fol": "-LastOlympicGames(Tokyo)", "prediction": ["all x.(OlympicGames(x) -> -Tokyo(x))", "all x.(OlympicGame(x) -> -Tokyo(x))", "all x.(OlympicGames(x) -> -InTokyo(x))", "all x.(OlympicGame(x) -> -InTokyo(x))", "All x.(OlympicGames(x) -> -Tokyo(x))", "(OlympicGames(Olympics) & -Tokyo(Olympics))", "all x y.((OlympicGame(x) & Tokyo(y)) -> -InTokyo(x,y))", "-exists x.(OlympicGame(x) & -InTokyo(x))", "all x.(OlympicGames(x) -> -(InTokyo(x) & InTokyo(x)))", "-exists x.(OlympicGames(x) & -InTokyo(x))", "all x y.((OlympicGame(x) & Tokyo(y)) -> -Tokyo(x))", "all x.(OlympicGames(x) -> -(InTokyo(x) | InTokyo(x)))", "all x y.((OlympicGame(x) & Tokyo(y)) -> -InTokyo(x))", "all x.(OlympicGames(x) -> -(InTokyo(x) | InTokyo(x))))", "all x.(OlympicGames(x) & -Tokyo(x))", "All x.(OlympicGame(x) -> -Tokyo(x))"]}
{"id": "folio_validation_495", "nl": "The United States won the most medals in the last Olympic games.", "fol": "exists x.(LastOlympicGames(x) & WonMostMedals(UnitedStates,x))", "prediction": ["all x y.((UnitedStates(x) & OlympicGames(y)) -> WonMostMedals(x,y))", "all x y.((UnitedStates(x) & OlympicGames(y)) -> WinsMostMedals(x,y))", "all x y.((UnitedStates(x) & OlympicGame(y)) -> WonMostMedals(x,y))", "all x y.((UnitedState(x) & OlympicGame(y)) -> WonMostMedals(x,y))", "all x y.((UnitedState(x) & OlympicGames(y)) -> WonMostMedals(x,y))", "all x y.((UnitedStates(x) & OlympicGame(y)) -> WinsMostMedals(x,y))", "all x y.((UnitedStates(x) & OlympicGames(y)) -> WonMostMedal(x,y))", "all x y.((UnitedStates(x) & OlympicGames(y)) -> WinsMostMedal(x,y))", "all x y.((UnitedState(x) & OlympicGame(y)) -> WinsMostMedals(x,y))", "all x y.((UnitedStates(x) & OlympicGame(y)) -> WonMostMedal(x,y))", "all x y.((UnitedState(x) & OlympicGames(y)) -> WinsMostMedals(x,y))", "all x y.((UnitedStates(x) & OlympicGame(y)) -> WinsMostMedal(x,y))", "all x y.((UnitedState(x) & OlympicGame(y)) -> WonMostMedal(x,y))", "all x y z.((UnitedState(x) & OlympicGames(y) & Medals(z)) -> WonMost(x,z))", "all x y z.((UnitedState(x) & OlympicGame(y) & Medal(z)) -> WonMost(x,z))", "all x y z.((UnitedStates(x) & OlympicGames(y) & Medals(z)) -> WonMost(x,z))"]}
{"id": "folio_validation_496", "nl": "All horses have hooves.", "fol": "all x.(IsHorse(x) -> HasHooves(x))", "prediction": ["all x.(Horse(x) -> HasHooves(x))", "all x.(Horse(x) -> HasHoove(x))", "all x.(Horse(x) -> HasHooves(x))", "all x y.((Horse(x) & Horse(y)) -> HasHooves(x,y))", "all x.(Horse(x) -> HasHooves(x))", "all x.exists y.(Horse(x) & Horse(y) & HasHoove(x,y))", "all x.(Hoove(x) -> Horse(x))", "all x.exists y.(Horse(x) & Horse(y) & HasHooves(x,y))", "all x.(Horse(x) -> Hooves(x))", "all x.(Horse(x) -> HasHoops(x))", "all x y.((Horse(x) & Horse(y)) -> HasHoove(x,y))", "all x.(HasHooves(x) -> Horse(x))", "(all x.(Horse(x) -> HasHooves(x)))", "all x y.((Horse(x) & Horse(y)) -> HasHooves(x))", "all x.exists y.(Horse(x) & Horse(y) & HasHooves(y))", "all x y.((Horse(x) & Horse(y)) -> HasHooves(y))"]}
{"id": "folio_validation_497", "nl": "No humans have hooves.", "fol": "all x.(IsHuman(x) -> -HasHooves(x))", "prediction": ["-exists x.(Human(x) & HasHooves(x))", "-exists x.(Human(x) & HasHoove(x))", "all x.(Human(x) -> -HasHooves(x))", "-exists x.(Human(x) & Hoove(x))", "exists x.(Human(x) & -HasHooves(x))", "all x.(Human(x) -> NoHooves(x))", "-exists x.(Human(x) & HasHooves(x))", "-exists x.(Human(x) & -HasHooves(x))", "(-exists x.(Human(x) & HasHooves(x)))", "-exists x.(Human(x) & HasHoops(x))", "all x.(Human(x) -> -HasHoove(x))", "-exists x.(Human(x) & Hooves(x))", "-exists x.(Human(x) & Hoop(x))", "(-exists x.(Human(x) & HasHoove(x)))", "-exists x.(Human(x) & Hoove(y))", "-exists x.(Human(x) & HasHoop(x))"]}
{"id": "folio_validation_498", "nl": "Some humans are horses.", "fol": "exists x.(IsHuman(x) & IsHorse(x))", "prediction": ["exists x.(Human(x) & Horse(x))", "exists x y.(Human(x) & Horse(y))", "exists x.(Habitat(x) & Horse(x))", "exists x.(Human(x) & Horse(x))", "(exists x.(Human(x) & Horse(x)))", "exists x.(Human(x) & Equine(x))", "exists x.(Human(x) & Horse(y))", "exists x.(Hunt(x) & Horse(x))", "exist x.(Human(x) & Horse(x))", "exists x.(Human(x) & Host(x))", "all x.(Human(x) -> Horse(x))", "exists x.(Human(x) & Hippo(x))", "exists x.(Human(x) & Hoop(x))", "exists x.(Habit(x) & Horse(x))", "exists x.(Hum(x) & Horse(x))", "exists x.(Human(x) | Horse(x))"]}
{"id": "folio_validation_499", "nl": "Susan flies to LGA airport.", "fol": "FlyToAirport(Susan,Lga)", "prediction": ["all x y.((Susan(x) & Airport(y)) -> FliesTo(x,y))", "all x y z.((Susan(x) & Airport(y) & Airport(z)) -> FliesTo(x,y,z))", "all x.((Susan(x) & LGAAirport(y)) -> FliesTo(x,y))", "all x.((Susan(x) & Airport(y)) -> FliesTo(x,y))", "all x.(Susan(x) -> FliesToLGAAirport(x))", "all x y.((Susan(x) & LGAAirport(y)) -> FliesTo(x,y))", "all x.((Susan(x) & LGAAirport(x)) -> FliesTo(x,y))", "all x y.((Susan(x) & Airport(y) & FliesTo(x,y)) -> FliesTo(x,y))", "all x.((Susan(x) & Airport(l)) -> FliesTo(x,l))", "all x.((Susan(x) & Airport(LGA)) -> FliesTo(x,LGA))", "all x.(Fly(x) -> LGAAirport(x))", "all x y z.((Susan(x) & Airport(y) & Airport(z)) -> FliesTo(x,y))", "all x.((Susan(x) & LGAAirport(x)) -> FliesTo(x,Susan))", "all x y.((Susan(x) & Airport(y) & FliesTo(x,y)) -> FlyTo(x,y))", "all x.((Susan(x) & FliesToLGAAirport(x)) -> FliesTo(x,LGAAirport))", "all x.((Susan(x) & LGAAirport(x)) -> FliesTo(x))"]}
{"id": "folio_validation_500", "nl": "The departure and arrival can not be the same airport.", "fol": "all x y.((FlyFromAirport(x,y) & -FlyToAirport(x,y)) | (-FlyFromAirport(x,y) & FlyToAirport(x,y)))", "prediction": ["all x.((Airport(x) & Airport(x)) -> -(Departure(x) & Arrival(x))))", "all x.((Airport(x) & Airport(x)) -> -(Departure(x) | Arrival(x))))", "all x.((Airport(x) & Airport(x)) -> -(Departure(x) & Arrival(x)))", "all x.((Airport(x) & Departure(x) & Arrival(x)) -> -SameAirport(x))", "all x.((Airport(x) & Departure(x) & Arrival(x)) -> -(Airport(x) & Airport(x)))", "all x.((Airport(x) & Airport(x) & Departure(x) & Arrival(x)) -> -SameAirport(x))", "all x y.((Airport(x) & Airport(y)) -> -(Departure(x,y) & Arrival(x,y)))", "all x.((Airport(x) & Airport(y)) -> -(Departure(x,y) & Arrival(x,y)))", "all x.((Airport(x) & Departure(x) & Arrival(x)) -> -(Airport(x) & Airport(x))))", "all x.((Airport(x) & Airport(x) & Departure(x) & Arrival(x)) -> -(Airport(x) & Airport(x)))", "all x.(Departure(x) & Arrival(x))", "all x.((Airport(x) & Airport(y)) -> -(Departure(x,y) & Arrival(x,y))))", "all x.((Airport(x) & Airport(x) & Departure(x) & Arrival(x)) -> -(Departure(x) & Arrival(x))))", "all x.((Airport(x) & Airport(y)) -> -(Departure(x,y) | Arrival(x,y))))", "all x.((Airport(x) & Airport(y)) -> -(Departure(x) & Arrival(x)))", "all x.((Departure(x) & Arrival(x)) -> -(SameAirport(x) & SameAirport(x)))"]}
{"id": "folio_validation_501", "nl": "John flies from LGA airport.", "fol": "FlyFromAirport(John,Lga)", "prediction": ["all x y.((John(x) & Airport(y)) -> FliesFrom(x,y))", "John flies from LGA airport.", "all x.(John(x) -> FliesFromLGAAirport(x))", "all x.((John(x) & Airport(y)) -> FliesFrom(x,y))", "(FliesFromLGAAirport(John))", "all x y.((John(x) & Airport(y) & FliesFrom(x,y)) -> LGA(x))", "all x y.((John(x) & Airport(y)) -> Flies(x,y))", "John flies from LGA Airport.", "all x.((John(x) & LGAAirport(y)) -> FliesFrom(x,y))", "all x.((John(x) & FliesFromLGAAirport(x)) -> FliesFrom(x,LGAAirport))", "all x.((John(x) & Airport(l)) -> FliesFrom(x,l))", "all x.((John(x) & LGAAirport(x)) -> FliesFrom(x,y))", "(FliesFrom(John,LGA) & Airport(John,LGA))", "all x.((John(x) & Airport(l)) -> FliesFrom(x,l,l))", "all x.((John(x) & Airport(x)) -> FliesFrom(x,LGA))", "all x.((John(x) & FliesFromLGAAirport(x)) -> FliesFrom(x))"]}
{"id": "folio_validation_502", "nl": "Susan flies from LGA airport.", "fol": "FlyFromAirport(Susan,Lga)", "prediction": ["all x y.((Susan(x) & Airport(y)) -> FliesFrom(x,y))", "all x y z.((Susan(x) & Airport(y) & Airport(z)) -> FliesFrom(x,y,z))", "all x.((Susan(x) & Airport(y)) -> FliesFrom(x,y))", "all x.((Susan(x) & LGAAirport(y)) -> FliesFrom(x,y))", "all x y.((Susan(x) & Airport(y)) -> Flies(x,y))", "all x.(Susan(x) -> FliesFromLGAAirport(x))", "all x y z.((Susan(x) & Airport(y) & Airport(z) & FliesFrom(x,y,z)) -> FliesFrom(x,y,z))", "all x y z.((Susan(x) & Airport(y) & Airport(z)) -> Flies(x,y,z))", "all x y.((Susan(x) & LGAAirport(y)) -> FliesFrom(x,y))", "all x.((Susan(x) & LGAAirport(x)) -> FliesFrom(x,y))", "all x.((Susan(x) & Airport(l)) -> FliesFrom(x,l))", "all x y z.((Susan(x) & Airport(y) & Airport(z) & FliesFrom(x,y,z)) -> FliesFrom(x,y))", "all x y.((Susan(x) & Airport(y) & FliesFrom(x,y)) -> LGA(x))", "all x y z.((Susan(x) & Airport(y) & Airport(z) & FliesFrom(x,y,z)) -> Flies(x,y,z))", "all x.((Susan(x) & LGAAirport(x)) -> Flies(x))", "all x.((Susan(x) & LGAAirport(y)) -> Flies(x,y))"]}
{"id": "folio_validation_503", "nl": "John flies to LGA airport.", "fol": "FlyToAirport(John,Lga)", "prediction": ["all x y.((John(x) & Airport(y)) -> FliesTo(x,y))", "all x.(John(x) -> FliesToLGAAirport(x))", "all x.((John(x) & Airport(y)) -> FliesTo(x,y))", "all x.((John(x) & FliesToLGAAirport(x)) -> FliesTo(x,LGAAirport))", "John flies to LGA airport.", "all x y.((John(x) & Airport(y) & FliesTo(x,y)) -> LGA(x))", "all x y.((John(x) & LGAAirport(y)) -> FliesTo(x,y))", "all x.((John(x) & FliesTo(x,LGA)) -> FliesTo(x,LGA))", "all x y.((John(x) & Airport(y) & FliesTo(x,y)) -> FliesTo(x,y))", "(FliesToLGAAirport(John))", "all x.((John(x) & LGAAirport(y)) -> FliesTo(x,y))", "all x.((John(x) & FliesToLGAAirport(x)) -> FliesTo(x))", "all x y.((John(x) & Airport(y) & FliesTo(x,y)) -> FlyTo(x,y))", "all x.((John(x) & LGAAirport(x)) -> FliesTo(x,y))", "all x.((John(x) & Airport(l)) -> FliesTo(x,l))", "all x.((John(x) & Airport(x)) -> FliesTo(x,LGA))"]}
{"id": "folio_validation_504", "nl": "No one nice to animals is mean to animals.", "fol": "all x.(NiceToAnimals(x) -> -MeanToAnimals(x))", "prediction": ["all x.(NiceToAnimals(x) -> MeanToAnimals(x))", "-exists x.(NiceToAnimals(x) & MeanToAnimals(x))", "all x.((NiceToAnimals(x) & MeanToAnimals(x)) -> -NiceToAnimals(x))", "-all x.(NiceToAnimals(x) -> MeanToAnimals(x))", "all x.((PleasantToAnimals(x) & MeanToAnimals(x)) -> -PleasantToAnimals(x))", "all x y.((NiceToAnimals(x) & Animal(y)) -> MeanToAnimals(x,y))", "all x y.((NiceToAnimals(x) & Animal(y)) -> MeanToAnimals(x))", "all x y.((Person(x) & NiceToAnimals(x) & Animal(y)) -> MeanToAnimals(x))", "all x.((NiceToAnimals(x) & MeanToAnimals(x)) -> -PrettyToAnimals(x))", "all x y.((Person(x) & NiceToAnimals(x) & Animal(y)) -> MeanToAnimals(x,y))", "all x.((Person(x) & NiceToAnimals(x)) -> MeanToAnimals(x))", "all x.((NiceToAnimals(x) & MeanToAnimals(x)) -> -PleasantToAnimals(x))", "all x y.((Person(x) & NiceToAnimals(x)) -> MeanToAnimals(x))", "all x.((NiceToAnimals(x) & MeanToAnimals(x)) -> -PoorToAnimals(x))", "all x.(PleasantToAnimals(x) -> MeanToAnimals(x))", "all x.((NiceToAnimals(x) & MeanToAnimals(x)) -> -NeatToAnimals(x))"]}
{"id": "folio_validation_505", "nl": "Some grumpy people are mean to animals.", "fol": "exists x.(GrumpyPerson(x) & MeanToAnimals(x))", "prediction": ["exists x.(GumpyPerson(x) & MeanToAnimals(x))", "exists x.(Gumpy(x) & MeanToAnimals(x))", "exists x.(grumpy(x) & MeanToAnimals(x))", "exists x.(HumpyPerson(x) & MeanToAnimals(x))", "exists x.(Humpy(x) & MeanToAnimals(x))", "exists x.(GrumpyPerson(x) & MeanToAnimals(x))", "exists x.(GumpyPeople(x) & MeanToAnimals(x))", "exists x.(Grumpy(x) & MeanToAnimals(x))", "exists x.(GgrumpyPerson(x) & MeanToAnimals(x))", "exists x.(Gumpie(x) & MeanToAnimals(x))", "exists x.(Ggrumpy(x) & MeanToAnimals(x))", "exists x.(MeanToAnimals(x) & GrumpyPerson(x))", "exists x.(MeanToAnimals(x) & GrumpyPeople(x))", "exists x.(GumPerson(x) & MeanToAnimals(x))", "exists x.(MeanToAnimals(x) & Grumpy(x))", "exists x.(HumpyPeople(x) & MeanToAnimals(x))"]}
{"id": "folio_validation_506", "nl": "All animal lovers are nice to animals.", "fol": "all x.(LovesAnimals(x) -> NiceToAnimals(x))", "prediction": ["all x.(AnimalLover(x) -> NiceToAnimals(x))", "all x.(AnimalLover(x) -> NiceToAnimals(x))", "all x.(AnimalLieutor(x) -> NiceToAnimals(x))", "all x y.((AnimalLover(x) & Animal(y)) -> NiceTo(x,y))", "all x.(AnimalLieutenant(x) -> NiceToAnimals(x))", "all x.(Animal(x) -> NiceToAnimals(x))", "all x.((AnimalLover(x) & NiceToAnimals(x)) -> NiceToAnimals(x))", "all x.(AnimalLievers(x) -> NiceToAnimals(x))", "all x.(AnimalFavorite(x) -> NiceToAnimals(x))", "all x.(AnimalLief(x) -> NiceToAnimals(x))", "all x.(AnimalLies(x) -> NiceToAnimals(x))", "all x.(AnimalFan(x) -> NiceToAnimals(x))", "all x.(AnimalLover(x) -> NiceToAnimals(x))", "all x.((AnimalLover(x) & NiceToAnimals(x)) -> AnimalLover(x))", "all x.(AnimalLieutarian(x) -> NiceToAnimals(x))", "all x.(AnimalLover(x) -> NiceToAnimal(x))"]}
{"id": "folio_validation_507", "nl": "If someone owns a pet, then they love animals.", "fol": "all x.(OwnsPet(x) -> LovesAnimals(x))", "prediction": ["all x.(OwnsPet(x) -> LoveAnimals(x))", "all x.(OwnsPet(x) -> LovesAnimals(x))", "all x.((OwnsPet(x) & LovesAnimals(x)) -> LovesAnimals(x))", "all x.((OwnsPet(x) & LovesAnimals(x)) -> OwnsPet(x))", "all x.((OwnsPet(x) & LoveAnimals(x)) -> OwnsPet(x))", "all x.((OwnsPet(x) & LoveAnimals(x)) -> LoveAnimals(x))", "all x.((OwnsPet(x) & Animal(y)) -> Loves(x,y))", "all x y.((OwnsPet(x) & Animal(y)) -> Loves(x,y))", "all x y.((OwnsPet(x) & Pet(y)) -> LovesAnimals(x))", "all x y.((OwnsPet(x) & Pet(y)) -> LovesAnimals(x,y))", "all x.((OwnsPet(x) & LovesAnimals(x)) -> PetOwner(x))", "all x.((OwnsPet(x) & LoveAnimals(x)) -> LovePets(x))", "all x.((OwnsPet(x) & Animal(y)) -> Love(x,y))", "all x y.((OwnsPet(x) & Animal(y)) -> Love(x,y))", "all x.((OwnsPet(x) & LoveAnimals(x)) -> LovesAnimals(x))", "all x.((OwnsPet(x) & Animal(x)) -> Loves(x,animals))"]}
{"id": "folio_validation_508", "nl": "Tom is a pet owner.", "fol": "OwnsPet(Tom)", "prediction": ["all x.(PetOwner(x) -> Tom(x))", "(Pet(Tom) & PetOwner(Tom))", "(PetOwner(Tom) | PetOwner(Tom)))", "(PetOwner(Tom) & PetOwner(Tom))", "all x.((Tom(x) & PetOwner(x)) -> PetOwner(x))", "all x.(PetOwner(x) -> TomOwner(x))", "all x.(PetOwner(x) -> (Tom(x) & PetOwner(x)))", "all x.(PetOwner(x) -> PetOwner(x))", "all x.(PetOwner(x) -> Tom(x))", "all x.(PetOwner(x) -> (Tom) | PetOwner(x)))", "all x.(Pet(x) -> Owner(x))", "exists x.(PetOwner(x) & Tom(x))", "all x.(PetOwner(x) -> TomOwns(x))", "all x.(Pet(x) -> PetOwner(x))", "(PetOwner(Tom) -> PetOwner(Tom))", "all x.((Tom(x) & PetOwner(x)) -> Owner(x))"]}
{"id": "folio_validation_509", "nl": "Tom is a grumpy person.", "fol": "GrumpyPerson(Tom)", "prediction": ["all x.(Tom(x) -> GrumpyPerson(x))", "all x.((Tom(x) & Grumpy(x)) -> Person(x))", "all x.((Tom(x) & GrumpyPerson(x)) -> GrumpyPerson(x))", "all x.(Tam(x) -> GrumpyPerson(x))", "all x.((Tom(x) & GrumpyPerson(x)) -> Grumpy(x))", "all x.(GumpyPerson(x) -> Tom(x))", "all x.((Tom(x) & Grumpy(x)) -> Grumpy(x))", "all x.((Tom(x) & Grumpy(x)) -> GrumpyPerson(x))", "all x.(Tom(x) -> Grumpy(x))", "all x.((Tom(x) & Grumpy(x)) -> (Person(x) & Person(x)))", "all x.((Tom(x) & Grumpy(x)) -> Guy(x))", "all x.((Tom(x) & Grumpy(x)) -> Gumpy(x))", "all x.(GrumpyPerson(x) -> Tom(x))", "all x.(Gumpy(x) -> Tom(x))", "all x.((Tom(x) & Grumpy(x)) -> GumpyPerson(x))", "all x.((Tom(x) & Grumpy(x)) -> Puppy(x))"]}
{"id": "folio_validation_510", "nl": "Tom is not a grumpy person and mean to animals.", "fol": "-(GrumpyPerson(Tom) & MeanToAnimals(Tom))", "prediction": ["all x.(Tom(x) -> (-grumpy(x) & MeanToAnimals(x)))", "all x.(Tom(x) -> (-grumpyPerson(x) & MeanToAnimals(x)))", "all x.(Tom(x) -> (-GumpyPerson(x) & MeanToAnimals(x)))", "all x.((Tom(x) & -Gumpy(x) & MeanToAnimals(x)) -> -Gumpy(x))", "all x.((Tom(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> -GumpyPerson(x))", "all x.((Tom(x) & -Gumpy(x) & MeanToAnimals(x)) -> -MeanToAnimals(x))", "all x.(Tom(x) -> (-Gumpy(x) & MeanToAnimals(x)))", "all x.((Tom(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> -MeanToAnimals(x))", "all x.((Tom(x) & -Gumpy(x) & MeanToAnimals(x)) -> -GumpyPerson(x))", "all x.((Tom(x) & -Gumpy(x)) -> MeanToAnimals(x))", "all x.((Tom(x) & -grumpy(x) & MeanToAnimals(x)) -> -MeanToAnimals(x))", "all x.((Tom(x) & -Gumpy(x) & MeanToAnimals(x)) -> -GumpyToAnimals(x))", "all x.((Tom(x) & -Gumpie(x) & MeanToAnimals(x)) -> -Gumpie(x))", "all x.(Tom(x) -> (-GrumpyPerson(x) & MeanToAnimals(x)))", "all x.((Tom(x) & -Gumpy(x) & MeanToAnimals(x)) -> -GumPerson(x))", "all x.(Tam(x) -> (-grumpy(x) & MeanToAnimals(x)))"]}
{"id": "folio_validation_511", "nl": "If Tom is not a grumpy person and mean to animals, then Tom is neither a grumpy person nor an Animal Lover.", "fol": "(-(GrumpyPerson(Tom) & MeanToAnimals(Tom)) -> -(GrumpyPerson(Tom) | LovesAnimals(Tom)))", "prediction": ["all x.((Tom(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> (-GumpyPerson(x) & -AnimalLover(x)))", "all x.((Tam(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> (-GumpyPerson(x) & -AnimalLover(x)))", "all x.((Tom(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> (-GumpyPerson(x) & -AnimalLover(x)))", "all x.((Tom(x) & -GrumpyPerson(x) & MeanToAnimals(x)) -> (-GrumpyPerson(x) & -AnimalLover(x)))", "all x.((GumpyPerson(x) & MeanToAnimals(x)) -> (-GumpyPerson(x) & -AnimalLover(x)))", "all x.((Tam(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> (-GumpyPerson(x) & -AnimalLover(x)))", "all x.((HumpyPerson(x) & MeanToAnimals(x)) -> (-HumpyPerson(x) & -AnimalLover(x)))", "all x.((GumpyPerson(x) & MeanToAnimals(x)) -> (-GumpyPerson(x) & -AnimalLover(x)))", "all x.((Tam(x) & -GrumpyPerson(x) & MeanToAnimals(x)) -> (-GrumpyPerson(x) & -AnimalLover(x)))", "all x.((Tom(x) & -GrumpyPerson(x) & MeanToAnimals(x)) -> (-GrumpyPerson(x) & -AnimalLover(x)))", "all x.((Tom(x) & -Gumpy(x) & MeanToAnimals(x)) -> (-Gumpy(x) & -AnimalLover(x)))", "all x.((HumpyPerson(x) & MeanToAnimals(x)) -> (-HumpyPerson(x) & -AnimalLover(x)))", "all x.((Tom(x) & -Gumpy(x) & MeanToAnimals(x)) -> (-Gumpy(x) & -AnimalLover(x)))", "all x.((Tam(x) & -GrumpyPerson(x) & MeanToAnimals(x)) -> (-GrumpyPerson(x) & -AnimalLover(x)))", "all x.((Tom(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> -GumpyPerson(x) & -AnimalLover(x))", "all x.((Tam(x) & -Gumpy(x) & MeanToAnimals(x)) -> (-Gumpy(x) & -AnimalLover(x)))"]}
{"id": "folio_validation_512", "nl": "A podcast is not a novel.", "fol": "all x.(Podcast(x) -> -Novel(x))", "prediction": ["all x.(Podcast(x) -> -Novel(x))", "exists x.(Podcast(x) & -Novel(x))", "all x.(Podcast(x) -> -Novel(x))", "all x y.((Podcast(x) & Novel(y)) -> -Novel(x))", "all x.((Podcast(x) & -Novel(x)) -> -Novel(x))", "all x y.((Podcast(x) & Novel(y)) -> -(Novel(x) & -Novel(y)))", "all x.(Podcast(x) -> -Narrative(x))", "all x y.((Podcast(x) & Novel(y)) -> -(Novel(x) & -Novel(x)))", "all x y.((Podcast(x) & Novel(y)) -> -(Novel(x) & Podcast(y)))", "all x y.((Podcast(x) & Novel(y)) -> -(Novel(x) & Podcast(x)))", "all x y.((Podcast(x) & Novel(y)) -> -(Novel(x) & Novel(y)))", "all x y.((Podcast(x) & Novel(y)) -> -(Novel(x) | Novel(y))))", "all x.( Podcast(x) -> -Novel(x))", "all x y.((Podcast(x) & Novel(y)) -> -Novel(x,y))", "all x.((Podcast(x) & -Novel(x)) -> -(Novel(x) & -Novel(x)))", "all x y.((Podcast(x) & Novel(y)) -> -(Novel(x) | Novel(y)))"]}
{"id": "folio_validation_513", "nl": "[BG] If a person is born in American City, the person is American.", "fol": "all x.exists y.((BornInCity(x,y) & City(y) & AmericanStatus(y)) -> AmericanStatus(x))", "prediction": ["all x.((Person(x) & BornInAmericanCity(x)) -> American(x))", "all x.((BirthInAmericanCity(x) & BornInAmericanCity(x)) -> American(x))", "all x.(BornInAmericanCity(x) -> American(x))", "all x.(BirthInAmericanCity(x) -> American(x))", "all x.((BirthInAmericanCity(x)) -> American(x))", "all x y.((Person(x) & BornInAmericanCity(x)) -> American(x))", "all x.((BirthInAmericanCity(x) & BirthedInAmericanCity(x)) -> American(x))", "all x.((Person(x) & BornInAmericanCity(x)) -> AmericanPerson(x))", "all x.((BornInAmericanCity(x) & Person(x)) -> American(x))", "all x.((BirthInAmericanCity(x) & AmericanCity(x)) -> American(x))", "all x y.((Person(x) & BornInAmericanCity(x,y)) -> American(x))", "all x y.((Person(x) & BornInAmericanCity(x) & BornInAmericanCity(x)) -> American(x))", "all x y.((BirthInAmericanCity(x) & Person(y) & BornInAmericanCity(y,x)) -> American(y))", "all x y.((Person(x) & BornInAmericanCity(x) & BornInAmericanCity(x,y)) -> American(x))", "all x y.((BirthInAmericanCity(x) & Person(y) & BornInAmericanCity(y)) -> American(y))", "all x y.((Person(x) & BornInAmericanCity(x) & AmericanCity(y)) -> American(x))"]}
{"id": "folio_validation_514", "nl": "[BG] If a book is novel and it is written by a person, then the person is a novel writer.", "fol": "all x y.((Novel(x) & WrittenByAuthor(x,y)) -> NovelWriter(y))", "prediction": ["all x.((Book(x) & Novel(x) & WrittenByPerson(x)) -> NovelWriter(x))", "all x.((Book(x) & Novel(x) & WrittenBy(x,Person)) -> NovelWriter(x))", "all x.((Book(x) & Novel(x) & WrittenBy(x)) -> NovelWriter(x))", "all x y.((Book(x) & Novel(x) & WrittenBy(x,y)) -> NovelWriter(y))", "all x y.((Book(x) & Novel(x) & WrittenBy(x,y)) -> NovelWriter(x))", "all x y.((Book(x) & Novel(x) & Person(y) & WrittenBy(y,x)) -> NovelWriter(y))", "all x.((Book(x) & Novel(x) & WrittenBy(x,y)) -> NovelWriter(y))", "all x y.((Book(x) & Novel(x) & Person(y) & WrittenBy(x,y)) -> NovelWriter(y))", "all x.((Book(x) & Novel(x) & WrittenBy(x,y)) -> NovelWriter(x))", "all x.((Book(x) & Novel(x) & WrittenBy(x,person)) -> NovelWriter(x))", "all x y.((Book(x) & Novel(y) & WrittenBy(x,y)) -> NovelWriter(x))", "all x y.((Book(x) & Person(y) & Novel(x) & WrittenBy(y,x)) -> NovelWriter(y))", "all x y.((Book(x) & Novel(x) & Person(y) & WrittenBy(y,x)) -> NovelWriter(y,x))", "all x y.((Book(x) & Novel(x) & WrittenBy(x,y) & Person(y)) -> NovelWriter(y))", "all x y.((Book(x) & Novel(x) & Person(y) & WrittenBy(y,x)) -> NovelWriter(x))", "all x y z.((Book(x) & Person(y) & Novel(z) & WrittenBy(y,z)) -> NovelWriter(y,z))"]}
{"id": "folio_validation_515", "nl": "Dani Shapiro is an American writer.", "fol": "(AmericanStatus(Dani_Shapiro) & Writer(Dani_Shapiro))", "prediction": ["Dani Shapiro is an AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Danie", "Dani Shapiro is an AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Danie", "Dani Shapiro is an AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Danie", "Dani Shapiro is an AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Danie", "Dani Shapiro is an AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Danie", "Dani Shapiro is an AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Danie", "Dani Shapiro is an AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Danie", "Dani Shapiro is an AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Danie", "Dani Shapiro is an AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Danie", "Dani Shapiro is an AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Danie", "Dani Shapiro is an AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Danie", "Dani Shapiro is an AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Danie", "Dani Shapiro is an AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Danie", "Dani Shapiro is an AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Danie", "Dani Shapiro is an AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Danie", "Dani Shapiro is an AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel(Daniel) & AmericanWriter(Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel,Daniel)Danie"]}
{"id": "folio_validation_516", "nl": "Family History is written by Dani Shapiro.", "fol": "WrittenByAuthor(Family_History,Dani_Shapiro)", "prediction": ["all x.(FamilyHistory(x) -> WrittenByDaniShapiro(x))", "all x.(FamilyHistory(x) -> WrittenByDaniShakero(x))", "all x y.((FamilyHistory(x) & DaniShapiro(y)) -> WrittenBy(x,y))", "All x.(FamilyHistory(x) -> WrittenByDaniShapiro(x))", "all x y.((FamilyHistory(x) & DaniShakero(y)) -> WrittenBy(x,y))", "All x.(FamilyHistory(x) -> WrittenByDaniShakero(x))", "All x y.((FamilyHistory(x) & DaniShapiro(y)) -> WrittenBy(x,y))", "all x.(FamilyHistory(x) -> WrittenByDaniShapiro(x))", "(FamilyHistory(Family) & WrittenByDaniShapiro(Family))", "All x.(FamilyHistory(x) -> WrittenByDaniShapiro(x))", "all x.(FamilyHistory(x) -> WrittenByDaniShakero(x))", "all x.(FamilyHistory(x) -> WrittenByDaniShapero(x))", "(WrittenByDaniShapiro(FamilyHistory)", "(FamilyHistory(f) & WrittenByDaniShapiro(f))", "all x y.((FamilyHistory(x) & DaniShapiro(y)) -> WrittenBy(y,x))", "(FamilyHistory(Family) & WrittenByDaniShakero(Family))"]}
{"id": "folio_validation_517", "nl": "Family History is a novel written in 2003.", "fol": "(Novel(Family_History) & PublishedInYear(Family_History,Y2003))", "prediction": ["all x.(FamilyHistory(x) -> WrittenIn2003(x))", "(Novel(FamilyHistory) & WrittenIn2003(FamilyHistory))", "all x.((Novel(x) & WrittenIn2003(x)) -> FamilyHistory(x))", "all x.(FamilyHistory(x) -> (Novel(x) & WrittenIn2003(x)))", "all x.(FamilyHistory(x) -> (Novel(x,2003) & WrittenIn(x,2003)))", "All x.(FamilyHistory(x) -> WrittenIn2003(x))", "all x.(FamilyHistory(x) -> (Novel(x) & WrittenIn2003(x)))", "(Novel(FamilyHistory) & WrittenIn(FamilyHistory) & WrittenIn(FamilyHistory) & WrittenIn(FamilyHistory) & WrittenIn(FamilyHistory))", "(Novel(FamilyHistory) & WrittenIn(FamilyHistory) & WrittenIn(FamilyHistory) & WrittenIn(FamilyHistory))", "all x.(FamilyHistory(x) -> WrittenIn2003(x))", "(Novel(FamilyHistory,2003) & WrittenIn(FamilyHistory,2003))", "(Novel(FamilyHistory) & WrittenIn(FamilyHistory) & WrittenIn(FamilyHistory))", "(Narrative(FamilyHistory) & WrittenIn2003(FamilyHistory))", "all x.(FamilyHistory(x) -> Novel(x) & WrittenIn2003(x))", "all x.(FamilyHistoria(x) -> WrittenIn2003(x))", "all x.(FamilyHistory(x) -> WrittenIn(x,2003))"]}
{"id": "folio_validation_518", "nl": "Dani Shapiro created a podcast called Family Secrets.", "fol": "(Podcast(Family_Secrets) & CreatedByAuthor(Family_Secrets,Dani_Shapiro))", "prediction": ["Dani Shapiro created a podcast called FamilySecrets.", "all x.((DaniShapiro(x) & FamilySecrets(x)) -> CreatedPodcast(x))", "all x.((DaniShakero(x) & FamilySecrets(x)) -> CreatedPodcast(x))", "(CreatedBlog(DaniShapiro,FamilySecrets) | CreatedBlog(DaniShapiro,FamilySecrets))", "(CreatedBlog(DaniShapiro,FamilySecrets) & FamilySecrets(DaniShapiro,FamilySecrets))", "all x.((DaniShapiro(x) & FamilySecrets(x)) -> CreatesPodcast(x))", "all x.((DaniShakero(x) & FamilySecrets(x)) -> CreatesPodcast(x))", "(CreatedBlog(DaniShapiro,FamilySecrets) -> CreatedBy(DaniShapiro,FamilySecrets))", "(CreatedBlog(DaniShapiro,FamilySecrets) | CreatedBlog(DaniShapiro,FamilySecrets)))", "(CreatedBlog(DaniShapiro,FamilySecrets) & Created(DaniShapiro,FamilySecrets))", "all x.((DaniShakero(x) & FamilySecrets(x)) -> Created(x,FamilySecrets))", "all x.((DaniShapiro(x) & FamilySecrets(x)) -> Created(x,FamilySecrets))", "all x.((DaniShapiro(x) & FamilySecrets(x)) -> CreatedBlog(x))", "all x.((DaniShakero(x) & FamilySecrets(x)) -> CreatedBlog(x))", "all x.((DaniShapiro(x) & FamilySecrets(x)) -> Created(x,y))", "Dani Shapiro created Podcast called FamilySecrets."]}
{"id": "folio_validation_519", "nl": "[BG] Boston is an American city.", "fol": "(City(Boston) & AmericanStatus(Boston))", "prediction": ["[BG] Boston is an AmericanCity.", "[BG] Boston is AmericanCity(x)", "[Boston(Boston) & AmericanCity(Boston))", "(AsianCity(Boston) & AmericanCity(Boston))", "[BG] Boston is an AmericanCity(x))", "[BG] Boston is AmericanCity.", "[BG] Boston is a AmericanCity.", "[BG] Boston is an AmericanCity(x)", "[BG] Boston is AmericanCity(x))", "(AmericanCity(Boston) & [Boston(Boston) | Boston(Boston)))", "(AmericanCity(Boston) & AmericanCity(Boston))", "(AmericanCity(Boston) & [BG] -> AmericanCity(Boston))", "[BG] Boston (City(x) & American(x))", "(AsianCity(Boston) & [Boston(Boston) | Boston(Boston)))", "[BG] Boston (AmericanCity))", "(AsianCity(Boston) & [BG] -> AmericanCity(Boston))"]}
{"id": "folio_validation_520", "nl": "Dani Shapiro is a novel writer.", "fol": "NovelWriter(Dani_Shapiro)", "prediction": ["all x.((NarrativeWriter(x) & DaniShapiro(x)) -> NovelWriter(x))", "all x.((NovelWriter(x) & DaniShapiro(x)) -> NovelWriter(x))", "all x.((NarrativeWriter(x) & DaniShakero(x)) -> NovelWriter(x))", "(NovelWriter(DaniShapiro) & NovelWriter(DaniShapiro))", "all x.((NovelWriter(x) & DaniShakero(x)) -> NovelWriter(x))", "all x.((NarrativeWriter(x) & DaniShapiro(x)) -> Novel(x))", "(NovelWriter(DaniShakero) & NovelWriter(DaniShakero))", "all x.(NarrativeWriter(x) -> DaniShapiro(x))", "(NovelWriter(DaniShapiro) & Novel(DaniShapiro))", "all x.(NovelWriter(x) -> DaniShapiro(x))", "all x.((DaniShapiro(x) & NovelWriter(x)) -> DaniShapiro(x))", "all x.((DaniShapiro(x) & NovelWriter(x)) -> DaniShakero(x))", "all x.(NarrativeWriter(x) -> DaniShakero(x))", "all x.((NarrativeWriter(x) & DaniShakero(x)) -> Novel(x))", "all x.((DaniShapiro(x) & NovelWriter(x)) -> NovelWriter(x))", "all x.((NovelWriter(x) & DaniShapiro(x)) -> Novel(x))"]}
{"id": "folio_validation_521", "nl": "Family Secrets is a novel.", "fol": "Novel(Family_Secrets)", "prediction": ["all x.(FamilySecrets(x) -> Novel(x))", "All x.(FamilySecrets(x) -> Novel(x))", "(Novel(FamilySecrets) & Novel(FamilySecrets))", "all x.((FamilySecrets(x) & Novel(x)) -> Novel(x))", "(Narrative(FamilySecrets) & Novel(FamilySecrets))", "(Novel(FamilySecrets) -> Novel(FamilySecrets))", "All x.((FamilySecrets(x) & Novel(x)) -> Novel(x))", "all x.((FamilySecrets(x) & Novel(x)) -> Is(x,y))", "(Novel(FamilySecrets) & Novel(Family(Family))", "all x.((FamilySecrets(x) & Novel(x)) -> Contains(x,y))", "exists x.(FamilySecrets(x) & Novel(x))", "all x.(FamilySecret(x) -> Novel(x))", "all x.((FamilySecrets(x) & Novel(x)) -> WrittenBy(x))", "all x.((FamilySecrets(x) & Novel(x)) -> Reads(x))", "All x.((FamilySecrets(x) & Novel(x)) -> Contains(x,y))", "All x.((FamilySecrets(x) & Novel(x)) -> Is(x,y))"]}
{"id": "folio_validation_522", "nl": "Dani Shapiro was born in Boston.", "fol": "BornInCity(Dani_Shapiro,Boston)", "prediction": ["Dani Shapiro was born in Boston.", "(Birth(DaniShapiro,Boston) & BornIn(DaniShapiro,Boston))", "(Birth(DaniShapiro) & BornIn(DaniShapiro,Boston))", "(Birth(DaniShapiro,Boston) -> BornIn(DaniShapiro,Boston))", "(Birth(DaniShakero,Boston) & BornIn(DaniShakero,Boston))", "DaniShapiro was born in Boston.", "(Birth(DaniShakero) & BornIn(DaniShakero,Boston))", "(Birth(DaniShapiro,Boston) -> BornIn(DaniShapiro,Boston))", "(Birth(DaniShakero,Boston) -> BornIn(DaniShakero,Boston))", "(Birth(DaniShapiro) & BornInBoston(DaniShapiro))", "(Birth(DaniShakero) & BornIn(DaniShapiro,Boston))", "DaniShakero was born in Boston.", "(Birth(DaniShapiro) & BornIn(DaniShakero,Boston))", "(Birth(DaniShapiro) & BornIn(DaniShapiro))", "(Birth(DaniShakero) & BornInBoston(DaniShakero))", "(Birth(DaniShapiro) & BornIn(DaniShapiro,Boston))"]}
{"id": "folio_validation_523", "nl": "Some basketball players are not American.", "fol": "exists x.(IsBasketballPlayer(x) & -IsAmerican(x))", "prediction": ["exists x.(BasketballPlayer(x) & -American(x))", "exists x.(BasketballPlayer(x) & -Am\u00e9rican(x))", "exists x.(BasketballPlayer(x) & -American(x))", "exists x.(BasketballPlayer(x) & -American(x))", "exists x y.(BasketballPlayer(x) & BasketballPlayer(y) & -American(y))", "exists x y.(BasketballPlayer(x) & BasketballPlayer(y) & -American(x))", "exists x y.(BasketballPlayer(x) & Player(y) & -American(y))", "exists x.(BalloonPlayer(x) & -American(x))", "exists x y.(BasketballPlayer(x) & Player(y) & -American(x))", "exists x.(BasketballPlayer(x) & -Am\u00e9ricain(x))", "exists x.(BasketballPlayer(x) & -Amerikan(x))", "exists x.(BasketballPlayer(x) & -Am\u00e9ricain(x))", "exists x.(BasketballPlayer(x) & -America(x))", "exists x.(BasketballPlayer(x) & -(American(x) | American(x))))", "exists x.(BasketballPlayer(x) & -(American(x) | American(x)))", "exists x.(BasketballPilot(x) & -American(x))"]}
{"id": "folio_validation_524", "nl": "All basketball players are tall.", "fol": "all x.(IsBasketballPlayer(x) -> IsTall(x))", "prediction": ["all x.(BasketballPlayer(x) -> Tall(x))", "all x y.((BasketballPlayer(x) & Player(y)) -> Tall(x))", "all x y.((BasketballPlayer(x) & Player(y)) -> Tall(x,y))", "(all x.(BasketballPlayer(x) -> Tall(x)))", "all x.(BalloonPlayer(x) -> Tall(x))", "all x.(BasketballPilot(x) -> Tall(x))", "all x.exists y.(BasketballPlayer(x) & Tall(y))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x y.((BasketballPlayer(x) & Player(y)) -> Tall(y))", "(all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPositioner(x) -> Tall(x))", "-all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPace(x) -> Tall(x))", "exists x.(BasketballPlayer(x) & Tall(x))", "All x.(BasketballPlayer(x) -> Tall(x))"]}
{"id": "folio_validation_525", "nl": "If someone is tall, they wear large shoes.", "fol": "all x.(IsTall(x) -> WearsLargeShoes(x))", "prediction": ["all x.(Tall(x) -> WearLargeShoes(x))", "all x.(Tall(x) -> WearsLargeShoes(x))", "all x.((Tall(x) & WearsLargeShoes(x)) -> Tall(x))", "all x.((Tall(x) & WearLargeShoes(x)) -> Tall(x))", "all x.((Tall(x) -> WearsLargeShoes(x))", "all x.((Person(x) & Tall(x)) -> WearLargeShoes(x))", "all x.(Tall(x) -> WornLargeShoes(x))", "all x.((Tall(x) -> WearLargeShoes(x))", "all x.((Person(x) & Tall(x)) -> WearsLargeShoes(x))", "all x.((Tall(x) & WornLargeShoes(x)) -> Tall(x))", "all x.((Tall(x) & WearsLargeShoes(x)) -> Tight(x))", "all x.((Taller(x) & WearsLargeShoes(x)) -> Tall(x))", "all x.((Tall(x) & WearsLargeShoes(x)) -> LongShoes(x))", "all x.(Tall(x) -> WearLargeShoes(x))", "all x.(Taller(x) -> WearsLargeShoes(x))", "all x.((Tall(x) & WearsLargeShoes(x)) -> LargeShoes(x))"]}
{"id": "folio_validation_526", "nl": "If someone wears large shoes, they wear large-sized clothes.", "fol": "all x.(WearsLargeShoes(x) -> WearsLargeClothes(x))", "prediction": ["all x.(WearsLargeShoes(x) -> WearsLargeSizedClothes(x))", "all x.((WearsLargeShoes(x) & WearsLargeSizedClothes(x)) -> WearsLargeSizedClothes(x))", "all x.((WornsLargeShoes(x) & WearsLargeSizedClothes(x)) -> WearsLargeSizedClothes(x))", "all x.((WearsLargeShoes(x)) -> WearsLargeSizedClothes(x))", "all x.((WearsLargeShoes(x) & WearsLargeSizeClothes(x)) -> WearsLargeSizeClothes(x))", "all x.((WorthsLargeShoes(x) & WearsLargeSizedClothes(x)) -> WearsLargeSizedClothes(x))", "all x.((WornsLargeShoes(x) & WearsLargeSizeClothes(x)) -> WearsLargeSizeClothes(x))", "all x.((WornsLargeShoes(x) & WearsLargeSizedClothes(x)) -> WearsLargeSizeClothes(x))", "all x.((WearsLargeShoes(x) & WearsLargeSizedClothes(x)) -> WearsLargeSizeClothes(x))", "all x.((Person(x) & WearsLargeShoes(x)) -> WearsLargeSizedClothes(x))", "all x.((WearsLargeShoes(x) & WearsLargeSizeClothes(x)) -> WearsLargeSizedClothes(x))", "all x.((WornsLargeShoes(x)) -> WearsLargeSizedClothes(x))", "all x.((WornsLargeShoes(x) & WearsLargeSizeClothes(x)) -> WearsLargeSizedClothes(x))", "all x.(WearsLargeShoes(x) -> WearsLargeSizeClothes(x))", "all x.((People(x) & WearsLargeShoes(x)) -> WearsLargeSizedClothes(x))", "all x.((WearsLargeShoes(x) & WearsLargeSizedClothes(x)) -> LargeSizedClothes(x))"]}
{"id": "folio_validation_527", "nl": "Yuri does not wear large-size clothes.", "fol": "-WearsLargeClothes(Yuri)", "prediction": ["all x.(Yuri(x) -> -WearsLargeSizeClothes(x))", "all x.(Yuri(x) -> -WearLargeSizeClothes(x))", "Yuri -WearsLargeSizeClothes(y))", "(-WearsLargeSizeClothes(Yuri))", "all x.(Yuri(x) -> -WornLargeSizeClothes(x))", "Yuri -WearsLargeSizeClothes(Yuri))", "All x.(Yuri(x) -> -WearsLargeSizeClothes(x))", "exists x.(Yuri(x) & -WearsLargeSizeClothes(x))", "Yuri -WearsLargeSizeClothes(Yuri)", "(-WearLargeSizeClothes(Yuri))", "Yuri -WearsLargeSizeClothes(y)", "Yuri -WearsLargeSizeClothes(Yur))", "Yuri & -WearsLargeSizeClothes(y))", "Yuri does not wearsLargeSizeClothes(y)", "all x.(Yuri(x) -> -WearsLargeSizeClothing(x))", "(-WornLargeSizeClothes(Yuri))"]}
{"id": "folio_validation_528", "nl": "Yuri is an American.", "fol": "IsAmerican(Yuri)", "prediction": ["All x.(Yuri(x) -> American(x))", "all x.(Yuri(x) -> American(x))", "(American(Yuri) & American(Yuri))", "Yuri is American(y)", "(American(Yuri) & American(Yuri))", "Yuri is American.", "(Ameridian(Yuri) & American(Yuri))", "(American(Yuri) & BornIn(y,x))", "(Asian(Yuri) & American(Yuri))", "(American(Yuri) & BornIn(Yuri))", "Yuri (American(y) & BornIn(y,x))", "Yuri is American(Y)", "Yuri (American(Y) & BornIn(y,x))", "(American(Yuri) & -American(Yuri))", "(American(Yuri) & BornIn(Yuri,USA))", "(American(Yuri) & BornIn(Yuri))"]}
{"id": "folio_validation_529", "nl": "Yuri is not an American basketball player.", "fol": "-(IsAmerican(Yuri) & IsBasketballPlayer(Yuri))", "prediction": ["Yuri is notAmericanBasketballPlayer(y)", "Yuri n'est pas AmericanBasketballPlayer(Yuri)", "Yuri n'est pasAmericanBasketballPlayer(Yuri)", "Yuri is notAmericanBasketballPlayer(Yuri)", "(-AmericanBasketballPlayer(Yuri))", "Yuri n'est pasAmericanBasketballPlayer(y)", "Yuri is -AmericanBasketballPlayer(y)", "Yuri n'est pas AmericanBasketballPlayer(y)", "Yuri is -AmericanBasketballPlayer(Yuri)", "Yuri -AmericanBasketballPlayer(y)", "Yuri & -AmericanBasketballPlayer(y)", "Yuri n'est pas AmericanBasketballPlayer(y))", "Yuri n\u2019est pas AmericanBasketballPlayer(Yuri)", "Yuri & -AmericanBasketballPlayer(Yuri)", "Yuri n\u2019est pasAmericanBasketballPlayer(Yuri)", "Yuri & -AmericanBasketballPlayer(y))"]}
{"id": "folio_validation_530", "nl": "Yuri is an American basketball player.", "fol": "(IsAmerican(Yuri) & IsBasketballPlayer(Yuri))", "prediction": ["All x.(Yuri(x) -> AmericanBasketballPlayer(x))", "(AmericanBasketballPlayer(Yuri) & AmericanBasketballPlayer(Yuri))", "all x.(Yuri(x) -> AmericanBasketballPlayer(x))", "Yuri (AmericanBasketballPlayer)", "All x.(Yuri(x) -> (AmericanBasketballPlayer(x) & AmericanBasketballPlayer(x)))", "Yuri is an AmericanBasketballPlayer(y)", "(AsianBasketballPlayer(Yuri) & AmericanBasketballPlayer(Yuri))", "Yuri is AmericanBasketballPlayer(y)", "(AmericanBasketballPlayer(Yuri) & -AmericanBasketballPlayer(Yuri))", "All x.(Yuri(x) -> (AmericanBasketballPlayer(x) & -AmericanBasketballPlayer(x)))", "Yuri is a BasketballPlayer(y) & American(y))", "Yuri is an AmericanBasketballPlayer(Yuri)", "Yuri is a BasketballPlayer(y) & American(y) & PlaysBasketball(y))", "Yuri is AmericanBasketballPlayer(Yuri)", "(AmericanBasketballPlayer(Yuri)", "(AmericanBasketballPlayer(Yuri) & Plays(Yuri,Basketball))"]}
{"id": "folio_validation_531", "nl": "If Yuri does not wear large shoes, then Yuri is an American basketball player.", "fol": "(-WearsLargeShoes(Yuri) -> (IsAmerican(Yuri) & IsBasketballPlayer(Yuri)))", "prediction": ["all x.((Yuri(x) & -WearLargeShoes(x)) -> AmericanBasketballPlayer(x))", "all x.((Yuri(x) & -WearsLargeShoes(x)) -> AmericanBasketballPlayer(x))", "all x.((Yuri(x) & -WornLargeShoes(x)) -> AmericanBasketballPlayer(x))", "all x.((Yuri(x) & -WearLargeShoes(x)) -> BasketballPlayer(x))", "all x.((Yuri(x) & DoesNotWearLargeShoes(x)) -> AmericanBasketballPlayer(x))", "all x.((Yuri(x) & -WearsLargeShoes(x)) -> BasketballPlayer(x))", "all x.((Yur(x) & -WearLargeShoes(x)) -> AmericanBasketballPlayer(x))", "All x.((Yuri(x) & -WearLargeShoes(x)) -> AmericanBasketballPlayer(x))", "all x.((Yur(x) & -WearsLargeShoes(x)) -> AmericanBasketballPlayer(x))", "all x.((Yuri(x) & -WorthLargeShoes(x)) -> AmericanBasketballPlayer(x))", "all x.((Yuri(x) & -LargeShoes(x)) -> AmericanBasketballPlayer(x))", "All x.((Yuri(x) & -WearsLargeShoes(x)) -> AmericanBasketballPlayer(x))", "all x y.((Yuri(x) & -WearLargeShoes(x)) -> AmericanBasketballPlayer(y))", "all x.((Yuri(x) & -WearSmallShoes(x)) -> AmericanBasketballPlayer(x))", "all x.((Yuri(x) & WearsLargeShoes(x)) -> AmericanBasketballPlayer(x))", "all x.((Yuri(x) & LargeShoes(x)) -> AmericanBasketballPlayer(x))"]}
{"id": "folio_validation_532", "nl": "If Yuri is not an American basketball player, then Yuri is a basketball player.", "fol": "(-(IsAmerican(Yuri) & IsBasketballPlayer(Yuri)) -> IsBasketballPlayer(Yuri))", "prediction": ["all x.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "all x.((Yuri(x) & -AsianBasketballPlayer(x)) -> BasketballPlayer(x))", "all x.((Yur(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "all x.(((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "all x.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "all x y.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(y))", "all x.((AsianBasketballPlayer(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "all x.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "all x.((Yuri(x) & -AmericanBasketballplayer(x)) -> BasketballPlayer(x))", "All x.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "all x.((Yuri(x) & -AmericanBalloonPlayer(x)) -> BasketballPlayer(x))", "all x.((Yuri(x) & -AmazonBasketballPlayer(x)) -> BasketballPlayer(x))", "all x.((Yuri(x) & -AmishBasketballPlayer(x)) -> BasketballPlayer(x))", "all x.((Yuri(x) & -AmericanBasketballPilot(x)) -> BasketballPlayer(x))", "all x.((Yuri(x) & -AmericanBasketballPlayer(x)) -> NBAPlayer(x))", "all x.((Yuri) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))"]}
{"id": "folio_validation_533", "nl": "Events are either happy or sad.", "fol": "all x.(((EventOccurrence(x) -> IsHappy(x)) & -IsSad(x)) | (-(EventOccurrence(x) -> IsHappy(x)) & IsSad(x)))", "prediction": ["all x.(Event(x) -> (Happy(x) | Sad(x)))", "exists x.(Event(x) & (Happy(x) | Sad(x)))", "all x.(Event(x) -> (Happy(x) | Sad(x)))", "all x.(Event(x) -> ((Happy(x) | Sad(x))))", "all x.(Event(x) -> (Happily(x) | Sad(x)))", "all x.(Event(x) -> (Hope(x) | Sad(x)))", "all x y.((Event(x) & Event(y)) -> (Happy(x) | Sad(y)))", "all x.(Event(x) -> (Happiness(x) | Sad(x)))", "all x y.((Event(x) & Event(y)) -> (Happy(x,y) | Sad(x,y)))", "all x y.((Event(x) & Happy(y)) | Sad(y))", "all x.(Event(x) -> (Living(x) | Sad(x)))", "all x.(Event(x) -> (Happy(x) | Sad(x)))", "all x.((Event(x) & (Happy(x) | Sad(x))) -> ((Happy(x) | Sad(x))))", "exists x.(Event(x) & (Happily(x) | Sad(x)))", "all x y.((Event(x) & Event(y)) -> (Happy(x) | Sad(x)))", "all x.((Event(x) & (Happy(x) | Sad(x))) -> (Living(x) | Sad(x)))"]}
{"id": "folio_validation_534", "nl": "At least one event is happy. ", "fol": "exists x.(EventOccurrence(x) & IsHappy(x))", "prediction": ["all x.(Event(x) -> Happy(x))", "exists x.(Event(x) & Happy(x))", "all x.((Event(x) & Happy(x)) -> Happy(x))", "all x.((Event(x) & Happy(x)) -> HasEvent(x))", "all x y.((Event(x) & Event(y)) -> Happy(x))", "all x y.((Event(x) & Event(y)) -> Happy(x,y))", "-exists x.(Event(x) & Happy(x))", "(exists x.(Event(x) & Happy(x)))", "all x y.((Event(x) & Event(y) & Happy(y)) -> Happy(x,y))", "all x y.((Event(x) & Event(y) & Happy(x)) -> Happy(y))", "all x y.((Event(x) & Event(y) & Happy(y)) -> Happy(x))", "all x.((Event(x) & Happy(x)) -> AtLeastOneEvent(x))", "all x.((Event(x) & Happy(x)) -> Events(x))", "exists x y.(Event(x) & Event(y) & Happy(x,y))", "all x y.((Event(x) & Event(y) & Happy(y)) -> Happy(y))", "all x.((Event(x) & Happy(x)) -> AtLeastOne(x))"]}
{"id": "folio_validation_535", "nl": "All events are sad.", "fol": "all x.(EventOccurrence(x) -> IsSad(x))", "prediction": ["all x.(Event(x) -> Sad(x))", "all x.((Event(x) & Sad(x)) -> Sad(x))", "all x y.((Event(x) & Event(y)) -> Sad(x))", "All x.(Event(x) -> Sad(x))", "(all x.(Event(x) -> Sad(x)))", "all x.((Event(x) & Sad(x)) -> -Sad(x))", "exists x.(Event(x) & Sad(x))", "all x y.((Event(x) & Event(y)) -> Sad(x,y))", "all x y.((Event(x) & Sad(y)) -> Sad(x))", "all x.((Event(x) & Sad(x)) -> HasSad(x))", "-all x.(Event(x) -> Sad(x))", "all x.exists y.(Event(x) & Sad(y))", "all x.((Event(x) & Sad(x)) -> SAD(x))", "all x.((Event(x) & Sad(x)) -> Events(x))", "all x.((Event(x) & Sad(x)) -> HasEvent(x))", "all x.((Event(x) & Sad(x)) -> Cancel(x))"]}
{"id": "folio_validation_536", "nl": "The winner of the 1992 du Maurier Classic was Steinhauer.", "fol": "WinnerOfDuMaurierClassic1992(Maurier,Steinhauer)", "prediction": ["all x.((Winner(x) & DuMaurierClassic(x) & 1992) -> Steinhauer(x))", "all x.((Winner(x) & Du MaurierClassic(x) & 1992) -> Steinhauer(x))", "Der Gewinner des DuMaurierClassics(92) & Steinhauer(Steinhauer)", "(WinnerOfDuMaurierClassic(92) & Steinhauer(Steinhauer))", "all x.((Winner(x) & DuMaurierClassic(x)) -> Steinhauer(x))", "(Winner(x,92) & DuMaurierClassic(x)) -> Steinhauer(x))", "all x.((Winner(x) & Du MaurierClassic(x)) -> Steinhauer(x))", "Der SiegerOfDuMaurierClassic(92) & Steinhauer(Steinhauer)", "(Winner(x) & DuMaurierClassic(x) & 1992) & Steinhauer(x))", "all x.((Winner(x) & DuMaurierClassic(x) & 1992)) -> Steinhauer(x))", "(Winner(x) & DuMaurierClassic(x) & 1992) -> Steinhauer(x))", "all x.((Winner(x) & DuMaurierClassic(x) & 1992(x)) -> Steinhauer(x))", "(Winner(x) & Du MaurierClassic(x) & 1992) & Steinhauer(x))", "(Winner(x) & Du MaurierClassic(x) & 1992) -> Steinhauer(x))", "The winner of the 1992 du MaurierClassic was Steinhauer.", "all x.((Winner(x) & Du MaurierClassic(x) & 1992)) -> Steinhauer(x))"]}
{"id": "folio_validation_537", "nl": "Steinhauer participated in the 1992 du Maurier Classic.", "fol": "ParticipatedInDuMaurierClassic1992(Maurier,Steinhauer)", "prediction": ["all x y.((Steinhauer(x) & DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "all x y.((Steinhauer(x) & DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "all x y.((Steinhauer(x) & Du MaurierClassic(y)) -> ParticipatedIn(x,y))", "all x y.((Steinhauer(x) & DuMaurierClassic(y) & ParticipatedIn(x,y)) -> ParticipatedIn(x,y))", "all x y.((Steinhauer(x) & DuMaurierClassic(y)) -> Participated(x,y))", "all x.(Steinhauer(x) -> ParticipatedInDuMaurierClassic(x,92))", "all x.(Steinhauer(x) -> ParticipatedInDuMaurierClassic(x))", "all x y.((Steinhauer(x) & DuMaurierClassic(y)) -> Participated(x,y))", "all x y.((Steinhauer(x) & DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "all x y.((Steinhauer(x) & DuMaurierClassic(y) & ParticipatedIn(x,y)) -> ParticipatesIn(x,y))", "all x.(Steinhauer(x) -> ParticipatedInDuMaurierClassic(x,1992))", "all x y.((Steinhauer(x) & Du MaurierClassic(y)) -> Participated(x,y))", "(ParticipatedIn(Steinhauer,92) & Du MaurierClassic(Steinhauer,92))", "(ParticipatedInDuMaurierClassic(Steinhauer,92))", "all x.(Steinhauer(x) -> ParticipatedInDuMaurierClassic(x, 1992))", "all x y.((Steinhauer(x) & DuMaurierClassic(y) & 1992) -> ParticipatedIn(x,y))"]}
{"id": "folio_validation_538", "nl": "There was one six-way tie on the leaderboard and one person in the six-way tie was from Belgium.", "fol": "exists x.(LeaderboardOfDuMaurierClassic1992(Maurier,x) & HasSixWayTie(x) & IsFromBelgium(x))", "prediction": ["(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(SixWayTie(y) & InLeaderboard(y,x))))", "(all x.(SixWayTie(x) -> Leaderboard(x)) & all y.(SixWayTie(y) -> Belgium(y)))", "(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(SixWayTie(y) & PersonInTie(y,x))))", "(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(SixWayTie(y) & From(y,Belgium))))", "(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(SixWayTie(y) & Person(y) & FromBelgium(y)))", "all x y z.((SixWayTie(x) & Person(y) & SixWayTie(z)) -> (OnLeaderboard(x,y) & FromBelgium(y)))", "(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(SixWayTie(y) & Person(x,y))))", "(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(Person(y) & SixWayTie(y)) & From(y,Belgium)))", "all x y.((Person(x) & SixWayTie(x) & Leaderboard(y)) -> (Belgium(x) & Person(x,y)))", "(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(Person(y) & SixWayTie(y) & From(y,Belgium))))", "(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(Person(y) & SixWayTie(y) & FromBelgium(y)))", "all x y z.((SixWayTie(x) & Person(y) & SixWayTie(z)) -> (OnLeaderboard(x) & FromBelgium(y)))", "all x y z.((SixWayTie(x) & Person(y) & SixWayTie(z)) -> (OnLeaderboard(x,y) & FromBelgium(y,z)))", "(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(Person(y) & SixWayTie(y) & From(y,Belgium)))", "(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(SixWayTie(y) & Person(y) & From(y,Belgium)))", "(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(SixWayTie(y) & InLeaderboard(x,y))))"]}
{"id": "folio_validation_539", "nl": "Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic.", "fol": "(IsFromBelgium(Descampe) & LeaderboardOfDuMaurierClassic1992(Maurier,Descampe))", "prediction": ["Descampe is from Belgium and onLeaderboardOfDuMaurierClassic(Descampe,92))", "all x.(Descampe(x) -> (Belgium(x) & LeaderboardOfDuMaurierClassic(x)))", "(Belgium(Descampe) & LeaderboardOfDuMaurierClassic(Descampe))", "(Belgium(Descampe) & LeaderboardOfDuMaurierClassic(Descampe,92))", "Descampe is from Belgium and is onLeaderboardOfDuMaurierClassic(Descampe,92))", "all x.(Descampe(x) -> (Belgium(x) & OnLeaderboardOfDuMaurierClassic(x)))", "(Belgian(Descampe) & LeaderboardOfDuMaurierClassic(Descampe,92))", "Descampe is from Belgium and LeaderboardOfDuMaurierClassic(Descampe,92))", "(Belgium(Descampe) & LeaderboardOfMaurierClassic(Descampe,92))", "Descampe (Belgium) & LeaderboardOfDuMaurierClassic(92))", "(Belgian(Descampe) & LeaderboardOfDuMaurierClassic(Descampe))", "(Belgium(Descampe) & LeaderboardOfMaurierClassic(Descampe))", "all x.(Descampe(x) -> (Belgium(x) & LeaderboardOfMaurierClassic(x) & 1992(x)))", "all x.(Descampe(x) -> (Belgium(x) & LeaderboardOfMaurierClassic(x)))", "all x.(Descampe(x) -> (Belgium(x) & LeaderboardOfDuMaurierClassic(x,1992)))", "all x.(Descampe(x) -> (Belgium(x) & LeaderboardOfDuMaurierClassic(x) & 1992(x)))"]}
{"id": "folio_validation_540", "nl": "All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic.", "fol": "all x.(LeaderboardOfDuMaurierClassic1992(Maurier,x) -> ParticipatedInDuMaurierClassic1992(Maurier,x))", "prediction": ["all x y.((Person(x) & Leaderboard(x,y) & 1992DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "all x y z.((Person(x) & Leaderboard(y) & 1992DuMaurierClassic(z) & ParticipatedIn(x,y,z)) -> ParticipatedIn(x,y,z))", "all x y.((Person(x) & Leaderboard(y) & 1992DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "all x y.((Person(x) & Leaderboard(x,y) & 1992DuMaurierClassic(y)) -> Participated(x,y))", "all x y.((Person(x) & Leaderboard(x,y) & 1992DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "all x y.((People(x) & Leaderboard(x,y) & 1992DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "all x y z.((Person(x) & Leaderboard(y) & DuMaurierClassic(z) & ParticipatedIn(x,y,z)) -> ParticipatedIn(x,y,z))", "all x y.((Person(x) & Leaderboard(y) & 1992DuMaurierClassic(x)) -> ParticipatedIn(x,y))", "all x.((Person(x) & Leaderboard(x,y) & 1992DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "all x.((Person(x) & LeaderboardOfDuMaurierClassic(x)) -> ParticipatedInDuMaurierClassic(x))", "all x y.((Person(x) & Leaderboard(x,y) & 1992DuMaurierClassic(x)) -> ParticipatedIn(x,y))", "all x y.((Person(x) & Leaderboard(x,y) & DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "all x y.((Person(x) & Leaderboard(y,x) & 1992DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "all x y.((Person(x) & Leaderboard(x,y) & 1992DuMaurierClassic(y)) -> ParticipatedInClassic(x,y))", "all x.((Person(x) & LeaderboardOfDuMaurierClassic(x) & 1992DuMaurierClassic(x)) -> ParticipatedInDuMaurierClassic(x))", "all x.((Person(x) & LeaderboardOfDuMaurierClassic(x) & 1992DuMaurierClassic(x)) -> ParticipatedInClassic(x))"]}
{"id": "folio_validation_541", "nl": "Steinhauer was not the winner of the 1992 du Maurier Classic.", "fol": "-WinnerOfDuMaurierClassic1992(Maurier,Steinhauer)", "prediction": ["-(Steinhauer(Steinhauer) & 1992DuMaurierClassic(Steinhauer))", "(-Winner(Steinhauer,92) & Du MaurierClassic(Steinhauer,92))", "(-Winner(Steinhauer,92) & DuMaurierClassic(Steinhauer,92))", "(-winner(Steinhauer,92) & Du MaurierClassic(Steinhauer,92))", "(-Winner(Steinhauer) & 1992DuMaurierClassic(Steinhauer))", "(-WinnerOfDuMaurierClassic(Steinhauer))", "(-Winner(Steinhauer) & Du MaurierClassic(Steinhauer,92))", "(-Winner(Steinhauer,92) & Du MaurierClassic(Steinhauer,92)))", "(-Winner(Steinhauer) & 1992 Du MaurierClassic(Steinhauer))", "(-WinnerOfDuMaurierClassic(Steinhauer,92))", "(-Winner(Steinhauer) & Du MaurierClassic(Steinhauer))", "(-Winner(Steinhauer,92) & Du MaurierClassic(Steinhauer))", "(-winner(Steinhauer,92) & Du MaurierClassic(Steinhauer,92)))", "(-Winner(Steinhauer,92) & DuMaurierClassic(Steinhauer,92)))", "(-Winner(Steinhauer) & DuMaurierClassic(Steinhauer,92))", "(-Winner(Steinhauer) & DuMaurierClassic(Steinhauer))"]}
{"id": "folio_validation_542", "nl": "Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic.", "fol": "HasSixWayTie(Descampe)", "prediction": ["all x y.((Descampe(x) & DuMaurierClassic(y)) -> SixWayTie(x,y))", "all x.(Descampe(x) -> SixWayTie(x))", "all x.((Descampe(x) & SixWayTie(x)) -> LeaderboardOfDuMaurierClassic(x))", "(SixWayTie(Descampe) & LeaderboardOfDuMaurierClassic(Descampe,92))", "(SixWayTie(Descampe) & LeaderboardOfDuMaurierClassic(Descampe))", "All x.(Descampe(x) -> SixWayTie(x))", "all x y.((Descampe(x) & DuMaurierClassic(y)) -> SixWayTieInLeaderboard(x,y))", "all x.(Descampe(x) -> SixWayTieInLeaderboardOfDuMaurierClassic(x))", "(SixWayTieInLeaderboard(Descampe) & 1992DuMaurierClassic(Descampe))", "(SixWayTie(Descampe) & Leaderboard(Descampe,92))", "(SixWayTie(Descampe) & Leaderboard(Descampe,92) & Du MaurierClassic(Descampe,92))", "(SixWayTieInLeaderboardOfDuMaurierClassic(Descampe))", "Descampe is in the SixWayTieInLeaderboardOfDuMaurierClassic(Descampe,92))", "All x.(Descampe(x) -> SixWayTieInLeaderboardOfDuMaurierClassic(x))", "all x.((Descampe(x) & SixWayTie(x)) -> LeaderboardOfDuMaurierClassic(x,92))", "all x.((Descampe(x) & SixWayTie(x)) -> LeaderboardOfMaurierClassic(x))"]}
{"id": "folio_validation_543", "nl": "If an animal barks, then Jane does not like it.", "fol": "all x.(Barks(x) -> -Likes(Jane,x))", "prediction": ["all x.((Animal(x) & Barks(x)) -> JaneDoesNotLike(x))", "all x.(Barks(x) -> JaneDoesNotLike(x))", "all x.((Animal(x) & Barks(x)) -> JaneDoesNotLike(x,y))", "all x.((Animal(x) & Barks(x)) -> JaneDoesNotLove(x))", "all x.((Animal(x) & Barks(x)) -> JaneDislikes(x))", "all x.((Animal(x) & Barks(x)) -> -Likes(x,Jane))", "all x.((Animal(x) & Barks(x)) -> JaneDoesNotMeet(x))", "all x.((Animal(x) & Barks(x)) -> JaneDoesNotLie(x))", "all x.(Barks(x) -> JaneDislikes(x))", "all x.(Barks(x) -> JaneDoesNotLove(x))", "all x y.((Animal(x) & Barks(x)) -> JaneDoesNotLike(y,x))", "all x.((Animal(x) & Barks(x)) -> Jane(x))", "all x.(Barks(x) -> JaneDoesNotLike(x,Barks))", "all x.((Animal(x) & Barks(x)) -> JaneDoesNotLike(x,x))", "all x y.((Animal(x) & Barks(x)) -> JaneDoesNotLike(y))", "all x.((Animal(x) & Barks(x)) -> -Likes(x,y))"]}
{"id": "folio_validation_544", "nl": "All dogs are animals that bark.", "fol": "all x.(IsDog(x) -> Barks(x))", "prediction": ["all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Bark(x))", "all x.(Dog(x) -> Barking(x))", "all x.(Dog(x) -> (Animal(x) & Barks(x)))", "all x.(Dog(x) -> (Animal(x) & Bark(x)))", "all x.(Dog(x) -> BarkingAnimal(x))", "all x.(Dog(x) -> Animal(x) & Bark(x))", "all x.(Dog(x) -> Barker(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> BarkAnimal(x))", "all x.(Dog(x) -> Animal(x))", "all x.(Dog(x) -> Animal(x) & Barks(x))", "all x.(Dog(x) -> (Animal(x) & Barks(x)))", "all x.(Dog(x) -> (Animal(x) & Bark(x)))", "all x.(Dog(x) -> Barking(x))", "all x.(Dog(x) -> Bark(x))"]}
{"id": "folio_validation_545", "nl": "If an animal jumps, then Jane likes it.", "fol": "all x.(Jumps(x) -> Likes(Jane,x))", "prediction": ["all x.((Animal(x) & Jumps(x)) -> Likes(x,y))", "all x.((Animal(x) & Jumps(x)) -> Likes(x,Jane))", "all x y.((Animal(x) & Jumps(x)) -> Likes(y,x))", "all x.(Jumps(x) -> Likes(x,Jane))", "all x.(Jumps(x) -> JaneLikes(x))", "all x.(Jumps(x) -> Likes(x,y))", "all x.((Animal(x) & Jumps(x)) -> Likes(x))", "all x y.((Animal(x) & Jumps(x)) -> Likes(y))", "all x y.((Animal(x) & Jumps(x) & Jane(y)) -> Likes(y,x))", "all x.((Animal(x) & Jumps(x)) -> Likes(x,Jean))", "all x.((Animal(x) & Jumps(x)) -> JaneLikes(x))", "all x.((Animal(x) & Jumps(x)) -> Likes(x,x))", "all x.(Jump(x) -> Likes(x,y))", "all x y.((Animal(x) & Jumps(x)) -> Likes(x,y))", "all x.(Jumps(x) -> Likes(x))", "all x.(Jump(x) -> Likes(x,Jane))"]}
{"id": "folio_validation_546", "nl": "If an animal has legs, then it jumps.", "fol": "all x.(HasLegs(x) -> Jumps(x))", "prediction": ["all x.(HasLegs(x) -> Jumps(x))", "all x.((Animal(x) & HasLegs(x)) -> Jumps(x))", "all x.((Animal(x) & Legs(x)) -> Jumps(x))", "all x y.((Animal(x) & HasLegs(x)) -> Jumps(x))", "all x.(Legs(x) -> Jumps(x))", "all x.exists y.((Animal(x) & Legs(x) & Jumps(y)) -> Has(x,y))", "all x y.((Animal(x) & HasLegs(x)) -> Jumps(y))", "all x y.((Animal(x) & Legs(x)) -> Jumps(x))", "all x y.((Animal(x) & Legs(x) & Has(x,y)) -> Jumps(x))", "all x.exists y.((Animal(x) & Legs(y) & Has(x,y)) -> Jumps(x))", "all x y.((Animal(x) & HasLegs(x) & Jumps(y)) -> HasLegs(x))", "all x.exists y.((Animal(x) & Legs(x) & Jumps(x)) -> Has(x,y))", "all x y.((Animal(x) & HasLegs(x) & Jumps(x)) -> HasLegs(x))", "all x.(HeadsLegs(x) -> Jumps(x))", "all x y.((Animal(x) & Legs(x) & Jumps(y)) -> Has(x,y))", "all x y.((Animal(x) & HasLegs(x,y)) -> Jumps(x))"]}
{"id": "folio_validation_547", "nl": "If an animal is terricolous, then it has legs. ", "fol": "all x.(IsTerricolous(x) -> HasLegs(x))", "prediction": ["all x.(Terricolous(x) -> HasLegs(x))", "all x.((Animal(x) & Terrirocolous(x)) -> HasLegs(x))", "all x.((Animal(x) & Terrocous(x)) -> HasLegs(x))", "all x.((Animal(x) & Terricolous(x)) -> HasLegs(x))", "all x.((Animal(x) & Terroconous(x)) -> HasLegs(x))", "all x.((Animal(x) & Terricolous(x)) -> HasLegs(x))", "all x.((Animal(x) & Terrircolous(x)) -> HasLegs(x))", "all x.((Animal(x) & Terriricolous(x)) -> HasLegs(x))", "all x.((Animal(x) & Terricolous(x)) -> HasLegs(x))", "all x.((Animal(x) & Territorous(x)) -> HasLegs(x))", "all x.((Animal(x) & Terrocoid(x)) -> HasLegs(x))", "all x.((Animal(x) & Territorius(x)) -> HasLegs(x))", "all x.((Animal(x) & Territonous(x)) -> HasLegs(x))", "all x.((Animal(x) & Terroconial(x)) -> HasLegs(x))", "all x.(Terricolous(x) -> HasLegs(x))", "all x.(Terricolous(x) -> Legs(x))"]}
{"id": "folio_validation_548", "nl": "If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs.", "fol": "((-Jumps(Kiki) & -HasLegs(Kiki)) -> (IsTerricolous(Kiki) | HasLegs(Kiki)))", "prediction": ["all x.((KiKi(x) & -Jumps(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi(x) & -Jumps(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi(x) & (-Jumps(x) | HasLegs(x))) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi(x) & -Jump(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi) & -Jumps(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi(x) & -Jumps(x) & HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi(x) & -Jumpers(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi(x) & -(Jumps(x) | HasLegs(x))) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi) & -Jumps(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi,x) & -Jumps(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi(x) & -Jumps(x) | HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi(x) & (-Jumps(x) | HasLegs(x))) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi(x) & (-Jump(x) | HasLegs(x))) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi(x) & -Jump(x) & HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "all x.((KiKi) & (-Jumps(x) | HasLegs(x))) -> (Terricolous(x) | HasLegs(x)))"]}
{"id": "folio_validation_549", "nl": "KiKi is terricolous.", "fol": "IsTerricolous(Kiki)", "prediction": ["all x.(KiKi(x) -> Terricolous(x))", "(Terricolous(KiKi) -> Terricolous(KiKi))", "all x.(KiKi(x) -> Terrocous(x))", "all x.(KiKi(x) -> Terroconous(x))", "all x.(KiKi(x) -> Terricolous(x))", "(Terricolous(KiKi) -> Terricolous(KiKi))", "all x.(KiKi(x) -> Territorious(x))", "all x.(KiKi(x) -> Terrirocolous(x))", "all x.(KiKi(x) -> Terticolous(x))", "all x.(KiKi(x) -> Territorium(x))", "all x.(KiKi(x) -> Terrocomus(x))", "all x.(KiKi(x) -> Terroconial(x))", "all x.(KiKi(x) -> Tericolous(x))", "All x.(KiKi(x) -> Terricolous(x))", "all x.(KiKi(x) -> Terrocolus(x))", "(Terricolous(kiKi) -> Terricolous(ki))"]}
{"id": "folio_validation_550", "nl": "KiKi barks and is a dog.", "fol": "(Barks(Kiki) & IsDog(Kiki))", "prediction": ["all x.(KiKi(x) -> (Barks(x) & Dog(x)))", "(Barks(KiKi) & Dog(KiKi))", "exists x.(KiKi(x) & Barks(x) & Dog(x))", "all x.(KiKi(x) -> (Barks(x) & Dog(x)))", "all x y.((KiKi(x) & Barks(x) & Dog(y)) -> Dog(x))", "all x.(KiKi(x) -> BarksAndDog(x))", "all x y.((KiKi(x) & Barks(x)) -> Dog(y))", "all x.(KiKi(x) -> (Barks(x) & IsDog(x)))", "all x.(Kiki(x) -> (Barks(x) & Dog(x)))", "all x.(KiKi(x) -> (Barks(x) & Dog(x)))", "all x.(KiKi.((Barks(x) & Dog(x)) -> Dog(x))", "All x.(KiKi(x) -> (Barks(x) & Dog(x)))", "all x.(KiKi(x) -> Barks(x) & Dog(x))", "all x.(KiKi.(Barks(x) & Dog(x))", "all x y.((KiKi(x) & Barks(x)) -> Dog(x))", "all x.(KiKi (Barks(x) & Dog(x))"]}
{"id": "folio_validation_551", "nl": "KiKi neither barks nor is a dog.", "fol": "(-Barks(Kiki) & -IsDog(Kiki))", "prediction": ["all x.(KiKi(x) -> (-Barks(x) | Dog(x)))", "(-Barks(KiKi) & -Dog(KiKi))", "all x.(KiKi(x) -> (-Barks(x) & -Dog(x)))", "(-Barks(KiKi) | Dog(KiKi)))", "exists x.(KiKi(x) & -Barks(x) & -Dog(x))", "(-Barks(kiKi) & -Dog(kiKi))", "-(Barks(KiKi) & -Dog(KiKi))", "-(Barks(KiKi) | Dog(KiKi)))", "all x.(KiKi(x) -> (NoBarks(x) & -Dog(x)))", "all x.(KiKi(x) -> -Barks(x) & -Dog(x))", "((KiKi) & -Barks(KiKi)) | Dog(KiKi)))", "all x.(KiKi(x) -> (-Barks(x) | Dog(x)))", "all x.(KiKi(x) -> (-Barks(x) & -Dog(x)))", "all x.(KiKi(x) -> -(Barks(x) | Dog(x)))", "-(Barks(KiKi) | Dog(KiKi))", "((KiKi) & -Barks(KiKi)) & -Dog(KiKi))"]}
{"id": "folio_validation_552", "nl": "Ailton Silva, born in 1995, is commonly known as Ailton.", "fol": "(BornInYear(Ailtonsilva,Y1995) & KnownAs(Ailtonsilva,Ailton))", "prediction": ["all x.((AiltonSilva(x) & BornIn95(x)) -> CommonlyKnownAsAilton(x))", "all x.((AiltonSilva(x) & BornIn(x,1996)) -> Ailton(x))", "all x.((AiltonSilva(x) & BornIn95(x)) -> Ailton(x))", "all x.((AiltonSilva(x) & BornIn(x,1996)) -> CommonlyKnownAsAilton(x))", "all x.((AiltonSilva(x) & BornIn(x,1996)) -> CommonlyKnownAs(x,Ailton))", "all x.((AiltonSilva(x) & BornIn(x,95)) -> CommonlyKnownAsAilton(x))", "Ailton Silva (bornIn95) & CommonlyKnownAsAilton(x))", "All x.((AiltonSilva(x) & BornIn(x,1996)) -> Ailton(x))", "All x.((AiltonSilva(x) & BornIn95(x)) -> Ailton(x))", "all x.((AiltonSilva(x) & BornIn95(x)) -> CommonlyKnownAs(x,Ailton))", "all x.((AiltonSilva(x) & BornIn(x,1995)) -> CommonlyKnownAsAilton(x))", "all x.((AiltonSilva(x) & BornIn(x,95)) -> Ailton(x))", "All x.((AiltonSilva(x) & BornIn95(x)) -> CommonlyKnownAsAilton(x))", "all x.((AiltonSilva(x) & BornIn(x,1995)) -> CommonlyKnownAsAilton(x))", "all x.((AiltonSilva(x) & BornIn(x,1995)) -> CommonlyKnownAs(x,Ailton))", "all x.((AiltonSilva(x) & BornIn(x,1995)) -> Ailton(x))"]}
{"id": "folio_validation_553", "nl": "Ailton is a football player who was loaned out to Braga.", "fol": "(IsFootballPlayer(Ailton) & LoanedToClub(Ailton,Braga))", "prediction": ["all x.((FootballPlayer(x) & LoanedOutToBraga(x)) -> Ailton(x))", "All x.(Ailton(x) -> (FootballPlayer(x) & LoanedOutToBraga(x)))", "all x.(Ailton(x) -> (FootballPlayer(x) & LoanedOutToBraga(x)))", "Ailton is a football player who was loaned out to Braga.", "All x.((FootballPlayer(x) & LoanedOutToBraga(x)) -> Ailton(x))", "(FootballPlayer(Ailton) & LoanedOutToBraga(Ailton))", "all x y.((FootballPlayer(x) & FootballPlayer(y) & LoanedOutToBraga(x,y)) -> Ailton(x))", "all x.((FootballPlayer(x) & LoanedOut(x,Braga)) -> Ailton(x))", "Ailton is a football player who was loanedout to Braga.", "all x y.((FootballPlayer(x) & Braga(y)) -> LoanedOut(x,y))", "Ailton (FootballPlayer(Ailton) & LoanedOutToBraga(Ailton))", "all x y.((FootballPlayer(x) & FootballPlayer(y) & LoanedOutTo(x,y)) -> Ailton(x))", "all x y.((FootballPlayer(x) & Braga(y)) -> LoanedOutTo(x,y))", "all x y.((FootballPlayer(x) & FootballPlayer(y) & LoanedOutToBraga(x)) -> Ailton(x))", "All x.(Ailton(x) -> (FootballPlayer(x) & LoanedOut(x) & Braga(x)))", "all x.((FootballPlayer(x) & LoanedToBraga(x)) -> Ailton(x))"]}
{"id": "folio_validation_554", "nl": "Ailton Silva is a Brazillian footballer who plays for Nautico.", "fol": "(IsBrazilian(Ailtonsilva) & IsFootballPlayer(Ailtonsilva) & PlaysForClub(Ailtonsilva,Nautico))", "prediction": ["AiltonSilva (BrasilianFootballer(Ailton) & PlaysForNautico(Ailton))", "AiltonSilva (BrasilianFootballer(a) & PlaysForNautico(b))", "AiltonSilva (BrazillianFootballer(Ailton) & PlaysForNautico(Ailton))", "AiltonSilva (BrasilianFootballer(x) & PlaysForNautico(x))", "AiltonSilva (BrasilianFootballer(a) & PlaysForNautico(a))", "AiltonSilva(a) is a BrazilianFootballer(a) & PlaysForNautico(a))", "AiltonSilva (BrazillianFootballer(x) & PlaysForNautico(x))", "AiltonSilva (BrazillianFootballer(a) & PlaysForNautico(b))", "Ailton Silva (BrasilianFootballer(Ailton) & PlaysForNautico(Ailton))", "AiltonSilva (BrazillianFootballer(a) & PlaysForNautico(a))", "Ailton Silva (BrasilianFootballer(a) & PlaysForNautico(b))", "AiltonSilva(a) is a BrazilianFootballer(a) & PlaysForNautico(b))", "Ailton Silva (BrasilianFootballer(a) & PlaysForNautico(a))", "AiltonSilva(a) & BrazillianFootballer(b) & PlaysForNautico(a))", "AiltonSilva(a) is a BrazillianFootballer(a) & PlaysForNautico(a))", "Ailton Silva (BrazillianFootballer(a) & PlaysForNautico(b))"]}
{"id": "folio_validation_555", "nl": "Nautico is a football club along with Braga.", "fol": "(IsFootballClub(Nautico) & IsFootballClub(Braga))", "prediction": ["all x.(Nautico(x) -> (FootballClub(x) & Braga(x)))", "(FootballClub(Nautico) & Braga(Nautico))", "all x y.((Nautico(x) & Braga(y)) -> FootballClub(x))", "all x y.((Nautico(x) & Braga(y)) -> FootballClub(x,y))", "All x.(Nautico(x) -> (FootballClub(x) & Braga(x)))", "all x.(Nautico(x) -> (FootballClub(x) & Braga(x)))", "all x.((Nautico(x) & Braga(x)) -> FootballClub(x))", "all x.(Nautico(x) -> (FootballClub(x) & Braga(x)))", "Nautico (FootballClub(Nautico) & Braga(Nautico))", "All x y.((Nautico(x) & Braga(y)) -> FootballClub(x,y))", "All x y.((Nautico(x) & Braga(y)) -> FootballClub(x))", "all x.(Nautico(x) -> (FootballClub(x) & JoinsBraga(x)))", "all x.(Nautico(x) -> (FootballClub(x) & -Braga(x)))", "(FootballClub(Nautico,Braga) & FootballClub(Nautico,Braga))", "all x.(Nautico(x) -> (FootballClub(x) & WithBraga(x)))", "Nautico (FootballClub) & Braga(FootballClub))"]}
{"id": "folio_validation_556", "nl": "Fluminense is a football club.", "fol": "IsFootballClub(Fluminense)", "prediction": ["all x.(Fluminense(x) -> FootballClub(x))", "(Fluminense(Fluentinense) & FootballClub(Fluentinense))", "(Fluminense(f) & FootballClub(f))", "all x.((Fluminense(x) & FootballClub(x)) -> FootballClub(x))", "(Fluminense(Fluminense) & FootballClub(Fluminense))", "All x.(Fluminense(x) -> FootballClub(x))", "all x.(Fluminense(x) -> FootballClub(x))", "(Fluminense(fluminense) & FootballClub(fluminense))", "(Fluminense(flu) & FootballClub(flu))", "all x.((Fluminense(x) & FootballClub(x)) -> Football(x))", "(Fluminense(Fluminense) -> FootballClub(Fluminense))", "(Fluminense(Fluminism) & FootballClub(Fluminism))", "(Fluminense(Flu) & FootballClub(Flu))", "(Fluminense(fluminense) -> FootballClub(fluminense))", "(Fluminense(Fluense) & FootballClub(Fluentinense))", "all x.((Fluminense(x) & FootballClub(x)) -> Fluminense(x))"]}
{"id": "folio_validation_557", "nl": "No one playing for Nautico is Brazilian.", "fol": "all x.(PlaysForClub(x,Nautico) -> -IsBrazilian(x))", "prediction": ["-exists x.(PlayingForNautico(x) & Brazilian(x))", "-exists x.(PlayingNautico(x) & Brazilian(x))", "-exists x.(Player(x) & Nautico(x))", "-exists x.(PlayingFor(x,Nautico) & Brazilian(x))", "all x.(PlayingForNautico(x) -> Brazilian(x))", "-exists x.(PlayingForNautico(x) & Brazilian(x))", "-exists x.(Player(x,Nautico) & Brazilian(x))", "-exists x.(PlaysForNautico(x) & Brazilian(x))", "-exists x.(Playing(x,Nautico) & Brazilian(x))", "-exists x.(Player(x) & Nautico(x) & Brazilian(x))", "-exists x.(PlayerForNautico(x) & Brazilian(x))", "(-exists x.(PlayingForNautico(x) & Brazilian(x)))", "-exists x.(PlayingForNautico(x) & Brazilin(x))", "all x.(PlaysForNautico(x) -> Brazilian(x))", "-exists x.(Player(x) & ForNautico(x))", "-exists x.(PlayingForNautico(x) & Brazillian(x))"]}
{"id": "folio_validation_558", "nl": "Ailton Silva foes not play for a football club.", "fol": "all x.(IsFootballClub(x) -> -PlaysForClub(Ailtonsilva,x))", "prediction": ["all x.(AiltonSilva(x) -> -PlaysForFootballClub(x))", "all x.((Foe(x) & AiltonSilva(x)) -> -PlaysForFootballClub(x))", "all x.((Foe(x) & AiltonSilva(x)) -> -PlayForFootballClub(x))", "all x.(AiltonSilvaFoe(x) -> -PlaysForFootballClub(x))", "all x.(AiltonSilva(x) -> -PlayForFootballClub(x))", "all x y.((AiltonSilva(x) & FootballClub(y)) -> -PlaysFor(x,y))", "all x.((AiltonSilva(x) & -PlayForFootballClub(x)) -> -PlayForFootballClub(x))", "all x.(AiltonSilver(x) -> -PlaysForFootballClub(x))", "all x y.((Foe(x) & AiltonSilva(y)) -> -PlaysForFootballClub(x,y))", "all x.(AiltonSilvaFoe(x) -> -PlayForFootballClub(x))", "all x y.((Foe(x) & AiltonSilva(x) & FootballClub(y)) -> -PlaysFor(x,y))", "all x.(Foe(x) -> -PlaysForFootballClub(x))", "all x.((Field(x) & AiltonSilva(x)) -> -PlaysForFootballClub(x))", "all x.((Foe(x) & AiltonSilva(x)) -> -PlaysFor(x,FootballClub))", "all x y.((AiltonSilva(x) & FootballClub(y)) -> -PlayFor(x,y))", "all x.((AiltonSilva(x) & FootballClub(x)) -> -PlaysFor(x,FootballClub))"]}
{"id": "folio_validation_559", "nl": "Ailton was not loaned out to a football club.", "fol": "all x.(IsFootballClub(x) -> -LoanedToClub(Ailton,x))", "prediction": ["all x.(Ailton(x) -> -LoanedOutToFootballClub(x))", "all x y.((Ailton(x) & FootballClub(y)) -> -LoanedOutTo(x,y))", "all x.((Ailton(x) & -LoanedToFootballClub(x)) -> -LoanedToFootballClub(x))", "all x.((Ailton(x) & -LoanedOutToFootballClub(x)) -> -LoanedOutToFootballClub(x))", "all x.(Ailton(x) -> -LoanedToFootballClub(x))", "all x.((Ailton(x) & -LoanedTo(x,FootballClub)) -> -LoanedTo(x,FootballClub))", "all x.((Ailton(x) & -LoanedOutTo(x,FootballClub)) -> -LoanedOutTo(x,FootballClub))", "all x y.((Ailton(x) & FootballClub(y)) -> -LoanedOut(x,y))", "all x.(Ailton(x) -> -LoanedOutTo(x,FootballClub))", "All x.(Ailton(x) -> -LoanedOutToFootballClub(x))", "all x.((Ailton(x) & -LoanedOutToFootballClub(x)) -> -LoanedToFootballClub(x))", "all x.((Ailton(x) & -LoanedOutTo(x,FootballClub)) -> -LoanedTo(x,FootballClub))", "all x y.((Ailton(x) & FootballClub(y)) -> -LoanedTo(x,y))", "all x.(Ailton(x) -> -LoanedTo(x,FootballClub))", "all x.((Ailton(x) & -LoanedToFootballClub(x)) -> -LoanedOutToFootballClub(x))", "all x.((Ailton(x) & -LoanedTo(x,FootballClub)) -> -LoanedOutTo(x,FootballClub))"]}
{"id": "folio_validation_560", "nl": "Ailton Silva played for Fluminense.", "fol": "PlaysForClub(Ailtonsilva,Fluminense)", "prediction": ["All x y.((AiltonSilva(x) & Fluminense(y)) -> PlayedFor(x,y))", "AiltonSilva played for Fluminense.", "All x.(AiltonSilva(x) -> PlayedForFluminense(x))", "Ailton Silva played for Fluminense.", "All x.((AiltonSilva(x) & Fluminense(x)) -> PlayedFor(x,y))", "All x.((AiltonSilva(x) & PlayedForFluminense(x)) -> PlayedForFluminense(x))", "All x.((AiltonSilva(x) & PlayedFor(x,Fluminense)) -> PlayedFor(x,Fluminense))", "All x.((AiltonSilva(x) & Fluminense(y)) -> PlayedFor(x,y))", "All x y.((AiltonSilva(x) & Fluminense(y)) -> Played(x,y))", "All x.((AiltonSilva(x) & Fluminense(x)) -> PlayedFor(x,Fluminense))", "All x.((AiltonSilva(x) & Fluminense(x)) -> PlayedFor(x,fluminense))", "All x.(AiltonSilva(x) -> PlayedFor(x,Fluminense))", "All x.((AiltonSilva(x) & Fluminense(x)) -> PlayedFor(x,Fiminense))", "All x.(AiltonSilva(x) -> PlayedForFlominense(x))", "All x.((AiltonSilva(x) & PlayedForFluminense(x)) -> PlayedFor(x,Fluminense))", "All x.(AiltonSilva(x) -> PlayedForFluidense(x))"]}
{"id": "folio_validation_561", "nl": "Ailton Silva was loaned out to a football club.", "fol": "exists x.(IsFootballClub(x) & LoanedToClub(Ailtonsilva,x))", "prediction": ["all x y.((AiltonSilva(x) & FootballClub(y)) -> LoanedOutTo(x,y))", "all x y.((AiltonSilva(x) & FootballClub(y)) -> LoanedOut(x,y))", "all x y z.((AiltonSilva(x) & FootballClub(y) & FootballClub(z)) -> LoanedOut(x,y,z))", "all x y z.((AiltonSilva(x) & FootballClub(y) & FootballClub(z)) -> LoanedOutTo(x,y,z))", "all x y z.((AiltonSilva(x) & FootballClub(y) & Club(z)) -> LoanedOutTo(x,y,z))", "all x y.((AiltonSilver(x) & FootballClub(y)) -> LoanedOutTo(x,y))", "all x y z.((Ailton Silva(x) & FootballClub(y) & FootballClub(z)) -> LoanedOutTo(x,y,z))", "all x y.((AiltonSilva(x) & FootballClub(y)) -> LoanedTo(x,y))", "all x y z.((Ailton Silva(x) & FootballClub(y) & FootballClub(z)) -> LoanedOut(x,y,z))", "all x y z.((AiltonSilva(x) & FootballClub(y) & Club(z)) -> LoanedOut(x,y,z))", "all x y z.((AiltonSilver(x) & FootballClub(y) & FootballClub(z)) -> LoanedOut(x,y,z))", "all x y.((AiltonSilver(x) & FootballClub(y)) -> LoanedOut(x,y))", "all x y z.((AiltonSilver(x) & FootballClub(y) & FootballClub(z)) -> LoanedOutTo(x,y,z))", "all x y.((Ailton Silva(x) & FootballClub(y)) -> LoanedOutTo(x,y))", "all x y.((AiltonSilva(x) & FootballClub(y)) -> LoanedOutTo(x,y))", "All x y.((AiltonSilva(x) & FootballClub(y)) -> LoanedOutTo(x,y))"]}
