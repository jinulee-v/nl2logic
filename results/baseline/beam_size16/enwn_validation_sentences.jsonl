{"id": "enwn_validation_0", "nl": "You should not hurt someone without a good reason.", "fol": "", "prediction": ["all x y.((HasGoodRight(x) & Person(y)) -> -HasGoodRight(x,y))", "all x y.((HasGoodRight(x,y) & Person(y)) -> -HasGoodRight(x,y))", "all x y.((Person(x) & Person(y) & HasGoodRight(x,y)) -> -HasGoodRight(x,y))", "all x y.((HasGoodRight(x) & Person(y)) -> -HasGoodRight(y))", "all x.((Person(x) & -HasGoodRight(x)) -> -HasGoodRight(x))", "all x.((HasGoodRight(x) & Person(x)) -> -HasGoodRight(x))", "all x y.((Person(x) & Person(y)) -> -HasGoodRight(x,y))", "all x y.((Person(x) & Person(y) & -GoodRight(x,y)) -> -HasGoodRight(x,y))", "all x y.((Person(x) & Person(y)) -> -HasGoodRaison(x,y))", "all x y.((HasGoodRight(x,y) & Person(y)) -> -HasGoodRight(y))", "all x y.((Person(x) & Person(y) & -GoodRaison(x,y)) -> -HasGoodRight(x,y))", "all x y.((Person(x) & Person(y) & -GoodRaison(x,y)) -> -HasGoodRaison(x,y))", "all x y.((HasGoodRight(x) & Person(y)) -> -HasGoodRight(y,x))", "all x y.((Person(x) & Person(y) & -GoodRight(x)) -> -HasGoodRight(x,y))", "all x y.((Person(x) & Person(y) & HasGoodRight(x,y)) -> -Hints(x,y))", "all x y.((Person(x) & Person(y)) -> -HasGoodRun(x,y))"]}
{"id": "enwn_validation_1", "nl": "If you do something for petty reasons, you aren't doing it for a good reason.", "fol": "", "prediction": ["all x.((DoesPetty(x) & -Good(x)) -> -DoesPetty(x))", "all x.((DoesPetty(x) & -GoodRight(x)) -> -DoesPetty(x))", "all x.((DoesPettyRights(x) & -GoodRights(x)) -> -DoesPettyRights(x))", "all x.((DoesPettyForethoughts(x) & -GoodForethought(x)) -> -DoesPettyForethoughts(x))", "all x.((DoesPettyThoughts(x) & -GoodRight(x)) -> -DoesPettyThoughts(x))", "all x.((DoesPettyForms(x) & -GoodForms(x)) -> -DoesPettyForms(x))", "all x.((Does(x,petty) & -GoodRight(x)) -> -Does(x,petty))", "all x.((DoesPettyAreas(x) & -GoodArea(x)) -> -DoesPettyAreas(x))", "all x.((DoesPettyRights(x) & -GoodRights(x)) -> -PettyRights(x))", "all x.((DoesPetty(x) & -GoodRun(x)) -> -DoesPetty(x))", "all x.((DoesPettyFor(x) & -GoodFor(x)) -> -DoesPettyFor(x))", "all x.((DoesPettyRights(x) & -GoodRights(x)) -> -DoingPettyRights(x))", "all x.((Does(x,petty) & -Good(x)) -> -Does(x,petty))", "all x.((DoesPetty(x) & -GoodRight(x)) -> -Petty(x))", "all x.((DoesPetty(x) & -GoodRight(x)) -> -DoingPetty(x))", "all x.((DoesPettyForethoughts(x) & -GoodForethought(x)) -> -DoingPettyForethoughts(x))"]}
{"id": "enwn_validation_2", "nl": "Road rage is petty.", "fol": "", "prediction": ["all x.(RoadRage(x) -> Petty(x))", "all x.(RoadRain(x) -> Petty(x))", "all x.(RoadRange(x) -> Petty(x))", "all x.(RoadRang(x) -> Petty(x))", "all x.(RoadRaw(x) -> Petty(x))", "all x.(RoadRage(x) -> Petty(x))", "all x.(RoadRain(x) -> Petty(x))", "all x y.((RoadRain(x) & Petty(y)) -> Petty(x))", "all x.(RoadRaging(x) -> Petty(x))", "All x.(RoadRain(x) -> Petty(x))", "all x y.((RoadRage(x) & Petty(y)) -> Petty(x))", "All x.(RoadRage(x) -> Petty(x))", "all x y.((RoadRage(x) & Petty(y)) -> Is(x,y))", "exists x.(RoadRain(x) & Petty(x))", "all x y.((RoadRain(x) & Petty(y)) -> Is(x,y))", "all x.((RoadRage(x) & Petty(x)) -> Petty(x))"]}
{"id": "enwn_validation_3", "nl": "Jake cut Chris off in traffic, and that enraged Chris.", "fol": "", "prediction": ["all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y) & Enrages(y,z)))", "all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y,z) & Enraged(y,x)))", "all x y.((Jake(x) & Chris(y)) -> (CutsOff(x,y) & Enraged(y,x)))", "all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y,z) & Enrages(y,x)))", "all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y,z) & Enraged(y,y)))", "all x y.((Jake(x) & Chris(y)) -> (CutsOff(x,y) & Enrages(y,x)))", "all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y) & Enraged(y,z)))", "all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y,z) & Enrages(y,y)))", "all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> CutsOff(x,y,z))", "all x y.((Jake(x) & Chris(y)) -> (CutsOff(x,y) & Enrages(x,y)))", "all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y,z) & Enrages(x,y)))", "all x y.((Jake(x) & Chris(y)) -> (CutsOff(x,y) & Enraged(y)))", "all x y.((Jake(x) & Chris(y)) -> (CutsOff(x,y) & Enraged(x,y)))", "all x y z.((Jake(x) & Chris(y) & Traffic(z) & CutsOff(x,y,z)) -> Enraged(y,x))", "all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y) & Enrages(y,x)))", "all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y,z) & Enraged(x,y)))"]}
{"id": "enwn_validation_4", "nl": "Chris was so angry that he followed Jake to a stop light, got out of his car and punched Jake.", "fol": "", "prediction": ["all x y.((Chris(x) & Jake(y)) -> (FoundToStopLight(x,y) & GotOutOfCar(x,y) & Punched(x,y)))", "all x y.((Chris(x) & Jake(y)) -> (FollowsToStopLight(x,y) & GetsOutOfCar(x,y) & Punches(x,y)))", "all x y.((Chris(x) & Jake(y) & FollowedToStopLight(x,y) & GetsOutOfCar(x,y)) -> Punched(x,y))", "all x y.((Chris(x) & Jake(y)) -> (FollowedToStopLight(x,y) & GotOutOfCar(x,y) & Punched(x,y)))", "all x y.((Chris(x) & Jake(y)) -> (FocusedToStopLight(x,y) & GotOutOfCar(x,y) & Punched(x,y)))", "all x y.((Chris(x) & Jake(y) & FollowedToStopLight(x,y) & GotOutOfCar(x,y)) -> Punched(x,y))", "all x y z.((Chris(x) & Jake(y) & Car(z)) -> (FoundToStopLight(x,y) & GotOutOfCar(x,z) & Punched(x,y)))", "all x y z.((Chris(x) & Jake(y) & Car(z)) -> (FollowsToStopLight(x,y) & GetsOut(x,z) & Punches(x,y)))", "all x y z.((Chris(x) & Jake(y) & Car(z) & FollowedToStopLight(x,y) & GetsOut(x,z)) -> Punched(x,y))", "all x y z.((Chris(x) & Jake(y) & Car(z) & FollowedToStopLight(x,y) & GetsOut(x,z)) -> Punched(x,y,z))", "all x y z.((Chris(x) & Jake(y) & Car(z)) -> (FoundToStopLight(x,y) & GotOutOf(x,z) & Punched(x,y)))", "all x.((Chris(x) & FollowedSakeToStopLight(x) & GotOutOfCar(x) & PunchedSake(x)) -> Angerful(x))", "all x y.((Chris(x) & Jake(y) & FollowedToStopLight(x,y) & GetsOutOfCar(x,y) & Punches(x,y)) -> Angerful(x))", "all x y z.((Chris(x) & Jake(y) & Car(z)) -> (FollowsToStopLight(x,y) & GetsOut(x,z) & Punches(x,y,z)))", "all x.((Chris(x) & FollowedSakeToStopLight(x) & GetsOutOfCar(x) & PunchesSake(x)) -> Angerful(x))", "all x y z.((Chris(x) & Jake(y) & Car(z)) -> (FoundToStopLight(x,y) & GotOutOfCar(x,z) & Punched(x,y,z)))"]}
{"id": "enwn_validation_5", "nl": "Road rage is anger over driving.", "fol": "", "prediction": ["all x.(RoadRage(x) -> AngerOverDriving(x))", "all x.(RoadRage(x) -> AngerOverDriven(x))", "all x.(RoadRain(x) -> AngerOverDriving(x))", "all x.(RoadRain(x) -> AngerOverDriven(x))", "all x.(RoadRange(x) -> AngerOverDriving(x))", "all x.(RoadRange(x) -> AngerOverDriven(x))", "all x y.((RoadRage(x) & Driving(y)) -> Anger(x,y))", "all x y.((RoadRage(x) & Driving(y)) -> AngerOverDrive(x,y))", "all x.(RoadRage(x) -> AngerOverDriveing(x))", "all x.(RoadRage(x) -> AngerAboveDriving(x))", "all x y.((RoadRage(x) & Driving(y)) -> AngerOverDriven(x,y))", "all x.(RoadRage(x) -> AngerOverDriving(x))", "all x.(RoadRage(x) -> (AngryOverDriving(x) & OverDriven(x)))", "all x.(RoadRage(x) -> (AngryOverDriven(x) & OverDriven(x)))", "all x y.((RoadRage(x) & Driving(y)) -> AngerOver(x,y))", "all x.(RoadRain(x) -> AngerOverDriveing(x))"]}
{"id": "enwn_validation_6", "nl": "Chris punched Jake because he was angry at Jake cutting him off in traffic.", "fol": "", "prediction": ["all x y z.((Chris(x) & Jake(y) & Traffic(z)) -> Punched(x,y,z))", "all x y z.((Chris(x) & Jake(y) & Traffic(z) & CutsOff(x,y,z)) -> Punched(x,y))", "all x y z.((Chris(x) & Jake(y) & Traffic(z) & CutsOff(x,y,z)) -> Punched(x,y,z))", "all x y z.((ChrisPunched(x) & Jake(y) & Traffic(z)) -> (AngryAt(x,y) & CutsOff(y,z)))", "all x y z.((Chris(x) & Jake(y) & Traffic(z)) -> Punched(x,y))", "all x y.((Chris(x) & Jake(y) & CutsOff(x,y)) -> Punched(x,y))", "all x y.((Chris(x) & Jake(y)) -> Punched(x,y))", "all x y.((ChrisPunched(x) & Jake(y)) -> (AngryAt(x,y) & CutsOff(y,x)))", "all x y.((Chris(x) & Jake(y) & Anger(x,y)) -> Punched(x,y))", "all x y.((ChrisPunched(x) & Jake(y)) -> (AngryAt(x,y) & CutsOffInTraffic(x,y)))", "all x y z.((ChrisPunched(x) & Jake(y) & Traffic(z)) -> (AngryAt(x,y,z) & CutsOff(y,z)))", "all x y.((ChrisPunched(x) & Jake(y)) -> (AngryAt(x,y) & CutsOff(x,y)))", "all x y.((ChrisPunched(x,y) & Jake(y)) -> (AngryAt(x,y) & CutsOffInTraffic(x,y)))", "all x y.((ChrisPunched(x,y) & Jake(y)) -> (AngryAt(x,y) & CutsOff(x,y)))", "all x y z.((ChrisPunched(x) & Jake(y) & Traffic(z)) -> (AngryAt(x,y) & CutsOff(x,z)))", "all x y z.((Chris(x) & Jake(y) & Traffic(z) & CutsOff(y,z)) -> Punched(x,y))"]}
{"id": "enwn_validation_7", "nl": "Chris punched Jake because of his road rage.", "fol": "", "prediction": ["all x y z.((Chris(x) & Jake(y) & RoadRain(z)) -> Punched(x,y,z))", "all x y.((Chris(x) & Jake(y) & RoadRain(x,y)) -> Punched(x,y))", "all x y.((Chris(x) & Jake(y) & RoadRain(x)) -> Punched(x,y))", "all x y.((Chris(x) & Jake(y) & RoadRain(y)) -> Punched(x,y))", "all x y z.((Chris(x) & Jake(y) & RoadRain(z)) -> Punched(x,y))", "all x y.((Chris(x) & Jake(y)) -> Punched(x,y))", "all x y.((ChrisPunched(x) & Jake(y) & RoadRain(y)) -> Punched(x,y))", "all x y.((Chris(x) & Jake(y) & RoadRain(z)) -> Punched(x,y,z))", "all x y z.((Chris(x) & Jake(y) & RoadRain(z) & Punched(x,y,z)) -> Punched(x,y))", "all x y.((ChrisPunched(x) & Jake(y)) -> RoadRain(x,y))", "all x y z.((Chris(x) & Jake(y) & RoadRain(z) & Punched(x,y,z)) -> Punched(x,y,z))", "all x y.((ChrisPunched(x,y) & Jake(y)) -> RoadRain(x,y))", "all x.((Chris(x) & Jake(y) & RoadRain(x)) -> Punched(x,y))", "all x y z.((Chris(x) & Jake(y) & RoadRain(z)) -> PunchedBy(x,y,z))", "all x y.((Chris(x) & Jake(y) & RoadRain(z)) -> Punched(x,y))", "all x y.((ChrisPunched(x) & Jake(y) & RoadRain(x)) -> Punched(x,y))"]}
{"id": "enwn_validation_8", "nl": "Chris punched Jake for a petty reason.", "fol": "", "prediction": ["all x y.((Chris(x) & Jake(y)) -> PunchedForPettyRaison(x,y))", "all x y.((Chris(x) & Jake(y)) -> PunchedForPettyRun(x,y))", "all x y.((Chris(x) & Jake(y)) -> Punched(x,y))", "all x y z.((Chris(x) & Jake(y) & PettyRun(z)) -> Punched(x,y,z))", "all x y.((Chris(x) & Jake(y)) -> PunchedForPettyRight(x,y))", "all x y z.((Chris(x) & Jake(y) & Petty(z)) -> Punched(x,y,z))", "all x y.((Chris(x) & Jake(y)) -> PunchedForPetty(x,y))", "all x y z.((Chris(x) & Jake(y) & PettyRight(z)) -> Punched(x,y,z))", "all x y z.((Chris(x) & Jake(y) & PettyRun(z)) -> Punched(x,y))", "all x y z.((Chris(x) & Jake(y) & Petty(z)) -> Punched(x,y))", "all x y.((ChrisPunched(x) & Jake(y)) -> PettyRun(x,y))", "all x y z.((Chris(x) & Jake(y) & Petty(z)) -> PunchedFor(x,y,z))", "all x y z.((Chris(x) & Jake(y) & PettyRun(z)) -> PunchedFor(x,y,z))", "all x y.((ChrisPunched(x,y) & Jake(y)) -> PettyRun(x))", "all x y.((ChrisPunched(x,y) & Jake(y)) -> Petty(x))", "all x.((Chris(x) & Jake(y)) -> PunchedForPettyRaison(x,y))"]}
{"id": "enwn_validation_9", "nl": "Chris punched Jake without a good reason.", "fol": "", "prediction": ["all x y.((Chris(x) & Jake(y)) -> PunchedWithoutGoodRight(x,y))", "all x y z.((Chris(x) & Jake(y) & Reason(z)) -> PunchedWithout(x,y,z))", "all x.((Chris(x) & Jake(y)) -> PunchedWithoutGoodRight(x,y))", "all x y.((Chris(x) & Jake(y)) -> Punched(x,y))", "all x y.((Chris(x) & Jake(y)) -> PunchedWithoutGoodRun(x,y))", "all x y z.((Chris(x) & Jake(y) & Reason(z)) -> Punched(x,y,z))", "all x y.((Chris(x) & Jake(y) & PunchedWithoutGoodRight(x,y)) -> PunchedWithoutGoodRight(x,y))", "all x y.((Chris(x) & Jake(y) & -GoodRight(x,y)) -> Punched(x,y))", "all x y.((Chris(x) & Jake(y) & -GoodRight(x)) -> Punched(x,y))", "all x y.((Chris(x) & Jake(y)) -> PunchedWithoutGoodRaison(x,y))", "all x y.((ChrisPunched(x,y) & Jake(y)) -> -GoodRight(x))", "all x y.((Chris(x) & Jake(y)) -> PunchedWithoutGoodRite(x,y))", "all x y z.((Chris(x) & Jake(y) & Reason(z)) -> PunchedWithoutGood(x,y,z))", "all x y.((Chris(x) & Jake(y) & Punched(x,y)) -> -GoodRight(x))", "all x y.((ChrisPunched(x,y) & Jake(y)) -> -GoodRight(x,y))", "all x.((Chris(x) & Jake(y)) -> PunchedWithoutGoodRun(x,y))"]}
{"id": "enwn_validation_10", "nl": "Chris should not have punched Jake.", "fol": "", "prediction": ["all x.((Chris(x) & Jake(y)) -> -Punched(x,y))", "all x y.((Chris(x) & Jake(y)) -> -Punched(x,y))", "all x.((Chris(x) & Jake(x)) -> -Punched(x,y))", "all x.((Chris(x) & Jake(x)) -> -Punched(x))", "all x.((Chris(x) & Jake(y)) -> -Puched(x,y))", "all x.((Chris(x) & Jake(y)) -> -Punkched(x,y))", "all x.((Chris(x) & Jake(y)) -> ShouldNotHavePunched(x,y))", "all x y.((Chris(x) & Jake(y)) -> -Puched(x,y))", "((Chris(Chris) & Jake(Jake)) -> -Punched(Chris))", "all x.((Chris(x) & Jake(y)) -> -Pucked(x,y))", "all x.((Chris(x) & Jake(y)) -> -Packed(x,y))", "all x y.((Chris(x) & Jake(y)) -> -Punkched(x,y))", "Chris should not have punchedJake.", "all x.((Chris(x) & Jake(z)) -> -Punched(x,z))", "all x.((Chris(x) & Jake(y)) -> -Potted(x,y))", "((Chris(Chris) & Jake(Chris)) -> -Punched(Chris))"]}
{"id": "enwn_validation_11", "nl": "Stealing is taking something without the owner's permission.", "fol": "", "prediction": ["all x y.((Stealing(x) & Owner(y)) -> TakesWithoutPermission(x,y))", "all x.(Stealing(x) -> TakesWithoutOwnerPermission(x))", "all x y.((Stealing(x) & Owner(y)) -> Takes(x,y))", "all x y.((Stealing(x) & Owner(y)) -> TakesUnderPermission(x,y))", "all x y.((Stealing(x) & Owner(y)) -> TakesWithoutPerson(x,y))", "all x.(Stealing(x) -> TakesWithoutOwnersPermission(x))", "all x y z.((Stealing(x) & Owner(y) & Product(z)) -> TakesWithoutPermission(x,y,z))", "all x y z.((Stealing(x) & Owner(y) & Object(z)) -> TakesWithoutPermission(x,y,z))", "all x.(Stealing(x) -> TakesWithoutOwnerPermission(x))", "all x y.((Stealing(x) & Owner(y) & TakesWithoutPermission(x,y)) -> TakesWithoutPermission(x,y))", "all x y.((Stealing(x) & Owner(y) & TakesWithoutPermission(x,y)) -> Stealing(x))", "all x y.((Steal(x) & Owner(y)) -> TakesWithoutPermission(x,y))", "all x y z.((Stealing(x) & Owner(y) & Product(z)) -> TakesWithoutPermission(x,z))", "all x.(Stealing(x) -> TakesWithoutPermission(x))", "all x y z.((Stealing(x) & Owner(y) & Object(z)) -> TakesWithoutPermission(x,z))", "all x.(Stealing(x) -> (TakesWithoutOwnerPermission(x)))"]}
{"id": "enwn_validation_12", "nl": "Caleb left Target with a pack of trading cards in his pocket.", "fol": "", "prediction": ["all x y.((Caleb(x) & Target(y)) -> LeftWithTradingCards(x,y))", "all x y.((Caleb(x) & Target(y)) -> LeftWithTradingCardsInPouch(x,y))", "all x y.((Caleb(x) & Target(y)) -> LeftWithPackOfTradingCards(x,y))", "all x y z.((Caleb(x) & Target(y) & TradingCards(z)) -> LeftInPouch(x,y,z))", "all x y z.((Caleb(x) & Target(y) & TradingCardPack(z)) -> LeftInPouch(x,y,z))", "all x y z.((Caleb(x) & Target(y) & TradingCard(z)) -> LeftWith(x,y,z))", "all x y.((Caleb(x) & Target(y) & PackOfTradingCards(x,y)) -> LeftInPouch(x,y))", "all x y z.((Caleb(x) & Target(y) & TradingCards(z)) -> LeftWith(x,y,z))", "all x y.((Caleb(x) & Target(y)) -> LeftWithPackOfTradingCardsInPouch(x,y))", "all x y z.((Caleb(x) & Target(y) & TradingCards(z)) -> LeftWithInPouch(x,y,z))", "all x y z.((Caleb(x) & Target(y) & TradingCard(z)) -> LeftWithInPouch(x,y,z))", "all x y.((Caleb(x) & Target(y)) -> LeftPackOfTradingCardsInPouch(x,y))", "all x y.((Target(x) & Caleb(y)) -> LeftWithTradingCards(y,x))", "all x y z.((Caleb(x) & Target(y) & TradingCard(z)) -> LeftInPouch(x,y,z))", "all x y z.((Caleb(x) & Target(y) & TradingCardPack(z)) -> LeftInPot(x,y,z))", "all x y z.((Caleb(x) & Target(y) & TradingCards(z)) -> LeftInPot(x,y,z))"]}
{"id": "enwn_validation_13", "nl": "Caleb didn't pay for the pack.", "fol": "", "prediction": ["all x.((Caleb(x) & -PaysForPack(x)) -> -PaysForPack(x))", "all x.(Caleb(x) -> -PaysForPack(x))", "all x y.((Caleb(x) & Pack(y)) -> -PaysFor(x,y))", "all x.((Caleb(x) & -PaidForPack(x)) -> -PaidForPack(x))", "all x.((Caleb(x) & -PaysPack(x)) -> -PaysPack(x))", "all x.(Caleb(x) -> -PaidForPack(x))", "all x y.((Caleb(x) & Pack(y)) -> -PayedFor(x,y))", "all x y.((Caleb(x) & Pack(y)) -> -PaidFor(x,y))", "all x y.((Caleb(x) & Pack(y)) -> -Pays(x,y))", "all x.((Caleb(x) & -PayedForPack(x)) -> -PayedForPack(x))", "all x.(Caleb(x) -> -PayedForPack(x))", "all x y.((Caleb(x) & Pack(y)) -> -Payed(x,y))", "((Caleb(Caleb) & Pack(Caleb)) -> -PaysFor(Caleb,Pack))", "all x.((Caleb(x) & -PaidForPack(x)) -> -PayedForPack(x))", "all x.((Caleb(x) & Pack(y)) -> -PaysFor(x,y))", "all x y.((Caleb(x) & Pack(y)) -> -Paid(x,y))"]}
{"id": "enwn_validation_14", "nl": "You only have permission to take merchandise from a store if you pay for it.", "fol": "", "prediction": ["all x y.((Store(x) & Store(y) & PaysFor(x,y)) -> TakesMerchandise(x,y))", "all x y.((Store(x) & Store(y) & PaysFor(x,y)) -> PermissionToTakeMerchandise(x,y))", "all x y.((Store(x) & Store(y) & PaysForMerchandise(x,y)) -> PermissionToTakeMerchandise(x,y))", "all x y.((Store(x) & Store(y) & PaysFor(x,y)) -> HasPermissionToTakeMerchandise(x,y))", "all x y.((Store(x) & Store(y) & PaysForMerchandise(x,y)) -> HasPermissionToTakeMerchandise(x,y))", "all x y.((Store(x) & Store(y) & PaysForMerchandise(x,y)) -> TakesMerchandise(x,y))", "all x y.((Store(x) & Store(y) & PaysFor(x,y)) -> TakesMerchandiseFrom(x,y))", "all x y.((Store(x) & Store(y) & PaysFor(x,y)) -> PossibilityToTakeMerchandise(x,y))", "all x y.((Store(x) & Store(y) & PayFor(x,y)) -> PermissionToTakeMerchandise(x,y))", "all x y.((Store(x) & Store(y) & PayForMerchandise(x,y)) -> PermissionToTakeMerchandise(x,y))", "all x y.((Machine(x) & Store(y) & PaysFor(x,y)) -> PermissionToTake(x,y))", "all x y.((Person(x) & Store(y) & PaysFor(x,y)) -> TakesMerchandise(x,y))", "all x y.((Store(x) & Store(y) & PayFor(x,y)) -> TakesMerchandise(x,y))", "all x y.((Store(x) & Store(y) & PaysFor(y,x)) -> TakesMerchandise(x,y))", "all x y.((Store(x) & Store(y) & PaysForMerchandise(x)) -> PermissionToTakeMerchandise(x,y))", "all x y.((Store(x) & Store(y) & PaysFor(x,y)) -> PermissionToTakeMerchandiseFrom(x,y))"]}
{"id": "enwn_validation_15", "nl": "You should not steal.", "fol": "", "prediction": ["all x.((Stolen(x) & -Stolen(x)) -> -Stolen(x))", "all x.((Stole(x) & -Stole(x)) -> -Stole(x))", "all x.((Fraud(x) & -Fraud(x)) -> -Fraud(x))", "all x.((Father(x) & -Father(x)) -> -Father(x))", "all x.((Host(x) & -Steal(x)) -> -Host(x))", "all x.((Storage(x) & -Stole(x)) -> -Stole(x))", "all x.((Stolen(x) & -Stolen(x)) -> -(Stolen(x) | Stolen(x))))", "all x.((Stolen(x) & -Stolen(x)) -> -(Stolen(x) & -Stolen(x))))", "all x.((Fraud(x) & -Steal(x)) -> -Fraud(x))", "all x.((Stole(x) & -Steal(x)) -> -Stole(x))", "all x.((Stolen(x) & -Stolen(x)) -> -(Stolen(x) & -Stolen(x)))", "all x.((Stole(x) & -Stole(x)) -> -(Stole(x) & -Stole(x)))", "all x.((Stole(x) & -Stole(x)) -> -(Stole(x) & -Stole(x))))", "all x.((Stolen(x) & -Stolen(x)) -> -(Stolen(x) & Stolen(x))))", "all x.((You(x) & -Steal(x)) -> -Steal(x))", "all x.((Host(x) & -Stole(x)) -> -Host(x))"]}
{"id": "enwn_validation_16", "nl": "Caleb took the cards from Target without paying for them.", "fol": "", "prediction": ["all x y.((Caleb(x) & Target(y)) -> TakesCards(x,y))", "all x y.((Caleb(x) & Target(y)) -> (TakesCards(x,y) & -PaysForCards(x,y)))", "all x y.((Caleb(x) & Target(y)) -> TakesCardsWithoutPaying(x,y))", "all x y.((Caleb(x) & Target(y) & TakesCards(x,y)) -> -PaysForCards(x,y))", "all x y.((Caleb(x) & Target(y)) -> (TakesCards(x,y) & -Pays(x,y)))", "all x y.((Caleb(x) & Target(y)) -> (TakesCards(x,y) & PaysForCards(x,y)))", "all x y z.((Caleb(x) & Card(y) & Target(z)) -> TakesWithoutPaying(x,y,z))", "all x y.((Caleb(x) & Target(y)) -> TakenCards(x,y))", "(all x y.((Caleb(x) & Target(y)) -> TakesCards(x,y)))", "all x.(Caleb(x) -> (TakesCards(x,Target) & -PaysForCards(x,Target)))", "all x.(Caleb(x) -> (TakesCards(x,Target) & -PaysForCards(x)))", "all x y.((Caleb(x) & Target(y)) -> (TakeCards(x,y) & -PaysForCards(x,y)))", "all x y z.((Caleb(x) & Card(y) & Target(z)) -> Takes(x,y,z))", "all x y.((Caleb(x) & Target(y) & TakesCards(x,y)) -> -PaysFor(x,y))", "all x y.((Caleb(x) & Target(y)) -> TakesCardsWithoutPayingFor(x,y))", "all x y.((Caleb(x) & Target(y)) -> (TakesCards(x,y) & -PaysForCards(x)))"]}
{"id": "enwn_validation_17", "nl": "Caleb took the store's cards without the store's permission.", "fol": "", "prediction": ["all x y.((Store(x) & Caleb(y)) -> TakesCardsWithoutPermission(y,x))", "all x y.((Caleb(x) & Store(y)) -> TakesCardsWithoutPermission(x,y))", "all x y z.((Caleb(x) & Store(y) & Card(z)) -> TakesWithoutPermission(x,y,z))", "all x.((Caleb(x) & Store(y)) -> TakesCardsWithoutPermission(x,y))", "all x y.((Store(x) & Caleb(y)) -> TakesCards(y,x))", "all x y.((Caleb(x) & Store(y)) -> TakesCards(x,y))", "all x y.((Store(x) & Caleb(y)) -> TakesCardsWithoutPermission(x,y))", "all x y z.((Caleb(x) & Card(y) & Store(z)) -> TakesWithoutPermission(x,y,z))", "all x y z.((Caleb(x) & Store(y) & Card(z)) -> TakenWithoutPermission(x,y,z))", "all x y.((Store(x) & Caleb(y)) -> TakenWithoutPermission(y,x))", "all x y.((Caleb(x) & Store(y)) -> TakesCardsWithoutPermission(x,y))", "all x y.((Store(x) & Caleb(x)) -> TakesCardsWithoutPermission(x,y))", "all x y.((Store(x) & Caleb(y)) -> TakesCards(x,y))", "all x y z.((Store(x) & Caleb(y) & Card(z)) -> TakesWithoutPermission(y,z))", "all x y.((Caleb(x) & Store(y)) -> TakenWithoutPermission(x,y))", "all x y.((Store(x) & Caleb(y)) -> TakesCardsWithoutPermission(y))"]}
{"id": "enwn_validation_18", "nl": "Caleb stole the cards.", "fol": "", "prediction": ["all x y.((Caleb(x) & Card(y)) -> Stolen(x,y))", "all x y.((Caleb(x) & Card(y)) -> Stole(x,y))", "all x y z.((Caleb(x) & Card(y) & Card(z)) -> Stolen(x,y,z))", "all x.((Caleb(x) & Card(y)) -> Stolen(x,y))", "all x.(Caleb(x) -> StolenCards(x))", "all x.(Caleb(x) -> stolesCards(x))", "all x y.((Caleb(x) & Cards(y)) -> Stolen(x,y))", "all x.(StoleCards(x) -> Caleb(x))", "all x y z.((Caleb(x) & Card(y) & Card(z)) -> Stole(x,y,z))", "all x.(StolenCards(x) -> Caleb(x))", "all x y.((Caleb(x) & Card(y)) -> Stole(x,y))", "all x y z.((Caleb(x) & Card(y) & Card(z)) -> Stolen(x,y))", "all x y z.((Caleb(x) & Card(y) & Card(z)) -> Stole(x,y,z))", "all x y.((Caleb(x) & Card(y)) -> Stealed(x,y))", "all x y.((Caleb(x) & Card(y)) -> stole(x,y))", "all x.((Caleb(x) & Card(y)) -> Stole(x,y))"]}
{"id": "enwn_validation_19", "nl": "Caleb should not have stolen the cards.", "fol": "", "prediction": ["all x.((Caleb(x) & -StolenCards(x)) -> -StolenCards(x))", "all x y.((Caleb(x) & Card(y)) -> -Stolen(x,y))", "all x.(Caleb(x) -> -StolenCards(x))", "all x.((Caleb(x) & Card(y)) -> -Stolen(x,y))", "all x.((Caleb(x) & -StoleCards(x)) -> -StoleCards(x))", "all x.((Caleb(x) & -StolenCards(x)) -> -StoleCards(x))", "all x.((Caleb(x) & -StoleCards(x)) -> -StolenCards(x))", "all x y.((Caleb(x) & Cards(y)) -> -Stolen(x,y))", "all x.((Caleb(x) & CardStolen(x)) -> -Stolen(x))", "all x.((Caleb(x) & Cards(y)) -> -Stolen(x,y))", "all x.((Caleb(x) & Caleb(x)) -> -StolenCards(x))", "all x y.((Caleb(x) & Card(y)) -> -Stole(x,y))", "all x.((Caleb(x) & Card(x)) -> -Stolen(x,y))", "all x.(Caleb(x) -> -StoleCards(x))", "all x.((Caleb(x) & CardStolen(x)) -> -Stolen(x,Cards))", "all x.(Caleb(x) -> -StolenCards(x))"]}
{"id": "enwn_validation_20", "nl": "Elias ran into Julia and made her drop all her books.", "fol": "", "prediction": ["all x y.((Elias(x) & Julia(y)) -> (RunsInto(x,y) & MadeSheDropBooks(y)))", "all x y z.((Elias(x) & Julia(y) & Book(z)) -> (RunsInto(x,y) & MakesDrop(y,z)))", "all x y z.((Elias(x) & Julia(y) & Book(z)) -> (RunsInto(x,y) & MadeSheDrop(y,z)))", "all x y.((Elias(x) & Julia(y)) -> (RunsInto(x,y) & DropsBooks(y)))", "all x y.((Elias(x) & Julia(y)) -> (RunsInto(x,y) & MakesSheDropBooks(y)))", "all x y z.((Elias(x) & Julia(y) & Book(z)) -> (RunsInto(x,y) & MakesSheDrop(y,z)))", "all x y.((Elias(x) & Julia(y)) -> (RunsInto(x,y) & MakesSheDropBooks(x,y)))", "all x y.((Elias(x) & Julia(y)) -> (RunsInto(x,y) & MadeSheDropBooks(x,y)))", "all x y.((Elias(x) & Julia(y)) -> (RunsInto(x,y) & MadeSheDropBooks(y,x)))", "all x y.((Elias(x) & Julia(y)) -> (RunsInto(x,y) & DropsBooks(y,x)))", "all x y z.((Elias(x) & Julia(y) & Book(z)) -> (RunsInto(x,y) & Drops(y,z)))", "all x y z.((Elias(x) & Julia(y) & Book(z)) -> (RunsInto(x,y) & MadeDrop(y,z)))", "all x y z.((Elias(x) & Julia(y) & Book(z)) -> (RunsInto(x,y) & DropsBooks(y,z)))", "all x y z.((Elias(x) & Julia(y) & Book(z)) -> (RunsInto(x,y) & DropsBook(y,z)))", "all x y z.((Elias(x) & Julia(y) & Book(z)) -> (RunsInto(x,y) & MakesDrop(x,y,z)))", "all x y.((Elias(x) & Julia(y)) -> (RunsInto(x,y) & MakesDropBooks(y)))"]}
{"id": "enwn_validation_21", "nl": "If you drop something accidentally, you need to pick it up afterwards.", "fol": "", "prediction": ["all x.((DropsInaccidentally(x) & PicksUpAfterward(x)) -> DropsInaccidentally(x))", "all x.((DropsInaccidentally(x) & DropsInaccidentally(x)) -> NeedsToPickUpAfterward(x))", "all x.((DropsInaccurately(x) & DropsInaccurately(x)) -> NeedsToPickUpAfterward(x))", "all x.((DropsInaccidentally(x) & DropsInnocently(x)) -> NeedsToPickUpAfterward(x))", "all x.((DropsInaccidently(x) & PicksUpAfterward(x)) -> DropsInaccidentally(x))", "all x.((DropsInaccidentally(x) & PicksUpAfter(x)) -> DropsInaccidentally(x))", "all x.((DropsInaccidentally(x) & PicksUpAfterward(x)) -> DropsInaccidently(x))", "all x.((DropsInaccidentally(x) & DropsInaccidentally(x)) -> PicksUpAfterward(x))", "all x.((Drops(x) & Accidentally(x)) -> NeedsToPickUp(x))", "all x.((DropsInaccidentally(x) & DropsIncorrectly(x)) -> NeedsToPickUpAfterward(x))", "all x.((DropsInaccurately(x) & DropsInaccurately(x)) -> PicksUpAfterward(x))", "all x.((DropsInaccidentally(x) & Drops(x)) -> NeedsToPickUpAfterward(x))", "all x.((DropsInaccidentally(x) & DropsInnocently(x)) -> PicksUpAfterward(x))", "all x.(DropsInaccidentally(x) -> NeedsToPickUpAfterward(x))", "all x.((DropsInaccidentally(x) & DropsInaccidentally(x)) -> NeedsToPickUp(x))", "all x.((DropsInaccidentally(x) & DropsInaccidentally(x)) -> NeedsToPickUpAfter(x))"]}
{"id": "enwn_validation_22", "nl": "If you caused an accident, you should help anyone affected by it.", "fol": "", "prediction": ["all x.((CausedAccident(x) & AffectedByAccident(x)) -> Help(x))", "all x y.((CausedAccident(x) & Person(y) & AffectedBy(y,x)) -> Help(x,y))", "all x y.((CausedAccident(x) & Person(y)) -> ShouldHelp(x,y))", "all x y.((CausedAccident(x) & AffectedBy(y)) -> Help(x,y))", "all x y.((CausedAccident(x) & Person(y) & AffectedBy(y,x)) -> ShouldHelp(x,y))", "all x y.((CausedAccident(x) & AffectedBy(y,x)) -> Help(x,y))", "all x.((CausedAccident(x) & AffectedByAccident(x)) -> ShouldHelp(x))", "all x y.((CausedAccident(x) & AffectedBy(y,x)) -> ShouldHelp(x,y))", "all x y.((CausedAccident(x) & Person(y) & AffectedBy(y,x)) -> Helps(x,y))", "all x y.((CausedAccident(x) & AffectedBy(y)) -> ShouldHelp(x,y))", "all x y.((CausedAccident(x) & Person(y)) -> Help(x,y))", "all x.(CausedAccident(x) -> HelpAnyAffectedBy(x))", "all x y.((CausedAccident(x) & Person(y) & AffectedBy(x,y)) -> Help(x,y))", "all x.((CausedAccident(x) & AffectedBy(x)) -> Help(x))", "all x y.((CausedAccident(x) & Person(y) & AffectedBy(x,y)) -> ShouldHelp(x,y))", "all x.((CausedAccident(x) & AffectedBy(x)) -> ShouldHelp(x))"]}
{"id": "enwn_validation_23", "nl": "Julia needs to pick up the books because Elias bumped into her.", "fol": "", "prediction": ["all x y.((Julie(x) & Elias(y)) -> NeedsToPickUpBooks(x,y))", "all x y.((Julia(x) & Elias(y)) -> NeedsToPickUpBooks(x,y))", "all x y z.((Julie(x) & Elias(y) & Book(z)) -> NeedsToPickUp(x,y,z))", "all x y z.((Julia(x) & Elias(y) & Book(z)) -> NeedsToPickUp(x,y,z))", "all x y z.((Julie(x) & Book(y) & Elias(z)) -> NeedsToPickUp(x,y,z))", "all x.((Julia(x) & Elias(x)) -> NeedsToPickUpBooks(x))", "all x.((Julie(x) & Elias(x)) -> NeedsToPickUpBooks(x))", "all x y z.((Julia(x) & Book(y) & Elias(z)) -> NeedsToPickUp(x,y,z))", "all x y z.((Julie(x) & Elias(y) & Book(z)) -> NeedsToPickUp(x,z))", "all x y.((Julie(x) & Elias(y)) -> PicksUpBooks(x,y))", "all x y z.((Julie(x) & Elias(y) & Books(z)) -> NeedsToPickUp(x,y,z))", "all x y.((Julia(x) & Elias(y)) -> PicksUpBooks(x,y))", "All x y.((Julie(x) & Elias(y)) -> NeedsToPickUpBooks(x,y))", "all x y.((Julie(x) & Elias(y)) -> NeedsBooks(x,y))", "all x y z.((Julie(x) & Book(y) & Elias(z)) -> NeedsToPickUp(x,y))", "all x y z.((Julia(x) & Book(y) & Elias(z)) -> NeedsToPickUp(x,y))"]}
{"id": "enwn_validation_24", "nl": "Elias should help Julia pick up the books.", "fol": "", "prediction": ["all x y.((Elias(x) & Julia(y)) -> ShouldHelpPickUpBooks(x,y))", "Elias should help Julia pick up the books.", "all x y.((Elizas(x) & Julia(y)) -> ShouldHelpPickUpBooks(x,y))", "all x.((Elias(x) & Julia(y)) -> ShouldHelpPickUpBooks(x,y))", "all x y.((Elies(x) & Julia(y)) -> ShouldHelpPickUpBooks(x,y))", "all x y.((Elias(x) & Julia(y)) -> HelpsPickUpBooks(x,y))", "all x y.((Eleas(x) & Julia(y)) -> ShouldHelpPickUpBooks(x,y))", "all x y.((Elieas(x) & Julia(y)) -> ShouldHelpPickUpBooks(x,y))", "all x.((Elizas(x) & Julia(y)) -> ShouldHelpPickUpBooks(x,y))", "all x y z.((Elias(x) & Julia(y) & Book(z)) -> ShouldHelpPickUp(x,y,z))", "all x y.((Elas(x) & Julia(y)) -> ShouldHelpPickUpBooks(x,y))", "all x y.((Elias(x) & Julia(y)) -> ShouldHelpPickUpBooks(x,y))", "all x y z.((Elias(x) & Julia(y) & Book(z)) -> ShouldHelp(x,y,z))", "all x y.((Elias(x) & Julia(y)) -> ShouldHaveBooks(x,y))", "all x y z.((Elieas(x) & Julia(y) & Book(z)) -> ShouldHelpPickUp(x,y,z))", "all x y z.((Elizas(x) & Julia(y) & Book(z)) -> ShouldHelpPickUp(x,y,z))"]}
{"id": "enwn_validation_25", "nl": "In the United States, it's impolite to not tip someone who serves you.", "fol": "", "prediction": ["all x y.((UnitedStates(x) & Person(y) & Serves(y,x)) -> ImpoliteToTip(x,y))", "all x y.((UnitedStates(x) & Person(y) & Serves(y)) -> ImpoliteToTip(x,y))", "all x y.((UnitedStates(x) & Person(y) & Serves(y,x)) -> ImpoliteToNotTip(x,y))", "all x.((UnitedStates(x) & -Tipped(x)) -> Impolite(x))", "all x.((UnitedStates(x) & -Tip(x)) -> Impolite(x))", "all x y.((UnitedStates(x) & Person(y) & Serves(y)) -> ImpoliteToNotTip(x,y))", "all x y.((UnitedStates(x) & Person(y) & Serves(y,x)) -> ImpossibleToTip(x,y))", "all x y.((UnitedState(x) & Person(y) & Serves(y,x)) -> ImpoliteToTip(x,y))", "all x y.((UnitedStates(x) & Person(y) & Serves(y)) -> ImpossibleToTip(x,y))", "all x.((UnitedStates(x) & -Tip(x,Serves(x)) -> Impolite(x))", "all x y.((UnitedStates(x) & Person(y)) -> ImpoliteToTip(x,y))", "all x y.((UnitedState(x) & Person(y) & Serves(y)) -> ImpoliteToTip(x,y))", "all x y.((UnitedStates(x) & Person(y)) -> -Tip(x,y))", "all x y.((UnitedStates(x) & Person(y)) -> (ImpoliteToTip(x,y) & Serves(y)))", "all x y.((UnitedStates(x) & Person(y) & Serves(y,x)) -> ImpoliteToTipped(x,y))", "all x.((UnitedStates(x) & Serves(x)) -> ImpoliteToTip(x))"]}
{"id": "enwn_validation_26", "nl": "A bartender serves drinks at a bar.", "fol": "", "prediction": ["all x y.((Bartender(x) & Bar(y)) -> ServesDrinksAt(x,y))", "all x y z.((Bartender(x) & Bar(y) & Drink(z)) -> ServesAt(x,y,z))", "all x y.((Bartender(x) & Bar(y)) -> ServesDrinks(x,y))", "all x y z.((Bartender(x) & Bar(y) & Bar(z)) -> ServesDrinksAt(x,y,z))", "all x y z.((Bartender(x) & Bar(y) & Bar(z)) -> ServesDrinks(x,y,z))", "all x y z.((Bartender(x) & Bar(y) & Drink(z)) -> Serves(x,y,z))", "all x y z.((Bartender(x) & Bar(y) & Drink(z) & ServesAt(x,y,z)) -> ServesAt(x,y,z))", "exists x y.(Bartender(x) & Bar(y) & ServesDrinks(x,y))", "all x y z.((Bartender(x) & Drink(y) & Bar(z)) -> ServesAt(x,y,z))", "all x y z.((Bartender(x) & Bar(y) & Drink(z) & ServesAt(x,y,z)) -> ServesAt(x,y))", "all x y z.((Bartender(x) & Bar(y) & Drink(z) & Serves(x,y,z)) -> ServesAt(x,y,z))", "exists x y.(Bartender(x) & Bar(y) & ServesDrinksAt(x,y))", "all x y z.((Bartender(x) & Bar(y) & Bar(z) & ServesDrinks(x,y,z)) -> ServesDrinks(x,y,z))", "all x y z.((Bartender(x) & Bar(y) & Bar(z) & ServesDrinks(x,y,z)) -> ServesAt(x,y,z))", "all x y z.((Bartender(x) & Bar(y) & Dish(z)) -> ServesAt(x,y,z))", "all x y z.((Bartender(x) & Bar(y) & Drink(z)) -> ServesAt(x,y))"]}
{"id": "enwn_validation_27", "nl": "Ellie ordered a drink at a bar called the Red Pony.", "fol": "", "prediction": ["all x y z.((Ellie(x) & Bar(y) & RedPony(z)) -> OrderedDrink(x,y,z))", "all x y.((Ellie(x) & Bar(y) & RedPony(y)) -> OrderedDrink(x,y))", "all x y.((Ellie(x) & Bar(y)) -> OrderedDrink(x,y))", "all x y.((Ellie(x) & Bar(y)) -> OrderedDrinkAt(x,y))", "all x y z.((Ellie(x) & Bar(y) & RedPony(z)) -> OrderedDrinkAt(x,y,z))", "all x y.((Ellie(x) & Bar(y) & RedPony(x)) -> OrderedDrink(x,y))", "all x y z.((Ellie(x) & Bar(y) & RedPony(z)) -> OrdersDrink(x,y,z))", "all x y.((Ellie(x) & Bar(y) & RedPony(y)) -> OrderedDrinkAt(x,y))", "all x y.((Ellie(x) & Bar(y) & RedPony(z)) -> OrderedDrink(x,y,z))", "all x y z.((Ellie(x) & Drink(y) & Bar(z) & RedPony(z)) -> OrderedAt(x,y,z))", "all x y z.((Ellie(x) & Bar(y) & Bar(z) & RedPony(y)) -> OrderedDrink(x,y,z))", "all x y.((Ellie(x) & Bar(y) & RedPony(y)) -> OrdersDrink(x,y))", "all x y.((Ellie(x) & RedPony(y)) -> OrderedDrink(x,y))", "all x y z.((Ellie(x) & Bar(y) & RedPony(z)) -> OrdersDrinkAt(x,y,z))", "all x y.((Ellie(x) & Bar(y)) -> OrdersDrink(x,y))", "all x y z.((Ellie(x) & Bar(y) & Bar(z)) -> OrderedDrink(x,y,z))"]}
{"id": "enwn_validation_28", "nl": "The Red Pony is in Albuquerque, New Mexico.", "fol": "", "prediction": ["All x.(RedPony(x) -> Albuquerque(x))", "(RedPony(Pony) & Albuquerque(Pony) & NewMexico(Pony))", "All x.(RedPony(x) -> (Albuquerque(x) | NewMexico(x)))", "The Red Pony is in Albuquerque,NewMexico.", "All x.(RedPony(x) -> (InAlbuquerque(x) & NewMexico(x)))", "All x.(RedPony(x) -> (InAlbuquerque(x) | InNewMexico(x)))", "(RedPony(RosePony) & Albuquerque(Pony) & NewMexico(Pony))", "All x.(RedPony(x) -> (InAlbuquerque(x) | NewMexico(x)))", "RedPony(x) & Albuquerque(x) & NewMexico(x))", "The Red Pony is in Albuquerque, New Mexico.", "All x.(RedPony(x) -> InAlbuquerque(x))", "RedPony(x) -> (InAlbuquerque(x) & NewMexico(x)))", "All x.(RedPony(x) -> (Albuquerque(x) | NewMexico(x)))", "All x.(RedPony(x) -> (InAlbuquerque(x) & InNewMexico(x)))", "All x.(RedPony(x) -> (Albuquerque(x) & NewMexico(x)))", "(RedPony(red) & Albuquerque(red) & NewMexico(red))"]}
{"id": "enwn_validation_29", "nl": "New Mexico is a state in the United States.", "fol": "", "prediction": ["all x.(NewMexico(x) -> StateInUnitedStates(x))", "all x y.((NewMexico(x) & UnitedState(y)) -> StateIn(x,y))", "All x.(NewMexico(x) -> StateInUnitedStates(x))", "all x.((NewMexico(x) & StateInUnitedStates(x)) -> StateInUnitedStates(x))", "all x y.((NewMexico(x) & UnitedState(y)) -> State(x,y))", "all x.(NewMexico(x) -> StateInUnitedStates(x))", "all x.((NewMexico(x) & StateInUnitedStates(x)) -> LocatedIn(x,UnitedStates))", "all x.(NewMexico(x) -> StateInU.S.A.(NewMexico(x)))", "all x.(NewMexico(x) -> (State(x) & InUnitedStates(x)))", "all x y.((NewMexico(x) & UnitedStates(y)) -> StateIn(x,y))", "all x.((NewMexico(x) & State(x)) -> UnitedStates(x))", "all x.(NewMexico(x) -> (State(x) & UnitedStates(x)))", "all x.(NewMexico(x) -> (StateInUnitedStates(x) & InUnitedStates(x)))", "all x.((NewMexico(x) & StateInUnitedStates(x)) -> StateIn(x,UnitedStates))", "all x y.((NewMexico(x) & UnitedStates(y)) -> State(x,y))", "all x.((NewMexico(x) & State(x)) -> InUnitedStates(x))"]}
{"id": "enwn_validation_30", "nl": "You should not do impolite things.", "fol": "", "prediction": ["all x.((DoImpoliteThings(x) & -DoImpoliteThings(x)) -> -DoImpoliteThings(x))", "all x.((DoImpoliteThings(x) & -DoImpoliteThings(x)) -> -(DoImpoliteThings(x) & DoImpoliteThings(x)))", "all x.((DoImpoliteThings(x)) -> -DoImpoliteThings(x))", "all x.((DoImpoliteThings(x) & -DoImpoliteThings(x)) -> -(DoImpoliteThings(x) & DoImpoliteThings(x))))", "all x.((DoImpoliteThings(x) & -DoImpoliteThings(x)) -> -(DoImpoliteThings(x) | DoImpoliteThings(x))))", "all x.((DoImpoliteThings(x) & -DoImpoliteThings(x)) -> -DoImpoliteThings(x))", "all x.((DoImpoliteThings(x) & -DoImpoliteThings(x)) -> -(DoImpoliteThings(x) & -DoImpoliteThings(x)))", "all x.((DoesImpoliteThings(x)) -> -DoesImpoliteThings(x))", "all x.((DoImpoliteThings(x) & -DoImpoliteThings(x)) -> -(DoImpoliteThings(x) & -DoImpoliteThings(x))))", "all x.((DoImpoliteThings(x) & -DoImpoliteThings(x)) -> -(DoImpoliteThings(x) | DoImpoliteThings(x)))", "all x.((DoImpoliteThings(x) & -DoImpoliteThings(x)) -> -(DoImpoliteThings(x) & DoImpoliteThings(x)))", "all x.((DoImpoliteThings(x) & -DoImpoliteThings(x)) -> -(DoImpoliteThings(x) & DoImpoliteThings(x))))", "all x.((DoImpoliteThings(x) & -DoImpoliteThings(x)) -> -((DoImpoliteThings(x) & DoImpoliteThings(x))))", "all x.((DoImpoliteThings(x) & -DoImpoliteThings(x)) -> -(DoImpoliteThings(x) | DoImpoliteThings(x))))", "all x.(ImpoliteThing(x) -> -Do(x,y))", "all x.((DoImpoliteThings(x) & -DoImpoliteThings(x)) -> -(ImpoliteThings(x) & DoImpoliteThings(x)))"]}
{"id": "enwn_validation_31", "nl": "In the United States, it's impolite to not tip bartenders who serve you drinks at a bar.", "fol": "", "prediction": ["all x y.((UnitedStates(x) & Bartender(y) & ServesDrinksAt(y,x)) -> ImpoliteToTip(x,y))", "all x y.((Bartender(x) & Bartender(y) & ServesDrinksAt(x,y)) -> ImpoliteToTip(x,y))", "all x y.((UnitedStatesBar(x) & Bartender(y) & ServesDrinksAt(y,x)) -> ImpoliteToTip(x,y))", "all x y.((Bartender(x) & Bartender(y) & ServesDrinks(x,y)) -> ImpoliteToTip(x,y))", "all x.((UnitedStates(x) & Bartender(y) & ServesDrinksAtBar(y)) -> ImpoliteToTip(x,y))", "all x y.((UnitedStates(x) & Bartender(y) & ServesDrinks(y,x)) -> ImpoliteToTip(x,y))", "all x y.((Bartender(x) & Bar(y) & ServesDrinks(x,y)) -> ImpoliteToTip(x,y))", "all x.((UnitedStates(x) & Bartender(y) & ServesDrinksAt(y,x)) -> ImpoliteToTip(x,y))", "all x y.((UnitedStates(x) & Bartender(y) & ServesDrinksAt(y,x)) -> ImpoliteToTip(y,x))", "all x.((UnitedStates(x) & Bartender(x) & ServesDrinksAtBar(x)) -> ImpoliteToTip(x))", "all x y.((UnitedStates(x) & Bartender(y) & ServesDrinksAt(y,x)) -> ImpoliteToNotTip(x,y))", "all x y.((Bartender(x) & Bar(y) & ServesDrinksAt(x,y)) -> ImpoliteToTip(x,y))", "all x.((UnitedStates(x) & Bartender(y) & ServesDrinksAtBar(y,x)) -> ImpoliteToTip(x,y))", "all x y.((UnitedStates(x) & Bartender(y) & ServesDrinksAt(y,x)) -> ImpoliteToNotTip(y,x))", "all x.((UnitedStates(x) & Bartender(y) & ServesDrinks(y,x)) -> ImpoliteToTip(x,y))", "all x y.((UnitedStatesBar(x) & Bartender(y) & ServesDrinks(y,x)) -> ImpoliteToTip(x,y))"]}
{"id": "enwn_validation_32", "nl": "Ellie ordered a drink from a bartender at the Red Pony.", "fol": "", "prediction": ["all x y z.((Ellie(x) & Bartender(y) & RedPony(z)) -> OrderedDrink(x,y,z))", "all x y z.((Ellie(x) & Bartender(y) & RedPony(z)) -> OrderedDrinkFrom(x,y,z))", "all x y.((Ellie(x) & Bartender(y)) -> OrderedDrink(x,y))", "all x y z.((Ellie(x) & Bartender(y) & RedPony(z)) -> OrdersDrink(x,y,z))", "all x y.((Ellie(x) & Bartender(y) & RedPony(x)) -> OrderedDrink(x,y))", "all x y.((Ellie(x) & Bartender(y) & RedPony(z)) -> OrderedDrink(x,y,z))", "all x y.((Ellie(x) & Bartender(y) & RedPony(y)) -> OrderedDrink(x,y))", "all x y z.((Ellie(x) & Bartender(y) & RedPony(z)) -> OrdersDrinkFrom(x,y,z))", "all x y.((Ellie(x) & Bartender(y) & RedPony(z)) -> OrderedDrinkFrom(x,y,z))", "all x y.((Ellie(x) & Bartender(y)) -> OrderedDrinkFrom(x,y))", "all x y.((Ellie(x) & Bartender(y) & RedPony(x)) -> OrderedDrinkFrom(x,y))", "all x y.((Ellie(x) & Bartender(y) & RedPony(y)) -> OrderedDrinkFrom(x,y))", "all x y z.((Ellie(x) & Bartender(y) & Bartender(z)) -> OrderedDrink(x,y,z))", "all x y z.((Ellie(x) & Bartender(y) & Red Pony(z)) -> OrderedDrink(x,y,z))", "all x y.((Ellie(x) & Bartender(y)) -> OrdersDrink(x,y))", "all x y z.((Ellie(x) & Bartender(y) & RedPony(z)) -> OrderedDrink(x,y))"]}
{"id": "enwn_validation_33", "nl": "The Red Pony is in the United States.", "fol": "", "prediction": ["All x.(RedPony(x) -> InUnitedStates(x))", "All x.(RedPony(x) -> InU.S.A.(RedPony(x)))", "The RedPony(x) exists y.(UnitedStates(y) & In(x,y)))", "(RedPony(Pony) & InUnitedStates(Pony))", "all x.(RedPony(x) -> InUnitedStates(x))", "RedPony(x) -> InUnitedStates(x))", "All x.(RedPony(x) -> InTheUnitedStates(x))", "(RedPony(red) & InUnitedStates(red))", "(RedPony(RosePony) & InUnitedStates(RosePony))", "All x.(RedPony(x) -> InU.S.A.(Pony(x)))", "All x.(RedPony(x) -> InU.S.S.A.(RedPony(x)))", "All x.(RedPony(x) -> In(x,UnitedStates))", "The RedPony(x) exists y.(UnitedStates(y) & LocatedIn(x,y)))", "RedPony(x) -> InUnitedStates(x))", "All x.(RedPony(x) -> InU.S.S.(RedPony(x)))", "(RedPony(RosePony) & InUnitedStates(Pony))"]}
{"id": "enwn_validation_34", "nl": "Ellie ordered a drink from a bartender in the United States.", "fol": "", "prediction": ["all x y z.((Ellie(x) & Bartender(y) & UnitedStates(z)) -> OrderedDrink(x,y,z))", "all x y.((Ellie(x) & Bartender(y)) -> OrderedDrink(x,y))", "all x y z.((Ellie(x) & Bartender(y) & Drink(z)) -> OrderedFrom(x,y,z))", "all x y z.((Ellie(x) & Bartender(y) & Bartender(z)) -> OrderedDrink(x,y,z))", "all x y.((Ellie(x) & Bartender(y)) -> OrderedDrinkFrom(x,y))", "all x y z.((Ellie(x) & Bartender(y) & UnitedStates(z)) -> OrderedDrinkFrom(x,y,z))", "all x y z.((Ellie(x) & Bartender(y) & Bartender(z)) -> OrderedDrinkFrom(x,y,z))", "all x y z.((Ellie(x) & Bartender(y) & Bartender(z)) -> OrdersDrink(x,y,z))", "all x y z.((Ellie(x) & Bartender(y) & UnitedStates(z)) -> OrdersDrink(x,y,z))", "all x y z.((Ellie(x) & Bartender(y) & Bartender(z)) -> OrderedFrom(x,y,z))", "all x y z.((Ellie(x) & Bartender(y) & Bartender(z) & UnitedStates(w)) -> OrderedDrink(x,y,z,w))", "all x y z.((Ellie(x) & Bartender(y) & Drink(z)) -> Ordered(x,y,z))", "all x y.((Ellie(x) & Bartender(y) & UnitedStates(y)) -> OrderedDrink(x,y))", "all x y.((Ellie(x) & Bartender(y) & UnitedStates(z)) -> OrderedDrink(x,y,z))", "all x y z.((Ellie(x) & Bartender(y) & Bartender(z)) -> Ordered(x,y,z))", "all x y z.((Ellie(x) & Bartender(y) & Drink(z)) -> OrdersFrom(x,y,z))"]}
{"id": "enwn_validation_35", "nl": "It would be impolite for Ellie to not tip the bartender.", "fol": "", "prediction": ["all x.((Ellie(x) & -TippedBartender(x)) -> Impolite(x))", "all x.((Ellie(x) & -TipBartender(x)) -> Impolite(x))", "all x.((Elliot(x) & -TippedBartender(x)) -> Impolite(x))", "all x.((Elliot(x) & -TipBartender(x)) -> Impolite(x))", "All x.((Ellie(x) & -TippedBartender(x)) -> Impolite(x))", "all x.((Bartender(x) & Ellie(x)) -> -TipBartender(x))", "all x y.((Bartender(x) & Ellie(y)) -> -Tipped(y,x))", "All x.((Ellie(x) & -TipBartender(x)) -> Impolite(x))", "all x.((Ellie(x) & -TippedBartender(x)) -> Impossible(x))", "all x.((Bartender(x) & Ellie(x)) -> -Tipped(x))", "all x.((Ellie(x) & -TipBartender(x)) -> Impossible(x))", "all x y.((Bartender(x) & Ellie(y)) -> -Tip(y,x))", "all x.((Ellie(x) & Bartender(y)) -> -Tipped(x,y))", "all x.((Bartender(x) & Ellie(x)) -> -Tipped(x,y))", "all x.((Bartender(x) & Ellie(x)) -> -Tip(x,y))", "all x.((Bartender(x) & Ellie(x)) -> -Tip(x,Bartender))"]}
{"id": "enwn_validation_36", "nl": "Ellie should tip the bartender.", "fol": "", "prediction": ["all x y.((Bartender(x) & Ellie(y)) -> ShouldTip(y,x))", "all x y.((Bartender(x) & Ellie(y)) -> ShouldTipped(y,x))", "all x y.((Bartender(x) & Bartender(y)) -> ShouldTip(x,y))", "all x y.((Ellie(x) & Bartender(y)) -> ShouldTip(x,y))", "all x y.((Bartender(x) & Bartender(y)) -> ShouldTipped(x,y))", "all x.((Ellie(x) & Bartender(y)) -> ShouldTip(x,y))", "all x y.((Ellie(x) & Bartender(y)) -> ShouldTipped(x,y))", "all x y.((Bartender(x) & Ellie(y)) -> ShouldTip(x,y))", "all x y.((Bartender(x) & Ellie(y) & ShouldTip(y,x)) -> ShouldTip(y,x))", "all x y.((Bartender(x) & Bartender(y) & Ellie(x)) -> ShouldTip(x,y))", "all x.((Ellie(x) & Bartender(y)) -> ShouldTipped(x,y))", "all x y.((Bartender(x) & Bartender(y) & Ellie(x)) -> ShouldTipped(x,y))", "all x y.((Bartender(x) & Bartender(y)) -> ShouldTip(y,x))", "all x.(TipBartender(x) -> ShouldTipBartender(x))", "all x y.((Bartender(x) & Ellie(y)) -> ShouldTipped(x,y))", "all x.(TipBartender(x) -> Ellie(x))"]}
{"id": "enwn_validation_37", "nl": "You should pay back your debts.", "fol": "", "prediction": ["all x y.((Debt(x) & Debt(y)) -> PayBack(x,y))", "all x.(PayBackDebts(x) -> ShouldPayBackDebts(x))", "all x y.((Debt(x) & Debt(y)) -> ShouldPay(x,y))", "all x y.((Debt(x) & Debt(y)) -> ShouldPayBack(x,y))", "all x.(Debt(x) -> PayBack(x))", "all x y.((Debt(x) & Debt(y)) -> Payback(x,y))", "all x.(PayBackDebts(x) -> ShouldBe(x))", "all x.(PayBackDebts(x) -> Should(x))", "all x.(Debt(x) -> ShouldPayBack(x))", "all x.((Debt(x) & ShouldPayBack(x)) -> ShouldPayBack(x))", "all x y.((Debt(x) & Debt(y)) -> PaysBack(x,y))", "all x.(PayBackDebts(x) -> ShouldRemain(x))", "all x.(PayBackDebts(x) -> ShouldPayBack(x))", "all x.((Debt(x) & ShouldPay(x,y)) -> ShouldPay(x,y))", "all x.(PayBackDebts(x) -> ShouldBeReceived(x))", "all x.(PayBackDebts(x) -> ShouldBePayed(x))"]}
{"id": "enwn_validation_38", "nl": "Fred borrowed $100 from Alyssa to buy the ski lift ticket.", "fol": "", "prediction": ["all x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> BorrowedSince(x,y,z))", "all x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> BorrowedFrom(x,y,z))", "all x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> Borrowed(x,y,z))", "all x y.((Fred(x) & Alyssa(y)) -> BorrowedSpension(x,y))", "all x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> BorrowedSpension(x,y,z))", "All x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> BorrowedSince(x,y,z))", "all x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> BorrowedS$100(x,y,z))", "all x y.((Fred(x) & Alyssa(y)) -> BorrowedSince(x,y))", "all x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> BorrowedFor(x,y,z))", "all x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> BorrowedToBuy(x,y,z))", "All x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> BorrowedFrom(x,y,z))", "all x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> BorrowedStanley(x,y,z))", "all x y.((Fred(x) & Alyssa(y)) -> BorrowedToBuySkiLiftTicket(x,y))", "all x y.((Fred(x) & Alyssa(y)) -> BorrowedSixTaxes(x,y))", "All x y z.((Fred(x) & Alyssa(y) & SkiLiftTicket(z)) -> Borrowed(x,y,z))", "all x y.((Fred(x) & Alyssa(y)) -> BorrowedS$100(x,y))"]}
{"id": "enwn_validation_39", "nl": "You remind someone to do something when you want them to do it but they haven't.", "fol": "", "prediction": ["all x y.((Reminds(x,y) & Person(y) & WantsToDo(y,x) & -WantToDo(y,x)) -> Reminds(x,y))", "all x y.((Remind(x,y) & Person(y) & WantsToDo(y,x) & -WantToDo(y,x)) -> Reminds(x,y))", "all x y.((Remind(x,y) & Person(y) & WantsToDo(y,x) & -WantToDo(y,x)) -> Remind(x,y))", "all x y.((Reminds(x,y) & Person(y) & WantsToDo(y,x) & -WantToDo(y,x)) -> -Reminds(x,y))", "all x y.((Reminds(x,y) & Person(y) & WantsToDo(x,y) & -WantToDo(y,x)) -> Reminds(x,y))", "all x y.((Reminds(x,y) & Person(y) & WantsToDo(y,x) & -WantToDo(y,x)) -> NotReminds(x,y))", "all x y.((Reminds(x,y) & Person(y) & WantsToDo(y,x) & -WantsToDo(y,x)) -> Reminds(x,y))", "all x y z.((Reminds(x,y) & Person(z) & WantsToDo(x,z) & -WantToDo(x,z)) -> Reminds(x,z))", "all x y z.((Remind(x,y) & Person(z) & WantsToDo(x,z) & -WantToDo(x,z)) -> Reminds(x,z))", "all x y.((Remind(x,y) & Person(y) & WantsToDo(x,y) & -WantToDo(y,x)) -> Reminds(x,y))", "all x y.((Reminds(x,y) & Person(y) & WantsToDo(y,x) & -WantToDo(y,x)) -> Reminds(y,x))", "all x y.((Reminds(x,y) & Person(y) & WantsToDo(y,x) & -WantToDo(y,x)) -> -Reminds(y,x))", "all x y.((Reminds(x,y) & Person(y) & WantsToDo(y,x) & -WantToDo(y,x)) -> NotReminds(y,x))", "all x y.((Reminds(x,y) & Person(y) & WantsToDo(y,x) & -WantsToDo(y,x)) -> -Reminds(x,y))", "all x y.((Reminds(x,y) & Person(y) & WantsToDo(y,x) & -WantToDo(y,x)) -> -WantToDo(y,x))", "all x y z.((Remind(x,y) & Person(z) & WantsToDo(x,z) & -WantToDo(x,z)) -> Reminds(x,y,z))"]}
{"id": "enwn_validation_40", "nl": "Alyssa messaged Fred to remind him to pay her back for the ski lift ticket.", "fol": "", "prediction": ["all x y.((Alyssa(x) & Fred(y)) -> (Messaged(x,y) & Reminds(x,y)))", "all x y z.((Alyssa(x) & Fred(y) & SkiLiftTicket(z)) -> (Messaged(x,y) & Reminds(x,z)))", "all x y z.((Alyssa(x) & Fred(y) & SkiLiftTicket(z)) -> (Messaged(x,y) & Reminds(y,z)))", "all x y z.((Alyssa(x) & Fred(y) & SkiLiftTicket(z)) -> Reminds(x,y,z))", "All x y z.((Alyssa(x) & Fred(y) & SkiLiftTicket(z)) -> (Messaged(x,y) & Reminds(x,z)))", "all x y z.((Alyssa(x) & Fred(y) & SkiLiftTicket(z)) -> (Messaged(x,y,z) & Reminds(x,y)))", "All x y.((Alyssa(x) & Fred(y)) -> (Messaged(x,y) & Reminds(x,y)))", "all x y z.((Alyssa(x) & Fred(y) & SkiLiftTicket(z)) -> MessagedToRemind(x,y,z))", "all x y z.((Alyssa(x) & Fred(y) & SkiLiftTicket(z)) -> (Messaged(x,y) & Reminds(x,y,z)))", "all x y z.((Alyssa(x) & Fred(y) & SkiLiftTicket(z)) -> (Messaged(x,y,z) & Reminds(x,y,z)))", "all x y.((Alyssa(x) & Fred(y)) -> (Messaged(x,y) & RemindsFred(x,y)))", "all x y.((Alyssa(x) & Fred(y)) -> MessagedToRemind(x,y))", "all x y.((Alyssa(x) & Fred(y)) -> Reminds(x,y))", "all x y.((Alyssa(x) & Fred(y)) -> RemindsToPayForSkiLiftTicket(x,y))", "All x y z.((Alyssa(x) & Fred(y) & SkiLiftTicket(z)) -> (Messaged(x,y) & Reminds(y,z)))", "all x y.((Alyssa(x) & Fred(y)) -> (Messaged(x,y) & Reminds(y,x)))"]}
{"id": "enwn_validation_41", "nl": "If you borrow something from someone and haven't given it back, you owe it to them.", "fol": "", "prediction": ["all x y.((Borrows(x,y) & Person(y) & -GivenBack(x,y)) -> IsOwnTo(x,y))", "all x y.((Borrows(x,y) & Person(y) & -GivenBack(x,y)) -> OwnTo(x,y))", "all x y.((Borrows(x,y) & Borrows(x,y) & -GivenBack(x,y)) -> OwnTo(x,y))", "all x y.((Borrows(x,y) & Borrows(x,y) & -GivenBack(x,y)) -> IsOwnTo(x,y))", "all x y.((Borrows(x,y) & Person(y) & -GivenBack(x,y)) -> Obligation(x,y))", "all x y.((BorrowsFrom(x,y) & BorrowsFrom(x,y) & -GivenBack(x,y)) -> OwnTo(x,y))", "all x y.((Borrows(x,y) & Person(y) & -GivenBack(x,y)) -> Owns(x,y))", "all x y.((BorrowsFrom(x,y) & BorrowsFrom(x,y) & -GivenBack(x,y)) -> IsOwnTo(x,y))", "all x y.((Borrows(x,y) & Person(y) & -GivenBack(x,y)) -> Owes(x,y))", "all x y.((BorrowsFrom(x,y) & BorrowsFrom(x,y) & -GivenBack(x)) -> OwnTo(x,y))", "all x y.((BorrowsFrom(x,y) & BorrowsFrom(x,y) & -GivenBack(x,y)) -> OweTo(x,y))", "all x y.((Borrows(x,y) & Borrows(x,y) & -GivenBack(x)) -> OwnTo(x,y))", "all x y.((Borrows(x,y) & Person(y) & -GivenBack(x,y)) -> IsOwn(x,y))", "all x y.((Borrows(x,y) & Borrows(x,y) & -GivenBack(x,y)) -> Obligation(x,y))", "all x y.((Borrows(x,y) & Borrows(x,y) & -GivenBack(x,y)) -> OweTo(x,y))", "all x y.((Borrows(x,y) & Borrows(x,y) & -GivenBack(x,y)) -> Owes(x,y))"]}
{"id": "enwn_validation_42", "nl": "Fred hasn't paid Alyssa back for the ski lift ticket yet.", "fol": "", "prediction": ["all x y.((Fred(x) & Alyssa(y)) -> -PayedForSkiLiftTicket(x,y))", "all x y.((Fred(x) & Alyssa(y)) -> -PayedBack(x,y))", "all x y.((Fred(x) & Alyssa(y)) -> -PaysBackSkiLiftTicket(x,y))", "all x y.((Fred(x) & Alyssa(y)) -> -PayedBackSkiLiftTicket(x,y))", "all x y.((Fred(x) & Alyssa(y)) -> -PaidForSkiLiftTicket(x,y))", "all x y.((Fred(x) & Alyssa(y)) -> -PaysSkiLiftTicket(x,y))", "all x y.((Fred(x) & Alyssa(y)) -> -PayedSkiLiftTicket(x,y))", "all x y.((Fred(x) & Alyssa(y) & SkiLiftTicket(y)) -> -PaysBack(x,y))", "all x y.((Fred(x) & Alyssa(y) & SkiLiftTicket(y)) -> -PayedBack(x,y))", "all x y.((Fred(x) & Alyssa(y) & SkiLiftTicket(y)) -> -Payed(x,y))", "all x y.((Fred(x) & Alyssa(y)) -> -PayedForSkiLift(x,y))", "all x.((Fred(x) & Alyssa(x)) -> -PayedForSkiLiftTicket(x))", "all x y.((Fred(x) & Alyssa(y)) -> -PaidBack(x,y))", "all x y.((Fred(x) & Alyssa(y)) -> -PaidForSkiLift(x,y))", "all x y.((Fred(x) & Alyssa(y) & SkiLiftTicket(x,y)) -> -PaysBack(x,y))", "all x y.((Fred(x) & Alyssa(y) & SkiLiftTicket(y)) -> -Paid(x,y))"]}
{"id": "enwn_validation_43", "nl": "Fred borrowed $100 from Alyssa and hasn't paid it back yet.", "fol": "", "prediction": ["all x y.((Fred(x) & Alyssa(y)) -> (BorrowedSince(x,y) & -PayedBack(x,y)))", "all x y z.((Fred(x) & Alyssa(y) & $100(z)) -> (BorrowedFrom(x,y,z) & -PayedBack(x,y)))", "all x y.((Fred(x) & Alyssa(y)) -> (BorrowedSpension(x,y) & -PayedBack(x,y)))", "all x y.((Fred(x) & Alyssa(y)) -> (BorrowedFrom(x,y) & -PayedBack(x,y)))", "all x y z.((Fred(x) & Alyssa(y) & $100(z)) -> BorrowedFrom(x,y,z))", "all x y.((Fred(x) & Alyssa(y)) -> (Borrowed100(x,y) & -PayedBack(x,y)))", "all x y z.((Fred(x) & Alyssa(y) & $100(z)) -> (BorrowedFrom(x,y) & -PayedBack(x,z)))", "all x y.((Fred(x) & Alyssa(y)) -> (Borrowed(x,y) & -PayedBack(x,y)))", "All x y.((Fred(x) & Alyssa(y)) -> (BorrowedSince(x,y) & -PayedBack(x,y)))", "all x y z.((Fred(x) & Alyssa(y) & $100(z)) -> (BorrowedFrom(x,y,z) & -PayedBack(x,y,z)))", "all x y.((Fred(x) & Alyssa(y)) -> (BorrowedStick(x,y) & -PayedBack(x,y)))", "all x y.((Fred(x) & Alyssa(y)) -> (BorrowedStock(x,y) & -PayedBack(x,y)))", "all x y z.((Fred(x) & Alyssa(y) & $100(z)) -> (BorrowedFrom(x,y,z) & -PaidBack(x,y)))", "all x y.((Fred(x) & Alyssa(y)) -> (BorrowedSince(x,y) & -PaidBack(x,y)))", "all x y z.((Fred(x) & Alyssa(y) & $100(z) & BorrowedFrom(x,y,z)) -> -PayedBack(x,y))", "all x y.((Fred(x) & Alyssa(y)) -> (Borrowed(x,y) & -Payed(x,y)))"]}
{"id": "enwn_validation_44", "nl": "Fred owes Alyssa $100.", "fol": "", "prediction": ["All x y.((Fred(x) & Alyssa(y)) -> owes100(x,y))", "all x y.((Fred(x) & Alyssa(y)) -> owes100(x,y))", "All x y.((Fred(x) & Alyssa(y)) -> owesSince(x,y))", "all x.((Fred(x) & Alyssa(x)) -> owes100(x))", "((Fred(Fred) & Alyssa(Alyssa)) -> owes100(Fred,Alyssa)))", "All x y z.((Fred(x) & Alyssa(y) & $100(z)) -> owes(x,y,z))", "All x y.((Fred(x) & Alyssa(y)) -> owesStanley(x,y))", "all x y.((Fred(x) & Alyssa(y)) -> owesSince(x,y))", "All x.(Fred(x) -> owesAlyssa(x,100))", "All x.((Fred(x) & Alyssa(x)) -> owes100(x))", "all x y.((Fred(x) & Alyssa(y)) -> owesStanley(x,y))", "All x.((Fred(x) & Alyssa(y)) -> owes100(x,y))", "All x.(Fred(x) -> owesAlyssa100(x))", "All x y.((Fred(x) & Alyssa(y)) -> Weowes100(x,y))", "((Fred(Fred) & Alyssa(Alyssa)) -> owes100(Fred,Alyssa))", "All x y.((Fred(x) & Alyssa(y)) -> Weds100(x,y))"]}
{"id": "enwn_validation_45", "nl": "Fred should pay Alyssa $100.", "fol": "", "prediction": ["all x y.((Fred(x) & Alyssa(y)) -> ShouldPay(x,y))", "All x y.((Fred(x) & Alyssa(y)) -> ShouldPay(x,y))", "all x.((Fred(x) & Alyssa(x)) -> ShouldPay(x,100))", "all x y.((Fred(x) & Alyssa(y)) -> ShouldPay100(x,y))", "all x y z.((Fred(x) & Alyssa(y) & $100(z)) -> ShouldPay(x,y,z))", "All x.(Fred(x) -> ShouldPayAlyssa(x,100))", "All x.(Fred(x) -> ShouldPayAlyssa100(x))", "all x.((Fred(x) & Alyssa(y)) -> ShouldPay(x,y))", "All x.((Fred(x) & Alyssa(y)) -> ShouldPay(x,y))", "all x.((Fred(x) & Alyssa(y)) -> ShouldPay100(x,y))", "All x y.((Fred(x) & Alyssa(y)) -> ShouldPay100(x,y))", "all x.(Fred(x) -> ShouldPayAlyssa(x,100))", "all x.(Fred(x) -> ShouldPayAlyssa100(x))", "all x.((Fred(x) & Alyssa(x)) -> ShouldPay100(x))", "All x.((Fred(x) & Alyssa(y)) -> ShouldPay100(x,y))", "All x.((Fred(x) & Alyssa(x)) -> ShouldPay(x,100))"]}
{"id": "enwn_validation_46", "nl": "You should not take something that doesn't belong to you.", "fol": "", "prediction": ["all x.((Takes(x) & -BelongsTo(x)) -> -BelongsTo(x))", "all x.((Takes(x,y) & -BelongsTo(x,y)) -> -BelongsTo(x,y))", "all x.((Takes(x,y) & -BelongsTo(y)) -> -BelongsTo(x,y))", "all x.((Take(x) & -BelongsTo(x)) -> -BelongsTo(x))", "all x.((Takes(x,y) & -BelongsTo(y,x)) -> -BelongsTo(x,y))", "all x.((Takes(x) & -BelongsTo(x)) -> -(Takes(x) & -BelongsTo(x)))", "all x.((Takes(x,y) & -BelongsTo(x,y)) -> -(Takes(x,y) & -BelongsTo(x,y)))", "all x.((Takes(x) & -BelongsTo(x)) -> -Takes(x))", "all x.((Takes(x) & -BelongsTo(x)) -> -(Takes(x) & -BelongsTo(x))))", "all x.((Takes(x,y) & -BelongsTo(x)) -> -BelongsTo(x,y))", "all x.((Takes(x,y) & -BelongsTo(x,y)) -> -Takes(x,y))", "all x.((Takes(x,y) & -BelongsTo(x)) -> -BelongsTo(y,x))", "all x.((Takes(x) & -BelongsTo(x)) -> -BelongsTo(x,y))", "all x y.((Takes(x,y) & -BelongsTo(x,y)) -> -BelongsTo(x,y))", "all x.((Takes(x) & -BelongsTo(x)) -> -Follows(x))", "all x.((Takes(x,y) & -BelongsTo(x,y)) -> -BelongsTo(y,x))"]}
{"id": "enwn_validation_47", "nl": "Mark is considering taking the lunch in the breakroom fridge.", "fol": "", "prediction": ["all x y.((Mark(x) & BreakroomFridge(y)) -> ConsidersTakingLunch(x,y))", "all x y.((Mark(x) & BreakroomFridge(y)) -> ConsidersTakingLunchIn(x,y))", "all x.(Mark(x) -> ConsidersTakingLunchInBreakroomFridge(x))", "all x y.((Mark(x) & BreakroomFridge(y)) -> ConsidersLunch(x,y))", "Mark is consideringTakingLunchInBreakroomFridge(Mark)", "all x y.((Mark(x) & BreakroomFridge(y)) -> ConsidersTaking(x,y))", "all x.((Mark(x) & TakesLunchInBreakroomFridge(x)) -> ConsidersTakingLunchInBreakroomFridge(x))", "all x.((Mark(x) & BreakroomFridge(x)) -> ConsidersTakingLunch(x))", "all x y.((Mark(x) & BreakroomFridge(y)) -> ConsidersTakesLunch(x,y))", "all x y.((Mark(x) & BreakroomFridge(y)) -> TakesLunchIn(x,y))", "all x y.((Mark(x) & BreakroomFridge(y)) -> ConsidersLunchIn(x,y))", "all x y.((Mark(x) & BreakroomFridge(y)) -> ConsidersTakenLunch(x,y))", "all x y.((Mark(x) & BreakroomFridge(y)) -> ConsidersTakesLunchIn(x,y))", "all x.((Mark(x) & TakesLunchInBreakroomFridge(x)) -> Considers(x))", "all x y.((Mark(x) & Breakroom(y)) -> ConsidersTakingLunchIn(x,y))", "all x.((Mark(x) & TakesLunchInBreakroomFridge(x)) -> ConsidersTakingLunch(x))"]}
{"id": "enwn_validation_48", "nl": "The lunch in the fridge has a note on it saying \"Melissa\".", "fol": "", "prediction": ["all x.((Lunch(x) & Refrigerator(x)) -> HasNoteOn(x,Melissa))", "all x.((Lunch(x) & InFridge(x)) -> HasNoteOn(x,Melissa))", "all x y.((Lunch(x) & Refrigerator(y)) -> HasNoteOn(x,y))", "all x.((Lunch(x) & Refrigerator(x)) -> HasNote(x,Melissa))", "all x y.((Lunch(x) & Refrigerator(y)) -> HasNote(x,y))", "all x y.((Lunch(x) & Refrigerator(y) & InFridge(x,y)) -> HasNoteOn(x,y))", "all x.((Lunch(x) & InFridge(x)) -> HasNote(x,Melissa))", "all x y.((Lunch(x) & Refrigerator(y) & HasNoteOn(x,y)) -> Melissa(x))", "all x.((Lunch(x) & Refrigerator(x)) -> HasNoteOnMelissa(x))", "all x y.((Lunch(x) & Refrigerator(y) & HasNoteOn(x,y)) -> Melissa(y))", "all x y.((Lunch(x) & Refrigerator(y)) -> (HasNoteOn(x,y) & SaysMelissa(x)))", "all x y.((Lunch(x) & Refrigerator(y) & NoteOn(x,y)) -> Melissa(y))", "all x.((Lunch(x) & Refrigerator(x)) -> (HasNoteOn(x,Melissa)))", "all x y.((Lunch(x) & Refrigerator(y)) -> (HasNote(x,y) & SaysMelissa(x)))", "all x y.((Lunch(x) & Refrigerator(y) & NoteOn(x,y)) -> Melissa(x))", "all x y.((Lunch(x) & Refrigerator(y)) -> (HasNoteOn(x,y) & Says(x,Melissa)))"]}
{"id": "enwn_validation_49", "nl": "People write their names on things to mark them as their belongings.", "fol": "", "prediction": ["all x y.((Person(x) & Thing(y)) -> WritesNameOn(x,y))", "all x y.((Person(x) & Thing(y)) -> WritesName(x,y))", "all x y z.((Person(x) & Name(y) & Thing(z)) -> WritesOn(x,y,z))", "all x y z.((Person(x) & Name(y) & Thing(z)) -> WritesOnToMarkAsBelongings(x,y,z))", "all x y z.((Person(x) & Name(y) & Thing(z) & WritesOn(x,y,z)) -> MarksAsBelongings(x,y,z))", "all x y z.((Person(x) & Name(y) & Thing(z)) -> WritesOnToMark(x,y,z))", "all x y z.((Person(x) & Name(y) & Things(z)) -> WritesOnToMarkAsBelongings(x,y,z))", "all x y z.((Person(x) & Name(y) & Things(z)) -> WritesOn(x,y,z))", "all x y z.((Person(x) & Name(y) & Things(z)) -> WritesOnToMark(x,y,z))", "all x y z.((Person(x) & Name(y) & Thing(z) & WritesOn(x,y,z)) -> MarksBelongings(x,y,z))", "all x y.((Person(x) & Things(y)) -> WritesNameOn(x,y))", "all x y z.((Person(x) & Name(y) & Things(z) & WritesOn(x,y,z)) -> MarksAsBelongings(x,y,z))", "all x y z.((Person(x) & Name(y) & Things(z)) -> WritesOnToMarkBelongings(x,y,z))", "all x y.((Person(x) & Thing(y)) -> WritesNameOnToMarkBelongings(x,y))", "all x y z.((Person(x) & Name(y) & Thing(z)) -> WritesOnToMarkBelongings(x,y,z))", "all x y.((Person(x) & Name(y)) -> WritesOn(x,y))"]}
{"id": "enwn_validation_50", "nl": "The lunch in the breakroom fridge is Melissa's.", "fol": "", "prediction": ["all x.((Lunch(x) & BreakroomFridge(x)) -> Melissas(x))", "all x y.((Lunch(x) & BreakroomFridge(y)) -> Melissas(x))", "all x y.((Lunch(x) & BreakroomFridge(y)) -> Melissas(x,y))", "all x.((Lunch(x) & BreakroomFridge(x)) -> Melissa's(x))", "all x y z.((Lunch(x) & BreakroomFridge(y) & BreakroomFridge(z)) -> Melissas(x,y,z))", "all x y z.((Lunch(x) & BreakroomFridge(y) & BreakroomFridge(z)) -> Melissas(x))", "all x y z.((Lunch(x) & BreakroomFridge(y) & Breakroom(z)) -> Melissas(x,y,z))", "all x y z.((Lunch(x) & BreakroomFridge(y) & Breakroom(z)) -> Melissas(x))", "all x.((Lunch(x) & BreakroomFridge(x)) -> MelissasLunch(x))", "all x y.((BreakroomFridge(x) & Lunch(y)) -> Melissas(x))", "all x y z.((Lunch(x) & BreakroomFridge(y) & BreakroomFridge(z)) -> Melissas(x,y))", "all x y z.((Lunch(x) & BreakroomFridge(y) & Breakroom(z)) -> Melissas(x,y))", "all x y.((BreakroomFridge(x) & Lunch(y)) -> Melissas(x,y))", "all x.(BreakroomFridge(x) -> MelissasLunch(x))", "all x.((LunchInBreakroomFridge(x) & Melissas(x)) -> LunchInBreakroomFridge(x))", "all x y.((Breakroom(x) & BreakroomFridge(y)) -> Melissas(x,y))"]}
{"id": "enwn_validation_51", "nl": "Mark is considering taking Melissa's lunch.", "fol": "", "prediction": ["all x y.((Mark(x) & Melissa(y)) -> ConsidersTakingLunch(x,y))", "all x.((Mark(x) & TakesMelissasLunch(x)) -> ConsidersTaking(x,Melissa))", "all x y.((Mark(x) & Melissa(y)) -> ConsidersTaking(x,y))", "all x.((Mark(x) & TakesMelissa'sLunch(x)) -> ConsidersTaking(x,Melissa))", "all x.((Mark(x) & TakesMelissasLunch(x)) -> ConsidersTaking(x,Melissa,Melissa))", "Mark is consideringTakingMelissa'sLunch(Mark)", "all x y.((Mark(x) & Melissa(y)) -> ConsidersTakenLunch(x,y))", "all x.((Mark(x) & TakesMelissasLunch(x)) -> Considers(x,Melissa))", "all x y.((Mark(x) & Melissa(y)) -> ConsidersLunch(x,y))", "all x.((Mark(x) & TakesMelissa'sLunch(x)) -> Considers(x,Melissa))", "all x.((Mark(x) & TakesMelissa'sLunch(x)) -> ConsidersTaking(x,Melissa,Melissa))", "all x.((Mark(x) & TakesMelissasLunch(x)) -> ConsidersTaking(x,Melissa,x))", "all x.((Mark(x) & TakesMelissasLunch(x)) -> Considers(x,y))", "all x y.((Mark(x) & Melissa(y)) -> ConsidersTakesLunch(x,y))", "all x.((Mark(x) & TakesMelissasLunch(x)) -> ConsidersTaking(x,y))", "all x.((Mark(x) & TakesMelissasLunch(x)) -> ConsidersTaking(x,MelissasLunch))"]}
{"id": "enwn_validation_52", "nl": "Mark should not take Melissa's lunch.", "fol": "", "prediction": ["all x.((Mark(x) & Melissa(y)) -> -TakesLunch(x,y))", "all x y.((Mark(x) & Melissa(y)) -> -TakesLunch(x,y))", "all x.(Melissa(x) -> -TakesLunch(x,Melissa))", "all x.((Mark(x) & Melissa(x)) -> -TakesLunch(x,Melissa))", "all x.((Melissa(x) & -Melissa(x)) -> -TakesLunch(x,Melissa))", "all x y.((Melissa(x) & Melissa(y)) -> -TakesLunch(x,y))", "all x.((Mark(x) & MelissasLunch(x)) -> -Takes(x,Melissa))", "all x.((Mark(x) & MelissasLunch(x)) -> -Takes(x,Melissa,Melissa))", "all x y.((Melissa(x) & Mark(y)) -> -TakesLunch(y,x))", "all x.((Mark(x) & Melissa(x)) -> -TakesLunch(x,Melissa,Melissa))", "all x.((Melissa(x) & Mark(x)) -> -TakesLunch(x,Melissa))", "all x.(Melissa(x) -> -TakesLunch(x,Melissa,Melissa))", "all x.((Melissa(x) & -Melissa(x)) -> -Melissa(x))", "all x.((Melissa(x) & -Melissa(x)) -> -Takes(x,Melissa))", "all x.((Mark(x) & Melissa(x)) -> -TakesLunch(x,melissa))", "all x.((Mark(x) & MelissasLunch(x)) -> -Takes(x,melissa,melissa))"]}
{"id": "enwn_validation_53", "nl": "Fern brought her textbook to class.", "fol": "", "prediction": ["Fern brought her textbook to class.", "all x y.((Fern(x) & Textbook(y)) -> BringsToClass(x,y))", "all x.((Fern(x) & Textbook(y)) -> BringsToClass(x,y))", "all x y.((Fern(x) & Class(y)) -> BringsTextbookTo(x,y))", "all x.((Fern(x) & Textbook(x)) -> BringsToClass(x))", "all x y.((Fern(x) & Booklet(y)) -> BringsToClass(x,y))", "all x y.((Fern(x) & Textbook(y)) -> BroughtToClass(x,y))", "all x y.((Fern(x) & Teacher(y)) -> BringsToClass(x,y))", "all x y.((Fern(x) & Textbook(y)) -> BringtToClass(x,y))", "all x.(Fern(x) -> BringsTextbookToClass(x))", "all x y.((Fern(x) & Class(y)) -> BringsTextbook(x,y))", "all x y.((Fern(x) & Textbook(y)) -> BringToClass(x,y))", "all x y.((Fern(x) & Class(y)) -> BringsTo(x,y))", "all x.((Fern(x) & Textbook(y)) -> BroughtToClass(x,y))", "all x.((Fern(x) & Textbook(y)) -> BringtToClass(x,y))", "all x.((Fern(x) & Booklet(y)) -> BringsToClass(x,y))"]}
{"id": "enwn_validation_54", "nl": "Ann showed up to biology class without her textbook.", "fol": "", "prediction": ["all x y.((Ann(x) & BiologyClass(y)) -> ShowedUpWithoutTextbook(x,y))", "all x y z.((Ann(x) & BiologyClass(y) & Textbook(z)) -> ShowedUpWithout(x,y,z))", "all x y.((Ann(x) & BiologyClass(y) & -Textbook(y)) -> ShowedUpWithout(x,y))", "all x y.((Ann(x) & BiologyClass(y) & -Textbook(y)) -> ShowedUp(x,y))", "all x.((Ann(x) & BiologyClass(x) & -Textbook(x)) -> ShowedUpWithout(x,y))", "all x.((Ann(x) & BiologyClass(x)) -> ShowedUpWithoutTextbook(x))", "all x y.((Ann(x) & BiologyClass(y)) -> ShownUpWithoutTextbook(x,y))", "all x.((Ann(x) & BiologyClass(x) & -Textbook(x)) -> ShowedUp(x,y))", "all x y.((Ann(x) & BiologyClass(y) & -Textbook(y)) -> ShownUpWithout(x,y))", "all x.((Ann(x) & BiologyClass(x) & -Textbook(x)) -> ShowedUp(x))", "all x y z.((Ann(x) & BiologyClass(y) & Textbook(z)) -> ShownUpWithout(x,y,z))", "all x y z.((Ann(x) & BiologyClass(y) & Textbook(z)) -> ShowedUpWithout(x,y))", "all x y z.((Ann(x) & BiologyClass(y) & Textbook(z)) -> ShowedUp(x,y,z))", "all x y.((Ann(x) & BiologyClass(y) & -Textbook(z)) -> ShowedUpWithout(x,y,z))", "all x.((Ann(x) & BiologyClass(x) & -Textbook(x)) -> ShownUpWithout(x,y))", "all x.((Ann(x) & BiologyClass(y)) -> ShowedUpWithoutTextbook(x,y))"]}
{"id": "enwn_validation_55", "nl": "Textbooks are required in Ann's biology class.", "fol": "", "prediction": ["all x y z.((Textbook(x) & BiologyClass(y) & Ann(z)) -> RequiredIn(x,y,z))", "all x y.((Textbook(x) & Ann(y)) -> RequiredInBiologyClass(x,y))", "all x y z.((Textbook(x) & BiologyClass(y) & Ann(z)) -> Requires(x,y,z))", "all x y.((Textbook(x) & BiologyClass(y)) -> RequiredInAnn(x,y))", "all x y.((Textbook(x) & BiologyClass(y)) -> Requires(x,y))", "all x y.((Textbook(x) & AnnsBiologyClass(y)) -> RequiredIn(x,y))", "all x y.((Textbook(x) & Ann(y)) -> RequiredInBiologyClass(y,x))", "all x.(Textbook(x) -> RequiredInAnnsBiologyClass(x))", "all x y.((Textbook(x) & AnnsBiologyClass(y)) -> Requires(x,y))", "all x y.((Textbook(x) & BiologyClass(y) & Ann(z)) -> RequiredIn(x,y,z))", "all x y z.((Textbook(x) & BiologyClass(y) & Ann(z)) -> Required(x,y,z))", "all x.((Textbook(x) & Ann(x)) -> BiologyClass(x))", "all x y.((Textbook(x) & Ann(y)) -> RequiresInBiologyClass(x,y))", "all x.((Textbook(x) & AnnsBiologyClass(x)) -> Required(x))", "all x y.((Textbook(x) & Ann(y)) -> Requires(x,y))", "all x y.((Textbook(x) & BiologyClass(y)) -> Required(x,y))"]}
{"id": "enwn_validation_56", "nl": "You should share things with people in need.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y) & InNeed(x,y)) -> ShareThings(x,y))", "all x y.((Person(x) & Person(y) & InNeed(x,y)) -> SharesThings(x,y))", "all x y.((Person(x) & Person(y) & InNeed(x)) -> ShareThings(x,y))", "all x y z.((Person(x) & Person(y) & Need(z)) -> ShareThings(x,y,z))", "all x y.((Person(x) & Person(y) & InNeed(x)) -> SharesThings(x,y))", "all x y.((Person(x) & Person(y)) -> ShareThings(x,y))", "all x y.((Person(x) & Person(y)) -> Shares(x,y))", "all x y.((Person(x) & Person(y) & InNeed(x,y)) -> Share(x,y))", "all x y.((Person(x) & Person(y) & InNeed(x,y)) -> Shares(x,y))", "all x y.((Person(x) & Person(y)) -> SharesThings(x,y))", "all x.((Person(x) & InNeed(x)) -> ShareThings(x))", "all x y z.((Person(x) & Person(y) & Need(z)) -> Shares(x,y,z))", "all x y.((Person(x) & InNeed(y)) -> ShareThings(x,y))", "all x y.((Person(x) & PersonInNeed(y)) -> ShareThings(x,y))", "all x y z.((Person(x) & Person(y) & Need(z)) -> SharesThings(x,y,z))", "all x y z.((Person(x) & Person(y) & Need(z)) -> Share(x,y,z))"]}
{"id": "enwn_validation_57", "nl": "Ann needs a textbook.", "fol": "", "prediction": ["all x y.((Ann(x) & Textbook(y)) -> Needs(x,y))", "all x.(Ann(x) -> NeedsTextbook(x))", "all x.((Ann(x) & NeedsTextbook(x)) -> NeedsTextbook(x))", "all x.(AnnNeedsTextbook(x) -> NeedsTextbook(x))", "all x.(NeedsTextbook(x) -> AnnNeedsTextbook(x))", "(NeedsTextbook(Ann))", "exists x.(Ann(x) & NeedsTextbook(x))", "All x.(Ann(x) -> NeedsTextbook(x))", "All x.(AnnNeedsTextbook(x) -> NeedsTextbook(x))", "Ann NeedsTextbook(Ann)", "all x.(NeedsTextbook(x) -> AnnNeeds(x))", "all x.(AnnNeedsTextbook(x) -> HasTextbook(x))", "all x.(NeedsTextbook(x) -> Ann(x))", "all x.(AnnNeedsTextbook(x) -> Needs(x))", "(NeedsTextbook(Ann) & -NeedsTextbook(Ann))", "all x.(AnnNeedsTextbook(x))"]}
{"id": "enwn_validation_58", "nl": "Someone should share a textbook with Ann.", "fol": "", "prediction": ["all x y.((Person(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x y.((Man(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x y.((Person(x) & Ann(y)) -> ShareTextbook(x,y))", "all x y.((Booklet(x) & Ann(y)) -> ShouldShare(x,y))", "all x y.((Man(x) & Ann(y)) -> ShareTextbook(x,y))", "all x y.((Teacher(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x y z.((Booklet(x) & Ann(y) & Textbook(z)) -> ShouldShare(x,y,z))", "all x y.((Ann(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x.((Man(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x y.((Teacher(x) & Ann(y)) -> ShareTextbook(x,y))", "all x.((Person(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x.((Man(x) & Ann(x)) -> ShouldShareTextbook(x,Ann))", "all x y.((Booklet(x) & Ann(y)) -> Share(x,y))", "all x y.((Booklet(x) & Ann(y)) -> ShouldShare(x,y))", "all x y z.((Booklet(x) & Ann(y) & Textbook(z)) -> ShouldShare(x,y,z))", "all x.((Man(x) & Ann(y)) -> ShareTextbook(x,y))"]}
{"id": "enwn_validation_59", "nl": "Fern should share her textbook with Ann.", "fol": "", "prediction": ["all x y.((Fern(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x.((Fern(x) & Ann(x)) -> ShouldShareTextbook(x,y))", "all x.((Fern(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x y.((Fern(x) & Ann(y)) -> ShareTextbook(x,y))", "all x y z.((Fern(x) & Ann(y) & Textbook(z)) -> ShouldShare(x,z))", "all x y z.((Fern(x) & Textbook(y) & Ann(z)) -> ShouldShare(x,y,z))", "all x y.((Fern(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "All x y.((Fern(x) & Ann(y)) -> ShouldShareTextbook(x,y))", "all x y z.((Fern(x) & Ann(y) & Textbook(z)) -> ShouldShare(x,y,z))", "all x.((Fern(x) & Ann(x)) -> ShouldShareTextbook(x))", "all x.((Fern(x) & Ann(x)) -> ShareTextbook(x,y))", "all x.((Fern(x) & Ann(y)) -> ShareTextbook(x,y))", "all x y.((Fern(x) & Ann(y)) -> SharesTextbook(x,y))", "all x y z.((Fern(x) & Textbook(y) & Ann(z)) -> ShouldShare(x,y,z))", "all x y z.((Fern(x) & Ann(y) & Textbook(z)) -> ShouldShare(x,z))", "All x.((Fern(x) & Ann(x)) -> ShouldShareTextbook(x,y))"]}
{"id": "enwn_validation_60", "nl": "Someone in a red BMW was waiting for the parking spot before George.", "fol": "", "prediction": ["all x y z.((RedBMWare(x) & ParkingSpot(y) & George(z)) -> WaitingFor(x,y,z))", "all x y.((RedBMWare(x) & George(y)) -> WaitingForParkingSpot(x,y))", "all x.((RedBMWare(x) & WaitingForParkingSpot(x,George)) -> WaitingForParkingSpot(x,George))", "all x.((BMWare(x) & Red(x)) -> WaitingForParkingSpot(x,George))", "all x y.((BMWare(x) & Red(x)) -> WaitingForParkingSpot(x,y))", "all x.((BMWare(x) & Red(x)) -> WaitingForParkingSpotBeforeGeorge(x))", "all x.((InRedBMWare(x) & WaitingForParkingSpot(x,George)) -> WaitingForParkingSpot(x,George))", "all x y.((BMWare(x) & RedBMWare(x)) -> WaitingForParkingSpot(x,y))", "all x.((BMWare(x) & Red(x)) -> WaitingForParkingSpot(x))", "all x y.((BMWare(x) & RedBMWare(y)) -> WaitingForParkingSpot(x,y))", "all x.((BMWare(x) & RedBMWare(x)) -> WaitingForParkingSpot(x,George))", "all x y.((RedBMWare(x) & ParkingSpot(y)) -> WaitingFor(x,y))", "all x y z.((RedBMWare(x) & ParkingSpot(y) & George(z)) -> WaitingFor(x,y))", "all x.((BMWare(x) & RedBMWare(x)) -> WaitingForParkingSpot(x))", "all x.((RedBMWare(x) & WaitingForParkingSpot(x,George)) -> WaitingForParking(x,George))", "all x y.((BMWare(x) & RedBMWare(y)) -> WaitingForParkingSpotBeforeGeorge(x,y))"]}
{"id": "enwn_validation_61", "nl": "If a group of people is waiting for something, the people who were waiting earliest are first in line.", "fol": "", "prediction": ["all x y.((Group(x) & WaitingFor(x,y)) -> FirstInLine(x))", "all x.((GroupOfPeople(x) & WaitingForSomething(x)) -> FirstInLine(x))", "all x.((GroupOfPeople(x) & WaitingFor(x)) -> FirstInLine(x))", "all x y.((GroupOfPeople(x) & WaitingFor(x,y)) -> FirstInLine(x))", "all x y.((Group(x) & WaitingFor(x,y)) -> FirstInLine(x,y))", "all x y.((GroupOfPeople(x) & WaitingFor(x,y)) -> FirstInLine(x,y))", "all x.((GroupOfPersons(x) & WaitingForSomething(x)) -> FirstInLine(x))", "all x.((GroupOfPeople(x) & Waiting(x)) -> FirstInLine(x))", "all x.((Group(x) & WaitingFor(x)) -> FirstInLine(x))", "all x y.((Group(x) & Waiting(x,y)) -> FirstInLine(x))", "all x y.((GroupOfPeople(x) & WaitingFor(x,y)) -> FirstInLine(y))", "all x y.((Group(x) & WaitingFor(x,y)) -> FirstInLine(y))", "all x.((GroupOfPeople(x) & WaitingFor(x,y)) -> FirstInLine(x))", "all x.((GroupOfPersons(x) & WaitingFor(x)) -> FirstInLine(x))", "all x y.((GroupOfPeople(x) & Waiting(x,y)) -> FirstInLine(x))", "all x y.((Person(x) & WaitingFor(x,y)) -> FirstInLine(x))"]}
{"id": "enwn_validation_62", "nl": "You should let people ahead of you in line go first.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y) & InLine(x,y)) -> LetsGoFirst(x,y))", "all x y.((Person(x) & Person(y) & Before(x,y)) -> LetsGoFirst(x,y))", "all x y.((Person(x) & Person(y)) -> LetsGoFirst(x,y))", "all x y z.((Person(x) & Person(y) & Line(z)) -> LetsGoFirst(x,y,z))", "all x y.((People(x) & Person(y) & InLine(x,y)) -> LetsGoFirst(x,y))", "all x y z.((Person(x) & Person(y) & Line(z) & Before(x,y,z)) -> LetsGoFirst(x,y,z))", "all x y.((Person(x) & Person(y) & InLine(y,x)) -> LetsGoFirst(x,y))", "all x y.((People(x) & Person(y)) -> LetsGoFirst(x,y))", "all x y.((Person(x) & Person(y) & LocatedInLine(x,y)) -> LetsGoFirst(x,y))", "all x y.((Person(x) & Person(y) & InLine(x,y)) -> LetGoFirst(x,y))", "all x y z.((People(x) & Person(y) & Line(z)) -> LetsGoFirst(x,y,z))", "all x y z.((Person(x) & Person(y) & Line(z) & Before(y,z)) -> LetsGoFirst(x,y,z))", "all x y z.((Person(x) & Person(y) & Line(z) & Before(x,z)) -> LetsGoFirst(x,y,z))", "all x y z.((Person(x) & Person(y) & Line(z) & Before(x,y)) -> LetsGoFirst(x,z))", "all x y.((People(x) & Person(y) & Before(x,y)) -> LetsGoFirst(x,y))", "all x.((Person(x) & InLine(x)) -> LetsGoFirst(x))"]}
{"id": "enwn_validation_63", "nl": "When you take something, you prevent other people from taking it.", "fol": "", "prediction": ["all x y.((Takes(x,y) & Person(y)) -> PreventsTaken(x,y))", "all x y.((Takes(x,y) & Person(y)) -> PreventsFromTaking(x,y))", "all x y.((Takes(x) & Person(y)) -> PreventsTaken(x,y))", "all x y.((Takes(x,y) & Person(y)) -> PreventsTaking(x,y))", "all x y.((Takes(x) & Person(y)) -> PreventsFromTaking(x,y))", "all x y.((Takes(x) & Person(y)) -> PreventsTaking(x,y))", "all x y z.((Takes(x,y) & Person(z)) -> PreventsFromTaking(x,z))", "all x y z.((Person(x) & Takes(x,y) & Person(z)) -> PreventsFromTaking(x,z))", "all x y z.((Person(x) & Takes(x,y) & Person(z)) -> PreventsTaken(x,z))", "all x y z.((Takes(x,y) & Person(z)) -> PreventsTaken(x,z))", "all x y.((Take(x) & Person(y)) -> PreventsTake(x,y))", "all x y z.((Person(x) & Takes(x,y) & Person(z)) -> PreventsTaking(x,z))", "all x y z.((Take(x) & Person(y) & Person(z)) -> PreventsFromTaking(x,y,z))", "all x y.((Takes(x) & Takes(y)) -> PreventsTaken(x,y))", "all x y.((Takes(x,y) & Person(y)) -> PreventsTake(x,y))", "all x y.((Person(x) & Takes(x,y)) -> PreventsTaken(x,y))"]}
{"id": "enwn_validation_64", "nl": "George is about to take the parking spot.", "fol": "", "prediction": ["all x y.((George(x) & ParkingSpot(y)) -> AboutToTake(x,y))", "George is about to take the parking spot.", "all x y.((George(x) & ParkingSpot(y)) -> AboutToTake(x,y))", "all x y.((George(x) & ParkingSpot(y)) -> Takes(x,y))", "all x.((George(x) & ParkingSpot(x)) -> AboutToTake(x,y))", "all x.((George(x) & ParkingSpot(x)) -> AboutToTake(x,y))", "all x.((George(x) & ParkingSpot(y)) -> AboutToTake(x,y))", "all x.(George(x) -> AboutToTakeParkingSpot(x))", "all x.((George(x) & ParkingSpot(x)) -> Takes(x,y))", "all x y.((George(x) & ParkingSpot(y)) -> Takes(x,y))", "George is about to TakeParkingSpot(George)", "all x.((George(x) & TakesParkingSpot(x)) -> TakesParkingSpot(x))", "all x.(George(x) -> AboutToTakeParkingSpot(x))", "all x.((George(x) & ParkSpot(x)) -> AboutToTake(x,y))", "all x y.((George(x) & ParkingSpot(y)) -> Taking(x,y))", "all x.((George(x) & ParkingSpot(x)) -> Takes(x,y))"]}
{"id": "enwn_validation_65", "nl": "Someone in a red BMW is in line for the parking spot ahead of George.", "fol": "", "prediction": ["all x y.((RedBMWare(x) & George(y)) -> InLineForParkingSpot(x,y))", "all x y.((Red BMW(x) & George(y)) -> InLineForParkingSpot(x,y))", "all x.((BMWare(x) & Red(x)) -> InLineForParkingSpot(x,George))", "all x.((BMWare(x) & Red(x)) -> InLineForParkingSpotAheadOfGeorge(x))", "all x.((BMWare(x) & Red(x)) -> InLineForParkingSpot(x))", "all x.((RedBMWare(x) & InLineForParkingSpot(x) & George(x)) -> InLineForParkingSpot(x))", "all x y.((BMWare(x) & Red(x)) -> InLineForParkingSpot(x,y))", "all x.((BMWare(x) & RedBMWare(x)) -> InLineForParkingSpot(x,George))", "all x.((BMWare(x) & RedBMWare(x)) -> InLineForParkingSpotAheadOfGeorge(x))", "all x.((BMWare(x) & RedBMWare(x)) -> InLineForParkingSpot(x))", "all x y.((RedBMWare(x) & RedBMWare(y)) -> InLineForParkingSpot(x,y))", "all x.((Red BMW(x) & InLineForParkingSpot(x) & George(x)) -> InLineForParkingSpot(x))", "all x y.((BMWare(x) & RedBMWare(x)) -> InLineForParkingSpot(x,y))", "all x.((RedBMWare(x) & InLineForParkingSpot(x) & George(x)) -> InLine(x))", "all x.((BMWare(x) & Red(x)) -> ParksAheadOfGeorge(x))", "all x y.((BMWare(x) & Red(x)) -> InLineForParkingSpot(y,George))"]}
{"id": "enwn_validation_66", "nl": "George should let the person in the red BMW take the parking spot.", "fol": "", "prediction": ["all x y.((Person(x) & Red BMW(y)) -> LetsTakeParkingSpot(x,y))", "all x y.((Person(x) & Red BMW(y)) -> ShouldLetTakeParkingSpot(x,y))", "all x y.((Person(x) & Red BMW(y)) -> LetTakeParkingSpot(x,y))", "all x y.((Person(x) & Red BMW(y) & TakesParkingSpot(x,y)) -> LetsTakeParkingSpot(x,y))", "all x y.((Person(x) & BMW(y) & InRed(x,y)) -> LetsTakeParkingSpot(x,y))", "all x y.((Person(x) & BMW(y) & InRed(x,y)) -> LetTakeParkingSpot(x,y))", "all x.((Person(x) & Red BMW(x)) -> LetsTakeParkingSpot(x))", "all x y.((Person(x) & BMW(y) & InRed(x,y)) -> ShouldLetTakeParkingSpot(x,y))", "all x y.((Person(x) & Red BMW(y) & TakesParkingSpot(x,y)) -> GeorgeLetsTakeParkingSpot(x,y))", "all x y.((Person(x) & BMW(y)) -> LetsTakeParkingSpot(x,y))", "all x y.((RedBMWare(x) & Person(y)) -> LetsTakeParkingSpot(x,y))", "all x y.((Person(x) & Red BMW(y)) -> ShouldLeaveParkingSpot(x,y))", "all x.((Person(x) & Red BMW(x)) -> LetsTakeParkingSpot(x,George))", "all x y.((Person(x) & RedBMW3(y)) -> LetsTakeParkingSpot(x,y))", "all x y.((Person(x) & BMW(y) & InRed(x,y)) -> ShouldLeaveParkingSpot(x,y))", "all x.((Person(x) & RedBMWare(x)) -> LetsTakeParkingSpot(x))"]}
{"id": "enwn_validation_67", "nl": "If George takes the parking spot, he will prevent other people from taking it.", "fol": "", "prediction": ["all x.(TakesParkingSpot(x) -> PreventsOtherPeopleFromTakingParkingSpot(x))", "all x.((George(x) & TakesParkingSpot(x)) -> PreventsOtherPeopleFromTakingParkingSpot(x))", "all x.((George(x) & TakesParkingSpot(x)) -> PreventsOtherPeopleFromTakingParkingSpot(x))", "all x.(TakesParkingSpot(x) -> PreventsMorePeopleFromTakingParkingSpot(x))", "all x.(TakesParkingSpot(x) -> PreventsOthersFromTakingParkingSpot(x))", "all x.(TakesParkingSpot(x) -> PreventsOtherPeopleFromTakingSpot(x))", "all x y.((ParkingSpot(x) & George(y)) -> PreventsTakenBy(y,x))", "all x y.((ParkingSpot(x) & George(y)) -> PreventsTaking(y,x))", "all x.((Gerry(x) & TakesParkingSpot(x)) -> PreventsOtherPeopleFromTakingParkingSpot(x))", "all x y.((ParkingSpot(x) & George(y)) -> PreventsTaken(y,x))", "all x y.((ParkingSpot(x) & George(y)) -> -Takes(y,x))", "all x y.((ParkingSpot(x) & George(y) & Takes(y,x)) -> PreventsTaking(y,x))", "all x.((ParkingSpot(x) & Takes(x,ParkingSpot)) -> PreventsTaking(x,ParkingSpot))", "all x y.((ParkingSpot(x) & George(y) & Takes(y,x)) -> PreventsTake(y,x))", "all x.((George(x) & TakesParkingSpot(x)) -> PreventsOthersFromTakingParkingSpot(x))", "all x.((ParkingSpot(x) & Takes(x,ParkingSpot)) -> PreventsTaken(x,ParkingSpot))"]}
{"id": "enwn_validation_68", "nl": "George shouldn't take the parking spot.", "fol": "", "prediction": ["all x.((George(x) & ParkingSpot(x)) -> -shouldTake(x,y))", "all x y.((ParkingSpot(x) & George(y)) -> -shouldTake(y,x))", "all x.((George(x) & ParkingSpot(y)) -> -Takes(x,y))", "all x.((George(x) & ParkingSpot(x)) -> -Takes(x,y))", "all x.((George(x) & ParkingSpot(y)) -> -shouldTake(x,y))", "all x.((George(x) & -ParkingSpot(x)) -> -ParkingSpot(x))", "all x.((George(x) & ParkingSpot(y)) -> -shouldTake(x,y))", "all x.((George(x) & -ParkingSpot(x)) -> -ParkingSpot(x))", "all x.((George(x) & ParkingSpot(x)) -> -Takes(x,y))", "all x.((George(x) & ParkingSpot(x)) -> -shouldTake(x,y))", "all x.((George(x) & ParkingSpot(y)) -> -Takes(x,y))", "all x y.((ParkingSpot(x) & George(y)) -> -Takes(y,x))", "all x.((George(x) & ParkingSpot(x)) -> -shouldTake(x,George))", "all x.((ParkingSpot(x) & George(x)) -> -Takes(x,ParkingSpot))", "all x.((George(x) & ParkingSpot(x)) -> -Takes(x,George))", "all x.((George(x) & -ParkingSpot(x)) -> -Takes(x,y))"]}
{"id": "enwn_validation_69", "nl": "Embezzlement is theft or misappropriation of funds belonging to an employer.", "fol": "", "prediction": ["all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x,y) | Misappropriation(x,y)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x) | Misappropriation(x)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x,y) | Misappropriation(x,y)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x,y) | Misappropriation(x,y)))", "all x y z.((Embezzlement(x) & Employer(y) & Fund(z)) -> (Theft(x,z) | Misappropriation(x,z)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x) | Misappropriation(x)))", "all x.(Embezzlement(x) -> (TheftOfFunds(x) | MisappropriationOfFunds(x)))", "all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x,y) | Misappropriation(x,y)))", "all x.(Embezzlement(x) -> (TheftOrMisappropriationOfFunds(x) & Employer(x)))", "all x.(Embezzlement(x) -> (TheftOrMisappropriationOfFunds(x) & Employer(x)))", "all x.(Embezzlement(x) -> (Theft(x) | Misappropriation(x)))", "all x.(Embezzlement(x) -> (TheftOfFunds(x) | MisappropriationOfFunds(x)))", "all x y.((Embezzlement(x) & Employer(y)) -> (TheftOrMisappropriationOfFunds(x,y)))", "all x.(Embezzlement(x) -> (Theft(x) | Misappropriation(x)) & Employer(x)))", "all x.(Embezzlement(x) -> (Theft(x) | Misappropriation(x)) & EmployerFunds(x)))", "all x.(Embezzlement(x) -> (Theft(x) | Misappropriation(x)) & Employer(x)))"]}
{"id": "enwn_validation_70", "nl": "Using money allotted for one purpose for another purpose is misappropriation.", "fol": "", "prediction": ["all x y.((Money(x) & Purpose(y) & AllottedFor(x,y)) -> Misappropriation(x))", "all x.((UsesMoney(x) & AllottedForOnePurpose(x) & AllottedForAnotherPurpose(x)) -> Misappropriation(x))", "all x y z.((Money(x) & Purpose(y) & Purpose(z) & AllottedFor(x,y,z)) -> Misappropriation(x))", "all x.((Money(x) & AllottedForOnePurpose(x) & AllottedForAnotherPurpose(x)) -> Misappropriation(x))", "all x y.((MoneyAllottedFor(x,y) & Purpose(y)) -> Misappropriation(x))", "all x y z.((Money(x) & Purpose(y) & Purpose(z) & AllottedFor(x,y) & AllottedFor(x,z)) -> Misappropriation(x))", "all x y z.((Money(x) & Purpose(y) & Purpose(z) & AllottedFor(x,y)) -> Misappropriation(x))", "all x y.((Money(x) & AllottedFor(x,y) & Purpose(y)) -> Misappropriation(x))", "all x y.((MoneyAlottedFor(x,y) & Purpose(y)) -> Misappropriation(x))", "all x y z.((Money(x) & Purpose(y) & Purpose(z) & AllottedFor(x,y) & UsedFor(x,z)) -> Misappropriation(x))", "all x.((MoneyAllotted(x) & Purpose(x) & Purpose(x)) -> Misappropriation(x))", "all x.((UsesMoney(x) & AllottedForOnePurpose(x) & AllottedForOtherPurpose(x)) -> Misappropriation(x))", "all x y.((Money(x) & AllottedFor(x,y)) -> Misappropriation(x))", "all x y.((MoneyAllocatedFor(x,y) & Purpose(y)) -> Misappropriation(x))", "all x y z.((Money(x) & Purpose(y) & Purpose(z) & AllottedFor(x,y) & UsesFor(x,z)) -> Misappropriation(x))", "all x y.((UsesMoneyAllottedFor(x,y) & Purpose(y)) -> Misappropriation(x))"]}
{"id": "enwn_validation_71", "nl": "Tessa works as an accountant at her firm.", "fol": "", "prediction": ["all x y.((Tessa(x) & Firm(y)) -> WorksAsAccountant(x,y))", "(WorksAsAccountant(Tessa) & AtFirm(Tessa))", "(WorksAsAccountant(Tessa,Firm) & -WorksAsAccountant(Tessa,Firm))", "all x y z.((Tessa(x) & Accountant(y) & Firm(z)) -> WorksAt(x,y,z))", "(WorksAsAccountant(Tessa,Firm) & At(Tessa,Firm))", "all x y z.((Tessa(x) & Accountant(y) & Firm(z) & WorksAt(x,y,z)) -> WorksAt(x,y,z))", "(WorksAsAccountant(Tessa) & AtFirm(Tessa,Firm))", "(WorksAsAccountant(Tessa,Firm) & TessaWorksAt(Tessa,Firm))", "(WorksAsAccountant(Tessa,Firm) -> TessaWorksAt(Tessa,Firm)))", "(WorksAsAccountant(Tessa,Firm) & TessaWorksAsAccountant(Tessa,Firm))", "(WorksAsAccountant(Tessa,Firm) & TessaWorksAs(Tessa,Firm))", "all x y z.((Tessa(x) & Accountant(y) & Firm(z) & WorksAt(x,y,z)) -> WorksAt(x,y))", "(WorksAsAccountant(Tessa,Firm) -> TessaWorksAt(Tessa,Firm))", "(WorksAsAccountant(Tessa,Firm) & -WorksAsAccountant(Tessa,Firm)))", "(WorksAsAccountant(Tessa,Firm) & -WorksAsAccountant(Tessa,Firm) & -WorksAsAccountant(Tessa,Firm))", "(WorksAsAccountant(Tessa,Firm))"]}
{"id": "enwn_validation_72", "nl": "A retiree is someone who has retired from employment and is no longer working.", "fol": "", "prediction": ["all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (retiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (retiredFromEmployment(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredFromEmployer(x) & -Working(x)))", "all x.(Retiree(x) -> (RetiredFromEmployer(x) & -Working(x)))", "all x y.((Retiree(x) & Person(y)) -> (RetiredFromEmployment(y) & -Working(y)))", "all x.(Retiree(x) -> (Retired(x) & -Working(x)))", "all x.(Retiree(x) -> (Retired(x) & -Working(x)))", "all x.((Retiree(x) & RetiredFromEmployment(x) & -Working(x)) -> RetiredFromEmployment(x))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & No longerWorking(x)))", "all x.(Retiree(x) -> (RetiredFromEmployment(x) & No longerWorking(x)))", "all x.((Retiree(x) & RetiredFromEmployment(x) & -Working(x)) -> Retirement(x))", "all x.(Retiree(x) -> (retiredfromEmployment(x) & -Working(x)))", "all x.((Retiree(x) & RetiredFromEmployment(x) & -Working(x)) -> Retired(x))", "all x y.((Retiree(x) & Person(y)) -> (RetiredFromEmployment(x,y) & -Working(y)))"]}
{"id": "enwn_validation_73", "nl": "Tessa withdrew a lump sum from her firm's retirement fund to buy herself a summer home.", "fol": "", "prediction": ["all x y z.((Tessa(x) & LumpSum(y) & RetirementFund(z)) -> WithdrewToBuySummerHome(x,y,z))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementFund(z)) -> WithdrewToBuy(x,y,z))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementFund(z) & Withdrew(x,y,z)) -> BuysSummerHome(x))", "all x y.((Tessa(x) & RetirementFund(y)) -> WithdrewSumToBuySummerHome(x,y))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementFund(z) & Withdraws(x,y,z)) -> BuysSummerHome(x))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementFund(z) & Withdrew(x,y,z)) -> PurchasesSummerHome(x))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementFund(z)) -> WithdrawsToBuySummerHome(x,y,z))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementFund(z) & Withdraws(x,y)) -> BuysSummerHome(x,z))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementFund(z)) -> Withdrew(x,y,z))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementFund(z) & Withdrew(x,y)) -> BuysSummerHome(x,z))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementFund(z) & Withdrew(x,y)) -> PurchasesSummerHome(x,z))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementFund(z)) -> WithdrewSum(x,y,z))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementFund(z)) -> WithdrawsToBuy(x,y,z))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementFund(z) & Withdraws(x,y)) -> BuysSummerHome(x))", "all x y.((Tessa(x) & RetirementFund(y) & Withdrew(x,y)) -> BuysSummerHome(x))", "all x y z.((Tessa(x) & LumpSum(y) & RetirementFund(z) & Withdrew(x,y)) -> BuysSummerHome(x))"]}
{"id": "enwn_validation_74", "nl": "Money in a company's retirement fund is intended to be paid out to retirees.", "fol": "", "prediction": ["all x y.((Company(x) & RetirementFund(y)) -> IntendedToBePaidOutToRetirees(x,y))", "all x y.((Company(x) & RetirementFund(y)) -> PaidOutToRetirees(x,y))", "all x y.((Company(x) & RetirementFund(y)) -> IntendedToBePayedOutToRetirees(x,y))", "all x y.((Company(x) & RetirementFund(y)) -> IntendedToBePaidToRetirees(x,y))", "all x y.((Company(x) & RetirementFund(y)) -> IntendedToPayOutToRetirees(x,y))", "all x y.((Company(x) & RetirementFund(y)) -> PaysOutToRetirees(x,y))", "all x y.((Company(x) & RetirementFund(y)) -> IntendedToPayToRetirees(x,y))", "all x.((Company(x) & RetirementFund(x)) -> IntendedToBePaidOutToRetirees(x))", "all x.((Company(x) & RetirementFund(x)) -> PaidOutToRetirees(x))", "all x.((CompanyRetirementFund(x) & InCompanyRetirementFund(x)) -> PaidOutToRetirees(x))", "all x y z.((Company(x) & RetirementFund(y) & Retiree(z)) -> IntendedToBePaidOutTo(x,y,z))", "all x y.((Company(x) & RetirementFund(y)) -> IntendedToPayOut(x,y))", "all x y.((Company(x) & RetirementFund(y)) -> IntendedForPayment(x,y))", "all x y.((Company(x) & Company(y) & RetirementFund(x,y)) -> IntendedToBePaidOutToRetirees(x,y))", "all x y z.((Company(x) & RetirementFund(y) & Retirement(z)) -> IntendedToBePaidOutToRetirees(x,y,z))", "all x y.((Company(x) & RetirementFund(y)) -> PaidOutToRetirees(y))"]}
{"id": "enwn_validation_75", "nl": "Tessa is not a retiree.", "fol": "", "prediction": ["(-Retiree(Tessa))", "(Retiree(Tessa) & -Retiree(Tessa))", "-Retiree(Tessa)", "(-Retiree(Tessa) & -Retiree(Tessa))", "(Retiree(Tessa) -> -Retiree(Tessa))", "Tessa is notRetiree(Tessa)", "Tessa is notRetiree(te) -> -Retiree(te))", "(Retiree(Tessa) & -Retired(Tessa))", "Tessa is notRetiree(tessa)", "(-Retiree(Tessa) & -Retired(Tessa))", "Tessa is notRetiree(te) & -Retiree(te))", "(Retiree(Tessa) -> -Retiree(Tessa)))", "Tessa is not a retiree.", "(Retiree(Tessa) & -Retiree(Tessa)))", "(-Retiree(Tessa) & -Retiree(Tessa)))", "(Retiree(Tessa) -> -Retired(Tessa))"]}
{"id": "enwn_validation_76", "nl": "Tessa bought herself a summer home with money from the firm intended for retirees.", "fol": "", "prediction": ["all x y.((Tessa(x) & SummerHome(y)) -> (BuysWithMoney(x,y) & DesignedForRetirees(x)))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & IntendedForRetirees(z)) -> PurchasedWithMoney(x,y,z))", "all x y.((Tessa(x) & SummerHome(y)) -> (BuysWithMoney(x,y) & DesignedForRetirees(y)))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & IntendedForRetirees(x,y,z)) -> PurchasedWithMoney(x,y,z))", "all x y.((Tessa(x) & SummerHome(y) & IntendedForRetirees(x,y)) -> PurchasedWithMoney(x,y))", "all x y.((Tessa(x) & SummerHome(y)) -> (BuysWithMoney(x,y) & DesignedForRetirees(x,y)))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & IntendedForRetirees(z)) -> Purchased(x,y,z))", "all x y.((Tessa(x) & SummerHome(y)) -> (BuysWithMoney(x,y) & IntendedForRetirees(x)))", "all x y z.((Tessa(x) & SummerHome(y) & Fund(z) & DesignedForRetirees(x,y,z)) -> PurchasedWith(x,y,z))", "all x y z.((Tessa(x) & SummerHome(y) & Fund(z) & IntendedForRetirees(x,y,z)) -> PurchasedWith(x,y,z))", "all x y.((Tessa(x) & SummerHome(y) & IntendedForRetirees(x,y)) -> Purchased(x,y))", "all x.((Tessa(x) & SummerHome(x) & MoneyFromRetirees(x)) -> Purchased(x,y))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & IntendedForRetirees(x,y)) -> PurchasedWithMoney(x,y,z))", "all x y.((Tessa(x) & SummerHome(y)) -> PurchasedWithMoney(x,y))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & IntendedForRetirees(x,y,z)) -> Purchased(x,y,z))", "all x y.((Tessa(x) & SummerHome(y)) -> PurchasedWithMoney(x,y))"]}
{"id": "enwn_validation_77", "nl": "Tessa bought herself a summer home with money from the firm that was not intended for her.", "fol": "", "prediction": ["all x y.((Tessa(x) & SummerHome(y)) -> (BuysWithMoney(x,y) & -IntendedFor(x,y)))", "all x y.((Tessa(x) & SummerHome(y)) -> (BuysWithMoney(x,y) & -IntendedFor(y,x)))", "all x y.((Tessa(x) & SummerHome(y) & -IntendedFor(x,y)) -> PurchasedWithMoney(x,y))", "all x y.((Tessa(x) & SummerHome(y) & -IntendedFor(x,y)) -> Purchased(x,y))", "all x y.((Tessa(x) & SummerHome(y) & -IntendedFor(y,x)) -> PurchasedWithMoney(x,y))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & -IntendedFor(z,y)) -> PurchasedWith(x,y,z))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & -IntendedFor(z,y)) -> PurchasedWithMoney(x,y,z))", "all x y.((Tessa(x) & SummerHome(y) & -IntendedFor(y,x)) -> Purchased(x,y))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & -IntendedFor(x,y,z)) -> PurchasedWithMoney(x,y,z))", "all x y.((Tessa(x) & SummerHome(y) & -IntentionalFor(x,y)) -> Purchased(x,y))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & -IntendedFor(x,y,z)) -> PurchasedWith(x,y,z))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & -IntendedFor(z,y)) -> Purchased(x,y,z))", "all x y.((Tessa(x) & SummerHome(y) & -IntentionalFor(x,y)) -> PurchasedWithMoney(x,y))", "all x y.((Tessa(x) & SummerHome(y)) -> (BuysWithMoney(x,y) & -IntendedFor(y)))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & -IntendedFor(y,z)) -> PurchasedWith(x,y,z))", "all x y z.((Tessa(x) & SummerHome(y) & Firm(z) & -IntendedFor(y,z)) -> PurchasedWithMoney(x,y,z))"]}
{"id": "enwn_validation_78", "nl": "Tessa misappropriated her firm's money.", "fol": "", "prediction": ["all x y.((Tessa(x) & Firm(y)) -> MisappropriatedMoney(x,y))", "all x y z.((Tessa(x) & Firm(y) & Money(z)) -> Misappropriated(x,y,z))", "all x y.((Tessa(x) & Firm(y) & MisappropriatedMoney(x,y)) -> MisappropriatedMoney(x,y))", "all x.((Tessa(x) & Firm(y)) -> MisappropriatedMoney(x,y))", "all x y z.((Tessa(x) & Firm(y) & Money(z) & Misappropriated(x,y,z)) -> Misappropriated(x,y,z))", "all x y.((Tessa(x) & Firm(y)) -> MisappropriatedMoney(x,y))", "all x y z.((Tessa(x) & Firm(y) & Money(z) & Misappropriated(x,y,z)) -> Misappropriated(x,y))", "all x y z.((Tessa(x) & Firm(y) & Money(z) & Misappropriated(x,y)) -> Misappropriated(x,z))", "all x y.((Tessa(x) & Company(y)) -> MisappropriatedMoney(x,y))", "all x y z.((Tessa(x) & Firm(y) & Money(z)) -> Misappropriated(x,y))", "all x y z.((Tessa(x) & Firm(y) & Fund(z)) -> Misappropriated(x,y,z))", "all x y.((Tessa(x) & Firm(y) & MisappropriatedMoney(x)) -> MisappropriatedMoney(x,y))", "all x y.((Tessa(x) & Firm(y)) -> MissappropriatedMoney(x,y))", "all x y z.((Tessa(x) & Firm(y) & Money(z) & Misappropriated(x,y)) -> Misappropriated(x,y,z))", "all x y z.((Tessa(x) & Firm(y) & Money(z) & Misappropriated(x,z)) -> Misappropriated(x,y,z))", "all x y z.((Tessa) & Firm(y) & Money(z)) -> Misappropriated(x,y,z))"]}
{"id": "enwn_validation_79", "nl": "Tessa embezzled from her firm.", "fol": "", "prediction": ["all x y.((Tessa(x) & Firm(y)) -> EmbezzledFrom(x,y))", "all x y.((Tessa(x) & Firm(y)) -> Embezzled(x,y))", "all x y z.((Tessa(x) & Firm(y) & Firm(z)) -> EmbezzledFrom(x,y,z))", "all x y.((Tessa(x) & Firm(y)) -> EmbarkedFrom(x,y))", "all x y.((Tessa(x) & Firm(y)) -> Embeds(x,y))", "all x y.((Tessa(x) & Firm(y)) -> EmbedsFrom(x,y))", "all x y.((Tessa(x) & Firm(y)) -> Embed(x,y))", "all x y.((Tessa(x) & Firm(y)) -> EmbezzledFrom(x,y))", "all x y z.((Tessa(x) & Firm(y) & Firm(z)) -> Embezzled(x,y,z))", "all x y z.((Tessa(x) & Firm(y) & Firm(z)) -> EmbarkedFrom(x,y,z))", "all x y z.((Tessa(x) & Firm(y) & Firm(z)) -> EmbedsFrom(x,y,z))", "all x y z.((Tessa(x) & Firm(y) & Firm(z)) -> Embeds(x,y,z))", "all x y.((Tessa(x) & Firm(y)) -> Embarked(x,y))", "all x y.((Tessa(x) & Firm(y)) -> embezzledFrom(x,y))", "all x y.((Tessa(x) & Firm(y)) -> Embezzled(x,y))", "all x y z.((Tessa(x) & Firm(y) & Firm(z)) -> EmbezzledFrom(x,y,z))"]}
{"id": "enwn_validation_80", "nl": "Leading others to think someone was responsible for something is shifting the blame.", "fol": "", "prediction": ["all x y.((LeadsOthers(x) & Person(y) & ThinksResponsible(x,y)) -> ShiftingBlood(x))", "all x y.((LeadsOthers(x) & Person(y) & ThinksResponsibleFor(x,y)) -> ShiftingBlood(x))", "all x y.((LeadsOthers(x) & Person(y) & ThinksResponsible(x,y)) -> ShiftsBlood(x))", "all x y.((LeadsOthers(x) & Person(y) & ThinksResponsibleFor(x,y)) -> ShiftsBlood(x))", "all x.((LeadsOthers(x) & ThinksPersonResponsible(x)) -> ShiftsBlood(x))", "all x y.((LeadsOthersToThought(x,y) & Person(y)) -> ShiftingBlood(x))", "all x.((LeadsOthers(x) & ThinksPersonResponsible(x)) -> ShiftingBlood(x))", "all x y.((LeadingOthers(x) & Person(y) & ThinksResponsible(x,y)) -> ShiftingBlood(x))", "all x y.((LeadsOthers(x) & Person(y)) -> ShiftsBlood(x,y))", "all x y.((LeadsOthersToThought(x,y) & Person(y)) -> ShiftsBlood(x))", "all x.((LeadingOthers(x) & ThinksPersonResponsible(x)) -> ShiftsBlood(x))", "all x y.((LeadsOthersToThought(x,y) & Person(y)) -> ShiftsBlood(x,y))", "all x.((LeadingOthers(x) & ThinksPersonResponsible(x)) -> ShiftingBlood(x))", "all x y.((LeadsOthers(x) & Person(y) & Thinks(x,y)) -> ShiftingBlood(x))", "all x y.((LeadsOthers(x) & Person(y) & ThinksResponsible(x,y)) -> ShiftsBlood(x,y))", "all x y.((LeadsOthersToThink(x,y) & Person(y)) -> ShiftingBlood(x))"]}
{"id": "enwn_validation_81", "nl": "When the campus cops interviewed Nate after the fire, he said he saw Jeff drop a cigarette.", "fol": "", "prediction": ["all x y.((CampusPolice(x) & CampusPolice(y) & InterviewedNateAfterFire(x,y)) -> SawJeffDropCigarette(x,y))", "all x y.((CampusPolice(x) & Nate(y) & InterviewedAfterFire(x,y)) -> SawJeffDropCigarette(y,x))", "all x y.((CampusPolice(x) & Nate(y) & InterviewedAfterFire(x,y)) -> SawJeffDropCigarette(y))", "all x y.((CampusPolice(x) & Nate(y) & InterviewedAfterFire(x,y)) -> SawJeffDropCigarette(y,x))", "all x y z.((CampusPolice(x) & Nate(y) & Fire(z)) -> InterviewedAfter(y,z))", "all x y.((CampusPolice(x) & Nate(y) & InterviewedAfterFire(x,y)) -> SawJeffDropCigarette(y))", "all x y.((CampusPolice(x) & CampusPolice(y)) -> (InterviewsNateAfterFire(x,y) & SawJeffDropCigarette(x,y)))", "all x y.((CampusPolice(x) & CampusPolice(y) & InterviewedNateAfterFire(x,y)) -> SawJeffDropCigarette(x))", "all x y.((CampusPolice(x) & CampusPolice(y)) -> (InterviewsNateAfterFire(x,y) & SawJeffDropCigarette(x)))", "all x y.((CampusPolice(x) & Nate(y) & InterviewedAfterFire(x,y)) -> SawJeffDropCigarette(x,y))", "all x y z.((CampusPolice(x) & Nate(y) & Fire(z)) -> (Interview(x,y,z) & SawJeffDropCigarette(y,z)))", "all x y z.((CampusPolice(x) & Nate(y) & Fire(z) & InterviewedAfter(y,z)) -> SawJeffDropCigarette(y,z))", "all x y z.((CampusPolice(x) & Nate(y) & Fire(z) & InterviewedAfter(x,y,z)) -> SawJeffDropCigarette(y,z))", "all x y.((CampusPolice(x) & Nate(y) & InterviewedAfterFire(x,y)) -> SawJeffDropCigarette(x,y))", "all x y z.((CampusPolice(x) & Nate(y) & Fire(z)) -> (Interviews(x,y,z) & SawJeffDropCigarette(y,z)))", "all x y z.((CampusPolice(x) & Nate(y) & Fire(z)) -> (Interviews(x,y,z) & DropsCigarette(y,z)))"]}
{"id": "enwn_validation_82", "nl": "Telling someone that something happened leads them to believe it happened.", "fol": "", "prediction": ["all x y.((Tells(x,y) & Person(y)) -> Believes(y,x))", "all x y.((Tells(x,y) & Person(y)) -> Believes(x,y))", "all x y.((Tells(x,y) & Person(y) & Happened(y)) -> Believes(x,y))", "all x y z.((Tells(x,y) & Person(z) & Happened(x,z)) -> Believes(x,z))", "all x.((Tells(x,y) & Happened(y)) -> Believes(x,y))", "all x y.((Tells(x,y) & Happened(y)) -> Believes(x,y))", "all x y z.((Tells(x,y) & Person(z) & Happened(z)) -> Believes(x,z))", "all x y.((Tells(x,y) & Person(y) & Happened(x)) -> Believes(y,x))", "all x y.((Tells(x,y) & Person(y)) -> BelievesSituation(y))", "all x y.((TellsPerson(x,y) & Happened(y)) -> Believes(x,y))", "all x y.((Tells(x,y) & Person(y)) -> Believes(y))", "all x y.((TellsPerson(x) & Happened(x,y)) -> Believes(x,y))", "all x y.((Tells(x,y) & Person(y) & Happened(y)) -> Believes(y,z))", "all x y.((Tells(x,y) & Person(y) & Happened(y)) -> Believes(y,x))", "all x y.((Tells(x,y) & Person(y)) -> BelievesSituation(y,x))", "all x y.((Tells(x,y) & Person(y)) -> BelievesSituation(x,y))"]}
{"id": "enwn_validation_83", "nl": "Dropping a cigarette can cause a fire.", "fol": "", "prediction": ["all x.(DroppingCigarette(x) -> CanCauseFire(x))", "all x.((Cigarette(x) & Drops(x)) -> CanCauseFire(x))", "all x y.((Cigarette(x) & Drop(y)) -> CanCauseFire(x,y))", "all x.((Cigarette(x) & Drops(x)) -> CausesFire(x))", "all x y.((Cigarette(x) & Dropping(x,y)) -> CanCauseFire(x))", "all x y.((Cigarette(x) & Drops(x,y)) -> CanCauseFire(x))", "all x.((Cigarette(x) & Dropped(x)) -> CanCauseFire(x))", "all x y.((Cigarette(x) & Drop(y)) -> CanCauseFire(x))", "all x.(DroppingCigarette(x) -> CausesFire(x))", "all x y.((Cigarette(x) & Drop(x,y)) -> CanCauseFire(x))", "all x.(Dropping(x) -> CanCauseFire(x))", "all x.((Cigarette(x) & Drop(x)) -> CanCauseFire(x))", "all x.(DropsCigarette(x) -> CanCauseFire(x))", "all x y.((Cigarette(x) & Drop(y)) -> CausesFire(x,y))", "all x y.((Cigarette(x) & Drop(y,x)) -> CanCauseFire(x))", "all x.((Cigarette(x) & Drops(x,y)) -> CanCauseFire(x))"]}
{"id": "enwn_validation_84", "nl": "Letting someone else take the blame for your actions is wrong.", "fol": "", "prediction": ["all x.(LetsAnotherTakeBlood(x) -> Wrong(x))", "all x.(LetsAnotherTakeBlood(x) -> IsWrong(x))", "all x.(LetsAnotherTakeBloodForActions(x) -> Wrong(x))", "all x.(LetsAnotherTakeBlood(x) -> Worst(x))", "all x.(LettingAnotherTakeBlood(x) -> Wrong(x))", "all x y.((LetAnotherTakeBlood(x) & Action(y)) -> IsWrong(x,y))", "all x y.((LetsAnotherTakeBlood(x,y) & Action(y)) -> IsWrong(x))", "all x y.((LetsAnotherTakeBlood(x) & Action(y)) -> IsWrong(x,y))", "all x.(LettingAnotherTakeBlood(x) -> IsWrong(x))", "all x y.((LetAnotherTakeBlood(x,y) & Action(y)) -> IsWrong(x))", "all x y.((LetsAnotherTakeBlood(x) & Action(y)) -> IsWrong(x))", "all x y.((LetAnotherTakeBlood(x) & Action(y)) -> Wrong(x))", "all x y.((LetAnotherTakeBlood(x) & Action(y)) -> IsWrong(x))", "all x y.((LetsAnotherTakeBlood(x) & Action(y)) -> Wrong(x))", "all x.(LetsAnotherTakeBloodForActions(x) -> IsWrong(x))", "all x.(LetsOtherTakeBlood(x) -> IsWrong(x))"]}
{"id": "enwn_validation_85", "nl": "Nate dropped the cigarette that started the fire.", "fol": "", "prediction": ["all x y.((Nate(x) & Cigarette(y)) -> Dropped(x,y))", "all x y.((Nate(x) & Cigarette(y)) -> Dropped(x,y))", "all x y z.((Nate(x) & Cigarette(y) & Fire(z)) -> Dropped(x,y,z))", "all x.((Nate(x) & Cigarette(x)) -> Dropped(x))", "all x y z.((Nate(x) & Cigarette(y) & Fire(z)) -> Dropped(x,y))", "all x.((Nate(x) & Cigarette(x)) -> Dropped(x))", "all x y z.((Nate(x) & Cigarette(y) & Fire(z)) -> Drops(x,y,z))", "all x y.((Nate(x) & Cigarette(y) & StartsFire(x,y)) -> Drops(x,y))", "all x y.((Nate(x) & Cigarette(y) & Fire(y)) -> Dropped(x,y))", "all x.((Nate(x) & Cigarette(y)) -> Dropped(x,y))", "all x y.((Nate(x) & Cigarette(y)) -> Drops(x,y))", "Nate dropped the cigarette that started the fire.", "all x.((Nate(x) & Cigarette(y)) -> Dropped(x,y))", "all x y z.((Nate(x) & Cigarette(y) & Fire(z)) -> Drops(x,y))", "all x.((Nate(x) & Cigarette(x) & Fire(x)) -> Dropped(x))", "all x y.((Nate(x) & Cigarette(y)) -> Drops(x,y))"]}
{"id": "enwn_validation_86", "nl": "Nate led the campus cops to believe that Jeff dropped a cigarette before the fire.", "fol": "", "prediction": ["all x y z.((Nate(x) & CampusPolice(y) & Cigarette(z)) -> DroppedBeforeFire(x,z))", "all x y z.((Nate(x) & CampusPolice(y) & Cigarette(z)) -> DroppedBeforeFire(x,y,z))", "all x y.((CampusPolice(x) & Nate(y)) -> DroppedCigarette(y,x))", "all x y z.((Nate(x) & CampusPolice(y) & Cigarette(z) & DroppedBeforeFire(x,z)) -> LeadsToCitizen(x,y,z))", "all x y z.((Nate(x) & CampusPolice(y) & Cigarette(z) & DroppedBeforeFire(x,z)) -> LeadsToCitizen(x,y))", "all x y z.((Nate(x) & CampusPolice(y) & Cigarette(z)) -> (LeadsToCitizens(x,y) & DroppedBeforeFire(x,z)))", "all x y.((CampusPolice(x) & Nate(y)) -> (LeadsToCitizens(y,x) & DroppedCigarette(y,x)))", "all x y z.((Nate(x) & CampusPolice(y) & Cigarette(z) & DroppedBeforeFire(y,z)) -> LeadsToCitizen(x,y,z))", "all x y.((CampusPolice(x) & Nate(y)) -> DroppedCigaretteBeforeFire(y,x))", "all x y z.((Nate(x) & CampusPolice(y) & Cigarette(z) & DroppedBeforeFire(y,z)) -> LeadsToCitizen(x,y))", "all x y.((CampusPolice(x) & Jeff(y)) -> DroppedCigarette(y,x))", "all x y z.((Nate(x) & CampusPolice(y) & Cigarette(z) & DroppedBeforeFire(x,z)) -> LeadsToCitizens(x,y,z))", "all x y.((Nate(x) & CampusPolice(y) & Jeff(z)) -> DroppedCigaretteBeforeFire(z,y))", "all x y z.((Nate(x) & CampusPolice(y) & Cigarette(z)) -> (LeadsToCitizens(x,y) & Dropped(x,z)))", "all x y z.((Nate(x) & CampusPolice(y) & Cigarette(z) & DroppedBeforeFire(x,z)) -> LeadsToCitizens(x,y))", "all x y z.((Nate(x) & CampusPolice(y) & Cigarette(z) & DroppedBeforeFire(x,z)) -> LeadsToBug(x,y))"]}
{"id": "enwn_validation_87", "nl": "Nate led the campus cops to believe that Jeff started the fire.", "fol": "", "prediction": ["all x y.((CampusPolice(x) & Nate(y)) -> (Leads(y,x) & JeffStartedFire(y)))", "all x y.((CampusPolice(x) & Nate(y)) -> BelievesJeffStartedFire(y,x))", "all x y.((CampusPolice(x) & Nate(y)) -> (LeadsToCreateFire(y,x) & JeffStartedFire(y,x)))", "all x y z.((CampusPolice(x) & Nate(y) & CampusPolice(z)) -> (LeadsToCreateFire(y,z) & JeffStartedFire(y,z)))", "all x y z.((CampusPolice(x) & Nate(y) & CampusPolice(z)) -> (Leads(y,z) & JeffStartedFire(y,z)))", "all x y.((CampusPolice(x) & Nate(y)) -> (Leads(y,x) & JeffStartedFire(y,x)))", "all x y z.((Nate(x) & CampusPolice(y) & Jeff(z)) -> (Leads(x,y) & Believes(x,z)))", "all x y z.((CampusPolice(x) & Nate(y) & CampusPolice(z)) -> (LeadsToCredit(y,z) & JeffStartedFire(y,z)))", "all x y z.((CampusPolice(x) & Nate(y) & CampusPolice(z)) -> (LeadsToBug(y,z) & JeffStartedFire(y,z)))", "all x y z.((CampusPolice(x) & Nate(y) & CampusPolice(z)) -> (LeadsToGive(y,z) & JeffStartedFire(y,z)))", "all x y.((CampusPolice(x) & Nate(y)) -> JeffStartedFire(y,x))", "all x y z.((Nate(x) & CampusPolice(y) & Jeff(z)) -> (Leads(x,y) & Believes(x,z)))", "all x y z.((CampusPolice(x) & Nate(y) & CampusPolice(z)) -> (LeadsToCreateFire(y,z) & JeffStartedFire(y,x)))", "all x y z.((CampusPolice(x) & Nate(y) & CampusPolice(z)) -> (LeadsToCreateFire(y,z) | JeffStartedFire(y,z)))", "all x y.((CampusPolice(x) & Nate(y)) -> (LeadsToCreateFire(y,x) & JeffStartedFire(y)))", "all x y z.((Nate(x) & CampusPolice(y) & Jeff(z)) -> (LeadsToCreateFire(x,y,z) & StartsFire(z,y)))"]}
{"id": "enwn_validation_88", "nl": "Nate shifted the blame for the fire to Jeff.", "fol": "", "prediction": ["all x y z.((Nate(x) & Jeff(y) & Fire(z)) -> ShiftsBloodTo(x,y,z))", "all x y z.((Nate(x) & Jeff(y) & Fire(z)) -> ShiftsBloodTo(x,y,z))", "all x y.((Nate(x) & Jeff(y)) -> ShiftsBlood(x,y))", "all x y.((Nate(x) & Jeff(y)) -> ShiftsBloodTo(x,y))", "all x y.((Nate(x) & Jeff(y)) -> ShiftsBloodForFire(x,y))", "all x y z.((Nate(x) & Jeff(y) & Fire(z)) -> ShiftedBloodTo(x,y,z))", "all x y.((Nate(x) & Jeff(y)) -> ShiftsBloodTo(x,y))", "all x y.((Nate(x) & Jeff(y)) -> ShiftsBlood(x,y))", "all x y.((Nate(x) & Jeff(y)) -> ShiftedBloodTo(x,y))", "all x y z.((Nate(x) & Fire(y) & Jeff(z)) -> ShiftsBloodTo(x,y,z))", "all x y.((Nate(x) & Jeff(y)) -> ShiftsBloodForFire(x,y))", "all x y.((Nate(x) & Jeff(y)) -> ShiftedBloodTo(x,y))", "all x y.((Nate(x) & Jeff(y)) -> ShiftedBlood(x,y))", "all x y.((Nate(x) & Jeff(y)) -> ShiftedBlood(x,y))", "all x y.((Nate(x) & Jeff(y)) -> ShiftedBloodForFire(x,y))", "all x y z.((Nate(x) & Jeff(y) & Fire(z)) -> ShiftsBattleTo(x,y,z))"]}
{"id": "enwn_validation_89", "nl": "It would be wrong for Nate to let someone else take the blame for starting the fire.", "fol": "", "prediction": ["all x y.((Nate(x) & Person(y)) -> TakesBloodForStartingFire(x,y))", "all x y.((Nate(x) & Person(y)) -> TakesBloodForFire(x,y))", "all x y.((Nate(x) & Person(y)) -> TakesBloodForFire(x,y))", "all x y.((Nate(x) & Person(y)) -> TakesBloodForStartingFire(x,y))", "all x.((Nate(x) & LetsOtherTakeBlood(x)) -> Wrong(x))", "all x.((Nate(x) & LetsAnotherTakeBlood(x)) -> Wrong(x))", "all x y.((Nate(x) & Person(y)) -> TakesBlood(x,y))", "all x y.((Nate(x) & Person(y)) -> LetsTakeBlood(x,y))", "all x y.((Nate(x) & Person(y) & StartsFire(x,y)) -> Wrong(x))", "all x.((Nate(x) & LetsOtherTakeBlood(x)) -> -Wrong(x))", "all x y.((Nate(x) & Person(y) & StartsFire(x,y)) -> Wrong(x))", "all x.((Nate(x) & LetsAnotherTakeBlood(x)) -> -Wrong(x))", "all x y.((Nate(x) & Person(y) & StartsFire(x,y)) -> Wrong(x,y))", "all x y.((Nate(x) & Person(y) & StartsFire(x,y)) -> Wrong(x,y))", "all x.((Nate(x) & SomeoneOther(x)) -> Wrong(x))", "all x y.((Nate(x) & Person(y) & StartsFire(x,y)) -> IsNature(x,y))"]}
{"id": "enwn_validation_90", "nl": "Nate should not have shifted the blame for the fire to Jeff.", "fol": "", "prediction": ["all x y.((Nate(x) & Jeff(y)) -> -ShiftedBloodTo(x,y))", "all x y.((Nate(x) & Jeff(y)) -> -ShiftedBloodTo(x,y))", "all x y z.((Nate(x) & Jeff(y) & Fire(z)) -> -ShiftedBloodTo(x,y,z))", "all x y.((Nate(x) & Jeff(y)) -> -ShiftsBloodTo(x,y))", "all x.((Nate(x) & Jeff(y)) -> -ShiftedBloodTo(x,y))", "all x y.((Nate(x) & Jeff(y)) -> -ShiftsBloodTo(x,y))", "all x y.((Nate(x) & Jeff(y)) -> -ShiftedBlood(x,y))", "all x.((Nate(x) & Jeff(y)) -> -ShiftedBloodTo(x,y))", "all x y z.((Nate(x) & Fire(y) & Jeff(z)) -> -ShiftedBloodTo(x,y,z))", "all x y.((Nate(x) & Jeff(y)) -> -ShiftedBlood(x,y))", "all x y.((Nate(x) & Jeff(y)) -> -ShiftedBattleTo(x,y))", "all x.((Nate(x) & Jeff(x)) -> -ShiftedBloodTo(x,y))", "all x y z.((Nate(x) & Jeff(y) & Fire(z)) -> -ShiftedBloodTo(x,z))", "all x.((Nate(x) & Jeff(x)) -> -ShiftedBloodTo(x,Fire))", "all x.(Nate(x) -> -ShiftedBloodToJeff(x))", "all x.((Nate(x) & Jeff(x)) -> -ShiftedBloodTo(x,y))"]}
{"id": "enwn_validation_91", "nl": "Taking something that doesn't belong to you is wrong.", "fol": "", "prediction": ["all x.((Takes(x,y) & -BelongsTo(y)) -> Wrong(x))", "all x.((Takes(x,y) & -BelongsTo(x,y)) -> Wrong(x))", "all x.((Takes(x,y) & -BelongsTo(y)) -> IsWrong(x))", "all x.((Takes(x,y) & -BelongsTo(x,y)) -> IsWrong(x))", "all x.((Takes(x) & -BelongsTo(x)) -> Wrong(x))", "all x.((Takes(x,y) & -BelongsTo(x)) -> Wrong(x))", "all x.((Takes(x,y) & -BelongsTo(x)) -> IsWrong(x))", "all x.((Takes(x) & -BelongsTo(x)) -> IsWrong(x))", "all x.((Takes(x,y) & -BelongsTo(x,y)) -> Worst(x))", "all x.((Takes(x,y) & -BelongsTo(y)) -> Worst(x))", "all x.((TakesWhat(x) & -BelongsTo(x)) -> Wrong(x))", "all x.((Takes(x) & -BelongsTo(x)) -> Worst(x))", "all x.((Takes(x,y) & -BelongsTo(y,x)) -> Wrong(x))", "all x.((Takes(x,y) & -BelongsTo(x)) -> Worst(x))", "all x.((Taking(x) & -BelongsTo(x)) -> Wrong(x))", "all x y.((Takes(x,y) & -BelongsTo(x,y)) -> Wrong(x))"]}
{"id": "enwn_validation_92", "nl": "The TV belonged to the owners of the AirBNB Mike was staying at.", "fol": "", "prediction": ["all x y.((TV(x) & AirBNB(y)) -> BelongedToOwners(x,y))", "all x y z.((TV(x) & AirBNB(y) & AirBNB(z)) -> BelongedToOwners(x,y,z))", "all x y z.((TV(x) & AirBNB(y) & Mike(z)) -> BelongedToOwners(x,y,z))", "all x y.((TV(x) & AirBNB(y) & Owner(x,y)) -> BelongedTo(x,y))", "all x y.((TV(x) & AirBNB(y) MikeStayedAt(x,y)) -> BelongedToOwners(x,y))", "all x y z.((Television(x) & AirBNB(y) & AirBNB(z)) -> BelongedToOwners(x,y,z))", "all x y.((TV(x) & AirBNB(y) & MikeStayingAt(x,y)) -> BelongedToOwners(x,y))", "all x y.((Television(x) & AirBNB(y)) -> BelongedToOwners(x,y))", "all x.(Television(x) -> BelongedToAirBNB(x))", "all x y.((TV(x) & AirBNB(y) & StayedAt(x,y)) -> BelongedToOwners(x,y))", "all x y.((TV(x) & AirBNB(y) & MikeStayingAt(x,y)) -> BelongsToOwners(x,y))", "all x y z.((TV(x) & AirBNB(y) & AirBNB(z)) -> BelongedToOwners(x,y))", "all x y.((TV(x) & AirBNB(y) MikeStayedAt(x,y)) -> BelongsToOwners(x,y))", "all x y.((TV(x) & AirBNB(y) MikeStayingAt(x,y)) -> BelongedToOwners(x,y))", "all x y.((Television(x) & AirBNB(y) & MikeStayingAt(x,y)) -> BelongedToOwners(x,y))", "all x y.((TV(x) & AirBNB(y) & Mike(y)) -> BelongedToOwners(x,y))"]}
{"id": "enwn_validation_93", "nl": "You shouldn't help someone do something wrong.", "fol": "", "prediction": ["all x y.((Helps(x,y) & Person(y)) -> -Helps(x,y))", "all x y.((Help(x,y) & Person(y)) -> -Help(x,y))", "all x y.((Helps(x,y) & Person(y)) -> -HelpsDoWrong(x,y))", "all x.((Helps(x,y) & Person(y)) -> -Helps(x,y))", "all x y.((Helps(x,y) & Person(y)) -> -Help(x,y))", "all x.((Helps(x) & Person(x)) -> -HelpsDoWrong(x))", "all x.((HelpsPerson(x) & -HelpsDoWrong(x)) -> -HelpsPerson(x))", "all x y.((Help(x,y) & Person(y)) -> -HelpDo(x,y))", "all x.((Helps(x,y) & Person(y)) -> -HelpsDoWrong(x,y))", "all x.((Helps(x) & Person(x)) -> -Helps(x,y))", "all x y.((Helps(x,y) & Person(y)) -> -HelpsDo(x,y))", "all x y.((Help(x,y) & Person(y)) -> -HelpsDoWrong(x,y))", "all x y.((Helps(x,y) & Person(y)) -> -HelpDo(x,y))", "all x.((HelpsPerson(x) & DoneWrong(x)) -> -HelpsPerson(x))", "all x y.((Helping(x,y) & Person(y)) -> -Helps(x,y))", "all x y.((Help(x) & Person(y)) -> -Help(x,y))"]}
{"id": "enwn_validation_94", "nl": "Tim helped Mike carry the TV out to his car.", "fol": "", "prediction": ["all x y z.((Tim(x) & TV(y) & Car(z)) -> CarriedOutTo(x,y,z))", "all x y z.((Tim(x) & TV(y) & Car(z)) -> HelpedCarryOutTo(x,y,z))", "all x y.((Tim(x) & Mike(y)) -> HelpedCarryTVOutToCar(x,y))", "all x y z.((Tim(x) & TV(y) & Car(z)) -> HelpedCarryTo(x,y,z))", "all x y.((Tim(x) & Mike(y)) -> CarriedTVOutToCar(x,y))", "all x y z.((Tim(x) & TV(y) & Car(z)) -> HelpedCarryOut(x,y,z))", "all x y z.((Tim(x) & TV(y) & Car(z)) -> HelpedCarry(x,y,z))", "all x y z.((Tim(x) & TV(y) & Car(z)) -> CarriedOut(x,y,z))", "all x y z.((Tim(x) & TV(y) & Car(z)) -> CarriesOutTo(x,y,z))", "all x y.((Tim(x) & Mike(y)) -> HelpedCarryTVOut(x,y))", "all x y.((Tim(x) & Mike(y)) -> CarriedTVOut(x,y))", "all x y.((Tim(x) & Mike(y)) -> HelpedCarryTVToCar(x,y))", "all x y.((Tim(x) & Mike(y)) -> CarriedOutToCar(x,y))", "all x y.((Tim(x) & Mike(y)) -> HelpedCarryTV(x,y))", "all x y z.((Tim(x) & TV(y) & Car(z)) -> CarriedTo(x,y,z))", "all x y z.((Tim(x) & Mike(y) & TV(z)) -> CarriedOutToCar(x,y,z))"]}
{"id": "enwn_validation_95", "nl": "It would be wrong for Mike to take the TV.", "fol": "", "prediction": ["all x.((Mike(x) & TakesTV(x)) -> Irresponsible(x))", "all x.((Mike(x) & TakesTV(x)) -> Wrong(x))", "all x.((Mike(x) & TakesTV(x)) -> -Wrong(x))", "All x.((Mike(x) & TakesTV(x)) -> Irresponsible(x))", "all x.((Mike(x) & TakeTV(x)) -> Irresponsible(x))", "all x.((Mike(x) & TakesTV(x)) -> False(x))", "all x.((Mike(x) & TakesTV(x)) -> Worst(x))", "all x.((Mike(x) & TakesTelevision(x)) -> Irresponsible(x))", "all x.((Mike(x) & TakesTV(x)) -> Unright(x))", "all x.((Mike(x) & TakesTV(x)) -> IsWrong(x))", "all x.((Mike(x) & TakesTV(x)) -> Unfair(x))", "all x.((Mike(x) & TakeTV(x)) -> Wrong(x))", "all x y.((Mike(x) & TV(y)) -> Wrong(x,y))", "all x.((Mike(x) & TakesTV(x)) -> Idiot(x))", "all x.((Mike(x) & TakesTV(x)) -> IsNecessary(x))", "all x.(Mike(x) -> TakesTV(x))"]}
{"id": "enwn_validation_96", "nl": "It would be wrong to help Mike take the TV.", "fol": "", "prediction": ["all x.((HelpsTakeTV(x) & Mike(x)) -> Irresponsible(x))", "all x.((HelpsMikeTakeTV(x)) -> Irresponsible(x))", "all x.((HelpsMikeTakeTV(x) & -HelpsMikeTakeTV(x)) -> Irresponsible(x))", "all x.((HelpMikeTakeTV(x)) -> Irresponsible(x))", "all x.((Mike(x) & TakeTV(x)) -> Irresponsible(x))", "all x.((Mike(x) & TakesTV(x)) -> Irresponsible(x))", "all x.((HelpTakeTV(x) & Mike(x)) -> Irresponsible(x))", "all x.((HelpsTakeTV(x) & Mike(x)) -> Wrong(x))", "all x.((HelpsMikeTakeTV(x) & -HelpsMikeTakeTV(x)) -> -HelpsMikeTakeTV(x))", "all x y.((Mike(x) & TV(y)) -> WrongToHelpTake(x,y))", "all x.((Mike(x) & TakeTV(x)) -> Wrong(x))", "all x.((HelpsMikeTakeTV(x)) -> Wrong(x))", "all x.((HelpsMikeTakeTV(x) & Wrong(x)) -> -HelpsMikeTakeTV(x))", "all x.((HelpsMikeTakeTV(x) & -HelpsMikeTakeTV(x)) -> False(x))", "all x.((HelpsMikeTakeTV(x) & -HelpsMikeTakeTV(x)) -> Wrong(x))", "all x.((HelpsTakeTV(x) & Mike(x)) -> -Wrong(x))"]}
{"id": "enwn_validation_97", "nl": "Tim shouldn't have helped Mike take the TV.", "fol": "", "prediction": ["all x.((Tim(x) & Mike(y)) -> -HelpedTakeTV(x,y))", "all x.((Tim(x) & Mike(y)) -> -HasHelpedTakeTV(x,y))", "all x y.((Tim(x) & Mike(y)) -> -HasHelpedTakeTV(x,y))", "all x y.((Tim(x) & Mike(y)) -> -HelpedTakeTV(x,y))", "all x.((Tim(x) & Mike(y)) -> -HelpedTakeTelevision(x,y))", "all x.((Tim(x) & Mike(x)) -> -HelpedTakeTV(x,Tim))", "all x.((Tim(x) & Mike(x)) -> -HelpedTakeTV(x))", "all x.((Tim(x) & Mike(x)) -> -HasHelpedTakeTV(x))", "all x.((Tim(x) & Mike(x)) -> -HasHelpedTakeTV(x,Tim))", "all x.((Tim(x) & Mike(y)) -> -HasHelpedTakeTelevision(x,y))", "all x y.((Tim(x) & Mike(y)) -> -HelpedTakeTelevision(x,y))", "all x.((Tim(x) & Mike(x)) -> -HelpedTakeTelevision(x,Tim))", "all x.((Tim(x) & Mike(y)) -> -HadHelpedTakeTV(x,y))", "all x.((Tim(x) & Mike(m)) -> -HelpedTakeTV(x,m))", "all x.((Tim(x) & Mike(m)) -> -HasHelpedTakeTV(x,m))", "all x.((Tim(x) & Mike(x)) -> -HasHelpedTakeTelevision(x,Tim))"]}
{"id": "enwn_validation_98", "nl": "The right thing to do is whatever results in the least harm.", "fol": "", "prediction": ["all x.((RightThing(x) & ResultsInLeastHarm(x)) -> RightThing(x))", "all x.((RightThing(x) & ResultInLeastHarm(x)) -> RightThing(x))", "all x.((RightThing(x) & ResultLeastHarm(x)) -> RightThing(x))", "all x.((CausesLeastHarm(x) & RightThing(x)) -> RightThing(x))", "all x.((RightThingToDo(x) & ResultsInLeastHarm(x)) -> RightThing(x))", "all x.((RightThingToDo(x) & ResultInLeastHarm(x)) -> RightThing(x))", "all x.((RightThing(x) & LowHarm(x)) -> RightThing(x))", "all x.((WhateverResultsInLeastHarm(x)) -> RightThingToDo(x))", "all x.((RightThing(x) & LessHarm(x)) -> RightThing(x))", "all x.(RightThing(x) -> (ResultsInLeastHarm(x)))", "all x.(RightThing(x) -> (ResultsInLeastHarm(x)))", "all x.((WhateverResultsInLeastHarm(x)) -> RightThing(x))", "all x.((RightThing(x) & ResultsInLeastHarm(x)) -> RightThingToDo(x))", "all x.((RightThing(x) & ResultsInLeastHarm(x)) -> CorrectThing(x))", "all x.((RightThing(x) & ResultsInLeastHarm(x)) -> RightThan(x))", "all x.((LeastHarm(x) & RightThing(x)) -> RightThing(x))"]}
{"id": "enwn_validation_99", "nl": "If you don't push the old lady, the truck will hit her.", "fol": "", "prediction": ["all x y.((Truck(x) & OldLady(y) & -Push(x,y)) -> Hits(x,y))", "all x.((Truck(x) & -PushOldLady(x)) -> HitsShe(x))", "all x.((Truck(x) & -PushOldLady(x)) -> Hits(x,Lady))", "all x y.((Truck(x) & OldLady(y) & -Push(x,y)) -> Hit(x,y))", "all x.((Truck(x) & -PushOldLady(x)) -> HitsHer(x))", "all x.((PushOldLady(x) & -PushOldLady(x)) -> HitTruck(x))", "all x.((DoesNotPushOldLady(x) & HitsOldLady(x)) -> Truck(x))", "all x.((Truck(x) & -PushOldLady(x)) -> Hits(x,lady))", "all x.((Truck(x) & -PutsOldLady(x)) -> HitsShe(x))", "all x.((Truck(x) & -PushOldLady(x)) -> HitsLady(x))", "all x.((Truck(x) & -PushOldLady(x)) -> Hits(x,oldLady))", "all x.((PutsOldLady(x) & -PutsOldLady(x)) -> HitsShe(x))", "all x.((PutsOldLady(x) & -PutsOldLady(x)) -> Hits(x,Lady))", "all x.((PutsOldLady(x) & -PutsOldLady(x)) -> Hits(x))", "all x.((PutsOldLady(x) & -PutsOldLady(x)) -> Hits(x,lady))", "all x.((Truck(x) & -PushOldLady(x)) -> HitShe(x))"]}
{"id": "enwn_validation_100", "nl": "Getting hit by a vehicle is likely to cause serious injury or death.", "fol": "", "prediction": ["all x.((Vehicle(x) & Hit(x)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x.((Vehicle(x) & HitBy(x)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x.((Vehicle(x) & Hit(x)) -> (SeriousInjury(x) | Death(x)))", "all x y.((Vehicle(x) & Vehicle(y)) -> (CausesSeriousInjury(x,y) | CausesDeath(x,y)))", "all x y.((Vehicle(x) & HitBy(x,y)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x y.((Vehicle(x) & HitBy(x,y)) -> (CausesSeriousInjury(y) | CausesDeath(y)))", "all x.((Vehicle(x) & HitBy(x)) -> (SeriousInjury(x) | Death(x)))", "all x.(HitByVehicle(x) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x y.((Vehicle(x) & Hit(x,y)) -> (CausesSeriousInjury(y) | CausesDeath(y)))", "all x y.((Vehicle(x) & Hit(x,y)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x.((Vehicle(x) & HitBy(x,y)) -> (CausesSeriousInjury(y) | CausesDeath(y)))", "all x.((Vehicle(x) & HitBy(x,y)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x y.((Vehicle(x) & Vehicle(y) & Hit(x,y)) -> (CausesSeriousInjury(x) | CausesDeath(x)))", "all x.((Vehicle(x) & Hit(x)) -> (CauseSeriousInjury(x) | CauseDeath(x)))", "all x.((Vehicle(x) & HitBy(x)) -> (CauseSeriousInjury(x) | CauseDeath(x)))", "all x y.((Vehicle(x) & HitBy(x,y)) -> (SeriousInjury(y) | Death(y)))"]}
{"id": "enwn_validation_101", "nl": "Pushing the old lady will likely give her minor injuries at worst.", "fol": "", "prediction": ["all x y.((OldLady(x) & Pushing(x,y)) -> GivesMinimalInjuries(x,y))", "all x y.((OldLady(x) & Pushing(x,y)) -> GivesMinorInjuries(x,y))", "all x.(PushingOldLady(x) -> GivesMinimalInjuries(x))", "all x.(PushingOldLady(x) -> GivesMinorInjuries(x))", "all x.((OldLady(x) & Pushing(x)) -> GivesMinimalInjuries(x))", "all x y.((OldLady(x) & Pushes(x,y)) -> GivesMinimalInjuries(x,y))", "all x.(PushingOldLady(x) -> GivesMinimalInjuriesAtWorst(x))", "all x.(PushingOldLady(x) -> GivesMinorInjuriesAtWorst(x))", "all x.(PushingOldLady(x) -> GivesMinimalInjuries(x))", "all x y.((OldLady(x) & Pushing(x,y)) -> GivesMinimalInjuries(y))", "all x y.((OldLady(x) & Pushing(x,y)) -> MayGiveMinorInjuries(x,y))", "all x y.((OldLady(x) & Pushes(x,y)) -> GivesMinorInjuries(x,y))", "all x y.((OldLady(x) & Pushing(x,y)) -> GivesMinimalInjuries(y,x))", "all x y.((OldLady(x) & Pushing(x)) -> GivesMinimalInjuries(x,y))", "all x.(PushingOldLady(x) -> (LimitedInjuries(x) & Worst(x)))", "all x.((OldLady(x) & Pushing(x)) -> GivesMinorInjuries(x))"]}
{"id": "enwn_validation_102", "nl": "If you don't push the old lady, she will suffer a serious injury or die.", "fol": "", "prediction": ["all x.((OldLady(x) & -Push(x)) -> (SufferSeriousInjury(x) | Die(x)))", "all x.((OldLady(x) & -Push(x)) -> (SuffersSeriousInjury(x) | Dies(x)))", "all x.((OldLady(x) & -Push(x)) -> (SevereInjury(x) | Die(x)))", "all x.((OldLady(x) & -Push(x)) -> (SufferSeriousInjuries(x) | Die(x)))", "all x.((OldLady(x) & -Push(x)) -> (SuffersSeriousInjuries(x) | Dies(x)))", "all x.((OldLady(x) & -Push(x)) -> (SufferedSeriousInjury(x) | Die(x)))", "all x.((OldLady(x) & -Puts(x)) -> (SuffersSeriousInjury(x) | Dies(x)))", "all x.((OldLady(x) & -Puts(x)) -> (SufferSeriousInjury(x) | Die(x)))", "all x.((OldLady(x) & -Push(x)) -> (SevereInjuries(x) | Die(x)))", "all x.((PutsOldLady(x) & -PutsOldLady(x)) -> (SevereInjury(x) | Die(x)))", "all x.((OldLady(x) & -Push(x)) -> (SuffersSeriousInjury(x) | Dies(x)))", "all x.((OldLady(x) & -Push(x)) -> (SuffersSeriousInjury(x) | Die(x)))", "all x.((OldLady(x) & -Push(x)) -> (SupportSeriousInjury(x) | Die(x)))", "all x.((OldLady(x) & -Puts(x)) -> (SevereInjury(x) | Die(x)))", "all x y.((OldLady(x) & -Push(x,y)) -> (SuffersSeriousInjury(x) | Dies(x)))", "all x y.((OldLady(x) & -Push(x,y)) -> (SufferSeriousInjury(x) | Die(x)))"]}
{"id": "enwn_validation_103", "nl": "If you push the old lady, she will suffer less harm than if you don't.", "fol": "", "prediction": ["all x y.((PutsOldLady(x) & -PutsOldLady(y)) -> LessHarm(x,y))", "all x y.((PushOldLady(x) & PushOldLady(y)) -> LessHarm(x,y))", "all x y.((OldLady(x) & Push(x,y)) -> LessHarm(x,y))", "all x y.((PutsOldLady(x) & -PutsLady(y)) -> LessHarm(x,y))", "all x.((PutsOldLady(x) & -PutsOldLady(x)) -> LessHarm(x))", "all x y.((PutsOldLady(x) & -PutsOldLady(y)) -> SheSuffersLessHarm(x,y))", "all x y.((PutsOldLady(x) & PushesOldLady(y)) -> LessHarm(x,y))", "all x y.((OldLady(x) & Push(x,y)) -> LessHarm(y,x))", "all x y.((PutsOldLady(x) & -PutsOldLady(y)) -> LessHarm(y))", "all x y.((PutsOldLady(x) & -PutsOldLady(y)) -> LessHarm(y,x))", "all x y.((OldLady(x) & Push(x,y)) -> LessHarm(y))", "all x y.((PutsOldLady(x) & -PutsOldLady(x)) -> LessHarm(y))", "all x y.((PutOldLady(x) & PushOldLady(y)) -> LessHarm(x,y))", "all x y.((PutsOldLady(x) & Pushes(x,y)) -> LessHarm(y))", "all x.((PutsOldLady(x) & -PutsOldLady(x)) -> LessHarm(x,y))", "all x y.((PushOldLady(x) & PushOldLady(y)) -> LessHarm(y,x))"]}
{"id": "enwn_validation_104", "nl": "You should push the old lady.", "fol": "", "prediction": ["all x y.((OldLady(x) & Push(x,y)) -> Push(x,y))", "all x.((OldLady(x) & Push(x)) -> Push(x))", "all x y.((OldLady(x) & Push(y,x)) -> Push(x,y))", "all x y.((OldLady(x) & Push(y,x)) -> ShouldPush(x,y))", "all x y.((OldLady(x) & Push(x,y)) -> ShouldPush(x,y))", "all x y.((OldLady(x) & Push(y)) -> Push(x,y))", "all x y.((OldLady(x) & Push(y)) -> ShouldPush(x,y))", "all x y.((OldLady(x) & Push(y,x)) -> Push(y,x))", "all x.(PushOldLady(x) -> PushOldLady(x))", "all x.((OldLady(x) & Push(x)) -> ShouldPush(x))", "all x.(PutOldLady(x) -> PushOldLady(x))", "all x.((OldLady(x) & Push(x,y)) -> Push(x,y))", "all x.(PutOldLady(x) -> Push(x))", "all x.(Push(x) -> OldLady(x))", "all x.((OldLady(x) & Push(x,y)) -> ShouldPush(x,y))", "all x y.((OldLady(x) & Push(x,y)) -> Push(y,x))"]}
{"id": "enwn_validation_105", "nl": "Emily told Cassandra to copy her homework so that Cassandra wouldn't get in trouble.", "fol": "", "prediction": ["all x y.((Emily(x) & Cassandra(y)) -> CopiesHomework(x,y))", "all x y.((Emily(x) & Cassandra(y)) -> (CopiesHomework(x,y) & -GetsInTraffic(y)))", "all x y.((Emily(x) & Cassandra(y)) -> (ToldCassandra(x,y) & CopiesHomework(x,y)))", "all x y.((Emily(x) & Cassandra(y)) -> (CopiesHomework(x,y) & -GetsInTrouble(y)))", "all x y.((Emily(x) & Cassandra(y)) -> (CopiesHomework(x,y) & Cassandra(y)))", "all x y.((Emily(x) & Cassandra(y)) -> (CopyHomework(x,y) & Cassandra(y)))", "all x y z.((Emily(x) & Cassandra(y) & Homework(z)) -> (Copies(x,y,z) & -GetsInTraffic(y,z)))", "all x y.((Emily(x) & Cassandra(y)) -> CopyHomework(x,y))", "all x y z.((Emily(x) & Cassandra(y) & Homework(z)) -> (Copies(x,y,z) & -GetsInTrouble(y,z)))", "all x y z.((Emily(x) & Cassandra(y) & Homework(z)) -> Copy(x,y,z))", "all x y.((Emily(x) & Cassandra(y)) -> (CopiesHomework(x,y) & -GetsInTraffic(y,x)))", "all x y z.((Emily(x) & Cassandra(y) & Homework(z)) -> (Copies(x,y,z) & -GetsInTrouble(y,x)))", "all x y z.((Emily(x) & Cassandra(y) & Homework(z)) -> (Copies(x,y,z) & -GetsInTraffic(y)))", "all x y z.((Emily(x) & Cassandra(y) & Homework(z)) -> (Copies(x,y,z) & -GetsInTrouble(y)))", "all x y z.((Emily(x) & Cassandra(y) & Homework(z)) -> (Copies(x,y) & -GetsInTraffic(y,z)))", "all x y z.((Emily(x) & Cassandra(y) & Homework(z)) -> (Copies(x,y,z) & -GetsInTraffic(y,x)))"]}
{"id": "enwn_validation_106", "nl": "Copying homework is cheating.", "fol": "", "prediction": ["all x.(CopyingHomework(x) -> Cheating(x))", "all x.(CopiesHomework(x) -> Cheating(x))", "all x.(CopyHomework(x) -> Cheating(x))", "all x.((Homework(x) & Copying(x)) -> Cheating(x))", "all x y.((Homework(x) & Copying(x,y)) -> Cheating(x))", "all x y.((Homework(x) & Homework(y)) -> Cheating(x))", "all x.((CopiesHomework(x) & Cheating(x)) -> Cheating(x))", "all x.((Homework(x) & Copy(x)) -> Cheating(x))", "all x.((CopyingHomework(x) & Cheating(x)) -> Cheating(x))", "all x y.((Homework(x) & Copy(y)) -> Cheating(x))", "all x.((CopyHomework(x) & Cheating(x)) -> Cheating(x))", "all x y.((Homework(x) & Homework(y)) -> Cheating(x,y))", "all x y.((Homework(x) & Copying(y)) -> Cheating(x))", "all x.(CopiesHomework(x) -> Cheats(x))", "all x y.((Homework(x) & Copying(x,y)) -> Cheating(y))", "all x.(CopyingHomework(x) -> Cheats(x))"]}
{"id": "enwn_validation_107", "nl": "Cheating is wrong.", "fol": "", "prediction": ["all x.(Cheating(x) -> Wrong(x))", "all x.(Cheating(x) -> Irresponsible(x))", "all x.(Cheat(x) -> Wrong(x))", "all x.(Cheat(x) -> Irresponsible(x))", "all x.(Cheating(x) -> Worst(x))", "all x.(Cheating(x) -> Irregular(x))", "all x.(Cheat(x) -> Worst(x))", "all x.(Cheat(x) -> Irregular(x))", "all x.(Cheats(x) -> Wrong(x))", "all x.(Cheating(x) -> Irreversible(x))", "all x.((Cheating(x) & Wrong(x)) -> Cheating(x))", "all x.(Cheating(x) -> False(x))", "exists x.(Cheating(x) & Wrong(x))", "all x.(Cheat(x) -> Irreversible(x))", "All x.(Cheating(x) -> Wrong(x))", "all x.(Cheating(x) -> Wrong(x))"]}
{"id": "enwn_validation_108", "nl": "Telling someone to do something is influencing them to do it.", "fol": "", "prediction": ["all x y.((TellsToDo(x,y) & Person(y)) -> InfluencesToDo(x,y))", "all x y.((Tells(x,y) & Person(y)) -> InfluencesToDo(x,y))", "all x y.((TellsTo(x,y) & Person(y)) -> InfluencesToDo(x,y))", "all x y.((TellsToDo(x,y) & Person(y)) -> InfluencesToDo(y,x))", "all x y.((Tells(x,y) & Person(y)) -> InfluencesDoing(x,y))", "all x y.((Tells(x,y) & Person(y)) -> Influences(x,y))", "all x y.((Person(x) & TellsToDo(x,y)) -> InfluencesToDo(x,y))", "all x y.((TellsTo(x,y) & Person(y)) -> InfluencesToDo(y,x))", "all x.((TellsToDo(x,y) & Person(y)) -> InfluencesToDo(x,y))", "all x y.((TellsToDo(x,y) & Person(y)) -> InfluencesDoing(x,y))", "all x y.((Tells(x,y) & Person(y)) -> InfluencesToDo(y,x))", "all x y.((TellsTo(x,y) & Person(y)) -> InfluencesDoing(x,y))", "all x y.((TellsToDo(x) & Person(y)) -> InfluencesToDo(x,y))", "all x y.((TellsTo(x,y) & Person(y)) -> Influences(x,y))", "all x.((TellsToDo(x) & InfluencesToDo(x)) -> TellsToDo(x))", "all x.(TellsToDo(x,y) -> InfluencesToDo(x,y))"]}
{"id": "enwn_validation_109", "nl": "You shouldn't influence someone to do something wrong.", "fol": "", "prediction": ["all x y.((Influence(x,y) & Person(y)) -> -Influence(x,y))", "all x y.((Person(x) & Person(y)) -> -InfluenceToDoWrong(x,y))", "all x y.((Person(x) & Person(y)) -> -Influence(x,y))", "all x y.((Person(x) & DoingWrong(y)) -> -Influence(x,y))", "all x y.((Person(x) & Person(y)) -> -Influences(x,y))", "all x y.((Person(x) & Person(y)) -> -InfluencesToDoWrong(x,y))", "all x y.((Influence(x) & Person(y)) -> -Influence(x,y))", "all x y.((Impact(x,y) & Person(y)) -> -Impact(x,y))", "all x y.((Influence(x,y) & Person(y)) -> -InfluenceToDoWrong(x,y))", "all x.((Influence(x) & DoingWrong(x)) -> -Influence(x))", "all x y.((Influence(x,y) & Person(y)) -> -Influences(x,y))", "all x y.(((Person(x) & Person(y)) -> -Influence(x,y))", "all x y.((Influence(x,y) & Person(y)) -> -ImpactsToDoWrong(x,y))", "all x y.((Impact(x,y) & Person(y)) -> -Impacts(x,y))", "all x.((Person(x) & -Influence(x)) -> DoseWrong(x))", "all x y.((Person(x) & Person(y) & Influences(x,y)) -> -Influences(x,y))"]}
{"id": "enwn_validation_110", "nl": "Copying homework is wrong.", "fol": "", "prediction": ["all x.(CopiesHomework(x) -> Wrong(x))", "all x.(CopyingHomework(x) -> Wrong(x))", "all x.(CopyHomework(x) -> Wrong(x))", "all x.(CopiesHomework(x) -> Worst(x))", "all x.((Homework(x) & Copying(x)) -> Wrong(x))", "all x.(CopyHomework(x) -> Worst(x))", "all x.(CopyingHomework(x) -> Worst(x))", "all x.(CopyHomework(x) -> IsWrong(x))", "all x.(CopiesHomework(x) -> IsWrong(x))", "all x.(CopyingHomework(x) -> IsWrong(x))", "all x y.((Homework(x) & Copying(x,y)) -> Wrong(x))", "all x.((Homework(x) & Copying(x)) -> Worst(x))", "all x.(CopiesHomework(x) -> Irresponsible(x))", "all x y.((Homework(x) & Homework(y)) -> Wrong(x))", "all x.(CopyingHomework(x) -> Wrong(x))", "all x y.((Homework(x) & Copying(y)) -> Wrong(x))"]}
{"id": "enwn_validation_111", "nl": "You shouldn't tell someone to do something wrong.", "fol": "", "prediction": ["all x.((Person(x) & -TellsToDoWrong(x)) -> -TellsToDoWrong(x))", "all x y.((Person(x) & Person(y)) -> -TellsToDoWrong(x,y))", "all x.((Person(x) & -SellsWrong(x)) -> -SellsWrong(x))", "all x y.((Person(x) & Person(y)) -> -SellsToDoWrong(x,y))", "all x y.((Person(x) & Person(y)) -> -TellToDoWrong(x,y))", "all x y.((Person(x) & Person(y)) -> -Tells(x,y))", "all x y.((Person(x) & Person(y)) -> -TellsToDo(x,y))", "all x y.((Person(x) & Person(y)) -> -Sells(x,y))", "all x.((Person(x) & -TellsToDoWrong(x)) -> -TellsToDoWrong(x))", "all x y.((Person(x) & DoingWrong(y)) -> -Tells(x,y))", "all x y.((Person(x) & DoingWrong(y)) -> -Sells(x,y))", "all x.((Person(x) & -TellsToDoWrong(x)) -> -SellsToDoWrong(x))", "all x y.((Person(x) & DoingWrong(y)) -> -Sell(x,y))", "all x y.((Person(x) & Person(y)) -> -SellsToDo(x,y))", "all x y.((Person(x) & Person(y)) -> -TellToDo(x,y))", "all x y.((Person(x) & Person(y)) -> -ShouldSell(x,y))"]}
{"id": "enwn_validation_112", "nl": "You shouldn't tell someone to copy homework.", "fol": "", "prediction": ["all x.((Person(x) & -TellsToCopyHomework(x)) -> -TellsToCopyHomework(x))", "all x.((Person(x) & -CopiesHomework(x)) -> -TellsToCopyHomework(x))", "all x.((Person(x) & -CopiesHomework(x)) -> -SellsToCopyHomework(x))", "all x.((Person(x) & -CanCopyHomework(x)) -> -CanCopyHomework(x))", "all x.((Person(x) & -ShouldCopyHomework(x)) -> -ShouldCopyHomework(x))", "all x y.((Person(x) & Homework(y)) -> -CanCopy(x,y))", "all x y.((Person(x) & Homework(y)) -> -TellsToCopy(x,y))", "all x y.((Person(x) & Homework(y)) -> -SellsToCopy(x,y))", "all x.((Person(x) & -CopiesHomework(x)) -> -CopiesHomework(x))", "all x.((Person(x) & -CopiesHomework(x)) -> -CanCopyHomework(x))", "all x.((Person(x) & -CopyHomework(x)) -> -TellsToCopyHomework(x))", "all x.((Person(x) & -CopyHomework(x)) -> -SellsToCopyHomework(x))", "all x.((Person(x) & -CopiesHomework(x)) -> -Tells(x,y))", "all x.((Person(x) & -CopiesHomework(x)) -> -Sells(x,y))", "all x.((Person(x) & -CopyHomework(x)) -> -Sell(x,y))", "all x.((Person(x) & -CopyHomework(x)) -> -Sells(x,y))"]}
{"id": "enwn_validation_113", "nl": "Emily should not have told Cassandra to copy her homework.", "fol": "", "prediction": ["all x y.((Emily(x) & Cassandra(y)) -> -CopiesHomework(x,y))", "all x.((Emily(x) & Cassandra(x)) -> -CopiesHomework(x))", "all x.((Emily(x) & Cassandra(y)) -> -CopiesHomework(x,y))", "all x y.((Emily(x) & Cassandra(y)) -> -CopyHomework(x,y))", "all x.((Emily(x) & Cassandra(x)) -> -CopyHomework(x))", "all x.((Emily(x) & Cassandra(x)) -> -CopiesHomework(x,Emily))", "all x y z.((Emily(x) & Cassandra(y) & Homework(z)) -> -Copies(x,y,z))", "all x.((Emily(x) & Cassandra(x)) -> -CopiesHomework(x,Cassandra))", "all x y.((Emily(x) & Cassandra(y)) -> -ShouldCopyHomework(x,y))", "all x y.((Cassandra(x) & Emily(y)) -> -CopiesHomework(y,x))", "all x.((Emily(x) & Cassandra(y)) -> -CopyHomework(x,y))", "all x.((Emily(x) & Cassandra(x)) -> -CopiesHomework(x,emily))", "all x y z.((Emily(x) & Cassandra(y) & Homework(z)) -> -ShouldCopy(x,y,z))", "all x y.((Emily(x) & Cassandra(y) & -CopiesHomework(x,y)) -> -CopiesHomework(x,y))", "all x.((Emily(x) & Cassandra(x)) -> -CopiesHomework(x,Emily,Cassandra))", "all x y z.((Emily(x) & Cassandra(y) & Homework(z)) -> -Copy(x,y,z))"]}
{"id": "enwn_validation_114", "nl": "Making out with someone is an intimate act.", "fol": "", "prediction": ["all x y.((MakingOutWith(x,y) & Person(y)) -> IntimateAct(x))", "all x y.((MakingOut(x) & Person(y)) -> IntimateAct(x))", "all x y.((MakingOut(x) & Person(y)) -> IntimateAct(x,y))", "all x.(MakingOutWith(x,y) -> IntimateAct(x))", "all x y.((MakingOut(x,y) & Person(y)) -> IntimateAct(x))", "all x.((MakingOutWith(x,y) & Person(y)) -> IntimateAct(x))", "all x y.((MakingOutWith(x,y) & Person(y)) -> IntimateAct(x,y))", "all x.((MakingOutWith(x) & Person(x)) -> IntimateAct(x))", "all x.((MakingOut(x) & Person(x)) -> IntimateAct(x))", "all x y.((MakesOutWith(x,y) & Person(y)) -> IntimateAct(x))", "all x y.((MakingOut(x,y) & Person(y)) -> IntimateAct(x,y))", "all x y z.((MakingOut(x) & Person(y) & Person(z)) -> IntimateAct(x,y,z))", "all x.(MakingOutWith(x) -> IntimateAct(x))", "all x.(MakingOutWith(x,y) -> IntimateAct(y))", "all x.(MakingOutWithPerson(x) -> IntimateAct(x))", "all x y z.((MakingOut(x) & Person(y) & Date(z)) -> IntimateAct(x,y,z))"]}
{"id": "enwn_validation_115", "nl": "Mark recorded Jess making out with someone while she was drunk.", "fol": "", "prediction": ["all x y.((Mark(x) & Jess(y) & Drinking(y)) -> Recorded(x,y))", "all x y.((Mark(x) & Jess(y) & Drinking(y)) -> RecordedWith(x,y))", "all x y z.((Mark(x) & Jess(y) & Drinking(z)) -> Recorded(x,y,z))", "all x y z.((Mark(x) & Jess(y) & Drinking(z)) -> RecordedWith(x,y,z))", "all x y z.((Mark(x) & Jess(y) & Person(z) & Drinking(y)) -> Recorded(x,y,z))", "all x y.((Mark(x) & Jess(y) & Drunk(y)) -> Recorded(x,y))", "all x y.((Mark(x) & Jess(y) & Drunk(y)) -> RecordedWith(x,y))", "all x y z.((Mark(x) & Jess(y) & Person(z) & Drinking(y)) -> RecordedWith(x,y,z))", "all x y z.((Mark(x) & Jess(y) & Drinking(z)) -> Recorded(x,y))", "all x y.((Mark(x) & Jess(y) & Drinking(x)) -> Recorded(x,y))", "all x y.((Mark(x) & Jess(y) & MakingOutWith(y,x)) -> Drunk(y))", "all x y z.((Mark(x) & Jess(y) & Person(z) & Drinking(x)) -> Recorded(x,y,z))", "all x y.((Mark(x) & Jess(y)) -> (MakesOutWith(y,x) & Drunk(y)))", "all x y.((Mark(x) & Jess(y) & Drinking(x)) -> RecordedWith(x,y))", "all x y.((Mark(x) & Jess(y) & Drinking(y)) -> RecordedMakingOutWith(x,y))", "all x y z.((Mark(x) & Jess(y) & Person(z) & Drinking(x)) -> RecordedWith(x,y,z))"]}
{"id": "enwn_validation_116", "nl": "You need to be aware that something is happening in order to consent to it.", "fol": "", "prediction": ["all x.((AwareOf(x,y) & Happening(y)) -> ConsentsTo(x,y))", "all x y.((AwareOf(x,y) & Happening(y)) -> ConsentsTo(x,y))", "all x.((Aware(x) & Happening(x)) -> ConsentsTo(x))", "all x.((AwareOf(x,y) & Happening(y)) -> ConsentTo(x,y))", "all x.((Aware(x) & Happening(x)) -> Consent(x))", "all x.((AwareOf(x,y) & Happening(y)) -> Consent(x,y))", "all x y.((Aware(x) & Happening(y)) -> Consent(x,y))", "all x y.((Aware(x) & Happening(y)) -> ConsentsTo(x,y))", "all x y.((AwareOf(x,y) & Happening(y)) -> Consent(x,y))", "all x y.((AwareOf(x,y) & Happening(y)) -> ConsentTo(x,y))", "all x.((Aware(x) & Happening(x)) -> ConsentTo(x))", "all x.(Consent(x) -> (AwareOf(x,y) & Happening(y)))", "all x.((AwareOf(x) & Consent(x)) -> Happening(x))", "all x y.((Aware(x) & Happening(y)) -> ConsentTo(x,y))", "all x.((Aware(x) & Happens(x)) -> ConsentsTo(x))", "all x.((AwareOf(x,y) & Happening(y)) -> Consents(x,y))"]}
{"id": "enwn_validation_117", "nl": "Jess wasn't aware that Mark was filming her.", "fol": "", "prediction": ["all x.((Jess(x) & Mark(x)) -> -AwareOfFilming(x,Jess))", "all x.((Jess(x) & Mark(x)) -> -AwareOfFilming(x))", "all x.((Jess(x) & Mark(y)) -> -AwareOfFilming(x,y))", "all x y.((Jess(x) & Mark(y)) -> -AwareOfFilming(x,y))", "all x y.((Jess(x) & Mark(y)) -> -Aware(x,y))", "all x y.((Jess(x) & Mark(y)) -> -AwareOf(x,y))", "all x y.((Jess(x) & Mark(y)) -> -Filming(x,y))", "all x.((Jess(x) & Mark(x)) -> -Filming(x,Jess))", "all x.((Jess(x) & Mark(y)) -> -Filming(x,y))", "all x.((Jess(x) & Mark(y)) -> -Aware(x,y))", "all x.((Jess(x) & Mark(x)) -> -Aware(x))", "All x.((Jess(x) & Mark(x)) -> -AwareOfFilming(x,Jess))", "all x.((Jess(x) & Mark(x)) -> -AwareOf(x,Jess))", "all x.((Jess(x) & Mark(x)) -> -Filming(x))", "All x.((Jess(x) & Mark(x)) -> -AwareOfFilming(x))", "(-(Jesss(Jess) & Mark(Mark)) -> Filming(Jess))"]}
{"id": "enwn_validation_118", "nl": "You shouldn't record someone in a compromising situation without their consent.", "fol": "", "prediction": ["all x y.((Person(x) & CompromisingSituation(y)) -> -RecordWithoutConsent(x,y))", "all x y.((Person(x) & CompromisingSituation(y)) -> -Record(x,y))", "all x y.((CompromigratingSituation(x) & Person(y)) -> -Record(x,y))", "all x y.((Person(x) & CompromisingSituation(y)) -> -RecordsWithoutConsent(x,y))", "all x y.((CompromisingSituation(x) & Person(y)) -> -Record(x,y))", "all x y.((CompromigratingSituation(x) & Person(y)) -> -RecordsWithoutConsent(x,y))", "all x.((Person(x) & CompromisingSituation(x)) -> -Record(x,y))", "all x y.((CompromigratingSituation(x) & Person(y)) -> -RecordWithoutConsent(x,y))", "all x.((Person(x) & CompromisingSituation(x)) -> -RecordWithoutConsent(x))", "all x y.((Person(x) & CompromisesSituation(y)) -> -RecordWithoutConsent(x,y))", "all x y.((CompromigratingSituation(x) & Person(y)) -> -RecordsWithoutConsent(y,x))", "all x y.((Person(x) & CompromisesSituation(y)) -> -Record(x,y))", "all x y.((CompromigratingSituation(x) & Person(y)) -> -RecordWithoutConsent(y,x))", "all x y.((Person(x) & CompromisingSituation(y)) -> -Record(x,y))", "all x y.((CompromisingSituation(x) & Person(y)) -> -RecordsWithoutConsent(x,y))", "all x.((Person(x) & CompromisingSituation(x)) -> -RecordsWithoutConsent(x))"]}
{"id": "enwn_validation_119", "nl": "A compromising situation is one which could cause embarrassment or shame if made public.", "fol": "", "prediction": ["all x.(CompromisingSituation(x) -> (CausesEmbarrassment(x) | CausesShame(x)))", "all x.(CompromisingSituation(x) -> (CausesEmbarrasse(x) | CausesShame(x)))", "all x.(CompromisingSituation(x) -> (CausesEmbarrassment(x) | CausesShadow(x)))", "all x.(CompromigratingSituation(x) -> (CausesEmbarrassment(x) | CausesShame(x)))", "all x.(CompromiseableSituation(x) -> (CausesEmbarrassment(x) | CausesShame(x)))", "all x.(CompromisingSituation(x) -> (CausesEmbarrassment(x) | CausesShame(x)))", "all x.(CompromigratingSituation(x) -> (CausesEmbarrasse(x) | CausesShame(x)))", "all x.(CompromiseableSituation(x) -> (CausesEmbarrasse(x) | CausesShame(x)))", "all x.(CompromigratingSituation(x) -> (CausesEmbarrassment(x) | CausesShadow(x)))", "all x.(CompromiseableSituation(x) -> (CausesEmbarrassment(x) | CausesShadow(x)))", "all x.(CompromisingSituation(x) -> (CausesEmbarrasse(x) | CausesShadow(x)))", "all x.(CompromisingSituation(x) -> (CausesEmbarrassment(x) | CausesShame(x)))", "all x.(CompromisingSituation(x) -> (CausesEmbarrasse(x) | CausesShame(x)))", "all x.(CompromisingSituation(x) -> (CausesEmbarrassment(x) | CausesShadow(x)))", "all x.(CompromisingSituation(x) -> (CausesEmbarrassment(x) | CausesShadow(x)))", "all x.(CompromisingSituation(x) -> (CausesEmbarrassement(x) | CausesShame(x)))"]}
{"id": "enwn_validation_120", "nl": "Physical intimacy can be embarrassing if it's made public.", "fol": "", "prediction": ["all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassing(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassed(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassed(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Enormous(x))", "all x.((PhysicalIntimacy(x) & Public(x)) -> Embarrassing(x))", "all x.((PhysicalIntimacy(x) & MakesPublic(x)) -> Embarrassing(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassing(x))", "all x.((PhysicalIntimity(x) & MadePublic(x)) -> Embarrassing(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassesome(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Entrancing(x))", "all x.((PhysicalIntimacy(x) & Public(x)) -> Embarrassed(x))", "all x.(Embarrassing(x) -> (PhysicalIntimacy(x) & MadePublic(x)))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrasseing(x))", "all x.((PhysicalIntimacy(x) & MakesPublic(x)) -> Embarrassed(x))", "all x.((PersonalIntimacy(x) & MadePublic(x)) -> Embarrassing(x))", "all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarraging(x))"]}
{"id": "enwn_validation_121", "nl": "Mark recorded Jess being intimate with someone while she was drunk.", "fol": "", "prediction": ["all x y.((Mark(x) & Jess(y) & Intimate(y,x)) -> Drunk(y))", "all x y.((Mark(x) & Jess(y) & Drunk(y)) -> IntimateWith(y,x))", "all x y.((Mark(x) & Jess(y) & Drinking(y)) -> IntimateWith(y,x))", "all x y.((Jess(x) & Person(y) & Drunk(x)) -> Intimate(x,y))", "all x y.((Mark(x) & Jess(y)) -> IntimateWith(y,x))", "all x y z.((Mark(x) & Jess(y) & Person(z) & Drunk(y)) -> Intimate(y,z))", "all x y z.((Mark(x) & Jess(y) & Person(z) & Drinking(y)) -> Intimate(y,z))", "all x y.((Mark(x) & Jess(y) & Drunk(y)) -> Intimate(y,x))", "all x y.((Mark(x) & Jess(y) & IntimateWith(y,x)) -> Drunk(y))", "all x y.((Mark(x) & Jess(y) & Drunk(y)) -> IntimateWith(x,y))", "all x y.((Mark(x) & Jess(y) & Drinking(y)) -> IntimateWith(x,y))", "all x y.((Mark(x) & Jess(y) & Drinking(y)) -> Intimate(y,x))", "all x y z.((Mark(x) & Jess(y) & Person(z)) -> IntimateWith(y,z))", "all x y z.((Mark(x) & Jess(y) & Person(z)) -> Intimate(y,z))", "all x y z.((Mark(x) & Jess(y) & Person(z) & Drunk(y)) -> IntimateWith(y,z))", "all x y z.((Mark(x) & Jess(y) & Person(z) & Drinking(y)) -> IntimateWith(y,z))"]}
{"id": "enwn_validation_122", "nl": "Jess did not consent to Mark filming her.", "fol": "", "prediction": ["all x.((Jess(x) & Mark(y)) -> -ConsentsToFilm(x,y))", "all x y.((Jess(x) & Mark(y)) -> -ConsentsToFilm(x,y))", "all x.((Jess(x) & Mark(x)) -> -ConsentsToFilm(x,Jess))", "All x.((Jess(x) & Mark(y)) -> -ConsentsToFilm(x,y))", "all x.((Jess(x) & Mark(y)) -> -ConsentsForFilming(x,y))", "all x.((Jess(x) & Mark(y)) -> -ConsentsToFilming(x,y))", "all x y.((Jess(x) & Mark(y)) -> -ConsentsForFilming(x,y))", "(-ConsentToMarkFilming(Jess))", "All x.((Jess(x) & Mark(x)) -> -ConsentsToFilm(x,Jess))", "all x y.((Jess(x) & Mark(y)) -> -ConsentsToFilming(x,y))", "all x.((Jess(x) & Mark(y)) -> -ConsentToFilm(x,y))", "all x.((Jess(x) & Mark(x)) -> -ConsentToFilm(x,Jess))", "all x.((Jess(x) & Mark(x)) -> -ConsentsToFilming(x,Jess))", "all x.((Jess(x) & Mark(x)) -> -ConsentsForFilming(x,Jess))", "All x.((Jess(x) & Mark(y)) -> -ConsentsForFilming(x,y))", "all x.((Jess(x) & Mark(y)) -> -Consents(x,y))"]}
{"id": "enwn_validation_123", "nl": "Mark recorded Jess being intimate with someone without her consent.", "fol": "", "prediction": ["all x y.((Mark(x) & Jess(y)) -> IntimateWith(y,x))", "all x y.((Mark(x) & Jess(y) & IntimateWith(y,x)) -> -Consent(y,x))", "all x y.((Mark(x) & Jess(y)) -> IntimateWith(x,y))", "all x y.((Mark(x) & Jess(y) & IntimateWith(y,x)) -> -Consent(y))", "all x y.((Mark(x) & Jess(y) & Intimate(y,x)) -> -Consent(y,x))", "all x y.((Mark(x) & Jess) & Person(y) & -Consent(x,y)) -> Intimate(x,y))", "all x y.((Mark(x) & Jess) & Person(y) & -Consent(x,y)) -> IntimateWith(x,y))", "all x y.((Mark(x) & Jess(y) & IntimateWith(y,x)) -> -IntimateWith(y,x))", "all x y.((Mark(x) & Jess(y) & IntimateWith(y,x) & -Consent(y)) -> Recorded(x,y))", "all x y.((Mark(x) & Jess(y)) -> (IntimateWith(y,x) & -Consent(y)))", "all x y.((Mark(x) & Jess(y)) -> (IntimateWith(y,x) & -Consent(y,x)))", "all x y.((Mark(x) & Jess(y) & Intimate(y,x)) -> -Consent(y))", "all x y.((Mark(x) & Jess) & Person(y) & -Consent(y)) -> IntimateWith(x,y))", "all x y.((Mark(x) & Jess(y) & IntimateWith(y,x) & -Consent(y)) -> RecordedBy(x,y))", "all x y.((Mark(x) & Jess(y) & IntimateWith(x,y)) -> -Consent(y))", "(IntimateWith(Mark,Jess) & -Consent(Mark,Jess))"]}
{"id": "enwn_validation_124", "nl": "Physical intimacy is a compromising situation.", "fol": "", "prediction": ["all x.(PhysicalIntimacy(x) -> CompromisingSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromiseableSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromisingSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromisesSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromiseingSituation(x))", "all x.(PhysicalIntimacy(x) -> CompromittingSituation(x))", "all x.((PhysicalIntimacy(x) & CompromisingSituation(x)) -> Compromises(x))", "all x.((PhysicalIntimacy(x) & CompromisesSituation(x)) -> Compromises(x))", "all x.(PhysicalIntimacy(x) -> CompromigratingSituation(x))", "all x.((PhysicalIntimacy(x) & CompromisingSituation(x)) -> Compromises(x))", "all x.(PhysicalIntimacy(x) -> CompromisefulSituation(x))", "all x.((PhysicalIntimacy(x) & CompromisingSituation(x)) -> Compromising(x))", "all x.((PhysicalIntimacy(x) & CompromisingSituation(x)) -> Compromising(x))", "all x.(PhysicalIntimity(x) -> CompromisingSituation(x))", "all x.((PhysicalIntimacy(x) & CompromisingSituation(x)) -> Compromising(x))", "all x.(PhysicalIntimacy(x) -> CompromittingSituation(x))"]}
{"id": "enwn_validation_125", "nl": "You shouldn't record someone being physically intimate without their consent.", "fol": "", "prediction": ["all x.((Person(x) & PhysicallyIntimate(x)) -> -Record(x,y))", "all x.((Person(x) & PhysicallyIntimate(x)) -> -RecordsWithoutConsent(x))", "all x.((Person(x) & PhysicallyIntimate(x)) -> -RecordWithoutConsent(x))", "all x.((Person(x) & Intimate(x)) -> -Record(x,y))", "all x y.((Person(x) & Intimate(y)) -> -Record(x,y))", "all x.((Person(x) & Intimate(x)) -> -RecordWithoutConsent(x))", "all x y.((Person(x) & Intimate(y)) -> -RecordsWithoutConsent(x,y))", "all x y.((Person(x) & Intimate(y)) -> -RecordWithoutConsent(x,y))", "all x.((Person(x) & Intimate(x)) -> -RecordsWithoutConsent(x))", "all x.((Person(x) & PhysicallyIntimate(x) & -Consent(x)) -> -Record(x,y))", "all x.((Person(x) & IntimateWithoutConsent(x)) -> -Record(x,y))", "all x y.((Person(x) & Person(y) & Intimate(x,y)) -> -RecordsWithoutConsent(x,y))", "all x y.((Person(x) & Person(y) & PhysicallyIntimate(x,y)) -> -RecordsWithoutConsent(x,y))", "all x y.((Person(x) & Person(y) & Intimate(x,y)) -> -Record(x,y))", "all x y.((Person(x) & Person(y) & Intimate(x,y)) -> -RecordWithoutConsent(x,y))", "all x.((Person(x) & PhysicallyIntimate(x) & Consent(x)) -> -Record(x,y))"]}
{"id": "enwn_validation_126", "nl": "Mark should not have recorded Jess.", "fol": "", "prediction": ["all x.((Mark(x) & -RecordedJess(x)) -> -RecordedJess(x))", "Mark should not have recorded Jess.", "all x y.((Mark(x) & Jess(y)) -> -Recorded(x,y))", "Mark should not have recordedJess.", "all x.((Mark(x) & Jess(y)) -> -Recorded(x,y))", "all x.((Mark(x) & -Recorded(x,Jess)) -> -Recorded(x,Jess))", "all x.((Mark(x) & -RegisteredJess(x)) -> -RegisteredJess(x))", "all x y.((Mark(x) & Jess(y)) -> -Registered(x,y))", "all x.((Mark(x) & -RecordedJess(x)) -> -Recorded(x,Jess))", "all x.((Mark(x) & Jess(x)) -> -Recorded(x,Jess))", "all x.((Mark(x) & -RegisteredJess(x)) -> -RecordedJess(x))", "all x.(Mark(x) -> -RecordedJess(x))", "all x.((Mark(x) & -RecordedJess(x)) -> -RegisteredJess(x))", "all x.((Mark(x) & Jess(y)) -> -Registered(x,y))", "all x.((Mark(x) & -RecordedJess(x)) -> -RecordedJess(x))", "all x.((Mark(x) & -RecordedJess(x)) -> -RecordedJesse(x))"]}
{"id": "enwn_validation_127", "nl": "Putting yourself or others at unnecessary risk is reckless.", "fol": "", "prediction": ["all x.((PlacesYouOrOthers(x) & UnnecessaryRisk(x)) -> Reckless(x))", "all x.((PutsYouOrOthers(x) & UnnecessaryRisk(x)) -> Reckless(x))", "all x.((PlacesYouOrOthersAtUnnecessaryRisk(x)) -> Reckless(x))", "all x.((PutsYouOrOthersAtUnnecessaryRisk(x)) -> Reckless(x))", "all x.((PuttingYourselfOrOthersAtUnnecessaryRisk(x)) -> Reckless(x))", "all x.((PlacesYourselfOrOthersAtUnnecessaryRisk(x)) -> Reckless(x))", "all x.((PutsYourselfOrOthersAtUnnecessaryRisk(x)) -> Reckless(x))", "all x.((Self(x) | Others(x)) -> UnnecessaryRisk(x))", "all x.((PlacesYourselfOrOthers(x) & UnnecessaryRisk(x)) -> Reckless(x))", "all x.(PuttingYourselfOrOthersAtUnnecessaryRisk(x) -> Reckless(x))", "all x.((PuttingselfOrOthersAtUnnecessaryRisk(x)) -> Reckless(x))", "all x.(UnnecessaryRisk(x) -> Reckless(x))", "all x y.((Self(x) | Others(y)) -> UnnecessaryRisk(x,y))", "all x.((PlacesYouOrOthers(x) & UnnecessaryRisk(x)) -> Responsible(x))", "all x y.((Self(x) | Others(y)) -> UnnecessaryRisk(x))", "all x.((PutsYouOrOthers(x) & UnnecessaryRisk(x)) -> Responsible(x))"]}
{"id": "enwn_validation_128", "nl": "You should not behave recklessly.", "fol": "", "prediction": ["all x.((BehavesRecklessly(x) & -BehavesRecklessly(x)) -> -BehavesRecklessly(x))", "all x.((BehaveRecklessly(x) & -BehaveRecklessly(x)) -> -BehaveRecklessly(x))", "all x.((BehavesRecklessly(x) & -BehavesRecklessly(x)) -> -(BehavesRecklessly(x) & -BehavesRecklessly(x)))", "all x.((BehavesRecklessly(x)) -> -BehavesRecklessly(x))", "all x.((BehavesRecklessly(x) & -BehavesRecklessly(x)) -> -(BehavesRecklessly(x) & BehavesRecklessly(x)))", "all x.((BehavesRecklessly(x) & -BehavesRecklessly(x)) -> -(BehavesRecklessly(x) & -BehavesRecklessly(x)))", "all x.((BehavesRecklessly(x) & -BehavesRecklessly(x)) -> -BehavesRecklessly(x))", "all x.((BehavesRecklessly(x) & -BehavesRecklessly(x)) -> -(BehavesRecklessly(x) & -BehavesRecklessly(x)))", "all x.((BehavesRecklessly(x) & -BehavesRainfully(x)) -> -(BehavesRecklessly(x) & -BehavesRecklessly(x)))", "all x.((BehavesRecklessly(x) & -BehavesRainfully(x)) -> -BehavesRecklessly(x))", "all x.((BehavesRecklessly(x)) -> -Reckless(x))", "all x.((Behavior(x) & -Reckless(x)) -> -Behavior(x))", "all x.((BehavesRecklessly(x) & -BehavesRecklessly(x)) -> -BehavesRecklessly(x))", "all x.((BehavesRainfully(x) & -BehavesRecklessly(x)) -> -BehavesRecklessly(x))", "all x.((BehavesRecklessly(x) & -BehavesRecklessly(x)) -> -(BehavesRecklessly(x) | BehavesRecklessly(x))))", "all x.((BehavesRecklessly(x)) -> -(BehavesRecklessly(x) & -BehavesRecklessly(x)))"]}
{"id": "enwn_validation_129", "nl": "Taking a right at a red light involves entering a crossing lane.", "fol": "", "prediction": ["all x y.((Right(x) & RedLight(y)) -> EntersCrossingLane(x,y))", "all x.((Right(x) & RedLight(x)) -> EntersCrossingLane(x))", "all x y.((Right(x) & RedLight(y) & EntersCrossingLane(x,y)) -> TakesRight(x,y))", "all x y.((Right(x) & RedLight(y) & EntersCrossingLane(x,y)) -> Takes(x,y))", "all x y.((TakesRightAtRedLight(x) & RedLight(y)) -> EntersCrossingLane(x,y))", "all x y.((Right(x) & RedLight(y) & EntersCrossingLane(x)) -> TakesRight(x,y))", "all x y.((Right(x) & RedLight(y)) -> EntersCrossingLanes(x,y))", "all x y.((Right(x) & RedLight(y)) -> EntersCrossingLane(x))", "all x y.((Right(x) & RedLight(y) & EntersCrossingLane(x,y)) -> TakesAt(x,y))", "all x y.((Right(x) & RedLight(y) & EntersCrossingLane(x,y)) -> TakesRed(x,y))", "all x.(TakesRightAtRedLight(x) -> EntersCrossingLane(x))", "all x y.((Right(x) & RedLight(y) & EntersCrossingLane(x)) -> Takes(x,y))", "all x y.((Right(x) & RedLight(y) & EntersCrossingLane(x,y)) -> TakesRightAt(x,y))", "all x y z.((Right(x) & RedLight(y) & Lane(z) & Takes(x,y)) -> Enters(x,z))", "all x y.((Right(x) & RedLight(y) & EntersCrossingLanes(x,y)) -> TakesRight(x,y))", "all x y z.((Right(x) & RedLight(y) & Lane(z)) -> Enters(x,z))"]}
{"id": "enwn_validation_130", "nl": "Checking for traffic in a lane before entering it reduces the risk of a collision.", "fol": "", "prediction": ["all x y.((Lanes(x) & Lane(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCollision(x,y))", "all x y.((Lane(x) & Lane(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCollision(x,y))", "all x y.((Lane(x) & Lane(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((Lanes(x) & Lane(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((Lane(x) & Lane(y) & ChecksForTraffic(x,y) & BeforeEntering(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((Lanes(x) & Lane(y) & ChecksForTraffic(x,y) & BeforeEntering(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((Lane(x) & Lane(y) & ChecksForTraffic(x,y) & Enters(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((Lanes(x) & Lane(y) & ChecksForTraffic(x,y) & Enters(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((Lane(x) & Lane(y) & ChecksForTraffic(x,y) & BeforeEntering(x,y)) -> ReducesRiskOfCollision(x,y))", "all x y.((Lane(x) & Lane(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCollision(x,y))", "all x y.((Lanes(x) & Lane(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCollision(x,y))", "all x y.((Lane(x) & Lane(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((Lane(x) & Lane(y) & ChecksForTrafficBeforeEntering(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((Lanes(x) & Lane(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((Lanes(x) & Lane(y) & ChecksForTraffic(x,y) & BeforeEntering(x,y)) -> ReducesRiskOfCollision(x,y))", "all x y.((Lanes(x) & Lane(y) & ChecksForTrafficBeforeEntering(x,y)) -> ReducesRiskOfCollision(x))"]}
{"id": "enwn_validation_131", "nl": "If you could do something to reduce risk, but you don't, you're exposing yourself to avoidable risk.", "fol": "", "prediction": ["all x.((DoesReduceRisk(x) & -DoesReduceRisk(x)) -> ExposesToAvoidableRisk(x))", "all x.((DoesReduceRisk(x) & -(DoesReduceRisk(x) | ExposesToAvoidableRisk(x))) -> ExposesToAvoidableRisk(x))", "all x.((ReduceRisk(x) & -ReduceRisk(x)) -> ExposesToAvoidableRisk(x))", "all x.((DoesReduceRisk(x) & -DoesReduceRisk(x)) -> ExposedToAvoidableRisk(x))", "all x.((PossibleToReduceRisk(x) & -PossibleToReduceRisk(x)) -> ExposedToAvoidableRisk(x))", "all x.(((PossibleToReduceRisk(x) & -PossibleToReduceRisk(x)) -> ExposesToAvoidableRisk(x))", "all x.(((PossibleToReduceRisk(x) & -PossibleToReduceRisk(x)) -> ExposedToAvoidableRisk(x))", "all x.((PossibleToReduceRisk(x) & -PossibleToReduceRisk(x)) -> ExposesToAvoidableRisk(x))", "all x.((DoesReduceRisk(x) & -(DoesReduceRisk(x) | ExposesToAvoidableRisk(x))) -> ExposedToAvoidableRisk(x))", "all x.((CanDo(x) & -CanDo(x)) -> ExposesToAvoidableRisk(x))", "all x.((DoesRiskReduction(x) & -DoesRiskReduction(x)) -> ExposesToAvoidableRisk(x))", "all x.((ReduceRisk(x) & -ReduceRisk(x)) -> ExposedToAvoidableRisk(x))", "all x.((DoesRisk(x) & -DoesRisk(x)) -> ExposesToAvoidableRisk(x))", "all x.((PossibleToReduceRisk(x) & -PossibleToReduceRisk(x)) -> ExposureToAvoidableRisk(x))", "all x.((PossibleToReduceRisk(x) & -PossibleToReduceRisk(x)) -> ExposeToAvoidableRisk(x))", "all x.(((PossibleToReduceRisk(x) & -PossibleToReduceRisk(x)) -> ExposureToAvoidableRisk(x))"]}
{"id": "enwn_validation_132", "nl": "You should not put yourself or others at unnecessary risk.", "fol": "", "prediction": ["all x.((Self(x) | Others(x)) -> -UnnecessaryRisk(x))", "all x.((You(x) | Others(x)) -> -UnnecessaryRisk(x))", "all x.((Self(x) | Other(x)) -> -UnnecessaryRisk(x))", "all x.((You(x) | Other(x)) -> -UnnecessaryRisk(x))", "all x.((Person(x) | Person(x)) -> -UnnecessaryRisk(x))", "all x y.((Self(x) | Others(y)) -> -UnnecessaryRisk(x,y))", "all x.((You(x) & -UnnecessaryRisk(x)) -> -PutsAtRisk(x))", "all x.((You(x) & -UnnecessaryRisk(x)) -> -PutYourselfOrOthersAtRisk(x))", "all x.((You(x) & -UnnecessaryRisk(x)) -> -PlaceYourselfOrOthers(x))", "all x.((Self(x) | Others(x)) -> -NecessaryRisk(x))", "all x.((Self(x) | Others(x)) -> -UnnecessarilyRisk(x))", "all x y.((Self(x) | Other(y)) -> -UnnecessaryRisk(x,y))", "all x.((You(x) & -UnnecessaryRisk(x)) -> -PutsYourselfOrOthersAtRisk(x))", "all x.((You(x) | Someone(x)) -> -UnnecessaryRisk(x))", "all x.((You(x) | Others(x)) -> -UsesUnnecessaryRisk(x))", "all x.((You(x) & -UnnecessaryRisk(x)) -> -PosesAtRisk(x))"]}
{"id": "enwn_validation_133", "nl": "Checking for traffic in the crossing lane before taking a right at a red light reduces the risk of a collision.", "fol": "", "prediction": ["all x y.((ChecksTraffic(x) & CrossingLane(y) & TakesRightAtRedLight(x,y)) -> ReducesRiskOfCollision(x))", "all x.(ChecksForTrafficInCrossingLane(x) & TakesRightAtRedLight(x)) -> ReducesRiskOfCollision(x))", "all x y.((CheckingForTraffic(x) & CrossingLane(y) & TakesRightAtRedLight(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((ChecksForTraffic(x) & CrossingLane(y) & TakesRightAtRedLight(x,y)) -> ReducesRiskOfCollision(x))", "all x y z.((CheckingForTraffic(x) & CrossingLane(y) & RedLight(z) & TakesRight(x,y,z)) -> ReducesRiskOfCollision(x))", "all x y.((CheckingTraffic(x) & CrossingLane(y) & TakesRightAtRedLight(x,y)) -> ReducesRiskOfCollision(x))", "all x.(ChecksTrafficInCrossingLane(x) & TakesRightAtRedLight(x)) -> ReducesRiskOfCollision(x))", "all x y.((ChecksTraffic(x) & CrossingLanes(y) & TakesRightAtRedLight(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((ChecksTraffic(x) & CrossingLane(y) & TakesRight(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((ChecksTraffic(x) & CrossingLane(y) & TakesRightAtRedLight(x,y)) -> ReducesRiskOfCollision(x))", "all x y.((ChecksTraffic(x) & CrossingLane(y) & TakesRightAtRedLight(x,y)) -> ReducesRiskOfCollision(x,y))", "all x y.((CrossingLane(x) & RedLight(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCollision(x))", "all x y z.((CheckingForTraffic(x) & CrossingLane(y) & RedLight(z)) -> ReducesRiskOfCollision(x,y,z))", "all x y.((ChecksTraffic(x) & RedLight(y) & TakesRight(x,y)) -> ReducesRiskOfCollision(x))", "all x.(ChecksForTrafficInCrossingLane(x) & TakesRightAtRedLight(x)) -> ReducesRiskOfCollision(x))", "all x y.((CheckingForTraffic(x) & CrossingLane(y) & TakesRightAtRedLight(x,y)) -> ReducesRiskOfCollision(x))"]}
{"id": "enwn_validation_134", "nl": "Not checking for traffic in the crossing lane before taking a right at a red light exposes you to avoidable risk.", "fol": "", "prediction": ["all x.((CheckingTrafficInCrossingLane(x) & TakesRightAtRedLight(x)) -> ExposesToAvoidableRisk(x))", "all x.((ChecksTrafficInCrossingLane(x) & TakesRightAtRedLight(x)) -> ExposesToAvoidableRisk(x))", "all x y.((CrossingLane(x) & RedLight(y) & -ChecksForTraffic(x,y)) -> ExposesToAvoidableRisk(x))", "all x y.((CrossingLane(x) & RedLight(y) & -ChecksForTraffic(x,y) & TakesRight(x,y)) -> ExposesToAvoidableRisk(x))", "all x y.((CrossingLane(x) & RedLight(y) & -ChecksTraffic(x,y) & TakesRight(x,y)) -> ExposesToAvoidableRisk(x))", "all x.((CrossingLane(x) & CrossingLane(x) & TakeRightAtRedLight(x)) -> ExposesToAvoidableRisk(x))", "all x y.((CrossingLane(x) & RedLight(y) & -ChecksForTraffic(x,y)) -> ExposesToAvoidableRisk(x,y))", "all x.((CheckingTraffic(x) & CrossingLane(x) & TakesRightAtRedLight(x)) -> ExposesToAvoidableRisk(x))", "all x.((CrossingLane(x) & CrossingLane(x) & TakesRightAtRedLight(x)) -> ExposesToAvoidableRisk(x))", "all x y.((CrossingLane(x) & RedLight(y) & NotCheckingForTraffic(x,y)) -> ExposesToAvoidableRisk(x))", "all x y.((CrossingLane(x) & CrossingLane(y) & TakesRightAtRedLight(x,y)) -> ExposesToAvoidableRisk(x))", "all x y.((CrossingLane(x) & RedLight(y) & -ChecksTraffic(x,y)) -> ExposesToAvoidableRisk(x))", "all x.((ChecksTraffic(x) & TakesRightAtRedLight(x)) -> ExposesToAvoidableRisk(x))", "all x y.((CrossingLane(x) & RedLight(y) & -ChecksTraffic(x,y)) -> ExposesToAvoidableRisk(x,y))", "all x y.((CrossingLane(x) & RedLight(y) & NotCheckingForTraffic(x,y)) -> ExposesToAvoidableRisk(x,y))", "all x y.((CrossingLane(x) & RedLight(y) & -ChecksForTraffic(x,y)) -> ExhibitsAvoidableRisk(x))"]}
{"id": "enwn_validation_135", "nl": "You should check for traffic in the crossing lane before taking a right at a red light.", "fol": "", "prediction": ["all x y.((CrossingLane(x) & RedLight(y)) -> ChecksForTraffic(x,y))", "all x.((CrossingLane(x) & RedLight(x)) -> ChecksForTraffic(x))", "all x y.((CrossingLane(x) & RedLight(y)) -> CheckForTraffic(x,y))", "all x.((CrossingLane(x) & RedLight(x)) -> CheckForTraffic(x))", "all x y.((CrossingLane(x) & RedLight(y)) -> ChecksForTrafficBeforeTakingRight(x,y))", "all x y.((Right(x) & RedLight(y)) -> ChecksForTrafficInCrossingLane(x,y))", "all x y.((CrossingLane(x) & RedLight(y)) -> (ChecksTraffic(x,y) & TakesRight(x,y)))", "all x.((CrossingLane(x) & RedLight(x)) -> ChecksForTrafficBeforeTakingRight(x))", "all x.((CrossingLane(x) & RedLight(y)) -> ChecksForTraffic(x,y))", "all x.((CrossingLane(x) & RedLight(x)) -> CheckForTrafficBeforeTakingRight(x))", "all x y.((CrossingLane(x) & RedLight(y)) -> CheckForTrafficBeforeTakingRight(x,y))", "all x y.((CrossingLanes(x) & RedLight(y)) -> ChecksForTraffic(x,y))", "all x y.((Right(x) & RedLight(y)) -> ChecksTrafficInCrossingLane(x,y))", "all x y.((CrossingLane(x) & RedLight(y)) -> (ChecksTraffic(x,y) & TakesRightAt(x,y)))", "all x y.((CrossingLane(x) & RedLight(y)) -> ChecksForTrafficBeforeTakesRight(x,y))", "all x y.((CrossingLane(x) & RedLight(y)) -> ChecksForTrafficInLane(x,y))"]}
{"id": "enwn_validation_136", "nl": "Adding pieces to the board is against the rules of chess.", "fol": "", "prediction": ["all x.(AddingPiecesToBoard(x) -> AgainstRulesOfChess(x))", "all x.(AddingPiecesToBoard(x) -> AgainstRulesOfChess(x))", "all x.((AddingPieces(x) & Board(x)) -> AgainstRulesOfChess(x))", "all x.(AddingPiecesToBoard(x) -> BreaksRulesOfChess(x))", "all x y.((AddingPieces(x) & Board(y)) -> AgainstRulesOfChess(x,y))", "all x.(AddingPiecesToBoard(x) -> BreaksRulesOfChess(x))", "all x.(AddingPiecesToBoard(x) -> AgainstChessRules(x))", "all x.(AddingPiecesToBoard(x) -> AgainstChessRules(x))", "all x.(AddingPiecesToBoard(x) -> BreaksChessRules(x))", "all x.(AddingPiecesToBoard(x) -> BreaksChessRules(x))", "all x.((AddingPieces(x) & Board(x)) -> BreaksRulesOfChess(x))", "all x y.((AddingPieces(x) & Board(y)) -> BreaksRulesOfChess(x,y))", "all x y.((AddingPieces(x) & Board(y)) -> AgainstRulesOfChess(x))", "all x y.((Addition(x,y) & Board(y)) -> AgainstRulesOfChess(x))", "all x y.((AdditionPieces(x) & Board(y)) -> AgainstRulesOfChess(x,y))", "all x y.((AddingPieces(x) & Board(y)) -> AgainstRulesOfChess(x,y))"]}
{"id": "enwn_validation_137", "nl": "Breaking the rules is cheating.", "fol": "", "prediction": ["all x.((BreakingRules(x) & BreakingRules(x)) -> Cheating(x))", "all x.((BreaksRules(x) & Cheating(x)) -> Cheating(x))", "all x.((BreakingRules(x) & Cheating(x)) -> Cheating(x))", "all x.(BreakingRules(x) -> Cheating(x))", "all x.((Rules(x) & Breaks(x)) -> Cheating(x))", "all x.((Rules(x) & Breaking(x)) -> Cheating(x))", "all x.((BeyondRules(x) & BreaksRules(x)) -> Cheating(x))", "all x.((BreakingRules(x) & BreaksRules(x)) -> Cheating(x))", "all x.((BreaksRules(x) & BreaksRules(x)) -> Cheating(x))", "all x.((BreaksRules(x) & Cheats(x)) -> BreaksRules(x))", "all x.((BreachRules(x) & BreaksRules(x)) -> Cheating(x))", "all x.((BreachingRules(x) & Cheating(x)) -> Cheating(x))", "all x.((BreachRules(x) & Cheating(x)) -> Cheating(x))", "all x.((BreaksRules(x) & Cheating(x)) -> BreaksRules(x))", "all x.((RulesBreaking(x) & Cheating(x)) -> Breaks(x))", "all x.(BeyondRules(x) -> Cheating(x))"]}
{"id": "enwn_validation_138", "nl": "You shouldn't cheat.", "fol": "", "prediction": ["all x.((Cheat(x)) -> -Cheat(x))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) & Cheat(x)))", "all x.((Cheat(x) & -Cheat(x)) -> -Cheat(x))", "all x.((Cheat(x)) -> -(Cheat(x) | Cheat(x))))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) | Cheat(x))))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) | Cheat(x))))", "all x.((Cheat(x) & -Cheat(x)) -> -Cheat(x))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) & -Cheat(x)))", "all x.((Cheat(x)) -> -(Cheat(x) | Cheat(x))))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) & -Cheat(x))))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) | Cheat(x)))", "all x.(Cheat(x) -> -Cheat(x))", "all x.((Cheat(x) & -Cheat(x)) -> -Cheat(x))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) & Cheat(x)))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) & Cheat(x))))", "all x.((Cheat(x) & -Cheat(x)) -> -Cheat(x))"]}
{"id": "enwn_validation_139", "nl": "When Ben's opponent wasn't looking, Ben snuck a pawn onto the board to give himself the advantage.", "fol": "", "prediction": ["all x y.((Ben(x) & Opponent(y) & -Looking(y)) -> SnucksPawnOnBoard(x,y))", "all x y z.((Ben(x) & Opponent(y) & Board(z) & -Looking(y)) -> SnucksPawnOn(x,z))", "all x y.((Ben(x) & Opponent(y) & -Looking(y)) -> SnucksPawn(x,y))", "all x y.((Ben(x) & Opponent(y) & -Looking(y)) -> SnucksPawnOnBoardToGiveAdvantage(x,y))", "all x y z.((Ben(x) & Opponent(y) & Board(z) & -Looking(y)) -> SnucksPawn(x,z))", "all x y.((Ben(x) & Opponent(y) & -Looking(x,y)) -> SnucksPawnOnBoard(x,y))", "all x y.((Ben(x) & Opponent(y) & -Looking(y)) -> (SnucksPawn(x,y) & GivesAdvantage(x,y)))", "all x y z.((Ben(x) & Opponent(y) & Board(z) & -Looking(y)) -> (SnucksPawn(x,z) & GivesAdvantage(x,z)))", "all x y.((Ben(x) & Opponent(y) & -Looking(x)) -> SnucksPawnOnBoard(x,y))", "all x y z.((Ben(x) & Opponent(y) & Board(z) & -Looking(y)) -> (SnucksPawnOn(x,z) & GivesAdvantage(x,z)))", "all x y.((Ben(x) & Opponent(y) & -Looking(y)) -> SnuckPawnOnBoard(x,y))", "all x y.((Ben(x) & Opponent(y) & -Looking(x,y)) -> SnucksPawnOnBoard(x))", "all x y.((Ben(x) & Opponent(y) & -Looking(x,y)) -> SnucksPawnOnBoardToGiveAdvantage(x,y))", "all x y z.((Ben(x) & Opponent(y) & Board(z) & -Looking(y,z)) -> SnucksPawnOn(x,z))", "all x y z.((Ben(x) & Opponent(y) & Board(z) & -Looking(x,y)) -> SnucksPawnOn(x,z))", "all x y.((Ben(x) & Opponent(y) & -Looking(x,y)) -> SnucksPawn(x,y))"]}
{"id": "enwn_validation_140", "nl": "Adding pieces to the board is cheating.", "fol": "", "prediction": ["all x.(AddingPiecesToBoard(x) -> Cheating(x))", "all x.((AddingPieces(x) & Board(x)) -> Cheating(x))", "all x.((AddingPieces(x) & Board(x)) -> Cheating(x))", "all x.((AddingPiecesToBoard(x) & Cheating(x)) -> Cheating(x))", "all x.(AddingPiecesToBoard(x) -> Cheating(x))", "all x.((AddingPiecesToBoard(x) & Cheating(x)) -> Cheating(x))", "all x.((AdditionsPieces(x) & Board(x)) -> Cheating(x))", "all x.((AdditionToBoard(x) & Pieces(x)) -> Cheating(x))", "all x.((AdditionPieces(x) & Board(x)) -> Cheating(x))", "all x.(AddedPiecesToBoard(x) -> Cheating(x))", "all x y.((Addition(x,y) & Board(y)) -> Cheating(x))", "all x y.((AddingPieces(x) & Board(y)) -> Cheating(x))", "all x y.((Addition(x) & Board(y)) -> Cheating(x))", "all x.((AddingPieces(x) & Board(y)) -> Cheating(x))", "all x.(AdditionToBoard(x) -> Cheating(x))", "all x.(AddingPieces(x) -> Cheating(x))"]}
{"id": "enwn_validation_141", "nl": "You shouldn't add pieces to the board.", "fol": "", "prediction": ["all x.((Board(x) & -AddPieces(x)) -> -AddPieces(x))", "all x.((Piece(x) & -AddToBoard(x)) -> -AddToBoard(x))", "all x.((Board(x) & -AddsPieces(x)) -> -AddsPieces(x))", "all x.((Piece(x) & -AddedToBoard(x)) -> -AddedToBoard(x))", "all x.((Piece(x) & -AddsToBoard(x)) -> -AddsToBoard(x))", "all x.((AddPieces(x) & -AddPieces(x)) -> -AddPieces(x))", "all x.((Board(x) & -AddPieces(x)) -> -AddPiecesTo(x,Board))", "all x y.((Board(x) & Board(y)) -> -AddPieces(x,y))", "all x.((AddPieces(x) & -AddPieces(x)) -> -AddPiecesToBoard(x))", "all x.((BuiltBoard(x) & -AddPieces(x)) -> -AddPieces(x))", "all x.((Board(x) & -AddedPieces(x)) -> -AddedPieces(x))", "all x.((Piece(x) & -AddsToBoard(x)) -> -AddToBoard(x))", "all x.((Piece(x) & -AddedToBoard(x)) -> -AddToBoard(x))", "all x.((Board(x) & -AddPiecesTo(x)) -> -AddPieces(x))", "all x.((Board(x) & -AddPiecesTo(x)) -> -AddPiecesTo(x))", "all x.((AddPieces(x) & Board(x)) -> -AddPieces(x))"]}
{"id": "enwn_validation_142", "nl": "Ben shouldn't have put the pawn on the board.", "fol": "", "prediction": ["all x y.((Pawn(x) & Ben(y)) -> -HasPawnOnBoard(y,x))", "all x.((Ben(x) & Pawn(x)) -> -HasPawnOnBoard(x))", "all x y.((Ben(x) & Pawn(y)) -> -HasPawnOnBoard(x,y))", "all x y.((Pawn(x) & Ben(y)) -> -HasPawn(x,y))", "all x y.((Pawn(x) & Ben(y)) -> -HasPawnOnBoard(y))", "all x y.((Pawn(x) & Ben(y)) -> -HasPawn(y,x))", "all x.((Ben(x) & Pawn(y)) -> -HasPawnOnBoard(x,y))", "all x y.((Pawn(x) & Ben(y)) -> -MadeOnBoard(y,x))", "all x y z.((Pawn(x) & Ben(y) & Board(z)) -> -HasPawn(y,z))", "all x y.((Pawn(x) & Ben(y)) -> -HasPawnOnBoard(x,y))", "all x y.((Ben(x) & Pawn(y)) -> -HasPawn(x,y))", "all x y.((Pawn(x) & Ben(y)) -> -PottedOnBoard(y,x))", "all x y.((Pawn(x) & Ben(y)) -> -PotteredOnBoard(y,x))", "all x y.((Pawn(x) & Ben(y)) -> -ShouldBeOnBoard(y,x))", "all x.((Ben(x) & Pawn(x)) -> -HasPawn(x))", "all x y.((Pawn(x) & Ben(y)) -> -MovedOnBoard(y,x))"]}
{"id": "enwn_validation_143", "nl": "Safe driving requires your full attention.", "fol": "", "prediction": ["all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.(SafeDriving(x) -> RequiresFullAttention(x))", "all x.(SecureDriving(x) -> RequiresFullAttention(x))", "all x y.((SafeDriving(x) & FullAttention(y)) -> Requires(x,y))", "all x.((SafeDriving(x) & RequiresFullAttention(x)) -> RequiresFullAttention(x))", "all x.((SafeDriving(x) & FullAttention(x)) -> Requires(x,y))", "all x y.((SafeDriving(x) & Attention(y)) -> Requires(x,y))", "all x.(SaferDriving(x) -> RequiresFullAttention(x))", "all x.(SafeDriving(x) -> RequiresYourFullAttention(x))", "all x.((SafeDriving(x) & FullAttention(x)) -> Requires(x))", "all x.(SafeDriving(x) -> FullAttention(x))", "all x.((SafeDriving(x) & RequiresFullAttention(x)) -> SafeDriving(x))", "all x.(SafeDriving(x) -> RequiresVolumeAttention(x))", "all x.((SafeDriving(x) & FullAttention(x)) -> RequiresAttention(x))", "all x.(SafeDriving(x) -> RequiresAttention(x))", "all x.(SafestDriving(x) -> RequiresFullAttention(x))"]}
{"id": "enwn_validation_144", "nl": "Jared checked his phone while pulling onto the freeway.", "fol": "", "prediction": ["all x y.((Jared(x) & Freeway(y)) -> CheckedPhone(x,y))", "all x y.((Jared(x) & Freeway(y)) -> ChecksPhone(x,y))", "all x.((Jared(x) & PullsOnFreeway(x)) -> ChecksPhone(x))", "all x y z.((Jared(x) & Phone(y) & Freeway(z) & PullsOn(x,y,z)) -> Checks(x,y))", "all x y z.((Jared(x) & Phone(y) & Freeway(z)) -> Checked(x,y,z))", "all x y z.((Jared(x) & Phone(y) & Freeway(z) & PullsOn(x,y,z)) -> Checks(x,y,z))", "all x y.((Jared(x) & Freeway(y) & PullsOn(x,y)) -> ChecksPhone(x))", "all x y.((Jared(x) & Freeway(y) & PullsOn(x,y)) -> ChecksPhone(x,y))", "all x y z.((Jared(x) & Phone(y) & Freeway(z) & PullsOn(x,y,z)) -> Checked(x,y))", "all x y z.((Jared(x) & Phone(y) & Freeway(z)) -> Checked(x,y))", "all x y z.((Jared(x) & Phone(y) & Freeway(z)) -> Checks(x,y,z))", "all x y z.((Jared(x) & Phone(y) & Freeway(z) & PullsOn(x,z)) -> Checks(x,y))", "all x.((Jared(x) & PullingOnFreeway(x)) -> CheckedPhone(x))", "all x.((Jared(x) & PullsOnFreeway(x)) -> CheckedPhone(x))", "all x.((Jared(x) & PullingOnFreeway(x)) -> ChecksPhone(x))", "all x y z.((Jared(x) & Phone(y) & Freeway(z) & PullingOn(x,y,z)) -> Checked(x,y))"]}
{"id": "enwn_validation_145", "nl": "Checking your phone takes your attention off of whatever else you're doing.", "fol": "", "prediction": ["all x y.((Phone(x) & Phone(y)) -> TakesAttentionOff(x,y))", "all x y.((Phone(x) & Activity(y)) -> TakesAttentionOff(x,y))", "all x.(CheckingPhone(x) -> TakesAttentionOffOf(x,y))", "all x y.((CheckingPhone(x) & Activity(y)) -> TakesAttentionOff(x,y))", "all x.(CheckingPhone(x) -> TakesAttentionOff(x))", "all x y.((CheckingPhone(x) & Other(y)) -> TakesAttentionOff(x,y))", "all x y.((CheckingPhone(x) & Doing(y)) -> TakesAttentionOff(x,y))", "all x y.((Phone(x) & Phone(y)) -> TakesAttentionOffOf(x,y))", "all x y.((Phone(x) & Activity(y)) -> ChecksTakesAttentionOff(x,y))", "all x.(ChecksPhone(x) -> TakesAttentionOffOf(x,y))", "all x.(ChecksPhone(x) -> TakesAttentionOff(x))", "all x y.((CheckingPhone(x) & Activity(y)) -> TakesAttentionOffOf(x,y))", "all x y.((CheckingPhone(x) & Doing(y)) -> TakesAttentionOffOf(x,y))", "all x.(CheckingPhone(x) -> TakesAttentionOffOfWhatever(x))", "all x y.((Phone(x) & Activity(y)) -> TakesAttentionOffOf(x,y))", "all x y.((CheckingPhone(x) & Other(y)) -> TakesAttentionOffOf(x,y))"]}
{"id": "enwn_validation_146", "nl": "If something prevents you from doing the right thing, it's wrong.", "fol": "", "prediction": ["all x.((Protects(x) & RightThing(x)) -> Wrong(x))", "all x.((ProtectsFromDoingRightThing(x)) -> Wrong(x))", "all x.((ProtectsYouFromDoingRightThing(x)) -> Wrong(x))", "all x.((Protects(x,y) & RightThing(y)) -> Wrong(x))", "all x.((Protects(x) & RightThing(x)) -> Worst(x))", "all x.(ProtectsFromDoingRightThing(x) -> Wrong(x))", "all x.((ProtectsFromDoingRightThing(x)) -> Worst(x))", "all x y.((Protects(x,y) & RightThing(y)) -> Wrong(x))", "all x.(ProhibitsDoingRightThing(x) -> Wrong(x))", "all x.((Prohibits(x) & RightThing(x)) -> Wrong(x))", "all x.((Protects(x) & RightDing(x)) -> Wrong(x))", "all x.((ProtectsFromDoingRightThing(x) & Wrong(x)) -> RightThing(x))", "all x.((Protects(x) & RightDoing(x)) -> Wrong(x))", "all x.((ProtectsYouFromDoingRightThing(x)) -> Worst(x))", "all x.((Protects(x,y) & RightThing(x)) -> Wrong(x))", "all x.((Protects(x) & RightThing(x)) -> WrongThing(x))"]}
{"id": "enwn_validation_147", "nl": "You should always drive safe.", "fol": "", "prediction": ["all x.(DriveSafe(x) -> AlwaysDriveSafe(x))", "all x.((DriveSafe(x)) -> AlwaysDriveSafe(x))", "all x.(DrivingSafe(x) -> AlwaysDrivesSafe(x))", "all x.(DriveSafely(x) -> AlwaysDriveSafe(x))", "all x.(DriveSafe(x) -> AlwaysDriveSafe(x))", "all x.(DriveSafe(x) -> Always(x))", "all x.(DriveSafe(x) -> ShouldDriveSafe(x))", "all x.(DriveSafe(x) -> AlwaysDrivingSafe(x))", "all x.(DriveSafe(x) -> NeverDriveSafe(x))", "all x.((DrivingSafe(x)) -> AlwaysDrivesSafe(x))", "all x.(DrivesSafe(x) -> AlwaysDrivesSafe(x))", "all x.(DrivingSafe(x) -> AlwaysDrive(x))", "all x.(DriveSafe(x) -> DriveSafe(x))", "all x.(DriveSafe(x) -> KeepsSafe(x))", "all x.(DriveSafe(x) -> Safe(x))", "all x.((DrivingSafe(x)) -> AlwaysDrive(x))"]}
{"id": "enwn_validation_148", "nl": "Jared took his attention off of driving to check his phone.", "fol": "", "prediction": ["all x.((Jared(x) & AttentionOffDriving(x)) -> ChecksPhone(x))", "all x.(Jared(x) -> (TakesAttentionOffDriving(x) & ChecksPhone(x)))", "all x y z.((Jared(x) & Driving(y) & Phone(z)) -> TakesAttentionToCheck(x,y,z))", "all x y.((Jared(x) & Phone(y)) -> TakesAttentionOff(x,y))", "all x y.((Jared(x) & Driving(y)) -> TakesAttentionToCheckPhone(x,y))", "all x y.((Jared(x) & Driver(y)) -> TakesAttentionOffToCheckPhone(x,y))", "all x.((Jared(x) & AttentionOffDriving(x)) -> CheckPhone(x))", "all x y.((Jared(x) & Phone(y)) -> TakesAttentionOffDrivingToCheck(x,y))", "all x y z.((Jared(x) & Driving(y) & Phone(z)) -> TakesAttentionOffToCheck(x,y,z))", "all x.(Jared(x) -> (TakedAttentionOffDriving(x) & CheckedPhone(x)))", "all x y.((Jared(x) & Driving(y)) -> TakesAttentionOffToCheckPhone(x,y))", "all x y z.((Jared(x) & Driving(y) & Phone(z)) -> TakedAttentionToCheck(x,y,z))", "all x.((Jared(x) & AttentionOffDrive(x)) -> ChecksPhone(x))", "all x.((Jared(x) & AttentionOfDriving(x)) -> ChecksPhone(x))", "all x y z.((Jared(x) & Car(y) & Phone(z)) -> TakesAttentionOff(x,y,z))", "all x y.((Jared(x) & Phone(y)) -> TakesAttentionOffDriving(x,y))"]}
{"id": "enwn_validation_149", "nl": "Checking his phone prevented Jared from driving safely.", "fol": "", "prediction": ["all x.(CheckingPhone(x) -> PreventsDrivingSafely(x))", "all x y.((CheckingPhone(x) & Jared(y)) -> PreventsDrivingSafely(y,x))", "all x.(CheckingPhone(x) -> PreventsDriving(x))", "all x y.((CheckingPhone(x) & Jared(y)) -> -DrivingSafely(y))", "all x.(CheckingPhone(x) -> -DrivingSafely(x))", "all x.(CheckingPhone(x) -> PreventsDrivingSafety(x))", "all x.(CheckingPhone(x) -> PreventsDrivingSecurely(x))", "all x y.((CheckingPhone(x) & Jared(y)) -> PreventsDrivingSafely(y))", "all x.(CheckingPhone(x) -> PreventsJaredFromDrivingSafely(x))", "all x y.((Phone(x) & Jared(y) & Checking(x,y)) -> PreventsDrivingSafely(y,x))", "all x y.((CheckingPhone(x) & Jared(y)) -> PreventsDrivingSafely(x,y))", "all x y.((CheckingPhone(x) & Jared(y)) -> -DrivingSafely(y,x))", "all x y.((CheckingPhone(x) & Jared(y)) -> PreventsDrivingSafety(y,x))", "all x y.((Phone(x) & Jared(y) & Checking(x,y)) -> -DrivingSafely(y))", "all x y.((Jared(x) & Phone(y) & Checking(x,y)) -> -DrivingSafely(x,y))", "all x y.((Jared(x) & Phone(y) & Checking(x,y)) -> PreventsDrivingSafely(x,y))"]}
{"id": "enwn_validation_150", "nl": "You shouldn't do anything that prevents you from driving safe.", "fol": "", "prediction": ["all x.((Does(x) & PreventsDrivingSafe(x)) -> -DrivingSafe(x))", "all x.((Does(x) & PreventsDrivingSafe(x)) -> -Do(x))", "all x.((Do(x) & PreventsDrivingSafe(x)) -> -Do(x))", "all x.((Do(x) & PreventsDrivingSafe(x)) -> -DrivingSafe(x))", "all x.((Does(x) & PreventsDrivingSafe(x)) -> -(Does(x) & PreventsDrivingSafe(x)))", "all x.((Does(x) & PreventsDriveSafe(x)) -> -DrivingSafe(x))", "all x.((Does(x) & PreventsDrivingSafe(x)) -> -(DrivingSafe(x) | DrivingSafe(x))))", "all x.((Doing(x) & PreventsDrivingSafe(x)) -> -DrivingSafe(x))", "all x.((Does(x) & PreventsDrivingSafe(x)) -> -Does(x))", "all x.((Does(x) & -PreventsDrivingSafe(x)) -> -DrivingSafe(x))", "all x.((DrivingSafe(x) & -DrivingSafe(x)) -> -DrivingSafe(x))", "all x.((Does(x) & PreventsDrivingSafe(x)) -> -(DrivingSafe(x) & -DrivingSafe(x)))", "all x.((Does(x) & PreventsDrivingSafe(x)) -> -Dose(x))", "all x.((Does(x) & PreventsDrivingSafe(x)) -> -(DrivingSafe(x) | DrivingSafe(x)))", "all x.((Does(x) & PreventsDrivingSafe(x)) -> -Do.(x))", "all x.((Does(x) & PreventsDriveSafe(x)) -> -Do(x))"]}
{"id": "enwn_validation_151", "nl": "Jared should not have checked his phone.", "fol": "", "prediction": ["all x.((Jared(x) & -CheckedPhone(x)) -> -CheckedPhone(x))", "all x.((Jared(x) & Phone(y)) -> -Checked(x,y))", "all x y.((Jared(x) & Phone(y)) -> -Checked(x,y))", "Jared should not have checked his phone.", "all x y.((Jared(x) & Phone(y) & -Checked(x,y)) -> -Checked(x,y))", "all x.((Jared(x) & Phone(y) & -Checked(x,y)) -> -Checked(x,y))", "all x.(Jared(x) -> -CheckedPhone(x))", "all x.((Jared(x) & -CheckedPhone(x)) -> NotCheckedPhone(x))", "all x.((Jared(x) & -checkedPhone(x)) -> -CheckedPhone(x))", "all x.((Jared(x) & -CheckedPhone(x)) -> -HasCheckedPhone(x))", "all x.((Jared(x) & Phone(x)) -> -Checked(x))", "all x.((Jared(x) & ShouldNotCheckPhone(x)) -> -CheckedPhone(x))", "all x y.((Jared(x) & Phone(y) & -Checked(x,y)) -> NotChecked(x,y))", "all x.((Jared(x) & -Checked(x)) -> -Checked(x))", "all x y.((Jared(x) & Phone(y)) -> ShouldNotChecked(x,y))", "all x.((Jared(x) & Phone(y) & -Checked(x,y)) -> NotChecked(x,y))"]}
{"id": "enwn_validation_152", "nl": "There are some people who haven't gotten a slice yet.", "fol": "", "prediction": ["exists x.(Person(x) & -HasSlice(x))", "exists x.(Person(x) & -GetsSlice(x))", "exists x.(Person(x) & -GaveSlice(x))", "exists x.(Person(x) & -GivingSlice(x))", "exists x.(Person(x) & -GaggedSlice(x))", "exists x.(Person(x) & -GatheredSlice(x))", "exists x.(Person(x) & -GaredSlice(x))", "exists x.(Person(x) & -GettingSlice(x))", "exists x.(Person(x) & -GapedSlice(x))", "exists x.(Person(x) & -GivenSlice(x))", "exists x.(Person(x) & -GoesSlice(x))", "exists x.(Person(x) & -GainSlice(x))", "exists x.(Person(x) & -GoneSlice(x))", "exists x.(Person(x) & -GetSlice(x))", "exists x.(Person(x) & -GiftsSlice(x))", "exists x.(People(x) & -HasSlice(x))"]}
{"id": "enwn_validation_153", "nl": "Taking a second portion before someone else has gotten a first portion is unfair.", "fol": "", "prediction": ["all x.((TakesSecondPurchase(x) & TakesFirstPurchase(x)) -> Unfair(x))", "all x y.((SecondPurchase(x) & Person(y) & TakesSecondPurchase(x,y)) -> Unfair(x))", "all x.((TakesSecondParticipation(x) & TakesFirstParticipation(x)) -> Unfair(x))", "all x y.((Person(x) & Person(y) & TakesSecondPurchase(x,y)) -> Unfair(x))", "all x y.((TakesSecondPurchase(x,y) & TakesFirstPurchase(x,y)) -> Unfair(x))", "all x y z.((SecondPurchase(x) & Person(y) & FirstPurchase(z) & Takes(x,y,z)) -> Unfair(x))", "all x y.((SecondPurchase(x) & Person(y) & GetsFirstPurchase(x,y)) -> Unfair(x))", "all x y.((TakesSecondPurchase(x) & TakesFirstPurchase(y)) -> Unfair(x))", "all x y.((Person(x) & Person(y) & TakesSecondParticipation(x,y)) -> Unfair(x))", "all x y.((TakesSecondParticipation(x) & TakesFirstParticipation(y)) -> Unfair(x))", "all x y.((TakesSecondParticipation(x,y) & TakesFirstParticipation(x,y)) -> Unfair(x))", "all x y z.((SecondPurchase(x) & Person(y) & FirstPurchase(z)) -> Unfair(x))", "all x y z.((SecondPurchase(x) & Person(y) & FirstPurchase(z) & Takes(x,y)) -> Unfair(x))", "all x y.((TakesSecondPurchase(x,y) & TakesFirstPurchase(y)) -> Unfair(x))", "all x y.((SecondPurchase(x) & Person(y) & Takes(x,y)) -> Unfair(x))", "all x y.((TakesSecondParticipation(x) & Person(y) & GetsFirstParticipation(y)) -> Unfair(x))"]}
{"id": "enwn_validation_154", "nl": "You want to take a second slice of pizza.", "fol": "", "prediction": ["all x.((YouWantToTakeSecondSliceOfPizza(x)) -> TakesSecondSliceOfPizza(x))", "all x.(YouWantToTakeSecondSliceOfPizza(x) -> TakesSecondSliceOfPizza(x))", "all x.(YouWantToTakeSecondSliceOfPizza(x) -> TakeSecondSliceOfPizza(x))", "all x.((YouWantToTakeSecondSliceOfPizza(x)) -> TakeSecondSliceOfPizza(x))", "all x.(TakeSecondSliceOfPizza(x) -> WantsToTakeSecondSliceOfPizza(x))", "all x y.((Pizza(x) & Pizza(y)) -> WantsToTakeSecondSlice(x,y))", "all x.((YouWantToTakeSecondSliceOfPizza(x)) -> TakesSixthSliceOfPizza(x))", "all x.(TakeSecondSliceOfPizza(x) -> WantsToTakeSixthSliceOfPizza(x))", "all x.((Pizza(x) & SecondSlice(x)) -> WantsToTake(x,Pizza))", "all x y.((Pizza(x) & Pizza(y)) -> TakeSecondSlice(x,y))", "exists x.(Pizza(x) & TakeSecondSlice(x))", "exists x.(Pizza(x) & SecondSlice(x))", "all x y.((Pizza(x) & Pizza(y)) -> TakesSecondSlice(x,y))", "all x.((Pizza(x) & TakeSecondSlice(x)) -> WantsToTakeSecondSlice(x))", "exists x.(Pizza(x) & TakesSecondSlice(x))", "all x.((Pizza(x) & SecondSlice(x)) -> Takes(x,Pizza))"]}
{"id": "enwn_validation_155", "nl": "If you want to do something, but it's too soon, you should wait.", "fol": "", "prediction": ["all x.((WantToDo(x) & TooFast(x)) -> ShouldWarn(x))", "all x.((WantToDo(x) & TooFast(x)) -> ShouldWait(x))", "all x.((WantToDo(x) & TooFast(x)) -> Wait(x))", "all x.((WantToDo(x) & TooFast(x)) -> ShouldHave(x))", "all x.((WantToDo(x) & TooFast(x)) -> ShouldWarm(x))", "all x.((WantToDo(x) & TooFast(x)) -> ShouldWear(x))", "all x.((WantToDo(x) & TooJuicy(x)) -> ShouldWait(x))", "all x.((WantsToDo(x) & TooFast(x)) -> ShouldWarn(x))", "all x.((WantToDo(x) & TooOld(x)) -> ShouldWait(x))", "all x.((Does(x) & TooFast(x)) -> ShouldWait(x))", "all x.((Does(x) & TooFast(x)) -> ShouldWarn(x))", "all x.((WantToDo(x) & TooOld(x)) -> ShouldWarn(x))", "all x.((WantToDo(x) & TooJuicy(x)) -> Wait(x))", "all x.((Does(x) & TooFast(x)) -> Wait(x))", "all x.((WantToDo(x) & TooOld(x)) -> Wait(x))", "all x.((WantToDo(x) & TooFast(x)) -> ShouldWaitFor(x))"]}
{"id": "enwn_validation_156", "nl": "It's too soon to take a second slice.", "fol": "", "prediction": ["all x.((Slice(x) & TooFastToTakeSlice(x)) -> TooFastToTakeSlice(x))", "all x.((Slice(x) & TooFastToTake(x,Slice)) -> TooFastToTake(x,Slice))", "all x.((Slice(x) & TooFastToTake(x,2)) -> TooFastToTake(x,2))", "all x y.((Slice(x) & Slice(y)) -> TooFastToTake(x,y))", "all x.((FastToTakeSlice(x)) -> TooFastToTakeSlice(x))", "all x.((TooFastToTakeSlice(x)) -> TooFastToTakeSlice(x))", "all x.((Slice(x) & TooFastToTake(x,second)) -> TooFastToTake(x,second))", "all x.((Slice(x) & TooFast(x)) -> TakesSecondSlice(x))", "all x.((Slice(x) & TooFastToTake(x,2)) -> TooFastToTake(x,3))", "all x.((Slice(x) & TooFast(x)) -> TakesSecond(x))", "all x.((Slice(x) & TooOldForSlice(x)) -> TakesSecondSlice(x))", "all x.((Slice(x) & TooFastToTake(x,2)) -> TooFast(x))", "all x.((Slice(x) & TooFast(x)) -> TakeSecondSlice(x))", "all x.((Slice(x) & TooFastToTake(x,second)) -> TooFast(x))", "all x.((Slice(x) & TooFastToTakeSlice(x)) -> TooFast(x))", "all x.((Slice(x) & TooFastToTake(x,Slice)) -> TooFast(x))"]}
{"id": "enwn_validation_157", "nl": "You want to take a slice of pizza but it's too soon.", "fol": "", "prediction": ["all x.((Pizza(x) & TooFast(x)) -> WantsToTake(x,y))", "all x.((SliceOfPizza(x) & TooFast(x)) -> WantsToTake(x,Pizza))", "all x y.((Pizza(x) & Slice(y)) -> TooFast(x,y))", "all x.((Pizza(x) & TooFast(x)) -> WantsToTake(x,x))", "all x y.((Pizza(x) & Pizza(y) & TooFast(x)) -> WantsToTake(x,y))", "all x y.((Pizza(x) & Pizza(y)) -> (TooFast(x,y)))", "all x y.((Pizza(x) & Slice(y) & TooFast(x)) -> WantsToTake(x,y))", "exists x.(Pizza(x) & WantsToTake(x,y) & TooFast(y))", "all x.((SliceOfPizza(x) & TooFast(x)) -> WantsToTake(x,pizza))", "all x y.((Pizza(x) & Slice(y)) -> (TooFast(x,y)))", "all x y.((Pizza(x) & Pizza(y)) -> TooFast(x,y))", "all x.((Pizza(x) & TooJuicy(x)) -> WantsToTake(x,y))", "all x y.((Pizza(x) & Slice(y)) -> TooFast(x))", "all x.((Pizza(x) & TooFast(x)) -> WantsToTake(x,pizza))", "all x.((SliceOfPizza(x) & TooFast(x)) -> WantsToTake(x,y))", "all x.((Pizza(x) & TooJuicy(x)) -> WantsToTake(x,x))"]}
{"id": "enwn_validation_158", "nl": "You should wait before taking a second slice of pizza.", "fol": "", "prediction": ["all x.((Pizza(x) & SecondSlice(x)) -> Wait(x))", "all x.((Pizza(x) & Wait(x)) -> TakesSecondSlice(x))", "all x.((Pizza(x) & Wait(x)) -> TakeSecondSlice(x))", "all x.((Pizza(x) & TakesSecondSlice(x)) -> Wait(x))", "all x.((Pizza(x) & WaitBefore(x)) -> TakesSecondSlice(x))", "all x.((Pizza(x) & TakesSecondSlice(x)) -> Waits(x))", "all x.((Pizza(x) & Waits(x)) -> TakesSecondSlice(x))", "all x.((Pizza(x) & TakeSecondSlice(x)) -> Wait(x))", "all x.((Pizza(x) & SecondSlice(x)) -> Waits(x))", "all x.((SliceOfPizza(x) & Wait(x)) -> TakesSecondSliceOfPizza(x))", "all x.((Pizza(x) & SecondSlice(x)) -> WaitFor(x))", "all x y.((Pizza(x) & Pizza(y)) -> WaitBeforeTaking(x,y))", "all x.((SliceOfPizza(x) & Wait(x)) -> TakesSecondSlice(x))", "all x y.((Pizza(x) & Pizza(y)) -> Wait(x,y))", "all x.((TakesSecondSliceOfPizza(x)) -> Waits(x))", "all x.((SliceOfPizza(x) & Wait(x)) -> TakesSecond(x,Pizza))"]}
{"id": "enwn_validation_159", "nl": "Murder means killing someone with premeditation.", "fol": "", "prediction": ["all x y.((Murder(x) & Person(y)) -> KillsWithPremeditation(x,y))", "all x y z.((Murder(x) & Person(y) & Premeditation(z)) -> Kills(x,y,z))", "all x y z.((Murder(x) & Person(y) & Premeditation(z)) -> KillsWith(x,y,z))", "all x.(Murder(x) -> KillsWithPremeditation(x))", "all x y.((Murder(x) & Person(y) & Premeditation(x)) -> Kills(x,y))", "all x y.((Murder(x) & Person(y) & Premeditation(x,y)) -> Kills(x,y))", "all x y.((Murder(x) & Person(y) & Premeditation(y)) -> Kills(x,y))", "all x y.((Murder(x) & Person(y) & Premeditation(x)) -> KillsWith(x,y))", "all x y.((Murder(x) & Person(y)) -> Kills(x,y))", "all x y.((Murder(x) & Person(y) & Premeditation(x,y)) -> KillsWith(x,y))", "all x y.((Murder(x) & Person(y) & Premeditation(y)) -> KillsWith(x,y))", "all x.(Murder(x) -> KillsPersonWithPremeditation(x))", "all x y z.((Murder(x) & Person(y) & Premeditation(z)) -> Kills(x,y))", "all x y.((Murder(x) & Person(y) & Premeditation(z)) -> Kills(x,y,z))", "all x y.((Murder(x) & Person(y) & Premeditation(z)) -> KillsWith(x,y,z))", "all x y z.((Murder(x) & Person(y) & Premeditation(z)) -> Kill(x,y,z))"]}
{"id": "enwn_validation_160", "nl": "Premeditation means thinking through something before doing it.", "fol": "", "prediction": ["all x.(Premeditation(x) -> ThinksThrough(x))", "all x.(Premeditation(x) -> (ThinkingThrough(x) & Doing(x)))", "all x y.((Premeditation(x) & Something(y)) -> ThinksThrough(x,y))", "all x.(Premeditation(x) -> (ThinkingThrough(x) & BeforeDoing(x)))", "all x.(Premeditation(x) -> (ThinkingThrough(x) & BeforeDoing(x)))", "all x.(Premeditation(x) -> ThinksThrough(x,y))", "all x.(Premeditation(x) -> (ThinkingThrough(x) & Doing(x)))", "all x y.((Premeditation(x) & (ThinkingThrough(x,y) | Doing(x,y))) -> ThinksThrough(x,y))", "all x y.((Premeditation(x) & (ThinkingThrough(y) | Doing(y))) -> ThinksThrough(x,y))", "all x.(Premeditation(x) -> ThinkingThrough(x))", "all x.(Premeditation(x) -> ThinksThroughThingsBeforeDoing(x))", "all x y.((Premeditation(x) & (ThinkingThrough(y,x) | Doing(y,x))) -> ThinksThrough(x,y))", "all x y.((Premeditation(x) & (ThinkingThrough(x,y) | Doing(y))) -> ThinksThrough(x,y))", "all x y.((Premeditation(x) & (ThinkingThrough(x,y) | Doing(x,y))) -> ThinkingThrough(x,y))", "all x y.((Premeditation(x) & (ThinkingThrough(y) | Doing(y))) -> ThinkingThrough(x,y))", "all x y.((Premeditation(x) & ThinkingThrough(y,x)) -> Doing(x,y))"]}
{"id": "enwn_validation_161", "nl": "David bought anthrax, then used it to try and kill Ingrid.", "fol": "", "prediction": ["all x y z.((David(x) & Anthrax(y) & Ingrid(z)) -> (Buys(x,y) & Uses(x,z)))", "all x y.((David(x) & Ingrid(y)) -> (BuysAnthrax(x,y) & UsesAnthraxToKill(x,y)))", "all x y.((David(x) & Ingrid(y)) -> (BuysAnthrax(x,y) & UsesAnthrax(x,y)))", "all x y.((David(x) & Ingrid(y)) -> (BuysAnthrax(x,y) & UsesAnthraxToTryAndKill(x,y)))", "all x y.((David(x) & Ingrid(y)) -> (BuysAnthrax(x,y) & UsesAnthraxToTryToKill(x,y)))", "all x y z.((David(x) & Anthrax(y) & Ingrid(z)) -> (Buys(x,y) & UsesToTryToKill(x,z)))", "all x y z.((David(x) & Anthrax(y) & Ingrid(z)) -> (Buys(x,y) & UsesToTryAndKill(x,z)))", "all x y z.((David(x) & Anthrax(y) & Ingrid(z)) -> (Buys(x,y) & UsedToTryAndKill(x,z)))", "all x y z.((David(x) & Anthrax(y) & Ingrid(z)) -> (Buys(x,y) & UsesToKill(x,z)))", "all x y z.((David(x) & Anthrax(y) & Ingrid(z)) -> (Buys(x,y) & UsedToTryToKill(x,z)))", "all x y z.((David(x) & Anthrax(y) & Ingrid(z)) -> (Buys(x,y) & UsedToKill(x,z)))", "all x y z.((David(x) & Anthrax(y) & Ingrid(z)) -> (Buys(x,y) & Uses(x,y)))", "all x y z.((David(x) & Anthrax(y) & Ingrid(z)) -> (Buys(x,y) & UsesToTry(x,z)))", "all x y.((David(x) & Ingrid(y)) -> (BuysAthrax(x,y) & UsesAthraxToKill(x,y)))", "all x y.((David(x) & Ingrid(y)) -> (BuysAthrax(x,y) & UsesAthrax(x,y)))", "all x y z.((David(x) & Anthrax(y) & Ingrid(z)) -> (Bought(x,y) & Used(x,z)))"]}
{"id": "enwn_validation_162", "nl": "Buying supplies for something is part of planning for something.", "fol": "", "prediction": ["all x y.((BuysSupplies(x) & Something(y)) -> PartOfPlanningFor(x,y))", "all x y.((BuysSupplies(x) & Something(y)) -> PartOfPlanning(x,y))", "all x y.((BuysSupplies(x) & Something(y)) -> PlanningFor(x,y))", "all x y.((BuyingSupplies(x) & Something(y)) -> PlanningFor(x,y))", "all x y.((BuysSupplies(x) & Product(y)) -> PlanningFor(x,y))", "all x y.((BuysSuppliesFor(x,y) & Something(y)) -> PartOfPlanningFor(x,y))", "all x.(BuyingSupplies(x) -> PlanningFor(x))", "all x y.((BuysSupplies(x,y) & Something(y)) -> PartOfPlanningFor(x,y))", "all x y.((BuysSupplies(x,y) & Something(y)) -> PlanningFor(x,y))", "all x y.((BuysSupplies(x) & Something(y)) -> PlansFor(x,y))", "all x y.((BuysSupplies(x,y) & Something(y)) -> PartOfPlanning(x,y))", "all x y.((BuysSupplies(x) & Product(y)) -> PartOfPlanningFor(x,y))", "all x y.((BuysSuppliesFor(x,y) & Something(y)) -> PlanningFor(x,y))", "all x.(BuysSupplies(x) -> PlanningFor(x))", "all x y.((BuyingSupplies(x) & Something(y)) -> PartOfPlanning(x,y))", "all x y.((BuysSuppliesFor(x,y) & Something(y)) -> PartOfPlanning(x,y))"]}
{"id": "enwn_validation_163", "nl": "David planned to kill Ingrid before trying to kill her.", "fol": "", "prediction": ["all x y.((David(x) & Ingrid(y)) -> PlannedToKill(x,y))", "all x y.((David(x) & Ingrid(y)) -> (PlannedToKill(x,y) & AttemptedToKill(x,y)))", "all x y z.((David(x) & Ingrid(y) & Ingrid(z)) -> PlannedToKill(x,y,z))", "all x.((David(x) & Ingrid(y)) -> PlannedToKill(x,y))", "all x y.((David(x) & Ingrid(y)) -> (PlannedToKill(x,y) & TriedToKill(x,y)))", "all x.((David(x) & Ingrid(x)) -> PlannedToKill(x,Ingrid))", "all x y.((David(x) & Ingrid(y)) -> (PlantedToKill(x,y) & TriedToKill(x,y)))", "All x y.((David(x) & Ingrid(y)) -> PlannedToKill(x,y))", "all x y.((David(x) & Ingrid(y)) -> (PlannedToKill(x,y) & PlannedToKill(x,y)))", "all x y.((David(x) & Ingrid(y)) -> (PlantedToKill(x,y) & AttemptedToKill(x,y)))", "all x y.((David(x) & Ingrid(y)) -> (PlannedToKill(x,y) & TryingToKill(x,y)))", "all x y.((David(x) & Ingrid(y)) -> PlantedToKill(x,y))", "All x y z.((David(x) & Ingrid(y) & Ingrid(z)) -> PlannedToKill(x,y,z))", "all x y.((David(x) & Ingrid(y)) -> (PlannedToKill(x,y) | PlannedToKill(x,y)))", "all x y z.((David(x) & Ingrid(y) & Ingrid(z)) -> PlantedToKill(x,y,z))", "all x y.((David(x) & Ingrid(y)) -> PlannedToTreat(x,y))"]}
{"id": "enwn_validation_164", "nl": "David tried to kill Ingrid in a premeditated way.", "fol": "", "prediction": ["all x y.((David(x) & Ingrid(y)) -> TriedToKill(x,y))", "all x y.((David(x) & Ingrid(y)) -> (TriedToKill(x,y) & Premeditated(x)))", "all x y z.((David(x) & Ingrid(y) & Premeditated(z)) -> TriedToKill(x,y,z))", "all x y.((David(x) & Ingrid(y)) -> (TriedToKill(x,y) & Premeditated(y)))", "all x y.((David(x) & Ingrid(y)) -> (TriedToKill(x,y) & Premeditated(x,y)))", "all x y.((David(x) & Ingrid(y)) -> TriedToKillInPremeditatedManner(x,y))", "all x y.((David(x) & Ingrid(y)) -> KillsPremeditatedly(x,y))", "all x y.((David(x) & Ingrid(y)) -> (TriedToKillIngrid(x,y) & Premeditated(x)))", "all x y z.((David(x) & Ingrid(y) & Ingrid(z)) -> (TriedToKill(x,y,z) & Premeditated(x)))", "all x y z.((David(x) & Ingrid(y) & Premeditated(z)) -> TriedToKillIngrid(x,y,z))", "all x y z.((David(x) & Ingrid(y) & Premeditated(z)) -> Kills(x,y,z))", "all x y.((David(x) & Ingrid(y) & Premeditated(x)) -> Kills(x,y))", "all x y.((David(x) & Ingrid(y)) -> TriedToKillPremeditatedly(x,y))", "all x y.((David(x) & Ingrid(y)) -> (TriedToKillIngrid(x,y) & Premeditated(y)))", "all x y z.((David(x) & Ingrid(y) & Premeditated(z)) -> KillsIngrid(x,y,z))", "all x y.((David(x) & Ingrid(y)) -> KillsInPremeditatedManner(x,y))"]}
{"id": "enwn_validation_165", "nl": "David tried to murder Ingrid.", "fol": "", "prediction": ["all x y.((David(x) & Ingrid(y)) -> TriedToMorn(x,y))", "all x y z.((David(x) & Ingrid(y) & Ingrid(z)) -> TriedToMorn(x,y,z))", "all x y.((David(x) & Ingrid(y)) -> TriedToMurder(x,y))", "all x y z.((David(x) & Ingrid(y) & Ingrid(z)) -> TriedToMurder(x,y,z))", "all x.((David(x) & Ingrid(x)) -> TriedToMorn(x,Ingrid))", "All x y.((David(x) & Ingrid(y)) -> TriedToMorn(x,y))", "(TriedToMornIngrid(David) & Ingrid(Ingrid))", "all x.((David(x) & Ingrid(y)) -> TriedToMorn(x,y))", "all x y z.((David(x) & Ingrid(y) & Ingrid(z)) -> (TriedToMorn(x,y,z)))", "all x y z.((David(x) & Ingrid(y) & Ingrid(z)) -> (TriedToMurder(x,y,z)))", "all x.((David(x) & Ingrid(x)) -> TriedToMurder(x,Ingrid))", "All x y.((David(x) & Ingrid(y)) -> TriedToMurder(x,y))", "all x y z.((David(x) & Ingrid(y) & Ingrid(z)) -> TriedToMormon(x,y,z))", "all x y.((David(x) & Ingrid(y)) -> TriedToMormon(x,y))", "all x y z.((David(x) & Ingrid(y) & Ingrid(z)) -> TrysToMorn(x,y,z))", "all x y.((David(x) & Ingrid(y)) -> TriedToMortle(x,y))"]}
{"id": "enwn_validation_166", "nl": "It's a faux pas to offer someone something they can't accept.", "fol": "", "prediction": ["all x y.((FauxPas(x) & Person(y) & CannotAccept(y,x)) -> Offers(x,y))", "all x y.((FauxPas(x) & Person(y) & Offers(x,y)) -> -CanAccept(y,x))", "all x y.((FauxPas(x) & Person(y) & Offers(x,y)) -> -CanAccept(y))", "all x y.((FauxPast(x) & Person(y) & CannotAccept(y,x)) -> Offers(x,y))", "all x y.((FauxPas(x) & Person(y) & Offers(x,y)) -> Can'tAccept(y))", "all x y.((FauxPas(x) & Person(y) & Offers(x,y)) -> -CanAccept(y,y))", "all x y.((FauxPas(x) & Person(y) & Offers(x,y)) -> CannotAccept(y,x))", "all x y.((FauxPas(x) & Person(y) & Offers(y,x)) -> -CanAccept(y,x))", "all x y.((FauxPas(x) & Person(y) & Offers(x,y)) -> CannotAccept(y))", "all x y.((FauxPast(x) & Person(y) & Offers(x,y)) -> -CanAccept(y,x))", "all x y.((FauxPast(x) & Person(y) & Offers(x,y)) -> -CanAccept(y))", "all x y.((FauxPas(x) & Person(y) & Offers(x,y)) -> -CanAccept(x,y))", "all x y.((FauxPas(x) & Person(y) & Offers(x,y)) -> Can'tAccept(y,x))", "all x y.((FauxPas(x) & Person(y) & Offers(x,y)) -> -Accepts(y,x))", "all x y.((FauxPast(x) & Person(y) & Offers(x,y)) -> Can'tAccept(y))", "all x y.((FauxPas(x) & Person(y) & Offers(x,y)) -> CantAccept(y))"]}
{"id": "enwn_validation_167", "nl": "Maria is pregnant.", "fol": "", "prediction": ["all x.(Maria(x) -> Pregnant(x))", "all x.(Maria(x) -> Pregnant(x))", "all x.((Maria(x) & Pregnant(x)) -> Pregnant(x))", "All x.(Maria(x) -> Pregnant(x))", "All x.(Maria(x) -> Pregnant(x))", "all x.((Maria(x) & Pregnant(x)) -> Is(x,y))", "all x.((Maria(x) & Expected(x)) -> Pregnant(x))", "all x.((Maria(x) & Pregnant(x)) -> Is(x,Maria))", "all x.((Maria(x) & Pregnant(x)) -> IsPregnant(x))", "Maria isPregnant(Maria)", "(Pregnant(Maria))", "all x.((Maria(x) & Pregnant(x)) -> Breastfeeding(x))", "all x.((Maria(x) & Pregnant(x)) -> Remains(x))", "all x.((Maria(x) & Pregnant(x)) -> Is(x,Maria))", "all x.((Maria(x) & Pregnant(x)) -> Pregnancy(x))", "all x.((Maria(x) & Pregnant(x)) -> IsPatient(x))"]}
{"id": "enwn_validation_168", "nl": "People who are pregnant shouldn't drink alcohol.", "fol": "", "prediction": ["all x.((Patient(x) & Pregnant(x)) -> -DrinkAlcohol(x))", "all x.((Pregnant(x) & DrinksAlcohol(x)) -> -DrinksAlcohol(x))", "all x.((Patient(x) & Pregnant(x)) -> -DrinksAlcohol(x))", "all x.((Paternal(x) & -DrinkAlcohol(x)) -> -DrinkAlcohol(x))", "all x.((Paternal(x) & DrinksAlcohol(x)) -> -DrinksAlcohol(x))", "all x.(Pregnant(x) -> -DrinkAlcohol(x))", "all x.((Pregnant(x) & -DrinkAlcohol(x)) -> -DrinkAlcohol(x))", "all x.((Patient(x) & DrinksAlcohol(x)) -> -DrinksAlcohol(x))", "all x.((Pregnant(x) & DrinksAlcohol(x)) -> -shouldDrinkAlcohol(x))", "all x.((Paternal(x) & -DrinksAlcohol(x)) -> -DrinksAlcohol(x))", "all x.((Patient(x) & -DrinksAlcohol(x)) -> -DrinksAlcohol(x))", "all x.((Patient(x) & -DrinkAlcohol(x)) -> -DrinkAlcohol(x))", "all x.((Patient(x) & Pregnant(x)) -> -shouldDrinkAlcohol(x))", "all x.((Pregnant(x) & DrinksAlcohol(x)) -> -ShouldDrinkAlcohol(x))", "all x.((Pregnant(x) & DrinksAlcohol(x)) -> -CanDrinkAlcohol(x))", "all x.((Paternal(x) & DrinksAlcohol(x)) -> -shouldDrinkAlcohol(x))"]}
{"id": "enwn_validation_169", "nl": "Beer is an alcoholic beverage.", "fol": "", "prediction": ["all x.(Beer(x) -> AlcoholicBeverage(x))", "all x.(Beverage(x) -> AlcoholicBeverage(x))", "all x.(Beverage(x) -> Alcoholic(x))", "all x y.((Beer(x) & AlcoholicBeverage(y)) -> AlcoholicBeverage(x))", "all x.(Beer(x) -> AlcoholicBeverage(x))", "all x y.((Beer(x) & AlcoholicBeverage(y)) -> AlcoholicBeverage(x,y))", "exists x.(Beer(x) & AlcoholicBeverage(x))", "all x.((Beer(x) & AlcoholicBeverage(x)) -> AlcoholicBeverage(x))", "all x y.((Beer(x) & AlcoholicBeverage(y)) -> Drinks(x,y))", "all x y.((Beer(x) & AlcoholicBeverage(y)) -> Is(x,y))", "all x y.((Beer(x) & AlcoholicBeverage(y)) -> Drinkable(x,y))", "all x y.((Beer(x) & AlcoholicBeverage(y)) -> Drinking(x,y))", "all x.((Beer(x) & AlcoholicBeverage(x)) -> Drinkable(x))", "all x y.((Beer(x) & AlcoholicBeverage(y)) -> Alcoholic(x))", "all x y.((Beer(x) & AlcoholicBeverage(y)) -> Has(x,y))", "all x y.((Beer(x) & AlcoholicBeverage(y)) -> Bottled(x,y))"]}
{"id": "enwn_validation_170", "nl": "People who are pregnant shouldn't drink beer.", "fol": "", "prediction": ["all x.((Patient(x) & Pregnant(x)) -> -DrinkBeer(x))", "all x.((Patient(x) & Pregnant(x)) -> -DrinksBeer(x))", "all x.((Pregnant(x) & DrinksBeer(x)) -> -DrinksBeer(x))", "all x.((Paternal(x) & -DrinkBeer(x)) -> -DrinkBeer(x))", "all x.((Patient(x) & DrinksBeer(x)) -> -DrinksBeer(x))", "all x.((Pregnant(x) & -DrinkBeer(x)) -> -DrinkBeer(x))", "all x.((Patient(x) & Pregnant(x)) -> -shouldDrinkBeer(x))", "all x.((Paternal(x) & DrinksBeer(x)) -> -DrinksBeer(x))", "all x.((Paternal(x) & -DrinksBeer(x)) -> -DrinksBeer(x))", "all x.(Pregnant(x) -> -DrinkBeer(x))", "all x.((Patient(x) & -DrinksBeer(x)) -> -DrinksBeer(x))", "all x.((Pregnant(x) & -DrinksBeer(x)) -> -DrinksBeer(x))", "all x.((Patient(x) & Pregnant(x)) -> -Beverage(x))", "all x.((Patient(x) & -DrinkBeer(x)) -> -DrinkBeer(x))", "all x.((Patient(x) & Pregnant(x)) -> -DrinksBeverage(x))", "all x.((Patient(x) & Pregnant(x)) -> -Drink(x,Beer))"]}
{"id": "enwn_validation_171", "nl": "Maria shouldn't drink beer.", "fol": "", "prediction": ["all x.(Maria(x) -> -DrinksBeer(x))", "all x.((Maria(x) & -DrinksBeer(x)) -> -DrinksBeer(x))", "all x.((Maria(x) & -DrinkBeer(x)) -> -DrinkBeer(x))", "all x.((Maria(x) & -DrinksBeer(x)) -> -DrinksBeer(x))", "all x.((Maria(x) & -DrinkBeer(x)) -> -DrinkBeer(x))", "all x.(Maria(x) -> -DrinkBeer(x))", "all x.(Maria(x) -> -DrinksBeer(x))", "all x.((Maria(x) & -DrinksBeer(x)) -> -DrinksBeverage(x))", "all x.((Maria(x) & -DrinksBeer(x)) -> -DrinksBeverage(x))", "all x.(Maria(x) -> -DrinkBeer(x))", "all x.((Maria(x) & -DrinkBeer(x)) -> -DrinkBeverage(x))", "all x.((Maria(x) & -Beverage(x)) -> -Drinks(x,Beer))", "all x.(Maria(x) -> -DrinksBeverage(x))", "all x.((Maria(x) & -DrinkBeer(x)) -> -DrinksBeer(x))", "all x.((Maria(x) & -DrinksBeverage(x)) -> -DrinksBeverage(x))", "all x.((Maria(x) & -DrinksBeer(x)) -> -DrinksBier(x))"]}
{"id": "enwn_validation_172", "nl": "It would be a faux pas to offer Maria a beer.", "fol": "", "prediction": ["all x.(FauxPast(x) -> OffersBeer(x))", "all x.(FauxPast(x) -> OffersBeerToMaria(x))", "all x.(FauxPast(x) -> OffersBeer(x))", "all x.((OfferBeer(x) & Maria(x)) -> FalsePast(x))", "all x.(FauxPast(x) -> OfferBeer(x))", "all x.(FauxPast(x) -> OfferBeer(x))", "all x.(FauxPast(x) -> OffersBerry(x))", "all x.(FauxPast(x) -> OfferBeerToMaria(x))", "all x.(FauxPast(x) -> OffersBeerToMaria(x))", "all x.((OfferBeer(x) & Maria(x)) -> FauxPas(x))", "all x.(FauxPast(x) -> OfferBeerToMaria(x))", "all x.(FauxPas(x) -> OffersBeer(x))", "all x.(FauxPast(x) -> OffersBerry(x))", "all x.(FauxPas toOfferBeer(x) -> Maria(x))", "all x.(FauxPas toOfferBeerToMaria(x))", "all x.(FauxPast(x) -> OffersBeerToMari(x))"]}
{"id": "enwn_validation_173", "nl": "Sandy tripped and spilled her hot coffee on Chris.", "fol": "", "prediction": ["all x y.((Sandy(x) & Chris(y)) -> (Tripped(x,y) & SplurgedHotCoffee(x,y)))", "all x y.((Sandy(x) & Chris(y)) -> (Tripped(x,y) & SplippedHotCoffee(x,y)))", "all x y.((Sandy(x) & Chris(y)) -> (Tripped(x) & SplippedHotCoffee(x,y)))", "all x y.((Sandy(x) & Chris(y)) -> (Tripped(x,y) & SplendsHotCoffee(x,y)))", "all x y.((Sandy(x) & Chris(y)) -> (Tripped(x,y) & SplengedHotCoffee(x,y)))", "all x y.((Sandy(x) & Chris(y)) -> (Tripped(x) & SplurgedHotCoffee(x,y)))", "all x y.((Sandy(x) & Chris(y)) -> (Tripped(x,y) & SplunkHotCoffee(x,y)))", "all x y.((Sandy(x) & Chris(y)) -> (Tripped(x) & SplendsHotCoffee(x,y)))", "all x y z.((Sandy(x) & Chris(y) & HotCoffee(z)) -> (Tripped(x,z) & Splunk(x,z)))", "all x y z.((Sandy(x) & Chris(y) & HotCoffee(z)) -> (Tripped(x,z) & Splipped(x,z)))", "all x y z.((Sandy(x) & Chris(y) & HotCoffee(z)) -> (Tripped(x,z) & Splurged(x,z)))", "all x y z.((Sandy(x) & HotCoffee(y) & Chris(z)) -> (Tripped(x,y) & Splunk(x,z)))", "all x y.((Sandy(x) & Chris(y)) -> (Tripped(x) & SplippedHotCoffee(x)))", "all x y z.((Sandy(x) & Chris(y) & HotCoffee(z)) -> (Tripped(x,z) & Splenged(x,z)))", "all x y z.((Sandy(x) & HotCoffee(y) & Chris(z)) -> (Tripped(x,y) & Splurged(x,z)))", "all x y.((Sandy(x) & Chris(y)) -> (Tripped(x) & SplurgedHotCoffee(x)))"]}
{"id": "enwn_validation_174", "nl": "When someone spills hot coffee on you, it hurts.", "fol": "", "prediction": ["all x.((Person(x) & SpillsHotCoffee(x)) -> Hurts(x))", "all x.((Person(x) & SpillsHotCoffeeOnYou(x)) -> Hurts(x))", "all x y.((Person(x) & SpillsHotCoffeeOn(x,y)) -> Hurts(x))", "all x.((Person(x) & SpillsHotCoffee(x)) -> Illness(x))", "all x.((Person(x) & SpillsHotCoffeeOn(x)) -> Hurts(x))", "all x.((Person(x) & SpillsHotCoffeeOnYou(x)) -> Illness(x))", "all x y.((Person(x) & SpillsHotCoffee(x,y)) -> Hurts(x))", "all x y.((Person(x) & SpoonsHotCoffeeOn(x,y)) -> Hurts(x))", "all x y.((Person(x) & SpillsHotCoffee(x) & You(y)) -> Hurts(x))", "all x y.((Person(x) & HotCoffee(y) & SpillsOn(x,y)) -> Hurts(x))", "all x y.((Person(x) & SpillsHotCoffeeOn(x,y)) -> Illness(x))", "all x y.((Person(x) & SpillsHotCoffee(x) & On(x,y)) -> Hurts(x))", "all x.((Person(x) & SpillsHotCoffeeOn(x)) -> Illness(x))", "all x y.((Person(x) & SpillsHotCoffee(x)) -> Hurts(x))", "all x.(SpreadsHotCoffeeOn(x) -> Hurts(x))", "all x y z.((Person(x) & HotCoffee(y) & SpillsOn(x,y)) -> Hurts(x))"]}
{"id": "enwn_validation_175", "nl": "If someone does something that harms you, you will get angry at them.", "fol": "", "prediction": ["all x.((Does(x,y) & Harms(y)) -> GetAngryAt(x,y))", "all x.((Does(x,y) & HarmsYou(y)) -> GetAngryAt(x,y))", "all x.((Does(x,y) & HarmsYou(x)) -> GetAngryAt(x,y))", "all x y.((Does(x,y) & Harms(y)) -> GetAngryAt(x,y))", "all x.((Does(x,y) & Harms(x,y)) -> GetAngryAt(x,y))", "all x.((DoesWhatHarms(x) & Person(x)) -> GetAngryAt(x))", "all x.((Does(x,y) & Harms(x)) -> GetAngryAt(x,y))", "all x.((Does(x,y) & HarmsYou(x)) -> GetAngryAt(y,x))", "all x y.((Does(x,y) & Person(y) & Harms(x,y)) -> GetAngryAt(x,y))", "all x.((Does(x,y) & HarmsYou(x)) -> GetAngryAt(y))", "all x.((Does(x) & HarmsYou(x)) -> GetAngryAt(x))", "all x.((Does(x) & Harms(x)) -> GetAngryAt(x))", "all x.((Does(x,y) & Harms(y)) -> Anger(x))", "all x.((Does(x,y) & Harms(y)) -> GetAngryAt(x,z))", "all x.((DoesWhatHarmsYou(x)) -> GetAngryAt(x))", "all x.((Does(x,y) & Harms(y)) -> GetAngry(x))"]}
{"id": "enwn_validation_176", "nl": "If you did not mean for something to happen, it was a mistake.", "fol": "", "prediction": ["all x.((Meaning(x) & -Meaning(x)) -> Mistake(x))", "all x.((MeantFor(x,y) & -MeantFor(x,y)) -> Mistake(x))", "all x.((Mean(x) & -Mean(x)) -> Mistake(x))", "all x.((Meant(x) & -Meant(x)) -> Mistake(x))", "all x.((DoesNotMeanFor(x,y) & Happens(y)) -> Mistake(x))", "all x.(((Meaning(x) & -Meaning(x)) -> Mistake(x))", "all x.((Mean(x) & -MeanForSomething(x)) -> Mistake(x))", "all x.((Meaning(x) & -MeaningToOccur(x)) -> Mistake(x))", "all x.((MeantFor(x,y) & -MeantFor(y,x)) -> Mistake(x))", "all x.((MeanFor(x,y) & -MeanFor(x,y)) -> Mistake(x))", "all x.((Measured(x) & -Measured(x)) -> Mistake(x))", "all x.((Meaning(x) & -MeaningToHave(x)) -> Mistake(x))", "all x.((Mean(x) & -MeanFor(x,y)) -> Mistake(x))", "all x.((Meanings(x) & -Meanings(x)) -> Mistake(x))", "all x.((MeanFor(x,y) & -MeanFor(y,x)) -> Mistake(x))", "all x.((Mean(x) & -MeanFor(x)) -> Mistake(x))"]}
{"id": "enwn_validation_177", "nl": "Sandy did not mean to spill her coffee.", "fol": "", "prediction": ["all x.((Sandy(x) & -SpreadCoffee(x)) -> -SpreadCoffee(x))", "all x.((Sandy(x) & -SpokenCoffee(x)) -> -SpokenCoffee(x))", "all x.((Sandy(x) & -SpreadCoffee(x)) -> -MadeToSpreadCoffee(x))", "all x.(Sandy(x) -> -SpreadCoffee(x))", "all x.(Sandy(x) -> -MeantToSpreadCoffee(x))", "all x y.((Sandy(x) & Coffee(y)) -> -Spread(x,y))", "all x y.((Sandy(x) & Coffee(y)) -> -MadeToSpread(x,y))", "all x.((Sandy(x) & -SprayCoffee(x)) -> -SpreadCoffee(x))", "all x y.((Sandy(x) & Coffee(y)) -> -MeantToSpread(x,y))", "all x y.((Sandy(x) & Coffee(y)) -> -MadeToSpray(x,y))", "all x y.((Sandy(x) & Coffee(y)) -> -MadeToSpring(x,y))", "all x.((Sandy(x) & -SpreadCoffee(x)) -> -MeantToSpreadCoffee(x))", "all x.((Sandy(x) & -SpreadCoffee(x)) -> -MeanToSpreadCoffee(x))", "all x.((Sandy(x) & -SpreadCoffee(x)) -> -MeaningToSpreadCoffee(x))", "all x.((Sandy(x) & -SpreadCoffee(x)) -> -MadToSpreadCoffee(x))", "all x y.((Sandy(x) & Coffee(y)) -> -MadeToSpout(x,y))"]}
{"id": "enwn_validation_178", "nl": "Even if you are mad at someones mistake, you should forgive them.", "fol": "", "prediction": ["all x y.((Mad(x) & Mistake(y)) -> Forgives(x,y))", "all x y.((Mad(x) & Person(y)) -> Forgives(x,y))", "all x.((Mad(x) & Mistake(x)) -> Forgive(x))", "all x y.((Mad(x) & Mistake(y)) -> Forgive(x,y))", "all x.((Mad(x) & Mistake(x)) -> Forgives(x))", "all x y.((Mad(x) & Person(y) & Mistake(x,y)) -> Forgives(x,y))", "all x.((MadAtMorning(x) & Person(x)) -> Forgives(x))", "all x y.((MadAt(x,y) & Mistake(y)) -> Forgives(x,y))", "all x y.((MadAt(x,y) & Person(y)) -> Forgives(x,y))", "all x y.((Mad(x) & Person(y) & Mistake(y)) -> Forgives(x,y))", "all x.((Mad(x) & SomeonesMistake(x)) -> Forgives(x))", "all x.(MadAtMorning(x) -> Forgives(x))", "all x y.((Mad(x) & Person(y)) -> Forgive(x,y))", "all x y.((MadAt(x,y) & Mistake(y)) -> Forgive(x,y))", "all x y.((Mad(x,y) & Mistake(y)) -> Forgives(x,y))", "all x y.((Mad(x) & Person(y) & Mistake(x,y)) -> Forgive(x,y))"]}
{"id": "enwn_validation_179", "nl": "Having hot coffee spilled onto you will make you angry at someone.", "fol": "", "prediction": ["all x y.((HotCoffee(x) & SpilledOn(x,y)) -> MakesAngryAt(x,y))", "all x y.((HotCoffee(x) & SpoonedOn(x,y)) -> MakesAngryAt(x,y))", "all x.((HotCoffee(x) & SpilledOn(x)) -> MakesAngryAt(x))", "all x.((HotCoffee(x) & SpilledOn(x)) -> MakesAngryAtPerson(x))", "all x y.((HotCoffee(x) & SplippedOn(x,y)) -> MakesAngryAt(x,y))", "all x y.((HotCoffeeSpread(x) & Person(y)) -> MakesAngryAt(x,y))", "all x y.((HotCoffee(x) & SpilledOn(x)) -> MakesAngryAt(x,y))", "all x.((HotCoffee(x) & SplippedOnto(x)) -> MakesAngryAt(x))", "all x.((HotCoffee(x) & SplippedOnto(x)) -> MakesAngryAtPerson(x))", "all x.((HotCoffee(x) & SplippedOn(x)) -> MakesAngryAt(x))", "all x y.((HotCoffeeSpread(x) & Person(y)) -> MakesAngry(x,y))", "all x y.((HotCoffee(x) & SpilledOn(x,y)) -> MakesAngry(x,y))", "all x y.((HotCoffee(x) & SpoonedOn(x)) -> MakesAngryAt(x,y))", "all x.((HotCoffee(x) & SpilledOnto(x)) -> MakesAngryAt(x))", "all x.((HotCoffee(x) & SplengedOn(x)) -> MakesAngryAt(x))", "all x.((HotCoffee(x) & SpilledOn(x)) -> Anger(x))"]}
{"id": "enwn_validation_180", "nl": "Chris got mad at Sandy because Sandy's hot coffee spilled on Chris.", "fol": "", "prediction": ["all x y z.((Chris(x) & Sandy(y) & HotCoffee(z) & SplippedOn(x,y,z)) -> MadAt(x,y,z))", "all x y z.((Chris(x) & Sandy(y) & HotCoffee(z) & SplippedOn(x,y,z)) -> MadAt(x,y))", "all x y z.((Chris(x) & Sandy(y) & HotCoffee(z) & SpilledOn(x,y,z)) -> MadAt(x,y,z))", "all x y z.((Chris(x) & Sandy(y) & HotCoffee(z) & SplengedOn(x,y,z)) -> MadAt(x,y,z))", "all x y z.((Chris(x) & Sandy(y) & HotCoffee(z) & SplurgedOn(x,y,z)) -> MadAt(x,y,z))", "all x y.((Chris(x) & Sandy(y) & HotCoffee(y)) -> GotMadAt(x,y))", "all x y z.((Chris(x) & Sandy(y) & HotCoffee(z) & SpentOn(x,y,z)) -> MadAt(x,y,z))", "all x y z.((Chris(x) & Sandy(y) & HotCoffee(z) & SpilledOn(x,y,z)) -> MadAt(x,y,z))", "all x y z.((Chris(x) & Sandy(y) & HotCoffee(z) & SpilledOn(x,y,z)) -> MadAt(x,y))", "all x y.((Chris(x) & Sandy(y) & SplippedHotCoffee(y,x)) -> MadAt(x,y))", "all x y z.((Chris(x) & Sandy(y) & HotCoffee(z) & SplengedOn(x,y,z)) -> MadAt(x,y))", "all x y z.((Chris(x) & Sandy(y) & HotCoffee(z) & SplippedOn(x,y)) -> MadAt(x,z))", "all x y.((Chris(x) & Sandy(y) & HotCoffee(y) & SplippedOn(x,y)) -> MadAt(x,y))", "all x y.((Chris(x) & Sandy(y) & SplippedHotCoffee(x,y)) -> MadAt(x,y))", "all x y z.((Chris(x) & Sandy(y) & HotCoffee(z) & SplurgedOn(x,y,z)) -> MadAt(x,y))", "all x y z.((Chris(x) & Sandy(y) & HotCoffee(z) & SpoiledOn(x,y,z)) -> MadAt(x,y,z))"]}
{"id": "enwn_validation_181", "nl": "Sandy spilling her coffee was an mistake.", "fol": "", "prediction": ["all x.((Sandy(x) & SpillsCoffee(x)) -> Mistake(x))", "all x y.((Sandy(x) & Coffee(y) & Spills(x,y)) -> Mistake(x))", "all x.((Sandy(x) & SpilledCoffee(x)) -> Mistake(x))", "all x y.((Sandy(x) & Coffee(y) & Spilled(x,y)) -> Mistake(x))", "all x y.((Sandy(x) & Coffee(y) & Spent(x,y)) -> Mistake(x))", "all x.((Sandy(x) & SpongeCoffee(x)) -> Mistake(x))", "all x.((Sandy(x) & SpillingCoffee(x)) -> Mistake(x))", "all x y z.((Sandy(x) & Coffee(y) & Coffee(z) & Spills(x,y,z)) -> Mistake(x))", "all x y.((Sandy(x) & Coffee(y)) -> WasMistake(x,y))", "all x.((Sandy(x) & SplengingCoffee(x)) -> Mistake(x))", "all x.((Sandy(x) & SpentCoffee(x)) -> Mistake(x))", "all x.((Sandy(x) & SplurgingCoffee(x)) -> Mistake(x))", "All x.((Sandy(x) & SpillsCoffee(x)) -> Mistake(x))", "all x y z.((Sandy(x) & Coffee(y) & Coffee(z) & Spills(x,y)) -> Mistake(x))", "all x y.((Sandy(x) & Coffee(y)) -> Mistake(x,y))", "all x y z.((Sandy(x) & Coffee(y) & Coffee(z)) -> Spills(x,y,z))"]}
{"id": "enwn_validation_182", "nl": "Sandy's mistake made Chris angry at Sandy.", "fol": "", "prediction": ["all x.((SandyMistake(x) & ChrisAngry(x)) -> SandyMistake(x))", "all x y.((SandyMistake(x) & Sandy(y)) -> MadeChrisAngry(x,y))", "all x.((SandyMistake(x) & ChrisAngry(x)) -> SandySandyMistake(x))", "all x y.((SandyMistake(x) & Sandy(y)) -> MadeChrisAngryAt(x,y))", "all x.((SandysMistake(x) & ChrisAngry(x)) -> SandyMistake(x))", "all x.((SandyMistake(x) & ChrisAngryAtSandy(x)) -> SandyMistake(x))", "all x y.((SandyMistake(x) & Chris(y)) -> AngerfulAt(y,x))", "all x y z.((Sandy(x) & Mistake(y) & Chris(z)) -> MadeAngryAt(z,y))", "all x y.((Sandy(x) & SandyMistake(y)) -> MadeChrisAngryAt(x,y))", "all x y.((Sandy(x) & SandyMistake(y)) -> MadeChrisAngry(x,y))", "all x y z.((Sandy(x) & Mistake(y) & Chris(z)) -> MadeAngryAt(x,y,z))", "all x y z.((Sandy(x) & Mistake(y) & Chris(z)) -> AngerfulAt(z,y))", "Sandy'sMistakeMadeChrisAngryAtSandy(Sandy)", "all x y.((SandyMistake(x) & Chris(y)) -> AngerfulAt(x,y))", "all x y z.((Sandy(x) & Mistake(y) & Chris(z)) -> AngerfulAt(x,y,z))", "all x y.((Sandy(x) & Sandy(y)) -> MadeAngryAt(x,y))"]}
{"id": "enwn_validation_183", "nl": "Chris should forgive Sandy.", "fol": "", "prediction": ["all x y.((Chris(x) & Sandy(y)) -> ShouldForgive(x,y))", "all x.((Chris(x) & Sandy(x)) -> ShouldForgive(x,y))", "all x.((Chris(x) & Sandy(x)) -> ShouldForgive(x))", "all x.((Chris(x) & Sandy(y)) -> ShouldForgive(x,y))", "all x.(Chris(x) -> ShouldForgive(x,Sandy))", "all x.(Chris(x) -> ShouldForgiveSandy(x))", "all x.((Chris(x) & Sandy(x)) -> Forgives(x,y))", "all x.((Chris(x) & Sandy(s)) -> ShouldForgive(x,s))", "all x.((Chris(x) & Sandy(x)) -> Forgives(x))", "all x.((Chris(x) & Sandy(x)) -> ShouldForgive(x,sandy))", "all x y.((Chris(x) & Sandy(y)) -> Forgives(x,y))", "all x.((Chris(x) & Sandy(x)) -> ShouldForgive(x,Sandy))", "all x.((Christopher(x) & Sandy(y)) -> ShouldForgive(x,y))", "all x.((Chris(x) & Sandy(y)) -> Forgives(x,y))", "all x.((Chris(x) & Sandy(x)) -> ShouldForgive(x,Chris))", "all x.((Chris(x) & Sandy(x)) -> Forgive(x))"]}
{"id": "enwn_validation_184", "nl": "You can't score well on a test without studying for it unless you cheat.", "fol": "", "prediction": ["all x.((ScoreWellOnTest(x) & -Cheat(x)) -> -ScoreWellOnTest(x))", "all x y.((Test(x) & Test(y) & -Cheat(x,y)) -> ScoreWell(x,y))", "all x.((Test(x) & -StudiesFor(x)) -> -ScoreWell(x))", "all x y.((Test(x) & Test(y) & -Cheat(x,y)) -> -ScoreWell(x,y))", "all x y.((Test(x) & Test(y) & -Cheat(x,y)) -> ScoreWell(x,y))", "all x y.((Test(x) & Test(y) & Cheat(x)) -> -ScoreWell(x,y))", "all x y.((Test(x) & Test(y) & -Cheat(x,y)) -> ScoresWell(x,y))", "all x y.((Test(x) & Test(y) & -StudiesFor(x,y)) -> -ScoreWell(x,y))", "all x y.((Test(x) & Test(y) & -Cheat(x)) -> ScoreWell(x,y))", "all x y.((Test(x) & Test(y) & -Cheat(x,y)) -> -ScoreWell(x,y))", "all x y.((Test(x) & Test(y) & -StudiesFor(x,y)) -> -ScoresWell(x,y))", "all x y.((Test(x) & Test(y) & -Cheat(x)) -> ScoreWell(x,y))", "all x y.((Test(x) & Test(y) & -Cheat(x)) -> -ScoreWell(x,y))", "all x y.((Test(x) & Test(y) & -Cheat(x)) -> -ScoreWell(x,y))", "all x.((Test(x) & -Cheat(x)) -> ScoreWell(x))", "all x y.((Test(x) & Test(y)) -> -ScoreWell(x,y))"]}
{"id": "enwn_validation_185", "nl": "Brad scored well on his test.", "fol": "", "prediction": ["all x.(Brad(x) -> ScoredWellOnTest(x))", "all x y.((Brad(x) & Test(y)) -> ScoredWell(x,y))", "all x.(Brad(x) -> ScoresWellOnTest(x))", "all x y.((Brad(x) & Test(y)) -> ScoresWell(x,y))", "all x.((Brad(x) & Test(x)) -> ScoredWell(x))", "all x.(Brad(x) -> ScoredWell(x))", "all x.((Brad(x) & Test(x)) -> ScoresWell(x))", "all x.((Brad(x) & Test(y)) -> ScoredWell(x,y))", "all x.((Brad(x) & Test(y)) -> ScoresWell(x,y))", "all x.(Brad(x) -> ScoresWell(x))", "all x y.((Brad(x) & Test(y)) -> Score(x,y))", "all x y.((Brad(x) & Test(y)) -> ScoredWellOn(x,y))", "all x y.((Brad(x) & Test(y)) -> ScoresWellOn(x,y))", "All x.(Brad(x) -> ScoredWellOnTest(x))", "all x.(Brett(x) -> ScoredWellOnTest(x))", "all x.(Brad(x) -> WellScoredOnTest(x))"]}
{"id": "enwn_validation_186", "nl": "Brad did not study the material on the test.", "fol": "", "prediction": ["all x.(Brad(x) -> -StudiesMaterial(x))", "all x y.((Brad(x) & Test(y)) -> -StudiesMaterial(x,y))", "all x.(Brad(x) -> -StudiesMaterialOnTest(x))", "all x y.((Brad(x) & Test(y) & -StudiesMaterial(x,y)) -> -StudiesMaterial(x,y))", "all x y.((Brad(x) & Material(y)) -> -Studies(x,y))", "all x.((Brad(x) & -StudiesMaterial(x)) -> -StudiesMaterial(x))", "all x y.((Brad(x) & Test(y)) -> -Studies(x,y))", "all x y.((Brad(x) & Material(y)) -> -StudiesOnTest(x,y))", "all x y.((Brad(x) & Test(y)) -> -StudyMaterial(x,y))", "all x y.((Brad(x) & Material(y) & Test(z)) -> -Studies(x,y,z))", "all x y.((Brad(x) & Test(y)) -> -StudiesMaterialOn(x,y))", "all x y.((Brad(x) & Test(y) & -Studies(x,y)) -> -Studies(x,y))", "all x.(Brad(x) -> -StudyMaterial(x))", "all x y.((Brad(x) & Test(y) & -StudiesMaterial(x,y)) -> -Studies(x,y))", "all x y.((Brad(x) & Test(y) & -Studies(x,y)) -> -StudiesMaterial(x,y))", "all x.((Brad(x) & Test(x)) -> -StudiesMaterial(x))"]}
{"id": "enwn_validation_187", "nl": "Cheating is dishonest.", "fol": "", "prediction": ["all x.(Cheating(x) -> Dishonest(x))", "all x.(Cheat(x) -> Dishonest(x))", "all x.((Cheating(x) & Dishonest(x)) -> Dishonest(x))", "all x.((Cheat(x) & Dishonest(x)) -> Dishonest(x))", "all x.(Cheating(x) -> Dishonest(x))", "all x.((Cheating(x) & Dishonest(x)) -> Cheating(x))", "all x y.((Cheating(x) & Person(y)) -> Dishonest(x))", "all x.((Cheat(x) & Dishonest(x)) -> Cheating(x))", "all x.(Cheats(x) -> Dishonest(x))", "all x y.((Cheating(x) & Customer(y)) -> Dishonest(x))", "all x.(Chating(x) -> Dishonest(x))", "all x.(Chasing(x) -> Dishonest(x))", "exists x.(Cheating(x) & Dishonest(x))", "all x y.((Cheating(x) & Person(y)) -> Dishonest(x,y))", "all x.(Cheat(x) -> Dishonest(x))", "all x.(Coating(x) -> Dishonest(x))"]}
{"id": "enwn_validation_188", "nl": "You should be honest.", "fol": "", "prediction": ["all x.(Honest(x) -> ShouldBe(x))", "all x.(Honest(x) -> True(x))", "all x.((Client(x) & Honest(x)) -> ShouldBe(x))", "all x.(Honest(x) -> Open(x))", "all x.(Honest(x) -> Been(x))", "all x.((Client(x) & Honest(x)) -> Honest(x))", "all x.((You(x) & Honest(x)) -> ShouldBe(x))", "all x.((Person(x) & Honest(x)) -> Honest(x))", "all x.((Client(x) & Fair(x)) -> Honest(x))", "all x.((Client(x) & Fair(x)) -> ShouldBe(x))", "all x.(Honest(x) -> MakesSense(x))", "all x.((Person(x) & Honest(x)) -> ShouldBe(x))", "all x.((Client(x) & Honest(x)) -> True(x))", "all x.((You(x) & Honest(x)) -> Honest(x))", "all x.((Client(x) & Honest(x)) -> Admits(x))", "all x.((Client(x) & Honest(x)) -> Requires(x))"]}
{"id": "enwn_validation_189", "nl": "Brad scored well on his test without studying for it.", "fol": "", "prediction": ["all x y.((Brad(x) & Test(y) & -StudiesFor(x,y)) -> ScoresWell(x,y))", "all x.((Brad(x) & Test(x) & -StudiesFor(x)) -> ScoresWell(x))", "all x y.((Brad(x) & Test(y)) -> ScoresWell(x,y))", "all x y.((Brad(x) & Test(y)) -> ScoredWell(x,y))", "all x y.((Brad(x) & Test(y) & -StudyingFor(x,y)) -> ScoredWell(x,y))", "all x.((Brad(x) & -StudiesForTest(x)) -> ScoresWell(x))", "all x y.((Brad(x) & Test(y) & -StudyingFor(x,y)) -> ScoresWell(x,y))", "all x y.((Brad(x) & Test(y) & -StudiesFor(x,y)) -> ScoredWell(x,y))", "all x y.((Brad(x) & Test(y) & StudyingFor(x,y)) -> ScoredWell(x,y))", "all x.(Brad(x) -> (ScoredWellOnTest(x) & -StudiesForTest(x)))", "all x.((Brad(x) & Test(x) & -StudyingFor(x)) -> ScoredWell(x))", "all x.(Brad(x) -> ScoredWellOnTest(x))", "all x.((Brad(x) & -StudiesForTest(x)) -> ScoresWellOnTest(x))", "all x.((Brad(x) & Test(x) & -StudyingFor(x)) -> ScoresWell(x))", "all x.((Brad(x) & Test(x)) -> ScoresWell(x))", "all x y z.((Brad(x) & Test(y) & Test(z)) -> ScoresWell(x,y,z))"]}
{"id": "enwn_validation_190", "nl": "Brad cheated on his test.", "fol": "", "prediction": ["all x.(Brad(x) -> CheatedOnTest(x))", "all x y.((Brad(x) & Test(y)) -> CheatedOn(x,y))", "all x y.((Brad(x) & Test(y)) -> Cheated(x,y))", "all x.((Brad(x) & Test(x)) -> Cheated(x))", "all x.((Brad(x) & Test(y)) -> CheatedOn(x,y))", "all x.((Brad(x) & CheatedOnTest(x)) -> CheatedOnTest(x))", "all x.((Brad(x) & Test(x)) -> CheatedOn(x,y))", "all x.((Brad(x) & Test(x)) -> CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x))))", "all x.((Brad(x) & Test(x)) -> CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x)))", "all x.((Brad(x) & Test(y)) -> Cheated(x,y))", "all x.((Brad(x) & Test(x)) -> CheatedOn(x))", "all x.((Brad(x) & Test(x)) -> CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x))))", "all x.((Brad(x) & Test(x)) -> CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x))))", "all x.((Brad(x) & Test(x)) -> CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x)))", "all x.((Brad(x) & Test(x)) -> CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x)))", "all x.((Brad(x) & Test(x)) -> CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x,CheatedOn(x)))"]}
{"id": "enwn_validation_191", "nl": "You should not cheat.", "fol": "", "prediction": ["all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) & Cheat(x)))", "all x.((Cheat(x)) -> -Cheat(x))", "all x.((Cheat(x) & -Cheat(x)) -> -Cheat(x))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) | Cheat(x))))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) | Cheat(x)))", "all x.(Cheat(x) -> -Cheat(x))", "all x.((Cheat(x)) -> -(Cheat(x) | Cheat(x))))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) | Cheat(x))))", "all x.((Cheat(x)) -> -Cheat(x))", "all x.((Cheat(x) & -Cheat(x)) -> -Cheat(x))", "all x.((Cheat(x) & -Cheat(x)) -> -Cheat(x))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) & -Cheat(x)))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) & Cheat(x))))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) & Cheat(x)))", "all x.((You(x) & -Cheat(x)) -> -Cheat(x))", "all x.((Cheat(x) & -Cheat(x)) -> -(Cheat(x) & -Cheat(x))))"]}
{"id": "enwn_validation_192", "nl": "Brad should not have cheated on his test.", "fol": "", "prediction": ["all x.((Brad(x) & Test(x)) -> -Cheated(x))", "all x.((Brad(x) & Test(y)) -> -Cheated(x,y))", "all x y.((Brad(x) & Test(y)) -> -Cheated(x,y))", "all x.((Brad(x) & -CheatedTest(x)) -> -CheatedTest(x))", "all x.((Brad(x) & Test(x)) -> -cheated(x))", "all x.((Brad(x) & -CheatedOnTest(x)) -> -CheatedOnTest(x))", "all x.(Brad(x) -> -CheatedOnTest(x))", "all x.((Brad(x) & Test(x)) -> -CheatedOn(x,y))", "all x.((Brad(x) & Test(y)) -> -CheatedOn(x,y))", "all x y.((Brad(x) & Test(y)) -> -CheatedOn(x,y))", "all x.((Brad(x) & -Cheated(x)) -> -Cheated(x))", "all x.(Brad(x) -> -CheatedTest(x))", "all x.(Brad(x) -> -cheatedOnTest(x))", "all x.((Brad(x) & Test(x)) -> -Cheatened(x))", "all x.((Brad(x) & Test(x)) -> -CheatedOn(x,x))", "all x.((Brad(x) & Test(x)) -> -Cheats(x))"]}
{"id": "enwn_validation_193", "nl": "You should not litter.", "fol": "", "prediction": ["all x.((Litter(x) & -Litter(x)) -> -(Litter(x) & Litter(x)))", "all x.((Litter(x) & -Litter(x)) -> -(Litter(x) | Litter(x))))", "all x.((Little(x) & -Little(x)) -> -Little(x))", "all x.((Liquid(x) & -Liquid(x)) -> -Liquid(x))", "all x.((Litter(x) & -Litter(x)) -> -(Litter(x) & Litter(x))))", "all x.((Pl\u00fct(x) & -Pl\u00fct(x)) -> -Pl\u00fct(x))", "all x.((Litter(x) & -Litter(x)) -> -(Litter(x) & -Litter(x)))", "all x.((Litter(x) & -Liquid(x)) -> -(Litter(x) | Litter(x))))", "all x.((Liquid(x) & -Liquid(x)) -> -(Liquid(x) & Litter(x)))", "all x.((Liquid(x) & -Liquid(x)) -> -(Liquid(x) & -Liquid(x))))", "all x.((Litter(x) & -Litter(x)) -> -(Litter(x) | Litter(x)))", "all x.((Litter(x) & -Liquid(x)) -> -(Litter(x) & Litter(x)))", "all x.((Little(x) & -Liquid(x)) -> -Liquid(x))", "all x.((Liquid(x) & -Liquid(x)) -> -(Liquid(x) & -Liquid(x)))", "all x.((Litter(x) & -Liquid(x)) -> -(Litter(x) & -Litter(x)))", "all x.((Little(x) & -Little(x)) -> -Liquid(x))"]}
{"id": "enwn_validation_194", "nl": "Littering is when you throw trash outside of a trash bin.", "fol": "", "prediction": ["all x.(Littering(x) -> ThrowsTrashOutsideOfTrashBin(x))", "all x.(Littering(x) -> ThrowsTrashOutsideTrashBin(x))", "all x.(Littering(x) -> ThrowsTrashOutsideTrashBin(x))", "all x.(Littering(x) -> ThrowsTrashOutsideOfTrashBin(x))", "all x y.((Littering(x) & Trash(y) & OutsideOfTrashBin(x,y)) -> ThrowsOutsideOf(x,y))", "all x y.((Littering(x) & Trash(y) & OutsideOfTrashBin(x,y)) -> ThrowsOutside(x,y))", "all x y z.((Littering(x) & Trash(y) & Bin(z)) -> ThrowsOutside(x,y,z))", "all x y.((Littering(x) & Trash(y) & OutsideTrashBin(x,y)) -> ThrowsOutside(x,y))", "all x y.((Littering(x) & Trash(y)) -> OutsideOfTrashBin(x,y))", "all x.(Littering(x) -> (TrashOutsideTrashBin(x) & ThrowsOutsideTrashBin(x)))", "all x y z.((Littering(x) & Trash(y) & Bin(z)) -> ThrowsOutsideOf(x,y,z))", "all x y z.((Littering(x) & Trash(y) & Bin(z)) -> OutsideOf(x,y,z))", "all x.(Littering(x) -> (TrashOutsideTrashBin(x) & ThrowsOutsideTrash(x)))", "all x y.((Littering(x) & Trash(y)) -> ThrowsOutsideOfTrashBin(x,y))", "all x.(Littering(x) -> (TrashOutsideTrashBin(x) & ThrowsOutsideTrashBin(x)))", "all x.(Littering(x) -> (TrashOutsideTrashBin(x) & ThrowsOutsideTrash(x)))"]}
{"id": "enwn_validation_195", "nl": "Johnny threw trash on the floor.", "fol": "", "prediction": ["all x y.((Johnny(x) & Floor(y)) -> ThrewTrashOn(x,y))", "all x.(Johnny(x) -> ThrewTrashOnFloor(x))", "all x y z.((Johnny(x) & Trash(y) & Floor(z)) -> ThrewOn(x,y,z))", "all x y.((Johnny(x) & Floor(y)) -> ThrowsTrashOn(x,y))", "all x y z.((Johnny(x) & Trash(y) & Floor(z)) -> ThrowsOn(x,y,z))", "all x.(Johnny(x) -> ThrowsTrashOnFloor(x))", "all x y z.((Johnny(x) & Trash(y) & Floor(z)) -> Threw(x,y,z))", "all x y.((Johnny(x) & Floor(y)) -> ThrewTrash(x,y))", "all x y.((Johnny(x) & Floor(y)) -> ThrowsTrash(x,y))", "all x y.((Junior(x) & Floor(y)) -> ThrewTrashOn(x,y))", "all x y.((Jonny(x) & Floor(y)) -> ThrewTrashOn(x,y))", "all x.((Johnny(x) & ThrewTrashOnFloor(x)) -> Threw(x,y))", "all x y.((Junior(x) & Floor(y)) -> ThrowsTrashOn(x,y))", "all x y z.((Johnny(x) & Trash(y) & Floor(z)) -> Throws(x,y,z))", "all x y.((Jonny(x) & Floor(y)) -> ThrowsTrashOn(x,y))", "all x y.((Johnny(x) & Floor(y)) -> ThrewTouchOn(x,y))"]}
{"id": "enwn_validation_196", "nl": "Johnny did not want to walk to the far away trash bin.", "fol": "", "prediction": ["all x.((Johnny(x) & FarAwayTrashBin(x)) -> -WantToWalkTo(x,y))", "all x y.((Johnny(x) & FarAwayTrashBin(y)) -> -WantToWalkTo(x,y))", "all x.((Johnny(x) & FarAwayTrashBin(x)) -> -WantsToWalkTo(x,y))", "all x y.((Johnny(x) & FarAwayTrashBin(y)) -> -WantsToWalkTo(x,y))", "all x.((Johnny(x) & FarAwayTrashBin(x)) -> -WantToWalk(x))", "all x.((Johnny(x) & FarAwayTrashBen(x)) -> -WantToWalkTo(x,y))", "all x.(Johnny(x) -> -WantToFarAwayTrashBin(x))", "all x y.((Johnny(x) & FarAwayTrashBin(y)) -> -WantToWalk(x,y))", "all x.((Johnny(x) & FarAwayTrashBin(x)) -> -WantToWalkTo(x))", "all x.((Johnny(x) & FarAwayTrashBin(x)) -> -WantsToWalk(x))", "all x.((Jonny(x) & FarAwayTrashBin(x)) -> -WantToWalkTo(x,y))", "all x.(Johnny(x) -> -WantsToFarAwayTrashBin(x))", "all x.((Johnny(x) & FarAwayTrashBin(y)) -> -WantToWalkTo(x,y))", "all x.((Johnny(x) & FarAwayTrashBen(x)) -> -WantsToWalkTo(x,y))", "-(Johnny(Johnny) & FarAwayTrashBin(Johnny))", "all x.((Johnny(x) & FarAwayTrashBine(x)) -> -WantToWalkTo(x,y))"]}
{"id": "enwn_validation_197", "nl": "Johnny did not throw his trash away into a trash bin.", "fol": "", "prediction": ["all x y.((Johnny(x) & TrashBin(y)) -> -ThrewInto(x,y))", "all x.((Johnny(x) & Trash(y)) -> -ThrewIntoTrashBin(x,y))", "all x.(Johnny(x) -> -TrashBin(x))", "all x y.((Johnny(x) & Trash(y)) -> -ThrewIntoTrashBin(x,y))", "all x.((Johnny(x) & TrashBin(x)) -> -ThrewInto(x,y))", "all x.((Johnny(x) & TrashBin(y)) -> -ThrewInto(x,y))", "all x.((Johnny(x) & -TrashBin(x)) -> -TrashBin(x))", "all x.((Johnny(x) & Trash(x)) -> -ThrewIntoTrashBin(x))", "all x y z.((Johnny(x) & Trash(y) & Bin(z)) -> -ThrewInto(x,y,z))", "all x y.((Johnny(x) & TrashBin(y)) -> -TossesInto(x,y))", "all x y.((Johnny(x) & TrashBin(y)) -> -ThrewAwayInto(x,y))", "all x.((Johnny(x) & TrashBin(x)) -> -ThrewAwayInto(x,y))", "all x.(Johnny(x) -> -TossesTrashIntoTrashBin(x))", "all x.((Junior(x) & -TrashBin(x)) -> -TrashBin(x))", "all x.((Johnny(x) & TrashBin(x)) -> -TossesInto(x,y))", "all x y.((Johnny(x) & TrashBin(y)) -> -ThrewTo(x,y))"]}
{"id": "enwn_validation_198", "nl": "Johnny littered.", "fol": "", "prediction": ["all x.(Johnny(x) -> Littered(x))", "all x.(Jonny(x) -> Littered(x))", "all x.(Junior(x) -> Littered(x))", "all x.(Jane(x) -> Littered(x))", "all x.((Johnny(x) & Littered(x)) -> Johnny(x))", "all x.(Jonnie(x) -> Littered(x))", "all x.((Jonny(x) & Littered(x)) -> Johnny(x))", "all x.(Jonny(x) -> Littered(x))", "all x.(Jonnifer(x) -> Littered(x))", "all x.(Johnny(x) -> Littered(x))", "all x.((Johnny(x) & Littered(x)) -> Littered(x))", "all x.((Johnny(x) & Litter(x)) -> Litter(x))", "all x.((Junior(x) & Littered(x)) -> Johnny(x))", "all x.(Jenny(x) -> Littered(x))", "all x.((Johnny(x) & Litter(x)) -> Littered(x))", "all x.(Joynny(x) -> Littered(x))"]}
{"id": "enwn_validation_199", "nl": "Johnny should not have littered.", "fol": "", "prediction": ["all x.((Junior(x) & -Littered(x)) -> -Littered(x))", "all x.((Johnny(x) & Littered(x)) -> -(Johnny(x) & Littered(x))))", "all x.(Johnny(x) -> -Littered(x))", "all x.((Johnny(x) & -Littered(x)) -> -Littered(x))", "all x.((Johnny(x) & Littered(x)) -> -(Johnny(x) & Littered(x)))", "all x.((Johnny(x) & Littered(x)) -> -Littered(x))", "all x.((Jonny(x) & Littered(x)) -> -(Jonny(x) & Littered(x))))", "all x.((Johnny(x) & Littered(x)) -> -Has(x,y))", "all x.((Jonny(x) & -Littered(x)) -> -Littered(x))", "all x.((Junior(x) & -Littered(x)) -> -Littered(x))", "all x.((Jonny(x) & Littered(x)) -> -(Jonny(x) & Littered(x)))", "all x.((Junior(x) & -Littered(x)) -> -Littered(x))", "all x.((Johnny(x) & Littered(x)) -> -Lotted(x))", "all x.((Johnny(x) & Littered(x)) -> -HasLittered(x))", "all x.((Johnny(x) & Litter(x)) -> -Littered(x))", "all x.(Jonny(x) -> -Littered(x))"]}
{"id": "enwn_validation_200", "nl": "If you see someone struggling to do something, you should help them.", "fol": "", "prediction": ["all x y.((Says(x,y) & Person(y) & StrugglesToDo(x,y)) -> ShouldHelp(x,y))", "all x y.((Says(x,y) & Person(y) & StrugglesToDo(x,y)) -> Help(x,y))", "all x y.((Says(x,y) & Person(y) & StrugglesToDo(x,y)) -> Helps(x,y))", "all x y.((Staff(x) & Person(y) & StrugglesToDo(x,y)) -> Help(x,y))", "all x y.((Staff(x) & Person(y) & StrugglesToDo(x,y)) -> Help(x,y))", "all x y.((Staff(x) & Person(y) & StrugglesToDo(x,y)) -> ShouldHelp(x,y))", "all x y.((Staff(x) & Person(y) & StrugglesToDo(x,y)) -> Helps(x,y))", "all x.(StaffStrugglesToDo(x) -> Help(x))", "all x y.((Says(x) & Person(y) & StrugglesToDo(x,y)) -> ShouldHelp(x,y))", "all x y.((Says(x) & Person(y) & StrugglesToDo(y,x)) -> ShouldHelp(x,y))", "all x.((Staff(x) & StrugglesToDo(x)) -> Help(x))", "all x y.((Says(x) & Person(y) & StrugglesToDo(x,y)) -> Helps(x,y))", "all x y.((Staff(x) & Person(y) & StrugglesToDo(x,y)) -> Helps(x,y))", "all x y.((Says(x) & Person(y) & StrugglesToDo(x,y)) -> Help(x,y))", "all x y.((Staff(x) & Person(y) & StrugglesToDo(x,y)) -> ShouldHelp(x,y))", "all x y.((Says(x,y) & Person(y) & StrugglesToDo(x,y)) -> Help(x,y))"]}
{"id": "enwn_validation_201", "nl": "Josh is holding groceries in both hands at the door.", "fol": "", "prediction": ["all x y.((Josh(x) & Door(y)) -> HoldsGroceries(x,y))", "all x y.((Josh(x) & Door(y)) -> HoldsGroceriesInBothHands(x,y))", "all x.((Josh(x) & Door(y)) -> HoldsGroceries(x,y))", "all x y.((Josh(x) & Door(y)) -> (HoldsGroceries(x,y) & HoldsGroceries(x,y)))", "all x y z.((Josh(x) & Grocery(y) & Door(z)) -> Holds(x,y,z))", "all x y z.((Josh(x) & Groceries(y) & Door(z)) -> Holds(x,y,z))", "all x y.((Joshua(x) & Door(y)) -> HoldsGroceries(x,y))", "all x y.((Josh(x) & Door(y)) -> HoldsGroceriesInHands(x,y))", "all x y z.((Josh(x) & Grocery(y) & Door(z)) -> HoldsInBothHands(x,y,z))", "all x y z.((Josh(x) & Grocery(y) & Door(z)) -> HoldsIn(x,y,z))", "all x y z.((Josh(x) & Groceries(y) & Door(z)) -> HoldsInBothHands(x,y,z))", "all x.((Josh(x) & Door(y)) -> HoldsGroceriesInBothHands(x,y))", "all x y z.((Josh(x) & Groceries(y) & Door(z)) -> HoldsIn(x,y,z))", "all x y z.((Josh(x) & Grocery(y) & Door(z)) -> HoldsInHands(x,y,z))", "all x y z.((Josh(x) & Groceries(y) & Door(z)) -> HoldsInHands(x,y,z))", "all x y.((Joshua(x) & Door(y)) -> HoldsGroceriesInBothHands(x,y))"]}
{"id": "enwn_validation_202", "nl": "If you are holding something with both hands, you will struggle to open doors.", "fol": "", "prediction": ["all x.(HoldsWithBothHands(x) -> StruggleToOpenDoors(x))", "all x.(HoldsWithBothHands(x) -> StruggleToOpenDoors(x))", "all x.((HoldsWithBothHands(x) & HasBothHands(x)) -> StruggleToOpenDoors(x))", "all x.((HoldsWithBothHands(x) & HasBothHands(x)) -> StruggleToOpenDoors(x))", "all x.(HoldsWithBothHands(x) -> StrugglesToOpenDoors(x))", "all x.((HoldsWithBothHands(x) & HasBothHands(x)) -> StrugglesToOpenDoors(x))", "all x.(HoldingWithBothHands(x) -> StruggleToOpenDoors(x))", "all x.(HoldingWithBothHands(x) -> StruggleToOpenDoors(x))", "all x.((Holds(x,y) & Hands(y)) -> StruggleToOpenDoors(x))", "all x.((HoldsWithBothHands(x) & HandsOn(x)) -> StruggleToOpenDoors(x))", "all x.((Holds(x,y) & Hands(y)) -> StruggleToOpenDoors(x))", "all x.((Holds(x,y) & Hands(y)) -> StrugglesToOpenDoors(x))", "all x y.((Holds(x,y) & Hand(y)) -> StruggleToOpenDoors(x))", "all x.((HoldsWithBothHands(x) & HandsOn(x)) -> StruggleToOpenDoors(x))", "all x.(HoldsWithHands(x) -> StruggleToOpenDoors(x))", "all x.((Holding(x,y) & Hands(y)) -> StruggleToOpenDoors(x))"]}
{"id": "enwn_validation_203", "nl": "Amy can see Josh.", "fol": "", "prediction": ["all x y.((Amy(x) & Josh(y)) -> CanSee(x,y))", "all x.((Amy(x) & Josh(y)) -> CanSee(x,y))", "all x y.((Amy(x) & Josh(y)) -> CanSeen(x,y))", "all x y z.((Amy(x) & Josh(y) & Amy(z)) -> CanSee(x,y,z))", "all x.(Amy(x) -> CanSee(x,Joshua))", "all x.(Amy(x) -> CanSee(x,Josh))", "all x.((Amy(x) & Josh(x)) -> CanSee(x,y))", "all x.(Amy(x) -> CanSeeJosh(x))", "all x.((Amy(x) & Josh(y)) -> CanSeen(x,y))", "all x y.((Amy(x) & Josh(y)) -> CanSelect(x,y))", "all x y.((Amy(x) & Josh(y)) -> CanSee(x,y))", "all x.((Amy(x) & Josh(y)) -> CanSelect(x,y))", "all x.(Amy(x) -> CanSeeJoshua(x))", "all x y z.((Amy(x) & Josh(y) & Amy(z)) -> CanSeen(x,y,z))", "all x.((Amy(x) & Josh(y)) -> CanSee(x,y))", "all x y z.((Amy(x) & Josh(y) & Amy(z)) -> CanSelect(x,y,z))"]}
{"id": "enwn_validation_204", "nl": "Josh is struggling to open the door.", "fol": "", "prediction": ["all x y.((Josh(x) & Door(y)) -> StrugglesToOpen(x,y))", "all x y.((Josh(x) & Door(y)) -> StruggleToOpen(x,y))", "all x y.((Joshua(x) & Door(y)) -> StrugglesToOpen(x,y))", "all x y z.((Josh(x) & Door(y) & Door(z)) -> StrugglesToOpen(x,y,z))", "all x.((Josh(x) & Door(y)) -> StrugglesToOpen(x,y))", "all x y.((Joshua(x) & Door(y)) -> StruggleToOpen(x,y))", "all x.(Josh(x) -> StrugglesToOpenDoor(x))", "all x y.((Josh(x) & Door(y)) -> StrugglingToOpen(x,y))", "all x.((Josh(x) & Door(y)) -> StruggleToOpen(x,y))", "all x.(Josh(x) -> StruggleToOpenDoor(x))", "all x y z.((Josh(x) & Door(y) & Door(z)) -> StruggleToOpen(x,y,z))", "all x y.((Josh(x) & Door(y)) -> StumblingToOpen(x,y))", "all x.((Josh(x) & StrugglesToOpenDoor(x)) -> OpenDoor(x))", "all x y.((Joshua(x) & Door(y)) -> StrugglingToOpen(x,y))", "all x y z.((Josh(x) & Door(y) & Door(z)) -> StrugglingToOpen(x,y,z))", "all x y z.((Josh(x) & Door(y) & Door(z)) -> StumblingToOpen(x,y,z))"]}
{"id": "enwn_validation_205", "nl": "Amy can see Josh struggling to open the door.", "fol": "", "prediction": ["all x y.((Amy(x) & Josh(y)) -> StrugglesToOpenDoor(x,y))", "all x y.((Amy(x) & Josh(y)) -> StrugglesToOpenDoor(x,y))", "all x.((Amy(x) & Josh(y)) -> StrugglesToOpenDoor(x,y))", "all x y.((Amy(x) & Josh(y)) -> TryingToOpenDoor(x,y))", "all x y z.((Amy(x) & Josh(y) & Door(z)) -> (StrugglesToOpen(y,z) | -StrugglesToOpen(y,z))))", "all x y.((Amy(x) & Josh(y)) -> CanSeeStruggleToOpenDoor(x,y))", "all x y z.((Amy(x) & Josh(y) & Door(z)) -> StrugglesToOpen(x,y,z))", "all x y.((Amy(x) & Josh(y)) -> StumblingToOpenDoor(x,y))", "all x y z.((Amy(x) & Josh(y) & Door(z)) -> (StrugglesToOpen(y,z) | StrugglesToOpen(y,z))))", "all x.((Amy(x) & Josh(y)) -> StrugglesToOpenDoor(x,y))", "all x y.((Amy(x) & Josh(y)) -> StruggleToOpenDoor(x,y))", "all x y.((Amy(x) & Josh(y)) -> StrugglesToOpenDoor(y,x))", "all x y z.((Amy(x) & Josh(y) & Door(z)) -> (StruggleToOpen(y,z) | StruggleToOpen(y,z))))", "all x y z.((Amy(x) & Josh(y) & Door(z)) -> (StrugglesToOpen(y,z) | -StrugglesToOpen(y,z)))", "all x.((Amy(x) & Josh(y)) -> StrugglesToOpenDoor(y,x))", "all x y.((Amy(x) & Josh(y)) -> StrugglesToOpenDoor(y,x))"]}
{"id": "enwn_validation_206", "nl": "Amy should help Josh open the door.", "fol": "", "prediction": ["all x y.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "all x.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "all x.((Amy(x) & Josh(y)) -> ShouldOpenDoor(x,y))", "all x y z.((Amy(x) & Josh(y) & Door(z)) -> ShouldHelpOpen(x,y,z))", "all x y.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "all x y.((Amy(x) & Josh(y)) -> ShouldOpenDoor(x,y))", "all x y.((Amy(x) & Josh(y)) -> HelpsOpenDoor(x,y))", "All x y.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "all x y z.((Amy(x) & Josh(y) & Door(z)) -> ShouldHelp(x,y,z))", "all x y.((Amy(x) & Josh(y)) -> ShouldHelpOpen(x,y))", "all x.((Amy(x) & Josh(y)) -> HelpsOpenDoor(x,y))", "all x.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))", "all x.((Amy(x) & Josh(x)) -> ShouldHelpOpenDoor(x,y))", "all x y z.((Amy(x) & Josh(y) & Door(z)) -> ShouldOpen(x,y,z))", "all x y z.((Amy(x) & Josh(y) & Door(z)) -> HelpsOpen(x,y,z))", "All x.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))"]}
{"id": "enwn_validation_207", "nl": "You should avoid harming someone else or yourself.", "fol": "", "prediction": ["all x.((AvoidsHarming(x) & (Another(x) | You(x))) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((AvoidsHarming(x) & (Another(x) | You(x))) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((AvoidsHarming(x) & (Another(x) | You(x))) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((AvoidsHarming(x) & (Another(x) | You(x))) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((AvoidsHarming(x) & (Another(x) | You(x))) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((AvoidsHarming(x) & (Other(x) | -AvoidsHarming(x))) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((AvoidsHarming(x) & (Another(x) | You(x))) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((AvoidsHarming(x) & (Other(x) | -AvoidsHarming(x))) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((AvoidsHarming(x) & (Other(x) | -AvoidsHarming(x))) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((AvoidsHarming(x) & (Another(x) | You(x))) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((AvoidsHarming(x) & (Other(x) | -AvoidsHarming(x))) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((AvoidsHarming(x) & (Another(x) | You(x))) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((AvoidsHarming(x) & (Another(x) | You(x))) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHaha", "all x.((AvoidsHarming(x) & (Another(x) | You(x))) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((AvoidsHarming(x) & (Other(x) | -AvoidsHarming(x))) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas"]}
{"id": "enwn_validation_208", "nl": "Driving dangerously can harm you or someone else.", "fol": "", "prediction": ["all x y.((DrivingDangerously(x) & Person(y)) -> (Harms(x,y) | Harms(x,y)))", "all x.(DrivingDangerously(x) -> (HarmsYou(x) | HarmsSomeoneOther(x)))", "all x.(DrivingDangerously(x) -> (HarmsYou(x) | HarmsPerson(x)))", "all x.(DrivingDangerously(x) -> (HarmsYou(x) | HarmsSomeone(x)))", "all x.(DrivingDangerously(x) -> (HarmsYou(x) | HarmsAnother(x)))", "all x y.((DrivingDangerfully(x) & Person(y)) -> (Harms(x,y) | Harms(x,y)))", "all x y.((DrivesDangerously(x) & Person(y)) -> (Harms(x,y) | Harms(x,y)))", "all x y.((Driving(x) & Person(y)) -> (Harms(x,y) | Harms(x,y)))", "all x.(DrivingDangerously(x) -> (HarmYou(x) | HarmSomeoneOther(x)))", "all x.(DrivingDangerfully(x) -> (HarmsYou(x) | HarmsSomeoneOther(x)))", "all x y.((DrivingDangerously(x) & Driver(y)) -> (Harms(y,x) | Harms(y,x)))", "all x.(DrivingDangerfully(x) -> (HarmsYou(x) | HarmsPerson(x)))", "all x.(DrivingDangerously(x) -> (HarmsYou(x) | HarmsPersonOther(x)))", "all x.(DrivingDangerously(x) -> (Harms(x) | Harms(x)))", "all x.(DrivingDangerfully(x) -> (HarmsYou(x) | HarmsSomeone(x)))", "all x.(DrivingDangerously(x) -> (Harms(x,y) | Harms(x,z)))"]}
{"id": "enwn_validation_209", "nl": "Dani drove home from the bar after drinking alcohol.", "fol": "", "prediction": ["all x y.((Daniel(x) & Bar(y) & DrinksAlcohol(x,y)) -> DrivesHome(x,y))", "all x y.((Daniel(x) & Bar(y) & DrinksAlcohol(x)) -> DrivesHome(x,y))", "all x.((Daniel(x) & Bar(y) & DrinksAlcohol(x)) -> DrivesHome(x,y))", "all x.((Daniel(x) & Bar(y) & DrinksAlcohol(x,y)) -> DrivesHome(x,y))", "all x y.((Daniel(x) & Bar(y) & DrinksAlcohol(x,y)) -> DrivesHomeFrom(x,y))", "all x y.((Dani(x) & Bar(y) & DrinksAlcohol(x,y)) -> DrivesHome(x,y))", "Dani drove home from the bar after drinking alcohol.", "all x y.((Daniel(x) & Bar(y) & DrinkingAlcohol(x)) -> DrivesHome(x,y))", "all x y.((Daniel(x) & Bar(y) & DrinkingAlcohol(x,y)) -> DrivesHome(x,y))", "all x y.((Daniel(x) & Bar(y) & DrinksAlcohol(x)) -> DrivesHomeFrom(x,y))", "all x y.((Daniel(x) & Bar(y) & DrinkingAlcohol(x)) -> DrivenHome(x,y))", "all x y.((Daniel(x) & Bar(y) & DrinkingAlcohol(x,y)) -> DrivenHome(x,y))", "all x y.((Dani(x) & Bar(y) & DrinksAlcohol(x)) -> DrivesHome(x,y))", "all x y z.((Daniel(x) & Bar(y) & Alcohol(z)) -> DrivenHome(x,y,z))", "all x y z.((Daniel(x) & Bar(y) & Alcohol(z)) -> DrivesHome(x,y,z))", "all x y.((Daniel(x) & Bar(y)) -> DrivenHomeAfterDrinkingAlcohol(x,y))"]}
{"id": "enwn_validation_210", "nl": "Driving after drinking alcohol is dangerous.", "fol": "", "prediction": ["all x.((DrivingAfterDrinkingAlcohol(x)) -> Dangerous(x))", "all x.(DrivingAfterDrinkingAlcohol(x) -> Dangerous(x))", "all x.((DrivingAfterDrinkingAlcohol(x) & DrinkingAlcohol(x)) -> Dangerous(x))", "all x.((DrivesAfterDrinkingAlcohol(x)) -> Dangerous(x))", "all x.((Driving(x) & DrinkingAlcohol(x)) -> Dangerous(x))", "all x.((DrivesAfterDrinkingAlcohol(x) & DrinksAlcohol(x)) -> Dangerous(x))", "all x y.((DrivingAfterDrinkingAlcohol(x) & DrinkingAlcohol(y)) -> Dangerous(x))", "all x.((Drive(x) & DrinksAlcohol(x)) -> Dangerous(x))", "all x.((DrivingAfter(x) & DrinkingAlcohol(x)) -> Dangerous(x))", "all x.((DrivingAfterDrinkingAlcohol(x) & Alcohol(y)) -> Dangerous(x))", "all x y.((DrivingAfterDrinkingAlcohol(x) & Alcohol(y)) -> Dangerous(x))", "all x.((Drive(x) & DrinkingAlcohol(x)) -> Dangerous(x))", "all x.((Driving(x) & AfterDrinkingAlcohol(x)) -> Dangerous(x))", "all x y.((Driving(x) & DrinkingAlcohol(y)) -> Dangerous(x))", "all x y.((DrivingAfterDrinkingAlcohol(x) & Alcohol(y)) -> Dangerous(x,y))", "all x.(DrivesAfterDrinkingAlcohol(x) -> Dangerous(x))"]}
{"id": "enwn_validation_211", "nl": "Dani drove home dangerously.", "fol": "", "prediction": ["Dani drove home dangerously.", "all x.(Dani(x) -> DrivenHomeDangerously(x))", "all x.(Daniel(x) -> DrivenHomeDangerously(x))", "all x y.((Daniel(x) & Home(y)) -> DrivenDangerously(x,y))", "all x.(Dani(x) -> DrivesHomeDangerously(x))", "all x.((Daniel(x) & DrivenHomeDangerously(x)) -> DrivenHomeDangerously(x))", "all x y.((Daniel(x) & Home(y)) -> DrivesDangerously(x,y))", "all x.(Daniel(x) -> DrivesHomeDangerously(x))", "all x y.((Daniel(x) & Home(y)) -> DrivingDangerously(x,y))", "all x y.((Dani(x) & Home(y)) -> DrivenDangerously(x,y))", "all x.((Daniel(x) & DrivingHomeDangerously(x)) -> DrivenHomeDangerously(x))", "all x y.((Dani(x) & Home(y)) -> DrivesDangerously(x,y))", "all x.((Daniel(x) & DrivingHomeDangerously(x)) -> DrivesHomeDangerously(x))", "all x y.((Dani(x) & Home(y)) -> DrivingDangerously(x,y))", "all x y.((Daniel(x) & Home(y)) -> DroveDangerously(x,y))", "all x.(Dani(x) -> DrivenHomeDangerously(x))"]}
{"id": "enwn_validation_212", "nl": "Dani could have harmed themself or someone else by driving home.", "fol": "", "prediction": ["all x y.((Dani(x) & (Dani(y) | SomeoneOther(y))) -> Harmed(x,y))", "all x.((Dani(x) & (HasDrivenHome(x) | HasDrivenHome(x))) -> Harmed(x))", "all x.((Dani(x) & (HasDrivenHome(x) | HasDrivenHome(x))) -> (HasDrivenHome(x) & (HasDrivenHome(x) | HasDrivenHome(x))))", "all x y.((Dani(x) & (Dani(y) | Person(y))) -> Harmed(x,y))", "all x.((Dani(x) & (HasDrivenHome(x) | HasDrivenHome(x))) -> (HasDrivenHome(x) & (HasDrivenHome(x) & (HasDrivenHome(x) & -HasDrivenHome(x)))))", "all x.((Dani(x) & (HasDrivenHome(x) | HasDrivenHome(x))) -> (HasDrivenHome(x) & (HasDrivenHome(x) & (HasDrivenHome(x) | HasDrivenHome(x)))))", "all x.((Dani(x) & (HasDrivenHome(x) | HasDrivenHome(x))) -> (HasDrivenHome(x) & (HasDrivenHome(x) & (HasDrivenHome(x) & (HasDrivenHome(x) & -HasDrivenHome(x)))))", "all x y.((Dani(x) & Car(y)) -> (HasHarmed(x,y) | Harms(x,y)))", "all x y.((Dani(x) & Driver(y)) -> (HasHarmed(x,y) | Harms(x,y)))", "all x.((Dani(x) & (HasDrivenHome(x) | HasDrivenHome(x))) -> (HasDrivenHome(x) & (HasDrivenHome(x) & -HasDrivenHome(x))))", "all x y.((Dani(x) & Driver(y)) -> (HasHarmed(x,y) | Harmed(x,y)))", "all x.((Dani(x) & (HasDrivenHome(x) | HasDrivenHome(x))) -> (HasDrivenHome(x) | HasDrivenHome(x))))", "all x y.((Dani(x) & Car(y)) -> (HasHarmed(x,y) | Harmed(x,y)))", "all x.((Dani(x) & (HasDrivenHome(x) | HasDrivenHome(x))) -> (HasDrivenHome(x) & (HasDrivenHome(x) & (HasDrivenHome(x) & (HasDrivenHome(x) | HasDrivenHome(x)))))", "all x y.((Dani(x) & Dani(y)) -> (HasHarmed(x,y) | Harms(x,y)))", "all x y.((Dani(x) & Dani(y)) -> (Harmed(x,y) | Harmful(x,y)))"]}
{"id": "enwn_validation_213", "nl": "Dani should not have driven home.", "fol": "", "prediction": ["all x.((Daniel(x) & -DrivenHome(x)) -> -DrivenHome(x))", "all x.(Dani(x) -> -DrivenHome(x))", "all x.((Dani(x) & -DrivenHome(x)) -> -DrivenHome(x))", "all x.((Daniel(x) & -DrivenHome(x)) -> -Daniel(x))", "all x.(Daniel(x) -> -DrivenHome(x))", "Dani should not have driven home.", "all x.((Dani(x) & -DrivenHome(x)) -> -DrivenHome(x))", "all x.((Dani(x) & -DrivenHome(x)) -> -Dani(x))", "all x.((Daniel(x) & -DrivenHome(x)) -> -DanielDrivenHome(x))", "all x.((Daniel(x) & -DrivenHome(x)) -> -(Daniel(x) & DrivenHome(x))))", "all x.((Daniel(x) & -DrivedHome(x)) -> -DrivenHome(x))", "all x.((Daniel(x) & -DrivenHome(x)) -> -DanielDaniel(x))", "all x.((Daniel(x) & -DrivenHome(x)) -> -(Daniel(x) & DrivenHome(x)))", "all x.((Daniel(x) & -DrivenHome(x)) -> -HasDrivenHome(x))", "all x y.((Daniel(x) & Home(y)) -> -Driven(x,y))", "all x.((Daniel(x) & -DrivenHome(x)) -> -DrivedHome(x))"]}
{"id": "enwn_validation_214", "nl": "You should not copy other peoples work and claim it as your own.", "fol": "", "prediction": ["all x y.((Person(x) & Work(y)) -> -CopiesAndClaims(x,y))", "all x y.((Person(x) & Work(y) & -Copies(x,y)) -> ClaimsAsOwn(x,y))", "all x.((Person(x) & -CopiesWork(x) & ClaimsWorkAsOwn(x)) -> -CopiesWorkAsOwn(x))", "all x.((Person(x) & -CopiesWork(x) & ClaimsAsOwn(x)) -> -CopiesWork(x))", "all x.((Person(x) & -CopiesWork(x) & ClaimsWorkAsOwn(x)) -> -CopiesWork(x))", "all x y.((Person(x) & Work(y)) -> -(Copies(x,y) & ClaimsAsOwn(x,y)))", "all x.((Person(x) & -CopyWork(x) & ClaimWorkAsOwn(x)) -> -CopyWorkAsOwn(x))", "all x y.((Person(x) & Work(y)) -> -Copies(x,y) & ClaimsAsOwn(x,y))", "all x y.((Person(x) & Work(y)) -> -CopyAndClaim(x,y))", "all x y.((Person(x) & Work(y) & -Copies(x,y)) -> ClaimsOwn(x,y))", "all x y.((Person(x) & Work(y) & -Copies(x,y)) -> ClaimsAsOwn(x,y))", "all x y.((Person(x) & Work(y) & -Copies(x,y)) -> ClaimsOwn(x,y))", "all x y.((Person(x) & Work(y)) -> -Copy(x,y))", "all x y.((Person(x) & Work(y)) -> -CopiesAndClaims(x,y))", "all x y.((Person(x) & Work(y)) -> -(Copy(x,y) & Claim(x,y)))", "all x y.((Person(x) & Work(y)) -> -Copy(x,y) & Claim(x,y))"]}
{"id": "enwn_validation_215", "nl": "Copyright infringement is using protected works of another person without permission.", "fol": "", "prediction": ["all x y.((CopyrightInfringement(x) & Person(y)) -> UsesProtectedWorks(x,y))", "all x y.((CopyrightInfringement(x) & Person(y)) -> UsesProtectedWorksWithoutPermission(x,y))", "all x y z.((CopyrightInfringement(x) & Person(y) & Works(z)) -> UsesWithoutPermission(x,y,z))", "all x.(CopyrightInfringement(x) -> (UsesProtectedWorks(x) & -Permission(x)))", "all x.(CopyrightInfringement(x) -> (UsesProtectedWorks(x) & -Permission(x)))", "all x y.((CopyrightInfringement(x) & Person(y) & UsesProtectedWorks(x,y)) -> -Permission(x))", "all x.(CopyrightInfringement(x) -> UsesProtectedWorks(x))", "all x y z.((CopyrightInfringement(x) & Person(y) & Work(z)) -> UsesWithoutPermission(x,y,z))", "all x.((CopyrightInfringement(x) & UsesProtectedWorks(x) & -Permission(x)) -> UsesWithoutPermission(x))", "all x y.((CopyrightInfringement(x) & Person(y)) -> UsesProtectedWorksWithoutPermission(x,y))", "all x.(CopyrightInfringement(x) -> UsesProtectedWorks(x))", "all x y.((CopyrightInfringement(x) & Person(y)) -> (UsesProtectedWorks(x,y) & -Permission(x)))", "all x y.((CopyrightInfringement(x) & Person(y) & UsesProtectedWorks(x,y)) -> -Permission(y))", "all x.((CopyrightInfringement(x) & UsesProtectedWorks(x) & -Permission(x)) -> CopyrightInfringement(x))", "all x y.((CopyrightInfringement(x) & Person(y) & UsesProtectedWorks(x,y)) -> -Permission(x,y))", "all x y z.((CopyrightInfringement(x) & Person(y) & Works(z)) -> UsesWithoutPermission(x,z))"]}
{"id": "enwn_validation_216", "nl": "Ryan did not ask the band Super Cool for permission to use their song.", "fol": "", "prediction": ["all x y.((Ryan(x) & BandSuperCool(y)) -> -AskedForPermissionToUseSong(x,y))", "all x y z.((Ryan(x) & Band(y) & Song(z)) -> -AskedForPermission(x,y,z))", "all x y z.((Ryan(x) & Band(y) & Song(z)) -> -AsksForPermission(x,y,z))", "all x.((Ryan(x) & BandSuperCool(x)) -> -AskedForPermissionToUseSong(x))", "all x y.((Ryan(x) & Band(y) & -AsksForPermission(x,y)) -> -UsesSong(x,y))", "all x y.((Ryan(x) & BandSuperCool(y)) -> -AsksForPermissionToUseSong(x,y))", "all x y.((Ryan(x) & Band(y)) -> -AskedForPermissionToUseSong(x,y))", "all x y.((Ryan(x) & Band(y) & SuperCool(y)) -> -AskedForPermissionToUseSong(x,y))", "all x.((Ryan(x) & BandSuperCool(x)) -> -AsksForPermissionToUseSong(x))", "all x y z.((Ryan(x) & SuperCool(y) & Song(z)) -> -AskedForPermission(x,y,z))", "all x y.((Ryan(x) & BandSuperCool(y)) -> -AskedForPermission(x,y))", "all x y z.((Ryan(x) & SuperCool(y) & Song(z)) -> -AsksForPermission(x,y,z))", "all x y.((Ryan(x) & Band(y) & -AskedForPermission(x,y)) -> -UsesSong(x,y))", "all x y.((Ryan(x) & BandSuperCool(y)) -> -AsksForPermission(x,y))", "all x y.((Ryan(x) & SuperCool(y)) -> -AskedForPermission(x,y))", "all x y.((Ryan(x) & Band(y)) -> -AsksForPermission(x,y))"]}
{"id": "enwn_validation_217", "nl": "Ryan made a video.", "fol": "", "prediction": ["all x y.((Ryan(x) & Video(y)) -> Made(x,y))", "all x.(Ryan(x) -> MadeVideo(x))", "all x y z.((Ryan(x) & Video(y) & Video(z)) -> Made(x,y,z))", "all x y z.((Ryan(x) & Video(y) & Video(z)) -> MadeBy(x,y,z))", "Ryan made a video.", "all x.((Ryan(x) & Video(y)) -> Made(x,y))", "all x.((Ryan(x) & Video(x)) -> Made(x))", "all x y z.((Ryan(x) & Video(y) & Video(z)) -> Made(x,y))", "all x y.((Ryan(x) & Video(y)) -> MadeBy(x,y))", "all x.((Ryan(x) & Video(x)) -> Made(x,y))", "all x y z.((Ryan(x) & Video(y) & Video(z)) -> MadeBy(x,y))", "all x y.((Ryan(x) & Video(y)) -> Makes(x,y))", "all x.(Ryan(x) -> MakesVideo(x))", "all x.((Ryan(x) & Video(x)) -> MadeBy(x,y))", "all x.((Ryan(x) & Video(x)) -> MadeBy(x))", "all x y z.((Ryan(x) & Video(y) & Video(z)) -> Makes(x,y,z))"]}
{"id": "enwn_validation_218", "nl": "Ryan used a song from the band Super Cool in the video.", "fol": "", "prediction": ["all x y.((Ryan(x) & Song(y) & SuperCool(y)) -> UsedInVideo(x,y))", "all x y z.((Ryan(x) & Song(y) & SuperCool(z)) -> UsedInVideo(x,y,z))", "all x y z.((Ryan(x) & Song(y) & Band(z)) -> UsedInVideo(x,y,z))", "all x y z.((Ryan(x) & Song(y) & Band(z) & SuperCool(y)) -> UsedInVideo(x,y,z))", "all x y z.((Ryan(x) & Song(y) & Band(z) & SuperCool(z)) -> UsedInVideo(x,y,z))", "all x y.((Ryan(x) & Song(y)) -> UsedInVideo(x,y))", "all x y z.((Ryan(x) & Song(y) & Band(z) & SuperCool(y)) -> UsedInVideo(x,y))", "all x y z.((Ryan(x) & Song(y) & Band(z) & SuperCool(y,z)) -> UsedInVideo(x,y))", "all x y z.((Ryan(x) & Song(y) & Band(z) & SuperCool(y,z)) -> UsedInVideo(x,y,z))", "all x y z.((Ryan(x) & Song(y) & Band(z) & UsedInVideo(x,y,z)) -> SuperCool(y,z))", "all x y.((Ryan(x) & Song(y) & SuperCool(z)) -> UsedInVideo(x,y,z))", "all x y.((Ryan(x) & Song(y) & BandSuperCool(y)) -> UsedInVideo(x,y))", "all x y z.((Ryan(x) & Song(y) & Band(z) & SuperCool(y)) -> UsesInVideo(x,y,z))", "all x y.((Ryan(x) & Song(y) & SuperCool(x)) -> UsedInVideo(x,y))", "all x y.((Ryan(x) & Song(y) & SuperCool(y)) -> UsesInVideo(x,y))", "all x y z.((Ryan(x) & Song(y) & Band(z) & UsedInVideo(x,y,z)) -> SuperCool(y))"]}
{"id": "enwn_validation_219", "nl": "All songs by Super Cool are protected work.", "fol": "", "prediction": ["all x.(SuperCool(x) -> ProtectedWork(x))", "all x.((Song(x) & SuperCool(x)) -> ProtectedWork(x))", "all x.(Song(x) -> SuperCool(x))", "all x y.((Song(x) & SuperCool(y)) -> ProtectedWork(x,y))", "all x y.((Song(x) & SuperCool(y)) -> ProtectedWork(x))", "all x.((Song(x) & SuperCold(x)) -> ProtectedWork(x))", "all x.(SuperCoolSong(x) -> ProtectedWork(x))", "all x.(SuperColor(x) -> ProtectedWork(x))", "all x.((Song(x) & SuperColor(x)) -> ProtectedWork(x))", "all x.(SuperCold(x) -> ProtectedWork(x))", "all x y.((Song(x) & SuperCool(y)) -> ProtectedWork(y))", "all x.(Song(x) -> SuperCoolProtectedWork(x))", "all x.(Song(x) -> SuperCoolProtected(x))", "all x.((Song(x) & SuperCool(x)) -> Protected(x))", "all x.((Song(x) & SuperCool(x)) -> -ProtectedWork(x))", "all x.(SuperCool(x) -> ProtectedWork(x))"]}
{"id": "enwn_validation_220", "nl": "You should not copy protected work from other people because that's copyright infringement.", "fol": "", "prediction": ["all x y.((ProtectedWork(x) & Person(y)) -> -CopyProtectedWork(x,y))", "all x.((ProtectedWork(x) & -CopyProtectedWork(x)) -> CopyrightInfringement(x))", "all x y.((Work(x) & Person(y)) -> -CopyProtectedWork(x,y))", "all x y.((CopyProtectedWork(x) & Person(y)) -> CopyrightInfringement(x,y))", "all x y.((Work(x) & Person(y)) -> -CopiesProtectedWork(x,y))", "all x y.((ProtectedWork(x) & Person(y)) -> -Copies(x,y))", "all x y.((ProtectedWork(x) & Person(y) & CopyrightInfringement(x,y)) -> -CopyProtectedWork(x,y))", "all x y.((ProtectedWork(x) & Person(y) & -Copies(x,y)) -> CopyrightInfringement(x))", "all x y.((ProtectedWork(x) & Person(y) & CopyrightInfringement(x)) -> -CopyProtectedWork(x,y))", "all x y.((Person(x) & Person(y) & CopyProtectedWork(x,y)) -> CopyrightInfringement(x))", "all x y z.((ProtectedWork(x) & Person(y) & CopyrightInfringement(z)) -> -CopyProtectedWork(x,y,z))", "all x y.((Person(x) & Person(y)) -> -CopyProtectedWork(x,y))", "all x y.((Person(x) & Person(y) & CopyProtectedWork(x,y)) -> CopyrightInfringement(x,y))", "all x y.((Work(x) & Person(y) & CopyProtected(x,y)) -> CopyrightInfringement(x))", "all x y.((ProtectedWork(x) & Person(y) & CopyrightInfringement(x,y)) -> -Copies(x,y))", "all x y z.((ProtectedWork(x) & Person(y) & CopyrightInfringement(z)) -> -CopyProtectedWork(x,y))"]}
{"id": "enwn_validation_221", "nl": "Ryan made a video and used a song from a band called Super Cool.", "fol": "", "prediction": ["all x y z.((Ryan(x) & Video(y) & Song(z)) -> (Made(x,y) & Used(x,z)))", "all x y z.((Ryan(x) & Video(y) & Song(z) & SuperCool(z)) -> (Made(x,y) & Used(x,z)))", "all x y.((Ryan(x) & Video(y)) -> (Made(x,y) & UsedSong(x,y)))", "all x y z.((Ryan(x) & Video(y) & Song(z)) -> (Made(x,y) & UsedFrom(x,z)))", "all x y z.((Ryan(x) & Video(y) & Song(z)) -> (Made(x,y) & Used(x,z) & SuperCool(z)))", "all x y z.((Ryan(x) & Video(y) & Song(z) & SuperCool(z)) -> (Made(x,y) & UsedFrom(x,z)))", "all x y.((Ryan(x) & Band(y)) -> (MadeVideo(x,y) & UsedSong(x,y)))", "all x y.((Ryan(x) & Video(y)) -> (Made(x,y) & UsedSong(x,y) & SuperCool(y)))", "all x y z.((Ryan(x) & Video(y) & Song(z)) -> (Made(x,y) & SuperCool(z)))", "all x y z.((Ryan(x) & Video(y) & Song(z)) -> (MadeFrom(x,y) & UsedFrom(x,z)))", "all x y z.((Ryan(x) & Video(y) & Song(z)) -> (Made(x,y) & Used(x,z) & SuperCool(y)))", "all x y.((Ryan(x) & Video(y) & SuperCool(z)) -> (Made(x,y) & UsedSong(x,z)))", "all x y z.((Ryan(x) & Video(y) & Song(z) & SuperCool(z)) -> MadeAndUsed(x,y,z))", "all x y.((Ryan(x) & Video(y)) -> (Made(x,y) & UsedSong(x,y) & SuperCool(x)))", "all x y.((Ryan(x) & Video(y)) -> (Made(x,y) & UsedSongFromSuperCool(x)))", "all x y z.((Ryan(x) & Video(y) & Song(z)) -> (Made(x,y) & UsedFrom(x,z) & SuperCool(z)))"]}
{"id": "enwn_validation_222", "nl": "Ryan used Super Cool's song without getting permission from the band first.", "fol": "", "prediction": ["all x y.((Ryan(x) & SuperCool(y)) -> UsedSongWithoutPermission(x,y))", "all x y.((Ryan(x) & SuperCool(y)) -> UsedSong(x,y))", "all x y z.((Ryan(x) & SuperCool(y) & Song(z)) -> UsedWithoutPermission(x,y,z))", "all x y.((Ryan(x) & SuperCool(y)) -> UsedWithoutPermission(x,y))", "all x y.((Ryan(x) & SuperCool(y)) -> UsedSongWithoutBandPermission(x,y))", "all x y z.((Ryan(x) & Song(y) & Band(z)) -> UsedWithoutPermission(x,y,z))", "all x y z.((Ryan(x) & SuperCool(y) & Song(z)) -> UsedWithoutPermission(x,z))", "all x y.((Ryan(x) & SuperCoolSong(y)) -> UsedWithoutPermission(x,y))", "all x y.((Ryan(x) & SuperCool(y) & Song(z)) -> UsedWithoutPermission(x,z))", "all x y.((Ryan(x) & Song(y) & SuperCool(y)) -> UsedWithoutPermission(x,y))", "all x y z.((Ryan(x) & SuperCoolSong(y) & Band(z)) -> UsedWithoutPermission(x,y,z))", "all x.((Ryan(x) & SuperCool(x)) -> UsedSongWithoutPermission(x))", "all x y.((Ryan(x) & SuperCool(y) & Song(y)) -> UsedWithoutPermission(x,y))", "all x y.((Ryan(x) & SuperCool(y) & Song(z)) -> UsedWithoutPermission(x,y,z))", "all x y z.((Ryan(x) & SuperCool(y) & Song(z)) -> (UsedWithoutPermission(x,y,z)))", "all x y z.((Ryan(x) & Song(y) & Band(z) & Used(x,y)) -> -GetsPermission(x,z))"]}
{"id": "enwn_validation_223", "nl": "Ryan used Super Cool's protected work without getting permission from the band first.", "fol": "", "prediction": ["all x y.((Ryan(x) & SuperCool(y)) -> UsedProtectedWork(x,y))", "all x y.((Ryan(x) & SuperCool(y)) -> UsesProtectedWork(x,y))", "all x y.((Ryan(x) & SuperCool(y)) -> ProtectedWork(x,y))", "all x y.((Ryan(x) & SuperCool(y)) -> UsedProtectedWork(x,y))", "all x.((Ryan(x) & SuperCool(x)) -> UsedProtectedWork(x))", "all x y.((Ryan(x) & SuperCool(y)) -> UsedWithoutPermission(x,y))", "all x y z.((Ryan(x) & SuperCool(y) & Band(z)) -> UsedProtectedWork(x,y,z))", "all x y.((Ryan(x) & SuperCool(y)) -> (ProtectedWork(x,y) & -PermissionFromBand(x,y)))", "all x.((Ryan(x) & SuperCool(x)) -> UsesProtectedWork(x))", "all x y z.((Ryan(x) & SuperCool(y) & Band(z)) -> UsesProtectedWork(x,y,z))", "all x y.((Ryan(x) & SuperCool(y)) -> (UsedProtectedWork(x,y) & -GetsPermission(x,y)))", "all x y.((Ryan(x) & SuperCool(y) & ProtectedWork(x,y)) -> -GetsPermission(x,y))", "all x y.((Ryan(x) & SuperCool(y)) -> (UsedProtectedWork(x,y) & -GettingPermission(x,y)))", "all x y.((Ryan(x) & SuperCool(y) & ProtectedWork(x,y)) -> -GetsPermissionFromBand(x,y))", "all x y.((Ryan(x) & SuperCool(y)) -> (ProtectedWork(x,y) & -GetsPermission(x,y)))", "all x y z.((Ryan(x) & SuperCool(y) & ProtectedWork(z)) -> UsedWithoutPermission(x,y,z))"]}
{"id": "enwn_validation_224", "nl": "Ryan should not have used Super Cool's song because he committed copyright infringement.", "fol": "", "prediction": ["all x.((Ryan(x) & -UsedSuperCoolSong(x)) -> CommittedCopyrightInfringement(x))", "all x.((Ryan(x) & -UsedSuperCoolsSong(x)) -> CommittedCopyrightInfringement(x))", "all x y.((Ryan(x) & SuperCool(y)) -> -UsedSong(x,y))", "all x y.((Ryan(x) & SuperCoolSong(y) & CommittedCopyrightInfringement(x)) -> -Used(x,y))", "all x y.((Ryan(x) & SuperCoolSong(y) & CommittedCopyrightInfringement(x,y)) -> -Used(x,y))", "all x y.((Ryan(x) & SuperCoolsSong(y) & CommittedCopyrightInfringement(x)) -> -Used(x,y))", "all x y.((Ryan(x) & SuperCoolsSong(y) & CommittedCopyrightInfringement(x,y)) -> -Used(x,y))", "all x.((Ryan(x) & SuperCoolSong(x)) -> CommittedCopyrightInfringement(x))", "all x.((Ryan(x) & SuperCoolSong(x) & CommittedCopyrightInfringement(x)) -> -Used(x,y))", "all x.((Ryan(x) & SuperCoolsSong(x)) -> CommittedCopyrightInfringement(x))", "all x y.((Ryan(x) & SuperCool(y)) -> -UsesSong(x,y))", "all x.((Ryan(x) & SuperCool(x)) -> -UsedSong(x,CopyrightInfringement))", "all x y.((Ryan(x) & SuperCoolSong(y) & CommittedCopyrightInfringement(x)) -> -Uses(x,y))", "all x y.((Ryan(x) & SuperCoolSong(y) & CommittedCopyrightInfringement(x,y)) -> -Uses(x,y))", "all x y.((Ryan(x) & SuperCoolsSong(y) & CommittedCopyrightInfringement(x)) -> -Uses(x,y))", "(-UsedSuperCoolSong(Ryan) & CommittedCopyrightInfringement(Ryan))"]}
{"id": "enwn_validation_225", "nl": "Scaring people is mean and rude unless you have a good reason.", "fol": "", "prediction": ["all x.((ScaringPeople(x) & -GoodRight(x)) -> (Mean(x) & Rust(x)))", "all x.(ScaringPeople(x) -> (Mean(x) & Rust(x)))", "all x.((ScarePeople(x) & -GoodRight(x)) -> (Mean(x) & Rust(x)))", "all x.((ScaringPeople(x) & -GoodRaison(x)) -> (Mean(x) & Rust(x)))", "all x.((ScaresPeople(x) & -GoodRight(x)) -> (Mean(x) & Rust(x)))", "all x.(ScaringPeople(x) -> (Mean(x) & Rust(x) & -GoodRaison(x)))", "all x.(ScaringPeople(x) -> (Mean(x) & Rust(x) & -GoodRight(x)))", "all x.((ScarePeople(x) & -GoodRaison(x)) -> (Mean(x) & Rust(x)))", "all x.((ScaresPeople(x) & -GoodRaison(x)) -> (Mean(x) & Rust(x)))", "all x.((ScaringPeople(x) & -GoodRight(x)) -> (Mean(x) & Rustic(x)))", "all x.((People(x) & Scare(x)) -> (Mean(x) & Rust(x)))", "all x.((People(x) & Scaring(x)) -> (Mean(x) & Rust(x)))", "all x.((Person(x) & Scare(x)) -> (Mean(x) & Rust(x)))", "all x.((ScaringPeople(x) & -GoodRight(x)) -> (Mean(x) & Rude(x)))", "all x.(ScarePeople(x) -> (Mean(x) & Rust(x)))", "all x.(ScarePeople(x) -> (Mean(x) & Rust(x) & -GoodRaison(x)))"]}
{"id": "enwn_validation_226", "nl": "You generally do not want to do mean or rude things to people.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y)) -> -(Mean(x,y) | Rust(x,y)))", "all x y.((Person(x) & Person(y)) -> -(DoMean(x,y) | DoRust(x,y)))", "all x.((People(x) & -(Mean(x) | Rust(x))) -> -(Mean(x) | Rust(x))))", "all x.((People(x) & -(Mean(x) | Rust(x)))) -> -(Mean(x) | Rust(x))))", "all x.((People(x) & -(Mean(x) | Rust(x)))) -> -(Mean(x) | Rust(x)))", "all x y.((Person(x) & Person(y)) -> (-DoMean(x,y) | DoRust(x,y)))", "all x y.((Person(x) & Person(y)) -> -(DoMean(x,y) | DoRust(x,y))))", "all x y.((Person(x) & Person(y)) -> -(Mean(x,y) | Rust(x,y))))", "all x y.((People(x) & Person(y)) -> -(Mean(x,y) | Rust(x,y)))", "all x.((People(x) & -(Mean(x) | Rust(x)))) -> -(Mean(x) | Reckless(x)))", "all x.((Person(x) & -(Mean(x) | Rust(x))) -> -(Mean(x) | Rust(x))))", "all x.((Person(x) & -(Mean(x) | Rust(x)))) -> -DoMean(x))", "all x.((Person(x) & -(Mean(x) | Rust(x)))) -> -(Mean(x) | Rust(x))))", "all x.((Person(x) & -(Mean(x) | Rust(x)))) -> -(Mean(x) | Rust(x)))", "all x.((Person(x) & -(Mean(x) | Rust(x))) -> -DoMean(x))", "all x y.((Person(x) & (Mean(y) | Rust(y))) -> -DoMean(x,y))"]}
{"id": "enwn_validation_227", "nl": "Luke yelled fire for fun.", "fol": "", "prediction": ["all x y.((Luke(x) & Fire(y)) -> YelpedForFun(x,y))", "all x y.((Luke(x) & Fire(y)) -> YelledForFun(x,y))", "all x y.((Luke(x) & Fire(y)) -> YellsForFun(x,y))", "Luke yelled fire for fun.", "all x y.((Luke(x) & Fire(y)) -> YelpsForFun(x,y))", "all x y.((Luke(x) & Fire(y)) -> YeltsForFun(x,y))", "all x.((Luke(x) & YelledFire(x)) -> Fun(x))", "all x y.((Luke(x) & Fire(y)) -> YieldsForFun(x,y))", "all x y.((Luke(x) & Fire(y)) -> YeelledForFun(x,y))", "all x y.((Luke(x) & Fire(y)) -> YallenForFun(x,y))", "all x y.((Luke(x) & Fire(y)) -> YelpForFun(x,y))", "all x y.((Luke(x) & Fire(y)) -> YallensForFun(x,y))", "all x y.((Luke(x) & Fire(y)) -> YellingForFun(x,y))", "all x.((Luke(x) & YelpedFire(x)) -> Fun(x))", "all x.(Luke(x) -> YelledFireForFun(x))", "all x.((Luke(x) & Fire(x)) -> YelpedForFun(x))"]}
{"id": "enwn_validation_228", "nl": "Yelling fire for fun is not a good reason to yell fire.", "fol": "", "prediction": ["all x.((YellsFireForFun(x) & -GoodRightToYellFire(x)) -> -GoodRightToYellFire(x))", "all x.((YellsFire(x) & ForFun(x)) -> -GoodRightToYellFire(x))", "all x.((YellForFun(x) & -GoodRightToYellForFun(x)) -> -GoodRightToYellForFun(x))", "all x.((YellsFire(x) & Fun(x)) -> -GoodRightToYellFire(x))", "all x.(YellsFireForFun(x) -> -GoodRightToYellFire(x))", "all x.((YellingForFun(x) & -GoodRightToYellFire(x)) -> -GoodRightToYellFire(x))", "all x.(YellForFun(x) -> -GoodRightToYellForFun(x))", "all x.((YellFire(x) & Fun(x)) -> -GoodRightToYellFire(x))", "all x.((YellsFireForFun(x)) -> -GoodRightToYellFire(x))", "all x.(YellingForFun(x) -> -GoodRightToYellForFun(x))", "all x.(YellFireForFun(x) -> -GoodRightToYellFire(x))", "all x.((YellsFireForFun(x) & -GoodRightToYellFire(x)) -> -GoodRightToYellFireForFun(x))", "all x.(YellsFire(x) -> -GoodRightToYellFire(x))", "all x.(YellFire(x) -> -GoodRightToYellFire(x))", "all x.((YellsFireForFun(x) & -GoodRun(x)) -> -GoodRightToYellFire(x))", "all x.(YellingForFun(x) -> -GoodRightToYellFire(x))"]}
{"id": "enwn_validation_229", "nl": "When you yell fire for without a good reason, you scare everyone around you.", "fol": "", "prediction": ["all x.((YellsFire(x) & -GoodRight(x)) -> ScaresEveryone(x))", "all x.((YellsFire(x) & WithoutGoodRight(x)) -> ScaresEveryone(x))", "all x.((YellsFire(x) & WithoutGoodRight(x)) -> ScaresEveryoneAround(x))", "all x.((YellsFireFor(x) & -GoodRight(x)) -> ScaresEveryone(x))", "all x.((YellsFire(x) & -GoodRun(x)) -> ScaresEveryone(x))", "all x.((YellsFire(x) & WithoutGoodRight(x)) -> ScaresEveryoneAroundYou(x))", "all x.((YellsFireFor(x) & -GoodRight(x)) -> ScaresEveryoneAround(x))", "all x.((YellsFireFor(x) & WithoutGoodRight(x)) -> ScaresEveryoneAround(x))", "all x.((YellsFire(x) & WithoutGoodRun(x)) -> ScaresEveryone(x))", "all x.((YellsFireFor(x) & -GoodRun(x)) -> ScaresEveryone(x))", "all x.((YellsFire(x) & -GoodRight(x)) -> ScaresEveryoneAround(x))", "all x.((YellsFireFor(x) & WithoutGoodRight(x)) -> ScaresEveryoneAroundYou(x))", "all x.((YellsFire(x) & WithoutGoodRun(x)) -> ScaresEveryoneAround(x))", "all x.((YellsFireFor(x) & WithoutGoodRight(x)) -> ScaresEveryone(x))", "all x.((YellsFireFor(x) & -GoodRight(x)) -> ScaresEveryoneAroundYou(x))", "all x.((YellsFireFor(x) & -GoodRun(x)) -> ScaresEveryoneAround(x))"]}
{"id": "enwn_validation_230", "nl": "You should not scare people without good reason.", "fol": "", "prediction": ["all x.((Person(x) & -Scare(x)) -> -Scare(x))", "all x y.((Cause(x) & Person(y)) -> -Scare(x,y))", "all x y.((Scare(x) & Person(y)) -> -Scare(x,y))", "all x.((People(x) & -Scare(x)) -> -Scare(x))", "all x y.((Person(x) & Scare(y)) -> -Scare(x,y))", "all x.((Cause(x) & -Scare(x)) -> -Scare(x))", "all x.((ScarePeople(x) & -GoodRight(x)) -> -ScarePeople(x))", "all x.((ScarePeople(x) & -GoodRaison(x)) -> -ScarePeople(x))", "all x.((Person(x) & Scare(x)) -> -Scare(x))", "all x y.((Scare(x) & Person(y)) -> -Scare(x,y))", "all x y.((Scare(x) & Person(y) & -Scare(x,y)) -> -Scare(x,y))", "all x.((ScarePeople(x) & -GoodRight(x)) -> -(ScarePeople(x) & ScarePeople(x)))", "all x.((Person(x) & -Scare(x)) -> -Scare(x))", "all x.((Scare(x) & -Scare(x)) -> GoodRight(x))", "all x.((Person(x) & -Scare(x)) -> GoodRight(x))", "all x y.((Scare(x) & Person(y)) -> -(Scare(x,y) & GoodRight(y)))"]}
{"id": "enwn_validation_231", "nl": "Luke yelled fire without a good reason.", "fol": "", "prediction": ["all x y.((Luke(x) & Fire(y)) -> YelledWithoutGoodRight(x,y))", "all x y.((Luke(x) & Fire(y)) -> YelpedWithoutGoodRight(x,y))", "all x y.((Luke(x) & Fire(y) & -GoodRight(x)) -> Yelped(x,y))", "all x y.((Luke(x) & Fire(y)) -> YelledWithoutGoodRun(x,y))", "all x y.((Luke(x) & Fire(y)) -> YelledWithoutGoodRaison(x,y))", "all x y.((Luke(x) & Fire(y) & -GoodRun(x)) -> Yelped(x,y))", "all x y.((Luke(x) & Fire(y)) -> YelledWithoutGoodRite(x,y))", "all x.((Luke(x) & Fire(y)) -> YelledWithoutGoodRight(x,y))", "all x.((Luke(x) & YelledFire(x)) -> -GoodRight(x))", "all x y.((Luke(x) & Fire(y) & -GoodRaison(x)) -> Yelped(x,y))", "all x y.((Luke(x) & Fire(y)) -> YelpedWithoutGoodRun(x,y))", "all x y.((Luke(x) & Fire(y)) -> Yelled(x,y))", "all x.(Luke(x) -> (YelledFire(x) & -GoodRight(x)))", "all x y.((Luke(x) & Fire(y)) -> YelpedWithoutGoodRaison(x,y))", "all x.((Luke(x) & YelpedFire(x)) -> -GoodRight(x))", "all x.((Luke(x) & Fire(y) & -GoodRight(x)) -> Yelped(x,y))"]}
{"id": "enwn_validation_232", "nl": "Luke scared everyone around him without a good reason.", "fol": "", "prediction": ["all x y.((Luke(x) & Everyone(y)) -> ScarredWithoutGoodRight(x,y))", "all x y.((Luke(x) & Everyone(y)) -> ScaredWithoutGoodRight(x,y))", "all x y.((Luke(x) & Everyone(y)) -> ScarredWithoutGoodRun(x,y))", "all x y.((Luke(x) & Everyone(y)) -> Scarred(x,y))", "all x y.((Luke(x) & Everyone(y)) -> ScarredWithoutGoodRaison(x,y))", "all x y.((Luke(x) & Everyone(y)) -> Scared(x,y))", "all x y.((Luke(x) & Everyone(y)) -> ScaredWithoutGoodRun(x,y))", "all x y.((Luke(x) & EveryoneAround(y)) -> ScarredWithoutGoodRight(x,y))", "all x y.((Luke(x) & Person(y)) -> ScarredWithoutGoodRight(x,y))", "all x y.((Luke(x) & Everyone(y)) -> ScarredWithoutGoodRite(x,y))", "all x.((Luke(x) & ScaredEveryone(x)) -> -GoodRight(x))", "all x y z.((Luke(x) & Everyone(y) & Reason(z)) -> Scarred(x,y,z))", "all x y.((Luke(x) & Everyone(y) & -GoodRight(x)) -> Scared(x,y))", "all x y.((Luke(x) & Everyone(y) & -GoodRight(x)) -> Scarred(x,y))", "all x y z.((Luke(x) & Everyone(y) & Reason(z)) -> ScarredWithout(x,y,z))", "all x.((Luke(x) & ScarredEveryone(x)) -> -GoodRight(x))"]}
{"id": "enwn_validation_233", "nl": "Luke should not have yelled fire.", "fol": "", "prediction": ["all x.((Luke(x) & -YelledFire(x)) -> -YelledFire(x))", "all x.(Luke(x) -> -YelledFire(x))", "all x.((Luke(x) & Fire(y)) -> -Yelled(x,y))", "(all x.(Luke(x) -> -YelledFire(x)))", "all x.((Luke(x) & -yelledFire(x)) -> -YelledFire(x))", "all x.((Luke(x) & Fire(x)) -> -Yelled(x))", "all x.((Luke(x) & -YelledFire(x)) -> -(YelledFire(x) & -YelledFire(x)))", "all x.(Luke(x) -> -yelledFire(x))", "all x.((Luke(x) & NoYelledFire(x)) -> -YelledFire(x))", "all x.((Luke(x) & -YelledFire(x)) -> -HasYelledFire(x))", "all x.((Luke(x) & Fire(x)) -> -Yelled(x,y))", "all x.((Luke(x) & -YelledFire(x)) -> -(YelledFire(x) & Luke(x)))", "all x.((Luke(x) & Fire(x)) -> -Yelled(x,Fire))", "all x.((Luke(x) & -YelledFire(x)) -> -yelledFire(x))", "all x.((Luke(x) & -YelledFire(x)) -> -(YelledFire(x) & -YelledFire(x))))", "all x.((Luke(x) & -YelledFire(x)) -> NotHasYelledFire(x))"]}
{"id": "enwn_validation_234", "nl": "Even though you won't be punished, you should not do bad things.", "fol": "", "prediction": ["all x.((Punished(x) & -Punished(x)) -> -BadThings(x))", "all x.((Punished(x) & -Punished(x)) -> -DoBadThings(x))", "all x.((Punished(x) & -Punished(x)) -> -BadThing(x))", "all x.((Punished(x) & -Penalized(x)) -> -BadThings(x))", "all x.((Punished(x) & -Punished(x)) -> -DoBadThings(x))", "all x.((Father(x) & -Punished(x)) -> -BadThings(x))", "all x.(((Punished(x) & -Punished(x)) -> -BadThings(x))", "all x.((Punished(x) & -Punched(x)) -> -BadThings(x))", "all x.((BadThing(x) & -Punished(x)) -> -BadThing(x))", "all x.((Punished(x) & -Pencilled(x)) -> -BadThings(x))", "all x.((BadThing(x) & -Punished(x)) -> -DoBadThings(x))", "all x.((BadThing(x) & -Punished(x)) -> -DoBadThings(x))", "all x.((Punished(x) & -Penalized(x)) -> -DoBadThings(x))", "all x.((BadThing(x) & -Punished(x)) -> -Punished(x))", "all x.((Punished(x) & -Penalized(x)) -> -BadThing(x))", "all x.((Father(x) & -Punished(x)) -> -BadThing(x))"]}
{"id": "enwn_validation_235", "nl": "If no one sees you do something bad, you won't get punished.", "fol": "", "prediction": ["all x.((NoOneSees(x) & Bad(x)) -> -Punished(x))", "all x.((NoOneSees(x) & BadDoing(x)) -> -Punished(x))", "all x.((NoOneSees(x) & BadDoes(x)) -> -Punished(x))", "all x.((NoOneSeesYou(x) & Bad(x)) -> -Punished(x))", "all x.((NoOneSees(x) & BadDoing(x)) -> -Punished(x))", "all x.((NoOneSees(x,y) & Bad(y)) -> -Punished(x))", "all x.((NoOneSeesYou(x) & BadDoes(x)) -> -Punished(x))", "all x.((NoOneSeesYou(x) & BadDoing(x)) -> -Punished(x))", "all x.((NoOneSees(x) & DoBad(x)) -> -Punished(x))", "all x.((NoOneSees(x) & Bad(x)) -> -Penalized(x))", "all x.((NoOneSeesYouDoBad(x)) -> -Punished(x))", "all x.((NoOneSees(x) & BadDoing(x)) -> -Penalized(x))", "all x.((NoOneSees(x,y) & BadDoes(y)) -> -Punished(x))", "all x.((NoOneSees(x) & BadDoes(x)) -> -Penalized(x))", "all x.((NoSees(x,y) & Bad(y)) -> -Punished(x))", "all x.((NoOneSeesBad(x)) -> -Punished(x))"]}
{"id": "enwn_validation_236", "nl": "Mike can steal the wallet.", "fol": "", "prediction": ["all x.(Mike(x) -> CanStealWallet(x))", "all x.(Mike(x) -> CanStoleWallet(x))", "all x y.((Mike(x) & Wallet(y)) -> CanSteal(x,y))", "all x y.((Mike(x) & Pocket(y)) -> CanSteal(x,y))", "all x y.((Mike(x) & Wallet(y)) -> CanStole(x,y))", "all x.((Mike(x) & CanStealWallet(x)) -> CanStealWallet(x))", "all x y.((Mike(x) & Pocket(y)) -> CanStole(x,y))", "all x y.((Mike(x) & wallet(y)) -> CanSteal(x,y))", "all x y.((Mike(x) & Briefcase(y)) -> CanSteal(x,y))", "all x.((Mike(x) & StealWallet(x)) -> CanStealWallet(x))", "all x.((Mike(x) & Wallet(y)) -> CanSteal(x,y))", "all x y.((Mike(x) & wallet(y)) -> CanStole(x,y))", "all x.(Mike(x) -> StealWallet(x))", "all x y.((Mike(x) & Briefcase(y)) -> CanStole(x,y))", "All x.(Mike(x) -> CanStealWallet(x))", "all x.((Mike(x) & CanStealWallet(x)) -> CanStoleWallet(x))"]}
{"id": "enwn_validation_237", "nl": "When you turn away from something you cannot see it.", "fol": "", "prediction": ["all x y.((TurnAway(x) & Something(y)) -> -See(x,y))", "all x y.((TurnAway(x) & Something(y)) -> -Seen(x,y))", "all x y.((TurnAway(x) & Something(y)) -> -CanSee(x,y))", "all x.(TurnAwayFrom(x) -> -See(x))", "all x y.((TurnsAway(x) & Something(y)) -> -See(x,y))", "all x y.((TurnAwayFrom(x,y) & Something(y)) -> -See(x,y))", "all x.((TurnAway(x) & Something(x)) -> -See(x))", "all x y.((TurnsAway(x) & Something(y)) -> -Seen(x,y))", "all x y.((TurnAbove(x) & Something(y)) -> -See(x,y))", "all x.((TurnAway(x) & Something(x)) -> -Seen(x))", "all x.(TurnAwayFrom(x) -> -Seen(x))", "all x y.((TurnsAway(x) & Something(y)) -> -CanSee(x,y))", "all x y.((TurnAwayFrom(x,y) & Something(y)) -> -CanSee(x,y))", "all x.(TurnAway(x) -> -See(x))", "all x y.((TurnAway(x) & Something(y)) -> -Sees(x,y))", "all x y.((TurnsAway(x) & Something(y)) -> -Sees(x,y))"]}
{"id": "enwn_validation_238", "nl": "Josh turned away from Mike and the wallet.", "fol": "", "prediction": ["all x y.((Josh(x) & Mike(y)) -> TurnedAwayFrom(x,y))", "all x y.((Josh(x) & Mike(y)) -> TurnedAway(x,y))", "all x y.((Josh(x) & Mike(y)) -> TurnedAbove(x,y))", "all x y.((Josh(x) & Mike(y)) -> (TurnedAwayFrom(x,y) & TurnedAwayFrom(x,y)))", "all x y z.((Josh(x) & Mike(y) & Wallet(z)) -> TurnedAwayFrom(x,y,z))", "all x y.((Josh(x) & Mike(y)) -> (TurnedAway(x,y) & TurnedAway(x,y)))", "all x y.((Josh(x) & Mike(y)) -> TurnedAboveAndWallet(x,y))", "all x y z.((Josh(x) & Mike(y) & Wallet(z)) -> TurnedAway(x,y,z))", "all x y z.((Josh(x) & Mike(y) & Wallet(z)) -> TurnedAbove(x,y,z))", "all x y z.((Josh(x) & Mike(y) & Billboard(z)) -> TurnedAwayFrom(x,y,z))", "all x.((Josh(x) & Mike(y)) -> TurnedAway(x,y))", "all x y z.((Josh(x) & Mike(y) & Briefcase(z)) -> TurnedAwayFrom(x,y,z))", "all x.((Josh(x) & Mike(y)) -> TurnedAwayFrom(x,y))", "all x y z.((Josh(x) & Mike(y) & Billboard(z)) -> TurnedAway(x,y,z))", "all x y.((Josh(x) & Mike(y)) -> TurnedAwayAndWallet(x,y))", "all x y.((Josh(x) & Mike(y)) -> TurnedAwayFromAndWallet(x,y))"]}
{"id": "enwn_validation_239", "nl": "Stealing is bad.", "fol": "", "prediction": ["all x.(Stealing(x) -> Bad(x))", "All x.(Stealing(x) -> Bad(x))", "all x.(Stolen(x) -> Bad(x))", "all x.(Staling(x) -> Bad(x))", "all x.(Slealing(x) -> Bad(x))", "all x.(Stoaling(x) -> Bad(x))", "all x.(Steal(x) -> Bad(x))", "all x.(Stoling(x) -> Bad(x))", "All x.(Stolen(x) -> Bad(x))", "all x.(Stolling(x) -> Bad(x))", "all x.(Stealling(x) -> Bad(x))", "all x.(Stealing(x) -> Bad(x))", "all x y.((Stealing(x) & -Bad(y)) -> Stealing(x))", "all x y.((Stolen(x) & Stealing(y)) -> Bad(x))", "all x y.((Stolen(x) & -Stolen(y)) -> Bad(x))", "all x y.((Stealing(x) & -Storm(y)) -> Bad(x))"]}
{"id": "enwn_validation_240", "nl": "Josh turned away and cannot see Mike or the wallet.", "fol": "", "prediction": ["all x.((Josh(x) & TurnedAway(x)) -> (-SeesMike(x) & -SeesWallet(x)))", "all x.((Josh(x) & TurnedAway(x)) -> (-SeesMike(x) | CannotSeeWallet(x))))", "all x.((Josh(x) & TurnedAway(x)) -> (-SeenMike(x) | -SeenWallet(x))))", "all x.((Josh(x) & TurnedAway(x)) -> (-Seen(x,Mike) | -Seen(x,Wallet))))", "all x.(Josh(x) -> (TurnedAway(x) & -SeesMike(x) & -SeesWallet(x)))", "all x.((Josh(x) & TurnedAway(x)) -> (-SeesMike(x) | -SeesWallet(x))))", "all x y.((Josh(x) & Mike(y)) -> (TurnedAway(x,y) & -CanSee(x,y)))", "all x y.((Josh(x) & Mike(y)) -> (TurnedAway(x,y) & -Sees(x,y) & -SeesWallet(x,y)))", "all x y.((Josh(x) & Mike(y)) -> (TurnedAway(x,y) & -Sees(x,y)))", "all x y.((Josh(x) & Mike(y)) -> (TurnedAway(x,y) & -CanSee(x,y) & -CanSeeWallet(x,y)))", "all x y.((Josh(x) & Mike(y)) -> (TurnedAway(x) & -Sees(x,y) & -SeesWallet(x,y)))", "all x y.((Josh(x) & Mike(y)) -> (TurnedAway(x,y) & -CanSee(x,y) & -CanSee(x,y)))", "all x.((Josh(x) & TurnedAway(x)) -> (-SeeMike(x) & -SeeWallet(x)))", "all x.((Josh(x) & TurnedAway(x)) -> (-Sees(x,Mike) | CannotSee(x,Wallet))))", "all x.((Josh(x) & TurnedAway(x)) -> (-SeeMike(x) | -SeeWallet(x))))", "all x y.((Josh(x) & Mike(y)) -> (TurnedAway(x,y) & -Seen(x,y) & -Seen(x,y)))"]}
{"id": "enwn_validation_241", "nl": "Mike can steal the wallet without Josh seeing.", "fol": "", "prediction": ["all x y.((Mike(x) & Josh(y)) -> CanStoleWallet(x,y))", "all x y.((Mike(x) & Josh(y)) -> CanStealWallet(x,y))", "all x y.((Mike(x) & Josh(y)) -> CanStoleWalletWithoutSeeing(x,y))", "all x y.((Mike(x) & Josh(y)) -> CanStealWalletWithoutSeeing(x,y))", "all x y.((Mike(x) & Josh(y)) -> (StoleWallet(x,y) & -SeesWallet(x,y)))", "all x y.((Mike(x) & Josh(y)) -> (StoleWallet(x,y) & -Seen(x,y)))", "all x y z.((Mike(x) & wallet(y) & Josh(z)) -> CanStole(x,y,z))", "all x y z.((Mike(x) & Pocket(y) & Josh(z)) -> CanStole(x,y,z))", "all x y.((Mike(x) & Josh(y)) -> (StoleWallet(x,y) & -Sees(x,y)))", "all x y.((Mike(x) & Josh(y)) -> (StoleWallet(x,y) & -SelectsWallet(x,y)))", "all x y.((Mike(x) & Josh(y)) -> StealWalletWithoutSeeing(x,y))", "all x y.((Mike(x) & Josh(y)) -> StealWallet(x,y))", "all x.((Mike(x) & Josh(y)) -> CanStoleWallet(x,y))", "all x y.((Mike(x) & Josh(y)) -> CanStolenWallet(x,y))", "all x y z.((Mike(x) & Pocket(y) & Josh(z)) -> CanStoleWithoutSeeing(x,y,z))", "all x y z.((Mike(x) & Pocket(y) & Josh(z)) -> CanStealWithoutSeeing(x,y,z))"]}
{"id": "enwn_validation_242", "nl": "Mike can do something bad without Josh seeing.", "fol": "", "prediction": ["all x y.((Mike(x) & Josh(y)) -> CanDoBadWithoutSeeing(x,y))", "all x y.((Mike(x) & Josh(y)) -> CanDoBad(x,y))", "all x y z.((Mike(x) & Josh(y) & Bad(z)) -> CanDo(x,z))", "all x y z.((Mike(x) & Josh(y) & Bad(z)) -> CanDo(x,y,z))", "all x y.((Mike(x) & Josh(y)) -> CanDo(x,y))", "all x.((Mike(x) & JoshSeeing(x)) -> CanDoBad(x))", "all x.(Mike(x) -> CanDoBadWithoutJosh(x))", "all x y z.((Mike(x) & Josh(y) & Bad(z)) -> CanDoWithoutSeeing(x,y,z))", "all x.((Mike(x) & Josh(x)) -> CanDoBadWithoutSeeing(x))", "all x.((Mike(x) & Josh(y)) -> CanDoBadWithoutSeeing(x,y))", "all x y.((Mike(x) & Josh(y)) -> CanDoBadWithoutSeeing(x,y))", "all x y.((Mike(x) & Josh(y)) -> CanDoBad(x,y))", "all x y z.((Mike(x) & Josh(y) & Bad(z)) -> CanDoWithoutSeeing(x,z))", "all x y z.((Mike(x) & Josh(y) & Bad(z)) -> CanDoWithout(x,y,z))", "all x.((Mike(x) & Josh(y)) -> CanDoBad(x,y))", "all x y.((Mike(x) & Josh(y)) -> CanDoBadWithoutSeen(x,y))"]}
{"id": "enwn_validation_243", "nl": "Mike can do something bad without getting punished.", "fol": "", "prediction": ["all x.(Mike(x) -> CanDoBad(x))", "all x.(Mike(x) -> CanDoBadWithoutPunishment(x))", "all x y.((Mike(x) & Bad(y)) -> CanDo(x,y))", "all x.(Mike(x) -> CanDoBadWithoutPenalization(x))", "all x.((Mike(x) & Bad(x)) -> CanDo(x,y))", "all x.(Mike(x) -> (CanDoBad(x) & -Punished(x)))", "all x.(Mike(x) -> (CanDoBad(x) & -Penalized(x)))", "all x.(Mike(x) -> CanDoBadWithoutPunished(x))", "all x.(Mike(x) -> CanDoBadWithoutPenalty(x))", "all x.(Mike(x) -> CanDoBadWithoutPentament(x))", "all x y.((Mike(x) & Bad(y)) -> CanDoWithoutPunishment(x,y))", "all x.(Mike(x) -> CanDoBad(x))", "all x y.((Mike(x) & Bad(y)) -> CanDo(x,y))", "all x.(Mike(x) -> (DoBad(x) & -Penalized(x)))", "all x.(Mike(x) -> (CanDoBad(x) & -Puned(x)))", "all x.(Mike(x) -> (DoBad(x) & -Punished(x)))"]}
{"id": "enwn_validation_244", "nl": "Mike should not do something bad even though he will not get punished.", "fol": "", "prediction": ["all x.((Mike(x) & -Punished(x)) -> -DoBad(x))", "all x.((Mike(x) & -Punished(x)) -> -Bad(x))", "all x.((Mike(x) & -Penalized(x)) -> -DoBad(x))", "all x y.((Mike(x) & Bad(y)) -> -Punished(x,y))", "all x.((Mike(x) & -Punished(x)) -> -DoBad(x))", "all x.((Mike(x) & -Penalized(x)) -> -Bad(x))", "all x.((Mike(x) & -Punished(x)) -> -BadDoing(x))", "all x.((Mike(x) & -Penalized(x)) -> -DoBad(x))", "all x.((Mike(x) & -GetPunished(x)) -> -DoBad(x))", "all x.((Mike(x) & -Bad(x)) -> -Punished(x))", "all x y.((Mike(x) & Bad(y)) -> -Penalized(x,y))", "all x y.((Mike(x) & Bad(y)) -> -Punished(x))", "all x.((Mike(x) & -Puned(x)) -> -DoBad(x))", "all x.((Mike(x) & -Penalized(x)) -> -BadDoing(x))", "all x y z.((Mike(x) & Bad(y) & Punished(z)) -> -Do(x,y))", "all x y.((Mike(x) & Bad(y) & -Punished(x)) -> -Do(x,y))"]}
{"id": "enwn_validation_245", "nl": "You should clean messes you create.", "fol": "", "prediction": ["all x.((Mess(x) & Creates(x)) -> Cleans(x))", "all x y.((Mess(x) & Create(y)) -> Clean(x,y))", "all x.((Mess(x) & Create(x)) -> Clean(x))", "all x.((Measure(x) & Create(x)) -> Clean(x))", "all x.((Mess(x) & Creates(x)) -> Cleans(x,y))", "all x.((Mess(x) & Created(x)) -> Clean(x))", "all x y.((Measure(x) & Create(y)) -> Clean(x,y))", "all x.((Measure(x) & Creates(x)) -> Cleans(x))", "all x y.((Mess(x) & Created(y)) -> Clean(x,y))", "all x.(CleanMess(x) -> Creates(x))", "all x.((Mess(x) & Creates(x)) -> Clean(x))", "all x y.((Mess(x) & Created(y)) -> Cleans(x,y))", "all x.(CleanMeasures(x) -> Creates(x))", "all x.((Measure(x) & Created(x)) -> Clean(x))", "all x.((Measure(x) & Creates(x)) -> Cleans(x,y))", "all x.(CleanMess(x) -> CreateMess(x))"]}
{"id": "enwn_validation_246", "nl": "If you made a spill, you made a mess.", "fol": "", "prediction": ["all x.((MadeSpray(x) & MadeMask(x)) -> MadeMask(x))", "all x.((MadeSpill(x) & MadeMask(x)) -> MadeMask(x))", "all x.((MadeSpoilage(x) & MadeMask(x)) -> MadeMask(x))", "all x.((MadeSpray(x) & MadeMachineMachine(x)) -> MadeMachineMachine(x))", "all x.((MadeSpoke(x) & MadeMask(x)) -> MadeMask(x))", "all x.((MadeSpill(x) & MadeMachineMachine(x)) -> MadeMachineMachine(x))", "all x.((MadeSpoilage(x) & MadeMachineMachine(x)) -> MadeMachineMachine(x))", "all x.((MadeSponge(x) & MadeMask(x)) -> MadeMask(x))", "all x.((MadeSpoil(x) & MadeMask(x)) -> MadeMask(x))", "all x.((Spoken(x) & Made(x,y)) -> MadeMask(x,z))", "all x.((Spoken(x) & Made(x,y)) -> Made(x,z))", "all x.((Spoken(x) & Made(x,y)) -> MadeMess(x))", "all x.((MadeSpray(x) & MadeMachineMachine(x)) -> MadeMachine(x))", "all x.((Spoken(x) & Made(x,y)) -> MadeMask(x))", "all x.((MadeSpray(x) & MadeMask(x)) -> MadeMame(x))", "all x.((Spoken(x) & Made(x,y)) -> MadeMachine(x,z))"]}
{"id": "enwn_validation_247", "nl": "Amy dropped her ice-cream on the floor and did not clean it.", "fol": "", "prediction": ["all x.((Amy(x) & DroppedIceCream(x)) -> -Cleaned(x))", "all x.((Amy(x) & DroppedIceCream(x)) -> -CleanedIceCream(x))", "all x y.((Amy(x) & IceCream(y)) -> (PluckedOnFloor(x,y) & -Cleaned(x,y)))", "all x y.((Amy(x) & IceCream(y)) -> (DroppedOnFloor(x,y) & -Cleared(x,y)))", "all x y.((Amy(x) & IceCream(y)) -> (PluckedOnFloor(x,y) & -Cleared(x,y)))", "all x y.((Amy(x) & IceCream(y)) -> (LoadedOnFloor(x,y) & -Cleaned(x,y)))", "all x y.((Amy(x) & IceCream(y)) -> (DroppedOnFloor(x,y) & -Cleaned(x,y)))", "all x y z.((Amy(x) & IceCream(y) & Floor(z)) -> (PluckedOn(x,y) & -Cleaned(x,z)))", "all x.((Amy(x) & DroppedIceCreamOnFloor(x)) -> -CleanedIceCream(x))", "all x.((Amy(x) & DroppedIceCream(x)) -> -ClearedIceCream(x))", "all x y.((Amy(x) & IceCream(y)) -> (LoadedOnFloor(x,y) & -Cleared(x,y)))", "all x y z.((Amy(x) & IceCream(y) & Floor(z)) -> (PluckedOn(x,y) & -Cleared(x,z)))", "all x.((Amy(x) & DroppedIceCream(x)) -> -CleansIceCream(x))", "all x y z.((Amy(x) & IceCream(y) & Floor(z) & DroppedOn(x,y,z)) -> -Cleaned(x,y))", "all x y z.((Amy(x) & IceCream(y) & Floor(z)) -> (DroppedOn(x,y) & -Cleared(x,z)))", "all x y.((Amy(x) & IceCream(y)) -> (Dropped(x,y) & -Cleared(x,y)))"]}
{"id": "enwn_validation_248", "nl": "If you drop ice cream on the floor, you make a spill.", "fol": "", "prediction": ["all x.((DropsIceCream(x) & Floor(x)) -> MakesSpill(x))", "all x.((DropsIceCreamOnFloor(x) & MakesSpill(x)) -> DropsIceCreamOnFloor(x))", "all x.((DropsIceCream(x) & Floor(x)) -> MakesSpoilage(x))", "all x.((DropsIceCream(x) & Floor(x)) -> MakesSpoke(x))", "all x.(DropsIceCreamOnFloor(x) -> MakesSpill(x))", "all x y.((DropsIceCream(x) & Floor(y)) -> MakesSpill(x))", "all x.((DropsIceCreamOnFloor(x) & MakesSpoilage(x)) -> DropsIceCreamOnFloor(x))", "all x.((DropsIceCreamOnFloor(x)) -> MakesSpill(x))", "all x y.((DropsIceCream(x) & Floor(y)) -> MakesSpill(x,y))", "all x y.((DropsIceCreamOnFloor(x) & Floor(y)) -> MakesSpill(x))", "all x y.((DropsIceCream(x) & Floor(y)) -> MakesSpoilage(x))", "all x.((DropsIceCreamOnFloor(x) & MakesSpoke(x)) -> DropsIceCreamOnFloor(x))", "all x.((DropsIceCream(x) & OnFloor(x)) -> MakesSpill(x))", "all x.(DropsIceCreamOnFloor(x) -> MakesSpoilage(x))", "all x y.((DropsIceCream(x) & Floor(y)) -> MakesSpoke(x))", "all x.((DropsIceCream(x) & Floor(x)) -> Spill(x))"]}
{"id": "enwn_validation_249", "nl": "You should clean spills you made.", "fol": "", "prediction": ["all x.((Spill(x) & Made(x)) -> Clean(x))", "all x.((Spoilage(x) & Made(x)) -> Clean(x))", "all x.((Spoilage(x) & Made(x)) -> Cleans(x))", "all x.((Spill(x) & Made(x)) -> Cleans(x))", "all x.((Spill(x) & Made(x)) -> Cleans(x,y))", "all x y.((Spill(x) & Spill(y)) -> Clean(x,y))", "all x.((Spoilage(x) & Made(x)) -> Cleans(x,y))", "all x y.((Spill(x) & Spill(y)) -> Cleans(x,y))", "all x.((Spill(x) & Made(x)) -> Clean(x,y))", "all x y.((Spill(x) & Made(y)) -> Clean(x,y))", "all x.((Spoil(x) & Made(x)) -> Clean(x))", "all x y.((Spoilage(x) & Spill(y)) -> Clean(x,y))", "all x.((Spoke(x) & Made(x)) -> Clean(x))", "all x.(CleanSpills(x) -> Made(x))", "all x.((Spoil(x) & Made(x)) -> Cleans(x))", "all x.((Spoken(x) & Made(x)) -> Clean(x))"]}
{"id": "enwn_validation_250", "nl": "Amy made a spill and did not clean it.", "fol": "", "prediction": ["all x y.((Amy(x) & Spill(y)) -> (Made(x,y) & -Clean(x,y)))", "all x y.((Amy(x) & Spill(y)) -> (Made(x,y) & -Cleared(x,y)))", "all x y.((Amy(x) & Spill(y)) -> (Made(x,y) & -Cleans(x,y)))", "all x.((Amy(x) & Spill(x)) -> -Cleans(x))", "all x.((Amy(x) & Spill(x)) -> -Clean(x))", "all x y.((Amy(x) & Spill(y)) -> (Makes(x,y) & -Cleans(x,y)))", "all x.((Amy(x) & Spill(y)) -> (Made(x,y) & -Clean(x,y)))", "all x y.((Amy(x) & Spill(y)) -> (Made(x,y) & DidNotClean(x,y)))", "all x y.((Amy(x) & Spill(y)) -> (Made(x,y) & -Cleaned(x,y)))", "all x y.((Amy(x) & Spill(y)) -> (Made(x,y) & -Clean(x,y)))", "all x y z.((Amy(x) & Spill(y) & Spill(z)) -> (Made(x,y) & -Clean(x,z)))", "all x.((Amy(x) & Spill(y)) -> (Made(x,y) & -Cleans(x,y)))", "all x.((Amy(x) & Spill(x)) -> (Made(x,y) & -Clean(x,y)))", "all x.((Amy(x) & Spill(y)) -> (Made(x,y) & -Cleared(x,y)))", "all x y z.((Amy(x) & Spill(y) & Spill(z)) -> (Made(x,y) & -Cleans(x,z)))", "all x.((Amy(x) & Spill(x)) -> (Made(x,y) & -Cleans(x,y)))"]}
{"id": "enwn_validation_251", "nl": "Amy should have cleaned her spill.", "fol": "", "prediction": ["all x.((Amy(x) & Spill(y)) -> ShouldClean(x,y))", "all x y.((Amy(x) & Spill(y)) -> ShouldClean(x,y))", "all x.((Amy(x) & Spill(x)) -> ShouldClean(x,y))", "all x.((Amy(x) & Spill(y)) -> ShouldCleared(x,y))", "all x.((Amy(x) & Spill(y)) -> ShouldCleaned(x,y))", "all x.((Amy(x) & Spill(y)) -> ShouldCleaned(x,y))", "all x.((Amy(x) & Spill(y)) -> Cleans(x,y))", "all x.((Amy(x) & Spill(y)) -> ShouldHaveCleared(x,y))", "all x.((Amy(x) & Spill(y)) -> Clean(x,y))", "all x y.((Amy(x) & Spill(y)) -> ShouldCleaned(x,y))", "all x y.((Amy(x) & Spill(y)) -> ShouldCleared(x,y))", "all x.((Amy(x) & Spill(y)) -> Cleaned(x,y))", "all x.((Amy(x) & Spill(x)) -> Cleans(x,y))", "all x.((Amy(x) & Spill(x)) -> ShouldClean(x))", "all x.((Amy(x) & Spill(x)) -> ShouldCleared(x,y))", "all x.((Amy(x) & Spill(x)) -> ShouldCleaned(x,y))"]}
{"id": "enwn_validation_252", "nl": "Helping hurt animals is a good thing to do.", "fol": "", "prediction": ["all x.(HelpingIrresponsibleAnimals(x) -> GoodThingToDo(x))", "all x.(HelpsIrresponsibleAnimals(x) -> GoodThingToDo(x))", "all x.(HelpingIrregularAnimals(x) -> GoodThingToDo(x))", "all x.(HelpsIrregularAnimals(x) -> GoodThingToDo(x))", "all x.((HelpsIrregularAnimals(x) & GoodThingToDo(x)) -> HelpsIrregularAnimals(x))", "all x.((HelpingIrregularAnimals(x) & GoodThingToDo(x)) -> HelpsIrregularAnimals(x))", "all x.(HelpingIrresponsibleAnimals(x) -> GoodThing(x))", "all x.((HelpingIrresponsibleAnimals(x)) -> GoodThingToDo(x))", "all x.(HelpingIrresponsibleAnimals(x) -> GoodThingToDo(x))", "all x.(HoldsIrresponsibleAnimals(x) -> GoodThingToDo(x))", "all x.(HelpsIrresponsibleAnimals(x) -> GoodThingToDo(x))", "all x.((HelpingIrregularAnimals(x) & GoodThingToDo(x)) -> HelpingIrregularAnimals(x))", "all x.(HelpsIrresponsibleAnimals(x) -> GoodThing(x))", "all x.(HelpingHasAnimals(x) -> GoodThingToDo(x))", "all x.((HelpsIrregularAnimals(x) & GoodThingToDo(x)) -> IrregularAnimals(x))", "all x.((HelpsIrregularAnimals(x) & GoodThingToDo(x)) -> HelpsIllAnimals(x))"]}
{"id": "enwn_validation_253", "nl": "If you mend something, you are helping the thing that something belongs to.", "fol": "", "prediction": ["all x y.((Mends(x) & Thing(y)) -> Helps(x,y))", "all x y.((Mends(x) & Thing(y)) -> Helping(x,y))", "all x y.((Mends(x,y) & Thing(y)) -> Helps(x,y))", "all x y.((Mends(x) & Thing(y)) -> Helps(x,y))", "all x y.((Mend(x) & Thing(y)) -> Helping(x,y))", "all x y.((Mends(x,y) & Thing(y)) -> Helping(x,y))", "all x y.((Mends(x) & Thing(y) & BelongsTo(y,x)) -> Helps(x,y))", "all x y.((Mend(x) & Thing(y)) -> Helps(x,y))", "all x y.((Mends(x) & Thing(y)) -> HelpsBelongsTo(x,y))", "all x y z.((Mends(x) & Thing(y) & BelongsTo(z)) -> Helps(x,y,z))", "all x y.((Mends(x) & Thing(y) & BelongsTo(y,x)) -> Helping(x,y))", "all x y.((Mends(x) & Thing(y)) -> Helping(x,y))", "all x y.((Mend(x) & Thing(y)) -> Helping(x,y))", "all x y z.((Mend(x) & Thing(y) & BelongsTo(z)) -> Helps(x,y,z))", "all x y.((Mends(x,y) & Thing(y)) -> HelpsBelongsTo(x,y))", "all x y z.((Mends(x) & Thing(y) & BelongsTo(z)) -> Helps(x,y))"]}
{"id": "enwn_validation_254", "nl": "Setting a cast is a way to mend a wound.", "fol": "", "prediction": ["all x y.((SettingCast(x) & Wound(y)) -> Mends(x,y))", "all x y.((SetsCast(x) & Wound(y)) -> Mends(x,y))", "all x.(SetsCast(x) -> MendsWound(x))", "all x.(SettingCast(x) -> MendsWound(x))", "all x y.((SettingCast(x) & Wound(y)) -> Mend(x,y))", "all x y z.((SettingCast(x) & Wound(y) & Wound(z)) -> Mends(x,y,z))", "all x y.((Cast(x) & Wound(y)) -> Mends(x,y))", "all x y.((SettingCast(x) & Wund(y)) -> Mends(x,y))", "all x y z.((SettingCast(x) & Wound(y) & Wound(z)) -> Mend(x,y,z))", "all x y z.((SettingCast(x) & Wound(y) & Wund(z)) -> Mends(x,y,z))", "all x y.((SetCast(x) & Wound(y)) -> Mends(x,y))", "all x y z.((Cast(x) & Wound(y) & Wound(z)) -> Mends(x,y,z))", "all x.(SettingCast(x) -> MendWound(x))", "all x y.((SetsCast(x) & Wound(y)) -> Mend(x,y))", "all x y.((Setcast(x) & Wound(y)) -> Mends(x,y))", "all x y.((Cast(x) & Wound(y)) -> Mend(x,y))"]}
{"id": "enwn_validation_255", "nl": "Dan put a cast around the hurt dogs broken leg.", "fol": "", "prediction": ["all x y.((Dan(x) & Dog(y) & BrokenLeg(y)) -> PutsCastAround(x,y))", "all x y.((Dan(x) & Dog(y)) -> PutsCastAround(x,y))", "all x y z.((Dan(x) & Dog(y) & BrokenLeg(z)) -> PutsCastAround(x,y,z))", "all x y.((Dan(x) & Dog(y) & BrokenLeg(y)) -> PutCastAround(x,y))", "all x y.((Dan(x) & BrokenLeg(y)) -> PutsCastAround(x,y))", "all x y z.((Dan(x) & BrokenLeg(y) & Dog(z)) -> PutsCastAround(x,y,z))", "all x y z.((Dan(x) & Dog(y) & BrokenLeg(z)) -> PutCastAround(x,y,z))", "all x y.((Dan(x) & IrregularLeg(y)) -> PutsCastAround(x,y))", "all x y.((Dan(x) & Dog(y) & BrokenLeg(y,x)) -> PutsCastAround(x,y))", "all x y.((Dog(x) & BrokenLeg(y)) -> PutsCastAround(x,y))", "all x y.((Dan(x) & Dog(y)) -> PutCastAround(x,y))", "all x y.((Dan(x) & Dog(y) & BrokenLeg(y)) -> PutsCast(x,y))", "all x y.((Dan(x) & BrokenLeg(y)) -> PutCastAround(x,y))", "all x y.((Dan(x) & Irresponsible(y)) -> PutsCastAround(x,y))", "all x y.((Dan(x) & IrregularLeg(y)) -> PutCastAround(x,y))", "all x y z.((Dan(x) & Dog(y) & BrokenLeg(z)) -> PutsCast(x,y,z))"]}
{"id": "enwn_validation_256", "nl": "Dan mended the hurt dog's leg.", "fol": "", "prediction": ["all x y z.((Dog(x) & Leg(y) & Leg(z)) -> Mended(x,y,z))", "all x y.((Dog(x) & IrregularLeg(y)) -> Mended(x,y))", "all x y.((Dog(x) & IrresponsibleLeg(y)) -> Mended(x,y))", "all x y.((Dog(x) & Irresponsible(y)) -> MendedLeg(x,y))", "all x y z.((Dog(x) & Leg(y) & Leg(z) & Irregular(z)) -> Mended(x,y,z))", "all x y.((Dan(x) & HurtDog(y)) -> MendedLeg(x,y))", "all x y z.((Dog(x) & Leg(y) & Leg(z) & Irresponsible(x,y)) -> Mended(x,y,z))", "all x y z.((Dog(x) & Leg(y) & Leg(z) & Irresponsible(x,y)) -> Mended(x,z))", "all x y.((Dog(x) & Ill(y)) -> MendedLeg(x,y))", "all x y z.((Dog(x) & Leg(y) & Leg(z) & Irresponsible(x,y,z)) -> Mended(x,y,z))", "all x y.((Dog(x) & Dan(y)) -> MendedLeg(y,x))", "all x y.((Dog(x) & Dog(y)) -> MendedLeg(x,y))", "all x y.((Dan(x) & Dog(y)) -> MendedLeg(x,y))", "all x y.((Dog(x) & Leg(y)) -> Mended(x,y))", "all x y z.((Dog(x) & Leg(y) & Leg(z) & Irresponsible(z)) -> Mended(x,y,z))", "all x y.((Dog(x) & Leg(y)) -> Mended(x,y))"]}
{"id": "enwn_validation_257", "nl": "Dan helped the hurt dog.", "fol": "", "prediction": ["all x y.((Dog(x) & Dan(y)) -> Helped(y,x))", "all x y.((Dan(x) & Dog(y)) -> Helped(x,y))", "all x.((Dan(x) & HurtDog(x)) -> Helped(x,Dan))", "all x y z.((Dan(x) & Dog(y) & Dog(z)) -> Helped(x,y,z))", "all x.((Dan(x) & HurtDog(x)) -> Helped(x,y))", "all x y.((Dog(x) & Dan(y)) -> HelpedIrresponsible(y,x))", "all x y.((Dan(x) & HurtDog(y)) -> Helped(x,y))", "all x y z.((Dog(x) & Dan(y) & Dog(z)) -> Helped(y,z))", "all x y.((Dog(x) & Dan(y)) -> HelpedIrregular(y,x))", "all x.((Dan(x) & IrresponsibleDog(x)) -> Helped(x,y))", "all x y.((Dog(x) & Dan(y)) -> HelpedIll(y,x))", "all x.((Dan(x) & IrregularDog(x)) -> Helped(x,y))", "all x.((Dan(x) & IrresponsibleDog(x)) -> Helped(x,Dan))", "all x.((Dan(x) & IrregularDog(x)) -> Helped(x,Dan))", "all x.((Dog(x) & Dan(x)) -> Helped(x,y))", "all x y.((Dog(x) & Dog(y)) -> Helped(x,y))"]}
{"id": "enwn_validation_258", "nl": "Dan did a good thing.", "fol": "", "prediction": ["all x.((Dan(x) & GoodThing(x)) -> GoodThing(x))", "all x.((Dan(x) & GoodThing(x)) -> Did(x,Dan))", "all x.(Dan(x) -> GoodThing(x))", "all x y.((Dan(x) & GoodThing(y)) -> Did(x,y))", "all x.((Dan(x) & GoodThing(x)) -> Did(x))", "all x.((Dan(x) & GoodThing(x)) -> Did(x,y))", "all x.(Dan(x) -> DidGoodThing(x))", "all x.((Dan(x) & GoodThing(x)) -> Done(x))", "all x.((Dan(x) & GoodThing(x)) -> Did(x,Dan,x))", "all x.((Dan(x) & GoodThing(x)) -> GreatThing(x))", "all x.((Dan(x) & GoodThing(x)) -> Did(x,dan))", "all x y.((Dan(x) & GoodThing(y)) -> GoodThing(x,y))", "all x.((Dan(x) & GoodThing(x)) -> Does(x,Dan))", "all x.(DoesGoodThing(x) -> DanDoesGoodThing(x))", "All x.((Dan(x) & GoodThing(x)) -> GoodThing(x))", "all x.((Dan(x) & GoodThing(x)) -> Does(x,Dan))"]}
{"id": "enwn_validation_259", "nl": "You should not annoy other people.", "fol": "", "prediction": ["all x.((Person(x) & -Angry(x)) -> -Angry(x))", "all x.((Person(x) & -Anannoy(x)) -> -Anannoy(x))", "all x y.((Person(x) & Person(y)) -> -annoys(x,y))", "all x.((Person(x) & -annoys(x)) -> -annoys(x))", "all x.((Person(x) & -Anannoys(x)) -> -Anannoys(x))", "all x y.((Person(x) & Person(y)) -> -Angry(x,y))", "all x y.((Person(x) & Person(y)) -> -Anannoy(x,y))", "all x y.((Person(x) & Person(y)) -> -annoy(x,y))", "all x y.((Person(x) & Person(y)) -> -Anannoys(x,y))", "all x.((Person(x) & -annoys(x)) -> -Anannoys(x))", "all x y.((Person(x) & Person(y)) -> -Antannoy(x,y))", "all x.((Person(x) & -annoy(x)) -> -annoy(x))", "all x.((Person(x) & -Anannoys(x)) -> -Anannoys(x,y))", "all x.((Person(x) & -annoys(x,y)) -> -Anannoys(x,y))", "all x.((Person(x) & -Anannoy(x)) -> -Anannoys(x))", "all x.(Anannoy(x) -> -Anannoy(x))"]}
{"id": "enwn_validation_260", "nl": "Loud music will cause other people that are around to be annoyed.", "fol": "", "prediction": ["all x y.((LoudMusic(x) & Person(y)) -> CausesAngry(x,y))", "all x.((LoudMusic(x) & OtherPeopleAround(x)) -> Irritated(x))", "all x.((LoudMusic(x) & PeopleAround(x)) -> Irritated(x))", "all x y.((LoudMusic(x) & Person(y) & Around(x)) -> CausesAngry(x,y))", "all x y.((LoudMusic(x) & Person(y) & Around(x,y)) -> CausesAngry(x,y))", "all x.((LoudMusic(x) & OtherPeopleAround(x)) -> Agreed(x))", "all x y.((LoudMusic(x) & People(y)) -> CausesAngry(x,y))", "all x.((LoudMusic(x) & PeopleAround(x)) -> Agreed(x))", "all x.((LoudMusic(x) & OtherPeople(x)) -> Irritated(x))", "all x y.((LoudMusic(x) & Person(y) & Around(x,y)) -> Irritated(y))", "all x y z.((LoudMusic(x) & Person(y) & Person(z)) -> CausesAngry(x,y,z))", "all x y.((LoudMusic(x) & People(y) & Around(x)) -> CausesAngry(x,y))", "all x y.((LoudMusic(x) & Person(y) & Around(x)) -> Irritated(y))", "all x y.((LoudMusic(x) & Person(y)) -> Irritated(x,y))", "all x y.((LoudMusic(x) & Person(y)) -> Irritated(y))", "all x.(LoudMusic(x) -> CausesAngryPeople(x))"]}
{"id": "enwn_validation_261", "nl": "Ned is playing music loudly.", "fol": "", "prediction": ["all x.(Ned(x) -> PlayingMusicLoudly(x))", "Ned is playing music loudly.", "Ned PlaysMusicLoudly(Ned)", "all x.(Ned(x) -> PlaysMusicLoudly(x))", "NedPlaysMusicLoudly(Ned)", "(PlayingMusicLoudly(Ned) | PlayingMusicLoudly(Ned)))", "all x.(Ned(x) -> PlayingLoudMusic(x))", "Ned PlaysMusicLoudly(ned)", "(PlayingMusicLoudly(Ned) & Ned(Ned))", "(PlayingMusicLoudly(Ned) -> NedPlaysMusicLoudly(Ned))", "all x.(Ned(x) -> PlaysLoudMusic(x))", "(PlayingMusicLoudly(Ned) -> NedPlaysMusic(Ned))", "NedPlaysMusicLoudly(ned)", "Ned PlaysMusicLoudly(n)", "Ned plays music loudly.", "(PlayingMusicLoudly(Ned) -> NedPlaysMusicLoudly(Ned)))"]}
{"id": "enwn_validation_262", "nl": "Ned and Brad are around each other.", "fol": "", "prediction": ["all x y.((Ned(x) & Brad(y)) -> Around(x,y))", "all x.((Ned(x) & Brad(x)) -> Around(x))", "(Around(Ned,Brad) & Around(Brad,Ned))", "(Around(Ned,Brad) & Around(Ned,Brad))", "(Around(Ned) & Around(Brad))", "(Around(Ned) & Around(Brad(Ned))", "all x.((Ned(x) | Brad(x)) -> Around(x))", "(Around(Ned,Brad) & Around(Brad,Ned,Brad))", "all x.((Ned(x) & Brad(x)) -> Around(x,y))", "all x y.((Ned(x) & Brad(y)) -> (Around(x,y) & Around(x,y)))", "((Ned(Ned) & Brad(Brad)) -> Around(Ned,Brad))", "all x y.((Ned(x) & Brad(y)) -> (Around(x,y) & Around(y,x)))", "((Ned(Ned) & Brad(Brad)) -> Around(Ned,Brad)))", "All x.((Ned(x) & Brad(x)) -> Around(x))", "((Ned(Ned) & Brad(Brad)) -> Around(Ned) & Around(Brad)))", "all x y.((Ned(x) & Brad(y)) -> Alone(x,y))"]}
{"id": "enwn_validation_263", "nl": "You should not play loud music with other people around because it will annoy them.", "fol": "", "prediction": ["all x y.((Person(x) & LoudMusic(y)) -> -Play(x,y))", "all x y.((Person(x) & LoudMusic(y)) -> -PlayWith(x,y))", "all x y.((LoudMusic(x) & Person(y)) -> -PlayWith(x,y))", "all x y z.((LoudMusic(x) & Person(y) & Person(z)) -> -Play(x,y,z))", "all x y.((LoudMusic(x) & OtherPeople(y)) -> -Play(x,y))", "all x y.((Person(x) & LoudMusic(y)) -> -PlaysWith(x,y))", "all x y.((LoudMusic(x) & Person(y)) -> -Play(x,y))", "all x y.((PlayLoudMusic(x) & OtherPeople(y)) -> -Anannoys(x,y))", "all x y.((PlayLoudMusic(x) & Person(y)) -> -Anannoys(x,y))", "all x y z.((LoudMusic(x) & Person(y) & Person(z)) -> -PlayWith(x,y,z))", "all x y.((LoudMusic(x) & OtherPeople(y)) -> -Anannoys(x,y))", "all x y z.((LoudMusic(x) & Person(y) & Person(z)) -> -PlaysWith(x,y,z))", "all x y z.((Person(x) & LoudMusic(y) & Person(z)) -> -Play(x,y,z))", "all x y.((Person(x) & LoudMusic(y)) -> -Anannoys(x,y))", "all x y.((LoudMusic(x) & Person(y)) -> -PlaysWith(x,y))", "all x.((Person(x) & -PlayLoudMusic(x)) -> Annoys(x))"]}
{"id": "enwn_validation_264", "nl": "Ned is playing his music loud around Brad.", "fol": "", "prediction": ["all x y.((Ned(x) & Brad(y)) -> PlayingMusicLoudAround(x,y))", "all x y.((Ned(x) & Brad(y)) -> PlayingMusicLoud(x,y))", "all x y z.((Ned(x) & Music(y) & Brad(z)) -> PlayingLoudAround(x,y,z))", "all x y.((Ned(x) & Brad(y)) -> PlayingLoudMusic(x,y))", "all x y.((Ned(x) & Brad(y)) -> PlaysMusicLoudAround(x,y))", "all x y z.((Ned(x) & Music(y) & Brad(z)) -> PlaysLoudAround(x,y,z))", "all x y.((Ned(x) & Brad(y)) -> PlayingLoudMusicAround(x,y))", "all x y z.((Ned(x) & Music(y) & Brad(z)) -> PlayingLoud(x,y,z))", "all x y z.((Ned(x) & Brad(y) & Music(z)) -> PlayingLoudAround(x,z))", "all x y.((Ned(x) & Brad(y)) -> PlaysLoudMusicAround(x,y))", "all x y.((Ned(x) & Brad(y)) -> PlaysMusicLoud(x,y))", "all x y.((Ned(x) & Brad(y)) -> PlaysLoudMusic(x,y))", "all x y z.((Ned(x) & Brad(y) & Music(z)) -> PlaysLoudAround(x,z))", "all x y z.((Ned(x) & Brad(y) & Music(z)) -> PlayingLoudAround(x,y,z))", "all x y z.((Ned(x) & Brad(y) & Music(z)) -> PlayingLoud(x,z))", "all x.((Ned(x) & Brad(x)) -> PlayingMusicLoud(x))"]}
{"id": "enwn_validation_265", "nl": "Ned should not play his music because it will annoy Brad.", "fol": "", "prediction": ["all x y.((Ned(x) & Brad(y)) -> -PlaysMusic(x,y))", "all x y.((Ned(x) & Brad(y)) -> -PlayMusic(x,y))", "all x.((Ned(x) & -PlaysMusic(x)) -> AnnoysBrad(x))", "all x.((Ned(x) & -PlaysMusic(x) & AnnoysBrad(x)) -> -PlaysMusic(x))", "all x y.((Ned(x) & Brad(y) & -PlaysMusic(x,y)) -> Annoys(x,y))", "all x.((Ned(x) & Brad(x)) -> -PlaysMusic(x))", "all x.((Ned(x) & -PlayMusic(x)) -> AnnoysBrad(x))", "all x y.((Ned(x) & Brad(y)) -> -(PlaysMusic(x,y) & Annoys(x,y)))", "all x.((Ned(x) & -PlayMusic(x) & AnnoyBrad(x)) -> -PlayMusic(x))", "all x y z.((Ned(x) & Music(y) & Brad(z)) -> -Plays(x,y,z))", "all x.((Ned(x) & Brad(x)) -> -PlayMusic(x))", "all x y.((Ned(x) & Brad(y)) -> -Play(x,y))", "all x y z.((Ned(x) & Music(y) & Brad(z)) -> -Play(x,y,z))", "all x y z.((Ned(x) & Music(y) & Brad(z)) -> -(Plays(x,y) & Annoys(x,z)))", "all x y z.((Ned(x) & Music(y) & Brad(z) & -Plays(x,y)) -> Annoys(x,z))", "all x y z.((Ned(x) & Music(y) & Brad(z)) -> (-Plays(x,y) & Annoys(x,z)))"]}
{"id": "enwn_validation_266", "nl": "Forcing someone to give you something is wrong.", "fol": "", "prediction": ["all x y.((Forcing(x,y) & Person(y)) -> Wrong(x))", "all x y.((Forcing(x,y) & Person(y)) -> IsWrong(x))", "all x y.((Forcing(x) & Person(y) & Gives(x,y)) -> Wrong(x))", "all x y.((Forcing(x,y) & Person(y)) -> IsWrong(x,y))", "all x y.((Forcing(x) & Person(y) & Gives(y,x)) -> Wrong(x))", "all x y.((Forcing(x,y) & Person(y) & Gives(x,y)) -> Wrong(x))", "all x y.((Forcing(x) & Person(y) & Gives(x,y)) -> IsWrong(x))", "all x y.((Forcing(x) & Person(y)) -> IsWrong(x,y))", "all x.(Forcing(x) -> Wrong(x))", "all x y.((Forcing(x,y) & Person(y)) -> Wrong(x,y))", "all x.(ForcingPersonToGiveYouSomething(x) -> Wrong(x))", "all x.(ForcingSomeoneToGiveYouSomething(x) -> Wrong(x))", "all x y.((Forcing(x,y) & Person(y)) -> Worst(x))", "all x.(ForcingPersonToGiveSomething(x) -> Wrong(x))", "all x y.((Forcing(x) & Person(y) & Gives(y,x)) -> IsWrong(x))", "all x y.((Forcing(x) & Person(y) & Gives(x,y)) -> Worst(x))"]}
{"id": "enwn_validation_267", "nl": "You should not do wrong things.", "fol": "", "prediction": ["all x.((DoWrongThings(x) & -DoWrongThings(x)) -> -DoWrongThings(x))", "all x.((DoWrongThings(x) & -DoWrongThings(x)) -> -(DoWrongThings(x) & DoWrongThings(x)))", "all x.((DoWrongThing(x) & -DoWrongThings(x)) -> -DoWrongThings(x))", "all x.((DoWrongThings(x)) -> -DoWrongThings(x))", "all x.((DoWrongThings(x) & -DoWrongThings(x)) -> -(DoWrongThings(x) & DoWrongThings(x))))", "all x.((DoWrongThings(x)) -> -DoWrongThings(x))", "all x.((DoWrongThing(x) & -DoWrongThing(x)) -> -DoWrongThing(x))", "all x.((DoWrongThing(x) & -DoWrongThings(x)) -> -(DoWrongThings(x) & DoWrongThings(x)))", "all x.((DoWrongThings(x) & -DoWrongThings(x)) -> -DoWrongThings(x))", "all x.((DoWrongThing(x) & -DoWrongThings(x)) -> -(DoWrongThings(x) & DoWrongThings(x))))", "all x.((DoWrongThing(x) & -DoWrongThing(x)) -> -(DoWrongThing(x) & DoWrongThing(x)))", "all x.((DoWrongThings(x) & -DoWrongThings(x)) -> -(DoWrongThings(x) | DoWrongThings(x))))", "all x.((DoWrongThing(x) & -DoWrongThing(x)) -> -(DoWrongThing(x) & DoWrongThing(x))))", "all x.((DoWrongThings(x) & -DoWrongThings(x)) -> -(DoWrongThings(x) & -DoWrongThings(x)))", "all x.((DoWrong(x) & -DoWrong(x)) -> -DoWrong(x))", "all x.((DoWrongThings(x) & -DoWrongThings(x)) -> -(DoWrongThings(x) & DoWrongThings(x)))"]}
{"id": "enwn_validation_268", "nl": "Keith bullied Gunner until Gunner gave his lunch money to Keith.", "fol": "", "prediction": ["all x y.((Keith(x) & Gunner(y)) -> Bullied(x,y))", "all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> Bullied(x,y,z))", "all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> BulliedBy(x,y,z))", "all x y z.((Keith(x) & Gunner(y) & LunchMatter(z)) -> Bullied(x,y,z))", "all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> Bullied(x,y))", "all x y z.((Kitchen(x) & Gunner(y) & LunchMoney(z)) -> Bullied(x,y,z))", "all x y z.((Keith(x) & Gunner(y) & Lunch(z)) -> Bullied(x,y,z))", "all x y.((Child(x) & Gunner(y)) -> Bullied(x,y))", "all x y z.((Child(x) & Gunner(y) & LunchMoney(z)) -> Bullied(x,y,z))", "all x y.((Kitchen(x) & Gunner(y)) -> Bullied(x,y))", "all x y.((Keith(x) & Gunner(y)) -> BulliedUntilLunchMoney(x,y))", "all x y.((Keith(x) & Gunner(y) & LunchMoney(y)) -> Bullied(x,y))", "all x y z.((Keith(x) & Gunner(y) & LunchMatter(z)) -> BulliedBy(x,y,z))", "all x y z.((Keith(x) & Gunner(y) & Lunch(z)) -> Bullied(x,y))", "all x y z.((Child(x) & Gunner(y) & LunchMoney(z)) -> BulliedBy(x,y,z))", "all x y.((Keith(x) & Gunner(y)) -> BulliedUntilGunnerGaveLunchMoney(x,y))"]}
{"id": "enwn_validation_269", "nl": "Bullying is a form of harassment.", "fol": "", "prediction": ["all x.(Bullying(x) -> Harassment(x))", "all x y.((Bullying(x) & Harassment(y)) -> FormOf(x,y))", "all x.(Bullying(x) -> Harmful(x))", "all x.(Bullying(x) -> Harassment(x))", "all x.(Blooding(x) -> Harassment(x))", "all x.(Bullying(x) -> Harassment(x))", "all x.(Bullying(x) -> Harms(x))", "all x.(Bullying(x) -> FormOfHarassment(x))", "all x y.((Bullying(x) & Harassment(y)) -> Harassment(x,y))", "all x y.((Bullying(x) & Harassment(y)) -> Bullying(x))", "all x.(Boltying(x) -> Harassment(x))", "all x.(Bullying(x) -> Harshmanship(x))", "all x y.((Bullying(x) & Harassment(y)) -> Harassment(x))", "all x y.((Bullying(x) & Harshman(y)) -> FormOf(x,y))", "all x y.((Bullying(x) & Harassment(y)) -> Is(x,y))", "all x y.((Bullying(x) & Harassment(y)) -> Bullying(x,y))"]}
{"id": "enwn_validation_270", "nl": "If you continuously harass someone until they do something, you forced them to do that thing.", "fol": "", "prediction": ["all x y.((ContinuouslyHarsh(x) & Person(y) & DoSomething(y)) -> ForcedToDoThatThing(x,y))", "all x y.((ContinuouslyHarsh(x) & Person(y) & DoSomething(y)) -> ForcedToDoThatThing(x,y))", "all x y z.((PersistentHarassment(x) & Person(y) & Thing(z) & Do(y,z)) -> ForcedToDo(y,z))", "all x y z.((ContinuouslyHarsh(x) & Person(y) & Thing(z) & Do(y,z)) -> ForcedToDo(y,z))", "all x y.((PersistentHarassment(x) & Person(y) & DoSomething(y)) -> ForcedToDoThatThing(x,y))", "all x y z.((PersistentHarassment(x) & Person(y) & Thing(z) & Do(y,z)) -> ForcedToDo(x,y,z))", "all x y.((PersonalHarassment(x) & Person(y) & ContinuesUntilDoing(x,y)) -> ForcedToDo(x,y))", "all x y.((PersistentHarassment(x) & Person(y) & DoSomething(y)) -> ForcedToDoThatThing(x,y))", "all x y.((PersonalHarassment(x) & Person(y) & ContinuesUntilDoing(x,y)) -> ForcedToDoThing(x,y))", "all x y z.((PersistentHarassment(x) & Person(y) & Thing(z) & Do(y,z)) -> ForcingToDo(y,z))", "all x y z.((PersistentHarassment(x) & Person(y) & Thing(z) & Do(y,z)) -> ForcingToDo(x,y,z))", "all x y.((Harsh(x) & Person(y) & ContinuesUntilDoing(x,y)) -> ForcedToDoThing(x,y))", "all x y.((Harsh(x) & Person(y) & ContinuesUntilDoing(x,y)) -> ForcedToDo(x,y))", "all x y z.((ContinuouslyHarsh(x) & Person(y) & Thing(z) & Do(y,z)) -> ForcedToDo(x,y,z))", "all x y z.((PersistentHarassment(x) & Person(y) & Thing(z)) -> ForcingToDo(x,y,z))", "all x y z.((PersistentHarassment(x) & Person(y) & Thing(z) & Do(y,z)) -> ForcibleToDo(y,z))"]}
{"id": "enwn_validation_271", "nl": "You should not force someone to give you something.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y)) -> -ForcingToGive(x,y))", "all x y.((Person(x) & Person(y)) -> -ForceToGive(x,y))", "all x y.((Person(x) & Gives(x,y)) -> -Forcing(x,y))", "all x y.((Person(x) & Person(y)) -> -Forcing(x,y))", "all x.((Person(x) & -ForceToGive(x,y)) -> -ForceToGive(x,y))", "all x.((Person(x) & -ForceToGive(x)) -> -ForceToGive(x))", "all x y.((Force(x,y) & Person(y)) -> -Force(x,y))", "all x y.((Person(x) & Gives(x,y)) -> -ForcingToGive(x,y))", "all x.((Person(x) & -ForceToGive(x,y)) -> -ForcingToGive(x,y))", "all x y.((Force(x,y) & Person(y)) -> -Forcing(x,y))", "all x y.((Person(x) & Gives(x,y)) -> -ForceToGive(x,y))", "all x.((Person(x) & -ForceToGive(x)) -> -ForcingToGive(x))", "all x y.((Client(x) & Person(y)) -> -ForcingToGive(x,y))", "all x y.((Person(x) & Gives(x,y)) -> -Force(x,y))", "all x.((Forcing(x) & -Forcing(x)) -> Gives(x,y))", "all x.((Person(x) & -ForceToGive(x)) -> -ForceToGive(x,y))"]}
{"id": "enwn_validation_272", "nl": "Keith harassed Gunner until Gunner gave his lunch money to Keith.", "fol": "", "prediction": ["all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> Harasse(x,y,z))", "all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> Harrassed(x,y,z))", "all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> Harmful(x,y,z))", "all x y.((Keith(x) & Gunner(y)) -> Harrassed(x,y))", "all x y.((Keith(x) & Gunner(y)) -> Harasse(x,y))", "all x y z.((Keith(x) & Gunner(y) & LunchMatter(z)) -> Harasse(x,y,z))", "all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> Harasse(x,y))", "all x y.((Keith(x) & Gunner(y)) -> HarrassedUntilGunnerGaveLunchMoney(x,y))", "all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> Harms(x,y,z))", "all x y z.((Keith(x) & Gunner(y) & LunchMatter(z)) -> Harrassed(x,y,z))", "all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> Harassment(x,y,z))", "all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> Harrassed(x,y))", "all x y z.((Child(x) & Gunner(y) & LunchMoney(z)) -> Harasse(x,y,z))", "all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> Harassed(x,y,z))", "all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> Harshful(x,y,z))", "all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> Harassing(x,y,z))"]}
{"id": "enwn_validation_273", "nl": "Keith forced Gunner to give Keith his lunch money.", "fol": "", "prediction": ["all x y.((Gunner(x) & Keith(y)) -> ForcEDToGiveLunchMoney(x,y))", "all x y.((Keith(x) & Gunner(y)) -> ForcEDToGiveLunchMoney(y,x))", "all x y.((Gunner(x) & Keith(y)) -> ForcingToGiveLunchMoney(x,y))", "all x y.((King(x) & Gunner(y)) -> ForcEDToGiveLunchMoney(y,x))", "all x y.((Keith(x) & Gunner(y)) -> ForcingToGiveLunchMoney(y,x))", "all x y.((Gunner(x) & Keith(y)) -> ForcibleToGiveLunchMoney(x,y))", "all x y.((Keith(x) & Gunner(y)) -> ForcEDToGiveLunchMoney(x,y))", "all x y.((Kitchen(x) & Gunner(y)) -> ForcEDToGiveLunchMoney(y,x))", "Keith ForcingGunnerToGiveLunchMoney(Keith,Keith)", "all x y.((King(x) & Gunner(y)) -> ForcingToGiveLunchMoney(y,x))", "all x y.((Keith(x) & Gunner(y)) -> ForgedToGiveLunchMoney(y,x))", "all x y.((Gunner(x) & Keith(y)) -> ForcEDToGive(x,y))", "all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> ForcEDBy(x,y,z))", "all x y z.((Keith(x) & Gunner(y) & LunchMoney(z)) -> ForcibleToGive(x,y,z))", "all x y.((King(x) & Gunner(y)) -> ForcEDToGiveLunchMoney(x,y))", "all x y.((Keith(x) & Gunner(y)) -> ForcEDToGiveKeith(y,x))"]}
{"id": "enwn_validation_274", "nl": "Keith should not have forced Gunner to give Keith his lunch money.", "fol": "", "prediction": ["all x.((Keith(x) & Gunner(x)) -> -ForciblyGivenLunchMoney(x,Keith))", "all x.((Keith(x) & Gunner(x)) -> -ForcingToGiveLunchMoney(x,Keith))", "all x y.((Keith(x) & Gunner(y)) -> -ForciblyGivenLunchMoney(x,y))", "all x.((Keith(x) & Gunner(x)) -> -ForcedToGiveLunchMoney(x,Keith))", "all x.((Keith(x) & Gunner(x)) -> -ForcibleToGiveLunchMoney(x,Keith))", "all x.((Keith(x) & Gunner(x)) -> -ForcedToGiveLunchMoney(x,Keith))", "all x.((Keith(x) & Gunner(x)) -> -ForcingToGiveKeithLunchMoney(x,Keith))", "all x.((Keith(x) & Gunner(x)) -> -ForcibleGivingLunchMoney(x,Keith))", "all x y.((Keith(x) & Gunner(y)) -> -ForcEDToGiveLunchMoney(x,y))", "all x y.((Keith(x) & Gunner(y)) -> -ForcibleToGiveLunchMoney(x,y))", "all x.((Keith(x) & Gunner(x)) -> -ForcingGunnerToGiveKeithLunchMoney(x))", "all x.((Keith(x) & Gunner(x)) -> -ForciblyGivenLunchMoney(x,Keith,Keith))", "all x.((Keith(x) & Gunner(x)) -> -ForcingGunnerToGiveKeithLunchMoney(x,Keith))", "all x y.((Keith(x) & Gunner(y)) -> -ForciblyGivenLunchMoney(x,y))", "-ForcingGunnerToGiveLunchMoney(Keith,Keith)", "all x.((Keith(x) & Gunner(x)) -> -ForcingToGiveLunchMoney(x,Keith,Keith))"]}
{"id": "enwn_validation_275", "nl": "If you agree to do something, you should do it.", "fol": "", "prediction": ["all x.(AgreesToDo(x) -> ShouldDo(x))", "all x.((AgreesToDo(x) & Dose(x)) -> ShouldDo(x))", "all x.(AgreeToDo(x) -> ShouldDo(x))", "all x.((AgreeToDo(x) & Do(x)) -> ShouldDo(x))", "all x.((AgreesToDo(x) & Do(x)) -> ShouldDo(x))", "all x.((AgreesToDo(x) & Does(x)) -> ShouldDo(x))", "all x.((AgreesToDo(x) & Dose(x)) -> Dose(x))", "all x.((Agree(x) & Do(x)) -> ShouldDo(x))", "all x.((Agrees(x) & Dose(x)) -> ShouldDo(x))", "all x.((AgreesToDo(x) & Dose(x)) -> ShouldDo(x))", "all x.(AgreesToDo(x,y) -> ShouldDo(x,y))", "all x.((AgreeToDo(x) & Do(x)) -> Do(x))", "all x.((AgreesToDo(x) & Does(x,y)) -> ShouldDo(x,y))", "all x.((AgreesToDo(x) & ShouldDo(x)) -> ShouldDo(x))", "all x.((AgreesToDo(x) & Dose(x)) -> ShouldDo(x))", "all x.((Agrees(x) & Dose(x)) -> Dose(x))"]}
{"id": "enwn_validation_276", "nl": "Chad agreed to work but is playing instead.", "fol": "", "prediction": ["(all x.(Chad(x) -> Work(x)) & Playing(x))", "all x.(Chad(x) -> (AgreedToWork(x) & Playing(x)))", "all x.(Chad(x) -> (AgreedToWork(x) & Plays(x)))", "all x.(Chad(x) -> (AgreesToWork(x) & Plays(x)))", "all x y.((Chad(x) & Work(y)) -> (AgreedToWork(x,y) & Playing(x,y)))", "all x y.((Chad(x) & Work(y)) -> (AgreedToWork(x,y) & Plays(x,y)))", "(all x.(Chad(x) -> Work(x)) & Plays(x))", "all x y.((Chad(x) & Work(y)) -> (AgreesToWork(x,y) & Plays(x,y)))", "(AgreedToWork(Chad) & Playing(Chad))", "(All x.(Chad(x) -> Work(x)) & Playing(x))", "all x.((Chad(x) & Worked(x)) -> Playing(x))", "all x.((Chad(x) & Work(x)) -> Playing(x))", "(all x.(Chad(x) -> Works(x)) & Plays(x))", "(all x.(Chad(x) -> Work(x)) & Playing(x)))", "all x y.((Chad(x) & Work(y)) -> (AgreedToWork(x,y) & Playing(x)))", "all x y.((Chad(x) & Work(y)) -> (AgreedToWork(x,y) & Play(x,y)))"]}
{"id": "enwn_validation_277", "nl": "If you agree to do something but are doing something else, you are not doing what you agreed to do.", "fol": "", "prediction": ["all x.((AgreesToDo(x) & DoingOther(x)) -> -AgreesToDo(x))", "all x.((AgreeToDo(x) & DoingOther(x)) -> -DoingWhatAgreedToDo(x))", "all x.((AgreesToDo(x) & DoingOther(x)) -> -DoingWhatAgreedToDo(x))", "all x.((AgreeToDo(x) & DoingOther(x)) -> -AgreeToDo(x))", "all x.((AgreesToDo(x) & Doing(x) & -AgreesToDo(x)) -> -AgreesToDo(x))", "all x y.((AgreesToDo(x,y) & Doing(x,y)) -> -AgreesToDo(x,y))", "all x.((AgreesToDo(x) & Doing(x)) -> -AgreesToDo(x))", "all x.((AgreesToDo(x) & -AgreesToDo(x)) -> -AgreesToDo(x))", "all x.((AgreesToDo(x) & Doing(x) & -AgreesToDo(x)) -> -DoingWhatAgreedToDo(x))", "all x.((AgreesToDo(x) & Doing(x) & Doing(x)) -> -DoingWhatAgreedToDo(x))", "all x.((AgreesToDo(x) & Doing(x) & Doing(x)) -> -AgreesToDo(x))", "all x.((AgreesToDo(x) & Doing(x)) -> -DoingWhatAgreedToDo(x))", "all x.((AgreesToDo(x) & DoesOther(x)) -> -AgreesToDo(x))", "all x.((AgreeToDo(x) & Doing(x) & -AgreeToDo(x)) -> -AgreeToDo(x))", "all x.((AgreeToDo(x) & Doing(x)) -> -AgreeToDo(x))", "all x.((AgreesToDo(x) & Does(x,y)) -> -AgreesToDo(x,y))"]}
{"id": "enwn_validation_278", "nl": "Chad agreed to work but is not working.", "fol": "", "prediction": ["(all x.(Chad(x) -> Work(x)) & -Working(x))", "all x.(Chad(x) -> (AgreedToWork(x) & -Working(x)))", "all x.(Chad(x) -> (AgreesToWork(x) & -Working(x)))", "all x.((Chad(x) & Work(x)) -> (AgreedToWork(x) & -Working(x)))", "(all x.(Chad(x) -> Worked(x)) & -Working(x))", "(AgreedToWork(Chad) & -Working(Chad))", "(all x.(Chad(x) -> Works(x)) & -Working(x))", "(all x.(Chad(x) -> Work(x)) & -Working(x)))", "(all x.(Chad(x) -> Work(x)))", "(All x.(Chad(x) -> Work(x)) & -Working(x))", "(AgreedToWork(chad) & -Working(chad))", "all x.((Chad(x) & Work(x)) -> (AgreesToWork(x) & -Working(x)))", "all x.(Chad(x) -> (Works(x) & -Working(x)))", "all x.(Chad(x) -> (AgreesToWork(x) & -Works(x)))", "all x.((Chad(x) & Worked(x)) -> -Working(x))", "all x.(Chad(x) -> (Works(x) & -Works(x)))"]}
{"id": "enwn_validation_279", "nl": "Chad should be working.", "fol": "", "prediction": ["all x.(Chad(x) -> ShouldWork(x))", "all x.((Chad(x) & Working(x)) -> ShouldWork(x))", "all x.(Tchad(x) -> ShouldWork(x))", "all x.(Chad(x) -> Working(x))", "all x.((Chad(x) & Working(x)) -> ShouldBeWorking(x))", "all x.((Chad(x) & ShouldWork(x)) -> ShouldWork(x))", "all x.(Chad(x) -> ShouldBeWorking(x))", "all x.(Chad(x) -> ShouldWork(x))", "all x y.((Chad(x) & Chad(y)) -> ShouldWork(x,y))", "all x.((Tchad(x) & Working(x)) -> ShouldWork(x))", "all x.(Tahd(x) -> ShouldWork(x))", "all x.((Tchad(x) & Working(x)) -> ShouldBeWorking(x))", "all x.(Chad(x) -> Working(x))", "all x.(Tchad(x) -> Working(x))", "all x.(Tahs(x) -> ShouldWork(x))", "all x.(Tahsan(x) -> ShouldWork(x))"]}
{"id": "enwn_validation_280", "nl": "Lewis earned wages over the year.", "fol": "", "prediction": ["all x y.((Lewis(x) & Year(y)) -> EarnedWages(x,y))", "all x.(Lewis(x) -> EarnedWagesOverYear(x))", "all x.(Lewis(x) -> EarnedWages(x))", "all x.(Lewis(x) -> EarnedWages(x,y))", "all x.((Lewis(x) & Year(y)) -> EarnedWages(x,y))", "all x y z.((Lewis(x) & Year(y) & Wage(z)) -> Earned(x,y,z))", "all x.((Lewis(x) & EarnedWages(x)) -> Year(x))", "all x y.((Little(x) & Year(y)) -> EarnedWages(x,y))", "all x y z.((Lewis(x) & Year(y) & Wage(z)) -> EarnedOver(x,y,z))", "all x.((Lewis(x) & Year(x)) -> EarnedWages(x))", "all x.((Lewis(x) & EarnedWages(x,y)) -> Year(y))", "all x.((Lewis(x) & EarnedWages(x)) -> YearOverYear(x))", "all x.((Lewis(x) & EarnedWages(x)) -> OverYear(x))", "all x y z.((Lewis(x) & Year(y) & Wage(z)) -> Earned(x,y))", "all x y.((Lewis(x) & Year(y)) -> EarnedWage(x,y))", "all x y z.((Lewis(x) & Year(y) & Wage(z)) -> Earned(x,z))"]}
{"id": "enwn_validation_281", "nl": "If you earn wages over the year, you have taxes on those wages.", "fol": "", "prediction": ["all x.((EarnsWages(x) & OverYear(x)) -> HasTaxes(x))", "all x.((EarnsWages(x) & OverYear(x)) -> HasTaxesOnWages(x))", "all x.((EarnsWages(x) & Year(x)) -> HasTaxes(x))", "all x.((EarnsWages(x) & Year(x)) -> HasTaxesOnWages(x))", "all x y.((EarnsWages(x) & Year(y)) -> HasTaxes(x,y))", "all x.(EarnsWagesOverYear(x) -> HasTaxesOnWages(x))", "all x.((EarnsWages(x) & OverYear(x)) -> HasTaxesOn(x,y))", "all x y.((EarnsWages(x,y) & Year(y)) -> HasTaxes(x,y))", "all x y.((EarnsWages(x) & Year(y) & EarnsWages(x,y)) -> HasTaxes(x,y))", "all x.((EarnsWages(x) & OverYear(x)) -> TaxesOnWages(x))", "all x y.((EarnsWages(x) & Year(y)) -> HasTaxesOn(x,y))", "all x.(EarnsWages(x) -> HasTaxesOnWages(x))", "all x.((EarnsWages(x) & Year(x)) -> TaxesOnWages(x))", "all x.(EarnsWages(x) -> HasTaxes(x))", "all x y.((EarnsWages(x,y) & Year(y)) -> HasTaxesOn(x,y))", "all x y.((EarnsWages(x) & Year(y) & EarnsWages(x,y)) -> HasTaxesOn(x,y))"]}
{"id": "enwn_validation_282", "nl": "Paying taxes is a law.", "fol": "", "prediction": ["all x.(PayingTaxes(x) -> Law(x))", "all x.(PaysTaxes(x) -> Law(x))", "all x.(PayingTax(x) -> Law(x))", "all x.(TaxPayment(x) -> Law(x))", "all x y.((Tax(x) & Law(y)) -> Pays(x,y))", "all x.(PaysTax(x) -> Law(x))", "all x.(TaxePayment(x) -> Law(x))", "all x.((PaysTaxes(x) & Law(x)) -> PaysTaxes(x))", "all x.(PayingTaxes(x) -> Law(x))", "all x.((PayingTaxes(x) & Law(x)) -> PaysTaxes(x))", "all x.(PaintingTaxes(x) -> Law(x))", "all x.(PaidTaxes(x) -> Law(x))", "all x.(PayingTaxes(x) -> Law(x))", "all x.(Taxpaying(x) -> Law(x))", "all x.((PaysTaxes(x) & Law(x)) -> Law(x))", "all x.((PaysTaxes(x) & Law(x)) -> Legal(x))"]}
{"id": "enwn_validation_283", "nl": "You should obey the law.", "fol": "", "prediction": ["all x.(ObeyLaw(x) -> ShouldObeyLaw(x))", "all x.(ObeyLaw(x) -> ObeyLaw(x))", "all x.(ObeysLaw(x) -> ShouldObey(x))", "all x.(ObeysLaw(x) -> ObeysLaw(x))", "all x.(ObeysLaw(x) -> ShouldObeyLaw(x))", "all x.(ObeyTheLaw(x) -> ShouldObeyLaw(x))", "all x.(ObeyLaw(x) -> ShouldObeyLaw(x))", "all x.(ObeyLaw(x) -> ShouldObeyLaw(x))", "all x.(ObeyLaw(x) -> ShouldBeObedient(x))", "all x.(ObeyLaw(x) -> ShouldObey(x))", "all x.(ObeyLegal(x) -> ShouldObeyLegal(x))", "all x.(ObeysLaw(x) -> ShouldOccupy(x))", "all x.(ObeyLaw(x) -> Occurs(x))", "all x.(ObeyLaw(x) -> ShouldOccupy(x))", "all x.(ObeyTheLaw(x) -> ShouldObey(x))", "all x.(ObeysLaw(x) -> ShouldOcceed(x))"]}
{"id": "enwn_validation_284", "nl": "Breaking the law is a crime.", "fol": "", "prediction": ["all x.(BreakingLaw(x) -> Crime(x))", "all x.((BreakingLaw(x) & Crime(x)) -> BreaksLaw(x))", "all x.((BreakingLaw(x) & Crime(x)) -> BreakingLaw(x))", "all x.((BreaksLaw(x) & Crime(x)) -> BreaksLaw(x))", "all x.(BreakingTheLaw(x) -> Crime(x))", "all x.((BreakingLaw(x) & Crime(x)) -> Criminal(x))", "all x.((BreaksLaw(x) & Crime(x)) -> Crime(x))", "all x.((BreaksLaw(x) & Crime(x)) -> Criminal(x))", "all x.((BreakingLaw(x) & Crime(x)) -> Crime(x))", "all x.((BreachingLaw(x) & Crime(x)) -> BreaksLaw(x))", "all x.((BreachTheLaw(x) & Crime(x)) -> BreaksLaw(x))", "all x.((BreachLaw(x) & Crime(x)) -> BreaksLaw(x))", "all x.((BreachingLaw(x) & Crime(x)) -> BreakingLaw(x))", "all x.((BreakingLaw(x) & Criminal(x)) -> BreaksLaw(x))", "all x.((BreakingTheLaw(x) & Crime(x)) -> BreaksLaw(x))", "all x.(BreaksLaw(x) -> Crime(x))"]}
{"id": "enwn_validation_285", "nl": "Lewis has taxes on wages he earned over the year.", "fol": "", "prediction": ["all x.((Lewis(x) & EarnedWages(x)) -> HasTaxes(x))", "all x.((Lewis(x) & EarnedOverYear(x)) -> HasTaxes(x))", "all x.((Lewis(x) & EarnedWages(x)) -> TaxesOn(x,y))", "all x y.((Lewis(x) & EarnedWages(y)) -> HasTaxes(x,y))", "all x.((Lewis(x) & EarnedWages(x)) -> Taxes(x))", "all x.((Lewis(x) & EarnedWages(x,y)) -> HasTaxes(x,y))", "all x.((Lewis(x) & EarnedOverYear(x)) -> TaxesOn(x,y))", "all x y.((Lewis(x) & EarnedOverYear(x,y)) -> HasTaxes(x,y))", "all x.((Lewis(x) & EarnedWages(x)) -> HasTaxes(x))", "all x y.((Lewis(x) & EarnedOverYear(y)) -> HasTaxes(x,y))", "all x.((Lewis(x) & EarnedWages(x)) -> HasTaxesOn(x,y))", "all x.((Lewis(x) & EarnedOverYear(x)) -> HasTaxes(x,y))", "all x.((Lewis(x) & EarnedOverYear(x)) -> Taxes(x))", "all x.((Lewis(x) & EarnedOverYear(x)) -> HasTaxesOn(x,y))", "all x.((Lewis(x) & EarnedOverYear(x)) -> HasTaxes(x))", "all x.((Lewis(x) & EarnedWages(x)) -> HasTaxes(x,y))"]}
{"id": "enwn_validation_286", "nl": "Paying taxes is a law that you should obey.", "fol": "", "prediction": ["all x.(PayingTaxes(x) -> Law(x))", "all x.(PaysTaxes(x) -> Law(x))", "all x.(PayingTaxes(x) -> LawToObey(x))", "all x y.((PaysTaxes(x) & Law(y)) -> ShouldObey(x,y))", "all x.(PayingTaxes(x) -> ShouldObey(x))", "all x.(PaysTaxes(x) -> LawToObey(x))", "all x.(PaysTaxes(x) -> ShouldObey(x))", "all x y.((PaysTaxes(x) & Law(y)) -> Obey(x,y))", "all x y.((PaysTaxes(x) & Law(y)) -> ShouldObey(y,x))", "all x.(PayTaxes(x) -> Law(x))", "all x.(PayingTaxes(x) -> LawOfObedience(x))", "all x.(PaysTax(x) -> Law(x))", "all x.(PayingTaxes(x) -> LawYouBoy(x))", "all x.(PaysTaxes(x) -> LawOfObedience(x))", "all x y.((PaysTaxes(x) & Law(y)) -> ShouldObey(y))", "all x y.((PaysTaxes(x) & Law(y)) -> ShouldBeObedient(x,y))"]}
{"id": "enwn_validation_287", "nl": "It is a crime to not pay your taxes.", "fol": "", "prediction": ["all x.((Crime(x) & -PayTaxes(x)) -> Criminal(x))", "all x.((Crime(x) & -PayTaxes(x)) -> -PayTaxes(x))", "all x.((Crime(x) & -PaysTaxes(x)) -> Criminal(x))", "all x.((Crime(x) & -PaysTaxes(x)) -> -PaysTaxes(x))", "all x.((Crime(x) & -PayTaxes(x)) -> Crime(x))", "all x.((Crime(x) & -PaysTaxes(x)) -> Crime(x))", "all x.((Crime(x) & -PaysTax(x)) -> -PaysTax(x))", "all x.((Crime(x) & -PayTax(x)) -> -PayTax(x))", "all x.((Crime(x) & -PaysTax(x)) -> -PaysTaxes(x))", "all x.((PayTaxes(x) & -PayTaxes(x)) -> Crime(x))", "all x.((Crime(x) & -PaysTaxes(x)) -> -Crime(x))", "all x.((Crime(x) & -PayTaxes(x)) -> NotPayTaxes(x))", "all x.((Crime(x) & -PaysTax(x)) -> Criminal(x))", "all x.((PayTaxes(x) & -PayTaxes(x)) -> Criminal(x))", "all x.((Crime(x) & -PayTaxes(x)) -> -Crime(x))", "all x.((Crime(x) & -PayTaxes(x)) -> -PayTaxes(x))"]}
{"id": "enwn_validation_288", "nl": "Lewis will commit a crime if he does not pay his taxes.", "fol": "", "prediction": ["all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Little(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Little(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -PayTaxes(x)) -> CommitsCrime(x))", "all x.((Lion(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lee Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x y.((Lewis(x) & TaxPayment(y)) -> CommitsCrime(x,y))", "all x.((Lion(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x y.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x,y))", "all x y.((Lewis(x) & TaxPay(y)) -> CommitsCrime(x,y))", "all x.(((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -paysTaxes(x)) -> CommitsCrime(x))", "all x.((Lewis(x) & -Paytaxes(x)) -> CommitsCrime(x))", "all x y.((Lewis(x) & Taxpayer(y)) -> CommitsCrime(x,y))", "all x.((Lewis(x) & -PaysTaxes(x)) -> CommitCrime(x))"]}
{"id": "enwn_validation_289", "nl": "You should fulfill your promises.", "fol": "", "prediction": ["all x y.((Promise(x) & Promise(y)) -> Fulfills(x,y))", "all x y.((Promise(x) & Promise(y)) -> Fulfill(x,y))", "all x.(Promise(x) -> Fulfills(x))", "all x.((Person(x) & Promise(x)) -> Fulfills(x,y))", "all x.((Person(x) & Promise(x)) -> Fulfill(x))", "all x y.((Person(x) & Promise(y)) -> Fulfills(x,y))", "all x.((Person(x) & Promise(x)) -> Fulfill(x,y))", "all x y.((Person(x) & Promise(y)) -> Fulfill(x,y))", "all x.((Person(x) & Promise(y)) -> Fulfill(x,y))", "all x.((Promise(x) & Fulfill(x)) -> Fulfill(x))", "all x.((Promise(x) & Fulfill(x)) -> ShouldFull(x))", "all x.((Promise(x) & Fulfill(x)) -> Requires(x))", "all x.((Promise(x) & Fulfills(x)) -> Requires(x))", "all x.((Person(x) & Promise(x)) -> Fulfills(x))", "all x.(Promise(x) -> Fulfill(x))", "all x.((Promise(x) & Fulfills(x)) -> -Fulls(x))"]}
{"id": "enwn_validation_290", "nl": "Evan said he would help Rose.", "fol": "", "prediction": ["Evan said he would help Rose.", "all x y.((Evan(x) & Rose(y)) -> Helps(x,y))", "all x y.((Evan(x) & Rose(y)) -> WouldHelp(x,y))", "all x.((Evan(x) & Rose(y)) -> Helps(x,y))", "all x y.((Evan(x) & Rose(y)) -> WillHelp(x,y))", "all x.((Evan(x) & Rose(y)) -> WouldHelp(x,y))", "All x y.((Evan(x) & Rose(y)) -> Helps(x,y))", "all x y.((Evan(x) & Rose(y)) -> WouldAid(x,y))", "All x.((Evan(x) & Rose(y)) -> Helps(x,y))", "(all x.(Evan(x) -> HelpsRose(x)))", "All x y.((Evan(x) & Rose(y)) -> WouldHelp(x,y))", "all x y.((Evan(x) & Rose(y)) -> Helped(x,y))", "all x.((Evan(x) & Rose(y)) -> WillHelp(x,y))", "all x.((Evan(x) & Rose(x)) -> Helps(x,y))", "all x.((Evan(x) & Rose(x)) -> Helps(x,Evan))", "all x.((Evan(x) & Rose(x)) -> Helps(x))"]}
{"id": "enwn_validation_291", "nl": "If you say you will do something, you promise to do that thing.", "fol": "", "prediction": ["all x.((Sells(x) & WillDo(x)) -> PromisesToDo(x))", "all x.((Sell(x) & WillDo(x)) -> PromisesToDo(x))", "all x.((Sell(x) & WillDo(x)) -> PromiseToDo(x))", "all x.((Sells(x,y) & WillDo(x,y)) -> PromisesToDo(x,y))", "all x y.((Sells(x,y) & Thing(y)) -> PromisesToDo(x,y))", "all x.((Sells(x) & WillDo(x)) -> PromisesDoing(x))", "all x.((Sells(x) & WillDo(x)) -> PromiseToDo(x))", "all x.((Sells(x) & WillDoThing(x)) -> PromisesToDoThing(x))", "all x.((Sells(x) & WillDo(x)) -> PromisesToDo(x))", "all x.((Sells(x) & WillDo(x)) -> PromisesToDo(x))", "all x.((Sells(x) & WillDo(x)) -> PromisesToDo(x))", "all x.((Says(x) & WillDo(x)) -> PromisesToDo(x))", "all x.((Sell(x) & WillDo(x)) -> PromisesDoing(x))", "all x y.((Sell(x,y) & Thing(y)) -> PromisesToDo(x,y))", "all x y.((Sells(x,y) & Thing(y)) -> PromisesDoing(x,y))", "all x.((Sell(x) & WillDo(x)) -> Promise(x))"]}
{"id": "enwn_validation_292", "nl": "Evan promised to help Rose.", "fol": "", "prediction": ["Evan promised to help Rose.", "all x y.((Evan(x) & Rose(y)) -> PromisedToHelp(x,y))", "all x.((Evan(x) & Rose(y)) -> PromisedToHelp(x,y))", "all x y.((Evan(x) & Rose(y)) -> PromisedToHelp(x,y))", "all x y z.((Evan(x) & Rose(y) & Evan(z)) -> PromisedToHelp(x,y,z))", "all x y z.((Evan(x) & Rose(y) & Rose(z)) -> PromisedToHelp(x,y,z))", "all x.((Evan(x) & Rose(y)) -> PromisedToHelp(x,y))", "all x y z.((Evan(x) & Rose(y) & Evan(z)) -> PromisedToHelp(x,y,z))", "all x y z.((Evan(x) & Rose(y) & Rose(z)) -> PromisedToHelp(x,y,z))", "all x y.((Evan(x) & Rose(y)) -> PromisesToHelp(x,y))", "all x y z.((Evan(x) & Rose(y) & PromisedToHelp(x,y)) -> PromisedToHelp(x,z))", "all x.((Evan(x) & Rose(x)) -> PromisedToHelp(x,y))", "all x y z.((Evan(x) & Rose(y) & Promise(z)) -> Helps(x,y,z))", "all x y.((Evan(x) & Rose(y)) -> PromisesToHelp(x,y))", "all x y z.((Evan(x) & Rose(y) & PromisedToHelp(x,y)) -> PromisedToHelp(x,y))", "all x y z.((Evan(x) & Rose(y) & Evan(z)) -> PromisesToHelp(x,y,z))"]}
{"id": "enwn_validation_293", "nl": "Evan should help Rose.", "fol": "", "prediction": ["all x.((Evan(x) & Rose(y)) -> ShouldHelp(x,y))", "all x y.((Evan(x) & Rose(y)) -> ShouldHelp(x,y))", "all x.(Evan(x) -> ShouldHelpRose(x))", "All x.((Evan(x) & Rose(y)) -> ShouldHelp(x,y))", "all x.((Evan(x) & Rose(x)) -> ShouldHelp(x,y))", "all x.((Evan(x) & Rose(x)) -> ShouldHelp(x,Evan))", "All x.(Evan(x) -> ShouldHelpRose(x))", "All x y.((Evan(x) & Rose(y)) -> ShouldHelp(x,y))", "all x.((Evan(x) & Rose(x)) -> ShouldHelp(x))", "all x.((Evan(x) & Rose(y)) -> Helps(x,y))", "all x.((Evan(x) & Rose(x)) -> ShouldHelp(x,Rose))", "all x y z.((Evan(x) & Rose(y) & Rose(z)) -> ShouldHelp(x,y,z))", "all x y.((Evan(x) & Rose(y)) -> Helps(x,y))", "all x.((Evan(x) & Rose(r)) -> ShouldHelp(x,r))", "all x.(Evan(x) -> HelpsRose(x))", "(All x.(Evan(x) -> ShouldHelpRose(x)))"]}
{"id": "enwn_validation_294", "nl": "Erin argued for her answer after it was proven wrong.", "fol": "", "prediction": ["Erin argued for her answer after it was proven wrong.", "all x y.((Erin(x) & Answer(y) & ProvenWrong(y)) -> ArguatedFor(x,y))", "all x y.((Erin(x) & Answer(y) & ProvenWrong(x,y)) -> ArguatedFor(x,y))", "all x y.((Erin(x) & Answer(y) & ProvenWrong(y)) -> ArguedFor(x,y))", "all x y.((Erin(x) & Answer(y) & ProvenWrong(x,y)) -> ArguedFor(x,y))", "all x y.((Erin(x) & Answer(y) & ProvenWrong(y)) -> ArgumentatedFor(x,y))", "all x y.((Erin(x) & Answer(y) & ProvenWrong(y)) -> ArgumentedFor(x,y))", "all x.((Erin(x) & AnswerProvenWrong(x)) -> ArguatedFor(x,y))", "Erin argued for answer after it was proven wrong.", "all x y.((Erin(x) & Answer(y) & ProvenWrong(x,y)) -> ArgumentsFor(x,y))", "all x y.((Erin(x) & Answer(y) & ProvenWrong(x,y)) -> ArgumentatedFor(x,y))", "all x y.((Erin(x) & Answer(y) & ProvenWrong(x,y)) -> ArgumentedFor(x,y))", "all x y.((Erin(x) & Answer(y) & ProvenWrong(y)) -> ArgumentsFor(x,y))", "all x y.((Erin(x) & Answer(y)) -> ArguatedFor(x,y))", "all x.((Erin(x) & AnswerProvenWrong(x)) -> ArgumentsFor(x,y))", "all x.((Erin(x) & AnswerProvenWrong(x)) -> ArguedFor(x,y))"]}
{"id": "enwn_validation_295", "nl": "If you argue when you are wrong, you do not accept that you are wrong.", "fol": "", "prediction": ["all x.((Argument(x) & Wrong(x)) -> -AcceptsWrong(x))", "all x.(Argument(x) -> -AcceptsWrong(x))", "all x.(ArgumentWhenWrong(x) -> -AcceptsWrong(x))", "all x.((Argument(x) & Wrong(x)) -> -AcceptWrong(x))", "all x.(Argument(x) -> -AcceptWrong(x))", "all x.(ArgumentWrong(x) -> -AcceptWrong(x))", "all x.((Argument(x) & Wrong(x)) -> -Accept(x,Wrong(x))", "all x.((Argument(x) & IsWrong(x)) -> -AcceptsIsWrong(x))", "all x.(ArgumentWhenWrong(x) -> -AcceptWrong(x))", "all x.(ArgumentWrong(x) -> -AcceptsWrong(x))", "all x y.((Argument(x) & Wrong(x)) -> -AcceptsWrong(y))", "all x.((Argument(x) & Wrong(x)) -> -AcknowledgesWrong(x))", "all x.((Argument(x) & IsWrong(x)) -> -Accept(x,IsWrong(x))", "all x y.((Argument(x) & Wrong(x)) -> -AcceptWrong(y))", "all x.(Argument(x) -> -AcknowledgesWrong(x))", "all x.((Argument(x) & Wrong(x)) -> -Accept(x,wrong))"]}
{"id": "enwn_validation_296", "nl": "If you can't accept that you are wrong, you lack humility.", "fol": "", "prediction": ["all x.((CannotAccept(x) & IsWrong(x)) -> LacksHumor(x))", "all x.((Can'tAccept(x) & IsWrong(x)) -> LacksHumor(x))", "all x.((CannotAccept(x) & Wrong(x)) -> LacksHumor(x))", "all x.((CannotAccept(x) & IsWrong(x)) -> LacksHumbleness(x))", "all x.((CannotAccept(x) & Worst(x)) -> LacksHumor(x))", "all x.((CannotAccept(x) & Irresponsible(x)) -> LacksHumor(x))", "all x.((Can'tAccept(x) & Wrong(x)) -> LacksHumor(x))", "all x.((CannotAcceptIsWrong(x)) -> LacksHumor(x))", "all x.((Can'tAcceptIsWrong(x)) -> LacksHumor(x))", "all x.((CannotAccept(x) & IsWrong(x)) -> LacksHumidity(x))", "all x.((CannotAcceptWrong(x) & LackHumor(x)) -> LackHumor(x))", "all x.((Can'tAccept(x) & IsWrong(x)) -> LacksHumbleness(x))", "all x.((CannotAcceptIsWrong(x)) -> LackHumor(x))", "all x.((CannotAcceptIsWrong(x) & LackHumor(x)) -> LackHumor(x))", "all x.((CannotAcceptWrong(x)) -> LacksHumor(x))", "all x.((CannotAccept(x) & Wrong(x)) -> LacksHumbleness(x))"]}
{"id": "enwn_validation_297", "nl": "You should have humility.", "fol": "", "prediction": ["all x.(HasHumor(x) -> Humility(x))", "all x.(HasHumor(x) -> HasHumor(x))", "all x.(Humor(x) -> Humility(x))", "all x.(HasHumor(x) -> HasHasHumor(x))", "all x.(HasHumor(x) -> RequiresHumor(x))", "all x.(Humor(x) -> HasHasHumor(x))", "all x.(HasHabitat(x) -> Humility(x))", "all x.(Humor(x) -> HasHumor(x))", "all x.(HasHumanity(x) -> HasHumor(x))", "all x.(Humor(x) -> Have(x,y))", "all x.(HasHumor(x) -> Humility(x))", "all x.(Humor(x) -> ShouldHave(x))", "all x.(HasHumor(x) -> HasHasHahumility(x))", "all x.(HasHumor(x) -> HasHumor(x))", "all x.(HasHumidity(x) -> HasHumor(x))", "all x.(HasHumor(x) -> HasHazard(x))"]}
{"id": "enwn_validation_298", "nl": "Erin did not accept that she was wrong.", "fol": "", "prediction": ["Erin did not accept that she was wrong.", "all x.(Erin(x) -> -AcceptsWrong(x))", "all x.(Erin(x) -> -Wrong(x))", "all x.(Erin(x) -> -IsWrong(x))", "all x.(Erin(x) -> -AcknowledgesWrong(x))", "all x.(Erin(x) -> -AcceptsIsWrong(x))", "Erin -IsWrong(Erin))", "all x.(Erin(x) -> -AcknowledgesIsWrong(x))", "Erin n'accepted that she was wrong.", "all x.(Erin(x) -> -AcquiredWrong(x))", "Erin -AcquiredWrong(Erin))", "all x.(Erin(x) -> -AcceptedWrong(x))", "Erin didn't accept that she was wrong.", "all x.(Erin(x) -> -AcceptsIrresponsible(x))", "Erin -AcceptsWrong(Erin))", "all x.(Erin(x) -> -Impossible(x))"]}
{"id": "enwn_validation_299", "nl": "Erin lacks humility.", "fol": "", "prediction": ["Erin lacksHumor.", "all x.(Erin(x) -> LacksHumor(x))", "All x.(Erin(x) -> LacksHumor(x))", "exists x.(Erin(x) & LacksHumor(x))", "all x.(Erin(x) -> LacksHumbleness(x))", "all x.(Erin(x) -> -HasHumor(x))", "All x.(Erin(x) -> LacksHumbleness(x))", "all x.(Erin(x) -> LacksHumidity(x))", "all x.(Erin(x) -> LacksHumanity(x))", "(LacksHumor(Erin))", "All x.(Erin(x) -> -HasHumor(x))", "exists x.(Erin(x) & LacksHumbleness(x))", "Erin lacksHumor.", "exists x.(Erin(x) & -HasHumor(x))", "all x.(Erin(x) -> -HasHumbleness(x))", "All x.(Erin(x) -> LacksHumidity(x))"]}
{"id": "enwn_validation_300", "nl": "Erin should have humility.", "fol": "", "prediction": ["all x.(Erin(x) -> Humility(x))", "all x.((Erin(x) & Humility(x)) -> ShouldHave(x))", "all x.(Erin(x) -> ShouldHaveHumor(x))", "all x.((Erin(x) & Humility(x)) -> ShouldHave(x,y))", "all x y.((Erin(x) & Humility(y)) -> ShouldHave(x,y))", "All x.(Erin(x) -> Humility(x))", "all x.((Erin(x) & Humility(x)) -> MustHave(x))", "all x.((Erin(x) & Humility(x)) -> Has(x,y))", "all x.((Erin(x) & Humility(x)) -> ShouldHave(x,Erin))", "all x.((Erin(x) & Humility(x)) -> Humility(x))", "all x.((Erin(x) & Humility(x)) -> ShouldBe(x))", "all x.((Erin(x) & Humility(x)) -> ShouldHave(x,x))", "all x.(Erin(x) -> ShouldHaveHumbleness(x))", "all x y.((Erin(x) & Humility(y)) -> MustHave(x,y))", "all x.(Erin(x) -> MustHaveHumor(x))", "all x.((Erin(x) & Humility(x)) -> ShouldHave(x,erin))"]}
{"id": "enwn_validation_301", "nl": "You should not intentionally mislead people.", "fol": "", "prediction": ["all x.((Person(x) & -IntentionallyMisleads(x)) -> -IntentionallyMisleads(x))", "all x.((Person(x) & -IntentionallyMislead(x)) -> -IntentionallyMislead(x))", "all x.((IntentionallyMisleadsPeople(x)) -> -(IntentionallyMisleadsPeople(x) | IntentionallyMisleadsPeople(x))))", "all x.((Person(x) & -IntentionallyMisleads(x)) -> -(IntentionallyMisleads(x) | IntentionallyMisleads(x))))", "all x.((IntentionallyMisleadsPeople(x)) -> -(IntentionallyMisleadsPeople(x) & -IntentionallyMisleadsPeople(x)))", "all x.((IntentionallyMisleadPeople(x)) -> -(IntentionallyMisleadsPeople(x) | IntentionallyMisleadsPeople(x))))", "all x.((Person(x) & -IntentionallyMisleads(x)) -> -Misleads(x))", "all x.((People(x) & -IntentionallyMislead(x)) -> -IntentionallyMislead(x))", "all x.((People(x) & -IntentionallyMisleads(x)) -> -IntentionallyMisleads(x))", "all x.((Person(x) & -IntentionallyMislead(x)) -> -IntentionallyMisleads(x))", "all x.((IntentionallyMisleadPeople(x)) -> -(IntentionallyMisleadPeople(x) | IntentionallyMisleadPeople(x))))", "all x.((IntentionallyMisleadsPeople(x)) -> -(IntentionallyMisleadsPeople(x) | IntentionallyMisleadsPeople(x)))", "all x.((You(x) & -IntentionallyMisleadPeople(x)) -> -IntentionallyMisleadsPeople(x))", "all x.((Person(x) & -IntentionallyMislead(x)) -> -(IntentionallyMislead(x) | IntentionallyMislead(x))))", "all x.((IntentionallyMisleadsPeople(x)) -> -IntentionallyMisleadsPeople(x))", "all x.(MisleadsPeople(x) -> -Intentionally(x))"]}
{"id": "enwn_validation_302", "nl": "You knowingly told John incorrect information.", "fol": "", "prediction": ["all x y.((You(x) & John(y)) -> UnknowinglySaidIncorrectInformation(x,y))", "All x y.((You(x) & John(y)) -> UnknowinglySaidIncorrectInformation(x,y))", "All x y.((You(x) & John(y)) -> IncorrectInformation(x,y))", "all x y.((You(x) & John(y)) -> IncorrectInformation(x,y))", "All x y.((You(x) & John(y)) -> UnknowinglyToldIncorrectInformation(x,y))", "All x.((YouSaidIncorrectInformation(x) & John(x)) -> UnknowinglySaidIncorrectInformation(x))", "all x.((YouSaidIncorrectInformation(x) & John(x)) -> UnknowinglySaidIncorrectInformation(x))", "All x.((YouToldJohn(x) & IncorrectInformation(x)) -> UnknowinglySaid(x,John))", "All x.((YouToldJohnIncorrectInformation(x)) -> UnknowinglySaid(x,John))", "All x.((YouToldJohn(x) & IncorrectInformation(x)) -> UnknowinglyToldJohn(x))", "all x.((YouToldJohnIncorrectInformation(x)) -> UnknowinglySaid(x,John))", "All x.((John(x) & IncorrectInformation(x)) -> UnknowinglySaid(x,John))", "All x y.((You(x) & John(y)) -> IncorrectInformation(y,x))", "all x y.((You(x) & John(y)) -> IncorrectInformation(y,x))", "All x.((YouToldJohnIncorrectInformation(x)) -> Unknowingly(x))", "All x y.((You(x) & John(y)) -> IncorrectInformation(y))"]}
{"id": "enwn_validation_303", "nl": "If you do something that you know is incorrect, you did that on purpose.", "fol": "", "prediction": ["all x.((Do(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x.((Does(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x.((DoesIncorrect(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x.((DoesIncorrect(x) & Knows(x)) -> DidOnPurpose(x))", "all x.((Doing(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x.((Do(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x.((Doing(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x.(((Do(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x.((DoingIncorrect(x) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x.((DoesIncorrect(x) & KnowsIsIncorrect(x)) -> DidOnPurpose(x))", "all x.((Do(x) & Incorrect(x)) -> DidOnPurpose(x))", "all x.((Does(x,incorrect) & Knows(x,incorrect)) -> DidOnPurpose(x))", "all x y.((Does(x,y) & KnowsIncorrect(x)) -> DidOnPurpose(x))", "all x.((Does(x,y) & KnowsIncorrect(y)) -> DidOnPurpose(x))", "all x y.((Does(x,y) & KnowsIncorrect(y)) -> DidOnPurpose(x))", "all x.((Does(x,y) & KnowsIncorrect(y)) -> DidOnPurpose(x,y))"]}
{"id": "enwn_validation_304", "nl": "Telling someone incorrect information is misleading them.", "fol": "", "prediction": ["all x.((TellsIncorrectInformation(x) & Person(x)) -> Misleading(x))", "all x y.((IncorrectInformation(x) & Person(y)) -> Misleading(x,y))", "all x y.((TellsIncorrectInformation(x) & Person(y)) -> Misleading(x,y))", "all x y.((IncorrectInformation(x) & Person(y)) -> IrresponsibleInformation(x,y))", "all x y.((TellsIncorrectInformation(x,y) & Person(y)) -> Misleading(x,y))", "all x.(IncorrectInformation(x) -> Misleading(x))", "all x.((TellsIncorrectInformation(x) & Person(x)) -> IrresponsibleInformation(x))", "all x y.((IncorrectInformation(x) & Person(y)) -> Misleading(y))", "all x y.((TellsIncorrectInformation(x) & Person(y)) -> IrresponsibleInformation(x,y))", "all x.((TellsIncorrectInformation(x) & Person(y)) -> Misleading(x,y))", "all x.((TellsIncorrectInformation(x) & TellsIncorrectInformation(x)) -> Misleading(x))", "all x y.((IncorrectInformation(x) & Person(y)) -> Misleading(y,x))", "all x y.((TellsIncorrectInformation(x) & Person(y)) -> Misleading(y))", "all x.(TellsIncorrectInformation(x) -> Misleading(x))", "all x y.((IncorrectInformation(x) & Person(y)) -> Mitigating(x,y))", "all x y.((Person(x) & IncorrectInformation(y)) -> Misleading(x,y))"]}
{"id": "enwn_validation_305", "nl": "If you do something on purpose, you did that thing intentionally.", "fol": "", "prediction": ["all x.((DoesOnPurpose(x) & Intentionally(x)) -> DidIntentionally(x))", "all x.((DoesOnPurpose(x) & DidIntentionally(x)) -> DidIntentionally(x))", "all x.((DoesOnPurpose(x) & Intentionally(x)) -> DidThingIntentionally(x))", "all x.((Does(x) & OnPurpose(x)) -> DidIntentionally(x))", "all x.((DoesOnPurpose(x) & DidIntentionally(x)) -> DoesOnPurpose(x))", "all x.((DoesOnPurpose(x) & Intentionally(x)) -> DidItIntentionally(x))", "all x.((DoesOnPurpose(x) & Intentionally(x)) -> DidThing(x))", "all x.((DoesOnPurpose(x) & DidIntentionally(x)) -> DoseOnPurpose(x))", "all x.((Doing(x) & OnPurpose(x)) -> DidIntentionally(x))", "all x.((DoesOnPurpose(x) & DidIntentionally(x)) -> Dose(x))", "all x.((DoesOnPurpose(x) & Intentionally(x)) -> DoesIntentionally(x))", "all x.((DoesOnPurpose(x) & DidIntentionally(x)) -> DidIntentionally(x))", "all x.(DoesOnPurpose(x) -> DidIntentionally(x))", "all x.((DoesOnPurpose(x) & Intentionally(x)) -> DoedIntentionally(x))", "all x.((DoesOnPurpose(x) & DidIntentionally(x)) -> DoesIntentionally(x))", "all x.((DoesOnPurpose(x) & DidIntentionally(x)) -> Intentional(x))"]}
{"id": "enwn_validation_306", "nl": "You told John incorrect information on purpose.", "fol": "", "prediction": ["all x y z.((John(x) & Information(y) & Purpose(z)) -> Incorrect(x,y,z))", "All x.((John(x) & IncorrectInformation(x)) -> Tells(x,John))", "All x.((John(x) & IncorrectInformation(x)) -> Tells(x,y))", "all x.((John(x) & IncorrectInformation(x)) -> Tells(x,John))", "all x y z.((John(x) & Information(y) & Purpose(z)) -> TellsIncorrect(x,y,z))", "all x.((YouToldJohn(x) & IncorrectInformationOnPurpose(x)) -> TellsJohn(x))", "all x.((John(x) & IncorrectInformation(x)) -> Tells(x,y))", "all x.((YouToldJohn(x) & IncorrectInformation(x)) -> TellsJohn(x))", "all x y.((John(x) & IncorrectInformation(y)) -> Tells(x,y))", "all x y z.((John(x) & Information(y) & Purpose(z)) -> Incorrect(x,y))", "All x.((John(x) & IncorrectInformationOnPurpose(x)) -> Tells(x,John))", "All x.((YouToldJohn(x) & IncorrectInformation(x)) -> TellsJohn(x))", "all x y z.((John(x) & Information(y) & Purpose(z)) -> TelledIncorrect(x,y,z))", "all x y z.((John(x) & Information(y) & Purpose(z)) -> IncorrectInformation(x,y,z))", "All x y.((John(x) & IncorrectInformation(y)) -> Tells(x,y))", "all x.((YouToldJohn(x) & IncorrectInformation(x)) -> IncorrectInformation(x))"]}
{"id": "enwn_validation_307", "nl": "You misled John on purpose.", "fol": "", "prediction": ["All x.((John(x) & MisledOnPurpose(x)) -> MisledOnPurpose(x))", "all x.((John(x) & MisledOnPurpose(x)) -> MisledOnPurpose(x))", "all x y.((John(x) & Purpose(y)) -> Misled(x,y))", "All x.((John(x) & Misled(x)) -> MisledOnPurpose(x))", "All x y.((John(x) & Purpose(y)) -> Misled(x,y))", "all x.((John(x) & Misled(x)) -> MisledOnPurpose(x))", "All x.((John(x) & Misled(x)) -> Misled(x))", "all x.((John(x) & Misled(x)) -> Misled(x))", "all x.((John(x) & MisledOnPurpose(x)) -> Misled(x))", "All x.((John(x) & MisledOnPurpose(x)) -> Misled(x))", "all x.((John(x) & Misled(x,Purpose)) -> Misled(x,Purpose))", "all x y.((John(x) & Purpose(y)) -> MisledOn(x,y))", "All x y.((John(x) & Purpose(y)) -> MisledOn(x,y))", "All x.((John(x) & MisledOnPurpose(x)) -> MisledOnPurpose(x,John))", "(MisledJohn(John) & Purpose(John))", "all x.((John(x) & MisledOnPurpose(x)) -> MisledOnPurpose(x,John))"]}
{"id": "enwn_validation_308", "nl": "You intentionally misled John.", "fol": "", "prediction": ["all x.((John(x) & IntentionallyMisled(x)) -> Misled(x))", "All x.((John(x) & IntentionallyMisled(x)) -> Misled(x))", "all x.(IntentionallyMisledJohn(x) -> MisledJohn(x))", "all x.((John(x) & IntentionallyMisled(x,John)) -> Misled(x,John))", "All x.((John(x) & IntentionallyMisled(x,John)) -> Misled(x,John))", "all x y.((IntentionallyMisledJohn(x) & John(y)) -> Misled(x,y))", "all x y.((YouIntentionallyMisledJohn(x) & John(y)) -> Misled(x,y))", "all x.((YouIntentionallyMisledJohn(x)) -> MisledJohn(x))", "all x y.((John(x) & IntentionallyMisled(x,y)) -> Misled(x,y))", "All x.(IntentionallyMisledJohn(x) -> MisledJohn(x))", "all x.((John(x) & IntentionallyMisled(x)) -> Misled(x,John))", "All x.((John(x) & IntentionallyMisled(x)) -> Misled(x,John))", "all x.((John(x) & IntentionallyMisled(x,y)) -> Misled(x,y))", "All x.((YouIntentionallyMisledJohn(x)) -> MisledJohn(x))", "all x y.((John(x) & IntentionallyMisled(x,y)) -> Misled(y,x))", "all x.((John(x) & IntentionallyMisled(x)) -> Misled(x,y))"]}
{"id": "enwn_validation_309", "nl": "You should not have misled John intentionally.", "fol": "", "prediction": ["all x.((John(x) & MisledIntentionally(x)) -> -MisledIntentionally(x))", "all x.((John(x) & -IntentionallyMisled(x)) -> -IntentionallyMisled(x))", "all x.((John(x) & -MisledIntentionally(x)) -> -MisledIntentionally(x))", "all x.((John(x) & MisledIntentionally(x)) -> -(MisledIntentionally(x) & MisledIntentionally(x)))", "all x.((John(x) & -IntentionallyMisled(x,John)) -> -IntentionallyMisled(x,John))", "all x.((MisledJohn(x) & -Intentionally(x)) -> -MisledJohn(x))", "All x.((John(x) & MisledIntentionally(x)) -> -MisledIntentionally(x))", "all x.((John(x) & -IntentionallyMisled(x)) -> -IntentionallyMisled(x,John))", "all x.((MisledJohn(x) & -Intentionally(x)) -> -(MisledJohn(x) & Intentionally(x)))", "all x.((John(x) & MisledIntentionally(x)) -> -(Intentionally(x) -> MisledIntentionally(x)))", "all x.((John(x) & -IntentionallyMisled(x)) -> -Misled(x,John))", "all x.((John(x) & MisledIntentionally(x)) -> -(MisledIntentionally(x) | MisledIntentionally(x))))", "all x.((John(x) & -IntentionallyMisled(x)) -> -Misled(x))", "all x.((John(x) & -IntentionallyMisled(x)) -> -MisledIntentionally(x))", "all x.((John(x) & MisledIntentionally(x)) -> -(MisledIntentionally(x) & -MisledIntentionally(x)))", "all x.((John(x) & MisledIntentionally(x)) -> -(MisledIntentionally(x) & MisledIntentionally(x))))"]}
{"id": "enwn_validation_310", "nl": "You should only fire someone if you have a good reason.", "fol": "", "prediction": ["all x.((Person(x) & GoodRight(x)) -> Fire(x))", "all x y.((Person(x) & Reason(y) & Good(y)) -> Fire(x,y))", "all x y.((Fire(x) & Person(y) & GoodRight(y)) -> Fire(x,y))", "all x.((Person(x) & GoodRight(x)) -> Fires(x))", "all x y.((Person(x) & Reason(y)) -> Fire(x,y))", "all x.((Person(x) & GoodMeaning(x)) -> Fire(x))", "all x y.((Person(x) & Reason(y) & Good(x,y)) -> Fire(x,y))", "all x.((Person(x) & GoodRun(x)) -> Fire(x))", "all x y.((Function(x) & Person(y) & GoodRight(y)) -> Fire(x,y))", "all x.((Person(x) & GoodMoment(x)) -> Fire(x))", "all x.((Fire(x) & GoodRight(x)) -> Fire(x))", "all x y.((Fire(x) & Person(y) & GoodRight(x)) -> Fire(x,y))", "all x y.((Fire(x) & Person(y) & GoodRight(x,y)) -> Fire(x,y))", "all x y.((Person(x) & Reason(y) & Good(y)) -> Fires(x,y))", "all x y.((Person(x) & GoodRight(y)) -> Fire(x,y))", "all x y.((Function(x) & Person(y) & GoodRight(x,y)) -> Fire(x,y))"]}
{"id": "enwn_validation_311", "nl": "Bob fired Peter because Peter had different ideas than Bob.", "fol": "", "prediction": ["all x y.((Bob(x) & Peter(y) & DifferentIdeas(y,x)) -> Fired(x,y))", "all x y.((Bob(x) & Peter(y)) -> Fired(x,y))", "all x y.((Bob(x) & Peter(y) & DifferentIdeas(y)) -> Fired(x,y))", "all x y z.((Bob(x) & Peter(y) & Bob(z) & DifferentIdeas(y,z)) -> Fired(x,y,z))", "all x y z.((Bob(x) & Peter(y) & Bob(z)) -> Fired(x,y,z))", "all x y z.((Bob(x) & Peter(y) & Bob(z) & DifferentIdeas(y,z)) -> Fired(x,y))", "all x y z.((Bob(x) & Peter(y) & Bob(z)) -> (Fired(x,y) & DifferentIdeas(y,z)))", "all x y z.((Bob(x) & Peter(y) & Bob(z)) -> (Fired(x,y) & DifferentIdeas(y,z)))", "all x y z.((Bob(x) & Peter(y) & Bob(z) & DifferentIdeas(y,z)) -> FiredBy(x,y,z))", "all x y z.((Bob(x) & Peter(y) & Bob(z)) -> (Fired(x,y,z) & DifferentIdeas(y,z)))", "all x y z.((Bob(x) & Peter(y) & Bob(z) & DifferentIdeas(y)) -> Fired(x,y,z))", "all x y z.((Bob(x) & Peter(y) & Bob(z)) -> FiredBy(x,y,z))", "all x y z.((Bob(x) & Peter(y) & Bob(z)) -> Fired(x,y))", "all x y z.((Bob(x) & Peter(y) & Bob(z)) -> (Fires(x,y) & DifferentIdeas(y,z)))", "all x y.((Bob(x) & Peter(y) & DifferentIdeas(y,x)) -> FiredBy(x,y))", "all x y z.((Bob(x) & Peter(y) & Bob(z)) -> (Fires(x,y,z) & DifferentIdeas(y,z)))"]}
{"id": "enwn_validation_312", "nl": "If two people have different ideas, they do not agree with each other.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y) & DifferentIdeas(x,y)) -> -Agree(x,y))", "all x y.((Person(x) & Person(y) & HasDifferentIdeas(x,y)) -> -Agree(x,y))", "all x.((Person(x) & DifferentIdeas(x)) -> -Agree(x))", "all x y.((Person(x) & Person(y) & HasDifferentIdeas(x,y)) -> -Agrees(x,y))", "all x.((Person(x) & HasDifferentIdeas(x)) -> -Agree(x))", "all x y.((Person(x) & Person(y) & DifferentIdeas(x,y)) -> -Agrees(x,y))", "all x.(DifferentIdeas(x) -> -Agree(x))", "all x y.((Person(x) & Person(y) & HasDifferentIdeas(x,y)) -> -AgreesWith(x,y))", "all x.((Person(x) & HasDifferentIdeas(x)) -> -Agrees(x))", "all x y.((Person(x) & Person(y) & DifferentIdeas(x,y)) -> -AgreesWith(x,y))", "all x y.((Person(x) & Person(y) & DifferentIdeas(x)) -> -Agree(x,y))", "all x.((People(x) & DifferentIdeas(x)) -> -Agree(x))", "all x.((Person(x) & DifferentIdeas(x)) -> -Agrees(x))", "all x y.((Person(x) & Person(y) & HasDifferentIdeas(x,y)) -> -Agree(x))", "all x y.((Person(x) & Person(y) & DistinctIdeas(x,y)) -> -Agree(x,y))", "all x y.((Person(x) & Person(y) & HasDifferentIdeas(x,y)) -> -AgreeWith(x,y))"]}
{"id": "enwn_validation_313", "nl": "Not agreeing with someone is not a good reason to fire them.", "fol": "", "prediction": ["all x y.((AgreesWith(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "all x.((AgreesWith(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "all x y.((Agrees(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "all x y.((Agree(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "all x.((UnagreesWith(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "all x y.((Agree(x,y) & Person(y) & -Agree(x,y)) -> -GoodRightToFire(x,y))", "all x.((AgreesWith(x) & -GoodRightToFire(x)) -> -GoodRightToFire(x))", "all x.((NotAgreeingWith(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "all x.((UnderstandingWith(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "all x.((NotAgreesWith(x,y) & Person(y)) -> -GoodRightToFire(x,y))", "all x y.((Person(x) & -AgreesWith(x,y)) -> -GoodRightToFire(x,y))", "all x.((Agrees(x) & -Fires(x)) -> -GoodRightToFire(x))", "all x y.((AgreesWith(x,y) & Person(y)) -> -GoodRightToFire(x))", "all x.((Understanding(x) & Person(x)) -> -GoodRightToFire(x))", "all x y.((Person(x) & -AgreesWith(x,y)) -> -GoodRightToFire(x))", "all x.((NotAgreeing(x) & Person(x)) -> -GoodRightToFire(x))"]}
{"id": "enwn_validation_314", "nl": "Bob fired Peter because they do not agree.", "fol": "", "prediction": ["all x y.((Bob(x) & Peter(y) & -Agree(y,x)) -> Fired(x,y))", "all x y.((Bob(x) & Peter(y)) -> Fired(x,y))", "all x y.((Bob(x) & Peter(y) & -Agree(y)) -> Fired(x,y))", "all x y.((Bob(x) & Peter(y) & -Agree(x,y)) -> Fired(x,y))", "all x y z.((Bob(x) & Peter(y) & Bob(z) & -Agree(y,z)) -> Fired(x,y,z))", "all x y z.((Bob(x) & Peter(y) & Bob(z) & -Agree(y,z)) -> Fired(x,y))", "all x y z.((Bob(x) & Peter(y) & Bob(z)) -> Fired(x,y,z))", "all x y.((Bob(x) & Peter(y)) -> FiredBy(x,y))", "all x y z.((Bob(x) & Peter(y) & Bob(z) & -Agree(z)) -> Fired(x,y,z))", "all x y z.((Bob(x) & Peter(y) & Bob(z) & -Agree(y)) -> Fired(x,y,z))", "all x y z.((Bob(x) & Peter(y) & Bob(z) & -Agree(y,z)) -> FiredBy(x,y,z))", "all x y.((Bob(x) & Peter(y) & -Agree(y,x)) -> FiredBy(x,y))", "all x y.(((Bob(x) & Peter(y)) -> Fired(x,y))", "all x y z.((Bob(x) & Peter(y) & Bob(z)) -> FiredBy(x,y,z))", "all x y.((Bob(x) & Peter(y) & -Acquire(y,x)) -> Fired(x,y))", "all x y z.((Bob(x) & Peter(y) & Bob(z) & -Agree(x,y,z)) -> Fired(x,y,z))"]}
{"id": "enwn_validation_315", "nl": "Bob fired Peter without a good reason.", "fol": "", "prediction": ["all x y.((Bob(x) & Peter(y)) -> FiredWithoutGoodRight(x,y))", "all x y.((Bob(x) & Peter(y)) -> FiredWithoutGoodRun(x,y))", "all x y.((Bob(x) & Peter(y)) -> Fired(x,y))", "all x y z.((Bob(x) & Peter(y) & Reason(z)) -> Fired(x,y,z))", "all x y z.((Bob(x) & Peter(y) & Reason(z)) -> FiredWithout(x,y,z))", "all x y.((Bob(x) & Peter(y) & -GoodRight(y)) -> Fired(x,y))", "all x y.((Bob(x) & Peter(y)) -> FiredWithoutGoodRaison(x,y))", "all x y.((Bob(x) & Peter(y) & -GoodRun(y)) -> Fired(x,y))", "all x y.((Bob(x) & Peter(y)) -> FiredWithoutGoodRite(x,y))", "all x.((Bob(x) & Peter(y)) -> FiredWithoutGoodRight(x,y))", "all x y.((Bob(x) & Peter(y) & -GoodRun(x,y)) -> Fired(x,y))", "all x y z.((Bob(x) & Peter(y) & Reason(z)) -> FiredWithoutGood(x,y,z))", "all x y.((Bob(x) & Peter(y) & -GoodRun(x)) -> Fired(x,y))", "all x y z.((Bob(x) & Peter(y) & Reason(z)) -> FiredWithoutGoodRight(x,y,z))", "all x y z.((Bob(x) & Peter(y) & Reason(z)) -> Fired(x,y))", "all x.((Bob(x) & Peter(y)) -> FiredWithoutGoodRun(x,y))"]}
{"id": "enwn_validation_316", "nl": "Bob should not have fired Peter.", "fol": "", "prediction": ["all x y.((Bob(x) & Peter(y)) -> -Fired(x,y))", "all x.((Bob(x) & Peter(y)) -> -Fired(x,y))", "all x.((Bob(x) & -Fired(x,Peter)) -> -Fired(x,Peter))", "all x y.((Bob(x) & Peter(y)) -> -Shooted(x,y))", "all x y.((Bob(x) & Peter(y)) -> -Shoulded(x,y))", "all x.((Bob(x) & -FiredPeter(x)) -> -FiredPeter(x))", "all x.((Bob(x) & Peter(y)) -> -Shooted(x,y))", "all x y.((Bob(x) & Peter(y)) -> -Filled(x,y))", "all x.((Bob(x) & Peter(y)) -> -Shoulded(x,y))", "all x y.((Bob(x) & Peter(y)) -> -Fired(x,y))", "all x.((Bob(x) & Peter(y)) -> -Filled(x,y))", "all x.((Bob(x) & Peter(y)) -> -Fired(x,y))", "all x y.((Bob(x) & Peter(y)) -> -ShouldFire(x,y))", "all x.((Bob(x) & Peter(x)) -> -Fired(x,y))", "all x.((Bob(x) & Peter(p)) -> -Fired(x,p))", "all x.((Bob(x) & -Fired(x,Peter)) -> -Fired(x,Peter))"]}
{"id": "enwn_validation_317", "nl": "Superiors give orders and expect you to follow them.", "fol": "", "prediction": ["all x.(Superior(x) -> (GivesOrders(x) & ExpectsYouToFollowOrders(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsFollowingOrders(x)))", "all x y.((Superior(x) & Order(y)) -> (Gives(x,y) & Expects(x,y)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsToFollowOrders(x)))", "all x y.((Superior(x) & Order(y)) -> (Gives(x,y) & ExpectsToFollow(x,y)))", "all x y z.((Superior(x) & Order(y) & Order(z)) -> (Gives(x,y) & Expects(x,z)))", "all x y.((Superior(x) & Order(y)) -> (Gives(x,y) & ExpectsFollowing(x,y)))", "all x y.((Superior(x) & Order(y)) -> (Gives(x,y) & ExpectsYouToFollow(x,y)))", "all x.(Superior(x) -> (GivesOrders(x) & Expects(x)))", "all x y z.((Superior(x) & Order(y) & Order(z)) -> (Gives(x,y) & ExpectsToFollow(x,z)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsFollowing(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsSufficient(x)))", "all x.(Supreme(x) -> (GivesOrders(x) & ExpectsYouToFollowOrders(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsChange(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsFollowingOfOrders(x)))", "all x.(Superior(x) -> (GivesOrders(x) & ExpectsFollowingOrders(x)))"]}
{"id": "enwn_validation_318", "nl": "If an order is unjust, you should disobey those orders.", "fol": "", "prediction": ["all x.((Order(x) & Unjust(x)) -> Disobey(x))", "all x.((Order(x) & Unjust(x)) -> ShouldDisobey(x))", "all x.(UnjustOrder(x) -> DisobeyOrder(x))", "all x.(UnjustOrder(x) -> DisobeyOrders(x))", "all x.((Order(x) & Unjust(x)) -> Disobey(x,y))", "all x.(UnjustOrder(x) -> Disobey(x))", "all x.((Order(x) & Unjust(x)) -> DisobeyOrder(x))", "all x.((Order(x) & Unjust(x)) -> ShouldDisobey(x,y))", "all x y.((Order(x) & Unjust(x)) -> Disobey(y,x))", "all x.((Order(x) & Unjust(x)) -> DisobeyOrders(x))", "all x.(Unjust(x) -> DisobeyOrders(x))", "all x y.((Order(x) & Unjust(x) & Order(y)) -> Disobey(x,y))", "all x.((Order(x) & Unjust(x)) -> Disobeys(x))", "all x y.((Order(x) & Order(y) & Unjust(x)) -> Disobey(x,y))", "all x y.((Order(x) & Unjust(x)) -> Disobey(x,y))", "all x.((Order(x) & Unjust(x)) -> Disobeys(x,y))"]}
{"id": "enwn_validation_319", "nl": "If you follow an order to commit a crime, you followed an unjust order.", "fol": "", "prediction": ["all x y.((Order(x) & Crime(y) & Follows(x,y)) -> UnjustOrder(x))", "all x y.((Order(x) & Follows(x,y) & CommitsCrime(y)) -> FollowedUnjustOrder(x))", "all x y.((Order(x) & Follows(x,y) & CommitsCrime(y)) -> UnjustOrder(x))", "all x y.((Order(x) & CommitCrime(y) & Follows(x,y)) -> UnjustOrder(x))", "all x.((SuesOrder(x) & CommitsCrime(x)) -> FollowsUnjustOrder(x))", "all x y.((Order(x) & Follows(x,y) & CommitsCrime(y)) -> FollowsUnjustOrder(x))", "all x.((SuesOrder(x) & CommitsCrime(x)) -> FollowedUnjustOrder(x))", "all x y z.((Order(x) & Crime(y) & Order(z) & Follows(x,z)) -> UnjustOrder(x))", "all x.((SuesOrder(x) & CommitsCrime(x)) -> UnjustOrder(x))", "all x y.((Order(x) & Follows(x,y) & CommitsCrime(x)) -> UnjustOrder(y))", "all x.((FollowOrder(x) & CommitCrime(x)) -> FollowedUnjustOrder(x))", "all x.((Order(x) & Follows(x) & CommitsCrime(x)) -> FollowedUnjustOrder(x))", "all x y.((Order(x) & Order(y) & Follows(x,y)) -> UnjustOrder(x))", "all x y.((Order(x) & Follows(x,y) & CommitsCrime(x)) -> FollowedUnjustOrder(y))", "all x.((Order(x) & Follows(x,y) & CommitsCrime(y)) -> FollowedUnjustOrder(x))", "all x y.((Order(x) & Follow(x,y) & CommitCrime(y)) -> FollowedUnjustOrder(x))"]}
{"id": "enwn_validation_320", "nl": "If you did the thing you are ordered to do from someone else, you followed the order given by that someone.", "fol": "", "prediction": ["all x y.((DoesOrder(x,y) & Person(y)) -> FollowedOrder(x,y))", "all x y.((DoesOrder(x,y) & Person(y)) -> FollowsOrder(x,y))", "all x y.((Does(x,y) & OrderedFrom(x,y)) -> FollowedOrder(x,y))", "all x y.((Does(x,y) & OrderedToDo(x,y)) -> FollowedOrder(x,y))", "all x y.((DoingThing(x) & OrderedFromAnother(x,y)) -> FollowedOrder(x,y))", "all x y.((DoesThing(x) & OrderedFrom(x,y)) -> FollowedOrder(x,y))", "all x y.((DoesThing(x) & OrderedFromAnother(x,y)) -> FollowedOrder(x,y))", "all x y.((Does(x,y) & OrderedFromAnother(y)) -> FollowedOrder(x,y))", "all x y.((DoesThing(x) & OrderedToDo(x,y)) -> FollowedOrder(x,y))", "all x y.((Order(x) & Person(y)) -> FollowedOrder(x,y))", "all x y.((Does(x,y) & OrderedFrom(y,x)) -> FollowedOrder(x,y))", "all x y.((Does(x,y) & OrderedFrom(x,y)) -> FollowedOrder(x,y))", "all x y.((DoesThing(x) & OrderedFromAnother(y)) -> FollowedOrder(x,y))", "all x y.((Does(x,y) & OrderedFrom(x,y)) -> FollowsOrder(x,y))", "all x y.((DoesThing(x) & OrderedFrom(x,y)) -> FollowsOrder(x,y))", "all x y.((Does(x,y) & OrderedFromAnother(x)) -> FollowedOrder(x,y))"]}
{"id": "enwn_validation_321", "nl": "If a superior tells you to do something, that thing is an order.", "fol": "", "prediction": ["all x.((Supervisor(x) & TellsYouToDo(x)) -> Order(x))", "all x.((Superior(x) & TellsYouToDo(x)) -> Order(x))", "all x y.((Supervisor(x) & TellsYouToDo(x,y)) -> Order(y))", "all x y.((Superior(x) & TellsYouToDo(x,y)) -> Order(x))", "all x y.((Supervisor(x) & TellsYouToDo(x,y)) -> Order(x))", "all x y.((Superior(x) & TellsYouToDo(x,y)) -> Order(y))", "all x.((Superior(x) & TellsYouToDoSomething(x)) -> Order(x))", "all x.((Supervisor(x) & TellsYouToDoSomething(x)) -> Order(x))", "all x.((Supervisor(x) & TellsToDo(x)) -> Order(x))", "all x.((Superior(x) & TellsToDo(x)) -> Order(x))", "all x y.((Supervisor(x) & Tells(x,y)) -> Order(y))", "all x y.((Superior(x) & Tells(x,y)) -> Order(y))", "all x y.((Supervisor(x) & Tells(x,y)) -> Order(x))", "all x y.((Superior(x) & Tells(x,y)) -> Order(x))", "all x y.((Supervisor(x) & TellsToDo(x,y)) -> Order(y))", "all x y.((Supervisor(x) & TellsToDo(x,y)) -> Order(x))"]}
{"id": "enwn_validation_322", "nl": "Sara committed fraud because her boss told her to.", "fol": "", "prediction": ["all x y.((Sara(x) & Boss(y)) -> CommittedFraud(x,y))", "all x y.((Boss(x) & Sara(y)) -> CommittedFraud(x,y))", "all x y.((Boss(x) & Sara(y)) -> CommittedFraud(y,x))", "all x y z.((Boss(x) & Sara(y) & Boss(z)) -> CommittedFraud(y,z))", "all x.((Sara(x) & Boss(x)) -> CommittedFraud(x))", "all x y z.((Sara(x) & Boss(y) & Boss(z)) -> CommittedFraud(x,y,z))", "all x.((Boss(x) & Sara(x)) -> CommittedFraud(x))", "all x y.((Boss(x) & Sara) & Boss(y)) -> CommittedFraud(x,y))", "all x y.((Sara(x) & Boss(y)) -> CommittedFraud(x))", "all x.((Sara(x) & BossWrote(x,Sara)) -> CommittedFraud(x))", "all x.((Sara(x) & BossTold(x)) -> CommittedFraud(x))", "all x y z.((Boss(x) & Sara(y) & Boss(z)) -> CommittedFraud(x,y,z))", "all x.((Sara(x) & BossToldSara(x)) -> CommittedFraud(x))", "all x y.((Boss(x) & Sara(y)) -> CommittedFraud(y))", "all x y.((Sara(x) & Boss(y)) -> CommittedVirginity(x,y))", "all x y.((Boss(x) & Sara(y)) -> CommittedVirginity(x,y))"]}
{"id": "enwn_validation_323", "nl": "Fraud is a crime.", "fol": "", "prediction": ["all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x y.((Fraud(x) & Crime(y)) -> Fraud(x))", "all x.(Fraud(x) -> Criminal(x))", "all x y.((Fraud(x) & Crime(y)) -> Fraud(x,y))", "all x.((Fraud(x) & Crime(x)) -> Fraud(x))", "all x y.((Fraud(x) & Crime(y)) -> Is(x,y))", "all x.(Fraud(x) -> (Crime(x) & Fraud(x)))", "all x.(Fraud(x) -> Criminal(x))", "all x.(Fraud(x) -> IsCrime(x))", "all x y.((Fraud(x) & Crime(y)) -> Crime(x,y))", "all x.(Fraud(x) -> (Crime(x) & Fraud(x)))", "all x.(Fraud(x) -> Crime(x))", "all x y.((Fraud(x) & Crime(y)) -> Crime(x))", "all x.(Fraud(x) -> Crime(x))", "all x.(Fraud(x) -> (Crime(x) & Crime(x)))"]}
{"id": "enwn_validation_324", "nl": "If someone is your boss, then they are your superior.", "fol": "", "prediction": ["all x.(Boss(x) -> Superior(x))", "all x.((Boss(x) & Superior(x)) -> Boss(x))", "all x.((Boss(x) & Sufficient(x)) -> Boss(x))", "all x.((Bust(x) & Superior(x)) -> Boss(x))", "all x.(Bust(x) -> Superior(x))", "all x.((Boss(x) & Boss(x)) -> Superior(x))", "all x.((Boss(x) & Sufficient(x)) -> Superior(x))", "all x.((Bosse(x) & Superior(x)) -> Boss(x))", "all x.(Bosse(x) -> Superior(x))", "all x.((Bust(x) & Sufficient(x)) -> Boss(x))", "all x.((Boss(x) & Superior(x)) -> BossOf(x))", "all x.((Boss(x) & Sufficient(x)) -> Sufficient(x))", "all x y.((Boss(x) & Boss(y)) -> Superior(x))", "all x.((Boss(x) | Superior(x)) -> Boss(x))", "all x.((Person(x) & Boss(x)) -> Superior(x))", "all x.((Boss(x) & Superior(x)) -> Superior(x))"]}
{"id": "enwn_validation_325", "nl": "You should disobey orders from superiors if they are unjust.", "fol": "", "prediction": ["all x y.((Supervisor(x) & Order(y) & Unjust(y)) -> Disobey(x,y))", "all x.((SuperiorOrder(x) & Unjust(x)) -> Disobey(x))", "all x y.((Supervisor(x) & Order(y) & Unjust(y)) -> Disobeys(x,y))", "all x.((SuperiorOrder(x) & Unjust(x)) -> Disobeys(x))", "all x y.((Supervisor(x) & Superior(y) & Unjust(y)) -> DisobeysOrders(x,y))", "all x.((SupervisorOrder(x) & Unjust(x)) -> Disobey(x))", "all x y.((Superior(x) & Order(y) & Unjust(y)) -> Disobey(x,y))", "all x y.((Supreme(x) & Superior(y) & Unjust(y)) -> DisobeysOrders(x,y))", "all x y.((Superior(x) & Superior(y) & Unjust(y)) -> DisobeysOrders(x,y))", "all x y.((Supreme(x) & Superior(y) & Unjust(y)) -> DisobeyOrders(x,y))", "all x.((SuperiorOrders(x) & Unjust(x)) -> Disobey(x))", "all x y.((Supreme(x) & Superior(y) & Unjust(y)) -> Disobey(x,y))", "all x y.((Supervisor(x) & Superior(y) & Unjust(y)) -> DisobeyOrders(x,y))", "all x.((SupervisorOrder(x) & Unjust(x)) -> Disobeys(x))", "all x y.((Supervisor(x) & Superior(y) & Unjust(y)) -> Disobey(x,y))", "all x y.((Superior(x) & Superior(y) & Unjust(y)) -> DisobeyOrders(x,y))"]}
{"id": "enwn_validation_326", "nl": "Sara committed a crime  because her boss told her to.", "fol": "", "prediction": ["all x y.((Sara(x) & Boss(y)) -> CommittedCrime(x,y))", "all x y.((Boss(x) & Sara(y)) -> CommittedCrime(y,x))", "all x y.((Boss(x) & Sara(y)) -> CommittedCrime(x,y))", "all x y z.((Sara(x) & Boss(y) & Boss(z)) -> CommittedCrime(x,y,z))", "all x.((Sara(x) & Boss(x)) -> CommittedCrime(x))", "all x y.((Boss(x) & Sara) & Boss(y)) -> CommittedCrime(x,y))", "all x y z.((Sara(x) & Boss(y) & Crime(z)) -> CommittedBy(x,y,z))", "all x y z.((Boss(x) & Sara(y) & Crime(z)) -> CommittedBy(y,z))", "all x y z.((Boss(x) & Sara(y) & Boss(z)) -> CommittedCrime(y,z))", "all x y z.((Sara(x) & Boss(y) & Crime(z)) -> CommittedBy(x,z))", "all x.((Sara(x) & BossTold(x)) -> CommittedCrime(x))", "all x.((Sara(x) & Boss(y)) -> CommittedCrime(x,y))", "all x.((Boss(x) & Sara(x)) -> CommittedCrime(x))", "all x y z.((Sara(x) & Boss(y) & Crime(z)) -> Committed(x,y,z))", "all x y z.((Sara(x) & Boss(y) & Boss(z)) -> CommittedCrime(x,y))", "all x.((Sara(x) & BossWrote(x)) -> CommittedCrime(x))"]}
{"id": "enwn_validation_327", "nl": "Sara committed a crime  because her superior told her to.", "fol": "", "prediction": ["all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))", "all x.((Sara(x) & Superior(x)) -> CommittedCrime(x))", "all x y.((Superior(x) & Sara(y)) -> CommittedCrime(x,y))", "all x y.((Superior(x) & Sara(y)) -> CommittedCrime(y,x))", "all x y z.((Sara(x) & Superior(y) & Superior(z)) -> CommittedCrime(x,y,z))", "all x y.((Sara(x) & Sufficient(y)) -> CommittedCrime(x,y))", "all x.((Sara(x) & SuperiorSaidTo(x)) -> CommittedCrime(x))", "all x.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))", "all x y z.((Sara(x) & Superior(y) & Sufficient(z)) -> CommittedCrime(x,y,z))", "all x y.((Sara(x) & Superior(y) & Tells(x,y)) -> CommittedCrime(x,y))", "all x y.((Supervisor(x) & Sara(y)) -> CommittedCrime(y,x))", "all x y.((Sara(x) & Supravisor(y)) -> CommittedCrime(x,y))", "all x y z.((Sara(x) & Superior(y) & Crime(z)) -> CommittedBy(x,y,z))", "all x.((Sara(x) & SuperiorSaid(x)) -> CommittedCrime(x))", "all x y.((Supervisor(x) & Sara(y)) -> CommittedCrime(x,y))", "all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x))"]}
{"id": "enwn_validation_328", "nl": "Sara committed a crime because her superior ordered her to.", "fol": "", "prediction": ["all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))", "all x y.((Sara(x) & Superior(y) & Ordered(x,y)) -> CommittedCrime(x,y))", "all x y.((Sara(x) & Superior(y) & OrderedTo(x,y)) -> CommittedCrime(x,y))", "all x.((Sara(x) & SuperiorOrdned(x,Sara)) -> CommittedCrime(x))", "all x.((Sara(x) & SuperiorOrdnedTo(x)) -> CommittedCrime(x))", "all x.((Sara(x) & SuperiorOrdned(x)) -> CommittedCrime(x))", "all x y.((Sara(x) & Superior(y) & OrderedTo(x,y)) -> CommittedCrime(x))", "all x y.((Sara(x) & Superior(y) & Ordered(x,y)) -> CommittedCrime(x))", "all x.((Sara(x) & SuperiorOrders(x,Sara)) -> CommittedCrime(x))", "all x y.((Sara(x) & SuperiorOrders(x,y)) -> CommittedCrime(x,y))", "all x y.((Sara(x) & SuperiorOrdned(x,y)) -> CommittedCrime(x,y))", "all x.((Sara(x) & SuperiorOrdered(x,Sara)) -> CommittedCrime(x))", "all x.((Sara(x) & SuperiorOrderedTo(x)) -> CommittedCrime(x))", "all x y.((Sara(x) & SuperiorOrdned(x,y)) -> CommittedCrime(x))", "all x.((Sara(x) & SuperiorOrdinated(x)) -> CommittedCrime(x))", "all x y.((Sara(x) & SuperiorOrders(x,y)) -> CommittedCrime(x))"]}
{"id": "enwn_validation_329", "nl": "Sara followed her order to commit a crime given by her superior.", "fol": "", "prediction": ["all x y.((Sara(x) & Superior(y)) -> FollowedOrderToCommitCrime(x,y))", "all x y.((Sara(x) & Superior(y)) -> FollowedOrder(x,y))", "all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))", "all x y z.((Sara(x) & Superior(y) & Crime(z)) -> FollowedOrderToCommit(x,z))", "all x y z.((Sara(x) & Superior(y) & Crime(z)) -> FollowedOrder(x,y,z))", "all x y.((Sara(x) & Superior(y)) -> FollowedOrderToCommit(x,y))", "all x y.((Sara(x) & Superior(y)) -> CommitsCrime(x,y))", "all x y z.((Sara(x) & Superior(y) & Crime(z)) -> FollowedOrderToCommit(x,y,z))", "all x y.((Sara(x) & Superior(y)) -> FollowsOrderToCommitCrime(x,y))", "all x y z.((Sara(x) & Superior(y) & Crime(z)) -> FollowedOrder(x,z))", "all x y.((Sara(x) & Superior(y)) -> FollowingOrderToCommitCrime(x,y))", "all x y.((Sara(x) & Superior(y)) -> FollowedOrderToCommitCrime(x,y))", "all x y z.((Sara(x) & Order(y) & Superior(z)) -> CommitsCrime(x,y,z))", "all x y.((Sara(x) & Superior(y)) -> followedOrderToCommitCrime(x,y))", "all x y.((Sara(x) & Superior(y)) -> (CommittedCrime(x,y) & FollowedOrder(x,y)))", "all x y z.((Sara(x) & Order(y) & Superior(z)) -> FollowedToCommitCrime(x,y,z))"]}
{"id": "enwn_validation_330", "nl": "Sara followed an unjust order given by her superior.", "fol": "", "prediction": ["all x y.((Sara(x) & Superior(y)) -> FollowedUnjustOrder(x,y))", "all x y z.((Sara(x) & Superior(y) & UnjustOrder(z)) -> Followed(x,y,z))", "all x y.((Sara(x) & Superior(y)) -> FollowsUnjustOrder(x,y))", "all x.(Sara(x) -> FollowedUnjustOrder(x))", "all x y.((Sara(x) & Sufficient(y)) -> FollowedUnjustOrder(x,y))", "all x.((Sara(x) & UnjustOrder(x)) -> Followed(x,Sara))", "all x y z.((Sara(x) & Superior(y) & UnjustOrder(z)) -> Followed(x,z))", "all x y z.((Sara(x) & Superior(y) & UnjustOrder(z)) -> Follows(x,y,z))", "all x y z.((Sara(x) & UnjustOrder(y) & Superior(z)) -> Followed(x,y,z))", "all x.((Sara(x) & UnjustOrder(x)) -> FollowedBySuperior(x))", "all x y.((Sara(x) & Supremier(y)) -> FollowedUnjustOrder(x,y))", "all x y z.((Sara(x) & Superior(y) & UnjustOrder(z)) -> Followed(x,y))", "all x y.((Sara(x) & Supravisor(y)) -> FollowedUnjustOrder(x,y))", "all x y z.((Sara(x) & Superior(y) & Order(z)) -> Followed(x,z))", "all x y.((Sara(x) & Superior(y)) -> FollowingUnjustOrder(x,y))", "all x y.((Sara(x) & Superior(y)) -> UnjustOrder(x,y))"]}
{"id": "enwn_validation_331", "nl": "Sara should have disobeyed her superiors unjust orders.", "fol": "", "prediction": ["all x y.((Sara(x) & Superior(y)) -> DisobeyedUnjustOrders(x,y))", "all x.(Sara(x) -> DisobeyedUnjustOrders(x))", "all x y.((Sara(x) & Superiors(y)) -> DisobeyedUnjustOrders(x,y))", "all x.((Sara(x) & SuperiorsUnjustOrders(x)) -> Disobeyed(x,Sara))", "all x y.((Sara(x) & Superior(y) & UnjustOrders(y)) -> Disobeyed(x,y))", "all x y.((Sara(x) & Superior(y)) -> ShouldDisobeyedUnjustOrders(x,y))", "all x.((Sara(x) & SuperiorsUnjustOrders(x)) -> ShouldHaveDisobeyed(x,Sara))", "all x.((Sara(x) & UnjustOrders(s)) -> Disobeyed(x,s))", "all x y z.((Sara(x) & Superior(y) & UnjustOrder(z)) -> ShouldHaveDisobeyed(x,y,z))", "all x.((Sara(x) & SuperiorsUnjustOrders(x)) -> Disobeyed(x,sara))", "all x.((Sara(x) & SuperiorsUnjustOrders(x)) -> ShouldDisobeyed(x,Sara))", "all x y.((Sara(x) & Superior(y) & UnjustOrders(y)) -> ShouldDisobeyed(x,y))", "all x.((Sara(x) & UnjustOrders(s)) -> Disobeyed(x,s,s))", "all x y z.((Sara(x) & Superior(y) & UnjustOrder(z)) -> ShouldDisobeyed(x,y,z))", "all x.((Sara(x) & UnjustOrders(x)) -> Disobeyed(x,Sara))", "all x y.((Sara(x) & Superior(y) & UnjustOrders(y)) -> ShouldDisobey(x,y))"]}
{"id": "enwn_validation_332", "nl": "If you are cheating, you should tell your partner and stop cheating.", "fol": "", "prediction": ["all x.((Cheats(x) & TellsPartner(x) & StopsCheating(x)) -> TellsPartner(x))", "all x.((Partner(x) & Cheating(x)) -> (Tell(x,x) & StopCheating(x)))", "all x.((Partner(x) & Cheating(x)) -> (StopCheating(x) & Tell(x,x)))", "all x.((Partner(x) & Cheating(x)) -> (Tell(x,x) & StopCheating(x)))", "all x.((Partner(x) & Cheating(x)) -> (StopCheating(x) & Tell(x,y)))", "all x.(Cheats(x) -> (TellsPartner(x) & StopsCheating(x)))", "all x.((Partner(x) & Cheating(x)) -> (Tell(x) & StopCheating(x)))", "all x.((Partner(x) & Cheating(x)) -> (Tell(x,y) & StopCheating(x)))", "all x.((Partner(x) & Cheating(x)) -> (Tell(x) & StopCheating(x)))", "all x.((Partner(x) & Cheating(x)) -> (Tell(x,y) & StopCheating(x)))", "all x y.((Partner(x) & Partner(y) & Cheating(x)) -> TellsAndStops(x,y))", "all x.(Cheating(x) -> (TellYourPartner(x) & StopCheating(x)))", "all x.(Cheating(x) -> (Tell(x,partner) & StopCheating(x)))", "all x.((Partner(x) & Cheating(x)) -> (Tell(x,x) & StopChasing(x)))", "all x.(Cheating(x) -> (TellPartner(x) & StopCheating(x)))", "all x.(Cheating(x) -> (TellsPartner(x) & StopsCheating(x)))"]}
{"id": "enwn_validation_333", "nl": "Stan is seeing Olivia but is partnered with Ellie.", "fol": "", "prediction": ["all x y.((Stan(x) & Olivia(y)) -> (Sees(x,y) & PartnersWith(x,y)))", "(Sees(Stan,Olivia) & PartnersWith(Stan,Ellie))", "all x y.((Stan(x) & Olivia(y)) -> (Sees(x,y) & Partner(x,y)))", "(Stan(Stan) & Olivia(Stan) & Ellie(Ellie))", "(Stan(Stan) & SeesOlivia(Stan) & PartnersWithEllie(Stan))", "(Sees(Stan,Oliver) & PartnersWith(Stan,Ellie))", "all x y.((Stan(x) & Olivia(y)) -> (Sees(x,y) & PartneredWith(x,y)))", "all x y.((Stan(x) & Olivia(y)) -> (Sees(x,y) & PartnersWith(x,Ellie)))", "(SeesOlivia(Stan) & PartnersWithEllie(Stan))", "(Stan(Stan) & SeesOlivia(Stan) & PartneredWithEllie(Stan))", "all x y.((Stan(x) & Olivia(y)) -> (Sees(x,y) & Partners(x,y)))", "(Sees(Stan,Olympus) & PartnersWith(Stan,Ellie))", "all x y.((Stan(x) & Olivia(y)) -> (Seating(x,y) & Partner(x,y)))", "all x y.((Stan(x) & Olivia(y)) -> (Sees(x,y) & PartneredWith(x,Ellie)))", "(Sees(Stan,Olivia) & Partner(Stan,Ellie))", "all x y.((Stan(x) & Olivia(y)) -> (Seeing(x,y) & Partner(x,y)))"]}
{"id": "enwn_validation_334", "nl": "If you are seeing someone other than your partner, then you are cheating on your partner.", "fol": "", "prediction": ["all x.((Seating(x) & OtherThanPartner(x)) -> CheatingOnPartner(x))", "all x.((SeesPerson(x) & OtherThanPartner(x)) -> CheatingOnPartner(x))", "all x y.((Partner(x) & Partner(y) & Sees(x,y)) -> CheatingOn(x,y))", "all x.((Saying(x) & OtherThanPartner(x)) -> CheatingOnPartner(x))", "all x.((Sighting(x) & OtherThanPartner(x)) -> CheatingOnPartner(x))", "all x y.((Partner(x) & Partner(y) & Sees(x,y)) -> Cheating(x,y))", "all x.((SeatingOtherThanPartner(x)) -> CheatingOnPartner(x))", "all x y.((Partner(x) & Partner(y) & Sees(x,y)) -> Cheating(x))", "all x.((Seating(x) & -Partner(x)) -> CheatingOnPartner(x))", "all x y.((Seating(x,y) & Partner(y)) -> CheatingOn(x,y))", "all x y.((Partner(x) & Sees(x,y)) -> CheatingOn(x,y))", "all x.((Seating(x) & -Partner(x)) -> CheatingOn(x,Partner))", "all x.((Seating(x) & OtherThanPartner(x)) -> Cheating(x))", "all x.((Sees(x,otherThanPartner(x)) -> CheatingOnPartner(x))", "all x y.((Partner(x) & Partner(y)) -> CheatingOn(x,y))", "all x y.((Seating(x,y) & Partner(y)) -> Cheating(x,y))"]}
{"id": "enwn_validation_335", "nl": "Stan is cheating on his partner.", "fol": "", "prediction": ["all x y.((Stan(x) & Partner(y)) -> Cheating(x,y))", "all x y.((Stan(x) & Partner(y)) -> CheatingOn(x,y))", "all x.((Stan(x) & Partner(x)) -> Cheating(x))", "all x y z.((Stan(x) & Partner(y) & Partner(z)) -> Cheating(x,y,z))", "all x.((Stan(x) & Partner(y)) -> Cheating(x,y))", "all x y.((Stand(x) & Partner(y)) -> Cheating(x,y))", "all x y z.((Stan(x) & Partner(y) & Partner(z)) -> CheatingOn(x,y,z))", "all x y z.((Stand(x) & Partner(y) & Partner(z)) -> Cheating(x,y,z))", "all x.((Stan(x) & Partner(y)) -> CheatingOn(x,y))", "all x y.((Stand(x) & Partner(y)) -> CheatingOn(x,y))", "all x y z.((Stan(x) & Partner(y) & Partner(z) & CheatingOn(x,y,z)) -> CheatingOn(x,y,z))", "all x y z.((Stan(x) & Partner(y) & Partner(z) & Cheating(x,y,z)) -> Cheating(x,y,z))", "all x y.((Stan(x) & Partner(y) & Cheating(x,y)) -> Cheating(x,y))", "all x y.((Stan(x) & Partner(y) & CheatingOn(x,y)) -> CheatingOn(x,y))", "all x y z.((Stand(x) & Partner(y) & Partner(z)) -> CheatingOn(x,y,z))", "all x y.((Stan(x) & Partner(y) & CheatingOn(x,y)) -> Cheating(x,y))"]}
{"id": "enwn_validation_336", "nl": "Stan should stop cheating and tell his partner.", "fol": "", "prediction": ["all x y.((Stan(x) & Partner(y)) -> (StopCheating(x,y) & Tell(x,y)))", "all x y.((Stan(x) & Partner(y)) -> (Cheats(x,y) & Tells(x,y)))", "all x y.((Stan(x) & Partner(y)) -> (Cheats(x,y) & Tells(x,y)))", "all x y.((Stan(x) & Partner(y)) -> (StopCheating(x) & Tell(x,y)))", "all x y.((Stand(x) & Partner(y)) -> (StopCheating(x,y) & Tell(x,y)))", "all x.((Stan(x) & StopCheating(x)) -> TellPartner(x))", "all x y.((Stan(x) & Partner(y)) -> (StopChasing(x,y) & Tell(x,y)))", "all x y.((Stan(x) & Partner(y)) -> (Stopcheating(x,y) & Tell(x,y)))", "all x.((Stan(x) & StopsCheating(x)) -> TellsPartner(x))", "all x y z.((Stan(x) & Partner(y) & Cheating(z)) -> (Stop(x,y) & Tell(x,z)))", "all x y z.((Stan(x) & Partner(y) & Cheating(z)) -> (Stop(x,z) & Tell(x,y)))", "all x y.((Stand(x) & Partner(y)) -> (StopCheating(x) & Tell(x,y)))", "all x.(Stan(x) -> (StopCheating(x) & TellPartner(x)))", "all x.((Stan(x) & StopCheating(x)) -> TellsPartner(x))", "all x y z.((Stan(x) & Partner(y) & Cheating(z)) -> (StopCheating(x,y) & Tell(x,z)))", "all x.((Stan(x) & StopCheating(x)) -> Tell(x,partner))"]}
{"id": "enwn_validation_337", "nl": "If you hurt someone over a rude remark then you lost your temper.", "fol": "", "prediction": ["all x.((IrresponsibleRemark(x) & Hurts(x)) -> LostTemper(x))", "all x y.((IrresponsibleRemark(x) & Person(y) & Hurts(x,y)) -> LostTemper(x))", "all x y.((IrresponsibleRemark(x) & Person(y) & Hurts(x,y)) -> LostTemperature(x))", "all x.((IrresponsibleRemark(x) & Hurts(x)) -> LostTemperature(x))", "all x y.((Person(x) & RustRemark(y) & Hurts(x,y)) -> LostTemper(x))", "all x y.((Person(x) & RudeRemark(y) & Hurts(x,y)) -> LostTemper(x))", "all x y.((IrresponsibleRemark(x) & Person(y) & HurtsOver(x,y)) -> LostTemper(x))", "all x.((IrresponsibleRemark(x) & HurtsPeople(x)) -> LostTemper(x))", "all x.((IrresponsibleRemark(x) & HurtsPerson(x)) -> LostTemper(x))", "all x y.((Person(x) & RustfulRemark(y) & Hurts(x,y)) -> LostTemper(x))", "all x y.((Person(x) & RustRemark(y) & Hurts(x,y)) -> LostTemperature(x))", "all x.((IrresponsibleRemark(x) & Hurts(x,y)) -> LostTemper(x))", "all x y.((IrresponsibleRemark(x) & Person(y) & HurtsOver(x,y)) -> LostTemperature(x))", "all x y.((Person(x) & RudeRemark(y) & Hurts(x,y)) -> LostTemperature(x))", "all x y.((Person(x) & Remark(y) & Hurts(x,y)) -> LostTemper(x))", "all x y.((IrresponsibleRemark(x) & Person(y) & Hurts(x,y)) -> LosesTemper(x))"]}
{"id": "enwn_validation_338", "nl": "Jake punched Jim when Jim said Jake's shirt was stupid.", "fol": "", "prediction": ["all x y.((Jake(x) & Jim(y) & JakeShirt(y)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & JakeShirt(x,y)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & JakesShirt(y)) -> Punched(x,y))", "all x y z.((Jake(x) & Jim(y) & Shirt(z) & Jake(z)) -> Punched(x,y,z))", "all x y.((Jake(x) & Jim(y) & JakesShirt(x,y)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & JakeStupidShirt(y)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & JakeShirt(x)) -> Punched(x,y))", "all x y z.((Jake(x) & Jim(y) & Shirt(z)) -> Punched(x,y,z))", "all x y z.((Jake(x) & Jim(y) & Shirt(z) & Jake(z)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & JakeShirt(z)) -> Punched(x,y,z))", "all x y z.((Jake(x) & Jim(y) & Shirt(z) & Jake(y) & Jim(z)) -> Punched(x,y,z))", "all x y.((Jake(x) & Jim(y) & Jake(x)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & JakeShirt(z)) -> Punched(x,y))", "all x y z.((Jake(x) & Jim(y) & Shirt(z) & JakeStupid(y)) -> Punched(x,y,z))", "all x y.((Jake(x) & Jim(y) & JakesShirt(z)) -> Punched(x,y,z))"]}
{"id": "enwn_validation_339", "nl": "Saying something is stupid is considered a rude remark.", "fol": "", "prediction": ["all x.(SaysStupid(x) -> RustRemark(x))", "all x.((SaysStupid(x) & Remark(x)) -> Rust(x))", "all x.(SaysStupid(x) -> RustRemark(x))", "all x.((Says(x) & Stuck(x)) -> RustRemark(x))", "all x.((SaysStupid(x)) -> RustRemark(x))", "all x.((SaysStupid(x) & RustRemark(x)) -> Remark(x))", "all x.((Says(x) & Dubious(x)) -> RustRemark(x))", "all x.(SaysStupid(x) -> RupidRemark(x))", "all x.((SaysStupid(x) & RustRemark(x)) -> RustRemark(x))", "all x.(Says(x,stupid) -> RustRemark(x))", "all x.((SaysStupid(x) & Remark(x)) -> Rust(x))", "all x.(SaysIsStupid(x) -> RustRemark(x))", "all x.(SayStupid(x) -> RustRemark(x))", "all x.((SaysStupid(x) & Remark(x)) -> RustRemark(x))", "all x.(Says(x,Stupid(x) -> RustRemark(x))", "all x.((SaysStupid(x) & Remark(x)) -> Rupid(x))"]}
{"id": "enwn_validation_340", "nl": "You should control your emotions and not hurt someone because you lost your temper.", "fol": "", "prediction": ["all x y.((Emotion(x) & Person(y) & LostTemper(x,y)) -> Control(x,y))", "all x y.((Emotion(x) & Person(y) & LostTemper(x)) -> Control(x,y))", "all x y.((Emotions(x) & Person(y) & LostTemper(x,y)) -> Control(x,y))", "all x y.((Emotions(x) & Person(y) & LostTemper(x)) -> Control(x,y))", "all x y.((Emotion(x) & Person(y) & LostTemperature(x,y)) -> Control(x,y))", "all x y.((Emotion(x) & Person(y) & LostTemperature(x)) -> Control(x,y))", "all x y.((Emotion(x) & Person(y) & LostTemper(x,y)) -> Controls(x,y))", "all x.((Emotions(x) & -HasTemper(x)) -> Control(x))", "all x y.((Emotion(x) & Person(y)) -> (Control(x,y) & -HasTemper(x,y)))", "all x.((Emotions(x) & -HasTemper(x)) -> Controls(x))", "all x.((ControlsEmotions(x) & -HasTemper(x)) -> -HasTemper(x))", "all x y.((Emotion(x) & Person(y)) -> (Controls(x,y) & -HasTemper(x,y)))", "all x y.((Emotion(x) & Person(y) & LostTemper(x,y)) -> ControlsAndNotHas(x,y))", "all x.((Emotions(x) & -HasTemperature(x)) -> Control(x))", "all x y.((Emotions(x) & Person(y) & LostTemperature(x)) -> Control(x,y))", "all x y.((Emotion(x) & Person(y) & LostTemper(x)) -> ControlsAndNotHas(x,y))"]}
{"id": "enwn_validation_341", "nl": "Jake punched Jim when Jim made a rude remark about Jake's shirt.", "fol": "", "prediction": ["all x y.((Jake(x) & Jim(y) & RustRemark(y,x)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & MadeRuleRemark(x,y)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & MadeRuleRemark(y,x)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & RustRemark(x,y)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & RustRemark(y)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & MadeRuleRemarkAbout(y,x)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & MadeRuleRemark(y,x)) -> PunchedJim(x,y))", "all x y.((Jake(x) & Jim(y) & MadeRuleRemarkAboutShirt(y,x)) -> Punched(x,y))", "all x y.((Jake(x) & Jim(y) & RustRemark(y,x)) -> PunchedJim(x,y))", "all x y.((Jake(x) & Jim(y) & MadeRuleRemark(x,y)) -> PunchedJim(x,y))", "all x y.((Jake(x) & Jim(y) & RustRemark(y)) -> PunchedJim(x,y))", "all x y z.((Jake(x) & Jim(y) & RustRemark(z) & JakeShirt(z)) -> Punched(x,y,z))", "all x y.((Jake(x) & Jim(y) & RustRemark(x,y)) -> PunchedJim(x,y))", "all x y z.((Jake(x) & Jim(y) & RustRemark(z) & JakesShirt(z)) -> Punched(x,y,z))", "all x y.((Jake(x) & Jim(y) & MadeRuleRemarkAbout(x,y)) -> Punched(x,y))"]}
{"id": "enwn_validation_342", "nl": "Jake lost his temper and hurt Jim over a rude remark.", "fol": "", "prediction": ["all x y.((Jake(x) & Jim(y)) -> (LostTemperature(x,y) & Hurts(x,y)))", "all x.((Jake(x) & LostTemptation(x) & IrresponsibleRemark(x)) -> IrresponsibleRemark(x))", "all x y.((Jake(x) & Jim(y)) -> (LostTemperature(x,y) & IrresponsibleRemark(x,y)))", "all x.((Jake(x) & LostTemper(x) & IrresponsibleRemark(x)) -> IrresponsibleRemark(x))", "all x.((Jake(x) & LostTemperature(x) & IrresponsibleRemark(x)) -> IrresponsibleRemark(x))", "all x y.((Jake(x) & Jim(y)) -> (LoseTemper(x,y) & Hurts(x,y)))", "all x y.((Jake(x) & Jim(y)) -> (LostTemperature(x,y) & HurtsOverRuleRemark(x,y)))", "all x.((Jake(x) & LostTemper(x) & HurtsJim(x)) -> RustRemark(x))", "all x y.((Jake(x) & Jim(y)) -> (LosesTemperament(x,y) & Hurts(x,y)))", "all x.((Jake(x) & LostTemptation(x) & HurtsJim(x)) -> RustRemark(x))", "all x y.((Jake(x) & Jim(y)) -> (LossTemper(x,y) & Hurts(x,y)))", "all x y.((Jake(x) & Jim(y)) -> (LoseTemper(x,y) & Hurt(x,y)))", "all x.((Jake(x) & LostTemperature(x) & HurtsJim(x)) -> RustRemark(x))", "all x y.((Jake(x) & Jim(y)) -> (LoseTemper(x,y) & HurtsOverRuleRemark(x,y)))", "all x y z.((Jake(x) & Jim(y) & RustRemark(z)) -> (LostTemperature(x,y) & Hurts(x,z)))", "all x y z.((Jake(x) & Jim(y) & RustRemark(z)) -> (LostTemperature(x,z) & Hurts(x,y)))"]}
{"id": "enwn_validation_343", "nl": "Jake should have controlled his emotions and not hurt Jim.", "fol": "", "prediction": ["all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -Harmed(x,y)))", "all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -HasIllness(x,y)))", "all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -Hurts(x,y)))", "all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -HasEmotions(x,y)))", "all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -Harms(x,y)))", "all x.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -HasIllness(x,y)))", "all x.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -Harmed(x,y)))", "all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -Hints(x,y)))", "all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -HasHint(x,y)))", "all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -Harmed(x,y)))", "all x.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -Hurts(x,y)))", "all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -Harmful(x,y)))", "all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -HasHasHasHasHasHasHasHasEmotions(x,y)))", "all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -HasHasHasHasHasHasHasHasHasEmotions(x,y)))", "all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -HasHasHasHasHasHasHasHasHasHasHasHasEmotions(x,y)))", "all x y.((Jake(x) & Jim(y)) -> (ControlledEmotions(x,y) & -HasHasHasHasHasHasHasEmotions(x,y)))"]}
{"id": "enwn_validation_344", "nl": "Henry moved his golf ball out of the rough.", "fol": "", "prediction": ["all x y.((Henry(x) & GolfBall(y)) -> MovedOutOfRough(x,y))", "all x y z.((Henry(x) & GolfBall(y) & Rough(z)) -> MovedOutOf(x,y,z))", "all x.((Henry(x) & GolfBall(y)) -> MovedOutOfRough(x,y))", "all x.((Henry(x) & GolfBall(x)) -> MovedOutOfRough(x))", "all x y z.((Henry(x) & GolfBall(y) & Rough(z)) -> MovedOut(x,y,z))", "all x y.((Henry(x) & GolfBall(y) & OutOfRough(x,y)) -> MovedOutOfRough(x,y))", "all x y.((Henry(x) & GolfBall(y)) -> MovesOutOfRough(x,y))", "all x y z.((Henry(x) & GolfBall(y) & Rough(z)) -> MovesOutOf(x,y,z))", "all x.(Henry(x) -> MovedGolfBallOutOfRough(x))", "all x y.((Henry(x) & Ball(y)) -> MovedOutOfRough(x,y))", "all x y.((GolfBall(x) & Henry(y)) -> MovedOutOfRough(x,y))", "all x y.((GolfBall(x) & Henry(y)) -> MovedOutOfRough(y,x))", "all x y.((Honey(x) & GolfBall(y)) -> MovedOutOfRough(x,y))", "all x.((Henry(x) & Ball(y)) -> MovedOutOfRough(x,y))", "all x y z.((Henry(x) & GolfBall(y) & Rough(z)) -> MovedOutOfRough(x,y,z))", "all x y.((Honny(x) & GolfBall(y)) -> MovedOutOfRough(x,y))"]}
{"id": "enwn_validation_345", "nl": "Henry didn't take a penalty stroke or tell anyone when he was moving his ball.", "fol": "", "prediction": ["all x.(Henry(x) -> (-TakesPenaltyStoke(x) & -TellsAnyoneWhenMovingBall(x)))", "all x y.((Henry(x) & Ball(y)) -> (-TakesPenaltyStoke(x,y) & -TellsAnyone(x,y)))", "all x.(Henry(x) -> (-TakesPenaltyStoke(x) & -TellsAnyone(x)))", "all x y.((Henry(x) & Ball(y)) -> (-TakesPenaltyStoke(x,y) & -Tells(x,y)))", "all x y.((Henry(x) & Ball(y)) -> (-TakesPenaltyStoke(x,y) | TellsNoone(x,y)))", "all x.(Henry(x) -> (-TakesPenaltyStroke(x) & -TellsAnyoneWhenMovingBall(x)))", "all x y.((Henry(x) & Ball(y)) -> (-TakesPenaltyStoke(x,y) | TellsNoOne(x,y)))", "all x y.((Henry(x) & Ball(y)) -> (-TakesPenaltyStoke(x,y) & -SellsTo(x,y)))", "all x.((Henry(x) & -PenaltyShot(x)) -> (-TakesPenaltyShot(x) & -TellsAnyoneWhenMovingBall(x)))", "all x.(Henry(x) -> (-TakesPenaltyStoke(x) & -TellsNoOneWhenMovingBall(x)))", "all x y.((Henry(x) & Ball(y)) -> (-TakesPenaltyStoke(x,y) & -TellsAnyoneWhenMoving(x,y)))", "all x y.((Henry(x) & Ball(y)) -> (-TakesPenaltyStoke(x,y) | TellsAnyone(x,y)))", "all x y.((Henry(x) & Ball(y)) -> (-TakesPenaltyStoke(x,y) & -SellsToAnyone(x,y)))", "all x y.((Henry(x) & Ball(y)) -> (-TakesPenaltyStoke(x,y) & -TellsToOther(x,y)))", "all x.((Henry(x) & -PenaltyShot(x)) -> (-TakesPenaltyShot(x) & -TellsAnyone(x)))", "all x y.((Henry(x) & Ball(y)) -> (-TakesPenaltyStoke(x,y) & -ShowsToOthers(x,y)))"]}
{"id": "enwn_validation_346", "nl": "In golf, if you move your ball without telling anyone or taking a penalty stroke, you cheat.", "fol": "", "prediction": ["all x.((Golf(x) & MovesBall(x) & -TellsAnyone(x) & TakesPenaltyStroke(x)) -> Cheats(x))", "all x.((Golf(x) & MovesBall(x) & -(TellsAnyone(x) | TakesPenaltyStroke(x)))) -> Cheats(x))", "all x y.((Golf(x) & Ball(y) & MovesWithoutSigningOrPenaltyStroke(x,y)) -> Cheats(x))", "all x.((Golf(x) & MovesBall(x) & -TellsAnyone(x) & TakesPenaltySstroke(x)) -> Cheats(x))", "all x.((Golf(x) & MovesBall(x) & -TellsAnyone(x) & TakesPenaltyStroke(x)) -> Cheats(x))", "all x.((Golf(x) & MovesBall(x) & -TellsAnyone(x) & -TakesPenaltyStroke(x)) -> Cheats(x))", "all x.((Golf(x) & MovesBall(x) & -(TellsAnyone(x) | TakesPenaltyStroke(x)))) -> Cheats(x))", "all x.((Golf(x) & MovesBall(x) & -(TellsAnyone(x) | TakesPenaltyStroke(x))) -> Cheats(x))", "all x y.((Golf(x) & Ball(y) & Moves(x,y)) -> Cheats(x))", "all x.((Golf(x) & MovesBall(x) & -(TellsAnyone(x) | TakesPenaltySstroke(x))) -> Cheats(x))", "all x.((Golf(x) & MoveBall(x) & -TellAnyone(x) & TakePenaltyStroke(x)) -> Cheats(x))", "all x.((Golf(x) & MovesBallWithoutSigningOrPenaltyStroke(x)) -> Cheats(x))", "all x.((Golf(x) & MovesBall(x) & -TellsAnyone(x) & -TakesPenaltySstroke(x)) -> Cheats(x))", "all x.((Golf(x) & MovesBall(x) & -TellsAnyone(x) & -TakesPenaltyStroke(x)) -> Cheats(x))", "all x y.((Golf(x) & Ball(y) & MovesWithoutSigning(x,y)) -> Cheats(x))", "all x.((Golf(x) & MovesBall(x) & -(TellsAnyone(x) | TakesPenaltySstroke(x)))) -> Cheats(x))"]}
{"id": "enwn_validation_347", "nl": "Cheating in a game is disrespectful to the other players.", "fol": "", "prediction": ["all x y.((Game(x) & Player(y)) -> DisrespectfulTo(x,y))", "all x y.((Game(x) & Player(y)) -> Disrespectful(x,y))", "all x y.((Game(x) & Player(y) & CheatingIn(x,y)) -> DisrespectfulTo(x,y))", "all x y z.((Game(x) & Player(y) & Player(z) & CheatingIn(x,y,z)) -> DisrespectfulTo(x,y,z))", "all x.((Game(x) & CheatingIn(x)) -> DisrespectfulToOtherPlayers(x))", "all x y.((Game(x) & Player(y) & CheatingIn(x,y)) -> Disrespectful(x,y))", "all x.((Game(x) & Cheating(x)) -> DisrespectfulToOtherPlayers(x))", "all x y.((Game(x) & Player(y) & CheatingIn(x,y)) -> DisrespectfulToOthers(x,y))", "all x y z.((Game(x) & Player(y) & Player(z)) -> Disrespectful(x,y,z))", "all x y z.((Game(x) & Player(y) & Player(z)) -> DisrespectfulTo(x,y,z))", "all x.((Game(x) & CheatingIn(x)) -> DisrespectfulToOthers(x))", "all x y.((Game(x) & Player(y) & Cheating(x,y)) -> DisrespectfulTo(x,y))", "all x y z.((Game(x) & Player(y) & Player(z) & CheatingIn(x,y,z)) -> DisrespectfulTo(y,z))", "all x.((Game(x) & Cheating(x)) -> DisrespectfulToOthers(x))", "all x y.((Game(x) & Player(y) & CheatingIn(x,y)) -> DisrespectfulToOtherPlayers(x,y))", "all x y.((Game(x) & CheatingIn(x,y)) -> DisrespectfulToOtherPlayers(y))"]}
{"id": "enwn_validation_348", "nl": "Henry moved his golf ball out of the rough without telling anyone or taking a penalty stroke.", "fol": "", "prediction": ["all x y.((Henry(x) & GolfBall(y)) -> MovedOutOfRough(x,y))", "all x y z.((Henry(x) & GolfBall(y) & Rough(z)) -> MovedOutOf(x,y,z))", "all x y.((Henry(x) & GolfBall(y)) -> MovesOutOfRough(x,y))", "all x.((Henry(x) & GolfBall(x)) -> MovedOutOfRough(x))", "all x.((Henry(x) & GolfBall(y)) -> MovedOutOfRough(x,y))", "all x y z.((Henry(x) & GolfBall(y) & Rough(z)) -> MovesOutOf(x,y,z))", "all x y.((Henry(x) & GolfBall(y)) -> (MovedOutOfRough(x,y) & -Tells(x,y) & -TakesPenaltyStroke(x,y)))", "all x y.((Henry(x) & GolfBall(y)) -> (MovedOutOfRough(x,y) & -Tells(x,y) & -TakesPenaltySstroke(x,y)))", "all x y.((Henry(x) & GolfBall(y)) -> (MovedOutOfRough(x,y) & -TellsAnyone(x) & -TakesPenaltySstroke(x)))", "all x y z.((Henry(x) & GolfBall(y) & Rough(z)) -> MovedOut(x,y,z))", "all x y.((Henry(x) & GolfBall(y)) -> (MovedOutOfRough(x,y) & -TellsAnyone(x) & -TakesPenaltyStroke(x)))", "all x y.((Henry(x) & GolfBall(y)) -> (MovedOutOfRough(x,y) & -Tells(x,y) & -TakesPenaltyShot(x,y)))", "all x y.((Henry(x) & GolfBall(y)) -> (MovedOutOfRough(x,y) & -Tells(x,y) & -TakesPenaltySstroke(x)))", "all x y.((Henry(x) & GolfBall(y)) -> (MovedOutOfRough(x,y) & -Tells(x,y) & -TakesPenaltyStroke(x,y)))", "all x y.((Henry(x) & GolfBall(y)) -> (MovedOutOfRough(x,y) & -TellsAnyone(x) & -TakesPenaltyShot(x)))", "all x y.((Henry(x) & GolfBall(y)) -> (MovedOutOfRough(x,y) & -ToldAnyone(x) & -TakenPenaltyStroke(x)))"]}
{"id": "enwn_validation_349", "nl": "Henry cheated at golf.", "fol": "", "prediction": ["all x.(Henry(x) -> CheatedAtGolf(x))", "Henry CheatedAtGolf(Henry)", "all x.((Henry(x) & Golf(y)) -> CheatedAt(x,y))", "all x y.((Henry(x) & Golf(y)) -> CheatedAt(x,y))", "all x.((Henry(x) & CheatedAtGolf(x)) -> CheatedAtGolf(x))", "all x.((Henry(x) & Golf(y)) -> Cheated(x,y))", "all x.((Henry(x) & Golf(x)) -> CheatedAt(x,y))", "all x y.((Henry(x) & Golf(y)) -> Cheated(x,y))", "all x.((Henry(x) & Golf(x)) -> Cheated(x))", "all x.((Henry(x) & Golf(x)) -> CheatedAt(x))", "((Henry(Henry) & Golf(Henry)) -> CheatedAt(Henry,Henry))", "All x.(Henry(x) -> CheatedAtGolf(x))", "((Henry(Henry) & Golf(Henry)) -> CheatedAt(Henry))", "(CheatedAtGolf(Henry) | CheatedAtGolf(Henry)))", "(CheatedAtGolf(Henry) -> CheatedAtGolf(Henry))", "(cheatedAtGolf(Henry) -> CheatedAtGolf(Henry))"]}
{"id": "enwn_validation_350", "nl": "Henry disrespected the other golf players.", "fol": "", "prediction": ["all x y.((Henry(x) & GolfPlayer(y)) -> Disrespects(x,y))", "all x.((Henry(x) & GolfPlayer(y)) -> Disrespects(x,y))", "all x y z.((Henry(x) & GolfPlayer(y) & GolfPlayer(z)) -> Disrespects(x,y,z))", "all x y.((Henry(x) & GolfPlayer(y)) -> Disrespectful(x,y))", "all x.(Henry(x) -> DisrespectsOtherGolfPlayers(x))", "all x y.((Henry(x) & GolfPlayer(y)) -> Disrespected(x,y))", "all x.((Henry(x) & GolfPlayer(y)) -> Disrespectful(x,y))", "all x y z.((Henry(x) & GolfPlayer(y) & GolfPlayer(z)) -> Disrespected(x,y,z))", "all x y z.((Henry(x) & GolfPlayer(y) & GolfPlayer(z) & Disrespects(x,y,z)) -> Disrespects(x,y,z))", "all x y z.((Henry(x) & GolfPlayer(y) & GolfPlayer(z)) -> Disrespectful(x,y,z))", "all x.((Henry(x) & GolfPlayer(y)) -> Disrespected(x,y))", "all x y z.((Henry(x) & GolfPlayer(y) & GolfPlayer(z)) -> Disrespects(x,y))", "all x y z.((Henry(x) & GolfPlayer(y) & GolfPlayer(z) & Disrespects(x,y,z)) -> Disrespects(x,y))", "all x y.((GolfPlayer(x) & Henry(y)) -> Disrespects(y,x))", "all x y z.((Henry(x) & GolfPlayer(y) & GolfPlayer(z) & Disrespects(x,y)) -> Disrespects(x,z))", "all x y z.((Henry(x) & GolfPlayer(y) & GolfPlayer(z) & Disrespects(x,z)) -> Disrespects(x,y,z))"]}
{"id": "enwn_validation_351", "nl": "Oswald realized his stocks would soon be worthless, putting him in debt.", "fol": "", "prediction": ["all x.((Oswald(x) & StocksWorthless(x)) -> InDebt(x))", "all x.(Oswald(x) -> (RealizedStocksWorthless(x) & InDebt(x)))", "Oswald realized his stocks would soon be worthless, putting him in debt.", "all x.((Stocks(x) & Worthless(x)) -> InDebt(x))", "all x y z.((Oswald(x) & Stocks(y) & Debt(z)) -> (Realized(x,y) & Worthless(y) & InDebt(x,z)))", "all x.((Oswald(x) & Stocks(x)) -> (Worthless(x) & InDebt(x)))", "all x y.((Oswald(x) & Stocks(y)) -> (RealizedWorthless(x,y) & InDebt(x,y)))", "all x y z.((Oswald(x) & Stocks(y) & Debt(z)) -> (RealizedWaitless(x,y) & InDebt(x,z)))", "all x.((Oswald(x) & Stocks(y)) -> (Worthless(y) & InDebt(x,y)))", "all x y z.((Oswald(x) & Stock(y) & Debt(z)) -> (Realized(x,y) & Worthless(y) & InDebt(x,z)))", "Oswald realized that his stocks would soon be worthless, putting him in debt.", "all x y z.((Oswald(x) & Stocks(y) & Debt(z)) -> (RealizedWorthless(x,y) & InDebt(x,z)))", "all x y.((Oswald(x) & Stocks(y)) -> (RealizedWorthless(x,y) & InDebt(x)))", "all x y.((Oswald(x) & Stocks(y)) -> (Realized(x,y) & Worthless(y) & InDebt(x)))", "all x.((Oswald(x) & Stocks(y)) -> (Worthless(y) & InDebt(x)))", "all x.((Oswald(x) & StocksWorthless(x)) -> Debt(x))"]}
{"id": "enwn_validation_352", "nl": "To avoid debt, Oswald sold his stocks to other people.", "fol": "", "prediction": ["all x y z.((Oswald(x) & Stock(y) & Person(z)) -> SoldTo(x,y,z))", "all x y.((Oswald(x) & Person(y)) -> SoldTo(x,y))", "all x y.((Oswald(x) & Stock(y)) -> SoldTo(x,y))", "all x y.((Oswald(x) & Person(y)) -> SoldStocksTo(x,y))", "all x y z.((Oswald(x) & Stocks(y) & Person(z)) -> SoldTo(x,y,z))", "all x y z.((Oswald(x) & Stock(y) & Person(z)) -> (SoldTo(x,y,z) & AvoidsDebt(x)))", "all x.((Oswald(x) & SellsStocks(x)) -> AvoidsDebt(x))", "all x y.((Oswald(x) & Person(y)) -> SoldStocks(x,y))", "all x y z.((Oswald(x) & Stock(y) & Person(z)) -> SellsTo(x,y,z))", "all x y z.((Oswald(x) & Stocks(y) & Debt(z)) -> SoldTo(x,y,z))", "all x y.((Oswald(x) & Stocks(y)) -> SoldTo(x,y))", "all x y z.((Oswald(x) & Stock(y) & Debt(z)) -> SoldTo(x,y,z))", "all x y z.((Oswald(x) & Stock(y) & Person(z)) -> (SoldTo(x,y,z) & AvoidsDebt(x,y)))", "all x y z.((Oswald(x) & Stocks(y) & People(z)) -> SoldTo(x,y,z))", "all x y z.((Oswald(x) & Stock(y) & People(z)) -> SoldTo(x,y,z))", "all x y z.((Oswald(x) & Stock(y) & Person(z)) -> SoldToAvoidDebt(x,y,z))"]}
{"id": "enwn_validation_353", "nl": "It is deceitful to sell something when it has no value.", "fol": "", "prediction": ["all x.((Sells(x) & -Value(x)) -> Deceitful(x))", "all x.((Sells(x) & NoValue(x)) -> Deceitful(x))", "all x y.((Sells(x,y) & -Value(y)) -> Deceitful(x))", "all x y.((Sells(x,y) & NoValue(y)) -> Deceitful(x))", "all x y.((Sell(x,y) & -Value(y)) -> Deceitful(x))", "all x y.((Sells(x) & -Value(y)) -> Deceitful(x))", "all x y.((Sell(x) & -Value(y)) -> Deceitful(x))", "all x.((Sells(x) & HasNoValue(x)) -> Deceitful(x))", "all x.((Sell(x) & -Value(x)) -> Deceitful(x))", "all x.((Sell(x) & NoValue(x)) -> Deceitful(x))", "all x y.((Sell(x,y) & NoValue(y)) -> Deceitful(x))", "all x y.((Sell(x) & NoValue(y)) -> Deceitful(x))", "all x y.((Sells(x,y) & -Value(x)) -> Deceitful(x))", "all x y.((Sell(x) & Product(y) & -Value(y)) -> Deceitful(x))", "all x y.((Sells(x) & NoValue(y)) -> Deceitful(x))", "all x y.((Sells(x,y) & -Value(y)) -> Deceitful(x,y))"]}
{"id": "enwn_validation_354", "nl": "You should not do deceitful things.", "fol": "", "prediction": ["all x.((DoDeceitfulThings(x) & -DoDeceitfulThings(x)) -> -DoDeceitfulThings(x))", "all x.((DoesDeceitfulThings(x) & -DoesDeceitfulThings(x)) -> -DoesDeceitfulThings(x))", "all x.((DoDeceitfulThings(x)) -> -DoDeceitfulThings(x))", "all x.(DeceitfulThings(x) -> -Do(x))", "all x.((DoDeceitfulThings(x) & -DoDeceitfulThings(x)) -> -(DoDeceitfulThings(x) & DoDeceitfulThings(x)))", "all x.((DoesDeceitfulThings(x)) -> -DoesDeceitfulThings(x))", "all x.((DoDeceitfulThings(x) & -DoDeceitfulThings(x)) -> -(DoDeceitfulThings(x) & DoDeceitfulThings(x))))", "all x.((DoDeceitfulThings(x) & -DeceitfulThings(x)) -> -DeceitfulThings(x))", "all x.(DeceitfulThings(x) -> -Do(x,y))", "all x.(DoesDeceitfulThings(x) -> -DoesDeceitfulThings(x))", "all x.(DeceitfulThing(x) -> -Do(x,y))", "all x.((DoDeceitfulThings(x)) -> -(DoDeceitfulThings(x) | DoDeceitfulThings(x))))", "all x.((DoDeceitfulThings(x) & -DoDeceitfulThings(x)) -> -(DoDeceitfulThings(x) | DoDeceitfulThings(x))))", "all x.((DoDeceitfulThings(x) & -DoDeceitfulThings(x)) -> -DoDeceitfulThings(x))", "all x.(DeceitfulThing(x) -> -Do(x))", "all x.((DoDeceitfulThings(x) & -DoDeceitfulThings(x)) -> -DeceitfulThings(x))"]}
{"id": "enwn_validation_355", "nl": "Oswald sold stocks that he knew had no value to other people.", "fol": "", "prediction": ["all x y z.((Oswald(x) & Stock(y) & Person(z)) -> Sold(x,y,z))", "all x y.((Oswald(x) & Stock(y)) -> SoldTo(x,y))", "all x y.((Oswald(x) & Stock(y)) -> (Sold(x,y) & -ValueToOthers(y)))", "all x y z.((Oswald(x) & Stock(y) & Person(z)) -> SoldTo(x,y,z))", "Oswald sold stocks he knew had no value to other people.", "all x y z.((Oswald(x) & Stock(y) & Person(z)) -> (Sold(x,y) & -Value(y,z)))", "all x y z.((Oswald(x) & Stock(y) & Person(z) & -Value(y,z)) -> Sold(x,y))", "all x y z.((Oswald(x) & Stock(y) & Person(z) & -Value(y,z)) -> SoldTo(x,y,z))", "all x y.((Oswald(x) & Stock(y)) -> Sold(x,y))", "all x y z.((Oswald(x) & Stock(y) & Person(z)) -> (SoldTo(x,y,z) & -ValueTo(y,z)))", "all x y z.((Oswald(x) & Stock(y) & Person(z) & -Value(y,z)) -> Sold(x,y,z))", "all x y z.((Oswald(x) & Stock(y) & Person(z)) -> (Sold(x,y) & -ValueTo(y,z)))", "all x y z.((Oswald(x) & Stock(y) & Person(z)) -> (Sold(x,y) & KnowsNoValue(x,z)))", "all x y z.((Oswald(x) & Stock(y) & Person(z)) -> Sells(x,y,z))", "all x y z.((Oswald(x) & Stock(y) & Person(z) & -Value(y)) -> Sold(x,y,z))", "all x y.((Stock(x) & Person(y)) -> Sold(x,y))"]}
{"id": "enwn_validation_356", "nl": "If you know something has no value, you should not sell that thing.", "fol": "", "prediction": ["all x.((KnowsNoValue(x) & -Sells(x)) -> -Sells(x))", "all x.((Knows(x) & NoValue(x)) -> -Sell(x))", "all x.((KnowsNoValue(x) & -Sells(x)) -> -Sell(x))", "all x.((Knows(x) & HasNoValue(x)) -> -Sell(x))", "all x.((KnowsNoValue(x) & -Sell(x)) -> -Sell(x))", "all x.((Knows(x) & -Value(x)) -> -Sell(x))", "all x.((Knows(x,y) & NoValue(y)) -> -Sell(x,y))", "all x.((Knows(x,y) & -Value(y)) -> -Sell(x,y))", "all x.((KnowsNoValue(x) & -SellsThing(x)) -> -Sells(x))", "all x.(NoValue(x) -> -Sell(x))", "all x.((Knows(x) & HasNoValue(x)) -> -Sells(x))", "all x.((Knows(x,y) & NothingValue(y)) -> -Sell(x,y))", "all x.((Knows(x) & -Value(x)) -> -Sells(x))", "all x.((KnowsNoValue(x) & Thing(x)) -> -Sell(x))", "all x.((Knows(x,y) & HasNoValue(x)) -> -Sell(x,y))", "all x.((Knows(x) & NoValue(x)) -> -Sells(x))"]}
{"id": "enwn_validation_357", "nl": "Oswald should not have sold those stocks.", "fol": "", "prediction": ["Oswald should not have sold those stocks.", "all x.((Oswald(x) & -SoldStocks(x)) -> -SoldStocks(x))", "all x.((Oswald(x) & Stock(y)) -> -Sold(x,y))", "Oswald should not have sold these stocks.", "all x.((Oswald(x) & Stocks(y)) -> -Sold(x,y))", "all x.((Oswald(x) & Stock(y) & -Sold(x,y)) -> -Sold(x,y))", "all x.(Oswald(x) -> -SoldStocks(x))", "all x.((Oswald(x) & Stocks(y) & -Sold(x,y)) -> -Sold(x,y))", "all x.((Oswald(x) & -SoldStories(x)) -> -SoldStories(x))", "all x.((Oswald(x) & -SoldStocks(x,y)) -> -SoldStocks(x,y))", "all x.((Oswald(x) & Stock(y) & Stock(z)) -> -Sold(x,y,z))", "all x.((Oswald(x) & SellsStocks(x)) -> -SoldStocks(x))", "all x.((Oswald(x) & -SoldStocks(x)) -> -SoldStories(x))", "All x.(Oswald(x) -> -SoldStocks(x))", "all x.((Oswald(x) & -SoldStocks(x)) -> -SoldStocks(x,y))", "all x.((Oswald(x) & Stock(y)) -> -ShouldSell(x,y))"]}
{"id": "enwn_validation_358", "nl": "Jeff took candy from a child in the park.", "fol": "", "prediction": ["all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesCandyFrom(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesCandy(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakenFrom(x,y,z))", "all x y.((Jeff(x) & Child(y)) -> TakesCandy(x,y))", "all x y.((Jeff(x) & Child(y)) -> TakesCandyFrom(x,y))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> Takes(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesFrom(x,y,z))", "all x y.((Jeff(x) & Child(y)) -> TakenFrom(x,y))", "all x y.((Jeff(x) & Child(y) & Park(z)) -> TakesCandyFrom(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesCandyIn(x,y,z))", "all x y.((Jeff(x) & Child(y)) -> TakesCandyInPark(x,y))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesChocolateFrom(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesCardonnaFrom(x,y,z))", "all x y.((Jeff(x) & Child(y) & Park(z)) -> TakesCandy(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesCondit(x,y,z))", "all x y.((Jeff(x) & Child(y) & Park(y)) -> TakesCandyFrom(x,y))"]}
{"id": "enwn_validation_359", "nl": "Children are often considered helpless due to their age.", "fol": "", "prediction": ["all x.((Child(x) & Age(x)) -> Helpless(x))", "all x y.((Child(x) & Age(y)) -> Helpless(x,y))", "all x y.((Child(x) & Age(y)) -> Helpless(x))", "all x y z.((Child(x) & Age(y) & Age(z)) -> Helpless(x,y,z))", "all x.((Child(x) & Age(x)) -> HelplessDueToAge(x))", "all x.(Child(x) -> HelplessDueToAge(x))", "all x.(Child(x) & Age(x)) -> Helpless(x))", "all x y z.((Child(x) & Age(y) & Age(z)) -> Helpless(x))", "all x y.((Child(x) & Age(y)) -> HelplessDueToAge(x,y))", "all x.((Child(x) & Age(x)) -> OftenHelpless(x))", "all x.((Child(x) & HasAge(x)) -> Helpless(x))", "all x.(Child(x) -> HelplessDueToAge(x))", "all x y.((Child(x) & Age(y)) -> HelplessDueTo(x,y))", "all x y z.((Child(x) & Age(y) & Age(z)) -> Helpless(x,y))", "all x.((Child(x) & Aging(x)) -> Helpless(x))", "all x.((Child(x) & Age(x,y)) -> Helpless(x))"]}
{"id": "enwn_validation_360", "nl": "Stealing from the helpless is taking advantage of them.", "fol": "", "prediction": ["all x y.((StealFromHelpless(x) & Helpless(y)) -> TakesAdvantageOf(x,y))", "all x y.((Helpless(x) & Helpless(y)) -> TakesAdvantageOf(x,y))", "all x y.((StealFromHelpless(x) & Helpless(y)) -> TakesAdequacyOf(x,y))", "all x.(StealFromHelpless(x) -> TakesAdequacyOfHelpless(x))", "all x.(StealingFromHelpless(x) -> TakesAdequacyOfHelpless(x))", "all x.(StealFromHelpless(x) -> TakesAdvantageOfHelpless(x))", "all x y.((Helpless(x) & Helpless(y)) -> TakesAdequacyOf(x,y))", "all x y.((StealingFromHelpless(x) & Helpless(y)) -> TakesAdvantageOf(x,y))", "all x y.((StealingFromHelpless(x) & Helpless(y)) -> TakesAdequacyOf(x,y))", "all x.(StealingFromHelpless(x) -> TakesAdvantageOfHelpless(x))", "all x y.((Helpless(x) & Helpless(y)) -> TakesAvailmentOf(x,y))", "all x y.((StealFromHelpless(x) & Helpless(y)) -> TakesAvailmentOf(x,y))", "all x.(StealingFromHelpless(x) -> TakesAvormentOfHelpless(x))", "all x y.((StealFromHelpless(x) & Helpless(y)) -> TakesAccountOf(x,y))", "all x.(StealFromHelpless(x) -> TakesAvormentOfHelpless(x))", "all x y.((StealFromHelpless(x) & Helpless(y)) -> TakesAvormentOf(x,y))"]}
{"id": "enwn_validation_361", "nl": "Taking advantage of someone is considered being cruel.", "fol": "", "prediction": ["all x.(TakesAdvantageOf(x,y) -> Cruel(x))", "all x.((TakesAdvantageOf(x,y) & Person(y)) -> Cruel(x))", "all x.(TakesAdvantageOfPerson(x) -> Cruel(x))", "all x y.((TakesAdvantageOf(x,y) & Person(y)) -> Cruel(x))", "all x y.((Person(x) & TakesAdvantageOf(x,y)) -> Cruel(x))", "all x.(TakingAdvantageOf(x,y) -> Cruel(x))", "all x.(TakesAdvantageOf(x,y) -> Cruel(y))", "all x.((TakesAdvantageOfPerson(x) & Cruel(x)) -> Cruel(x))", "all x.(TakesAdvantageOf(x) -> Cruel(x))", "all x.(TakesAdvantageOf(x,Person) -> Cruel(x))", "all x.((TakesAdvantageOf(x) & Person(x)) -> Cruel(x))", "all x.(TakesAdvantageOfSomeone(x) -> Cruel(x))", "all x.(TakingAdvantageOfPerson(x) -> Cruel(x))", "all x.((TakingAdvantageOf(x) & Person(x)) -> Cruel(x))", "all x.((TakesAdvantageOf(x,y) & Person(y)) -> Cruel(x,y))", "all x.(TakeAdvantageOf(x,y) -> Cruel(x))"]}
{"id": "enwn_validation_362", "nl": "Jeff took candy from a helpless child in the park.", "fol": "", "prediction": ["all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesCandyFrom(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesCandy(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Park(z) & Helpless(y)) -> TakesCandy(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesFrom(x,y,z))", "all x y.((Jeff(x) & Child(y) & Helpless(y)) -> TakesCandy(x,y))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakenFrom(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Park(z) & Helpless(y)) -> TakesCandyFrom(x,y,z))", "all x y.((Jeff(x) & HelplessChild(y)) -> TakesCandy(x,y))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> Takes(x,y,z))", "all x y z.((Jeff(x) & HelplessChild(y) & Park(z)) -> TakesCandy(x,y,z))", "all x y.((Jeff(x) & Child(y)) -> TakesCandy(x,y))", "all x y z.((Jeff(x) & HelplessChild(y) & Park(z)) -> TakesCandyFrom(x,y,z))", "all x y.((Jeff(x) & Child(y)) -> TakesCandyFrom(x,y))", "all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesFromHelpless(x,y,z))", "all x y z.((Jeff(x) & HelplessChild(y) & Park(z)) -> TakesFrom(x,y,z))", "all x y.((Jeff(x) & Child(y) & Helpless(y)) -> TakesCandyInPark(x,y))"]}
{"id": "enwn_validation_363", "nl": "Stealing from the helpless is considered being cruel.", "fol": "", "prediction": ["all x.(StealingFromHelpless(x) -> Cruel(x))", "all x.(StealFromHelpless(x) -> Cruel(x))", "all x y.((StealingFromHelpless(x) & Helpless(y)) -> Cruel(x))", "all x y.((StealFromHelpless(x) & Helpless(y)) -> Cruel(x))", "all x y.((Stealing(x) & Helpless(y)) -> Cruel(x))", "all x.(StolenFromHelpless(x) -> Cruel(x))", "all x.(Stealing(x) -> Cruel(x))", "all x.((StealingFromHelpless(x)) -> Cruel(x))", "all x.((StealingFromHelpless(x) & Cruel(x)) -> Cruel(x))", "all x.(StealingFromTheHelpless(x) -> Cruel(x))", "all x.(StalingFromHelpless(x) -> Cruel(x))", "all x y.((Stealing(x) & Helpless(y)) -> Cruel(x,y))", "all x y.((StealingFromHelpless(x) & Helpless(y)) -> Cruel(x,y))", "all x y.((StealFromHelpless(x) & Helpless(y)) -> Cruel(x,y))", "all x.(StoleFromHelpless(x) -> Cruel(x))", "all x.((StealFromHelpless(x) & Cruel(x)) -> StealingFromHelpless(x))"]}
{"id": "enwn_validation_364", "nl": "It was cruel of Jeff to steal candy from the child.", "fol": "", "prediction": ["all x y z.((Jeff(x) & Child(y) & Candy(z)) -> CruelToSteal(x,y,z))", "all x y.((Child(x) & Jeff(y)) -> StealCandy(y,x))", "all x y z.((Child(x) & Jeff(y) & Child(z) & StealCandy(y,z)) -> Cruel(y,z))", "all x y z.((Jeff(x) & Child(y) & Candy(z)) -> CruelToStole(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Candy(z)) -> CruelToStealFrom(x,y,z))", "all x y z.((Jeff(x) & Child(y) & Candy(z)) -> CruelToStolen(x,y,z))", "all x y z.((Child(x) & Jeff(y) & Child(z) & StealCandy(y,z)) -> Cruel(y,x))", "all x y z.((Child(x) & Jeff(y) & Child(z) & StealCandy(y,z)) -> Cruel(y))", "all x y.((Child(x) & Jeff(y)) -> CruelToStole(y,x))", "all x y.((Child(x) & Jeff(y)) -> StealCandyFrom(y,x))", "all x y z.((Child(x) & Jeff(y) & Child(z) & StealCandy(y,z)) -> Cruel(y,x,z))", "all x y z.((Child(x) & Jeff(y) & Child(z)) -> StealCandy(y,z))", "all x y.((Child(x) & Jeff(y)) -> CruelToSteal(y,x))", "all x y z.((Jeff(x) & Child(y) & Candy(z)) -> CruelToStole(x,z))", "all x y z.((Child(x) & Jeff(y) & Child(z) & StealCandy(x,y,z)) -> Cruel(y,z))", "all x y z.((Child(x) & Jeff(y) & Child(z)) -> StealCandy(x,y,z))"]}
{"id": "enwn_validation_365", "nl": "Lois let her dog poop on her neighbors lawn.", "fol": "", "prediction": ["all x y.((Lois(x) & Dog(y)) -> LetsPoopOnNeighborsLawn(x,y))", "all x y.((Dog(x) & Neighbor(y)) -> LetsPoopOn(x,y))", "all x y.((Dog(x) & Neighborhood(y)) -> LetsPoopOn(x,y))", "all x y z.((Lois(x) & Dog(y) & NeighborsLawn(z)) -> LetsPoopOn(x,y,z))", "all x y z.((Lois(x) & Dog(y) & Neighbor(z)) -> LetsPoopOn(x,y,z))", "all x y.((Lois(x) & Dog(y)) -> LetsPoop(x,y))", "all x y.((Lois(x) & Dog(y)) -> LetPoopOnNeighborsLawn(x,y))", "all x y z.((Lois(x) & Dog(y) & NeighborsLawn(z)) -> LetsPoop(x,y,z))", "all x y.((Dog(x) & Neighbor(y)) -> LetsPoop(x,y))", "all x y z.((Dog(x) & Neighbor(y) & Lawn(z)) -> LetsPoopOn(x,y,z))", "all x y z.((Lois(x) & Dog(y) & Neighbor(z)) -> LetsPoop(x,y,z))", "all x.((Lois(x) & Dog(y)) -> LetsPoopOnNeighborsLawn(x,y))", "all x y z.((Dog(x) & Neighborhood(y) & Lois(z)) -> LetsPoopOn(x,y,z))", "all x y.((Dog(x) & NeighborsLawn(y)) -> LetsPoopOn(x,y))", "all x y z.((Lois(x) & Dog(y) & Neighborhood(z)) -> LetsPoopOn(x,y,z))", "all x y.((Dog(x) & Neighborhood(y)) -> LetsPoop(x,y))"]}
{"id": "enwn_validation_366", "nl": "Lois never picks up her dog's poop because she thinks it's gross.", "fol": "", "prediction": ["all x y.((Dog(x) & Lois(y)) -> -PicksUpPoop(y,x))", "all x y.((Dog(x) & Lois(y) & PicksUpPoop(y,x)) -> Gross(y))", "all x y.((Lois(x) & Dog(y)) -> -PicksUpPoop(x,y))", "all x y.((DogPoop(x) & Lois(y)) -> -PicksUp(y,x))", "all x y.((Dog(x) & Lois(y)) -> NeverPicksUpPoop(y,x))", "all x y.((Dog(x) & Lois(y)) -> (NeverPicksUpPoop(y,x) & ThinksGroovy(y,x)))", "all x y.((Dog(x) & Lois(y)) -> -PicksUpPoop(x,y))", "all x y.((Dog(x) & Lois(y)) -> (NeverPicksUpPoop(y,x) & ThinksGroovy(y)))", "all x.((Lois(x) & DogPoop(x) & ThinksGroovy(x)) -> -PicksUp(x,y))", "all x y.((Dog(x) & Lois(y)) -> (-PicksUpPoop(y,x) & ThinksGroovy(y,x)))", "all x.((Lois(x) & DogPoop(x)) -> -PicksUp(x,y))", "all x y.((Dog(x) & Lois(y)) -> (-PicksUpPoop(y,x) & ThinksGroovy(y)))", "all x y.((Dog(x) & Lois(y)) -> (NeverPicksUpPoop(y,x) & ThinksGroove(y)))", "all x y.((Dog(x) & Lois(y)) -> (NeverpicksUpPoop(y,x) & ThinksGroovy(y,x)))", "all x y.((Dog(x) & Lois(y)) -> (NeverPicksUpPoop(y,x) & ThinksGroove(y,x)))", "all x.((Dog(x) & PicksUpPoop(x)) -> Gross(x))"]}
{"id": "enwn_validation_367", "nl": "Leaving a mess requires someone else to clean it.", "fol": "", "prediction": ["all x y.((Lays(x,y) & Mess(y)) -> RequiresCleaning(x,y))", "all x y.((LaysMachine(x) & Person(y)) -> RequiresCleaning(y,x))", "all x y.((LaysMosh(x) & Person(y)) -> RequiresCleaning(y,x))", "all x y.((LaysMachine(x) & CleansMachine(y)) -> RequiresCleaning(x,y))", "all x y.((LaysMess(x) & Person(y)) -> RequiresCleaning(y,x))", "all x y.((LaysMachine(x) & Person(y)) -> RequiresCleaning(x,y))", "all x y.((LaysMask(x) & Person(y)) -> RequiresCleaning(y,x))", "all x.((LaysMachine(x) & RequiresCleaning(x)) -> RequiresCleaning(x))", "all x y.((LaysMachine(x) & CleansMachine(y)) -> RequiresAlternativeCleaning(x,y))", "all x y.((LaysMachine(x) & Person(y)) -> RequiresCleaning(y))", "all x y.((LaysMachine(x) & CleansMachine(y)) -> RequiresAnother(x,y))", "all x y.((LaysMess(x) & Person(y)) -> RequiresCleaning(x,y))", "all x y.((Lays(x,y) & Mess(y)) -> RequiresCleaning(y,x))", "all x y.((LaysMosh(x) & Person(y)) -> RequiresCleaning(x,y))", "all x.(LeavingMess(x) -> RequiresCleaning(x))", "all x.(LeavingMachine(x) -> RequiresCleaning(x))"]}
{"id": "enwn_validation_368", "nl": "Dog poop is a mess.", "fol": "", "prediction": ["all x.(DogPoop(x) -> Mess(x))", "all x.(DogPoop(x) -> Mesh(x))", "all x.(DogPoop(x) -> AMame(x))", "all x.(DogPoop(x) -> IsMess(x))", "all x.(DogPoop(x) -> Mess(x))", "all x.(DogPoop(x) -> a Mess(x))", "all x.(DogPoop(x) -> AMask(x))", "all x.(DogPoop(x) -> AMss(x))", "all x.(DogPoop(x) -> Chaos(x))", "all x.(DogPoop(x) -> AMoss(x))", "all x.(DogPoop(x) -> Dish(x))", "all x.(DogPoop(x) -> AMash(x))", "all x.(DogPoop(x) -> IsMammal(x))", "all x.(DogPoop(x) -> Meal(x))", "all x.(DogPoop(x) -> IsMesh(x))", "all x.(DogPoop(x) -> (Mach(x)))"]}
{"id": "enwn_validation_369", "nl": "It is inconsiderate to make someone else account for your responsibilities.", "fol": "", "prediction": ["all x.((Person(x) & AccountForResponsibilities(x)) -> Inconsiderate(x))", "all x.((IsInconsiderate(x) & MakesAnotherAccountForResponsibilities(x)) -> Inconsiderate(x))", "all x.((Person(x) & AccountsForResponsibilities(x)) -> Inconsiderate(x))", "all x.((Another(x) & AccountForResponsibilities(x)) -> Inconsiderate(x))", "all x.((MakesAnotherAccountForResponsibilities(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x y.((Inconsiderate(x) & Person(y)) -> AccountForResponsibilities(x,y))", "all x.(Inconsiderate(x) -> AccountForResponsibilities(x))", "all x.((MakesAnotherAccountForResponsibilities(x) & Inconsiderate(x)) -> AccountForResponsibilities(x))", "all x y.((Inconsiderate(x) & Person(y)) -> AccountsForResponsibilities(x,y))", "all x.(Inconsiderate(x) -> AccountForResponsibilities(x))", "all x y.((Inconsiderate(x) & Person(y)) -> AccountForResponsibilities(y,x))", "all x y.((Person(x) & Account(y)) -> Inconsiderate(x,y))", "all x.((MakesAnotherAccountForResponsibilities(x)) -> Inconsiderate(x))", "all x y.((Person(x) & Person(y)) -> Inconsiderate(x,y))", "all x y.((Person(x) & Account(y)) -> Inconsiderate(x))", "all x y.((Responsibility(x) & Person(y)) -> Inconsiderate(x,y))"]}
{"id": "enwn_validation_370", "nl": "Avoiding your responsibilities requires someone else to account for them.", "fol": "", "prediction": ["all x.(AvoidsResponsibilities(x) -> RequiresAccounting(x))", "all x y.((AvoidsResponsibilities(x) & Person(y)) -> AccountsForResponsibilities(y,x))", "all x y.((AvoidsResponsibilities(x) & Person(y)) -> RequiresAccountForResponsibilities(y,x))", "all x.((AvoidsResponsibilities(x) & AccountsForResponsibilities(x)) -> RequiresAnother(x))", "all x.((AvoidResponsibilities(x) & AccountForResponsibilities(x)) -> RequiresAccountForResponsibilities(x))", "all x y.((AvoidsResponsibilities(x) & Person(y)) -> RequiresAccountForResponsibilities(x,y))", "all x y.((AvoidsResponsibilities(x) & Person(y)) -> RequiresAccounting(y,x))", "all x.((AvoidsResponsibilities(x) & RequiresAccounting(x)) -> AccountsForResponsibilities(x))", "all x.((AvoidsResponsibilities(x) & RequiresAccounting(x)) -> RequiresAccounting(x))", "all x y.((AvoidsResponsibilities(x) & Person(y)) -> AccountsFor(y,x))", "all x y.((AvoidsResponsibilities(x) & Person(y)) -> AccountsForResponsibilities(x,y))", "all x.((AvoidsResponsibilities(x) & AccountsForResponsibilities(x)) -> RequiresAlternative(x))", "all x y.((AvoidsResponsibilities(x) & Person(y)) -> AccountForResponsibilities(y,x))", "all x y.((AvoidsResponsibilities(x) & AccountsForResponsibilities(y)) -> Requires(x,y))", "all x.((AvoidResponsibilities(x) & AccountForResponsibilities(x)) -> RequiresAnother(x))", "all x y.((AvoidsResponsibilities(x) & Person(y)) -> RequiresAccounting(x,y))"]}
{"id": "enwn_validation_371", "nl": "Lois did not pick up her dog's poop on the neighbors lawn.", "fol": "", "prediction": ["all x y.((Lois(x) & Dog(y)) -> -PicksUpPoopOnNeighborsLawn(x,y))", "all x y.((Lois(x) & Dog(y)) -> -PicksUpOnNeighborsLawn(x,y))", "all x y.((Lois(x) & Dog(y)) -> -PickupOnNeighborsLawn(x,y))", "all x y.((Lois(x) & Dog(y)) -> -PickUpPoopOnNeighborsLawn(x,y))", "all x.((Lois(x) & Dog(y)) -> -PicksUpPoopOnNeighborsLawn(x,y))", "all x y.((Lois(x) & Dog(y)) -> -PoopsOnNeighborsLawn(x,y))", "all x y z.((Lois(x) & Dog(y) & NeighborsLawn(z)) -> -PicksUpPoopOn(x,y,z))", "all x y.((Lois(x) & Dog(y)) -> -PicksUpPoopOnNeighborsLandscape(x,y))", "all x y z.((Lois(x) & DogPoop(y) & NeighborsLawn(z)) -> -PicksUpOn(x,y,z))", "all x y.((Lois(x) & Dog(y)) -> -PopsOnNeighborsLawn(x,y))", "all x.((Lois(x) & DogPoop(y)) -> -PicksUpOnNeighborsLawn(x,y))", "all x y z.((Lois(x) & Dog(y) & Yard(z)) -> -PicksUpPoopOn(x,y,z))", "all x y.((Lois(x) & Dog(y) & NeighborsLawn(x,y)) -> -PicksUpPoopOn(x,y))", "all x y z.((Lois(x) & Dog(y) & NeighborsLawn(z)) -> -PicksUpPoop(x,y,z))", "all x y z.((Lois(x) & Dog(y) & NeighborsLawn(z)) -> -PickUpPoopOn(x,y,z))", "all x y.((Lois(x) & Dog(y) & NeighborsLawn(x,y)) -> -PicksUpPoop(x,y))"]}
{"id": "enwn_validation_372", "nl": "Dog poop is a mess that needs to be cleaned by someone.", "fol": "", "prediction": ["all x.(DogPoop(x) -> (Miss(x) & NeedsCleaning(x)))", "all x.(DogPoop(x) -> (Mess(x) & NeedsCleaning(x)))", "all x.(DogPoop(x) -> (Mach(x) & NeedsCleaning(x)))", "all x y.((DogPoop(x) & Person(y)) -> NeedsCleaning(x,y))", "all x.(DogPoop(x) -> (Machine(x) & NeedsCleaning(x)))", "all x.(DogPoop(x) -> (Mask(x) & NeedsCleaning(x)))", "all x.(DogPoop(x) -> NeedsCleaning(x))", "all x.(DogPoop(x) -> (Mash(x) & NeedsCleaning(x)))", "all x.(DogPoop(x) -> (Mss(x) & NeedsCleaning(x)))", "all x.(DogPoop(x) -> (Moss(x) & NeedsCleaning(x)))", "all x y z.((DogPoop(x) & Person(y) & Mess(z)) -> NeedsCleaning(x,y,z))", "all x.(DogPoop(x) -> (Mammal(x) & NeedsCleaning(x)))", "all x.(DogPoop(x) -> (Mame(x) & NeedsCleaning(x)))", "all x y.((DogPoop(x) & Person(y)) -> NeedsToClean(x,y))", "all x y.((DogPoop(x) & Person(y)) -> NeedsCleaning(y,x))", "all x y.((DogPoop(x) & Person(y)) -> Cleans(x,y))"]}
{"id": "enwn_validation_373", "nl": "Lois left a mess that needs to be cleaned by someone.", "fol": "", "prediction": ["all x y.((Lois(x) & Mess(y)) -> NeedsCleaning(x,y))", "all x.((Lois(x) & LeftMosh(x)) -> NeedsCleaning(x))", "all x y z.((Lois(x) & Mess(y) & Person(z)) -> Left(x,y))", "all x.((Lois(x) & LeftMoss(x)) -> NeedsCleaning(x))", "all x y z.((Lois(x) & Mess(y) & Person(z)) -> Left(x,y,z))", "all x y z.((Lois(x) & Mess(y) & Person(z)) -> NeedsCleaning(x,y,z))", "all x y z.((Lois(x) & Mess(y) & Person(z)) -> (Leaved(x,y) & NeedsCleaning(x,z)))", "all x y z.((Lois(x) & Mess(y) & Person(z)) -> (Leaved(x,y) & NeedsCleaning(y,z)))", "all x y z.((Lois(x) & Mess(y) & Person(z)) -> LeftAndNeedsCleaning(x,y,z))", "all x y z.((Lois(x) & Mess(y) & Person(z) & Left(x,y)) -> NeedsCleaning(y,z))", "all x y.((Lois(x) & Mess(y) & Left(x,y)) -> NeedsCleaning(x,y))", "all x y.((Lois(x) & Mess(y)) -> (Leaved(x,y) & NeedsCleaning(x,y)))", "all x y z.((Lois(x) & Mess(y) & Person(z) & Left(x,y)) -> NeedsCleaning(x,z))", "all x y.((Lois(x) & mess(y)) -> NeedsCleaning(x,y))", "all x y.((Lois(x) & Mess(y)) -> (Leaved(x,y) & NeedsCleaning(x)))", "all x y.((Lois(x) & Mess(y) & Left(x,y)) -> NeedsCleaning(x))"]}
{"id": "enwn_validation_374", "nl": "Avoiding your responsibilities is inconsiderate.", "fol": "", "prediction": ["all x.((AvoidsResponsibilities(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((AvoidResponsibilities(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.(AvoidsResponsibilities(x) -> Inconsiderate(x))", "all x.(AvoidResponsibilities(x) -> Inconsiderate(x))", "all x.((AvoidsResponsibilities(x)) -> Inconsiderate(x))", "all x.((AvoidingResponsibilities(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((AvoidResponsibilities(x)) -> Inconsiderate(x))", "all x.((Responsibilities(x) & Avoid(x)) -> Inconsiderate(x))", "all x.((AvoidResponsibility(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((Responsibility(x) & Avoids(x)) -> Inconsiderate(x))", "all x.((HasResponsibilities(x) & Avoids(x)) -> Inconsiderate(x))", "all x.(AvoidingResponsibilities(x) -> Inconsiderate(x))", "all x.((CausesResponsibilities(x) & Avoids(x)) -> Inconsiderate(x))", "all x y.((AvoidsResponsibilities(x) & Responsibility(y)) -> Inconsiderate(x))", "all x y.((AvoidResponsibilities(x) & Responsibility(y)) -> Inconsiderate(x))", "all x.((AvoidsResponsibilities(x) & Inconsiderate(x)) -> Inconsiderable(x))"]}
{"id": "enwn_validation_375", "nl": "You are avoiding your responsibilities when you leave a mess for someone else.", "fol": "", "prediction": ["all x y.((LaysMach(x,y) & SomeoneOther(y)) -> AvoidsResponsibilities(x))", "all x y.((LaysMach(x,y) & SomeoneOther(y)) -> AvoidsResponsibilities(x,y))", "all x y.((Person(x) & LeavesMach(x,y)) -> AvoidsResponsibilities(x))", "all x y.((LeavingMach(x) & SomeoneOther(y)) -> AvoidsResponsibilities(x,y))", "all x y.((LeavesMach(x,y) & SomeoneOther(y)) -> AvoidsResponsibilities(x))", "all x y.((LaysMach(x,y) & Person(y)) -> AvoidsResponsibilities(x))", "all x y.((LeaveMach(x,y) & SomeoneOther(y)) -> AvoidsResponsibilities(x))", "all x y.((LeaveMach(x,y) & SomeoneOther(y)) -> AvoidsResponsibilities(x,y))", "all x y.((LaysMach(x,y) & Person(y)) -> AvoidsResponsibilities(x,y))", "all x y.((LeavesMach(x,y) & SomeoneOther(y)) -> AvoidsResponsibilities(x))", "all x y.((LeavesMach(x,y) & SomeoneOther(y)) -> AvoidsResponsibilities(x,y))", "all x y.((Mach(x) & Leaves(x,y)) -> AvoidsResponsibilities(x))", "all x y.((LeaveMach(x) & SomeoneOther(y)) -> AvoidsResponsibilities(x,y))", "all x y.((LeavesMach(x,y) & SomeoneOther(y)) -> AvoidsResponsibilities(x,y))", "all x y.((Person(x) & LeavesMach(x,y)) -> AvoidsResponsibilities(x,y))", "all x y.((LaysMach(x,y) & Someone(y)) -> AvoidsResponsibilities(x))"]}
{"id": "enwn_validation_376", "nl": "Leaving a mess for someone else to clean is being inconsiderate.", "fol": "", "prediction": ["all x y.((Person(x) & Mess(y) & Leaves(x,y)) -> Inconsiderate(x))", "all x y.((LaysMachine(x,y) & Person(y)) -> Inconsiderate(x))", "all x y.((LaysMachine(x) & Person(y) & CleansMachine(x,y)) -> Inconsiderate(x))", "all x y.((LaysMachine(x) & Person(y)) -> Inconsiderate(x))", "all x.((LaysMachine(x) & SomeoneOther(x)) -> Inconsiderate(x))", "all x.((LaysMachine(x) & CleansMachine(x)) -> Inconsiderate(x))", "all x.((LeaveMachine(x) & SomeoneOther(x)) -> Inconsiderate(x))", "all x y.((LaysMachine(x) & Person(y) & CleansMachine(y)) -> Inconsiderate(x))", "all x y.((LaysMachine(x,y) & SomeoneOther(y)) -> Inconsiderate(x))", "all x y.((LaysMachine(x) & Person(y) & Cleans(y,x)) -> Inconsiderate(x))", "all x.((LaysMachine(x) & LeavesMachine(x)) -> Inconsiderate(x))", "all x y.((LaysMachine(x,y) & Someone(y)) -> Inconsiderate(x))", "all x y.((LeaveMachine(x) & Person(y)) -> Inconsiderate(x))", "all x y.((LaysMachine(x) & Person(y) & Cleans(y)) -> Inconsiderate(x))", "all x y.((Person(x) & Mess(y)) -> Inconsiderate(x,y))", "all x y.((LaysMachine(x,y) & Cleans(y)) -> Inconsiderate(x))"]}
{"id": "enwn_validation_377", "nl": "Lois is inconsiderate.", "fol": "", "prediction": ["Lois is inconsiderate.", "all x.(Lois(x) -> Inconsiderate(x))", "Lois is Inconsiderate(Lois)", "All x.(Lois(x) -> Inconsiderate(x))", "(Inconsiderate(Lois)", "Lois is Inconsiderate.", "(Inconsiderate(Lois) -> Inconsiderate(Lois))", "Lois is Inconsiderate(lois)", "-Inconsiderate(Lois)", "all x.(Lois(x) -> Inconsiderate(x))", "Lois IsInconsiderate(Lois)", "Lois (Inconsiderate(Lois) -> Inconsiderate(Lois))", "all x.(Lois(x) -> Ignorant(x))", "Lois (Inconsiderate(Lois) -> Inconsiderate(Lois))", "Lois is Inconsiderate(x)", "All x.(Lois(x) -> Inconsiderate(x))"]}
{"id": "enwn_validation_378", "nl": "Joshua likes driving an extremely loud car in the middle of the night because it wakes people up.", "fol": "", "prediction": ["all x.((Joshua(x) & LoudCar(x) & WakesPeopleUp(x)) -> LikesDriving(x))", "all x.((Joshua(x) & LoudCar(x) & MidNight(x)) -> WakesPeopleUp(x))", "all x.((Joshua(x) & LoudCar(x) & WakesPeopleUp(x)) -> Likes(x,y))", "all x y z.((Joshua(x) & Car(y) & Person(z)) -> (Loud(y) & WakesUp(z)))", "all x.((Joshua(x) & LoudCar(x) & WakesPeopleUp(x)) -> Likes(x))", "all x y.((Joshua(x) & LoudCar(y) & MidNight(x) & WakesPeopleUp(x)) -> Likes(x,y))", "all x.((Josh(x) & LoudCar(x) & WakesPeopleUp(x)) -> LikesDriving(x))", "all x.((Joshua(x) & LoudCar(x) & MidNight(x)) -> WakesUpPeople(x))", "all x y.((Joshua(x) & LoudCar(y) & Midnight(y)) -> Likes(x,y))", "all x y.((Joshua(x) & LoudCar(y) & MidNight(y)) -> WakesPeopleUp(x,y))", "all x y z.((Joshua(x) & Car(y) & Person(z)) -> (Loud(y) & WakesUp(y,z)))", "all x y.((Joshua(x) & Car(y)) -> (Loud(y) & WakesPeopleUp(y)))", "all x y.((Joshua(x) & LoudCar(y) & MidNight(y)) -> Likes(x,y))", "all x.((Josh(x) & LoudCar(x) & WakesPeopleUp(x)) -> Likes(x,y))", "all x y.((Joshua(x) & LoudCar(y) & MidNight(x) & WakesPeopleUp(x)) -> LikesDriving(x,y))", "all x.((Joshua(x) & LoudCar(x) & WakesPeopleUp(x)) -> LikesDriving(x,y))"]}
{"id": "enwn_validation_379", "nl": "Making things unpleasant for someone is rude.", "fol": "", "prediction": ["all x.((Person(x) & Uncomfortable(x)) -> Rust(x))", "all x.((Person(x) & Unpleasant(x)) -> Rust(x))", "all x y.((Person(x) & Person(y) & Uncomfortable(x,y)) -> Rust(x))", "all x y.((Person(x) & Person(y) & Unpleasant(x,y)) -> Rust(x))", "all x y.((Person(x) & Person(y)) -> Unpleasant(x,y))", "all x.((MakingUnpleasantThings(x) & Person(x)) -> Rust(x))", "all x.((Unpleasant(x) & Person(x)) -> Rust(x))", "all x y.((Person(x) & Person(y) & MakesUnpleasant(x,y)) -> Rust(x))", "all x.((Person(x) & Unfortunate(x)) -> Rust(x))", "all x y.((Person(x) & Unpleasant(y)) -> Rust(x))", "all x.((Person(x) & Unappealing(x)) -> Rust(x))", "all x y.((Person(x) & Person(y) & Uncomfortable(x,y)) -> Rust(x,y))", "all x.((MakingUnpleasant(x) & Person(x)) -> Rust(x))", "all x y.((Person(x) & Uncomfortable(y)) -> Rust(x))", "all x y.((Person(x) & Person(y) & Unpleasant(x,y)) -> Rust(x,y))", "all x.((Person(x) & Unacceptable(x)) -> Rust(x))"]}
{"id": "enwn_validation_380", "nl": "Waking someone up at night prevents them from getting a full night's rest.", "fol": "", "prediction": ["all x y.((WakingUpAtNight(x) & Person(y)) -> -GetsFullNightsRest(y))", "all x y.((WakingUpAtNight(x) & Person(y)) -> PreventsFullNightsRest(x,y))", "all x y.((WakingUpAtNight(x) & Person(y)) -> PreventsFullNightsRest(y))", "all x y.((WakingUpAtNight(x) & Person(y)) -> PreventsFullNightsRerest(x,y))", "all x y.((WakingUpAtNight(x) & Person(y)) -> PreventsFullNightsRest(y,x))", "all x y.((WakingUpAtNight(x) & Person(y)) -> PreventsFullNightsRerest(y))", "all x y.((WakingUpAtNight(x) & Person(y)) -> -GetsFullNightsRerest(y))", "all x.((WakingUpAtNight(x) & Person(x)) -> PreventsFullNightsRest(x))", "all x.((WakingUpAtNight(x) & Person(y)) -> -GetsFullNightsRest(y))", "all x y.((WakingUpAtNight(x) & Person(y)) -> PreventsFullNightRest(x,y))", "all x y.((WakingUpAtNight(x) & Person(y)) -> -FullNightsRest(y))", "all x y.((WakingUpAtNight(x) & Person(y)) -> -GetsFullNightRest(y))", "all x y.((WakingUpAtNight(x) & Person(y)) -> PreventsFullNightRest(y))", "all x y.((WakingUpAtNight(x) & Person(y)) -> -GetsFullNightsRest(y,x))", "all x y.((WakingUpAtNight(x) & Person(y)) -> PreventsFullNightRerest(y))", "all x y.((WakingUpAtNight(x) & Person(y)) -> PreventsFullNightsRerest(y,x))"]}
{"id": "enwn_validation_381", "nl": "Not getting a full night's rest is unpleasant.", "fol": "", "prediction": ["all x.((NightsRest(x) & -FullNightsRest(x)) -> Unpleasant(x))", "all x.((NightsRest(x) & -FullNightsRest(x)) -> Uncomfortable(x))", "all x.((FullNightsRest(x) & -FullNightsRest(x)) -> Unpleasant(x))", "all x.((FullNightsRest(x) & -FullNightsRest(x)) -> Uncomfortable(x))", "all x.((NightsRest(x) & -FullNight(x)) -> Unpleasant(x))", "all x.((NightsRest(x) & -FullNight(x)) -> Uncomfortable(x))", "all x.((FullNightsRest(x) & Uncomfortable(x)) -> -FullNightsRest(x))", "all x.((NightsRerest(x) & -Full(x)) -> Unpleasant(x))", "all x.((NightsRest(x) & -FullNightRest(x)) -> Unpleasant(x))", "all x.((NightsRest(x) & -FullNightsRest(x)) -> Unplausible(x))", "all x.((NightsRest(x) & -FullNightRest(x)) -> Uncomfortable(x))", "all x.((FullNightsRest(x) & -FullNightsRest(x)) -> Unplausible(x))", "all x.((NightsRerest(x) & -Full(x)) -> Uncomfortable(x))", "all x.((LowerNightsRest(x) & -FullNightsRest(x)) -> Unpleasant(x))", "all x.((LowerNightsRest(x) & -FullNightsRest(x)) -> Uncomfortable(x))", "all x.((NightsRest(x) & -Full(x)) -> Unpleasant(x))"]}
{"id": "enwn_validation_382", "nl": "If you like to be rude, you're a rude person.", "fol": "", "prediction": ["all x.((Person(x) & LikesToBeRust(x)) -> Rust(x))", "all x.((Person(x) & LikesToBeRust(x)) -> Rusty(x))", "all x.((Person(x) & LikesRust(x)) -> Rust(x))", "all x.((Person(x) & LikesToBeRule(x)) -> Rust(x))", "all x.((Person(x) & LikesToBeRust(x)) -> Rude(x))", "all x.((LikesToBeRust(x) & Rusty(x)) -> RustPerson(x))", "all x.((People(x) & LikesToBeRust(x)) -> Rust(x))", "all x.((LikesToBeRust(x) & Rust(x)) -> RustPerson(x))", "all x.((LikesToBeRust(x) & RustPerson(x)) -> RustPerson(x))", "all x.((Person(x) & LikesToBeRust(x)) -> Rough(x))", "all x.((Rubbly(x) & LikesToBe(x)) -> RustPerson(x))", "all x.((Relative(x) & LikesToBe(x)) -> RustPerson(x))", "all x.((Person(x) & LikesToBeRule(x)) -> Rusty(x))", "all x.((People(x) & LikesToBeRust(x)) -> Rusty(x))", "all x.(LikesToBeRust(x) -> RustPerson(x))", "all x.((People(x) & LikeToBeRust(x)) -> Rust(x))"]}
{"id": "enwn_validation_383", "nl": "Waking someone up at night can be unpleasant for that person.", "fol": "", "prediction": ["all x.((Person(x) & WakingUpAtNight(x)) -> UnappealingFor(x,Person))", "all x y.((Person(x) & Person(y) & WakingUpAtNight(x,y)) -> UnappealingFor(x,y))", "all x y.((Person(x) & Person(y) & WakingAtNight(x,y)) -> Unappealing(x,y))", "all x.((Person(x) & WakingAtNight(x)) -> UnappealingFor(x,Person))", "all x y.((Person(x) & Person(y) & WakingUpAtNight(x,y)) -> Unappealing(x,y))", "all x.((Person(x) & WakingUpAtNight(x)) -> UncomfortableFor(x,Person))", "all x y.((Person(x) & Person(y)) -> Unappealing(x,y))", "all x y.((Person(x) & Person(y) & WakingAtNight(x,y)) -> UnappealingFor(x,y))", "all x.((Person(x) & WakingUpAtNight(x)) -> Unappealing(x))", "all x.((Person(x) & WakingUpAtNight(x)) -> UnpleasantFor(x,Person))", "all x.((Person(x) & WakingUpAtNight(x)) -> UnfortunateFor(x,Person))", "all x.((Person(x) & WakingAtNight(x)) -> Unappealing(x))", "all x y.((Person(x) & Person(y) & WakingUpAtNight(x,y)) -> UnfortunateFor(x,y))", "all x y.((Person(x) & Person(y)) -> Unpleasant(x,y))", "all x y.((Person(x) & Person(y)) -> Uncomfortable(x,y))", "all x.((Person(x) & WakingUpAtNight(x)) -> Uncomfortable(x))"]}
{"id": "enwn_validation_384", "nl": "It is rude to wake people up at night.", "fol": "", "prediction": ["all x.((WakePeopleUpAtNight(x)) -> Rusty(x))", "all x.((WakeUp(x) & Night(x)) -> Rust(x))", "all x.((WakePeopleUpAtNight(x)) -> Rust(x))", "all x.((WakePeopleUp(x) & Night(x)) -> Rust(x))", "all x.((WakeUpAtNight(x) & People(x)) -> Rusty(x))", "all x.((WakeUpAtNight(x) & People(x)) -> Rust(x))", "all x.((WakeUp(x) & Night(x)) -> Rusty(x))", "all x.((WakePeopleUp(x) & Night(x)) -> Rusty(x))", "all x.((WakePeopleUpAtNight(x)) -> Rustic(x))", "all x.((WakeUpAtNight(x) & People(y)) -> Rusty(x))", "all x.((WakeUpAtNight(x) & People(y)) -> Rust(x))", "all x.((WakeUp(x) & Night(x)) -> Rustic(x))", "all x.((WakeUpAtNight(x) & People(x)) -> Rustic(x))", "all x.((WakePeopleUpAtNight(x)) -> Ruel(x))", "all x.((WakePeopleUp(x) & Night(x)) -> Rustic(x))", "all x y.((WakeUp(x) & Person(y)) -> Rust(x))"]}
{"id": "enwn_validation_385", "nl": "Joshua likes to be rude.", "fol": "", "prediction": ["all x.(Joshua(x) -> LikesToBeRule(x))", "all x.(Joshua(x) -> LikesToBeRust(x))", "all x.(Josh(x) -> LikesToBeRule(x))", "all x.(Joshua(x) -> LikesToBeRusty(x))", "all x.(Josh(x) -> LikesToBeRust(x))", "all x.(Josh(x) -> LikesToBeRusty(x))", "all x.(Joshua(x) -> LikesToBeRurel(x))", "all x.(Josh(x) -> LikesToBeRurel(x))", "all x.((Joshua(x) & Rust(x)) -> LikesToBe(x))", "all x.(Josh(x) -> LikesToBeRure(x))", "all x.(Joseph(x) -> LikesToBeRusty(x))", "all x.(Joseph(x) -> LikesToBeRule(x))", "all x.(Joshua(x) -> LikesToBeRull(x))", "all x.(Josh(x) -> LikesToBeRull(x))", "all x.(Joshua(x) -> LikesToBeRure(x))", "all x.(Joshua(x) -> LikesToBeRude(x))"]}
{"id": "enwn_validation_386", "nl": "Joshua is a rude person.", "fol": "", "prediction": ["all x.(Josh(x) -> RustPerson(x))", "all x.(Joshua(x) -> RustPerson(x))", "all x.(Josh(x) -> Rust(x))", "all x.(Joshua(x) -> Rust(x))", "all x.(Josh(x) -> RustyPerson(x))", "all x.(Joshua(x) -> RustyPerson(x))", "all x.(Josh(x) -> RusticPerson(x))", "all x.(Joseph(x) -> RustPerson(x))", "all x.(Joshua(x) -> RusticPerson(x))", "all x.(Josh(x) -> RoughPerson(x))", "all x.(Joshua(x) -> RoughPerson(x))", "all x.(Josh(x) -> RudePerson(x))", "all x.((Josh(x) & Rust(x)) -> Person(x))", "all x.((Joshua(x) & Rust(x)) -> Person(x))", "all x.((Josh(x) & Rusty(x)) -> Person(x))", "all x.((Joshua(x) & Rusty(x)) -> Person(x))"]}
{"id": "enwn_validation_387", "nl": "Katie used her neighbors' internet access without their permission.", "fol": "", "prediction": ["all x y z.((Katie(x) & Neighbor(y) & InternetAccess(z)) -> UsedWithoutPermission(x,y,z))", "all x y z.((Katie(x) & Neighbor(y) & InternetAccess(z)) -> UsesWithoutPermission(x,y,z))", "all x y.((Katie(x) & Neighbor(y)) -> UsesInternetAccessWithoutPermission(x,y))", "all x y.((Neighbor(x) & Katie(y)) -> UsesInternetAccessWithoutPermission(y,x))", "all x y.((Katie(x) & Neighbor(y)) -> UsedInternetAccessWithoutPermission(x,y))", "all x y.((Neighbor(x) & Katie(y)) -> UsedInternetAccessWithoutPermission(y,x))", "all x y z.((Katie(x) & Neighbor(y) & InternetAccess(z)) -> (UsedWithoutPermission(x,y,z)))", "all x y.((Katie(x) & Neighbor(y) & InternetAccess(x,y)) -> UsedWithoutPermission(x,y))", "all x y z.((Katie(x) & Neighbors(y) & InternetAccess(z)) -> UsedWithoutPermission(x,y,z))", "all x y z.((Katie(x) & Neighbor(y) & InternetAccess(z) & -Permission(y)) -> Used(x,y,z))", "all x.((Katie(x) & NeighborsInternetAccess(x)) -> UsedWithoutPermission(x))", "all x y.((Neighbors(x) & Katie(y)) -> UsesInternetAccessWithoutPermission(y,x))", "all x y z.((Katie(x) & Neighbor(y) & InternetAccess(z) & -Permission(y,z)) -> Used(x,y,z))", "all x y z.((Katie(x) & Neighbor(y) & InternetAccess(z)) -> -UsedWithoutPermission(x,y,z))", "all x y z.((Katie(x) & Neighbor(y) & InternetAccess(z)) -> Uses(x,y,z))", "all x y.((Katie(x) & Neighbor(y)) -> UsedInternetAccess(x,y))"]}
{"id": "enwn_validation_388", "nl": "Using someone's internet access doesn't prevent them from using it.", "fol": "", "prediction": ["all x.((UsesInternetAccess(x) & -UsesInternetAccess(x)) -> -UsesInternetAccess(x))", "all x y.((UsesInternetAccess(x) & Person(y)) -> -PreventsFromUsingInternetAccess(y,x))", "all x y.((UsesInternetAccess(x) & Person(y)) -> -PreventsUsingInternetAccess(y,x))", "all x y.((UsesInternetAccess(x) & Person(y)) -> -ProtectsFromUsingInternetAccess(y,x))", "all x y.((UsesInternetAccess(x) & Person(y)) -> -ProtectsFromUsingInternetAccess(x,y))", "all x y.((UsesInternetAccess(x) & Person(y)) -> -ProhibitsFromUsingInternetAccess(y,x))", "all x y.((UsesInternetAccess(x) & Person(y)) -> -PreventsUsingInternetAccess(y,x))", "all x y.((UsesInternetAccess(x) & Person(y)) -> -UsesInternetAccess(y,x))", "all x y.((UsesInternetAccess(x) & Person(y)) -> -UsesInternetAccess(x,y))", "all x y.((UsesInternetAccess(x,y) & Person(y)) -> -ProtectsFromUsingInternetAccess(x,y))", "all x y.((UsesInternetAccess(x) & Person(y)) -> -PreventsFromUsing(y,x))", "all x y.((UsesInternetAccess(x) & Person(y)) -> -ProhibitsFromUsingInternetAccess(x,y))", "all x y.((UsesInternetAccess(x,y) & Person(y)) -> -PreventsFromUsingInternetAccess(x,y))", "all x y.((UsesInternetAccess(x,y) & Person(y)) -> -ProhibitsFromUsingInternetAccess(x,y))", "all x y.((UsesInternetAccess(x) & Person(y)) -> -PreventsFromUsingInternetAccess(x,y))", "all x y.((UsesInternetAccess(x) & Person(y)) -> -PreventsUsingInternetAccess(x,y))"]}
{"id": "enwn_validation_389", "nl": "It's wrong to deprive someone of their property.", "fol": "", "prediction": ["all x y.((Deprive(x,y) & Person(y)) -> Irresponsible(x,y))", "all x y.((Deprive(x,y) & Person(y)) -> Irresponsible(x))", "all x y.((Person(x) & Property(y)) -> Irresponsible(x,y))", "all x.((Person(x) & DeprivesProperty(x)) -> Irresponsible(x))", "all x y.((Deprives(x,y) & Person(y)) -> Irresponsible(x))", "all x y.((Property(x) & Person(y)) -> Irresponsible(x,y))", "all x y.((Deprives(x,y) & Person(y)) -> Irresponsible(x,y))", "all x.((Person(x) & DepriveProperty(x)) -> Irresponsible(x))", "all x.((DeprivesProperty(x) & Person(x)) -> Irresponsible(x))", "all x.((Person(x) & DeprivesProperty(x)) -> Wrong(x))", "all x y.((DeprivesProperty(x) & Person(y)) -> Irresponsible(x,y))", "all x y.((Person(x) & Property(y)) -> WrongToDeprive(x,y))", "all x y.((Person(x) & Property(y) & Deprives(x,y)) -> Irresponsible(x))", "all x.(DeprivesProperty(x) -> Irresponsible(x))", "all x y.((Deprive(x,y) & Person(y)) -> Wrong(x))", "all x.((Person(x) & DepriveProperty(x)) -> Wrong(x))"]}
{"id": "enwn_validation_390", "nl": "Katie didn't deprive her neighbors of their internet by using it without their permission.", "fol": "", "prediction": ["all x.((Katie(x) & -DeprivesNeighborsOfInternet(x) & UsesInternetWithoutPermission(x)) -> -DeprivesNeighborsOfInternet(x))", "all x y.((Neighbor(x) & Katie(y)) -> -DeprivesInternet(y,x))", "all x y.((Katie(x) & Neighbor(y) & UsesInternetWithoutPermission(x,y)) -> -DeprivesOfInternet(x,y))", "all x y.((Katie(x) & Neighbor(y) & UsesInternetWithoutPermission(x,y)) -> -Deprives(x,y))", "all x y z.((Katie(x) & Neighbor(y) & Internet(z) & UsesWithoutPermission(x,y,z)) -> -Deprives(x,y,z))", "all x y.((Katie(x) & Neighbor(y)) -> -DeprivesInternet(x,y))", "all x y z.((Katie(x) & Neighbor(y) & Internet(z)) -> -Deprives(x,y,z))", "all x y z.((Katie(x) & Neighbor(y) & Internet(z) & UsesWithoutPermission(x,z)) -> -Deprives(x,y,z))", "all x y z.((Katie(x) & Neighborhood(y) & Internet(z) & UsesWithoutPermission(x,y,z)) -> -Deprives(x,y,z))", "all x y.((Katie(x) & Neighborhood(y) & UsesInternetWithoutPermission(x,y)) -> -Deprives(x,y))", "all x y z.((Katie(x) & Neighborhood(y) & Internet(z)) -> -Deprives(x,y,z))", "all x y.((Neighbor(x) & Katie(y) & UsesInternetWithoutPermission(y,x)) -> -Deprives(y,x))", "all x y.((Katie(x) & Neighborhood(y) & UsesInternetWithoutPermission(x,y)) -> -DeprivesOfInternet(x,y))", "all x y.((Katie(x) & Neighborhood(y)) -> -DeprivesInternet(x,y))", "all x y.((Neighbor(x) & Katie(y) & UsesInternetWithoutPermission(y,x)) -> -DeprivesOfInternet(y,x))", "all x.((Katie(x) & Neighbors(x) & UsesInternetWithoutPermission(x)) -> -DeprivesOfInternet(x))"]}
{"id": "enwn_validation_391", "nl": "It was okay for Katie to use her neighbors' internet.", "fol": "", "prediction": ["all x.((Katie(x) & NeighborsInternet(x)) -> OK(x))", "all x.((Katie(x) & NeighborsInternet(x)) -> OKToUse(x,y))", "all x y.((Katie(x) & NeighborsInternet(y)) -> OKToUse(x,y))", "all x.((Katie(x) & NeighborsInternet(x)) -> Okay(x))", "all x y.((Katie(x) & NeighborsInternet(y)) -> OkayToUse(x,y))", "all x.((Katie(x) & NeighborsInternet(x)) -> OkayToUse(x,y))", "all x y.((Katie(x) & NeighborsInternet(y)) -> OK(x,y))", "all x y.((NeighborsInternet(x) & Katie(y)) -> OKToUse(y,x))", "all x y z.((Katie(x) & NeighborsInternet(y) & Internet(z)) -> OKToUse(x,y,z))", "all x.((Katie(x) & NeighborsInternet(x)) -> OKToUse(x,Katie))", "all x y.((Katie(x) & NeighborsInternet(y)) -> Okay(x,y))", "all x y z.((Katie(x) & NeighborsInternet(y) & Internet(z)) -> OkayToUse(x,y,z))", "all x y.((Katie(x) & Neighbor(y)) -> UsesInternet(x,y))", "all x.((Katie(x) & NeighborsInternet(x)) -> OkayToUse(x,Katie))", "all x y z.((Katie(x) & NeighborsInternet(y) & Internet(z)) -> OK(x,y,z))", "all x y z.((Katie(x) & Neighbor(y) & Internet(z)) -> OKToUse(x,y,z))"]}
{"id": "enwn_validation_392", "nl": "Pushing people out of your way is an impatient thing to do.", "fol": "", "prediction": ["all x.(PushingPeopleOutOfWay(x) -> ImpatientThing(x))", "all x.(PushingPeopleOutOfWay(x) -> ImpatientThingToDo(x))", "all x.(PushingOutOfWay(x) -> ImpatientThing(x))", "all x.(PutsPeopleOutOfWay(x) -> ImpatientThing(x))", "all x.(PushingPeopleOutOfYourWay(x) -> ImpatientThing(x))", "all x.(PutsPeopleOutOfWay(x) -> ImpatientThingToDo(x))", "all x.(PushingOutOfWay(x) -> ImpatientThingToDo(x))", "all x.(PushingPeopleOutOfYourWay(x) -> ImpatientThingToDo(x))", "all x.(PutPeopleOutOfWay(x) -> ImpatientThing(x))", "all x.(PutsPeopleOutOfYourWay(x) -> ImpatientThing(x))", "all x.(PushingPeopleOutOfWay(x) -> ImpatientThing(x))", "all x.(PutPeopleOutOfWay(x) -> ImpatientThingToDo(x))", "all x.(PutsPeopleOutOfYourWay(x) -> ImpatientThingToDo(x))", "all x.(PushPeopleOutOfWay(x) -> ImpatientThing(x))", "all x.(PushOutOfWay(x) -> ImpatientThing(x))", "all x.(PushingPeopleOutOfWeave(x) -> ImpatientThing(x))"]}
{"id": "enwn_validation_393", "nl": "Patience is a virtue.", "fol": "", "prediction": ["all x.(Patient(x) -> Virtue(x))", "all x.(Patience(x) -> Virtue(x))", "all x.(Patient(x) -> Virtue(x))", "all x.((Patient(x) & Virtue(x)) -> Patience(x))", "all x.((Patience(x) & Virtue(x)) -> Patience(x))", "all x y.((Patient(x) & Virtue(y)) -> Patience(x))", "all x.((Patience(x) & Virtue(x)) -> Virtue(x))", "all x y.((Patience(x) & Virtue(y)) -> Patience(x))", "all x y.((Patient(x) & Virtue(y)) -> Patience(x,y))", "all x y.((Patience(x) & Virtue(y)) -> Virtue(x,y))", "all x.(Patience(x) -> Virtue(x))", "all x y.((Patience(x) & Virtue(y)) -> Patience(x,y))", "all x y.((Patience(x) & Virtue(y)) -> Virtue(x))", "all x y.((Patient(x) & Virtue(y)) -> Virtue(x,y))", "all x.(PATIENCE(x) -> Virtue(x))", "all x y.((Patient(x) & Virtue(y)) -> Is(x,y))"]}
{"id": "enwn_validation_394", "nl": "People should be virtuous.", "fol": "", "prediction": ["all x.(Person(x) -> Virtuous(x))", "all x.(People(x) -> Virtuous(x))", "all x.((Person(x) & Virtuous(x)) -> ShouldBe(x))", "all x.((Person(x) & Virtuous(x)) -> Virtuous(x))", "all x.((People(x) & Virtuous(x)) -> ShouldBe(x))", "all x.((Person(x) & Virtuous(x)) -> MustBe(x))", "all x.((Person(x) & Virtuous(x)) -> Is(x,y))", "all x.((Person(x) & Virtuous(x)) -> -Virtuous(x))", "all x.(Men(x) -> Virtuous(x))", "all x.(Private(x) -> Virtuous(x))", "all x.((Person(x) & Virtuous(x)) -> Virtuous(x))", "exists x.(Person(x) & Virtuous(x))", "all x.(Citizen(x) -> Virtuous(x))", "all x.(Human(x) -> Virtuous(x))", "all x.((Person(x) & Virtuous(x)) -> ShouldBe(x,y))", "all x.((Person(x) & Virtuous(x)) -> Good(x))"]}
{"id": "enwn_validation_395", "nl": "Letty shoved Cathleen out of the way when walking through a doorway.", "fol": "", "prediction": ["all x y.((Letty(x) & Cathleen(y) & WalkingThroughDoorway(x,y)) -> PushedOutOfWay(x,y))", "all x y z.((Letty(x) & Cathleen(y) & Doorway(z)) -> PushedOutOfWay(x,y,z))", "all x y.((Letty(x) & Cathleen(y) & WalkingThroughDoorway(x,y)) -> PushedOutOfWay(x,y))", "all x y.((Letty(x) & Cathleen(y) & WalksThroughDoorway(x,y)) -> PushesOutOfWay(x,y))", "all x y.((Letty(x) & Cathleen(y) & WalksThroughDoorway(x,y)) -> PushedOutOfWay(x,y))", "all x y z.((Letty(x) & Cathleen(y) & Doorway(z)) -> PushedOutOfWay(x,y,z))", "all x y z.((Letty(x) & Cathleen(y) & Doorway(z) & WalkingThrough(x,y,z)) -> PushedOutOfWay(x,y,z))", "all x y.((Letty(x) & Cathleen(y) & WalksThroughDoorway(x,y)) -> PushedOutOfWay(x,y))", "all x y z.((Letty(x) & Cathleen(y) & Doorway(z) & WalkingThrough(x,z)) -> PushedOutOfWay(x,y,z))", "all x y z.((Letty(x) & Cathleen(y) & Doorway(z) & WalkingThrough(x,y,z)) -> PushedOutOfWay(x,y,z))", "all x y.((Letty(x) & Cathleen(y) & WalkingThroughDoorway(x)) -> PushedOutOfWay(x,y))", "all x y z.((Letty(x) & Cathleen(y) & Doorway(z) & WalkingThrough(x,z)) -> PushedOutOfWay(x,y,z))", "all x y z.((Letty(x) & Cathleen(y) & Doorway(z) & WalkingThrough(x,y,z)) -> PushedOutOfWay(x,y))", "all x y z.((Letty(x) & Cathleen(y) & Doorway(z) & WalkingThrough(x,z)) -> PushedOutOfWay(x,y))", "all x y.((Letty(x) & Cathleen(y) & WalkingThroughDoorway(x)) -> PushedOutOfWay(x,y))", "all x y z.((Letty(x) & Cathleen(y) & Doorway(z) & WalkingThrough(x,y,z)) -> PushedOutOfWay(x,y))"]}
{"id": "enwn_validation_396", "nl": "People should be patient.", "fol": "", "prediction": ["all x.(Person(x) -> Patient(x))", "all x.(Patient(x) -> Patient(x))", "all x.((Person(x) & Patient(x)) -> ShouldBe(x))", "all x.(Person(x) -> ShouldBePatient(x))", "all x.(Patient(x) -> ShouldBe(x))", "all x y.((Person(x) & Patient(y)) -> ShouldBe(x,y))", "all x.((Person(x) & Patient(x)) -> Patient(x))", "all x.((People(x) & Patient(x)) -> ShouldBe(x))", "all x y.((Person(x) & Person(y)) -> Patient(x))", "all x.((Person(x) & Patient(x)) -> Needs(x))", "all x.((Person(x) & Patient(x)) -> MustBe(x))", "all x.(People(x) -> Patient(x))", "all x.((Person(x) & Patient(x)) -> -Patient(x))", "all x.(Patient(x) -> Patient(x))", "all x.((Person(x) & Patient(x)) -> Requires(x))", "all x.((Person(x) & Patient(x)) -> Needs(x,y))"]}
{"id": "enwn_validation_397", "nl": "You shouldn't push people out of your way.", "fol": "", "prediction": ["all x.((PushPerson(x) & -PushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushP", "all x.((PushPerson(x) & -PushPushPush(x)) -> -PushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushP", "all x.((PushPeople(x) & -PushPeopleOutOfWay(x)) -> -PushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushP", "all x.((PushPerson(x) & -PushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPP", "all x.((PushPeopleOutOfWay(x)) -> -PushPeopleOutOfWay(x))", "all x.((PushPerson(x) & -PushPushPush(x)) -> -PushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPP", "all x.((PushPerson(x) & -PushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushP-P", "all x.((Person(x) & -PushOutOfWay(x)) -> -PushOutOfWay(x))", "all x.((PushPerson(x) & -PushPushPushPushPushPushPushPushPushPushPushPush(x)) -> -PushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushP", "all x.((PushPerson(x) & -PushPushPushPushPushPushPushPushPushPushPushPushPush(x)) -> -PushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushP", "all x.((PushPerson(x) & -PushPushPushPushPushPushPushPushPushPushPushPushPushPush(x)) -> -PushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushP", "all x.((PushPeople(x) & -PushPeopleOutOfWay(x)) -> -PushPeopleOutOfWay(x))", "all x.((PushPerson(x) & -PushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPeP", "all x.((PushPerson(x) & -PushPushPushPushPushPushPushPushPushPushPushPushPushPushPush(x)) -> -PushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushP", "all x.((PushPerson(x) & -PushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPush(x)) -> -PushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushP", "all x.((PushPerson(x) & -PushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPush(x)) -> -PushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushPushP"]}
{"id": "enwn_validation_398", "nl": "Letty should not have shoved Cathleen.", "fol": "", "prediction": ["all x.((Letty(x) & -PoundedCathleen(x)) -> -PoundedCathleen(x))", "all x.((Letty(x) & -PoppedCathleen(x)) -> -PoppedCathleen(x))", "all x.((Letty(x) & -PushedCathleen(x)) -> -PushedCathleen(x))", "all x.((Letty(x) & -PushedCathleen(x)) -> -PushedCathleen(x))", "all x.((Letty(x) & -PockedCathleen(x)) -> -PoppedCathleen(x))", "all x.((Letty(x) & -PockedCathleen(x)) -> -PockedCathleen(x))", "all x.((Letty(x) & -PluckedCathleen(x)) -> -PluckedCathleen(x))", "all x.((Letty(x) & -PousedCathleen(x)) -> -PoundedCathleen(x))", "all x y.((Letty(x) & Cathleen(y)) -> -Pounded(x,y))", "all x y.((Letty(x) & Cathleen(y)) -> -Popped(x,y))", "all x.((Letty(x) & -PoppedCathleen(x)) -> -PockedCathleen(x))", "all x y.((Letty(x) & Cathleen(y)) -> -Pushed(x,y))", "all x y.((Letty(x) & Cathleen(y)) -> -Pocked(x,y))", "all x y.((Letty(x) & Cathleen(y)) -> -Poused(x,y))", "all x.((Letty(x) & -PushedCathleen(x)) -> -Pushed(x,Cathleen))", "all x.((Letty(x) & -PoundedCathleen(x)) -> -PousedCathleen(x))"]}
{"id": "enwn_validation_399", "nl": "The professor hugged the student without asking permission.", "fol": "", "prediction": ["all x y.((Professor(x) & Student(y)) -> Hugged(x,y))", "all x y.((Professor(x) & Student(y)) -> Hungry(x,y))", "all x y.((Professor(x) & Student(y) & -AskedPermission(x,y)) -> Hugged(x,y))", "all x y.((Professor(x) & Student(y) & Hugged(x,y)) -> -AskedPermission(x,y))", "all x y.((Professor(x) & Student(y) & Hungry(x,y)) -> -AnswersPermission(x,y))", "all x y.((Professor(x) & Student(y) & Hugged(x,y)) -> -AnswersPermission(x,y))", "all x y.((Professor(x) & Student(y) & NoPermission(x,y)) -> Hugged(x,y))", "all x y.((Professor(x) & Student(y)) -> HuggedWithoutPermission(x,y))", "all x y.((Professor(x) & Student(y)) -> (Hulked(x,y) & -AskedPermission(x,y)))", "all x y.((Professor(x) & Student(y) & Hugged(x,y)) -> -QuietsPermission(x,y))", "all x y.((Professor(x) & Student(y) & Hungry(x,y)) -> -QuietsPermission(x,y))", "all x y.((Professor(x) & Student(y) & Hugged(x,y)) -> -QuitedPermission(x,y))", "all x y.((Professor(x) & Student(y) & Hungry(x,y)) -> -AsksPermission(x,y))", "all x y z.((Professor(x) & Student(y) & Student(z)) -> Hugged(x,y,z))", "all x y.((Professor(x) & Student(y) & Hungry(x,y)) -> -AskedPermission(x,y))", "all x y.((Professor(x) & Student(y) & NoPermission(x)) -> Hugged(x,y))"]}
{"id": "enwn_validation_400", "nl": "It is not respectful to do things to people without their permission.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y) & DoseWithoutPermission(x,y)) -> -Respectful(x,y))", "all x y.((Person(x) & Person(y) & DoseWithoutPermission(x,y)) -> -Respectful(x))", "all x y.((Person(x) & Person(y)) -> -Respectful(x,y))", "all x y.((Person(x) & Person(y) & DoseWithoutPermission(x,y)) -> -Respective(x,y))", "all x y.((DoingThings(x) & Person(y) & -Permission(x,y)) -> -Respectful(x))", "all x y.((DoingThings(x) & Person(y) & -Permission(x,y)) -> -Respectful(x,y))", "all x y.((Does(x,y) & Person(y)) -> -Respectful(x))", "all x y.((Doing(x,y) & Person(y)) -> -Respectful(x,y))", "all x y.((DoingThings(x) & Person(y) & -Permission(y)) -> -Respectful(x,y))", "all x y.((Dothing(x) & Person(y) & -Permission(x,y)) -> -Respectful(x))", "all x y.((Person(x) & Person(y) & DoseWithoutPermission(x,y)) -> -Respective(x))", "all x y.((Dothing(x) & Person(y) & -Permission(x,y)) -> -Respectful(x,y))", "all x y.((Doing(x,y) & Person(y)) -> -Respectful(x))", "all x y.((Does(x,y) & Person(y)) -> -Respectful(x,y))", "all x y.((Person(x) & Person(y)) -> -RespectfulToDo(x,y))", "all x y z.((Person(x) & Person(y) & Permission(z)) -> -Respectful(x,y,z))"]}
{"id": "enwn_validation_401", "nl": "You should respect people.", "fol": "", "prediction": ["all x.(RespectPeople(x) -> RespectPeople(x))", "all x y.((Person(x) & Person(y)) -> Respects(x,y))", "all x.((Person(x) & Respects(x)) -> Respects(x))", "all x.(RespectsPeople(x) -> RespectsPeople(x))", "all x.(RespectPeople(x) -> RespectsPeople(x))", "all x y.((Person(x) & Person(y)) -> Respect(x,y))", "all x.((Person(x) & Respect(x)) -> Respect(x))", "all x.((People(x) & Respect(x)) -> Respect(x))", "all x.(RespectPeople(x) -> RequiresRespect(x))", "all x.(RespectPeople(x) -> RespectPerson(x))", "all x y.((Person(x) & Person(y)) -> ShouldRespect(x,y))", "all x.(RespectPerson(x) -> RespectPerson(x))", "all x y.((Person(x) & Person(y)) -> Respects(x,y))", "all x.((Person(x) & Respect(x)) -> Respects(x))", "all x y.((Person(x) & Person(y)) -> Respect(x,y))", "all x y.((Person(x) & Person(y)) -> Respected(x,y))"]}
{"id": "enwn_validation_402", "nl": "It was disrespectful of the professor to hug the student.", "fol": "", "prediction": ["all x y.((Professor(x) & Student(y)) -> DisrespectfulToHur(x,y))", "all x y.((Professor(x) & Student(y)) -> DisrespectfulToHug(x,y))", "all x y.((Professor(x) & Student(y) & Hug(x,y)) -> Disrespectful(x,y))", "all x y.((Professor(x) & Student(y) & Hug(x,y)) -> Disrespectful(x))", "all x y.((Professor(x) & Student(y)) -> DisrespectfulToHung(x,y))", "all x y.((Professor(x) & Student(y)) -> Disrespectful(x,y))", "all x y.((Professor(x) & Student(y) & Hugs(x,y)) -> Disrespectful(x))", "all x y.((Professor(x) & Student(y)) -> DisrespectfulToHush(x,y))", "all x y.((Professor(x) & Student(y) & Hugs(x,y)) -> Disrespectful(x,y))", "all x y.((Professor(x) & Student(y)) -> DisrespectfulToH hug(x,y))", "all x y z.((Professor(x) & Student(y) & Professor(z)) -> DisrespectfulToHur(x,y,z))", "all x.((Professor(x) & Student(y)) -> DisrespectfulToHur(x,y))", "all x y z.((Professor(x) & Student(y) & Professor(z) & Hug(z,y)) -> Disrespectful(x,z))", "all x y z.((Professor(x) & Student(y) & Professor(z)) -> DisrespectfulToHug(x,y,z))", "all x y z.((Professor(x) & Student(y) & Professor(z) & Hug(y,z)) -> Disrespectful(x,y,z))", "all x.((Professor(x) & Student(y)) -> DisrespectfulToHug(x,y))"]}
{"id": "enwn_validation_403", "nl": "The professor should not have hugged the student.", "fol": "", "prediction": ["all x y.((Professor(x) & Student(y)) -> -Hungry(x,y))", "all x y.((Professor(x) & Student(y)) -> -Haggered(x,y))", "all x y.((Professor(x) & Student(y)) -> -Hungered(x,y))", "all x y.((Professor(x) & Student(y)) -> -Hagged(x,y))", "all x y.((Professor(x) & Student(y)) -> -Hungred(x,y))", "all x.((Professor(x) & Student(y)) -> -Hungry(x,y))", "all x.((Professor(x) & Student(y)) -> -Haggered(x,y))", "all x y.((Professor(x) & Student(y)) -> -Hagged(x,y))", "all x y.((Professor(x) & Student(y)) -> -Hugged(x,y))", "all x.((Professor(x) & Student(y)) -> -Hungered(x,y))", "all x y.((Professor(x) & Student(y)) -> -Hugged(x,y))", "all x.((Professor(x) & Student(y)) -> -Hagged(x,y))", "all x y.((Professor(x) & Student(y)) -> -Hugged(x,y))", "all x y.((Professor(x) & Student(y)) -> -Hungried(x,y))", "all x.((Professor(x) & Student(y)) -> -Hungred(x,y))", "all x.((Professor(x) & Student(y)) -> -Hugged(x,y))"]}
{"id": "enwn_validation_404", "nl": "Knowing the paper's authors does not reflect the paper's merit.", "fol": "", "prediction": ["all x y.((Paper(x) & Author(y)) -> -ReflectsMerit(x,y))", "all x y.((Paper(x) & Author(y) & Knows(x,y)) -> -ReflectsMerit(x,y))", "all x.((Paper(x) & KnowsAuthors(x)) -> -ReflectsMerit(x))", "all x.((KnowsPaperAuthors(x) & -ReflectsMerit(x)) -> -ReflectsMerit(x))", "all x.((KnowsAuthors(x) & -ReflectsMerit(x)) -> -ReflectsMerit(x))", "all x y z.((Paper(x) & Author(y) & Author(z)) -> -ReflectsMerit(x,y,z))", "all x y.((Paper(x) & Author(y) & Knowing(x,y)) -> -ReflectsMerit(x,y))", "all x y.((Paper(x) & Author(y)) -> -ReflectsMeal(x,y))", "all x y.((Paper(x) & Author(y) & Knows(x,y)) -> -ReflectsMerit(x))", "all x y.((Page(x) & Author(y)) -> -ReflectsMerit(x,y))", "all x.((KnowsAuthors(x) & Paper(x)) -> -ReflectsMerit(x))", "all x.(KnowsAuthors(x) -> -ReflectsMerit(x))", "all x y.((Paper(x) & Authors(y)) -> -ReflectsMerit(x,y))", "all x.((KnowsAuthors(x) & Paper(y)) -> -ReflectsMerit(x,y))", "all x y.((Paper(x) & Paper(y)) -> -ReflectsMerit(x,y))", "all x.((KnowsPaperAuthors(x) & -ReflectsMerit(x)) -> -RepresentsMerit(x))"]}
{"id": "enwn_validation_405", "nl": "You should score \npapers based on merit.", "fol": "", "prediction": ["all x.(ScorePaper(x) -> BasedOnMerit(x))", "all x y.((Paper(x) & Merit(y)) -> Scores(x,y))", "all x y.((Paper(x) & Merit(y)) -> Score(x,y))", "all x y.((Paper(x) & Merit(y)) -> ScoresBasedOn(x,y))", "all x.(ScorePaper(x) -> BasedOnMean(x))", "all x.((Paper(x) & BasedOnMerit(x)) -> Scores(x))", "all x.((Paper(x) & Merit(x)) -> Scores(x,y))", "all x.((Paper(x) & BasedOnMerit(x)) -> Scores(x,y))", "all x y.((Paper(x) & Merit(y)) -> ScoresOn(x,y))", "all x.((Paper(x) & Merit(x)) -> Scores(x))", "all x.((Paper(x) & Merit(x)) -> Score(x,y))", "all x.(ScorePapers(x) -> BasedOnMerit(x))", "all x.(ScorePaper(x) -> BasedOnMerit(x))", "all x y.((Paper(x) & Merit(y)) -> ShouldScore(x,y))", "all x.((Paper(x) & BasedOnMerit(x)) -> ShouldScore(x,y))", "all x.((Paper(x) & BasedOnMerit(x)) -> Score(x))"]}
{"id": "enwn_validation_406", "nl": "Andy gave a high score to the paper because he knew the authors.", "fol": "", "prediction": ["all x y.((Andy(x) & Paper(y) & KnowsAuthors(x,y)) -> HighScore(x,y))", "all x y.((Andy(x) & Paper(y) & KnewAuthors(x,y)) -> HighScore(x,y))", "all x y z.((Andy(x) & Paper(y) & Author(z)) -> HighScore(x,y,z))", "all x y.((Article(x) & Paper(y) & KnowsAuthors(x,y)) -> HighScore(x,y))", "all x y.((Andy(x) & Paper(y) & KnowsAuthors(x,y)) -> GivesHighScore(x,y))", "all x y.((Andy(x) & Paper(y) & KnownAuthors(x,y)) -> HighScore(x,y))", "all x y z.((Andy(x) & Paper(y) & Author(z) & Knows(x,y,z)) -> HighScore(x,y))", "all x y z.((Andy(x) & Paper(y) & Author(z)) -> (GaveHighScore(x,y) & Knows(x,z)))", "all x y.((Article(x) & Paper(y) & KnewAuthors(x,y)) -> HighScore(x,y))", "all x y.((Article(x) & Paper(y) & KnowsAuthors(x,y)) -> GivesHighScore(x,y))", "all x y z.((Andy(x) & Paper(y) & Author(z)) -> (HighScore(x,y) & Knows(x,z)))", "all x y.((Addict(x) & Paper(y) & KnowsAuthors(x,y)) -> HighScore(x,y))", "all x y.((Andy(x) & Paper(y)) -> HighScore(x,y))", "all x y.((Andy(x) & Paper(y)) -> (HighScore(x,y) & KnowsAuthors(x,y)))", "all x y z.((Andy(x) & Paper(y) & Author(z) & Knows(x,y)) -> HighScore(x,y,z))", "all x y z.((Andy(x) & Paper(y) & Author(z) & Knows(x,y)) -> HighScore(x,y))"]}
{"id": "enwn_validation_407", "nl": "Giving a high score to a paper because you know the authors is wrong.", "fol": "", "prediction": ["all x y.((HighScore(x) & Paper(y) & KnowsAuthors(x,y)) -> Wrong(x))", "all x y.((HighScore(x) & Paper(y) & KnowsAuthors(x,y)) -> Worst(x))", "all x y.((HighScore(x) & Paper(y) & KnowsAuthors(x,y)) -> IsWrong(x))", "all x y.((HighScore(x) & Paper(y) & KnowsAuthor(x,y)) -> Wrong(x))", "all x y.((Paper(x) & Paper(y) & KnowsAuthors(x,y)) -> IsWrong(x))", "all x y z.((HighScore(x) & Paper(y) & Author(z) & Knows(x,z)) -> Wrong(x))", "all x y.((Paper(x) & Paper(y) & KnowsAuthors(x,y)) -> WrongScore(x,y))", "all x y.((HighScore(x) & Paper(y) & KnowsAuthors(x,y)) -> Wrong(y))", "all x y z.((HighScore(x) & Paper(y) & Author(z) & Knows(x,z)) -> Wrong(y))", "all x y z.((HighScore(x) & Paper(y) & Author(z) & Knows(x,z)) -> IsWrong(x))", "all x y.((HighScore(x) & Paper(y) & KnowsAuthor(x,y)) -> IsWrong(x))", "all x y z.((HighScore(x) & Paper(y) & Author(z) & Knows(y,z)) -> Wrong(y))", "all x y.((HighScore(x) & Paper(y) & KnowsAuthors(y)) -> Wrong(x,y))", "all x y z.((HighScore(x) & Paper(y) & Author(z) & Knows(x,y,z)) -> Wrong(x))", "all x y.((Paper(x) & Paper(y) & KnowsAuthors(x,y)) -> WrongScore(x))", "all x y.((HighScore(x) & Paper(y) & KnowsAuthor(x,y)) -> Worst(x))"]}
{"id": "enwn_validation_408", "nl": "Andy should not have scored the paper based on how well he knew the authors.", "fol": "", "prediction": ["all x.((Andy(x) & WellKnowsAuthors(x)) -> -ScoredPaper(x))", "all x.((Andy(x) & WellKnowedAuthors(x)) -> -ScoredPaper(x))", "all x y.((Andy(x) & Paper(y) & WellKnowsAuthors(x,y)) -> -Scored(x,y))", "all x.((Andy(x) & WellKnewAuthors(x)) -> -ScoredPaper(x))", "all x.((Andy(x) & KnowsAuthors(x)) -> -ScoredPaper(x))", "all x.((Andy(x) & WellKnowsAuthors(x)) -> -ScoredPaper(x,y))", "all x y.((Andy(x) & Paper(y) & WellKnowsAuthors(x,y)) -> -Score(x,y))", "all x y.((Andy(x) & Paper(y) & WellKnowedAuthors(x,y)) -> -Scored(x,y))", "all x y.((Andy(x) & Paper(y)) -> -ScoredBasedOnKnowledge(x,y))", "all x.((Andy(x) & WellKnowedAuthors(x)) -> -ScoredPaper(x,y))", "all x.((Andy(x) & WellKnowsAuthors(x,y)) -> -ScoredPaper(x,y))", "all x y.((Article(x) & Paper(y) & WellKnowsAuthors(x,y)) -> -Scored(x,y))", "all x y.((Andy(x) & Paper(y) & KnowsAuthors(x,y)) -> -Scored(x,y))", "all x.((Andy(x) & WellKnewAuthors(x)) -> -ScoredPaper(x,y))", "all x.((Andy(x) & KnewAuthors(x)) -> -ScoredPaper(x))", "all x y.((Article(x) & Paper(y) & WellKnowsAuthors(x,y)) -> -Score(x,y))"]}
{"id": "enwn_validation_409", "nl": "Throwing things out of frustration is an example of having a temper tantrum.", "fol": "", "prediction": ["all x.((TurnsOutFrustration(x) & HasTemperament(x)) -> HasTemperament(x))", "all x.((TurnsOutOfFrustration(x) & HasTemperament(x)) -> HasTemperament(x))", "all x.((TwoOutOfFrustration(x) & ThrowsOutOfFrustration(x)) -> TemperamentTentrum(x))", "all x.((TwoOutOfFrustration(x) & ThrowsOutOfFrustration(x)) -> TemperTanrum(x))", "all x.((TwoOutOfFrustration(x) & ThrowsOutOfFrustration(x)) -> TemperamentTanrum(x))", "all x.(TurningOutFrustration(x) -> TemperamentTentrum(x))", "all x.((Treatment(x) & ThrowsOutFrustration(x)) -> Temperament(x))", "all x.((Treatment(x) & ThrowsOutFrustration(x)) -> TempestTanrum(x))", "all x.(TurningOutFrustration(x) -> TemperamentTanrum(x))", "all x.(TurnsOutFrustration(x) -> TemperamentTanrum(x))", "all x.((TwoOutOfFrustration(x) & ThrowsOutOfFrustration(x)) -> TemperTentrum(x))", "all x.((Treatment(x) & ThrowsOutFrustration(x)) -> Temperant(x))", "all x.(TurnsOutFrustration(x) -> TemperamentTentrum(x))", "all x.((ThrewsOutFrustration(x) & Frustration(x)) -> TemperamentTentrum(x))", "all x.((Treatment(x) & ThrowsOutFrustration(x)) -> TempestTentrum(x))", "all x.(TurningOutFrustration(x) -> TemperTanrum(x))"]}
{"id": "enwn_validation_410", "nl": "People should not let their emotions get out of control.", "fol": "", "prediction": ["all x.((Person(x) & -LetsEmotionsGetOutOfControl(x)) -> -LetsEmotionsGetOutOfControl(x))", "all x.((Person(x) & -LetsEmotionsOutOfControl(x)) -> -LetsEmotionsGetOutOfControl(x))", "all x.(Person(x) -> -LetsEmotionsGetOutOfControl(x))", "all x.((Person(x) & -LetEmotionsGetOutOfControl(x)) -> -LetEmotionsGetOutOfControl(x))", "all x.((Person(x) & -LetsEmotionsOutOfControl(x)) -> -LetsEmotionsOutOfControl(x))", "all x.((People(x) & -LetsEmotionsGetOutOfControl(x)) -> -LetsEmotionsGetOutOfControl(x))", "all x y.((Person(x) & Emotion(y)) -> -LetsOutOfControl(x,y))", "all x y.((Person(x) & Emotion(y)) -> -LetsGetOutOfControl(x,y))", "all x.((Person(x) & -LaysEmotionsOutOfControl(x)) -> -LetsEmotionsGetOutOfControl(x))", "all x.(People(x) -> -LetsEmotionsGetOutOfControl(x))", "all x.((Person(x) & -LetEmotionsOutOfControl(x)) -> -LetEmotionsGetOutOfControl(x))", "all x.((People(x) & -LetEmotionsGetOutOfControl(x)) -> -LetEmotionsGetOutOfControl(x))", "all x.((People(x) & -LetsEmotionsOutOfControl(x)) -> -LetsEmotionsGetOutOfControl(x))", "all x.((Person(x) & -LaysEmotionsOutOfControl(x)) -> -LaysEmotionsOutOfControl(x))", "all x y.((Person(x) & Emotions(y)) -> -LetsGetOutOfControl(x,y))", "all x.(Person(x) -> -LetsEmotionsOutOfControl(x))"]}
{"id": "enwn_validation_411", "nl": "Having a temper tantrum in public means you are not in control of your emotions.", "fol": "", "prediction": ["all x.((TemperTentrum(x) & Public(x)) -> -InControlOfEmotions(x))", "all x.((TemperTanner(x) & Public(x)) -> -InControlOfEmotions(x))", "all x.((TemperTanzrum(x) & Public(x)) -> -InControlOfEmotions(x))", "all x.((TemperTentrum(x) & InPublic(x)) -> -InControlOfEmotions(x))", "all x.((TemperTanner(x) & InPublic(x)) -> -InControlOfEmotions(x))", "all x.((TemperTandem(x) & Public(x)) -> -InControlOfEmotions(x))", "all x.((TemperTangrum(x) & Public(x)) -> -InControlOfEmotions(x))", "all x.((TemperThur(x) & Public(x)) -> -InControlOfEmotions(x))", "all x.((TemperTantrum(x) & Public(x)) -> -InControlOfEmotions(x))", "all x.((TemperTanzrum(x) & InPublic(x)) -> -InControlOfEmotions(x))", "all x.((TemperTentrum(x) & Public(x)) -> -ControlsEmotions(x))", "all x.((Pentrum(x) & Public(x)) -> -InControlOfEmotions(x))", "all x.((TemperTanner(x) & Public(x)) -> -ControlsEmotions(x))", "all x.(TemperTentrum(x) -> -InControlOfEmotions(x))", "all x.((TemperTentrum(x) & InPublic(x)) -> -ControlsEmotions(x))", "all x.(TemperTanner(x) -> -InControlOfEmotions(x))"]}
{"id": "enwn_validation_412", "nl": "Martha threw a chair out of frustration while she was at the DMV.", "fol": "", "prediction": ["all x y.((Martha(x) & DMV(y)) -> ThrewChairOutOfFrustration(x,y))", "all x y z.((Martha(x) & Chair(y) & DMV(z)) -> ThrewOutOfFrustration(x,y,z))", "all x y.((Mama(x) & DMV(y)) -> ThrewChairOutOfFrustration(x,y))", "all x y z.((Mama(x) & Chair(y) & DMV(z)) -> ThrewOutOfFrustration(x,y,z))", "all x y.((Martha(x) & DMV(y)) -> ThrowsChairOutOfFrustration(x,y))", "all x y.((Mama(x) & DMV(y)) -> ThrowsChairOutOfFrustration(x,y))", "all x y.((Mary(x) & DMV(y)) -> ThrewChairOutOfFrustration(x,y))", "all x.((Martha(x) & DMV(x)) -> ThrewChairOutOfFrustration(x))", "all x y z.((Martha(x) & Chair(y) & DMV(z)) -> ThrowsOutOfFrustration(x,y,z))", "all x y z.((Mama(x) & Chair(y) & DMV(z)) -> ThrowsOutOfFrustration(x,y,z))", "all x y z.((Martha(x) & Chair(y) & DMV(z)) -> ThrewOutOfFrustration(x,y))", "all x y.((Mary(x) & DMV(y)) -> ThrowsChairOutOfFrustration(x,y))", "all x.((Martha(x) & DMV(x)) -> ThrowsChairOutOfFrustration(x))", "all x y.((Matthew(x) & DMV(y)) -> ThrewChairOutOfFrustration(x,y))", "all x.((Martha(x) & AtDMV(x)) -> ThrewChairOutOfFrustration(x))", "all x y z.((Mama(x) & Chair(y) & DMV(z)) -> ThrewOutOfFrustration(x,y))"]}
{"id": "enwn_validation_413", "nl": "The DMV is a public location.", "fol": "", "prediction": ["all x.(DMV(x) -> PublicLocation(x))", "all x.((DMV(x) & PublicLocation(x)) -> PublicLocation(x))", "All x.(DMV(x) -> PublicLocation(x))", "all x y.((DMV(x) & PublicLocation(y)) -> PublicLocation(x))", "all x.(DMV(x) -> PublicLocation(x))", "all x y.((DMV(x) & PublicLocation(y)) -> PublicLocation(x,y))", "all x.((DMV(x) & PublicLocation(x)) -> LocatedIn(x,y))", "all x.(DVM(x) -> PublicLocation(x))", "all x.(DMVLocation(x) -> PublicLocation(x))", "all x y.((DMV(x) & PublicLocation(x)) -> PublicLocation(y))", "all x.(DomesticLocation(x) -> PublicLocation(x))", "all x.((DMV(x) & PublicLocation(x)) -> Open(x))", "all x y.((DMV(x) & PublicLocation(y)) -> LocatedIn(x,y))", "exists x.(DMV(x) & PublicLocation(x))", "all x.(Community(x) -> PublicLocation(x))", "all x y.((DMV(x) & PublicLocation(y)) -> Open(x,y))"]}
{"id": "enwn_validation_414", "nl": "People should not have temper tantrums in public.", "fol": "", "prediction": ["all x.((Person(x) & -HasTemperatureTentrum(x)) -> -HasTemperatureTentrum(x))", "all x y.((Person(x) & Public(y)) -> -HasTemperatureTentrum(x,y))", "all x.((Person(x) & -HasTemperatureTentrum(x)) -> -HasTemperature(x))", "all x.((Person(x) & -HasTemperament(x)) -> -HasTemperament(x))", "all x.((Person(x) & -HasTemperamentTentrum(x)) -> -HasTemperamentTentrum(x))", "all x y.((Person(x) & Public(y)) -> -TemperTentrum(x,y))", "all x.((Person(x) & -HasTemperatureTentrums(x)) -> -HasTemperatureTentrums(x))", "all x.((Person(x) & -HasTemperatureTentrum(x)) -> -HasTemperatureInPublic(x))", "all x.((Person(x) & -HasTemperatureTentrum(x)) -> -HasTemperatureTentrumInPublic(x))", "all x.((Person(x) & -HasTemperTentrum(x)) -> -HasTemperTentrum(x))", "all x.((Person(x) & -HasTemperatureTentrums(x)) -> -HasTemperatureTentrum(x))", "all x.((Person(x) & -HasTemperatureTentrums(x)) -> -HasTemperatureTentrumsInPublic(x))", "all x.((Person(x) & -TemperTentrum(x)) -> -PublicTentrum(x))", "all x y.((Person(x) & Public(y)) -> -HasTemperTentrum(x,y))", "all x.((Person(x) & -HasTemperatureTentrums(x)) -> -HasTemperatureTentrumInPublic(x))", "all x y.((Person(x) & Public(y)) -> -HasTemperatureTentrums(x,y))"]}
{"id": "enwn_validation_415", "nl": "People shouldn't throw things in public out of frustration.", "fol": "", "prediction": ["all x y.((Person(x) & Public(y)) -> -ThrewsOutOfFrustration(x,y))", "all x.((Person(x) & -ThrewsInPublicOutOfFrustration(x)) -> -ThrewsInPublicOutOfFrustration(x))", "all x.((Person(x) & -ThrewsInPublicOutOfFrustration(x)) -> -ThrewsOutOfFrustration(x))", "all x.((Person(x) & -ThrewsInPublic(x)) -> -Frustration(x))", "all x y.((Person(x) & Public(y)) -> -ThrewsInOutOfFrustration(x,y))", "all x.((Person(x) & -ThrewsInPublicOutOfFrustration(x)) -> -Frustrated(x))", "all x.((Person(x) & -Frustrated(x)) -> ThrowsInPublic(x))", "all x.((Person(x) & -Frustration(x)) -> ThrowsInPublic(x))", "all x.((Person(x) & -ThrewsInPublicOutOfFrustration(x)) -> -TurnsInPublicOutOfFrustration(x))", "all x.((Person(x) & -ThrewsInPublicOutOfFrustration(x)) -> -Frustration(x))", "all x.((Person(x) & -ThrewsInPublicOutOfFrustration(x)) -> -TurnsOutOfFrustration(x))", "all x.((Person(x) & -ThrewsInPublicOutOfFrustration(x)) -> -TargetsOutOfFrustration(x))", "all x.((People(x) & -ThrewInPublicOutOfFrustration(x)) -> -ThrewInPublicOutOfFrustration(x))", "all x.((Person(x) & -ThrowsInPublicOutOfFrustration(x)) -> -ThrewsInPublicOutOfFrustration(x))", "all x.((Person(x) & -ThrewInPublicOutOfFrustration(x)) -> -ThrewInPublicOutOfFrustration(x))", "all x.((Person(x) & -ThrewsInPublicOutOfFrustration(x)) -> -ThrewsInPublic(x))"]}
{"id": "enwn_validation_416", "nl": "Martha thew a chair out of frustration in public.", "fol": "", "prediction": ["all x y.((MarthaThew(x) & Chair(y)) -> OutOfFrustrationInPublic(x,y))", "all x y.((MarthaThew(x) & Chair(y)) -> OutOfFrustration(x,y))", "all x y z.((Martha(x) & Chair(y) & Public(z)) -> (Thew(x,y) & OutOfFrustration(x,z)))", "all x.((MarthaThew(x) & Chair(x)) -> OutOfFrustrationInPublic(x))", "all x y.((Marthathew(x) & Chair(y)) -> OutOfFrustrationInPublic(x,y))", "all x.((Marthathew(x) & Chair(x)) -> OutOfFrustrationInPublic(x))", "all x y.((Marthathew(x) & Chair(y)) -> OutOfFrustration(x,y))", "all x.((Marthathew(x) & Chair(y)) -> OutOfFrustration(x,y))", "all x.((Marthathew(x) & Chair(y)) -> OutOfFrustrationInPublic(x,y))", "all x.((MarthaThew(x) & Chair(y)) -> OutOfFrustration(x,y))", "all x.((MarthaThew(x) & Chair(y)) -> OutOfFrustrationInPublic(x,y))", "all x.((MarthaThew(x) & Chair(x)) -> OutOfFrustration(x))", "all x y.((Martha(x) & Chair(y)) -> FrustrationInPublic(x,y))", "all x.((Marthathew(x) & Chair(x)) -> OutOfFrustration(x))", "all x y z.((Martha(x) & Chair(y) & Frustration(z)) -> ThewOutOf(x,y,z))", "all x y.((Martha(x) & Chair(y)) -> (FrustrationInPublic(x,y) | FrustrationInPublic(y)))"]}
{"id": "enwn_validation_417", "nl": "Martha should not have thrown the chair.", "fol": "", "prediction": ["all x.((Martha(x) & Chair(y)) -> -Threw(x,y))", "Martha should not have thrown thechair.", "all x.(Martha(x) -> -ThrewChair(x))", "all x.((Martha(x) & Chair(y)) -> -HasThrew(x,y))", "all x.((Martha(x) & Chair(y)) -> ShouldNotHaveThrew(x,y))", "all x.((Martha(x) & Chair(x)) -> -Threw(x,y))", "all x.((Martha(x) & -ThrewChair(x)) -> -ThrewChair(x))", "all x.((Martha(x) & Chair(y)) -> -HadTower(x,y))", "all x.((Martha(x) & Chair(y)) -> -Washed(x,y))", "all x.((Martha(x) & Chair(y)) -> -HadThrew(x,y))", "all x.((Martha(x) & -ThrewChair(x)) -> -HasThrewChair(x))", "all x.((Martha(x) & Chair(y)) -> -Fhrew(x,y))", "all x.((Martha(x) & Chair(y)) -> ShouldntThrew(x,y))", "all x.((Martha(x) & Chair(y)) -> -Took(x,y))", "all x.((Martha(x) & -ThrewChair(x)) -> -HasThrew(x,Chair))", "all x.((Martha(x) & Chair(m)) -> -Threw(x,m))"]}
{"id": "enwn_validation_418", "nl": "Not helping someone in trouble is allowing a bad thing to happen to them.", "fol": "", "prediction": ["all x y.((Helping(x,y) & Person(y) & InTrouble(x,y)) -> AllowsBadThingToOccur(x,y))", "all x y.((HelpingInTrouble(x) & Person(y)) -> AllowsBadThingToOccur(x,y))", "all x y.((HelpsInTrouble(x) & Person(y)) -> AllowsBadThingToOccur(x,y))", "all x y.((Helping(x,y) & Person(y) & InTrouble(x,y)) -> AllowsBadThing(x,y))", "all x y.((Helping(x,y) & Person(y)) -> AllowsBadThingToOccur(x,y))", "all x y.((Helping(x,y) & Person(y)) -> AllowsBadThing(x,y))", "all x y.((Helping(x,y) & PersonInTrouble(y)) -> AllowsBadThingToOccur(x,y))", "all x.((HelpingInTrouble(x) & AllowingBadThing(x)) -> AllowingBadThingToOccur(x))", "all x.((HelpingInTrouble(x) & AllowingBadThing(x)) -> AllowsBadThingToOccur(x))", "all x.((HelpingInTrouble(x) & AllowingBadThingToOccur(x)) -> BadThing(x))", "all x y.((HelpingInTrouble(x) & Person(y)) -> AllowsBadThing(x,y))", "all x.((HelpsInTrouble(x) & AllowsBadThing(x)) -> AllowsBadThingToOccur(x))", "all x y.((HelpsInTrouble(x) & Person(y)) -> AllowsBadThing(x,y))", "all x y.((Helping(x,y) & PersonInTrouble(y)) -> AllowsBadThing(x,y))", "all x y.((Helping(x,y) & Trouble(y)) -> AllowsBadThing(x,y))", "all x y.((Helping(x,y) & PersonInTrouble(x)) -> AllowsBadThingToOccur(x,y))"]}
{"id": "enwn_validation_419", "nl": "Allowing a bad thing to happen to someone is considered harming them.", "fol": "", "prediction": ["all x y.((BadThing(x) & Person(y)) -> Harms(x,y))", "all x y.((BadThing(x) & Person(y) & HappensTo(x,y)) -> Harms(x,y))", "all x.((AllowsBadThing(x) & HappensToPerson(x)) -> Harms(x))", "all x y.((BadThing(x) & Person(y)) -> Harming(x,y))", "all x.((BadThing(x) & HappensToPerson(x)) -> Harms(x))", "all x y.((BadThing(x) & Person(y) & HappensTo(x,y)) -> Harms(x))", "all x.((AllowsBadThing(x) & HappensTo(x)) -> Harms(x))", "all x.((AllowsBadThing(x) & HappensTo(x,Person)) -> Harms(x))", "all x.((AllowsBadThing(x) & Person(x)) -> Harms(x))", "all x.((AllowsBadThing(x) & HappensTo(x,y)) -> Harms(x))", "all x y z.((BadThing(x) & Person(y) & BadThing(z) & HappensTo(y,z)) -> Harms(x,y))", "all x.((BadThing(x) & HappensTo(x,y)) -> Harms(x,y))", "all x y.((BadThing(x) & Bad(y)) -> Harms(x,y))", "all x.((AllowsBadThing(x) & HappensTo(x,y)) -> Harms(x,y))", "all x.((BadThing(x) & HappensTo(x,y)) -> Harms(x))", "all x.((BadThing(x) & HappensTo(x)) -> Harms(x))"]}
{"id": "enwn_validation_420", "nl": "You should not do something that harms someone else.", "fol": "", "prediction": ["all x y.((Does(x,y) & Person(y)) -> -Harms(x,y))", "all x.((Does(x,y) & Person(y)) -> -Harms(x,y))", "all x y.((Do(x) & Person(y)) -> -Harms(x,y))", "all x y.((Doing(x) & Person(y)) -> -Harms(x,y))", "all x y.((Do(x) & Person(y) & Harms(x,y)) -> -Do(x,y))", "all x.((Does(x) & HarmsAnother(x)) -> -Do(x))", "all x.((Do(x) & -HarmsAnother(x)) -> -Do(x))", "all x y.((Does(x) & Person(y)) -> -Harms(x,y))", "all x.((Do(x) & -HarmsAnother(x)) -> -Do(x))", "all x.((Do(x) & -HarmsAnother(x)) -> -HasAnother(x))", "all x.((Does(x) & HarmsAnother(x)) -> -HasAnother(x))", "all x.((Do(x) & -HarmsAnother(x)) -> -Do(x,y))", "all x.((Do(x) & HarmsAnother(x)) -> -Do(x))", "all x.((Does(x) & HarmsAnother(x)) -> -Do(x,y))", "all x y.((Doing(x) & Person(y) & Harms(x,y)) -> -Do(x,y))", "all x y.((Do(x) & Person(y) & Harms(x,y)) -> -Do(x,y))"]}
{"id": "enwn_validation_421", "nl": "Joey cried out for help when he was being bullied.", "fol": "", "prediction": ["all x.((Joey(x) & Bullied(x)) -> CriesOutForHelp(x))", "all x y.((Joey(x) & Bullied(y)) -> CriesOutForHelp(x,y))", "all x.((Joey(x) & Bullied(x)) -> CriedOutForHelp(x))", "all x y.((Joey(x) & Bullied(y)) -> CriedOutForHelp(x,y))", "all x.((Joey(x) & Bullied(x)) -> CrysOutForHelp(x))", "all x.((Joey(x) & Bullied(x)) -> CryedOutForHelp(x))", "all x y z.((Joey(x) & Bullied(y) & Bullied(z)) -> CriesOutForHelp(x,y,z))", "all x y.((Joey(x) & Bullied(y)) -> CrysOutForHelp(x,y))", "all x y.((Joey(x) & Bullied(y)) -> CryedOutForHelp(x,y))", "all x y z.((Joey(x) & Bullied(y) & CrysOutForHelp(x,y)) -> CriesOutForHelp(x,z))", "all x y z.((Joey(x) & Bullied(y) & Bullied(z)) -> CriedOutForHelp(x,y,z))", "all x.((Joey(x) & Bullied(x)) -> CriesForHelp(x))", "all x.((Jossey(x) & Bullied(x)) -> CriesOutForHelp(x))", "all x y.((Jossey(x) & Bullied(y)) -> CriesOutForHelp(x,y))", "all x y.((Blooded(x) & Joey(y)) -> CriesOutForHelp(y,x))", "all x.((Joey(x) & Bullied(x)) -> CriedOutForHelp(x))"]}
{"id": "enwn_validation_422", "nl": "Jan heard Joey but didn't do anything.", "fol": "", "prediction": ["all x y.((Jan(x) & Joey(y)) -> (Heard(x,y) & -Doed(x,y)))", "all x y.((Jan(x) & Joey(y)) -> (Heard(x,y) & -Does(x,y)))", "all x y.((Jan(x) & Joey(y)) -> (Heard(x,y) & -Does(x,y)))", "all x.((Jan(x) & Joey(y)) -> (Heard(x,y) & -Doed(x,y)))", "all x.((Jan(x) & Joey(x)) -> (Heard(x,Joey) & -Doed(x,Joey)))", "all x.((Jan(x) & Joey(y)) -> (Heard(x,y) & -Does(x,y)))", "all x.((Jan(x) & Joey(y)) -> (Heard(x,y) & -Does(x,y)))", "all x.((Jan(x) & Joey(x)) -> (Heard(x,Joey) & -Does(x,Joey)))", "all x.((Jan(x) & Joey(x)) -> (Heard(x,Joey) & -Does(x,Joey)))", "all x y.((Jan(x) & Joey(y)) -> (Heard(x,y) & -DoesWhat(x,y)))", "all x y.((Jan(x) & Joey(y)) -> (Heard(x,y) & DidNothing(x,y)))", "all x y.((Jan(x) & Joey(y)) -> (Heard(x,y) & -Doed(y,x)))", "all x.((Jan(x) & Joey(y)) -> (Heard(x,y) & -DoesWhat(x,y)))", "all x y.((Jan(x) & Joey(y)) -> (Heard(x,y) & -Doed(y)))", "all x.(Jan(x) -> (HeardJoey(x) & -Does(x)))", "all x.(Jan(x) -> (HeardJoey(x) & -DoedWhat(x)))"]}
{"id": "enwn_validation_423", "nl": "Not helping someone in trouble is considered harming them.", "fol": "", "prediction": ["all x.((HelpingInTrouble(x) & -HelpingInTrouble(x)) -> Harming(x))", "all x.((HelpsInTrouble(x) & -HelpsInTrouble(x)) -> HarmsInTrouble(x))", "all x.((HelpingInTrouble(x) & -HelpingInTrouble(x)) -> HarmingInTrouble(x))", "all x.((HelpingInTrouble(x) & -HelpingInTrouble(x)) -> HarmsInTrouble(x))", "all x.((Helping(x) & PersonInTrouble(x)) -> Harming(x))", "all x.((HelpsInTrouble(x) & -HelpsInTrouble(x)) -> Harms(x))", "all x.((Helping(x) & InTrouble(x)) -> Harming(x))", "all x.((Helping(x) & PersonInTrouble(x)) -> Harms(x))", "all x.((HelpingInTrouble(x) & -HelpingInTrouble(x)) -> Harms(x))", "all x.((HelpingInTrouble(x) & -Helping(x)) -> Harming(x))", "all x.((Helping(x) & InTrouble(x)) -> Harms(x))", "all x.((HelpingInTrouble(x) & NotHelpingInTrouble(x)) -> Harming(x))", "all x.((Helping(x) & Trouble(x)) -> Harming(x))", "all x.((HelpingInTrouble(x) & NotHelpingInTrouble(x)) -> HarmingInTrouble(x))", "all x.((HelpingInTrouble(x) & NotHelping(x)) -> Harming(x))", "all x y.((Helping(x,y) & Person(y)) -> Harms(x,y))"]}
{"id": "enwn_validation_424", "nl": "You should help people in trouble.", "fol": "", "prediction": ["all x y.((Person(x) & Trouble(y)) -> Helps(x,y))", "all x y.((Person(x) & Trouble(y)) -> Help(x,y))", "all x y.((Person(x) & Trouble(y)) -> ShouldHelp(x,y))", "all x.(HelpsInTrouble(x) -> HelpsInTrouble(x))", "all x y.((Person(x) & Trouble(y)) -> HelpsIn(x,y))", "all x y.((People(x) & Trouble(y)) -> Helps(x,y))", "all x.(HelpInTrouble(x) -> HelpInTrouble(x))", "all x y z.((Person(x) & Trouble(y) & Person(z)) -> ShouldHelp(x,y,z))", "all x y z.((Person(x) & Trouble(y) & Person(z)) -> Helps(x,y,z))", "all x y.((People(x) & Trouble(y)) -> Help(x,y))", "all x.(HelpPerson(x) -> InTrouble(x))", "all x y.((Helps(x,y) & Person(y)) -> InTrouble(x,y))", "all x y.(((Person(x) & Trouble(y)) -> Helps(x,y))", "all x y.((Person(x) & Trouble(y)) -> HelpIn(x,y))", "all x y z.((Person(x) & Trouble(y) & Person(z)) -> Help(x,y,z))", "all x y z.((Person(x) & Trouble(y) & Person(z)) -> HelpsIn(x,y,z))"]}
{"id": "enwn_validation_425", "nl": "Jan heard Joey crying for help but didn't do anything.", "fol": "", "prediction": ["all x y.((Jan(x) & Joey(y)) -> CriesForHelp(x,y))", "all x.((Jan(x) & Joey(y)) -> CriesForHelp(x,y))", "all x y.((Jan(x) & Joey(y)) -> (CriesForHelp(y,x) & -DoesWhat(y,x)))", "all x y.((Jan(x) & Joey(y)) -> (CriesForHelp(y,x) & -Does(y,x)))", "all x y.((Jan(x) & Joey(y)) -> (HeardCryingForHelp(x,y) & -Does(x,y)))", "all x y.((Jan(x) & Joey(y) & CriesForHelp(x,y)) -> -Does(x,y))", "all x y.((Jan(x) & Joey(y)) -> (CriesForHelp(x,y) & -Does(x,y)))", "all x.((Jan(x) & Joey(y)) -> (CriesForHelp(y,x) & -DoesWhat(y,x)))", "all x y.((Jan(x) & Joey(y)) -> (CriesForHelp(x,y) & -DoesWhat(x,y)))", "all x y.((Jan(x) & Joey(y) & CriesForHelp(y,x)) -> -Does(x,y))", "all x y.((Jan(x) & Joey(y)) -> (HeardCrying(x,y) & -Does(x,y)))", "all x y.((Jan(x) & Joey(y)) -> (CriesForHelp(x,y) & -Does(y,x)))", "all x y.((Jan(x) & Joey(y)) -> (HeardCryingForHelp(x,y) & -DoesWhat(x,y)))", "all x y.((Jan(x) & Joey(y) & CriesForHelp(x,y)) -> -DoesWhat(x,y))", "all x y.((Jan(x) & Joey(y)) -> (CriesForHelp(x,y) & -DoesWhat(y,x)))", "all x y.((Jan(x) & Joey(y)) -> (CriesForHelp(y,x) & -Does(x,y)))"]}
{"id": "enwn_validation_426", "nl": "Jan should have helped Joey.", "fol": "", "prediction": ["all x.((Jan(x) & Joey(y)) -> ShouldHaveHelped(x,y))", "all x y.((Jan(x) & Joey(y)) -> ShouldHaveHelped(x,y))", "all x.((Jan(x) & Joey(y)) -> ShouldHelped(x,y))", "all x y.((Jan(x) & Joey(y)) -> ShouldHelped(x,y))", "all x.((Jan(x) & Joey(y)) -> ShouldHadHelped(x,y))", "All x y.((Jan(x) & Joey(y)) -> ShouldHaveHelped(x,y))", "all x y.((Jan(x) & Joey(y)) -> ShouldHadHelped(x,y))", "All x.((Jan(x) & Joey(y)) -> ShouldHaveHelped(x,y))", "all x.((Jan(x) & Joey(y)) -> Helped(x,y))", "Jan should have helped Joey.", "all x.((Jan(x) & Joey(x)) -> ShouldHaveHelped(x,Joey))", "All x.((Jan(x) & Joey(y)) -> ShouldHelped(x,y))", "all x y.((Jan(x) & Joey(y)) -> Helped(x,y))", "All x y.((Jan(x) & Joey(y)) -> ShouldHelped(x,y))", "all x.(Jan(x) -> ShouldHaveHelpedJoey(x))", "all x.((Jan(x) & Joey(x)) -> ShouldHaveHelped(x,Jan))"]}
{"id": "enwn_validation_427", "nl": "Mark took his kids out of school to help him beg other people for money.", "fol": "", "prediction": ["all x y.((Mark(x) & Kid(y)) -> (TakesOutOfSchool(x,y) & HelpsBegForMoney(x,y)))", "all x y.((Mark(x) & Kid(y)) -> TakesOutOfSchoolToHelpBegForMoney(x,y))", "all x y.((Mark(x) & Kid(y)) -> TakenOutOfSchoolToHelpBegForMoney(x,y))", "all x.(Mark(x) -> (TakesKidsOutOfSchool(x) & HelpsBegForMoney(x)))", "all x y.((Mark(x) & Kid(y)) -> (TakenOutOfSchool(x,y) & HelpedBegForMoney(x,y)))", "all x.(Mark(x) -> (TakesKidsOutOfSchool(x) & HelpsBegOthersForMoney(x)))", "all x y.((Mark(x) & Kid(y)) -> (TakenOutOfSchool(x,y) & HelpsBegForMoney(x,y)))", "all x y.((Mark(x) & Kid(y)) -> (TakesOutOfSchool(x,y) & BegsForMoney(x,y)))", "all x y.((Mark(x) & Kid(y)) -> (TakesOutOfSchool(x,y) & HelpsBegForMoney(x)))", "all x y z.((Mark(x) & Kid(y) & Person(z)) -> (TakesOutOfSchool(x,y) & HelpsBegForMoney(x,z)))", "all x y.((Mark(x) & Kid(y)) -> (TakesOutOfSchool(x,y) & HelpsBegOthersForMoney(x,y)))", "all x y.((Mark(x) & Kid(y)) -> (TakenOutOfSchool(x,y) & BegsForMoney(x,y)))", "all x.(Mark(x) -> (TakesKidsOutOfSchool(x) & HelpsBegOtherPeopleForMoney(x)))", "all x y.((Mark(x) & Kid(y) & OutOfSchool(x,y)) -> BegsForMoney(x,y))", "all x y.((Mark(x) & Kid(y)) -> (TakesOutOfSchool(x,y) & HelpsBeg(x,y)))", "all x y.((Mark(x) & Kid(y)) -> (TakesOutOfSchool(x,y) & HelpsBegOtherPeopleForMoney(x,y)))"]}
{"id": "enwn_validation_428", "nl": "Asking people for money is a way to make money.", "fol": "", "prediction": ["all x.(AsksForMoney(x) -> MakesMoney(x))", "all x y.((Person(x) & Person(y)) -> AsksForMoney(x,y))", "all x.((Person(x) & AsksForMoney(x)) -> MakesMoney(x))", "all x.(AskPeopleForMoney(x) -> MakesMoney(x))", "all x y.((Person(x) & Person(y) & AsksForMoney(x,y)) -> MakesMoney(x))", "all x.((People(x) & AsksForMoney(x)) -> MakesMoney(x))", "all x.((People(x) & AskForMoney(x)) -> MakesMoney(x))", "all x.(AskForMoney(x) -> MakesMoney(x))", "all x y.((Person(x) & AsksForMoney(x,y)) -> MakesMoney(x))", "all x y.((Person(x) & Person(y) & AsksForMoney(x,y)) -> MakesMoney(x,y))", "all x y.((People(x) & Person(y)) -> AsksForMoney(x,y))", "all x.(AsksPeopleForMoney(x) -> MakesMoney(x))", "all x.(AskPersonForMoney(x) -> MakeMoney(x))", "all x y.((Person(x) & Person(y)) -> MakesMoney(x,y))", "all x y.((Person(x) & AsksForMoney(x,y)) -> MakesMoney(y))", "all x y.((People(x) & AskForMoney(x,y)) -> MakesMoney(x))"]}
{"id": "enwn_validation_429", "nl": "Removing your kids from school is detrimental to them.", "fol": "", "prediction": ["all x y.((Kid(x) & School(y)) -> DetrimentalTo(x,y))", "all x.(RemovesKidsFromSchool(x) -> DetrimentalToKids(x))", "all x y.((Child(x) & School(y)) -> DetrimentalTo(x,y))", "all x y.((Kid(x) & School(y) & RemovingFrom(x,y)) -> DetrimentalTo(x,y))", "all x.(RemovesKidsFromSchool(x) -> DelayedToKids(x))", "all x y.((Kid(x) & School(y) & RemovedFrom(x,y)) -> DetrimentalTo(x,y))", "all x y.((Kid(x) & School(y) & Removing(x,y)) -> DetrimentalTo(x,y))", "all x.(RemovesKidsFromSchool(x) -> DelirableToKids(x))", "all x.(RemovingKidsFromSchool(x) -> DetrimentalToKids(x))", "all x.(RemovesKidsFromSchool(x) -> DeliriousToKids(x))", "all x y.((Kid(x) & School(y)) -> DelirableTo(x,y))", "all x y.((Kid(x) & School(y)) -> DelayedTo(x,y))", "all x y.((Kid(x) & School(y)) -> Detrimental(x,y))", "all x y.((Kid(x) & School(y)) -> Delayed(x,y))", "all x y.((Kid(x) & School(y) & RemovedFrom(x,y)) -> DelirableTo(x,y))", "all x y.((Kid(x) & School(y) & RemovingFrom(x,y)) -> DelirableTo(x,y))"]}
{"id": "enwn_validation_430", "nl": "To exploit someone is the action or fact of treating someone unfairly in order to benefit from their work.", "fol": "", "prediction": ["all x y.((Exploit(x) & Person(y)) -> (TreatsUnfairly(x,y) & BenefitsFromWork(x,y)))", "all x.((TreatsUnfairly(x) & BenefitsFromWork(x)) -> Exploits(x))", "all x y.((Opportunity(x) & Person(y)) -> (TreatsUnfairly(x,y) & BenefitsFromWork(x,y)))", "all x.(Exploit(x) -> (TreatsUnfairly(x) & BenefitsFromWork(x)))", "all x y.((Exploit(x) & Person(y)) -> (TreatsUnfairly(x,y) & BenefitsFromWork(y)))", "all x.((TreatsUnfairly(x) & BenefitsFromWork(x)) -> Exploit(x))", "all x y z.((Exploit(x) & Person(y) & Work(z)) -> (TreatsUnfairly(x,y) & BenefitsFromWork(x,z)))", "all x.((TreatsUnfairly(x) & BenefitsFromWork(x)) -> Exploiting(x))", "all x.(Exploit(x) -> (TreatsUnfairly(x) & BenefitsFromWork(x)))", "all x y.((Exploit(x) & Person(y)) -> (TreatsUnfairly(y,x) & BenefitsFromWork(y,x)))", "all x y.((Exploit(x) & Person(y)) -> (TreatsUnfairly(x,y) & BenefitsFromWork(y,x)))", "all x y.((Exploit(x) & Person(y)) -> (TraitsUnfairly(x,y) & BenefitsFromWork(x,y)))", "all x y.((Exploit(x) & Person(y)) -> (TreatsUnfairly(x,y) & BenefitsFromWork(x)))", "all x y z.((Exploit(x) & Person(y) & Work(z)) -> (TreatsUnfairly(x,y) & BenefitsFromWork(y,z)))", "all x y z.((Exploit(x) & Person(y) & Work(z)) -> (TreatsUnfairly(y,z) & BenefitsFromWork(y,z)))", "all x.(ToExploit(x) -> (TreatsUnfairly(x) & BenefitsFromWork(x)))"]}
{"id": "enwn_validation_431", "nl": "You should treat people fairly.", "fol": "", "prediction": ["all x.((Person(x) & FairTreatment(x)) -> FairTreatment(x))", "all x y.((Person(x) & Person(y)) -> FairTreatment(x,y))", "all x.((Person(x) & FairTranquilTreatment(x)) -> FairTranquilTreatment(x))", "all x y.((Person(x) & Person(y)) -> FairTranquility(x,y))", "all x y.((Person(x) & Person(y)) -> FairTranquilTreatment(x,y))", "all x y.((Person(x) & Person(y)) -> FairTranscription(x,y))", "all x.((Person(x) & FairTranquility(x)) -> FairTranquility(x))", "all x.(TreatPeopleFairly(x) -> TreatPeopleFairly(x))", "all x.((Person(x) & FairTranquility(x)) -> Treats(x,y))", "all x y.((Person(x) & Person(y)) -> FairTranquilt(x,y))", "all x.(TreatPeopleFairly(x) -> FairTreatment(x))", "all x.((People(x) & FairTreatment(x)) -> FairTreatment(x))", "all x.((Person(x) & FairTranscription(x)) -> FairTranscription(x))", "all x y.((Person(x) & Person(y)) -> FairTranquility(x))", "all x y.((Person(x) & Person(y)) -> FairTrait(x,y))", "all x.((Person(x) & FairTranscription(x)) -> Treats(x,y))"]}
{"id": "enwn_validation_432", "nl": "Mark took his kids out of school to help him make money.", "fol": "", "prediction": ["all x y.((Mark(x) & Kid(y)) -> TakenOutOfSchoolToMakeMoney(x,y))", "all x y.((Mark(x) & Kid(y)) -> TakesOutOfSchoolToMakeMoney(x,y))", "all x y.((Mark(x) & Kid(y)) -> TakenOutOfSchoolToHelpMakeMoney(x,y))", "all x y.((Mark(x) & Kid(y)) -> TakesOutOfSchoolToHelpMakeMoney(x,y))", "all x y.((Mark(x) & Kid(y)) -> TakenOutOfSchool(x,y))", "all x y.((Mark(x) & Kid(y) & OutOfSchool(x,y)) -> HelpsMakeMoney(x,y))", "all x y z.((Mark(x) & Kid(y) & Kid(z)) -> TakesOutOfSchoolToMakeMoney(x,y,z))", "all x y.((Mark(x) & Kids(y)) -> TakenOutOfSchoolToHelpMakeMoney(x,y))", "all x y.((Mark(x) & Kids(y)) -> TakenOutOfSchoolToMakeMoney(x,y))", "all x y.((Mark(x) & Kid(y) & OutOfSchool(x,y)) -> MadeMoney(x,y))", "all x.(Mark(x) -> (TakesKidsOutOfSchool(x) & MakesMoney(x)))", "all x.(Mark(x) -> (TakesKidsOutOfSchool(x) & HelpsMakeMoney(x)))", "all x y z.((Mark(x) & Kid(y) & Kid(z)) -> TakesOutOfSchoolToHelpMakeMoney(x,y,z))", "all x y z.((Mark(x) & Kid(y) & Kid(z)) -> TakenOutOfSchoolToMakeMoney(x,y,z))", "all x y.((Mark(x) & Kid(y)) -> TakesOutOfSchool(x,y))", "all x y z.((Mark(x) & Kid(y) & Kid(z)) -> TakenOutOfSchoolToHelpMakeMoney(x,y,z))"]}
{"id": "enwn_validation_433", "nl": "Mark is using his children to get money at their expense.", "fol": "", "prediction": ["all x y.((Mark(x) & Child(y)) -> UsesToGetMoneyAtExpense(x,y))", "all x y.((Mark(x) & Child(y)) -> UsesToGetMoney(x,y))", "all x y z.((Mark(x) & Child(y) & Child(z)) -> UsesToGetMoneyAtExpense(x,y,z))", "all x y z.((Mark(x) & Child(y) & Child(z)) -> UsesToGetMoney(x,y,z))", "all x y.((Mark(x) & Child(y)) -> GetsMoneyAtExpense(x,y))", "all x y.((Mark(x) & Child(y)) -> (Uses(x,y) & GetsMoneyAtExpense(x,y)))", "all x y.((Mark(x) & Child(y)) -> (UsesToGetMoney(x,y) & AtExpense(x,y)))", "all x y.((Mark(x) & Children(y)) -> UsesToGetMoneyAtExpense(x,y))", "all x y z.((Mark(x) & Child(y) & Child(z)) -> (Uses(x,y,z) & GetsMoneyAtExpense(x,y,z)))", "all x.((Mark(x) & UsesChildren(x)) -> GetsMoneyAtExpense(x))", "all x y z.((Mark(x) & Child(y) & Child(z)) -> (UsesToGetMoney(x,y,z) & AtExpense(y,z)))", "all x y z.((Mark(x) & Child(y) & Child(z)) -> (UsesToGetMoneyAtExpense(x,y,z)))", "all x y.((Mark(x) & Child(y)) -> UsesToGetMortgage(x,y))", "all x y z.((Mark(x) & Child(y) & Child(z)) -> (Uses(x,y,z) & GetsMoneyAtExpense(x,y)))", "all x y z.((Mark(x) & Child(y) & Child(z)) -> (UsesToGetMoney(x,y,z) & AtExpense(x,y)))", "all x y z.((Mark(x) & Child(y) & Child(z)) -> (Uses(x,y) & GetsMoneyAtExpense(x,z)))"]}
{"id": "enwn_validation_434", "nl": "Mark is exploiting his children.", "fol": "", "prediction": ["all x y.((Mark(x) & Child(y)) -> Exploiting(x,y))", "all x.((Mark(x) & Children(y)) -> Exploiting(x,y))", "all x y z.((Mark(x) & Child(y) & Child(z)) -> Exploiting(x,y,z))", "all x.((Mark(x) & ExploitingChildren(x)) -> ExploitingChildren(x))", "all x y.((Mark(x) & Child(y)) -> Exploits(x,y))", "all x y.((Mark(x) & Children(y)) -> Exploiting(x,y))", "all x.((Mark(x) & ExploitsChildren(x)) -> ExploitingChildren(x))", "all x.((Mark(x) & Child(y)) -> Exploiting(x,y))", "all x.((Mark(x) & -ExploitingChildren(x)) -> ExploitingChildren(x))", "all x y z.((Mark(x) & Child(y) & Child(z)) -> Exploits(x,y,z))", "all x.((Mark(x) & ExploitingChildren(x)) -> ExploitsChildren(x))", "all x.((Mark(x) & ExploitsChildren(x)) -> ExploitsChildren(x))", "all x.((Mark(x) & Children(y)) -> Exploits(x,y))", "all x y z.((Mark(x) & Child(y) & Child(z)) -> Exploiting(x,y))", "(ExploitingChildren(Mark) -> ExploitingChildren(Mark))", "Mark exploits his children."]}
{"id": "enwn_validation_435", "nl": "You should not exploit people.", "fol": "", "prediction": ["all x.((Person(x) & -Exploit(x)) -> -Exploit(x))", "all x.((People(x) & -Exploit(x)) -> -Exploit(x))", "all x.((Client(x) & -Exploit(x)) -> -Exploit(x))", "all x y.((Person(x) & Person(y)) -> -Exploit(x,y))", "all x.((Person(x) & -Exploit(x)) -> -(Exploit(x) & -Exploit(x))))", "all x.((Person(x) & -Exploit(x)) -> -(Exploit(x) & -Exploit(x)))", "all x.((Player(x) & -Exploit(x)) -> -Exploit(x))", "all x.((People(x) & -Exploit(x)) -> -(Exploit(x) & -Exploit(x)))", "all x.((People(x) & -Exploit(x)) -> -(Exploit(x) & -Exploit(x))))", "all x.((Person(x) & -Exploits(x)) -> -Exploits(x))", "all x.((Person(x) & -Exploit(x)) -> -(Exploit(x) | Exploit(x))))", "all x.((Person(x) & -Exploit(x)) -> -(Exploit(x) & Exploit(x))))", "all x.((Person(x) & -Exploit(x)) -> -Exploits(x))", "all x.((You(x) & -ExploitPeople(x)) -> -ExploitPeople(x))", "all x.((People(x) & -Exploit(x)) -> -(Exploit(x) | Exploit(x))))", "all x.((Person(x) & -Exploits(x)) -> -Exploit(x))"]}
{"id": "enwn_validation_436", "nl": "Mark should not be exploiting his children.", "fol": "", "prediction": ["all x.((Mark(x) & -ExploitingChildren(x)) -> -ExploitingChildren(x))", "all x.((Mark(x) & Children(y)) -> -Exploiting(x,y))", "all x y.((Mark(x) & Child(y)) -> -Exploiting(x,y))", "all x.((Mark(x) & Child(y)) -> -Exploiting(x,y))", "all x.((Mark(x) & -ExploitingChildren(x)) -> -(ExploitingChildren(x) | ExploitingChildren(x))))", "all x.((Mark(x) & -ExploitingChildren(x)) -> -(ExploitingChildren(x) & ExploitingChildren(x))))", "all x.((Mark(x) & -ExploitingChildren(x)) -> -(ExploitingChildren(x) & -ExploitingChildren(x)))", "Mark should not be exploiting his children.", "all x.((Mark(x) & -ExploitingChildren(x)) -> -(ExploitingChildren(x) & -ExploitingChildren(x))))", "all x.((Mark(x) & -ExploitingChildren(x)) -> -(ExploitingChildren(x) & ExploitingChildren(x)))", "all x.((Mark(x) & -ExploitsChildren(x)) -> -ExploitsChildren(x))", "all x.((Mark(x) & -ExploitingChildren(x)) -> -ExploitsChildren(x))", "all x.((Mark(x) & -ExploitingChildren(x)) -> -ExploitsChildren(x))", "all x.((Mark(x) & Children(x)) -> -Exploiting(x,y))", "all x.((Mark(x) & -ExploitingChildren(x)) -> -(ExploitingChildren(x) | -ExploitingChildren(x))))", "all x.((Mark(x) & -ExploitingChildren(x)) -> -ExplicitsChildren(x))"]}
{"id": "enwn_validation_437", "nl": "Deciding not to hire someone on the basis of their traits is one kind of discrimination.", "fol": "", "prediction": ["all x.((DecidedNotToHire(x) & BasedOnTraits(x)) -> Discrimination(x))", "all x y.((DecidedNotToHire(x,y) & Person(y)) -> Discrimination(x))", "all x y.((Decide(x) & Person(y) & -HiresOnBaseOfTraits(x,y)) -> Discrimination(x))", "all x y.((Decide(x) & Person(y) & -HiresOnTraits(x,y)) -> Discrimination(x))", "all x y.((DecidedNotToHire(x,y) & Person(y) & BasedOnTraits(x,y)) -> Discrimination(x))", "all x y.((Decide(x) & Person(y) & -HiresOnTreatments(x,y)) -> Discrimination(x))", "all x.((Decide(x) & -HiresOnBaseOfTraits(x)) -> Discrimination(x))", "all x.((Decide(x) & -HiresOnTreatments(x)) -> Discrimination(x))", "all x.((DecidingNotToHire(x) & BasedOnTraits(x)) -> Discrimination(x))", "all x y.((DecidedNotToHIRE(x,y) & Person(y)) -> Discrimination(x))", "all x.((Decide(x) & -HiresOnTraits(x)) -> Discrimination(x))", "all x.((Decide(x) & -HuntsOnTraits(x)) -> Discrimination(x))", "all x.((DecidedNotToHIRE(x) & BasedOnTraits(x)) -> Discrimination(x))", "all x.((Decide(x) & -HuntsOnTreatments(x)) -> Discrimination(x))", "all x.((Decide(x) & -HasTraits(x)) -> Discrimination(x))", "all x.((DecidedNotToHire(x) & BasedOnTreatments(x)) -> Discrimination(x))"]}
{"id": "enwn_validation_438", "nl": "It is unjust to discriminate on the basis of pregnancy.", "fol": "", "prediction": ["all x.((Discrimination(x) & Pregnancy(x)) -> Unjust(x))", "all x.((Discrimination(x) & Pregnancies(x)) -> Unjust(x))", "all x.((Discrimination(x) & Pregnancy(x)) -> Unjust(x))", "all x.((Discrimination(x) & BasedOnPregnancy(x)) -> Unjust(x))", "all x.(DiscriminationOnPregnancy(x) -> Unjust(x))", "all x.((Discriminate(x) & Pregnancy(x)) -> Unjust(x))", "all x y.((Discrimination(x) & Pregnancy(y)) -> Unjust(x,y))", "all x.((Discrimination(x) & PregnancyBase(x)) -> Unjust(x))", "all x.((Discrimination(x) & Pregnancies(x)) -> Unjust(x))", "all x y.((Discrimination(x) & Pregnancy(y)) -> Unjust(x))", "all x.((DiscriminateOnPregnancyBase(x)) -> Unjust(x))", "all x.((DiscriminationOnPregnancyBase(x)) -> Unjust(x))", "all x.((DiscriminateOnPregnancy(x)) -> Unjust(x))", "all x.((DiscriminationOnPregnancy(x)) -> Unjust(x))", "all x.(Discrimination(x) -> Unjust(x))", "all x.(DiscriminationOnPregnancy(x) -> Unjust(x))"]}
{"id": "enwn_validation_439", "nl": "You should treat people justly.\n", "fol": "", "prediction": ["all x.((Person(x) & TreatsJustly(x)) -> TreatsJustly(x))", "all x y.((Person(x) & Person(y)) -> TreatJustly(x,y))", "all x y.((Person(x) & Person(y)) -> TreatsJustly(x,y))", "all x.(TreatPeopleJustly(x) -> TreatPeopleJustly(x))", "all x y.((Person(x) & Person(y)) -> Treatjustly(x,y))", "all x.((Person(x) & TreatJustly(x)) -> TreatJustly(x))", "all x y.((People(x) & Person(y)) -> TreatJustly(x,y))", "all x.(TreatPerson(x) -> Justly(x))", "all x.(TreatsPeopleJustly(x) -> TreatsPeopleJustly(x))", "all x.((People(x) & TreatJustly(x)) -> TreatJustly(x))", "all x.((Person(x) & TreatJustly(x)) -> Treatjustly(x))", "all x.((Person(x) & TreatsJustly(x)) -> Justly(x))", "all x y.((Person(x) & Person(y)) -> JustlyTreats(x,y))", "all x.((Person(x) & Treat(x,y)) -> Justly(x))", "all x.((Person(x) & TreatsJustly(x)) -> ShouldTreatJustly(x))", "all x y.((Person(x) & Person(y)) -> JustlyTreat(x,y))"]}
{"id": "enwn_validation_440", "nl": "Victor did not hire Maddie because she was going on maternity leave soon.", "fol": "", "prediction": ["all x y.((Victor(x) & Maddie(y) & GoingOnMaternityLeave(y)) -> -Hired(x,y))", "all x y.((Victor(x) & Maddie(y) & GoingOnMaternityLeave(y)) -> -HasHired(x,y))", "all x y.((Victor(x) & Maddie(y) & GoingOnMaternityLeave(y)) -> -Holds(x,y))", "all x.((Victor(x) & Maddie(x) & GoingOnMaternityLeave(x)) -> -Hired(x,Maddie))", "all x y.((Victor(x) & Maddie(y) & GoingOnMaternityLeave(y)) -> -Hunts(x,y))", "all x y.((Victor(x) & Maddie(y) & GoingOnMaternityLeave(y,x)) -> -Hired(x,y))", "all x y.((Victor(x) & Maddie(y) & GoingOnMaternityLeave(y)) -> -Hires(x,y))", "all x.((Victor(x) & Maddie(x) & GoingOnMaternityLeave(x)) -> -HasHired(x,MaternityLeave))", "all x.((Victor(x) & Maddie(x) & GoingOnMaternityLeave(x)) -> -Holds(x,MaternityLeave))", "all x.((Victor(x) & Maddie(x) & GoingOnMaternityLeave(x)) -> -Hunts(x,MaternityLeave))", "all x.((Victor(x) & Maddie(x) & GoingOnMaternityLeave(x)) -> -Hires(x,Maddie))", "all x.((Victor(x) & Maddie(x) & GoingOnMaternityLeave(x)) -> -HasHired(x,Maddie))", "all x y.((Victor(x) & Maddie(y) & GoingOnMaternityLeave(y,x)) -> -Holds(x,y))", "all x y z.((Victor(x) & Maddie(y) & MaternityLeave(z) & GoingOn(y,z)) -> -Hired(x,y,z))", "all x.((Victor(x) & Maddie(x) & GoingOnMaternityLeave(x)) -> -Holds(x,Maddie))", "all x y z.((Victor(x) & Maddie(y) & MaternityLeave(z) & GoingOn(y,z)) -> -Holds(x,y,z))"]}
{"id": "enwn_validation_441", "nl": "If someone is going on maternity leave then they are pregnant.", "fol": "", "prediction": ["all x.((Person(x) & GoingOnMaternityLeave(x)) -> Pregnant(x))", "all x.((Person(x) & GoingOnMmaternityLeave(x)) -> Pregnant(x))", "all x.(MaternityLeave(x) -> Pregnant(x))", "all x.((MaternityLeave(x) & GoingOn(x)) -> Pregnant(x))", "all x.((Person(x) & GoingOnMaturityLeave(x)) -> Pregnant(x))", "all x.((MaternityLeave(x) & GoingOn(x,y)) -> Pregnant(x))", "all x.((GoesOnMaturityLeave(x) & Pregnant(x)) -> GoingOnMaturityLeave(x))", "all x.((GoesOnMaternityLeave(x) & Pregnant(x)) -> GoingOnMaternityLeave(x))", "all x.((GoesOnMaternityLeave(x)) -> Pregnant(x))", "all x.((GoingOnMaternityLeave(x)) -> Pregnant(x))", "all x.((GoesOnMmaternityLeave(x)) -> Pregnant(x))", "all x.((GoesOnMaturityLeave(x)) -> Pregnant(x))", "all x.((GoingOnMmaternityLeave(x)) -> Pregnant(x))", "all x.((GoesOnMaturityLeave(x) & Pregnant(x)) -> GoesOnMaturityLeave(x))", "all x.((GoingOnMaturityLeave(x)) -> Pregnant(x))", "all x.((GoesOnMaturityLeave(x) & Pregnant(x)) -> Pregnant(x))"]}
{"id": "enwn_validation_442", "nl": "You shouldn't discriminate on the basis of pregnancy.", "fol": "", "prediction": ["all x.((Pregnancy(x) & -Discriminate(x)) -> -Discriminate(x))", "all x.((Paternity(x) & -Discriminate(x)) -> -Discriminate(x))", "all x.((Pregnancy(x) & -Discriminate(x)) -> -(Discriminate(x) & Discriminate(x)))", "all x.((Pregnant(x) & -Discriminate(x)) -> -Discriminate(x))", "all x.((Pregnancies(x) & -Discriminate(x)) -> -Discriminate(x))", "all x.((Patient(x) & -Discriminate(x)) -> -Discriminate(x))", "all x.((Pregnancy(x) & -Discrimination(x)) -> -Discrimination(x))", "all x.((Paternity(x) & -Discriminate(x)) -> -(Discriminate(x) & Discriminate(x)))", "all x.((Pregnancy(x) & -Discrimination(x)) -> -Discriminate(x))", "all x.((Pregnancy(x) & -Discrimination(x)) -> -Discriminate(x))", "all x.((Paternity(x) & -Discrimination(x)) -> -Discrimination(x))", "all x.((Pregnancy(x) & -Discrimination(x)) -> -(Discrimination(x) & Discrimination(x)))", "all x.((Paternity(x) & -Discrimination(x)) -> -Discriminate(x))", "all x.((Pregnancy(x) & -Discrimination(x)) -> -Discrimination(x))", "all x.((Paternity(x) & -Discrimination(x)) -> -Discriminate(x))", "all x.((Pregnancy(x) & -Discriminate(x)) -> -(Discriminate(x) | Discriminate(x))))"]}
{"id": "enwn_validation_443", "nl": "You shouldn't base hiring decisions off of whether or not someone is pregnant.", "fol": "", "prediction": ["all x.((HuntingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BaseHuntingDecision(x))", "all x.((HostingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BasesOn(x,y))", "all x.((HostingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BaseHuntingDecision(x))", "all x.((HuntingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BaseHiringDecision(x))", "all x.((HuntingDecision(x) & -(Pregnant(x) | Pregnant(x)))) -> -BaseHuntingDecision(x))", "all x.((HostingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BaseHiringDecision(x))", "all x.((HuntingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BasesOn(x,y))", "all x.((HostingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BasedOn(x,y))", "all x.((HuntingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BasedOn(x,y))", "all x.((HostingDecision(x) & -(Pregnant(x) | Pregnant(x)))) -> -BasesOn(x,y))", "all x.((HuntingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BasesOff(x))", "all x.((HosingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BasesOn(x,y))", "all x.((HiringDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BasesOn(x,y))", "all x.((HuntingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BasesOn(x,HuntingDecisions))", "all x.((HuntingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BasesOn(x,HuntingDecision))", "all x.((HostingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BasesOn(x,(x,y)))"]}
{"id": "enwn_validation_444", "nl": "Victor decided not to hire Maddie based on her pregnancy.", "fol": "", "prediction": ["all x.((Victor(x) & Maddie(x) & Pregnancy(x)) -> -Hunts(x,Maddie))", "all x.((Victor(x) & Maddie(x) & Pregnancy(x)) -> -Hires(x,Maddie))", "all x y.((Victor(x) & Maddie(y)) -> -Hunts(x,y))", "all x y.((Victor(x) & Maddie(y) & Pregnancy(y)) -> -Hunts(x,y))", "all x y.((Victor(x) & Maddie(y) & Pregnancy(y)) -> -Hires(x,y))", "all x.((Victor(x) & Maddie(x) & Pregnancy(x)) -> -HasHire(x,Maddie))", "all x.((Victor(x) & Maddie(y)) -> -Hunts(x,y))", "all x.((Victor(x) & Maddie(x) & Pregnancy(x)) -> -Holds(x,Maddie))", "all x y.((Victor(x) & Maddie(y)) -> -Holds(x,y))", "all x.((Victor(x) & Maddie(x)) -> -Hunts(x,Maddie))", "all x y.((Victor(x) & Maddie(y)) -> -HasHire(x,y))", "all x y.((Victor(x) & Maddie(y)) -> -Hires(x,y))", "all x y.((Victor(x) & Maddie(y)) -> -Has(x,y))", "all x y.((Victor(x) & Maddie(y) & Pregnancy(y)) -> -Holds(x,y))", "all x y.((Victor(x) & Maddie(y) & Pregnancy(y)) -> -HasHire(x,y))", "all x.((Victor(x) & Maddie(y)) -> -Holds(x,y))"]}
{"id": "enwn_validation_445", "nl": "Victor should not have based his decision off of Maddie's pregnancy.", "fol": "", "prediction": ["all x y.((Victor(x) & Maddie(y)) -> -BasedDecisionOff(x,y))", "all x y.((Victor(x) & Maddie(y)) -> -BasedDecisionOn(x,y))", "all x.((Victor(x) & Maddie(x)) -> -BasedDecisionOff(x,Maddie))", "all x.((Victor(x) & Maddie(x)) -> -BasedDecisionOffPregnancy(x,Maddie))", "all x y.((Victor(x) & Maddie(y)) -> -BasedDecisionOffMaddie(x,y))", "all x.((Victor(x) & Maddie(y)) -> -BasedDecisionOff(x,y))", "all x.((Victor(x) & Maddie(x)) -> -BasedDecisionOff(x,Maddie,Paternity))", "all x y.((Victoria(x) & Maddie(y)) -> -BasedDecisionOff(x,y))", "all x.((Victor(x) & Maddie(x)) -> -BasedDecisionOn(x,Maddie,Paternity))", "all x.((Victor(x) & Maddie(y)) -> -BasedDecisionOn(x,y))", "all x.((Victoria(x) & Maddie(x)) -> -BasedDecisionOff(x,Maddie))", "all x.((Victor(x) & Maddie(x)) -> -BasedDecisionOn(x,Maddie))", "all x y.((Victoria(x) & Maddie(y)) -> -BasedDecisionOn(x,y))", "all x.((Victor(x) & Maddie(x)) -> -BasedDecisionOffMaddie(x))", "all x y.((Victorian(x) & Maddie(y)) -> -BasedDecisionOff(x,y))", "all x.((Victoria(x) & Maddie(y)) -> -BasedDecisionOff(x,y))"]}
{"id": "enwn_validation_446", "nl": "If you're rude to people who hold a certain view, it means you don't respect that view.", "fol": "", "prediction": ["all x.((Rust(x) & HoldsSpecificView(x)) -> -RespectsSpecificView(x))", "all x y.((Rust(x) & Person(y) & HoldsSpecificView(y,x)) -> -RespectsSpecificView(x,y))", "all x y.((Rust(x) & Person(y) & HoldsSpecificView(x,y)) -> -RespectsSpecificView(x,y))", "all x y.((Rust(x) & Person(y) & HoldsSpecificView(y,x)) -> -RespectsView(x,y))", "all x.((Rule(x) & HoldsSpecificView(x)) -> -RespectsSpecificView(x))", "all x y.((Rule(x) & Person(y) & HoldsSpecificView(y,x)) -> -RespectsSpecificView(x,y))", "all x.((RuleToPeople(x) & HoldsSpecificView(x)) -> -RespectsSpecificView(x))", "all x y.((Rule(x) & Person(y) & HoldsSpecificView(x,y)) -> -RespectsSpecificView(x,y))", "all x y.((Rust(x) & Person(y) & HoldsSpecificView(x,y)) -> -RespectsView(x,y))", "all x y.((Rule(x) & Person(y) & HoldsSpecificView(y,x)) -> -RespectsView(x,y))", "all x y.((Rust(x) & Person(y) & HoldsSpecificView(y,x)) -> -Respects(x,y))", "all x y.((Rule(x) & Person(y) & HoldsSpecificView(x,y)) -> -RespectsView(x,y))", "all x y.((Rust(x) & Person(y) & HoldsSpecificView(y)) -> -RespectsSpecificView(x,y))", "all x y.((Rust(x) & People(y) & HoldsSpecificView(x,y)) -> -RespectsSpecificView(x,y))", "all x y.((Rust(x) & Person(y) & HoldsSpecificView(y,x)) -> -RespectsSpecificView(x))", "all x.((RuleToPerson(x) & HoldsSpecificView(x)) -> -RespectsSpecificView(x))"]}
{"id": "enwn_validation_447", "nl": "Religion is a kind of personal preference.", "fol": "", "prediction": ["all x.(Religion(x) -> PersonalPreference(x))", "all x.(Religion(x) -> PersonalPreferred(x))", "all x.(Religion(x) -> PersonalPreference(x))", "all x.(Religion(x) -> PersonalPriority(x))", "all x.(Religion(x) -> PersonalPrating(x))", "all x.(Religion(x) -> PersonalPr\u00e4ference(x))", "all x y.((Religion(x) & PersonalPreference(y)) -> PersonalPreference(x,y))", "all x.(Religion(x) -> PersonalPragmatism(x))", "all x y.((Religion(x) & PersonalPreferred(y)) -> PersonalPreferred(x,y))", "all x.(Religion(x) -> PersonalPurpose(x))", "all x.(Religion(x) -> PersonalPath(x))", "all x.(Religion(x) -> PersonalPreferred(x))", "all x y.((Religion(x) & PersonalPreference(y)) -> PersonalPreference(x))", "all x y.((Religion(x) & PersonalPreference(y)) -> PersonalPreferred(x,y))", "all x.(Religion(x) -> PersonalPosition(x))", "all x.(Religious(x) -> PersonalPreference(x))"]}
{"id": "enwn_validation_448", "nl": "You should be tolerant.", "fol": "", "prediction": ["all x.(Tolerant(x) -> Tolerant(x))", "all x.(Tolerant(x) -> -Tolerant(x))", "all x.(Tolerant(x) -> NotTolerant(x))", "all x.(Tolerant(x) -> ShouldBe(x))", "all x.((Tolerant(x) & -Tolerant(x)) -> -Tolerant(x))", "all x.((Tolerant(x) & Tolerant(x)) -> Tolerant(x))", "all x.((Tolerant(x) & Tolerant(x)) -> -Tolerant(x))", "all x.((Tolerant(x) & -Tolerant(x)) -> Tolerant(x))", "all x.(Tolerant(x) -> Acceptable(x))", "all x.((Tolerant(x)) -> Tolerant(x))", "all x.(Tolerant(x) -> -(Tolerant(x) | Tolerant(x)))", "all x.(Tolerant(x) -> -(Tolerant(x) | Tolerant(x))))", "all x.((Tolerant(x) & Tolerant(x)) -> Acceptable(x))", "all x.(Tolerant(x) -> -(Tolerant(x) & Tolerant(x)))", "all x.(Tolerant(x) -> Tolerant(x))", "all x.((Tolerant(x) & Tolerant(x)) -> NotTolerant(x))"]}
{"id": "enwn_validation_449", "nl": "Respecting other people's preferences is a form of tolerance.", "fol": "", "prediction": ["all x.(RespectsOtherPeoplePreferences(x) -> Tolerance(x))", "all x.(RespectingOtherPeoplePreferences(x) -> Tolerance(x))", "all x.(RespectsOtherPeoplePreferences(x) -> Tolerance(x))", "all x.(RespectingOtherPeoplePreferences(x) -> Tolerance(x))", "all x y.((Person(x) & Person(y)) -> RespectsPreferences(x,y))", "all x y.((Person(x) & Person(y) & Respects(x,y)) -> Tolerance(x))", "all x.((RespectsOtherPeoplePreferences(x) & Tolerance(x)) -> Tolerance(x))", "all x y.((Person(x) & Person(y) & Respects(x,y)) -> Tolerance(x))", "all x y.((Person(x) & Person(y)) -> Respects(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsPositives(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsPositions(x,y))", "all x.(RespectsOthersPreferences(x) -> Tolerance(x))", "all x.((RespectsOtherPeoplePreferences(x) & Tolerance(x)) -> Tolerance(x))", "all x.(RespectingOthersPreferences(x) -> Tolerance(x))", "all x y.((Respects(x,y) & Person(y)) -> Tolerance(x))", "all x y.((Respects(x,y) & Person(y)) -> Tolerance(x))"]}
{"id": "enwn_validation_450", "nl": "Eugene is rude to people who do not share his religion.", "fol": "", "prediction": ["all x.((Eugene(x) & People(x) & -ShareReligion(x)) -> Rust(x))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(x,y)) -> Rust(x))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(x,y)) -> Rust(x,y))", "all x.((Eugene(x) & Person(x) & -ShareReligion(x)) -> Rust(x))", "all x.((Eugene(x) & -ShareReligion(x)) -> Rust(x))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(y)) -> Rust(x,y))", "all x.((Eugene(x) & People(x) & -ShareReligion(x)) -> Rusty(x))", "all x y.((Eugene(x) & People(y) & -ShareReligion(x,y)) -> Rust(x))", "all x y.((Eugene(x) & People(y) & -ShareReligion(x,y)) -> Rust(x,y))", "all x.((Eugene(x) & People(x) & -ShareReligion(x)) -> Rustic(x))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(x)) -> Rust(x,y))", "all x.((Eugene(x) & People(y) & -ShareReligion(x,y)) -> Rust(x))", "all x.((Eugene(x) & Person(x) & -ShareReligion(x)) -> Rusty(x))", "all x.((Eugene(x) & Person(y) & -ShareReligion(x,y)) -> Rust(x))", "all x.((Eugene(x) & People(x) & -SharingReligion(x)) -> Rust(x))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(y)) -> Rust(x))"]}
{"id": "enwn_validation_451", "nl": "If you're rude to people because of the religion they hold, it means you don't respect their religion.", "fol": "", "prediction": ["all x y.((Rule(x) & Person(y) & HoldsReligion(x,y)) -> -RespectsReligion(x,y))", "all x y.((Rust(x) & Person(y) & HoldsReligion(x,y)) -> -RespectsReligion(x,y))", "all x.((RuleToPeople(x) & HoldsReligion(x)) -> -RespectsReligion(x))", "all x y.((Rule(x) & People(y) & HoldsReligion(x,y)) -> -RespectsReligion(x,y))", "all x y.((Rust(x) & People(y) & HoldsReligion(x,y)) -> -RespectsReligion(x,y))", "all x.((Rule(x) & HoldsReligion(x)) -> -RespectsReligion(x))", "all x y.((Rain(x) & Person(y) & HoldsReligion(x,y)) -> -RespectsReligion(x,y))", "all x y.((Relevant(x) & Person(y) & HoldsReligion(x,y)) -> -RespectsReligion(x,y))", "all x.((Rust(x) & HoldsReligion(x)) -> -RespectsReligion(x))", "all x.((Rule(x) & PeopleHoldReligion(x)) -> -RespectsReligion(x))", "all x y.((Rule(x) & Person(y) & HoldsReligion(x,y)) -> -RespectReligion(x,y))", "all x.((Rust(x) & PeopleHoldReligion(x)) -> -RespectsReligion(x))", "all x y.((Rule(x) & People(y) & HoldsReligion(x,y)) -> -RespectReligion(x,y))", "all x y.((Rust(x) & Person(y) & HoldsReligion(x,y)) -> -RespectReligion(x,y))", "all x y.((Rule(x) & Person(y) & HoldsReligion(x,y)) -> -RespectsReligion(x))", "all x.((RustToPeople(x) & HoldsReligion(x)) -> -RespectsReligion(x))"]}
{"id": "enwn_validation_452", "nl": "You should respect other people's preferences.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y)) -> Respects(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsPositives(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsPreferences(x,y))", "all x y z.((Person(x) & Person(y) & Preference(z)) -> Respects(x,y,z))", "all x y.((Person(x) & Person(y)) -> RespectsPositions(x,y))", "all x y z.((Person(x) & Person(y) & Preference(z)) -> Respect(x,y,z))", "all x y.((Person(x) & Person(y)) -> RespectsPossibilities(x,y))", "all x y.((Person(x) & Person(y)) -> Respect(x,y))", "all x.((Person(x) & RespectsPositives(x)) -> RespectsPositives(x))", "all x y.((PreferredPerson(x) & Person(y)) -> Respects(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsPosition(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsPositive(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsPoses(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsPatients(x,y))", "all x y.((Person(x) & Person(y)) -> Respects(x,y))", "all x y.((People(x) & Person(y)) -> RespectsPreferences(x,y))"]}
{"id": "enwn_validation_453", "nl": "You should respect other people's religious preferences.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y)) -> RespectsReligiousPreferences(x,y))", "all x y.((Person(x) & Person(y)) -> RespectReligiousPreferences(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsReligiousPositives(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsReligiousPoses(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsReligiousPreferences(x,y))", "all x y.((Person(x) & ReligiousPreference(y)) -> Respects(x,y))", "all x y.((Person(x) & ReligiousPreference(y)) -> Respect(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsReligiousPoetry(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsReligiousPaths(x,y))", "all x y.((Person(x) & ReligiousPath(y)) -> Respects(x,y))", "all x y.((Person(x) & ReligiousPatient(y)) -> Respects(x,y))", "all x.((Person(x) & RespectsReligiousPreferences(x)) -> RespectsReligiousPreferences(x))", "all x y.((Person(x) & Person(y)) -> RespectsReligiousPossibilities(x,y))", "all x y.((Person(x) & Person(y)) -> RespectsReligiousPositions(x,y))", "all x y.((Person(x) & Religion(y)) -> Respects(x,y))", "all x.(RespectsReligiousPreferences(x) -> RespectsReligiousPreferences(x))"]}
{"id": "enwn_validation_454", "nl": "You should not be rude to people because of the religion they hold.", "fol": "", "prediction": ["all x y.((Person(x) & Religion(y) & Holds(x,y)) -> -Rust(x,y))", "all x y.((Religion(x) & Person(y)) -> -Rusty(x,y))", "all x y.((Religious(x) & Person(y)) -> -Rusty(x,y))", "all x y.((Religion(x) & Person(y)) -> -Rust(x,y))", "all x y.((Person(x) & Religion(y) & Holds(x,y)) -> -Rust(x))", "all x.((Person(x) & HoldsReligion(x)) -> -Rusty(x))", "all x y.((Person(x) & Religion(y) & Holds(x,y)) -> -Rusty(x,y))", "all x y.((People(x) & Religion(y) & Holds(x,y)) -> -Rust(x,y))", "all x y.((Religion(x) & Person(y) & Holds(x,y)) -> -Rust(x,y))", "all x y.((People(x) & Religion(y)) -> -Rusty(x,y))", "all x.((People(x) & HoldsReligion(x)) -> -Rusty(x))", "all x y.((Person(x) & Religion(y)) -> -Rusty(x,y))", "all x y.((Person(x) & Religion(y) & Holds(x,y)) -> -RustyTo(x,y))", "all x y.((People(x) & Religion(y) & Holds(x,y)) -> -Rusty(x,y))", "all x y.((Religion(x) & Person(y) & Holds(x,y)) -> -Rusty(x,y))", "all x y.((Person(x) & Religion(y) & Holds(x,y)) -> -RuleTo(x,y))"]}
{"id": "enwn_validation_455", "nl": "Eugene should not be rude to people who do not share his religion.", "fol": "", "prediction": ["all x.((Eugene(x) & People(x) & -ShareReligion(x)) -> -Rusty(x))", "all x.((Eugene(x) & Person(x) & -ShareReligion(x)) -> -Rusty(x))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(y)) -> -Rusty(x,y))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(x,y)) -> -Rusty(x,y))", "all x.((Eugene(x) & -ShareReligion(x)) -> -Rusty(x))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(y)) -> -Rule(x,y))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(x,y)) -> -Rust(x,y))", "all x.((Eugene(x) & People(x) & -ShareReligion(x)) -> -Rule(x))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(x,y)) -> -RustyTo(x,y))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(x,y)) -> -Rule(x,y))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(y)) -> -Rust(x,y))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(y)) -> -RustyTo(x,y))", "all x y.((Eugene(x) & People(y) & -ShareReligion(x,y)) -> -Rusty(x,y))", "all x.((Eugene(x) & Person(x) & -ShareReligion(x)) -> -Rule(x))", "all x.((Eugene(x) & People(x) & -ShareReligion(x)) -> -Rust(x))", "all x y.((Eugene(x) & Person(y) & -ShareReligion(x,y)) -> -Rusty(x))"]}
{"id": "enwn_validation_456", "nl": "Intruding on people is disrespecting their privacy.", "fol": "", "prediction": ["all x.(IntrudingOnPeople(x) -> DisrespectsPrivacy(x))", "all x y.((Intruding(x) & Person(y)) -> DisrespectsPrivacy(x,y))", "all x y.((IntrudingOn(x) & Person(y)) -> DisrespectsPrivacy(x,y))", "all x y.((Intruder(x) & Person(y)) -> DisrespectsPrivacy(x,y))", "all x y.((Person(x) & Intruder(y)) -> DisrespectsPrivacy(x,y))", "all x.(IntrudingOnPerson(x) -> DisrespectsPrivacy(x))", "all x y.((IntrudingOnPeople(x) & Person(y)) -> DisrespectsPrivacy(x,y))", "all x y.((IntrudingOn(x,y) & Person(y)) -> DisrespectsPrivacy(x,y))", "all x y.((IntrudingOnPerson(x) & Person(y)) -> DisrespectsPrivacy(x,y))", "all x.(IntrudingOnPeople(x) -> DisrespectingPrivacy(x))", "all x.(IntrudingOn(x) -> DisrespectsPrivacy(x))", "all x y.((Person(x) & Person(y)) -> DisrespectsPrivacy(x,y))", "all x y.((Intruding(x) & Person(y)) -> DisregardsPrivacy(x,y))", "all x y.((Person(x) & Intruder(y)) -> DisrespectsPrivacy(y))", "all x.(Intruding(x) -> DisrespectsPrivacy(x))", "all x y.((IntrudingOn(x) & Person(y)) -> DisregardsPrivacy(x,y))"]}
{"id": "enwn_validation_457", "nl": "You should respect people's privacy.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y)) -> RespectsPrivacy(x,y))", "all x y.((Person(x) & Privacy(y)) -> Respects(x,y))", "all x.((Person(x) & RespectsPrivacy(x)) -> RespectsPrivacy(x))", "all x.(RespectsPrivacy(x) -> People(x))", "all x y.((People(x) & Privacy(y)) -> Respects(x,y))", "all x.((People(x) & Privacy(x)) -> Respects(x,y))", "all x.((Person(x) & Privacy(x)) -> Respects(x,y))", "all x.((Person(x) & RespectsPrivacy(x)) -> RequiresPrivacy(x))", "all x y.((Person(x) & Privacy(y)) -> Respect(x,y))", "all x y.((Person(x) & Person(y)) -> RespectPrivacy(x,y))", "all x.((People(x) & RespectPrivacy(x)) -> RespectPrivacy(x))", "all x.((Person(x) & RespectPrivacy(x)) -> RespectPrivacy(x))", "all x.(RespectsPrivacy(x) -> Person(x))", "all x y.((People(x) & Privacy(y)) -> Respect(x,y))", "all x.(RespectPrivacy(x) -> Person(x))", "all x.(RespectPrivacy(x) -> People(x))"]}
{"id": "enwn_validation_458", "nl": "Knocking on someone's door when they do not wish to be disturbed is intrusive.", "fol": "", "prediction": ["all x.((KnocksOnDoor(x) & -Disturbed(x)) -> Intrusive(x))", "all x.((KnockingOnDoor(x) & -Disturbed(x)) -> Intrusive(x))", "all x y.((Person(x) & Door(y) & -Disturbed(x)) -> Intrusive(x))", "all x y.((KnocksOnDoor(x) & Person(y) & -Disturbed(y)) -> Intrusive(x))", "all x.((KnocksOnDoor(x) & -WorriedToBeDisturbed(x)) -> Intrusive(x))", "all x y.((KnockingOnDoor(x) & Person(y) & -Disturbed(y)) -> Intrusive(x))", "all x y.((Person(x) & Door(y) & -WorriedToBeDisturbed(x)) -> Intrusive(x))", "all x y.((Door(x) & Door(y) & -Disturbed(y)) -> Intrusive(x))", "all x y.((Person(x) & Door(y) & -Disturbed(y)) -> Intrusive(x))", "all x y.((KnocksOnDoor(x) & Person(y) & -WorriedToBeDisturbed(y)) -> Intrusive(x))", "all x y.((Person(x) & Door(y) & -WorriedToBeDisturbed(x,y)) -> Intrusive(x))", "all x y.((Person(x) & Door(y) & -Disturbed(x,y)) -> Intrusive(x))", "all x.((KnocksOnDoor(x) & -Disturbance(x)) -> Intrusive(x))", "all x y.((KnocksOnDoor(x,y) & Person(y) & -Disturbed(y)) -> Intrusive(x))", "all x.((Person(x) & -Disturbed(x)) -> Intrusive(x))", "all x y.((Door(x) & Person(y) & -Disturbed(y)) -> Intrusive(x))"]}
{"id": "enwn_validation_459", "nl": "Sandra constantly ignores \"No Solicitation\" signs and knocks on people's doors.", "fol": "", "prediction": ["all x y.((Sandra(x) & NoSolicitation(y)) -> (Ignores(x,y) & KnocksOnDoors(x)))", "all x y z.((Sandra(x) & Sign(y) & Door(z)) -> (Ignores(x,y) & KnocksOn(x,z)))", "all x y.((Sandra(x) & NoSolicitation(y)) -> (Ignores(x,y) & KnocksOnDoors(x,y)))", "all x.(Sandra(x) -> (IgnoresNoSolicitation(x) & KnocksOnPeopleDoors(x)))", "all x.(Sandra(x) -> (IgnoresNoSolicitationSigns(x) & KnocksOnPeopleDoors(x)))", "all x y.((Sandra(x) & NoSolicitation(y)) -> (IgnoresSigns(x,y) & KnocksOnDoors(x,y)))", "all x.(Sandra(x) -> (IgnoresNoSolicitation(x) & KnocksOnDoors(x)))", "all x y.((Sandra(x) & NoSolicitation(y)) -> (Ignores(x,y) & KnocksOn(x,y)))", "all x y z.((Sandra(x) & \"NoSolicitation(y) & Sign(z)) -> (Ignores(x,y) & KnocksOnDoors(x,z)))", "all x y z.((Sandra(x) & \"NoSolicitation(y) & Sign(z)) -> (Ignores(x,z) & KnocksOnDoors(x)))", "all x.((Sandra(x) & IgnoresNoSolicitation(x)) -> KnocksOnDoors(x))", "all x.((Sandra(x) & NoSolicitation(x)) -> (Ignores(x) & KnocksOnDoors(x)))", "all x.(Sandra(x) -> (IgnoresNoSolicitationSigns(x) & KnocksOnDoors(x)))", "all x.((Sandra(x) & NoSolicitation(x)) -> (Ignores(x,y) & KnocksOnDoors(x,z)))", "all x.(Sandra(x) -> (IgnoresNoSolicitation(x) & KnocksOnPersonDoors(x)))", "all x y.((Sandra(x) & Sign(y)) -> (Ignores(x,y) & KnocksOnDoors(x)))"]}
{"id": "enwn_validation_460", "nl": "You shouldn't intrude on people.", "fol": "", "prediction": ["all x.(IntrudeOnPeople(x) -> -IntrudeOnPeople(x))", "all x.((Person(x) & -Intrude(x)) -> -Intrude(x))", "all x.((IntrudeOnPeople(x) & -IntrudeOnPeople(x)) -> -IntrudeOnPeople(x))", "all x.((Person(x) & -IntrudeOn(x)) -> -IntrudeOn(x))", "all x y.((Person(x) & Person(y)) -> -Intrude(x,y))", "all x.(IntrudeOnPeople(x) -> -(IntrudeOnPeople(x) | IntrudeOnPeople(x))))", "all x.((IntrudeOnPeople(x)) -> -IntrudeOnPeople(x))", "all x.(IntrudeOnPeople(x) -> -(IntrudeOnPeople(x) & IntrudeOnPeople(x)))", "all x.(IntrudeOnPerson(x) -> -IntrudeOnPerson(x))", "all x.((People(x) & -IntrudeOn(x)) -> -IntrudeOn(x))", "all x.((IntrudeOnPeople(x)) -> -(IntrudeOnPeople(x) | IntrudeOnPeople(x))))", "all x y.((Intruder(x) & Person(y)) -> -Intrude(x,y))", "all x.((People(x) & -Intrude(x)) -> -Intrude(x))", "all x y.((Person(x) & Intruder(y)) -> -Intrude(x,y))", "all x.(IntrudeOnPeople(x) -> -(IntrudeOnPeople(x) | IntrudeOnPeople(x)))", "all x.((Person(x) & -Intrude(x)) -> -IntrudeOn(x))"]}
{"id": "enwn_validation_461", "nl": "Sandra intrudes on people.", "fol": "", "prediction": ["all x y.((Sandra(x) & Person(y)) -> IntrudesOn(x,y))", "all x y.((Sandra(x) & Person(y)) -> Intrudes(x,y))", "all x y z.((Sandra(x) & Person(y) & Person(z)) -> IntrudesOn(x,y,z))", "all x y.((Santa(x) & Person(y)) -> IntrudesOn(x,y))", "all x y.((Sarah(x) & Person(y)) -> IntrudesOn(x,y))", "all x y.((Sandy(x) & Person(y)) -> IntrudesOn(x,y))", "all x y.((Sandra(x) & People(y)) -> IntrudesOn(x,y))", "all x y z.((Sandra(x) & Person(y) & IntrudesOn(x,y)) -> IntrudesOn(x,z))", "all x.(Sandra(x) -> IntrudesOnPeople(x))", "all x y z.((Sandra(x) & Person(y) & Person(z)) -> Intrudes(x,y,z))", "all x y.((Stanley(x) & Person(y)) -> IntrudesOn(x,y))", "all x y z.((Sandra(x) & Person(y) & IntrudesOn(x,y)) -> IntrudesOn(x,y))", "all x y z.((Sandra(x) & Person(y) & IntrudesOn(x,y)) -> Intrudes(x,z))", "all x.(SandraIntrudesOnPeople(x) -> IntrudesOnPeople(x))", "all x y z.((Sandra(x) & Person(y) & IntrudesOn(x,z)) -> IntrudesOn(x,y))", "all x y.((S Sandra(x) & Person(y)) -> IntrudesOn(x,y))"]}
{"id": "enwn_validation_462", "nl": "Sandra should not intrude on people.", "fol": "", "prediction": ["all x.(Sandra(x) -> -IntrudeOnPeople(x))", "all x y.((Sandra(x) & Person(y)) -> -Intrude(x,y))", "all x.((Sandra(x) & -IntrudeOnPeople(x)) -> -IntrudeOnPeople(x))", "all x.((Sandra(x) & Person(y)) -> -Intrude(x,y))", "all x y.((Sandra(x) & Person(y)) -> -IntrudeOn(x,y))", "all x.((Sandra(x) & People(y)) -> -Intrude(x,y))", "all x y.((Sandra(x) & People(y)) -> -Intrude(x,y))", "all x.((Sandra(x) & -Intrude(x)) -> -Intrude(x))", "all x y.((Sandy(x) & Person(y)) -> -Intrude(x,y))", "all x y.((Santa(x) & Person(y)) -> -Intrude(x,y))", "all x.(Sandra(x) -> -Intrude(x))", "all x.((Sandra(x) & -Intrude(x)) -> -IntrudeOnPeople(x))", "all x.(Sandra(x) -> -IntrudeOnPerson(x))", "all x y.((Sandra(x) & Person(y)) -> -IntrudesOn(x,y))", "all x.(Sandy(x) -> -IntrudeOnPeople(x))", "all x.((Sandra(x) & Person(y)) -> -IntrudeOn(x,y))"]}
{"id": "enwn_validation_463", "nl": "Martin kicked his dog to make it stop barking.", "fol": "", "prediction": ["all x y.((Dog(x) & Martin(y)) -> KickedToStopBarking(y,x))", "all x y.((Dog(x) & Martin(y)) -> KickedToMakeStopBarking(y,x))", "all x y z.((Dog(x) & Martin(y) & Dog(z) & Barking(z)) -> Kicked(y,z))", "all x y.((Dog(x) & Martin(y) & Kicked(y,x)) -> StopBarking(y,x))", "all x y z.((Dog(x) & Martin(y) & Dog(z)) -> KickedToStopBarking(y,z))", "all x y z.((Dog(x) & Martin(y) & Dog(z)) -> (Kicked(y,z) & StopsBarking(z,x)))", "all x y z.((Dog(x) & Martin(y) & Dog(z)) -> (Kicked(y,z) & StopsBarking(z)))", "all x y z.((Dog(x) & Martin(y) & Dog(z) & Barking(z)) -> KickedToStop(y,z))", "all x y.((Dog(x) & Martin(y)) -> Kicked(y,x))", "all x y z.((Dog(x) & Martin(y) & Dog(z)) -> (Kicked(y,z) & StopBarking(z)))", "all x y.((Dog(x) & Martin(y)) -> KeptToStopBarking(y,x))", "all x y.((Dog(x) & Martin(y)) -> Kept(y,x))", "all x y z.((Dog(x) & Martin(y) & Dog(z) & Barking(z)) -> KickedToMakeStop(y,z))", "all x y.((Dog(x) & Martin(y)) -> Kicked(y,x))", "all x y.((Dog(x) & Martin(y)) -> (Kicked(y,x) & StopsBarking(y,x)))", "all x y z.((Dog(x) & Martin(y) & Dog(z)) -> (Kicked(y,z) & StopBarking(z,x)))"]}
{"id": "enwn_validation_464", "nl": "Kicking an animal hurts it.", "fol": "", "prediction": ["all x y.((Animal(x) & Kicking(x,y)) -> Hurts(x,y))", "all x y.((Animal(x) & Animal(y) & Kicks(x,y)) -> Hurts(x,y))", "all x.(Kicking(x) -> HurtsAnimal(x))", "all x y.((Animal(x) & Animal(y)) -> Hurts(x,y))", "all x y.((Animal(x) & Kicking(x,y)) -> Hurts(y,x))", "all x y.((Animal(x) & Kicking(x,y)) -> Hurts(y))", "all x.((Animal(x) & Kicks(x)) -> Hurts(x))", "all x y.((Animal(x) & Kicking(x,y)) -> Illness(y))", "all x y z.((Animal(x) & Animal(y) & Kicking(x,y)) -> Hurts(x,y))", "all x y.((Animal(x) & Kicks(x,y)) -> Hurts(x,y))", "all x y.((Animal(x) & Kicking(x)) -> Hurts(x,y))", "all x y.((Animal(x) & Kicking(x,y)) -> Hurts(x))", "all x y.((Animal(x) & Kick(y)) -> Hurts(x,y))", "all x y.((Animal(x) & Kicking(x,y)) -> Illnesses(x,y))", "all x y.((Animal(x) & Kicking(y)) -> Hurts(x,y))", "all x y.((Animal(x) & Kicking(x,y)) -> Illness(x,y))"]}
{"id": "enwn_validation_465", "nl": "Hurting people or animals is considered abuse.", "fol": "", "prediction": ["all x.((Hurting(x) & (Person(x) | Animal(x))) -> Abuse(x))", "all x.(Hurting(x) -> Abuse(x))", "all x.(HurtsPeopleOrAnimals(x) -> Abuse(x))", "all x.((Hurting(x) & (People(x) | Animals(x))) -> Abuse(x))", "all x.((Hurts(x) & (Person(x) | Animal(x))) -> Abuse(x))", "all x.((HurtsPeople(x) | HurtsAnimals(x)) -> Abuse(x))", "all x y.((Hurting(x) & (Person(y) | Animal(y))) -> Abuse(x))", "all x.(HurtingPeopleOrAnimals(x) -> Abuse(x))", "all x.((HurtingPeople(x) | HurtingAnimals(x)) -> Abuse(x))", "all x.((Hurting(x) & (Hurting(x) | Hurting(x))) -> Abuse(x))", "all x.((Hurting(x) & (Hurts(x) | Hurts(x))) -> Abuse(x))", "all x y.((Hurting(x) & (Person(y) | Animal(y))) -> Abuse(x,y))", "all x.((Hurting(x) & (Hunger(x) | HurtingAnimal(x))) -> Abuse(x))", "all x.(Hurts(x) -> Abuse(x))", "all x.((Hurting(x) & (Hunger(x) | Hurting(x))) -> Abuse(x))", "all x.((Hurting(x) & (Hunger(x) | HurtingAnimals(x))) -> Abuse(x))"]}
{"id": "enwn_validation_466", "nl": "You should not abuse any living thing.", "fol": "", "prediction": ["all x.((LivingThing(x) & -Abuse(x)) -> -Abuse(x))", "all x.((LivingThing(x) & -Abuses(x)) -> -Abuse(x))", "all x.((LivingThing(x) & -Abuse(x)) -> -Abuse(x))", "all x.((LivingThing(x) & -Abuses(x)) -> -Abuses(x))", "all x y.((LivingThing(x) & LivingThing(y)) -> -Abuse(x,y))", "all x.((LivingThing(x) & -Abuse(x)) -> -Abuse(x))", "all x.((LivingThing(x) & -Abuse(x)) -> -Abuse(x))", "all x.((LivingThing(x) & -Abuses(x)) -> -Abuses(x))", "all x.(AbuseLivingThing(x) -> -AbuseLivingThing(x))", "all x.((LivingThing(x) & -Abuse(x,y)) -> -Abuse(x,y))", "all x.((LivingThing(x) & -Abuse(x)) -> -Abuse(x,livingThing))", "all x.((LivingDing(x) & -Abuse(x)) -> -Abuse(x))", "all x.((LivingThing(x) & -Abuses(x)) -> -Abuses(x))", "all x y.((LivingThing(x) & LivingThing(y)) -> -Abuse(x,y))", "all x.((LivingThing(x) & -Abuses(x)) -> -Abuse(x))", "all x.((LivingThing(x)) -> -Abuse(x))"]}
{"id": "enwn_validation_467", "nl": "Martin hurt his dog.", "fol": "", "prediction": ["all x y.((Martin(x) & Dog(y)) -> Hurts(x,y))", "Martin hurtsDog(Martin)", "all x y.((Martin(x) & Dog(y)) -> Irresponsible(x,y))", "all x y z.((Martin(x) & Dog(y) & Dog(z)) -> Hurts(x,y,z))", "all x y.((Martin(x) & Dog(y)) -> hurts(x,y))", "all x y z.((Martin(x) & Dog(y) & Dog(z)) -> Irresponsible(x,y,z))", "all x y.((Martin(x) & Dog(y)) -> Harms(x,y))", "all x y.((Martin(x) & Dog(y)) -> Hurt(x,y))", "all x.(Martin(x) -> hurtsDog(x))", "all x.(Martin(x) -> HurtsDog(x))", "all x.((Martin(x) & Dog(y)) -> Hurts(x,y))", "all x y z.((Martin(x) & Dog(y) & Dog(z)) -> Harms(x,y,z))", "all x y.((Martin(x) & Dog(y)) -> Ill(x,y))", "all x y z.((Martin(x) & Dog(y) & Dog(z)) -> Hurt(x,y,z))", "all x y z.((Martin(x) & Dog(y) & Dog(z)) -> Hurts(x,y))", "all x y z.((Martin(x) & Dog(y) & Dog(z)) -> Irrit(x,y,z))"]}
{"id": "enwn_validation_468", "nl": "You should not hurt animals.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveH", "all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveH", "all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-HaveH", "all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa", "all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveH", "all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa", "all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa", "all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-HaveH", "all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa", "all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-HaveH", "all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa", "all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa", "all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-HaveH", "all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-HaveH", "all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa", "all x y.((Animal(x) & Animal(y)) -> -HasHasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-HaveH"]}
{"id": "enwn_validation_469", "nl": "Martin should not have hurt his dog.", "fol": "", "prediction": ["all x.((Martin(x) & Dog(y)) -> -HasHired(x,y))", "all x.((Martin(x) & Dog(y)) -> -HadTouch(x,y))", "all x.((Martin(x) & Dog(y)) -> -HasIrresponsible(x,y))", "all x.((Martin(x) & Dog(y)) -> -HasHunted(x,y))", "all x.((Martin(x) & Dog(y)) -> -HasHasHasHaven(x,y))", "all x.((Martin(x) & Dog(y)) -> -HasHasHasHasHaven(x,y))", "all x.(Martin(x) -> -HasHasDog(x))", "all x.((Martin(x) & Dog(y)) -> -HasHasHaven(x,y))", "all x.((Martin(x) & Dog(y)) -> -HasHarm(x,y))", "all x.((Martin(x) & Dog(y)) -> -HasHasHasHasHasHave(x,y))", "all x y.((Martin(x) & Dog(y)) -> -HadTouch(x,y))", "all x.((Martin(x) & Dog(y)) -> -HasHasHasHasHave(x,y))", "all x.((Martin(x) & Dog(y)) -> -HasHasHasHasHasHaven(x,y))", "all x.((Martin(x) & Dog(y)) -> -HasTouch(x,y))", "all x y.((Martin(x) & Dog(y)) -> -HasHarm(x,y))", "all x y.((Martin(x) & Dog(y)) -> -HasHunted(x,y))"]}
{"id": "enwn_validation_470", "nl": "If you think your college didn't prepare you for your job then you lack self-assurance in your abilities.", "fol": "", "prediction": ["all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssuranceInAbilities(x))", "all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssurance(x))", "all x.((College(x) & -PreparedForJob(x)) -> LacksSelfAssuranceInAbilities(x))", "all x.((College(x) & -PreparesYouForJob(x)) -> LacksSelfAssuranceInAbilities(x))", "all x.((College(x) & -PreparedForJob(x)) -> LacksSelfAssurance(x))", "all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssuranceInAbility(x))", "all x.((College(x) & College(x) & -PreparesForJob(x)) -> LacksSelfAssuranceInAbilities(x))", "all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssuredness(x))", "all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssuranceInCapabilities(x))", "all x y.((College(x) & College(y) & -PreparesForJob(x,y)) -> LacksSelfAssuranceInAbilities(x))", "all x.((College(x) & -PreparesYouForJob(x)) -> LacksSelfAssurance(x))", "all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssurementInAbilities(x))", "all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssistanceInAbilities(x))", "all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssuredInAbilities(x))", "all x y.((College(x) & College(y) & -PreparesForJob(x,y)) -> LacksSelfAssurance(x))", "all x.((College(x) & -PreparedForJob(x)) -> LacksSelfAssuranceInAbility(x))"]}
{"id": "enwn_validation_471", "nl": "Cindy doesn't think her college was good enough for her current job. ", "fol": "", "prediction": ["all x.((Cindy(x) & College(x)) -> -GoodEnoughForJob(x))", "all x.((Cindy(x) & College(y)) -> -GoodEnoughForJob(x,y))", "all x y.((Cindy(x) & College(y)) -> -GoodEnoughForJob(x,y))", "((Cindy(Cindy) & College(Cindy)) -> -GoodEnoughForJob(Cindy)))", "((Cindy(Cindy) & College(Cindy)) -> -GoodEnoughForJob(Cindy))", "all x.((Cindy(x) & College(x)) -> -GoodEnoughForCindy(x))", "all x.((Cindy(x) & College(y)) -> -GoodEnoughForCindy(x,y))", "all x.((Cindy(x) & College(x)) -> -GoodEnoughForJob(x,Cindy))", "all x y.((College(x) & CurrentJob(y)) -> -GoodEnoughFor(x,y))", "all x y.((Cindy(x) & College(y)) -> -GoodEnoughForCindy(x,y))", "all x y.((College(x) & Job(y)) -> -GoodEnoughFor(x,y))", "((Cindy(Cindy) & College(Cindy)) -> -GoodEnoughForJob(Cindy,Cindy)))", "exists x.(Cindy(x) & College(x) & -GoodEnoughForJob(x))", "all x y.((Cindy(x) & College(y)) -> -GoodEnoughFor(x,y))", "all x.(Cindy(x) -> -GoodEnoughForCollege(x))", "exists x.(College(x) & -GoodEnoughForJob(x))"]}
{"id": "enwn_validation_472", "nl": "Confidence is a feeling of self-assurance arising from one's appreciation of one's own abilities or qualities.", "fol": "", "prediction": ["all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppreciationOfAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppreciationOfAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppreciatesOwnAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & ApreciatesOwnAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppreciationOfOwnAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (SelfAssurance(x) & AppreciationOfAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppreciatesOwnAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & ApreciatesOwnAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppreciationOfOwnAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (SelfAssurance(x) & AppreciationOfAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppropriateOfAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppropriateOfAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (feelingOfSelfAssurance(x) & AppreciationOfAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppropriateOfOwnAbilitiesOrQualities(x)))", "all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppreciatesOfAbilitiesOrQualities(x)))", "all x y.((Confidence(x) & FeelingOfSelfAssurance(x) & AppreciationOfAbilitiesOrQualities(y)) -> Appropriate(x,y))"]}
{"id": "enwn_validation_473", "nl": "Being confident allows you to feel ready for life's experiences.", "fol": "", "prediction": ["all x.(Confident(x) -> FeelsReadyForLifeExperiences(x))", "all x.((Confident(x) & FeelsReadyForLifeExperiences(x)) -> Confident(x))", "all x.(Confident(x) -> AllowsFeelingReadyForLifeExperiences(x))", "all x.((Confident(x) & ReadyForLife(x)) -> Confident(x))", "all x.((Confident(x) & ReadyForLifeExperiences(x)) -> Confident(x))", "all x.((Confident(x) & FeelsReadyForLife(x)) -> Confident(x))", "all x.(Confident(x) -> AllowsFeelReadyForLifeExperiences(x))", "all x.((Confidence(x) & FeelsReadyForLifeExperiences(x)) -> Confident(x))", "all x.(Confident(x) -> AllowsFeelingPreparedForLifeExperiences(x))", "all x.(Confident(x) -> AllowsFeelingRelatedForLifeExperiences(x))", "all x.(Confidence(x) -> AllowsFeelingReadyForLifeExperiences(x))", "all x.(Confident(x) -> ReadyForLifeExperiences(x))", "all x.((Client(x) & ReadyForLife(x)) -> Confident(x))", "all x.(Concerned(x) -> FeelsReadyForLifeExperiences(x))", "all x.(Confidential(x) -> FeelsReadyForLifeExperiences(x))", "all x.(Confident(x) -> FeelsReadyForLife(x))"]}
{"id": "enwn_validation_474", "nl": "It's important to feel ready for life's experiences.", "fol": "", "prediction": ["all x.((FeelReadyForLifeExperiences(x)) -> Important(x))", "all x.((FeelReady(x) & LifeExperiences(x)) -> Important(x))", "all x.(FeelReadyForLifeExperiences(x) -> Important(x))", "all x.((FeelReadyForLife(x)) -> Important(x))", "all x.((FeelReady(x) & LifeExperience(x)) -> Important(x))", "all x.((FeelPreparedForLifeExperiences(x)) -> Important(x))", "all x.((FeelReadyForLife(x)) -> ImportantForLife(x))", "all x.((FeelPrepared(x) & LifeExperiences(x)) -> Important(x))", "all x.((FeelReady(x) & LifesExperiences(x)) -> Important(x))", "all x.((FeelPreparedForLife(x)) -> Important(x))", "all x.((FeelRelated(x) & LifeExperiences(x)) -> Important(x))", "all x.((FeelReady(x) & LifeExperiences(x)) -> ImportantToFeelReady(x))", "all x.(FeelPreparedForLifeExperiences(x) -> Important(x))", "all x.((FeelReadyForLifeExperiences(x)) -> ImportantToFeelReadyForLifeExperiences(x))", "all x.((FeelReadyForLife(x)) -> ImportantForLifeExperiences(x))", "all x y.((FeelReadyForLife(x) & LifeExperiences(y)) -> Important(x))"]}
{"id": "enwn_validation_475", "nl": "Cindy has a lack of self-assurance in her abilities.", "fol": "", "prediction": ["all x.(Cindy(x) -> LackOfSelfAssurance(x))", "all x y.((Cindy(x) & Ability(y)) -> LackOfSelfAssurance(x,y))", "all x.(Cindy(x) -> LackOfSelfAssuranceInAbilities(x))", "all x.(Cindy(x) -> LackOfSelfInsurance(x))", "all x y.((Cindy(x) & Ability(y)) -> LackOfSelfInsurance(x,y))", "exists x.(Cindy(x) & LackOfSelfAssurance(x))", "all x y.((Cindy(x) & Ability(y)) -> LackOfSelfAssurement(x,y))", "all x.(Cindy(x) -> LackOfSelfAssurement(x))", "all x y.((Cindy(x) & Ability(y)) -> LackOfSelfAssistance(x,y))", "all x.(Cindy(x) -> LackOfSelfInsuranceInAbilities(x))", "all x y.((Cindy(x) & Ability(y)) -> LackOfSelfInsurement(x,y))", "all x.(Cindy(x) -> LackOfSelfAssuranceInAbility(x))", "all x.(Cindy(x) -> LackOfSelfAssurementInAbilities(x))", "all x.(Cindy(x) -> LackOfSelfAssistance(x))", "all x y.((Cindy(x) & Ability(y)) -> LackOfSelfAssurance(x,y))", "all x y.((Cindy(x) & Ability(y)) -> LackOfSelfAssuranceIn(x,y))"]}
{"id": "enwn_validation_476", "nl": "Cindy lacks confidence.", "fol": "", "prediction": ["all x.(Cindy(x) -> LacksConfidence(x))", "exists x.(Cindy(x) & LacksConfidence(x))", "(LacksConfidence(Cindy))", "-exists x.(Cindy(x) & LacksConfidence(x))", "-(Cindy(Cindy) & LacksConfidence(Cindy))", "All x.(Cindy(x) -> LacksConfidence(x))", "all x y.((Cindy(x) & Cindy(y)) -> LacksConfidence(x,y))", "all x.(Cindy(x) -> -Confidence(x))", "(Likes(Cindy) & LacksConfidence(Cindy))", "-(Cindy(Cindy) & Confidence(Cindy))", "all x.(Cindy(x) -> LacksConsciousness(x))", "all x y.((Cindy(x) & Cindy(y)) -> LacksConfidence(x))", "exists x.(Cindy(x) & -Confidence(x))", "-CindyLacksConfidence(Cindy)", "all x.(Cindy(x) -> LacksConfidence(x))", "all x.((Cindy(x) & LacksConfidence(x)) -> -Confidence(x))"]}
{"id": "enwn_validation_477", "nl": "It's important to be confident.", "fol": "", "prediction": ["all x.(Confident(x) -> Important(x))", "all x.(Confidence(x) -> Important(x))", "all x.((Client(x) & Confident(x)) -> Important(x))", "all x.((Busy(x) & Confident(x)) -> Important(x))", "all x.((Confident(x) & Confident(x)) -> Important(x))", "all x.(Confidential(x) -> Important(x))", "all x.(Conscious(x) -> Important(x))", "all x.(Clueless(x) -> Important(x))", "all x.((Confident(x)) -> Important(x))", "all x.((Confident(x) & Important(x)) -> Confident(x))", "all x.(Confidential(x) -> ImportantToBe(x))", "all x.(Certain(x) -> Important(x))", "all x.((Confident(x) & Important(x)) -> Important(x))", "all x.(Concerning(x) -> Important(x))", "all x.(Confident(x) -> ImportantToBe(x))", "all x.(Busy(x) -> Important(x))"]}
{"id": "enwn_validation_478", "nl": "Cindy should try to be more confident.", "fol": "", "prediction": ["all x.(Cindy(x) -> ShouldTryToBeMoreConfident(x))", "all x.(Cindy(x) -> ShouldTryToBeMoreConscious(x))", "all x.((Cindy(x) & Confident(x)) -> ShouldTry(x,y))", "all x.((Cindy(x) & Confident(x)) -> ShouldTry(x))", "all x.(Cindy(x) -> MoreConfident(x))", "all x y.((Cindy(x) & Confident(y)) -> ShouldTry(x,y))", "all x.(Cindy(x) -> ShouldBeMoreConfident(x))", "all x.(Cindy(x) -> TryToBeMoreConfident(x))", "all x.(Cindy(x) -> ShouldBeMoreConscious(x))", "all x.(Cindy(x) -> ShouldTryBeMoreConfident(x))", "all x.(Cindy(x) -> TryToBeMoreConscious(x))", "all x.(Cindy(x) -> ShouldTryToBeMoreConfidential(x))", "all x.(Cindy(x) -> ShouldTryToBeMoreConcerned(x))", "all x.(Cindy(x) -> MustBeMoreConfident(x))", "all x.(Cindy(x) -> MoreConscious(x))", "all x.((Cindy(x) & MoreConfident(x)) -> ShouldTry(x))"]}
{"id": "enwn_validation_479", "nl": "Personal beliefs aren't a good reason to disobey the law.", "fol": "", "prediction": ["all x.((PersonalBelief(x) & -GoodRightToDisobeyLaw(x)) -> -GoodRightToDisobeyLaw(x))", "all x.((PersonalBelief(x) & -GoodRightToDisobeyLaw(x)) -> -GoodRightToDisobeyLaw(x))", "all x.(PersonalBelief(x) -> -GoodRightToDisobeyLaw(x))", "all x.((PersonalBuddhism(x) & -GoodRightToDisobeyLaw(x)) -> -GoodRightToDisobeyLaw(x))", "all x.((PersonalBelief(x) & -GoodRightToDisobeyLaw(x)) -> -(GoodRightToDisobeyLaw(x) & GoodRightToDisobeyLaw(x)))", "all x.((PersonalConfidence(x) & -GoodRightToDisobeyLaw(x)) -> -GoodRightToDisobeyLaw(x))", "all x.((PersonalBeliefs(x) & -GoodRightToDisobeyLaw(x)) -> -GoodRightToDisobeyLaw(x))", "all x.((PersonalBuddhance(x) & -GoodRightToDisobeyLaw(x)) -> -GoodRightToDisobeyLaw(x))", "all x.((PersonalBuys(x) & -GoodRightToDisobeyLaw(x)) -> -GoodRightToDisobeyLaw(x))", "all x.(PersonalBeliefs(x) -> -GoodRightToDisobeyLaw(x))", "all x y.((PersonalBelief(x) & Law(y)) -> -GoodRightToDisobey(x,y))", "all x.((PersonalBelief(x) & -GoodRightToDisobeyLaw(x)) -> -(GoodRightToDisobeyLaw(x) & -GoodRightToDisobeyLaw(x)))", "all x.((PersonalBelief(x) & -GoodRightToDisobeyLaw(x)) -> -(PersonalBelief(x) & GoodRightToDisobeyLaw(x)))", "all x.((PersonalBelief(x) & -GoodRightToDisobeyLaw(x)) -> -(GoodRightToDisobeyLaw(x)))", "all x.((PersonalBelief(x) & -GoodRightToDisobeyLaw(x)) -> -GoodRight(x))", "all x.((PersonalBelief(x) & -GoodRightToDisobeyLaw(x)) -> -PersonalBelief(x))"]}
{"id": "enwn_validation_480", "nl": "The law stipulates you must report your income.", "fol": "", "prediction": ["all x y.((Law(x) & Income(y)) -> MustReport(x,y))", "all x.(Law(x) -> MustReportIncome(x))", "all x y.((Law(x) & Income(y)) -> Report(x,y))", "all x y.((Law(x) & Income(y)) -> Reports(x,y))", "all x.((Law(x) & Income(y)) -> MustReport(x,y))", "all x.(Law(x) -> ReportsIncome(x))", "all x.((Law(x) & ReportIncome(x)) -> Stipulates(x))", "all x.exists y.((Law(x) & Income(y)) -> MustReport(x,y))", "all x.((Law(x) & ReportsIncome(x)) -> Stipulates(x))", "all x y.((Law(x) & Income(y)) -> Stipulates(x,y))", "all x.((Law(x) & ReportIncome(x)) -> Stipulates(x,y))", "all x y.((Law(x) & Income(y)) -> StipulatesReport(x,y))", "all x.(ReportsIncome(x) -> Stipulates(x))", "all x.(LawStipulates(x) -> MustReportIncome(x))", "all x.exists y.((Law(x) & Income(y)) -> Report(x,y))", "all x.(Law(x) -> ReportIncome(x))"]}
{"id": "enwn_validation_481", "nl": "John did not report his income because he does not believe taxes are justified.", "fol": "", "prediction": ["all x.((John(x) & -ReportsIncome(x)) -> -JustifiedTaxes(x))", "(-ReportsIncome(John) & -CreatesJustifiedTaxes(John))", "all x.((John(x) & -ReportsIncome(x)) -> -CreditsTaxes(x))", "all x.((John(x) & -ReportsIncome(x)) -> -CreatesJustifiedTaxes(x))", "all x y.((John(x) & Income(y)) -> -Reports(x,y))", "all x.((John(x) & -ReportsIncome(x)) -> -RequiresJustifiableTaxes(x))", "all x.((John(x) & -ReportsIncome(x)) -> -CreditsTaxesJustified(x))", "(-ReportsIncome(John) & -CreditsTaxesJustified(John))", "(-ReportsIncome(John) & -CreatesJustifiedTaxes(John))", "all x.((John(x) & -ReportsIncome(x)) -> -CreditsJustifiedTaxes(x))", "(-ReportsIncome(John) & -CreatesJustifiableTaxes(John))", "all x.((John(x) & -ReportsIncome(x)) -> -JustifiedTaxation(x))", "all x.((John(x) & -ReportsIncome(x)) -> -TaxesJustified(x))", "all x.((John(x) & -ReportsIncome(x)) -> -JustifiedTaxes(x))", "all x.((John(x) & -ReportsIncome(x)) -> -FalseTaxes(x))", "all x.((John(x) & -ReportsIncome(x)) -> -taxesJustified(x))"]}
{"id": "enwn_validation_482", "nl": "Personal beliefs aren't a good reason to avoid reporting your income.", "fol": "", "prediction": ["all x.((PersonalBelief(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x))", "all x.((PersonalBelief(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x))", "all x.((PersonalBeliefs(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x))", "all x.((PersonalBuddhism(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x))", "all x.((PersonalFindings(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x))", "all x.((PersonalBuddhance(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x))", "all x.((PersonalBelief(x) & -GoodRightToAvoidIncome(x)) -> -GoodRightToAvoidIncome(x))", "all x.((PersonalBuys(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x))", "all x.((PersonalBelief(x) & -GoodRelatedIncome(x)) -> -GoodRelatedIncome(x))", "all x.(PersonalBelief(x) -> -GoodRightToAvoidReportingIncome(x))", "all x.((PersonalBelief(x) & -GoodRightToAvoidReportingIncome(x)) -> -PersonalBelief(x))", "all x.((PersonalBelief(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportReportingIncome(x))", "all x.((PersonalBelief(x) & -GoodRightToAvoidReportingIncome(x)) -> -(GoodRightToAvoidReportingIncome(x)))", "all x.((PersonalBelief(x) & -GoodRightToAvoidReportingIncome(x)) -> -ReallyGoodRightToAvoidReportingIncome(x))", "all x.((PersonalBelief(x) & -GoodReporting(x)) -> -GoodReporting(x))", "all x y.((PersonalBelief(x) & Income(y)) -> -GoodRightToAvoid(x,y))"]}
{"id": "enwn_validation_483", "nl": "John should have reported his income.", "fol": "", "prediction": ["all x.((John(x) & ShouldReportIncome(x)) -> ShouldReportIncome(x))", "all x.((John(x) & Income(x)) -> ShouldReport(x,y))", "all x.(John(x) -> ShouldReportIncome(x))", "all x y.((John(x) & Income(y)) -> ShouldReport(x,y))", "all x.((John(x) & Income(y)) -> ShouldReport(x,y))", "all x.((John(x) & Income(x)) -> ShouldReport(x))", "All x.(John(x) -> ShouldReportIncome(x))", "all x.((John(x) & ShouldReportIncome(x)) -> ShouldReportIncome(x,y))", "All x.((John(x) & Income(x)) -> ShouldReport(x,y))", "all x.((John(x) & Income(x)) -> ShouldBeReported(x))", "all x.((John(x) & Income(x,y)) -> ShouldReport(x,y))", "John should have reported his income.", "all x.((John(x) & ShouldReportIncome(x)) -> ShouldReportIssue(x))", "all x.((John(x) & ShouldReportIncome(x)) -> -ReportedIncome(x))", "all x.((John(x) & ShouldReportIncome(x)) -> -ReportIncome(x))", "all x.((John(x) & Income(x)) -> ShouldReport(x,John))"]}
{"id": "enwn_validation_484", "nl": "Corey went to work while she was sick during a pandemic.", "fol": "", "prediction": ["all x.((Corey(x) & SickDuringPandemic(x)) -> GoesToWork(x))", "all x y.((Corey(x) & Pandemic(y)) -> GoesToWork(x,y))", "all x.((Corey(x) & Sick(x) & Pandemic(x)) -> GoesToWork(x))", "all x y.((Corey(x) & Pandemic(y)) -> (GoedToWork(x,y) & SickDuring(x,y)))", "all x y.((Corey(x) & Pandemic(y) & Sick(x,y)) -> GoesToWork(x,y))", "all x y z.((Corey(x) & Pandemic(y) & Sick(z)) -> GoesToWork(x,y,z))", "all x y.((Corey(x) & Pandemic(y)) -> (GoesToWork(x,y) & SickDuring(x,y)))", "all x y.((Corey(x) & Pandemic(y)) -> (GoedToWork(x,y) & WasSick(x,y)))", "all x.((Corey(x) & Sick(x)) -> GoesToWork(x))", "all x y.((Corey(x) & Pandemic(y)) -> (GoedToWork(x,y) & Sick(x,y)))", "all x y.((Corey(x) & Work(y) & SickDuringPandemic(x)) -> GoesTo(x,y))", "all x y.((Corey(x) & Pandemic(y)) -> (GoedToWork(x,y) & Sick(x)))", "all x y.((Corey(x) & Pandemic(y)) -> (GoesToWork(x,y) & WasSick(x,y)))", "all x y.((Corey(x) & Pandemic(y)) -> (GoedToWork(x,y) & WasSick(x)))", "all x y.((Corey(x) & Pandemic(y)) -> (GoesToWork(x,y) & Sick(x,y)))", "all x y.((Corey(x) & Pandemic(y) & Sick(x)) -> GoesToWork(x,y))"]}
{"id": "enwn_validation_485", "nl": "If you do something while sick you are prioritizing that thing over your health.", "fol": "", "prediction": ["all x y.((Does(x,y) & Sick(y)) -> PrioritizesOverHealth(x,y))", "all x.((DoesWhileSick(x) & PrioritizesThingOverHealth(x)) -> PrioritizesThingOverHealth(x))", "all x.((Do(x) & Sick(x)) -> PrioritizesOverHealth(x))", "all x y.((Does(x,y) & Sick(x)) -> PrioritizesOverHealth(y))", "all x y.((Do(x,y) & Sick(y)) -> PrioritizesOverHealth(x,y))", "all x.((DoesWhileSick(x) & Prioritizes(x,health)) -> Prioritizes(x,health))", "all x y.((DoesWhileSick(x) & Thing(y)) -> PrioritizesOverHealth(x,y))", "all x.((DoesWhileSick(x) & Prioritizes(x,Health)) -> Prioritizes(x,Health))", "all x y.((DoesWhileSick(x) & Health(y)) -> Prioritizes(x,y))", "all x.((Does(x,Sick) & Prioritizes(x,Sickness)) -> Prioritizes(x,Health))", "all x.((Does(x,Sick) & Prioritizes(x,Sickness)) -> Prioritizes(x,Sickness))", "all x y.((Does(x,y) & Sick(x)) -> PrioritizesOverHealth(x,y))", "all x.((Does(x,sick) & Prioritizes(x,sick)) -> Prioritizes(x,health))", "all x.((Does(x,Sick) & Prioritizes(x,Health)) -> Prioritizes(x,Sickness))", "all x y.((Does(x,y) & Sick(y)) -> Prioritizes(x,y))", "all x.((Does(x,sick) & Prioritizes(x,sick)) -> Prioritizes(x,sick))"]}
{"id": "enwn_validation_486", "nl": "Everyone prioritizing health helps stop disease from spreading.", "fol": "", "prediction": ["all x.(PrioritizesHealth(x) -> StopsDiseaseSpreading(x))", "all x.(PrioritizingHealth(x) -> StopsDiseaseSpreading(x))", "all x y.((PrioritizesHealth(x) & Disease(y)) -> StopsSpreading(x,y))", "all x.(PrioritizesHealth(x) -> HelpsStopDiseaseSpreading(x))", "all x.(PrioritizesHealth(x) -> StopsDiseaseFromSpreading(x))", "all x.(PrioritizingHealth(x) -> HelpsStopDiseaseSpreading(x))", "all x y.((Person(x) & Health(y) & Prioritizes(x,y)) -> StopsDiseaseSpreading(x,y))", "all x y.((PrioritizingHealth(x) & Disease(y)) -> StopsSpreading(x,y))", "all x y.((Person(x) & Health(y) & Prioritizes(x,y)) -> StopsDiseaseSpreading(x))", "all x.(PrioritizeHealth(x) -> StopsDiseaseSpreading(x))", "all x.(PrioritizingHealth(x) -> StopsDiseaseFromSpreading(x))", "all x y.((PrioritizesHealth(x) & Disease(y)) -> HelpsStopSpreading(x,y))", "all x.(PrioritizesHealth(x) -> HelpsStopDiseaseFromSpreading(x))", "all x.(PrioritizesHealth(x) -> HelpsStopDisease(x))", "all x.(PrioritizesHealth(x) -> StopsDisease(x))", "all x y.((Person(x) & Health(y) & Prioritizes(x,y)) -> StopsDiseaseFromSpreading(x,y))"]}
{"id": "enwn_validation_487", "nl": "It's important to stop the spread of disease, especially when health risk is elevated.", "fol": "", "prediction": ["all x.((HealthRisk(x) & Elevated(x)) -> StopsSpreadOfDisease(x))", "all x.((HealthRisk(x) & Elevated(x)) -> StopsDiseaseSpread(x))", "all x y.((HealthRisk(x) & HealthRisk(y)) -> StopsSpreadOfDisease(x,y))", "all x.((HealthRisk(x) & Elevated(x)) -> StopSpreadOfDisease(x))", "all x.((HealthRisk(x) & ElevatedHealthRisk(x)) -> StopsSpreadOfDisease(x))", "all x.((HealthRisk(x) & ElevatedHealthRisk(x)) -> StopsDiseaseSpread(x))", "all x.((HealthRisk(x) & Elevated(x)) -> StopsDisease(x))", "all x.((HealthRisk(x) & Elevated(x)) -> StopDiseaseSpread(x))", "all x y.((HealthRisk(x) & HealthRisk(y)) -> StopsDiseaseSpread(x,y))", "all x.((HealthRisk(x) & Elevated(x)) -> StopsSpreadOfDisease(x))", "all x y z.((HealthRisk(x) & Disease(y) & HealthRisk(z) & Elevated(z)) -> StopsSpread(x,y,z))", "all x y.((HealthRisk(x) & Disease(y)) -> StopsSpread(x,y))", "all x.((HealthRisk(x) & Exposed(x)) -> StopsSpreadOfDisease(x))", "all x y z.((HealthRisk(x) & Disease(y) & HealthRisk(z)) -> StopsSpread(x,y,z))", "all x.((StopSpreadOfDisease(x) & HealthRiskElevated(x)) -> Important(x))", "all x y.((HealthRisk(x) & HealthRisk(y) & Elevated(x)) -> StopsSpreadOfDisease(x,y))"]}
{"id": "enwn_validation_488", "nl": "A pandemic is a disease that is prevalent over a whole country or the world.", "fol": "", "prediction": ["all x.(Pandemic(x) -> (Disease(x) & PredominantOverCountryOrWorld(x)))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOverCountryOrWorld(x)))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOverWholeCountryOrWorld(x)))", "all x.(Pandemic(x) -> (Disease(x) & (PredominantOverCountry(x) | PredominantOverWorld(x))))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOver(x,country) | PredominantOver(x,world)))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOver(x,country) | PredominantOver(x,world)))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOverWholeCountryOrWorld(x)))", "all x.(Pandemic(x) -> (Disease(x) & exists y.(Country(y) | World(y)) & Predominant(x,y))))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOver(x,wholeCountry) | PredominantOver(x,world)))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOver(x,wholeCountry) | PredominantOver(x,world)))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOver(x,y) & WholeCountryOrWorld(y)))", "all x.(Pandemic(x) -> (Disease(x) & exists y.(Country(y) | World(y)) & PredominatesOver(x,y))))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOver(x,y) & (Country(y) | World(y))))", "all x.(Pandemic(x) -> (Disease(x) & PredominantOver(x,wholeCountry) | PredominantOver(x,wholeWorld)))", "all x y.((Pandemic(x) & Disease(y)) -> (PredominantOver(x,y) & (Country(y) | World(y))))", "all x.(Pandemic(x) -> (exists y.(Country(y) | World(y)) & Predominant(x,y))))"]}
{"id": "enwn_validation_489", "nl": "A disease that can effect the whole world escalates health risks for everyone.", "fol": "", "prediction": ["all x.((Disease(x) & CanEffectWholeWorld(x)) -> EscalatesHealthRisks(x))", "all x.((Disease(x) & CanEffectWholeWorld(x)) -> EscalatesHealthRisksForEveryone(x))", "all x.((Disease(x) & CanEffectWholeWorld(x)) -> InescalatesHealthRisks(x))", "all x y.((Disease(x) & WholeWorld(y) & Effects(x,y)) -> EscalatesHealthRisks(x))", "all x y.((Disease(x) & WholeWorld(y) & Effects(x,y)) -> EscalatesHealthRisks(x,y))", "all x.((Disease(x) & EffectsWholeWorld(x)) -> EscalatesHealthRisks(x))", "all x.((Disease(x) & CanEffectWholeWorld(x)) -> InescalatesHealthRisksForEveryone(x))", "all x y.((Disease(x) & WholeWorld(y) & Effects(x,y)) -> InescalatesHealthRisks(x))", "all x.((Disease(x) & CanEffectWallWorld(x)) -> EscalatesHealthRisks(x))", "all x y.((Disease(x) & WholeWorld(y) & Effects(x,y)) -> InescalatesHealthRisks(x,y))", "all x.((Disease(x) & CanEffectWideWorld(x)) -> EscalatesHealthRisks(x))", "all x y.((Disease(x) & WholeWorld(y) & Effects(x,y)) -> EscalatesHealthRisksForEveryone(x))", "all x.((Disease(x) & CanEffectWholeWorld(x)) -> InescalsHealthRisks(x))", "all x.((Disease(x) & EffectsWholeWorld(x)) -> EscalatesHealthRisksForEveryone(x))", "all x.((Disease(x) & EffectsWholeWorld(x)) -> InescalatesHealthRisks(x))", "all x y.((Disease(x) & WholeWorld(y) & Effects(x,y)) -> HealthRisks(x,y))"]}
{"id": "enwn_validation_490", "nl": "Corey prioritized work over her health during a pandemic.", "fol": "", "prediction": ["all x y.((Corey(x) & Pandemic(y)) -> PrioritizedWorkOverHealth(x,y))", "all x.((Corey(x) & Pandemic(x)) -> PrioritizedWorkOverHealth(x))", "all x y z.((Corey(x) & Pandemic(y) & Work(z)) -> PrioritizedOverHealth(x,z))", "all x y z.((Corey(x) & Pandemic(y) & Work(z)) -> PrioritizedOverHealth(x,y,z))", "all x y.((Corey(x) & Pandemic(y) & PrioritizedWorkOverHealth(x,y)) -> PrioritizedHealth(x,y))", "all x y.((Corey(x) & Pandemic(y) & PrioritizedWork(x,y)) -> PrioritizedHealth(x,y))", "all x y.((Corey(x) & Pandemic(y)) -> PrioritizedWork(x,y))", "all x y.((Connie(x) & Pandemic(y)) -> PrioritizedWorkOverHealth(x,y))", "all x y.((Corey(x) & Pandemic(y)) -> PrioritisedWorkOverHealth(x,y))", "all x.((Corey(x) & Pandemic(y)) -> PrioritizedWorkOverHealth(x,y))", "all x y z.((Corey(x) & Pandemic(y) & Work(z) & Health(z)) -> PrioritizedOver(x,z))", "all x y z.((Corey(x) & Pandemic(y) & Work(z) & Health(z)) -> PrioritizedOver(x,y,z))", "all x y.((Corey(x) & Pandemic(y)) -> PrioritizesWorkOverHealth(x,y))", "all x y.((Corey) & Pandemic(y)) -> PrioritizedWorkOverHealth(x,y))", "all x y.((Crystal(x) & Pandemic(y)) -> PrioritizedWorkOverHealth(x,y))", "all x y.(((Corey(x) & Pandemic(y)) -> PrioritizedWorkOverHealth(x,y))"]}
{"id": "enwn_validation_491", "nl": "Health should be everyone's priority, especially when health risk is elevated.", "fol": "", "prediction": ["all x.((HealthPriority(x) & HealthRiskElevated(x)) -> Priority(x))", "all x.((Health(x) & HealthRiskElevated(x)) -> Priority(x))", "all x.((HealthRisk(x) & Elevated(x)) -> Priority(x))", "all x y.((Health(x) & HealthRisk(y) & Elevated(y)) -> Priority(x,y))", "all x y.((HealthPriority(x) & HealthRisk(y) & Elevated(y)) -> Priority(x,y))", "all x.((HealthPriority(x) & ElevatedHealthRisk(x)) -> Priority(x))", "all x y.((Health(x) & HealthRisk(y) & Elevated(x,y)) -> Priority(x,y))", "all x y.((Health(x) & HealthRisk(y)) -> Priority(x,y))", "all x.((HealthPriority(x) & HealthRiskElevated(x)) -> EveryonePriority(x))", "all x.((HealthRisk(x) & ElevatedHealthRisk(x)) -> Priority(x))", "all x.((HealthPositive(x) & HealthRiskElevated(x)) -> Priority(x))", "all x.((HealthPreferred(x) & HealthRiskElevated(x)) -> Priority(x))", "all x.((HealthProperty(x) & HealthRiskElevated(x)) -> Priority(x))", "all x y.((HealthPriority(x) & HealthRisk(y) & Elevated(x,y)) -> Priority(x,y))", "all x.((HealthPriority(x) & HighHealthRisk(x)) -> Priority(x))", "all x y.((Health(x) & HealthRisk(y) & Elevated(x,y)) -> Priority(x))"]}
{"id": "enwn_validation_492", "nl": "A pandemic escalates health risks for everyone.", "fol": "", "prediction": ["all x.(Pandemic(x) -> EscalatesHealthRisks(x))", "all x y.((Pandemic(x) & Person(y)) -> EscalatesHealthRisks(x,y))", "all x.(Pandemic(x) -> InescalatesHealthRisks(x))", "all x y.((Pandemic(x) & Person(y)) -> InescalatesHealthRisks(x,y))", "all x y.((Pandemic(x) & Everyone(y)) -> EscalatesHealthRisks(x,y))", "all x y z.((Pandemic(x) & HealthRisk(y) & Person(z)) -> Escalates(x,y,z))", "all x y.((Pandemic(x) & HealthRisk(y)) -> Escalates(x,y))", "all x y.((Pandemic(x) & HealthRisk(y)) -> EscalatesFor(x,y))", "all x.(Pandemic(x) -> EscalatesHealthRisksForEveryone(x))", "all x y.((Pandemic(x) & Everyone(y)) -> InescalatesHealthRisks(x,y))", "all x y z.((Pandemic(x) & HealthRisk(y) & Person(z)) -> EscalatesFor(x,y,z))", "all x y.((Pandemic(x) & Person(y)) -> EscalatesHealthRisks(x,y))", "all x y.((Pandemic(x) & Person(y)) -> InescalatesHealthRisks(x,y))", "all x y.((Pandemic(x) & Person(y)) -> IncreasesHealthRisks(x,y))", "all x y z.((Pandemic(x) & HealthRisk(y) & Person(z)) -> Inescalates(x,y,z))", "all x y.((Pandemic(x) & HealthRisk(y)) -> EscalatesForEveryone(x,y))"]}
{"id": "enwn_validation_493", "nl": "During a pandemic, health should be everyone's top priority.", "fol": "", "prediction": ["all x y.((Pandemic(x) & Health(y)) -> TopPriority(x,y))", "all x.(Pandemic(x) -> HealthTopPriority(x))", "all x.((Pandemic(x) & Health(x)) -> TopPriority(x))", "all x.(Pandemic(x) -> TopPriority(x))", "all x.((Pandemic(x) & TopPriority(x)) -> Health(x))", "all x y.((Pandemic(x) & Pandemic(y)) -> HealthTopPriority(x,y))", "all x y z.((Pandemic(x) & Health(y) & Pandemic(z)) -> TopPriority(x,y,z))", "all x.(Pandemic(x) -> HealthPriority(x))", "all x y z.((Pandemic(x) & Health(y) & Pandemic(z)) -> TopPriority(y,z))", "all x.((Pandemic(x) & HealthPriority(x)) -> TopPriority(x))", "all x y.((Pandemic(x) & Pandemic(y)) -> TopPriority(x,y))", "all x y.((Pandemic(x) & Health(y)) -> TopPriority(y,x))", "all x y.((Pandemic(x) & Person(y)) -> TopPriority(y,x))", "all x y.((Pandemic(x) & Pandemic(y)) -> HealthPriority(x,y))", "all x.((Pandemic(x) & Health(y)) -> TopPriority(x,y))", "all x y.((Pandemic(x) & Person(y)) -> HealthTopPriority(y,x))"]}
{"id": "enwn_validation_494", "nl": "Corey had the wrong priorities.", "fol": "", "prediction": ["all x.(Corey(x) -> WorstPriorities(x))", "all x.((Corey(x) & WorstPriorities(x)) -> WorstPriorities(x))", "all x y.((Corey(x) & Priorities(y)) -> Worst(x,y))", "all x y.((Corey(x) & Priority(y)) -> Worst(x,y))", "all x.(Corey(x) -> HadWrongPriorities(x))", "Corey had the wrongpriorities.", "all x y.((Corey(x) & Priority(y)) -> WorstPriorities(x,y))", "all x.(Corey(x) -> WrongPriorities(x))", "All x.(Corey(x) -> WorstPriorities(x))", "all x y.((Corey(x) & Priorities(y)) -> WrongPriorities(x,y))", "all x y.((Corey(x) & Priority(y)) -> WrongPriorities(x,y))", "all x y.((Corey(x) & Priorities(y)) -> WorstPriorities(x,y))", "all x.(Corey(x) -> WasWrongPriorities(x))", "all x.((Corey(x) & WorstPriorities(x)) -> PoorPriorities(x))", "all x y.((Corey(x) & Priority(y)) -> WorstPositions(x,y))", "all x.((Corey(x) & WorstPriorities(x)) -> Had(x,y))"]}
{"id": "enwn_validation_495", "nl": "Ryan made fun of Stew's favorite TV show in front of others.", "fol": "", "prediction": ["all x y z.((Ryan(x) & Stew(y) & TVShow(z)) -> MadeFunOf(x,y,z))", "all x y.((Ryan(x) & Stew(y)) -> MadeFunOfFavoriteTVShow(x,y))", "Ryan made funOfFavoriteTVShow(Ryan,Stew) & InFrontOfOthers(Ryan,Stew))", "all x y z.((Ryan(x) & Stew(y) & TVShow(z) & Favorite(y,z)) -> MadeFunOf(x,y,z))", "all x y.((Ryan(x) & Stew(y)) -> MadeFunOfFavoriteTVShowInFrontOfOthers(x,y))", "all x y z.((Ryan(x) & Stew(y) & TVShow(z)) -> MadeFunOfInFrontOfOthers(x,y,z))", "all x y.((Ryan(x) & Stew(y)) -> MadeFunOf(x,y))", "all x y z.((Ryan(x) & TVShow(y) & Stew(z)) -> MadeFunOf(x,y,z))", "all x y z.((Ryan(x) & Stew(y) & TVShow(z)) -> (MadeFunOf(x,y,z) & InFrontOfOthers(x)))", "all x y.((Ryan(x) & Stew(y) & FavoriteTVShow(x,y)) -> MadeFunOf(x,y))", "all x y z.((Ryan(x) & Stew(y) & TVShow(z)) -> MadeFunOfFavoriteInFrontOfOthers(x,y,z))", "all x y z.((Ryan(x) & Stew(y) & TVShow(z) & Favorite(x,z)) -> MadeFunOf(x,y,z))", "all x y z.((Ryan(x) & Stew(y) & TVShow(z) & Favorite(z)) -> MadeFunOf(x,y,z))", "all x y z.((Ryan(x) & Stew(y) & TVShow(z) & Favorite(y,z)) -> MadeFunOfInFrontOfOthers(x,y,z))", "all x y z.((Ryan(x) & Stew(y) & TVShow(z)) -> MadeFunOfInFrontOf(x,y,z))", "Ryan made funOfFavoriteTelevisionShow(Ryan,Stew) & InFrontOfOthers(Ryan,Stew))"]}
{"id": "enwn_validation_496", "nl": "If you are in front of others then you are in public.", "fol": "", "prediction": ["all x.((InFrontOfOthers(x) & Public(x)) -> InFrontOfOthers(x))", "all x.(InFrontOfOthers(x) -> Public(x))", "all x.((InFrontOfOthers(x) & InPublic(x)) -> InPublic(x))", "all x.((FrontOfOthers(x) & Public(x)) -> InFrontOfOthers(x))", "all x.((InFrontOfOthers(x) & InPublic(x)) -> Public(x))", "all x.((FrontOfOthers(x) & InPublic(x)) -> InPublic(x))", "all x.((FrontOfOthers(x) & InPublic(x)) -> Public(x))", "all x.((InfrontOfOthers(x) & Public(x)) -> InFrontOfOthers(x))", "all x.((InFrontOfOthers(x) & Public(x)) -> Public(x))", "all x.((InfrontOfOthers(x) & InPublic(x)) -> InPublic(x))", "all x.(FrontOfOthers(x) -> Public(x))", "all x.(InFrontOfOthers(x) -> InPublic(x))", "all x.((Person(x) & InFrontOfOthers(x)) -> Public(x))", "all x.((InFrontOfOthers(x)) -> Public(x))", "all x.((InfrontOfOthers(x) & InPublic(x)) -> Public(x))", "all x.((InfrontOfOthers(x) & Public(x)) -> InPublic(x))"]}
{"id": "enwn_validation_497", "nl": "Making fun of something that someone else likes can make that person feel ashamed and foolish.", "fol": "", "prediction": ["all x y.((Fun(x) & Person(y) & Likes(x,y)) -> (Shameful(y) & Foolish(y)))", "all x y.((Fun(x) & Person(y) & Likes(x,y)) -> (Shamed(y) & Foolish(y)))", "all x y.((Fun(x) & Person(y) & Likes(x,y)) -> (Shameful(y) & Foolish(y)))", "all x y.((Fun(x) & Person(y) & Likes(x,y)) -> (HasShame(y) & Foolish(y)))", "all x y.((Fun(x) & Person(y) & Likes(x,y)) -> FeelsShamedAndFoolish(y))", "all x y.((Fun(x) & Person(y) & Likes(x,y)) -> (Shamed(y) & Foolish(y)))", "all x y.((Fun(x) & Person(y) & Likes(x,y)) -> FeelsShamefulAndFoolish(y))", "all x y.((MakingFunOf(x,y) & Person(y) & Likes(x,y)) -> (Shameful(y) & Foolish(y)))", "all x y.((Fun(x) & Person(y) & Likes(x,y)) -> (Shamed(y) & Fooky(y)))", "all x y.((MakingFunOf(x,y) & Person(y) & Likes(x,y)) -> (Shamed(y) & Foolish(y)))", "all x y.((Fun(x) & Person(y) & Likes(x,y)) -> (Shameful(y) & Fooky(y)))", "all x y.((Fun(x) & Person(y) & Likes(x,y)) -> (Shaunted(y) & Foolish(y)))", "all x y.((Fun(x) & Person(y) & Likes(y,x)) -> (Shamed(y) & Foolish(y)))", "all x y.((MakingFunOf(x,y) & Person(y) & Likes(x,y)) -> (HasShameful(y) & Foolish(y)))", "all x y.((MakingFunOf(x,y) & Person(y) & Likes(x,y)) -> (Shameful(y) & Foolish(y)))", "all x y.((Fun(x) & Person(y) & Likes(x,y)) -> (HasShame(y) & Fooky(y)))"]}
{"id": "enwn_validation_498", "nl": "To humiliate someone is to make someone feel ashamed and foolish by injuring their dignity and self-respect, especially publicly.", "fol": "", "prediction": ["all x y.((Humorize(x) & Person(y)) -> (MakesShameful(x,y) & MakesFoolish(x,y) & InjuresDignityAndSelfRespect(x,y)))", "all x y.((Humorize(x) & Person(y)) -> (MakesShamefulAndFoolish(x,y) & InjuresDignityAndSelfRespect(x,y)))", "all x y.((Humorize(x) & Person(y)) -> (MakesShameful(x,y) & MakesFoolish(x,y) & InjuresDignityAndSelfRespect(x) & EspeciallyPublicly(x)))", "all x y.((Humorize(x) & Person(y)) -> (MakesShamefulAndFoolish(x,y) & InjuresDignityAndSelfRespect(x) & EspeciallyPublicly(x)))", "all x y.((Humorize(x) & Person(y)) -> (MakesShamefulAndFoolish(x,y) & InjuresDignityAndSelfRespect(x,y) & EspeciallyPublicly(x)))", "all x y.((Humorizes(x) & Person(y)) -> (MakesShameful(x,y) & MakesFoolish(x,y) & InjuresDignityAndSelfRespect(x,y)))", "all x y.((Humorize(x) & Person(y)) -> (MakesShamefulAndFoolish(x,y) & InjuresDignityAndSelfRespect(x,y) & EspeciallyPublicly(x,y)))", "all x y.((Humorizes(x) & Person(y)) -> (MakesShamefulAndFoolish(x,y) & InjuresDignityAndSelfRespect(x,y)))", "all x y.((Humorize(x) & Person(y)) -> (MakesShameful(x,y) & MakesFoolish(x,y) & InjuresDignityAndSelfRespect(x,y) & EspeciallyPublicly(x)))", "all x y.((Humorizes(x) & Person(y)) -> (MakesShameful(x,y) & MakesFoolish(x,y) & InjuresDignityAndSelfRespect(x) & EspeciallyPublicly(x)))", "all x y.((Humorize(x) & Person(y)) -> (MakesShameful(x,y) & MakesFoolish(x,y) & InjuresDignityAndSelfRespect(x) & Publicly(x)))", "all x y.((Humorize(x) & Person(y)) -> (MakesShamefulAndFoolish(x,y) & InjuresDignityAndSelfRespect(x,y) & EspeciallyPublicly(y)))", "all x y.((Humorize(x) & Person(y)) -> (MakingShame(x,y) & MakingFoolish(x,y) & InjuringDignityAndSelfRespect(x,y)))", "all x y.((Humorize(x) & Person(y)) -> (MakesShamefulAndFoolish(x,y) & InjuresDignityAndSelfRespect(x,y) & Publicly(x)))", "all x y.((Humorize(x) & Person(y)) -> (MakesShameful(x,y) & MakesFoolish(x) & InjuresDignityAndSelfRespect(x,y)))", "all x y.((Humorize(x) & Person(y)) -> (MakesShamefulAndFoolish(x,y) & InjuresDignityAndSelfRespect(x,y) & Publicly(y)))"]}
{"id": "enwn_validation_499", "nl": "Humiliation is a form of harm.", "fol": "", "prediction": ["all x.(Humiliation(x) -> Harm(x))", "all x.(Humiliation(x) -> FormOfHarm(x))", "all x y.((Humiliation(x) & Harm(y)) -> FormOf(x,y))", "all x.(Humiliation(x) -> Harm(x))", "all x.(Humiliation(x) -> HasHarm(x))", "all x.(Humiliation(x) -> FormOfHarm(x))", "all x y.((Humiliation(x) & FormOfHarm(y)) -> Harm(x,y))", "all x y.((Humiliation(x) & Harm(y)) -> Harm(x,y))", "all x y.((Humiliation(x) & FormOfHarm(y)) -> FormOfHarm(x,y))", "all x y.((Humiliation(x) & FormOfHarm(y)) -> HasHazard(x,y))", "all x y.((Humiliation(x) & Harm(y)) -> HasHazard(x,y))", "all x.(Humiliation(x) -> (Harm(x) & FormOf(x)))", "all x y.((Humiliation(x) & Harm(y)) -> IsFormOf(x,y))", "all x.(Humiliation(x) -> HarmForm(x))", "all x.(Humiliation(x) -> (Harm(x) & Harm(x)))", "all x y.((Humiliation(x) & FormOfHarm(y)) -> Harm(x))"]}
{"id": "enwn_validation_500", "nl": "Ryan made fun of Stew's favorite TV show in public.", "fol": "", "prediction": ["all x y z.((Ryan(x) & Stew(y) & TVShow(z)) -> MadeFunOf(x,y,z))", "all x y.((Ryan(x) & Stew(y)) -> MadeFunOf(x,y))", "all x y.((Ryan(x) & Stew(y)) -> MadeFunOfFavoriteTVShow(x,y))", "all x y z.((Ryan(x) & TVShow(y) & TVShow(z)) -> MadeFunOf(x,y,z))", "all x y z.((Ryan(x) & Stew(y) & TVShow(z)) -> MadeFunOfInPublic(x,y,z))", "all x y z.((Ryan(x) & StewsFavoriteTVShow(y) & Public(z)) -> MadeFunOf(x,y,z))", "all x y.((Ryan(x) & Stew(y)) -> MadeFunOfTelevisionShow(x,y))", "all x y z.((Ryan(x) & Stew(y) & TVShow(z)) -> MadeFun(x,y,z))", "all x y z.((Ryan(x) & TVShow(y) & TVShow(z) & Favorite(y,z)) -> MadeFunOf(x,y,z))", "all x y z.((Ryan(x) & TVShow(y) & Stew(z)) -> MadeFunOf(x,y,z))", "all x y z.((Ryan(x) & Stew(y) & TVShow(z)) -> MadeFunInPublic(x,y,z))", "all x y.((Ryan(x) & Stew(y)) -> MadeFunOfTVShow(x,y))", "all x y z.((Ryan(x) & Stew(y) & TVShow(z) & Favorite(y,z)) -> MadeFunOf(x,y,z))", "all x y.((Ryan(x) & StewsFavoriteTVShow(y)) -> MadeFunInPublic(x,y))", "all x y.((Ryan(x) & Stew(y) & TVShow(y)) -> MadeFunOf(x,y))", "Ryan made funOfFavoriteTVShow(Ryan,Stew) & InPublic(Ryan,Stew))"]}
{"id": "enwn_validation_501", "nl": "Ryan made Stew feel ashamed and foolish in public.", "fol": "", "prediction": ["Ryan made Stew feel ashamed and foolish in public.", "all x y.((Ryan(x) & Stew(y)) -> (HasSickened(y) & Fooky(y)))", "all x y.((Ryan(x) & Stew(y)) -> (Shamed(y) & Foolish(y)))", "all x y.((Ryan(x) & Stew(y)) -> (Shameful(y) & Foolish(y)))", "all x y.((Ryan(x) & Stew(y)) -> (HasSickened(y) & Foolish(y)))", "all x y.((Ryan(x) & Stew(y)) -> (Shamed(y) & Fooky(y)))", "all x y z.((Ryan(x) & Stew(y) & Public(z)) -> (HasSickened(y,z) & Foolish(y,z)))", "all x y.((Ryan(x) & Stew(y)) -> (Shameful(y) & Fooky(y)))", "all x y z.((Ryan(x) & Stew(y) & Public(z)) -> (HasSickened(y,z) & Fooky(y,z)))", "all x y z.((Ryan(x) & Stew(y) & Public(z)) -> (Shamed(y,z) & Foolish(y,z)))", "all x y.((Ryan(x) & Stew(y)) -> (Shamed(y) & Foolish(y)))", "all x y z.((Ryan(x) & Stew(y) & Public(z)) -> (Shameful(y) & Foolish(y)))", "all x y.((Ryan(x) & Stew(y)) -> (HasSickened(y) & Foolish(y)))", "all x y z.((Ryan(x) & Stew(y) & Public(z)) -> (HasSickened(y,z) & Fooky(z)))", "all x y.((Ryan(x) & Stew(y)) -> (Shameful(y) & Foolish(y)))", "all x y z.((Ryan(x) & Stew(y) & Public(z) & Shameful(y) & Foolish(z)) -> MadeIn(x,y,z))"]}
{"id": "enwn_validation_502", "nl": "Ryan humiliated Stew.", "fol": "", "prediction": ["all x y.((Ryan(x) & Stew(y)) -> Humiliated(x,y))", "Ryan humiliatedStew.", "all x y z.((Ryan(x) & Stew(y) & Stew(z)) -> Humiliated(x,y,z))", "all x.((Ryan(x) & Stew(y)) -> Humiliated(x,y))", "All x y.((Ryan(x) & Stew(y)) -> Humiliated(x,y))", "all x y.((Ryan(x) & Stew(y)) -> Humiliates(x,y))", "all x y z.((Ryan(x) & Stew(y) & Stew(z)) -> Humiliated(x,y))", "all x y.((Ryan(x) & Stew(y)) -> Humilated(x,y))", "all x y z.((Ryan(x) & Stew(y) & Stew(z)) -> Humiliates(x,y,z))", "((Ryan(Ryan) & Stew(Stew)) -> Humiliated(Ryan))", "all x y.((Ranan(x) & Stew(y)) -> Humiliated(x,y))", "all x.((Ryan(x) & Stew(x)) -> Humiliated(x))", "all x.((Ryan(x) & Stew(x)) -> Humiliated(x,Stew))", "all x y.((Random(x) & Stew(y)) -> Humiliated(x,y))", "all x.((Ryan(x) & Stew(s)) -> Humiliated(x,s))", "all x y z.((Ryan(x) & Stew(y) & Stew(z)) -> Humilated(x,y,z))"]}
{"id": "enwn_validation_503", "nl": "You should not humiliate someone else.", "fol": "", "prediction": ["all x y.((Employee(x) & Person(y)) -> -Humorize(x,y))", "all x y.((Employee(x) & Person(y)) -> -Humorizes(x,y))", "all x y.((Person(x) & Humiliates(x,y)) -> -Humorizes(x,y))", "all x.((Person(x) & -Humorize(x)) -> -Humorize(x))", "all x.((Another(x) & -Humorize(x)) -> -Humorize(x))", "all x y.((Person(x) & Person(y)) -> -Humorize(x,y))", "all x y.((Another(x) & Person(y)) -> -Humorize(x,y))", "all x y.((You(x) & Person(y)) -> -Humorize(x,y))", "all x y.((Other(x) & Person(y)) -> -Humorize(x,y))", "all x.((Actor(x) & -Humorize(x)) -> -Humorize(x))", "all x y.((Actor(x) & Humiliates(x,y)) -> -Humorizes(x,y))", "all x y.((Person(x) & Humiliates(x,y)) -> -Humorize(x,y))", "all x.((Another(x) & -Humorizes(x)) -> -Humorizes(x,Another(x))", "all x.((Another(x) & -Humorize(x)) -> -Humorize(x,Another(x))", "all x.((Another(x) & -Humorizes(x)) -> -Humorizes(x))", "all x y.((Person(x) & Humiliated(y)) -> -Has(x,y))"]}
{"id": "enwn_validation_504", "nl": "Ryan should not have humiliated Stew.", "fol": "", "prediction": ["all x y.((Ryan(x) & Stew(y)) -> -Humorized(x,y))", "all x.((Ryan(x) & Stew(y)) -> -Humorized(x,y))", "all x y.((Ryan(x) & Stew(y)) -> -Hammed(x,y))", "all x y.((Ryan(x) & Stew(y)) -> -Hilarious(x,y))", "all x.((Ryan(x) & Stew(x)) -> -Humorized(x,Stew))", "all x.((Ryan(x) & Stew(s)) -> -Humorized(x,s))", "all x.((Ryan(x) & Stew(y)) -> -Hammed(x,y))", "all x.((Ryan(x) & Stew(stew)) -> -Humorized(x,stew))", "all x.((Ryan(x) & Stew(y)) -> -Hilarious(x,y))", "all x y z.((Ryan(x) & Stew(y) & Humiliated(z)) -> -Hungry(x,y,z))", "all x y.((Ryan(x) & Stew(y)) -> -Hungry(x,y))", "all x y z.((Ryan(x) & Stew(y) & Humiliated(z)) -> -Hungry(x,y))", "all x y.((Ryan(x) & Stew(y)) -> -Hilmed(x,y))", "all x.((Ryan(x) & Stew(s)) -> -Hammed(x,s))", "all x.((Ryan(x) & Stew(x)) -> -Hammed(x,Stew))", "all x y.((Ryan(x) & Stew(y)) -> -HasHumorized(x,y))"]}
{"id": "enwn_validation_505", "nl": "Henry was dumped by Chloe and thought it was unfair of her so he is planning to deface her Facebook page.", "fol": "", "prediction": ["all x y.((Henry(x) & Chloe(y) & DumpedBy(x,y)) -> PlannedDeface(x,y))", "all x y.((Henry(x) & Chloe(y) & DumpedBy(x,y)) -> PlannedToDefaceFacebookPage(x,y))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (DumpedBy(x,y) & Unfair(y) & PlanningToDeface(x,z)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (DumpedBy(x,y) & Unfair(y) & PlannedToDeface(x,z)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (DumpedBy(x,y) & Unfair(y) & PlansToDeface(x,z)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (DumpedBy(x,y) & Unfair(y) & PlannedToDefeat(x,z)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (DumpedBy(x,y) & Unfair(y) & PlannedDeface(x,z)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (DumpedBy(x,y) & Unfair(y) & PlannedToDefface(x,z)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z) & DumpedBy(x,y) & Unfair(y)) -> PlannedDeface(x,z))", "all x y.((Henry(x) & Chloe(y) & DumpedBy(x,y)) -> PlannedToDefaceFacebook(x,y))", "all x y.((Henry(x) & Chloe(y)) -> (DumpedBy(x,y) & Unfair(y) & PlannedToDeface(x,y)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (DumpedBy(x,y) & Unfair(y)))", "all x y.((Henry(x) & Chloe(y) & DumpedBy(x,y)) -> PlannedToDeface(x,y))", "all x y.((Henry(x) & Chloe(y)) -> (DumpedBy(x,y) & Unfair(y) & PlannedToDefaceFacebookPage(x,y)))", "all x y.((Henry(x) & Chloe(y) & DumpedBy(x,y)) -> PlannedDefaceFacebookPage(x,y))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (DumpedBy(x,y) & Unfair(y) & PlanningToDefeat(x,z)))"]}
{"id": "enwn_validation_506", "nl": "If someone does something to you that feels unfair then you feel wronged by that person.", "fol": "", "prediction": ["all x.((Does(x,y) & FeelsUnfair(y)) -> FeelsWorstBy(x,y))", "all x.((DoesToYou(x) & FeelsUnfair(x)) -> FeelsWorstBy(x))", "all x.((DoesUnfairThing(x) & FeelsUnfair(x)) -> FeelsWorstBy(x))", "all x.((Does(x,y) & FeelsUnfair(x)) -> FeelsWorstBy(x,y))", "all x y.((Does(x,y) & Person(y) & FeelsUnfair(x)) -> FeelsWorstBy(x,y))", "all x y.((Person(x) & Person(y) & DoesUnfairThing(x,y)) -> FeelsWorst(x,y))", "all x y.((Does(x,y) & Person(y) & FeelsUnfair(y)) -> FeelsWorst(x,y))", "all x y.((Does(x,y) & Person(y) & FeelsUnfair(x)) -> FeelsWorst(y))", "all x y.((Does(x,y) & Person(y) & FeelsUnfair(x)) -> FeelsWorst(x,y))", "all x y.((Does(x,y) & Person(y) & FeelsUnfair(y)) -> FeelsWorstBy(x,y))", "all x.((DoesToYou(x) & FeelsUnfair(x)) -> FeelsWorstBy(x,y))", "all x y.((Does(x,y) & Person(y) & FeelsUnfair(x)) -> FeelsWrongedBy(x,y))", "all x.((DoesUnfairToYou(x) & FeelsUnfairToYou(x)) -> FeelsWorstBy(x))", "all x.((Person(x) & FeelsUnfair(x)) -> FeelsWorst(x))", "all x.((DoesToYou(x) & FeelsUnfair(x)) -> FeelsWrongedBy(x))", "all x.((Person(x) & DoesUnfairThing(x)) -> FeelsWorst(x))"]}
{"id": "enwn_validation_507", "nl": "Defacing someone's social media page is a way of harming them.", "fol": "", "prediction": ["all x y.((SocialMediaPage(x) & Person(y) & Defacing(x,y)) -> Harms(x,y))", "all x y.((SocialMediaPage(x) & SocialMediaPage(y)) -> Harms(x,y))", "all x y.((SocialMediaPage(x) & SocialMediaPage(y) & Defacing(x,y)) -> Harms(x,y))", "all x y.((SocialMediaPage(x) & Person(y) & Defaced(x,y)) -> Harms(x,y))", "all x y.((SocialMediaPage(x) & Person(y)) -> Harms(x,y))", "all x y.((Person(x) & SocialMediaPage(y) & Defacing(x,y)) -> Harms(x,y))", "all x y.((SocialMediaPage(x) & Person(y) & Defaces(x,y)) -> Harms(x,y))", "all x y.((SocialMediaPage(x) & SocialMediaPage(y) & Defaced(x,y)) -> Harms(x,y))", "all x y.((SocialMediaPage(x) & Person(y) & Defacing(x,y)) -> Harms(y))", "all x y z.((SocialMediaPage(x) & SocialMediaPage(y) & Person(z) & Defacing(x,y,z)) -> Harms(x,y,z))", "all x y.((SocialMediaPage(x) & Person(y) & Defacing(x,y)) -> Harms(y,x))", "all x y.((SocialMediaPage(x) & Person(y) & Defacing(x,y)) -> Harming(x,y))", "all x.((SocialMediaPage(x) & Defacing(x)) -> Harms(x))", "all x y z.((SocialMediaPage(x) & SocialMediaPage(y) & Person(z) & Defacing(x,y,z)) -> Harms(x,y))", "all x y.((SocialMediaPage(x) & Person(y)) -> Harms(y,x))", "all x.(DefacingSocialMediaPage(x) -> HarmsPeople(x))"]}
{"id": "enwn_validation_508", "nl": "Planning to inflict harm on someone for a wrong suffered at their hand is called seeking revenge.", "fol": "", "prediction": ["all x y.((PlansToInflictHarm(x) & Person(y) & WrongSufferedAtHand(y)) -> SeekingRevenge(x))", "all x y.((PlansToInflictHarm(x,y) & Person(y) & WrongSufferedAtHand(y)) -> SeekingRevenge(x))", "all x y.((PlanningToInflictHarm(x) & Person(y) & WrongSufferedAtHand(y)) -> SeekingRevenge(x))", "all x y.((PlansToInflictHarmOn(x,y) & Person(y) & WrongSufferedAtHand(y)) -> SeekingRevenge(x))", "all x.((PlansToInflictHarm(x) & Person(x) & WrongSufferedAtHand(x)) -> SeekingRevenge(x))", "all x y.((PlanningToInflictHarm(x,y) & Person(y) & WrongSufferedAtHand(y)) -> SeekingRevenge(x))", "all x.((PlansToInflictHarmOnPerson(x) & WrongSufferedAtHand(x)) -> SeekingRevenge(x))", "all x y.((PlansToInflictHarm(x) & Person(y) & SufferedAtHand(y)) -> SeekingRevenge(x))", "all x y.((PlansToInflictHarm(x) & Person(y) & WrongSufferedAtHand(y)) -> SeeksRevenge(x))", "all x y.((PlanningToInflictHarmOn(x,y) & Person(y) & WrongSufferedAtHand(y)) -> SeekingRevenge(x))", "all x y.((PlansToInflictHarm(x,y) & Person(y) & SufferedAtHand(y)) -> SeekingRevenge(x))", "all x y.((PlanningToInflictHarm(x) & Person(y) & WrongSufferedAtHand(y)) -> SeeksRevenge(x))", "all x.((PlansToInflictHarm(x) & PersonSufferedAtHand(x)) -> SeekingRevenge(x))", "all x y.((PlansToInflictHarm(x,y) & Person(y) & WrongSufferedAtHand(y)) -> SeeksRevenge(x))", "all x y.((PlanningToInflictHarm(x,y) & Person(y) & WrongSufferedAtHand(y)) -> SeeksRevenge(x))", "all x y.((PlanningToInflictHarmOn(x,y) & Person(y) & WrongSufferedAtHand(y)) -> SeeksRevenge(x))"]}
{"id": "enwn_validation_509", "nl": "It is better to heal than to hurt others.", "fol": "", "prediction": ["all x y.((Heal(x) & Hurt(y)) -> BetterToHeal(x,y))", "all x y.((Healing(x) & HurtingOthers(y)) -> BetterToHeal(x,y))", "all x y.((Heal(x) & Illness(y)) -> BetterToHeal(x,y))", "all x y.((Healing(x) & Hurting(y)) -> BetterToHeal(x,y))", "all x y.((Heal(x) & Injure(y)) -> BetterToHeal(x,y))", "all x y.((Heal(x) & Irresponsible(y)) -> BetterToHeal(x,y))", "all x y.((Healing(x) & Hurting(y)) -> Better(x,y))", "all x y.((Healing(x) & HurtingOthers(y)) -> Better(x,y))", "all x y.((Healing(x) & Irresponsible(y)) -> BetterToHeal(x,y))", "all x y.((Healing(x) & Injuring(y)) -> BetterToHeal(x,y))", "all x y.((Heal(x) & Hurt(y)) -> Better(x,y))", "all x y.((Heal(x) & Illness(y)) -> Better(x,y))", "all x y.((Healing(x) & Injuring(y)) -> Better(x,y))", "all x y.((Heal(x) & Injure(y)) -> Better(x,y))", "all x y.((Healing(x) & Illness(y)) -> Better(x,y))", "all x y.((Healing(x) & InjuringOthers(y)) -> Better(x,y))"]}
{"id": "enwn_validation_510", "nl": "When you feel wronged by someone, forgiving and forgetting is a way of healing.", "fol": "", "prediction": ["all x.((FeltWronged(x) & Forgives(x) & Forgets(x)) -> Healing(x))", "all x.((FeltWrongedBy(x) & Forgives(x) & Forgets(x)) -> Healing(x))", "all x.((FeltWrongedBy(x) & ForgivesAndForgets(x)) -> Healing(x))", "all x y.((FeltWrongedBy(x,y) & Person(y)) -> ForgivesAndForgets(x,y))", "all x y.((FeltWronged(x) & Person(y) & ForgivesAndForgets(x,y)) -> Healing(x))", "all x y.((FeltWronged(x) & Person(y)) -> ForgivesAndForgets(x,y))", "all x.((FeltWronged(x) & ForgivesAndForgets(x)) -> Healing(x))", "all x.((Forgives(x) & Forgets(x)) -> Healing(x))", "all x.((FeltWrongedBy(x) & Forgiven(x) & Forgotten(x)) -> Healing(x))", "all x y.((FeltWronged(x) & Person(y)) -> (Forgives(x,y) & Forgets(x,y)))", "all x y.((FeltWrongedBy(x,y) & Person(y)) -> (Forgives(x,y) & Forgets(x,y)))", "all x.((FeltWronged(x) & Forgiven(x) & Forgotten(x)) -> Healing(x))", "all x.((FeltWrongedBy(x) & Forgives(x) & Remembers(x)) -> Healing(x))", "all x y.((FeelWronged(x) & Person(y)) -> ForgivesAndForgets(x,y))", "all x y.((FeltWronged(x) & Person(y)) -> (Forgives(x,y) & Remembers(x,y)))", "all x y.((Person(x) & FeelsWrongedBy(x,y)) -> ForgivesAndForgets(x,y))"]}
{"id": "enwn_validation_511", "nl": "Henry felt wronged by Chloe and was planning to deface her Facebook page.", "fol": "", "prediction": ["all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (FeltWrongedBy(x,y) & PlannedToDefeat(x,z)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (FeltWronged(x,y) & PlannedToDefeat(x,z)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (FeltWrongedBy(x,y) & PlannedToDeface(x,z)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (FeltWrongedBy(x,y) & PlannedToDefface(x,z)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWrongedBy(x,y) & PlannedToDefaceFacebookPage(x,y)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWronged(x,y) & PlannedToDefaceFacebookPage(x,y)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (FeltWronged(x,y) & PlannedToDeface(x,z)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (FeltWronged(x,y) & PlannedToDefface(x,z)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWrongedBy(x,y) & PlannedToDeface(x,y)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (FeltWronged(x,y) & PlannedDeface(x,z)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (FeltWrongedBy(x,y) & PlanningToDeface(x,z)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (FeltWrongedBy(x,y) & PlanningToDefeat(x,z)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWronged(x,y) & PlannedToDeface(x,y)))", "all x y z.((Henry(x) & Chloe(y) & FacebookPage(z)) -> (FeltWronged(x,y) & PlanningToDefeat(x,z)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWronged(x,y) & PlannedToDefaceFacebook(x,y)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWrongedBy(x,y) & PlannedToDefeat(x,y)))"]}
{"id": "enwn_validation_512", "nl": "Henry felt wronged by Chloe and was planning to inflict harm on her.", "fol": "", "prediction": ["all x y.((Henry(x) & Chloe(y)) -> (FeltWronged(x,y) & PlannedToInflictHarm(x,y)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWrongedBy(x,y) & PlannedToInflictHarm(x,y)))", "all x y z.((Henry(x) & Chloe(y) & Chloe(z)) -> (FeltWronged(x,y) & PlannedToInflictHarm(x,z)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWrongedBy(x,y) & PlannedToInflictHarmOn(x,y)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWorse(x,y) & PlannedToInflictHarm(x,y)))", "all x y z.((Henry(x) & Chloe(y) & Chloe(z)) -> (FeltWrongedBy(x,y) & PlannedToInflictHarm(x,z)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWorst(x,y) & PlannedToInflictHarm(x,y)))", "all x y z.((Henry(x) & Chloe(y) & Chloe(z)) -> (FeltWrongedBy(x,y) & PlannedToInflictHarmOn(x,z)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWronged(x,y) & PlanningToInflictHarm(x,y)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWronged(x,y) & PlannedToInflictHarmOn(x,y)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWrongedBy(x,y) & PlanningToInflictHarm(x,y)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWrongedBy(x,y) & PlanningToInflictHarmOn(x,y)))", "all x y z.((Henry(x) & Chloe(y) & Chloe(z)) -> (FeltWorse(x,y) & PlannedToInflictHarm(x,z)))", "all x y z.((Henry(x) & Chloe(y) & Chloe(z)) -> (FeltWrongedBy(x,y) & PlanningToInflictHarm(x,z)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWorse(x,y) & PlanningToInflictHarm(x,y)))", "all x y.((Henry(x) & Chloe(y)) -> (FeltWorsted(x,y) & PlannedToInflictHarm(x,y)))"]}
{"id": "enwn_validation_513", "nl": "Henry is seeking revenge.", "fol": "", "prediction": ["Henry seeksRevenge(Henry)", "Henry is seekingRevenge(Henry)", "(SeeksRevenge(Henry)", "all x.(Henry(x) -> SeeksRevenge(x))", "all x.(Henry(x) -> SeekingRevenge(x))", "all x.(Henry(x) -> SeeksRenemy(x))", "all x.(Henry(x) -> SeeksRevenge(x))", "All x.(Henry(x) -> SeeksRevenge(x))", "all x.(Henry(x) -> SeeksRenemy(x))", "all x.(Henry(x) -> SeekingRenemy(x))", "Henry seeksRenemy(Henry)", "all x.(Henry(x) -> StrugglingRevenge(x))", "all x.(Henry(x) -> SeekingRenege(x))", "All x.(Henry(x) -> SeeksRenemy(x))", "Henry is seekingRenemy(Henry)", "(SeeksRenemy(Henry)"]}
{"id": "enwn_validation_514", "nl": "When you feel wronged, it is better to forgive and forget than to hurt those who wronged you.", "fol": "", "prediction": ["all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> IrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(I)))))", "all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> IrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(I)))))", "all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> IrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(I)))))", "all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> IrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(I))))", "all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> IrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(I))))", "all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> IrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(I)))))", "all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> IrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(I))))", "all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> IrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(I)))))", "all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> IrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(I))))", "all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> IrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(I))))", "all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> IrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(I)))))", "all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> IrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(I)))))", "all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> IrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsible(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(I)))))", "all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> IrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsible(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(I)))))", "all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> IrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsible(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(I)))))", "all x.((FeltWronged(x) & BetterToForgive(x) & BetterToForget(x)) -> IrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponsibleToIrresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(Irresponse(I))))"]}
{"id": "enwn_validation_515", "nl": "It is better to forgive and forget than to seek revenge.", "fol": "", "prediction": ["all x.((Forgive(x) & Forget(x)) -> BetterToSeekRevenge(x))", "all x.((Forgives(x) & Forgets(x)) -> SeeksRevenge(x))", "all x.((Forgiveness(x) & Forget(x)) -> BetterToSeekRevenge(x))", "all x.((Forgives(x) & Forgets(x)) -> BetterToSeekRevenge(x))", "all x.((Forgives(x) & Forgets(x)) -> BetterSeeksRevenge(x))", "all x y.((Forgiven(x) & Forgotten(y)) -> BetterToSeekRevenge(x,y))", "all x.((Forgiven(x) & Forgotten(x)) -> BetterToSeekRevenge(x))", "(BetterToForgive(x) & BetterToForget(x) & BetterToSeekRevenge(x))", "all x.((Forgiveness(x) & Forget(x)) -> BetterSeekRevenge(x))", "all x.((Forgives(x) & -SeeksRevenge(x)) -> BetterToForget(x))", "all x y.((Forgiveness(x) & Forget(y)) -> BetterToSeekRevenge(x,y))", "all x.((Forgive(x) & Forget(x)) -> BetterSeekRevenge(x))", "all x y.((Forgives(x) & Forgets(x)) -> BetterToSeekRevenge(y))", "all x y.((Forgives(x) & Forgets(x)) -> BetterToSeekRevenge(x,y))", "all x y.((Forgiven(x) & Forgotten(y)) -> BetterToSeekRevenge(x))", "all x.((Forgive(x) & Forget(x)) -> BetterToSeekRenemy(x))"]}
{"id": "enwn_validation_516", "nl": "Henry should forgive and forget instead of seeking revenge.", "fol": "", "prediction": ["all x.(Henry(x) -> (Forgive(x) & Forget(x) & -SeekRevenge(x)))", "all x.(Henry(x) -> (Forgives(x) & Forgets(x) & -SeeksRevenge(x)))", "all x.(Henry(x) -> (Forgive(x) & Forget(x) & -SeeksRevenge(x)))", "all x.((Henry(x) & Forgives(x) & Forgets(x)) -> -SeeksRevenge(x))", "all x.(Henry(x) -> (Forgive(x) & Forget(x) & -SeekRenemy(x)))", "all x.((Henry(x) & Forgive(x) & Forget(x)) -> -SeeksRevenge(x))", "all x.(Henry(x) -> (Forgive(x) & Forget(x)))", "all x.(Henry(x) -> (Forgive(x) & Forget(x) & -SeekingRevenge(x)))", "all x.(Henry(x) -> (Forgives(x) & -SeeksRevenge(x)))", "all x.(Henry(x) -> (Forgives(x) & Forgets(x)))", "all x.(Henry(x) -> (Forgives(x) & Forgets(x) & -SeeksRenemy(x)))", "all x.(Henry(x) -> (Forgive(x) & Forget(x) & -SeekRevenge(x)))", "all x.((Henry(x) & Forgives(x) & Forgets(x)) -> -SeeksRenemy(x))", "all x.(Henry(x) -> (Forgive(x) & Forget(x) & -SeekReneece(x)))", "all x.(Henry(x) -> (Forgive(x) & Forget(x) & -SeekRevenge(x)))", "all x.(Henry(x) -> (Forgive(x) & Forget(x) & -SeeksRenemy(x)))"]}
{"id": "enwn_validation_517", "nl": "Slandering is damaging to a person's reputation.", "fol": "", "prediction": ["all x.(Slandering(x) -> DamagesReputation(x))", "all x.(Slandering(x) -> DamagedToReputation(x))", "all x y.((Person(x) & Slandering(y)) -> DamagesReputation(x,y))", "all x y.((Person(x) & Slandering(y)) -> DamagedToReputation(x,y))", "all x y.((Person(x) & Slandering(y)) -> DamagedReputation(x,y))", "all x y.((Slandering(x) & Person(y)) -> DamagesReputation(x,y))", "all x y.((Slanderer(x) & Person(y)) -> DamagesReputation(x,y))", "all x y.((Slandering(x) & Person(y)) -> DamagedToReputation(x,y))", "all x y.((Person(x) & Slandering(x)) -> DamagesReputation(x,y))", "all x y.((Person(x) & Slandering(x)) -> DamagedToReputation(x,y))", "all x.(Slandering(x) -> DamagedReputation(x))", "all x y.((Slanderer(x) & Person(y)) -> DamagedReputation(x,y))", "all x y.((Slandering(x) & Person(y)) -> DamagedReputation(x,y))", "all x y.((Person(x) & Slandering(y)) -> DamagedToReputation(y))", "all x y.((Person(x) & Slander(y)) -> DamagesReputation(x,y))", "all x y.((Person(x) & Slandering(y)) -> DamagesReputation(y))"]}
{"id": "enwn_validation_518", "nl": "Damaging someone's reputation is harmful to them.", "fol": "", "prediction": ["all x y.((Damaging(x) & Person(y)) -> HarmfulToReputation(x,y))", "all x.(DamagingReputation(x) -> HarmfulToReputation(x))", "all x y.((Damaging(x,y) & Person(y)) -> HarmfulToReputation(x,y))", "all x y.((DamagingReputation(x) & Person(y)) -> HarmfulTo(x,y))", "all x y.((Person(x) & Reputation(y) & Damaging(x,y)) -> HarmfulTo(x,y))", "all x y.((Damage(x) & Person(y)) -> HarmfulToReputation(x,y))", "all x y z.((Damaging(x) & Person(y) & Reputation(z)) -> HarmfulTo(x,y,z))", "all x.(DamagingReputation(x) -> HarmfulTo(x))", "all x y.((Person(x) & Person(y) & DamagingReputation(x,y)) -> HarmfulTo(x,y))", "all x y z.((Damaging(x) & Person(y) & Reputation(z)) -> HarmfulTo(y,z))", "all x y.((Damaging(x) & Person(y)) -> HarmfulReputation(x,y))", "all x.(Damaging(x) -> HarmfulToReputation(x))", "all x y.((Damaging(x) & Person(y)) -> HarmfulTo(x,y))", "all x.(DamagingReputation(x) -> HarmfulToPerson(x))", "all x y.((DamagingReputation(x) & Person(y)) -> HarmfulToReputation(x,y))", "all x y.((Person(x) & Reputation(y)) -> HarmfulTo(x,y))"]}
{"id": "enwn_validation_519", "nl": "Paul slandered Jimmy in his magazine to increase sales.", "fol": "", "prediction": ["all x y z.((Paul(x) & Jimmy(y) & Magazine(z)) -> SlanderedToIncreaseSales(x,y,z))", "all x y.((Paul(x) & Jimmy(y)) -> SlanderedInMagazineToIncreaseSales(x,y))", "all x y.((Paul(x) & Jimmy(y)) -> SlanderedInMagazine(x,y))", "Paul slandered Jimmy in his magazine to increase sales.", "all x y.((Paul(x) & Jimmy(y)) -> SlanderedToIncreaseSales(x,y))", "all x y.((Paul(x) & Jimmy(y) & Magazine(z)) -> SlanderedToIncreaseSales(x,y,z))", "all x y z.((Paul(x) & Jimmy(y) & Magazine(z) & Slandered(x,y)) -> IncreasedSales(x,z))", "all x y.((Paul(x) & Jimmy(y) & Magazine(y)) -> SlanderedToIncreaseSales(x,y))", "all x y.((Paul(x) & Jimmy(y)) -> Slandered(x,y))", "all x y z.((Paul(x) & Jimmy(y) & Magazine(z)) -> Slandered(x,y,z))", "all x y z.((Paul(x) & Jimmy(y) & Magazine(z) & Slandered(x,y,z)) -> IncreasedSales(x,y))", "all x y z.((Paul(x) & Jimmy(y) & Magazine(z) & Slandered(x,y,z)) -> IncreasedSales(x,y,z))", "all x y z.((Paul(x) & Jimmy(y) & Magazine(z) & Slandered(x,y)) -> IncreasesSales(x,z))", "all x y z.((Paul(x) & Jimmy(y) & Magazine(z) & Slandered(x,y)) -> IncreasedSales(y,z))", "all x y z.((Paul(x) & Jimmy(y) & Magazine(z) & IncreasedSales(z)) -> Slandered(x,y,z))", "all x y z.((Paul(x) & Jimmy(y) & Magazine(z) & Slandered(x,y,z)) -> IncreasedSales(x))"]}
{"id": "enwn_validation_520", "nl": "Slandering someone is harmful to them.", "fol": "", "prediction": ["all x y.((Slanderer(x) & Person(y)) -> HarmfulTo(x,y))", "all x y.((Slandering(x) & Person(y)) -> HarmfulTo(x,y))", "all x y.((Slander(x) & Person(y)) -> HarmfulTo(x,y))", "all x y.((Slanderer(x) & Person(y)) -> Harmful(x,y))", "all x y.((Person(x) & Slander(y)) -> HarmfulTo(x,y))", "all x y z.((Slanderer(x) & Person(y) & Person(z)) -> HarmfulTo(x,y,z))", "all x y.((Slanderer(x) & Person(y)) -> HarmfulTo(y,x))", "all x y.((Person(x) & Slanderer(y)) -> HarmfulTo(x,y))", "all x.(Slandering(x) -> HarmfulTo(x,y))", "all x.(Slander(x) -> HarmfulTo(x,y))", "all x y z.((Slanderer(x) & Person(y) & Person(z)) -> HarmfulTo(y,z))", "all x.(Slandering(x) -> HarmfulTo(x))", "all x.(Slander(x) -> HarmfulToPerson(x))", "all x.(Slandering(x) -> HarmfulToPerson(x))", "all x y.((Slandering(x) & Person(y)) -> HarmfulTo(y,x))", "all x y.((Slandering(x) & Person(y)) -> Harmful(x,y))"]}
{"id": "enwn_validation_521", "nl": "You should not slander someone.", "fol": "", "prediction": ["all x.((Person(x) & -Slander(x)) -> -Slander(x))", "all x y.((Slander(x) & Person(y)) -> -Slander(x,y))", "all x y.((Person(x) & Person(y)) -> -Slander(x,y))", "all x y.((Slanderer(x) & Person(y)) -> -Slander(x,y))", "all x.((Slander(x) & Person(x)) -> -Slander(x))", "all x.((Slander(x) & Person(y)) -> -Slander(x,y))", "all x y.((Slander(x) & Person(y)) -> -(Slander(x,y) | Slander(x,y)))", "all x y.((Person(x) & Slander(y)) -> -Slander(x,y))", "all x.(Slander(x) -> -Slander(x))", "all x.((Slander(x) & -Slander(x)) -> -Slander(x))", "all x.((Person(x) & -Slanders(x)) -> -Slander(x))", "all x.(Slander(x) -> -(Slander(x) | Slander(x)))", "all x y.((Slanderer(x) & Person(y)) -> -(Slander(x,y) | Slander(x,y)))", "all x y.((Slander(x) & Person(y)) -> -(Slander(x,y) | Slander(x,y))))", "all x y.((Person(x) & -Slander(y)) -> -Slander(x,y))", "all x y.((Slander(x) & Person(y)) -> -(Slander(x,y) & Slander(x,y)))"]}
{"id": "enwn_validation_522", "nl": "Paul should not have slandered Jimmy.", "fol": "", "prediction": ["all x.((Paul(x) & Jimmy(y)) -> -Slandered(x,y))", "all x y.((Paul(x) & Jimmy(y)) -> -Slandered(x,y))", "all x.((Paul(x) & -SlanderedJimmy(x)) -> -SlanderedJimmy(x))", "All x.((Paul(x) & Jimmy(y)) -> -Slandered(x,y))", "all x.((Paul(x) & Jimmy(x)) -> -Slandered(x,y))", "all x.((Paul(x) & -SlanderedJimmy(x)) -> -(SlanderedJimmy(x) & -SlanderedJimmy(x)))", "all x.((Paul(x) & Jimmy(y)) -> -HasSlandered(x,y))", "all x.(Paul(x) -> -SlanderedJimmy(x))", "all x.((Paul(x) & -SlanderedJimmy(x)) -> -HasSlanderedJimmy(x))", "all x.((Paul(x) & -SlanderedJimmy(x)) -> -Slandered(x,Jimmy))", "Paul should not have slanderedJimmy.", "all x.((Paul(x) & -SlanderedJimmy(x)) -> -(SlanderedJimmy(x) | SlanderedJimmy(x))))", "all x y.((Paul(x) & Jimmy(y)) -> -HasSlandered(x,y))", "all x.((Paul(x) & -SlanderedJimmy(x)) -> -(SlanderedJimmy(x) & SlanderedJimmy(x)))", "all x.((Paul(x) & Jimmy(x)) -> -Slandered(x))", "all x.((Paul(x) & Jimmy(y)) -> -Shared(x,y))"]}
{"id": "enwn_validation_523", "nl": "Mocking someone is intentionally aggravating them.", "fol": "", "prediction": ["all x y.((Mocking(x) & Person(y)) -> IntentionallyAggravates(x,y))", "all x.(Mocking(x) -> IntentionallyAggravates(x))", "all x y.((Mocking(x) & Person(y)) -> AggravatesIntentionally(x,y))", "all x y.((Mocking(x,y) & Person(y)) -> IntentionallyAggravates(x,y))", "all x y.((Mocking(x) & Person(y)) -> Aggravates(x,y))", "all x y.((Mocking(x) & Person(y) & IntentionallyAggravates(x,y)) -> IntentionallyAggravates(x,y))", "all x y.((Mocks(x) & Person(y)) -> IntentionallyAggravates(x,y))", "all x y.((Mocks(x,y) & Person(y)) -> IntentionallyAggravates(x,y))", "all x y z.((Mocking(x) & Person(y) & Person(z)) -> IntentionallyAggravates(x,y,z))", "all x y.((Mocking(x) & Person(y)) -> AggravatesIntentionally(x,y))", "all x y.((Mocking(x) & Person(y)) -> IntentionallyAggravating(x,y))", "all x y z.((Mocking(x) & Person(y) & Person(z)) -> AggravatesIntentionally(x,y,z))", "all x y.((Mocking(x) & Person(y)) -> (IntentionallyAggravates(x,y)))", "all x.(Mocking(x) -> IntentionallyAggravating(x))", "all x y z.((Mocking(x) & Person(y) & Person(z)) -> Aggravates(x,y,z))", "all x.(Mocking(x) -> Aggravates(x))"]}
{"id": "enwn_validation_524", "nl": "Intentionally aggravating someone is not encouraging positive discourse.", "fol": "", "prediction": ["all x.((IntentionallyAggravates(x) & Person(x)) -> -EncouragesPositiveDiscourse(x))", "all x y.((IntentionallyAggravates(x,y) & Person(y)) -> -EncouragesPositiveDiscourse(x))", "all x y.((IntentionallyAggravates(x,y) & Person(y)) -> -EncouragesPositiveDiscourse(x,y))", "all x.((IntentionallyAggravating(x) & Person(x)) -> -EncouragesPositiveDiscourse(x))", "all x y.((IntentionallyAggravates(x) & Person(y)) -> -EncouragesPositiveDiscourse(x,y))", "all x.((IntentionallyAggravate(x) & Person(x)) -> -EncouragesPositiveDiscourse(x))", "all x y.((IntentionallyAggravating(x) & Person(y)) -> -EncouragesPositiveDiscourse(x,y))", "all x y.((IntentionallyAggravate(x,y) & Person(y)) -> -EncouragesPositiveDiscourse(x,y))", "all x y.((IntentionallyAggravating(x,y) & Person(y)) -> -EncouragesPositiveDiscourse(x,y))", "all x y.((IntentionallyAggravate(x,y) & Person(y)) -> -EncouragesPositiveDiscourse(x))", "all x y.((IntentionallyAggravating(x,y) & Person(y)) -> -EncouragesPositiveDiscourse(x))", "all x.((IntentionallyAggravates(x) & Person(y)) -> -EncouragesPositiveDiscourse(x))", "all x y.((IntentionallyAggravate(x) & Person(y)) -> -EncouragesPositiveDiscourse(x,y))", "all x.((Aggravates(x) & Intentionally(x)) -> -EncouragesPositiveDiscourse(x))", "all x.((IntentionallyAggravates(x) & Person(y)) -> -EncouragesPositiveDiscourse(x,y))", "all x.(IntentionallyAggravates(x) -> -EncouragesPositiveDiscourse(x))"]}
{"id": "enwn_validation_525", "nl": "We should encourage positive discourse.", "fol": "", "prediction": ["all x.((WearsPositiveDiscourse(x)) -> Encourages(x))", "all x.(PositiveDiscourse(x) -> Encourages(x))", "all x y.((PositiveDiscourse(x) & PositiveDiscourse(y)) -> Encouraged(x,y))", "all x y.((PositiveDiscourse(x) & PositiveDiscourse(y)) -> Encourages(x,y))", "all x.((WearsPositiveDiscourse(x)) -> Encourages(x,y))", "all x.(PositiveDiscourse(x) -> Encouraged(x))", "all x.((CultivatePositiveDiscourse(x)) -> Encourages(x))", "all x y.((PositiveDiscourse(x) & PositiveDiscourse(y)) -> Encourage(x,y))", "all x.((SupportsPositiveDiscourse(x)) -> Encourages(x))", "all x.((PositiveDiscourse(x)) -> Encourages(x))", "all x.((WearsPositiveDiscourse(x) & Encourages(x)) -> Encourages(x))", "all x.((Discourse(x) & Positive(x)) -> Encourages(x))", "all x.((EncouragesPositiveDiscourse(x)) -> EncouragesPositiveDiscourse(x))", "all x.((Discourse(x) & Positive(x)) -> Encourage(x))", "all x.(PositiveDiscourse(x) -> Encourage(x))", "all x.((WearsPositiveDiscourse(x) & Encourages(x,y)) -> Encourages(x,z))"]}
{"id": "enwn_validation_526", "nl": "Walter mocked the rally participants because he disagreed with their political ideology.", "fol": "", "prediction": ["all x y.((RallyParticipant(x) & Walter(y)) -> (Mocked(y,x) & DefiedPoliticalIdeology(y,x)))", "all x y z.((Walter(x) & RallyParticipant(y) & PoliticalIdeology(z)) -> Mocked(x,y,z))", "all x y.((RallyParticipant(x) & Walter(y)) -> (Mocked(y,x) & DefiedPoliticalIdeology(y)))", "all x y.((RallyParticipant(x) & Walter(y)) -> (Mocked(x,y) & DefiedPoliticalIdeology(y)))", "all x y.((RallyParticipant(x) & Walter(y)) -> (Mocked(y,x) & DisagreesWithPoliticalIdeology(y,x)))", "all x y.((RallyParticipant(x) & Walter(y) & DisagreesWithPoliticalIdeology(y,x)) -> Mocked(y,x))", "all x y.((RallyParticipant(x) & Walter(y)) -> (Mocked(y,x) & DisagreedWithPoliticalIdeology(y,x)))", "all x y z.((Walter(x) & RallyParticipant(y) & PoliticalIdeology(z)) -> (Mocked(x,y) & Defied(x,z)))", "all x y.((RallyParticipant(x) & Walter(y)) -> (Mocked(y,x) & DisagreesWithPoliticalIdeology(y)))", "all x y.((RallyParticipant(x) & Walter(y)) -> (Mocked(x,y) & DisagreesWithPoliticalIdeology(y)))", "all x y.((RallyParticipant(x) & Walter(y)) -> DisagreesWithPoliticalIdeology(y,x))", "all x y.((RallyParticipant(x) & Walter(y) & DisagreesWithPoliticalIdeology(y,x)) -> Mocked(x,y))", "all x y.((RallyParticipant(x) & Walter(y)) -> (Mocked(x,y) & DefiedPoliticalIdeology(y,x)))", "all x y z.((Walter(x) & RallyParticipant(y) & PoliticalIdeology(z)) -> Mocked(x,y))", "all x y.((RallyParticipant(x) & Walter(y) & DisagreesWithPoliticalIdeology(y)) -> Mocked(y,x))", "all x y.((RallyParticipant(x) & Walter(y)) -> (Mocked(x,y) & DisagreesWithPoliticalIdeology(y,x)))"]}
{"id": "enwn_validation_527", "nl": "You shouldn't intentionally aggravate people.", "fol": "", "prediction": ["all x.((Person(x) & -IntentionallyAggravate(x)) -> -IntentionallyAggravate(x))", "all x.((IntentionallyAggravate(x) & Person(x)) -> -IntentionallyAggravate(x))", "all x.((Person(x) & -IntentionallyAggravates(x)) -> -IntentionallyAggravates(x))", "all x.((People(x) & -IntentionallyAggravate(x)) -> -IntentionallyAggravate(x))", "all x.((IntentionallyAggravate(x) & Person(y)) -> -IntentionallyAggravate(x,y))", "all x.((IntentionallyAggravate(x) & People(x)) -> -IntentionallyAggravate(x))", "all x.((IntentionallyAggravatePeople(x)) -> -IntentionallyAggravatePeople(x))", "all x.((IntentionallyAggravatePeople(x)) -> -(IntentionallyAggravatePeople(x) & IntentionallyAggravatePeople(x)))", "all x.((IntentionallyAggravatePeople(x)) -> -(IntentionallyAggravatePeople(x) | IntentionallyAggravatePeople(x)))", "all x y.((IntentionallyAggravate(x) & Person(y)) -> -IntentionallyAggravate(x,y))", "all x.((IntentionallyAggravatePeople(x)) -> -(IntentionallyAggravatePeople(x) | IntentionallyAggravatePeople(x))))", "all x.((IntentionallyAggravate(x) & -IntentionallyAggravate(x)) -> -IntentionallyAggravate(x))", "all x.((Person(x) & -IntentionallyAggravate(x)) -> -(IntentionallyAggravate(x) | IntentionallyAggravate(x))))", "all x.((Person(x) & -IntentionallyAggravate(x)) -> -Aggravate(x))", "all x.((IntentionallyAggravate(x) & People(y)) -> -IntentionallyAggravate(x,y))", "all x y.((Person(x) & Person(y)) -> -IntentionallyAggravate(x,y))"]}
{"id": "enwn_validation_528", "nl": "You shouldn't mock people.", "fol": "", "prediction": ["all x.(MockPeople(x) -> -MockPeople(x))", "all x.((Person(x) & -Mock(x)) -> -Mock(x))", "all x.((People(x) & -Mock(x)) -> -Mock(x))", "all x.(MockPeople(x) -> -Mock(x))", "all x.(MockPerson(x) -> -MockPerson(x))", "all x.(MocksPeople(x) -> -MocksPeople(x))", "all x.((Person(x) & -Mocks(x)) -> -Mocks(x))", "all x.((Mock(x) & Person(y)) -> -Mock(x,y))", "all x.((MockPeople(x)) -> -Mock(x))", "all x.((MockPeople(x)) -> -MockPeople(x))", "all x.((MocksPeople(x)) -> -MocksPeople(x))", "all x.(Mock(x) -> -Mock(x))", "all x.(MockPeople(x) -> -(MockPeople(x) | MockPeople(x))))", "all x.(MockPeople(x) -> -MocksPeople(x))", "all x.((Person(x) & -Mocks(x)) -> -Mock(x))", "all x.(Mocks(x) -> -Mocks(x))"]}
{"id": "enwn_validation_529", "nl": "Walter should not have mocked the rally participants.", "fol": "", "prediction": ["all x y.((Walter(x) & RallyParticipant(y)) -> -Mocked(x,y))", "all x.((Walter(x) & RallyParticipant(x)) -> -Mocked(x,RallyParticipants))", "(MockedRallyParticipants(Walter) -> -MockedRallyParticipants(Walter))", "all x.((Walter(x) & RallyParticipant(x)) -> -Mocked(x,RallyParticipant))", "all x.((Walter(x) & RallyParticipants(x)) -> -Mocked(x,RallyParticipants))", "all x.((Walter(x) & RallyParticipant(x)) -> -Mocked(x,y))", "all x.((Walter(x) & RallyParticipant(y)) -> -Mocked(x,y))", "(MockedRallyParticipants(Walter) | -MockedRallyParticipants(Walter)))", "all x.((Walter(x) & -MockedRallyParticipants(x)) -> -MockedRallyParticipants(x))", "(MockedRallyParticipants(Walter) & -MockedRallyParticipants(Walter))", "all x y.((Walter(x) & Rally(y)) -> -Mocked(x,y))", "all x y.((Walter(x) & RallyParticipants(y)) -> -Mocked(x,y))", "all x.((Walter(x) & RallyParticipant(x)) -> -Mocked(x,Rally))", "all x.((Walter(x) & RallyParticipant(x)) -> -Mocked(x,RallyParticipant,RallyParticipant))", "-MockedRallyParticipants(Walter)", "all x.((Walter(x) & RallyParticipants(x)) -> -Mocked(x,y))"]}
{"id": "enwn_validation_530", "nl": "You should not harm others.", "fol": "", "prediction": ["all x.((You(x) & -HarmOthers(x)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((You(x) & -HarmOthers(x)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((You(x) & -HarmsOthers(x)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((You(x) & -HarmsOthers(x)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((You(x) & -HarmOthers(x)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((You(x) & -HarmsOthers(x)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((You(x) & -HarmOthers(x)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((You(x) & -HarmOthers(x)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHaha", "all x.((You(x) & -HarmsOthers(x)) -> -HarmsOthers(x))", "all x.((You(x) & -HarmsOthers(x)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((You(x) & -HarmOthers(x)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((You(x) & -HarmOthers(x)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHaha", "all x.((You(x) & -HarmOthers(x)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHaha", "all x.((You(x) & -HarmsOthers(x)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x.((You(x) & -HarmsOthers(x)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHaha", "all x.((You(x) & -HarmOthers(x)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas"]}
{"id": "enwn_validation_531", "nl": "Being considerate means you are careful to avoid hurting others.", "fol": "", "prediction": ["all x.((Creditful(x) & AvoidsHasingOthers(x)) -> Careful(x))", "all x.((Creditful(x) & AvoidsHidingOthers(x)) -> Careful(x))", "all x.((Dignified(x) & Careful(x)) -> AvoidsHarmingOthers(x))", "all x.((Dignified(x) & Careful(x)) -> AvoidsHasingOthers(x))", "all x.((Dignified(x) & CarefulToAvoidIllness(x)) -> CarefulToAvoidIllness(x))", "all x.((Dignified(x) & CarefulToAvoidHidingOthers(x)) -> CarefulToAvoidHidingOthers(x))", "all x.((Dignified(x) & CarefulToAvoidHidingOthers(x)) -> Considerable(x))", "all x.((Dignified(x) & Careful(x)) -> AvoidsHailingOthers(x))", "all x.((Dignified(x) & Careful(x)) -> AvoidsHidingOthers(x))", "all x.((Creditful(x) & Careful(x)) -> AvoidsHasingOthers(x))", "all x.((Dignified(x) & Careful(x)) -> AvoidsHastingOthers(x))", "all x.((Dignified(x) & Careful(x)) -> AvoidsHassingOthers(x))", "all x.((Creditful(x) & AvoidsHasingOthers(x)) -> Considerable(x))", "all x.((Creditful(x) & Careful(x)) -> AvoidsHidingOthers(x))", "all x.((Dignified(x) & Careful(x)) -> AvoidsIllness(x))", "all x.((Dignified(x) & CarefulToAvoidIllness(x)) -> CarefulToHaveOthers(x))"]}
{"id": "enwn_validation_532", "nl": "If you do something that is inconvenient for others then you are being inconsiderate.", "fol": "", "prediction": ["all x.((DoesInconvenientForOthers(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((DoesInconvenientForOthers(x)) -> Inconsiderate(x))", "all x.((DoesInconvenient(x) & ForOthers(x)) -> Inconsiderate(x))", "all x.((DoesInconvenient(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((DoingInconvenientForOthers(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((DoesInconvenientForOthers(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((DoesInconvenientToOthers(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((DoingInconvenientForOthers(x)) -> Inconsiderate(x))", "all x.((DoingInconvenient(x) & Inconsiderate(x)) -> Inconsiderate(x))", "all x.((Does(x) & InconvenientForOthers(x)) -> Inconsiderate(x))", "all x.((Doing(x) & InconvenientForOthers(x)) -> Inconsiderate(x))", "all x.((InconvenientForOthers(x) & Doing(x)) -> Inconsiderate(x))", "all x.((Do(x) & InconvenientForOthers(x)) -> Inconsiderate(x))", "all x.((DoesInconvenientForOthers(x)) -> Inconsiderate(x))", "all x.((DoesInconvenientToOthers(x)) -> Inconsiderate(x))", "all x.(Inconsiderate(x) -> InconvenientForOthers(x))"]}
{"id": "enwn_validation_533", "nl": "Justin quit his job after giving notice one day in advance.", "fol": "", "prediction": ["all x y.((Juliet(x) & Job(y) & GivesNotice(x,y)) -> Quits(x,y))", "all x y.((Juliet(x) & Job(y) & GivesNotification(x,y)) -> Quits(x,y))", "all x y.((Judy(x) & Job(y) & GivesNotice(x,y)) -> Quits(x,y))", "all x.((Juliet(x) & DayInAdvance(x)) -> QuitsJuliet(x))", "all x.((Judy(x) & DayInAdvance(x)) -> QuitsJudy(x))", "all x.((Juliet(x) & DayInAdvance(x)) -> Quits(x))", "all x y.((Judy(x) & Job(y)) -> Quits(x,y))", "all x.((Juliet(x) & OneDayAdvance(x)) -> QuitsJuliet(x))", "all x.((Judy(x) & OneDayAdvance(x)) -> QuitsJudy(x))", "all x.((Julian(x) & DayInAdvance(x)) -> QuitsJulian(x))", "all x.((Judy(x) & DayInAdvance(x)) -> Quits(x,Judy))", "all x y.((Juliet(x) & Job(y)) -> Quits(x,y))", "all x.((Judy(x) & DayInAdvance(x)) -> Quits(x))", "all x y.((Judy(x) & Job(y) & GivesNotice(x,y)) -> QuitsAfterDay(x,y))", "all x.((Juliet(x) & OneDayAdvance(x)) -> Quits(x))", "all x y.((Juliet(x) & Job(y) & GivesNotice(x,y)) -> QuitsAfterDay(x,y))"]}
{"id": "enwn_validation_534", "nl": "Giving less than two weeks' notice before leaving your job is not enough warning.", "fol": "", "prediction": ["all x.((LessThanTwoWeeksNotification(x) & LeavesJob(x)) -> -EnoughWarning(x))", "all x.((LessThanTwoWeeksNotice(x) & LeavesJob(x)) -> -EnoughWarning(x))", "all x.((LessThanTwoWeeksNotification(x) & LeaveJob(x)) -> -EnoughWarning(x))", "all x.((LessThanTwoWeeksNotification(x)) -> -EnoughWarning(x))", "all x.((GivingLessThanTwoWeeksNotification(x) & LeavesJob(x)) -> -EnoughWarning(x))", "all x.((TwoWeeksNotification(x) & LeavesJob(x)) -> -EnoughWarning(x))", "all x.((LeastTwoWeeksNotification(x) & LeavesJob(x)) -> -EnoughWarning(x))", "all x.((LessThan(x,2) & LeavesJob(x)) -> -EnoughWarning(x))", "all x.((Warning(x) & LessThanTwoWeeks(x)) -> -EnoughWarning(x))", "all x.((WeeklyNotification(x) & LessThanTwo(x)) -> -EnoughWarning(x))", "all x.((LessThanTwoWeeksBeforeLeavingJob(x)) -> -EnoughWarning(x))", "all x.((GivingLessThanTwoWeeksNotification(x)) -> -EnoughWarning(x))", "all x.((Warning(x) & LessThanTwoWeeks(x)) -> -Enough(x))", "all x.((WeeklyNotification(x) & LessThan(x,2)) -> -EnoughWarning(x))", "all x.((LessThanTwoWeeksNotice(x)) -> -EnoughWarning(x))", "all x.((Week(x) & LessThanTwo(x)) -> -EnoughWarning(x))"]}
{"id": "enwn_validation_535", "nl": "Someone leaving their job without sufficient warning is inconvenient for their coworkers.", "fol": "", "prediction": ["all x y.((Person(x) & Job(y) & LeavesWithoutSufficientWarning(x,y)) -> InconvenientForCoworkers(x))", "all x.((Person(x) & LeavesJobWithoutSufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x y.((Person(x) & Job(y) & LeavesWithoutSufficientWarning(x,y)) -> InconvenientForCoworkers(x,y))", "all x.((LeavingJob(x) & -SufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x y z.((Person(x) & Job(y) & Coworker(z) & LeavesWithoutSufficientWarning(x,y)) -> InconvenientFor(x,z))", "all x.((LeavingJob(x) & WithoutSufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x.((LeavingJobWithoutSufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x.((Person(x) & LeavesJob(x) & -SufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x.((Worker(x) & LeavesJobWithoutSufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x y z.((Person(x) & Job(y) & Coworker(z) & LeavesWithoutSufficientWarning(x,y,z)) -> InconvenientFor(x,y,z))", "all x y.((Person(x) & Coworker(y) & LeavesJobWithoutSufficientWarning(x,y)) -> InconvenientFor(x,y))", "all x.((Person(x) & LeavesJob(x) & WithoutSufficientWarning(x)) -> InconvenientForCoworkers(x))", "all x y.((Person(x) & Worker(y) & LeavesJobWithoutSufficientWarning(x,y)) -> InconvenientFor(x,y))", "all x y z.((Person(x) & Job(y) & Coworker(z) & LeavesWithoutSufficientWarning(x,y)) -> Inconvenient(x,z))", "all x y z.((Person(x) & Job(y) & Coworker(z) & LeavesWithoutSufficientWarning(x,y,z)) -> InconvenientFor(x,z))", "all x.(LeavingJobWithoutSufficientWarning(x) -> InconvenientForCoworkers(x))"]}
{"id": "enwn_validation_536", "nl": "You should be considerate.", "fol": "", "prediction": ["all x.(Conscious(x) -> ShouldBe(x))", "all x.(Conscious(x) -> Considerable(x))", "all x.(Discipline(x) -> ShouldBe(x))", "all x.((You(x) & Considerable(x)) -> Considerable(x))", "all x.((Person(x) & Considerable(x)) -> Considerable(x))", "all x.((You(x) & Considerable(x)) -> ShouldBe(x))", "all x.(Considerable(x) -> ShouldBe(x))", "all x.(BeConscious(x) -> ShouldBe(x))", "all x.((You(x) & Considerate(x)) -> ShouldBe(x))", "all x.(Decent(x) -> ShouldBe(x))", "all x.((Person(x) & Considerable(x)) -> ShouldBe(x))", "all x.((Person(x) & Considerate(x)) -> ShouldBe(x))", "all x.((Person(x) & Considerate(x)) -> Considerable(x))", "all x.((Person(x) & Considerable(x)) -> Acceptable(x))", "all x.((You(x) & Considerate(x)) -> Considerable(x))", "all x.(BeConscious(x) -> BeConscious(x))"]}
{"id": "enwn_validation_537", "nl": "You should not inconvenience others.", "fol": "", "prediction": ["all x.((You(x) & -Inconvenient(x)) -> -Inconvenient(x))", "all x.((Inconvenient(x) & -Inconvenient(x)) -> -Inconvenient(x))", "all x.(InconvenientToOthers(x) -> -InconvenientToOthers(x))", "all x.((InconvenientToOthers(x)) -> -InconvenientToOthers(x))", "all x.((InconvenientToOthers(x)) -> -(InconvenientToOthers(x) | InconvenientToOthers(x))))", "all x.((You(x) & -InconvenientToOthers(x)) -> -InconvenientToOthers(x))", "all x.(InconvenientToOthers(x) -> -(InconvenientToOthers(x) | InconvenientToOthers(x))))", "all x.((User(x) & -Inconvenient(x)) -> -Inconvenient(x))", "all x.(InconvenientToOthers(x) -> -(InconvenientToOthers(x) & InconvenientToOthers(x)))", "all x.(InconvenientToOthers(x) -> -(InconvenientToOthers(x) | InconvenientToOthers(x)))", "all x.((Person(x) & -Inconvenient(x)) -> -Inconvenient(x))", "all x.(InconvenientToOthers(x) -> -(InconvenientToOthers(x) & -InconvenientToOthers(x)))", "all x.((InconvenientToOthers(x)) -> -(InconvenientToOthers(x) | InconvenientToOthers(x)))", "all x.((Inconvenient(x) & -Inconvenient(x)) -> -(Inconvenient(x) & Inconvenient(x)))", "all x.((Inconvenient(x) & Other(x)) -> -Inconvenient(x))", "all x.(Inconvenient(x) -> -Inconvenient(x))"]}
{"id": "enwn_validation_538", "nl": "Justin did not give enough warning before quitting.", "fol": "", "prediction": ["all x.((Juliet(x) & -EnoughWarning(x)) -> Quits(x))", "all x.((Juliet(x) & -EnoughWarning(x)) -> Quitting(x))", "all x.((Justin(x) & Quits(x)) -> -EnoughWarning(x))", "all x.((Juliet(x) & DidNotGiveEnoughWarning(x)) -> Quits(x))", "all x.((Julian(x) & Quits(x)) -> -EnoughWarning(x))", "all x.((Juliet(x) & DidNotGiveEnoughWarning(x)) -> Quit(x))", "all x.((Justin(x) & Quits(x)) -> -GivesEnoughWarning(x))", "all x.((Judy(x) & Quitting(x)) -> -EnoughWarning(x))", "all x.((Juliet(x) & DidNotGiveEnoughWarning(x)) -> Quitting(x))", "all x.((Julian(x) & Quitting(x)) -> -EnoughWarning(x))", "all x.((Judy(x) & Quits(x)) -> -EnoughWarning(x))", "all x.((Juliet(x) & -EnoughWarning(x)) -> Quit(x))", "all x.((Juliet(x) & Quits(x)) -> -EnoughWarning(x))", "all x.((Judy(x) & Quitting(x)) -> -GivesEnoughWarning(x))", "all x.((Justin(x) & Quitting(x)) -> -EnoughWarning(x))", "all x.((Justin(x) & Quitting(x)) -> -GivesEnoughWarning(x))"]}
{"id": "enwn_validation_539", "nl": "Justin quitting was inconvenient for his coworkers.", "fol": "", "prediction": ["all x.(Quitting(x) -> InconvenientForCoworkers(x))", "all x.((Judy(x) & Coworkers(x)) -> InconvenientQuitting(x))", "all x.((Judy(x) & Coworker(x)) -> InconvenientQuitting(x))", "all x y.((Judy(x) & Coworker(y)) -> InconvenientQuitting(x,y))", "all x.((Justin(x) & Coworkers(x)) -> InconvenientQuitting(x))", "all x y.((Judy(x) & Coworker(y)) -> Quitting(x,y))", "all x.((Justin(x) & Coworker(x)) -> InconvenientQuitting(x))", "all x y.((Juliet(x) & Coworker(y)) -> Inconvenient(x,y))", "all x.(QuittingJustin(x) -> InconvenientForCoworkers(x))", "all x.((Judy(x) & Coworker(y)) -> InconvenientQuitting(x,y))", "all x y.((Judy(x) & Coworker(y)) -> Quits(x,y))", "all x.((Julian(x) & Coworkers(x)) -> InconvenientQuitting(x))", "all x.((Juliet(x) & Coworkers(x)) -> Inconvenient(x))", "all x.((Judy(x) & Coworker(x)) -> Inconvenient(x))", "all x y.((Justin(x) & Coworker(y)) -> Quitting(x,y))", "all x.((Juliet(x) & Coworkers(x)) -> InconvenientQuitting(x))"]}
{"id": "enwn_validation_540", "nl": "Justin should not have inconvenienced his coworkers.", "fol": "", "prediction": ["all x.((Juliet(x) & Coworkers(x)) -> -Inconvenient(x))", "all x y.((Juliet(x) & Coworker(y)) -> -Inconvenient(x,y))", "all x.((Juliet(x) & Coworkers(y)) -> -Inconvenient(x,y))", "all x y.((Juliet(x) & Coworkers(y)) -> -Inconvenient(x,y))", "all x.((Judy(x) & Coworkers(x)) -> -Inconvenient(x))", "all x y.((Judy(x) & Coworker(y)) -> -Inconvenient(x,y))", "all x.((Julian(x) & Coworkers(x)) -> -Inconvenient(x))", "all x y.((Julian(x) & Coworker(y)) -> -Inconvenient(x,y))", "all x.((Judy(x) & Coworkers(y)) -> -Inconvenient(x,y))", "all x.((Juliet(x) & Coworkers(x)) -> -Inconvenient(x,y))", "all x.((Juliet(x) & Coworker(x)) -> -Inconvenient(x))", "all x.((Juliet(x) & Coworkers(x)) -> -InconvenientTo(x,y))", "all x.((Justin(x) & Coworkers(x)) -> -Inconvenient(x))", "all x.((Juliet(x) & Coworkers(x)) -> -Indignified(x,y))", "all x.((Judy(x) & Coworker(x)) -> -Inconvenient(x))", "all x.((Judie(x) & Coworkers(x)) -> -Inconvenient(x))"]}
{"id": "enwn_validation_541", "nl": "If you're unreasonably angry at something taking too long, you're impatient.", "fol": "", "prediction": ["all x.((UnreasonablyAngry(x) & TakesTooLong(x)) -> Impatient(x))", "all x.((UnreasonablyAngry(x) & TooLong(x)) -> Impatient(x))", "all x.((Angry(x) & TakesTooLong(x)) -> Impatient(x))", "all x.((UnreasonablyAngryAt(x) & TakesTooLong(x)) -> Impatient(x))", "all x.((UnreasonablyAngryAt(x) & TooLong(x)) -> Impatient(x))", "all x.((UnreasonablyAngry(x) & TooLongTaking(x)) -> Impatient(x))", "all x.((UnreasonablyAngryAtLong(x) & TakesTooLong(x)) -> Impatient(x))", "all x.((Angry(x) & TooLong(x)) -> Impatient(x))", "all x.((AngryAtLong(x) & Unreasonably(x)) -> Impatient(x))", "all x.((Angry(x) & Unreasonably(x) & TooLong(x)) -> Impatient(x))", "all x.((UnreasonablyAngryAtSomething(x) & TakesTooLong(x)) -> Impatient(x))", "all x.((AngryAt(x) & TakesTooLong(x)) -> Impatient(x))", "all x.((UnreasonablyAngryAtLong(x)) -> Impatient(x))", "all x.((Anger(x) & TakesTooLong(x)) -> Impatient(x))", "all x.((Impatient(x) & UnreasonablyAngry(x)) -> Impatient(x))", "all x.((UnreasonablyAngry(x) & TakesTooLong(x)) -> IsPatient(x))"]}
{"id": "enwn_validation_542", "nl": "Gabriel was angry at the server for taking too long even though the restaurant was understaffed.", "fol": "", "prediction": ["all x y.((Server(x) & Restaurant(y) & Understaffed(y)) -> Anger(x,y))", "all x y.((Server(x) & Restaurant(y) & Understaffed(y)) -> Angerful(x,y))", "all x y.((Server(x) & Restaurant(y) & Understaffed(y)) -> AngerfulAt(x,y))", "all x y z.((Server(x) & Server(y) & Restaurant(z) & Understaffed(z)) -> Anger(x,y,z))", "all x y z.((Server(x) & Server(y) & Restaurant(z) & Understaffed(z)) -> Angerful(x,y,z))", "all x y.((Server(x) & Restaurant(y) & Understaffed(y)) -> Agreed(x,y))", "all x y.((Server(x) & Restaurant(y) & Understaffed(y)) -> AgreedAt(x,y))", "all x y z.((Server(x) & Server(y) & Restaurant(z) & Understaffed(z)) -> Anger(x,y))", "all x y z.((Server(x) & Server(y) & Restaurant(z) & Understaffed(z)) -> Angerful(x,y))", "all x y z.((Server(x) & Server(y) & Restaurant(z) & Understaffed(z)) -> Agreed(x,y,z))", "all x y.((Server(x) & Restaurant(y) & Understaffed(y)) -> Wuthering(x,y))", "all x y.((Server(x) & Restaurant(y) & UnderStaff(y)) -> Anger(x,y))", "all x y.((Server(x) & Restaurant(y)) -> (Angry(x,y) & TooLong(x) & Understaffed(y)))", "all x y.((Server(x) & Restaurant(y) & UnderStaff(y)) -> Angerful(x,y))", "all x y.((Server(x) & Restaurant(y) & Understaffed(y)) -> Anger(x))", "all x y z.((Server(x) & Server(y) & Restaurant(z) & UnderStaff(z)) -> Anger(x,y,z))"]}
{"id": "enwn_validation_543", "nl": "When someone has to do a lot, it's reasonable for it to take a long time.", "fol": "", "prediction": ["all x.((Person(x) & HasToDoLot(x)) -> ReasonableToTakeLongTime(x))", "all x.((Person(x) & HasToDoLots(x)) -> ReasonableToTakeLongTime(x))", "all x.((HasToDoLot(x) & TakesLongTime(x)) -> Reasonable(x))", "all x.((Person(x) & HasToDoLittle(x)) -> ReasonableToTakeLongTime(x))", "all x.((Man(x) & HasToDoLots(x)) -> ReasonableToTakeLongTime(x))", "all x.((Person(x) & HasToDoLot(x)) -> ReasonableForLongTime(x))", "all x.((Person(x) & HasToDoLots(x)) -> ReasonableForLongTime(x))", "all x.((Man(x) & HasToDoLot(x)) -> ReasonableToTakeLongTime(x))", "all x.((People(x) & HasToDoLots(x)) -> ReasonableToTakeLongTime(x))", "all x.((HasToDoLot(x) & TakeLongTime(x)) -> Reasonable(x))", "all x.((HasToDoLittle(x) & TakesLongTime(x)) -> Reasonable(x))", "all x.((Person(x) & HasToDoLot(x)) -> ReasonableTime(x))", "all x.((Person(x) & HasToDoLots(x)) -> ReasonableTime(x))", "all x.((People(x) & HasToDoLot(x)) -> ReasonableToTakeLongTime(x))", "all x.((Person(x) & HasToDoLot(x)) -> TakeLongTime(x))", "all x y.((Person(x) & HasToDoLot(x,y)) -> ReasonableToTakeLongTime(x))"]}
{"id": "enwn_validation_544", "nl": "When a restaurant is understaffed, the servers have a lot to do.", "fol": "", "prediction": ["all x.((Restaurant(x) & Understaffed(x)) -> ServersHaveLotToDo(x))", "all x.((Restaurant(x) & Understaffed(x)) -> ServersHaveLittleToDo(x))", "all x.((Restaurant(x) & Understaffed(x)) -> LotsToDo(x))", "all x y.((Restaurant(x) & Understaffed(x)) -> ServersHaveLittleToDo(y))", "all x y.((Restaurant(x) & Understaffed(x)) -> ServersHaveLotToDo(y))", "all x.((Restaurant(x) & Understaffed(x)) -> HasLotToDo(x))", "all x.((Restaurant(x) & Understaffed(x)) -> HasLittleToDo(x))", "all x y.((Restaurant(x) & Understaffed(x)) -> ServersHaveLittleToDo(x,y))", "all x y.((Restaurant(x) & Restaurant(y) & Understaffed(x)) -> ServersHaveLittleToDo(x,y))", "all x y.((Restaurant(x) & Restaurant(y) & Understaffed(x)) -> ServersHaveLotToDo(x,y))", "all x y.((Restaurant(x) & Understaffed(x)) -> LotsToDo(y))", "all x y.((Restaurant(x) & Understaffed(x)) -> ServersHaveLotToDo(x,y))", "all x.((Restaurant(x) & Understaffed(x)) -> ServersHaveLotToDo(x))", "all x y.((Restaurant(x) & Understaffed(x) & Server(y)) -> HasLotToDo(y,x))", "all x.((Restaurant(x) & Understaffed(x)) -> ServersHaveLOTToDo(x))", "all x y.((Restaurant(x) & Understaffed(x)) -> ServersHaveLittleToDo(x))"]}
{"id": "enwn_validation_545", "nl": "When a restaurant is understaffed, it's reasonable for the servers to take a long time.", "fol": "", "prediction": ["all x.((Restaurant(x) & Understaffed(x)) -> ReasonableServerTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> TakeLongTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> ReasonableServersToTakeLongTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> RequiresServersToTakeLongTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> TakesLongTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> ReasonableServersTakeLongTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> ServersTakeLongTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> (ResponsibleServers(x) & LongTime(x)))", "all x.((Restaurant(x) & Understaffed(x)) -> ReasonableServerInterval(x))", "all x.((Restaurant(x) & Understaffed(x)) -> RequiresLongServerTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> ReasonableServerTakesLongTime(x))", "all x.((Restaurant(x) & Understaffed(x)) -> (ResponsibleServerTime(x)))", "all x y.((Restaurant(x) & Understaffed(x)) -> ReasonableServerTime(y))", "all x.((Restaurant(x) & Understaffed(x)) -> ReasonableServers(x))", "all x.((Restaurant(x) & Understaffed(x)) -> RequiresServers(x))", "all x y.((Restaurant(x) & Understaffed(x) & Servers(y)) -> TakeLongTime(y,x))"]}
{"id": "enwn_validation_546", "nl": "Gabriel was unreasonably angry that the server took too long.", "fol": "", "prediction": ["all x.((Server(x) & TakesTooLong(x)) -> UnreasonablyAngry(x))", "all x y.((Server(x) & Server(y)) -> UnreasonablyAngry(x,y))", "all x.((Server(x) & TakedTooLong(x)) -> UnreasonablyAngry(x))", "all x y.((Server(x) & Server(y) & TakesTooLong(x,y)) -> UnreasonablyAngry(x))", "all x.((Server(x) & TooLong(x)) -> UnreasonablyAngry(x))", "all x y.((Server(x) & Server(y) & TakesTooLong(x,y)) -> UnreasonablyAngry(x,y))", "all x y.((Server(x) & Server(y) & TakesTooLong(x)) -> UnreasonablyAngry(x,y))", "all x y.((Server(x) & Server(y) & TooLong(y)) -> UnreasonablyAngry(x,y))", "all x.((Server(x) & UnreasonablyAngry(x)) -> TakesTooLong(x))", "all x.((Server(x) & TakenTooLong(x)) -> UnreasonablyAngry(x))", "all x.((Server(x) & TooLong(x)) -> UnreasonablyAngry(x))", "all x y.((Server(x) & Server(y) & TakedTooLong(x,y)) -> UnreasonablyAngry(x))", "all x y.((Server(x) & Server(y) & TakedTooLong(x,y)) -> UnreasonablyAngry(x,y))", "all x y.((Server(x) & Server(y) & TakesTooLong(x)) -> UnreasonablyAngry(x))", "all x y z.((Server(x) & Server(y) & Server(z)) -> UnreasonablyAngry(x,y,z))", "all x.((Server(x) & UnreasonablyAngry(x)) -> TooLong(x))"]}
{"id": "enwn_validation_547", "nl": "Gabriel was impatient with the server.", "fol": "", "prediction": ["all x y.((Gabriel(x) & Server(y)) -> Impatient(x,y))", "all x.((Gabriel(x) & Server(x)) -> Impatient(x))", "all x.((Gabriel(x) & Server(y)) -> Impatient(x,y))", "all x y.((Gabriel(x) & Server(y)) -> ImpatientWith(x,y))", "all x.(Gabriel(x) -> ImpatientWithServer(x))", "all x.((Gabriel(x) & Server(y)) -> ImpatientWith(x,y))", "all x.((Gabriel(x) & Server(y)) -> Impatient(x))", "all x.((Gabriel(x) & Server(x)) -> ImpatientWith(x,y))", "all x y.((Gabriel(x) & Server(y)) -> Irresponsible(x,y))", "Gabriel was impatientWithServer(Gabriel)", "all x y.((Gabriel(x) & Server(y)) -> WasImpatient(x,y))", "all x.((Gabriel(x) & Server(y)) -> Irresponsible(x,y))", "(Impatient(Gabriel) & Server(Gabriel))", "all x y.((Gabriel(x) & Server(y)) -> Impatient(x))", "all x.((Gabriel(x) & Server(x)) -> Irresponsible(x))", "all x.((Gabriel(x) & Server(y)) -> WasImpatient(x,y))"]}
{"id": "enwn_validation_548", "nl": "Gabriel should have been patient with the server.", "fol": "", "prediction": ["all x.((Gabriel(x) & Server(y)) -> Patient(x,y))", "all x.((Gabriel(x) & Server(x)) -> Patient(x))", "all x y.((Gabriel(x) & Server(y)) -> ShouldBePatient(x,y))", "all x.((Gabriel(x) & Server(y)) -> ShouldBePatient(x,y))", "all x y.((Gabriel(x) & Server(y)) -> Patient(x,y))", "all x.(Gabriel(x) -> PatientWithServer(x))", "all x.((Gabriel(x) & Server(x)) -> ShouldBePatient(x))", "all x y.((Gabriel(x) & Server(y)) -> ShouldHavePatient(x,y))", "all x.(Gabriel(x) -> ShouldBePatientWithServer(x))", "all x.((Gabriel(x) & Server(y)) -> ShouldHavePatient(x,y))", "all x y z.((Gabriel(x) & Server(y) & Server(z)) -> ShouldBePatient(x,y,z))", "all x y.((Gabriel(x) & Server(y)) -> ShouldArePatient(x,y))", "all x y z.((Gabriel(x) & Server(y) & Patient(z)) -> ShouldBe(x,y,z))", "all x.((Gabriel(x) & Server(y)) -> Patient(x))", "all x.(Gabriel(x) -> ShouldBePatient(x))", "all x y z.((Gabriel(x) & Server(y) & Patient(z)) -> ShouldHave(x,y,z))"]}
{"id": "enwn_validation_549", "nl": "Luke let his partners handle the group project.", "fol": "", "prediction": ["all x y.((Luke(x) & Partner(y)) -> LetsHandleGroupProject(x,y))", "all x y.((Luke(x) & Partner(y)) -> LetsManageGroupProject(x,y))", "all x y z.((Luke(x) & Partner(y) & GroupProject(z)) -> LetsHandle(x,y,z))", "all x y z.((Luke(x) & Partner(y) & GroupProject(z)) -> LetsManage(x,y,z))", "all x y z.((Luke(x) & Partner(y) & Project(z)) -> LetsHandle(x,y,z))", "all x y.((Luke(x) & Partners(y)) -> LetsHandleGroupProject(x,y))", "all x y.((Luke(x) & Partners(y)) -> LetsManageGroupProject(x,y))", "all x y z.((Luke(x) & Partner(y) & GroupProject(z)) -> LetsHandle(x,z))", "all x y.((Luke(x) & GroupProject(y)) -> LetsPartnersHandle(x,y))", "all x y z.((Luke(x) & Partners(y) & GroupProject(z)) -> LetsHandle(x,y,z))", "all x y z.((Lucy(x) & Partner(y) & GroupProject(z)) -> LetsHandle(x,y,z))", "all x y z.((Luke(x) & Partner(y) & Project(z)) -> LetsManage(x,y,z))", "all x y z.((Luke(x) & Partner(y) & Project(z)) -> LetsHandle(x,z))", "all x y.((Lucy(x) & Partner(y)) -> LetsHandleGroupProject(x,y))", "all x y z.((Luke(x) & Partners(y) & GroupProject(z)) -> LetsHandle(x,z))", "all x y.((Luke(x) & Partner(y)) -> LetsHasGroupProject(x,y))"]}
{"id": "enwn_validation_550", "nl": "If you let other people handle something then you are not helping on that thing.", "fol": "", "prediction": ["all x y.((LetsOthersHandle(x,y) & Thing(y)) -> -Helping(x,y))", "all x y.((LetsOthersHandle(x,y) & Thing(y)) -> -HelpingOn(x,y))", "all x.(LetsOthersHandle(x) -> -HelpingOnThing(x))", "all x y.((LetsOthersHandle(x) & Thing(y)) -> -Helping(x,y))", "all x y.((LetsOtherPeopleHandle(x,y) & Thing(y)) -> -Helping(x,y))", "all x y.((LetsOtherPeopleHandle(x,y) & Thing(y)) -> -HelpingOn(x,y))", "all x y.((LetsOthersHandle(x) & Thing(y)) -> -HelpingOn(x,y))", "all x.(LetsOtherPeopleHandle(x) -> -HelpingOnThing(x))", "all x y.((LetsOtherPeopleHandle(x) & Thing(y)) -> -Helping(x,y))", "all x y.((LetsOtherPeopleHandle(x) & Thing(y)) -> -HelpingOn(x,y))", "all x y.((LetsAnotherManage(x,y) & Thing(y)) -> -Helping(x,y))", "all x y.((LetsAnotherManage(x,y) & Thing(y)) -> -HelpingOn(x,y))", "all x y z.((LetsOthersHandle(x,y) & Thing(z)) -> -HelpingOn(x,z))", "all x y z.((LetsOthersHandle(x,y) & Thing(z)) -> -Helping(x,z))", "all x y.((LetsHandle(x,y) & Thing(y)) -> -Helping(x,y))", "all x y.((LetsOthersHandle(x,y) & Something(y)) -> -Helping(x,y))"]}
{"id": "enwn_validation_551", "nl": "A group project requires multiple people to do work.", "fol": "", "prediction": ["all x.(GroupProject(x) -> RequiresMultiplePersons(x))", "all x y.((GroupProject(x) & Person(y)) -> Requires(x,y))", "all x.(GroupProject(x) -> RequiresMultiplePeople(x))", "all x y.((GroupProject(x) & Person(y)) -> RequiresToDoWork(x,y))", "all x.(GroupProject(x) -> RequiresMultiplePeopleToDoWork(x))", "all x y z.((GroupProject(x) & Person(y) & Person(z)) -> RequiresToDoWork(x,y,z))", "all x y z.((GroupProject(x) & Person(y) & Work(z)) -> Requires(x,y,z))", "all x.(GroupProject(x) -> RequiresMultiplePersonsToDoWork(x))", "all x y.((GroupProject(x) & Person(y)) -> RequiresForWork(x,y))", "all x y.((GroupProject(x) & Person(y)) -> DoseWork(x,y))", "all x y z.((GroupProject(x) & Person(y) & Person(z)) -> Requires(x,y,z))", "all x.(GroupProject(x) -> RequiresMultiplePerson(x))", "all x y z.((GroupProject(x) & Person(y) & Work(z)) -> RequiresToDo(x,y,z))", "all x.(GroupProject(x) -> exists y.(Person(y) & Requires(x,y))))", "all x y z.((GroupProject(x) & Person(y) & Person(z)) -> RequiresForWork(x,y,z))", "all x y z.((GroupProject(x) & Person(y) & Work(z)) -> RequiresMultiplePeople(x,y,z))"]}
{"id": "enwn_validation_552", "nl": "If multiple people are required to do something then it is expected that all those people should help.", "fol": "", "prediction": ["all x.((RequiredToDo(x) & MultiplePeople(x)) -> ExpectedHelp(x))", "all x.((RequiredToDo(x) & MultiplePeople(x)) -> ShouldHelp(x))", "all x.((Person(x) & RequiresDoing(x)) -> ExpectedHelp(x))", "all x.((RequiredToDo(x) & MultiplePerson(x)) -> ExpectedHelp(x))", "all x.((Person(x) & RequiredToDo(x)) -> ExpectedHelp(x))", "all x.((RequiredToDo(x) & MultiplePerson(x)) -> ShouldHelp(x))", "all x.((Person(x) & RequiresDoing(x)) -> ShouldHelp(x))", "all x.((RequiredToDo(x) & MultiplePersons(x)) -> ExpectedHelp(x))", "all x.((Person(x) & RequiredToDo(x)) -> ShouldHelp(x))", "all x y.((Person(x) & Person(y) & Requires(x,y)) -> ShouldHelp(x,y))", "all x.((People(x) & RequiresDoing(x)) -> ExpectedHelp(x))", "all x y.((Person(x) & RequiredToDo(x,y)) -> ExpectedHelp(x,y))", "all x.((RequiredToDo(x) & MultiplePeople(x)) -> ExpectedHelp(x))", "all x y.((Person(x) & RequiredToDo(x,y)) -> ShouldHelp(x,y))", "all x.((RequiredToDo(x) & MultiplePeople(x)) -> ExpectedToHelp(x))", "all x.((People(x) & RequiredToDo(x)) -> ExpectedHelp(x))"]}
{"id": "enwn_validation_553", "nl": "You should be trustworthy.", "fol": "", "prediction": ["all x.(Trustworthy(x) -> Trustworthy(x))", "all x.(Traffic(x) -> Trustworthy(x))", "all x.((You(x) & Trustworthy(x)) -> Trustworthy(x))", "all x.(Trustworthy(x) -> ShouldBe(x))", "all x.((Client(x) & Trustworthy(x)) -> Trustworthy(x))", "all x.(Trafficable(x) -> Trustworthy(x))", "all x.(TrueLiability(x) -> Trustworthy(x))", "all x.((Trustworthy(x) & Trustworthy(x)) -> Trustworthy(x))", "all x.((Trustworthy(x)) -> Trustworthy(x))", "all x.((Person(x) & Trustworthy(x)) -> Trustworthy(x))", "all x.(Trustworthy(x) -> Reliable(x))", "all x.(Trustworthy(x) -> Trustworthy(x))", "all x.(Trustworthy(x) -> Trustable(x))", "all x.((Client(x) & Trustworthy(x)) -> ShouldBe(x))", "all x.((Person(x) & Trustworthy(x)) -> ShouldBe(x))", "all x.((Trustworthy(x)) -> ShouldBe(x))"]}
{"id": "enwn_validation_554", "nl": "To be trustworthy means you do what is expected of you.", "fol": "", "prediction": ["all x.((Trustworthy(x) & ExpectedOf(x)) -> Trustworthy(x))", "all x.(Trustworthy(x) -> (DoesWhatEquippedOfYou(x)))", "all x.(Trustworthy(x) -> DoWhatEquippedOfYou(x))", "all x.(Trustworthy(x) -> (DoesWhatEquippedOf(x) & Trustworthy(x)))", "all x.(Trustworthy(x) -> (DoesWhatEquippedOfYou(x)))", "all x.(TrueLiability(x) -> (DoesWhatEquippedOfYou(x)))", "all x.(TrueLiability(x) -> DoWhatEquippedOfYou(x))", "all x.(Trustworthy(x) -> (DoesWhatEquippedOf(x) & Trustworthy(x)))", "all x.(Trustworthy(x) -> (DoesWhatEquivalent(x) & Trustworthy(x)))", "all x.(Trustworthy(x) -> (DoesWhatExecutedOf(x) & Trustworthy(x)))", "all x.(Trustworthy(x) -> (DoesWhatExecutedOfYou(x) & Trustworthy(x)))", "all x.(Trustworthy(x) -> (DoesWhatEquippedOf(x,y) & Trustworthy(x,z)))", "all x.(TrueLiability(x) -> (DoesWhatEquippedOf(x) & Trustworthy(x)))", "all x.(Trustworthy(x) -> (DoesWhatEquippedOfYou(x) & Trustworthy(x)))", "all x.(Trafficant(x) -> (DoesWhatEquippedOfYou(x)))", "all x.(Trafficant(x) -> DoWhatEquippedOfYou(x))"]}
{"id": "enwn_validation_555", "nl": "Luke did not help his partners on the group project.", "fol": "", "prediction": ["all x y.((Luke(x) & Partner(y)) -> -HelpsGroupProject(x,y))", "all x y.((Luke(x) & Partner(y)) -> -HelpedGroupProject(x,y))", "all x y.((Luke(x) & Partner(y)) -> -HelpsOnGroupProject(x,y))", "all x y.((Luke(x) & Partner(y)) -> -HelpedOnGroupProject(x,y))", "all x y.((Luke(x) & GroupProject(y)) -> -HelpsPartners(x,y))", "all x y.((Luke(x) & Partner(y) & GroupProject(z)) -> -Helps(x,y,z))", "all x y.((Luke(x) & Partner(y) & GroupProject(z)) -> -Helped(x,y,z))", "all x y.((Luke(x) & Partner(y)) -> -Helps(x,y))", "all x y.((Luke(x) & Partner(y)) -> -HasHelped(x,y))", "all x y.((Luke(x) & GroupProject(y)) -> -Helps(x,y))", "all x y.((Luke(x) & Partners(y)) -> -HelpsGroupProject(x,y))", "all x y.((Luke(x) & GroupProject(y)) -> -Helped(x,y))", "all x y.((Luke(x) & Partner(y) & GroupProject(z)) -> -HasHelped(x,y,z))", "all x y.((Luke(x) & Partner(y)) -> -HelpsGroup(x,y))", "all x y.((Luke(x) & Partner(y)) -> -Helped(x,y))", "all x.(Luke(x) -> -HelpsPartnersOnGroupProject(x))"]}
{"id": "enwn_validation_556", "nl": "It is expected that everyone on a group project will help.", "fol": "", "prediction": ["all x.(GroupProject(x) -> ExpectedHelp(x))", "all x y.((GroupProject(x) & GroupProject(y)) -> ExpectedHelp(x,y))", "all x.(GroupProject(x) -> Helps(x))", "all x y.((GroupProject(x) & Help(y)) -> ExpectedToHelp(x,y))", "all x y.((GroupProject(x) & Person(y)) -> Helps(y,x))", "all x y.((GroupProject(x) & Person(y)) -> WillHelp(y,x))", "all x y.((GroupProject(x) & GroupProject(y)) -> Helps(x,y))", "all x y.((GroupProject(x) & Help(y)) -> Expected(x,y))", "all x y.((GroupProject(x) & GroupProject(y)) -> WillHelp(x,y))", "all x.(GroupProject(x) -> WillHelp(x))", "all x.((GroupProject(x) & Helps(x)) -> Expected(x))", "all x y.((GroupProject(x) & Person(y)) -> WillHelp(x,y))", "all x y.((GroupProject(x) & Helps(y)) -> Expected(x,y))", "all x y.((GroupProject(x) & Helps(y)) -> ExpectedToHelp(x,y))", "all x y.((GroupProject(x) & Project(y)) -> ExpectedHelp(x,y))", "all x.(GroupProject(x) -> ExpectedToHelp(x))"]}
{"id": "enwn_validation_557", "nl": "Luke did not help his partners when it was expected.", "fol": "", "prediction": ["all x y.((Luke(x) & Partner(y)) -> -Helped(x,y))", "all x y.((Luke(x) & Partner(y)) -> -HelpedWhenEquipped(x,y))", "all x y z.((Luke(x) & Partner(y) & ExpectedHelp(z)) -> -Helped(x,y,z))", "all x y z.((Luke(x) & Partner(y) & Expected(z)) -> -Helped(x,y,z))", "all x y.((Luke(x) & Partner(y) & ExpectedHelp(x,y)) -> -Helped(x,y))", "all x y.((Luke(x) & Partner(y) & Expected(x,y)) -> -Helped(x,y))", "all x y.((Luke(x) & Partner(y)) -> -HasHelped(x,y))", "all x y.((Luke(x) & Partner(y)) -> -Helps(x,y))", "all x y.((Luke(x) & Partner(y) & Expected(y)) -> -Helped(x,y))", "all x y z.((Luke(x) & Partner(y) & Expected(z)) -> -Helps(x,y,z))", "all x y z.((Luke(x) & Partner(y) & ExpectedHelp(z)) -> -Helps(x,y,z))", "all x y.((Luke(x) & Partner(y) & Expected(x,y)) -> -Helps(x,y))", "all x y.((Luke(x) & Partner(y)) -> (-Helped(x,y) & Expected(y)))", "all x y.((Luke(x) & Partner(y) & ExpectedHelp(x,y)) -> -Helps(x,y))", "all x y.((Luke(x) & Partner(y)) -> -HelpsWhenEquipped(x,y))", "all x y.((Luke(x) & Partner(y) & Expected(y)) -> -Helps(x,y))"]}
{"id": "enwn_validation_558", "nl": "If something is expected of you then you should do that thing.", "fol": "", "prediction": ["all x.((EquippedOf(x) & ExpectedOf(x)) -> ShouldDo(x))", "all x.((EssentialThing(x) & ExpectedOf(x)) -> ShouldDo(x))", "all x.((EquippedOf(x) & ExpectedOf(x)) -> DoThatThing(x))", "all x.((EquippedOf(x) & ExpectedOf(x)) -> ShouldDoThing(x))", "all x.((EquippedOf(x) & ExpectedOf(x)) -> ShouldDoThatThing(x))", "all x.((EquippedOfYou(x) & ExpectedOfYou(x)) -> ShouldDoThatThing(x))", "all x.((EquippedOfYou(x) & ExpectedOfYou(x)) -> ShouldDo(x))", "all x.((EssentialThing(x) & ExpectedOf(x)) -> ShouldDoThatThing(x))", "all x.((EspectedOf(x) & ExpectedOf(x)) -> ShouldDo(x))", "all x.((EssentialThing(x) & ExpectedOf(x)) -> ShouldDoThing(x))", "all x.((EssentialThing(x) & ExpectedOf(x)) -> ShouldDo(x,y))", "all x.((EquippedOf(x) & ExpectedOf(x)) -> ShouldDo(x,y))", "all x.((EquippedOf(x) & ShouldDo(x)) -> ShouldDo(x))", "all x.((Essential(x) & ExpectedOf(x)) -> ShouldDo(x))", "all x.((EssentialThing(x) & ExpectedOfYou(x)) -> ShouldDo(x))", "all x.((EquippedOf(x) & ExpectedOf(x)) -> ShouldDo(x))"]}
{"id": "enwn_validation_559", "nl": "Luke should have helped his partners.", "fol": "", "prediction": ["all x y.((Luke(x) & Partner(y)) -> ShouldHaveHelped(x,y))", "all x y.((Luke(x) & Partner(y)) -> ShouldHelped(x,y))", "all x y z.((Luke(x) & Partner(y) & Partner(z)) -> ShouldHaveHelped(x,y,z))", "all x y.((Luke(x) & Partner(y)) -> ShouldHelp(x,y))", "all x y.((Luke(x) & Partner(y)) -> Helped(x,y))", "all x.((Luke(x) & Partner(y)) -> ShouldHaveHelped(x,y))", "all x y z.((Luke(x) & Partner(y) & Partner(z)) -> ShouldHelp(x,y,z))", "all x y.((Luke(x) & Partner(y)) -> ShouldHadHelped(x,y))", "all x y.((Luke(x) & Partners(y)) -> ShouldHaveHelped(x,y))", "all x.((Luke(x) & Partner(y)) -> ShouldHelped(x,y))", "all x y z.((Luke(x) & Partner(y) & Partner(z)) -> ShouldHelped(x,y,z))", "all x.(Luke(x) -> HelpedPartners(x))", "all x y.((Luke(x) & Partners(y)) -> ShouldHelped(x,y))", "all x.(Luke(x) -> ShouldHaveHelpedPartners(x))", "all x y z.((Luke(x) & Partner(y) & Partner(z)) -> Helped(x,y,z))", "all x.(Luke(x) -> ShouldHelpPartners(x))"]}
{"id": "enwn_validation_560", "nl": "You should only conceive with someone with their consent.", "fol": "", "prediction": ["all x y.((Conscious(x) & Person(y) & Consent(y)) -> ConceivesWith(x,y))", "all x y.((Conscious(x) & Person(y) & Consent(y)) -> ShouldConceive(x,y))", "all x y z.((Conscious(x) & Person(y) & Consent(z)) -> ConceivesWith(x,y,z))", "all x y.((ConceiveWith(x,y) & Person(y)) -> Consent(y))", "all x y.((Conceive(x) & Person(y) & Consent(y)) -> OnlyConceive(x,y))", "all x y.((Conscious(x) & Person(y) & Consent(y)) -> Conceives(x,y))", "all x y.((Conscious(x) & Person(y) & Consent(y)) -> CanConceive(x,y))", "all x y.((Conceive(x,y) & Person(y)) -> Consent(y))", "all x y.((Conscious(x) & Person(y) & Consent(y)) -> Conceive(x,y))", "all x y.((Conceive(x) & Person(y) & Consent(y)) -> Conceive(x,y))", "all x y.((Conceive(x) & Person(y) & Consent(y)) -> Consent(x,y))", "all x y.((Conceive(x) & Person(y) & Consent(y)) -> ShouldConceive(x,y))", "all x y.((Conscious(x) & Person(y) & Consent(y)) -> ShouldConceiveWith(x,y))", "all x y.((Conscious(x) & Person(y) & Consent(y)) -> Consent(x,y))", "all x y z.((Conscious(x) & Person(y) & Consent(z)) -> Conceives(x,y,z))", "all x y.((Conscious(x) & Person(y) & Consent(y)) -> Conscious(x,y))"]}
{"id": "enwn_validation_561", "nl": "Someone can't consent to something if they're being lied to about it.", "fol": "", "prediction": ["all x.((Person(x) & LiliedToAboutConsent(x)) -> -CanConsent(x))", "all x.((Person(x) & LiedToAboutConsent(x)) -> -CanConsent(x))", "all x.((Person(x) & LiesAboutConsent(x)) -> -CanConsent(x))", "all x.((LiliedTo(x) & ConsentsTo(x)) -> -CanConsent(x))", "all x.((Person(x) & LiesToAboutConsent(x)) -> -CanConsent(x))", "all x.((Person(x) & ConsentLiliedTo(x)) -> -CanConsent(x))", "all x.((Person(x) & LiliedToAboutConsent(x)) -> Can'tConsent(x))", "all x y.((Person(x) & LiedToAbout(x,y)) -> -ConsentsTo(x,y))", "all x.((Person(x) & LiliedToAbout(x,y)) -> -ConsentsTo(x,y))", "all x.((Person(x) & LiliedToAboutConsent(x)) -> -Consent(x))", "all x y.((Person(x) & LiedToAbout(x,y)) -> -ConsentTo(x,y))", "all x y.((Person(x) & LiedToAbout(x,y)) -> -Consents(x,y))", "all x.((Person(x) & LiedToAbout(x,y)) -> -ConsentsTo(x,y))", "all x.((Person(x) & LiliedToAboutConsent(x)) -> -CanConsent(x))", "all x.((Person(x) & LiliedToAboutConsent(x)) -> -CanConsentTo(x))", "all x.((Person(x) & LiliedToAbout(x)) -> -ConsentsTo(x))"]}
{"id": "enwn_validation_562", "nl": "Abby told Mark that she was on birth control so that she could get pregnant with him.", "fol": "", "prediction": ["all x y.((Abby(x) & Mark(y)) -> (OnBirthControl(x,y) & CouldGetPregnantWith(x,y)))", "all x y.((Abby(x) & Mark(y)) -> (OnBirthControl(x,y) & CouldGetPregnant(x,y)))", "all x y.((Abby(x) & Mark(y)) -> (OnBirthControl(x,y) & CanGetPregnant(x,y)))", "all x y.((Abby(x) & Mark(y)) -> (OnBirthControl(x,y) & CanGetPregnantWith(x,y)))", "all x y.((Abby(x) & Mark(y)) -> OnBirthControl(x,y))", "all x.((Abby(x) & Mark(x)) -> OnBirthControl(x))", "all x y.((Abby(x) & Mark(y)) -> (OnBirthControl(x,y) & CanGetPaternal(x,y)))", "all x y.((Abby(x) & Mark(y)) -> (OnBirthControl(x,y) & CouldBePregnant(x,y)))", "all x y.((Abby(x) & Mark(y)) -> (OnBirthControl(x,y) & CouldGetPaternal(x,y)))", "all x y.((Abby(x) & Mark(y)) -> (OnBirthControl(x,y) & CouldBePregnantWith(x,y)))", "all x y.((Abby(x) & Mark(y)) -> (OnBirthControl(x) & CouldGetPregnantWith(x,y)))", "all x y.((Abby(x) & Mark(y) & OnBirthControl(x,y)) -> CouldGetPregnantWith(x,y))", "all x y.((Abby(x) & Mark(y)) -> (OnBirthControl(x) & CouldGetPregnant(x,y)))", "all x y.((Abby(x) & Mark(y)) -> (OnBirthControl(x) & CanGetPregnant(x,y)))", "all x.((Abby(x) & Mark(y)) -> OnBirthControl(x,y))", "all x y.((Abby(x) & Mark(y)) -> (OnBirthControl(x) & CanGetPregnantWith(x,y)))"]}
{"id": "enwn_validation_563", "nl": "Abby was not on birth control.", "fol": "", "prediction": ["all x.(Abby(x) -> -BirthControl(x))", "Abby was not on birthcontrol.", "Abby -OnBirthControl(Abby))", "all x.(Abby(x) -> -OnBirthControl(x))", "Abby was not on BirthControl(Abby)", "Abby -OnBirthControl(Abby)", "Abby was notonBirthControl(Abby)", "(-BirthControl(Abby))", "Abby -BirthControl(Abby))", "all x.(Abby(x) -> -BirthControll(x))", "Abby was notOnBirthControl(Abby)", "Abby -OnBirthControl(a) -> -OnBirthControl(a))", "(-OnBirthControl(Abby))", "all x.(Abby(x) -> -BirthContainment(x))", "-BirthControl(Abby)", "all x.(Abby(x) -> -OnBirthControll(x))"]}
{"id": "enwn_validation_564", "nl": "You shouldn't lie to someone in order to conceive with them.", "fol": "", "prediction": ["all x y.((LittleTo(x,y) & Person(y)) -> -ConceivesWith(x,y))", "all x y.((LittleTo(x,y) & Person(y)) -> -ConceiveWith(x,y))", "all x y.((Limit(x,y) & Person(y)) -> -ConceivesWith(x,y))", "all x y.((Liking(x) & Person(y)) -> -Liking(x,y))", "all x y.((Limit(x,y) & Person(y)) -> -Limit(x,y))", "all x y.((Liking(x) & Person(y) & ConceivesWith(x,y)) -> -Liking(x,y))", "all x y.((LimitTo(x,y) & Person(y)) -> -ConceiveWith(x,y))", "all x y.((LimitTo(x,y) & Person(y)) -> -ConceivesWith(x,y))", "all x y.((LimitTo(x,y) & Person(y)) -> -LimitTo(x,y))", "all x y.((Limit(x,y) & Person(y)) -> -ConceiveWith(x,y))", "all x y.((Limit(x) & Person(y)) -> -Limit(x,y))", "all x y.((Little(x) & Person(y)) -> -ConceivesWith(x,y))", "all x y.((Limit(x,y) & Person(y)) -> -Conceive(x,y))", "all x y.((Little(x) & Person(y)) -> -Conceive(x,y))", "all x y.((Liking(x) & Person(y)) -> -ConceivesWith(x,y))", "all x y.((Likel(x) & Person(y)) -> -Likel(x,y))"]}
{"id": "enwn_validation_565", "nl": "Abby lied to Mark in order to get pregnant with him.", "fol": "", "prediction": ["all x y.((Abby(x) & Mark(y)) -> LiliedTo(x,y))", "all x y.((Abby(x) & Mark(y)) -> LiedTo(x,y))", "all x y.((Abby(x) & Mark(y)) -> LiesTo(x,y))", "All x y.((Abby(x) & Mark(y)) -> LiliedTo(x,y))", "all x y.((Abby(x) & Mark(y) & LiliedTo(x,y)) -> Pregnant(x,y))", "All x y.((Abby(x) & Mark(y)) -> LiedTo(x,y))", "all x y.((Abby(x) & Mark(y) & LiliedTo(x,y)) -> PregnantWith(x,y))", "All x y.((Abby(x) & Mark(y)) -> LiesTo(x,y))", "all x y.((Abby(x) & Mark(y)) -> LynkedTo(x,y))", "all x y.((Abby(x) & Mark(y) & LiliedTo(x,y)) -> GettingPaternal(x,y))", "all x y.((Abby(x) & Mark(y)) -> LyedTo(x,y))", "all x y.((Abby(x) & Mark(y)) -> L\u00fcdgedTo(x,y))", "all x y.((Abby(x) & Mark(y)) -> LynchedTo(x,y))", "all x y.((Abby(x) & Mark(y) & LiliedTo(x,y)) -> GettingPregnantWith(x,y))", "all x y.((Abby(x) & Mark(y)) -> LiliedToToGetPretty(x,y))", "all x y.((Abby(x) & Mark(y)) -> LiedToToGetPretty(x,y))"]}
{"id": "enwn_validation_566", "nl": "Abby should not have lied to Mark.", "fol": "", "prediction": ["Abby should not have lied to Mark.", "all x.((Abby(x) & Mark(y)) -> -LikedTo(x,y))", "Abby should not have liedToMark.", "all x.((Abby(x) & -LikedToMark(x)) -> -LikedToMark(x))", "all x.((Abby(x) & Mark(x)) -> -LikedTo(x,Mark))", "(all x.(Abby(x) -> -LikedToMark(x)))", "all x.((Abby(x) & Mark(y)) -> -Liked(x,y))", "all x.((Abby(x) & Mark(x)) -> -Liked(x,Mark))", "all x.((Abby(x) & Mark(y)) -> -LiredTo(x,y))", "Abby shouldn't have lied to Mark.", "all x.((Abby(x) & Mark(x)) -> -LiredTo(x,Mark))", "all x.((Abby(x) & Mark(y)) -> -LiedTo(x,y))", "all x.((Abby(x) & Mark(x)) -> -LiliedTo(x,Mark))", "all x.((Abby(x) & Mark(y)) -> -LiliedTo(x,y))", "all x.((Abby(x) & Mark(x)) -> -LiedTo(x,Mark))", "all x.((Abby(x) & -LikedToMark(x)) -> -LiedToMark(x))"]}
{"id": "enwn_validation_567", "nl": "A boss is an authority figure.", "fol": "", "prediction": ["all x.(Boss(x) -> AuthorityFigure(x))", "all x.(Bust(x) -> AuthorityFigure(x))", "exists x.(Boss(x) & AuthorityFigure(x))", "all x.(Boss(x) -> AuthorityFigure(x))", "all x.(Bosse(x) -> AuthorityFigure(x))", "all x.exists y.(Boss(x) & AuthorityFigure(y))", "all x y.((Boss(x) & AuthorityFigure(y)) -> Is(x,y))", "all x y.((Boss(x) & AuthorityFigure(y)) -> exists z.(Boss(z) & AuthorityFigure(z))))", "all x y.((Boss(x) & AuthorityFigure(y)) -> Has(x,y))", "all x y.((Boss(x) & AuthorityFigure(y)) -> HasBoss(x,y))", "exists x.(Bust(x) & AuthorityFigure(x))", "all x y.((Boss(x) & AuthorityFigure(y)) -> WorksFor(x,y))", "all x y.((Boss(x) & AuthorityFigure(y)) -> exists z.(Boss(z) | AuthorityFigure(z))))", "all x y.((Boss(x) & AuthorityFigure(y)) -> exists z.(Boss(z) & AuthorityFigure(x,z))))", "all x y.((Boss(x) & AuthorityFigure(y)) -> Exists z.(Boss(z) & AuthorityFigure(z))))", "all x y.((Boss(x) & AuthorityFigure(y)) -> Becomes(x,y))"]}
{"id": "enwn_validation_568", "nl": "Tom spat in his boss's coffee in front of everyone.", "fol": "", "prediction": ["all x y.((Tom(x) & Boss(y)) -> SpatsInCoffee(x,y))", "all x y z.((Tom(x) & Boss(y) & Coffee(z)) -> SpatsIn(x,y,z))", "all x y.((Tom(x) & Boss(y)) -> SpatInCoffee(x,y))", "all x y z.((Tom(x) & Boss(y) & Coffee(z)) -> SpatIn(x,y,z))", "all x y.((Tom(x) & Boss(y)) -> SpatsInCoffeeInFrontOfEveryone(x,y))", "all x y.((Tom(x) & BossCoffee(y)) -> SpatsIn(x,y))", "all x y z.((Tom(x) & BossCoffee(y) & Everyone(z)) -> SpatsIn(x,y,z))", "all x y z.((Tom(x) & Boss(y) & Coffee(z)) -> SpatsIn(x,z))", "all x.((Tom(x) & BossCoffee(x)) -> SpatsInFrontOfEveryone(x))", "all x y.((Tom(x) & Boss(y)) -> SpatsIn(x,y))", "all x y.((Tom(x) & BossCoffee(y)) -> SpatsInFrontOfEveryone(x,y))", "all x y.((Tom(x) & BossCoffee(y)) -> SpatIn(x,y))", "all x y.((Tom(x) & BossCoffee(y)) -> SpatInFrontOfEveryone(x,y))", "all x y z.((Tom(x) & Boss(y) & Coffee(z)) -> SpatsInFrontOf(x,y,z))", "all x y z.((Tom(x) & BossCoffee(y) & Everyone(z)) -> SpatIn(x,y,z))", "all x y z.((Tom(x) & Boss(y) & Coffee(z)) -> SpatIn(x,z))"]}
{"id": "enwn_validation_569", "nl": "Spitting in someone's beverage is rude.", "fol": "", "prediction": ["all x y.((Beverage(x) & SpittingIn(x,y)) -> Rust(x))", "all x y.((Beverage(x) & Person(y) & SpittingIn(x,y)) -> Rust(x))", "all x y.((Beverage(x) & SpittingIn(x,y)) -> Rust(y))", "all x.((SpittingInBeverage(x) & Person(x)) -> Rust(x))", "all x y.((Beverage(x) & SpittingIn(x,y)) -> Rust(x))", "all x.((Beverage(x) & SpittingIn(x,y)) -> Rust(x))", "all x y.((Beverage(x) & Spitting(x,y)) -> Rust(x))", "all x y.((Beverage(x) & Person(y)) -> SpittingIn(x,y))", "all x y.((Beverage(x) & Spitting(x,y)) -> Rust(y))", "all x.(SpittingInBeverage(x) -> Rust(x))", "all x y.((Beverage(x) & SpittingIn(x,y)) -> Rude(x))", "all x y.((Beverage(x) & SpittingIn(x,y)) -> Rustic(x))", "all x.((SpitsInBeverage(x) & Person(x)) -> Rust(x))", "all x.((Beverage(x) & SpittingIn(x)) -> Rust(x))", "all x y.((Beverage(x) & SpittingIn(x,y)) -> Reckless(x))", "all x.((SpittingInBeverage(x) & Person(y)) -> Rust(x))"]}
{"id": "enwn_validation_570", "nl": "Being insubordinate means disrespecting authority.", "fol": "", "prediction": ["all x.(Insubordinate(x) -> DisrespectsAuthority(x))", "all x.((Insubordinate(x) & DisrespectsAuthority(x)) -> Insubordinate(x))", "all x.((Insubordinate(x) & DisrespectsAuthority(x)) -> DisrespectsAuthority(x))", "all x.((Insubordinate(x) & DisrespectsAuthority(x)) -> DisregardsAuthority(x))", "all x.(Insubordinate(x) -> DisrespectsAutority(x))", "all x y.((Insubordinate(x) & Authority(y)) -> Disrespects(x,y))", "all x.((Insubordinate(x) & DisrespectsAutority(x)) -> Insubordinate(x))", "all x.(Insubordinate(x) -> DisrespectsAuthority(x))", "all x.(Insubordinate(x) -> DisrespectsAgency(x))", "all x.((Insubordinate(x) & Insubordinate(x)) -> DisrespectsAuthority(x))", "all x.(InSubordinate(x) -> DisrespectsAuthority(x))", "All x.(Insubordinate(x) -> DisrespectsAuthority(x))", "all x.(Insubordination(x) -> DisrespectsAuthority(x))", "all x.((Insubordinate(x) & DisrespectsAgency(x)) -> Insubordinate(x))", "all x.((Insubordination(x) & DisrespectsAuthority(x)) -> Insubordinate(x))", "all x.(Insubordinate(x) -> DisregardsAuthority(x))"]}
{"id": "enwn_validation_571", "nl": "Tom was rude to his boss.", "fol": "", "prediction": ["all x y.((Tom(x) & Boss(y)) -> RustyTo(x,y))", "all x y.((Tom(x) & Boss(y)) -> RudeTo(x,y))", "all x.((Tom(x) & Boss(x)) -> Rusty(x))", "all x.((Tom(x) & Boss(x)) -> RustyTo(x))", "all x y z.((Tom(x) & Boss(y) & Boss(z)) -> RustyTo(x,y,z))", "all x y.((Tom(x) & Boss(y)) -> Rusty(x,y))", "all x.((Tom(x) & Boss(x)) -> RustyTo(x,y))", "all x y z.((Tom(x) & Boss(y) & Boss(z)) -> RudeTo(x,y,z))", "all x y.((Tom(x) & Boss(y)) -> Rust(x,y))", "all x.((Tom(x) & Boss(x)) -> RudeTo(x))", "all x y z.((Tom(x) & Boss(y) & Boss(z)) -> Rusty(x,y,z))", "all x y.((Tom(x) & Boss(y)) -> RusticTo(x,y))", "all x y.((Tom(x) & Boss(y)) -> CruelTo(x,y))", "all x.((Tom(x) & Boss(y)) -> RustyTo(x,y))", "all x.((Tom(x) & Boss(x)) -> RudeTo(x,y))", "all x y z.((Tom(x) & Boss(y) & Boss(z)) -> RustyTo(x,y))"]}
{"id": "enwn_validation_572", "nl": "Tom was being disrespectful towards an authority figure.", "fol": "", "prediction": ["all x y.((Tom(x) & AuthorityFigure(y)) -> DisrespectfulToward(x,y))", "all x y.((Tom(x) & Authority(y)) -> DisrespectfulToward(x,y))", "all x.((Tom(x) & AuthorityFigure(x)) -> Disrespectful(x))", "all x y.((Tom(x) & Authority(y)) -> DisrespectfulTowards(x,y))", "all x y.((Tom(x) & AuthorityFigure(y)) -> DisrespectfulTowards(x,y))", "all x y.((Tom(x) & AuthorityFigure(y)) -> DisrespectfulTo(x,y))", "all x y.((Tom(x) & AuthorityFigure(y)) -> Disrespectful(x,y))", "all x.((Tom(x) & AuthorityFigure(x)) -> DisrespectfulToward(x))", "all x y.((Tom(x) & Authority(y)) -> DisrespectfulTo(x,y))", "all x.((Tom(x) & AuthorityFigure(x)) -> DisrespectfulTo(x))", "all x.((Tom(x) & AuthorityFigure(x)) -> DisrespectfulToward(x,Tom))", "all x.((Tom(x) & AuthorityFigure(x)) -> DisrespectfulTowards(x))", "all x y.((Tom(x) & Authority(y)) -> Disrespectful(x,y))", "all x.((Tom(x) & AuthorityFigure(x)) -> DisrespectfulTowards(x,Tom))", "all x.((Tom(x) & AuthorityFigure(x)) -> DisrespectfulToward(x,y))", "all x.((Tom(x) & AuthorityFigure(x)) -> DisrespectfulTowards(x,y))"]}
{"id": "enwn_validation_573", "nl": "Tom was being insubordinate.", "fol": "", "prediction": ["all x.((Tom(x) & Insubordinate(x)) -> Insubordinate(x))", "all x.((Tom(x) & Insubordinate(x)) -> Insubordination(x))", "all x.(Tom(x) -> Insubordinate(x))", "all x.((Tom(x) & Insubordinate(x)) -> InSubordination(x))", "all x.((Tom(x) & InSubordinate(x)) -> Insubordinate(x))", "all x.((Tom(x) & Insubordinate(x)) -> InSubordinate(x))", "All x.((Tom(x) & Insubordinate(x)) -> Insubordinate(x))", "all x.((Tom(x) & Insubordinate(x)) -> WasInSubordination(x))", "all x.((Tom(x) & Subordinate(x)) -> Insubordinate(x))", "all x.((Tom(x) & InSubordination(x)) -> Insubordinate(x))", "All x.(Tom(x) -> Insubordinate(x))", "all x.((Tom(x) & Insubordinate(x)) -> WasInsubordinate(x))", "all x.((Tom(x) & InSubordinate(x)) -> InSubordinate(x))", "all x.((Tom(x) & Insubordinate(x)) -> Was(x))", "All x.((Tom(x) & Insubordinate(x)) -> Insubordination(x))", "all x.((Tom) & Insubordinate(x)) -> Insubordinate(x))"]}
{"id": "enwn_validation_574", "nl": "Karen stole a customer's social security number for her own gain.", "fol": "", "prediction": ["all x y z.((Karen(x) & Customer(y) & SocialSecurityNumber(z)) -> StolenForOwnGain(x,y,z))", "all x y.((Karen(x) & Customer(y)) -> StolenSocialSecurityNumber(x,y))", "all x y.((Karen(x) & Customer(y)) -> StolenSocialSecurityNumberForOwnGain(x,y))", "all x y.((Karen(x) & Customer(y)) -> StolenSecurityNumberForOwnGain(x,y))", "all x y z.((Karen(x) & Customer(y) & SocialSecurityNumber(z)) -> StoleForOwnGain(x,y,z))", "all x y.((Karen(x) & Customer(y)) -> StolenSecurityNumber(x,y))", "all x y z.((Karen(x) & Customer(y) & SocialSecurityNumber(z)) -> StolenForGain(x,y,z))", "all x y z.((Karen(x) & Customer(y) & SocialSecurityNumber(z)) -> Stolen(x,y,z))", "all x y z.((Karen(x) & Customer(y) & SocialSecurity(z)) -> StolenForOwnGain(x,y,z))", "all x y.((Karen(x) & Customer(y)) -> (StoleSecurityNumber(x,y) & OwnGain(x,y)))", "all x y z.((Karen(x) & Customer(y) & SocialSecurityNumber(z)) -> StolenForWin(x,y,z))", "all x y z.((Karen(x) & Customer(y) & SocialSecurityNumber(z)) -> Stole(x,y,z))", "all x y z.((Karen(x) & Customer(y) & SocialSecurityNumber(z)) -> StolenForOwnGain(x,z))", "all x y.((Karen(x) & Customer(y)) -> (StolenSocialSecurityNumber(x,y) & ForOwnGain(x,y)))", "all x y.((Karen(x) & Customer(y)) -> StoleSocialSecurityNumber(x,y))", "all x y.((Karen(x) & Customer(y)) -> (StolenSocialSecurityNumber(x,y) & OwnGain(x,y)))"]}
{"id": "enwn_validation_575", "nl": "Stealing a person's social security number is also called stealing their identity.", "fol": "", "prediction": ["all x y.((Person(x) & SocialSecurityNumber(y)) -> StealingIdentity(x,y))", "all x.((Person(x) & SocialSecurityNumber(x)) -> StealingIdentity(x))", "all x y.((Person(x) & SocialSecurityNumber(y) & Stealing(x,y)) -> StolenIdentity(x))", "all x.((Person(x) & SocialSecurityNumber(x)) -> StolenIdentity(x))", "all x y.((Person(x) & SocialSecurityNumber(y) & Stealing(x,y)) -> StealingIdentity(x))", "all x.(StealingSecurityNumber(x) -> StealingIdentity(x))", "all x.(StealingSocialSecurityNumber(x) -> StealingIdentity(x))", "all x.(StealingSocialSecurityNumber(x) -> StolenIdentity(x))", "all x y.((Person(x) & SocialSecurityNumber(y) & Stealing(x,y)) -> StolenIdentity(x,y))", "all x y.((Person(x) & SocialSecurityNumber(y) & StealingIdentity(x,y)) -> StealingIdentity(x,y))", "all x.(StealingSecurityNumber(x) -> StolenIdentity(x))", "all x y.((Person(x) & SocialSecurityNumber(y) & Stealing(x,y)) -> StealingIdentity(x,y))", "all x.(StolenSocialSecurityNumber(x) -> StolenIdentity(x))", "all x.(StolenSocialSecurityNumber(x) -> StealingIdentity(x))", "all x y.((Person(x) & SocialSecurityNumber(y)) -> StolenIdentity(x,y))", "all x y.((Person(x) & SocialSecurityNumber(y) & Stealing(x,y)) -> TakingIdentity(x,y))"]}
{"id": "enwn_validation_576", "nl": "You shouldn't cause problems for others.", "fol": "", "prediction": ["all x.((CausesProblems(x) & -CausesProblems(x)) -> -CausesProblems(x))", "all x.((CausesProblems(x) & -CausesProblems(x)) -> -CausesProblemsForOthers(x))", "all x.((CausesProblems(x) & -CausesProblemsForOthers(x)) -> -CausesProblems(x))", "all x.((CausesProblems(x) & -CausesProblemsForOthers(x)) -> -CausesProblemsForOthers(x))", "all x.((You(x) & -CauseProblemsForOthers(x)) -> -CauseProblemsForOthers(x))", "all x.((CausesProblemsForOthers(x)) -> -CausesProblemsForOthers(x))", "all x.((CausesProblems(x) & -CausesProblems(x)) -> -(CausesProblems(x) & CausesProblems(x)))", "all x.((You(x) & -CausesProblemsForOthers(x)) -> -CausesProblemsForOthers(x))", "all x y.((CausesProblems(x,y) & Other(y)) -> -CausesProblems(x,y))", "all x.((CauseProblems(x) & -CauseProblems(x)) -> -CauseProblems(x))", "all x.((You(x) & -CausesProblems(x)) -> -CausesProblems(x))", "all x.((CausesProblems(x) & -CausesProblems(x)) -> -(CausesProblems(x) & CausesProblems(x))))", "all x.((Person(x) & -CausesProblems(x)) -> -CausesProblems(x))", "all x.(CausesProblemsForOthers(x) -> -CausesProblemsForOthers(x))", "all x.((CausesProblems(x) & -CausesProblems(x)) -> -(CausesProblems(x) | CausesProblems(x))))", "all x.((You(x) & -CauseProblems(x)) -> -CauseProblems(x))"]}
{"id": "enwn_validation_577", "nl": "Stealing someone's identity allows the thief to take control of the victim's bank account.", "fol": "", "prediction": ["all x y.((StealingIdentity(x) & Victim(y)) -> TakesControlOfBankAccount(x,y))", "all x y.((Thief(x) & Identity(y)) -> TakesControlOfBankAccount(x,y))", "all x y z.((Thief(x) & Identity(y) & BankAccount(z) & Stealing(x,y)) -> TakesControl(x,z))", "all x y.((Thrief(x) & Identity(y)) -> TakesControlOfBankAccount(x,y))", "all x y z.((Thief(x) & Identity(y) & BankAccount(z) & Stealing(x,y)) -> TakesControlOf(x,z))", "all x.(StealingIdentity(x) -> AllowsThiefToTakeControlOfBankAccount(x))", "all x y.((StealingIdentity(x) & Victim(y)) -> AllowsThiefToTakeControlOfBankAccount(x,y))", "all x y z.((Thief(x) & Identity(y) & BankAccount(z)) -> Stealing(x,y,z))", "all x y z.((Stealing(x) & Identity(y) & Victim(z)) -> AllowsThiefToTakeControlOfBankAccount(x,y,z))", "all x y z.((Stealing(x) & Identity(y) & Victim(z)) -> TakesControlOfBankAccount(x,y,z))", "all x y.((Tthief(x) & Identity(y)) -> TakesControlOfBankAccount(x,y))", "all x y z.((Theft(x) & Identity(y) & Victim(z)) -> TakesControlOfBankAccount(x,y,z))", "all x y z.((Stealing(x) & Identity(y) & Victim(z)) -> TakesControlOfBankAccount(x,z))", "all x y z.((Thief(x) & Identity(y) & BankAccount(z) & Stealing(x,y,z)) -> TakesControl(x,y,z))", "all x y z.((Stealing(x) & Identity(y) & Victim(z)) -> AllowsThiefToTakeControlOfBankAccount(x,z))", "all x y z.((Thief(x) & Identity(y) & BankAccount(z)) -> Steals(x,y,z))"]}
{"id": "enwn_validation_578", "nl": "Losing control of your bank account leads to financial problems.", "fol": "", "prediction": ["all x.(LosingControlOfBankAccount(x) -> FinancialProblems(x))", "all x.((BankAccount(x) & LosesControl(x)) -> FinancialProblems(x))", "all x.(LosingBankAccountControl(x) -> FinancialProblems(x))", "all x.((BankAccountControl(x) & LosesControl(x)) -> FinancialProblems(x))", "all x.((BankAccountControlLoss(x) & FinancialProblems(x)) -> LosesControl(x))", "all x.((BankAccountControl(x) & LosingControl(x)) -> FinancialProblems(x))", "all x.((BankAccountControlLoss(x) & FinancialProblem(x)) -> LosesControl(x))", "all x.(LosingControlOfBankAccount(x) -> LeadsToFinancialProblems(x))", "all x y.((BankAccount(x) & LosingControl(x,y)) -> FinancialProblems(y))", "all x.((BankAccount(x) & LosingControl(x)) -> FinancialProblems(x))", "all x y.((BankAccount(x) & LosesControl(x,y)) -> FinancialProblems(y))", "all x.(LosingBankAccountControlLeadsToFinancialProblems(x) -> FinancialProblems(x))", "all x y.((BankAccount(x) & LosingControl(x,y)) -> FinancialProblems(x))", "all x.((BankAccountControlLoss(x) & FinancialProblems(x)) -> LosesContainment(x))", "all x.(LosingControlOfBankAccount(x) -> FinancialProblem(x))", "all x y.((BankAccount(x) & LosesControl(x,y)) -> FinancialProblems(x))"]}
{"id": "enwn_validation_579", "nl": "Karen stole the customer's identity.", "fol": "", "prediction": ["all x y.((Karen(x) & Customer(y)) -> StolenIdentity(x,y))", "all x y z.((Karen(x) & Customer(y) & Identity(z)) -> Stolen(x,y,z))", "all x y.((Karen(x) & Customer(y)) -> StoleIdentity(x,y))", "all x y z.((Karen(x) & Customer(y) & Identity(z)) -> Stole(x,y,z))", "all x y.((Karen(x) & Customer(y)) -> StoleIdentity(x,y))", "all x y z.((Karen(x) & Customer(y) & Identity(z)) -> Stolen(x,y,z))", "all x.((Karen(x) & Customer(y)) -> StolenIdentity(x,y))", "all x y z.((Karen(x) & Customer(y) & Identity(z)) -> Stole(x,y,z))", "All x y.((Karen(x) & Customer(y)) -> StolenIdentity(x,y))", "all x y z.((Karen(x) & Customer(y) & Identity(z)) -> Stolen(x,y))", "all x y.((Karen(x) & Customer(y)) -> stolesIdentity(x,y))", "all x y.((Katie(x) & Customer(y)) -> StolenIdentity(x,y))", "all x.(Karen(x) -> StolenCustomerIdentity(x))", "all x y z.((Karen(x) & Customer(y) & Identity(z)) -> Stole(x,y,z))", "all x y.((Karen(x) & Customer(y)) -> stoleIdentity(x,y))", "all x y.((Karen(x) & Customer(y)) -> StolenIdentity(x,y))"]}
{"id": "enwn_validation_580", "nl": "Stealing someone's identity can cause them financial problems.", "fol": "", "prediction": ["all x.(StealingIdentity(x) -> CausesFinancialProblems(x))", "all x y.((Identity(x) & Person(y)) -> CausesFinancialProblems(x,y))", "all x.(StealingIdentity(x) -> CanCauseFinancialProblems(x))", "all x y.((Identity(x) & Person(y) & Stealing(x,y)) -> CausesFinancialProblems(x,y))", "all x y.((Identity(x) & Person(y) & Stealing(x,y)) -> CanCauseFinancialProblems(x,y))", "all x y.((StolenIdentity(x) & Person(y)) -> CanCauseFinancialProblems(x,y))", "all x.(StolenIdentity(x) -> CausesFinancialProblems(x))", "all x y.((StolenIdentity(x) & Person(y)) -> CausesFinancialProblems(x,y))", "all x y.((StealingIdentity(x) & Person(y)) -> CausesFinancialProblems(x,y))", "all x y.((StealingIdentity(x) & Person(y)) -> CanCauseFinancialProblems(x,y))", "all x y.((Identity(x) & Identity(y)) -> CausesFinancialProblems(x,y))", "all x y.((Identity(x) & Person(y)) -> CanCauseFinancialProblems(x,y))", "all x y.((StalingIdentity(x) & Person(y)) -> CausesFinancialProblems(x,y))", "all x.(StolenIdentity(x) -> CanCauseFinancialProblems(x))", "all x y.((Identity(x,y) & Person(y)) -> CausesFinancialProblems(x,y))", "all x y.((Identity(x) & Person(y) & Stealing(x,y)) -> CausesFinancialProblems(x))"]}
{"id": "enwn_validation_581", "nl": "You shouldn't steal someone's identity.", "fol": "", "prediction": ["all x.((Person(x) & -StoleIdentity(x)) -> -StoleIdentity(x))", "all x.((StoleIdentity(x) & -StoleIdentity(x)) -> -StoleIdentity(x))", "all x y.((Fraud(x) & Person(y)) -> -StoleIdentity(x,y))", "all x y.((StoleIdentity(x) & Person(y)) -> -StoleIdentity(x,y))", "all x.((StoleIdentity(x) & Person(x)) -> -StoleIdentity(x))", "all x y.((Fraud(x) & Person(y)) -> -StealIdentity(x,y))", "all x y.((StoleIdentity(x,y) & Person(y)) -> -StoleIdentity(x,y))", "all x y.((Person(x) & Identity(y)) -> -Stole(x,y))", "all x y.((Person(x) & Identity(y)) -> -Steal(x,y))", "all x.((Person(x) & -StealIdentity(x)) -> -StoleIdentity(x))", "all x.((Person(x) & -StealIdentity(x)) -> -StealIdentity(x))", "all x y.((Stole(x,y) & Person(y)) -> -StoleIdentity(x,y))", "all x.((StoleIdentity(x) & Person(y)) -> -StoleIdentity(x,y))", "all x y.((You(x) & Person(y)) -> -StealIdentity(x,y))", "all x y.((You(x) & Person(y)) -> -StoleIdentity(x,y))", "all x.((Fraud(x) & -StoleIdentity(x)) -> -StoleIdentity(x))"]}
{"id": "enwn_validation_582", "nl": "Karen should not have stolen the customer's identity.", "fol": "", "prediction": ["all x y.((Karen(x) & Customer(y)) -> -StolenIdentity(x,y))", "all x.((Karen(x) & Customer(y)) -> -StolenIdentity(x,y))", "all x y.((Karen(x) & Customer(y) & -StolenIdentity(x,y)) -> -StolenIdentity(x,y))", "all x.(Karen(x) -> -StolenCustomerIdentity(x))", "all x.((Karen(x) & Customer(y) & -StolenIdentity(x,y)) -> -StolenIdentity(x,y))", "all x y.((Karen(x) & Customer(y)) -> -StoleIdentity(x,y))", "all x y z.((Karen(x) & Customer(y) & Identity(z)) -> -Stolen(x,y,z))", "all x.((Karen(x) & Customer(y)) -> -StoleIdentity(x,y))", "all x y.((Karen(x) & Customer(y)) -> -ShootedIdentity(x,y))", "all x.((Karen(x) & Customer(x)) -> -StolenIdentity(x,y))", "all x.(Karen(x) -> -StolenIdentity(x))", "all x y.((Karen(x) & Customer(y)) -> -HasStolenIdentity(x,y))", "all x.((Karen(x) & Customer(y)) -> -ShootedIdentity(x,y))", "all x.((Karen(x) & Customer(x)) -> -StolenIdentity(x,Karen))", "all x.((Karen(x) & Customer(x)) -> -StolenIdentity(x))", "all x y z.((Karen(x) & Customer(y) & Identity(z)) -> -Stole(x,y,z))"]}
{"id": "enwn_validation_583", "nl": "Jenna's friend didn't give her permission to take any of her stuff.", "fol": "", "prediction": ["all x y.((Friend(x) & Jenna(y)) -> -GivenPermissionToTakeStuff(x,y))", "all x y.((Friend(x) & Jenna(y)) -> -GivesPermissionToTakeStuff(x,y))", "all x y.((Friend(x) & Jenna(y)) -> -GiftsPermissionToTakeStuff(x,y))", "all x y.((Friend(x) & Jenna(y)) -> -GivesPermissionToTakeAnyOfStuff(x,y))", "all x y.((Friend(x) & Jenna(y)) -> -GivedPermissionToTakeStuff(x,y))", "all x y.((Friend(x) & Jenna(y)) -> -GiftsPermissionToTake(x,y))", "all x y.((Friend(x) & Jenna(y)) -> -GiftsPermission(x,y))", "Jenna's friend didn't give permission to take any of her stuff.", "all x y.((Friend(x) & Jenna(y)) -> -GivenPermission(x,y))", "all x.((Friend(x) & Jenna(x)) -> -GivenPermissionToTakeStuff(x,y))", "all x y.((Friend(x) & Jenna(y)) -> -GivenPermissionToTake(x,y))", "all x y.((Friend(x) & Jenna(y)) -> -GivesPermissionToTake(x,y))", "all x.((Friend(x) & Jenna(x)) -> -GivesPermissionToTakeStuff(x,y))", "all x y.((Friend(x) & Jenna(y)) -> -GivePerson(x,y))", "all x y z.((Friend(x) & Jenna(y) & Stuff(z)) -> -GivenPermission(x,y,z))", "all x.((Friend(x) & Jenna(x)) -> -GiftsPermissionToTakeStuff(x,y))"]}
{"id": "enwn_validation_584", "nl": "Jenna took a Clif bar from the pantry.", "fol": "", "prediction": ["all x y.((Jenna(x) & Pantry(y)) -> TakesClifBar(x,y))", "all x y z.((Jenna(x) & ClifBar(y) & Pantry(z)) -> TakenFrom(x,y,z))", "all x y z.((Jenna(x) & ClifBar(y) & Pantry(z)) -> TakesFrom(x,y,z))", "all x y.((Jenna(x) & Pantry(y)) -> TakenClifBar(x,y))", "all x y z.((Jenna(x) & ClifBar(y) & Pantry(z) & TakesFrom(x,y,z)) -> TakesFrom(x,y,z))", "all x y.((Jenna(x) & Pantry(y) & TakesClifBar(x,y)) -> TakesFrom(x,y))", "all x y.((Jenna(x) & Pantry(y)) -> TakesClifBarFrom(x,y))", "all x y.((Jenna(x) & Pantry(y) & TakesClifBar(x,y)) -> TakesClifBar(x,y))", "all x y.((Jenna(x) & ClifBar(y)) -> TakenFromPantries(x,y))", "all x y.((Jenna(x) & Pantry(y) & TakesClifBar(x,y)) -> Takes(x,y))", "all x y z.((Jenna(x) & ClifBar(y) & Pantry(z) & From(x,y,z)) -> TakesFrom(x,y,z))", "all x y z.((Jenna(x) & ClifBar(y) & Pantry(z) & TakenFrom(x,y,z)) -> TakenFrom(x,y,z))", "all x y.((Jenna(x) & ClifBar(y)) -> TakenFromPantry(x,y))", "all x y z.((Jenna(x) & ClifBar(y) & Pantry(z) & TakesFrom(x,y,z)) -> TakesFrom(x,y))", "all x.((Jenna(x) & ClifBar(x)) -> FromPantries(x))", "all x y z.((Jenna(x) & ClifBar(y) & Pantry(z) & From(x,y,z)) -> TakenFrom(x,y,z))"]}
{"id": "enwn_validation_585", "nl": "Jenna's friend bought the Clif bars in the pantry.", "fol": "", "prediction": ["all x y.((Friend(x) & Jenna(y)) -> BuysClifBars(x,y))", "all x y.((Friend(x) & Jenna(y)) -> PurchasedClifBars(x,y))", "all x y z.((Friend(x) & Jenna(y) & ClifBar(z)) -> PurchasedInPantry(x,y,z))", "all x y.((Friend(x) & Jenna(y)) -> PurchasedClifBarsInPantry(x,y))", "all x y z.((Friend(x) & Jenna(y) & ClifBar(z)) -> PurchasedInPantries(x,y,z))", "all x y.((Friend(x) & Jenna(y)) -> BuysClifBarsInPantry(x,y))", "all x y.((Friend(x) & Jenna(y)) -> PurchasedClifBarsInPantries(x,y))", "all x y z.((Friend(x) & Jenna(y) & ClifBars(z)) -> PurchasedInPantry(x,y,z))", "all x y.((Friend(x) & Jenna(y)) -> BuysClifBarsInPantries(x,y))", "all x y z.((Friend(x) & Jenna(y) & ClifBar(z)) -> BuysInPantry(x,y,z))", "all x y z.((Friend(x) & Jenna(y) & ClifBars(z)) -> PurchasedInPantries(x,y,z))", "all x y z.((Friend(x) & Jenna(y) & ClifBar(z)) -> BuysInPantries(x,y,z))", "all x y.((Friend(x) & Jenna(y)) -> BoughtClifBars(x,y))", "all x y z.((Friend(x) & Jenna(y) & ClifBar(z)) -> PurchasedInPanther(x,y,z))", "all x y z.((Friend(x) & Jenna(y) & ClifBar(z)) -> PurchasedInPantries(y,z))", "all x y z.((Friend(x) & Jenna(y) & ClifBar(z)) -> PurchasedInPantry(y,z))"]}
{"id": "enwn_validation_586", "nl": "Once you buy something, it belongs to you.", "fol": "", "prediction": ["all x.(Buys(x) -> BelongsTo(x,y))", "all x y.((Buys(x) & Product(y)) -> BelongsTo(x,y))", "all x y.((Buys(x) & Object(y)) -> BelongsTo(x,y))", "all x.((Buys(x) & BelongsTo(x)) -> Buys(x))", "all x.(Buys(x) -> BelongsTo(x))", "all x.((Buys(x) & Buys(x)) -> BelongsTo(x,y))", "all x y.((Buys(x) & Purchase(y)) -> BelongsTo(x,y))", "all x y.((Buys(x) & Something(y)) -> BelongsTo(x,y))", "all x y.((Buys(x,y) & Product(y)) -> BelongsTo(x,y))", "all x y.((Buys(x) & Purchases(y)) -> BelongsTo(x,y))", "all x.(Buys(x) -> BelongsToYou(x))", "all x.((Buys(x) & Buys(x)) -> BelongsTo(x))", "all x.((Buys(x) & BelongsTo(x)) -> Buys(x,y))", "all x.((Buys(x) & Purchases(x)) -> BelongsTo(x,y))", "all x.((Buys(x) & BelongsTo(x,y)) -> Buys(x,y))", "all x.((Buys(x) & BelongsTo(x)) -> Purchases(x))"]}
{"id": "enwn_validation_587", "nl": "You shouldn't take someone else's belongings without their permission.", "fol": "", "prediction": ["all x y.((Person(x) & Belonging(y)) -> -TakesWithoutPermission(x,y))", "all x y.((Person(x) & Belonging(y) & -TakesWithoutPermission(x,y)) -> -TakesWithoutPermission(x,y))", "all x y.((Person(x) & Belonging(y) & TakesWithoutPermission(x,y)) -> -TakesWithoutPermission(x,y))", "all x y.((Person(x) & Belonging(y)) -> -TakeWithoutPermission(x,y))", "all x y.((Person(x) & BelongsWithoutPermission(x,y)) -> -TakesWithoutPermission(x,y))", "all x y.((HasBelonging(x,y) & TakesWithoutPermission(x,y)) -> -TakesWithoutPermission(x,y))", "all x y.((Person(x) & BelongsTo(y,x)) -> -TakesWithoutPermission(x,y))", "all x.((Person(x) & TakesBelongingsWithoutPermission(x)) -> -TakesBelongingsWithoutPermission(x))", "all x y.((Person(x) & BelongsTo(x,y)) -> -TakesWithoutPermission(x,y))", "all x y.((Person(x) & Belongings(y)) -> -TakesWithoutPermission(x,y))", "all x y.((Other(x) & Belonging(y)) -> -TakesWithoutPermission(x,y))", "all x y.((Belonging(x,y) & Person(y)) -> -TakesWithoutPermission(x,y))", "all x.((Person(x) & TakesBelongingsWithoutPermission(x)) -> -Person(x))", "all x.((Person(x) & TakesWithoutPermission(x)) -> -TakesWithoutPermission(x))", "all x y.((Person(x) & Belonging(y)) -> -NeedsPermission(x,y))", "all x y.((Person(x) & BelongsWithoutPermission(x,y)) -> -TakeWithoutPermission(x,y))"]}
{"id": "enwn_validation_588", "nl": "The Clif bars in the pantry belonged to Jenna's friend.", "fol": "", "prediction": ["all x y.((ClifBar(x) & Pantry(y)) -> BelongedToFriend(x,y))", "all x y.((ClifBar(x) & Pantry(y)) -> BelongsToFriend(x,y))", "all x y z.((ClifBar(x) & Pantry(y) & JennaFriend(z)) -> BelongedTo(x,y,z))", "all x y z.((ClifBar(x) & Pantry(y) & JennaFriend(z)) -> BelongsTo(x,y,z))", "all x y z.((ClifBar(x) & Pantry(y) & JennasFriend(z)) -> BelongedTo(x,y,z))", "all x y.((ClifBars(x) & Pantry(y)) -> BelongedToFriend(x,y))", "all x.((ClifBar(x) & Pantry(x)) -> BelongedToFriend(x,Jenna))", "all x y z.((ClifBars(x) & Pantry(y) & JennaFriend(z)) -> BelongedTo(x,y,z))", "all x y.((ClifBar(x) & Pantry(y) & JennaFriend(y)) -> BelongsTo(x,y))", "all x.((ClifBars(x) & Pantry(x)) -> BelongedToFriend(x,Jenna))", "all x y.((ClifBar(x) & Pantry(y) & JennaFriend(y)) -> BelongedTo(x,y))", "all x y.((ClifBars(x) & Pantry(y)) -> BelongsToFriend(x,y))", "all x y z.((ClifBar(x) & Pantry(y) & JennasFriend(z)) -> BelongsTo(x,y,z))", "all x y z.((ClifBar(x) & Pantry(y) & Jenna(z)) -> BelongedToFriend(x,y,z))", "all x.((ClifBar(x) & Pantry(x)) -> BelongsToFriend(x,Jenna))", "all x y.((ClifBar(x) & Pantry(y) & JennaFriend(x,y)) -> BelongsTo(x,y))"]}
{"id": "enwn_validation_589", "nl": "Jenna took one of her friend's Clif bars.", "fol": "", "prediction": ["all x y.((Jenna(x) & ClifBar(y)) -> TakenBy(x,y))", "all x y.((Jenna(x) & ClifBar(y)) -> Takes(x,y))", "all x.((Jenna(x) & ClifBar(x)) -> TakenBy(x,y))", "all x y.((Jenna(x) & ClifBar(y)) -> Taken(x,y))", "all x y z.((Jenna(x) & ClifBar(y) & Friends(z)) -> Takes(x,y,z))", "all x y.((Jenna(x) & friend(y)) -> TakesClifBar(x,y))", "all x y.((Jenna(x) & Friends(y)) -> TakesClifBar(x,y))", "all x.((Jenna(x) & ClifBar(y)) -> TakenBy(x,y))", "all x y.((Jenna(x) & Friend(y)) -> TakesClifBar(x,y))", "all x y.((Jenna(x) & FriendsClifBar(y)) -> Taken(x,y))", "all x y z.((Jenna(x) & ClifBar(y) & Friends(z)) -> Taken(x,y,z))", "all x y z.((Jenna(x) & ClifBar(y) & Friends(z)) -> TakenBy(x,y,z))", "all x y.((Jenna(x) & FriendsClifBar(y)) -> Takes(x,y))", "all x.((Jenna(x) & ClifBar(x)) -> Takes(x,y))", "all x y.((Friend(x) & Jenna(y)) -> TakesClifBar(y,x))", "all x.((Jenna(x) & FriendsClifBar(x)) -> Taken(x,y))"]}
{"id": "enwn_validation_590", "nl": "Jenna took one of her friend's Clif bars without her permission.", "fol": "", "prediction": ["all x y.((Jenna(x) & ClifBar(y)) -> TakenWithoutPermission(x,y))", "all x y.((Jenna(x) & ClifBar(y)) -> TakesWithoutPermission(x,y))", "all x y z.((Jenna(x) & ClifBar(y) & Friends(z)) -> TakenWithoutPermission(x,y,z))", "all x y.((Jenna(x) & FriendsClifBar(y)) -> TakenWithoutPermission(x,y))", "all x y.((Jenna(x) & ClifBar(y)) -> TakenUnderPermission(x,y))", "all x y z.((Jenna(x) & ClifBar(y) & Friends(z)) -> TakesWithoutPermission(x,y,z))", "all x y z.((Jenna(x) & ClifBar(y) & ClifBar(z)) -> TakenWithoutPermission(x,y,z))", "all x y z.((Jenna(x) & ClifBar(y) & Friend(z)) -> TakenWithoutPermission(x,y,z))", "all x y z.((Jenna(x) & ClifBar(y) & friend(z)) -> TakenWithoutPermission(x,y,z))", "all x y.((Jenna'sFriend(x) & ClifBar(y)) -> TakenWithoutPermission(x,y))", "all x.((Jenna(x) & ClifBar(y)) -> TakenWithoutPermission(x,y))", "all x.((Jenna(x) & ClifBar(x)) -> TakenWithoutPermission(x,y))", "all x.((Jenna(x) & ClifBar(x)) -> TakenWithoutPermission(x))", "all x y z.((Jenna(x) & ClifBar(y) & Friend(z)) -> TakesWithoutPermission(x,y,z))", "all x y z.((Jenna(x) & ClifBar(y) & friend(z)) -> TakesWithoutPermission(x,y,z))", "all x y.((Friend(x) & Jenna(y)) -> TakenWithoutPermission(y,x))"]}
{"id": "enwn_validation_591", "nl": "Jenna shouldn't have taken the Clif bar.", "fol": "", "prediction": ["all x.((Jenna(x) & -ClifBar(x)) -> -ClifBar(x))", "all x.((Jenna(x) & -HasClifBar(x)) -> -HasClifBar(x))", "all x.((Jenna(x) & -ClifBar(x)) -> -HasClifBar(x))", "all x.((Jenna(x) & -ClifBar(x)) -> -TakenBy(x,y))", "all x.((Jenna(x) & -ClifBar(x)) -> -Taken(x,y))", "all x.((Jenna(x) & -ClifBar(x)) -> -Has(x,ClifBar))", "all x.((Jenna(x) & -TakenClifBar(x)) -> -TakenClifBar(x))", "all x.((Jenna(x) & ClifBar(x)) -> -Has(x,y))", "all x.((Jenna(x) & -ClifBar(x)) -> ShouldNeedToTake(x,y))", "all x.((Jenna(x) & ClifBar(x)) -> -NeededToTake(x,y))", "all x y.((Jenna(x) & ClifBar(y)) -> -Has(x,y))", "all x.(Jenna(x) -> -TakenClifBar(x))", "all x.((Jenna(x) & -ClifBar(x)) -> ShouldNeed(x,y))", "all x.((Jenna(x) & -ClifBar(x)) -> Shouldn'tHave(x,y))", "all x.(Jenna(x) -> -HasClifBar(x))", "all x.((Jenna(x) & -ClifBar(x)) -> ShouldNeedToTake(x,ClifBar))"]}
{"id": "enwn_validation_592", "nl": "Rich deducted points from two students because they submitted the same project.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y) & SubmittedSameProject(x,y)) -> DeductedPoints(x,y))", "all x y.((Student(x) & Student(y) & SubmittedSameProject(x,y)) -> DeductedPointsFrom(x,y))", "all x y z.((Student(x) & Student(y) & Student(z) & SubmittedSameProject(x,y,z)) -> DeductedPoints(x,y,z))", "all x y.((Student(x) & Student(y) & SubmittedSameProject(x,y)) -> DeductsPoints(x,y))", "all x y z.((Student(x) & Student(y) & Student(z) & SubmittedSameProject(x,y,z)) -> DeductedPointsFrom(x,y,z))", "all x y.((Student(x) & Student(y) & SubmittedTheSameProject(x,y)) -> DeductedPoints(x,y))", "all x y.((Student(x) & Student(y) & SubmittedSameProject(y,x)) -> DeductedPoints(x,y))", "all x y z.((Student(x) & Student(y) & Student(z) & SubmittedSameProject(y,z)) -> DeductedPoints(x,y,z))", "all x y z.((Student(x) & Student(y) & Student(z) & SubmittedSameProject(x,y,z)) -> DeductsPoints(x,y,z))", "all x y z.((Rich(x) & Student(y) & Student(z) & SubmittedSameProject(y,z)) -> DeductedPoints(x,y,z))", "all x y z.((Student(x) & Student(y) & Student(z) & SubmittedSameProject(y,z)) -> DeductedPointsFrom(x,y,z))", "all x y z.((Student(x) & Student(y) & Student(z) & SubmittedSameProject(x,z)) -> DeductedPoints(x,y,z))", "all x y z.((Rich(x) & Student(y) & Student(z) & SubmittedSameProject(y,z)) -> DeductedPointsFrom(x,y,z))", "all x y.((Student(x) & Student(y) & SubmittedTheSameProject(x,y)) -> DeductedPointsFrom(x,y))", "all x y.((Student(x) & Student(y) & SubmittedSameProject(y,x)) -> DeductedPointsFrom(x,y))", "all x y z.((Student(x) & Student(y) & Project(z) & SubmittedSameProject(x,y,z)) -> DeductedPoints(x,y,z))"]}
{"id": "enwn_validation_593", "nl": "The project worksheet said that everyone was supposed to do the project on their own.", "fol": "", "prediction": ["all x y.((ProjectWorksheet(x) & Person(y)) -> ShouldDoProjectOnOwn(y,x))", "all x y.((ProjectWorksheet(x) & Employee(y)) -> ShouldDoProjectOnOwn(y,x))", "all x y.((ProjectWorksheet(x) & Person(y)) -> ShouldDoProjectOnOfOwn(y,x))", "all x y z.((ProjectWorksheet(x) & Person(y) & Project(z)) -> ShouldDoOnOfOwn(y,z))", "all x y.((ProjectWorksheet(x) & Everyone(y)) -> ShouldDoProjectOnOwn(y,x))", "all x y.((ProjectWorksheet(x) & Person(y)) -> ShouldDoProjectOnOwn(x,y))", "all x y.((ProjectWorksheet(x) & Employee(y)) -> ShouldDoProjectOnOfOwn(y,x))", "all x.(ProjectWorksheet(x) -> ShouldDoProjectOnOwn(x))", "all x y.((ProjectWorksheet(x) & Everyone(y)) -> ShouldDoProjectOnOfOwn(y,x))", "all x y z.((ProjectWorksheet(x) & Person(y) & Project(z)) -> ShouldDoOnOfOwn(x,y,z))", "all x y z.((ProjectWorksheet(x) & Person(y) & Project(z)) -> ShouldDoOnOwn(y,z))", "all x y z.((ProjectWorksheet(x) & Person(y) & Project(z)) -> ShouldDoOnOfOfOwn(y,z))", "all x y.((ProjectWorksheet(x) & Person(y)) -> ShouldDoOnOfOwn(y,x))", "all x y.((ProjectWorksheet(x) & Person(y)) -> ShouldDoProjectOnOfOwn(x,y))", "all x y.((ProjectWorksheet(x) & Project(y)) -> ShouldDoOnOfOwn(x,y))", "all x y z.((ProjectWorksheet(x) & Employee(y) & Project(z)) -> ShouldDoOnOfOwn(y,z))"]}
{"id": "enwn_validation_594", "nl": "People working independently on a creative task will produce different results.", "fol": "", "prediction": ["all x y.((WorkingIndependently(x) & CreativeTask(y)) -> DifferentResults(x,y))", "all x y.((Person(x) & CreativeTask(y) & WorksIndependently(x,y)) -> ProducesDifferentResults(x,y))", "all x.(WorkingIndependentlyOnCreativeTask(x) -> DifferentResults(x))", "all x y.((Person(x) & CreativeTask(y) & WorksIndependently(x,y)) -> DifferentResults(x))", "all x y.((Person(x) & CreativeTask(y) & WorksIndependently(x,y)) -> DifferentResults(x,y))", "all x y.((WorkingIndependently(x) & CreativeTask(y)) -> ProducesDifferentResults(x,y))", "all x y.((WorkingIndependentlyOnCreativeTask(x) & CreativeTask(y)) -> DifferentResults(x,y))", "all x.((WorkingIndependently(x) & CreativeTask(x)) -> DifferentResults(x))", "all x y.((WorkingIndependent(x) & CreativeTask(y)) -> DifferentResults(x,y))", "all x y.((Person(x) & CreativeTask(y) & WorkingIndependently(x,y)) -> DifferentResults(x))", "all x y.((Person(x) & CreativeTask(y) & WorkingIndependently(x,y)) -> DifferentResults(x,y))", "all x y.((Person(x) & CreativeTask(y) & WorksIndependently(x,y)) -> ProducesDifferentResults(x))", "all x y.((Person(x) & CreativeTask(y) & WorkingIndependently(x,y)) -> ProducesDifferentResults(x,y))", "all x y.((WorkingIndependentlyOnCreativeTask(x) & CreativeTask(y)) -> ProducesDifferentResults(x,y))", "all x y.((People(x) & CreativeTask(y) & WorksIndependently(x,y)) -> ProducesDifferentResults(x,y))", "all x y.((Person(x) & CreativeTask(y)) -> ProducesDifferentResults(x,y))"]}
{"id": "enwn_validation_595", "nl": "A school project is a creative task.", "fol": "", "prediction": ["all x.(SchoolProject(x) -> CreativeTask(x))", "all x.(SchoolProject(x) -> CreativeTask(x))", "all x y.((SchoolProject(x) & School(y)) -> CreativeTask(x))", "all x y.((SchoolProject(x) & CreativeTask(y)) -> CreatedBy(x,y))", "all x.((SchoolProject(x) & CreativeTask(x)) -> CreativeTask(x))", "all x.exists y.(SchoolProject(x) & CreativeTask(y) & CreatedBy(x,y))", "all x.(SchoolProject(x) -> CreativityTask(x))", "all x y.((SchoolProject(x) & School(y)) -> CreativeTask(x,y))", "all x y.((SchoolProject(x) & CreativeTask(y)) -> CreativeTask(x))", "all x y.((SchoolProject(x) & CreativeTask(y)) -> Creates(x,y))", "all x y.((SchoolProject(x) & CreativeTask(y)) -> Creative(x))", "all x y.((SchoolProject(x) & Teacher(y)) -> CreativeTask(x))", "all x.((SchoolProject(x) & CreativeTask(x)) -> Creative(x))", "all x y.((SchoolProject(x) & CreativeTask(y)) -> CreativeTask(x,y))", "all x.((SchoolProject(x) & CreativeTask(x)) -> CreatedBy(x))", "all x y.((SchoolProject(x) & Teacher(y)) -> CreativeTask(x,y))"]}
{"id": "enwn_validation_596", "nl": "Deducting points from a student for violating rules is a valid response.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y) & ViolatesRules(x,y)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(x,y)) -> ValidResponse(x,y))", "all x.((Student(x) & ViolatesRules(x)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(y)) -> ValidResponse(x,y))", "all x y.((Student(x) & Student(y) & ViolatesRules(y,x)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(y,x)) -> ValidResponse(x,y))", "all x y.((Student(x) & Student(y) & ViolatesRules(x,y) & DeductsPoints(x,y)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(x) & DeductsPoints(x,y)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(x)) -> ValidResponse(x,y))", "all x y.((Student(x) & Student(y) & ViolatesRules(y) & DeductsPoints(x,y)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(x,y) & DeductsPoints(x,y)) -> ValidResponse(x,y))", "all x y.((Student(x) & Student(y) & ViolateRules(x,y)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(x,y)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolatesRules(x)) -> ValidResponse(x))", "all x y.((Student(x) & Student(y) & ViolateRules(x,y)) -> ValidResponse(x,y))", "all x y.((Student(x) & Student(y) & ViolatesRules(y)) -> ValidResponse(x))"]}
{"id": "enwn_validation_597", "nl": "People working independently on a school project will produce different results.", "fol": "", "prediction": ["all x y.((WorkingIndependently(x) & SchoolProject(y)) -> DifferentResults(x,y))", "all x y.((Person(x) & SchoolProject(y) & WorksIndependently(x,y)) -> DifferentResults(x,y))", "all x y.((Person(x) & SchoolProject(y) & WorksIndependently(x,y)) -> ProducesDifferentResults(x,y))", "all x y.((WorkingIndependent(x) & SchoolProject(y)) -> DifferentResults(x,y))", "all x y.((WorkingIndependently(x) & SchoolProject(y)) -> ProducesDifferentResults(x,y))", "all x.(WorkingIndependentlyOnSchoolProject(x) -> DifferentResults(x))", "all x y.((Person(x) & SchoolProject(y) & WorksIndependently(x,y)) -> DifferentResults(x))", "all x y.((WorkingIndependentlyOnSchoolProject(x) & SchoolProject(y)) -> DifferentResults(x,y))", "all x y.((WorkingIndependent(x) & SchoolProject(y)) -> ProducesDifferentResults(x,y))", "all x y.((WorkingIndependently(x,y) & SchoolProject(y)) -> DifferentResults(x,y))", "all x y.((WorkingIndependentlyOnSchoolProject(x) & SchoolProject(y)) -> ProducesDifferentResults(x,y))", "all x y.((Person(x) & SchoolProject(y) & WorkingIndependently(x,y)) -> DifferentResults(x,y))", "all x y.((People(x) & SchoolProject(y) & WorksIndependently(x,y)) -> ProducesDifferentResults(x,y))", "all x y.((WorkingIndependent(x,y) & SchoolProject(y)) -> DifferentResults(x,y))", "all x y.((People(x) & SchoolProject(y) & WorksIndependently(x,y)) -> DifferentResults(x,y))", "all x y.((WorkingIndependentOnSchoolProject(x) & SchoolProject(y)) -> DifferentResults(x,y))"]}
{"id": "enwn_validation_598", "nl": "The two students must have worked together if they produced the same project.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y) & ProducedSameProject(x,y)) -> WorkedTogether(x,y))", "all x y.((Student(x) & Student(y) & ProducesSameProject(x,y)) -> WorkedTogether(x,y))", "all x.((Student(x) & Student(x) & SameProject(x)) -> WorkedTogether(x))", "all x y.((Student(x) & Student(y) & ProducedSameProject(x,y)) -> WorkedTogether(x))", "all x y.((Student(x) & Student(y) & ProducedSameProject(x,y)) -> WorksTogether(x,y))", "all x.((Student(x) & Student(x) & ProducedSameProject(x)) -> WorkedTogether(x))", "all x y.((Student(x) & Student(y) & ProducesSameProject(x,y)) -> WorksTogether(x,y))", "all x y.((Student(x) & Student(y) & SameProject(x,y)) -> WorkedTogether(x,y))", "all x y z.((Student(x) & Student(y) & Project(z) & ProducedSameProject(x,y,z)) -> WorkedTogether(x,y,z))", "all x y.((Student(x) & Student(y) & ProducedTheSameProject(x,y)) -> WorkedTogether(x,y))", "all x y.((Student(x) & Student(y) & ProducesSameProject(x,y)) -> WorkedTogether(x))", "all x y.((Student(x) & Student(y) & ProducedSameProject(x,y)) -> WorkedTogether(x,y))", "all x y z.((Student(x) & Student(y) & Project(z) & ProducedSame(x,z)) -> WorkedTogether(x,y,z))", "all x.((Student(x) & SameProject(x)) -> WorkedTogether(x))", "all x y z.((Student(x) & Student(y) & Project(z) & ProducedSame(x,y,z)) -> WorkedTogether(x,y,z))", "all x y.((Student(x) & Student(y) & ProducedSameProject(x,y)) -> WorkingTogether(x,y))"]}
{"id": "enwn_validation_599", "nl": "The two students broke the rules by submitting the same project.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y)) -> BreaksRules(x,y))", "all x y.((Student(x) & Student(y)) -> BreaksRulesBySubmittingSameProject(x,y))", "all x y.((Student(x) & Student(y) & SubmitsSameProject(x,y)) -> BreaksRules(x))", "all x y.((Student(x) & Student(y) & SubmitsSameProject(x,y)) -> BreaksRules(x,y))", "all x y z.((Student(x) & Student(y) & Project(z)) -> BreaksRules(x,y,z))", "all x y.((Student(x) & Student(y) & SubmittedSameProject(x,y)) -> BreaksRules(x))", "all x y.((Student(x) & Student(y) & SubmittedSameProject(x,y)) -> BreaksRules(x,y))", "all x y.((Student(x) & Student(y)) -> (BreaksRules(x,y) & SubmitsSameProject(x,y)))", "all x.((Student(x) & Student(x)) -> BreaksRules(x))", "all x.((Student(x) & Student(x) & SameProject(x)) -> BreaksRules(x))", "all x y.((Student(x) & Student(y)) -> BreaksRulesBySubmittingTheSameProject(x,y))", "all x.((Student(x) & Student(x) & SubmitsSameProject(x)) -> BreaksRules(x))", "all x y z.((Student(x) & Student(y) & Project(z) & Submits(x,z)) -> BreaksRules(x,y,z))", "all x y.((Student(x) & Student(y)) -> (BreaksRules(x,y) & SubmitsSameProject(x)))", "all x y z.((Student(x) & Student(y) & Project(z)) -> BreaksRulesBySubmitting(x,y,z))", "all x.((Student(x) & Student(x)) -> BreaksRulesBySubmittingSameProject(x))"]}
{"id": "enwn_validation_600", "nl": "Rich deducted points from the students for breaking the rules.", "fol": "", "prediction": ["all x y.((Rich(x) & Student(y)) -> DeductedPointsForBreakingRules(x,y))", "all x y.((Student(x) & Student(y) & BreaksRules(x,y)) -> DeductsPoints(x,y))", "all x y z.((Rich(x) & Student(y) & Rule(z)) -> DeductedPointsFor(x,y,z))", "all x y.((Student(x) & Student(y) & BreaksRules(x,y)) -> DeductedPoints(x,y))", "all x y.((Student(x) & Rich(y)) -> DeductedPointsForBreakingRules(y,x))", "all x y.((Rich(x) & Student(y) & BreaksRules(x,y)) -> DeductsPoints(x,y))", "all x y z.((Rich(x) & Student(y) & Rule(z)) -> DeductedPoints(x,y,z))", "all x y z.((Rich(x) & Student(y) & Rule(z)) -> DeductedPointsForBreaking(x,y,z))", "all x y.((Rich(x) & Student(y) & BreaksRules(x,y)) -> DeductedPoints(x,y))", "all x y.((Rich(x) & Student(y)) -> DeductedPoints(x,y))", "all x y z.((Rich(x) & Student(y) & Rule(z) & Breaks(y,z)) -> DeductsPoints(x,y,z))", "all x y.((Rich(x) & Student(y)) -> DeductedPointsForBreachingRules(x,y))", "all x y z.((Rich(x) & Student(y) & Rule(z)) -> DeductedPointsFrom(x,y,z))", "all x y z.((Rich(x) & Student(y) & Rule(z)) -> DeductsPoints(x,y,z))", "all x y.((Rich(x) & Student(y)) -> DeductsPointsForBreakingRules(x,y))", "all x y.((Student(x) & Student(y) & BreaksRules(x,y)) -> DeductsPointsFor(x,y))"]}
{"id": "enwn_validation_601", "nl": "Rich was right to deduct points from the students.", "fol": "", "prediction": ["all x y.((Rich(x) & Student(y)) -> DeductsPoints(x,y))", "all x y.((Rich(x) & Student(y)) -> RightToDeductPoints(x,y))", "all x y z.((Rich(x) & Student(y) & Student(z)) -> DeductsPoints(x,y,z))", "all x y.((Rich(x) & Student(y)) -> DeductPoints(x,y))", "all x y.((Rich(x) & Student(y) & RightToDeductPoints(x,y)) -> RightToDeductPoints(x,y))", "all x y z.((Rich(x) & Student(y) & Student(z)) -> RightToDeductPoints(x,y,z))", "all x.(Rich(x) -> DeductsPointsFromStudents(x))", "all x.(Rich(x) -> RightToDeductPoints(x))", "all x y.((Rich(x) & Student(y)) -> DeductsPointsFrom(x,y))", "all x.(Rich(x) -> DeductPointsFromStudents(x))", "all x.(Rich(x) -> RightToDeductPointsFromStudents(x))", "all x.(Rich(x) -> DeductsPoints(x))", "all x y z.((Rich(x) & Student(y) & Student(z)) -> DeductPoints(x,y,z))", "all x y z.((Rich(x) & Student(y) & Student(z)) -> DeductsPointsFrom(x,y,z))", "all x y.((Rich(x) & Students(y)) -> DeductsPoints(x,y))", "all x y.((Rich(x) & Student(y)) -> RightToDeductPointsFrom(x,y))"]}
{"id": "enwn_validation_602", "nl": "It's okay to sell lost items if you can't find their owner.", "fol": "", "prediction": ["all x.((LostItem(x) & -FindOwner(x)) -> OKToSell(x))", "all x.((LostItem(x) & -FindOwner(x)) -> OkayToSell(x))", "all x.((LostItem(x) & -CanFindOwner(x)) -> OKToSell(x))", "all x.((LostItem(x) & CannotFindOwner(x)) -> OKToSell(x))", "all x.((LostItems(x) & -FindOwner(x)) -> OKToSell(x))", "all x.((SellsLostItems(x) & -FindsOwner(x)) -> OK(x))", "all x.((SellsLostItems(x) & -FindsOwner(x)) -> Okay(x))", "all x.((LostItem(x) & -CanFindOwner(x)) -> OkayToSell(x))", "all x.((LoseItem(x) & -FindOwner(x)) -> OKToSell(x))", "all x.((LostItem(x) & -FindsOwner(x)) -> OKToSell(x))", "all x.((LostItem(x) & CannotFindOwner(x)) -> OkayToSell(x))", "all x.((LoseItems(x) & -FindOwner(x)) -> OKToSell(x))", "all x.((SellLostItems(x) & -FindOwner(x)) -> OK(x))", "all x.((LostItems(x) & -FindOwner(x)) -> OkayToSell(x))", "all x.((SellLostItems(x) & -FindOwner(x)) -> Okay(x))", "all x.((LoseItem(x) & -FindOwner(x)) -> OkayToSell(x))"]}
{"id": "enwn_validation_603", "nl": "Jamie didn't try to find the camera's owner.", "fol": "", "prediction": ["all x.((Jamie(x) & Camera(y)) -> -TryToFindOwner(x,y))", "all x.((Jamie(x) & Camera(y)) -> -TriedToFindOwner(x,y))", "all x y.((Camera(x) & Jamie(y)) -> -TryToFindOwner(y,x))", "all x y.((Jamie(x) & Camera(y)) -> -TryToFindOwner(x,y))", "all x y.((Camera(x) & Jamie(y)) -> -TriedToFindOwner(y,x))", "all x y.((Jamie(x) & Camera(y)) -> -TriedToFindOwner(x,y))", "all x.(Jamie(x) -> -TryToFindOwner(x))", "all x.((Jamie(x) & Camera(y)) -> -TriesToFindOwner(x,y))", "all x.((Jamie(x) & Camera(y)) -> -TryToFollowOwner(x,y))", "all x.((Jamie(x) & Camera(x)) -> -TryToFindOwner(x))", "all x y.((Camera(x) & Jamie(y)) -> -TryToFind(y,x))", "all x.((Jamie(x) & Camera(y)) -> -TryToFind(x,y))", "all x.((Camera(x) & Jamie(x)) -> -TryToFindOwner(x))", "all x.(Jamie(x) -> -TriedToFindOwner(x))", "all x.((Jamie(x) & Camera(y)) -> -TriedToFind(x,y))", "all x y.((Camera(x) & Jamie(y)) -> -TriedToFind(y,x))"]}
{"id": "enwn_validation_604", "nl": "Jamie sold the camera on Ebay.", "fol": "", "prediction": ["all x y.((Jamie(x) & Camera(y)) -> SoldOnEbay(x,y))", "all x.((Jamie(x) & Camera(y)) -> SoldOnEbay(x,y))", "Jamie sold the camera on Ebay.", "all x y.((Camera(x) & Jamie(y)) -> SoldOnEbay(y,x))", "all x y.((Jamie(x) & Camera(y)) -> SellsOnEbay(x,y))", "all x.((Jamie(x) & Camera(y)) -> SellsOnEbay(x,y))", "(SoldOnEbay(Jamie,Camera) & JamieSoldOnEbay(Jamie,Camera))", "all x.((Jamie(x) & Camera(y)) -> SoldOnEbay(x))", "all x y.((Jamie(x) & Camera(y) & SellsOnEbay(x,y)) -> SellsOnEbay(x,y))", "all x.((Jamie(x) & Camera(x)) -> SoldOnEbay(x))", "(SoldOnEbay(Jamie,Camera) -> JamieSoldOnEbay(Jamie,Camera))", "all x y.((Jamie(x) & Camera(y) & Ebay(y)) -> SoldOn(x,y))", "all x.((Jamie(x) & Camcorder(y)) -> SoldOnEbay(x,y))", "all x y.((Jamie(x) & Camera(y)) -> SoldOn(x,y))", "all x y.((Jamie(x) & Camera(y) & SellsOnEbay(x,y)) -> SellsOn(x,y))", "all x y.((Camera(x) & Jamie(y)) -> SoldOnEbay(x,y))"]}
{"id": "enwn_validation_605", "nl": "Losing something means leaving it somewhere accidentally.", "fol": "", "prediction": ["all x y.((Losing(x) & Something(y)) -> LeavesInaccidentally(x,y))", "all x.(Losing(x) -> LeavesSomewhereInaccidentally(x))", "all x y.((Losing(x) & Something(y)) -> Leaves(x,y))", "all x y.((Losing(x) & Something(y)) -> LeavesUnexpectedly(x,y))", "all x y.((Losing(x) & Something(y)) -> LeavesInaccidentally(y,x))", "all x y z.((Losing(x) & Something(y) & Place(z)) -> LeavesInaccidentally(x,y,z))", "all x.((Losing(x) & Something(x)) -> LeavesInaccidentally(x))", "all x.(Losing(x) -> LeavesInaccidentally(x))", "all x y.((Losing(x) & Something(y)) -> LeavesAwayInaccidentally(x,y))", "all x y.((Lose(x) & Something(y)) -> LeavesInaccidentally(x,y))", "all x y z.((Losing(x) & Something(y) & Place(z)) -> LeavesInaccidentally(y,z))", "all x.(Losing(x) -> LeavesAwayInaccidentally(x))", "all x y.((Losing(x) & Something(y)) -> LeavesUnexpectedly(y,x))", "all x y z.((Losing(x) & Something(y) & Place(z)) -> LeavesUnexpectedly(x,y,z))", "all x y.((Losing(x) & Something(y)) -> LeavesSomewhereInaccidentally(x,y))", "all x y.((Losing(x) & Something(y)) -> LeavesAndUnexpectedly(x,y))"]}
{"id": "enwn_validation_606", "nl": "People don't leave valuables in public on purpose.", "fol": "", "prediction": ["all x y.((Person(x) & Valuable(y)) -> -LaysInPublic(x,y))", "all x y.((Person(x) & Valuables(y)) -> -LaysInPublic(x,y))", "all x.((Person(x) & -LeaveValuablesInPublic(x)) -> -LeaveValuablesInPublic(x))", "all x y.((Person(x) & Valuables(y)) -> -LeaveInPublic(x,y))", "all x.((Person(x) & -LaysValuablesInPublic(x)) -> -LaysValuablesOnPurpose(x))", "all x y.((Person(x) & Valuable(y)) -> -LeaveInPublic(x,y))", "all x.((Person(x) & LeavesValuablesInPublic(x)) -> -LaysValuablesOnPurpose(x))", "all x y.((Person(x) & Valuable(y)) -> -LaysInPublicOnPurpose(x,y))", "all x.((People(x) & -LeaveValuablesInPublic(x)) -> -LeaveValuablesInPublic(x))", "all x.((Person(x) & -LaysValuablesInPublic(x)) -> -LaysValuablesInPublic(x))", "all x.((Person(x) & -LeaveValuablesInPublic(x)) -> -LeaveValuablesOnPurpose(x))", "all x y.((Person(x) & Valuables(y)) -> -LaysInPublicOnPurpose(x,y))", "all x y.((Person(x) & Valuable(y)) -> -LeavesInPublic(x,y))", "all x.((People(x) & -LeaveValuablesInPublic(x)) -> -LeaveValuablesOnPurpose(x))", "all x y.((People(x) & Valuables(y)) -> -LaysInPublic(x,y))", "all x.((Person(x) & LeavesValuablesInPublic(x)) -> -LaysValuablesInPublic(x))"]}
{"id": "enwn_validation_607", "nl": "Jamie found a camera sitting on a park bench.", "fol": "", "prediction": ["all x y z.((Jamie(x) & Camera(y) & ParkBenches(z)) -> FoundOn(x,y,z))", "all x y.((Jamie(x) & Camera(y)) -> FoundOnParkBenches(x,y))", "all x y z.((Jamie(x) & Camera(y) & ParkBenches(z)) -> FoundSittingOn(x,y,z))", "all x y.((Jamie(x) & Camera(y)) -> FoundSittingOnParkBenches(x,y))", "all x y.((Jamie(x) & Camera(y) & ParkBenches(z)) -> FoundOn(x,y,z))", "all x y z.((Jamie(x) & Camera(y) & ParkBench(z)) -> FoundOn(x,y,z))", "all x y.((Jamie(x) & Camera(y) & ParkBenches(y)) -> FoundOn(x,y))", "all x y.((Jamie(x) & Camera(y)) -> FoundOnParkBench(x,y))", "all x y.((Jamie(x) & Camera(y) & ParkBenches(x)) -> FoundOn(x,y))", "all x y.((Jamie(x) & Camera(y) & ParkBenches(z)) -> FoundSittingOn(x,y,z))", "all x y z.((Jamie(x) & Camera(y) & ParkBenches(z)) -> Found(x,y,z))", "all x.((Jamie(x) & FoundCamera(x)) -> SittingOnParkBenches(x))", "all x.((Jamie(x) & Camera(y)) -> FoundOnParkBenches(x,y))", "all x y z.((Jamie(x) & Camera(y) & ParkBench(z)) -> FoundSittingOn(x,y,z))", "all x.((Jamie(x) & Camera(x) & ParkBenches(x)) -> FoundOn(x,y))", "all x y.((Jamie(x) & Camera(y)) -> FoundSittingOnParkBench(x,y))"]}
{"id": "enwn_validation_608", "nl": "Cameras don't put themselves on benches.", "fol": "", "prediction": ["all x.(Camera(x) -> -PutsOnBenches(x))", "all x.(Camera(x) -> -PutsOnBench(x))", "all x.(Camera(x) -> -PlacesOnBenches(x))", "all x y.((Camera(x) & Bench(y)) -> -PutsOn(x,y))", "all x y.((Camera(x) & Benches(y)) -> -PutsOn(x,y))", "all x.(Camera(x) -> -PosesOnBenches(x))", "all x.(Camera(x) -> -PutOnBenches(x))", "all x y.((Camera(x) & Bench(y)) -> -PlacesOn(x,y))", "all x y.((Camera(x) & Benches(y)) -> -PlacesOn(x,y))", "all x.(Camera(x) -> (-PutsOnBenches(x)))", "all x y.((Camera(x) & Bench(y)) -> -PosesOn(x,y))", "all x y.((Camera(x) & Benches(y)) -> -PosesOn(x,y))", "all x.(Camera(x) -> -PlacesOnBench(x))", "all x.(Camera(x) -> -StandsOnBenches(x))", "all x.(Camera(x) -> -PutesOnBenches(x))", "all x.(Camera(x) -> -PutsSelfOnBenches(x))"]}
{"id": "enwn_validation_609", "nl": "If someone left a valuable item in public, they lost it.", "fol": "", "prediction": ["all x y.((Person(x) & ValuableItem(y) & LeftInPublic(x,y)) -> Lost(x,y))", "all x y.((Person(x) & ValuableItem(y) & LeftInPublic(x,y)) -> Lost(x))", "all x y.((Person(x) & ValuableItem(y) & LeftInPublic(x,y)) -> LostItem(x,y))", "all x.((Person(x) & LeftValuableItemInPublic(x)) -> LostItem(x))", "all x y.((Person(x) & ValuableItem(y) & LeftInPublic(x,y)) -> LostItem(x))", "all x.((LeavedValuableItem(x) & InPublic(x)) -> LostItem(x))", "all x.(LeavedValuableItemInPublic(x) -> LostItem(x))", "all x.((Person(x) & LeftValuableItem(x) & InPublic(x)) -> LostItem(x))", "all x.((LeavedValuableItemInPublic(x) & LostItem(x)) -> LostItem(x))", "all x.((Person(x) & LeftValuableItem(x) & LeftInPublic(x)) -> LostItem(x))", "all x y.((Person(x) & Item(y) & LeftInPublic(x,y)) -> Lost(x,y))", "all x y.((Person(x) & ValuableItem(y) & LeftInPublic(x)) -> Lost(x,y))", "all x y.((Person(x) & ValueableItem(y) & LeftInPublic(x,y)) -> Lost(x,y))", "all x y.((Person(x) & ValuableItem(y) & LeftInPublic(x,y)) -> Loses(x,y))", "all x.(LeavesValuableItemInPublic(x) -> LostItem(x))", "all x.((LaysValuableItem(x) & InPublic(x)) -> LostItem(x))"]}
{"id": "enwn_validation_610", "nl": "Someone left the camera on the park bench.", "fol": "", "prediction": ["exists x.(Camera(x) & LeftOnParkBenches(x))", "all x y.((Camera(x) & ParkBenches(y)) -> LeftOn(x,y))", "exists x.(Camera(x) & ParkBenches(x))", "exists x y.((Camera(x) & ParkBenches(y)) -> LeftOn(x,y))", "exists x y.(Camera(x) & ParkBenches(y) & LeftOn(x,y))", "all x y z.((Camera(x) & ParkBenches(y) & Camera(z)) -> LeftOn(x,z))", "all x y z.((Camera(x) & ParkBenches(y) & Camera(z)) -> LeftOn(x,y,z))", "all x.((Camera(x) & ParkBenches(x)) -> LeftOn(x,y))", "exists x y.((Camera(x) & ParkBenches(y) & LeftOn(x,y))", "all x y.((Camera(x) & ParkBench(y)) -> LeftOn(x,y))", "exists x.(Camera(x) & LeftOnParkBench(x))", "all x y.((Person(x) & Camera(y)) -> LeftOnParkBenches(x,y))", "exists x y.((Camera(x) & ParkBenches(y) & LeftOn(x,y)))", "all x.((Camera(x) & ParkBenches(x)) -> LeftOn(x,Camera))", "exists x.(Camera(x) & OnParkBenches(x))", "all x y z.((Camera(x) & ParkBenches(y) & Camera(z)) -> LeftOnBenches(x,y,z))"]}
{"id": "enwn_validation_611", "nl": "Someone lost the camera.", "fol": "", "prediction": ["exists x.(Camera(x) & Lost(x))", "exists x.(Person(x) & LostCamera(x))", "exists x.(Camera(x) & Lost(x,Camera))", "all x.(Person(x) -> LostCamera(x))", "all x.(LostCamera(x) -> LostCamera(x))", "exists x.(Past(x) & LostCamera(x))", "all x.(LoseCamera(x) -> LostCamera(x))", "all x.(LoggedCamera(x) -> LostCamera(x))", "exists x.(LossCamera(x))", "all x.(LostCamera(x) -> Camera(x))", "all x.(LosenCamera(x) -> LostCamera(x))", "exists x.(Camera(x) & Lost(x,Camera,Camera))", "exists x.(Camera(x) & Lost(x,y))", "exists x.(LostCamera(x))", "exists x.(LossCamera(x) & Camera(x))", "all x.(LoseCamera(x) -> Camera(x))"]}
{"id": "enwn_validation_612", "nl": "Jamie sold a lost camera.", "fol": "", "prediction": ["all x y.((Jamie(x) & Camera(y)) -> Sold(x,y))", "all x.((Jamie(x) & LostCamera(x)) -> Sold(x,y))", "all x.((Jamie(x) & LostCamera(x)) -> Sold(x))", "all x y.((Jamie(x) & Camera(y) & Lost(y)) -> Sold(x,y))", "all x y z.((Jamie(x) & Camera(y) & Camera(z)) -> Sold(x,y,z))", "all x y.((Jamie(x) & LostCamera(y)) -> Sold(x,y))", "all x.((Jamie(x) & LostCamera(y)) -> Sold(x,y))", "all x y.((Jamie(x) & Camera(y) & Lost(x,y)) -> Sold(x,y))", "all x.((Jamie(x) & Camera(y)) -> Sold(x,y))", "all x y z.((Jamie(x) & Camera(y) & Camera(z) & Lost(y)) -> Sold(x,y,z))", "all x y z.((Jamie(x) & LostCamera(y) & Camera(z)) -> Sold(x,y,z))", "all x y z.((Jamie(x) & Camera(y) & Camera(z)) -> Sold(x,y))", "all x.((James(x) & LostCamera(x)) -> Sold(x,y))", "all x.((Jamie(x) & LostCamera(x)) -> Sells(x,y))", "all x y z.((Jamie(x) & Camera(y) & Lost(z)) -> Sold(x,y,z))", "all x y.((Jamie(x) & Camera(y)) -> Sells(x,y))"]}
{"id": "enwn_validation_613", "nl": "Jamie sold a lost camera without trying to find its owner first.", "fol": "", "prediction": ["all x y.((Jamie(x) & Camera(y) & Lost(y)) -> SoldWithoutFindingOwner(x,y))", "all x y.((Jamie(x) & Camera(y) & Lost(y)) -> Sold(x,y))", "all x.((Jamie(x) & LostCamera(x)) -> SoldWithoutFindingOwner(x))", "all x y.((Jamie(x) & Camera(y)) -> (Sold(x,y) & Lost(y)))", "all x y.((Jamie(x) & Camera(y) & Lost(y)) -> SoldWithoutFindingOwnerFirst(x,y))", "all x y.((Jamie(x) & LostCamera(y)) -> SoldWithoutFindingOwner(x,y))", "all x y.((Jamie(x) & Camera(y) & Lost(x,y)) -> SoldWithoutFindingOwner(x,y))", "all x y z.((Jamie(x) & Camera(y) & Owner(z) & Lost(y)) -> Sold(x,y,z))", "all x y z.((Jamie(x) & Camera(y) & Owner(z)) -> Sold(x,y,z))", "all x y.((Jamie(x) & Camera(y) & Lost(x,y)) -> Sold(x,y))", "all x.((Jamie(x) & LostCamera(x)) -> SoldWithoutFindingOwnerFirst(x))", "all x y.((Jamie(x) & Camera(y)) -> SoldWithoutFindingOwner(x,y))", "all x y.((Jamie(x) & Camera(y)) -> (Sold(x,y) & Lost(y) & -FindOwner(y)))", "all x y z.((Jamie(x) & LostCamera(y) & Owner(z)) -> Sold(x,y,z))", "all x y.((Jamie(x) & Camera(y)) -> (Sold(x,y) & Lost(y) & -FindOwnerFirst(y)))", "all x y.((Jamie(x) & Camera(y)) -> (Sold(x,y) & Lost(y) & -FindOwnerFirst(x,y)))"]}
{"id": "enwn_validation_614", "nl": "Jamie should have tried to find the camera's owner before selling it.", "fol": "", "prediction": ["all x y.((Camera(x) & Jamie(y)) -> (TriedToFindOwner(y,x) & Sells(y,x)))", "all x y.((Camera(x) & Jamie(y)) -> (TriedToFindOwner(y,x) & Selling(y,x)))", "all x.((Jamie(x) & Camera(y)) -> (TriedToFindOwner(x,y) & Sells(x,y)))", "all x y.((Camera(x) & Jamie(y)) -> (TriedToFindOwner(y,x) & BeforeSelling(y,x)))", "all x.((Jamie(x) & Camera(y)) -> ShouldTriedToFindOwner(x,y))", "all x y.((Camera(x) & Jamie(y)) -> ShouldTriedToFindOwner(y,x))", "all x y.((Camera(x) & Jamie(y)) -> ShouldTryToFindOwner(y,x))", "all x y.((Camera(x) & Jamie(y)) -> (TriedToFindOwner(y,x) & Sell(y,x)))", "all x y.((Jamie(x) & Camera(y)) -> (TriedToFindOwner(x,y) & Sells(x,y)))", "all x y.((Camera(x) & Camera(y)) -> (TriedToFindOwner(x,y) & Sells(x,y)))", "all x.((Jamie(x) & Camera(y)) -> (TriedToFindOwner(x,y) & Selling(x,y)))", "all x y.((Camera(x) & Jamie(y)) -> (TriedToFindOwner(y,x) & -Sold(y,x)))", "all x y.((Camera(x) & Jamie(y)) -> ShouldTriedToFindOwnerBeforeSelling(y,x))", "all x y.((Camera(x) & Jamie(y)) -> ShouldTryToFindOwnerBeforeSelling(y,x))", "all x.((Jamie(x) & Camera(y)) -> ShouldTriedToFindOwnerBeforeSelling(x,y))", "all x.((Jamie(x) & Camera(y)) -> ShouldTryToFindOwner(x,y))"]}
{"id": "enwn_validation_615", "nl": "Removing bad players from a competitive sports team because they are unskilled is okay.", "fol": "", "prediction": ["all x.((BadPlayers(x) & Unskilled(x)) -> OK(x))", "all x.((BadPlayers(x) & Unskilled(x)) -> Okay(x))", "all x y.((BadPlayer(x) & CompetitiveSportsTeam(y) & Unskilled(x)) -> OK(x))", "all x y.((BadPlayers(x) & CompetitiveSportsTeam(y) & Unskilled(x)) -> OK(x))", "all x y.((BadPlayer(x) & CompetitiveSportsTeam(y) & Unskilled(x)) -> Okay(x))", "all x y.((BadPlayers(x) & CompetitiveSportsTeam(y) & Unskilled(x)) -> Okay(x))", "all x.((BadPlayers(x) & -Skilled(x)) -> OK(x))", "all x.((BadPlayers(x) & -Skilled(x)) -> Okay(x))", "all x.((BadPlayers(x) & CompetitiveSportsTeam(x) & Unskilled(x)) -> OK(x))", "all x.((BadPlayers(x) & CompetitiveSportsTeam(x) & Unskilled(x)) -> Okay(x))", "all x y.((BadPlayer(x) & CompetitiveSportsTeam(y) & UnSkilled(x)) -> OK(x))", "all x y.((BadPlayers(x) & CompetitiveSportsTeam(y) & UnSkilled(x)) -> OK(x))", "all x y.((CompetitiveSportsTeam(x) & BadPlayers(y) & Unskilled(y)) -> Okay(x))", "all x y.((CompetitiveSportsTeam(x) & BadPlayers(y) & Unskilled(y)) -> OK(x))", "all x.((BadPlayers(x) & UnSkilled(x)) -> OK(x))", "all x y.((BadPlayer(x) & CompetitiveSportsTeam(y) & UnSkilled(x)) -> Okay(x))"]}
{"id": "enwn_validation_616", "nl": "A player performing poorly in a single game is not conclusive evidence that they are unskilled.", "fol": "", "prediction": ["all x.((Player(x) & PerformsPoorlyInSingleGame(x)) -> -ConclusiveEvidence(x))", "all x y.((Player(x) & SingleGame(y) & PerformsPoorly(x,y)) -> -ConclusiveEvidence(x,y))", "all x.((Player(x) & PerformsPoorly(x) & SingleGame(x)) -> -ConclusiveEvidence(x))", "all x.((Player(x) & PerformsPoorlyInSingleGame(x)) -> -Unskilled(x))", "all x.((Player(x) & PerformsPoorlyInSingleGame(x)) -> -UnskilledEvidence(x))", "all x.((Player(x) & PerformsPoorly(x) & SingleGame(x)) -> -Unskilled(x))", "all x.((Player(x) & PerformsPoorly(x) & SingleGame(x)) -> -UnskilledEvidence(x))", "all x y.((Player(x) & SingleGame(y) & PerformsPoorly(x,y)) -> -Unskilled(x))", "all x y.((Player(x) & SingleGame(y) & PerformsPoorly(x,y)) -> -ConclusiveEvidence(x))", "all x.((Player(x) & PerformsPoorlyInSingleGame(x)) -> -ConclusiveEvidenceOfUnskilled(x))", "all x y.((Player(x) & SingleGame(y) & PerformsPoorly(x,y)) -> -UnskilledEvidence(x))", "all x.((Player(x) & PerformsPoorly(x) & SingleGame(x)) -> -ConclusiveEvidenceOfUnskilled(x))", "all x.((Player(x) & PerformsPoorInSingleGame(x)) -> -ConclusiveEvidence(x))", "all x.((Player(x) & PerformsPoorlyInSingleGame(x)) -> -ConclusiveEvidenceUnskilled(x))", "all x.((Player(x) & PerformsPoorly(x) & SingleGame(x)) -> -ConclusiveEvidenceUnskilled(x))", "all x.((Player(x) & PerformsPoorlyInSingleGame(x)) -> -ConclusiveEvidenceSkilled(x))"]}
{"id": "enwn_validation_617", "nl": "The other players on Cindy's soccer team voted to kick her off the team because she let three goals through in a playoff game.", "fol": "", "prediction": ["all x y.((Player(x) & SoccerTeam(y) & Cindy(x)) -> VotedToKickOff(x,y))", "all x y.((Player(x) & SoccerTeam(y) & Cindy(x,y)) -> VotedToKickOff(x,y))", "all x y z.((Player(x) & SoccerTeam(y) & Cindy(z) & LetsGoalsThrough(x,y,z)) -> KicksOff(x,y,z))", "all x y.((Player(x) & Player(y) & OnCindysSoccerTeam(x,y)) -> VotedToKickCindyOffTeam(x,y))", "all x y.((Player(x) & Player(y) & OnCindysSoccerTeam(x,y)) -> VotedToKickSheOffTeam(x,y))", "all x y z.((Player(x) & SoccerTeam(y) & Cindy(z) & LetGoalsThrough(x,y,z)) -> VotedToKickOff(x,y,z))", "all x y z.((Player(x) & SoccerTeam(y) & Cindy(z) & LetGoalsThrough(x,y,z)) -> KickedOff(x,y,z))", "all x y z.((Player(x) & SoccerTeam(y) & Cindy(z) & LetsThreeGoalsThrough(x,y,z)) -> KicksOff(x,y,z))", "all x y.((Player(x) & Player(y) & OnSoccerTeam(x,y)) -> VotedToKickCindyOffTeam(x,y))", "all x y z.((Player(x) & SoccerTeam(y) & Cindy(z) & LetsGoalsThrough(x,y,z)) -> VotedToKickOff(x,y,z))", "all x y.((Player(x) & Player(y) & OnCindysSoccerTeam(x,y)) -> VotedToKickOffTeam(x,y))", "all x y.((Player(x) & Player(y) & OnCindysSoccerTeam(x,y)) -> VotedToKickOff(x,y))", "all x y z.((Player(x) & SoccerTeam(y) & Cindy(z) & LetsThreeGoals(x,y,z)) -> KicksOff(x,y,z))", "all x y.((Player(x) & Player(y) & CindysSoccerTeam(x)) -> VotedToKickOff(x,y))", "all x y z.((Player(x) & SoccerTeam(y) & Cindy(z) & LetsGoalsThrough(x,y,z)) -> KicksOff(x,y))", "all x y.((Player(x) & Player(y) & OnSoccerTeam(x,y)) -> VotedToKickOff(x,y))"]}
{"id": "enwn_validation_618", "nl": "A goalie's performance is reflected by the number of goals they let through.", "fol": "", "prediction": ["all x.((Goalie(x) & NumberOfGoals(x)) -> ReflectsPerformance(x))", "all x.((Goalie(x) & NumberOfGoals(x)) -> ReflectedPerformance(x))", "all x y.((Goalie(x) & NumberOfGoals(y)) -> ReflectsPerformance(x,y))", "all x.(Goalie(x) -> NumberOfGoals(x))", "all x y.((Goalie(x) & Goal(y) & LetsThrough(x,y)) -> ReflectsPerformance(x,y))", "all x y.((Goalie(x) & NumberOfGoals(y)) -> ReflectedPerformance(x,y))", "all x y.((Goalie(x) & Goal(y)) -> ReflectsPerformance(x,y))", "all x.((Goalie(x) & NumberOfGoals(x)) -> PerformanceReflected(x))", "all x y.((Goalie(x) & Goal(y)) -> ReflectedBy(x,y))", "all x.((Goalie(x) & NumberOfGoals(x)) -> ReflectsPerformance(x))", "all x y.((Goalie(x) & Goal(y)) -> LetsThrough(x,y))", "all x.((Goalie(x) & NumberOfGoals(x)) -> ReflectedPerformance(x))", "all x.((Goalie(x) & NumberOfGoals(x)) -> PerformanceReflectedBy(x,y))", "all x y.((Goalie(x) & Goal(y) & LetsThrough(x,y)) -> ReflectedPerformance(x,y))", "all x y z.((Goalie(x) & Goal(y) & Goal(z)) -> ReflectsPerformance(x,y,z))", "all x y.((Goalie(x) & Goal(y)) -> ReflectsPerformance(x,y))"]}
{"id": "enwn_validation_619", "nl": "Cindy is a goalie.", "fol": "", "prediction": ["all x.(Cindy(x) -> Goalie(x))", "all x.((Cindy(x) & Goalie(x)) -> Goalie(x))", "all x.(Goalie(x) -> Cindy(x))", "(Goalie(Cindy) | Goalie(Cindy)))", "all x.((Cindy(x) & Goalie(x)) -> Is(x,y))", "(Goalie(Cindy) & -Goalie(Cindy))", "all x.((Cindy(x) & Goalie(x)) -> -Goalie(x))", "(Goalie(Cindy) & Goalie(Cindy))", "exists x.(Cindy(x) & Goalie(x))", "exists x.(Goalie(x) & Cindy(x))", "all x y.((Cindy(x) & Goalie(y)) -> Goalie(x))", "(Goalie(Cindy) | Goalie(Cindy))", "all x y.((Cindy(x) & Goalie(y)) -> Goalie(x,y))", "all x.((Cindy(x) & Goalie(x)) -> Has(x,y))", "All x.(Cindy(x) -> Goalie(x))", "(Goalie(Cindy) -> Goalie(Cindy))"]}
{"id": "enwn_validation_620", "nl": "A player's performance in one game isn't enough of a reason to remove them from a team.", "fol": "", "prediction": ["all x y.((Player(x) & Game(y) & PerformanceIn(x,y)) -> -SufferingRightToRemove(x,y))", "all x y.((Player(x) & Team(y) & PerformanceInOneGame(x,y)) -> -EnoughToRemove(x,y))", "all x y.((Player(x) & Game(y) & PerformanceIn(x,y)) -> -EnoughToRemoveFromTeam(x,y))", "all x y.((Player(x) & Game(y) & PerformanceIn(x,y)) -> -EnoughToRemove(x,y))", "all x y.((Player(x) & Game(y) & PerformanceIn(x,y)) -> -SufferingRightToRemoveFromTeam(x,y))", "all x y.((Player(x) & Game(y) & PerformanceIn(x,y)) -> -EnoughRightToRemove(x,y))", "all x y.((Player(x) & Team(y) & PerformanceInOneGame(x,y)) -> -EnoughRightToRemove(x,y))", "all x y.((Player(x) & Team(y) & PerformanceInOneGame(x,y)) -> -SufferingRightToRemove(x,y))", "all x y z.((Player(x) & Game(y) & Team(z) & PerformanceInOneGame(x,y)) -> -EnoughToRemove(x,z))", "all x y z.((Player(x) & Game(y) & Team(z) & PerformanceInOneGame(x,y)) -> -SufferingRightToRemove(x,z))", "all x y.((Player(x) & Team(y)) -> PerformanceInOneGame(x,y))", "all x y.((Player(x) & Game(y)) -> -EnoughRightToRemove(x,y))", "all x y.((Player(x) & Game(y) & PerformanceIn(x,y)) -> -EnoughRightToRemoveFromTeam(x,y))", "all x y z.((Player(x) & Game(y) & Team(z) & PerformanceInOneGame(x,y)) -> -EnoughRightToRemove(x,z))", "all x y z.((Player(x) & Game(y) & Team(z) & PerformsIn(x,y)) -> -EnoughToRemove(x,z))", "all x y z.((Player(x) & Game(y) & Team(z) & PerformanceIn(x,y)) -> -SufferingRightToRemove(x,z))"]}
{"id": "enwn_validation_621", "nl": "The number of goals Cindy let through is a reflection of her performance.", "fol": "", "prediction": ["all x.((Goals(x) & LetThrough(x)) -> ReflectsPerformance(x))", "all x.((Goals(x) & CindyLetsThrough(x)) -> ReflectsPerformance(x))", "all x.((Goals(x) & CindyLetThrough(x)) -> ReflectsPerformance(x))", "all x.((Goals(x) & LetThrough(x)) -> ReflectionOfPerformance(x))", "all x.((Goals(x) & CindyLetsThrough(x)) -> ReflectionOfPerformance(x))", "all x.((Cindy(x) & NumberOfGoals(x)) -> ReflectsPerformance(x))", "all x y.((Goals(x) & Cindy(y) & LetThrough(y,x)) -> ReflectsPerformance(y,x))", "all x.((Goals(x,Cindy) & LetThrough(x,Cindy)) -> ReflectsPerformance(x))", "all x y.((Goals(x) & Cindy(y) & LetThrough(y,x)) -> ReflectsPerformance(y))", "all x.((Goals(x) & CindyLetThrough(x)) -> ReflectionOfPerformance(x))", "all x y.((Goals(x) & Cindy(y) & LetThrough(y,x)) -> ReflectsPerformance(x,y))", "all x.((Goals(x) & CindyLeadsThrough(x)) -> ReflectsPerformance(x))", "all x.((Goals(x) & Cindy(x)) -> ReflectsPerformance(x))", "all x.((Goals(x,Cindy) & LetThrough(x)) -> ReflectsPerformance(x))", "all x.((Goal(x) & LetsThrough(x)) -> ReflectsPerformance(x))", "all x.((Goal(x) & LetThrough(x)) -> ReflectsPerformance(x))"]}
{"id": "enwn_validation_622", "nl": "The other players kicked Cindy off of the team based on her performance in a single game.", "fol": "", "prediction": ["all x y.((Player(x) & Player(y)) -> KickedCindyOffTeam(x,y))", "all x y.((Player(x) & Cindy(y)) -> KickedOffTeam(x,y))", "all x y z.((Player(x) & Cindy(y) & Team(z) & PerformanceInSingleGame(y,z)) -> KickedOff(x,y,z))", "all x y.((Player(x) & Player(y) & Cindy(y)) -> KickedOffTeam(x,y))", "all x y z.((Player(x) & Cindy(y) & Team(z) & PerformanceInSingleGame(y,z)) -> KickedOff(y,z))", "all x y z.((Player(x) & Player(y) & Cindy(z) & PerformanceInSingleGame(z)) -> KickedOffTeam(x,y,z))", "all x y z.((Player(x) & Player(y) & Cindy(z) & SingleGame(z)) -> KickedOffTeam(x,z))", "all x y.((Player(x) & Player(y)) -> KickedOffTeam(x,y))", "all x y z.((Player(x) & Player(y) & Cindy(z)) -> KickedOffTeam(x,z))", "all x y z.((Player(x) & Player(y) & Cindy(z) & PerformanceInSingleGame(z)) -> KickedOffTeam(x,z))", "all x y.((Player(x) & Player(y) & Cindy(x)) -> KickedOffTeam(x,y))", "all x y.((Player(x) & Player(y)) -> KickedCindyOff(x,y))", "all x y z.((Player(x) & Player(y) & Cindy(z) & SingleGame(z)) -> KickedOffTeam(x,y,z))", "all x y.((Player(x) & Player(y)) -> KicksCindyOffTeam(x,y))", "all x y z.((Player(x) & Cindy(y) & Team(z)) -> KickedOff(x,y,z))", "all x y.((Player(x) & Player(y)) -> kickedCindyOffTeam(x,y))"]}
{"id": "enwn_validation_623", "nl": "The other players shouldn't have kicked Cindy off the team.", "fol": "", "prediction": ["all x y.((Player(x) & Player(y)) -> -KickedCindyOffTeam(x,y))", "all x.((Player(x) & -KickedCindy(x)) -> -KickedCindy(x))", "all x.((Player(x) & -KickedCindyOffTeam(x)) -> -KickedCindyOffTeam(x))", "all x.((Player(x) & Cindy(y)) -> -KickedOffTeam(x,y))", "all x y.((Player(x) & Player(y)) -> -KickedCindy(x,y))", "all x y.((Player(x) & Cindy(y)) -> -KickedOffTeam(x,y))", "all x.((Player(x) & Player(y)) -> -KickedCindyOffTeam(x,y))", "all x.((Player(x) & Cindy(x)) -> -KickedOffTeam(x))", "all x.((Player(x) & -KickedCindy(x)) -> -KickedCindyOffTeam(x))", "all x.((Player(x) & -KickedCindyOffTeam(x)) -> -CindyKickedOffTeam(x))", "all x.((Player(x) & Player(x)) -> -KickedCindyOffTeam(x))", "all x y z.((Player(x) & Player(y) & Cindy(z)) -> -KickedOffTeam(x,y,z))", "all x.((Player(x) & -KickedCindyOffTeam(x)) -> -KickedCindy(x))", "all x.((Player(x) & -KickedCindy(x)) -> -CindyKickedOffTeam(x))", "all x y.((Player(x) & Player(y) & Cindy(y)) -> -KickedOffTeam(x,y))", "all x.((Player(x) & -KickedCindy(x)) -> -CindyKicked(x))"]}
{"id": "enwn_validation_624", "nl": "You should not discriminate against people on the basis of sexuality.", "fol": "", "prediction": ["all x.((Person(x) & -DiscriminateOnSexuality(x)) -> -DiscriminateOnSexuality(x))", "all x.((Person(x) & -DiscriminateOnBaseOfSexuality(x)) -> -DiscriminateOnBaseOfSexuality(x))", "all x.((People(x) & -DiscriminateOnSexuality(x)) -> -DiscriminateOnSexuality(x))", "all x.((Person(x) & -DiscriminateOnBaseOfSexuality(x)) -> -DiscriminateOnBaseOfSexuality(x))", "all x.((People(x) & -DiscriminateOnBaseOfSexuality(x)) -> -DiscriminateOnBaseOfSexuality(x))", "all x.((Person(x) & -DiscriminateOnBasicOfSexuality(x)) -> -DiscriminateOnBasicOfSexuality(x))", "all x.((Person(x) & -DiscriminateBasedOnSexuality(x)) -> -DiscriminateBasedOnSexuality(x))", "all x.((Person(x) & -DiscriminateOnBaseOfSexuality(x)) -> -DiscriminateOnBaseOfSexuality(x))", "all x.((Person(x) & -DiscriminateOnBaseOfSexuality(x)) -> -DiscriminateOnBasicOfSexuality(x))", "all x.((Person(x) & -DiscriminateOnSexuality(x)) -> -DiscriminateOnSexuality(x))", "all x.((Person(x) & -DiscriminatesOnSexuality(x)) -> -DiscriminatesOnSexuality(x))", "all x.((People(x) & -DiscriminateOnBaseOfSexuality(x)) -> -DiscriminateOnBaseOfSexuality(x))", "all x.((Person(x) & -DiscriminateOnSexuality(x)) -> -DiscriminateOnSexuality(x))", "all x y.((Person(x) & Person(y)) -> -DiscriminateOnBaseOfSexuality(x,y))", "all x.((Person(x) & -DiscriminateOnBaseOfSexuality(x)) -> -DiscriminateOnSexuality(x))", "all x.((People(x) & -DiscriminateOnBaseOfSexuality(x)) -> -DiscriminateOnBaseOfSexuality(x))"]}
{"id": "enwn_validation_625", "nl": "Doing detrimental things to someone because of their identity is discrimination.", "fol": "", "prediction": ["all x y.((DoesDetrimentalThings(x) & Person(y) & BecauseOfIdentity(x,y)) -> Discrimination(x))", "all x y.((DoingDetrimentalThings(x) & Person(y) & BecauseOfIdentity(x,y)) -> Discrimination(x))", "all x y.((DoesDiscrimination(x) & Person(y) & BecauseOfIdentity(y,x)) -> Discrimination(x))", "all x y.((DoesDiscrimination(x) & Person(y) & BecauseOfIdentity(x,y)) -> Discrimination(x))", "all x y.((DoesDetrimentalThings(x,y) & Person(y) & BecauseOfIdentity(x,y)) -> Discrimination(x))", "all x y.((DoesDefeitfulThings(x) & Person(y) & BecauseOfIdentity(x,y)) -> Discrimination(x))", "all x y.((DoesDiscrimination(x) & Person(y) & BecauseOfIdentity(y)) -> Discrimination(x))", "all x y.((DoingDetrimentalThings(x) & Person(y) & Identity(y)) -> Discrimination(x))", "all x y.((DoesDetrimentalThings(x) & Person(y) & BecauseOfIdentity(y)) -> Discrimination(x))", "all x y.((DoingDetrimentalThings(x) & Person(y) & Identity(y)) -> Discrimination(x))", "all x.((DoingDetrimentalThings(x) & Person(x) & Identity(x)) -> Discrimination(x))", "all x.((DoingDetrimentalThings(x) & Identity(x)) -> Discrimination(x))", "all x y.((DoesDetrimentalThings(x) & Person(y) & BecauseOfIdentity(y,x)) -> Discrimination(x))", "all x.((DoingDetrimentalThings(x) & Person(x) & Identity(x)) -> Discrimination(x))", "all x y.((DoingDetrimentalThings(x) & Person(y) & Identity(y)) -> Discrimination(x,y))", "all x y.((DoesDefeitfulThings(x) & Person(y) & BecauseOfIdentity(y)) -> Discrimination(x))"]}
{"id": "enwn_validation_626", "nl": "Removing someone from your will is detrimental to them.", "fol": "", "prediction": ["all x y.((Removes(x,y) & Person(y)) -> DetrimentalTo(x,y))", "all x y.((Person(x) & Will(y)) -> DetrimentalTo(x,y))", "all x.(RemovesPersonFromWill(x) -> DetrimentalToPerson(x))", "all x y.((Person(x) & Will(y) & RemovedFrom(x,y)) -> DetrimentalTo(x,y))", "all x y.((RemovesFromWill(x,y) & Person(y)) -> DetrimentalTo(x,y))", "all x.(RemovesFromWill(x) -> DetrimentalToPerson(x))", "all x y.((Removes(x,y) & Person(y)) -> DetrimentalTo(y,x))", "all x y z.((Person(x) & Will(y) & Will(z)) -> DetrimentalTo(x,y,z))", "all x y.((Removes(x,y) & Person(y)) -> DelirableTo(x,y))", "all x y.((Remove(x,y) & Person(y)) -> DetrimentalTo(x,y))", "all x y.((RemovesFromWill(x) & Person(y)) -> DetrimentalTo(x,y))", "all x y.((RemovesFromWill(x,y) & Person(y)) -> DetrimentalTo(y,x))", "all x.((Removes(x,y) & Person(y)) -> DetrimentalTo(x,y))", "all x y.((Person(x) & Will(y)) -> Detrimental(x,y))", "all x y.((Removes(x,y) & Person(y)) -> DelayedTo(x,y))", "all x y.((Person(x) & Will(y) & RemovedFrom(x,y)) -> DelirableTo(x,y))"]}
{"id": "enwn_validation_627", "nl": "Martin's father removed Martin from his will because Martin came out as gay.", "fol": "", "prediction": ["all x y.((Martin(x) & Father(y)) -> RemovedFromWill(x,y))", "all x y.((Martin(x) & Father(y) & CameOutAsGay(x,y)) -> RemovedFromWill(x,y))", "all x y z.((Martin(x) & Father(y) & Martin(z) & CameOutAsGay(x,z)) -> RemovedFromWill(y,z))", "all x y z.((Martin(x) & Father(y) & Martin(z)) -> RemovedFromWill(y,z))", "all x y.((Martin(x) & Father(y) & CameOutAsGay(x,y)) -> RemovedFromWill(y,x))", "all x y z.((Martin(x) & Father(y) & Martin(z) & CameOutAsGay(z)) -> RemovedFromWill(y,z))", "all x y.((Martin(x) & Father(y)) -> RemovedFromWill(y,x))", "all x y.((Martin(x) & Father(y) & CameOutAsGay(y,x)) -> RemovedFromWill(x,y))", "all x y z.((Martin(x) & Father(y) & Martin(z) & CameOutAsGay(z,x)) -> RemovedFromWill(y,z))", "all x y.((Martin(x) & Father(y) & CameOutAsGay(y)) -> RemovedFromWill(x,y))", "all x y z.((Martin(x) & Father(y) & Martin(z) & ComesOutAsGay(x,z)) -> RemovedFromWill(y,z))", "all x y z.((Martin(x) & Father(y) & Martin(z)) -> RemovedFromWill(x,y,z))", "all x y z.((Martin(x) & Father(y) & Martin(z) & CameOutAsGay(z)) -> RemovedFromWill(x,y,z))", "all x y z.((Martin(x) & Father(y) & Martin(z) & CameOutAsGay(x,z)) -> RemovedFromWill(x,y,z))", "all x y.((Martin(x) & Father(y)) -> RemovedMartinFromWill(x,y))", "all x y z.((Martin(x) & Father(y) & Martin(z) & CameOutAsGay(x,y,z)) -> RemovedFromWill(y,z))"]}
{"id": "enwn_validation_628", "nl": "You should not do something detrimental to someone because of their sexuality.", "fol": "", "prediction": ["all x y.((Disadvantage(x) & Person(y) & Sexuality(y)) -> -Disadvantage(x,y))", "all x y.((Person(x) & Sexuality(y)) -> -Damage(x,y))", "all x y.((Sexuality(x) & Person(y)) -> -Damage(x,y))", "all x y.((Person(x) & Sexuality(y)) -> -Detrimental(x,y))", "all x y.(((Person(x) & Sexuality(y)) -> -Damage(x,y))", "all x y.((Person(x) & Sexuality(y)) -> -Disadvant(x,y))", "all x y.((Person(x) & Sexuality(y)) -> -Disadvantageful(x,y))", "all x y.((Person(x) & Sexuality(y)) -> -Defeitful(x,y))", "all x y.((Person(x) & Sexuality(y)) -> -Discriminatory(x,y))", "all x y.((Person(x) & Sexuality(y)) -> -Disastrous(x,y))", "all x y z.((Person(x) & Sexuality(y) & Sexuality(z)) -> -Damage(x,y,z))", "all x y.((Sexuality(x) & Person(y)) -> -Disadvantageful(x,y))", "all x y.((Sexuality(x) & Person(y)) -> -Detrimental(x,y))", "all x y.((Person(x) & Sexuality(y)) -> -Disadvantageous(x,y))", "all x y z.((Person(x) & Sexuality(y) & Sexuality(z)) -> -Detrimental(x,y,z))", "all x y z.((Person(x) & Sexuality(y) & Sexuality(z)) -> -DetrimentalTo(x,y,z))"]}
{"id": "enwn_validation_629", "nl": "You should not remove someone from your will because of their sexuality.", "fol": "", "prediction": ["all x y.((Person(x) & Sexuality(y)) -> -RemovesFromWill(x,y))", "all x.((Person(x) & -Sexuality(x)) -> -RemovesFromWill(x))", "all x y.((Sexuality(x) & Person(y)) -> -RemovesFromWill(x,y))", "all x y.((Person(x) & Sexuality(y)) -> -Remove(x,y))", "all x y.((Sexual(x) & Person(y)) -> -RemovesFromWill(x,y))", "all x.((Person(x) & -Sexuality(x)) -> -RemoveFromWill(x))", "all x y.((Person(x) & Will(y) & Sexuality(y)) -> -Removes(x,y))", "all x y.((Person(x) & Will(y) & Sexuality(y)) -> -Remove(x,y))", "all x y.((Sexuality(x) & Person(y)) -> -Remove(x,y))", "all x.((Person(x) & -Sexuality(x)) -> -Remove(x,y))", "all x.((Person(x) & Sexuality(x)) -> -RemovesFromWill(x))", "all x y.((Person(x) & Sexuality(y)) -> -RemoveFromWill(x,y))", "all x y.((Person(x) & Will(y) & Sexuality(y)) -> -RemovesFrom(x,y))", "all x.((Person(x) & -RemovesFromWill(x)) -> Sexuality(x))", "all x y.((Person(x) & Sexuality(y)) -> -Removes(x,y))", "all x.((Person(x) & -Sexuality(x)) -> RemovesFromWill(x))"]}
{"id": "enwn_validation_630", "nl": "Martin's father should not have removed Martin from his will.", "fol": "", "prediction": ["all x y.((Martin(x) & Father(y)) -> -RemovedFromWill(y,x))", "all x y.((Martin(x) & Father(y)) -> -RemovedFromWill(x,y))", "all x.((Martin(x) & Father(x)) -> -RemovedFromWill(x,Martin))", "all x.((Father(x) & Martin(x)) -> -RemovedFromWill(x,Martin))", "all x.((Father(x) & Martin(y)) -> -RemovedFromWill(x,y))", "all x.((MartinsFather(x) & -RemovedFromWill(x,Martin)) -> -RemovedFromWill(x,Martin))", "all x.((MartinsFather(x) & -RemovedMartinFromWill(x)) -> -RemovedMartinFromWill(x))", "all x y.((Martin(x) & Father(y)) -> -RemovedMartinFromWill(y,x))", "all x y.((Martin(x) & Father(y) & -RemovedFromWill(y,x)) -> -RemovedFromWill(y,x))", "all x y.((Martin(x) & Father(y)) -> -RemovedMartinFromWill(x,y))", "all x.((Martin(x) & Father(x)) -> -RemovedFromWill(x))", "Martin's father should not have removed Martin from his will.", "all x.((Martin(x) & Father(x)) -> -RemovedMartinFromWill(x))", "all x y.((Martin(x) & Father(y) & -RemovedFromWill(y,x)) -> -RemovedFromWill(x,y))", "all x.(MartinsFather(x) -> -RemovedMartinFromWill(x))", "all x y.((Martin(x) & Father(y)) -> -Removed(y,x))"]}
{"id": "enwn_validation_631", "nl": "Elaine slapped her brother because he ate the last two pudding cups.", "fol": "", "prediction": ["all x y.((Elaine(x) & Brother(y) & EatsPuddingCups(y,2)) -> Slapped(x,y))", "all x y z.((Elaine(x) & Brother(y) & PuddingCup(z)) -> Slapped(x,y,z))", "all x y.((Elaine(x) & Brother(y) & EatsPuddingCups(x,y)) -> Slapped(x,y))", "all x y z.((Elaine(x) & Brother(y) & PuddingCup(z) & Eats(y,z)) -> Slapped(x,y))", "Elaine slapped her brother because he ate the last two pudding cups.", "all x y.((Elaine(x) & Brother(y) & EatsPuddingCups(y)) -> Slapped(x,y))", "all x y z.((Elaine(x) & Brother(y) & PuddingCup(z) & Eats(y,z)) -> Slapped(x,y,z))", "all x y.((Elaine(x) & Brother(y) & EatsPuddingCups(y,x)) -> Slapped(x,y))", "all x y z.((Elaine(x) & Brother(y) & PuddingCup(z) & Eats(x,y,z)) -> Slapped(x,y))", "all x y.((Elaine(x) & Brother(y) & atePuddingCups(y,2)) -> Slapped(x,y))", "all x y z.((Elaine(x) & Brother(y) & PuddingCup(z) & Eats(x,y,z)) -> Slapped(x,y,z))", "all x y.((Elaine(x) & Brother(y) & atePuddingCups(y)) -> Slapped(x,y))", "all x y z.((Elaine(x) & Brother(y) & PuddingCup(z) & Eats(x,z)) -> Slapped(x,y))", "all x y z.((Elaine(x) & Brother(y) & PuddingCup(z) & Eats(x,z)) -> Slapped(x,y,z))", "all x y z.((Elaine(x) & Brother(y) & PuddingCup(z) & atePuddingCup(y,z)) -> Slapped(x,y))", "all x y z.((Elaine(x) & Brother(y) & PuddingCup(z)) -> Slapped(x,y))"]}
{"id": "enwn_validation_632", "nl": "Elaine felt she deserved one of the last two pudding cups.", "fol": "", "prediction": ["Elaine felt she deserved one of the last two pudding cups.", "Elaine felt she deserved one of the last two PuddingCups.", "all x y.((Elaine(x) & PuddingCup(y)) -> Won(x,y))", "all x y z.((Elaine(x) & PuddingCup(y) & PuddingCup(z)) -> Won(x,y,z))", "all x y z.((Elaine(x) & PuddingCup(y) & PuddingCup(z)) -> Won(x,y))", "all x.((Elaine(x) & PuddingCup(x)) -> Won(x,2))", "all x.((Elaine(x) & PuddingCup(y)) -> Won(x,y))", "all x y z.((Elaine(x) & PuddingCup(y) & PuddingCup(z)) -> BelongsTo(x,y,z))", "all x y z.((Elaine(x) & PuddingCup(y) & PuddingCup(z)) -> Melted(x,y,z))", "all x y z.((Elaine(x) & PuddingCup(y) & PuddingCup(z)) -> Merged(x,y,z))", "all x y.((Elaine(x) & PuddingCup(y)) -> BelongsTo(x,y))", "all x y z.((Elaine(x) & PuddingCup(y) & PuddingCup(z)) -> WentTo(x,y,z))", "all x y z.((Elaine(x) & PuddingCup(y) & PuddingCup(z)) -> Earned(x,y,z))", "all x y z.((Elaine(x) & PuddingCup(y) & PuddingCup(z)) -> Undeserved(x,y,z))", "all x y.((Elaine(x) & PuddingCup(y)) -> Earned(x,y))", "all x y z.((Elaine(x) & PuddingCup(y) & PuddingCup(z)) -> Meant(x,y,z))"]}
{"id": "enwn_validation_633", "nl": "It's petty to retaliate when someone wrongs you in a minor way.", "fol": "", "prediction": ["all x y.((Petty(x) & Person(y) & WrongsMinorly(y,x)) -> Retaliate(x,y))", "all x y.((Petty(x) & Person(y) & WrongsMinorly(y,x)) -> Retaliates(x,y))", "all x y.((Petty(x) & Person(y) & Minor(y)) -> Retaliates(x,y))", "all x y.((Retaliate(x) & Person(y) & Minor(y)) -> Petty(x))", "all x y.((Petty(x) & Person(y) & WrongsInMinorManner(y,x)) -> Retaliate(x,y))", "all x y.((Petty(x) & Person(y) & WrongsMinorly(y,x)) -> Retaliate(x))", "all x y.((Petty(x) & Person(y) & WrongsInMinorKind(y,x)) -> Retaliate(x,y))", "all x y.((Petty(x) & Person(y) & WorstInMinorManner(y,x)) -> Retaliate(x,y))", "all x y.((Petty(x) & Person(y) & WrongsMinorly(y,x)) -> Retaliates(x))", "all x y.((Petty(x) & Person(y) & Minor(y)) -> Retaliate(x,y))", "all x y.((Petty(x) & Person(y) & MinorWay(y)) -> Retaliate(x,y))", "all x y.((Petty(x) & Person(y) & WrongsInMinorManner(y,x)) -> Retaliates(x,y))", "all x y.((Petty(x) & Person(y) & MinorWay(y)) -> Retaliates(x,y))", "all x y.((Petty(x) & Person(y) & WrongsInMinorKind(y,x)) -> Retaliates(x,y))", "all x y.((Petty(x) & Person(y) & WrongsMinorly(y)) -> Retaliate(x,y))", "all x y.((Petty(x) & Person(y) & WrongsMinorly(y)) -> Retaliates(x,y))"]}
{"id": "enwn_validation_634", "nl": "Taking someone's snacks is wrong, but it doesn't harm them significantly.", "fol": "", "prediction": ["all x y.((Snack(x) & Person(y)) -> (IsWrong(x,y) & -HarmsSignificantly(x,y)))", "all x y.((Snack(x) & Person(y)) -> (IsWrong(x,y) & -Harms(x,y)))", "all x y.((Snack(x) & Person(y)) -> (IsWrong(x,y) & -HasSignificantHarm(x,y)))", "all x y.((Snack(x) & Person(y)) -> (Wrong(x,y) & -Hazards(x,y)))", "all x y.((Snack(x) & Person(y)) -> (IsWrong(x,y) & -HazardsSignificantly(x,y)))", "all x y.((Snack(x) & Person(y)) -> (IsWrong(x,y) & -Hazards(x,y)))", "all x y.((Snack(x) & Person(y)) -> (Wrong(x,y) & -HarmsSignificantly(x,y)))", "all x y.((Snack(x) & Person(y)) -> (Wrong(x,y) & -HazardsSignificantly(x,y)))", "all x y.((Snack(x) & Person(y)) -> (IsWrong(x,y) & -HasSignificantHazard(x,y)))", "all x y.((Snack(x) & Person(y)) -> (Wrong(x,y) & -Harms(x,y)))", "all x.(TakesSnacks(x) -> (IsWrong(x) & -HarmsSignificantly(x)))", "all x.(TakesSnacks(x) -> (Wrong(x) & -HarmsSignificantly(x)))", "all x y.((Snack(x) & Person(y) & Takes(x,y)) -> (IsWrong(x) & -Harms(x,y)))", "all x y.((Snack(x) & Person(y) & Takes(x,y)) -> (Wrong(x) & -Hazards(x,y)))", "all x y.((Snack(x) & Person(y)) -> (Wrong(x,y) & -HasSignificantHarm(x,y)))", "all x y.((Snack(x) & Person(y) & Takes(x,y)) -> (IsWrong(x) & -HarmsSignificantly(x)))"]}
{"id": "enwn_validation_635", "nl": "You shouldn't hurt people for petty reasons.", "fol": "", "prediction": ["all x y.((Petty(x) & Person(y)) -> -HasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-Ha-HaveH", "all x y.((Petty(x) & Person(y)) -> -HasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-Ha-HaveH", "all x y.((Petty(x) & Person(y)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHasHas", "all x y.((Petty(x) & Person(y)) -> -HasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-Ha-HaveH", "all x y.((Petty(x) & Person(y)) -> -HasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-HaveH", "all x y.((Petty(x) & Person(y)) -> -HasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-HaveH", "all x y.((Petty(x) & Person(y)) -> -HasHasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-Ha-HaveH", "all x y.((Petty(x) & Person(y)) -> -HasHasHasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-Ha-HaveH", "all x y.((Petty(x) & Person(y)) -> -HasHasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-HaveH", "all x y.((Petty(x) & Person(y)) -> -HasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-HaveH", "all x y.((Petty(x) & Person(y)) -> -HasHasHasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-HaveH", "all x y.((Petty(x) & Person(y)) -> -HasHasHasHasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-HaveH", "all x y.((Petty(x) & Person(y)) -> -HasHasHasHasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-Ha-HaveH", "all x y.((Petty(x) & Person(y)) -> -HasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-Ha-HaveHa", "all x y.((Petty(x) & Person(y)) -> -HasHasHasHasHasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-HaveH", "all x y.((Petty(x) & Person(y)) -> -HasHasHasHasHasHasHasHasHasHasHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHaveHa-Ha-HaveHa"]}
{"id": "enwn_validation_636", "nl": "Elaine slapped her brother in retaliation for taking her snacks.", "fol": "", "prediction": ["all x y.((Elaine(x) & Brother(y) & TakesSnacks(x,y)) -> SlappedInRetaliation(x,y))", "all x y z.((Elaine(x) & Brother(y) & Snack(z)) -> SlappedInRetaliation(x,y,z))", "all x y.((Elaine(x) & Brother(y)) -> SlappedInRetaliationForTakingSnacks(x,y))", "all x y z.((Elaine(x) & Brother(y) & Snacks(z)) -> SlappedInRetaliation(x,y,z))", "all x y.((Elaine(x) & Brother(y)) -> SlappedInRetaliation(x,y))", "all x y.((Elaine(x) & Brother(y)) -> SlappedInRetaliationForSnacks(x,y))", "all x y.((Elaine(x) & Brother(y) & TakesSnacks(x,y)) -> Slapped(x,y))", "all x y z.((Elaine(x) & Brother(y) & Snack(z)) -> SlappedInRetaliationForTaking(x,y,z))", "all x y z.((Elaine(x) & Brother(y) & Snack(z) & Takes(x,y,z)) -> SlappedInRetaliation(x,y,z))", "all x y z.((Elaine(x) & Brother(y) & Snack(z)) -> Slapped(x,y,z))", "all x y z.((Elaine(x) & Brother(y) & Snack(z) & Takes(x,z)) -> SlappedInRetaliation(x,y,z))", "all x y.((Elaine(x) & Brother(y) & Snacks(z)) -> SlappedInRetaliation(x,y,z))", "all x y.((Elaine(x) & Brother(y) & Snacks(y)) -> SlappedInRetaliation(x,y))", "all x y.((Elaine(x) & Brother(y)) -> SlappedInRetaliationForTakenSnacks(x,y))", "all x y.((Elaine(x) & Brother(y) & TakesSnacks(x)) -> SlappedInRetaliation(x,y))", "all x y z.((Elaine(x) & Brother(y) & Snacks(z)) -> SlappedInRetaliationForTaking(x,y,z))"]}
{"id": "enwn_validation_637", "nl": "It's petty to retaliate against someone for taking your snacks.", "fol": "", "prediction": ["all x y.((Petty(x) & Person(y) & TakesSnacks(x,y)) -> RetaliatesAgainst(x,y))", "all x.((Retaliate(x) & TakeSnacks(x)) -> Petty(x))", "all x.((Retaliate(x) & TakesSnacks(x)) -> Petty(x))", "all x y.((Petty(x) & Person(y) & TakesSnacks(x,y)) -> RetaliateAgainst(x,y))", "all x y.((Petty(x) & Person(y) & TakesSnacks(x,y)) -> Retaliate(x,y))", "all x.((Retaliation(x) & TakesSnacks(x)) -> Petty(x))", "all x.((RetaliateAgainst(x) & TakesSnacks(x)) -> Petty(x))", "all x y.((Petty(x) & Person(y) & RetaliatesAgainst(x,y)) -> TakesSnacks(x,y))", "all x.((RetaliateAgainst(x) & TakeSnacks(x)) -> Petty(x))", "all x y.((Petty(x) & Person(y) & TakesSnacks(y)) -> RetaliatesAgainst(x,y))", "all x y.((Petty(x) & Person(y) & TakesSnacks(x,y)) -> Retaliates(x,y))", "all x y.((Petty(x) & Person(y) & TakesSnacks(y,x)) -> RetaliatesAgainst(x,y))", "all x y.((PettyRetaliation(x) & Person(y) & TakesSnacks(x,y)) -> Petty(x))", "all x y.((Petty(x) & RetaliateAgainst(x,y)) -> TakesSnacks(x,y))", "all x.((PettyRetaliation(x) & TakesSnacks(x)) -> Petty(x))", "all x y.((Petty(x) & Person(y) & TakesSnack(x,y)) -> RetaliatesAgainst(x,y))"]}
{"id": "enwn_validation_638", "nl": "Elaine slapped her brother for a petty reason.", "fol": "", "prediction": ["all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyRun(x,y))", "all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyRaison(x,y))", "all x y.((Elaine(x) & Brother(y)) -> Slapped(x,y))", "all x y.((Elaine(x) & Brother(y)) -> SlappedForPetty(x,y))", "all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyRight(x,y))", "all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyMoment(x,y))", "all x y z.((Elaine(x) & Brother(y) & Petty(z)) -> SlappedFor(x,y,z))", "all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyMeaning(x,y))", "all x y z.((Elaine(x) & Brother(y) & PettyRun(z)) -> SlappedFor(x,y,z))", "all x y z.((Elaine(x) & Brother(y) & PettyRun(z)) -> Slapped(x,y,z))", "all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyMatter(x,y))", "all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyRation(x,y))", "all x y.((Elaine(x) & Brother(y)) -> SlappedPetty(x,y))", "all x y z.((Elaine(x) & Brother(y) & Petty(z)) -> Slapped(x,y,z))", "all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyResponse(x,y))", "all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyCause(x,y))"]}
{"id": "enwn_validation_639", "nl": "Elaine should not have slapped her brother.", "fol": "", "prediction": ["all x y.((Elaine(x) & Brother(y)) -> -Slapped(x,y))", "all x.((Elaine(x) & Brother(y)) -> -Slapped(x,y))", "Elaine should not have slappedBrother(Elaine)", "all x.((Elaine(x) & Brother(x)) -> -Slapped(x,y))", "all x y.((Elaine(x) & Brother(y) & -Slapped(x,y)) -> -Slapped(x,y))", "all x.((Elaine(x) & Brother(x)) -> -Slapped(x))", "all x y.((Elaine(x) & Brother(y)) -> -Shaped(x,y))", "Elaine ne should have slappedBrother(n)", "all x.((Elaine(x) & Brother(y)) -> -Shaped(x,y))", "Elaine should not have slappedBrother(elaine)", "all x.((Elaine(x) & Brother(x)) -> -Slapped(x,Elaine))", "Elaine should not have slappedBrother(e)", "Elaine should not have slapped her brother.", "all x y.((Elaine(x) & Brother(y)) -> -Shlapped(x,y))", "all x.((Elaine(x) & Brother(x)) -> -Slapped(x,elaine))", "all x y.((Elaine(x) & Brother(y) & -Slapped(x,y)) -> -Shaped(x,y))"]}
{"id": "enwn_validation_640", "nl": "You shouldn't insult people for no good reason.", "fol": "", "prediction": ["all x y.((Involves(x,y) & Person(y)) -> -Inflicts(x,y))", "all x.((InflictsPeople(x) & -GoodRight(x)) -> -InflictsPeople(x))", "all x.((Involves(x,y) & -GoodRight(y)) -> -Inflicts(x,y))", "all x y.((Involves(x,y) & Person(y)) -> -Involves(x,y))", "all x.((InvolvesPerson(x) & -GoodRight(x)) -> -InvolvesPerson(x))", "all x.((Involves(x,y) & -GoodRight(y)) -> -Involves(x,y))", "all x.((People(x) & -GoodRight(x)) -> -Inflicts(x,y))", "all x.((People(x) & -GoodRun(x)) -> -Inflicts(x,y))", "all x.((People(x) & -GoodRight(x)) -> -Inflict(x,y))", "all x.((Person(x) & -GoodRight(x)) -> -Inflicts(x,y))", "all x.((People(x) & -GoodRun(x)) -> -Inflict(x,y))", "all x.((People(x) & -GoodRight(x)) -> -Intimidate(x))", "all x.((People(x) & -GoodRun(x)) -> -Intimidate(x))", "all x.((Involves(x) & -GoodRight(x)) -> -Inflicts(x))", "all x.((Person(x) & -GoodRun(x)) -> -Inflicts(x,y))", "all x.((InvolvesPerson(x) & -GoodRight(x)) -> -Inflicts(x))"]}
{"id": "enwn_validation_641", "nl": "Someone's appearance is not a good reason to insult them.", "fol": "", "prediction": ["all x.((Person(x) & Appearance(x)) -> -GoodRightToInflict(x))", "all x.((Appearance(x) & -GoodRightToInflict(x)) -> -GoodRightToInflict(x))", "all x y.((Person(x) & Appearance(y) & -GoodRightToInflict(x,y)) -> -GoodRightToInflict(x,y))", "all x.((Person(x) & Appearance(x)) -> -GoodRightToInjure(x))", "all x y.((Person(x) & Appearance(y)) -> -GoodRightToInflict(x,y))", "all x.((Appearance(x) & -GoodRightToInjure(x)) -> -GoodRightToInjure(x))", "all x y.((Person(x) & Appearance(y) & -GoodRightToInjure(x,y)) -> -GoodRightToInjure(x,y))", "all x.((Person(x) & Appearance(x) & -GoodRightToInflict(x)) -> -GoodRightToInflict(x))", "all x y.((Person(x) & Appearance(y) & -GoodRightToInflict(x,y)) -> -Inflict(x,y))", "all x y.((Person(x) & Appearance(y)) -> -GoodRightToInjure(x,y))", "all x.((PersonalAppearance(x) & -GoodRightToInflict(x)) -> -GoodRightToInflict(x))", "all x.((Appearance(x) & -GoodRightToInflict(x)) -> -Inflict(x))", "all x.((Person(x) & Appearance(x)) -> -GoodRightToInflict(x,y))", "all x y.((Person(x) & Appearance(y) & -GoodRightToInflict(x,y)) -> -GoodRightToInflict(y,x))", "all x.((Person(x) & Appearance(x) & -GoodRightToInflict(x)) -> -Inflict(x))", "all x y.((Appearance(x) & Person(y)) -> -GoodRightToInflict(x,y))"]}
{"id": "enwn_validation_642", "nl": "Calling something dirty is an insult.", "fol": "", "prediction": ["all x.(Dirty(x) -> Insult(x))", "all x.((Dirty(x) & Calls(x,y)) -> Insult(x))", "all x.((Dirty(x) & Calling(x,y)) -> Insult(x))", "all x.((Dirty(x) & Calls(x,y)) -> Inflict(x))", "all x.(Dirty(x) -> Inflict(x))", "all x.((Dirty(x) & Calls(x,y)) -> Irresponsible(x))", "all x.((Dirty(x) & Calling(x,y)) -> Inflict(x))", "all x.((Person(x) & Dirty(x)) -> Insult(x))", "all x.((Dirty(x) & Calls(x,y)) -> Illusion(x))", "all x.((Dirty(x) & Calls(x,y)) -> Inflicted(x))", "all x.((Dry(x) & Calls(x,y)) -> Insult(x))", "all x.((Dish(x) & Calls(x,y)) -> Insult(x))", "all x.((Person(x) & Dirty(x)) -> Inflict(x))", "all x.((Dirty(x) & Calls(x,y)) -> Insult(y))", "all x.((Dirty(x) & Calls(x,y)) -> Inflict(y))", "all x.(Dirt(x) -> Insult(x))"]}
{"id": "enwn_validation_643", "nl": "Dishrags are stereotypically dirty.", "fol": "", "prediction": ["all x.(Dishrag(x) -> StereotypicallyDirty(x))", "all x.(Dishrag(x) -> StereotypicallyDry(x))", "all x.(Dischrag(x) -> StereotypicallyDirty(x))", "all x.(Dishrag(x) -> StereotypicallyDish(x))", "all x.(Dishrag(x) -> StereotypicallyDiy(x))", "all x.(Dishrag(x) -> StereotypicallyDiny(x))", "all x.(Dishrag(x) -> StereotypicallyDynamic(x))", "all x.(Dishrag(x) -> StereotypicallyDirt(x))", "all x.(Dishrag(x) -> StereotypicallyDishwashed(x))", "all x.(Dischrag(x) -> StereotypicallyDry(x))", "all x.(Dishrag(x) -> StylotypicallyDirty(x))", "all x.(Dishrag(x) -> StereotypicallyDirty(x))", "all x.(Dishrag(x) -> StereotypicallyDrinky(x))", "all x.(Dischrag(x) -> StereotypicallyDiy(x))", "all x.(Dishrag(x) -> StrobetypicallyDirty(x))", "all x.(Dishrag(x) -> Dirty(x))"]}
{"id": "enwn_validation_644", "nl": "Comparing things implies that they share properties.", "fol": "", "prediction": ["all x.(ComparingThings(x) -> ShareProperties(x))", "all x.(ComparesThings(x) -> ShareProperties(x))", "all x y.((Compares(x,y) & Thing(y)) -> ShareProperties(x,y))", "all x y.((Compares(x,y) & Things(y)) -> ShareProperties(x,y))", "all x y.((ComparingThings(x) & Property(y)) -> Share(x,y))", "all x y.((ComparingThings(x) & Property(y)) -> ShareProperties(x,y))", "all x y.((ComparesThings(x) & Property(y)) -> SharesProperties(x,y))", "all x y.((ComparingThings(x) & Property(y)) -> Shares(x,y))", "all x y.((ComparesThings(x) & Property(y)) -> Shares(x,y))", "all x y.((ComparingThings(x) & Property(y)) -> SharesProperties(x,y))", "all x y.((Comparing(x) & Thing(y)) -> ShareProperties(x,y))", "all x y.((ComparesThings(x) & Property(y)) -> Share(x,y))", "all x y.((Comparing(x) & Things(y)) -> ShareProperties(x,y))", "all x.(Comparing(x) -> ShareProperties(x))", "all x.(CompareThings(x) -> ShareProperties(x))", "all x.(ComparesThings(x) -> SharesProperties(x))"]}
{"id": "enwn_validation_645", "nl": "Derek told Cammy that her hair looked like a dishrag.", "fol": "", "prediction": ["all x y.((Derek(x) & Cammy(y)) -> LooksAlikeDishrag(x,y))", "all x y z.((Derek(x) & Cammy(y) & Hair(z)) -> LooksAlikeDishrag(y,z))", "all x y z.((Derek(x) & Cammy(y) & Hair(z)) -> LooksAlikeDishrag(x,z))", "all x y.((Deborah(x) & Cammy(y)) -> LooksAlikeDishrag(x,y))", "all x y.((Derek(x) & Cammy(y)) -> LooksAlikeDishrag(y,x))", "all x y.((Deboree(x) & Cammy(y)) -> LooksAlikeDishrag(x,y))", "all x y.((Deborah(x) & Cammy(y)) -> LooksAlikeDishrag(y,x))", "all x y.((Derek(x) & Cammy(y)) -> LooksAlikeDishrag(y))", "all x y.((Deboree(x) & Cammy(y)) -> LooksAlikeDishrag(y,x))", "all x.((Deborah(x) & Cammy(x)) -> LooksAlikeDishrag(x))", "all x y z.((Deborah(x) & Cammy(y) & Hair(z)) -> LooksAlikeDishrag(y,z))", "all x y z.((Deboree(x) & Cammy(y) & Hair(z)) -> LooksAlikeDishrag(y,z))", "all x y z.((Deboree(x) & Cammy(y) & Hair(z)) -> LooksAlikeDishrag(x,z))", "all x y z.((Deborah(x) & Cammy(y) & Hair(z)) -> LooksAlikeDishrag(x,z))", "all x y.((Deborah(x) & Cammy(y)) -> LooksAlikeDishrag(y))", "all x y.((Deboree(x) & Cammy(y)) -> LooksAlikeDishrag(y))"]}
{"id": "enwn_validation_646", "nl": "Someone's hair is part of their appearance.", "fol": "", "prediction": ["all x.(Hair(x) -> PartOfAppearance(x))", "all x y.((Hair(x) & Person(y)) -> PartOfAppearance(x,y))", "all x y.((Person(x) & Hair(y)) -> PartOfAppearance(x,y))", "all x y.((Hair(x) & Person(y)) -> PartOfAppearance(y,x))", "all x.((Hair(x) & Person(x)) -> PartOfAppearance(x))", "exists x.(Hair(x) & PartOfAppearance(x))", "all x y z.((Hair(x) & Person(y) & Appearance(z)) -> PartOf(x,y,z))", "all x.((Hair(x) & PartOfAppearance(x)) -> PartOfAppearance(x))", "all x y z.((Hair(x) & Person(y) & Appearance(z)) -> PartOf(y,z))", "all x y.((Hair(x) & Person(y)) -> PartOfAppearance(y))", "all x.((Hair(x) & PartOfAppearance(x)) -> HairPartOfAppearance(x))", "all x y z.((Hair(x) & Person(y) & Appearance(z)) -> PartOfAppearance(x,y,z))", "all x.(Hair(x) -> AppearancePartOf(x,y))", "all x.(Hair(x) -> Appearance(x))", "all x.((Hair(x) & Person(x)) -> PartOfAppearance(x,y))", "all x.(Human(x) -> PartOfAppearance(x))"]}
{"id": "enwn_validation_647", "nl": "Comparing something to a dishrag implies that it's dirty.", "fol": "", "prediction": ["all x y.((Dishrag(x) & Dishrag(y)) -> Dirty(x,y))", "all x y.((Dishrag(x) & Dishrag(y)) -> Dirty(x))", "all x y.((Dishrag(x) & Dishrag(y)) -> Dirty(y))", "all x.((Dishrag(x) & Dishrag(x)) -> Dirty(x))", "all x y z.((Dishrag(x) & Dishrag(y) & Dishrag(z)) -> Dirty(x,y,z))", "all x y z.((Dishrag(x) & Dishrag(y) & Dishrag(z)) -> Dirty(y))", "all x y.((Dishrag(x) & Dishrag(y) & Comparing(x,y)) -> Dirty(x))", "all x.((Dishrag(x) & Comparing(x,y)) -> Dirty(x))", "all x y z.((Dishrag(x) & Dishrag(y) & Dishrag(z)) -> Dirty(z))", "all x y.((Compare(x,y) & Dishrag(y)) -> Dirty(y))", "all x y z.((Dishrag(x) & Dishrag(y) & Dishrag(z)) -> Dirty(x))", "all x y z.((Dishrag(x) & Dishrag(y) & Dishrag(z)) -> Dirty(y,z))", "all x y z.((Dishrag(x) & Dishrag(y) & Dishrag(z) & Comparing(x,y,z)) -> Dirty(x))", "all x y z.((Dishrag(x) & Dishrag(y) & Dishrag(z)) -> Dirty(x,z))", "all x y.((Dishrag(x) & Dishrag(y) & Comparing(x,y)) -> Dirty(y))", "all x.((Dishrag(x) & Comparing(x,y)) -> Dirty(y))"]}
{"id": "enwn_validation_648", "nl": "Derek's comment was implying that Cammy's hair looked dirty.", "fol": "", "prediction": ["Derek's comment was implying that Cammy's hair lookedDirty.", "all x y z.((Comment(x) & Derek(y) & Cammy(z)) -> LooksDirty(y,z))", "all x y z.((Comment(x) & Derek(y) & CammysHair(z)) -> LooksDirty(y,z))", "all x y.((Comment(x) & Derek(y)) -> InvolvesDirtyHair(y,x))", "all x y.((Comment(x) & Derek(y)) -> InvolvesDirtyHair(x,y))", "all x.((Comment(x) & CammysHair(x)) -> Dirty(x))", "all x.((Comment(x) & CammyHair(x)) -> Dirty(x))", "all x y.((Comment(x) & CammysHair(y)) -> LooksDirty(x,y))", "all x y z.((Comment(x) & Derek(y) & Cammy(z)) -> LooksDirty(x,z))", "all x y.((Comment(x) & Derek(y)) -> LooksDirty(y))", "all x y.((Comment(x) & Derek(y)) -> LooksDirty(y,x))", "all x y.((Comment(x) & Derek(y)) -> LooksDirty(x,y))", "all x y.((Comment(x) & Cammy(y)) -> LooksDirty(x,y))", "all x y.((Comment(x) & Derek(y) & Cammy(z)) -> LooksDirty(x,z))", "all x y z.((Comment(x) & Derek(y) & CammysHair(z)) -> LooksDirty(x,z))", "all x.((Commentary(x) & CammysHair(x)) -> Dirty(x))"]}
{"id": "enwn_validation_649", "nl": "Derek's comment was an insult.", "fol": "", "prediction": ["all x.((Comment(x) & Derek(x)) -> Inflicted(x))", "all x.((Comment(x) & Derek(x)) -> Irresponsible(x))", "all x.((Derek(x) & Comment(x)) -> Inflicted(x))", "all x.((Derek(x) & Comment(x)) -> Irresponsible(x))", "all x y.((Derek(x) & Comment(y)) -> Irresponsible(x,y))", "all x y.((Derek(x) & Comment(y)) -> Inflicted(x,y))", "all x.((Comment(x) & Derek(x)) -> Illusion(x))", "all x.((Deborah(x) & Comment(x)) -> Inflicted(x))", "all x.((Comment(x) & Derek(x)) -> Insult(x))", "all x.((Comment(x) & Derek(x)) -> Inflict(x))", "all x y.((Comment(x) & Derek(y)) -> Irresponsible(y))", "all x.((Commentary(x) & Derek(x)) -> Inflicted(x))", "all x.((Derek(x) & Comment(x)) -> Illusion(x))", "All x.((Derek(x) & Comment(x)) -> Inflicted(x))", "all x.((Derek(x) & Comment(x)) -> Inflict(x))", "all x y.((Comment(x) & Derek(y)) -> Inflicted(y,x))"]}
{"id": "enwn_validation_650", "nl": "Derek's comment was about Cammy's appearance.", "fol": "", "prediction": ["all x y.((Comment(x) & Derek(y)) -> CammyAppearance(y))", "all x y.((Comment(x) & Derek(y)) -> CammyAppearance(x,y))", "all x y.((Derek(x) & Cammy(y)) -> CommentAbout(x,y))", "all x.(Comment(x) -> CammyAppearance(x))", "all x.((Commentary(x) & CammyAppearance(x)) -> Derek(x))", "all x y.((Derek(x) & Cammy(y)) -> CommentAboutAppearance(x,y))", "Derek's comment was about Cammy's appearance.", "all x.((Comment(x) & CammyAppearance(x)) -> Derek(x))", "all x y z.((Derek(x) & Comment(y) & Cammy(z)) -> WasAbout(x,y,z))", "all x y z.((Derek(x) & Comment(y) & Cammy(z)) -> AboutAppearance(x,y,z))", "all x y.((Comment(x,y) & Derek(y)) -> CammyAppearance(x,y))", "all x y.((Derek(x) & Comment(y)) -> CammyAppearance(x,y))", "all x y z.((Derek(x) & Comment(y) & Cammy(z)) -> CammyAppearance(x,y,z))", "all x y z.((Derek(x) & Comment(y) & Cammy(z)) -> AboutAppearance(x,z))", "all x y z.((Derek(x) & Comment(y) & Cammy(z)) -> ConcernsAppearance(x,y,z))", "all x y.((Comment(x,y) & Derek(y)) -> CammyAppearance(y))"]}
{"id": "enwn_validation_651", "nl": "Derek insulted Cammy's appearance.", "fol": "", "prediction": ["Derek insulted Cammy's appearance.", "all x y z.((Derek(x) & Cammy(y) & Appearance(z)) -> Inflicted(x,y,z))", "all x y z.((Derek(x) & Cammy(y) & Appearance(z)) -> Insulted(x,y,z))", "all x y.((Derek(x) & Cammy(y)) -> InsultedAppearance(x,y))", "all x y z.((Derek(x) & Cammy(y) & Appearance(z)) -> Irresponsible(x,y,z))", "all x y z.((Derek(x) & Cammy(y) & Appearance(z)) -> Injures(x,y,z))", "all x y z.((Derek(x) & Cammy(y) & Appearance(z)) -> Infuriated(x,y,z))", "all x y z.((Derek(x) & Cammy(y) & Appearance(z)) -> Inflamed(x,y,z))", "all x y.((Deborah(x) & Cammy(y)) -> InsultedAppearance(x,y))", "all x y.((Derek(x) & Cammy(y)) -> Inflicted(x,y))", "all x y.((Derek(x) & Cammy(y)) -> Insulted(x,y))", "all x y z.((Derek(x) & Cammy(y) & Appearance(z)) -> Insults(x,y,z))", "all x y z.((Derek(x) & Cammy(y) & Appearance(z)) -> Inflicted(x,z))", "all x y.((Derek(x) & Cammy(y)) -> Infuriated(x,y))", "all x y.((Deborah(x) & Cammy(y)) -> Inflicted(x,y))", "all x y z.((Derek(x) & Cammy(y) & Appearance(z)) -> insulted(x,y,z))"]}
{"id": "enwn_validation_652", "nl": "Derek insulted Cammy for no good reason.", "fol": "", "prediction": ["all x y.((Derek(x) & Cammy(y)) -> Irresponsible(x,y))", "all x y.((Deborah(x) & Cammy(y)) -> Irresponsible(x,y))", "all x y.((Derek(x) & Cammy(y)) -> InsultedForNoGoodRaison(x,y))", "all x y.((Derek(x) & Cammy(y)) -> InfuriatedForNoGoodRaison(x,y))", "all x y.((Deborah(x) & Cammy(y)) -> InsultedForNoGoodRaison(x,y))", "all x y.((Deborah(x) & Cammy(y)) -> InfuriatedForNoGoodRaison(x,y))", "all x y.((Derek(x) & Cammy(y)) -> Infuriated(x,y))", "all x y.((Derek(x) & Cammy(y)) -> InsultedForNoGoodRight(x,y))", "all x y.((Deborah(x) & Cammy(y)) -> Infuriated(x,y))", "all x y.((Derek(x) & Cammy(y)) -> InfuriatedForNoGoodRight(x,y))", "all x y.((Deborah(x) & Cammy(y)) -> InsultedForNoGoodRight(x,y))", "all x y z.((Derek(x) & Cammy(y) & Reason(z)) -> Infuriated(x,y,z))", "all x y.((Deborah(x) & Cammy(y)) -> InfuriatedForNoGoodRight(x,y))", "all x y z.((Derek(x) & Cammy(y) & Reason(z)) -> Insulted(x,y,z))", "all x.((Deborah(x) & Cammy(x)) -> Irresponsible(x))", "all x y z.((Derek(x) & Cammy(y) & Reason(z)) -> InsultedFor(x,y,z))"]}
{"id": "enwn_validation_653", "nl": "Derek should not have insulted Cammy.", "fol": "", "prediction": ["all x y.((Derek(x) & Cammy(y)) -> -Inflicted(x,y))", "all x y.((Deborah(x) & Cammy(y)) -> -Inflicted(x,y))", "all x y.((Derek(x) & Cammy(y)) -> -Inflamed(x,y))", "all x.((Derek(x) & Cammy(x)) -> -Inflicted(x,Cammy))", "all x.((Derek(x) & Cammy(y)) -> -Inflicted(x,y))", "all x.((Deborah(x) & Cammy(x)) -> -Inflicted(x,Cammy))", "all x.((Derek(x) & Cammy(x)) -> -Inflicted(x,y))", "all x.((Deborah(x) & Cammy(y)) -> -Inflicted(x,y))", "all x y.((Deborah(x) & Cammy(y)) -> -Inflamed(x,y))", "all x.((Deborah(x) & Cammy(x)) -> -Inflicted(x,y))", "all x.((Derek(x) & Cammy(x)) -> -Inflicted(x,cammy))", "all x y.((Derek(x) & Cammy(y)) -> -Injected(x,y))", "all x.((Deborah(x) & Cammy(x)) -> -Inflicted(x,cammy))", "all x.((Derek(x) & Cammy(x)) -> -Inflamed(x,y))", "all x.((Deborah(x) & Cammy(x)) -> -Inflamed(x,y))", "all x.((Derek(x) & Cammy(x)) -> -Irresponsible(x,y))"]}
{"id": "enwn_validation_654", "nl": "You should be polite.", "fol": "", "prediction": ["all x.(Polite(x) -> ShouldBe(x))", "all x.(Polite(x) -> -Polite(x))", "all x.(Polite(x) -> Polite(x))", "all x.(Polite(x) -> BePolite(x))", "all x.((Polite(x) & -Polite(x)) -> -Polite(x))", "all x.(Polite(x) -> NotPolite(x))", "all x.((Polite(x) & -Polite(x)) -> ShouldBe(x))", "all x.((Polite(x)) -> ShouldBe(x))", "all x.(Polite(x) -> RemainsPolite(x))", "all x.((Polite(x) & -Polite(x)) -> Polite(x))", "all x.((Polite(x) & Polite(x)) -> -Polite(x))", "all x.(Polite(x) -> Remains(x))", "all x.((Polite(x) & Been(x)) -> ShouldBe(x))", "all x.((Polite(x) & -Polite(x)) -> BePolite(x))", "all x.((Polite(x) & Polite(x)) -> ShouldBe(x))", "all x.(Polite(x) -> MakesSense(x))"]}
{"id": "enwn_validation_655", "nl": "Melanie closed the doors immediately when she saw someone approaching the elevator she was in.", "fol": "", "prediction": ["all x.((Melanie(x) & PersonApproachingElevator(x)) -> ClosedDoorsImmediately(x))", "all x y.((Melanie(x) & Person(y) & ApproachingElevator(x,y)) -> ClosedDoorsImmediately(x))", "all x y.((Melanie(x) & Person(y) & ApproachedElevator(x,y)) -> ClosedDoorsImmediately(x))", "all x y.((Melanie(x) & Person(y) & ApproachedElevator(x,y)) -> ClosedDoorsImmediately(x,y))", "all x y z.((Melanie(x) & Person(y) & Elevator(z) & Approaching(x,y,z)) -> ClosedDoors(x,y))", "all x y.((Melanie(x) & Person(y) & ApproachingElevator(x,y)) -> ClosedDoorsImmediately(x,y))", "all x.((Melanie(x) & SomeoneApproachingElevator(x)) -> ClosedDoorsImmediately(x))", "all x y.((Melanie(x) & Person(y) & ApproachedElevator(x,y)) -> ClosedDoors(x,y))", "all x y.((Melanie(x) & Person(y) & ApproachingElevator(x,y)) -> ClosedDoors(x,y))", "all x y.((Melanie(x) & Person(y) & InElevator(x,y)) -> ClosedDoorsImmediately(x,y))", "all x y z.((Melissa(x) & Person(y) & Elevator(z) & Approaching(x,y,z)) -> ClosedDoors(x,y))", "all x y.((Melanie(x) & Person(y)) -> ClosedDoorsImmediately(x,y))", "all x y z.((Melanie(x) & Person(y) & Elevator(z) & Approaching(x,y,z)) -> ClosedDoorsImmediately(x))", "all x y z.((Melanie(x) & Person(y) & Elevator(z) & Approaching(x,y,z)) -> ClosedDoors(x,y,z))", "all x.((Melissa(x) & PersonApproachingElevator(x)) -> ClosedDoorsImmediately(x))", "all x y z.((Melanie(x) & Person(y) & Elevator(z) & Approaching(x,y,z)) -> ClosedDoorsImmediately(x,y))"]}
{"id": "enwn_validation_656", "nl": "It's polite to hold the door for people.", "fol": "", "prediction": ["all x.((Door(x) & HoldsForPeople(x)) -> Polite(x))", "all x y.((Door(x) & Person(y)) -> PoliteToHold(x,y))", "all x.((Door(x) & Polite(x)) -> HoldsForPeople(x))", "all x.((PoliteToHoldDoor(x) & People(x)) -> HoldDoor(x))", "all x.((PoliteToHoldDoor(x) & People(x)) -> PoliteToHoldDoor(x))", "all x.((Door(x) & Holds(x,people)) -> Polite(x))", "all x.(PoliteToHoldDoor(x) -> People(x))", "all x y.((Polite(x) & Door(y)) -> HoldsFor(x,y))", "all x.((Door(x) & Holds(x,People)) -> Polite(x))", "all x.(PoliteToHoldDoorForPeople(x) -> PoliteToHoldDoorForPeople(x))", "all x.(PoliteToHoldDoorForPeople(x) -> HoldDoorForPeople(x))", "all x y.((Door(x) & Person(y)) -> Polite(x))", "all x y.((Door(x) & Person(y)) -> Polite(x,y))", "all x.((PoliteToHoldDoor(x) & People(x)) -> HoldsDoor(x))", "all x.((Door(x) & Holds(x)) -> Polite(x))", "all x.((Polite(x) & HoldsDoor(x)) -> People(x))"]}
{"id": "enwn_validation_657", "nl": "It was impolite for Melanie to close the elevator doors.", "fol": "", "prediction": ["all x.((Melanie(x) & CloseElevatorDoors(x)) -> Impolite(x))", "all x.((Melanie(x) & ClosesElevatorDoors(x)) -> Impolite(x))", "all x.((Melanie(x) & CloseElevatorDoors(x)) -> Impossible(x))", "all x.((Melissa(x) & CloseElevatorDoors(x)) -> Impolite(x))", "all x y.((Melanie(x) & Elevator(y)) -> ImpossibleToClose(x,y))", "all x.((Melanie(x) & ClosesElevatorDoors(x)) -> Impossible(x))", "all x.((Melanie(x) & ClosedElevatorDoors(x)) -> Impolite(x))", "all x.((Melissa(x) & ClosesElevatorDoors(x)) -> Impolite(x))", "all x y.((Melanie(x) & Elevator(y)) -> ImpoliteToClose(x,y))", "all x.((Melissa(x) & CloseElevatorDoors(x)) -> Impossible(x))", "all x.((Melissabeth(x) & CloseElevatorDoors(x)) -> Impolite(x))", "All x.((Melanie(x) & CloseElevatorDoors(x)) -> Impolite(x))", "all x y.((Melissa(x) & Elevator(y)) -> ImpossibleToClose(x,y))", "all x.((Melanie(x) & ClosedElevatorDoors(x)) -> Impossible(x))", "all x.((Melissa(x) & ClosesElevatorDoors(x)) -> Impossible(x))", "All x.((Melanie(x) & CloseElevatorDoors(x)) -> Impossible(x))"]}
{"id": "enwn_validation_658", "nl": "Melanie shouldn't have closed the elevator doors.", "fol": "", "prediction": ["all x.((Melanie(x) & Elevator(y)) -> -Closed(x,y))", "all x.((Melanie(x) & -ClosedElevatorDoors(x)) -> -ClosedElevatorDoors(x))", "all x.((Melissa(x) & Elevator(y)) -> -Closed(x,y))", "all x y.((Melanie(x) & Elevator(y)) -> -Closed(x,y))", "all x.((Melanie(x) & ElevatorDoor(y)) -> -Closed(x,y))", "all x.(Melanie(x) -> -ClosedElevatorDoors(x))", "all x y.((Melissa(x) & Elevator(y)) -> -Closed(x,y))", "all x.((Melissa(x) & -ClosedElevatorDoors(x)) -> -ClosedElevatorDoors(x))", "all x.((Melissa(x) & ElevatorDoor(y)) -> -Closed(x,y))", "all x.((Melanie(x) & Elevator(y)) -> -ClosedDoors(x,y))", "all x.(Melissa(x) -> -ClosedElevatorDoors(x))", "all x y.((Melanie(x) & Elevator(y)) -> -ClosedDoors(x,y))", "all x.((Melissa(x) & Elevator(y)) -> -ClosedDoors(x,y))", "all x.((Melanie(x) & ElevatorDoor(x)) -> -Closed(x,y))", "all x.((Melanie(x) & ClosedElevatorDoors(x)) -> -Melanie(x))", "all x.((Melanie(x) & -ClosedElevatorDoors(x)) -> -ShouldCloseElevatorDoors(x))"]}
{"id": "enwn_validation_659", "nl": "You should avoid doing unethical things.", "fol": "", "prediction": ["all x.((DoesUnethicalThings(x)) -> Avoids(x))", "all x.((DoingUnethicalThings(x)) -> Avoids(x))", "all x.((DoingUnethicalThings(x)) -> Avoid(x))", "all x.((DoesUnethicalThings(x)) -> Avoid(x))", "all x.((DoesUnethicalThings(x) & Avoids(x)) -> Avoids(x))", "all x.((DoesUnethicalThings(x) & Avoids(x)) -> Avoid(x))", "all x.((DoesUnethicalThings(x) & Avoids(x)) -> -DoesUnethicalThings(x))", "all x.((DoesUnethicalThings(x)) -> -DoesUnethicalThings(x))", "all x.((AvoidsUnethicalThings(x)) -> Avoids(x))", "all x.((DoesUnethicalThings(x) & Avoids(x)) -> -DoesUnethicalThings(x))", "all x.((DoingUnethicalThings(x) & Avoids(x)) -> Avoids(x))", "all x.(DoesUnethicalThings(x) -> Avoids(x))", "all x.((DoingUnethicalThings(x)) -> Avoid(x))", "all x.((CausesUnethicalThings(x)) -> Avoids(x))", "all x.((DoingUnethicalThings(x)) -> Avoids(x))", "all x.(UnethicalThings(x) -> Avoid(x))"]}
{"id": "enwn_validation_660", "nl": "Bribing someone to do something wrong is unethical.", "fol": "", "prediction": ["all x y.((Brings(x,y) & Person(y)) -> Unethical(x))", "all x y.((Brings(x,y) & Person(y)) -> Unethical(x))", "all x y.((Bird(x) & Person(y) & DoseWrong(y)) -> Unethical(x))", "all x y.((Bird(x) & Person(y) & DoesWrong(x,y)) -> Unethical(x))", "all x.((Birding(x) & DoingWrong(x)) -> Unethical(x))", "all x y.((Bird(x) & Person(y) & DoingWrong(y)) -> Unethical(x))", "all x y.((Bird(x) & Person(y) & DoesWrong(y)) -> Unethical(x))", "all x y.((Bird(x) & Person(y)) -> Unethical(x))", "all x y.((Bird(x) & Person(y) & DoseWrong(y)) -> Unethical(x,y))", "all x y.((Bird(x) & Person(y)) -> Unethical(x))", "all x.(BirdingToDoWrong(x) -> Unethical(x))", "all x y.((Bird(x) & Person(y)) -> Unethical(x,y))", "all x y.((Bird(x) & Person(y) & DoseWrong(y,x)) -> Unethical(x))", "all x y.((Bird(x) & Person(y) & DoingWrong(y)) -> Unethical(x,y))", "all x y.((Bird(x) & Person(y) & DoesWrong(y)) -> Unethical(x,y))", "all x.(Birding(x) -> Unethical(x))"]}
{"id": "enwn_validation_661", "nl": "It's wrong to keep quiet about misconduct.", "fol": "", "prediction": ["all x.((KeepsQuiet(x) & Misconduct(x)) -> Irresponsible(x))", "all x.((KeepsQuiet(x) & Misconduct(x)) -> Wrong(x))", "all x.((KeepQuiet(x) & Misconduct(x)) -> Irresponsible(x))", "all x.((KeepQuiet(x) & Misconduct(x)) -> Wrong(x))", "all x.((KeepsQuiet(x) & Disgraceful(x)) -> Irresponsible(x))", "all x.((Conflict(x) & Quiet(x)) -> Irresponsible(x))", "all x.((Conflict(x) & Quiet(x)) -> IsWrong(x))", "all x.((Conflict(x) & Quiet(x)) -> Wrong(x))", "all x.((Misconduct(x) & Quiet(x)) -> Wrong(x))", "all x.((KeepsQuiet(x) & Disgrace(x)) -> Irresponsible(x))", "all x.((KeepsQuiet(x) & Disgraceful(x)) -> Wrong(x))", "all x.((Misconduct(x) & Quiet(x)) -> IsWrong(x))", "all x.((Wrong(x) & KeepsQuiet(x)) -> Misconduct(x))", "all x.((Wrong(x) & Quiet(x)) -> Misconduct(x))", "all x.((WrongToKeepQuiet(x) & Misconduct(x)) -> IsWrong(x))", "all x.((WrongToKeepQuiet(x) & Misconduct(x)) -> IsNecessary(x))"]}
{"id": "enwn_validation_662", "nl": "Offering someone something valuable in exchange for their cooperation is bribery.", "fol": "", "prediction": ["all x y.((Offer(x,y) & Person(y) & ValuableInExchangeForCooperation(x,y)) -> Bribery(x))", "all x.((Offer(x) & ValuableInExchangeForCooperation(x)) -> Bribery(x))", "all x.((Offering(x) & ValuableInExchangeForCooperation(x)) -> Bribery(x))", "all x y.((Offer(x) & Person(y) & ValuableInExchangeForCooperation(x,y)) -> Bribery(x))", "all x y.((Offering(x,y) & Person(y) & ValuableInExchangeForCooperation(x,y)) -> Bribery(x))", "all x.((OfferPerson(x) & ValuableInExchangeForCooperation(x)) -> Bribery(x))", "all x y.((Offer(x,y) & Person(y) & ValuableInExchangeForCooperation(y)) -> Bribery(x))", "all x y.((Offer(x,y) & Person(y) & ValuableInExchangeForCooperation(x)) -> Bribery(x))", "all x y.((Person(x) & Person(y) & OffersValuableInExchangeForCooperation(x,y)) -> Bribery(x))", "all x y.((Offer(x) & Person(y) & ValuableInExchangeForCooperation(y,x)) -> Bribery(x))", "all x y.((Offer(x,y) & Person(y)) -> Bribery(x))", "all x y.((Offer(x) & Person(y) & ValuableInExchangeForCooperation(y)) -> Bribery(x))", "all x y.((Offering(x,y) & Person(y)) -> Bribery(x))", "all x y.((Offering(x,y) & Person(y) & ValuableInExchangeForCooperation(y)) -> Bribery(x))", "all x y.((Offer(x,y) & Person(y) & ValuableInExchange(x,y)) -> Bribery(x))", "all x y.((Offering(x,y) & Person(y) & ValuableInExchangeForCooperation(x)) -> Bribery(x))"]}
{"id": "enwn_validation_663", "nl": "Jarad's project manager Mike offered him tickets to a sold-out concert in exchange for not discussing Mike's behavior in the office during an HR inquiry.", "fol": "", "prediction": ["all x y.((Jarad(x) & ProjectManager(y) & Mike(y)) -> (OfferedTicketsToSoldOutConcert(x,y) & -DiscussedBehavior(y,HRInquiry)))", "all x y.((Jarad(x) & ProjectManager(y) & Mike(y)) -> (OfferedTicketsToSoldOutConcert(x,y) & -DiscussedBehaviorInOffice(y,HRInquiry)))", "all x y.((JaradProjectManager(x) & ProjectManager(y) & Mike(y)) -> (OfferedTicketsToSoldOutConcert(x,y) & -DiscussedBehavior(y,HRInquiry)))", "all x y.((Jarad(x) & ProjectManager(y) & Mike(y)) -> (OfferedTicketsToSoldOutConcert(y,x) & -DiscussedBehavior(y,HRInquiry)))", "all x y.((Jarad(x) & ProjectManager(y) & Mike(y)) -> (OfferedTicketsToSoldOutConcert(x,y) & -DiscussedBehaviorInOffice(x,y)))", "all x y.((Jarad(x) & ProjectManager(y) & Mike(y)) -> (OfferedTicketsToSoldOutConcert(y,x) & -DiscussedBehaviorInOffice(y,x)))", "all x y.((JaradProjectManager(x) & ProjectManager(y) & Mike(y)) -> (OfferedTicketsToSoldOutConcert(x,y) & -DiscussedBehaviorInOffice(y,HRInquiry)))", "all x y.((Jarad(x) & ProjectManager(y) & Mike(y)) -> (OfferedTickets(y,x) & SoldOutConcert(y,x) & -DiscussedBehavior(y,HRInquiry)))", "all x y.((Jarad(x) & ProjectManager(y) & Mike(y)) -> (OfferedTickets(y,x) & SoldOutConcert(y,x) & -DiscussedBehaviorInOffice(y,x)))", "all x y.((Jarad(x) & ProjectManager(y) & Mike(y)) -> (OfferedTickets(x,y) & SoldOutConcert(y) & -DiscussedBehaviorInOffice(y)))", "all x y.((Jarad(x) & ProjectManager(y) & Mike(y)) -> (OfferedTicketsToSoldOutConcert(x,y) & -DiscussedBehaviorDuringHRInquiry(y)))", "all x y.((Jarad(x) & ProjectManager(y) & Mike(y)) -> (OfferedTickets(x,y) & SoldOutConcert(x) & -DiscussedBehaviorInOffice(y)))", "all x y.((Jarad(x) & ProjectManager(y) & Mike(y)) -> (OfferedTicketsToSoldOutConcert(x,y) & -DiscussedBehaviorDuringHRInquiry(y,x)))", "all x y.((JaradProjectManager(x) & ProjectManager(y) & Mike(y)) -> (OfferedTickets(x,y) & SoldOutConcert(y) & -DiscussedBehavior(y,HRInquiry)))", "all x y.((Jarad(x) & ProjectManager(y) & Mike(y)) -> (OfferedTickets(x,y) & SoldOutConcert(y) & -DiscussedBehavior(y)))", "all x y.((JaradProjectManager(x) & ProjectManager(y) & Mike(y)) -> (OfferedTickets(x,y) & SoldOutConcert(x) & -DiscussedBehavior(y,HRInquiry)))"]}
{"id": "enwn_validation_664", "nl": "Bribing someone to keep quiet about misconduct is unethical.", "fol": "", "prediction": ["all x y.((Bird(x) & Person(y) & KeepsQuiet(x,y)) -> Unethical(x))", "all x y.((Brings(x,y) & Person(y)) -> Unethical(x))", "all x y.((Brings(x,y) & Person(y) & KeepsQuiet(x,y)) -> Unethical(x))", "all x y.((Bird(x) & Person(y) & KeepsQuietAboutConflict(x,y)) -> Unethical(x))", "all x.((Birds(x) & KeepsQuiet(x)) -> Unethical(x))", "all x.((Brings(x) & KeepsQuiet(x)) -> Unethical(x))", "all x.((Birds(x) & KeepsQuietAboutConflict(x)) -> Unethical(x))", "all x y.((Breaker(x) & Person(y) & KeepsQuiet(x,y)) -> Unethical(x))", "all x y.((Birds(x) & Person(y) & KeepsQuiet(x,y)) -> Unethical(x))", "all x y.((Brings(x,y) & Person(y) & KeepsQuietAboutConflict(x,y)) -> Unethical(x))", "all x y.((Birding(x) & Person(y) & KeepsQuiet(x,y)) -> Unethical(x))", "all x y.((Brings(x,y) & Person(y) & KeepsQuietAboutConflict(x)) -> Unethical(x))", "all x y.((Bringer(x) & Person(y) & KeepsQuiet(x,y)) -> Unethical(x))", "all x y.((Brings(x,y) & Person(y) & KeepsQuiet(x)) -> Unethical(x))", "all x y.((Birds(x,y) & Person(y) & KeepsQuiet(x,y)) -> Unethical(x))", "all x y.((Bird(x) & Person(y) & KeepsQuietAboutConflict(x)) -> Unethical(x))"]}
{"id": "enwn_validation_665", "nl": "Mike was attempting to bribe Jarad to keep quiet about his misconduct by offering him the tickets.", "fol": "", "prediction": ["all x y.((Mike(x) & Jarad(y) & OffersTickets(x,y)) -> BribesToKeepQuiet(x,y))", "all x y.((Mike(x) & Jarad(y)) -> (AttemptsToBibe(x,y) & OffersTickets(x,y)))", "all x y.((Mike(x) & Jarad(y) & OffersTickets(x,y)) -> Bribes(x,y))", "all x y.((Mike(x) & Jarad(y)) -> (TryingToBibe(x,y) & OfferingTickets(x,y)))", "all x y.((Mike(x) & Jarad(y) & OfferingTickets(x,y)) -> BribesToKeepQuiet(x,y))", "all x y.((Mike(x) & Jarad(y)) -> (TryingToBbribe(x,y) & OfferingTickets(x,y)))", "all x y.((Mike(x) & Jarad(y) & OffersTickets(x,y)) -> BribesToKeepSilent(x,y))", "all x y.((Mike(x) & Jarad(y) & OffersTickets(x,y)) -> BribesToKeepQuietAboutConflict(x,y))", "all x y.((Mike(x) & Jarad(y)) -> BribesToKeepQuiet(x,y))", "all x y z.((Mike(x) & Jarad(y) & Tickets(z)) -> (AttemptsToBibe(x,y) & Offers(x,z)))", "all x y.((Mike(x) & Jarad(y) & OfferingTickets(x,y)) -> Bribes(x,y))", "all x y.((Mike(x) & Jarad(y) & OffersTickets(x,y)) -> WantsToBibeToKeepQuiet(x,y))", "all x y.((Mike(x) & Jarad(y) & OffersTickets(x,y)) -> TryingToBibeToKeepQuiet(x,y))", "all x y.((Mike(x) & Jarad(y) & OffersTickets(x,y)) -> WantsToBibe(x,y))", "all x y.((Mike(x) & Jarad(y) & OffersTickets(x,y)) -> WantsBirthToKeepQuiet(x,y))", "all x y.((Mike(x) & Jarad(y) & OffersTickets(x,y)) -> TryingToBibe(x,y))"]}
{"id": "enwn_validation_666", "nl": "It was unethical for Mike to offer Jarad the tickets.", "fol": "", "prediction": ["all x.((Mike(x) & OffersJaradTickets(x)) -> Unethical(x))", "All x.((Mike(x) & OffersJaradTickets(x)) -> Unethical(x))", "all x y.((Mike(x) & Jarad(y)) -> Unethical(x))", "all x y.((Mike(x) & Jarad(y)) -> Unethical(x,y))", "all x y.((Mike(x) & Jarad(y)) -> UnethicalToOfferTickets(x,y))", "all x.((Mike(x) & Jarad(x)) -> Unethical(x))", "all x y.((Mike(x) & Jarad(y) & OffersTickets(x,y)) -> Unethical(x))", "all x.((Mike(x) & OffersJarad(x)) -> Unethical(x))", "all x.((Mike(x) & Jarad(y)) -> Unethical(x))", "All x y.((Mike(x) & Jarad(y)) -> UnethicalToOfferTickets(x,y))", "All x.((Mike(x) & OffersJarad(x)) -> Unethical(x))", "All x y.((Mike(x) & Jarad(y)) -> Unethical(x))", "All x y.((Mike(x) & Jarad(y)) -> Unethical(x,y))", "All x.((Mike(x) & Jarad(x)) -> Unethical(x))", "All x.((Mike(x) & Jarad(y)) -> Unethical(x))", "all x.((Mike(x) & OffersJaradTickets(x)) -> Unethical(x))"]}
{"id": "enwn_validation_667", "nl": "Mike should not have offered Jarad the tickets.", "fol": "", "prediction": ["all x.((Mike(x) & Jarad(y)) -> -OfferedTickets(x,y))", "all x y.((Mike(x) & Jarad(y)) -> -OfferedTickets(x,y))", "all x.((Mike(x) & Jarad(x)) -> -OfferedTickets(x,y))", "all x.((Mike(x) & -OfferedTickets(x,Jarad)) -> -OfferedTickets(x,Jarad))", "all x.((Mike(x) & -OfferedJaradTickets(x)) -> -OfferedJaradTickets(x))", "all x.(Mike(x) -> -OfferedJaradTickets(x))", "all x y.((Mike(x) & Jarad(y)) -> -OfferedTicket(x,y))", "All x.((Mike(x) & Jarad(y)) -> -OfferedTickets(x,y))", "all x.(Mike(x) -> -OfferedTickets(x,Jarad))", "all x.((Mike(x) & Jarad(y)) -> -OwnedTickets(x,y))", "all x.((Mike(x) & Jarad(x)) -> -OfferedTickets(x,Jarad))", "all x y.((Mike(x) & Jarad(y)) -> -OwnedTickets(x,y))", "all x.((Mike(x) & Jarad(y)) -> -OfferedTicket(x,y))", "all x.((Mike(x) & Jarad(x)) -> -OwnedTickets(x,y))", "all x y.((Mike(x) & Jarad(y)) -> ShouldNotOfferedTickets(x,y))", "All x.((Mike(x) & Jarad(x)) -> -OfferedTickets(x,y))"]}
{"id": "enwn_validation_668", "nl": "If someone asks you for a small favor, it's polite to accept.", "fol": "", "prediction": ["all x.((Person(x) & AsksForSmallFavour(x)) -> PoliteToAccept(x))", "all x.((Person(x) & AsksForSmallFavor(x)) -> PoliteToAccept(x))", "all x.(SmallFavor(x) -> PoliteToAccept(x))", "all x.((AsksForSmallFavor(x) & PoliteToAccept(x)) -> SmallFavor(x))", "all x.(SmallFavour(x) -> PoliteToAccept(x))", "all x.((AsksForSmallFavour(x)) -> PoliteToAccept(x))", "all x y.((Person(x) & SmallFavor(y) & AsksFor(x,y)) -> PoliteToAccept(x))", "all x.((AsksForSmallFavour(x) & PoliteToAccept(x)) -> SmallFavor(x))", "all x.((AsksForSmallFavour(x) & PoliteToAccept(x)) -> PoliteToAccept(x))", "all x.((AsksForSmallFavor(x) & PoliteToAccept(x)) -> AsksForSmallFavor(x))", "all x.((Person(x) & AsksSmallFavour(x)) -> PoliteToAccept(x))", "all x.((AsksForSmallFavour(x) & PoliteToAccept(x)) -> SmallFavour(x))", "all x.((AsksForSmallFavour(x) & PoliteToAccept(x)) -> AsksForSmallFavour(x))", "all x.((Person(x) & AsksForSmallFavorite(x)) -> PoliteToAccept(x))", "all x.((AsksForSmallFavour(x) & PoliteToAccept(x)) -> SmallFavorite(x))", "all x.((AsksForSmallFavour(x) & PoliteToAccept(x)) -> AsksForSmallFavor(x))"]}
{"id": "enwn_validation_669", "nl": "Letting someone use the shower before you is a small favor.", "fol": "", "prediction": ["all x y.((Person(x) & Shower(y) & Uses(x,y)) -> SmallFavor(x))", "all x y.((Person(x) & Shower(y) & UsesBefore(x,y)) -> SmallFavor(x))", "all x y.((Person(x) & Shower(y) & Uses(x,y)) -> SmallFavorite(x))", "all x.((LettingPersonUseShower(x) & BeforeYou(x)) -> SmallFavor(x))", "all x y.((Person(x) & Shower(y) & LettingBefore(x,y)) -> SmallFavor(x))", "all x y.((Person(x) & Shower(y)) -> SmallFavor(x,y))", "all x y.((Person(x) & Shower(y) & LettingUse(x,y)) -> SmallFavor(x))", "all x y.((Person(x) & Shower(y) & Use(x,y)) -> SmallFavor(x))", "all x.((LetsPersonUseShower(x) & BeforeYou(x)) -> SmallFavor(x))", "all x y.((Person(x) & Shower(y) & UsesBefore(x,y)) -> SmallFavorite(x))", "all x y.((Person(x) & Shower(y) & Uses(x,y)) -> SmallFavour(x))", "all x y.((Person(x) & Shower(y) & Uses(x,y)) -> SmallFat(x))", "all x.((LettingPersonUseShower(x) & BeforeYou(x)) -> SmallFavorite(x))", "all x y.((Person(x) & Shower(y) & LettingBefore(x,y)) -> SmallFavorite(x))", "all x y.((Person(x) & Shower(y)) -> SmallFavor(x))", "all x.(LetsPersonUseShower(x) -> SmallFavor(x))"]}
{"id": "enwn_validation_670", "nl": "Elle's sister asked her if she could use the shower first.", "fol": "", "prediction": ["Elle's sister asked if she could usetheshowerFirst.", "Elle's sister asked if she could useShowerFirst.", "Elle's sister asked if she could usesShowerFirst.", "Elle's sister asked if she could use shower first.", "Elle's sister asked her if she could usetheshowerFirst.", "Elle's sister asked if she could usetheshowerfirst.", "Elle's sister asked if she could usetheShowerFirst.", "Elle's sister asked if she could use ShowerFirst.", "Elle's sister asked her if she could use the shower first.", "Elle's sister asked if she could use the shower first.", "Elle's sister asked if she could useshowerFirst.", "Elle's sister asked her if she could use shower first.", "Elle's sister asked if she could usestheshowerFirst.", "Elle's sister asked her if she could usesShowerFirst.", "Elle's sister asked her if she could usetheshowerfirst.", "Elle's sister asked if she could usesBathFirst."]}
{"id": "enwn_validation_671", "nl": "Elle ignored her sister's request and showered for 30 minutes.", "fol": "", "prediction": ["Elle ignored sister's request and showered for 30 minutes.", "Elle a ignoratSisterRequest(elle) & ShoweredFor30Minutes(elle))", "Elle ignored sister's request and showedered for 30 minutes.", "Elle a ignoratsSistersRequest(elle) & ShoweredFor30Minutes(elle))", "Elle a ignoratSisterRequest(e) & ShoweredFor30Minutes(e))", "Elle a ignoratsSisterRequest(elle) & ShoweredFor30Minutes(elle))", "Elle a ignoratSistersRequest(elle) & ShoweredFor30Minutes(elle))", "Elle a ignoratSisterRequest(elle,30) & Showered(elle,30))", "Elle a ignoratsSisterRequest(e) & ShoweredFor30Minutes(e))", "Elle a ignoratSisterRequest(elle,30) & ShoweredFor(elle,30))", "Elle ignored sister's request and showered for 30 minutes.", "Elle a ignoratsSisterRequest(elle,30) & Showered(elle,30))", "Elle a ignoratSisterRequest(e) & ShoweredFor30Minutes(e)", "Elle a ignoratSisterRequest(elle) & Showered(elle,30))", "Elle a ignoratSisterRequestAndShoweredFor30Minutes(ELLE)", "Elle a ignoratsSisterRequest(e) & ShoweredFor30Minutes(e)"]}
{"id": "enwn_validation_672", "nl": "Elle's sister was requesting a small favor.", "fol": "", "prediction": ["Elle's sister requested a small favor.", "Elle's sister requestedsSmallFavor(Shelby)", "Elle's sister requestedsSmallFavor(ELLE)", "Elle's sister was requesting a small favor.", "Elle's sister requestedSmallFavor(ELLE)", "Elle's sister requestedsSmallFavor(elle)", "Elle's sister requestedsSmallFavor(Ellie)", "Elle's sister requestedsSmallFavorite(ELLE)", "EllesSisterRequiresSmallFavor(ELLE)", "EllesSisterRequestedSmallFavor(ELLE)", "Elle's sister requestedsSmallFavor(elle,x))", "EllesSisterRequestedSmallFavor(ELLE)", "Elle's sister requestedsSmallFavor(elle,sister)", "EllesSisterRequiresSmallFavor(elle,x))", "Elle's sister requestedsSmallFavor(elle,x)", "EllesSisterRequestedSmallFavor(elle,x))"]}
{"id": "enwn_validation_673", "nl": "Elle ignored her sister's request for a small favor.", "fol": "", "prediction": ["all x y.((Ellie(x) & Sister(y)) -> IgnoredRequestForSmallFavor(x,y))", "all x y.((Sister(x) & Elle(y)) -> IgnoredRequestForSmallFavor(y,x))", "all x y.((Sister(x) & Elle(y)) -> IgnoredRequestForSmallFavor(x,y))", "all x y.((Sister(x) & Elle(y)) -> IgnoredRequestForSmallFavour(y,x))", "all x y.((Ellie(x) & Sister(y)) -> IgnoredRequestForSmallFavour(x,y))", "all x y.((Sister(x) & Elle(y)) -> IgnoredRequestForSmallFavour(x,y))", "all x y.((Ellie(x) & Sister(y)) -> IgnoredRequestForSmallFavorite(x,y))", "all x y.((Sister(x) & Elle(y)) -> IgnoredRequestForSmallFavorite(y,x))", "all x y.((Sister(x) & Elle(y)) -> IgnoredRequestForSmallFat(y,x))", "all x y.((Ellie(x) & Sister(y)) -> IgnoredRequestForSmallFat(x,y))", "all x y.((Sister(x) & Elle(y)) -> -RequestForSmallFavor(y,x))", "all x y.((Ellie(x) & Sister(y)) -> -RequestForSmallFavor(x,y))", "all x y.((Sister(x) & Elle(y)) -> -RequestForSmallFavour(y,x))", "all x y.((Sister(x) & Elle(y)) -> IgnoresRequestForSmallFavor(y,x))", "all x y.((Sister(x) & Elle(y)) -> IgnoredRequestForSmallFat(x,y))", "all x y.((Ellie(x) & Sister(y)) -> -RequestForSmallFavour(x,y))"]}
{"id": "enwn_validation_674", "nl": "It was impolite for Elle to ignore her sister's request.", "fol": "", "prediction": ["all x.(ImpoliteForEllenToIgnoreSisterRequest(x) -> ImpossibleForEllen(x))", "all x.((ImpoliteForEllie(x) & IgnoreSisterRequest(x)) -> IgnoreSisterRequest(x))", "all x.((ImpoliteForEllie(x) & IgnoreSisterRequest(x)) -> ImpossibleForEllie(x))", "all x.(ImpoliteForEllieToIgnoreSisterRequest(x) -> ImpossibleForEllie(x))", "all x.(ImpoliteForEllieToIgnoreSisterRequest(x) -> ImpossibleForEllieToIgnoreRequest(x))", "all x.(ImpoliteForEllieToIgnoreSisterRequest(x) -> ImpossibleForSheila(x))", "all x.(ImpoliteForEllieToIgnoreSisterRequest(x) -> IgnoreSisterRequest(x))", "all x.((ImpoliteForEllie(x) & IgnoreSisterRequest(x)) -> IgnoreRequest(x))", "all x.((ImpoliteForEllie(x) & IgnoreSisterRequest(x)) -> ImpoliteForEllie(x))", "all x.(ImpoliteForEllenToIgnoreSisterRequest(x) -> IgnoreSisterRequest(x))", "all x.(ImpoliteForEllenToIgnoreSisterRequest(x) -> ImpossibleForSheila(x))", "All x.(ImpoliteForEllieToIgnoreSisterRequest(x) -> ImpossibleForEllie(x))", "All x.(ImpoliteForEllieToIgnoreSisterRequest(x) -> IgnoreSisterRequest(x))", "all x.(ImpoliteForSheila(x) -> IgnoreSisterRequest(x))", "all x.((ImpoliteForEllie(x) & IgnoreSisterRequest(x)) -> IgnoresRequest(x))", "all x.((ImpoliteForEllie(x) & IgnoreSisterRequest(x)) -> ImpossibleForSheila(x))"]}
{"id": "enwn_validation_675", "nl": "Elle should not have ignored her sister's request.", "fol": "", "prediction": ["Elle ne should have ignoredSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n))", "Elle ne should have ignoredSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n)", "Elle ne should have ignoredSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n))", "Elle ne should have ignoredSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -Ignore(n)", "Elle ne should have ignoredSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) &", "Elle ne should have ignoredSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n))", "Elle ne should have ignoredSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n)", "Elle ne should have ignoredSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n)))", "Elle ne sabotagedSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n))", "Elle ne should have ignoredSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n))", "Elle ne should have ignoredSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n,n))", "Elle ne should have ignoredSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -Ignore", "Elle ne should have ignoredSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(x,n))", "Elle ne should have ignoredSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -Ignore(n) &", "Elle ne should have ignoredSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & Requirement(n)", "Elle ne should have ignoredSisterRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -IgnoredRequest(n) & -Ignorement(n)"]}
{"id": "enwn_validation_676", "nl": "It's okay to do things that are generally frowned upon if they have positive outcomes.", "fol": "", "prediction": ["all x.((FrownedOn(x) & PositiveOutcomes(x)) -> Okay(x))", "all x.((Doing(x) & GenerallyFownedOn(x) & PositiveOutcomes(x)) -> Okay(x))", "all x.((PositiveOutcomes(x) & FrownedOn(x)) -> Okay(x))", "all x.((Doing(x) & FrownedOn(x) & PositiveOutcomes(x)) -> Okay(x))", "all x.((Doing(x) & GenerallyFownedOn(x) & PositiveOutcomes(x)) -> OK(x))", "all x.((PositiveOutcomes(x) & FreownedOn(x)) -> Okay(x))", "all x.((PositiveOutcomes(x) & FrownedOn(x)) -> OkayToDo(x))", "all x.((Does(x) & GenerallyFownedOn(x) & PositiveOutcomes(x)) -> Okay(x))", "all x.((FrownedOn(x) & PositiveOutcomes(x)) -> OK(x))", "all x.((Doing(x) & FrownedOn(x) & PositiveOutcomes(x)) -> OK(x))", "all x.((FrownedOn(x) & PositiveOutcomes(x)) -> OkayToDo(x))", "all x.((FownedOn(x) & PositiveOutcomes(x)) -> Okay(x))", "all x.((PositiveOutcomes(x) & FrownedOn(x)) -> OKToDo(x))", "all x.((Does(x) & FrownedOn(x) & PositiveOutcomes(x)) -> Okay(x))", "all x.((PositiveOutcomes(x) & FrownedOn(x)) -> OK(x))", "all x.((PositiveOutcomes(x) & FreownedOn(x)) -> OkayToDo(x))"]}
{"id": "enwn_validation_677", "nl": "Lying is generally wrong.", "fol": "", "prediction": ["all x.(Liking(x) -> Worst(x))", "all x.(Lying(x) -> Worst(x))", "all x.(Liking(x) -> Wrong(x))", "all x.(Liking(x) -> Irresponsible(x))", "all x.(Lying(x) -> Wrong(x))", "all x.(Lying(x) -> Irresponsible(x))", "all x.(Liking(x) -> GenerallyWrong(x))", "all x.(Lying(x) -> GenerallyWrong(x))", "all x.(Living(x) -> Worst(x))", "all x.(Liking(x) -> Irregular(x))", "all x.(Liking(x) -> False(x))", "all x.(Lying(x) -> Irregular(x))", "all x.(Lying(x) -> False(x))", "exists x.(Liking(x) & Worst(x))", "all x.(Liking(x) -> Worse(x))", "all x.(Lying(x) -> Worse(x))"]}
{"id": "enwn_validation_678", "nl": "Xirong lied to his boss to protect his coworker from being fired for organizing a walk-out.", "fol": "", "prediction": ["all x y z.((Xirong(x) & Boss(y) & Coworker(z)) -> (LikedTo(x,y) & ProtectsFromFilm(x,z)))", "all x y.((Xirong(x) & Boss(y)) -> LiliedToProtectCoworker(x,y))", "all x y z.((Xirong(x) & Boss(y) & Coworker(z)) -> LiesToProtectFromFilm(x,y,z))", "all x y.((Xirong(x) & Boss(y)) -> LiesToProtect(x,y))", "all x y.((Xirong(x) & Boss(y)) -> LiliedToProtect(x,y))", "all x y z.((Xirong(x) & Boss(y) & Coworker(z)) -> LiliedToProtectFromFilm(x,y,z))", "all x y.((Xirong(x) & Boss(y)) -> LiliedToProtectCoworkerFromFilm(x,y))", "all x y.((Xirong(x) & Coworker(y)) -> LiliedToBossToProtectFromFilm(x,y))", "all x y.((Xirong(x) & Coworker(y)) -> LiesToBossToProtectFromFilm(x,y))", "all x y z.((Xirong(x) & Boss(y) & Coworker(z)) -> (LiliedTo(x,y) & ProtectsFromFilm(x,z)))", "all x y z.((Xirong(x) & Boss(y) & Coworker(z)) -> (LikedTo(x,y) & ProtectedFromFilm(x,z)))", "all x.((Xirong(x) & Boss(x)) -> LiliedToProtectCoworkerFromFilm(x))", "all x y z.((Xirong(x) & Boss(y) & Coworker(z) & WalkOut(z)) -> LiliedToProtectFromFilm(x,y,z))", "all x y.((Xirong(x) & Boss(y)) -> LiedToProtect(x,y))", "all x y z.((Xirong(x) & Boss(y) & Coworker(z) & WalkOut(z)) -> LiesToProtectFromFilm(x,y,z))", "all x y z.((Exirong(x) & Boss(y) & Coworker(z)) -> (LikedTo(x,y) & ProtectsFromFilm(x,z)))"]}
{"id": "enwn_validation_679", "nl": "Firing someone for organizing a walk-out is a form of retaliation.", "fol": "", "prediction": ["all x.((Firing(x) & OrganizingWalkOut(x)) -> Retaliation(x))", "all x y.((Firing(x,y) & WalkOut(y)) -> Retaliation(x))", "all x.((Firing(x) & OrganisesWalkOut(x)) -> Retaliation(x))", "all x.(FiringForOrganizingWalkOut(x) -> Retaliation(x))", "all x y.((Firing(x,y) & WalkOutOrganization(y)) -> Retaliation(x))", "all x.((FiringForWalkOut(x) & OrganisesWalkOut(x)) -> Retaliation(x))", "all x y.((Firing(x,y) & OrganizingWalkOut(y)) -> Retaliation(x))", "all x.((Firing(x) & OrganizesWalkOut(x)) -> Retaliation(x))", "all x y.((Firing(x,y) & WalkOut(y)) -> Retaliation(x))", "all x y.((Firing(x,y) & WalkOut(y)) -> FormOfRetaliation(x))", "all x.((Firing(x) & WalkOut(x)) -> Retaliation(x))", "all x.((Firing(x) & OrganisingWalkOut(x)) -> Retaliation(x))", "all x y.((Firing(x,y) & WalkOutOrganization(y)) -> Retaliation(x))", "all x y.((Firing(x,y) & WalkOut(y)) -> Retaliation(x,y))", "all x y.((Firing(x,y) & OrganizingWalkOut(x)) -> Retaliation(x))", "all x y.((Firing(x,y) & WalkOut(y)) -> FormOfRetaliation(x))"]}
{"id": "enwn_validation_680", "nl": "Preventing someone from doing something wrong is a good thing.", "fol": "", "prediction": ["all x y.((Person(x) & DoingWrong(y)) -> GoodThing(x))", "all x.((Person(x) & DoesWrong(x)) -> GoodThing(x))", "all x.(PreventsDoingWrong(x) -> GoodThing(x))", "all x.((Person(x) & DoingWrong(x)) -> GoodThing(x))", "all x.((PreventsDoingWrong(x) & Person(x)) -> GoodThing(x))", "all x.((PreventsPerson(x) & DoingWrong(x)) -> GoodThing(x))", "all x.(PreventsDoingWrong(x) -> GoodThing(x))", "all x y.((Person(x) & DoingWrong(y) & Prevents(x,y)) -> GoodThing(x))", "all x.(PreventsDamage(x) -> GoodThing(x))", "all x y.((Person(x) & DoingWrong(y)) -> GoodThing(x,y))", "all x.((Prevents(x,y) & Person(y)) -> GoodThing(x))", "all x y.((Prevents(x,y) & Person(y) & DoingWrong(y)) -> GoodThing(x))", "all x y.((Person(x) & DoingWrong(x,y)) -> GoodThing(x))", "all x.((PreventsDoingWrong(x) & Person(y)) -> GoodThing(x))", "all x.((Prevents(x) & Person(x)) -> GoodThing(x))", "all x y.((Person(x) & DoingWrong(x)) -> GoodThing(x))"]}
{"id": "enwn_validation_681", "nl": "Retaliating against worker organization is wrong.", "fol": "", "prediction": ["all x.(RetaliatingAgainstWorkerOrganization(x) -> Wrong(x))", "all x.(RetaliatingAgainstWorkerOrganization(x) -> Irresponsible(x))", "all x.(RetaliateAgainstWorkerOrganization(x) -> Wrong(x))", "all x.(RetaliateAgainstWorkerOrganization(x) -> Irresponsible(x))", "all x.(RetaliationAgainstWorkerOrganization(x) -> Wrong(x))", "all x.((RetaliateAgainstWorkerOrganization(x)) -> Irresponsible(x))", "all x.((RetaliateAgainstWorkerOrganization(x)) -> Wrong(x))", "all x y.((WorkerOrganization(x) & RetaliateAgainst(x,y)) -> Irresponsible(x))", "all x.(RetaliationAgainstWorkerOrganization(x) -> Irresponsible(x))", "all x y.((WorkerOrganization(x) & RetaliateAgainst(x,y)) -> Wrong(x))", "all x.((RetaliatingAgainstWorkerOrganization(x)) -> Irresponsible(x))", "all x.(RetaliatingAgainstWorkerOrganization(x) -> Worst(x))", "all x.((WorkerOrganization(x) & RetaliatesAgainst(x)) -> Wrong(x))", "all x.(RetaliatesAgainstWorkerOrganization(x) -> Irresponsible(x))", "all x.((WorkerOrganization(x) & RetaliatesAgainst(x)) -> Irresponsible(x))", "all x.(RetaliatesAgainstWorkerOrganization(x) -> Wrong(x))"]}
{"id": "enwn_validation_682", "nl": "It's okay to lie if it does more good than harm.", "fol": "", "prediction": ["all x.((Limit(x) & MoreGoodThanHarm(x)) -> Okay(x))", "all x.((Liking(x) & MoreGoodThanHarm(x)) -> Okay(x))", "all x.((Limit(x) & BetterThanHarm(x)) -> Okay(x))", "all x.((Liking(x) & BetterThanHarm(x)) -> Okay(x))", "all x.((Limit(x) & DoesMoreGoodThanHarm(x)) -> Okay(x))", "all x.((Limit(x) & DoesMoreGoodThanHarm(x)) -> Okay(x))", "all x.((Liking(x) & DoesMoreGoodThanHarm(x)) -> Okay(x))", "all x.((Liking(x) & DoesMoreGoodThanHarm(x)) -> Okay(x))", "all x.((Lie(x) & MoreGoodThanHarm(x)) -> Okay(x))", "all x.((Limit(x) & MoreGoodThanHarm(x)) -> OK(x))", "all x.((Lie(x) & BetterThanHarm(x)) -> Okay(x))", "all x.((Liking(x) & MoreGoodThanHarm(x)) -> OK(x))", "all x.((Liking(x) & BetterThanHarm(x)) -> OK(x))", "all x.((Limits(x) & MoreGoodThanHarm(x)) -> Okay(x))", "all x.((Limit(x) & BetterThanHarm(x)) -> OK(x))", "all x.((Limit(x) & DoesMoreGoodThanHarm(x)) -> OK(x))"]}
{"id": "enwn_validation_683", "nl": "Xirong lied to his boss to prevent him from retaliating against worker organization.", "fol": "", "prediction": ["all x y.((Xirong(x) & Boss(y)) -> LiesToPreventRetaliation(x,y))", "all x y.((Xirong(x) & Boss(y)) -> LiliedToPreventRetaliation(x,y))", "all x y z.((Xirong(x) & Boss(y) & WorkerOrganization(z)) -> LiesToPreventRetaliation(x,y,z))", "all x y.((Xirong(x) & Boss(y)) -> IlliedToPreventRetaliation(x,y))", "all x.((Xirong(x) & Boss(x)) -> LiesToPreventRetaliation(x))", "all x.((Xirong(x) & Boss(x)) -> LiliedToPreventRetaliation(x))", "all x y z.((Xirong(x) & Boss(y) & WorkerOrganization(z)) -> LiliedToPreventRetaliation(x,y,z))", "all x y.((Xirong(x) & Boss(y)) -> LyingToPreventRetaliation(x,y))", "all x.((Xirong(x) & LiesToBoss(x)) -> PreventsRetaliationAgainstWorkerOrganization(x))", "all x y.((Xirong(x) & Boss(y)) -> LiedToPreventRetaliation(x,y))", "all x y.((Xirong(x) & Boss(y)) -> L\u00fcdgedToPreventRetaliation(x,y))", "all x y.((Xirong(x) & Boss(y)) -> LynkedToPreventRetaliation(x,y))", "all x.((Xirong(x) & Boss(x)) -> IlliedToPreventRetaliation(x))", "all x y z.((Xirong(x) & Boss(y) & WorkersOrganization(z)) -> LiesToPreventRetaliation(x,y,z))", "all x y z.((Xirong(x) & Boss(y) & WorkerOrganization(z)) -> LyingToPreventRetaliation(x,y,z))", "all x y z.((Xirong(x) & Boss(y) & EmployeeOrganization(z)) -> LiesToPreventRetaliation(x,y,z))"]}
{"id": "enwn_validation_684", "nl": "Preventing someone from retaliating against worker organization is a good thing.", "fol": "", "prediction": ["all x.((PreventsRetaliation(x) & WorkerOrganization(x)) -> GoodThing(x))", "all x.(PreventsRetaliation(x) -> GoodThing(x))", "all x.((Person(x) & PreventsRetaliation(x)) -> GoodThing(x))", "all x y.((WorkerOrganization(x) & Person(y) & PreventsRetaliation(y,x)) -> GoodThing(x))", "all x.((PreventsRetaliation(x) & WorksAgainstWorkerOrganization(x)) -> GoodThing(x))", "all x.(PreventsRetaliationAgainstWorkerOrganization(x) -> GoodThing(x))", "all x y.((WorkerOrganization(x) & Person(y)) -> PreventsRetaliation(y,x))", "all x y.((Person(x) & WorkerOrganization(y)) -> PreventsRetaliation(x,y))", "all x y.((Person(x) & WorkerOrganization(y) & RetaliatesAgainst(x,y)) -> GoodThing(x))", "all x.((Person(x) & PreventsRetaliationAgainstWorkerOrganization(x)) -> GoodThing(x))", "all x y.((WorkerOrganization(x) & Person(y) & RetaliatesAgainst(y,x)) -> GoodThing(x))", "all x.((PreventsRetaliation(x) & WorkerOrganization(y)) -> GoodThing(x))", "all x.((PreventsRetaliation(x) & EmployeeOrganization(x)) -> GoodThing(x))", "all x.((PreventsRetaliation(x) & WorkersOrganization(x)) -> GoodThing(x))", "all x y.((Person(x) & WorkerOrganization(y) & RetaliateAgainst(x,y)) -> GoodThing(x))", "all x y.((WorkerOrganization(x) & Person(y) & PreventsRetaliation(x,y)) -> GoodThing(x))"]}
{"id": "enwn_validation_685", "nl": "The consequence of Xirong's lie was a good thing.", "fol": "", "prediction": ["all x.((Lird(x) & Xirong(x)) -> GoodThing(x))", "all x.((Little(x) & Xirong(x)) -> GoodThing(x))", "all x.((ConsequenceOfXirongsLie(x)) -> GoodThing(x))", "all x.((ConsequenceOfXirongsLie(x) & GoodThing(x)) -> GoodThing(x))", "all x.((ConsequenceOfXirong'sLie(x)) -> GoodThing(x))", "all x.((Lird(x) & Xirong)) -> GoodThing(x))", "all x.((LirdConsequence(x) & Xirong(x)) -> GoodThing(x))", "all x.((Lie(x) & Xirong(x)) -> GoodThing(x))", "all x.((Little(x) & Xirong)) -> GoodThing(x))", "all x.((Limit(x) & Xirong(x)) -> GoodThing(x))", "all x.((Lie(x) & Xirong(x)) -> GoodThing(x))", "all x.((Lird(x) & Xirong(x)) -> Good(x))", "all x.((ConsequenceOfXirong'sLie(x) & GoodThing(x)) -> GoodThing(x))", "all x.((Consequence(x) & XirongsLie(x)) -> GoodThing(x))", "all x.((Likel(x) & Xirong(x)) -> GoodThing(x))", "all x.((Little(x) & Xirong(x)) -> Good(x))"]}
{"id": "enwn_validation_686", "nl": "It was okay for Xirong to lie to his boss.", "fol": "", "prediction": ["all x.((Xirong(x) & Boss(x)) -> OkayToLieTo(x,x))", "all x.((Xirong(x) & Boss(x)) -> OkayToLieTo(x))", "all x.((Xirong(x) & Boss(x)) -> OkayToLieTo(x,y))", "all x y.((Xirong(x) & Boss(y)) -> OkayToLieTo(x,y))", "all x.((Xirong(x) & Boss(x)) -> OKToLieTo(x,x))", "all x.((Xirong(x) & Boss(x)) -> OKToLieTo(x))", "all x.((Xirong(x) & Boss(x)) -> OKToLieTo(x,y))", "all x.((Xirong(x) & Boss(x)) -> Okay(x))", "all x.((Xirong(x) & Boss(y)) -> OkayToLieTo(x,y))", "all x.((Xirong(x) & Boss(x)) -> OkayToLie(x))", "all x y.((Xirong(x) & Boss(y)) -> OKToLieTo(x,y))", "all x.((Xirong(x) & Boss(x)) -> OkToLieTo(x,x))", "all x.((Xirong(x) & Boss(x)) -> OkToLieTo(x))", "all x.((Xirong(x) & Boss(x)) -> OkayLiking(x))", "all x.((Xirong(x) & Boss(x)) -> OkToLieTo(x,y))", "all x.((Xirong(x) & Boss(x)) -> AlrightToLieTo(x,x))"]}
{"id": "enwn_validation_687", "nl": "Dita cut the brakes on Martin's car after he cheated on her.", "fol": "", "prediction": ["all x y z.((Dita(x) & Martin(y) & Car(z) & CheatedOn(y,z)) -> CutsBrakesOn(x,y,z))", "all x y z.((Dita(x) & Martin(y) & Car(z) & CheatedOn(y,z)) -> CutBrakesOn(x,y,z))", "all x y z.((Dita(x) & Martin(y) & Car(z) & CheatedOn(y,z)) -> CutsBrakes(x,y,z))", "all x y.((Dita(x) & Martin(y) & CheatedOn(x,y)) -> CutsBrakesOn(x,y))", "all x y.((Dita(x) & Martin(y) & CheatedOn(y,x)) -> CutsBrakesOn(x,y))", "all x y z.((Dita(x) & Martin(y) & Car(z) & CheatedOn(y,z)) -> CutsBrakesOn(x,y,z))", "all x y.((Dita(x) & Martin(y) & CheatedOn(x,y)) -> CutsBrakes(x,y))", "all x y z.((Dita(x) & Martin(y) & Car(z) & CheatedOn(y,z)) -> CutBrakes(x,y,z))", "all x y z.((Dita(x) & Martin(y) & Car(z) & CheatedOn(y,z)) -> CutBrakesOn(x,y,z))", "all x y.((Dita(x) & Martin(y) & CheatedOn(y,x)) -> CutsBrakes(x,y))", "all x y z.((Dita(x) & Martin(y) & Car(z) & CheatedOn(x,y,z)) -> CutsBrakesOn(x,y,z))", "all x y.((Dita(x) & Martin(y) & CheatedOn(x,y)) -> CutBrakesOn(x,y))", "all x y z.((Dita(x) & Martin(y) & Car(z) & CheatedOn(y,z)) -> CutsBrakes(x,y,z))", "all x y.((Dita(x) & Martin(y) & CheatedOn(y,x)) -> CutBrakesOn(x,y))", "all x y z.((Dita(x) & Martin(y) & Car(z) & CheatedOn(y,z)) -> CutBreaksOn(x,y,z))", "all x y z.((Dita(x) & Martin(y) & Car(z) & CheatedOn(x,y,z)) -> CutBrakesOn(x,y,z))"]}
{"id": "enwn_validation_688", "nl": "Someone cheating on you is not a good enough reason to put them in mortal danger.", "fol": "", "prediction": ["all x.((Person(x) & CheatingOnYou(x)) -> -GoodEnoughRightToPutInMortalDanger(x))", "all x.((CheatingOnYou(x) & -GoodEnoughRightToPutInMortalDanger(x)) -> -GoodEnoughRightToPutInMortalDanger(x))", "all x.((Person(x) & CheatingOnYou(x)) -> -GoodEnoughRightToPlaceInMortalDanger(x))", "all x.((Person(x) & CheatingOnYou(x)) -> -GoodEnoughRightToMortalDanger(x))", "all x.((Person(x) & CheatingOnYou(x)) -> -GoodEnoughRightToPutInMortalDange(x))", "all x.((Person(x) & CheatingOnYou(x)) -> -GoodEnoughRightToMortalDange(x))", "all x y.((Person(x) & CheatingOn(x,y)) -> -GoodEnoughRightToPutInMortalDanger(x))", "all x.((Person(x) & CheatingOn(x)) -> -GoodEnoughRightToPutInMortalDanger(x))", "all x y.((Person(x) & CheatingOn(x,y)) -> -GoodEnoughRightToPutInMortalDanger(x,y))", "all x.((CheatingOnYou(x) & -GoodEnoughRightToMortalDanger(x)) -> -CheatingOnYou(x))", "all x.((CheatingOnYou(x) & -GoodEnoughRight(x)) -> MortalDanger(x))", "all x.(CheatingOn(x) -> -GoodEnoughRightToPutInMortalDanger(x))", "all x.((CheatingOnYou(x) & -GoodEnoughRight(x)) -> MortalDangerous(x))", "all x.(CheatsOn(x) -> -GoodEnoughRightToPutInMortalDanger(x))", "all x y.((Person(x) & CheatingOn(x,y)) -> -GoodEnoughRightToPlaceInMortalDanger(x,y))", "all x.((Person(x) & CheatingOn(x)) -> -GoodEnoughRightToMortalDanger(x))"]}
{"id": "enwn_validation_689", "nl": "Cutting the brakes on someone's car puts them in mortal danger.", "fol": "", "prediction": ["all x y.((CuttingBrakes(x) & Car(y)) -> PutsInMortalDanger(x,y))", "all x y.((CuttingBrakes(x,y) & Car(y)) -> PutsInMortalDanger(x,y))", "all x y.((Breaks(x) & Car(y) & Cuts(x,y)) -> PutsInMortalDanger(x,y))", "all x y.((Car(x) & Car(y) & CutsBrakesOn(x,y)) -> MortalDangerous(x,y))", "all x y.((Car(x) & Car(y) & CutsBrakesOn(x,y)) -> MortalDangerous(x))", "all x y.((Car(x) & Car(y) & CutsBrakesOn(x,y)) -> PutsInMortalDanger(x,y))", "all x y.((Breaks(x) & Car(y) & Cuts(x,y)) -> MortalDangerous(x,y))", "all x y.((Breaks(x) & Car(y) & Cuts(x,y)) -> PutsInMortalDangerous(x,y))", "all x y.((CuttingBrakes(x) & Car(y)) -> PutsInMortalDangerous(x,y))", "all x y.((Brake(x) & Car(y) & Cuts(x,y)) -> PutsInMortalDanger(x,y))", "all x y.((Car(x) & Person(y) & CutsBrakesOn(x,y)) -> MortalDangerous(y))", "all x y.((Car(x) & Car(y) & CutsBrakesOn(x,y)) -> MortalDanger(x,y))", "all x y.((Breaks(x) & Car(y) & Cuts(x,y)) -> MortalDanger(x,y))", "all x y.((Car(x) & Car(y) & CutsBrakesOn(x,y)) -> PutsInMortalDangerous(x,y))", "all x y.((CuttingBrakes(x) & Car(y)) -> MortalDangerous(x,y))", "all x y.((Car(x) & Car(y) & CutsBrakes(x,y)) -> MortalDangerous(x,y))"]}
{"id": "enwn_validation_690", "nl": "Someone cheating on you is not a good enough reason to cut the brakes on their car.", "fol": "", "prediction": ["all x y.((Person(x) & Car(y) & CheatingOn(x,y)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x y.((CheatsOn(x,y) & Car(y)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x y.((CheatingOn(x,y) & Car(y)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x.((Person(x) & CheatingOnYou(x)) -> -GoodEnoughRightToCutBrakesOnCar(x))", "all x.((Person(x) & CheatingOnYou(x)) -> -GoodEnoughRightToCutBrakes(x))", "all x y.((Cheating(x) & Car(y)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x y.((CheatingOn(x) & Car(y)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x y.((Person(x) & Car(y) & CheatingOn(x,y)) -> -GoodEnoughRightToCutBrakesOn(x,y))", "all x y.((Person(x) & Car(y) & CheatingOn(x,y)) -> -GoodEnoughToCutBrakes(x,y))", "all x.((CheatingOn(x) & Car(y)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x.((CheatsOn(x) & Car(y)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x y.((Person(x) & CheatingOn(x,y)) -> -GoodEnoughRightToCutBrakes(x,y))", "all x y.((Person(x) & Car(y) & CheatingOn(x,y)) -> -GoodEnoughRightToCutBrakes(x))", "all x y.((CheatsOn(x,y) & Car(y)) -> -GoodEnoughRightToCutBrakesOn(x,y))", "all x y.((Person(x) & Car(y) & CheatingOn(x,y)) -> -GoodEnoughRightToCutBreaks(x,y))", "all x y.((Person(x) & Car(y) & CheatingOn(x,y)) -> -GoodEnoughBreaks(x,y))"]}
{"id": "enwn_validation_691", "nl": "Dita should not have cut the brakes on Martin's car.", "fol": "", "prediction": ["Dita should not have cut brakes on Martin's car.", "all x y.((Dita(x) & MartinCar(y)) -> -CutBrakes(x,y))", "all x y.((Dita(x) & MartinCar(y)) -> -CutsBrakes(x,y))", "all x y.((Dita(x) & Martin(y)) -> -CutsBrakes(x,y))", "all x y.((Dita(x) & Martin(y)) -> -CutsBrakesOn(x,y))", "Dita should not have cut the brakes on Martin's car.", "all x y.((Dita(x) & Martin(y)) -> -CutBrakes(x,y))", "all x.((Dita(x) & MartinCar(x)) -> -CutsBrakes(x))", "all x.((Dita(x) & MartinCar(x)) -> -CutBrakes(x))", "all x.((Dita(x) & MartinCar(y)) -> -CutBrakes(x,y))", "all x y.((Dita(x) & Martin(y)) -> -CutBrakesOn(x,y))", "all x.((Dita(x) & MartinCar(y)) -> -CutsBrakes(x,y))", "all x.((Dita(x) & MartinCar(x)) -> -CutBrakes(x,MartinCar))", "all x.((Dita(x) & MartinsCar(x)) -> -CutBrakes(x))", "all x.((Dita(x) & MartinsCar(x)) -> -CutsBrakes(x))", "all x.((Dita(x) & MartinCar(x)) -> -CutsBrakes(x,MartinCar))"]}
{"id": "enwn_validation_692", "nl": "It's okay to break rules that aren't important.", "fol": "", "prediction": ["all x.((Rules(x) & -Important(x)) -> OKToBreak(x))", "all x.((Rules(x) & -Important(x)) -> OK(x))", "all x.((Rules(x) & -Important(x)) -> Okay(x))", "all x.((Rules(x) & -Important(x)) -> OkayToBreak(x))", "all x.((Rule(x) & -Important(x)) -> OKToBreak(x))", "all x y.((Rule(x) & Rule(y) & -Important(y)) -> OKToBreak(x,y))", "all x.((Rule(x) & -Important(x)) -> OK(x))", "all x.((Rule(x) & -Important(x)) -> OkayToBreak(x))", "all x.((Rule(x) & -Important(x)) -> Okay(x))", "all x.((Rules(x) & -Important(x)) -> OKToBreak(x,y))", "all x.((Right(x) & -Important(x)) -> OKToBreak(x))", "all x.((BreaksRules(x) & -Important(x)) -> OK(x))", "all x.((Right(x) & -Important(x)) -> OK(x))", "all x.((Right(x) & -Important(x)) -> Okay(x))", "all x y.((Rule(x) & Rule(y) & -Important(y)) -> OK(x,y))", "all x y.((Rule(x) & Rule(y) & -Important(y)) -> Okay(x,y))"]}
{"id": "enwn_validation_693", "nl": "Movie theater rules say that no outside food is allowed.", "fol": "", "prediction": ["all x y.((MovieTheaterRule(x) & OutsideFood(y)) -> -Allowed(x,y))", "all x.(MovieTheaterRule(x) -> -OutsideFood(x))", "all x y.((MovieTheaterRules(x) & OutsideFood(y)) -> -Allowed(x,y))", "all x.(MovieTheaterRules(x) -> -OutsideFoodAllowed(x))", "all x.(MovieTheaterRule(x) -> -OutsideFoodAllowed(x))", "all x.((MovieTheaterRule(x) & -OutsideFood(x)) -> -Allowed(x))", "all x.((MovieTheaterRules(x) & -OutsideFood(x)) -> -Allowed(x))", "all x y.((MovieTheaterRule(x) & OutsideFood(y)) -> -Allows(x,y))", "all x.(MovieTheaterRules(x) -> -OutsideFood(x))", "all x y.((MovieTheaterRule(x) & OutsideFood(y)) -> -Admitted(x,y))", "all x.((MovieTheaterRules(x) & -OutsideFood(x)) -> Allowable(x))", "all x y.((MovieTheaterRules(x) & OutsideFood(y)) -> -Allows(x,y))", "all x y.((MovieTheater(x) & OutsideFood(y)) -> -Allowed(x,y))", "all x.((MovieTheaterRule(x) & -OutsideFood(x)) -> Allowable(x))", "all x.(MovieTheaterRule(x) -> -ExternalFood(x))", "all x y.((MovieTheaterRule(x) & OutsideFood(y)) -> -Leads(x,y))"]}
{"id": "enwn_validation_694", "nl": "Rules about not bringing outside food into establishments exist to increase on-site concession sales.", "fol": "", "prediction": ["all x.((Rule(x) & -BringsOutsideFood(x)) -> IncreasesOnSiteConcessionSales(x))", "all x.((Rule(x) & -BringingOutsideFood(x)) -> IncreasesOnSiteConcessionSales(x))", "all x.((Rule(x) & -BringingOutsideFoodIntoEstablishments(x)) -> IncreasesOnSiteConcessionSales(x))", "all x.((Rules(x) & -BringingOutsideFood(x)) -> IncreasesOnSiteConcessionSales(x))", "all x.((Rules(x) & -BringingOutsideFoodIntoEstablishments(x)) -> IncreasesOnSiteConcessionSales(x))", "all x.((Rule(x) & -BringsOutsideFoodIntoEstablishments(x)) -> IncreasesOnSiteConcessionSales(x))", "all x.((Rules(x) & -BringsOutsideFood(x)) -> IncreasesOnSiteConcessionSales(x))", "all x.((Rule(x) & -BringsOutsideFood(x) & Establishments(x)) -> IncreasesOnSiteConcessionSales(x))", "all x.((Rule(x) & -BringsOutsideFood(x)) -> IncreasesConcessionSales(x))", "all x.((Rules(x) & -BringOutsideFood(x)) -> IncreasesOnSiteConcessionSales(x))", "all x.((Rule(x) & -BringingOutsideFood(x)) -> IncreasesConcessionSales(x))", "all x y.((Rule(x) & -BringingOutsideFood(x,y)) -> IncreasesOnSiteConcessionSales(x))", "all x.((Rules(x) & -BringsOutsideFood(x)) -> IncreasesConcessionSales(x))", "all x.((Rules(x) & -BringingOutsideFood(x)) -> IncreasesConcessionSales(x))", "all x.((Rule(x) & -BringsOutsideFood(x) & Establishments(x)) -> IncreasesConcessionSales(x))", "all x.((Rule(x) & -BringingOutsideFoodIntoEstablishments(x)) -> IncreasesConcessionSales(x))"]}
{"id": "enwn_validation_695", "nl": "Increasing on-site concession sales isn't important.", "fol": "", "prediction": ["all x.((ConcessionSales(x) & IncreasedOnSite(x)) -> -Important(x))", "all x.((IncreasedOnSiteConcessionSales(x) & -Important(x)) -> -Important(x))", "all x.((OnSiteConcessionSales(x) & -Increased(x)) -> -Important(x))", "all x.((ConcessionSales(x) & Increased(x)) -> -Important(x))", "all x.((ConcessionSales(x) & Increasing(x)) -> -Important(x))", "all x.((IncreasesOnSiteConcessionSales(x) & -Important(x)) -> -Important(x))", "all x.((OnSiteConcessionSales(x) & -Important(x)) -> -Important(x))", "all x.((OnSiteConcessionSales(x) & -Increased(x)) -> -Influential(x))", "all x.((OnSiteConcessionSales(x) & Increased(x)) -> -Important(x))", "all x.(IncreasedOnSiteConcessionSales(x) -> -Important(x))", "all x.((ConcessionSales(x) & OnSite(x)) -> -Important(x))", "all x.(ConcessionSales(x) -> -Important(x))", "all x.(OnSiteConcessionSales(x) -> -Important(x))", "all x.(IncreasesOnSiteConcessionSales(x) -> -Important(x))", "all x.((ConcessionSales(x) & Increase(x)) -> -Important(x))", "all x.((IncreasedOnSiteConcessionSales(x) & -Important(x)) -> -Increased(x))"]}
{"id": "enwn_validation_696", "nl": "Sam broke the theater rules by bringing chips into the movie.", "fol": "", "prediction": ["all x y.((Sam(x) & Movie(y)) -> BreaksTheaterRules(x,y))", "all x.((Sam(x) & BringsChips(x)) -> BreaksTheaterRules(x))", "all x y.((Sam(x) & Movie(y)) -> BreaksTheaterRulesByBringingChips(x,y))", "all x y.((Sam(x) & Movie(y) & BringsChips(x,y)) -> BreaksTheaterRules(x,y))", "all x.((Sam(x) & BringsChipsIntoMovie(x)) -> BreaksTheaterRules(x))", "all x.((Sam(x) & BreaksTheaterRules(x)) -> BringsChipsIntoMovie(x))", "all x y.((Sam(x) & Movie(y) & BringsChips(x,y)) -> BreaksTheaterRules(x))", "all x y.((Sam(x) & Theater(y) & BringsChips(x,y)) -> BreaksRules(x,y))", "all x y.((Sam(x) & Movie(y)) -> BreaksTheaterRulesByBringingChipsInto(x,y))", "all x y z.((Sam(x) & Theater(y) & Movie(z)) -> BreaksRulesByBringingChips(x,y,z))", "all x y z.((Sam(x) & TheaterRules(y) & Chips(z)) -> Breaks(x,y))", "all x y z.((Sam(x) & Theater(y) & Chips(z)) -> BreaksRules(x,y,z))", "all x y z.((Sam(x) & Theater(y) & Chip(z)) -> BreaksRules(x,y,z))", "all x y z.((Sam(x) & Theater(y) & Movie(z) & BringsChips(x,y,z)) -> BreaksRules(x,y))", "all x y.((Sam(x) & Theater(y)) -> BreaksRulesByBringingChips(x,y))", "all x y z.((Sam(x) & TheaterRules(y) & Chips(z)) -> Breaks(x,y,z))"]}
{"id": "enwn_validation_697", "nl": "Rules about not bringing food into establishments aren't important.", "fol": "", "prediction": ["all x.((Rule(x) & -BringingFoodIntoEstablishments(x)) -> -Important(x))", "all x.((Rule(x) & -BringsFoodIntoEstablishments(x)) -> -Important(x))", "all x.((Rules(x) & -BringingFoodIntoEstablishments(x)) -> -Important(x))", "all x.((Rule(x) & -BringingFoodIntoEtablissements(x)) -> -Important(x))", "all x.((Rule(x) & -BringFoodIntoEstablishments(x)) -> -Important(x))", "all x.((Rule(x) & -BringingFood(x)) -> -Important(x))", "all x.((Rules(x) & -BringFoodIntoEstablishments(x)) -> -Important(x))", "all x.((Rule(x) & -BringsFood(x)) -> -Important(x))", "all x.((Rule(x) & -BringingFoodIntoEntertainments(x)) -> -Important(x))", "all x.((Rule(x) & -BringsFoodIntoEtablissements(x)) -> -Important(x))", "all x.((Rule(x) & -BringingFoodIntoEtablishments(x)) -> -Important(x))", "all x.((Rule(x) & -BringsFoodIntoEtablishments(x)) -> -Important(x))", "all x.((Rule(x) & -BringsFoodInto(x)) -> -Important(x))", "all x.((Rules(x) & -BringingFood(x)) -> -Important(x))", "all x.((Rule(x) & -BringingFoodIntoEstablishments(x)) -> -InstantImportant(x))", "all x.((Rule(x) & -BringsFoodIntoEstablishments(x)) -> -InstantImportant(x))"]}
{"id": "enwn_validation_698", "nl": "The movie theater rule that says no outside food is allowed is not important.", "fol": "", "prediction": ["all x.((MovieTheaterRule(x) & -OutsideFood(x)) -> -Important(x))", "all x.((MovieTheaterRule(x) & SaysNoOutsideFood(x)) -> -Important(x))", "all x.((MovieTheaterRule(x) & -OutsideFoodAllowed(x)) -> -Important(x))", "all x.((MovieTheaterRight(x) & -OutsideFood(x)) -> -Important(x))", "all x.((MovieTheaterRule(x) & -OutdoorFood(x)) -> -Important(x))", "all x.((MovieTheaterRule(x) & -ExternalFood(x)) -> -Important(x))", "all x.((MovieTheaterRule(x) & NoOutsideFood(x)) -> -Important(x))", "all x.((MovieTheaterRule(x) & -OutsideFoodAlert(x)) -> -Important(x))", "all x.((MovieTheaterRule(x) & -OutsideFoodAdmitted(x)) -> -Important(x))", "all x.((MovieTheaterRight(x) & SaysNoOutsideFood(x)) -> -Important(x))", "all x.((MovieTheaterRig(x) & -OutsideFood(x)) -> -Important(x))", "all x.((MovieTheaterR\u00e8glement(x) & -OutsideFood(x)) -> -Important(x))", "all x.((MovieTheaterRule(x) & -OutsideFood(x)) -> -Instant(x))", "all x.((MovieTheaterRichthon(x) & -OutsideFood(x)) -> -Important(x))", "all x.((MovieTheaterRule(x) & SaysNoOutsideFood(x)) -> -Instant(x))", "all x.((MovieTheaterRule(x) & -OutsideFoodAllowed(x)) -> -Instant(x))"]}
{"id": "enwn_validation_699", "nl": "It's okay to break the movie theater rule that says no outside food is allowed.", "fol": "", "prediction": ["all x.((MovieTheaterRule(x) & -OutsideFood(x)) -> OkayToBreak(x))", "all x.((MovieTheaterRule(x) & -OutsideFood(x)) -> Okay(x))", "all x.((MovieTheaterRule(x) & -OutsideFood(x)) -> OKToBreak(x))", "all x.((MovieTheaterRule(x) & -OutsideFood(x)) -> OK(x))", "all x.((MovieTheater(x) & -OutsideFood(x)) -> OkayToBreak(x))", "all x.((MovieTheaterRight(x) & -OutsideFood(x)) -> OkayToBreak(x))", "all x.((MovieTheater(x) & -OutsideFood(x)) -> OKToBreak(x))", "all x.((MovieTheaterRight(x) & -OutsideFood(x)) -> Okay(x))", "all x y.((MovieTheaterRule(x) & OutsideFood(y)) -> OKToBreak(x,y))", "all x.((MovieTheater(x) & -OutsideFood(x)) -> Okay(x))", "all x.((MovieTheaterRight(x) & -OutsideFood(x)) -> OKToBreak(x))", "all x.((MovieTheaterRule(x) & NoOutsideFood(x)) -> Okay(x))", "all x.((MovieTheaterRig(x) & -OutsideFood(x)) -> OkayToBreak(x))", "all x.((MovieTheaterRule(x) & SaysNoOutsideFood(x)) -> Okay(x))", "all x.((MovieTheaterRight(x) & -OutsideFood(x)) -> OK(x))", "all x.((MovieTheaterResult(x) & -OutsideFood(x)) -> OkayToBreak(x))"]}
{"id": "enwn_validation_700", "nl": "It was okay for Sam to take the chips into the theater.", "fol": "", "prediction": ["all x.((Sam(x) & TakesChipsIntoTheater(x)) -> OK(x))", "all x.((Sam(x) & TakesChipsIntoTheater(x)) -> Okay(x))", "all x y.((Sam(x) & Chips(y)) -> OkayToTakeIntoTheater(x,y))", "all x y z.((Sam(x) & Chips(y) & Theater(z)) -> OkayToTakeInto(x,y,z))", "all x y.((Sam(x) & Theater(y)) -> TakesChipsInto(x,y))", "all x y z.((Sam(x) & Chips(y) & Theater(z)) -> OKToTakeInto(x,y,z))", "all x y.((Sam(x) & Chips(y)) -> OKToTakeIntoTheater(x,y))", "all x y z.((Sam(x) & Chips(y) & Theater(z)) -> OkayToTake(x,y,z))", "all x y.((Sam(x) & Chips(y)) -> OkayToTakeToTheater(x,y))", "all x y z.((Sam(x) & Chips(y) & Theater(z)) -> OkayToTakeTo(x,y,z))", "all x y.((Sam(x) & Theater(y)) -> TakesChips(x,y))", "all x y.((Sam(x) & Theater(y)) -> OkayToTakeChips(x,y))", "all x.((Sam(x) & TakesChips(x)) -> Okay(x))", "all x y z.((Sam(x) & Chips(y) & Theater(z)) -> OKToTake(x,y,z))", "all x y.((Sam(x) & Chips(y) & Theater(z)) -> OkayToTakeInto(x,y,z))", "all x y z.((Sam(x) & Chips(y) & Theater(z)) -> OKToTakeTo(x,y,z))"]}
{"id": "enwn_validation_701", "nl": "A physical response to a remark is escalation.", "fol": "", "prediction": ["all x.((Remark(x) & PhysicalResponse(x)) -> Escalation(x))", "all x.((PhysicalResponse(x) & Remark(x)) -> Escalation(x))", "all x y.((PhysicalResponse(x) & Remark(y)) -> Escalation(x,y))", "all x.(Response(x) -> Escalation(x))", "all x y.((PhysicalResponse(x) & Remark(y)) -> Escalation(x))", "all x y.((Remark(x) & PhysicalResponse(y)) -> Escalation(x))", "all x y.((Remark(x) & PhysicalResponse(x,y)) -> Escalation(x))", "all x.((Remark(x) & PhysicalResponse(x)) -> Escalation(x))", "all x y.((Remark(x) & Remark(y)) -> Escalation(x,y))", "all x y.((Remark(x) & PhysicalResponse(y)) -> Escalation(x,y))", "all x.((PhysicalResponse(x) & Remark(x)) -> Escalation(x))", "all x y.((Remark(x) & PhysicalResponse(x)) -> Escalation(y))", "all x y.((Remark(x) & Remark(y)) -> Escalation(x))", "all x y.((Remark(x) & PhysicalResponse(x) & Remark(y)) -> Escalation(x))", "all x y z.((PhysicalResponse(x) & Remark(y) & Remark(z)) -> Escalation(x,y,z))", "all x y z.((PhysicalResponse(x) & Remark(y) & Remark(z)) -> Escalation(x))"]}
{"id": "enwn_validation_702", "nl": "Luis dumped his soda on the guy sitting in front of him because the guy made a snide remark about Ravens fans.", "fol": "", "prediction": ["all x y z.((Luis(x) & Guy(y) & RavensFan(z)) -> DumpedSodaOn(x,y,z))", "all x y.((Luis(x) & Guy(y) & SittingInFrontOf(y,x)) -> DumpedSoda(x,y))", "all x y.((Luis(x) & Guy(y) & SittingInFrontOf(x,y)) -> DumpedSoda(x,y))", "all x y.((Luis(x) & Guy(y) & SittingInFrontOf(y,x) & RavensFans(y)) -> DumpedSoda(x,y))", "all x y z.((Luis(x) & Guy(y) & RavensFans(z)) -> DumpedSodaOn(x,y,z))", "all x y.((Luis(x) & Guy(y) & SittingInFrontOf(y,x)) -> DumpedSodaOn(x,y))", "all x y z.((Luis(x) & Guy(y) & RavensFan(z)) -> DumpedSoda(x,y,z))", "all x y.((Luis(x) & Guy(y) & SittingInFrontOf(y,x) & RavensFans(y)) -> DumpedSodaOn(x,y))", "all x y.((Luis(x) & Guy(y) & SittingInFrontOf(y,x)) -> DumpedSodaForSnideRemark(x,y))", "all x y.((Luis(x) & Guy(y) & SittingInFrontOf(x,y)) -> DumpedSodaOn(x,y))", "all x y.((Luis(x) & Guy(y) & SittingInFrontOf(y,x)) -> DumpedSodaForRemark(x,y))", "all x y z.((Luis(x) & Guy(y) & Ravens(z)) -> DumpedSodaOn(x,y,z))", "all x y z.((Luis(x) & Guy(y) & RavensFan(z)) -> DumpedSodaOn(x,y))", "all x y z.((Luis(x) & Guy(y) & RavensFan(z)) -> DumpedSoda(x,y))", "all x y.((Luis(x) & Guy(y) & SittingInFrontOf(y,x)) -> DumpedSodaBecauseRemark(x,y))", "all x y.((Luis(x) & Guy(y)) -> DumpedSodaOn(x,y))"]}
{"id": "enwn_validation_703", "nl": "You shouldn't escalate conflicts.", "fol": "", "prediction": ["all x.((Conflict(x) & -Inescalating(x)) -> -Inescalating(x))", "all x.((Conflict(x) & -Inescalate(x)) -> -Inescalate(x))", "all x.((Conflict(x) & -Inescalating(x)) -> -(Inescalating(x) -> -Inescalating(x)))", "all x.((Conflict(x) & -Inescalate(x)) -> -(Inescalate(x) & Inescalate(x))))", "all x.((Conflict(x) & -Inescalate(x)) -> -(Inescalate(x) & Inescalate(x)))", "all x.((Conflict(x) & -Inescalating(x)) -> -(Inescalating(x) | Inescalating(x))))", "all x.((Conflict(x) & -Inescalating(x)) -> -(Inescalating(x) & Inescalating(x))))", "all x.((Conflict(x) & -Inescalating(x)) -> -(Inescalating(x) -> Inescalating(x)))", "all x.((Conflict(x) & -Inescalate(x)) -> -(Inescalate(x) | Inescalate(x))))", "all x.((Conflict(x) & -Inescalating(x)) -> -(Inescalating(x) & Inescalating(x)))", "all x.((Conflict(x) & -Inescalating(x)) -> -(Inescalating(x) -> Conflict(x)))", "all x.(Conflict(x) -> -Escalation(x))", "all x.((Conflict(x) & -Inescalating(x)) -> -(Inescalating(x) & Conflict(x))))", "all x.((Conflict(x) & -Inescalate(x)) -> -(Inescalate(x) & Conflict(x))))", "all x.(Conflict(x) -> -Inescalating(x))", "all x.((Conflict(x) & -Inescalate(x)) -> -(Inescalate(x) & Conflict(x)))"]}
{"id": "enwn_validation_704", "nl": "Luis escalated the situation by dumping his soda on the guy.", "fol": "", "prediction": ["all x y.((Luis(x) & Guy(y)) -> DumpedSodaOn(x,y))", "all x y z.((Luis(x) & Soda(y) & Guy(z)) -> DumpedOn(x,y,z))", "all x y.((Luis(x) & Guy(y)) -> DumpedSoda(x,y))", "all x y z.((Luis(x) & Soda(y) & Guy(z) & DumpedOn(x,y,z)) -> EscalatedSituation(x,y,z))", "all x y z.((Luis(x) & Guy(y) & Soda(z)) -> DumpedOn(x,y,z))", "all x y.((Luis(x) & Guy(y) & DumpedSoda(x,y)) -> EscalatedSituation(x,y))", "all x y z.((Luis(x) & Soda(y) & Guy(z)) -> Dumped(x,y,z))", "all x y z.((Luis(x) & Soda(y) & Guy(z) & DumpedOn(x,y,z)) -> EscalatedSituation(x,y))", "all x y.((Luis(x) & Guy(y) & DumpedSodaOn(x,y)) -> EscalatedSituation(x,y))", "all x y z.((Luis(x) & Soda(y) & Guy(z)) -> EscalatedSituation(x,y,z))", "all x y z.((Luis(x) & Soda(y) & Guy(z) & DumpedOn(x,y,z)) -> InescalatedSituation(x,y,z))", "all x y z.((Luis(x) & Guy(y) & Soda(z) & DumpedOn(x,y,z)) -> EscalatedSituation(x,y,z))", "all x y z.((Luis(x) & Guy(y) & Soda(z) & DumpedOn(x,y,z)) -> EscalatedSituation(x,y))", "all x y.((Luis(x) & Guy(y) & DumpedSoda(x,y)) -> InescalatedSituation(x,y))", "all x y z.((Luis(x) & Soda(y) & Guy(z) & DumpedOn(x,y,z)) -> EscalatedSituation(x))", "all x y z.((Luis(x) & Soda(y) & Guy(z) & DumpedOn(x,y,z)) -> IntimidatedSituation(x,y,z))"]}
{"id": "enwn_validation_705", "nl": "Luis shouldn't have dumped his soda on the guy.", "fol": "", "prediction": ["all x y.((Luis(x) & Soda(y)) -> -DumpedOn(x,y))", "all x y.((Luis(x) & Guy(y)) -> -DumpedSodaOn(x,y))", "all x y.((Luis(x) & Guy(y)) -> -DumpedSoda(x,y))", "all x y z.((Luis(x) & Soda(y) & Guy(z)) -> -DumpedOn(x,y,z))", "all x y.((Luis(x) & Soda(y)) -> -Dumped(x,y))", "all x.((Luis(x) & DumpedSodaOn(x)) -> -DumpedSodaOn(x))", "all x.((Luis(x) & DumpedSodaOn(x)) -> -DumpedSoda(x))", "all x.((Luis(x) & Guy(y)) -> -DumpedSodaOn(x,y))", "all x y z.((Luis(x) & Soda(y) & Guy(z)) -> -Dumped(x,y,z))", "all x.((Luis(x) & DumpedSoda(x)) -> -DumpedSoda(x))", "all x.((Luis(x) & Guy(y)) -> -DumpedSoda(x,y))", "all x.((Luis(x) & Guy(x)) -> -DumpedSodaOn(x,y))", "all x y.((Luis(x) & Man(y)) -> -DumpedSodaOn(x,y))", "all x.((Luis(x) & -DumpedSodaOn(x)) -> -DumpedSodaOn(x))", "all x.((Luis(x) & DumpedSoda(x)) -> -DumpedSodaOn(x))", "all x.((Luis(x) & -DumpedSodaOn(x)) -> -DumpedSoda(x))"]}
{"id": "enwn_validation_706", "nl": "Esme copied a section of the Wikipedia article on Thomas Jefferson to put in her school report.", "fol": "", "prediction": ["all x y.((Esme(x) & WikipediaArticle(y) & ThomasJefferson(y)) -> Copy(x,y))", "all x y z.((Esme(x) & WikipediaArticle(y) & ThomasJefferson(z)) -> Copy(x,y,z))", "all x y.((Esme(x) & Wikipedia(y)) -> (CopiesSection(x,y) & PutsInSchoolReport(x,y)))", "all x y z.((Esme(x) & WikipediaArticle(y) & ThomasJefferson(z)) -> (Copies(x,y) & PutsInSchoolReport(x,z)))", "all x y.((Esme(x) & WikipediaArticle(y)) -> (Copies(x,y) & PutsInSchoolReport(x,y)))", "all x y.((Esme(x) & WikipediaArticle(y) & ThomasJeffrey(y)) -> Copy(x,y))", "all x y z.((Esme(x) & WikipediaArticle(y) & ThomasJeffrey(z)) -> (Copies(x,y) & PutsInSchoolReport(x,z)))", "all x y z.((Esme(x) & WikipediaArticle(y) & ThomasJeffrey(z)) -> Copy(x,y,z))", "all x y z.((Esme(x) & WikipediaArticle(y) & ThomasJefferson(z)) -> (Copies(x,y,z) & PutsInSchoolReport(x)))", "all x y z.((Esme(x) & Wikipedia(y) & ThomasJeffrey(z)) -> (CopiesSection(x,y) & PutsInSchoolReport(x,z)))", "all x y z.((Esme(x) & WikipediaArticle(y) & ThomasJeffrey(z)) -> (Copies(x,y,z) & PutsInSchoolReport(x)))", "all x y.((Esme(x) & WikipediaArticle(y)) -> Copy(x,y))", "all x y z.((Esme(x) & Wikipedia(y) & ThomasJeffrey(z)) -> (CopiesSection(x,y,z) & PutsInSchoolReport(x)))", "all x y z.((Esme(x) & WikipediaArticle(y) & SchoolReport(z)) -> Copy(x,y,z))", "all x y z.((Esme(x) & WikipediaArticle(y) & ThomasJefferson(z)) -> (Copies(x,y,z) & PutsInSchoolReport(x,y)))", "all x y.((Esme(x) & WikipediaArticle(y)) -> (Copies(x,y) & PutsInSchoolReport(x)))"]}
{"id": "enwn_validation_707", "nl": "If you copy something without attribution, you're representing it as your own work.", "fol": "", "prediction": ["all x.((Copy(x) & -Attribution(x)) -> RepresentsOwnWork(x))", "all x.((Copy(x) & -Attribution(x)) -> RepresentsAsOwnWork(x))", "all x.((Copy(x) & -Attribution(x)) -> RepresentsWork(x))", "all x.((Copies(x) & -Attribution(x)) -> RepresentsOwnWork(x))", "all x.((Copy(x) & -Attribution(x)) -> RepelsAsOwnWork(x))", "all x.((Copy(x) & -Attribution(x)) -> OwnWork(x))", "all x.((Copys(x) & -Attribution(x)) -> RepresentsOwnWork(x))", "all x.((CopyWithoutAttribution(x) & CopyWithoutAttribution(x)) -> RepresentsAsOwnWork(x))", "all x.((CopyWithoutAttribution(x) & CopyWithoutAttribution(x)) -> RepresentsOwnWork(x))", "all x.((Copy(x) & -Attribution(x)) -> ReplacingOwnWork(x))", "all x.((Copies(x) & -Attribution(x)) -> RepresentsAsOwnWork(x))", "all x.((Copy(x) & -Attribution(x)) -> ReprezentsOwnWork(x))", "all x y.((Copy(x) & Work(y) & -Attribution(x)) -> RepresentsAsOwnWork(x,y))", "all x y.((Copy(x) & Work(y) & -Attribution(x)) -> RepresentsAsOwn(x,y))", "all x.((Copy(x) & WithoutAttribution(x)) -> RepresentsOwnWork(x))", "all x.((CopyWithoutAttribution(x) & CopyWithoutAttribution(x)) -> RepresentsWork(x))"]}
{"id": "enwn_validation_708", "nl": "Esme didn't attribute the copied section.", "fol": "", "prediction": ["all x.(Esme(x) -> -AttributesCopySection(x))", "all x.((Esme(x) & CopyedSection(x)) -> -Attributes(x,copyedSection))", "all x.(Esme(x) -> -AttributesCopiedSection(x))", "all x.(Esme(x) -> -AttributesCopy(x))", "all x.(Esme(x) -> -AttributesCopedSection(x))", "all x.((Esme(x) & CopyedSection(x)) -> -Attributes(x,y))", "all x.((Esme(x) & CopyedSection(x)) -> -Attributes(x,copyedSection,copyedSection))", "all x.((Esme(x) & CopyedSection(x)) -> -Attributes(x,Copy))", "all x.((Esme(x) & CopyedSection(x)) -> -Attributes(x,copyingSection))", "exists x.(Esme(x) & -AttributesCopySection(x))", "all x.((Esme(x) & CopyedSection(x)) -> -Attribute(x,copyedSection))", "all x.((Esme(x) & CopyedSection(x)) -> -Attributes(x,CopySection))", "all x.((Esme(x) & CopyedSection(x)) -> -Attributes(x,CreatedSection))", "exists x.(Esme(x) & -AttributesCopy(x))", "all x.((Esme(x) & CopyedSection(x)) -> -Attributes(x,copy))", "all x.((Esme(x) & CopyedSection(x)) -> -Attributes(x,copying))"]}
{"id": "enwn_validation_709", "nl": "Copying someone else's writing and representing it as your own work is plagiarism.", "fol": "", "prediction": ["all x y.((Copies(x,y) & Writing(y) & RepresentsAsOwnWork(x,y)) -> Plagiarism(x))", "all x.((CopiesWriting(x) & RepresentsAsOwnWork(x)) -> Plagiarism(x))", "all x y.((Copying(x,y) & Writing(y) & Replacing(x,y)) -> Plagiarism(x))", "all x y.((Copies(x,y) & Writing(y) & Represents(x,y)) -> Plagiarism(x))", "all x y.((Copies(x,y) & Writing(y) & Replacing(x,y)) -> Plagiarism(x))", "all x y.((Copying(x,y) & Writing(y) & RepresentsAsOwnWork(x,y)) -> Plagiarism(x))", "all x y.((Copys(x,y) & Writing(y) & RepresentsAsOwnWork(x,y)) -> Plagiarism(x))", "all x y.((Copy(x,y) & Writing(y) & Replacing(x,y)) -> Plagiarism(x))", "all x y.((Copying(x,y) & Writing(y) & ReplacingAsOwnWork(x,y)) -> Plagiarism(x))", "all x.((CopiesWriting(x) & RepresentsWork(x)) -> Plagiarism(x))", "all x y.((Copies(x,y) & Writing(y) & Repels(x,y)) -> Plagiarism(x))", "all x y.((Copys(x,y) & Writing(y) & Replacing(x,y)) -> Plagiarism(x))", "all x y.((Copys(x,y) & Writing(y) & Represents(x,y)) -> Plagiarism(x))", "all x y.((Copy(x,y) & Writer(y) & RepresentsWork(x,y)) -> Plagiarism(x))", "all x y.((Copies(x,y) & Writing(y) & RepresentsWork(x,y)) -> Plagiarism(x))", "all x y.((Copies(x,y) & Writing(y)) -> Plagiarism(x))"]}
{"id": "enwn_validation_710", "nl": "Plagiarism is wrong.", "fol": "", "prediction": ["all x.(Plagiarism(x) -> Wrong(x))", "all x.(Plagiarism(x) -> Worst(x))", "all x.(Plagiarism(x) -> Irresponsible(x))", "all x.(Plagiarism(x) -> Wrong(x))", "all x.(Plagiarism(x) -> Irresponsible(x))", "all x.(Plagiarism(x) -> Worst(x))", "all x.((Plagiarism(x) & Wrong(x)) -> Plagiarism(x))", "all x.((Plagiarism(x) & Irresponsible(x)) -> Plagiarism(x))", "all x.((Plagiarism(x) & Worst(x)) -> Plagiarism(x))", "all x.(Plagiarism(x) -> False(x))", "all x.(Plagiarism(x) -> Irreversible(x))", "all x.(Plagiarism(x) -> Irregular(x))", "All x.(Plagiarism(x) -> Wrong(x))", "all x.(Plagiarism(x) -> False(x))", "All x.(Plagiarism(x) -> Worst(x))", "all x.(Plagiarism(x) -> Right(x))"]}
{"id": "enwn_validation_711", "nl": "Esme represented the copied section as her own work.", "fol": "", "prediction": ["all x y.((Esme(x) & CopyedSection(y)) -> RepresentedAsOwnWork(x,y))", "all x y.((Esme(x) & CopyedSection(y)) -> ReputedAsOwnWork(x,y))", "all x y.((Esme(x) & CopycatSection(y)) -> RepresentedAsOwnWork(x,y))", "all x y.((Esme(x) & CopycatSection(y)) -> ReputedAsOwnWork(x,y))", "all x y z.((Esme(x) & CopyedSection(y) & CopyedSection(z)) -> RepresentedAsOwnWork(x,y,z))", "all x.((Esme(x) & CopyedSection(x)) -> OwnWork(x))", "all x y z.((Esme(x) & CopyedSection(y) & CopyedSection(z)) -> ReputedAsOwnWork(x,y,z))", "all x y.((Esme(x) & CopypedSection(y)) -> RepresentedAsOwnWork(x,y))", "all x y.((Esme(x) & CopypedSection(y)) -> ReputedAsOwnWork(x,y))", "all x.((Esme(x) & CopiesSection(x)) -> OwnWork(x))", "all x y.((Esme(x) & CopyedSection(y)) -> OwnWork(x,y))", "all x y.((Esme(x) & CopyedSection(y)) -> RepresentsAsOwnWork(x,y))", "all x y z.((Esme(x) & CopyedSection(y) & CopyedSection(z)) -> RepliedAsOwnWork(x,y,z))", "all x.((Esme(x) & CopycatSection(x)) -> OwnWork(x))", "all x y.((Esme(x) & CopycatSection(y)) -> OwnWork(x,y))", "all x.((Esme(x) & CopypedSection(x)) -> OwnWork(x))"]}
{"id": "enwn_validation_712", "nl": "Esme copied someone else's writing from Wikipedia and represented it as her own work.", "fol": "", "prediction": ["all x y z.((Esme(x) & Writing(y) & Wikipedia(z)) -> (Copies(x,y) & Represents(x,z)))", "all x y.((Esme(x) & Writing(y)) -> (CopiesFromWikipedia(x,y) & RepresentsAsOwnWork(x,y)))", "all x y.((Esme(x) & Writing(y)) -> (Copies(x,y) & Represents(x,y)))", "all x y z.((Esme(x) & Writing(y) & Wikipedia(z)) -> (Copies(x,y,z) & Represents(x,y)))", "all x y z.((Esme(x) & Writing(y) & Wikipedia(z)) -> (Copies(x,y,z) & Represents(x,y,z)))", "all x y z.((Esme(x) & Writing(y) & Wikipedia(z)) -> (CopiesFrom(x,y,z) & RepresentsAsOwnWork(x)))", "all x y z.((Esme(x) & Writing(y) & Wikipedia(z)) -> (CopiesFrom(x,y,z) & RepresentsAsOwnWork(x,y)))", "all x y z.((Esme(x) & Writing(y) & Wikipedia(z)) -> (Copies(x,y) & RepresentsAsOwnWork(x,z)))", "all x y z.((Esme(x) & Writing(y) & Wikipedia(z)) -> (Copys(x,y) & Represents(x,z)))", "all x y.((Esme(x) & Writing(y) & FromWikipedia(x,y)) -> (Copies(x,y) & Represents(x,y)))", "all x y z.((Esme(x) & Writing(y) & Wikipedia(z)) -> (Copies(x,y) & Represents(x,y,z)))", "all x y z.((Esme(x) & Writing(y) & Wikipedia(z)) -> (CopiesFrom(x,y) & RepresentsAsOwnWork(x,z)))", "all x y.((Esme(x) & Wikipedia(y)) -> (CopiesWriting(x,y) & RepresentsWork(x,y)))", "all x y.((Esme(x) & Writing(y)) -> (CopiesFromWikipedia(x,y) & Represents(x,y)))", "all x y.((Esme(x) & Writer(y)) -> (Copies(x,y) & Represents(x,y)))", "all x y.((Esme(x) & Writing(y)) -> (Copys(x,y) & Represents(x,y)))"]}
{"id": "enwn_validation_713", "nl": "Copying someone else's writing and representing it as your own work is wrong.", "fol": "", "prediction": ["all x y.((Copying(x,y) & Writing(y) & Replacing(x,y)) -> IsWrong(x))", "all x y.((Copying(x,y) & Writing(y) & Replacing(x,y)) -> Wrong(x))", "all x y.((Copies(x,y) & Writing(y) & RepresentsAsOwnWork(x,y)) -> Wrong(x))", "all x.((CopiesWriting(x) & RepresentsAsOwnWork(x)) -> Wrong(x))", "all x y.((Copy(x,y) & Writing(y) & Replacing(x,y)) -> IsWrong(x))", "all x y.((Copy(x,y) & Writing(y) & Replacing(x,y)) -> Wrong(x))", "all x y.((Copies(x,y) & Writing(y) & RepresentsAsOwnWork(x,y)) -> IsWrong(x))", "all x y.((Copies(x,y) & Writing(y) & Replacing(x,y)) -> IsWrong(x))", "all x y.((Copies(x,y) & Writing(y) & Represents(x,y)) -> Wrong(x))", "all x y.((Copies(x,y) & Writing(y) & Replacing(x,y)) -> Wrong(x))", "all x y.((Copies(x,y) & Writing(y) & Represents(x,y)) -> IsWrong(x))", "all x y.((Copying(x,y) & Writing(y) & ReplacingAsOwnWork(x,y)) -> Wrong(x))", "all x y.((Copying(x,y) & Writing(y) & ReplacingAsOwnWork(x,y)) -> IsWrong(x))", "all x y.((Copies(x,y) & Writing(y) & RepresentsAsOwnWork(x,y)) -> Worst(x))", "all x y.((Copy(x,y) & Writer(y) & RepresentsWork(x,y)) -> Wrong(x))", "all x y.((Copying(x,y) & Writing(y) & Replacing(x,y)) -> IsWrong(x,y))"]}
{"id": "enwn_validation_714", "nl": "Esme shouldn't have copied from Wikipedia without attributing the copied section.", "fol": "", "prediction": ["all x.(Esme(x) -> -CopiesFromWikipedia(x))", "all x.(Esme(x) -> -CopiesFromWikipediaWithoutAttributingCopies(x))", "all x y.((Esme(x) & Wikipedia(y)) -> -Copies(x,y))", "all x y.((Esme(x) & Wikipedia(y) & AttributesCopy(x,y)) -> -CopiesFrom(x,y))", "all x y.((Esme(x) & Wikipedia(y) & AttributesCopy(x,y)) -> -Copies(x,y))", "all x y.((Esme(x) & Wikipedia(y)) -> -CopiesFrom(x,y))", "all x y.((Esme(x) & Wikipedia(y) & AttributesCopy(x,y)) -> -CopysFrom(x,y))", "all x.(Esme(x) -> -CopysFromWikipedia(x))", "all x y.((Esme(x) & Wikipedia(y) & Copies(x,y)) -> -Copies(x,y))", "all x y.((Esme(x) & Wikipedia(y)) -> -CopiesWithoutAttributing(x,y))", "all x.((Esme(x) & CopyFromWikipedia(x) & AttributesCopy(x)) -> -CopiesFromWikipedia(x))", "all x.(Esme(x) -> -CopiesFromWikipediaWithoutAttributingCopy(x))", "all x.((Esme(x) & CopyFromWikipedia(x) & AttributesCopy(x)) -> -HasCopyFromWikipedia(x))", "all x y.((Esme(x) & Wikipedia(y) & Copy(x,y)) -> -Copies(x,y))", "all x y.((Esme(x) & Wikipedia(y) & AttributesCopy(x,y)) -> -Copys(x,y))", "all x y.((Esme(x) & Wikipedia(y) & AttributesCopy(x,y)) -> -Copy(x,y))"]}
{"id": "enwn_validation_715", "nl": "You shouldn't induce people to help you do bad things.", "fol": "", "prediction": ["all x.((Person(x) & -InducesToHelpDoBadThings(x)) -> -InducesToHelpDoBadThings(x))", "all x.((Person(x) & -InducesToHelp(x,badThings)) -> -InducesToHelp(x,badThings))", "all x.((InducesBadThings(x) & -InducesBadThings(x)) -> -InducesBadThings(x))", "all x.((InducesPeople(x) & -HelpsDoBadThings(x)) -> -InducesPeople(x))", "all x.((InducesPerson(x) & -HelpsDoBadThings(x)) -> -InducesPerson(x))", "all x.((InducePerson(x) & DoBadThings(x)) -> -InducePerson(x))", "all x.((InducesPeople(x) & DoseBadThings(x)) -> -InducesPeople(x))", "all x y.((Induces(x,y) & Person(y)) -> -HelpsDoBadThings(x,y))", "all x.((InducesBadThings(x) & -InducesBadThings(x)) -> -HelpsDoBadThings(x))", "all x.((Person(x) & -InducesToHelpDoBadThings(x)) -> -InducingToHelpDoBadThings(x))", "all x.((InducePerson(x) & -HelpDoBadThings(x)) -> -InducePerson(x))", "all x.((InducePeople(x) & DoBadThings(x)) -> -InducePeople(x))", "all x y.((Person(x) & Person(y)) -> -InducesToHelpDoBadThings(x,y))", "all x.((InducesBadThings(x) & -InducesBadThings(x)) -> -InducingBadThings(x))", "all x.((InducesPeople(x) & DoBadThings(x)) -> -InducesPeople(x))", "all x y.((Person(x) & BadThing(y)) -> -InducesToHelp(x,y))"]}
{"id": "enwn_validation_716", "nl": "Faking drug test results in competitive sports is cheating.", "fol": "", "prediction": ["all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSport(x)) -> Cheating(x))", "all x.((FakingDrugTestResults(x) & InCompetitiveSports(x)) -> Cheating(x))", "all x y.((FakingDrugTestResults(x) & CompetitiveSports(y)) -> Cheating(x))", "all x y.((FakingDrugTestResults(x) & CompetitiveSport(y)) -> Cheating(x))", "all x.((FakingDrugTestResultsInCompetitiveSports(x)) -> Cheating(x))", "all x.(FakingDrugTestResultsInCompetitiveSports(x) -> Cheating(x))", "all x y.((DrugTestResult(x) & CompetitiveSport(y) & Faking(x,y)) -> Cheating(x))", "all x.(FakingDrugTestResults(x) -> Cheating(x))", "all x.((FakingDrugTestResults(x) & CompetitorSports(x)) -> Cheating(x))", "all x.((CompetitiveSport(x) & FakingDrugTestResults(x)) -> Cheating(x))", "all x.((Faking(x) & DrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSport(x)) -> Cheating(x))", "all x y.((FakingDrugTestResults(x) & CompetitiveSports(y)) -> Cheating(x,y))", "all x.((DrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))"]}
{"id": "enwn_validation_717", "nl": "Giles paid his friend for a urine sample to pass a drug test for a crew competition.", "fol": "", "prediction": ["all x y.((Giles(x) & Friends(y)) -> PaidForUrineSample(x,y))", "all x y.((Giles(x) & Friends(y)) -> PaidForUrineSampleToPassDrugTest(x,y))", "all x y z.((Giles(x) & Friends(y) & UrineSample(z)) -> PaidForToPassDrugTest(x,y,z))", "all x y.((Giles(x) & Friends(y)) -> PaidForUrine(x,y))", "all x y z.((Giles(x) & Freund(y) & UrineSample(z)) -> PaidForToPassDrugTest(x,y,z))", "all x y.((Giles(x) & friend(y)) -> PaidForUrineSample(x,y))", "all x y z.((Giles(x) & friend(y) & UrineSample(z)) -> PaidForToPassDrugTest(x,y,z))", "all x y.((Giles(x) & friend(y)) -> PaidForUrineSampleToPassDrugTest(x,y))", "all x y.((Giles(x) & Friends(y)) -> PaidForUrineSampleToPassDrugTestForCrewCompetition(x,y))", "all x y z.((Giles(x) & Friends(y) & UrineSample(z)) -> PaidFor(x,y,z))", "all x y.((Giles(x) & Freund(y)) -> PaidForUrineSample(x,y))", "all x y z.((Giles(x) & Friend(y) & UrineSample(z)) -> PaidForToPassDrugTest(x,y,z))", "all x y z.((Giles(x) & Freund(y) & UrineSample(z)) -> PaidFor(x,y,z))", "all x y.((Giles(x) & Friends(y)) -> PaidForUrineSampling(x,y))", "all x y.((Giles(x) & friend(y)) -> PaidForUrineSampleToPassDrugTestForCrewCompetition(x,y))", "all x y z.((Giles(x) & friend(y) & UrineSample(z)) -> PaidFor(x,y,z))"]}
{"id": "enwn_validation_718", "nl": "Using someone else's urine to pass a drug test is faking.", "fol": "", "prediction": ["all x y.((UsesUrine(x,y) & DrugTest(y)) -> Faking(x))", "all x.((UsesUrine(x) & DrugTest(x)) -> Faking(x))", "all x y.((UsesUseOtherUse(x,y) & DrugTest(y)) -> Faking(x))", "all x y.((UsesUse(x,y) & DrugTest(y)) -> Faking(x))", "all x y.((UsesUserUse(x,y) & DrugTest(y)) -> Faking(x))", "all x.((UsesUseOtherUse(x) & DrugTest(x)) -> Faking(x))", "all x y.((UsesUrine(x,y) & DrugTest(y) & Passes(x,y)) -> Faking(x))", "all x y.((UsesUrine(x) & DrugTest(y) & UsesUrine(x,y)) -> Faking(x))", "all x y.((UsesUreine(x,y) & DrugTest(y)) -> Faking(x))", "all x y.((UsesUrine(x,y) & DrugTest(y) & UsesUrine(x,y)) -> Faking(x))", "all x y.((UsesUrine(x) & DrugTest(y) & Passes(x,y)) -> Faking(x))", "all x y.((UsesUsePurine(x,y) & DrugTest(y)) -> Faking(x))", "all x.((UsesUrine(x) & PassesDrugTest(x)) -> Faking(x))", "all x y.((UsesUrine(x) & DrugTest(y)) -> Faking(x))", "all x.((UsesUreine(x) & DrugTest(x)) -> Faking(x))", "all x.((UsesUrine(x) & PassDrugTest(x)) -> Faking(x))"]}
{"id": "enwn_validation_719", "nl": "Faking drug test results in competitive sports is wrong.", "fol": "", "prediction": ["all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Wrong(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Irresponsible(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Wrong(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Irresponsible(x))", "all x.(FakingDrugTestResultsInCompetitiveSports(x) -> Wrong(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Worst(x))", "all x.((FakingDrugTestResults(x) & InCompetitiveSports(x)) -> Wrong(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> IsWrong(x))", "all x.((FakingDrugTestResults(x) & CompetitiveSport(x)) -> Wrong(x))", "all x y.((DrugTestResult(x) & CompetitiveSport(y) & Faking(x,y)) -> IsWrong(x))", "all x.((CompetitiveSport(x) & FakingDrugTestResults(x)) -> Wrong(x))", "all x.((FakingDrugTestResults(x) & InCompetitiveSports(x)) -> Irresponsible(x))", "all x y.((DrugTestResult(x) & CompetitiveSport(y) & Faking(x,y)) -> Wrong(x))", "all x.(FakingDrugTestResults(x) -> Wrong(x))", "all x y.((FakingDrugTestResults(x) & CompetitiveSports(y)) -> Wrong(x))", "all x.(FakingDrugTestResultsInCompetitiveSports(x) -> Worst(x))"]}
{"id": "enwn_validation_720", "nl": "Giles paid his friend for the sample to help him fake a drug test for a crew competition.", "fol": "", "prediction": ["all x y.((Giles(x) & Friends(y)) -> PaidForSample(x,y))", "all x y.((Giles(x) & friend(y)) -> PaidForSample(x,y))", "all x y.((Giles(x) & Friends(y)) -> PaidForSampleToFakeDrugTest(x,y))", "all x y z.((Giles(x) & Friends(y) & Sample(z)) -> PaidFor(x,y,z))", "all x y.((Giles(x) & Friends(y) & PaidForSample(x,y)) -> FakeDrugTest(x,y))", "all x y.((Giles(x) & friend(y)) -> PaidForSampleToFakeDrugTest(x,y))", "all x y z.((Giles(x) & friend(y) & Sample(z)) -> PaidFor(x,y,z))", "all x y.((Giles(x) & Friends(y)) -> PaidFor(x,y))", "all x y.((Giles(x) & friend(y) & PaidForSample(x,y)) -> FakeDrugTest(x,y))", "all x y z.((Giles(x) & friend(y) & Sample(z) & PaidFor(x,y,z)) -> FakeDrugTest(x,y,z))", "all x y.((Giles(x) & Freund(y)) -> PaidForSample(x,y))", "all x y z.((Giles(x) & Freund(y) & Sample(z)) -> PaidFor(x,y,z))", "all x y.((Giles(x) & Friends(y) & PaidForSample(x,y)) -> FakeDrugTestForCrewCompetition(x,y))", "all x y z.((Giles(x) & Friends(y) & Sample(z)) -> PaidForToFakeDrugTest(x,y,z))", "all x y.((Giles(x) & Friend(y)) -> PaidForSample(x,y))", "all x y.((Giles(x) & Friends(y) & PaidForSample(x,y)) -> HelpsFakeDrugTest(x,y))"]}
{"id": "enwn_validation_721", "nl": "Giles paid his friend for the sample to help him do something wrong.", "fol": "", "prediction": ["all x y.((Giles(x) & Friends(y)) -> PaidForSample(x,y))", "all x y.((Giles(x) & friend(y)) -> PaidForSample(x,y))", "all x y z.((Giles(x) & Friends(y) & Sample(z)) -> PaidFor(x,y,z))", "all x y.((Giles(x) & Friends(y)) -> PaidFor(x,y))", "all x y z.((Giles(x) & friend(y) & Sample(z)) -> PaidFor(x,y,z))", "all x y z.((Giles(x) & Freund(y) & Sample(z)) -> PaidFor(x,y,z))", "all x y.((Giles(x) & Freund(y)) -> PaidForSample(x,y))", "all x y.((Giles(x) & Friend(y)) -> PaidForSample(x,y))", "all x y.((Friend(x) & Giles(y)) -> PaidForSample(y,x))", "all x y z.((Giles(x) & Friend(y) & Sample(z)) -> PaidFor(x,y,z))", "all x y.((Friend(x) & Giles(y)) -> PaidForSample(x,y))", "all x y z.((Friend(x) & Giles(y) & Sample(z)) -> PaidFor(y,z))", "all x y.((Giles(x) & friend(y)) -> PaidFor(x,y))", "all x y.((Giles(x) & Friends(y)) -> PaidForSampleToHelpDoWrong(x,y))", "all x y z.((Giles(x) & Friends(y) & Sample(z)) -> PaidFor(x,z))", "all x y.((Friend(x) & Giles(y)) -> PaidFor(y,x))"]}
{"id": "enwn_validation_722", "nl": "Giles shouldn't have paid his friend for the sample.", "fol": "", "prediction": ["all x y.((Giles(x) & Friends(y)) -> -PayedForSample(x,y))", "all x y.((Friend(x) & Giles(y)) -> -PayedForSample(y,x))", "all x y.((Giles(x) & friend(y)) -> -PayedForSample(x,y))", "all x y.((Giles(x) & Friend(y)) -> -PayedForSample(x,y))", "all x y.((Giles(x) & Freund(y)) -> -PayedForSample(x,y))", "all x y.((Giles(x) & Friends(y)) -> -PayedFor(x,y))", "all x y.((Friend(x) & Giles(y)) -> -PayedFor(y,x))", "all x y.((Friend(x) & Giles(y)) -> -Payed(y,x))", "all x.((Giles(x) & Friend(y)) -> -PayedForSample(x,y))", "all x y.((Friend(x) & Giles(y)) -> -PayedForSample(x,y))", "all x y.((Giles(x) & Friends(y)) -> -Payed(x,y))", "all x.((Giles(x) & Friend(x)) -> -PayedForSample(x))", "all x.((Giles(x) & Friends(y)) -> -PayedForSample(x,y))", "all x.((Giles(x) & Friend(x)) -> -PayedForSample(x,y))", "all x.((Giles(x) & Friends(x)) -> -PayedForSample(x))", "all x y.((Giles(x) & Freund(y)) -> -PayedFor(x,y))"]}
{"id": "enwn_validation_723", "nl": "A store is a public location.", "fol": "", "prediction": ["all x.(Store(x) -> PublicLocation(x))", "all x.(Store(x) -> PublicLocation(x))", "all x y.((Store(x) & PublicLocation(y)) -> PublicLocation(x))", "all x.exists y.(Store(x) & PublicLocation(y) & PublicLocation(x,y))", "all x y.((Store(x) & PublicLocation(y)) -> PublicLocation(x,y))", "all x.exists y.(Store(x) & PublicLocation(y) & LocatedIn(x,y))", "exists x.(Store(x) & PublicLocation(x))", "all x y.((Store(x) & PublicLocation(x)) -> PublicLocation(y))", "all x.exists y.(Store(x) & PublicLocation(y) & PublicLocation(x))", "all x.exists y.(Store(x) & PublicLocation(y) & InStore(x,y))", "all x.exists y.(Store(x) & Location(y) & Public(x,y))", "all x y.((Store(x) & PublicLocation(x)) -> PublicLocation(x))", "all x.exists y.(Store(x) & PublicLocation(y) & PublicLocation(y))", "all x.(Store(x) & PublicLocation(x))", "all x.exists y.(Store(x) & PublicLocation(y) & LocatedAt(x,y))", "all x.exists y.(Store(x) & PublicLocation(y) & Open(x,y))"]}
{"id": "enwn_validation_724", "nl": "It's polite to cover your mouth when coughing in a public location.", "fol": "", "prediction": ["all x.((Coughing(x) & PublicLocation(x)) -> PoliteToCoverMouth(x))", "all x y.((Coughing(x) & PublicLocation(y)) -> PoliteToCoverMouth(x,y))", "all x.((CoughingInPublicLocation(x) & CoversMouth(x)) -> Polite(x))", "all x y.((Coughing(x) & PublicLocation(y) & CoversMouth(x,y)) -> Polite(x))", "all x.((Coughing(x) & PublicLocation(x)) -> Polite(x))", "all x.((Coughing(x) & PublicLocation(x)) -> PoliteToCovetailMouth(x))", "all x.((CoughingPublicLocation(x) & CoversMouth(x)) -> Polite(x))", "all x y.((CoughingLocation(x) & PublicLocation(y)) -> PoliteToCoverMouth(x,y))", "all x y.((Polite(x) & PublicLocation(y) & Coughing(x,y)) -> CoversMouth(x,y))", "all x.((CoughsInPublicLocation(x) & CoversMouth(x)) -> Polite(x))", "all x y.((Coughing(x) & PublicLocation(y)) -> PoliteToCovetailMouth(x,y))", "all x y.((CoughingLocation(x) & Public(y)) -> PoliteToCoverMouth(x,y))", "all x y.((Polite(x) & PublicLocation(y)) -> CoversMouth(x,y))", "all x.((Coughing(x) & PublicLocation(x)) -> PoliteToCoveyMouth(x))", "all x y.((Coughing(x) & PublicLocation(y) & CoversMouth(x,y)) -> Polite(x,y))", "all x y.((Coughing(x) & PublicLocation(y)) -> CoversMouth(x,y))"]}
{"id": "enwn_validation_725", "nl": "Rajesh coughed without covering his mouth in line at the drugstore.", "fol": "", "prediction": ["all x y.((Rajesh(x) & Drugstore(y)) -> Coughed(x,y))", "all x y.((Rajesh(x) & Drugstore(y)) -> Coughs(x,y))", "all x y.((Rajesh(x) & Drugstore(y)) -> CoughedWithoutCoveringMouth(x,y))", "all x y.((Rajesh(x) & Drugstore(y)) -> (Coughed(x,y) & -CoveredMouth(x,y)))", "all x y.((Rajesh(x) & Drugstore(y) & Coughed(x,y)) -> -CoversMouth(x,y))", "all x y.((Rajesh(x) & Drugstore(y)) -> (Coughed(x,y) & -CoveredMouth(x)))", "all x y.((Rajesh(x) & Drugstore(y)) -> (Coughed(x,y) & -CoversMouth(x,y)))", "all x y z.((Rajesh(x) & Drugstore(y) & Coughs(x,y)) -> -CoversMouth(x,y))", "all x.((Rajesh(x) & Coughed(x) & -CoversMouth(x)) -> Drugstore(x))", "all x.((Rajesh(x) & Coughed(x)) -> -CoversMouth(x))", "all x y.((Rajesh(x) & Drugstore(y)) -> (Coughed(x,y) & -CoversMouth(x)))", "all x.(Rajesh(x) -> (Coughed(x) & -CoveredMouth(x)))", "all x y.((Rajash(x) & Drugstore(y)) -> Coughed(x,y))", "all x y z.((Rajesh(x) & Drugstore(y) & Coughs(x,y)) -> -CoversMouth(x,z))", "all x y.((Rajesh(x) & Drugstore(y)) -> (Coughed(x) & -CoveredMouth(x)))", "all x y.((Rajash(x) & Drugstore(y)) -> Coughs(x,y))"]}
{"id": "enwn_validation_726", "nl": "It's polite to cover your mouth when coughing in a store.", "fol": "", "prediction": ["all x y.((CoughingStore(x) & Store(y)) -> PoliteToCoverMouth(x,y))", "all x.((CoughingInStore(x) & CoversMouth(x)) -> Polite(x))", "all x.((Coughing(x) & Store(x)) -> PoliteToCoverMouth(x))", "all x y.((Coughing(x) & Store(y)) -> PoliteToCoverMouth(x,y))", "all x.((CoughingStore(x) & CoversMouth(x)) -> Polite(x))", "all x y.((Coughing(x) & Store(y) & CoversMouth(x,y)) -> Polite(x))", "all x y.((Polite(x) & Store(y) & CoughsIn(x,y)) -> CoversMouth(x))", "all x y.((Polite(x) & Store(y) & CoughsIn(x,y)) -> CoversMouth(x,y))", "all x y.((CoughingStore(x) & Store(y) & CoversMouth(x,y)) -> Polite(x))", "all x y.((CoughingInStore(x) & Store(y)) -> PoliteToCoverMouth(x,y))", "all x.((CoughsInStore(x) & CoversMouth(x)) -> Polite(x))", "all x y z.((Coughing(x) & Store(y) & Store(z)) -> PoliteToCoverMouth(x,y,z))", "all x.((Coughing(x) & Store(x)) -> Polite(x))", "all x y.((Polite(x) & Store(y)) -> CoversMouth(x,y))", "all x y z.((Coughing(x) & Store(y) & Store(z)) -> CoversMouth(x,y,z))", "all x y.((CoughingStore(x) & Store(y)) -> Polite(x,y))"]}
{"id": "enwn_validation_727", "nl": "Rajesh should have covered his mouth.", "fol": "", "prediction": ["all x.((Rajesh(x) & ShouldHaveCoveredMouth(x)) -> ShouldHaveCoveredMouth(x))", "all x.(Rajesh(x) -> ShouldHaveCoveredMouth(x))", "all x y.((Rajesh(x) & Mouth(y)) -> ShouldCover(x,y))", "all x y.((Rajesh(x) & Mouth(y)) -> ShouldCovered(x,y))", "all x.(Rajesh(x) -> ShouldCoveredMouth(x))", "all x y.((Rajesh(x) & Mouth(y)) -> ShouldHaveCovered(x,y))", "all x.((Rajesh(x) & CoveredMouth(x)) -> ShouldHave(x))", "all x.((Rajesh(x) & ShouldCoverMouth(x)) -> ShouldCoverMouth(x))", "all x.((Rajesh(x) & ShouldAccommodateMouth(x)) -> ShouldAccommodateMouth(x))", "all x.((Rajesh(x) & ShouldCoverMouth(x)) -> ShouldAccommodateMouth(x))", "all x.((Rajesh(x) & ShouldCoverMouth(x)) -> ShouldHave(x))", "Rajesh should have covered mouth.", "all x y.((Rajesh(x) & Mouth(y)) -> ShouldBeCovered(x,y))", "all x.((Rajesh(x) & ShouldCoveredMouth(x)) -> ShouldAccommodateMouth(x))", "all x.((Rajesh(x) & ShouldCoveredMouth(x)) -> ShouldBeen(x))", "all x.((Rajesh(x) & ShouldHaveCoveredMouth(x)) -> ShouldHaveCoveredMouth(x))"]}
{"id": "enwn_validation_728", "nl": "Marina told her parents that she was going to be staying over at a friend's house.", "fol": "", "prediction": ["all x y.((Marina(x) & Parent(y)) -> (StayingAtFriendsHouse(x,y)))", "all x y.((Marina(x) & Parent(y)) -> (StayingAtFriendsHouse(x,y) | StayingAtFriendsHouse(x,y)))", "all x y.((Marina(x) & Parent(y)) -> SpentAtFriendsHouse(x,y))", "all x y.((Marina(x) & Parent(y)) -> StayingAtFriendsHouse(x,y))", "all x y z.((Marina(x) & Parent(y) & FriendsHouse(z)) -> (StayingAt(x,y,z) | StayingAt(x,y,z)))", "all x y z.((Marina(x) & Parent(y) & Friend(z)) -> (StayingAt(x,y,z) & StayingAt(x,y,z)))", "all x y z.((Marina(x) & Parent(y) & Friend(z)) -> (StayingAt(x,y,z) | StayingAt(x,y,z)))", "all x y z.((Marina(x) & Parent(y) & Family(z)) -> (StayingAtFriendsHouse(x,y,z)))", "all x y z.((Marina(x) & Parent(y) & FriendsHouse(z)) -> (StayingAt(x,z) | StayingAt(x,z))))", "all x y z.((Marina(x) & Parent(y) & FriendsHouse(z)) -> (StayingAt(x,y,z) & StayingAt(x,y,z)))", "all x y z.((Marina(x) & Parent(y) & FriendsHouse(z)) -> WillStayAt(x,y,z))", "all x y z.((Marina(x) & Parent(y) & FriendsHouse(z)) -> (StayingAt(x,z) | StayingAt(x,y,z)))", "all x y z.((Marina(x) & Parent(y) & FriendsHouse(z)) -> StayingAt(x,y,z))", "all x y z.((Marina(x) & Parent(y) & Friend(z)) -> (StayingAt(x,y,z) & StayingAt(x,y)))", "all x y z.((Marina(x) & Parent(y) & FriendsHouse(z)) -> (StayingAt(x,y,z) | StayingAt(x,y)))", "all x y z.((Marina(x) & Parent(y) & FriendsHouse(z)) -> SpentAt(x,y,z))"]}
{"id": "enwn_validation_729", "nl": "In reality, she was going to be at an all-night house party.", "fol": "", "prediction": ["all x.(Reality(x) -> AllNightHouseParty(x))", "all x.((HouseParty(x) & AllNight(x)) -> GoingToBe(x))", "(all x.(Reality(x) -> AllNightHouseParty(x)))", "all x.((HouseParty(x) & AllNight(x)) -> Attended(x))", "all x.((HouseParty(x) & AllNight(x)) -> GoingToBeAt(x))", "all x.((Reality(x) & AllNightHouseParty(x)) -> GoingToBe(x))", "all x.((HouseParty(x) & AllNight(x)) -> AllNight(x))", "all x.((HouseParty(x) & AllNight(x)) -> InReality(x))", "all x.((HouseParty(x) & AllNight(x)) -> GoingToBeAt(x,y))", "all x y.((Reality(x) & AllNightHouseParty(y)) -> GoingToBe(x,y))", "all x.((HouseParty(x) & AllNight(x)) -> At(x,y))", "all x.((HouseParty(x) & AllNight(x)) -> WillBeAt(x))", "all x.((Reality(x) & AllNightHouseParty(x)) -> Attended(x))", "all x.((HouseParty(x) & AllNight(x)) -> AttendedBy(x,y))", "all x.((HouseParty(x) & AllNight(x)) -> WillBeAt(x,y))", "all x.((SheHouseParty(x) & AllNight(x)) -> GoingToBe(x))"]}
{"id": "enwn_validation_730", "nl": "You're lying to someone if you tell them you're planning one thing but you're really planning something else.", "fol": "", "prediction": ["all x y.((Liking(x) & Person(y) & TellsYouPlansOneThing(x,y) & TellsYouPlansAndOtherThing(x,y)) -> LiesTo(x,y))", "all x y.((Liking(x) & Person(y) & TellsYouPlansOneThing(x,y) & TellsYouPlansAnotherThing(x,y)) -> LiesTo(x,y))", "all x y.((Liar(x) & Person(y) & TellsYouPlansOneThing(x,y) & TellsYouPlansAndOtherThing(x,y)) -> LiesTo(x,y))", "all x y.((Liking(x) & Person(y) & TellsYouPlansOneThing(x,y) & TellsYouPlansOtherThing(x,y)) -> LiesTo(x,y))", "all x.((Liking(x) -> (PlansOneThing(x) & PlanesAndOtherThing(x)))", "all x y.((Liar(x) & Person(y) & TellsYouPlansOneThing(x,y) & TellsYouPlansAnotherThing(x,y)) -> LiesTo(x,y))", "all x.((Liking(x) -> (PlansOneThing(x) & PlanesOtherThing(x)))", "all x y.((Liking(x) & Person(y) & Tells(x,y)) -> (PlansOneThing(x) & PlanesOtherThing(x)))", "all x y.((Liking(x) & Person(y) & TellsYouPlansOneThing(x,y) & TellsYouPlansAndOtherThing(x,y)) -> False(x))", "all x y.((Liking(x) & Person(y) & TellsYouPlansOneThing(x,y) & TellsYouPlansAndOtherThing(x,y)) -> Liking(x))", "all x y.((Liking(x) & Person(y) & Tells(x,y)) -> (PlansOneThing(x) & PlanesAndOtherThing(x)))", "all x y.((Liking(x) & Person(y) & TellsYouPlansOneThing(x,y) & TellsYouPlansAndOtherThing(x,y)) -> Lies(x))", "all x y.((Liking(x) & Someone(y) & TellsYouPlansOneThing(x,y) & TellsYouPlansAndOtherThing(x,y)) -> LiesTo(x,y))", "all x y.((Liking(x) & Person(y) & Tells(x,y)) -> (PlansOneThing(x) & PlanesAnotherThing(x)))", "all x y.((Liking(x) & Person(y) & TellsYouPlansOneThing(x,y) & TellsYouPlansAnotherThing(x,y)) -> Liking(x))", "all x y.((Liking(x) & Person(y) & Tells(x,y)) -> (PlansOneThing(x) & PlansOtherThing(x)))"]}
{"id": "enwn_validation_731", "nl": "Lying to someone that you're not doing something dangerous prevents them from helping you in an emergency.", "fol": "", "prediction": ["all x y.((LyingTo(x,y) & Person(y) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))", "all x y.((LyingTo(x,y) & Person(x) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))", "all x y.((Lying(x) & Person(y) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))", "all x y.((LikingTo(x,y) & Person(y) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))", "all x y.((Liking(x) & Person(y) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))", "all x y z.((LyingTo(x,y) & Person(z) & -Dangerous(z)) -> PreventsHelpingInEmergency(x,z))", "all x y.((LyingTo(x,y) & Person(y) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))", "all x y.((LyingTo(x,y) & Person(y) & -Dangerous(x)) -> PreventsHelpingInEmergency(y,x))", "all x y.((Liking(x) & Person(y) & -Dangerous(y)) -> PreventsHelpingInEmergency(y,x))", "all x y.((Lying(x) & Person(y) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))", "all x y.((Lying(x) & Person(y) & -Dangerous(x)) -> PreventsHelpingInEmergency(y,x))", "all x y.((Lying(x) & Person(y) & -Dangerous(y)) -> PreventsHelpingInEmergency(y,x))", "all x y.((LikingTo(x,y) & Person(y) & -Dangerous(x)) -> PreventsHelpingInEmergency(y,x))", "all x y.((LyingTo(x,y) & Person(y) & -Dangerous(y)) -> PreventsHelpingInEmergency(y,x))", "all x y.((Liking(x) & Person(y) & -Dangerous(x)) -> PreventsHelpingInEmergency(y,x))", "all x.((LyingTo(x,y) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))"]}
{"id": "enwn_validation_732", "nl": "Partying is potentially dangerous.", "fol": "", "prediction": ["all x.(Partying(x) -> PotentiallyDangerous(x))", "all x.(Party(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))", "all x.(Party(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentiallyDangerous(x))", "all x y.((Party(x) & Party(y)) -> PotentiallyDangerous(x))", "all x y.((Party(x) & Party(y)) -> PotentiallyDangerous(x,y))", "all x y.((Partying(x) & Party(y)) -> PotentiallyDangerous(x))", "all x.(Party(x) -> PotentiallyDangerous(x))", "all x.(Partying(x) -> PotentlyDangerous(x))", "all x y.((Partying(x) & Party(y)) -> PotentiallyDangerous(x,y))", "all x.(Partying(x) -> PotenciallyDangerous(x))", "all x y.((Party(x) & Party(y)) -> PotentiallyDangerous(x))", "all x y.((Party(x) & Party(y)) -> PotentiallyDangerous(x,y))", "all x.(Partying(x) -> PotentiallyDanger(x))", "all x.(Party(x) -> PotentlyDangerous(x))"]}
{"id": "enwn_validation_733", "nl": "Preventing someone from helping you in an emergency is potentially very harmful.", "fol": "", "prediction": ["all x.((PreventsHelping(x) & Emergency(x)) -> PotentiallyHarmful(x))", "all x y.((PreventsHelping(x,y) & Emergency(y)) -> PotentiallyHarmful(x))", "all x y.((Person(x) & Emergency(y) & Prevents(x,y)) -> PotentiallyHarmful(x))", "all x y.((Person(x) & Emergency(y) & PreventsHelping(x,y)) -> PotentiallyHarmful(x))", "all x.(PreventsHelpingInEmergency(x) -> PotentiallyHarmful(x))", "all x.((Person(x) & HelpsInEmergency(x)) -> PotentiallyHarmful(x))", "all x y.((Person(x) & Emergency(y) & HelpsIn(x,y)) -> PotentiallyHarmful(x))", "all x.(PreventsHelpingEmergency(x) -> PotentiallyHarmful(x))", "all x y.((Person(x) & EmergencyEmergency(y) & Prevents(x,y)) -> PotentiallyHarmful(x))", "all x y.((Person(x) & EmergencyEmergency(y) & PreventsHelping(x,y)) -> PotentiallyHarmful(x))", "all x y.((Person(x) & Emergency(y) & Helps(x,y)) -> PotentiallyHarmful(x))", "all x y.((PreventsHelping(x,y) & Emergency(y)) -> PotentiallyHarmful(x,y))", "all x.((PreventsHelpingInEmergency(x) & Person(y)) -> PotentiallyHarmful(x))", "all x.((PreventsHelpingEmergency(x) & Person(y)) -> PotentiallyHarmful(x))", "all x y.((Person(x) & Emergency(y) & Prevents(x,y)) -> PotentiallyHarmful(x,y))", "all x y.((PreventsHelping(x,y) & Emergency(y)) -> PotentiallyHarmful(x))"]}
{"id": "enwn_validation_734", "nl": "Marina told her parents she wouldn't be at a party, but she was actually going to a house party.", "fol": "", "prediction": ["all x y.((Marina(x) & Parent(y)) -> (-AtParty(x,y) & GoingToHouseParty(x,y)))", "all x.((Marina(x) & Parents(x)) -> (-AtParty(x) & GoingToHouseParty(x)))", "all x y.((Marina(x) & Parent(y)) -> (-AtParty(x) & GoingToHouseParty(x)))", "all x y.((Marina(x) & Parent(y)) -> (-AtParty(x,y) | GoingToHouseParty(x,y)))", "all x y.((Marine(x) & Parent(y)) -> (-AtParty(x,y) & GoingToHouseParty(x,y)))", "all x y z.((Marina(x) & Parent(y) & HouseParty(z)) -> (-AtParty(x,y) & -AtParty(x,z)))", "all x y.((Marina(x) & Parents(y)) -> (-AtParty(x,y) & GoingToHouseParty(x,y)))", "all x y z.((Marina(x) & Parent(y) & HouseParty(z)) -> (-AtParty(x,y) & -AtParty(y,z)))", "all x y z.((Marina(x) & Parent(y) & HouseParty(z)) -> (-AtParty(x,y) & GoingToParty(x,z)))", "all x y z.((Marina(x) & Parent(y) & HouseParty(z)) -> (-AtParty(x,y) | GoingToParty(x,z))))", "all x y.((Marina(x) & Parent(y)) -> (-AtParty(x) & GoingToHouseParty(y)))", "all x.((Marina(x) & Parent(x)) -> (-AtParty(x) & GoingToHouseParty(x)))", "all x y z.((Marina(x) & Parents(y) & HouseParty(z)) -> (-AtParty(x,y) & -AtParty(x,z)))", "all x y.((Marina(x) & Parent(y)) -> (-AtParty(x) & -AtHouseParty(y)))", "all x y.((Marina(x) & Parent(y)) -> (-AtParty(x) & GoingToHouseParty(x,y)))", "all x y z.((Marine(x) & Parent(y) & HouseParty(z)) -> (-AtParty(x,y) & -AtParty(x,z)))"]}
{"id": "enwn_validation_735", "nl": "Marina lied to her parents to give them the impression she wouldn't be going to a house party.", "fol": "", "prediction": ["all x.((Marina(x) & LiliedToParents(x)) -> -HouseParty(x))", "all x y.((Marina(x) & Parent(y)) -> LiedToToGiveImpression(x,y))", "all x y z.((Marina(x) & Parent(y) & HouseParty(z)) -> LiedToToGiveImpression(x,y,z))", "all x y z.((Marina(x) & Parent(y) & HouseParty(z)) -> LiedTo(x,y,z))", "all x.((Marina(x) & LiliedToParents(x)) -> -GoingToHouseParty(x))", "all x y z.((Marina(x) & Parent(y) & HouseParty(z)) -> LiesTo(x,y,z))", "all x.((Marina(x) & LiesToParents(x)) -> -HouseParty(x))", "all x y.((Marina(x) & Parents(y)) -> LiedToToGiveImpression(x,y))", "all x y z.((Marina(x) & Parents(y) & HouseParty(z)) -> LiedToToGiveImpression(x,y,z))", "all x y z.((Marina(x) & Parent(y) & HouseParty(z)) -> LiedTo(x,y))", "all x y.((Marina(x) & Parent(y)) -> LiedTo(x,y))", "all x y z.((Marina(x) & Parent(y) & HouseParty(z)) -> LiesToToGiveImpression(x,y,z))", "all x y z.((Marina(x) & Parent(y) & HouseParty(z)) -> LiliedToToGiveImpression(x,y,z))", "all x y z.((Marina(x) & Parents(y) & HouseParty(z)) -> LiedTo(x,y,z))", "all x y z.((Marina(x) & Parents(y) & HouseParty(z)) -> LiesTo(x,y,z))", "all x y z.((Marina(x) & Parent(y) & HouseParty(z)) -> LiesTo(x,y))"]}
{"id": "enwn_validation_736", "nl": "Lying to someone that you're not partying prevents them from helping you in an emergency.", "fol": "", "prediction": ["all x y.((Liking(x) & Person(y) & -Partying(y)) -> PreventsHelpingInEmergency(x,y))", "all x y.((LikingTo(x,y) & Person(y) & -Partying(y)) -> PreventsHelpingInEmergency(x,y))", "all x y.((LikingTo(x,y) & Person(y) & -Partying(x)) -> PreventsHelpingInEmergency(y,x))", "all x y.((Lying(x) & Person(y) & -Partying(y)) -> PreventsHelpingInEmergency(x,y))", "all x y.((Lying(x) & Person(y) & -Partying(y)) -> PreventsHelpingInEmergency(x,y))", "all x y.((Liking(x) & Person(y) & -Partying(x)) -> PreventsHelpingInEmergency(y,x))", "all x y.((LyingTo(x,y) & Person(y) & -Partying(x)) -> PreventsHelpingInEmergency(y,x))", "all x y.((LyingTo(x,y) & Person(y) & -Partying(x)) -> PreventsHelpingInEmergency(y,x))", "all x y.((Liking(x) & Person(y) & -Partying(x,y)) -> PreventsHelpingInEmergency(y,x))", "all x y.((LikingTo(x,y) & Person(y) & -Partying(x)) -> PreventsHelpingInEmergency(y))", "all x y.((Lying(x) & Person(y) & -Partying(x)) -> PreventsHelpingInEmergency(y,x))", "all x.((Lying(x) & -Partying(x)) -> PreventsEmergencyHelp(x))", "all x y.((Liking(x) & Person(y) & -Partying(y)) -> PreventsHelpInEmergency(x,y))", "all x y.((LikingTo(x,y) & Person(y) & -Partying(x)) -> PreventsHelpingInEmergency(x,y))", "all x y.((Liking(x) & Person(y) & -Partying(y)) -> PreventsHelpingInEmergency(y,x))", "all x.((Lying(x) & -Partying(x)) -> PreventsEmergencyHelping(x))"]}
{"id": "enwn_validation_737", "nl": "Lying to someone that you're not partying does more harm than good.", "fol": "", "prediction": ["all x y.((Lying(x) & Person(y) & -Partying(y)) -> DoesMoreHarmThanGood(x,y))", "all x y.((Liking(x) & Person(y) & -Partying(y)) -> DoesMoreHarmThanGood(x,y))", "all x y.((Lying(x) & Person(y) & -Partying(x,y)) -> DoesMoreHarmThanGood(x,y))", "all x.((Lying(x) & -Partying(x)) -> MoreHarmThanGood(x))", "all x y.((LikingTo(x,y) & Person(y) & -Partying(y)) -> DoesMoreHarmThanGood(x,y))", "all x.((Lying(x) & -Partying(x)) -> MoreHarmThanGood(x))", "all x.((Lying(x) & -Partying(x)) -> DoesMoreHarmThanGood(x))", "all x y.((LyingTo(x,y) & Person(y) & -Partying(y)) -> DoesMoreHarmThanGood(x,y))", "all x.((Lying(x) & -Partying(x)) -> DoesMoreHarmThanGood(x))", "all x y.((LikingTo(x,y) & Person(y) & -Partying(x)) -> DoesMoreHarmThanGood(x,y))", "all x y.((Lying(x) & Person(y) & -Partying(y)) -> MoreHarmThanGood(x,y))", "all x.((Liking(x) & -Partying(x)) -> MoreHarmThanGood(x))", "all x y.((LikingTo(x,y) & Person(y) & -Partying(x)) -> DoesMoreHarmThanGood(x))", "all x y.((LyingTo(x,y) & Person(y) & -Partying(x)) -> DoesMoreHarmThanGood(x,y))", "all x y.((LikingTo(x,y) & Person(y) & -Partying(x)) -> DoesMoreHarmThanGood(x,y))", "all x y.((LyingTo(x,y) & Person(y) & -Partying(x)) -> DoesMoreHarmThanGood(x))"]}
{"id": "enwn_validation_738", "nl": "Marina's lie to her parents did more harm than good.", "fol": "", "prediction": ["all x y.((LieTo(x,y) & Marina'sParents(y)) -> DidMoreHarmThanGood(x,y))", "all x y.((Lird(x) & Marina'sParents(y)) -> DidMoreHarmThanGood(x,y))", "all x y.((Marina'sLieToParents(x) & Marina'sLieToParents(y)) -> DidMoreHarmThanGood(x,y))", "all x y.((Lird(x) & MarinasParents(y)) -> DidMoreHarmThanGood(x,y))", "all x y z.((Lird(x) & Marina(y) & Parent(z)) -> (DoesMoreHarm(y,z) | DoesMoreGood(y,z)))", "all x.((LieToParents(x) & Marina's(x)) -> DidMoreHarmThanGood(x))", "all x y z.((Lird(x) & Marina(y) & Parent(z)) -> (DoesMoreHarm(y,z) & DoesMoreGood(y,z)))", "all x y.((Lird(x) & Marina(y) & Parents(y)) -> DidMoreHarmThanGood(y))", "all x y.((Lird(x) & Marina'sParents(y)) -> MoreHarmThanGood(x,y))", "all x y z.((Lird(x) & Marina(y) & Parent(z)) -> (DoesMoreHarm(y,z) | DoesMoreGood(y,z)))", "all x y.((LieTo(x,y) & Marina'sParents(y)) -> MoreHarmThanGood(x,y))", "all x y z.((Lird(x) & Marina(y) & Parent(z)) -> (DoesMoreHarm(y,z) & DoesMoreGood(y,z)))", "all x y z.((Lird(x) & Marina(y) & Parent(z)) -> (DoesMoreHarm(y,z) | DoesMoreGood(y,z))))", "all x y z.((Lird(x) & Marina(y) & Parent(z)) -> (MoreHarm(y,z) | MoreGood(y,z)))", "all x y.((LieTo(x,y) & Marina'sParents(x)) -> DidMoreHarmThanGood(y))", "all x.((LieToParents(x) & Marina's(x)) -> MoreHarmThanGood(x))"]}
{"id": "enwn_validation_739", "nl": "Marina shouldn't have lied to her parents.", "fol": "", "prediction": ["all x.((Marina(x) & -LikedToParents(x)) -> -LikedToParents(x))", "all x y.((Marina(x) & Parent(y)) -> -LikedTo(x,y))", "all x.((Marine(x) & -LikedToParents(x)) -> -LikedToParents(x))", "all x y.((Marina(x) & Parent(y)) -> -Liked(x,y))", "all x y.((Marina(x) & Parents(y)) -> -LikedTo(x,y))", "all x y z.((Marina(x) & Parent(y) & Parent(z)) -> -LikedTo(x,y,z))", "all x.((Marina(x) & -LiredToParents(x)) -> -LikedToParents(x))", "all x.((Marina(x) & Parents(x)) -> -LikedTo(x,Marina))", "all x.((Marina(x) & -LikedToParents(x)) -> -LiedToParents(x))", "all x.((Marina(x) & -LiedToParents(x)) -> -LikedToParents(x))", "all x y.((Marina(x) & Parents(y)) -> -Liked(x,y))", "all x.(Marina(x) -> -LikedToParents(x))", "all x.((Marina(x) & Parents(y)) -> -LikedTo(x,y))", "all x y.((Marine(x) & Parent(y)) -> -LikedTo(x,y))", "all x y.((Marina(x) & Parent(y)) -> -LiredTo(x,y))", "all x.((Marina(x) & -LikedToParents(x)) -> -LiredToParents(x))"]}
{"id": "enwn_validation_740", "nl": "Bugging someone's phone is an invasion of their privacy.", "fol": "", "prediction": ["all x y.((BugsPhone(x) & Person(y)) -> InvasionOfPrivacy(x,y))", "all x.(BuggingPhone(x) -> InvasionOfPrivacy(x))", "all x y.((BuggingPhone(x) & Person(y)) -> InvasionOfPrivacy(x,y))", "all x y.((BugsPhone(x) & Phone(y)) -> InvasionOfPrivacy(x,y))", "all x.(BbuggingPhone(x) -> InvasionOfPrivacy(x))", "all x y.((BugsPhone(x,y) & Person(y)) -> InvasionOfPrivacy(x,y))", "all x y.((Phone(x) & Phone(y) & Bugging(x,y)) -> InvasionOfPrivacy(x,y))", "all x y.((Bugging(x) & Phone(y)) -> InvasionOfPrivacy(x,y))", "all x.(BugsPhone(x) -> InvasionOfPrivacy(x))", "all x y.((Phone(x) & Phone(y)) -> InvasionOfPrivacy(x,y))", "all x y.((Bug(x) & Phone(y)) -> InvasionOfPrivacy(x,y))", "all x y.((Phone(x) & Bug(y)) -> InvasionOfPrivacy(x,y))", "all x y.((Phone(x) & Phone(y) & Bugging(x,y)) -> InvasionOfPrivacy(x))", "all x y.((Phone(x) & Phone(y)) -> BuggingInvasion(x,y))", "all x y.((BugsPhone(x) & Person(y)) -> InvasionOfPrivacy(x))", "all x y.((Phone(x) & Person(y)) -> BuggingInvasionOfPrivacy(x,y))"]}
{"id": "enwn_validation_741", "nl": "Invading people's privacy without a good reason is wrong.", "fol": "", "prediction": ["all x.((InvadingPrivacy(x) & -GoodRight(x)) -> Wrong(x))", "all x.((InvadingPrivacy(x) & -GoodRight(x)) -> Worst(x))", "all x.((InvadingPrivacy(x) & -GoodRaison(x)) -> Wrong(x))", "all x.((InvadingPeoplesPrivacy(x) & -GoodRight(x)) -> Wrong(x))", "all x.((InvadingPrivacy(x) & -GoodRight(x)) -> Irresponsible(x))", "all x.((InvadingPrivacy(x) & GoodRight(x)) -> Wrong(x))", "all x.((InvadingPrivacy(x) & -GoodRaison(x)) -> Worst(x))", "all x.((InvadingPrivacyWithoutGoodRight(x)) -> Wrong(x))", "all x.((InvadingPrivacy(x) & NoGoodRight(x)) -> Wrong(x))", "all x y.((InvadingPrivacy(x) & Person(y) & -GoodRight(x)) -> Wrong(x))", "all x.((InvadingPeoplesPrivacy(x) & -GoodRight(x)) -> Worst(x))", "all x.((InvadingPeoplesPrivacy(x) & -GoodRaison(x)) -> Wrong(x))", "all x.((InvadingPrivacyWithoutGoodRight(x)) -> Worst(x))", "all x.((InvadingPrivacy(x) & GoodRight(x)) -> Worst(x))", "all x.((InvadingPeoplePrivacy(x) & -GoodRight(x)) -> Wrong(x))", "all x.((InvadingPrivacy(x) & NoGoodRaison(x)) -> Wrong(x))"]}
{"id": "enwn_validation_742", "nl": "Omar bugged his girlfriend's phone because he thought she was lying.", "fol": "", "prediction": ["all x y.((Omar(x) & Girlfriend(y)) -> BuggedPhone(x,y))", "all x y.((Omar(x) & girlfriend(y)) -> BuggedPhone(x,y))", "all x y z.((Omar(x) & Girlfriend(y) & Phone(z)) -> Bugged(x,y,z))", "all x y.((Gayfriend(x) & Phone(y)) -> Bugged(x,y))", "all x y.((Omar(x) & Friend(y)) -> BuggedPhone(x,y))", "all x y.((Friend(x) & Omar(y)) -> BuggedPhone(x,y))", "all x y.((Omar(x) & Girlfriend(y) & BuggedPhone(x,y)) -> (Liking(y) | Bugging(x,y)))", "all x y.((Gayfriend(x) & Phone(y) & Bugged(x,y)) -> (Liking(y) | Bugging(x,y)))", "all x y.((Omar(x) & Girlfriend(y)) -> Bugged(x,y))", "all x y.((Omar(x) & Girlfriend(y) & BuggedPhone(x,y)) -> WorriedSheLiking(x,y))", "all x y.((Omar(x) & Girlfriend(y) & BuggedPhone(x,y)) -> WorriedSheLiving(x,y))", "all x y.((Omar(x) & Girlfriend(y) & BuggedPhone(x,y)) -> ThoughtSheLiving(x,y))", "all x y.((Omar(x) & Girlfriend(y) & BuggedPhone(x,y)) -> ThoughtSheLiving(y))", "Omar bugged girlfriend's phone because he thought she was lying.", "all x y.((Omar(x) & Girlfriend(y) & BuggedPhone(x,y)) -> WorriedSheLiving(y))", "all x y.((Omar(x) & Girlfriend(y) & BuggedPhone(x,y)) -> ThinksSheLiving(x,y))"]}
{"id": "enwn_validation_743", "nl": "Omar suspected his girlfriend was lying because she came home at 3 AM.", "fol": "", "prediction": ["Omar suspected his girlfriend was lying because she came home at 3 AM.", "Omar suspected his girlfriend was lying because she came home at 3AM.", "Omar suspected that his girlfriend was lying because she came home at 3 AM.", "all x y.((Omar(x) & Girlfriend(y) & CameHomeAt3AM(x,y)) -> SuspiciousOfLiving(x,y))", "all x y.((Omar(x) & girlfriend(y) & CameHomeAt3AM(x,y)) -> SuspiciousOfLiving(x,y))", "all x y.((Omar(x) & girlfriend(y) & CameHomeAt3AM(x,y)) -> Suspicious(x,y))", "all x y.((Omar(x) & Girlfriend(y) & CameHomeAt3AM(x,y)) -> Suspicious(x,y))", "all x y.((Omar(x) & girlfriend(y) & CameHomeAt3AM(x,y)) -> SuspiciousOmar(x,y))", "all x y.((Omar(x) & Girlfriend(y) & CameHomeAt3AM(x,y)) -> SuspiciousOmar(x,y))", "all x y.((Omar(x) & girlfriend(y) & CameHomeAt3AM(x,y)) -> Liking(x))", "all x y.((Omar(x) & Girlfriend(y) & CameHomeAt3AM(x,y)) -> Liking(x))", "all x y.((Omar(x) & girlfriend(y) & CameHomeAt(y,3)) -> Liking(x,y))", "all x y.((Omar(x) & Girlfriend(y) & CameHomeAt3AM(x,y)) -> SupposedLiving(x,y))", "all x y.((Omar(x) & Girlfriend(y) & CameHomeAt(y,3)) -> Liking(x,y))", "all x y.((Omar(x) & girlfriend(y) & CameHomeAt3AM(x,y)) -> Liar(x,y))", "all x y.((Omar(x) & girlfriend(y) & CameHomeAt3AM(x,y)) -> Liking(x,y))"]}
{"id": "enwn_validation_744", "nl": "It's normal to be out late when you're drinking with friends.", "fol": "", "prediction": ["all x.((DrinkingWithFriends(x) & OutLate(x)) -> Normal(x))", "all x.((DrinkingWithFriends(x) & Late(x)) -> Normal(x))", "all x.((DrinkingWithFriends(x) & DrinkingWithFriends(x)) -> NormalLateOut(x))", "all x.((DrinkingWithFriends(x) & OutLater(x)) -> Normal(x))", "all x.((DrinkingWithFriends(x) & DrinkingWithFriends(x)) -> NormalToBeOutLater(x))", "all x.((DrinkingWithFriends(x) & DrinkingWithFriends(x)) -> NormalOutLater(x))", "all x.((DrinkingWithFriends(x) & OutLast(x)) -> Normal(x))", "all x.((DrinkingWithFriends(x) & DrinkingWithFriends(x)) -> NormalToBeLast(x))", "all x.((DrinkingWithFriends(x) & DrinkingWithFriends(x)) -> NormalOutLate(x))", "all x.((DrinkingWithFriends(x) & DrinkingWithFriends(x)) -> NormalToBeOutLate(x))", "all x.((DrinkingWithFriends(x) & DrinkingWithFriends(x)) -> NormalToBeLate(x))", "all x y.((Drinking(x) & Friends(y)) -> NormalToBeOutLate(x,y))", "all x.((DrinkingWithFriends(x) & DrinkingWithFriends(x)) -> NormalToBeOutLast(x))", "all x y.((Drinking(x) & Friends(y)) -> NormalToBeOutLater(x,y))", "all x.((DrinkingWithFriends(x) & NormalOutLate(x)) -> DrinkingWithFriends(x))", "all x.((DrinkingWithFriends(x) & DrinkingWithFriends(x)) -> NormalToBeLater(x))"]}
{"id": "enwn_validation_745", "nl": "Omar's girlfriend told him she was going out drinking with her friends.", "fol": "", "prediction": ["Omar's girlfriend told him she was going out drinking with her friends.", "Omar's girlfriend told him she was going out drinking with friends.", "Omar's girlfriend told him she was going out drinking with her friends.", "Omar's girlfriend told him she was going out drinking with friends.", "all x.((Groomer(x) & Omar(x)) -> GoesOutDrinkingWithFriends(x))", "all x.((Groomer(x) & Omar(x)) -> SheGoesOutDrinkingWithFriends(x))", "all x.((Groomer(x) & Omar(x)) -> (GoesOutDrinking(x) & HasFriends(x)))", "all x.((Groomer(x) & Omar(x)) -> (GoesOutDrinking(x) & WithFriends(x)))", "all x.((Groomer(x) & Omar(x)) -> (GoingOutDrinking(x) & WithFriends(x)))", "all x.((Groomer(x) & Omar(x)) -> (GoesOutDrinkingWithFriends(x) & Omar(x)))", "all x.((Groomer(x) & Omar(x)) -> (GoingOutDrinking(x) & Friends(x)))", "Omar's girlfriend told him she was going out drinking with herfriends.", "all x.((Groomer(x) & Omar(x)) -> (GoesOutDrinking(x) & Friends(x)))", "all x.((Groomer(x) & Omar(x)) -> (GoingOutDrinkingWithFriends(x) & Omar(x)))", "all x.((Groomer(x) & Omar(x)) -> GoesOutDrinking(x))", "all x.((Groomer(x) & Omar(x)) -> SheGoesOutDrinking(x))"]}
{"id": "enwn_validation_746", "nl": "It's irrational to be suspicious of someone who is behaving normally.", "fol": "", "prediction": ["all x.((Suspicious(x) & NormalBehaving(x)) -> Irrational(x))", "all x.((SuspiciousOf(x) & NormalBehaving(x)) -> Irrational(x))", "all x.((Suspicious(x) & BehavingNormally(x)) -> Irrational(x))", "all x y.((Suspicious(x) & NormalBehaving(y)) -> Irrational(x))", "all x.((Suspicious(x) & BehavingNormally(x)) -> Irrational(x))", "all x y.((SuspiciousOf(x,y) & NormalBehaving(y)) -> Irrational(x))", "all x y.((Suspicious(x) & BehavingNormally(y)) -> Irrational(x))", "all x y.((SuspiciousOf(x,y) & NormalBehaving(x)) -> Irrational(x))", "all x.((Suspicious(x) & BehavingNormal(x)) -> Irrational(x))", "all x.((SuspiciousOf(x) & BehavingNormally(x)) -> Irrational(x))", "all x.((SuspiciousOf(x) & BehavingNormally(x)) -> Irrational(x))", "all x y.((Suspicious(x) & BehavingNormally(y)) -> Irrational(x))", "all x.((Suspicious(x) & BehavingRegularly(x)) -> Irrational(x))", "all x y.((Suspicious(x) & Person(y) & BehavingNormally(y)) -> Irrational(x))", "all x.((BehavingNormally(x) & Suspicious(x)) -> Irrational(x))", "all x.((BehavingNormally(x) & Suspicious(x)) -> Irrational(x))"]}
{"id": "enwn_validation_747", "nl": "Bugging someone's phone without a good reason is wrong.", "fol": "", "prediction": ["all x.((BugsPhone(x) & -GoodRight(x)) -> Wrong(x))", "all x.((BuggingPhone(x) & -GoodRight(x)) -> Wrong(x))", "all x.((BugsPhone(x) & -GoodRaison(x)) -> Wrong(x))", "all x.((BugsPhone(x) & -GoodRight(x)) -> Worst(x))", "all x.((BuggingPhone(x) & -GoodRaison(x)) -> Wrong(x))", "all x.((BugsPhone(x) & -GoodRun(x)) -> Wrong(x))", "all x y.((Phone(x) & Phone(y) & BuggingWithoutGoodRight(x,y)) -> Wrong(x))", "all x y.((BugsPhone(x) & Phone(y) & -GoodRight(x,y)) -> Wrong(x))", "all x.((BuggingPhone(x) & -GoodRight(x)) -> Worst(x))", "all x y.((Phone(x) & Phone(y) & Bugs(x,y)) -> Wrong(x))", "all x y.((BugsPhone(x) & Phone(y) & -GoodRight(x)) -> Wrong(x))", "all x.((BugsPhone(x) & -GoodRaison(x)) -> Worst(x))", "all x y.((Phone(x) & Phone(y) & Bug(x,y)) -> Wrong(x))", "all x y.((Phone(x) & Phone(y) & Bugging(x,y)) -> Wrong(x))", "all x.((BugsPhone(x) & NoGoodRight(x)) -> Wrong(x))", "all x.((BugsPhone(x) & GoodRight(x)) -> Wrong(x))"]}
{"id": "enwn_validation_748", "nl": "It was normal for Omar's girlfriend to be out late.", "fol": "", "prediction": ["all x.((Groomer(x) & Omar(x)) -> OutLate(x))", "all x.((Groomer(x) & Omar(x)) -> OutLater(x))", "all x.((Groomer(x) & Omar(x)) -> OutLast(x))", "all x.((Girlfriend(x) & Omar(x)) -> OutLate(x))", "all x.((Party(x) & Omar(x)) -> OutLate(x))", "all x.((Groomer(x) & Omar(x)) -> LateOut(x))", "all x.((Groomer(x) & Omar(x) & OutLate(x)) -> Normal(x))", "all x.((Girlfriend(x) & Omar(x)) -> OutLater(x))", "all x.((Girlfriend(x) & Omar(x)) -> OutLast(x))", "all x.((Gayfriend(x) & Omar(x)) -> OutLate(x))", "all x y.((Girlfriend(x) & Omar(y)) -> OutLate(x,y))", "all x.((Party(x) & Omar(x)) -> OutLater(x))", "all x.((Pattie(x) & Omar(x)) -> OutLate(x))", "all x.((Party(x) & Omar(x)) -> OutLast(x))", "All x.((Groomer(x) & Omar(x)) -> OutLate(x))", "all x.((Grooming(x) & Omar(x)) -> OutLate(x))"]}
{"id": "enwn_validation_749", "nl": "Omar suspected his girlfriend was lying because she did something normal.", "fol": "", "prediction": ["Omar suspected his girlfriend was lying because she did somethingnormal.", "Omar suspected that his girlfriend was lying because she did somethingnormal.", "all x.((Gayfriend(x) & DidNormal(x)) -> SuspiciousOmar(x))", "all x y.((Omar(x) & girlfriend(y) & DidNormal(y)) -> SuspiciousOfLiving(x,y))", "all x y.((Omar(x) & Girlfriend(y) & DidNormal(y)) -> SuspiciousOfLiving(x,y))", "all x y.((Omar(x) & Girlfriend(y) & Normal(y)) -> SuspiciousOfLiving(x,y))", "all x.((Gayfriend(x) & DoingNormal(x)) -> SuspiciousOmar(x))", "all x.((Gayfriend(x) & DidNormalThing(x)) -> SuspiciousOmar(x))", "all x y.((Omar(x) & girlfriend(y) & Normal(y)) -> SuspiciousOfLiving(x,y))", "all x y.((Omar(x) & girlfriend(y) & DidNormal(y)) -> Suspicious(x,y))", "all x.((Gayfriend(x) & NormalDoing(x)) -> SuspiciousOmar(x))", "all x y.((Omar(x) & girlfriend(y) & DidNormal(y,x)) -> SuspiciousOfLiving(x,y))", "all x y.((Omar(x) & girlfriend(y)) -> (Living(y) & Normal(y)))", "all x y.((Omar(x) & girlfriend(y) & DoingNormal(y)) -> SuspiciousOfLiving(x,y))", "all x.((Gayfriend(x) & DidNormal(x)) -> Suspicious(x))", "all x y.((Omar(x) & girlfriend(y)) -> (Living(y) | Normal(y)))"]}
{"id": "enwn_validation_750", "nl": "Omar didn't have good reason to suspect his girlfriend was lying.", "fol": "", "prediction": ["all x y.((Omar(x) & Girlfriend(y)) -> -GoodRightToSuspect(x,y))", "Omar didn't have good reason to suspect girlfriend was lying.", "all x.((Omar(x) & -GoodRightToSuspect(x,Liking)) -> -Liking(x))", "all x y.((Omar(x) & Girlfriend(y)) -> -Suspicious(x,y))", "all x y.((Omar(x) & girlfriend(y)) -> -GoodRightToSuspect(x,y))", "all x.((Omar(x) & -GoodRightToSuspect(x)) -> Liking(x))", "all x y.((Omar(x) & Girlfriend(y)) -> -GoodRightToSuspirate(x,y))", "all x.((Omar(x) & -GoodRightToSuspect(x,Living)) -> -Liking(x))", "all x y.((Omar(x) & Girlfriend(y)) -> -GoodArgumentToSuspect(x,y))", "all x.((Omar(x) & -GoodRightToSuspect(x,Lying)) -> -Liking(x))", "all x y.((Omar(x) & girlfriend(y)) -> -GoodRightToSuspirate(x,y))", "all x.((Omar(x) & -GoodRightToSuspect(x)) -> Lies(x))", "all x y.((Omar(x) & girlfriend(y)) -> -GoodRightToSuspectLiking(x,y))", "all x.((Omar(x) & -GoodRightToSuspect(x)) -> Lie(x))", "all x y.((Omar(x) & Girlfriend(y)) -> -GoodRightToSuppose(x,y))", "all x.((Omar(x) & -GoodRightToSuspect(x)) -> Loyal(x))"]}
{"id": "enwn_validation_751", "nl": "Omar bugged his girlfriend's phone without a good reason.", "fol": "", "prediction": ["all x y.((Omar(x) & Girlfriend(y)) -> BuggedPhone(x,y))", "all x y.((Omar(x) & Girlfriend(y)) -> Bugged(x,y))", "all x y.((Omar(x) & Girlfriend(y)) -> BuggedWithoutGoodRight(x,y))", "all x y.((Omar(x) & Girlfriend(y)) -> BuggedPhoneWithoutGoodRight(x,y))", "all x y.((Omar(x) & girlfriend(y)) -> BuggedPhone(x,y))", "all x y z.((Omar(x) & Girlfriend(y) & Phone(z)) -> Bugged(x,y,z))", "all x y z.((Omar(x) & Girlfriend(y) & Phone(z) & Bugged(x,y,z)) -> -GoodRight(x))", "all x y.((Omar(x) & Girlfriend(y) & BuggedPhone(x,y)) -> -GoodRight(x))", "all x y z.((Omar(x) & Girlfriend(y) & Phone(z) & Bugged(x,z)) -> -GoodRight(x))", "all x y z.((Omar(x) & Girlfriend(y) & Phone(z)) -> BuggedWithoutGoodRight(x,y,z))", "all x y.((Omar(x) & girlfriend(y)) -> BuggedPhoneWithoutGoodRight(x,y))", "all x y.((Omar(x) & Girlfriend(y)) -> BuggedWithoutGoodRun(x,y))", "all x y.((Omar(x) & Girlfriend(y) & Bugged(x,y)) -> -GoodRight(x))", "all x y.((Omar(x) & girlfriend(y)) -> Bugged(x,y))", "all x y z.((Omar(x) & girlfriend(y) & Phone(z) & Bugged(x,z)) -> -GoodRight(x))", "all x y.((Omar(x) & Girlfriend(y)) -> BuggedPhoneWithoutGoodRun(x,y))"]}
{"id": "enwn_validation_752", "nl": "Omar shouldn't have bugged his girlfriend's phone.", "fol": "", "prediction": ["Omar shouldn't have bugged girlfriendsPhone(Omar)", "all x y.((Omar(x) & Girlfriend(y)) -> -BanggedPhone(x,y))", "all x y.((Omar(x) & Girlfriend(y)) -> -BuggedPhone(x,y))", "all x y.((Omar(x) & Girlfriend(y)) -> -BbuggedPhone(x,y))", "Omar shouldn't have bugged girlfriend's phone.", "all x.((Omar(x) & Girlfriend(y)) -> -BanggedPhone(x,y))", "all x.((Omar(x) & Girlfriend(y)) -> -BbuggedPhone(x,y))", "all x.((Omar(x) & Girlfriend(y)) -> -BuggedPhone(x,y))", "all x.((Omar(x) & Girlfriend(x)) -> -BanggedPhone(x))", "all x.((Omar(x) & Girlfriend(x)) -> -BbuggedPhone(x))", "all x y.((Omar(x) & Girlfriend(y)) -> -BingeredPhone(x,y))", "all x y.((Omar(x) & Girlfriend(y)) -> -BaggedPhone(x,y))", "all x y.((Omar(x) & Girlfriend(y)) -> -BinggedPhone(x,y))", "all x.((Omar(x) & Girlfriend(x)) -> -BuggedPhone(x))", "Omar shouldn't have bugged girlfriendsPhone(Omar,x))", "all x y.((Omar(x) & Girlfriend(y)) -> -Bbugged(x,y))"]}
{"id": "enwn_validation_753", "nl": "It's inappropriate for supervisors to behave unprofessionally.", "fol": "", "prediction": ["all x.((Supervisor(x) & Unprofessional(x)) -> Inappropriate(x))", "all x.((Supervisor(x) & UnprofessionalBehavior(x)) -> Inappropriate(x))", "all x.((Supervisor(x) & UnprofessionalBehavior(x)) -> UnprofessionalBehavior(x))", "all x.((Supervisor(x) & Unprofessional(x)) -> Unprofessional(x))", "all x.((Supervisor(x) & Unprofessional(x)) -> InappropriateBehavior(x))", "all x y.((Supervisor(x) & Supervisor(y)) -> UnprofessionalBehavior(x,y))", "all x.((Supervisor(x) & Inappropriate(x)) -> BehavesUnprofessionally(x))", "all x.((Supervisor(x) & Inappropriate(x)) -> BehaveUnprofessionally(x))", "all x.((Supervisor(x) & UnprofessionalBehavior(x)) -> -Inappropriate(x))", "all x.((Supervisor(x) & -Professional(x)) -> Inappropriate(x))", "all x y.((Supervisor(x) & Supervisor(y)) -> InappropriateBehavior(x,y))", "all x.((Supervisor(x) & Unprofessional(x)) -> -Inappropriate(x))", "all x.((Supervisor(x) & InappropriateBehavior(x)) -> Unprofessional(x))", "all x y.((Supervisor(x) & Supervisor(y)) -> Unprofessional(x,y))", "all x y.((Supervisor(x) & Supervisor(y)) -> UnprofessionalBehavior(x))", "all x y.((Supervisor(x) & Supervisor(y)) -> Unprofessional(y))"]}
{"id": "enwn_validation_754", "nl": "It's unprofessional to let personal matters interfere with workplace matters.", "fol": "", "prediction": ["all x.((PersonalMatter(x) & InterfereWithWorkplaceMatters(x)) -> Unprofessional(x))", "all x.((PersonalMatters(x) & InterfereWithWorkplaceMatters(x)) -> Unprofessional(x))", "all x y.((PersonalMatter(x) & WorkplaceMatter(y)) -> Unprofessional(x))", "all x.((LetsPersonalMattersInterfereWithWorkplaceMatters(x)) -> Unprofessional(x))", "all x.((PersonalMatter(x) & InterferenceWithWorkplaceMatters(x)) -> Unprofessional(x))", "all x.((PersonalMatter(x) & WorkplaceMatter(x)) -> Unprofessional(x))", "all x.(LetsPersonalMattersInterfereWithWorkplaceMatters(x) -> Unprofessional(x))", "all x.((LetsPersonalMattersInterfere(x) & WorkplaceMatters(x)) -> Unprofessional(x))", "all x.((PersonalMatter(x) & InterferesWithWorkplaceMatters(x)) -> Unprofessional(x))", "all x.((PersonalMatter(x) & InterfereWithWorkplaceMatter(x)) -> Unprofessional(x))", "all x.((PersonalMatters(x) & InterferenceWithWorkplaceMatters(x)) -> Unprofessional(x))", "all x.((PersonalMatters(x) & WorkplaceMatters(x)) -> Unprofessional(x))", "all x.((PersonalMatter(x) & Interfere(x,workplaceMatters)) -> Unprofessional(x))", "all x.((PersonalMatter(x) & InterferenceWithWorkplaceMatter(x)) -> Unprofessional(x))", "all x y.((PersonalMatter(x) & WorkplaceMatter(y)) -> Unprofessional(x,y))", "all x.(Unprofessional(x) -> LetsPersonalMattersInterfereWithWorkplaceMatters(x))"]}
{"id": "enwn_validation_755", "nl": "An employer's influence over their employees' pay is a workplace matter.", "fol": "", "prediction": ["all x y.((Employer(x) & Employee(y)) -> InfluenceOverPay(x,y))", "all x.((Employer(x) & InfluenceOverEmployeesPay(x)) -> WorkplaceMatter(x))", "all x y.((Employer(x) & Employee(y) & InfluenceOverPay(x,y)) -> WorkplaceMatter(x))", "all x.((Employer(x) & InfluenceOverEmployeePay(x)) -> WorkplaceMatter(x))", "all x y.((Employee(x) & Employee(y) & InfluenceOverPay(x,y)) -> WorkplaceMatter(x))", "all x y.((Employee(x) & Employee(y)) -> InfluenceOverPay(x,y))", "all x y.((Employer(x) & Employee(y) & Influence(x,y)) -> WorkplaceMatter(x))", "all x.((Employee(x) & InfluenceOverEmployeesPay(x)) -> WorkplaceMatter(x))", "all x y.((Employer(x) & Employee(y) & InfluenceOverPay(x,y)) -> WorkplaceMatter(x,y))", "all x.((Employee(x) & InfluenceOverEmployeePay(x)) -> WorkplaceMatter(x))", "all x y z.((Employer(x) & Employee(y) & Pay(z) & InfluenceOver(x,y,z)) -> WorkplaceMatter(x))", "all x y z.((Employer(x) & Employee(y) & Employee(z)) -> InfluenceOverPay(x,y,z))", "all x.(EmployerInfluenceOverEmployeesPay(x) -> WorkplaceMatter(x))", "all x y z.((Employer(x) & Employee(y) & Pay(z) & Influence(x,y,z)) -> WorkplaceMatter(x))", "all x.((Employer(x) & EmployeePay(x)) -> WorkplaceMatter(x))", "all x.((Employer(x) & EmployeesPay(x)) -> WorkplaceMatter(x))"]}
{"id": "enwn_validation_756", "nl": "Alan docked Tim's pay because Tim gave Alan's daughter a low score on a test.", "fol": "", "prediction": ["all x y.((Alan(x) & Tim(y)) -> DockedPay(x,y))", "all x y.((Alan(x) & Tim(y) & LowScore(y)) -> DockedPay(x,y))", "all x y.((Alan(x) & Tim(y) & LowScore(y,x)) -> DockedPay(x,y))", "all x y.((Alan(x) & Tim(y) & LowScoreOnTest(y)) -> DockedPay(x,y))", "all x y.((Alan(x) & Tim(y) & LowScore(x,y)) -> DockedPay(x,y))", "all x y.((Alan(x) & Tim(y) & LowScoreOnTest(y,x)) -> DockedPay(x,y))", "all x y z.((Alan(x) & Tim(y) & Test(z) & LowScore(y,z)) -> DockedPay(x,y))", "all x y.((Alan(x) & Tim(y) & LowScoreOnTest(x,y)) -> DockedPay(x,y))", "all x y z.((Alan(x) & Tim(y) & Test(z) & LowScore(y,z)) -> DockedPay(x,y,z))", "all x y z.((Alan(x) & Tim(y) & Pay(z) & LowScoreOnTest(y,z)) -> Docked(x,y,z))", "all x y z.((Alan(x) & Tim(y) & Pay(z) & LowScore(y,z)) -> Docked(x,y,z))", "all x y z.((Alan(x) & Tim(y) & Pay(z) & LowScore(y,z)) -> Docked(x,y))", "all x y z.((Alan(x) & Tim(y) & Pay(z) & LowScoreOnTest(y,z)) -> Docked(x,y))", "all x y.((Alan(x) & Tim(y) & LowScoreTest(y)) -> DockedPay(x,y))", "all x y z.((Alan(x) & Tim(y) & Pay(z) & LowScore(z)) -> Docked(x,y,z))", "all x y z.((Alan(x) & Tim(y) & Pay(z) & LowScore(y) & Test(z)) -> Docked(x,y,z))"]}
{"id": "enwn_validation_757", "nl": "Doing something because of a familial relationship is doing it for a personal reason.", "fol": "", "prediction": ["all x.((Doing(x) & FamilialRelationship(x)) -> PersonalRaison(x))", "all x.((Doing(x) & FamilialRelationship(x)) -> PersonalRun(x))", "all x.((Doing(x) & FamilialRelationship(x)) -> DoingForPersonalRaison(x))", "all x.((Doing(x) & FamilialRelationship(x)) -> PersonalRite(x))", "all x.((Doing(x) & FamilialRelationship(x)) -> PersonalRitual(x))", "all x.((Doing(x) & FamilialRelationship(x)) -> DoesForPersonalRaison(x))", "all x.((Doing(x) & FamilialRelationship(x)) -> Personal(x))", "all x y.((Doing(x,y) & FamilialRelationship(x)) -> Doing(x,y))", "all x.((Doing(x) & FamilialRelationship(x)) -> DoingForPersonalRun(x))", "all x.((Doing(x) & FamilyLimit(x)) -> PersonalRaison(x))", "all x.((Doing(x) & FamilialRelationship(x)) -> PersonalRight(x))", "all x y.((FamilyRelationship(x) & Doing(x,y)) -> PersonalRaison(x))", "all x.((Doing(x) & FamilialRelationship(x)) -> DoingForPersonalRight(x))", "all x.((DoingAsFamily(x) & FamilialRelationship(x)) -> PersonalRaison(x))", "all x y.((Doing(x,y) & FamilialRelationship(x)) -> PersonalRaison(y))", "all x.((Doing(x) & FamilialRelationship(x)) -> DoingForPersonalRite(x))"]}
{"id": "enwn_validation_758", "nl": "It's unprofessional to dock your employee's pay for personal reasons.", "fol": "", "prediction": ["all x y.((Employee(x) & Employee(y) & DocksPay(x,y)) -> Unprofessional(x))", "all x y.((Employee(x) & Employee(y) & DocksPayForPersonalCauses(x,y)) -> Unprofessional(x))", "all x y.((Employee(x) & Employee(y) & DockPay(x,y)) -> Unprofessional(x))", "all x y.((Employee(x) & Employee(y) & DocksPayForPersonalRates(x,y)) -> Unprofessional(x))", "all x y.((Employee(x) & Employee(y) & DocksPayForPersonal(x,y)) -> Unprofessional(x))", "all x y.((Employee(x) & Employee(y) & DocksPersonalPay(x,y)) -> Unprofessional(x))", "all x.((Employee(x) & DockPay(x)) -> Unprofessional(x))", "all x y.((Employee(x) & Employee(y) & DocksPayForPersonalMoments(x,y)) -> Unprofessional(x))", "all x y.((Employee(x) & Employee(y) & DocksPayForPersonalAreas(x,y)) -> Unprofessional(x))", "all x.((DockEmployeePay(x) & Personal(x)) -> Unprofessional(x))", "all x.((Employee(x) & DocksPay(x)) -> Unprofessional(x))", "all x y.((Employee(x) & Employee(y) & Docks(x,y)) -> Unprofessional(x))", "all x y.((Employee(x) & Employee(y) & DocksPay(x,y)) -> -Professional(x))", "all x y.((Employee(x) & Employee(y) & Dock(x,y)) -> Unprofessional(x))", "all x.((DockEmployeePay(x) & PersonalRates(x)) -> Unprofessional(x))", "all x y.((Employee(x) & Employee(y) & DocksPaid(x,y)) -> Unprofessional(x))"]}
{"id": "enwn_validation_759", "nl": "Alan docked Tim's pay for a personal reason.", "fol": "", "prediction": ["all x y.((Alan(x) & Tim(y)) -> DockedPay(x,y))", "all x y.((Alan(x) & Tim(y)) -> DockedPaid(x,y))", "all x y z.((Alan(x) & Tim(y) & Pay(z)) -> DockedForPersonalRight(x,y,z))", "all x y z.((Alan(x) & Tim(y) & Pay(z)) -> DockedForPersonalRaison(x,y,z))", "all x y z.((Alan(x) & Tim(y) & Pay(z)) -> Docked(x,y,z))", "all x y.((Alan(x) & Tim(y)) -> DockedPayForPersonalRaison(x,y))", "all x y.((Alan(x) & Tim(y)) -> DockedPayForPersonalRight(x,y))", "all x y z.((Alan(x) & Tim(y) & Pay(z)) -> DockedFor(x,y,z))", "all x y.((Alan(x) & Tim(y)) -> DockedPayForPersonalMoment(x,y))", "all x y.((Alan(x) & Tim(y)) -> Docked(x,y))", "all x y z.((Alan(x) & Tim(y) & Pay(z)) -> DockedForPersonalMoment(x,y,z))", "all x y z.((Alan(x) & Tim(y) & Pay(z)) -> DockedForPersonalRun(x,y,z))", "all x y.((Alan(x) & Tim(y)) -> DockedPersonalPay(x,y))", "all x y z.((Alan(x) & Tim(y) & Pay(z)) -> DockedForPersonal(x,y,z))", "all x y.((Alan(x) & Tim(y)) -> DockedPayForPersonalRun(x,y))", "Alan docked Tim's pay for personal reason."]}
{"id": "enwn_validation_760", "nl": "It was unprofessional for Alan to dock Tim's pay.", "fol": "", "prediction": ["all x.((Alan(x) & DocksTimPay(x)) -> Unprofessional(x))", "all x.((Alan(x) & DockTimPay(x)) -> Unprofessional(x))", "all x y.((Alan(x) & Tim(y)) -> DocksPay(x,y))", "all x y.((Alan(x) & Tim(y)) -> DockPay(x,y))", "all x y.((Alan(x) & Tim(y) & DockPay(x,y)) -> Unprofessional(x))", "all x y.((Alan(x) & Tim(y) & DocksPay(x,y)) -> Unprofessional(x))", "all x.((Alan(x) & DockTimsPay(x)) -> Unprofessional(x))", "all x.((Alan(x) & DocksTimsPay(x)) -> Unprofessional(x))", "all x y z.((Alan(x) & Tim(y) & Pay(z) & Docks(x,y,z)) -> Unprofessional(x))", "all x.((Alan(x) & DocksTim'sPay(x)) -> Unprofessional(x))", "all x y z.((Alan(x) & Tim(y) & Pay(z)) -> Docks(x,y,z))", "all x.((Alan(x) & DocksPay(x,Tim)) -> Unprofessional(x))", "all x.((Alan(x) & DockTim'sPay(x)) -> Unprofessional(x))", "all x y.((Alan(x) & Tim(y) & DockPay(x,y)) -> Unprofessional(x,y))", "All x.((Alan(x) & DocksTimPay(x)) -> Unprofessional(x))", "all x y z.((Alan(x) & Tim(y) & Pay(z) & Dock(x,y,z)) -> Unprofessional(x))"]}
{"id": "enwn_validation_761", "nl": "Alan should not have docked Tim's pay.", "fol": "", "prediction": ["all x.((Alan(x) & Tim(y)) -> -DockedPay(x,y))", "all x y.((Alan(x) & Tim(y)) -> -DockedPay(x,y))", "all x.((Alan(x) & Tim(t)) -> -DockedPay(x,t))", "all x.((Alan(x) & Tim(x)) -> -DockedPay(x,Tim))", "all x.((Alan(x) & -DockedTimsPay(x)) -> -DockedTimsPay(x))", "all x.((Alan(x) & Tim(x)) -> -DockedPay(x,y))", "all x.((Alan(x) & Tim(y)) -> -DockedPaid(x,y))", "all x y.((Alan(x) & Tim(y)) -> -DockedPaid(x,y))", "All x.((Alan(x) & Tim(y)) -> -DockedPay(x,y))", "all x.((Alan(x) & Tim(t)) -> -DockedPay(x,t,t))", "all x.((Alan(x) & Tim(x)) -> -DockedPay(x))", "all x.((Alan(x) & Tim(x)) -> -DockedPay(x,tim))", "all x.((Alan(x) & Tim(t)) -> -DockedPaid(x,t))", "all x.((Alan(x) & Tim(y)) -> -DockedPay(x,y))", "all x.((Alan(x) & TimsPay(x)) -> -Docked(x,Tim))", "All x.((Alan(x) & Tim(t)) -> -DockedPay(x,t))"]}
{"id": "enwn_validation_762", "nl": "You should not inconvenience people.", "fol": "", "prediction": ["all x.((Person(x) & -Inconvenient(x)) -> -Inconvenient(x))", "all x.((People(x) & -Inconvenient(x)) -> -Inconvenient(x))", "all x y.((Person(x) & Inconvenient(y)) -> -Inconvenient(x,y))", "all x.((Person(x) & -Inconvenient(x)) -> -(Inconvenient(x) | Inconvenient(x))))", "all x y.((Person(x) & Person(y)) -> -Inconvenient(x,y))", "all x.((Inconvenient(x) & Person(y)) -> -Inconvenient(x,y))", "all x.((Person(x) & -Inconvenient(x)) -> -(Person(x) & Inconvenient(x)))", "all x.((Client(x) & -Inconvenient(x)) -> -Inconvenient(x))", "all x.((Person(x) & -Inconvenient(x)) -> -(Inconvenient(x) & Inconvenient(x)))", "all x.((Person(x) & Inconvenient(x)) -> -Inconvenient(x))", "all x.((Inconvenient(x) & People(y)) -> -Inconvenient(x,y))", "all x.((Person(x) & -Inconvenience(x)) -> -Inconvenient(x))", "all x.((Inconvenient(x) & People(x)) -> -Inconvenient(x))", "all x.(Inconvenient(x) -> -Inconvenient(x))", "all x.((People(x) & -Inconvenient(x)) -> -(Inconvenient(x) | Inconvenient(x))))", "all x.((Person(x) & -Inconvenient(x)) -> -(Inconvenient(x) & Inconvenient(x))))"]}
{"id": "enwn_validation_763", "nl": "Preetha parked in front of her neighbor's car, blocking them in their shared driveway.", "fol": "", "prediction": ["all x y.((Preetha(x) & Neighbor(y)) -> ParkedInFrontOf(x,y))", "all x y z.((Preetha(x) & Neighbor(y) & Car(z)) -> ParkedInFrontOf(x,y,z))", "all x y.((Preetha(x) & Neighbor(y)) -> ParksInFrontOf(x,y))", "all x y z.((Preetha(x) & Neighbor(y) & Car(z)) -> ParksInFrontOf(x,y,z))", "all x y.((Preetha(x) & Neighbor(y)) -> (ParksInFrontOf(x,y) & BlocksInSharedDriveway(x,y)))", "all x y z.((Preetha(x) & Neighbor(y) & Car(z)) -> ParksInFront(x,y,z))", "all x y z.((Preetha(x) & Neighbor(y) & Car(z)) -> ParkedInFront(x,y,z))", "all x y.((Preetha(x) & Neighbor(y)) -> (ParkedInFrontOf(x,y) & BlockedInSharedDriveway(x,y)))", "all x y z.((Preetha(x) & Neighbor(y) & Car(z) & ParkedInFront(x,y,z)) -> BlocksInSharedDriveway(x,y,z))", "all x y z.((Preetha(x) & Neighbor(y) & Car(z)) -> (ParksInFront(x,y,z) & BlocksInSharedDriveway(x,y,z)))", "all x y.((Preetha(x) & Neighbor(y)) -> (ParkedInFrontOf(x,y) & BlocksInSharedDriveway(x,y)))", "all x y z.((Preetha(x) & Neighbor(y) & Car(z)) -> (ParkedInFrontOf(x,y,z) & BlocksInSharedDriveway(x,y,z)))", "all x y.((Preetha(x) & Neighbor(y)) -> ParksInFrontOfCar(x,y))", "all x y.((Preetha(x) & Neighbor(y)) -> ParkedInFrontOfCar(x,y))", "all x y z.((Preetha(x) & Neighbor(y) & Car(z)) -> (ParkedInFront(x,y,z) & BlockedInSharedDriveway(x,y,z)))", "all x y z.((Preetha(x) & Neighbor(y) & Car(z)) -> (ParkedInFrontOf(x,y,z) & BlockedInSharedDriveway(x,y,z)))"]}
{"id": "enwn_validation_764", "nl": "It's inconvenient to have your car blocked.", "fol": "", "prediction": ["all x.((Car(x) & Blocked(x)) -> Inconvenient(x))", "all x.((Car(x) & Blocked(x)) -> Inconvenient(x))", "all x.((CarBlocked(x)) -> Inconvenient(x))", "all x y.((Car(x) & Car(y) & Blocked(x,y)) -> Inconvenient(x))", "all x.((Car(x) & -Blocked(x)) -> Inconvenient(x))", "all x.((Camera(x) & Blocked(x)) -> Inconvenient(x))", "all x y.((Car(x) & Blocked(y)) -> Inconvenient(x))", "all x.((CarBlocked(x)) -> Inconvenient(x))", "all x y.((Car(x) & Car(y) & Blocked(x,y)) -> Inconvenient(x,y))", "all x y.((Car(x) & Blocked(y)) -> Inconvenient(x,y))", "All x.((Car(x) & Blocked(x)) -> Inconvenient(x))", "all x y.((Car(x) & Car(y)) -> Blocked(x,y))", "all x y.((Car(x) & Blocked(x)) -> Inconvenient(y))", "all x.((Car(x) & -Blocked(x)) -> Inconvenient(x))", "all x y.((Car(x) & Blocked(x)) -> Inconvenient(x))", "all x.((CarBlocked(x) & Inconvenient(x)) -> Inconvenient(x))"]}
{"id": "enwn_validation_765", "nl": "Preetha parking in front of her neighbor's car inconvenienced her neighbor.", "fol": "", "prediction": ["all x y.((Person(x) & Neighbor(y) & ParkingInFrontOf(x,y)) -> Inconvenient(x,y))", "all x y z.((Preetha(x) & Neighbor(y) & ParkingInFrontOfCar(x,y) & Neighbor(z)) -> Inconvenient(x,y,z))", "all x y z.((Preetha(x) & Neighbor(y) & ParkingInFrontOf(x,y) & Car(z)) -> Inconvenient(x,y,z))", "all x y.((Person(x) & Neighbor(y) & ParksInFrontOf(x,y)) -> Inconvenient(x,y))", "all x y.((Preetha(x) & Neighbor(y)) -> ParkingInFrontOfCar(x,y))", "all x y z.((Preetha(x) & Neighbor(y) & ParkingInFrontOf(x,y) & Neighbor(z)) -> Inconvenient(x,y,z))", "all x y.((Preetha(x) & Neighbor(y)) -> ParkingInFrontOf(x,y))", "all x y.((Preetha(x) & Neighbor(y)) -> ParkingInFrontOfCarInconvenient(x,y))", "all x y.((Person(x) & Neighbor(y) & ParkingInFrontOfCar(x,y)) -> Inconvenient(x,y))", "all x y.((Preetha(x) & Neighbor(y) & ParkingInFrontOf(x,y)) -> Inconvenient(x,y))", "all x y.((Person(x) & Neighbor(y) & ParkingInFrontOf(x,y)) -> Uncomfortable(x,y))", "all x y z.((Preetha(x) & Neighbor(y) & ParkingInFrontOfCar(x,y) & Neighbor(z)) -> Uncomfortable(x,y,z))", "all x y z.((Preetha(x) & Neighbor(y) & ParkingInFrontOf(x,y) & Car(z)) -> Uncomfortable(x,y,z))", "all x y z.((Preetha(x) & Neighbor(y) & ParkingInFrontOf(x,y) & Car(z)) -> Inconvenient(x,y))", "all x y z.((Person(x) & Neighbor(y) & ParkingInFrontOf(x,y) & Neighbor(z)) -> Inconvenient(x,y,z))", "all x y.((Person(x) & Neighbor(y) & ParksInFrontOf(x,y)) -> Uncomfortable(x,y))"]}
{"id": "enwn_validation_766", "nl": "Preetha should not have parked in front of her neighbor's car.", "fol": "", "prediction": ["all x y.((Preetha(x) & Neighbor(y)) -> -ParkedInFrontOf(x,y))", "all x y.((Neighbor(x) & Preetha(y)) -> -ParkedInFrontOf(y,x))", "all x y.((Preetha(x) & Neighbor(y)) -> -ParkedInFrontOfCar(x,y))", "all x.((Preetha(x) & NeighborsCar(x)) -> -ParkedInFrontOf(x,y))", "all x y z.((Preetha(x) & Neighbor(y) & Car(z)) -> -ParkedInFrontOf(x,y,z))", "all x.((Preetha(x) & NeighborCar(y)) -> -ParkedInFrontOf(x,y))", "all x y.((Preetha(x) & NeighborCar(y)) -> -ParkedInFrontOf(x,y))", "all x.((Preetha(x) & NeighborCar(x)) -> -ParkedInFrontOf(x,y))", "all x.((Preetha(x) & NeighborsCar(y)) -> -ParkedInFrontOf(x,y))", "all x y.((Preetha(x) & NeighborsCar(y)) -> -ParkedInFrontOf(x,y))", "all x.((Preetha(x) & NeighborCar(x)) -> -ParkedInFrontOf(x,NeighborCar))", "all x.((Preetha(x) & Neighbor(y)) -> -ParkedInFrontOf(x,y))", "all x.((Preetha(x) & Neighbor(x)) -> -ParkedInFrontOfCar(x,y))", "all x y z.((Preetha(x) & Neighbor(y) & Car(z)) -> -ParkedInFront(x,y,z))", "all x.((Preetha(x) & Neighbor(y)) -> -ParkedInFrontOfCar(x,y))", "all x.((Preetha(x) & NeighborsCar(x)) -> -ParkedInFrontOf(x,NeighborsCar))"]}
{"id": "enwn_validation_767", "nl": "It's rude to spoil a show.", "fol": "", "prediction": ["all x y.((Spoilage(x) & Show(y)) -> Rust(x))", "all x y.((Spoilage(x) & Show(y)) -> Rust(x,y))", "all x y.((Spoilage(x) & Show(y)) -> Rustic(x))", "all x.((Spoilage(x) & Show(x)) -> Rust(x))", "all x y.((SpokenShow(x) & Show(y)) -> Rust(x))", "all x y.((Spoises(x,y) & Show(y)) -> Rust(x))", "all x y.((Spoilage(x,y) & Show(y)) -> Rust(x))", "all x y.((SpoilageShow(x) & Show(y)) -> Rust(x))", "all x.((Spoises(x) & Show(x)) -> Rust(x))", "all x y.((Spoilage(x) & Show(y)) -> Rupid(x))", "all x y.((SpoisesShow(x) & Show(y)) -> Rust(x))", "all x y.((Show(x) & Show(y)) -> Rust(x))", "all x y.((Spoilage(x) & Show(y)) -> Rusty(x))", "all x y.((Spoilage(x) & Show(y)) -> Ruin(x))", "all x y.((Spoilage(x) & Show(y)) -> Rustic(x,y))", "all x y.((SpokenShow(x) & Show(y)) -> Rust(x,y))"]}
{"id": "enwn_validation_768", "nl": "You shouldn't be rude.", "fol": "", "prediction": ["all x.((Rule(x) & -Rule(x)) -> -Rule(x))", "all x.(Rule(x) -> -Rule(x))", "all x.((Rule(x) & -Rule(x)) -> -(Rule(x) & -Rule(x)))", "all x.((Relax(x) & -Rule(x)) -> -Relax(x))", "all x.((Rule(x)) -> -Rule(x))", "all x.((Relax(x) & -Rule(x)) -> -Rule(x))", "all x.((Rule(x) & -Rule(x)) -> NotRule(x))", "all x.((Rude(x) & -Rule(x)) -> -Rule(x))", "all x.(NoRule(x) -> -Rule(x))", "all x.((Relax(x) & -Relax(x)) -> -Relax(x))", "all x.((Urse(x) & -Rule(x)) -> -Rule(x))", "all x.((Rule(x) & -Rule(x)) -> -Relative(x))", "all x.(Relax(x) -> -Rule(x))", "all x.((Rule(x) & -Rule(x)) -> -(Rule(x) & -Rule(x))))", "all x.((Rule(x) & -Rule(x)) -> -(Rule(x) -> -Rule(x)))", "all x.((Rule(x) & -Rule(x)) -> -Rubious(x))"]}
{"id": "enwn_validation_769", "nl": "Spoiling something means revealing a detail to someone before they get a chance to learn it for themselves.", "fol": "", "prediction": ["all x y.((Spoiling(x) & Person(y)) -> (DisclosingDetail(x,y) & GettingChanceToLearn(y,x)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Disclosing(x,y) & GettingChanceToLearn(z,y)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Disclosing(x,y,z) & Learns(z,y)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Disclosing(x,y) & Learns(z,y)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Disclosing(x,y,z) & GetsChanceToLearn(z,y)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Disclosing(x,y,z) & GetsChanceToLearn(x,y,z)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Disclosing(x,y,z) & LearnsFor(z,y)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Disclosing(x,y,z) & Learns(x,y,z)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Divers(x,y) & Learns(z,y)))", "all x y.((Spoiling(x) & Person(y)) -> (DisclosingDetail(x,y) & GettingChanceToLearn(x,y)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Disclosing(x,y) & GettingChanceToLearn(x,z)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Disclosing(x,y,z) & Learns(x,y)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Disclosing(x,y,z) & LearnsFor(x,z)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Disclosing(x,y) & GettingChanceToLearn(z,y,z)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Disclosing(x,y,z) & GetsChanceToLearn(x,y)))", "all x y z.((Spoiling(x) & Detail(y) & Person(z)) -> (Explores(x,y,z) & Learns(z,y)))"]}
{"id": "enwn_validation_770", "nl": "Dane told Demarcus how the show ended before Demarcus got a chance to finish watching it.", "fol": "", "prediction": ["all x y z.((Dane(x) & Demarcus(y) & Show(z) & Ends(x,z)) -> TellsDemarcus(x,y,z))", "Dane told Demarcus how the show ended before Demarcus got a chance to finish watching it.", "all x y z.((Dane(x) & Demarcus(y) & Show(z) & Ends(x,z)) -> TellsDemarcus(x,y))", "all x y z.((Dane(x) & Demarcus(y) & Show(z) & Ends(x,z)) -> TellsDemarcusHow(x,y,z))", "all x y z.((Danie(x) & Demarcus(y) & Show(z) & Ends(x,z)) -> TellsDemarcus(x,y,z))", "all x y z.((Danie(x) & Demarcus(y) & Show(z) & Ends(x,z)) -> TellsDemarcus(x,y))", "all x y z.((Dane(x) & Demarcus(y) & Show(z) & Ends(x,z)) -> Tells(x,y))", "all x y z.((Dane(x) & Demarcus(y) & Show(z) & Ends(x,z)) -> Tells(x,y,z))", "all x y z.((Dane(x) & Demarcus(y) & Show(z) & Ends(x,z)) -> TellsHow(x,y,z))", "all x y z.((Dane(x) & Demarcus(y) & Show(z)) -> (Ends(x,z) & -CanFinish(y,z)))", "all x y z.((Dane(x) & Demarcus(y) & Show(z) & Ends(x,z)) -> TellsDemarcusHowShowEnds(x,y,z))", "all x y z.((Dane(x) & Demarcus(y) & Show(z) & Ends(x,z)) -> TellsDemarcusHow(x,y))", "all x y.((Dane(x) & Demarcus(y)) -> (EndedShow(x,y) & -FinishedWatchingShow(y,x)))", "all x y z.((Dane(x) & Demarcus(y) & Show(z)) -> (Ends(x,z) & -HasChanceToWatch(y,z)))", "all x y z.((Dane(x) & Demarcus(y) & Show(z) & Ends(x,z)) -> TellsDemarcusHowShowEndeds(x,y,z))", "all x y z.((Dane(x) & Demarcus(y) & Show(z) & Ends(x,y,z)) -> TellsDemarcus(x,y))"]}
{"id": "enwn_validation_771", "nl": "You shouldn't spoil shows for people.", "fol": "", "prediction": ["all x y.((Show(x) & Person(y)) -> -Spoises(x,y))", "all x.((Show(x) & -SpoisesForPeople(x)) -> -SpoisesForPeople(x))", "all x y.((Show(x) & Person(y)) -> -Spoils(x,y))", "all x.((Show(x) & -Spoises(x,people)) -> -Spoises(x,people))", "all x.((Show(x) & -Spoises(x,People)) -> -Spoises(x,People))", "all x.((Show(x) & -Spoises(x)) -> -Spoises(x))", "all x.((Show(x) & -SpoisesForPerson(x)) -> -SpoisesForPerson(x))", "all x y.((Show(x) & Person(y)) -> -Spoil(x,y))", "all x.((Show(x) & -SpoisesForPeople(x)) -> -SpoilsForPeople(x))", "all x.((Show(x) & People(y)) -> -Spoises(x,y))", "all x y.((Show(x) & People(y)) -> -Spoises(x,y))", "all x.((Show(x) & People(y)) -> -Spoils(x,y))", "all x y.((Show(x) & Person(y)) -> -SpoisesFor(x,y))", "all x y.((Show(x) & People(y)) -> -Spoils(x,y))", "all x.((Show(x) & People(x)) -> -Spoises(x,y))", "all x y.((Show(x) & Person(y)) -> -Spoken(x,y))"]}
{"id": "enwn_validation_772", "nl": "Dane spoiled the show for Demarcus.", "fol": "", "prediction": ["all x y.((Dane(x) & Demarcus(y)) -> StolenShow(x,y))", "all x y.((Dane(x) & Demarcus(y)) -> SpottedShow(x,y))", "all x y.((Dane(x) & Demarcus(y)) -> SpoiltsShow(x,y))", "all x y.((Dane(x) & Demarcus(y)) -> SpoiltShow(x,y))", "all x y.((Dane(x) & Demarcus(y)) -> spoiledShow(x,y))", "all x y z.((Dane(x) & Demarcus(y) & Show(z)) -> Spoilt(x,y,z))", "all x y z.((Dane(x) & Demarcus(y) & Show(z)) -> SpottedFor(x,y,z))", "all x y z.((Dane(x) & Demarcus(y) & Show(z)) -> Spotted(x,y,z))", "all x y z.((Dane(x) & Demarcus(y) & Show(z)) -> Stolen(x,y,z))", "all x y.((Dane(x) & Demarcus(y)) -> SpookedShow(x,y))", "all x y z.((Dane(x) & Demarcus(y) & Show(z)) -> StolenFor(x,y,z))", "all x y.((Dane(x) & Demarcus(y)) -> Spotted(x,y))", "all x y z.((Dane(x) & Demarcus(y) & Show(z)) -> Spoilt(x,z))", "all x y z.((Dane(x) & Demarcus(y) & Show(z)) -> Spotted(x,z))", "all x y z.((Dane(x) & Demarcus(y) & Show(z)) -> spoiled(x,y,z))", "all x y z.((Dane(x) & Demarcus(y) & Show(z)) -> Stolen(x,z))"]}
{"id": "enwn_validation_773", "nl": "Dane should not have spoiled the show for Demarcus.", "fol": "", "prediction": ["all x y.((Dane(x) & Demarcus(y)) -> -SpookedShow(x,y))", "all x y.((Dane(x) & Demarcus(y)) -> -SpokedShow(x,y))", "all x y.((Dane(x) & Demarcus(y)) -> -SpoiledShow(x,y))", "all x y.((Dane(x) & Demarcus(y)) -> -spoiledShow(x,y))", "all x y.((Dane(x) & Demarcus(y)) -> -SpoiledShow(x,y))", "all x.((Dane(x) & Demarcus(x)) -> -SpookedShow(x))", "all x.((Dane(x) & Demarcus(x)) -> -SpokedShow(x))", "all x.((Dane(x) & Demarcus(x)) -> -spoiledShow(x))", "all x.((Dane(x) & Demarcus(y)) -> -SpookedShow(x,y))", "all x y.((Dane(x) & Demarcus(y)) -> -SpokenShow(x,y))", "all x y z.((Dane(x) & Demarcus(y) & Show(z)) -> -Spooked(x,y,z))", "all x.((Dane(x) & Demarcus(x)) -> -SpoiledShow(x))", "all x y z.((Dane(x) & Demarcus(y) & Show(z)) -> -Spooked(x,z))", "all x y.((Dane(x) & Demarcus(y)) -> -ShapedShow(x,y))", "all x.((Dane(x) & Demarcus(y)) -> -SpokedShow(x,y))", "all x y z.((Dane(x) & Demarcus(y) & Show(z)) -> -Spoked(x,y,z))"]}
{"id": "enwn_validation_774", "nl": "You should only call emergency services in an emergency.", "fol": "", "prediction": ["all x.((Emergency(x) & CallsEmergencyServices(x)) -> CallsEmergencyServices(x))", "all x.((Emergency(x) & CallEmergencyServices(x)) -> CallEmergencyServices(x))", "all x y.((Emergency(x) & Emergency(y)) -> CallsEmergencyServices(x,y))", "all x.((Emergency(x) & CallsEmergencyServices(x)) -> -CallsEmergencyServices(x))", "all x y.((Emergency(x) & Emergency(y)) -> Calls(x,y))", "all x y.((Emergency(x) & Emergency(y)) -> CallEmergencyServices(x,y))", "all x.(Emergency(x) -> CallsEmergencyServices(x))", "all x y.((Emergency(x) & EmergencyService(y)) -> Call(x,y))", "all x.(Emergency(x) -> CallEmergencyServices(x))", "all x.((Emergency(x) & CallEmergencyServices(x)) -> -CallEmergencyServices(x))", "all x.((CallsEmergencyServices(x) & Emergency(x)) -> CallsEmergencyServices(x))", "all x y.((Emergency(x) & Emergency(y)) -> Call(x,y))", "all x y.((Emergency(x) & EmergencyService(y)) -> Calls(x,y))", "all x.((Emergency(x) & CallsEmergencyServices(x)) -> NotInEmergency(x))", "all x.((Emergency(x) & CallsEmergencyServices(x)) -> CallsEmergencyServicesInEmergency(x))", "all x.((Emergency(x) & CallsEmergencyServices(x)) -> OnlyInEmergency(x))"]}
{"id": "enwn_validation_775", "nl": "The police are an emergency service.", "fol": "", "prediction": ["all x.(Police(x) -> EmergencyService(x))", "all x y.((Police(x) & EmergencyService(y)) -> exists z.(Police(z) & EmergencyService(z))))", "all x y.((Police(x) & EmergencyService(y)) -> Is(x,y))", "all x.(Police(x) -> EmergencyService(x))", "all x y.((Police(x) & EmergencyService(y)) -> Provides(x,y))", "all x y.((Police(x) & EmergencyService(y)) -> Police(x))", "all x y.((Police(x) & EmergencyService(y)) -> Has(x,y))", "all x y.((Police(x) & EmergencyService(y)) -> Operates(x,y))", "all x y.((Police(x) & EmergencyService(y)) -> (Police(x) & EmergencyService(x)))", "all x y.((Police(x) & EmergencyService(y)) -> EmergencyService(x))", "all x y.((Police(x) & EmergencyService(y)) -> exists z.(Police(z) & EmergencyService(z) & EmergencyService(z))))", "all x y.((Police(x) & EmergencyService(y)) -> LocatedIn(x,y))", "all x y.((Police(x) & EmergencyService(y)) -> EmergencyService(x,y))", "all x y.((Police(x) & EmergencyService(y)) -> exists z.(Police(z) & EmergencyService(z) & Operates(x,z))))", "all x y.((Police(x) & EmergencyService(y)) -> exists z.(Police(z) & EmergencyService(x,z))))", "all x y.((Police(x) & Firefighter(y)) -> EmergencyService(x))"]}
{"id": "enwn_validation_776", "nl": "Alina called the police on some teenagers who were sitting across the street from her house because she thought they looked suspicious.", "fol": "", "prediction": ["all x y.((Alina(x) & Teenager(y) & SittingAcrossStreet(y,x)) -> CallsPolice(x,y))", "all x y.((Alina(x) & Teenager(y) & SittingAcrossStreet(x,y)) -> CallsPolice(x,y))", "all x y z.((Alina(x) & Teenager(y) & House(z) & SittingAcrossStreet(y,z)) -> CallsPolice(x,y,z))", "all x y z.((Alina(x) & Teenager(y) & Street(z) & SittingAcrossStreet(y,z)) -> CallsPolice(x,y,z))", "all x y.((Alina(x) & Teenager(y) & SittingAcrossStreet(y)) -> CallsPolice(x,y))", "all x y z.((Alina(x) & Teenager(y) & House(z) & SittingAcrossStreet(y,z)) -> CallsPolice(x,y))", "all x y.((Alina(x) & Teenager(y) & SittingAcrossStreetFrom(x,y)) -> CallsPolice(x,y))", "all x y.((Alina(x) & Teenage(y) & SittingAcrossStreet(x,y)) -> CallsPolice(x,y))", "all x y z.((Alina(x) & Teenage(y) & House(z) & SittingAcrossStreet(y,z)) -> CallsPolice(x,y,z))", "all x y z.((Alina(x) & Teenager(y) & House(z) & SittingAcrossStreet(y,z)) -> CalledPolice(x,y,z))", "all x y z.((Alina(x) & Teenager(y) & Street(z) & SittingAcrossStreet(y,z)) -> CallsPolice(x,y))", "all x y z.((Alina(x) & Teenager(y) & Street(z) & SittingAcrossStreetFrom(x,y,z)) -> CallsPolice(x,y,z))", "all x y.((Alina(x) & Teenager(y)) -> (CallsPolice(x,y) & SittingAcrossStreet(y) & Suspicious(y)))", "all x y z.((Alina(x) & Teenager(y) & House(z) & SittingAcrossStreet(x,y,z)) -> CallsPolice(x,y,z))", "all x y z.((Alina(x) & Teenager(y) & Street(z) & SittingAcrossStreet(x,y,z)) -> CallsPolice(x,y,z))", "all x y z.((Alina(x) & Teenager(y) & House(z) & SittingAcrossStreet(y,z)) -> CalledPolice(x,y))"]}
{"id": "enwn_validation_777", "nl": "Seeing someone who you think looks suspicious is not an emergency.", "fol": "", "prediction": ["all x.((Person(x) & LooksSuspicious(x)) -> -Emergency(x))", "all x.((Sees(x,y) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "all x.((Says(x,y) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "all x.((Seen(x) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "all x y.((Person(x) & LooksSuspicious(x)) -> -Emergency(y))", "all x.((SeesPerson(x) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "all x.((Sees(x,y) & ThinksLooksSuspicious(y)) -> -Emergency(x))", "all x.((Says(x) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "all x.((People(x) & LooksSuspicious(x)) -> -Emergency(x))", "all x.((Seen(x) & LooksSuspicious(x)) -> -Emergency(x))", "all x.((Person(x) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "all x.((Seeing(x) & ThinksLooksSuspicious(x)) -> -Emergency(x))", "all x.((SeeingPerson(x) & LooksSuspicious(x)) -> -Emergency(x))", "all x.((Seeing(x) & LooksSuspicious(x)) -> -Emergency(x))", "all x.((Sees(x,y) & ThinksLooksSuspicious(x)) -> -Emergency(y))", "all x y.((Sees(x,y) & ThinksLooksSuspicious(x)) -> -Emergency(y))"]}
{"id": "enwn_validation_778", "nl": "You should only call the police in an emergency.", "fol": "", "prediction": ["all x y.((Police(x) & Emergency(y)) -> Call(x,y))", "all x.((Police(x) & Emergency(x)) -> Call(x,police))", "all x y.((Police(x) & Emergency(y)) -> Calls(x,y))", "all x.((Police(x) & Emergency(x)) -> Calls(x,police))", "all x y.((Police(x) & Emergency(y)) -> CallIn(x,y))", "all x.((Police(x) & Emergency(x)) -> Call(x,Police))", "all x y.((Police(x) & Emergency(y)) -> OnlyCall(x,y))", "all x y.((Police(x) & Emergency(y)) -> CallsIn(x,y))", "all x.((Police(x) & Emergency(x)) -> Calls(x,Police))", "all x.((Police(x) & Emergency(x)) -> CallIn(x,y))", "all x.(Emergency(x) -> CallPolice(x))", "all x.((Police(x) & Emergency(x)) -> Calls(x,y))", "all x.((CallPolice(x) & Emergency(x)) -> CallPolice(x))", "all x.((Police(x) & Emergency(x)) -> Call(x,y))", "all x.((Police(x) & Emergency(x)) -> ShouldCall(x,police))", "all x.((Police(x) & Emergency(x)) -> Call(x))"]}
{"id": "enwn_validation_779", "nl": "Alina was not in an emergency when she called the police.", "fol": "", "prediction": ["all x.((Alina(x) & CallsPolice(x)) -> -Emergency(x))", "all x y.((Alina(x) & Police(y)) -> -Emergency(x,y))", "all x.((Alina(x) & CallsPolice(x)) -> -InEmergency(x))", "all x.((Alina(x) & Police(x)) -> -Emergency(x))", "all x y.((Alina(x) & Police(y)) -> -InEmergency(x,y))", "all x.((Alina(x) & CalledPolice(x)) -> -Emergency(x))", "all x.((Alina(x) & Police(y)) -> -Emergency(x,y))", "all x y.((Alina(x) & Police(y) & Called(x,y)) -> -Emergency(x))", "all x.((Alina(x) & Police(x)) -> -InEmergency(x))", "all x y.((Alina(x) & Police(y) & Called(x,y)) -> -Emergency(x))", "all x.((Alina(x) & PoliceCall(x)) -> -Emergency(x))", "all x.((Alina(x) & Police(y)) -> -InEmergency(x,y))", "all x.((Alina(x) & CalledPolice(x)) -> -Emergency(x))", "all x.((Alina(x) & CalledPolice(x)) -> -InEmergency(x))", "all x y.((Alina(x) & Police(y)) -> -Emergency(x))", "all x y.((Alina(x) & Police(y) & Called(x,y)) -> -InEmergency(x))"]}
{"id": "enwn_validation_780", "nl": "Alina shouldn't have called the police.", "fol": "", "prediction": ["all x.((Alina(x) & -CallsPolice(x)) -> -CallsPolice(x))", "all x.((Alina(x) & -CallPolice(x)) -> -CallPolice(x))", "all x.((Alina(x) & -CalledPolice(x)) -> -CallsPolice(x))", "all x.((Alina(x) & -CallsPolice(x)) -> -HasCallsPolice(x))", "Alina shouldn't have called police.", "all x y.((Alina(x) & Police(y)) -> -Calls(x,y))", "all x.((Alina(x) & -CalledPolice(x)) -> -CalledPolice(x))", "all x.((Alina(x) & -CallsPolice(x)) -> -CalledPolice(x))", "all x.((Alina(x) & -CallsPolice(x)) -> -NeedsPolice(x))", "all x.(Alina(x) -> -CallsPolice(x))", "all x.((Alina(x) & -CallsPolice(x)) -> -HasCalledPolice(x))", "all x.((Alina(x) & -CallsPolice(x)) -> -NeedsToCallPolice(x))", "all x.((Alina(x) & -CalledPolice(x)) -> -CalledPolice(x))", "all x.((Alina(x) & Police(y)) -> -Calls(x,y))", "all x.((Alina(x) & -CalledPolice(x)) -> -CallsPolice(x))", "all x y.((Alina(x) & Police(y)) -> -Called(x,y))"]}
{"id": "enwn_validation_781", "nl": "You should generally follow the law.", "fol": "", "prediction": ["all x.((Client(x) & FollowsLaw(x)) -> FollowsLaw(x))", "all x.((Member(x) & Law(x)) -> Follows(x,y))", "all x.(FollowLaw(x) -> ShouldFollowLaw(x))", "all x.(FollowsLaw(x) -> FollowsLaw(x))", "all x.((FollowLaw(x) & Generally(x)) -> FollowLaw(x))", "all x.((FollowLaw(x) & Generally(x)) -> FollowsLaw(x))", "all x.(Legal(x) -> Follow(x))", "all x.((Member(x) & Law(x)) -> Follow(x,y))", "all x.(Legal(x) -> Follows(x))", "all x.((FollowLaw(x) & Generally(x)) -> ShouldFollowLaw(x))", "all x.(FollowLaw(x) -> FollowLaw(x))", "all x.(FollowLaw(x) -> Generally(x))", "all x.((UseLaw(x)) -> FollowsLaw(x))", "all x.(FollowLaw(x) -> FollowsLaw(x))", "all x.((Law(x) & Follows(x)) -> Follows(x))", "all x.(Law(x) -> Follow(x))"]}
{"id": "enwn_validation_782", "nl": "Darrel bought a 48-rack of beer for his highschool nephew's friend.", "fol": "", "prediction": ["all x y.((Darrel(x) & HighSchoolNephew(y)) -> BuysBeer(x,y))", "all x y.((Darrel(x) & HighschoolNephew(y)) -> BuysBeer(x,y))", "all x y.((Darrel(x) & Nephew(y)) -> BuysBeer(x,y))", "all x y.((Darrel(x) & HighSchoolNephew(y)) -> PurchasedBeer(x,y))", "all x y.((Darrel(x) & HighSchoolNephew(y)) -> Buys48RackOfBeer(x,y))", "all x y.((Darrel(x) & HighSchoolNephewFriend(y)) -> BuysBeer(x,y))", "all x y.((Darrel(x) & HighschoolNephew(y)) -> PurchasedBeer(x,y))", "all x y.((Darrel(x) & HighSchoolNephew(y)) -> (BuysBeer(x,y) & BuysBeer(x,y)))", "all x y.((Darrel(x) & HighschoolNephew(y)) -> (BuysBeer(x,y) & BuysBeer(x,y)))", "all x y.((Darrel(x) & HighSchoolNephew(y)) -> BuysBeerForFriend(x,y))", "all x y.((Darrel(x) & HighschoolNephewFriend(y)) -> BuysBeer(x,y))", "all x.((Darrel(x) & HighSchoolNephewFriend(x)) -> BuysBeer(x,48))", "all x y.((Darrel(x) & Nephew(y)) -> (BuysBeer(x,y) & BuysBeer(x,y)))", "all x y.((Darrel(x) & HighSchoolNephewFriend(y)) -> PurchasedBeer(x,y))", "all x y.((Darrel(x) & Neighbor(y)) -> BuysBeer(x,y))", "all x y z.((Darrel(x) & Brewery(y) & Nephew(z)) -> Buys(x,y,z))"]}
{"id": "enwn_validation_783", "nl": "People in highschool mostly have highschool-aged friends.", "fol": "", "prediction": ["all x.(Highschool(x) -> HasHighschoolAgeFriends(x))", "all x.((Person(x) & Highschool(x)) -> HasHighschoolAgeFriends(x))", "all x.(HighSchool(x) -> HasHighschoolAgeFriends(x))", "all x y.((Person(x) & Highschool(y)) -> HasHighschoolAgeFriends(x,y))", "all x.(Highschool(x) -> HasHighschoolAgedFriends(x))", "all x.((Person(x) & HighSchool(x)) -> HasHighschoolAgeFriends(x))", "all x.(HighschoolPerson(x) -> HasHighschoolAgeFriends(x))", "all x.((Person(x) & Highschool(x)) -> HasHighschoolAgedFriends(x))", "all x.(Highschool(x) -> HasHighSchoolAgeFriends(x))", "all x y.((Person(x) & HighSchool(y)) -> HasHighschoolAgeFriends(x,y))", "all x.((Person(x) & Highschool(x)) -> HasHighSchoolAgeFriends(x))", "all x y.((Person(x) & Highschool(y)) -> HasHighschoolAgedFriends(x,y))", "all x y.((Person(x) & Highschool(y)) -> HasHighSchoolAgeFriends(x,y))", "all x.(HighSchool(x) -> HasHighSchoolAgeFriends(x))", "all x.(HighSchoolPerson(x) -> HasHighschoolAgeFriends(x))", "all x.(Highschool(x) -> (HasHighschoolAgeFriends(x) | HasHighschoolAgeFriends(x)))"]}
{"id": "enwn_validation_784", "nl": "Supplying minors with alcohol is illegal.", "fol": "", "prediction": ["all x.((Minor(x) & SupplyingAlcohol(x)) -> Illegal(x))", "all x.((Minor(x) & SupplyWithAlcohol(x)) -> Illegal(x))", "all x.((Minor(x) & DrinksAlcohol(x)) -> Illegal(x))", "all x.(SupplyMinorsWithAlcohol(x) -> Illegal(x))", "all x.((Minor(x) & SupplyAlcohol(x)) -> Illegal(x))", "all x.((Minor(x) & SuppliesAlcohol(x)) -> Illegal(x))", "all x y.((Minor(x) & Minor(y)) -> SupplyingAlcohol(x,y))", "all x.((Minor(x) & SupplyedWithAlcohol(x)) -> Illegal(x))", "all x.((Minor(x) & ConsumesAlcohol(x)) -> Illegal(x))", "all x y.((Minor(x) & Alcohol(y)) -> Illegal(x,y))", "all x y.((Minor(x) & Minor(y)) -> SupplyingWithAlcohol(x,y))", "all x y.((Minor(x) & Alcohol(y)) -> Illegal(x))", "all x y.((Minor(x) & Alcohol(y)) -> IllegalSupply(x,y))", "all x.((Minor(x) & Supply(x,alcohol)) -> Illegal(x))", "all x.((Minor(x) & Alcohol(x)) -> Illegal(x))", "all x.((Minor(x) & Alcohol(y)) -> Illegal(x))"]}
{"id": "enwn_validation_785", "nl": "Darrel's nephew's friend was probably a minor.", "fol": "", "prediction": ["all x.((Nephew(x) & Neighbor(x)) -> Minor(x))", "all x.((Nephew(x) & NephewFriend(x)) -> Minor(x))", "all x.((Nephew(x) & Neighbor(x) & NeighborFriend(x)) -> Minor(x))", "all x.((Nephew(x) & Neighbor(x) & Neighbor(x)) -> Minor(x))", "all x.((Nephew(x) & NeighborFriend(x)) -> Minor(x))", "all x.((NephewFriend(x) & DarrelsNephew(x)) -> Minor(x))", "all x.((Derel'sNephewFriend(x) & Neighbor(x)) -> Minor(x))", "all x.((Neighbor(x) & Neighbor(x) & Neighbor(x)) -> Minor(x))", "all x.((Nephew(x) & NeighborFriend(x) & Darrel(x)) -> Minor(x))", "all x.((Neighbor(x) & Neighbor(x)) -> Minor(x))", "all x.((DerelsNephewFriend(x) & Neighbor(x)) -> Minor(x))", "all x y.((Nephew(x) & Neighbor(y) & Neighbor(x,y)) -> Minor(x))", "all x y.((Nephew(x) & Neighbor(y) & NeighborFriend(x,y)) -> Minor(x))", "all x.((Nephew(x) & Nephew(x)) -> Minor(x))", "all x.((Nephew(x) & Neighbor(x) & NeighborFriend(x)) -> ProbablyMinor(x))", "all x.((Neighbor(x) & NeighborFriend(x)) -> Minor(x))"]}
{"id": "enwn_validation_786", "nl": "Darrel was probably buying the beer for a minor.", "fol": "", "prediction": ["all x y.((Darrel(x) & Beer(y)) -> BuysForMinor(x,y))", "all x y.((Darrel(x) & Beer(y)) -> PurchasedForMinor(x,y))", "all x y z.((Darrel(x) & Beer(y) & Minor(z)) -> PurchasedFor(x,y,z))", "all x y z.((Darrel(x) & Beer(y) & Minor(z)) -> BuysFor(x,y,z))", "all x y.((Darrel(x) & Beer(y)) -> (BuysForMinor(x,y) | BuysForMinor(x,y)))", "all x y.((Darrel(x) & Brew(y)) -> BuysForMinor(x,y))", "all x y.((Darrel(x) & Brew(y)) -> PurchasedForMinor(x,y))", "all x y.((Darrel(x) & Beer(y)) -> ProbablyBuyingForMinor(x,y))", "all x y.((Darrel(x) & Beer(y)) -> (BuysForMinor(x,y) & BuysForMinor(x,y)))", "all x y.((Darrel(x) & Beer(y)) -> (BuysForMinor(x,y)))", "all x y z.((Darrel(x) & Beer(y) & Minor(z)) -> (BuysFor(x,y,z) | BuysFor(x,y,z)))", "all x y z.((Darrel(x) & Beer(y) & Minor(z)) -> (BuysFor(x,y,z) & BuysFor(x,y,z)))", "all x y.((Darrel(x) & Minor(y)) -> BuysBeerFor(x,y))", "all x y z.((Darrel(x) & Beer(y) & Minor(z)) -> Buys(x,y,z))", "all x.(Darrel(x) -> (BuysBeer(x) & ForMinor(x)))", "all x y.((Darrel(x) & Minor(y)) -> PurchasedBeerFor(x,y))"]}
{"id": "enwn_validation_787", "nl": "It was probably illegal for Darrel to buy the beer.", "fol": "", "prediction": ["all x.((Darrel(x) & BuyBeer(x)) -> Illegal(x))", "all x y.((Darrel(x) & Beer(y)) -> IllegalToBuy(x,y))", "all x y.((Darrel(x) & Beer(y)) -> Illegal(x,y))", "all x.((Darrel(x) & Beer(y)) -> IllegalToBuy(x,y))", "all x.((Darrel(x) & Beer(y)) -> Illegal(x,y))", "all x.((Darrel(x) & Brewery(y)) -> Illegal(x,y))", "all x.((Darrel(x) & BuyBerry(x)) -> Illegal(x))", "all x y.((Darrel(x) & Beer(y)) -> ProbablyIllegalToBuy(x,y))", "all x.((Darrel(x) & Beer(y)) -> Illegal(x))", "all x.((Darrel(x) & BuyBier(x)) -> Illegal(x))", "all x y.((Darrel(x) & Beer(y)) -> ProbablyIllegal(x,y))", "all x.((Darrel(x) & Brewery(y)) -> Illegal(x))", "All x.((Darrel(x) & BuyBeer(x)) -> Illegal(x))", "all x.((Darrel(x) & Brew(y)) -> Illegal(x,y))", "all x y.((Darrel(x) & Beer(y)) -> Illegal(x))", "all x.((Darrel(x) & Brew(y)) -> Illegal(x))"]}
{"id": "enwn_validation_788", "nl": "Darrel shouldn't have bought the beer.", "fol": "", "prediction": ["Darrel shouldn't have bought the beer.", "all x.((Darrel(x) & Beer(y)) -> -Buyed(x,y))", "all x.((Darrel(x) & -BuyedBeer(x)) -> -BuyedBeer(x))", "all x y.((Darrel(x) & Beer(y)) -> -Buyed(x,y))", "all x.((Darrel(x) & -BuyedBier(x)) -> -BuyedBier(x))", "all x.((Darrel(x) & Brewery(y)) -> -Buyed(x,y))", "all x.((Darrel(x) & Brew(y)) -> -Buyed(x,y))", "all x.(Darrel(x) -> -BuyedBeer(x))", "all x.((Darrel(x) & -BuyedBerry(x)) -> -BuyedBerry(x))", "all x.((Darrel(x) & -BuyedBeer(x)) -> -BuyedBerry(x))", "all x.((Darrel(x) & -Buyed(x,Beer)) -> -Buyed(x,Beer))", "all x.((Darrel(x) & -BuyedBeverage(x)) -> -BuyedBeverage(x))", "all x.((Darrel(x) & -BuyedBeer(x)) -> -BuyedBier(x))", "all x.((Darrel(x) & -BuyedBeer(x)) -> -BuysBeer(x))", "all x.((Darrel(x) & Beer(y)) -> -Bought(x,y))", "all x.((Darrel(x) & Beer(y)) -> -HasBuyed(x,y))"]}
{"id": "enwn_validation_789", "nl": "It's rude to interrupt people.", "fol": "", "prediction": ["all x.((InterruptsPeople(x) & Rusty(x)) -> InterruptsPeople(x))", "all x y.((Interrupt(x) & Person(y)) -> Rust(x))", "all x.((Interrupt(x) & People(x)) -> Rust(x))", "all x.((Interrupts(x) & People(x)) -> Rust(x))", "all x.((Interrupt(x) & People(x)) -> Rusty(x))", "all x y.((Interrupts(x) & Person(y)) -> Rust(x))", "all x y.((Interrupt(x) & Person(y)) -> Rust(x,y))", "all x.((Interrupts(x) & People(x)) -> Rusty(x))", "all x.((InterruptPeople(x) & Rusty(x)) -> InterruptsPeople(x))", "all x.(RuleInterruptsPeople(x) -> InterruptsPeople(x))", "all x.((InterruptsPeople(x) & Rusty(x)) -> Reckless(x))", "all x.(Rule(x) -> InterruptPeople(x))", "all x y.((Interrupt(x) & People(y)) -> Rust(x))", "all x y.((Interrupt(x) & Person(y)) -> Rustic(x))", "all x.((Interrupt(x) & People(x)) -> Rustic(x))", "all x y.((Interrupt(x) & Person(y)) -> Rusty(x))"]}
{"id": "enwn_validation_790", "nl": "Miguel interrupted the song that Alice was listening to on the wireless speaker to play his song.", "fol": "", "prediction": ["all x y z.((Michael(x) & Alice(y) & WirelessSpeaker(z)) -> InterruptsSong(x,y,z))", "all x y z.((Michael(x) & Song(y) & WirelessSpeaker(z)) -> Interrupts(x,y,z))", "all x y z.((Michael(x) & Alice(y) & WirelessSpeaker(z)) -> InterruptsSongToPlay(x,y,z))", "all x y.((Michael(x) & Alice(y)) -> InterruptsSongOnWirelessSpeaker(x,y))", "all x y z.((Michael(x) & Alice(y) & WirelessSpeaker(z)) -> (InterruptsSong(x,y,z) & PlaysSong(x,y)))", "all x y z.((Michael(x) & Alice(y) & WirelessSpeaker(z)) -> (InterruptsSong(x,y) & PlaysSong(x,z)))", "all x y z.((Miguel(x) & Song(y) & WirelessSpeaker(z)) -> Interrupts(x,y,z))", "all x y z.((Michael(x) & Song(y) & WirelessSpeaker(z) & Alice(y)) -> Interrupts(x,y,z))", "all x y.((Miguel(x) & Alice(y)) -> InterruptsSongOnWirelessSpeaker(x,y))", "all x y z.((Michael(x) & Song(y) & WirelessSpeaker(z)) -> InterruptedOn(x,y,z))", "all x y z.((Michael(x) & Song(y) & WirelessSpeaker(z) & Alice(y)) -> InterruptsToPlay(x,y,z))", "all x y.((Michael(x) & Alice(y)) -> InterruptsSong(x,y))", "all x y z.((Michael(x) & Song(y) & WirelessSpeaker(z)) -> Interrupted(x,y,z))", "all x y z.((Michael(x) & Song(y) & WirelessSpeaker(z)) -> InterruptsToPlay(x,y,z))", "all x y z.((Michael(x) & Alice(y) & WirelessSpeaker(z)) -> InterruptedSong(x,y,z))", "all x y z.((Miguel(x) & Song(y) & WirelessSpeaker(z) & Alice(y)) -> Interrupts(x,y,z))"]}
{"id": "enwn_validation_791", "nl": "You shouldn't interrupt people.", "fol": "", "prediction": ["all x.((Person(x) & -Interrupt(x)) -> -Interrupt(x))", "all x.((Interrupt(x) & People(x)) -> -Interrupt(x))", "all x.((Interrupt(x) & People(y)) -> -Interrupt(x,y))", "all x.((Interrupt(x) & Person(y)) -> -Interrupt(x,y))", "all x.((Person(x) & -Interrupts(x)) -> -Interrupts(x))", "all x.((InterruptsPeople(x)) -> -(InterruptsPeople(x) | InterruptsPeople(x))))", "all x y.((Interrupt(x) & Person(y)) -> -Interrupt(x,y))", "all x.(InterruptPeople(x) -> -InterruptPeople(x))", "all x.((InterruptsPeople(x)) -> -InterruptsPeople(x))", "all x.((InterruptPeople(x) & -InterruptPeople(x)) -> -InterruptPeople(x))", "all x y.((Person(x) & Interrupt(y)) -> -Interrupt(x,y))", "all x.((InterruptPeople(x)) -> -InterruptPeople(x))", "all x.((People(x) & -Interrupt(x)) -> -Interrupt(x))", "all x.((Interrupt(x) & Person(x)) -> -Interrupt(x))", "all x.(InterruptsPeople(x) -> -InterruptsPeople(x))", "all x.(Interrupt(x) -> -Interrupt(x))"]}
{"id": "enwn_validation_792", "nl": "Miguel shouldn't have interrupted Alice's song.", "fol": "", "prediction": ["all x.((Miguel(x) & -InterruptedAlicesSong(x)) -> -InterruptedAlicesSong(x))", "all x y.((Michael(x) & Alice(y)) -> -InterruptedSong(x,y))", "all x.((Michael(x) & Alice(y)) -> -InterruptedSong(x,y))", "all x y.((Miguel(x) & Alice(y)) -> -InterruptedSong(x,y))", "all x.((Michael(x) & AliceSong(x)) -> -Interrupted(x,Alice))", "all x.((Miguel(x) & Alice(y)) -> -InterruptedSong(x,y))", "all x.((Michael(x) & AliceSong(y)) -> -Interrupted(x,y))", "all x.((Muriel(x) & -InterruptedAlicesSong(x)) -> -InterruptedAlicesSong(x))", "all x.((Miguel(x) & AliceSong(x)) -> -Interrupted(x,Alice))", "all x.((Miguel(x) & AliceSong(y)) -> -Interrupted(x,y))", "all x.((Michael(x) & -InterruptedAlicesSong(x)) -> -InterruptedAlicesSong(x))", "all x.((Michael(x) & AlicesSong(x)) -> -Interrupted(x,Alice))", "all x.((Miguel(x) & AlicesSong(x)) -> -Interrupted(x,Alice))", "all x.(Michael(x) -> -InterruptedAlicesSong(x))", "all x.((Michael(x) & Alice(x)) -> -InterruptedSong(x,Alice))", "all x.(Miguel(x) -> -InterruptedAlicesSong(x))"]}
{"id": "enwn_validation_793", "nl": "Foods that contain a lot of sugar are unhealthy.", "fol": "", "prediction": ["all x.((Food(x) & ContainsLotsOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLotOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & LotsOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLittleSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLotSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLossOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsMoreSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsMuchSugar(x)) -> Unhealthy(x))", "all x y.((Food(x) & ContainsLotsOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLootOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsManySugar(x)) -> Unhealthy(x))", "all x y.((Food(x) & ContainsLotOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsAmountOfSugar(x)) -> Unhealthy(x))", "all x.((Food(x) & ContainsLot(x,Sugar)) -> Unhealthy(x))", "all x y.((Food(x) & ContainsLotsOfSugar(x)) -> Unhealthy(y))"]}
{"id": "enwn_validation_794", "nl": "Monica refused to get her son Froot Loops because she thought they were too sugary.", "fol": "", "prediction": ["all x.((Monica(x) & SonFrootLoops(x)) -> -TooSugary(x))", "all x y.((Monica(x) & SonFrootLoops(y)) -> -TooSugary(x,y))", "all x y.((Monica(x) & Son(y)) -> (RefusedToGetFrootLoops(x,y) & -TooSugary(y)))", "all x y z.((Monica(x) & Son(y) & FrootLoops(z)) -> (RefusedToGet(x,y,z) & TooSugary(y,z)))", "all x.((Monica(x) & SonFrootLoops(x) & TooSugary(x)) -> RefusedToGet(x,y))", "all x y.((Monica(x) & SonFrootLoops(y)) -> (RefusedToGet(x,y) & -TooSugary(x)))", "all x y.((Monica(x) & SonFrootLoops(y)) -> (RefusedToGet(x,y) & -TooSugary(y)))", "all x y z.((Monica(x) & Son(y) & FrootLoops(z)) -> (RefusedToGet(x,y,z) & TooSugary(y)))", "all x y.((Monica(x) & Son(y)) -> (RefusedToGetFrootLoops(x,y) & ThoughtSugary(y)))", "all x y.((Monica(x) & Son(y) & -TooSugary(y)) -> RefusedToGive(x,y))", "all x y z.((Monica(x) & Son(y) & Son(z)) -> (RefusedToGet(x,y,z) & TooSugary(y,z)))", "all x y z.((Monica(x) & Son(y) & FrootLoops(z)) -> (RefusedToGet(x,y,z) & TooSugary(x)))", "all x y.((Monica(x) & Son(y)) -> (RefusedToGetFrootLoops(x,y) & ThinksSugary(y)))", "all x y z.((Monica(x) & Son(y) & Son(z)) -> (RefusedToGet(x,y,z) & Sugary(y)))", "all x y.((Monica(x) & SonFrootLoops(y)) -> (RefusedToGet(x,y) & -Sugary(y)))", "all x y.((Monica(x) & Son(y)) -> (RefusedToGetFrootLoops(x,y) & -TooSugary(x)))"]}
{"id": "enwn_validation_795", "nl": "It's okay to refuse to do something if you have a good reason.", "fol": "", "prediction": ["all x.((Refusal(x) & GoodRaison(x)) -> OK(x))", "all x.((Refusal(x) & GoodRight(x)) -> OK(x))", "all x.((Refusal(x) & GoodRaison(x)) -> Okay(x))", "all x.((Refusal(x) & GoodRight(x)) -> Okay(x))", "all x.((RefusesToDo(x) & GoodRight(x)) -> Okay(x))", "all x.((RefusesToDo(x) & GoodRaison(x)) -> Okay(x))", "all x.((Refusal(x) & GoodRight(x)) -> Acceptable(x))", "all x.((Refusal(x) & GoodRaison(x)) -> Acceptable(x))", "all x.((RefusingToDo(x) & GoodRight(x)) -> Okay(x))", "all x.((RefusingToDo(x) & GoodRight(x)) -> OK(x))", "all x.((RefusingToDo(x) & GoodRaison(x)) -> Okay(x))", "all x.((RefusesDoing(x) & GoodRaison(x)) -> Okay(x))", "all x.((RefusesDoing(x) & GoodRight(x)) -> Okay(x))", "all x.((RefusesToDo(x) & GoodRight(x)) -> OK(x))", "all x.((Refuses(x) & GoodRight(x)) -> Okay(x))", "all x.((RefusingToDo(x) & GoodRaison(x)) -> OK(x))"]}
{"id": "enwn_validation_796", "nl": "It's a good idea to prevent your children from eating unhealthy food.", "fol": "", "prediction": ["all x.((Child(x) & -UnhealthyFood(x)) -> GoodIdea(x))", "all x.((Child(x) & UnhealthyFood(x)) -> GoodIdea(x))", "all x.((Child(x) & HealthyFood(x)) -> GoodIdea(x))", "all x.((Child(x) & PreventsUnhealthyFood(x)) -> GoodIdea(x))", "all x.((Child(x) & -UnhealthyFood(x)) -> GoodIdeaToPrevent(x,y))", "all x y.((Child(x) & Child(y)) -> PreventsUnhealthyFood(x,y))", "all x.((Child(x) & -EatsUnhealthyFood(x)) -> GoodIdea(x))", "all x.((Child(x) & GoodIdea(x)) -> PreventsUnhealthyFood(x))", "all x y.((Child(x) & Child(y) & EatsUnhealthyFood(x,y)) -> GoodIdea(x))", "all x y.((Child(x) & Child(y) & EatsUnhealthyFood(x,y)) -> GoodIdea(x,y))", "all x.((ProtectsChildrenFromUnhealthyFood(x)) -> GoodIdea(x))", "all x.((Child(x) & HealthyFood(x)) -> GoodIdeaToPrevent(x,y))", "all x.((Child(x) & EatsUnhealthyFood(x)) -> GoodIdea(x))", "all x.((Child(x) & -UnhealthyFood(x)) -> GoodIdeal(x))", "all x.((Child(x) & AvoidsUnhealthyFood(x)) -> GoodIdea(x))", "all x.((GoodIdea(x) & PreventsUnhealthyFood(x)) -> GoodIdea(x))"]}
{"id": "enwn_validation_797", "nl": "Monica refused to get her son Froot Loops because she thought they were unhealthy.", "fol": "", "prediction": ["all x.((Monica(x) & SonFrootLoops(x)) -> Unhealthy(x))", "all x y.((Monica(x) & Son(y) & Unhealthy(y)) -> RefusedToGetFrootLoops(x,y))", "all x y z.((Monica(x) & Son(y) & Son(z)) -> (RefusedToGet(x,y,z) & Unhealthy(y,z)))", "all x y.((Monica(x) & Son(y)) -> (RefusedToGetFrootLoops(x,y) & Unhealthy(y)))", "all x.((Monica(x) & SonFrootLoops(x)) -> -Unhealthy(x))", "all x y.((Monica(x) & SonFrootLoops(y)) -> (RefusedToGet(x,y) & Unhealthy(y)))", "all x y.((Monica(x) & Son(y) & -Unhealthy(y)) -> RefusedToGetFrootLoops(x,y))", "all x y z.((Monica(x) & Son(y) & Son(z)) -> (RefusedToGive(x,y,z) & Unhealthy(y,z)))", "all x y.((Monica(x) & Son(y)) -> (RefusedToGet(x,y) & Unhealthy(y)))", "all x y z.((Monica(x) & Son(y) & Son(z)) -> (RefusedToGet(x,y,z) & Unhealthy(y)))", "all x y.((Monica(x) & Son(y) & Unhealthy(y)) -> RefusedToGive(x,y))", "all x y.((Monica(x) & Son(y) & Unhealthy(y)) -> RefusedToGet(x,y))", "all x y.((Monica(x) & Son(y)) -> (RefusedToGive(x,y) & Unhealthy(y)))", "all x y.((Monica(x) & SonFrootLoops(y)) -> (RefusedToGive(x,y) & Unhealthy(y)))", "all x.((Monica(x) & SonFrootLoops(x) & Unhealthy(x)) -> RefusedToGet(x,y))", "all x y z.((Monica(x) & Son(y) & Son(z)) -> (RefusedToGive(x,y,z) & Unhealthy(y)))"]}
{"id": "enwn_validation_798", "nl": "It's okay to refuse to give your children unhealthy food.", "fol": "", "prediction": ["all x.((Child(x) & RefusesUnhealthyFood(x)) -> OK(x))", "all x y.((Child(x) & Child(y)) -> RefusesUnhealthyFood(x,y))", "all x.((Child(x) & RefusesUnhealthyFood(x)) -> OKToRefuse(x))", "all x.((Child(x) & RefusesUnhealthyFood(x)) -> Okay(x))", "all x.((Child(x) & -UnhealthyFood(x)) -> OKToRefuse(x,y))", "all x.((Child(x) & RefusesUnhealthyFood(x)) -> OkayToRefuse(x))", "all x.((Child(x) & -GivesUnhealthyFood(x)) -> OKToRefuse(x))", "all x.((Child(x) & -UnhealthyFood(x)) -> OKToRefuse(x))", "all x.((Child(x) & -UnhealthyFood(x)) -> OkayToRefuse(x,y))", "all x.((Child(x) & UnhealthyFood(x)) -> OKToRefuse(x,y))", "all x.((Child(x) & -GiveUnhealthyFood(x)) -> OKToRefuse(x))", "all x.((Child(x) & RefusesUnhealthyFood(x)) -> OKToRefuse(x,y))", "all x.((Child(x) & RefusesUnhealthyFood(x)) -> OkayToRefuse(x,y))", "all x.((Child(x) & -GivesUnhealthyFood(x)) -> OkayToRefuse(x))", "all x.((Child(x) & -GivesUnhealthyFood(x)) -> OKToRefuse(x,y))", "all x.((Child(x) & -UnhealthyFood(x)) -> OkayToRefuse(x))"]}
{"id": "enwn_validation_799", "nl": "It was okay for Monica to refuse to get her son Froot Loops.", "fol": "", "prediction": ["all x.((Monica(x) & RefusedToGetFrootLoops(x)) -> Okay(x))", "all x.((Monica(x) & RefusedToGetFrootLoops(x)) -> OK(x))", "all x y.((Monica(x) & Son(y)) -> RefusedToGetFrootLoops(x,y))", "all x y.((Monica(x) & Son(y) & RefusedToGetFrootLoops(x,y)) -> Okay(x))", "all x.((Monica(x) & RefusedToGetSonFrootLoops(x)) -> Okay(x))", "all x y.((Monica(x) & Son(y) & RefusedToGetFrootLoops(x,y)) -> Okay(x,y))", "all x y.((Monica(x) & SonFrootLoops(y)) -> RefusedToGet(x,y))", "all x.((Monica(x) & RefusedToGetSon(x,FrootLoops)) -> Okay(x))", "all x.((Monica(x) & RefusedToGetSonFrootLoops(x)) -> OK(x))", "all x y.((Monica(x) & Son(y) & RefusedToGetFrootLoops(x,y)) -> OK(x))", "all x y.((Monica(x) & Son(y) & RefusedToGetFrootLoops(x,y)) -> OK(x,y))", "all x.((Monica(x) & RefusedToGiveSon(x,FrootLoops)) -> Okay(x))", "all x y z.((Monica(x) & Son(y) & Son(z)) -> RefusedToGetFrootLoops(x,y,z))", "all x.((Monica(x) & RefusedToGetSon(x,FrootLoops)) -> OK(x))", "all x.((Monica(x) & RefusedToGiveSonFrootLoops(x)) -> Okay(x))", "all x y z.((Monica(x) & Son(y) & Son(z)) -> RefusedToGet(x,y,z))"]}
{"id": "enwn_validation_800", "nl": "Tax fraud is inadvisable.", "fol": "", "prediction": ["all x.(TaxFraud(x) -> Inadvisable(x))", "all x.((TaxFraud(x) & Inadvisable(x)) -> TaxFraud(x))", "all x.(TaxFraud(x) -> Inadvisable(x))", "all x y.((TaxFraud(x) & Tax(y)) -> Inadvisable(x,y))", "all x y.((TaxFraud(x) & Tax(y)) -> Inadvisable(x))", "all x.(TaxeFraud(x) -> Inadvisable(x))", "all x.(Taxefraud(x) -> Inadvisable(x))", "all x.((TaxFraud(x) & Inadvisable(x)) -> Inadvisable(x))", "all x.(TaxFraud(x) -> Irrecommended(x))", "all x.(TaxFraud(x) -> Irresponsible(x))", "all x.(TaxFraud(x) -> Irrefutable(x))", "all x.(TaxFraud(x) -> Inadequate(x))", "all x.(TaxFraud(x) -> Inadvanced(x))", "all x.(TaxViolence(x) -> Inadvisable(x))", "all x.(TaxFraud(x) -> Idiotable(x))", "all x.(TaxFraud(x) -> inadvisable(x))"]}
{"id": "enwn_validation_801", "nl": "Writing personal purchases off as business expenses is tax fraud.", "fol": "", "prediction": ["all x.((WritesPersonalPurchasesOffAsBusinessExpenses(x)) -> TaxFraud(x))", "all x y.((PersonalPurchase(x) & BusinessExpense(y)) -> TaxFraud(x))", "all x.(WritesPersonalPurchasesOffAsBusinessExpenses(x) -> TaxFraud(x))", "all x.((WritePersonalPurchasesOffAsBusinessExpenses(x)) -> TaxFraud(x))", "all x y.((PersonalPurchase(x) & BusinessExpense(y) & WritesOff(x,y)) -> TaxFraud(x))", "all x.((WritesPersonalPurchases(x) & BusinessExpenses(x)) -> TaxFraud(x))", "all x.((WritingPersonalPurchasesOffAsBusinessExpenses(x)) -> TaxFraud(x))", "all x.((WritesPersonalPurchasesOff(x) & BusinessExpenses(x)) -> TaxFraud(x))", "all x y.((PersonalPurchase(x) & BusinessExpense(y)) -> TaxFraud(x))", "all x.((WritesPersonalCostsOffAsBusinessExpenses(x)) -> TaxFraud(x))", "all x.((WritePersonalPurchase(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x y.((PersonalPurchase(x) & BusinessExpense(y)) -> TaxFraud(x,y))", "all x.((PersonalPurchase(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((WritePersonalPurchases(x) & BusinessExpenses(x)) -> TaxFraud(x))", "all x.((PersonalPurchase(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.(WritePersonalPurchasesOffAsBusinessExpenses(x) -> TaxFraud(x))"]}
{"id": "enwn_validation_802", "nl": "Patrice bought himself a jacuzzi and wrote it off as a business expense.", "fol": "", "prediction": ["all x y z.((Patrice(x) & Jacuzzi(y) & BusinessExpense(z)) -> (Buys(x,y) & WritesOff(x,z)))", "all x y.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOff(x,y)))", "all x y.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOffAsBusinessExpense(x,y)))", "all x y.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOffAsBusinessExpense(x)))", "all x.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOffAsBusinessExpense(x,y)))", "all x.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOff(x,y)))", "all x.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOffAsBusinessExpense(x)))", "all x y.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesAsBusinessExpense(x,y)))", "all x y.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOffBusinessExpense(x,y)))", "all x y z.((Patrice(x) & Jacuzzi(y) & BusinessExpense(z)) -> (Buys(x,y) & WritesOff(x,y,z)))", "all x y.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesAsBusinessExpense(x)))", "all x.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesAsBusinessExpense(x,y)))", "all x.((Patrice(x) & Jacuzzi(x)) -> (Buys(x,y) & WritesOffAsBusinessExpense(x)))", "all x y z.((Patrice(x) & Jacuzzi(y) & BusinessExpense(z)) -> (Buys(x,y,z) & WritesOff(x,y,z)))", "all x.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOffBusinessExpense(x,y)))", "all x.(Patrice(x) -> (BuysJacuzzi(x) & WritesOffAsBusinessExpense(x)))"]}
{"id": "enwn_validation_803", "nl": "Writing the jacuzzi off as a business expense was tax fraud.", "fol": "", "prediction": ["all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x y.((Jacuzzi(x) & BusinessExpense(y)) -> TaxFraud(x))", "all x.((Jacket(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jcuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jackacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x y.((Jacuzzi(x) & BusinessExpense(y)) -> TaxFraud(x,y))", "all x y.((Jacuzzi(x) & BusinessExpense(y) & WrittenOff(x,y)) -> TaxFraud(x))", "all x y.((Jacuzzi(x) & BusinessExpense(y) & WrittenOffAs(x,y)) -> TaxFraud(x))", "all x y.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(y))", "all x.((Jakuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x.((Jackuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))", "all x y.((Jacket(x) & BusinessExpense(y)) -> TaxFraud(x))", "all x y.((Jcuzzi(x) & BusinessExpense(y)) -> TaxFraud(x))", "all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFalse(x))", "all x.(WritesJacuzziOffAsBusinessExpense(x) -> TaxFraud(x))", "all x y.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))"]}
{"id": "enwn_validation_804", "nl": "Patrice should not have written off the jacuzzi.", "fol": "", "prediction": ["all x.((Patrice(x) & Jacuzzi(y)) -> -WrittenOff(x,y))", "all x.((Patrice(x) & Jacuzzi(x)) -> -WrittenOff(x,y))", "all x y.((Patrice(x) & Jacuzzi(y)) -> -WrittenOff(x,y))", "all x.((Patrice(x) & -WrittenOffJacuzzi(x)) -> -WrittenOffJacuzzi(x))", "all x.((Patrice(x) & -WrittenOffJacuzzi(x)) -> -(Jacuzzi(x) & Jacuzzi(x)))", "all x.((Patrice(x) & -WrittenOffJacuzzi(x)) -> -Jacuzzi(x))", "all x.((Patrice(x) & -WrittenOffJacuzzi(x)) -> -HasJacuzzi(x))", "all x.((Patrice(x) & -WrittenOffJacuzzi(x)) -> -(Jacuzzi(x) & Jacuzzi(x))))", "all x.((Patrice(x) & -WrittenOffJacuzzi(x)) -> -(Patrice(x) & WrittenOffJacuzzi(x)))", "all x.((Patrice(x) & Jacuzzi(x)) -> -WrittenOff(x,Jacuzzi))", "all x.((Patrice(x) & -WrittenOffJacuzzi(x)) -> -(Jacuzzi(x) | Jacuzzi(x))))", "all x.((Patrice(x) & -WrittenOffJacuzzi(x)) -> -Patrice(x))", "all x.((Patrice(x) & -WrittenOffJacuzzi(x)) -> -(Patrice(x) & WrittenOffJacuzzi(x))))", "all x.((Patrice(x) & -WrittenOffJacuzzi(x)) -> -(Patrice(x) & -WrittenOffJacuzzi(x)))", "all x.((Patrice(x) & -WrittenOffJacuzzi(x)) -> -(Patrice(x) -> WrittenOffJacuzzi(x)))", "-(WrittenOffJacuzzi(Patrice) & -WrittenOffJacuzzi(Patrice))"]}
{"id": "enwn_validation_805", "nl": "Spiking someone's drink is a very bad thing to do.", "fol": "", "prediction": ["all x.(SpikingDrink(x) -> BadThingToDo(x))", "all x y.((Drink(x) & Spiking(x,y)) -> BadThingToDo(x))", "all x y.((Drink(x) & Spiking(y)) -> BadThingToDo(x,y))", "all x y.((Drink(x) & Spiking(x,y)) -> BadThingToDo(x,y))", "all x.(SpikingDrink(x) -> VeryBadThing(x))", "all x.(Spiking(x) -> BadThingToDo(x))", "all x.((Drink(x) & Spiking(x)) -> BadThingToDo(x))", "all x y.((Drink(x) & Person(y) & Spiking(x,y)) -> BadThingToDo(x,y))", "all x y.((Spiking(x) & Person(y)) -> BadThingToDo(x,y))", "all x y.((Drink(x) & Person(y) & Spiking(x,y)) -> BadThingToDo(x))", "all x y.((Drink(x) & Spiking(x,y)) -> VeryBadThing(x))", "all x.(SpikingDrink(x) -> VeryBadThingToDo(x))", "all x y.((Drink(x) & Spiking(x,y)) -> BadThingToDo(y))", "all x y.((Drink(x) & Spike(y)) -> BadThingToDo(x,y))", "all x y.((Drink(x) & Person(y)) -> Spiking(x,y))", "all x y.((Drink(x) & Spiking(y)) -> BadThingToDo(x))"]}
{"id": "enwn_validation_806", "nl": "If someone does something bad to you, it makes sense to want to avoid them.", "fol": "", "prediction": ["all x.((DoesBadToYou(x) & WantsToAvoid(x)) -> MakesSense(x))", "all x y.((DoesBadToYou(x) & Person(y)) -> MakesSenseToVisit(x,y))", "all x y.((DoesBadToYou(x) & Person(y)) -> MakesSenseToAvoid(x,y))", "all x.(DoesBadToYou(x) -> MakesSenseToAvoid(x))", "all x.((DoesBadToYou(x) & MakesSense(x)) -> WantsToAvoid(x))", "all x.(DoesBadToYou(x) -> MakesSenseToVisit(x))", "all x y.((DoesBadTo(x,y) & Person(y)) -> MakesSenseToAvoid(x,y))", "all x y.((DoesBadTo(x,y) & Person(y)) -> MakesSenseToVisit(x,y))", "all x.((DoesBadToYou(x)) -> MakesSenseToVisit(x))", "all x.((DoesBadToYou(x)) -> MakesSenseToAvoid(x))", "all x.((DoesBadToYou(x) & MakesSense(x)) -> WantToAvoid(x))", "all x.((DoesBadToYou(x) & -DoesBadToYou(x)) -> MakesSenseToAvoid(x))", "all x.(DoesBadTo(x,y) -> MakesSenseToAvoid(x,y))", "all x.((DoesBadToYou(x) & -DoesBadToYou(x)) -> MakesSense(x))", "all x.((DoesBadToYou(x) & -DoesBadToYou(x)) -> MakesSenseToVisit(x))", "all x.((DoesBadToYou(x) & WantsToAvoid(x)) -> MakesSenseToAvoid(x))"]}
{"id": "enwn_validation_807", "nl": "Elena told her friends to cut ties with Pat after he spiked her drink.", "fol": "", "prediction": ["all x y.((Ellen(x) & Pat(y) & SpikedDrink(x,y)) -> CutTies(x,y))", "all x y.((Ellen(x) & Pat(y) & SpikedDrink(x,y)) -> CutTiesWith(x,y))", "all x y.((Friend(x) & Pat(y) & SpikedDrink(x,y)) -> CutTies(x,y))", "all x y.((Friend(x) & Pat(y) & SpikedDrink(x,y)) -> CutTiesWith(x,y))", "all x y.((Ellen(x) & Pat(y) & SpikedDrink(y)) -> CutTies(x,y))", "all x y.((Ellen(x) & Pat(y) & SpikesDrink(x,y)) -> CutTies(x,y))", "all x y.((Ellen(x) & Pat(y) & SpikedDrink(y,x)) -> CutTies(x,y))", "all x y.((Ellen(x) & Pat(y) & SpikedDrink(x,y)) -> CutTie(x,y))", "all x y.((Ellen(x) & Pat(y) & SpikesDrink(x,y)) -> CutTiesWith(x,y))", "all x y.((Ellen(x) & Pat(y) & SpikedDrink(y)) -> CutTiesWith(x,y))", "all x y.((Eleanor(x) & Pat(y) & SpikedDrink(x,y)) -> CutTies(x,y))", "all x y.((Friend(x) & Pat(y) & SpikedDrink(y)) -> CutTiesWith(x,y))", "all x y.((Friend(x) & Pat(y) & SpikedDrink(y)) -> CutTies(x,y))", "all x y.((Friend(x) & Pat(y) & SpikesDrink(x,y)) -> CutTies(x,y))", "all x y.((Friend(x) & Pat(y) & SpikedDrink(y,x)) -> CutTies(x,y))", "all x y z.((Ellen(x) & Pat(y) & Tie(z) & SpikesDrink(x,y,z)) -> CutsTies(x,y,z))"]}
{"id": "enwn_validation_808", "nl": "If you don't want social contact with someone, your friends also need to stop associating with them.", "fol": "", "prediction": ["all x.((Friend(x) & -WantSocialContact(x)) -> StopAssociating(x))", "all x.((Friend(x) & -WantsSocialContact(x)) -> StopsAssociating(x))", "all x.((Friend(x) & -WantsSocialContact(x)) -> StopAssociating(x))", "all x.((Friend(x) & -WantSocialContact(x)) -> StopAssociatingWith(x,y))", "all x.((Friend(x) & -WantsSocialContact(x)) -> StopsAssociatingWith(x,y))", "all x.((Friend(x) & -WantsSocialContact(x)) -> StopAssociatingWith(x,y))", "all x.((Friend(x) & -SocialContact(x)) -> StopAssociating(x))", "all x y.((Friend(x) & Friend(y) & -WantsSocialContact(x,y)) -> StopsAssociating(x,y))", "all x y.((Friend(x) & Friend(y) & -WantSocialContact(x,y)) -> StopAssociating(x,y))", "all x y.((Friend(x) & Friend(y) & -WantsSocialContact(x,y)) -> StopAssociating(x,y))", "all x.((Friend(x) & -WantsSocialContact(x)) -> NeedsToStopAssociating(x))", "all x.((Friend(x) & -WantsSocialContact(x)) -> StopsAssociatingWith(x))", "all x.((Friend(x) & -WantSocialContact(x)) -> StopsAssociating(x))", "all x.((Friend(x) & -WantSocialContact(x)) -> NeedsToStopAssociating(x))", "all x.((Friend(x) & -SocialContact(x)) -> StopAssociatingWith(x,y))", "all x.((Friend(x) & -WantSocialContact(x)) -> StopAssociatingWith(x))"]}
{"id": "enwn_validation_809", "nl": "If someone spikes your drink, it makes sense to want to avoid them.", "fol": "", "prediction": ["all x y.((Person(x) & Drink(y) & Spikes(x,y)) -> MakesSenseToAvoid(x,y))", "all x.(SpidersDrink(x) -> MakesSenseToAvoid(x))", "all x y.((Person(x) & Drink(y) & Spikes(x,y)) -> MakesSenseToVisit(x,y))", "all x.(SpidesDrink(x) -> MakesSenseToAvoid(x))", "all x.((Person(x) & SpikesDrink(x)) -> MakesSenseToAvoid(x))", "all x y.((Person(x) & Drink(y) & Spikes(x,y)) -> WantsToAvoid(x,y))", "all x y.((Person(x) & Drink(y) & Spikes(x,y)) -> Avoids(x,y))", "all x y.((Person(x) & Drink(y) & Spikes(x,y)) -> MakesSense(x))", "all x y.((Person(x) & Drink(y) & Spikes(x,y)) -> MakesSenseAvoiding(x,y))", "all x.(SpidersDrink(x) -> MakesSenseToVisit(x))", "all x y.((Spiders(x) & Drink(y)) -> MakesSenseToAvoid(x,y))", "all x.((Person(x) & SpikesDrink(x)) -> MakesSenseToVisit(x))", "all x y.((Spider(x) & Drink(y)) -> MakesSenseToAvoid(x,y))", "all x.((Person(x) & SpikesDrink(x)) -> MakesSenseToAvoid(x,y))", "all x y.((Person(x) & Drink(y) & Spikes(x,y)) -> MakesSense(x,y))", "all x y.((Person(x) & Drink(y) & Spikes(x,y)) -> MakesSenseToVorse(x,y))"]}
{"id": "enwn_validation_810", "nl": "Elena was justified in wanting to avoid Pat.", "fol": "", "prediction": ["all x y.((Elena(x) & Pat(y)) -> JustifiedInWantingToAvoid(x,y))", "all x y.((Elena(x) & Pat(y)) -> JustifiedWantToAvoid(x,y))", "all x y.((Elizabeth(x) & Pat(y)) -> JustifiedInWantingToAvoid(x,y))", "all x y.((Ellen(x) & Pat(y)) -> JustifiedInWantingToAvoid(x,y))", "all x y.((Ellen(x) & Pat(y)) -> JustifiedWantToAvoid(x,y))", "all x.((Elena(x) & Pat(y)) -> JustifiedWantToAvoid(x,y))", "all x y.((Elena(x) & Pat(y)) -> JustifiedInWaitingToAvoid(x,y))", "all x y.((Eleanor(x) & Pat(y)) -> JustifiedInWantingToAvoid(x,y))", "all x y.((Elizabeth(x) & Pat(y)) -> JustifiedWantToAvoid(x,y))", "all x y.((Elizabeth(x) & Pat(y)) -> JustifiedInWaitingToAvoid(x,y))", "all x y.((Elena(x) & Pat(y)) -> JustifiedInVotingToAvoid(x,y))", "all x y.((Elena(x) & Pat(y)) -> Justified(x,y))", "all x.((Elena(x) & Pat(Pat)) -> Justified(x))", "all x.((Elena(x) & Pat(x)) -> Justified(x))", "all x y.((Elena(x) & Pat(y)) -> JustifiedInWantToAvoid(x,y))", "all x.((Elena(x) & Pat(x)) -> JustifiedWantToAvoid(x,y))"]}
{"id": "enwn_validation_811", "nl": "If Elena didn't want social contact with Pat, her friends would also need to stop associating with him.", "fol": "", "prediction": ["all x.((Ellen(x) & -WantSocialContact(x,Pat)) -> NeedsToStopAssociating(x,Pat))", "all x.((Ellen(x) & -WantSocialContact(x,Pat)) -> -WantSocialContact(x,Pat))", "all x.((Friend(x) & -WantsSocialContact(x,Pat)) -> StopsAssociating(x,Pat))", "all x.((Ellen(x) & -WantSocialContact(x,Pat)) -> FriendsWantToStopAssociating(x,Pat))", "all x.((Ellen(x) & -WantsSocialContact(x,Pat)) -> -WantsSocialContact(x,Pat))", "all x.((Ellen(x) & -WantSocialContact(x,Pat)) -> FriendsStopAssociating(x,Pat))", "all x.((Friend(x) & -WantSocialContact(x,Pat)) -> StopAssociating(x,Pat))", "all x y.((Friend(x) & -WantSocialContact(x,y) & Pat(y)) -> StopAssociating(x,y))", "all x.((Ellen(x) & -WantsSocialContact(x,Pat)) -> FriendsStopAssociating(x,Pat))", "all x y.(((Ellen(x) & Pat(y)) -> -WantsSocialContact(x,y))", "all x y.((Ellen(x) & Pat(y)) -> -WantsSocialContact(x,y))", "all x.((Ellen(x) & -WantSocialContact(x,Pat)) -> StopAssociating(x,Pat))", "all x.((Friend(x) & -WantsSocialContact(x,Pat)) -> StopsAssociatingWith(x,Pat))", "all x y.((Ellen(x) & Pat(y) & -WantSocialContact(x,y)) -> StopAssociating(x,y))", "all x.((Friend(x) & -WantSocialContact(x,Pat)) -> StopAssociatingWith(x,Pat))", "all x.((Ellen(x) & -WantSocialContact(x,Pat)) -> -AssociatesWith(x,Pat))"]}
{"id": "enwn_validation_812", "nl": "Elena was justified in telling her friends to cut ties with Pat.", "fol": "", "prediction": ["all x y z.((Ellen(x) & Friends(y) & Pat(z)) -> CutTiesWith(x,y,z))", "all x y z.((Ellen(x) & Pat(y) & Friends(z)) -> CutTiesWith(x,y,z))", "all x y z.((Ellen(x) & Friends(y) & Pat(z)) -> CutTies(x,y,z))", "all x y z.((Ellen(x) & Pat(y) & Friends(z)) -> CutTies(x,y,z))", "all x y z.((Ellen(x) & Pat(y) & Friends(z) & CutTies(x,y,z)) -> Justified(x))", "all x y.((Ellen(x) & Pat(y)) -> CutTies(x,y))", "all x y z.((Ellen(x) & Friends(y) & Pat(z)) -> CutTie(x,y,z))", "all x y z.((Eleanor(x) & Pat(y) & Friends(z)) -> CutTiesWith(x,y,z))", "all x y z.((Elena(x) & Pat(y) & Friends(z)) -> CutTiesWith(x,y,z))", "all x y z.((Eleanor(x) & Pat(y) & Friends(z)) -> CutTies(x,y,z))", "all x y.((Ellen(x) & Pat(y)) -> CutTiesWith(x,y))", "all x y z.((Ellen(x) & Pat(y) & Friends(z)) -> CutTie(x,y,z))", "all x y.((Friend(x) & Friends(y) & Pat(z)) -> CutTiesWith(x,y,z))", "all x y.((Ellen(x) & Pat(y)) -> JustifiedInTeaching(x,y))", "all x y z.((Eleanor(x) & Pat(y) & Friends(z) & CutTies(x,y,z)) -> Justified(x))", "all x y.((Friend(x) & Pat(y)) -> CutTiesWith(x,y))"]}
{"id": "enwn_validation_813", "nl": "When you hit someone's car, you should leave a note.", "fol": "", "prediction": ["all x y.((HitCar(x,y) & Person(y)) -> LeaveNote(x,y))", "all x y.((HitCar(x,y) & Person(y)) -> ShouldLeaveNote(x,y))", "all x y.((Car(x) & Person(y) & Hits(x,y)) -> LeaveNote(x,y))", "all x y.((Car(x) & Person(y) & Hits(x,y)) -> ShouldLeaveNote(x,y))", "all x y.((Car(x) & Person(y) & Hits(x,y)) -> LeaveNote(x))", "all x y.((Person(x) & Car(y) & Hits(x,y)) -> LeaveNote(x,y))", "all x y.((Person(x) & Car(y) & Hits(x,y)) -> ShouldLeaveNote(x,y))", "all x y.((Hit(x,y) & Car(y)) -> LeaveNote(x,y))", "all x y.((Car(x) & Car(y) & Hits(x,y)) -> LeaveNote(x,y))", "all x y.((Person(x) & Car(y) & Hits(x,y)) -> LeaveNote(x))", "all x y.((Car(x) & Car(y) & Hits(x,y)) -> LeaveNote(x))", "all x y.((Hit(x,y) & Car(y)) -> ShouldLeaveNote(x,y))", "all x.((HitCar(x) & Person(x)) -> LeaveNote(x))", "all x y.((Car(x) & Car(y) & Hits(x,y)) -> ShouldLeaveNote(x,y))", "all x.((HitCar(x) & Person(x)) -> ShouldLeaveNote(x))", "all x y.((Hit(x,y) & Person(y)) -> LeaveNote(x,y))"]}
{"id": "enwn_validation_814", "nl": "Biff backed into someone in the parking lot, then drove away without stopping.", "fol": "", "prediction": ["all x y z.((Biff(x) & Person(y) & ParkingLocation(z)) -> (BacksInto(x,y) & DrivesAway(x,z)))", "all x y z.((Biff(x) & Person(y) & ParkingLot(z)) -> (BacksInto(x,y) & DrivesAway(x,z)))", "all x y z.((Biff(x) & Person(y) & ParkingLlot(z)) -> (BacksInto(x,y) & DrivesAway(x,z)))", "all x y.((Biff(x) & Person(y)) -> (BacksInto(x,y) & DrivesAwayWithoutStop(x)))", "all x y.((Biff(x) & Person(y)) -> (BacksInto(x,y) & DrivesAway(x)))", "all x y.((Biff(x) & Person(y)) -> (BacksInto(x,y) & DrivesAway(x) & -Stops(x)))", "all x y z.((Biff(x) & Person(y) & ParkingLlot(z)) -> (BacksInto(x,y) & DrivesAway(x) & -Stops(x)))", "all x y z.((Biff(x) & Person(y) & ParkingLlot(z)) -> (BacksInto(x,y) & DrivesAwayWithoutStop(x,z)))", "all x y z.((Biff(x) & Person(y) & ParkingLocation(z)) -> (BacksInto(x,y) & DrivesAwayWithoutStop(x,z)))", "all x y z.((Biff(x) & Person(y) & ParkingLot(z)) -> (BacksInto(x,y) & DrivesAwayWithoutStop(x,z)))", "all x y z.((Biff(x) & Person(y) & ParkingLot(z)) -> (BacksInto(x,y) & DrivesAway(x) & -Stops(x)))", "all x y z.((Biff(x) & Person(y) & ParkingLot(z)) -> (BackpedInto(x,y) & DrivenAway(x,z)))", "all x y z.((Biff(x) & Person(y) & ParkingLocation(z)) -> (BacksInto(x,y) & DrivesAway(x) & -Stops(x)))", "all x y z.((Biff(x) & Person(y) & ParkingLlot(z)) -> (BackpedInto(x,y) & DrivenAway(x,z)))", "all x y z.((Biff(x) & Person(y) & ParkingLocation(z)) -> (BackpedInto(x,y) & DrivenAway(x,z)))", "all x y.((Biff(x) & Person(y)) -> (BackpedInto(x,y) & DrivenAway(x)))"]}
{"id": "enwn_validation_815", "nl": "If you don't stop your car, you can't get out and leave a note.", "fol": "", "prediction": ["all x.((Car(x) & -Stops(x)) -> -CanGetOutAndLeaveNote(x))", "all x.((StopCar(x) & -StopCar(x)) -> -CanGetOutAndLeaveNote(x))", "all x.((Car(x) & -Stops(x)) -> -CanGetOut(x) & CanLeaveNote(x))", "all x.((Car(x) & -Stops(x)) -> -CanGetOutAndLayNote(x))", "all x.((StopCar(x) & -StopCar(x)) -> -CanGetOutAndLayNote(x))", "all x.((Car(x) & -Stops(x)) -> -CanGetOut(x) & LeaveNote(x))", "all x.((Car(x) & -Stop(x)) -> -CanGetOutAndLeaveNote(x))", "all x.((StopCar(x) & -StopCar(x)) -> -CanGetOut(x) & CanLeaveNote(x))", "all x.((Car(x) & -Stop(x)) -> -CanGetOut(x) & CanLeaveNote(x))", "all x.((Car(x) & -Stops(x)) -> -(GetOut(x) & LeaveNote(x)))", "all x.((Car(x) & -Stops(x)) -> -(GetsOut(x) & LeavesNote(x)))", "all x.((StopCar(x) & -StopCar(x)) -> -(GetOut(x) & LeaveNote(x)))", "all x.((Car(x) & -StopStop(x)) -> -CanGetOutAndLeaveNote(x))", "all x.((StopCar(x) & -StopCar(x)) -> -CanGetOut(x) & LeaveNote(x))", "all x.((Car(x) & -Stop(x)) -> -CanGetOut(x) & LeaveNote(x))", "all x.((Car(x) & -Stop(x)) -> -CanGetOutAndLayNote(x))"]}
{"id": "enwn_validation_816", "nl": "Biff hit someone's car but didn't leave a note.", "fol": "", "prediction": ["all x y.((Biff(x) & Car(y)) -> (Has(x,y) & -LaysNote(x)))", "all x y.((Biff(x) & Person(y)) -> (HasCar(x,y) & -LaysNote(x,y)))", "all x y.((Biff(x) & Car(y)) -> (Hit(x,y) & -LeaveNote(x)))", "all x y.((Biff(x) & Car(y)) -> (Has(x,y) & -LeavesNote(x)))", "all x y z.((Biff(x) & Car(y) & Note(z)) -> (Has(x,y) & -Lays(x,z)))", "all x y.((Biff(x) & Person(y)) -> (HasCar(x,y) & -LeavesNote(x,y)))", "all x y.((Biff(x) & Person(y)) -> (HitCar(x,y) & -LeaveNote(x,y)))", "all x y.((Biff(x) & Car(y)) -> (Has(x,y) & -LaysNote(x,y)))", "all x.(Biff(x) -> (HitCar(x) & -LeaveNote(x)))", "all x y.((Biff(x) & Car(y)) -> (Hit(x,y) & -LeaveNote(x,y)))", "all x y.((Biff(x) & Car(y)) -> (Hit(x,y) & -LayNote(x)))", "all x.(Biff(x) -> (HasCar(x) & -LaysNote(x)))", "all x y.((Biff(x) & Person(y)) -> (HasCar(x,y) & -LaysNote(x)))", "all x y.((Biff(x) & Car(y)) -> (Has(x,y) & -LeavesNote(x,y)))", "all x y.((Biff(x) & Person(y)) -> (HitCar(x,y) & -LayNote(x,y)))", "all x y.((Biff(x) & Car(y)) -> (Hit(x,y) & -LayNote(x,y)))"]}
{"id": "enwn_validation_817", "nl": "Biff should have left a note.", "fol": "", "prediction": ["all x.(Biff(x) -> ShouldLeaveNote(x))", "all x.(Biff(x) -> LeftNote(x))", "all x y.((Biff(x) & Note(y)) -> ShouldLeave(x,y))", "all x.(Biff(x) -> ShouldHaveLeavedNote(x))", "all x.(Biff(x) -> ShouldHaveLeapedNote(x))", "all x y.((Biff(x) & Note(y)) -> ShouldLeaved(x,y))", "all x.(Biff(x) -> ShouldLeafNote(x))", "all x.(Biff(x) -> ShouldLeavedNote(x))", "all x.(Biff(x) -> ShouldAlsoLeaveNote(x))", "all x.(Biff(x) -> ShouldHaveLeafNote(x))", "all x y.((Biff(x) & Note(y)) -> Left(x,y))", "all x y.((Biff(x) & Note(y)) -> ShouldHaveLeaped(x,y))", "All x.(Biff(x) -> ShouldLeaveNote(x))", "all x y.((Biff(x) & Note(y)) -> ShouldHaveLeaved(x,y))", "all x.((Biff(x) & LeftNote(x)) -> ShouldHaveLeapedNote(x))", "all x.((Biff(x) & LeftNote(x)) -> ShouldHaveLeavedNote(x))"]}
{"id": "enwn_validation_818", "nl": "You should pay attention to people when they're talking to you.", "fol": "", "prediction": ["all x y.((Person(x) & TalkingTo(x,y)) -> PaysAttentionTo(x,y))", "all x y.((Person(x) & TalkingTo(y,x)) -> PaysAttentionTo(x,y))", "all x y.((Person(x) & TalkingTo(y)) -> PaysAttentionTo(x,y))", "all x.((Person(x) & TalkingTo(x)) -> PaysAttentionTo(x,y))", "all x y.((Person(x) & TalkingTo(x,y)) -> PaysAttention(x,y))", "all x y.((Person(x) & TalkingTo(x,y)) -> PayAttentionTo(x,y))", "all x y.((People(x) & TalkingTo(x,y)) -> PaysAttentionTo(x,y))", "all x y.((Person(x) & TalkingTo(x,y)) -> ShouldPayAttentionTo(x,y))", "all x y z.((Person(x) & TalkingTo(y) & Person(z)) -> PaysAttentionTo(x,y,z))", "all x y.((Person(x) & TalksTo(x,y)) -> PaysAttentionTo(x,y))", "all x y.((Person(x) & TalkingTo(y,x)) -> PaysAttention(x,y))", "all x y.((Person(x) & TalkingTo(y)) -> PaysAttention(x,y))", "all x.((People(x) & TalkingTo(x)) -> PaysAttentionTo(x,y))", "all x y.((Person(x) & Talking(y)) -> PaysAttentionTo(x,y))", "all x.((Person(x) & TalkingTo(x)) -> PaysAttention(x))", "all x.((Person(x) & TalkingTo(x)) -> PaysAttentionTo(x))"]}
{"id": "enwn_validation_819", "nl": "If you're ignoring someone, you aren't paying attention to them.", "fol": "", "prediction": ["all x y.((Ignoring(x,y) & Person(y)) -> -PayingAttentionTo(x,y))", "all x y.((Ignoring(x) & Person(y)) -> -PayingAttentionTo(x,y))", "all x.(Ignoring(x) -> -PayingAttentionTo(x))", "all x.((Ignoring(x) -> -PayingAttentionTo(x)))", "all x.((Ignoring(x) -> -PayingAttentionTo(x))", "all x y.((Ignoring(x,y) & Person(y)) -> -PayingAttention(x,y))", "all x.((Ignoring(x) & -PayingAttentionTo(x)) -> -PayingAttentionTo(x))", "all x y.((Ignores(x,y) & Person(y)) -> -PayingAttentionTo(x,y))", "all x y.((Ignoring(x) & Person(y)) -> -PayingAttention(x,y))", "all x.((Ignoring(x) -> -PayingAttention(x))", "all x.((Ignoring(x) & -PayingAttentionTo(x)) -> Ignoring(x))", "all x.((IgnoringPerson(x) & -PayingAttentionTo(x)) -> -PayingAttentionTo(x))", "all x y.((Ignores(x,y) & Person(y)) -> -PaysAttentionTo(x,y))", "all x.((Ignoring(x) & -PayingAttention(x)) -> -PayingAttention(x))", "all x.((Ignoring(x) & PayingAttention(x)) -> -PayingAttention(x))", "all x.(Ignoring(x) -> -PayingAttentionTo(x,y))"]}
{"id": "enwn_validation_820", "nl": "Terry pretended to not be able to hear Michelle because she wouldn't agree with his dinner plan.", "fol": "", "prediction": ["all x y.((Terry(x) & Michelle(y) & -AgreesWithDinnerPlan(y,x)) -> PretendedToBeUnableToHear(x,y))", "all x y.((Terry(x) & Michelle(y) & -AgreesWithDinnerPlan(y,x)) -> PretendedNotToHear(x,y))", "all x y.((Terry(x) & Michelle(y)) -> (PretendedToBeUnableToHear(x,y) & -AgreesWithDinnerPlan(y,x)))", "all x y z.((Terry(x) & Michelle(y) & DinnerPlan(z)) -> (PretendedToBeUnableToHear(x,y) & -AgreesWith(y,z)))", "all x y.((Terry(x) & Michelle(y) & -AgreesWithDinnerPlan(y,x)) -> PretendedToNotBeAccommodate(x,y))", "all x.((Terry(x) & -CanHearMichelle(x)) -> -AgreesWithDinnerPlan(x))", "all x y.((Terry(x) & Michelle(y) & -AgreesWithDinnerPlan(y,x)) -> PretendedToNotBeAffordableToHear(x,y))", "all x y z.((Terry(x) & Michelle(y) & DinnerPlan(z)) -> (PretendedToBeUnableToHear(x,y) & -AgreeWith(y,z)))", "all x y.((Terry(x) & Michelle(y)) -> (PretendedToBeUnableToHear(x,y) & -AgreeWithDinnerPlan(y,x)))", "all x y z.((Terry(x) & Michelle(y) & DinnerPlan(z)) -> (PretendedToNotBeAccommodate(x,y) & -Accommodate(y,z)))", "all x y.((Terry(x) & Michelle(y)) -> -CanHear(x,y))", "all x y z.((Terry(x) & Michelle(y) & DinnerPlan(z)) -> (PretendedToBeUnableToHear(x,y) & -Agree(y,z)))", "all x y.((Terry(x) & Michelle(y)) -> (PretendedToNotBeAffordableToHear(x,y) & -AgreesWithDinnerPlan(y,x)))", "all x y.((Terry(x) & Michelle(y)) -> (PretendedToBeUnableToHear(x,y) & -AgreesWithDinnerPlan(x,y)))", "all x y z.((Terry(x) & Michelle(y) & DinnerPlan(z) & -AgreesWith(y,z)) -> PretendedToBeUnableToHear(x,y))", "all x y.((Terry(x) & Michelle(y)) -> (PretendedToNotBeAffordableToHear(x,y) & -AgreeWithDinnerPlan(y,x)))"]}
{"id": "enwn_validation_821", "nl": "If you're pretending not to hear someone, you're ignoring them.", "fol": "", "prediction": ["all x.((PretendsNotToHear(x) & Ignores(x)) -> Ignores(x))", "all x.((PretendsNotToHear(x) & Ignoring(x)) -> Ignoring(x))", "all x.((PretendingNotToHear(x) & Ignoring(x)) -> Ignoring(x))", "all x y.((PretendsNotToHear(x,y) & Person(y)) -> Ignoring(x,y))", "all x y.((PretendsNotToHear(x) & Person(y)) -> Ignoring(x,y))", "all x.((PretendsNotToHear(x) & -Hear(x)) -> Ignoring(x))", "all x y.((PretendingNotToHear(x,y) & Person(y)) -> Ignoring(x,y))", "all x.((PretendingNotToHear(x) & Ignores(x)) -> Ignores(x))", "all x y.((PretendsNotToHear(x,y) & Person(y)) -> Ignores(x,y))", "all x.((PretendingNotToHear(x) & -Hear(x)) -> Ignoring(x))", "all x.((PretendsNotToHear(x) & -Hear(x)) -> Ignores(x))", "all x y.((PretendsNotToHear(x) & Person(y)) -> Ignores(x,y))", "all x.((PretendsNotToHear(x) & NotHear(x)) -> Ignoring(x))", "all x.((PretendsNotToHear(x) & Ignores(x)) -> Ignoring(x))", "all x.((Pretending(x) & -Hear(x)) -> Ignoring(x))", "all x.(PretendsNotToHear(x) -> Ignoring(x))"]}
{"id": "enwn_validation_822", "nl": "You shouldn't ignore people.", "fol": "", "prediction": ["all x.(IgnorePeople(x) -> -IgnorePeople(x))", "all x.((People(x) & -Ignore(x)) -> -Ignore(x))", "all x.((Person(x) & -Ignore(x)) -> -Ignore(x))", "all x.((Person(x) & -Ignores(x)) -> -Ignores(x))", "all x.(IgnoresPeople(x) -> -IgnoresPeople(x))", "all x.(IgnorePerson(x) -> -IgnorePerson(x))", "all x.((People(x) & -Ignores(x)) -> -Ignores(x))", "all x.((People(x) & -Ignore(x,y)) -> -Ignore(x,y))", "all x.((People(x) & -Ignores(x)) -> -Ignore(x))", "all x.((IgnorePeople(x)) -> -IgnorePeople(x))", "all x.((People(x) & -Ignore(x)) -> -Ignore(x,y))", "all x.(IgnorePeople(x) -> -(IgnorePeople(x) & IgnorePeople(x)))", "all x.(IgnorePeople(x) -> -(IgnorePeople(x) | IgnorePeople(x))))", "all x.((Person(x) & -Ignores(x)) -> -Ignore(x))", "all x.(IgnorePeople(x) -> -(IgnorePeople(x) & -IgnorePeople(x)))", "all x.(IgnorePeople(x) -> -(IgnorePeople(x) -> IgnorePeople(x)))"]}
{"id": "enwn_validation_823", "nl": "Terry ignored Michelle.", "fol": "", "prediction": ["all x y.((Terry(x) & Michelle(y)) -> Ignored(x,y))", "all x y.((Treeth(x) & Michelle(y)) -> Ignored(x,y))", "all x.((Terry(x) & Michelle(y)) -> Ignored(x,y))", "all x y.((Trey(x) & Michelle(y)) -> Ignored(x,y))", "all x y.((Tree(x) & Michelle(y)) -> Ignored(x,y))", "all x.((Treeth(x) & Michelle(y)) -> Ignored(x,y))", "all x.((Terry(x) & Michelle(x)) -> Ignored(x,y))", "all x.((Trey(x) & Michelle(y)) -> Ignored(x,y))", "all x.((Treeth(x) & Michelle(x)) -> Ignored(x,y))", "all x y.((Terry(x) & Michelle(y)) -> -Ignored(x,y))", "all x y.((Terry(x) & Michelle(y)) -> Ignores(x,y))", "all x.((Terry(x) & Michelle(x)) -> Ignored(x))", "all x.((Trey(x) & Michelle(x)) -> Ignored(x,y))", "all x.(Terry(x) -> IgnoredMelissa(x))", "all x.((Treeth(x) & Michelle(x)) -> Ignored(x))", "all x.((Terry(x) & Michelle(y)) -> Ignores(x,y))"]}
{"id": "enwn_validation_824", "nl": "Terry shouldn't have ignored Michelle.", "fol": "", "prediction": ["all x.((Terry(x) & Michelle(y)) -> -Ignored(x,y))", "all x y.((Terry(x) & Michelle(y)) -> -Ignored(x,y))", "all x.((Trey(x) & Michelle(y)) -> -Ignored(x,y))", "all x.((Terry(x) & -IgnoredMelissa(x)) -> -IgnoredMelissa(x))", "all x.((Terry(x) & Michelle(x)) -> -Ignored(x,y))", "all x.((Trevor(x) & -IgnoredMelissa(x)) -> -IgnoredMelissa(x))", "all x y.((Trevor(x) & Michelle(y)) -> -Ignored(x,y))", "all x.((Terry(x) & -IgnoredMichelle(x)) -> -IgnoredMichelle(x))", "all x.((Trevor(x) & -IgnoredMichelle(x)) -> -IgnoredMichelle(x))", "all x.((Treeth(x) & Michelle(y)) -> -Ignored(x,y))", "all x.((Terry(x) & Michelle(x)) -> -Ignored(x,Michelle))", "all x.((Trevor(x) & Michelle(y)) -> -Ignored(x,y))", "all x.((Trey(x) & Michelle(x)) -> -Ignored(x,y))", "all x.((Trevor(x) & Michelle(x)) -> -Ignored(x,y))", "all x.((Terry(x) & -IgnoredMelissa(x)) -> -Ignored(x,Melissa))", "all x.((Terry(x) & Michelle(x)) -> -Ignored(x,Melissa))"]}
