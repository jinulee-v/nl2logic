{"id": "eqasc_train_0", "nl": "beads of water are formed by water vapor condensing", "fol": "", "prediction": ["all x y.((Bead(x) & Water(y)) -> FormedByWaterVaporCondensing(x,y))"]}
{"id": "eqasc_train_1", "nl": "Clouds are made of water vapor.", "fol": "", "prediction": ["all x.(Cloud(x) -> MadeOfWaterVapor(x))"]}
{"id": "eqasc_train_2", "nl": "Beads of water can be formed by clouds.", "fol": "", "prediction": ["all x.((Bead(x) & Water(x)) -> FormedByClouds(x))"]}
{"id": "eqasc_train_3", "nl": "Condensation is the change of water vapor to a liquid.", "fol": "", "prediction": ["all x.(Condensation(x) -> ChangeOfWaterVaporToLiquid(x))"]}
{"id": "eqasc_train_4", "nl": "Vapor turning into a liquid leaves behind beads of water", "fol": "", "prediction": ["all x.((Vapor(x) & Liquid(x)) -> LeavesBeadsOfWater(x))"]}
{"id": "eqasc_train_5", "nl": "An example of water vapor is steam.", "fol": "", "prediction": ["all x.(WaterVapor(x) -> Steam(x))"]}
{"id": "eqasc_train_6", "nl": "Steam forms beads of water.", "fol": "", "prediction": ["all x.(Steam(x) -> FormsBeadsOfWater(x))"]}
{"id": "eqasc_train_7", "nl": "Water is made up of H2O molecules.", "fol": "", "prediction": ["all x.(Water(x) -> MadeUpOfH2OMolecules(x))"]}
{"id": "eqasc_train_8", "nl": "h2o beads are formed by h2o vapor condensing", "fol": "", "prediction": ["all x.(H2oBead(x) -> FormedByH2oVaporCondensing(x))"]}
{"id": "eqasc_train_9", "nl": "beads of h2o are formed by h2o vapor condensing", "fol": "", "prediction": ["all x.((Bead(x) & H2o(x)) -> FormedByVaporCondensing(x))"]}
{"id": "eqasc_train_10", "nl": "When water vapor condenses, energy in the form of heat is given to the remaining air molecules.", "fol": "", "prediction": ["all x y.((WaterVaporCondensation(x) & AirMolecule(y)) -> EnergyInFormOfHeat(x,y))"]}
{"id": "eqasc_train_11", "nl": "When water vapor condenses heat energy goes to the remaining air molecules", "fol": "", "prediction": ["all x y.((WaterVaporCondensesHeatEnergy(x) & AirMolecules(y)) -> GoesTo(x,y))"]}
{"id": "eqasc_train_12", "nl": "Water, for example, is a liquid.", "fol": "", "prediction": ["all x.((Water(x) & Liquid(x)) -> Liquid(x))"]}
{"id": "eqasc_train_13", "nl": "beads of liquid are formed by vapor condensing", "fol": "", "prediction": ["all x y.((Bead(x) & Liquid(y)) -> FormedByVaporCondensing(x,y))"]}
{"id": "eqasc_train_14", "nl": "Condensation of water vapor occurs during the chilling season.", "fol": "", "prediction": ["all x.(CondensationOfWaterVapor(x) -> ChillingSeason(x))"]}
{"id": "eqasc_train_15", "nl": "Beads of water are formed during the chilling season", "fol": "", "prediction": ["all x y.((Bead(x) & Water(y)) -> FormedDuringChildingSeason(x,y))"]}
{"id": "eqasc_train_16", "nl": "Moisture builds up in the air and condenses wherever the surfaces are cold.", "fol": "", "prediction": ["all x y.((Moisture(x) & Air(y)) -> (BuildsUpIn(x,y) & CondensesWhereCold(x)))"]}
{"id": "eqasc_train_17", "nl": "Water beads form on cold surfaces.", "fol": "", "prediction": ["all x.(WaterBead(x) -> FormsOnColdSurfaces(x))"]}
{"id": "eqasc_train_18", "nl": "dehydrating food is used for preserving food", "fol": "", "prediction": ["all x y.((DehydratingFood(x) & Food(y)) -> UsedForPreserving(x,y))"]}
{"id": "eqasc_train_19", "nl": "Dehydration preserves foods by removing moisture.", "fol": "", "prediction": ["all x.(Dehydration(x) -> PreservesFoodsByRemovingMoisture(x))"]}
{"id": "eqasc_train_20", "nl": "removing moisture from food preserves it.", "fol": "", "prediction": ["all x.((RemovesMoisture(x) & Food(y)) -> Preserves(x,y))"]}
{"id": "eqasc_train_21", "nl": "To preserve a food by salting.", "fol": "", "prediction": ["all x y.((Food(x) & Salting(y)) -> Preserves(x,y))"]}
{"id": "eqasc_train_22", "nl": "You can save food with dehydration or salt. ", "fol": "", "prediction": ["all x.((Food(x) & (Dehydration(x) | Salt(x))) -> Saves(x))"]}
{"id": "eqasc_train_23", "nl": "Foods usually were covered with copious quantities of salt or saturated salt brine, and the salt was allowed to infuse into the tissue while dehydrating the product.", "fol": "", "prediction": ["all x y.((Food(x) & (Salt(y) | SaturatedSaltBrine(y))) -> InfusesIntoTissue(x,y))"]}
{"id": "eqasc_train_24", "nl": "Salting food preserves it", "fol": "", "prediction": ["all x y.((Food(x) & Salting(y)) -> Preserves(x,y))"]}
{"id": "eqasc_train_25", "nl": "Preservatives Preservatives are required to prevent spoilage.", "fol": "", "prediction": ["all x.(Preservative(x) -> Preservative(x))"]}
{"id": "eqasc_train_26", "nl": "dehydrating food prevent spoilage.", "fol": "", "prediction": ["all x.(DehydratingFood(x) -> PreventsSpoilage(x))"]}
{"id": "eqasc_train_27", "nl": "Dehydration is the removal of water.", "fol": "", "prediction": ["all x.(Dehydration(x) -> RemovesWater(x))"]}
{"id": "eqasc_train_28", "nl": "Removing water preserves food. ", "fol": "", "prediction": ["all x.(RemovesWater(x) -> PreservesFood(x))"]}
{"id": "eqasc_train_29", "nl": "Blueberries retain their antioxidant benefits after dehydration.", "fol": "", "prediction": ["all x.(Blueberry(x) -> RetainsAntioxidantBenefitsAfterDehydration(x))"]}
{"id": "eqasc_train_30", "nl": "Blueberries can be eaten as a preserved food still with antioxidant benefits", "fol": "", "prediction": ["all x.(Blueberry(x) -> (EatenAsPreservedFood(x) & AntioxidantBenefits(x)))"]}
{"id": "eqasc_train_31", "nl": "To keep cut flowers lasting longer, use a commercial florist preservative such as Floralife.", "fol": "", "prediction": ["all x.((CutFlower(x) & CommercialFloristPreservative(x)) -> LastsLonger(x))"]}
{"id": "eqasc_train_32", "nl": "Dehydrating food is used to make it last longer.", "fol": "", "prediction": ["all x.(DehydratingFood(x) -> LastsLonger(x))"]}
{"id": "eqasc_train_33", "nl": "Some food is dehydrated, while others are dried much like beef jerky.", "fol": "", "prediction": ["exists x.(Food(x) & (Dehydrated(x) | Dried(x)))"]}
{"id": "eqasc_train_34", "nl": "beef jerky is preserved", "fol": "", "prediction": ["all x.(BeefJerky(x) -> Preserved(x))"]}
{"id": "eqasc_train_35", "nl": "Food is then dehydrated in slow oven or dehydrator.", "fol": "", "prediction": ["all x.((Food(x) & (SlowOven(x) | Dehydrator(x))) -> Dehydrated(x))"]}
{"id": "eqasc_train_36", "nl": "food is preserved by drying", "fol": "", "prediction": ["all x.((Food(x) & Drying(x)) -> PreservedBy(x,y))"]}
{"id": "eqasc_train_37", "nl": "slow cooking food in an oven can be done to preserve it", "fol": "", "prediction": ["all x y.((Oven(x) & SlowCookingFood(y)) -> Preserves(x,y))"]}
{"id": "eqasc_train_38", "nl": "food is preserved in a slow oven", "fol": "", "prediction": ["all x y.((Food(x) & SlowOven(y)) -> PreservedIn(x,y))"]}
{"id": "eqasc_train_39", "nl": "Our Nesco Food Dehydrators require no tray rotation due to a patented air flow system.", "fol": "", "prediction": ["all x.((NescoFoodDehydrator(x) & -TrayRotation(x) & PatentedAirFlowSystem(x)) -> Requires(x,y))"]}
{"id": "eqasc_train_40", "nl": "Something from Nesco is used for preserving food", "fol": "", "prediction": ["all x y.((Nesco(x) & Nesco(y)) -> UsedForPreservingFood(x,y))"]}
{"id": "eqasc_train_41", "nl": "Reproduction is the process by which living things give rise to offspring.", "fol": "", "prediction": ["all x.(Reproduction(x) -> GivesRiseToOffspring(x))"]}
{"id": "eqasc_train_42", "nl": "Whenever it starts to give birth, it gives birth up to two to four babies offspring.", "fol": "", "prediction": ["all x.((StartsGivingBirth(x) & GivesBirthToBirth(x)) -> GivesBirthToBirth(x,2) & GivesBirthToBirthToFour(x))"]}
{"id": "eqasc_train_43", "nl": "Reproduction is the process by which living things give birth to babies", "fol": "", "prediction": ["all x y.((Reproduction(x) & LivingThing(y)) -> GivesBirthToBaby(y,x))"]}
{"id": "eqasc_train_44", "nl": "Through reproduction, the parents transmit genes to the offspring.", "fol": "", "prediction": ["all x y z.((Parent(x) & Offspring(y) & Gene(z)) -> Transmits(x,z))"]}
{"id": "eqasc_train_45", "nl": "Reproduction involves the transmission of genes", "fol": "", "prediction": ["all x y.((Reproduction(x) & Gene(y)) -> InvolvesTransmission(x,y))"]}
{"id": "eqasc_train_46", "nl": "Human offspring are completely immobile.", "fol": "", "prediction": ["all x.(HumanOffspring(x) -> CompletelyImmobile(x))"]}
{"id": "eqasc_train_47", "nl": "reproduction results in a completely immobile human", "fol": "", "prediction": ["all x.(ReproductionResultsInCompletelyImmobileHuman(x))"]}
{"id": "eqasc_train_48", "nl": "Plants are also the oldest living things.", "fol": "", "prediction": ["all x.(Plant(x) -> OldestLivingThing(x))"]}
{"id": "eqasc_train_49", "nl": "reproduction is the process by which plants give rise to offspring", "fol": "", "prediction": ["all x y.((Plant(x) & Plant(y)) -> GivesRiseToOffspring(x,y))"]}
{"id": "eqasc_train_50", "nl": "Sex equals reproduction.", "fol": "", "prediction": ["all x.(Sex(x) -> EqualsReproduction(x))"]}
{"id": "eqasc_train_51", "nl": "Sex is the process by which living things give rise to offspring.", "fol": "", "prediction": ["all x.(Sex(x) -> GivesRiseToOffspring(x))"]}
{"id": "eqasc_train_52", "nl": "Most people want to have children who are the biological offspring of both parents.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y)) -> (WantsChildren(x,y) & HasChildren(x,y)))"]}
{"id": "eqasc_train_53", "nl": "Reproduction is the process by which living things produce children.", "fol": "", "prediction": ["all x.(Reproduction(x) -> (ProcessByLivingThings(x) & ProducesChildren(x)))"]}
{"id": "eqasc_train_54", "nl": "Genes are passed from parent to offspring.", "fol": "", "prediction": ["all x y.((Gene(x) & Parent(y)) -> PassedToOffspring(x,y))"]}
{"id": "eqasc_train_55", "nl": "Reproduction is the process by which genes are passed ", "fol": "", "prediction": ["all x.(Reproduction(x) -> GenesPassed(x))"]}
{"id": "eqasc_train_56", "nl": "Physiologically, sex is for the purpose of reproduction.", "fol": "", "prediction": ["all x.(Sex(x) -> ForReproduction(x))"]}
{"id": "eqasc_train_57", "nl": "sex gives rise to offspring", "fol": "", "prediction": ["all x y.((Sex(x) & Offspring(y)) -> GivesRiseTo(x,y))"]}
{"id": "eqasc_train_58", "nl": "sex is the process by which living things give rise to offspring", "fol": "", "prediction": ["all x y.((Sex(x) & LivingThing(y)) -> GivesRiseToOffspring(y,x))"]}
{"id": "eqasc_train_59", "nl": "Seed refers to offspring, children.", "fol": "", "prediction": ["all x.(Seed(x) -> (Offspring(x) | Children(x)))"]}
{"id": "eqasc_train_60", "nl": "Living things use reproduction to have children.", "fol": "", "prediction": ["all x.(LivingThing(x) -> UsesReproductionToHaveChildren(x))"]}
{"id": "eqasc_train_61", "nl": "the digestive system breaks food into nutrients for the body", "fol": "", "prediction": ["all x y z.((DigestiveSystem(x) & Food(y) & Nutrients(z)) -> BreaksIntoForBody(x,y,z))"]}
{"id": "eqasc_train_62", "nl": "The stomach is part of the digestive system.", "fol": "", "prediction": ["all x.(Stomach(x) -> PartOfDigestiveSystem(x))"]}
{"id": "eqasc_train_63", "nl": "The stomach breaks food into nutrients for the body.", "fol": "", "prediction": ["all x y.((Stomach(x) & Body(y)) -> BreaksFoodIntoNutrients(x,y))"]}
{"id": "eqasc_train_64", "nl": "Nutrients are fuel for your body.", "fol": "", "prediction": ["all x.(Nutrient(x) -> FuelForBody(x))"]}
{"id": "eqasc_train_65", "nl": "The digestive system breaks food into fuel for the body.", "fol": "", "prediction": ["all x y.((DigestiveSystem(x) & Food(y)) -> BreaksIntoFuel(x,y))"]}
{"id": "eqasc_train_66", "nl": "NUTRIENTS To function, the human body must have nutrients.", "fol": "", "prediction": ["all x.(Nutrients(x) -> Functions(x))"]}
{"id": "eqasc_train_67", "nl": "The body needs the digestive system to function", "fol": "", "prediction": ["all x.((Body(x) & DigestiveSystem(x)) -> Needs(x,DigestiveSystem))"]}
{"id": "eqasc_train_68", "nl": "The pancreas is an organ that is part of our digestive system.", "fol": "", "prediction": ["all x.(Pancreas(x) -> PartOfDigestiveSystem(x))"]}
{"id": "eqasc_train_69", "nl": "The pancreas is important for breaking food into nutrients for our bodies", "fol": "", "prediction": ["all x.(Pancreas(x) -> BreaksFoodIntoNutrients(x))"]}
{"id": "eqasc_train_70", "nl": "Catabolism is the breaking down of food.", "fol": "", "prediction": ["all x.(Catabolism(x) -> BreakingDownOfFood(x))"]}
{"id": "eqasc_train_71", "nl": "the digestive system uses catabolism to produce nutrients for the body", "fol": "", "prediction": ["all x y z.((DigestiveSystem(x) & Catabolism(y) & Nutrients(z)) -> UsesToProduce(x,y,z))"]}
{"id": "eqasc_train_72", "nl": "Meat is a nutrient-dense food.", "fol": "", "prediction": ["all x.(Meat(x) -> NutrientDenseFood(x))"]}
{"id": "eqasc_train_73", "nl": "the digestive system breaks meat into nutrients for the body", "fol": "", "prediction": ["all x y z.((DigestiveSystem(x) & Meat(y) & Nutrients(z)) -> BreaksInto(x,y,z))"]}
{"id": "eqasc_train_74", "nl": "Raw proteins provide nutrients for regeneration of cells, promoting healing, youth and longevity.", "fol": "", "prediction": ["all x.(RawProtein(x) -> (ProvidesNutrientsForRegenerationOfCells(x) & PromotesHealing(x) & PromotesYouth(x) & PromotesLongevity(x)))"]}
{"id": "eqasc_train_75", "nl": "The digestive system provides the regeneration of cells for the body.", "fol": "", "prediction": ["all x y.((DigestiveSystem(x) & Body(y)) -> ProvidesRegenerationOfCells(x,y))"]}
{"id": "eqasc_train_76", "nl": "Proper digestion is vital for nutrient absorption.", "fol": "", "prediction": ["all x.(ProperDigestion(x) -> VitalForNutrientAbsorption(x))"]}
{"id": "eqasc_train_77", "nl": "digestion absorbs food for the body", "fol": "", "prediction": ["all x y.((Digestion(x) & Body(y)) -> AbsorbsFood(x,y))"]}
{"id": "eqasc_train_78", "nl": "Nutrients are needed for the body to grow and remain healthy.", "fol": "", "prediction": ["all x.(Nutrient(x) -> (Needs(x,y) & BodyGrows(y) & Needs(x,z) & Healthy(z)))"]}
{"id": "eqasc_train_79", "nl": "the digestive system is needed for the body to grow and remain healthy", "fol": "", "prediction": ["all x y.((Body(x) & DigestiveSystem(y)) -> (Needs(x,y) & Grows(x) & RemainsHealthy(x)))"]}
{"id": "eqasc_train_80", "nl": "Tapeworms have no digestive system and consist primarily of a reproductive system.", "fol": "", "prediction": ["all x.(Tapeworm(x) -> (-DigestiveSystem(x) & ReproductiveSystem(x)))"]}
{"id": "eqasc_train_81", "nl": "Something that tapeworms do not have breaks food into nutrients for the body", "fol": "", "prediction": ["all x.((Tapeworm(x) & -Has(x)) -> BreaksFoodIntoNutrients(x))"]}
{"id": "eqasc_train_82", "nl": "We eat and feed our body with nutrients to enable it to grow.", "fol": "", "prediction": ["all x y.((Eats(x) & Feeds(x) & Body(y)) -> EnablesGrowth(x,y))"]}
{"id": "eqasc_train_83", "nl": "the digestive system enable our body to grow", "fol": "", "prediction": ["all x y.((DigestiveSystem(x) & Body(y)) -> EnablesGrowth(x,y))"]}
{"id": "eqasc_train_84", "nl": "Another nutrient to be concerned with is iron.", "fol": "", "prediction": ["all x.(Nutrient(x) -> Iron(x))"]}
{"id": "eqasc_train_85", "nl": "the digestive system breaks food into iron for the body", "fol": "", "prediction": ["all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> BreaksIntoIron(x,y,z))"]}
{"id": "eqasc_train_86", "nl": "Platypus females lay their eggs in a burrow.", "fol": "", "prediction": ["all x.(PlactusFemale(x) -> LaysEggsInBurrow(x))"]}
{"id": "eqasc_train_87", "nl": "Many species dig burrows in the ground.", "fol": "", "prediction": ["exists x.(Species(x) & DigsBurrowsInGround(x))"]}
{"id": "eqasc_train_88", "nl": "platypus females lay their eggs in the ground", "fol": "", "prediction": ["all x.(PlatypusFemale(x) -> LaysEggsInGround(x))"]}
{"id": "eqasc_train_89", "nl": "When the eggs hatch, the hen leaves the nest site.", "fol": "", "prediction": ["all x.((EggsHave(x) & Hen(x)) -> LeavesNestSite(x))"]}
{"id": "eqasc_train_90", "nl": "Platypus females nest in a burrow and wait for the hatching", "fol": "", "prediction": ["all x.(PlutypusFemale(x) -> (NestsInBurrow(x) & WaitsForHackering(x)))"]}
{"id": "eqasc_train_91", "nl": "Burrows are constructed in soft soil.", "fol": "", "prediction": ["all x.(Burrow(x) -> ConstructedInSoftSoil(x))"]}
{"id": "eqasc_train_92", "nl": "Platypus females lay their eggs in homes constructed in soft soil.", "fol": "", "prediction": ["all x.(PlactusFemale(x) -> LaysEggsInHomes(x))"]}
{"id": "eqasc_train_93", "nl": "Examples of monotremes are the Platypus and Echidna.", "fol": "", "prediction": ["all x.(Monotreme(x) -> (Plutypus(x) | Echidna(x)))"]}
{"id": "eqasc_train_94", "nl": "echidnas lay eggs", "fol": "", "prediction": ["all x.(Echidna(x) -> LaysEggs(x))"]}
{"id": "eqasc_train_95", "nl": "Like the platypus, it is an egg laying mammal.", "fol": "", "prediction": ["(EggLayingMammal(Placypus)"]}
{"id": "eqasc_train_96", "nl": "some mammals lay their eggs in a burrow", "fol": "", "prediction": ["exists x.(Mammal(x) & LaysEggsInBurrow(x))"]}
{"id": "eqasc_train_97", "nl": "Burrows dug by badgers are also important in many areas.", "fol": "", "prediction": ["all x.((Burrow(x) & DignifiedByBadgers(x)) -> ImportantInManyAreas(x))"]}
{"id": "eqasc_train_98", "nl": "Platypus females lay eggs in a dug out area.", "fol": "", "prediction": ["all x.(PlactusFemale(x) -> LaysEggsInDugOutArea(x))"]}
{"id": "eqasc_train_99", "nl": "monotremes lay their eggs in a burrow", "fol": "", "prediction": ["all x.(Monotreme(x) -> LaysEggsInBurrow(x))"]}
{"id": "eqasc_train_100", "nl": "Monotremes lay eggs", "fol": "", "prediction": ["all x.(Monotreme(x) -> LaysEggs(x))"]}
{"id": "eqasc_train_101", "nl": "Although the platypus is a mammal, it is bizarre and lays eggs .", "fol": "", "prediction": ["all x.(Platypus(x) -> (Mammal(x) & Bizarre(x) & LaysEggs(x)))"]}
{"id": "eqasc_train_102", "nl": "Mammals do not usually lay eggs.", "fol": "", "prediction": ["all x.(Mammal(x) -> -LaysEggs(x))"]}
{"id": "eqasc_train_103", "nl": "Most mollusks have shells.", "fol": "", "prediction": ["all x.(Mollusk(x) -> HasShell(x))"]}
{"id": "eqasc_train_104", "nl": "Instead, the body is covered with a protective shell of bony armor.", "fol": "", "prediction": ["all x.(Body(x) -> CoveredWithProtectiveShellOfBonyArmor(x))"]}
{"id": "eqasc_train_105", "nl": "Most mollusks have protective of bony armor", "fol": "", "prediction": ["all x.(Mollusk(x) -> ProtectiveOfBonyArmor(x))"]}
{"id": "eqasc_train_106", "nl": "Mussels are bivalve mollusks.", "fol": "", "prediction": ["all x.(Mussels(x) -> BivalveMollusk(x))"]}
{"id": "eqasc_train_107", "nl": "Most mussels have shells", "fol": "", "prediction": ["all x.(Muschel(x) -> HasShell(x))"]}
{"id": "eqasc_train_108", "nl": "Mollusks are invertebrates and are no exception.", "fol": "", "prediction": ["all x.(Mollusk(x) -> (Invertebrate(x) & -Exception(x)))"]}
{"id": "eqasc_train_109", "nl": "Some invertebrates have shells.", "fol": "", "prediction": ["exists x.(Invertebrate(x) & HasShell(x))"]}
{"id": "eqasc_train_110", "nl": "Clams, oysters and snails are familiar mollusks.", "fol": "", "prediction": ["all x.((Cam(x) | Oyster(x) | Snail(x)) -> Mollusk(x))"]}
{"id": "eqasc_train_111", "nl": "most oysters have shells", "fol": "", "prediction": ["all x.(Oyster(x) -> HasShell(x))"]}
{"id": "eqasc_train_112", "nl": "Mollusks are soft-bodied invertebrates.", "fol": "", "prediction": ["all x.(Mollusk(x) -> SoftBodyInvertebrate(x))"]}
{"id": "eqasc_train_113", "nl": "Most soft-bodied invertebrates have shells", "fol": "", "prediction": ["all x.(SoftBodyInvertebrate(x) -> HasShell(x))"]}
{"id": "eqasc_train_114", "nl": "Cephalopods are a class of marine mollusks.", "fol": "", "prediction": ["all x.(Cephalopod(x) -> MarineMollusk(x))"]}
{"id": "eqasc_train_115", "nl": "most cephalopods have shells", "fol": "", "prediction": ["all x.(Cephalopod(x) -> HasShell(x))"]}
{"id": "eqasc_train_116", "nl": "Coral reefs and shells are made of calcium carbonate.", "fol": "", "prediction": ["all x.(CoralReef(x) & Shell(x)) -> MadeOfCalciumCarbonate(x))"]}
{"id": "eqasc_train_117", "nl": "mollusks contain calcium carbonate", "fol": "", "prediction": ["all x.(Mollusk(x) -> ContainsCalciumCarbonate(x))"]}
{"id": "eqasc_train_118", "nl": "All mollusks have soft bodies.", "fol": "", "prediction": ["all x.(Mollusk(x) -> HasSoftBody(x))"]}
{"id": "eqasc_train_119", "nl": "Shells can protect soft bodies", "fol": "", "prediction": ["all x.(Shell(x) -> ProtectsSoftBody(x))"]}
{"id": "eqasc_train_120", "nl": "Mussels have shells.", "fol": "", "prediction": ["all x.(Mussel(x) -> HasShell(x))"]}
{"id": "eqasc_train_121", "nl": "Mollusks are the second-largest invertebrate group.", "fol": "", "prediction": ["all x.(Molllusk(x) -> SecondLargestInvertebrateGroup(x))"]}
{"id": "eqasc_train_122", "nl": "Most of the second-largest invertebrate group have shells", "fol": "", "prediction": ["all x.((InvertebrateGroup(x) & SecondLargest(x)) -> HasShells(x))"]}
{"id": "eqasc_train_123", "nl": "Among mollusks, the golden snail is a survivalist.", "fol": "", "prediction": ["all x.(GoldenSnail(x) -> Survivalist(x))"]}
{"id": "eqasc_train_124", "nl": "Most snails have shells.", "fol": "", "prediction": ["all x.(Snail(x) -> HasShell(x))"]}
{"id": "eqasc_train_125", "nl": "mechanical weathering is when rocks are broken down by mechanical means", "fol": "", "prediction": ["all x.(MechanicalWeathering(x) -> (RocksBreakdownByMechanicalMeans(x) & BrokenDownByMechanicalMeans(x)))"]}
{"id": "eqasc_train_126", "nl": "Pysical weathering is the mechanical breakdown of rocks.", "fol": "", "prediction": ["all x.(PysicalWeathering(x) -> MechanicalBreakdownOfRocks(x))"]}
{"id": "eqasc_train_127", "nl": "Physical weathering is when rocks are broken down by means.", "fol": "", "prediction": ["all x.(PhysicalWeathering(x) -> (RocksBreakdown(x) & ByMeans(x)))"]}
{"id": "eqasc_train_128", "nl": "Water is a mechanical weathering force.", "fol": "", "prediction": ["all x.(Water(x) -> MechanicalWeatheringForce(x))"]}
{"id": "eqasc_train_129", "nl": "Water can break down rocks", "fol": "", "prediction": ["all x y.((Water(x) & Rock(y)) -> BreaksDown(x,y))"]}
{"id": "eqasc_train_130", "nl": "water can weather rocks", "fol": "", "prediction": ["all x y.((Water(x) & Rock(y)) -> Weathers(x,y))"]}
{"id": "eqasc_train_131", "nl": "Mechanical weathering produces detritus.", "fol": "", "prediction": ["all x.(MechanicalWeathering(x) -> ProducesDetritus(x))"]}
{"id": "eqasc_train_132", "nl": "Detritus is formed when rocks are broken down.", "fol": "", "prediction": ["all x.((Rock(x) & BrokenDown(x)) -> Detritus(x))"]}
{"id": "eqasc_train_133", "nl": "Ice wedging is the most important form of mechanical weathering.", "fol": "", "prediction": ["all x.(IceWedging(x) -> MechanicalWeathering(x))"]}
{"id": "eqasc_train_134", "nl": "rocks can be broken down from ice wedging", "fol": "", "prediction": ["all x y.((Rock(x) & IceWedging(y)) -> BreakableFrom(x,y))"]}
{"id": "eqasc_train_135", "nl": "Sediment, and sedimentary rock, is made of particles broken down from other rocks.", "fol": "", "prediction": ["all x.(Sediment(x) -> (MadeOf(x,y) & BrokenDownFromRocks(x)))"]}
{"id": "eqasc_train_136", "nl": "mechanical weathering produces Sediment", "fol": "", "prediction": ["all x y.((MechanicalWeathering(x) & Sediment(y)) -> Produces(x,y))"]}
{"id": "eqasc_train_137", "nl": "Sediment occurs when rocks are weathered mechanically", "fol": "", "prediction": ["all x.(Sediment(x) -> (RocksWeatheredMechanically(x) & WeatheredMechanically(x)))"]}
{"id": "eqasc_train_138", "nl": "Erosion begins with the weathering, or breaking down, of rocks and soil.", "fol": "", "prediction": ["all x.(Erosion(x) -> (Weathering(x) | BreakingDown(x)))"]}
{"id": "eqasc_train_139", "nl": "erosion is when rocks are broken down mechanically", "fol": "", "prediction": ["all x.(Erosion(x) -> (RocksBreakdownMechanically(x) & BrokenDownMechanically(x)))"]}
{"id": "eqasc_train_140", "nl": "rocks are broken down by water", "fol": "", "prediction": ["all x y.((Rock(x) & Water(y)) -> BreaksDownBy(x,y))"]}
{"id": "eqasc_train_141", "nl": "Echinoderms have a unique water vascular system with tube feet.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> (UniqueWaterVascularSystem(x) & TubeFeet(x)))"]}
{"id": "eqasc_train_142", "nl": "Echinoderms in the diorama include the crinoids and blastoids.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> (Crinoids(x) | Blastoidoids(x)))"]}
{"id": "eqasc_train_143", "nl": "Blastoids have a unique water vascular system with tube feet.", "fol": "", "prediction": ["all x.(Blastoids(x) -> (UniqueWaterVascularSystem(x) & TubeFeet(x)))"]}
{"id": "eqasc_train_144", "nl": "Each starfish arm is lined with tube feet.", "fol": "", "prediction": ["all x.(StarfishArm(x) -> LinedWithTubeFeet(x))"]}
{"id": "eqasc_train_145", "nl": "Starfish are an echinoderm with a unique water vascular system.", "fol": "", "prediction": ["all x.(Starfish(x) -> (Echinoderm(x) & UniqueWaterVascularSystem(x)))"]}
{"id": "eqasc_train_146", "nl": "Echinoderms are represented by the starfish.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> RepresentedByStarfish(x))"]}
{"id": "eqasc_train_147", "nl": "Starfish have a unique water vascular system with tube feet.", "fol": "", "prediction": ["all x.(Starfish(x) -> (UniqueWaterVascularSystem(x) & TubeFeet(x)))"]}
{"id": "eqasc_train_148", "nl": "Another group of echinoderms are the echinoids.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> Echinoids(x))"]}
{"id": "eqasc_train_149", "nl": "echinoids have tube feet", "fol": "", "prediction": ["all x.(Echinoid(x) -> TubeFeet(x))"]}
{"id": "eqasc_train_150", "nl": "Echinoderms have a hydraulic system of locomotion called the water vascular system.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> HydraulicSystemOfLocomotion(x))"]}
{"id": "eqasc_train_151", "nl": "Echinoderms have a hydraulic system of locomotion with tube feet.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> (HasHydrodynamicSystem(x) & HasTubeFeet(x)))"]}
{"id": "eqasc_train_152", "nl": "Starfish are echinoderms.", "fol": "", "prediction": ["all x.(Starfish(x) -> Echinoderm(x))"]}
{"id": "eqasc_train_153", "nl": "Each starfish arm contains part of the water vascular system.", "fol": "", "prediction": ["all x.(StarfishArm(x) -> ContainsPartOfWaterVascularSystem(x))"]}
{"id": "eqasc_train_154", "nl": "All echinoderms are deuterostomes .", "fol": "", "prediction": ["all x.(Echinoderm(x) -> Deuterostome(x))"]}
{"id": "eqasc_train_155", "nl": "deuterostomes can have a water vascular system with tube feet.", "fol": "", "prediction": ["all x.(Deuterostome(x) -> (WaterVascularSystem(x) & TubeFeet(x)))"]}
{"id": "eqasc_train_156", "nl": "Starfish and sea urchins are also echinoderms.", "fol": "", "prediction": ["all x.((Starfish(x) | SeaUrchin(x)) -> Echinoderm(x))"]}
{"id": "eqasc_train_157", "nl": "sea urchins have a unique water vascular system with tube feet", "fol": "", "prediction": ["all x.(SeaUrchin(x) -> (UniqueWaterVascularSystem(x) & TubeFeet(x)))"]}
{"id": "eqasc_train_158", "nl": "Sea stars use hundreds of tube feet.", "fol": "", "prediction": ["all x.(SeaStar(x) -> UsesHundredsOfTubeFeet(x))"]}
{"id": "eqasc_train_159", "nl": "Sea stars use a unique water vascular system with feet", "fol": "", "prediction": ["all x y.((SeaStar(x) & WaterVascularSystem(y)) -> UsesUniqueWaterVascular(x,y))"]}
{"id": "eqasc_train_160", "nl": "Echinoids have unique water vascular system was tube feet.", "fol": "", "prediction": ["all x.(Echinoid(x) -> UniqueWaterVascularSystem(x,tubeFeet))"]}
{"id": "eqasc_train_161", "nl": "Another obvious connection between the eye and the rest of the body is the vascular system.", "fol": "", "prediction": ["all x.((Eye(x) & RestOfBody(x)) -> VascularSystem(x))"]}
{"id": "eqasc_train_162", "nl": "a connection is between the eye and tube feet in echinoderms", "fol": "", "prediction": ["all x y z.((Echinoderm(x) & Eye(y) & TubeFoot(z)) -> (Connection(x,y,z) & InEchinoderm(x)))"]}
{"id": "eqasc_train_163", "nl": "Climate is the average weather in an area over a long period of time.", "fol": "", "prediction": ["all x y.((Climate(x) & Area(y)) -> AverageWeather(x,y))"]}
{"id": "eqasc_train_164", "nl": "Climate Indonesia's climate is definitely tropical.", "fol": "", "prediction": ["Climate Indonesia's climate is definitely tropical."]}
{"id": "eqasc_train_165", "nl": "The average weather in Indonesia is tropical", "fol": "", "prediction": ["all x.(IndonesianWeather(x) -> Tropical(x))"]}
{"id": "eqasc_train_166", "nl": "Along with simulating the climate, it is crucial to observe the climate.", "fol": "", "prediction": ["all x.(SimulatingClimate(x) -> ObserveClimate(x))"]}
{"id": "eqasc_train_167", "nl": "It is essential to observe the average weather in one place over time.", "fol": "", "prediction": ["all x y.((Place(x) & Place(y)) -> ObservesAverageWeather(x,y))"]}
{"id": "eqasc_train_168", "nl": "Climate Jordan's climate is dry and hot.", "fol": "", "prediction": ["(DryClimate(Jordan) & HotClimate(Jordan))"]}
{"id": "eqasc_train_169", "nl": "Jordan's average weather over time is dry and hot", "fol": "", "prediction": ["all x.(Jordan(x) -> (AverageWeather(x) & Dry(x) & Hot(x)))"]}
{"id": "eqasc_train_170", "nl": "Satellite meteorology is the measurement of weather by sensors aboard Earth-orbiting satellites.", "fol": "", "prediction": ["all x y.((SatelliteMeteorology(x) & EarthOrbitingSatellite(y)) -> MeasuresWeatherBySensors(x,y))"]}
{"id": "eqasc_train_171", "nl": "Climate can be annalyzed with satellite", "fol": "", "prediction": ["all x.(Climate(x) -> CanBeAnnalyzedWithSatellite(x))"]}
{"id": "eqasc_train_172", "nl": "Bloom time depends on the weather.", "fol": "", "prediction": ["all x.(BloomTime(x) -> DependsOnWeather(x))"]}
{"id": "eqasc_train_173", "nl": "Bloom time depends on the climate in an area", "fol": "", "prediction": ["all x y.((BloomTime(x) & Area(y)) -> DependsOnClimate(x,y))"]}
{"id": "eqasc_train_174", "nl": "Weather refers to the circulation of the Earth's atmosphere.", "fol": "", "prediction": ["all x.(Weather(x) -> (CirculationOfEarthsAtmosphere(x)))"]}
{"id": "eqasc_train_175", "nl": "climate is the average circulation of the Earth's atmosphere over a long period of time", "fol": "", "prediction": ["all x.(Climate(x) -> (AverageCirculationOfEarthsAtmosphere(x) & LongPeriodOfTime(x)))"]}
{"id": "eqasc_train_176", "nl": "Choices include Yahoo Weather, CNN Weather, Rain or Shine and The Weather Channel.", "fol": "", "prediction": ["(Choices(YahooWeather) | Choice(CNNWeather) | Choice(RainOrShine) | Choice(WeatherChannel)))"]}
{"id": "eqasc_train_177", "nl": "Climate is the average of things like rain or sun shine  in an area over a long period of time", "fol": "", "prediction": ["all x y z.((Climate(x) & (Rain(y) | SunShine(y)) & Area(z)) -> AverageOverLongPeriodOfTime(x,y,z))"]}
{"id": "eqasc_train_178", "nl": "Climate, on the other hand, looks at long-term averages of weather conditions.", "fol": "", "prediction": ["(all x.(Climate(x) -> LooksAtLongTermAverages(x)))"]}
{"id": "eqasc_train_179", "nl": "Climate looks at long-term averages in an area over a long period of time", "fol": "", "prediction": ["all x y z.((Climate(x) & Area(y) & LongTermAverage(z)) -> LooksAt(x,z))"]}
{"id": "eqasc_train_180", "nl": "Climate Taiwan's climate is subtropical.", "fol": "", "prediction": ["Climate Taiwan's climate is subtropical."]}
{"id": "eqasc_train_181", "nl": "the average weather in Taiwan over a long period of time is subtropical", "fol": "", "prediction": ["all x y.((AverageWeather(x) & LongPeriodOfTime(y) & InTaiwan(x,y)) -> Subtropical(x))"]}
{"id": "eqasc_train_182", "nl": "An era is a period of time in which events occur.", "fol": "", "prediction": ["all x.(Epoca(x) -> (PeriodOfTime(x) & EventsOccur(x)))"]}
{"id": "eqasc_train_183", "nl": "Climate is the average weather in an area during an era.", "fol": "", "prediction": ["all x y.((Climate(x) & Area(y) & DuringEpoca(x,y)) -> AverageWeather(x,y))"]}
{"id": "eqasc_train_184", "nl": "Eilat is the safest place in the area.", "fol": "", "prediction": ["Eilat is the safestPlaceInArea(e)"]}
{"id": "eqasc_train_185", "nl": "Climate is the average weather in a place over a long period of time.", "fol": "", "prediction": ["all x y.((Climate(x) & Place(y)) -> AverageWeather(x,y))"]}
{"id": "eqasc_train_186", "nl": "loud noises can cause animals to startle", "fol": "", "prediction": ["all x.(LoudNoise(x) -> CanCauseAnimalsToStartle(x))"]}
{"id": "eqasc_train_187", "nl": "Once startled, the animal runs away often taking short leaps and emitting low cries.", "fol": "", "prediction": ["all x.((Animal(x) & Startled(x)) -> (RunsAway(x) & ShortLeaps(x) & LowCries(x)))"]}
{"id": "eqasc_train_188", "nl": "Loud noises can cause animals to run away.", "fol": "", "prediction": ["all x.(LoudNoise(x) -> CanCauseAnimalsToRun(x))"]}
{"id": "eqasc_train_189", "nl": "Fireworks that only make a loud noise are called firecrackers.", "fol": "", "prediction": ["all x.((Fireworks(x) & MakeLoudNoise(x)) -> Firecracker(x))"]}
{"id": "eqasc_train_190", "nl": "firecrackers can cause animals to startle", "fol": "", "prediction": ["all x y.((Firecracker(x) & Animal(y)) -> CausesStartle(x,y))"]}
{"id": "eqasc_train_191", "nl": "And at 4,000 rpm, highway engine noise is still plenty loud.", "fol": "", "prediction": ["(all x.((HighwayEngine(x) & 4,000Rpm(x)) -> PlentyLoud(x)))"]}
{"id": "eqasc_train_192", "nl": "engines can cause animals to startle", "fol": "", "prediction": ["all x y.((Engine(x) & Animal(y)) -> CausesStartle(x,y))"]}
{"id": "eqasc_train_193", "nl": "Thunder is a rich source of loudness.", "fol": "", "prediction": ["all x.(Thunder(x) -> RichSourceOfLoudness(x))"]}
{"id": "eqasc_train_194", "nl": "thunder can cause animals to startle", "fol": "", "prediction": ["all x y.((Thunder(x) & Animal(y)) -> CausesStarting(x,y))"]}
{"id": "eqasc_train_195", "nl": "All animals are startled by an unannounced approach, a sudden movement, or a loud noise.", "fol": "", "prediction": ["all x.((Animal(x) & (UnannouncedApproach(x) | SuspiciousMovement(x) | LoudNoise(x))) -> Startled(x))"]}
{"id": "eqasc_train_196", "nl": "animals can be startled by sudden movement", "fol": "", "prediction": ["all x.((Animal(x) & SuspiciousMovement(x)) -> StartledBy(x))"]}
{"id": "eqasc_train_197", "nl": "Babies are frightened by loud noises.", "fol": "", "prediction": ["all x.(Baby(x) -> FrightenedByLoudNoise(x))"]}
{"id": "eqasc_train_198", "nl": "animals are frightened by noise", "fol": "", "prediction": ["all x.((Animal(x) & FearnByNoise(x)) -> FrightenedByNoise(x))"]}
{"id": "eqasc_train_199", "nl": "Gunshots startle the quiet.", "fol": "", "prediction": ["all x.(Gunshot(x) -> StartlesQuiet(x))"]}
{"id": "eqasc_train_200", "nl": "Gunshots cause loud noises to animals", "fol": "", "prediction": ["all x y.((Gunshot(x) & Animal(y)) -> CausesLoudNoise(x,y))"]}
{"id": "eqasc_train_201", "nl": "When startled or hurt, hamsters can deliver quite a bite.", "fol": "", "prediction": ["all x.((Hamster(x) & Startled(x) & Ill(x)) -> DeliversQuiteBit(x))"]}
{"id": "eqasc_train_202", "nl": "loud noises can cause hamsters to deliver quite a bite", "fol": "", "prediction": ["all x y.((LoudNoise(x) & Hamster(y)) -> (DeliversQuiteBite(y)))"]}
{"id": "eqasc_train_203", "nl": "Flat spots on rail car wheels cause a loud banging noise.", "fol": "", "prediction": ["all x.((FlatSpots(x) & RailCarWheels(x)) -> LoudBanggingNoise(x))"]}
{"id": "eqasc_train_204", "nl": "Flat spots on rail car wheels can cause animals to startle", "fol": "", "prediction": ["all x y.((FlatSpot(x) & RailCarWheels(y)) -> CanCauseAnimalsToStartle(x,y))"]}
{"id": "eqasc_train_205", "nl": "Anything out of the ordinary can startle and spook animals into uncommon and dangerous behaviors.", "fol": "", "prediction": ["all x.((OutOfOddly(x) & StartlesAndSpooksAnimals(x)) -> UnusualAndDangerousBehaviors(x))"]}
{"id": "eqasc_train_206", "nl": "loud noises can cause animals to become dangerous", "fol": "", "prediction": ["all x.(LoudNoise(x) -> CanCauseAnimalsToBecomeDangerous(x))"]}
{"id": "eqasc_train_207", "nl": "All mammals are animals.", "fol": "", "prediction": ["all x.(Mammal(x) -> Animal(x))"]}
{"id": "eqasc_train_208", "nl": "loud noises can cause mammals to startle.", "fol": "", "prediction": ["all x.(LoudNoise(x) -> CausesMammalStartle(x))"]}
{"id": "eqasc_train_209", "nl": "Thunder, however, is more than a simple, loud explosive sound following a lightning bolt.", "fol": "", "prediction": ["all x.(Thunder(x) -> (SimpleLoudEmittingSound(x) & FollowsLightningBall(x)))"]}
{"id": "eqasc_train_210", "nl": "Thunder can startle animals", "fol": "", "prediction": ["all x y.((Thunder(x) & Animal(y)) -> CanStartle(x,y))"]}
{"id": "eqasc_train_211", "nl": "An injured animal can be very dangerous.", "fol": "", "prediction": ["all x.(InjuredAnimal(x) -> VeryDangerous(x))"]}
{"id": "eqasc_train_212", "nl": "loud noises can be dangerous", "fol": "", "prediction": ["all x.(LoudNoise(x) -> CanBeDangerous(x))"]}
{"id": "eqasc_train_213", "nl": "Snorts often are emitted by startled animals S16801.", "fol": "", "prediction": ["all x y.((Snort(x) & StartledAnimal(y)) -> EmittedBy(x,y))"]}
{"id": "eqasc_train_214", "nl": "Loud noises can make an animal snort.", "fol": "", "prediction": ["all x.((LoudNoise(x) & Animal(y)) -> CanMakeSnort(x,y))"]}
{"id": "eqasc_train_215", "nl": "loud noises can cause animals to snort", "fol": "", "prediction": ["all x y.((LoudNoise(x) & Animal(y)) -> CanSnort(x,y))"]}
{"id": "eqasc_train_216", "nl": "Guns are loud, folks, and the sound is painful.", "fol": "", "prediction": ["all x.(Gun(x) -> (Loud(x) & Folk(x) & PainfulSound(x)))"]}
{"id": "eqasc_train_217", "nl": "guns can cause animals to startle", "fol": "", "prediction": ["all x y.((Gun(x) & Animal(y)) -> CausesStartle(x,y))"]}
{"id": "eqasc_train_218", "nl": "nerves can be used to feel heat and pressure on the skin", "fol": "", "prediction": ["all x y.((Nervous(x) & Skin(y)) -> FeelsHeatAndPressure(x,y))"]}
{"id": "eqasc_train_219", "nl": "Tight fitting shoes can increase the pressure on the skin and exacerbates the pain.", "fol": "", "prediction": ["all x.((Shoes(x) & TightFilling(x)) -> (IncreasesPressureOnSkin(x) & ExacerbatesPain(x)))"]}
{"id": "eqasc_train_220", "nl": "Nerves can be used to feel heat and pain on the skin", "fol": "", "prediction": ["all x y.((Nerve(x) & Skin(y)) -> FeelsHeatAndPain(x,y))"]}
{"id": "eqasc_train_221", "nl": "Firm hugs and hiding under piles of pillows provides the sensory input to the skin known as deep touch-pressure input.", "fol": "", "prediction": ["all x y.((FirmHugs(x) & PillowPile(y) & HiddenUnder(x,y)) -> DeepTouchPressureInput(x))"]}
{"id": "eqasc_train_222", "nl": "The body uses nerves to measure sensor input to the skin such as firm hugs.", "fol": "", "prediction": ["all x y.((Body(x) & Nerve(y)) -> MeasuresSensorInputToSkin(x,y))"]}
{"id": "eqasc_train_223", "nl": "Sensory Nerve Endings are in involved in sensory reception.", "fol": "", "prediction": ["all x.(SensitiveNervousEnding(x) -> InInvolvedInSensitiveReception(x))"]}
{"id": "eqasc_train_224", "nl": "The sensory system is used in feeling heat", "fol": "", "prediction": ["all x y.((SensorySystem(x) & Heat(y)) -> UsedInFeeling(x,y))"]}
{"id": "eqasc_train_225", "nl": "Nerve endings in the skin allow us to feel pain, pressure, heat, and cold.", "fol": "", "prediction": ["all x.(NervousEnding(x) -> (AllowsPain(x) & AllowsPressure(x) & AllowsHeat(x) & AllowsCold(x)))"]}
{"id": "eqasc_train_226", "nl": "nerves endings can feel cold", "fol": "", "prediction": ["all x.((NervousEnding(x) & Cold(x)) -> Feels(x))"]}
{"id": "eqasc_train_227", "nl": "Epidermal: Pertaining to the upper layer of cells, on the skin, or elsewhere.", "fol": "", "prediction": ["all x.(Epidermal(x) -> (RelatingToUpperLayerOfCells(x) | OnSkin(x) | Wherever(x)))"]}
{"id": "eqasc_train_228", "nl": "nerves can be used to feel heat and pressure on the epidermal layer", "fol": "", "prediction": ["all x y.((Nervous(x) & EpidermalLayer(y)) -> FeelsHeatAndPressure(x,y))"]}
{"id": "eqasc_train_229", "nl": "Sensory neurons run anteriorly from the nerve ring to the sensory organs in the head.", "fol": "", "prediction": ["all x y z.((SensoryNeuron(x) & NerveRing(y) & SensoryOrgan(z)) -> RunsAnteriorly(x,y,z))"]}
{"id": "eqasc_train_230", "nl": "sensory neurons can be used to feel heat and pressure on the skin", "fol": "", "prediction": ["all x y.((SensitiveNeuron(x) & Skin(y)) -> FeelsHeatAndPressure(x,y))"]}
{"id": "eqasc_train_231", "nl": "Epidermis The epidermis forms the outermost surface of the skin.", "fol": "", "prediction": ["all x.(Epidermis(x) -> FormsOutermostSurfaceOfSkin(x))"]}
{"id": "eqasc_train_232", "nl": "Nerves can feel heat and pressure on the epidermis", "fol": "", "prediction": ["all x y.((Nervine(x) & Epidermis(y)) -> FeelsHeatAndPressure(x,y))"]}
{"id": "eqasc_train_233", "nl": "How peripheral nerves work Peripheral nerves are made of bundles of nerve fibres, which can be regarded as living telephone wires.", "fol": "", "prediction": ["all x.((PeripheralNervous(x) & MadeOfBundlesOfNervousFibers(x)) -> LivingTelephoneWires(x))"]}
{"id": "eqasc_train_234", "nl": "A bundle of fibers can be used to feel heat and pressure on the skin", "fol": "", "prediction": ["all x y.((BundleOfFibers(x) & Skin(y)) -> FeelsHeatAndPressure(x,y))"]}
{"id": "eqasc_train_235", "nl": "The nerves transmit information electrically.", "fol": "", "prediction": ["all x.(Nervous(x) -> TransmitsInformationElectrically(x))"]}
{"id": "eqasc_train_236", "nl": "The sensation of feeling heat and pressure on the skin is transmitted electrically.", "fol": "", "prediction": ["all x.((SensationOfHeat(x) & FeelingPressure(x)) -> TransmittedElectrically(x))"]}
{"id": "eqasc_train_237", "nl": "fog is formed by water vapor condensing in the air", "fol": "", "prediction": ["all x.(Fog(x) -> (FormedByWaterVaporCondensing(x) & InAir(x)))"]}
{"id": "eqasc_train_238", "nl": "Water vapor rises into the atmosphere.", "fol": "", "prediction": ["all x.(WaterVapor(x) -> RisesIntoAtmosphere(x))"]}
{"id": "eqasc_train_239", "nl": "a rising atmosphere will condense into fog", "fol": "", "prediction": ["all x.((RisingAtmosphere(x) & CondenseIntoFog(x)) -> CondenseIntoFog(x))"]}
{"id": "eqasc_train_240", "nl": "But suddenly a fog, a haze, began to form.", "fol": "", "prediction": ["all x.((Fog(x) & Haze(x)) -> Forms(x))"]}
{"id": "eqasc_train_241", "nl": "A haze is formed when water vapor condenses in the air", "fol": "", "prediction": ["all x.(Haze(x) -> (WaterVaporCondensesInAir(x) & InAir(x)))"]}
{"id": "eqasc_train_242", "nl": "Water vapor that condenses in the air near the ground is fog.", "fol": "", "prediction": ["all x.((WaterVapor(x) & CondensesInAir(x) & NearGround(x)) -> Fog(x))"]}
{"id": "eqasc_train_243", "nl": "fog forms near the ground", "fol": "", "prediction": ["all x y.((Fog(x) & Ground(y)) -> FormsNear(x,y))"]}
{"id": "eqasc_train_244", "nl": "Components of water (H2O) 2.", "fol": "", "prediction": ["(ComponentsOfWater(H2O) & 2.)"]}
{"id": "eqasc_train_245", "nl": "fog is formed by h2o vapor condensing in the air", "fol": "", "prediction": ["all x.(Fog(x) -> (FormedByH2oVaporCondensing(x) & InAir(x)))"]}
{"id": "eqasc_train_246", "nl": "Fog When driving, fog is an obstacle or a hindrance that makes things obscure.", "fol": "", "prediction": ["all x.((Driving(x) & Fog(x)) -> (Obstacle(x) | Hindrance(x)) & MakesObscured(x)))"]}
{"id": "eqasc_train_247", "nl": "hindrances to driving are formed by water vapor condensing in the air", "fol": "", "prediction": ["all x.(HadrancesToDriving(x) -> (WaterVaporCondensing(x) & InAir(x)))"]}
{"id": "eqasc_train_248", "nl": "Fog happens when the water vapor condenses into particles as air temperatures cool.", "fol": "", "prediction": ["all x.(Fog(x) -> (WaterVaporCondensesIntoParticles(x) & AirTemperaturesCool(x)))"]}
{"id": "eqasc_train_249", "nl": "fog is condensed water vapor", "fol": "", "prediction": ["all x.(Fog(x) -> CondensedWaterVapor(x))"]}
{"id": "eqasc_train_250", "nl": "Fog and steam are analogous.", "fol": "", "prediction": ["all x.((Fog(x) & Steam(x)) -> Analogous(x))"]}
{"id": "eqasc_train_251", "nl": "The hotter the water, the denser the fog will be.", "fol": "", "prediction": ["all x.(HotterWater(x) -> DenserFog(x))"]}
{"id": "eqasc_train_252", "nl": "Hot vapor makes the haze denser", "fol": "", "prediction": ["hotvapor(hot) makes the haze denser(haze))"]}
{"id": "eqasc_train_253", "nl": "When air cools, the water vapor in the air condenses.\"", "fol": "", "prediction": ["all x.((AirCools(x) & WaterVapor(x)) -> Condenses(x))"]}
{"id": "eqasc_train_254", "nl": "fog is formed when air cools", "fol": "", "prediction": ["all x.((Fog(x) & CoolsAir(x)) -> FormedWhen(x,y))"]}
{"id": "eqasc_train_255", "nl": "San Francisco for its cultural tolerance and frequent fog.", "fol": "", "prediction": ["all x.((SanFrancisco(x) & CulturalTolerance(x) & FrequentFog(x)) -> Tolerates(x))"]}
{"id": "eqasc_train_256", "nl": "Something found in San Francisco is formed by water vapor condensing in the air", "fol": "", "prediction": ["all x y.((SanFrancisco(x) & SanFrankfort(y)) -> FormedByWaterVaporCondensingInAir(x,y))"]}
{"id": "eqasc_train_257", "nl": "Fog is essentially very low clouds, consisting of water vapor cooling and beginning to condense.", "fol": "", "prediction": ["all x.(Fog(x) -> (LowClouds(x) & WaterVaporCooling(x) & Condenses(x)))"]}
{"id": "eqasc_train_258", "nl": "When water vapors cool down, fog is formed in the air", "fol": "", "prediction": ["all x y.((WaterVapor(x) & Air(y)) -> CoolsDown(x,y))"]}
{"id": "eqasc_train_259", "nl": "when water freezes , that water expands", "fol": "", "prediction": ["all x y z.((Water(x) & Freezes(x) & Water(y) & Water(z)) -> Expands(y,z))"]}
{"id": "eqasc_train_260", "nl": "Water in the rocks pushes out when it freezes thus causing the rocks to break.", "fol": "", "prediction": ["all x y.((Water(x) & Rock(y) & Freezes(x)) -> PushesOut(x,y))"]}
{"id": "eqasc_train_261", "nl": "frozen water breaks rock", "fol": "", "prediction": ["all x y.((FrozenWater(x) & Rock(y)) -> BreaksRock(x,y))"]}
{"id": "eqasc_train_262", "nl": "Water pipes can freeze and burst.", "fol": "", "prediction": ["all x.(WaterPipe(x) -> (Freeze(x) | Burst(x)))"]}
{"id": "eqasc_train_263", "nl": "Water expanding can cause pipes to burst", "fol": "", "prediction": ["all x y.((Water(x) & Pipe(y)) -> Bursts(x,y))"]}
{"id": "eqasc_train_264", "nl": "Water freezes at zero degrees Celsius.", "fol": "", "prediction": ["all x.(Water(x) -> FreezesAtZeroDegreesCelsius(x))"]}
{"id": "eqasc_train_265", "nl": "When water reaches zero degrees Celsius, it expands", "fol": "", "prediction": ["all x.((Water(x) & ZeroDegreesCelsius(x)) -> Expands(x))"]}
{"id": "eqasc_train_266", "nl": "Ice is frozen water.", "fol": "", "prediction": ["all x.(Ice(x) -> FrozenWater(x))"]}
{"id": "eqasc_train_267", "nl": "ice expands", "fol": "", "prediction": ["all x.(Ice(x) -> Expands(x))"]}
{"id": "eqasc_train_268", "nl": "Water freezes into ice when cooled.", "fol": "", "prediction": ["all x.((Water(x) & Cooled(x)) -> FreezesIntoIce(x))"]}
{"id": "eqasc_train_269", "nl": "Water expands when it's cold", "fol": "", "prediction": ["all x.((Water(x) & Cold(x)) -> Expands(x))"]}
{"id": "eqasc_train_270", "nl": "Upon further cooling to 32 degrees Fahrenheit, water expands as it turns to ice.", "fol": "", "prediction": ["all x.((Water(x) & CoolingTo32Degrees(x)) -> ExpandsToIce(x))"]}
{"id": "eqasc_train_271", "nl": "Water freezes into ice under 32 degrees fahrenheit", "fol": "", "prediction": ["all x y.((Water(x) & Ice(y) & Under32Degrees(x,y)) -> FreezesInto(x,y))"]}
{"id": "eqasc_train_272", "nl": "Water density is determined by temperature.", "fol": "", "prediction": ["all x.(WaterDensity(x) -> DeterminedByTemperature(x))"]}
{"id": "eqasc_train_273", "nl": "When something freezes, the density changes.", "fol": "", "prediction": ["all x.((Freezes(x) & DensityChange(x)) -> Changes(x))"]}
{"id": "eqasc_train_274", "nl": "Pipes can burst because water can expand in low temperatures ", "fol": "", "prediction": ["all x y.((Pipe(x) & Water(y) & LowTemperature(z)) -> CanBurst(x))"]}
{"id": "eqasc_train_275", "nl": "Beets tolerate mild freezes.", "fol": "", "prediction": ["all x.(Beet(x) -> ToleratesMildFreezes(x))"]}
{"id": "eqasc_train_276", "nl": "beets tolerate mild water expansions", "fol": "", "prediction": ["all x.(Beet(x) -> ToleratesMildWaterExpansions(x))"]}
{"id": "eqasc_train_277", "nl": "Mollusks have a circulatory system with one or two hearts that pump blood.", "fol": "", "prediction": ["all x.(Mollusk(x) -> (HasCirculatorySystem(x) & (PumpsBlood(x) | PumpsBlood(x))))"]}
{"id": "eqasc_train_278", "nl": "Arthropods and most mollusks have an open circulatory system.", "fol": "", "prediction": ["all x.((Arthropod(x) & Mollusk(x)) -> OpenCirculatorySystem(x))"]}
{"id": "eqasc_train_279", "nl": "arthropods have an open circulatory system", "fol": "", "prediction": ["all x.(Arthropod(x) -> OpenCirculatorySystem(x))"]}
{"id": "eqasc_train_280", "nl": "Interestingly, a squid is also a mollusk.", "fol": "", "prediction": ["all x.(Squid(x) -> Mollusk(x))"]}
{"id": "eqasc_train_281", "nl": "squids have a circulatory system with one or two hearts that pump blood.", "fol": "", "prediction": ["all x.(Squid(x) -> (HasCirculatorySystem(x) & (PumpsBlood(x) | PumpsBlood(x))))"]}
{"id": "eqasc_train_282", "nl": "An abalone is a shellfish or mollusk.", "fol": "", "prediction": ["all x.(Abalone(x) -> (Shellfish(x) | Mollusk(x)))"]}
{"id": "eqasc_train_283", "nl": "shellfish have a circulatory system with one or two hearts that pump blood.", "fol": "", "prediction": ["all x.(Shellfish(x) -> (CirculatorySystem(x) & (Heart(x) | Heart(x)) & PumpsBlood(x))))"]}
{"id": "eqasc_train_284", "nl": "Blood is pumped by the heart into blood vessels called arteries.", "fol": "", "prediction": ["all x y z.((Blood(x) & Heart(y) & BloodVessel(z)) -> PumpedBy(x,y,z))"]}
{"id": "eqasc_train_285", "nl": "Mollusks have a circulatory system with one or two hearts that move blood into vessels called arteries", "fol": "", "prediction": ["all x.(Mollusk(x) -> (HasCirculatorySystem(x) & (HasOneHeart(x) | HasTwoHearts(x)) & MovesBloodIntoVessels(x)))"]}
{"id": "eqasc_train_286", "nl": "A squid has a circulatory system that pumps blood", "fol": "", "prediction": ["all x.(Squid(x) -> (HasCirculatorySystem(x) & PumpsBlood(x)))"]}
{"id": "eqasc_train_287", "nl": "Clams are mollusks that live in the sea or in freshwater.", "fol": "", "prediction": ["all x.(Clam(x) -> (Mollusk(x) & (LivesInSea(x) | LivesInFreshwater(x))))"]}
{"id": "eqasc_train_288", "nl": "clams have a circulatory system with one or two hearts that pump blood", "fol": "", "prediction": ["all x.(Clamm(x) -> (CirculatorySystem(x) & (Heart(x) | Heart(x)) & PumpsBlood(x))))"]}
{"id": "eqasc_train_289", "nl": "abalone have a circulatory system with one or two hearts that pump blood.", "fol": "", "prediction": ["all x.(Abalone(x) -> (CirculatorySystem(x) & (Heart(x) | Heart(x)) & PumpsBlood(x))))"]}
{"id": "eqasc_train_290", "nl": "Mollusks have a simple heart, which pumps the blood throughout the body.", "fol": "", "prediction": ["all x.(Mollusk(x) -> (SimpleHeart(x) & PumpsBlood(x)))"]}
{"id": "eqasc_train_291", "nl": "Mollusks have hearts that circulate blood through the body", "fol": "", "prediction": ["all x.(Mollusk(x) -> (HasHeart(x) & CirculatesBlood(x)))"]}
{"id": "eqasc_train_292", "nl": "mussels have a circulatory system", "fol": "", "prediction": ["all x.(Muschel(x) -> CirculatorySystem(x))"]}
{"id": "eqasc_train_293", "nl": "Squid have a circulatory system with one or two hearts that pump blood.", "fol": "", "prediction": ["all x.(Squid(x) -> (CirculatorySystem(x) & (Heart(x) | Heart(x)) & PumpsBlood(x))))"]}
{"id": "eqasc_train_294", "nl": "mollusks have a simple heart", "fol": "", "prediction": ["all x.(Mollusk(x) -> HasSimpleHeart(x))"]}
{"id": "eqasc_train_295", "nl": "Squids have a circulatory system.", "fol": "", "prediction": ["all x.(Squid(x) -> HasCirculatorySystem(x))"]}
{"id": "eqasc_train_296", "nl": "Clams have a circulatory system with one or two hearts", "fol": "", "prediction": ["all x.(Clam(x) -> (CirculatorySystem(x) & (Heart(x) | Heart(x))))"]}
{"id": "eqasc_train_297", "nl": "smoking causes direct damage to the lungs", "fol": "", "prediction": ["all x.(Smoking(x) -> CausesDirectDamageToLungs(x))"]}
{"id": "eqasc_train_298", "nl": "Smoking is the inhalation and exhalation of the fumes of burning tobacco.", "fol": "", "prediction": ["all x.(Smoking(x) -> (Inhalation(x) & Exhalation(x) & BurningTobacco(x)))"]}
{"id": "eqasc_train_299", "nl": "Inhaling and exhaling fumes of burning tobacco causes direct lung damage.", "fol": "", "prediction": ["all x.((Fumes(x) & Inhales(x) & Exhales(x)) -> CausesDirectLungDamage(x))"]}
{"id": "eqasc_train_300", "nl": "When lung damage is experienced, frequently the total capacity of the respiratory system is reduced.", "fol": "", "prediction": ["all x.((LungDamage(x) & Experienced(x)) -> ReducedCapacity(x))"]}
{"id": "eqasc_train_301", "nl": "Smoking can reduce respiratory system capacity.", "fol": "", "prediction": ["all x.(Smoking(x) -> ReducesRespiratorySystemCapacity(x))"]}
{"id": "eqasc_train_302", "nl": "Smoking causes irreversible lung damage by breaking the air sacs within the lungs.", "fol": "", "prediction": ["all x.(Smoking(x) -> (CausesIrreversibleLungDamage(x) & BreaksAirSacs(x)))"]}
{"id": "eqasc_train_303", "nl": "Smoking causes direct damage to the air sacs. ", "fol": "", "prediction": ["all x.(Smoking(x) -> CausesDirectDamageToAirSacs(x))"]}
{"id": "eqasc_train_304", "nl": "Smoke from cigarettes contains tar, which sticks to the cilia in our lungs.", "fol": "", "prediction": ["all x y.((Smoke(x) & Cigarette(y)) -> (ContainsTar(x,y) & SticksToCilia(x,y)))"]}
{"id": "eqasc_train_305", "nl": "Tar causes damage to the lungs.", "fol": "", "prediction": ["all x.(Tar(x) -> CausesDamageToLungs(x))"]}
{"id": "eqasc_train_306", "nl": "Many people smoke cigarettes.", "fol": "", "prediction": ["exists x.(Person(x) & SmokesCigarettes(x))"]}
{"id": "eqasc_train_307", "nl": "cigarettes cause direct damage to the lungs", "fol": "", "prediction": ["all x y.((Cigarette(x) & Lung(y)) -> CausesDirectDamageTo(x,y))"]}
{"id": "eqasc_train_308", "nl": "Mammals are warm blooded, use lungs for respiration, and have four legs.", "fol": "", "prediction": ["all x.(Mammal(x) -> (WarmBlooded(x) & UsesLungsForRespiration(x) & HasFourLegs(x)))"]}
{"id": "eqasc_train_309", "nl": "Smoking causes damage when respirating.", "fol": "", "prediction": ["all x.(Smoking(x) -> CausesDamageWhenRespiration(x))"]}
{"id": "eqasc_train_310", "nl": "Smoking causes lung cancer.", "fol": "", "prediction": ["all x.(Smoking(x) -> CausesLungCancer(x))"]}
{"id": "eqasc_train_311", "nl": "cancer is caused by smoking", "fol": "", "prediction": ["all x.(Cancer(x) -> CausedBySmoking(x))"]}
{"id": "eqasc_train_312", "nl": "With emphysema, there is permanent lung damage in the alveoli.", "fol": "", "prediction": ["all x.(Emphysema(x) -> PermanentLungDamage(x))"]}
{"id": "eqasc_train_313", "nl": "smoking causes emphysema", "fol": "", "prediction": ["all x.(Smoking(x) -> CausesEmphysema(x))"]}
{"id": "eqasc_train_314", "nl": "Smoking Cigarettes smoking is habit-forming.", "fol": "", "prediction": ["all x.(Smoking(x) -> HabitForming(x))"]}
{"id": "eqasc_train_315", "nl": "cigarettes causes direct damage to the lungs", "fol": "", "prediction": ["all x y.((Cigarette(x) & Lung(y)) -> CausesDirectDamageTo(x,y))"]}
{"id": "eqasc_train_316", "nl": "Cigar smoking is on the rise.", "fol": "", "prediction": ["all x.(CigarSmoking(x) -> OnRise(x))"]}
{"id": "eqasc_train_317", "nl": "cigars cause direct damage to the lungs", "fol": "", "prediction": ["all x.(Cigar(x) -> CausesDirectDamageToLungs(x))"]}
{"id": "eqasc_train_318", "nl": "transportation technology is used for moving people", "fol": "", "prediction": ["all x y.((TransportationTechnology(x) & Person(y)) -> UsedForMoving(x,y))"]}
{"id": "eqasc_train_319", "nl": "Transportation Transportation is by truck and raft.", "fol": "", "prediction": ["all x.(Transportation(x) -> (Trailer(x) | Raft(x)))"]}
{"id": "eqasc_train_320", "nl": "Rafts are used for moving people", "fol": "", "prediction": ["all x.(Raft(x) -> (Movement(x) & Person(x)))"]}
{"id": "eqasc_train_321", "nl": "Transportation technology is built around the vehicle.", "fol": "", "prediction": ["all x y.((TransportationTechnology(x) & Vehicle(y)) -> BuiltAround(x,y))"]}
{"id": "eqasc_train_322", "nl": "vehicles are used for moving people", "fol": "", "prediction": ["all x.(Vehicle(x) -> UsedForMovingPeople(x))"]}
{"id": "eqasc_train_323", "nl": "Bus Bus transportation is nearby.", "fol": "", "prediction": ["all x.(BusBusTransportation(x) -> Nearby(x))"]}
{"id": "eqasc_train_324", "nl": "buses are used for moving people", "fol": "", "prediction": ["all x.(Bus(x) -> (MovingPeople(x) & UsedFor(x,y)))"]}
{"id": "eqasc_train_325", "nl": "Another, more immediately feasible, technology for rapid transport is the maglev train.", "fol": "", "prediction": ["all x.((Technology(x) & MoreImmediatelyFacilitable(x)) -> MaglevTrain(x))"]}
{"id": "eqasc_train_326", "nl": "the maglev train is used for moving people", "fol": "", "prediction": ["all x.(MaglevTrain(x) -> UsedForMovingPeople(x))"]}
{"id": "eqasc_train_327", "nl": "Another mode of transportation is the city bus.", "fol": "", "prediction": ["all x.((Transportation(x) & CityBus(x)) -> Transports(x))"]}
{"id": "eqasc_train_328", "nl": "The city bus is used for moving people.", "fol": "", "prediction": ["all x.(CityBus(x) -> UsedForMovingPeople(x))"]}
{"id": "eqasc_train_329", "nl": "Public Transportation systems move people.", "fol": "", "prediction": ["all x.(PublicTransportation(x) -> MovesPeople(x))"]}
{"id": "eqasc_train_330", "nl": " transportation is used for moving things", "fol": "", "prediction": ["all x y.((Transportation(x) & MovingThings(y)) -> UsedFor(x,y))"]}
{"id": "eqasc_train_331", "nl": "Model rocketry is an exciting way to study transportation technology.", "fol": "", "prediction": ["all x.(ModelRaketry(x) -> ExcitingForTravelTechnology(x))"]}
{"id": "eqasc_train_332", "nl": "Model rocketry can be used to study how people are moved", "fol": "", "prediction": ["all x.(ModelRaketry(x) -> (StudiesMovements(x) & StudiesMovements(x)))"]}
{"id": "eqasc_train_333", "nl": "Kinetic energy is the energy of moving objects.", "fol": "", "prediction": ["all x.(KineticEnergy(x) -> EnergyOfMovingObjects(x))"]}
{"id": "eqasc_train_334", "nl": "transportation technology requires kinetic energy", "fol": "", "prediction": ["all x.(TransportationTechnology(x) -> RequiresKineticEnergy(x))"]}
{"id": "eqasc_train_335", "nl": "Bus transportation can be arranged.", "fol": "", "prediction": ["all x.(BusTransportation(x) -> CanBeAgreed(x))"]}
{"id": "eqasc_train_336", "nl": "Buses are used to move people.", "fol": "", "prediction": ["all x.(Bus(x) -> MovesPeople(x))"]}
{"id": "eqasc_train_337", "nl": "Supersonic transport is a viable means of transportation.", "fol": "", "prediction": ["all x.(SupersonicTransport(x) -> ViableTransportation(x))"]}
{"id": "eqasc_train_338", "nl": "With technology, people can be moved at supersonic speeds", "fol": "", "prediction": ["all x y.((Technology(x) & Person(y)) -> MovedAtSupersonicSpeeds(y,x))"]}
{"id": "eqasc_train_339", "nl": "Busses and trains are excellent modes of transportation.", "fol": "", "prediction": ["all x.((Bus(x) | Train(x)) -> ExcellentModeOfTransportation(x))"]}
{"id": "eqasc_train_340", "nl": "trains are used for moving people", "fol": "", "prediction": ["all x y.((Train(x) & Person(y)) -> UsedForMoving(x,y))"]}
{"id": "eqasc_train_341", "nl": "Technology permits space travel and transportation.", "fol": "", "prediction": ["all x.(Technology(x) -> (PermitsSpaceTravel(x) & PermitsTransportation(x)))"]}
{"id": "eqasc_train_342", "nl": "space travel is used for moving people", "fol": "", "prediction": ["all x y.((SpaceTravel(x) & Person(y)) -> UsedForMoving(x,y))"]}
{"id": "eqasc_train_343", "nl": "Cars can kill people or they can transport people.", "fol": "", "prediction": ["all x.(Car(x) -> (KillsPeople(x) | TransportsPeople(x)))"]}
{"id": "eqasc_train_344", "nl": "Cars are a transportation technology", "fol": "", "prediction": ["all x.(Car(x) -> TransportationTechnology(x))"]}
{"id": "eqasc_train_345", "nl": "Public transportation is a great way to move massive amounts of people from place to place.", "fol": "", "prediction": ["all x.(PublicTransportation(x) -> MovesMassiveAmountsOfPeople(x))"]}
{"id": "eqasc_train_346", "nl": "Public transportation is used to transport large amounts of people", "fol": "", "prediction": ["all x y.((PublicTransportation(x) & LargeAmountsOfPeople(y)) -> Transports(x,y))"]}
{"id": "eqasc_train_347", "nl": "People means human beings.", "fol": "", "prediction": ["all x.(People(x) -> MeansHumanBeings(x))"]}
{"id": "eqasc_train_348", "nl": "Human beings use transportation technology to move around.", "fol": "", "prediction": ["all x.(Human(x) -> UsesTransportationTechnologyToMoveAround(x))"]}
{"id": "eqasc_train_349", "nl": "a ruler is used for measuring the length of an object", "fol": "", "prediction": ["all x y.((Ruler(x) & Object(y)) -> MeasuresLengthOf(x,y))"]}
{"id": "eqasc_train_350", "nl": "Lengths A length is a measure of distance.", "fol": "", "prediction": ["all x.(Length(x) -> MeasuresDistance(x))"]}
{"id": "eqasc_train_351", "nl": "a ruler is used for measuring  distance.", "fol": "", "prediction": ["all x.(Ruler(x) -> UsedForMeasuringDistance(x))"]}
{"id": "eqasc_train_352", "nl": "Rulers are divided into inches and fractions of inches.", "fol": "", "prediction": ["all x.(Ruler(x) -> (DividedIntoInches(x) & DividedIntoFractionsOfInches(x)))"]}
{"id": "eqasc_train_353", "nl": "Length is measured in inches", "fol": "", "prediction": ["all x.(Length(x) -> MeasuredInInches(x))"]}
{"id": "eqasc_train_354", "nl": "Length indicates the buffer's size.", "fol": "", "prediction": ["all x.(Length(x) -> IndicatesBufferSize(x))"]}
{"id": "eqasc_train_355", "nl": "A ruler is used for indicating the object's size.", "fol": "", "prediction": ["all x.(Ruler(x) -> IndicatesSize(x))"]}
{"id": "eqasc_train_356", "nl": "The length of an object can be measured in inches or fractions of inches.", "fol": "", "prediction": ["all x.(Length(x) -> (MeasuredInInches(x) | MeasuredInFractionsOfInches(x)))"]}
{"id": "eqasc_train_357", "nl": "Meters are the standard to express measurement of length.", "fol": "", "prediction": ["all x.(Meter(x) -> ExpressesLengthMeasurement(x))"]}
{"id": "eqasc_train_358", "nl": "A ruler can be used to measure something in meters.", "fol": "", "prediction": ["all x.(Ruler(x) -> MeasuresInMeters(x))"]}
{"id": "eqasc_train_359", "nl": "Length Rope lengths are measured in meters.", "fol": "", "prediction": ["Length RopeLengthsMeasuredInMeters(rope)"]}
{"id": "eqasc_train_360", "nl": "a ruler can measure an object's meters", "fol": "", "prediction": ["all x y.((Ruler(x) & Object(y)) -> MeasuresMeters(x,y))"]}
{"id": "eqasc_train_361", "nl": "You can measure the length of an object with inches and fractions of inches", "fol": "", "prediction": ["all x y.((Object(x) & Inches(y) & FractionsOfInches(x,y)) -> MeasuresLength(x,y))"]}
{"id": "eqasc_train_362", "nl": "Perimeter is the total length around the object.", "fol": "", "prediction": ["all x.(Perimeter(x) -> TotalLengthAroundObject(x))"]}
{"id": "eqasc_train_363", "nl": "A ruler is used for measuring the perimeter of an object.", "fol": "", "prediction": ["all x y.((Ruler(x) & Object(y)) -> MeasuresPerimeter(x,y))"]}
{"id": "eqasc_train_364", "nl": "With another ruler, measure the length of the shadow.", "fol": "", "prediction": ["all x.((Ruler(x) & MeasureLengthOfShadow(x)) -> MeasureLengthOfShadow(x))"]}
{"id": "eqasc_train_365", "nl": "a shadow can be measured by a ruler", "fol": "", "prediction": ["all x y.((Shadow(x) & Ruler(y)) -> MeasuresBy(x,y))"]}
{"id": "eqasc_train_366", "nl": "Adult tunicates are barrel-shaped.", "fol": "", "prediction": ["all x.(Tunicate(x) -> BarrelShape(x))"]}
{"id": "eqasc_train_367", "nl": "Tunicates differ strongly in appearance between the adult and larva.", "fol": "", "prediction": ["all x.(Tunicat(x) -> (DifferentAppearance(x,adult) & DifferentAppearance(x,larva)))"]}
{"id": "eqasc_train_368", "nl": "Tunicates differ strongly in appearance and are barrel shaped.", "fol": "", "prediction": ["all x.(Tunicat(x) -> (DifferentAppearance(x) & BarrelShape(x)))"]}
{"id": "eqasc_train_369", "nl": "Tunicates, or sea squirts, are marine organisms covered with a gelatinous tunic.", "fol": "", "prediction": ["all x.(Tunicat(x) -> (MarineOrganism(x) & CoveredWithGelatinousTunica(x)))"]}
{"id": "eqasc_train_370", "nl": "sea squirts are barrel-shaped", "fol": "", "prediction": ["all x.(SeaSquirt(x) -> (BarrelShaped(x) & BarrelShaped(x)))"]}
{"id": "eqasc_train_371", "nl": "adult sea squirts are barrel-shaped", "fol": "", "prediction": ["all x.(AdultSeaSquirt(x) -> (BarrelShaped(x) & BarrelShaped(x)))"]}
{"id": "eqasc_train_372", "nl": "Sea squirts are the best known tunicates.", "fol": "", "prediction": ["all x.(SeaSquirt(x) -> BestKnownTunicate(x))"]}
{"id": "eqasc_train_373", "nl": "Bluebell tunicates are really pretty.", "fol": "", "prediction": ["all x.(BluebellTunicate(x) -> Pretty(x))"]}
{"id": "eqasc_train_374", "nl": "Bluebells are barrel-shaped", "fol": "", "prediction": ["all x.(Bluebell(x) -> (BarrelShaped(x) & BarrelShaped(x)))"]}
{"id": "eqasc_train_375", "nl": "Tulip bulbs are tunicated.", "fol": "", "prediction": ["all x.(TulipBulb(x) -> Tunicated(x))"]}
{"id": "eqasc_train_376", "nl": "Adult tulip bulbs are barrel-shaped", "fol": "", "prediction": ["all x.(TulipBulb(x) -> (BarrelShaped(x) & HasBarrelShape(x)))"]}
{"id": "eqasc_train_377", "nl": "Bulbs are classifies as tunicate or non-tunicate.", "fol": "", "prediction": ["all x.(Bulbs(x) -> (Tunicate(x) | NonTunicate(x)))"]}
{"id": "eqasc_train_378", "nl": "Bulbs can be classified as barrel-shaped", "fol": "", "prediction": ["all x.(Bulbs(x) -> (BarrelShaped(x) | BarrelShaped(x)))"]}
{"id": "eqasc_train_379", "nl": "Urochordates are commonly called tunicates.", "fol": "", "prediction": ["all x.(Urochordate(x) -> Tunicate(x))"]}
{"id": "eqasc_train_380", "nl": "Adult urochordates are barrel-shaped.", "fol": "", "prediction": ["all x.(Urochordate(x) -> BarrelShape(x))"]}
{"id": "eqasc_train_381", "nl": "pollination requires pollinators", "fol": "", "prediction": ["all x y.((Pollination(x) & Pollinator(y)) -> Requires(x,y))"]}
{"id": "eqasc_train_382", "nl": "Pollination Bee pollination is essential for a bountiful cranberry harvest.", "fol": "", "prediction": ["all x.(BeePollination(x) -> BountifulCranberryHarvest(x))"]}
{"id": "eqasc_train_383", "nl": "cranberry harvests require the presence of bees", "fol": "", "prediction": ["all x.(CranberryHill(x) -> RequiresBees(x))"]}
{"id": "eqasc_train_384", "nl": "Bees are usually required for effective pollen transfer.", "fol": "", "prediction": ["all x.(Bee(x) -> RequiresPollenTransfer(x))"]}
{"id": "eqasc_train_385", "nl": "bees pollinate", "fol": "", "prediction": ["all x.(Bee(x) -> Pollinates(x))"]}
{"id": "eqasc_train_386", "nl": "Bees are an essential requirement for cranberry production.", "fol": "", "prediction": ["all x.(Bee(x) -> EssentialRequirementForCranberryProduction(x))"]}
{"id": "eqasc_train_387", "nl": "Requirements See Needs .", "fol": "", "prediction": ["All x.(Requirements(x) -> SeeNeeds(x))"]}
{"id": "eqasc_train_388", "nl": "pollination needs pollinators", "fol": "", "prediction": ["all x y.((Pollination(x) & Pollinator(y)) -> Needs(x,y))"]}
{"id": "eqasc_train_389", "nl": "Bees are effective pollinators.", "fol": "", "prediction": ["all x.(Bee(x) -> EffectivePollinators(x))"]}
{"id": "eqasc_train_390", "nl": "Bees are required for spreading flower seeds in an effective manner.", "fol": "", "prediction": ["all x.(Bee(x) -> (RequiredForSpreadingFlowerSeeds(x) & Effective(x)))"]}
{"id": "eqasc_train_391", "nl": "Most plants are either insect pollinated or wind pollinated.", "fol": "", "prediction": ["all x.(Plant(x) -> (InsectPollinated(x) | WindPollinated(x)))"]}
{"id": "eqasc_train_392", "nl": "Most plants require either insects or wind.", "fol": "", "prediction": ["all x.(Plant(x) -> (RequiresInsects(x) | RequiresWind(x)))"]}
{"id": "eqasc_train_393", "nl": "Several plant species require flooding for seeding establishment.", "fol": "", "prediction": ["exists x.(PlantSpecies(x) & RequiresFlooding(x))"]}
{"id": "eqasc_train_394", "nl": "Several plant species pollinate through flooding.", "fol": "", "prediction": ["exists x.(PlantSpecies(x) & PollinatesThroughFlooding(x))"]}
{"id": "eqasc_train_395", "nl": "wind can be a requirement for plants to reproduce", "fol": "", "prediction": ["all x y.((Wind(x) & Plant(y)) -> RequirementForReproduction(x,y))"]}
{"id": "eqasc_train_396", "nl": "Insects pollinate flowers.", "fol": "", "prediction": ["all x.(Insect(x) -> PollinatesFlowers(x))"]}
{"id": "eqasc_train_397", "nl": "Flowers require insects.", "fol": "", "prediction": ["all x.(Flower(x) -> RequiresInsects(x))"]}
{"id": "eqasc_train_398", "nl": "TRH stimulates the pituitary gland to produce thyroid-stimulating hormone, or TSH.", "fol": "", "prediction": ["all x.(TRH(x) -> (StimulatesPituitaryGlands(x) & ProducesThyroidStimulatingHormone(x)))"]}
{"id": "eqasc_train_399", "nl": "Prolactin release is stimulated by TRH, the same hormone that stimulates TSH release.", "fol": "", "prediction": ["all x.(ProlactinRelease(x) -> StimulatesThroatHydrogen(x))"]}
{"id": "eqasc_train_400", "nl": "TRH stimulates prolactin release", "fol": "", "prediction": ["all x.(TRH(x) -> StimulatesProlactinRelease(x))"]}
{"id": "eqasc_train_401", "nl": "Thyroid hormone stimulates the metabolic activity for growth and development.", "fol": "", "prediction": ["all x.(ThyroidHydrogen(x) -> StimulatesMetabolicActivity(x))"]}
{"id": "eqasc_train_402", "nl": "TRH stimulates the pituitary gland to produce growth", "fol": "", "prediction": ["all x y.((TRH(x) & PituitaryGlands(y)) -> StimulatesToProduceGrowth(x,y))"]}
{"id": "eqasc_train_403", "nl": "Thyroid hormones regulate the metabolic rate in the body.", "fol": "", "prediction": ["all x.(ThyroidHormone(x) -> RegulatesMetabolicRate(x))"]}
{"id": "eqasc_train_404", "nl": "The pituitary gland regulates the metabolic rate in the body", "fol": "", "prediction": ["all x y.((PituitaryGlands(x) & Body(y)) -> RegulatesMetabolicRate(x,y))"]}
{"id": "eqasc_train_405", "nl": "Hypothyroidism is associated with an increased TSH level.", "fol": "", "prediction": ["all x.(Hypothyroidism(x) -> IncreasedTSHLevel(x))"]}
{"id": "eqasc_train_406", "nl": "Higher TRH stimulation is associated with hypothyroidism", "fol": "", "prediction": ["all x.(HigherTRHStimulation(x) -> Hypothyroidism(x))"]}
{"id": "eqasc_train_407", "nl": "Pituitary gland is called the master gland of the body.", "fol": "", "prediction": ["all x.(PituitaryGlands(x) -> MasterGlandsOfBody(x))"]}
{"id": "eqasc_train_408", "nl": "The master gland of the body produces TSH or thyroid-stimulating hormone", "fol": "", "prediction": ["all x.(MasterGlandsOfBody(x) -> (ProducesThyroidStimulatingHormone(x) | ProducesThyroidStimulatingHormone(x)))"]}
{"id": "eqasc_train_409", "nl": "TRH synthesis is regulated directly by thyroid hormones.", "fol": "", "prediction": ["all x.(ThyroidHormone(x) -> RegulatesTRHSynthesis(x))"]}
{"id": "eqasc_train_410", "nl": "TSH is regulated by the pituitary gland", "fol": "", "prediction": ["all x.(TSH(x) -> RegulatesByPituitaryGlands(x))"]}
{"id": "eqasc_train_411", "nl": "Low TSH levels occur in hyperthyroidism.", "fol": "", "prediction": ["all x.((Hyperthyroidism(x) & LowTSHLevels(x)) -> OccursIn(x,Hyperthyroidism))"]}
{"id": "eqasc_train_412", "nl": "Hyperthyroidism is caused by less production of thyroid-stimulating hormone", "fol": "", "prediction": ["all x.(Hyperthyroidism(x) -> (LessProductionOfThyroidStimulatingHydrogen(x) & LessThyroidStimulatingHydrogen(x)))"]}
{"id": "eqasc_train_413", "nl": "Prolactin release is stimulated by the pituitary gland to produce thyroid-stimulating hormone", "fol": "", "prediction": ["all x y.((ProlactinRelease(x) & PituitaryGlands(y)) -> StimulatesToProduceThyroidStimulatingHydrogen(x,y))"]}
{"id": "eqasc_train_414", "nl": "Another function of TSH is to maintain the structural integrity of the thyroid gland.", "fol": "", "prediction": ["all x.(ThyroidGlen(x) -> MaintainsStructuralIntegrity(x))"]}
{"id": "eqasc_train_415", "nl": "TRH stimulates the pituitary gland to maintain structural integrity of the thyroid.", "fol": "", "prediction": ["all x.(Thyroid(x) -> StimulatesPituitaryGlands(x))"]}
{"id": "eqasc_train_416", "nl": "plant reproduction often requires pollen", "fol": "", "prediction": ["all x.(PlantReproduction(x) -> RequiresPollen(x))"]}
{"id": "eqasc_train_417", "nl": "Honeybees and other bees transfer the pollen.", "fol": "", "prediction": ["all x.((Honeybee(x) | Bee(x)) -> TransfersPollen(x))"]}
{"id": "eqasc_train_418", "nl": "Plant reproduction often requires honeybees. ", "fol": "", "prediction": ["all x.(PlantReproduction(x) -> RequiresHoneybees(x))"]}
{"id": "eqasc_train_419", "nl": "Bees carry pollen from one plant to another when they collect both nectar and pollen.", "fol": "", "prediction": ["all x y z.((Bee(x) & Plant(y) & Plant(z) & CollectsNectar(x,y) & CollectsPollen(x,z)) -> CarriesPollen(x,y,z))"]}
{"id": "eqasc_train_420", "nl": "plant reproduction often requires bees", "fol": "", "prediction": ["all x.(PlantReproduction(x) -> RequiresBees(x))"]}
{"id": "eqasc_train_421", "nl": "Pollens originate from plants.", "fol": "", "prediction": ["all x.(Pollen(x) -> OriginatesFromPlants(x))"]}
{"id": "eqasc_train_422", "nl": "reproduction requires pollen", "fol": "", "prediction": ["all x.(ReproductionRequiresPollen(x) -> RequiresPollen(x))"]}
{"id": "eqasc_train_423", "nl": "Hay fever or pollen allergy is the most prevalent allergy.", "fol": "", "prediction": ["all x.((HayFever(x) | PollenAllergy(x)) -> MostPrevalentAllergy(x))"]}
{"id": "eqasc_train_424", "nl": "Plant reproduction often requires something that causes allergies", "fol": "", "prediction": ["all x y.((PlantReproduction(x) & Plant(y)) -> (Requires(x,y) & CausesAllergies(x)))"]}
{"id": "eqasc_train_425", "nl": "plant reproduction often requires something that causes allergies", "fol": "", "prediction": ["all x y.((PlantReproduction(x) & PlantReproduction(y)) -> (Requires(x,y) & CausesAllergies(x)))"]}
{"id": "eqasc_train_426", "nl": "Bees feed on nectar and pollen.", "fol": "", "prediction": ["all x.(Bee(x) -> (FeedsOnNectar(x) & FeedsOnPollen(x)))"]}
{"id": "eqasc_train_427", "nl": "Plant reproduction often requires bees and nectar.", "fol": "", "prediction": ["all x.(PlantReproduction(x) -> (RequiresBees(x) & RequiresNectar(x)))"]}
{"id": "eqasc_train_428", "nl": "Ferns are vascular plants.", "fol": "", "prediction": ["all x.(Fern(x) -> VascularPlant(x))"]}
{"id": "eqasc_train_429", "nl": "fern reproduction often requires pollen", "fol": "", "prediction": ["all x.(FernReproduction(x) -> RequiresPollen(x))"]}
{"id": "eqasc_train_430", "nl": "Hay fever is caused by an allergy to pollens or moulds.", "fol": "", "prediction": ["all x.(HayFever(x) -> (AllergicToPollens(x) | AllergicToMolds(x)))"]}
{"id": "eqasc_train_431", "nl": "Hay fever is caused by plant reproduction", "fol": "", "prediction": ["all x.(HayFever(x) -> (CausedByPlantReproduction(x) & PlantReproduction(x)))"]}
{"id": "eqasc_train_432", "nl": "Insects are required for the transfer of pollen.", "fol": "", "prediction": ["all x.(Insect(x) -> RequiresForPollenTransfer(x))"]}
{"id": "eqasc_train_433", "nl": "plant reproduction requires insects", "fol": "", "prediction": ["all x.(PlantReproduction(x) -> RequiresInsects(x))"]}
{"id": "eqasc_train_434", "nl": "Pollen grains contain the male gametes in sexually reproducing plants.", "fol": "", "prediction": ["all x.(PollenGrain(x) -> ContainsMaleGametes(x))"]}
{"id": "eqasc_train_435", "nl": "Plant reproduction often requires gametes.", "fol": "", "prediction": ["all x.(PlantReproduction(x) -> RequiresGametes(x))"]}
{"id": "eqasc_train_436", "nl": "smoking tobacco decreases stamina", "fol": "", "prediction": ["all x.(SmokingTobacco(x) -> DecreasesStamina(x))"]}
{"id": "eqasc_train_437", "nl": "Decreased stamina or stunted growth are two important signs that a murmur is significant.", "fol": "", "prediction": ["all x.((Murmur(x) & (DecreasedStamina(x) | StuntedGrowth(x))) -> Significant(x))"]}
{"id": "eqasc_train_438", "nl": "Smoking tobacco can cause a murmur.", "fol": "", "prediction": ["all x.(SmokingTobacco(x) -> CausesMurmur(x))"]}
{"id": "eqasc_train_439", "nl": "An added benefit is increased stamina and aerobic capacity.", "fol": "", "prediction": ["all x.(AddedBenefit(x) -> (IncreasedStamina(x) & IncreasedAerobicCapacity(x)))"]}
{"id": "eqasc_train_440", "nl": "smoking tobacco decreases aerobic capacity", "fol": "", "prediction": ["all x.(SmokingTobacco(x) -> DecreasesAerobicCapacity(x))"]}
{"id": "eqasc_train_441", "nl": "Athletes possess physical stamina.", "fol": "", "prediction": ["all x.(Athlete(x) -> PhysicalStamina(x))"]}
{"id": "eqasc_train_442", "nl": "smoking harms athletes", "fol": "", "prediction": ["all x.(Smoking(x) -> HarmsAthletes(x))"]}
{"id": "eqasc_train_443", "nl": "Tobacco companies make cigarettes.", "fol": "", "prediction": ["all x.(TobaccoCompany(x) -> MakesCigarettes(x))"]}
{"id": "eqasc_train_444", "nl": "smoking cigarettes decreases stamina", "fol": "", "prediction": ["all x.(SmokingCigarettes(x) -> DecreasesStamina(x))"]}
{"id": "eqasc_train_445", "nl": "Athletes use it to promote stamina and endurance.", "fol": "", "prediction": ["all x.(Athlete(x) -> (PromotesStamina(x) & PromotesEndurance(x)))"]}
{"id": "eqasc_train_446", "nl": "smoking tobacco decreases athletic ability", "fol": "", "prediction": ["all x.(SmokingTobacco(x) -> DecreasesAthleticAbility(x))"]}
{"id": "eqasc_train_447", "nl": "Tobacco is smoked in pipes or in cigarettes or bidis.", "fol": "", "prediction": ["all x.(Tobacco(x) -> (SmokedInPipes(x) | SmokedInCigarettes(x) | SmokedInBidis(x)))"]}
{"id": "eqasc_train_448", "nl": "Smoking pipes decreases stamina", "fol": "", "prediction": ["all x.(SmokingPipes(x) -> DecreasesStamina(x))"]}
{"id": "eqasc_train_449", "nl": "All smoke is harmful to the lungs.", "fol": "", "prediction": ["all x.(Smoke(x) -> HarmfulToLungs(x))"]}
{"id": "eqasc_train_450", "nl": "tobacco is harmful to lungs", "fol": "", "prediction": ["all x.(Tobacco(x) -> HarmfulToLungs(x))"]}
{"id": "eqasc_train_451", "nl": "Tobacco is grown for cigarette factories.", "fol": "", "prediction": ["all x.(Tobacco(x) -> GrownForCigaretteFactories(x))"]}
{"id": "eqasc_train_452", "nl": "Smoking cigarettes decreases stamina.", "fol": "", "prediction": ["all x.(SmokingCigarettes(x) -> DecreasesStamina(x))"]}
{"id": "eqasc_train_453", "nl": "Good cigars or quality cigars contain only tobacco.", "fol": "", "prediction": ["all x.((GoodCigar(x) | QualityCigar(x)) -> ContainsTobacco(x))"]}
{"id": "eqasc_train_454", "nl": "smoking cigars decreases stamina", "fol": "", "prediction": ["all x.(SmokingCigars(x) -> DecreasesStamina(x))"]}
{"id": "eqasc_train_455", "nl": "Manual dexterity and physical stamina are vital.", "fol": "", "prediction": ["all x.((ManualDexterity(x) & PhysicalStamina(x)) -> Vital(x))"]}
{"id": "eqasc_train_456", "nl": "smoking tobacco decreases manual dexterity", "fol": "", "prediction": ["all x.(SmokingTobacco(x) -> DecreasesManualDexterity(x))"]}
{"id": "eqasc_train_457", "nl": "Low-grade anemia can develop and lead to fatigue, decreased stamina and worse.", "fol": "", "prediction": ["all x.(LowGradeAnemia(x) -> (Develops(x) & LeadsToFatigue(x) & DecreasedStamina(x) & Worst(x)))"]}
{"id": "eqasc_train_458", "nl": "Smoking tobacco may cause low-grade anemia resulting in low stamina.", "fol": "", "prediction": ["all x.(SmokingTobacco(x) -> (LowGradeAnemia(x) & LowStamina(x)))"]}
{"id": "eqasc_train_459", "nl": "cigarettes decrease stamina", "fol": "", "prediction": ["all x.(Cigarette(x) -> DecreasesStamina(x))"]}
{"id": "eqasc_train_460", "nl": "Breathing someone else's tobacco smoke can be seriously harmful to one's health.", "fol": "", "prediction": ["all x y.((TobaccoSmoke(x) & Breathing(x,y)) -> HarmfulToHealth(y))"]}
{"id": "eqasc_train_461", "nl": "secondhand smoke decreases stamina", "fol": "", "prediction": ["all x.(SecondhandSmoke(x) -> DecreasesStamina(x))"]}
{"id": "eqasc_train_462", "nl": "Energy levels go up with high stamina and decreased recovery time from fatigue.", "fol": "", "prediction": ["all x.((EnergyLevel(x) & HighStamina(x) & DecreasedRecoveryTimeFromFatigue(x)) -> GoesUp(x))"]}
{"id": "eqasc_train_463", "nl": "Smoking tobacco increases the time to recover from fatigue", "fol": "", "prediction": ["all x y.((SmokingTobacco(x) & Fatigue(y)) -> IncreasesTimeToRecoverFrom(x,y))"]}
{"id": "eqasc_train_464", "nl": "Tobacco is most commonly smoked in cigarettes.", "fol": "", "prediction": ["all x.(Tobacco(x) -> SmokedInCigarettes(x))"]}
{"id": "eqasc_train_465", "nl": "Cigarettes decrease stamina", "fol": "", "prediction": ["all x.(Cigarette(x) -> DecreasesStamina(x))"]}
{"id": "eqasc_train_466", "nl": "Tobacco Consumption Most of the tobacco is consumed in the form of cigarettes.", "fol": "", "prediction": ["all x.(TobaccoConsumption(x) -> (ConsumedInCigarettes(x) & -ConsumedInCigarettes(x)))"]}
{"id": "eqasc_train_467", "nl": "Tobacco includes cigarettes, cigars, chewing tobacco, and more.", "fol": "", "prediction": ["all x.(Tobacco(x) -> (IncludesCigarettes(x) | IncludesCigars(x) | IncludesChoosingTobacco(x)))"]}
{"id": "eqasc_train_468", "nl": "an image in a mirror is formed by reflecting light", "fol": "", "prediction": ["all x y.((Image(x) & Mirror(y) & ReflectsLight(x,y)) -> FormedByReflectingLight(x,y))"]}
{"id": "eqasc_train_469", "nl": "Light is all our eyes can really see.", "fol": "", "prediction": ["all x.(Light(x) -> AllEyesCanSee(x))"]}
{"id": "eqasc_train_470", "nl": "mirrors can be seen with our eyes", "fol": "", "prediction": ["all x.(Mirror(x) -> CanBeSeenWithEyes(x))"]}
{"id": "eqasc_train_471", "nl": "Light is made of photons .", "fol": "", "prediction": ["all x.(Light(x) -> MadeOfPhotons(x))"]}
{"id": "eqasc_train_472", "nl": "an image in a mirror is formed by reflecting photons", "fol": "", "prediction": ["all x y.((Image(x) & Mirror(y) & ReflectsPhotons(x,y)) -> FormedByReflectingPhotons(x,y))"]}
{"id": "eqasc_train_473", "nl": "Water is essentially a perfect mirror, reflecting colors almost unchanged.", "fol": "", "prediction": ["all x.(Water(x) -> (PerfectMirror(x) & ReflectsColorsUnchanged(x)))"]}
{"id": "eqasc_train_474", "nl": "an image in water is formed by reflecting light", "fol": "", "prediction": ["all x y.((Image(x) & Water(y)) -> FormedByReflectingLight(x,y))"]}
{"id": "eqasc_train_475", "nl": "Light seems to travel in rays or beams.", "fol": "", "prediction": ["all x.(Light(x) -> (TravelsInRails(x) | TravelsInBeams(x)))"]}
{"id": "eqasc_train_476", "nl": "an image in a mirror is formed by reflecting rays or beams", "fol": "", "prediction": ["all x y.((Image(x) & Mirror(y)) -> (FormedByReflectingRaysOrBeams(x,y)))"]}
{"id": "eqasc_train_477", "nl": "Reflectance is the ratio of light out to light in.", "fol": "", "prediction": ["all x.(Reflectance(x) -> (LightOut(x) & LightIn(x)))"]}
{"id": "eqasc_train_478", "nl": "An image in a mirror is formed by the ratio of light out to light in.", "fol": "", "prediction": ["all x y.((Image(x) & Mirror(y)) -> (FormedByRatioOfLightOutToLightIn(x,y)))"]}
{"id": "eqasc_train_479", "nl": "Reflection is the bouncing of light off of a reflective surface, such as a mirror.", "fol": "", "prediction": ["all x y.((Reflection(x) & ReflectiveSurface(y)) -> BouncingOfLightOff(x,y))"]}
{"id": "eqasc_train_480", "nl": "An image in a reflection is formed by light bouncing off of a surface", "fol": "", "prediction": ["all x y.((Image(x) & Reflection(y)) -> (FormedByLightBbouncingOffSurface(x,y)))"]}
{"id": "eqasc_train_481", "nl": "Light is the visible form of electromagnetic energy.", "fol": "", "prediction": ["all x.(Light(x) -> VisibleElectromagneticEnergy(x))"]}
{"id": "eqasc_train_482", "nl": "An image in a mirror is formed by reflecting electromagnetic energy.", "fol": "", "prediction": ["all x y.((Image(x) & Mirror(y)) -> FormedByReflectingElectromagneticEnergy(x,y))"]}
{"id": "eqasc_train_483", "nl": "Indirect light is refracted or reflected light.", "fol": "", "prediction": ["all x.(IndirectLight(x) -> (RefractedLight(x) | ReflectedLight(x)))"]}
{"id": "eqasc_train_484", "nl": "a mirror image is formed by indirect light", "fol": "", "prediction": ["all x y.((MirrorImage(x) & IndirectLight(y)) -> FormedBy(x,y))"]}
{"id": "eqasc_train_485", "nl": "Mirrors in telescopes reflect light waves.", "fol": "", "prediction": ["all x.((Mirror(x) & Telescope(x)) -> ReflectsLightWaves(x))"]}
{"id": "eqasc_train_486", "nl": "waves are reflected by a mirror", "fol": "", "prediction": ["all x y.((Waves(x) & Mirror(y)) -> ReflectedBy(x,y))"]}
{"id": "eqasc_train_487", "nl": "if seeds stick to the fur of an animal then that seed will be transported by the animal", "fol": "", "prediction": ["all x y.((Seed(x) & Animal(y) & SticksToFur(x,y)) -> TransportedBy(x,y))"]}
{"id": "eqasc_train_488", "nl": "Seed is disseminated by transport on animal hides.", "fol": "", "prediction": ["all x y.((Seed(x) & AnimalHunt(y)) -> DisseminatedByTransport(x,y))"]}
{"id": "eqasc_train_489", "nl": "Seeds are disseminated by sticking to the fur of an animal.", "fol": "", "prediction": ["all x y.((Seed(x) & Animal(y)) -> DisseminatedByStickingToFur(x,y))"]}
{"id": "eqasc_train_490", "nl": "Gelatinous coating helps seeds stick to fur and clothing when wet.", "fol": "", "prediction": ["all x y.((GelatinousCoating(x) & Wet(y)) -> HelpsSeedsStickToFurAndClothing(x,y))"]}
{"id": "eqasc_train_491", "nl": "A gelatinous coating can help seeds be transported by animals.", "fol": "", "prediction": ["all x.(GelatinousCoating(x) -> HelpsTransportSeeds(x))"]}
{"id": "eqasc_train_492", "nl": "Mangoes are propagated vegetatively and by seeds.", "fol": "", "prediction": ["all x.(Mango(x) -> (PropagatedVegetatively(x) & BySeeds(x)))"]}
{"id": "eqasc_train_493", "nl": "animals propagate mangoes", "fol": "", "prediction": ["all x y.((Animal(x) & Mango(y)) -> Propagates(x,y))"]}
{"id": "eqasc_train_494", "nl": "Seed pods and seeds can be transported by floodwater or eaten by animals and spread in their manure.", "fol": "", "prediction": ["all x y.((SeedPod(x) & Seed(y)) -> (TransportedByFloodwater(x) | EatenByAnimals(x) & SpreadInManure(x)))"]}
{"id": "eqasc_train_495", "nl": "Seeds stuck to animal fur can spread.", "fol": "", "prediction": ["all x.((Seed(x) & StuckToAnimalFur(x)) -> CanSpread(x))"]}
{"id": "eqasc_train_496", "nl": "Rabbits' brown summer fur is replaced with fur that is greyer.", "fol": "", "prediction": ["all x.(Rabbit(x) -> (BrownSummerFur(x) & GreyerFur(x)))"]}
{"id": "eqasc_train_497", "nl": "If seeds stick to a rabbit then that seed will be transported by the animal", "fol": "", "prediction": ["all x y.((Seed(x) & Rabbit(y) & SticksTo(x,y)) -> TransportedBy(x,y))"]}
{"id": "eqasc_train_498", "nl": "Burrs and some other seeds have tiny barbs that hook on to cat fur.", "fol": "", "prediction": ["all x.((Burrs(x) | OtherSeeds(x)) -> (HasTinyBars(x) & HooksOnToCatFur(x)))"]}
{"id": "eqasc_train_499", "nl": "if burrs stick to the fur of an animal then burrs will be transported by the animal", "fol": "", "prediction": ["all x y.((Burr(x) & Animal(y) & SticksToFur(x,y)) -> BurrsTransportedBy(x,y))"]}
{"id": "eqasc_train_500", "nl": "if seeds stick to the fur of an mammal then that seed will be transported by the mammal", "fol": "", "prediction": ["all x y.((Seed(x) & Mammal(y) & SticksToFur(x,y)) -> MammalTransportsSeed(x,y))"]}
{"id": "eqasc_train_501", "nl": "Along with the wind, birds are the primary transporters of berries and seed.", "fol": "", "prediction": ["all x y.((Bird(x) & Wind(y)) -> (MainTransporterOfBerries(x,y) & PrimaryTransporterOfSeeds(x,y)))"]}
{"id": "eqasc_train_502", "nl": "Birds can carry seeds in their feathers", "fol": "", "prediction": ["all x.(Bird(x) -> (CarriesSeedsInFeathers(x) | CarriesSeedsInFeathers(x)))"]}
{"id": "eqasc_train_503", "nl": "Most plants grow from seeds.", "fol": "", "prediction": ["all x.(Plant(x) -> GrowsFromSeeds(x))"]}
{"id": "eqasc_train_504", "nl": "animal fur can help plants grow", "fol": "", "prediction": ["all x y.((AnimalFur(x) & Plant(y)) -> CanHelpGrow(x,y))"]}
{"id": "eqasc_train_505", "nl": "Budgerigars crack the seed, eat the kernel, and leave the husk.", "fol": "", "prediction": ["all x.(Budgerigar(x) -> (CracksSeed(x) & EatsKernel(x) & LeavesHusk(x)))"]}
{"id": "eqasc_train_506", "nl": "If something with a kernel sticks to the fur of an animal then it will be transported by the animal", "fol": "", "prediction": ["all x y.((Kernel(x) & Animal(y) & SticksToFur(x,y)) -> TransportedBy(x,y))"]}
{"id": "eqasc_train_507", "nl": "Animals with fur can also help trees disperse their seeds.", "fol": "", "prediction": ["all x.((Animal(x) & HasFur(x)) -> HelpsTreesDisperseSeeds(x))"]}
{"id": "eqasc_train_508", "nl": "animal fur can help tree dispersion ", "fol": "", "prediction": ["all x.(AnimalFur(x) -> HelpsTreeDispersion(x))"]}
{"id": "eqasc_train_509", "nl": "condensation is when change from a gas into a liquid by reducing heat energy", "fol": "", "prediction": ["all x y.((Condensation(x) & Gas(y) & Liquid(y)) -> ChangesByReducingHeatEnergy(x,y))"]}
{"id": "eqasc_train_510", "nl": "Clouds form by the condensation of water vapor.", "fol": "", "prediction": ["all x.(Cloud(x) -> (CondensationOfWaterVapor(x) & FormsBy(x,WaterVapor)))"]}
{"id": "eqasc_train_511", "nl": "Water vapor is formed when gas changes into a liquid by reducing heat energy", "fol": "", "prediction": ["all x y.((WaterVapor(x) & Gas(y) & ChangesIntoLiquid(y,x)) -> ReducesHeatEnergy(x))"]}
{"id": "eqasc_train_512", "nl": "Heat is kinetic energy.", "fol": "", "prediction": ["all x.(Heat(x) -> KineticEnergy(x))"]}
{"id": "eqasc_train_513", "nl": "condensation is when change from a gas into a liquid by reducing kinetic energy", "fol": "", "prediction": ["all x y.((Condensation(x) & Gas(y) & Liquid(y)) -> ChangesByReducingKineticEnergy(x,y))"]}
{"id": "eqasc_train_514", "nl": "Condensation is water from the air.", "fol": "", "prediction": ["all x.(Condensation(x) -> WaterFromAir(x))"]}
{"id": "eqasc_train_515", "nl": "water changes from gas in the air to liquid by reducing heat energy", "fol": "", "prediction": ["all x y z.((Water(x) & Gas(y) & Air(z)) -> ChangesToLiquid(x,y,z))"]}
{"id": "eqasc_train_516", "nl": "Condensation is the reverse of vaporization , or change from liquid to gas.", "fol": "", "prediction": ["all x.(Condensation(x) -> (ReverseOfVaporization(x) | ChangeFromLiquidToGas(x)))"]}
{"id": "eqasc_train_517", "nl": "Vaporization occurs when heat energy increases", "fol": "", "prediction": ["all x y.((HeatEnergy(x) & HeatEnergy(y)) -> Vaporization(x))"]}
{"id": "eqasc_train_518", "nl": "The opposite of vaporization creates condensation by reducing heat energy.", "fol": "", "prediction": ["all x.(Vaporization(x) -> CreatesCondensation(x))"]}
{"id": "eqasc_train_519", "nl": "water from the air is when it changes from gas into a liquid by reducing heat energy", "fol": "", "prediction": ["all x y.((Water(x) & Air(y) & Gas(y) & ReducesHeatEnergy(x,y)) -> ChangesToLiquid(x))"]}
{"id": "eqasc_train_520", "nl": "Condensing is a gas turning into a liquid.", "fol": "", "prediction": ["all x.(Condensing(x) -> (Gas(x) & TurnsIntoLiquid(x)))"]}
{"id": "eqasc_train_521", "nl": "gas condenses when heat is reduced", "fol": "", "prediction": ["all x y.((GasCondenser(x) & HeatReduced(y)) -> Condenses(x,y))"]}
{"id": "eqasc_train_522", "nl": "Evaporation absorbs heat and condensation releases heat.", "fol": "", "prediction": ["all x y.((Evaporation(x) & Condensation(y)) -> (AbsorbsHeat(x) & ReleasesHeat(y)))"]}
{"id": "eqasc_train_523", "nl": "evaporation absorbs heat", "fol": "", "prediction": ["all x y.((Evaporation(x) & Heat(y)) -> Absorbs(x,y))"]}
{"id": "eqasc_train_524", "nl": "Light energy is converted into heat energy.", "fol": "", "prediction": ["all x.(LightEnergy(x) -> ConvertedToHeatEnergy(x))"]}
{"id": "eqasc_train_525", "nl": "Decreasing the amount of light results in cooler temperatures and more condensation.", "fol": "", "prediction": ["all x.(DecreasingLight(x) -> (CoolerTemperatures(x) & MoreCondensation(x)))"]}
{"id": "eqasc_train_526", "nl": "All temperatures are measures of heat energy.", "fol": "", "prediction": ["all x.(Temperature(x) -> HeatEnergyMeasure(x))"]}
{"id": "eqasc_train_527", "nl": "condensation is when something changes from a gas into a liquid by reducing what is measured in temperature", "fol": "", "prediction": ["all x y z.((Condensation(x) & Gas(y) & Liquid(z)) -> (ChangesFromTo(x,y,z) & ReducesTemperature(x)))"]}
{"id": "eqasc_train_528", "nl": "a solution is formed by one substance being dissolved in another substance", "fol": "", "prediction": ["all x y z.((Solution(x) & Substance(y) & Substance(z) & DissolvedIn(y,z)) -> FormedBy(x,y,z))"]}
{"id": "eqasc_train_529", "nl": "Solvents are substances, usually liquid, that dissolve other substances.", "fol": "", "prediction": ["all x.(Solvent(x) -> (Substance(x) & Liquid(x) & DissolvesSubstances(x)))"]}
{"id": "eqasc_train_530", "nl": "Solutions are formed when solvents are dissolved.", "fol": "", "prediction": ["all x.(Solution(x) -> DissolvedSolvents(x))"]}
{"id": "eqasc_train_531", "nl": "Water acts as the solvent and the dissolved substances act as the solutes.", "fol": "", "prediction": ["all x y.((Water(x) & DissolvedSubstance(y)) -> (AsSolvent(x) & AsSolute(y)))"]}
{"id": "eqasc_train_532", "nl": "a solution is formed by solutes being dissolved in solvents", "fol": "", "prediction": ["all x y z.((Solution(x) & Solute(y) & Solvent(z)) -> FormedBy(x,y,z))"]}
{"id": "eqasc_train_533", "nl": "Another dissolved substance in ocean water is a type of rock called limestone .", "fol": "", "prediction": ["all x.((DissolvedSubstance(x) & OceanWater(x)) -> (Limestone(x)))"]}
{"id": "eqasc_train_534", "nl": "A solution is formed when limestone is dissolved in ocean water.", "fol": "", "prediction": ["all x.((Limestone(x) & DissolvedInOceanWater(x)) -> FormedSolution(x))"]}
{"id": "eqasc_train_535", "nl": "Salinity refers to salts dissolved in water.", "fol": "", "prediction": ["all x.(Salinity(x) -> (SaltsDissolvedInWater(x)))"]}
{"id": "eqasc_train_536", "nl": "A saline solution is made by adding salt to water.", "fol": "", "prediction": ["all x.(SalineSolution(x) -> AddsSaltToWater(x))"]}
{"id": "eqasc_train_537", "nl": "Homogeneous mixtures are called solutions.", "fol": "", "prediction": ["all x.(HomogeneousMixture(x) -> Solution(x))"]}
{"id": "eqasc_train_538", "nl": "A homogenous mixture is formed when one substance dissolves in another.", "fol": "", "prediction": ["all x y.((Substance(x) & Substance(y) & DissolvesIn(x,y)) -> HomogenousMixture(x))"]}
{"id": "eqasc_train_539", "nl": "Most substances can exist as a solid, liquid or gas.", "fol": "", "prediction": ["all x.(Substance(x) -> (existsAsSolid(x) | ExistsAsLiquid(x) | ExistsAsGas(x)))"]}
{"id": "eqasc_train_540", "nl": "a solution is formed by a solid, liquid, or gas being dissolved in another solid, liquid, or gas", "fol": "", "prediction": ["all x y z.((Solution(x) & Solid(y) & Liquid(z) & Gas(y) & Solid(z) & Liquid(z)) -> FormedBy(x,y,z))"]}
{"id": "eqasc_train_541", "nl": "A solution is formed when a solvent dissolves a solute", "fol": "", "prediction": ["all x y z.((Solvent(x) & Solvent(y) & Solute(z) & Dissolves(y,z)) -> Formed(x))"]}
{"id": "eqasc_train_542", "nl": "White vinegar is a 5 percent acetic acid solution.", "fol": "", "prediction": ["all x.(WhiteVincent(x) -> 5PercentAcidSolution(x))"]}
{"id": "eqasc_train_543", "nl": "White vinegar is formed by one substance being dissolved in another substance.", "fol": "", "prediction": ["all x y.((WhiteVincent(x) & Substance(y)) -> FormedBy(x,y))"]}
{"id": "eqasc_train_544", "nl": "An unsaturated solution is a dilute solution.", "fol": "", "prediction": ["all x.(UnsaturatedSolution(x) -> DiluteSolution(x))"]}
{"id": "eqasc_train_545", "nl": "Dilution is when two substances are dissolved.", "fol": "", "prediction": ["all x.(Dilution(x) -> exists y.(Substance(y) & Dissolved(x,y)))"]}
{"id": "eqasc_train_546", "nl": "Carbon cycles quickly between organisms and the atmosphere.", "fol": "", "prediction": ["all x y.((Carbon(x) & Organism(y) & Atmosphere(y)) -> CyclesQuickly(x,y))"]}
{"id": "eqasc_train_547", "nl": "Carbon is an essential component of all living organisms.", "fol": "", "prediction": ["all x.(Carbon(x) -> EssentialComponentOfLivingOrganisms(x))"]}
{"id": "eqasc_train_548", "nl": "the atmosphere is essential to all living organisms", "fol": "", "prediction": ["all x.((Atmosphere(x) & LivingOrganism(x)) -> EssentialTo(x,livingOrganisms))"]}
{"id": "eqasc_train_549", "nl": "Deforestation also disrupts the Carbon Cycle.", "fol": "", "prediction": ["all x.(Deforestation(x) -> DisruptsCarbonCycle(x))"]}
{"id": "eqasc_train_550", "nl": "Deforestation disrupts the cycle between organisms and the atmosphere.", "fol": "", "prediction": ["all x y.((Deforestation(x) & Organism(y)) -> DisruptsCycle(x,y))"]}
{"id": "eqasc_train_551", "nl": "Atmosphere is the blanket of air around the earth.", "fol": "", "prediction": ["all x.(Atmosphere(x) -> BlankOfAirAroundEarth(x))"]}
{"id": "eqasc_train_552", "nl": "Carbon cycles quickly between organisms and the blanket of air around the earth.", "fol": "", "prediction": ["all x y z.((Carbon(x) & Organism(y) & BlankOfAir(z)) -> CyclesQuickly(x,y,z))"]}
{"id": "eqasc_train_553", "nl": "deforestation disrupts organisms and the atmosphere", "fol": "", "prediction": ["all x y z.((Deforestation(x) & Organism(y) & Atmosphere(z)) -> (Disrupts(x,y) & Disrupts(x,z)))"]}
{"id": "eqasc_train_554", "nl": "Water, carbon dioxide, and nitrogen are all needed by living things.", "fol": "", "prediction": ["all x.((LivingThing(x) & NeedsWater(x) & NeedsCarbonDioxide(x) & NeedsNitrogen(x)) -> NeededBy(x,livingThing))"]}
{"id": "eqasc_train_555", "nl": "the atmosphere is needed by living things", "fol": "", "prediction": ["all x y.((Atmosphere(x) & LivingThing(y)) -> NeededBy(x,y))"]}
{"id": "eqasc_train_556", "nl": "Carbon dioxide is controlled by the carbon cycle.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> ControlledByCarbonCycle(x))"]}
{"id": "eqasc_train_557", "nl": "Carbon dioxide is controlled between organisms and the atmosphere", "fol": "", "prediction": ["all x y z.((Organism(x) & Atmosphere(y) & CarbonDioxide(z)) -> ControlledBetween(x,z))"]}
{"id": "eqasc_train_558", "nl": "An organic molecule is one involving carbon.", "fol": "", "prediction": ["all x.(OrganicMolecule(x) -> InvolvesCarbon(x))"]}
{"id": "eqasc_train_559", "nl": "organic molecules cycle quickly between organisms and the atmosphere", "fol": "", "prediction": ["all x y z.((OrganicMolecule(x) & Organism(y) & Atmosphere(z)) -> CyclesRapidly(x,y,z))"]}
{"id": "eqasc_train_560", "nl": "Carbon dioxide is controled by the carbon circle and is transferred between organisms and atmosphere", "fol": "", "prediction": ["all x y z.((CarbonDioxide(x) & Organism(y) & Atmosphere(z)) -> (ControledByCarbonCircle(x) & TransferredBetween(x,y,z)))"]}
{"id": "eqasc_train_561", "nl": "competition may cause animals to fight towards members of their own species", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> (CausesAnimalsToFight(x,y) & MembersOfOwnSpecies(y)))"]}
{"id": "eqasc_train_562", "nl": "Competition between male animals is common in nature.", "fol": "", "prediction": ["all x.(MaleAnimal(x) -> CommonInNature(x))"]}
{"id": "eqasc_train_563", "nl": "males fight their own species", "fol": "", "prediction": ["all x y.((Male(x) & Male(y)) -> FightsOwnSpecies(x,y))"]}
{"id": "eqasc_train_564", "nl": "Mock fights also teach animals to interact with others of their species.", "fol": "", "prediction": ["all x y.((MockFight(x) & Animal(y)) -> (TeachesInteraction(x,y) & InteractsWith(x,y)))"]}
{"id": "eqasc_train_565", "nl": "Competition may cause animals to interact with other animals of their species.", "fol": "", "prediction": ["all x y.((Competition(x) & Animal(y)) -> Interacts(x,y))"]}
{"id": "eqasc_train_566", "nl": "By nature, gorillas fight for domination of resources.", "fol": "", "prediction": ["all x.(Gorilla(x) -> (FightsForDomination(x) & Resources(x)))"]}
{"id": "eqasc_train_567", "nl": "competition may cause gorillas to dominate resources", "fol": "", "prediction": ["all x y.((Competition(x) & Gorilla(y)) -> MayDominateResources(x,y))"]}
{"id": "eqasc_train_568", "nl": "Humans are animals too.", "fol": "", "prediction": ["all x.(Human(x) -> Animal(x))"]}
{"id": "eqasc_train_569", "nl": "competition may cause humans to fight each other", "fol": "", "prediction": ["all x y.((Human(x) & Human(y)) -> (ChallengesFight(x,y) & CausesFight(x,y)))"]}
{"id": "eqasc_train_570", "nl": "When habitat is healthy, many animals can compete for resources and still coexist.", "fol": "", "prediction": ["all x.((Habitat(x) & Healthy(x)) -> (CompeteForResources(x) & Coexist(x)))"]}
{"id": "eqasc_train_571", "nl": "Competing for resources may cause fighting within a species.", "fol": "", "prediction": ["all x y.((Species(x) & CompetesForResources(x,y)) -> MayCauseFighting(x,y))"]}
{"id": "eqasc_train_572", "nl": "Competition Animals compete for food and shelter.", "fol": "", "prediction": ["all x.(Competition(x) -> (CompeteForFood(x) & CompeteForShelter(x)))"]}
{"id": "eqasc_train_573", "nl": "food and shelter may cause animals to fight towards members of their own species", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> (FightsTowards(x,y) | (FightsTowards(y,x) | Against(y,x)))))"]}
{"id": "eqasc_train_574", "nl": "Lions are members of the 'Panthera leo' species.", "fol": "", "prediction": ["all x.(Lion(x) -> (PantheraLeo(x) & MemberOfSpecies(x)))"]}
{"id": "eqasc_train_575", "nl": "Competition may cause lions to fight other lions.", "fol": "", "prediction": ["all x y.((Lion(x) & Lion(y)) -> (CausesFight(x,y) | CausesFight(x,y)))"]}
{"id": "eqasc_train_576", "nl": "Species is a property of genus, genus is a property of family, etc.", "fol": "", "prediction": ["all x y z.((Species(x) & Genus(y) & Family(z)) -> (PropertyOf(x,y) & PropertyOf(x,z)))"]}
{"id": "eqasc_train_577", "nl": "competition may cause animals to fight towards members of a property of genus", "fol": "", "prediction": ["all x y.((Competition(x) & Animal(y)) -> (CausesFight(y,x) & MembersOfGenusProperty(y,x)))"]}
{"id": "eqasc_train_578", "nl": "Competition for nest sites can be fierce and fighting is common.", "fol": "", "prediction": ["all x.(NestSite(x) -> (Fierce(x) & CommonFighting(x)))"]}
{"id": "eqasc_train_579", "nl": "fierce fighting for nest sites may cause animals to fight towards members of their own species", "fol": "", "prediction": ["all x y.((FierceFightingForNestSites(x) & Animal(y)) -> (FightsTowardsMemberOfOwnSpecies(y) & MembersOfOwnSpecies(y)))"]}
{"id": "eqasc_train_580", "nl": "Competition is fierce and resources are scarce.", "fol": "", "prediction": ["all x.((Competition(x) & ResourceScarce(x)) -> (Fierce(x) & Scarce(x)))"]}
{"id": "eqasc_train_581", "nl": "scarce resources may cause animals to fight towards members of their own species", "fol": "", "prediction": ["all x y.((SharpResources(x) & Animal(y)) -> (FightsTowardsMembersOfOwnSpecies(y,x) | Animal(y,x)))"]}
{"id": "eqasc_train_582", "nl": "Viruses are so small that they can be seen only with an electron microscope.", "fol": "", "prediction": ["all x.(Virus(x) -> (Small(x) & CanBeSeenWithElectronMicroscope(x)))"]}
{"id": "eqasc_train_583", "nl": "Where most viruses are DNA, HIV is an RNA virus.", "fol": "", "prediction": ["all x.((Virus(x) & DNA(x)) -> RNAVirus(x))"]}
{"id": "eqasc_train_584", "nl": "HIV is so small it can only be seen with an electron microscope", "fol": "", "prediction": ["all x.((HIV(x) & Small(x)) -> CanBeSeenWithElectronMicroscope(x))"]}
{"id": "eqasc_train_585", "nl": "Once the camera is tuned with the microscope, the focusing depends on the microscope lens.", "fol": "", "prediction": ["all x y.((Camera(x) & Microscope(y) & TunedWith(x,y)) -> FocusesOn(x,y))"]}
{"id": "eqasc_train_586", "nl": "Viruses are so small that they can be seen by focusing a lens", "fol": "", "prediction": ["all x.(Virus(x) -> (Small(x) & CanBeSeenByFocusingLens(x)))"]}
{"id": "eqasc_train_587", "nl": "Electron microscopes are needed to see viruses.", "fol": "", "prediction": ["all x.(ElectronMicroscope(x) -> NeededToSeeViruses(x))"]}
{"id": "eqasc_train_588", "nl": "viruses can only be seen with a microscope", "fol": "", "prediction": ["all x.(Virus(x) -> (CanBeSeenWithMicroscope(x) & -CanBeSeenWithMicroscope(x)))"]}
{"id": "eqasc_train_589", "nl": "Electron microscope is developed in Germany.", "fol": "", "prediction": ["all x.(ElectronMicroscope(x) -> DevelopedInGermany(x))"]}
{"id": "eqasc_train_590", "nl": "viruses are so small that they can be seen only with a device developed in germany.", "fol": "", "prediction": ["all x.(Virus(x) -> (Small(x) & CanBeSeenWithDevice(x) & DevelopedInGermany(x)))"]}
{"id": "eqasc_train_591", "nl": "Objects to be viewed are illuminated by electrons in an electron microscope.", "fol": "", "prediction": ["all x y.((Object(x) & Electron(y) & IlluminatedBy(x,y)) -> ElectronMicroscope(x))"]}
{"id": "eqasc_train_592", "nl": "Viruses are viewed by illuminating electrons. ", "fol": "", "prediction": ["all x.(Virus(x) -> IlluminatesElectrons(x))"]}
{"id": "eqasc_train_593", "nl": "Viruses Viruses are very small, a few nanometers in size.", "fol": "", "prediction": ["all x.(Virus(x) -> (Small(x) & NanometerSize(x)))"]}
{"id": "eqasc_train_594", "nl": "Objects that are only a few nanometers in size can be seen only with an electron microscope.", "fol": "", "prediction": ["all x.((Object(x) & NanometerSize(x)) -> CanBeSeenWithElectronMicroscope(x))"]}
{"id": "eqasc_train_595", "nl": "Some smallpox viruses are maintained in laboratories.", "fol": "", "prediction": ["exists x.(SmallpoxVirus(x) & MaintainedInLaboratory(x))"]}
{"id": "eqasc_train_596", "nl": "smallpox is so small that it can be seen only with an electron microscope", "fol": "", "prediction": ["all x.(SmallPox(x) -> (Small(x) & CanBeSeenWithElectronMicroscope(x)))"]}
{"id": "eqasc_train_597", "nl": "Viruses are studied by radiography and use of the electron microscope.", "fol": "", "prediction": ["all x.(Virus(x) -> (StudiesByRadiography(x) & UsesElectronMicroscope(x)))"]}
{"id": "eqasc_train_598", "nl": "radiography is used to study viruses", "fol": "", "prediction": ["all x y.((Radiography(x) & Viral(y)) -> UsedToStudy(x,y))"]}
{"id": "eqasc_train_599", "nl": "On the surface of each microscopic color filter is also a microscopic lens.", "fol": "", "prediction": ["all x.(MicroscopeColorFilter(x) -> MicroscopicLens(x))"]}
{"id": "eqasc_train_600", "nl": "Viruses are so small that they can be seen only with an electron lens.", "fol": "", "prediction": ["all x.(Virus(x) -> (Small(x) & CanBeSeenWithElectronLens(x)))"]}
{"id": "eqasc_train_601", "nl": "Viruses include the Tobacco Mosaic Virus.", "fol": "", "prediction": ["all x.(Virus(x) -> TobaccoMosaicVirus(x))"]}
{"id": "eqasc_train_602", "nl": "Tobacco Mosaic is so small that it can only be seen with an electron microscope.", "fol": "", "prediction": ["all x.(TobaccoMosaic(x) -> (Small(x) & CanBeSeenWithElectronMicroscope(x)))"]}
{"id": "eqasc_train_603", "nl": "waxy leaves are used for storing water by some plants", "fol": "", "prediction": ["all x y.((Plant(x) & Plant(y)) -> (WaxyLeaves(x) & UsedForStoringWater(x,y)))"]}
{"id": "eqasc_train_604", "nl": "Waxy leaves keep the plant from drying out.", "fol": "", "prediction": ["all x.(WaxyLeaves(x) -> KeepsPlantFromDryingOut(x))"]}
{"id": "eqasc_train_605", "nl": "Leaves that keep the plant from drying out are used for storing water by some plants", "fol": "", "prediction": ["all x y.((Leaves(x) & Plant(y) & KeepsFromDryingOut(x,y)) -> UsedForStoringWater(x,y))"]}
{"id": "eqasc_train_606", "nl": "Leaves are slightly waxy and prevent drying in our semi-arid climate.", "fol": "", "prediction": ["all x.(Leaves(x) -> (Waxy(x) & PreventsDrying(x)))"]}
{"id": "eqasc_train_607", "nl": "semi-arid climates have plants that are able to store water", "fol": "", "prediction": ["all x.(SemiAridClimate(x) -> (PlantsStoreWater(x) & StoreWater(x)))"]}
{"id": "eqasc_train_608", "nl": "Plants have many adaptations for conserving water or storing it.", "fol": "", "prediction": ["all x.(Plant(x) -> (HasAdaptations(x) & (ConservesWater(x) | StoresWater(x))))"]}
{"id": "eqasc_train_609", "nl": "waxy leaves are used for water conservation by some plants", "fol": "", "prediction": ["all x y.((Plant(x) & Plant(y)) -> (WaxyLeaves(x) & WaterConservation(y)))"]}
{"id": "eqasc_train_610", "nl": "Kalanchoes are known for their waxy, thick, dark green leaves.", "fol": "", "prediction": ["all x.(Kalanchoe(x) -> (WaxyLeaves(x) & ThickLeaves(x) & DarkGreenLeaves(x)))"]}
{"id": "eqasc_train_611", "nl": "kalenchoes use their leaves to store water", "fol": "", "prediction": ["all x.(Kalenchoe(x) -> UsesLeavesToStoreWater(x))"]}
{"id": "eqasc_train_612", "nl": "Leaves are long, oval and waxy.", "fol": "", "prediction": ["all x.(Leaves(x) -> (Long(x) & Oval(x) & Waxy(x)))"]}
{"id": "eqasc_train_613", "nl": "leaves are used to store water", "fol": "", "prediction": ["all x.(Leaves(x) -> StoresWater(x))"]}
{"id": "eqasc_train_614", "nl": "Many cacti also have a waxy coating that helps the plant conserve moisture in desert climates.", "fol": "", "prediction": ["all x.(Cactus(x) -> (WaxyCoating(x) & HelpsPlantConserveMoisture(x) & DesertClimate(x)))"]}
{"id": "eqasc_train_615", "nl": "cacti store water with waxy leaves", "fol": "", "prediction": ["all x.(Cactus(x) -> (StoresWater(x) & WaxyLeaves(x)))"]}
{"id": "eqasc_train_616", "nl": "Orchids often have fleshy pods and waxy leaves which can store water.", "fol": "", "prediction": ["all x.(Orchid(x) -> (FleshyPods(x) & WaxyLeaves(x) & StoresWater(x)))"]}
{"id": "eqasc_train_617", "nl": "Orchids keep water in their leaves. ", "fol": "", "prediction": ["all x.(Orchid(x) -> KeepsWaterInLeaves(x))"]}
{"id": "eqasc_train_618", "nl": "Bromeliads are a group of plants that have stiff, waxy leaves that form a cup-shaped body.", "fol": "", "prediction": ["all x.(Bromeliad(x) -> (GroupOfPlants(x) & StiffWaxyLeaves(x) & CupShapedBody(x)))"]}
{"id": "eqasc_train_619", "nl": "Bromeliads store water in their waxy leaves", "fol": "", "prediction": ["all x.(Bromeliad(x) -> StoresWaterInWaxyLeaves(x))"]}
{"id": "eqasc_train_620", "nl": "Leaves are covered with a waxy layer, the cuticle , which prevents water loss.", "fol": "", "prediction": ["all x.(Leaves(x) -> (WaxyLayer(x) & Cuticle(x) & PreventsWaterLoss(x)))"]}
{"id": "eqasc_train_621", "nl": "Leaves are covered with a cuticle which are used to store water in plants.", "fol": "", "prediction": ["all x y.((Leaves(x) & Cuticle(y)) -> (CoveredWith(x,y) & StoresWaterInPlants(x)))"]}
{"id": "eqasc_train_622", "nl": "All chemical reactions require activation energy to get started.", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> RequiresActivationEnergy(x))"]}
{"id": "eqasc_train_623", "nl": "Activation energy is the initial input of energy required to get the reaction started.", "fol": "", "prediction": ["all x.(ActivationEnergy(x) -> (InputEnergy(x) & ReactionStarted(x)))"]}
{"id": "eqasc_train_624", "nl": "All chemical reactions require the initial input of energy to get the reaction started", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> RequiresInitialEnergyInput(x))"]}
{"id": "eqasc_train_625", "nl": "Activation energy is required to overcome the energy barrier.", "fol": "", "prediction": ["all x.(ActivationEnergy(x) -> OvercomesEnergyBarrier(x))"]}
{"id": "eqasc_train_626", "nl": "overcoming the energy barrier starts a chemical reaction", "fol": "", "prediction": ["all x.((OvercomingEnergyBarrier(x) & ChemicalReaction(x)) -> Starts(x,ChemicalReaction))"]}
{"id": "eqasc_train_627", "nl": "Fire is a chemical reaction.", "fol": "", "prediction": ["all x.(Fire(x) -> ChemicalReaction(x))"]}
{"id": "eqasc_train_628", "nl": "Fire requires activation energy to get started.", "fol": "", "prediction": ["all x.(Fire(x) -> RequiresActivationEnergy(x))"]}
{"id": "eqasc_train_629", "nl": "fires require activation energy to get started", "fol": "", "prediction": ["all x.(Fire(x) -> RequiresActivationEnergy(x))"]}
{"id": "eqasc_train_630", "nl": "Basically, heat is energy.", "fol": "", "prediction": ["all x.(Heat(x) -> Energy(x))"]}
{"id": "eqasc_train_631", "nl": "All chemical reactions require heat to get started.", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> RequiresHeat(x))"]}
{"id": "eqasc_train_632", "nl": "Chemical changes are referred to as a chemical reaction.", "fol": "", "prediction": ["all x.(ChemicalChange(x) -> ChemicalReaction(x))"]}
{"id": "eqasc_train_633", "nl": "Chemical changes require activation energy to get started", "fol": "", "prediction": ["all x.(ChemicalChange(x) -> RequiresActivationEnergy(x))"]}
{"id": "eqasc_train_634", "nl": "Chemical changes are a result of chemical reactions.", "fol": "", "prediction": ["all x.(ChemicalChange(x) -> ChemicalReaction(x))"]}
{"id": "eqasc_train_635", "nl": "Activation energy must be used before a chemical change happens.", "fol": "", "prediction": ["all x.(ActivationEnergy(x) -> ChemicalChange(x))"]}
{"id": "eqasc_train_636", "nl": "All chemical reactions must first overcome the energy barrier.", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> OvercomesEnergyBarrier(x))"]}
{"id": "eqasc_train_637", "nl": "Enzymes are catalysts and accordingly, speed up reactions by decreasing the activation energy.", "fol": "", "prediction": ["all x.(Enzyme(x) -> (Catalyst(x) & SpeedUpReactions(x) & DecreaseActivationEnergy(x)))"]}
{"id": "eqasc_train_638", "nl": "Enzymes makes chemicals reactions easier to get started", "fol": "", "prediction": ["all x.(Enzyme(x) -> MakesChemicalReactionsEasierToGetStarted(x))"]}
{"id": "eqasc_train_639", "nl": "Catalysts lower the activation energy for reactions.", "fol": "", "prediction": ["all x.(Catalyst(x) -> LowersActivationEnergy(x))"]}
{"id": "eqasc_train_640", "nl": "Catalysts help chemical reactions to get started.", "fol": "", "prediction": ["all x.(Catalyst(x) -> HelpsChemicalReactionsToGetStarted(x))"]}
{"id": "eqasc_train_641", "nl": "Catalysts lower the activation energy.", "fol": "", "prediction": ["all x.(Catalyst(x) -> LowersActivationEnergy(x))"]}
{"id": "eqasc_train_642", "nl": "A catalyst can lower the energy cost of a chemical reaction.", "fol": "", "prediction": ["all x y.((Catalyst(x) & ChemicalReaction(y)) -> LowersEnergyCost(x,y))"]}
{"id": "eqasc_train_643", "nl": "All chemical changes require activation energy to occur.", "fol": "", "prediction": ["all x.(ChemicalChange(x) -> RequiresActivationEnergy(x))"]}
{"id": "eqasc_train_644", "nl": "Chemical equations describe chemical reactions.", "fol": "", "prediction": ["all x.(ChemicalEquation(x) -> DefinesChemicalReactions(x))"]}
{"id": "eqasc_train_645", "nl": "Chemical equations describe something that requires activation energy to get started.", "fol": "", "prediction": ["all x.(ChemicalEquation(x) -> (DepictsActivationEnergy(x) & RequiresActivationEnergy(x)))"]}
{"id": "eqasc_train_646", "nl": "Catalysts lower the input required for chemical reactions to get started", "fol": "", "prediction": ["all x y.((Catalyst(x) & ChemicalReaction(y)) -> LowersInput(x,y))"]}
{"id": "eqasc_train_647", "nl": "Amphibians are the first true tetrapods, or vertebrates with four limbs.", "fol": "", "prediction": ["all x.(Amphibian(x) -> (TrueTetrapod(x) | VertebratesWithFourLimbs(x)))"]}
{"id": "eqasc_train_648", "nl": "Ancathostega is one of the earliest tetrapods found, and by far the most complete.", "fol": "", "prediction": ["all x.(Tetrapod(x) -> (OfOldest(x) & MostComplete(x)))"]}
{"id": "eqasc_train_649", "nl": "Ancathostegs have four limbs", "fol": "", "prediction": ["all x.(Ancathosteg(x) -> HasFourLimbs(x))"]}
{"id": "eqasc_train_650", "nl": "All vertebrates more advanced than fish have four limbs, each with up to five fingers or toes.", "fol": "", "prediction": ["all x.((Vertebrate(x) & MoreAdvancedThanFish(x)) -> (HasFourLimbs(x) & HasUpToFiveFingersOrToes(x)))"]}
{"id": "eqasc_train_651", "nl": "Amphibians with four limbs are more advanced than fish.", "fol": "", "prediction": ["all x y.((Amphibian(x) & Fish(y) & HasFourLimbs(x)) -> MoreAdvanced(x,y))"]}
{"id": "eqasc_train_652", "nl": "Bullfrogs eat other amphibians.", "fol": "", "prediction": ["all x.(Bullfrog(x) -> EatsAmphibians(x))"]}
{"id": "eqasc_train_653", "nl": "Bullfrogs are of the class of creatures that were the first true tetrapods.", "fol": "", "prediction": ["all x.(Bullfrog(x) -> (Creature(x) & TrueTetrapod(x)))"]}
{"id": "eqasc_train_654", "nl": "Frogs are classified as amphibians.", "fol": "", "prediction": ["all x.(Frog(x) -> Amphibian(x))"]}
{"id": "eqasc_train_655", "nl": "Frogs are tetrapods.", "fol": "", "prediction": ["all x.(Frog(x) -> Tetrapod(x))"]}
{"id": "eqasc_train_656", "nl": "All frogs are amphibians.", "fol": "", "prediction": ["all x.(Frog(x) -> Amphibian(x))"]}
{"id": "eqasc_train_657", "nl": "frogs are vertebrates with four limbs", "fol": "", "prediction": ["all x.(Frog(x) -> (Vertebrate(x) & FourLimbs(x)))"]}
{"id": "eqasc_train_658", "nl": "Frogs are amphibians and ducks are aves.", "fol": "", "prediction": ["(all x.(Frog(x) -> Amphibian(x)) & all y.(Duck(y) -> Aes(y)))"]}
{"id": "eqasc_train_659", "nl": "Frogs are the first true tetrapods, or vertebrates with four limbs", "fol": "", "prediction": ["all x.(Frog(x) -> (TrueTetrapod(x) | VertebratesWithFourLimbs(x)))"]}
{"id": "eqasc_train_660", "nl": "Animals with backbones are called vertebrates.", "fol": "", "prediction": ["all x.((Animal(x) & HasBackbone(x)) -> Vertebrate(x))"]}
{"id": "eqasc_train_661", "nl": "amphibians are the first true animals with backbones with four limbs", "fol": "", "prediction": ["all x.(Amphibian(x) -> (FirstTrueAnimal(x) & HasBackbones(x,4) & HasFourLimbs(x)))"]}
{"id": "eqasc_train_662", "nl": "Modern classifications of the tetrapods rely on the structure of the skull .", "fol": "", "prediction": ["all x y.((Tetrapod(x) & Skull(y)) -> ReliesOnStructure(x,y))"]}
{"id": "eqasc_train_663", "nl": "amphibians are classified based on their skull", "fol": "", "prediction": ["all x.(Amphibian(x) -> (ClassifiedBySkull(x) & BasedOnSkull(x)))"]}
{"id": "eqasc_train_664", "nl": "Tetrapod classification Tetrapods are monophyletic.", "fol": "", "prediction": ["all x.(Tetrapod(x) -> Monophyletic(x))"]}
{"id": "eqasc_train_665", "nl": "Amphibians are monophyletic with four limbs", "fol": "", "prediction": ["all x.(Amphibian(x) -> (Monophyletic(x) & FourLimbs(x)))"]}
{"id": "eqasc_train_666", "nl": "Animals in the frog family are the first true tetrapods.", "fol": "", "prediction": ["all x.((Animal(x) & FrogFamily(x)) -> TrueTetrapod(x))"]}
{"id": "eqasc_train_667", "nl": "if an object reflects light toward the eye then that object can be seen", "fol": "", "prediction": ["all x y.((Object(x) & ReflectsLightTowardsEye(x)) -> CanBeSeen(x,y))"]}
{"id": "eqasc_train_668", "nl": "Without light there is nothing to connect the eye to the object.", "fol": "", "prediction": ["all x.((Eye(x) & -Light(x)) -> -ConnectsToObject(x))"]}
{"id": "eqasc_train_669", "nl": "Without light there is no object that can be seen", "fol": "", "prediction": ["all x.((Object(x) & -Light(x)) -> -CanBeSeen(x))"]}
{"id": "eqasc_train_670", "nl": "Mirrors reflect light.", "fol": "", "prediction": ["all x.(Mirror(x) -> ReflectsLight(x))"]}
{"id": "eqasc_train_671", "nl": "mirrors reflect objects towards the eye", "fol": "", "prediction": ["all x y.((Mirror(x) & Object(y)) -> ReflectsTowardsEye(x,y))"]}
{"id": "eqasc_train_672", "nl": "Eyes detect light, organized into images that fall on the retina.", "fol": "", "prediction": ["all x.(Eyes(x) -> (DetectsLight(x) & OrganizedIntoImages(x) & FallOnRetina(x)))"]}
{"id": "eqasc_train_673", "nl": "An object is seen because light and images fall on the retina", "fol": "", "prediction": ["all x y.((Object(x) & Light(y) & Images(z) & FallOnRetina(x,y,z)) -> Seen(x))"]}
{"id": "eqasc_train_674", "nl": "Objects are seen by virtue of scattered light.", "fol": "", "prediction": ["all x.(Object(x) -> ScatteredLight(x))"]}
{"id": "eqasc_train_675", "nl": "by virtue of scattered light objects reflects light toward the eye", "fol": "", "prediction": ["all x y.((ScatteredLightObject(x) & Eye(y)) -> ReflectsLightTowards(x,y))"]}
{"id": "eqasc_train_676", "nl": "Light comes from the sun.", "fol": "", "prediction": ["all x.(Light(x) -> Sun(x))"]}
{"id": "eqasc_train_677", "nl": "If an object reflects something that comes from the Sun toward the eye then that object can be seen", "fol": "", "prediction": ["all x.((ReflectsSunTowardsEye(x)) -> CanBeSeen(x))"]}
{"id": "eqasc_train_678", "nl": "Light is focussed on the retina.", "fol": "", "prediction": ["all x.(Light(x) -> FocusedOnRetina(x))"]}
{"id": "eqasc_train_679", "nl": "if an object can be focussed on the retina, it can be seen", "fol": "", "prediction": ["all x.((Object(x) & FocussedOnRetina(x)) -> CanBeSeen(x))"]}
{"id": "eqasc_train_680", "nl": "Moonlight is little more than sunlight reflected off a moon.", "fol": "", "prediction": ["all x.(Moonlight(x) -> (Sunlight(x) & ReflectedOffMoon(x)))"]}
{"id": "eqasc_train_681", "nl": "The light from the moon we see with our eyes comes from the sun", "fol": "", "prediction": ["all x y.((Light(x) & Moon(y) & Eyes(y)) -> Sun(x))"]}
{"id": "eqasc_train_682", "nl": "Light is made up of particles called photons.", "fol": "", "prediction": ["all x.(Light(x) -> MadeUpOfPhotons(x))"]}
{"id": "eqasc_train_683", "nl": "If an object reflects photons toward the eye then that object can be seen", "fol": "", "prediction": ["all x.((ReflectsPhotonsTowardsEye(x)) -> CanBeSeen(x))"]}
{"id": "eqasc_train_684", "nl": "if an object reflects  photons toward the eye then that object can be seen", "fol": "", "prediction": ["all x y.((Object(x) & ReflectsPhotonsTowardsEye(x)) -> CanBeSeen(x,y))"]}
{"id": "eqasc_train_685", "nl": "if an object reflects rays or beams toward the eye then it can be seen", "fol": "", "prediction": ["all x.((ReflectsRaysOrBeamsTowardsEye(x)) -> CanBeSeen(x))"]}
{"id": "eqasc_train_686", "nl": "Generally, white objects reflect more than dark ones.", "fol": "", "prediction": ["all x y.((WhiteObject(x) & DarkObject(y)) -> ReflectsMore(x,y))"]}
{"id": "eqasc_train_687", "nl": "white objects can be seen more ", "fol": "", "prediction": ["all x.(WhiteObject(x) -> CanBeSeenMore(x))"]}
{"id": "eqasc_train_688", "nl": "Echinoderms lack a centralized nervous system.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> LacksCentralizedNervousSystem(x))"]}
{"id": "eqasc_train_689", "nl": "Echinoderms include starfish, sea urchins, and sea cucumbers.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> (Starfish(x) | SeaUrchin(x) | SeaCucumber(x)))"]}
{"id": "eqasc_train_690", "nl": "Starfish, sea urchins and sea cucumbers lack a centralized nervous system.", "fol": "", "prediction": ["all x y.((Starfish(x) | SeaUrchin(x) | SeaCucumber(y)) -> -CentralizedNervousSystem(x))"]}
{"id": "eqasc_train_691", "nl": "starfish lack a centralized nervous system.", "fol": "", "prediction": ["all x.(Starfish(x) -> LacksCentralizedNervousSystem(x))"]}
{"id": "eqasc_train_692", "nl": "starfish lack a centralized nervous system", "fol": "", "prediction": ["all x.(Starfish(x) -> -CentralizedNervousSystem(x))"]}
{"id": "eqasc_train_693", "nl": "From animal experiments, it seems to be a central nervous system toxin.", "fol": "", "prediction": ["all x.((AnimalExperiment(x) & CentralNervousSystemToxin(x)) -> Toxin(x))"]}
{"id": "eqasc_train_694", "nl": "Echinoderms are resistant to some toxins.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> ResistantToToxics(x))"]}
{"id": "eqasc_train_695", "nl": "Starfish lack a centralized nervous system.", "fol": "", "prediction": ["all x.(Starfish(x) -> LacksCentralizedNervousSystem(x))"]}
{"id": "eqasc_train_696", "nl": "Sea urchins lack a centralized nervous system", "fol": "", "prediction": ["all x.(SeaUrchin(x) -> (LacksCentralizedNervousSystem(x) & -CentralizedNervousSystem(x)))"]}
{"id": "eqasc_train_697", "nl": "Sand dollars and sea biscuits are also echinoderms.", "fol": "", "prediction": ["all x.((SandDollar(x) | SeaBird(x)) -> Echinoderm(x))"]}
{"id": "eqasc_train_698", "nl": "Sand dollars lack a centralized nervous system", "fol": "", "prediction": ["all x.(SandDollar(x) -> LacksCentralizedNervousSystem(x))"]}
{"id": "eqasc_train_699", "nl": "Some deuterostomes lack a centralized nervous system", "fol": "", "prediction": ["exists x.(Deuterostome(x) & LacksCentralizedNervousSystem(x))"]}
{"id": "eqasc_train_700", "nl": "echinoids lack a centralized nervous system", "fol": "", "prediction": ["all x.(Echinoid(x) -> LacksCentralizedNervousSystem(x))"]}
{"id": "eqasc_train_701", "nl": "Gene flow occurs when individuals move into or out of a population.", "fol": "", "prediction": ["all x y.((Individual(x) & Population(y)) -> MovesIntoOrOutOf(x,y))"]}
{"id": "eqasc_train_702", "nl": "Genes specify individual traits.", "fol": "", "prediction": ["all x.(Gene(x) -> SpecificTreatments(x))"]}
{"id": "eqasc_train_703", "nl": "moving into or out of a population affects traits", "fol": "", "prediction": ["all x y.((Population(x) & Population(y)) -> (AffectsTraits(x,y) & MovesIntoOrOutOf(x,y)))"]}
{"id": "eqasc_train_704", "nl": "Gene flow tends to decrease differentiation.", "fol": "", "prediction": ["all x.(GeneFlow(x) -> DecreasesDifferensitivities(x))"]}
{"id": "eqasc_train_705", "nl": "decreased differentiation tends to occur when individuals move into or out of a population.", "fol": "", "prediction": ["all x y.((Individual(x) & Population(y) & MovesIntoOrOutOf(x,y)) -> DecreasedDifferenciation(x))"]}
{"id": "eqasc_train_706", "nl": "Gene flow increases genetic variation within a population.", "fol": "", "prediction": ["all x y.((GeneFlow(x) & Population(y)) -> IncreasesGeneticVariation(x,y))"]}
{"id": "eqasc_train_707", "nl": "genetic variation is increased with population movement", "fol": "", "prediction": ["all x y.((GeneticVariation(x) & PopulationMovement(y)) -> IncreasedWithIncreased(x,y))"]}
{"id": "eqasc_train_708", "nl": "Community health focuses on the health of populations or groups.", "fol": "", "prediction": ["all x.(CommunityHealth(x) -> (FocusesOnHealthOfPopulationsOrGroups(x)))"]}
{"id": "eqasc_train_709", "nl": "Gene flow occurs when individuals move into or out of a community.", "fol": "", "prediction": ["all x y.((Individual(x) & Community(y)) -> MovesIntoOrOutOf(x,y))"]}
{"id": "eqasc_train_710", "nl": "People are individuals, and each person has different needs.", "fol": "", "prediction": ["all x.(Person(x) -> (Individual(x) & DifferentNeeds(x)))"]}
{"id": "eqasc_train_711", "nl": "Gene flow occurs when people move into or out of a population.", "fol": "", "prediction": ["all x y.((GeneFlow(x) & Population(y)) -> (MovesInto(x,y) | MovesOut(x,y)))"]}
{"id": "eqasc_train_712", "nl": "Genetic diversity can be maintained in small populations by even a small amount of gene flow.", "fol": "", "prediction": ["all x.((GeneticDiversity(x) & SmallPopulation(x) & SmallGeneFlow(x)) -> Maintains(x,y))"]}
{"id": "eqasc_train_713", "nl": "Genetic diversity can be maintained when individuals move into or out of a population", "fol": "", "prediction": ["all x y.((Individual(x) & Population(y) & MovesIntoOrOutOf(x,y)) -> GeneticDiversityMaintained(x))"]}
{"id": "eqasc_train_714", "nl": "a decrease in differentiation tends to occur when individuals move in and out of a population", "fol": "", "prediction": ["all x y.((DecreaseInDifferenciation(x) & Individual(y) & MovesInAndOutOfPopulation(y,x)) -> TendentToOccur(x,y))"]}
{"id": "eqasc_train_715", "nl": "Internal migration describes moves within a country.", "fol": "", "prediction": ["all x y.((InternalMigration(x) & Country(y)) -> DefinesMovements(x,y))"]}
{"id": "eqasc_train_716", "nl": "Gene flow occurs when individuals migrate.", "fol": "", "prediction": ["all x.(GeneFlow(x) -> Migrates(x))"]}
{"id": "eqasc_train_717", "nl": "Populations Populations are subsets of a species.", "fol": "", "prediction": ["all x y.((Population(x) & Species(y)) -> SubsetOf(x,y))"]}
{"id": "eqasc_train_718", "nl": "Gene flow occurs when individuals move into or out of a subset of a species", "fol": "", "prediction": ["all x y.((GeneFlow(x) & Individual(y) & SubsetOfSpecies(y)) -> (MovesIntoOrOutOfSubset(y,x)))"]}
{"id": "eqasc_train_719", "nl": "Gene flow between populations is unidirectional.", "fol": "", "prediction": ["all x.(GeneFlow(x) -> Unidirectional(x))"]}
{"id": "eqasc_train_720", "nl": "individuals moving into or out of a population is unidirectional", "fol": "", "prediction": ["all x y.((Individual(x) & Population(y) & MovesIntoOrOutOf(x,y)) -> Unidirectional(x))"]}
{"id": "eqasc_train_721", "nl": "Gene flow is the movement of alleles in or out of a population.", "fol": "", "prediction": ["all x y.((GeneFlow(x) & Population(y)) -> (MovementOfAlleles(x,y) & InOrOutOf(x,y)))"]}
{"id": "eqasc_train_722", "nl": "the movement of alleles in of a population occurs when individuals move into a population", "fol": "", "prediction": ["all x y.((Allele(x) & Population(y) & MovesInto(x,y)) -> MovementOfAllelesIn(x,y))"]}
{"id": "eqasc_train_723", "nl": "Coral reefs provide food and shelter to many ocean organisms.", "fol": "", "prediction": ["all x.(CoralReef(x) -> (ProvidesFood(x) & ProvidesShelter(x)))"]}
{"id": "eqasc_train_724", "nl": "Salinity is vital for animals that live in the ocean.", "fol": "", "prediction": ["all x.((Animal(x) & LivesInOcean(x)) -> VitalSalinity(x))"]}
{"id": "eqasc_train_725", "nl": "Coral reefs provide food and shelter to animals that require salinity", "fol": "", "prediction": ["all x y.((CoralReef(x) & Animal(y) & RequiresSalinity(y)) -> ProvidesFoodAndShelter(x,y))"]}
{"id": "eqasc_train_726", "nl": "Food gives energy.", "fol": "", "prediction": ["all x.(Food(x) -> GivesEnergy(x))"]}
{"id": "eqasc_train_727", "nl": "coral reefs provide energy and shelter to many ocean organisms", "fol": "", "prediction": ["all x y.((CoralReef(x) & OceanOrganism(y)) -> (ProvidesEnergy(x,y) & ProvidesShelter(x,y)))"]}
{"id": "eqasc_train_728", "nl": "Oceans are important to life on Earth.", "fol": "", "prediction": ["all x.(Ocean(x) -> ImportantToLifeOnEarth(x))"]}
{"id": "eqasc_train_729", "nl": "coral reefs are important to earth", "fol": "", "prediction": ["all x.(CoralReef(x) -> ImportantToEarth(x))"]}
{"id": "eqasc_train_730", "nl": "Coral reefs are predominantly calcite.", "fol": "", "prediction": ["all x.(CoralReef(x) -> PredominantlyCalcite(x))"]}
{"id": "eqasc_train_731", "nl": "Calcite provides food and shelter to many ocean organisms.", "fol": "", "prediction": ["all x.(Calcite(x) -> (ProvidesFood(x) & ProvidesShelter(x)))"]}
{"id": "eqasc_train_732", "nl": "Coral reefs fringe the shoreline.", "fol": "", "prediction": ["all x.(CoralReef(x) -> FringeSurface(x))"]}
{"id": "eqasc_train_733", "nl": "many ocean organisms find food and shelter near the shoreline", "fol": "", "prediction": ["all x y z.((OceanOrganism(x) & Food(y) & Shelter(z)) -> FindsNearSurfaceline(x,y,z))"]}
{"id": "eqasc_train_734", "nl": "Coral reefs occur mainly as numerous patch reefs.", "fol": "", "prediction": ["all x.(CoralReef(x) -> exists y.(PatchReef(y) & PatchReef(x,y)))"]}
{"id": "eqasc_train_735", "nl": "Patch reef provide food and shelter to many ocean organisms.", "fol": "", "prediction": ["all x.(PatchReef(x) -> (ProvidesFood(x) & ProvidesShelter(x)))"]}
{"id": "eqasc_train_736", "nl": "Coral Reefs Coral reefs are threatened.", "fol": "", "prediction": ["all x.(CoralReef(x) -> Threatened(x))"]}
{"id": "eqasc_train_737", "nl": "reefs are threatened", "fol": "", "prediction": ["all x.(Reef(x) -> Threatened(x))"]}
{"id": "eqasc_train_738", "nl": "Oceanic organisms other than fish, such as manatees and clams, are also subjects of the poems.", "fol": "", "prediction": ["all x.((OceanOrganism(x) & -Fish(x) & (Manatee(x) | Clam(x))) -> PoetrySubject(x))"]}
{"id": "eqasc_train_739", "nl": " Coral reefs provide food and shelter to many fish.", "fol": "", "prediction": ["all x.(CoralReef(x) -> (ProvidesFood(x) & ProvidesShelter(x)))"]}
{"id": "eqasc_train_740", "nl": "Organisms or living beings are literally things that are alive.", "fol": "", "prediction": ["all x.(Organism(x) | LivingBeing(x)) -> Living(x))"]}
{"id": "eqasc_train_741", "nl": "Coral reefs provide food and shelter to many ocean living beings.", "fol": "", "prediction": ["all x.(CoralReef(x) -> (ProvidesFood(x) & ProvidesShelter(x)))"]}
{"id": "eqasc_train_742", "nl": "Humans depend upon the life-support systems provided by the oceans.", "fol": "", "prediction": ["all x y.((Human(x) & Ocean(y)) -> DependsOnLifeSupportSystems(x,y))"]}
{"id": "eqasc_train_743", "nl": "coral reefs provide support for humans", "fol": "", "prediction": ["all x y.((CoralReef(x) & Human(y)) -> ProvidesSupportFor(x,y))"]}
{"id": "eqasc_train_744", "nl": "Coral Reefs Coral reefs are widely distributed in warm shallow waters.", "fol": "", "prediction": ["all x.(CoralReef(x) -> (CoralReef(x) & WarmShallowWater(x)))"]}
{"id": "eqasc_train_745", "nl": "warm shallow waters provide food and shelter to many ocean organisms", "fol": "", "prediction": ["all x y.((WarmSeasonalWater(x) & OceanOrganism(y)) -> (ProvidesFood(x,y) & ProvidesShelter(x,y)))"]}
{"id": "eqasc_train_746", "nl": "Coral reefs are nurseries of the ocean.", "fol": "", "prediction": ["all x.(CoralReef(x) -> NurseriesOcean(x))"]}
{"id": "eqasc_train_747", "nl": " Nurseries of the ocean provide food and shelter to many ocean organisms.", "fol": "", "prediction": ["all x y.((Nursery(x) & Ocean(y)) -> (ProvidesFood(x,y) & ProvidesShelter(x,y)))"]}
{"id": "eqasc_train_748", "nl": "Coral reefs are formed from coral skeletons.", "fol": "", "prediction": ["all x.(CoralReef(x) -> FormedFromCoralSkeletons(x))"]}
{"id": "eqasc_train_749", "nl": "Something formed from skeletons provide food and shelter to many ocean organisms.", "fol": "", "prediction": ["all x y.((Skeleton(x) & OceanOrganism(y)) -> ProvidesFoodAndShelter(x,y))"]}
{"id": "eqasc_train_750", "nl": "Some fish, like the clownfish, spend most of their lives in and around coral reefs.", "fol": "", "prediction": ["exists x.(Fish(x) & (Clownfish(x) | Clawfish(x)) & SpendsMostOfLifeInAndAroundCoralReefs(x))"]}
{"id": "eqasc_train_751", "nl": "clownfish seek shelter in coral", "fol": "", "prediction": ["all x y.((Clownfish(x) & Coral(y)) -> SeeksShelterIn(x,y))"]}
{"id": "eqasc_train_752", "nl": "Reef-building corals are hermatypic.", "fol": "", "prediction": ["all x.(ReefBuildingCoral(x) -> Hermatypic(x))"]}
{"id": "eqasc_train_753", "nl": "Hermatypic organisms provide food and shelter to many ocean organisms.", "fol": "", "prediction": ["all x.(HermatypicOrganism(x) -> (ProvidesFood(x) & ProvidesShelter(x)))"]}
{"id": "eqasc_train_754", "nl": "using renewable resources to generate power reduces greenhouse gases", "fol": "", "prediction": ["all x y.((RenewableResources(x) & RenewableResources(y) & GeneratesPower(x,y)) -> ReducesGreenhouseGases(x))"]}
{"id": "eqasc_train_755", "nl": "Wind is a renewable energy source.", "fol": "", "prediction": ["all x.(Wind(x) -> RenewableEnergySource(x))"]}
{"id": "eqasc_train_756", "nl": "Using wind to generate power reduces greenhouse gases", "fol": "", "prediction": ["all x y.((Wind(x) & GreenhouseGas(y)) -> Reduces(x,y))"]}
{"id": "eqasc_train_757", "nl": "Solar power, wind power, and recycling are resources that are renewable.", "fol": "", "prediction": ["all x.((SolarPower(x) | WindPower(x) | Recycling(x)) -> RenewableResource(x))"]}
{"id": "eqasc_train_758", "nl": "Using solar power reduces greenhouse gasses", "fol": "", "prediction": ["all x.((SolarPower(x) & ReducesGreenhouseGases(x)) -> Uses(x,SolarPower))"]}
{"id": "eqasc_train_759", "nl": "Carbon dioxide is a greenhouse gas.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> GreenhouseGas(x))"]}
{"id": "eqasc_train_760", "nl": "using renewable resources to generate power reduces carbon dioxide", "fol": "", "prediction": ["all x y.((RenewableResources(x) & RenewableResources(y) & GeneratesPower(x,y)) -> ReducesCarbonDioxide(x))"]}
{"id": "eqasc_train_761", "nl": "Solar energy is a renewable resource .", "fol": "", "prediction": ["all x.(SolarEnergy(x) -> RenewableResource(x))"]}
{"id": "eqasc_train_762", "nl": "Using solar energy to generate power reduces greenhouse gases.", "fol": "", "prediction": ["all x.((UsesSolarEnergy(x) & GeneratesPower(x)) -> ReducesGreenhouseGases(x))"]}
{"id": "eqasc_train_763", "nl": "Nuclear power generation plants emit no greenhouse gases.", "fol": "", "prediction": ["all x.(NuclearPowerGenerationPlant(x) -> -EmitsGreenhouseGases(x))"]}
{"id": "eqasc_train_764", "nl": "Nuclear power plants reduce greenhouse gases. ", "fol": "", "prediction": ["all x.(NuclearPowerPlant(x) -> ReducesGreenhouseGases(x))"]}
{"id": "eqasc_train_765", "nl": "Renewable resources include water, timber, wind.", "fol": "", "prediction": ["all x.(RenewableResource(x) -> (Water(x) | Timber(x) | Wind(x)))"]}
{"id": "eqasc_train_766", "nl": "Chlorofluorocarbons are greenhouse gases.", "fol": "", "prediction": ["all x.(Chlorofluorocarbon(x) -> GreenhouseGas(x))"]}
{"id": "eqasc_train_767", "nl": "Using renewable resources reduces chlorofluorocarbons.", "fol": "", "prediction": ["all x.((RenewableResources(x) & Uses(x,y)) -> ReducesChlorophyllofluorocarbons(x))"]}
{"id": "eqasc_train_768", "nl": "Hydropower is a renewable resource.", "fol": "", "prediction": ["all x.(Hydropower(x) -> RenewableResource(x))"]}
{"id": "eqasc_train_769", "nl": "Using hydropower reduces greenhouse gases", "fol": "", "prediction": ["all x.((Hydropower(x) & GreenhouseGases(x)) -> Reduces(x,y))"]}
{"id": "eqasc_train_770", "nl": "Playing is one way mammals and other animals learn how to behave.", "fol": "", "prediction": ["all x y.((Mammal(x) & Animal(y)) -> LearnsBehavior(x,y))"]}
{"id": "eqasc_train_771", "nl": "All humans are mammals.", "fol": "", "prediction": ["all x.(Human(x) -> Mammal(x))"]}
{"id": "eqasc_train_772", "nl": "playing is one way humans learn how to behave", "fol": "", "prediction": ["all x.(Playing(x) -> LearnsHowToBehave(x))"]}
{"id": "eqasc_train_773", "nl": "Service animals are trained to behave properly in public settings.", "fol": "", "prediction": ["all x.(ServiceAnimal(x) -> TrainedToBehaveInPublicSettings(x))"]}
{"id": "eqasc_train_774", "nl": "Playing is one way mammals are trained to behave properly in public settings", "fol": "", "prediction": ["all x y.((Mammal(x) & Playing(x)) -> TrainedToBeProperly(x,y))"]}
{"id": "eqasc_train_775", "nl": "Dogs learn many social rules through play.", "fol": "", "prediction": ["all x.(Dog(x) -> LearnsSocialRulesThroughPlay(x))"]}
{"id": "eqasc_train_776", "nl": "Dogs are trained on how to behave through play", "fol": "", "prediction": ["all x.(Dog(x) -> TrainedOnBehaviorThroughPlay(x))"]}
{"id": "eqasc_train_777", "nl": "Training animals in zoos is similar to the way animals learn in the wild.", "fol": "", "prediction": ["all x y.((Zoo(x) & Animal(y)) -> (TrainsIn(x,y) & LearnsIn(y,x)))"]}
{"id": "eqasc_train_778", "nl": "Training animals in zoos is similar to the way animals play in the wild", "fol": "", "prediction": ["all x y.((Zoo(x) & Animal(y)) -> (TrainingIn(x,y) & PlayingIn(y,z)))"]}
{"id": "eqasc_train_779", "nl": "Second stage, learn how to behave assertively.", "fol": "", "prediction": ["SecondStage, LearnsHowToBeAssertive(Stage)"]}
{"id": "eqasc_train_780", "nl": "Playing is one way mammals and other animals learn how to be assertive.", "fol": "", "prediction": ["all x.(Playing(x) -> (Mammal(x) & Animal(x) & LearnsAssertive(x)))"]}
{"id": "eqasc_train_781", "nl": "Playing is really fun.", "fol": "", "prediction": ["all x.(Playing(x) -> ReallyFun(x))"]}
{"id": "eqasc_train_782", "nl": "having fun is one way mammals learn to behave", "fol": "", "prediction": ["all x.(HasFun(x) -> MammalLearnsToBeBehave(x))"]}
{"id": "eqasc_train_783", "nl": "Sea lions are tactile mammals.", "fol": "", "prediction": ["all x.(SeaLion(x) -> TouchableMammal(x))"]}
{"id": "eqasc_train_784", "nl": "Playing is one way sea lions learn how to behave.", "fol": "", "prediction": ["all x.(SeaLion(x) -> LearnsBehavior(x))"]}
{"id": "eqasc_train_785", "nl": "Dolphins and whales are mammals.", "fol": "", "prediction": ["all x.((Dolphin(x) | Whale(x)) -> Mammal(x))"]}
{"id": "eqasc_train_786", "nl": "playing is one way dolphins learn how to behave", "fol": "", "prediction": ["all x.(Dolphin(x) -> LearnsBehavior(x))"]}
{"id": "eqasc_train_787", "nl": "Animals are organisms that have ingestive metabolism.", "fol": "", "prediction": ["all x.(Animal(x) -> (Organism(x) & IngestiveMetabolism(x)))"]}
{"id": "eqasc_train_788", "nl": "Playing is one way organisms that have ingestive metabolism learn how to behave.", "fol": "", "prediction": ["all x.((Organism(x) & IngestioniveMetabolism(x)) -> LearnsBehavior(x))"]}
{"id": "eqasc_train_789", "nl": "Dogs, of course, are mammals.", "fol": "", "prediction": ["all x.(Dog(x) -> Mammal(x))"]}
{"id": "eqasc_train_790", "nl": "Playing is one way dogs learn how to behave", "fol": "", "prediction": ["all x.(Playing(x) -> DogLearnsHowToBehave(x))"]}
{"id": "eqasc_train_791", "nl": "Opossums are a type of mammal called marsupials.", "fol": "", "prediction": ["all x.(Opossum(x) -> (Marsupial(x) & Mammal(x)))"]}
{"id": "eqasc_train_792", "nl": "playing is one way opossums learn how to behave", "fol": "", "prediction": ["all x.(Opossum(x) -> LearnsBehavior(x))"]}
{"id": "eqasc_train_793", "nl": "Cats are Mammals that Shed Dogs are Mammals that Wag their tails.", "fol": "", "prediction": ["all x.(Cat(x) -> (Mammal(x) & ShedDog(x) & WagTail(x)))"]}
{"id": "eqasc_train_794", "nl": "Playing is one way cats learn how to behave", "fol": "", "prediction": ["all x.(Playing(x) -> LearnsBehavior(x))"]}
{"id": "eqasc_train_795", "nl": "Playing is one way dogs learn to behave.", "fol": "", "prediction": ["all x.(Playing(x) -> DogLearnsBehavior(x))"]}
{"id": "eqasc_train_796", "nl": "Involvement in play takes time and energy.", "fol": "", "prediction": ["all x.(InvolvementInPlay(x) -> (TakesTime(x) & TakesEnergy(x)))"]}
{"id": "eqasc_train_797", "nl": "time and energy are one way animals learn to behave", "fol": "", "prediction": ["all x.((Animal(x) & LearnsBehavior(x)) -> (Time(x) & Energy(x)))"]}
{"id": "eqasc_train_798", "nl": "Exercise is fun if it is also play.", "fol": "", "prediction": ["all x.((Exercise(x) & Play(x)) -> Fun(x))"]}
{"id": "eqasc_train_799", "nl": "Exercise can teach animals how to behave", "fol": "", "prediction": ["all x y.((Exercise(x) & Animal(y)) -> CanTeachHowToBehave(x,y))"]}
{"id": "eqasc_train_800", "nl": "Bored animals play, according to Spencer.", "fol": "", "prediction": ["all x.(BoredAnimal(x) -> Plays(x))"]}
{"id": "eqasc_train_801", "nl": "animals get bored", "fol": "", "prediction": ["all x.(Animal(x) -> Borrowed(x))"]}
{"id": "eqasc_train_802", "nl": "gravity causes objects that have mass to be pulled down on a planet", "fol": "", "prediction": ["all x y.((Gravity(x) & Object(y) & HasMass(y)) -> PulledDownOnPlanet(x,y))"]}
{"id": "eqasc_train_803", "nl": "Asteroids Asteroids are variously-shaped masses of rock, metal, and ice.", "fol": "", "prediction": ["all x.(Asteroids(x) -> (VariouslyShapedMass(x) & (Rock(x) | Metal(x) | Ice(x))))"]}
{"id": "eqasc_train_804", "nl": "Asteroids are pulled down to Jupiter by gravity", "fol": "", "prediction": ["all x y.((Asteroids(x) & Jupiter(y)) -> PulledDownByGravity(x,y))"]}
{"id": "eqasc_train_805", "nl": "And roller coasters work with gravity.", "fol": "", "prediction": ["(all x.(RollerCoaster(x) -> WorksWithGravity(x)))"]}
{"id": "eqasc_train_806", "nl": "Roller coaster work the same as any object having mass being pulled down on a planet", "fol": "", "prediction": ["all x y.((RollerCoaster(x) & Object(y) & HasMass(y) & PulledDownOnPlanet(x,y)) -> WorksSame(x))"]}
{"id": "eqasc_train_807", "nl": "Weight is the measurment of the force of gravity on a mass.", "fol": "", "prediction": ["all x.(Weight(x) -> MeasurmentOfGravityOnMass(x))"]}
{"id": "eqasc_train_808", "nl": "Weight is measured when objects are pulled down by gravity", "fol": "", "prediction": ["all x y.((Object(x) & Gravity(y) & PulledDownBy(x,y)) -> WeightMeasured(x))"]}
{"id": "eqasc_train_809", "nl": "Earth is a living planet.", "fol": "", "prediction": ["all x.(Earth(x) -> LivingPlanet(x))"]}
{"id": "eqasc_train_810", "nl": "gravity causes objects that have mass to be pulled down on Earth", "fol": "", "prediction": ["all x y.((Gravity(x) & Object(y) & HasMass(y)) -> PulledDownOnEarth(x,y))"]}
{"id": "eqasc_train_811", "nl": "Another name for Mars is the Red Planet.", "fol": "", "prediction": ["(RedPlanet(Mars))"]}
{"id": "eqasc_train_812", "nl": "gravity causes objects that have mass to be pulled down on Mars", "fol": "", "prediction": ["all x y.((Gravity(x) & Object(y) & HasMass(y)) -> PulledDownOnMars(x,y))"]}
{"id": "eqasc_train_813", "nl": "Gravity was defined by Newton.", "fol": "", "prediction": ["GravityDefinedByNathanolo(x)"]}
{"id": "eqasc_train_814", "nl": "A force defined by Newton causes objects that have mass to be pulled down on a planet", "fol": "", "prediction": ["all x y.((Force(x) & Newton(y)) -> CausesObjectsToBePulledDownOnPlanet(x,y))"]}
{"id": "eqasc_train_815", "nl": "Astronomy is the scientific study of the stars, planets and the other celestial bodies.", "fol": "", "prediction": ["all x.(Astronomy(x) -> (ScientificStudyOfStarsPlanetsAndCelestialBodies(x)))"]}
{"id": "eqasc_train_816", "nl": "Gravity pulls down objects that have mass on a celestial body.", "fol": "", "prediction": ["all x y.((Gravity(x) & CelestialBody(y)) -> PullsDown(x,y))"]}
{"id": "eqasc_train_817", "nl": "Rocks have mass.", "fol": "", "prediction": ["all x.(Rock(x) -> HasMass(x))"]}
{"id": "eqasc_train_818", "nl": "Gravity causes rocks to be pulled down on a planet", "fol": "", "prediction": ["all x y.((Gravity(x) & Planet(y)) -> CausesRocksToBePulledDownOn(x,y))"]}
{"id": "eqasc_train_819", "nl": "Planet Mars Mars is the fourth planet from the sun and is most like Earth.", "fol": "", "prediction": ["Planet Mars Mars (Planet(Mars) & FourthPlanetFromSun(Mars) & MostLike(Mars,Earth))"]}
{"id": "eqasc_train_820", "nl": "gravity causes objects that have mass to be pulled down to Mars", "fol": "", "prediction": ["all x y.((Gravity(x) & Object(y) & HasMass(y)) -> PulledDownToMars(x,y))"]}
{"id": "eqasc_train_821", "nl": "Weight is the product of an object's mass and the acceleration due to gravity.", "fol": "", "prediction": ["all x.(Weight(x) -> (ProductOfMass(x) & AccelerationDueToGravity(x)))"]}
{"id": "eqasc_train_822", "nl": "Weight is determined by gravity pulling an object", "fol": "", "prediction": ["all x y.((Weight(x) & Gravity(y) & PullsObject(x,y)) -> DeterminedBy(x,y))"]}
{"id": "eqasc_train_823", "nl": "an electric stove transforms electrical energy to heat energy", "fol": "", "prediction": ["all x y.((ElectricStove(x) & ElectricalEnergy(y)) -> TransformsToHeatEnergy(x,y))"]}
{"id": "eqasc_train_824", "nl": "Cooking can be done on the 2 or 3 electrical stoves located at each facility.", "fol": "", "prediction": ["all x y.((ElectricalStove(x) & Facility(y)) -> (Cooking(x,y) | Cooking(x,y)))"]}
{"id": "eqasc_train_825", "nl": "Cooking can transform electrical energy to heat energy", "fol": "", "prediction": ["all x y.((Cooking(x) & ElectricalEnergy(y)) -> TransformsToHeatEnergy(x,y))"]}
{"id": "eqasc_train_826", "nl": "For example, it takes energy to boil water on the stove.", "fol": "", "prediction": ["all x y.((Stove(x) & Water(y)) -> TakesEnergyToBoil(x,y))"]}
{"id": "eqasc_train_827", "nl": "electric stoves boil water", "fol": "", "prediction": ["all x.(ElectricStove(x) -> BoilWater(x))"]}
{"id": "eqasc_train_828", "nl": "Electrical energy refers to energy associated with the flow of electrons.", "fol": "", "prediction": ["all x.(ElectricalEnergy(x) -> EnergyAssociatedWithElectronsFlow(x))"]}
{"id": "eqasc_train_829", "nl": "an electric stove transforms the flow of electrons to heat", "fol": "", "prediction": ["all x y.((ElectricStove(x) & ElectronFlow(y)) -> TransformsToHeat(x,y))"]}
{"id": "eqasc_train_830", "nl": "Electricity or electrical energy, is produced at a power plant.", "fol": "", "prediction": ["all x y.((Electricity(x) | ElectricalEnergy(x)) -> ProducedAtPowerPlant(y))"]}
{"id": "eqasc_train_831", "nl": "an electric stove transforms electricity to heat", "fol": "", "prediction": ["all x.(ElectricStove(x) -> TransformsElectricityToHeat(x))"]}
{"id": "eqasc_train_832", "nl": "When using an electric stove, match the pan size to the cooking element.", "fol": "", "prediction": ["all x.((ElectricStove(x) & Uses(x,y)) -> MatchPanSizeToCookingElement(x,y))"]}
{"id": "eqasc_train_833", "nl": "heat energy is used to cook with a pan", "fol": "", "prediction": ["all x y.((HeatEnergy(x) & Pan(y)) -> CooksWith(x,y))"]}
{"id": "eqasc_train_834", "nl": "Heat is also produced by friction, or mechanical energy, chemical energy, and electrical energy.", "fol": "", "prediction": ["all x.(Heat(x) -> (ProducedByFriction(x) | (ProducedByMechanicalEnergy(x) | ProducedByChemicalEnergy(x) | ProducedByElectricalEnergy(x))))"]}
{"id": "eqasc_train_835", "nl": "An electric stove transforms electrical energy into friction", "fol": "", "prediction": ["all x.(ElectricStove(x) -> TransformsElectricalEnergyIntoFriction(x))"]}
{"id": "eqasc_train_836", "nl": "Kinetic energy is energy of movement and also includes heat energy and light energy.", "fol": "", "prediction": ["all x.(KineticEnergy(x) -> (EnergyOfMovement(x) & HeatEnergy(x) & LightEnergy(x)))"]}
{"id": "eqasc_train_837", "nl": "an electric stove transforms electrical energy to kinetic energy", "fol": "", "prediction": ["all x.(ElectricStove(x) -> TransformsElectricalEnergyToKineticEnergy(x))"]}
{"id": "eqasc_train_838", "nl": "Electric motors convert electrical energy into mechanical energy.", "fol": "", "prediction": ["all x.(ElectricMotor(x) -> ConvertsElectricalEnergyToMechanicalEnergy(x))"]}
{"id": "eqasc_train_839", "nl": "electric motors and stoves transform electricity", "fol": "", "prediction": ["all x y.((ElectricMotor(x) & ElectricStove(y)) -> TransformsElectricity(x,y))"]}
{"id": "eqasc_train_840", "nl": "Heat is molecular kinetic energy.", "fol": "", "prediction": ["all x.(Heat(x) -> MolecularKineticEnergy(x))"]}
{"id": "eqasc_train_841", "nl": "An electric stove transforms electrical energy into molecular kinetic energy.", "fol": "", "prediction": ["all x.(ElectricStove(x) -> TransformsElectricalEnergyToMolecularKineticEnergy(x))"]}
{"id": "eqasc_train_842", "nl": "Plants respond to daily and seasonal cycles and to disease.", "fol": "", "prediction": ["all x.(Plant(x) -> (ResponsesToDailyCycles(x) & RespondsToSeasonalCycles(x) & RespondsToDisease(x)))"]}
{"id": "eqasc_train_843", "nl": "Plant diseases cause by bacteria.", "fol": "", "prediction": ["all x.(PlantDisease(x) -> CausedByBacteria(x))"]}
{"id": "eqasc_train_844", "nl": "Plants respond to seasonal and daily cycles and to bacteria.", "fol": "", "prediction": ["all x.(Plant(x) -> (ResponsesToSeasonalCycles(x) & RespondsToDailyCycles(x) & RespondsToBacteria(x)))"]}
{"id": "eqasc_train_845", "nl": "Temperature follows a seasonal cycle.", "fol": "", "prediction": ["all x.(Temperature(x) -> FollowsSeasonalCycle(x))"]}
{"id": "eqasc_train_846", "nl": "Plants respond to temperature.", "fol": "", "prediction": ["all x.(Plant(x) -> RespondsToTemperature(x))"]}
{"id": "eqasc_train_847", "nl": "All plants are of bush type.", "fol": "", "prediction": ["all x.(Plant(x) -> BushType(x))"]}
{"id": "eqasc_train_848", "nl": "bushes respond to daily and seasonal cycles and to disease", "fol": "", "prediction": ["all x.(Bush(x) -> (ResponsesToDailyAndSeasonalCycles(x) & RespondsToDisease(x)))"]}
{"id": "eqasc_train_849", "nl": "Bamboos are vigorous, rugged plants.", "fol": "", "prediction": ["all x.(Bamboo(x) -> (Vibrant(x) & Rugged(x)))"]}
{"id": "eqasc_train_850", "nl": "bamboo respond to daily and seasonal cycles and to disease", "fol": "", "prediction": ["all x.(Bamboo(x) -> (ResponseToDailyAndSeasonalCycles(x) & RespondToDisease(x)))"]}
{"id": "eqasc_train_851", "nl": "Green bean plantings continue to be planted.", "fol": "", "prediction": ["all x.(GreenBeansPlanting(x) -> ContinuesToBePlanted(x))"]}
{"id": "eqasc_train_852", "nl": "Green beans respond to daily and seasonal cycles and to disease.", "fol": "", "prediction": ["all x.(GreenBeans(x) -> (ResponsesToDailyCycles(x) & RespondsToSeasonalCycles(x) & RespondsToDisease(x)))"]}
{"id": "eqasc_train_853", "nl": "Plant responses to water stress.", "fol": "", "prediction": ["all x.((Plant(x) & WaterStress(x)) -> RespondsTo(x,y))"]}
{"id": "eqasc_train_854", "nl": "water stress can be from daily or seasonal cycles", "fol": "", "prediction": ["all x.(WaterStress(x) -> (DailyCycles(x) | SeasonalCycles(x)))"]}
{"id": "eqasc_train_855", "nl": "For flowering plants, the answer is the Flower.", "fol": "", "prediction": ["all x.(FloweringPlant(x) -> Flower(x))"]}
{"id": "eqasc_train_856", "nl": "Flowers respond to daily and seasonal cycles and to disease", "fol": "", "prediction": ["all x.(Flower(x) -> (ResponsesToDailyAndSeasonalCycles(x) & RespondsToDisease(x)))"]}
{"id": "eqasc_train_857", "nl": "Cactuses are one type of succulent plants, although they are usually referred to separately.", "fol": "", "prediction": ["all x.(Cactus(x) -> (SucculentPlant(x) & UsuallyReferredTo(x,separately)))"]}
{"id": "eqasc_train_858", "nl": "cactuses respond to daily and seasonal cycles and to disease", "fol": "", "prediction": ["all x.(Cactus(x) -> (ResponsesToDailyAndSeasonalCycles(x) & RespondsToDisease(x)))"]}
{"id": "eqasc_train_859", "nl": "Green manures can be managed to disrupt plant disease cycles or to suppress nematodes .", "fol": "", "prediction": ["all x.(GreenManure(x) -> (DisruptsPlantDiseaseCycles(x) | SupressesNematodes(x)))"]}
{"id": "eqasc_train_860", "nl": "Plants respond to green manures to disrupt plant disease", "fol": "", "prediction": ["all x y z.((Plant(x) & GreenManure(y) & PlantDisease(z)) -> RespondsToDisrupts(x,y,z))"]}
{"id": "eqasc_train_861", "nl": "Cells vary in size as well as shape, but all cells are very small.", "fol": "", "prediction": ["all x.(Cell(x) -> (VariatesSize(x) & VariatesShape(x) & Small(x)))"]}
{"id": "eqasc_train_862", "nl": "An embryo is so small that it requires a microscope in order to be seen.", "fol": "", "prediction": ["all x.(Embryo(x) -> (Small(x) & RequiresMicroscope(x)))"]}
{"id": "eqasc_train_863", "nl": "A cell requires a microscope in order to be seen.", "fol": "", "prediction": ["all x.((Cell(x) & RequiresMicroscope(x)) -> CanBeSeen(x))"]}
{"id": "eqasc_train_864", "nl": "All cells are microscopic in size.", "fol": "", "prediction": ["all x.(Cell(x) -> MicroscopicSize(x))"]}
{"id": "eqasc_train_865", "nl": "Cells can vary in shape, but they are all microscopic.", "fol": "", "prediction": ["all x.(Cell(x) -> (VariatesShape(x) & Microscopic(x)))"]}
{"id": "eqasc_train_866", "nl": "Neurons are cells that are similar to other cells.", "fol": "", "prediction": ["all x.(Neuron(x) -> (Cell(x) & SimilarToCell(x)))"]}
{"id": "eqasc_train_867", "nl": "Neurons are very small in size.", "fol": "", "prediction": ["all x.(Neuron(x) -> VerySmallSize(x))"]}
{"id": "eqasc_train_868", "nl": "Most cells are too small to be seen without a microscope.", "fol": "", "prediction": ["all x.(Cell(x) -> (TooSmallToBeSeenWithoutMicroscope(x)))"]}
{"id": "eqasc_train_869", "nl": "Cells vary in size as well as shape and cannot be seen without a microscope", "fol": "", "prediction": ["all x.(Cell(x) -> (VariatesSize(x) & VariatesShape(x) & -CanBeSeenWithoutMicroscope(x)))"]}
{"id": "eqasc_train_870", "nl": "Microscopes are needed as most aquatic invertebrates are quite small.", "fol": "", "prediction": ["all x.(Microscope(x) -> (AquaticInvertebrate(x) & Small(x)))"]}
{"id": "eqasc_train_871", "nl": "microscopes can be used to see cells", "fol": "", "prediction": ["all x.(Microscope(x) -> (SeeCells(x) & Uses(x,y)))"]}
{"id": "eqasc_train_872", "nl": "Cells vary in size as well as shape and are seen with a microscope", "fol": "", "prediction": ["all x.(Cell(x) -> (VariatesSize(x) & VariatesShape(x) & VisibleWithMicroscope(x)))"]}
{"id": "eqasc_train_873", "nl": "Bacteria are single-cell microorganisms that are so small they can only be seen with a microscope.", "fol": "", "prediction": ["all x.(Bacteria(x) -> (SingleCellMicroorganism(x) & Small(x) & CanBeSeenWithMicroscope(x)))"]}
{"id": "eqasc_train_874", "nl": "Cells vary in size and shape and can only be seen with a microscope", "fol": "", "prediction": ["all x.(Cell(x) -> (VariatesSize(x) & VariatesShape(x) & CanBeSeenWithMicroscope(x)))"]}
{"id": "eqasc_train_875", "nl": "Lymphocytes in circulation are small cells.", "fol": "", "prediction": ["all x.(Lymphocyte(x) -> SmallCell(x))"]}
{"id": "eqasc_train_876", "nl": "lymphocytes are small", "fol": "", "prediction": ["all x.(Lymphocyte(x) -> Small(x))"]}
{"id": "eqasc_train_877", "nl": "Cells just vary in their forms and functions.", "fol": "", "prediction": ["all x.(Cell(x) -> (VariatesInForms(x) & VariatesInFunctions(x)))"]}
{"id": "eqasc_train_878", "nl": "Cells size as well as shape is related to their forms and functions", "fol": "", "prediction": ["all x.(Cell(x) -> (Size(x) & Shape(x) & FormsAndFunctions(x)))"]}
{"id": "eqasc_train_879", "nl": "Atoms are tiny particles that are too small to see.", "fol": "", "prediction": ["all x.(Atom(x) -> (TinyParticle(x) & TooSmallToSee(x)))"]}
{"id": "eqasc_train_880", "nl": "Cells vary in size as well as shape, but all cells are very tiny.", "fol": "", "prediction": ["all x.(Cell(x) -> (VariatesSize(x) & VariatesShape(x) & Tiny(x)))"]}
{"id": "eqasc_train_881", "nl": "Bacteria are single-celled animals.", "fol": "", "prediction": ["all x.(Bacteria(x) -> SingleCelled(x))"]}
{"id": "eqasc_train_882", "nl": "bacteria are very small", "fol": "", "prediction": ["all x.(Bacteria(x) -> VerySmall(x))"]}
{"id": "eqasc_train_883", "nl": "Cells are the fundamental units of life.", "fol": "", "prediction": ["all x.(Cell(x) -> FundamentalUnitOfLife(x))"]}
{"id": "eqasc_train_884", "nl": "The fundamental units of life vary in size and shape but are all very small", "fol": "", "prediction": ["all x.(FundamentalUnitOfLife(x) -> (VariatesInSize(x) & VariatesInShape(x) & Small(x)))"]}
{"id": "eqasc_train_885", "nl": "Cells are microscopic in size, requiring microscopes for visualization .", "fol": "", "prediction": ["all x.(Cell(x) -> (MicroscopicalSize(x) & RequiresMicroscope(x)))"]}
{"id": "eqasc_train_886", "nl": "microscopes are used to see small things", "fol": "", "prediction": ["all x.(Microscope(x) -> (SeeSmallThings(x) & UsedToSeeSmallThings(x)))"]}
{"id": "eqasc_train_887", "nl": "Basic unit of the plant body is the cell.", "fol": "", "prediction": ["all x.(PlantBody(x) -> Cell(x))"]}
{"id": "eqasc_train_888", "nl": "Basic units of the plant body vary in size as well as shape, but all are very small.", "fol": "", "prediction": ["all x.(BasicUnit(x) -> (VariatesInSize(x) & VariatesInShape(x) & VerySmall(x)))"]}
{"id": "eqasc_train_889", "nl": "cells vary in shape but are all microscopic", "fol": "", "prediction": ["all x.(Cell(x) -> (VariatesInShape(x) & Microscopic(x)))"]}
{"id": "eqasc_train_890", "nl": "Many corals secrete an exoskeleton that builds up to become a coral reef.", "fol": "", "prediction": ["all x.(Coral(x) -> (SectsExoskeleton(x) & BuildsUpToCoralReef(x)))"]}
{"id": "eqasc_train_891", "nl": "Coral Reefs Coral reefs are the jungles of the sea.", "fol": "", "prediction": ["all x.(CoralReef(x) -> (CoralReef(x) & Rainforest(x)))"]}
{"id": "eqasc_train_892", "nl": "many corals secrete an exoskeleton that builds up to become the jungles of the sea", "fol": "", "prediction": ["all x y z.((Coral(x) & Exoskeleton(y) & Sea(z)) -> (Secretes(x,y) & BuildsUpToBecomeDwarfs(x,z)))"]}
{"id": "eqasc_train_893", "nl": "An atoll is the third type of reef.", "fol": "", "prediction": ["all x.(Atoll(x) -> Reef(x))"]}
{"id": "eqasc_train_894", "nl": "Atolls are built by corals secreting an exoskeleton.", "fol": "", "prediction": ["all x.(Atoll(x) -> (Corals(x) & SecretedExoskeleton(x)))"]}
{"id": "eqasc_train_895", "nl": "Corals, and invertebrates in general, are delicate creatures.", "fol": "", "prediction": ["all x.((Coral(x) | Invertebrates(x)) -> DelicateCreature(x))"]}
{"id": "eqasc_train_896", "nl": "some invertebrates secrete an exoskeleton that builds up to become a reef", "fol": "", "prediction": ["exists x y.(Invertebrate(x) & SecretesExoskeleton(x) & BuildsUpToReef(x))"]}
{"id": "eqasc_train_897", "nl": "Coral is calcium carbonate with a trade of carotene.", "fol": "", "prediction": ["all x.(Coral(x) -> (CalciumCarbonate(x) & CaroteneTrade(x)))"]}
{"id": "eqasc_train_898", "nl": "calcium carbonate becomes a  reef.", "fol": "", "prediction": ["all x.(CalciumCarbonate(x) -> Reef(x))"]}
{"id": "eqasc_train_899", "nl": "Coral reefs are made up of the accumulated exoskeletons of the coral polyp.", "fol": "", "prediction": ["all x.(CoralReef(x) -> (MadeUpOfExoskeletons(x) & CoralPolyp(x)))"]}
{"id": "eqasc_train_900", "nl": "coral polyps form reefs", "fol": "", "prediction": ["all x.(CoralPolyp(x) -> FormsReefs(x))"]}
{"id": "eqasc_train_901", "nl": "Good examples are Bubble coral, Elegance coral, Frogspawn and other Euphyllia corals.", "fol": "", "prediction": ["(GoodExamples(BubblyCoral) & EleganceCoral(EuphylliaCoral))"]}
{"id": "eqasc_train_902", "nl": "Organisms like frogspawns secrete an exoskeleton that builds up to become a reef.", "fol": "", "prediction": ["all x.((Organism(x) & Frogspawn(x)) -> (SectsExoskeleton(x) & BuildsUpToReef(x)))"]}
{"id": "eqasc_train_903", "nl": "An exoskeleton is an external framework.", "fol": "", "prediction": ["all x.(Exoskeleton(x) -> ExternalFramework(x))"]}
{"id": "eqasc_train_904", "nl": "many corals secrete an external framework that builds up to become a coral reef", "fol": "", "prediction": ["all x y.((Coral(x) & Coral(y)) -> (SecratesExternalFramework(x,y) & BuildsUpToBecomeCoralReef(x)))"]}
{"id": "eqasc_train_905", "nl": "To fisherfolk, coral reefs are homes to fish that are waiting to be caught.", "fol": "", "prediction": ["all x y.((Fisherfolk(x) & CoralReef(y)) -> (HomeToFish(y) & WaitingToBeCaught(y)))"]}
{"id": "eqasc_train_906", "nl": "many corals secrete an exoskeleton that gives homes to fish", "fol": "", "prediction": ["all x y.((Coral(x) & Coral(y)) -> SecretesExoskeleton(x,y))"]}
{"id": "eqasc_train_907", "nl": "Australia's coral reefs, including the Great Barrier Reef, are no exception.", "fol": "", "prediction": ["all x.((CoralReef(x) & GreatBarrierReef(x)) -> -Exception(x))"]}
{"id": "eqasc_train_908", "nl": "The Great Barrier Reef was formed by exoskeletons", "fol": "", "prediction": ["all x.(GreatBarrierReef(x) -> FormedByExoskeletons(x))"]}
{"id": "eqasc_train_909", "nl": "Coral is made of the exoskeletons of many thousands of tiny marine animals called polyps.", "fol": "", "prediction": ["all x.(Coral(x) -> (MadeOfExoskeletonsOfTinyMarineAnimals(x) & Polyps(x)))"]}
{"id": "eqasc_train_910", "nl": "Coral reefs are made up of the exoskeletons of thousands of tiny polyps", "fol": "", "prediction": ["all x y.((CoralReef(x) & Polyp(y)) -> (MadeUpOfExoskeletons(x,y) & MillionsOfTinyPolyps(x)))"]}
{"id": "eqasc_train_911", "nl": "An insect has a hard outer covering called an exoskeleton.", "fol": "", "prediction": ["all x.(Insect(x) -> HasHardOuterCovering(x))"]}
{"id": "eqasc_train_912", "nl": "Many corals secrete a hard outer covering that builds up to become a coral reef.", "fol": "", "prediction": ["all x.(Coral(x) -> (SectsHardOuterCoating(x) & BuildsUpToCoralReef(x)))"]}
{"id": "eqasc_train_913", "nl": "Hard corals build by secreting calcium carbonate skeletons.", "fol": "", "prediction": ["all x.(HardCoral(x) -> BuildsBySectatingCalciumCarbonateSkeletons(x))"]}
{"id": "eqasc_train_914", "nl": "Corals construct an exoskeleton by secreting calcium  carbonate", "fol": "", "prediction": ["all x.(Coral(x) -> (ConstructsExoskeleton(x) & SecretesCalciumCarbonate(x)))"]}
{"id": "eqasc_train_915", "nl": "if a plant requires less water then that plant will survive in a drought", "fol": "", "prediction": ["all x y.((Plant(x) & RequiresLessWater(x) & Drought(y)) -> SurvivesIn(x,y))"]}
{"id": "eqasc_train_916", "nl": "Floods result from an overabundance of rainfall, droughts from a lack of rainfall.", "fol": "", "prediction": ["all x y.((Flood(x) & Drought(y)) -> (OverabundanceOfRainfall(x) & LackOfRainfall(y)))"]}
{"id": "eqasc_train_917", "nl": "if a plant requires less water then that plant will survive from a lack of rainfall.", "fol": "", "prediction": ["all x y.((Plant(x) & RequiresLessWater(x) & LackOfRainfall(y)) -> SurvivesFromLackOfRainfall(x,y))"]}
{"id": "eqasc_train_918", "nl": "Plants are heat and drought tolerant.", "fol": "", "prediction": ["all x.(Plant(x) -> (HeatTolerant(x) & DroughtTolerant(x)))"]}
{"id": "eqasc_train_919", "nl": "plants can tolerate a less water", "fol": "", "prediction": ["all x.((Plant(x) & ToleratesLessWater(x)) -> CanTolerateLessWater(x))"]}
{"id": "eqasc_train_920", "nl": "Cacti and succulents can go without water for a long period.", "fol": "", "prediction": ["all x.((Cactus(x) | Succulent(x)) -> CanGoWithoutWater(x))"]}
{"id": "eqasc_train_921", "nl": "cacti can survive in a drought", "fol": "", "prediction": ["all x y.((Cactus(x) & Drought(y)) -> SurvivesIn(x,y))"]}
{"id": "eqasc_train_922", "nl": "Shrub beds and ground covers require less water and provide more variety to the landscape.", "fol": "", "prediction": ["all x.((ShrubBed(x) | GroundCover(x)) -> (RequiresLessWater(x) & ProvidesMoreVariety(x)))"]}
{"id": "eqasc_train_923", "nl": "Shrub beds need less water and will survive in a drought.", "fol": "", "prediction": ["all x.(ShrubBed(x) -> (NeedsLessWater(x) & SurvivesInDrought(x)))"]}
{"id": "eqasc_train_924", "nl": "cacti are likely to survive in a drought", "fol": "", "prediction": ["all x.(Cactus(x) -> LikelyToSurviveInDrought(x))"]}
{"id": "eqasc_train_925", "nl": "if a plant requires less water then the plant will survive and is heat tolerent", "fol": "", "prediction": ["all x y.((Plant(x) & RequiresLessWater(x)) -> (Survives(x,y) & HeatTolerent(x,y)))"]}
{"id": "eqasc_train_926", "nl": "When there is a drought, there is no water under the fence.", "fol": "", "prediction": ["all x.(Drought(x) -> -WaterUnderFence(x))"]}
{"id": "eqasc_train_927", "nl": "if a plant requires less water then that plant will survive when there is no water under the fence", "fol": "", "prediction": ["all x y.((Plant(x) & RequiresLessWater(x) & Fence(y) & -WaterUnderFence(x,y)) -> Survives(x,y))"]}
{"id": "eqasc_train_928", "nl": "Some plants are extraordinarily tolerant of drought.", "fol": "", "prediction": ["exists x.(Plant(x) & ExceptionallyTolerantOfDrought(x))"]}
{"id": "eqasc_train_929", "nl": "Some vegetation requires less water and can tolerate a lack of it", "fol": "", "prediction": ["exists x.(Vegetation(x) & RequiresLessWater(x) & ToleratesLackOfWater(x))"]}
{"id": "eqasc_train_930", "nl": "Meteorological drought refers to dry conditions related to climate.", "fol": "", "prediction": ["all x.(MeteorologicalDrought(x) -> DryConditionsRelatedToClimate(x))"]}
{"id": "eqasc_train_931", "nl": "if a plant requires less water then that plant will survive dry conditions", "fol": "", "prediction": ["all x y.((Plant(x) & RequiresLessWater(x)) -> SurvivesDryConditions(x))"]}
{"id": "eqasc_train_932", "nl": "producing thrust causes something to move", "fol": "", "prediction": ["all x y.((ProducingThrust(x) & Thrust(y)) -> CausesMovement(x,y))"]}
{"id": "eqasc_train_933", "nl": "Another way to move a spacecraft is to thrust with gas jets.", "fol": "", "prediction": ["all x.(Spacecraft(x) -> MovesWithGasJets(x))"]}
{"id": "eqasc_train_934", "nl": "spacecraft are propelled by thrust", "fol": "", "prediction": ["all x.(Spacecraft(x) -> (PropelledByThrust(x) & PropelledByThrust(x)))"]}
{"id": "eqasc_train_935", "nl": "Airplanes create thrust using propellers, jet engines , or rockets .", "fol": "", "prediction": ["all x.(Airplane(x) -> (CreatesThruth(x) & (UsesPropellers(x) | UsesJetEngines(x) | UsesRockets(x))))"]}
{"id": "eqasc_train_936", "nl": "Some airplanes use propellers to move", "fol": "", "prediction": ["exists x.(Airplane(x) & UsesPropellers(x))"]}
{"id": "eqasc_train_937", "nl": "Engines are used to generate thrust.", "fol": "", "prediction": ["all x.(Engine(x) -> GeneratesThrust(x))"]}
{"id": "eqasc_train_938", "nl": "engines cause something to move", "fol": "", "prediction": ["all x y.((Engine(x) & Engine(y)) -> CausesMovement(x,y))"]}
{"id": "eqasc_train_939", "nl": "An engine is needed to provide the thrust for forward motion.", "fol": "", "prediction": ["all x.(Engine(x) -> NeededToProvidesThruthForForwardMotion(x))"]}
{"id": "eqasc_train_940", "nl": "causing something to move can need an engine", "fol": "", "prediction": ["all x.((CausingMovement(x) & NeedsEngine(x)) -> CanCauseMovement(x))"]}
{"id": "eqasc_train_941", "nl": "Opposite forces cause the thrust of the rocket.", "fol": "", "prediction": ["all x y.((OppositeForce(x) & Rocket(y)) -> CausesThruth(x,y))"]}
{"id": "eqasc_train_942", "nl": "Opposite forces cause something to move", "fol": "", "prediction": ["all x y.((OppositeForce(x) & Force(y)) -> CausesMovement(x,y))"]}
{"id": "eqasc_train_943", "nl": "Although electric rockets are efficient, their thrust is low.", "fol": "", "prediction": ["all x.(ElectricRaket(x) -> (Efficient(x) & LowThrust(x)))"]}
{"id": "eqasc_train_944", "nl": "rockets cause something to move", "fol": "", "prediction": ["all x y.((Rocket(x) & Something(y)) -> CausesToMove(x,y))"]}
{"id": "eqasc_train_945", "nl": "Then the engine spins up and starts producing thrust.", "fol": "", "prediction": ["all x.(Engine(x) -> (SpinsUp(x) & ProducesThruth(x)))"]}
{"id": "eqasc_train_946", "nl": "Each engine produces 6,000 lb of thrust.", "fol": "", "prediction": ["all x.(Engine(x) -> Produces(x,6000))"]}
{"id": "eqasc_train_947", "nl": "All rockets generate thrust by igniting an mixture of fuel and 'oxidiser'.", "fol": "", "prediction": ["all x.(Raket(x) -> (GeneratesThruth(x) & IgnitesFuel(x) & IgnitesOxidiser(x)))"]}
{"id": "eqasc_train_948", "nl": "Igniting a mixture of fuel and \"oxidiser\" causes a rocket to move", "fol": "", "prediction": ["all x y z.((IgnitesFuel(x) & Oxidizer(y) & Rocket(z)) -> Moves(z))"]}
{"id": "eqasc_train_949", "nl": "Impulsion is thrust, the release of stored energy into engagement.", "fol": "", "prediction": ["all x.(Impulsion(x) -> (Thrust(x) & ReleaseOfStoredEnergy(x) & Engages(x)))"]}
{"id": "eqasc_train_950", "nl": "Producing impulsion causes something to move.", "fol": "", "prediction": ["all x.(ProducesImprovement(x) -> CausesMovement(x))"]}
{"id": "eqasc_train_951", "nl": "a pesticide is used for protecting plants by killing insects", "fol": "", "prediction": ["all x y.((Pesticide(x) & Plant(y)) -> (ProtectsByKillingInsects(x,y) & KillsInsects(x,y)))"]}
{"id": "eqasc_train_952", "nl": "Excessive reliance on pesticides can kill friendly insects and predators.", "fol": "", "prediction": ["all x.((PesticideReliance(x) & Excessive(x)) -> (KillsFriendlyInsects(x) & KillsPredators(x)))"]}
{"id": "eqasc_train_953", "nl": "Pesticides protect plants by killing predators.", "fol": "", "prediction": ["all x y.((Pesticide(x) & Plant(y)) -> ProtectsByKillingPredators(x,y))"]}
{"id": "eqasc_train_954", "nl": "Insects eat our crops.", "fol": "", "prediction": ["all x.(Insect(x) -> EatsCrops(x))"]}
{"id": "eqasc_train_955", "nl": "Pesticides protect crops from being eaten by pests.", "fol": "", "prediction": ["all x y.((Pesticide(x) & Crop(y)) -> ProtectsFromPests(x,y))"]}
{"id": "eqasc_train_956", "nl": "All pesticides that contain DDT are dangerous pesticides.", "fol": "", "prediction": ["all x.((Pesticide(x) & ContainsDDT(x)) -> DangerousPesticide(x))"]}
{"id": "eqasc_train_957", "nl": "DDT is used to protect plants by killing insects.", "fol": "", "prediction": ["all x.(DDT(x) -> (ProtectsPlants(x) & KillsInsects(x)))"]}
{"id": "eqasc_train_958", "nl": "Insects have three body parts, a distinct head, thorax, and abdomen.", "fol": "", "prediction": ["all x.(Insect(x) -> (HasThreeBodyParts(x) & DistinctHead(x) & DistinctThorax(x) & DistinctAbdomen(x)))"]}
{"id": "eqasc_train_959", "nl": "A pesticide is used for protecting plants by killing something with a head, thorax, and abdoment", "fol": "", "prediction": ["all x y z.((Pesticide(x) & Plant(y) & Head(z) & Thorax(z) & Abdoment(z)) -> Kills(x,y,z))"]}
{"id": "eqasc_train_960", "nl": "Plants are poisoned by herbicides, animals by pesticides.", "fol": "", "prediction": ["all x y.((Plant(x) & Animal(y)) -> (PoisonedByHerbicides(x) | PoisonedByPesticides(y)))"]}
{"id": "eqasc_train_961", "nl": "plants are hurt by herbicides", "fol": "", "prediction": ["all x y.((Plant(x) & Herbicide(y)) -> Hurts(x,y))"]}
{"id": "eqasc_train_962", "nl": "Pesticides such as DDT are also of concern.", "fol": "", "prediction": ["all x.((Pesticide(x) & DDT(x)) -> OfPreoccupation(x))"]}
{"id": "eqasc_train_963", "nl": "DDT is used for protecting plants by killing insects", "fol": "", "prediction": ["all x y.((DDT(x) & Plant(y)) -> (ProtectsByKillingInsects(x,y) & KillsInsects(x,y)))"]}
{"id": "eqasc_train_964", "nl": "Small animals are harmed by pesticides.", "fol": "", "prediction": ["all x.(SmallAnimal(x) -> HarmedByPesticides(x))"]}
{"id": "eqasc_train_965", "nl": "Protecting plants can sometimes come at the expense of harming small animals ", "fol": "", "prediction": ["all x y.((Plant(x) & SmallAnimal(y)) -> (Protects(x,y) & OftenHasExpense(x,y)))"]}
{"id": "eqasc_train_966", "nl": "Pesticides also kill beneficial insects that pollinate flowers and prey upon harmful insects.", "fol": "", "prediction": ["all x.(Pesticide(x) -> (TreatsBeneficialInsects(x) & PollinatesFlowers(x) & PreysOnHarmfulInsects(x)))"]}
{"id": "eqasc_train_967", "nl": "Pesticide is used for protecting plants while killing beneficial pollinators.", "fol": "", "prediction": ["all x y.((Pesticide(x) & Plant(y)) -> (Protects(x,y) & KillsBeneficialPollinators(x)))"]}
{"id": "eqasc_train_968", "nl": "an herbicide poisons plants", "fol": "", "prediction": ["all x y.((Herbicide(x) & Plant(y)) -> Poison(x,y))"]}
{"id": "eqasc_train_969", "nl": "Pesticide use requires disposal of either excess pesticides or empty pesticide containers.", "fol": "", "prediction": ["all x.(PesticideUse(x) -> (RequiresExcessPesticides(x) | RequiresEmptyPesticideContainers(x)))"]}
{"id": "eqasc_train_970", "nl": "Something that requires special disposal is used for protecting plants by killing insects", "fol": "", "prediction": ["all x.((RequiresSpecialDepotage(x) & ProtectsPlantsByKillingInsects(x)) -> UsedForProtectingPlants(x))"]}
{"id": "eqasc_train_971", "nl": "staying warm has a positive impact on an animal 's survival", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> (StayingWarm(x) & PositiveImpactOnSurvival(x,y)))"]}
{"id": "eqasc_train_972", "nl": "Effective insulation is the way to keep the warm air warm.", "fol": "", "prediction": ["all x.((Insulation(x) & WarmAirWarm(x)) -> Effective(x))"]}
{"id": "eqasc_train_973", "nl": "Effective insulation has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x.((Insulation(x) & PositiveImpactOnSurvival(x)) -> Effective(x))"]}
{"id": "eqasc_train_974", "nl": "People cover up with a blanket to stay warm.", "fol": "", "prediction": ["all x y.((Person(x) & Blanket(y)) -> CoversUpToStayWarm(x,y))"]}
{"id": "eqasc_train_975", "nl": "Blankets have a positive impact on an animal's survival", "fol": "", "prediction": ["all x y.((Bluff(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "eqasc_train_976", "nl": "Animals who live in the forest have very soft, warm fur.", "fol": "", "prediction": ["all x.((Animal(x) & LivesInForest(x)) -> SoftWarmFur(x))"]}
{"id": "eqasc_train_977", "nl": "fur has a positive impact on a forest animal's survival", "fol": "", "prediction": ["all x y.((Fur(x) & ForestAnimal(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "eqasc_train_978", "nl": "staying warm has a positive impact on a human's survival", "fol": "", "prediction": ["all x y.((Hot(x) & Human(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "eqasc_train_979", "nl": "Everyone needs to conserve some energy to stay warm.", "fol": "", "prediction": ["all x.((NeedsToConserveEnergy(x) & StaysWarm(x)) -> NeedsToConserveEnergy(x))"]}
{"id": "eqasc_train_980", "nl": "Conserving energy has a positive impact on an animal's survival", "fol": "", "prediction": ["all x y.((Animal(x) & ConservingEnergy(x)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "eqasc_train_981", "nl": "Furry animals grow thicker coats to keep warm in the winter.", "fol": "", "prediction": ["all x.(FurryAnimal(x) -> (GrowsThickerCoats(x) & KeepsWarmInWinter(x)))"]}
{"id": "eqasc_train_982", "nl": "Furry animals grow thicker coats which has a positive impact on their survival. ", "fol": "", "prediction": ["all x.(FurryAnimal(x) -> (GrowsThickerCoats(x) & PositiveImpactOnSurvival(x)))"]}
{"id": "eqasc_train_983", "nl": "If it's cold weather, dress warmly and warm up longer.", "fol": "", "prediction": ["all x.((ColdWeather(x) & DressWarmly(x) & WarmUpLonger(x)) -> DressWarmly(x))"]}
{"id": "eqasc_train_984", "nl": "Dress for cold weather because you are also an animal.", "fol": "", "prediction": ["all x.((Animal(x) & DressForColdWeather(x)) -> DressForColdWeather(x))"]}
{"id": "eqasc_train_985", "nl": "Animals that survive develop an immunity, but are also carriers for life.", "fol": "", "prediction": ["all x.((Animal(x) & Survives(x)) -> (DevelopsImmunity(x) & CarrierForLife(x)))"]}
{"id": "eqasc_train_986", "nl": "staying warm has a positive impact on an animal 's ability to be a carrier for life", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> (StayingWarm(x) & PositiveImpactOnCarrier(y,x)))"]}
{"id": "eqasc_train_987", "nl": "Proper hydration is necessary to stay warm.", "fol": "", "prediction": ["all x.((Hydration(x) & Warm(x)) -> Proper(x))"]}
{"id": "eqasc_train_988", "nl": "hydration is needed for survival", "fol": "", "prediction": ["all x.(Hydration(x) -> NeededForSurvival(x))"]}
{"id": "eqasc_train_989", "nl": "Arctic animals have layers of fat and thick coats of fur to keep warm in the frigid Arctic climate.", "fol": "", "prediction": ["all x.(ArcticAnimal(x) -> (HasLayersOfFat(x) & HasThickCoatsOfFur(x) & KeepsWarmInFrozenArcticClimate(x)))"]}
{"id": "eqasc_train_990", "nl": "Layers of fat help Arctic animals survive", "fol": "", "prediction": ["all x y.((FatLayer(x) & ArcticAnimal(y)) -> HelpsSurvive(x,y))"]}
{"id": "eqasc_train_991", "nl": "With a thick fur coat and 4 inches of fat a bear stays warm.", "fol": "", "prediction": ["all x.((ThickFurCoat(x) & 4InchesOfFat(x)) -> BearStaysWarm(x))"]}
{"id": "eqasc_train_992", "nl": "fur and fat has a positive impact on an animal's survival", "fol": "", "prediction": ["all x y.((Fur(x) & Fat(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "eqasc_train_993", "nl": "Adaptive traits improve the chance of surviving and reproducing.", "fol": "", "prediction": ["all x.(AdaptiveTreatment(x) -> (ImprovesChanceOfSurviving(x) & ImprovesChanceOfReproducing(x)))"]}
{"id": "eqasc_train_994", "nl": "Staying warm has a positive impact on an animal's chances for reproduction.", "fol": "", "prediction": ["all x.((Animal(x) & StaysWarm(x)) -> PositiveImpactOnChancesForReproduction(x))"]}
{"id": "eqasc_train_995", "nl": "Man is an animal with primary instincts of survival.", "fol": "", "prediction": ["all x.(Man(x) -> (Animal(x) & PrimaryInstinctsOfSurvival(x)))"]}
{"id": "eqasc_train_996", "nl": "Warmth has a positive impact on mans survival", "fol": "", "prediction": ["all x.(Warmth(x) -> PositiveImpactOnMansSurvival(x))"]}
{"id": "eqasc_train_997", "nl": "if humans disturb animals in a location then those animals will move to a different location", "fol": "", "prediction": ["all x y z.((Human(x) & Animal(y) & Location(z) & Disturbs(x,y) & MovesToDifferentLocation(y,z)) -> MovesToDifferentLocation(y,z))"]}
{"id": "eqasc_train_998", "nl": "These animals are the first to disappear as human disturbance increases.", "fol": "", "prediction": ["all x.((Animal(x) & HumanDisturbance(x)) -> FirstToDispear(x))"]}
{"id": "eqasc_train_999", "nl": "Animals in a location are the first to disappear as disturbance increases.", "fol": "", "prediction": ["all x y.((Animal(x) & Location(y) & Disturbation(z)) -> Disappears(x,z))"]}
{"id": "eqasc_train_1000", "nl": "Some animals hide underground.", "fol": "", "prediction": ["exists x.(Animal(x) & HideUnderground(x))"]}
{"id": "eqasc_train_1001", "nl": "Prey will hide underground when disturbed", "fol": "", "prediction": ["all x y.((Prey(x) & Disturbed(y)) -> HideUnderground(x,y))"]}
{"id": "eqasc_train_1002", "nl": "Animals may not survive in new location.", "fol": "", "prediction": ["all x.(Animal(x) -> -SurvivesInNewLocation(x))"]}
{"id": "eqasc_train_1003", "nl": "If humans disturb animals, they may not survive ", "fol": "", "prediction": ["all x y.((Human(x) & Animal(y) & Disturbs(x,y)) -> MayNotSurvive(x,y))"]}
{"id": "eqasc_train_1004", "nl": "A small number of unscrupulous whale watching companies were also taking their clients too close to the animals and causing disturbance.", "fol": "", "prediction": ["all x y.((WhaleWatchingCompany(x) & WhaleWatchingCompany(y)) -> (TakesClientsToOtherAnimals(x,y) & CausesDisturbance(x,y)))"]}
{"id": "eqasc_train_1005", "nl": "Whales will move to a new location  due to whale watching boats", "fol": "", "prediction": ["all x y.((Whale(x) & WhaleWatchingBoat(y)) -> MovesToNewLocation(x,y))"]}
{"id": "eqasc_train_1006", "nl": "Controlling development controls human disturbances of the river bank and its watershed that can increase erosion, disturb animal habitat and consequently, impair water quality.", "fol": "", "prediction": ["all x y.((ControllingDevelopment(x) & RiverBank(y) & Watershed(z)) -> ControlsHumanDisturbances(x,y,z))"]}
{"id": "eqasc_train_1007", "nl": "development by humans can cause animals to move to different locations", "fol": "", "prediction": ["all x y.((Human(x) & Animal(y)) -> CausesMovement(x,y))"]}
{"id": "eqasc_train_1008", "nl": "Bears are intelligent animals.", "fol": "", "prediction": ["all x.(Bear(x) -> IntelligentAnimal(x))"]}
{"id": "eqasc_train_1009", "nl": "if humans disturb bears in a location then those bears will move to a different location", "fol": "", "prediction": ["all x y.((Human(x) & Bear(y) & Disturbs(x,y)) -> MovesToDifferentLocation(x,y))"]}
{"id": "eqasc_train_1010", "nl": "Different kinds of animals have different habitat requirements.", "fol": "", "prediction": ["all x.(Animal(x) -> DifferentHabitatRequirements(x))"]}
{"id": "eqasc_train_1011", "nl": "If humans disturb animals in a location, animals will require a moving habitats.", "fol": "", "prediction": ["all x y.((Human(x) & Animal(y) & Disturbs(x,y)) -> RequiresMovingHabitat(x,y))"]}
{"id": "eqasc_train_1012", "nl": "Migration- Movement of a group of animals from one place to another.", "fol": "", "prediction": ["all x y.((AnimalGroup(x) & Place(y)) -> MovesFromTo(x,y))"]}
{"id": "eqasc_train_1013", "nl": "if humans disturb creatures then they migrate", "fol": "", "prediction": ["all x y.((Human(x) & Creature(y) & Disturbs(x,y)) -> Migrates(x,y))"]}
{"id": "eqasc_train_1014", "nl": "The human being is self-aware.", "fol": "", "prediction": ["all x.(HumanBeing(x) -> SelfAware(x))"]}
{"id": "eqasc_train_1015", "nl": "If something that is self-aware disturbs animals in a location then those animals will move to a different location", "fol": "", "prediction": ["all x y.((SelfAware(x) & Animal(y) & DisturbsInLocation(x,y)) -> MovesToDifferentLocation(x,y))"]}
{"id": "eqasc_train_1016", "nl": "evaporation can be used for separating a solute from a solvent in a solution", "fol": "", "prediction": ["all x y z.((Evaporation(x) & Solute(y) & Solvent(z)) -> SeparatesInSolution(x,y,z))"]}
{"id": "eqasc_train_1017", "nl": "For example, in salt water, salt is the solute and water is the solvent.", "fol": "", "prediction": ["all x y.((SaltWater(x) & Salt(y)) -> (Solute(y) & Solvent(y)))"]}
{"id": "eqasc_train_1018", "nl": "evaporation can be used for separating salt from water", "fol": "", "prediction": ["all x y.((Evaporation(x) & Salt(y)) -> SeparatesFromWater(x,y))"]}
{"id": "eqasc_train_1019", "nl": "evaporation can remove salt from water", "fol": "", "prediction": ["all x y.((Evaporation(x) & Water(y)) -> RemovesSalt(x,y))"]}
{"id": "eqasc_train_1020", "nl": "Boiling is very rapid evaporization.", "fol": "", "prediction": ["all x.(Boiling(x) -> VeryRapidEvaporation(x))"]}
{"id": "eqasc_train_1021", "nl": "boiling can be used for separating a solute from a solvent in a solution", "fol": "", "prediction": ["all x y z.((Boiling(x) & Solute(y) & Solvent(z)) -> SeparatesInSolution(x,y,z))"]}
{"id": "eqasc_train_1022", "nl": "Water as a Solvent Water is an excellent solvent.", "fol": "", "prediction": ["all x.(SolventWater(x) -> ExcellentSolventWater(x))"]}
{"id": "eqasc_train_1023", "nl": "evaporation can be used for separating a solute from Water", "fol": "", "prediction": ["all x y.((Evaporation(x) & Solute(y)) -> SeparatesFromWater(x,y))"]}
{"id": "eqasc_train_1024", "nl": "Table salt is a typical evaporated salt product.", "fol": "", "prediction": ["all x.(TableSalt(x) -> EvaporatedSaltProduct(x))"]}
{"id": "eqasc_train_1025", "nl": "separating a solute from a solvent in a solution can create table salt", "fol": "", "prediction": ["all x y z.((Solute(x) & Solvent(y) & Solvent(z) & SeparatesInSolution(x,y,z)) -> CreatesTableSalt(x))"]}
{"id": "eqasc_train_1026", "nl": "An aqueous solution has water as the solvent.", "fol": "", "prediction": ["all x.(AqueousSolution(x) -> HasWaterAsSolvent(x))"]}
{"id": "eqasc_train_1027", "nl": "Evaporation can be used for separating a solute from a water in an aqueous solution", "fol": "", "prediction": ["all x y z.((Evaporation(x) & Solute(y) & Water(z)) -> SeparatesInAqueousSolution(x,y,z))"]}
{"id": "eqasc_train_1028", "nl": "Solvent Paints Solvent paints use organic solvents as the volatile vehicle.", "fol": "", "prediction": ["all x.(SolventPaint(x) -> UsesOrganicSolvents(x))"]}
{"id": "eqasc_train_1029", "nl": "evaporation can be used for separating a solute from a volatile vehicle", "fol": "", "prediction": ["all x y z.((Evaporation(x) & Solute(y) & VolatileVehicle(z)) -> SeparatesFrom(x,y,z))"]}
{"id": "eqasc_train_1030", "nl": "Energy in the form of heat causes evaporation.", "fol": "", "prediction": ["all x.((Energy(x) & Heat(x)) -> CausesEvaporation(x))"]}
{"id": "eqasc_train_1031", "nl": "heat can be used to separate a solute from a solvent in a solution", "fol": "", "prediction": ["all x y z.((Heat(x) & Solute(y) & Solvent(z)) -> SeparatesInSolution(x,y,z))"]}
{"id": "eqasc_train_1032", "nl": "Evaporation occurs when a liquid dries.", "fol": "", "prediction": ["all x.((Liquid(x) & Drys(x)) -> Evaporation(x))"]}
{"id": "eqasc_train_1033", "nl": "Liquid drying can be used to separate a solute from a solvent.", "fol": "", "prediction": ["all x y.((LiquidDrying(x) & Solute(y)) -> SeparatesFromSolvent(x,y))"]}
{"id": "eqasc_train_1034", "nl": "Solvent separated from the solution is likely to damage plants.", "fol": "", "prediction": ["all x.((Solvent(x) & SeparatedFromSolution(x)) -> LikelyToDamagePlants(x))"]}
{"id": "eqasc_train_1035", "nl": "Evaporation can be used to damage plants.", "fol": "", "prediction": ["all x.(Evaporation(x) -> DamagesPlants(x))"]}
{"id": "eqasc_train_1036", "nl": "Gasoline, paints and solvents evaporate, releasing reactive organic compounds.", "fol": "", "prediction": ["all x y z.((Gasoline(x) & Paints(y) & Solvents(z)) -> (Evaporates(x,y) & ReleasesReactiveOrganicCompounds(x)))"]}
{"id": "eqasc_train_1037", "nl": "Gasoline releases organic compounds when it separates", "fol": "", "prediction": ["all x.((Gasoline(x) & Separates(x)) -> ReleasesOrganicCompounds(x))"]}
{"id": "eqasc_train_1038", "nl": "Heating liquids is also made easier by allowing saturated gas to reduce evaporation.", "fol": "", "prediction": ["all x.((HeatingLiquids(x) & AllowsSaturatedGasToReduceEvaporation(x)) -> MadeEasier(x))"]}
{"id": "eqasc_train_1039", "nl": "Heating liquids can be used to separate a solute from a solvent in a solution.", "fol": "", "prediction": ["all x y.((HeatingLiquid(x) & Solute(y)) -> SeparatesFromSolvent(x,y))"]}
{"id": "eqasc_train_1040", "nl": "Samples are segregated by mission in separate gloveboxes.", "fol": "", "prediction": ["all x.(Sample(x) -> (SegregatedByMission(x) & SeparateGlovebox(x)))"]}
{"id": "eqasc_train_1041", "nl": "Evaporation can be used for segregation a solute from a solvent in a solution.", "fol": "", "prediction": ["all x y.((Evaporation(x) & Solute(y)) -> SegregatesInSolution(x,y))"]}
{"id": "eqasc_train_1042", "nl": "Boiling is evaporation that occurs theroughout a liquid.", "fol": "", "prediction": ["all x.(Boiling(x) -> (Evaporation(x) & OccursThroughoutLiquid(x)))"]}
{"id": "eqasc_train_1043", "nl": "Girls and boys residences are separate and far apart.", "fol": "", "prediction": ["all x.(Residence(x) -> (Separate(x) & FarApart(x)))"]}
{"id": "eqasc_train_1044", "nl": "evaporation can be used to move a solute apart from a solvent in a solution.", "fol": "", "prediction": ["all x y.((Solute(x) & Solvent(y)) -> MovesApartFrom(x,y))"]}
{"id": "eqasc_train_1045", "nl": "if an animal sweats then that animal 's bodily water decreases", "fol": "", "prediction": ["all x y.((Animal(x) & Sweats(x)) -> BodyWaterDecreases(y))"]}
{"id": "eqasc_train_1046", "nl": "Dehydration is the loss of total body water.", "fol": "", "prediction": ["all x.(Dehydration(x) -> LossOfTotalBodyWater(x))"]}
{"id": "eqasc_train_1047", "nl": "An animal sweating can become dehydrated", "fol": "", "prediction": ["all x.((Animal(x) & Sweating(x)) -> Dehydrated(x))"]}
{"id": "eqasc_train_1048", "nl": "if an animal sweats it can cause Dehydration", "fol": "", "prediction": ["all x y.((Animal(x) & Sweats(x)) -> CanCauseDehydration(y))"]}
{"id": "eqasc_train_1049", "nl": "When animals sweat, evaporation of the sweat takes away body heat, thus cooling the animal.", "fol": "", "prediction": ["all x y.((Animal(x) & Sweat(x)) -> (EvaporationOfSweat(x,y) & TakesAwayBodyHeat(y) & CoolsAnimal(x)))"]}
{"id": "eqasc_train_1050", "nl": "sweating takes away body heat", "fol": "", "prediction": ["all x.(Sweeping(x) -> TakesAwayBodyHeat(x))"]}
{"id": "eqasc_train_1051", "nl": "Sweat is the result of excessive physical and emotional exertion.", "fol": "", "prediction": ["all x.(Sweat(x) -> (ExcessiveExertion(x) & ExcessiveExertion(x) & ExcessiveExertion(x)))"]}
{"id": "eqasc_train_1052", "nl": "Excessive physical and emotional exertion decreases an animal's bodily water.", "fol": "", "prediction": ["all x.(ExcessiveExertion(x) -> DecreasesBodylyWater(x))"]}
{"id": "eqasc_train_1053", "nl": "Dehydration is the removal of the water.", "fol": "", "prediction": ["all x.(Dehydration(x) -> RemovesWater(x))"]}
{"id": "eqasc_train_1054", "nl": "if an animal sweats, the animal becomes dehydrated", "fol": "", "prediction": ["all x y.((Animal(x) & Sweats(x)) -> Dehydrated(y))"]}
{"id": "eqasc_train_1055", "nl": "Human beings are animals.", "fol": "", "prediction": ["all x.(Human(x) -> Animal(x))"]}
{"id": "eqasc_train_1056", "nl": "if a human sweats its bodily water decreases", "fol": "", "prediction": ["all x y.((Human(x) & Sweats(x,y)) -> BodyWaterDecreases(x))"]}
{"id": "eqasc_train_1057", "nl": "Sweat glands help regulate our body temperature and release water and salt.", "fol": "", "prediction": ["all x.(SweatGlands(x) -> (HelpsRegulateBodyTemperature(x) & ReleasesWaterAndSalt(x)))"]}
{"id": "eqasc_train_1058", "nl": "When an animal regulates their body temperature by releasing water, their bodily water decreases", "fol": "", "prediction": ["all x y.((Animal(x) & BodyTemperature(y) & ReleasesWater(x,y)) -> BodyWaterDecreases(x,y))"]}
{"id": "eqasc_train_1059", "nl": "Sweat and perspiration are an annoyance with glasses.", "fol": "", "prediction": ["all x.((Sweat(x) | Perspiration(x)) -> AnannoyanceWithGlasses(x))"]}
{"id": "eqasc_train_1060", "nl": "If an animal perspires than that animals bodily water decreases.", "fol": "", "prediction": ["all x.(Perspires(x) -> BodyWaterDecreases(x))"]}
{"id": "eqasc_train_1061", "nl": "Just like sweating, the evaporation of the water cools the body.", "fol": "", "prediction": ["all x.((EvaporationOfWater(x) & Sweating(x)) -> CoolsBody(x))"]}
{"id": "eqasc_train_1062", "nl": "animals sweat to cool off", "fol": "", "prediction": ["all x.(Animal(x) -> SweatsToCool(x))"]}
{"id": "eqasc_train_1063", "nl": "Lions are very scary animals.", "fol": "", "prediction": ["all x.(Lion(x) -> ScaryAnimal(x))"]}
{"id": "eqasc_train_1064", "nl": "If a lion sweats its bodily water decreases", "fol": "", "prediction": ["all x.((Lion(x) & Sweats(x)) -> BodyWaterDecreases(x))"]}
{"id": "eqasc_train_1065", "nl": "Sweat is produced to cool the skin down.", "fol": "", "prediction": ["all x.(Sweat(x) -> CoolsSkinDown(x))"]}
{"id": "eqasc_train_1066", "nl": "animals can cool themselves down by decreasing bodily water", "fol": "", "prediction": ["all x.((Animal(x) & BodyWater(y)) -> CoolsDownByDecreasing(x,y))"]}
{"id": "eqasc_train_1067", "nl": "Some animals sweat, some pant, some lick.", "fol": "", "prediction": ["exists x.(Animal(x) & Sweat(x) & exists y.(Animal(y) & Pant(y)) & exists z.(Animal(z) & Licker(z))))"]}
{"id": "eqasc_train_1068", "nl": "An animal panting has decreased body water", "fol": "", "prediction": ["all x.(AnimalPanting(x) -> DecreasedBodyWater(x))"]}
{"id": "eqasc_train_1069", "nl": "Human beings are group animals.", "fol": "", "prediction": ["all x.(Human(x) -> GroupAnimal(x))"]}
{"id": "eqasc_train_1070", "nl": "sweating reduces a human's bodily water", "fol": "", "prediction": ["all x y.((Human(x) & Sweating(y)) -> ReducesBodyWater(y,x))"]}
{"id": "eqasc_train_1071", "nl": "Humans are only animals.", "fol": "", "prediction": ["all x.(Human(x) -> Animal(x))"]}
{"id": "eqasc_train_1072", "nl": "if humans sweat, their bodily water decreases", "fol": "", "prediction": ["all x y.((Human(x) & Human(y) & Sweats(x,y)) -> BodyWaterDecreases(y))"]}
{"id": "eqasc_train_1073", "nl": "Dogs only sweat from the bottoms of their feet, the only way they can discharge heat is by panting.", "fol": "", "prediction": ["all x.(Dog(x) -> (SweatsFromBottoms(x) & -Pangs(x)))"]}
{"id": "eqasc_train_1074", "nl": "A dog's bodily water can exit through the bottoms of their feet", "fol": "", "prediction": ["all x.(Dog(x) -> CanExitBodylyWaterThroughBottomsOfFeet(x))"]}
{"id": "eqasc_train_1075", "nl": "Many animals have developed ways of getting rid of extra heat by sweating or panting.", "fol": "", "prediction": ["all x.(Animal(x) -> (DevelopedSweatingOrPanning(x) & GetsExtraHeat(x)))"]}
{"id": "eqasc_train_1076", "nl": "Many animals  ways of getting rid of extra heat  makes bodily water decrease", "fol": "", "prediction": ["all x.((Animal(x) & GetsRidOfExtraHeat(x)) -> MakesBodylyWaterDecrease(x))"]}
{"id": "eqasc_train_1077", "nl": "Most of the time, sweating can reduce body-heat.", "fol": "", "prediction": ["all x.(Sweating(x) -> ReducesBodyHeat(x))"]}
{"id": "eqasc_train_1078", "nl": "reducing body-heat decreases an animal's bodily water", "fol": "", "prediction": ["all x y.((Animal(x) & BodyHeat(y)) -> ReducesBodyWater(x,y))"]}
{"id": "eqasc_train_1079", "nl": "Viruses contain DNA but not much else.", "fol": "", "prediction": ["all x.(Virus(x) -> (ContainsDNA(x) & -ContainsMuchOther(x)))"]}
{"id": "eqasc_train_1080", "nl": "DNA DNA DNA is a person's genetic fingerprint.", "fol": "", "prediction": ["all x.(DNA(x) -> GeneticFingerprint(x))"]}
{"id": "eqasc_train_1081", "nl": "Viruses contain genetic material and not much else.", "fol": "", "prediction": ["all x.(Virus(x) -> (ContainsGeneticMaterial(x) & -ContainsMuchOther(x)))"]}
{"id": "eqasc_train_1082", "nl": "DNA DNA is deoxyribonucleic acid.", "fol": "", "prediction": ["all x.(DNA(x) -> DeoxyribonucleicAcid(x))"]}
{"id": "eqasc_train_1083", "nl": "Viruses contain deoxyribonucleic acid, but not much else.", "fol": "", "prediction": ["all x.(Virus(x) -> (ContainsDeoxyribonucleicAcid(x) & -ContainsDeoxyribonucleicAcid(x)))"]}
{"id": "eqasc_train_1084", "nl": "DNA is short for Deoxyribonucleic Acid.", "fol": "", "prediction": ["all x.(DNA(x) -> ShortForDeoxyribonucleicAcid(x))"]}
{"id": "eqasc_train_1085", "nl": "Viruses contain deoxyribonucleic acid but not much else.", "fol": "", "prediction": ["all x.(Virus(x) -> (ContainsDeoxyribonucleicAcid(x) & -ContainsDeoxyribonucleicAcid(x)))"]}
{"id": "eqasc_train_1086", "nl": "DNA is an abbreviation for deoxyribonucleic acid.", "fol": "", "prediction": ["all x.(DNA(x) -> AbbreviationForDeoxyribonucleicAcid(x))"]}
{"id": "eqasc_train_1087", "nl": "DNA Structure DNA Structure DNA is a right hand double helix of polynucleotides.", "fol": "", "prediction": ["all x.(DNAStructure(x) -> DNAStructure(x))"]}
{"id": "eqasc_train_1088", "nl": "Viruses contain a right hand double helix of polynucleotides but not much else", "fol": "", "prediction": ["all x.(Virus(x) -> (ContainsRightHandDoppelHelixOfPolynucleotides(x) & -ContainsMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfMuchOfM-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-M-"]}
{"id": "eqasc_train_1089", "nl": "DNA can reproduce itself.", "fol": "", "prediction": ["all x.(DNA(x) -> CanReproduce(x))"]}
{"id": "eqasc_train_1090", "nl": "viruses can reproduce themselves", "fol": "", "prediction": ["all x.(Virus(x) -> CanReproduce(x))"]}
{"id": "eqasc_train_1091", "nl": "DNA is encoded information.", "fol": "", "prediction": ["all x.(DNA(x) -> EncodedInformation(x))"]}
{"id": "eqasc_train_1092", "nl": "viruses contain encoded information but not much else", "fol": "", "prediction": ["all x.(Virus(x) -> (ContainsEncodedInformation(x) & -ContainsEncodedInformation(x)))"]}
{"id": "eqasc_train_1093", "nl": "Viruses contain deosyribonucleic acid, but not much else.", "fol": "", "prediction": ["all x.(Virus(x) -> (ContainsDeosyribonucleicAcid(x) & -ContainsDeosyribonucleicAcid(x)))"]}
{"id": "eqasc_train_1094", "nl": "DNA contains the genetic information for life.", "fol": "", "prediction": ["all x.(DNA(x) -> ContainsGeneticInformationForLife(x))"]}
{"id": "eqasc_train_1095", "nl": "Viruses contain the genetic information for life but not much else", "fol": "", "prediction": ["all x.(Virus(x) -> (ContainsGeneticInformation(x) & -ContainsGeneticInformation(x)))"]}
{"id": "eqasc_train_1096", "nl": "HIV virus contains RNA", "fol": "", "prediction": ["all x.(HIVVirus(x) -> ContainsRNA(x))"]}
{"id": "eqasc_train_1097", "nl": "Examples include influenza, rabies, HIV, and Herpes viruses.", "fol": "", "prediction": ["(Influenza(x) | Rabies(x) | HIV(x) | HerpesVirus(x)))"]}
{"id": "eqasc_train_1098", "nl": "HIV contains DNA", "fol": "", "prediction": ["all x.(HIV(x) -> ContainsDNA(x))"]}
{"id": "eqasc_train_1099", "nl": "smallpox contains DNA but not much else", "fol": "", "prediction": ["all x.(Smallpox(x) -> (ContainsDNA(x) & -ContainsDNA(x)))"]}
{"id": "eqasc_train_1100", "nl": "Prions are different than bacteria or viruses.", "fol": "", "prediction": ["all x.(Principle(x) -> (DifferentFromBacteria(x) | DifferentFromViruses(x)))"]}
{"id": "eqasc_train_1101", "nl": "DNA is not in Prions", "fol": "", "prediction": ["all x.(DNA(x) -> -InPrions(x))"]}
{"id": "eqasc_train_1102", "nl": "DNA stands for Deoxyribonucleicacid.", "fol": "", "prediction": ["all x.(DNA(x) -> Deoxyribonucleicacid(x))"]}
{"id": "eqasc_train_1103", "nl": "Viruses contain Deoxyribonucleicacid but not much else.", "fol": "", "prediction": ["all x.(Virus(x) -> (ContainsDeoxyribonucleicacid(x) & -ContainsMuchOther(x)))"]}
{"id": "eqasc_train_1104", "nl": "All viruses consist of RNA or DNA and a protein coat.", "fol": "", "prediction": ["all x.(Virus(x) -> (ConsistsOfRNAOrDNA(x) & ProteinCoat(x)))"]}
{"id": "eqasc_train_1105", "nl": "viruses have RNA", "fol": "", "prediction": ["all x.(Virus(x) -> HasRNA(x))"]}
{"id": "eqasc_train_1106", "nl": "Viruses are germs that cause people to get sick.", "fol": "", "prediction": ["all x.(Virus(x) -> CausesSickness(x))"]}
{"id": "eqasc_train_1107", "nl": "germs that cause people to get sick contain DNA but not much else", "fol": "", "prediction": ["all x.((Germs(x) & CausesPeopleToGetSick(x)) -> (ContainsDNA(x) & -ContainsMuchOther(x)))"]}
{"id": "eqasc_train_1108", "nl": "microbial fuel cells convert chemical energy into electrical energy", "fol": "", "prediction": ["all x.(MicrobialFuelCell(x) -> ConvertsChemicalEnergyToElectricalEnergy(x))"]}
{"id": "eqasc_train_1109", "nl": "Computers run on electricity.", "fol": "", "prediction": ["all x.(Computer(x) -> RunsOnElectricity(x))"]}
{"id": "eqasc_train_1110", "nl": "fuel cells can power computers", "fol": "", "prediction": ["all x.(FuelCell(x) -> PowerComputers(x))"]}
{"id": "eqasc_train_1111", "nl": "Power involves electrical energy.", "fol": "", "prediction": ["all x.(Power(x) -> InvolvesElectricalEnergy(x))"]}
{"id": "eqasc_train_1112", "nl": "Microbial fuel cells convert chemical energy into power.", "fol": "", "prediction": ["all x.(MicrobialFuelCell(x) -> ConvertsChemicalEnergyToPower(x))"]}
{"id": "eqasc_train_1113", "nl": "Fuel cells are devices that directly convert hydrogen into electricity.", "fol": "", "prediction": ["all x.(FuelCell(x) -> (Device(x) & ConvertsHydrogenToElectricity(x)))"]}
{"id": "eqasc_train_1114", "nl": "Microbial cells can transform hydrogen into electrical energy", "fol": "", "prediction": ["all x.(MicrobialCell(x) -> TransformsHydrogenToElectricalEnergy(x))"]}
{"id": "eqasc_train_1115", "nl": "Electric generators convert mechanical energy into electric energy.", "fol": "", "prediction": ["all x.(ElectricGenerator(x) -> ConvertsMechanicalEnergyToElectricEnergy(x))"]}
{"id": "eqasc_train_1116", "nl": "microbial fuel cells and electric generators both create electricity", "fol": "", "prediction": ["all x y.((MicrobialFuelCell(x) & ElectricGenerator(y)) -> (CreatesElectricity(x) & CreatesElectricity(y)))"]}
{"id": "eqasc_train_1117", "nl": "Food is chemical energy.", "fol": "", "prediction": ["all x.(Food(x) -> ChemicalEnergy(x))"]}
{"id": "eqasc_train_1118", "nl": "microbial fuel cells convert food into electrical energy", "fol": "", "prediction": ["all x y.((MicrobialFuelCell(x) & Food(y)) -> ConvertsToElectricalEnergy(x,y))"]}
{"id": "eqasc_train_1119", "nl": "Electrical energy can be converted into kinetic energy and heat energy by an electric motor.", "fol": "", "prediction": ["all x y.((ElectricalEnergy(x) & ElectricMotor(y)) -> (ConvertsIntoKineticEnergy(x,y) & ConvertsIntoHeatEnergy(x,y)))"]}
{"id": "eqasc_train_1120", "nl": "Microbial fuel cells convert chemical energy into something that can be converted into kinetic energy and heat energy by a motor", "fol": "", "prediction": ["all x y z.((MicrobialFuelCell(x) & ChemicalEnergy(y) & KineticEnergy(z)) -> ConvertsTo(x,y,z))"]}
{"id": "eqasc_train_1121", "nl": "Electricity is a kinetic energy.", "fol": "", "prediction": ["all x.(Electricity(x) -> KineticEnergy(x))"]}
{"id": "eqasc_train_1122", "nl": "microbial fuel cells convert chemical energy into kinetic energy", "fol": "", "prediction": ["all x y.((MicrobialFuelCell(x) & ChemicalEnergy(y)) -> ConvertsToKineticEnergy(x,y))"]}
{"id": "eqasc_train_1123", "nl": "microbial fuel cells convert chemical energy into a flow of electrons", "fol": "", "prediction": ["all x y.((MicrobialFuelCell(x) & ChemicalEnergy(y)) -> ConvertsToElectrons(x,y))"]}
{"id": "eqasc_train_1124", "nl": "the color of leaves on deciduous trees usually changes in the autumn season", "fol": "", "prediction": ["all x y.((Leaves(x) & DeciduousTree(y)) -> ChangesColorInAutumn(x,y))"]}
{"id": "eqasc_train_1125", "nl": "Many broad-leaved trees are deciduous.", "fol": "", "prediction": ["all x.(BroadLeavedTree(x) -> Deciduous(x))"]}
{"id": "eqasc_train_1126", "nl": "The color of leaves on many broad-leaved trees usually change in the autumn season.", "fol": "", "prediction": ["all x y.((BroadLeavedTree(x) & Leaves(y)) -> ChangesColorInAutumn(x,y))"]}
{"id": "eqasc_train_1127", "nl": "Leaves change color, snow falls, and spring brings back the greenery.", "fol": "", "prediction": ["all x y z.((Leaves(x) & Snow(y) & Spring(z)) -> (ChangesColor(x) & Falls(y) & BringsBackGreenery(z)))"]}
{"id": "eqasc_train_1128", "nl": "the season of autumn happens before snow falls, and spring brings back the greenery", "fol": "", "prediction": ["all x y z.((Autumn(x) & Snow(y) & Spring(z)) -> (OccursBefore(x,y) & BringsBackGreenery(z,y)))"]}
{"id": "eqasc_train_1129", "nl": "Common deciduous trees are the oak, elm and beech.", "fol": "", "prediction": ["all x.(DeciduousTree(x) -> (Oak(x) | Elm(x) | Beech(x)))"]}
{"id": "eqasc_train_1130", "nl": "the color of leaves on oak trees usually changes in the autumn season ", "fol": "", "prediction": ["all x y.((Leaves(x) & OakTree(y)) -> ChangesColorInAutumn(x,y))"]}
{"id": "eqasc_train_1131", "nl": "Mulberry trees are deciduous.", "fol": "", "prediction": ["all x.(MulberryTree(x) -> Deciduous(x))"]}
{"id": "eqasc_train_1132", "nl": "Mulberry trees change colors in autumn", "fol": "", "prediction": ["all x.(MulberryTree(x) -> ChangesColorInAutumn(x))"]}
{"id": "eqasc_train_1133", "nl": "Peachleaf willow is a deciduous tree.", "fol": "", "prediction": ["all x.(PeachleafWillow(x) -> DeciduousTree(x))"]}
{"id": "eqasc_train_1134", "nl": "A peachleaf willow changes colors in the autumn season", "fol": "", "prediction": ["all x.((PeachleafWillow(x) & AutumnSeason(x)) -> ChangesColorsInAutumn(x))"]}
{"id": "eqasc_train_1135", "nl": "Fall colors begin as deciduous trees lose their leaves.", "fol": "", "prediction": ["all x.((DeciduousTree(x) & LosesLeaves(x)) -> FallColors(x))"]}
{"id": "eqasc_train_1136", "nl": "Fall begins as deciduous trees lose their leaves in the autumn season.", "fol": "", "prediction": ["all x.((DeciduousTree(x) & LosesLeavesInAutumn(x)) -> Fall(x))"]}
{"id": "eqasc_train_1137", "nl": "Autumn is a season of transistion as the warm summer days fade giving way to cooler weather.", "fol": "", "prediction": ["all x.(Autumn(x) -> (WarmSummerDaysFade(x) & CoolerWeather(x)))"]}
{"id": "eqasc_train_1138", "nl": "Deciduous trees have leaves that change color when summer fades.", "fol": "", "prediction": ["all x.(DeciduousTree(x) -> (HasLeaves(x) & ChangesColorWhenSummerFades(x)))"]}
{"id": "eqasc_train_1139", "nl": "the color of leaves on peachleaf willows usually changes in the autumn season", "fol": "", "prediction": ["all x y.((Leaves(x) & PeachleafWillow(y)) -> ChangesColorInAutumn(x,y))"]}
{"id": "eqasc_train_1140", "nl": "Deciduous trees are Oak, Elm, Ash, Maple, and Birch.", "fol": "", "prediction": ["all x.(DeciduousTree(x) -> (Oak(x) | Elm(x) | Ash(x) | Maple(x) | Birch(x)))"]}
{"id": "eqasc_train_1141", "nl": "the color of leaves on oaks usually changes in the autumn season", "fol": "", "prediction": ["all x y.((Leaves(x) & Oak(y)) -> ChangesColorInAutumn(x,y))"]}
{"id": "eqasc_train_1142", "nl": "Douglas Fir trees have fir cones.", "fol": "", "prediction": ["all x.(DouglasFir(x) -> HasFfirCones(x))"]}
{"id": "eqasc_train_1143", "nl": "Conifers do not change colors with the season.", "fol": "", "prediction": ["all x.(Conifer(x) -> -ChangeColorWithSeason(x))"]}
{"id": "eqasc_train_1144", "nl": "a prism is used for refracting light", "fol": "", "prediction": ["all x y.((Prism(x) & Light(y)) -> UsedForRefracting(x,y))"]}
{"id": "eqasc_train_1145", "nl": "Light contains energy.", "fol": "", "prediction": ["all x.(Light(x) -> ContainsEnergy(x))"]}
{"id": "eqasc_train_1146", "nl": "A prism is used for refracting energy.", "fol": "", "prediction": ["all x.(Prism(x) -> UsedForRefractingEnergy(x))"]}
{"id": "eqasc_train_1147", "nl": "Light is described both as wavelengths and photons.", "fol": "", "prediction": ["all x.(Light(x) -> (Wavelength(x) & Photon(x)))"]}
{"id": "eqasc_train_1148", "nl": "a prism is used for refracting wavelengths and photons", "fol": "", "prediction": ["all x y.((Prism(x) & Wavelength(y)) -> UsedForRefracting(x,y))"]}
{"id": "eqasc_train_1149", "nl": "Light passing through a prism is refracted or divided into the colors of the spectrum.", "fol": "", "prediction": ["all x y.((Light(x) & Prism(y) & PassesThrough(x,y)) -> (Refracted(x) | DividedIntoColors(x)))"]}
{"id": "eqasc_train_1150", "nl": "The refracted light is separated into the color spectrum", "fol": "", "prediction": ["all x y.((RefractedLight(x) & ColorSpectrum(y)) -> SeparatedInto(x,y))"]}
{"id": "eqasc_train_1151", "nl": "Refraction Refraction is the bending of light rays.", "fol": "", "prediction": ["all x.(Refraction(x) -> BendingLightRays(x))"]}
{"id": "eqasc_train_1152", "nl": "Prisms are used to bend light", "fol": "", "prediction": ["all x.(Prism(x) -> BendLight(x))"]}
{"id": "eqasc_train_1153", "nl": "Refraction is the bending of a ray of light.", "fol": "", "prediction": ["all x.(Refraction(x) -> BendingOfRayOfLight(x))"]}
{"id": "eqasc_train_1154", "nl": "A prism can be used to bend a ray of light.", "fol": "", "prediction": ["all x.(Prism(x) -> BendsRayOfLight(x))"]}
{"id": "eqasc_train_1155", "nl": "Glass prisms are heavy.", "fol": "", "prediction": ["all x.(GlassPrism(x) -> Heavy(x))"]}
{"id": "eqasc_train_1156", "nl": "glass is used for refracting light", "fol": "", "prediction": ["all x.(Glass(x) -> UsedForRefractingLight(x))"]}
{"id": "eqasc_train_1157", "nl": "a prism is used for refracting rays or beams", "fol": "", "prediction": ["all x.(Prism(x) -> (RefractsRays(x) | RefractsBeams(x)))"]}
{"id": "eqasc_train_1158", "nl": "Glass prisms and mirrors are used to mainipulate the light rays.", "fol": "", "prediction": ["all x y.((GlassPrism(x) & Mirror(y)) -> MainipulatesLightRays(x,y))"]}
{"id": "eqasc_train_1159", "nl": "prisms refract light", "fol": "", "prediction": ["all x.(Prism(x) -> RefractLight(x))"]}
{"id": "eqasc_train_1160", "nl": "A prism bends light rays.", "fol": "", "prediction": ["all x.(Prism(x) -> BendsLightRays(x))"]}
{"id": "eqasc_train_1161", "nl": "A prism is used to split light into colors", "fol": "", "prediction": ["all x y z.((Prism(x) & Light(y) & Color(z)) -> SplitsInto(x,y,z))"]}
{"id": "eqasc_train_1162", "nl": "Prism A prism is a solid geometric shape.", "fol": "", "prediction": ["all x.(Prism(x) -> SolidGeometricShape(x))"]}
{"id": "eqasc_train_1163", "nl": "A solid geometric shape is used for refracting light.", "fol": "", "prediction": ["all x.((SolidGeometricShape(x) & UsedForRefractingLight(x)) -> UsedForRefractingLight(x))"]}
{"id": "eqasc_train_1164", "nl": "Refraction is the bending of light cause by a speed change when it passes through different media.", "fol": "", "prediction": ["all x.(Refraction(x) -> (BloodingOfLight(x) & CausedBySpeedChange(x) & PassesThroughDifferentMedia(x)))"]}
{"id": "eqasc_train_1165", "nl": "The speed of light changes when it passes from air into a prism", "fol": "", "prediction": ["all x y.((SpeedOfLight(x) & PassesFromAirIntoPrism(x,y)) -> SpeedOfLightChange(x))"]}
{"id": "eqasc_train_1166", "nl": "solid geometric shapes can refract light", "fol": "", "prediction": ["all x.(SolidGeometricShape(x) -> CanRefractLight(x))"]}
{"id": "eqasc_train_1167", "nl": "rest has a positive impact on a health", "fol": "", "prediction": ["all x y.((Rest(x) & Health(y)) -> PositiveImpact(x,y))"]}
{"id": "eqasc_train_1168", "nl": "Breath, food and proper rest is primary to health.", "fol": "", "prediction": ["all x.((Breath(x) & Food(x) & ProperRest(x)) -> PrimaryToHealth(x))"]}
{"id": "eqasc_train_1169", "nl": "food has a positive impact on health", "fol": "", "prediction": ["all x.(Food(x) -> PositiveImpactOnHealth(x))"]}
{"id": "eqasc_train_1170", "nl": "Sleep provides relaxation and rest.", "fol": "", "prediction": ["all x.(Sleep(x) -> (ProvidesRelaxation(x) & ProvidesRelaxation(x) & ProvidesRelaxation(x)))"]}
{"id": "eqasc_train_1171", "nl": "Sleep provides relaxation and has a positive impact on a health", "fol": "", "prediction": ["all x.(Sleep(x) -> (ProvidesRelaxation(x) & PositiveImpactOnHealth(x)))"]}
{"id": "eqasc_train_1172", "nl": "Rest can include sleep as well as sitting and resting.", "fol": "", "prediction": ["all x.(Rest(x) -> (IncludesSleep(x) & IncludesSitting(x) & IncludesResting(x)))"]}
{"id": "eqasc_train_1173", "nl": "Sleeping has a positive impact on health", "fol": "", "prediction": ["all x.(Sleeping(x) -> PositiveImpactOnHealth(x))"]}
{"id": "eqasc_train_1174", "nl": "sleep has a positive impact on health", "fol": "", "prediction": ["all x.(Sleep(x) -> PositiveImpactOnHealth(x))"]}
{"id": "eqasc_train_1175", "nl": "Then the bull sits down to rest.", "fol": "", "prediction": ["all x.(Bull(x) -> SitsDownToRest(x))"]}
{"id": "eqasc_train_1176", "nl": "Sitting down has a positive impact on health", "fol": "", "prediction": ["all x.(SittingDown(x) -> PositiveImpactOnHealth(x))"]}
{"id": "eqasc_train_1177", "nl": "Aids sleep and rest.", "fol": "", "prediction": ["all x.(Aid(x) -> (Sleep(x) & Rest(x)))"]}
{"id": "eqasc_train_1178", "nl": "Sleep has a positive impact on health.", "fol": "", "prediction": ["all x.(Sleep(x) -> PositiveImpactOnHealth(x))"]}
{"id": "eqasc_train_1179", "nl": "Relaxation is a prerequisite to rest and good sleep.", "fol": "", "prediction": ["all x.(Relaxation(x) -> (PrerequisiteToRelaxation(x) & PrerequisiteToGoodSleep(x)))"]}
{"id": "eqasc_train_1180", "nl": "Relaxation is a prerequisite to that which has a positive impact on health", "fol": "", "prediction": ["all x.((Relaxation(x) & PositiveImpactOnHealth(x)) -> Prerequisite(x))"]}
{"id": "eqasc_train_1181", "nl": "Enhances sleep patterns and supports restful sleep.", "fol": "", "prediction": ["all x.((SleepPattern(x) & RestfulSleep(x)) -> EnhancesAndSupports(x))"]}
{"id": "eqasc_train_1182", "nl": "sleep has a positive impact on health.", "fol": "", "prediction": ["all x.(Sleep(x) -> PositiveImpactOnHealth(x))"]}
{"id": "eqasc_train_1183", "nl": "Relaxation rests the body and meditation rest the mind.", "fol": "", "prediction": ["all x y.((Relaxation(x) & Meditation(y)) -> (RetainsBody(x) & RestsMind(y)))"]}
{"id": "eqasc_train_1184", "nl": "Relaxation of the body has a positive impact on a health", "fol": "", "prediction": ["all x y.((Relaxation(x) & Body(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_1185", "nl": "Bottom line indicates at rest or sleep.", "fol": "", "prediction": ["all x.(BottomLine(x) -> (IndicatesAtRest(x) | IndicatesSleep(x)))"]}
{"id": "eqasc_train_1186", "nl": "Health is essential to a quality life.", "fol": "", "prediction": ["all x.(Health(x) -> EssentialToQualityLife(x))"]}
{"id": "eqasc_train_1187", "nl": "rest is essential to quality of life", "fol": "", "prediction": ["all x.((Rest(x) & QualityOfLife(x)) -> EssentialToQualityOfLife(x))"]}
{"id": "eqasc_train_1188", "nl": "Good health and enough rest are important.", "fol": "", "prediction": ["all x.((Health(x) & Rest(x)) -> Important(x))"]}
{"id": "eqasc_train_1189", "nl": "rest is important", "fol": "", "prediction": ["all x.((Rest(x) & Important(x)) -> Important(x))"]}
{"id": "eqasc_train_1190", "nl": "if fossils of a water animal or plant are found in a place then that place used to be covered by water in the past", "fol": "", "prediction": ["all x y z.((Fossil(x) & WaterAnimalOrPlant(y) & Place(z) & FoundIn(x,y,z)) -> UsedToBeCoveredByWater(z))"]}
{"id": "eqasc_train_1191", "nl": "Generally, mountains are good places to find fossils.", "fol": "", "prediction": ["all x.(Mountain(x) -> GoodPlaceToFindFossil(x))"]}
{"id": "eqasc_train_1192", "nl": "The presence of a prehistoric shark tooth high in the mountains indicates that the land was once underwater.", "fol": "", "prediction": ["all x y.((PrehistoricSharkTooth(x) & HighInMountains(x)) -> LandOfUnderwater(y))"]}
{"id": "eqasc_train_1193", "nl": "Most fossils are formed when sediment is deposited by wind or water.", "fol": "", "prediction": ["all x.((Fossil(x) & (DepositsWind(x) | DepositsWater(x))) -> Formed(x))"]}
{"id": "eqasc_train_1194", "nl": "Fossils of animals and plants are formed with sediment", "fol": "", "prediction": ["all x y.((Fossil(x) & Animal(y) & Plant(y)) -> FormedWithSediment(x,y))"]}
{"id": "eqasc_train_1195", "nl": "Barnacles are animals that live in the water.", "fol": "", "prediction": ["all x.(Barnacle(x) -> LivesInWater(x))"]}
{"id": "eqasc_train_1196", "nl": "if fossils of barnacles are found in a place then that place used to be covered by water in the past", "fol": "", "prediction": ["all x y z.((Fossil(x) & Barnacle(y) & Place(z) & FoundIn(x,y,z)) -> UsedToBeCoveredByWater(x,z))"]}
{"id": "eqasc_train_1197", "nl": "Gastropod Shells of marine animals are often preserved as fossils.", "fol": "", "prediction": ["all x.((GastropodShell(x) & MarineAnimal(x)) -> PreservedAsFossil(x))"]}
{"id": "eqasc_train_1198", "nl": "if ancient gastropod shells are found in a place then that place used to be covered by water", "fol": "", "prediction": ["all x y z.((AncientGastropodShell(x) & Place(y) & FoundIn(x,y)) -> UsedToBeCoveredByWater(y))"]}
{"id": "eqasc_train_1199", "nl": "Marine fossils found in the interior of the continent.", "fol": "", "prediction": ["all x.(MarineFossil(x) -> FoundInInsideOfContinent(x))"]}
{"id": "eqasc_train_1200", "nl": "Marine fossils are in the interior of a continent because it used to be covered by water", "fol": "", "prediction": ["all x y.((MarineFossil(x) & InteriorOfContinent(y)) -> UsedToBeCoveredByWater(x,y))"]}
{"id": "eqasc_train_1201", "nl": "Fish are a diverse group of animals that live and breathe in water.", "fol": "", "prediction": ["all x.(Fish(x) -> (DiverseGroupOfAnimals(x) & LivesInWater(x) & BreathesInWater(x)))"]}
{"id": "eqasc_train_1202", "nl": "If fossils of a fish are found in a place then that place used to be covered by water in the past.", "fol": "", "prediction": ["all x y.((Fossil(x) & Fish(y) & FoundInPlace(x,y)) -> UsedToBeCoveredByWater(y))"]}
{"id": "eqasc_train_1203", "nl": "Fossils are the remains of prehistoric life.", "fol": "", "prediction": ["all x.(Fossil(x) -> PrehistoricLife(x))"]}
{"id": "eqasc_train_1204", "nl": "if remains of prehistoric life are found in a place then that place used to be covered by water ", "fol": "", "prediction": ["all x y z.((RemainsOfPrehistoricLife(x) & Place(y) & Water(z)) -> UsedToBeCoveredBy(y,z))"]}
{"id": "eqasc_train_1205", "nl": "Graptolites , in deep-water deposits, are the dominant fossils.", "fol": "", "prediction": ["all x.((Graptolites(x) & DeepWaterDeposits(x)) -> DominantFossil(x))"]}
{"id": "eqasc_train_1206", "nl": "if graptolites are found in a place then that place used to be covered by water", "fol": "", "prediction": ["all x y z.((Graptolites(x) & Place(y) & Water(z)) -> UsedToBeCoveredBy(y,z))"]}
{"id": "eqasc_train_1207", "nl": "Common fossils include plant fossils like ferns.", "fol": "", "prediction": ["all x.(CommonFossil(x) -> (PlantFossil(x) & Fern(x)))"]}
{"id": "eqasc_train_1208", "nl": "If a fern fossil is found then that places was previously covered in water", "fol": "", "prediction": ["all x.(FernFossil(x) -> (Places(x) & CoveredInWater(x)))"]}
{"id": "eqasc_train_1209", "nl": "Permineralization is a second type of fossil formed.", "fol": "", "prediction": ["all x.(Permineralization(x) -> (FossilFormed(x) & SecondType(x)))"]}
{"id": "eqasc_train_1210", "nl": "if permineralization of a water animal or plant are found in a place then that place used to be covered by water ", "fol": "", "prediction": ["all x y z.((WaterAnimalOrPlant(x) & Permineralization(y) & Place(z) & FoundIn(x,z)) -> UsedToBeCoveredByWater(z))"]}
{"id": "eqasc_train_1211", "nl": "coal is used to produce electricity by burning in coal-fire power stations", "fol": "", "prediction": ["all x y.((Coal(x) & CoalFirePowerStation(y)) -> ProducesElectricityByBurning(x,y))"]}
{"id": "eqasc_train_1212", "nl": "Swamp vegetation was compressed to form coal.", "fol": "", "prediction": ["all x.(SwampVegetation(x) -> (CompressedToFormCoal(x)))"]}
{"id": "eqasc_train_1213", "nl": "Swamp vegetation is used to produce electricity by burning in power stations", "fol": "", "prediction": ["all x y.((SwampVegetation(x) & PowerStation(y)) -> ProducesElectricityByBurning(x,y))"]}
{"id": "eqasc_train_1214", "nl": "Like coal, petroleum is a fossil fuel.", "fol": "", "prediction": ["(FossilFuel(Petroleum) & LikeCoal(Petroleum))"]}
{"id": "eqasc_train_1215", "nl": "fossil fuels are used to produce energy by burning", "fol": "", "prediction": ["all x y.((FossilFuel(x) & Energy(y)) -> ProducesByBurning(x,y))"]}
{"id": "eqasc_train_1216", "nl": "Heat is essential to the burning process.", "fol": "", "prediction": ["all x.(Heat(x) -> BurningProcess(x))"]}
{"id": "eqasc_train_1217", "nl": "Coal produces electricity by being heated up in coal-fire power stations.", "fol": "", "prediction": ["all x.(Coal(x) -> (ProducesElectricity(x) & HeatsUpInCoalFirePowerStations(x)))"]}
{"id": "eqasc_train_1218", "nl": "Coal-fired power stations can cause acid rain and contribute to global warming.", "fol": "", "prediction": ["all x.(CoalFiredPowerStation(x) -> (CausesAcidRain(x) & ContributesToGlobalWarming(x)))"]}
{"id": "eqasc_train_1219", "nl": "Certain types of electricity production can cause acid rain and contribute to global warming.", "fol": "", "prediction": ["exists x.(ElectricityProduction(x) & CausesAcidRain(x) & ContributesToGlobalWarming(x))"]}
{"id": "eqasc_train_1220", "nl": "Solid refined coal is easy to transport and can be used in coal-burning equipment.", "fol": "", "prediction": ["all x.((SolidRefinedCoal(x) & EasyToTransport(x) & UsedInCoalBurningEquipment(x)) -> SolidRefinedCoal(x))"]}
{"id": "eqasc_train_1221", "nl": "Solid materials used to produce electricity by burning in power stations need to be transported first", "fol": "", "prediction": ["all x.((SolidMaterials(x) & UsedToProduceElectricityByBurningInPowerStations(x)) -> TransportedFirst(x))"]}
{"id": "eqasc_train_1222", "nl": "Electricity is really the movement of electrons.", "fol": "", "prediction": ["all x.(Electricity(x) -> MovesElectrons(x))"]}
{"id": "eqasc_train_1223", "nl": "Coal is used to produce the movement of electrons by burning in coal-fire power stations", "fol": "", "prediction": ["all x y.((Coal(x) & ElectricMovement(y)) -> UsedToProduce(x,y))"]}
{"id": "eqasc_train_1224", "nl": "Fossil fuels are coal, oil and natural gases.", "fol": "", "prediction": ["all x.(FossilFuel(x) -> (Coal(x) | Oil(x) | NaturalGases(x)))"]}
{"id": "eqasc_train_1225", "nl": "burning fossil fuels are used to produce electricity ", "fol": "", "prediction": ["all x y.((FossilFuel(x) & Electricity(y)) -> UsedToProduce(x,y))"]}
{"id": "eqasc_train_1226", "nl": "Coal-fired power plants also contribute heavily to global warming.", "fol": "", "prediction": ["all x.((CoalFiredPowerPlant(x) & ContributesToGlobalWarming(x)) -> ContributesToGlobalWarming(x))"]}
{"id": "eqasc_train_1227", "nl": "Producing electricity by burning coal contributes to global warming", "fol": "", "prediction": ["all x.((ProducesElectricityByBurningCoal(x) & ContributesToGlobalWarming(x)) -> ContributesToGlobalWarming(x))"]}
{"id": "eqasc_train_1228", "nl": "Electricity is a form of energy.", "fol": "", "prediction": ["all x.(Electricity(x) -> Energy(x))"]}
{"id": "eqasc_train_1229", "nl": "coal is used to produce energy by burning in coal-fire power stations", "fol": "", "prediction": ["all x y.((Coal(x) & CoalFirePowerStation(y)) -> ProducesEnergyByBurning(x,y))"]}
{"id": "eqasc_train_1230", "nl": "Coal mines operated without electricity.", "fol": "", "prediction": ["all x.(CoalMine(x) -> OperatedWithoutElectricity(x))"]}
{"id": "eqasc_train_1231", "nl": "mines produce coal", "fol": "", "prediction": ["all x.(Mine(x) -> ProducesCoal(x))"]}
{"id": "eqasc_train_1232", "nl": "Coal-fired power stations are inherently modular.", "fol": "", "prediction": ["all x.(CoalFiredPowerStation(x) -> InherentlyModular(x))"]}
{"id": "eqasc_train_1233", "nl": "coal is used to produce electricity by burning in inherently modular stations", "fol": "", "prediction": ["all x y.((Coal(x) & Electricity(y) & BurnedInInherentlyModularStations(x,y)) -> Produces(x,y))"]}
{"id": "eqasc_train_1234", "nl": "Coal comes from anciently buried plants, and petroleum is from animals.", "fol": "", "prediction": ["(all x.(Coal(x) -> AncientlyBurnedPlants(x)) & all y.(Petroleum(y) -> Animals(y)))"]}
{"id": "eqasc_train_1235", "nl": "anciently buried plants can produce electricity", "fol": "", "prediction": ["all x.((AncientlyBurnedPlant(x) & CanProduceElectricity(x)) -> CanProduceElectricity(x))"]}
{"id": "eqasc_train_1236", "nl": "Most of the electricity in the United States is produced by burning coal.", "fol": "", "prediction": ["all x.((Electricity(x) & ProducedByBurningCoal(x)) -> InUnitedStates(x))"]}
{"id": "eqasc_train_1237", "nl": "Most electricity in the United States is made in coal power stations", "fol": "", "prediction": ["all x.((Electricity(x) & MadeInCoalPowerStations(x)) -> MostInUnitedStates(x))"]}
{"id": "eqasc_train_1238", "nl": "thirst is used to make an animal realize that it needs to replenish its bodily water by the body", "fol": "", "prediction": ["all x y.((Animal(x) & Body(y)) -> (Thirst(x) & RealizesReplenishment(x,y)))"]}
{"id": "eqasc_train_1239", "nl": "Every body needs plenty of hydration, and water is the best source of that hydration.", "fol": "", "prediction": ["all x.(Body(x) -> (NeedsHydration(x) & Water(x)))"]}
{"id": "eqasc_train_1240", "nl": "Animals use thirst to realized that their bodies need hydration.", "fol": "", "prediction": ["all x.(Animal(x) -> (UsesThirst(x) & RealizesBodyNeedsHydration(x)))"]}
{"id": "eqasc_train_1241", "nl": "General signs of dehydration include Thirst.", "fol": "", "prediction": ["all x.(Dehydration(x) -> Thirst(x))"]}
{"id": "eqasc_train_1242", "nl": "Animals need to replenish water to avoid dehydration", "fol": "", "prediction": ["all x.(Animal(x) -> NeedsReplenishmentOfWater(x))"]}
{"id": "eqasc_train_1243", "nl": "Water is the best thirst quencher.", "fol": "", "prediction": ["all x.(Water(x) -> BestThirstQuencher(x))"]}
{"id": "eqasc_train_1244", "nl": "Water is best when an animal needs to hydrate", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & NeedsToHydrate(x,y)) -> BestWater(x))"]}
{"id": "eqasc_train_1245", "nl": "Every plant and animal needs water to survive.", "fol": "", "prediction": ["all x.((Plant(x) | Animal(x)) -> NeedsWaterToSurvive(x))"]}
{"id": "eqasc_train_1246", "nl": "thirst helps animals to survive", "fol": "", "prediction": ["all x y.((Thirst(x) & Animal(y)) -> HelpsSurvive(x,y))"]}
{"id": "eqasc_train_1247", "nl": "Water hydrates the cells.", "fol": "", "prediction": ["all x y.((Water(x) & Cell(y)) -> Hydrates(x,y))"]}
{"id": "eqasc_train_1248", "nl": "Thirst is used to make animals realize they need to hydrate their cells.", "fol": "", "prediction": ["all x.(Thirst(x) -> (UsedToMakeAnimalsRealize(x) & HydratesCells(x)))"]}
{"id": "eqasc_train_1249", "nl": "Dehydration causes increased thirst and water consumption.", "fol": "", "prediction": ["all x.(Dehydration(x) -> (IncreasedThirst(x) & IncreasedWaterConsumption(x)))"]}
{"id": "eqasc_train_1250", "nl": "dehydration is when an animal needs to replenish bodily water", "fol": "", "prediction": ["all x.(Dehydration(x) -> (NeedsReplenishmentOfBodylyWater(x) & Animal(x)))"]}
{"id": "eqasc_train_1251", "nl": "thirst is used to make humans realize they need to replenish bodily water", "fol": "", "prediction": ["all x y.((Human(x) & Thirst(y)) -> (RequiresBodylyWater(x,y) & RequiresBodylyWater(x,y)))"]}
{"id": "eqasc_train_1252", "nl": "Common symptoms of dehydration are thirst, fatigue, headache, dizziness and dark, scant urine.", "fol": "", "prediction": ["all x.((Symptom(x) & Dehydration(x)) -> (Thirst(x) & Fatigue(x) & Headache(x) & Dizziness(x) & DarkScantUrine(x)))"]}
{"id": "eqasc_train_1253", "nl": "An animal needs to replenish its bodily water when it's dehydrated ", "fol": "", "prediction": ["all x.((Animal(x) & Dehydrated(x)) -> NeedsReplenishmentOfBodyWater(x))"]}
{"id": "eqasc_train_1254", "nl": "Animals experience hunger, thirst, fear, sickness, injury and strong maternal instincts.", "fol": "", "prediction": ["all x.(Animal(x) -> (ExperiencesHunger(x) & ExperiencesThirst(x) & ExperiencesFear(x) & ExperiencesSickness(x) & ExperiencesInjury(x) & ExperiencesStrongMaternalInstincts(x)))"]}
{"id": "eqasc_train_1255", "nl": "organisms use thirst to consume water", "fol": "", "prediction": ["all x.(Organism(x) -> (UsesThirst(x) & ConsumesWater(x)))"]}
{"id": "eqasc_train_1256", "nl": "Today's animal is the cow.", "fol": "", "prediction": ["all x.((Animal(x) & Cow(x)) -> Today(x))"]}
{"id": "eqasc_train_1257", "nl": "Thirst is used to make a cow realize that it needs to replenish its bodily water by the body.", "fol": "", "prediction": ["all x y.((Thirst(x) & Cow(y)) -> (RequiresBodyWater(y,x) & Reminds(y,x)))"]}
{"id": "eqasc_train_1258", "nl": "Strong, persistent thirst can be a sign of dehydration.", "fol": "", "prediction": ["all x.((StrongThirst(x) & Persistent(x)) -> SignOfDehydration(x))"]}
{"id": "eqasc_train_1259", "nl": "animals need to replenish bodily water during dehydration", "fol": "", "prediction": ["all x.((Animal(x) & Dehydration(x)) -> NeedsReplenishmentOfBodyWater(x))"]}
{"id": "eqasc_train_1260", "nl": "Chickens can sometimes be noisy animals.", "fol": "", "prediction": ["all x.(Chicken(x) -> NoisyAnimal(x))"]}
{"id": "eqasc_train_1261", "nl": "thirst is used to make chickens realize they need to replenish its bodily water", "fol": "", "prediction": ["all x y.((Thirst(x) & Chicken(y)) -> (RequiresBodyWater(y,x) & RequiresBodyWater(y,x)))"]}
{"id": "eqasc_train_1262", "nl": "Water Water in the area's natural water bodies is drinkable as such.", "fol": "", "prediction": ["all x.((Water(x) & NaturalWaterBody(x)) -> Drinkable(x))"]}
{"id": "eqasc_train_1263", "nl": "thirst is used to make an animal realize that it needs to replenish from a natural drinkable  source", "fol": "", "prediction": ["all x y.((Animal(x) & NaturalDrinkableSource(y)) -> (Thirst(x) & RealizesReplenishment(x,y)))"]}
{"id": "eqasc_train_1264", "nl": "To replenish body fluids, drink adequate amounts of water or a non-caffeinated beverage.", "fol": "", "prediction": ["all x.((BodyFluids(x) & (AdequateWater(x) | NonCaffeinatedBeverage(x))) -> Refills(x))"]}
{"id": "eqasc_train_1265", "nl": "Drinking non-carbonated beverages will replenish fluids.", "fol": "", "prediction": ["all x.((Drinking(x) & -CarbonatedBeverage(x)) -> RenewsFluids(x))"]}
{"id": "eqasc_train_1266", "nl": "An example is H2O which shows water is made of two atoms of hydrogen stuck to one atom of oxygen.", "fol": "", "prediction": ["all x.((H2O(x) & Water(x)) -> (HasTwoAtomsOfHydrogenStuckToOneAtomOfOxygen(x)))"]}
{"id": "eqasc_train_1267", "nl": "thirst is used to make an animal realize that it needs to replenish H2O in its body.", "fol": "", "prediction": ["all x y.((Animal(x) & Thirst(y)) -> RequiresReplenishmentO(x,y))"]}
{"id": "eqasc_train_1268", "nl": "Generally, athletes wait for their sense of thirst to signal that it's time to drink.", "fol": "", "prediction": ["all x.(Athlete(x) -> WaitsForSenseOfThirst(x))"]}
{"id": "eqasc_train_1269", "nl": "animals replenish their bodily water after a signal that it's time to drink", "fol": "", "prediction": ["all x y.((Animal(x) & Signal(y) & TimeToDrink(x,y)) -> ReproducesBodyWater(x,y))"]}
{"id": "eqasc_train_1270", "nl": "Pollen consists of tiny grains that are the male gametes of plants.", "fol": "", "prediction": ["all x.(Pollen(x) -> (TinyGrains(x) & MaleGametesOfPlants(x)))"]}
{"id": "eqasc_train_1271", "nl": "Flowers are the sex organs of certain plants and hold the male and female gamete producing systems.", "fol": "", "prediction": ["all x y.((Flower(x) & Plant(y)) -> (SexOrgan(x,y) & HoldsGameteProducingSystem(x,y)))"]}
{"id": "eqasc_train_1272", "nl": "pollen consists of tiny grains that are held by flowers", "fol": "", "prediction": ["all x y z.((Pollen(x) & TinyGrains(y) & Flower(z)) -> (ConsistsOf(x,y) & HeldBy(x,z)))"]}
{"id": "eqasc_train_1273", "nl": "Animals that reproduce sexually produce sex cells, or gametes.", "fol": "", "prediction": ["all x.((Animal(x) & ReproducesSexCells(x)) -> (ProducesGametes(x)))"]}
{"id": "eqasc_train_1274", "nl": "Pollen consists of tiny grains that are the male sex cells of plants.", "fol": "", "prediction": ["all x.(Pollen(x) -> (TinyGrains(x) & MaleSexCell(x)))"]}
{"id": "eqasc_train_1275", "nl": "Examples of gametes are ova and spermatozoa.", "fol": "", "prediction": ["all x.(Gamete(x) -> (Ovar(x) | Spermatozoa(x)))"]}
{"id": "eqasc_train_1276", "nl": "The tiny grains of pollen from plants are the ova and spermatozoa", "fol": "", "prediction": ["all x y.((TinyGrainsOfPollen(x) & Plant(y)) -> (Ovar(x) | Spermatozoa(x)))"]}
{"id": "eqasc_train_1277", "nl": "Haploid plants produce gametes.", "fol": "", "prediction": ["all x.(HaploidPlant(x) -> ProducesGametes(x))"]}
{"id": "eqasc_train_1278", "nl": "pollen is made by haploid plants", "fol": "", "prediction": ["all x y.((Pollen(x) & Haplopod(y)) -> MadeBy(x,y))"]}
{"id": "eqasc_train_1279", "nl": "Pollen grains come from seed bearing plants.", "fol": "", "prediction": ["all x.(PollenGrain(x) -> ComesFromSeedBearingPlants(x))"]}
{"id": "eqasc_train_1280", "nl": "Pollen seeds come from male gametes of plants", "fol": "", "prediction": ["all x.(PollenSeed(x) -> (ComesFromMaleGametes(x) & Plant(x)))"]}
{"id": "eqasc_train_1281", "nl": "Bees also collect pollen.", "fol": "", "prediction": ["all x.(Bee(x) -> CollectsPollen(x))"]}
{"id": "eqasc_train_1282", "nl": "Something that bees collect consists of tiny grains that are the male gametes of plants", "fol": "", "prediction": ["all x y.((Bee(x) & TinyGrains(y)) -> Collects(x,y))"]}
{"id": "eqasc_train_1283", "nl": "Bees use the pollen from flowers as food.", "fol": "", "prediction": ["all x y.((Bee(x) & Flower(y)) -> UsesPollenAsFood(x,y))"]}
{"id": "eqasc_train_1284", "nl": "bees use the male gametes of plants as food. ", "fol": "", "prediction": ["all x y.((Bee(x) & Plant(y)) -> UsesMaleGametes(x,y))"]}
{"id": "eqasc_train_1285", "nl": "bees collect tiny grains that are the male gametes of plants", "fol": "", "prediction": ["all x y z.((Bee(x) & TinyGrain(y) & Plant(z)) -> (Collects(x,y) & MaleGamete(x,z)))"]}
{"id": "eqasc_train_1286", "nl": "Male gametes are sperm.", "fol": "", "prediction": ["all x.(MaleGamete(x) -> Sperm(x))"]}
{"id": "eqasc_train_1287", "nl": "pollen consists of tiny grains that are the sperm of plants", "fol": "", "prediction": ["all x y.((Pollen(x) & Plant(y)) -> (ContainsTinyGrains(x,y) & SpermOfPlants(x,y)))"]}
{"id": "eqasc_train_1288", "nl": "Male gametes are called sperm.", "fol": "", "prediction": ["all x.(MaleGamete(x) -> Sperm(x))"]}
{"id": "eqasc_train_1289", "nl": "Pollen consists of tiny grains that are the sperm. of plants.", "fol": "", "prediction": ["all x.(Pollen(x) -> (TinyGrains(x) & SpermOfPlants(x)))"]}
{"id": "eqasc_train_1290", "nl": "Pollen comes from haploid plants.", "fol": "", "prediction": ["all x.(Pollen(x) -> ComesFromHaploidPlants(x))"]}
{"id": "eqasc_train_1291", "nl": "Fish have a circulatory system with a two-chambered heart.", "fol": "", "prediction": ["all x.(Fish(x) -> (CirculatorySystem(x) & TwoChamberedHeart(x)))"]}
{"id": "eqasc_train_1292", "nl": "Birds also have four-chambered hearts.", "fol": "", "prediction": ["all x.(Bird(x) -> HasFourChamberedHeart(x))"]}
{"id": "eqasc_train_1293", "nl": "Birds and fish have different heart circulatory systems", "fol": "", "prediction": ["all x y.((Bird(x) & Fish(y)) -> (DifferentHeartCirculatorySystems(x,y) & DifferentHeartCirculatorySystems(y)))"]}
{"id": "eqasc_train_1294", "nl": "Fish are backboned aquatic animals.", "fol": "", "prediction": ["all x.(Fish(x) -> BackbonedAquaticAnimal(x))"]}
{"id": "eqasc_train_1295", "nl": "Some backboned aquatic animals have a circulatory system with a two-chambered heart.", "fol": "", "prediction": ["exists x.(BackbonedAquaticAnimal(x) & CirculatorySystem(x) & TwoChamberedHeart(x))"]}
{"id": "eqasc_train_1296", "nl": "Trout is an extremely versatile fish.", "fol": "", "prediction": ["all x.(Trout(x) -> VersatileFish(x))"]}
{"id": "eqasc_train_1297", "nl": "trout have a circulatory system with a two-chambered heart", "fol": "", "prediction": ["all x.(Trout(x) -> (CirculatorySystem(x) & TwoChamberedHeart(x)))"]}
{"id": "eqasc_train_1298", "nl": "Fish include bass and salmon.", "fol": "", "prediction": ["all x.(Fish(x) -> (Includes(x,bass) | Includes(x,salmon)))"]}
{"id": "eqasc_train_1299", "nl": "Salmon have a circulatory system with a two-chambered heart.", "fol": "", "prediction": ["all x.(Salmon(x) -> (CirculatorySystem(x) & TwoChamberedHeart(x)))"]}
{"id": "eqasc_train_1300", "nl": "Fish Fish are the ultimate aquatic organism.", "fol": "", "prediction": ["all x.(Fish(x) -> UltimateAquaticOrganism(x))"]}
{"id": "eqasc_train_1301", "nl": "the ultimate aquatic organism has a circulatory system with a two-chambered heart.", "fol": "", "prediction": ["all x.((AquaticOrganism(x) & CirculatorySystem(x) & TwoChamberedHeart(x)) -> Ultimate(x))"]}
{"id": "eqasc_train_1302", "nl": "Each side of the heart is divided up into two chambers.", "fol": "", "prediction": ["all x.(Heart(x) -> DividedIntoTwoChambers(x))"]}
{"id": "eqasc_train_1303", "nl": "Fish have a circulatory system with a heart that is divided", "fol": "", "prediction": ["all x.(Fish(x) -> (CirculatorySystem(x) & Heart(x) & Divided(x)))"]}
{"id": "eqasc_train_1304", "nl": "Mammals have a four-chambered heart.", "fol": "", "prediction": ["all x.(Mammal(x) -> HasFourChamberedHeart(x))"]}
{"id": "eqasc_train_1305", "nl": "mammal hearts have two more sections than fish hearts.", "fol": "", "prediction": ["all x y.((MammalHeart(x) & FishHeart(y)) -> TwoMoreSections(x,y))"]}
{"id": "eqasc_train_1306", "nl": "Fish, such as tuna, is a high protein food.", "fol": "", "prediction": ["all x.((Fish(x) & Tuna(x)) -> HighProteinFood(x))"]}
{"id": "eqasc_train_1307", "nl": "tuna have a circulatory system with a two-chambered heart", "fol": "", "prediction": ["all x.(Tuna(x) -> (CirculatorySystem(x) & TwoChamberedHeart(x)))"]}
{"id": "eqasc_train_1308", "nl": "Fish species include salmon and trout.", "fol": "", "prediction": ["all x.(FishSpecies(x) -> (Salmon(x) | Trout(x)))"]}
{"id": "eqasc_train_1309", "nl": "Salmon and trout have a circulatory system with a two-chambered heart.", "fol": "", "prediction": ["all x.((Salmon(x) | Trout(x)) -> (CirculatorySystem(x) & TwoChamberedHeart(x)))"]}
{"id": "eqasc_train_1310", "nl": "Some viruses can cause cancer.", "fol": "", "prediction": ["exists x.(Virus(x) & CausesCancer(x))"]}
{"id": "eqasc_train_1311", "nl": "Eventually the cancer kills.", "fol": "", "prediction": ["all x.(Cancer(x) -> Kills(x))"]}
{"id": "eqasc_train_1312", "nl": "some viruses can kill", "fol": "", "prediction": ["exists x.(Virus(x) & Kills(x))"]}
{"id": "eqasc_train_1313", "nl": "Cancer is an uncontrolled growth and spread of abnormal cells.", "fol": "", "prediction": ["all x.(Cancer(x) -> (UncontrolledGrowth(x) & SpreadOfAnomalyCells(x)))"]}
{"id": "eqasc_train_1314", "nl": "Some viruses can cause an uncontrolled growth and spread of abnormal cells", "fol": "", "prediction": ["exists x.(Virus(x) & CausesUncontrolledGrowthAndSpreadOfAnomalyCells(x))"]}
{"id": "eqasc_train_1315", "nl": "Lung cancer is a formation of tumors in the lung.", "fol": "", "prediction": ["all x.(LungCancer(x) -> (FormationOfTumorsInLung(x)))"]}
{"id": "eqasc_train_1316", "nl": "Some viruses result in the formation of malignant tumors.", "fol": "", "prediction": ["exists x.(Virus(x) & MalignantTumor(x))"]}
{"id": "eqasc_train_1317", "nl": "Cancer is an example of a mutation in cells.", "fol": "", "prediction": ["all x.(Cancer(x) -> MutationInCells(x))"]}
{"id": "eqasc_train_1318", "nl": "Some viruses can mutate cells", "fol": "", "prediction": ["exists x.(Virus(x) & MutatesCells(x))"]}
{"id": "eqasc_train_1319", "nl": "Leukemias are cancers of the blood.", "fol": "", "prediction": ["all x.(Leukemia(x) -> CancerOfBlood(x))"]}
{"id": "eqasc_train_1320", "nl": "some viruses can cause leukemia", "fol": "", "prediction": ["exists x.(Virus(x) & CanCauseLeukemia(x))"]}
{"id": "eqasc_train_1321", "nl": "Skin cancer can kill.", "fol": "", "prediction": ["all x.(SkinCancer(x) -> CanKill(x))"]}
{"id": "eqasc_train_1322", "nl": "Some viruses can kill.", "fol": "", "prediction": ["exists x.(Virus(x) & CanKill(x))"]}
{"id": "eqasc_train_1323", "nl": "Oncogenic viruses are viruses that are linked to cancer.", "fol": "", "prediction": ["all x.(OncogenicVirus(x) -> (Virus(x) & LinkedToCancer(x)))"]}
{"id": "eqasc_train_1324", "nl": "oncogenic viruses are linked to disease", "fol": "", "prediction": ["all x y.((OncogenicViral(x) & Disease(y)) -> LinkedTo(x,y))"]}
{"id": "eqasc_train_1325", "nl": "Human papillomavirus, or HPV, is the name of a group of viruses.", "fol": "", "prediction": ["all x.(HasPapillomavirus(x) -> (Virus(x) & NameOfGroup(x)))"]}
{"id": "eqasc_train_1326", "nl": "HPV can cause cancer.", "fol": "", "prediction": ["all x.(HPV(x) -> CausesCancer(x))"]}
{"id": "eqasc_train_1327", "nl": "Some cancers are fatal.", "fol": "", "prediction": ["exists x.(Cancer(x) & Fatal(x))"]}
{"id": "eqasc_train_1328", "nl": "some viruses can be fatal", "fol": "", "prediction": ["exists x.(Virus(x) & CanBeFail(x))"]}
{"id": "eqasc_train_1329", "nl": "Cancer requires an accumulation of mutations.", "fol": "", "prediction": ["all x.(Cancer(x) -> RequiresAccumulationOfMutations(x))"]}
{"id": "eqasc_train_1330", "nl": "Some viruses can cause mutations", "fol": "", "prediction": ["exists x.(Virus(x) & CausesMutation(x))"]}
{"id": "eqasc_train_1331", "nl": "Human papillomavirus vaccine is aimed at the cause of most cases of cervical cancer.", "fol": "", "prediction": ["all x.(HumanPapillomavirusVaccine(x) -> aimedAtCervicCancer(x))"]}
{"id": "eqasc_train_1332", "nl": "A vaccine against a virus can protect against cervical cancer", "fol": "", "prediction": ["all x y.((Vaccine(x) & Virus(y)) -> ProtectsAgainstCervicalCancer(x,y))"]}
{"id": "eqasc_train_1333", "nl": "Cervical cancer is caused by a virus, the human papaloma virus.", "fol": "", "prediction": ["all x.(CervicalCancer(x) -> CausedByVirus(x))"]}
{"id": "eqasc_train_1334", "nl": "A virus is responsible for cervical cancer", "fol": "", "prediction": ["all x.(Virus(x) -> CervicalCancer(x))"]}
{"id": "eqasc_train_1335", "nl": "Hepatitis B virus causes liver cancer.", "fol": "", "prediction": ["all x.(HepatitisBVirus(x) -> CausesLiverCancer(x))"]}
{"id": "eqasc_train_1336", "nl": "hepatitis b can form liver cancer", "fol": "", "prediction": ["all x.(HepatitisB(x) -> FormsLiverCancerous(x))"]}
{"id": "eqasc_train_1337", "nl": "Cancer is an abnormal growth of cells.", "fol": "", "prediction": ["all x.(Cancer(x) -> AnomalyGrowthOfCells(x))"]}
{"id": "eqasc_train_1338", "nl": "Some viruses can cause abnormal cell growth", "fol": "", "prediction": ["exists x.(Virus(x) & CausesAnomalyCellGrowth(x))"]}
{"id": "eqasc_train_1339", "nl": "Cancer is an uncontrolled cell division.", "fol": "", "prediction": ["all x.(Cancer(x) -> UncontrolledCellDividection(x))"]}
{"id": "eqasc_train_1340", "nl": "Some viruses can cause uncontrolled cell division", "fol": "", "prediction": ["exists x.(Virus(x) & CanCauseUncontrolledCellDivision(x))"]}
{"id": "eqasc_train_1341", "nl": "Leukaemia and lymphoma are cancers of the blood.", "fol": "", "prediction": ["all x.((Leukaemia(x) | Lymphoma(x)) -> CancerOfBlood(x))"]}
{"id": "eqasc_train_1342", "nl": "some viruses can cause lymphoma", "fol": "", "prediction": ["exists x.(Virus(x) & CanCauseLymphoma(x))"]}
{"id": "eqasc_train_1343", "nl": "Most protists have motility.", "fol": "", "prediction": ["all x.(Protist(x) -> HasMotility(x))"]}
{"id": "eqasc_train_1344", "nl": "Motility is lost if the specimen dries.", "fol": "", "prediction": ["all x.((Specimen(x) & Drys(x)) -> MotilityLoss(x))"]}
{"id": "eqasc_train_1345", "nl": "Protists can move unless the specimen dries", "fol": "", "prediction": ["all x.((Protist(x) & -DriesSpecimen(x)) -> CanMove(x))"]}
{"id": "eqasc_train_1346", "nl": "Protists are one celled organisms.", "fol": "", "prediction": ["all x.(Protist(x) -> L\u00e9asedOrganism(x))"]}
{"id": "eqasc_train_1347", "nl": "One celled organisms can have motility.", "fol": "", "prediction": ["all x.(LayeredOrganism(x) -> HasMotility(x))"]}
{"id": "eqasc_train_1348", "nl": "Motilities are full and smooth.", "fol": "", "prediction": ["all x.(Motility(x) -> (Full(x) & Smooth(x)))"]}
{"id": "eqasc_train_1349", "nl": "Most protists are full and smooth", "fol": "", "prediction": ["all x.(Protist(x) -> (Full(x) & Smooth(x)))"]}
{"id": "eqasc_train_1350", "nl": "Protists are single-celled microscopic organisms like amoebae.", "fol": "", "prediction": ["all x.(Protist(x) -> (SingleCellled(x) & Microorganism(x) & Amoebae(x)))"]}
{"id": "eqasc_train_1351", "nl": "amoebae have motility", "fol": "", "prediction": ["all x.(Amoeba(x) -> HasMotility(x))"]}
{"id": "eqasc_train_1352", "nl": "All animals are motile, moving about at some point in their life cycle.", "fol": "", "prediction": ["all x.(Animal(x) -> (Motile(x) & MovesAtSomePointInLifeCycle(x)))"]}
{"id": "eqasc_train_1353", "nl": "Most protists have the ability to move at some point in their life", "fol": "", "prediction": ["all x.(Protist(x) -> (AffordsMovement(x) & MovesAtSomePointInLife(x)))"]}
{"id": "eqasc_train_1354", "nl": "Protists Protists are single-celled organisms.", "fol": "", "prediction": ["all x.(Protist(x) -> (SingleCelledOrganism(x) & Organism(x)))"]}
{"id": "eqasc_train_1355", "nl": "Most single-celled organisms have motility.", "fol": "", "prediction": ["all x.(SingleCellledOrganism(x) -> HasMotility(x))"]}
{"id": "eqasc_train_1356", "nl": "Most single-celled organisms are motile.", "fol": "", "prediction": ["all x.(SingleCelledOrganism(x) -> Motile(x))"]}
{"id": "eqasc_train_1357", "nl": "single-celled organisms have motility", "fol": "", "prediction": ["all x.(SingleCellledOrganism(x) -> HasMotility(x))"]}
{"id": "eqasc_train_1358", "nl": "Protists are the simplest of eukaryotes.", "fol": "", "prediction": ["all x.(Protist(x) -> SimplestOfEukaryotes(x))"]}
{"id": "eqasc_train_1359", "nl": "The simplest eukaryotes have motility.", "fol": "", "prediction": ["all x.((Eukaryote(x) & Simplest(x)) -> HasMotility(x))"]}
{"id": "eqasc_train_1360", "nl": "Sperm motility is the ability of the sperm to move.", "fol": "", "prediction": ["all x.(SspermMotility(x) -> AbilityToMove(x))"]}
{"id": "eqasc_train_1361", "nl": "most protists can move", "fol": "", "prediction": ["all x.(Protist(x) -> CanMove(x))"]}
{"id": "eqasc_train_1362", "nl": "Most protists are able to move.", "fol": "", "prediction": ["all x.(Protist(x) -> CanMove(x))"]}
{"id": "eqasc_train_1363", "nl": "skin is used for protecting the body from harmful substances", "fol": "", "prediction": ["all x y.((Skin(x) & Body(y)) -> ProtectsFromHarmfulSubstances(x,y))"]}
{"id": "eqasc_train_1364", "nl": "Acids are harmful to tissue.", "fol": "", "prediction": ["all x.(Acid(x) -> HarmfulToTissue(x))"]}
{"id": "eqasc_train_1365", "nl": "Skin is used for protecting the body from acids.", "fol": "", "prediction": ["all x.(Skin(x) -> ProtectsFromAcids(x))"]}
{"id": "eqasc_train_1366", "nl": "Skin is a protective organ.", "fol": "", "prediction": ["all x.(Skin(x) -> ProtectiveOrgan(x))"]}
{"id": "eqasc_train_1367", "nl": "a protective organ is used to protect the body from harmful substances.", "fol": "", "prediction": ["all x y.((ProtectiveOrgan(x) & Body(y)) -> ProtectsFromHarmfulSubstances(x,y))"]}
{"id": "eqasc_train_1368", "nl": "Contamination is the unintended presence of harmful substances or microorganisms in food.", "fol": "", "prediction": ["all x.(Contamination(x) -> (UnintendedPresenceOfHarmfulSubstancesOrMicroorganisms(x) & InFood(x)))"]}
{"id": "eqasc_train_1369", "nl": "The skin is used for protecting the body from contamination.", "fol": "", "prediction": ["all x.(Skin(x) -> ProtectsFromContamination(x))"]}
{"id": "eqasc_train_1370", "nl": "Skin is the body's largest organ.", "fol": "", "prediction": ["all x.(Skin(x) -> LargestOrgan(x))"]}
{"id": "eqasc_train_1371", "nl": "The body's largest organ protects the body from harmful substances.", "fol": "", "prediction": ["all x y.((Body(x) & Body(y)) -> ProtectsFromHarmfulSubstances(x,y))"]}
{"id": "eqasc_train_1372", "nl": "Skin is comprised of two layers, the epidermis and dermis.", "fol": "", "prediction": ["all x.(Skin(x) -> (Epidermis(x) & Dermis(x)))"]}
{"id": "eqasc_train_1373", "nl": "the epidermis and dermis protects the body from harmful substances", "fol": "", "prediction": ["all x y.((Epidermis(x) & Dermis(y)) -> ProtectsFromHarmfulSubstances(x,y))"]}
{"id": "eqasc_train_1374", "nl": "Skin helps keep out harmful substances", "fol": "", "prediction": ["all x y.((Skin(x) & HarmfulSubstance(y)) -> HelpsKeepOut(x,y))"]}
{"id": "eqasc_train_1375", "nl": "organs protect the body from harmful substances", "fol": "", "prediction": ["all x y.((Organ(x) & Body(y)) -> ProtectsFromHarmfulSubstances(x,y))"]}
{"id": "eqasc_train_1376", "nl": "Eyes and skin are the critical organs.", "fol": "", "prediction": ["all x.((Eyes(x) | Skin(x)) -> CriticalOrgan(x))"]}
{"id": "eqasc_train_1377", "nl": "Critical organs are used for protecting the body from harmful substances", "fol": "", "prediction": ["all x y.((CriticalOrgan(x) & Body(y)) -> ProtectsFromHarmfulSubstances(x,y))"]}
{"id": "eqasc_train_1378", "nl": "Natural toxins can be harmful too.", "fol": "", "prediction": ["all x.(NaturalToxic(x) -> Harmful(x))"]}
{"id": "eqasc_train_1379", "nl": "Skin is used for protecting the body from toxins.", "fol": "", "prediction": ["all x y.((Skin(x) & Toxics(y)) -> ProtectsFrom(x,y))"]}
{"id": "eqasc_train_1380", "nl": "Pollution is the release of harmful substances into the environment.", "fol": "", "prediction": ["all x.(Pollution(x) -> ReleaseOfHarmfulSubstances(x))"]}
{"id": "eqasc_train_1381", "nl": "the skin protects the body from pollution", "fol": "", "prediction": ["all x y.((Skin(x) & Body(y)) -> ProtectsFromPollution(x,y))"]}
{"id": "eqasc_train_1382", "nl": "Sunlight, however, is harmful to the skin.", "fol": "", "prediction": ["all x.(Sunlight(x) -> HarmfulToSkin(x))"]}
{"id": "eqasc_train_1383", "nl": "skin protects from sunlight", "fol": "", "prediction": ["all x y.((Skin(x) & Sunlight(y)) -> ProtectsFrom(x,y))"]}
{"id": "eqasc_train_1384", "nl": "a windmill converts wind energy into electricity primarily by using mechanical energy", "fol": "", "prediction": ["all x y.((Windmill(x) & WindEnergy(y)) -> ConvertsToElectricity(x,y))"]}
{"id": "eqasc_train_1385", "nl": "An electric field is created by voltage.", "fol": "", "prediction": ["all x.(ElectricField(x) -> CreatedByVoltage(x))"]}
{"id": "eqasc_train_1386", "nl": "A windmill creates voltage.", "fol": "", "prediction": ["all x.(Windmill(x) -> CreatesVibration(x))"]}
{"id": "eqasc_train_1387", "nl": "Mechanical energy is the energy of moving objects.", "fol": "", "prediction": ["all x.(MechanicalEnergy(x) -> EnergyOfMovingObjects(x))"]}
{"id": "eqasc_train_1388", "nl": "a windmill converts wind energy into electricity primarily using the energy of moving objects", "fol": "", "prediction": ["all x y z.((Windmill(x) & WindEnergy(y) & Electricity(z)) -> ConvertsTo(x,y,z))"]}
{"id": "eqasc_train_1389", "nl": "Todays computers use electricity and silicon chips.", "fol": "", "prediction": ["all x.(Computer(x) -> (UsesElectricity(x) & UsesSiliconChips(x)))"]}
{"id": "eqasc_train_1390", "nl": "a windmill can provide energy to a computer", "fol": "", "prediction": ["all x y.((Windmill(x) & Computer(y)) -> ProvidesEnergyTo(x,y))"]}
{"id": "eqasc_train_1391", "nl": "Windmills are machines operated by windpower.", "fol": "", "prediction": ["all x.(Windmill(x) -> OperatedByWindpower(x))"]}
{"id": "eqasc_train_1392", "nl": "Windpower can convert energy into electricity.", "fol": "", "prediction": ["all x.(Windpower(x) -> ConvertsEnergyToElectricity(x))"]}
{"id": "eqasc_train_1393", "nl": "A windmill makes wind energy from moving.", "fol": "", "prediction": ["all x.(Windmill(x) -> MakesWindEnergyFromMoving(x))"]}
{"id": "eqasc_train_1394", "nl": "Wind speed is important for wind energy.", "fol": "", "prediction": ["all x.(WindSpeed(x) -> ImportantForWindEnergy(x))"]}
{"id": "eqasc_train_1395", "nl": "a windmill converts wind into electricity primarily by using wind speed", "fol": "", "prediction": ["all x y z.((Windmill(x) & Wind(y) & Electricity(z)) -> ConvertsTo(x,y,z))"]}
{"id": "eqasc_train_1396", "nl": "machines operated by windpower convert wind energy into electricity", "fol": "", "prediction": ["all x y.((Machine(x) & WindPower(y)) -> ConvertsWindEnergyToElectricity(x,y))"]}
{"id": "eqasc_train_1397", "nl": "Windmills tap into the energy of the wind using sails or vanes.", "fol": "", "prediction": ["all x.(Windmill(x) -> (TapsIntoWindEnergy(x) & (UsesSails(x) | UsesVane(x))))"]}
{"id": "eqasc_train_1398", "nl": "windmills use vanes to convert energy", "fol": "", "prediction": ["all x.(Windmill(x) -> (UsesVane(x) & ConvertsEnergy(x)))"]}
{"id": "eqasc_train_1399", "nl": "Today, new kinds of windmills, called wind turbines, generate electricity.", "fol": "", "prediction": ["all x.((Windmill(x) & WindTurbine(x)) -> GeneratesElectricity(x))"]}
{"id": "eqasc_train_1400", "nl": "Wind turbines convert wind energy by using mechanical energy.", "fol": "", "prediction": ["all x.(WindTurbine(x) -> (ConvertsWindEnergy(x) & UsesMechanicalEnergy(x)))"]}
{"id": "eqasc_train_1401", "nl": "All animals are heterotrophs.", "fol": "", "prediction": ["all x.(Animal(x) -> Heterotroph(x))"]}
{"id": "eqasc_train_1402", "nl": "Most animals live by ingesting food and digesting it within specialized cavities.", "fol": "", "prediction": ["all x.(Animal(x) -> (LivesByIngestion(x) & DigestsFood(x) & WithinSpecializedCavities(x)))"]}
{"id": "eqasc_train_1403", "nl": "heterotrophs live by digesting food", "fol": "", "prediction": ["all x.(Heterotroph(x) -> LivesByDigestingFood(x))"]}
{"id": "eqasc_train_1404", "nl": "All cats are animals.", "fol": "", "prediction": ["all x.(Cat(x) -> Animal(x))"]}
{"id": "eqasc_train_1405", "nl": "all cats are heterotrophs", "fol": "", "prediction": ["all x.(Cat(x) -> Heterotroph(x))"]}
{"id": "eqasc_train_1406", "nl": "Heterotrophic bacteria derive energy from the breakdown of organic molecules.", "fol": "", "prediction": ["all x.(HeterotrophicBacteria(x) -> DeriveEnergyFromBreakdownOfOrganicMolecules(x))"]}
{"id": "eqasc_train_1407", "nl": "All animals derive energy from the breakdown of organic molecules", "fol": "", "prediction": ["all x.(Animal(x) -> DeriveEnergyFromBreakdownOfOrganicMolecules(x))"]}
{"id": "eqasc_train_1408", "nl": "All fish are heterotrophic.", "fol": "", "prediction": ["all x.(Fish(x) -> Heterotrophic(x))"]}
{"id": "eqasc_train_1409", "nl": "All fish are animals", "fol": "", "prediction": ["all x.(Fish(x) -> Animal(x))"]}
{"id": "eqasc_train_1410", "nl": "Proteins are an essential nutrient for heterotrophs .", "fol": "", "prediction": ["all x.(Protein(x) -> EssentialNutrientForHeterotrophs(x))"]}
{"id": "eqasc_train_1411", "nl": "Proteins are an essential nutrient for animals.", "fol": "", "prediction": ["all x.(Protein(x) -> EssentialNutrientForAnimals(x))"]}
{"id": "eqasc_train_1412", "nl": "Humans are heterotrophic eukaryotes.", "fol": "", "prediction": ["all x.(Human(x) -> HeterotrophicEukaryote(x))"]}
{"id": "eqasc_train_1413", "nl": "humans are eukyarotes", "fol": "", "prediction": ["all x.(Human(x) -> Eukyarote(x))"]}
{"id": "eqasc_train_1414", "nl": "Heterotrophics means fed by others.", "fol": "", "prediction": ["all x.(Heterotrophic(x) -> FeedsByOthers(x))"]}
{"id": "eqasc_train_1415", "nl": "All animals are fed by others", "fol": "", "prediction": ["all x.(Animal(x) -> Feed(x,y))"]}
{"id": "eqasc_train_1416", "nl": "All consumers are also called Heterotrophs.", "fol": "", "prediction": ["all x.(Consumer(x) -> Heterotroph(x))"]}
{"id": "eqasc_train_1417", "nl": "All animals are consumers.", "fol": "", "prediction": ["all x.(Animal(x) -> Consumer(x))"]}
{"id": "eqasc_train_1418", "nl": "Protein is an essential nutrient for all animals. ", "fol": "", "prediction": ["all x.(Protein(x) -> EssentialNutrientForAnimals(x))"]}
{"id": "eqasc_train_1419", "nl": "All animals have protein as an essential nutrient", "fol": "", "prediction": ["all x.(Animal(x) -> Protein(x))"]}
{"id": "eqasc_train_1420", "nl": "Heterotrophic growth is slow and inefficient.", "fol": "", "prediction": ["all x.(HeterotrophicGrowth(x) -> (Slow(x) & Inefficient(x)))"]}
{"id": "eqasc_train_1421", "nl": "all animals have growth that is slow and inefficient.", "fol": "", "prediction": ["all x.(Animal(x) -> (SlowGrowth(x) & InefficientGrowth(x)))"]}
{"id": "eqasc_train_1422", "nl": "Alligators are cold-blooded animals.", "fol": "", "prediction": ["all x.(Alligator(x) -> ColdBlooded(x))"]}
{"id": "eqasc_train_1423", "nl": "all alligators are heterotrophs", "fol": "", "prediction": ["all x.(Alligator(x) -> Heterotroph(x))"]}
{"id": "eqasc_train_1424", "nl": "a delta is formed by deposition of sediment at the mouth of a river by water fanning out", "fol": "", "prediction": ["all x y z.((Delta(x) & Sediment(y) & River(z) & DepositionAtMouth(x,y,z)) -> FormedByWaterFanningOut(x))"]}
{"id": "eqasc_train_1425", "nl": "Deltas are usually fan-shaped deposits of sediment that form where currents slow at a river's mouth.", "fol": "", "prediction": ["all x.(Delta(x) -> (FanShapedDepositsOfSediment(x) & FormsWhereCurrentsSlowAtMouth(x)))"]}
{"id": "eqasc_train_1426", "nl": "Fan-shaped deposits of sediment form at the mouth of rivers.", "fol": "", "prediction": ["all x.((FanShapedDepositsOfSediment(x) & MouthOfRiver(x)) -> FormsAt(x,y))"]}
{"id": "eqasc_train_1427", "nl": "Deltas are typical on coastlines with large rivers.", "fol": "", "prediction": ["all x.(Delta(x) -> (Culinary(x) & HasLargeRiver(x)))"]}
{"id": "eqasc_train_1428", "nl": "rivers will fan out and deposit sediment typically near a coastline", "fol": "", "prediction": ["all x y.((River(x) & Coastline(y)) -> (FanOut(x) & DepositSediment(x)))"]}
{"id": "eqasc_train_1429", "nl": "Sand is an example of a clastic sediment.", "fol": "", "prediction": ["all x.(Sand(x) -> ClasticSediment(x))"]}
{"id": "eqasc_train_1430", "nl": "a delta is formed by deposition of sand at the mouth of a river by water fanning out", "fol": "", "prediction": ["all x y z.((Delta(x) & Sand(y) & River(z) & DepositionAtMouth(x,y,z)) -> FormedByWaterFanningOut(x))"]}
{"id": "eqasc_train_1431", "nl": "Deltas and estuaries are important habitats.", "fol": "", "prediction": ["all x.((Delta(x) | Estuary(x)) -> ImportantHabitat(x))"]}
{"id": "eqasc_train_1432", "nl": "important habitats are formed by deposition of sediment at the mouth of a river by water fanning out", "fol": "", "prediction": ["all x y.((Habitat(x) & River(y) & DepositionOfSediment(x,y) & FanningOutWater(x,y)) -> Important(x))"]}
{"id": "eqasc_train_1433", "nl": "Sometimes the water of the Ganges mixes with the current of the river Saraswati.", "fol": "", "prediction": ["exists x.(Water(x) & Ganges(x) & Current(x,Saraswati))"]}
{"id": "eqasc_train_1434", "nl": "The Ganges has deltas formed by sediment being deposited at its mouth by water fanning out.", "fol": "", "prediction": ["all x.(Ganges(x) -> (HasDeltas(x) & FormedBySediment(x) & DeposesAtMouthByWater(x)))"]}
{"id": "eqasc_train_1435", "nl": "Erosion is responsible for wearing down exposed places and depositing sediment in level places.", "fol": "", "prediction": ["all x.(Erosion(x) -> (WearsDownExposures(x) & DepositsSedimentInLevelPlaces(x)))"]}
{"id": "eqasc_train_1436", "nl": "a delta is formed by erosion ", "fol": "", "prediction": ["all x.(Delta(x) -> FormedByErosion(x))"]}
{"id": "eqasc_train_1437", "nl": "Rivers provide a water supply.", "fol": "", "prediction": ["all x.(River(x) -> ProvidesWaterSupply(x))"]}
{"id": "eqasc_train_1438", "nl": "a delta is formed by deposition of sediment at the mouth of a water supply fanning out", "fol": "", "prediction": ["all x y.((Delta(x) & WaterSupply(y)) -> FormedByDepositionOfSedimentAtMouthFanningOut(x,y))"]}
{"id": "eqasc_train_1439", "nl": "After sediments are deposited, they are gradually buried by more sediments.", "fol": "", "prediction": ["all x.((Sediment(x) & Deposited(x)) -> BuriedByMoreSediments(x))"]}
{"id": "eqasc_train_1440", "nl": "a delta can lead to the gradual burial of more sediments.", "fol": "", "prediction": ["all x.(Delta(x) -> (LeadsToGraduateBoiling(x) & MoreSediments(x)))"]}
{"id": "eqasc_train_1441", "nl": "When the river slows, it drops the sediment in a wide fan, a delta.", "fol": "", "prediction": ["all x y.((River(x) & Slows(x)) -> (Desert(y) & WideFan(y) & Delta(y)))"]}
{"id": "eqasc_train_1442", "nl": "when rivers slow, sediment is dropped at the mouth of a river by water.", "fol": "", "prediction": ["all x y.((River(x) & Slow(x)) -> SedimentDroppedByWater(y))"]}
{"id": "eqasc_train_1443", "nl": "Alluvial deposits can form deltas where the river flows into a lake or ocean.", "fol": "", "prediction": ["all x.(AlluvialDeposit(x) -> (FormsDelta(x) & RiverFlowsIntoLakeOrOcean(x)))"]}
{"id": "eqasc_train_1444", "nl": "Alluvial deposits fan out into the ocean.", "fol": "", "prediction": ["all x.(AlluvialDeposits(x) -> FanOutIntoOcean(x))"]}
{"id": "eqasc_train_1445", "nl": "Delta Greek symbol, looks like a triangle.", "fol": "", "prediction": ["all x.(DeltaGreekSymbol(x) -> LooksAlikeTriangle(x))"]}
{"id": "eqasc_train_1446", "nl": " deposition of sediment at the mouth of a river by water fanning out is called by a Greek letter", "fol": "", "prediction": ["all x y.((DepositionOfSediment(x) & MouthOfRiver(y) & WaterFanningOut(x)) -> GreekLetter(x))"]}
{"id": "eqasc_train_1447", "nl": "water causes refraction of light", "fol": "", "prediction": ["all x y.((Water(x) & Light(y)) -> CausesRefraction(x,y))"]}
{"id": "eqasc_train_1448", "nl": "water causes light rays to bend", "fol": "", "prediction": ["all x y.((Water(x) & LightRay(y)) -> CausesBoundness(x,y))"]}
{"id": "eqasc_train_1449", "nl": "When light shines through a drop of water or prism, it bends or is refracted inside the droplet.", "fol": "", "prediction": ["all x y.((Light(x) & DropOfWaterOrPrism(y)) -> (Bends(x,y) | RefractedInside(x,y)))"]}
{"id": "eqasc_train_1450", "nl": "Light is bent inside of water droplets.", "fol": "", "prediction": ["all x y.((Light(x) & WaterDroplet(y)) -> BentInside(x,y))"]}
{"id": "eqasc_train_1451", "nl": "Rainbows are formed when sunlight is refracted through raindrops.", "fol": "", "prediction": ["all x.(Rainbow(x) -> (FormedBySunlight(x) & RefractedThroughRaindrops(x)))"]}
{"id": "eqasc_train_1452", "nl": "Rainbows are formed when light passes through water", "fol": "", "prediction": ["all x.(Rainbow(x) -> (FormedByLight(x) & PassesThroughWater(x)))"]}
{"id": "eqasc_train_1453", "nl": "Refracted light can be deceptive.", "fol": "", "prediction": ["all x.(RefractedLight(x) -> CanBeDeceptive(x))"]}
{"id": "eqasc_train_1454", "nl": "Water can be deceptive.", "fol": "", "prediction": ["all x.(Water(x) -> Deceptive(x))"]}
{"id": "eqasc_train_1455", "nl": "Refraction is the bending which is caused by changing speed.", "fol": "", "prediction": ["all x.(Refraction(x) -> (Blooding(x) & CausedByChangeSpeed(x)))"]}
{"id": "eqasc_train_1456", "nl": "water can change the speed of light", "fol": "", "prediction": ["all x.(Water(x) -> CanChangeSpeedOfLight(x))"]}
{"id": "eqasc_train_1457", "nl": "Water causes the bending of a ray of light", "fol": "", "prediction": ["all x y.((Water(x) & RayOfLight(y)) -> CausesBbendingOf(x,y))"]}
{"id": "eqasc_train_1458", "nl": "Water includes all liquids.", "fol": "", "prediction": ["all x.(Water(x) -> IncludesLiquids(x))"]}
{"id": "eqasc_train_1459", "nl": "All liquids cause refraction of light.", "fol": "", "prediction": ["all x.(Liquid(x) -> CausesRefractionOfLight(x))"]}
{"id": "eqasc_train_1460", "nl": "Halos are produced by the refraction of light.", "fol": "", "prediction": ["all x.(Halos(x) -> ProducedByRefractionOfLight(x))"]}
{"id": "eqasc_train_1461", "nl": "water causes halos", "fol": "", "prediction": ["all x.((Water(x) & CausesHalos(x)) -> CausesHalos(x))"]}
{"id": "eqasc_train_1462", "nl": "Water is a compound of hydrogen and oxygen.", "fol": "", "prediction": ["all x.(Water(x) -> (CompoundOfHydrogen(x) & CompoundOfOxygen(x)))"]}
{"id": "eqasc_train_1463", "nl": "A compound of hydrogen and oxygen causes refraction of light.", "fol": "", "prediction": ["all x.((Compound(x) & Hydrogen(x) & Oxygen(x)) -> CausesRefractionOfLight(x))"]}
{"id": "eqasc_train_1464", "nl": "DNA is found in chromosomes.", "fol": "", "prediction": ["all x.(DNA(x) -> FoundInChromosomes(x))"]}
{"id": "eqasc_train_1465", "nl": "Genes live on chromosomes, chromosomes live in cells.", "fol": "", "prediction": ["all x y.((Gene(x) & Chromosome(y)) -> (LivesOn(x,chromosome) & LivesIn(y,cell)))"]}
{"id": "eqasc_train_1466", "nl": "DNA is found in cells.", "fol": "", "prediction": ["all x.(DNA(x) -> FoundInCells(x))"]}
{"id": "eqasc_train_1467", "nl": "Deoxyribonucleic acid is found in chromosomes.", "fol": "", "prediction": ["all x.(DeoxyribonucleicAcid(x) -> FoundInChromosomes(x))"]}
{"id": "eqasc_train_1468", "nl": "deoxyribonucleic acid is found in chromosomes", "fol": "", "prediction": ["all x.(DeoxyribonucleicAcid(x) -> FoundInChromosomes(x))"]}
{"id": "eqasc_train_1469", "nl": "Chromosome Chromosome A chromosome is a grouping of coiled strands of DNA , containing many genes.", "fol": "", "prediction": ["all x.(Chromosome(x) -> (GroupingOfCoiledStringsOfDNA(x) & ContainsManyGenes(x)))"]}
{"id": "eqasc_train_1470", "nl": "DNA comes in coiled strands", "fol": "", "prediction": ["all x.(DNA(x) -> ComesInCoiledStrings(x))"]}
{"id": "eqasc_train_1471", "nl": "DNA condenses to form chromosomes.", "fol": "", "prediction": ["all x.(DNACondenses(x) -> FormsChromosomes(x))"]}
{"id": "eqasc_train_1472", "nl": "Genectic material is compressed to form chromosomes", "fol": "", "prediction": ["all x y.((GeneticMaterial(x) & GenecticMaterial(y)) -> (CompressedToFormChromosomes(x,y)))"]}
{"id": "eqasc_train_1473", "nl": "First the chromosomes duplicate themselves.", "fol": "", "prediction": ["all x.(Chromosome(x) -> Duplicates(x))"]}
{"id": "eqasc_train_1474", "nl": "DNA is found to duplicate themselves", "fol": "", "prediction": ["all x y.((DNA(x) & Duplicates(x,y)) -> FoundToDuplicate(x,y))"]}
{"id": "eqasc_train_1475", "nl": "DNA is found in coiled groups of genes.", "fol": "", "prediction": ["all x.(DNA(x) -> FoundInCoiledGenes(x))"]}
{"id": "eqasc_train_1476", "nl": "Chromosomes are found in the nucleus of a cell.", "fol": "", "prediction": ["all x y.((Chromosome(x) & Cell(y)) -> FoundInNucleus(x,y))"]}
{"id": "eqasc_train_1477", "nl": "DNA is found in the nucleus of a cell", "fol": "", "prediction": ["all x y.((DNA(x) & Cell(y)) -> FoundInNucleus(x,y))"]}
{"id": "eqasc_train_1478", "nl": "DNA found in cells ", "fol": "", "prediction": ["all x y.((DNA(x) & Cell(y)) -> FoundIn(x,y))"]}
{"id": "eqasc_train_1479", "nl": "Chromosomes are located in the nucleus of a cell.", "fol": "", "prediction": ["all x y.((Chromosome(x) & Cell(y)) -> LocatedInNucleus(x,y))"]}
{"id": "eqasc_train_1480", "nl": "DNA is found in the nucleus of a cell.", "fol": "", "prediction": ["all x y.((DNA(x) & Cell(y)) -> FoundInNucleus(x,y))"]}
{"id": "eqasc_train_1481", "nl": "Genes are part of the chromosomes and coded for on the DNA strands.", "fol": "", "prediction": ["all x.(Gene(x) -> (PartOfChromosomes(x) & CodedForOnDNAStrings(x)))"]}
{"id": "eqasc_train_1482", "nl": "DNA is found in coded genes", "fol": "", "prediction": ["all x y.((DNA(x) & CodedGene(y)) -> FoundIn(x,y))"]}
{"id": "eqasc_train_1483", "nl": "Some viruses live in a dormant state inside the body.", "fol": "", "prediction": ["exists x.(Virus(x) & LivesInDormantState(x))"]}
{"id": "eqasc_train_1484", "nl": "After an episode of chickenpox, the virus becomes dormant in the body.", "fol": "", "prediction": ["all x.((ChickpoxEpisode(x) & Virus(x)) -> DormantInBody(x))"]}
{"id": "eqasc_train_1485", "nl": "chickenpox can stay dormant in the brain", "fol": "", "prediction": ["all x.(Chickenpox(x) -> CanStayDormantInBrain(x))"]}
{"id": "eqasc_train_1486", "nl": "Chicken pox can live in an inactive state.", "fol": "", "prediction": ["all x.(ChickenPox(x) -> LivesInInactiveState(x))"]}
{"id": "eqasc_train_1487", "nl": "Hibernation is a dormant sleep-like state.", "fol": "", "prediction": ["all x.(Hibernation(x) -> DormantSleepLike(x))"]}
{"id": "eqasc_train_1488", "nl": "some viruses live in hibernation inside the body", "fol": "", "prediction": ["exists x.(Virus(x) & LivesInHibernation(x))"]}
{"id": "eqasc_train_1489", "nl": "Viral infection means there is a virus living in the body.", "fol": "", "prediction": ["all x.(ViralInfection(x) -> exists y.(Virus(y) & LivesInBody(x,y)))"]}
{"id": "eqasc_train_1490", "nl": "Some viral infections live in a dormant state", "fol": "", "prediction": ["exists x.(ViralInfection(x) & LivesInDormantState(x))"]}
{"id": "eqasc_train_1491", "nl": "After being effected by chickenpox, the virus becomes dormant. ", "fol": "", "prediction": ["all x.((Chickenpox(x) & EffectedBy(x,Chickenpox)) -> Dormant(x))"]}
{"id": "eqasc_train_1492", "nl": "Influenza viruses are notorious for their seasonality.", "fol": "", "prediction": ["all x.(InfluenzaVirus(x) -> Seasonal(x))"]}
{"id": "eqasc_train_1493", "nl": "influenza can live in a dormant state inside the body", "fol": "", "prediction": ["all x.(Influenza(x) -> (LivesInDormantState(x) & InsideBody(x)))"]}
{"id": "eqasc_train_1494", "nl": "Although the herpes virus never leaves the body, it can lay dormant for long periods of time.", "fol": "", "prediction": ["all x.(HerpesVirus(x) -> (-LeavesBody(x) & LaysDormant(x)))"]}
{"id": "eqasc_train_1495", "nl": "Herpes lives in a dormant state", "fol": "", "prediction": ["all x.(Herpes(x) -> LivesInDormantState(x))"]}
{"id": "eqasc_train_1496", "nl": "Humans have bodies.", "fol": "", "prediction": ["all x.(Human(x) -> HasBody(x))"]}
{"id": "eqasc_train_1497", "nl": "some viruses live in a dormant state inside of humans", "fol": "", "prediction": ["exists x.(Virus(x) & LivesInDormantState(x) & InsideHumans(x))"]}
{"id": "eqasc_train_1498", "nl": "When ferns are dormant it is as if they are hibernating.", "fol": "", "prediction": ["all x.((Fern(x) & Dormant(x)) -> Hibernating(x))"]}
{"id": "eqasc_train_1499", "nl": "Some viruses live in a hibernating state inside the body.", "fol": "", "prediction": ["exists x.(Virus(x) & HibernatingState(x))"]}
{"id": "eqasc_train_1500", "nl": "Viruses on the other hand are much smaller and multiply inside the cells of the body.", "fol": "", "prediction": ["all x.(Virus(x) -> (Smaller(x) & MultiplyInBody(x)))"]}
{"id": "eqasc_train_1501", "nl": "some harmful organisms live in a dormant state inside the body before multiplying inside cells", "fol": "", "prediction": ["exists x.(HarmfulOrganism(x) & LivesInDormantState(x) & MultipliesInsideCells(x))"]}
{"id": "eqasc_train_1502", "nl": "Cold and flu symptoms are the result of the body s response to the virus.", "fol": "", "prediction": ["all x y.((Cold(x) & Flu(y)) -> (BodyResponseToVirus(x,y)))"]}
{"id": "eqasc_train_1503", "nl": "Some viruses live in a dormant state with cold and flu symptoms", "fol": "", "prediction": ["exists x.(Virus(x) & DormantState(x) & ColdAndFluSymptoms(x))"]}
{"id": "eqasc_train_1504", "nl": "Viruses Viruses are agents that infect cells, yet lack many of the characteristics of life.", "fol": "", "prediction": ["all x.(Virus(x) -> (InfectsCells(x) & -HasLifeCharacteristics(x)))"]}
{"id": "eqasc_train_1505", "nl": "Some agents that infect cells live in a dormant state inside the body.", "fol": "", "prediction": ["exists x.(Agent(x) & InfectsCells(x) & LivesInDormantState(x))"]}
{"id": "eqasc_train_1506", "nl": "When inactive or dormant, Dendrobiums require little or no fertilizer.", "fol": "", "prediction": ["all x.((Dendrobium(x) & (Inactive(x) | Dormant(x))) -> RequiresLittleOrNoFertilizer(x))"]}
{"id": "eqasc_train_1507", "nl": "Some viruses live in an inactive state inside the body.", "fol": "", "prediction": ["exists x.(Virus(x) & LivesInInactiveState(x))"]}
{"id": "eqasc_train_1508", "nl": "True influenza is caused by one of the influenza viruses.", "fol": "", "prediction": ["all x.(TrueInfluenza(x) -> CausedByInfluenzaVirus(x))"]}
{"id": "eqasc_train_1509", "nl": "Most invertebrates have a nervous system.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> NervousSystem(x))"]}
{"id": "eqasc_train_1510", "nl": "Invertebrates are animals without a backbone.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> Animal(x) & -Backbone(x))"]}
{"id": "eqasc_train_1511", "nl": "Most animals without backbones have a nervous system.", "fol": "", "prediction": ["all x.((Animal(x) & -Backbone(x)) -> NervousSystem(x))"]}
{"id": "eqasc_train_1512", "nl": "Jellyfish and insects are invertebrates.", "fol": "", "prediction": ["all x.((Jellyfish(x) | Insect(x)) -> Invertebrate(x))"]}
{"id": "eqasc_train_1513", "nl": "Jellyfish have a nervous system", "fol": "", "prediction": ["all x.(Jellyfish(x) -> NervousSystem(x))"]}
{"id": "eqasc_train_1514", "nl": "Insects are the most common invertebrates.", "fol": "", "prediction": ["all x.(Insect(x) -> (Invertebrate(x) & MostCommon(x)))"]}
{"id": "eqasc_train_1515", "nl": "most insects have a nervous system", "fol": "", "prediction": ["all x.(Insect(x) -> NervousSystem(x))"]}
{"id": "eqasc_train_1516", "nl": "Insects have a nervous system.", "fol": "", "prediction": ["all x.(Insect(x) -> NervousSystem(x))"]}
{"id": "eqasc_train_1517", "nl": "An octopus is a very intelligent invertebrate.", "fol": "", "prediction": ["all x.(Octopus(x) -> IntelligentInvertebrate(x))"]}
{"id": "eqasc_train_1518", "nl": "an octopus has a nervous system", "fol": "", "prediction": ["all x.(Octopus(x) -> NervousSystem(x))"]}
{"id": "eqasc_train_1519", "nl": "Invertebrates Among the invertebrates, the largest number of species are insects.", "fol": "", "prediction": ["all x.(Invertebrates(x) -> (LargestNumberOfSpecies(x) & Invertebrates(x)))"]}
{"id": "eqasc_train_1520", "nl": "insects have a nervous system", "fol": "", "prediction": ["all x.(Insect(x) -> NervousSystem(x))"]}
{"id": "eqasc_train_1521", "nl": "jellyfish have a nervous system", "fol": "", "prediction": ["all x.(Jellyfish(x) -> NervousSystem(x))"]}
{"id": "eqasc_train_1522", "nl": "Jellyfish have a nervous system.", "fol": "", "prediction": ["all x.(Jellyfish(x) -> NervousSystem(x))"]}
{"id": "eqasc_train_1523", "nl": "Afferent information is information that is inbound to the nervous system.", "fol": "", "prediction": ["all x.(AfferentInformation(x) -> InboundToNervousSystem(x))"]}
{"id": "eqasc_train_1524", "nl": "Most invertebrates have afferent information inbound", "fol": "", "prediction": ["all x.(Invertebrate(x) -> (HasAfferentInformationInbound(x) & Invertebrate(x)))"]}
{"id": "eqasc_train_1525", "nl": "Narcotic analgesics act on the central nervous system to relieve pain.", "fol": "", "prediction": ["all x.(NarcoticAnalgesic(x) -> ActsOnCentralNervousSystem(x))"]}
{"id": "eqasc_train_1526", "nl": "narcotic analgesics act on most invertebrates to relieve pain", "fol": "", "prediction": ["all x y.((NarcoticAnalgesic(x) & Invertebrate(y)) -> ActsOnToRelievePain(x,y))"]}
{"id": "eqasc_train_1527", "nl": "Most people can survive only a few days without water.", "fol": "", "prediction": ["all x.(Person(x) -> SurvivesWithoutWater(x))"]}
{"id": "eqasc_train_1528", "nl": "Without an ample supply of water to drink, people become dehydrated.", "fol": "", "prediction": ["all x.((Person(x) & -AmpleWaterSupply(x)) -> Dehydrated(x))"]}
{"id": "eqasc_train_1529", "nl": "People can only survive a few days of dehydration", "fol": "", "prediction": ["all x.((Person(x) & SurvivesDehydration(x)) -> FewDays(x))"]}
{"id": "eqasc_train_1530", "nl": "Water is everywhere H20.", "fol": "", "prediction": ["all x.(Water(x) -> H20(x))"]}
{"id": "eqasc_train_1531", "nl": "Most people can only survive a few days without H20.", "fol": "", "prediction": ["all x.((Person(x) & CanSurviveWithoutH20(x)) -> CanSurviveWithoutH20(x))"]}
{"id": "eqasc_train_1532", "nl": "Food and water shortages can only lead to diseases and many sick people and sick animals.", "fol": "", "prediction": ["all x.((FoodShortage(x) & WaterShortage(x)) -> (LeadsToDiseases(x) & ManySickPeople(x) & ManySickAnimals(x)))"]}
{"id": "eqasc_train_1533", "nl": "If the body goes without its requirements a person will eventually get sick after a few days", "fol": "", "prediction": ["all x.((BodyGoesWithoutRequirements(x) & Person(x)) -> EventuallyGetsSickAfterTwoDays(x))"]}
{"id": "eqasc_train_1534", "nl": "Water is the best fluid for hydration.", "fol": "", "prediction": ["all x.(Water(x) -> BestFluidForHydration(x))"]}
{"id": "eqasc_train_1535", "nl": "Most people can survive only a few days without hydration", "fol": "", "prediction": ["all x.((Person(x) & SurvivesWithoutHydration(x)) -> CanSurviveWithoutHydration(x))"]}
{"id": "eqasc_train_1536", "nl": "And drinking water is something that people just have to have.", "fol": "", "prediction": ["all x.(DrinkingWater(x) -> JustHasToHave(x))"]}
{"id": "eqasc_train_1537", "nl": "most people can survive only a few days without drinking", "fol": "", "prediction": ["all x.((Person(x) & SurvivesWithoutDrinking(x)) -> SurvivesWithoutDrinking(x))"]}
{"id": "eqasc_train_1538", "nl": "most people can survive only a few days without h2o", "fol": "", "prediction": ["all x.((Person(x) & SurvivesWithoutH2o(x)) -> SurvivesWithoutH2o(x))"]}
{"id": "eqasc_train_1539", "nl": "Most people can survive only a few days without H20.", "fol": "", "prediction": ["all x.((Person(x) & SurvivesWithoutH20(x)) -> CanSurviveWithoutH20(x))"]}
{"id": "eqasc_train_1540", "nl": "Most people can survive only a few days without H2O", "fol": "", "prediction": ["all x.((Person(x) & SurvivesWithoutH2O(x)) -> SurvivesWithoutH2O(x))"]}
{"id": "eqasc_train_1541", "nl": "Close to 200,000 people drink that water.", "fol": "", "prediction": ["all x.((Person(x) & DrinksWater(x,200000)) -> DrinksWater(x,200000))"]}
{"id": "eqasc_train_1542", "nl": "people can survive only a few days without drinking", "fol": "", "prediction": ["all x.((People(x) & SurvivesWithoutDrinking(x)) -> CanSurviveWithoutDrinking(x))"]}
{"id": "eqasc_train_1543", "nl": "Man's survival depends on water.", "fol": "", "prediction": ["all x.(Man(x) -> DependsOnWater(x))"]}
{"id": "eqasc_train_1544", "nl": "men need water to live", "fol": "", "prediction": ["all x.(Men(x) -> NeedsWaterToLive(x))"]}
{"id": "eqasc_train_1545", "nl": "Water combines hydrogen and oxygen.", "fol": "", "prediction": ["all x.(Water(x) -> (CombinesHydrogen(x) & CombinesOxygen(x)))"]}
{"id": "eqasc_train_1546", "nl": "Most people can survive only a few days without a combination of hydrogen and oxygen", "fol": "", "prediction": ["all x.((Person(x) & SurvivesWithoutHydrogen(x) & SurvivesWithOxygen(x)) -> SurvivesWithHydrogen(x))"]}
{"id": "eqasc_train_1547", "nl": "H20 Bottled water was generally consumed last year.", "fol": "", "prediction": ["all x.((BottledWater(x) & ConsumedLastYear(x)) -> Bottled(x))"]}
{"id": "eqasc_train_1548", "nl": "Water controls the body's temperature.", "fol": "", "prediction": ["all x.(Water(x) -> ControlsBodyTemperature(x))"]}
{"id": "eqasc_train_1549", "nl": "Most people can survive only a few days without controlling the body's temperature", "fol": "", "prediction": ["all x.((Person(x) & SurvivesOnlyFiveDays(x) & -ControlsTemperature(x)) -> CanSurviveOnlyFiveDays(x))"]}
{"id": "eqasc_train_1550", "nl": "All people belong to the human family.", "fol": "", "prediction": ["all x.(Person(x) -> HumanFamily(x))"]}
{"id": "eqasc_train_1551", "nl": "Most humans can only survive a few days without water.", "fol": "", "prediction": ["all x.(Human(x) -> SurvivesWithoutWater(x))"]}
{"id": "eqasc_train_1552", "nl": "Earth is the only water planet.", "fol": "", "prediction": ["all x.(Earth(x) -> WaterPlanet(x))"]}
{"id": "eqasc_train_1553", "nl": "most people can survive only a few days away from earth", "fol": "", "prediction": ["all x y.((Person(x) & Earth(y)) -> Survives(x,y))"]}
{"id": "eqasc_train_1554", "nl": "Most of the earth's water is liquid.", "fol": "", "prediction": ["all x.(EarthsWater(x) -> Liquid(x))"]}
{"id": "eqasc_train_1555", "nl": "Most people can survive only a few days without liquid", "fol": "", "prediction": ["all x.((Person(x) & SurvivesWithoutLiquids(x)) -> CanSurviveWithoutLiquids(x))"]}
{"id": "eqasc_train_1556", "nl": "Muscles can only contract.", "fol": "", "prediction": ["all x.(Muscle(x) -> CanContract(x))"]}
{"id": "eqasc_train_1557", "nl": "Muscle size comes from lifting heavy weights.", "fol": "", "prediction": ["all x.(MuscleSize(x) -> LiftsHeavyWeights(x))"]}
{"id": "eqasc_train_1558", "nl": "Contracting comes from lifting heavy weights.", "fol": "", "prediction": ["all x.(Contracting(x) -> LiftsHeavyWeights(x))"]}
{"id": "eqasc_train_1559", "nl": "Contraction is a type of movement.", "fol": "", "prediction": ["all x.(Contraction(x) -> Movement(x))"]}
{"id": "eqasc_train_1560", "nl": "Muscles can only move", "fol": "", "prediction": ["all x.(Muscle(x) -> CanMove(x))"]}
{"id": "eqasc_train_1561", "nl": "Smooth muscles are involuntary muscles.", "fol": "", "prediction": ["all x.(SmoothMuscle(x) -> InvoluntaryMuscle(x))"]}
{"id": "eqasc_train_1562", "nl": "Something that can be smooth can only contract", "fol": "", "prediction": ["all x.((Smooth(x) & CanBe(x)) -> CanContract(x))"]}
{"id": "eqasc_train_1563", "nl": "From qlibw , to press as grapes , to contract, to squeeze.", "fol": "", "prediction": ["all x y.((Qlibw(x) & Grape(y)) -> (PressAs(x,y) & Contract(x) & Squeeze(x)))"]}
{"id": "eqasc_train_1564", "nl": "Muscles can only squeeze", "fol": "", "prediction": ["all x.(Muscle(x) -> CanSqueeze(x))"]}
{"id": "eqasc_train_1565", "nl": "Quadriceps contractions and leg raises are begun immediately.", "fol": "", "prediction": ["all x.((QuadricepsContraction(x) & LegRaise(x)) -> BeginsImmediately(x))"]}
{"id": "eqasc_train_1566", "nl": "quadriceps are muscles", "fol": "", "prediction": ["all x.(Quadriceps(x) -> Muscle(x))"]}
{"id": "eqasc_train_1567", "nl": "Muscles in the upper arm called biceps are used to flex the arm.", "fol": "", "prediction": ["all x.((Muscle(x) & UpperArm(x) & Biceps(x)) -> FlexArm(x))"]}
{"id": "eqasc_train_1568", "nl": "biceps can only contract", "fol": "", "prediction": ["all x.(Biceps(x) -> CanContract(x))"]}
{"id": "eqasc_train_1569", "nl": "When contracted the triceps femoris pulls the thigh forward and extends the shank.", "fol": "", "prediction": ["all x.(Contracted(x) -> (TricepsFemoris(x) & PullsThighForward(x) & ExtendsShank(x)))"]}
{"id": "eqasc_train_1570", "nl": "Muscles like the triceps femoris are used to move bones.", "fol": "", "prediction": ["all x.((Muscle(x) & TricepsFemoris(x)) -> UsedToMoveBones(x))"]}
{"id": "eqasc_train_1571", "nl": "Arm day hits the bicep, tricep and forearm muscles.", "fol": "", "prediction": ["all x.(ArmDay(x) -> (HitsBicep(x) & Hitstricep(x) & HitsForearm(x)))"]}
{"id": "eqasc_train_1572", "nl": "triceps can only contract", "fol": "", "prediction": ["all x.(triceps(x) -> CanContract(x))"]}
{"id": "eqasc_train_1573", "nl": "Bones work with muscles to perform movement.", "fol": "", "prediction": ["all x.(Bone(x) -> WorksWithMuscles(x))"]}
{"id": "eqasc_train_1574", "nl": "Contraction enables bones to perform movement.", "fol": "", "prediction": ["all x.(Contraction(x) -> EnablesBonesToPerformMovement(x))"]}
{"id": "eqasc_train_1575", "nl": "when a hemisphere is tilted away from the sun , that hemisphere receives less direct sunlight", "fol": "", "prediction": ["all x y z.((Hemisphere(x) & TiltedAwayFromSun(x,y) & Sun(z)) -> ReceivesLessDirectSunlight(x,z))"]}
{"id": "eqasc_train_1576", "nl": "The less direct the sunlight, the colder the weather.", "fol": "", "prediction": ["all x.((LessDirectSunlight(x) & ColderWeather(x)) -> ColderWeather(x))"]}
{"id": "eqasc_train_1577", "nl": "when a hemisphere is tilted away from the sun, that hemisphere has colder weather.", "fol": "", "prediction": ["all x y.((Hemisphere(x) & TiltedAwayFromSun(x)) -> ColderWeather(y))"]}
{"id": "eqasc_train_1578", "nl": "Plants use the direct light energy from the sun to grow.", "fol": "", "prediction": ["all x.(Plant(x) -> UsesDirectLightEnergyFromSun(x))"]}
{"id": "eqasc_train_1579", "nl": "Plants have more difficulty growing when a hemisphere is tilted away from the sun", "fol": "", "prediction": ["all x y.((Plant(x) & Hemisphere(y) & TiltedAwayFromSun(y,x)) -> MoreDifficultyGrowing(x,y))"]}
{"id": "eqasc_train_1580", "nl": "Because of this tilt, the northern hemisphere receives less direct sunlight (creating winter) while the southern hemisphere receives more direct sunlight (creating summer).", "fol": "", "prediction": ["all x y.((NorthernHemispheric(x) & SouthernHemispheric(y)) -> (LessDirectSunlight(x) & MoreDirectSunlight(y)))"]}
{"id": "eqasc_train_1581", "nl": "a hemisphere is tilted away from the sun creating winter", "fol": "", "prediction": ["all x y z.((Hemisphere(x) & Sun(y) & Winter(z)) -> TiltedAwayFrom(x,y,z))"]}
{"id": "eqasc_train_1582", "nl": "In summer the northern hemisphere is tilted toward the sun and in winter the Earth is tilted away.", "fol": "", "prediction": ["(all x.((Summer(x) & NorthernHemisphere(x)) -> TiltedTowardsSun(x)) & all y.((Winter(y) & Earth(y)) -> TiltedAway(y)))"]}
{"id": "eqasc_train_1583", "nl": "the northern hemisphere receives less direct sunlight in the winter", "fol": "", "prediction": ["all x y.((NorthernHemisphere(x) & Winter(y)) -> LessDirectSunlight(x,y))"]}
{"id": "eqasc_train_1584", "nl": "In winter, the northern hemisphere is tilted away from the sun.", "fol": "", "prediction": ["all x y.((NorthernHemisphere(x) & Sun(y)) -> TiltedAway(x,y))"]}
{"id": "eqasc_train_1585", "nl": " the northern hemisphere gets less sun in the winter", "fol": "", "prediction": ["all x y.((NorthernHemisphere(x) & Winter(y)) -> LessSunInWinter(x,y))"]}
{"id": "eqasc_train_1586", "nl": "With less sunlight, the forest is cooler and wetter.", "fol": "", "prediction": ["all x.((Forest(x) & LessSunlight(x)) -> (Cooler(x) & Wetter(x)))"]}
{"id": "eqasc_train_1587", "nl": "When a hemisphere tilts away from the sun, the forests there become cooler and wetter.", "fol": "", "prediction": ["all x.((Hemisphere(x) & TiltsAwayFromSun(x)) -> (BecomesColder(x) & Wetter(x)))"]}
{"id": "eqasc_train_1588", "nl": "For example, when the tilt increases, the Northern Hemisphere in winter receives less heat.", "fol": "", "prediction": ["all x y.((Tilt(x) & NorthernHemisphere(y) & Increases(x,y)) -> ReceivesLessHeat(y))"]}
{"id": "eqasc_train_1589", "nl": "It is winter when we receive less sunlight", "fol": "", "prediction": ["all x.((Winter(x) & LessSunlight(x)) -> Winter(x))"]}
{"id": "eqasc_train_1590", "nl": "Sunlight is pure energy.", "fol": "", "prediction": ["all x.(Sunlight(x) -> PureEnergy(x))"]}
{"id": "eqasc_train_1591", "nl": "when a hemisphere is tilted away from the sun , that hemisphere receives less direct energy", "fol": "", "prediction": ["all x y z.((Hemisphere(x) & TiltedAwayFromSun(x,y) & Sun(y)) -> ReceivesLessDirectEnergy(x,z))"]}
{"id": "eqasc_train_1592", "nl": "Similarly, stars are referred to as suns, but our star is the Sun.", "fol": "", "prediction": ["all x.(Star(x) -> (Sun(x) & Sun(x)))"]}
{"id": "eqasc_train_1593", "nl": "when a hemisphere is tilted away from our star it receives less direct sunlight", "fol": "", "prediction": ["all x y.((Hemisphere(x) & TiltedAway(x) & Star(y)) -> LessDirectSunlight(x,y))"]}
{"id": "eqasc_train_1594", "nl": "Sunlight is delivered in small packets of energy called photons.", "fol": "", "prediction": ["all x.(Sunlight(x) -> (DeliveredInSmallPackagesOfEnergy(x) & Photons(x)))"]}
{"id": "eqasc_train_1595", "nl": "When a hemisphere is tilted away from the sun, that hemisphere receives less photons.", "fol": "", "prediction": ["all x y.((Hemisphere(x) & TiltedAwayFromSun(x,y)) -> ReceivesLessPhotons(x,y))"]}
{"id": "eqasc_train_1596", "nl": "When the axis is pointed toward the sun, more light falls on that hemisphere.", "fol": "", "prediction": ["all x y.((Axis(x) & PointedTowardsSun(x)) -> MoreLightFallsOnHemisphere(y))"]}
{"id": "eqasc_train_1597", "nl": "a hemisphere receives less sunlight when it points away", "fol": "", "prediction": ["all x.((Hemisphere(x) & PointsAway(x)) -> ReceivesLessSunlight(x))"]}
{"id": "eqasc_train_1598", "nl": "The Sun The Sun is our nearest star.", "fol": "", "prediction": ["Sun(Sun) -> NearestStar(Sun))"]}
{"id": "eqasc_train_1599", "nl": "when a hemisphere is tilted away from our nearest star, the hemisphere receives less direct sunlight", "fol": "", "prediction": ["all x y.((HemisphericHemisphere(x) & TiltedAwayFromNearestStar(x,y)) -> ReceivesLessDirectSunlight(x))"]}
{"id": "eqasc_train_1600", "nl": "Rivers are usually larger than streams.", "fol": "", "prediction": ["all x y.((River(x) & Stream(y)) -> Larger(x,y))"]}
{"id": "eqasc_train_1601", "nl": "And the fourth river is the Great River, the river Euphrates.", "fol": "", "prediction": ["(QuadrantRiver(RiverEuphrates)"]}
{"id": "eqasc_train_1602", "nl": "the Euphrates is usually larger than streams", "fol": "", "prediction": ["all x y.((Euphrates(x) & Stream(y)) -> LargerThan(x,y))"]}
{"id": "eqasc_train_1603", "nl": "Small streams join larger ones and are, themselves, joined by even smaller streams.", "fol": "", "prediction": ["all x y.((SmallStream(x) & LargerStream(y)) -> (Joins(x,y) & JoinedBy(x,y)))"]}
{"id": "eqasc_train_1604", "nl": "streams join rivers", "fol": "", "prediction": ["all x y.((Stream(x) & River(y)) -> Joins(x,y))"]}
{"id": "eqasc_train_1605", "nl": "Rivers can be divided into rivers and streams.", "fol": "", "prediction": ["all x.(River(x) -> (DividedInto(x,River) | DividedInto(x,Stream)))"]}
{"id": "eqasc_train_1606", "nl": "Large waterways can be divided into smaller streams", "fol": "", "prediction": ["all x.(LargeWaterways(x) -> CanBeDividedIntoSmallerStreams(x))"]}
{"id": "eqasc_train_1607", "nl": "Estuaries are where the river meets the ocean.", "fol": "", "prediction": ["all x.(Estuary(x) -> (MeetsRiver(x) & MeetsOcean(x)))"]}
{"id": "eqasc_train_1608", "nl": "Estuaries are larger than streams. ", "fol": "", "prediction": ["all x y.((Estuary(x) & Stream(y)) -> LargerThan(x,y))"]}
{"id": "eqasc_train_1609", "nl": "The Euphrates is larger than a stream.", "fol": "", "prediction": ["all x y.((Euphrates(x) & Stream(y)) -> Larger(x,y))"]}
{"id": "eqasc_train_1610", "nl": "Then, the stream flows into a larger body of water.", "fol": "", "prediction": ["all x y.((Stream(x) & BodyOfWater(y)) -> FlowsInto(x,y))"]}
{"id": "eqasc_train_1611", "nl": "rivers have more water than streams", "fol": "", "prediction": ["all x y.((River(x) & Stream(y)) -> MoreWater(x,y))"]}
{"id": "eqasc_train_1612", "nl": "Second half becomes rocky with small stream crossings some standing water.", "fol": "", "prediction": ["(Riverside(secondhalf) & SmallStreamCrossing(secondhalf) & StandingWater(secondhalf))"]}
{"id": "eqasc_train_1613", "nl": "rivers are usually larger than small water crossings.", "fol": "", "prediction": ["all x y.((River(x) & SmallWaterCrossing(y)) -> Larger(x,y))"]}
{"id": "eqasc_train_1614", "nl": "Many fresh-water rivers run into the sea.", "fol": "", "prediction": ["all x.(FreshWaterRiver(x) -> RunsIntoSea(x))"]}
{"id": "eqasc_train_1615", "nl": "streams are smaller bodies of water", "fol": "", "prediction": ["all x.(Stream(x) -> (SmallerBodyOfWater(x) & SmallerBodyOfWater(x)))"]}
{"id": "eqasc_train_1616", "nl": "Watersheds are creeks, streams and rivers.", "fol": "", "prediction": ["all x.(Watershed(x) -> (Crater(x) | Stream(x) | River(x)))"]}
{"id": "eqasc_train_1617", "nl": "a river is a watershred", "fol": "", "prediction": ["all x.(River(x) -> Watershred(x))"]}
{"id": "eqasc_train_1618", "nl": "Snows melt and replenish the rivers and lakes.", "fol": "", "prediction": ["all x.(Snow(x) -> (Melts(x) & Reproduces(x,River) & Reproduces(x,Lake)))"]}
{"id": "eqasc_train_1619", "nl": "Something made from metling snow is usually larger than a stream", "fol": "", "prediction": ["all x y.((MetallingSnow(x) & Stream(y)) -> LargerThan(x,y))"]}
{"id": "eqasc_train_1620", "nl": "Mountain stream water is drinkable.", "fol": "", "prediction": ["all x.(MountainStreamWater(x) -> Drinkable(x))"]}
{"id": "eqasc_train_1621", "nl": "Rivers are usually larger than mountain sources", "fol": "", "prediction": ["all x y.((River(x) & MountainSource(y)) -> LargerThan(x,y))"]}
{"id": "eqasc_train_1622", "nl": "a river is a watershed", "fol": "", "prediction": ["all x.(River(x) -> Watershed(x))"]}
{"id": "eqasc_train_1623", "nl": "Fish is available in the rivers and lakes of the district in large quantities.", "fol": "", "prediction": ["all x y.((Fish(x) & District(y)) -> (AvailableInRivers(x,y) & AvailableInLakes(x,y)))"]}
{"id": "eqasc_train_1624", "nl": "Habitats where fish live in large quantities are usually larger than streams", "fol": "", "prediction": ["all x y.((Habitat(x) & Fish(y) & LivesInLargeQuantities(x,y)) -> LargerThanStreams(x))"]}
{"id": "eqasc_train_1625", "nl": "tectonic plates being pushed together causes earthquakes", "fol": "", "prediction": ["all x y.((TectonicPlate(x) & TectonicPlate(y) & PushedTogether(x,y)) -> CausesEarthquakes(x))"]}
{"id": "eqasc_train_1626", "nl": "On Earth, mantle convection causes plate tectonics, volcanism, and earthquakes.", "fol": "", "prediction": ["all x.((MantleConvection(x) & OnEarth(x)) -> (CausesPlateTectonics(x) | CausesVolcanism(x) | CausesEarthquakes(x)))"]}
{"id": "eqasc_train_1627", "nl": "Mantle convection causes earthquakes.", "fol": "", "prediction": ["all x.(MantleConvection(x) -> CausesEarthquakes(x))"]}
{"id": "eqasc_train_1628", "nl": "Plate tectonics is the drifting of the continents.", "fol": "", "prediction": ["all x.(PlateTectonics(x) -> DriftingOfContinents(x))"]}
{"id": "eqasc_train_1629", "nl": "The continents drifting causes earthquakes", "fol": "", "prediction": ["all x.((Continent(x) & Drifting(x)) -> CausesEarthquakes(x))"]}
{"id": "eqasc_train_1630", "nl": "Unfortunately, some earthquakes do enormous damage to homes and can even cause injury or death.", "fol": "", "prediction": ["all x.(Earthquake(x) -> (DoesEmbarrassingDamage(x) & (CausesInjury(x) | CausesDeath(x))))"]}
{"id": "eqasc_train_1631", "nl": "Tectonic plates being pushed together can cause enormous damage to homes.", "fol": "", "prediction": ["all x.((TectonicPlate(x) & PushedTogether(x)) -> CausesEmbarrassmentalDamage(x))"]}
{"id": "eqasc_train_1632", "nl": "Most of the tectonic activity associated with plate tectonics occurs at or near plate margins.", "fol": "", "prediction": ["all x.((TectonicActivity(x) & PlateTectonics(x)) -> (OccursAtOrNearPlateMargins(x)))"]}
{"id": "eqasc_train_1633", "nl": "Most earthquakes occur at or near plate margins.", "fol": "", "prediction": ["all x.(Earthquake(x) -> (OccursAtOrNearPlateMargins(x)))"]}
{"id": "eqasc_train_1634", "nl": "Earthquakes are long preceded by tectonic shifts.", "fol": "", "prediction": ["all x.(Earthquake(x) -> LongPreceededByTectonicShifts(x))"]}
{"id": "eqasc_train_1635", "nl": "shifts in plates causes earthquakes", "fol": "", "prediction": ["all x y.((Plate(x) & Plate(y)) -> CausesEarthquake(x,y))"]}
{"id": "eqasc_train_1636", "nl": "Tectonic plates can contain both continental and oceanic crust F 25.", "fol": "", "prediction": ["all x.(TectonicPlate(x) -> (ContinentalCrust(x) & OceanicCrust(x)))"]}
{"id": "eqasc_train_1637", "nl": "Crust being pushed together causes earthquakes.", "fol": "", "prediction": ["all x.((Crust(x) & PushedTogether(x)) -> CausesEarthquakes(x))"]}
{"id": "eqasc_train_1638", "nl": "Earthquakes cause massive damage.", "fol": "", "prediction": ["all x.(Earthquake(x) -> CausesMassiveDamage(x))"]}
{"id": "eqasc_train_1639", "nl": "tectonic plates being pushed together causes massive damage", "fol": "", "prediction": ["all x.((TectonicPlates(x) & PushedTogether(x)) -> CausesMassiveDamage(x))"]}
{"id": "eqasc_train_1640", "nl": "Several tectonic plates make up the earth's crust that are in a constant state of process.", "fol": "", "prediction": ["exists x.(TectonicPlate(x) & MakesUpEarthsCrust(x) & ConstantStateOfProcess(x))"]}
{"id": "eqasc_train_1641", "nl": "Parts of the Earth's crust being pushed together causes earthquakes", "fol": "", "prediction": ["all x.((PartsOfEarthsCrust(x) & PushedTogether(x)) -> CausesEarthquakes(x))"]}
{"id": "eqasc_train_1642", "nl": "Plate Tectonics Movement of earth's surface reflects large scale convection of upper mantle.", "fol": "", "prediction": ["all x.(PlateTectonics(x) -> (MovementOfEarthSurface(x) & ReflectsLargeScaleConvectionOfUpperMantle(x)))"]}
{"id": "eqasc_train_1643", "nl": "earthquakes are due to movement in the upper mantle", "fol": "", "prediction": ["all x.(Earthquake(x) -> (MovementInUpperMantle(x) & CausesMovementInMantle(x)))"]}
{"id": "eqasc_train_1644", "nl": "An earthquake hits San Francisco causing major damage.", "fol": "", "prediction": ["all x y.((Earthquake(x) & SanFrancisco(y)) -> CausesMoreDamage(x,y))"]}
{"id": "eqasc_train_1645", "nl": "San Francisco has tectonic plates", "fol": "", "prediction": ["all x.(SanFrancisco(x) -> HasTectonicPlates(x))"]}
{"id": "eqasc_train_1646", "nl": "Plate tectonics states that the Earth's plates are constantly moving.", "fol": "", "prediction": ["all x.(PlateTectonics(x) -> EarthsPlatesMovement(x))"]}
{"id": "eqasc_train_1647", "nl": "the Earth constantly moving then being pushed together causes earthquakes", "fol": "", "prediction": ["all x y.((Earth(x) & Earth(y) & ConstantMovement(x,y) & PushedTogether(x)) -> CausesEarthquakes(x))"]}
{"id": "eqasc_train_1648", "nl": "Earthquake tremors and volcanic activity are frequent.", "fol": "", "prediction": ["all x.((EarthquakeTermor(x) & VolcanicActivity(x)) -> Frequent(x))"]}
{"id": "eqasc_train_1649", "nl": "tectonic plates being pushed together causes tremors", "fol": "", "prediction": ["all x.((TectonicPlates(x) & PushedTogether(x)) -> CausesTermors(x))"]}
{"id": "eqasc_train_1650", "nl": "Earthquakes destroy bridges.", "fol": "", "prediction": ["all x.(Earthquake(x) -> DisposesBridges(x))"]}
{"id": "eqasc_train_1651", "nl": "tectonic plates being pushed together destroy bridges", "fol": "", "prediction": ["all x y.((TectonicPlate(x) & TectonicPlate(y) & PushedTogether(x)) -> DisruptsBridges(x))"]}
{"id": "eqasc_train_1652", "nl": "Plumbing is sometimes damaged during an earthquake.", "fol": "", "prediction": ["all x.((Plumbing(x) & Earthquake(x)) -> Damaged(x))"]}
{"id": "eqasc_train_1653", "nl": "Tectonic plates being pushed together can damage plumbing.", "fol": "", "prediction": ["all x.((TectonicPlate(x) & PushedTogether(x)) -> DamagesPlumbing(x))"]}
{"id": "eqasc_train_1654", "nl": "Landslides caused by earthquakes .", "fol": "", "prediction": ["all x y.((Landslide(x) & Earthquake(y)) -> CausedBy(x,y))"]}
{"id": "eqasc_train_1655", "nl": "landslides can be caused by tectonic plates", "fol": "", "prediction": ["all x.(Landslide(x) -> (CausedByTectonicPlates(x) & CausedByTectonicPlates(x)))"]}
{"id": "eqasc_train_1656", "nl": "For example, an earthquake hits San Francisco.", "fol": "", "prediction": ["all x.(Earthquake(x) -> HitsSanFernando(x))"]}
{"id": "eqasc_train_1657", "nl": "tectonic plates being pushed together causes something that hits San Francisco", "fol": "", "prediction": ["all x y.((TectonicPlates(x) & TectonicPlates(y) & PushedTogether(x,y)) -> HitsSanFernando(x))"]}
{"id": "eqasc_train_1658", "nl": "Prokaryotes are single-celled organisms that lack a nucleus.", "fol": "", "prediction": ["all x.(Prokaryote(x) -> (SingleCelledOrganism(x) & -Nucleus(x)))"]}
{"id": "eqasc_train_1659", "nl": "Bacteria and archaebacteria are prokaryotes.", "fol": "", "prediction": ["all x.((Bacteria(x) | Archaebacteria(x)) -> Prokaryote(x))"]}
{"id": "eqasc_train_1660", "nl": "Bacteria and archaebacteria are single-celled organisms that lack a nucleus", "fol": "", "prediction": ["all x.((Bacteria(x) | Archaebacteria(x)) -> (SingleCellledOrganism(x) & -Nucleus(x)))"]}
{"id": "eqasc_train_1661", "nl": "Prokaryotes are usually microscopic and bacteria is an example of a prokaryote.", "fol": "", "prediction": ["all x.(Prokaryote(x) -> (Microscopic(x) & Bacteria(x)))"]}
{"id": "eqasc_train_1662", "nl": "Bacteria are single celled organisms that do not have a nucleus.", "fol": "", "prediction": ["all x.(Bacteria(x) -> (SingleLeavedOrganism(x) & -HasNucleus(x)))"]}
{"id": "eqasc_train_1663", "nl": "some bacteria lack a nucleus", "fol": "", "prediction": ["exists x.(Bacteria(x) & -Nucleus(x))"]}
{"id": "eqasc_train_1664", "nl": "Bacteria are said to be prokaryotes .", "fol": "", "prediction": ["all x.(Bacteria(x) -> Prokaryote(x))"]}
{"id": "eqasc_train_1665", "nl": "Bacteria are single-celled organisms that lack a nucleus.", "fol": "", "prediction": ["all x.(Bacteria(x) -> (SingleCelledOrganism(x) & LacksNucleus(x)))"]}
{"id": "eqasc_train_1666", "nl": "Prokaryotes have no membrane-bound organelles, thus bacteria are prokaryotic organisms.", "fol": "", "prediction": ["all x.(Prokaryote(x) -> (-MembraneBoundOrganelles(x) & BacteriaProkaryoticOrganism(x)))"]}
{"id": "eqasc_train_1667", "nl": "bacteria have no membrane-bound organelles and lack a nucleus", "fol": "", "prediction": ["all x.(Bacteria(x) -> (-MembraneBoundOrganelles(x) & -Nucleus(x)))"]}
{"id": "eqasc_train_1668", "nl": "Inside the nucleus are the genes.", "fol": "", "prediction": ["all x.(Nucleus(x) -> Genes(x))"]}
{"id": "eqasc_train_1669", "nl": "prokaryotes lack genes.", "fol": "", "prediction": ["all x.(Prokaryote(x) -> LacksGenes(x))"]}
{"id": "eqasc_train_1670", "nl": "Prokaryotes All bacteria are prokaryotes.", "fol": "", "prediction": ["all x.(Bacteria(x) -> Prokaryote(x))"]}
{"id": "eqasc_train_1671", "nl": "bacteria are singled-celled organisms that lack a nucleus", "fol": "", "prediction": ["all x.(Bacteria(x) -> (SingledCelledOrganism(x) & -Nucleus(x)))"]}
{"id": "eqasc_train_1672", "nl": "An organism is a living thing.", "fol": "", "prediction": ["all x.(Organism(x) -> LivingThing(x))"]}
{"id": "eqasc_train_1673", "nl": "Prokaryotes are single celled living things that lack a nucleus.", "fol": "", "prediction": ["all x.(Prokaryote(x) -> (SingleLeaved(x) & -Nucleus(x)))"]}
{"id": "eqasc_train_1674", "nl": "bacteria are single-celled organisms that lack a nucleus.", "fol": "", "prediction": ["all x.(Bacteria(x) -> (SingleCelledOrganism(x) & -HasNucleus(x)))"]}
{"id": "eqasc_train_1675", "nl": "riding a bike does not cause pollution", "fol": "", "prediction": ["all x.((RidingBike(x) & -CausesPollution(x)) -> -CausesPollution(x))"]}
{"id": "eqasc_train_1676", "nl": "Air pollution Air pollution is a major threat to health.", "fol": "", "prediction": ["all x.(AirPollution(x) -> MajorThreatToHealth(x))"]}
{"id": "eqasc_train_1677", "nl": "Riding a bike does not cause a major threat to health.", "fol": "", "prediction": ["all x.(RidingBike(x) -> -MajorThreatToHealth(x))"]}
{"id": "eqasc_train_1678", "nl": "City employees use bicycles on the job to save energy and reduce air pollution.", "fol": "", "prediction": ["all x y.((CityEmployee(x) & Bicycle(y)) -> (UsesOnJob(x,y) & SavesEnergy(x) & ReducesAirPollution(x)))"]}
{"id": "eqasc_train_1679", "nl": "using a bike saves energy", "fol": "", "prediction": ["all x y.((Bike(x) & Bike(y)) -> SavesEnergy(x,y))"]}
{"id": "eqasc_train_1680", "nl": "Scientific consensus is that pollution causes global warming.", "fol": "", "prediction": ["all x.(ScientificConsensus(x) -> CausesGlobalWarming(x))"]}
{"id": "eqasc_train_1681", "nl": "riding a bike does not cause global warming", "fol": "", "prediction": ["all x.((RidingBike(x) & -GlobalWarming(x)) -> -GlobalWarming(x))"]}
{"id": "eqasc_train_1682", "nl": "Air pollution can cause diseases and harm crops.", "fol": "", "prediction": ["all x.(AirPollution(x) -> (CausesDiseases(x) & HarmsCrops(x)))"]}
{"id": "eqasc_train_1683", "nl": "Riding a bike does not cause diseases or harm crops", "fol": "", "prediction": ["all x.(RidingBike(x) -> (-CausesDiseases(x) & -HarmsCrops(x)))"]}
{"id": "eqasc_train_1684", "nl": "Bikes are good for exercise and produce no pollution.", "fol": "", "prediction": ["all x.(Bicycle(x) -> (GoodForExercise(x) & -ProducesPollution(x)))"]}
{"id": "eqasc_train_1685", "nl": "Riding a bike is good exercise and also doesn't produce harmful gases.", "fol": "", "prediction": ["all x.(RidingBike(x) -> (GoodExercise(x) & -ProducesHarmfulGases(x)))"]}
{"id": "eqasc_train_1686", "nl": "Visual pollution caused by littering is pollution, just as is water pollution and air pollution.", "fol": "", "prediction": ["all x.((VisualPollution(x) & Littering(x)) -> Pollution(x))"]}
{"id": "eqasc_train_1687", "nl": "Riding a bike does not cause litter.", "fol": "", "prediction": ["all x.(RidingBike(x) -> -CausesLitter(x))"]}
{"id": "eqasc_train_1688", "nl": "Pollution One of the ways habitat is degraded is by pollution.", "fol": "", "prediction": ["all x.((Habitat(x) & Pollution(x)) -> DegradedBy(x))"]}
{"id": "eqasc_train_1689", "nl": "Riding a bike will not degrade habitat.", "fol": "", "prediction": ["all x.(RidingBike(x) -> -DegradeHabitat(x))"]}
{"id": "eqasc_train_1690", "nl": "Pollutants can be released either as gases or as particles.", "fol": "", "prediction": ["all x.(Pollutant(x) -> (ReleasedAsGases(x) | ReleasedAsParticles(x)))"]}
{"id": "eqasc_train_1691", "nl": "riding a bike does not release particles", "fol": "", "prediction": ["all x.((RidingBike(x) & -ReleasesParticles(x)) -> -ReleasesParticles(x))"]}
{"id": "eqasc_train_1692", "nl": "Pollution is anything that spoils the environment.", "fol": "", "prediction": ["all x.(Pollution(x) -> (SpoisesEnvironment(x)))"]}
{"id": "eqasc_train_1693", "nl": "riding a bike does not spoil the environment", "fol": "", "prediction": ["all x y.((Bike(x) & Environment(y)) -> -Spoises(x,y))"]}
{"id": "eqasc_train_1694", "nl": "Carbon monoxide is, of course, an air pollutant.", "fol": "", "prediction": ["all x.(CarbonMonoxide(x) -> AirPollutant(x))"]}
{"id": "eqasc_train_1695", "nl": "riding a bike does not release carbon monoxide", "fol": "", "prediction": ["all x.((RidingBike(x) & -ReleasesCarbonMonoxide(x)) -> -ReleasesCarbonMonoxide(x))"]}
{"id": "eqasc_train_1696", "nl": "riding a bike does not cause carbon monoxide", "fol": "", "prediction": ["all x.((RidingBike(x) & -CausesCarbonMonoxide(x)) -> -CausesCarbonMonoxide(x))"]}
{"id": "eqasc_train_1697", "nl": "the sun causes water to evaporate more quickly by adding heat", "fol": "", "prediction": ["all x y.((Sun(x) & Sun(y)) -> CausesWaterToEvaporateMoreQuickly(x,y))"]}
{"id": "eqasc_train_1698", "nl": "High humidity can cause mildew, while dry heat and direct sunlight can cause drying and cracking.", "fol": "", "prediction": ["(all x.(HighHumidity(x) -> CausesMildew(x)) & (DryHeat(x) & DirectSunlight(x)) -> CausesDryingAndCracking(x)))"]}
{"id": "eqasc_train_1699", "nl": "the sun causes water to evaporate more which can cause drying and cracking", "fol": "", "prediction": ["all x y.((Sun(x) & Water(y)) -> CausesEvaporationMore(x,y))"]}
{"id": "eqasc_train_1700", "nl": "During the summer the sun gets much higher and provides more direct, concentrated heating.", "fol": "", "prediction": ["all x.(Summer(x) -> (SunHigher(x) & ProvidesDirectConcentratedHeating(x)))"]}
{"id": "eqasc_train_1701", "nl": "Water evaporates more quickly in the summer", "fol": "", "prediction": ["all x.((Water(x) & Summer(x)) -> EvaporatesMoreQuickly(x))"]}
{"id": "eqasc_train_1702", "nl": "our star causes water to evaporate more quickly by adding heat", "fol": "", "prediction": ["all x y.((Star(x) & Water(y) & AddsHeat(x,y)) -> CausesWaterToEvaporateMoreQuickly(x,y))"]}
{"id": "eqasc_train_1703", "nl": "During the day, the earth is heated up by the sun.", "fol": "", "prediction": ["all x y.((Day(x) & Earth(y)) -> HeatedBySun(y,x))"]}
{"id": "eqasc_train_1704", "nl": "During the day, water evaporates more quickly than it does at night", "fol": "", "prediction": ["all x y.((Day(x) & Night(y)) -> WaterEvaporatesMoreQuickly(x,y))"]}
{"id": "eqasc_train_1705", "nl": "Evaporation is when the sun heats the water and changes some of it to gas.", "fol": "", "prediction": ["all x y.((Sun(x) & Water(y) & Heats(x,y)) -> ChangesToGas(x))"]}
{"id": "eqasc_train_1706", "nl": "The sun causes water to change partially to gas by adding heat.", "fol": "", "prediction": ["all x y.((Sun(x) & Water(y)) -> ChangesToGasByAddition(x,y))"]}
{"id": "eqasc_train_1707", "nl": "Evaporation is the change of liquid water to a vapor.", "fol": "", "prediction": ["all x.(Evaporation(x) -> ChangeOfLiquidWaterToVapor(x))"]}
{"id": "eqasc_train_1708", "nl": "Heat turns water into a vapor", "fol": "", "prediction": ["all x y.((Heat(x) & Water(y)) -> TurnsIntoVapor(x,y))"]}
{"id": "eqasc_train_1709", "nl": "Energy from the sun evaporates water from the oceans to make clouds.", "fol": "", "prediction": ["all x y z.((Energy(x) & Sun(y) & Ocean(z)) -> EvaporatesWaterToMakeClouds(x,y,z))"]}
{"id": "eqasc_train_1710", "nl": "Clouds are made from ocean water through the power of sunlight.", "fol": "", "prediction": ["all x.(Cloud(x) -> (MadeFromOceanWater(x) & PowerOfSunlight(x)))"]}
{"id": "eqasc_train_1711", "nl": "Energy is used to evaporate water.", "fol": "", "prediction": ["all x.(Energy(x) -> UsedToEvaporateWater(x))"]}
{"id": "eqasc_train_1712", "nl": "The sun provides energy.", "fol": "", "prediction": ["all x.(Sun(x) -> ProvidesEnergy(x))"]}
{"id": "eqasc_train_1713", "nl": "the sun creates vapor more quickly by adding heat", "fol": "", "prediction": ["all x y.((Sun(x) & Heat(y)) -> CreatesVaporMoreQuickly(x,y))"]}
{"id": "eqasc_train_1714", "nl": "Ice crystals resist evaporation.", "fol": "", "prediction": ["all x.(IceCrystal(x) -> ResistsEvaporation(x))"]}
{"id": "eqasc_train_1715", "nl": "Ice crystals can resist the sun's heat", "fol": "", "prediction": ["all x.(IceCrystal(x) -> ResistsSunHeat(x))"]}
{"id": "eqasc_train_1716", "nl": "a warm front causes cloudy and rainy weather", "fol": "", "prediction": ["all x.(WarmFront(x) -> (CausesCloudyWeather(x) & CausesRainyWeather(x)))"]}
{"id": "eqasc_train_1717", "nl": "Warm air moving into an area of cold air is called a warm front .", "fol": "", "prediction": ["all x.((WarmAir(x) & ColdAirArea(x)) -> WarmFront(x))"]}
{"id": "eqasc_train_1718", "nl": "Warm air moving into cold air causes cloudy and rainy weather", "fol": "", "prediction": ["all x y.((WarmAir(x) & ColdAir(y)) -> (CausesCloudyWeather(x) & CausesRainyWeather(x)))"]}
{"id": "eqasc_train_1719", "nl": "If warm air is advancing on cold air, the front is designated a warm front.", "fol": "", "prediction": ["all x.((WarmAir(x) & ColdAir(x)) -> WarmFront(x))"]}
{"id": "eqasc_train_1720", "nl": "Warm air advancing on cold air can lead to cloudy and rainy weather", "fol": "", "prediction": ["all x y.((WarmAir(x) & ColdAir(y)) -> (AdvancesOn(x,y) & CloudyAndRainyWeather(x)))"]}
{"id": "eqasc_train_1721", "nl": "Winds are calm and skies are clear or partly cloudy when the eye of a storm passes.", "fol": "", "prediction": ["all x y.((Wind(x) & Sky(y) & Passes(x)) -> (Calm(x) & Clear(y) & PartiallyCloudy(y)))"]}
{"id": "eqasc_train_1722", "nl": "a warm front causes storms", "fol": "", "prediction": ["all x.(WarmFront(x) -> CausesStorms(x))"]}
{"id": "eqasc_train_1723", "nl": "Warm air advancing on cold air causes cloudy and rainy weather.", "fol": "", "prediction": ["all x y.((WarmAir(x) & ColdAir(y)) -> (CausesCloudyWeather(x) & CausesRainyWeather(x)))"]}
{"id": "eqasc_train_1724", "nl": "Annual desert plants germinate, grow, and flower quickly when there is a rainy year.", "fol": "", "prediction": ["all x.((AnnualDesertPlant(x) & RainyYear(x)) -> GerminatesGrowsAndFlowsQuickly(x))"]}
{"id": "eqasc_train_1725", "nl": "wet weather helps plants germinate", "fol": "", "prediction": ["all x y.((WetWeather(x) & Plant(y)) -> HelpsGerminate(x,y))"]}
{"id": "eqasc_train_1726", "nl": "Stratus clouds are associated with a warm front.", "fol": "", "prediction": ["all x.(StratusCloud(x) -> WarmFront(x))"]}
{"id": "eqasc_train_1727", "nl": "stratus clouds are associated with cloudy and rainy weather.", "fol": "", "prediction": ["all x.(StratusCloud(x) -> (CloudyWeather(x) & RainyWeather(x)))"]}
{"id": "eqasc_train_1728", "nl": "Hormones are chemical messengers that control many body functions.", "fol": "", "prediction": ["all x.(Hormone(x) -> (ChemicalMessager(x) & ControlsManyBodyFunctions(x)))"]}
{"id": "eqasc_train_1729", "nl": "Steroid hormones are the longest acting hormones.", "fol": "", "prediction": ["all x.(SteroidHormone(x) -> LongestActingHormone(x))"]}
{"id": "eqasc_train_1730", "nl": "steroids are chemical messengers that control many body functions", "fol": "", "prediction": ["all x.(Steroid(x) -> (ChemicalMessager(x) & ControlsManyBodyFunctions(x)))"]}
{"id": "eqasc_train_1731", "nl": "Hormonal Imbalance Hormonal imbalance can cause depression.", "fol": "", "prediction": ["all x.(HormonalImbalance(x) -> CausesDepression(x))"]}
{"id": "eqasc_train_1732", "nl": "imbalance of chemical messengers that control body functions can cause depression", "fol": "", "prediction": ["all x.((ChemicalMessenger(x) & ControlBodyFunctions(x)) -> CausesDepression(x))"]}
{"id": "eqasc_train_1733", "nl": "Vitamins function as catalysts in chemical reactions in the body.", "fol": "", "prediction": ["all x.(Vitamin(x) -> (Catalyst(x) & InChemicalReactions(x)))"]}
{"id": "eqasc_train_1734", "nl": "Hormones are chemical messengers that are catalysts in the body", "fol": "", "prediction": ["all x.(Hormone(x) -> (ChemicalMessenger(x) & Catalyst(x) & InBody(x)))"]}
{"id": "eqasc_train_1735", "nl": "Neurotransmitters are chemical messengers in the brain.", "fol": "", "prediction": ["all x.(Neurotransmitter(x) -> ChemicalMessenger(x))"]}
{"id": "eqasc_train_1736", "nl": "Hormones and neurotransmitters behave in common ways.", "fol": "", "prediction": ["all x y.((Hormone(x) & Neurotransmitter(y)) -> (BehavesInCommonWeapons(x,y) & BehavesInCommonWeapons(x,y)))"]}
{"id": "eqasc_train_1737", "nl": "Growth hormone is in many ways an anti-aging hormone.", "fol": "", "prediction": ["all x.(GrowthHydrogen(x) -> AntiAgingHydrogen(x))"]}
{"id": "eqasc_train_1738", "nl": "chemical messengers control anti-aging", "fol": "", "prediction": ["all x y.((ChemicalMessager(x) & AntiAging(y)) -> Controls(x,y))"]}
{"id": "eqasc_train_1739", "nl": "And like other downers, it slows bodily functions, including breathing and heart rate.", "fol": "", "prediction": ["(SlowsBodyFunctions(SlowsBreathing(SlowsHeartRate(SlowsBreathing(SlowsBreathing(SlowsBreathing(SlowsHeartRate))"]}
{"id": "eqasc_train_1740", "nl": "hormones control heart rate", "fol": "", "prediction": ["all x.(Hydrogens(x) -> ControlsHeartRate(x))"]}
{"id": "eqasc_train_1741", "nl": "Hormones are a functional class of chemicals.", "fol": "", "prediction": ["all x.(Hormone(x) -> FunctionalClassOfChemicals(x))"]}
{"id": "eqasc_train_1742", "nl": "hormones are functional messengers", "fol": "", "prediction": ["all x.(Hormone(x) -> FunctionalMessenger(x))"]}
{"id": "eqasc_train_1743", "nl": "Many hormones are proteins .", "fol": "", "prediction": ["exists x.(Hydrogen(x) & Protein(x))"]}
{"id": "eqasc_train_1744", "nl": "many chemical messengers that control body functions are proteins", "fol": "", "prediction": ["all x.((ChemicalMessager(x) & ControlsBodyFunctions(x)) -> Protein(x))"]}
{"id": "eqasc_train_1745", "nl": "Body functions are interrelated.", "fol": "", "prediction": ["all x.(BodyFunction(x) -> Interrelated(x))"]}
{"id": "eqasc_train_1746", "nl": "hormones are interrelated", "fol": "", "prediction": ["all x.(Hydrogen(x) -> Interrelated(x))"]}
{"id": "eqasc_train_1747", "nl": "Hormones are produced and released by the endocrine system .", "fol": "", "prediction": ["all x y.((Hormone(x) & EndocrineSystem(y)) -> (Produced(x,y) & Released(x,y)))"]}
{"id": "eqasc_train_1748", "nl": "the endocrine system releases chemical messengers that control many body functions.", "fol": "", "prediction": ["all x y.((EndocrineSystem(x) & ChemicalMessenger(y)) -> Releases(x,y))"]}
{"id": "eqasc_train_1749", "nl": "the looseness of soil has a positive impact on a plant 's roots' growth in that soil", "fol": "", "prediction": ["all x y.((Soil(x) & Looseness(x)) -> PositiveImpactOnRootsGrowth(y))"]}
{"id": "eqasc_train_1750", "nl": "Most mulches help to keep soil surfaces loose and receptive to water absorption.", "fol": "", "prediction": ["all x.(Mulch(x) -> (HelpsToKeepSoilSurfacesLoose(x) & ReceptiveToWaterAbsorption(x)))"]}
{"id": "eqasc_train_1751", "nl": "Soil receptive to water absorption has a positive impact on plant's roots' growth.", "fol": "", "prediction": ["all x.((Soil(x) & ReceptiveToWaterAbsorption(x)) -> PositiveImpactOnRootsGrowth(x))"]}
{"id": "eqasc_train_1752", "nl": "Root growth and development are extremely important to plant growth.", "fol": "", "prediction": ["all x.((RootGrowth(x) & PlantGrowth(x)) -> ExtremelyImportantToGrowth(x))"]}
{"id": "eqasc_train_1753", "nl": "Loose soil helps plants grow. ", "fol": "", "prediction": ["all x.(LooseSoil(x) -> HelpsPlantsGrow(x))"]}
{"id": "eqasc_train_1754", "nl": "Air exchange in the root zone is essential for root growth.", "fol": "", "prediction": ["all x.((AirExchange(x) & RootZone(x)) -> EssentialForRootGrowth(x))"]}
{"id": "eqasc_train_1755", "nl": "Loose soil has increased air exchange, which is essential for plants.", "fol": "", "prediction": ["all x.(LooseSoil(x) -> (IncreasedAirExchange(x) & EssentialForPlants(x)))"]}
{"id": "eqasc_train_1756", "nl": "Roots gather plant nutrients.", "fol": "", "prediction": ["all x.(Root(x) -> GathersPlantNutrients(x))"]}
{"id": "eqasc_train_1757", "nl": "looseness of soil has a positive impact on plant nutrients", "fol": "", "prediction": ["all x.(LoosenessOfSoil(x) -> PositiveImpactOnPlantNutrients(x))"]}
{"id": "eqasc_train_1758", "nl": "Deep burrowing earthworms improve soil porosity, water movement and plant root growth.", "fol": "", "prediction": ["all x.(DeepBurrowingEarthworm(x) -> (ImprovesSoilPorosity(x) & ImprovesWaterMovement(x) & ImprovesPlantRootGrowth(x)))"]}
{"id": "eqasc_train_1759", "nl": "Deep burrowing earthworms improve looseness of soil for root growth.", "fol": "", "prediction": ["all x.(DeepBurrowingEarthworm(x) -> ImprovesLoosenessOfSoilForRootGrowth(x))"]}
{"id": "eqasc_train_1760", "nl": "Baby plants grow faster if separated with a large amount of roots.", "fol": "", "prediction": ["all x.((BabyPlant(x) & LargeRoots(x)) -> GrowsFaster(x))"]}
{"id": "eqasc_train_1761", "nl": "the looseness of soil has positive impact on baby plants", "fol": "", "prediction": ["all x y.((SoilLooseness(x) & BabyPlant(y)) -> PositiveImpactOn(x,y))"]}
{"id": "eqasc_train_1762", "nl": "Sandy soil feels gritty and loose.", "fol": "", "prediction": ["all x.(SandySoil(x) -> (FeltsGritty(x) & FeelsLoose(x)))"]}
{"id": "eqasc_train_1763", "nl": "plant's root growth is benefited from sandy soil", "fol": "", "prediction": ["all x.((Plant(x) & SandySoil(x)) -> BeneficialRootGrowth(x))"]}
{"id": "eqasc_train_1764", "nl": "Tree roots stabilize the soil and prevent soil erosion.", "fol": "", "prediction": ["all x.(TreeRoot(x) -> (StabilizesSoil(x) & PreventsSoilErosion(x)))"]}
{"id": "eqasc_train_1765", "nl": "trees make soil stable", "fol": "", "prediction": ["all x.(Tree(x) -> MakesSoilStable(x))"]}
{"id": "eqasc_train_1766", "nl": "Roots are basic to growth, development and expansion.", "fol": "", "prediction": ["all x.(Root(x) -> (BasicToGrowth(x) & BasicToDevelopment(x) & BasicToExpansion(x)))"]}
{"id": "eqasc_train_1767", "nl": "Loose soil helps a plant grow, develop and expand. ", "fol": "", "prediction": ["all x.(LooseSoil(x) -> (HelpsPlantGrow(x) & HelpsPlantDevelop(x) & HelpsPlantExpand(x)))"]}
{"id": "eqasc_train_1768", "nl": "If the soil is loose or wet, the entire plant is easily pulled.", "fol": "", "prediction": ["all x.((SoilLoose(x) | Wet(x)) -> EasyPull(x))"]}
{"id": "eqasc_train_1769", "nl": "Plant's roots growth in soil can be easily pulled if soil is wet", "fol": "", "prediction": ["all x.((Plant(x) & SoilWet(x)) -> RootsGrowthInSoilEasilyPulled(x))"]}
{"id": "eqasc_train_1770", "nl": "Pinions tolerate drought and alkaline soil, but prefer loose, well-drained soils.", "fol": "", "prediction": ["all x.(Pinions(x) -> (ToleratesDroughtAndAlkalineSoil(x) & PrefersLooseAndWellDrainedSoils(x)))"]}
{"id": "eqasc_train_1771", "nl": "well-drained soil has a positive impact on a plant 's roots' growth in that soil", "fol": "", "prediction": ["all x y.((WellDrainedSoil(x) & Plant(y)) -> PositiveImpactOnRootsGrowth(x,y))"]}
{"id": "eqasc_train_1772", "nl": "Fertile soil is loose, absorbent and pleasant smelling.", "fol": "", "prediction": ["all x.(FertileSoil(x) -> (Loose(x) & Absorbent(x) & PleasantSmelling(x)))"]}
{"id": "eqasc_train_1773", "nl": "The growth of plant roots is positively impacted by fertile soil", "fol": "", "prediction": ["all x y.((PlantRoots(x) & FertileSoil(y)) -> PositivelyImpactsGrowth(x,y))"]}
{"id": "eqasc_train_1774", "nl": "To improve soil, add several top-dressings of dirt or compost.", "fol": "", "prediction": ["all x.((TopDressing(x) & (Dirt(x) | Compost(x))) -> ImprovesSoil(x))"]}
{"id": "eqasc_train_1775", "nl": "the looseness of dirt or compost has a positive impact on a plant's roots' growth", "fol": "", "prediction": ["all x y.((LoosenessOfDirtOrCompost(x) & Plant(y)) -> PositiveImpactOnRootsGrowth(x,y))"]}
{"id": "eqasc_train_1776", "nl": "Roots are the veins and arteries of the plant.", "fol": "", "prediction": ["all x.(Root(x) -> (Vines(x) & Arteries(x)))"]}
{"id": "eqasc_train_1777", "nl": "The looseness of soil has a positive impact on a plant 's veins and arteries growth in that soil.", "fol": "", "prediction": ["all x y.((Soil(x) & Plant(y) & Loose(x)) -> PositiveImpactOnVinesAndArteriesGrowth(x,y))"]}
{"id": "eqasc_train_1778", "nl": "Many orchids are rewarding indoor plants.", "fol": "", "prediction": ["all x.(Orchid(x) -> RewardsIndoorPlants(x))"]}
{"id": "eqasc_train_1779", "nl": "looseness of soil has a positive impact on orchids root growth", "fol": "", "prediction": ["all x y.((SoilLooseness(x) & Orchid(y)) -> PositiveImpactOnRootGrowth(x,y))"]}
{"id": "eqasc_train_1780", "nl": "Soil or dirt is typically high in silica and alumina.", "fol": "", "prediction": ["all x.((Soil(x) | Dirt(x)) -> (HighInSilica(x) & HighInAluminum(x)))"]}
{"id": "eqasc_train_1781", "nl": "The looseness of dirt has a positive impact on  plant's roots' growth in that dirt.", "fol": "", "prediction": ["all x.(LoosenessOfDirt(x) -> PositiveImpactOnRootsGrowth(x))"]}
{"id": "eqasc_train_1782", "nl": "Glucose is used for energy by the cells of most organisms.", "fol": "", "prediction": ["all x.(Glucose(x) -> UsedForEnergy(x))"]}
{"id": "eqasc_train_1783", "nl": "Human muscle cells produce energy for contraction from glucose.", "fol": "", "prediction": ["all x.(HumanMuscleCell(x) -> ProducesEnergyForContractionFromGlucose(x))"]}
{"id": "eqasc_train_1784", "nl": "Humans receive energy from glucose", "fol": "", "prediction": ["all x.(Human(x) -> ReceivesEnergyFromGlucose(x))"]}
{"id": "eqasc_train_1785", "nl": "Food is converted into glucose.", "fol": "", "prediction": ["all x.(Food(x) -> ConvertedToGlucose(x))"]}
{"id": "eqasc_train_1786", "nl": "Food is used for energy by most organisms.", "fol": "", "prediction": ["all x y.((Organism(x) & Food(y)) -> UsedForEnergy(y,x))"]}
{"id": "eqasc_train_1787", "nl": "For instance, glucose is a sugar.", "fol": "", "prediction": ["all x.(Glucose(x) -> Sugar(x))"]}
{"id": "eqasc_train_1788", "nl": "Sugar is used for energy by the cells of most organisms.", "fol": "", "prediction": ["all x y.((Sugar(x) & Organism(y)) -> UsedForEnergy(x,y))"]}
{"id": "eqasc_train_1789", "nl": "Blood Sugar Glucose is sugar.", "fol": "", "prediction": ["All x.(BloodSugarGlucose(x) -> Sugar(x))"]}
{"id": "eqasc_train_1790", "nl": "Blood sugar is used for energy by cells of organisms", "fol": "", "prediction": ["all x y.((BloodSugar(x) & Organism(y)) -> UsedForEnergyByCells(x,y))"]}
{"id": "eqasc_train_1791", "nl": "Food is used for energy by the cells of most organisms", "fol": "", "prediction": ["all x y.((Food(x) & Organism(y)) -> UsedForEnergyByCells(x,y))"]}
{"id": "eqasc_train_1792", "nl": "Glucose All sugars get converted to glucose in the blood.", "fol": "", "prediction": ["all x.(Glucose(x) -> ConvertedToGlucose(x))"]}
{"id": "eqasc_train_1793", "nl": "Converted sugar is used for energy by the cells of most organisms", "fol": "", "prediction": ["all x y.((ConvertedSugar(x) & Organism(y)) -> UsedForEnergyByCells(x,y))"]}
{"id": "eqasc_train_1794", "nl": "Food is converted into the type of energy that most cells use.", "fol": "", "prediction": ["all x y.((Food(x) & Cell(y)) -> ConvertedToEnergy(x,y))"]}
{"id": "eqasc_train_1795", "nl": "sugar is used for energy by the cells of most organisms", "fol": "", "prediction": ["all x y.((Sugar(x) & Organism(y)) -> UsedForEnergyByCells(x,y))"]}
{"id": "eqasc_train_1796", "nl": "Sugar is used for energy for the cells of most organisms.", "fol": "", "prediction": ["all x.(Sugar(x) -> UsedForEnergy(x))"]}
{"id": "eqasc_train_1797", "nl": "Glucose metabolism relates to how cells use or store glucose.", "fol": "", "prediction": ["all x.(GlucoseMetabolism(x) -> (UsesGlucose(x) | StoresGlucose(x)))"]}
{"id": "eqasc_train_1798", "nl": "cells store glucose", "fol": "", "prediction": ["all x.(Cell(x) -> StoresGlucose(x))"]}
{"id": "eqasc_train_1799", "nl": "Energy from carbohydrates is converted into glucose.", "fol": "", "prediction": ["all x.((Carbohydrate(x) & EnergyFromCarbohydrates(x)) -> ConvertedToGlucose(x))"]}
{"id": "eqasc_train_1800", "nl": "carbohydrates are converted into glucose", "fol": "", "prediction": ["all x.(Carbohydrate(x) -> ConvertedToGlucose(x))"]}
{"id": "eqasc_train_1801", "nl": "After hours of no glucose ingestion, fats and proteins can be used for energy.", "fol": "", "prediction": ["all x.((HoursOfNoGlucoseIngestion(x) & FatsAndProteins(x)) -> CanBeUsedForEnergy(x))"]}
{"id": "eqasc_train_1802", "nl": "fats and proteins can be used for energy by the cells of most organisms", "fol": "", "prediction": ["all x y.((Fat(x) & Protein(y)) -> (UsedForEnergy(x,y) & UsedForEnergy(x,y)))"]}
{"id": "eqasc_train_1803", "nl": "Glucose, the sugar the body uses for fuel, is stored as glycogen.", "fol": "", "prediction": ["all x.((Glucose(x) & BodyUsesForFuel(x)) -> StoredAsGlycogen(x))"]}
{"id": "eqasc_train_1804", "nl": "Sugar is used for energry by the body is stored as glycogen.", "fol": "", "prediction": ["all x.(Sugar(x) -> UsedForEnergy(x))"]}
{"id": "eqasc_train_1805", "nl": "Cells are programmed to divide only a set number of times.", "fol": "", "prediction": ["all x.(Cell(x) -> (ProgrammedToDivide(x) & SetNumberOfTimes(x)))"]}
{"id": "eqasc_train_1806", "nl": "All ViroMed cells are passaged a limited number of times.", "fol": "", "prediction": ["all x.(ViroMedCell(x) -> PassedLimitedNumberOfTimes(x))"]}
{"id": "eqasc_train_1807", "nl": "Cells are programmed to a limited number of divides.", "fol": "", "prediction": ["all x.(Cell(x) -> LimitedNumberOfDivides(x))"]}
{"id": "eqasc_train_1808", "nl": "Mitosis is a process by which cells divide.", "fol": "", "prediction": ["all x.(Mitosis(x) -> (Division(x) & CellsDivision(x)))"]}
{"id": "eqasc_train_1809", "nl": "cells are programmed to go through mitosis a set number of times", "fol": "", "prediction": ["all x y.((Cell(x) & Mitosis(y)) -> ProgrammedToGoThrough(x,y))"]}
{"id": "eqasc_train_1810", "nl": "Apoptosis is programed cell death.", "fol": "", "prediction": ["all x.(Apoptosis(x) -> ProgramedCellDeath(x))"]}
{"id": "eqasc_train_1811", "nl": "Division can only happen a certain number of times before apoptosis kicks in.", "fol": "", "prediction": ["all x.(Dividend(x) -> exists y.(Time(y) & Happens(x,y))))"]}
{"id": "eqasc_train_1812", "nl": "Cell division is by mitosis .", "fol": "", "prediction": ["all x.(CellDividend(x) -> Mitosis(x))"]}
{"id": "eqasc_train_1813", "nl": "mitosis occurs a set number of times", "fol": "", "prediction": ["all x.(Mitosis(x) -> OccursSetNumberOfTimes(x))"]}
{"id": "eqasc_train_1814", "nl": "Cells reproduce asexually, by dividing.", "fol": "", "prediction": ["all x.(Cell(x) -> (ReproducesAsexually(x) & ByDividing(x)))"]}
{"id": "eqasc_train_1815", "nl": "Cells are programmed to reproduce only a set number of times.", "fol": "", "prediction": ["all x.(Cell(x) -> ReproducesOnly(x))"]}
{"id": "eqasc_train_1816", "nl": "Cells are programmed to reproduce only a set number of times", "fol": "", "prediction": ["all x.(Cell(x) -> (ProgrammedToReproduce(x) & SetNumberOfTimes(x)))"]}
{"id": "eqasc_train_1817", "nl": "Parts means something has been divided.", "fol": "", "prediction": ["all x.(Parts(x) -> HasDivision(x))"]}
{"id": "eqasc_train_1818", "nl": "Cells are programmed to split into parts only a set number of times.", "fol": "", "prediction": ["all x.(Cell(x) -> (ProgrammedToSplitIntoParts(x) & SetNumberOfTimes(x)))"]}
{"id": "eqasc_train_1819", "nl": "An egg cell divides into many cells.", "fol": "", "prediction": ["all x.(EggCell(x) -> DividesIntoManyCells(x))"]}
{"id": "eqasc_train_1820", "nl": "egg cells perform division a set number of times", "fol": "", "prediction": ["all x.(EggCell(x) -> PerformsDividence(x))"]}
{"id": "eqasc_train_1821", "nl": "Cells divide only a set number of times then experience apoptosis", "fol": "", "prediction": ["all x y.((Cell(x) & NumberOfTimes(y)) -> (Division(x,y) & Apoptosis(x)))"]}
{"id": "eqasc_train_1822", "nl": "Roundworms make up the phylum Nematoda.", "fol": "", "prediction": ["all x.(Roundworm(x) -> MakesUpPhylumNematoda(x))"]}
{"id": "eqasc_train_1823", "nl": "Roundworms Nearly all puppies and kittens have roundworms.", "fol": "", "prediction": ["all x.((Puppies(x) | Kittens(x)) -> HasRoundworms(x))"]}
{"id": "eqasc_train_1824", "nl": "Nematoda infests nearly all puppies and kittens", "fol": "", "prediction": ["all x.(Nematoda(x) -> InfestsPuppiesAndKittens(x))"]}
{"id": "eqasc_train_1825", "nl": "Within the Nematoda, a range of reproductive systems occur.", "fol": "", "prediction": ["all x.(Nematoda(x) -> exists y.(ReproductiveSystem(y) & Within(x,y)))"]}
{"id": "eqasc_train_1826", "nl": "within roundworms, a range of reproductive systems occur", "fol": "", "prediction": ["all x y.((Roundworm(x) & Roundworm(y)) -> (ReproductiveSystem(x,y) | ReproductiveSystem(x,y)))"]}
{"id": "eqasc_train_1827", "nl": "Also, nematoda and rotifera are important groups contributing to soils.", "fol": "", "prediction": ["all x.((Nematoda(x) | Rotifera(x)) -> ContributesToSoils(x))"]}
{"id": "eqasc_train_1828", "nl": "Roundworms make important contributions to soils.", "fol": "", "prediction": ["all x.(Roundworm(x) -> MakesImportantContributionsToSoils(x))"]}
{"id": "eqasc_train_1829", "nl": "A range of reproductive systems occur in roundworms.", "fol": "", "prediction": ["all x.(RangeOfReproductiveSystems(x) -> OccursInRoundworms(x))"]}
{"id": "eqasc_train_1830", "nl": "Roundworms contribute to soils.", "fol": "", "prediction": ["all x.(Roundworm(x) -> ContributesToSoils(x))"]}
{"id": "eqasc_train_1831", "nl": "Turtles can have roundworms.", "fol": "", "prediction": ["all x.(Turtle(x) -> HasRoundworms(x))"]}
{"id": "eqasc_train_1832", "nl": "Turtles can be infected with nematoda", "fol": "", "prediction": ["all x.(Turtle(x) -> InfectedWithNematoda(x))"]}
{"id": "eqasc_train_1833", "nl": "Nematodes are microscopic roundworms.", "fol": "", "prediction": ["all x.(Nematode(x) -> MicroscopicalRoundworm(x))"]}
{"id": "eqasc_train_1834", "nl": "Nematodes make up a phylum which is microscopic", "fol": "", "prediction": ["all x y.((Nematode(x) & Phylum(y)) -> MakesUp(x,y))"]}
{"id": "eqasc_train_1835", "nl": "roundworms contribute to soils", "fol": "", "prediction": ["all x y.((Roundworm(x) & Soil(y)) -> ContributesTo(x,y))"]}
{"id": "eqasc_train_1836", "nl": "Roundworm Roundworms have complete digestive tracks.", "fol": "", "prediction": ["all x.(Roundworm(x) -> CompleteDigestiveTracks(x))"]}
{"id": "eqasc_train_1837", "nl": "nematoda have complete digestive tracks", "fol": "", "prediction": ["all x.(Nematoda(x) -> CompleteDigestiveTracks(x))"]}
{"id": "eqasc_train_1838", "nl": "Nematodes are microscopic worms that are apart of the phylum Nematoda", "fol": "", "prediction": ["all x.(Nematode(x) -> (MicroscopicWworm(x) & ApartFromPhylumNematoda(x)))"]}
{"id": "eqasc_train_1839", "nl": "Nematodes are simple roundworms.", "fol": "", "prediction": ["all x.(Nematode(x) -> SimpleRoundworm(x))"]}
{"id": "eqasc_train_1840", "nl": "Nematodes are in the phylum Nematoda.", "fol": "", "prediction": ["all x.(Nematode(x) -> InPhylumNematoda(x))"]}
{"id": "eqasc_train_1841", "nl": "a toaster converts electrical energy into heat energy for toasting", "fol": "", "prediction": ["all x y.((Toaster(x) & ElectricalEnergy(y)) -> ConvertsToHeatEnergy(x,y))"]}
{"id": "eqasc_train_1842", "nl": "Electric generators can create energy for toasters", "fol": "", "prediction": ["all x y.((ElectricGenerator(x) & Toaster(y)) -> CanCreateEnergy(x,y))"]}
{"id": "eqasc_train_1843", "nl": "Constraints The heating coils in the toaster require 120 VAC at about 10 amps.", "fol": "", "prediction": ["all x y.((HeatingCoil(x) & Toaster(y)) -> Requires120VAC(x,y))"]}
{"id": "eqasc_train_1844", "nl": "Heating coils convert electrical energy to heat energy.", "fol": "", "prediction": ["all x.(HeatingCoil(x) -> ConvertsElectricalEnergyToHeatEnergy(x))"]}
{"id": "eqasc_train_1845", "nl": "Early in human history, energy was first used by people for heating, lighting, and cooking.", "fol": "", "prediction": ["all x.((Energy(x) & People(x)) -> (UsedForHeating(x) | UsedForLighting(x) | UsedForCooking(x)))"]}
{"id": "eqasc_train_1846", "nl": "Toasters convert electrical energy into an energy that can also light and cook. ", "fol": "", "prediction": ["all x.(Toaster(x) -> (ConvertsElectricalEnergy(x) & LightsAndCooks(x)))"]}
{"id": "eqasc_train_1847", "nl": "Heat and temperature are the same thing.", "fol": "", "prediction": ["all x.(Heat(x) -> Temperature(x))"]}
{"id": "eqasc_train_1848", "nl": "a toaster converts electrical energy into increased temperature for toasting", "fol": "", "prediction": ["all x.(Toaster(x) -> (ConvertsElectricalEnergyToIncreasedTemperature(x) & Toasting(x)))"]}
{"id": "eqasc_train_1849", "nl": "Toasting bread also makes it sweeter and crunchier.", "fol": "", "prediction": ["all x.(ToastingBread(x) -> (Sweeter(x) & Crunchier(x)))"]}
{"id": "eqasc_train_1850", "nl": "a toaster converts electrical energy into heat energy to make bread sweeter and crunchier", "fol": "", "prediction": ["all x y z.((Toaster(x) & ElectricalEnergy(y) & HeatEnergy(z)) -> ConvertsToMakeBreadSweeterAndCruncherier(x,y,z))"]}
{"id": "eqasc_train_1851", "nl": "Toasting bread creates carcinogens.", "fol": "", "prediction": ["all x.(ToastingBread(x) -> CreatesCarcinogens(x))"]}
{"id": "eqasc_train_1852", "nl": "electrical energy can create carcinogens", "fol": "", "prediction": ["all x.(ElectricalEnergy(x) -> CanCreateCarcinogens(x))"]}
{"id": "eqasc_train_1853", "nl": "Heat is Energy and is measured in Joules.", "fol": "", "prediction": ["all x.(Heat(x) -> (Energy(x) & MeasurableInJules(x)))"]}
{"id": "eqasc_train_1854", "nl": "A toaster converts electrical energy into Joules for toasting", "fol": "", "prediction": ["all x.(Toaster(x) -> (ConvertsElectricalEnergyToJules(x) & Toasts(x)))"]}
{"id": "eqasc_train_1855", "nl": "Toast is born of bread.", "fol": "", "prediction": ["all x.(Toast(x) -> BornOfBread(x))"]}
{"id": "eqasc_train_1856", "nl": "electrical energy is converted to heat energy to cook bread", "fol": "", "prediction": ["all x y z.((ElectricalEnergy(x) & HeatEnergy(y) & Bread(z)) -> ConvertedToToCook(x,y,z))"]}
{"id": "eqasc_train_1857", "nl": "a toaster converts electrical energy into kinetic energy for toasting", "fol": "", "prediction": ["all x y.((Toaster(x) & ElectricalEnergy(y)) -> ConvertsToKineticEnergy(x,y))"]}
{"id": "eqasc_train_1858", "nl": "Annelids are worms such as the familiar earthworm.", "fol": "", "prediction": ["all x.(Annelid(x) -> (worm(x) & Earthworm(x)))"]}
{"id": "eqasc_train_1859", "nl": "Annelids have bodies that are segmented.", "fol": "", "prediction": ["all x.(Annelid(x) -> HasSegmentedBody(x))"]}
{"id": "eqasc_train_1860", "nl": "worms have bodies that are segmented", "fol": "", "prediction": ["all x.(Wworm(x) -> (HasBodySegmented(x) & HasBodySegmented(x)))"]}
{"id": "eqasc_train_1861", "nl": "Moles eat earthworms.", "fol": "", "prediction": ["all x.(Mole(x) -> EatsEarthworms(x))"]}
{"id": "eqasc_train_1862", "nl": "Moles eat some Annelids", "fol": "", "prediction": ["all x y.((Mole(x) & Annelid(y)) -> Eats(x,y))"]}
{"id": "eqasc_train_1863", "nl": "Earthworms are terrific for plants and soil.", "fol": "", "prediction": ["all x.(Earthworm(x) -> (TrunkForPlants(x) & FantasticForSoil(x)))"]}
{"id": "eqasc_train_1864", "nl": "annelids are terrific for plants", "fol": "", "prediction": ["all x.(Annelid(x) -> FantasticForPlants(x))"]}
{"id": "eqasc_train_1865", "nl": "worms have segmented bodies", "fol": "", "prediction": ["all x.(Wworm(x) -> SegmentedBody(x))"]}
{"id": "eqasc_train_1866", "nl": "Earthworms have segmented bodies.", "fol": "", "prediction": ["all x.(Earthworm(x) -> SegmentedBody(x))"]}
{"id": "eqasc_train_1867", "nl": "Annelids include earthworms and leeches.", "fol": "", "prediction": ["all x.(Annelid(x) -> (Earthworm(x) | Leeches(x)))"]}
{"id": "eqasc_train_1868", "nl": "Leeches are related to worms.", "fol": "", "prediction": ["all x.(Leeches(x) -> Worm(x))"]}
{"id": "eqasc_train_1869", "nl": "Earthworms are invaluble for soil health.", "fol": "", "prediction": ["all x.(Earthworm(x) -> InvalubleForSoilHealth(x))"]}
{"id": "eqasc_train_1870", "nl": "annelids are invaluable for soil health", "fol": "", "prediction": ["all x.(Annelid(x) -> (ImportantForSoilHealth(x) & InvaluableForSoilHealth(x)))"]}
{"id": "eqasc_train_1871", "nl": "Earthworms are annelids meaning segmented.", "fol": "", "prediction": ["all x.(Earthworm(x) -> Segmented(x))"]}
{"id": "eqasc_train_1872", "nl": "Worms such as the familiar earthworm are segmented", "fol": "", "prediction": ["all x.((Worm(x) & Earthworm(x)) -> Segmented(x))"]}
{"id": "eqasc_train_1873", "nl": "The familiar earthworm has a segmented body.", "fol": "", "prediction": ["all x.(Earthworm(x) -> SegmentedBody(x))"]}
{"id": "eqasc_train_1874", "nl": "An earthworm has five hearts.", "fol": "", "prediction": ["all x.(Earthworm(x) -> HasFiveHearts(x))"]}
{"id": "eqasc_train_1875", "nl": "An animal that has five hearts is an annelid.", "fol": "", "prediction": ["all x.((Animal(x) & HasFiveHearts(x)) -> Anannelid(x))"]}
{"id": "eqasc_train_1876", "nl": "Earthworms have bodies that are segmented", "fol": "", "prediction": ["all x.(Earthworm(x) -> (HasBodySegmented(x) & Segmented(x)))"]}
{"id": "eqasc_train_1877", "nl": "Annelids have the amazing capacity to regrow segments that break off.", "fol": "", "prediction": ["all x.(Annelid(x) -> (AbsoluteCapacityToRegrowSegments(x) & BreakOffSegments(x)))"]}
{"id": "eqasc_train_1878", "nl": "Earthworm Jim the greatest soil munchin' annelid fansite has been re-located.", "fol": "", "prediction": ["EarthwormJim, greatestSoilMunchinsAnnelidFansiteRelocated(EarthwormJim)"]}
{"id": "eqasc_train_1879", "nl": "Earthworms are soil eating and can regrow their segments that break off.", "fol": "", "prediction": ["all x.(Earthworm(x) -> (SoilEating(x) & RegrowSegments(x) & BreakOff(x)))"]}
{"id": "eqasc_train_1880", "nl": "Earthworms Earthworms are in the phylum Annelids.", "fol": "", "prediction": ["all x.(Earthworm(x) -> InPhylumAnnelids(x))"]}
{"id": "eqasc_train_1881", "nl": "Earthworms have the amazing capacity to regrow segments that break off.", "fol": "", "prediction": ["all x.(Earthworm(x) -> (AbsoluteCapacityToRegrowSegments(x) & BreakOffSegments(x)))"]}
{"id": "eqasc_train_1882", "nl": "Modern examples are jellyfish, flat worms, and annelid worms.", "fol": "", "prediction": ["all x.((Jellyfish(x) | Flatworm(x) | AnnelidWworm(x)) -> ModernExample(x))"]}
{"id": "eqasc_train_1883", "nl": "jellyfish can regrow segments", "fol": "", "prediction": ["all x.(Jellyfish(x) -> CanRegrowSegments(x))"]}
{"id": "eqasc_train_1884", "nl": "Earthworms can regrow segments that break off", "fol": "", "prediction": ["all x y.((Earthworm(x) & Segment(y)) -> (Regrows(x,y) & BreaksOff(y)))"]}
{"id": "eqasc_train_1885", "nl": "earthworms can regrow segments that break off", "fol": "", "prediction": ["all x y.((Earthworm(x) & Segment(y)) -> Regrows(x,y))"]}
{"id": "eqasc_train_1886", "nl": "earthworms have the amazing capacity to regrow segments that break off.", "fol": "", "prediction": ["all x.(Earthworm(x) -> (AbsoluteCapacityToRegrowSegments(x) & BreakOffSegments(x)))"]}
{"id": "eqasc_train_1887", "nl": "leeches have the amazing capacity to regrow segments that break off", "fol": "", "prediction": ["all x.(Leeches(x) -> (AbsoluteCapacityToRegrowSegments(x) & BreakOffSegments(x)))"]}
{"id": "eqasc_train_1888", "nl": "Earthworms have the ability to regrow segments that break off.", "fol": "", "prediction": ["all x.(Earthworm(x) -> RegrowSegments(x))"]}
{"id": "eqasc_train_1889", "nl": "Earthworms can regrow broken off segments of their bodies.", "fol": "", "prediction": ["all x.(Earthworm(x) -> RegrowsBreakenedOffSegments(x))"]}
{"id": "eqasc_train_1890", "nl": "Leeches have the amazing capacity to regrow segments that break off.", "fol": "", "prediction": ["all x.(Leeches(x) -> (RegrowSegments(x) & BreakOffSegments(x)))"]}
{"id": "eqasc_train_1891", "nl": "Annelids have closed circulatory systems.", "fol": "", "prediction": ["all x.(Annelid(x) -> ClosedCirculatorySystems(x))"]}
{"id": "eqasc_train_1892", "nl": "segmented animals can have closed circulatory systems", "fol": "", "prediction": ["all x.((Animal(x) & Segmented(x)) -> CanClosedCirculatorySystems(x))"]}
{"id": "eqasc_train_1893", "nl": "the movement of an air mass over Earth 's surface causes local weather changes", "fol": "", "prediction": ["all x y z.((AirMass(x) & EarthSurface(y) & Movement(z) & Over(z)) -> CausesWeatherChanges(x,y,z))"]}
{"id": "eqasc_train_1894", "nl": "Mountains make their own weather by forcing incoming air masses upward as they strike the mountains.", "fol": "", "prediction": ["all x y.((Mountain(x) & IncomingAirMass(y) & Strike(x,y)) -> MakesOwnWeather(x,y))"]}
{"id": "eqasc_train_1895", "nl": "Mountains can influence local weather changes and make their own weather.", "fol": "", "prediction": ["all x.(Mountain(x) -> (InfluencesLocalWeatherChanges(x) & MakesOwnWeather(x)))"]}
{"id": "eqasc_train_1896", "nl": "Earth is our planet.", "fol": "", "prediction": ["all x.(Earth(x) -> Planet(x))"]}
{"id": "eqasc_train_1897", "nl": "the movement of an air mass over our planet's surface causes local weather changes", "fol": "", "prediction": ["all x y.((AirMass(x) & PlanetSurface(y) & MovesOver(x,y)) -> CausesWeatherChanges(x,y))"]}
{"id": "eqasc_train_1898", "nl": "When air masses meet, fronts are formed.", "fol": "", "prediction": ["all x.((AirMass(x) & Meets(x)) -> FrontFormation(x))"]}
{"id": "eqasc_train_1899", "nl": "fronts cause local weather changes", "fol": "", "prediction": ["all x.((Front(x) & LocalWeatherChange(x)) -> Causes(x,y))"]}
{"id": "eqasc_train_1900", "nl": "Weather is the condition of the atmosphere.", "fol": "", "prediction": ["all x.(Weather(x) -> ConditionOfAtmosphere(x))"]}
{"id": "eqasc_train_1901", "nl": "The movement of an air mass over Earth's surface causes local changes to the condition of the atmosphere.", "fol": "", "prediction": ["all x y.((AirMass(x) & EarthSurface(y)) -> CausesLocalChanges(x,y))"]}
{"id": "eqasc_train_1902", "nl": "Weather is a measurable change in earth's atmosphere.", "fol": "", "prediction": ["all x.(Weather(x) -> MeasurableChangeInAtmosphere(x))"]}
{"id": "eqasc_train_1903", "nl": "the movement of an air mass over Earth 's surface changes earth's atmosphere", "fol": "", "prediction": ["all x y z.((AirMass(x) & EarthSurface(y) & Movement(x,y)) -> ChangesAtmosphere(x,z))"]}
{"id": "eqasc_train_1904", "nl": "Air mass movements are also influenced by mountain barriers.", "fol": "", "prediction": ["all x.(AirMassMovement(x) -> InfluencedByMountainBarriers(x))"]}
{"id": "eqasc_train_1905", "nl": "mountain barriers can influence local weather changes", "fol": "", "prediction": ["all x.(MountainBarrier(x) -> InfluencesLocalWeatherChanges(x))"]}
{"id": "eqasc_train_1906", "nl": "Air-mass boundaries are generally associated with frontal zones.", "fol": "", "prediction": ["all x.(AirMassBoundaries(x) -> FrontalZone(x))"]}
{"id": "eqasc_train_1907", "nl": "the movement frontal zones over Earth 's surface causes local weather changes", "fol": "", "prediction": ["all x y z.((MovementFrontalZones(x) & EarthSurface(y) & EarthSurface(z)) -> CausesLocalWeatherChanges(x,y,z))"]}
{"id": "eqasc_train_1908", "nl": "Features of Earth Earth is a rocky world that is still very much alive and active.", "fol": "", "prediction": ["all x.((Earth(x) & RockyWorld(x)) -> (Alive(x) & Active(x)))"]}
{"id": "eqasc_train_1909", "nl": "the movement of an air mass over the world's surface causes local weather changes", "fol": "", "prediction": ["all x y z.((AirMass(x) & Surface(y) & Movement(z) & Over(x,y)) -> CausesWeatherChanges(x,y))"]}
{"id": "eqasc_train_1910", "nl": "Weather affects distribution locally.", "fol": "", "prediction": ["all x.(Weather(x) -> AffectsDistributionLocally(x))"]}
{"id": "eqasc_train_1911", "nl": "movement of an air mass can affect distribution locally", "fol": "", "prediction": ["all x y.((AirMass(x) & AirMass(y)) -> (AffectsDistributionLocally(x,y) | AffectsDistributionLocally(x,y)))"]}
{"id": "eqasc_train_1912", "nl": "Altitude and weather systems can change the air's pressure.", "fol": "", "prediction": ["all x.((Altitude(x) & WeatherSystem(x)) -> ChangesAirPressure(x))"]}
{"id": "eqasc_train_1913", "nl": "The movement of air causes differences in air pressure", "fol": "", "prediction": ["all x y.((AirMovement(x) & AirPressure(y)) -> CausesDifferences(x,y))"]}
{"id": "eqasc_train_1914", "nl": "Severe weather patterns and high winds can also cause localized damage.", "fol": "", "prediction": ["all x.((SevereWeatherPattern(x) & HighWinds(x)) -> LocalizedDamage(x))"]}
{"id": "eqasc_train_1915", "nl": "movement of an air mass can cause localized damage", "fol": "", "prediction": ["all x y.((AirMass(x) & AirMass(y)) -> CausesLocalizedDamage(x,y))"]}
{"id": "eqasc_train_1916", "nl": "Fronts define the boundaries between air masses.", "fol": "", "prediction": ["all x.(Front(x) -> DefinesBoundariesBetweenAirMasses(x))"]}
{"id": "eqasc_train_1917", "nl": "movements of fronts cause local weather changes", "fol": "", "prediction": ["all x y.((Front(x) & WeatherChange(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_1918", "nl": "some animals' fur grows thicker for staying warm in the winter", "fol": "", "prediction": ["exists x.(Animal(x) & FurGrowsThickerForWarmInWinter(x))"]}
{"id": "eqasc_train_1919", "nl": "Mammals are animals that are born with fur or hair.", "fol": "", "prediction": ["all x.(Mammal(x) -> (Animal(x) & (BirthWithFur(x) | BornWithHair(x))))"]}
{"id": "eqasc_train_1920", "nl": "Mammals are born with fur that grows thicker for warmth in winter.", "fol": "", "prediction": ["all x.(Mammal(x) -> (BirthWithFur(x) & GrowsThickerForWarmth(x)))"]}
{"id": "eqasc_train_1921", "nl": "During winter, their hollow fur absorbs much heat as they sun themselves.", "fol": "", "prediction": ["all x.((HollowFur(x) & Winter(x)) -> AbsorbsHeatAsSun(x))"]}
{"id": "eqasc_train_1922", "nl": "hollow fur keeps animals warm", "fol": "", "prediction": ["all x y.((HollowFur(x) & Animal(y)) -> KeepsWarm(x,y))"]}
{"id": "eqasc_train_1923", "nl": "Fur seals grow a thick undercoat of fur, used as insulation.", "fol": "", "prediction": ["all x.(FurSeal(x) -> (GrowsThickUndercoat(x) & Insulation(x)))"]}
{"id": "eqasc_train_1924", "nl": "Fur seals stay warm in winter", "fol": "", "prediction": ["all x.(FurSeal(x) -> StaysWarmInWinter(x))"]}
{"id": "eqasc_train_1925", "nl": "For one, animal fur becomes thicker and more abundant during the winter months.", "fol": "", "prediction": ["all x.((AnimalFur(x) & Thicker(x) & Abundant(x)) -> WinterMonths(x))"]}
{"id": "eqasc_train_1926", "nl": "In the winter months, animal fur is more abundant for warmth. ", "fol": "", "prediction": ["all x.((AnimalFur(x) & Winter(x)) -> AbundantForWarmth(x))"]}
{"id": "eqasc_train_1927", "nl": "Temperatures in the winter can be brutal.", "fol": "", "prediction": ["all x.((Temperature(x) & Winter(x)) -> CanBeBrutal(x))"]}
{"id": "eqasc_train_1928", "nl": "animal's fur keeps them safe from brutal temperatures", "fol": "", "prediction": ["all x y.((Animal(x) & Fur(y)) -> KeepsSafeFromBrutalTemperatures(x,y))"]}
{"id": "eqasc_train_1929", "nl": "Polar bears grow fur to survive in the cold.", "fol": "", "prediction": ["all x.(PolarBear(x) -> GrowsFurToSurviveInCold(x))"]}
{"id": "eqasc_train_1930", "nl": "Polar bears have thick fur to stay warm in the winter", "fol": "", "prediction": ["all x.(PolarBear(x) -> (HasThickFur(x) & StaysWarmInWinter(x)))"]}
{"id": "eqasc_train_1931", "nl": "Mammals have hair and fur.", "fol": "", "prediction": ["all x.(Mammal(x) -> (HasHair(x) & HasFur(x)))"]}
{"id": "eqasc_train_1932", "nl": "Some animals' hair grows thicker for staying warm in the winter.", "fol": "", "prediction": ["exists x.(Animal(x) & GrowsThicker(x) & StaysWarmInWinter(x))"]}
{"id": "eqasc_train_1933", "nl": "Alpaca fur is one of the softest furs in the world.", "fol": "", "prediction": ["all x.(AlpacaFur(x) -> SoftestFur(x))"]}
{"id": "eqasc_train_1934", "nl": "alpacas keeps themselves warm naturally in the winter", "fol": "", "prediction": ["all x.(Alpaca(x) -> KeepsWarmNaturallyInWinter(x))"]}
{"id": "eqasc_train_1935", "nl": "Mammals are animals with Fur.", "fol": "", "prediction": ["all x.(Mammal(x) -> HasFur(x))"]}
{"id": "eqasc_train_1936", "nl": "mammals use fur to stay warm", "fol": "", "prediction": ["all x.(Mammal(x) -> UsesFurToStayWarm(x))"]}
{"id": "eqasc_train_1937", "nl": "Winter is snow, winter is Christmas.", "fol": "", "prediction": ["(all x.(Winter(x) -> Snow(x)) & all y.(Winter(y) -> Christmas(y)))"]}
{"id": "eqasc_train_1938", "nl": "Around Christmas in the Northern hemisphere, some animals' fur grows thicker fo staying warm.", "fol": "", "prediction": ["all x y.((Animal(x) & NorthernHemisphere(y)) -> GrowsThickerForWarm(x,y))"]}
{"id": "eqasc_train_1939", "nl": "Mammals are also warm-blooded and are covered with hair or fur.", "fol": "", "prediction": ["all x.(Mammal(x) -> (WarmBlooded(x) & (CoveredWithHair(x) | CoveredWithFur(x))))"]}
{"id": "eqasc_train_1940", "nl": "some animals are warm-blooded for staying warm in the winter", "fol": "", "prediction": ["exists x.(Animal(x) & WarmBlooded(x) & StaysWarmInWinter(x))"]}
{"id": "eqasc_train_1941", "nl": "Winter is the coldest season.", "fol": "", "prediction": ["all x.(Winter(x) -> ColdestSeason(x))"]}
{"id": "eqasc_train_1942", "nl": "some animals' fur grows thicker for staying warm in the coldest season", "fol": "", "prediction": ["exists x.(Animal(x) & FurGrowsThickerForWarmInColdestSeason(x))"]}
{"id": "eqasc_train_1943", "nl": "if a habitat can no longer support animals then those animals will move to another area", "fol": "", "prediction": ["all x y.((Habitat(x) & Animal(y) & CannotSupport(x,y)) -> MovesToAnotherArea(x))"]}
{"id": "eqasc_train_1944", "nl": "Shelter is the forth and final requirement for a habitat.", "fol": "", "prediction": ["all x.(Shelter(x) -> (FourthRequirement(x) & FinalRequirement(x)))"]}
{"id": "eqasc_train_1945", "nl": "If a shelter can't support animals, then the animals move.", "fol": "", "prediction": ["all x.((Shelter(x) & -SupportsAnimals(x)) -> AnimalsMove(x))"]}
{"id": "eqasc_train_1946", "nl": "Habitat destruction is a major threat to wildfowl.", "fol": "", "prediction": ["all x.(HabitatDestruction(x) -> MajorThreatToWildfowl(x))"]}
{"id": "eqasc_train_1947", "nl": "When wildfowl's territory is destroyed, they must move to another area", "fol": "", "prediction": ["all x.((Wildfowl(x) & TerritoriesDestroyed(x)) -> MovesToArea(x,y))"]}
{"id": "eqasc_train_1948", "nl": "Fires have burned off alot of the koala's habitat.", "fol": "", "prediction": ["all x y.((Fire(x) & Koala(y)) -> BurntHabitat(x,y))"]}
{"id": "eqasc_train_1949", "nl": "koala's will move to another area if impacted by fire", "fol": "", "prediction": ["all x y.((Koala(x) & Fire(y) & ImpactedBy(x,y)) -> MovesToArea(x,y))"]}
{"id": "eqasc_train_1950", "nl": "If a habitat can no longer support humans, then they'll move to another area", "fol": "", "prediction": ["all x.((Habitat(x) & -SupportsHumans(x)) -> MovesToAnotherArea(x))"]}
{"id": "eqasc_train_1951", "nl": "Often habitat is destroyed for agriculture.", "fol": "", "prediction": ["all x.(Habitat(x) -> (DestroyedForAgriculture(x)))"]}
{"id": "eqasc_train_1952", "nl": "agriculture can result in animals moving to another area from their home area", "fol": "", "prediction": ["all x y z.((Animal(x) & Animal(y) & Area(z) & HomeArea(y)) -> MovesToArea(x,y,z))"]}
{"id": "eqasc_train_1953", "nl": "Bears are powerful animals.", "fol": "", "prediction": ["all x.(Bear(x) -> PowerfulAnimal(x))"]}
{"id": "eqasc_train_1954", "nl": "if a habitat can no longer support bears they will move to another area", "fol": "", "prediction": ["all x y.((Habitat(x) & -SupportsBears(x)) -> MovesToAnotherArea(y))"]}
{"id": "eqasc_train_1955", "nl": "Animals are dependent on plants for food and habitat.", "fol": "", "prediction": ["all x.(Animal(x) -> (DependsOnPlants(x) & Food(x) & Habitat(x)))"]}
{"id": "eqasc_train_1956", "nl": "Creatures will move to another habitat if there is little food", "fol": "", "prediction": ["all x y.((Creature(x) & Habitat(y) & LittleFood(x)) -> MovesTo(x,y))"]}
{"id": "eqasc_train_1957", "nl": "Cows are social animals.", "fol": "", "prediction": ["all x.(Cow(x) -> SocialAnimal(x))"]}
{"id": "eqasc_train_1958", "nl": "if a habitat can no longer support cows, they will move to another area", "fol": "", "prediction": ["all x y.((Habitat(x) & -SupportsCows(x)) -> MovesToAnotherArea(y))"]}
{"id": "eqasc_train_1959", "nl": "Environmentalists say forest roads add to erosion, destroy habitat and affect animal migration.", "fol": "", "prediction": ["all x y.((Environmentalist(x) & ForestRoad(y)) -> (AddsToErosion(x,y) & DestroysHabitat(x,y) & AffectsAnimalMigration(x,y)))"]}
{"id": "eqasc_train_1960", "nl": "Animals will move to another area when forest roads add to the erosion of their homes.", "fol": "", "prediction": ["all x y.((Animal(x) & ForestRoad(y) & AddsToErosion(y,x)) -> MovesToArea(x,y))"]}
{"id": "eqasc_train_1961", "nl": "Relocation requires moving a family and a lifestyle.", "fol": "", "prediction": ["all x.(Relocation(x) -> (RequiresMovingFamily(x) & RequiresMovingLifestyle(x)))"]}
{"id": "eqasc_train_1962", "nl": "if a habitat can no longer support animals then relocation is required", "fol": "", "prediction": ["all x y.((Habitat(x) & Animal(y) & CannotSupport(x,y)) -> RelocationRequired(x))"]}
{"id": "eqasc_train_1963", "nl": "Wildlife habitats contain food plots, shrubs and nut seedings for wildlife.", "fol": "", "prediction": ["all x.(WildlifeHabitat(x) -> (ContainsFoodPlots(x) & ContainsShrubs(x) & ContainsNutSeedings(x)))"]}
{"id": "eqasc_train_1964", "nl": "if animals can no longer get food they will move to another area", "fol": "", "prediction": ["all x y.((Animal(x) & Area(y) & -CanGetFood(x,y)) -> MovesToArea(x,y))"]}
{"id": "eqasc_train_1965", "nl": "Each species of animal is unique.", "fol": "", "prediction": ["all x.(AnimalSpecies(x) -> Unique(x))"]}
{"id": "eqasc_train_1966", "nl": "If a habitat can no longer support a species then that species will move to another area.", "fol": "", "prediction": ["all x y.((Habitat(x) & Species(y) & CannotSupport(x,y)) -> MovesToArea(x,y))"]}
{"id": "eqasc_train_1967", "nl": "Forest habitats are destroyed.", "fol": "", "prediction": ["all x.(ForestHabitat(x) -> Destroyed(x))"]}
{"id": "eqasc_train_1968", "nl": "if forest is destroyed then animals will move to another area", "fol": "", "prediction": ["all x y.((Forest(x) & ForestDestroyed(x)) -> AnimalsMoveToAnotherArea(y))"]}
{"id": "eqasc_train_1969", "nl": "Roads result in habitat loss and habitat fragmentation.", "fol": "", "prediction": ["all x.(Road(x) -> (ResultsInHabitatLoss(x) & ResultsInHabitatFragmentation(x)))"]}
{"id": "eqasc_train_1970", "nl": "Roads result in animals moving to another area", "fol": "", "prediction": ["all x y z.((Road(x) & Animal(y) & Area(z)) -> MovesTo(y,z))"]}
{"id": "eqasc_train_1971", "nl": "Animals move around to eat plants or other animals.", "fol": "", "prediction": ["all x.(Animal(x) -> (MovesAround(x) & EatsPlantsOrAnimals(x)))"]}
{"id": "eqasc_train_1972", "nl": "if a habitat can no longer support animals then they will not be able to eat plants or other animals", "fol": "", "prediction": ["all x y.((Habitat(x) & -SupportsAnimals(x)) -> -CanEatPlantsOrAnimals(y))"]}
{"id": "eqasc_train_1973", "nl": "Mating is generally preceded by courtship.", "fol": "", "prediction": ["all x.(Mating(x) -> PreceedsCourtship(x))"]}
{"id": "eqasc_train_1974", "nl": "Many birds perform elaborate courtship dances.", "fol": "", "prediction": ["all x.(Bird(x) -> PerformsElaborateCourtshipDances(x))"]}
{"id": "eqasc_train_1975", "nl": "Many birds perform dances before they mate", "fol": "", "prediction": ["all x y.((Bird(x) & Bird(y)) -> PerformsDancesBeforeMatching(x,y))"]}
{"id": "eqasc_train_1976", "nl": "Additional topics include mating, nesting, and reproduction.", "fol": "", "prediction": ["(AdditionalTopics(mating) & Nesting(n) & Reproduction(n))"]}
{"id": "eqasc_train_1977", "nl": "reproduction is generally preceded by courtship", "fol": "", "prediction": ["all x.(Reproduction(x) -> (PreceedsCourtship(x) & PreceedsCourtship(x)))"]}
{"id": "eqasc_train_1978", "nl": "Males and females mix only to mate.", "fol": "", "prediction": ["all x y.((Male(x) & Female(y)) -> MixToMate(x,y))"]}
{"id": "eqasc_train_1979", "nl": "males and females engage in courtship", "fol": "", "prediction": ["all x y z.((Male(x) & Female(y) & Courtship(z)) -> (EngagesIn(x,y,z) & EngagesIn(y,z)))"]}
{"id": "eqasc_train_1980", "nl": "Courtship patterns vary with species.", "fol": "", "prediction": ["all x.(CourtshipPattern(x) -> VariatesWithSpecies(x))"]}
{"id": "eqasc_train_1981", "nl": "mating patterns vary with species", "fol": "", "prediction": ["all x.(MatchingPattern(x) -> (VariatesWithSpecies(x) & VariatesWithSpecies(x)))"]}
{"id": "eqasc_train_1982", "nl": "For example, a black rooster and a white hen mate, and the resulting offspring are gray.", "fol": "", "prediction": ["all x y z.((BlackRooster(x) & WhiteHen(y) & Offspring(z)) -> (Mate(x,y) & Gray(z)))"]}
{"id": "eqasc_train_1983", "nl": "courtship can result in offspring", "fol": "", "prediction": ["all x.(Courtship(x) -> CanResultInOffspring(x))"]}
{"id": "eqasc_train_1984", "nl": "Moose courtship begins in autumn.", "fol": "", "prediction": ["all x.(MooseCourtship(x) -> StartsInAutumn(x))"]}
{"id": "eqasc_train_1985", "nl": "mating generally occurs after autumn in moose", "fol": "", "prediction": ["all x y.((Moose(x) & Mating(y)) -> (OccursAfterAutumn(y,x) & InMoose(x,y)))"]}
{"id": "eqasc_train_1986", "nl": "Friendship usually precedes courtship, and courtship, marriage.", "fol": "", "prediction": ["all x y.((Friendship(x) & Courtship(y)) -> (Preceeds(x,y) & Preceeds(x,y)))"]}
{"id": "eqasc_train_1987", "nl": "Friendship often comes before mating.", "fol": "", "prediction": ["all x.(Friendship(x) -> ComesBeforeMating(x))"]}
{"id": "eqasc_train_1988", "nl": "Mating and courtship begins in late April.", "fol": "", "prediction": ["all x.((Mating(x) & Courtship(x)) -> LateApril(x))"]}
{"id": "eqasc_train_1989", "nl": "mating begins in spring", "fol": "", "prediction": ["all x.(Mating(x) -> MatingStartsInSpring(x))"]}
{"id": "eqasc_train_1990", "nl": "Copulation starts early in the mating season and usually stops when nesting begins.", "fol": "", "prediction": ["all x.((Coupulation(x) & MatingSeason(x)) -> (StartsEarly(x) & StopsWhenNesting(x)))"]}
{"id": "eqasc_train_1991", "nl": "Copulation is generally preceded by courtship.", "fol": "", "prediction": ["all x.(Coupulation(x) -> PreceedsCourtship(x))"]}
{"id": "eqasc_train_1992", "nl": "Normally, however, insect pheromones function to attract mates for reproduction.", "fol": "", "prediction": ["all x.(InsectPheromone(x) -> (AttractsMates(x) & Reproduction(x)))"]}
{"id": "eqasc_train_1993", "nl": "insects use pheromones for courtship", "fol": "", "prediction": ["all x y.((Insect(x) & Pheromone(y)) -> UsesForCourtship(x,y))"]}
{"id": "eqasc_train_1994", "nl": "Pigeons find one mate then mate for life.", "fol": "", "prediction": ["all x y.((Pig(x) & Mate(y)) -> (Finds(x,y) & MatesForLife(x)))"]}
{"id": "eqasc_train_1995", "nl": "pigeons have a period of courtship", "fol": "", "prediction": ["all x.(Pigeon(x) -> HasCourtship(x))"]}
{"id": "eqasc_train_1996", "nl": "Flirting, the first step in the courtship ritual, is essential to modern relationships.", "fol": "", "prediction": ["all x.((Flirting(x) & CourtshipRitual(x)) -> EssentialToModernRelationships(x))"]}
{"id": "eqasc_train_1997", "nl": "Mating is generally preceded by flirting in a modern relationship", "fol": "", "prediction": ["all x y.((Mating(x) & Relationship(y)) -> PreceedsFlicking(x,y))"]}
{"id": "eqasc_train_1998", "nl": "Moose mating happens around autumn", "fol": "", "prediction": ["all x.(MooseMating(x) -> HappensAroundAutumn(x))"]}
{"id": "eqasc_train_1999", "nl": "Courtship is similar across species.", "fol": "", "prediction": ["all x.(Courtship(x) -> SimilarAcrossSpecies(x))"]}
{"id": "eqasc_train_2000", "nl": "Mating is generally similar across species.", "fol": "", "prediction": ["all x.(Mating(x) -> SimilarAcrossSpecies(x))"]}
{"id": "eqasc_train_2001", "nl": "a doorbell converts electrical energy into sound", "fol": "", "prediction": ["all x.(Doorbell(x) -> ConvertsElectricalEnergyToSound(x))"]}
{"id": "eqasc_train_2002", "nl": "Perception of sound Sound is a wave.", "fol": "", "prediction": ["all x.(PerceptionOfSound(x) -> Wave(x))"]}
{"id": "eqasc_train_2003", "nl": "A doorbell converts electrical energy into a wave.", "fol": "", "prediction": ["all x.(Doorbell(x) -> ConvertsElectricalEnergyToWave(x))"]}
{"id": "eqasc_train_2004", "nl": "When the sound waves hit the eardrum in the middle ear, the eardrum starts to vibrate.", "fol": "", "prediction": ["all x y.((SoundWaves(x) & Eardrum(y) & Hits(x,y)) -> EardrumStartsToVibrate(x))"]}
{"id": "eqasc_train_2005", "nl": "A doorbell's ring makes the eardrum vibrate. ", "fol": "", "prediction": ["all x.(Doorbell(x) -> RingMakesEardrumVibrate(x))"]}
{"id": "eqasc_train_2006", "nl": "After a beat, the door chime sounds.", "fol": "", "prediction": ["all x.((DoorChime(x) & Beat(x)) -> Sounds(x))"]}
{"id": "eqasc_train_2007", "nl": "a doorbell converts electrical energy into a chime", "fol": "", "prediction": ["all x y.((Doorbell(x) & ElectricalEnergy(y)) -> ConvertsToChime(x,y))"]}
{"id": "eqasc_train_2008", "nl": "Speakers convert electrical energy into sound waves.", "fol": "", "prediction": ["all x.(Speaker(x) -> ConvertsElectricalEnergyToSoundWaves(x))"]}
{"id": "eqasc_train_2009", "nl": "Doorbells convert electrical energy using speakers", "fol": "", "prediction": ["all x.(Doorbell(x) -> (ConvertsElectricalEnergy(x) & UsesSpeakers(x)))"]}
{"id": "eqasc_train_2010", "nl": "a doorbell converts electrical energy into waves", "fol": "", "prediction": ["all x y.((Doorbell(x) & ElectricalEnergy(y)) -> ConvertsToWaves(x,y))"]}
{"id": "eqasc_train_2011", "nl": "Alerting devices inform a person when the doorbell rings, alarm clock sounds, or telephone rings.", "fol": "", "prediction": ["all x y.((AlertingDevice(x) & Person(y) & (RingsDoorbell(x) | AlarmClockSounds(x) | TelephoneRings(x))) -> Informs(x,y))"]}
{"id": "eqasc_train_2012", "nl": "Alerting devices inform a person when they convert electrical energy into sound", "fol": "", "prediction": ["all x y.((AlertingDevice(x) & Person(y) & ConvertsElectricalEnergyToSound(x,y)) -> Informs(x,y))"]}
{"id": "eqasc_train_2013", "nl": "Unwanted sound is noise .", "fol": "", "prediction": ["all x.(UnwantedSound(x) -> Noise(x))"]}
{"id": "eqasc_train_2014", "nl": "A doorbell converts electrical energy into noise.", "fol": "", "prediction": ["all x.(Doorbell(x) -> ConvertsElectricalEnergyToNoise(x))"]}
{"id": "eqasc_train_2015", "nl": "Hearing is the act of perceiving sound.", "fol": "", "prediction": ["all x.(Hearing(x) -> PerceivesSound(x))"]}
{"id": "eqasc_train_2016", "nl": "a doorbell converts electrical energy into what we hear", "fol": "", "prediction": ["all x y.((Doorbell(x) & ElectricalEnergy(y)) -> ConvertsToWhatWeHear(x,y))"]}
{"id": "eqasc_train_2017", "nl": "Light and sound are waves.", "fol": "", "prediction": ["all x.((Light(x) | Sound(x)) -> Wave(x))"]}
{"id": "eqasc_train_2018", "nl": "A doorbell converts electrical energy into waves.", "fol": "", "prediction": ["all x.(Doorbell(x) -> ConvertsElectricalEnergyToWaves(x))"]}
{"id": "eqasc_train_2019", "nl": "Batteries convert chemical energy into electrical energy.", "fol": "", "prediction": ["all x.(Battery(x) -> ConvertsChemicalEnergyToElectricalEnergy(x))"]}
{"id": "eqasc_train_2020", "nl": "a doorbell can convert chemical energy into sound", "fol": "", "prediction": ["all x.(Doorbell(x) -> ConvertsChemicalEnergyToSound(x))"]}
{"id": "eqasc_train_2021", "nl": "a doorbell converts  kinetic  energy into sound", "fol": "", "prediction": ["all x y.((Doorbell(x) & KineticEnergy(y)) -> ConvertsToSound(x,y))"]}
{"id": "eqasc_train_2022", "nl": "an earthquake causes the ground to shake", "fol": "", "prediction": ["all x y.((Earthquake(x) & Ground(y)) -> CausesToShake(x,y))"]}
{"id": "eqasc_train_2023", "nl": "Seismometers measure earthquakes.", "fol": "", "prediction": ["all x.(Seismometer(x) -> MeasuresEarthquakes(x))"]}
{"id": "eqasc_train_2024", "nl": "Seismometers measure the shaking of the ground", "fol": "", "prediction": ["all x.(Seismometer(x) -> MeasuresShakingOfGround(x))"]}
{"id": "eqasc_train_2025", "nl": "Examples include damage to man-made structures, ground failure and felt shaking.", "fol": "", "prediction": ["all x.((Damage(x) & ManMadeStructures(x) & GroundFailure(x) & FeelingShaking(x)) -> Damage(x))"]}
{"id": "eqasc_train_2026", "nl": "Earthquakes cause damage to man-made structures.", "fol": "", "prediction": ["all x y.((Earthquake(x) & ManMadeStructures(y)) -> CausesDamage(x,y))"]}
{"id": "eqasc_train_2027", "nl": "Earthquakes are movements in the Earth's crust.", "fol": "", "prediction": ["all x.(Earthquake(x) -> (MovementInEarthCrust(x) & MovesInEarthCrust(x)))"]}
{"id": "eqasc_train_2028", "nl": "movements in the Earth's crust causes the ground to shake", "fol": "", "prediction": ["all x y.((MovementsInEarthsCrust(x) & Ground(y)) -> CausesGroundToShake(y,x))"]}
{"id": "eqasc_train_2029", "nl": "Earthquakes are caused by fault movement.", "fol": "", "prediction": ["all x.(Earthquake(x) -> CausedByFaultMovement(x))"]}
{"id": "eqasc_train_2030", "nl": "Fault movement causes the ground to shake.", "fol": "", "prediction": ["all x.(FaultMovement(x) -> CausesGroundToShake(x))"]}
{"id": "eqasc_train_2031", "nl": "Earthquakes are caused by movement of the tectonic plates.", "fol": "", "prediction": ["all x.(Earthquake(x) -> CausedByTectonicPlateMovement(x))"]}
{"id": "eqasc_train_2032", "nl": "movement of the tectonic plates causes the ground to shake", "fol": "", "prediction": ["all x y.((TectonicPlates(x) & MovementOf(x,y)) -> CausesGroundToShake(x))"]}
{"id": "eqasc_train_2033", "nl": "An earthquake is the shaking of the crust.", "fol": "", "prediction": ["all x.(Earthquake(x) -> ShakingOfCrust(x))"]}
{"id": "eqasc_train_2034", "nl": "earthquakes affect the crust", "fol": "", "prediction": ["all x y.((Earthquake(x) & Crumb(y)) -> Affects(x,y))"]}
{"id": "eqasc_train_2035", "nl": "Seismic waves are produced by earthquakes.", "fol": "", "prediction": ["all x y.((SeismicWaves(x) & Earthquake(y)) -> ProducedBy(x,y))"]}
{"id": "eqasc_train_2036", "nl": "seismic waves cause the ground to shake", "fol": "", "prediction": ["all x y.((SeismicWaves(x) & Ground(y)) -> CausesToShake(x,y))"]}
{"id": "eqasc_train_2037", "nl": "Movement of tectonic plates causes the ground to shake.", "fol": "", "prediction": ["all x.((TectonicPlate(x) & MovementOf(x,tectonicPlates)) -> CausesGroundToShake(x))"]}
{"id": "eqasc_train_2038", "nl": "Earthquakes Earthquakes are very deadly.", "fol": "", "prediction": ["all x.(Earthquake(x) -> VeryLethal(x))"]}
{"id": "eqasc_train_2039", "nl": "the ground shaking is very deadly", "fol": "", "prediction": ["all x.(GroundShaking(x) -> VeryLethal(x))"]}
{"id": "eqasc_train_2040", "nl": "Landslides are often triggered by the shaking of earthquakes.", "fol": "", "prediction": ["all x.(Landslide(x) -> TriggersByShakingEarthquakes(x))"]}
{"id": "eqasc_train_2041", "nl": "landslides are caused by earthquakes", "fol": "", "prediction": ["all x y.((Landslide(x) & Earthquake(y)) -> CausedBy(x,y))"]}
{"id": "eqasc_train_2042", "nl": "Some parasites kill their host, but most do not.", "fol": "", "prediction": ["exists x.(Parasite(x) & KillsHost(x) & -(Parasite(x) & KillsHost(x))))"]}
{"id": "eqasc_train_2043", "nl": "Any human is a potential host.", "fol": "", "prediction": ["all x.(Human(x) -> PotentialHost(x))"]}
{"id": "eqasc_train_2044", "nl": "some parasites kill humans but most do not", "fol": "", "prediction": ["exists x y z.(Parasite(x) & Human(y) & Parasite(z) & Kill(x,y) & -Kill(x,z))"]}
{"id": "eqasc_train_2045", "nl": "Humans are the unfortunate hosts of the deadly parasite.", "fol": "", "prediction": ["all x.(Human(x) -> UnforgivableHostOfLethalParasite(x))"]}
{"id": "eqasc_train_2046", "nl": "Deadly parasites kill their human, but some do not", "fol": "", "prediction": ["(all x.(DeadlyParasite(x) -> KillHuman(x)) & exists y.(DeadlyParasite(y) & -KillHuman(y))))"]}
{"id": "eqasc_train_2047", "nl": "Nutrients of the host are most likely absorbed through the body surface of the parasite.", "fol": "", "prediction": ["all x y.((Nutrient(x) & Host(y)) -> AbsorbedThroughBodySurface(x,y))"]}
{"id": "eqasc_train_2048", "nl": "Parasites get their nutrients from the body they live in.", "fol": "", "prediction": ["all x.(Parasite(x) -> GetsNutrientsFromBody(x))"]}
{"id": "eqasc_train_2049", "nl": "Leeches are external parasites.", "fol": "", "prediction": ["all x.(Leeches(x) -> ExternalParasite(x))"]}
{"id": "eqasc_train_2050", "nl": "Some leeches will kill their host, but most do not.", "fol": "", "prediction": ["exists x.(Leeche(x) & KillsHost(x) & -MostLeeches(x))"]}
{"id": "eqasc_train_2051", "nl": "Pathogens induce a disease in their host.", "fol": "", "prediction": ["all x y.((Pathogen(x) & Host(y)) -> InducesDisease(x,y))"]}
{"id": "eqasc_train_2052", "nl": "Some parasites that kill are called pathogens, but most do not.", "fol": "", "prediction": ["exists x.(Parasite(x) & Kills(x) & -MostParasite(x))"]}
{"id": "eqasc_train_2053", "nl": "Tapeworms are internal parasites of vertebrates.", "fol": "", "prediction": ["all x.(Tapeworm(x) -> InternalParasiteOfVertebrate(x))"]}
{"id": "eqasc_train_2054", "nl": "most tapeworms do not kill their host", "fol": "", "prediction": ["all x.(Tapeworm(x) -> (-KillsHost(x) & Host(x)))"]}
{"id": "eqasc_train_2055", "nl": "All parasites are harmful to their host, but some are beneficial to humans.", "fol": "", "prediction": ["all x.(Parasite(x) -> (HarmfulToHost(x) | BeneficialToHumans(x)))"]}
{"id": "eqasc_train_2056", "nl": "Some parasites are beneficial to humans", "fol": "", "prediction": ["exists x.(Parasite(x) & BeneficialToHumans(x))"]}
{"id": "eqasc_train_2057", "nl": "Parasites are organisms which live off a host.", "fol": "", "prediction": ["all x.(Parasite(x) -> (Organism(x) & LivesOffHost(x)))"]}
{"id": "eqasc_train_2058", "nl": "Some organisms which live off a host kill it, but most do not.", "fol": "", "prediction": ["exists x y.(Organism(x) & Organism(y) & LivesOffHost(x,y) & -LivesOffHost(y))"]}
{"id": "eqasc_train_2059", "nl": "Killing means death.", "fol": "", "prediction": ["all x.(Killing(x) -> Death(x))"]}
{"id": "eqasc_train_2060", "nl": "some parasites cause the death of their hosts", "fol": "", "prediction": ["exists x.(Parasite(x) & CausesDeathOfHost(x))"]}
{"id": "eqasc_train_2061", "nl": "Some of the more common parasites are various types of 'worms'.", "fol": "", "prediction": ["exists x.(Parasite(x) & Worm(x))"]}
{"id": "eqasc_train_2062", "nl": "some worms kill their host", "fol": "", "prediction": ["exists x.(Wworm(x) & KillsHost(x))"]}
{"id": "eqasc_train_2063", "nl": "Tapeworms Like flukes, tapeworms are also parasitic.", "fol": "", "prediction": ["all x.(Tapeworm(x) -> (Flukes(x) & Parasitic(x)))"]}
{"id": "eqasc_train_2064", "nl": "most tapeworms do not kill their hosts", "fol": "", "prediction": ["all x.(Tapeworm(x) -> (-KillsHost(x) & Host(x)))"]}
{"id": "eqasc_train_2065", "nl": "Everyone who died in the war was killed by the Americans.", "fol": "", "prediction": ["all x.((DeadInWar(x) & American(x)) -> KilledBy(x,Americans))"]}
{"id": "eqasc_train_2066", "nl": "some parasites make their host die but most do not.", "fol": "", "prediction": ["exists x.(Parasite(x) & MakesHostDie(x) & -MakesHostDie(x))"]}
{"id": "eqasc_train_2067", "nl": "Parasites include lungworms and GI parasites.", "fol": "", "prediction": ["all x.(Parasite(x) -> (Lungworm(x) | GIParasite(x)))"]}
{"id": "eqasc_train_2068", "nl": "lungworms can kill their host", "fol": "", "prediction": ["all x.(Lungworm(x) -> KillsHost(x))"]}
{"id": "eqasc_train_2069", "nl": "Parasites thrive on tissues in living hosts.", "fol": "", "prediction": ["all x.(Parasite(x) -> (ThrivesOnTissues(x) & InLivingHost(x)))"]}
{"id": "eqasc_train_2070", "nl": "parasites thrive on tissue in living organisms", "fol": "", "prediction": ["all x y.((Parasite(x) & LivingOrganism(y)) -> ThrivesOnTissue(x,y))"]}
{"id": "eqasc_train_2071", "nl": "matter vibrating can cause sound", "fol": "", "prediction": ["all x.(VibratingMatter(x) -> CanCauseSound(x))"]}
{"id": "eqasc_train_2072", "nl": "Energy strikes the molecule, causing it to vibrate more vigorously.", "fol": "", "prediction": ["all x y.((Molecule(x) & Energy(y)) -> VibratesMoreVibrantly(x,y))"]}
{"id": "eqasc_train_2073", "nl": "Energy striking a molecule can cause sound.", "fol": "", "prediction": ["all x y.((EnergyStriking(x,y) & Molecule(y)) -> CanCauseSound(x,y))"]}
{"id": "eqasc_train_2074", "nl": "Intensity , or loudness of sound, is measured in decibels .", "fol": "", "prediction": ["all x.((Intensity(x) | LoudnessOfSound(x)) -> MeasuredInDecibels(x))"]}
{"id": "eqasc_train_2075", "nl": "The intensity of matter vibrating can be measured in decibels", "fol": "", "prediction": ["all x.((Matter(x) & VibrantIntensity(x)) -> MeasuredInDecibels(x))"]}
{"id": "eqasc_train_2076", "nl": "All guitars produce sound through the mechanical vibration of strings.", "fol": "", "prediction": ["all x.(Guitar(x) -> ProducesSoundThroughMechanicalVibrationOfStrings(x))"]}
{"id": "eqasc_train_2077", "nl": "Guitar strings vibrate", "fol": "", "prediction": ["all x.(GuitarStringsVibrates(x) -> Vibrates(x))"]}
{"id": "eqasc_train_2078", "nl": "All matter emits vibrations.", "fol": "", "prediction": ["all x.(Matter(x) -> EmitsVibrations(x))"]}
{"id": "eqasc_train_2079", "nl": "All matter can emit sound.", "fol": "", "prediction": ["all x.(Matter(x) -> EmitsSound(x))"]}
{"id": "eqasc_train_2080", "nl": "When the waves pass our ears, a sound is detected.", "fol": "", "prediction": ["all x.((WavesPassEars(x) & SoundDetected(x)) -> WavesPassEars(x))"]}
{"id": "eqasc_train_2081", "nl": "matter vibrating can cause our ears to detect it", "fol": "", "prediction": ["all x.(VibratingMatter(x) -> CausesEarsToDetect(x))"]}
{"id": "eqasc_train_2082", "nl": "Music is sound, sound is energy.", "fol": "", "prediction": ["all x.(Music(x) -> (Sound(x) | Energy(x)))"]}
{"id": "eqasc_train_2083", "nl": "Vibrating matter can cause music through energy.", "fol": "", "prediction": ["all x.(VibratingMatter(x) -> CausesMusicThroughEnergy(x))"]}
{"id": "eqasc_train_2084", "nl": "Words are only gross sounds heard through the ear.", "fol": "", "prediction": ["all x.(Word(x) -> (GroovySound(x) & HeardThroughEar(x)))"]}
{"id": "eqasc_train_2085", "nl": "Matter vibrating can be heard through the ear.", "fol": "", "prediction": ["all x.(MatterVibrating(x) -> CanBeHeardThroughEar(x))"]}
{"id": "eqasc_train_2086", "nl": "Cougars receive sound through their ears.", "fol": "", "prediction": ["all x.(Cocoa(x) -> ReceivesSoundThroughEars(x))"]}
{"id": "eqasc_train_2087", "nl": "Matter vibrating can cause something received through the ears.", "fol": "", "prediction": ["all x.(MatterVibrating(x) -> Causes(x,Ears))"]}
{"id": "eqasc_train_2088", "nl": "Sound waves vibrate.", "fol": "", "prediction": ["all x.(SoundWaves(x) -> Vibrate(x))"]}
{"id": "eqasc_train_2089", "nl": "waves can vibrate", "fol": "", "prediction": ["all x.(Waves(x) -> Vibrate(x))"]}
{"id": "eqasc_train_2090", "nl": "Sound Sound waves are mechanical waves.", "fol": "", "prediction": ["all x.(SoundWaves(x) -> MechanicalWaves(x))"]}
{"id": "eqasc_train_2091", "nl": "matter vibrating can cause mechanical waves", "fol": "", "prediction": ["all x.(VibratingMatter(x) -> CausesMechanicalWaves(x))"]}
{"id": "eqasc_train_2092", "nl": "All matter is made of molecules.", "fol": "", "prediction": ["all x.(Matter(x) -> MadeOfMolecules(x))"]}
{"id": "eqasc_train_2093", "nl": "molecules vibrating can cause sound", "fol": "", "prediction": ["all x.(VibratingMolecules(x) -> CanCauseSound(x))"]}
{"id": "eqasc_train_2094", "nl": "Thus, sound is a wave in air .", "fol": "", "prediction": ["all x.(Sound(x) -> WaveInAir(x))"]}
{"id": "eqasc_train_2095", "nl": "matter vibrating can cause a wave in air", "fol": "", "prediction": ["all x y.((Matter(x) & Vibrating(x)) -> CausesWaveInAir(x,y))"]}
{"id": "eqasc_train_2096", "nl": "Overexposure to sound can damage hearing.", "fol": "", "prediction": ["all x.(OverexposureToSound(x) -> DamagesHearing(x))"]}
{"id": "eqasc_train_2097", "nl": "overexposure to vibrating matter can damage hearing", "fol": "", "prediction": ["all x.((OverexposureToVibratingMatter(x) & DamagesHearing(x)) -> CanDamageHearing(x))"]}
{"id": "eqasc_train_2098", "nl": "Sound causes it to move like the head of a drum.", "fol": "", "prediction": ["all x.(Sound(x) -> MovesAsHeadOfDrum(x))"]}
{"id": "eqasc_train_2099", "nl": "a drum has a vibrating movement", "fol": "", "prediction": ["all x.(Drum(x) -> VibratingMovement(x))"]}
{"id": "eqasc_train_2100", "nl": "Cartilage is a tough tissue that contains a protein called collagen.", "fol": "", "prediction": ["all x.(Cartilage(x) -> (ToughTissue(x) & ContainsCollagen(x)))"]}
{"id": "eqasc_train_2101", "nl": "Collagen contributes to meat toughness.", "fol": "", "prediction": ["all x.(Collagen(x) -> ContributesToMeatToughness(x))"]}
{"id": "eqasc_train_2102", "nl": "cartilage contributes to meat toughness", "fol": "", "prediction": ["all x.(Cartilage(x) -> ContributesToMeatToughness(x))"]}
{"id": "eqasc_train_2103", "nl": "Collagen tissue is made by collagen fibers connected by bridges.", "fol": "", "prediction": ["all x.(CollagenTissue(x) -> (MadeByCollagenFibres(x) & ConnectedByBridges(x)))"]}
{"id": "eqasc_train_2104", "nl": "Cartilage is a tough tissue  made by fibers connected by bridges", "fol": "", "prediction": ["all x.(Cartilage(x) -> (ToughTissue(x) & MadeByFibers(x) & ConnectedByBridges(x)))"]}
{"id": "eqasc_train_2105", "nl": "Cartilage cells are called chondrocytes in mature cartilage.", "fol": "", "prediction": ["all x.((CartilageCell(x) & InMatureCartilagin(x)) -> Chondrocyte(x))"]}
{"id": "eqasc_train_2106", "nl": "chondrocytes contain a protein called collagen", "fol": "", "prediction": ["all x.(Chendrocyte(x) -> ContainsProtein(x,Collagen))"]}
{"id": "eqasc_train_2107", "nl": "A protein contributes to meat toughness.", "fol": "", "prediction": ["all x.(Protein(x) -> ContributesToMeatToughness(x))"]}
{"id": "eqasc_train_2108", "nl": "Sharks have a cartilage skeleton.", "fol": "", "prediction": ["all x.(Shark(x) -> HasCartillageSkeleton(x))"]}
{"id": "eqasc_train_2109", "nl": "Sharks have as skeleton that contains a protein called collagen.", "fol": "", "prediction": ["all x.(Shark(x) -> (HasSkeleton(x) & ContainsCollagen(x)))"]}
{"id": "eqasc_train_2110", "nl": "Many collagen fibrils come together and form a collagen and forma collagen fiber.", "fol": "", "prediction": ["all x.(CollagenFilm(x) -> (ComesTogether(x) & FormsCollagen(x) & FormsCollagen(x)))"]}
{"id": "eqasc_train_2111", "nl": "Cartilage is a tough tissue made up of fibrils.", "fol": "", "prediction": ["all x.(Cartilage(x) -> (ToughTissue(x) & MadeUpOfFibers(x)))"]}
{"id": "eqasc_train_2112", "nl": "Sharks have a skeleton made of tough tissue that contains a protein called collagen", "fol": "", "prediction": ["all x y.((Shark(x) & Skeleton(y)) -> (MadeOfToughTissue(y) & ContainsProteinCollagen(x)))"]}
{"id": "eqasc_train_2113", "nl": "Membranes attached to the cricoid cartilage .", "fol": "", "prediction": ["all x y.((Membrane(x) & CricoidCartillage(y)) -> AttachedTo(x,y))"]}
{"id": "eqasc_train_2114", "nl": "Cricoid is a tough tissue that contains a protein called collagen.", "fol": "", "prediction": ["all x.(Crocoid(x) -> (ToughTissue(x) & ContainsCollagen(x)))"]}
{"id": "eqasc_train_2115", "nl": "Cartilage cells, called chondroblasts, make cartilage.", "fol": "", "prediction": ["all x.(Chondroblast(x) -> MakesCartilage(x))"]}
{"id": "eqasc_train_2116", "nl": "Chondroblasts lead to collagen", "fol": "", "prediction": ["all x.(Chondroblast(x) -> LeadsToCollagen(x))"]}
{"id": "eqasc_train_2117", "nl": "Cartilage is composed of fibrous collagen in an amorphous gel.", "fol": "", "prediction": ["all x.(Cartilage(x) -> (ComposedOfFruitousCollagen(x) & InAmorphousGel(x)))"]}
{"id": "eqasc_train_2118", "nl": "collagen is fibrous", "fol": "", "prediction": ["all x.(Collagen(x) -> Fibrous(x))"]}
{"id": "eqasc_train_2119", "nl": "Acid helps dissolve collagen.", "fol": "", "prediction": ["all x.(Acid(x) -> HelpsDissolveCollagen(x))"]}
{"id": "eqasc_train_2120", "nl": "acid can help dissolve cartilage", "fol": "", "prediction": ["all x.(Acid(x) -> HelpsDissolveCartilagin(x))"]}
{"id": "eqasc_train_2121", "nl": "Ethologists usually study how animals behave in their natural environment.", "fol": "", "prediction": ["all x y.((Ethologist(x) & Animal(y)) -> StudiesInNaturalEnvironment(x,y))"]}
{"id": "eqasc_train_2122", "nl": "Environments reflect native habitats.", "fol": "", "prediction": ["all x.(Environment(x) -> ReflectsNativeHabitat(x))"]}
{"id": "eqasc_train_2123", "nl": "ethologists usually study how animals behave in their habitat", "fol": "", "prediction": ["all x y.((Ethologist(x) & Animal(y)) -> StudiesBehaviorInHabitat(x,y))"]}
{"id": "eqasc_train_2124", "nl": "Ethologists study animal behavior.", "fol": "", "prediction": ["all x.(Ethologist(x) -> StudiesAnimalBehavior(x))"]}
{"id": "eqasc_train_2125", "nl": "animal behaviorists usually study how animals behave in their natural environment.", "fol": "", "prediction": ["all x y.((AnimalBehaviorist(x) & Animal(y)) -> StudiesInNaturalEnvironment(x,y))"]}
{"id": "eqasc_train_2126", "nl": "animal behaviorists study animals in their natural environment", "fol": "", "prediction": ["all x y z.((AnimalBehaviorist(x) & Animal(y) & NaturalEnvironment(z)) -> StudiesIn(x,y,z))"]}
{"id": "eqasc_train_2127", "nl": "Ethology is the study of behavior.", "fol": "", "prediction": ["all x.(Ethology(x) -> StudiesBehavior(x))"]}
{"id": "eqasc_train_2128", "nl": "Ethologists learn ethology", "fol": "", "prediction": ["all x y.((Ethologist(x) & Ethology(y)) -> Learns(x,y))"]}
{"id": "eqasc_train_2129", "nl": "Ethologists are scientists who study animals in their natural habitats.", "fol": "", "prediction": ["all x.(Ethologist(x) -> (StudiesAnimalsInNaturalHabitats(x) & StudiesAnimalsInNaturalHabitats(x)))"]}
{"id": "eqasc_train_2130", "nl": "There are scientists who study how animals behave in their natural environment.", "fol": "", "prediction": ["exists x.(Scientist(x) & StudiesAnimalBehavior(x))"]}
{"id": "eqasc_train_2131", "nl": "Monkeys are very social animals.", "fol": "", "prediction": ["all x.(Monkey(x) -> SocialAnimal(x))"]}
{"id": "eqasc_train_2132", "nl": "ethologists study monkeys", "fol": "", "prediction": ["all x y.((Ethologist(x) & Monkey(y)) -> Studies(x,y))"]}
{"id": "eqasc_train_2133", "nl": "Animals behave according to instinct.", "fol": "", "prediction": ["all x.(Animal(x) -> BehavesAccordingToInstinct(x))"]}
{"id": "eqasc_train_2134", "nl": "Ethologists usually study how animals use instincts in their natural environment", "fol": "", "prediction": ["all x y z.((Ethologist(x) & Animal(y) & NaturalEnvironment(z)) -> StudiesInstincts(x,y,z))"]}
{"id": "eqasc_train_2135", "nl": "Animals are wild and can be dangerous.", "fol": "", "prediction": ["all x.(Animal(x) -> (Wild(x) & Dangerous(x)))"]}
{"id": "eqasc_train_2136", "nl": "ethologists have a dangerous job", "fol": "", "prediction": ["all x.(Ethologist(x) -> HasDangerousJob(x))"]}
{"id": "eqasc_train_2137", "nl": "H A habitat is the kind of environment in which a certain organism normally lives.", "fol": "", "prediction": ["all x.(Habitat(x) -> exists y.(Organism(y) & LivesIn(x,y)))"]}
{"id": "eqasc_train_2138", "nl": "Ethologists usually study how animals behave in their habitats", "fol": "", "prediction": ["all x y.((Ethologist(x) & Animal(y)) -> StudiesAnimalBehavior(x,y))"]}
{"id": "eqasc_train_2139", "nl": "Students take a field trip to an ecosystem to observe the homes of animals in natural habitats.", "fol": "", "prediction": ["all x y z.((Student(x) & Ecosystem(y) & Animal(z)) -> TakesFieldTripToObserveHomes(x,y,z))"]}
{"id": "eqasc_train_2140", "nl": "Ethologists usually study how animals behave in their homes in an ecosystem", "fol": "", "prediction": ["all x y z.((Ethologist(x) & Animal(y) & Ecosystem(z)) -> StudiesAnimalBehaviorInHome(x,y,z))"]}
{"id": "eqasc_train_2141", "nl": "Animal behavioral studies study how animals behave in their natural environment", "fol": "", "prediction": ["all x y.((AnimalBehavioralStudy(x) & Animal(y)) -> (StudiesAnimalBehavior(x,y) & NaturalEnvironment(y)))"]}
{"id": "eqasc_train_2142", "nl": "Ethologists usually study how animals behave in their habitats  ", "fol": "", "prediction": ["all x y.((Ethologist(x) & Animal(y)) -> StudiesAnimalBehavior(x,y))"]}
{"id": "eqasc_train_2143", "nl": "Many ethologists capture their observations on videotape or audio tape.", "fol": "", "prediction": ["all x.(Ethologist(x) -> (CapturesObservations(x) & (Videotape(x) | AudioTape(x))))"]}
{"id": "eqasc_train_2144", "nl": "Scientists who study how animals behave use videotape or audio tape.", "fol": "", "prediction": ["all x.((Scientist(x) & StudiesAnimalBehavior(x)) -> (UsesVideotape(x) | UsesAudioTape(x)))"]}
{"id": "eqasc_train_2145", "nl": "scientists study animals behavior", "fol": "", "prediction": ["all x y z.((Scientist(x) & Animal(y) & Animal(z)) -> StudiesBehavior(x,y,z))"]}
{"id": "eqasc_train_2146", "nl": "Germs are a natural part of the environment.", "fol": "", "prediction": ["all x.(Germ(x) -> NaturalPartOfEnvironment(x))"]}
{"id": "eqasc_train_2147", "nl": "Ethologists usually study how animals behave around germs", "fol": "", "prediction": ["all x y.((Ethologist(x) & Animal(y)) -> StudiesAnimalBehaviorAroundGerms(x,y))"]}
{"id": "eqasc_train_2148", "nl": "Environments are animals homes.", "fol": "", "prediction": ["all x.(Environment(x) -> AnimalHome(x))"]}
{"id": "eqasc_train_2149", "nl": "Ethologists usually study how animals behave in the animals' homes.", "fol": "", "prediction": ["all x y.((Ethologist(x) & Animal(y)) -> StudiesInHome(x,y))"]}
{"id": "eqasc_train_2150", "nl": "an organism requires energy for growth", "fol": "", "prediction": ["all x.(Organism(x) -> RequiresEnergyForGrowth(x))"]}
{"id": "eqasc_train_2151", "nl": "Growth is very energy consuming.", "fol": "", "prediction": ["all x.(Growth(x) -> EnergyConsuming(x))"]}
{"id": "eqasc_train_2152", "nl": "organisms require a lot of energy to grow", "fol": "", "prediction": ["all x.(Organism(x) -> RequiresLotOfEnergyToGrow(x))"]}
{"id": "eqasc_train_2153", "nl": "Because food contains energy.", "fol": "", "prediction": ["all x.(Food(x) -> ContainsEnergy(x))"]}
{"id": "eqasc_train_2154", "nl": "an organism requires food for growth", "fol": "", "prediction": ["all x.(Organism(x) -> RequiresFoodForGrowth(x))"]}
{"id": "eqasc_train_2155", "nl": "Different organisms have different growth requirements and growth rates.", "fol": "", "prediction": ["all x.(Organism(x) -> (DifferentGrowthRequirements(x) & DifferentGrowthRate(x)))"]}
{"id": "eqasc_train_2156", "nl": "Different organisms require different amounts of energy.", "fol": "", "prediction": ["all x.(Organism(x) -> RequiresDifferentEnergy(x))"]}
{"id": "eqasc_train_2157", "nl": "Humans are complex organisms.", "fol": "", "prediction": ["all x.(Human(x) -> ComplexOrganism(x))"]}
{"id": "eqasc_train_2158", "nl": "humans require energy for growth", "fol": "", "prediction": ["all x.(Human(x) -> RequiresEnergyForGrowth(x))"]}
{"id": "eqasc_train_2159", "nl": "Food is a source of energy for the body.", "fol": "", "prediction": ["all x.(Food(x) -> SourceOfEnergy(x))"]}
{"id": "eqasc_train_2160", "nl": "an organism requires something that comes from food for growth", "fol": "", "prediction": ["all x y.((Organism(x) & Food(y)) -> Requires(x,y))"]}
{"id": "eqasc_train_2161", "nl": "a fish require energy for growth", "fol": "", "prediction": ["all x.(Fish(x) -> RequiresEnergyForGrowth(x))"]}
{"id": "eqasc_train_2162", "nl": "Growth has expanded rapidly.", "fol": "", "prediction": ["all x.(Growth(x) -> ExpandedRapidly(x))"]}
{"id": "eqasc_train_2163", "nl": "an organism requires energy for rapid expansion", "fol": "", "prediction": ["all x.(Organism(x) -> RequiresEnergyForRapidExpansion(x))"]}
{"id": "eqasc_train_2164", "nl": "Plants and animals are organisms.", "fol": "", "prediction": ["all x.((Plant(x) | Animal(x)) -> Organism(x))"]}
{"id": "eqasc_train_2165", "nl": "plants require energy for growth", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresEnergyForGrowth(x))"]}
{"id": "eqasc_train_2166", "nl": "Growth is part of the personality of a healthy organization.", "fol": "", "prediction": ["all x.(HealthyOrganization(x) -> PartOfPersonalGrowth(x))"]}
{"id": "eqasc_train_2167", "nl": "An organism requires energy for a healthy personality.", "fol": "", "prediction": ["all x.(Organism(x) -> RequiresEnergyForHealthyPerson(x))"]}
{"id": "eqasc_train_2168", "nl": "An organism can gain energy by assimilation or absorption of food.", "fol": "", "prediction": ["all x.(Organism(x) -> (GainEnergy(x) & (Assimilation(x) | Absorption(x))))"]}
{"id": "eqasc_train_2169", "nl": "Organisms require food for growth", "fol": "", "prediction": ["all x.(Organism(x) -> RequiresFoodForGrowth(x))"]}
{"id": "eqasc_train_2170", "nl": "Plants get their energy from the sun.", "fol": "", "prediction": ["all x.(Plant(x) -> GetsEnergyFromSun(x))"]}
{"id": "eqasc_train_2171", "nl": "Plants need the sun to grow.", "fol": "", "prediction": ["all x.(Plant(x) -> NeedsSun(x))"]}
{"id": "eqasc_train_2172", "nl": "Blood flows to the viscera, organs and tissues, for growth and metabolism.", "fol": "", "prediction": ["all x y z.((Blood(x) & Viscera(y) & Organs(z) & Tissues(z)) -> (FlowsTo(x,y) & ForGrowth(x) & ForMetabolism(x)))"]}
{"id": "eqasc_train_2173", "nl": "An organism requires energy for blood flow to viscera, organs, and tissues.", "fol": "", "prediction": ["all x.(Organism(x) -> RequiresEnergyForBloodFlow(x))"]}
{"id": "eqasc_train_2174", "nl": "Organisms cluster around hydrothermal vents in the ocean floor.", "fol": "", "prediction": ["all x y.((Organism(x) & HydrothermalVent(y)) -> ClustersAround(x,y))"]}
{"id": "eqasc_train_2175", "nl": "To survive, some organisms living near hydrothermal vents have formed close associations.", "fol": "", "prediction": ["exists x.(Organism(x) & LivingNearHydrothermalVents(x) & FormsCloseAssociations(x))"]}
{"id": "eqasc_train_2176", "nl": "Clusters form around hydrothermal vents to ensure survival.", "fol": "", "prediction": ["all x y.((Cluster(x) & HydrothermalVent(y)) -> FormsAround(x,y))"]}
{"id": "eqasc_train_2177", "nl": "Background Hot water vents form inside cracks in the ocean floor.", "fol": "", "prediction": ["all x y.((HotWaterVent(x) & OceanFloor(y)) -> FormsInsideCracks(x,y))"]}
{"id": "eqasc_train_2178", "nl": "Organisms cluster around cracks in the ocean floor.", "fol": "", "prediction": ["all x.(Organism(x) -> ClustersAroundCracksInOceanFloor(x))"]}
{"id": "eqasc_train_2179", "nl": "Largest of the oceans on Earth is the Pacific Ocean .", "fol": "", "prediction": ["(LargestOcean(x) & OnEarth(x))"]}
{"id": "eqasc_train_2180", "nl": "organisms cluster around hydrothermal vents in the Pacific", "fol": "", "prediction": ["all x y.((Organism(x) & HydrothermalVent(y)) -> ClustersAround(x,y))"]}
{"id": "eqasc_train_2181", "nl": "Animals at underwater hydrothermal vents are unique.", "fol": "", "prediction": ["all x.((Animal(x) & UnderwaterHydrothermalVent(x)) -> Unique(x))"]}
{"id": "eqasc_train_2182", "nl": "organisms on the ocean floor are unique", "fol": "", "prediction": ["all x.(Organism(x) -> (OnOceanFloor(x) & Unique(x)))"]}
{"id": "eqasc_train_2183", "nl": "Hydrothermal vents are powered by the heat of submarine volcanoes.", "fol": "", "prediction": ["all x.(HydrothermalVent(x) -> (PoweredByHeat(x) & SubmarineVolcano(x)))"]}
{"id": "eqasc_train_2184", "nl": "Organisms cluster around the heat of submarine volcanoes.", "fol": "", "prediction": ["all x y.((Organism(x) & SubmarineVolcano(y)) -> ClustersAroundHeat(x,y))"]}
{"id": "eqasc_train_2185", "nl": "Large lobsters are found here scavenging the ocean floor.", "fol": "", "prediction": ["all x.(LargeLudlow(x) -> FoundInOceanFloor(x))"]}
{"id": "eqasc_train_2186", "nl": "Organisms cluster around hydrothermal vents where lobsters are found", "fol": "", "prediction": ["all x y z.((Organism(x) & HydrothermalVent(y) & Lobster(z)) -> ClustersAround(x,y,z))"]}
{"id": "eqasc_train_2187", "nl": "Hydrothermal vents are fissures in the ocean floor that leak hot, acidic water.", "fol": "", "prediction": ["all x.(HydrothermalVent(x) -> (FissuresInOceanFloor(x) & LeaksHotAcidicWater(x)))"]}
{"id": "eqasc_train_2188", "nl": "Organisms cluster around fissures in the ocean floor that leak hot, acidic water.", "fol": "", "prediction": ["all x y.((Organism(x) & Fissure(y) & OceanFloor(y)) -> (ClustersAround(x,y) & LeaksHotAcidicWater(x)))"]}
{"id": "eqasc_train_2189", "nl": "organisms cluster around hydrothermal vents on the Pacific floor", "fol": "", "prediction": ["all x y.((Organism(x) & HydrothermalVent(y) & PacificFloor(x)) -> ClustersAround(x,y))"]}
{"id": "eqasc_train_2190", "nl": "Organisms cluster around hot water inside cracks in the ocean floor.", "fol": "", "prediction": ["all x.(Organism(x) -> (ClustersAroundHotWater(x) & InsideCracksInOceanFloor(x)))"]}
{"id": "eqasc_train_2191", "nl": "Chimneys top some hydrothermal vents.", "fol": "", "prediction": ["all x y.((Chimney(x) & HydrothermalVent(y)) -> Tops(x,y))"]}
{"id": "eqasc_train_2192", "nl": "Organisms cluster around chimneys  in the ocean floor.", "fol": "", "prediction": ["all x y.((Organism(x) & OceanFloor(y)) -> ClustersAroundChips(x,y))"]}
{"id": "eqasc_train_2193", "nl": "Organisms cluster around formations in the ocean floor powered by the heat of submarine volcanoes", "fol": "", "prediction": ["all x y z.((Organism(x) & OceanFloorFormation(y) & SubmarineVolcano(z)) -> (ClustersAround(x,y) & PoweredByHeat(x,z)))"]}
{"id": "eqasc_train_2194", "nl": "Bacteria that have been found at hydrothermal vents are of great interest.", "fol": "", "prediction": ["all x.((Bacteria(x) & FoundAtHydrothermalVents(x)) -> OfGreatInterest(x))"]}
{"id": "eqasc_train_2195", "nl": "bacteria are on the ocean floor.", "fol": "", "prediction": ["all x.(Bacteria(x) -> OnOceanFloor(x))"]}
{"id": "eqasc_train_2196", "nl": "sediment is formed by weathering", "fol": "", "prediction": ["all x.(Sediment(x) -> FormedByWeathering(x))"]}
{"id": "eqasc_train_2197", "nl": "Sand is formed by weathering.", "fol": "", "prediction": ["all x.(Sand(x) -> Weathered(x))"]}
{"id": "eqasc_train_2198", "nl": "All sediments originate from the weathering and erosion of older rocks.", "fol": "", "prediction": ["all x.(Sediment(x) -> (OriginatesFromWeathering(x) & OriginatesFromErosion(x)))"]}
{"id": "eqasc_train_2199", "nl": "sediment is formed by erosion", "fol": "", "prediction": ["all x.(Sediment(x) -> FormedByErosion(x))"]}
{"id": "eqasc_train_2200", "nl": "Loose dirt, or sediments, from plowed fields is also a form of agricultural pollution.", "fol": "", "prediction": ["all x.((LooseDirt(x) | Sediments(x)) -> AgriculturalPollution(x))"]}
{"id": "eqasc_train_2201", "nl": "loose dirt is formed by weathering", "fol": "", "prediction": ["all x.(LoosDirt(x) -> FormedByWeathering(x))"]}
{"id": "eqasc_train_2202", "nl": "Sand and mud are examples of sediments.", "fol": "", "prediction": ["all x.((Sand(x) | Mud(x)) -> Sediment(x))"]}
{"id": "eqasc_train_2203", "nl": "sand is formed by weathering", "fol": "", "prediction": ["all x.(Sand(x) -> FormedByWeathering(x))"]}
{"id": "eqasc_train_2204", "nl": "Sediment is made of rocks, dirt, and earth.", "fol": "", "prediction": ["all x.(Sediment(x) -> (MadeOfRocks(x) & MadeOfDirt(x) & MadeOfEarth(x)))"]}
{"id": "eqasc_train_2205", "nl": "Weathering breaks down rocks, dirt, and earth to create a substance.", "fol": "", "prediction": ["all x.(Weathering(x) -> (BreaksDownRocks(x) & BreaksDownDirt(x) & BreaksDownEarth(x) & CreatesSubstance(x)))"]}
{"id": "eqasc_train_2206", "nl": "Rocks breakdown by weathering.", "fol": "", "prediction": ["all x.(Rock(x) -> Weathering(x))"]}
{"id": "eqasc_train_2207", "nl": "Sediment is formed by breaking down rocks.", "fol": "", "prediction": ["all x.(Sediment(x) -> FormedByBreakingDownRocks(x))"]}
{"id": "eqasc_train_2208", "nl": "Most chemical weathering is caused by water.", "fol": "", "prediction": ["all x.(ChemicalWeathering(x) -> CausedByWater(x))"]}
{"id": "eqasc_train_2209", "nl": "sediment can be formed by water.", "fol": "", "prediction": ["all x.(Sediment(x) -> FormedByWater(x))"]}
{"id": "eqasc_train_2210", "nl": "Exfoliation is a specific type of mechanical weathering that occurs in granite.", "fol": "", "prediction": ["all x.(Exfoliation(x) -> (MechanicalWeathering(x) & OccursInGranite(x)))"]}
{"id": "eqasc_train_2211", "nl": "sediment is formed by exfoliation", "fol": "", "prediction": ["all x.(Sediment(x) -> FormedByExfoliation(x))"]}
{"id": "eqasc_train_2212", "nl": "Sedimentary rocks are made from sediment.", "fol": "", "prediction": ["all x.(SedimentaryRock(x) -> MadeFromSediment(x))"]}
{"id": "eqasc_train_2213", "nl": "Sedimentary rocks are formed by weathering", "fol": "", "prediction": ["all x.(SedimentaryRock(x) -> FormedByWeathering(x))"]}
{"id": "eqasc_train_2214", "nl": "Ribosomes are small organelles where proteins are made.", "fol": "", "prediction": ["all x.(Ribosome(x) -> (SmallOrganelle(x) & ProteinsMade(x)))"]}
{"id": "eqasc_train_2215", "nl": "Ribosomes are assembled inside the nucleus.", "fol": "", "prediction": ["all x.(Ribosome(x) -> AssembledInNucleus(x))"]}
{"id": "eqasc_train_2216", "nl": "proteins are assembled inside the nucleus", "fol": "", "prediction": ["all x y.((Protein(x) & Nucleus(y)) -> AssembledIn(x,y))"]}
{"id": "eqasc_train_2217", "nl": "Many antibiotics affect the ribosome.", "fol": "", "prediction": ["all x.(Antibiotic(x) -> AffectsRibosome(x))"]}
{"id": "eqasc_train_2218", "nl": "Many antibiotics affect the small organelles where proteins are made.", "fol": "", "prediction": ["all x y.((Antibiotic(x) & SmallOrganelles(y)) -> Affects(x,y))"]}
{"id": "eqasc_train_2219", "nl": "the small organelles that make protein are assembled inside the nucleus", "fol": "", "prediction": ["all x y.((SmallOrganelles(x) & Protein(y) & Makes(x,y)) -> AssembledInNucleus(x))"]}
{"id": "eqasc_train_2220", "nl": "Proteins are made inside the nucleus ", "fol": "", "prediction": ["all x y.((Protein(x) & Nucleus(y)) -> MadeInside(x,y))"]}
{"id": "eqasc_train_2221", "nl": "Proteins are assembled on floating ribosomes.", "fol": "", "prediction": ["all x.(Protein(x) -> AssembledOnFloatingRibosomes(x))"]}
{"id": "eqasc_train_2222", "nl": "Proteins are assembled on small floating organelles. ", "fol": "", "prediction": ["all x.(Protein(x) -> AssembledOnSmallFloatingOrganelles(x))"]}
{"id": "eqasc_train_2223", "nl": "Cells lacking membrane-bound organelles are prokaryotic, and bacteria are prokaryotes.", "fol": "", "prediction": ["all x.((Cell(x) & -MembraneBoundOrganelles(x)) -> (Prokaryotic(x) | Bacteria(x)))"]}
{"id": "eqasc_train_2224", "nl": "Bacteria lack ribosomes", "fol": "", "prediction": ["all x.(Bacteria(x) -> LacksRribosomes(x))"]}
{"id": "eqasc_train_2225", "nl": "All cell organelles are hypertrophic.", "fol": "", "prediction": ["all x.(CellOrganelle(x) -> Hypertrophic(x))"]}
{"id": "eqasc_train_2226", "nl": "Ribosomes are hypertrophic.", "fol": "", "prediction": ["all x.(Ribosome(x) -> Hypertrophic(x))"]}
{"id": "eqasc_train_2227", "nl": "Also, the nontranslating ribosomes competed with the translating ribosomes.", "fol": "", "prediction": ["all x y.((Ribosome(x) & Ribosome(y) & -Translating(x)) -> CompetedWith(x,y))"]}
{"id": "eqasc_train_2228", "nl": "translating organelles are involved in making proteins", "fol": "", "prediction": ["all x y.((Organelle(x) & Protein(y)) -> TranslatedIn(x,y))"]}
{"id": "eqasc_train_2229", "nl": "Many antibiotics affect small organelles where proteins are made", "fol": "", "prediction": ["all x y.((Antibiotic(x) & SmallOrganelle(y) & ProteinsMade(y)) -> Affects(x,y))"]}
{"id": "eqasc_train_2230", "nl": "Bacteria contain no organelles.", "fol": "", "prediction": ["all x.(Bacteria(x) -> -ContainsOrganelles(x))"]}
{"id": "eqasc_train_2231", "nl": "Bacteria do not have ribosomes for protein production.", "fol": "", "prediction": ["all x.(Bacteria(x) -> -HasRibosomes(x))"]}
{"id": "eqasc_train_2232", "nl": "the Earth revolving around the Sun causes the seasons to change on its axis", "fol": "", "prediction": ["all x y z.((Earth(x) & Sun(y) & Earth(z) & RevolvingAround(x,y,z)) -> CausesSeasonsChange(x,y,z))"]}
{"id": "eqasc_train_2233", "nl": "Gold, scarlet, and auburn leaves make a mosaic of rich colors heralding seasonal change.", "fol": "", "prediction": ["all x.((Leaves(x) & (Gold(x) | Scarlet(x) | Auburn(x))) -> HeraldsSeasonalChange(x))"]}
{"id": "eqasc_train_2234", "nl": "Earth's orbital motion around the sun is key to the leaves of many trees changing colors", "fol": "", "prediction": ["all x y.((Earth(x) & Sun(y)) -> OrbitalMotion(x,y))"]}
{"id": "eqasc_train_2235", "nl": "Because the daylight changes with the seasons, ActiveEarth does, too.", "fol": "", "prediction": ["all x.((DaylightChange(x) & Seasons(x)) -> ActiveEarthChanges(x))"]}
{"id": "eqasc_train_2236", "nl": "the Earth revolving around the Sun causes daylight changes", "fol": "", "prediction": ["all x y.((Earth(x) & Sun(y) & RevolvingAround(x,y)) -> CausesDaylightChanges(x))"]}
{"id": "eqasc_train_2237", "nl": "Weather changes from season to season.", "fol": "", "prediction": ["all x.(Weather(x) -> ChangesFromSeasonToSeason(x))"]}
{"id": "eqasc_train_2238", "nl": "The Earth revolving around the sun causes weather to change.", "fol": "", "prediction": ["all x y.((Earth(x) & Sun(y)) -> CausesWeatherChange(x,y))"]}
{"id": "eqasc_train_2239", "nl": "Seasons are caused because the earth's axis is tilted as the earth revolves around the sun.", "fol": "", "prediction": ["all x y.((Season(x) & EarthAxisTilted(x) & EarthRevolvesAround(y,x)) -> CausedBy(x,y))"]}
{"id": "eqasc_train_2240", "nl": "earth's tilt causes seasons", "fol": "", "prediction": ["all x.(Tilt(x) -> CausesSeasons(x))"]}
{"id": "eqasc_train_2241", "nl": "Also, the Earth revolving around the sun creates the seasons.", "fol": "", "prediction": ["all x y.((Earth(x) & Sun(y)) -> CreatesSeasons(x,y))"]}
{"id": "eqasc_train_2242", "nl": "seasons change because of the earth's revolution", "fol": "", "prediction": ["all x y.((Season(x) & EarthsRevolution(y)) -> SeasonChange(x,y))"]}
{"id": "eqasc_train_2243", "nl": "Weather and seasons Seasonal changes and weather affect all plants and animals.", "fol": "", "prediction": ["all x.((Weather(x) & Seasons(x)) -> (SeasonalChanges(x) & Weather(x)))"]}
{"id": "eqasc_train_2244", "nl": "Weather changes and affects all plants and animals as the Earth revolves around the Sun.", "fol": "", "prediction": ["all x y.((Weather(x) & Plant(y) & Animal(y)) -> (ChangesWeather(x,y) & Affects(x,y)))"]}
{"id": "eqasc_train_2245", "nl": "Winter is a horrible season.", "fol": "", "prediction": ["all x.(Winter(x) -> HorribleSeason(x))"]}
{"id": "eqasc_train_2246", "nl": "the Earth revolving around the Sun causes winter", "fol": "", "prediction": ["all x y.((Earth(x) & Sun(y) & RevolvingAround(x,y)) -> CausesWinter(x))"]}
{"id": "eqasc_train_2247", "nl": "Biodiversity increases the productivity and stability of ecosystems.", "fol": "", "prediction": ["all x.(Biodiversity(x) -> (IncreasesProductivity(x) & IncreasesStability(x)))"]}
{"id": "eqasc_train_2248", "nl": "An ecosystem includes the organisms and their habitat.", "fol": "", "prediction": ["all x.(Ecosystem(x) -> (IncludesOrganisms(x) & IncludesHabitat(x)))"]}
{"id": "eqasc_train_2249", "nl": "biodiversity increases the productivity and stability of organisms and their habitat", "fol": "", "prediction": ["all x y z.((Biodiversity(x) & Organism(y) & Habitat(z)) -> (IncreasesProductivity(x,y) & IncreasesStability(x,z)))"]}
{"id": "eqasc_train_2250", "nl": "Biodiversity is basically genetic diversity.", "fol": "", "prediction": ["all x.(Biodiversity(x) -> GeneticDiversity(x))"]}
{"id": "eqasc_train_2251", "nl": "Genetic diversity increases the productivity and stability of ecosystems.", "fol": "", "prediction": ["all x.(GeneticDiversity(x) -> (IncreasesProductivity(x) & IncreasesStability(x)))"]}
{"id": "eqasc_train_2252", "nl": "Biodiversity contributes to ecosystem complexity.", "fol": "", "prediction": ["all x.(Biodiversity(x) -> ContributesToEcosystemComplexity(x))"]}
{"id": "eqasc_train_2253", "nl": "An ecosystem's complexity increases its productivity and stability", "fol": "", "prediction": ["all x.(Ecosystem(x) -> (IncreasesProductivity(x) & IncreasesStability(x)))"]}
{"id": "eqasc_train_2254", "nl": "Ecotourism, on the other hand, can help to conserve biodiversity.", "fol": "", "prediction": ["all x.(Ecotourism(x) -> (ConserveBiodiversity(x) & HelpsConserveBiodiversity(x)))"]}
{"id": "eqasc_train_2255", "nl": "Ecotourism increases the stability of ecosystems.", "fol": "", "prediction": ["all x.(Ecotourism(x) -> IncreasesStabilityOfEcosystems(x))"]}
{"id": "eqasc_train_2256", "nl": "Islands are delicately balanced ecosystems.", "fol": "", "prediction": ["all x.(Island(x) -> DelicatelyBalancedEcosystem(x))"]}
{"id": "eqasc_train_2257", "nl": "Biodiversity increases the stability and productivity of islands.", "fol": "", "prediction": ["all x.(Biodiversity(x) -> (IncreasesStability(x) & IncreasesProductivity(x)))"]}
{"id": "eqasc_train_2258", "nl": "Marine ecosystems also act as stabilizers of global systems especially our climate.", "fol": "", "prediction": ["all x.(MarineEcosystem(x) -> (StabilizerOfGlobalSystems(x) & Climate(x)))"]}
{"id": "eqasc_train_2259", "nl": "Biodiversity increases the productivity and stability of the entire global system.", "fol": "", "prediction": ["all x.(Biodiversity(x) -> (IncreasesProductivity(x) & IncreasesStability(x)))"]}
{"id": "eqasc_train_2260", "nl": "Biodiversity is an incredibly powerful force that keeps species evolving.", "fol": "", "prediction": ["all x.(Biodiversity(x) -> (IncrediblyPowerfulForce(x) & KeepsSpeciesEvolving(x)))"]}
{"id": "eqasc_train_2261", "nl": "A force that keeps species evolving increases the productivity and stability of ecosystems", "fol": "", "prediction": ["all x y.((Force(x) & KeepsSpeciesEvolving(x)) -> (IncreasesProductivity(x) & IncreasesStability(x) & Ecosystems(y)))"]}
{"id": "eqasc_train_2262", "nl": "Biodiversity and ecosystems are complex systems.", "fol": "", "prediction": ["all x.((Biodiversity(x) & Ecosystem(x)) -> ComplexSystem(x))"]}
{"id": "eqasc_train_2263", "nl": "biodiversity is a complex system", "fol": "", "prediction": ["all x.(Biodiversity(x) -> ComplexSystem(x))"]}
{"id": "eqasc_train_2264", "nl": "Oceans are one of the largest ecosystems in the world.", "fol": "", "prediction": ["all x.(Ocean(x) -> LargestEcosystem(x))"]}
{"id": "eqasc_train_2265", "nl": "Biodiversity increases the productivity and stability of oceans", "fol": "", "prediction": ["all x y z.((Biodiversity(x) & Ocean(y) & Productivity(z) & Stability(z)) -> Increases(x,y,z))"]}
{"id": "eqasc_train_2266", "nl": "Amphibians have sense organs to smell and taste chemicals.", "fol": "", "prediction": ["all x.(Amphibian(x) -> (HasSenseOrgans(x) & SmellsChemicals(x) & TastesChemicals(x)))"]}
{"id": "eqasc_train_2267", "nl": "Amphibians also use smell and hearing to hunt prey.", "fol": "", "prediction": ["all x.(Amphibian(x) -> (UsesSmell(x) & UsesHearing(x) & HuntsPrey(x)))"]}
{"id": "eqasc_train_2268", "nl": "Amphibians have sense organs to help hunt prey", "fol": "", "prediction": ["all x.(Amphibian(x) -> (HasSenseOrgans(x) & HelpsHuntPrey(x)))"]}
{"id": "eqasc_train_2269", "nl": "frogs have sense organs to smell and taste chemicals", "fol": "", "prediction": ["all x.(Frog(x) -> (HasSenseOrgans(x) & HasSenseOrgans(x) & SmellsAndTastesChemicals(x)))"]}
{"id": "eqasc_train_2270", "nl": "Lizards use their tongues as sense organs.", "fol": "", "prediction": ["all x.(Lizard(x) -> UsesTongueAsSenseOrgan(x))"]}
{"id": "eqasc_train_2271", "nl": "Lizards are able to use their tongues to taste.", "fol": "", "prediction": ["all x.(Lizard(x) -> CanUseTongue(x))"]}
{"id": "eqasc_train_2272", "nl": "Amphibians also have immune cells arranged into organs.", "fol": "", "prediction": ["all x.(Amphibian(x) -> (HasImmuneCells(x) & Organ(x)))"]}
{"id": "eqasc_train_2273", "nl": "Amphibians also have immune cells arranged to smell and taste chemicals", "fol": "", "prediction": ["all x.(Amphibian(x) -> (HasImmuneCells(x) & ArrangedToSmellAndTasteChemicals(x)))"]}
{"id": "eqasc_train_2274", "nl": "Frogs, toads and salamanders are amphibians.", "fol": "", "prediction": ["all x.((Frog(x) | Toad(x) | Salamander(x)) -> Amphibian(x))"]}
{"id": "eqasc_train_2275", "nl": "Frogs, toads, and salamanders have sense organs to smell and taste chemicals.", "fol": "", "prediction": ["all x y z.((Frog(x) | Toad(y) | Salamander(z)) -> HasSenseOrgan(x,y))"]}
{"id": "eqasc_train_2276", "nl": "Bullfrogs can smell and taste chemicals through sense organs.", "fol": "", "prediction": ["all x.(Bullfrog(x) -> (SmellsChemicals(x) & TastesChemicals(x) & ThroughSenseOrgans(x)))"]}
{"id": "eqasc_train_2277", "nl": "Salamanders are a type of amphibian.", "fol": "", "prediction": ["all x.(Salamander(x) -> Amphibian(x))"]}
{"id": "eqasc_train_2278", "nl": "salamanders have sense organs to smell and taste chemicals", "fol": "", "prediction": ["all x.(Salamander(x) -> (HasSenseOrgans(x) & SmellsAndTastesChemicals(x)))"]}
{"id": "eqasc_train_2279", "nl": "Smell and taste belong to our chemical sensing system.", "fol": "", "prediction": ["all x.((Smell(x) & Taste(x)) -> ChemicalSensingSystem(x))"]}
{"id": "eqasc_train_2280", "nl": "Amphibians have a chemical sensing system.", "fol": "", "prediction": ["all x.(Amphibian(x) -> HasChemicalSensingSystem(x))"]}
{"id": "eqasc_train_2281", "nl": "Frogs are the most durable of the amphibians.", "fol": "", "prediction": ["all x.(Frog(x) -> DurableAmphibian(x))"]}
{"id": "eqasc_train_2282", "nl": "Frogs are durable creatures that can smell and taste chemicals", "fol": "", "prediction": ["all x.(Frog(x) -> (DurableCreature(x) & CanSmellChemicals(x) & CanTasteChemicals(x)))"]}
{"id": "eqasc_train_2283", "nl": "microscope is used to see small things by biologists by making them appear bigger", "fol": "", "prediction": ["all x y z.((Microscope(x) & Biologist(y) & SmallThing(z)) -> (Sees(x,y,z) & MakesAppearBigger(y,z)))"]}
{"id": "eqasc_train_2284", "nl": "Biologists use microscopes to study things that are too small to be seen with the unaided eye.", "fol": "", "prediction": ["all x y.((Biologist(x) & Microscope(y)) -> (Uses(x,y) & StudiesSmallThings(x) & -AimedToUnaidedEye(x)))"]}
{"id": "eqasc_train_2285", "nl": "Biologists study small things that can't normally be seen with an unaided eye.", "fol": "", "prediction": ["all x y.((Biologist(x) & SmallThing(y) & -AidEye(y)) -> Studies(x,y))"]}
{"id": "eqasc_train_2286", "nl": "Objects are magnified to be able to see small details.", "fol": "", "prediction": ["all x.(Object(x) -> MagnifiedToSeeSmallDetails(x))"]}
{"id": "eqasc_train_2287", "nl": "Microscopes are used to see details by magnifying objects.", "fol": "", "prediction": ["all x.(Microscope(x) -> (SeeDetails(x) & MagnifiesObjects(x)))"]}
{"id": "eqasc_train_2288", "nl": "Bacteria are very small.", "fol": "", "prediction": ["all x.(Bacteria(x) -> VerySmall(x))"]}
{"id": "eqasc_train_2289", "nl": "Biologists use microscopes to see bacteria.", "fol": "", "prediction": ["all x y.((Biologist(x) & Microscope(y)) -> UsesToSee(x,y))"]}
{"id": "eqasc_train_2290", "nl": "Many people think that Leeuwenhoek invented the microscope.", "fol": "", "prediction": ["exists x.(Person(x) & LeeuwenhoekInventsMicroscope(x))"]}
{"id": "eqasc_train_2291", "nl": "Something invented by Leeuwenhoek is used to see small things by biologists by making them appear bigger", "fol": "", "prediction": ["all x y z.((InventedByLeeuwenhoek(x) & Biologist(y) & SmallThing(z) & SeesBy(y,z)) -> MakesAppearBigger(y,z))"]}
{"id": "eqasc_train_2292", "nl": "Bacteria are too small to be seen without a microscope.", "fol": "", "prediction": ["all x.(Bacteria(x) -> (TooSmallToBeSeenWithoutMicroscope(x)))"]}
{"id": "eqasc_train_2293", "nl": "Biologists need a microscope to make bacteria appear bigger", "fol": "", "prediction": ["all x y.((Biologist(x) & Microscope(y)) -> NeedsToMakeBacteriaAppearBigger(x,y))"]}
{"id": "eqasc_train_2294", "nl": "microscope is used to see bacteria by biologists by making them appear bigger", "fol": "", "prediction": ["all x y.((Microscope(x) & Biologist(y)) -> (SeesBacteria(x,y) & MakesBacteriaAppearBigger(y,x)))"]}
{"id": "eqasc_train_2295", "nl": "Biologists study living creatures.", "fol": "", "prediction": ["all x.(Biologist(x) -> StudiesLivingCreatures(x))"]}
{"id": "eqasc_train_2296", "nl": "microscopes make living creatures appear bigger", "fol": "", "prediction": ["all x y.((Microscope(x) & LivingCreature(y)) -> MakesAppearBigger(x,y))"]}
{"id": "eqasc_train_2297", "nl": "Microscopes and telescopes both use lenses.", "fol": "", "prediction": ["all x.((Microscope(x) | Telescope(x)) -> UsesLenses(x))"]}
{"id": "eqasc_train_2298", "nl": "lenses are used to see small things by biologists by making them appear bigger", "fol": "", "prediction": ["all x y z.((Lense(x) & Biologist(y) & SmallThing(z)) -> (UsedToSee(x,y,z) & MakesAppearBigger(y,z)))"]}
{"id": "eqasc_train_2299", "nl": "Bioaerosols are extremely small living organisms or fragments of living things suspended in the air.", "fol": "", "prediction": ["all x.(Bioaerosol(x) -> (SmallLivingOrganism(x) | FragmentsOfLivingThings(x)))"]}
{"id": "eqasc_train_2300", "nl": "microscope is used to see bioaerosols by biologists by making them appear bigger", "fol": "", "prediction": ["all x y.((Microscope(x) & Biologist(y) & SeesBioaerosols(x,y)) -> MakesAppearsBigger(y,x))"]}
{"id": "eqasc_train_2301", "nl": "Mites are almost microscopic and best seen with a hand lens or magnifying glass.", "fol": "", "prediction": ["all x.(Mite(x) -> (AlmostMicroscopically(x) & (HandLens(x) | MagnifyingGlass(x))))"]}
{"id": "eqasc_train_2302", "nl": "Hand lenses or magnifying glasses are used to see small things to make them appear bigger.", "fol": "", "prediction": ["all x.((HandLens(x) | MagnifyingGlasses(x)) -> SeesSmallThings(x))"]}
{"id": "eqasc_train_2303", "nl": "temperature changing can cause phase changes", "fol": "", "prediction": ["all x.(TemperatureChange(x) -> CausesPhaseChange(x))"]}
{"id": "eqasc_train_2304", "nl": "Phase changes are due to potential energy changes.", "fol": "", "prediction": ["all x.(PhaseChange(x) -> PotentialEnergyChange(x))"]}
{"id": "eqasc_train_2305", "nl": "Temperature changing can cause potential energy changes.", "fol": "", "prediction": ["all x.(TemperatureChange(x) -> CanCausePotentialEnergyChange(x))"]}
{"id": "eqasc_train_2306", "nl": "Melting is the change of phase from a solid to a liquid.", "fol": "", "prediction": ["all x.(Melting(x) -> (ChangeOfPhase(x) & SolidToLiquid(x)))"]}
{"id": "eqasc_train_2307", "nl": "Temperature changing can cause melting", "fol": "", "prediction": ["all x.(TemperatureChange(x) -> CausesMelting(x))"]}
{"id": "eqasc_train_2308", "nl": "Another example of a phase change is the transformation of water from liquid to a gas.", "fol": "", "prediction": ["all x.((Water(x) & Liquid(x)) -> GasTransformation(x))"]}
{"id": "eqasc_train_2309", "nl": "Temperature changes can transform water from liquid to a gas.", "fol": "", "prediction": ["all x.(TemperatureChange(x) -> TransformsWaterFromLiquidToGas(x))"]}
{"id": "eqasc_train_2310", "nl": "If climate changes and temperatures rise, there are a number of potential effects.", "fol": "", "prediction": ["all x.((ClimateChange(x) & TemperatureRise(x)) -> PotentialEffects(x))"]}
{"id": "eqasc_train_2311", "nl": "Climate change is a phase change", "fol": "", "prediction": ["all x.(ClimateChange(x) -> PhaseChange(x))"]}
{"id": "eqasc_train_2312", "nl": "Temperature changes can cause a solid to melt into a liquid.", "fol": "", "prediction": ["all x y.((Solid(x) & TemperatureChange(y)) -> MeltsIntoLiquid(x,y))"]}
{"id": "eqasc_train_2313", "nl": "Phase changing is important for transferring energy in the atmosphere.", "fol": "", "prediction": ["all x.(PhaseChange(x) -> TransfersEnergyInAtmosphere(x))"]}
{"id": "eqasc_train_2314", "nl": "temperature changing can cause transferring energy in the atmosphere", "fol": "", "prediction": ["all x.(TemperatureChange(x) -> CausesTransferringEnergy(x))"]}
{"id": "eqasc_train_2315", "nl": "Phase changes Change of State.", "fol": "", "prediction": ["all x.(PhaseChange(x) -> ChangeOfState(x))"]}
{"id": "eqasc_train_2316", "nl": "temperature changing can cause change of state.", "fol": "", "prediction": ["all x.(TemperatureChange(x) -> CausesChangeOfState(x))"]}
{"id": "eqasc_train_2317", "nl": "temperature is a change of state", "fol": "", "prediction": ["all x.(Temperature(x) -> ChangeOfState(x))"]}
{"id": "eqasc_train_2318", "nl": "When water goes through the cold induced phase change to produce ice, the ice expands.", "fol": "", "prediction": ["all x.((Water(x) & ColdInducedPhaseChange(x) & ProducesIce(x)) -> ExpandsIce(x))"]}
{"id": "eqasc_train_2319", "nl": "Temperature changing can cause water to change to ice", "fol": "", "prediction": ["all x y.((TemperatureChange(x) & Water(y)) -> CanCauseToChangeToIce(x,y))"]}
{"id": "eqasc_train_2320", "nl": "Temperature is the relative degree of heat or cold.", "fol": "", "prediction": ["all x.(Temperature(x) -> (RelativeDegreeOfHeat(x) | RelativeDegreeOfCold(x)))"]}
{"id": "eqasc_train_2321", "nl": "heat or cold can cause phase changes", "fol": "", "prediction": ["all x.((Heat(x) | Cold(x)) -> CausesPhaseChange(x))"]}
{"id": "eqasc_train_2322", "nl": "Temperature also changes with the seasons.", "fol": "", "prediction": ["all x.(Temperature(x) -> ChangesWithSeasons(x))"]}
{"id": "eqasc_train_2323", "nl": "seasons can cause phase changes", "fol": "", "prediction": ["all x.(Season(x) -> CausesPhaseChange(x))"]}
{"id": "eqasc_train_2324", "nl": "Global warming is the change of the Earth's temperature.", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> ChangeOfEarthsTemperature(x))"]}
{"id": "eqasc_train_2325", "nl": "Global warming is a phase change", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> PhaseChange(x))"]}
{"id": "eqasc_train_2326", "nl": "the emission of sulfur dioxide causes acid rain", "fol": "", "prediction": ["all x.((EmissionOfSulfurDioxide(x) & AcidRain(x)) -> CausesAcidRain(x))"]}
{"id": "eqasc_train_2327", "nl": "Acid rain effects forest ecosystems.", "fol": "", "prediction": ["all x.(AcidRain(x) -> EffectsForestEcosystems(x))"]}
{"id": "eqasc_train_2328", "nl": "Ecosystems are damaged by sulfur dioxide", "fol": "", "prediction": ["all x.(Ecosystem(x) -> DamagedBySulfurDioxide(x))"]}
{"id": "eqasc_train_2329", "nl": "The sulfur dioxide is converted into sulfuric acid.", "fol": "", "prediction": ["all x.(SulfurDioxide(x) -> ConvertedToSulfuricAcid(x))"]}
{"id": "eqasc_train_2330", "nl": "emissions cause acid rain ", "fol": "", "prediction": ["all x.(Emissions(x) -> CausesAcidRain(x))"]}
{"id": "eqasc_train_2331", "nl": "It's sulfur dioxide (SO2).", "fol": "", "prediction": ["(SulfurDioxide(SO2) -> SulfurDioxide(SO2))"]}
{"id": "eqasc_train_2332", "nl": "the emission of SO2 causes acid rain", "fol": "", "prediction": ["all x.((EmissionOfSo2(x) & AcidRain(x)) -> Causes(x,acidrain))"]}
{"id": "eqasc_train_2333", "nl": "Sulfur in the coal becomes sulfur dioxide when burned.", "fol": "", "prediction": ["all x.((Sulfur(x) & BurnedCoal(x)) -> SulfurDioxide(x))"]}
{"id": "eqasc_train_2334", "nl": "Burning coal causes acid rain.", "fol": "", "prediction": ["all x.(BurningCoal(x) -> CausesAcidRain(x))"]}
{"id": "eqasc_train_2335", "nl": "Polluted rain is called acid rain .", "fol": "", "prediction": ["all x.(PollutedRain(x) -> AcidRain(x))"]}
{"id": "eqasc_train_2336", "nl": "sulfur dioxide causes pollution", "fol": "", "prediction": ["all x.(SulfurDioxide(x) -> CausesPollution(x))"]}
{"id": "eqasc_train_2337", "nl": "ACID RAIN Acid rain is polluted and harmful to the environment.", "fol": "", "prediction": ["all x.(AcidRAIN(x) -> (Polluted(x) & HarmfulToEnvironment(x)))"]}
{"id": "eqasc_train_2338", "nl": "The emission of sulfur dioxide causes pollution to the environment.", "fol": "", "prediction": ["all x.(EmissionOfSulfurDioxide(x) -> CausesPollutionToEnvironment(x))"]}
{"id": "eqasc_train_2339", "nl": "Scrubbers significantly reduce emissions of sulfur dioxide.", "fol": "", "prediction": ["all x.(Scrubber(x) -> SignificantlyReducesEmissionsOfSulfurDioxide(x))"]}
{"id": "eqasc_train_2340", "nl": "Scrubbers reduce the instances of acid rain.", "fol": "", "prediction": ["all x.(Scrubber(x) -> ReducesAcidRain(x))"]}
{"id": "eqasc_train_2341", "nl": "Sulfur Dioxide and Asthmatics A highly reactive colorless gas smelling like rotten eggs, sulfur dioxide derives primarily from fossil fuel combustion.", "fol": "", "prediction": ["(HydrogenEggs(SulfurDioxide) & Asthmatics(SulfurDioxide) & HighlyReactive(SulfurDioxide) & SmellsAlikeRottenEggs(SulfurDioxide))"]}
{"id": "eqasc_train_2342", "nl": "The emission of something that smells like rotten eggs causes acid rain", "fol": "", "prediction": ["all x y.((Emission(x) & SmellsAlikeRottenEggs(x)) -> CausesAcidRain(y))"]}
{"id": "eqasc_train_2343", "nl": "An erupting volcano emits sulfur dioxide.", "fol": "", "prediction": ["all x.(EruptingVolcano(x) -> EmitsSulfurDioxide(x))"]}
{"id": "eqasc_train_2344", "nl": "An erupting Volcano causes acid rain", "fol": "", "prediction": ["all x.(EruptingVolcano(x) -> CausesAcidRain(x))"]}
{"id": "eqasc_train_2345", "nl": "Most sulfur dioxide comes from the combustion of oil and coal.", "fol": "", "prediction": ["all x.(SulfurDioxide(x) -> (CombustibleOil(x) & CombustibleCoal(x)))"]}
{"id": "eqasc_train_2346", "nl": "combustion of oil causes acid rain", "fol": "", "prediction": ["all x y.((CombustionOfOil(x) & AcidRain(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_2347", "nl": "Cells cannot survive without oxygen.", "fol": "", "prediction": ["all x.(Cell(x) -> -SurvivesWithoutOxygen(x))"]}
{"id": "eqasc_train_2348", "nl": "Cells are the basic building blocks of life.", "fol": "", "prediction": ["all x.(Cell(x) -> BasicBuildingBlockOfLife(x))"]}
{"id": "eqasc_train_2349", "nl": "the basic building blocks of life cannot survive without oxygen", "fol": "", "prediction": ["all x.((BasicBuildingBlocksOfLife(x) & -SurviveWithoutOxygen(x)) -> -SurviveWithoutOxygen(x))"]}
{"id": "eqasc_train_2350", "nl": "Life is responsible for oxygen in the atmosphere.", "fol": "", "prediction": ["all x.(Life(x) -> ResponsibleForOxygen(x))"]}
{"id": "eqasc_train_2351", "nl": "cells cannot survive without the atmosphere", "fol": "", "prediction": ["all x.((Cell(x) & -Atmosphere(x)) -> -SurvivesWithoutAtmosphere(x))"]}
{"id": "eqasc_train_2352", "nl": "Plants breathe oxygen into the atmosphere.", "fol": "", "prediction": ["all x.(Plant(x) -> BreathesOxygenIntoAtmosphere(x))"]}
{"id": "eqasc_train_2353", "nl": "Cells cannot survive without plants breathing into the atmosphere", "fol": "", "prediction": ["all x y.((Cell(x) & Plant(y) & BreathesIntoAtmosphere(x,y)) -> -SurvivesWithoutPlants(x,y))"]}
{"id": "eqasc_train_2354", "nl": "Air contains oxygen.", "fol": "", "prediction": ["all x.(Air(x) -> ContainsOxygen(x))"]}
{"id": "eqasc_train_2355", "nl": "air helps cells survive", "fol": "", "prediction": ["all x y.((Air(x) & Cell(y)) -> HelpsSurvive(x,y))"]}
{"id": "eqasc_train_2356", "nl": "Bacteria that require oxygen are aerobic.", "fol": "", "prediction": ["all x.((Bacteria(x) & RequiresOxygen(x)) -> Aerobic(x))"]}
{"id": "eqasc_train_2357", "nl": "Cells are aerobic.", "fol": "", "prediction": ["all x.(Cell(x) -> Aerobic(x))"]}
{"id": "eqasc_train_2358", "nl": "Plants stabilize soils and oxygenate the atmosphere.", "fol": "", "prediction": ["all x.(Plant(x) -> (StabilizesSoils(x) & OxygenatesAtmosphere(x)))"]}
{"id": "eqasc_train_2359", "nl": "cells cannot survive without plants replenishing the atmosphere", "fol": "", "prediction": ["all x.((Cell(x) & Plant(y) & RenewsAtmosphere(x,y)) -> -SurvivesWithoutReplenishment(x,y))"]}
{"id": "eqasc_train_2360", "nl": "Cells are the units of function in living things.", "fol": "", "prediction": ["all x.(Cell(x) -> UnitOfFunction(x))"]}
{"id": "eqasc_train_2361", "nl": "living things cannot survive without oxygen", "fol": "", "prediction": ["all x.(LivingThing(x) -> -SurvivesWithoutOxygen(x))"]}
{"id": "eqasc_train_2362", "nl": "Survival is to live, to live means hope.", "fol": "", "prediction": ["all x.(Survival(x) -> (Live(x) & Live(x)))"]}
{"id": "eqasc_train_2363", "nl": "Cells cannot live without oxygen.", "fol": "", "prediction": ["all x.(Cell(x) -> -LivesWithoutOxygen(x))"]}
{"id": "eqasc_train_2364", "nl": "And oxygen, O2, is the molecule to do it.", "fol": "", "prediction": ["(Molecule(O2) & Oxygen(O2))"]}
{"id": "eqasc_train_2365", "nl": "Cells cannot survive without O2.", "fol": "", "prediction": ["all x.(Cell(x) -> -SurvivesWithoutO2.(Cell(x)))"]}
{"id": "eqasc_train_2366", "nl": "Fertilization occurs when sperm swim to an egg inside an archegonium.", "fol": "", "prediction": ["all x y.((Ssperm(x) & Egg(y) & InsideArchegonium(x)) -> SwimsTo(x,y))"]}
{"id": "eqasc_train_2367", "nl": "fertilization occurs when male gametes swim to an egg inside an archegonium", "fol": "", "prediction": ["all x y z.((MaleGamete(x) & Egg(y) & Archegonium(z)) -> SwimsToInside(x,y,z)) FertilizationOccurs(x))"]}
{"id": "eqasc_train_2368", "nl": "When conception occurs in the female, a sperm fertilizes an egg.", "fol": "", "prediction": ["all x y.((ConceptionOccursInFemale(x) & Sperm(y)) -> FertilizesEgg(y))"]}
{"id": "eqasc_train_2369", "nl": "When sperm enters an egg, conception occurs", "fol": "", "prediction": ["all x y z.((Ssperm(x) & Egg(y) & Sperm(z) & Enters(x,y)) -> ConceptionOccurs(x))"]}
{"id": "eqasc_train_2370", "nl": "Pregnancy begins with a fertilized egg.", "fol": "", "prediction": ["all x.(Pregnancy(x) -> FertileEgg(x))"]}
{"id": "eqasc_train_2371", "nl": "Pregnancy begins after sperm swim to an egg inside an archegonium.", "fol": "", "prediction": ["all x y.((Ssperm(x) & Egg(y) & Archegonium(z)) -> SwimsTo(x,y,z))"]}
{"id": "eqasc_train_2372", "nl": "If fertilized, the egg implants itself in the uterus.", "fol": "", "prediction": ["all x.(Fertilized(x) -> ImplantsEggInUterus(x))"]}
{"id": "eqasc_train_2373", "nl": "the egg implants itself in the uterus after sperm swim to an egg", "fol": "", "prediction": ["all x y z.((Egg(x) & Sperm(y) & Sperm(z) & ImplantsInUterus(x,y,z)) -> SwimToEgg(x,y))"]}
{"id": "eqasc_train_2374", "nl": "Fertilization occurs when the egg and sperm fuse and join.", "fol": "", "prediction": ["all x.((Egg(x) & Sperm(x)) -> FusesAndJoins(x))"]}
{"id": "eqasc_train_2375", "nl": "An egg and sperm can fuse when sperm swim to an egg inside an archegonium.", "fol": "", "prediction": ["all x y.((Egg(x) & Sperm(y) & SwimsTo(x,y)) -> CanFuse(x,y))"]}
{"id": "eqasc_train_2376", "nl": "Sperm nuclei are released into the archegonium.", "fol": "", "prediction": ["all x.(SspermNucleus(x) -> ReleasedIntoArchegonium(x))"]}
{"id": "eqasc_train_2377", "nl": "sperm nuclei enter the egg", "fol": "", "prediction": ["all x y.((SspermNucleus(x) & Egg(y)) -> Enters(x,y))"]}
{"id": "eqasc_train_2378", "nl": "If the egg is fertilized, the complex process of reproduction continues.", "fol": "", "prediction": ["all x.((Egg(x) & Fertilized(x)) -> ComplexProcessOfReproduction(x))"]}
{"id": "eqasc_train_2379", "nl": "reproduction continues when sperm swim to an egg inside an archegonium", "fol": "", "prediction": ["all x y.((Ssperm(x) & Egg(y) & Archegonium(z)) -> SwimsToInside(x,y,z))"]}
{"id": "eqasc_train_2380", "nl": "Archegonium secretes sucrose to attract the sperm.", "fol": "", "prediction": ["all x.(Archegonium(x) -> SecretesSuccrose(x))"]}
{"id": "eqasc_train_2381", "nl": "Sucrose attracts sperm to the egg for fertilization", "fol": "", "prediction": ["all x y z.((Succrose(x) & Sperm(y) & Egg(z)) -> AttractsToForFertilization(x,y,z))"]}
{"id": "eqasc_train_2382", "nl": "If the egg is fertilized, it can implant in the uterus and cause pregnancy.", "fol": "", "prediction": ["all x.(FertilizedEgg(x) -> (ImplantsInUterus(x) & CausesPregnancy(x)))"]}
{"id": "eqasc_train_2383", "nl": "pregnancy occurs when sperm swim to an egg inside an archegonium", "fol": "", "prediction": ["all x y.((Ssperm(x) & Egg(y) & Archegonium(z)) -> SwimsTo(x,y,z))"]}
{"id": "eqasc_train_2384", "nl": "Gametes in males are called sperm, and in women commonly referred to as eggs.", "fol": "", "prediction": ["all x y.((Male(x) & Female(y)) -> (Sperm(x) & Egg(y)))"]}
{"id": "eqasc_train_2385", "nl": "Fertilization occurs when male gametes swim to an egg.", "fol": "", "prediction": ["all x y.((MaleGamete(x) & Egg(y)) -> SwimsTo(x,y))"]}
{"id": "eqasc_train_2386", "nl": "Each archegonium contains a single egg that is embedded in the prothallus.", "fol": "", "prediction": ["all x.(Archegonium(x) -> ContainsSingleEgg(x))"]}
{"id": "eqasc_train_2387", "nl": "fertilization occurs when sperm swim inside a single egg embedded in the prothallus.", "fol": "", "prediction": ["all x y.((Ssperm(x) & SingleEgg(y) & EmbedInProthallus(x,y)) -> FertilizationOccurs(x))"]}
{"id": "eqasc_train_2388", "nl": "When a sperm cell fertilizes an egg cell, a fertilized egg or zygote is formed.", "fol": "", "prediction": ["all x y.((SspermCell(x) & EggCell(y) & Fertilizes(x,y)) -> (Fertile(x,y) | Fertile(x,y)))"]}
{"id": "eqasc_train_2389", "nl": "sperm swim to an egg, forming a zygote inside an archegonium", "fol": "", "prediction": ["all x y z.((Sperm(x) & Egg(y) & Archegonium(z)) -> (SwimsTo(x,y) & FormsZygote(x,z)))"]}
{"id": "eqasc_train_2390", "nl": "Each archegonium is flask shaped.", "fol": "", "prediction": ["all x.(Archegonium(x) -> FlaskShape(x))"]}
{"id": "eqasc_train_2391", "nl": "Fertilization occurs when sperm swim to an egg inside a flask-shaped organ", "fol": "", "prediction": ["all x y z.((Ssperm(x) & Egg(y) & FlaskShapeOrgan(z)) -> SwimsTo(x,y,z)) FertilizationOccurs(x))"]}
{"id": "eqasc_train_2392", "nl": "Water is needed to transport flagellated sperm to archegonium.", "fol": "", "prediction": ["all x y.((FlagellatedSsperm(x) & Archegonium(y)) -> NeedsWater(x))"]}
{"id": "eqasc_train_2393", "nl": "fertilization requires water", "fol": "", "prediction": ["all x.(Fertilization(x) -> RequiresWater(x))"]}
{"id": "eqasc_train_2394", "nl": "looking at bright objects has a negative impact on the eyes", "fol": "", "prediction": ["all x y.((BrightObject(x) & Eyes(y)) -> NegativeImpactOn(x,y))"]}
{"id": "eqasc_train_2395", "nl": "Outside, the sun is bright.", "fol": "", "prediction": ["all x.(Outside(x) -> BrightSun(x))"]}
{"id": "eqasc_train_2396", "nl": "Looking at the sun can have a negative impact on the eyes.", "fol": "", "prediction": ["all x.(LookingAtSun(x) -> NegativeImpactOnEyes(x))"]}
{"id": "eqasc_train_2397", "nl": "Looking at the sun has a negative impact on the eyes", "fol": "", "prediction": ["all x y.((Sun(x) & Eyes(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_2398", "nl": "Bright sun works best.", "fol": "", "prediction": ["all x.(BrightSun(x) -> WorksBest(x))"]}
{"id": "eqasc_train_2399", "nl": "Looking at the Sun has a negative impact on eyes.", "fol": "", "prediction": ["all x.(LooksAtSun(x) -> NegativeImpactOnEyes(x))"]}
{"id": "eqasc_train_2400", "nl": "Sunglasses help protect the eyes from glare off the river surfaces.", "fol": "", "prediction": ["all x.(Sunglasses(x) -> ProtectsFromGlareOffRiverSurfaces(x))"]}
{"id": "eqasc_train_2401", "nl": "Sunglasses can protect against looking at bright objects, like glare off the river surfaces.", "fol": "", "prediction": ["all x.(Sunglasses(x) -> (ProtectsAgainstBrightObjects(x) & ProtectsAgainstGlareOffRiverSurfaces(x)))"]}
{"id": "eqasc_train_2402", "nl": "Looking at the sun has a negative impact on the eyes. ", "fol": "", "prediction": ["all x.(LooksAtSun(x) -> NegativeImpactOnEyes(x))"]}
{"id": "eqasc_train_2403", "nl": "Like the retina of the eye, the intense light of the Sun can burn the imager damaging the camcorder.", "fol": "", "prediction": ["all x y.((IntenseLight(x) & Sun(y) & Imager(z)) -> BurnsDamaging(x,z))"]}
{"id": "eqasc_train_2404", "nl": "Looking at bright objects have a negative impact on the retina", "fol": "", "prediction": ["all x y.((BrightObject(x) & Retina(y)) -> NegativeImpactOn(x,y))"]}
{"id": "eqasc_train_2405", "nl": "Looking at the sun has a negative impact on the eyes.", "fol": "", "prediction": ["all x.(LooksAtSun(x) -> NegativeImpactOnEyes(x))"]}
{"id": "eqasc_train_2406", "nl": "Ultraviolet radiation damages the eye's lens and retina.", "fol": "", "prediction": ["all x.(UltravioletRadiation(x) -> (DamagesEyeLens(x) & DamagesRetina(x)))"]}
{"id": "eqasc_train_2407", "nl": "Looking at bright objects damages the retina.", "fol": "", "prediction": ["all x.((BrightObject(x) & LooksAt(x,y)) -> DamagesRetina(x))"]}
{"id": "eqasc_train_2408", "nl": "looking at the Sun has a negative impact on the eyes", "fol": "", "prediction": ["all x y.((LookingAtSun(x) & Eyes(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_2409", "nl": "Most of the bright objects are stars.", "fol": "", "prediction": ["all x.(BrightObject(x) -> Star(x))"]}
{"id": "eqasc_train_2410", "nl": "looking at stars negatively impacts the eyes", "fol": "", "prediction": ["all x y.((Star(x) & Eye(y)) -> NegativelyImpacts(x,y))"]}
{"id": "eqasc_train_2411", "nl": "Eye and dental disorders sometimes cause headaches.", "fol": "", "prediction": ["all x.((Eye(x) | DentalDisorder(x)) -> CausesHeadaches(x))"]}
{"id": "eqasc_train_2412", "nl": "looking at bright objects can sometimes cause headaches", "fol": "", "prediction": ["all x.((LookingAtBrightObjects(x) & CanCauseHeadaches(x)) -> CanCauseHeadaches(x))"]}
{"id": "eqasc_train_2413", "nl": "preventing the transfer of heat from an organims 's body causes that organism to keep warm", "fol": "", "prediction": ["all x y.((Organism(x) & Organims(y) & PreventsHeatTransfer(x,y)) -> KeepsWarm(x,y))"]}
{"id": "eqasc_train_2414", "nl": "Body heat is trapped in the haircoat.", "fol": "", "prediction": ["all x.(BodyHeat(x) -> CapturedInHaircoat(x))"]}
{"id": "eqasc_train_2415", "nl": "The haircoat of an organism helps keep it warm", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y)) -> HelpsKeepWarm(x,y))"]}
{"id": "eqasc_train_2416", "nl": "First, a hat serves as insulation against convective heat transfer.", "fol": "", "prediction": ["all x.(Hat(x) -> InsulationAgainstConvectiveHeatTransfer(x))"]}
{"id": "eqasc_train_2417", "nl": "Wearing hats serves as insulation to keep the body warm.", "fol": "", "prediction": ["all x.(WearsHat(x) -> Insulation(x))"]}
{"id": "eqasc_train_2418", "nl": "Fur or feathers help hold heat in, but some body heat always escapes.", "fol": "", "prediction": ["(all x.(Fur(x) | Feather(x)) -> HoldsHeatIn(x)) & exists y.(BodyHeat(y) & -EscapesHeat(y)))"]}
{"id": "eqasc_train_2419", "nl": "fur causes an organism to keep warm", "fol": "", "prediction": ["all x y.((Fur(x) & Organism(y)) -> CausesToKeepWarm(x,y))"]}
{"id": "eqasc_train_2420", "nl": "Leaves keep animals warm.", "fol": "", "prediction": ["all x.(Leaves(x) -> KeepsAnimalsWarm(x))"]}
{"id": "eqasc_train_2421", "nl": "Leaves are used by animals to stop transfer of heat from their body.", "fol": "", "prediction": ["all x y.((Leaves(x) & Animal(y)) -> StopsTransferOfHeat(x,y))"]}
{"id": "eqasc_train_2422", "nl": "Leaves can keep animals warm.", "fol": "", "prediction": ["all x.(Leaves(x) -> KeepsAnimalsWarm(x))"]}
{"id": "eqasc_train_2423", "nl": "Leaves can prevent heat transfer from an animal's body. ", "fol": "", "prediction": ["all x y.((Leaves(x) & Animal(y)) -> PreventsHeatTransfer(x,y))"]}
{"id": "eqasc_train_2424", "nl": "Organic Wool Booties Sweet hand-knit booties help keep little feet warm.", "fol": "", "prediction": ["all x.(OrganicWoodenBooties(x) -> (SweetHandKnitBooties(x) & KeepsLittleFeetWarm(x)))"]}
{"id": "eqasc_train_2425", "nl": "hand-knit booties help prevent the transfer of heat from an organism's body.", "fol": "", "prediction": ["all x y.((HandKnitBooty(x) & Organism(y)) -> PreventsHeatTransfer(x,y))"]}
{"id": "eqasc_train_2426", "nl": "An adult human is a diploid organism.", "fol": "", "prediction": ["all x.(AdultHuman(x) -> DiploidOrganism(x))"]}
{"id": "eqasc_train_2427", "nl": "Preventing the transfer of heat from a human's body causes that human to keep warm.", "fol": "", "prediction": ["all x y.((PreventsHeatTransfer(x) & Human(y)) -> KeepsWarm(y,x))"]}
{"id": "eqasc_train_2428", "nl": "Heat is a manifestation of energy.", "fol": "", "prediction": ["all x.(Heat(x) -> ManifestationOfEnergy(x))"]}
{"id": "eqasc_train_2429", "nl": "Preventing the transfer of energy from an organism's body keeps it warm.", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y) & PreventsTransferOfEnergy(x,y)) -> KeepsWarm(x,y))"]}
{"id": "eqasc_train_2430", "nl": "Radiation is the major method of heat transfer warming Bob's face.", "fol": "", "prediction": ["all x.(Radiation(x) -> Warming(x,BobsFace))"]}
{"id": "eqasc_train_2431", "nl": "radiation keeps humans warm", "fol": "", "prediction": ["all x y.((Radiation(x) & Human(y)) -> KeepsWarm(x,y))"]}
{"id": "eqasc_train_2432", "nl": "Preventing the transfer of heat from an animal 's body causes that animal to keep warm", "fol": "", "prediction": ["all x y z.((PreventsHeatTransfer(x) & Animal(y) & Body(z)) -> KeepsWarm(y,z))"]}
{"id": "eqasc_train_2433", "nl": "Sweat cools the body and prevents internal heat from getting too high.", "fol": "", "prediction": ["all x.(Sweat(x) -> (CoolsBody(x) & PreventsInternalHeat(x)))"]}
{"id": "eqasc_train_2434", "nl": "Sweating increases the amount of heat that is transferred from the body.", "fol": "", "prediction": ["all x y.((Sweating(x) & Body(y)) -> IncreasesHeatTransfer(x,y))"]}
{"id": "eqasc_train_2435", "nl": "If Arctic foxes are in too cool weather, they warm up by their thick fur.", "fol": "", "prediction": ["all x.((ArcticFox(x) & CoolWeather(x)) -> WarmUpByThickFur(x))"]}
{"id": "eqasc_train_2436", "nl": "fur prevents the transfer of heat from an organism's body", "fol": "", "prediction": ["all x y.((Fur(x) & Organism(y)) -> PreventsHeatTransfer(x,y))"]}
{"id": "eqasc_train_2437", "nl": "Fur and feathers help keep some animals warm during the harsh winter.", "fol": "", "prediction": ["all x y.((Animal(x) & Fur(y) & Feather(y)) -> KeepsWarmDuringHarshWinter(x,y))"]}
{"id": "eqasc_train_2438", "nl": "Fur and feathers help prevent some animals bodies from transferring heat.", "fol": "", "prediction": ["all x y.((Animal(x) & Fur(y) & Feather(y)) -> HelpsPreventHeatTransfer(x,y))"]}
{"id": "eqasc_train_2439", "nl": "Dirt can keep animals warm.", "fol": "", "prediction": ["all x.(Dirt(x) -> KeepsAnimalsWarm(x))"]}
{"id": "eqasc_train_2440", "nl": "Dirt can prevent the transfer of heat from an organism's body.", "fol": "", "prediction": ["all x y.((Dirt(x) & Organism(y)) -> PreventsHeatTransfer(x,y))"]}
{"id": "eqasc_train_2441", "nl": "Heat is a measurement of transferable energy.", "fol": "", "prediction": ["all x.(Heat(x) -> MeasuresTransferableEnergy(x))"]}
{"id": "eqasc_train_2442", "nl": "preventing the transfer of energy from an organism's body causes it to keep warm", "fol": "", "prediction": ["all x y.((Organism(x) & PreventsTransferOfEnergy(x,y)) -> KeepsWarm(x))"]}
{"id": "eqasc_train_2443", "nl": "webbed feet are used for moving faster through water by aquatic animals", "fol": "", "prediction": ["all x y.((WebbedFeet(x) & AquaticAnimal(y)) -> MovesFasterThroughWater(x,y))"]}
{"id": "eqasc_train_2444", "nl": "Ducks have webbed feet, designed for swimming.", "fol": "", "prediction": ["all x.(Duck(x) -> (HasWebbedFeet(x) & DesignedForSwimming(x)))"]}
{"id": "eqasc_train_2445", "nl": "Feet designed for swimming are used for moving faster through water.", "fol": "", "prediction": ["all x.((Feet(x) & DesignedForSwimming(x)) -> UsedForMovingFaster(x))"]}
{"id": "eqasc_train_2446", "nl": "Ducks generally have webbing on their feet.", "fol": "", "prediction": ["all x.(Duck(x) -> WebbingOnFeet(x))"]}
{"id": "eqasc_train_2447", "nl": "Ducks can move fast through water.", "fol": "", "prediction": ["all x.(Duck(x) -> MovesFast(x))"]}
{"id": "eqasc_train_2448", "nl": "Aquatic animals moving through water are also subject to the principles of aerodynamics.", "fol": "", "prediction": ["all x.((AquaticAnimal(x) & MovingThroughWater(x)) -> Aerodynamics(x))"]}
{"id": "eqasc_train_2449", "nl": "Aquatic animals in water use webbed feet due to the principals of aerodynamics.", "fol": "", "prediction": ["all x y.((AquaticAnimal(x) & Water(y) & InWater(x,y)) -> UsesWebbedFeet(x,y))"]}
{"id": "eqasc_train_2450", "nl": "All ducks have webbed feet.", "fol": "", "prediction": ["all x.(Duck(x) -> HasWebbedFeet(x))"]}
{"id": "eqasc_train_2451", "nl": "ducks move faster through water due to their feet", "fol": "", "prediction": ["all x.(Duck(x) -> (MoveFaster(x) & Water(x) & Feet(x)))"]}
{"id": "eqasc_train_2452", "nl": "Ducks are aquatic birds.", "fol": "", "prediction": ["all x.(Duck(x) -> AquaticBird(x))"]}
{"id": "eqasc_train_2453", "nl": "webbed feet are used for moving faster through water by ducks", "fol": "", "prediction": ["all x y.((WebbedFeet(x) & Duck(y)) -> MovesFasterThroughWater(x,y))"]}
{"id": "eqasc_train_2454", "nl": "ducks can move fast through the water due to their specialized feet", "fol": "", "prediction": ["all x.(Duck(x) -> (MovesFast(x) & SpecializedFeet(x) & Water(x)))"]}
{"id": "eqasc_train_2455", "nl": "Beavers are primarily aquatic animals.", "fol": "", "prediction": ["all x.(Beaver(x) -> AquaticAnimal(x))"]}
{"id": "eqasc_train_2456", "nl": "Beavers use their webbed feet to move through water quicker", "fol": "", "prediction": ["all x.(Beaver(x) -> UsesWebbedFeetToMoveThroughWater(x))"]}
{"id": "eqasc_train_2457", "nl": "Animals move around, seeking their prey.", "fol": "", "prediction": ["all x.(Animal(x) -> (MovesAround(x) & SeekingPrey(x)))"]}
{"id": "eqasc_train_2458", "nl": "webbed feet help aquatic animals catch prey", "fol": "", "prediction": ["all x y.((WebbedFeet(x) & AquaticAnimal(y)) -> HelpsCatchesPrey(x,y))"]}
{"id": "eqasc_train_2459", "nl": "Feet are webbed and serve as a rudder.", "fol": "", "prediction": ["all x.(Feet(x) -> (Webbed(x) & ServesAsRudder(x)))"]}
{"id": "eqasc_train_2460", "nl": "aquatic animals use feet as a rudder", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> UsesFeetAsRudder(x))"]}
{"id": "eqasc_train_2461", "nl": "lungs are used for breathing air by land animals", "fol": "", "prediction": ["all x y.((Lung(x) & LandAnimal(y)) -> UsedForBreathingAir(x,y))"]}
{"id": "eqasc_train_2462", "nl": "Land Animals Land animals have four limbs.", "fol": "", "prediction": ["all x.(LandAnimal(x) -> HasFourLimbs(x))"]}
{"id": "eqasc_train_2463", "nl": "Lungs are used for breathing air by animals with four limbs.", "fol": "", "prediction": ["all x y.((Lung(x) & Animal(y) & HasFourLimbs(y)) -> UsedForBreathingAir(x,y))"]}
{"id": "eqasc_train_2464", "nl": "African Elephants are the biggest land animals.", "fol": "", "prediction": ["all x.(AfricanElephant(x) -> LandAnimal(x))"]}
{"id": "eqasc_train_2465", "nl": "african elephants have lungs", "fol": "", "prediction": ["all x.(AfricanElephant(x) -> HasLungs(x))"]}
{"id": "eqasc_train_2466", "nl": "Elephants are the largest animals on land.", "fol": "", "prediction": ["all x.(Elephant(x) -> LargestAnimalOnLand(x))"]}
{"id": "eqasc_train_2467", "nl": "lungs are used for breathing air by elephants", "fol": "", "prediction": ["all x y.((Lung(x) & Elephant(y)) -> UsedForBreathingAir(x,y))"]}
{"id": "eqasc_train_2468", "nl": "Mammals are animals with lungs, and they breath air.", "fol": "", "prediction": ["all x.(Mammal(x) -> (Animal(x) & HasLungs(x) & BreathesAir(x)))"]}
{"id": "eqasc_train_2469", "nl": "Mammals breathe with their lungs", "fol": "", "prediction": ["all x.(Mammal(x) -> BreathesWithLungs(x))"]}
{"id": "eqasc_train_2470", "nl": "Life is Breath and Breath Healing.", "fol": "", "prediction": ["all x.(Life(x) -> (Breath(x) & BreathHealing(x)))"]}
{"id": "eqasc_train_2471", "nl": "Land animals use lungs for life .", "fol": "", "prediction": ["all x y.((LandAnimal(x) & Lung(y)) -> UsesForLife(x,y))"]}
{"id": "eqasc_train_2472", "nl": "Inside of the lungs are little sacks called alveoli.", "fol": "", "prediction": ["all x.(Lungs(x) -> SmallSack(x))"]}
{"id": "eqasc_train_2473", "nl": "Alveoli are used for breathing air by land animals.", "fol": "", "prediction": ["all x.(Alveoli(x) -> BreathesAir(x))"]}
{"id": "eqasc_train_2474", "nl": "Elephants are the largest land animals.", "fol": "", "prediction": ["all x.(Elephant(x) -> LargestLandAnimal(x))"]}
{"id": "eqasc_train_2475", "nl": "Most fungi get organic compounds from dead organisms.", "fol": "", "prediction": ["all x.(Fungus(x) -> (GetsOrganicCompounds(x) & FromDeadOrganisms(x)))"]}
{"id": "eqasc_train_2476", "nl": "Fungi include yeasts, molds, and fleshy fungi.", "fol": "", "prediction": ["all x.(Fungus(x) -> (Yeast(y) | Mold(y) | FleshyFungus(x)))"]}
{"id": "eqasc_train_2477", "nl": "Molds get organic compound from dead organisms.", "fol": "", "prediction": ["all x.(Mold(x) -> (GetsOrganicCompound(x) & FromDeadOrganisms(x)))"]}
{"id": "eqasc_train_2478", "nl": "Molds and yeast are fungi.", "fol": "", "prediction": ["all x.((Mold(x) | Yeast(x)) -> Fungus(x))"]}
{"id": "eqasc_train_2479", "nl": "mold gets organic compounds from dead organisms", "fol": "", "prediction": ["all x y z.((Mold(x) & OrganicCompound(y) & DeadOrganism(z)) -> GetsFrom(x,y,z))"]}
{"id": "eqasc_train_2480", "nl": "Fungi and bacteria feed on the dead fibers.", "fol": "", "prediction": ["all x y.((Fungus(x) & Bacteria(y)) -> FeedsOnDeadFibers(x,y))"]}
{"id": "eqasc_train_2481", "nl": "bacteria feed on dead organisms", "fol": "", "prediction": ["all x y.((Bacteria(x) & Organism(y)) -> FeedsOn(x,y))"]}
{"id": "eqasc_train_2482", "nl": "Proteins are complex organic compounds.", "fol": "", "prediction": ["all x.(Protein(x) -> ComplexOrganicCompound(x))"]}
{"id": "eqasc_train_2483", "nl": "Most fungi get proteins from dead organisms.", "fol": "", "prediction": ["all x.(Fungus(x) -> GetProteinsFromDeadOrganisms(x))"]}
{"id": "eqasc_train_2484", "nl": "Many fungi decompose dead organic matter such as leaves, wood, feces, etc.", "fol": "", "prediction": ["all x.(Fungus(x) -> (DecomposesDeadOrganicMatter(x) & (Leaves(x) | Wood(x) | Feces(x))))"]}
{"id": "eqasc_train_2485", "nl": "Fungi eat dead matter such as leaves", "fol": "", "prediction": ["all x y.((Fungus(x) & DeadMatter(y)) -> Eats(x,y))"]}
{"id": "eqasc_train_2486", "nl": "Mushrooms and molds are fungi.", "fol": "", "prediction": ["all x.((Mushroom(x) | Mold(x)) -> Fungus(x))"]}
{"id": "eqasc_train_2487", "nl": "mushrooms can get organic compounds from dead organisms", "fol": "", "prediction": ["all x y.((Mushroom(x) & DeadOrganism(y)) -> CanGetOrganicCompoundsFrom(x,y))"]}
{"id": "eqasc_train_2488", "nl": "Molds are microscopic fungi.", "fol": "", "prediction": ["all x.(Mold(x) -> MicroscopicFungus(x))"]}
{"id": "eqasc_train_2489", "nl": "Molds get organic compounds from dead organisms.", "fol": "", "prediction": ["all x.(Mold(x) -> (GetsOrganicCompounds(x) & FromDeadOrganisms(x)))"]}
{"id": "eqasc_train_2490", "nl": "Bacteria, fungi and plants can be used to break down organic compounds or extract metals.", "fol": "", "prediction": ["all x y.((Bacteria(x) | Fungi(x) | Plant(x)) -> (BreaksDownOrganicCompounds(x) | ExtractsMetals(x)))"]}
{"id": "eqasc_train_2491", "nl": "Organic compounds are broken down by plants.", "fol": "", "prediction": ["all x y.((OrganicCompound(x) & Plant(y)) -> BrokenDownBy(x,y))"]}
{"id": "eqasc_train_2492", "nl": "Moulds, yeasts, rusts, smuts, mildews, and mushrooms are all types of fungi.", "fol": "", "prediction": ["all x.((Mould(x) | Yeast(x) | Rust(x) | Smut(x) | Mildew(x) | Mushroom(x)) -> Fungus(x))"]}
{"id": "eqasc_train_2493", "nl": "mildew gets organic compounds from dead organisms", "fol": "", "prediction": ["all x y.((Mildew(x) & DeadOrganism(y)) -> GetsOrganicCompoundsFrom(x,y))"]}
{"id": "eqasc_train_2494", "nl": "Fungi are heterotrophs that utilize organic matter.", "fol": "", "prediction": ["all x.(Fungus(x) -> (Heterotroph(x) & UtilizesOrganicMatter(x)))"]}
{"id": "eqasc_train_2495", "nl": "heterotrophs utilize organic compounds from dead organisms", "fol": "", "prediction": ["all x y.((Heterotroph(x) & OrganicCompound(y)) -> UtilizesDeadOrganisms(x,y))"]}
{"id": "eqasc_train_2496", "nl": "Shelf fungi are often found on dead and decaying trees.", "fol": "", "prediction": ["all x.(ShelfFungus(x) -> (FoundOnDeadTrees(x) & FoundOnDecayingTrees(x)))"]}
{"id": "eqasc_train_2497", "nl": "some fungi live on decaying trees", "fol": "", "prediction": ["exists x.(Fungus(x) & LivesOnDecayingTrees(x))"]}
{"id": "eqasc_train_2498", "nl": "Decomposers decay dead organisms or their wastes.", "fol": "", "prediction": ["all x.(Decomposer(x) -> (DecaysDeadOrganisms(x) | DecaysWastes(x)))"]}
{"id": "eqasc_train_2499", "nl": "Most fungi get organic compounds from decomposers", "fol": "", "prediction": ["all x.(Fungus(x) -> (GetsOrganicCompoundsFromDecomposers(x) & Decomposers(x)))"]}
{"id": "eqasc_train_2500", "nl": "All fungi are obligate heterotrophs.", "fol": "", "prediction": ["all x.(Fungus(x) -> ObligatoryHeterotroph(x))"]}
{"id": "eqasc_train_2501", "nl": "obligate heterotrophs get organic compounds from dead organisms.", "fol": "", "prediction": ["all x.((Hydrotroph(x) & Obligatory(x)) -> GetsOrganicCompoundsFromDeadOrganisms(x))"]}
{"id": "eqasc_train_2502", "nl": "Heterotrophs get food by eating other living things.", "fol": "", "prediction": ["all x.(Heterotroph(x) -> (GetsFoodByEatingLivingThings(x)))"]}
{"id": "eqasc_train_2503", "nl": "fish eat other living things", "fol": "", "prediction": ["all x y.((Fish(x) & LivingThing(y)) -> Eats(x,y))"]}
{"id": "eqasc_train_2504", "nl": "Animals are heterotrophs, or other-feeders.", "fol": "", "prediction": ["all x.(Animal(x) -> (Heterotroph(x) | OtherFeeder(x)))"]}
{"id": "eqasc_train_2505", "nl": "Animals get food by eating other living things.", "fol": "", "prediction": ["all x.(Animal(x) -> (GetsFood(x) & EatsLivingThings(x)))"]}
{"id": "eqasc_train_2506", "nl": "All animals are heterotrophic.", "fol": "", "prediction": ["all x.(Animal(x) -> Heterotrophic(x))"]}
{"id": "eqasc_train_2507", "nl": "all animals get food by eating other living things", "fol": "", "prediction": ["all x.(Animal(x) -> (GetsFoodByEatingLivingThings(x) & EatsLivingThings(x)))"]}
{"id": "eqasc_train_2508", "nl": "animals get food by eating other living things.", "fol": "", "prediction": ["all x.(Animal(x) -> (EatsLivingThings(x) & GetsFood(x)))"]}
{"id": "eqasc_train_2509", "nl": "Animals get food by eating other living things", "fol": "", "prediction": ["all x y.((Animal(x) & LivingThing(y)) -> GetsFoodByEating(x,y))"]}
{"id": "eqasc_train_2510", "nl": "Great egrets are heterotrophs .", "fol": "", "prediction": ["all x.(GreatEgret(x) -> Heterotroph(x))"]}
{"id": "eqasc_train_2511", "nl": "Great egrets get food by eating other livings things.", "fol": "", "prediction": ["all x.(GreatEgret(x) -> (GetsFoodByEatingOtherLivings(x)))"]}
{"id": "eqasc_train_2512", "nl": "all fish get food by eating other living things", "fol": "", "prediction": ["all x.(Fish(x) -> (GetsFoodByEatingLivingThings(x) & EatsLivingThings(x)))"]}
{"id": "eqasc_train_2513", "nl": "fish get food by eating other living things", "fol": "", "prediction": ["all x y.((Fish(x) & LivingThing(y)) -> GetsFoodByEating(x,y))"]}
{"id": "eqasc_train_2514", "nl": "Some arthropods have special excretory structures.", "fol": "", "prediction": ["exists x.(Arthropod(x) & ExcretoryStructure(x))"]}
{"id": "eqasc_train_2515", "nl": "Insects are the largest group of arthropods.", "fol": "", "prediction": ["all x.(Insect(x) -> Arthropod(x))"]}
{"id": "eqasc_train_2516", "nl": "Some insects have special excrectory structures.", "fol": "", "prediction": ["exists x.(Insect(x) & ExcrectoryStructure(x))"]}
{"id": "eqasc_train_2517", "nl": "An arthropod is a member of the Phylum Arthropoda.", "fol": "", "prediction": ["all x.(Arthropod(x) -> MemberOfPhylumArthropoda(x))"]}
{"id": "eqasc_train_2518", "nl": "phylum arthropoda have special excretory structures ", "fol": "", "prediction": ["all x.(PhylumArthropoda(x) -> HasSpecialExcretoryStructures(x))"]}
{"id": "eqasc_train_2519", "nl": "Crustaceans are, like insects, arthropods.", "fol": "", "prediction": ["all x.(Crustacean(x) -> (Arthropod(x) & LikeInsects(x)))"]}
{"id": "eqasc_train_2520", "nl": "Crustaceans and insects have special excretory structures.", "fol": "", "prediction": ["all x.((Crustacean(x) | Insect(x)) -> HasSpecialExcretoryStructures(x))"]}
{"id": "eqasc_train_2521", "nl": "All insects are arthropods.", "fol": "", "prediction": ["all x.(Insect(x) -> Arthropod(x))"]}
{"id": "eqasc_train_2522", "nl": "Insects have special excretory structures.", "fol": "", "prediction": ["all x.(Insect(x) -> HasSpecialExcretoryStructures(x))"]}
{"id": "eqasc_train_2523", "nl": "some insects have special excretory structures", "fol": "", "prediction": ["exists x.(Insect(x) & HasSpecialExcretoryStructures(x))"]}
{"id": "eqasc_train_2524", "nl": "Arthropods contain jointed appendages.", "fol": "", "prediction": ["all x.(Arthropod(x) -> ContainsJointedAppendages(x))"]}
{"id": "eqasc_train_2525", "nl": "Some animals with jointed appendages have special excretory structures", "fol": "", "prediction": ["exists x.(Animal(x) & JointedAppendages(x) & ExcretoryStructure(x))"]}
{"id": "eqasc_train_2526", "nl": "An ant and a lobster are both arthropods.", "fol": "", "prediction": ["all x y.((Ant(x) & Lobster(y)) -> Arthropod(x))"]}
{"id": "eqasc_train_2527", "nl": "Lobsters have special excretory structures.", "fol": "", "prediction": ["all x.(Lobster(x) -> HasSpecialExcretoryStructures(x))"]}
{"id": "eqasc_train_2528", "nl": "some insects have special excretory structures.", "fol": "", "prediction": ["exists x.(Insect(x) & HasSpecialExcretoryStructures(x))"]}
{"id": "eqasc_train_2529", "nl": "Terrestrial arthropods have an excretory system that conserves water and eliminates waste.", "fol": "", "prediction": ["all x.(TerrestrialArthropod(x) -> (ExcretorySystem(x) & ConservesWater(x) & EliminatesWaste(x)))"]}
{"id": "eqasc_train_2530", "nl": "Some animals have excretory structures that conserve water and elminate waste.", "fol": "", "prediction": ["exists x.(Animal(x) & ExcretoryStructures(x) & ConservesWater(x) & ElminatesWaste(x))"]}
{"id": "eqasc_train_2531", "nl": "Plants are the major producers in terrestrial biomes.", "fol": "", "prediction": ["all x.(Plant(x) -> MajorProducerInTerrestrialBiomes(x))"]}
{"id": "eqasc_train_2532", "nl": "Among the desert biomes, there are different kinds.", "fol": "", "prediction": ["exists x.(DesertBiome(x) & DifferentTypes(x))"]}
{"id": "eqasc_train_2533", "nl": "Plants are the major producers in the desert", "fol": "", "prediction": ["all x y.((Plant(x) & Desert(y)) -> MajorProducerInDesert(x,y))"]}
{"id": "eqasc_train_2534", "nl": "Biomes are global ecosystems.", "fol": "", "prediction": ["all x.(Biome(x) -> GlobalEcosystem(x))"]}
{"id": "eqasc_train_2535", "nl": "Plants are the major producers in terrestrial ecosystems", "fol": "", "prediction": ["all x y.((Plant(x) & TerrestrialEcosystem(y)) -> MajorProducerIn(x,y))"]}
{"id": "eqasc_train_2536", "nl": "Plants are producers are consumers are omnivores .", "fol": "", "prediction": ["all x y.((Plant(x) & Consumer(y)) -> Omnivore(x))"]}
{"id": "eqasc_train_2537", "nl": "consumers are omnivores in terrestrial biomes", "fol": "", "prediction": ["all x y.((Consumer(x) & TerrestrialBiome(y)) -> Omnivore(x,y))"]}
{"id": "eqasc_train_2538", "nl": "Terrestrial biomes are defined by their plant life.", "fol": "", "prediction": ["all x.(TerrestrialBiome(x) -> (DefinitedByPlantLife(x)))"]}
{"id": "eqasc_train_2539", "nl": "Plants are the major producers in biomes defined by their plant life", "fol": "", "prediction": ["all x y.((Plant(x) & Biome(y)) -> (MainProducer(x,y) & DefinishedByPlantLife(x)))"]}
{"id": "eqasc_train_2540", "nl": "Green plants are food producers.", "fol": "", "prediction": ["all x.(GreenPlant(x) -> FoodProducer(x))"]}
{"id": "eqasc_train_2541", "nl": "plants provide food for terrestrial biomes", "fol": "", "prediction": ["all x y.((Plant(x) & TerrestrialBiome(y)) -> ProvidesFoodFor(x,y))"]}
{"id": "eqasc_train_2542", "nl": "plants are the major producers in terrestrial global ecosystems", "fol": "", "prediction": ["all x.(Plant(x) -> (MainProducerInTerrestrialGlobalEcosystems(x) & MajorProducerInTerrestrialGlobalEcosystems(x)))"]}
{"id": "eqasc_train_2543", "nl": "Grasses are very distinctive plants.", "fol": "", "prediction": ["all x.(Grass(x) -> DistinctivePlant(x))"]}
{"id": "eqasc_train_2544", "nl": "Grass is a producer in terrestrial biomes.", "fol": "", "prediction": ["all x.(Grass(x) -> ProducerInTerrestrialBiomes(x))"]}
{"id": "eqasc_train_2545", "nl": "Terrestrial biome distribution is largely influenced by temperature and precipitation.", "fol": "", "prediction": ["all x.(TerrestrialBiomeDistribution(x) -> (InfluencedByTemperature(x) & InfluencedByPrecipitation(x)))"]}
{"id": "eqasc_train_2546", "nl": "Plants are the major producers in temperature and precipitation", "fol": "", "prediction": ["all x.(Plant(x) -> (ProducerInTemperature(x) & ProducerInPrecipitation(x)))"]}
{"id": "eqasc_train_2547", "nl": "bamboo can be major producers in terrestrial biomes.", "fol": "", "prediction": ["all x.(Bamboo(x) -> MajorProducerInTerrestrialBiomes(x))"]}
{"id": "eqasc_train_2548", "nl": "Biomes are ecosystems that make up the land.", "fol": "", "prediction": ["all x.(Biome(x) -> (Ecosystem(x) & MakesUpLand(x)))"]}
{"id": "eqasc_train_2549", "nl": "plants are the major producers of ecosystems that make up the land", "fol": "", "prediction": ["all x y.((Plant(x) & Land(y)) -> (ProducerOfEcosystems(x,y) & MakesUpLand(x,y)))"]}
{"id": "eqasc_train_2550", "nl": "electric devices require electrical energy to function", "fol": "", "prediction": ["all x.(ElectricDevice(x) -> RequiresElectricalEnergy(x))"]}
{"id": "eqasc_train_2551", "nl": "Computers are electronic devices that deal in pulses of electricity.", "fol": "", "prediction": ["all x.(Computer(x) -> (ElectronicDevice(x) & DealsInPulsesOfElectricity(x)))"]}
{"id": "eqasc_train_2552", "nl": "Computers require electrical energy to function", "fol": "", "prediction": ["all x.(Computer(x) -> RequiresElectricalEnergy(x))"]}
{"id": "eqasc_train_2553", "nl": "Electrical fields result from electrical devices and televisions.", "fol": "", "prediction": ["all x y.((ElectricalField(x) & ElectricalDevice(y) & Television(y)) -> ResultsFrom(x,y))"]}
{"id": "eqasc_train_2554", "nl": "televisions require electrical energy to function.", "fol": "", "prediction": ["all x.(Television(x) -> RequiresElectricalEnergy(x))"]}
{"id": "eqasc_train_2555", "nl": "Examples of such devices are PDAs, phones, and pagers.", "fol": "", "prediction": ["all x.((Device(x) & (PDA(x) | Phone(x) | Pager(x))) -> Device(x))"]}
{"id": "eqasc_train_2556", "nl": "PDAs require electrical energy to function", "fol": "", "prediction": ["all x.(PDA(x) -> RequiresElectricalEnergy(x))"]}
{"id": "eqasc_train_2557", "nl": "Electric devices require the flow of electrons", "fol": "", "prediction": ["all x.(ElectricDevice(x) -> RequiresFlowOfElectrons(x))"]}
{"id": "eqasc_train_2558", "nl": "electric devices require power plants to function", "fol": "", "prediction": ["all x.(ElectricDevice(x) -> RequiresPowerPlant(x))"]}
{"id": "eqasc_train_2559", "nl": "Ordinary phone is also a mobile device.", "fol": "", "prediction": ["all x.(OrdinaryPhone(x) -> MobileDevice(x))"]}
{"id": "eqasc_train_2560", "nl": "phones require electrical energy to function", "fol": "", "prediction": ["all x.(Phone(x) -> RequiresElectricalEnergy(x))"]}
{"id": "eqasc_train_2561", "nl": "Lie detectors are electrical or mechanical devices.", "fol": "", "prediction": ["all x.(LieDetector(x) -> (ElectricalDevice(x) | MechanicalDevice(x)))"]}
{"id": "eqasc_train_2562", "nl": "lie detectors require electrical energy to function", "fol": "", "prediction": ["all x.(LieDetector(x) -> RequiresElectricalEnergy(x))"]}
{"id": "eqasc_train_2563", "nl": "devices require kinetic energy to function", "fol": "", "prediction": ["all x.(Device(x) -> RequiresKineticEnergy(x))"]}
{"id": "eqasc_train_2564", "nl": "Earthworms are important deposit feeders that help form and enrich soil.", "fol": "", "prediction": ["all x.(Earthworm(x) -> (ImportantDepositFeeder(x) & HelpsFormSoil(x) & EnrichSoil(x)))"]}
{"id": "eqasc_train_2565", "nl": "annelids enrich the soil", "fol": "", "prediction": ["all x.(Annelid(x) -> EnrichSoil(x))"]}
{"id": "eqasc_train_2566", "nl": "Deposit feeders ingest sediment and extract food particles.", "fol": "", "prediction": ["all x.(DepositFeeder(x) -> (IngestsSediment(x) & ExtractsFoodParticles(x)))"]}
{"id": "eqasc_train_2567", "nl": "Earthworms ingest sediment and extract food particles from soil", "fol": "", "prediction": ["all x y.((Earthworm(x) & Sediment(y)) -> (Ingests(x,y) & ExtractsFoodParticlesFromSoil(x)))"]}
{"id": "eqasc_train_2568", "nl": "Life Cycle Earthworms are hermaphrodites.", "fol": "", "prediction": ["all x.(Earthworm(x) -> Hermaphrodite(x))"]}
{"id": "eqasc_train_2569", "nl": "A hermaphrodite is an important deposit feeder that helps form and enrich soil.", "fol": "", "prediction": ["all x.(Hermaphrodite(x) -> (ImportantDepositFeeder(x) & HelpsFormSoil(x) & HelpsEnrichSoil(x)))"]}
{"id": "eqasc_train_2570", "nl": "Earthworms by Casey Earthworms are invertebrates.", "fol": "", "prediction": ["all x.(Earthworm(x) -> (CaseyEarthworms(x) & Invertebrate(x)))"]}
{"id": "eqasc_train_2571", "nl": "Invertebrates can be deposit feeders.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> DepositFeeder(x))"]}
{"id": "eqasc_train_2572", "nl": "Deposit feeders ingest sediment and then extract the food.", "fol": "", "prediction": ["all x.(DepositFeeder(x) -> (IngestsSediment(x) & ExtractsFood(x)))"]}
{"id": "eqasc_train_2573", "nl": "Earthworms ingest sediment to then help form and enrich soil.", "fol": "", "prediction": ["all x.(Earthworm(x) -> (IngestsSediment(x) & HelpsFormSoil(x) & HelpsEnrichSoil(x)))"]}
{"id": "eqasc_train_2574", "nl": "Good soil grows good plants.", "fol": "", "prediction": ["all x.(GoodSoil(x) -> GrowsGoodPlants(x))"]}
{"id": "eqasc_train_2575", "nl": "earthworms help plants grow", "fol": "", "prediction": ["all x y.((Earthworm(x) & Plant(y)) -> HelpsGrow(x,y))"]}
{"id": "eqasc_train_2576", "nl": "Earthworms ingest sediment to get food particles which enriches soil", "fol": "", "prediction": ["all x y z.((Earthworm(x) & Sediment(y) & Soil(z)) -> (Ingests(x,y) & GetsFoodParticles(x,z) & EnrichesSoil(x,z)))"]}
{"id": "eqasc_train_2577", "nl": "Earthworms are perhaps the most familiar decomposer.", "fol": "", "prediction": ["all x.(Earthworm(x) -> (FamiliarDecomposer(x) | FamiliarDecomposer(x)))"]}
{"id": "eqasc_train_2578", "nl": "decomposers can help form and enrich soil", "fol": "", "prediction": ["all x.(Decomposer(x) -> (HelpsFormSoil(x) & EnrichSoil(x)))"]}
{"id": "eqasc_train_2579", "nl": "Earthworms ingest sediment and extract food particles which enriches soil", "fol": "", "prediction": ["all x y.((Earthworm(x) & Sediment(y)) -> (Ingests(x,y) & ExtractsFoodParticles(x) & EnrichesSoil(x)))"]}
{"id": "eqasc_train_2580", "nl": "Tulips perform best in a sandy, organically enriched soil.", "fol": "", "prediction": ["all x.(Tullip(x) -> (PerformsBestInSandyOrganicallyEnrichedSoil(x)))"]}
{"id": "eqasc_train_2581", "nl": "Earthworms are important deposit feeders that help form and add organic material to soil", "fol": "", "prediction": ["all x.(Earthworm(x) -> (ImportantDepositFeeder(x) & HelpsFormOrganicMaterial(x) & HelpsAddOrganicMaterialToSoil(x)))"]}
{"id": "eqasc_train_2582", "nl": "For instance, in the forest, plants use sunlight and soil nutrients to grow.", "fol": "", "prediction": ["all x y.((Forest(x) & Plant(y)) -> (UsesSunlight(y) & UsesSoilNutrients(y)))"]}
{"id": "eqasc_train_2583", "nl": "Earthworms are terrific for plants and are important deposit feeders", "fol": "", "prediction": ["all x.(Earthworm(x) -> (TreasonableForPlants(x) & ImportantDepositFeeder(x)))"]}
{"id": "eqasc_train_2584", "nl": "earthworms ingest sediment and extract food particles to help form and enrich soil", "fol": "", "prediction": ["all x y.((Earthworm(x) & Sediment(y)) -> (Ingests(x,y) & ExtractsFoodParticles(x) & HelpsFormSoil(x) & EnrichSoil(x)))"]}
{"id": "eqasc_train_2585", "nl": "Earth stands for soil, dust or ground.", "fol": "", "prediction": ["all x.(Earth(x) -> (SitsForSoil(x) | StandsForDust(x) | StandsForGround(x)))"]}
{"id": "eqasc_train_2586", "nl": "Earthworms are important deposit feeders that help form and enrich earth.", "fol": "", "prediction": ["all x.(Earthworm(x) -> (ImportantDepositFeeder(x) & HelpsFormAndEnrichEarth(x)))"]}
{"id": "eqasc_train_2587", "nl": "earthworm are important for plants", "fol": "", "prediction": ["all x.(Earthworm(x) -> ImportantForPlants(x))"]}
{"id": "eqasc_train_2588", "nl": "vinegar can cause harm to the eyes", "fol": "", "prediction": ["all x.(Vinaigrette(x) -> CausesHarmToEyes(x))"]}
{"id": "eqasc_train_2589", "nl": "Ingredients: Habanero Peppers, Vinegar, Salt, Cider Vinegar.", "fol": "", "prediction": ["Ingredients: HabaneroPeppers, Vinegar,Salt,CiderVinegar."]}
{"id": "eqasc_train_2590", "nl": "Ingredients can be a mild eye irritant", "fol": "", "prediction": ["all x.(Ingredient(x) -> (MildEyeIrritating(x) & MildEyeIrritating(x)))"]}
{"id": "eqasc_train_2591", "nl": "Eyes: The eyes and their surrounding area are the most fragile part of the face.", "fol": "", "prediction": ["all x.(Eyes(x) -> (FragilePartOfFace(x) & Eyes(x) & SurroundingArea(x)))"]}
{"id": "eqasc_train_2592", "nl": "vinegar can cause harm to the most fragile part of the face.", "fol": "", "prediction": ["all x.(Vinaigar(x) -> CausesHarmToFragilePartOfFace(x))"]}
{"id": "eqasc_train_2593", "nl": "Vinegar is a weak acid (3.5 pH).", "fol": "", "prediction": ["all x.(Vinegar(x) -> (WeakAcid(x,3.5) & PH(x,5)))"]}
{"id": "eqasc_train_2594", "nl": "Acids can cause harm to the eyes", "fol": "", "prediction": ["all x.(Acid(x) -> CausesHarmToEyes(x))"]}
{"id": "eqasc_train_2595", "nl": "A dill pickle absorbs the vinegar it is soaked in.", "fol": "", "prediction": ["all x.(DillPickle(x) -> AbsorbsVinaigrette(x))"]}
{"id": "eqasc_train_2596", "nl": "dill pickles can cause harm to the eyes", "fol": "", "prediction": ["all x.(DillPickle(x) -> CausesHarmToEyes(x))"]}
{"id": "eqasc_train_2597", "nl": "Vinegar is dilute acetic acid.", "fol": "", "prediction": ["all x.(Vinegar(x) -> DiluteAcid(x))"]}
{"id": "eqasc_train_2598", "nl": "Acetic acid can cause harm to the eyes.", "fol": "", "prediction": ["all x.(AceticAcid(x) -> CausesHarmToEyes(x))"]}
{"id": "eqasc_train_2599", "nl": "It is this bacteria which turns alcohol into acetic acid, the main component of vinegar.", "fol": "", "prediction": ["all x.((Bacteria(x) & TurnsAlcoholIntoAceticAcid(x)) -> MainComponentOfVinaigore(x))"]}
{"id": "eqasc_train_2600", "nl": "acetic acid can cause harm to the eyes", "fol": "", "prediction": ["all x.(AceticAcid(x) -> CausesHarmToEyes(x))"]}
{"id": "eqasc_train_2601", "nl": "Vinegar, battery acid, and wine are acids.", "fol": "", "prediction": ["all x.((Vinegar(x) | BatteryAcid(x) | Wine(x)) -> Acid(x))"]}
{"id": "eqasc_train_2602", "nl": "acid can cause harm to the eyes", "fol": "", "prediction": ["all x.(Acid(x) -> CausesHarmToEyes(x))"]}
{"id": "eqasc_train_2603", "nl": "Humans see with our eyes.", "fol": "", "prediction": ["all x.(Human(x) -> SeesWithEyes(x))"]}
{"id": "eqasc_train_2604", "nl": "vinegar can harm human sight", "fol": "", "prediction": ["all x.(Vinaigrette(x) -> CanHarmHumanSight(x))"]}
{"id": "eqasc_train_2605", "nl": "Acids can cause harm to the eyes.", "fol": "", "prediction": ["all x.(Acid(x) -> CausesHarmToEyes(x))"]}
{"id": "eqasc_train_2606", "nl": "Inside the eye, at the back, is the retina.", "fol": "", "prediction": ["all x.((Eye(x) & Eye(x) & Eye(x) & Eye(x) & Eye(x) & Eye(x) & Eye(x) & Eye(x)) -> Retina(x))"]}
{"id": "eqasc_train_2607", "nl": "vinegar can cause harm to the retina", "fol": "", "prediction": ["all x.(Vinaigrette(x) -> CausesHarmToRetinal(x))"]}
{"id": "eqasc_train_2608", "nl": "Rice Vinegar Vinegar made from fermented rice.", "fol": "", "prediction": ["all x.(RiceVinegar(x) -> MadeFromFermentedRice(x))"]}
{"id": "eqasc_train_2609", "nl": "Something made from fermented rice can cause harm to the eyes", "fol": "", "prediction": ["all x.((MadeFromFermentedRice(x) & MadeFromFermentedRice(x)) -> CausesHarmToEyes(x))"]}
{"id": "eqasc_train_2610", "nl": "Throughout vinegar application, wear protective eye shields.", "fol": "", "prediction": ["all x.((Vinaigrette(x) & WearProtectiveEyeShields(x)) -> Wears(x))"]}
{"id": "eqasc_train_2611", "nl": "Avoid harming your eyes by wearing a shield", "fol": "", "prediction": ["all x.((WearShield(x) & AvoidHarmingEyes(x)) -> WearsShield(x))"]}
{"id": "eqasc_train_2612", "nl": "Hair is a fiber that is found only in mammals.", "fol": "", "prediction": ["all x.(Hair(x) -> (Fiber(x) & FoundInMammals(x)))"]}
{"id": "eqasc_train_2613", "nl": "humans have hair", "fol": "", "prediction": ["all x.(Human(x) -> HasHair(x))"]}
{"id": "eqasc_train_2614", "nl": "Mammals are vertebrates with fur or hair.", "fol": "", "prediction": ["all x.(Mammal(x) -> (Vertebrate(x) & (HasFur(x) | HasHair(x))))"]}
{"id": "eqasc_train_2615", "nl": "mammals are vertebrates", "fol": "", "prediction": ["all x.(Mammal(x) -> Vertebrate(x))"]}
{"id": "eqasc_train_2616", "nl": "Mammals have fur or hair.", "fol": "", "prediction": ["all x.(Mammal(x) -> (HasFur(x) | HasHair(x)))"]}
{"id": "eqasc_train_2617", "nl": "Fur is a fiber that is found only in mammals.", "fol": "", "prediction": ["all x.(Fur(x) -> (Fiber(x) & FoundInMammals(x)))"]}
{"id": "eqasc_train_2618", "nl": "Bats have hair like all mammals so they can stay warm.", "fol": "", "prediction": ["all x.(Bat(x) -> (HasHair(x) & AllMammal(x) & StaysWarm(x)))"]}
{"id": "eqasc_train_2619", "nl": "fibers on mammals keep them warm", "fol": "", "prediction": ["all x y.((Mammal(x) & Mammal(y)) -> (FibersOn(x,y) & KeepsWarm(x,y)))"]}
{"id": "eqasc_train_2620", "nl": "Hair is largely made of keratin, a protein that contains a lot of the amino acid cystine .", "fol": "", "prediction": ["all x y.((Hair(x) & Keratin(y)) -> (MadeOf(x,y) & ContainsLotsOf(x,y)))"]}
{"id": "eqasc_train_2621", "nl": "mammals contain keratin", "fol": "", "prediction": ["all x.(Mammal(x) -> ContainsKeratin(x))"]}
{"id": "eqasc_train_2622", "nl": "Hair grows from a hair bulb under the skin.", "fol": "", "prediction": ["all x.(Hair(x) -> GrowsFromHairBulb(x))"]}
{"id": "eqasc_train_2623", "nl": "A fiber found only in mammals grows from a bulb under the skin", "fol": "", "prediction": ["all x y.((Fiber(x) & FoundInMammals(x) & Bulb(y) & UnderSkin(y)) -> GrowsFrom(x,y))"]}
{"id": "eqasc_train_2624", "nl": "All mammals have fur or hair.", "fol": "", "prediction": ["all x.(Mammal(x) -> (HasFur(x) | HasHair(x)))"]}
{"id": "eqasc_train_2625", "nl": "fur is unique to mammals", "fol": "", "prediction": ["all x.(Fur(x) -> UniqueToMammals(x))"]}
{"id": "eqasc_train_2626", "nl": "Mammals are animals that have hair, are warm-blooded, and nourish their young with milk.", "fol": "", "prediction": ["all x.(Mammal(x) -> (HasHair(x) & WarmBlooded(x) & NutriteYoungWithMilk(x)))"]}
{"id": "eqasc_train_2627", "nl": "hairy animals nourish young with milk", "fol": "", "prediction": ["all x.(HairyAnimal(x) -> (NourishesYoungWithMilk(x) & YoungWithMilk(x)))"]}
{"id": "eqasc_train_2628", "nl": "Animals can be classified into mammals, reptiles, birds.", "fol": "", "prediction": ["all x.(Animal(x) -> (Mammal(x) | Reptile(x) | Bird(x)))"]}
{"id": "eqasc_train_2629", "nl": "Hair is a fiber that is not found in reptiles or birds", "fol": "", "prediction": ["all x.(Hair(x) -> (Fiber(x) & -FindsInReptilesOrBirds(x)))"]}
{"id": "eqasc_train_2630", "nl": "All mammals are warm-blooded.", "fol": "", "prediction": ["all x.(Mammal(x) -> WarmBlooded(x))"]}
{"id": "eqasc_train_2631", "nl": "Hair is a fiber that is found only in warm-blooded animals.", "fol": "", "prediction": ["all x.(Hair(x) -> (Fiber(x) & FoundInWarmBloodedAnimals(x)))"]}
{"id": "eqasc_train_2632", "nl": "Bats are mammals that fly.", "fol": "", "prediction": ["all x.(Bat(x) -> (Mammal(x) & Flies(x)))"]}
{"id": "eqasc_train_2633", "nl": "Bats have Hair which is a fiber", "fol": "", "prediction": ["all x.(Bat(x) -> (HasHair(x) & Fiber(x)))"]}
{"id": "eqasc_train_2634", "nl": "BEAR A bear is a big, furry mammal.", "fol": "", "prediction": ["all x.(BEAR(x) -> (BigFurryMammal(x) & Mammal(x)))"]}
{"id": "eqasc_train_2635", "nl": "bears have hair", "fol": "", "prediction": ["all x.(Bear(x) -> HasHair(x))"]}
{"id": "eqasc_train_2636", "nl": "Hairs and fibers are easily shed.", "fol": "", "prediction": ["all x.((Hair(x) | Fiber(x)) -> ShedsEasily(x))"]}
{"id": "eqasc_train_2637", "nl": "Easily shed fibers are found only in mammals", "fol": "", "prediction": ["all x.(EasilyShedFibers(x) -> FoundInMammals(x))"]}
{"id": "eqasc_train_2638", "nl": "Hair has turned auburn red.", "fol": "", "prediction": ["all x.(Hair(x) -> AuburnRed(x))"]}
{"id": "eqasc_train_2639", "nl": "Something that can be auburn is a fiber found only in mammals", "fol": "", "prediction": ["all x.((Auburn(x) -> Fiber(x)) & FoundInMammals(x))"]}
{"id": "eqasc_train_2640", "nl": "Sebaceous glands associated with hair follicles protect the skin of mammals.", "fol": "", "prediction": ["all x y.((SebaceousGlands(x) & HairFollicles(y)) -> ProtectsSkinOfMammals(x,y))"]}
{"id": "eqasc_train_2641", "nl": "Fiber follicles protect mammal skin", "fol": "", "prediction": ["all x y.((FilmFollicle(x) & Mammal(y)) -> ProtectsSkin(x,y))"]}
{"id": "eqasc_train_2642", "nl": "a car engine usually converts gasoline into motion and heat through combustion", "fol": "", "prediction": ["all x y.((CarEngine(x) & Gasoline(y)) -> ConvertsToMotionAndHeat(x,y))"]}
{"id": "eqasc_train_2643", "nl": "Internal combustion engines create friction.", "fol": "", "prediction": ["all x.(InternalCombustionEngine(x) -> CreatesFriction(x))"]}
{"id": "eqasc_train_2644", "nl": "Car engines convert gasoline into friction", "fol": "", "prediction": ["all x.(CarEngine(x) -> ConvertsGasolineToFriction(x))"]}
{"id": "eqasc_train_2645", "nl": "Combustion is a type of oxidation reaction.", "fol": "", "prediction": ["all x.(Combustion(x) -> OxidationReaction(x))"]}
{"id": "eqasc_train_2646", "nl": "a car engine usually converts gasoline into motion and heat through a type of oxidation reaction", "fol": "", "prediction": ["all x y.((CarEngine(x) & Gasoline(y)) -> ConvertsToMotionAndHeat(x,y))"]}
{"id": "eqasc_train_2647", "nl": "Energy pollution Cars operate mainly on gasoline, a fossil fuel.", "fol": "", "prediction": ["all x.((Car(x) & Gasoline(x)) -> OperatesOn(x,FossilFuel))"]}
{"id": "eqasc_train_2648", "nl": "Car engines usually use a fossil fuel to run. ", "fol": "", "prediction": ["all x.(CarEngine(x) -> UsesFossilFuel(x))"]}
{"id": "eqasc_train_2649", "nl": "Gasoline vapors are highly combustible.", "fol": "", "prediction": ["all x.(GasolineVapor(x) -> HighlyCombustible(x))"]}
{"id": "eqasc_train_2650", "nl": "Car engines convert highly combustible vapors into motion.", "fol": "", "prediction": ["all x.(CarEngine(x) -> ConvertsCombustibleVaporsToMotion(x))"]}
{"id": "eqasc_train_2651", "nl": "Material is classified as a combustible liquid.", "fol": "", "prediction": ["all x.((Material(x) & CombustibleLiquid(x)) -> ClassifiedAs(x,CombustibleLiquid))"]}
{"id": "eqasc_train_2652", "nl": "a car engine uses gasoline as a liquid fuel", "fol": "", "prediction": ["all x y.((CarEngine(x) & Gasoline(y)) -> UsesAsLiquidFuel(x,y))"]}
{"id": "eqasc_train_2653", "nl": "An internal combustion engine burns a mixture of fuel and air.", "fol": "", "prediction": ["all x.(InternalCombustionEngine(x) -> BurnsFuelAndAirMixture(x))"]}
{"id": "eqasc_train_2654", "nl": "A car engine burns fuel and air to create motion.", "fol": "", "prediction": ["all x.(CarEngine(x) -> (BurnsFuel(x) & BurnsAir(x) & CreatesMotion(x)))"]}
{"id": "eqasc_train_2655", "nl": "Oxygen acts as an aid to combustion.", "fol": "", "prediction": ["all x.(Oxygen(x) -> AidToCombustion(x))"]}
{"id": "eqasc_train_2656", "nl": "Oxygen acts as an aid to a car engine converting gasoline into motion and heat.", "fol": "", "prediction": ["all x y.((Oxygen(x) & CarEngine(y)) -> (AidToConvertGasoline(x,y) & MotionAndHeat(y)))"]}
{"id": "eqasc_train_2657", "nl": "Gasoline is made up of hydrocarbons.", "fol": "", "prediction": ["all x.(Gasoline(x) -> MadeUpOfHydrogens(x))"]}
{"id": "eqasc_train_2658", "nl": "A car engine converts a fuel of hydrocarbons into motion through combustion.", "fol": "", "prediction": ["all x y.((CarEngine(x) & Fuel(y)) -> ConvertsToMotion(x,y))"]}
{"id": "eqasc_train_2659", "nl": "Combustion is never complete in gasoline and diesel engines.", "fol": "", "prediction": ["all x.((GasolineEngine(x) | DieselEngine(x)) -> -CompleteCombustion(x))"]}
{"id": "eqasc_train_2660", "nl": "Cars never completely convert gasoline into motion.", "fol": "", "prediction": ["all x.(Car(x) -> -ConvertsGasolineToMotion(x))"]}
{"id": "eqasc_train_2661", "nl": "a flashlight requires a source of electricity to produce light", "fol": "", "prediction": ["all x.(Flashlight(x) -> (RequiresElectricitySource(x) & ProducesLight(x)))"]}
{"id": "eqasc_train_2662", "nl": "Electricity flows when a battery is connected to an object like a watch, toy, or flashlight.", "fol": "", "prediction": ["all x y.((Battery(x) & (Watch(y) | Toy(y) | Flashlight(y))) -> ConnectedTo(x,y))"]}
{"id": "eqasc_train_2663", "nl": "Flashlights require batteries to produce light.", "fol": "", "prediction": ["all x.(Flashlight(x) -> RequiresBatteries(x))"]}
{"id": "eqasc_train_2664", "nl": "Good lighting helps people see steps down, rugs or other obstacles.", "fol": "", "prediction": ["all x.(GoodLighting(x) -> (HelpsSeeStepsDown(x) | HelpsSeeRubsOrObstacles(x)))"]}
{"id": "eqasc_train_2665", "nl": "flashlights help people see", "fol": "", "prediction": ["all x.(Flashlight(x) -> HelpsPeopleSee(x))"]}
{"id": "eqasc_train_2666", "nl": "Electric energy is stored in batteries.", "fol": "", "prediction": ["all x.(ElectricEnergy(x) -> StoredInBatteries(x))"]}
{"id": "eqasc_train_2667", "nl": "A flashlight requires batteries to produce light.", "fol": "", "prediction": ["all x.(Flashlight(x) -> RequiresBatteries(x))"]}
{"id": "eqasc_train_2668", "nl": "Flashlights are powered by batteries to produce light.", "fol": "", "prediction": ["all x.(Flashlight(x) -> (PoweredByBatteries(x) & ProducesLight(x)))"]}
{"id": "eqasc_train_2669", "nl": "Electrical energy is also energy.", "fol": "", "prediction": ["all x.(ElectricalEnergy(x) -> Energy(x))"]}
{"id": "eqasc_train_2670", "nl": "a flashlight requires a source of energy to produce light", "fol": "", "prediction": ["all x.(Flashlight(x) -> RequiresEnergySource(x))"]}
{"id": "eqasc_train_2671", "nl": "Batteries are a better source of DC electricity.", "fol": "", "prediction": ["all x.(Battery(x) -> BetterSourceOfDCElectricity(x))"]}
{"id": "eqasc_train_2672", "nl": "a flashlight requires batteries to produce light", "fol": "", "prediction": ["all x.(Flashlight(x) -> RequiresBatteries(x))"]}
{"id": "eqasc_train_2673", "nl": "Electricity is usually provided by batteries or AC current.", "fol": "", "prediction": ["all x.(Electricity(x) -> (Batteries(x) | ACCurrent(x)))"]}
{"id": "eqasc_train_2674", "nl": "a flashlight can use batteries to produce light", "fol": "", "prediction": ["all x.(Flashlight(x) -> (UsesBatteries(x) & ProducesLight(x)))"]}
{"id": "eqasc_train_2675", "nl": "Flashlights and remote controlled cars get their energy from batteries.", "fol": "", "prediction": ["all x y.((Flashlight(x) & RemoteControlledCar(y)) -> GetsEnergyFromBatteries(x,y))"]}
{"id": "eqasc_train_2676", "nl": "cars use electricity", "fol": "", "prediction": ["all x.(Car(x) -> UsesElectricity(x))"]}
{"id": "eqasc_train_2677", "nl": "Flashlights can help children see better.", "fol": "", "prediction": ["all x.(Flashlight(x) -> HelpsSeeBetter(x))"]}
{"id": "eqasc_train_2678", "nl": "Children see better with a source of electricity to produce light", "fol": "", "prediction": ["all x y.((Child(x) & SourceOfElectricity(y)) -> SeesBetterWith(x,y))"]}
{"id": "eqasc_train_2679", "nl": "Electric power sources are ordinary batteries.", "fol": "", "prediction": ["all x.(ElectricPowerSource(x) -> OrdinaryBatteries(x))"]}
{"id": "eqasc_train_2680", "nl": "A flashlight requires a battery to produce light", "fol": "", "prediction": ["all x.(Flashlight(x) -> RequiresBattery(x))"]}
{"id": "eqasc_train_2681", "nl": "Lanterns and flashlights are sources of light used for camping.", "fol": "", "prediction": ["all x.((Lantern(x) | Flashlight(x)) -> UsedForCamping(x))"]}
{"id": "eqasc_train_2682", "nl": "a lantern requires a source of electricity to produce light", "fol": "", "prediction": ["all x.(Lantern(x) -> (RequiresElectricitySource(x) & ProducesLight(x)))"]}
{"id": "eqasc_train_2683", "nl": "Flashlights provide the safest emergency lighting source.", "fol": "", "prediction": ["all x.(Flashlight(x) -> SafestEmergencyLightingSource(x))"]}
{"id": "eqasc_train_2684", "nl": "Emergency lighting source requires a source of electricity to produce light.", "fol": "", "prediction": ["all x.(EmergencyLightingSource(x) -> RequiresElectricitySource(x))"]}
{"id": "eqasc_train_2685", "nl": "Batteries are a very handy source of power.", "fol": "", "prediction": ["all x.(Battery(x) -> (HandyPowerSource(x) & -HandyPowerSource(x)))"]}
{"id": "eqasc_train_2686", "nl": "a flashlight requires a battery to produce light", "fol": "", "prediction": ["all x.(Flashlight(x) -> RequiresBattery(x))"]}
{"id": "eqasc_train_2687", "nl": "Battery can be tested with flashlight.", "fol": "", "prediction": ["all x.(Battery(x) -> TestedWithFlashlight(x))"]}
{"id": "eqasc_train_2688", "nl": "a battery is a source of electricity able to produce light", "fol": "", "prediction": ["all x.(Battery(x) -> (SourceOfElectricity(x) & ProducesLight(x)))"]}
{"id": "eqasc_train_2689", "nl": "A flashlight requires a source of electricity to produce visible energy.", "fol": "", "prediction": ["all x.(Flashlight(x) -> RequiresElectricitySource(x))"]}
{"id": "eqasc_train_2690", "nl": "Light is a form of Energy.", "fol": "", "prediction": ["all x.(Light(x) -> Energy(x))"]}
{"id": "eqasc_train_2691", "nl": "A flashlight requires a source of electricity to produce energy.", "fol": "", "prediction": ["all x.(Flashlight(x) -> RequiresElectricitySource(x))"]}
{"id": "eqasc_train_2692", "nl": "Cell division is more complex in eukaryotes than prokaryotes.", "fol": "", "prediction": ["all x y.((Eukaryote(x) & Prokaryote(y)) -> MoreComplexCellDividend(x,y))"]}
{"id": "eqasc_train_2693", "nl": "Asexual cell division is called Mitosis.", "fol": "", "prediction": ["all x.(AsexualCellDividend(x) -> Mitosis(x))"]}
{"id": "eqasc_train_2694", "nl": "Mitosis is more complex in eukaryotes than prokaryotes.", "fol": "", "prediction": ["all x y.((Eukaryote(x) & Prokaryote(y)) -> MoreComplex(x,y))"]}
{"id": "eqasc_train_2695", "nl": "All plants are eukaryotes.", "fol": "", "prediction": ["all x.(Plant(x) -> Eukaryote(x))"]}
{"id": "eqasc_train_2696", "nl": "Cell division is more complex in plants than prokaryotes.", "fol": "", "prediction": ["all x y.((Plant(x) & Prokaryote(y)) -> MoreComplexCellDividend(x,y))"]}
{"id": "eqasc_train_2697", "nl": "Mitosis is cell division.", "fol": "", "prediction": ["all x.(Mitosis(x) -> CellDividection(x))"]}
{"id": "eqasc_train_2698", "nl": "Mitosis is more complex in eukaryotes than prokaryotes", "fol": "", "prediction": ["all x y.((Eukaryote(x) & Prokaryote(y)) -> MoreComplex(x,y))"]}
{"id": "eqasc_train_2699", "nl": "mitosis is more complex in eukaryotes than prokaryotes", "fol": "", "prediction": ["all x y.((Eukaryote(x) & Prokaryote(y)) -> ComplexMitosis(x,y))"]}
{"id": "eqasc_train_2700", "nl": "Prokaryotes are smaller and simpler than eukaryotes.", "fol": "", "prediction": ["all x y.((Prokaryote(x) & Eukaryote(y)) -> (Smaller(x,y) & Simpler(x,y)))"]}
{"id": "eqasc_train_2701", "nl": "Cell division is less complex in smaller, simple cells.", "fol": "", "prediction": ["all x.((CellDivision(x) & SmallerSimpleCells(x)) -> LessComplex(x))"]}
{"id": "eqasc_train_2702", "nl": "Eukaryotes have more complex mitosis than prokaryotes.", "fol": "", "prediction": ["all x y.((Eukaryote(x) & Prokaryote(y)) -> MoreComplexMitosis(x,y))"]}
{"id": "eqasc_train_2703", "nl": "Eukaryotes move much faster than prokaryotes.", "fol": "", "prediction": ["all x y.((Eukaryote(x) & Prokaryote(y)) -> MovesMoreFaster(x,y))"]}
{"id": "eqasc_train_2704", "nl": "Cell division is more complex in organisms with faster movement.", "fol": "", "prediction": ["all x.((Organism(x) & FasterMovement(x)) -> MoreComplexCellDividend(x))"]}
{"id": "eqasc_train_2705", "nl": "Cell division is the cells way of reproducing.", "fol": "", "prediction": ["all x.(CellDividend(x) -> CellsReproducing(x))"]}
{"id": "eqasc_train_2706", "nl": "the cells way of reproducing is more complex in eukaryotes than prokaryotes", "fol": "", "prediction": ["all x y.((Eukaryote(x) & Prokaryote(y)) -> MoreComplexCellsReproducing(x,y))"]}
{"id": "eqasc_train_2707", "nl": "cell division is more complex in plants than prokayrotes", "fol": "", "prediction": ["all x y.((Plant(x) & Plant(y)) -> (MoreComplexCellDividence(x,y) & MoreComplexCellDividence(x,y)))"]}
{"id": "eqasc_train_2708", "nl": "Cell division leads to the growth of cells in the population.", "fol": "", "prediction": ["all x y.((CellDividend(x) & Population(y)) -> LeadsToGrowthOfCells(x,y))"]}
{"id": "eqasc_train_2709", "nl": "Something that leads to growth is more complex in eukaryotes than prokaryotes.", "fol": "", "prediction": ["all x y.((LeadsToGrowth(x) & Eukaryote(y)) -> MoreComplex(x,y))"]}
{"id": "eqasc_train_2710", "nl": "glass cause refraction of light", "fol": "", "prediction": ["all x.(Glass(x) -> CausesRefractionOfLight(x))"]}
{"id": "eqasc_train_2711", "nl": "Electromagnetic Spectrum Different wavelengths of light are refracted by different amounts.", "fol": "", "prediction": ["all x.(ElectromagneticSpectrum(x) -> DifferentWavelengthsOfLight(x))"]}
{"id": "eqasc_train_2712", "nl": "Glass will cause light passing through it to spread out into a spectrum", "fol": "", "prediction": ["all x y.((Glass(x) & Light(y)) -> CausesSpreadOutIntoSpectrum(x,y))"]}
{"id": "eqasc_train_2713", "nl": "Mirrors are plate glass.", "fol": "", "prediction": ["all x.(Mirror(x) -> PlateGlass(x))"]}
{"id": "eqasc_train_2714", "nl": "Mirrors cause refraction of light", "fol": "", "prediction": ["all x.(Mirror(x) -> CausesRefractionOfLight(x))"]}
{"id": "eqasc_train_2715", "nl": "Without light there is no sense of vision.", "fol": "", "prediction": ["all x.((Light(x) & -SenseOfVision(x)) -> -SenseOfVision(x))"]}
{"id": "eqasc_train_2716", "nl": "Glass causes a sense of vision.", "fol": "", "prediction": ["all x.(Glass(x) -> CausesSenseOfVision(x))"]}
{"id": "eqasc_train_2717", "nl": "Prisms are round pieces of glass.", "fol": "", "prediction": ["all x.(Prism(x) -> RoundPieceOfGlass(x))"]}
{"id": "eqasc_train_2718", "nl": "prisms cause refraction of light", "fol": "", "prediction": ["all x.(Prism(x) -> CausesRefractionOfLight(x))"]}
{"id": "eqasc_train_2719", "nl": "glass bends light", "fol": "", "prediction": ["all x.(Glass(x) -> BendsLight(x))"]}
{"id": "eqasc_train_2720", "nl": "Glass causes bending of light rays.", "fol": "", "prediction": ["all x.(Glass(x) -> CausesBobbingOfLightRays(x))"]}
{"id": "eqasc_train_2721", "nl": "glass causes bending of light rays", "fol": "", "prediction": ["all x.(Glass(x) -> CausesBbendingOfLightRays(x))"]}
{"id": "eqasc_train_2722", "nl": "glass cause the bending  of light", "fol": "", "prediction": ["all x.(Glass(x) -> CausesBbendingOfLight(x))"]}
{"id": "eqasc_train_2723", "nl": "glass can cause halos", "fol": "", "prediction": ["all x.(Glass(x) -> CanCauseHalos(x))"]}
{"id": "eqasc_train_2724", "nl": "Most amphibians breathe with gills as larvae and with lungs as adults.", "fol": "", "prediction": ["all x.(Amphibian(x) -> (BreathesWithGills(x) & BreathesWithLungs(x)))"]}
{"id": "eqasc_train_2725", "nl": "Frogs are amphibians, iguanas and snakes are reptiles.", "fol": "", "prediction": ["(all x.(Frog(x) -> Amphibian(x)) & all y.(Iguana(y) -> Reptile(y)))"]}
{"id": "eqasc_train_2726", "nl": "frogs breathe with gills as larvae and lungs as adults", "fol": "", "prediction": ["all x.(Frog(x) -> (BreathesWithGills(x) & Larvae(x) & BreathesWithLungs(x) & Adults(x)))"]}
{"id": "eqasc_train_2727", "nl": "Most frogs breathe with gills as larvae and with lungs as adults.", "fol": "", "prediction": ["all x.(Frog(x) -> (BreathesWithGills(x) & Larvae(x) & BreathesWithLungs(x)))"]}
{"id": "eqasc_train_2728", "nl": "frogs  breathe with gills as larvae and with lungs as adults.", "fol": "", "prediction": ["all x.(Frog(x) -> (BreathesWithGills(x) & Larvae(x) & BreathesWithLungs(x)))"]}
{"id": "eqasc_train_2729", "nl": "Amphibians begin their lives in the water.", "fol": "", "prediction": ["all x.(Amphibian(x) -> StartsLifeInWater(x))"]}
{"id": "eqasc_train_2730", "nl": "animals that begin their lives in water breathe with gills then move elsewhere breathe with lungs", "fol": "", "prediction": ["all x y.((Animal(x) & BeginningLifeInWater(x) & Water(y)) -> (BreathesWithGills(x) & MovesAround(x) & BreathesWithLungs(x)))"]}
{"id": "eqasc_train_2731", "nl": "Frogs breathe with gills as larvae and with lungs as adults.", "fol": "", "prediction": ["all x.(Frog(x) -> (BreathesWithGills(x) & Larvae(x) & BreathesWithLungs(x)))"]}
{"id": "eqasc_train_2732", "nl": "salamanders breathe with gills as larvae and lungs as adults", "fol": "", "prediction": ["all x.(Salamander(x) -> (BreathesWithGills(x) & Larvae(x) & BreathesWithLungs(x) & Adults(x)))"]}
{"id": "eqasc_train_2733", "nl": "frogs can breathe with gills as larvae and with lungs as adults", "fol": "", "prediction": ["all x.(Frog(x) -> (BreathesWithGills(x) & Larvae(x) & BreathesWithLungs(x)))"]}
{"id": "eqasc_train_2734", "nl": "Frogs are the most durable species of cold-blooded vertebrates and breathe with gills as larvae and lungs as adults", "fol": "", "prediction": ["all x.(Frog(x) -> (ColdBloodedVertebrate(x) & BreathesWithGillsAsLarvae(x) & BreathesWithLungsAsAdults(x)))"]}
{"id": "eqasc_train_2735", "nl": "An adult frog has lungs and teeth.", "fol": "", "prediction": ["all x.(AdultFrog(x) -> (HasLungs(x) & HasTeeth(x)))"]}
{"id": "eqasc_train_2736", "nl": "Adult frogs have teeth and breathe with gills as larvae", "fol": "", "prediction": ["all x.(AdultFrog(x) -> (HasTeeth(x) & BreathesWithGills(x)))"]}
{"id": "eqasc_train_2737", "nl": "Shivering occurs when many muscles contract a little bit all at once.", "fol": "", "prediction": ["all x.(Shivering(x) -> (ManyMusclesContract(x) & LittleBitAllAtOne(x)))"]}
{"id": "eqasc_train_2738", "nl": "Another response to cold is shivering.", "fol": "", "prediction": ["all x.(ColdResponse(x) -> Shivering(x))"]}
{"id": "eqasc_train_2739", "nl": "A response to cold occurs when many muscles contract a little at once.", "fol": "", "prediction": ["all x.((Muscle(x) & Cold(x)) -> ContractsAtOneTime(x))"]}
{"id": "eqasc_train_2740", "nl": "Shivering heats the body.", "fol": "", "prediction": ["all x.(Shivering(x) -> HeatsBody(x))"]}
{"id": "eqasc_train_2741", "nl": "many muscles contracting a little bit all at once heats the body", "fol": "", "prediction": ["all x y.((Muscle(x) & Muscle(y) & ContractsAtMoment(x,y) & HeatsBody(x)) -> HeatsBody(x))"]}
{"id": "eqasc_train_2742", "nl": "Shivering provides heat generated by muscle contraction.", "fol": "", "prediction": ["all x.(Shivering(x) -> ProvidesHeatGeneratedByMuscleContraction(x))"]}
{"id": "eqasc_train_2743", "nl": "Muscles contracting provides heat", "fol": "", "prediction": ["all x.(MusclesContracting(x) -> ProvidesHeat(x))"]}
{"id": "eqasc_train_2744", "nl": "Exposure to cold can induce many muscle fibers to contract at once", "fol": "", "prediction": ["all x y.((ExpositionToCold(x) & MuscleFiber(y)) -> InducesContraction(x,y))"]}
{"id": "eqasc_train_2745", "nl": "Heat production is increased by shivering and non-shivering thermogenesis .", "fol": "", "prediction": ["all x y.((HeatProduction(x) & Shivering(y) & NonShiveringThermogenesis(x)) -> Increased(x,y))"]}
{"id": "eqasc_train_2746", "nl": "Heat production occurs when many muscles contract a little bit all at once.", "fol": "", "prediction": ["all x.((Muscle(x) & ContractsLittleBit(x)) -> HeatProduction(x))"]}
{"id": "eqasc_train_2747", "nl": "Shivering causes muscle contractions to warm the body.", "fol": "", "prediction": ["all x.(Shivering(x) -> CausesMuscleContractionsToWarmBody(x))"]}
{"id": "eqasc_train_2748", "nl": "The contractions caused by shivering generates warmth.", "fol": "", "prediction": ["all x.((Contraction(x) & CausedByShivering(x)) -> GeneratesWarmth(x))"]}
{"id": "eqasc_train_2749", "nl": "Heat production is increased when many muscles contract a little bit, all at once.", "fol": "", "prediction": ["all x.((Muscle(x) & ContractsLittleBit(x) & AllAtOneTime(x)) -> IncreasedHeatProduction(x))"]}
{"id": "eqasc_train_2750", "nl": "Almost all birds use shivering as a short term adjustment to the cold.", "fol": "", "prediction": ["all x.(Bird(x) -> (UsesShivering(x) & ShortTermAdjustmentToCold(x)))"]}
{"id": "eqasc_train_2751", "nl": "many muscles contract a little bit all at once as a short term adjustment to the cold", "fol": "", "prediction": ["all x y.((Muscle(x) & Cold(y) & ShortTermAdjustment(x,y)) -> ContractsAtLast(x,y))"]}
{"id": "eqasc_train_2752", "nl": "heat is produced when many muscles contract a little bit all at once", "fol": "", "prediction": ["all x y.((Muscle(x) & Muscle(y) & ContractsLittleBit(x,y)) -> HeatProduced(x))"]}
{"id": "eqasc_train_2753", "nl": "Honey bees generate heat by consuming honey and shivering their muscles.", "fol": "", "prediction": ["all x.(HoneyBee(x) -> (GeneratesHeat(x) & ConsumesHoney(x) & ShiversMuscles(x)))"]}
{"id": "eqasc_train_2754", "nl": "Honey bees can shiver.", "fol": "", "prediction": ["all x.(HoneyBee(x) -> CanShiver(x))"]}
{"id": "eqasc_train_2755", "nl": "Involuntary contractions, shivering, cause the production of heat.", "fol": "", "prediction": ["all x.((InvoluntaryContractions(x) & Shivering(x)) -> ProducesHeat(x))"]}
{"id": "eqasc_train_2756", "nl": "The production of heat occurs when many muscles contract a little bit all at once", "fol": "", "prediction": ["all x y.((Muscle(x) & Muscle(y) & ContractsLittleBit(x,y)) -> ProducesHeat(x))"]}
{"id": "eqasc_train_2757", "nl": "exercise increases a body 's strength", "fol": "", "prediction": ["all x y.((Exercise(x) & Body(y)) -> IncreasesStrength(x,y))"]}
{"id": "eqasc_train_2758", "nl": "Exercise increases muscle strength and flexibility.", "fol": "", "prediction": ["all x.(Exercise(x) -> (IncreasesMuscleStrength(x) & IncreasesFlexibility(x)))"]}
{"id": "eqasc_train_2759", "nl": "Exercise increases a body's flexibility. ", "fol": "", "prediction": ["all x.(Exercise(x) -> IncreasesFlexibility(x))"]}
{"id": "eqasc_train_2760", "nl": "Strength training is also effective for increasing bone strength in older adults.", "fol": "", "prediction": ["all x.(StrengthTraining(x) -> (IncreasesBoneStrength(x) & InOlderAdults(x)))"]}
{"id": "eqasc_train_2761", "nl": "One important outcome of exercise in older adults is stronger bones", "fol": "", "prediction": ["all x.((OlderAdult(x) & ExerciseInOlderAdults(x)) -> StrongerBones(x))"]}
{"id": "eqasc_train_2762", "nl": "For exercise, Alan runs and rollerblades.", "fol": "", "prediction": ["all x.((Alan(x) & Runs(x) & Rollerblades(x)) -> Exercise(x))"]}
{"id": "eqasc_train_2763", "nl": "running increases a body's strength", "fol": "", "prediction": ["all x y.((Running(x) & Body(y)) -> IncreasesStrength(x,y))"]}
{"id": "eqasc_train_2764", "nl": "Kicks and punches are important to keeping a healthy body.", "fol": "", "prediction": ["all x.((Kick(x) | Punch(x)) -> ImportantToHealthyBody(x))"]}
{"id": "eqasc_train_2765", "nl": "Exercise is important to keeping strong and healthy. ", "fol": "", "prediction": ["all x.(Exercise(x) -> (IsStrong(x) & IsHealthy(x)))"]}
{"id": "eqasc_train_2766", "nl": "Exercise is more than running and lifting.", "fol": "", "prediction": ["all x.(Exercise(x) -> (MoreThanRunning(x) & MoreThanLifting(x)))"]}
{"id": "eqasc_train_2767", "nl": "running and lifting increases a body's strength", "fol": "", "prediction": ["all x y.((Running(x) & Lifting(y)) -> IncreasesStrength(x,y))"]}
{"id": "eqasc_train_2768", "nl": "Strength is increased by resistance activities.", "fol": "", "prediction": ["all x.(Strength(x) -> IncreasedByResistanceActivities(x))"]}
{"id": "eqasc_train_2769", "nl": "resistance activities are a type of exercise.", "fol": "", "prediction": ["all x.(ResistanceActivity(x) -> Exercise(x))"]}
{"id": "eqasc_train_2770", "nl": "Exercise can help change that by moving their glucose into their muscles.", "fol": "", "prediction": ["all x.(Exercise(x) -> (HelpsChangeGlucose(x) & MovesIntoMuscles(x)))"]}
{"id": "eqasc_train_2771", "nl": "moving glucose into muscles can increase a body's strength", "fol": "", "prediction": ["all x y.((Glucose(x) & Muscle(y)) -> IncreasesStrength(x,y))"]}
{"id": "eqasc_train_2772", "nl": "Resistance exercises are weight-lifting exercises.", "fol": "", "prediction": ["all x.(ResistanceExercise(x) -> WeightLiftingExercise(x))"]}
{"id": "eqasc_train_2773", "nl": "weight-lifting increases a body's strength", "fol": "", "prediction": ["all x y.((WeightLifting(x) & Body(y)) -> IncreasesStrength(x,y))"]}
{"id": "eqasc_train_2774", "nl": "Weight lifting is an example of anaerobic exercise.", "fol": "", "prediction": ["all x.(WeightLifting(x) -> AnaerobicExercise(x))"]}
{"id": "eqasc_train_2775", "nl": "weight lifting increases strength", "fol": "", "prediction": ["all x.(WeightLifting(x) -> IncreasesStrength(x))"]}
{"id": "eqasc_train_2776", "nl": "Strength is balanced with flexibility and all systems of the body are toned.", "fol": "", "prediction": ["all x.((Strength(x) & Flexibility(x)) -> Toned(x))"]}
{"id": "eqasc_train_2777", "nl": "Exercise increases flexibility and muscle tone.", "fol": "", "prediction": ["all x.(Exercise(x) -> (IncreasesFlexibility(x) & IncreasesMuscleTongue(x)))"]}
{"id": "eqasc_train_2778", "nl": "Yoga is a gentle form of exercise.", "fol": "", "prediction": ["all x.(Yoga(x) -> GentleFormOfExercise(x))"]}
{"id": "eqasc_train_2779", "nl": "Yoga increases a body's strength.", "fol": "", "prediction": ["all x.(Yoga(x) -> IncreasesBodyStrength(x))"]}
{"id": "eqasc_train_2780", "nl": "Daily exercise, including weight lifting is a necessity.", "fol": "", "prediction": ["all x.((DailyExercise(x) & WeightLifting(x)) -> Necessity(x))"]}
{"id": "eqasc_train_2781", "nl": "Weight lifting increases a body's strength.", "fol": "", "prediction": ["all x.(WeightLifting(x) -> IncreasesStrength(x))"]}
{"id": "eqasc_train_2782", "nl": "Isometric exercise is a sustained contraction of large muscles, such as weight lifting.", "fol": "", "prediction": ["all x.(IsometricExercise(x) -> (SustainedContractionOfLargeMuscles(x) & WeightLifting(x)))"]}
{"id": "eqasc_train_2783", "nl": "Sustained contraction of large muscles increases a body's strength", "fol": "", "prediction": ["all x y.((SustainedContractionOfLargeMuscles(x) & Body(y)) -> IncreasesStrength(x,y))"]}
{"id": "eqasc_train_2784", "nl": "Exercise promotes the formation of more mitochondria.", "fol": "", "prediction": ["all x.(Exercise(x) -> PromotesMoreMitochondria(x))"]}
{"id": "eqasc_train_2785", "nl": "The formation of more mitochondria increases a body's strength.", "fol": "", "prediction": ["all x y.((MoreMitochondria(x) & Body(y)) -> IncreasesStrength(x,y))"]}
{"id": "eqasc_train_2786", "nl": "bacteria can cause people to become ill", "fol": "", "prediction": ["all x.(Bacteria(x) -> CanCausePeopleToBecomeIll(x))"]}
{"id": "eqasc_train_2787", "nl": "People frequently die of illnesses .", "fol": "", "prediction": ["all x.(Person(x) -> DiesOfIllnesses(x))"]}
{"id": "eqasc_train_2788", "nl": "Bacteria can cause people to die.", "fol": "", "prediction": ["all x.(Bacteria(x) -> CausesPeopleToDie(x))"]}
{"id": "eqasc_train_2789", "nl": "Properly and frequently washing hands when handling food helps eliminate bacteria.", "fol": "", "prediction": ["all x.((ProperlyAndFrequentlyWashingHands(x) & HandlingFood(x)) -> EliminatesBacteria(x))"]}
{"id": "eqasc_train_2790", "nl": "Proper hand washing can help people from getting ill", "fol": "", "prediction": ["all x y.((ProperHandWashing(x) & Person(y)) -> CanHelpFromGettingIll(y))"]}
{"id": "eqasc_train_2791", "nl": "Most people turn to a doctor when they are ill or injured.", "fol": "", "prediction": ["all x.((Person(x) & (Ill(x) | Injured(x))) -> TurnsToDoctor(x))"]}
{"id": "eqasc_train_2792", "nl": "Bacteria can cause people to turn to a doctor.", "fol": "", "prediction": ["all x y.((Bacteria(x) & Doctor(y)) -> CausesTurnTo(x,y))"]}
{"id": "eqasc_train_2793", "nl": "Bacteria in the food causes the illness.", "fol": "", "prediction": ["all x.((Bacteria(x) & Food(x)) -> CausesIllness(x))"]}
{"id": "eqasc_train_2794", "nl": "food can cause illness", "fol": "", "prediction": ["all x.(Food(x) -> CausesIllness(x))"]}
{"id": "eqasc_train_2795", "nl": "Fever is merely a symptom of illness.", "fol": "", "prediction": ["all x.(Fever(x) -> SymptomOfIllness(x))"]}
{"id": "eqasc_train_2796", "nl": "bacteria can cause people to have a fever", "fol": "", "prediction": ["all x y.((Bacteria(x) & Person(y)) -> CanCauseFever(x,y))"]}
{"id": "eqasc_train_2797", "nl": "Recovery from illness, especially infectious illnesses, or operations, is slow in some people.", "fol": "", "prediction": ["all x.((Person(x) & (InfectiousIllness(x) | Operation(x))) -> SlowRecovery(x))"]}
{"id": "eqasc_train_2798", "nl": "bacteria can be infectious and cause people to need recovery", "fol": "", "prediction": ["all x.(Bacteria(x) -> (Infectious(x) & CausesNeedToRecovery(x)))"]}
{"id": "eqasc_train_2799", "nl": "Bacteria, viruses or parasites can cause sickness.", "fol": "", "prediction": ["all x.((Bacteria(x) | Viral(x) | Parasite(x)) -> CausesSickness(x))"]}
{"id": "eqasc_train_2800", "nl": "parasites can cause illness", "fol": "", "prediction": ["all x.(Parasite(x) -> CausesIllness(x))"]}
{"id": "eqasc_train_2801", "nl": "Leptospirosis is a corkscrew shaped bacteria.", "fol": "", "prediction": ["all x.(Leptospirosis(x) -> CorkscrewShapedBacteria(x))"]}
{"id": "eqasc_train_2802", "nl": "Leptospirosis can cause people to become ill.", "fol": "", "prediction": ["all x.(Leptospirosis(x) -> CanCausePeopleToBecomeIll(x))"]}
{"id": "eqasc_train_2803", "nl": "Poultry is a notorious source of bacteria that cause illness.", "fol": "", "prediction": ["all x.(Poultry(x) -> (NotoriousSourceOfBacteria(x) & CausesIllness(x)))"]}
{"id": "eqasc_train_2804", "nl": "Poultry can make people ill", "fol": "", "prediction": ["all x y.((Poultry(x) & Person(y)) -> MakesIll(x,y))"]}
{"id": "eqasc_train_2805", "nl": "Serious illness needing hospitalization is uncommon.", "fol": "", "prediction": ["all x.((SeriousIllness(x) & NeedsHospitalization(x)) -> UnusuallyUncommon(x))"]}
{"id": "eqasc_train_2806", "nl": "bacteria can cause people to need hospitalization.", "fol": "", "prediction": ["all x.(Bacteria(x) -> CanCauseHospitalization(x))"]}
{"id": "eqasc_train_2807", "nl": "Bacteria that cause disease are called pathogens.", "fol": "", "prediction": ["all x.((Bacteria(x) & CausesDisease(x)) -> Pathogen(x))"]}
{"id": "eqasc_train_2808", "nl": "If a person falls ill it may be due to a pathogen", "fol": "", "prediction": ["all x.(FallsIll(x) -> (Pathogen(x) | Pathogen(x)))"]}
{"id": "eqasc_train_2809", "nl": "Fully cooking oysters kills the bacteria.", "fol": "", "prediction": ["all x.((Oyster(x) & FullyCooking(x)) -> KillsBacteria(x))"]}
{"id": "eqasc_train_2810", "nl": "Fully cooking oysters can prevent illness", "fol": "", "prediction": ["all x.((Oyster(x) & FullyCooking(x)) -> PreventsIllness(x))"]}
{"id": "eqasc_train_2811", "nl": "Healthy people become ill, and sick people die.", "fol": "", "prediction": ["all x y.((Healthy(x) & Sick(y)) -> (BecomesIll(x) & Dies(y)))"]}
{"id": "eqasc_train_2812", "nl": "bacteria can cause people to die", "fol": "", "prediction": ["all x.(Bacteria(x) -> CausesPeopleToDie(x))"]}
{"id": "eqasc_train_2813", "nl": "Also, when they get sick, the illness can progress at much greater speed.", "fol": "", "prediction": ["all x.((Sick(x) & Illness(x)) -> ProgressesAtGreaterSpeed(x))"]}
{"id": "eqasc_train_2814", "nl": "bacteria can cause people to become sick.", "fol": "", "prediction": ["all x.(Bacteria(x) -> CanCausePeopleToBecomeSick(x))"]}
{"id": "eqasc_train_2815", "nl": "Everyone can get sick from resistant bacteria.", "fol": "", "prediction": ["all x.((ResistantBacteria(x) & Person(x)) -> CanGetSick(x))"]}
{"id": "eqasc_train_2816", "nl": "resistant germs can cause illness", "fol": "", "prediction": ["all x.(ResistantGerms(x) -> CausesIllness(x))"]}
{"id": "eqasc_train_2817", "nl": "Common micro-organisms include fungi and bacteria.", "fol": "", "prediction": ["all x.(Microorganism(x) -> (Fungus(x) | Bacteria(x)))"]}
{"id": "eqasc_train_2818", "nl": "Common micro-organisms can cause people to become ill.", "fol": "", "prediction": ["all x.(CommonMicroorganism(x) -> CausesIllness(x))"]}
{"id": "eqasc_train_2819", "nl": "Temperature falls from lower to higher altitudes.", "fol": "", "prediction": ["all x.(Temperature(x) -> (FallsFromLowerToHigherAltitudes(x)))"]}
{"id": "eqasc_train_2820", "nl": "Temperature Temperature is recorded in degrees Celcius.", "fol": "", "prediction": ["all x.(Temperature(x) -> RecordedInDegreesCelsius(x))"]}
{"id": "eqasc_train_2821", "nl": "degrees celcius falls from lower to higher altitudes", "fol": "", "prediction": ["all x y.((Degree(x) & Altitude(y) & LowerToHigher(x,y)) -> FallsFrom(x,y))"]}
{"id": "eqasc_train_2822", "nl": "Temperatures are cooler in the higher altitudes of the mountains.", "fol": "", "prediction": ["all x y.((Mountain(x) & HigherAltitude(y)) -> CoolerTemperature(x,y))"]}
{"id": "eqasc_train_2823", "nl": "Temperature falls from lower to higher in the mountains", "fol": "", "prediction": ["all x y.((Mountain(x) & Mountain(y)) -> TemperatureFallsFromLowerToHigher(x,y))"]}
{"id": "eqasc_train_2824", "nl": "the mountains have lower temperatures", "fol": "", "prediction": ["all x.(Mountain(x) -> LowerTemperatures(x))"]}
{"id": "eqasc_train_2825", "nl": "Mountain climbers come to brave the altitude and scale the peaks.", "fol": "", "prediction": ["all x y.((MountainClimber(x) & Altitude(y)) -> (Breathes(x,y) & ScalesPeaks(x)))"]}
{"id": "eqasc_train_2826", "nl": "Temperature falls when scaling a mountain", "fol": "", "prediction": ["all x y.((TemperatureFalls(x) & ScalingMountain(y)) -> FallsWhenScalingMountain(x,y))"]}
{"id": "eqasc_train_2827", "nl": "Temperature values are in degrees celsius.", "fol": "", "prediction": ["all x.(TemperatureValue(x) -> DegreeCelsius(x))"]}
{"id": "eqasc_train_2828", "nl": "degrees Celsius falls from lower to higher altitudes", "fol": "", "prediction": ["all x y.((DegreesCelsius(x) & Altitude(y)) -> FallsFromLowerToHigher(x,y))"]}
{"id": "eqasc_train_2829", "nl": "Lift decreases with altitude.", "fol": "", "prediction": ["all x.(Lift(x) -> DecreasesWithAltitude(x))"]}
{"id": "eqasc_train_2830", "nl": "Lower temperatures align with lower lifts.", "fol": "", "prediction": ["all x.(LowerTemperature(x) -> AlignsWithLowerLifts(x))"]}
{"id": "eqasc_train_2831", "nl": "Heat and temperature are the same.", "fol": "", "prediction": ["all x.(Heat(x) -> Temperature(x))"]}
{"id": "eqasc_train_2832", "nl": "Heat falls from lower to higher altitudes.", "fol": "", "prediction": ["all x y.((Heat(x) & Altitude(y)) -> FallsFrom(x,y))"]}
{"id": "eqasc_train_2833", "nl": "If the weather is warm, their temperature rises.", "fol": "", "prediction": ["all x.((Weather(x) & Warm(x)) -> TemperatureRise(x))"]}
{"id": "eqasc_train_2834", "nl": "Warm weather falls from lower to higher altitudes", "fol": "", "prediction": ["all x y.((WarmWeather(x) & Altitude(y)) -> FallsFromLowerToHigher(x,y))"]}
{"id": "eqasc_train_2835", "nl": "Temperatures vary with altitude and season.", "fol": "", "prediction": ["all x.(Temperature(x) -> (VariatesWithAltitude(x) & VariatesWithSeason(x)))"]}
{"id": "eqasc_train_2836", "nl": "temperatures vary depending on season", "fol": "", "prediction": ["all x.(Temperature(x) -> VariableDependingOnSeason(x))"]}
{"id": "eqasc_train_2837", "nl": "Most salamanders use their sense of smell to find a mate.", "fol": "", "prediction": ["all x.(Salamander(x) -> UseSenseOfSmellToFindMate(x))"]}
{"id": "eqasc_train_2838", "nl": "a type of amphibian uses their sense of smell to find a mate", "fol": "", "prediction": ["all x y.((Amphibian(x) & Amphibian(y)) -> UsesSenseOfSmellToFindMate(x,y))"]}
{"id": "eqasc_train_2839", "nl": "An odor, by definition, is a sensation, stimulation or perception of the sense of smell.", "fol": "", "prediction": ["all x.(Odor(x) -> (Sensation(x) | Stimulation(x) | Perception(x)))"]}
{"id": "eqasc_train_2840", "nl": "Most salamanders find mates by perceiving odors", "fol": "", "prediction": ["all x y.((Salamander(x) & Mate(y)) -> FindsByPerceivingOdors(x,y))"]}
{"id": "eqasc_train_2841", "nl": "Olfaction is the sense of smell.", "fol": "", "prediction": ["all x.(Olfaction(x) -> SmellSense(x))"]}
{"id": "eqasc_train_2842", "nl": "Most salamanders use olfaction to find a mate.", "fol": "", "prediction": ["all x.(Salamander(x) -> UsesOlfactionToFindMate(x))"]}
{"id": "eqasc_train_2843", "nl": "Salamanders, frogs and toads are amphibians.", "fol": "", "prediction": ["all x.((Salamander(x) | Frog(x) | Toad(x)) -> Amphibian(x))"]}
{"id": "eqasc_train_2844", "nl": "An amphibian uses its sense of smell to find a mate", "fol": "", "prediction": ["all x y.((Amphibian(x) & Mate(y)) -> UsesSenseOfSmellToFind(x,y))"]}
{"id": "eqasc_train_2845", "nl": "Some amphibians use their sense of smell to find a mate.", "fol": "", "prediction": ["exists x.(Amphibian(x) & UseSenseOfSmell(x) & FindMate(x))"]}
{"id": "eqasc_train_2846", "nl": "Food to survive, mates to reproduce, and water to drink.", "fol": "", "prediction": ["all x y z.((Food(x) & Mate(y) & Water(z)) -> (Survive(x) & Reproduce(y) & Drink(z)))"]}
{"id": "eqasc_train_2847", "nl": "To reproduce, salamanders are assisted by their sense of smell.", "fol": "", "prediction": ["all x.(Salamander(x) -> AssistsSenseOfSmell(x))"]}
{"id": "eqasc_train_2848", "nl": "Like frogs, salamanders are amphibians.", "fol": "", "prediction": ["all x.(Salamander(x) -> Amphibian(x))"]}
{"id": "eqasc_train_2849", "nl": "some amphibians use their sense of smell to find a mate.", "fol": "", "prediction": ["exists x.(Amphibian(x) & UseSenseOfSmell(x))"]}
{"id": "eqasc_train_2850", "nl": "Salamanders rely on their extraordinary sense of smell to find prey.", "fol": "", "prediction": ["all x.(Salamander(x) -> (ReliesOnExtremeSenseOfSmell(x) & FindsPrey(x)))"]}
{"id": "eqasc_train_2851", "nl": "salamanders use smell to find prey", "fol": "", "prediction": ["all x y.((Salamander(x) & Prey(y)) -> UsesSmellToFind(x,y))"]}
{"id": "eqasc_train_2852", "nl": "To couple in sexual union, to be matched or mated.", "fol": "", "prediction": ["all x.((Path(x) & SexualUnion(x)) -> (Match(x) | Matched(x)))"]}
{"id": "eqasc_train_2853", "nl": "Most salamanders find sexual partners by their sense of smell.", "fol": "", "prediction": ["all x.(Salamander(x) -> (FindsSexualPartner(x) & TasteOfSmell(x)))"]}
{"id": "eqasc_train_2854", "nl": "if a tree falls then sunlight becomes available to the surrounding plants", "fol": "", "prediction": ["all x y z.((Tree(x) & Falls(x) & Sunlight(y) & Plant(z)) -> SunlightAvailableToSurroundingPlants(y,z))"]}
{"id": "eqasc_train_2855", "nl": "Like all plants, it needs sunlight and warmth to grow.", "fol": "", "prediction": ["all x.((Plant(x) & NeedsSunlight(x) & NeedsWarmth(x)) -> Grows(x))"]}
{"id": "eqasc_train_2856", "nl": "If a tree falls, then sunlight becomes available to allow growth.", "fol": "", "prediction": ["all x.((Tree(x) & Falls(x)) -> SunlightAvailable(x))"]}
{"id": "eqasc_train_2857", "nl": "All oaks are trees.", "fol": "", "prediction": ["all x.(Oak(x) -> Tree(x))"]}
{"id": "eqasc_train_2858", "nl": "if an oak falls then sunlight becomes available to the surrounding plants", "fol": "", "prediction": ["all x y.((Oak(x) & Falls(x)) -> SunlightAvailableToSurroundingPlants(y))"]}
{"id": "eqasc_train_2859", "nl": "When a big tree falls, sunlight shines on smaller plants and they get a chance to grow.", "fol": "", "prediction": ["all x y z.((BigTree(x) & SmallPlant(y) & Sunlight(z) & Falls(x)) -> (SunlightShinesOn(y,z) & Grows(y)))"]}
{"id": "eqasc_train_2860", "nl": "Plants grow better when surrounding trees fall", "fol": "", "prediction": ["all x y.((Plant(x) & Tree(y) & Fall(y)) -> GrowsBetter(x,y))"]}
{"id": "eqasc_train_2861", "nl": "Large pine trees also provide good shade.", "fol": "", "prediction": ["all x.(LargePineTree(x) -> ProvidesGoodShade(x))"]}
{"id": "eqasc_train_2862", "nl": "if a pine falls then sunlight becomes available to the surrounding plants", "fol": "", "prediction": ["all x y.((Pine(x) & Falls(x)) -> SunlightAvailableToSurroundingPlants(y))"]}
{"id": "eqasc_train_2863", "nl": "Many small plants grow in the shade under the trees.", "fol": "", "prediction": ["all x.(SmallPlant(x) -> GrowsInShadeUnderTrees(x))"]}
{"id": "eqasc_train_2864", "nl": "If a tree falls, then previously shaded areas have sunlight now available.", "fol": "", "prediction": ["all x.((Tree(x) & Falls(x)) -> ShadedAreasNowHasSunlight(x))"]}
{"id": "eqasc_train_2865", "nl": "Plants use sunlight for photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> UsesSunlightForPhotosynthesis(x))"]}
{"id": "eqasc_train_2866", "nl": "if a tree falls then photosythesis becomes more accessible to surrounding plants", "fol": "", "prediction": ["all x y z.((Tree(x) & Falls(x) & Photosythesis(y) & Plant(z)) -> MoreAccessibleTo(y,z))"]}
{"id": "eqasc_train_2867", "nl": "Encroaching trees rob the orchids of the sunlight they require.", "fol": "", "prediction": ["all x y.((EncroachingTree(x) & Orchid(y)) -> RobsOfSunlight(x,y))"]}
{"id": "eqasc_train_2868", "nl": "Orchids will get more light when a surrounding tree falls", "fol": "", "prediction": ["all x y.((Orchid(x) & Tree(y) & Falls(y,x)) -> MoreLight(x))"]}
{"id": "eqasc_train_2869", "nl": "if a tree falls it helps surrounding plants grow", "fol": "", "prediction": ["all x y z.((Tree(x) & Falls(x) & Plant(y) & Tree(z)) -> HelpsGrow(x,y,z))"]}
{"id": "eqasc_train_2870", "nl": "Oak trees are found throughout.", "fol": "", "prediction": ["all x.(OakTree(x) -> FoundThroughout(x))"]}
{"id": "eqasc_train_2871", "nl": "if an oak falls then sunlight becomes available to surrounding plants", "fol": "", "prediction": ["all x y.((Oak(x) & Falls(x)) -> SunlightAvailableToSurroundingPlants(y))"]}
{"id": "eqasc_train_2872", "nl": "More trees are cut for firewood and for homes.", "fol": "", "prediction": ["all x.(Tree(x) -> (CutsForFirewood(x) & CutsForHomes(x)))"]}
{"id": "eqasc_train_2873", "nl": "using firewood for homes allows sunlight to become available to the surrounding plants", "fol": "", "prediction": ["all x y.((Firewood(x) & Homes(y)) -> AllowsSunlightToBecomeAvailableToSurroundingPlants(x,y))"]}
{"id": "eqasc_train_2874", "nl": "recycling has a positive impact on the environment", "fol": "", "prediction": ["all x.(Recycling(x) -> PositiveImpactOnEnvironment(x))"]}
{"id": "eqasc_train_2875", "nl": "Recycling is the reuse of material.", "fol": "", "prediction": ["all x.(Recycling(x) -> ReuseOfMaterial(x))"]}
{"id": "eqasc_train_2876", "nl": "Reuse of materials has a positive impact on the environment.", "fol": "", "prediction": ["all x.(ReuseOfMaterials(x) -> PositiveImpactOnEnvironment(x))"]}
{"id": "eqasc_train_2877", "nl": "Organisms live in environments.", "fol": "", "prediction": ["all x.(Organism(x) -> LivesInEnvironment(x))"]}
{"id": "eqasc_train_2878", "nl": "recycling has a positive impact on where organisms live", "fol": "", "prediction": ["all x y.((Recycling(x) & Organism(y)) -> PositiveImpactOnWhereLives(x,y))"]}
{"id": "eqasc_train_2879", "nl": "Plastic bags are recyclable and they are reusable.", "fol": "", "prediction": ["all x.(PlasticBag(x) -> (Recyclable(x) & Reusable(x)))"]}
{"id": "eqasc_train_2880", "nl": "Reusing plastic bags has a positive impact on the environment", "fol": "", "prediction": ["all x.(ReusingPlasticBags(x) -> PositiveImpactOnEnvironment(x))"]}
{"id": "eqasc_train_2881", "nl": "Environments are places where something lives.", "fol": "", "prediction": ["all x.(Environment(x) -> exists y.(Living(y) & Place(x,y))))"]}
{"id": "eqasc_train_2882", "nl": "recycling has a positive impact on where something lives", "fol": "", "prediction": ["all x y.((Recycling(x) & Something(y)) -> PositiveImpactOnWhereLifeLives(x,y))"]}
{"id": "eqasc_train_2883", "nl": "Geoscientists are the caretakers of Earth's resources and environment.", "fol": "", "prediction": ["all x.(Geoscientist(x) -> (CaregiversOfEarthsResources(x) & CaretakersOfEnvironment(x)))"]}
{"id": "eqasc_train_2884", "nl": "recycling has a positive impact on the earth.", "fol": "", "prediction": ["all x.(Recycling(x) -> PositiveImpactOnEarth(x))"]}
{"id": "eqasc_train_2885", "nl": "Recycling means reusing things.", "fol": "", "prediction": ["all x.(Recycling(x) -> ReusesThings(x))"]}
{"id": "eqasc_train_2886", "nl": "Reusing things has a positive impact on the environment", "fol": "", "prediction": ["all x y.((ReusingThings(x) & Environment(y)) -> PositiveImpactOn(x,y))"]}
{"id": "eqasc_train_2887", "nl": "Alternatively, through reuse and recycling, waste can be converted into useful products.", "fol": "", "prediction": ["all x.((Reuse(x) & Recycling(x)) -> ConvertsWasteToUsefulProducts(x))"]}
{"id": "eqasc_train_2888", "nl": "Converting waste into useful products has a positive impact on the environment.", "fol": "", "prediction": ["all x.(ConvertsWasteIntoUsefulProducts(x) -> PositiveImpactOnEnvironment(x))"]}
{"id": "eqasc_train_2889", "nl": "Steel is a recycled and recyclable product.", "fol": "", "prediction": ["all x.(Steel(x) -> (Recycled(x) & Recyclable(x)))"]}
{"id": "eqasc_train_2890", "nl": "certain Steel products have a positive impact on the environment", "fol": "", "prediction": ["exists x.(SteelProduct(x) & PositiveImpactOnEnvironment(x))"]}
{"id": "eqasc_train_2891", "nl": "Yard waste is recyclable and easy to recycle.", "fol": "", "prediction": ["all x.( YardWaste(x) -> (Recyclable(x) & EasyToRecycle(x)))"]}
{"id": "eqasc_train_2892", "nl": "yard waste is good for the environment", "fol": "", "prediction": ["all x.((GardenWaste(x) & GoodForEnvironment(x)) -> GoodForEnvironment(x))"]}
{"id": "eqasc_train_2893", "nl": "What's more, paper bags are recyclable themselves.", "fol": "", "prediction": ["all x.(PaperBag(x) -> Recyclable(x))"]}
{"id": "eqasc_train_2894", "nl": "Paper bags have a positive impact on the environment.", "fol": "", "prediction": ["all x.(PaperBag(x) -> PositiveImpactOnEnvironment(x))"]}
{"id": "eqasc_train_2895", "nl": "Newsprint is recycled into new paper, cardboard, and insulating material.", "fol": "", "prediction": ["all x.(Newsprint(x) -> (RecycledIntoNewPaper(x) & RecycledIntoNewCartoon(x) & RecycledIntoNewInsulationMaterial(x)))"]}
{"id": "eqasc_train_2896", "nl": "Making cardboard from newsprint has a positive impact on the environment", "fol": "", "prediction": ["all x y.((MakingCardiolFromNewsprint(x) & Environment(y)) -> PositiveImpactOnEnvironment(x,y))"]}
{"id": "eqasc_train_2897", "nl": "using steel has a positive impact on the environment", "fol": "", "prediction": ["all x.((UsesSteel(x) & PositiveImpactOnEnvironment(x)) -> PositiveImpactOnEnvironment(x))"]}
{"id": "eqasc_train_2898", "nl": "chlorophyll is used for absorbing light energy by plants", "fol": "", "prediction": ["all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsLightEnergy(x,y))"]}
{"id": "eqasc_train_2899", "nl": "Chlorophyll is the plant's oxygen producer.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> OxygenProducer(x))"]}
{"id": "eqasc_train_2900", "nl": "plants absorb light energy in order to produce oxygen.", "fol": "", "prediction": ["all x.(Plant(x) -> AbsorbsLightEnergy(x))"]}
{"id": "eqasc_train_2901", "nl": "Sun emits light energy.", "fol": "", "prediction": ["all x.(Sun(x) -> EmitsLightEnergy(x))"]}
{"id": "eqasc_train_2902", "nl": "Chlorophyll absorbs energy from sunlight", "fol": "", "prediction": ["all x y.((Chlorophyll(x) & Sunlight(y)) -> AbsorbsEnergyFrom(x,y))"]}
{"id": "eqasc_train_2903", "nl": "Chlorophyll is a pigment that makes plants green.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> (Pigment(x) & MakesPlantsGreen(x)))"]}
{"id": "eqasc_train_2904", "nl": "Soemthing that makes plants green is used for absorbing light energy by plants", "fol": "", "prediction": ["all x.((Soemthing(x) & MakesPlantsGreen(x)) -> AbsorbsLightEnergyByPlants(x))"]}
{"id": "eqasc_train_2905", "nl": "Chlorophyll Chlorophyll is the green colouring matter of plant leaves.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> GreenColoringMatterOfPlantLeaves(x))"]}
{"id": "eqasc_train_2906", "nl": "The green coloring of leaves is used to absorb light", "fol": "", "prediction": ["all x y.((GreenColoring(x) & Leaves(y)) -> AbsorbsLight(x,y))"]}
{"id": "eqasc_train_2907", "nl": "It is essential in the absorption of light energy for photosynthesis.", "fol": "", "prediction": ["all x.((AbsorptionOfLightEnergy(x) & Photosynthesis(x)) -> EssentialIn(x,y))"]}
{"id": "eqasc_train_2908", "nl": "chlorophyll is used for photosynthesis", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> UsedForPhotosynthesis(x))"]}
{"id": "eqasc_train_2909", "nl": "chlorophyll is used for absorbing light energy by bushes", "fol": "", "prediction": ["all x y.((Chlorophyll(x) & Bulbs(y)) -> AbsorbsLightEnergy(x,y))"]}
{"id": "eqasc_train_2910", "nl": "Chlorophyll is a complex molecule.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> ComplexMolecule(x))"]}
{"id": "eqasc_train_2911", "nl": "Complex molecules are used for absorbing light energy by plants", "fol": "", "prediction": ["all x y.((ComplexMolecule(x) & Plant(y)) -> AbsorbsLightEnergy(x,y))"]}
{"id": "eqasc_train_2912", "nl": "Fungi do not contain chlorophyll.", "fol": "", "prediction": ["all x.(Fungus(x) -> -ContainsChlorophyll(x))"]}
{"id": "eqasc_train_2913", "nl": "Fungi can not absorb light energy.", "fol": "", "prediction": ["all x.(Fungus(x) -> -AbsorbsLightEnergy(x))"]}
{"id": "eqasc_train_2914", "nl": "Fungi have no chlorophyll.", "fol": "", "prediction": ["all x.(Fungus(x) -> -Chlorophyll(x))"]}
{"id": "eqasc_train_2915", "nl": "Fungi cannot absorb light energy.", "fol": "", "prediction": ["all x.(Fungus(x) -> -AbsorbsLightEnergy(x))"]}
{"id": "eqasc_train_2916", "nl": "drought is when amount of precipitation decreases", "fol": "", "prediction": ["all x.(Drought(x) -> (DecreasesPrecipitation(x) & DecreasesPrecipitation(x)))"]}
{"id": "eqasc_train_2917", "nl": "Drought conditions are fire conditions.", "fol": "", "prediction": ["all x.(DroughtCondition(x) -> FireCondition(x))"]}
{"id": "eqasc_train_2918", "nl": "a decrease in the amount of precipitation results in fire conditions ", "fol": "", "prediction": ["all x y.((DecreaseInPrecipitation(x) & FireConditions(y)) -> ResultsInFireConditions(x,y))"]}
{"id": "eqasc_train_2919", "nl": "Drought causes famine, which contributes to decentralization and unrest.", "fol": "", "prediction": ["all x.(Drought(x) -> (CausesFamine(x) & ContributesToDecentralization(x) & ContributesToUnrest(x)))"]}
{"id": "eqasc_train_2920", "nl": "A decrease in precipitation can cause famine.", "fol": "", "prediction": ["all x.(DecreaseInPrecipitation(x) -> CanCauseFamine(x))"]}
{"id": "eqasc_train_2921", "nl": "If there's a drought, a lot of people die.", "fol": "", "prediction": ["all x.(Drought(x) -> LotsOfPeopleDie(x))"]}
{"id": "eqasc_train_2922", "nl": "If precipitation decreases, a lot of people can die.", "fol": "", "prediction": ["all x.(DecreasesPrecipitation(x) -> CanDie(x))"]}
{"id": "eqasc_train_2923", "nl": "During drought, water supply reduced.", "fol": "", "prediction": ["all x.(Drought(x) -> ReducedWaterSupply(x))"]}
{"id": "eqasc_train_2924", "nl": "Reduced water supply occurs when precipitation amounts decrease.", "fol": "", "prediction": ["all x.((PrecipitationAmount(x) & Decreased(x)) -> ReducedWaterSupply(x))"]}
{"id": "eqasc_train_2925", "nl": "Drought decreases the availability and abundance of the natural food supply.", "fol": "", "prediction": ["all x.(Drought(x) -> (DecreasesAvailability(x) & DecreasesAbondance(x)))"]}
{"id": "eqasc_train_2926", "nl": "When precipitation decreases, so does the food supply", "fol": "", "prediction": ["all x.((PrecipitationDecreases(x) & FoodSupply(x)) -> FoodSupplyDecreases(x))"]}
{"id": "eqasc_train_2927", "nl": "Some researches have reported that acid precipitation decreases crop productivity.", "fol": "", "prediction": ["exists x.(Research(x) & ReportsAcidPrecipitation(x))"]}
{"id": "eqasc_train_2928", "nl": "Crop productivity decreases during a drought.", "fol": "", "prediction": ["all x.((CropProductivityDecreasesDuringDrought(x)) -> Drought(x))"]}
{"id": "eqasc_train_2929", "nl": "Conclusions Floods and drought are realities of desert life.", "fol": "", "prediction": ["all x.((Flood(x) | Drought(x)) -> DesertLifeRealities(x))"]}
{"id": "eqasc_train_2930", "nl": "deserts have decreased precipitation", "fol": "", "prediction": ["all x.(Desert(x) -> (DecreasedPrecipitation(x) & DecreasedPrecipitation(x)))"]}
{"id": "eqasc_train_2931", "nl": "Most of the precipitation falls as snow.", "fol": "", "prediction": ["all x.(Precipitation(x) -> FallsAsSnow(x))"]}
{"id": "eqasc_train_2932", "nl": "lack of snow causes drought", "fol": "", "prediction": ["-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(-SnowCausesDrought(SnowCausesDrought)Drought)Drought)Drought)Drought)Drought)Drought)Drought)"]}
{"id": "eqasc_train_2933", "nl": "Drought or rain also affect the harvest and the planning.", "fol": "", "prediction": ["all x.((Drought(x) | Rain(x)) -> (AffectsHarvest(x) & AffectsPlanning(x)))"]}
{"id": "eqasc_train_2934", "nl": "not enough precipitation will negatively affect the harvest", "fol": "", "prediction": ["all x.((NotEnoughPrecipitation(x) & Harvest(x)) -> NegativelyAffects(x,Harvest))"]}
{"id": "eqasc_train_2935", "nl": "an animal requires warmth for survival", "fol": "", "prediction": ["all x.((Animal(x) & RequiresWarmth(x)) -> Survival(x))"]}
{"id": "eqasc_train_2936", "nl": "Light and heat and warmth are basic necessities for survival.", "fol": "", "prediction": ["all x.((Light(x) | Heat(x) | Warmth(x)) -> BasicNecessityForSurvival(x))"]}
{"id": "eqasc_train_2937", "nl": "Heat is necessary for the survival of animals. ", "fol": "", "prediction": ["all x.(Heat(x) -> NeededForSurvivalOfAnimals(x))"]}
{"id": "eqasc_train_2938", "nl": "Vegetation is required by many animals for warmth and security.", "fol": "", "prediction": ["all x.(Vegetation(x) -> (RequiredByAnimals(x) & ForWarmth(x) & ForSecurity(x)))"]}
{"id": "eqasc_train_2939", "nl": "Vegetation helps animals survive", "fol": "", "prediction": ["all x y.((Vegetation(x) & Animal(y)) -> HelpsSurvive(x,y))"]}
{"id": "eqasc_train_2940", "nl": "Wollies are made of fur and worn for warmth.", "fol": "", "prediction": ["all x.(Wollie(x) -> (MadeOfFur(x) & WornForWarmth(x)))"]}
{"id": "eqasc_train_2941", "nl": "Some animals need fur for survival.", "fol": "", "prediction": ["exists x.(Animal(x) & NeedsFur(x))"]}
{"id": "eqasc_train_2942", "nl": "Without blubber, their fur is essential for survival.", "fol": "", "prediction": ["all x.((Fur(x) & -Blumber(x)) -> EssentialForSurvival(x))"]}
{"id": "eqasc_train_2943", "nl": "an animal requires fur as it is essential for warmth.", "fol": "", "prediction": ["all x.((Animal(x) & RequiresFur(x)) -> EssentialForWarmth(x))"]}
{"id": "eqasc_train_2944", "nl": "All dogs are animals .", "fol": "", "prediction": ["all x.(Dog(x) -> Animal(x))"]}
{"id": "eqasc_train_2945", "nl": "dogs require warmth for survival", "fol": "", "prediction": ["all x.(Dog(x) -> RequiresWarmthForSurvival(x))"]}
{"id": "eqasc_train_2946", "nl": "Birds huddle together for warmth.", "fol": "", "prediction": ["all x.(Bird(x) -> HuddlesTogetherForWarmth(x))"]}
{"id": "eqasc_train_2947", "nl": "Birds huddle together for survival.", "fol": "", "prediction": ["all x.(Bird(x) -> HuddlesTogetherForSurvival(x))"]}
{"id": "eqasc_train_2948", "nl": "vegetation helps animals survive", "fol": "", "prediction": ["all x y.((Vegetation(x) & Animal(y)) -> HelpsSurvive(x,y))"]}
{"id": "eqasc_train_2949", "nl": "Cubs are born in the winter and nestle in their mother's fur for warmth and to nurse.", "fol": "", "prediction": ["all x.(Cub(x) -> (BirthInWinter(x) & NestleInMothersFur(x) & ForWarmth(x) & ForNursing(x)))"]}
{"id": "eqasc_train_2950", "nl": "fur can aid most animals in survival", "fol": "", "prediction": ["all x y.((Fur(x) & Animal(y)) -> AidsInSurvival(x,y))"]}
{"id": "eqasc_train_2951", "nl": "Heat is produced to maintain warmth in the boy.", "fol": "", "prediction": ["all x y.((Bird(x) & Boy(y)) -> ProducesHeat(x,y))"]}
{"id": "eqasc_train_2952", "nl": "an animal requires heat produced by the body for survival", "fol": "", "prediction": ["all x y.((Animal(x) & Body(y)) -> RequiresHeatForSurvival(x,y))"]}
{"id": "eqasc_train_2953", "nl": "cows require warmth for survival", "fol": "", "prediction": ["all x.(Cow(x) -> RequiresWarmthForSurvival(x))"]}
{"id": "eqasc_train_2954", "nl": "Animals act through their instincts for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> ActsThroughInstinctsForSurvival(x))"]}
{"id": "eqasc_train_2955", "nl": "An animal acts on instincts to stay alive and warmth is one of them", "fol": "", "prediction": ["all x y z.((Animal(x) & Instinct(y) & Instinct(z)) -> (ActsOn(x,y) & StaysAlive(x) & Warmth(x)))"]}
{"id": "eqasc_train_2956", "nl": "Individual with best survival alleles survive with the largest handicap.", "fol": "", "prediction": ["all x.((Individual(x) & BestSurvivalAlleles(x)) -> SurvivesWithLargestHazard(x))"]}
{"id": "eqasc_train_2957", "nl": "Animals require alleles for warmth.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresAllelesForWarmth(x))"]}
{"id": "eqasc_train_2958", "nl": "Electron transport is the final stage of aerobic respiration.", "fol": "", "prediction": ["all x.(ElectronTransport(x) -> FinalStageOfAerobicRespiration(x))"]}
{"id": "eqasc_train_2959", "nl": "Aerobic respiration uses oxygen and releases carbon in the form of carbon dioxide.", "fol": "", "prediction": ["all x.(AerobicRespiration(x) -> (UsesOxygen(x) & ReleasesCarbon(x)))"]}
{"id": "eqasc_train_2960", "nl": "electron transport is the final stage of a process that uses oxygen and releases carbon", "fol": "", "prediction": ["all x y.((ElectronTransport(x) & Process(y)) -> (UsesOxygen(x) & ReleasesCarbon(x)))"]}
{"id": "eqasc_train_2961", "nl": "Electron transport is like a waterfall.", "fol": "", "prediction": ["all x.(ElectronTransport(x) -> Waterfall(x))"]}
{"id": "eqasc_train_2962", "nl": "Transport like a waterfall is the final stage of aerobic respiration", "fol": "", "prediction": ["all x y.((Transportation(x) & Waterfall(y)) -> FinalStageOfAerobicRespiration(x,y))"]}
{"id": "eqasc_train_2963", "nl": "Aerobic respiration requires Oxygen.", "fol": "", "prediction": ["all x.(AerobicRespiration(x) -> RequiresOxygen(x))"]}
{"id": "eqasc_train_2964", "nl": "Electron transport involves oxygen", "fol": "", "prediction": ["all x.(ElectronTransport(x) -> InvolvesOxygen(x))"]}
{"id": "eqasc_train_2965", "nl": "Aerobic respiration occurs only in the presence of oxygen.", "fol": "", "prediction": ["all x.(AerobicRespiration(x) -> exists y.(Oxygen(y) & PresenceOf(x,y))))"]}
{"id": "eqasc_train_2966", "nl": "Electron transport occurs only in the presence of oxygen.", "fol": "", "prediction": ["all x.(ElectronTransport(x) -> exists y.(Oxygen(y) & PresenceOf(x,y))))"]}
{"id": "eqasc_train_2967", "nl": "Last, the final project is due.", "fol": "", "prediction": ["(FinalProjectDue(x) & Last(x))"]}
{"id": "eqasc_train_2968", "nl": "Electron transport in the last stage of aerobic respiration.", "fol": "", "prediction": ["all x.(ElectronTransport(x) -> AerobicRespirationStage(x))"]}
{"id": "eqasc_train_2969", "nl": "Electron transport requires oxygen", "fol": "", "prediction": ["all x.(ElectronTransport(x) -> RequiresOxygen(x))"]}
{"id": "eqasc_train_2970", "nl": "Breathing gets oxygen into the body, but aerobic respiration occurs at the cellular level.", "fol": "", "prediction": ["all x y.((Breathing(x) & AerobicRespiration(y)) -> (GetsOxygenIntoBody(x) & OccursAtCellularLevel(y)))"]}
{"id": "eqasc_train_2971", "nl": "That the cellular level, the final stage of breathing oxygen is electron transport", "fol": "", "prediction": ["all x y z.((CellularLevel(x) & FinalStageOfBreathingOxygen(y) & ElectronTransport(z)) -> (BreathingOxygen(x) & ElectronTransport(x,z)))"]}
{"id": "eqasc_train_2972", "nl": "Long distance running, swimming, bicycling, and aerobic activity rely on endurance.", "fol": "", "prediction": ["all x.((LongDistanceRunning(x) | Swimming(x) | Bicycling(x) | AerobicActivity(x)) -> ReliesOnEndurance(x))"]}
{"id": "eqasc_train_2973", "nl": "Long distance running involves electron transport", "fol": "", "prediction": ["all x.(LongDistanceRunning(x) -> InvolvesElectronTransport(x))"]}
{"id": "eqasc_train_2974", "nl": "Aerobic respiration is an oxidative process which uses oxygen as a final electron acceptor.", "fol": "", "prediction": ["all x.(AerobicRespiration(x) -> (OxidativeProcess(x) & UsesOxygenAsElectronAcCEPTor(x)))"]}
{"id": "eqasc_train_2975", "nl": "oxygen is used as an electron acceptor in respiration", "fol": "", "prediction": ["all x y.((Oxygen(x) & Respiration(y)) -> UsedAsElectronAcCEPTor(x,y))"]}
{"id": "eqasc_train_2976", "nl": "Sweat wets the skin, and when it evaporates, it cools the body.", "fol": "", "prediction": ["all x y.((Sweat(x) & Skin(y)) -> (Wets(x,y) & Evaporates(x,y)))"]}
{"id": "eqasc_train_2977", "nl": "Evaporation cools the skin and thereby reduces body temperature.", "fol": "", "prediction": ["all x y.((Evaporation(x) & Skin(y)) -> (Cools(x,y) & ReducesBodyTemperature(x)))"]}
{"id": "eqasc_train_2978", "nl": "sweat wets the skin to reduce body temperature", "fol": "", "prediction": ["all x y z.((Sweat(x) & Skin(y) & BodyTemperature(z)) -> WetsToReduce(x,y,z))"]}
{"id": "eqasc_train_2979", "nl": "Sweat is made of salt and water.", "fol": "", "prediction": ["all x.(Sweat(x) -> (MadeOfSalt(x) & MadeOfWater(x)))"]}
{"id": "eqasc_train_2980", "nl": "Water and salt wets the skin, and when it evaporates, it cools the body.", "fol": "", "prediction": ["all x y.((Water(x) & Salt(y)) -> (WetsSkin(x) & Evaporates(y) & CoolsBody(y)))"]}
{"id": "eqasc_train_2981", "nl": "Skin is hot and red, but wet with sweat.", "fol": "", "prediction": ["all x.(Skin(x) -> (Hot(x) & Red(x) & WetWithSweat(x)))"]}
{"id": "eqasc_train_2982", "nl": "the body is cooled after evaporation, when wet skin is hot and red", "fol": "", "prediction": ["all x y.((Body(x) & Body(y) & CooledAfterEvaporation(x) & WetSkin(y)) -> (Hot(y) & Red(y)))"]}
{"id": "eqasc_train_2983", "nl": "Sweat is released from sweat glands beneath the skin, and as it evaporates, the skin is cooled.", "fol": "", "prediction": ["all x y.((SweatGlands(x) & Skin(y)) -> (ReleasesFromSweatGlands(x,y) & Evaporates(x,y)))"]}
{"id": "eqasc_train_2984", "nl": "skin is cooled by evaporation", "fol": "", "prediction": ["all x.(Skin(x) -> CooledByEvaporation(x))"]}
{"id": "eqasc_train_2985", "nl": "Fig 4-23 sweat contains water, salt, lactic acid, vit.", "fol": "", "prediction": ["(Fig.4-23Sweat(Fig) & ContainsWater(Fig) & ContainsSalt(Fig) & ContainsLacticAcid(Fig) & ContainsVit(Fig))"]}
{"id": "eqasc_train_2986", "nl": "evaporation of water cools the body", "fol": "", "prediction": ["all x y.((EvaporationOfWater(x) & Body(y)) -> Cools(x,y))"]}
{"id": "eqasc_train_2987", "nl": "Diaphoresis is a fancy medical term for perspiration or sweating.", "fol": "", "prediction": ["all x.(Diaphoresis(x) -> (FancyMedicalTermForPerspiration(x) | FancyMedicalTermForSweeping(x)))"]}
{"id": "eqasc_train_2988", "nl": "Perspiration wets the skin and when it evaporates it cools the body.", "fol": "", "prediction": ["all x y.((Perspiration(x) & Skin(y)) -> (Wets(x,y) & Evaporates(x,y)))"]}
{"id": "eqasc_train_2989", "nl": "The evaporation of water from the skin cools the body.", "fol": "", "prediction": ["all x y.((EvaporationOfWater(x) & Skin(y)) -> CoolsBody(x,y))"]}
{"id": "eqasc_train_2990", "nl": "High humidity interferes with evaporation of the sweat.", "fol": "", "prediction": ["all x.(HighHumidity(x) -> InterferesWithEvaporationOfSweat(x))"]}
{"id": "eqasc_train_2991", "nl": "High humidity interferes with cooling of the body.", "fol": "", "prediction": ["all x.(HighHumidity(x) -> InterferesWithCooling(x))"]}
{"id": "eqasc_train_2992", "nl": "Normally, the body cools itself by sweating.", "fol": "", "prediction": ["all x.((Body(x) & Sweats(x)) -> Cools(x))"]}
{"id": "eqasc_train_2993", "nl": "The body cools itself when wetness evaporates from skin", "fol": "", "prediction": ["all x y.((Body(x) & WetnessEvaporates(x) & Skin(y)) -> Cools(x))"]}
{"id": "eqasc_train_2994", "nl": "Perspiration There are about 2 million sweat glands in the average human body.", "fol": "", "prediction": ["all x.(Perspiration(x) -> exists y.(SweatGlands(y) & InAverageHumanBody(x,y)))"]}
{"id": "eqasc_train_2995", "nl": "Perspiration wets the skin, and when it evaporates, it cools the body.", "fol": "", "prediction": ["all x y.((Perspiration(x) & Skin(y)) -> (Wets(x,y) & Evaporates(x,y) & CoolsBody(x)))"]}
{"id": "eqasc_train_2996", "nl": "Evaporation is when a liquid turns into a gas.", "fol": "", "prediction": ["all x.(Evaporation(x) -> (Liquid(x) & TurnsIntoGas(x)))"]}
{"id": "eqasc_train_2997", "nl": "Sweat cools the body when it turns into a gas.", "fol": "", "prediction": ["all x y.((Sweat(x) & Gas(y)) -> CoolsBody(x,y))"]}
{"id": "eqasc_train_2998", "nl": "Sweat is water, salt, some urea.", "fol": "", "prediction": ["all x.(Sweat(x) -> (Water(x) & Salt(x) & SomeUrea(x)))"]}
{"id": "eqasc_train_2999", "nl": "Something containing urea cools the body", "fol": "", "prediction": ["all x.((Urea(x) & CoolsBody(x)) -> CoolsBody(x))"]}
{"id": "eqasc_train_3000", "nl": "salt and water wet the skin, and when it evaporates, it cools the body", "fol": "", "prediction": ["all x y z.((Salt(x) & Water(y) & Skin(z) & Wets(x,z)) -> CoolsBody(x))"]}
{"id": "eqasc_train_3001", "nl": "a mirror is used for reflecting light", "fol": "", "prediction": ["all x y.((Mirror(x) & Mirror(y)) -> UsedForReflectingLight(x,y))"]}
{"id": "eqasc_train_3002", "nl": "A mirror is used for reflecting visible energy.", "fol": "", "prediction": ["all x.(Mirror(x) -> ReflectsVisibleEnergy(x))"]}
{"id": "eqasc_train_3003", "nl": "a mirror is used for reflecting rays or beams", "fol": "", "prediction": ["all x.(Mirror(x) -> (ReflectsRays(x) | ReflectsBeams(x)))"]}
{"id": "eqasc_train_3004", "nl": "Light is reflected refracted or absorbed.", "fol": "", "prediction": ["all x.(Light(x) -> (Reflected(x) | Absorbed(x)))"]}
{"id": "eqasc_train_3005", "nl": "Mirrors don't refract or absorb light.", "fol": "", "prediction": ["all x.(Mirror(x) -> (-Refracts(x) & -AbsorbsLight(x)))"]}
{"id": "eqasc_train_3006", "nl": "Millions of tiny mirrors move to reflect the light and create the image on a projection screen.", "fol": "", "prediction": ["all x y.((MillionsOfTinyMirrors(x) & ProjectorScreen(y)) -> (MovesToReflectLight(x,y) & CreatesImage(x,y)))"]}
{"id": "eqasc_train_3007", "nl": "a mirror is used for creating an image through reflection.", "fol": "", "prediction": ["all x.(Mirror(x) -> CreatesImageThroughReflection(x))"]}
{"id": "eqasc_train_3008", "nl": "waves of light bounce off of mirrors", "fol": "", "prediction": ["all x y.((WavesOfLight(x) & Mirror(y)) -> BounceOff(x,y))"]}
{"id": "eqasc_train_3009", "nl": "An image is formed in the mirrors each time the light bounces, forming multiple images.", "fol": "", "prediction": ["all x y.((Image(x) & Mirrors(y) & LightBounces(x,y)) -> FormedIn(x,y))"]}
{"id": "eqasc_train_3010", "nl": "a mirror is used for reflecting images", "fol": "", "prediction": ["all x y.((Mirror(x) & Image(y)) -> UsedForReflecting(x,y))"]}
{"id": "eqasc_train_3011", "nl": "Light enters the camera through the lens and is reflected upward by the mirror to the ground glass.", "fol": "", "prediction": ["all x y z.((Camera(x) & Lens(y) & Mirror(z)) -> (Enters(x,y) & ReflectsUpward(z,x)))"]}
{"id": "eqasc_train_3012", "nl": "A camera needs a mirror to help redirect light", "fol": "", "prediction": ["all x.(Camera(x) -> NeedsMirrorToRedirectLight(x))"]}
{"id": "eqasc_train_3013", "nl": "Float glass, reflective glass, laminated glass, mirrored float glass.", "fol": "", "prediction": ["all x.(FloatGlass(x) & ReflectiveGlass(x) & LaminatedGlass(x) & MirroredFloatGlass(x))"]}
{"id": "eqasc_train_3014", "nl": "Reflective glass is used for reflecting light", "fol": "", "prediction": ["all x.(ReflectiveGlass(x) -> UsedForReflectingLight(x))"]}
{"id": "eqasc_train_3015", "nl": "LEDs are an ideal light source.", "fol": "", "prediction": ["all x.(LED(x) -> IdealLightSource(x))"]}
{"id": "eqasc_train_3016", "nl": "a mirror is used for reflecting LEDs", "fol": "", "prediction": ["all x y.((Mirror(x) & LED(y)) -> UsedForReflecting(x,y))"]}
{"id": "eqasc_train_3017", "nl": "Typical mirror materials are quartz or nickel plated aluminum.", "fol": "", "prediction": ["all x.(MirrorMaterial(x) -> (Quarz(x) | NickelPlaidAluminum(x)))"]}
{"id": "eqasc_train_3018", "nl": "quartz or nickel plated aluminum are used for reflecting light", "fol": "", "prediction": ["all x.((Quarz(x) | NickelPlaidAluminum(x)) -> ReflectsLight(x))"]}
{"id": "eqasc_train_3019", "nl": "Sunlight is white light.", "fol": "", "prediction": ["all x.(Sunlight(x) -> WhiteLight(x))"]}
{"id": "eqasc_train_3020", "nl": "a mirror reflects sunlight", "fol": "", "prediction": ["all x y.((Mirror(x) & Sunlight(y)) -> Reflects(x,y))"]}
{"id": "eqasc_train_3021", "nl": "Bivalves feed on plankton and nonliving organic matter.", "fol": "", "prediction": ["all x.(Bivalves(x) -> (FeedsOnPlankton(x) & FeedsOnNonLivingOrganicMatter(x)))"]}
{"id": "eqasc_train_3022", "nl": "Clams and oysters are examples of bivalves.", "fol": "", "prediction": ["all x.((Chamber(x) | Oyster(x)) -> Bivalves(x))"]}
{"id": "eqasc_train_3023", "nl": "Clams and oysters feed on plankton", "fol": "", "prediction": ["all x y z.((Clam(x) & Oyster(y) & Plankton(z)) -> (FeedsOn(x,z) & FeedsOn(y,z)))"]}
{"id": "eqasc_train_3024", "nl": "Scallops, oysters and clams are bivalves.", "fol": "", "prediction": ["all x.((Scallop(x) | Oyster(x) | Clam(x)) -> Bivalves(x))"]}
{"id": "eqasc_train_3025", "nl": "clams feed on plankton and nonliving organic matter", "fol": "", "prediction": ["all x.(Climate(x) -> (FeedsOnPlankton(x) & FeedsOnNonlivingOrganicMatter(x)))"]}
{"id": "eqasc_train_3026", "nl": "mussels feed on plankton and nonliving organic matter.", "fol": "", "prediction": ["all x.(Muschel(x) -> (FeedsOnPlankton(x) & FeedsOnNonLivingOrganicMatter(x)))"]}
{"id": "eqasc_train_3027", "nl": "Most animals that live on rocky shores eat plankton.", "fol": "", "prediction": ["all x.((Animal(x) & LivesOnRockySurfaces(x)) -> EatsPlankton(x))"]}
{"id": "eqasc_train_3028", "nl": "Most animals that live on rocky shores eat nonliving organic matter", "fol": "", "prediction": ["all x.((Animal(x) & LivesOnRockySurfaces(x)) -> EatsNonlivingOrganicMatter(x))"]}
{"id": "eqasc_train_3029", "nl": "mussels feed on nonliving organic matter", "fol": "", "prediction": ["all x.(Muschel(x) -> FeedsOnNonLivingOrganicMatter(x))"]}
{"id": "eqasc_train_3030", "nl": "Clams and oysters feed on plankton and nonliving organic matter", "fol": "", "prediction": ["all x y.((Clam(x) & Oyster(y)) -> (FeedsOnPlankton(x) & FeedsOnNonlivingOrganicMatter(x)))"]}
{"id": "eqasc_train_3031", "nl": "Mussels eat plankton and nonliving organic matter.", "fol": "", "prediction": ["all x.(Mussel(x) -> (EatsPlankton(x) & EatsNonlivingOrganicMatter(x)))"]}
{"id": "eqasc_train_3032", "nl": "Bivalve molluscs are very common.", "fol": "", "prediction": ["all x.(Bivalve(x) -> VeryCommon(x))"]}
{"id": "eqasc_train_3033", "nl": "Molluscs feed on plankton and nonliving organic matter.", "fol": "", "prediction": ["all x.(Mullusc(x) -> (FeedsOnPlankton(x) & FeedsOnNonLivingOrganicMatter(x)))"]}
{"id": "eqasc_train_3034", "nl": "mussels feed on plankton and nonliving organic matter", "fol": "", "prediction": ["all x.(Muschel(x) -> (FeedsOnPlankton(x) & FeedsOnNonLivingOrganicMatter(x)))"]}
{"id": "eqasc_train_3035", "nl": "Bivalved arthropods are especially common.", "fol": "", "prediction": ["all x.(BivalvedArthropod(x) -> Common(x))"]}
{"id": "eqasc_train_3036", "nl": "arthropods feed on plankton", "fol": "", "prediction": ["all x.(Arthropod(x) -> FeedsOnPlankton(x))"]}
{"id": "eqasc_train_3037", "nl": "Clams feed on plankton and nonliving organic matter", "fol": "", "prediction": ["all x.(Clam(x) -> (FeedsOnPlankton(x) & FeedsOnNonlivingOrganicMatter(x)))"]}
{"id": "eqasc_train_3038", "nl": "Head hair is especially important in preventing heat loss from the body.", "fol": "", "prediction": ["all x.(HeadHair(x) -> PreventsHeatLoss(x))"]}
{"id": "eqasc_train_3039", "nl": "Almost 90 percent of the body's heat loss is from the head.", "fol": "", "prediction": ["all x.(HeatLoss(x) -> Head(x))"]}
{"id": "eqasc_train_3040", "nl": "Without hair, 90 percent of the body's heat would be lost.", "fol": "", "prediction": ["all x.((Hair(x) & LosesHeat(x,90)) -> Hair(x))"]}
{"id": "eqasc_train_3041", "nl": "Hypothermia occurs when the body loses heat at a faster rate then it can be produced.", "fol": "", "prediction": ["all x.(Hypothermia(x) -> (BodyLosesHeatFasterRate(x) & CanBeProduced(x)))"]}
{"id": "eqasc_train_3042", "nl": "Head hair can help prevent hypothermia", "fol": "", "prediction": ["all x.(HeadHair(x) -> HelpsPreventHypothermia(x))"]}
{"id": "eqasc_train_3043", "nl": "Hats The number area for heat loss on the body is the head.", "fol": "", "prediction": ["all x.(Hat(x) -> HeatLossOnBody(x))"]}
{"id": "eqasc_train_3044", "nl": "Hats prevent heat loss from the body after losing hair", "fol": "", "prediction": ["all x y.((Hat(x) & Body(y) & LosesHair(x,y)) -> PreventsHeatLoss(x,y))"]}
{"id": "eqasc_train_3045", "nl": "Hypothermia Loss of body heat caused by exposure is called Hypothermia.", "fol": "", "prediction": ["all x.((LossOfBodyHeat(x) & Exposure(x)) -> Hypothermia(x))"]}
{"id": "eqasc_train_3046", "nl": "Head hair is especially important in preventing hypothermia.", "fol": "", "prediction": ["all x.(HeadHair(x) -> ImportantInPreventingHypothermia(x))"]}
{"id": "eqasc_train_3047", "nl": "Although hair is created by living follicles in the scalp, it's dead.", "fol": "", "prediction": ["all x.((Hair(x) & CreatedByLivingFollicles(x) & InScape(x)) -> Dead(x))"]}
{"id": "eqasc_train_3048", "nl": "living follicles in the scalp is especially important in preventing heat loss from the body", "fol": "", "prediction": ["all x.((LivingFolliclesInScapula(x) & PreventsHeatLoss(x)) -> ParticularlyImportantInPreventingHeatLoss(x))"]}
{"id": "eqasc_train_3049", "nl": "Insulation serves to both prevent heat loss in the winter and heat gain in the summer.", "fol": "", "prediction": ["all x.(Insulation(x) -> (PreventsHeatLoss(x,Winter) & PreventsHeatGain(x,Summer)))"]}
{"id": "eqasc_train_3050", "nl": "Head hair is a type of insulation", "fol": "", "prediction": ["all x.(HeadHair(x) -> Insulation(x))"]}
{"id": "eqasc_train_3051", "nl": "Almost half the body heat lost in cold conditions escapes from the head.", "fol": "", "prediction": ["all x y.((BodyHeat(x) & ColdConditions(y)) -> EscapesFromHead(x,y))"]}
{"id": "eqasc_train_3052", "nl": "Head hair is especially important in cold conditions. ", "fol": "", "prediction": ["all x.((HeadHair(x) & ColdConditions(x)) -> ImportantIn(x,HeadHair))"]}
{"id": "eqasc_train_3053", "nl": "Alopecia Hair loss is referred to as alopecia.", "fol": "", "prediction": ["all x.(Alopecia(x) -> HairLoss(x))"]}
{"id": "eqasc_train_3054", "nl": "Alopecia can cause heat loss from the body", "fol": "", "prediction": ["all x.(Alopecia(x) -> CausesHeatLossFromBody(x))"]}
{"id": "eqasc_train_3055", "nl": "Head hair is especially important in preventing energy loss from the body.", "fol": "", "prediction": ["all x.(HeadHair(x) -> PreventsEnergyLoss(x))"]}
{"id": "eqasc_train_3056", "nl": "Bighorns have hollow hair that traps body heat.", "fol": "", "prediction": ["all x.(Bighorn(x) -> (HasHollowHair(x) & TrapsBodyHeat(x)))"]}
{"id": "eqasc_train_3057", "nl": "bighorns' hollow hair prevents heat loss", "fol": "", "prediction": ["all x.((BighornsHollowHair(x) & PreventsHeatLoss(x)) -> HollowHair(x))"]}
{"id": "eqasc_train_3058", "nl": "Hair is actually composed of a protein called keratin.", "fol": "", "prediction": ["all x.(Hair(x) -> ComposedOfKeratin(x))"]}
{"id": "eqasc_train_3059", "nl": "Keratin is especially important in preventing heat loss from the body.", "fol": "", "prediction": ["all x.(Keratin(x) -> PreventsHeatLoss(x))"]}
{"id": "eqasc_train_3060", "nl": "if all members of a species cannot produce offspring then that species will likely become extinct", "fol": "", "prediction": ["all x y.((Species(x) & -ProducesOffspring(x,y)) -> ProbablyExtinct(x))"]}
{"id": "eqasc_train_3061", "nl": "Extinct species are species that are gone forever.", "fol": "", "prediction": ["all x.(ExtinctSpecies(x) -> (GoingForever(x)))"]}
{"id": "eqasc_train_3062", "nl": "If all members of a  species cannot produce offspring, then that species will be gone forever. ", "fol": "", "prediction": ["all x.((MembersOfSpecies(x) & -ProduceOffspring(x)) -> GoesForever(x))"]}
{"id": "eqasc_train_3063", "nl": "Passenger pigeons are extinct.", "fol": "", "prediction": ["all x.(PassengerPigeon(x) -> Extinct(x))"]}
{"id": "eqasc_train_3064", "nl": "Passenger pigeons could not produce enough offspring.", "fol": "", "prediction": ["all x.(PassengerPigeon(x) -> -ProducesEnoughOffspring(x))"]}
{"id": "eqasc_train_3065", "nl": "Whatever the cause, mass extinctions affect biological diversity profoundly.", "fol": "", "prediction": ["all x.(MassExtinction(x) -> (AffectsBiologicalDiversity(x) & WhateverCause(x)))"]}
{"id": "eqasc_train_3066", "nl": "if all members of a species cannot produce offspring it ffect biological diversity", "fol": "", "prediction": ["all x y.((Species(x) & -ProducesOffspring(x,y)) -> FfectsBiologicalDiversity(x))"]}
{"id": "eqasc_train_3067", "nl": "Extinct animals include the dodo bird and the saber-toothed tiger.", "fol": "", "prediction": ["all x.(ExtinctAnimal(x) -> (DodoBird(x) | SaberToothedTiger(x)))"]}
{"id": "eqasc_train_3068", "nl": "The last dodo birds could not produce offspring.", "fol": "", "prediction": ["all x.(DodoBird(x) -> -ProducesOffspring(x))"]}
{"id": "eqasc_train_3069", "nl": "Avian species are less likely to become extinct if they are common across large ranges.", "fol": "", "prediction": ["all x.((AvianSpecies(x) & CommonAcrossLargeRanges(x)) -> LessLikelyToBecomeExtinct(x))"]}
{"id": "eqasc_train_3070", "nl": "Avian species are less likely to end up extinct if they produce offspring. ", "fol": "", "prediction": ["all x.((AvianSpecies(x) & ProducesOffspring(x)) -> LessLikelyToEndUpExtinct(x))"]}
{"id": "eqasc_train_3071", "nl": "If an animal become extinct, it's gone forever.", "fol": "", "prediction": ["all x.((Animal(x) & Extinct(x)) -> GoesForever(x))"]}
{"id": "eqasc_train_3072", "nl": "if all members of a species cannot produce offspring then that species will likely be gone forever", "fol": "", "prediction": ["all x y.((Species(x) & -ProducesOffspring(x,y)) -> ProbablyGoedForever(x))"]}
{"id": "eqasc_train_3073", "nl": "For example, geese are a species and ducks are a species.", "fol": "", "prediction": ["all x y.((Geese(x) & Duck(y)) -> (Species(x) & Species(y)))"]}
{"id": "eqasc_train_3074", "nl": "If all geese were suddenly unable to produce offspring then they will become extinct.", "fol": "", "prediction": ["all x.((Geese(x) & SuddenlyCannotProduceOffspring(x)) -> Extinct(x))"]}
{"id": "eqasc_train_3075", "nl": "When they mate with females, no offspring are produced.", "fol": "", "prediction": ["all x.((MateWithFemales(x) & -ProducesOffspring(x)) -> FemalesMateWithFemales(x))"]}
{"id": "eqasc_train_3076", "nl": "if members of a species cannot mate with females then that species will likely become extinct", "fol": "", "prediction": ["all x y.((Species(x) & -MateWithFemales(x)) -> Extinct(y))"]}
{"id": "eqasc_train_3077", "nl": "Roots grow in length and width from primary and secondary meristem.", "fol": "", "prediction": ["all x.(Root(x) -> (GrowsLength(x) & GrowsWidth(x) & PrimaryMeristem(x) & SecondaryMeristem(x)))"]}
{"id": "eqasc_train_3078", "nl": "Most plants have roots .", "fol": "", "prediction": ["all x.(Plant(x) -> HasRoots(x))"]}
{"id": "eqasc_train_3079", "nl": "most plants have a primary and secondary meristem", "fol": "", "prediction": ["all x.(Plant(x) -> (HasPrimaryMeristem(x) & HasSecondaryMeristem(x)))"]}
{"id": "eqasc_train_3080", "nl": "Meristems are found in both roots and shoots.", "fol": "", "prediction": ["all x.(Meristem(x) -> (FoundInRoots(x) & FoundInShoes(x)))"]}
{"id": "eqasc_train_3081", "nl": "Roots grow in length and width from both roots and shoots", "fol": "", "prediction": ["all x y z.((Root(x) & Root(y) & Shoot(z)) -> (GrowsInLengthAndWidth(x,y) & FromRootsAndShoots(x,z)))"]}
{"id": "eqasc_train_3082", "nl": "Vascular cambium is a primary meristem.", "fol": "", "prediction": ["all x.(VascularCambium(x) -> PrimaryMeristem(x))"]}
{"id": "eqasc_train_3083", "nl": "Roots grow in length and width from the vascular cambium.", "fol": "", "prediction": ["all x.(Root(x) -> (GrowsLength(x) & GrowsWidth(x) & FromVascularCambium(x)))"]}
{"id": "eqasc_train_3084", "nl": "Meristems are self-organising.", "fol": "", "prediction": ["all x.(Meristem(x) -> SelfOrganizing(x))"]}
{"id": "eqasc_train_3085", "nl": "roots are self-organising", "fol": "", "prediction": ["all x.(Root(x) -> SelfOrganizing(x))"]}
{"id": "eqasc_train_3086", "nl": "For example, carrots and beets are roots.", "fol": "", "prediction": ["all x.((Carrot(x) | Beet(x)) -> Root(x))"]}
{"id": "eqasc_train_3087", "nl": "Carrots and beets grow in length and width from primary and secondary meristem.", "fol": "", "prediction": ["all x y.((Carrot(x) & Beet(y)) -> (GrowsLength(x,y) & GrowsWidth(x,y)))"]}
{"id": "eqasc_train_3088", "nl": "E.g., growth in plants is mostly confined to meristems.", "fol": "", "prediction": ["all x y.((Plant(x) & Growth(y)) -> (ConconfinedToMeristems(x,y)))"]}
{"id": "eqasc_train_3089", "nl": "plants have roots", "fol": "", "prediction": ["all x.(Plant(x) -> HasRoots(x))"]}
{"id": "eqasc_train_3090", "nl": "Primary growth results primarily from activity of the lateral meristems.", "fol": "", "prediction": ["all x.(PrimaryGrowth(x) -> (ActivityOfLatinalMeristems(x) & PrimaryGrowth(x)))"]}
{"id": "eqasc_train_3091", "nl": "Roots grow in length and width results primarily from activity of the lateral locations", "fol": "", "prediction": ["all x.(Root(x) -> (GrowsInLength(x) & GrowsInWidth(x) & ActivityOfLatlateralLocations(x)))"]}
{"id": "eqasc_train_3092", "nl": "Trees have roots.", "fol": "", "prediction": ["all x.(Tree(x) -> HasRoots(x))"]}
{"id": "eqasc_train_3093", "nl": "Trees have a primary and a secondary meristem", "fol": "", "prediction": ["all x.(Tree(x) -> (HasPrimaryMeristem(x) & HasSecondaryMeristem(x)))"]}
{"id": "eqasc_train_3094", "nl": "Meristem growth occurs by the production of primordia which develop at the meristem periphery.", "fol": "", "prediction": ["all x.(MeristemGrowth(x) -> (ProducesPrimordia(x) & DevelopsAtMeristemPeriphery(x)))"]}
{"id": "eqasc_train_3095", "nl": "Roots grow in length and width from he production of primordia ", "fol": "", "prediction": ["all x y.((Root(x) & Primordia(y)) -> (GrowsInLength(x,y) & GrowsInWidth(x,y)))"]}
{"id": "eqasc_train_3096", "nl": "Growth in girth is caused by other meristems, called secondary meristems.", "fol": "", "prediction": ["all x.(GirthGrowth(x) -> (CausedBySecondaryMeristems(x)))"]}
{"id": "eqasc_train_3097", "nl": "Roots grow in length and girth caused by meristems", "fol": "", "prediction": ["all x.(Root(x) -> (GrowsLength(x) & GrowsGirth(x) & CausedByMeristems(x)))"]}
{"id": "eqasc_train_3098", "nl": "Kids see the underground root systems of trees and then an aerial view of plants in the city.", "fol": "", "prediction": ["all x y z.((Kid(x) & Tree(y) & City(z)) -> (SeesUndergroundRootSystems(x,y) & SeesAerialViewOfPlants(x,z)))"]}
{"id": "eqasc_train_3099", "nl": "Underground systems grow in width and length.", "fol": "", "prediction": ["all x.(UndergroundSystem(x) -> (GrowsInWidth(x) & GrowsInLength(x)))"]}
{"id": "eqasc_train_3100", "nl": "Ethanol is produced by alcoholic fermentation of the glucose in corn or other plants.", "fol": "", "prediction": ["all x.(Ethanol(x) -> (ProducedByAlcoholicFermentation(x) & ProducesGlucoseInCornOrOtherPlants(x)))"]}
{"id": "eqasc_train_3101", "nl": "Plants use the sun's energy to transform carbon dioxide gas and water into a sugar called glucose.", "fol": "", "prediction": ["all x.(Plant(x) -> (UsesSunEnergy(x) & TransformsCarbonDioxideGasAndWater(x) & ProducesGlucose(x)))"]}
{"id": "eqasc_train_3102", "nl": "Ethanol production is reliant on the sun's energy", "fol": "", "prediction": ["all x.(EthanolProduction(x) -> ReliantOnSunsEnergy(x))"]}
{"id": "eqasc_train_3103", "nl": "Fermentation is the chemical change of sugar to alcohol.", "fol": "", "prediction": ["all x.(Fermentation(x) -> ChemicalChange(x,Sugar,Alcohol))"]}
{"id": "eqasc_train_3104", "nl": "Ethanol is produced from the sugar in other plants changed into alcohol", "fol": "", "prediction": ["all x y.((Ethanol(x) & Sugar(y)) -> (ProducedFrom(x,y) & ChangedIntoAlcohol(x)))"]}
{"id": "eqasc_train_3105", "nl": "Cars can run on pure ethanol or a mixture of petrol and ethanol.", "fol": "", "prediction": ["all x.(Car(x) -> (RunsOnPetrol(x) | RunsOnPetrol(x) | RunsOnEthanol(x)))"]}
{"id": "eqasc_train_3106", "nl": "Cars can run on alcoholic fermentation of the glucose in corn or other plants", "fol": "", "prediction": ["all x.(Car(x) -> (RunsOnAlcoholicFermentation(x) & (InCorn(x) | InPlants(x))))"]}
{"id": "eqasc_train_3107", "nl": "Ethanol depresses neuronal excitability.", "fol": "", "prediction": ["all x.(Ethanol(x) -> DepressesNeuronalExcitability(x))"]}
{"id": "eqasc_train_3108", "nl": "alcoholic fermentation of the glucose in corn or other plants depresses neuronal excitability", "fol": "", "prediction": ["all x y.((AlcoholicFermentation(x) & GlucoseInCornOrOtherPlants(y)) -> DepressesNeuronalExcitability(x,y))"]}
{"id": "eqasc_train_3109", "nl": "Ethanol qualifies as an alternative fuel.", "fol": "", "prediction": ["all x.(Ethanol(x) -> AlternativeFuel(x))"]}
{"id": "eqasc_train_3110", "nl": "corn can be used as an alternative fuel", "fol": "", "prediction": ["all x.((Corn(x) & AlternativeFuel(x)) -> CanBeUsedAs(x,Corn))"]}
{"id": "eqasc_train_3111", "nl": "Ethanol is another transportation fuel.", "fol": "", "prediction": ["(TransportationFuel(Ethanol) & TransportationFuel(Ethanol))"]}
{"id": "eqasc_train_3112", "nl": "A transportation fuel is produced by alcoholic fermentation of the glucose in corn or other plants.", "fol": "", "prediction": ["all x.(TransportationFuel(x) -> (AlcoholicFermentationOfGlucose(x) & ProducedBy(x,Corn,OtherPlants)))"]}
{"id": "eqasc_train_3113", "nl": "Of course, ethanol is important to Iowa.", "fol": "", "prediction": ["(Iowa(Ethanol) & ImportantToIowa(Ethanol))"]}
{"id": "eqasc_train_3114", "nl": "Corn is important to Iowa", "fol": "", "prediction": ["all x.(Corn(x) -> ImportantToIowa(x))"]}
{"id": "eqasc_train_3115", "nl": "Ethanol is the most widely used biofuel today.", "fol": "", "prediction": ["Ethanol (Biofuel(e) & Widespread(e))"]}
{"id": "eqasc_train_3116", "nl": "the most widely used biofuel today is produced by alcoholic fermentation of the glucose in corn or other plants", "fol": "", "prediction": ["all x.((Biofuel(x) & AlcoholicFermentation(x) & ProducedBy(x,Glucose,Corn,OtherPlants)) -> WidelyUsed(x))"]}
{"id": "eqasc_train_3117", "nl": "Ethanol is a grain alcohol.", "fol": "", "prediction": ["all x.(Ethanol(x) -> GrainAlcohol(x))"]}
{"id": "eqasc_train_3118", "nl": "Grain alcohol is produced by fermentation of the glucose in corn or other plants.", "fol": "", "prediction": ["all x.(GrainAlcohol(x) -> (ProducedByFermentationOfGlucose(x) & (InCorn(x) | InOtherPlants(x))))"]}
{"id": "eqasc_train_3119", "nl": "Ethanol is a fuel made of corn.", "fol": "", "prediction": ["all x.(Ethanol(x) -> MadeOfCorn(x))"]}
{"id": "eqasc_train_3120", "nl": "fermentation can be used to make fuel", "fol": "", "prediction": ["all x.(Fermentation(x) -> CanBeUsedToMakeFuel(x))"]}
{"id": "eqasc_train_3121", "nl": "Glucose, a type of sugar, is the body's fuel.", "fol": "", "prediction": ["all x.(Glucose(x) -> BodyFuel(x))"]}
{"id": "eqasc_train_3122", "nl": "Ethanol is produced by alcoholic fermentation of the sugar in corn or other plants.", "fol": "", "prediction": ["all x.(Ethanol(x) -> (ProducedByAlcoholicFermentation(x) & SugarInCornOrOtherPlants(x)))"]}
{"id": "eqasc_train_3123", "nl": "Methanol and Ethanol are two types of alcohol fuels used in cars.", "fol": "", "prediction": ["all x.((AlcoholicFuel(x) & Methanol(x) & Ethanol(x)) -> UsedInCars(x))"]}
{"id": "eqasc_train_3124", "nl": "Fuel made from corn is being used today in cars", "fol": "", "prediction": ["all x y.((Fuel(x) & Corn(y)) -> UsedInCars(x,y))"]}
{"id": "eqasc_train_3125", "nl": "Alcohol includes ethanol and methanol.", "fol": "", "prediction": ["all x.(Alcohol(x) -> (IncludesEthanol(x) | IncludesMethanol(x)))"]}
{"id": "eqasc_train_3126", "nl": "alcohol can make methanol", "fol": "", "prediction": ["all x.(Alcohol(x) -> CanMakeMethanol(x))"]}
{"id": "eqasc_train_3127", "nl": "Ethanol is a domestically produced, renewable fuel.", "fol": "", "prediction": ["all x.(Ethanol(x) -> (DomesticallyProduced(x) & RenewableFuel(x)))"]}
{"id": "eqasc_train_3128", "nl": "Alcoholic fermentation of the glucose in corn produces a renewable fuel", "fol": "", "prediction": ["all x y.((AlcoholicFermentation(x) & SugarInCorn(y)) -> ProducesRenewableFuel(x,y))"]}
{"id": "eqasc_train_3129", "nl": "Corn sugar is primarily glucose.", "fol": "", "prediction": ["all x.(CornSugar(x) -> PrimarilyGlucose(x))"]}
{"id": "eqasc_train_3130", "nl": "Ethanol is produced by alcoholic fermentation of the sugar in corn", "fol": "", "prediction": ["all x.(Ethanol(x) -> (ProducedByAlcoholicFermentation(x) & SugarInCorn(x)))"]}
{"id": "eqasc_train_3131", "nl": "scraping oneself on a contaminated object may cause infection", "fol": "", "prediction": ["all x y.((ScrapingOneselfOnContaminatedObject(x) & ScrapingOnContaminatedObject(y)) -> MayCauseInfection(x,y))"]}
{"id": "eqasc_train_3132", "nl": "Infection can cause meningitis.", "fol": "", "prediction": ["all x.(Infection(x) -> CausesMeningitis(x))"]}
{"id": "eqasc_train_3133", "nl": "Meningitis can be caused by scraping oneself on a contaminated object.", "fol": "", "prediction": ["all x.(Meningitis(x) -> (CausesByScrapingOnContaminatedObject(x)))"]}
{"id": "eqasc_train_3134", "nl": "An infection is an invasion of the body by bacteria.", "fol": "", "prediction": ["all x.(Infection(x) -> InvasionByBacteria(x))"]}
{"id": "eqasc_train_3135", "nl": "Scraping oneself on a contaminated object may cause an invasion of the body by bacteria.", "fol": "", "prediction": ["all x y.((Scraping(x) & ContaminatedObject(y)) -> MayCauseBacteriaInvasion(x,y))"]}
{"id": "eqasc_train_3136", "nl": "Any infection can cause death.", "fol": "", "prediction": ["all x.(Infection(x) -> CausesDeath(x))"]}
{"id": "eqasc_train_3137", "nl": "scraping oneself can cause death", "fol": "", "prediction": ["all x.(ScrapingOneself(x) -> CausesDeath(x))"]}
{"id": "eqasc_train_3138", "nl": "Contact with infected blood, contaminated needles.", "fol": "", "prediction": ["all x.((InfectedBlood(x) & ContaminatedNeedles(x)) -> Contact(x))"]}
{"id": "eqasc_train_3139", "nl": "scraping oneself on an infected needle may cause infection", "fol": "", "prediction": ["all x y.((ScrapingOneselfOnInfectedNeedle(x) & InfectedNeedle(y)) -> MayCauseInfection(x,y))"]}
{"id": "eqasc_train_3140", "nl": "scaping oneself can cause death", "fol": "", "prediction": ["all x.(ScapingOneself(x) -> CausesDeath(x))"]}
{"id": "eqasc_train_3141", "nl": "Germs can contaminate surfaces and objects around the water.", "fol": "", "prediction": ["all x.(Germ(x) -> (ContaminatesSurfaces(x) & ContaminatesObjects(x)))"]}
{"id": "eqasc_train_3142", "nl": "Scraping oneself on surfaces or things that have germs may cause infection.", "fol": "", "prediction": ["all x.((Scraping(x) & (Surface(x) | Thing(x)) & HasGerms(x)) -> MayCauseInfection(x))"]}
{"id": "eqasc_train_3143", "nl": "An abscess is an infected area swollen with pus.", "fol": "", "prediction": ["all x.(Abscess(x) -> (InfectedArea(x) & SwollenWithPus(x)))"]}
{"id": "eqasc_train_3144", "nl": "scraping oneself on a contaminated object may cause an area swollen with pus", "fol": "", "prediction": ["all x y.((ScrapingOnContaminatedObject(x) & ScrapingOn(x,y)) -> MayCauseSwollenArea(x))"]}
{"id": "eqasc_train_3145", "nl": "Infections occur as a result of contaminated wounds.", "fol": "", "prediction": ["all x.(Infection(x) -> (ContaminatedWounds(x) & Occurs(x)))"]}
{"id": "eqasc_train_3146", "nl": "Scraping oneself may lead to contaminated wounds.", "fol": "", "prediction": ["all x.(Scraping(x) -> MayLeadToContaminatedWounds(x))"]}
{"id": "eqasc_train_3147", "nl": "Any tear, scrape, or cut in the skin is considered a wound.", "fol": "", "prediction": ["all x.((Tear(x) | Scrape(x) | Cut(x)) -> Wound(x))"]}
{"id": "eqasc_train_3148", "nl": "A wound from a contaminated object may cause infection.", "fol": "", "prediction": ["all x y.((Wound(x) & ContaminatedObject(y)) -> MayCauseInfection(x,y))"]}
{"id": "eqasc_train_3149", "nl": "scraping oneself on a contaminated object may cause an invasion of the body by bacteria", "fol": "", "prediction": ["all x y.((ScrapingOneselfOnContaminatedObject(x) & Bacteria(y)) -> MayCauseInvasionOfBodyByInvasion(x,y))"]}
{"id": "eqasc_train_3150", "nl": "Some infections lead to disease.", "fol": "", "prediction": ["exists x.(Infection(x) & LeadsToDisease(x))"]}
{"id": "eqasc_train_3151", "nl": "scraping oneself on a contaminated object may lead to disease", "fol": "", "prediction": ["all x y.((ScrapingOneselfOnContaminatedObject(x) & Object(y)) -> MayLeadToDisease(x,y))"]}
{"id": "eqasc_train_3152", "nl": "Infection is a common cause of death.", "fol": "", "prediction": ["all x.(Infection(x) -> CommonCauseOfDeath(x))"]}
{"id": "eqasc_train_3153", "nl": "scraping oneself on a contaminated object may cause death", "fol": "", "prediction": ["all x y.((ScrapingOneselfOnContaminatedObject(x) & ScrapingOnContaminatedObject(y)) -> MayCauseDeath(x,y))"]}
{"id": "eqasc_train_3154", "nl": "Infection is what ultimately leads to death.", "fol": "", "prediction": ["all x.(Infection(x) -> LeadsToDeath(x))"]}
{"id": "eqasc_train_3155", "nl": "Infection often causes death.", "fol": "", "prediction": ["all x.(Infection(x) -> CausesDeath(x))"]}
{"id": "eqasc_train_3156", "nl": "scraping oneself on a contaminated object may cause death. ", "fol": "", "prediction": ["all x.((ScrapingOnContaminatedObject(x) & ScrapingOnContaminatedObject(x)) -> MayCauseDeath(x))"]}
{"id": "eqasc_train_3157", "nl": "scraping oneself on a contaminated object may cause death  ", "fol": "", "prediction": ["all x y.((ScrapingOneselfOnContaminatedObject(x) & ScrapingOnContaminatedObject(y)) -> MayCauseDeath(x,y))"]}
{"id": "eqasc_train_3158", "nl": "Infection is a major pathway to ultimate amputation.", "fol": "", "prediction": ["all x.(Infection(x) -> MajorPathToUltimateAmputation(x))"]}
{"id": "eqasc_train_3159", "nl": "Scraping oneself on a contaminated object can lead to limb amputation", "fol": "", "prediction": ["all x y.((ScrapingOnContaminatedObject(x) & DefectedObject(y)) -> CanLeadToLimbAmputation(x,y))"]}
{"id": "eqasc_train_3160", "nl": "Lipids may consist of fatty acids alone, or they may contain other molecules as well.", "fol": "", "prediction": ["all x.(Lipid(x) -> (ConsistsOfFattyAcids(x) | ContainsOtherMolecules(x)))"]}
{"id": "eqasc_train_3161", "nl": "Fats are known as lipids.", "fol": "", "prediction": ["all x.(Fat(x) -> Lipid(x))"]}
{"id": "eqasc_train_3162", "nl": "Fats may consist of fatty acids alone, or they may contain other molecules as well.", "fol": "", "prediction": ["all x.(Fat(x) -> (FattyAcids(x) & (ContainsMolecules(x) | ContainsMolecules(x))))"]}
{"id": "eqasc_train_3163", "nl": "Lipids are the fats that circulate in blood.", "fol": "", "prediction": ["all x.(Lipid(x) -> (Fat(x) & CirculatesInBlood(x)))"]}
{"id": "eqasc_train_3164", "nl": "Fats that circulate in the blood may contain other molecules. ", "fol": "", "prediction": ["all x.((Fat(x) & CirculatesInBlood(x)) -> ContainsOtherMolecules(x))"]}
{"id": "eqasc_train_3165", "nl": "Fatty acids are the building blocks of lipids.", "fol": "", "prediction": ["all x.(FattyAcid(x) -> BuildingBlockOfLipids(x))"]}
{"id": "eqasc_train_3166", "nl": "the building blocks of lipids may contain other molecules as well", "fol": "", "prediction": ["all x.((BuildingBlocksOfLipids(x) & ContainsMolecules(x)) -> MayContainMolecules(x))"]}
{"id": "eqasc_train_3167", "nl": "Lipids Lipids are major components of cell membranes.", "fol": "", "prediction": ["all x.(Lipid(x) -> MajorComponentOfCellMembrane(x))"]}
{"id": "eqasc_train_3168", "nl": "cell membranes consist of fatty acids", "fol": "", "prediction": ["all x.(CellMembrane(x) -> ConsistsOfFattyAcids(x))"]}
{"id": "eqasc_train_3169", "nl": "Bacteria are capable of growth on fatty acids and lipids.", "fol": "", "prediction": ["all x.(Bacteria(x) -> (CapableOfGrowthOnFatherAcids(x) & CapableOfGrowthOnLipids(x)))"]}
{"id": "eqasc_train_3170", "nl": "bacteria can grow on fatty acids", "fol": "", "prediction": ["all x.(Bacteria(x) -> GrowsOnFattyAcids(x))"]}
{"id": "eqasc_train_3171", "nl": "Lipids Lipids are diverse hydrophobic molecules.", "fol": "", "prediction": ["all x.(Lipid(x) -> (HydrophobicMolecule(x) & Diverse(x)))"]}
{"id": "eqasc_train_3172", "nl": "Diverse hydrophobic molecules may consist of fatty acids alone.", "fol": "", "prediction": ["all x.((Molecule(x) & DiverseHydrophobic(x)) -> (FattyAcids(x) & ContainsFats(x)))"]}
{"id": "eqasc_train_3173", "nl": "Lipids Lipids are also composed of carbon, oxygen and hydrogen.", "fol": "", "prediction": ["all x.(Lipid(x) -> (ComposedOfCarbon(x) & ComposedOfOxygen(x) & ComposedOfHydrogen(x)))"]}
{"id": "eqasc_train_3174", "nl": "Carbon, oxygen, and hydrogen can be combined with fatty acids.", "fol": "", "prediction": ["all x.((Carbon(x) | Oxygen(x) | Hydrogen(x)) -> CanBeCombinedWithFatherAcids(x))"]}
{"id": "eqasc_train_3175", "nl": "Fats A fat is another term for lipid.", "fol": "", "prediction": ["all x.(Fat(x) -> Lipoprotein(x))"]}
{"id": "eqasc_train_3176", "nl": "fats may consist of fatty acids alone", "fol": "", "prediction": ["all x.(Fat(x) -> (Fats(x) & Fats(x) & Fats(x) & Fats(x) & Fats(x) & Fats(x) & Fats(x)))"]}
{"id": "eqasc_train_3177", "nl": "All biological membranes contain lipids as the major constituent.", "fol": "", "prediction": ["all x.(BiologicalMembrane(x) -> ContainsLipids(x))"]}
{"id": "eqasc_train_3178", "nl": "All biological membranes have lipids as the main consituent which consist of fatty acids.", "fol": "", "prediction": ["all x.(BiologicalMembrane(x) -> (HasLipids(x) & MainConstituent(x) & ConsistsOfFatherAcids(x)))"]}
{"id": "eqasc_train_3179", "nl": "heat can change the state of matter", "fol": "", "prediction": ["all x.(Heat(x) -> ChangesStateOfMatter(x))"]}
{"id": "eqasc_train_3180", "nl": "If the state of matter is changed, as in a liquid to a gas, it is called a change of state.", "fol": "", "prediction": ["all x.((StateOfMatter(x) & Changed(x)) -> ChangeOfState(x))"]}
{"id": "eqasc_train_3181", "nl": "Heat can cause something to have a change of state.", "fol": "", "prediction": ["all x.(Heat(x) -> ChangeOfState(x))"]}
{"id": "eqasc_train_3182", "nl": "Heat is present in all matter.", "fol": "", "prediction": ["all x.(Heat(x) -> PresentInMatter(x))"]}
{"id": "eqasc_train_3183", "nl": "Matter is likely to exchange to different states", "fol": "", "prediction": ["all x y.((Matter(x) & State(y)) -> LikelyToExchange(x,y))"]}
{"id": "eqasc_train_3184", "nl": "An increase of heat is an increase of randomity in matter.", "fol": "", "prediction": ["all x.(IncreaseOfHeat(x) -> IncreaseOfRarityInMatter(x))"]}
{"id": "eqasc_train_3185", "nl": "temperature changes the state of matter", "fol": "", "prediction": ["all x.(TemperatureChange(x) -> StateOfMatter(x))"]}
{"id": "eqasc_train_3186", "nl": "Liquids are one state of matter.", "fol": "", "prediction": ["all x.(Liquid(x) -> OneStateOfMatter(x))"]}
{"id": "eqasc_train_3187", "nl": "heat can change stuff to liquid", "fol": "", "prediction": ["all x y.((Heat(x) & Stuff(y)) -> ChangesToLiquid(x,y))"]}
{"id": "eqasc_train_3188", "nl": "Fire makes heat.", "fol": "", "prediction": ["all x.(Fire(x) -> MakesHeat(x))"]}
{"id": "eqasc_train_3189", "nl": "fire can change the state of matter", "fol": "", "prediction": ["all x.(Fire(x) -> ChangesStateOfMatter(x))"]}
{"id": "eqasc_train_3190", "nl": "Matter exists in a solid, liquid or gas state and can change forms.", "fol": "", "prediction": ["all x.(Matter(x) -> (exists inSolidState(x) | exists inLiquidState(x) | exists inGasState(x)) & CanChangeForms(x)))"]}
{"id": "eqasc_train_3191", "nl": "heat can change liquid to gas", "fol": "", "prediction": ["all x y.((Heat(x) & Liquid(y)) -> ChangesToGas(x,y))"]}
{"id": "eqasc_train_3192", "nl": "Heat can change a substance to a liquid", "fol": "", "prediction": ["all x y.((Substance(x) & Heat(y)) -> CanChangeToLiquid(x,y))"]}
{"id": "eqasc_train_3193", "nl": "Heat flows from warm to cold.", "fol": "", "prediction": ["all x.(Heat(x) -> (Warm(x) | Cold(x)))"]}
{"id": "eqasc_train_3194", "nl": "flowing from cold to warm can change the state of matter", "fol": "", "prediction": ["all x.((Cold(x) & Warm(x)) -> ChangesStateOfMatter(x))"]}
{"id": "eqasc_train_3195", "nl": "temperature can change the state of matter", "fol": "", "prediction": ["all x.(Temperature(x) -> ChangesStateOfMatter(x))"]}
{"id": "eqasc_train_3196", "nl": "Plasma, the fourth state of matter, can be created on earth by supplying sufficient heat.", "fol": "", "prediction": ["all x.((Plasma(x) & FourthStateOfMatter(x)) -> CanBeCreatedOnEarth(x))"]}
{"id": "eqasc_train_3197", "nl": "plasma can be created with heat", "fol": "", "prediction": ["all x.(Plasma(x) -> (CreatedWithHeat(x) & CreatedWithHeat(x)))"]}
{"id": "eqasc_train_3198", "nl": "Gas is one of the 3 states of matter.", "fol": "", "prediction": ["all x.(Gas(x) -> (StateOfMatter(x) & StateOfMatter(x)))"]}
{"id": "eqasc_train_3199", "nl": "Heat can change something that has three states", "fol": "", "prediction": ["all x y.((Heat(x) & State(y) & HasThreeStates(x,y)) -> CanChange(x,y))"]}
{"id": "eqasc_train_3200", "nl": "when a body of water receives more water than it can hold , a flood occurs", "fol": "", "prediction": ["all x y z.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHold(y,z)) -> FloodOccurs(x))"]}
{"id": "eqasc_train_3201", "nl": "During heavy rains, the systems often overflow into the nearest water body.", "fol": "", "prediction": ["all x y.((HeavyRain(x) & System(y)) -> OverflowsIntoNearestWaterBody(y,x))"]}
{"id": "eqasc_train_3202", "nl": "During heavy rains a flood can occur", "fol": "", "prediction": ["all x y.((HeavyRain(x) & Flood(y)) -> CanOccur(x,y))"]}
{"id": "eqasc_train_3203", "nl": "Rain water reaches rivers faster and can cause flooding.", "fol": "", "prediction": ["all x y.((RainWater(x) & River(y)) -> (ReachesFaster(x,y) & CausesFlooding(x)))"]}
{"id": "eqasc_train_3204", "nl": "Too much rain causes rivers to flood", "fol": "", "prediction": ["all x y.((Rain(x) & River(y)) -> CausesToFlood(x,y))"]}
{"id": "eqasc_train_3205", "nl": "Water bodies include rivers, creeks, lakes, and ponds.", "fol": "", "prediction": ["all x.(WaterBody(x) -> (IncludesRiver(x) | IncludesRiver(x) | IncludesRiver(x) | IncludesRiver(x) | IncludesRiver(x) | IncludesRiver(x) | IncludesRiver(x) | IncludesLake(x) | IncludesPool(x)))"]}
{"id": "eqasc_train_3206", "nl": "when a river receives more water than it can hold, a flood occurs", "fol": "", "prediction": ["all x y.((River(x) & River(y) & ReceivesMoreWater(x,y)) -> Flood(x))"]}
{"id": "eqasc_train_3207", "nl": "Floods are deadly, floods are devastating.", "fol": "", "prediction": ["all x y.((Flood(x) & Flood(y)) -> (Lethal(x) & Devastating(y)))"]}
{"id": "eqasc_train_3208", "nl": "When a body of water receives more water than it can hold, death and devastation can result.", "fol": "", "prediction": ["all x.((BodyOfWater(x) & ReceivesMoreWater(x) & CanHold(x)) -> (Death(x) | Devastation(x)))"]}
{"id": "eqasc_train_3209", "nl": "Lakes are large bodies of inland water.", "fol": "", "prediction": ["all x.(Lake(x) -> (LargeBodyOfInlandWater(x) & InlandWater(x)))"]}
{"id": "eqasc_train_3210", "nl": "when a lake receives too much water, a flood occurs", "fol": "", "prediction": ["all x y.((Lake(x) & Lake(y) & ReceivesTooMuchWater(x,y)) -> FloodOccurs(x))"]}
{"id": "eqasc_train_3211", "nl": "Flooding can wipe out an entire crop.", "fol": "", "prediction": ["all x y.((Flooding(x) & Crop(y)) -> CanWipeOut(x,y))"]}
{"id": "eqasc_train_3212", "nl": "when a body of water receives more water then it can hold, it can destroy crops", "fol": "", "prediction": ["all x y.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHold(x,y)) -> CanDestroyCrops(x))"]}
{"id": "eqasc_train_3213", "nl": "when a body of water receives more water than it can hold it can be deadly and devastating", "fol": "", "prediction": ["all x.((BodyOfWater(x) & ReceivesMoreWaterThanCanHold(x)) -> (Lethal(x) & Devastating(x)))"]}
{"id": "eqasc_train_3214", "nl": "Spores are washed into the field in flood water.", "fol": "", "prediction": ["all x y.((Spore(x) & FloodWater(y)) -> WashedIntoField(x,y))"]}
{"id": "eqasc_train_3215", "nl": "When a body of water receives more water than it can hold, spores are washed into the field.", "fol": "", "prediction": ["all x y.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHold(x,y)) -> WashedIntoField(x))"]}
{"id": "eqasc_train_3216", "nl": "When flooding occurs, water seeks the lowest level.", "fol": "", "prediction": ["all x.((Water(x) & FloodingOccurs(x)) -> SeeksLowerLevel(x))"]}
{"id": "eqasc_train_3217", "nl": "When it floods, the water flows to the lowest level.", "fol": "", "prediction": ["all x.((Water(x) & Floods(x)) -> FlowsToLowerLevel(x))"]}
{"id": "eqasc_train_3218", "nl": "Flood probability is based on past floods.", "fol": "", "prediction": ["all x.(FloodProbability(x) -> BasedOnPastFloods(x))"]}
{"id": "eqasc_train_3219", "nl": "The probability of receiving more water is based on the past.", "fol": "", "prediction": ["all x.((ProbabilityOfReceivingMoreWater(x)) -> BasedOnPast(x))"]}
{"id": "eqasc_train_3220", "nl": "sedimentary rocks are formed by deposition", "fol": "", "prediction": ["all x.(SedimentaryRock(x) -> FormedByDeposition(x))"]}
{"id": "eqasc_train_3221", "nl": "Sedimentary Rocks One of the commonest sedimentary rocks is sandstone.", "fol": "", "prediction": ["all x.(SedimentaryRock(x) -> Sandstone(x))"]}
{"id": "eqasc_train_3222", "nl": "sandstone is formed by deposition", "fol": "", "prediction": ["all x.(Sandstone(x) -> FormedByDeposition(x))"]}
{"id": "eqasc_train_3223", "nl": "Limestone is a type of sedimentary rock.", "fol": "", "prediction": ["all x.(Limestone(x) -> SedimentaryRock(x))"]}
{"id": "eqasc_train_3224", "nl": "limestone is formed by deposition", "fol": "", "prediction": ["all x.(Limestone(x) -> FormedByDeposition(x))"]}
{"id": "eqasc_train_3225", "nl": "Limestone is formed by deposition.", "fol": "", "prediction": ["all x.(Limestone(x) -> FormedByDeposition(x))"]}
{"id": "eqasc_train_3226", "nl": "Soils are sand, clay, and organic deposits.", "fol": "", "prediction": ["all x.(Soil(x) -> (Sand(x) | Clay(x) | OrganicDeposits(x)))"]}
{"id": "eqasc_train_3227", "nl": "Sedimentary rocks are formed by soil, sand, clay and organic materials.", "fol": "", "prediction": ["all x.(SedimentaryRock(x) -> (FormedBySoil(x) & FormedBySand(x) & FormedByClay(x) & FormedByOrganicMaterials(x)))"]}
{"id": "eqasc_train_3228", "nl": "Sandstones are another type of sedimentary rocks used in buildings.", "fol": "", "prediction": ["all x.(Sandstone(x) -> SedimentaryRock(x))"]}
{"id": "eqasc_train_3229", "nl": "sandstones are formed by deposition", "fol": "", "prediction": ["all x.(Sandstone(x) -> FormedByDeposition(x))"]}
{"id": "eqasc_train_3230", "nl": "Limestone is formed by deposition", "fol": "", "prediction": ["all x.(Limestone(x) -> FormedByDeposition(x))"]}
{"id": "eqasc_train_3231", "nl": "Sedimentary rocks can be weathered and eroded to form a new generation of sedimentary rocks.", "fol": "", "prediction": ["all x.(SedimentaryRock(x) -> (Weathered(x) & Eroded(x) & FormsNewGenerationOfSedimentaryRocks(x)))"]}
{"id": "eqasc_train_3232", "nl": "Rocks that are formed by deposition are then eroded to form a new generation", "fol": "", "prediction": ["all x.((Rock(x) & FormedByDeposition(x)) -> ErodedToFormNewGeneration(x))"]}
{"id": "eqasc_train_3233", "nl": "Deltaic deposits are an accumulation of sediment deposited at the mouth of a river.", "fol": "", "prediction": ["all x y.((Deposit(x) & River(y)) -> (AccumulationOfSediment(x,y) & DepositedAtMouth(x,y)))"]}
{"id": "eqasc_train_3234", "nl": "rivers form sedimentary rocks", "fol": "", "prediction": ["all x.(River(x) -> FormsSedimentaryRocks(x))"]}
{"id": "eqasc_train_3235", "nl": "Sandstone is formed by deposition", "fol": "", "prediction": ["all x.(Sandstone(x) -> FormedByDeposition(x))"]}
{"id": "eqasc_train_3236", "nl": "a long tail can be used to move through water by an animal", "fol": "", "prediction": ["all x y.((LongTail(x) & Animal(y)) -> MovesThroughWater(x,y))"]}
{"id": "eqasc_train_3237", "nl": "Sharks use their tail to move through the water.", "fol": "", "prediction": ["all x.(Shark(x) -> UsesTailToMove(x))"]}
{"id": "eqasc_train_3238", "nl": "sharks have tails", "fol": "", "prediction": ["all x.(Shark(x) -> HasTail(x))"]}
{"id": "eqasc_train_3239", "nl": "a long tail can be used to move through h2o by animals", "fol": "", "prediction": ["all x y.((LongTail(x) & Animal(y)) -> MovesThroughH2o(x,y))"]}
{"id": "eqasc_train_3240", "nl": "All thresher sharks have tail fins nearly as long as the rest of the body.", "fol": "", "prediction": ["all x.(ThresherShark(x) -> TailFinsAsLongAsBody(x))"]}
{"id": "eqasc_train_3241", "nl": "Fins nearly as long as the rest of the body can be used to move through water.", "fol": "", "prediction": ["all x.(Fin(x) -> (MovesThroughWater(x) & RestOfBody(x)))"]}
{"id": "eqasc_train_3242", "nl": "Thus swimming is defined as a special kind of moving, namely moving in or through water.", "fol": "", "prediction": ["all x.(Swimming(x) -> (SpecialTypeOfMoving(x) & MovingInOrThroughWater(x)))"]}
{"id": "eqasc_train_3243", "nl": "a long tail can be used for swimming by an animal", "fol": "", "prediction": ["all x y.((LongTail(x) & Animal(y)) -> CanBeUsedForSwimming(x,y))"]}
{"id": "eqasc_train_3244", "nl": "Thresher sharks are long-tailed subtropical fish that swim along the surface.", "fol": "", "prediction": ["all x.(ThresherShark(x) -> (LongTailedSubtropicalFish(x) & SwimsAlongSurface(x)))"]}
{"id": "eqasc_train_3245", "nl": "Thresher sharks move through water.", "fol": "", "prediction": ["all x.(ThresherShark(x) -> MovesThroughWater(x))"]}
{"id": "eqasc_train_3246", "nl": "A long tail can be used to swim through water.", "fol": "", "prediction": ["all x.(LongTail(x) -> CanSwimThroughWater(x))"]}
{"id": "eqasc_train_3247", "nl": "Crocodiles swim mostly with their tails.", "fol": "", "prediction": ["all x.(Crocodile(x) -> SwimsWithTail(x))"]}
{"id": "eqasc_train_3248", "nl": "crocodiles move through water", "fol": "", "prediction": ["all x.(Crocodile(x) -> MovesThroughWater(x))"]}
{"id": "eqasc_train_3249", "nl": "Tail fin is long and swept.", "fol": "", "prediction": ["all x.(TailFin(x) -> (Long(x) & Sweeped(x)))"]}
{"id": "eqasc_train_3250", "nl": "Tail fins sweep through water by animals", "fol": "", "prediction": ["all x y.((TailFin(x) & Animal(y)) -> SweepsThroughWater(x,y))"]}
{"id": "eqasc_train_3251", "nl": "Sharks move through the water with their tail", "fol": "", "prediction": ["all x.(Shark(x) -> (MovesThroughWaterWithTail(x) & HasTail(x)))"]}
{"id": "eqasc_train_3252", "nl": "Water remains in the current of the river.", "fol": "", "prediction": ["all x y.((Water(x) & River(y)) -> RemainsInCurrent(x,y))"]}
{"id": "eqasc_train_3253", "nl": "A long tail helps an animal navigate through a river.", "fol": "", "prediction": ["all x y.((LongTail(x) & Animal(y)) -> HelpsNavigateThroughRiver(x,y))"]}
{"id": "eqasc_train_3254", "nl": "Salamanders have a long tail that is used for swimming.", "fol": "", "prediction": ["all x.(Salamander(x) -> (LongTail(x) & UsedForSwimming(x)))"]}
{"id": "eqasc_train_3255", "nl": "salamanders swim through water", "fol": "", "prediction": ["all x.(Salamander(x) -> SwimsThroughWater(x))"]}
{"id": "eqasc_train_3256", "nl": "Male tortoises have a long tail and females have a short fat tail.", "fol": "", "prediction": ["all x y.((MaleTortoise(x) & FemaleTortoise(y)) -> (LongTail(x) & ShortFatTail(y)))"]}
{"id": "eqasc_train_3257", "nl": "tortoises can move through water", "fol": "", "prediction": ["all x.(Tortoise(x) -> MovesThroughWater(x))"]}
{"id": "eqasc_train_3258", "nl": "Salamanders can move through water", "fol": "", "prediction": ["all x.(Salamander(x) -> (MovesThroughWater(x) & Water(x)))"]}
{"id": "eqasc_train_3259", "nl": "Digestion is the process of breaking down food into components the body can absorb.", "fol": "", "prediction": ["all x.(Digestion(x) -> BreaksDownFoodIntoComponents(x))"]}
{"id": "eqasc_train_3260", "nl": "Food is digested and absorbed in the small intestine.", "fol": "", "prediction": ["all x y.((Food(x) & SmallIntestine(y)) -> DigestsAndAbsorbsIn(x,y))"]}
{"id": "eqasc_train_3261", "nl": "food is digested in the small intestine", "fol": "", "prediction": ["all x y.((Food(x) & SmallIntestine(y)) -> DigestsIn(x,y))"]}
{"id": "eqasc_train_3262", "nl": "Digestive enzymes are necessary for a complete digestion.", "fol": "", "prediction": ["all x.(DigestiveEnzymes(x) -> NecessaryForCompleteDigestion(x))"]}
{"id": "eqasc_train_3263", "nl": "Enzymes break down food into components the body can absorb.", "fol": "", "prediction": ["all x y.((Enzyme(x) & Food(y)) -> BreaksDownIntoComponents(x,y))"]}
{"id": "eqasc_train_3264", "nl": "All health starts in the stomach with digestion.", "fol": "", "prediction": ["all x.(HealthStartsInStomach(x) -> Digestive(x))"]}
{"id": "eqasc_train_3265", "nl": "the stomach breaks down food into components the body can absorb.", "fol": "", "prediction": ["all x y.((Stomach(x) & Food(y)) -> BreaksDownIntoComponents(x,y))"]}
{"id": "eqasc_train_3266", "nl": "Saliva starts to break down the food.", "fol": "", "prediction": ["all x.(Saliva(x) -> BreaksDownFood(x))"]}
{"id": "eqasc_train_3267", "nl": "digestion involves saliva", "fol": "", "prediction": ["all x.(Digestion(x) -> InvolvesSaline(x))"]}
{"id": "eqasc_train_3268", "nl": "Food proteins are changed into energy or heat to be used or absorbed by the body.", "fol": "", "prediction": ["all x.(FoodProtein(x) -> (ChangesIntoEnergy(x) | ChangesIntoHeat(x)) & (UsedByBody(x) | AbsorbedByBody(x))))"]}
{"id": "eqasc_train_3269", "nl": "Digestion is the process of breaking down food proteins into energy or heat.", "fol": "", "prediction": ["all x.(Digestion(x) -> BreaksDownFoodProteinsIntoEnergyOrHeat(x))"]}
{"id": "eqasc_train_3270", "nl": "Lack of salvia hinders digestion.", "fol": "", "prediction": ["-HasSalvia(x) -> BlocksDigestion(x))"]}
{"id": "eqasc_train_3271", "nl": "Lack of saliva hinders the break down of food into components the body can absorb", "fol": "", "prediction": ["all x.(LackOfSaline(x) -> HemmingsBreakdownOfFoodIntoComponents(x))"]}
{"id": "eqasc_train_3272", "nl": "Enzymes break down food so the body can absorb it", "fol": "", "prediction": ["all x y z.((Enzyme(x) & Food(y) & Body(z)) -> BreaksDownSoBodyCanAbsorb(x,y,z))"]}
{"id": "eqasc_train_3273", "nl": "food is absorbed in the small intestine", "fol": "", "prediction": ["all x y.((Food(x) & SmallIntestine(y)) -> AbsorbedIn(x,y))"]}
{"id": "eqasc_train_3274", "nl": "Nutrients are absorbed by the intestines and if the walls are coated, fewer nutrients are absorbed.", "fol": "", "prediction": ["all x y.((Nutrient(x) & Intestine(y)) -> (AbsorbedBy(x,y) & CoatedWalls(x) & FewerNutrientsAbsorbed(x)))"]}
{"id": "eqasc_train_3275", "nl": "Digestion is the process of breaking down food into nutrients.", "fol": "", "prediction": ["all x.(Digestion(x) -> BreaksDownFoodIntoNutrients(x))"]}
{"id": "eqasc_train_3276", "nl": "Fish and rice are the staple foods.", "fol": "", "prediction": ["all x.((Fish(x) | Rice(x)) -> StapleFood(x))"]}
{"id": "eqasc_train_3277", "nl": "breaking down rice into components the body can absorb is digestion", "fol": "", "prediction": ["all x y.((Rice(x) & Body(y) & BreaksDownIntoComponents(x,y)) -> Digestion(x))"]}
{"id": "eqasc_train_3278", "nl": "Digestion happens in the small intestine", "fol": "", "prediction": ["all x y.((Smallintestine(x) & Digestion(y)) -> HappensIn(y,x))"]}
{"id": "eqasc_train_3279", "nl": "Sperm had to swim from male to female reproductive organs for fertilization.", "fol": "", "prediction": ["all x y.((Ssperm(x) & Male(y)) -> SwimsFromTo(x,y))"]}
{"id": "eqasc_train_3280", "nl": "Endocrinology is the study of organs that produce hormones involved in fertility and reproduction.", "fol": "", "prediction": ["all x.(Endocrinology(x) -> (StudiesOrgans(x) & ProducesHydrogens(x) & InvolvesFertility(x) & InvolvesReproduction(x)))"]}
{"id": "eqasc_train_3281", "nl": "sperm swim from organs that produce hormones for fertilization", "fol": "", "prediction": ["all x y.((Ssperm(x) & Organ(y) & ProducesHormones(y,x)) -> SwimsFrom(x,y))"]}
{"id": "eqasc_train_3282", "nl": "Male gametes had to swim from male to female reproductive organs for fertilization.", "fol": "", "prediction": ["all x y.((MaleGamete(x) & Male(y)) -> SwimsFromTo(x,y))"]}
{"id": "eqasc_train_3283", "nl": "Fertilization is the penetration of the egg by a sperm.", "fol": "", "prediction": ["all x y.((Fertilization(x) & Sperm(y)) -> PenetrationOfEgg(x,y))"]}
{"id": "eqasc_train_3284", "nl": "Sperm must swim from the male to the female egg", "fol": "", "prediction": ["all x y z.((Ssperm(x) & Male(y) & Female(z)) -> SwimsFromTo(x,y,z))"]}
{"id": "eqasc_train_3285", "nl": "Sperms swim with their tails.", "fol": "", "prediction": ["all x.(Ssperm(x) -> SwimsWithTail(x))"]}
{"id": "eqasc_train_3286", "nl": "Something that moves with a tail had to swim from male to female reproductive organs for fertilization", "fol": "", "prediction": ["all x.((MovesWithTail(x) & MaleToFemaleReproductiveOrgans(x)) -> SwimsForFertilization(x))"]}
{"id": "eqasc_train_3287", "nl": "And the word for woman means a female of any age.", "fol": "", "prediction": ["all x.(WordForFemale(x) -> (FemaleOfAnyAge(x)))"]}
{"id": "eqasc_train_3288", "nl": "Sperm have to swim from men to women reproductive organs to be fertilized.", "fol": "", "prediction": ["all x y.((Ssperm(x) & Men(y)) -> SwimsToReproductiveOrgans(x,y))"]}
{"id": "eqasc_train_3289", "nl": "Sperm and eggs are cells known as gametes.", "fol": "", "prediction": ["all x.((Spore(x) | Egg(x)) -> Gamete(x))"]}
{"id": "eqasc_train_3290", "nl": "male gametes swim to female reproductive organs for fertilization.", "fol": "", "prediction": ["all x y.((MaleGamete(x) & FemaleOrgan(y)) -> SwimsToForFertilization(x,y))"]}
{"id": "eqasc_train_3291", "nl": "Male gametes swim from male to female reproductive organs for fertilization.", "fol": "", "prediction": ["all x y.((MaleGamete(x) & Male(y)) -> SwimsFromTo(x,y))"]}
{"id": "eqasc_train_3292", "nl": "Sperm had to swim from male to female reproductive organs to be implanted in the uterus", "fol": "", "prediction": ["all x y z.((Ssperm(x) & Male(y) & Female(z)) -> SwimsFromTo(x,y,z))"]}
{"id": "eqasc_train_3293", "nl": "If fertilization occurs, the fertilized eggs are now described as pre-embryos or zygotes.", "fol": "", "prediction": ["all x.(FertilizationOccurs(x) -> (FertilizedEggs(x) | FertileEggs(x)))"]}
{"id": "eqasc_train_3294", "nl": "Sperm had to swim from male to female reproductive organs for zygotes to occur.", "fol": "", "prediction": ["all x y.((Ssperm(x) & Male(y) & Female(y)) -> SwimsFromTo(x,y))"]}
{"id": "eqasc_train_3295", "nl": "Gametes, the sperm and eggs, are produced by mitosis in the haploid gametophyte.", "fol": "", "prediction": ["all x y.((Gamete(x) & Sperm(y) & Egg(y)) -> ProducedByMitosis(x,y))"]}
{"id": "eqasc_train_3296", "nl": "gametes swim from male to female reproductive organs for fertilization", "fol": "", "prediction": ["all x y z.((Gamete(x) & Male(y) & Female(z)) -> SwimsFromForFertilityOrgansForFertility(x,y,z))"]}
{"id": "eqasc_train_3297", "nl": "sperm had to swim from male to female reproductive organs for pregnancy", "fol": "", "prediction": ["all x y z.((Ssperm(x) & Male(y) & Female(z)) -> SwimsFromTo(x,y,z))"]}
{"id": "eqasc_train_3298", "nl": "Development of multicellular organisms is usually initiated by fertilization of an egg by a sperm.", "fol": "", "prediction": ["all x y.((MulticellularOrganism(x) & Egg(y) & Fertilization(x,y)) -> InitiatedBy(x,y))"]}
{"id": "eqasc_train_3299", "nl": "Organism development starts with egg fertilization in female organs", "fol": "", "prediction": ["all x y.((Organism(x) & FemaleOrgan(y)) -> EggFertilization(x,y))"]}
{"id": "eqasc_train_3300", "nl": "What semen is, is a carrier for the sperm contained in it.", "fol": "", "prediction": ["all x.(Semen(x) -> CarrierForSperm(x))"]}
{"id": "eqasc_train_3301", "nl": "semen goes from male to female reproductive organs for fertilization", "fol": "", "prediction": ["all x y z.((Semen(x) & Male(y) & Female(z)) -> GoesFromToForFertilityOrgans(x,y,z))"]}
{"id": "eqasc_train_3302", "nl": "And slow sperm is one of the leading causes of male infertility .", "fol": "", "prediction": ["all x y.((SlowSsperm(x) & MaleInfertility(y)) -> LeadingCause(x,y))"]}
{"id": "eqasc_train_3303", "nl": "slow sperm may not swim fast", "fol": "", "prediction": ["all x.(SlowSsperm(x) -> -SwimFast(x))"]}
{"id": "eqasc_train_3304", "nl": "Within the body are the stomach and reproductive organs.", "fol": "", "prediction": ["all x.((Body(x) & Stomach(x) & ReproductiveOrgans(x)) -> Within(x,y))"]}
{"id": "eqasc_train_3305", "nl": "Sperm had to swim from male to female organs within the body for fertilization.", "fol": "", "prediction": ["all x y.((Ssperm(x) & MaleOrgan(y)) -> SwimsFromTo(x,y))"]}
{"id": "eqasc_train_3306", "nl": "Chloroplasts are organelles that are found in the cells of plants and algae.", "fol": "", "prediction": ["all x.(Chloroplast(x) -> (Organelle(x) & FoundInCells(x) & FoundInPlantsAndAlgae(x)))"]}
{"id": "eqasc_train_3307", "nl": "Chloroplasts are organelles that are found in the cells of bamboo", "fol": "", "prediction": ["all x.(Chloroplast(x) -> (Organelle(x) & FoundInBambooCells(x)))"]}
{"id": "eqasc_train_3308", "nl": "Chloroplasts and mitochondria are both organelles.", "fol": "", "prediction": ["all x.(Chloroplast(x) -> Organelle(x))"]}
{"id": "eqasc_train_3309", "nl": "chloroplasts are found in plant cells", "fol": "", "prediction": ["all x y.((Chlorophyll(x) & PlantCell(y)) -> FoundIn(x,y))"]}
{"id": "eqasc_train_3310", "nl": "Chloroplasts Chloroplasts serve as the site of photosynthesis.", "fol": "", "prediction": ["all x.(Chloroplast(x) -> ServesAsPhotosynthesisSite(x))"]}
{"id": "eqasc_train_3311", "nl": "The site of photosynthesis in plant and algae cells is found within organelles.", "fol": "", "prediction": ["all x y.((Plant(x) & AlgaeCell(y)) -> PhotosynthesisSite(x,y))"]}
{"id": "eqasc_train_3312", "nl": "bushes contain chloroplasts", "fol": "", "prediction": ["all x.(Bubble(x) -> ContainsChlorophylls(x))"]}
{"id": "eqasc_train_3313", "nl": "Photosynthesis takes place within organelles known as chloroplasts.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> exists y.(Organelle(y) & Chlorophyll(y)))"]}
{"id": "eqasc_train_3314", "nl": "Photosynthesis occurs in algae and plants", "fol": "", "prediction": ["all x y z.((Algae(x) & Plant(y) & Algae(z)) -> PhotosynthesisOccursIn(x,y,z))"]}
{"id": "eqasc_train_3315", "nl": "Algae Algae Green algae are the simplest of green plants.", "fol": "", "prediction": ["all x.(GreenAlgae(x) -> SimplestGreenPlant(x))"]}
{"id": "eqasc_train_3316", "nl": "Chloroplasts are organelles that are found in the cells of the simplest of green plants", "fol": "", "prediction": ["all x.(Chloroplast(x) -> (Organelle(x) & FoundInCellsOfSimplestOfGreenPlants(x)))"]}
{"id": "eqasc_train_3317", "nl": "Chloroplasts Chloroplasts contain photosynthetic pigments.", "fol": "", "prediction": ["all x.(Chloroplast(x) -> ContainsPhotosyntheticPigments(x))"]}
{"id": "eqasc_train_3318", "nl": "Organelles contain photosynethic pigments", "fol": "", "prediction": ["all x.(Organelle(x) -> ContainsPhotosynethicPigments(x))"]}
{"id": "eqasc_train_3319", "nl": "the site of photosynthesis are organelles that are found in the cells of plants and algae", "fol": "", "prediction": ["all x.(PhotosynthesisSite(x) -> (Organelles(x) & FoundInCellsOfPlantsAndAlgae(x)))"]}
{"id": "eqasc_train_3320", "nl": "pigments are found in algae", "fol": "", "prediction": ["all x y.((Pigment(x) & Algae(y)) -> FoundIn(x,y))"]}
{"id": "eqasc_train_3321", "nl": "Organelles containing photosynthetic pigments are found in the cells of plants and algae", "fol": "", "prediction": ["all x y.((Organelle(x) & Plant(y) & Algae(y)) -> (ContainsPhotosyntheticPigments(x) & FoundInCells(x,y)))"]}
{"id": "eqasc_train_3322", "nl": "Mosses are nonvascular plants.", "fol": "", "prediction": ["all x.(Moss(x) -> NonvascularPlant(x))"]}
{"id": "eqasc_train_3323", "nl": "Chloroplasts are organelles that are found in the cells of mosses.", "fol": "", "prediction": ["all x.(Chloroplast(x) -> (Organelle(x) & FoundInCellsOfMosses(x)))"]}
{"id": "eqasc_train_3324", "nl": "sound can be used for communication by animals", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> CanUseSoundForCommunication(x,y))"]}
{"id": "eqasc_train_3325", "nl": "Sharing information is the communication game.", "fol": "", "prediction": ["all x.(SharingInformation(x) -> CommunicationGame(x))"]}
{"id": "eqasc_train_3326", "nl": "Sound can be used by animals to share information.", "fol": "", "prediction": ["all x y.((Animal(x) & Sound(y)) -> ShareInformation(x,y))"]}
{"id": "eqasc_train_3327", "nl": "Animals use both ears to localize sound.", "fol": "", "prediction": ["all x.(Animal(x) -> LocalizesSound(x))"]}
{"id": "eqasc_train_3328", "nl": "animals locate sound with their ears", "fol": "", "prediction": ["all x.(Animal(x) -> LocatesSoundWithEars(x))"]}
{"id": "eqasc_train_3329", "nl": "For mating, communication is between individuals of the same organism.", "fol": "", "prediction": ["all x y.((Individual(x) & Organism(y)) -> Communicates(x,y))"]}
{"id": "eqasc_train_3330", "nl": "animals use sound to find a mate", "fol": "", "prediction": ["all x y.((Animal(x) & Sound(y)) -> UsesToFindMate(x,y))"]}
{"id": "eqasc_train_3331", "nl": "Coyotes communicate by howling.", "fol": "", "prediction": ["all x.(Coyote(x) -> CommunicatesByHowling(x))"]}
{"id": "eqasc_train_3332", "nl": "Howling is sound used by coyotes.", "fol": "", "prediction": ["all x.(Howling(x) -> UsedByCoyotes(x))"]}
{"id": "eqasc_train_3333", "nl": "Sound occurs when a body, such as a vocal chord, vibrates, or moves back and forth.", "fol": "", "prediction": ["all x.(Sound(x) -> (Vibrates(x) | MovesBackAndForth(x)))"]}
{"id": "eqasc_train_3334", "nl": "Animals may use vocal chords to communicate.", "fol": "", "prediction": ["all x.(Animal(x) -> (UsesVocalCriffs(x) & Communicate(x)))"]}
{"id": "eqasc_train_3335", "nl": "Barking is a dog's way of communicating.", "fol": "", "prediction": ["all x.(Barking(x) -> DogsCommunicate(x))"]}
{"id": "eqasc_train_3336", "nl": "a dog's sound is a bark", "fol": "", "prediction": ["all x.(Dog(x) -> Bark(x))"]}
{"id": "eqasc_train_3337", "nl": "Many animals rely on sounds to communicate to others in their species.", "fol": "", "prediction": ["all x y.((Animal(x) & Sound(y)) -> ReliesOnToCommunicate(x,y))"]}
{"id": "eqasc_train_3338", "nl": "many species rely on sound", "fol": "", "prediction": ["all x.(Species(x) -> ReliesOnSound(x))"]}
{"id": "eqasc_train_3339", "nl": "Many insects communicate with sounds.", "fol": "", "prediction": ["exists x.(Insect(x) & CommunicatesWithSounds(x))"]}
{"id": "eqasc_train_3340", "nl": "insects use sound to talk", "fol": "", "prediction": ["all x y.((Insect(x) & Sound(y)) -> UsesToTalk(x,y))"]}
{"id": "eqasc_train_3341", "nl": "Snarls and barks are the sounds they make.", "fol": "", "prediction": ["all x.((Snarl(x) | Bark(x)) -> MakesSound(x))"]}
{"id": "eqasc_train_3342", "nl": "Some animals communicate through barks and snarls.", "fol": "", "prediction": ["exists x.(Animal(x) & CommunicatesThroughBarks(x) & CommunicatesThroughSnarls(x))"]}
{"id": "eqasc_train_3343", "nl": "Sounds are vibrations in air.", "fol": "", "prediction": ["all x.(Sound(x) -> VibrationInAir(x))"]}
{"id": "eqasc_train_3344", "nl": "Vibrations in air can be used for communication by animals", "fol": "", "prediction": ["all x y.((Vibration(x) & Air(y)) -> CanBeUsedForCommunication(x,y))"]}
{"id": "eqasc_train_3345", "nl": "Goats are four legged animals.", "fol": "", "prediction": ["all x.(Goat(x) -> FourLeggedAnimal(x))"]}
{"id": "eqasc_train_3346", "nl": "sound can be used for communication by goats", "fol": "", "prediction": ["all x y.((Girl(x) & Goat(y)) -> CanUseSoundForCommunication(x,y))"]}
{"id": "eqasc_train_3347", "nl": "Orangutans have a vocal repertoire of about 13 sounds.", "fol": "", "prediction": ["all x.(Orangutan(x) -> HasVocalRepertoire(x,13))"]}
{"id": "eqasc_train_3348", "nl": "Orangutans can vocalize for communication", "fol": "", "prediction": ["all x.(Orangutan(x) -> CanVocalizeForCommunication(x))"]}
{"id": "eqasc_train_3349", "nl": "Sound vibrations have different frequencies.", "fol": "", "prediction": ["all x.(SoundVibration(x) -> DifferentFrequency(x))"]}
{"id": "eqasc_train_3350", "nl": " Vibrations can be used for communication by animals.", "fol": "", "prediction": ["all x.(Vibration(x) -> UsedForCommunication(x))"]}
{"id": "eqasc_train_3351", "nl": "Mammals use sound for communication.", "fol": "", "prediction": ["all x.(Mammal(x) -> UsesSoundForCommunication(x))"]}
{"id": "eqasc_train_3352", "nl": "mechanical waves can be used for communication by animals", "fol": "", "prediction": ["all x y.((MechanicalWaves(x) & Animal(y)) -> CanBeUsedForCommunication(x,y))"]}
{"id": "eqasc_train_3353", "nl": "Animals use sound in sophisticated ways.", "fol": "", "prediction": ["all x.(Animal(x) -> UsesSoundInSophisticWeapons(x))"]}
{"id": "eqasc_train_3354", "nl": "animal communication is sophisticated", "fol": "", "prediction": ["all x.(AnimalCommunication(x) -> Sorptuous(x))"]}
{"id": "eqasc_train_3355", "nl": "a stove is used for cooking by generating heat", "fol": "", "prediction": ["all x.(Stove(x) -> (UsedForCooking(x) & GeneratesHeat(x)))"]}
{"id": "eqasc_train_3356", "nl": "Warmth generated by staff and machinery heats the air, causing it to rise.", "fol": "", "prediction": ["all x y.((Waitth(x) & Staff(y) & Machinery(z)) -> HeatsAir(x,y))"]}
{"id": "eqasc_train_3357", "nl": "A stove is used for cooking by heating the air.", "fol": "", "prediction": ["all x.(Stove(x) -> UsedForCooking(x))"]}
{"id": "eqasc_train_3358", "nl": "For cooking, gas or wood stoves can be used.", "fol": "", "prediction": ["all x.(Cooking(x) -> (UsedForCooking(x) | UsedForCooking(x)))"]}
{"id": "eqasc_train_3359", "nl": "gas can be used to generate heat", "fol": "", "prediction": ["all x.(Gas(x) -> GeneratesHeat(x))"]}
{"id": "eqasc_train_3360", "nl": "Bacteria are destroyed by cooking heat.", "fol": "", "prediction": ["all x.(Bacteria(x) -> DissectedByCookingHeat(x))"]}
{"id": "eqasc_train_3361", "nl": "Cooking on a stove destroys bacteria. ", "fol": "", "prediction": ["all x.((CookingOnStove(x) & Stove(x)) -> DisruptsBacteria(x))"]}
{"id": "eqasc_train_3362", "nl": "Gas is the source of energy for heating water and for the stove.", "fol": "", "prediction": ["all x.(Gas(x) -> (SourceOfEnergy(x) & HeatsWater(x) & HeatsStove(x)))"]}
{"id": "eqasc_train_3363", "nl": "A stove cooks with gas", "fol": "", "prediction": ["all x.(Stove(x) -> CooksWithGas(x))"]}
{"id": "eqasc_train_3364", "nl": "Fire generates heat and light.", "fol": "", "prediction": ["all x.(Fire(x) -> (GeneratesHeat(x) & GeneratesLight(x)))"]}
{"id": "eqasc_train_3365", "nl": "A stove uses fire for cooking.", "fol": "", "prediction": ["all x.(Stove(x) -> UsesFireForCooking(x))"]}
{"id": "eqasc_train_3366", "nl": "Cook potatoes, cook the kale.", "fol": "", "prediction": ["all x y.((Potato(x) & Kale(y)) -> Cooks(x,y))"]}
{"id": "eqasc_train_3367", "nl": "a stove is used for preparing potatoes by generating heat", "fol": "", "prediction": ["all x y.((Stove(x) & Potato(y)) -> (Prepares(x,y) & GeneratesHeat(x,y)))"]}
{"id": "eqasc_train_3368", "nl": "Wood stoves for cooking and heating.", "fol": "", "prediction": ["all x.(WoodStove(x) -> (ForCooking(x) | ForHeating(x)))"]}
{"id": "eqasc_train_3369", "nl": "wood can be used for cooking", "fol": "", "prediction": ["all x.(Wood(x) -> CanBeUsedForCooking(x))"]}
{"id": "eqasc_train_3370", "nl": "Cooking is essential to make food palatable.", "fol": "", "prediction": ["all x.(Cooking(x) -> MakesFoodPlasable(x))"]}
{"id": "eqasc_train_3371", "nl": "generating heat makes food palatable", "fol": "", "prediction": ["all x y.((GeneratingHeat(x) & Food(y)) -> MakesPastable(x,y))"]}
{"id": "eqasc_train_3372", "nl": "Generation is the making of electricity.", "fol": "", "prediction": ["all x.(Generation(x) -> MakingOfElectricity(x))"]}
{"id": "eqasc_train_3373", "nl": "A stove is used for cooking by making heat.", "fol": "", "prediction": ["all x.(Stove(x) -> UsedForCooking(x))"]}
{"id": "eqasc_train_3374", "nl": "Wood burning stoves provided heat for warmth and cooking.", "fol": "", "prediction": ["all x.(WoodBoilingStove(x) -> (ProvidesHeat(x) & ProvidesHeat(x) & ProvidesHeat(x) & ProvidesHeat(x) & ProvidesHeat(x) & ProvidesHeat(x) & ProvidesHeat(x) & ProvidesHeat(x) & ProvidesHeat(x) & ProvidesHeat(x) & Cooking(x)))"]}
{"id": "eqasc_train_3375", "nl": "Wood burning stoves create heat for warmth", "fol": "", "prediction": ["all x.(WoodBurningStove(x) -> CreatesHeatForWarmth(x))"]}
{"id": "eqasc_train_3376", "nl": "Fire has intense heat.", "fol": "", "prediction": ["all x.(Fire(x) -> IntenseHeat(x))"]}
{"id": "eqasc_train_3377", "nl": "a stove is used for cooking by generating fire", "fol": "", "prediction": ["all x.(Stove(x) -> (UsedForCooking(x) & GeneratesFire(x)))"]}
{"id": "eqasc_train_3378", "nl": "Metabolic reations generate heat.", "fol": "", "prediction": ["all x.(MetabolicReation(x) -> GeneratesHeat(x))"]}
{"id": "eqasc_train_3379", "nl": "A stove can be heated by a metabolic reaction.", "fol": "", "prediction": ["all x.(Stove(x) -> HeatsByMetabolicReaction(x))"]}
{"id": "eqasc_train_3380", "nl": "Animals adapt to cold temperatures.", "fol": "", "prediction": ["all x.(Animal(x) -> AdaptsToColdTemperatures(x))"]}
{"id": "eqasc_train_3381", "nl": "cats adapt to cold temperatures", "fol": "", "prediction": ["all x.(Cat(x) -> AdaptsToColdTemperatures(x))"]}
{"id": "eqasc_train_3382", "nl": "Contact at cold temperatures can cause immediate frostbite.", "fol": "", "prediction": ["all x.((Contact(x) & ColdTemperature(x)) -> CausesFrostbite(x))"]}
{"id": "eqasc_train_3383", "nl": "Animals adapt to avoid immediate frostbite", "fol": "", "prediction": ["all x.(Animal(x) -> (AdaptsToAvoidFrostbite(x) & -ImmediateFrostbite(x)))"]}
{"id": "eqasc_train_3384", "nl": "Extremes in temperature can kill animals.", "fol": "", "prediction": ["all x.(ExtremeTemperature(x) -> KillsAnimals(x))"]}
{"id": "eqasc_train_3385", "nl": "animals adapt to avoid death", "fol": "", "prediction": ["all x.(Animal(x) -> AdaptsToAvoidDeath(x))"]}
{"id": "eqasc_train_3386", "nl": "Temperatures are moderate in summer and COLD in winter.", "fol": "", "prediction": ["all x.(Temperature(x) -> (Moderate(x) & COLD(x)))"]}
{"id": "eqasc_train_3387", "nl": "Animals adapt to the coolness in the winter.", "fol": "", "prediction": ["all x.(Animal(x) -> AdaptsToCoolnessInWinter(x))"]}
{"id": "eqasc_train_3388", "nl": "Reindeer are well suited for the Arctic cold.", "fol": "", "prediction": ["all x.(Reindeer(x) -> WellSuitedForArcticCold(x))"]}
{"id": "eqasc_train_3389", "nl": "reindeer adapt to Arctic temperatures", "fol": "", "prediction": ["all x y.((Reindeer(x) & ArcticTemperature(y)) -> AdaptsTo(x,y))"]}
{"id": "eqasc_train_3390", "nl": "cows adapt to cold temperatures", "fol": "", "prediction": ["all x.(Cow(x) -> AdaptsToColdTemperatures(x))"]}
{"id": "eqasc_train_3391", "nl": "Cold wet weather, even without freezing temperatures can cause hypothermia.", "fol": "", "prediction": ["all x.((ColdWetWeather(x) & -FreezingTemperatures(x)) -> Hypothermia(x))"]}
{"id": "eqasc_train_3392", "nl": "Animals adapt to cold, wet weather", "fol": "", "prediction": ["all x y.((Animal(x) & ColdWetWeather(y)) -> AdaptsTo(x,y))"]}
{"id": "eqasc_train_3393", "nl": "And in winter it s very cold.", "fol": "", "prediction": ["(all x.(Winter(x) -> VeryCold(x)))"]}
{"id": "eqasc_train_3394", "nl": "In winter animals can adapt.", "fol": "", "prediction": ["all x.(Winter(x) -> CanAdapt(x))"]}
{"id": "eqasc_train_3395", "nl": "Adaptation living things adapt to their environment.", "fol": "", "prediction": ["all x.(AdaptationLivingThing(x) -> AdaptsToEnvironment(x))"]}
{"id": "eqasc_train_3396", "nl": "Animals are living things.", "fol": "", "prediction": ["all x.(Animal(x) -> LivingThing(x))"]}
{"id": "eqasc_train_3397", "nl": "Sasquatches are obviously Earth-type animals.", "fol": "", "prediction": ["all x.(Sasquatch(x) -> EarthTypeAnimal(x))"]}
{"id": "eqasc_train_3398", "nl": "Sasquatches adapt to cold temperatures.", "fol": "", "prediction": ["all x.(Sasquatch(x) -> AdaptsToColdTemperatures(x))"]}
{"id": "eqasc_train_3399", "nl": "reindeer adapt to the Arctic's temperatures", "fol": "", "prediction": ["all x y.((Reindeer(x) & ArcticTemperatures(y)) -> AdaptsTo(x,y))"]}
{"id": "eqasc_train_3400", "nl": "Viruses are not cells.", "fol": "", "prediction": ["all x.(Virus(x) -> -Cell(x))"]}
{"id": "eqasc_train_3401", "nl": "rabies are not cells", "fol": "", "prediction": ["all x.(Rabie(x) -> -Cell(x))"]}
{"id": "eqasc_train_3402", "nl": "Influenza viruses are classified as orthomyxoviruses.", "fol": "", "prediction": ["all x.(InfluenzaVirus(x) -> Orthomyxovirus(x))"]}
{"id": "eqasc_train_3403", "nl": "influenza orthomyxoviruses are not cells", "fol": "", "prediction": ["all x.(InfluenzaOrthomyxovirus(x) -> -Cell(x))"]}
{"id": "eqasc_train_3404", "nl": "Herpes are not cells", "fol": "", "prediction": ["all x.(Herpes(x) -> -Cell(x))"]}
{"id": "eqasc_train_3405", "nl": "Plant cells are surrounded by a cell membrane and a cell wall.", "fol": "", "prediction": ["all x.(PlantCell(x) -> (SurroundedByCellMembrane(x) & SurroundedByCellWall(x)))"]}
{"id": "eqasc_train_3406", "nl": "Viruses do not have walls and membranes.", "fol": "", "prediction": ["all x.(Virus(x) -> (-HasWalls(x) & -HasMembranes(x)))"]}
{"id": "eqasc_train_3407", "nl": "Viruses Viruses are the simplest organisms known.", "fol": "", "prediction": ["all x.(Virus(x) -> SimplestOrganism(x))"]}
{"id": "eqasc_train_3408", "nl": "Cells are not the simplest organisms.", "fol": "", "prediction": ["all x.(Cell(x) -> -SimplestOrganism(x))"]}
{"id": "eqasc_train_3409", "nl": "Viruses Viruses are the smallest agents of disease.", "fol": "", "prediction": ["all x.(Virus(x) -> (SmallerAgentOfDisease(x) & SmallestAgentOfDisease(x)))"]}
{"id": "eqasc_train_3410", "nl": "the smallest agents of disease are not cells", "fol": "", "prediction": ["all x.((SmallestAgentOfDisease(x) & -Cell(x)) -> -SmallestAgentOfDisease(x))"]}
{"id": "eqasc_train_3411", "nl": "Viruses Viruses are difficult to classify.", "fol": "", "prediction": ["all x.(Virus(x) -> DifficultToClassify(x))"]}
{"id": "eqasc_train_3412", "nl": "Difficult things to classify are not cells", "fol": "", "prediction": ["all x.((DifficultToClassify(x) & -Cell(x)) -> -Cell(x))"]}
{"id": "eqasc_train_3413", "nl": "smallpox is not a cell", "fol": "", "prediction": ["all x.(Smallpox(x) -> -Cell(x))"]}
{"id": "eqasc_train_3414", "nl": "Tissues are made of cells.", "fol": "", "prediction": ["all x.(Tissue(x) -> MadeOfCells(x))"]}
{"id": "eqasc_train_3415", "nl": "Viruses are not tissue", "fol": "", "prediction": ["all x.(Virus(x) -> -Tissue(x))"]}
{"id": "eqasc_train_3416", "nl": "The smallest agents of disease are not cells.", "fol": "", "prediction": ["all x.(SmallestAgentOfDisease(x) -> -Cells(x))"]}
{"id": "eqasc_train_3417", "nl": "Influenza viruses mutate.", "fol": "", "prediction": ["all x.(InfluenzaVirus(x) -> Mutate(x))"]}
{"id": "eqasc_train_3418", "nl": "Influenza is not a cell.", "fol": "", "prediction": ["all x.(Influenza(x) -> -Cell(x))"]}
{"id": "eqasc_train_3419", "nl": "Tobacco mosaic is not made up of cells.", "fol": "", "prediction": ["all x.(TobaccoMosque(x) -> -MadeUpOfCells(x))"]}
{"id": "eqasc_train_3420", "nl": "if an object is made of a material then that object has the properties of that material", "fol": "", "prediction": ["all x y.((Object(x) & Material(y) & MadeOf(x,y)) -> HasPropertiesOf(x,y))"]}
{"id": "eqasc_train_3421", "nl": "Objects are made of different material.", "fol": "", "prediction": ["all x.(Object(x) -> MadeOfDifferentMaterial(x))"]}
{"id": "eqasc_train_3422", "nl": "Objects of different materials share those materials' properties.", "fol": "", "prediction": ["all x y.((Object(x) & Material(y)) -> ShareProperties(x,y))"]}
{"id": "eqasc_train_3423", "nl": "An asteroid is a rock-like object with an irregular shape.", "fol": "", "prediction": ["all x.(Asteroid(x) -> (RockLikeObject(x) & IrregularShape(x)))"]}
{"id": "eqasc_train_3424", "nl": "if an asteroid is made of a material then that asteroid has the properties of that material", "fol": "", "prediction": ["all x y.((Asteroid(x) & MadeOf(x,y) & Material(y)) -> HasPropertiesOf(x,y))"]}
{"id": "eqasc_train_3425", "nl": "Appearance nodes affect an object's appearance, such as color, material properties, or texture maps.", "fol": "", "prediction": ["all x y.((AppearanceNode(x) & (Color(y) | MaterialProperties(y) | TextureMaps(y))) -> AffectsAppearance(x,y))"]}
{"id": "eqasc_train_3426", "nl": "An object made with a material will have the appearance, texture and color of the material.", "fol": "", "prediction": ["all x y.((Object(x) & Material(y) & MadeWith(x,y)) -> (Appearance(x,y) & Texture(x,y) & Color(x,y)))"]}
{"id": "eqasc_train_3427", "nl": "Metals are extremely versatile materials.", "fol": "", "prediction": ["all x.(Metal(x) -> VersatileMaterial(x))"]}
{"id": "eqasc_train_3428", "nl": "If an object is made of metal then that objects has the properties of the metal.", "fol": "", "prediction": ["all x.((Object(x) & MadeOfMetal(x)) -> HasPropertiesOfMetal(x))"]}
{"id": "eqasc_train_3429", "nl": "And copper is durable material for a frame.", "fol": "", "prediction": ["(all x.(Cuivre(x) -> DurableMaterial(x)))"]}
{"id": "eqasc_train_3430", "nl": "if an frame is made of copper then that frame has the properties of that copper", "fol": "", "prediction": ["all x.((Frame(x) & MadeOfCopper(x)) -> HasPropertiesOfCopper(x))"]}
{"id": "eqasc_train_3431", "nl": "Every object in the game has mass, density, and material properties.", "fol": "", "prediction": ["all x.(Object(x) -> (HasMass(x) & HasDensity(x) & HasMaterialProperties(x)))"]}
{"id": "eqasc_train_3432", "nl": "if an object is made of a material then that object has mass and density", "fol": "", "prediction": ["all x y.((MadeOf(x,y) & Material(y)) -> (HasMass(x,y) & HasDensity(x,y)))"]}
{"id": "eqasc_train_3433", "nl": "Standard knife blade material is heat treated stainless steel.", "fol": "", "prediction": ["all x.(StandardKnifeBladeMaterial(x) -> HeatTreatedStainlessSteel(x))"]}
{"id": "eqasc_train_3434", "nl": "if an object is made of stainless steel then that object has the properties of stainless steel", "fol": "", "prediction": ["all x.((Object(x) & MadeOfStainlessSteel(x)) -> HasStainlessSteelProperties(x))"]}
{"id": "eqasc_train_3435", "nl": "Properties are the characteristics of an object.", "fol": "", "prediction": ["all x y.((Property(x) & Object(y)) -> Characteristics(x,y))"]}
{"id": "eqasc_train_3436", "nl": "if an object is made of a material then it has the characteristics of that material", "fol": "", "prediction": ["all x y.((MadeOf(x,y) & Material(y)) -> HasCharacteristicsOf(x,y))"]}
{"id": "eqasc_train_3437", "nl": "Finally, gold is a very dense material.", "fol": "", "prediction": ["all x.(Gold(x) -> DenseMaterial(x))"]}
{"id": "eqasc_train_3438", "nl": "An object made out of gold will be dense", "fol": "", "prediction": ["all x.((Object(x) & MadeOutOfGold(x)) -> Dense(x))"]}
{"id": "eqasc_train_3439", "nl": "Headings include Materials Research, Materials, Ceramic Materials, Composite Materials.", "fol": "", "prediction": ["all x.((Heading(x) & MaterialsResearch(x) & Materials(x) & CeramicMaterials(x) & CompositeMaterials(x)) -> Heading(x))"]}
{"id": "eqasc_train_3440", "nl": "if an object is made of a Ceramic then that object has the properties of Ceramic", "fol": "", "prediction": ["all x y.((Object(x) & MadeOfCeramic(x)) -> HasPropertiesOfCeramic(x,y))"]}
{"id": "eqasc_train_3441", "nl": "An object is an item in the real world.", "fol": "", "prediction": ["all x.(Object(x) -> ItemInRealWorld(x))"]}
{"id": "eqasc_train_3442", "nl": "when an item is made of a material then it has the properties of that material.", "fol": "", "prediction": ["all x y.((Item(x) & Material(y) & MadeOf(x,y)) -> HasPropertiesOf(x,y))"]}
{"id": "eqasc_train_3443", "nl": "Properties can be used to separate or sort a group of objects or materials.", "fol": "", "prediction": ["all x.(Property(x) -> (SeparateObjectsOrMaterials(x) | SortGroup(x)))"]}
{"id": "eqasc_train_3444", "nl": "items properties are the same as the materials the item is made of", "fol": "", "prediction": ["all x.(Item(x) -> Material(x))"]}
{"id": "eqasc_train_3445", "nl": "Toxicity is an inherent property of the material.", "fol": "", "prediction": ["all x.(Toxicity(x) -> InherentPropertyOfMaterial(x))"]}
{"id": "eqasc_train_3446", "nl": "Toxicity can be inherited from the objects properties", "fol": "", "prediction": ["all x y.((Object(x) & Toxicity(y)) -> (inheritedFromProperties(x,y) & ObjectProperties(x,y)))"]}
{"id": "eqasc_train_3447", "nl": "Objects made from iron and steel have the property of magnetism.", "fol": "", "prediction": ["all x.((Object(x) & MadeFromIron(x) & MadeFromSteel(x)) -> Magnetism(x))"]}
{"id": "eqasc_train_3448", "nl": "Something made with iron has the property of magnetism", "fol": "", "prediction": ["all x.((MadeWithIron(x) & MagnetismProperty(x)) -> HasMagnetism(x))"]}
{"id": "eqasc_train_3449", "nl": "If an object is made of a metal, then that object has the properties of that metal.", "fol": "", "prediction": ["all x.((Object(x) & MadeOfMetal(x)) -> HasPropertiesOfMetal(x))"]}
{"id": "eqasc_train_3450", "nl": "Strength of materials is the study of properties of materials.", "fol": "", "prediction": ["all x.(StrengthOfMaterials(x) -> StudiesPropertiesOfMaterials(x))"]}
{"id": "eqasc_train_3451", "nl": "objects have strength", "fol": "", "prediction": ["all x.(Object(x) -> HasStrength(x))"]}
{"id": "eqasc_train_3452", "nl": "Drugs are chemical substances, which are material.", "fol": "", "prediction": ["all x.(Drug(x) -> (ChemicalSubstance(x) & Material(x)))"]}
{"id": "eqasc_train_3453", "nl": "If an object is made of a drug, then that object has the properties of that drug.", "fol": "", "prediction": ["all x.((Object(x) & MadeOfDrug(x)) -> HasPropertiesOfDrug(x))"]}
{"id": "eqasc_train_3454", "nl": "Caffeine is a central nervous system stimulant.", "fol": "", "prediction": ["all x.(Caffeine(x) -> StimulantCentralNervousSystem(x))"]}
{"id": "eqasc_train_3455", "nl": "Coffee is an excellent source of caffeine.", "fol": "", "prediction": ["all x.(Coffee(x) -> ExcellentSourceOfCaffeine(x))"]}
{"id": "eqasc_train_3456", "nl": "coffee is a central nervous system stimulant", "fol": "", "prediction": ["all x.(Coffee(x) -> StimulantCentralNervousSystem(x))"]}
{"id": "eqasc_train_3457", "nl": "Coffee stimulates the central nervous system", "fol": "", "prediction": ["all x y.((Coffee(x) & CentralNervousSystem(y)) -> Stimulates(x,y))"]}
{"id": "eqasc_train_3458", "nl": "Stimulants can cause overheating and dehydration.", "fol": "", "prediction": ["all x.(Stimulants(x) -> (CausesOverheating(x) & CausesDehydration(x)))"]}
{"id": "eqasc_train_3459", "nl": "Caffeine can cause dehydration.", "fol": "", "prediction": ["all x.(Caffeine(x) -> CausesDehydration(x))"]}
{"id": "eqasc_train_3460", "nl": "Over stimulation can cause sleep problems.", "fol": "", "prediction": ["all x.(OverStimulation(x) -> CausesSleepProblems(x))"]}
{"id": "eqasc_train_3461", "nl": "Too much caffeine leads to sleep problems", "fol": "", "prediction": ["all x.((Caffeine(x) & SleepProblems(x)) -> TooMuch(x))"]}
{"id": "eqasc_train_3462", "nl": "Likewise, the caffeine and saccharose stimulate the body's stimulation of serotonin.", "fol": "", "prediction": ["all x y.((Caffeine(x) & Saccharose(y)) -> StimulatesSerotonin(x,y))"]}
{"id": "eqasc_train_3463", "nl": "Saccharose is a central nervous system stimulant.", "fol": "", "prediction": ["all x.(Saccharide(x) -> StimulantCentralNervousSystem(x))"]}
{"id": "eqasc_train_3464", "nl": "Cocaine is a stimulant and increases the user's heart rate and blood pressure.", "fol": "", "prediction": ["all x.(Cocaine(x) -> (Stimulant(x) & IncreasesHeartRate(x) & IncreasesBloodPressure(x)))"]}
{"id": "eqasc_train_3465", "nl": "caffeine increases a user's heart rate and blood pressure", "fol": "", "prediction": ["all x y.((Caffeine(x) & User(y)) -> (IncreasesHeartRate(y,x) & IncreasesBloodPressure(y,x)))"]}
{"id": "eqasc_train_3466", "nl": "Men seek the excitement of stimulants, because, for the time, the results are agreeable.", "fol": "", "prediction": ["all x y.((Men(x) & Stimulant(y)) -> (SeeksExcitement(x,y) & AffordableResults(x)))"]}
{"id": "eqasc_train_3467", "nl": "Caffeine excites the central nervous system", "fol": "", "prediction": ["all x.(Caffeine(x) -> ExcitesCentralNervousSystem(x))"]}
{"id": "eqasc_train_3468", "nl": "Like caffeine, nicotine is a stimulant.", "fol": "", "prediction": ["(Stimulant(Nitrogen) & LikeCaffeine(Nitrogen))"]}
{"id": "eqasc_train_3469", "nl": "nicotine affects he central nervous system", "fol": "", "prediction": ["all x y.((Nitrogen(x) & CentralNervousSystem(y)) -> Affects(x,y))"]}
{"id": "eqasc_train_3470", "nl": "Caffeine is a stimulant, and a stimulant constricts blood vessels.", "fol": "", "prediction": ["all x.(Caffeine(x) -> (Stimulant(x) & ConstrictsBloodVessels(x)))"]}
{"id": "eqasc_train_3471", "nl": "Caffeine constricts blood vessels", "fol": "", "prediction": ["all x.(Caffeine(x) -> ConstrictsBloodVessels(x))"]}
{"id": "eqasc_train_3472", "nl": "water vapor cooling causes that water vapor to condense", "fol": "", "prediction": ["all x y.((WaterVaporCooling(x) & WaterVapor(y)) -> CausesWaterVaporCondense(x,y))"]}
{"id": "eqasc_train_3473", "nl": "Water vapor cooling can cause clouds to form.", "fol": "", "prediction": ["all x.(WaterVaporCooling(x) -> CausesCloudsToForm(x))"]}
{"id": "eqasc_train_3474", "nl": "All lenses are anti-fog coated to eliminate condensation.", "fol": "", "prediction": ["all x.(Lens(x) -> AntiFogCoated(x))"]}
{"id": "eqasc_train_3475", "nl": "Water vapor cooling causes lenses to fog", "fol": "", "prediction": ["all x y.((WaterVaporCooling(x) & Lens(y)) -> CausesFog(x,y))"]}
{"id": "eqasc_train_3476", "nl": "All carcasses are chilled with cool air for 48 hours.", "fol": "", "prediction": ["all x.(Castle(x) -> (ColdAir(x) & Refrigerated(x) & For48Hours(x)))"]}
{"id": "eqasc_train_3477", "nl": "water vapor chilling causes that water vapor to condense", "fol": "", "prediction": ["all x y.((WaterVaporChilding(x) & WaterVapor(y)) -> CausesWaterVaporCondense(x,y))"]}
{"id": "eqasc_train_3478", "nl": "Heat energy is released as the water vapor in the air condenses.", "fol": "", "prediction": ["all x y.((HeatEnergy(x) & WaterVapor(y) & AirCondenses(x)) -> Released(x,y))"]}
{"id": "eqasc_train_3479", "nl": "Water vapor cooling releases heat energy.", "fol": "", "prediction": ["all x.(WaterVaporCooling(x) -> ReleasesHeatEnergy(x))"]}
{"id": "eqasc_train_3480", "nl": "Cooler air can hold less water vapor than warmer air and condenses as clouds or in the form of rain.", "fol": "", "prediction": ["all x y.((CoolerAir(x) & WarmerAir(y)) -> (HoldsLessWaterVapor(x,y) & CondensesAsCloudsOrRain(x)))"]}
{"id": "eqasc_train_3481", "nl": "Water vapor cooling causes clouds or rain.", "fol": "", "prediction": ["all x.(WaterVaporCooling(x) -> (CausesClouds(x) | CausesRain(x)))"]}
{"id": "eqasc_train_3482", "nl": "clouds are formed by  water vapor", "fol": "", "prediction": ["all x.(Cloud(x) -> FormedByWaterVapor(x))"]}
{"id": "eqasc_train_3483", "nl": "When water vapor condenses, energy is released.", "fol": "", "prediction": ["all x.(WaterVaporCondenses(x) -> EnergyReleased(x))"]}
{"id": "eqasc_train_3484", "nl": "Water vapor cooling causes that water vapor to release energy", "fol": "", "prediction": ["all x y.((WaterVaporCooling(x) & WaterVapor(y)) -> CausesWaterVaporToReleaseEnergy(x,y))"]}
{"id": "eqasc_train_3485", "nl": "Vapor condenses, falls and seeps into the ground.", "fol": "", "prediction": ["all x.(Vapor(x) -> (Condenses(x) & Falls(x) & SeepsIntoGround(x)))"]}
{"id": "eqasc_train_3486", "nl": "Water vapor cooling causes that water to fall and seep into the ground.", "fol": "", "prediction": ["all x.(WaterVaporCooling(x) -> (CausesWaterToFall(x) & SeepsIntoGround(x)))"]}
{"id": "eqasc_train_3487", "nl": "h2o vapor cooling causes that h2o vapor to condense", "fol": "", "prediction": ["all x.((H2oVaporCooling(x) & CausesH2oVaporCondense(x)) -> CausesCondense(x))"]}
{"id": "eqasc_train_3488", "nl": "When water vapor cools, it condenses to form clouds.", "fol": "", "prediction": ["all x.((WaterVapor(x) & Cools(x)) -> CondensesToFormClouds(x))"]}
{"id": "eqasc_train_3489", "nl": "Clouds are formed when vapor cools", "fol": "", "prediction": ["all x y.((Cloud(x) & Vapor(y)) -> Cools(y))"]}
{"id": "eqasc_train_3490", "nl": "Cells are the basic units of the structure and function of living things.", "fol": "", "prediction": ["all x.(Cell(x) -> (BasicUnit(x) & Structure(x) & Function(x) & LivingThing(x)))"]}
{"id": "eqasc_train_3491", "nl": "Proteins are needed for cell building.", "fol": "", "prediction": ["all x.(Protein(x) -> NeededForCellBuilding(x))"]}
{"id": "eqasc_train_3492", "nl": "living things need protein", "fol": "", "prediction": ["all x.(LivingThing(x) -> NeedsProtein(x))"]}
{"id": "eqasc_train_3493", "nl": "Cells are the basic units of the structure and function of organisms.", "fol": "", "prediction": ["all x.(Cell(x) -> (BasicUnit(x) & Structure(x) & Function(x) & Organism(x)))"]}
{"id": "eqasc_train_3494", "nl": "Humans, angels, animals, and all other living things are finite.", "fol": "", "prediction": ["all x.((Human(x) | Angel(x) | Animal(x)) -> Finite(x))"]}
{"id": "eqasc_train_3495", "nl": "cells are the basic units of humans", "fol": "", "prediction": ["all x.(Cell(x) -> BasicUnitOfHumans(x))"]}
{"id": "eqasc_train_3496", "nl": "Biology is the science of living things.", "fol": "", "prediction": ["all x.(Biology(x) -> ScienceOfLivingThings(x))"]}
{"id": "eqasc_train_3497", "nl": "biology is the science of things with cells", "fol": "", "prediction": ["all x.(Biology(x) -> (ScienceOfCells(x) & ThingsWithCells(x)))"]}
{"id": "eqasc_train_3498", "nl": "Cells are the basic units of the structure and function of an organism.", "fol": "", "prediction": ["all x.(Cell(x) -> (BasicUnit(x) & Structure(x) & Function(x)))"]}
{"id": "eqasc_train_3499", "nl": "Every living thing, animal and plant, are given a classification.", "fol": "", "prediction": ["all x.(LivingThing(x) -> (Animal(x) | Plant(x)))"]}
{"id": "eqasc_train_3500", "nl": "Cells make up the structure and function of plants and animals.", "fol": "", "prediction": ["all x.(Cell(x) -> (MakesUpStructure(x) & MakesUpFunction(x) & OfPlantsAndAnimals(x)))"]}
{"id": "eqasc_train_3501", "nl": "Cells are the basic units of the structure and function of organisms", "fol": "", "prediction": ["all x.(Cell(x) -> (BasicUnit(x) & StructureAndFunctionOfOrganisms(x)))"]}
{"id": "eqasc_train_3502", "nl": "Physiology is the study of the function of living things.", "fol": "", "prediction": ["all x.(Physiology(x) -> StudiesLivingThings(x))"]}
{"id": "eqasc_train_3503", "nl": "Physiology studies cells.", "fol": "", "prediction": ["all x.(Physiology(x) -> StudiesCells(x))"]}
{"id": "eqasc_train_3504", "nl": "All cells use glucose for energy.", "fol": "", "prediction": ["all x.(Cell(x) -> UsesGlucoseForEnergy(x))"]}
{"id": "eqasc_train_3505", "nl": "all living things use glucose for energy", "fol": "", "prediction": ["all x.(LivingThing(x) -> UsesGlucoseForEnergy(x))"]}
{"id": "eqasc_train_3506", "nl": "Tigers are the largest of the living cats.", "fol": "", "prediction": ["all x.(Tiger(x) -> LargestOfLivingCats(x))"]}
{"id": "eqasc_train_3507", "nl": "Cells are the basic units of the structure and function of tigers", "fol": "", "prediction": ["all x.(Cell(x) -> (BasicUnit(x) & StructureAndFunctionOfTigers(x)))"]}
{"id": "eqasc_train_3508", "nl": "An organism is a living thing or something that was once alive.", "fol": "", "prediction": ["all x.(Organism(x) -> (LivingThing(x) | SomethingAlive(x)))"]}
{"id": "eqasc_train_3509", "nl": "Cells are the basic units of the structure and function of  organisms.", "fol": "", "prediction": ["all x.(Cell(x) -> (BasicUnit(x) & Structure(x) & Function(x) & Organism(x)))"]}
{"id": "eqasc_train_3510", "nl": "Organic materials, or living things, are biodegradable.", "fol": "", "prediction": ["all x.((OrganicMaterial(x) | LivingThing(x)) -> Biodegradable(x))"]}
{"id": "eqasc_train_3511", "nl": "Cells are the basic units of the structure and are biodegradable", "fol": "", "prediction": ["all x.(Cell(x) -> (BasicUnit(x) & Biodegradable(x)))"]}
{"id": "eqasc_train_3512", "nl": "Respiration is a function of life, which means it is carried on by all living things.", "fol": "", "prediction": ["all x.(Respiration(x) -> (LifeFunction(x) & CarriedOnByLivingThings(x)))"]}
{"id": "eqasc_train_3513", "nl": "Cells are the basic units of Respiration in all living things", "fol": "", "prediction": ["all x.(Cell(x) -> RespirationUnit(x))"]}
{"id": "eqasc_train_3514", "nl": "Osteogenic cell types are indicated.", "fol": "", "prediction": ["all x.(OsteogenicCellType(x) -> Indicates(x))"]}
{"id": "eqasc_train_3515", "nl": "Osteogenic is a type of the basic units of the structure and function of living things.", "fol": "", "prediction": ["all x.(Osteogenic(x) -> (BasicUnits(x) & StructureAndFunctionOfLivingThings(x)))"]}
{"id": "eqasc_train_3516", "nl": "microorganisms cause food to spoil", "fol": "", "prediction": ["all x y.((Microorganism(x) & Food(y)) -> CausesToSpoil(x,y))"]}
{"id": "eqasc_train_3517", "nl": "Bacteria are microorganisms that exist everywhere.", "fol": "", "prediction": ["all x.(Bacteria(x) -> exists y.(Microorganism(y) & Microorganism(x,y)))"]}
{"id": "eqasc_train_3518", "nl": "Bacteria cause food to spoil.", "fol": "", "prediction": ["all x.(Bacteria(x) -> CausesFoodToSpoil(x))"]}
{"id": "eqasc_train_3519", "nl": "Tens of millions of Americans get sick every year from bad food.", "fol": "", "prediction": ["all x.((American(x) & MillionsOf(x)) -> GetsSickFromBadFood(x))"]}
{"id": "eqasc_train_3520", "nl": "microorganisms can make humans sick", "fol": "", "prediction": ["all x y.((Microorganism(x) & Human(y)) -> CanMakeSick(x,y))"]}
{"id": "eqasc_train_3521", "nl": "Food is often moldy or spoiled .", "fol": "", "prediction": ["all x.(Food(x) -> (Moldy(x) | Spotty(x)))"]}
{"id": "eqasc_train_3522", "nl": "Microorganisms cause food to mold", "fol": "", "prediction": ["all x y.((Microorganism(x) & Food(y)) -> CausesToMold(x,y))"]}
{"id": "eqasc_train_3523", "nl": "Food poisoning occurs when spoiled food is eaten.", "fol": "", "prediction": ["all x.((SpoiledFood(x) & Eaten(x)) -> FoodPoisoning(x))"]}
{"id": "eqasc_train_3524", "nl": "Microorganisms cause food poisoning", "fol": "", "prediction": ["all x.(Microorganism(x) -> CausesFoodPoisoning(x))"]}
{"id": "eqasc_train_3525", "nl": "Likewise, eating certain foods can also cause serious sickness.", "fol": "", "prediction": ["all x.((Eats(x) & Food(x)) -> CausesSeriousSickness(x))"]}
{"id": "eqasc_train_3526", "nl": "Microorganisms can cause edibles to spoil and cause serious sickness.", "fol": "", "prediction": ["all x.(Microorganism(x) -> (CausesEdibleSpoilage(x) & CausesSeriousSickness(x)))"]}
{"id": "eqasc_train_3527", "nl": "microorganisms cause food poisoning", "fol": "", "prediction": ["all x.(Microorganism(x) -> CausesFoodPoisoning(x))"]}
{"id": "eqasc_train_3528", "nl": "Irradiation kills microorganisms that spoil food.", "fol": "", "prediction": ["all x.(Irradiation(x) -> KillsMicroorganisms(x))"]}
{"id": "eqasc_train_3529", "nl": "irradiation can kill microorganisms", "fol": "", "prediction": ["all x y.((Irradiation(x) & Microorganism(y)) -> Kills(x,y))"]}
{"id": "eqasc_train_3530", "nl": "Among the threats to food and water safety are microorganisms such as bacteria.", "fol": "", "prediction": ["all x.((Microorganism(x) & ThreatToFoodAndWaterSafety(x)) -> Bacteria(x))"]}
{"id": "eqasc_train_3531", "nl": "Bacteria can cause food to spoil", "fol": "", "prediction": ["all x.(Bacteria(x) -> CausesFoodToSpoil(x))"]}
{"id": "eqasc_train_3532", "nl": "Chromosomes contain genes, which code for proteins.", "fol": "", "prediction": ["all x.(Chromosome(x) -> (ContainsGenes(x) & CodesProteins(x)))"]}
{"id": "eqasc_train_3533", "nl": "Chromosomes are composed of DNA and proteins.", "fol": "", "prediction": ["all x.(Chromosome(x) -> (ComposedOfDNA(x) & ComposedOfProteins(x)))"]}
{"id": "eqasc_train_3534", "nl": "genes code proteins", "fol": "", "prediction": ["all x.(GenesCodeProteins(x) -> CodesProteins(x))"]}
{"id": "eqasc_train_3535", "nl": "Genes are arranged in gene clusters.", "fol": "", "prediction": ["all x.(Gene(x) -> ArrangedInGeneClusters(x))"]}
{"id": "eqasc_train_3536", "nl": "chromosomes contain clusters", "fol": "", "prediction": ["all x.(Chromosome(x) -> ContainsClusters(x))"]}
{"id": "eqasc_train_3537", "nl": "Information is provided by chromosome or by institution.", "fol": "", "prediction": ["all x.(Chromosome(x) | Institution(x))"]}
{"id": "eqasc_train_3538", "nl": "Information is contained in genes for coding proteins", "fol": "", "prediction": ["all x y.((Gene(x) & Gene(y) & CodesProteins(x,y)) -> InformationContainedIn(x,y))"]}
{"id": "eqasc_train_3539", "nl": "genes are coded on DNA strands", "fol": "", "prediction": ["all x y.((Gene(x) & DNAString(y)) -> CodedOn(x,y))"]}
{"id": "eqasc_train_3540", "nl": "Each cell contains the code, in bundles called chromosomes.", "fol": "", "prediction": ["all x.(Cell(x) -> ContainsCode(x))"]}
{"id": "eqasc_train_3541", "nl": "bundles contain genes", "fol": "", "prediction": ["all x.(Bundle(x) -> ContainsGenes(x))"]}
{"id": "eqasc_train_3542", "nl": "Another gene, named BRCA2, has also been identified.", "fol": "", "prediction": ["(Identified(Gene) & Gene(Gene) & BRCA2(Gene))"]}
{"id": "eqasc_train_3543", "nl": "Chromosomes contain BRCA2.", "fol": "", "prediction": ["all x.(Chromosome(x) -> ContainsBRCA2."]}
{"id": "eqasc_train_3544", "nl": "Protein builds and repairs body tissue.", "fol": "", "prediction": ["all x.(Protein(x) -> (BuildsBodyTissue(x) & RepairsBodyTissue(x)))"]}
{"id": "eqasc_train_3545", "nl": "Chromosomes contain genes, which code for body tissue.", "fol": "", "prediction": ["all x.(Chromosome(x) -> (ContainsGenes(x) & CodesForBodyTissue(x)))"]}
{"id": "eqasc_train_3546", "nl": "DNA is a code, or recipe, for the manufacture of proteins.", "fol": "", "prediction": ["all x.(DNA(x) -> (Code(x) | Recipe(x)) & ForProteinManufacturing(x)))"]}
{"id": "eqasc_train_3547", "nl": "Chromosomes contain a recipe for the manufacture of proteins", "fol": "", "prediction": ["all x.(Chromosome(x) -> ContainsRecipeForProteinManufacturing(x))"]}
{"id": "eqasc_train_3548", "nl": "Information on DNA is organized into genes.", "fol": "", "prediction": ["all x.((InformationOnDNA(x) & Gene(x)) -> OrganizedInto(x,y))"]}
{"id": "eqasc_train_3549", "nl": "DNA codes for proteins.", "fol": "", "prediction": ["all x.((DNACode(x) & Protein(x)) -> Codes(x,y))"]}
{"id": "eqasc_train_3550", "nl": "Wetlands are extremely important biomes.", "fol": "", "prediction": ["all x.(Wetland(x) -> ExtremelyImportantBiome(x))"]}
{"id": "eqasc_train_3551", "nl": "Wetlands are extremely important ecosystems.", "fol": "", "prediction": ["all x.(Wetland(x) -> ExtremelyImportantEcosystem(x))"]}
{"id": "eqasc_train_3552", "nl": "Biomes are the world's major habitats.", "fol": "", "prediction": ["all x.(Biome(x) -> MajorHabitat(x))"]}
{"id": "eqasc_train_3553", "nl": "Wetlands are extremely important major world habitats", "fol": "", "prediction": ["all x.(Wetland(x) -> (ExtremelyImportant(x) & MajorWorldHabitat(x)))"]}
{"id": "eqasc_train_3554", "nl": "Wetlands are extremely important global ecosystems.", "fol": "", "prediction": ["all x.(Wetland(x) -> ExtremelyImportantGlobalEcosystem(x))"]}
{"id": "eqasc_train_3555", "nl": "Marshes and swamps are wetlands.", "fol": "", "prediction": ["all x.((Marshes(x) | Swamps(x)) -> Wetland(x))"]}
{"id": "eqasc_train_3556", "nl": "Marshes and swamps are extremely important biomes.", "fol": "", "prediction": ["all x.((Marshes(x) | Swamps(x)) -> Biome(x))"]}
{"id": "eqasc_train_3557", "nl": "Wetlands are extremely important the world's major habitats", "fol": "", "prediction": ["all x.(Wetland(x) -> (ExtremelyImportant(x) & MajorHabitat(x)))"]}
{"id": "eqasc_train_3558", "nl": "Roseate spoonbills frequent fresh, brackish, and saltwater wetlands, mangrove islands.", "fol": "", "prediction": ["all x.(RoseateSpokenbill(x) -> (FrequentFreshWaterWetlands(x) & FrequentBrackishWaterWetlands(x) & FrequentSaltwaterWaterWetlands(x) & FrequentMangroveIslands(x)))"]}
{"id": "eqasc_train_3559", "nl": "The habitat of spoonbills are extremely important biomes", "fol": "", "prediction": ["all x.(SpoonbillHabitat(x) -> ExtremelyImportantBiome(x))"]}
{"id": "eqasc_train_3560", "nl": "Animals live on the vegetation found in the biomes.", "fol": "", "prediction": ["all x y.((Animal(x) & Vegetation(y) & FoundInBiomes(x,y)) -> LivesOn(x,y))"]}
{"id": "eqasc_train_3561", "nl": "Animals can be found to be living in wetlands.", "fol": "", "prediction": ["all x.(Animal(x) -> LivingInWetland(x))"]}
{"id": "eqasc_train_3562", "nl": "Palustrine wetlands include marshes, bogs, and swamps.", "fol": "", "prediction": ["all x.(PalustrineWetland(x) -> (Marshes(x) | Bogs(x) | Swamps(x)))"]}
{"id": "eqasc_train_3563", "nl": "Marshes, bogs and swamps are very important biomes.", "fol": "", "prediction": ["all x.((Marshes(x) | Bogs(x) | Swamps(x)) -> Biome(x))"]}
{"id": "eqasc_train_3564", "nl": "Biomes are simply environments that have some things in common.", "fol": "", "prediction": ["all x.(Biome(x) -> (Environment(x) & HasThingsInCommon(x)))"]}
{"id": "eqasc_train_3565", "nl": "Wetlands are extremely important environments.", "fol": "", "prediction": ["all x.(Wetland(x) -> ExtremelyImportantEnvironment(x))"]}
{"id": "eqasc_train_3566", "nl": "Function of wetlands and Great Lakes wetlands.", "fol": "", "prediction": ["all x.((Wetland(x) & GreatLakesWetland(x)) -> Function(x))"]}
{"id": "eqasc_train_3567", "nl": "Great Lakes are extremely important biomes", "fol": "", "prediction": ["all x.(GreatLake(x) -> (ExtremelyImportantBiome(x) & ImportantBiome(x)))"]}
{"id": "eqasc_train_3568", "nl": "Sight is the ability to sense light, and the eye is the organ that senses light.", "fol": "", "prediction": ["all x y.((Sight(x) & Eye(y)) -> (SensesLight(x) & Organ(y) & SenseLight(y)))"]}
{"id": "eqasc_train_3569", "nl": "Once the brain interprets the messages, the sight process is completed.", "fol": "", "prediction": ["all x.((Bird(x) & InterpretsMessages(x)) -> CompletedSightProcess(x))"]}
{"id": "eqasc_train_3570", "nl": "sensing light requires the brain", "fol": "", "prediction": ["all x.(SensingLight(x) -> RequiresBrain(x))"]}
{"id": "eqasc_train_3571", "nl": "Light is the part of the spectrum that stimulates the eye's retina, resulting in sight.", "fol": "", "prediction": ["all x.(Light(x) -> (StimulatesEyeRetina(x) & ResultsInSight(x)))"]}
{"id": "eqasc_train_3572", "nl": "Sight is the result of light stimulating the retina", "fol": "", "prediction": ["all x.(Sight(x) -> (LightStimulatesRetinal(x) & StimulatesRetinal(x)))"]}
{"id": "eqasc_train_3573", "nl": "Light is the part of the spectrum that the eye can sense", "fol": "", "prediction": ["all x.(Light(x) -> (PartOfSpectrum(x) & EyeSenses(x)))"]}
{"id": "eqasc_train_3574", "nl": "Eyes can detect images and see light using sight.", "fol": "", "prediction": ["all x.(Eyes(x) -> (DetectsImages(x) & SeesLight(x)))"]}
{"id": "eqasc_train_3575", "nl": "Colors use the sense of sight.", "fol": "", "prediction": ["all x.(Color(x) -> UseSenseOfSight(x))"]}
{"id": "eqasc_train_3576", "nl": "eyes can sense colors", "fol": "", "prediction": ["all x y.((Eyes(x) & Color(y)) -> CanSense(x,y))"]}
{"id": "eqasc_train_3577", "nl": "The eye is an organ that can sense photons.", "fol": "", "prediction": ["all x.(Eye(x) -> (Organ(x) & CanSensePhotons(x)))"]}
{"id": "eqasc_train_3578", "nl": "sight involves the retina", "fol": "", "prediction": ["all x.(Sight(x) -> InvolvesRetina(x))"]}
{"id": "eqasc_train_3579", "nl": "The eye is the organ you need to see light which creates vision", "fol": "", "prediction": ["all x.(Eye(x) -> (Organ(x) & NeedsToSeeLight(x) & CreatesVision(x)))"]}
{"id": "eqasc_train_3580", "nl": "Light enters the eye and an image is focused on the retina.", "fol": "", "prediction": ["all x y.((Light(x) & Eye(y)) -> (Enters(x,y) & FocusedOn(x,y)))"]}
{"id": "eqasc_train_3581", "nl": "Sight is the ability to see when light allows an image to be focused on the retina", "fol": "", "prediction": ["all x y.((Sight(x) & Light(y) & AllowsImageFocusedOnRetina(x,y)) -> CanSee(x))"]}
{"id": "eqasc_train_3582", "nl": "Vision begins with sight.", "fol": "", "prediction": ["all x.(Vision(x) -> StartsWithSight(x))"]}
{"id": "eqasc_train_3583", "nl": "Vision is the ability to sense light and the eye is the organ that senses light.", "fol": "", "prediction": ["all x y.((Vision(x) & Eye(y)) -> (SensesLight(x) & OrganSensesLight(y)))"]}
{"id": "eqasc_train_3584", "nl": "Loss of sight means the total, permanent loss of sight of the eye.", "fol": "", "prediction": ["all x.(LossOfSight(x) -> (TotalPermanentLossOfSight(x) & Eye(x)))"]}
{"id": "eqasc_train_3585", "nl": "sight is the ability to sense light,loss of sight means total permanent loss", "fol": "", "prediction": ["all x.(Sight(x) -> (SensesLight(x) & LossOfSight(x)))"]}
{"id": "eqasc_train_3586", "nl": "Sight is the process of organized images falling on the retina.", "fol": "", "prediction": ["all x.(Sight(x) -> (OrganizedImages(x) & FallOnRetina(x)))"]}
{"id": "eqasc_train_3587", "nl": "Light enters the eye and forms images.", "fol": "", "prediction": ["all x y.((Light(x) & Eye(y)) -> (Enters(x,y) & FormsImages(x)))"]}
{"id": "eqasc_train_3588", "nl": "sight is the ability to see images via the eye", "fol": "", "prediction": ["all x.(Sight(x) -> (SeeImages(x) & ThroughEye(x)))"]}
{"id": "eqasc_train_3589", "nl": "sight is the ability to sense rays or beams, and the eye is the organ that senses them", "fol": "", "prediction": ["all x y z.((Sight(x) & Eye(y) & Ray(z)) -> (Senses(x,z) | Sense(y,z)))"]}
{"id": "eqasc_train_3590", "nl": "Ozone depletion results in higher levels of UV radiation reaching Earth.", "fol": "", "prediction": ["all x.(OzoneDepletion(x) -> HigherUVRadiation(x))"]}
{"id": "eqasc_train_3591", "nl": "Solar UV radiation levels are highest during the middle of the day.", "fol": "", "prediction": ["all x.((SolarUVRadiation(x) & MiddleOfDay(x)) -> Highest(x))"]}
{"id": "eqasc_train_3592", "nl": "Ozone depletion results in radiation levels that are highest during the middle of the day.", "fol": "", "prediction": ["all x.(OzoneDepletion(x) -> HighestRadiationLevelsDuringMiddleOfDay(x))"]}
{"id": "eqasc_train_3593", "nl": "Ozone absorbs ultraviolet radiation.", "fol": "", "prediction": ["all x.(Ozone(x) -> AbsorbsUVRadiation(x))"]}
{"id": "eqasc_train_3594", "nl": "less ozone means more ultraviolet light", "fol": "", "prediction": ["all x.((Ozone(x) & LessOzone(x)) -> MoreUVLight(x))"]}
{"id": "eqasc_train_3595", "nl": "If there is an increase in UV radiation, the risks go up for all types of skin cancer.", "fol": "", "prediction": ["all x.((IncreaseInUVRadiation(x) & SkinCancer(x)) -> RisksUp(x))"]}
{"id": "eqasc_train_3596", "nl": "ozone depletion increases the risk for all types of skin cancer", "fol": "", "prediction": ["all x.(OzoneDepletion(x) -> IncreasesRiskForSkinCancer(x))"]}
{"id": "eqasc_train_3597", "nl": "Children are most at risk for overexposure to UV radiation.", "fol": "", "prediction": ["all x.(Child(x) -> AtRiskForUVRadiation(x))"]}
{"id": "eqasc_train_3598", "nl": "ozone depletion puts children at risk", "fol": "", "prediction": ["all x.(OzoneDepletion(x) -> PutsChildrenAtRisk(x))"]}
{"id": "eqasc_train_3599", "nl": "Birds live on Earth, trees live on Earth.", "fol": "", "prediction": ["all x y.((Bird(x) & Tree(y)) -> (LivesOn(x,Earth) & LivesOn(y,Earth)))"]}
{"id": "eqasc_train_3600", "nl": "ozone depletion results in higher levels of uv radiation reaching the place birds and trees live.", "fol": "", "prediction": ["all x y.((OzoneDepletion(x) & Bird(y) & Tree(y)) -> HigherUvRadiation(x,y))"]}
{"id": "eqasc_train_3601", "nl": "Fast Facts 1985 Scientists discover a hole in the ozone layer of the atmosphere over Antarctica.", "fol": "", "prediction": ["FastFacts(85) -> DiscoversHoleInOzoneLayer(scientists,Atmosphere))"]}
{"id": "eqasc_train_3602", "nl": "higher levels of UV radiation reach Earth through atmospheric holes", "fol": "", "prediction": ["all x y.((UVRadiation(x) & Earth(y) & AtmosphericHole(x)) -> HigherLevels(x,y))"]}
{"id": "eqasc_train_3603", "nl": "Ozone is a form of oxygen that absorbs damaging UV radiation.", "fol": "", "prediction": ["all x.(Ozone(x) -> (Oxygen(x) & AbsorbsDamagingUVRadiation(x)))"]}
{"id": "eqasc_train_3604", "nl": "ozone is made of oxygen", "fol": "", "prediction": ["all x.(Ozone(x) -> MadeOfOxygen(x))"]}
{"id": "eqasc_train_3605", "nl": "Ozone depletion increases the risks for all types of skin cancer", "fol": "", "prediction": ["all x.(OzoneDepletion(x) -> IncreasesRisksForSkinCancer(x))"]}
{"id": "eqasc_train_3606", "nl": "Ozone Ozone is a natural component of the atmosphere.", "fol": "", "prediction": ["all x.(Ozone(x) -> NaturalComponentOfAtmosphere(x))"]}
{"id": "eqasc_train_3607", "nl": "Atmospheric depletion results in higher levels of UV radiation reaching Earth", "fol": "", "prediction": ["all x.(AtmosphericDepletion(x) -> HigherUVRadiation(x))"]}
{"id": "eqasc_train_3608", "nl": "Ozone depletion in the stratosphere is a global problem .", "fol": "", "prediction": ["all x.(OzoneDepletionInStratosphere(x) -> GlobalProblem(x))"]}
{"id": "eqasc_train_3609", "nl": "stratosphere composition causes higher levels of UV radiation reaching Earth", "fol": "", "prediction": ["all x.(StratosphereComposition(x) -> CausesHigherUVRadiation(x))"]}
{"id": "eqasc_train_3610", "nl": "Ozone is represented chemically as O3.", "fol": "", "prediction": ["all x.(Ozone(x) -> ChemicallyRepresentedAsO3.(Ozone(x)))"]}
{"id": "eqasc_train_3611", "nl": "O3 depletion results in higher levels of UV radiation reaching Earth.", "fol": "", "prediction": ["all x.((O3Depletion(x) & HigherUVRadiation(x)) -> ReachingEarth(x))"]}
{"id": "eqasc_train_3612", "nl": "UV radiation causes DNA damage and mutations 3.3.", "fol": "", "prediction": ["all x.(UVRadiation(x) -> (CausesDNADamage(x) & CausesMutation(x)))"]}
{"id": "eqasc_train_3613", "nl": "Ozone depletion results in higher levels of DNA damage and mutations ", "fol": "", "prediction": ["all x.(OzoneDepletion(x) -> (HigherDNADamage(x) & HigherMutationLevels(x)))"]}
{"id": "eqasc_train_3614", "nl": "UV radiation increases the risk of getting skin cancer.", "fol": "", "prediction": ["all x.(UVRadiation(x) -> IncreasesRiskOfSkinCancer(x))"]}
{"id": "eqasc_train_3615", "nl": "Ozone depletion increases the risk of getting skin cancer", "fol": "", "prediction": ["all x.(OzoneDepletion(x) -> IncreasesRiskOfSkinCancer(x))"]}
{"id": "eqasc_train_3616", "nl": "Flowing water can slowly dissolve carbon in sedimentary rock.", "fol": "", "prediction": ["all x.(FlowingWater(x) -> SlowlyDissolvesCarbonInSedimentaryRock(x))"]}
{"id": "eqasc_train_3617", "nl": "Rivers and streams are bodies of fresh, flowing water.", "fol": "", "prediction": ["all x.((River(x) | Stream(x)) -> (FreshFlowingWater(x) & BodyOfWater(x)))"]}
{"id": "eqasc_train_3618", "nl": "Rivers and streams can slowly dissolve carbon in sedimentary rock.", "fol": "", "prediction": ["all x y.((River(x) & Stream(y)) -> (SlowlyDissolvesCarbon(x,y) & SedimentaryRock(y)))"]}
{"id": "eqasc_train_3619", "nl": "Flowing water can slowly dissolve carbon in limestone.", "fol": "", "prediction": ["all x.(FlowingWater(x) -> CanSlowlyDissolveCarbonInLimestone(x))"]}
{"id": "eqasc_train_3620", "nl": "Water falls from the sky and flows downhill due to the force of gravity.", "fol": "", "prediction": ["all x y.((Water(x) & Sky(y)) -> (FallsFrom(x,y) & FlowsDownhill(x)))"]}
{"id": "eqasc_train_3621", "nl": "Water moving downhill due to the force of gravity can dissolve carbon in sedimentary rock", "fol": "", "prediction": ["all x y.((Water(x) & MovingDownhillDueToGravity(x)) -> DissolvesCarbonInSedimentaryRock(x))"]}
{"id": "eqasc_train_3622", "nl": "Flowing water can slowly dissolve carbon in sandstone", "fol": "", "prediction": ["all x y.((FlowingWater(x) & Sandstone(y)) -> SlowlyDissolvesCarbon(x,y))"]}
{"id": "eqasc_train_3623", "nl": "flowing water can slowly dissolve carbon in limestone", "fol": "", "prediction": ["all x y.((FlyingWater(x) & Limestone(y)) -> SlowlyDissolvesCarbon(x,y))"]}
{"id": "eqasc_train_3624", "nl": "Water which moves or flows is a force.", "fol": "", "prediction": ["all x.((Water(x) & Moves(x)) | Water(x)) -> Force(x))"]}
{"id": "eqasc_train_3625", "nl": "A force of water which moves can slowly dissolve carbon in sedimentary rock", "fol": "", "prediction": ["all x y.((ForceOfWater(x) & Moves(x)) -> SlowlyDissolvesCarbonInSedimentaryRock(x))"]}
{"id": "eqasc_train_3626", "nl": "Limestone is an organic, sedimentary rock.", "fol": "", "prediction": ["all x.(Limestone(x) -> (OrganicSedimentaryRock(x) & SedimentaryRock(x)))"]}
{"id": "eqasc_train_3627", "nl": "Rivers are long flowing waters.", "fol": "", "prediction": ["all x.(River(x) -> LongFlowingWater(x))"]}
{"id": "eqasc_train_3628", "nl": "rivers can slowly dissolve carbon in sedimentary rock", "fol": "", "prediction": ["all x y.((River(x) & SedimentaryRock(y)) -> SlowlyDissolvesCarbon(x,y))"]}
{"id": "eqasc_train_3629", "nl": "if a neutral atom loses an electron then an atom with a negative charge will be formed", "fol": "", "prediction": ["all x y.((NeutralAtom(x) & NeutralAtom(y) & LosesElectron(x,y)) -> (NegativeCharge(y) & Formed(y)))"]}
{"id": "eqasc_train_3630", "nl": "Negative charges are attracted to positive charges.", "fol": "", "prediction": ["all x.(NegativeCharge(x) -> AttractedToPositiveCharge(x))"]}
{"id": "eqasc_train_3631", "nl": "A neutral atom that loses an electron will be attracted to positive charges?", "fol": "", "prediction": ["all x.((NeutralAtom(x) & LosesElectron(x)) -> AttractedToPositiveCharges(x))"]}
{"id": "eqasc_train_3632", "nl": "When an atom or molecule is no longer neutral it is called an ion .", "fol": "", "prediction": ["all x.((Atom(x) | Molecule(x)) -> Ion(x))"]}
{"id": "eqasc_train_3633", "nl": "if an atom loses an electron then it forms an ion", "fol": "", "prediction": ["all x y.((Atom(x) & Atom(y) & LosesElectron(x,y)) -> FormsIon(x))"]}
{"id": "eqasc_train_3634", "nl": "Negative charges repel negative charges and attract positive charges.", "fol": "", "prediction": ["all x.(NegativeCharge(x) -> (RepelsNegativeCharge(x) & AttractsPositiveCharge(x)))"]}
{"id": "eqasc_train_3635", "nl": "if a neutral atom loses an electron then it will attract positive charges", "fol": "", "prediction": ["all x y.((NeutralAtom(x) & LosesElectron(x)) -> AttractsPositiveCharges(x))"]}
{"id": "eqasc_train_3636", "nl": "Ions are neutral atoms.", "fol": "", "prediction": ["all x.(Ion(x) -> NeutralAtom(x))"]}
{"id": "eqasc_train_3637", "nl": "ions can have a negative charge if they lose an electron", "fol": "", "prediction": ["all x.((Ion(x) & LosesElectron(x)) -> NegativeCharge(x))"]}
{"id": "eqasc_train_3638", "nl": "if ions lose an electron then an atom with a negative charge will be formed", "fol": "", "prediction": ["all x y.((Ion(x) & Ion(y) & LoseElectron(x,y)) -> (Atom(x) & NegativeCharge(x)))"]}
{"id": "eqasc_train_3639", "nl": "Ions are atoms or groups of atoms that carry a positive or negative electrical charge.", "fol": "", "prediction": ["all x.(Ion(x) -> (Atom(x) | GroupOfAtoms(x) & CarriesPositiveOrNegativeElectricalCharge(x)))"]}
{"id": "eqasc_train_3640", "nl": "An ion is formed after a neutral atom loses an electron", "fol": "", "prediction": ["all x y.((Ion(x) & NeutralAtom(y) & LosesElectron(y,x)) -> Formed(x))"]}
{"id": "eqasc_train_3641", "nl": "Ice crystals that are formed have a negative charge.", "fol": "", "prediction": ["all x.((IceCrystal(x) & Formed(x)) -> NegativeCharge(x))"]}
{"id": "eqasc_train_3642", "nl": "Ice crystals are formed when a neutral atom loses an electron", "fol": "", "prediction": ["all x y.((IceCrystal(x) & NeutralAtom(y) & LosesElectron(y,x)) -> Formed(x))"]}
{"id": "eqasc_train_3643", "nl": "If an atom loses an electron, it is then positive.", "fol": "", "prediction": ["all x.((Atom(x) & LosesElectron(x)) -> Positive(x))"]}
{"id": "eqasc_train_3644", "nl": "an atom can be negative", "fol": "", "prediction": ["all x.(Atom(x) -> (Negative(x) | Negative(x)))"]}
{"id": "eqasc_train_3645", "nl": "An anion is a negatively charged atom.", "fol": "", "prediction": ["all x.(Anion(x) -> NegativelyChargedAtom(x))"]}
{"id": "eqasc_train_3646", "nl": "if a neutral atom loses an electron then an anion will be formed", "fol": "", "prediction": ["all x y.((NeutralAtom(x) & LosesElectron(x)) -> AnionFormation(y))"]}
{"id": "eqasc_train_3647", "nl": "Atoms are the smallest units of elements.", "fol": "", "prediction": ["all x.(Atom(x) -> SlightestUnitOfElements(x))"]}
{"id": "eqasc_train_3648", "nl": "If the smallest unit of an element is neutral and it loses an electron a negative charge is formed", "fol": "", "prediction": ["all x y.((SmallestUnit(x) & Element(y) & Neutral(x,y) & LosesElectron(x,y)) -> NegativeChargeFormation(x))"]}
{"id": "eqasc_train_3649", "nl": "if a neutral atom loses an electron then it will be attracted to positive charges", "fol": "", "prediction": ["all x y.((NeutralAtom(x) & LosesElectron(x)) -> AttractedToPositiveCharges(y))"]}
{"id": "eqasc_train_3650", "nl": "Brain cells die quickly if their oxygen supply is cut off.", "fol": "", "prediction": ["all x.((BrainCell(x) & OxygenSupplyCutOff(x)) -> DiesQuickly(x))"]}
{"id": "eqasc_train_3651", "nl": "Without proper brain functioning the body dies.", "fol": "", "prediction": ["all x.((Body(x) & WithoutProperBrainFunctioning(x)) -> Dies(x))"]}
{"id": "eqasc_train_3652", "nl": "without oxygen the body dies", "fol": "", "prediction": ["all x.((Body(x) & -Oxygen(x)) -> Dies(x))"]}
{"id": "eqasc_train_3653", "nl": "If the oxygen supply to the brain is cut off, a stroke can occur.", "fol": "", "prediction": ["all x.((OxygenSupplyCutOff(x) & Brain(x)) -> CanOccur(x))"]}
{"id": "eqasc_train_3654", "nl": "Brain cells die quickly if a stroke occurs.", "fol": "", "prediction": ["all x.((BrainCell(x) & Stroke(x)) -> DiesQuickly(x))"]}
{"id": "eqasc_train_3655", "nl": "Blood carries oxygen to the brain.", "fol": "", "prediction": ["all x.(Blood(x) -> CarriesOxygenToBrain(x))"]}
{"id": "eqasc_train_3656", "nl": "brain cells die quickly if blood is cut off", "fol": "", "prediction": ["all x.((BrainCell(x) & BloodCutOff(x)) -> DiesQuickly(x))"]}
{"id": "eqasc_train_3657", "nl": "Here, the lungs supply the blood with oxygen.", "fol": "", "prediction": ["all x y.((Lungs(x) & Blood(y)) -> SupplyOxygen(x,y))"]}
{"id": "eqasc_train_3658", "nl": "Brain cells die quickly if their blood supply is cut off.", "fol": "", "prediction": ["all x.((BrainCell(x) & BloodSupplyCutOff(x)) -> DiesQuickly(x))"]}
{"id": "eqasc_train_3659", "nl": "Brain cells begin to die as soon as the heart stops pumping oxygen.", "fol": "", "prediction": ["all x.((BrainCell(x) & HeartStopsPumpingOxygen(x)) -> Dies(x))"]}
{"id": "eqasc_train_3660", "nl": "the heart stopping pumping can cut off oxygen to cells", "fol": "", "prediction": ["all x.(HeartStoppingPumping(x) -> CutsOffOxygenToCells(x))"]}
{"id": "eqasc_train_3661", "nl": "Brain cells die quickly if their air supply is cut off.", "fol": "", "prediction": ["all x.((BrainCell(x) & AirSupplyCutOff(x)) -> DiesQuickly(x))"]}
{"id": "eqasc_train_3662", "nl": "Neurons are the nerve cells within the brain.", "fol": "", "prediction": ["all x.(Neuron(x) -> NerveCell(x))"]}
{"id": "eqasc_train_3663", "nl": "neurons die quickly if their oxygen supply is cut off.", "fol": "", "prediction": ["all x.((Neuron(x) & OxygenSupplyCutOff(x)) -> DiesQuickly(x))"]}
{"id": "eqasc_train_3664", "nl": "Brain atrophy means the brain matter has shrunk, often because brain cells are dying or dead.", "fol": "", "prediction": ["all x.(BrainAtrophy(x) -> (ShrunkBrainMatter(x) & (DyingBrainCells(x) | DeadBrainCells(x))))"]}
{"id": "eqasc_train_3665", "nl": "brain atrophy is caused by lack of oxygen", "fol": "", "prediction": ["all x.(BrainAtrophy(x) -> (LackOfOxygen(x) & CausedBy(x)))"]}
{"id": "eqasc_train_3666", "nl": "Astroglial cells are the most common cells in brain tissue.", "fol": "", "prediction": ["all x.(AstroglialCell(x) -> CommonCellInBrainTissue(x))"]}
{"id": "eqasc_train_3667", "nl": "astroglial cells die if their oxygen supply is cut off", "fol": "", "prediction": ["all x.((AstroglialCell(x) & OxygenSupplyCutOff(x)) -> Dies(x))"]}
{"id": "eqasc_train_3668", "nl": "Brain cells die quickly if their blood supply is cut off", "fol": "", "prediction": ["all x.((BrainCell(x) & BloodSupplyCutOff(x)) -> DiesQuickly(x))"]}
{"id": "eqasc_train_3669", "nl": "Many people contend that orgasms are highly intensified when the body is cut off from oxygen.", "fol": "", "prediction": ["all x.((Person(x) & Orgasm(x) & CutOffFromOxygen(x)) -> HighlyIntensified(x))"]}
{"id": "eqasc_train_3670", "nl": "people contend that orgasms are highly intensified with no oxygen but brain cells die", "fol": "", "prediction": ["all x y.((Person(x) & Orgasm(y)) -> (HighlyIntense(y) & NoOxygen(y) & BrainCellsDie(x)))"]}
{"id": "eqasc_train_3671", "nl": "wind and rain cause erosion", "fol": "", "prediction": ["all x y.((Wind(x) & Rain(y)) -> CausesErosion(x,y))"]}
{"id": "eqasc_train_3672", "nl": "Second to the storm surge are wind and rains.", "fol": "", "prediction": ["all x.(StormSurge(x) -> (Wind(x) & Rain(x)))"]}
{"id": "eqasc_train_3673", "nl": "Storm surges cause erosion", "fol": "", "prediction": ["all x.(StormSurges(x) -> CausesErosion(x))"]}
{"id": "eqasc_train_3674", "nl": "Erosion is the wearing away of earth or rock.", "fol": "", "prediction": ["all x.(Erosion(x) -> (WeavingAwayOfEarthOrRock(x)))"]}
{"id": "eqasc_train_3675", "nl": "wind causes wearing away of rock", "fol": "", "prediction": ["all x y.((Wind(x) & Rock(y)) -> CausesWearingAway(x,y))"]}
{"id": "eqasc_train_3676", "nl": "Abrasion is particle by particle erosion.", "fol": "", "prediction": ["all x.(Abrasion(x) -> (ParticleByParticleErosion(x)))"]}
{"id": "eqasc_train_3677", "nl": "wind and rain cause abrasion", "fol": "", "prediction": ["all x y.((Wind(x) & Rain(y)) -> CausesAbrasion(x,y))"]}
{"id": "eqasc_train_3678", "nl": "Wind, water, and sunshine contribute to the erosion process that can change our landscape.", "fol": "", "prediction": ["all x y z.((Wind(x) & Water(y) & Sunlight(z)) -> ContributesToErosionProcess(x,y,z))"]}
{"id": "eqasc_train_3679", "nl": "Wind and rain contribute to a process that can change our landscape.", "fol": "", "prediction": ["all x y.((Wind(x) & Rain(y)) -> (ContributesToChangeLandscape(x) & ChangesLandscape(y)))"]}
{"id": "eqasc_train_3680", "nl": "Alluvial aquifers are the result of erosion.", "fol": "", "prediction": ["all x.(AlluvialAquifer(x) -> ErosionResult(x))"]}
{"id": "eqasc_train_3681", "nl": "Alluvial aquifers are created by wind and rain.", "fol": "", "prediction": ["all x.(AlluvialAquifer(x) -> (CreatedByWind(x) & CreatedByRain(x)))"]}
{"id": "eqasc_train_3682", "nl": "Major erosion of beaches occurs.", "fol": "", "prediction": ["all x.((Beach(x) & MajorErosion(x)) -> Occurs(x))"]}
{"id": "eqasc_train_3683", "nl": "wind and rain cause loss of beaches", "fol": "", "prediction": ["all x y.((Wind(x) & Rain(y)) -> CausesLossOfBeaches(x,y))"]}
{"id": "eqasc_train_3684", "nl": "Soil Erosion Soil erosion is a natural process.", "fol": "", "prediction": ["all x.(SoilErosion(x) -> NaturalProcess(x))"]}
{"id": "eqasc_train_3685", "nl": "wind and rain is a natural process", "fol": "", "prediction": ["all x y.((Wind(x) & Rain(y)) -> NaturalProcess(x))"]}
{"id": "eqasc_train_3686", "nl": "Some mountains are caused by erosion.", "fol": "", "prediction": ["exists x.(Mountain(x) & CausedByErosion(x))"]}
{"id": "eqasc_train_3687", "nl": "some mountains are caused by wind and rain", "fol": "", "prediction": ["exists x.(Mountain(x) & CausedByWind(x) & CausedByRain(x))"]}
{"id": "eqasc_train_3688", "nl": "Water, in the form of rain, is the most effective agent of erosion.", "fol": "", "prediction": ["all x.((Water(x) & Rain(x)) -> MostEffectiveAgentOfErosion(x))"]}
{"id": "eqasc_train_3689", "nl": "water causes erosion most effectively", "fol": "", "prediction": ["all x.(Water(x) -> CausesErosionMostEffectively(x))"]}
{"id": "eqasc_train_3690", "nl": "Soil erosion, or rather soil movement, is a natural process.", "fol": "", "prediction": ["all x.(SoilErosion(x) -> (NaturalProcess(x) | NaturalProcess(x)))"]}
{"id": "eqasc_train_3691", "nl": "wind and rain cause soil movement", "fol": "", "prediction": ["all x y z.((Wind(x) & Rain(y) & SoilMovement(z)) -> Causes(x,y,z))"]}
{"id": "eqasc_train_3692", "nl": "Introns are regions that do not code for proteins.", "fol": "", "prediction": ["all x.(Intron(x) -> (-CodesProteins(x)))"]}
{"id": "eqasc_train_3693", "nl": "Prokaryotes lack introns, whereas eukaryotes contain introns.", "fol": "", "prediction": ["(all x.(Prokaryote(x) -> LacksIntrons(x)) & all y.(Eukaryote(y) -> ContainsIntrons(y)))"]}
{"id": "eqasc_train_3694", "nl": "prokaryotes lack regions that do not code for proteins", "fol": "", "prediction": ["all x.(Prokaryote(x) -> (LacksRegions(x) & -CodesProteins(x)))"]}
{"id": "eqasc_train_3695", "nl": "Protein There are many types of protein.", "fol": "", "prediction": ["exists x.(Protein(x) & Protein(x))"]}
{"id": "eqasc_train_3696", "nl": "There are many types of introns. ", "fol": "", "prediction": ["exists x.(Intron(x) & Intron(x))"]}
{"id": "eqasc_train_3697", "nl": "Introns are removed by RNA splicing.", "fol": "", "prediction": ["all x.(Intron(x) -> RemovedByRNASplicing(x))"]}
{"id": "eqasc_train_3698", "nl": "regions that do not code for proteins are removed by RNA splicing", "fol": "", "prediction": ["all x.((Region(x) & -CodesProteins(x)) -> RemovedByRNASplicing(x))"]}
{"id": "eqasc_train_3699", "nl": "Introns are found in eukaryotes.", "fol": "", "prediction": ["all x y.((Intron(x) & Eukaryote(y)) -> FoundIn(x,y))"]}
{"id": "eqasc_train_3700", "nl": "eukaryotes have regions that do not code for proteins", "fol": "", "prediction": ["all x.(Eukaryote(x) -> (HasRegions(x) & -CodesProteins(x)))"]}
{"id": "eqasc_train_3701", "nl": "Prokaryotes lack regions that do not code for proteins, while eukaryotes do have them.", "fol": "", "prediction": ["(all x.(Prokaryote(x) -> LacksRegions(x)) & all y.(Eukaryote(y) -> HasRegions(y)))"]}
{"id": "eqasc_train_3702", "nl": "An area is a rectangular region of cells.", "fol": "", "prediction": ["all x.(Area(x) -> RectangularRegionOfCells(x))"]}
{"id": "eqasc_train_3703", "nl": "Introns are areas that do not code for proteins.", "fol": "", "prediction": ["all x.(Intron(x) -> (-CodesProteins(x)))"]}
{"id": "eqasc_train_3704", "nl": "when the body is hot , sweat is produced to cool the body", "fol": "", "prediction": ["all x y z.((Body(x) & Body(y) & Body(z) & Hot(x)) -> (Sweat(y) & ProducedToCool(y,z)))"]}
{"id": "eqasc_train_3705", "nl": "Sweats Sweats are products that cause moisture accumulation on the skin.", "fol": "", "prediction": ["all x.(Sweat(x) -> (Product(x) & CausesMoistureAccumulation(x)))"]}
{"id": "eqasc_train_3706", "nl": "When the body is hot, moisture accumulates on the skin.", "fol": "", "prediction": ["all x.((Body(x) & Hot(x)) -> MoistureAccumulatesOnSkin(x))"]}
{"id": "eqasc_train_3707", "nl": "Sweat is only relieved by cool hydration.", "fol": "", "prediction": ["all x.(Sweat(x) -> CoolHydration(x))"]}
{"id": "eqasc_train_3708", "nl": "When you're hot, cool hydration helps", "fol": "", "prediction": ["all x.((Hot(x) & CoolHydration(x)) -> Helps(x))"]}
{"id": "eqasc_train_3709", "nl": "Sweat glands produce more sweat.", "fol": "", "prediction": ["all x.(SweatGlands(x) -> ProducesMoreSweat(x))"]}
{"id": "eqasc_train_3710", "nl": "When the body is hot, something coming from a gland is produced to cool the body", "fol": "", "prediction": ["all x y.((Body(x) & Hot(x)) -> (ComingFromGlands(x,y) & ProducedToCool(y)))"]}
{"id": "eqasc_train_3711", "nl": "The sweat evaporates from your skin, cooling it.", "fol": "", "prediction": ["all x.(Sweat(x) -> (EvaporatesFromSkin(x) & CoolsSkin(x)))"]}
{"id": "eqasc_train_3712", "nl": "Your body uses evaporation to cool it down.", "fol": "", "prediction": ["all x.((Body(x) & UsesEvaporation(x)) -> CoolsDown(x))"]}
{"id": "eqasc_train_3713", "nl": "Exercise, fever, and heat cause the body's temperature to rise.", "fol": "", "prediction": ["all x.((Exercise(x) | Fever(x) | Heat(x)) -> CausesTemperatureToRise(x))"]}
{"id": "eqasc_train_3714", "nl": "sweat is produced to cool people during exercise and fever", "fol": "", "prediction": ["all x y z.((Sweat(x) & Exercise(y) & Fever(z)) -> ProducesToCoolPeople(x,y,z))"]}
{"id": "eqasc_train_3715", "nl": "The reference to the warmth of the body is important here because the body when ill does get warm or warmer or even hot due to high temperature of fever.", "fol": "", "prediction": ["all x.((Body(x) & Ill(x)) -> (GetsWarmer(x) | GetsHot(x)))"]}
{"id": "eqasc_train_3716", "nl": "When ill with a fever, the body will produce sweat", "fol": "", "prediction": ["all x.((IllWithFever(x) & BodyProducesSweat(x)) -> IllWithFever(x))"]}
{"id": "eqasc_train_3717", "nl": "Athletes risk dehydration because of excessive sweat loss.", "fol": "", "prediction": ["all x.((Athlete(x) & ExcessiveSweatLoss(x)) -> RisksDehydration(x))"]}
{"id": "eqasc_train_3718", "nl": "when athletes are hot they can get dehydrated", "fol": "", "prediction": ["all x.((Athlete(x) & Hot(x)) -> CanGetDehydrated(x))"]}
{"id": "eqasc_train_3719", "nl": "Humans use evaporation of water, sweat, to cool their bodies.", "fol": "", "prediction": ["all x.(Human(x) -> (UsesEvaporationOfWater(x) & UsesSweat(x) & CoolsBody(x)))"]}
{"id": "eqasc_train_3720", "nl": "evaporation cools the body", "fol": "", "prediction": ["all x y.((Evaporation(x) & Body(y)) -> Cools(x,y))"]}
{"id": "eqasc_train_3721", "nl": "when the body is hot, evaporation is used to cool the body", "fol": "", "prediction": ["all x y.((Body(x) & Hot(x)) -> Evaporation(y))"]}
{"id": "eqasc_train_3722", "nl": "We walked and sweated and sweated.", "fol": "", "prediction": ["all x.(Walked(x) & Sweated(x) & Sweated(x))"]}
{"id": "eqasc_train_3723", "nl": "walking can cause the body to become hot", "fol": "", "prediction": ["all x.(Walking(x) -> CausesBodyToBecomeHot(x))"]}
{"id": "eqasc_train_3724", "nl": "adding salt to a solid decreases the freezing point of that solid", "fol": "", "prediction": ["all x y.((AddingSaltToSolid(x) & Solid(y)) -> DecreasesFreezingPoint(x,y))"]}
{"id": "eqasc_train_3725", "nl": "Solutes decrease the freezing point or the point of crystallization of water.", "fol": "", "prediction": ["all x.(Solute(x) -> (DecreasesFreezingPoint(x) | DecreasesCrystallizationPoint(x)))"]}
{"id": "eqasc_train_3726", "nl": "Salt, when added to water, acts as a solute.", "fol": "", "prediction": ["all x.((Salt(x) & AddedToWater(x)) -> ActsAsSolute(x))"]}
{"id": "eqasc_train_3727", "nl": "Ice is the solid form of water.", "fol": "", "prediction": ["all x.(Ice(x) -> SolidFormOfWater(x))"]}
{"id": "eqasc_train_3728", "nl": "adding salt to ice decreases the freezing point of that ice", "fol": "", "prediction": ["all x y.((AddingSaltToIce(x) & Ice(y)) -> DecreasesFreezingPoint(x,y))"]}
{"id": "eqasc_train_3729", "nl": "Salt is used as a deicer because it lowers the freezing point of water.", "fol": "", "prediction": ["all x.((Salt(x) & LowersFreezingPoint(x)) -> Deicer(x))"]}
{"id": "eqasc_train_3730", "nl": "Salt is used as a deicer because it decreases the temperature at which ice melts", "fol": "", "prediction": ["all x.((Salt(x) & DecreasesTemperature(x) & MeltsIce(x)) -> Deicer(x))"]}
{"id": "eqasc_train_3731", "nl": "For example, salt is NaCl.", "fol": "", "prediction": ["all x.(Salt(x) -> NaCl(x))"]}
{"id": "eqasc_train_3732", "nl": "adding NaCl to a solid decreases the freezing point of that solid", "fol": "", "prediction": ["all x y.((AddsNaCl(x) & Solid(y)) -> DecreasesFreezingPoint(x,y))"]}
{"id": "eqasc_train_3733", "nl": "Salt is sodium chloride.", "fol": "", "prediction": ["all x.(Salt(x) -> (SodiumChloride(x)))"]}
{"id": "eqasc_train_3734", "nl": "Adding sodium chloride to a solid decreases the freezing point of that solid.", "fol": "", "prediction": ["all x y.((AddsSodiumChloride(x) & Solid(y)) -> DecreasesFreezingPoint(x,y))"]}
{"id": "eqasc_train_3735", "nl": "Water density decreases with temperature and increases with salt content.", "fol": "", "prediction": ["all x.(WaterDensity(x) -> (DecreasesWithTemperature(x) & IncreasesWithSaltContent(x)))"]}
{"id": "eqasc_train_3736", "nl": "Salt content increases melting points of solids.", "fol": "", "prediction": ["all x.(SaltContent(x) -> IncreasesMeltingPointsOfSolids(x))"]}
{"id": "eqasc_train_3737", "nl": "Another name for salt is sodium.", "fol": "", "prediction": ["all x.(Salt(x) -> Salt(x))"]}
{"id": "eqasc_train_3738", "nl": "Adding sodium to a solid decreases the freezing point of that solid.", "fol": "", "prediction": ["all x y.((AddsSodium(x) & Solid(y)) -> DecreasesFreezingPoint(x,y))"]}
{"id": "eqasc_train_3739", "nl": "Freezing point depression is a colligative property.", "fol": "", "prediction": ["all x.(FreezingPointDepression(x) -> ColligativeProperty(x))"]}
{"id": "eqasc_train_3740", "nl": "salts effect the colligative properties of solids", "fol": "", "prediction": ["all x y.((Salt(x) & Solid(y)) -> EffectsColligativeProperties(x,y))"]}
{"id": "eqasc_train_3741", "nl": "When seawater freezes, salt is expelled from the solid in a concentrated salt solution called brine.", "fol": "", "prediction": ["all x y.((Seawater(x) & Seawater(y)) -> Freezes(x,y))"]}
{"id": "eqasc_train_3742", "nl": "Salt is expelled from seawater as it freezes at the freezing point.", "fol": "", "prediction": ["all x y.((Salt(x) & Seawater(y) & FreezesAtFreezingPoint(x,y)) -> ExpelledFrom(x,y))"]}
{"id": "eqasc_train_3743", "nl": "a greenhouse is used to protect plants by keeping them warm", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> ProtectsByWarming(x,y))"]}
{"id": "eqasc_train_3744", "nl": "Hobby greenhouses used to be small glass houses or fiberglass buildings.", "fol": "", "prediction": ["all x.(HobbyGreenhouse(x) -> (SmallGlassHouse(x) | FiberglassBuilding(x)))"]}
{"id": "eqasc_train_3745", "nl": "Glass or fiberglass buildings are used to protect plants by keeping them warm", "fol": "", "prediction": ["all x y.((Building(x) & Plant(y) & (Glass(x) | Fiberglass(x))) -> ProtectsByWarming(x,y))"]}
{"id": "eqasc_train_3746", "nl": "Then the planted seeds are placed in a warm greenhouse.", "fol": "", "prediction": ["all x y.((PlantedSeed(x) & WarmGreenhouse(y)) -> PlacedIn(x,y))"]}
{"id": "eqasc_train_3747", "nl": "greenhouses protect plants", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> Protects(x,y))"]}
{"id": "eqasc_train_3748", "nl": "a greenhouse is used to protect plants by raising their temperature", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> ProtectsByRivingTemperature(x,y))"]}
{"id": "eqasc_train_3749", "nl": "planted seeds can be protected in a greenhouse", "fol": "", "prediction": ["all x y.((PlantedSeed(x) & Greenhouse(y)) -> CanBeProtectedIn(x,y))"]}
{"id": "eqasc_train_3750", "nl": "Another well known plant is the Mesquite Bush.", "fol": "", "prediction": ["(WellKnownPlant(x) & MesquiteBust(x))"]}
{"id": "eqasc_train_3751", "nl": "a greenhouse is used to protect bushes by keeping them warm", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Bush(y)) -> ProtectsByWarming(x,y))"]}
{"id": "eqasc_train_3752", "nl": "When it's warm outside, both plants and pests grow faster.", "fol": "", "prediction": ["all x.((WarmOutside(x) & Plant(x) & Pest(x)) -> GrowFaster(x))"]}
{"id": "eqasc_train_3753", "nl": "a greenhouse makes plants grow faster", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> MakesGrowFaster(x,y))"]}
{"id": "eqasc_train_3754", "nl": "Energy from the sun keeps the earth warm, enables plants to grow.", "fol": "", "prediction": ["all x y.((Energy(x) & Sun(y)) -> (KeepsEarthWarm(x,y) & EnablesPlantsToGrow(x)))"]}
{"id": "eqasc_train_3755", "nl": "Greenhouses are used to protect plants using the energy from the sun.", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> ProtectsUsingSunEnergy(x,y))"]}
{"id": "eqasc_train_3756", "nl": "Plants are Earth's producers.", "fol": "", "prediction": ["all x.(Plant(x) -> EarthsProducer(x))"]}
{"id": "eqasc_train_3757", "nl": "A greenhouse is used to protect producers by keeping them warm.", "fol": "", "prediction": ["all x.(Greenhouse(x) -> ProtectsProducersByWarming(x))"]}
{"id": "eqasc_train_3758", "nl": "Angiosperms are the flowering plants.", "fol": "", "prediction": ["all x.(Angiosperm(x) -> FloweringPlant(x))"]}
{"id": "eqasc_train_3759", "nl": "A greenhouse is used to protect angiosperms by keeping them warm", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Angiosperm(y)) -> ProtectsByWarming(x,y))"]}
{"id": "eqasc_train_3760", "nl": "Retains heat in cold weather, reflects exterior heat in warm weather.", "fol": "", "prediction": ["(all x.((ColdWeather(x) & ColdWeather(x)) -> RetainsHeat(x)) & ((Heat(x) & WarmWeather(x)) -> ReflectsHeat(x)))"]}
{"id": "eqasc_train_3761", "nl": "a greenhouse is used to protect plants by retaining heat", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> ProtectsByRetainingHeat(x,y))"]}
{"id": "eqasc_train_3762", "nl": "Flower size varies by plant.", "fol": "", "prediction": ["all x.(FlowerSize(x) -> VariableByPlant(x))"]}
{"id": "eqasc_train_3763", "nl": "a greenhouse is used to protect flowers by keeping them warm", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Flower(y)) -> ProtectsByWarming(x,y))"]}
{"id": "eqasc_train_3764", "nl": "With lots of rain and a warm climate, plants grow well.", "fol": "", "prediction": ["all x.((LotsOfRain(x) & WarmClimate(x)) -> GrowsWell(x))"]}
{"id": "eqasc_train_3765", "nl": "a greenhouse helps plants grow well", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> HelpsGrowWell(x,y))"]}
{"id": "eqasc_train_3766", "nl": "a greenhouse is used to protect orchids", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Orchid(y)) -> Protects(x,y))"]}
{"id": "eqasc_train_3767", "nl": "Temperatures go from warm to hot.", "fol": "", "prediction": ["all x.(Temperature(x) -> (Warm(x) | Hot(x)))"]}
{"id": "eqasc_train_3768", "nl": "a greenhouse is used to protect plants by keeping their temperature", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> ProtectsByKeepingTemperature(x,y))"]}
{"id": "eqasc_train_3769", "nl": "Warm temperatures have helped plant growth and sizing.", "fol": "", "prediction": ["all x.(WarmTemperatures(x) -> (HelpedPlantGrowth(x) & HelpedPlantSizing(x)))"]}
{"id": "eqasc_train_3770", "nl": "a greenhouse helps  plant growth", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> HelpsGrowth(x,y))"]}
{"id": "eqasc_train_3771", "nl": "Greenhouse gases act as the glass in a greenhouse.", "fol": "", "prediction": ["all x y.((GreenhouseGas(x) & Greenhouse(y)) -> ActsAsGlassIn(x,y))"]}
{"id": "eqasc_train_3772", "nl": "glass keeps plants warm", "fol": "", "prediction": ["all x y.((Glass(x) & Plant(y)) -> KeepsWarm(x,y))"]}
{"id": "eqasc_train_3773", "nl": "Flowers are the major greenhouse crops.", "fol": "", "prediction": ["all x.(Flower(x) -> MajorGreenhouseCrop(x))"]}
{"id": "eqasc_train_3774", "nl": "Flowers are the major crop that needs protecting by keeping them warm", "fol": "", "prediction": ["all x.(Flower(x) -> (MainCrop(x) & NeedsProtection(x) & KeepsCropWarm(x)))"]}
{"id": "eqasc_train_3775", "nl": "Characteristics that are encoded in DNA are called genetic traits.", "fol": "", "prediction": ["all x.((Characteristic(x) & EncodedInDNA(x)) -> GeneticTreatment(x))"]}
{"id": "eqasc_train_3776", "nl": "DNA encodes the information for protein sequences.", "fol": "", "prediction": ["all x y.((DNA(x) & ProteinSequence(y)) -> EncodesInformation(x,y))"]}
{"id": "eqasc_train_3777", "nl": "Information for protein sequences is our DNA", "fol": "", "prediction": ["all x.(ProteinSequenceInformation(x) -> DNAInformation(x))"]}
{"id": "eqasc_train_3778", "nl": "Chromosomes contain genes, each encoded as a subsection of the DNA chain.", "fol": "", "prediction": ["all x.(Chromosome(x) -> (ContainsGenes(x) & EncodedAsSubsectionOfDNAChain(x)))"]}
{"id": "eqasc_train_3779", "nl": "Chromosomes contain characteristics that are within the DNA chain", "fol": "", "prediction": ["all x.(Chromosome(x) -> (ContainsCharacteristics(x) & WithinDNAChain(x)))"]}
{"id": "eqasc_train_3780", "nl": "Like eye color in humans it is a genetic trait.", "fol": "", "prediction": ["all x.((EyeColor(x) & Human(x)) -> GeneticTrait(x))"]}
{"id": "eqasc_train_3781", "nl": "Eye color in humans is determined from information encoded in DNA", "fol": "", "prediction": ["all x y.((Human(x) & EyeColor(y)) -> DeterminedFromInformationEncodedInDNA(x,y))"]}
{"id": "eqasc_train_3782", "nl": "DNA is used to transmit characteristics from parents to offspring.", "fol": "", "prediction": ["all x y z.((DNA(x) & Parent(y) & Offspring(z)) -> TransmitsCharacteristics(x,y,z))"]}
{"id": "eqasc_train_3783", "nl": "DNA passes traits from parents to offspring.", "fol": "", "prediction": ["all x y z.((DNA(x) & Parent(y) & Offspring(z)) -> PassesTab(x,y,z))"]}
{"id": "eqasc_train_3784", "nl": "characteristics that are encoded in deoxyribonucleic acid are called genetic traits", "fol": "", "prediction": ["all x.((Characteristics(x) & EncodedInDeoxyribonucleicAcid(x)) -> GeneticTreatment(x))"]}
{"id": "eqasc_train_3785", "nl": "Eye color in a human is a characteristic encoded in DNA", "fol": "", "prediction": ["all x y.((Human(x) & EyeColor(y)) -> EncodedInDNA(y,x))"]}
{"id": "eqasc_train_3786", "nl": "Intelligence is primarily a genetically inherited trait.", "fol": "", "prediction": ["all x.(Intelligence(x) -> GeneticallyEarnedTrait(x))"]}
{"id": "eqasc_train_3787", "nl": "Intelligence is a characteristic that are encoded in DNA", "fol": "", "prediction": ["all x.(Intelligence(x) -> (Characteristic(x) & EncodedInDNA(x)))"]}
{"id": "eqasc_train_3788", "nl": "Intelligence is primarily encoded in DNA.", "fol": "", "prediction": ["all x.(Intelligence(x) -> EncodedInDNA(x))"]}
{"id": "eqasc_train_3789", "nl": "Eye color is a human characteristic that is encoded in DNA", "fol": "", "prediction": ["all x.(EyeColor(x) -> (HumanCharacteristic(x) & EncodedInDNA(x)))"]}
{"id": "eqasc_train_3790", "nl": "An observable characteristic is called a phenotype .", "fol": "", "prediction": ["all x.(ObservableCharacteristic(x) -> Phenotype(x))"]}
{"id": "eqasc_train_3791", "nl": "phenotypes encoded in DNA are called genetic traits", "fol": "", "prediction": ["all x.((Phenomenon(x) & EncodedInDNA(x)) -> GeneticTreatment(x))"]}
{"id": "eqasc_train_3792", "nl": "rocks interacting with wind over long periods of time causes weathering", "fol": "", "prediction": ["all x.((Rock(x) & InteractsWithWind(x) & LongPeriodsOfTime(x)) -> Weathering(x))"]}
{"id": "eqasc_train_3793", "nl": "Rock weathering and erosion produces a continuous stream of sediments that are laid down in layers.", "fol": "", "prediction": ["all x y.((RockWeathering(x) & Erosion(y)) -> (ProducesContinuousStreamOfSediments(x,y) & LaysDownInLayers(x,y)))"]}
{"id": "eqasc_train_3794", "nl": "rocks interacting with wind produces sediments", "fol": "", "prediction": ["all x y.((Rock(x) & Wind(y) & InteractsWith(x,y)) -> ProducesSediments(x))"]}
{"id": "eqasc_train_3795", "nl": "On Earth, rocks are weathered by wind and water, creating soil and sand.", "fol": "", "prediction": ["all x y z.((Rock(x) & Wind(y) & Water(z)) -> WeatheredBy(x,y,z))"]}
{"id": "eqasc_train_3796", "nl": "Rocks interacting with wind over time causes the creation of soil and sand.", "fol": "", "prediction": ["all x.((Rock(x) & InteractsWithWind(x)) -> (CreatesSoil(x) & CreatesSand(x)))"]}
{"id": "eqasc_train_3797", "nl": "weathering of rocks is caused by water", "fol": "", "prediction": ["all x y.((Rock(x) & Water(y)) -> WeatheringCausedBy(x,y))"]}
{"id": "eqasc_train_3798", "nl": "Hurricanes are made of wind.", "fol": "", "prediction": ["all x.(Hurricane(x) -> MadeOfWind(x))"]}
{"id": "eqasc_train_3799", "nl": "hurricanes cause weathering", "fol": "", "prediction": ["all x.(Hurricane(x) -> CausesWeathering(x))"]}
{"id": "eqasc_train_3800", "nl": "Erosion happens when water or wind wears away bits of rock.", "fol": "", "prediction": ["all x.((Water(x) | Wind(x)) -> WearsAwayBitsOfRock(x))"]}
{"id": "eqasc_train_3801", "nl": "erosion causes weathering over long periods of time", "fol": "", "prediction": ["all x y.((Erosion(x) & LongPeriod(y)) -> CausesWeathering(x,y))"]}
{"id": "eqasc_train_3802", "nl": "Landscape is in turn altered by climate and weather.", "fol": "", "prediction": ["all x.(Landscape(x) -> (AlteredByClimate(x) & AlteredByWeather(x)))"]}
{"id": "eqasc_train_3803", "nl": "Rocks interacting with wind over time causes landscapes to be altered.", "fol": "", "prediction": ["all x.((Rock(x) & InteractsWithWind(x)) -> LandscapeAltered(x))"]}
{"id": "eqasc_train_3804", "nl": "Weathered rock is called saprolite .", "fol": "", "prediction": ["all x.(WeatheredRock(x) -> Saprolite(x))"]}
{"id": "eqasc_train_3805", "nl": "rocks interacting with wind over long periods of time causes saprolite", "fol": "", "prediction": ["all x.((Rocks(x) & InteractWithWind(x) & LongPeriodsOfTime(x)) -> CausesSaprolite(x))"]}
{"id": "eqasc_train_3806", "nl": "When a rock undergoes erosion and weathering, it breaks down to form sediments.", "fol": "", "prediction": ["all x.((Rock(x) & UndergoesErosion(x) & UndergoesWeathering(x)) -> BreaksDownToFormSediments(x))"]}
{"id": "eqasc_train_3807", "nl": "rocks interacting with wind over long periods of time can form sediment", "fol": "", "prediction": ["all x.((Rock(x) & InteractsWithWind(x) & LongPeriodsOfTime(x)) -> FormsSediment(x))"]}
{"id": "eqasc_train_3808", "nl": "Rocks weather at different rates.", "fol": "", "prediction": ["all x.(RocksWeather(x) -> DifferentRate(x))"]}
{"id": "eqasc_train_3809", "nl": "wind affects rocks", "fol": "", "prediction": ["all x y.((Wind(x) & Rock(y)) -> Affects(x,y))"]}
{"id": "eqasc_train_3810", "nl": "Limestone is the rock formed by calcite.", "fol": "", "prediction": ["all x.(Limestone(x) -> FormedByCalcite(x))"]}
{"id": "eqasc_train_3811", "nl": "Limestone interacting with wind over long periods of time causes weathering.", "fol": "", "prediction": ["all x.((Limestone(x) & InteractsWithWind(x) & LongPeriodsOfTime(x)) -> CausesWeathering(x))"]}
{"id": "eqasc_train_3812", "nl": "Most sands are weathered fragments of quartz.", "fol": "", "prediction": ["all x.(Sand(x) -> WeatheredFragmentsOfQuarz(x))"]}
{"id": "eqasc_train_3813", "nl": "Rocks interacting with wind over long periods of time results in sand", "fol": "", "prediction": ["all x y.((Rock(x) & InteractionWithWind(x) & LongPeriodsOfTime(y)) -> Sand(x))"]}
{"id": "eqasc_train_3814", "nl": "Violent weather can dramatically alter the landscape.", "fol": "", "prediction": ["all x.(ViolentWeather(x) -> CanAlternateLandscape(x))"]}
{"id": "eqasc_train_3815", "nl": "rocks interacting with wind can dramatically alter the landscape", "fol": "", "prediction": ["all x y.((Rock(x) & Wind(y) & InteractsWith(x,y)) -> CanAlternateLandscape(x))"]}
{"id": "eqasc_train_3816", "nl": "Smaller rocks come from the breakage and weathering of bedrock and larger rocks.", "fol": "", "prediction": ["all x y.((Rock(x) & Bedrock(y)) -> (Breakage(x,y) & Weathering(x,y)))"]}
{"id": "eqasc_train_3817", "nl": "Smaller rocks come from the interaction of bedrock with wind over long periods of time", "fol": "", "prediction": ["all x.(SmallerRock(x) -> (InteractionOfBedrockAndWind(x) & LongPeriodsOfTime(x)))"]}
{"id": "eqasc_train_3818", "nl": "Winds grind down rocks.", "fol": "", "prediction": ["all x y.((Wind(x) & Rock(y)) -> GrindsDown(x,y))"]}
{"id": "eqasc_train_3819", "nl": "weathering grinds rocks down", "fol": "", "prediction": ["all x y.((Weathering(x) & Rock(y)) -> GrindsDown(x,y))"]}
{"id": "eqasc_train_3820", "nl": "Passive immunity lasts only as long as the antibodies survive in body fluids.", "fol": "", "prediction": ["all x.(PassiveImmunity(x) -> SurvivesInBodyFlours(x))"]}
{"id": "eqasc_train_3821", "nl": "Booster shots are needed periodically to build up the passive immunity again.", "fol": "", "prediction": ["all x.(BoosterShot(x) -> NeededPeriodicallyToBuildUpPassiveImmunity(x))"]}
{"id": "eqasc_train_3822", "nl": "Booster shots are needed after antibodies won't survive in body fluids", "fol": "", "prediction": ["all x y.((BoosterShot(x) & Antibodies(y) & -SurviveInBodyFluids(y)) -> Needed(x,y))"]}
{"id": "eqasc_train_3823", "nl": "Furthermore, antibody levels decrease with time.", "fol": "", "prediction": ["all x.(AntibodyLevel(x) -> DecreasesWithTime(x))"]}
{"id": "eqasc_train_3824", "nl": "Passive immunity diminishes with time", "fol": "", "prediction": ["all x.(PassiveImmunity(x) -> DiminishesWithTime(x))"]}
{"id": "eqasc_train_3825", "nl": "Immunization can be active or passive.", "fol": "", "prediction": ["all x.(Immunization(x) -> (Active(x) | Passive(x)))"]}
{"id": "eqasc_train_3826", "nl": "immunization can put antibodies in body fluids", "fol": "", "prediction": ["all x y.((Immunization(x) & BodyFluid(y)) -> PutsAntibodiesIn(x,y))"]}
{"id": "eqasc_train_3827", "nl": "Antibodies are administered to the patient in a process called passive immunization.", "fol": "", "prediction": ["all x y.((Antibodies(x) & Patient(y)) -> AdministeredInPassiveImmunization(x,y))"]}
{"id": "eqasc_train_3828", "nl": "Antibodies are administered to patients for protection but it only helps as long as the antibodies survive in body fluids.", "fol": "", "prediction": ["all x y.((Antibodies(x) & Patient(y)) -> (AdministeredForProtection(x,y) & SurvivesInBodyFluids(x,y)))"]}
{"id": "eqasc_train_3829", "nl": "Immunization in a pregnant woman produces both active and passive immunity in the fetus.", "fol": "", "prediction": ["all x y.((Pregnant(x) & Pregnant(y)) -> (ImmunizationProducesActiveImmunity(x,y) & ImmunizationProducesPassiveImmunity(x,y)))"]}
{"id": "eqasc_train_3830", "nl": "A pregnant woman will pass antibodies to the fetus.", "fol": "", "prediction": ["all x y.((Pregnant(x) & Woman(y)) -> PassesAntibodiesToFetus(y,x))"]}
{"id": "eqasc_train_3831", "nl": "Antibodies are also called gammaglobulins.", "fol": "", "prediction": ["all x.(Antibody(x) -> Gammaglobulin(x))"]}
{"id": "eqasc_train_3832", "nl": "passive immunity lasts only as long as the gammaglobulins survive in body fluids", "fol": "", "prediction": ["all x.(PassiveImmunity(x) -> SurvivesInBodyFluids(x))"]}
{"id": "eqasc_train_3833", "nl": "Breast Milk contains antibodies.", "fol": "", "prediction": ["all x.(BreastMilk(x) -> ContainsAntibodies(x))"]}
{"id": "eqasc_train_3834", "nl": "breast milk can make passive immunity last", "fol": "", "prediction": ["all x.(BreastMilk(x) -> MakesPassiveImmunity(x))"]}
{"id": "eqasc_train_3835", "nl": "Inside the body, blood is normally a fluid.", "fol": "", "prediction": ["all x.((Body(x) & Blood(x)) -> Fluid(x))"]}
{"id": "eqasc_train_3836", "nl": "passive immunity lasts only as long as the antibodies survive in blood", "fol": "", "prediction": ["all x.(PassiveImmunity(x) -> (SurvivesInBlood(x) & AntibodiesSurviveInBlood(x)))"]}
{"id": "eqasc_train_3837", "nl": "Breastfeeding provides passive and likely long-lasting active immunity.", "fol": "", "prediction": ["all x.(Bertfeeding(x) -> (ProvidesPassiveActiveImmunity(x) & ProbablyLongLastingActiveImmunity(x)))"]}
{"id": "eqasc_train_3838", "nl": "What breastfeeding provides lasts only as long as the antibodies survive in body fluids", "fol": "", "prediction": ["all x.((Bittling(x) & SurvivesInBodyFluids(x)) -> ProvidesLasts(x))"]}
{"id": "eqasc_train_3839", "nl": "Factors in Body Fluid Health Potassium and sodium are crucial to the body's fluid balance.", "fol": "", "prediction": ["all x.((FactorsInBodyFluidHealth(x) & Potassium(x) & Soda(x)) -> BodyFluidBalance(x))"]}
{"id": "eqasc_train_3840", "nl": "Passive immunity lasts only as long as the antibodies survive in something containing potassium and sodium", "fol": "", "prediction": ["all x y.((PassiveImmunity(x) & Antibodies(y) & ContainsKaproate(y) & ContainsSodium(y)) -> LastsAtLeastAsSurvival(x,y))"]}
{"id": "eqasc_train_3841", "nl": "An antibody is a protein that attaches to an antigen.", "fol": "", "prediction": ["all x.(Antibody(x) -> (Protein(x) & AttachesToAntigen(x)))"]}
{"id": "eqasc_train_3842", "nl": "Passive immunity lasts only as long as the proteins that attach to an antigen survive in body fluids", "fol": "", "prediction": ["all x y.((PassiveImmunity(x) & Proteins(y) & AttachToAntigen(y,x)) -> SurvivesInBodyFluids(x,y))"]}
{"id": "eqasc_train_3843", "nl": "stalactites are formed by deposition", "fol": "", "prediction": ["all x.(Stalactite(x) -> FormedByDeposition(x))"]}
{"id": "eqasc_train_3844", "nl": "Inside the caves are some young stalactites and stalagmites in formation.", "fol": "", "prediction": ["all x.(Caves(x) -> (YearlyStalactites(x) | YoungStalagmites(x)))"]}
{"id": "eqasc_train_3845", "nl": "deposition causes formations in caves", "fol": "", "prediction": ["all x y.((Cave(x) & Cave(y)) -> CausesFormationsIn(x,y))"]}
{"id": "eqasc_train_3846", "nl": "Most stalactites are formed from drips of water.", "fol": "", "prediction": ["all x.(Stalactite(x) -> FormedFromDripsOfWater(x))"]}
{"id": "eqasc_train_3847", "nl": "Stalactites are deposits from drips of water", "fol": "", "prediction": ["all x.(Stalactite(x) -> (DepositsFromDripsOfWater(x) & FromDripsOfWater(x)))"]}
{"id": "eqasc_train_3848", "nl": "Small stalactites predominate on the cave roof.", "fol": "", "prediction": ["all x.(SmallStalactite(x) -> PredominatesOnCaveRoof(x))"]}
{"id": "eqasc_train_3849", "nl": "cave roofs are formed by deposition", "fol": "", "prediction": ["all x.(CaveRoof(x) -> FormedByDeposition(x))"]}
{"id": "eqasc_train_3850", "nl": "Stalactites and stalagmites are common speleothems.", "fol": "", "prediction": ["all x.((Stalactite(x) | Stallagmite(x)) -> CommonSpeceothem(x))"]}
{"id": "eqasc_train_3851", "nl": "speleothems are formed by deposition", "fol": "", "prediction": ["all x.(Speleothem(x) -> FormedByDeposition(x))"]}
{"id": "eqasc_train_3852", "nl": "Limestone caves displaying stalactites.", "fol": "", "prediction": ["all x.((LimestoneCave(x) & DisplaysStalactites(x)) -> Displays(x))"]}
{"id": "eqasc_train_3853", "nl": "Limestone caves are formed by depositions", "fol": "", "prediction": ["all x.(LimestoneCave(x) -> FormedByDepositions(x))"]}
{"id": "eqasc_train_3854", "nl": "Chrissospilia is a cave with stalagmites and stalactites.", "fol": "", "prediction": ["all x.(Cave(x) -> (HasStalagmites(x) & HasStalactites(x)))"]}
{"id": "eqasc_train_3855", "nl": "Chrissospilias are formed by deposition", "fol": "", "prediction": ["all x.(Chrissospilia(x) -> FormedByDeposition(x))"]}
{"id": "eqasc_train_3856", "nl": "And new sediments such as clay and sand are being deposited by water.", "fol": "", "prediction": ["all x y.((Sediment(x) & (Clay(x) | Sand(x))) -> DeposesByWater(x))"]}
{"id": "eqasc_train_3857", "nl": "Stalactites are formed by sediments such as clay and sand by water", "fol": "", "prediction": ["all x y z.((Stalactite(x) & Sediment(y) & Water(z)) -> (FormedBy(x,y) & (Clay(y) | Sand(y))))"]}
{"id": "eqasc_train_3858", "nl": "Soils are sand, clay, limestone, and organic deposits.", "fol": "", "prediction": ["all x.(Soil(x) -> (Sand(x) | Clay(x) | Limestone(x) | OrganicDeposits(x)))"]}
{"id": "eqasc_train_3859", "nl": "Soil, sand, clay and limestone can form stalactites.", "fol": "", "prediction": ["all x.((Soil(x) | Sand(x) | Clay(x) | Limestone(x)) -> FormsStalactites(x))"]}
{"id": "eqasc_train_3860", "nl": "tidal energy can be used to produce electricity", "fol": "", "prediction": ["all x.(TidalEnergy(x) -> ProducesElectricity(x))"]}
{"id": "eqasc_train_3861", "nl": "Electricity travels in currents.", "fol": "", "prediction": ["all x.(Electricity(x) -> TravelsInCurrents(x))"]}
{"id": "eqasc_train_3862", "nl": "tidal energy can be used to produce currents", "fol": "", "prediction": ["all x.(TidalEnergy(x) -> ProducesCurrents(x))"]}
{"id": "eqasc_train_3863", "nl": "Tidal energy schemes capture water at high tide and release it at low tide.", "fol": "", "prediction": ["all x.(TidalEnergyScheme(x) -> (CapturesWaterAtHighTide(x) & ReleasesWaterAtLowTide(x)))"]}
{"id": "eqasc_train_3864", "nl": "Capturing water at high tide can be used to produce electricity.", "fol": "", "prediction": ["all x.(CapturingWaterAtHighTide(x) -> ProducesElectricity(x))"]}
{"id": "eqasc_train_3865", "nl": "Electricity is electrons in motion.", "fol": "", "prediction": ["all x.(Electricity(x) -> ElectronsInMotion(x))"]}
{"id": "eqasc_train_3866", "nl": "tidal energy can be used to produce electrons in motion", "fol": "", "prediction": ["all x.(TidalEnergy(x) -> ProducesElectronsInMotion(x))"]}
{"id": "eqasc_train_3867", "nl": "Tidal energy is renewable .", "fol": "", "prediction": ["all x.(TidalEnergy(x) -> Renewable(x))"]}
{"id": "eqasc_train_3868", "nl": "Renewable energy can be used to produce electricity ", "fol": "", "prediction": ["all x y.((RenewableEnergy(x) & Electricity(y)) -> Produces(x,y))"]}
{"id": "eqasc_train_3869", "nl": "Ocean thermal is energy derived from waves and also from tidal waves.", "fol": "", "prediction": ["all x.(OceanThermal(x) -> (EnergyDerivedFromWaves(x) & EnergyDerivedFromTidalWaves(x)))"]}
{"id": "eqasc_train_3870", "nl": "Ocean thermal energy can be used to produce electricity.", "fol": "", "prediction": ["all x.(OceanThermalEnergy(x) -> ProducesElectricity(x))"]}
{"id": "eqasc_train_3871", "nl": "Meaningful tidal current information on the tidal inlets of New Jersey is relatively scarce.", "fol": "", "prediction": ["all x.((TidalInletInformation(x) & Meaningful(x) & NewJersey(x)) -> RelativelyScarce(x))"]}
{"id": "eqasc_train_3872", "nl": "inlets of large water bodies like in New Jersey can be used to produce electricity", "fol": "", "prediction": ["all x y.((Inlet(x) & LargeWaterBody(y) & NewJersey(y)) -> ProducesElectricity(x,y))"]}
{"id": "eqasc_train_3873", "nl": "waves can be used to produce electricity", "fol": "", "prediction": ["all x.(Waves(x) -> ProducesElectricity(x))"]}
{"id": "eqasc_train_3874", "nl": "Tidal energy is one of the oldest forms of energy used by humans.", "fol": "", "prediction": ["all x.(TidalEnergy(x) -> (OldestFormOfEnergy(x) & UsedByHumans(x)))"]}
{"id": "eqasc_train_3875", "nl": "One of the oldest forms of energy used by humans can be used to produce electricity.", "fol": "", "prediction": ["all x.((OldestEnergy(x) & UsedByHumans(x)) -> ProducesElectricity(x))"]}
{"id": "eqasc_train_3876", "nl": "Spikes are forceful the tidal waves of electric current.", "fol": "", "prediction": ["all x.(Spike(x) -> (ForcefulTidalWaves(x) & ElectricCurrent(x)))"]}
{"id": "eqasc_train_3877", "nl": "spikes come from tidal energy", "fol": "", "prediction": ["all x.(Spike(x) -> (TidalEnergy(x) & ComesFrom(x,TidalEnergy)))"]}
{"id": "eqasc_train_3878", "nl": "Ocean thermal can be used to produce electricity", "fol": "", "prediction": ["all x.(OceanThermal(x) -> (ProducesElectricity(x) & OceanThermal(x)))"]}
{"id": "eqasc_train_3879", "nl": "Tidal caves are formed by the energy of the rising and falling tides.", "fol": "", "prediction": ["all x.(TidalCave(x) -> (FormedByEnergy(x) & RisingTide(x) & FallingTide(x)))"]}
{"id": "eqasc_train_3880", "nl": "tidal caves can produce electricity", "fol": "", "prediction": ["all x.(TidalCaves(x) -> ProducesElectricity(x))"]}
{"id": "eqasc_train_3881", "nl": "breathing is when a gill converts from oxygen in water into oxygen in blood", "fol": "", "prediction": ["all x y.((Gill(x) & Gill(y)) -> (ConvertsOxygenInWaterToOxygenInBlood(x)))"]}
{"id": "eqasc_train_3882", "nl": "Shark gills remove the oxygen from the water.", "fol": "", "prediction": ["all x.(SharkGills(x) -> RemovesOxygenFromWater(x))"]}
{"id": "eqasc_train_3883", "nl": "Sharks breathing use gills to convert oxygen in blood.", "fol": "", "prediction": ["all x.(Shark(x) -> (Breathing(x) & UsesGills(x) & ConvertsOxygenInBlood(x)))"]}
{"id": "eqasc_train_3884", "nl": "Sharks breathe under water.", "fol": "", "prediction": ["all x.(Shark(x) -> BreathesUnderWater(x))"]}
{"id": "eqasc_train_3885", "nl": "Sharks use gills to breathe", "fol": "", "prediction": ["all x y.((Shark(x) & Gills(y)) -> UsesToBreathe(x,y))"]}
{"id": "eqasc_train_3886", "nl": "Most fish breathe through gills.", "fol": "", "prediction": ["all x.(Fish(x) -> BreathesThroughGills(x))"]}
{"id": "eqasc_train_3887", "nl": "fish get oxygen in water from gills", "fol": "", "prediction": ["all x y.((Fish(x) & Gills(y)) -> GetsOxygenInWater(x,y))"]}
{"id": "eqasc_train_3888", "nl": "Sharks breathe using gills.", "fol": "", "prediction": ["all x.(Shark(x) -> BreathesUsingGills(x))"]}
{"id": "eqasc_train_3889", "nl": "sharks convert oxygen with gills", "fol": "", "prediction": ["all x.(Shark(x) -> (ConvertsOxygenWithGills(x) & HasGills(x)))"]}
{"id": "eqasc_train_3890", "nl": "Many people confuse breathing with respiration, but breathing is just the first step of respiration.", "fol": "", "prediction": ["all x y.((Person(x) & Breathing(y)) -> (Confused(x,y) & Breathing(x) & Breathing(x)))"]}
{"id": "eqasc_train_3891", "nl": "the first step of respiration is when a gill converts from oxygen in water into oxygen in blood", "fol": "", "prediction": ["all x y.((Gill(x) & Gill(y) & ConvertsOxygenInWaterToOxygenInBlood(x,y)) -> Respiration(x))"]}
{"id": "eqasc_train_3892", "nl": "Hemoglobin transports oxygen in blood.", "fol": "", "prediction": ["all x.(Hemoglobin(x) -> TransportsOxygenInBlood(x))"]}
{"id": "eqasc_train_3893", "nl": "breathing is when a gill converts from oxygen in water into Hemoglobin ", "fol": "", "prediction": ["all x y.((Gill(x) & OxygenInWater(y) & ConvertsToHemoglobin(x,y)) -> Breathing(x))"]}
{"id": "eqasc_train_3894", "nl": "All fish have gills .", "fol": "", "prediction": ["all x.(Fish(x) -> HasGills(x))"]}
{"id": "eqasc_train_3895", "nl": "breathing is when fish convert from oxygen in water to oxygen in blood", "fol": "", "prediction": ["all x y.((Fish(x) & OxygenInWater(y) & OxygenInBlood(x)) -> ConvertsTo(x,y))"]}
{"id": "eqasc_train_3896", "nl": "Gill slits form gills in fish.", "fol": "", "prediction": ["all x y.((GillSlit(x) & Fish(y)) -> FormsGills(x,y))"]}
{"id": "eqasc_train_3897", "nl": " a fish converts  oxygen in water into oxygen in blood", "fol": "", "prediction": ["all x y z.((Fish(x) & Oxygen(y) & Water(z)) -> ConvertsToOxygen(x,y,z))"]}
{"id": "eqasc_train_3898", "nl": "Fish breathe by converting oxygen in water into oxygen in blood.", "fol": "", "prediction": ["all x.(Fish(x) -> (ConvertsOxygenInWater(x) & ProducesOxygenInBlood(x)))"]}
{"id": "eqasc_train_3899", "nl": "Muscle contraction occurs when muscle fibers get shorter.", "fol": "", "prediction": ["all x.((MuscleFast(x) & MuscleFibersShorter(x)) -> MuscleContraction(x))"]}
{"id": "eqasc_train_3900", "nl": "Injury occurs as the muscle is being stretched while the muscle fibers are being contracted.", "fol": "", "prediction": ["all x y.((Muscle(x) & MuscleFibers(y) & Stretched(x) & Contracted(y)) -> InjuryOccurs(x))"]}
{"id": "eqasc_train_3901", "nl": "Injury occurs as the muscle is stretched while the fibers are shorter", "fol": "", "prediction": ["all x y.((Muscle(x) & Fibers(y) & Stretched(x) & Shorter(y)) -> InjuryOccurs(x))"]}
{"id": "eqasc_train_3902", "nl": "bicep contraction occurs when fibers get shorter", "fol": "", "prediction": ["all x.((BicepContraction(x) & FibersGetShorter(x)) -> ObtainedByContraction(x))"]}
{"id": "eqasc_train_3903", "nl": "Muscles are bundles of fibers that can contract.", "fol": "", "prediction": ["all x.(Muscle(x) -> (BundlesOfFibers(x) & CanContract(x)))"]}
{"id": "eqasc_train_3904", "nl": "Bundles of fibers contraction occurs when bundles of fibers get shorter. ", "fol": "", "prediction": ["all x.((BundlesOfFibers(x) & Fibers(y) & Shorter(y)) -> ContractionOf(x,y))"]}
{"id": "eqasc_train_3905", "nl": "Fibers are oriented diagonally across fiber.", "fol": "", "prediction": ["all x.(Fibre(x) -> (OrientedDiagonally(x) & Fiber(x)))"]}
{"id": "eqasc_train_3906", "nl": "muscle contraction occurs when a diagonally oriented part of muscle gets shorter", "fol": "", "prediction": ["all x y.((MuscleContraction(x) & DiagonallyOrientedPartOfMuscle(y) & Shorter(y)) -> Occurs(x,y))"]}
{"id": "eqasc_train_3907", "nl": "Muscles can only contract and relax.", "fol": "", "prediction": ["all x.(Muscle(x) -> (Contract(x) & Relax(x)))"]}
{"id": "eqasc_train_3908", "nl": "muscle relaxation occurs when muscle fibers get longer", "fol": "", "prediction": ["all x.((MuscleFast(x) & MuscleFibersGetLonger(x)) -> MuscleRelaxation(x))"]}
{"id": "eqasc_train_3909", "nl": "Movement is based on the contraction of muscles.", "fol": "", "prediction": ["all x.(Movement(x) -> ConstrictionOfMuscles(x))"]}
{"id": "eqasc_train_3910", "nl": "Movement happens when muscle fibers get shorter.", "fol": "", "prediction": ["all x.(Movement(x) -> (MuscleFibersGetShorter(x)))"]}
{"id": "eqasc_train_3911", "nl": "Exercise causes muscles to contract.", "fol": "", "prediction": ["all x.(Exercise(x) -> CausesMusclesToContrain(x))"]}
{"id": "eqasc_train_3912", "nl": "muscle fibers get shorter during exercise", "fol": "", "prediction": ["all x y.((MuscleFilm(x) & Exercise(y)) -> Shorter(x,y))"]}
{"id": "eqasc_train_3913", "nl": "Weight lifting requires  shortening of of the fibers of large muscles", "fol": "", "prediction": ["all x y.((WeightLifting(x) & LargeMuscle(y)) -> ShortensFibers(x,y))"]}
{"id": "eqasc_train_3914", "nl": "exercise causes muscle fibers to get shorter", "fol": "", "prediction": ["all x y.((Exercise(x) & MuscleFiber(y)) -> CausesShorterMuscleFibers(x,y))"]}
{"id": "eqasc_train_3915", "nl": "Contraction of the muscle straightens the leg.", "fol": "", "prediction": ["all x.(Contraction(x) -> StraightensLeg(x))"]}
{"id": "eqasc_train_3916", "nl": "The leg straightens when muscle fibers get shorter", "fol": "", "prediction": ["all x y.((Leg(x) & MuscleFibers(y) & Shorter(y)) -> Straightens(x))"]}
{"id": "eqasc_train_3917", "nl": "Muscle activation is a prerequisite for muscle contraction.", "fol": "", "prediction": ["all x.(MuscleActivation(x) -> PrerequisiteForMuscleContraction(x))"]}
{"id": "eqasc_train_3918", "nl": "muscles activate before fibers get shorter", "fol": "", "prediction": ["all x y.((Muscle(x) & Fiber(y) & Fiber(z)) -> (Activates(x,y) & FibersShorter(y,z)))"]}
{"id": "eqasc_train_3919", "nl": "Phytoplankton are bacteria and algae that use sunlight to make food.", "fol": "", "prediction": ["all x.(Phytoplankton(x) -> (Bacteria(x) & Algae(x) & UsesSunlightToMakeFood(x)))"]}
{"id": "eqasc_train_3920", "nl": "Plants have a very clever way of using the energy from sunlight to make their food.", "fol": "", "prediction": ["all x.(Plant(x) -> (UsesEnergyFromSunlight(x) & MakesFood(x)))"]}
{"id": "eqasc_train_3921", "nl": "Phytoplankton have a clever way of making food from sunlight energy.", "fol": "", "prediction": ["all x.(Phytoplankton(x) -> (MakesFoodFromSunlight(x) & Smart(x)))"]}
{"id": "eqasc_train_3922", "nl": "By contrast, coastal waters rich in phytoplankton are green.", "fol": "", "prediction": ["all x.((CoastalWater(x) & RichInPhytoplankton(x)) -> Green(x))"]}
{"id": "eqasc_train_3923", "nl": "Something that makes coastal waters green are bacteria and algae that use sunlight to make food", "fol": "", "prediction": ["all x.((Bacteria(x) | Algae(x)) -> (MakesCoastalWatersGreen(x) & UsesSunlightToMakeFood(x)))"]}
{"id": "eqasc_train_3924", "nl": "Most copepods feed on phytoplankton.", "fol": "", "prediction": ["all x.(Coupepod(x) -> FeedsOnPhytoplankton(x))"]}
{"id": "eqasc_train_3925", "nl": "most copepods feed on bacteria and algae that use sunlight to make food", "fol": "", "prediction": ["all x y.((Cophepod(x) & Bacteria(y) & Algae(z)) -> FeedsOn(x,y,z))"]}
{"id": "eqasc_train_3926", "nl": "Most copepods feed on bacteria and algae that use sunlight to make food.", "fol": "", "prediction": ["all x.(Coupepod(x) -> (FeedsOnBacteria(x) & FeedsOnAlgae(x) & UsesSunlight(x)))"]}
{"id": "eqasc_train_3927", "nl": "Since fish feed on phytoplankton, they are drawn to phytoplankton-rich waters.", "fol": "", "prediction": ["all x y.((Fish(x) & Fish(y) & FeedsOnPhytoplankton(x,y)) -> DrawnToPhytoplanktonRichWaters(x))"]}
{"id": "eqasc_train_3928", "nl": "fish feed on algae", "fol": "", "prediction": ["all x y.((Fish(x) & Algae(y)) -> FeedsOn(x,y))"]}
{"id": "eqasc_train_3929", "nl": "Planktonic plants are called phytoplankton.", "fol": "", "prediction": ["all x.(PlanktonicPlant(x) -> Phytoplankton(x))"]}
{"id": "eqasc_train_3930", "nl": "Planktonic plants are bacteria and algae that use sunlight to make food.", "fol": "", "prediction": ["all x.(PlanktonicPlant(x) -> (Bacteria(x) & Algae(x) & UsesSunlightToMakeFood(x)))"]}
{"id": "eqasc_train_3931", "nl": "most copepods feed on bacteria and algae", "fol": "", "prediction": ["all x.(Coupepod(x) -> (FeedsOnBacteria(x) & FeedsOnAlgae(x)))"]}
{"id": "eqasc_train_3932", "nl": "Phytoplankton and bacteria are algae that use sunlight to make energy.", "fol": "", "prediction": ["all x.((Phytoplankton(x) | Bacteria(x)) -> (Algae(x) & UsesSunlight(x)))"]}
{"id": "eqasc_train_3933", "nl": "Phytoplankton, or plant plankton, needs sunlight to live, the same way plants on land do.", "fol": "", "prediction": ["all x.(Phytoplankton(x) -> (PlantPlankton(x) & NeedsSunlight(x) & PlantsOnLand(x)))"]}
{"id": "eqasc_train_3934", "nl": "Plant plankton needs sunlight to make food", "fol": "", "prediction": ["all x.(PlantPlanton(x) -> NeedsSunlightToMakeFood(x))"]}
{"id": "eqasc_train_3935", "nl": "Sunlight beams down on the different types of algae.", "fol": "", "prediction": ["all x y.((Sunlight(x) & Algae(y)) -> BeamsDownOn(x,y))"]}
{"id": "eqasc_train_3936", "nl": "Phytoplankton use sunlight beams to make food", "fol": "", "prediction": ["all x.(Phytoplankton(x) -> UsesSunlightBeamsToMakeFood(x))"]}
{"id": "eqasc_train_3937", "nl": "gases from burning coal and oil dissolving in water in the atmosphere causes acid rain", "fol": "", "prediction": ["all x y.((Gases(x) & BurningCoal(x) & Oil(y) & DissolvingInWater(x)) -> CausesAcidRain(x))"]}
{"id": "eqasc_train_3938", "nl": "Acid rain is caused by the burning of fuels such as oil and coal.", "fol": "", "prediction": ["all x.(AcidRain(x) -> (CausedByBurningOil(x) & CausedByBurningCoal(x)))"]}
{"id": "eqasc_train_3939", "nl": "burning oil can cause acid rain", "fol": "", "prediction": ["all x.((BurningOil(x) & AcidRain(x)) -> CanCause(x,acidRain))"]}
{"id": "eqasc_train_3940", "nl": "Acid rain kills trees .", "fol": "", "prediction": ["all x y.((AcidRain(x) & Tree(y)) -> Kills(x,y))"]}
{"id": "eqasc_train_3941", "nl": "gases from burning coal and oil dissolving in water in the atmosphere kills trees", "fol": "", "prediction": ["all x y.((Gases(x) & BurningCoal(x) & Oil(y) & DissolvingInWater(x)) -> KillsTrees(x))"]}
{"id": "eqasc_train_3942", "nl": "Acid rain can destroy soil.", "fol": "", "prediction": ["all x.(AcidRain(x) -> CanDestroySoil(x))"]}
{"id": "eqasc_train_3943", "nl": "Gases from burning coal and oil dissolving in water in the atmosphere can destroy soil.", "fol": "", "prediction": ["all x.((Gases(x) & BurningCoal(x) & Oil(x) & DissolvingInWater(x)) -> CanDestroySoil(x))"]}
{"id": "eqasc_train_3944", "nl": "Coal-fired power plants contribute to acid rain.", "fol": "", "prediction": ["all x.((CoalFiredPowerPlant(x) & ContributesToAcidRain(x)) -> ContributesToRain(x))"]}
{"id": "eqasc_train_3945", "nl": "power plants can cause acid rain", "fol": "", "prediction": ["all x.(PowerPlant(x) -> CanCauseAcidRain(x))"]}
{"id": "eqasc_train_3946", "nl": "Acid rain is very bad and can hurt the environment.", "fol": "", "prediction": ["all x.(AcidRain(x) -> (Bad(x) & CanHaveEnvironment(x)))"]}
{"id": "eqasc_train_3947", "nl": "Gases from burning coal and oil dissolving in water in the atmosphere can hurt the environment", "fol": "", "prediction": ["all x y.((Gas(x) & BurningCoal(x) & Oil(y) & DissolvingInWater(x)) -> CanHaveEnvironment(x))"]}
{"id": "eqasc_train_3948", "nl": "Acid rain comes from polluted clouds.", "fol": "", "prediction": ["all x.(AcidRain(x) -> ComesFromPollutedClouds(x))"]}
{"id": "eqasc_train_3949", "nl": "Gases from burning coal and oil dissolving in water in the atmosphere causes polluted rain.", "fol": "", "prediction": ["all x y.((Gase(x) & BurningCoal(x) & Oil(y) & DissolvingInWater(x)) -> PollutedRain(x))"]}
{"id": "eqasc_train_3950", "nl": "Acid rain can harm plant life and actually kill plants.", "fol": "", "prediction": ["all x.(AcidRain(x) -> (HarmPlantLife(x) & KillPlants(x)))"]}
{"id": "eqasc_train_3951", "nl": "gases from burning coal and oil dissolving in water can harm plant life", "fol": "", "prediction": ["all x y.((Gases(x) & BurningCoal(x) & OilDissolvingInWater(x)) -> HarmPlantLife(y))"]}
{"id": "eqasc_train_3952", "nl": "Helpful Generalizations Vapors and gases are molecules.", "fol": "", "prediction": ["all x.((Vapor(x) | Gas(x)) -> Molecule(x))"]}
{"id": "eqasc_train_3953", "nl": "vapors from burning coal and oil dissolving in water in the atmosphere causes acid rain", "fol": "", "prediction": ["all x y.((Vapors(x) & BurningCoalAndOil(x) & DissolvingInWater(x)) -> CausesAcidRain(x))"]}
{"id": "eqasc_train_3954", "nl": "Coal-fired plants Are power stations which burn coal to generate electricity.", "fol": "", "prediction": ["all x.(CoalFiredPlant(x) -> (PowerStation(x) & BurnsCoal(x) & GeneratesElectricity(x)))"]}
{"id": "eqasc_train_3955", "nl": "power stations which generate electricity produce gases in the atmosphere cause acid rain", "fol": "", "prediction": ["all x y.((PowerStation(x) & GeneratesElectricity(x)) -> ProducesGasesInAtmosphere(y))"]}
{"id": "eqasc_train_3956", "nl": "Acid rain is harmful rain.", "fol": "", "prediction": ["all x.(AcidRain(x) -> HarmfulRain(x))"]}
{"id": "eqasc_train_3957", "nl": "gases from burning coal and oil dissolving in water in the atmosphere is harmful", "fol": "", "prediction": ["all x.((Gases(x) & BurningCoal(x) & DissolvingInWater(x)) -> Harmful(x))"]}
{"id": "eqasc_train_3958", "nl": "Acid rain is precipitation which pH is 5.7 or lower.", "fol": "", "prediction": ["all x.(AcidRain(x) -> (Precipitation(x) & pH(x,5.7) | Lower(x)))"]}
{"id": "eqasc_train_3959", "nl": "gases from burning coal causes precipitation which pH is 5.7 or lower", "fol": "", "prediction": ["all x.((GasesFromBurningCoal(x) & CausesPrecipitation(x,PhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP"]}
{"id": "eqasc_train_3960", "nl": "An acid is defined as a compound which can donate a proton .", "fol": "", "prediction": ["all x.(Acid(x) -> (Compound(x) & CanDonateProton(x)))"]}
{"id": "eqasc_train_3961", "nl": "A compound which can donate a proton from burning coal and oil dissolving in water in the atmosphere causes a compound which can donate a proton rain.", "fol": "", "prediction": ["all x y.((Compound(x) & BurningCoal(x) & OilDissolvingInWater(x)) -> CausesProtonRain(x))"]}
{"id": "eqasc_train_3962", "nl": "Most genes contain the instructions for a single protein.", "fol": "", "prediction": ["all x.(Gene(x) -> ContainsInstructions(x))"]}
{"id": "eqasc_train_3963", "nl": "DNA contains the instructions, proteins carry out the instructions.", "fol": "", "prediction": ["all x y.((DNA(x) & Protein(y)) -> (ContainsInstructions(x) & CarriesOutInstructions(y)))"]}
{"id": "eqasc_train_3964", "nl": "Proteins in DNA, carried by genes, have instructions", "fol": "", "prediction": ["all x y.((Protein(x) & DNA(y) & CarriedByGenes(x,y)) -> HasInstructions(x,y))"]}
{"id": "eqasc_train_3965", "nl": "Alleles are alternative forms of a gene.", "fol": "", "prediction": ["all x.(Allel(x) -> AlternateGene(x))"]}
{"id": "eqasc_train_3966", "nl": "Alleles can contain instructions for making alternative versions of the same single protein.", "fol": "", "prediction": ["all x.(Allele(x) -> (ContainsInstructionsForAlternativeVersions(x) & SameSingleProtein(x)))"]}
{"id": "eqasc_train_3967", "nl": "Genes are blueprints for the construction of proteins.", "fol": "", "prediction": ["all x.(Gene(x) -> (BloodsForProteinConstruction(x)))"]}
{"id": "eqasc_train_3968", "nl": "genes contain blueprints", "fol": "", "prediction": ["all x.(Gene(x) -> ContainsBlueprints(x))"]}
{"id": "eqasc_train_3969", "nl": "Genes are blueprints for making proteins.", "fol": "", "prediction": ["all x.(Gene(x) -> (Bloodprint(x) & MakesProteins(x)))"]}
{"id": "eqasc_train_3970", "nl": "A thing arranged in clusters mostly contain instructions for a single protein", "fol": "", "prediction": ["all x y.((Thing(x) & ArrangedInClusters(x) & SingleProtein(y)) -> ContainsInstructions(x,y))"]}
{"id": "eqasc_train_3971", "nl": "Genes are made of DNA, the substrate of hereditary information.", "fol": "", "prediction": ["all x.(Gene(x) -> (MadeOfDNA(x) & SubstratOfHereditaryInformation(x)))"]}
{"id": "eqasc_train_3972", "nl": "DNA can contain the instructions for a single protein.", "fol": "", "prediction": ["all x.(DNA(x) -> ContainsInstructionsForSingleProtein(x))"]}
{"id": "eqasc_train_3973", "nl": "Genes are the basic unit of heredity.", "fol": "", "prediction": ["all x.(Gene(x) -> HeredityUnit(x))"]}
{"id": "eqasc_train_3974", "nl": "units of heredity mostly contain the instructions for a single protein", "fol": "", "prediction": ["all x.(HerdityUnit(x) -> ContainsInstructionsForSingleProtein(x))"]}
{"id": "eqasc_train_3975", "nl": "Genes are molecules that contain the instructions for cells to work correctly.", "fol": "", "prediction": ["all x.(Gene(x) -> (Molecule(x) & ContainsInstructions(x) & CorrectWorking(x)))"]}
{"id": "eqasc_train_3976", "nl": "Genes are molecules that contain a single protein", "fol": "", "prediction": ["all x.(Gene(x) -> (Molecule(x) & ContainsSingleProtein(x)))"]}
{"id": "eqasc_train_3977", "nl": "sweat is used for adjusting to hot temperatures by some animals", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> (UsedForAdjustingToHotTemperatures(x,y)))"]}
{"id": "eqasc_train_3978", "nl": "High humidity interferes with the ability of some animals to adjust to hot temperature.", "fol": "", "prediction": ["all x y.((Animal(x) & HighHumidity(x) & HotTemperature(y)) -> InterferesWithAdaptation(x,y))"]}
{"id": "eqasc_train_3979", "nl": "Skin also helps control temperature, through adjustments of blood flow and evaporation of sweat.", "fol": "", "prediction": ["all x.(Skin(x) -> (HelpsControlTemperature(x) & AdjustsBloodFlow(x) & EvaporatesSweat(x)))"]}
{"id": "eqasc_train_3980", "nl": "Skin helps some animals to adjust to hot temperatures. ", "fol": "", "prediction": ["all x y.((Animal(x) & Skin(y)) -> HelpsAdaptToHotTemperatures(y,x))"]}
{"id": "eqasc_train_3981", "nl": "sweat is used for adjusting to heat by some animals", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> (UsedForAdaptingToHeat(x,y)))"]}
{"id": "eqasc_train_3982", "nl": "Perspiration is produced by sweat glands in the skin and is secreted through pores.", "fol": "", "prediction": ["all x.(Perspiration(x) -> (ProducedBySweatGlands(x) & SecretedThroughPorouses(x)))"]}
{"id": "eqasc_train_3983", "nl": "Perspiration is used for adjusting to hot temperatures by some animals", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> (UsedForAdaptingToHotTemperatures(x,y)))"]}
{"id": "eqasc_train_3984", "nl": "salt and water are used for adjusting to hot temperatures by some animals", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> (UsedForAdaptingToHotTemperatures(x,y) & UsedForAdaptingToHotTemperatures(x,y)))"]}
{"id": "eqasc_train_3985", "nl": "All humans are animals.", "fol": "", "prediction": ["all x.(Human(x) -> Animal(x))"]}
{"id": "eqasc_train_3986", "nl": "sweat is used for adjusting to hot temperatures by humans", "fol": "", "prediction": ["all x y.((Human(x) & Human(y)) -> (UsedForAdaptingToHotTemperatures(x,y)))"]}
{"id": "eqasc_train_3987", "nl": "Many warm-blooded animals control their body temperature by sweating or panting.", "fol": "", "prediction": ["all x.((Animal(x) & WarmBlooded(x)) -> (ControlsBodyTemperature(x) & (Sweeps(x) | Panting(x))))"]}
{"id": "eqasc_train_3988", "nl": "Humans adjust their body temperature by sweating", "fol": "", "prediction": ["all x.(Human(x) -> (AdjustsBodyTemperature(x) & Sweating(x)))"]}
{"id": "eqasc_train_3989", "nl": "Generally the most effective way for animals to keep cool in hot weather is by sweating.", "fol": "", "prediction": ["all x.((Animal(x) & KeepsCoolInHotWeather(x)) -> Sweating(x))"]}
{"id": "eqasc_train_3990", "nl": "sweating is used by animals to cool off", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> SweatingToCoolOff(x,y))"]}
{"id": "eqasc_train_3991", "nl": "Adjusts controls to regulate temperature and humidity of animals' quarters.", "fol": "", "prediction": ["all x y.((Control(x) & Animal(y)) -> AdjustsToRegulateTemperatureAndHumidity(x,y))"]}
{"id": "eqasc_train_3992", "nl": "Sweat is used to adjust controls to regulate temperature.", "fol": "", "prediction": ["all x.(Sweat(x) -> AdjustsControlsToRegulateTemperature(x))"]}
{"id": "eqasc_train_3993", "nl": "the Earth being tilted on its axis causes ones side of the Earth to receive less energy from the Sun than the other side", "fol": "", "prediction": ["all x y z.((Earth(x) & Earth(y) & Earth(z) & TiltedOnAxis(x,y)) -> ReceivesLessEnergyFromSun(x,z))"]}
{"id": "eqasc_train_3994", "nl": "Energy produced by the sun in the form of heat and light is called solar energy.", "fol": "", "prediction": ["all x.((Energy(x) & ProducedBySun(x) & Heat(x) & Light(x)) -> SolarEnergy(x))"]}
{"id": "eqasc_train_3995", "nl": "the Earth being tilted on its axis causes ones side to receive less heat and light  ", "fol": "", "prediction": ["all x y.((Earth(x) & TiltedOnAxis(x,y)) -> (ReceivesLessHeat(x) & LessLight(y)))"]}
{"id": "eqasc_train_3996", "nl": "Energy from the Sun drives Earth's weather system.", "fol": "", "prediction": ["all x y.((Energy(x) & Sun(y)) -> DrivesWeatherSystem(x,y))"]}
{"id": "eqasc_train_3997", "nl": "The Earth being tilted on its axis causes solar energy to drive Earth's weather system.", "fol": "", "prediction": ["all x.(TiltedOnAxis(x) -> CausesSolarEnergyToDriveWeatherSystem(x))"]}
{"id": "eqasc_train_3998", "nl": "Seasons result from variations in the amount of the sun's energy hitting the surface.", "fol": "", "prediction": ["all x.(Season(x) -> VariationsInSunEnergy(x))"]}
{"id": "eqasc_train_3999", "nl": "Seasons are a result of Earth being tilted on its axis", "fol": "", "prediction": ["all x.(Season(x) -> EarthTiltedOnAxis(x))"]}
{"id": "eqasc_train_4000", "nl": "When it is tilted away from the sun, it is winter.", "fol": "", "prediction": ["all x.(TiltedAwayFromSun(x) -> Winter(x))"]}
{"id": "eqasc_train_4001", "nl": "The side of the earth receiving less energy from the sun is experiencing winter", "fol": "", "prediction": ["all x y.((EarthSide(x) & Earth(y) & ReceivesLessEnergyFromSun(x,y)) -> WinterEvent(x))"]}
{"id": "eqasc_train_4002", "nl": "Plants obtain their energy from the sun.", "fol": "", "prediction": ["all x.(Plant(x) -> (ObtainsEnergyFromSun(x)))"]}
{"id": "eqasc_train_4003", "nl": "the Earth being tilted on its axis causes plants to receive less energy", "fol": "", "prediction": ["all x y.((Earth(x) & TiltedOnAxis(x,y)) -> PlantsReceiveLessEnergy(x,y))"]}
{"id": "eqasc_train_4004", "nl": "During winter, the earth in the Northern Hemisphere is tilted away from the sun.", "fol": "", "prediction": ["all x y.((Winter(x) & Earth(y)) -> TiltedAwayFromSun(y,x))"]}
{"id": "eqasc_train_4005", "nl": "Winter is caused from being tilted away from the sun and receiving less energy", "fol": "", "prediction": ["all x.(Winter(x) -> (TiltedAwayFromSun(x) & ReceivesLessEnergy(x)))"]}
{"id": "eqasc_train_4006", "nl": "Seasons are caused by the same reason that one side of the Earth receives less energy from the sun than the other side", "fol": "", "prediction": ["all x y z.((Season(x) & Earth(y) & Earth(z)) -> (ReceivesLessEnergyFromSun(y,z) & ReceivesLessEnergyFromSun(y,z)))"]}
{"id": "eqasc_train_4007", "nl": "Solar energy is power.", "fol": "", "prediction": ["all x.(SolarEnergy(x) -> Power(x))"]}
{"id": "eqasc_train_4008", "nl": "one side of the Earth receives less solar power from the Sun than the other side", "fol": "", "prediction": ["all x y.((EarthSide(x) & EarthSide(y)) -> ReceivesLessSolarPowerFromSun(x,y))"]}
{"id": "eqasc_train_4009", "nl": "Mutations may change the structure of a chromosome or just change a single nucleotide.", "fol": "", "prediction": ["all x.(Mutations(x) -> (ChangesChromosomeStructure(x) | ChangesSingleNucleotide(x)))"]}
{"id": "eqasc_train_4010", "nl": "Nucleotides are the building blocks of DNA .", "fol": "", "prediction": ["all x.(Nucleotide(x) -> BuildingBlockOfDNA(x))"]}
{"id": "eqasc_train_4011", "nl": "mutations may change the structure of the building blocks of DNA.", "fol": "", "prediction": ["all x.(Mutation(x) -> ChangesStructureOfBuildingBlocksOfDNA(x))"]}
{"id": "eqasc_train_4012", "nl": "DNA is made up of nucleotides.", "fol": "", "prediction": ["all x.(DNA(x) -> MadeUpOfNucleotides(x))"]}
{"id": "eqasc_train_4013", "nl": "Mutations change DNA.", "fol": "", "prediction": ["all x.(Mutations(x) -> ChangesDNA(x))"]}
{"id": "eqasc_train_4014", "nl": "SNPs involve polymorphisms at the single nucleotide level.", "fol": "", "prediction": ["all x.(SNP(x) -> InvolvesPolymorphismsAtSingleNucleotideLevel(x))"]}
{"id": "eqasc_train_4015", "nl": "Mutations may change the structure of a chromosome or just cause SNPs.", "fol": "", "prediction": ["all x.(Mutations(x) -> (ChangesStructureOfChromosome(x) | CausesSNPs(x)))"]}
{"id": "eqasc_train_4016", "nl": "Mutagenic chemicals cause mutations.", "fol": "", "prediction": ["all x.(MutagenChemical(x) -> CausesMutation(x))"]}
{"id": "eqasc_train_4017", "nl": "Mutagenic chemicals may change the structure of a nucleotide", "fol": "", "prediction": ["all x y.((MutagenChemical(x) & Nucleotide(y)) -> ChangesStructure(x,y))"]}
{"id": "eqasc_train_4018", "nl": "Mutations can change the structure of DNA. ", "fol": "", "prediction": ["all x.(Mutations(x) -> ChangesDNAStructure(x))"]}
{"id": "eqasc_train_4019", "nl": "Mutations are changes in genetic information.", "fol": "", "prediction": ["all x.(Mutations(x) -> ChangesInGeneticInformation(x))"]}
{"id": "eqasc_train_4020", "nl": "Alterations in genetic information may change the structure of a chromosome or just a single nucleotide.", "fol": "", "prediction": ["all x.(AlterationsInGeneticInformation(x) -> (ChromosomeStructure(x) | SingleNucleotideStructure(x)))"]}
{"id": "eqasc_train_4021", "nl": "Mutations in genes on the Y chromosome have been implicated in male genetic infertility.", "fol": "", "prediction": ["all x.((Genes(x) & MutationsOnYChromosome(x)) -> InvolvedInMaleGeneticInfertility(x))"]}
{"id": "eqasc_train_4022", "nl": "Changes in the structure of the Y chromosome are implicated in male infertility", "fol": "", "prediction": ["all x y.((ChangesInStructureOfYChromosome(x) & MaleInfertility(y)) -> InvolvedInInfertility(x,y))"]}
{"id": "eqasc_train_4023", "nl": "Most mutations are beneficial to the organism.", "fol": "", "prediction": ["all x.(Mutation(x) -> BeneficialToOrganism(x))"]}
{"id": "eqasc_train_4024", "nl": "Changing the structure of a chromosome can be beneficial to the organism.", "fol": "", "prediction": ["all x y.((Chromosome(x) & Organism(y)) -> CanChangeStructure(x,y))"]}
{"id": "eqasc_train_4025", "nl": "Chromosomal abnormalities can be examined by chromosome analysis.", "fol": "", "prediction": ["all x.(ChromomosomalAnomaly(x) -> CanBeExaminedByChromomosomeAnalysis(x))"]}
{"id": "eqasc_train_4026", "nl": "Mutations can be detected by analysis on gene abnormalities.", "fol": "", "prediction": ["all x.(Mutations(x) -> DetectedByAnalysisOnGeneAnomalies(x))"]}
{"id": "eqasc_train_4027", "nl": "Animals can communicate with sounds, chemicals, or visual cues.", "fol": "", "prediction": ["all x.(Animal(x) -> (CommunicatesWithSounds(x) | CommunicatesWithChemicals(x) | CommunicatesWithVisualCues(x)))"]}
{"id": "eqasc_train_4028", "nl": "Pheromones are chemicals produced by animals allowing individuals of a species to communicate.", "fol": "", "prediction": ["all x.(Pheromone(x) -> (ProducedByAnimals(x) & AllowsCommunication(x)))"]}
{"id": "eqasc_train_4029", "nl": "Animals communicate with pheromones", "fol": "", "prediction": ["all x y.((Animal(x) & Pheromone(y)) -> CommunicatesWith(x,y))"]}
{"id": "eqasc_train_4030", "nl": "cats can communicate with sounds, chemicals or visual cues", "fol": "", "prediction": ["all x.(Cat(x) -> (CommunicatesWithSounds(x) | CommunicatesWithChemicals(x) | CommunicatesWithVisualCues(x)))"]}
{"id": "eqasc_train_4031", "nl": "Communication requires an idea, a message to share.", "fol": "", "prediction": ["all x.(Communication(x) -> (RequiresIdea(x) & RequiresMessage(x)))"]}
{"id": "eqasc_train_4032", "nl": "animals share ideas with sounds, chemicals or visual cues", "fol": "", "prediction": ["all x.(Animal(x) -> (SharesSounds(x) | SharesChemicals(x) | SharesVisualCues(x)))"]}
{"id": "eqasc_train_4033", "nl": "Communication is the exchange of information, ideas and emotions.", "fol": "", "prediction": ["all x.(Communication(x) -> (ExchangeOfInformation(x) & ExchangeOfIdeas(x) & ExchangeOfEmotions(x)))"]}
{"id": "eqasc_train_4034", "nl": "Animals exchange information with sounds, chemicals or visual cues", "fol": "", "prediction": ["all x.(Animal(x) -> (ExchangesInformationWithSounds(x) | ExchangesInformationWithChemicals(x) | ExchangesInformationWithVisualCues(x)))"]}
{"id": "eqasc_train_4035", "nl": "Bats and owls are nocturnal animals.", "fol": "", "prediction": ["all x.((Bat(x) | Owl(x)) -> NocturnalAnimal(x))"]}
{"id": "eqasc_train_4036", "nl": "bats can communicate with sounds", "fol": "", "prediction": ["all x.(Bat(x) -> CommunicatesWithSounds(x))"]}
{"id": "eqasc_train_4037", "nl": "Animals can communicate with visual cues, chemicals, or something that is a wave", "fol": "", "prediction": ["all x.(Animal(x) -> (CommunicatesWithVisualCues(x) | CommunicatesWithChemicals(x) | CommunicatesWithWaves(x)))"]}
{"id": "eqasc_train_4038", "nl": "Unlike animal communication, properly human communication is abstract and linguistic in nature.", "fol": "", "prediction": ["all x.((AnimalCommunication(x) & ProperlyHumanCommunication(x)) -> (Abstract(x) & Linguistic(x)))"]}
{"id": "eqasc_train_4039", "nl": "humans communicate linguistically", "fol": "", "prediction": ["all x.(Human(x) -> CommunicatesLinguistically(x))"]}
{"id": "eqasc_train_4040", "nl": "cows can communicate with sounds, chemicals or visual cues", "fol": "", "prediction": ["all x.(Cow(x) -> (CommunicatesWithSounds(x) | CommunicatesWithChemicals(x) | CommunicatesWithVisualCues(x)))"]}
{"id": "eqasc_train_4041", "nl": "Monkeys are wild animals.", "fol": "", "prediction": ["all x.(Monkey(x) -> WildAnimal(x))"]}
{"id": "eqasc_train_4042", "nl": "Monkeys communicate with sounds, chemicals or visual cues.", "fol": "", "prediction": ["all x.(Monkey(x) -> (CommunicatesWithSounds(x) | CommunicatesWithChemicals(x) | CommunicatesWithVisualCues(x)))"]}
{"id": "eqasc_train_4043", "nl": "CAT Cats are animals and are great pets.", "fol": "", "prediction": ["all x.(CatCat(x) -> (Animal(x) & GreatPet(x)))"]}
{"id": "eqasc_train_4044", "nl": "cats can communicate with sounds, chemicals, or visual cues", "fol": "", "prediction": ["all x.(Cat(x) -> (CommunicatesWithSounds(x) | CommunicatesWithChemicals(x) | CommunicatesWithVisualCues(x)))"]}
{"id": "eqasc_train_4045", "nl": "cows can communicate with sounds, chemicals, or visual cues", "fol": "", "prediction": ["all x.(Cow(x) -> (CommunicatesWithSounds(x) | CommunicatesWithChemicals(x) | CommunicatesWithVisualCues(x)))"]}
{"id": "eqasc_train_4046", "nl": "Humans do not communicate with chemicals. ", "fol": "", "prediction": ["all x.(Human(x) -> -CommunicatesWithChemicals(x))"]}
{"id": "eqasc_train_4047", "nl": "sand dunes are formed by the wind transporting and depositing sand", "fol": "", "prediction": ["all x.(SandDune(x) -> (FormedByWindTransportingAndDepositingSand(x) & FormedByWind(x)))"]}
{"id": "eqasc_train_4048", "nl": "Sand also moves via storms and wind.", "fol": "", "prediction": ["all x.(Sand(x) -> (MovesThroughStorms(x) & MovesThroughWind(x)))"]}
{"id": "eqasc_train_4049", "nl": "sand dunes are formed by storms transporting and depositing sand", "fol": "", "prediction": ["all x y.((SandDune(x) & Storm(y)) -> (FormedBy(x,y) & TransportsAndDepositsSand(x)))"]}
{"id": "eqasc_train_4050", "nl": "Desert Dunes Desert sand dunes occur in an amazing diversity of forms.", "fol": "", "prediction": ["all x.(DesertDunes(x) -> AmazingDiversityOfForms(x))"]}
{"id": "eqasc_train_4051", "nl": "deserts are a location where wind transport can deposit sand", "fol": "", "prediction": ["all x.(Desert(x) -> (Location(x) & WindTransport(x) & DepositsSand(x)))"]}
{"id": "eqasc_train_4052", "nl": "Aeolian erosion of sand in the desert is partially responsible for the formation of sand dunes.", "fol": "", "prediction": ["all x y.((AeolianErosion(x) & Sand(y) & Desert(z)) -> PartiallyResponsibleForSandDunes(x,y,z))"]}
{"id": "eqasc_train_4053", "nl": "Wind and erosion create formations in the desert.", "fol": "", "prediction": ["all x y.((Wind(x) & Erosion(y)) -> CreatesFormationsInDesert(x,y))"]}
{"id": "eqasc_train_4054", "nl": "Wind erosion is the movement and deposition of soil particles by wind.", "fol": "", "prediction": ["all x.(WindErosion(x) -> (Movement(x) & Deposition(x) & SoilParticles(x) & Wind(x)))"]}
{"id": "eqasc_train_4055", "nl": "sand dunes are formed by wind erosion", "fol": "", "prediction": ["all x.(SandDune(x) -> (FormedByWindErosion(x) & FormedByWindErosion(x)))"]}
{"id": "eqasc_train_4056", "nl": "Winds are caused by pressure differences.", "fol": "", "prediction": ["all x.(Wind(x) -> CausedByPressureDifferences(x))"]}
{"id": "eqasc_train_4057", "nl": "sand dunes can be formed by pressure differences.", "fol": "", "prediction": ["all x.(SandDune(x) -> FormedByPressureDifferences(x))"]}
{"id": "eqasc_train_4058", "nl": "Sand dunes provide a habitat for several rare plant species.", "fol": "", "prediction": ["all x.(SandDune(x) -> ProvidesHabitatForRarePlantSpecies(x))"]}
{"id": "eqasc_train_4059", "nl": "A habitat for several rare plant species is formed by the wind transporting and depositing sand.", "fol": "", "prediction": ["all x y.((Habitat(x) & RarePlantSpecies(y)) -> (FormedByWind(x,y) & TransportsAndDepositsSand(x)))"]}
{"id": "eqasc_train_4060", "nl": "Dune grass is very important to the preservation of sand dunes.", "fol": "", "prediction": ["all x.(DuneGrass(x) -> VeryImportantToSandDunePreservation(x))"]}
{"id": "eqasc_train_4061", "nl": "dune grass prevents erosion", "fol": "", "prediction": ["all x.(DuneGrass(x) -> PreventsErosion(x))"]}
{"id": "eqasc_train_4062", "nl": "Vegetation stabilizes the sand, preventing the wind from forming dunes.", "fol": "", "prediction": ["all x y.((Vegetation(x) & Sand(y)) -> Stabilizes(x,y))"]}
{"id": "eqasc_train_4063", "nl": "The more vegetation in the sand, the less likely sand dunes will form?", "fol": "", "prediction": ["all x.((Vegetation(x) & Sand(x)) -> LessLikelySandDunes(x))"]}
{"id": "eqasc_train_4064", "nl": "being burried under soil and mud changes peat into coal through extreme heat and pressure in a swamp over a long period of time", "fol": "", "prediction": ["all x y z.((BurriedUnderSoilAndMud(x) & Peat(y) & Coal(z) & ExtremeHeatAndPressure(x) & Swamp(y) & LongPeriodOfTime(y)) -> ChangesIntoCoal(x,y,z))"]}
{"id": "eqasc_train_4065", "nl": "Well, a swamp is a type of wetland.", "fol": "", "prediction": ["all x.(Swamp(x) -> Wetland(x))"]}
{"id": "eqasc_train_4066", "nl": "being buried under soil and mud changes peat into coal through extreme heat and pressure in a wetland over a long period of time", "fol": "", "prediction": ["all x y z.((BurnedUnderSoilAndMud(x) & Peat(y) & Coal(z) & ExtremeHeatAndPressure(x) & Wetland(x) & LongPeriodOfTime(x)) -> ChangesIntoCoal(y,z))"]}
{"id": "eqasc_train_4067", "nl": "Most coal is fossil peat.", "fol": "", "prediction": ["all x.(Coal(x) -> FossilPeat(x))"]}
{"id": "eqasc_train_4068", "nl": "fossils turn into coal over time", "fol": "", "prediction": ["all x.((Fossil(x) & TurnsIntoCoal(x)) -> OverTime(x))"]}
{"id": "eqasc_train_4069", "nl": "Marble is used for sculptures, and coal is used for fuel and energy like light.", "fol": "", "prediction": ["(all x.(Marble(x) -> UsedForSculptures(x)) & all y.(Coal(y) -> UsedForFuelAndEnergy(y)))"]}
{"id": "eqasc_train_4070", "nl": "being buried under mud and soil changes peat into fuel", "fol": "", "prediction": ["all x y.((BurnedUnderMud(x) & Soil(y)) -> (ChangesPatIntoFuel(x) & BuriedUnderMud(x) & ChangesSoilIntoFuel(y)))"]}
{"id": "eqasc_train_4071", "nl": "being buried under soil and mud changes peat into coal in wetlands over time", "fol": "", "prediction": ["all x y.((Wetland(x) & BuriedUnderSoil(x) & BuriedUnderMud(x)) -> (ChangesPeatIntoCoal(y) & InWetland(x,y)))"]}
{"id": "eqasc_train_4072", "nl": "Peat moss is the organic matter that mixes with soil to form peat.", "fol": "", "prediction": ["all x.(PeatMoss(x) -> (OrganicMatter(x) & MixesWithSoil(x) & FormsPeat(x)))"]}
{"id": "eqasc_train_4073", "nl": "Organic matter being buried under mud changes peat into coal.", "fol": "", "prediction": ["all x y.((OrganicMatter(x) & BuriedUnderMush(x)) -> ChangesPeatIntoCoal(y))"]}
{"id": "eqasc_train_4074", "nl": "Dead plants provide peat moss.", "fol": "", "prediction": ["all x.(DeadPlant(x) -> ProvidesPeatMoss(x))"]}
{"id": "eqasc_train_4075", "nl": "being buried under soil and mud changes plants into coal", "fol": "", "prediction": ["all x y.((Plant(x) & BuriedUnderSoil(x) & BuriedUnderMod(x)) -> ChangesIntoCoal(x,y))"]}
{"id": "eqasc_train_4076", "nl": "Vegetation is compressed into coal over long periods of time.", "fol": "", "prediction": ["all x.((Vegetation(x) & CompressedIntoCoal(x)) -> LongPeriodsOfTime(x))"]}
{"id": "eqasc_train_4077", "nl": "Alligators live in the swamps.", "fol": "", "prediction": ["all x.(Alligator(x) -> LivesInSwamps(x))"]}
{"id": "eqasc_train_4078", "nl": "Alligators turn into coal after being buried.", "fol": "", "prediction": ["all x.(Alligator(x) -> TurnsIntoCoal(x))"]}
{"id": "eqasc_train_4079", "nl": "Fens form non-acidic peat.", "fol": "", "prediction": ["all x.(Fen(x) -> FormsNonAcidPeat(x))"]}
{"id": "eqasc_train_4080", "nl": "being burried under soil and mud changes how fens form", "fol": "", "prediction": ["all x y.((Fen(x) & BurriedUnderSoil(x) & BurriedUnderMod(x)) -> ChangesFenFormation(y))"]}
{"id": "eqasc_train_4081", "nl": "being buried under soil and mud changes peat into coal through extreme heat and pressure in wetlands", "fol": "", "prediction": ["all x y z.((BurnedUnderSoilAndMud(x) & Peat(y) & Coal(z) & ExtremeHeatAndPressure(x)) -> ChangesIntoCoal(y,z))"]}
{"id": "eqasc_train_4082", "nl": "plant reproduction requires pollination", "fol": "", "prediction": ["all x.(PlantReproduction(x) -> RequiresPollination(x))"]}
{"id": "eqasc_train_4083", "nl": "pollination requires wind ", "fol": "", "prediction": ["all x.(Pollination(x) -> RequiresWind(x))"]}
{"id": "eqasc_train_4084", "nl": "Insects and hummingbirds are the primary pollinators.", "fol": "", "prediction": ["all x.((Insect(x) | Hummingbird(x)) -> PrimaryPollinators(x))"]}
{"id": "eqasc_train_4085", "nl": "Plant reproduction requires insects and hummingbirds.", "fol": "", "prediction": ["all x.(PlantReproduction(x) -> (RequiresInsects(x) & RequiresHummingbirds(x)))"]}
{"id": "eqasc_train_4086", "nl": "Cranberry flowers require bee visitation for pollination.", "fol": "", "prediction": ["all x.(CroaberryFlower(x) -> RequiresBeeVisitationForPollination(x))"]}
{"id": "eqasc_train_4087", "nl": "Cranberry reproduction requires bee visitation", "fol": "", "prediction": ["all x.(CranberryReproduction(x) -> RequiresBeeVisitation(x))"]}
{"id": "eqasc_train_4088", "nl": "Many plants are pollinated by bees.", "fol": "", "prediction": ["all x.(Plant(x) -> PollinatedByBees(x))"]}
{"id": "eqasc_train_4089", "nl": "Bees aid in reproduction for many plants", "fol": "", "prediction": ["all x y.((Bee(x) & Plant(y)) -> AidsReproduction(x,y))"]}
{"id": "eqasc_train_4090", "nl": "Perennial types are planted outside in spring.", "fol": "", "prediction": ["all x.(Perennial(x) -> PlantedOutsideInSpring(x))"]}
{"id": "eqasc_train_4091", "nl": "perennial reproduction requires pollination", "fol": "", "prediction": ["all x.(PerennialReproduction(x) -> RequiresPollination(x))"]}
{"id": "eqasc_train_4092", "nl": "Pollination is usually accomplished by bees.", "fol": "", "prediction": ["all x.(Pollination(x) -> (AccompaniedByBees(x)))"]}
{"id": "eqasc_train_4093", "nl": "Bees are useful for plant reproduction", "fol": "", "prediction": ["all x.(Bee(x) -> (UsefulForPlantReproduction(x) & PlantReproduction(x)))"]}
{"id": "eqasc_train_4094", "nl": "Bees are essential for crop pollination.", "fol": "", "prediction": ["all x.(Bee(x) -> EssentialForCropPollination(x))"]}
{"id": "eqasc_train_4095", "nl": "Bees are essential for crop reproduction", "fol": "", "prediction": ["all x.(Bee(x) -> EssentialForCropReproduction(x))"]}
{"id": "eqasc_train_4096", "nl": "Many plants rely on bats to spread their seeds and to pollinate flowers.", "fol": "", "prediction": ["all x y.((Plant(x) & Bat(y)) -> (ReliesOn(x,y) & SpreadsSeeds(x) & PollinatesFlowers(x)))"]}
{"id": "eqasc_train_4097", "nl": "plant reproduction requires bats to spread their seeds", "fol": "", "prediction": ["all x y.((PlantReproduction(x) & Bat(y)) -> RequiresSpreadSeeds(y,x))"]}
{"id": "eqasc_train_4098", "nl": "orchid reproduction requires pollination", "fol": "", "prediction": ["all x.(OrchidReproduction(x) -> RequiresPollination(x))"]}
{"id": "eqasc_train_4099", "nl": "Bees are necessary for pollination.", "fol": "", "prediction": ["all x.(Bee(x) -> PollinationNecessaryFor(x,y))"]}
{"id": "eqasc_train_4100", "nl": "plant reproduction requires bees", "fol": "", "prediction": ["all x.(PlantReproduction(x) -> RequiresBees(x))"]}
{"id": "eqasc_train_4101", "nl": "Honey bees provide honey and pollinate crops.", "fol": "", "prediction": ["all x.(HoneyBee(x) -> (ProvidesHoney(x) & PollinatesCrops(x)))"]}
{"id": "eqasc_train_4102", "nl": "Pollination is an intricate series of events which ultimately results in plant reproduction.", "fol": "", "prediction": ["all x.(Pollination(x) -> (IntricateSeriesOfEvents(x) & EndsInPlantReproduction(x)))"]}
{"id": "eqasc_train_4103", "nl": "Pollination is an intricate series of events leads to plant propagation", "fol": "", "prediction": ["all x y.((Pollination(x) & Plant(y)) -> IntricateSeriesOfEventsLeadsToPropagation(x,y))"]}
{"id": "eqasc_train_4104", "nl": "An insect visitor is required for pollination and they have a mixed mating system.", "fol": "", "prediction": ["all x.(InsectVisitor(x) -> (RequiredForPollination(x) & MixedMatingSystem(x)))"]}
{"id": "eqasc_train_4105", "nl": "plant reproduction requires An insect ", "fol": "", "prediction": ["all x.(PlantReproduction(x) -> RequiresInsect(x))"]}
{"id": "eqasc_train_4106", "nl": "Insects are the natural pollinators.", "fol": "", "prediction": ["all x.(Insect(x) -> NaturalPollinators(x))"]}
{"id": "eqasc_train_4107", "nl": "Plant reproduction requires Insects ", "fol": "", "prediction": ["all x.(PlantReproductionRequiresInsects(x) -> RequiresInsects(x))"]}
{"id": "eqasc_train_4108", "nl": "Pollination is by flies, wasps, and bees.", "fol": "", "prediction": ["all x.(Pollination(x) -> (Flies(x) | Wasps(x) | Bees(x)))"]}
{"id": "eqasc_train_4109", "nl": "plant reproduction requires something done by wasps", "fol": "", "prediction": ["all x y.((PlantReproduction(x) & Wasp(y)) -> Requires(x,y))"]}
{"id": "eqasc_train_4110", "nl": "Insects pollinate plants.", "fol": "", "prediction": ["all x.(Insect(x) -> PollinatesPlants(x))"]}
{"id": "eqasc_train_4111", "nl": "insects help plants reproduce", "fol": "", "prediction": ["all x y.((Insect(x) & Plant(y)) -> HelpsReproduce(x,y))"]}
{"id": "eqasc_train_4112", "nl": "Angiosperm reproduction requires pollination.", "fol": "", "prediction": ["all x.(AngiospermReproduction(x) -> RequiresPollination(x))"]}
{"id": "eqasc_train_4113", "nl": "burning wood is used to produce heat", "fol": "", "prediction": ["all x y.((BoilingWood(x) & Heat(y)) -> Produces(x,y))"]}
{"id": "eqasc_train_4114", "nl": "Air pollution is created by burning.", "fol": "", "prediction": ["all x.(AirPollution(x) -> CreatedByBurning(x))"]}
{"id": "eqasc_train_4115", "nl": "Producing heat causes air pollution.", "fol": "", "prediction": ["all x.(ProducesHeat(x) -> CausesAirPollution(x))"]}
{"id": "eqasc_train_4116", "nl": "Birch trees are deciduous and the wood burns hot and fast, as if soaked with oil or kerosene.", "fol": "", "prediction": ["all x.(BirchTree(x) -> (Deciduous(x) & BurnsHot(x) & BurnsFast(x) & SoapedWithOilOrKerosene(x)))"]}
{"id": "eqasc_train_4117", "nl": "birch trees are wood used to produce heat.", "fol": "", "prediction": ["all x.(BerchTree(x) -> WoodUsedToProduceHeat(x))"]}
{"id": "eqasc_train_4118", "nl": "Interior woods are birch, spruce and pine.", "fol": "", "prediction": ["all x.(InteriorWood(x) -> (Berry(x) | Spruce(x) | Pine(x)))"]}
{"id": "eqasc_train_4119", "nl": "burning spruce is used to produce heat", "fol": "", "prediction": ["all x y.((BoilingSpruce(x) & Pruce(y)) -> ProducesHeat(x,y))"]}
{"id": "eqasc_train_4120", "nl": "Food is cooked by the steam and heat.", "fol": "", "prediction": ["all x.(Food(x) -> (CookedBySteam(x) & CookedByHeat(x)))"]}
{"id": "eqasc_train_4121", "nl": "burning wood is used to cook food", "fol": "", "prediction": ["all x y.((BoilingWood(x) & Food(y)) -> Cooks(x,y))"]}
{"id": "eqasc_train_4122", "nl": "Wood has to be cut to be used in a wood-burning stove.", "fol": "", "prediction": ["all x.((Wood(x) & WoodBurningStove(x)) -> Cut(x))"]}
{"id": "eqasc_train_4123", "nl": "wood has to be cut to be used in a stove", "fol": "", "prediction": ["all x y.((Wood(x) & Stove(y)) -> HasToBeCutToBeUsedIn(x,y))"]}
{"id": "eqasc_train_4124", "nl": "Burning wood produces kinetic energy", "fol": "", "prediction": ["all x y.((BurningWood(x) & KineticEnergy(y)) -> Produces(x,y))"]}
{"id": "eqasc_train_4125", "nl": "burning wood is used to produce kinetic energy.", "fol": "", "prediction": ["all x.(BoilingWood(x) -> ProducesKineticEnergy(x))"]}
{"id": "eqasc_train_4126", "nl": "wood can be burned for cooking", "fol": "", "prediction": ["all x.((Wood(x) & BurnedForCooking(x)) -> Cooking(x))"]}
{"id": "eqasc_train_4127", "nl": "Heating and air conditioning keep the building comfortable regardless of the temperature outside.", "fol": "", "prediction": ["all x y.((Hotter(x) & AirConditioning(y)) -> KeepsBuildingComfortable(x,y))"]}
{"id": "eqasc_train_4128", "nl": "burning wood is used to keep buildings comfortable", "fol": "", "prediction": ["all x y.((BurningWood(x) & Building(y)) -> UsedToKeepComfortable(x,y))"]}
{"id": "eqasc_train_4129", "nl": "Heat is added and the temperature of the water increases.", "fol": "", "prediction": ["all x y.((Heat(x) & Water(y)) -> (Addition(x,Heat) & Increase(y,Temperature)))"]}
{"id": "eqasc_train_4130", "nl": "burning wood is used to increase temperature", "fol": "", "prediction": ["all x y.((BoilingWood(x) & Temperature(y)) -> IncreasesTemperature(x,y))"]}
{"id": "eqasc_train_4131", "nl": "Combustion-related, motor vehicles, wood burning, open burning, industrial processes.", "fol": "", "prediction": ["all x.((CombustionRelated(x) & MotorVehicles(x) & WoodBurning(x) & OpenBurning(x) & IndustrialProcesses(x)) -> CombustionRelated(x))"]}
{"id": "eqasc_train_4132", "nl": "Combustion is used to produce heat", "fol": "", "prediction": ["all x y.((Combustion(x) & Heat(y)) -> Produces(x,y))"]}
{"id": "eqasc_train_4133", "nl": "All wood is either pine or oak.", "fol": "", "prediction": ["all x.(Wood(x) -> (Pine(x) | Oak(x)))"]}
{"id": "eqasc_train_4134", "nl": "burning oak is used to produce heat", "fol": "", "prediction": ["all x y.((BoilingOak(x) & Heat(y)) -> Produces(x,y))"]}
{"id": "eqasc_train_4135", "nl": "a pan is used for cooking food by heating food in it on a stove", "fol": "", "prediction": ["all x y.((Pan(x) & Stove(y)) -> UsedForCookingFood(x,y))"]}
{"id": "eqasc_train_4136", "nl": "Many of foods that humans eat are cooked, recooked, and then warmed up.", "fol": "", "prediction": ["all x.((Food(x) & HumanEats(x)) -> (Cooked(x) & Recooked(x) & WarmedUp(x)))"]}
{"id": "eqasc_train_4137", "nl": "Humans may use a pan to cook on a stove to eat.", "fol": "", "prediction": ["all x y.((Human(x) & Pan(y)) -> (Uses(x,y) & CooksOnStove(x) & Eats(x)))"]}
{"id": "eqasc_train_4138", "nl": "Most bacteria are destroyed by heat.", "fol": "", "prediction": ["all x.(Bacteria(x) -> DissectedByHeat(x))"]}
{"id": "eqasc_train_4139", "nl": "A pan is used for destroying bacteria by cooking food.", "fol": "", "prediction": ["all x.(Pan(x) -> (DisruptsBacteria(x) & CooksFood(x)))"]}
{"id": "eqasc_train_4140", "nl": "An egg is being cooked if it is in the frying pan.", "fol": "", "prediction": ["all x.((Egg(x) & InFryingPan(x)) -> Cooked(x))"]}
{"id": "eqasc_train_4141", "nl": "Eggs can be cooked on a stove", "fol": "", "prediction": ["all x.(Egg(x) -> CanBeCookedOnStove(x))"]}
{"id": "eqasc_train_4142", "nl": "Pan sauces are made from the pan juices of cooked meats or fish.", "fol": "", "prediction": ["all x.(PanSauce(x) -> (MadeFromPanJuices(x) & (CookedMeat(x) | CookedFish(x))))"]}
{"id": "eqasc_train_4143", "nl": "cooking of meats and fish can be done on the stove", "fol": "", "prediction": ["all x y.((Stove(x) & CooksMeats(x) & CooksFish(x)) -> (OnStove(y) & CooksMeats(y) & CooksFish(y)))"]}
{"id": "eqasc_train_4144", "nl": "Also, microwave ovens produce much less heat than stoves for cooking.", "fol": "", "prediction": ["all x y.((MicrowaveOven(x) & Stove(y)) -> ProducesLittleHeat(x,y))"]}
{"id": "eqasc_train_4145", "nl": "food is cooked in a microwave with less heat", "fol": "", "prediction": ["all x y.((Food(x) & Microwave(y) & LessHeat(x,y)) -> CookedIn(x,y))"]}
{"id": "eqasc_train_4146", "nl": "An oven, stove, and microwave are available to keep food warm or to heat it up.", "fol": "", "prediction": ["all x.((Oven(x) | Stove(x) | Microwave(x)) -> (KeepsFoodWarm(x) | HeatsFoodUp(x)))"]}
{"id": "eqasc_train_4147", "nl": "A pan is used to keep food warm or to heat it up.", "fol": "", "prediction": ["all x.(Pan(x) -> (KeepsFoodWarm(x) | HeatsFoodUp(x)))"]}
{"id": "eqasc_train_4148", "nl": "Heat pan, add cooking oil to pan.", "fol": "", "prediction": ["all x y.((Pan(x) & Heat(x,y)) -> AddsCookingOil(x,y))"]}
{"id": "eqasc_train_4149", "nl": "cooking oil heats food", "fol": "", "prediction": ["all x y.((CookingOil(x) & Food(y)) -> HeatsFood(x,y))"]}
{"id": "eqasc_train_4150", "nl": "Wood is being burned in fireplaces, stoves and insert stoves.", "fol": "", "prediction": ["all x.(Wood(x) -> (BurnedIn(x,Fireplaces) | BurnedIn(x,Stoves) | BurnedIn(x,InsertStoves)))"]}
{"id": "eqasc_train_4151", "nl": "Wood is burned for cooking food", "fol": "", "prediction": ["all x y.((Wood(x) & Food(y)) -> BurnedForCooking(x,y))"]}
{"id": "eqasc_train_4152", "nl": "Food, like chicken and potatoes are recommended.", "fol": "", "prediction": ["all x.((Food(x) & (Chicken(x) | Potatoes(x))) -> Recommended(x))"]}
{"id": "eqasc_train_4153", "nl": "Chicken and potatoes can be cooked in a pan on the stove", "fol": "", "prediction": ["all x y.((Chicken(x) & Potato(y)) -> (CookedInPan(x,y) & CookedInStove(x,y)))"]}
{"id": "eqasc_train_4154", "nl": "And because it's made entirely of metal, each pan can be used in the oven and under the broiler.", "fol": "", "prediction": ["all x.((Pan(x) & MadeOfMetal(x)) -> (UsedInOven(x) | UsedUnderBroiler(x)))"]}
{"id": "eqasc_train_4155", "nl": "metal is used for cooking food", "fol": "", "prediction": ["all x.(Metal(x) -> UsedForCookingFood(x))"]}
{"id": "eqasc_train_4156", "nl": "Fire puts off heat.", "fol": "", "prediction": ["all x.(Fire(x) -> PutsOffHeat(x))"]}
{"id": "eqasc_train_4157", "nl": "a pan is used for cooking food by putting it over fire", "fol": "", "prediction": ["all x y.((Pan(x) & Food(y) & PutsOverFire(x,y)) -> Cooks(x,y))"]}
{"id": "eqasc_train_4158", "nl": "Cooked foods are easier to digest.", "fol": "", "prediction": ["all x.(CookedFood(x) -> EasierToDigest(x))"]}
{"id": "eqasc_train_4159", "nl": "a pan is used on a stove to make food easier to digest", "fol": "", "prediction": ["all x y.((Pan(x) & Stove(y)) -> UsedOnToMakeFoodEasierToDigest(x,y))"]}
{"id": "eqasc_train_4160", "nl": "Stoves Stoves can be a source of many accidents in the kitchen.", "fol": "", "prediction": ["all x.(Stove(x) -> (SourceOfManyAccidents(x) & InKitchen(x)))"]}
{"id": "eqasc_train_4161", "nl": "A pan is used for cooking food by heating food in it on a source of many accidents in the kitchen.", "fol": "", "prediction": ["all x.(Pan(x) -> (CooksFood(x) & HeatsFoodInPan(x) & ManyAccidentsInKitchen(x)))"]}
{"id": "eqasc_train_4162", "nl": "Healthful Meals Eat a grain food at every meal .", "fol": "", "prediction": ["all x.(HealthfulMeal(x) -> EatsGrainFood(x))"]}
{"id": "eqasc_train_4163", "nl": "a pan is used for cooking meals by heating them on the stove.", "fol": "", "prediction": ["all x.(Pan(x) -> (CookingMeals(x) & HeatingOnStove(x)))"]}
{"id": "eqasc_train_4164", "nl": "a gasoline lawn mower converts gasoline into motion", "fol": "", "prediction": ["all x.(GasolineLawnMower(x) -> ConvertsGasolineToMotion(x))"]}
{"id": "eqasc_train_4165", "nl": "Gasoline lawn mowers can be as bad as cars when it comes to emissions.", "fol": "", "prediction": ["all x y.((GasolineLawnMower(x) & Car(y)) -> BadEmissions(x,y))"]}
{"id": "eqasc_train_4166", "nl": "Gasoline mowers convert gasoline into something as bad as cars when it comes to emissions.", "fol": "", "prediction": ["all x y.((GasolineMower(x) & Gasoline(y)) -> (Converts(x,y) & BadAsCars(x)))"]}
{"id": "eqasc_train_4167", "nl": "Small engines, such as in lawn mowers, pollute at a high rate.", "fol": "", "prediction": ["all x.((SmallEngine(x) & (Landscaping(x) | LawnMower(x))) -> PollutesAtHighRate(x))"]}
{"id": "eqasc_train_4168", "nl": "converting gasoline into motion cause pollution", "fol": "", "prediction": ["all x.((ConvertsGasoline(x) & Motion(x)) -> CausesPollution(x))"]}
{"id": "eqasc_train_4169", "nl": "Oil and gasoline are fossil fuels.", "fol": "", "prediction": ["all x.((Oil(x) | Gasoline(x)) -> FossilFuel(x))"]}
{"id": "eqasc_train_4170", "nl": "lawn mowers convert fossil fuels into motion", "fol": "", "prediction": ["all x y.((LawnMower(x) & FossilFuels(y)) -> ConvertsToMotion(x,y))"]}
{"id": "eqasc_train_4171", "nl": "Diesel and gasoline are chemicals.", "fol": "", "prediction": ["all x.((Diesel(x) | Gasoline(x)) -> Chemical(x))"]}
{"id": "eqasc_train_4172", "nl": "a lawn mower converts chemicals into motion", "fol": "", "prediction": ["all x y.((LawnMower(x) & Chemicals(y)) -> ConvertsToMotion(x,y))"]}
{"id": "eqasc_train_4173", "nl": "Machines mow down forests much as a lawn mower cuts grass.", "fol": "", "prediction": ["all x y.((Machine(x) & LawnMower(y)) -> (MowsDesertsForests(x) & CutsGrass(y)))"]}
{"id": "eqasc_train_4174", "nl": "Gasoline can be converted into cut grass by machines", "fol": "", "prediction": ["all x y.((Gasoline(x) & Machine(y)) -> ConvertedToGrass(x,y))"]}
{"id": "eqasc_train_4175", "nl": "Blenders, mixers, lawn mowers convert that same electrical energy into mechanical motion.", "fol": "", "prediction": ["all x y.((Blender(x) | Mixer(x) | LawnMower(x)) -> ConvertsElectricalEnergyToMechanicalMotion(x))"]}
{"id": "eqasc_train_4176", "nl": "A gasoline lawn mower uses gasoline to get mechanical motion.", "fol": "", "prediction": ["all x.(GasolineLawnMower(x) -> UsesGasolineToGetMechanicalMotion(x))"]}
{"id": "eqasc_train_4177", "nl": "Gasoline is a motor fuel only.", "fol": "", "prediction": ["all x.(Gasoline(x) -> MotorFuel(x))"]}
{"id": "eqasc_train_4178", "nl": "lawn mowers use motors", "fol": "", "prediction": ["all x.(LawnMower(x) -> UsesMotor(x))"]}
{"id": "eqasc_train_4179", "nl": "lawn mowers can convert fossil fuels into motion", "fol": "", "prediction": ["all x.(LawnMower(x) -> (ConvertsFossilFuels(x) & Motion(x)))"]}
{"id": "eqasc_train_4180", "nl": "Most mowers are powered by gasoline-driven combustion engines.", "fol": "", "prediction": ["all x.(Mower(x) -> (PoweredByGasolineDrivenCombustionEngine(x)))"]}
{"id": "eqasc_train_4181", "nl": "A gasoline driven combustion engine converts gasoline into motion.", "fol": "", "prediction": ["all x.(GasolineDrivenCombustionEngine(x) -> ConvertsGasolineToMotion(x))"]}
{"id": "eqasc_train_4182", "nl": "Movement is thought in motion.", "fol": "", "prediction": ["all x.(Movement(x) -> ThoughtInMotion(x))"]}
{"id": "eqasc_train_4183", "nl": "a gasoline lawn mower converts gasoline into movement", "fol": "", "prediction": ["all x.(GasolineLawnMower(x) -> ConvertsGasolineToMovement(x))"]}
{"id": "eqasc_train_4184", "nl": "Gasoline mowers can have as much emission as a car", "fol": "", "prediction": ["all x y.((GasolineMower(x) & Car(y)) -> HasAsMoreEmission(x,y))"]}
{"id": "eqasc_train_4185", "nl": "Range of motion is the natural distance and direction of movement of a joint.", "fol": "", "prediction": ["all x.(RangeOfMotion(x) -> (NaturalDistance(x) & NaturalDirectionOfMovement(x)))"]}
{"id": "eqasc_train_4186", "nl": "A gasoline lawn mower converts gasoline into movement.", "fol": "", "prediction": ["all x.(GasolineLawnMower(x) -> ConvertsGasolineToMovement(x))"]}
{"id": "eqasc_train_4187", "nl": "a lawn mower converts hydrocarbons into motion ", "fol": "", "prediction": ["all x y.((LawnMower(x) & Hydrocarbons(y)) -> ConvertsToMotion(x,y))"]}
{"id": "eqasc_train_4188", "nl": "Motion, Move, Movement refer to change of position in space.", "fol": "", "prediction": ["all x.(Motion(x) | Move(x) | Movement(x))"]}
{"id": "eqasc_train_4189", "nl": "a gasoline lawn mower converts gasoline into a change of position in space", "fol": "", "prediction": ["all x y.((GasolineLawnMower(x) & Gasoline(y)) -> ConvertsToChangeOfPosition(x,y))"]}
{"id": "eqasc_train_4190", "nl": "Animals are a kingdom of multicellular eukaryotes.", "fol": "", "prediction": ["all x.(Animal(x) -> KingdomOfMulticellularEukaryotes(x))"]}
{"id": "eqasc_train_4191", "nl": "Humans, of course, are an example of a multicellular eukaryote.", "fol": "", "prediction": ["all x.(Human(x) -> MulticellularEukaryote(x))"]}
{"id": "eqasc_train_4192", "nl": "Humans are, of course, in the animal kingdom.", "fol": "", "prediction": ["all x.(Human(x) -> AnimalKingdom(x))"]}
{"id": "eqasc_train_4193", "nl": "Most eukaryotes reproduce sexually.", "fol": "", "prediction": ["all x.(Eukaryote(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_4194", "nl": "most animals reproduce sexually", "fol": "", "prediction": ["all x.(Animal(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_4195", "nl": "Invertebrates are the majority of the animal kingdom.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> AnimalKingdom(x))"]}
{"id": "eqasc_train_4196", "nl": "The majority of multicellular eukaryotes are invertebrates.", "fol": "", "prediction": ["all x.(MulticellularEukaryote(x) -> Invertebrate(x))"]}
{"id": "eqasc_train_4197", "nl": "Humans are an animal", "fol": "", "prediction": ["all x.(Human(x) -> Animal(x))"]}
{"id": "eqasc_train_4198", "nl": "plants and animals are multicellular", "fol": "", "prediction": ["all x.((Plant(x) | Animal(x)) -> Multicellular(x))"]}
{"id": "eqasc_train_4199", "nl": "Eukaryotes have many organelles.", "fol": "", "prediction": ["all x.(Eukaryote(x) -> HasManyOrganelles(x))"]}
{"id": "eqasc_train_4200", "nl": "animals have many organelles", "fol": "", "prediction": ["all x.(Animal(x) -> ManyOrganelles(x))"]}
{"id": "eqasc_train_4201", "nl": "Animals are diploid, eukaryotic and multicellular.", "fol": "", "prediction": ["all x.(Animal(x) -> (Diploid(x) | Eukaryotic(x) | Multicellular(x)))"]}
{"id": "eqasc_train_4202", "nl": "animals are a kingdom of diploid eukaryotes", "fol": "", "prediction": ["all x.(Animal(x) -> KingdomOfDiploidEukaryotes(x))"]}
{"id": "eqasc_train_4203", "nl": "Eukaryotes Eukaryotic cells are complex with numerous organelles.", "fol": "", "prediction": ["all x.(Eukaryote(x) -> Complex(x))"]}
{"id": "eqasc_train_4204", "nl": "multicellular organisms have many organelles", "fol": "", "prediction": ["all x.(MulticellularOrganism(x) -> HasManyOrganelles(x))"]}
{"id": "eqasc_train_4205", "nl": "Horses are domestic animals.", "fol": "", "prediction": ["all x.(Horse(x) -> DomesticAnimal(x))"]}
{"id": "eqasc_train_4206", "nl": "horses are multicellular eukaryotes", "fol": "", "prediction": ["all x.(Horse(x) -> (MulticellularEukaryote(x) & Eukaryote(x)))"]}
{"id": "eqasc_train_4207", "nl": "Invertebrates make up the majority of the animal Kingdome.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> MakesMajorityOfAnimalKingdome(x))"]}
{"id": "eqasc_train_4208", "nl": "Invertebrates make up the majority of multicellular eukaryotes.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> MakesUpMajorityOfMulticellularEukaryotes(x))"]}
{"id": "eqasc_train_4209", "nl": "nuclear reactions in stars causes stars to produce light", "fol": "", "prediction": ["all x y.((Star(x) & NuclearReactions(y)) -> CausesStarsToProduceLight(x,y))"]}
{"id": "eqasc_train_4210", "nl": "Like the Sun, stars generate light and heat through nuclear fusion.", "fol": "", "prediction": ["all x.(Star(x) -> (GeneratesLight(x) & GeneratesHeat(x) & NuclearFusion(x)))"]}
{"id": "eqasc_train_4211", "nl": "fusion causes stars to emit light", "fol": "", "prediction": ["all x y.((Fusion(x) & Star(y)) -> CausesEmittingLight(x,y))"]}
{"id": "eqasc_train_4212", "nl": "And, of course, the Sun is a star.", "fol": "", "prediction": ["(all x.(Sun(x) -> Star(x)))"]}
{"id": "eqasc_train_4213", "nl": "Nuclear reactions in the sun cause the sun to produce light", "fol": "", "prediction": ["all x y.((NuclearReactionsInSun(x) & Sun(y)) -> CausesSunToProduceLight(x,y))"]}
{"id": "eqasc_train_4214", "nl": "An intense bright light produces a glare.", "fol": "", "prediction": ["all x.(IntenseBrightLight(x) -> ProducesGlare(x))"]}
{"id": "eqasc_train_4215", "nl": "Nuclear reactions in stars cause stars to produce bright glares.", "fol": "", "prediction": ["all x.((NuclearReaction(x) & Star(x)) -> ProducesBrightGlares(x))"]}
{"id": "eqasc_train_4216", "nl": "June Summer Triangle Three bright stars light up the summer sky.", "fol": "", "prediction": ["JuneSummerTriangle(3) & BrightStarsLightUpSummerSky(3))"]}
{"id": "eqasc_train_4217", "nl": "Nuclear reactions in stars cause them to brighten up the summer sky.", "fol": "", "prediction": ["all x y.((Star(x) & NuclearReaction(y)) -> BrightensSummerSky(x,y))"]}
{"id": "eqasc_train_4218", "nl": "Neutrinos are produced in some nuclear reactions in stars.", "fol": "", "prediction": ["all x.(Neutrinos(x) -> exists y.(NuclearReaction(y) & ProducedIn(x,y))))"]}
{"id": "eqasc_train_4219", "nl": "Neutrinos cause stars to produce light", "fol": "", "prediction": ["all x.(Neutrinos(x) -> CausesStarsToProduceLight(x))"]}
{"id": "eqasc_train_4220", "nl": "nuclear reactions in stars causes stars to produce energy", "fol": "", "prediction": ["all x y.((Star(x) & NuclearReactions(y)) -> CausesStarsToProduceEnergy(x,y))"]}
{"id": "eqasc_train_4221", "nl": "Earth is one of the planets orbiting a star called the Sun.", "fol": "", "prediction": ["all x.(Earth(x) -> OrbitsStar(x,Sun))"]}
{"id": "eqasc_train_4222", "nl": "Nuclear reactions provide the Earth with light.", "fol": "", "prediction": ["all x y.((NuclearReaction(x) & Earth(y)) -> ProvidesLight(x,y))"]}
{"id": "eqasc_train_4223", "nl": "nuclear reactions in stars causes stars to produce photons .", "fol": "", "prediction": ["all x y.((Star(x) & NuclearReaction(y)) -> ProducesPhotons(x,y))"]}
{"id": "eqasc_train_4224", "nl": "Nuclear reactions convert mass to energy.", "fol": "", "prediction": ["all x.(NuclearReaction(x) -> ConvertsMassToEnergy(x))"]}
{"id": "eqasc_train_4225", "nl": "converting mass to energy in stars causes them to produce light", "fol": "", "prediction": ["all x y.((ConvertsMassToEnergy(x) & Star(y)) -> ProducesLight(y,x))"]}
{"id": "eqasc_train_4226", "nl": "Stars convert mass to energy.", "fol": "", "prediction": ["all x.(Star(x) -> ConvertsMassToEnergy(x))"]}
{"id": "eqasc_train_4227", "nl": "Cells secrete acids and bases to maintain the proper pH for enzymes to work.", "fol": "", "prediction": ["all x y.((Cell(x) & Acids(y) & Bases(y)) -> SecretesToMaintainProperPH(x,y))"]}
{"id": "eqasc_train_4228", "nl": "Enzyme systems efficiency is pH dependant.", "fol": "", "prediction": ["all x.(EnzymeSystemsEfficient(x) -> pHDependant(x))"]}
{"id": "eqasc_train_4229", "nl": "Cells secrete acids and bases to maintain enzyme systems efficiency", "fol": "", "prediction": ["all x y z.((Cell(x) & Acids(y) & Bases(z)) -> SecretesAndMaintainsEnzymeSystemEfficient(x,y,z))"]}
{"id": "eqasc_train_4230", "nl": "Enzymes help to break down proteins so that the bacteria can do their thing better.", "fol": "", "prediction": ["all x y.((Enzyme(x) & Bacteria(y)) -> BreaksDownProteins(x,y))"]}
{"id": "eqasc_train_4231", "nl": "cells secrete acids to break down proteins", "fol": "", "prediction": ["all x y z.((Cell(x) & Acid(y) & Protein(z)) -> SecretesToBreakDown(x,y,z))"]}
{"id": "eqasc_train_4232", "nl": "An enzyme is a biological catalyst .", "fol": "", "prediction": ["all x.(Enzyme(x) -> (BiologicalCatalyst(x) & Biological(x)))"]}
{"id": "eqasc_train_4233", "nl": "Cells secrete acids and bases to maintain the proper pH for catalysts to work", "fol": "", "prediction": ["all x y z.((Cell(x) & Acids(y) & Bases(z)) -> SecretesToMaintainProperPH(x,y,z))"]}
{"id": "eqasc_train_4234", "nl": "Phosphatases are enzymes that remove phosphates from other enzymes.", "fol": "", "prediction": ["all x.(Phosphatase(x) -> (Enzyme(x) & RemovesPhosphates(x)))"]}
{"id": "eqasc_train_4235", "nl": "Cells secrete acids and bases to keep the proper pH for phosphatases to work properly.", "fol": "", "prediction": ["all x y.((Cell(x) & Acids(y) & Bases(y)) -> SecretesToKeepProperPH(x,y))"]}
{"id": "eqasc_train_4236", "nl": "Acids and bases are electrolytes.", "fol": "", "prediction": ["all x.((Acid(x) | Base(x)) -> Electrolyte(x))"]}
{"id": "eqasc_train_4237", "nl": "Cells secrete electrolytes to maintain the proper pH for enzymes to work.", "fol": "", "prediction": ["all x y.((Cell(x) & Electrolyte(y)) -> SecretesToMaintainProperPH(x,y))"]}
{"id": "eqasc_train_4238", "nl": "Most human enzymes work at a optimal pH of 7.4, but other enzymes work at many different pH ranges.", "fol": "", "prediction": ["(all x.(HumanEnzyme(x) -> OptimalPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP"]}
{"id": "eqasc_train_4239", "nl": "Cells secrete acids and bases to maintain most human enzymes", "fol": "", "prediction": ["all x y z.((Cell(x) & Acids(y) & Bases(z)) -> SecretesToMaintainHumanEnzymes(x,y,z))"]}
{"id": "eqasc_train_4240", "nl": "Enzyme mechanisms Enzymes are biological catalysts.", "fol": "", "prediction": ["all x.(EnzymeMechanism(x) -> (BiologicalCatalyst(x) & Enzyme(x)))"]}
{"id": "eqasc_train_4241", "nl": "For biological catalysts to be able to work, cells secrete acids and bases to maintain proper pH", "fol": "", "prediction": ["all x y z.((BiologicalCatalyst(x) & Cell(y) & Acids(z)) -> SecretesBases(y,z))"]}
{"id": "eqasc_train_4242", "nl": "Aggression is behavior that is intended to cause harm or pain.", "fol": "", "prediction": ["all x.(Aggression(x) -> (IntendedToCauseHarm(x) | IntendedToCausePain(x)))"]}
{"id": "eqasc_train_4243", "nl": "Another form of aggressive behavior is known as territorial aggression.", "fol": "", "prediction": ["all x.(AggressiveBehavior(x) -> TerritorialAggression(x))"]}
{"id": "eqasc_train_4244", "nl": "territorial aggression causes harm", "fol": "", "prediction": ["all x.(TerritorialAggressionCausesHarm(x) -> TerritorialAggressionCausesHarm(x))"]}
{"id": "eqasc_train_4245", "nl": "Dog aggression is any behavior meant to intimidate or harm a person or another animal.", "fol": "", "prediction": ["all x.(DogAggression(x) -> (IntimidatesOrHarmsAnimal(x) | IntimidatesAnimal(x)))"]}
{"id": "eqasc_train_4246", "nl": "An aggressive dog intends to cause harm", "fol": "", "prediction": ["all x.(AggressiveDog(x) -> IntendsToCauseHarm(x))"]}
{"id": "eqasc_train_4247", "nl": "Curses are spells that are often intended to cause harm to another person.", "fol": "", "prediction": ["all x.(Curse(x) -> (IntendedToCauseHarm(x) & Person(x)))"]}
{"id": "eqasc_train_4248", "nl": "Curses are a form of aggression.", "fol": "", "prediction": ["all x.(Cursed(x) -> Aggression(x))"]}
{"id": "eqasc_train_4249", "nl": "If they are around aggressive dogs, they learn to be aggressive.", "fol": "", "prediction": ["all x.(AggressiveDog(x) -> LearnsAggressive(x))"]}
{"id": "eqasc_train_4250", "nl": "dogs can learn behavior that is intended to cause harm or pain", "fol": "", "prediction": ["all x.(Dog(x) -> (CanLearnBehavior(x) & (CausesHarm(x) | CausesPain(x))))"]}
{"id": "eqasc_train_4251", "nl": "Aggression Aggression and violence often go together.", "fol": "", "prediction": ["all x.(Aggression(x) -> (Aggression(x) & Violence(x)))"]}
{"id": "eqasc_train_4252", "nl": "behavior that is intended to cause harm or pain often includes violence", "fol": "", "prediction": ["all x.((Behavior(x) & IntendedToCauseHarmOrPain(x)) -> Violence(x))"]}
{"id": "eqasc_train_4253", "nl": "Abuse means causing intentional pain or harm.", "fol": "", "prediction": ["all x.(Abuse(x) -> (CausesIntentionalPain(x) | CausesIntentionalHarm(x)))"]}
{"id": "eqasc_train_4254", "nl": "Aggression is behavior that is intentionally abusive.", "fol": "", "prediction": ["all x.(Aggression(x) -> (IntentionallyAbusive(x) & Behavior(x)))"]}
{"id": "eqasc_train_4255", "nl": "Dogs can be aggressive and stubborn and willful.", "fol": "", "prediction": ["all x.(Dog(x) -> (Aggressive(x) & Sturdy(x) & Willful(x)))"]}
{"id": "eqasc_train_4256", "nl": "dogs can cause harm or pain", "fol": "", "prediction": ["all x.(Dog(x) -> (CausesHarm(x) | CausesPain(x)))"]}
{"id": "eqasc_train_4257", "nl": "Behaviorally, aggression is any behavior whose intent is to intimidate or harm another animal.", "fol": "", "prediction": ["all x.(Aggression(x) -> (BehaviorallyIntentional(x) & (IntimidateAnimal(x) | HarmAnimal(x))))"]}
{"id": "eqasc_train_4258", "nl": "aggression harms others", "fol": "", "prediction": ["all x.(Aggression(x) -> HarmsOthers(x))"]}
{"id": "eqasc_train_4259", "nl": "Males are very aggressive during mating season.", "fol": "", "prediction": ["all x.(MakingSeason(x) -> Aggressive(x))"]}
{"id": "eqasc_train_4260", "nl": "Males can intend to cause harm or pain during their mating season", "fol": "", "prediction": ["all x.(Male(x) -> (IntendsToCauseHarm(x) | IntendsToCausePain(x)))"]}
{"id": "eqasc_train_4261", "nl": "Aggressive children tend to grow into aggressive adults.", "fol": "", "prediction": ["all x.(AggressiveChild(x) -> GrowsIntoAggressiveAdult(x))"]}
{"id": "eqasc_train_4262", "nl": "Both and adults and children can intend to cause harm or pain", "fol": "", "prediction": ["all x y z.((Adult(x) & Child(y) & Adult(z)) -> (IntendsToCauseHarm(z) | IntendsToCausePain(z)))"]}
{"id": "eqasc_train_4263", "nl": "If it jumps, bites and growls, it is aggressive.", "fol": "", "prediction": ["all x.((Jump(x) | Bite(x) | Growl(x)) -> Aggressive(x))"]}
{"id": "eqasc_train_4264", "nl": "an animal jumps, bites and growls to cause harm or pain", "fol": "", "prediction": ["all x.(Animal(x) -> (Jumps(x) & Bites(x) & Growls(x) & CausesHarmOrPain(x)))"]}
{"id": "eqasc_train_4265", "nl": "Verbal violence is hostile aggression.", "fol": "", "prediction": ["all x.((VerbalViolence(x) & HostileAggression(x)) -> Violence(x))"]}
{"id": "eqasc_train_4266", "nl": "Verbal violence is behavior that is intended to cause harm or pain", "fol": "", "prediction": ["all x.((VerbalViolence(x) & (IntendedToCauseHarm(x) | IntendedToCausePain(x))) -> Behavior(x))"]}
{"id": "eqasc_train_4267", "nl": "Pain in the present is experienced as hurt.", "fol": "", "prediction": ["all x.((PainInPresent(x) & ExperiencedAsIll(x)) -> Ill(x))"]}
{"id": "eqasc_train_4268", "nl": "Aggression is behavior that is intended to cause hurt", "fol": "", "prediction": ["all x.(Aggression(x) -> (Body(x) & IntendedToCauseIllness(x)))"]}
{"id": "eqasc_train_4269", "nl": "Also, pain is an excellent deterrent.", "fol": "", "prediction": ["all x.(Pain(x) -> ExcellentDeterrent(x))"]}
{"id": "eqasc_train_4270", "nl": "aggression can be a deterrent", "fol": "", "prediction": ["all x.(Aggression(x) -> Deterrent(x))"]}
{"id": "eqasc_train_4271", "nl": "Most definitions of aggression include behaviors that are intended to hurt or harm others.", "fol": "", "prediction": ["all x.(Aggression(x) -> (IncludesBehaviors(x) & IntendedToHaveOthers(x)))"]}
{"id": "eqasc_train_4272", "nl": "Aggression is a behavior that is meant to hurt others", "fol": "", "prediction": ["all x.(Aggression(x) -> (BehaviorMeaningToHailOthers(x) & MeantToHailOthers(x)))"]}
{"id": "eqasc_train_4273", "nl": "Macaques are known for their aggressive behavior.", "fol": "", "prediction": ["all x.(Macaque(x) -> AgressiveBehavior(x))"]}
{"id": "eqasc_train_4274", "nl": "macaques intend to cause harm or pain", "fol": "", "prediction": ["all x.(Macaque(x) -> (IntentionToCauseHarm(x) | IntentionToCausePain(x)))"]}
{"id": "eqasc_train_4275", "nl": "Endospores are commonly found in soil and water.", "fol": "", "prediction": ["all x.(Endospore(x) -> (FoundInSoil(x) & FoundInWater(x)))"]}
{"id": "eqasc_train_4276", "nl": "Endospore-forming bacteria produce a unique resting cell called an endospore .", "fol": "", "prediction": ["all x.((EndosporeFormingBacteria(x) & UniqueRestingCell(x)) -> Endospore(x))"]}
{"id": "eqasc_train_4277", "nl": "Bacterial resting cells are often found in soil and water.", "fol": "", "prediction": ["all x.(BacterialRestingCell(x) -> (FoundInSoil(x) | FoundInWater(x)))"]}
{"id": "eqasc_train_4278", "nl": "Some bacteria form resistant cells called endospores.", "fol": "", "prediction": ["exists x.(Bacteria(x) & FormsResistantCells(x))"]}
{"id": "eqasc_train_4279", "nl": "bacteria that form resistant cells are commonly found in soil and water", "fol": "", "prediction": ["all x.((Bacteria(x) & FormsResistantCells(x)) -> (FoundInSoilAndWater(x) & CommonlyFoundInSoilAndWater(x)))"]}
{"id": "eqasc_train_4280", "nl": "When inside a bacterium, the spore is called an endospore .", "fol": "", "prediction": ["all x y.((Bacteria(x) & Bacteria(y) & Inside(x,y)) -> Endospore(x))"]}
{"id": "eqasc_train_4281", "nl": "bacterium are commonly found in soil and water", "fol": "", "prediction": ["all x.(Bacteria(x) -> (FoundInSoil(x) | FoundInWater(x)))"]}
{"id": "eqasc_train_4282", "nl": "Some bacteria have specialized dormancy structure, the endospore .", "fol": "", "prediction": ["exists x.(Bacteria(x) & SpecializedDormancyStructure(x) & Endospore(x))"]}
{"id": "eqasc_train_4283", "nl": "dormant bacteria are commonly found in soil and water", "fol": "", "prediction": ["all x.(DormantBacteria(x) -> (FoundInSoilAndWater(x) & CommonlyFoundInSoilAndWater(x)))"]}
{"id": "eqasc_train_4284", "nl": "Exospores and endospores are produced by some members of the cyanobacteria.", "fol": "", "prediction": ["all x y.((Exospore(x) & Endospore(y)) -> ProducedBy(x,y))"]}
{"id": "eqasc_train_4285", "nl": "cyanobacteria are commonly found in soil and water", "fol": "", "prediction": ["all x.(Cyanobacteria(x) -> (FoundInSoilAndWater(x) & CommonlyFoundInSoilAndWater(x)))"]}
{"id": "eqasc_train_4286", "nl": "Endospores are a means of reproduction.", "fol": "", "prediction": ["all x.(Endospore(x) -> ReproductionMeaning(x))"]}
{"id": "eqasc_train_4287", "nl": "a means of reproduction are commonly found in soil and water", "fol": "", "prediction": ["all x.(Reproduction(x) -> (FoundInSoil(x) | FoundInWater(x)))"]}
{"id": "eqasc_train_4288", "nl": "An endospore is the resting state of some bacteria.", "fol": "", "prediction": ["all x.(Endospore(x) -> RestingStateOfBacteria(x))"]}
{"id": "eqasc_train_4289", "nl": "bacteria are found in soil", "fol": "", "prediction": ["all x.(Bacteria(x) -> FoundInSoil(x))"]}
{"id": "eqasc_train_4290", "nl": "Bacillus is an ancient genus of bacteria that is known to form endospores.", "fol": "", "prediction": ["all x.(Bactilus(x) -> (AncientGenusOfBacteria(x) & FormsEndospores(x)))"]}
{"id": "eqasc_train_4291", "nl": "Some bacteria form genetic materials in the soil and water", "fol": "", "prediction": ["exists x.(Bacteria(x) & FormsGeneticMaterials(x) & InSoilAndWater(x))"]}
{"id": "eqasc_train_4292", "nl": "the resting state of some bacteria is commonly found in soil and water", "fol": "", "prediction": ["all x y.((Bacteria(x) & Soil(y) & Water(y)) -> RestingState(x,y))"]}
{"id": "eqasc_train_4293", "nl": "if an object is kicked then force is exerted on that object", "fol": "", "prediction": ["all x y.((Object(x) & Kicked(x)) -> ForceExertedOn(y,x))"]}
{"id": "eqasc_train_4294", "nl": "Kicked Ball A kicked ball is one struck by a player's foot, or leg below the knee.", "fol": "", "prediction": ["all x.(KickedBall(x) -> (StruckByPlayerFootOrLegBelowKnee(x)))"]}
{"id": "eqasc_train_4295", "nl": "If an object is struck by a foot, then force is exerted on that object.", "fol": "", "prediction": ["all x.((Object(x) & StrangledByFoot(x)) -> ForceExertedOn(x,y))"]}
{"id": "eqasc_train_4296", "nl": "Force is measured in newtons.", "fol": "", "prediction": ["all x.(Force(x) -> MeasuredInNewtons(x))"]}
{"id": "eqasc_train_4297", "nl": "if an object is kicked then a measurement of newtons is exerted on that object", "fol": "", "prediction": ["all x y.((Object(x) & Kicked(x)) -> MeasurementOfNewtons(y))"]}
{"id": "eqasc_train_4298", "nl": "When a soccer ball is kicked, it is compressed.", "fol": "", "prediction": ["all x.((SoccerBall(x) & Kicked(x)) -> Compressed(x))"]}
{"id": "eqasc_train_4299", "nl": "force compresses a soccer ball", "fol": "", "prediction": ["all x y.((SoccerBall(x) & Force(y)) -> Compresses(y,x))"]}
{"id": "eqasc_train_4300", "nl": "If an object is at rest, a force is needed to make it move.", "fol": "", "prediction": ["all x.((Object(x) & AtRest(x)) -> NeedsForce(x))"]}
{"id": "eqasc_train_4301", "nl": "kicking an object causes it to move", "fol": "", "prediction": ["all x y.((Object(x) & Kicking(x,y)) -> CausesMovement(x,y))"]}
{"id": "eqasc_train_4302", "nl": "When a force is exerted on an object, energy is transferred to the object.", "fol": "", "prediction": ["all x y.((Force(x) & Object(y) & ExertedOn(x,y)) -> EnergyTransfer(x,y))"]}
{"id": "eqasc_train_4303", "nl": "When an object is kicked then energy is transferred to the object.", "fol": "", "prediction": ["all x y.((Object(x) & Kicked(x)) -> EnergyTransfer(y))"]}
{"id": "eqasc_train_4304", "nl": "An object can be anything, a sphere, a pyramid, a car tire, or an elaphant.", "fol": "", "prediction": ["all x.(Object(x) -> (Sphere(x) | Pyramid(x) | CarTire(x) | Elaphant(x)))"]}
{"id": "eqasc_train_4305", "nl": "if a car tire is kicked then force is exerted on it", "fol": "", "prediction": ["all x y z.((CarTire(x) & Kicked(x) & ForceExertedOn(y) & Tire(z)) -> ForceExpired(x,z))"]}
{"id": "eqasc_train_4306", "nl": "Acceleration of an object is proportional to the force acting on that object.", "fol": "", "prediction": ["all x y.((Object(x) & Acceleration(y)) -> ProportionalToForce(x,y))"]}
{"id": "eqasc_train_4307", "nl": "if an object is kicked then it will experience acceleration", "fol": "", "prediction": ["all x.((Object(x) & Kicked(x)) -> ExperiencesAcceleration(x))"]}
{"id": "eqasc_train_4308", "nl": "Kinetic energy is converted to force.", "fol": "", "prediction": ["all x.(KineticEnergy(x) -> ConvertedToForce(x))"]}
{"id": "eqasc_train_4309", "nl": "kinetic energy is exerted on a kicked object", "fol": "", "prediction": ["all x y.((KineticEnergy(x) & KickedObject(y)) -> ExertedOn(x,y))"]}
{"id": "eqasc_train_4310", "nl": "Because air is free to move, it very readily reacts to forces exerted upon it.", "fol": "", "prediction": ["all x.((Air(x) & FreeToMove(x)) -> VeryRapidlyReactsToForces(x))"]}
{"id": "eqasc_train_4311", "nl": "if an object is kicked then it very readily reacts", "fol": "", "prediction": ["all x y.((Object(x) & Kicked(x)) -> VeryRapidlyReacts(x))"]}
{"id": "eqasc_train_4312", "nl": "kicking an object transfers energy to the object", "fol": "", "prediction": ["all x y.((Kicking(x) & Object(y)) -> TransfersEnergyTo(x,y))"]}
{"id": "eqasc_train_4313", "nl": "Force being exerted on a soccer ball compresses it.", "fol": "", "prediction": ["all x y.((SoccerBall(x) & ForceExertedOn(x,y)) -> Compresses(x,y))"]}
{"id": "eqasc_train_4314", "nl": "Control boxes are objects.", "fol": "", "prediction": ["all x.(ControlBox(x) -> Object(x))"]}
{"id": "eqasc_train_4315", "nl": "if control boxes are kicked the force is exerted on it", "fol": "", "prediction": ["all x y.((ControlBox(x) & Kicked(x)) -> ForceExertedOn(y,x))"]}
{"id": "eqasc_train_4316", "nl": "Reproduction is the process by which organisms give rise to offspring.", "fol": "", "prediction": ["all x.(Reproduction(x) -> GivesRiseToOffspring(x))"]}
{"id": "eqasc_train_4317", "nl": "sex is the process by which organisms give rise to offspring.", "fol": "", "prediction": ["all x.(Sex(x) -> OrganismsGiveRiseToOffspring(x))"]}
{"id": "eqasc_train_4318", "nl": "Fetus is Latin for offspring or young one.", "fol": "", "prediction": ["all x.(Fetus(x) -> (LatinForOffspring(x) | LatinForYoungOne(x)))"]}
{"id": "eqasc_train_4319", "nl": "Reproduction is the process by which organisms give rise to their young.", "fol": "", "prediction": ["all x.(Reproduction(x) -> GivesRiseToYoung(x))"]}
{"id": "eqasc_train_4320", "nl": "Darwin's theory of evolution depends on more offspring than are needed to maintain the species.", "fol": "", "prediction": ["all x y.((Darwin's TheoryOfEvolution(x) & Offspring(y)) -> DependsOnMoreThanNeedToMaintainSpecies(x,y))"]}
{"id": "eqasc_train_4321", "nl": "reproduction is needed to maintain a species", "fol": "", "prediction": ["all x y.((Species(x) & Reproduction(y)) -> NeededToMaintain(y,x))"]}
{"id": "eqasc_train_4322", "nl": "Flowers are a plant's reproductive organs.", "fol": "", "prediction": ["all x.(Flower(x) -> ReproductiveOrgan(x))"]}
{"id": "eqasc_train_4323", "nl": "plants produce offspring with flowers", "fol": "", "prediction": ["all x y.((Plant(x) & Offspring(y) & Flowers(y)) -> ProducesWith(x,y))"]}
{"id": "eqasc_train_4324", "nl": "After a six month gestation, a female gives birth to a single offspring, sometimes to twins.", "fol": "", "prediction": ["all x y.((Female(x) & SixMonthGestation(x) & SingleOffspring(y)) -> GivesBirthTo(x,y))"]}
{"id": "eqasc_train_4325", "nl": "Reproduction is the process by which organisms gestate offspring", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y) & GesturesOffspring(x,y)) -> Reproduction(x))"]}
{"id": "eqasc_train_4326", "nl": "Organisms give rise to children by reproduction.", "fol": "", "prediction": ["all x.(Organism(x) -> GivesRiseToChildren(x))"]}
{"id": "eqasc_train_4327", "nl": "Life continues because of reproduction.", "fol": "", "prediction": ["all x.(Life(x) -> Reproduction(x))"]}
{"id": "eqasc_train_4328", "nl": "Life continues because organisms give rise to offspring.", "fol": "", "prediction": ["all x.((Organism(x) & GivesRiseToOffspring(x)) -> LifeContinues(x))"]}
{"id": "eqasc_train_4329", "nl": "Then, the lowest energy offspring are used as parents for the next generation.", "fol": "", "prediction": ["all x y.((LowEnergyOffspring(x) & Generation(y)) -> UsedAsParent(x,y))"]}
{"id": "eqasc_train_4330", "nl": "Reproduction is the process by which organisms give rise to the next generation.", "fol": "", "prediction": ["all x.(Reproduction(x) -> GivesRisesToNextGeneration(x))"]}
{"id": "eqasc_train_4331", "nl": "Reproduction is sexual with internal fertilization.", "fol": "", "prediction": ["all x.(Reproduction(x) -> (Sexual(x) & InternalFertilization(x)))"]}
{"id": "eqasc_train_4332", "nl": "fertilization allows organisms to give rise to offspring", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y)) -> FertilizationAllowsRiseToOffspring(x,y))"]}
{"id": "eqasc_train_4333", "nl": "reproduction is the process by which plants and animals give rise to offspring", "fol": "", "prediction": ["all x y z.((Plant(x) & Animal(y) & Plant(z)) -> GivesRiseToOffspring(x,y,z))"]}
{"id": "eqasc_train_4334", "nl": "reproduction is the process by which humans give rise to offspring", "fol": "", "prediction": ["all x y.((Human(x) & Offspring(y)) -> GivesRiseTo(x,y))"]}
{"id": "eqasc_train_4335", "nl": "Mutations are sources of variations in offspring.", "fol": "", "prediction": ["all x.(Mutations(x) -> VariationsInOffspring(x))"]}
{"id": "eqasc_train_4336", "nl": "Mutations can occur during the reproduction process.", "fol": "", "prediction": ["all x.(Mutations(x) -> ReproductionProcess(x))"]}
{"id": "eqasc_train_4337", "nl": "an automobile engine transforms chemical energy into mechanical energy", "fol": "", "prediction": ["all x y.((AutomobileEngine(x) & ChemicalEnergy(y)) -> TransformsIntoMechanicalEnergy(x,y))"]}
{"id": "eqasc_train_4338", "nl": "Mechanical Energy- Mechanical energy is the energy of moving objects.", "fol": "", "prediction": ["all x.(MechanicalEnergy(x) -> (MechanicalEnergy(x) & MovingObject(x)))"]}
{"id": "eqasc_train_4339", "nl": "Automobile engines transform chemical energy into energy of moving objects.", "fol": "", "prediction": ["all x.(AutomobileEngine(x) -> TransformsChemicalEnergyToMovingObjects(x))"]}
{"id": "eqasc_train_4340", "nl": "Engines convert some energy of it to move the pistons (to work).", "fol": "", "prediction": ["all x y.((Engine(x) & Piston(y)) -> ConvertsEnergyToMove(x,y))"]}
{"id": "eqasc_train_4341", "nl": "energy moves pistons", "fol": "", "prediction": ["all x y.((Energy(x) & Piston(y)) -> Moves(x,y))"]}
{"id": "eqasc_train_4342", "nl": "An automobile changes chemical energy into motion", "fol": "", "prediction": ["all x.(Automobile(x) -> ChangesChemicalEnergyIntoMotion(x))"]}
{"id": "eqasc_train_4343", "nl": "One classic example is the 4.1L Cadillac engine.", "fol": "", "prediction": ["all x.((ClassicExemple(x) & 4.1L CadillacEngine(x)) -> ClassicExemple(x))"]}
{"id": "eqasc_train_4344", "nl": "Something made by Cadillac transforms chemical energy into mechanical energy.", "fol": "", "prediction": ["all x.((Camera(x) & MadeBy(x,Camera)) -> TransformsChemicalEnergyToMechanicalEnergy(x))"]}
{"id": "eqasc_train_4345", "nl": "An automobile engine transforms chemical energy into moving objects.", "fol": "", "prediction": ["all x.(AutomobileEngine(x) -> TransformsChemicalEnergyIntoMovingObjects(x))"]}
{"id": "eqasc_train_4346", "nl": "Cars have V-8 engines and are functional.", "fol": "", "prediction": ["all x.(Car(x) -> (V-8Engine(x) & Functional(x)))"]}
{"id": "eqasc_train_4347", "nl": "cars transform chemical energy into mechanical energy", "fol": "", "prediction": ["all x.(Car(x) -> TransformsChemicalEnergyIntoMechanicalEnergy(x))"]}
{"id": "eqasc_train_4348", "nl": "Mechanical energy is the sum of Kinetic Energy and Potential Energy.", "fol": "", "prediction": ["all x.(MechanicalEnergy(x) -> (KineticEnergy(x) & PotentialEnergy(x)))"]}
{"id": "eqasc_train_4349", "nl": "An automobile engine works by summing kinetic energy and potential energy.", "fol": "", "prediction": ["all x.(AutomobileEngine(x) -> (WorksBySummingKineticEnergy(x) & WorksBySummingPotentialEnergy(x)))"]}
{"id": "eqasc_train_4350", "nl": "Gasoline is a mix of hundreds of chemicals.", "fol": "", "prediction": ["all x.(Gasoline(x) -> MixOfChemicals(x))"]}
{"id": "eqasc_train_4351", "nl": "An automobile uses gasoline for energy", "fol": "", "prediction": ["all x.(Automobile(x) -> UsesGasolineForEnergy(x))"]}
{"id": "eqasc_train_4352", "nl": "Chemical energy is the energy stored in molecules.", "fol": "", "prediction": ["all x.(ChemicalEnergy(x) -> StoredInMolecules(x))"]}
{"id": "eqasc_train_4353", "nl": "an automobile uses energy stored in molecules to make mechanical energy", "fol": "", "prediction": ["all x y.((Automobile(x) & Molecule(y)) -> UsesEnergyStoredIn(x,y))"]}
{"id": "eqasc_train_4354", "nl": "an automobile engine transforms chemical energy into energy of moving objects", "fol": "", "prediction": ["all x y z.((AutomobileEngine(x) & ChemicalEnergy(y) & MovingObject(z)) -> TransformsToEnergy(x,y,z))"]}
{"id": "eqasc_train_4355", "nl": "Marine engines, with very few exceptions, are automobile engines converted to marine use.", "fol": "", "prediction": ["all x.((MarineEngine(x) & VeryFewExceptions(x)) -> MarineEngine(x))"]}
{"id": "eqasc_train_4356", "nl": "A marine engine transforms chemical energy into mechanical energy", "fol": "", "prediction": ["all x y.((MarineEngine(x) & ChemicalEnergy(y)) -> TransformsIntoMechanicalEnergy(x,y))"]}
{"id": "eqasc_train_4357", "nl": "Rocket engines are reaction engines.", "fol": "", "prediction": ["all x.(RocketEngine(x) -> ReactionEngine(x))"]}
{"id": "eqasc_train_4358", "nl": "Mechanical energy powers rockets.", "fol": "", "prediction": ["all x.(MechanicalEnergy(x) -> PowersRockets(x))"]}
{"id": "eqasc_train_4359", "nl": "Automobile engines have a range where they are most efficient.", "fol": "", "prediction": ["all x.(AutomobileEngine(x) -> MostEfficientRange(x))"]}
{"id": "eqasc_train_4360", "nl": "engines transform chemical energy into mechanical energy and have a range where they are efficient  ", "fol": "", "prediction": ["all x.(Engine(x) -> (TransformsChemicalEnergyToMechanicalEnergy(x) & HasRangeWhereEfficient(x)))"]}
{"id": "eqasc_train_4361", "nl": "water vapor condensing in clouds causes rain", "fol": "", "prediction": ["all x y.((WaterVaporCondensing(x) & Cloud(y)) -> CausesRain(x,y))"]}
{"id": "eqasc_train_4362", "nl": "Water vapor turning from a gas into a liquid causes rain", "fol": "", "prediction": ["all x y z.((WaterVapor(x) & Gas(y) & Liquid(z)) -> TurnsIntoRain(x,y,z))"]}
{"id": "eqasc_train_4363", "nl": "Plants wither and die for lack of rain.", "fol": "", "prediction": ["all x.((Plant(x) & Withers(x) & DiesForLackOfRain(x)) -> LackOfRain(x))"]}
{"id": "eqasc_train_4364", "nl": "If water vapor doesn't condense into clouds, plants in the wild will wither and die", "fol": "", "prediction": ["all x.((WaterVapor(x) & -CondensesIntoClouds(x)) -> (Wither(x) & Die(x)))"]}
{"id": "eqasc_train_4365", "nl": "Rain is liquid precipitation.", "fol": "", "prediction": ["all x.(Rain(x) -> LiquidPrecipitation(x))"]}
{"id": "eqasc_train_4366", "nl": "water vapor condensing in clouds causes liquid precipitation?", "fol": "", "prediction": ["all x y.((WaterVaporCondensing(x) & Cloud(y)) -> CausesLiquidPrecipitation(x,y))"]}
{"id": "eqasc_train_4367", "nl": "Rain is also known as precipitation.", "fol": "", "prediction": ["all x.(Rain(x) -> Precipitation(x))"]}
{"id": "eqasc_train_4368", "nl": "water vapor condensing in clouds causes precipitation", "fol": "", "prediction": ["all x y.((WaterVaporCondensing(x) & Cloud(y)) -> CausesPrecipitation(x,y))"]}
{"id": "eqasc_train_4369", "nl": "If the cooling is sufficient, water vapor condenses into clouds.", "fol": "", "prediction": ["all x.((WaterVaporCondenses(x) & SufficientCooling(x)) -> Clouds(x))"]}
{"id": "eqasc_train_4370", "nl": "Water vapors turn into clouds and rain when it's cool", "fol": "", "prediction": ["all x y.((WaterVapor(x) & Cool(y)) -> (TurnsIntoClouds(x) & TurnsIntoRain(x)))"]}
{"id": "eqasc_train_4371", "nl": "If it's raining AND barometer is steady, then predict rain.", "fol": "", "prediction": ["all x.((Raining(x) & BarometerStable(x)) -> PredictsRain(x))"]}
{"id": "eqasc_train_4372", "nl": "Water vapor can be detected by barometer. ", "fol": "", "prediction": ["all x.(WaterVapor(x) -> CanBeDetectedByBarometer(x))"]}
{"id": "eqasc_train_4373", "nl": "Heavy rain or thunder storms usually cause flash floods.", "fol": "", "prediction": ["all x.((HeavyRain(x) | ThunderStorm(x)) -> CausesFlashFloods(x))"]}
{"id": "eqasc_train_4374", "nl": "Water vapor condensing in clouds usually cause flash floods", "fol": "", "prediction": ["all x y.((WaterVaporCondensing(x) & Cloud(y)) -> CausesFlashFloods(x,y))"]}
{"id": "eqasc_train_4375", "nl": "Water vapor is a gas in the air.", "fol": "", "prediction": ["all x.(WaterVapor(x) -> GasInAir(x))"]}
{"id": "eqasc_train_4376", "nl": "a gas in the air condensing in clouds causes rain", "fol": "", "prediction": ["all x y z.((Gas(x) & AirCondensing(y) & Cloud(z) & CondensesIn(x,y,z)) -> CausesRain(x))"]}
{"id": "eqasc_train_4377", "nl": "When it rains, the rain moistens the soil.", "fol": "", "prediction": ["all x y.((Rain(x) & Soil(y)) -> Moistens(x,y))"]}
{"id": "eqasc_train_4378", "nl": "water vapor condensing in the clouds causes soil to moisten", "fol": "", "prediction": ["all x y.((WaterVaporCondensing(x) & Clouds(y)) -> CausesSoilToMoisten(x,y))"]}
{"id": "eqasc_train_4379", "nl": "Humidity is the amount of water vapor in the air.", "fol": "", "prediction": ["all x.(Humidity(x) -> WaterVapor(x))"]}
{"id": "eqasc_train_4380", "nl": "condensation in clouds is similar to humidity in the air. ", "fol": "", "prediction": ["all x y.((Cloud(x) & Cloud(y)) -> SimilarToHumidity(x,y))"]}
{"id": "eqasc_train_4381", "nl": "harming an animal species has a negative impact on the population size of that species", "fol": "", "prediction": ["all x y.((AnimalSpecies(x) & AnimalSpecies(y) & Harms(x,y)) -> NegativeImpactOnPopulationSize(x,y))"]}
{"id": "eqasc_train_4382", "nl": "Habitat loss and hunting are the two major causes for their declining populations.", "fol": "", "prediction": ["all x.((HabitatLoss(x) & Hunting(x)) -> DecliningPopulations(x))"]}
{"id": "eqasc_train_4383", "nl": "Habitat loss and hunting can cause harm to an animal species", "fol": "", "prediction": ["all x y.((AnimalSpecies(x) & HabitatLoss(x) & Hunting(y)) -> CausesHarm(x,y))"]}
{"id": "eqasc_train_4384", "nl": "Pollution is usually harmful to one or more species of animal or plant.", "fol": "", "prediction": ["all x.(Pollution(x) -> (HarmfulToAnimalOrPlant(x) | HarmfulToSpecies(x)))"]}
{"id": "eqasc_train_4385", "nl": "Pollution is usually harmful to population size of a species. ", "fol": "", "prediction": ["all x.(Pollution(x) -> HarmfulToPopulationSize(x))"]}
{"id": "eqasc_train_4386", "nl": "Rarity in plants and animals frequently manifests itself in small or reduced population size.", "fol": "", "prediction": ["all x.((Plant(x) | Animal(x)) -> (ManifestsInSmallPopulationSize(x) | ManifestsInReducedPopulationSize(x)))"]}
{"id": "eqasc_train_4387", "nl": "the rarity of a species increases harm to population exponentially", "fol": "", "prediction": ["all x y.((Species(x) & Rare(x)) -> IncreasesHarmExponentially(x,y))"]}
{"id": "eqasc_train_4388", "nl": "Pesticides have a negative impact on the population size of a species.", "fol": "", "prediction": ["all x y.((Pesticide(x) & Species(y)) -> NegativeImpactOnPopulationSize(x,y))"]}
{"id": "eqasc_train_4389", "nl": "Sometimes hunting can impact animal populations.", "fol": "", "prediction": ["exists x.(Hunting(x) & CanImpactAnimalPopulations(x))"]}
{"id": "eqasc_train_4390", "nl": "Hunting can harm a species population", "fol": "", "prediction": ["all x y.((Hunting(x) & SpeciesPopulation(y)) -> CanHarm(x,y))"]}
{"id": "eqasc_train_4391", "nl": "Population Population A population is comprised of the individuals of a species within an area.", "fol": "", "prediction": ["all x y.((PopulationPopulation(x) & Species(y)) -> ComposesIndividuals(x,y))"]}
{"id": "eqasc_train_4392", "nl": "harming an animal species has a negative impact on the number of individuals in that species", "fol": "", "prediction": ["all x y.((AnimalSpecies(x) & AnimalSpecies(y) & Harms(x,y)) -> NegativeImpactOnIndividuals(x,y))"]}
{"id": "eqasc_train_4393", "nl": "harming dogs has a negative impact on their population size", "fol": "", "prediction": ["all x.(HasNegativeImpactOnPopulationSize(x) -> HarmingDogs(x))"]}
{"id": "eqasc_train_4394", "nl": "Populations are groups of individuals of the same species.", "fol": "", "prediction": ["all x.(Population(x) -> (GroupOfIndividuals(x) & SameSpecies(x)))"]}
{"id": "eqasc_train_4395", "nl": "Harming an animal species has a negative impact on the size of a group of individuals of that species.", "fol": "", "prediction": ["all x y.((AnimalSpecies(x) & AnimalSpecies(y) & Harms(x,y)) -> NegativeImpactOnSize(x,y))"]}
{"id": "eqasc_train_4396", "nl": "Some species of amoeba are harmful parasites.", "fol": "", "prediction": ["exists x.(AmoebaSpecies(x) & HarmfulParasite(x))"]}
{"id": "eqasc_train_4397", "nl": "amoeba can negatively impact species", "fol": "", "prediction": ["all x.(Amoeba(x) -> NegativelyImpactsSpecies(x))"]}
{"id": "eqasc_train_4398", "nl": "Populations are the sub-units of species.", "fol": "", "prediction": ["all x.(Population(x) -> SubUnitOfSpecies(x))"]}
{"id": "eqasc_train_4399", "nl": "harming an animal species has a negative impact on the sub-units of species", "fol": "", "prediction": ["all x y.((AnimalSpecies(x) & AnimalSpecies(y)) -> (Harms(x,y) & NegativeImpactOnSubunits(x,y)))"]}
{"id": "eqasc_train_4400", "nl": "Population size has no bearing on that amount of genetic variation found within a population.", "fol": "", "prediction": ["all x.(PopulationSize(x) -> -BelongsToGeneticVariation(x))"]}
{"id": "eqasc_train_4401", "nl": "harming an animal species has no bearing on the amount of genetic variation found within a population", "fol": "", "prediction": ["all x y.((AnimalSpecies(x) & AnimalSpecies(y) & Harms(x,y)) -> -BearingOnGeneticVariation(x,y))"]}
{"id": "eqasc_train_4402", "nl": "Species are the different kinds of organisms.", "fol": "", "prediction": ["all x.(Species(x) -> DifferentOrganisms(x))"]}
{"id": "eqasc_train_4403", "nl": "harming a kind of animal has a negative impact on the population size of that animal.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & Harms(x,y)) -> NegativeImpactOnPopulationSize(x,y))"]}
{"id": "eqasc_train_4404", "nl": "People understand that habitat destruction and pollution are harmful to wildlife.", "fol": "", "prediction": ["all x y.((People(x) & HabitatDestruction(y) & Pollution(y)) -> HarmfulToWildlife(x,y))"]}
{"id": "eqasc_train_4405", "nl": "pollution has a negative impact on the population size of a species", "fol": "", "prediction": ["all x y.((Pollution(x) & Species(y)) -> NegativeImpactOnPopulationSize(x,y))"]}
{"id": "eqasc_train_4406", "nl": "Animals are harmed because of cosmetic testing.", "fol": "", "prediction": ["all x.((Animal(x) & CosmeticTesting(x)) -> Harmed(x))"]}
{"id": "eqasc_train_4407", "nl": "cosmetic testing has a negative impact on the population size of that species", "fol": "", "prediction": ["all x y.((Species(x) & CosmeticTesting(y)) -> NegativeImpactOnPopulationSize(y,x))"]}
{"id": "eqasc_train_4408", "nl": "Hot weather can cause harmful bacterial growth in feeders.", "fol": "", "prediction": ["all x.(HotWeather(x) -> (CausesHarmfulBacteriaGrowth(x) & InFeeders(x)))"]}
{"id": "eqasc_train_4409", "nl": "weather can have a negative impact on a species' population size", "fol": "", "prediction": ["all x y.((Weather(x) & Species(y)) -> NegativeImpactOnPopulationSize(x,y))"]}
{"id": "eqasc_train_4410", "nl": "an egg requires warmth to survive", "fol": "", "prediction": ["all x.(Egg(x) -> RequiresWarmthToSurvive(x))"]}
{"id": "eqasc_train_4411", "nl": "Inside of the eggs, the embryos grow by shedding their inelastic shell or exoskeleton.", "fol": "", "prediction": ["all x y.((Egg(x) & Egg(y)) -> (GrowsByShedding(x,y) | GrowsByShedding(x,y)))"]}
{"id": "eqasc_train_4412", "nl": "Embryos inside of a shell require warmth to survive.", "fol": "", "prediction": ["all x y.((Embryo(x) & Shell(y) & Inside(x,y)) -> RequiresWarmthToSurvive(x))"]}
{"id": "eqasc_train_4413", "nl": "Sunlight and warmth are vital to the incubation of eggs and a successful hatch of fry.", "fol": "", "prediction": ["all x.((Sunlight(x) & Warmth(x)) -> (IncubationOfEggs(x) & SuccessfulHatchOfFresh(x)))"]}
{"id": "eqasc_train_4414", "nl": "an incubator helps an egg survive", "fol": "", "prediction": ["all x y.((Incubator(x) & Egg(y)) -> HelpsSurvive(x,y))"]}
{"id": "eqasc_train_4415", "nl": "Survival is a natural reaction known as staying alive.", "fol": "", "prediction": ["all x.(Survival(x) -> (NaturalReaction(x) & StayingAlive(x)))"]}
{"id": "eqasc_train_4416", "nl": "an egg requires warmth to stay alive", "fol": "", "prediction": ["all x.(Egg(x) -> RequiresWarmthToStayAlive(x))"]}
{"id": "eqasc_train_4417", "nl": "an egg requires incubation to survive", "fol": "", "prediction": ["all x.((Egg(x) & RequiresIncubation(x)) -> Survives(x))"]}
{"id": "eqasc_train_4418", "nl": "Eggs depend upon body warmth to incubate.", "fol": "", "prediction": ["all x.(Egg(x) -> DependsOnBodyWarmthToIncubate(x))"]}
{"id": "eqasc_train_4419", "nl": "eggs need to incubate to survive", "fol": "", "prediction": ["all x.(Egg(x) -> NeedsIncubation(x))"]}
{"id": "eqasc_train_4420", "nl": "incubation requires warmth", "fol": "", "prediction": ["all x.(Incubation(x) -> RequiresWarmth(x))"]}
{"id": "eqasc_train_4421", "nl": "First the frog lays the eggs, then the warmth from the sun makes the eggs hatch into baby tadpoles.", "fol": "", "prediction": ["all x y z.((Frog(x) & Egg(y) & Sun(z)) -> (Lays(x,y) & WarmthFrom(x,z) & MakesEggsHave(x,y)))"]}
{"id": "eqasc_train_4422", "nl": "An egg will hatch if it survives.", "fol": "", "prediction": ["all x.((Egg(x) & Survives(x)) -> Hatches(x))"]}
{"id": "eqasc_train_4423", "nl": "Oil provides heating for warmth and gasoline for transportation.", "fol": "", "prediction": ["(all x.(Oil(x) -> ProvidesHeating(x)) & all y.(Gasoline(y) -> ProvidesTransportation(y)))"]}
{"id": "eqasc_train_4424", "nl": "An egg requires heat to survive", "fol": "", "prediction": ["all x.(Egg(x) -> RequiresHeatToSurvive(x))"]}
{"id": "eqasc_train_4425", "nl": "sun keeps eggs warm", "fol": "", "prediction": ["all x y.((Sun(x) & Egg(y)) -> KeepsWarm(x,y))"]}
{"id": "eqasc_train_4426", "nl": "Eggs, the female sex cells, are produced in ovules, which are inside the ovary.", "fol": "", "prediction": ["all x y.((Egg(x) & FemaleSexCell(y)) -> (ProducedInOvules(x,y) & InsideOvary(x)))"]}
{"id": "eqasc_train_4427", "nl": "Female sex cells require warmth to survive", "fol": "", "prediction": ["all x.(FemaleSexCell(x) -> RequiresWarmthToSurvive(x))"]}
{"id": "eqasc_train_4428", "nl": "Living and surviving are the thing.", "fol": "", "prediction": ["all x.((Living(x) & Surviving(x)) -> Thing(x))"]}
{"id": "eqasc_train_4429", "nl": "An egg requires warmth to live.", "fol": "", "prediction": ["all x.(Egg(x) -> RequiresWarmthToLive(x))"]}
{"id": "eqasc_train_4430", "nl": "Eggs indicate eggs in the ovaries.", "fol": "", "prediction": ["all x.(Egg(x) -> IndicatesEggsInOvaries(x))"]}
{"id": "eqasc_train_4431", "nl": "it is warm inside of ovaries", "fol": "", "prediction": ["all x y.((Ovarian(x) & Ovarian(y)) -> WarmInside(x,y))"]}
{"id": "eqasc_train_4432", "nl": "Heat from the sun helps frog eggs survive and hatch into tadpoles", "fol": "", "prediction": ["all x y.((FrogEgg(x) & SunHeat(x)) -> (HelpsSurvive(x,y) & HelpsHaveTadpole(y)))"]}
{"id": "eqasc_train_4433", "nl": "Heat and warmth help other gift plants.", "fol": "", "prediction": ["all x.((GiftPlant(x) & Heat(x) & Warmth(x)) -> Helps(x,y))"]}
{"id": "eqasc_train_4434", "nl": "an egg requires heat to survive", "fol": "", "prediction": ["all x.(Egg(x) -> RequiresHeatToSurvive(x))"]}
{"id": "eqasc_train_4435", "nl": "Inside the egg, the developing rattlesnake is nourished by the yolk of the egg.", "fol": "", "prediction": ["all x y.((Egg(x) & Rattlesnake(y)) -> (Entwicking(y) & N\u00e4heredBy(y,y)))"]}
{"id": "eqasc_train_4436", "nl": "a developing rattlesnake requires warmth to survive", "fol": "", "prediction": ["all x.((Rainforest(x) & DevelopsRainforest(x)) -> RequiresWarmthToSurvive(x))"]}
{"id": "eqasc_train_4437", "nl": "Egg laying mammals are called monotremes.", "fol": "", "prediction": ["all x.((EggLayingMammal(x) & Monotreme(x)) -> Laying(x))"]}
{"id": "eqasc_train_4438", "nl": "Monotremes require warmth for incubation ", "fol": "", "prediction": ["all x.(Monotreme(x) -> RequiresWarmthForIncubation(x))"]}
{"id": "eqasc_train_4439", "nl": "And humans do come from eggs, eggs without shells, they are called ovum.", "fol": "", "prediction": ["all x.(Human(x) -> (ComesFromEggs(x) & -ComesFromShells(x) & Ovum(x)))"]}
{"id": "eqasc_train_4440", "nl": "Some ovum require warmth to survive.", "fol": "", "prediction": ["exists x.(Ovum(x) & RequiresWarmth(x))"]}
{"id": "eqasc_train_4441", "nl": "some flowers become fruits", "fol": "", "prediction": ["exists x.(Flower(x) & Fruit(x))"]}
{"id": "eqasc_train_4442", "nl": "Fruits are an adaptation for seed dispersal.", "fol": "", "prediction": ["all x.(Fruit(x) -> AdaptationForSeedDispersal(x))"]}
{"id": "eqasc_train_4443", "nl": "Some flowers become an adaptation for seed dispersal. ", "fol": "", "prediction": ["exists x.(Flower(x) & AdaptationForSeedDispersal(x))"]}
{"id": "eqasc_train_4444", "nl": "Fruits, flowers and leaves are edible.", "fol": "", "prediction": ["all x.((Fruit(x) | Flower(x) | Leave(x)) -> Edible(x))"]}
{"id": "eqasc_train_4445", "nl": "flowers and leaves of a plant are edible", "fol": "", "prediction": ["all x y.((Flower(x) & Leave(y)) -> (Edible(x) & Edible(y)))"]}
{"id": "eqasc_train_4446", "nl": "An apple tree produces an apple fruit.", "fol": "", "prediction": ["all x.(AppleTree(x) -> ProducesAppleFruit(x))"]}
{"id": "eqasc_train_4447", "nl": "some flowers become apples", "fol": "", "prediction": ["exists x.(Flower(x) & Apple(x))"]}
{"id": "eqasc_train_4448", "nl": "Fruit eating bats can find their food by the smell of the ripening fruit.", "fol": "", "prediction": ["all x.((FruitEatingBat(x) & FindsFoodBySmell(x,ripeningFruit)) -> Eats(x,ripeningFruit))"]}
{"id": "eqasc_train_4449", "nl": "Some flowers become food for bats.", "fol": "", "prediction": ["exists x.(Flower(x) & Bat(x))"]}
{"id": "eqasc_train_4450", "nl": "Cucumber fruit are produced only when insects carry pollen to the female flower.", "fol": "", "prediction": ["all x y.((CucumberFruit(x) & Insect(y) & CarriesPollenToFemaleFlower(y)) -> Produced(x,y))"]}
{"id": "eqasc_train_4451", "nl": "Cucumber flowers are pollinated by insects to create cucumbers.", "fol": "", "prediction": ["all x y.((CucumberFlower(x) & Insect(y)) -> PollinatedBy(x,y))"]}
{"id": "eqasc_train_4452", "nl": "Ferns have no flowers, fruits or seeds.", "fol": "", "prediction": ["all x.(Fern(x) -> (-HasFlowers(x) & -HasFruits(x) & -HasSeeds(x)))"]}
{"id": "eqasc_train_4453", "nl": "some plants have no flowers", "fol": "", "prediction": ["exists x.(Plant(x) & -HasFlowers(x))"]}
{"id": "eqasc_train_4454", "nl": "Fruit is considered edible.", "fol": "", "prediction": ["all x.(Fruit(x) -> Edible(x))"]}
{"id": "eqasc_train_4455", "nl": "Some flowers are edible.", "fol": "", "prediction": ["exists x.(Flower(x) & Edible(x))"]}
{"id": "eqasc_train_4456", "nl": "Fruits Fruits and fruit juices provide important amounts of vitamin C and potassium.", "fol": "", "prediction": ["all x.(Fruit(x) -> (Fruit(x) & FruitJuice(x) & ProvidesVitaminC(x) & ProvidesPotassium(x)))"]}
{"id": "eqasc_train_4457", "nl": "some flowers provide vitamin C", "fol": "", "prediction": ["exists x.(Flower(x) & ProvidesVitaminC(x))"]}
{"id": "eqasc_train_4458", "nl": "Insects may live in large colonies and have complex social behaviors.", "fol": "", "prediction": ["all x.(Insect(x) -> (LivesInLargeColony(x) & ComplexSocialBehaviors(x)))"]}
{"id": "eqasc_train_4459", "nl": "Honey bees are perennial insects with colonies that survive more than one year.", "fol": "", "prediction": ["all x.(HoneyBee(x) -> (PerennialInsect(x) & HasColonies(x,y) & SurvivesMoreThanOneYear(x)))"]}
{"id": "eqasc_train_4460", "nl": "complex social behaviors can be seen in insects whose interactions last more than a one year", "fol": "", "prediction": ["all x y.((Insect(x) & InteractionsLaterThanOneYear(x,y)) -> ComplexSocialBehaviors(x))"]}
{"id": "eqasc_train_4461", "nl": "Ants are social insects.", "fol": "", "prediction": ["all x.(Ant(x) -> SocialInsect(x))"]}
{"id": "eqasc_train_4462", "nl": "ants may live in large colonies and have complex social behaviors.", "fol": "", "prediction": ["all x.(Ant(x) -> (LivesInLargeColony(x) & ComplexSocialBehaviors(x)))"]}
{"id": "eqasc_train_4463", "nl": "Ants are social insects living in colonies.", "fol": "", "prediction": ["all x.(Ant(x) -> (SocialInsect(x) & LivesInColony(x)))"]}
{"id": "eqasc_train_4464", "nl": "Ants have complex social behavior. ", "fol": "", "prediction": ["all x.(Ant(x) -> ComplexSocialBehavior(x))"]}
{"id": "eqasc_train_4465", "nl": "Ants and butterflies are insects.", "fol": "", "prediction": ["all x.((Ant(x) | Butterfly(x)) -> Insect(x))"]}
{"id": "eqasc_train_4466", "nl": "ants may live in large colonies", "fol": "", "prediction": ["all x.(Ant(x) -> (LivesInLargeColony(x) & LargeColony(x)))"]}
{"id": "eqasc_train_4467", "nl": "Some Beetles Co-exist in Other Insect Colonies.", "fol": "", "prediction": ["exists x.(Beetle(x) & CoexistInInsectColonies(x))"]}
{"id": "eqasc_train_4468", "nl": "some beetles have complex social behaviors", "fol": "", "prediction": ["exists x.(Beetle(x) & ComplexSocialBehaviors(x))"]}
{"id": "eqasc_train_4469", "nl": "Ants have complex social behaviors", "fol": "", "prediction": ["all x.(Ant(x) -> ComplexSocialBehaviors(x))"]}
{"id": "eqasc_train_4470", "nl": "Insects have six legs.", "fol": "", "prediction": ["all x.(Insect(x) -> HasSixLegs(x))"]}
{"id": "eqasc_train_4471", "nl": "Creatures with six legs may live in large colonies.", "fol": "", "prediction": ["all x.((Creature(x) & SixLegs(x)) -> MayLiveInLargeColony(x))"]}
{"id": "eqasc_train_4472", "nl": "Insects are the only arthropod to have wings.", "fol": "", "prediction": ["all x.(Insect(x) -> HasWings(x))"]}
{"id": "eqasc_train_4473", "nl": "Arthropods with wings may live in large colonies and have complex social behaviors.", "fol": "", "prediction": ["all x.((Arthropod(x) & HasWings(x)) -> (LivesInLargeColony(x) & ComplexSocialBehaviors(x)))"]}
{"id": "eqasc_train_4474", "nl": "Ants are social insects that live in a colony.", "fol": "", "prediction": ["all x.(Ant(x) -> (SocialInsect(x) & LivesInColony(x)))"]}
{"id": "eqasc_train_4475", "nl": "ants have complex behaviors", "fol": "", "prediction": ["all x.(Ant(x) -> ComplexBehaviors(x))"]}
{"id": "eqasc_train_4476", "nl": "Insects are just part of the Arthropod subdivision.", "fol": "", "prediction": ["all x.(Insect(x) -> ArthropodSubdivision(x))"]}
{"id": "eqasc_train_4477", "nl": "Arthropods may live in large colonies and have complex social behaviors.", "fol": "", "prediction": ["all x.(Arthropod(x) -> (LivesInLargeColony(x) & ComplexSocialBehaviors(x)))"]}
{"id": "eqasc_train_4478", "nl": "Honey Bee Honey bees are insects that live in a hive and make honey.", "fol": "", "prediction": ["all x.(HoneyBee(x) -> (Insect(x) & LivesInHive(x) & MakesHoney(x)))"]}
{"id": "eqasc_train_4479", "nl": "Bees live in large colonies and have complex social behaviors.", "fol": "", "prediction": ["all x.(Bee(x) -> (LivesInLargeColony(x) & ComplexSocialBehaviors(x)))"]}
{"id": "eqasc_train_4480", "nl": "Like other ants, the fire ant is a social insect.", "fol": "", "prediction": ["all x.(FireAnt(x) -> SocialInsect(x))"]}
{"id": "eqasc_train_4481", "nl": "fire ants may live in large colonies", "fol": "", "prediction": ["all x y.((FireAnt(x) & LargeColony(y)) -> MayLiveIn(x,y))"]}
{"id": "eqasc_train_4482", "nl": "Insect colonies Insect colonies are families because all members are close relatives.", "fol": "", "prediction": ["all x.(InsectColony(x) -> (Family(x) & CloseRelative(x)))"]}
{"id": "eqasc_train_4483", "nl": "Insects have more social behaviors because all family members are close relatives", "fol": "", "prediction": ["all x.(Insect(x) -> (HasMoreSocialBehaviors(x) & AllFamilyMembersCloseRelatives(x)))"]}
{"id": "eqasc_train_4484", "nl": "Bees and other insects are agents.", "fol": "", "prediction": ["all x.((Bee(x) | Insect(x)) -> Agent(x))"]}
{"id": "eqasc_train_4485", "nl": "Bees may live in large colonies and have complex social behaviors", "fol": "", "prediction": ["all x.(Bee(x) -> (LivesInLargeColony(x) & ComplexSocialBehaviors(x)))"]}
{"id": "eqasc_train_4486", "nl": "All termites are social insects.", "fol": "", "prediction": ["all x.(Termite(x) -> SocialInsect(x))"]}
{"id": "eqasc_train_4487", "nl": "termites are social", "fol": "", "prediction": ["all x.(Termite(x) -> Social(x))"]}
{"id": "eqasc_train_4488", "nl": "Social behavior is organized by social relationships.", "fol": "", "prediction": ["all x.(SocialBehavior(x) -> SocialRelationships(x))"]}
{"id": "eqasc_train_4489", "nl": "Insects may live in large colonies and have complex social relationships.", "fol": "", "prediction": ["all x.(Insect(x) -> (LivesInLargeColony(x) & ComplexSocialRelationships(x)))"]}
{"id": "eqasc_train_4490", "nl": "decomposition increases the amount of nutrients in the soil", "fol": "", "prediction": ["all x y.((Soil(x) & Decomposition(y)) -> IncreasesNutrients(y,x))"]}
{"id": "eqasc_train_4491", "nl": "Soil provides nutrients and moisture necessary for plant growth and is fundamental to all life.", "fol": "", "prediction": ["all x.(Soil(x) -> (ProvidesNutrients(x) & ProvidesMoisture(x) & FundamentalToLife(x)))"]}
{"id": "eqasc_train_4492", "nl": "decomposition increases the amount of plant growth and is fundamental to all life.", "fol": "", "prediction": ["all x.(Decomposition(x) -> (IncreasesPlantGrowth(x) & FundamentalToLife(x)))"]}
{"id": "eqasc_train_4493", "nl": "Moisture is needed for bacterial decomposition.", "fol": "", "prediction": ["all x.(Moisture(x) -> NeededForBacteriaDecomposition(x))"]}
{"id": "eqasc_train_4494", "nl": "bacteria are able to increase the amount of nutrients in the soil", "fol": "", "prediction": ["all x y.((Bacteria(x) & Soil(y)) -> IncreasesNutrients(x,y))"]}
{"id": "eqasc_train_4495", "nl": "Loams are the best soil type.", "fol": "", "prediction": ["all x.(Loam(x) -> BestSoilType(x))"]}
{"id": "eqasc_train_4496", "nl": "decomposition increases the amount of nutrients in loam", "fol": "", "prediction": ["all x y.((Decomposition(x) & Loam(y)) -> IncreasesNutrients(x,y))"]}
{"id": "eqasc_train_4497", "nl": "Organic matter is the plant and animal residue in the soil at various stages of decomposition.", "fol": "", "prediction": ["all x.(OrganicMatter(x) -> (PlantResidue(x) & AnimalResidue(x) & InSoil(x) & AtVariousStagesOfDecomposition(x)))"]}
{"id": "eqasc_train_4498", "nl": "Plant and animal residue increases the amount of nutrients in the soil", "fol": "", "prediction": ["all x y.((PlantResidue(x) & AnimalResidue(y)) -> IncreasesNutrientsInSoil(x,y))"]}
{"id": "eqasc_train_4499", "nl": "Most soil organisms are responsible for decomposition and nutrient cycling.", "fol": "", "prediction": ["all x.(SoilOrganism(x) -> (ResponsibleForDecomposition(x) & ResponsibleForNutrientCycling(x)))"]}
{"id": "eqasc_train_4500", "nl": "Organisms increase the nutrients in soil.", "fol": "", "prediction": ["all x.(Organism(x) -> IncreasesNutrientsInSoil(x))"]}
{"id": "eqasc_train_4501", "nl": "Plants grow in nutrient rich soil and absorb the nutrients.", "fol": "", "prediction": ["all x.(Plant(x) -> (GrowsInNutrientRichSoil(x) & AbsorbsNutrients(x)))"]}
{"id": "eqasc_train_4502", "nl": "Decomposition helps plants to grow", "fol": "", "prediction": ["all x y.((Decomposition(x) & Plant(y)) -> HelpsGrow(x,y))"]}
{"id": "eqasc_train_4503", "nl": "Bacteria and fungi are involved in the decomposition.", "fol": "", "prediction": ["all x.((Bacteria(x) | Fungi(x)) -> Decomposition(x))"]}
{"id": "eqasc_train_4504", "nl": "fungi increase the amount of nutrients in the soil", "fol": "", "prediction": ["all x y.((Fungus(x) & Soil(y)) -> IncreasesNutrients(x,y))"]}
{"id": "eqasc_train_4505", "nl": "Most soil nutrients are cations.", "fol": "", "prediction": ["all x.(SoilNutrient(x) -> Cations(x))"]}
{"id": "eqasc_train_4506", "nl": "decomposition increases the amount of cations in the soil", "fol": "", "prediction": ["all x y.((Decomposition(x) & Soil(y)) -> IncreasesAmountOfCations(x,y))"]}
{"id": "eqasc_train_4507", "nl": "conserving resources has a positive impact on the environment", "fol": "", "prediction": ["all x.(ConservingResources(x) -> PositiveImpactOnEnvironment(x))"]}
{"id": "eqasc_train_4508", "nl": "Recycled products conserve resources.", "fol": "", "prediction": ["all x.(RecycledProduct(x) -> ConservesResources(x))"]}
{"id": "eqasc_train_4509", "nl": "Recycled products have a positive impact on the environment.", "fol": "", "prediction": ["all x.(RecycledProduct(x) -> PositiveImpactOnEnvironment(x))"]}
{"id": "eqasc_train_4510", "nl": "Use of resources affects the environment such as pollution.", "fol": "", "prediction": ["all x.(UseOfResources(x) -> (AffectsEnvironment(x) & Pollution(x)))"]}
{"id": "eqasc_train_4511", "nl": "conserving resources lowers pollution", "fol": "", "prediction": ["all x y.((ConservingResources(x) & Resource(y)) -> LowersPollution(x,y))"]}
{"id": "eqasc_train_4512", "nl": "Recycling conserves natural resources.", "fol": "", "prediction": ["all x.(Recycling(x) -> ConservesNaturalResources(x))"]}
{"id": "eqasc_train_4513", "nl": "Recycling  has a positive impact on the environment", "fol": "", "prediction": ["all x.(Recycling(x) -> PositiveImpactOnEnvironment(x))"]}
{"id": "eqasc_train_4514", "nl": "Recycling saves energy, conserves natural resources and helps protect the environment.", "fol": "", "prediction": ["all x.(Recycling(x) -> (SaversEnergy(x) & ConservesNaturalResources(x) & HelpsProtectEnvironment(x)))"]}
{"id": "eqasc_train_4515", "nl": "Recycling has a positive impact on the environment", "fol": "", "prediction": ["all x.(Recycling(x) -> PositiveImpactOnEnvironment(x))"]}
{"id": "eqasc_train_4516", "nl": "Humans meet some needs and wants by using resources found in the natural environment.", "fol": "", "prediction": ["all x.(Human(x) -> (MeetsNeedsAndWants(x) & UsesResourcesInNaturalEnvironment(x)))"]}
{"id": "eqasc_train_4517", "nl": "Humans have a negative impact on the environment.", "fol": "", "prediction": ["all x.(Human(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_4518", "nl": "creating wood-free paper does not require cutting down trees", "fol": "", "prediction": ["all x.((CreatingWoodFreePaper(x) & -CuttingDownTrees(x)) -> -RequiresChoppingDownTrees(x))"]}
{"id": "eqasc_train_4519", "nl": "For that, the player needs lumberjacks to cut down the trees.", "fol": "", "prediction": ["all x y.((Player(x) & Lumberjack(y)) -> CutsDownTrees(x,y))"]}
{"id": "eqasc_train_4520", "nl": "Creating wood-free paper does not require lumberjacks.", "fol": "", "prediction": ["all x.((CreatingWoodFreePaper(x) & -RequiresLumberjacks(x)) -> -RequiresLumberjacks(x))"]}
{"id": "eqasc_train_4521", "nl": "Paper Media products are printed on paper.", "fol": "", "prediction": ["all x.(PaperMedia(x) -> PrintsOnPaper(x))"]}
{"id": "eqasc_train_4522", "nl": "creating printed media requires cutting down trees", "fol": "", "prediction": ["all x y.((PrintedMedia(x) & Tree(y)) -> RequiresCuttingDown(x,y))"]}
{"id": "eqasc_train_4523", "nl": "Deforestation happens when people cut down forests or when trees are burned.", "fol": "", "prediction": ["all x.(Deforestation(x) -> (CropsDownForests(x) | BurnsTrees(x)))"]}
{"id": "eqasc_train_4524", "nl": "creating wood-free paper does not require deforestation", "fol": "", "prediction": ["all x.((CreatingWoodFreePaper(x) & -RequiresDeforestation(x)) -> -RequiresDeforestation(x))"]}
{"id": "eqasc_train_4525", "nl": "Hemp paper is superior to wood paper.", "fol": "", "prediction": ["all x.(HempPaper(x) -> SuperiorToWoodPaper(x))"]}
{"id": "eqasc_train_4526", "nl": "Hemp paper does not require cutting down trees", "fol": "", "prediction": ["all x.(HempPaper(x) -> -RequiresCuttingDownTrees(x))"]}
{"id": "eqasc_train_4527", "nl": "creating wood-free paper does not require cutting down oaks", "fol": "", "prediction": ["all x.((CreatingWoodFreePaper(x) & -CuttingDownOaks(x)) -> -RequiresCuttingDownOaks(x))"]}
{"id": "eqasc_train_4528", "nl": "Creating wood-free paper does not require deforestation. ", "fol": "", "prediction": ["all x.((CreatingWoodFreePaper(x) & -RequiresDeforestation(x)) -> -RequiresDeforestation(x))"]}
{"id": "eqasc_train_4529", "nl": "Rainforests are destroyed by logging and all of the trees are cut down.", "fol": "", "prediction": ["all x y.((Rainforest(x) & Tree(y)) -> (DestroyedByLogging(x) & CutDown(y)))"]}
{"id": "eqasc_train_4530", "nl": "Logging  down trees destroys rainforests.", "fol": "", "prediction": ["all x y.((LoggingDownTrees(x) & Rainforest(y)) -> Disrupts(x,y))"]}
{"id": "eqasc_train_4531", "nl": "Dozens of non-wood fibers are pulped for paper around the world.", "fol": "", "prediction": ["all x y.((NonWoodFibre(x) & Paper(y)) -> PulpedFor(x,y))"]}
{"id": "eqasc_train_4532", "nl": "Pulping fibres for paper does not require cutting down trees", "fol": "", "prediction": ["all x y.((PulpingFibres(x) & Paper(y)) -> -RequiresCuttingDownTrees(x,y))"]}
{"id": "eqasc_train_4533", "nl": "Most uncoated freesheet paper is entirely free of mechanical wood pulp.", "fol": "", "prediction": ["all x.((FreesheetPaper(x) & -Coated(x)) -> FreeOfMechanicalWoodPulp(x))"]}
{"id": "eqasc_train_4534", "nl": "uncoated freesheet paper does not require cutting down trees", "fol": "", "prediction": ["all x.((FreesheetPaper(x) & -Coated(x)) -> -RequiresCuttingDownTrees(x))"]}
{"id": "eqasc_train_4535", "nl": "To cut down a tree is like destroying a life.", "fol": "", "prediction": ["all x.((Tree(x) & CutDown(x)) -> DisagreesLife(x))"]}
{"id": "eqasc_train_4536", "nl": "Creating wood-free paper does not require destroying them.", "fol": "", "prediction": ["all x.((CreateWoodFreePaper(x) & -DestroyWoodFreePaper(x)) -> -DestroyWoodFreePaper(x))"]}
{"id": "eqasc_train_4537", "nl": "Immunity results from immunization.", "fol": "", "prediction": ["all x.(Immunity(x) -> ImmunizationResults(x))"]}
{"id": "eqasc_train_4538", "nl": "Results can be damaging or disastrous.", "fol": "", "prediction": ["all x.(Result(x) -> (Damaging(x) | Desastrous(x)))"]}
{"id": "eqasc_train_4539", "nl": "Lack of immunization can be damaging or disastrous", "fol": "", "prediction": ["all x.(LackOfImmunization(x) -> (Damaging(x) | Desastrous(x)))"]}
{"id": "eqasc_train_4540", "nl": "Oxygen deprivation in immune cells causes immune weaknesses.", "fol": "", "prediction": ["all x.((ImmuneCell(x) & OxygenDeprivation(x)) -> CausesImmuneStability(x))"]}
{"id": "eqasc_train_4541", "nl": "Oxygen deprivation in cells result in weakness", "fol": "", "prediction": ["all x y.((Cell(x) & OxygenDeprivation(y)) -> Weakness(x,y))"]}
{"id": "eqasc_train_4542", "nl": "Immunization with vaccine is effective.", "fol": "", "prediction": ["all x.(Vaccination(x) -> Effective(x))"]}
{"id": "eqasc_train_4543", "nl": "The ability of an organism to not be susceptible to a certain disease can result from vaccines.", "fol": "", "prediction": ["all x y.((Organism(x) & Disease(y) & -SusceptibleTo(x,y)) -> CanResultFromVaccines(x))"]}
{"id": "eqasc_train_4544", "nl": "Immunization records with all required shots.", "fol": "", "prediction": ["all x.(Immunization(x) -> AllShotsRequired(x))"]}
{"id": "eqasc_train_4545", "nl": "Resistance to disease results from getting shots.", "fol": "", "prediction": ["all x.(ResistanceToDisease(x) -> GetsShots(x))"]}
{"id": "eqasc_train_4546", "nl": "Results underline the benefits of such vaccination policy.", "fol": "", "prediction": ["all x.(Results(x) -> UnderlinesBenefitsOfVaccinationPolicy(x))"]}
{"id": "eqasc_train_4547", "nl": "vaccination policies have benefits to immunity.", "fol": "", "prediction": ["all x.(VaccinationPolicy(x) -> BenefitsToImmunity(x))"]}
{"id": "eqasc_train_4548", "nl": "Serious side effects resulting from vaccination are extremely rare.", "fol": "", "prediction": ["all x.((SeriousSideEffects(x) & Vaccination(x)) -> ExtremelyRare(x))"]}
{"id": "eqasc_train_4549", "nl": "Vaccination leads to immunity and extremely rarely with serious side effects", "fol": "", "prediction": ["all x.(Vaccination(x) -> (LeadsToImmunity(x) & RarelyWithSeriousSideEffects(x)))"]}
{"id": "eqasc_train_4550", "nl": "An effect is the result or outcome of some cause.", "fol": "", "prediction": ["all x.(Effect(x) -> (ResultOrOutcomeOfCause(x)))"]}
{"id": "eqasc_train_4551", "nl": "Immunization causes immunity.", "fol": "", "prediction": ["all x.(Immunization(x) -> CausesImmunity(x))"]}
{"id": "eqasc_train_4552", "nl": "Cells are the microscopic building blocks of organisms.", "fol": "", "prediction": ["all x.(Cell(x) -> (MicroscopicalBuildingBlock(x) & Organism(x)))"]}
{"id": "eqasc_train_4553", "nl": "Any living being is an organism.", "fol": "", "prediction": ["all x.(LivingBeing(x) -> Organism(x))"]}
{"id": "eqasc_train_4554", "nl": "Cells are the microscopic building blocks of living beings.", "fol": "", "prediction": ["all x.(Cell(x) -> (MicroscopicBuildingBlock(x) & LivingBeing(x)))"]}
{"id": "eqasc_train_4555", "nl": "Coral reefs are limestone formations composed of tiny sea organisms and their remains.", "fol": "", "prediction": ["all x.(CoralReef(x) -> (LimestoneFormation(x) & ComposedOfTinySeaOrganismsAndRemains(x)))"]}
{"id": "eqasc_train_4556", "nl": "The microscopic building blocks of coral reefs are cells", "fol": "", "prediction": ["all x.((Cell(x) & MicroscopicBuildingBlocks(x) & CoralReef(x)) -> Cells(x))"]}
{"id": "eqasc_train_4557", "nl": "Cells are so small that they can only be seen under a microscope.", "fol": "", "prediction": ["all x.(Cell(x) -> (Small(x) & CanBeSeenUnderMicroscope(x)))"]}
{"id": "eqasc_train_4558", "nl": "Cells are so small, they are the building blocks of organisms.", "fol": "", "prediction": ["all x.(Cell(x) -> (Small(x) & BuildingBlock(x)))"]}
{"id": "eqasc_train_4559", "nl": "Life is a living organism.", "fol": "", "prediction": ["all x.(Life(x) -> LivingOrganism(x))"]}
{"id": "eqasc_train_4560", "nl": "Cells are the microscopic building blocks of Life ", "fol": "", "prediction": ["all x.(Cell(x) -> (MicroscopicBuildingBlocksOfLife(x) & BuildsLife(x)))"]}
{"id": "eqasc_train_4561", "nl": "Most organisms, including humans produce it.", "fol": "", "prediction": ["all x.(Organism(x) -> (Produces(x,Organism) | Produces(x,Organism)))"]}
{"id": "eqasc_train_4562", "nl": "cells are the microscopic building blocks of humans", "fol": "", "prediction": ["all x.(Cell(x) -> (MicroscopicBuildingBlock(x) & Human(x)))"]}
{"id": "eqasc_train_4563", "nl": "Proteins are the building blocks of living cells.", "fol": "", "prediction": ["all x.(Protein(x) -> BuildingBlock(x))"]}
{"id": "eqasc_train_4564", "nl": "proteins are the building blocks of organisms", "fol": "", "prediction": ["all x y.((Protein(x) & Organism(y)) -> BuildingBlock(x,y))"]}
{"id": "eqasc_train_4565", "nl": "Cells are the microscopic building blocks of living beings", "fol": "", "prediction": ["all x.(Cell(x) -> (MicroscopicBuildingBlocks(x) & LivingBeings(x)))"]}
{"id": "eqasc_train_4566", "nl": "Just like bricks are the building blocks of a home, atoms are the building blocks of matter .", "fol": "", "prediction": ["all x y.((Brick(x) & Atom(y)) -> BuildingBlock(x,y))"]}
{"id": "eqasc_train_4567", "nl": "Cells are the microscopic building bricks of organisms", "fol": "", "prediction": ["all x.(Cell(x) -> (MicroscopicBuildingBricks(x) & Organism(x)))"]}
{"id": "eqasc_train_4568", "nl": "Organic molecules are the basic building blocks of living organisms on earth.", "fol": "", "prediction": ["all x.(OrganicMolecule(x) -> (BasicBuildingBlocks(x) & LivingOrganisms(x)))"]}
{"id": "eqasc_train_4569", "nl": "cells are the microscopic parts of  organic molecules of living organisms ", "fol": "", "prediction": ["all x y.((Cell(x) & Organism(y)) -> (MicroscopePart(x,y) & OrganicMolecule(x,y)))"]}
{"id": "eqasc_train_4570", "nl": "Cells are the microscopic building blocks of fish", "fol": "", "prediction": ["all x.(Cell(x) -> (MicroscopicalBuildingBlock(x) & Fish(x)))"]}
{"id": "eqasc_train_4571", "nl": "Plants are complex organisms.", "fol": "", "prediction": ["all x.(Plant(x) -> ComplexOrganism(x))"]}
{"id": "eqasc_train_4572", "nl": "cells are the microscopic building blocks of plants", "fol": "", "prediction": ["all x.(Cell(x) -> (MicroscopicalBuildingBlock(x) & Plant(x)))"]}
{"id": "eqasc_train_4573", "nl": "Cells are the microscopic bulding blocks of plants and animals.", "fol": "", "prediction": ["all x.(Cell(x) -> (MicroscopicBlock(x) & BuldingBlock(x) & PlantsAndAnimals(x)))"]}
{"id": "eqasc_train_4574", "nl": "Molecules are the building blocks of a cell.", "fol": "", "prediction": ["all x.(Molecule(x) -> BuildingBlock(x))"]}
{"id": "eqasc_train_4575", "nl": "molecules build cells", "fol": "", "prediction": ["all x y.((Molecule(x) & Cell(y)) -> Builds(x,y))"]}
{"id": "eqasc_train_4576", "nl": "All life relies on a relatively narrow range of pH, or acidity.", "fol": "", "prediction": ["all x.(Life(x) -> (ReliesOnNarrowRangeOfPH(x) | ReliesOnAcidity(x)))"]}
{"id": "eqasc_train_4577", "nl": "All organisms have a life-span.", "fol": "", "prediction": ["all x.(Organism(x) -> HasLifeSpan(x))"]}
{"id": "eqasc_train_4578", "nl": "Organisms rely on a relatively narrow range of acidity.", "fol": "", "prediction": ["all x.(Organism(x) -> ReliesOnRelativelyNarrowRangeOfAcidity(x))"]}
{"id": "eqasc_train_4579", "nl": "All organisms have life cycles.", "fol": "", "prediction": ["all x.(Organism(x) -> HasLifeCycle(x))"]}
{"id": "eqasc_train_4580", "nl": "organisms rely on a relative narrow range of acidity", "fol": "", "prediction": ["all x.(Organism(x) -> ReliesOnRelativeNarrowRangeOfAcidity(x))"]}
{"id": "eqasc_train_4581", "nl": "Biochemical reactions are catalyzed by enzymes that have very narrow ranges of optimum pH values.", "fol": "", "prediction": ["all x y.((BiochemicalReaction(x) & Enzyme(y) & VeryNarrowRangesOfOptimalPHValues(y)) -> CatalyzedBy(x,y))"]}
{"id": "eqasc_train_4582", "nl": "All life relies on a relatively narrow range of environment partly do to need of Biochemical reactions being catalyzed by enzymes", "fol": "", "prediction": ["all x.(Life(x) -> ReliesOnRelativelyNarrowEnvironment(x))"]}
{"id": "eqasc_train_4583", "nl": "organisms rely on a relatively narrow range of acidity", "fol": "", "prediction": ["all x.(Organism(x) -> ReliesOnRelativelyNarrowRangeOfAcidity(x))"]}
{"id": "eqasc_train_4584", "nl": "Acids and bases are a part of everyday life.", "fol": "", "prediction": ["all x.((Acid(x) | Base(x)) -> PartOfEverydayLife(x))"]}
{"id": "eqasc_train_4585", "nl": "bases are relied upon for life", "fol": "", "prediction": ["all x.(Base(x) -> ReliedOnForLife(x))"]}
{"id": "eqasc_train_4586", "nl": "If the pH level is higher or lower, aquatic life is endangered.", "fol": "", "prediction": ["all x.((PhPhP) & (Higher(x) | Lower(x))) -> EndangeredAquaticLife(x))"]}
{"id": "eqasc_train_4587", "nl": "Aquatic life is endangered if acidity is higher or lower than a narrow range.", "fol": "", "prediction": ["all x.((AquaticLife(x) & (HigherAcidity(x) | LowerAcidity(x))) -> Endangered(x))"]}
{"id": "eqasc_train_4588", "nl": "Human life is dependent life.", "fol": "", "prediction": ["all x.(HumanLife(x) -> DependentLife(x))"]}
{"id": "eqasc_train_4589", "nl": "humans rely on a relatively narrow range of acidity", "fol": "", "prediction": ["all x.(Human(x) -> ReliesOnRelativelyNarrowRangeOfAcidity(x))"]}
{"id": "eqasc_train_4590", "nl": "Acids have low pH's.", "fol": "", "prediction": ["all x.(Acid(x) -> LowPH(x))"]}
{"id": "eqasc_train_4591", "nl": "All life relies on a relatively narrow range of low pHs", "fol": "", "prediction": ["all x.(Life(x) -> ReliesOnRelativelyNarrowRangeOfLowPHs(x))"]}
{"id": "eqasc_train_4592", "nl": "Life during most of the Precambrian was restricted to bacteria and algae.", "fol": "", "prediction": ["all x.(PrecambrianLife(x) -> (RestrictedToBacteria(x) & RestrictedToAlgae(x)))"]}
{"id": "eqasc_train_4593", "nl": "bacteria relies on a relatively narrow range of pH", "fol": "", "prediction": ["all x.(Bacteria(x) -> ReliesOnRelativelyNarrowRangeOfPH(x))"]}
{"id": "eqasc_train_4594", "nl": "Acidity is measured with a pH meter or with pH paper strips.", "fol": "", "prediction": ["all x.(Acidity(x) -> (MeasuredWith(x,PhP) | MeasuredWith(x,PhPhPhPhStrips)))"]}
{"id": "eqasc_train_4595", "nl": "All life relies on a relatively narrow range of something you can measure with paper strips.", "fol": "", "prediction": ["all x.(Life(x) -> ReliesOnRelativelyNarrowRangeOfSomething(x))"]}
{"id": "eqasc_train_4596", "nl": "Plant life has increased.", "fol": "", "prediction": ["all x.(PlantLife(x) -> Increased(x))"]}
{"id": "eqasc_train_4597", "nl": "plants rely on a narrow pH range", "fol": "", "prediction": ["all x.((Plant(x) & NarrowPHRange(x)) -> ReliesOn(x,y))"]}
{"id": "eqasc_train_4598", "nl": "soil is formed by rocks eroding", "fol": "", "prediction": ["all x y.((Soil(x) & Rock(y)) -> FormedByEroding(x,y))"]}
{"id": "eqasc_train_4599", "nl": "Rivers erode the rocks they flow over.", "fol": "", "prediction": ["all x y.((River(x) & Rock(y)) -> Erodes(x,y))"]}
{"id": "eqasc_train_4600", "nl": "Soil is formed by rivers.", "fol": "", "prediction": ["all x.(Soil(x) -> FormedByRivers(x))"]}
{"id": "eqasc_train_4601", "nl": "Water can make soil from rocks", "fol": "", "prediction": ["all x y z.((Water(x) & Rock(y) & Soil(z)) -> CanMakeFrom(x,y,z))"]}
{"id": "eqasc_train_4602", "nl": "Rivers turn rocks into soil", "fol": "", "prediction": ["all x y z.((River(x) & Rock(y) & Soil(z)) -> TurnsInto(x,y,z))"]}
{"id": "eqasc_train_4603", "nl": "Rivers aid in the formation of soil.", "fol": "", "prediction": ["all x.(River(x) -> AidsInSoilFormation(x))"]}
{"id": "eqasc_train_4604", "nl": "Examples of such rock include sandstone and shale .", "fol": "", "prediction": ["all x.((Rock(x) & Sandstone(x) & Shale(x)) -> Rock(x))"]}
{"id": "eqasc_train_4605", "nl": "sandstone eroding forms soil", "fol": "", "prediction": ["all x.((SandstoneEroding(x) & FormsSoil(x)) -> SandstoneEroding(x))"]}
{"id": "eqasc_train_4606", "nl": "Rocks will always erode in nature.", "fol": "", "prediction": ["all x.(Rock(x) -> ErosionInNature(x))"]}
{"id": "eqasc_train_4607", "nl": "Soils are formed by breakdown of rock.", "fol": "", "prediction": ["all x.(Soil(x) -> FormedByBreakdownOfRock(x))"]}
{"id": "eqasc_train_4608", "nl": "rocks eroding causes them to breakdown", "fol": "", "prediction": ["all x.((Rock(x) & Eroding(x)) -> Breakdown(x))"]}
{"id": "eqasc_train_4609", "nl": "soil is formed by rivers", "fol": "", "prediction": ["all x y.((Soil(x) & River(y)) -> FormedBy(x,y))"]}
{"id": "eqasc_train_4610", "nl": "Soil is formed by rivers that flow over rocks.", "fol": "", "prediction": ["all x.(Soil(x) -> (FormedByRiver(x) & FlowsOverRocks(x)))"]}
{"id": "eqasc_train_4611", "nl": "Endocrine hormones travel throughout the body in the blood.", "fol": "", "prediction": ["all x.(EndocrineHormone(x) -> TravelsThroughoutBodyInBlood(x))"]}
{"id": "eqasc_train_4612", "nl": "Hormones such as adrenaline are also pumped into the body.", "fol": "", "prediction": ["all x y.((Hormone(x) & Body(y)) -> PumpedInto(x,y))"]}
{"id": "eqasc_train_4613", "nl": "adrenaline travel throughout the body in the blood.", "fol": "", "prediction": ["all x y.((Adrenaline(x) & Body(y)) -> TravelsInBlood(x,y))"]}
{"id": "eqasc_train_4614", "nl": "Puberty leads to hormonal and sexual changes.", "fol": "", "prediction": ["all x.(Puperty(x) -> (LeadsToHydrogeneticChanges(x) & LeadsToSexualChanges(x)))"]}
{"id": "eqasc_train_4615", "nl": "Puberty leads to sexual changes that travel throughout the body in the blood", "fol": "", "prediction": ["all x y.((Puperty(x) & SexualChange(y)) -> (LeadsTo(x,y) & TravelsThroughoutBody(x) & InBlood(x)))"]}
{"id": "eqasc_train_4616", "nl": "Hormones are the chemical messengers of the body's endocrine system.", "fol": "", "prediction": ["all x.(Hormone(x) -> (ChemicalMessager(x) & EndocrineSystem(x)))"]}
{"id": "eqasc_train_4617", "nl": "chemical messengers travel throughout the body in the blood", "fol": "", "prediction": ["all x y.((ChemicalMessager(x) & Body(y)) -> TravelsInBlood(x,y))"]}
{"id": "eqasc_train_4618", "nl": "Endocrine glands secrete directly into the blood.", "fol": "", "prediction": ["all x.(EndocrineGlands(x) -> SecretesIntoBlood(x))"]}
{"id": "eqasc_train_4619", "nl": "endocrine glands secrete directly into the bloodstream", "fol": "", "prediction": ["all x.(EndocrineGlands(x) -> SecretesIntoBloodstream(x))"]}
{"id": "eqasc_train_4620", "nl": "Deficiencies in the Endocrine System are another source of impotence.", "fol": "", "prediction": ["all x.(DeficienciesInEndocrineSystem(x) -> SourceOfImpotence(x))"]}
{"id": "eqasc_train_4621", "nl": "lack of certain hormones in the blood can cause impotence. ", "fol": "", "prediction": ["all x.(LackOfHormonesInBlood(x) -> CausesImpotence(x))"]}
{"id": "eqasc_train_4622", "nl": "Hormones, produced by the endocrine system, act as chemical messengers targeting specific organs.", "fol": "", "prediction": ["all x y.((Hormone(x) & EndocrineSystem(y)) -> (ProducedBy(x,y) & ChemicalMessenger(x) & TargetsOrgans(x)))"]}
{"id": "eqasc_train_4623", "nl": "Breathing affects the flow of hormones through the endocrine system.", "fol": "", "prediction": ["all x y.((Breathing(x) & HormoneFlow(y)) -> AffectsThroughEndocrineSystem(x,y))"]}
{"id": "eqasc_train_4624", "nl": "Breathing allows hormones to travel throughout the body in the bloodstream.", "fol": "", "prediction": ["all x y.((Breathing(x) & Hormone(y)) -> AllowsTravel(x,y))"]}
{"id": "eqasc_train_4625", "nl": "glands secrete hormones", "fol": "", "prediction": ["all x y.((Glands(x) & Hormone(y)) -> Secretes(x,y))"]}
{"id": "eqasc_train_4626", "nl": "Almost every body function is controlled by hormones released from the endocrine glands.", "fol": "", "prediction": ["all x.((BodyFunction(x) & ControlledByHormones(x)) -> ReleasedFromEndocrineGlands(x))"]}
{"id": "eqasc_train_4627", "nl": "Nearly every body function is controlled by hormones that travel through the blood", "fol": "", "prediction": ["all x y.((BodyFunction(x) & Hormone(y)) -> (ControlledBy(x,y) & TravelsThroughBlood(y)))"]}
{"id": "eqasc_train_4628", "nl": "Endocrine cells secrete hormones.", "fol": "", "prediction": ["all x.(EndocrineCell(x) -> SecretesHormones(x))"]}
{"id": "eqasc_train_4629", "nl": "Cells that secrete hormones travel throughout the body in blood", "fol": "", "prediction": ["all x y.((Cell(x) & SecretesHormones(x)) -> TravelsThroughoutBodyInBlood(x,y))"]}
{"id": "eqasc_train_4630", "nl": "For the tourists, there are many places to travel.", "fol": "", "prediction": ["all x.(Tourist(x) -> exists y.(Place(y) & Travel(x,y)))"]}
{"id": "eqasc_train_4631", "nl": "Endocrine hormones move from place to place in the body through the blood.", "fol": "", "prediction": ["all x y.((EndocrineHormone(x) & Body(y)) -> MovesThroughBlood(x,y))"]}
{"id": "eqasc_train_4632", "nl": "And blood, blood runs like water.", "fol": "", "prediction": ["(all x.(Blood(x) -> RunsAlikeWater(x)))"]}
{"id": "eqasc_train_4633", "nl": "Endocrine hormones travel through the body in something that runs like water.", "fol": "", "prediction": ["all x.(EndocrineHormone(x) -> (TravelsIn(x,Water) & RunsIn(x,Water)))"]}
{"id": "eqasc_train_4634", "nl": "Genes that are located on the same chromosome are called linked genes.", "fol": "", "prediction": ["all x.((Gene(x) & LocatedOnSameChromosome(x)) -> LinkedGene(x))"]}
{"id": "eqasc_train_4635", "nl": "Genes and chromosomes exist in pairs.", "fol": "", "prediction": ["all x.(Gene(x) & Chromosome(x)) -> exists inPair(x))"]}
{"id": "eqasc_train_4636", "nl": "genes on the same pair are linked", "fol": "", "prediction": ["all x y.((Gene(x) & Gene(y) & Pair(y)) -> Linked(x,y))"]}
{"id": "eqasc_train_4637", "nl": "Thousands of genes are linked together in a chain to form chromosomes.", "fol": "", "prediction": ["all x y.((Gene(x) & Gene(y)) -> (LinkedTo(x,y) & FormsChromosomes(x)))"]}
{"id": "eqasc_train_4638", "nl": "Genes link together to form a chain", "fol": "", "prediction": ["all x y.((Gene(x) & Gene(y)) -> LinksToFormChain(x,y))"]}
{"id": "eqasc_train_4639", "nl": "Chromosomes and Chromosome Links Chromosomes are wonderful.", "fol": "", "prediction": ["all x.((Chromosome(x) | ChromosomeLink(x)) -> Wonderful(x))"]}
{"id": "eqasc_train_4640", "nl": "Genes can be located on something wonderful.", "fol": "", "prediction": ["all x.(Gene(x) -> CanBeLocatedOn(x,wonderful))"]}
{"id": "eqasc_train_4641", "nl": "Linked genes are inherited together.", "fol": "", "prediction": ["all x.(LinkedGene(x) -> inheritedTogether(x))"]}
{"id": "eqasc_train_4642", "nl": "Genes located on the same chromosome are inherited together. ", "fol": "", "prediction": ["all x.((Gene(x) & SameChromosome(x)) -> inheritedTogether(x))"]}
{"id": "eqasc_train_4643", "nl": "Each chromosome is a linear DNA molecule.", "fol": "", "prediction": ["all x.(Chromosome(x) -> LinearDNAMolecule(x))"]}
{"id": "eqasc_train_4644", "nl": "Genes that are located on the same DNA molecule are called linked genes", "fol": "", "prediction": ["all x.((Gene(x) & LocatedOnSameDNAMolecule(x)) -> LinkedGene(x))"]}
{"id": "eqasc_train_4645", "nl": "Genes that are located on the same chromosome are inherited together", "fol": "", "prediction": ["all x.((Gene(x) & LocationOnSameChromosome(x)) -> InheritedTogether(x))"]}
{"id": "eqasc_train_4646", "nl": "Gene A gene is the basic unit of heriditary information.", "fol": "", "prediction": ["all x.(Gene(x) -> BasicUnitOfHeriditaryInformation(x))"]}
{"id": "eqasc_train_4647", "nl": "Chromosomes contain the basic units of heriditary information.", "fol": "", "prediction": ["all x.(Chromosome(x) -> ContainsBasicUnitsOfHeriditaryInformation(x))"]}
{"id": "eqasc_train_4648", "nl": "Genes that are located on the same chromosome are chained together by the thousands", "fol": "", "prediction": ["all x y.((Gene(x) & Chromosome(y) & LocatedOn(x,y)) -> ChainedTogether(x,y))"]}
{"id": "eqasc_train_4649", "nl": "For example, epilepsy and splay leg tend to link with the vienna white gene.", "fol": "", "prediction": ["all x.((Epilepsy(x) | SplayLeg(x)) -> LinksWithViennaWhiteGene(x))"]}
{"id": "eqasc_train_4650", "nl": "Epilepsy and splay leg are located on the same chromosome.", "fol": "", "prediction": ["all x.((Epilepsy(x) & SplayLeg(x)) -> SameChromosome(x))"]}
{"id": "eqasc_train_4651", "nl": "Chromosomes are molecules of DNA complexed with proteins.", "fol": "", "prediction": ["all x.(Chromosome(x) -> (Molecular(x) & DNAComplexed(x) & Proteins(x)))"]}
{"id": "eqasc_train_4652", "nl": "Genes that are located on the same molecules of DNA complexed with proteins. are called linked genes.", "fol": "", "prediction": ["all x.((Gene(x) & LocatedOnSameMoleculesOfDNAComplexedWithProteins(x)) -> LinkedGene(x))"]}
{"id": "eqasc_train_4653", "nl": "Genes that are located on the same chromosome are inherited together.", "fol": "", "prediction": ["all x.((Gene(x) & LocationOnSameChromosome(x)) -> Inherite(x))"]}
{"id": "eqasc_train_4654", "nl": "Energy is passed up a food chain or web from lower to higher trophic levels.", "fol": "", "prediction": ["all x y z.((Energy(x) & FoodChainOrWeb(y) & (LowerThrombosis(z) | HigherThrombosis(z))) -> PassedUp(x,y,z))"]}
{"id": "eqasc_train_4655", "nl": "Energy and carbon in organic compounds passed through food chain to herbivores and carnivores.", "fol": "", "prediction": ["all x y.((OrganicCompound(x) & Herbivore(y) & Carnivore(y)) -> (PassedThroughFoodChain(x,y) & PassedThroughFoodChain(x,y)))"]}
{"id": "eqasc_train_4656", "nl": "Carbon in organic compounds are passed through the food web from herbivores to carnivores.", "fol": "", "prediction": ["all x y.((Carbon(x) & OrganicCompound(y)) -> (PassedThroughFoodWeb(x,y) & FromHerbivoresToCarnivores(x)))"]}
{"id": "eqasc_train_4657", "nl": "Calories are units of energy.", "fol": "", "prediction": ["all x.(Calories(x) -> UnitOfEnergy(x))"]}
{"id": "eqasc_train_4658", "nl": "calories are passed up a food chain or web from lower to higher trophic levels", "fol": "", "prediction": ["all x y z.((Calories(x) & FoodChainOrWeb(y) & (LowerThrombosis(z) | HigherThrombosis(z))) -> PassedUp(x,y,z))"]}
{"id": "eqasc_train_4659", "nl": "Animals which are consumers constitute higher trophic levels.", "fol": "", "prediction": ["all x.((Animal(x) & Consumer(x)) -> HigherTropicalLevel(x))"]}
{"id": "eqasc_train_4660", "nl": "Energy is passed up a food chain or web from producers to consumers.", "fol": "", "prediction": ["all x y z.((Energy(x) & FoodChainOrWeb(y) & Producer(z) & Consumer(z)) -> PassedUp(x,y,z))"]}
{"id": "eqasc_train_4661", "nl": "Plants represent the first trophic level.", "fol": "", "prediction": ["all x.(Plant(x) -> FirstTropicalLevel(x))"]}
{"id": "eqasc_train_4662", "nl": "Energy is passed up a food chain from plants.", "fol": "", "prediction": ["all x y.((Energy(x) & FoodChain(y)) -> PassedUp(x,y))"]}
{"id": "eqasc_train_4663", "nl": "Plants are always at the bottom of the food chain or web.", "fol": "", "prediction": ["all x.(Plant(x) -> (FootOfFoodChain(x) | BottomOfWeb(x)))"]}
{"id": "eqasc_train_4664", "nl": "When consumed, energy is passed up from plants from lower to higher trophic levels.", "fol": "", "prediction": ["all x y.((Consumed(x) & Plant(y)) -> EnergyPassedUpFromLowerToHigherTropicalLevels(y,x))"]}
{"id": "eqasc_train_4665", "nl": "resources from food are passed up a chain or web from lower to higher trophic levels", "fol": "", "prediction": ["all x y z.((Resource(x) & Food(y) & (LowerThrombosis(z) | HigherThrombosis(z))) -> PassedUpChainOrWeb(x,y,z))"]}
{"id": "eqasc_train_4666", "nl": "Autotrophs are the base of the food chain .", "fol": "", "prediction": ["all x.(Autotroph(x) -> FoodChainBase(x))"]}
{"id": "eqasc_train_4667", "nl": "energy is passed up from autotrophs to higher trophic levels", "fol": "", "prediction": ["all x y z.((Autotroph(x) & HigherTropicalLevel(y) & Autotroph(z)) -> EnergyPassedUp(x,y,z))"]}
{"id": "eqasc_train_4668", "nl": "Each trophic level has less biomass and a loss of energy content.", "fol": "", "prediction": ["all x.(TropicalLevel(x) -> (LessBiomass(x) & LossOfEnergyContent(x)))"]}
{"id": "eqasc_train_4669", "nl": "energy decreases as it goes up levels", "fol": "", "prediction": ["all x y.((Energy(x) & EnergyLevel(y) & GoesUp(x,y)) -> EnergyDecreases(x))"]}
{"id": "eqasc_train_4670", "nl": "An example of chemical energy is food nutrients.", "fol": "", "prediction": ["all x.(ChemicalEnergy(x) -> FoodNutrients(x))"]}
{"id": "eqasc_train_4671", "nl": "nutrients is passed up a food chain or web from lower to higher trophic levels.", "fol": "", "prediction": ["all x y.((Nutrients(x) & FoodChainOrWeb(y)) -> PassedUp(x,y))"]}
{"id": "eqasc_train_4672", "nl": "Fission takes place when an animal divides into two parts.", "fol": "", "prediction": ["all x.(Fission(x) -> (AnimalDividesIntoTwoParts(x)))"]}
{"id": "eqasc_train_4673", "nl": "Prokaryotic cells divide by binary fission.", "fol": "", "prediction": ["all x.(ProkaryoticCell(x) -> DividesByBinaryFission(x))"]}
{"id": "eqasc_train_4674", "nl": "Prokaryotic cells divide into two parts", "fol": "", "prediction": ["all x.(ProkaryoticCell(x) -> DividesIntoTwoParts(x))"]}
{"id": "eqasc_train_4675", "nl": "Euglenoids are eukaryotes, and reproduce by fission.", "fol": "", "prediction": ["all x.(Euglenoids(x) -> (Eukaryote(x) & ReproducesByFission(x)))"]}
{"id": "eqasc_train_4676", "nl": "Euglenoids reproduce by dividing into two parts", "fol": "", "prediction": ["all x.(Euglenoids(x) -> ReproducesByDividingIntoTwoParts(x))"]}
{"id": "eqasc_train_4677", "nl": "Example of fungi that reproduce by fission or budding is yeast.", "fol": "", "prediction": ["all x.((Fungus(x) & (ReproducesByFission(x) | ReproducesByBadding(x))) -> Yeast(x))"]}
{"id": "eqasc_train_4678", "nl": "Yeast divides into two parts to reproduce", "fol": "", "prediction": ["all x.(Yeast(x) -> DividesIntoTwoParts(x))"]}
{"id": "eqasc_train_4679", "nl": "If the nucleus breaks up into lighter elements, it is called fission .", "fol": "", "prediction": ["all x.((Nucleus(x) & BreaksIntoLighterElements(x)) -> Fission(x))"]}
{"id": "eqasc_train_4680", "nl": "The nucleus breaks up into lighter elements when an animal divides into two parts.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & DividesIntoTwoParts(x,y)) -> BreaksUpIntoLighterElements(x,y))"]}
{"id": "eqasc_train_4681", "nl": "Actual stages of mitosis can be viewed at Animal Cell Mitosis .", "fol": "", "prediction": ["all x.((AnimalCellMitosis(x) & ActualStages(x)) -> ViewedAt(x,AnimalCellMitosis))"]}
{"id": "eqasc_train_4682", "nl": "fission takes place during mitosis", "fol": "", "prediction": ["all x y.((Fission(x) & Mitosis(y)) -> TakesPlaceDuring(x,y))"]}
{"id": "eqasc_train_4683", "nl": "Fission releases energy and neutrons.", "fol": "", "prediction": ["all x.(Fission(x) -> (ReleasesEnergy(x) & ReleasesNeutrons(x)))"]}
{"id": "eqasc_train_4684", "nl": "energy and neutrons are released when an animal divides into two parts", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & DividesIntoTwoParts(x,y)) -> (Energy(x) & Neutrons(x) & Released(y,x)))"]}
{"id": "eqasc_train_4685", "nl": "An isotope capable of undergoing fission is called a fissile isotope .", "fol": "", "prediction": ["all x.((Isotope(x) & CapableOfFission(x)) -> FissileIsotope(x))"]}
{"id": "eqasc_train_4686", "nl": "fissile isotopes are capable of dividing into two parts", "fol": "", "prediction": ["all x.(FissileIsotope(x) -> (DividedIntoTwoParts(x) & CapableOfDividingIntoTwoParts(x)))"]}
{"id": "eqasc_train_4687", "nl": "Flagellates reproduce by binary fission.", "fol": "", "prediction": ["all x.(Flagellate(x) -> ReproducesByBinaryFission(x))"]}
{"id": "eqasc_train_4688", "nl": "Flagellates reproduce by dividing into two parts", "fol": "", "prediction": ["all x.(Flagellate(x) -> ReproducesByDividingIntoTwoParts(x))"]}
{"id": "eqasc_train_4689", "nl": "Asexual reproduction is by fragmentation, budding, or fission.", "fol": "", "prediction": ["all x.(AsexualReproduction(x) -> (Fragmentation(x) | Budding(x) | Fission(x)))"]}
{"id": "eqasc_train_4690", "nl": "Asexual reproduction is when an animal divides into two parts.", "fol": "", "prediction": ["all x.(AsexualReproduction(x) -> (AnimalDividesIntoTwoParts(x)))"]}
{"id": "eqasc_train_4691", "nl": "Many nucleotides bind together to form a chain called a polynucleotide.", "fol": "", "prediction": ["all x.(Nucleotide(x) -> BindsToForm(x,Polynucleotide))"]}
{"id": "eqasc_train_4692", "nl": "Nucleotides are the monomers that make nucleic acids.", "fol": "", "prediction": ["all x.(Nucleotide(x) -> (MakingNucleicAcids(x) & Monomer(x)))"]}
{"id": "eqasc_train_4693", "nl": "many monomers that make nucleic acids bind together to form a chain called a polynucleotide", "fol": "", "prediction": ["all x y.((Molecule(x) & MakesNucleicAcids(x)) -> BindToForm(x,y))"]}
{"id": "eqasc_train_4694", "nl": "RNA like DNA is a polynucleotide.", "fol": "", "prediction": ["all x.((RNA(x) & LikeDNA(x)) -> Polynucleotide(x))"]}
{"id": "eqasc_train_4695", "nl": "Many nucleotides bind together to form DNA", "fol": "", "prediction": ["all x y.((Nucleotide(x) & Nucleotide(y)) -> BindToFormDNA(x,y))"]}
{"id": "eqasc_train_4696", "nl": "nucleotides bind together to form RNA", "fol": "", "prediction": ["all x y.((Nucleotide(x) & Nucleotide(y)) -> BindToFormRNA(x,y))"]}
{"id": "eqasc_train_4697", "nl": "DNA strands are long polynucleotide chains.", "fol": "", "prediction": ["all x.(DNAString(x) -> LongPolynucleotideChain(x))"]}
{"id": "eqasc_train_4698", "nl": "DNA strands are called a polynucleotide", "fol": "", "prediction": ["all x.((DNAString(x) & Polynucleotide(x)) -> Polynucleotide(x))"]}
{"id": "eqasc_train_4699", "nl": "Proteins and polynucleotides are thermodynamically unstable.", "fol": "", "prediction": ["all x.((Protein(x) | Polynucleotide(x)) -> ThermodynamicallyInstabil(x))"]}
{"id": "eqasc_train_4700", "nl": "many nucleotides bind together to form a chain of something that is thermodynamically unstable to proteins.", "fol": "", "prediction": ["all x y.((Nucleotide(x) & Nucleotide(y)) -> BindToFormChain(x,y))"]}
{"id": "eqasc_train_4701", "nl": "polynucleotides are the building blocks of DNA", "fol": "", "prediction": ["all x.(Polynucleotide(x) -> BuildingBlocksOfDNA(x))"]}
{"id": "eqasc_train_4702", "nl": "Many nucleotides will bind together to form RNA and DNA", "fol": "", "prediction": ["all x y.((Nucleotide(x) & Nucleotide(y)) -> BindToForm(x,y))"]}
{"id": "eqasc_train_4703", "nl": "The building blocks of DNA bind together to form a chain called a polynucleotide.", "fol": "", "prediction": ["all x.((BuildingBlocksOfDNA(x) & BindToFormChain(x)) -> Polynucleotide(x))"]}
{"id": "eqasc_train_4704", "nl": "Mutations that lead to cancer usually occur in genes that control the cell cycle.", "fol": "", "prediction": ["all x.((Mutation(x) & LeadsToCancer(x)) -> OccursInGenes(x))"]}
{"id": "eqasc_train_4705", "nl": "Many carcinogens are capable of causing gene mutations.", "fol": "", "prediction": ["all x.(CausesGeneMutations(x) -> Carcinogen(x))"]}
{"id": "eqasc_train_4706", "nl": "Carcinogens can lead to cancer in genes that control the cell cycle", "fol": "", "prediction": ["all x y.((Carcinogen(x) & Gene(y) & ControlsCellCycle(y)) -> LeadsToCancer(x,y))"]}
{"id": "eqasc_train_4707", "nl": "Free radicals can mutate genes and eventually lead to cancer or cell death.", "fol": "", "prediction": ["all x.(FreeRadical(x) -> (MutulatesGenes(x) & (LeadsToCancer(x) | LeadsToCellDeath(x))))"]}
{"id": "eqasc_train_4708", "nl": "Free radicals that eventually lead to cell death usually occur in genes that control the cell cycle", "fol": "", "prediction": ["all x y.((FreeRadian(x) & CellDeath(y)) -> (OccursInGenes(x,y) & ControlsCellCycle(x)))"]}
{"id": "eqasc_train_4709", "nl": "Mitosis is part of the cell cycle.", "fol": "", "prediction": ["all x.(Mitosis(x) -> CellCycle(x))"]}
{"id": "eqasc_train_4710", "nl": "Mutations that lead to cancer usually occur in genes aiding in mitosis.", "fol": "", "prediction": ["all x.((Mutations(x) & LeadsToCancer(x)) -> OccursInGenesAidingInMitosis(x))"]}
{"id": "eqasc_train_4711", "nl": "Radiation destroys cells and can cause genetic mutations.", "fol": "", "prediction": ["all x.(Radiation(x) -> (DestroysCells(x) & CausesGeneticMutation(x)))"]}
{"id": "eqasc_train_4712", "nl": "radiation can cause cancer.", "fol": "", "prediction": ["all x.(Radiation(x) -> CanCauseCancer(x))"]}
{"id": "eqasc_train_4713", "nl": "Radiation causes mutation.", "fol": "", "prediction": ["all x.(Radiation(x) -> CausesMutation(x))"]}
{"id": "eqasc_train_4714", "nl": "radiation can affect genes that control the cell cycle", "fol": "", "prediction": ["all x y.((Radiation(x) & Gene(y) & ControlsCellCycle(y)) -> CanAffect(x,y))"]}
{"id": "eqasc_train_4715", "nl": "a mutation in cells usually occur in genes that control the cell cycle", "fol": "", "prediction": ["all x y.((Cell(x) & Mutation(y)) -> (OccursInGenes(y,x) & ControlsCellCycle(y)))"]}
{"id": "eqasc_train_4716", "nl": "Mutations in genes that control the cell cycle are found in virtually all cancer cells.", "fol": "", "prediction": ["all x.((Gene(x) & ControlsCellCycle(x)) -> FoundInCancerousCells(x))"]}
{"id": "eqasc_train_4717", "nl": "mutations are found in genes", "fol": "", "prediction": ["all x y.((Mutation(x) & Gene(y)) -> FoundIn(x,y))"]}
{"id": "eqasc_train_4718", "nl": "mutations that lead to leukemia usually occur in genes that control the cell cycle", "fol": "", "prediction": ["all x y.((Mutation(x) & Leukemia(y)) -> (OccursInGenes(x,y) & ControlsCellCycle(x)))"]}
{"id": "eqasc_train_4719", "nl": "Mutations can be inherited if the cells undergo meiosis or mitosis.", "fol": "", "prediction": ["all x.((Cell(x) & (UndergoesMeiosis(x) | UndergoesMitosis(x))) -> MutationsCanBeHeritaged(x))"]}
{"id": "eqasc_train_4720", "nl": "cancer can be inherited", "fol": "", "prediction": ["all x.(Cancer(x) -> (CanBeHeritaged(x) & CanBeEarned(x)))"]}
{"id": "eqasc_train_4721", "nl": "Cell division is how organisms grow and repair themselves.", "fol": "", "prediction": ["all x.(CellDividend(x) -> (OrganismsGrow(x) & OrganismsRepair(x)))"]}
{"id": "eqasc_train_4722", "nl": "Every cell in the body requires protein for normal function.", "fol": "", "prediction": ["all x.(Cell(x) -> RequiresProtein(x))"]}
{"id": "eqasc_train_4723", "nl": "organisms require protein to repair themselves", "fol": "", "prediction": ["all x.(Organism(x) -> RequiresProtein(x))"]}
{"id": "eqasc_train_4724", "nl": "Cell Division Cell Division Cell division is the method used by cells to reproduce.", "fol": "", "prediction": ["all x.(CellDividend(x) -> CellDividend(x))"]}
{"id": "eqasc_train_4725", "nl": "the method used by cells to reproduce is how organisms grow and repair themselves", "fol": "", "prediction": ["all x y z.((Cell(x) & Organism(y) & Method(z) & GrowsAndRepairs(y,z)) -> Reproduces(x,y,z))"]}
{"id": "eqasc_train_4726", "nl": "Mitosisis how organisms grow and repair themselves", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y)) -> (Grows(x,y) & Repairs(x,y)))"]}
{"id": "eqasc_train_4727", "nl": "Mitosis is how organisms grow and repair themselves.", "fol": "", "prediction": ["all x.(Mitosis(x) -> (GrowsOrganisms(x) & RepairsOrganisms(x)))"]}
{"id": "eqasc_train_4728", "nl": "cell division is how humans grow and repair themselves", "fol": "", "prediction": ["all x y.((Human(x) & CellDivision(y)) -> (Grows(x,y) & Repairs(x,y)))"]}
{"id": "eqasc_train_4729", "nl": "Mitosis is how organisms grown and repair themselves.", "fol": "", "prediction": ["all x.(Mitosis(x) -> (GrowsOrganisms(x) & RepairsOrganisms(x)))"]}
{"id": "eqasc_train_4730", "nl": "Organisms grow up to resemble their parents.", "fol": "", "prediction": ["all x.(Organism(x) -> GrowsUpToReresembleParents(x))"]}
{"id": "eqasc_train_4731", "nl": "Cell division leads to organisms growth", "fol": "", "prediction": ["all x y.((CellDividend(x) & Organism(y)) -> LeadsToGrowth(x,y))"]}
{"id": "eqasc_train_4732", "nl": "Plants are amazingly adaptable organisms.", "fol": "", "prediction": ["all x.(Plant(x) -> AmazinglyAdaptableOrganism(x))"]}
{"id": "eqasc_train_4733", "nl": "cell division is how plants grow and repair themselves", "fol": "", "prediction": ["all x y.((Plant(x) & Plant(y)) -> (Grows(x,y) & Repairs(x,y)))"]}
{"id": "eqasc_train_4734", "nl": "mitosis is how organisms grow and repair themselves.", "fol": "", "prediction": ["all x.(Mitosis(x) -> (Organism(x) & Grows(x) & Repairs(x)))"]}
{"id": "eqasc_train_4735", "nl": "mitosis is required by division", "fol": "", "prediction": ["all x.((Division(x) & RequiredMitosis(x)) -> Requires(x,Division))"]}
{"id": "eqasc_train_4736", "nl": "Organisms grow and repair themselves through mitosis.", "fol": "", "prediction": ["all x.(Organism(x) -> (Grows(x) & Repairs(x) & ThroughMitosis(x)))"]}
{"id": "eqasc_train_4737", "nl": "Viruses often infect bacteria.", "fol": "", "prediction": ["all x.(Virus(x) -> InfectsBacteria(x))"]}
{"id": "eqasc_train_4738", "nl": "Rhizobium bacteria are native soil bacteria and non pathogenic.", "fol": "", "prediction": ["all x.(RhizobiumBacteria(x) -> (NativeSoilBacteria(x) & -Pathogenic(x)))"]}
{"id": "eqasc_train_4739", "nl": "Viruses can infect rhizobium", "fol": "", "prediction": ["all x y.((Virus(x) & Rhizobium(y)) -> Infects(x,y))"]}
{"id": "eqasc_train_4740", "nl": "Infected birds spread the bacteria in their droppings.", "fol": "", "prediction": ["all x.(InfectedBird(x) -> SpreadsBacteriaInDrops(x))"]}
{"id": "eqasc_train_4741", "nl": "Viruses often can spread bacteria through droppings", "fol": "", "prediction": ["all x y.((Virus(x) & Bacteria(y)) -> SpreadsThroughDroppings(x,y))"]}
{"id": "eqasc_train_4742", "nl": "Bacteria are prokaryotes because they lack a clearly defined nucleus and sub-cellular organelles.", "fol": "", "prediction": ["all x.((Bacteria(x) & LacksClearlyDefinedNucleus(x) & LacksSubcellularOrganelles(x)) -> Prokaryotes(x))"]}
{"id": "eqasc_train_4743", "nl": "viruses often infect prokaryotes", "fol": "", "prediction": ["all x y.((Virus(x) & Prokaryote(y)) -> Infects(x,y))"]}
{"id": "eqasc_train_4744", "nl": "the simplest known organisms often infect bacteria", "fol": "", "prediction": ["all x.((SimplestKnownOrganism(x) & InfectsBacteria(x)) -> InfectsBacteria(x))"]}
{"id": "eqasc_train_4745", "nl": "Antibiotics kill the good bacteria along with the bad bacteria.", "fol": "", "prediction": ["all x y.((Antibiotic(x) & GoodBacteria(y) & BadBacteria(z)) -> Kills(x,y,z))"]}
{"id": "eqasc_train_4746", "nl": "Viruses often infect something killed by antibiotics", "fol": "", "prediction": ["all x y.((Virus(x) & Antibiotic(y)) -> Infects(x,y))"]}
{"id": "eqasc_train_4747", "nl": "Often the children are also infected with the virus.", "fol": "", "prediction": ["all x.(Child(x) -> InfectedWithVirus(x))"]}
{"id": "eqasc_train_4748", "nl": "children are also infected with the virus and bacteria", "fol": "", "prediction": ["all x.(Child(x) -> (InfectedWithVirus(x) & InfectedWithBacteria(x)))"]}
{"id": "eqasc_train_4749", "nl": "Phages, or bacteriophages are viruses that infect bacteria.", "fol": "", "prediction": ["all x.(Phage(x) -> (InfectsBacteria(x) | InfectsBacteria(x)))"]}
{"id": "eqasc_train_4750", "nl": "Bacteriophages infect bacteria", "fol": "", "prediction": ["all x y.((Bacteria(x) & Bacteria(y)) -> Infects(x,y))"]}
{"id": "eqasc_train_4751", "nl": "Bacteria are normally classified as either 'good' bacteria or 'bad' bacteria.", "fol": "", "prediction": ["all x.(Bacteria(x) -> (Good(x) | Bad(x)))"]}
{"id": "eqasc_train_4752", "nl": "Viruses can infect good and bad types.", "fol": "", "prediction": ["all x.(Virus(x) -> (InfectsGoodTypes(x) | InfectsBadTypes(x)))"]}
{"id": "eqasc_train_4753", "nl": "Influenza viruses are restless.", "fol": "", "prediction": ["all x.(InfluenzaVirus(x) -> Restless(x))"]}
{"id": "eqasc_train_4754", "nl": "influenza can infect bacteria", "fol": "", "prediction": ["all x.(Influenza(x) -> InfectsBacteria(x))"]}
{"id": "eqasc_train_4755", "nl": "Plants release oxygen during the day but not during the night.", "fol": "", "prediction": ["all x.(Plant(x) -> (ReleasesOxygen(x,Day) & -ReleasesOxygen(x,Night)))"]}
{"id": "eqasc_train_4756", "nl": "bushes release oxygen during the day but not during the night", "fol": "", "prediction": ["all x.(Bush(x) -> (ReleasesOxygen(x,Day) & -ReleasesOxygen(x,Night)))"]}
{"id": "eqasc_train_4757", "nl": "Many plants alter their position when they go to sleep at night.", "fol": "", "prediction": ["all x.((Plant(x) & SleepAtNight(x)) -> AltersPosition(x))"]}
{"id": "eqasc_train_4758", "nl": "Plants release oxygen during the day and alter their position to sleep in the evening", "fol": "", "prediction": ["all x.(Plant(x) -> (ReleasesOxygen(x) & AltersPositionToSleep(x)))"]}
{"id": "eqasc_train_4759", "nl": "When it is day the sun is out.", "fol": "", "prediction": ["all x.((Day(x) & SunOut(x)) -> SunOut(x))"]}
{"id": "eqasc_train_4760", "nl": "Plants release oxygen when the sun is out", "fol": "", "prediction": ["all x y.((Plant(x) & SunOut(y)) -> ReleasesOxygen(x,y))"]}
{"id": "eqasc_train_4761", "nl": "Algae produce oxygen during the day through photosynthesis.", "fol": "", "prediction": ["all x.(Algae(x) -> (ProducesOxygen(x) & Day(x) & Photosynthesis(x)))"]}
{"id": "eqasc_train_4762", "nl": "Plants photosynthesize during the day but not during the night", "fol": "", "prediction": ["all x.(Plant(x) -> (PhotosynthesizesDuringDay(x) & -PhotosynthesizesDuringNight(x)))"]}
{"id": "eqasc_train_4763", "nl": "Ferns are seedless vascular plants.", "fol": "", "prediction": ["all x.(Fern(x) -> SeedlessVascularPlant(x))"]}
{"id": "eqasc_train_4764", "nl": "ferns release oxygen during the day but not during the night", "fol": "", "prediction": ["all x.(Fern(x) -> (ReleasesOxygen(x) & -ReleasesOxygen(x) & Day(x) & -Night(x)))"]}
{"id": "eqasc_train_4765", "nl": "All plants are trees.", "fol": "", "prediction": ["all x.(Plant(x) -> Tree(x))"]}
{"id": "eqasc_train_4766", "nl": "Trees release oxygen during the day but not at night.", "fol": "", "prediction": ["all x.(Tree(x) -> (ReleasesOxygen(x,Day) & -ReleasesOxygen(x,Night)))"]}
{"id": "eqasc_train_4767", "nl": "Plants include blue pine, hemlock, spruce and oak.", "fol": "", "prediction": ["all x.(Plant(x) -> (BluePine(x) | Hemlock(x) | Spruce(x) | Oak(x)))"]}
{"id": "eqasc_train_4768", "nl": "Blue pine releases oxygen during the day but not during the night", "fol": "", "prediction": ["all x.(BluePine(x) -> (ReleasesOxygen(x) & -ReleasesOxygen(x) & Day(x) & -Night(x)))"]}
{"id": "eqasc_train_4769", "nl": "Bulbs planted over the years include tulips and daffodils.", "fol": "", "prediction": ["all x.(Bulbs(x) -> (PlantedOverYears(x) & (Tulips(x) | Daffodils(x))))"]}
{"id": "eqasc_train_4770", "nl": "tulips release oxygen during the day but not during the night", "fol": "", "prediction": ["all x.(Tulp(x) -> (ReleasesOxygen(x) & Day(x) & -Night(x)))"]}
{"id": "eqasc_train_4771", "nl": "Oxygen exchange is needed for plant respiration.", "fol": "", "prediction": ["all x.(OxygenExchange(x) -> NeededForPlantRespiration(x))"]}
{"id": "eqasc_train_4772", "nl": "Plant respiration occurs during the day but not during the night.", "fol": "", "prediction": ["all x.(PlantRespiration(x) -> (OccursDuringDay(x) & -OccursDuringNight(x)))"]}
{"id": "eqasc_train_4773", "nl": "All orange trees are plants.", "fol": "", "prediction": ["all x.(OrangeTree(x) -> Plant(x))"]}
{"id": "eqasc_train_4774", "nl": "Orange trees release oxygen during the day but not at night.", "fol": "", "prediction": ["all x.(OrangeTree(x) -> (ReleasesOxygen(x,Day) & -ReleasesOxygen(x,Night)))"]}
{"id": "eqasc_train_4775", "nl": "Another kind of plant is the fishhook cactus.", "fol": "", "prediction": ["all x.(FishhookCactus(x) -> Plant(x))"]}
{"id": "eqasc_train_4776", "nl": "The fishhook cactus releases oxygen during the day but not during the night.", "fol": "", "prediction": ["all x.(FishhookCactus(x) -> (ReleasesOxygen(x,Day) & -ReleasesOxygen(x,Night)))"]}
{"id": "eqasc_train_4777", "nl": "Oxygen from the air is needed by the body in order to live.", "fol": "", "prediction": ["all x y.((Oxygen(x) & Body(y)) -> NeededInOrganic(x,y))"]}
{"id": "eqasc_train_4778", "nl": "plants help the body live during the day but not during the night", "fol": "", "prediction": ["all x.(Plant(x) -> (HelpsBodyLive(x) & -HelpsBodyLive(x) & -HelpsBodyLive(x) & -HelpsBodyLive(x) & -HelpsBodyLive(x) & -HelpsBodyLive(x) & -HelpsBodyLive(x) & -HelpsBodyLive(x)))"]}
{"id": "eqasc_train_4779", "nl": "melting means changing from a solid into a liquid by adding heat energy", "fol": "", "prediction": ["all x y z.((Melting(x) & Solid(y) & Liquid(z)) -> (ChangesFromTo(x,y,z) & AddsHeatEnergy(x)))"]}
{"id": "eqasc_train_4780", "nl": "Heat energy from the sun is stored in the earth.", "fol": "", "prediction": ["all x y.((Sun(x) & Earth(y)) -> StoresHeatEnergy(x,y))"]}
{"id": "eqasc_train_4781", "nl": "Melting means changing from a solid into a liquid by adding heat from the sun.", "fol": "", "prediction": ["all x y.((Solid(x) & Liquid(y)) -> Melts(x,y))"]}
{"id": "eqasc_train_4782", "nl": "Ice Sculptures melt away.", "fol": "", "prediction": ["all x.(IceSculpture(x) -> MeltsAway(x))"]}
{"id": "eqasc_train_4783", "nl": "Ice sculptures turn to liquid from heat energy.", "fol": "", "prediction": ["all x.(IceSculpture(x) -> TurnsToLiquidFromHeatEnergy(x))"]}
{"id": "eqasc_train_4784", "nl": "When a substance melts, it changes phase from a solid to a liquid by the application of heat.", "fol": "", "prediction": ["all x.((Substance(x) & Melts(x)) -> ChangesPhase(x,Solid,Liquid))"]}
{"id": "eqasc_train_4785", "nl": "Changing the phase of a solid can be done by adding heat energy.", "fol": "", "prediction": ["all x y.((Solid(x) & Solid(y)) -> (AddsHeatEnergy(x,y)))"]}
{"id": "eqasc_train_4786", "nl": "melting means changing from a solid into a liquid by increasing temperature", "fol": "", "prediction": ["all x y z.((Melting(x) & Solid(y) & Liquid(z)) -> (ChangesFromTo(x,y,z) & IncreasesTemperature(x)))"]}
{"id": "eqasc_train_4787", "nl": "Fire gives heat energy plus light.", "fol": "", "prediction": ["all x.(Fire(x) -> (GivesHeatEnergy(x) & GivesLight(x)))"]}
{"id": "eqasc_train_4788", "nl": "Fire can change solid ice to liquid water. ", "fol": "", "prediction": ["all x y.((Fire(x) & SolidIce(y)) -> CanChangeToLiquidWater(x,y))"]}
{"id": "eqasc_train_4789", "nl": "melting changes ice to water by adding heat energy", "fol": "", "prediction": ["all x y.((Melting(x) & Ice(y) & Water(y)) -> (Changes(x,y) & AddsHeatEnergy(x)))"]}
{"id": "eqasc_train_4790", "nl": "Melting something is changing phases with heat and is measured in joules", "fol": "", "prediction": ["all x y.((Melting(x) & Heat(y)) -> (ChangesPhasesWith(x,y) & MeasuredInJules(x)))"]}
{"id": "eqasc_train_4791", "nl": "Energy is needed to melt the ice.", "fol": "", "prediction": ["all x.((Energy(x) & MeltsIce(x)) -> Needed(x))"]}
{"id": "eqasc_train_4792", "nl": "ice changes from a solid to a liquid by adding heat energy", "fol": "", "prediction": ["all x y.((Ice(x) & Solid(y) & Liquid(x)) -> Changes(x,y))"]}
{"id": "eqasc_train_4793", "nl": "Melting is a phase change.", "fol": "", "prediction": ["all x.(Melting(x) -> PhaseChange(x))"]}
{"id": "eqasc_train_4794", "nl": "A phase change changes a solid into a liquid using heat energy", "fol": "", "prediction": ["all x y z.((PhaseChange(x) & Solid(y) & Liquid(z)) -> ChangesUsingHeatEnergy(x,y,z))"]}
{"id": "eqasc_train_4795", "nl": "a plant requires nutrients to grow", "fol": "", "prediction": ["all x.((Plant(x) & RequiresNutrients(x)) -> Grows(x))"]}
{"id": "eqasc_train_4796", "nl": "Fertilizers add nutrients to the soil.", "fol": "", "prediction": ["all x.(Fertilizer(x) -> AddsNutrientsToSoil(x))"]}
{"id": "eqasc_train_4797", "nl": "Fertilizers help plants grow", "fol": "", "prediction": ["all x y.((Fertilizer(x) & Plant(y)) -> HelpsGrow(x,y))"]}
{"id": "eqasc_train_4798", "nl": "bamboo require nutrients to grow", "fol": "", "prediction": ["all x.(Bamboo(x) -> RequiresNutrientsToGrow(x))"]}
{"id": "eqasc_train_4799", "nl": "Potassium is an essential nutrient for plants and animals.", "fol": "", "prediction": ["all x.(Potassium(x) -> (EssentialNutrient(x) & ForPlantsAndAnimals(x)))"]}
{"id": "eqasc_train_4800", "nl": "A plant requires potassium to grow", "fol": "", "prediction": ["all x.((Plant(x) & RequiresKapium(x)) -> Grows(x))"]}
{"id": "eqasc_train_4801", "nl": "Legumes are typical of that type of plant.", "fol": "", "prediction": ["all x.(Legume(x) -> TypicalOfTypeOfPlant(x))"]}
{"id": "eqasc_train_4802", "nl": "legumes require nutrients to grow", "fol": "", "prediction": ["all x.(Legumes(x) -> RequiresNutrientsToGrow(x))"]}
{"id": "eqasc_train_4803", "nl": "bushes require nutrients to grow", "fol": "", "prediction": ["all x.(Bush(x) -> RequiresNutrientsToGrow(x))"]}
{"id": "eqasc_train_4804", "nl": "Nutrient density is the nutrient to calorie ratio of the food supply.", "fol": "", "prediction": ["all x.(NutrientDensity(x) -> NutrientToCalorieRatio(x))"]}
{"id": "eqasc_train_4805", "nl": "A plant requires a food supply to grow.", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresFoodSupply(x))"]}
{"id": "eqasc_train_4806", "nl": "Carbon dioxide is a plant nutrient.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> PlantNutrient(x))"]}
{"id": "eqasc_train_4807", "nl": "plants require carbon dioxide", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresCarbonDioxide(x))"]}
{"id": "eqasc_train_4808", "nl": "Plants grown included roses.", "fol": "", "prediction": ["all x.((Plant(x) & GrownIn(x,roses)) -> GrownIn(x,roses))"]}
{"id": "eqasc_train_4809", "nl": "A rose requires nutrients to grow", "fol": "", "prediction": ["all x.(Rose(x) -> RequiresNutrientsToGrow(x))"]}
{"id": "eqasc_train_4810", "nl": "orchids require nutrients to grow", "fol": "", "prediction": ["all x.(Orchid(x) -> RequiresNutrientsToGrow(x))"]}
{"id": "eqasc_train_4811", "nl": "Plants infested are maple, poplar, basswood, and elm.", "fol": "", "prediction": ["all x.((Plant(x) & Infested(x)) -> (Maple(x) | Poplar(x) | Basswood(x) | Elm(x)))"]}
{"id": "eqasc_train_4812", "nl": "elms require nutrients to grow", "fol": "", "prediction": ["all x.(Elm(x) -> RequiresNutrientsToGrow(x))"]}
{"id": "eqasc_train_4813", "nl": "Food Potash is an essential plant nutrient.", "fol": "", "prediction": ["all x.(FoodPotash(x) -> EssentialPlantNutrient(x))"]}
{"id": "eqasc_train_4814", "nl": "Plants require potash to grow", "fol": "", "prediction": ["all x.((Plant(x) & RequiresPotash(x)) -> Grows(x))"]}
{"id": "eqasc_train_4815", "nl": "Nutrients are naturally present in the soil and are found as either minerals or elements.", "fol": "", "prediction": ["all x.(Nutrient(x) -> (NaturallyPresentInSoil(x) & (Minerals(x) | Elements(x))))"]}
{"id": "eqasc_train_4816", "nl": "a plant requires  soil to grow", "fol": "", "prediction": ["all x y.((Plant(x) & Soil(y)) -> RequiresToGrow(x,y))"]}
{"id": "eqasc_train_4817", "nl": "Plants require rich soil to grow.", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresRichSoil(x))"]}
{"id": "eqasc_train_4818", "nl": "A plant requires carbon dioxide for growth", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresCarbonDioxide(x))"]}
{"id": "eqasc_train_4819", "nl": "Major plant nutrients are phosphorus and nitrogen.", "fol": "", "prediction": ["all x.(PlantNutrient(x) -> (Phosphorus(x) | Nitrogen(x)))"]}
{"id": "eqasc_train_4820", "nl": "a plant requires phosphorus and nitrogen to grow", "fol": "", "prediction": ["all x y.((Plant(x) & Phosphor(y) & Nitrogen(y)) -> RequiresToGrow(x,y))"]}
{"id": "eqasc_train_4821", "nl": "Male dogs use pheromones in urine to mark their territory.", "fol": "", "prediction": ["all x.(MaleDog(x) -> UsesPheromonesInUrine(x))"]}
{"id": "eqasc_train_4822", "nl": "Pheromones are hormones that are thought to stimulate, through smell, sexual reactions in animals.", "fol": "", "prediction": ["all x.(Pheromone(x) -> (Hormone(x) & StimulatesSexualReactions(x) & ThroughSmell(x)))"]}
{"id": "eqasc_train_4823", "nl": "male dogs use smell to mark their territory", "fol": "", "prediction": ["all x.(Dog(x) -> (UsesSmell(x) & MarksTerritory(x)))"]}
{"id": "eqasc_train_4824", "nl": "Pheromones are natural aphrodisiacs.", "fol": "", "prediction": ["all x.(Pheromone(x) -> NaturalAphrodisiac(x))"]}
{"id": "eqasc_train_4825", "nl": "male dogs use natural aphrodisiacs in urine to mark their territory", "fol": "", "prediction": ["all x.((Dog(x) & Male(x)) -> UsesNaturalAphrodisiacsInUrine(x))"]}
{"id": "eqasc_train_4826", "nl": "Pheromones are a sub-category of semiochemicals.", "fol": "", "prediction": ["all x.(Pheromone(x) -> SubCategoryOfSemiochemicals(x))"]}
{"id": "eqasc_train_4827", "nl": "Male dogs use semiochemicals in urine to mark their territory.", "fol": "", "prediction": ["all x.(MaleDog(x) -> UsesSemiochemicalsInUrine(x))"]}
{"id": "eqasc_train_4828", "nl": "All animals emit pheromones to mate.", "fol": "", "prediction": ["all x.(Animal(x) -> EmitsPheromonesToMate(x))"]}
{"id": "eqasc_train_4829", "nl": "Male dogs use urine to mark their territory the same way as they find mates", "fol": "", "prediction": ["all x y.((MaleDog(x) & Territories(y)) -> MarksTerritory(x,y))"]}
{"id": "eqasc_train_4830", "nl": "For a male, urine markings are used to define the boundaries of their territory.", "fol": "", "prediction": ["all x.(Male(x) -> UsesUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUsedUUsedUseUUsedUUseUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU"]}
{"id": "eqasc_train_4831", "nl": "male dogs use pheromones in urine markings to define boundaries", "fol": "", "prediction": ["all x y.((Dog(x) & Male(y)) -> UsesPheromonesInUrineMarkings(x,y))"]}
{"id": "eqasc_train_4832", "nl": "Coyotes maintain their territory by marking it with urine.", "fol": "", "prediction": ["all x.(Coyote(x) -> (MaintainsTerritory(x) & MarksWithUrine(x)))"]}
{"id": "eqasc_train_4833", "nl": "Male dogs use pheromones in urine to maintain their territory", "fol": "", "prediction": ["all x.((Dog(x) & Male(x)) -> UsesPheromonesInUrine(x))"]}
{"id": "eqasc_train_4834", "nl": "Males produce 'pheromones' to attract females.", "fol": "", "prediction": ["all x y.((Male(x) & Female(y)) -> ProducesPheromones(x,y))"]}
{"id": "eqasc_train_4835", "nl": "Male dogs use something that attracts females in urine to mark their territory.", "fol": "", "prediction": ["all x.((MaleDog(x) & AttractsFemales(x)) -> MarksTerritory(x))"]}
{"id": "eqasc_train_4836", "nl": "Male dogs use chemicals to mark their territory.", "fol": "", "prediction": ["all x.(MaleDog(x) -> UsesChemicalsToMarkTerritory(x))"]}
{"id": "eqasc_train_4837", "nl": "Male dogs use natural aphrodisiacs in urine to mark their territory.", "fol": "", "prediction": ["all x.(MaleDog(x) -> UsesNaturalAphrodisiacsInUrine(x))"]}
{"id": "eqasc_train_4838", "nl": "During Urination Dog's urine is used as a scent marker for other dogs.", "fol": "", "prediction": ["all x y.((Dog(x) & Urination(y)) -> ScentMarker(x,y))"]}
{"id": "eqasc_train_4839", "nl": "Male dogs mark their territory with a scent marker.", "fol": "", "prediction": ["all x.(MaleDog(x) -> MarksTerritoryWithScentMarker(x))"]}
{"id": "eqasc_train_4840", "nl": "Pheromones are chemicals produced by insects to communicate.", "fol": "", "prediction": ["all x.(Pheromone(x) -> (ProducedByInsects(x) & Communicate(x)))"]}
{"id": "eqasc_train_4841", "nl": "male dogs use chemicals in urine to mark their territory", "fol": "", "prediction": ["all x.(Dog(x) -> (UsesChemicalsInUrine(x) & MarksTerritory(x)))"]}
{"id": "eqasc_train_4842", "nl": "Generally, pheromones are volatile substances.", "fol": "", "prediction": ["all x.(Pheromone(x) -> VolatileSubstance(x))"]}
{"id": "eqasc_train_4843", "nl": "Male dogs use volatile substances in urine to mark their territory.", "fol": "", "prediction": ["all x.(MaleDog(x) -> UsesVolatileSubstancesInUrine(x))"]}
{"id": "eqasc_train_4844", "nl": "Cytokinesis is the final stage of cell division in eukaryotes as well as prokaryotes.", "fol": "", "prediction": ["all x y.((Cytokinesis(x) & Eukaryote(y) & Prokaryote(y)) -> FinalStageOfCellDividence(x,y))"]}
{"id": "eqasc_train_4845", "nl": "Cytokinesis is the final stage of mitosis", "fol": "", "prediction": ["all x.(Cytokinesis(x) -> FinalStageOfMitosis(x))"]}
{"id": "eqasc_train_4846", "nl": "Division of the cytoplasm is known as cytokinesis .", "fol": "", "prediction": ["all x.(Cytoplasma(x) -> Cytokinis(x))"]}
{"id": "eqasc_train_4847", "nl": "Division of the cytoplasm is the final stage of cell division in eukaryotes", "fol": "", "prediction": ["all x y.((Eukaryote(x) & Eukaryote(y)) -> CellDividend(x,y))"]}
{"id": "eqasc_train_4848", "nl": "cytokinesis is the final stage of mitosis", "fol": "", "prediction": ["all x.(Cytokinesis(x) -> FinalStageOfMitosis(x))"]}
{"id": "eqasc_train_4849", "nl": "Cell division involves a form of mitosis.", "fol": "", "prediction": ["all x.(CellDividend(x) -> InvolvesMitosis(x))"]}
{"id": "eqasc_train_4850", "nl": "cytokinesis is the final stage of mitosis in eukaryotes as well as prokaryotes.", "fol": "", "prediction": ["all x y.((Cytokinesis(x) & Eukaryote(y) & Prokaryote(y)) -> FinalStageOfMitosis(x,y))"]}
{"id": "eqasc_train_4851", "nl": "During cytokinesis , the cell body splits into two cells.", "fol": "", "prediction": ["all x y.((Cytokinesis(x) & CellBody(y)) -> SplitsIntoTwoCells(y,x))"]}
{"id": "eqasc_train_4852", "nl": "the cell body splits into two cells during the final stage of cell division in eukaryotes", "fol": "", "prediction": ["all x y.((CellBody(x) & Eukaryote(y)) -> SplitsIntoTwoCells(x,y))"]}
{"id": "eqasc_train_4853", "nl": "Splitting into two cells is the final stage of cell division in eukaryotes as well as prokaryotes.", "fol": "", "prediction": ["all x y.((Eukaryote(x) & Prokaryote(y)) -> (SplittingIntoTwoCells(x,y) & FinalStageOfCellDividence(x,y)))"]}
{"id": "eqasc_train_4854", "nl": "Cytokinesis Cytokinesis, the process of cytoplasmic division, begins during telophase of mitosis.", "fol": "", "prediction": ["all x.(Cytokinesis(x) -> (Cytokinesis(x) & TelophaseOfMitosis(x)))"]}
{"id": "eqasc_train_4855", "nl": "cytoplasmic division is the final stage of cell division in eukaryotes as well as prokaryotes", "fol": "", "prediction": ["all x y.((CytoplasmicDiversity(x) & Eukaryote(y) & Prokaryote(y)) -> FinalStageOfCellDiversity(x,y))"]}
{"id": "eqasc_train_4856", "nl": "ctyokinesis is the final stage of cell division in eukaryotes and bactera", "fol": "", "prediction": ["all x y.((Ctyokinesis(x) & Eukaryote(y) & Bacteria(y)) -> CellDivisionFinalStage(x,y))"]}
{"id": "eqasc_train_4857", "nl": "Cytokinesis is the final stage of cell division in plants.", "fol": "", "prediction": ["all x.(Cytokinesis(x) -> CellDivision(x))"]}
{"id": "eqasc_train_4858", "nl": "Cytokinesis Two daughter cells are formed.", "fol": "", "prediction": ["Cytokinesis (DaughterCell(x) & Formed(x))"]}
{"id": "eqasc_train_4859", "nl": "Two daughter cells are formed in the final stage of cell division in eukaryotes and prokaryotes", "fol": "", "prediction": ["all x y z.((DaughterCell(x) & Eukaryote(y) & Prokaryote(z)) -> (FormedInFinalStageOfCellDividence(x,y,z) & (Eukaryote(y) | Prokaryote(y))))"]}
{"id": "eqasc_train_4860", "nl": "Division of the cytoplasm is the final stage of cell division in eukaryotes as well as prokaryotes", "fol": "", "prediction": ["all x y.((Cytoplasma(x) & Eukaryote(y) & Prokaryote(y)) -> CellDividence(x,y))"]}
{"id": "eqasc_train_4861", "nl": "Conventional myosin is required for cytokinesis .", "fol": "", "prediction": ["all x.(ConventionalMyosin(x) -> RequiresForCytokinisis(x))"]}
{"id": "eqasc_train_4862", "nl": "Conventional myosin is required for the final stage of cell division.", "fol": "", "prediction": ["all x.(ConventionalMyosin(x) -> RequiresForFinalStageOfCellDividetion(x))"]}
{"id": "eqasc_train_4863", "nl": "Bacteria and cyanobacteria are prokaryotic organisms.", "fol": "", "prediction": ["all x.((Bacteria(x) | Cyanobacteria(x)) -> ProkaryoticOrganism(x))"]}
{"id": "eqasc_train_4864", "nl": "bacteria undergo cytokinesis", "fol": "", "prediction": ["all x.(Bacteria(x) -> UndergoesCytokinesis(x))"]}
{"id": "eqasc_train_4865", "nl": "animals require water for survival", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresWaterForSurvival(x))"]}
{"id": "eqasc_train_4866", "nl": "Water fills the oceans of the world up to sea-level making it a liquid, a type of fluid.", "fol": "", "prediction": ["all x y.((Water(x) & Ocean(y)) -> FillsToSeaLevel(x,y))"]}
{"id": "eqasc_train_4867", "nl": "Animals require a type of fluid to survive.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresFluid(x))"]}
{"id": "eqasc_train_4868", "nl": "Where there is no water there is drought.", "fol": "", "prediction": ["all x.((NoWater(x) & Drought(x)) -> Drought(x))"]}
{"id": "eqasc_train_4869", "nl": "Drought can negatively impact animal survival", "fol": "", "prediction": ["all x.(Drought(x) -> NegativelyImpactsAnimalSurvival(x))"]}
{"id": "eqasc_train_4870", "nl": "humans require water for survival", "fol": "", "prediction": ["all x.(Human(x) -> RequiresWaterForSurvival(x))"]}
{"id": "eqasc_train_4871", "nl": "Bears are common but elusive animals.", "fol": "", "prediction": ["all x.(Bear(x) -> (Common(x) & Irrefutable(x)))"]}
{"id": "eqasc_train_4872", "nl": "bears require water for survival", "fol": "", "prediction": ["all x.(Bear(x) -> (RequiresWater(x) & SurvivesWith(x)))"]}
{"id": "eqasc_train_4873", "nl": "In order to survive, animals require hydration of their cells.", "fol": "", "prediction": ["all x.((Animal(x) & Hydration(x)) -> Survives(x))"]}
{"id": "eqasc_train_4874", "nl": "cats require water for survival", "fol": "", "prediction": ["all x.(Cat(x) -> RequiresWaterForSurvival(x))"]}
{"id": "eqasc_train_4875", "nl": "If water is scarce, animals and plants die.", "fol": "", "prediction": ["all x.((WaterScarce(x) & Animals(x) & Plants(x)) -> Dies(x))"]}
{"id": "eqasc_train_4876", "nl": "plants will die without water", "fol": "", "prediction": ["all x.(Plant(x) -> DiesWithoutWater(x))"]}
{"id": "eqasc_train_4877", "nl": "Hydrogen and oxygen create water.", "fol": "", "prediction": ["all x.((Hydrogen(x) & Oxygen(x)) -> CreatesWater(x))"]}
{"id": "eqasc_train_4878", "nl": "Animals require hydrogen and oxygen for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> (RequiresHydrogen(x) & RequiresOxygen(x)))"]}
{"id": "eqasc_train_4879", "nl": "Water is and was the key to life and survival in Palestine.", "fol": "", "prediction": ["all x.(Water(x) -> (KeyToLife(x) & KeyToSurvival(x)))"]}
{"id": "eqasc_train_4880", "nl": "Water is the key to life for animals", "fol": "", "prediction": ["all x.(Water(x) -> KeyToLife(x))"]}
{"id": "eqasc_train_4881", "nl": "Ducks are strange animals.", "fol": "", "prediction": ["all x.(Duck(x) -> StrangeAnimal(x))"]}
{"id": "eqasc_train_4882", "nl": "ducks require water for survival", "fol": "", "prediction": ["all x.(Duck(x) -> RequiresWaterForSurvival(x))"]}
{"id": "eqasc_train_4883", "nl": "Alice's favorite animal is the giraffe.", "fol": "", "prediction": ["(FavoriteAnimal(Alice) & Giraffe(Alice))"]}
{"id": "eqasc_train_4884", "nl": "Giraffes require water for survival.", "fol": "", "prediction": ["all x.(Giraffe(x) -> RequiresWaterForSurvival(x))"]}
{"id": "eqasc_train_4885", "nl": "Mollusks are invertebrates such as the common snail.", "fol": "", "prediction": ["all x.(Mollisk(x) -> (Invertebrate(x) & CommonSnail(x)))"]}
{"id": "eqasc_train_4886", "nl": "An invertebrate is an animal that has no spine, or backbone.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> (Animal(x) & -Spine(x) & -Backbone(x)))"]}
{"id": "eqasc_train_4887", "nl": "snails have no backbone", "fol": "", "prediction": ["all x.(Snail(x) -> -HasBackbone(x))"]}
{"id": "eqasc_train_4888", "nl": "Gastropods are snails and slugs.", "fol": "", "prediction": ["all x.(Gastropod(x) -> (Snake(x) | Slug(x)))"]}
{"id": "eqasc_train_4889", "nl": "Mollusks are invertebrates such as gastropods", "fol": "", "prediction": ["all x.(Molllusk(x) -> (Invertebrate(x) & Gastropod(x)))"]}
{"id": "eqasc_train_4890", "nl": "All mollusks come from eggs.", "fol": "", "prediction": ["all x.(Mollusk(x) -> ComesFromEggs(x))"]}
{"id": "eqasc_train_4891", "nl": "The common snail comes from eggs.", "fol": "", "prediction": ["all x.(CommonSnake(x) -> ComesFromEggs(x))"]}
{"id": "eqasc_train_4892", "nl": "Slugs Slugs, a common Garden pest, are snails without a shell.", "fol": "", "prediction": ["all x.(Slug(x) -> (Slug(x) & CommonGardenPest(x) & -Snail(x)))"]}
{"id": "eqasc_train_4893", "nl": "Mollusks are invertebrates such as common garden pests with shells", "fol": "", "prediction": ["all x.(Mollusk(x) -> (Invertebrate(x) & CommonGardenPest(x) & HasShell(x)))"]}
{"id": "eqasc_train_4894", "nl": "Mollusks in the diorama include snails and clams.", "fol": "", "prediction": ["all x.(Mullusk(x) -> (InDiama(x) & (Snail(x) | Clam(x))))"]}
{"id": "eqasc_train_4895", "nl": "clams are mollusks", "fol": "", "prediction": ["all x.(Cam(x) -> Mollusk(x))"]}
{"id": "eqasc_train_4896", "nl": "Another common snail is the decollate snail.", "fol": "", "prediction": ["all x.((Snake(x) & Decollate(x)) -> Common(x))"]}
{"id": "eqasc_train_4897", "nl": "Decollate snails are mollusks. ", "fol": "", "prediction": ["all x.(DecollateSnail(x) -> Mollusk(x))"]}
{"id": "eqasc_train_4898", "nl": "Abalone are marine snails.", "fol": "", "prediction": ["all x.(Abalone(x) -> MarineSnake(x))"]}
{"id": "eqasc_train_4899", "nl": "Mollusks are invertebrates such as the abalone", "fol": "", "prediction": ["all x.(Molllusk(x) -> (Invertebrate(x) & Abalone(x)))"]}
{"id": "eqasc_train_4900", "nl": "Mollusks are bilateraly symetrical and are protostomes.", "fol": "", "prediction": ["all x.(Mollusk(x) -> (BilaterallySymetrical(x) & Protonostome(x)))"]}
{"id": "eqasc_train_4901", "nl": "The common snail is bilaterally symmetrical and a protostome.", "fol": "", "prediction": ["all x.(CommonSnake(x) -> (BilaterallySymmetric(x) & Protonostome(x)))"]}
{"id": "eqasc_train_4902", "nl": "Invertebrates have no backbone.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> -Backbone(x))"]}
{"id": "eqasc_train_4903", "nl": "mollusks have no backbone", "fol": "", "prediction": ["all x.(Mollusk(x) -> -HasBackbone(x))"]}
{"id": "eqasc_train_4904", "nl": "abalone  are invertebrates such as the common snail", "fol": "", "prediction": ["all x.(Abalone(x) -> (Invertebrate(x) & CommonSnail(x)))"]}
{"id": "eqasc_train_4905", "nl": "Snails are protected by a hard shell on their backs.", "fol": "", "prediction": ["all x.(Snail(x) -> ProtectedByHardShell(x))"]}
{"id": "eqasc_train_4906", "nl": "some invertebrates are protected by a hard shell on their backs", "fol": "", "prediction": ["exists x.(Invertebrate(x) & ProtectedByHardShell(x))"]}
{"id": "eqasc_train_4907", "nl": "Invertebrates are animals who lack a backbone or spinal column.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> (LacksBackbone(x) | LacksSpinalColumn(x)))"]}
{"id": "eqasc_train_4908", "nl": "Mollusks are animals who lack a backbone or spinal column.", "fol": "", "prediction": ["all x.(Mollusk(x) -> (LacksBackbone(x) | LacksSpinalColumn(x)))"]}
{"id": "eqasc_train_4909", "nl": "Mollusks, like the snail, are soft-bodied.", "fol": "", "prediction": ["all x.(Mollusk(x) -> (SoftBody(x) & LikeSnail(x)))"]}
{"id": "eqasc_train_4910", "nl": "Amphibians have permeable skin that easily absorbs substances from the environment.", "fol": "", "prediction": ["all x.(Amphibian(x) -> (PermeableSkin(x) & AbsorbsSubstances(x)))"]}
{"id": "eqasc_train_4911", "nl": "Natural Toxins Toxins are poisonous substances from bacterias, plants or animals.", "fol": "", "prediction": ["all x.(NaturalToxin(x) -> (PoisonousSubstance(x) & (Bacteria(x) | Plant(x) | Animal(x))))"]}
{"id": "eqasc_train_4912", "nl": "Amphibians have permeable skin that can easily absorb toxins from bacterias, plants or animals.", "fol": "", "prediction": ["all x.(Amphibian(x) -> (PermeableSkin(x) & AbsorbsToxins(x) & (Bacteria(x) | Plant(x) | Animal(x))))"]}
{"id": "eqasc_train_4913", "nl": "Chemicals can be very toxic to permeable, amphibian skin.", "fol": "", "prediction": ["all x.(Chemical(x) -> (ToxicToPermeableAmphibianSkin(x)))"]}
{"id": "eqasc_train_4914", "nl": "amphibians easily absorb chemicals", "fol": "", "prediction": ["all x.(Amphibian(x) -> AbsorbsChemicalsEasily(x))"]}
{"id": "eqasc_train_4915", "nl": "Some substances are harmful to the body and block biological systems.", "fol": "", "prediction": ["exists x.(Substance(x) & HarmfulToBody(x) & BlocksBiologicalSystems(x))"]}
{"id": "eqasc_train_4916", "nl": "amphibians permeable skin can harm them", "fol": "", "prediction": ["all x.(Amphibian(x) -> (PermeableSkin(x) & CanHarm(x)))"]}
{"id": "eqasc_train_4917", "nl": "frogs have permeable skin", "fol": "", "prediction": ["all x.(Frog(x) -> PermeableSkin(x))"]}
{"id": "eqasc_train_4918", "nl": "frogs have permeable skin that easily absorbs substances from the environment", "fol": "", "prediction": ["all x.(Frog(x) -> (PermeableSkin(x) & AbsorbsSubstancesFromEnvironment(x)))"]}
{"id": "eqasc_train_4919", "nl": "Amphibian skin lacks hair or scales.", "fol": "", "prediction": ["all x.(AmphibianSkin(x) -> (LacksHair(x) | LacksScales(x)))"]}
{"id": "eqasc_train_4920", "nl": "amphibians have no hair", "fol": "", "prediction": ["all x.(Amphibian(x) -> -HasHair(x))"]}
{"id": "eqasc_train_4921", "nl": "Frogs have permeable skin that easily absorbs substances from the environment.", "fol": "", "prediction": ["all x.(Frog(x) -> (PermeableSkin(x) & AbsorbsSubstances(x)))"]}
{"id": "eqasc_train_4922", "nl": "Toads and frogs are both amphibians.", "fol": "", "prediction": ["all x.((Toad(x) | Frog(x)) -> Amphibian(x))"]}
{"id": "eqasc_train_4923", "nl": "toads have permeable skin that easily absorbs substances from the environment", "fol": "", "prediction": ["all x.(Toad(x) -> (PermeableSkin(x) & AbsorbsSubstancesFromEnvironment(x)))"]}
{"id": "eqasc_train_4924", "nl": "Frogs have permeable skin that easily absorb substances in the environment.", "fol": "", "prediction": ["all x.(Frog(x) -> (PermeableSkin(x) & AbsorbsSubstances(x)))"]}
{"id": "eqasc_train_4925", "nl": "Amphibians have lungs, but they also breathe through their skin.", "fol": "", "prediction": ["all x.(Amphibian(x) -> (HasLungs(x) & BreathesThroughSkin(x)))"]}
{"id": "eqasc_train_4926", "nl": "permeable skin easily absorbs air to breathe through", "fol": "", "prediction": ["all x.(PermeableSkin(x) -> AbsorbsAirToBreathe(x))"]}
{"id": "eqasc_train_4927", "nl": "Something that begins its life in water has permeable skin that easily absorbs substances from the environment", "fol": "", "prediction": ["all x.((Project(x) & StartsLifeInWater(x)) -> HasPermeableSkin(x))"]}
{"id": "eqasc_train_4928", "nl": "Lymphocytes are the key cells involved in the immune response.", "fol": "", "prediction": ["all x.(Lymphocyte(x) -> KeyCell(x))"]}
{"id": "eqasc_train_4929", "nl": "B lymphocytes produce antibodies .", "fol": "", "prediction": ["all x.(Blymphocyte(x) -> ProducesAntibodies(x))"]}
{"id": "eqasc_train_4930", "nl": "The key cells involved in the immune response produce antibodies.", "fol": "", "prediction": ["all x.((KeyCell(x) & ImmuneResponse(x)) -> ProducesAntibodies(x))"]}
{"id": "eqasc_train_4931", "nl": "Allergies are an immune system response.", "fol": "", "prediction": ["all x.(Allergie(x) -> ImmuneSystemResponse(x))"]}
{"id": "eqasc_train_4932", "nl": "Lymphocytes  are the key cells involved in allergies", "fol": "", "prediction": ["all x.(Lymphocyte(x) -> (KeyCell(x) & InvolvedInAllergies(x)))"]}
{"id": "eqasc_train_4933", "nl": "Lymphocytes are produced in the bone marrow.", "fol": "", "prediction": ["all x.(Lymphocyte(x) -> ProducedInBoneMarrow(x))"]}
{"id": "eqasc_train_4934", "nl": "the key cells involved in the immune response are produced in the bone marrow", "fol": "", "prediction": ["all x y.((KeyCell(x) & ImmuneResponse(y)) -> ProducedInBoneMarrow(x,y))"]}
{"id": "eqasc_train_4935", "nl": "An allergy attack is an immunal response.", "fol": "", "prediction": ["all x.(AllergyAttack(x) -> ImmunalResponse(x))"]}
{"id": "eqasc_train_4936", "nl": "Lymphocytes are the key cells involved in allergy attacks", "fol": "", "prediction": ["all x.(Lymphocyte(x) -> (KeyCell(x) & InvolvedInAllergyAttacks(x)))"]}
{"id": "eqasc_train_4937", "nl": "Lymphocytes are the key cells involved in an allergy attack.", "fol": "", "prediction": ["all x.(Lymphocyte(x) -> KeyCell(x))"]}
{"id": "eqasc_train_4938", "nl": "the immune response produces antibodies", "fol": "", "prediction": ["all x.(ImmuneResponse(x) -> ProducesAntibodies(x))"]}
{"id": "eqasc_train_4939", "nl": "Antibodies are synthesised by lymphocytes.", "fol": "", "prediction": ["all x.(Antibodies(x) -> SynthesizedByLymphocytes(x))"]}
{"id": "eqasc_train_4940", "nl": "Antibodies are synthesised by the key cells involved in the immune response", "fol": "", "prediction": ["all x y.((Antibodies(x) & KeyCell(y) & ImmuneResponse(x,y)) -> SynthesizedBy(x,y))"]}
{"id": "eqasc_train_4941", "nl": "Antibodies are involved in the immune response.", "fol": "", "prediction": ["all x.(Antibodies(x) -> InvolvedInImmuneResponse(x))"]}
{"id": "eqasc_train_4942", "nl": "Lymphocytes are the key cells involved in an allergy attack", "fol": "", "prediction": ["all x y.((Lymphocyte(x) & AllergyAttack(y)) -> KeyCell(x,y))"]}
{"id": "eqasc_train_4943", "nl": "a plants require water for survival", "fol": "", "prediction": ["all x y.((Plant(x) & Water(y)) -> RequiresForSurvival(x,y))"]}
{"id": "eqasc_train_4944", "nl": "Plants require water to live.", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresWaterToLive(x))"]}
{"id": "eqasc_train_4945", "nl": "bamboo requires water for survival", "fol": "", "prediction": ["all x.(Bamboo(x) -> RequiresWaterForSurvival(x))"]}
{"id": "eqasc_train_4946", "nl": "legumes require water for survival", "fol": "", "prediction": ["all x.(Legumes(x) -> RequiresWaterForSurvival(x))"]}
{"id": "eqasc_train_4947", "nl": "Plants require cell hydration for survival.", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresCellHydration(x))"]}
{"id": "eqasc_train_4948", "nl": "bushes require water for survival", "fol": "", "prediction": ["all x.(Bush(x) -> RequiresWaterForSurvival(x))"]}
{"id": "eqasc_train_4949", "nl": "If no rain or watering, the plant dies.", "fol": "", "prediction": ["all x.((Plant(x) & -Rain(x) & -Watering(x)) -> Dies(x))"]}
{"id": "eqasc_train_4950", "nl": "Outdoor plants require rain to survive.", "fol": "", "prediction": ["all x.(OutdoorPlant(x) -> RequiresRain(x))"]}
{"id": "eqasc_train_4951", "nl": "Life-long learning is no longer a luxury for the few, but a survival skill for all.", "fol": "", "prediction": ["all x.(LifeLongLearning(x) -> (-LuxuryForLittle(x) & SurvivalSkillForAll(x)))"]}
{"id": "eqasc_train_4952", "nl": "Plants require water for life-long learning.", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresWaterForLifeLongLearning(x))"]}
{"id": "eqasc_train_4953", "nl": "A plant requires something that is a compound of hydrogen and oxygen for survival.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresCompoundOfHydrogen(x) & RequiresCompoundOfOxygen(x)) -> Survival(x))"]}
{"id": "eqasc_train_4954", "nl": "Water contains hydrogen and oxygen.", "fol": "", "prediction": ["all x.(Water(x) -> (ContainsHydrogen(x) & ContainsOxygen(x)))"]}
{"id": "eqasc_train_4955", "nl": "plants require hydrogen for their survival", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresHydrogen(x))"]}
{"id": "eqasc_train_4956", "nl": "lack of moisture in the air causes low amounts of rainfall", "fol": "", "prediction": ["all x.(LackOfMoistureInAir(x) -> LowRainfall(x))"]}
{"id": "eqasc_train_4957", "nl": "Humidity is moisture in the air.", "fol": "", "prediction": ["all x.(Humidity(x) -> MoistureInAir(x))"]}
{"id": "eqasc_train_4958", "nl": "Lack of humidity in the air causes low amounts of rainfall.", "fol": "", "prediction": ["all x.(LackOfHumidityInAir(x) -> LowRainfall(x))"]}
{"id": "eqasc_train_4959", "nl": "Drought can be caused by less than normal rainfall.", "fol": "", "prediction": ["all x.(Drought(x) -> CausedByLessThanNormalRainfall(x))"]}
{"id": "eqasc_train_4960", "nl": "lack of moisture in the air causes Drought", "fol": "", "prediction": ["all x.(LackOfMoistureInAir(x) -> CausesDrought(x))"]}
{"id": "eqasc_train_4961", "nl": "If there is enough moisture in the clouds, rain is produced.", "fol": "", "prediction": ["all x.((EnoughMoistureInClouds(x) & Rain(x)) -> Produced(x))"]}
{"id": "eqasc_train_4962", "nl": "Clouds lacking water reduces rainfall", "fol": "", "prediction": ["all x.((Cloud(x) & LacksWater(x)) -> ReducesRainfall(x))"]}
{"id": "eqasc_train_4963", "nl": "Rainfall is just one form of precipitation.", "fol": "", "prediction": ["all x.(Rainfall(x) -> Precipitation(x))"]}
{"id": "eqasc_train_4964", "nl": "lack of moisture in the air causes low amounts of precipitation", "fol": "", "prediction": ["all x.(LackOfMoistureInAir(x) -> LowPrecipitation(x))"]}
{"id": "eqasc_train_4965", "nl": "Areas of moderate and low rainfall are drought prone.", "fol": "", "prediction": ["all x.((Area(x) & ModerateRainfall(x) & LowRainfall(x)) -> DroughtProne(x))"]}
{"id": "eqasc_train_4966", "nl": "drought prone areas experience a lack of moisture in the air.", "fol": "", "prediction": ["all x.(DroughtProneArea(x) -> LackOfMoistureInAir(x))"]}
{"id": "eqasc_train_4967", "nl": "plants wither and die from a void of moisture in the air", "fol": "", "prediction": ["all x.((Plant(x) & Wither(x) & DieFromVoiceOfMoisture(x)) -> WitherAndDieFromVoiceOfMoisture(x))"]}
{"id": "eqasc_train_4968", "nl": "Damage is intensified by moisture stress during drought.", "fol": "", "prediction": ["all x.((Damage(x) & MoistureStress(x)) -> Intensified(x))"]}
{"id": "eqasc_train_4969", "nl": "low amounts of rainfall intensify damage during drought", "fol": "", "prediction": ["all x.((LowRainfall(x) & Drought(x)) -> IntenseDamage(x))"]}
{"id": "eqasc_train_4970", "nl": "Rainfall contributes to, and evaporation removes, moisture.", "fol": "", "prediction": ["all x y.((Rainfall(x) & Evaporation(y)) -> (ContributesToMoisture(x) & RemovesMoisture(y)))"]}
{"id": "eqasc_train_4971", "nl": "evaporation lowers moisture", "fol": "", "prediction": ["all x y.((Evaporation(x) & Moisture(y)) -> Lowers(x,y))"]}
{"id": "eqasc_train_4972", "nl": "lack of humidity causes low amounts of rainfall", "fol": "", "prediction": ["all x.(LackOfHumidity(x) -> LowRainfall(x))"]}
{"id": "eqasc_train_4973", "nl": "Clouds are made of moisture and the moisture is from the water evaporating.", "fol": "", "prediction": ["all x.(Cloud(x) -> (MadeOfMoisture(x) & WaterEvaporating(x)))"]}
{"id": "eqasc_train_4974", "nl": "Lack of water in the air causes low amounts of rainfall.", "fol": "", "prediction": ["all x.(LackOfWaterInAir(x) -> LowRainfall(x))"]}
{"id": "eqasc_train_4975", "nl": "Lack of humidity causes low rainfall.", "fol": "", "prediction": ["all x.(LackOfHumidity(x) -> LowRainfall(x))"]}
{"id": "eqasc_train_4976", "nl": "Most precipitation occurs as rainfall.", "fol": "", "prediction": ["all x.(Precipitation(x) -> Rainfall(x))"]}
{"id": "eqasc_train_4977", "nl": "low moisture in the air can cause plants to die", "fol": "", "prediction": ["all x.(LowMoistureInAir(x) -> CanCausePlantsToDie(x))"]}
{"id": "eqasc_train_4978", "nl": "Macroevolution is evolution over geologic time above the level of the species.", "fol": "", "prediction": ["all x.(Macroevolution(x) -> EvolutionOverGeologicTimeAboveSpeciesLevel(x))"]}
{"id": "eqasc_train_4979", "nl": "Speciation events are thus examples of macroevolution.", "fol": "", "prediction": ["all x.(SpeciationEvent(x) -> Macroevolution(x))"]}
{"id": "eqasc_train_4980", "nl": "Speciation events show evolution over geologic time above the level of the species.", "fol": "", "prediction": ["all x y.((SpeciationEvent(x) & Species(y)) -> ShowsEvolution(x,y))"]}
{"id": "eqasc_train_4981", "nl": "And geologic time is very, very slow.", "fol": "", "prediction": ["(all x.(GeologicTime(x) -> VerySlow(x)))"]}
{"id": "eqasc_train_4982", "nl": "Macroevolution is very, very slow evolution above the level of the species.", "fol": "", "prediction": ["all x.(Macroevolution(x) -> (SlowEvolution(x) & AboveSpeciesLevel(x)))"]}
{"id": "eqasc_train_4983", "nl": "Besides the above-named species, various other species of the genus have been used medicinally.", "fol": "", "prediction": ["all x.((Species(x) & AboveNamed(x)) -> UsedMedically(x))"]}
{"id": "eqasc_train_4984", "nl": "Macroevolution is evolution over geologic time at the genus level and above.", "fol": "", "prediction": ["all x.(Macroevolution(x) -> EvolutionOverGeologicTime(x))"]}
{"id": "eqasc_train_4985", "nl": "Geologic time lines are expressed in geologic eras and periods.", "fol": "", "prediction": ["all x.(GeologicTimeLine(x) -> (ExpressedInEpoches(x) & ExpressedInPeriods(x)))"]}
{"id": "eqasc_train_4986", "nl": "macroevolution is evolution over eras above the level of the species", "fol": "", "prediction": ["all x.(Macroevolution(x) -> EvolutionOverEarsAboveSpeciesLevel(x))"]}
{"id": "eqasc_train_4987", "nl": "Geologists break time down into geologic time units called eras .", "fol": "", "prediction": ["all x y z.((Geologist(x) & TimeUnit(y) & Era(z)) -> BreaksInto(x,y,z))"]}
{"id": "eqasc_train_4988", "nl": "Macroevolution is evolution over eras above the level of the species.", "fol": "", "prediction": ["all x.(Macroevolution(x) -> EvolutionOverEarsAboveSpeciesLevel(x))"]}
{"id": "eqasc_train_4989", "nl": "Microevolution leading to macroevolution, discussed earlier, is one example.", "fol": "", "prediction": ["all x.((Microevolution(x) & Macroevolution(x)) -> Example(x))"]}
{"id": "eqasc_train_4990", "nl": "Microevolution happens over time", "fol": "", "prediction": ["all x.(Microevolution(x) -> HappensOverTime(x))"]}
{"id": "eqasc_train_4991", "nl": "Dates are provided for the recognized eras and periods of geologic time.", "fol": "", "prediction": ["all x y.((Date(x) & Era(y) & Period(y)) -> ProvidedFor(x,y))"]}
{"id": "eqasc_train_4992", "nl": "Macroevolution above the level of the species is evolution over eras and periods", "fol": "", "prediction": ["all x y.((Macroevolution(x) & AboveLevelOfSpecies(x,y)) -> EvolutionOverErasAndPeriods(x))"]}
{"id": "eqasc_train_4993", "nl": "Species consist of groups of interbreeding populations.", "fol": "", "prediction": ["all x.(Species(x) -> exists y.(InterbreedingPopulation(y) & Group(x,y)))"]}
{"id": "eqasc_train_4994", "nl": "Macroevolution is evolution over geologic time above the level of interbreeding populations", "fol": "", "prediction": ["all x.(Macroevolution(x) -> EvolutionOverGeologicTime(x))"]}
{"id": "eqasc_train_4995", "nl": "Evolution has occurred over geologic time.", "fol": "", "prediction": ["all x.(Evolution(x) -> OccursOverGeologicTime(x))"]}
{"id": "eqasc_train_4996", "nl": "Macroevolution has happened over geologic periods", "fol": "", "prediction": ["all x.(Macroevolution(x) -> HappenedOverGeologicPeriods(x))"]}
{"id": "eqasc_train_4997", "nl": "Sometimes, an isolated fossil is held up as evidence of macroevolution.", "fol": "", "prediction": ["exists x.(IsolatedFossil(x) & HeldUpAsEvidenceOfMacroevolution(x))"]}
{"id": "eqasc_train_4998", "nl": "fossils show evolution over geologic time above the level of the species", "fol": "", "prediction": ["all x y.((Fossil(x) & Species(y)) -> ShowsEvolutionOverGeologicTimeAboveLevel(x,y))"]}
{"id": "eqasc_train_4999", "nl": "If there are mutations, evolution occurs through mutation.", "fol": "", "prediction": ["all x.((Mutation(x) & Mutation(x)) -> EvolutionOccurs(x))"]}
{"id": "eqasc_train_5000", "nl": "macroevolution involves mutations", "fol": "", "prediction": ["all x.(Macroevolution(x) -> InvolvesMutation(x))"]}
{"id": "eqasc_train_5001", "nl": "Macroevolution is more than repeated rounds of microevolution.", "fol": "", "prediction": ["all x.(Macroevolution(x) -> MoreThanRepeatedRoundsOfMicroevolution(x))"]}
{"id": "eqasc_train_5002", "nl": "evolution over geologic time above the level of the species is more than repeated rounds of microevolution", "fol": "", "prediction": ["all x y.((Evolution(x) & GeologicTime(y) & AboveLevel(x,y)) -> MoreThanRepeatedRoundsOfMicroevolution(x))"]}
{"id": "eqasc_train_5003", "nl": "evolution over geologic time above the level of the species includes speciation events", "fol": "", "prediction": ["all x y.((Evolution(x) & GeologicTime(y) & AboveSpeciesLevel(x,y)) -> IncludesSpeciationEvents(x))"]}
{"id": "eqasc_train_5004", "nl": "Macroevolution is said to be the change from one species to another.", "fol": "", "prediction": ["all x.(Macroevolution(x) -> ChangeFromSpeciesToSpecies(x))"]}
{"id": "eqasc_train_5005", "nl": "Change from one species to another is evolution over geologic time above the level of the species.", "fol": "", "prediction": ["all x y.((Species(x) & Species(y)) -> EvolutionOverGeologicTime(x,y))"]}
{"id": "eqasc_train_5006", "nl": "Macroevolution is evolution over geologic time above the level of the kind of organism.", "fol": "", "prediction": ["all x.(Macroevolution(x) -> EvolutionOverGeologicTime(x))"]}
{"id": "eqasc_train_5007", "nl": "a airplane is used for moving people across bodies of water", "fol": "", "prediction": ["all x y.((Airplane(x) & Person(y)) -> MovesAcrossBodyOfWater(x,y))"]}
{"id": "eqasc_train_5008", "nl": "Airplanes like Boeing 747 can take off and land on the airport.", "fol": "", "prediction": ["all x.(Airplane(x) -> (Boeing747(x) & TakeOff(x) & LandOnAirport(x)))"]}
{"id": "eqasc_train_5009", "nl": "Boeing 747 is used for moving people across bodies of water", "fol": "", "prediction": ["all x y.((Boat(x) & Boeing747(y)) -> MovesPeopleAcrossBodyOfWater(x,y))"]}
{"id": "eqasc_train_5010", "nl": "Airplanes Air travel is the quickest way to travel and is probably best for long distances.", "fol": "", "prediction": ["all x.(Airplane(x) -> (AirTravel(x) & FastestTravel(x) & ProbablyBestForLongDistances(x)))"]}
{"id": "eqasc_train_5011", "nl": "Air travel is used for moving people across bodies of water.", "fol": "", "prediction": ["all x.(AirTravel(x) -> MovesPeopleAcrossBodyOfWater(x))"]}
{"id": "eqasc_train_5012", "nl": "Millions of people fly safely in airplanes every year.", "fol": "", "prediction": ["all x y.((Person(x) & Airplane(y)) -> FliesSafely(x,y))"]}
{"id": "eqasc_train_5013", "nl": "Airplanes transport millions of humans move across bodies of water every year", "fol": "", "prediction": ["all x y z.((Airplane(x) & Human(y) & BodyOfWater(z)) -> TransportsMillionsOfMoves(x,y,z))"]}
{"id": "eqasc_train_5014", "nl": "First jet airplane takes flight.", "fol": "", "prediction": ["all x.(JetAirplane(x) -> TakesFlight(x))"]}
{"id": "eqasc_train_5015", "nl": "jets are used for moving people", "fol": "", "prediction": ["all x.(Jet(x) -> UsedForMovingPeople(x))"]}
{"id": "eqasc_train_5016", "nl": "Airplanes are responsible for air, noise, and water pollution.", "fol": "", "prediction": ["all x.(Airplane(x) -> (ResponsibleForAirPollution(x) & ResponsibleForNoise(x) & ResponsibleForWaterPollution(x)))"]}
{"id": "eqasc_train_5017", "nl": "airplanes pollute the environment", "fol": "", "prediction": ["all x y.((Airplane(x) & Environment(y)) -> Pollutes(x,y))"]}
{"id": "eqasc_train_5018", "nl": "Oceans are large bodies of salt water which separates deposits of land.", "fol": "", "prediction": ["all x.(Ocean(x) -> (LargeBodyOfSaltWater(x) & SeparatesDepositsOfLand(x)))"]}
{"id": "eqasc_train_5019", "nl": "An airplane can be used to move people over salt water", "fol": "", "prediction": ["all x y.((Airplane(x) & SaltWater(y)) -> MovesPeople(x,y))"]}
{"id": "eqasc_train_5020", "nl": "An airplane flies through the cloud.", "fol": "", "prediction": ["all x.(Airplane(x) -> FliesThroughCloud(x))"]}
{"id": "eqasc_train_5021", "nl": "moving people across bodies of water can be done by flying through clouds", "fol": "", "prediction": ["all x y.((MovingPeopleAcrossBodyOfWater(x) & Cloud(y)) -> CanFlyThrough(x,y))"]}
{"id": "eqasc_train_5022", "nl": "An island is land surrounded by water.", "fol": "", "prediction": ["all x.(Island(x) -> SurroundedByWater(x))"]}
{"id": "eqasc_train_5023", "nl": "People can be moved to islands in an airplane", "fol": "", "prediction": ["all x y z.((Person(x) & Airplane(y) & Island(z)) -> MovedTo(x,y,z))"]}
{"id": "eqasc_train_5024", "nl": "An ocean is a vast body of salt water.", "fol": "", "prediction": ["all x.(Ocean(x) -> (VastBodyOfSaltWater(x)))"]}
{"id": "eqasc_train_5025", "nl": "airplanes are used for moving people across oceans", "fol": "", "prediction": ["all x y.((Airplane(x) & Ocean(y)) -> MovesPeopleAcross(x,y))"]}
{"id": "eqasc_train_5026", "nl": "Jet airplanes burn fuel throughout the flight to overcome air resistance.", "fol": "", "prediction": ["all x.(JetAirplane(x) -> BurnsFuel(x))"]}
{"id": "eqasc_train_5027", "nl": "fuel is burned to move people across bodies of water", "fol": "", "prediction": ["all x y z.((Fuel(x) & Person(y) & BodyOfWater(z)) -> BurnedToMoveAcross(x,y,z))"]}
{"id": "eqasc_train_5028", "nl": "Airplanes and cars are equipped with engines.", "fol": "", "prediction": ["all x.((Airplane(x) | Car(x)) -> EquippedWithEngine(x))"]}
{"id": "eqasc_train_5029", "nl": "transportation equipped with engines is used for moving people across bodies of water", "fol": "", "prediction": ["all x y.((Transportation(x) & EquippedWithEngines(x)) -> UsedForMovingPeopleAcrossBodyOfWater(x,y))"]}
{"id": "eqasc_train_5030", "nl": "Contrails are made by high-flying jet airplanes.", "fol": "", "prediction": ["all x.(Consult(x) -> (HighFlyingJetAirplane(x) & MadeBy(x,y)))"]}
{"id": "eqasc_train_5031", "nl": "a jet is used for moving people", "fol": "", "prediction": ["all x y.((Jet(x) & Person(y)) -> UsedForMoving(x,y))"]}
{"id": "eqasc_train_5032", "nl": "Kids are fascinated with airplanes.", "fol": "", "prediction": ["all x.(Kid(x) -> FascinatedWithAirplanes(x))"]}
{"id": "eqasc_train_5033", "nl": "Kids are fascinated with moving people", "fol": "", "prediction": ["all x y.((Kid(x) & Person(y)) -> FascinatedWithMovingPeople(x,y))"]}
{"id": "eqasc_train_5034", "nl": "Most airplanes use gas turbines.", "fol": "", "prediction": ["all x.(Airplane(x) -> UsesGasTurbine(x))"]}
{"id": "eqasc_train_5035", "nl": " gas turbines are used for moving people across bodies of water", "fol": "", "prediction": ["all x y.((GasTurbine(x) & Person(y)) -> MovesAcrossBodyOfWater(x,y))"]}
{"id": "eqasc_train_5036", "nl": "Most ecosystems get energy from sunlight.", "fol": "", "prediction": ["all x.(Ecosystem(x) -> GetsEnergyFromSunlight(x))"]}
{"id": "eqasc_train_5037", "nl": "On Earth, energy from sunlight heats the atmosphere more at the equator than at the poles.", "fol": "", "prediction": ["all x y.((Earth(x) & Sunlight(y)) -> HeatsAtmosphere(x,y))"]}
{"id": "eqasc_train_5038", "nl": "Most ecosystems get energy from heat in the atmosphere.", "fol": "", "prediction": ["all x.(Ecosystem(x) -> GetsEnergyFromHeatInAtmosphere(x))"]}
{"id": "eqasc_train_5039", "nl": "organisms and their habitat get energy from sunlight", "fol": "", "prediction": ["all x y.((Organism(x) & Habitat(y)) -> (GetsEnergyFromSunlight(x,y) & GetsEnergyFromSunlight(x,y)))"]}
{"id": "eqasc_train_5040", "nl": "Sunlight is a form of electromagnetic energy.", "fol": "", "prediction": ["all x.(Sunlight(x) -> (ElectromagneticEnergy(x) & ElectromagneticEnergy(x)))"]}
{"id": "eqasc_train_5041", "nl": "Most ecosystems get energy from electromagnetic energy", "fol": "", "prediction": ["all x.(Ecosystem(x) -> (GetsEnergyFromElectromagneticEnergy(x) & ElectromagneticEnergy(x)))"]}
{"id": "eqasc_train_5042", "nl": "Life Living things interact in ecosystems.", "fol": "", "prediction": ["all x.(LifeLiving(x) -> InteractsInEcosystems(x))"]}
{"id": "eqasc_train_5043", "nl": "Living things interacting get energy from sunlight.", "fol": "", "prediction": ["all x.((LivingThing(x) & Interacting(x)) -> GetsEnergyFromSunlight(x))"]}
{"id": "eqasc_train_5044", "nl": "Sunlight Green plants require sunlight in order to grow.", "fol": "", "prediction": ["all x.(SunlightGreenPlant(x) -> RequiresSunlight(x))"]}
{"id": "eqasc_train_5045", "nl": "Plants are part of the ecosystem. ", "fol": "", "prediction": ["all x.(Plant(x) -> PartOfEcosystem(x))"]}
{"id": "eqasc_train_5046", "nl": "Sunlight is turned into energy by plants.", "fol": "", "prediction": ["all x y.((Sunlight(x) & Plant(y)) -> TurnedIntoEnergy(x,y))"]}
{"id": "eqasc_train_5047", "nl": "Most ecosystems need plants.", "fol": "", "prediction": ["all x.(Ecosystem(x) -> NeedsPlants(x))"]}
{"id": "eqasc_train_5048", "nl": "Lakes and rivers are extremely complex ecosystems.", "fol": "", "prediction": ["all x.((Lake(x) | River(x)) -> ComplexEcosystem(x))"]}
{"id": "eqasc_train_5049", "nl": "lakes get energy from sunlight", "fol": "", "prediction": ["all x.(Lake(x) -> GetsEnergyFromSunlight(x))"]}
{"id": "eqasc_train_5050", "nl": "Plants use sunlight to make energy.", "fol": "", "prediction": ["all x.(Plant(x) -> UsesSunlightToMakeEnergy(x))"]}
{"id": "eqasc_train_5051", "nl": "Most ecosystems get energy from plants", "fol": "", "prediction": ["all x y.((Ecosystem(x) & Plant(y)) -> GetsEnergyFrom(x,y))"]}
{"id": "eqasc_train_5052", "nl": "ecosystems get energy from electromagnetism", "fol": "", "prediction": ["all x.(Ecosystem(x) -> (GetsEnergyFromElectromagnetism(x) & Electromagnetism(x)))"]}
{"id": "eqasc_train_5053", "nl": "Plants exhibit phototropism, or growing toward a light source.", "fol": "", "prediction": ["all x.(Plant(x) -> (ExhibitsPhototropism(x) | GrowsTowardsLightSource(x)))"]}
{"id": "eqasc_train_5054", "nl": "Stems are positively phototropic.", "fol": "", "prediction": ["all x.(Stem(x) -> PositivelyPhototropic(x))"]}
{"id": "eqasc_train_5055", "nl": "stems grow towards a light source", "fol": "", "prediction": ["all x y.((Stem(x) & LightSource(y)) -> GrowsTowards(x,y))"]}
{"id": "eqasc_train_5056", "nl": "Electricity can produce light and heat.", "fol": "", "prediction": ["all x.(Electricity(x) -> (ProducesLight(x) & ProducesHeat(x)))"]}
{"id": "eqasc_train_5057", "nl": "plants may grow towards a source of electricity", "fol": "", "prediction": ["all x y.((Plant(x) & ElectricitySource(y)) -> MayGrowTowards(x,y))"]}
{"id": "eqasc_train_5058", "nl": "bamboo exhibits phototropism", "fol": "", "prediction": ["all x.(Bamboo(x) -> ExhibitsPhototropism(x))"]}
{"id": "eqasc_train_5059", "nl": "Many light sources such as the sun and most artificial lights produce unpolarized light.", "fol": "", "prediction": ["all x.((LightSource(x) & Sun(x) & MostArtificialLights(x)) -> ProducesUnpolarizedLight(x))"]}
{"id": "eqasc_train_5060", "nl": "Plants exhibit phototropism, or growing toward the sun or artificial light.", "fol": "", "prediction": ["all x.(Plant(x) -> (ExhibitsPhototropism(x) | GrowsTowardsSunOrArtificialLight(x)))"]}
{"id": "eqasc_train_5061", "nl": "Without light, plants die.", "fol": "", "prediction": ["all x.((Plant(x) & -Light(x)) -> Dies(x))"]}
{"id": "eqasc_train_5062", "nl": "Plants that cannot exhibit phototropism will die", "fol": "", "prediction": ["all x.((Plant(x) & -ExhibitsPhototropism(x)) -> Dies(x))"]}
{"id": "eqasc_train_5063", "nl": "Green plants use light as their primary energy source.", "fol": "", "prediction": ["all x.(GreenPlant(x) -> UsesLightAsPrimaryEnergySource(x))"]}
{"id": "eqasc_train_5064", "nl": "Phototropism means growing toward the energy of light", "fol": "", "prediction": ["all x.(Phototropism(x) -> GrowsTowardsEnergyOfLight(x))"]}
{"id": "eqasc_train_5065", "nl": "legumes grow towards a light source", "fol": "", "prediction": ["all x.(Legumes(x) -> GrowsTowardsLightSource(x))"]}
{"id": "eqasc_train_5066", "nl": "stems grow towards light", "fol": "", "prediction": ["all x.(Stem(x) -> GrowsTowardsLight(x))"]}
{"id": "eqasc_train_5067", "nl": "First, the sun is a brilliant source of white light.", "fol": "", "prediction": ["all x.(Sun(x) -> BrilliantWhiteLightSource(x))"]}
{"id": "eqasc_train_5068", "nl": "plants exhibit phototropism, or growing towards the sun", "fol": "", "prediction": ["all x.(Plant(x) -> (ExhibitsPhototropism(x) | GrowsTowardsSun(x)))"]}
{"id": "eqasc_train_5069", "nl": "Plants show phototropism, or growing toward the sun", "fol": "", "prediction": ["all x.(Plant(x) -> (ShowsPhototropism(x) | GrowsTowardsSun(x)))"]}
{"id": "eqasc_train_5070", "nl": "Roots are negatively phototropic.", "fol": "", "prediction": ["all x.(Root(x) -> NegativelyPhototropic(x))"]}
{"id": "eqasc_train_5071", "nl": "Roots grow away from a light source", "fol": "", "prediction": ["all x y.((Root(x) & LightSource(y)) -> GrowsAwayFrom(x,y))"]}
{"id": "eqasc_train_5072", "nl": "Potted plants in season include chrysanthemums, daisies and cyclamen.", "fol": "", "prediction": ["all x.((PottedPlant(x) & Season(x)) -> (Chrysanthemum(x) | Daisy(x) | Cyclomen(x)))"]}
{"id": "eqasc_train_5073", "nl": "daisies exhibit phototropism", "fol": "", "prediction": ["all x.(Daisy(x) -> ExhibitsPhototropism(x))"]}
{"id": "eqasc_train_5074", "nl": "rain causes erosion", "fol": "", "prediction": ["all x y.((Rain(x) & Erosion(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_5075", "nl": "Soil Erosion Soil erosion is what happens when soil is washed or blown away.", "fol": "", "prediction": ["all x.(SoilErosion(x) -> (SoilWashed(x) | SoilBlownAway(x)))"]}
{"id": "eqasc_train_5076", "nl": "rain causes soil to be washed or blown away", "fol": "", "prediction": ["all x y.((Rain(x) & Soil(y)) -> (CausesToBeWashed(x,y) | CausesToBeBlownAway(x,y)))"]}
{"id": "eqasc_train_5077", "nl": "Erosion sculpts the landscape, creating fantastic rock formations.", "fol": "", "prediction": ["all x.(Erosion(x) -> (SculptsLandscape(x) & CreatesFantasticRockFormations(x)))"]}
{"id": "eqasc_train_5078", "nl": "Rain causes rock formations and sculpts landscapes.", "fol": "", "prediction": ["all x.(Rain(x) -> (CausesRockFormations(x) & SculptsLandscapes(x)))"]}
{"id": "eqasc_train_5079", "nl": "Erosion is the breaking apart and moving of rocks and soil.", "fol": "", "prediction": ["all x.(Erosion(x) -> (BreaksApart(x) & MovesRocksAndSoil(x)))"]}
{"id": "eqasc_train_5080", "nl": "Rain causes the breaking apart and moving of rocks and soil.", "fol": "", "prediction": ["all x y z.((Rain(x) & Rock(y) & Soil(z)) -> (CausesBreakingApart(x,y) & CausesMoving(x,z)))"]}
{"id": "eqasc_train_5081", "nl": "liquid precipitation causes erosion", "fol": "", "prediction": ["all x.(LiquidPrecipitation(x) -> CausesErosion(x))"]}
{"id": "eqasc_train_5082", "nl": "precipitation causes erosion", "fol": "", "prediction": ["all x.(Precipitation(x) -> CausesErosion(x))"]}
{"id": "eqasc_train_5083", "nl": "Erosion of dunes leads to erosion of the beach and of the Island.", "fol": "", "prediction": ["all x.(ErosionOfDunes(x) -> (ErosionOfBeach(x) & ErosionOfIsland(x)))"]}
{"id": "eqasc_train_5084", "nl": "Rain can destroy dunes.", "fol": "", "prediction": ["all x.(Rain(x) -> CanDestroyDunes(x))"]}
{"id": "eqasc_train_5085", "nl": "With the rain comes floods, and with the floods come erosion and landslides.", "fol": "", "prediction": ["all x y.((Rain(x) & Flood(y)) -> (ComesWith(x,y) & Comes(x,y)))"]}
{"id": "eqasc_train_5086", "nl": "rain can cause landslides", "fol": "", "prediction": ["all x.(Rain(x) -> CausesLandslides(x))"]}
{"id": "eqasc_train_5087", "nl": "Landslides are frequent, and erosion is severe.", "fol": "", "prediction": ["(all x.(Landslide(x) -> Frequent(x)) & all y.(Erosion(y) -> Severe(y)))"]}
{"id": "eqasc_train_5088", "nl": "rain causes landslides that produces severe land loss.", "fol": "", "prediction": ["all x y.((Rain(x) & LandLoss(y)) -> CausesLandslides(x,y))"]}
{"id": "eqasc_train_5089", "nl": "Erosion and landslides are common.", "fol": "", "prediction": ["all x.((Erosion(x) | Landslides(x)) -> Common(x))"]}
{"id": "eqasc_train_5090", "nl": "Rain can lead to landslides.", "fol": "", "prediction": ["all x.(Rain(x) -> CanLeadToLandslides(x))"]}
{"id": "eqasc_train_5091", "nl": "Erosion of rock makes nutrients available.", "fol": "", "prediction": ["all x.(ErosionOfRock(x) -> MakesNutrientsAvailable(x))"]}
{"id": "eqasc_train_5092", "nl": "rain causes nutrients to be available", "fol": "", "prediction": ["all x y.((Rain(x) & Nutrients(y)) -> CausesToBeAvailable(x,y))"]}
{"id": "eqasc_train_5093", "nl": "Sediment Exposed soil is susceptible to erosion by wind and rain.", "fol": "", "prediction": ["all x.(Sediment(x) -> (SusceptibleToErosion(x) & Wind(x) & Rain(x)))"]}
{"id": "eqasc_train_5094", "nl": "Exposed soil is susceptible to damage from rain", "fol": "", "prediction": ["all x.(ExposedSoil(x) -> SusceptibleToDamageFromRain(x))"]}
{"id": "eqasc_train_5095", "nl": "a mold spore has a negative impact on the respiratory system", "fol": "", "prediction": ["all x.(MoldSpore(x) -> NegativeImpactOnRespiratorySystem(x))"]}
{"id": "eqasc_train_5096", "nl": "Sinusitis Sinuses are a part of the upper respiratory system.", "fol": "", "prediction": ["all x.(Sinusitis(x) -> PartOfUpperRespiratorySystem(x))"]}
{"id": "eqasc_train_5097", "nl": "Mold spores can have negative impact on the sinuses in a body.", "fol": "", "prediction": ["all x y.((MoldSpore(x) & Body(y)) -> NegativeImpactOnSinus(x,y))"]}
{"id": "eqasc_train_5098", "nl": "Mold spores, for example, are microscopic.", "fol": "", "prediction": ["all x.(MoldSpore(x) -> Microscopic(x))"]}
{"id": "eqasc_train_5099", "nl": "Microscopic organisms can have a negative impact on the respiratory system.", "fol": "", "prediction": ["all x.(MicroscopicOrganism(x) -> NegativeImpactOnRespiratorySystem(x))"]}
{"id": "eqasc_train_5100", "nl": "a mold spore has a negative impact on the sinuses", "fol": "", "prediction": ["all x y.((MoldSpore(x) & MoldSpore(y)) -> NegativeImpactOnSinus(x,y))"]}
{"id": "eqasc_train_5101", "nl": "Pulmonologists treat lungs and respiratory systems.", "fol": "", "prediction": ["all x y.((Pulmonologist(x) & Lung(y)) -> Treats(x,y))"]}
{"id": "eqasc_train_5102", "nl": "Pulmonologists can treat issues caused by mold spores.", "fol": "", "prediction": ["all x y.((Pulmonologist(x) & MoldSpore(y)) -> TreatsIssues(x,y))"]}
{"id": "eqasc_train_5103", "nl": "Pulmonologists treat the lungs and respiratory system.", "fol": "", "prediction": ["all x y.((Pulmonologist(x) & Lung(y)) -> Treats(x,y))"]}
{"id": "eqasc_train_5104", "nl": "A pulmonologist can sometimes treat the negative impact of mold spores on lungs", "fol": "", "prediction": ["all x y.((Pulmonologist(x) & MoldSpore(y)) -> TreatsNegativeImpact(x,y))"]}
{"id": "eqasc_train_5105", "nl": "Another name for the breathing tree is the respiratory system.", "fol": "", "prediction": ["all x.(BreathingTree(x) -> RespiratorySystem(x))"]}
{"id": "eqasc_train_5106", "nl": "mold spores make it hard to breathe", "fol": "", "prediction": ["all x.(MoldSpores(x) -> HardToBreathe(x))"]}
{"id": "eqasc_train_5107", "nl": "Mildew and mold spores are everywhere.", "fol": "", "prediction": ["all x.(Mildew(x) & MoldSpore(x))"]}
{"id": "eqasc_train_5108", "nl": "mildew can affect the respiratory system", "fol": "", "prediction": ["all x.(Mildew(x) -> CanAffectRespiratorySystem(x))"]}
{"id": "eqasc_train_5109", "nl": "Molds and spores thrive in water-damaged furniture and carpets.", "fol": "", "prediction": ["all x y.((Mold(x) & Spore(y)) -> (ThrivesIn(x,y) & WaterDamagedFurniture(x) & ThrivesIn(x,y)))"]}
{"id": "eqasc_train_5110", "nl": "water-damaged carpets have a negative impact on the respiratory system", "fol": "", "prediction": ["all x.((Cafe(x) & WaterDamaged(x)) -> NegativeImpactOnRespiratorySystem(x))"]}
{"id": "eqasc_train_5111", "nl": "Major components of the respiratory system are the lungs, trachea, nose, and the cell.", "fol": "", "prediction": ["all x.((RespiratorySystem(x) & Lungs(x) & Trachea(x) & Nash(x) & Cell(x)) -> MajorComponents(x))"]}
{"id": "eqasc_train_5112", "nl": "A mold spore has a negative impact on the lungs", "fol": "", "prediction": ["all x.(MoldSpore(x) -> NegativeImpactOnLungs(x))"]}
{"id": "eqasc_train_5113", "nl": "Blue Mold Blue mold is caused by a fungus spread by wind-borne spores.", "fol": "", "prediction": ["all x.(BlueMold(x) -> (Fungus(x) & SpreadByWindBornSpores(x)))"]}
{"id": "eqasc_train_5114", "nl": "Fungus spread by wind has a negative impact on the respiratory system", "fol": "", "prediction": ["all x.((Fungus(x) & SpreadByWind(x)) -> NegativeImpactOnRespiratorySystem(x))"]}
{"id": "eqasc_train_5115", "nl": "Respiratory symptoms include difficulty breathing, wheezing, and stridor.", "fol": "", "prediction": ["all x.(RespiratorySymptom(x) -> (DifficultBreathing(x) & Wheezing(x) & Stridor(x)))"]}
{"id": "eqasc_train_5116", "nl": "a mold spore has a negative impact on breathing", "fol": "", "prediction": ["all x.(MoldSpore(x) -> NegativeImpactOnBreathing(x))"]}
{"id": "eqasc_train_5117", "nl": "From that time on, the respiratory system supplies the body with the oxygen it needs to survive.", "fol": "", "prediction": ["all x y.((RespiratorySystem(x) & Body(y)) -> SuppliesOxygen(x,y))"]}
{"id": "eqasc_train_5118", "nl": "mold spore has a negative impact on survival", "fol": "", "prediction": ["all x.(MoldSpore(x) -> NegativeImpactOnSurvival(x))"]}
{"id": "eqasc_train_5119", "nl": "Insects also have both a heart and a respiratory, or breathing, system.", "fol": "", "prediction": ["all x.(Insect(x) -> (HasHeart(x) & HasRespiratorySystem(x)))"]}
{"id": "eqasc_train_5120", "nl": "a mold spore has a negative impact on breathing.", "fol": "", "prediction": ["all x.(MoldSpore(x) -> NegativeImpactOnBreathing(x))"]}
{"id": "eqasc_train_5121", "nl": "Problems with mold spores in the human body are treated by pulmonologists.", "fol": "", "prediction": ["all x y.((MoldSpore(x) & HumanBody(y)) -> Treats(x,y))"]}
{"id": "eqasc_train_5122", "nl": "Spores are distributed by the wind.", "fol": "", "prediction": ["all x.(Spot(x) -> DistributedByWind(x))"]}
{"id": "eqasc_train_5123", "nl": "The wind has a negative impact on the respiratory system.", "fol": "", "prediction": ["all x.(Wind(x) -> NegativeImpactOnRespiratorySystem(x))"]}
{"id": "eqasc_train_5124", "nl": "a rubber band snapping causes the particles in the rubber band to vibrate", "fol": "", "prediction": ["all x y.((RubberBandSnapping(x) & RubberBand(y)) -> CausesParticlesToVibrate(x,y))"]}
{"id": "eqasc_train_5125", "nl": "Sound travels through matter by vibration.", "fol": "", "prediction": ["all x.(Sound(x) -> TravelsByVibration(x))"]}
{"id": "eqasc_train_5126", "nl": "Snapping a rubber band causes sound.", "fol": "", "prediction": ["all x.((RubberBand(x) & Snaps(x)) -> CausesSound(x))"]}
{"id": "eqasc_train_5127", "nl": "All sound is created by vibrations.", "fol": "", "prediction": ["all x.(Sound(x) -> CreatedByVibrations(x))"]}
{"id": "eqasc_train_5128", "nl": "a rubber band snapping causes the particles to make sound ", "fol": "", "prediction": ["all x y.((RubberBandSnapping(x) & Particle(y)) -> CausesSound(x,y))"]}
{"id": "eqasc_train_5129", "nl": "Vibration can be a cause of noise and can lead to wear and fatigue of parts.", "fol": "", "prediction": ["all x.(Vibration(x) -> (CauseOfNoise(x) & LeadsToWear(x) & LeadsToFatigue(x)))"]}
{"id": "eqasc_train_5130", "nl": "snapping a rubber band can cause noise", "fol": "", "prediction": ["all x y.((SnappingRubberBand(x) & RubberBand(y)) -> CausesNoise(x,y))"]}
{"id": "eqasc_train_5131", "nl": "Heat causes molecules of the material to vibrate.", "fol": "", "prediction": ["all x y.((Heat(x) & Material(y)) -> CausesMoleculesToVibrate(x,y))"]}
{"id": "eqasc_train_5132", "nl": "a rubber band snapping causes heat", "fol": "", "prediction": ["all x y.((RubberBandSnapping(x) & RubberBand(y)) -> CausesHeat(x,y))"]}
{"id": "eqasc_train_5133", "nl": "Sound waves are vibrations in matter.", "fol": "", "prediction": ["all x.(SoundWaves(x) -> VibrationInMatter(x))"]}
{"id": "eqasc_train_5134", "nl": "a rubber band snapping causes the particles in the rubber band to cause sound waves", "fol": "", "prediction": ["all x y z.((RubberBandSnapping(x) & ParticlesInRubberBand(y) & SoundWaves(z)) -> Causes(x,y,z))"]}
{"id": "eqasc_train_5135", "nl": "By it's nature, a vibration is a frequency wave .", "fol": "", "prediction": ["all x.(Vibration(x) -> FrequencyWave(x))"]}
{"id": "eqasc_train_5136", "nl": "a rubber band snapping causes a frequency wave", "fol": "", "prediction": ["all x y.((RubberBandSnapping(x) & RubberBandSnapping(y)) -> CausesFrequencyWave(x,y))"]}
{"id": "eqasc_train_5137", "nl": "Elastics are rubber bands that connect the upper and lower braces.", "fol": "", "prediction": ["all x.(Elastic(x) -> (RubberBand(x) & ConnectsUpperAndLowerBraces(x)))"]}
{"id": "eqasc_train_5138", "nl": "An elastic snapping causes the particles in the elastic to vibrate.", "fol": "", "prediction": ["all x.(ElectricSnapping(x) -> CausesParticlesToVibrate(x))"]}
{"id": "eqasc_train_5139", "nl": "Convection is the transmission of heat by the mass movement of the heated particles.", "fol": "", "prediction": ["all x.(Convection(x) -> (TransmissionOfHeat(x) & MassMovementOfHeatedParticles(x)))"]}
{"id": "eqasc_train_5140", "nl": "a rubber band snapping causes it to heat up", "fol": "", "prediction": ["all x y.((RubberBandSnapping(x) & RubberBandSnapping(y)) -> HeatsUp(x,y))"]}
{"id": "eqasc_train_5141", "nl": "After all, rubber bands tend to snap when stretched too thin.", "fol": "", "prediction": ["all x.((RubberBand(x) & StretchedTooThin(x)) -> Snaps(x))"]}
{"id": "eqasc_train_5142", "nl": "A rubber band stretched too thin will have particles vibrate.", "fol": "", "prediction": ["all x.((RubberBand(x) & StretchedTooThin(x)) -> HasVibration(x))"]}
{"id": "eqasc_train_5143", "nl": "Of course, pianos and other instruments produce damped, forced vibrations.", "fol": "", "prediction": ["all x.((Piano(x) | Instrument(x)) -> ProducesDampFocusedVibrations(x))"]}
{"id": "eqasc_train_5144", "nl": "a rubber band snapping causes the particles in the rubber band to do what a piano does ", "fol": "", "prediction": ["all x y z.((RubberBandSnapping(x) & RubberBand(y) & Piano(z)) -> CausesParticlesToDoWhatPianoDoes(y,z))"]}
{"id": "eqasc_train_5145", "nl": "a rubber band snapping causes the particles in the rubber band to create sound", "fol": "", "prediction": ["all x y z.((RubberBandSnapping(x) & ParticlesInRubberBand(y) & RubberBand(z)) -> CausesCreationOfSound(x,y,z))"]}
{"id": "eqasc_train_5146", "nl": "Rubber bands are available in the laboratory.", "fol": "", "prediction": ["all x.(RubberBand(x) -> AvailableInLaboratory(x))"]}
{"id": "eqasc_train_5147", "nl": "something available in the laboratory causes particles in itself to vibrate when snapping.", "fol": "", "prediction": ["all x.((AvailableInLaboratory(x) & ParticlesInLaboratory(x)) -> VibrateWhenSnapping(x))"]}
{"id": "eqasc_train_5148", "nl": "Elastic bands vibrate when stretched too thin", "fol": "", "prediction": ["all x y.((ElasticBand(x) & StretchedTooThin(y)) -> Vibrate(x))"]}
{"id": "eqasc_train_5149", "nl": "a rubber band snapping causes the particles in the rubber band to Heat  ", "fol": "", "prediction": ["all x y.((RubberBandSnapping(x) & RubberBand(y)) -> CausesToHeat(x,y))"]}
{"id": "eqasc_train_5150", "nl": "Evolution is a change in the characteristics of living things over time.", "fol": "", "prediction": ["all x.(Evolution(x) -> ChangeInCharacteristicsOfLivingThings(x))"]}
{"id": "eqasc_train_5151", "nl": "Micro-evolution demonstrates the ability of organisms to adapt to their environment.", "fol": "", "prediction": ["all x y.((Microevolution(x) & Organism(y)) -> AdaptsToEnvironment(x,y))"]}
{"id": "eqasc_train_5152", "nl": "the ability of organisms to adapt to their environment changes over time.", "fol": "", "prediction": ["all x y.((Organism(x) & EnvironmentChange(y)) -> AdaptsTo(x,y))"]}
{"id": "eqasc_train_5153", "nl": "Almost all physical characteristics are genetic traits, inherited from parents.", "fol": "", "prediction": ["all x.(PhysicalCharacteristics(x) -> (GeneticTreatment(x) & inheritedFromParents(x)))"]}
{"id": "eqasc_train_5154", "nl": "Evolution is a change in the genetic traits of living things over time.", "fol": "", "prediction": ["all x.(Evolution(x) -> ChangeInGeneticTreatmentsOfLivingThings(x))"]}
{"id": "eqasc_train_5155", "nl": "Characteristics include traits like shape, color, size, and texture.", "fol": "", "prediction": ["all x.(Characteristic(x) -> (Shape(x) | Color(x) | Size(x) | Texture(x)))"]}
{"id": "eqasc_train_5156", "nl": "evolution is the change in traits of living things over time", "fol": "", "prediction": ["all x y.((Evolution(x) & LivingThing(y)) -> ChangesTraitsOverTime(x,y))"]}
{"id": "eqasc_train_5157", "nl": "Biological evolution is slow, while corporate evolution is fast.", "fol": "", "prediction": ["(all x.(BiologicalEvolution(x) -> Slow(x)) & all y.(CorporateEvolution(y) -> Fast(y)))"]}
{"id": "eqasc_train_5158", "nl": "The change in the characteristics of living things over time is slow.", "fol": "", "prediction": ["all x.((Causes(x) & LivingThing(x)) -> Slow(x))"]}
{"id": "eqasc_train_5159", "nl": "On the other hand, the environment causes all living things to adapt.", "fol": "", "prediction": ["all x.(Environment(x) -> CausesAdaptation(x))"]}
{"id": "eqasc_train_5160", "nl": "environment  can cause evolution", "fol": "", "prediction": ["all x.(Environment(x) -> CausesEvolution(x))"]}
{"id": "eqasc_train_5161", "nl": "Evolution is the process of adaptation.", "fol": "", "prediction": ["all x.(Evolution(x) -> Adaptation(x))"]}
{"id": "eqasc_train_5162", "nl": "the process of adaptation is a change in the characteristics of living things over time", "fol": "", "prediction": ["all x y z.((AdaptationProcess(x) & LivingThing(y) & Time(z)) -> ChangeInCharacteristicsOverTime(x,y,z))"]}
{"id": "eqasc_train_5163", "nl": "Trees are the largest of living things.", "fol": "", "prediction": ["all x.(Tree(x) -> LargestOfLivingThings(x))"]}
{"id": "eqasc_train_5164", "nl": "evolution changes the characteristics of trees over time", "fol": "", "prediction": ["all x y.((Evolution(x) & Tree(y)) -> ChangesCharacteristicsOverTime(x,y))"]}
{"id": "eqasc_train_5165", "nl": "evolution is a change in the characteristics of organisms over time", "fol": "", "prediction": ["all x y z.((Evolution(x) & Organism(y) & Time(z)) -> ChangeInCharacteristicsOverTime(x,y,z))"]}
{"id": "eqasc_train_5166", "nl": "Evolution relies on random chance acts to cause mutations.", "fol": "", "prediction": ["all x.(Evolution(x) -> ReliesOnRawnChanceActs(x))"]}
{"id": "eqasc_train_5167", "nl": "mutations change characteristics of living things over time", "fol": "", "prediction": ["all x y.((Mutation(x) & LivingThing(y)) -> ChangesCharacteristicsOverTime(x,y))"]}
{"id": "eqasc_train_5168", "nl": "Evolution is the study of living things with time.", "fol": "", "prediction": ["all x.(Evolution(x) -> StudiesLivingThingsWithTime(x))"]}
{"id": "eqasc_train_5169", "nl": "evolution studies characteristics over time", "fol": "", "prediction": ["all x y.((Evolution(x) & Time(y)) -> StudiesCharacteristics(x,y))"]}
{"id": "eqasc_train_5170", "nl": "electricity is used as an energy source by electrical devices", "fol": "", "prediction": ["all x y.((Electricity(x) & ElectricalDevice(y)) -> UsedAsEnergySource(x,y))"]}
{"id": "eqasc_train_5171", "nl": "Sunlight can be converted to electricity.", "fol": "", "prediction": ["all x.(Sunlight(x) -> ConvertedToElectricity(x))"]}
{"id": "eqasc_train_5172", "nl": "Sunlight can be  used as an energy source by devices", "fol": "", "prediction": ["all x.(Sunlight(x) -> EnergySource(x))"]}
{"id": "eqasc_train_5173", "nl": "electricity is used as an energy source by television", "fol": "", "prediction": ["all x y.((Electricity(x) & Television(y)) -> UsedAsEnergySource(x,y))"]}
{"id": "eqasc_train_5174", "nl": "Once a device is plugged into electrical outlets, it can communicate with other devices.", "fol": "", "prediction": ["all x.((Device(x) & PluggedIntoElectricalOutlets(x)) -> CommunicatesWithOtherDevices(x))"]}
{"id": "eqasc_train_5175", "nl": "electricity is used as an energy source to electrical outlets", "fol": "", "prediction": ["all x y.((Electricity(x) & ElectricalOutlet(y)) -> UsedAsEnergySource(x,y))"]}
{"id": "eqasc_train_5176", "nl": "Of course, computers are electronic devices, and as such, they deal in electrical terms.", "fol": "", "prediction": ["all x.(Computer(x) -> (ElectronicDevice(x) & ElectricalTerms(x)))"]}
{"id": "eqasc_train_5177", "nl": "Electricity is used for energy by computers", "fol": "", "prediction": ["all x y.((Electricity(x) & Computer(y)) -> UsedForEnergy(x,y))"]}
{"id": "eqasc_train_5178", "nl": "Electrical engineers work on power plants, computers, and other electrical devices.", "fol": "", "prediction": ["all x.(ElectricalEngineer(x) -> (WorksOnPowerPlants(x) & WorksOnComputers(x) & WorksOnElectricalDevices(x)))"]}
{"id": "eqasc_train_5179", "nl": "Computers use electricity as an energy source.", "fol": "", "prediction": ["all x.(Computer(x) -> UsesElectricityAsEnergySource(x))"]}
{"id": "eqasc_train_5180", "nl": "Devices such as pagers and cell phones are forbidden.", "fol": "", "prediction": ["all x.((Device(x) & (Pager(x) | CellPhone(x))) -> -Banned(x))"]}
{"id": "eqasc_train_5181", "nl": " electricity is used as an energy source by pagers", "fol": "", "prediction": ["all x y.((Pager(x) & Pager(y)) -> UsesElectricityAsEnergySource(x,y))"]}
{"id": "eqasc_train_5182", "nl": "Electrical sources are potential hazards.", "fol": "", "prediction": ["all x.(ElectricalSource(x) -> PotentialHazard(x))"]}
{"id": "eqasc_train_5183", "nl": "electricity is a hazard", "fol": "", "prediction": ["all x.(Electricity(x) -> Hazard(x))"]}
{"id": "eqasc_train_5184", "nl": "Electricity moves well through wires and water.", "fol": "", "prediction": ["all x.(Electricity(x) -> (MovesWellThroughWires(x) & MovesWellThroughWater(x)))"]}
{"id": "eqasc_train_5185", "nl": "an energy source used by devices moves well through wires and water", "fol": "", "prediction": ["all x y.((EnergySource(x) & Device(y)) -> MovesWellThroughWiresAndWater(x,y))"]}
{"id": "eqasc_train_5186", "nl": "a breathing mask is used for keeping harmful particles from entering the respiratory system", "fol": "", "prediction": ["all x y.((BreathingMask(x) & HarmfulParticles(y)) -> KeepsFromEnteringRespiratorySystem(x,y))"]}
{"id": "eqasc_train_5187", "nl": "When inhaled, the particles lodge in the respiratory system, causing or aggravating health problems.", "fol": "", "prediction": ["all x y.((Inhaled(x) & Particles(y)) -> (LocatesInRespiratorySystem(y,x) & CausesOrAggravatesHealthProblems(y)))"]}
{"id": "eqasc_train_5188", "nl": "a breathing mask keeps harmful particles from being inhaled and causing health problems.", "fol": "", "prediction": ["all x.(BreathingMask(x) -> (KeepsHarmfulParticlesInhaled(x) & CausesHealthProblems(x)))"]}
{"id": "eqasc_train_5189", "nl": "When mold grows in the house, it can emit particles that travel through the air.", "fol": "", "prediction": ["all x.((Mold(x) & GrowsInHouse(x)) -> EmitsParticles(x))"]}
{"id": "eqasc_train_5190", "nl": "A breathing mask can keep mold from entering the respiratory system. ", "fol": "", "prediction": ["all x.(BreathingMask(x) -> KeepsMoldFromEnteringRespiratorySystem(x))"]}
{"id": "eqasc_train_5191", "nl": "Oxygen enters the respiratory system through the mouth and the nose.", "fol": "", "prediction": ["all x.(Oxygen(x) -> (EntersRespiratorySystem(x) & ThroughMouth(x) & ThroughNasal(x)))"]}
{"id": "eqasc_train_5192", "nl": "Breathing masks are used to keep harmful particles from entering the mouth and the nose.", "fol": "", "prediction": ["all x.(BreathingMaske(x) -> (KeepsHarmfulParticlesFromEntering(x) & KeepsParticlesFromEntering(x)))"]}
{"id": "eqasc_train_5193", "nl": "Sulfate particles irritate the lower respiratory system.", "fol": "", "prediction": ["all x.(SulfateParticle(x) -> IrritatesLowerRespiratorySystem(x))"]}
{"id": "eqasc_train_5194", "nl": "A breathing mask can be used for keeping out sulfate particles.", "fol": "", "prediction": ["all x.(BreathingMask(x) -> KeepsOutSulfateParticles(x))"]}
{"id": "eqasc_train_5195", "nl": "All smoke is harmful to the respiratory system.", "fol": "", "prediction": ["all x.(Smoke(x) -> HarmfulToRespiratorySystem(x))"]}
{"id": "eqasc_train_5196", "nl": "A breathing mask is used to keep smoke out of the respiratory system", "fol": "", "prediction": ["all x y.((BreathingMask(x) & Smoke(y)) -> KeepsOutOfRespiratorySystem(x,y))"]}
{"id": "eqasc_train_5197", "nl": "Another respiratory defense is the immune system.", "fol": "", "prediction": ["all x.(RespiratoryDefense(x) -> ImmuneSystem(x))"]}
{"id": "eqasc_train_5198", "nl": "the immune system is a defense against harmful particles from entering the body", "fol": "", "prediction": ["all x y.((ImmuneSystem(x) & Body(y)) -> DefenseAgainstHarmfulParticles(x,y))"]}
{"id": "eqasc_train_5199", "nl": "Unlike larger particles, the smaller particles are able to enter the respiratory system.", "fol": "", "prediction": ["all x.((Particle(x) & Smaller(x)) -> EntersRespiratorySystem(x))"]}
{"id": "eqasc_train_5200", "nl": "A breathing mask is used to keep smaller particles out of the lungs.", "fol": "", "prediction": ["all x.(BreathingMask(x) -> KeepsSmallerParticlesOutOfLungs(x))"]}
{"id": "eqasc_train_5201", "nl": "Aerosols are tiny particles suspended in the air.", "fol": "", "prediction": ["all x.(Aerosol(x) -> (TinyParticles(x) & SuspendedInAir(x)))"]}
{"id": "eqasc_train_5202", "nl": "a breathing mask is used for keeping aerosols from entering the respiratory system", "fol": "", "prediction": ["all x y.((BreathingMask(x) & Aerosol(y)) -> KeepsFromEnteringRespiratorySystem(x,y))"]}
{"id": "eqasc_train_5203", "nl": "a breathing mask is used for keeping harmful particles from entering the lungs", "fol": "", "prediction": ["all x y.((BreathingMask(x) & HarmfulParticles(y)) -> KeepsFromEnteringLungs(x,y))"]}
{"id": "eqasc_train_5204", "nl": "Air pollution is caused by the build-up of harmful gases and particles in the air.", "fol": "", "prediction": ["all x.(AirPollution(x) -> (BuildupOfHarmfulGasesAndParticles(x) & InAir(x)))"]}
{"id": "eqasc_train_5205", "nl": "A breathing mask is used for keeping air pollution from the respiratory system.", "fol": "", "prediction": ["all x.(BreathingMask(x) -> (KeepsAirPollution(x) & FromRespiratorySystem(x)))"]}
{"id": "eqasc_train_5206", "nl": "Allergies are a reaction of the immune system to harmful particles in the air.", "fol": "", "prediction": ["all x.(Allergie(x) -> (ReactionOfImmuneSystemToHarmfulParticles(x) & InAir(x)))"]}
{"id": "eqasc_train_5207", "nl": "A breathing mask can prevent an allergic reaction", "fol": "", "prediction": ["all x.(BreathingMask(x) -> PreventsAllergyReaction(x))"]}
{"id": "eqasc_train_5208", "nl": "Behaviors that improve fitness increase through natural selection.", "fol": "", "prediction": ["all x.((Behavior(x) & ImprovesFitness(x)) -> IncreasesThroughNaturalSelection(x))"]}
{"id": "eqasc_train_5209", "nl": "Fitness traits relate to an animal s ability to survive and reproduce.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> (AbilityToSurvive(x,y) & AbilityToReproduce(x,y)))"]}
{"id": "eqasc_train_5210", "nl": "behaviors that improve traits that relate to an animal's ability to survive and reproduce increases through natural selection", "fol": "", "prediction": ["all x y.((Behaviors(x) & Behaviors(y) & ImprovesTraits(x,y) & Animal(y) & SurvivesAndReproduces(x,y)) -> NaturalSelectionIncreases(x,y))"]}
{"id": "eqasc_train_5211", "nl": "Darwinism is strictly, selection theory.", "fol": "", "prediction": ["all x.(Darwinism(x) -> (SelectionTheory(x) & Striking(x)))"]}
{"id": "eqasc_train_5212", "nl": "behaviors that improve fitness increase through Darwinism", "fol": "", "prediction": ["all x.((Behaviors(x) & ImproveFitness(x) & Darwinism(x)) -> IncreasesByIncrease(x))"]}
{"id": "eqasc_train_5213", "nl": "Adaptation is the result of natural selection.", "fol": "", "prediction": ["all x.(Adaptation(x) -> NaturalSelection(x))"]}
{"id": "eqasc_train_5214", "nl": "Behaviors that improve fitness increase through adaptation", "fol": "", "prediction": ["all x.((Behavior(x) & ImprovesFitness(x)) -> IncreasesThroughAdaptation(x))"]}
{"id": "eqasc_train_5215", "nl": "Natural selection is the mechanism of evolution.", "fol": "", "prediction": ["all x.(NaturalSelection(x) -> EvolutionMechanism(x))"]}
{"id": "eqasc_train_5216", "nl": "the evolution process increases behaviors that improve fitness", "fol": "", "prediction": ["all x y.((EvolutionProcess(x) & Behavior(y)) -> IncreasesAndImprovesFitness(x,y))"]}
{"id": "eqasc_train_5217", "nl": "Adaptation traits contribute to individual fitness and to the evolution of animal genetic resources.", "fol": "", "prediction": ["all x.(AdaptationTreatment(x) -> (ContributesToIndividualFitness(x) & ContributesToAnimalGeneticResources(x)))"]}
{"id": "eqasc_train_5218", "nl": "Behaviors can improve the evolution of animal genetic resources.", "fol": "", "prediction": ["all x.(Behavior(x) -> ImprovesAnimalGeneticResources(x))"]}
{"id": "eqasc_train_5219", "nl": "Behaviors that improve fitness increase through evolution", "fol": "", "prediction": ["all x.((Behavior(x) & ImprovesFitness(x)) -> IncreasesThroughEvolution(x))"]}
{"id": "eqasc_train_5220", "nl": "behaviors that improve fitness increase through evolution", "fol": "", "prediction": ["all x.((Behaviors(x) & ImproveFitness(x)) -> IncreasesThroughEvolution(x))"]}
{"id": "eqasc_train_5221", "nl": "Many organism behaviors have evolved through natural selection.", "fol": "", "prediction": ["all x.(OrganismBehavior(x) -> Evolutionary(x))"]}
{"id": "eqasc_train_5222", "nl": "An organism's fitness is a result of evolution.", "fol": "", "prediction": ["all x.(Organism(x) -> EvolutionResult(x))"]}
{"id": "eqasc_train_5223", "nl": "Natural selection is differential reproduction.", "fol": "", "prediction": ["all x.(NaturalSelection(x) -> DifferentialReproduction(x))"]}
{"id": "eqasc_train_5224", "nl": "Behaviors that improve fitness increase through differential reproduction", "fol": "", "prediction": ["all x.((Behavior(x) & ImprovesFitness(x)) -> IncreasesThroughDifferentialReproduction(x))"]}
{"id": "eqasc_train_5225", "nl": "Cells have multiple repair mechanisms to fix mutations in DNA.", "fol": "", "prediction": ["all x.(Cell(x) -> (exists y.(DNAMutation(y) & Fixes(x,y))))"]}
{"id": "eqasc_train_5226", "nl": "Mutation occurs in the cell's DNA, or genetic material.", "fol": "", "prediction": ["all x.(Mutation(x) -> (OccursIn(x,DDNA) | OccursIn(x,GeneticMaterial)))"]}
{"id": "eqasc_train_5227", "nl": "genetic material can have mutations", "fol": "", "prediction": ["all x.(GeneticMaterial(x) -> HasMutation(x))"]}
{"id": "eqasc_train_5228", "nl": "And if the damaged DNA is duplicated, it causes mutation.", "fol": "", "prediction": ["(DamagedDNA(DamagedDNA) & Duplicated(DamagedDNA)) -> CausesMutation(DamagedDNA))"]}
{"id": "eqasc_train_5229", "nl": "Cells have multiple repair mechanisms to fix damaged DNA.", "fol": "", "prediction": ["all x.(Cell(x) -> (HasMultipleRepairMechanisms(x) & FixesDamagedDNA(x)))"]}
{"id": "eqasc_train_5230", "nl": "DNA damage is a cause of mutations that can cause cancers.", "fol": "", "prediction": ["all x.((DNADamage(x) & Mutations(x) & Cancer(x)) -> Causes(x,y))"]}
{"id": "eqasc_train_5231", "nl": "Cells have multiple repair mechanisms to fix the effects of cancers", "fol": "", "prediction": ["all x y.((Cell(x) & Cancer(y)) -> HasMultipleRepairMechanisms(x,y))"]}
{"id": "eqasc_train_5232", "nl": "DNA excision repair is a major cellular response to DNA damage.", "fol": "", "prediction": ["all x.(DNAExcisionRepair(x) -> MajorCellularResponseToDNADamage(x))"]}
{"id": "eqasc_train_5233", "nl": "Excision can be used to fix dna mutations", "fol": "", "prediction": ["all x y.((Excision(x) & DnaMutation(y)) -> CanFix(x,y))"]}
{"id": "eqasc_train_5234", "nl": "Cells have multiple repair mechanisms to fix mutations in deoxyribonucleic acid.", "fol": "", "prediction": ["all x.(Cell(x) -> (exists y.(DeoxyribonucleicAcid(y) & Requires(x,y))))"]}
{"id": "eqasc_train_5235", "nl": "Genetic Mutations Genetic mutations occur frequently.", "fol": "", "prediction": ["all x.(GeneticMutations(x) -> GeneticMutationsOccur(x))"]}
{"id": "eqasc_train_5236", "nl": "Cells have repair mechanisms to fix genetic problems in DNA.", "fol": "", "prediction": ["all x.(Cell(x) -> HasRepairMechanisms(x))"]}
{"id": "eqasc_train_5237", "nl": "DNA damage is called mutation.", "fol": "", "prediction": ["all x.(DNADamage(x) -> Mutation(x))"]}
{"id": "eqasc_train_5238", "nl": "Cells have multiple repair mechanisms to fix damage in DNA", "fol": "", "prediction": ["all x y.((Cell(x) & DNA(y)) -> HasMultipleRepairMechanisms(x,y))"]}
{"id": "eqasc_train_5239", "nl": "Cells have multiple repair mechanisms to fix damage to DNA", "fol": "", "prediction": ["all x.(Cell(x) -> (exists y.(RepairMechanism(y) & Repairs(x,y))))"]}
{"id": "eqasc_train_5240", "nl": "Cells have multiple repair mechanisms to fix damaged DNA duplication", "fol": "", "prediction": ["all x.(Cell(x) -> (exists y.(RepairMechanism(y) & DamagedDNADuplication(y)) & Has(x,y))))"]}
{"id": "eqasc_train_5241", "nl": "Viruses are usually considered to be nonliving.", "fol": "", "prediction": ["all x.(Virus(x) -> Nonliving(x))"]}
{"id": "eqasc_train_5242", "nl": "Humans acquire the infection from contact with infected animals, carcasses, or nonliving material.", "fol": "", "prediction": ["all x.(Human(x) -> (AcquiresInfectionFromContact(x,infectedAnimals) | AcquiresInfectionFromContact(x,caskets) | AcquiresInfectionFromContact(x,nonlivingMaterial)))"]}
{"id": "eqasc_train_5243", "nl": "Viruses are usually acquired from contact with infected animals", "fol": "", "prediction": ["all x y.((Virus(x) & InfectedAnimal(y)) -> AcquiredFromContact(x,y))"]}
{"id": "eqasc_train_5244", "nl": "Most viruses, like HIV, are ball-shaped.", "fol": "", "prediction": ["all x.((Virus(x) & LikeHIV(x)) -> BallShape(x))"]}
{"id": "eqasc_train_5245", "nl": "HIV is considered to be nonliving", "fol": "", "prediction": ["all x.((HIV(x) & NonLiving(x)) -> NonLiving(x))"]}
{"id": "eqasc_train_5246", "nl": "the smallest agents of disease are usually considered to be nonliving.", "fol": "", "prediction": ["all x.((SmallestAgentOfDisease(x) & Nonliving(x)) -> Nonliving(x))"]}
{"id": "eqasc_train_5247", "nl": "Influenza Virus Inluenza virus are negative-strand RNA viruses with a segmented genome.", "fol": "", "prediction": ["all x.(InfluenzaVirus(x) -> (NegativeStringRNAVirus(x) & SegmentedGenome(x)))"]}
{"id": "eqasc_train_5248", "nl": "Influenza is considered to be nonliving.", "fol": "", "prediction": ["all x.(Influenza(x) -> Nonliving(x))"]}
{"id": "eqasc_train_5249", "nl": "Viruses are acellular and live on materials of other life.", "fol": "", "prediction": ["all x.(Virus(x) -> (Acellular(x) & LivesOnMaterialsOfOtherLife(x)))"]}
{"id": "eqasc_train_5250", "nl": "acellular organisms need a living host", "fol": "", "prediction": ["all x.(AcellularOrganism(x) -> NeedsLivingHost(x))"]}
{"id": "eqasc_train_5251", "nl": "Herpes is considered to be nonliving", "fol": "", "prediction": ["all x.(Herpes(x) -> Nonliving(x))"]}
{"id": "eqasc_train_5252", "nl": "All matter, living and nonliving, is made up of atoms.", "fol": "", "prediction": ["all x.((Matter(x) & Living(x) & Nonliving(x)) -> MadeUpOfAtoms(x))"]}
{"id": "eqasc_train_5253", "nl": "Viruses are usually considered to be made up of atoms", "fol": "", "prediction": ["all x.(Virus(x) -> MadeUpOfAtoms(x))"]}
{"id": "eqasc_train_5254", "nl": "influenza orthomyxoviruses are usually considered to be nonliving", "fol": "", "prediction": ["all x.((InfluenzaOrthovirus(x) & NonLiving(x)) -> (InfluenzaOrthovirus(x) & NonLiving(x)))"]}
{"id": "eqasc_train_5255", "nl": "smallpox is usually considered to be nonliving", "fol": "", "prediction": ["all x.(Smallpox(x) -> Nonliving(x))"]}
{"id": "eqasc_train_5256", "nl": "Viruses are made up of atoms.", "fol": "", "prediction": ["all x.(Virus(x) -> MadeUpOfAtoms(x))"]}
{"id": "eqasc_train_5257", "nl": "The smallest agents of diseases are nonliving.", "fol": "", "prediction": ["all x.((Agent(x) & Smallest(x)) -> Nonliving(x))"]}
{"id": "eqasc_train_5258", "nl": "Variola major, the virus that causes smallpox, is considered a potential bioterrorism agent.", "fol": "", "prediction": ["all x.((VariolaMajor(x) & CausesSmallpox(x)) -> PotentialBioterrorismAgent(x))"]}
{"id": "eqasc_train_5259", "nl": "The cause of smallpox is usually thought to be nonliving", "fol": "", "prediction": ["all x.(Smallpox(x) -> (NonlivingCause(x) & UsuallyCause(x,Smallpox)))"]}
{"id": "eqasc_train_5260", "nl": "the simplest organisms known are usually considered to be nonliving.", "fol": "", "prediction": ["all x.((SimplestOrganism(x) & Known(x)) -> Nonliving(x))"]}
{"id": "eqasc_train_5261", "nl": "Monotremes are mammals that reproduce by laying eggs.", "fol": "", "prediction": ["all x.(Monotreme(x) -> (Mammal(x) & LaysEggs(x)))"]}
{"id": "eqasc_train_5262", "nl": "the platypus reproduces by laying eggs", "fol": "", "prediction": ["all x.(Platypus(x) -> ReproducesByLayingEggs(x))"]}
{"id": "eqasc_train_5263", "nl": "Like the platypus, an echidna is an egg laying mammal.", "fol": "", "prediction": ["all x.(Echidna(x) -> (EggLayingMammal(x) & LikePlatypus(x)))"]}
{"id": "eqasc_train_5264", "nl": "Platypus are monotremes", "fol": "", "prediction": ["all x.(Platypus(x) -> Monotreme(x))"]}
{"id": "eqasc_train_5265", "nl": "When the egg is ready to hatch, it hatches.", "fol": "", "prediction": ["all x.((Egg(x) & ReadyToHave(x)) -> Hatches(x))"]}
{"id": "eqasc_train_5266", "nl": "the young of monotremes are hatched ", "fol": "", "prediction": ["all x.((YoungOfMonotreme(x) & Hatched(x)) -> Hatched(x))"]}
{"id": "eqasc_train_5267", "nl": "Well, platypuses are mammals, and they lay eggs.", "fol": "", "prediction": ["all x.(Plactus(x) -> (Mammal(x) & LaysEggs(x)))"]}
{"id": "eqasc_train_5268", "nl": "Platypuses are monotremes.", "fol": "", "prediction": ["all x.(Plactus(x) -> Monotreme(x))"]}
{"id": "eqasc_train_5269", "nl": "platypuses reproduce by laying eggs", "fol": "", "prediction": ["all x.(Plutypuse(x) -> ReproducesByLayingEggs(x))"]}
{"id": "eqasc_train_5270", "nl": "Echidnas reproduce by laying eggs.", "fol": "", "prediction": ["all x.(Echidna(x) -> ReproducesByLayingEggs(x))"]}
{"id": "eqasc_train_5271", "nl": "Monotremes include the duckbill platypus.", "fol": "", "prediction": ["all x.(Monotreme(x) -> (Duckbill(x) & Platypus(x)))"]}
{"id": "eqasc_train_5272", "nl": "Duckbill platypus are mammals that reproduce by laying eggs.", "fol": "", "prediction": ["all x.(DuckbillPlatypus(x) -> (Mammal(x) & LaysEggs(x)))"]}
{"id": "eqasc_train_5273", "nl": "Platypus and Echidna are mammals that reproduce by laying eggs", "fol": "", "prediction": ["all x y.((Mammal(x) & Mammal(y)) -> (Plutypus(x) | Echidna(x)) & LaysEggs(x)))"]}
{"id": "eqasc_train_5274", "nl": "Echidnas are monotremes, or egg laying mammals.", "fol": "", "prediction": ["all x.(Echidna(x) -> (Monotreme(x) | EggLayingMammal(x)))"]}
{"id": "eqasc_train_5275", "nl": "An echidna reproduces by laying eggs", "fol": "", "prediction": ["all x.(Echidna(x) -> ReproducesByLayingEggs(x))"]}
{"id": "eqasc_train_5276", "nl": "Unlike most mammals, female monotremes have no teats.", "fol": "", "prediction": ["all x.((Mammal(x) & FemaleMonotreme(x)) -> -HasTeats(x))"]}
{"id": "eqasc_train_5277", "nl": "Female monotremes reproduce by laying eggs and have no teats.", "fol": "", "prediction": ["all x.(FemaleMonotreme(x) -> (ReproducesByLayingEggs(x) & -HasTeats(x)))"]}
{"id": "eqasc_train_5278", "nl": "Dilation occurs when cell walls relax.", "fol": "", "prediction": ["all x.((CellWalls(x) & Relax(x)) -> DilationOccurs(x))"]}
{"id": "eqasc_train_5279", "nl": "Dilation is often uncomfortable.", "fol": "", "prediction": ["all x.(Dilation(x) -> Uncomfortable(x))"]}
{"id": "eqasc_train_5280", "nl": "it's often uncomfortable when cell walls relax", "fol": "", "prediction": ["all x.((CellWalls(x) & Relax(x)) -> Uncomfortable(x))"]}
{"id": "eqasc_train_5281", "nl": "Blood vessels dilate, the flow of blood to the skin increases and the muscles relax.", "fol": "", "prediction": ["all x y z.((BloodVessel(x) & Skin(y) & BloodFlow(z)) -> (Dilates(x) & Increases(z) & Relaxes(z)))"]}
{"id": "eqasc_train_5282", "nl": "Cell walls relax and increase the flow of blood", "fol": "", "prediction": ["all x.(CellWall(x) -> (Relax(x) & IncreaseFlowOfBlood(x)))"]}
{"id": "eqasc_train_5283", "nl": "Plant cells are encased by a cell wall.", "fol": "", "prediction": ["all x.(PlantCell(x) -> EncasedByCellWall(x))"]}
{"id": "eqasc_train_5284", "nl": "Dilation occurs when the encasing of plant cells relaxes", "fol": "", "prediction": ["all x y.((Encasing(x) & PlantCell(y) & Relaxes(x,y)) -> DilationOccurs(x))"]}
{"id": "eqasc_train_5285", "nl": "Dilatation is the widening of the cervix using progressively wider metal rods.", "fol": "", "prediction": ["all x.(Dilatation(x) -> (WidesCervix(x) & UsesProgressivelyWideMetalRods(x)))"]}
{"id": "eqasc_train_5286", "nl": "widening occurs when cell walls relax.", "fol": "", "prediction": ["all x.((CellWallsRelaxation(x) & CellWallsRelaxation(x)) -> Widens(x))"]}
{"id": "eqasc_train_5287", "nl": "When oxygen level decreases, dilatation of the blood vessels occurs.", "fol": "", "prediction": ["all x.((OxygenLevelDecreases(x) & BloodVessels(x)) -> DilatationOccurs(x))"]}
{"id": "eqasc_train_5288", "nl": "Decreased oxygen levels cause blood vessels to dilate and cell walls to relax.", "fol": "", "prediction": ["all x.(DecreasedOxygenLevels(x) -> (DilatesBloodVessels(x) & RelaxesCellWalls(x)))"]}
{"id": "eqasc_train_5289", "nl": "Relaxation promotes relaxation and easing of tension.", "fol": "", "prediction": ["all x.(Relaxation(x) -> (PromotesRelaxation(x) & EasesTension(x)))"]}
{"id": "eqasc_train_5290", "nl": "Dilation occurs when the tension of cell walls are eased.", "fol": "", "prediction": ["all x.((CellWallTension(x) & Eased(x)) -> Dilation(x))"]}
{"id": "eqasc_train_5291", "nl": "Larger, dilated pupils are seen as more attractive than smaller, contracted pupils.", "fol": "", "prediction": ["all x y.((Larger(x) & Dilated(x) & Smaller(y) & Contracted(y)) -> MoreAttractive(x,y))"]}
{"id": "eqasc_train_5292", "nl": "the pupils become larger when cells walls relax", "fol": "", "prediction": ["all x y.((Pupil(x) & CellWallsRelax(y)) -> Larger(x,y))"]}
{"id": "eqasc_train_5293", "nl": "Blood flow is improved by vitamin E and it causes blood vessels to dilate or expand.", "fol": "", "prediction": ["all x.((BloodFlow(x) & VitaminE(x)) -> (Dilates(x) | Expands(x))))"]}
{"id": "eqasc_train_5294", "nl": "When cell walls relax, they expand.", "fol": "", "prediction": ["all x.((CellWalls(x) & Relax(x)) -> Expand(x))"]}
{"id": "eqasc_train_5295", "nl": "An aneurysm is a dilation of a blood vessel.", "fol": "", "prediction": ["all x.(Aneurysm(x) -> DilationOfBloodVessel(x))"]}
{"id": "eqasc_train_5296", "nl": "Aneurysms are caused by relaxation of cell walls of blood vessels.", "fol": "", "prediction": ["all x.(Aneurysm(x) -> (CausedByRelaxation(x) & CellWallsOfBloodVessels(x)))"]}
{"id": "eqasc_train_5297", "nl": "An aneurysm is a dilation, or bubble, that occurs in the wall of an artery.", "fol": "", "prediction": ["all x.(Aneurysm(x) -> (Dilation(x) | Bubble(x)) & OccursInWallOfArtery(x)))"]}
{"id": "eqasc_train_5298", "nl": "an artery can be relaxed by dilation", "fol": "", "prediction": ["all x.(Artery(x) -> RelaxedByDilation(x))"]}
{"id": "eqasc_train_5299", "nl": "Cell wall is the rigid structure that surrounds the plant cell.", "fol": "", "prediction": ["all x.(CellWall(x) -> (RigidStructure(x) & SurroundsPlantCell(x)))"]}
{"id": "eqasc_train_5300", "nl": "Dilation occurs when the rigid structure that surrounds the plant cell relaxes.", "fol": "", "prediction": ["all x.((RigidStructure(x) & SurroundsPlantCell(x)) -> Relaxes(x))"]}
{"id": "eqasc_train_5301", "nl": "Slowly leg muscles ease up and shoulders relax.", "fol": "", "prediction": ["all x y.((Loosely(x) & LegMuscle(y)) -> (EaseUp(y) & RelaxShoulders(y)))"]}
{"id": "eqasc_train_5302", "nl": "Dilation occurs when cell walls ease up.", "fol": "", "prediction": ["all x.((CellWalls(x) & EaseUp(x)) -> DilationOccurs(x))"]}
{"id": "eqasc_train_5303", "nl": "Animals have no cell walls.", "fol": "", "prediction": ["all x.(Animal(x) -> -CellWalls(x))"]}
{"id": "eqasc_train_5304", "nl": "Dilation occurs when part of a cell that an animal does not have relaxes.", "fol": "", "prediction": ["all x y.((Cell(x) & Animal(y) & -HasRelaxations(y)) -> DilationOccurs(x,y))"]}
{"id": "eqasc_train_5305", "nl": "Conversely, a decrease in light intensity causes dilation of the pupils.", "fol": "", "prediction": ["all x.((DecreaseInLightIntensity(x) & CausesDilationOfPupils(x)) -> CausesDilationOfPupils(x))"]}
{"id": "eqasc_train_5306", "nl": "decreased light intensity can cause cell walls to relax.", "fol": "", "prediction": ["all x.(DecreasedLightIntensity(x) -> CellWallsRelax(x))"]}
{"id": "eqasc_train_5307", "nl": "Aneurisms are dilations of the blood vessels.", "fol": "", "prediction": ["all x.(Aneurism(x) -> DilationOfBloodVessels(x))"]}
{"id": "eqasc_train_5308", "nl": "aneurisms occur when cells walls relax", "fol": "", "prediction": ["all x.((CellWalls(x) & Relax(x)) -> Neurisms(x))"]}
{"id": "eqasc_train_5309", "nl": "a fire requires oxygen to burn", "fol": "", "prediction": ["all x y.((Fire(x) & Oxygen(y)) -> RequiresToBurn(x,y))"]}
{"id": "eqasc_train_5310", "nl": "In the vacuum of space, there's no oxygen to burn.", "fol": "", "prediction": ["all x.(VacuumOfSpace(x) -> -OxygenToBurn(x))"]}
{"id": "eqasc_train_5311", "nl": "Fires cannot burn in the vacuum of space", "fol": "", "prediction": ["all x.(Fire(x) -> -BurnsInVacuumOfSpace(x))"]}
{"id": "eqasc_train_5312", "nl": "Fire requires oxygen, air.", "fol": "", "prediction": ["all x.(Fire(x) -> (RequiresOxygen(x) & RequiresAir(x)))"]}
{"id": "eqasc_train_5313", "nl": "Fires need to be in contact with the air to burn", "fol": "", "prediction": ["all x y.((Fire(x) & Air(y)) -> NeedsToBurn(x,y))"]}
{"id": "eqasc_train_5314", "nl": "A fire isn't possible in space", "fol": "", "prediction": ["all x.((Fire(x) & Space(x)) -> -PossibleIn(x,Space))"]}
{"id": "eqasc_train_5315", "nl": "There is no \"gaseous\" oxygen on the Moon and the Moon itself is bone dry.", "fol": "", "prediction": ["(-GaseousOxygen(Moon) & BoneDry(Moon))"]}
{"id": "eqasc_train_5316", "nl": "A fire is cannot burn naturally above the surface of the Moon", "fol": "", "prediction": ["all x.(Fire(x) -> -BurnsNaturallyAboveMoonSurface(x))"]}
{"id": "eqasc_train_5317", "nl": "Oxygen has  eight protons and eight electrons.", "fol": "", "prediction": ["all x.(Oxygen(x) -> (HasEightProtons(x) & HasEightElectrons(x)))"]}
{"id": "eqasc_train_5318", "nl": "A fire requires something with exactly eight protons to burn.", "fol": "", "prediction": ["all x.((Fire(x) & RequiresExactEightProtons(x)) -> Burns(x))"]}
{"id": "eqasc_train_5319", "nl": "Combustion is the process of burning.", "fol": "", "prediction": ["all x.(Combustion(x) -> Burning(x))"]}
{"id": "eqasc_train_5320", "nl": "a fire requires oxygen to combust", "fol": "", "prediction": ["all x y.((Fire(x) & Oxygen(y)) -> RequiresToCombust(x,y))"]}
{"id": "eqasc_train_5321", "nl": "Building destroyed by fire.", "fol": "", "prediction": ["all x.(Building(x) -> DismantledByFire(x))"]}
{"id": "eqasc_train_5322", "nl": "oxygen is required to burn a building", "fol": "", "prediction": ["all x y.((Building(x) & Building(y)) -> Burns(x,y))"]}
{"id": "eqasc_train_5323", "nl": "Oxygen-enriched air is a fire hazard because the burning rate of combustible materials is increased.", "fol": "", "prediction": ["all x.((OxygenEnrichedAir(x) & CombustibleMaterials(x)) -> FireHazard(x))"]}
{"id": "eqasc_train_5324", "nl": "The more oxygen that is present, the greater the burn rate.", "fol": "", "prediction": ["all x.((Oxygen(x) & Present(x)) -> GreaterBurnRate(x))"]}
{"id": "eqasc_train_5325", "nl": "If the oxygen is removed, the fire is smothered.", "fol": "", "prediction": ["all x.((OxygenRemoved(x) & FireSmothered(x)) -> Removed(x))"]}
{"id": "eqasc_train_5326", "nl": "smother a fire by cutting off what is required", "fol": "", "prediction": ["all x y.((Fire(x) & Fire(y) & CutsOffRequired(x,y)) -> Smothers(x,y))"]}
{"id": "eqasc_train_5327", "nl": "They produce oxygen as a by-product of photosynthesis.", "fol": "", "prediction": ["all x.((Photosynthesis(x) & ByProductOf(x,Oxygen)) -> Produces(x,Oxygen))"]}
{"id": "eqasc_train_5328", "nl": "a fire requires a by-product of photosynthesis.", "fol": "", "prediction": ["all x.(Fire(x) -> RequiresByProductOfPhotosynthesis(x))"]}
{"id": "eqasc_train_5329", "nl": "Smoke from fires contains heat and the products of burning.", "fol": "", "prediction": ["all x y.((Smoke(x) & Fire(y)) -> (ContainsHeat(x,y) & ContainsProductsOfBurning(x,y)))"]}
{"id": "eqasc_train_5330", "nl": "Smoke is a product of oxygen being burned.", "fol": "", "prediction": ["all x.(Smoke(x) -> ProductOfOxygenBurned(x))"]}
{"id": "eqasc_train_5331", "nl": "creating paper requires cutting down trees", "fol": "", "prediction": ["all x y.((CreatingPaper(x) & Tree(y)) -> RequiresCuttingDown(x,y))"]}
{"id": "eqasc_train_5332", "nl": "Creating paper destroys rainforests.", "fol": "", "prediction": ["all x.(CreatingPaper(x) -> DisruptsRainforests(x))"]}
{"id": "eqasc_train_5333", "nl": "Deforestation takes place when trees are cut down in the rainforest.", "fol": "", "prediction": ["all x y.((Deforestation(x) & Tree(y) & CutDownInRainforest(y,x)) -> TakesPlace(x,y))"]}
{"id": "eqasc_train_5334", "nl": "Creating paper can lead to deforestation.", "fol": "", "prediction": ["all x.(CreatingPaper(x) -> CanLeadToDeforestation(x))"]}
{"id": "eqasc_train_5335", "nl": "Saving trees helps stop global warming.", "fol": "", "prediction": ["all x.(SavesTrees(x) -> StopsGlobalWarming(x))"]}
{"id": "eqasc_train_5336", "nl": "Reductions in paper production would help stop global warming", "fol": "", "prediction": ["all x.((ReductionsInPaperProduction(x) & StopGlobalWarming(x)) -> ReducesInPaperProduction(x))"]}
{"id": "eqasc_train_5337", "nl": "Trees only grow to be cut down.", "fol": "", "prediction": ["all x.(Tree(x) -> GrowsToBeCutDown(x))"]}
{"id": "eqasc_train_5338", "nl": "Trees grow for paper to be made.", "fol": "", "prediction": ["all x.(Tree(x) -> GrowsForPaper(x))"]}
{"id": "eqasc_train_5339", "nl": "Trees begin as epiphytes on host trees.", "fol": "", "prediction": ["all x.(Tree(x) -> (Epiphyte(x) & HostTree(x)))"]}
{"id": "eqasc_train_5340", "nl": "Epiphytes can eventually lead to the production of paper ", "fol": "", "prediction": ["all x.(Ephphyte(x) -> (LeadsToPaperProduction(x) & ProducesPaper(x)))"]}
{"id": "eqasc_train_5341", "nl": "Trees clean and cool the air.", "fol": "", "prediction": ["all x.(Tree(x) -> (CleansAir(x) & CoolsAir(x)))"]}
{"id": "eqasc_train_5342", "nl": "creating paper makes the air dirtier", "fol": "", "prediction": ["all x.(CreatingPaper(x) -> MakesAirDirtier(x))"]}
{"id": "eqasc_train_5343", "nl": "creating paper may cause destroying life.", "fol": "", "prediction": ["all x.(CreatingPaper(x) -> MayCauseDestroyingLife(x))"]}
{"id": "eqasc_train_5344", "nl": "Pulped wood is used to make paper.", "fol": "", "prediction": ["all x.(PulpedWood(x) -> UsedToMakePaper(x))"]}
{"id": "eqasc_train_5345", "nl": "pulped wood requires cutting down trees", "fol": "", "prediction": ["all x.(PulpedWood(x) -> RequiresCuttingDownTrees(x))"]}
{"id": "eqasc_train_5346", "nl": "Zooplankton are tiny animals that feed on phytoplankton.", "fol": "", "prediction": ["all x.(Zooplankton(x) -> (TinyAnimal(x) & FeedsOnPhytoplankton(x)))"]}
{"id": "eqasc_train_5347", "nl": "animal plankton feeds on plant plankton", "fol": "", "prediction": ["all x y z.((AnimalPlankton(x) & PlantPlankton(y) & AnimalPlankton(z)) -> FeedsOnPlankton(x,y,z))"]}
{"id": "eqasc_train_5348", "nl": "Minute plants are known as phytoplankton.", "fol": "", "prediction": ["all x.(MinutePlant(x) -> Phytoplankton(x))"]}
{"id": "eqasc_train_5349", "nl": "zooplankton feed on minute plants", "fol": "", "prediction": ["all x y.((Zooplankton(x) & MinutePlant(y)) -> FeedsOn(x,y))"]}
{"id": "eqasc_train_5350", "nl": "Zooplankton are tiny animals that feed on minute plants", "fol": "", "prediction": ["all x.(Zooplankton(x) -> (TinyAnimal(x) & FeedsOnMinutePlants(x)))"]}
{"id": "eqasc_train_5351", "nl": "Microscopic animals are called zooplankton.", "fol": "", "prediction": ["all x.(MicroscopicAnimal(x) -> Zooplankton(x))"]}
{"id": "eqasc_train_5352", "nl": "zooplankton are microscopic", "fol": "", "prediction": ["all x.(Zooplankton(x) -> Microscopic(x))"]}
{"id": "eqasc_train_5353", "nl": "Many zooplankton are crustaceans.", "fol": "", "prediction": ["all x.(Zooplankton(x) -> Crustacean(x))"]}
{"id": "eqasc_train_5354", "nl": "tiny crustaceans can feed on phytoplankton", "fol": "", "prediction": ["all x.(Crustacean(x) -> (TinyCrustacean(x) & FeedsOnPhytoplankton(x)))"]}
{"id": "eqasc_train_5355", "nl": "zooplankton are tiny animals that feed on planktonic plants", "fol": "", "prediction": ["all x.(Zooplankton(x) -> (TinyAnimal(x) & FeedsOnPlanktonicPlanktonicPlants(x)))"]}
{"id": "eqasc_train_5356", "nl": "Some crustaceans feed on phytoplankton.", "fol": "", "prediction": ["exists x.(Crustacean(x) & FeedsOnPhytoplankton(x))"]}
{"id": "eqasc_train_5357", "nl": "Copepods are tiny animals. ", "fol": "", "prediction": ["all x.(Copepod(x) -> TinyAnimal(x))"]}
{"id": "eqasc_train_5358", "nl": "Scientists have shown that ocean organisms known as zooplankton harbor cholera bacteria.", "fol": "", "prediction": ["all x y.((Scientist(x) & OceanOrganism(y) & Zooplankton(y)) -> HarborsChleraBacteria(x,y))"]}
{"id": "eqasc_train_5359", "nl": "Tiny ocean organisms feed on phytoplankton", "fol": "", "prediction": ["all x y.((TinyOceanOrganism(x) & Phytoplankton(y)) -> FeedsOn(x,y))"]}
{"id": "eqasc_train_5360", "nl": "Fish and other animals eat the zooplankton.", "fol": "", "prediction": ["all x.((Fish(x) | Animal(x)) -> EatsZooplankton(x))"]}
{"id": "eqasc_train_5361", "nl": "Fish and other animals eat tiny animals that feed on phytoplankton", "fol": "", "prediction": ["all x y z.((Fish(x) & Animal(y) & TinyAnimal(z) & FeedsOn(z,Phytoplankton)) -> Eats(x,y,z))"]}
{"id": "eqasc_train_5362", "nl": "Diatoms are the predominant phytoplankton.", "fol": "", "prediction": ["all x.(Diatom(x) -> PredominantPhytoplankton(x))"]}
{"id": "eqasc_train_5363", "nl": "Zooplankton are tiny animals that feed on diatoms.", "fol": "", "prediction": ["all x.(Zooplankton(x) -> (TinyAnimal(x) & FeedsOnDiatoms(x)))"]}
{"id": "eqasc_train_5364", "nl": "the movement of tectonic plates causes volcanic eruptions", "fol": "", "prediction": ["all x y.((TectonicPlate(x) & Movement(y)) -> CausesVolcanicEruption(x,y))"]}
{"id": "eqasc_train_5365", "nl": "Earthquakes and volcanic eruptions can cause tsunamis.", "fol": "", "prediction": ["all x.((Earthquake(x) | VolcanicEruption(x)) -> CausesTsunamis(x))"]}
{"id": "eqasc_train_5366", "nl": "Tectonic plates moving can cause tsunamis. ", "fol": "", "prediction": ["all x.(TectonicPlate(x) -> CausesTsunamis(x))"]}
{"id": "eqasc_train_5367", "nl": "Plate techtonics could be defined as the movement of the earth's sections or plates as a result of convectional forces below the surface.", "fol": "", "prediction": ["all x.(PlateTechtonics(x) -> (MovementOfEarthSectionsOrPlates(x) & ConvectionalForcesBelowSurface(x)))"]}
{"id": "eqasc_train_5368", "nl": "Sections of earth moving causes volcanic eruptions", "fol": "", "prediction": ["all x y.((SectionsOfEarthMoving(x) & VolcanicEruption(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_5369", "nl": "Volcanic eruptions can also cause tsunamis.", "fol": "", "prediction": ["all x.(VolcanicEruption(x) -> CausesTsunamis(x))"]}
{"id": "eqasc_train_5370", "nl": "the movement of tectonic plates cause tsunamis.", "fol": "", "prediction": ["all x.((TectonicPlate(x) & MovementOf(x,tectonicPlates)) -> CausesTsunamis(x))"]}
{"id": "eqasc_train_5371", "nl": "The San Andreas is a \"transform fault\" that marks the boundary between two tectonic plates --  the North American and the Pacific.", "fol": "", "prediction": ["all x.(SanAndreas(x) -> (TransformFault(x) & MarksBoundary(x) & BetweenNorthAmericanAndPacificPlates(x)))"]}
{"id": "eqasc_train_5372", "nl": "The movement of two things that come together in San Andreas causes volcanic eruptions", "fol": "", "prediction": ["all x y z.((MovementOfTwoThings(x) & SanAndreas(y) & SanAndreas(z) & ComesTogether(x,y,z)) -> CausesVolcanicEruptions(x))"]}
{"id": "eqasc_train_5373", "nl": "Time and again, volcanic eruptions have destroyed cities, regions, even entire countries.", "fol": "", "prediction": ["all x y z.((VolcanicEruption(x) & City(y) & Region(z)) -> (Disrupted(x,y) | Disrupted(x,z) | Disrupted(x,z)))"]}
{"id": "eqasc_train_5374", "nl": "the movement of tectonic plates can destroy cities", "fol": "", "prediction": ["all x y.((TectonicPlate(x) & City(y)) -> CanDestroy(x,y))"]}
{"id": "eqasc_train_5375", "nl": "Volcanic eruptions can cause short-term cooling of the Earth's climate.", "fol": "", "prediction": ["all x.(VolcanicEruption(x) -> CausesShortTermCooling(x))"]}
{"id": "eqasc_train_5376", "nl": "The movement of tectonic plates can cause short-term cooling of the Earth's climate.", "fol": "", "prediction": ["all x.((TectonicPlateMovement(x) & CausesShortTermCooling(x)) -> EarthsClimate(x))"]}
{"id": "eqasc_train_5377", "nl": "Large volcanic eruptions can decrease (reduce)the earth's average temperature by (a) emitting particles into the stratosphere, thereby increasing the albedo.", "fol": "", "prediction": ["all x y.((LargeVolcanicEruption(x) & EarthAverageTemperature(y)) -> (Decreases(x,y) & Reduces(x,y)))"]}
{"id": "eqasc_train_5378", "nl": "The movement of tectonic plates can lower the average temperature of the earth", "fol": "", "prediction": ["all x y.((TectonicPlate(x) & Earth(y)) -> LowersAverageTemperature(x,y))"]}
{"id": "eqasc_train_5379", "nl": "Volcanic eruptions are predictable.", "fol": "", "prediction": ["all x.(VolcanicEruption(x) -> Predictable(x))"]}
{"id": "eqasc_train_5380", "nl": "The movement of tectonic plates is predictable", "fol": "", "prediction": ["all x.(TectonicPlate(x) -> PredictableMovement(x))"]}
{"id": "eqasc_train_5381", "nl": "earthquakes cause volcanic eruptions", "fol": "", "prediction": ["all x y.((Earthquake(x) & VolcanicEruption(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_5382", "nl": "Among the most destructive types of debris flows are those that accompany volcanic eruptions.", "fol": "", "prediction": ["all x.((DebrisFlow(x) & AssociatedVolcanicEruptions(x)) -> Destructive(x))"]}
{"id": "eqasc_train_5383", "nl": "tectonic plate movement can lead to debris flows", "fol": "", "prediction": ["all x.(TectonicPlateMovement(x) -> LeadsToDebrisFlows(x))"]}
{"id": "eqasc_train_5384", "nl": "phase changes do not change mass", "fol": "", "prediction": ["all x.(PhaseChange(x) -> -ChangeMass(x))"]}
{"id": "eqasc_train_5385", "nl": "Melting does not change mass", "fol": "", "prediction": ["all x.(Melting(x) -> -ChangeMass(x))"]}
{"id": "eqasc_train_5386", "nl": "When something melts, it does not change mass", "fol": "", "prediction": ["all x.(Melts(x) -> -ChangeMass(x))"]}
{"id": "eqasc_train_5387", "nl": "Mass does not change during melting", "fol": "", "prediction": ["all x.(Mass(x) -> -ChangesDuringMelting(x))"]}
{"id": "eqasc_train_5388", "nl": "Melting does not change mass.", "fol": "", "prediction": ["all x.(Melting(x) -> -ChangeMass(x))"]}
{"id": "eqasc_train_5389", "nl": "Weight is a product of gravity and mass.", "fol": "", "prediction": ["all x.(Weight(x) -> (ProductOfGravity(x) & ProductOfMass(x)))"]}
{"id": "eqasc_train_5390", "nl": "Phase changes do not change weight", "fol": "", "prediction": ["all x.(PhaseChange(x) -> -ChangeWeight(x))"]}
{"id": "eqasc_train_5391", "nl": "Mass Amount of matter an object contains.", "fol": "", "prediction": ["all x.(MassAmountOfMatter(x) -> Contains(x))"]}
{"id": "eqasc_train_5392", "nl": "phase changes do not change amount of matter", "fol": "", "prediction": ["all x.(PhaseChange(x) -> -ChangesAmountOfMatter(x))"]}
{"id": "eqasc_train_5393", "nl": "Particles have mass, but mass is energy.", "fol": "", "prediction": ["all x.(Particle(x) -> (HasMass(x) & Energy(x)))"]}
{"id": "eqasc_train_5394", "nl": "phase changes do not change  energy", "fol": "", "prediction": ["all x.(PhaseChange(x) -> -ChangesEnergy(x))"]}
{"id": "eqasc_train_5395", "nl": "Phase changes do not change energy contained in the matter.", "fol": "", "prediction": ["all x.(PhaseChange(x) -> -ChangesEnergy(x))"]}
{"id": "eqasc_train_5396", "nl": "Weight and mass mean the same thing.", "fol": "", "prediction": ["all x.(Weight(x) -> Mass(x))"]}
{"id": "eqasc_train_5397", "nl": "Phase changes do not change weight.", "fol": "", "prediction": ["all x.(PhaseChange(x) -> -ChangeWeight(x))"]}
{"id": "eqasc_train_5398", "nl": "Melting, freezing, condensation, and evaporation are examples of phase changes.", "fol": "", "prediction": ["all x.((Melting(x) | Freezing(x) | Condensation(x) | Evaporation(x)) -> PhaseChange(x))"]}
{"id": "eqasc_train_5399", "nl": "Melting matter does not change mass", "fol": "", "prediction": ["all x.(MeltingMatter(x) -> -ChangeMass(x))"]}
{"id": "eqasc_train_5400", "nl": "energy is used for heating a building by a heating system", "fol": "", "prediction": ["all x y z.((Energy(x) & Building(y) & HeatingSystem(z)) -> HeatsBy(x,y,z))"]}
{"id": "eqasc_train_5401", "nl": "Radiators are used to heat the building, The energy source is oil.", "fol": "", "prediction": ["all x y.((Radiators(x) & Building(y)) -> Heats(x,y))"]}
{"id": "eqasc_train_5402", "nl": "Radiators are used to heat a building by a heating system.", "fol": "", "prediction": ["all x y.((Radiators(x) & Building(y)) -> HeatsByHeatingSystem(x,y))"]}
{"id": "eqasc_train_5403", "nl": "oil is used to heat buildings", "fol": "", "prediction": ["all x y.((Oil(x) & Building(y)) -> Heats(x,y))"]}
{"id": "eqasc_train_5404", "nl": "Sometimes, in a cold climate it is necessary to use heat, but use only slow heat.", "fol": "", "prediction": ["exists x.(ColdClimate(x) & ColdClimate(x) & UsesHeat(x) & UsesSlowHeat(x))"]}
{"id": "eqasc_train_5405", "nl": "humans use energy when living in a cold climate", "fol": "", "prediction": ["all x y.((Human(x) & ColdClimate(y)) -> UsesEnergy(x,y))"]}
{"id": "eqasc_train_5406", "nl": "Geothermal energy is used for heating and cooling systems.", "fol": "", "prediction": ["all x.(GeothermalEnergy(x) -> (UsedForHeating(x) & UsedForCooling(x)))"]}
{"id": "eqasc_train_5407", "nl": "Geothermal energy can be used to heat a building.", "fol": "", "prediction": ["all x.(GeothermalEnergy(x) -> HeatsBuilding(x))"]}
{"id": "eqasc_train_5408", "nl": "Heating system is Gas.", "fol": "", "prediction": ["all x.(HeatingSystem(x) -> Gas(x))"]}
{"id": "eqasc_train_5409", "nl": "energy is used for heating a building by gas", "fol": "", "prediction": ["all x y.((Energy(x) & Building(y) & Gas(z)) -> UsedForHeating(x,y,z))"]}
{"id": "eqasc_train_5410", "nl": "Radiators use oil to heat buildings.", "fol": "", "prediction": ["all x y.((Radiator(x) & Oil(y)) -> HeatsBuildings(x,y))"]}
{"id": "eqasc_train_5411", "nl": "Architects build buildings.", "fol": "", "prediction": ["all x y.((Architect(x) & Building(y)) -> Builds(x,y))"]}
{"id": "eqasc_train_5412", "nl": "Architects create structures that use energy for heating.", "fol": "", "prediction": ["all x y.((Architect(x) & Structure(y)) -> Creates(x,y))"]}
{"id": "eqasc_train_5413", "nl": "Faculty offices are also in the building.", "fol": "", "prediction": ["all x.(FacultyOffice(x) -> InBuilding(x))"]}
{"id": "eqasc_train_5414", "nl": "Energy used to heat an office is by a heating system.", "fol": "", "prediction": ["all x y.((Energy(x) & Office(y)) -> Heats(x,y))"]}
{"id": "eqasc_train_5415", "nl": "Passive solar thermal energy involves heating buildings using direct sunlight.", "fol": "", "prediction": ["all x.(PassiveSolarThermalEnergy(x) -> HeatsBuildingsUsingDirectSunlight(x))"]}
{"id": "eqasc_train_5416", "nl": "Direct sunlight can be used to heat a building.", "fol": "", "prediction": ["all x y.((DirectSunlight(x) & Building(y)) -> Heats(x,y))"]}
{"id": "eqasc_train_5417", "nl": "Each system is equipped with a control, a heat producer, a heat exchanger, and a heat distributor.", "fol": "", "prediction": ["all x.(System(x) -> (Control(x) & HeatProducer(x) & HeatExchanger(x) & HeatDistributor(x)))"]}
{"id": "eqasc_train_5418", "nl": "buildings use a combination of production, exchange, and distribution of energy to regulate temperatures", "fol": "", "prediction": ["all x y z.((Building(x) & Production(y) & Exchange(z) & DistributionOfEnergy(x,y,z)) -> RegulatesTemperatures(x))"]}
{"id": "eqasc_train_5419", "nl": "Solar energy is the energy in the sun's rays.", "fol": "", "prediction": ["all x.(SolarEnergy(x) -> EnergyInSunRails(x))"]}
{"id": "eqasc_train_5420", "nl": "the sun's rays can be used for heating a building by a heating system", "fol": "", "prediction": ["all x y.((SunRain(x) & Building(y)) -> HeatsByHeatingSystem(x,y))"]}
{"id": "eqasc_train_5421", "nl": "Energy used for heating is the single most commonly used form of energy worldwide.", "fol": "", "prediction": ["all x.((Energy(x) & UsedForHeating(x)) -> MostCommonlyUsedFormOfEnergy(x))"]}
{"id": "eqasc_train_5422", "nl": "Heating buildings is a very common production of energy worldwide", "fol": "", "prediction": ["all x.(HeatingBuildings(x) -> VeryCommonProductionOfEnergy(x))"]}
{"id": "eqasc_train_5423", "nl": "Heterotrophs are living things that cannot make their own food.", "fol": "", "prediction": ["all x.(Heterotroph(x) -> (LivingThing(x) & -MakesOwnFood(x)))"]}
{"id": "eqasc_train_5424", "nl": "Heterotrophs get organic molecules from other organisms.", "fol": "", "prediction": ["all x y.((Heterotroph(x) & Organism(y)) -> GetsOrganicMolecules(x,y))"]}
{"id": "eqasc_train_5425", "nl": "food contains organic molecules", "fol": "", "prediction": ["all x.(Food(x) -> ContainsOrganicMolecules(x))"]}
{"id": "eqasc_train_5426", "nl": "Living things that can't make their own food need protein.", "fol": "", "prediction": ["all x.((LivingThing(x) & -CanMakeOwnFood(x)) -> NeedsProtein(x))"]}
{"id": "eqasc_train_5427", "nl": "All animals are heterotrophic and obtain their food from plants.", "fol": "", "prediction": ["all x.(Animal(x) -> (Heterotrophic(x) & ObtainsFoodFromPlants(x)))"]}
{"id": "eqasc_train_5428", "nl": "Animals obtain their food from plants and cannot make their own food.", "fol": "", "prediction": ["all x y.((Animal(x) & Plant(y)) -> (ObtainsFoodFrom(x,y) & -MakesOwnFood(x,y)))"]}
{"id": "eqasc_train_5429", "nl": "animals are living things that cannot make their own food", "fol": "", "prediction": ["all x.(Animal(x) -> (LivingThing(x) & -CanMakeOwnFood(x)))"]}
{"id": "eqasc_train_5430", "nl": "Mammals depend on the vegetation for food and shelter.", "fol": "", "prediction": ["all x.(Mammal(x) -> (DependsOnVegetation(x) & Food(x) & Shelter(x)))"]}
{"id": "eqasc_train_5431", "nl": "Mammals are Heterotrophs", "fol": "", "prediction": ["all x.(Mammal(x) -> Heterotroph(x))"]}
{"id": "eqasc_train_5432", "nl": "Fish cannot make their own food.", "fol": "", "prediction": ["all x.(Fish(x) -> -MakesOwnFood(x))"]}
{"id": "eqasc_train_5433", "nl": "fungi are living things that cannot make their own food", "fol": "", "prediction": ["all x.(Fungus(x) -> (LivingThing(x) & -CanMakeOwnFood(x)))"]}
{"id": "eqasc_train_5434", "nl": "animals cannot make their own food", "fol": "", "prediction": ["all x.(Animal(x) -> -MakesOwnFood(x))"]}
{"id": "eqasc_train_5435", "nl": "fish cannot make their own food", "fol": "", "prediction": ["all x.(Fish(x) -> -MakesOwnFood(x))"]}
{"id": "eqasc_train_5436", "nl": "an animal requires energy to move", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresEnergyToMove(x))"]}
{"id": "eqasc_train_5437", "nl": "Animals eat plants to make energy.", "fol": "", "prediction": ["all x y.((Animal(x) & Plant(y)) -> EatsToMakeEnergy(x,y))"]}
{"id": "eqasc_train_5438", "nl": "Animals require eating plants to move.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresEatingPlants(x))"]}
{"id": "eqasc_train_5439", "nl": "All foods provide energy.", "fol": "", "prediction": ["all x.(Food(x) -> ProvidesEnergy(x))"]}
{"id": "eqasc_train_5440", "nl": "animals require food to move", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresFoodToMove(x))"]}
{"id": "eqasc_train_5441", "nl": "All dogs require energy to move.", "fol": "", "prediction": ["all x.(Dog(x) -> RequiresEnergyToMove(x))"]}
{"id": "eqasc_train_5442", "nl": "An animal requires food to move.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresFoodToMove(x))"]}
{"id": "eqasc_train_5443", "nl": "When an animal moves, it burns energy.", "fol": "", "prediction": ["all x.((Animal(x) & Moves(x)) -> BurnsEnergy(x))"]}
{"id": "eqasc_train_5444", "nl": "Burning energy is what allows for movement in animals.", "fol": "", "prediction": ["all x.(BurningEnergy(x) -> AllowsAnimalMovement(x))"]}
{"id": "eqasc_train_5445", "nl": "And as they move or run, their legs barely move.", "fol": "", "prediction": ["all x.((Moves(x) | Runs(x)) -> LegsBreaklyMove(x))"]}
{"id": "eqasc_train_5446", "nl": "an animal requires energy to run", "fol": "", "prediction": ["all x.((Animal(x) & RequiresEnergy(x)) -> Runs(x))"]}
{"id": "eqasc_train_5447", "nl": "Animals get their energy from food.", "fol": "", "prediction": ["all x.(Animal(x) -> GetsEnergyFromFood(x))"]}
{"id": "eqasc_train_5448", "nl": "Animals require food to move", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresFoodToMove(x))"]}
{"id": "eqasc_train_5449", "nl": "nectar is used for attracting pollinators by plants", "fol": "", "prediction": ["all x y.((Nectar(x) & Plant(y)) -> AttractsPollinators(x,y))"]}
{"id": "eqasc_train_5450", "nl": "Bees are the main pollinator.", "fol": "", "prediction": ["all x.(Bee(x) -> Pollinator(x))"]}
{"id": "eqasc_train_5451", "nl": "Plants attract bees with nectar.", "fol": "", "prediction": ["all x y.((Plant(x) & Bee(y)) -> AttractsWithNectar(x,y))"]}
{"id": "eqasc_train_5452", "nl": "The birds enthusiastically sought nectar.", "fol": "", "prediction": ["all x.(Bird(x) -> EnthralledToSeekNectar(x))"]}
{"id": "eqasc_train_5453", "nl": "Birds are pollinators", "fol": "", "prediction": ["all x.(Bird(x) -> Pollinator(x))"]}
{"id": "eqasc_train_5454", "nl": "Nectar is secreted in a shallow nectar cup at the base of flower.", "fol": "", "prediction": ["all x y.((Nectar(x) & ShallowNectarCup(y) & FlowerBase(y)) -> SecretedIn(x,y))"]}
{"id": "eqasc_train_5455", "nl": "Something that is secreted in a shallow cup is used by plants to attract pollinators", "fol": "", "prediction": ["all x y.((SecretedInShallowCup(x) & Plant(y)) -> AttractsPollinators(y))"]}
{"id": "eqasc_train_5456", "nl": "Nectar Nectar is the sugary liquid produced by many flowers.", "fol": "", "prediction": ["Nectar Nectar is the sugary liquid produced by many flowers."]}
{"id": "eqasc_train_5457", "nl": "Flower produce a sugary liquid to attract pollinators.", "fol": "", "prediction": ["all x.(Flower(x) -> (ProducesSugaryLiquid(x) & AttractsPollinators(x)))"]}
{"id": "eqasc_train_5458", "nl": "Pollinators: Bees, and particularly honey bees, are the primary pollinators.", "fol": "", "prediction": ["all x.((Bee(x) & HoneyBee(x)) -> PrimaryPollinators(x))"]}
{"id": "eqasc_train_5459", "nl": "nectar is used to attract bees to plants", "fol": "", "prediction": ["all x y.((Nectar(x) & Bee(y)) -> AttractsToPlants(x,y))"]}
{"id": "eqasc_train_5460", "nl": "Pollinators: Bees are the primary pollinators of fennel.", "fol": "", "prediction": ["all x.(Bee(x) -> PrimaryPollinatorsOfFennel(x))"]}
{"id": "eqasc_train_5461", "nl": "nectar is used for attracting bees by plants", "fol": "", "prediction": ["all x y.((Nectar(x) & Plant(y)) -> AttractsBees(x,y))"]}
{"id": "eqasc_train_5462", "nl": "Nectar helps attract bees to plants.", "fol": "", "prediction": ["all x y.((Nectar(x) & Bee(y)) -> AttractsToPlants(x,y))"]}
{"id": "eqasc_train_5463", "nl": "Bees are important pollinators.", "fol": "", "prediction": ["all x.(Bee(x) -> Pollinator(x))"]}
{"id": "eqasc_train_5464", "nl": "Nectar is used for attracting bees by plants.", "fol": "", "prediction": ["all x y.((Nectar(x) & Plant(y)) -> AttractsBees(x,y))"]}
{"id": "eqasc_train_5465", "nl": "Butterflies pollinate plants as they feed on nectar.", "fol": "", "prediction": ["all x y.((Butterfly(x) & Plant(y) & FeedsOnNectar(x,y)) -> Pollinates(x,y))"]}
{"id": "eqasc_train_5466", "nl": "butterflies pollinate plants", "fol": "", "prediction": ["all x y.((Butterfly(x) & Plant(y)) -> Pollinates(x,y))"]}
{"id": "eqasc_train_5467", "nl": "Insects are the major pollinators.", "fol": "", "prediction": ["all x.(Insect(x) -> Pollinator(x))"]}
{"id": "eqasc_train_5468", "nl": "Nectar attracts insects", "fol": "", "prediction": ["all x y.((Nectar(x) & Insect(y)) -> Attracts(x,y))"]}
{"id": "eqasc_train_5469", "nl": "Birds are flowering plant pollinators.", "fol": "", "prediction": ["all x.(Bird(x) -> FloweringPlantPollinators(x))"]}
{"id": "eqasc_train_5470", "nl": "Nectar is used for attracting birds to flowering plants", "fol": "", "prediction": ["all x y.((Nectar(x) & Bird(y)) -> AttractsToFloweringPlants(x,y))"]}
{"id": "eqasc_train_5471", "nl": "POLLINATION Pollination is essential for fruit production.", "fol": "", "prediction": ["all x.(Pollination(x) -> EssentialForFruitProduction(x))"]}
{"id": "eqasc_train_5472", "nl": "nectar can be essential for fruit production.", "fol": "", "prediction": ["all x.(Nectar(x) -> EssentialForFruitProduction(x))"]}
{"id": "eqasc_train_5473", "nl": "Many plants attract bees with the color of their flowers and nectar.", "fol": "", "prediction": ["all x y.((Plant(x) & Bee(y) & Color(x,y)) -> Attracts(x,y))"]}
{"id": "eqasc_train_5474", "nl": "Plants attract bees with the color of their flowers.", "fol": "", "prediction": ["all x y.((Plant(x) & Bee(y) & ColorOfFlowers(x,y)) -> Attracts(x,y))"]}
{"id": "eqasc_train_5475", "nl": "heat and pressure change the remains of prehistoric living things into natural gas", "fol": "", "prediction": ["all x y.((PrehistoricLivingRemains(x) & HeatAndPressure(x)) -> NaturalGas(y))"]}
{"id": "eqasc_train_5476", "nl": "Prehistoric plants, for example, turn into light oils and gas.", "fol": "", "prediction": ["all x.((PrehistoricPlant(x) & TurnsIntoLightOilsAndGas(x)) -> TurnsInto(x,y))"]}
{"id": "eqasc_train_5477", "nl": "Heat and pressure turns plants into gas", "fol": "", "prediction": ["all x y.((Plant(x) & Heat(y) & Pressure(z)) -> TurnsIntoGas(x,y,z))"]}
{"id": "eqasc_train_5478", "nl": "Dinosaurs and Other Prehistoric Creatures Dinosaurs are just one group of prehistoric animals.", "fol": "", "prediction": ["all x.((Dinosaur(x) & PrehistoricCreature(x)) -> PrehistoricAnimal(x))"]}
{"id": "eqasc_train_5479", "nl": "heat and pressure change the remains of dinosaurs into natural gas", "fol": "", "prediction": ["all x y.((Dinosaur(x) & Heat(y) & Pressure(y)) -> ChangesRemainsIntoNaturalGas(x,y))"]}
{"id": "eqasc_train_5480", "nl": "Natural gas is the cleanest of the fossil fuels.", "fol": "", "prediction": ["all x.(NaturalGas(x) -> CleanestOfFossilFuels(x))"]}
{"id": "eqasc_train_5481", "nl": "Heat and pressure create fossil fuels out of dead prehistoric beings", "fol": "", "prediction": ["all x y.((Heat(x) & Pressure(y)) -> (CreatesFossilFuels(x,y) & OutOfDeadPrehistoricBeings(x)))"]}
{"id": "eqasc_train_5482", "nl": "heat and pressure turn fossils into natural gas", "fol": "", "prediction": ["all x y.((Fossil(x) & Heat(y) & Pressure(y)) -> NaturalGas(x,y))"]}
{"id": "eqasc_train_5483", "nl": "Natural gas is a fossil fuel.", "fol": "", "prediction": ["all x.(NaturalGas(x) -> FossilFuel(x))"]}
{"id": "eqasc_train_5484", "nl": "heat and pressure changes fossils into fossil fuel", "fol": "", "prediction": ["all x y.((Fossil(x) & Heat(y) & Pressure(y)) -> HeatAndPressureChangesIntoFossilFuel(x,y))"]}
{"id": "eqasc_train_5485", "nl": "Evidence of prehistoric life includes many dinosaur footprints found in coal mines.", "fol": "", "prediction": ["all x.(PrehistoricLifeEvidence(x) -> (DinosaurFootprints(x) & FoundInCoalMines(x)))"]}
{"id": "eqasc_train_5486", "nl": "Heat and pressure cause a rock to metamorphize.", "fol": "", "prediction": ["all x y.((Rock(x) & Heat(y) & Pressure(z)) -> Metamorphizes(x,y,z))"]}
{"id": "eqasc_train_5487", "nl": "Rock metamorphizing changes the remains of prehistoric living things into natural gas.", "fol": "", "prediction": ["all x y.((RockMetamorphizing(x) & PrehistoricLivingThing(y)) -> ChangesRemainsIntoNaturalGas(x,y))"]}
{"id": "eqasc_train_5488", "nl": "Most plants grow roots down into the soil to absorb water and minerals.", "fol": "", "prediction": ["all x.(Plant(x) -> (GrowsRoots(x) & AbsorbsWaterAndMinerals(x)))"]}
{"id": "eqasc_train_5489", "nl": "bushes grow roots down into the soil to absorb water and minerals", "fol": "", "prediction": ["all x y z.((Bush(x) & Roots(y) & Soil(z)) -> GrowsIntoToAbsorbWaterAndMinerals(x,y,z))"]}
{"id": "eqasc_train_5490", "nl": "Anchors plants, absorbs water and minerals.", "fol": "", "prediction": ["all x.(Anchor(x) -> (AbsorbsWater(x) & AbsorbsMinerals(x)))"]}
{"id": "eqasc_train_5491", "nl": "Most plants have anchors that go down into the soil to soak up water and minerals.", "fol": "", "prediction": ["all x.(Plant(x) -> (HasAnchors(x) & GoesDownIntoSoil(x) & SoaksUpWaterAndMinerals(x)))"]}
{"id": "eqasc_train_5492", "nl": "Plant roots begin to stabilize the soil against erosion.", "fol": "", "prediction": ["all x y.((PlantRoot(x) & Soil(y)) -> StabilizesAgainstErosion(x,y))"]}
{"id": "eqasc_train_5493", "nl": "The need for plants to absorb minerals and water from the soil also leads to them preventing soil erosion.", "fol": "", "prediction": ["all x y.((Plant(x) & Minerals(y) & Water(y)) -> PreventsSoilErosion(x,y))"]}
{"id": "eqasc_train_5494", "nl": "Minerals Minerals are inorganic elements.", "fol": "", "prediction": ["all x.(Mineral(x) -> InorganicElement(x))"]}
{"id": "eqasc_train_5495", "nl": "most plants grow roots into the soil to absorb inorganic elements.", "fol": "", "prediction": ["all x y.((Plant(x) & Roots(y)) -> GrowsIntoSoilToAbsorbInorganicElements(x,y))"]}
{"id": "eqasc_train_5496", "nl": "Fertilizers supplement the roots with nutrients drawn from the soil.", "fol": "", "prediction": ["all x y.((Fertilizer(x) & Root(y)) -> SupplementsWithNutrientsDrawnFromSoil(x,y))"]}
{"id": "eqasc_train_5497", "nl": "fertilizer supplements nutrients in soil", "fol": "", "prediction": ["all x y.((Fertilizer(x) & Soil(y)) -> SupplementsNutrients(x,y))"]}
{"id": "eqasc_train_5498", "nl": "bamboo grows roots down into the soil to absorb water and minerals.", "fol": "", "prediction": ["all x y.((Bamboo(x) & Roots(y)) -> GrowsIntoSoilToAbsorbWaterAndMinerals(x,y))"]}
{"id": "eqasc_train_5499", "nl": "After the roots develop, the plants are transferred to soil to grow.", "fol": "", "prediction": ["all x y.((Roots(x) & Soil(y)) -> TransferredTo(x,y))"]}
{"id": "eqasc_train_5500", "nl": "After the roots develop, most absorb water and minerals", "fol": "", "prediction": ["all x.((Roots(x) & RootsDevelop(x)) -> AbsorbsWaterAndMinerals(x))"]}
{"id": "eqasc_train_5501", "nl": "If the plant is green, it is a producer.", "fol": "", "prediction": ["all x.(Green(x) -> Producer(x))"]}
{"id": "eqasc_train_5502", "nl": "Most producers grow roots down into the soil to absorb water and minerals.", "fol": "", "prediction": ["all x y.((Producer(x) & Roots(y)) -> GrowsIntoSoilToAbsorbWaterAndMinerals(x,y))"]}
{"id": "eqasc_train_5503", "nl": "Beets and carrots are the roots of plants.", "fol": "", "prediction": ["all x y.((Beet(x) | Carrot(y)) -> RootOfPlant(x,y))"]}
{"id": "eqasc_train_5504", "nl": "Most carrots grow  down into the soil to absorb water and minerals.", "fol": "", "prediction": ["all x.(Carrot(x) -> (GrowsDownIntoSoil(x) & AbsorbsWaterAndMinerals(x)))"]}
{"id": "eqasc_train_5505", "nl": "Grasses are very basic plants with a root, stem and flower.", "fol": "", "prediction": ["all x.(Grass(x) -> (BasicPlant(x) & Root(x) & Stem(x) & Flower(x)))"]}
{"id": "eqasc_train_5506", "nl": "Grass has a root that absorbs water", "fol": "", "prediction": ["all x.(Grass(x) -> (HasRoot(x) & AbsorbsWater(x)))"]}
{"id": "eqasc_train_5507", "nl": "if fossils of an animal or plant are found in a place then that animal or plant used to live in that place", "fol": "", "prediction": ["all x y z.((AnimalOrPlant(x) & Place(y) & FoundIn(x,y)) -> UsedToLiveIn(x,z))"]}
{"id": "eqasc_train_5508", "nl": "Fossils are the remains of ancient plant and animals or the traces of their activities.", "fol": "", "prediction": ["all x.(Fossil(x) -> (RemainsOfAncientPlantAndAnimal(x) | TracesOfActivities(x)))"]}
{"id": "eqasc_train_5509", "nl": "The remains of plants and animals are found where they used to live", "fol": "", "prediction": ["all x y z.((Plant(x) & Animal(y) & Remains(z)) -> (FoundWhereUsedToLive(z) & FoundWhereUsedToLive(z)))"]}
{"id": "eqasc_train_5510", "nl": "Many of the same plants and animals can be found in many other types of habitats.", "fol": "", "prediction": ["all x y.((Plant(x) & Animal(y)) -> FoundInHabitat(x,y))"]}
{"id": "eqasc_train_5511", "nl": "Animal and plant fossils are located in those plant and animals' habitats.", "fol": "", "prediction": ["all x y.((Animal(x) & Plant(y) & Habitat(z)) -> FoundIn(x,y,z))"]}
{"id": "eqasc_train_5512", "nl": "Fossils are the preserved evidence of past life.", "fol": "", "prediction": ["all x.(Fossil(x) -> PreservedEvidenceOfPastLife(x))"]}
{"id": "eqasc_train_5513", "nl": "Evidence of past life shows that a plant or animal once lived in a place.", "fol": "", "prediction": ["all x y.((PastLifeEvidence(x) & PlantOrAnimal(y)) -> LivedInPlace(y,x))"]}
{"id": "eqasc_train_5514", "nl": "Fossils are preserved original remains or preserved evidence of plants and animals.", "fol": "", "prediction": ["all x.(Fossil(x) -> (PreservedOriginalRemains(x) | PreservedEvidence(x)))"]}
{"id": "eqasc_train_5515", "nl": "if preserved remains of an animal  are found in a place then that animal used to live in that place", "fol": "", "prediction": ["all x y z.((PreservedRemains(x) & Animal(y) & Place(z) & FoundIn(y,z)) -> UsedToLiveIn(y,z))"]}
{"id": "eqasc_train_5516", "nl": "Fossils are always bones.", "fol": "", "prediction": ["all x.(Fossil(x) -> Bone(x))"]}
{"id": "eqasc_train_5517", "nl": "if animal bones are found in a place then that animal used to live there", "fol": "", "prediction": ["all x y z.((AnimalBones(x) & Place(y) & FoundIn(x,y)) -> UsedToLiveThere(z))"]}
{"id": "eqasc_train_5518", "nl": "if remains of an animal or plant are found in a place then that animal or plant used to live in that place", "fol": "", "prediction": ["all x y z.((AnimalOrPlant(x) & Place(y) & RemainsFoundIn(x,y) & Place(z)) -> UsedToLiveIn(x,z))"]}
{"id": "eqasc_train_5519", "nl": "Dinosaurs are the most popular fossils.", "fol": "", "prediction": ["all x.(Dinosaur(x) -> PopularFossil(x))"]}
{"id": "eqasc_train_5520", "nl": "Remains of a dinosaur are usually found in the place they used to live.", "fol": "", "prediction": ["all x.(Dinosaur(x) -> (RemainsOf(x,Dinosaur) & UsedToLive(x)))"]}
{"id": "eqasc_train_5521", "nl": "Wetlands are important habitats for animals.", "fol": "", "prediction": ["all x.(Wetland(x) -> ImportantHabitatForAnimals(x))"]}
{"id": "eqasc_train_5522", "nl": "Fossils can be found in wetlands ", "fol": "", "prediction": ["all x.(Fossil(x) -> (FoundInWetland(x) | FoundInWetland(x)))"]}
{"id": "eqasc_train_5523", "nl": "Fossils are the remains or traces of once-living organisms.", "fol": "", "prediction": ["all x.(Fossil(x) -> (RemainsOrTracesOfOnceLivingOrganisms(x)))"]}
{"id": "eqasc_train_5524", "nl": "remains are found where the organism once lived", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y)) -> LivedIn(x,y))"]}
{"id": "eqasc_train_5525", "nl": "Frozen fossil animals are found in permafrost.", "fol": "", "prediction": ["all x.(FrozenFossilAnimal(x) -> FoundInPermafrost(x))"]}
{"id": "eqasc_train_5526", "nl": "If frozen fossils are found in permafrost, that plant used to live in that place", "fol": "", "prediction": ["all x y.((FrozenFossil(x) & Permafrost(y)) -> LivesIn(x,y))"]}
{"id": "eqasc_train_5527", "nl": "hibernation is used for conserving energy by some animals", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> ConservesEnergy(x,y))"]}
{"id": "eqasc_train_5528", "nl": "Energy conservation is an important survival trait.", "fol": "", "prediction": ["all x.(EnergyConservation(x) -> ImportantSurvivalTrait(x))"]}
{"id": "eqasc_train_5529", "nl": "Hibernation is used as an important survival trait by some animals.", "fol": "", "prediction": ["exists x.(Animal(x) & Hibernation(x) & ImportantSurvivalTrait(x))"]}
{"id": "eqasc_train_5530", "nl": "Animals hibernate in the winter.", "fol": "", "prediction": ["all x.(Animal(x) -> HibernatesInWinter(x))"]}
{"id": "eqasc_train_5531", "nl": "animals conserve energy in winter", "fol": "", "prediction": ["all x.((Animal(x) & Winter(x)) -> ConservesEnergy(x))"]}
{"id": "eqasc_train_5532", "nl": "Squirrels are the best animals since cats.", "fol": "", "prediction": ["all x.(Squirrel(x) -> BestAnimal(x))"]}
{"id": "eqasc_train_5533", "nl": "hibernation is used for conserving energy by squirrels", "fol": "", "prediction": ["all x y.((Squirrel(x) & Squirrel(y)) -> ConservesEnergy(x,y))"]}
{"id": "eqasc_train_5534", "nl": "Animals that sleep through the winter are said to hibernate.", "fol": "", "prediction": ["all x.((Animal(x) & SleepsThroughWinter(x)) -> Hibernate(x))"]}
{"id": "eqasc_train_5535", "nl": "Animals sleep through winter to conserve energy", "fol": "", "prediction": ["all x.(Animal(x) -> SleepsThroughWinter(x))"]}
{"id": "eqasc_train_5536", "nl": "Hibernation is a sleep-like state.", "fol": "", "prediction": ["all x.(Hibernation(x) -> SleepLike(x))"]}
{"id": "eqasc_train_5537", "nl": "a sleep-like state is used for conserving energy by some animals", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> SleepLikeState(x,y))"]}
{"id": "eqasc_train_5538", "nl": "When they hibernate, bears enter a deep sleep.", "fol": "", "prediction": ["all x.((Bear(x) & Hibernates(x)) -> EntersDeepSleep(x))"]}
{"id": "eqasc_train_5539", "nl": "Bears enter a deep sleep to conserve energy", "fol": "", "prediction": ["all x.(Bear(x) -> (EntersDeepSleep(x) & ConservesEnergy(x)))"]}
{"id": "eqasc_train_5540", "nl": "Hibernation is used for conserving heat by some animals.", "fol": "", "prediction": ["all x.(Hibernation(x) -> UsedForConservingHeat(x))"]}
{"id": "eqasc_train_5541", "nl": "Bears use the fat as energy over the winter hibernation.", "fol": "", "prediction": ["all x.(Bear(x) -> UsesFatAsEnergy(x))"]}
{"id": "eqasc_train_5542", "nl": "bears hibernate to conserve energy", "fol": "", "prediction": ["all x.(Bear(x) -> (Hibernates(x) & ConservesEnergy(x)))"]}
{"id": "eqasc_train_5543", "nl": "hibernation is an important survival trait", "fol": "", "prediction": ["all x.(Hibernation(x) -> ImportantSurvivalTrait(x))"]}
{"id": "eqasc_train_5544", "nl": "electrical current running through a wire causes that wire to heat up", "fol": "", "prediction": ["all x y.((ElectricalCurrent(x) & Wire(y) & RunningThrough(x,y)) -> CausesWireToHeatUp(x,y))"]}
{"id": "eqasc_train_5545", "nl": "If the wire heats up it can damage the insulation or cause a fire.", "fol": "", "prediction": ["all x.(HeatsUpWire(x) -> (DamageInsulation(x) | CauseFire(x)))"]}
{"id": "eqasc_train_5546", "nl": "Electrical current running through a wire can damage the insulation or cause a fire", "fol": "", "prediction": ["all x y.((ElectricalCurrent(x) & Wire(y) & RunningThrough(x,y)) -> (DamageInsulation(x) | CauseFire(x)))"]}
{"id": "eqasc_train_5547", "nl": "Raw coal can be burned to produce electricity.", "fol": "", "prediction": ["all x.(RawCoal(x) -> CanBeBurnedToProduceElectricity(x))"]}
{"id": "eqasc_train_5548", "nl": "coal can cause a wire to heat up", "fol": "", "prediction": ["all x y.((Coal(x) & Wire(y)) -> HeatsUp(y,x))"]}
{"id": "eqasc_train_5549", "nl": "electrical current running through a wire can damage the insulation or cause a fire", "fol": "", "prediction": ["all x y.((ElectricalCurrent(x) & Wire(y) & RunningThrough(x,y)) -> (DamageInsulation(x) | CauseFire(x)))"]}
{"id": "eqasc_train_5550", "nl": "Copper is used in wires and such.", "fol": "", "prediction": ["all x.(Cuircon(x) -> (UsedInWires(x) & UsedInWires(x)))"]}
{"id": "eqasc_train_5551", "nl": "electrical current running through copper causes it to heat up", "fol": "", "prediction": ["all x y.((ElectricalCurrent(x) & Copper(y) & RunningThrough(x,y)) -> HeatsUp(x))"]}
{"id": "eqasc_train_5552", "nl": "An electrical current is a flow of electrons.", "fol": "", "prediction": ["all x.(ElectricalCurrent(x) -> (FlowOfElectrons(x)))"]}
{"id": "eqasc_train_5553", "nl": "a flow of electrons running through a wire causes that wire to heat up", "fol": "", "prediction": ["all x y z.((FlowOfElectrons(x) & Wire(y) & Wire(z) & RunsThrough(x,y,z)) -> CausesHeatUp(y,z))"]}
{"id": "eqasc_train_5554", "nl": "Then the total current and Joule heating are solved.", "fol": "", "prediction": ["all x.((TotalCurrent(x) & JouleHeating(x)) -> Solved(x))"]}
{"id": "eqasc_train_5555", "nl": "Electrical current running through a wire causes an increase in Joules.", "fol": "", "prediction": ["all x y.((ElectricalCurrent(x) & Wire(y) & RunsThrough(x,y)) -> CausesIncreaseInJules(x))"]}
{"id": "eqasc_train_5556", "nl": "Because of electrical resistance, the passage of electric current through wire produces heat.", "fol": "", "prediction": ["all x.(ElectricalResistance(x) -> ProducesHeat(x))"]}
{"id": "eqasc_train_5557", "nl": "resistance in a circuit causes heat", "fol": "", "prediction": ["all x y.((Resistance(x) & Circuit(y)) -> CausesHeat(x,y))"]}
{"id": "eqasc_train_5558", "nl": "When the wire is moved across the magnetic field, it creates an electric current.", "fol": "", "prediction": ["all x.((Wire(x) & MovedAcrossMagneticField(x)) -> CreatesElectricCurrent(x))"]}
{"id": "eqasc_train_5559", "nl": "Moving a wire across magnetic field will cause it to heat up", "fol": "", "prediction": ["all x y.((Wire(x) & MagneticField(y) & MovingAcross(x,y)) -> HeatsUp(x))"]}
{"id": "eqasc_train_5560", "nl": "High currents allow too much power, or electrical energy to be wasted in wires in the form of heat.", "fol": "", "prediction": ["all x.(HighCurrent(x) -> (AllowsTooMuchPower(x) | AllowsTooMuchElectricalEnergy(x)))"]}
{"id": "eqasc_train_5561", "nl": "High currents waste energy by heating up the wire", "fol": "", "prediction": ["all x y.((HighCurrent(x) & Wire(y)) -> WastesEnergyByHeating(x,y))"]}
{"id": "eqasc_train_5562", "nl": "kinetic energy  running through a wire causes that wire to heat up", "fol": "", "prediction": ["all x y.((KineticEnergy(x) & RunningThroughWire(x,y)) -> CausesWireToHeatUp(x,y))"]}
{"id": "eqasc_train_5563", "nl": "Too much heating of the wire creates a fire hazard.", "fol": "", "prediction": ["all x.((WarmingOfWire(x) & TooMuchHeating(x)) -> FireHazard(x))"]}
{"id": "eqasc_train_5564", "nl": "electrical current running through a wire can cause a fire hazard", "fol": "", "prediction": ["all x y.((ElectricalCurrent(x) & Wire(y) & RunningThrough(x,y)) -> CausesFireHazard(x))"]}
{"id": "eqasc_train_5565", "nl": "building housing developments usually requires replacing animal habitats", "fol": "", "prediction": ["all x y.((BuildingHousingDevelopment(x) & AnimalHabitat(y)) -> RequiresReplacement(x,y))"]}
{"id": "eqasc_train_5566", "nl": "Loss of wetland habitat has endangered numerous plant and animal species.", "fol": "", "prediction": ["all x.(LossOfWetlandHabitat(x) -> EndangeredPlantAndAnimalSpecies(x))"]}
{"id": "eqasc_train_5567", "nl": "Building housing developments usually requires endangering numerous plant and animal species.", "fol": "", "prediction": ["all x.(BuildingHousingDevelopment(x) -> (EndangeringPlantAndAnimalSpecies(x) & OftenRequiresEndangeringAnimalSpecies(x)))"]}
{"id": "eqasc_train_5568", "nl": "Food is an invitation for stray animals and neighborhood pets as well as wildlife.", "fol": "", "prediction": ["all x.(Food(x) -> (InvitationForStormAnimals(x) & InvitationForNeighborhoodPets(x) & InvitationForWildlife(x)))"]}
{"id": "eqasc_train_5569", "nl": "building housing developments usually requires replacing strays and wildlife habitats", "fol": "", "prediction": ["all x y.((BuildingHousingDevelopment(x) & Strays(y) & WildlifeHabitats(y)) -> RequiresReplacement(x,y))"]}
{"id": "eqasc_train_5570", "nl": "Habitat Hairy-nosed wombats are terrestrial and build burrows.", "fol": "", "prediction": ["all x.(Habitat(x) -> (HairyNeckedWombat(x) & Terrestrial(x) & BuildsBurrows(x)))"]}
{"id": "eqasc_train_5571", "nl": "building housing developments usually requires replacing burrows", "fol": "", "prediction": ["all x y.((BuildingHousingDevelopment(x) & Burrow(y)) -> RequiresReplacement(x,y))"]}
{"id": "eqasc_train_5572", "nl": "Habitat destruction is the primary cause of extinction or threat of extinction for all animals.", "fol": "", "prediction": ["all x.(HabitatDestruction(x) -> (PrimaryCauseOfExtinction(x) | PrimaryThreatOfExtinction(x)))"]}
{"id": "eqasc_train_5573", "nl": "building housing developments may cause extinction", "fol": "", "prediction": ["all x.(BuildingHousingDevelopments(x) -> MayCauseExtinction(x))"]}
{"id": "eqasc_train_5574", "nl": "building housing developments usually requires replacing animal burrows", "fol": "", "prediction": ["all x y.((BuildingHousingDevelopment(x) & AnimalBurrow(y)) -> RequiresReplacement(x,y))"]}
{"id": "eqasc_train_5575", "nl": "And as the habitat disappears, so do the animals which depend upon it for survival.", "fol": "", "prediction": ["all x y.((Habitat(x) & Animal(y) & DependsOn(y,x)) -> Disappears(x))"]}
{"id": "eqasc_train_5576", "nl": "building housing developments hurts animal survival", "fol": "", "prediction": ["all x y.((BuildingHousingDevelopments(x) & AnimalSurvival(y)) -> Hurts(x,y))"]}
{"id": "eqasc_train_5577", "nl": "Habitat Martens prime habitat is the coniferous forest.", "fol": "", "prediction": ["all x.(HabitatMartens(x) -> (ConiferousForest(x) & PrimeHabitat(x)))"]}
{"id": "eqasc_train_5578", "nl": "building housing developments can require replacing the forest home of martens", "fol": "", "prediction": ["all x y.((BuildingHousingDevelopment(x) & ForestHome(y)) -> RequiresReplacement(x,y))"]}
{"id": "eqasc_train_5579", "nl": "Developers plan housing tracts and build the houses on paper.", "fol": "", "prediction": ["all x y z.((Developer(x) & HousingTract(y) & House(z)) -> (Plans(x,y) & BuildsOnPaper(x,z)))"]}
{"id": "eqasc_train_5580", "nl": "Developers planning housing tracts usually requires replacing animal habitats", "fol": "", "prediction": ["all x y.((Developer(x) & HousingTract(y)) -> (Plans(x,y) & RequiresReplacingAnimalHabitats(x)))"]}
{"id": "eqasc_train_5581", "nl": "An animal's habitat is where it lives.", "fol": "", "prediction": ["all x.(Animal(x) -> LivesInHabitat(x))"]}
{"id": "eqasc_train_5582", "nl": "buildng housing developments usually requires replacing where an animal lives", "fol": "", "prediction": ["all x y.((BuildingHousingDevelopment(x) & Animal(y)) -> RequiresReplacement(x,y))"]}
{"id": "eqasc_train_5583", "nl": "For salmon, habitat includes freshwater, estuarine and marine habitat.", "fol": "", "prediction": ["all x.(Salmon(x) -> (Habitat(x) & (Freshwater(x) | Estuarine(x) | Marine(x))))"]}
{"id": "eqasc_train_5584", "nl": "A housing development would not be built over a salmon's territory.", "fol": "", "prediction": ["all x y.((HousingDevelopment(x) & Salmon(y)) -> -BuiltOverTerritory(x,y))"]}
{"id": "eqasc_train_5585", "nl": "HIV infects and destroys helper T cells.", "fol": "", "prediction": ["all x.(HIV(x) -> (InfectsHelperT Cells(x) & DisruptsHelperT Cells(x)))"]}
{"id": "eqasc_train_5586", "nl": "T-helper cells are lymphocytes.", "fol": "", "prediction": ["all x.(T-HelperCell(x) -> Lymphocyte(x))"]}
{"id": "eqasc_train_5587", "nl": "HIV infects and destroys lymphocytes", "fol": "", "prediction": ["all x y.((HIV(x) & Lymphocyte(y)) -> (Infects(x,y) & Disrupts(x,y)))"]}
{"id": "eqasc_train_5588", "nl": "If the antibodies to HIV are present, then the individual is said to be HIV positive.", "fol": "", "prediction": ["all x.((AntibodiesToHIV(x) & Present(x)) -> HIVPositive(x))"]}
{"id": "eqasc_train_5589", "nl": "antibodies can infect and destroy helper T cells", "fol": "", "prediction": ["all x y.((Antibodies(x) & HelperTCell(y)) -> (Infects(x,y) & Disrupts(x,y)))"]}
{"id": "eqasc_train_5590", "nl": "Because HIV attacks T cells, it essentially paralyzes the immune system.", "fol": "", "prediction": ["all x.((HIV(x) & AttacksTCells(x)) -> ParalyzesImmuneSystem(x))"]}
{"id": "eqasc_train_5591", "nl": "HIV attacks the immune system", "fol": "", "prediction": ["all x.(HIVAttacksImmuneSystem(x) -> AttacksImmuneSystem(x))"]}
{"id": "eqasc_train_5592", "nl": "T cells- also known as T lymphocyte.", "fol": "", "prediction": ["all x.(T cell(x) -> TLymphocyte(x))"]}
{"id": "eqasc_train_5593", "nl": "T lymphocytes are infected and destroyed by HIV", "fol": "", "prediction": ["all x.(T lymphocyte(x) -> (Infected(x) & DissectedByHIV(x)))"]}
{"id": "eqasc_train_5594", "nl": "Helper T Cells Helper T cells are the brains behind immune response.", "fol": "", "prediction": ["all x.(HelperT Cells(x) -> Brain(x))"]}
{"id": "eqasc_train_5595", "nl": "HIV infects and destroys the brains behind immune response", "fol": "", "prediction": ["all x y.((HIV(x) & Brain(y)) -> (Infects(x,y) & Disrupts(x,y)))"]}
{"id": "eqasc_train_5596", "nl": "HIV infects and destroys part of the immune response.", "fol": "", "prediction": ["all x.(HIV(x) -> (Infects(x) & DisruptsImmuneResponse(x)))"]}
{"id": "eqasc_train_5597", "nl": "HIV, the human immunodeficiency virus, is a retrovirus.", "fol": "", "prediction": ["all x.((HIV(x) & HumanImmunodeficiencyVirus(x)) -> Retrovirus(x))"]}
{"id": "eqasc_train_5598", "nl": "The human immunodeficiency virus infects and detroys helper T cells.", "fol": "", "prediction": ["all x.(HumanImmunodeficiencyVirus(x) -> (InfectsHelperTCells(x) & DetroysHelperTcells(x)))"]}
{"id": "eqasc_train_5599", "nl": "Helper T cells are the critical link in our immune system.", "fol": "", "prediction": ["all x.(HelperTcell(x) -> CriticalLinkInImmuneSystem(x))"]}
{"id": "eqasc_train_5600", "nl": "HIV damages our immune system.", "fol": "", "prediction": ["all x.(HIV(x) -> DamagesImmuneSystem(x))"]}
{"id": "eqasc_train_5601", "nl": "Aids is the end stage of HIV infection.", "fol": "", "prediction": ["all x.(Aids(x) -> EndStageOfHIVInfection(x))"]}
{"id": "eqasc_train_5602", "nl": "AIDS infects and destroys helper T cells", "fol": "", "prediction": ["all x y.((AIDS(x) & HelperTCell(y)) -> InfectsAndDestroys(x,y))"]}
{"id": "eqasc_train_5603", "nl": "Lets Meet the HIV HIV is a new virus.", "fol": "", "prediction": ["LetsMeetTheHIV(x) -> HIV(x))"]}
{"id": "eqasc_train_5604", "nl": "viruses can infect and destroy helper T cells", "fol": "", "prediction": ["all x.(Virus(x) -> (InfectsHelperTCells(x) & DisruptsHelperTCells(x)))"]}
{"id": "eqasc_train_5605", "nl": "Scientists agree that HIV causes Aids.", "fol": "", "prediction": ["all x.(Scientist(x) -> CausesAIDS(x))"]}
{"id": "eqasc_train_5606", "nl": "AIDS infects and destroys helper T cells.", "fol": "", "prediction": ["all x.(AIDS(x) -> (InfectsHelperTCells(x) & DisruptsHelperTcells(x)))"]}
{"id": "eqasc_train_5607", "nl": "the vomiting reflex is used to remove toxic material from the stomach before it is absorbed", "fol": "", "prediction": ["all x y.((VibrationReflex(x) & Stomach(y)) -> RemovesToxicMaterial(x,y))"]}
{"id": "eqasc_train_5608", "nl": "Finally, lead is toxic.", "fol": "", "prediction": ["all x.(Lead(x) -> Toxic(x))"]}
{"id": "eqasc_train_5609", "nl": "vomiting reflex is used to remove lead from the stomach", "fol": "", "prediction": ["all x.(VibrationReflex(x) -> RemovesLeadFromStomach(x))"]}
{"id": "eqasc_train_5610", "nl": "If vomiting occurs, turn the victim's head so that the vomitus is expelled.", "fol": "", "prediction": ["all x.((Vomiting(x) & TurnsHead(x)) -> ExpelledVitus(x))"]}
{"id": "eqasc_train_5611", "nl": "Vomitus is expelled to remove toxic materials from the stomach before it is absorbed.", "fol": "", "prediction": ["all x.(Vitus(x) -> (ExpelledToRemoveToxicMaterials(x) & Absorbed(x)))"]}
{"id": "eqasc_train_5612", "nl": "Vomiting is a reflex controlled by a vomiting center in the brain.", "fol": "", "prediction": ["all x.(Vibration(x) -> (ControlledByVibrationCenter(x) & InBrain(x)))"]}
{"id": "eqasc_train_5613", "nl": "the throwing up center of the brain is used to remove toxic material from the stomach before it is absorbed", "fol": "", "prediction": ["all x y.((TowingUpCenterOfBrain(x) & ToxicMaterial(y)) -> RemovesFromStomach(x,y))"]}
{"id": "eqasc_train_5614", "nl": "An overdose can cause vomiting.", "fol": "", "prediction": ["all x.(Overdose(x) -> CausesVitamining(x))"]}
{"id": "eqasc_train_5615", "nl": "An overdose must be removed from the stomach before it is absorbed.", "fol": "", "prediction": ["all x.(Overdose(x) -> MustBeRemovedFromStomach(x))"]}
{"id": "eqasc_train_5616", "nl": "Rabbits lack the vomiting reflex, and are physically almost incapable of regurgitation.", "fol": "", "prediction": ["all x.(Rabbit(x) -> (LacksVibrationReflex(x) & PhysicallyIncapableOfRegurgitation(x)))"]}
{"id": "eqasc_train_5617", "nl": "Rabbits are incapable of regurgitation, so cannot remove toxic material from their stomachs before it is absorbed.", "fol": "", "prediction": ["all x.(Rabbit(x) -> (IncapableOfRegurgitation(x) & -RemovesToxicMaterial(x) & AbsorbsToxicMaterial(x)))"]}
{"id": "eqasc_train_5618", "nl": "Nicotine excites the vomiting reflex both in the brain and in the nerves of the stomach.", "fol": "", "prediction": ["all x.(Nicotine(x) -> ExcitesVibrationReflex(x))"]}
{"id": "eqasc_train_5619", "nl": "Nicotine causes a vomiting reflex to remove toxic material from the body", "fol": "", "prediction": ["all x y.((Nicotine(x) & VomitingReflex(y)) -> RemovesToxicMaterial(x,y))"]}
{"id": "eqasc_train_5620", "nl": "sonar is used to find the location of an object", "fol": "", "prediction": ["all x y.((Sonar(x) & Object(y)) -> FindsLocation(x,y))"]}
{"id": "eqasc_train_5621", "nl": "Periscopes are still useful, despite the sonar and electronic sensors of modern submarines.", "fol": "", "prediction": ["all x.(Periscope(x) -> (Useful(x) & DespiteSonar(x) & Useful(x) & ElectronicSensors(x) & ModernSubmarine(x)))"]}
{"id": "eqasc_train_5622", "nl": "Periscopes are used to find the location of objects", "fol": "", "prediction": ["all x.(Periscope(x) -> (FindsLocationOfObjects(x) & LocatesObjects(x)))"]}
{"id": "eqasc_train_5623", "nl": "Sonar bounces sound waves off the bottom of the ocean.", "fol": "", "prediction": ["all x y.((Sonar(x) & Ocean(y)) -> BouncesSoundWavesOffBottom(x,y))"]}
{"id": "eqasc_train_5624", "nl": "Bouncing sound waves off the bottom of the ocean is used to find the location of an object. ", "fol": "", "prediction": ["all x y.((BooncingSoundWaves(x) & Ocean(y)) -> LocatesObject(x,y))"]}
{"id": "eqasc_train_5625", "nl": "Echolocation is similar to sonar.", "fol": "", "prediction": ["all x.(Echolocation(x) -> SimilarToSonar(x))"]}
{"id": "eqasc_train_5626", "nl": "Echolocation can be used to find the location of an object.", "fol": "", "prediction": ["all x y.((Echolocation(x) & Object(y)) -> FindsLocation(x,y))"]}
{"id": "eqasc_train_5627", "nl": "Surface ships use sonar to locate and track submarines.", "fol": "", "prediction": ["all x.(SurfaceShip(x) -> UsesSonarToLocateAndTrackSubmarines(x))"]}
{"id": "eqasc_train_5628", "nl": "Ships use sonar to find submarines", "fol": "", "prediction": ["all x y.((Ship(x) & Sonar(y)) -> UsesToFindSubmarines(x,y))"]}
{"id": "eqasc_train_5629", "nl": "Bats use echolocation which is like sonar.", "fol": "", "prediction": ["all x.(Bat(x) -> (UsesEcholocation(x) & LikeSonar(x)))"]}
{"id": "eqasc_train_5630", "nl": "echolocation is used by bats to find the location of an object", "fol": "", "prediction": ["all x y.((Echolocation(x) & Bat(y)) -> (UsedBy(x,y) & FindsLocationOfObject(x,y)))"]}
{"id": "eqasc_train_5631", "nl": "Submarines use sonar to find objects under the water, including other submarines.", "fol": "", "prediction": ["all x y z.((Submarine(x) & Sonar(y) & Submarine(z)) -> (Uses(x,y) & FindsObjects(x,z)))"]}
{"id": "eqasc_train_5632", "nl": "Sonar is used to find other submarines", "fol": "", "prediction": ["all x.(Sonar(x) -> (FindsSubmarines(x) & UsedToFindSubmarines(x)))"]}
{"id": "eqasc_train_5633", "nl": "Objects can be located by soundwaves bounced off the bottom of the ocean", "fol": "", "prediction": ["all x y.((Object(x) & Soundwave(y) & BouncedOffBottomOfOcean(x,y)) -> CanBeLocatedBy(x,y))"]}
{"id": "eqasc_train_5634", "nl": "Position is just a word for where something is located.", "fol": "", "prediction": ["all x.(Position(x) -> exists y.(Location(y) & LocatedIn(x,y)))"]}
{"id": "eqasc_train_5635", "nl": "Sonar is used to find the position of an object.", "fol": "", "prediction": ["all x y.((Sonar(x) & Object(y)) -> FindsPosition(x,y))"]}
{"id": "eqasc_train_5636", "nl": "Bouncing sound waves off the bottom of the ocean is used to find locations of objects", "fol": "", "prediction": ["all x y.((BooncingSoundWavesOffBottomOcean(x) & Ocean(y)) -> FindsLocationsOfObjects(x,y))"]}
{"id": "eqasc_train_5637", "nl": "Dolphins have an astonishing sonar capability.", "fol": "", "prediction": ["all x.(Dolphin(x) -> AmazingSonarCapabilities(x))"]}
{"id": "eqasc_train_5638", "nl": "Dolphins can find the location of an object.", "fol": "", "prediction": ["all x y.((Dolphin(x) & Object(y)) -> CanFindLocation(x,y))"]}
{"id": "eqasc_train_5639", "nl": "Sonar devices use sound waves to find things.", "fol": "", "prediction": ["all x.(SonarDevice(x) -> UsesSoundWavesToFindThings(x))"]}
{"id": "eqasc_train_5640", "nl": "sound waves are used to find the location of an object", "fol": "", "prediction": ["all x y.((SoundWaves(x) & Object(y)) -> Locates(x,y))"]}
{"id": "eqasc_train_5641", "nl": "Active Sonar Active sonars transmit acoustic energy and detect targets by echolocation.", "fol": "", "prediction": ["all x.(ActiveSonar(x) -> (TransmitsAcousticEnergy(x) & DetectsTargetsByEcholocation(x)))"]}
{"id": "eqasc_train_5642", "nl": "echolocation is used to find objects underwater", "fol": "", "prediction": ["all x y.((Echolocation(x) & Object(y)) -> UsedToFind(x,y))"]}
{"id": "eqasc_train_5643", "nl": "DNA contains genetic instructions for proteins, and RNA helps assemble the proteins.", "fol": "", "prediction": ["all x y.((DNA(x) & RNA(y)) -> (ContainsGeneticInstructions(x) & HelpsAssembleProteins(y)))"]}
{"id": "eqasc_train_5644", "nl": "DNA acts as the store of genetic information.", "fol": "", "prediction": ["all x.(DNA(x) -> StoreOfGeneticInformation(x))"]}
{"id": "eqasc_train_5645", "nl": "DNA stores information", "fol": "", "prediction": ["all x.(DNAStoresInformation(x) -> StoresInformation(x))"]}
{"id": "eqasc_train_5646", "nl": "deoxyribonucleic acid contains genetic instructions", "fol": "", "prediction": ["all x.(DeoxyribonucleicAcid(x) -> ContainsGeneticInstructions(x))"]}
{"id": "eqasc_train_5647", "nl": "RNA molecules deliver the DNA messages to the protein-manufacturing assembly line of the cells.", "fol": "", "prediction": ["all x y.((RNAMolecule(x) & DNAMessage(y)) -> DeliversToProteinManufacturingAssemblyLine(x,y))"]}
{"id": "eqasc_train_5648", "nl": "DNA messages to proteins are manufactured by RNA", "fol": "", "prediction": ["all x y.((DNAMessage(x) & Protein(y)) -> ManufacturedByRNA(x,y))"]}
{"id": "eqasc_train_5649", "nl": "Azathioprine interferes with DNA and RNA synthesis.", "fol": "", "prediction": ["all x.(Azathioprine(x) -> InterferesWithDNAAndRNASynthesis(x))"]}
{"id": "eqasc_train_5650", "nl": "Azathioprine interferes with protein assembly.  ", "fol": "", "prediction": ["all x.(Azathioprine(x) -> InterferesWithProteinAssembly(x))"]}
{"id": "eqasc_train_5651", "nl": "DNA and RNA RNA and DNA are polymers of nucleotides.", "fol": "", "prediction": ["all x.((DNA(x) | RNA(x)) -> (PolymerOfNucleotides(x)))"]}
{"id": "eqasc_train_5652", "nl": "polymers of nucleotides help assemble the proteins", "fol": "", "prediction": ["all x y.((Polymer(x) & Nucleotide(y)) -> HelpsAssembleProteins(x,y))"]}
{"id": "eqasc_train_5653", "nl": "Genetic memory is inherited.", "fol": "", "prediction": ["all x.(GeneticMemory(x) -> Erased(x))"]}
{"id": "eqasc_train_5654", "nl": "DNA contains inherited instructions for proteins.", "fol": "", "prediction": ["all x.(DNA(x) -> ContainsEarnedInstructions(x))"]}
{"id": "eqasc_train_5655", "nl": "RNA polymerase joins the RNA nucleotides together.", "fol": "", "prediction": ["all x y.((RNAPolymerase(x) & RNANucleotide(y)) -> Joins(x,y))"]}
{"id": "eqasc_train_5656", "nl": "DNA contains genetic instructions for proteins where polymerase joins the nucleotides together. ", "fol": "", "prediction": ["all x y.((DNA(x) & Protein(y) & Polymerase(x)) -> ContainsGeneticInstructions(x,y))"]}
{"id": "eqasc_train_5657", "nl": "DNA makes RNA and RNA makes protein.", "fol": "", "prediction": ["(all x.(DNA(x) -> MakesRNA(x)) & all y.(RNA(y) -> MakesProtein(y)))"]}
{"id": "eqasc_train_5658", "nl": "DNA makes RNA, which helps in assembling", "fol": "", "prediction": ["all x y z.((DNA(x) & RNA(y) & Assembly(z)) -> Makes(x,y))"]}
{"id": "eqasc_train_5659", "nl": "Cells are RNA machines with proteins.", "fol": "", "prediction": ["all x.(Cell(x) -> (RNAMachine(x) & HasProteins(x)))"]}
{"id": "eqasc_train_5660", "nl": "cells have proteins", "fol": "", "prediction": ["all x.(Cell(x) -> HasProteins(x))"]}
{"id": "eqasc_train_5661", "nl": "DNA is the genetic material responsible for heredity.", "fol": "", "prediction": ["all x.(DNA(x) -> GeneticMaterialResponsibleForHerdity(x))"]}
{"id": "eqasc_train_5662", "nl": "The genetic material responsible for heredity contains instructions for proteins", "fol": "", "prediction": ["all x y.((GeneticMaterial(x) & Heredity(y)) -> ContainsInstructionsForProteins(x,y))"]}
{"id": "eqasc_train_5663", "nl": "RNA RNA, or ribonucleic acid, is a constituent of all living cells and many viruses.", "fol": "", "prediction": ["all x.(Rain(x) -> (RibonucleicAcid(x) & ConstituentOfLivingCells(x) & ConstituentOfManyViruses(x)))"]}
{"id": "eqasc_train_5664", "nl": "ribonucleic acid helps assemble proteins", "fol": "", "prediction": ["all x.(RibonucleicAcidHelpsAssembleProteins(x) -> HelpsAssembleProteins(x))"]}
{"id": "eqasc_train_5665", "nl": "Proteins, including enzymes are required for life.", "fol": "", "prediction": ["all x.((Protein(x) & Enzyme(x)) -> RequiresForLife(x))"]}
{"id": "eqasc_train_5666", "nl": "dna is required for life", "fol": "", "prediction": ["all x.(Dna(x) -> RequiresForLife(x))"]}
{"id": "eqasc_train_5667", "nl": "deoxyribonucleic acid contains instructions for proteins and RNA helps assemble the proteins.", "fol": "", "prediction": ["all x y.((DeoxyribonucleicAcid(x) & Protein(y)) -> (ContainsInstructions(x,y) & HelpsAssemble(x,y)))"]}
{"id": "eqasc_train_5668", "nl": "RNA hybrids are then detected by a luminometer.", "fol": "", "prediction": ["all x.((RNAHybrid(x) & DetectedByLumenometer(x)) -> DetectedBy(x,y))"]}
{"id": "eqasc_train_5669", "nl": "A luminometer detects hybrids of the substance that helps assemble proteins.", "fol": "", "prediction": ["all x.(Lumenometer(x) -> (DetectsHybrids(x) & HelpsAssembleProteins(x)))"]}
{"id": "eqasc_train_5670", "nl": "DNA is the genetic material of cells.", "fol": "", "prediction": ["all x.(DNA(x) -> GeneticMaterialOfCells(x))"]}
{"id": "eqasc_train_5671", "nl": "cells contain genetic instructions", "fol": "", "prediction": ["all x.(Cell(x) -> ContainsGeneticInstructions(x))"]}
{"id": "eqasc_train_5672", "nl": "RNA's role in assembling a diverse collection of proteins is a product of evolution.", "fol": "", "prediction": ["all x.((RNA(x) & AssemblesDiverseProteins(x)) -> Evolutionary(x))"]}
{"id": "eqasc_train_5673", "nl": "DNA contains genetic instructions for proteins, which is a product of evolution", "fol": "", "prediction": ["all x y z.((DNA(x) & Protein(y) & GeneticInstruction(z)) -> (Contains(x,y) & ProductOfEvolution(x)))"]}
{"id": "eqasc_train_5674", "nl": "Albumin is a type of protein found in body tissues and fluids.", "fol": "", "prediction": ["all x.(Altein(x) -> (Protein(x) & FoundInBodyTissuesAndFluids(x)))"]}
{"id": "eqasc_train_5675", "nl": "DNA and RNA work together to create albumin", "fol": "", "prediction": ["all x y z.((DNA(x) & RNA(y) & Albumin(z)) -> WorksToCreate(x,y,z))"]}
{"id": "eqasc_train_5676", "nl": "the number of rings in a tree trunk can be used to estimate the age of the tree", "fol": "", "prediction": ["all x y.((Rings(x) & TreeTrunk(y)) -> EstimatesAge(x,y))"]}
{"id": "eqasc_train_5677", "nl": "Dendrochronologist: A person who studies tree ring growth.", "fol": "", "prediction": ["all x.(Dendrochronologist(x) -> StudiesTreeRingGrowth(x))"]}
{"id": "eqasc_train_5678", "nl": "Estimating the age of trees is done by Dendrochronologists.", "fol": "", "prediction": ["all x y.((Dendrochronologist(x) & Tree(y)) -> EstimatesAge(x,y))"]}
{"id": "eqasc_train_5679", "nl": "Tree rings record the seasons.", "fol": "", "prediction": ["all x.(TreeRing(x) -> RecordSeasons(x))"]}
{"id": "eqasc_train_5680", "nl": "Seasons are seen in tree trunks", "fol": "", "prediction": ["all x y.((Season(x) & TreeTrunk(y)) -> SeenIn(x,y))"]}
{"id": "eqasc_train_5681", "nl": "Tree rings are examined to learn the forest age and growth rate.", "fol": "", "prediction": ["all x.(TreeRing(x) -> (ExaminedToLearnForestAge(x) & LearnForestGrowthRate(x)))"]}
{"id": "eqasc_train_5682", "nl": "the rings in a tree determined the growth rate of the forest", "fol": "", "prediction": ["all x y z.((Rings(x) & Tree(y) & Forest(z)) -> DeterminedGrowthRate(x,y,z))"]}
{"id": "eqasc_train_5683", "nl": "Age of Pine trees (AGE) in years.", "fol": "", "prediction": ["(AgeOfPineTrees(AGE) & Years(AGE))"]}
{"id": "eqasc_train_5684", "nl": "the number of rings in a tree trunk can be used to estimate how many years old it is", "fol": "", "prediction": ["all x y.((Rings(x) & TreeTrunk(y)) -> EstimatesYearsOld(x,y))"]}
{"id": "eqasc_train_5685", "nl": "Tree-ring dating the 1700 Cascadia earthquake.", "fol": "", "prediction": ["all x.(TreeRing(x) -> DatesCascadiaEarthquake(x,1700))"]}
{"id": "eqasc_train_5686", "nl": "estimating the age of trees can be used in reviewing earthquake history", "fol": "", "prediction": ["all x y.((EstimatingAgeOfTrees(x) & EarthquakeHistory(y)) -> UsedInReviewing(x,y))"]}
{"id": "eqasc_train_5687", "nl": "Age of young trees is estimated from both trunk circumference and tree height.", "fol": "", "prediction": ["all x.((Tree(x) & TrunkCircumference(x) & TreeHeight(x)) -> AgeEstimatedFrom(x,y))"]}
{"id": "eqasc_train_5688", "nl": "Trunk circumference and height in young trees corresponds with the number of rings in the trunk.", "fol": "", "prediction": ["all x.((Tree(x) & YoungTree(x)) -> (ConcordsCircumference(x) & CorrespondsToRings(x)))"]}
{"id": "eqasc_train_5689", "nl": "growth rate can be estimated with tree rings", "fol": "", "prediction": ["all x.((TreeRing(x) & EstimatesGrowthRate(x)) -> TreeRings(x))"]}
{"id": "eqasc_train_5690", "nl": "Tree age, scion, nutrition and other factors that affect the overall health of the tree could affect rootstock resistance or susceptibility to Phytophthora.", "fol": "", "prediction": ["all x.((TreeAge(x) & Scion(x) & Nutrition(x) & AffectsOverallHealth(x)) -> (AffectsRootstockResistance(x) | AffectsSusceptibilityToPhytophthora(x)))"]}
{"id": "eqasc_train_5691", "nl": "The number of rings along with scion, nutrition and other factors affect the overall health of a tree.", "fol": "", "prediction": ["all x y z.((Ring(x) & Scion(y) & Nutrition(z)) -> AffectsOverallHealthOfTree(x,y,z))"]}
{"id": "eqasc_train_5692", "nl": "a thermal insulator slows the transfer of heat", "fol": "", "prediction": ["all x y.((ThermalInsulator(x) & ThermalInsulator(y)) -> SlowsTransferOfHeat(x,y))"]}
{"id": "eqasc_train_5693", "nl": "a thermal insulator slows the transfer of energy.", "fol": "", "prediction": ["all x.(ThermalInsulator(x) -> SlowsTransferOfEnergy(x))"]}
{"id": "eqasc_train_5694", "nl": "Convection is the transfer of heat in fluids.", "fol": "", "prediction": ["all x.(Convection(x) -> TransfersHeatInFluids(x))"]}
{"id": "eqasc_train_5695", "nl": "A thermal insulator slows the convection in fluids.", "fol": "", "prediction": ["all x.(ThermalInsulator(x) -> SlowsConvectionInFluids(x))"]}
{"id": "eqasc_train_5696", "nl": "Ice is a good thermal insulator.", "fol": "", "prediction": ["all x.(Ice(x) -> GoodThermalInsulator(x))"]}
{"id": "eqasc_train_5697", "nl": "Ice slows the transfer of heat", "fol": "", "prediction": ["all x y.((Ice(x) & HeatTransfer(y)) -> Slows(x,y))"]}
{"id": "eqasc_train_5698", "nl": "Insulation helps to block conduction of heat.", "fol": "", "prediction": ["all x.(Insulation(x) -> BlocksConductionOfHeat(x))"]}
{"id": "eqasc_train_5699", "nl": "insulation prevents conduction", "fol": "", "prediction": ["all x.(Insulation(x) -> PreventsConduction(x))"]}
{"id": "eqasc_train_5700", "nl": "Heat transfer fluids, such as antifreeze, protect the solar collector from freezing in cold weather.", "fol": "", "prediction": ["all x y.((HeatTransferFluid(x) & SolarCollector(y)) -> ProtectsFromFreezingInColdWeather(x,y))"]}
{"id": "eqasc_train_5701", "nl": "Thermal insulators protect things from freezing in cold weather.", "fol": "", "prediction": ["all x.(ThermalInsulator(x) -> ProtectsFromFreezing(x))"]}
{"id": "eqasc_train_5702", "nl": "ice slows the transfer of heat", "fol": "", "prediction": ["all x y.((Ice(x) & HeatTransfer(y)) -> SlowsTransfer(x,y))"]}
{"id": "eqasc_train_5703", "nl": "ice slows transfer of heat", "fol": "", "prediction": ["all x y.((Ice(x) & HeatTransfer(y)) -> SlowsTransfer(x,y))"]}
{"id": "eqasc_train_5704", "nl": "Materials like glass and wood are electrical insulators and thermal insulators.", "fol": "", "prediction": ["all x.((Material(x) & (Glass(x) | Wood(x))) -> (ElectricalInsulator(x) | ThermalInsulator(x)))"]}
{"id": "eqasc_train_5705", "nl": "glass slows the transfer of heat", "fol": "", "prediction": ["all x.(Glass(x) -> SlowsTransferOfHeat(x))"]}
{"id": "eqasc_train_5706", "nl": "fanning a fire increases the oxygen near the fire", "fol": "", "prediction": ["all x y z.((Fanning(x) & Fire(y) & Oxygen(z)) -> IncreasesNear(x,y,z))"]}
{"id": "eqasc_train_5707", "nl": "Then nothing was heard but the bellows which fanned the fire of the furnace.", "fol": "", "prediction": ["all x y.((Bellows(x) & Furnace(y)) -> FannedFire(x,y))"]}
{"id": "eqasc_train_5708", "nl": "Using bellows can increase the oxygen near a fire.", "fol": "", "prediction": ["all x y.((Bellows(x) & Fire(y)) -> IncreasesOxygenNear(x,y))"]}
{"id": "eqasc_train_5709", "nl": "Fire needs oxygen in the air to keep burning.", "fol": "", "prediction": ["all x.(Fire(x) -> NeedsOxygenInAir(x))"]}
{"id": "eqasc_train_5710", "nl": "Fanning a fire keeps it burning.", "fol": "", "prediction": ["all x y.((Fire(x) & Fire(y)) -> KeepsFireBurning(x,y))"]}
{"id": "eqasc_train_5711", "nl": "Fire needs oxygen to continue burning.", "fol": "", "prediction": ["all x.(Fire(x) -> NeedsOxygen(x))"]}
{"id": "eqasc_train_5712", "nl": "Fanning a fire helps it to continue burning.", "fol": "", "prediction": ["all x y.((Fire(x) & Fire(y)) -> FanningHelpsContinueBurning(x,y))"]}
{"id": "eqasc_train_5713", "nl": "Fanning a fire allows it to continue burning", "fol": "", "prediction": ["all x y.((Fire(x) & Fire(y)) -> Fanning(x,y))"]}
{"id": "eqasc_train_5714", "nl": "Fans blow directly above the oche.", "fol": "", "prediction": ["all x.(Fan(x) -> BlowsAboveOche(x))"]}
{"id": "eqasc_train_5715", "nl": "Blowing on a fire increases the oxygen near the fire.", "fol": "", "prediction": ["all x y.((BlowingOn(x,y) & Fire(y)) -> IncreasesOxygenNear(x,y))"]}
{"id": "eqasc_train_5716", "nl": "Oxygen can be in short supply as the fire consumes it also.", "fol": "", "prediction": ["all x.(Oxygen(x) -> (ShortSupply(x) & FireConsumesOxygen(x)))"]}
{"id": "eqasc_train_5717", "nl": "Fanning a flame helps it consume air", "fol": "", "prediction": ["all x y z.((Fanning(x) & Flame(y) & Air(z)) -> HelpsConsume(x,y,z))"]}
{"id": "eqasc_train_5718", "nl": "fanning a fire keeps the fire burning", "fol": "", "prediction": ["all x y.((Fire(x) & Fire(y) & Fanning(x,y)) -> KeepsFireBurning(x,y))"]}
{"id": "eqasc_train_5719", "nl": "Fire is a combustion reaction.", "fol": "", "prediction": ["all x.(Fire(x) -> CombustionReaction(x))"]}
{"id": "eqasc_train_5720", "nl": "fanning a combustion reaction increases the oxygen near it", "fol": "", "prediction": ["all x y z.((Fanning(x) & CombustionReaction(y) & Oxygen(z)) -> IncreasesNear(x,y,z))"]}
{"id": "eqasc_train_5721", "nl": "On the other hand, air is the element that fans the flames of fire.", "fol": "", "prediction": ["all x.(Air(x) -> FansFire(x))"]}
{"id": "eqasc_train_5722", "nl": "Air is the element that increases the oxygen near the fire", "fol": "", "prediction": ["all x.(Air(x) -> IncreasesOxygenNearFire(x))"]}
{"id": "eqasc_train_5723", "nl": "Fanning a fire helps it continue to burn.", "fol": "", "prediction": ["all x y.((Fire(x) & Fire(y)) -> FanningHelpsContinueBurn(x,y))"]}
{"id": "eqasc_train_5724", "nl": "Strong winds increase the concentration of oxygen available to the fire.", "fol": "", "prediction": ["all x y.((StrongWind(x) & Fire(y)) -> IncreasesConcentrationOfOxygen(x,y))"]}
{"id": "eqasc_train_5725", "nl": "avoid winds to keep oxygen from the fire", "fol": "", "prediction": ["all x y.((Fire(x) & Wind(y)) -> (Avoids(x,y) & KeepsOxygenFromFire(x)))"]}
{"id": "eqasc_train_5726", "nl": "Air is used as a source of oxygen.", "fol": "", "prediction": ["all x.(Air(x) -> SourceOfOxygen(x))"]}
{"id": "eqasc_train_5727", "nl": "fanning a fire increases the air near the fire", "fol": "", "prediction": ["all x y z.((Fanning(x) & Fire(y) & AirNear(z)) -> IncreasesAirNear(x,y,z))"]}
{"id": "eqasc_train_5728", "nl": "Fire needs fuel and oxygen.", "fol": "", "prediction": ["all x.(Fire(x) -> (NeedsFuel(x) & NeedsOxygen(x)))"]}
{"id": "eqasc_train_5729", "nl": "Fanning a fire increases its fuel", "fol": "", "prediction": ["all x y.((Fire(x) & Fanning(x,y)) -> IncreasesFuel(y))"]}
{"id": "eqasc_train_5730", "nl": "Pressure receptors are found mainly in the skin.", "fol": "", "prediction": ["all x.(PressureReceptor(x) -> FoundInSkin(x))"]}
{"id": "eqasc_train_5731", "nl": "Animals have skin.", "fol": "", "prediction": ["all x.(Animal(x) -> HasSkin(x))"]}
{"id": "eqasc_train_5732", "nl": "animals have pressure receptors", "fol": "", "prediction": ["all x.(Animal(x) -> HasPressureReceptors(x))"]}
{"id": "eqasc_train_5733", "nl": "pressure receptors are found mainly in the epidermis and dermis", "fol": "", "prediction": ["all x.(PressureReceptor(x) -> (FoundInEpidermis(x) | FoundInDemis(x)))"]}
{"id": "eqasc_train_5734", "nl": "All pain receptors are free nerve endings.", "fol": "", "prediction": ["all x.(PainReceptor(x) -> FreeNervousEnding(x))"]}
{"id": "eqasc_train_5735", "nl": "free nerve endings are found in the skin", "fol": "", "prediction": ["all x y.((NervousEnding(x) & Skin(y)) -> FoundIn(x,y))"]}
{"id": "eqasc_train_5736", "nl": "Some receptors are free nerve endings.", "fol": "", "prediction": ["exists x.(Receptor(x) & FreeNervousEnding(x))"]}
{"id": "eqasc_train_5737", "nl": "free nerve endings can be found in the skin", "fol": "", "prediction": ["all x y.((NervousEnding(x) & Skin(y)) -> Free(x,y))"]}
{"id": "eqasc_train_5738", "nl": "Temperature sensors in vertebrates are located in the skin and in the hypothalamus.", "fol": "", "prediction": ["all x.(Vertebrate(x) -> (TemperatureSensor(x) & LocatedInSkin(x) & LocatedInHypothalamus(x)))"]}
{"id": "eqasc_train_5739", "nl": "Temperature and pressure sensors are located in the same organ in most animals.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> (TemperatureSensor(x,y) & PressureSensor(x,y)))"]}
{"id": "eqasc_train_5740", "nl": "Different receptors for heat and cold are probably present in the skin.", "fol": "", "prediction": ["all x.((Receptor(x) & Skin(x)) -> (HeatReceptor(x) | ColdReceptor(x)))"]}
{"id": "eqasc_train_5741", "nl": "pressure,heat and,cold points on skin", "fol": "", "prediction": ["all x y z.((Skin(x) & Skin(y) & Skin(z)) -> (Pressure(x) & Heat(x) & ColdPoints(x)))"]}
{"id": "eqasc_train_5742", "nl": "Sensory Receptors A receptor is any structure specialized to detect a stimulus.", "fol": "", "prediction": ["all x.(SensoryReceptor(x) -> (StructureSpecializedToDetectStimulus(x)))"]}
{"id": "eqasc_train_5743", "nl": "Something specialized to detect a stimulus is found mainly in the skin.", "fol": "", "prediction": ["all x.(SpecializedToDetectStimulus(x) -> FoundPrimarilyInSkin(x))"]}
{"id": "eqasc_train_5744", "nl": "Pacinian corpuscles are pressure receptors.", "fol": "", "prediction": ["all x.(PacinnianCorpuscle(x) -> PressureReceptor(x))"]}
{"id": "eqasc_train_5745", "nl": "Pacinian corpuscles are found mainly in the skin.", "fol": "", "prediction": ["all x.(PacinnianCorpuscle(x) -> FoundInSkin(x))"]}
{"id": "eqasc_train_5746", "nl": "Skin pressure receptors announce that the feet are on the ground or the buttocks are on a chair.", "fol": "", "prediction": ["all x y.((SkinPressureReceptor(x) & Foot(y)) -> (Annotates(x,y) | (Annotates(x,y) & Chair(y))))"]}
{"id": "eqasc_train_5747", "nl": "receptors on the epidermis detect pressure and announce to the feet or buttocks that you touching something", "fol": "", "prediction": ["all x y.((ReceptorsOnEpidermis(x) & Epidermis(y)) -> (DetectsPressure(x,y) & AnnouncesToFeetOrButtocks(x,y)))"]}
{"id": "eqasc_train_5748", "nl": "oil is formed by layers of sediment pushing down on decomposing algae", "fol": "", "prediction": ["all x y.((Oil(x) & Sediment(y) & Algae(z)) -> FormedByLayers(x,y))"]}
{"id": "eqasc_train_5749", "nl": "Burial of sediments also causes the sediments to increase in temperature.", "fol": "", "prediction": ["all x.((SedimentBurial(x) & IncreasesTemperature(x)) -> CausesSedimentsToIncrease(x))"]}
{"id": "eqasc_train_5750", "nl": "oil is formed by burial of decomposing algae being pushing down which increase temperatures", "fol": "", "prediction": ["all x y.((Oil(x) & Algae(y) & Decomposing(y)) -> FormedByBoiling(x,y))"]}
{"id": "eqasc_train_5751", "nl": "Oil can be formed by sediment pushing down on simple green plants.", "fol": "", "prediction": ["all x.(Oil(x) -> (FormedBySediment(x) & PushesDownOnSimpleGreenPlants(x)))"]}
{"id": "eqasc_train_5752", "nl": "When algae dies, it uses oxygen to decompose.", "fol": "", "prediction": ["all x.((Algae(x) & Dies(x)) -> UsesOxygenToDecompose(x))"]}
{"id": "eqasc_train_5753", "nl": "Oil comes from sediment mixing with dead, oxygenated algae", "fol": "", "prediction": ["all x y.((Oil(x) & Sediment(y) & DeadOxygenatedAlgae(y)) -> ComesFromMixingWith(x,y))"]}
{"id": "eqasc_train_5754", "nl": "When the algae die they decompose.", "fol": "", "prediction": ["all x.((Algae(x) & Dies(x)) -> Decomposes(x))"]}
{"id": "eqasc_train_5755", "nl": "Oil is formed when sediment layers push on dead algae.", "fol": "", "prediction": ["all x.((SedimentLayer(x) & PushesOnDeadAlgae(x)) -> OilForms(x))"]}
{"id": "eqasc_train_5756", "nl": "Earthy sediment of fine particles of rock and soil suspended in and carried by water.", "fol": "", "prediction": ["all x.(EarthySediment(x) -> (FineParticlesOfRockAndSoil(x) & SuspendedInWater(x) & CarriedByWater(x)))"]}
{"id": "eqasc_train_5757", "nl": "Oil is formed by fine particles pushing down on algae", "fol": "", "prediction": ["all x y.((Oil(x) & FineParticles(y) & Algae(z)) -> FormedByPressingDownOn(x,y,z))"]}
{"id": "eqasc_train_5758", "nl": "When the algae dies it is decomposed by bacteria.", "fol": "", "prediction": ["all x.((Algae(x) & Dies(x)) -> DecomposedByBacteria(x))"]}
{"id": "eqasc_train_5759", "nl": "Oil is formed by the actions of sediment and bacteria.", "fol": "", "prediction": ["all x.(Oil(x) -> (FormedBySediment(x) & FormedByBacteria(x)))"]}
{"id": "eqasc_train_5760", "nl": "Fossil fuels like coal and oil are ancient biomass fuel.", "fol": "", "prediction": ["all x.((FossilFuel(x) & (Coal(x) | Oil(x))) -> AncientBiomassFuel(x))"]}
{"id": "eqasc_train_5761", "nl": "Fossil fuels can be formed by layers of sediment pushing down on decomposing algae.", "fol": "", "prediction": ["all x.(FossilFuel(x) -> (FormedBySedimentLayer(x) & PushesDownOnDecomposingAlgae(x)))"]}
{"id": "eqasc_train_5762", "nl": "Oil is formed by layers of sediment pushing down on bacteria.", "fol": "", "prediction": ["all x.(Oil(x) -> (FormedBySedimentLayer(x) & PushesDownOnBacteria(x)))"]}
{"id": "eqasc_train_5763", "nl": "Secondary meristem is located within and around the vascular tissues.", "fol": "", "prediction": ["all x.(SecondaryMeristem(x) -> (LocatedInVascularTissues(x) & LocatedAroundVascularTissues(x)))"]}
{"id": "eqasc_train_5764", "nl": "Plant growth in width or girth emanates from within and around the vascular tissues.", "fol": "", "prediction": ["all x.((PlantGrowth(x) & (Width(x) | Girth(x))) -> EmitsFromInsideAndAroundVascularTissues(x))"]}
{"id": "eqasc_train_5765", "nl": "Vascular tissue is a conducting tissue type.", "fol": "", "prediction": ["all x.(VascularTissue(x) -> ConductingTissue(x))"]}
{"id": "eqasc_train_5766", "nl": "Secondary meristem is located within and around a conducting tissue type", "fol": "", "prediction": ["all x y.((SecondaryMeristem(x) & ConductingTissueType(y)) -> (LocatedInAndAround(x,y) & ConductingTissueType(x)))"]}
{"id": "eqasc_train_5767", "nl": "Secondary meristems make the stem or root grow larger in diameter.", "fol": "", "prediction": ["all x.(SecondaryMeristem(x) -> (MakesStemOrRootGrowLargerInDiameter(x)))"]}
{"id": "eqasc_train_5768", "nl": "Vascular tissues make the stem or root grow larger in diameter", "fol": "", "prediction": ["all x y.((VascularTissue(x) & (Stem(y) | Root(y))) -> GrowsLargerInDiameter(x,y))"]}
{"id": "eqasc_train_5769", "nl": "Plant cell types rise by mitosis from a meristem .", "fol": "", "prediction": ["all x y.((PlantCellType(x) & Meristem(y)) -> RisesByMitosis(x,y))"]}
{"id": "eqasc_train_5770", "nl": "Plant cells around the vascular tissues are created by mitosis.", "fol": "", "prediction": ["all x y.((PlantCell(x) & VascularTissue(y) & CreatedByMitosis(x,y)) -> CreatedByMitosis(x,y))"]}
{"id": "eqasc_train_5771", "nl": "Plant tissues are produced from meristems.", "fol": "", "prediction": ["all x.(PlantTissue(x) -> ProducedFromMeristems(x))"]}
{"id": "eqasc_train_5772", "nl": "plants have vascular tissues", "fol": "", "prediction": ["all x.(Plant(x) -> HasVascularTissues(x))"]}
{"id": "eqasc_train_5773", "nl": "Leaves lack Vascular Tissues.", "fol": "", "prediction": ["all x.(Leaves(x) -> LacksVascularTissues(x))"]}
{"id": "eqasc_train_5774", "nl": "Leaves lack secondary meristem.", "fol": "", "prediction": ["all x.(Leaves(x) -> LacksSecondaryMeristem(x))"]}
{"id": "eqasc_train_5775", "nl": "Secondary meristems develop after primary meristems.", "fol": "", "prediction": ["all x.(SecondaryMeristem(x) -> DevelopsAfterPrimaryMeristem(x))"]}
{"id": "eqasc_train_5776", "nl": "that which develops after primary meristems is located within and around vascular tissues.", "fol": "", "prediction": ["all x.((DevelopsAfterPrimaryMeristems(x) & LocatedInVascularTissues(x)) -> LocatedAroundVascularTissues(x))"]}
{"id": "eqasc_train_5777", "nl": "Secondary growth occurs in the lateral meristems.", "fol": "", "prediction": ["all x.(SecondaryGrowth(x) -> OccursInLatinalMeristems(x))"]}
{"id": "eqasc_train_5778", "nl": "the area where secondary growth  occurs is located within and around the vascular tissues", "fol": "", "prediction": ["all x y.((Area(x) & SecondaryGrowth(y)) -> (LocatedInVascularTissues(x,y) & LocatedAroundVascularTissues(x,y)))"]}
{"id": "eqasc_train_5779", "nl": "Near the vascular tissues meristems develop", "fol": "", "prediction": ["all x y.((VascularTissue(x) & VascularTissue(y)) -> Meristem(x))"]}
{"id": "eqasc_train_5780", "nl": "Birds evolved from a group of bipedal dinosaurs called theropods.", "fol": "", "prediction": ["all x.(Bird(x) -> (EvolvedFromBipedalDinosaurs(x) & Theropods(x)))"]}
{"id": "eqasc_train_5781", "nl": "Bird's feathers have evolved from reptile scales.", "fol": "", "prediction": ["all x.(Bird(x) -> (EvolvedFromReptileScales(x)))"]}
{"id": "eqasc_train_5782", "nl": "feathers have evolved from reptile scales of bipedal dinosaurs called theropods", "fol": "", "prediction": ["all x y.((Feathers(x) & ReptileScales(y) & BipedalDinosaur(x)) -> EvolvedFromScales(x,y))"]}
{"id": "eqasc_train_5783", "nl": "Dromaeosaurs are part of the theropod group of dinosaurs.", "fol": "", "prediction": ["all x.(Dromaeosaur(x) -> PartOfTheropod(x))"]}
{"id": "eqasc_train_5784", "nl": "birds evolved from dromaeosaurs", "fol": "", "prediction": ["all x y.((Bird(x) & Dromaeosaur(y)) -> EvolvedFrom(x,y))"]}
{"id": "eqasc_train_5785", "nl": "Feathers are highly probable in the advanced bird-like theropods.", "fol": "", "prediction": ["all x.(Feather(x) -> HighlyProbableInAdvancedBirdLikeTheropods(x))"]}
{"id": "eqasc_train_5786", "nl": "Feathers are highly probable in the evolution of a group of bipedal dinosaurs", "fol": "", "prediction": ["all x y.((Feather(x) & BipedalDinosaur(y)) -> HighlyProbableInEvolution(x,y))"]}
{"id": "eqasc_train_5787", "nl": "Bird A bird is an animal with feathers.", "fol": "", "prediction": ["all x.(Bird(x) -> (Animal(x) & HasFeathers(x)))"]}
{"id": "eqasc_train_5788", "nl": "an animal with feathers can evolve from theropods.", "fol": "", "prediction": ["all x.((Animal(x) & HasFeathers(x)) -> CanEvolveFromTheropods(x))"]}
{"id": "eqasc_train_5789", "nl": "All hawks are birds.", "fol": "", "prediction": ["all x.(Hawk(x) -> Bird(x))"]}
{"id": "eqasc_train_5790", "nl": "Hawks evolved from a group of bipedal dinosaurs called theropods", "fol": "", "prediction": ["all x y.((Hawk(x) & BipedalDinosaur(y)) -> EvolvedFrom(x,y))"]}
{"id": "eqasc_train_5791", "nl": "Birds evolved from a group of bipedal dinosaurs that included Dromaeosaurs.", "fol": "", "prediction": ["all x y.((Bird(x) & BipedalDinosaur(y) & IncludesDromaeosaurs(x)) -> EvolvedFrom(x,y))"]}
{"id": "eqasc_train_5792", "nl": "Dromaeosaurs are a group of dinosaurs that evolved into birds", "fol": "", "prediction": ["all x.(Dromaeosaur(x) -> (Dinosaur(x) & Evolutionary(x) & Bird(x)))"]}
{"id": "eqasc_train_5793", "nl": "bids evolved from a group of bipedal dinosaurs called dromaeosaur ", "fol": "", "prediction": ["all x y.((Bid(x) & BipedalDinosaur(y)) -> (EvolvedFrom(x,y) & Dromaeosaur(x)))"]}
{"id": "eqasc_train_5794", "nl": "Like most theropods, the pelvis is propubic.", "fol": "", "prediction": ["all x.((Theropod(x) & Propubic(x)) -> Pelvic(x))"]}
{"id": "eqasc_train_5795", "nl": "birds have a propubic pelvis", "fol": "", "prediction": ["all x.(Bird(x) -> HasPropubicPales(x))"]}
{"id": "eqasc_train_5796", "nl": "operating an automobile usually requires fossil fuels", "fol": "", "prediction": ["all x.((Automobile(x) & Operating(x)) -> RequiresFossilFuels(x))"]}
{"id": "eqasc_train_5797", "nl": "Fossil fuel pollution can cause asthma and lung problems, especially for children and the elderly.", "fol": "", "prediction": ["all x.(FossilFuelPollution(x) -> (CausesAsthma(x) & CausesLungProblems(x) & EspeciallyForChildrenAndAlteresters(x)))"]}
{"id": "eqasc_train_5798", "nl": "Operating an automobile can contribute to asthma in children", "fol": "", "prediction": ["all x y.((Automobile(x) & Child(y)) -> CanContributeToAsthma(x,y))"]}
{"id": "eqasc_train_5799", "nl": "Fossil fuels are considered non-renewable.", "fol": "", "prediction": ["all x.(FossilFuel(x) -> NonRenewable(x))"]}
{"id": "eqasc_train_5800", "nl": "operating an automobile usually requires a non-renewable resource", "fol": "", "prediction": ["all x y.((Automobile(x) & Operating(x,y)) -> RequiresNonRenewableResource(x))"]}
{"id": "eqasc_train_5801", "nl": "Car and automobile, for example, are synonyms.", "fol": "", "prediction": ["all x.((Car(x) | Automobile(x)) -> Synonym(x))"]}
{"id": "eqasc_train_5802", "nl": "operating a car usually requires fossil fuels", "fol": "", "prediction": ["all x y.((Car(x) & Car(y)) -> RequiresFossilFuels(x,y))"]}
{"id": "eqasc_train_5803", "nl": "Cars, see Automobiles.", "fol": "", "prediction": ["all x.(Car(x) -> (Automobile(x) | Automobile(x)))"]}
{"id": "eqasc_train_5804", "nl": "Operating an automobile usually requires energy pollution from gasoline.", "fol": "", "prediction": ["all x.(Automobile(x) -> RequiresEnergyPollutionFromGasoline(x))"]}
{"id": "eqasc_train_5805", "nl": "Global warming is caused largely by fossil fuel use.", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> CausedByFossilFuelUse(x))"]}
{"id": "eqasc_train_5806", "nl": "operating an automobile contributes to Global warming", "fol": "", "prediction": ["all x y.((Automobile(x) & Operates(x,y)) -> ContributesToGlobalWarming(x))"]}
{"id": "eqasc_train_5807", "nl": "Fossil fuels are a finite resource.", "fol": "", "prediction": ["all x.(FossilFuel(x) -> FiniteResource(x))"]}
{"id": "eqasc_train_5808", "nl": "Automobiles  usually require a finite resource.", "fol": "", "prediction": ["all x.(Automobile(x) -> RequiresFiniteResource(x))"]}
{"id": "eqasc_train_5809", "nl": "Fossil Fuels Fuels that are formed in the earth from plant or animal remains.", "fol": "", "prediction": ["all x.((FossilFuel(x) & FormedInEarthFromPlantOrAnimalRemains(x)) -> Fuel(x))"]}
{"id": "eqasc_train_5810", "nl": "operating an automobile usually requires animal remains", "fol": "", "prediction": ["all x.((Automobile(x) & Operates(x)) -> RequiresAnimalRemains(x))"]}
{"id": "eqasc_train_5811", "nl": "Automobiles and the burning of fossil fuels generate gases such as sulphur dioxide.", "fol": "", "prediction": ["all x y.((Automobile(x) & FossilFuelBurning(y)) -> GeneratesSulphurDioxide(x,y))"]}
{"id": "eqasc_train_5812", "nl": "Operating an automobile creates gases by burning fuel", "fol": "", "prediction": ["all x y.((Automobile(x) & Operating(x)) -> CreatesGasesByBurningFuel(x,y))"]}
{"id": "eqasc_train_5813", "nl": "being distracted while driving can cause people to crash their car", "fol": "", "prediction": ["all x y.((DistractedWhileDriving(x) & Person(y)) -> CanCrashCar(y))"]}
{"id": "eqasc_train_5814", "nl": "Cell phones are a distraction to driving.", "fol": "", "prediction": ["all x.(CellPhone(x) -> DistractionToDriving(x))"]}
{"id": "eqasc_train_5815", "nl": "Using a cell phone while driving can cause crashes.", "fol": "", "prediction": ["all x.((CellPhone(x) & Driving(x)) -> CanCauseCrashes(x))"]}
{"id": "eqasc_train_5816", "nl": "Some children drive their parents to distraction.", "fol": "", "prediction": ["exists x.(Child(x) & DrivesToDistraction(x))"]}
{"id": "eqasc_train_5817", "nl": "Children can cause drivers to crash", "fol": "", "prediction": ["all x y.((Child(x) & Driver(y)) -> CausesCrash(x,y))"]}
{"id": "eqasc_train_5818", "nl": "In many cases cellphones are not the only distractions behind the wheel.", "fol": "", "prediction": ["all x.((Cellphone(x) & -(Cellphone(x) & Wheel(x))) -> Distraction(x))"]}
{"id": "eqasc_train_5819", "nl": "Cellphones can cause people to crash their car.", "fol": "", "prediction": ["all x.(Cellphone(x) -> CausesCrash(x))"]}
{"id": "eqasc_train_5820", "nl": "Eating and drinking in the car is a major distraction.", "fol": "", "prediction": ["all x.((EatingInCar(x) & DrinkingInCar(x)) -> MajorDistraction(x))"]}
{"id": "eqasc_train_5821", "nl": "eating and drinking can cause people to crash their car", "fol": "", "prediction": ["all x y.((Eating(x) & Drinking(y)) -> CausesCrash(x,y))"]}
{"id": "eqasc_train_5822", "nl": "Repairing a car after a crash will become prohibitively expensive, and insurance rates will skyrocket.", "fol": "", "prediction": ["all x y.((Car(x) & Crash(y)) -> (ProhibitivelyExpensed(x) & InsuranceRatesSkyrocket(x)))"]}
{"id": "eqasc_train_5823", "nl": "Being distracted while driving can cause your insurances rates to skyrocket.", "fol": "", "prediction": ["all x.((Distracted(x) & Driving(x)) -> InsuranceRatesSkyrocket(x))"]}
{"id": "eqasc_train_5824", "nl": "Cell phones can cause people to crash their car", "fol": "", "prediction": ["all x y.((CellPhone(x) & Person(y)) -> CanCrashCar(x,y))"]}
{"id": "eqasc_train_5825", "nl": "Using a cell phone while driving can cause people to crash their car", "fol": "", "prediction": ["all x y.((CellPhone(x) & Driving(y)) -> CausesCrash(x,y))"]}
{"id": "eqasc_train_5826", "nl": "Cell phones can cause a driver to crash", "fol": "", "prediction": ["all x y.((CellPhone(x) & Driver(y)) -> CanCrash(x,y))"]}
{"id": "eqasc_train_5827", "nl": "cell phones can cause people to crash their car", "fol": "", "prediction": ["all x y.((CellPhone(x) & Person(y)) -> CanCrashCar(x,y))"]}
{"id": "eqasc_train_5828", "nl": "Car crashes are a leading cause of death.", "fol": "", "prediction": ["all x.(CarCrashes(x) -> LeadingCauseOfDeath(x))"]}
{"id": "eqasc_train_5829", "nl": "distracted driving can cause death", "fol": "", "prediction": ["all x.(DistractedDriving(x) -> CausesDeath(x))"]}
{"id": "eqasc_train_5830", "nl": "Cars crash, people die, slow down.", "fol": "", "prediction": ["all x y.((Car(x) & Person(y)) -> (Crash(x) & Die(y) & SlowDown(y)))"]}
{"id": "eqasc_train_5831", "nl": "being distracted while driving can cause people to die", "fol": "", "prediction": ["all x y.((DistractedWhileDriving(x) & Person(y)) -> CausesDisaster(x,y))"]}
{"id": "eqasc_train_5832", "nl": "Car crashes are the leading cause of death for children from birth to age 21.", "fol": "", "prediction": ["all x y.((CarCrashes(x) & Child(y) & BirthToAge(y,x)) -> LeadingCauseOfDeath(x,y))"]}
{"id": "eqasc_train_5833", "nl": "Being distracted while driving can cause the leading cause of death for children.", "fol": "", "prediction": ["all x.((Distracted(x) & Driving(x)) -> LeadsCauseOfDeath(x))"]}
{"id": "eqasc_train_5834", "nl": "Fungi lack chlorophyll, so they cannot make food by photosynthesis as plants can.", "fol": "", "prediction": ["all x.(Fungus(x) -> (LackChlorophyll(x) & -MakeFoodByPhotosynthesis(x)))"]}
{"id": "eqasc_train_5835", "nl": "Like a mushroom, it lacks chlorophyll and is nonphotosynthetic.", "fol": "", "prediction": ["(LikesMushroom(much) & LacksChlorophyll(m) & NonPhotosynthetic(m))"]}
{"id": "eqasc_train_5836", "nl": "Mushrooms are nonphotosynthetic and cannot make food to grow.", "fol": "", "prediction": ["all x.(Mushroom(x) -> (NonPhotosynthetic(x) & -CanMakeFoodToGrow(x)))"]}
{"id": "eqasc_train_5837", "nl": "Solar energy is absorbed by chlorophyll.", "fol": "", "prediction": ["all x.(SolarEnergy(x) -> AbsorbedByChlorophyll(x))"]}
{"id": "eqasc_train_5838", "nl": "Fungi cannot absorb solar energy and cannot make food by photosynthesis as plants can.", "fol": "", "prediction": ["all x.(Fungus(x) -> (-AbsorbsSolarEnergy(x) & -MakesFoodByPhotosynthesis(x)))"]}
{"id": "eqasc_train_5839", "nl": "Fungi decompose dead plant and animal matter.", "fol": "", "prediction": ["all x.(Fungus(x) -> DecomposesDeadPlantAndAnimalMatter(x))"]}
{"id": "eqasc_train_5840", "nl": "Since fungi cannot make food by photosynthesis, they decompose dead organisms.", "fol": "", "prediction": ["all x.((Fungus(x) & -Photosynthesis(x)) -> DecomposesDeadOrganisms(x))"]}
{"id": "eqasc_train_5841", "nl": "Mushrooms are also fungi.", "fol": "", "prediction": ["all x.(Mushroom(x) -> Fungus(x))"]}
{"id": "eqasc_train_5842", "nl": "mushrooms lack chlorophyll, so they cannot make food by photosynthesis as plants can", "fol": "", "prediction": ["all x y.((Mushroom(x) & Plant(y)) -> (LacksChlorophyll(x) & -MakesFoodByPhotosynthesis(x)))"]}
{"id": "eqasc_train_5843", "nl": "Fungi lack chlorophyll and are nonphotosynthetic.", "fol": "", "prediction": ["all x.(Fungus(x) -> (LacksChlorophyll(x) & NonPhotosynthetic(x)))"]}
{"id": "eqasc_train_5844", "nl": "Fungi are nonphotosynthetic", "fol": "", "prediction": ["all x.(Fungus(x) -> (NonPhotosynthetic(x) & NonPhotosynthetic(x)))"]}
{"id": "eqasc_train_5845", "nl": "mold lacks chlorophyll", "fol": "", "prediction": ["all x.(Mold(x) -> LacksChlorophyll(x))"]}
{"id": "eqasc_train_5846", "nl": "Fungi are multicellular organisms that absorb their food molecule by molecule.", "fol": "", "prediction": ["all x.(Fungus(x) -> (MulticellularOrganism(x) & AbsorbsFoodMoleculeByMolecule(x)))"]}
{"id": "eqasc_train_5847", "nl": "Fungi lack chlorophyll, so they must absorb nutrition molecule by molecule.", "fol": "", "prediction": ["all x.(Fungus(x) -> (LacksChlorophyll(x) & AbsorbsNutritionMoleculeByMolecule(x)))"]}
{"id": "eqasc_train_5848", "nl": "Mushrooms are an example of fungi.", "fol": "", "prediction": ["all x.(Mushroom(x) -> Fungus(x))"]}
{"id": "eqasc_train_5849", "nl": "mushrooms lack chlorophyll", "fol": "", "prediction": ["all x.(Mushroom(x) -> LacksChlorophyll(x))"]}
{"id": "eqasc_train_5850", "nl": "Fungi lack chlorophyll, so they cannot make food by photosynthesis as producers can.", "fol": "", "prediction": ["all x.(Fungus(x) -> (LacksChlorophyll(x) & -MakesFoodByPhotosynthesis(x)))"]}
{"id": "eqasc_train_5851", "nl": "All plants require sunlight, carbon dioxide, and water for photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> (RequiresSunlight(x) & RequiresCarbonDioxide(x) & RequiresWater(x)))"]}
{"id": "eqasc_train_5852", "nl": "fungi cannot make food with sunlight", "fol": "", "prediction": ["all x.(Fungus(x) -> -(MakesFoodWithSunlight(x) & Sunlight(x)))"]}
{"id": "eqasc_train_5853", "nl": "yeast lack clorophyll", "fol": "", "prediction": ["all x.(Yeast(x) -> LacksClorophyll(x))"]}
{"id": "eqasc_train_5854", "nl": "Migrants typically travel long distances.", "fol": "", "prediction": ["all x.(Migrant(x) -> TravelsLongDistances(x))"]}
{"id": "eqasc_train_5855", "nl": "Barn swallows are Neotropical migrants.", "fol": "", "prediction": ["all x.(BanSnake(x) -> NeotropicalMigrator(x))"]}
{"id": "eqasc_train_5856", "nl": "Barn swallows travel long distances.", "fol": "", "prediction": ["all x.(BanSnake(x) -> TravelsLongDistances(x))"]}
{"id": "eqasc_train_5857", "nl": "Insectivorous birds are the largest group of migrants.", "fol": "", "prediction": ["all x.(InsectivorousBird(x) -> LargestGroupOfMigrants(x))"]}
{"id": "eqasc_train_5858", "nl": "Insectivorous birds typically travel long distances", "fol": "", "prediction": ["all x.(InsectivorousBird(x) -> TravelsLongDistances(x))"]}
{"id": "eqasc_train_5859", "nl": "Migrant birds leave.", "fol": "", "prediction": ["all x.(MigrantBird(x) -> Leaves(x))"]}
{"id": "eqasc_train_5860", "nl": "birds typically travel long distances", "fol": "", "prediction": ["all x.(Bird(x) -> TravelsLongDistances(x))"]}
{"id": "eqasc_train_5861", "nl": "Distance Finder Find the distance between two places.", "fol": "", "prediction": ["DistanceFinder FindsDistanceBetweenPlaces(x)"]}
{"id": "eqasc_train_5862", "nl": "Migrants usually travel between two places fa away from each other.", "fol": "", "prediction": ["all x y.((Migrant(x) & Place(y)) -> TravelsBetween(x,y))"]}
{"id": "eqasc_train_5863", "nl": "Birds such as sparrows and warblers are nocturnal migrants and travel at night.", "fol": "", "prediction": ["all x.((Bird(x) & (Sparrow(x) | Warbler(x))) -> (NocturnalMigrant(x) & TravelsAtNight(x)))"]}
{"id": "eqasc_train_5864", "nl": "warblers are nocturnal and travel long distances at night", "fol": "", "prediction": ["all x.(Warbler(x) -> (Nocturnal(x) & TravelsLongDistancesAtNight(x)))"]}
{"id": "eqasc_train_5865", "nl": "Migrant birds arrive.", "fol": "", "prediction": ["all x.(MigrantBird(x) -> Arrives(x))"]}
{"id": "eqasc_train_5866", "nl": "birds travel long distances", "fol": "", "prediction": ["all x.(Bird(x) -> TravelsLongDistances(x))"]}
{"id": "eqasc_train_5867", "nl": "Manatees are a migrant species.", "fol": "", "prediction": ["all x.(Manatee(x) -> MigrantSpecies(x))"]}
{"id": "eqasc_train_5868", "nl": "manatees migrate long distances", "fol": "", "prediction": ["all x.(Manatee(x) -> MigratesLongDistances(x))"]}
{"id": "eqasc_train_5869", "nl": "Manatees typically travel long distances.", "fol": "", "prediction": ["all x.(Manatee(x) -> TravelsLongDistances(x))"]}
{"id": "eqasc_train_5870", "nl": "manatees typically travel long distances", "fol": "", "prediction": ["all x.(Manatee(x) -> TravelsLongDistances(x))"]}
{"id": "eqasc_train_5871", "nl": "Although some of Kew's butterflies are fairly sedentary, others are great migrants.", "fol": "", "prediction": ["exists x.(Butterfly(x) & Kew(x) & Sedentary(x) & Migrant(x))"]}
{"id": "eqasc_train_5872", "nl": "some butterflies travel long distances", "fol": "", "prediction": ["exists x.(Butterfly(x) & TravelsLongDistances(x))"]}
{"id": "eqasc_train_5873", "nl": "For long distance traveling, it is best to fly.", "fol": "", "prediction": ["all x.(LongDistanceTravel(x) -> BestToFly(x))"]}
{"id": "eqasc_train_5874", "nl": "Migrants typically fly long distances", "fol": "", "prediction": ["all x.(Migrant(x) -> (FliesLongDistances(x) & FlysLongDistances(x)))"]}
{"id": "eqasc_train_5875", "nl": "Whales travel long distances each day.", "fol": "", "prediction": ["all x.(Whale(x) -> TravelsLongDistances(x))"]}
{"id": "eqasc_train_5876", "nl": "While migrants would typically do so, whales can travel longer each day.", "fol": "", "prediction": ["all x.((Migrant(x) & Whale(x)) -> TravelsLonger(x))"]}
{"id": "eqasc_train_5877", "nl": "threatening behavior by predators causes a porcupine to extend its quills", "fol": "", "prediction": ["all x y.((Porcupine(x) & Predator(y) & ThreateningBehavior(x,y)) -> ExtendsQuills(x,y))"]}
{"id": "eqasc_train_5878", "nl": "Fishers are one of the few specialized predators on porcupines.", "fol": "", "prediction": ["all x y.((Fisher(x) & Porcupine(y)) -> SpecializedPredator(x,y))"]}
{"id": "eqasc_train_5879", "nl": "A porcupine will extend it's quills when a fisher displays threatening behavior.", "fol": "", "prediction": ["all x y.((Porcupine(x) & Fisher(y) & DisplaysThreatingBehavior(x,y)) -> ExtendsQuills(x))"]}
{"id": "eqasc_train_5880", "nl": "Aggression is active, harmful and offensive, threatens all and benefits none.", "fol": "", "prediction": ["all x.(Aggression(x) -> (Active(x) & Harmful(x) & Offensive(x) & ThreatensAll(x) & BenefitsNone(x)))"]}
{"id": "eqasc_train_5881", "nl": "Aggression by predators causes porcupine to extend its quills.", "fol": "", "prediction": ["all x.((Predator(x) & Aggression(x)) -> CausesPupinToExtendQuills(x))"]}
{"id": "eqasc_train_5882", "nl": "Fishers are predators that can eat porcupines.", "fol": "", "prediction": ["all x.(Fisher(x) -> (Predator(x) & CanEatPupins(x)))"]}
{"id": "eqasc_train_5883", "nl": "A threatening behavior by a fisher can make a porcupine extend its quills.", "fol": "", "prediction": ["all x y.((Fisher(x) & Fisher(y) & ThreateningBehavior(x,y)) -> CanExtendQuills(x,y))"]}
{"id": "eqasc_train_5884", "nl": "Porcupines only inflate and extend their spines as a defense mechanism.", "fol": "", "prediction": ["all x.(Porcupine(x) -> (InflatesSpines(x) & ExtendsSpines(x) & DefenseMechanism(x)))"]}
{"id": "eqasc_train_5885", "nl": "porcupine can use its quills as a defense mechanism", "fol": "", "prediction": ["all x.(Porcupine(x) -> (CanUseQuillsAsDefenseMechanism(x)))"]}
{"id": "eqasc_train_5886", "nl": "Porcupine quills can be extraordinarily painful.", "fol": "", "prediction": ["all x.(PorcupineQuill(x) -> ExceptionallyPoorly(x))"]}
{"id": "eqasc_train_5887", "nl": "threatening behavior towards porcupine by predators can cause the predator pain", "fol": "", "prediction": ["all x y.((Porcupine(x) & Predator(y) & ThreateningBehavior(x,y)) -> CausesPain(x,y))"]}
{"id": "eqasc_train_5888", "nl": "Puffers are smooth skinned while Porcupines have the characteristic spines or quills.", "fol": "", "prediction": ["all x y.((Puffer(x) & Porcupine(y)) -> (SmoothSkinned(x) & (HasSpines(y) | HasQuills(y))))"]}
{"id": "eqasc_train_5889", "nl": "A porcupine will extend its spines when threatened", "fol": "", "prediction": ["all x.((Porcupine(x) & Threatened(x)) -> ExtendsSpines(x))"]}
{"id": "eqasc_train_5890", "nl": "threatening behavior can be painful", "fol": "", "prediction": ["all x.(TornantBehavior(x) -> Painful(x))"]}
{"id": "eqasc_train_5891", "nl": "Porcupines are in the rodent family.", "fol": "", "prediction": ["all x.(Porcupine(x) -> RodentFamily(x))"]}
{"id": "eqasc_train_5892", "nl": "threatening behavior by predators causes a rodent to extend its quills", "fol": "", "prediction": ["all x y.((Rodent(x) & Predator(y) & ThreateningBehavior(x,y)) -> ExtendsQuills(x,y))"]}
{"id": "eqasc_train_5893", "nl": "Predators kill and eat their prey.", "fol": "", "prediction": ["all x y.((Predator(x) & Prey(y)) -> (Kills(x,y) & Eats(x,y)))"]}
{"id": "eqasc_train_5894", "nl": "the threat of being eaten causes a porcupine to extend its quills", "fol": "", "prediction": ["all x y.((Porcupine(x) & ThreatOfEating(x)) -> ExtendsQuills(x,y))"]}
{"id": "eqasc_train_5895", "nl": "Similarly, threatening or intimidating behaviors are also forbidden.", "fol": "", "prediction": ["all x.((Torning(x) | Intimidating(x)) -> -Banned(x))"]}
{"id": "eqasc_train_5896", "nl": "A porcupine will extend its quills when intimidated.", "fol": "", "prediction": ["all x.((Porcupine(x) & Intimidated(x)) -> ExtendsQuills(x))"]}
{"id": "eqasc_train_5897", "nl": "Sponges are a source of food for many species of fish.", "fol": "", "prediction": ["all x.(Sponges(x) -> SourceOfFood(x))"]}
{"id": "eqasc_train_5898", "nl": "Sponges are also keystone species.", "fol": "", "prediction": ["all x.(Spot(x) -> KeystoneSpecies(x))"]}
{"id": "eqasc_train_5899", "nl": "Keystone species are a source of food for many fish species.", "fol": "", "prediction": ["all x.(KeystoneSpecies(x) -> SourceOfFood(x))"]}
{"id": "eqasc_train_5900", "nl": "Food is only nutritious if it is eaten.", "fol": "", "prediction": ["all x.((Food(x) & Eaten(x)) -> Nutritious(x))"]}
{"id": "eqasc_train_5901", "nl": "sponges are a source of nutrition for many fish", "fol": "", "prediction": ["all x.(Sponge(x) -> SourceOfNutrition(x))"]}
{"id": "eqasc_train_5902", "nl": "Fish and other marine animals abound here.", "fol": "", "prediction": ["all x.((Fish(x) | MarineAnimal(x)) -> Abounds(x))"]}
{"id": "eqasc_train_5903", "nl": "Sponges are a source of food for many marine animals.", "fol": "", "prediction": ["all x.(Sponges(x) -> SourceOfFood(x))"]}
{"id": "eqasc_train_5904", "nl": "Sponges live on the bottom of oceans, rivers, and streams.", "fol": "", "prediction": ["all x.(Spot(x) -> (LivesOnBottomOfOceans(x) | LivesOnBottomOfRivers(x) | LivesOnBottomOfStreams(x)))"]}
{"id": "eqasc_train_5905", "nl": "many species of fish find food on the bottom of oceans", "fol": "", "prediction": ["all x y.((SpeciesOfFish(x) & Ocean(y)) -> FindsFoodOnBottomOf(x,y))"]}
{"id": "eqasc_train_5906", "nl": "Coral reefs are homes to thousands of different kinds of fish, sponges, algae, and mollusks.", "fol": "", "prediction": ["all x.(CoralReef(x) -> (HomeTo(x,y) & (Fish(y) | Sponge(y) | Algae(y) | Mollusk(y))))"]}
{"id": "eqasc_train_5907", "nl": "coral reefs are home to many fish", "fol": "", "prediction": ["all x.(CoralReef(x) -> HomeToManyFish(x))"]}
{"id": "eqasc_train_5908", "nl": "Like sponges, they are attached to the ocean floor.", "fol": "", "prediction": ["all x.(Sponge(x) -> AttachedToOceanFloor(x))"]}
{"id": "eqasc_train_5909", "nl": "organisms attached to the ocean floor are a source of food for many species of fish.", "fol": "", "prediction": ["all x.((Organism(x) & AttachedToOceanFloor(x)) -> SourceOfFoodForManySpeciesOfFish(x))"]}
{"id": "eqasc_train_5910", "nl": "All sea turtle eat marine animals such as sponges, marine worms and molluscs.", "fol": "", "prediction": ["all x.(SeaTurtle(x) -> (EatsSponges(x) | EatsMarineWheels(x) | EatsMolluscs(x)))"]}
{"id": "eqasc_train_5911", "nl": "sea turtles and fish share sources of food", "fol": "", "prediction": ["all x y.((SeaTurtle(x) & Fish(y)) -> (SharesFoodSources(x,y) & SharesFoodSources(y,x)))"]}
{"id": "eqasc_train_5912", "nl": "Sea sponges are animals in the Phylum Porifera.", "fol": "", "prediction": ["all x.(SeaSponge(x) -> Animal(x))"]}
{"id": "eqasc_train_5913", "nl": "animals in the Phylum Porifera are a source of food for many species of fish", "fol": "", "prediction": ["all x.((Animal(x) & PhylumPorifera(x)) -> SourceOfFoodForFishSpecies(x))"]}
{"id": "eqasc_train_5914", "nl": "Most sponges are sessile.", "fol": "", "prediction": ["all x.(Sponge(x) -> Sessile(x))"]}
{"id": "eqasc_train_5915", "nl": "Sessile organisms can be a source of food for many species of fish.", "fol": "", "prediction": ["all x.(SessileOrganism(x) -> SourceOfFood(x))"]}
{"id": "eqasc_train_5916", "nl": "Oncogenes promote the division of cells with damaged DNA.", "fol": "", "prediction": ["all x.(Oncogene(x) -> PromotesDivisionOfCellsWithDamagedDNA(x))"]}
{"id": "eqasc_train_5917", "nl": "Carcinogenic or oncogenic effects cause cancer.", "fol": "", "prediction": ["all x.((Carcinogenic(x) | Oncogenic(x)) -> CausesCancer(x))"]}
{"id": "eqasc_train_5918", "nl": "Carcnogenic substances can promote division of cells with damaged DNA.", "fol": "", "prediction": ["all x.(CarnivorogenicSubstance(x) -> PromotesDivisionOfCellsWithDamagedDNA(x))"]}
{"id": "eqasc_train_5919", "nl": "Oncogenes promote the division of cells with damaged parts of a person's genetic fingerprint.", "fol": "", "prediction": ["all x y.((Oncogene(x) & Cell(y) & DamagedParts(y)) -> PromotesDivision(x,y))"]}
{"id": "eqasc_train_5920", "nl": "Oncogenes promote the division of cells with damaged deoxyribonucleic acid.", "fol": "", "prediction": ["all x.(Oncogene(x) -> (PromotesDivisionOfCells(x) & DamagedDeoxyribonucleicAcid(x)))"]}
{"id": "eqasc_train_5921", "nl": "oncogenes promote the division of cells with damaged deoxyribonucleic acid", "fol": "", "prediction": ["all x y.((Oncogene(x) & Cell(y) & DamagedDeoxyribonucleicAcid(y)) -> PromotesDivision(x,y))"]}
{"id": "eqasc_train_5922", "nl": "Oncogenes An oncogene is a gene that is capable of causing cancerous change.", "fol": "", "prediction": ["all x.(Oncogene(x) -> (Gene(x) & CausesCancerousChange(x)))"]}
{"id": "eqasc_train_5923", "nl": "cancer promotes the division of cells with damaged DNA", "fol": "", "prediction": ["all x y.((Cancer(x) & Cell(y) & DamagedDNA(y)) -> PromotesDivision(x,y))"]}
{"id": "eqasc_train_5924", "nl": "Oncogenes promote the division of cells with mutation", "fol": "", "prediction": ["all x y.((Oncogene(x) & Cell(y) & Mutation(y)) -> PromotesDivision(x,y))"]}
{"id": "eqasc_train_5925", "nl": "Oncogenes are genes that promote division.", "fol": "", "prediction": ["all x.(Oncogene(x) -> PromotesDividence(x))"]}
{"id": "eqasc_train_5926", "nl": "genes that promote division do so with damaged DNA", "fol": "", "prediction": ["all x.((Gene(x) & PromotesDividence(x)) -> DamagedDNA(x))"]}
{"id": "eqasc_train_5927", "nl": "Again, oncogenes turn on cell growth.", "fol": "", "prediction": ["all x.(Oncogene(x) -> TurnsOnCellGrowth(x))"]}
{"id": "eqasc_train_5928", "nl": "turning on cell growth promotes the division of cells with damaged DNA", "fol": "", "prediction": ["all x y.((CellGrowth(x) & Cell(y) & DamagedDNA(y)) -> PromotesDivision(x,y))"]}
{"id": "eqasc_train_5929", "nl": "if a thermal conductor is exposed to a source of heat then that conductor may become hot", "fol": "", "prediction": ["all x y.((ThermalConductor(x) & ExposedToHeat(x)) -> MayBecomeHot(x))"]}
{"id": "eqasc_train_5930", "nl": "Copper is a great thermal conductor.", "fol": "", "prediction": ["all x.(Copper(x) -> GreatThermalConductor(x))"]}
{"id": "eqasc_train_5931", "nl": "if copper is exposed to a source of heat then it may become hot", "fol": "", "prediction": ["all x y.((Cuircon(x) & SourceOfHeat(y) & ExposedTo(x,y)) -> MayBecomeHot(x))"]}
{"id": "eqasc_train_5932", "nl": "Radiant heat is the way the sun heats the planet.", "fol": "", "prediction": ["all x y.((Sun(x) & Planet(y)) -> Heats(x,y))"]}
{"id": "eqasc_train_5933", "nl": "if a thermal conductor is exposed to the sun then that conductor may become hot", "fol": "", "prediction": ["all x y.((ThermalConductor(x) & ExposedToSun(x)) -> MayBecomeHot(y))"]}
{"id": "eqasc_train_5934", "nl": "Metals are also known as being good conductors of heat, or thermal conductors.", "fol": "", "prediction": ["all x.(Metal(x) -> (GoodConductorOfHeat(x) | ThermalConductorOfHeat(x)))"]}
{"id": "eqasc_train_5935", "nl": "a metal may become hot if exposed to heat", "fol": "", "prediction": ["all x.((Metal(x) & ExposedToHeat(x)) -> MayBecomeHot(x))"]}
{"id": "eqasc_train_5936", "nl": "When copper is exposed to heat, it gets hot", "fol": "", "prediction": ["all x.((Cuircon(x) & ExposedToHeat(x)) -> Hot(x))"]}
{"id": "eqasc_train_5937", "nl": "Domestic water is heated by a solar-thermal water heater.", "fol": "", "prediction": ["all x.(DomesticWater(x) -> HeatsBySolarThermalWaterHeater(x))"]}
{"id": "eqasc_train_5938", "nl": "a thermal conductor can be used to change the temperature of water", "fol": "", "prediction": ["all x y.((ThermalConductor(x) & Water(y)) -> ChangesTemperature(x,y))"]}
{"id": "eqasc_train_5939", "nl": "copper can become hot if exposed to heat", "fol": "", "prediction": ["all x.((Cuircone(x) & ExposedToHeat(x)) -> Hot(x))"]}
{"id": "eqasc_train_5940", "nl": "if copper is exposed to heat, it may become hot", "fol": "", "prediction": ["all x.((Cuir(x) & ExposedToHeat(x)) -> MayBecomeHot(x))"]}
{"id": "eqasc_train_5941", "nl": "If copper is exposed to a source of heat then that conductor may become hot", "fol": "", "prediction": ["all x y.((Copper(x) & HeatSource(y) & ExposedTo(x,y)) -> MayBecomeHot(x))"]}
{"id": "eqasc_train_5942", "nl": "if copper is exposed to a source of heat then that copper may easily become hot", "fol": "", "prediction": ["all x y.((Cuircon(x) & SourceOfHeat(y) & ExposedTo(x,y)) -> MayEasilyBecomeHot(x))"]}
{"id": "eqasc_train_5943", "nl": "chemical splashing can cause harm to humans", "fol": "", "prediction": ["all x y.((ChemicalSplashing(x) & Human(y)) -> CausesHarmTo(x,y))"]}
{"id": "eqasc_train_5944", "nl": "Grave bodily harm generally refers to crippling injuries.", "fol": "", "prediction": ["all x.(GravityBodylyHarm(x) -> (LivingInjuries(x) | ChallengingInjuries(x)))"]}
{"id": "eqasc_train_5945", "nl": "Chemical splashing can cause crippling injuries to humans.", "fol": "", "prediction": ["all x.(ChemicalSplashing(x) -> CausesLivingInjuries(x))"]}
{"id": "eqasc_train_5946", "nl": "Chemical weapons are toxic chemicals.", "fol": "", "prediction": ["all x.(ChemicalWaffen(x) -> ToxicChemicals(x))"]}
{"id": "eqasc_train_5947", "nl": "Toxic materials that splash on a human can cause harm.", "fol": "", "prediction": ["all x.((ToxicMaterial(x) & SplashOnHuman(x)) -> CanCauseHarm(x))"]}
{"id": "eqasc_train_5948", "nl": "Gardening chemicals and painting supplies are easy to spill and splash.", "fol": "", "prediction": ["all x.((GardeningChemicals(x) & PaintingSupplies(x)) -> (EasyToSplash(x) & EasyToSplash(x)))"]}
{"id": "eqasc_train_5949", "nl": "gardening and painting supplies can cause harm to humans", "fol": "", "prediction": ["all x y.((Gardening(x) & Painting(y)) -> CausesHarmToHumans(x,y))"]}
{"id": "eqasc_train_5950", "nl": "Chemical splash goggles provide maximum protection from splashes.", "fol": "", "prediction": ["all x.(ChemicalSplashGoggles(x) -> ProvidesMaximalProtectionFromSplashes(x))"]}
{"id": "eqasc_train_5951", "nl": "Goggles can prevent harm to humans", "fol": "", "prediction": ["all x.(Goggles(x) -> PreventsHarmToHumans(x))"]}
{"id": "eqasc_train_5952", "nl": "Some pain can be harmful.", "fol": "", "prediction": ["exists x.(Pain(x) & Harmful(x))"]}
{"id": "eqasc_train_5953", "nl": "chemical splashing can cause pain in humans", "fol": "", "prediction": ["all x y.((ChemicalSplashing(x) & Human(y)) -> CausesPain(x,y))"]}
{"id": "eqasc_train_5954", "nl": "Some surgical nitrile gloves offer limited splash protection from chemicals.", "fol": "", "prediction": ["exists x.(SurgicalNitrileGlove(x) & OffersLimitedSplashProtection(x))"]}
{"id": "eqasc_train_5955", "nl": "Some surgical nitrile gloves can help to prevent harm to humans.", "fol": "", "prediction": ["exists x.(SurgicalNitrileGlove(x) & HelpsPreventHarmToHumans(x))"]}
{"id": "eqasc_train_5956", "nl": "chemical splashing can cause harm to animals", "fol": "", "prediction": ["all x y.((ChemicalSplashing(x) & Animal(y)) -> CausesHarm(x,y))"]}
{"id": "eqasc_train_5957", "nl": "chemical splashing can cause pain to humans", "fol": "", "prediction": ["all x y.((ChemicalSplashing(x) & Human(y)) -> CausesPainTo(x,y))"]}
{"id": "eqasc_train_5958", "nl": "Chemical splash goggles are advised.", "fol": "", "prediction": ["all x.(ChemicalSplashGoggles(x) -> Advised(x))"]}
{"id": "eqasc_train_5959", "nl": "Goggles can prevent harm to humans.", "fol": "", "prediction": ["all x.(Goggles(x) -> PreventsHarmToHumans(x))"]}
{"id": "eqasc_train_5960", "nl": "Sulfuric acid is a highly corrosive chemical.", "fol": "", "prediction": ["all x.(SulfuricAcid(x) -> HighlyCorrosiveChemical(x))"]}
{"id": "eqasc_train_5961", "nl": "sulfuric acid splashing can cause harm to humans", "fol": "", "prediction": ["all x.(SulfuricAcidSplashing(x) -> CausesHarmToHumans(x))"]}
{"id": "eqasc_train_5962", "nl": "Man is human, subject to error.", "fol": "", "prediction": ["all x.(Man(x) -> Human(x))"]}
{"id": "eqasc_train_5963", "nl": "Chemical splashing can cause harm to man.", "fol": "", "prediction": ["all x.(ChemicalSplashing(x) -> CausesHarmToMan(x))"]}
{"id": "eqasc_train_5964", "nl": "Ozone is harmful to humans and crops.", "fol": "", "prediction": ["all x.(Ozone(x) -> (HarmfulToHumans(x) & HarmfulToCrops(x)))"]}
{"id": "eqasc_train_5965", "nl": "Chemicals can harm crops.", "fol": "", "prediction": ["all x.(Chemical(x) -> CanHarmCrops(x))"]}
{"id": "eqasc_train_5966", "nl": "Any chemical splash in the eye can be dangerous.", "fol": "", "prediction": ["all x.(ChemicalSplash(x) -> Dangerous(x))"]}
{"id": "eqasc_train_5967", "nl": "Chemicals are dangerous to the eyes.", "fol": "", "prediction": ["all x.(Chemical(x) -> DangerousToEyes(x))"]}
{"id": "eqasc_train_5968", "nl": "Human embryos are fully human.", "fol": "", "prediction": ["all x.(HumanEmbryo(x) -> FullyHuman(x))"]}
{"id": "eqasc_train_5969", "nl": "Chemical splashing can harm embryos.", "fol": "", "prediction": ["all x.(ChemicalSplashing(x) -> CanHarmEmbryos(x))"]}
{"id": "eqasc_train_5970", "nl": "Toxins are chemicals that are extremely poisonous.", "fol": "", "prediction": ["all x.(Toxin(x) -> (Chemical(x) & ExtremelyPoisonous(x)))"]}
{"id": "eqasc_train_5971", "nl": "Toxins splashing can cause harm to humans", "fol": "", "prediction": ["all x.(ToxinSplashing(x) -> CausesHarmToHumans(x))"]}
{"id": "eqasc_train_5972", "nl": "Most carcinogens cause cancer by producing mutations in DNA.", "fol": "", "prediction": ["all x.(CausesCancer(x) -> (CausesCancer(x) & ProducesMutationInDNA(x)))"]}
{"id": "eqasc_train_5973", "nl": "Asbestos is a known carcinogen.", "fol": "", "prediction": ["all x.(Asbestos(x) -> Carcinogen(x))"]}
{"id": "eqasc_train_5974", "nl": "asbestos causes cancer by producing mutations in DNA", "fol": "", "prediction": ["all x.(Asbestos(x) -> CausesCancerByProducingMutationInDNA(x))"]}
{"id": "eqasc_train_5975", "nl": "Asbestos is a dangerous carcinogen.", "fol": "", "prediction": ["all x.(Asbestos(x) -> DangerousCarcinogen(x))"]}
{"id": "eqasc_train_5976", "nl": "Asbestos causes cancer", "fol": "", "prediction": ["all x.(Asbestos(x) -> CausesCancer(x))"]}
{"id": "eqasc_train_5977", "nl": "If it causes changes in DNA, it is considered a mutagen, or potential carcinogen.", "fol": "", "prediction": ["all x.((CausesDNAChanges(x) & Mutagen(x)) | PotentialCarcinogen(x))"]}
{"id": "eqasc_train_5978", "nl": "mutagens cause mutations in DNA", "fol": "", "prediction": ["all x.(Mutagen(x) -> CausesMutagens(x))"]}
{"id": "eqasc_train_5979", "nl": "Cancer can cause death.", "fol": "", "prediction": ["all x.(Cancer(x) -> CausesDeath(x))"]}
{"id": "eqasc_train_5980", "nl": "carcinogens can cause death", "fol": "", "prediction": ["all x.(CausesDeath(x) -> Carcinogen(x))"]}
{"id": "eqasc_train_5981", "nl": "Jet fuels are carcinogens.", "fol": "", "prediction": ["all x.(JetFuel(x) -> Carcinogen(x))"]}
{"id": "eqasc_train_5982", "nl": "jet fuels can cause cancer by producing mutations in DNA.", "fol": "", "prediction": ["all x.(JetFuel(x) -> CausesCancerByProducingMutationsInDNA(x))"]}
{"id": "eqasc_train_5983", "nl": "Jet fuels mutate organisms", "fol": "", "prediction": ["all x y.((JetFuel(x) & Organism(y)) -> Mutates(x,y))"]}
{"id": "eqasc_train_5984", "nl": "Mutations are changes in the DNA sequence.", "fol": "", "prediction": ["all x.(Mutations(x) -> ChangesInDNASequence(x))"]}
{"id": "eqasc_train_5985", "nl": "Most carcinogens cause cancer by producing changes in the DNA sequence", "fol": "", "prediction": ["all x.(CausesCancer(x) -> (CausesCancer(x) & ProducesDNAChanges(x)))"]}
{"id": "eqasc_train_5986", "nl": "Most carcinogens cause cancer by producing mutations in dexyribonuclein acid.", "fol": "", "prediction": ["all x.(CausesCancer(x) -> (CausesCancer(x) & ProducesMutationInDexyribonucleinAcid(x)))"]}
{"id": "eqasc_train_5987", "nl": "Smoke is full of carcinogens.", "fol": "", "prediction": ["all x.(Smoke(x) -> FullOfCarcinogens(x))"]}
{"id": "eqasc_train_5988", "nl": "smoke can cause cancer by producing mutations in DNA.", "fol": "", "prediction": ["all x.(Smoke(x) -> CausesCancerByProducingMutationsInDNA(x))"]}
{"id": "eqasc_train_5989", "nl": "Lung cancer is the deadliest of all cancers.", "fol": "", "prediction": ["all x.(LungCancer(x) -> DeadliestOfAllCancers(x))"]}
{"id": "eqasc_train_5990", "nl": "carcinogens cause production of mutations in DNA  of areas such as lungs", "fol": "", "prediction": ["all x y.((CausesMutation(x) & DNAArea(y)) -> (CausesMutation(x,y) & CausesMutation(x,y)))"]}
{"id": "eqasc_train_5991", "nl": "most carcinogens cause cancer by producing mutations in deoxyribonucleic acid", "fol": "", "prediction": ["all x.((CausesCancer(x) & ProducesMutation(x,deoxyribonucleicAcid)) -> MostCarcinogensCausesCancer(x))"]}
{"id": "eqasc_train_5992", "nl": "a tape measure is used to measure length", "fol": "", "prediction": ["all x y.((TapeMeasure(x) & TapeMeasure(y)) -> MeasuresLength(x,y))"]}
{"id": "eqasc_train_5993", "nl": "Measurements are taken in inches with a tape measure.", "fol": "", "prediction": ["all x.(Measurement(x) -> TakenInInches(x))"]}
{"id": "eqasc_train_5994", "nl": "length is measured in inches", "fol": "", "prediction": ["all x.(Length(x) -> MeasuredInInches(x))"]}
{"id": "eqasc_train_5995", "nl": "a tape measure is used to measure distance", "fol": "", "prediction": ["all x y.((TapeMeasure(x) & TapeMeasure(y)) -> MeasuresDistance(x,y))"]}
{"id": "eqasc_train_5996", "nl": "Meters measure length.", "fol": "", "prediction": ["all x.(Meter(x) -> MeasuresLength(x))"]}
{"id": "eqasc_train_5997", "nl": "a tape measure can measure meters", "fol": "", "prediction": ["all x.(TapeMeasure(x) -> MeasuresMeters(x))"]}
{"id": "eqasc_train_5998", "nl": "A tape measure can be used to measure distance.", "fol": "", "prediction": ["all x.(TapeMeasure(x) -> MeasuresDistance(x))"]}
{"id": "eqasc_train_5999", "nl": "A tape measure is used to measure distance.", "fol": "", "prediction": ["all x.(TapeMeasure(x) -> MeasuresDistance(x))"]}
{"id": "eqasc_train_6000", "nl": "Lengths are given in centimeters.", "fol": "", "prediction": ["all x.(Length(x) -> GivenInCentrics(x))"]}
{"id": "eqasc_train_6001", "nl": "A tape measure reports centimeters.", "fol": "", "prediction": ["all x.(TapeMeasure(x) -> ReportsCentrices(x))"]}
{"id": "eqasc_train_6002", "nl": "Tape measure is required to measure distance.", "fol": "", "prediction": ["all x.(TapeMeasure(x) -> MeasuresDistance(x))"]}
{"id": "eqasc_train_6003", "nl": "length is determined with a measure", "fol": "", "prediction": ["all x y.((Measure(x) & Measure(y)) -> DeterminesLength(x,y))"]}
{"id": "eqasc_train_6004", "nl": "With a tape measure, find the dimensions of the room.", "fol": "", "prediction": ["all x.((TapeMeasure(x) & Room(y)) -> FindDimensions(x,y))"]}
{"id": "eqasc_train_6005", "nl": "measure length to find the dimensions of the room", "fol": "", "prediction": ["all x y.((MeasureLength(x) & Room(y)) -> FindDimensions(x,y))"]}
{"id": "eqasc_train_6006", "nl": "Linear Measure Linear measure is used in determining distances and lengths, widths or thicknesses.", "fol": "", "prediction": ["all x.(LinearMeasure(x) -> (DeterminesDistances(x) | DeterminesLengths(x) | DeterminesWides(x) | DeterminesThicknesses(x)))"]}
{"id": "eqasc_train_6007", "nl": "A tape measure is used to measure distances.", "fol": "", "prediction": ["all x.(TapeMeasure(x) -> MeasuresDistances(x))"]}
{"id": "eqasc_train_6008", "nl": "For the square, the side is of length x.", "fol": "", "prediction": ["all x.(Square(x) -> SideLength(x))"]}
{"id": "eqasc_train_6009", "nl": "A tape measure is used to measure the side of a square", "fol": "", "prediction": ["all x y.((TapeMeasure(x) & Square(y)) -> MeasuresSideOf(x,y))"]}
{"id": "eqasc_train_6010", "nl": "Length The Base unit for length in the metric system is the meter .", "fol": "", "prediction": ["all x.((BaseUnit(x) & MetricSystem(x)) -> Meter(x))"]}
{"id": "eqasc_train_6011", "nl": "a tape measure is used to measure what uses the base unit in the metric system is the meter .", "fol": "", "prediction": ["all x y.((TapeMeasure(x) & Measures(x,y)) -> UsesBaseUnit(x,y))"]}
{"id": "eqasc_train_6012", "nl": "Length is how long something is.", "fol": "", "prediction": ["all x.(Length(x) -> Long(x))"]}
{"id": "eqasc_train_6013", "nl": "A tape measure is used to see how long something is", "fol": "", "prediction": ["all x y.((TapeMeasure(x) & Measure(y)) -> UsedToSeeHowLong(x,y))"]}
{"id": "eqasc_train_6014", "nl": "a tape measure is used to measure how long something is.", "fol": "", "prediction": ["all x.(TapeMeasure(x) -> MeasuresHowLong(x))"]}
{"id": "eqasc_train_6015", "nl": "All lengths shown are in inches.", "fol": "", "prediction": ["all x.(Length(x) -> InInches(x))"]}
{"id": "eqasc_train_6016", "nl": "a tape measure is used to measure inches", "fol": "", "prediction": ["all x y.((TapeMeasure(x) & TapeMeasure(y)) -> MeasuresInches(x,y))"]}
{"id": "eqasc_train_6017", "nl": "Measure of length is by meter and land measure by hectares.", "fol": "", "prediction": ["all x y.((MeasuresLength(x) & MeasuresLength(y)) -> (Meter(x) & Land(y) & Hectare(y)))"]}
{"id": "eqasc_train_6018", "nl": "a tape measure is used to measure meters", "fol": "", "prediction": ["all x y.((TapeMeasure(x) & Meter(y)) -> Measures(x,y))"]}
{"id": "eqasc_train_6019", "nl": "All sizes are total length.", "fol": "", "prediction": ["all x.(Size(x) -> TotalLength(x))"]}
{"id": "eqasc_train_6020", "nl": "a tape measure is used to measure all sizes", "fol": "", "prediction": ["all x y.((TapeMeasure(x) & Size(y)) -> MeasuresAllSizes(x,y))"]}
{"id": "eqasc_train_6021", "nl": "an animal requires nutrients for survival", "fol": "", "prediction": ["all x.((Animal(x) & RequiresNutrients(x)) -> Survival(x))"]}
{"id": "eqasc_train_6022", "nl": "Animals and humans eat plants for their nutrients.", "fol": "", "prediction": ["all x y.((Animal(x) & Human(y)) -> EatsPlants(x,y))"]}
{"id": "eqasc_train_6023", "nl": "Animals and humans need to eat plants to survive", "fol": "", "prediction": ["all x y z.((Animal(x) & Human(y) & Plant(z)) -> (NeedsToEat(x,z) & Survives(x,z)))"]}
{"id": "eqasc_train_6024", "nl": "humans require nutrients for survival", "fol": "", "prediction": ["all x.(Human(x) -> RequiresNutrientsForSurvival(x))"]}
{"id": "eqasc_train_6025", "nl": "Water is the most important nutrient for animals and humans.", "fol": "", "prediction": ["all x.(Water(x) -> (ImportantNutrient(x) & ImportantForAnimals(x) & ImportantForHumans(x)))"]}
{"id": "eqasc_train_6026", "nl": "An animal requires water for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresWaterForSurvival(x))"]}
{"id": "eqasc_train_6027", "nl": "Food is the ideal source of nutrients.", "fol": "", "prediction": ["all x.(Food(x) -> IdealNutrientSource(x))"]}
{"id": "eqasc_train_6028", "nl": "an animal requires food for survival", "fol": "", "prediction": ["all x.((Animal(x) & RequiresFood(x)) -> Survival(x))"]}
{"id": "eqasc_train_6029", "nl": "An animal requires plants for survival. ", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresPlantsForSurvival(x))"]}
{"id": "eqasc_train_6030", "nl": "Animals acquire nutrients by ingestion.", "fol": "", "prediction": ["all x.(Animal(x) -> AcquiresNutrientsByIngestion(x))"]}
{"id": "eqasc_train_6031", "nl": "animals use ingestion to survive", "fol": "", "prediction": ["all x.(Animal(x) -> UsesIngestionToSurvive(x))"]}
{"id": "eqasc_train_6032", "nl": "Digestion is important for an animal's survival", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> DigestionIsImportantForSurvival(x,y))"]}
{"id": "eqasc_train_6033", "nl": "Potassium is important for an animal to survive", "fol": "", "prediction": ["all x y.((Animal(x) & Potassium(y)) -> ImportantForSurvival(x,y))"]}
{"id": "eqasc_train_6034", "nl": "hydropower requires damming a river", "fol": "", "prediction": ["all x y.((Hydropower(x) & River(y)) -> Damms(x,y))"]}
{"id": "eqasc_train_6035", "nl": "Hoover Dam, the first dam on the Colorado River below Grand Canyon, was built between 1931 and 1935.", "fol": "", "prediction": ["(FirstDamOnColoradoRiverBelowGrandCanyon(HooverDam) & BuiltBetween1931And1935(HooverDam))"]}
{"id": "eqasc_train_6036", "nl": "Hoover Dam produces hydropower", "fol": "", "prediction": ["all x.(HooverDam(x) -> ProducesHydropower(x))"]}
{"id": "eqasc_train_6037", "nl": "Rivers are dammed to create reservoirs and hydroelectric power.", "fol": "", "prediction": ["all x.(River(x) -> DammedToCreateReservoirsAndHydroelectricPower(x))"]}
{"id": "eqasc_train_6038", "nl": "A byproduct of hydropower are resevoirs", "fol": "", "prediction": ["all x.((ByproductOfHydropower(x) & Resevoir(x)) -> Hydropower(x))"]}
{"id": "eqasc_train_6039", "nl": "Scientists agree that dams devastate rivers.", "fol": "", "prediction": ["all x y.((Scientist(x) & Dam(y)) -> DevastatesRivers(x,y))"]}
{"id": "eqasc_train_6040", "nl": "Hydropower can devastate rivers ", "fol": "", "prediction": ["all x.(Hydropower(x) -> DevastateRivers(x))"]}
{"id": "eqasc_train_6041", "nl": "Hydropower is a renewable, economical source of electricity.", "fol": "", "prediction": ["all x.(Hydropower(x) -> (RenewableEconomicSourceOfElectricity(x) & EconomicSourceOfElectricity(x)))"]}
{"id": "eqasc_train_6042", "nl": "a renewable, economical source of electricity requires damming a river", "fol": "", "prediction": ["all x y.((RenewableEconomicSourceOfElectricity(x) & River(y) & Damms(x,y)) -> Requires(x,y))"]}
{"id": "eqasc_train_6043", "nl": "Streams and rivers are crossed on rocks, beaver dams, on fallen trees or by wading.", "fol": "", "prediction": ["all x y.((Stream(x) & River(y)) -> (CrossedOnRocks(x) | CrossedOnBeaverDams(x) | CrossedOnFallenTrees(x) | CrossedByWading(x)))"]}
{"id": "eqasc_train_6044", "nl": "Hydropower requires beavers damming streams with fallen trees.", "fol": "", "prediction": ["all x y.((Hydropower(x) & Beaver(y)) -> DammsStreamsWithFallenTrees(y,x))"]}
{"id": "eqasc_train_6045", "nl": "Another source of energy is hydropower.", "fol": "", "prediction": ["all x.((SourceOfEnergy(x) & Hydropower(x)) -> SourceOfEnergy(x))"]}
{"id": "eqasc_train_6046", "nl": "damming a river is a source of energy", "fol": "", "prediction": ["all x y.((River(x) & Damming(x,y)) -> SourceOfEnergy(x))"]}
{"id": "eqasc_train_6047", "nl": "Damming a river can provide a renewable resource.", "fol": "", "prediction": ["all x y.((River(x) & Damming(x,y)) -> ProvidesRenewableResource(x))"]}
{"id": "eqasc_train_6048", "nl": "Many dams along rivers and creeks help prevent floods.", "fol": "", "prediction": ["all x y.((Dam(x) & River(y) & Creek(y)) -> HelpsPreventFloods(x,y))"]}
{"id": "eqasc_train_6049", "nl": "Hydropower requires helping to prevent floods.", "fol": "", "prediction": ["all x.(Hydropower(x) -> RequiresHelpingPreventFloods(x))"]}
{"id": "eqasc_train_6050", "nl": "hydropower requires devastating a river", "fol": "", "prediction": ["all x y.((Hydropower(x) & River(y)) -> RequiresDevastating(x,y))"]}
{"id": "eqasc_train_6051", "nl": "conserving water can be used for survival in a dry environment", "fol": "", "prediction": ["all x y.((ConservingWater(x) & DryEnvironment(y)) -> CanBeUsedForSurvival(x,y))"]}
{"id": "eqasc_train_6052", "nl": "We learned about desert plants and how they adapt themselves to the hot dry desert environment so they can survive.", "fol": "", "prediction": ["all x y.((DesertPlant(x) & HotDryDesertEnvironment(y)) -> AdaptsTo(x,y))"]}
{"id": "eqasc_train_6053", "nl": "Desert plants conserve water to survive in the desert", "fol": "", "prediction": ["all x y.((DesertPlant(x) & Desert(y)) -> ConservesWaterToSurvive(x,y))"]}
{"id": "eqasc_train_6054", "nl": "By definition, deserts are dry areas.", "fol": "", "prediction": ["all x.(Desert(x) -> DryArea(x))"]}
{"id": "eqasc_train_6055", "nl": "conserving water can be used for survival in the desert", "fol": "", "prediction": ["all x.(ConservingWater(x) -> CanBeUsedForSurvivalInDesert(x))"]}
{"id": "eqasc_train_6056", "nl": "Deserts are hot, dry places.", "fol": "", "prediction": ["all x.(Desert(x) -> (Hot(x) & Dry(x)))"]}
{"id": "eqasc_train_6057", "nl": "conserving water can be used for survival in deserts", "fol": "", "prediction": ["all x y.((ConservingWater(x) & Desert(y)) -> CanBeUsedForSurvival(x,y))"]}
{"id": "eqasc_train_6058", "nl": "Plants survive with the help of water.", "fol": "", "prediction": ["all x.(Plant(x) -> SurvivesWithWater(x))"]}
{"id": "eqasc_train_6059", "nl": "plants conserve water", "fol": "", "prediction": ["all x.(Plant(x) -> ConservesWater(x))"]}
{"id": "eqasc_train_6060", "nl": "Also, camels conserve their water.", "fol": "", "prediction": ["all x.(Camel(x) -> ConservesWater(x))"]}
{"id": "eqasc_train_6061", "nl": "camels hoard water to survive", "fol": "", "prediction": ["all x.(Camel(x) -> (HasWater(x) & Survives(x)))"]}
{"id": "eqasc_train_6062", "nl": "Water conservation saves money and energy.", "fol": "", "prediction": ["all x.(WaterConservation(x) -> (SavesMoney(x) & SavesEnergy(x)))"]}
{"id": "eqasc_train_6063", "nl": "Saving water can be used for survival in a dry environment.", "fol": "", "prediction": ["all x.((SavingWater(x) & DryEnvironment(x)) -> UsedForSurvival(x))"]}
{"id": "eqasc_train_6064", "nl": "Survival is the continuance of individual and species life.", "fol": "", "prediction": ["all x.(Survival(x) -> (ContinuationOfIndividualLife(x) & ConsistentOfSpeciesLife(x)))"]}
{"id": "eqasc_train_6065", "nl": "Conserving water can be used for the continuance of life in a dry environment.", "fol": "", "prediction": ["all x.(ConservingWater(x) -> CanBeUsedForContinuationOfLife(x))"]}
{"id": "eqasc_train_6066", "nl": "Most of the southwest is semi desert and very dry.", "fol": "", "prediction": ["all x.(SwissWidewest(x) -> (SemiDesert(x) & VeryDry(x)))"]}
{"id": "eqasc_train_6067", "nl": "conserving water can be used for survival in a desert", "fol": "", "prediction": ["all x y.((ConservingWater(x) & Desert(y)) -> CanBeUsedForSurvival(x,y))"]}
{"id": "eqasc_train_6068", "nl": "Deserts are usually very, very dry.", "fol": "", "prediction": ["all x.(Desert(x) -> (VeryDry(x) & VeryDry(x)))"]}
{"id": "eqasc_train_6069", "nl": "Cactuses exemplify water conservation.", "fol": "", "prediction": ["all x.(Cactus(x) -> WaterConservation(x))"]}
{"id": "eqasc_train_6070", "nl": "Cacti exemplify surviving in a dry environment", "fol": "", "prediction": ["all x.(Cactus(x) -> SurvivesInDryEnvironment(x))"]}
{"id": "eqasc_train_6071", "nl": "camels survive in a dry environment", "fol": "", "prediction": ["all x.(Camel(x) -> SurvivesInDryEnvironment(x))"]}
{"id": "eqasc_train_6072", "nl": "Many cacti have corrugated stems which can expand quickly if water becomes available.", "fol": "", "prediction": ["all x.(Cactus(x) -> (CorrugatedStems(x) & ExpandsQuickly(x) & WaterBecomesAvailable(x)))"]}
{"id": "eqasc_train_6073", "nl": "Expandable stems help many cacti survive in dry environments", "fol": "", "prediction": ["all x y.((Cactus(x) & ExpandableStems(x)) -> HelpsSurviveInDryEnvironments(x,y))"]}
{"id": "eqasc_train_6074", "nl": "Many plants have developed unique leaf adaptations in order to conserve water.", "fol": "", "prediction": ["all x.((Plant(x) & UniqueLeafAdaptations(x)) -> ConservesWater(x))"]}
{"id": "eqasc_train_6075", "nl": "Unique leaf adaptations have enabled many plants to survive in dry environments.", "fol": "", "prediction": ["all x y.((UniqueLeafAdaptation(x) & Plant(y)) -> EnabledSurvivalInDryEnvironments(y))"]}
{"id": "eqasc_train_6076", "nl": "Climate too dry, making the environment arid and inhospitable.", "fol": "", "prediction": ["all x.((Climate(x) & TooDry(x)) -> (Arid(x) & Inhospitable(x)))"]}
{"id": "eqasc_train_6077", "nl": "conserving water can be used for survival in arid locales", "fol": "", "prediction": ["all x y.((ConservingWater(x) & AridLocales(y)) -> CanBeUsedForSurvival(x,y))"]}
{"id": "eqasc_train_6078", "nl": "Conservation of water follows conservation of sodium.", "fol": "", "prediction": ["all x.((Water(x) & Soda(y)) -> Follows(x,y))"]}
{"id": "eqasc_train_6079", "nl": "conserving sodium. can be used for survival in a dry environment", "fol": "", "prediction": ["all x.((Salt(x) & DryEnvironment(x)) -> CanBeUsedForSurvival(x))"]}
{"id": "eqasc_train_6080", "nl": "photosynthesis means producers convert from carbon dioxide, water, and solar energy into carbohydrates for themselves", "fol": "", "prediction": ["all x y z.((Producer(x) & CarbonDioxide(y) & Water(z) & SolarEnergy(x)) -> ConvertsToCarbohydrates(x,y,z))"]}
{"id": "eqasc_train_6081", "nl": "Photosynthesis and cellular respiration are life-sustaining plant processes.", "fol": "", "prediction": ["all x.((Photosynthesis(x) | CellularRespiration(x)) -> LifeSupportingPlantProcess(x))"]}
{"id": "eqasc_train_6082", "nl": "life-sustaining plant processes convert carbon dioxide, water and solar energy into carbohydrates.", "fol": "", "prediction": ["all x.((PlantProcess(x) & CarbonDioxide(x) & Water(x) & SolarEnergy(x)) -> Carbohydrates(x))"]}
{"id": "eqasc_train_6083", "nl": "Primary producers convert solar energy into chemical energy.", "fol": "", "prediction": ["all x y.((PrimaryProducer(x) & SolarEnergy(y)) -> ConvertsToChemicalEnergy(x,y))"]}
{"id": "eqasc_train_6084", "nl": "Primary producers utilize photosynthesis for chemical energy ", "fol": "", "prediction": ["all x y z.((PrimaryProducer(x) & Photosynthesis(y) & ChemicalEnergy(z)) -> UtilizesFor(x,y,z))"]}
{"id": "eqasc_train_6085", "nl": "Green plants are producers .", "fol": "", "prediction": ["all x.(GreenPlant(x) -> Producer(x))"]}
{"id": "eqasc_train_6086", "nl": "photosynthesis means plants convert from carbon dioxide, water, and solar energy into carbohydrates for themselves", "fol": "", "prediction": ["all x y z.((Plant(x) & CarbonDioxide(y) & Water(z) & SolarEnergy(x)) -> Photosynthesis(x))"]}
{"id": "eqasc_train_6087", "nl": "Photosynthesis is the conversion of electromagnetic energy into stored chemical energy.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> ConversionOfElectromagneticEnergyToStoredChemicalEnergy(x))"]}
{"id": "eqasc_train_6088", "nl": "Conversion of eletromagnetic energy into carbohydrates creates a stored chemical energy", "fol": "", "prediction": ["all x y z.((ConversionOfElectromagneticEnergy(x) & Carbohydrates(y) & EletromagneticEnergy(z)) -> CreatesStoredChemicalEnergy(x,y,z))"]}
{"id": "eqasc_train_6089", "nl": "Producers are organisms, such as green plants, that convert light energy into food.", "fol": "", "prediction": ["all x.(Producer(x) -> (Organism(x) & (GreenPlant(x) | GreenPlant(x)) & ConvertsLightEnergy(x)))"]}
{"id": "eqasc_train_6090", "nl": "green plants convert carbon dioxide, water, and solar energy into carbohydrates for themselves", "fol": "", "prediction": ["all x.(GreenPlant(x) -> (ConvertsCarbonDioxideWaterSolarEnergy(x) & CarbonDioxideWaterSolarEnergyToCarbohydrates(x) & ForCarbohydrates(x)))"]}
{"id": "eqasc_train_6091", "nl": "Leaf cells produce sugar by photosynthesis.", "fol": "", "prediction": ["all x.(LeafCell(x) -> ProducesSugarByPhotosynthesis(x))"]}
{"id": "eqasc_train_6092", "nl": "Sugar is produced by leaf cells as a carbohydrate by producers.", "fol": "", "prediction": ["all x y.((Sugar(x) & LeafCell(y)) -> ProducedByProducers(x,y))"]}
{"id": "eqasc_train_6093", "nl": "Chloroplasts are the site of photosynthesis in plants only.", "fol": "", "prediction": ["all x.(Chloroplast(x) -> PhotosynthesisSite(x))"]}
{"id": "eqasc_train_6094", "nl": "chloroplasts are where producers convert from carbon dioxide, water, and solar energy into carbohydrates for themselves", "fol": "", "prediction": ["all x y z.((Chlorophyll(x) & Producer(y) & CarbonDioxide(z) & Water(z) & SolarEnergy(z)) -> ConvertsToCarbohydrates(y,z))"]}
{"id": "eqasc_train_6095", "nl": "Fish are the consumers, and plants are the producers.", "fol": "", "prediction": ["(all x.(Fish(x) -> Consumer(x)) & all y.(Plant(y) -> Producer(y)))"]}
{"id": "eqasc_train_6096", "nl": "In photosynthesis, plants convert carbon dioxide, water and solar energy into carbohydrates.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideWaterSolarEnergy(x) & CarbonDioxideWaterSolarEnergy(x)))"]}
{"id": "eqasc_train_6097", "nl": "Plants create their own carbohydrates through photosynthesis", "fol": "", "prediction": ["all x y.((Plant(x) & Carbohydrate(y)) -> Creates(x,y))"]}
{"id": "eqasc_train_6098", "nl": "photosynthesis means plants convert from carbon dioxide, water, and solar energy into carbohydrates", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideWaterSolarEnergy(x) & CarbonDioxideWaterSolarEnergy(x) & Carbohydrates(x)))"]}
{"id": "eqasc_train_6099", "nl": "photosynthesis means green plants convert from carbon dioxide, water, and solar energy into carbohydrates for themselves", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (GreenPlantsConvertFromCarbonDioxideWaterSolarEnergy(x) & CarbonDioxideWaterSolarEnergy(x) & CarbohydratesForSelf(x)))"]}
{"id": "eqasc_train_6100", "nl": "Photosynthesis is the chemical change that produces food and oxygen in green plants.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (ProducesFood(x) & ProducesOxygen(x) & InGreenPlants(x)))"]}
{"id": "eqasc_train_6101", "nl": "Photosynthetic plants convert solar energy to chemical bond energy in carbohydrates.", "fol": "", "prediction": ["all x.(PhotosyntheticPlant(x) -> ConvertsSolarEnergyToChemicalBondEnergy(x))"]}
{"id": "eqasc_train_6102", "nl": "Photosynthesis converts solar energy into chemical bond energy for themselves.", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & SolarEnergy(y)) -> ConvertsToChemicalBondEnergy(x,y))"]}
{"id": "eqasc_train_6103", "nl": "Water is released by the processes of photosynthesis and respiration.", "fol": "", "prediction": ["all x.(Water(x) -> (Photosynthesis(x) | Respiration(x)))"]}
{"id": "eqasc_train_6104", "nl": "energy conversion releases water", "fol": "", "prediction": ["all x.(EnergyConversion(x) -> ReleasesWater(x))"]}
{"id": "eqasc_train_6105", "nl": "Photosynthesis is the chief function of leaves.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> ChiefFunctionOfLeaves(x))"]}
{"id": "eqasc_train_6106", "nl": "Plants require leaves to form carbohydrates. ", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresLeaves(x))"]}
{"id": "eqasc_train_6107", "nl": "Viruses infect and live inside the cells of living organisms.", "fol": "", "prediction": ["all x y.((Virus(x) & LivingOrganism(y)) -> InfectsAndLivesInCells(x,y))"]}
{"id": "eqasc_train_6108", "nl": "An infection is an illness caused by the invasion of a virus or microorganism.", "fol": "", "prediction": ["all x.(Infection(x) -> (Infection(x) & CausedByInvasionOfVirusOrMicroorganism(x)))"]}
{"id": "eqasc_train_6109", "nl": "Microorganisms cause illness inside of the cells of living organisms", "fol": "", "prediction": ["all x y.((Microorganism(x) & LivingOrganism(y)) -> CausesIllnessInCells(x,y))"]}
{"id": "eqasc_train_6110", "nl": "viruses infect and live inside the cells of life.", "fol": "", "prediction": ["all x.(Virus(x) -> (InfectsCells(x) & LivesInCells(x)))"]}
{"id": "eqasc_train_6111", "nl": "Yeast is a living organism.", "fol": "", "prediction": ["all x.(Yeast(x) -> LivingOrganism(x))"]}
{"id": "eqasc_train_6112", "nl": "Viruses can infect and live inside the cells of yeast", "fol": "", "prediction": ["all x y.((Virus(x) & Yay(y)) -> (Infects(x,y) & LivesInCells(x,y)))"]}
{"id": "eqasc_train_6113", "nl": "viruses infect and live inside the cells of humans", "fol": "", "prediction": ["all x y.((Virus(x) & Human(y)) -> InfectsAndLivesInCells(x,y))"]}
{"id": "eqasc_train_6114", "nl": "Pathogenic organisms that live inside cells have a neat adaptation.", "fol": "", "prediction": ["all x.((PathogenicOrganism(x) & LivesInsideCells(x)) -> HasSnapAdaptation(x))"]}
{"id": "eqasc_train_6115", "nl": "Viruses are pathogenic organisms", "fol": "", "prediction": ["all x.(Virus(x) -> PathogenicOrganism(x))"]}
{"id": "eqasc_train_6116", "nl": "viruses infect animals", "fol": "", "prediction": ["all x y.((Virus(x) & Animal(y)) -> Infects(x,y))"]}
{"id": "eqasc_train_6117", "nl": "Plants are complex living organisms.", "fol": "", "prediction": ["all x.(Plant(x) -> ComplexLivingOrganism(x))"]}
{"id": "eqasc_train_6118", "nl": "Viruses infect and live inside the cells of plants.", "fol": "", "prediction": ["all x y.((Virus(x) & Plant(y)) -> (Infects(x,y) & LivesInCell(x,y)))"]}
{"id": "eqasc_train_6119", "nl": "influenza can infect and live inside the cells of living organisms", "fol": "", "prediction": ["all x y.((Influenza(x) & LivingOrganism(y)) -> (Infects(x,y) & LivesInCells(x,y)))"]}
{"id": "eqasc_train_6120", "nl": "If the virus is nonenveloped it is released by lysing the host cell.", "fol": "", "prediction": ["all x.((Virus(x) & Nonenveloped(x)) -> ReleasedByLysing(x))"]}
{"id": "eqasc_train_6121", "nl": "Infection by viruses leads to lysing and release.", "fol": "", "prediction": ["all x.(InfectionByViruses(x) -> (LeadsToLysing(x) & LeadsToRelease(x)))"]}
{"id": "eqasc_train_6122", "nl": "Mammals can also generate little bursts of heat by shivering.", "fol": "", "prediction": ["all x.(Mammal(x) -> (GeneratesLittleBurstsOfHeat(x) & Shivers(x)))"]}
{"id": "eqasc_train_6123", "nl": "Mammals can generate little bursts of energy by shivering.", "fol": "", "prediction": ["all x.(Mammal(x) -> GeneratesLittleBurstsOfEnergyByShivering(x))"]}
{"id": "eqasc_train_6124", "nl": "Polar bears are mammals.", "fol": "", "prediction": ["all x.(PolarBear(x) -> Mammal(x))"]}
{"id": "eqasc_train_6125", "nl": "Polar bears can generate heat by shivering.", "fol": "", "prediction": ["all x.(PolarBear(x) -> GeneratesHeatByShivering(x))"]}
{"id": "eqasc_train_6126", "nl": "Shivering costs the bird, however, by depleting energy stores.", "fol": "", "prediction": ["all x.(Shivering(x) -> (CostsBird(x) & DepletesEnergyStores(x)))"]}
{"id": "eqasc_train_6127", "nl": "mammals can generate heat by depleting energy stores", "fol": "", "prediction": ["all x.(Mammal(x) -> (GeneratesHeat(x) & DepletesEnergyStores(x)))"]}
{"id": "eqasc_train_6128", "nl": "humans can generate little bursts of heat by shivering", "fol": "", "prediction": ["all x.(Human(x) -> (GeneratesLittleBurstsOfHeat(x) & Shivers(x)))"]}
{"id": "eqasc_train_6129", "nl": "Heat is produced by muscle action and shivering.", "fol": "", "prediction": ["all x.(Heat(x) -> (MuscleAction(x) & Shivering(x)))"]}
{"id": "eqasc_train_6130", "nl": "Mammals can generate heat with their muscles", "fol": "", "prediction": ["all x.(Mammal(x) -> GeneratesHeatWithMuscles(x))"]}
{"id": "eqasc_train_6131", "nl": "Intense shivering and severe pain are natural body reflexes to cold water.", "fol": "", "prediction": ["all x.((IntenseShivering(x) & SeverePain(x)) -> NaturalBodyReflexesToColdWater(x))"]}
{"id": "eqasc_train_6132", "nl": "Mammals can also generate little bursts of heat using natural body reflexes to cold water", "fol": "", "prediction": ["all x.(Mammal(x) -> (GeneratesLittleBurstsOfHeat(x) & UsesNaturalBodyReflexesToColdWater(x)))"]}
{"id": "eqasc_train_6133", "nl": "mammals use thermogenesis for heat", "fol": "", "prediction": ["all x.(Mammal(x) -> UsesThermogenesisForHeat(x))"]}
{"id": "eqasc_train_6134", "nl": "Most mammals can be active even in cold weather because they are warm-blooded.", "fol": "", "prediction": ["all x.((Mammal(x) & ColdWeather(x) & WarmBlooded(x)) -> Active(x))"]}
{"id": "eqasc_train_6135", "nl": "warm-blooded animals can stay active in cold by shivering. ", "fol": "", "prediction": ["all x.((WarmBlooded(x) & Cold(x)) -> StaysActive(x))"]}
{"id": "eqasc_train_6136", "nl": "Mammals can also generate little bursts of heat by muscle contractions", "fol": "", "prediction": ["all x.(Mammal(x) -> (GeneratesLittleBurstsOfHeat(x) & MuscleContractions(x)))"]}
{"id": "eqasc_train_6137", "nl": "Mammals can also generate little bursts of heat through muscle contractions.", "fol": "", "prediction": ["all x.(Mammal(x) -> (GeneratesLittleBurstsOfHeat(x) & MuscleContractions(x)))"]}
{"id": "eqasc_train_6138", "nl": "mammals can generate heat by muscle action", "fol": "", "prediction": ["all x.(Mammal(x) -> GeneratesHeatByMuscleAction(x))"]}
{"id": "eqasc_train_6139", "nl": "An inability to shiver or react to the cold can contribute to hypothermia.", "fol": "", "prediction": ["all x.((InabilityToShiver(x) | InabilityToReactToCold(x)) -> ContributesToHypothermia(x))"]}
{"id": "eqasc_train_6140", "nl": "Mammals can also generate little bursts of heat by reacting to the cold", "fol": "", "prediction": ["all x.(Mammal(x) -> (GeneratesLittleBurstsOfHeat(x) & ReactsToCold(x)))"]}
{"id": "eqasc_train_6141", "nl": "polar bears can generate little bursts of heat by shivering", "fol": "", "prediction": ["all x.(PolarBear(x) -> (GeneratesLittleBurstsOfHeat(x) & Shivers(x)))"]}
{"id": "eqasc_train_6142", "nl": "ice wedging is when ice causes rocks to crack by expanding in openings", "fol": "", "prediction": ["all x y.((IceWedging(x) & Ice(y)) -> (CausesRocksToCrack(y,x) & ExpandsInOpenings(y,x)))"]}
{"id": "eqasc_train_6143", "nl": "An ordinary ice road is therefore severely damaged by cracks induced by the traffic.", "fol": "", "prediction": ["all x.((OrdinaryIceRoad(x) & CracksInducedByTraffic(x)) -> Damaged(x))"]}
{"id": "eqasc_train_6144", "nl": "Ice wedging causes ice roads to be severely damaged.", "fol": "", "prediction": ["all x.(IceWedging(x) -> CausesSevereDamage(x))"]}
{"id": "eqasc_train_6145", "nl": "ice causing rocks to crack by expanding in openings is a form of mechanical weathering", "fol": "", "prediction": ["all x y.((Ice(x) & Rock(y) & ExpandsInOpenings(x,y)) -> MechanicalWeathering(x))"]}
{"id": "eqasc_train_6146", "nl": "Water in the cracks of rocks freeze and expand.", "fol": "", "prediction": ["all x y.((Water(x) & CracksOfRocks(y)) -> (Freezes(x,y) & Expands(x,y)))"]}
{"id": "eqasc_train_6147", "nl": "Ice wedging is when Water freezes and expands.", "fol": "", "prediction": ["all x.(IceWedging(x) -> (WaterFreezes(x) & Expands(x)))"]}
{"id": "eqasc_train_6148", "nl": "Ice wedging is extremely effective in a moist but cold climate.", "fol": "", "prediction": ["all x.((IceWedging(x) & MoistButColdClimate(x)) -> ExtremelyEffective(x))"]}
{"id": "eqasc_train_6149", "nl": "moist, cold climates cause rocks to crack by ice expanding in openings", "fol": "", "prediction": ["all x y z.((MoistClimate(x) & ColdClimate(y) & Rock(z) & IceExpanding(z)) -> CracksBy(z,y))"]}
{"id": "eqasc_train_6150", "nl": "Water expands as it freezes into ice.", "fol": "", "prediction": ["all x.((Water(x) & FreezesIntoIce(x)) -> Expands(x))"]}
{"id": "eqasc_train_6151", "nl": "Water causes rocks to crack by turning to ice in its openings", "fol": "", "prediction": ["all x y.((Water(x) & Rock(y)) -> CausesCrack(x,y))"]}
{"id": "eqasc_train_6152", "nl": "Freezing water expands cracking and breaking the rocks.", "fol": "", "prediction": ["all x.(FreezingWater(x) -> (ExpandsCrackingAndBreakingRocks(x)))"]}
{"id": "eqasc_train_6153", "nl": "Ice wedging is when freezing water expands and breaks rocks.", "fol": "", "prediction": ["all x.(IceWedging(x) -> (FreezesWater(x) & ExpandsAndBreaksRocks(x)))"]}
{"id": "eqasc_train_6154", "nl": "Mechanical weathering causes rocks to crack", "fol": "", "prediction": ["all x y.((MechanicalWeathering(x) & Rock(y)) -> CausesToCrack(x,y))"]}
{"id": "eqasc_train_6155", "nl": "when ice causes rocks to crack by expanding in openings, this is known as mechanical weathering ", "fol": "", "prediction": ["all x y z.((Ice(x) & Rock(y) & Opening(z) & CausesToCrack(x,y,z)) -> MechanicalWeathering(x))"]}
{"id": "eqasc_train_6156", "nl": "when ice causes rocks to crack by expanding in openings is the most important form of mechanical weathering", "fol": "", "prediction": ["all x y.((IceCausesRocksToCrack(x) & ExpandsInOpenings(x)) -> MechanicalWeathering(x))"]}
{"id": "eqasc_train_6157", "nl": "Marine species live mainly in shallow coastal waters.", "fol": "", "prediction": ["all x.(MarineSpecies(x) -> LivesInShallowCoastalWaters(x))"]}
{"id": "eqasc_train_6158", "nl": "Killer whales prefer shallow and colder coastal waters.", "fol": "", "prediction": ["all x.(KillerWhale(x) -> (PrefersShallow(x) & PrefersColder(x)))"]}
{"id": "eqasc_train_6159", "nl": "Killer whales are a marine species.", "fol": "", "prediction": ["all x.(KillerWhale(x) -> MarineSpecies(x))"]}
{"id": "eqasc_train_6160", "nl": "Marine dolphins are endangered by fishing nets, speedboats, and pollution.", "fol": "", "prediction": ["all x.(MarineDolphin(x) -> (EndangeredByFishingNets(x) | EndangeredBySpeedboats(x) | EndangeredByPollution(x)))"]}
{"id": "eqasc_train_6161", "nl": "dolphins live mainly in shallow coastal waters", "fol": "", "prediction": ["all x.(Dolphin(x) -> (LivesInShallowCoastalWaters(x) & MostlyInShallowCoastalWaters(x)))"]}
{"id": "eqasc_train_6162", "nl": "Most marine organisms live near the surface.", "fol": "", "prediction": ["all x.(MarineOrganism(x) -> LivesNearSurface(x))"]}
{"id": "eqasc_train_6163", "nl": "Most organisms live mainly in shallow coastal waters.", "fol": "", "prediction": ["all x.(Organism(x) -> LivesInShallowCoastalWaters(x))"]}
{"id": "eqasc_train_6164", "nl": "Many marine species are used for medical research.", "fol": "", "prediction": ["all x.(MarineSpecies(x) -> UsedForMedicalResearch(x))"]}
{"id": "eqasc_train_6165", "nl": "many organisms found in shallow coastal waters are used for medical research", "fol": "", "prediction": ["all x y.((Organism(x) & FoundInShallowCoastalWaters(x)) -> UsedForMedicalResearch(y))"]}
{"id": "eqasc_train_6166", "nl": "All marine turtles are considered to be endangered species.", "fol": "", "prediction": ["all x.(MarineTurtle(x) -> EndangeredSpecies(x))"]}
{"id": "eqasc_train_6167", "nl": "some turtles live mainly in shallow coastal waters", "fol": "", "prediction": ["exists x.(Turtle(x) & LivesInShallowCoastalWaters(x))"]}
{"id": "eqasc_train_6168", "nl": "Many species of marine algae are toxic or harmful.", "fol": "", "prediction": ["exists x.(MarineAlgaeSpecies(x) & (Toxic(x) | Harmful(x)))"]}
{"id": "eqasc_train_6169", "nl": "algae lives mainly in shallow coastal waters", "fol": "", "prediction": ["all x.(Algae(x) -> exists y.(ShallowCoastalWater(y) & LivesIn(x,y)))"]}
{"id": "eqasc_train_6170", "nl": "All species are aquatic, most are marine.", "fol": "", "prediction": ["all x.(Species(x) -> (Aquatic(x) | Marine(x)))"]}
{"id": "eqasc_train_6171", "nl": "Aquatic species live mainly in shallow coastal waters.", "fol": "", "prediction": ["all x.(AquaticSpecies(x) -> LivesInShallowCoastalWaters(x))"]}
{"id": "eqasc_train_6172", "nl": "Marine Science Marine science is the study of the sea.", "fol": "", "prediction": ["all x.(MarineScience(x) -> (StudyOfSea(x) & StudiesSea(x)))"]}
{"id": "eqasc_train_6173", "nl": "Sea species live mainly in shallow coastal waters.", "fol": "", "prediction": ["all x.(SeaSpecies(x) -> LivesInShallowCoastalWaters(x))"]}
{"id": "eqasc_train_6174", "nl": "Seahorses inhabit shallow coastal waters, especially seagrass beds, coral reefs and mangrove swamps.", "fol": "", "prediction": ["all x.(Seahorse(x) -> (InhabitsShallowCoastalWaters(x) & (SeagrassBeds(x) | CoralReefs(x) | MangroveSwamps(x))))"]}
{"id": "eqasc_train_6175", "nl": "Seahorses are marine species.", "fol": "", "prediction": ["all x.(Seahorse(x) -> MarineSpecies(x))"]}
{"id": "eqasc_train_6176", "nl": "Coastal waters teem with life.", "fol": "", "prediction": ["all x.(CoastalWater(x) -> TeemWithLife(x))"]}
{"id": "eqasc_train_6177", "nl": "Marine species live mainly in areas teeming with life", "fol": "", "prediction": ["all x y.((MarineSpecies(x) & Area(y) & TeemingWithLife(y)) -> LivesIn(x,y))"]}
{"id": "eqasc_train_6178", "nl": "Brachiopods are strictly marine and are usually found in shallow seas.", "fol": "", "prediction": ["all x.(Brachiopod(x) -> (StrictlyMarine(x) & FoundInShallowSeas(x)))"]}
{"id": "eqasc_train_6179", "nl": "Brachiopods live in shallow coastal waters", "fol": "", "prediction": ["all x.(Brachiopod(x) -> LivesInShallowCoastalWaters(x))"]}
{"id": "eqasc_train_6180", "nl": "Water in the channel is calm and shallow.", "fol": "", "prediction": ["all x.((Water(x) & Channel(x)) -> (Clear(x) & Shallow(x)))"]}
{"id": "eqasc_train_6181", "nl": "coastal water is calmer", "fol": "", "prediction": ["all x.(CoastalWater(x) -> Calmer(x))"]}
{"id": "eqasc_train_6182", "nl": "Along the coastal zone are situated shallow banks which are very rich in fish.", "fol": "", "prediction": ["all x.(CoastalZone(x) -> (SituatedShallowBanks(x) & RichInFish(x)))"]}
{"id": "eqasc_train_6183", "nl": "Marine species live mainly in waters which are very rich in fish", "fol": "", "prediction": ["all x y.((MarineSpecies(x) & Water(y) & RichInFish(y)) -> LivesIn(x,y))"]}
{"id": "eqasc_train_6184", "nl": "Warm, still, shallow waters are preferred.", "fol": "", "prediction": ["all x.((Warm(x) | Still(x) | Shallow(x)) -> Preferred(x))"]}
{"id": "eqasc_train_6185", "nl": "marine species live mainly in warm waters", "fol": "", "prediction": ["all x.(MarineSpecies(x) -> LivesInWarmWaters(x))"]}
{"id": "eqasc_train_6186", "nl": "pushing on the pedals of a bike cause that bike to move", "fol": "", "prediction": ["all x y.((Bike(x) & Bicycle(y)) -> (PushingOnPedals(x,y) & CausesBikeToMove(x,y)))"]}
{"id": "eqasc_train_6187", "nl": "First, overcoming inertia to move forward is difficult.", "fol": "", "prediction": ["all x.((OvercomesInertia(x) & MovesForward(x)) -> Difficult(x))"]}
{"id": "eqasc_train_6188", "nl": "Pushing on bike pedals cause the bike to overcome inertia.", "fol": "", "prediction": ["all x.(PushingOnPedals(x) -> OvercomesInertia(x))"]}
{"id": "eqasc_train_6189", "nl": "Force is a push or a pull.", "fol": "", "prediction": ["all x.(Force(x) -> (Push(x) | Pull(x)))"]}
{"id": "eqasc_train_6190", "nl": "force on the pedals of a bike cause that bike to move", "fol": "", "prediction": ["all x y.((Bike(x) & Bicycle(y)) -> CausesMovement(x,y))"]}
{"id": "eqasc_train_6191", "nl": "Kinetic friction is the resistance on a moving object.", "fol": "", "prediction": ["all x.(KineticFriction(x) -> ResistanceOnMovingObject(x))"]}
{"id": "eqasc_train_6192", "nl": "pushing on the pedals of a bike cause kinetic friction", "fol": "", "prediction": ["all x y.((Bike(x) & PushingOnPedals(x,y)) -> KineticFriction(x))"]}
{"id": "eqasc_train_6193", "nl": "Bike shoes allow a rider to pull during the whole pedal stroke.", "fol": "", "prediction": ["all x.(BikeShoes(x) -> AllowsRiderToPullDuringPedalStroke(x))"]}
{"id": "eqasc_train_6194", "nl": "pushing with strokes on a bike cause that bike to move", "fol": "", "prediction": ["all x y.((Bike(x) & Bicycle(y)) -> (PressingWithStrokes(x,y) & CausesBikeToMove(x,y)))"]}
{"id": "eqasc_train_6195", "nl": "Bike commuting truly is green but bike commuting is difficult.", "fol": "", "prediction": ["(all x.(BikeCommuting(x) -> Green(x)) & all y.(BikeCommuting(y) -> Difficult(y)))"]}
{"id": "eqasc_train_6196", "nl": "Green commuting can be accomplished through pushing on pedals", "fol": "", "prediction": ["all x.(GreenCommuting(x) -> (PutsPedals(x) & PushesPedals(x)))"]}
{"id": "eqasc_train_6197", "nl": "Well, when riding a bike, human power is used to turn the pedals.", "fol": "", "prediction": ["all x y.((RikingBike(x) & HumanPower(y)) -> TurnPedals(x,y))"]}
{"id": "eqasc_train_6198", "nl": "human power causes a bike to move", "fol": "", "prediction": ["all x y.((HumanPower(x) & Bike(y)) -> CausesMovement(x,y))"]}
{"id": "eqasc_train_6199", "nl": "Bikes and tricycles are also decorated.", "fol": "", "prediction": ["all x.((Bicycle(x) | Tricycle(x)) -> Decorated(x))"]}
{"id": "eqasc_train_6200", "nl": "pushing on the pedals of a tricycle causes it to move", "fol": "", "prediction": ["all x y.((Tricycle(x) & Tricycle(y)) -> (PutsOnPedals(x,y) & CausesMovement(x,y)))"]}
{"id": "eqasc_train_6201", "nl": "Bikes are to be parked in the bicycle area and locked securely.", "fol": "", "prediction": ["all x.(Bicycle(x) -> (ParksInBicycleArea(x) & LockedSecurly(x)))"]}
{"id": "eqasc_train_6202", "nl": "pushing on the pedals of a bicycle cause that bicycle to move", "fol": "", "prediction": ["all x y.((Bicycle(x) & Bicycle(y)) -> (PushingOnPedals(x,y) & CausesMovement(x,y)))"]}
{"id": "eqasc_train_6203", "nl": "Schwinn bikes have carried many TWW'ers to the podium time and time again.", "fol": "", "prediction": ["all x.((Bike(x) & Schwinn(x)) -> CarryingToPosition(x,y))"]}
{"id": "eqasc_train_6204", "nl": "pushing on the pedals of a Schwinn causes it to move", "fol": "", "prediction": ["all x y.((Schwinn(x) & PushingOnPedals(x,y)) -> Moves(x))"]}
{"id": "eqasc_train_6205", "nl": "Speed is controlled by pedalling and by pushing back on the moving pedals.", "fol": "", "prediction": ["all x.(Speed(x) -> (Pedaling(x) & PushingBackOnPedals(x)))"]}
{"id": "eqasc_train_6206", "nl": "Speed is controlled by pushing on bikes pedals", "fol": "", "prediction": ["all x y.((Bike(x) & Bicycle(y)) -> ControlsSpeed(x,y))"]}
{"id": "eqasc_train_6207", "nl": "Wheels reduce friction with the floor to help cars move.", "fol": "", "prediction": ["all x y.((Wheel(x) & Floor(y)) -> ReducesFrictionToHelpCarsMove(x,y))"]}
{"id": "eqasc_train_6208", "nl": "pushing on the pedals of a bike cause friction reduction", "fol": "", "prediction": ["all x y.((Bike(x) & PushingOnPedals(x,y)) -> CausesFrictionReduction(x))"]}
{"id": "eqasc_train_6209", "nl": "Producers make food from inorganic molecules.", "fol": "", "prediction": ["all x y.((Producer(x) & Food(y)) -> MakesFromInorganicMolecules(x,y))"]}
{"id": "eqasc_train_6210", "nl": "Among the small inorganic molecules which are economically attractive are CO and H 2 .", "fol": "", "prediction": ["all x.((SmallInorganicMolecule(x) & EconomicallyAttractive(x)) -> (CO(x) | H2(x)))"]}
{"id": "eqasc_train_6211", "nl": "Producers make food from CO and H 2.", "fol": "", "prediction": ["all x y z.((Producer(x) & Food(y) & CO(z) & H2(z)) -> MakesFrom(x,y,z))"]}
{"id": "eqasc_train_6212", "nl": "Autotrophs absorb sunlight energy and transfer inorganic mineral nutrients into organic molecules.", "fol": "", "prediction": ["all x.(Autotroph(x) -> (AbsorbsSunlightEnergy(x) & TransfersInorganicMineralNutrients(x) & IntoOrganicMolecules(x)))"]}
{"id": "eqasc_train_6213", "nl": "Producers make sunlight energy into food.", "fol": "", "prediction": ["all x y.((Producer(x) & Sunlight(y)) -> MakesIntoFood(x,y))"]}
{"id": "eqasc_train_6214", "nl": "Plants make food from inorganic molecules.", "fol": "", "prediction": ["all x.(Plant(x) -> MakesFoodFromInorganicMolecules(x))"]}
{"id": "eqasc_train_6215", "nl": "green plants make food from inorganic molecules", "fol": "", "prediction": ["all x y.((GreenPlant(x) & InorganicMolecule(y)) -> MakesFoodFrom(x,y))"]}
{"id": "eqasc_train_6216", "nl": "Autotrophs are referred to as producers.", "fol": "", "prediction": ["all x.(Autotroph(x) -> Producer(x))"]}
{"id": "eqasc_train_6217", "nl": "Autotrophs make food from inorganic molecules.", "fol": "", "prediction": ["all x.(Autotroph(x) -> MakesFoodFromInorganicMolecules(x))"]}
{"id": "eqasc_train_6218", "nl": "Decomposition is the breakdown of organic molecules into inorganic molecules.", "fol": "", "prediction": ["all x y.((OrganicMolecule(x) & InorganicMolecule(y)) -> Decomposition(x))"]}
{"id": "eqasc_train_6219", "nl": "Decomposition helps producers make food.", "fol": "", "prediction": ["all x.(Decomposition(x) -> HelpsProducersMakeFood(x))"]}
{"id": "eqasc_train_6220", "nl": "Primary producers make up the lowest trophic level.", "fol": "", "prediction": ["all x.(PrimaryProducer(x) -> MakesLowerTropicalLevel(x))"]}
{"id": "eqasc_train_6221", "nl": "The lowest trophic level makes food from inorganic molecules.", "fol": "", "prediction": ["all x.((TropicalLevel(x) & Lowest(x)) -> MakesFoodFromInorganicMolecules(x))"]}
{"id": "eqasc_train_6222", "nl": "plants make food from inorganic molecules", "fol": "", "prediction": ["all x y.((Plant(x) & InorganicMolecule(y)) -> MakesFoodFrom(x,y))"]}
{"id": "eqasc_train_6223", "nl": "Plants are known as producers .", "fol": "", "prediction": ["all x.(Plant(x) -> Producer(x))"]}
{"id": "eqasc_train_6224", "nl": "green plants make food from inorganic molecules.", "fol": "", "prediction": ["all x.(GreenPlant(x) -> MakesFoodFromInorganicMolecules(x))"]}
{"id": "eqasc_train_6225", "nl": "having food has a positive impact on an organism 's health", "fol": "", "prediction": ["all x y.((Organism(x) & Food(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_6226", "nl": "If the food distribution is stopped, tens of thousands face starvation.", "fol": "", "prediction": ["all x.((FoodDistributionStopped(x) & TensOfMillions(x)) -> FacesStarvation(x))"]}
{"id": "eqasc_train_6227", "nl": "Starvation has a negative impact on an orgnaism's health.", "fol": "", "prediction": ["all x.(Starvation(x) -> NegativeImpactOnOrgnaismHealth(x))"]}
{"id": "eqasc_train_6228", "nl": "chemical energy has a positive impact on an organism's health", "fol": "", "prediction": ["all x y.((ChemicalEnergy(x) & Organism(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_6229", "nl": "Birds and animals eat such food .", "fol": "", "prediction": ["all x y.((Bird(x) | Animal(y)) -> Eats(x,y))"]}
{"id": "eqasc_train_6230", "nl": "Eating has a positive impact on an organism's health.", "fol": "", "prediction": ["all x.(Eating(x) -> PositiveImpactOnOrganismsHealth(x))"]}
{"id": "eqasc_train_6231", "nl": "Different foods contain different nutrients.", "fol": "", "prediction": ["all x.(Food(x) -> DifferentNutrients(x))"]}
{"id": "eqasc_train_6232", "nl": "having nutrients has a positive impact on an organism 's health", "fol": "", "prediction": ["all x y.((Nutrients(x) & Organism(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_6233", "nl": "having food has a positive impact on a plant's health", "fol": "", "prediction": ["all x y.((Plant(x) & Plant(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_6234", "nl": "Food provides energy and health.", "fol": "", "prediction": ["all x.(Food(x) -> (ProvidesEnergy(x) & ProvidesHealth(x)))"]}
{"id": "eqasc_train_6235", "nl": "food provides energy for an organism", "fol": "", "prediction": ["all x y.((Food(x) & Organism(y)) -> ProvidesEnergy(x,y))"]}
{"id": "eqasc_train_6236", "nl": "For the food of bread is daily food.", "fol": "", "prediction": ["all x.(Bread(x) -> DailyFood(x))"]}
{"id": "eqasc_train_6237", "nl": "having bread daily has a positive impact on some organism 's health", "fol": "", "prediction": ["all x y.((BreadDaily(x) & Organism(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_6238", "nl": "Many fast food restaurants have published the nutrient content of their foods.", "fol": "", "prediction": ["all x y.((FastFoodRestaurant(x) & Food(y)) -> PublishedNutrientContent(x,y))"]}
{"id": "eqasc_train_6239", "nl": "Nutrient content has a positive impact on an organisms' health", "fol": "", "prediction": ["all x y.((NutrientContent(x) & Organism(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_6240", "nl": "Plants are sensitive organisms.", "fol": "", "prediction": ["all x.(Plant(x) -> SensitiveOrganism(x))"]}
{"id": "eqasc_train_6241", "nl": "People eat food.", "fol": "", "prediction": ["all x.(People(x) -> EatsFood(x))"]}
{"id": "eqasc_train_6242", "nl": "Eating has a positive impact on an organism 's health", "fol": "", "prediction": ["all x y.((Eating(x) & Organism(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_6243", "nl": "Animals eat plants for food.", "fol": "", "prediction": ["all x y.((Animal(x) & Plant(y)) -> EatsForFood(x,y))"]}
{"id": "eqasc_train_6244", "nl": "Eating plants has a positive impact on the health of animals", "fol": "", "prediction": ["all x y.((EatingPlants(x) & Animal(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_6245", "nl": "And anything edible is food.", "fol": "", "prediction": ["all x.(Edible(x) -> Food(x))"]}
{"id": "eqasc_train_6246", "nl": "Having edible things has a positive impact on an organism 's health", "fol": "", "prediction": ["all x y.((EdibleThing(x) & Organism(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_6247", "nl": "Wings are part of the exoskeleton and attached to the thorax.", "fol": "", "prediction": ["all x.(Wing(x) -> (PartOfExoskeleton(x) & AttachedToThorax(x)))"]}
{"id": "eqasc_train_6248", "nl": "Wings are part of the external framework.", "fol": "", "prediction": ["all x.(Wing(x) -> ExternalFramework(x))"]}
{"id": "eqasc_train_6249", "nl": "An insect's body consists of the head, thorax and abdomen.", "fol": "", "prediction": ["all x.(Insect(x) -> (ConsistsOfHead(x) & ConsistsOfThorax(x) & ConsistsOfAbdomen(x)))"]}
{"id": "eqasc_train_6250", "nl": "Wings are part of the exoskeleton attached to the insect's body", "fol": "", "prediction": ["all x y.((Wing(x) & Insect(y)) -> AttachedToExoskeleton(x,y))"]}
{"id": "eqasc_train_6251", "nl": "An insect has 6 legs and a head, thorax and abdomen.", "fol": "", "prediction": ["all x.(Insect(x) -> (HasLegs(x,6) & HasHead(x) & HasThorax(x) & HasAbdomen(x)))"]}
{"id": "eqasc_train_6252", "nl": "An insect has an exoskeleton", "fol": "", "prediction": ["all x.(Insect(x) -> HasExoskeleton(x))"]}
{"id": "eqasc_train_6253", "nl": "Behind the head is the thorax.", "fol": "", "prediction": ["all x.(HasHead(x) -> HasThorax(x))"]}
{"id": "eqasc_train_6254", "nl": "wings are part of the exoskeleton and attached behind the head", "fol": "", "prediction": ["all x.(Wing(x) -> (PartOfExoskeleton(x) & AttachedBehindHead(x)))"]}
{"id": "eqasc_train_6255", "nl": "Insect wings are attached to the dorsal side of their thorax.", "fol": "", "prediction": ["all x.(InsectWing(x) -> AttachedToDorsalSideOfThorax(x))"]}
{"id": "eqasc_train_6256", "nl": "wings are attached to the dorsal side of the insect", "fol": "", "prediction": ["all x y.((Insect(x) & Wings(y)) -> AttachedToDorsalSide(y,x))"]}
{"id": "eqasc_train_6257", "nl": "Insects have exoskeletons.", "fol": "", "prediction": ["all x.(Insect(x) -> HasExoskeleton(x))"]}
{"id": "eqasc_train_6258", "nl": "wings are attached to insects' thorax", "fol": "", "prediction": ["all x y.((Wing(x) & Insect(y)) -> AttachedToThorax(x,y))"]}
{"id": "eqasc_train_6259", "nl": "All insects have heads, abdomens, and thoraxes, antennae, six legs, and wings.", "fol": "", "prediction": ["all x.(Insect(x) -> (HasHeads(x) & HasAbdomens(x) & HasThoraxes(x) & HasAntennae(x) & HasSixLegs(x) & HasWings(x)))"]}
{"id": "eqasc_train_6260", "nl": "All insects have wings that are part of the exoskeleton", "fol": "", "prediction": ["all x.(Insect(x) -> (HasWings(x) & PartOfExoskeleton(x)))"]}
{"id": "eqasc_train_6261", "nl": "wings are part of the dorsal side of insects", "fol": "", "prediction": ["all x.(Wing(x) -> (PartOfDorsalSide(x) & Insect(x)))"]}
{"id": "eqasc_train_6262", "nl": "Spiracles are located on the abdomen and thorax.", "fol": "", "prediction": ["all x.(Spiracle(x) -> (LocatedOnAbdomen(x) & LocatedOnThorax(x)))"]}
{"id": "eqasc_train_6263", "nl": "Wings and spiracles share a location.", "fol": "", "prediction": ["all x y.((Wing(x) & Spire(y)) -> ShareLocation(x,y))"]}
{"id": "eqasc_train_6264", "nl": "Butterflies bask to heat up their wing muscles for flight.", "fol": "", "prediction": ["all x.(Butterfly(x) -> (BasksToHeatWingMuscles(x) & ForFlight(x)))"]}
{"id": "eqasc_train_6265", "nl": "butterflies' instruments of flight are part of the exoskeleton and attached to the thorax", "fol": "", "prediction": ["all x y.((Butterfly(x) & Exoskeleton(y)) -> (InstrumentsOfFlight(x,y) & PartOfExoskeleton(x) & AttachedToThorax(x)))"]}
{"id": "eqasc_train_6266", "nl": "Animals may compete for territory, water, food, or mates.", "fol": "", "prediction": ["all x.(Animal(x) -> (CompeteForTerritory(x) | CompeteForWater(x) | CompeteForFood(x) | CompeteForMates(x)))"]}
{"id": "eqasc_train_6267", "nl": "cats may compete for territory, water, food, or mates", "fol": "", "prediction": ["all x.(Cat(x) -> (CompeteForTerritory(x) | CompeteForWater(x) | CompeteForFood(x) | CompeteForMates(x)))"]}
{"id": "eqasc_train_6268", "nl": "Animals and plants compete for energy, water, and space.", "fol": "", "prediction": ["all x.((Animal(x) | Plant(x)) -> (CompetesForEnergy(x) & CompetesForWater(x) & CompetesForSpace(x)))"]}
{"id": "eqasc_train_6269", "nl": "animals compete for territory", "fol": "", "prediction": ["all x.(Animal(x) -> CompetesForTerritory(x))"]}
{"id": "eqasc_train_6270", "nl": "Every living being needs food.", "fol": "", "prediction": ["all x.(LivingBeing(x) -> NeedsFood(x))"]}
{"id": "eqasc_train_6271", "nl": "Animals compete to live", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> CompetesToLive(x,y))"]}
{"id": "eqasc_train_6272", "nl": "Larger animals dominate in competition for food, mating partners, and nesting space.", "fol": "", "prediction": ["all x.(LargerAnimal(x) -> (DominatesInCompetition(x) & (ForFood(x) | ForMatingPartners(x) | ForNestingSpace(x))))"]}
{"id": "eqasc_train_6273", "nl": "larger animals dominate in competition for territory.", "fol": "", "prediction": ["all x.(LargerAnimal(x) -> PredominanceInCompetitionForTerritory(x))"]}
{"id": "eqasc_train_6274", "nl": "All lions are animals.", "fol": "", "prediction": ["all x.(Lion(x) -> Animal(x))"]}
{"id": "eqasc_train_6275", "nl": "lions may compete for territory, water, food, or mates?", "fol": "", "prediction": ["all x.(Lion(x) -> (CompeteForTerritory(x) | CompeteForWater(x) | CompeteForFood(x) | CompeteForMates(x)))"]}
{"id": "eqasc_train_6276", "nl": "alligators may compete for territory, water, food, or mates", "fol": "", "prediction": ["all x.(Alligator(x) -> (CompeteForTerritory(x) | CompeteForWater(x) | CompeteForFood(x) | CompeteForMates(x)))"]}
{"id": "eqasc_train_6277", "nl": "Mating Ducks usually look for a mate or partner in winter.", "fol": "", "prediction": ["all x.(MakingDuck(x) -> (LooksForMate(x) | LooksForPartner(x)))"]}
{"id": "eqasc_train_6278", "nl": "Animals may compete for territory, water, food, or partners.", "fol": "", "prediction": ["all x.(Animal(x) -> (CompeteForTerritory(x) | CompeteForWater(x) | CompeteForFood(x) | CompeteForPartners(x)))"]}
{"id": "eqasc_train_6279", "nl": "Animals such as lions and tigers fight.", "fol": "", "prediction": ["all x.((Animal(x) & (Lion(x) | Tiger(x))) -> Fighting(x))"]}
{"id": "eqasc_train_6280", "nl": "Tigers may compete for territory, water, food, or mates.", "fol": "", "prediction": ["all x.(Tiger(x) -> (CompetesForTerritory(x) | CompetesForWater(x) | CompetesForFood(x) | CompetesForMates(x)))"]}
{"id": "eqasc_train_6281", "nl": "birds may compete for territory, water, food, or mates.", "fol": "", "prediction": ["all x.(Bird(x) -> (CompeteForTerritory(x) | CompeteForWater(x) | CompeteForFood(x) | CompeteForMates(x)))"]}
{"id": "eqasc_train_6282", "nl": "Pigs are very intelligent animals.", "fol": "", "prediction": ["all x.(Pig(x) -> IntelligentAnimal(x))"]}
{"id": "eqasc_train_6283", "nl": "pigs may compete for territory, water, food, or mates", "fol": "", "prediction": ["all x.(Pig(x) -> (CompeteForTerritory(x) | CompeteForWater(x) | CompeteForFood(x) | CompeteForMates(x)))"]}
{"id": "eqasc_train_6284", "nl": "Wild animals are habitual creatures.", "fol": "", "prediction": ["all x.(WildAnimal(x) -> HabitualCreature(x))"]}
{"id": "eqasc_train_6285", "nl": "Habitual creatures may compete for territory, water, food, or mates", "fol": "", "prediction": ["all x.(HabitualCreature(x) -> (CompeteForTerritory(x) | CompeteForWater(x) | CompeteForFood(x) | CompeteForMates(x)))"]}
{"id": "eqasc_train_6286", "nl": "force causes the speed of an object to increase", "fol": "", "prediction": ["all x y.((Force(x) & Object(y)) -> CausesSpeedToIncrease(x,y))"]}
{"id": "eqasc_train_6287", "nl": "Kinetic energy varies as the square of the speed of a moving body.", "fol": "", "prediction": ["all x y.((KineticEnergy(x) & MovingBody(y)) -> VariatesAsSquareOfSpeed(x,y))"]}
{"id": "eqasc_train_6288", "nl": "Applying force in the direction of travel of a moving object will increase its kinetic energy", "fol": "", "prediction": ["all x y.((ApplyingForce(x) & MovingObject(y) & DirectionOfTravel(x,y)) -> IncreasesKineticEnergy(x,y))"]}
{"id": "eqasc_train_6289", "nl": "Pulling and pushing is forceful motion.", "fol": "", "prediction": ["all x.((Pulling(x) | Pushing(x)) -> ForcefulMotion(x))"]}
{"id": "eqasc_train_6290", "nl": "pulling and pushing an object will increase its speed", "fol": "", "prediction": ["all x y.((Object(x) & PullingAndPressing(x)) -> IncreasesSpeed(x,y))"]}
{"id": "eqasc_train_6291", "nl": "Speed is how fast an object is moving.", "fol": "", "prediction": ["all x.(Speed(x) -> FastObjectMoving(x))"]}
{"id": "eqasc_train_6292", "nl": "Force increases how fast an object is moving.", "fol": "", "prediction": ["all x.(Force(x) -> IncreasesFastMovement(x))"]}
{"id": "eqasc_train_6293", "nl": "Speeding can be dangerous and increase stress.", "fol": "", "prediction": ["all x.(Speeding(x) -> (Dangerous(x) & IncreasesStress(x)))"]}
{"id": "eqasc_train_6294", "nl": "Force can cause objects to speed up, which is dangerous.", "fol": "", "prediction": ["all x.(Force(x) -> (CausesObjectsToSpeedUp(x) & Dangerous(x)))"]}
{"id": "eqasc_train_6295", "nl": "Lets look at velocity or speed.", "fol": "", "prediction": ["all x.((Velocity(x) | Speed(x)) -> LooksAt(x,y))"]}
{"id": "eqasc_train_6296", "nl": "force causes the velocity of an object to increase", "fol": "", "prediction": ["all x y.((Object(x) & Force(y)) -> IncreasesVelocity(x,y))"]}
{"id": "eqasc_train_6297", "nl": "Speed is the magnitude of velocity.", "fol": "", "prediction": ["all x.(Speed(x) -> MagnitudeOfVelocity(x))"]}
{"id": "eqasc_train_6298", "nl": "force causes an object's magnitude of velocity to increase", "fol": "", "prediction": ["all x y.((Object(x) & Force(y)) -> MagnitudeOfVelocityIncrease(x,y))"]}
{"id": "eqasc_train_6299", "nl": "Excessive speed is dangerous.", "fol": "", "prediction": ["all x.(ExcessiveSpeed(x) -> Dangerous(x))"]}
{"id": "eqasc_train_6300", "nl": "force can be dangerous", "fol": "", "prediction": ["all x.(Force(x) -> CanBeDangerous(x))"]}
{"id": "eqasc_train_6301", "nl": "If speed is increased, the uplift force is increased.", "fol": "", "prediction": ["all x.((SpeedIncreased(x) & UpliftForceIncreased(x)) -> Increased(x))"]}
{"id": "eqasc_train_6302", "nl": "Acceleration causes the uplift force of an object to increase.", "fol": "", "prediction": ["all x y.((Accuracy(x) & Object(y)) -> UpliftForceIncrease(x,y))"]}
{"id": "eqasc_train_6303", "nl": "Acceleration is the increase in speed or velocity over a period of time.", "fol": "", "prediction": ["all x.(Acceleration(x) -> (IncreaseInSpeedOrVelocity(x) & OverPeriodOfTime(x)))"]}
{"id": "eqasc_train_6304", "nl": "Force on an object causes acceleration.", "fol": "", "prediction": ["all x y.((Force(x) & Object(y)) -> CausesAcceleration(x,y))"]}
{"id": "eqasc_train_6305", "nl": "skin is used for breathing air by frogs", "fol": "", "prediction": ["all x y.((Frog(x) & Frog(y)) -> (UsedForBreathingAir(x,y) & BreathesAir(x,y)))"]}
{"id": "eqasc_train_6306", "nl": "Frogs breathe with their lungs and skin.", "fol": "", "prediction": ["all x.(Frog(x) -> (BreathesWithLungs(x) & BreathesWithSkin(x)))"]}
{"id": "eqasc_train_6307", "nl": "frogs breathe with their lungs", "fol": "", "prediction": ["all x.(Frog(x) -> BreathesWithLungs(x))"]}
{"id": "eqasc_train_6308", "nl": "For example, the frog is covered with skin that is porous to air.", "fol": "", "prediction": ["all x.(Frog(x) -> (CoveredWithSkin(x) & PorousToAir(x)))"]}
{"id": "eqasc_train_6309", "nl": "Frogs breathe through their skin which is porous.", "fol": "", "prediction": ["all x.(Frog(x) -> BreathesThroughSkin(x))"]}
{"id": "eqasc_train_6310", "nl": "Frogs breathe and absorb water through their skin, which is periodically shed.", "fol": "", "prediction": ["all x.(Frog(x) -> (Breathes(x) & AbsorbsWater(x) & ShedsSkin(x)))"]}
{"id": "eqasc_train_6311", "nl": "Frogs absorb water and air through their skin", "fol": "", "prediction": ["all x.(Frog(x) -> (AbsorbsWater(x) & AbsorbsAir(x) & ThroughSkin(x)))"]}
{"id": "eqasc_train_6312", "nl": "Actually the toad is a type of frog.", "fol": "", "prediction": ["all x.(Toad(x) -> Frog(x))"]}
{"id": "eqasc_train_6313", "nl": "skin is used for breathing air by toads", "fol": "", "prediction": ["all x y.((Skin(x) & Toad(y)) -> UsedForBreathingAir(x,y))"]}
{"id": "eqasc_train_6314", "nl": "Frogs belong to the Class Amphibia, and rely on moisture to breathe, reproduce and survive.", "fol": "", "prediction": ["all x.(Frog(x) -> (BelongsToClassAmphibia(x) & ReliesOnMoisture(x) & BreathesReproducesSurvives(x)))"]}
{"id": "eqasc_train_6315", "nl": "frogs need their skin to survive", "fol": "", "prediction": ["all x.(Frog(x) -> NeedsSkinToSurvive(x))"]}
{"id": "eqasc_train_6316", "nl": "frogs use lungs to breathe air", "fol": "", "prediction": ["all x y.((Frog(x) & Lungs(y)) -> UsesToBreatheAir(x,y))"]}
{"id": "eqasc_train_6317", "nl": "Every frog starts as a tadpole.", "fol": "", "prediction": ["all x.(Frog(x) -> Tadpole(x))"]}
{"id": "eqasc_train_6318", "nl": "skin is used for breathing air by tadpoles", "fol": "", "prediction": ["all x y.((Skin(x) & Tadpole(y)) -> UsedForBreathingAir(x,y))"]}
{"id": "eqasc_train_6319", "nl": "Some bats eat meat and fish and frogs.", "fol": "", "prediction": ["exists x.(Bat(x) & EatsMeat(x) & EatsFish(x) & EatsFrogs(x))"]}
{"id": "eqasc_train_6320", "nl": "Skin is used for breathing air by something that is eaten by bats", "fol": "", "prediction": ["all x y z.((Skin(x) & Air(y) & Bat(z)) -> (UsedForBreathing(x,y) & EatenBy(x,z)))"]}
{"id": "eqasc_train_6321", "nl": "An apathetic frog is probably a sick frog.", "fol": "", "prediction": ["all x.((Frog(x) & Apathetic(x)) -> Sick(x))"]}
{"id": "eqasc_train_6322", "nl": "Sickness can be caused by skin breathing problems.", "fol": "", "prediction": ["all x.(Sickness(x) -> CausedBySkinBreathingProblems(x))"]}
{"id": "eqasc_train_6323", "nl": "skin is used for breathing oxygen by frogs", "fol": "", "prediction": ["all x y.((Frog(x) & Frog(y)) -> (UsedForBreathingOxygen(x,y) & BreathesOxygen(y)))"]}
{"id": "eqasc_train_6324", "nl": "crumple means change shape from smooth into compacted by physical force", "fol": "", "prediction": ["all x.(Cruple(x) -> (ChangeShapeFromSmoothToCompactedByPhysicalForce(x)))"]}
{"id": "eqasc_train_6325", "nl": "Crumple the foil then carefully reopen it.", "fol": "", "prediction": ["all x y.((Foil(x) & Foil(y)) -> (Crumple(x,y) & CarefullyReopen(x,y)))"]}
{"id": "eqasc_train_6326", "nl": "Foil can be scrunched up by physical force.", "fol": "", "prediction": ["all x.(Foil(x) -> ScrunchedUpByPhysicalForce(x))"]}
{"id": "eqasc_train_6327", "nl": "foil can be changed from smooth into compacted by physical force", "fol": "", "prediction": ["all x.(Foil(x) -> (ChangesSmooth(x) & ChangesCompactedByPhysicalForce(x)))"]}
{"id": "eqasc_train_6328", "nl": "Cellophane or paper crumpled in ball sizes.", "fol": "", "prediction": ["all x.((Cellophane(x) | PaperCrunched(x)) -> BallSize(x))"]}
{"id": "eqasc_train_6329", "nl": "paper easily change shapes from smooth into compacted by physical force", "fol": "", "prediction": ["all x.((Paper(x) & Smooth(x) & PhysicalForce(x)) -> CanEasilyChangeShapes(x))"]}
{"id": "eqasc_train_6330", "nl": "Density increases with depth due to compaction and progressive cementation.", "fol": "", "prediction": ["all x.((Density(x) & Depth(x) & Compaction(x) & ProgressiveCementation(x)) -> Increases(x))"]}
{"id": "eqasc_train_6331", "nl": "crumple means density increases by physical force", "fol": "", "prediction": ["all x.(Cruple(x) -> (DensityIncreasesByPhysicalForce(x) & PhysicalForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForceForForceForForceForFor"]}
{"id": "eqasc_train_6332", "nl": "Crumple zones and bumpers are often weaker and poorer performing than in cars.", "fol": "", "prediction": ["all x y.((CrupleZone(x) & Bumper(y)) -> (Weaker(x) & PoorerPerforming(y)))"]}
{"id": "eqasc_train_6333", "nl": "Bumpers easily change shape from smooth to compacted by physical force.", "fol": "", "prediction": ["all x.(Bumper(x) -> (ChangeShape(x) & Smooth(x) & PhysicalForce(x)))"]}
{"id": "eqasc_train_6334", "nl": "An apple apparently crumples.", "fol": "", "prediction": ["all x.(Apple(x) -> Crumples(x))"]}
{"id": "eqasc_train_6335", "nl": "an apple can change shape from smooth into compacted by physical force", "fol": "", "prediction": ["all x.(Apple(x) -> (ChangeShapeFromSmoothToCompactedByPhysicalForce(x)))"]}
{"id": "eqasc_train_6336", "nl": "paper can change shape from smooth into compacted by physical force", "fol": "", "prediction": ["all x.((Paper(x) & SmoothShape(x) & PhysicalForceCompact(x)) -> ChangesShapeFromToCompacted(x))"]}
{"id": "eqasc_train_6337", "nl": "Paper is then crumpled into the general shape and tied.", "fol": "", "prediction": ["all x.(Paper(x) -> (CrunchedIntoGeneralShape(x) & Tied(x)))"]}
{"id": "eqasc_train_6338", "nl": "Fertilization of gametes produces a diploid zygote.", "fol": "", "prediction": ["all x.((Gamete(x) & Fertilization(x)) -> ProducesDiploidZygote(x))"]}
{"id": "eqasc_train_6339", "nl": "Sperm and egg nuclei combine to form the diploid zygotic nucleus 2.", "fol": "", "prediction": ["all x y z.((Ssperm(x) & EggNucleus(y) & DiploidZygoticNucleus(z)) -> CombinesToForm(x,y,z))"]}
{"id": "eqasc_train_6340", "nl": "Sperm and egg nuclei combine to fertilize gametes.", "fol": "", "prediction": ["all x y.((Ssperm(x) & EggNucleus(y)) -> FertilizesGametes(x))"]}
{"id": "eqasc_train_6341", "nl": "Fertilization of ova produces a diploid zygote.", "fol": "", "prediction": ["all x.(FertilizationOfOvum(x) -> ProducesDiploidZygote(x))"]}
{"id": "eqasc_train_6342", "nl": "fertilization of sperm produces a diploid zygote", "fol": "", "prediction": ["all x y.((FertilizationOfSsperm(x) & DiploidZygote(y)) -> Produces(x,y))"]}
{"id": "eqasc_train_6343", "nl": "Zygotes are diploid and undergo cell division to become an embryo.", "fol": "", "prediction": ["all x.(Zygote(x) -> (Diploid(x) & UndergoesCellDividetion(x) & BecomesEmbryo(x)))"]}
{"id": "eqasc_train_6344", "nl": "Fertilization of gametes produces cell division", "fol": "", "prediction": ["all x y.((Fertilization(x) & Gamete(y)) -> ProducesCellDividection(x,y))"]}
{"id": "eqasc_train_6345", "nl": "Female gametes are called eggs.", "fol": "", "prediction": ["all x.(FemaleGamete(x) -> Egg(x))"]}
{"id": "eqasc_train_6346", "nl": "Fertilization of eggs produces a diploid zygote.", "fol": "", "prediction": ["all x.((FertilizationOfEggs(x) & ProducesDiploidZygote(x)) -> ProducesZygote(x))"]}
{"id": "eqasc_train_6347", "nl": "Fertilization of gametes produces something that becomes an embryo", "fol": "", "prediction": ["all x y.((FertilizationOfGametes(x) & Gamete(y)) -> (Produces(x,y) & BecomesEmbryo(x)))"]}
{"id": "eqasc_train_6348", "nl": "After fertilization of gametes it undergoes cell division to become an embryo", "fol": "", "prediction": ["all x y.((Gamete(x) & Fertilization(x) & Gamete(y)) -> UndergoesCellDividetionToBecomeEmbryo(x,y))"]}
{"id": "eqasc_train_6349", "nl": "fertilization of ova and spermatozoa produces a diploid zygote", "fol": "", "prediction": ["all x y.((Fertilization(x) & Ovar(y) & Spermatozoa(y)) -> ProducesDiploidZygote(x,y))"]}
{"id": "eqasc_train_6350", "nl": "Sexual reproduction requires formation of gametes, followed by fertilization.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> (RequiresGametes(x) & Fertilization(x)))"]}
{"id": "eqasc_train_6351", "nl": "Sexual reproduction produces a diploid zygote.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> ProducesDiploidZygote(x))"]}
{"id": "eqasc_train_6352", "nl": "Diploid zygote forms multicellular embryo in venter.", "fol": "", "prediction": ["all x.(DiploidZygote(x) -> FormsMulticellularEmbryo(x))"]}
{"id": "eqasc_train_6353", "nl": "Fertilization of gametes leads to formation of multicellular embryo in venter.", "fol": "", "prediction": ["all x y.((Gamete(x) & Fertilization(x) & Venturir(y)) -> MulticellularEmbryo(x,y))"]}
{"id": "eqasc_train_6354", "nl": "reproduction produces a diploid zygote.", "fol": "", "prediction": ["all x.(Reproduction(x) -> ProducesDiploidZygote(x))"]}
{"id": "eqasc_train_6355", "nl": "bacteria cause food poisoning", "fol": "", "prediction": ["all x.(Bacteria(x) -> CausesFoodPoisoning(x))"]}
{"id": "eqasc_train_6356", "nl": "bacteria in food is responsible for illness", "fol": "", "prediction": ["all x.((Bacteria(x) & Food(x)) -> ResponsibleForIllness(x))"]}
{"id": "eqasc_train_6357", "nl": "Botulism is food poisoning produced by a bacteria.", "fol": "", "prediction": ["all x.(Botulism(x) -> (FoodPoisoning(x) & ProducedByBacteria(x)))"]}
{"id": "eqasc_train_6358", "nl": "Bacteria can cause botulism.", "fol": "", "prediction": ["all x.(Bacteria(x) -> CausesBotulism(x))"]}
{"id": "eqasc_train_6359", "nl": "Bacteria grow best at room temperature.", "fol": "", "prediction": ["all x.(Bacteria(x) -> GrowsBestAtRoomTemperature(x))"]}
{"id": "eqasc_train_6360", "nl": "storing food at room temperature can cause food poisoning", "fol": "", "prediction": ["all x.((StoresFoodAtRoomTemperature(x) & RoomTemperature(x)) -> FoodPoisoning(x))"]}
{"id": "eqasc_train_6361", "nl": "Food poisoning is a serious illness.", "fol": "", "prediction": ["all x.(FoodPoisoning(x) -> SeriousIllness(x))"]}
{"id": "eqasc_train_6362", "nl": "bacteria causes serious illness", "fol": "", "prediction": ["all x.(Bacteria(x) -> CausesSeriousIllness(x))"]}
{"id": "eqasc_train_6363", "nl": "Examples are the E-Coli bacteria and Hanta virus.", "fol": "", "prediction": ["(Examples: EColiBacteria(x) & HantaVirus(x))"]}
{"id": "eqasc_train_6364", "nl": "E-Coli causes food poisoning", "fol": "", "prediction": ["all x.(EColi(x) -> CausesFoodPoisoning(x))"]}
{"id": "eqasc_train_6365", "nl": "Vomiting tends to be related to food poisoning.", "fol": "", "prediction": ["all x.(Vibration(x) -> FoodPoisoning(x))"]}
{"id": "eqasc_train_6366", "nl": "vomiting tends to be related to bacteria", "fol": "", "prediction": ["all x.(Vibration(x) -> (RelatedToBacteria(x) & HasBacteria(x)))"]}
{"id": "eqasc_train_6367", "nl": "Raw juices contain dangerous bacteria.", "fol": "", "prediction": ["all x.(RawJuice(x) -> ContainsDangerousBacteria(x))"]}
{"id": "eqasc_train_6368", "nl": "Raw juices can cause food poisoning.", "fol": "", "prediction": ["all x.(RawJuice(x) -> CanCauseFoodPoisoning(x))"]}
{"id": "eqasc_train_6369", "nl": "coal is used for generating heat by burning", "fol": "", "prediction": ["all x.(Coal(x) -> (GeneratesHeatByBurning(x) & BurnsCoal(x)))"]}
{"id": "eqasc_train_6370", "nl": "Here the coal is burned to produce electricity.", "fol": "", "prediction": ["all x.(Coal(x) -> BurnedToProduceElectricity(x))"]}
{"id": "eqasc_train_6371", "nl": "Coal is used for generating heat and electricity. ", "fol": "", "prediction": ["all x.(Coal(x) -> (GeneratesHeat(x) & GeneratesElectricity(x)))"]}
{"id": "eqasc_train_6372", "nl": "Coal and lignite are the lithified remains of plants.", "fol": "", "prediction": ["all x y.((Coal(x) & Lignite(y)) -> LithifiedRemains(x,y))"]}
{"id": "eqasc_train_6373", "nl": "The lithified remains of plants are used for generating heat by burning.", "fol": "", "prediction": ["all x y.((LithifiedRemains(x) & Plant(y)) -> GeneratesHeatByBurning(x,y))"]}
{"id": "eqasc_train_6374", "nl": "Coal burning can cause air pollution and generate carcinogens.", "fol": "", "prediction": ["all x.(CoalBurning(x) -> (CausesAirPollution(x) & GeneratesCarcinogens(x)))"]}
{"id": "eqasc_train_6375", "nl": "Heating with coal can cause air pollution", "fol": "", "prediction": ["all x.(HeatingWithCoal(x) -> CausesAirPollution(x))"]}
{"id": "eqasc_train_6376", "nl": "CO 2 and SO 2 are both given off when coal is burned to provide heat or to generate electricity.", "fol": "", "prediction": ["all x.((CoalBurned(x) & (ProvidesHeat(x) | GeneratesElectricity(x))) -> GivenOff(x))"]}
{"id": "eqasc_train_6377", "nl": "When is coal burning CO 2 is given off", "fol": "", "prediction": ["all x.((CoalBurning(x) & CO2GiftOff(x)) -> CoalBurning(x))"]}
{"id": "eqasc_train_6378", "nl": "fossil fuels are used for generating heat by burning", "fol": "", "prediction": ["all x.(FossilFuel(x) -> (GeneratesHeatByBurning(x) & Uses(x,FossilFuels)))"]}
{"id": "eqasc_train_6379", "nl": "Coal forms from dead plants, compacted.", "fol": "", "prediction": ["all x.(Coal(x) -> (FormsFromDeadPlants(x) & Compacted(x)))"]}
{"id": "eqasc_train_6380", "nl": "Compacted dead plants are used for generating heat by burning.", "fol": "", "prediction": ["all x.(ComactedDeadPlant(x) -> GeneratesHeatByBurning(x))"]}
{"id": "eqasc_train_6381", "nl": "dead plants can generate heat", "fol": "", "prediction": ["all x.((DeadPlant(x) & GeneratesHeat(x)) -> CanGenerateHeat(x))"]}
{"id": "eqasc_train_6382", "nl": "Chemical energy stored in coal is released as heat energy when the coal is burned.", "fol": "", "prediction": ["all x y.((Coal(x) & ChemicalEnergy(x) & StoredIn(x,y)) -> ReleasedAsHeatEnergy(x))"]}
{"id": "eqasc_train_6383", "nl": "coal releases heat energy", "fol": "", "prediction": ["all x.(Coal(x) -> ReleasesHeatEnergy(x))"]}
{"id": "eqasc_train_6384", "nl": "Gasoline is extremely flammable and can explode and burn if ignited.", "fol": "", "prediction": ["all x.(Gasoline(x) -> (ExtremelyFlammable(x) & Explodes(x) & Burns(x)))"]}
{"id": "eqasc_train_6385", "nl": "coal is used for generating heat and can explode", "fol": "", "prediction": ["all x.(Coal(x) -> (GeneratesHeat(x) & CanBlast(x)))"]}
{"id": "eqasc_train_6386", "nl": "Dead vegetation settles and becomes peat, a precursor of coal.", "fol": "", "prediction": ["all x.(DeadVegetation(x) -> (Sits(x) & BecomesPat(x) & PrecursorOfCoal(x)))"]}
{"id": "eqasc_train_6387", "nl": "Dead vegetation becomes something that is burned to generate heat", "fol": "", "prediction": ["all x y.((DeadVegetation(x) & Burned(x)) -> GeneratesHeat(x,y))"]}
{"id": "eqasc_train_6388", "nl": "Thus, the food is cooked by heat generated internally.", "fol": "", "prediction": ["all x.((Food(x) & HeatGeneratedInternally(x)) -> CookedBy(x,y))"]}
{"id": "eqasc_train_6389", "nl": "coal can be used to cook food", "fol": "", "prediction": ["all x y.((Coal(x) & Food(y)) -> Cooks(x,y))"]}
{"id": "eqasc_train_6390", "nl": "Heat comes out the top and can be used for cooking or space heating.", "fol": "", "prediction": ["all x.(Heat(x) -> (ComesOutTop(x) & (Cooking(x) | SpaceHeating(x))))"]}
{"id": "eqasc_train_6391", "nl": "Coal can be used for cooking food.", "fol": "", "prediction": ["all x.(Coal(x) -> CooksFood(x))"]}
{"id": "eqasc_train_6392", "nl": "Coal arrives at the power station coal handling area.", "fol": "", "prediction": ["all x.(Coal(x) -> ArrivesAtPowerStationCoalHandlingArea(x))"]}
{"id": "eqasc_train_6393", "nl": "generating heat by burning occurs at power stations", "fol": "", "prediction": ["all x y.((PowerStation(x) & PowerStation(y)) -> (GeneratesHeatByBurning(x,y)))"]}
{"id": "eqasc_train_6394", "nl": "Coal releases mercury when it is burned.", "fol": "", "prediction": ["all x.((Coal(x) & Burned(x)) -> ReleasesMercury(x))"]}
{"id": "eqasc_train_6395", "nl": "Some methods of generating heat release mercury.", "fol": "", "prediction": ["exists x.(Method(x) & GeneratesHeat(x) & ReleasesMercury(x))"]}
{"id": "eqasc_train_6396", "nl": "fat is used to keep animals warm", "fol": "", "prediction": ["all x y.((Fat(x) & Animal(y)) -> KeepsWarm(x,y))"]}
{"id": "eqasc_train_6397", "nl": "Some animals hibernate, living on stored fat until the warm weather returns.", "fol": "", "prediction": ["exists x.(Animal(x) & Hibernates(x) & LivesOnStoredFat(x))"]}
{"id": "eqasc_train_6398", "nl": "animals use fat to store energy", "fol": "", "prediction": ["all x.(Animal(x) -> UsesFatToStoreEnergy(x))"]}
{"id": "eqasc_train_6399", "nl": "Humans are a new type of animal.", "fol": "", "prediction": ["all x.(Human(x) -> NewAnimal(x))"]}
{"id": "eqasc_train_6400", "nl": "fat is used to keep humans warm", "fol": "", "prediction": ["all x y.((Fat(x) & Human(y)) -> KeepsWarm(x,y))"]}
{"id": "eqasc_train_6401", "nl": "Fat is used to provide warmth and security.", "fol": "", "prediction": ["all x.(Fat(x) -> (ProvidesWarmth(x) & ProvidesSecurity(x)))"]}
{"id": "eqasc_train_6402", "nl": "Additionally, a layer of fat beneath the skin provides insulation.", "fol": "", "prediction": ["all x.((LayerOfFat(x) & Underskin(x)) -> ProvidesInsulation(x))"]}
{"id": "eqasc_train_6403", "nl": "Animals have insulation to stay warm.", "fol": "", "prediction": ["all x.(Animal(x) -> HasInsulation(x))"]}
{"id": "eqasc_train_6404", "nl": "Fat is used to protect a bear from the cold", "fol": "", "prediction": ["all x y.((Fat(x) & Bear(y)) -> ProtectsFromCold(x,y))"]}
{"id": "eqasc_train_6405", "nl": "Pigs are fat and kind of short.", "fol": "", "prediction": ["all x.(Pig(x) -> (Fat(x) & Short(x)))"]}
{"id": "eqasc_train_6406", "nl": "pigs are warm", "fol": "", "prediction": ["all x.(Pig(x) -> Warm(x))"]}
{"id": "eqasc_train_6407", "nl": "Food turns into fat.", "fol": "", "prediction": ["all x.(Food(x) -> Fat(x))"]}
{"id": "eqasc_train_6408", "nl": "Animals need food to keep warm.", "fol": "", "prediction": ["all x.(Animal(x) -> NeedsFoodToKeepWarm(x))"]}
{"id": "eqasc_train_6409", "nl": "Fats Fats provide energy.", "fol": "", "prediction": ["all x.(Fat(x) -> ProvidesEnergy(x))"]}
{"id": "eqasc_train_6410", "nl": "Energy is used to keep animals warm.", "fol": "", "prediction": ["all x.(Energy(x) -> KeepsAnimalsWarm(x))"]}
{"id": "eqasc_train_6411", "nl": "Plants that shed their leaves seasonally each year are called deciduous plants.", "fol": "", "prediction": ["all x.((Plant(x) & ShedsLeavesSeasonally(x)) -> DeciduousPlant(x))"]}
{"id": "eqasc_train_6412", "nl": "Ginkgo biloba is deciduous.", "fol": "", "prediction": ["all x.(GinkgoBiloba(x) -> Deciduous(x))"]}
{"id": "eqasc_train_6413", "nl": "Ginkgo biloba sheds its leaves seasonally", "fol": "", "prediction": ["all x.(GinkgoBiloba(x) -> ShedsLeavesSeasonally(x))"]}
{"id": "eqasc_train_6414", "nl": "Trees here are largely deciduous, shedding their leaves in the dry season.", "fol": "", "prediction": ["all x.(Tree(x) -> (Deciduous(x) & ShedsLeavesInDrySeason(x)))"]}
{"id": "eqasc_train_6415", "nl": "Plants shed their leaves in the dry season each year.", "fol": "", "prediction": ["all x.(Plant(x) -> ShedsLeavesInDrySeason(x))"]}
{"id": "eqasc_train_6416", "nl": "Bog birch is a deciduous shrub.", "fol": "", "prediction": ["all x.(BoardBerch(x) -> DeciduousShrub(x))"]}
{"id": "eqasc_train_6417", "nl": "bog birches shed their leaves seasonally", "fol": "", "prediction": ["all x.(BoodBerch(x) -> ShedsLeavesSeasonally(x))"]}
{"id": "eqasc_train_6418", "nl": "mulberry trees shed leaves seasonally", "fol": "", "prediction": ["all x.(MulberryTree(x) -> ShedsLeavesSeasonally(x))"]}
{"id": "eqasc_train_6419", "nl": "ginkgo biloba sheds its leaves seasonally each year", "fol": "", "prediction": ["all x.(GinkgoBiloba(x) -> ShedsLeavesSeasonally(x))"]}
{"id": "eqasc_train_6420", "nl": "All trees are in the Kingdom Plantae, the plants.", "fol": "", "prediction": ["all x.(Tree(x) -> (InKingdomPlantae(x) & Plants(x)))"]}
{"id": "eqasc_train_6421", "nl": "Members of the kingdom Plantae that shed their leaves seasonally each year are called deciduous.", "fol": "", "prediction": ["all x.((MemberOfKingdomPlantae(x) & ShedsLeavesSeasonally(x)) -> Deciduous(x))"]}
{"id": "eqasc_train_6422", "nl": "Grapevines are woody deciduous plants.", "fol": "", "prediction": ["all x.(Grapevine(x) -> WoodyDeciduousPlant(x))"]}
{"id": "eqasc_train_6423", "nl": "Grapevines are plants that shed their leaves seasonally.", "fol": "", "prediction": ["all x.(Grapevine(x) -> (ShedsLeavesSeasonally(x) & Plant(x)))"]}
{"id": "eqasc_train_6424", "nl": "Mulberry trees seasonally shed their leaves.", "fol": "", "prediction": ["all x.(MulberryTree(x) -> SeasonallyShedsLeaves(x))"]}
{"id": "eqasc_train_6425", "nl": "Vines are perennial, deciduous climbing plants.", "fol": "", "prediction": ["all x.(Vine(x) -> (PerennialDeciduousClimbingPlant(x) & ClimbingPlant(x)))"]}
{"id": "eqasc_train_6426", "nl": "Vines shed their leaves seasonally each year", "fol": "", "prediction": ["all x.(Vine(x) -> ShedsLeavesSeasonally(x))"]}
{"id": "eqasc_train_6427", "nl": "Grapevines shed their leaves seasonally each year.", "fol": "", "prediction": ["all x.(Grapevine(x) -> ShedsLeavesSeasonally(x))"]}
{"id": "eqasc_train_6428", "nl": "Shade trees can be deciduous.", "fol": "", "prediction": ["all x.(ShadeTree(x) -> Deciduous(x))"]}
{"id": "eqasc_train_6429", "nl": "Some shade trees can shed their leaves", "fol": "", "prediction": ["exists x.(ShadeTree(x) & ShedLeaves(x))"]}
{"id": "eqasc_train_6430", "nl": "vines shed their leaves seasonally each year", "fol": "", "prediction": ["all x.(Vine(x) -> ShedsLeavesSeasonally(x))"]}
{"id": "eqasc_train_6431", "nl": "Ginkgo biloba sheds their leaves seasonally each year", "fol": "", "prediction": ["all x.(GinkgoBiloba(x) -> ShedsLeavesSeasonally(x))"]}
{"id": "eqasc_train_6432", "nl": "Lemmons willow is a deciduous shrub.", "fol": "", "prediction": ["all x.(LemmonsWillow(x) -> DeciduousShrub(x))"]}
{"id": "eqasc_train_6433", "nl": "plants that shed their leaves seasonally each year include lemmons willow.", "fol": "", "prediction": ["all x.((Plant(x) & ShedsLeavesSeasonally(x)) -> LemmonsWillow(x))"]}
{"id": "eqasc_train_6434", "nl": "Grapevines are woody and shed their leaves seasonally", "fol": "", "prediction": ["all x.(Grapevine(x) -> (Woody(x) & ShedsLeavesSeasonally(x)))"]}
{"id": "eqasc_train_6435", "nl": "the looseness of soil increases the amount of oxygen in that soil", "fol": "", "prediction": ["all x.(LoosenessOfSoil(x) -> IncreasesOxygenInSoil(x))"]}
{"id": "eqasc_train_6436", "nl": "Oxygen in the soil is vital for healthy roots.", "fol": "", "prediction": ["all x.((Soil(x) & OxygenInSoil(x)) -> VitalForHealthyRoots(x))"]}
{"id": "eqasc_train_6437", "nl": "Looseness of soil increases the odds of healthy roots.", "fol": "", "prediction": ["all x.(LoosenessOfSoil(x) -> IncreasesOddsOfHealthyRoots(x))"]}
{"id": "eqasc_train_6438", "nl": "Without oxygen in the soil, most plants die.", "fol": "", "prediction": ["all x.((Plant(x) & -OxygenInSoil(x)) -> Dies(x))"]}
{"id": "eqasc_train_6439", "nl": "Plants may die if there is no looseness in the soil.", "fol": "", "prediction": ["all x.((Plant(x) & -LoosenessInSoil(x)) -> MayDie(x))"]}
{"id": "eqasc_train_6440", "nl": "looseness of soil is vital for healthy roots", "fol": "", "prediction": ["all x.((SoilLooseness(x) & VitalForHealthyRoots(x)) -> VitalForHealthyRoots(x))"]}
{"id": "eqasc_train_6441", "nl": "The looseness of soil is vital for healthy roots", "fol": "", "prediction": ["all x.(LoosenessOfSoil(x) -> VitalForHealthyRoots(x))"]}
{"id": "eqasc_train_6442", "nl": "Cultivation is easier if soil is loose.", "fol": "", "prediction": ["all x.((SoilLoos(x) & CultivationEasier(x)) -> Easy(x))"]}
{"id": "eqasc_train_6443", "nl": "soil with more oxygen is easier to cultivate", "fol": "", "prediction": ["all x.((Soil(x) & MoreOxygen(x)) -> EasierToCultivate(x))"]}
{"id": "eqasc_train_6444", "nl": "looseness of soil helps plants survive", "fol": "", "prediction": ["all x y.((Soil(x) & Soil(y)) -> HelpsPlantsSurvive(x,y))"]}
{"id": "eqasc_train_6445", "nl": "Soil oxygen effects on root development.", "fol": "", "prediction": ["all x.(SoilOxygenEffectsOnRootDevelopment(x) -> -SoilOxygenEffectsOnRootDevelopment(x))"]}
{"id": "eqasc_train_6446", "nl": "Root development depends on the looseness of dirt", "fol": "", "prediction": ["all x.(RootDevelopment(x) -> DependsOnLoosnessOfDirt(x))"]}
{"id": "eqasc_train_6447", "nl": "Arteries generally carry oxygen-rich blood.", "fol": "", "prediction": ["all x.(Arterie(x) -> CarriesOxygenRichBlood(x))"]}
{"id": "eqasc_train_6448", "nl": "Energy levels can plummet due to lack of oxygen-rich red blood cells.", "fol": "", "prediction": ["all x.((EnergyLevel(x) & LackOxygenRichRedBloodCells(x)) -> Plummets(x))"]}
{"id": "eqasc_train_6449", "nl": "Arteries are needed to maintain energy levels ", "fol": "", "prediction": ["all x.(Arteries(x) -> NeededToMaintainEnergyLevels(x))"]}
{"id": "eqasc_train_6450", "nl": "Arteries and veins are blood vessels.", "fol": "", "prediction": ["all x.((Arteries(x) | Veins(x)) -> BloodVessel(x))"]}
{"id": "eqasc_train_6451", "nl": "blood vessels carry oxygen", "fol": "", "prediction": ["all x.(BloodVessel(x) -> CarriesOxygen(x))"]}
{"id": "eqasc_train_6452", "nl": "Arteries turn into smaller arteries called arterioles.", "fol": "", "prediction": ["all x.(Arteries(x) -> (TurnsIntoSmallerArtery(x) & Arterioles(x)))"]}
{"id": "eqasc_train_6453", "nl": "Arterioles are small tunnels that carry oxygen-rich blood", "fol": "", "prediction": ["all x.(Arteriole(x) -> (SmallTunnel(x) & CarriesOxygenRichBlood(x)))"]}
{"id": "eqasc_train_6454", "nl": "Arterial Blood Pressure Arteries conduct blood away from the heart.", "fol": "", "prediction": ["all x.(ArterialBloodPressure(x) -> ConductsBloodAwayFromHeart(x))"]}
{"id": "eqasc_train_6455", "nl": "blood going away from the heart is generally oxygen-rich", "fol": "", "prediction": ["all x.((Blood(x) & Heart(x)) -> OxygenRich(x))"]}
{"id": "eqasc_train_6456", "nl": "Smoking constricts arteries and increases clotting to block arteries.", "fol": "", "prediction": ["all x.(Smoking(x) -> (ConstrictsArteries(x) & IncreasesClotting(x) & BlocksArteries(x)))"]}
{"id": "eqasc_train_6457", "nl": "Smoking interferes with the transport of oxygen-rich blood in the body", "fol": "", "prediction": ["all x y.((Smoking(x) & OxygenRichBlood(y)) -> InterferesWithTransport(x,y))"]}
{"id": "eqasc_train_6458", "nl": "Oxygen-rich blood is bright red.", "fol": "", "prediction": ["all x.(OxygenRichBlood(x) -> BrightRed(x))"]}
{"id": "eqasc_train_6459", "nl": "Arteries generally carry something bright red.", "fol": "", "prediction": ["all x.(Arterie(x) -> (CarriesBrightRed(x) & CarriesBrightRed(x)))"]}
{"id": "eqasc_train_6460", "nl": "Blood is a liquid organ.", "fol": "", "prediction": ["all x.(Blood(x) -> LiquidOrgan(x))"]}
{"id": "eqasc_train_6461", "nl": "Arteries carry oxygen rich liquid.", "fol": "", "prediction": ["all x.(Arterie(x) -> CarriesOxygenRichLiquid(x))"]}
{"id": "eqasc_train_6462", "nl": "arteries carry bright red blood", "fol": "", "prediction": ["all x.(Artery(x) -> CarriesBrightRedBlood(x))"]}
{"id": "eqasc_train_6463", "nl": "Bright red fluid blood is the exception, but has been recorded.", "fol": "", "prediction": ["all x.(BrightRedFluidBlood(x) -> (Exception(x) & Recorded(x)))"]}
{"id": "eqasc_train_6464", "nl": "Arteries generally carry bright red fluid", "fol": "", "prediction": ["all x.(Arterie(x) -> CarriesBrightRedFluid(x))"]}
{"id": "eqasc_train_6465", "nl": "About O2, every living thing requires oxygen in order to live.", "fol": "", "prediction": ["all x.(O2(x) -> RequiresOxygen(x))"]}
{"id": "eqasc_train_6466", "nl": "Arteries generally carry blood full of O2.", "fol": "", "prediction": ["all x.(Arterie(x) -> CarriesBloodFullO2(x))"]}
{"id": "eqasc_train_6467", "nl": "Most strokes occur when a blood clot blocks an artery that carries oxygenated blood to the brain.", "fol": "", "prediction": ["all x y.((BloodClot(x) & Artery(y) & Blocks(x,y)) -> CarriesOxygenatedBloodToBrain(x))"]}
{"id": "eqasc_train_6468", "nl": "Strokes occur when clogged arteries prevent oxygenated blood from reaching the brain. ", "fol": "", "prediction": ["all x.(Stroke(x) -> (CloggedArteries(x) & PreventsOxygenatedBloodFromReachingBrain(x)))"]}
{"id": "eqasc_train_6469", "nl": "Without a blood supply, people are in danger of dying.", "fol": "", "prediction": ["all x.((Person(x) & -HasBloodSupply(x)) -> InDangerousOfDying(x))"]}
{"id": "eqasc_train_6470", "nl": "without oxygen, people can die", "fol": "", "prediction": ["all x.((Person(x) & -Oxygen(x)) -> CanDie(x))"]}
{"id": "eqasc_train_6471", "nl": "Arteries carry blood away from the heart.", "fol": "", "prediction": ["all x.(Arterie(x) -> CarriesBlood(x))"]}
{"id": "eqasc_train_6472", "nl": "Something that brings blood away from the heart carries oxygen-rich blood.", "fol": "", "prediction": ["all x.((BreathesBlood(x) & BringsBloodAwayFromHeart(x)) -> CarriesOxygenRichBlood(x))"]}
{"id": "eqasc_train_6473", "nl": "Oxygen-rich blood is critical for erectile health.", "fol": "", "prediction": ["all x.(OxygenRichBlood(x) -> CriticalForErectileHealth(x))"]}
{"id": "eqasc_train_6474", "nl": "Arteries are critical for erectile health.", "fol": "", "prediction": ["all x.(Arterie(x) -> CriticalForErectileHealth(x))"]}
{"id": "eqasc_train_6475", "nl": "arterioles carry oxygen-rich blood", "fol": "", "prediction": ["all x.(Arteriole(x) -> CarriesOxygenRichBlood(x))"]}
{"id": "eqasc_train_6476", "nl": "Arteries carry blood away from our heart.", "fol": "", "prediction": ["all x.(Arterie(x) -> CarriesBlood(x))"]}
{"id": "eqasc_train_6477", "nl": "Oxygen-rich blood is carried away from our heart.", "fol": "", "prediction": ["all x.(OxygenRichBlood(x) -> CarriedAwayFromHeart(x))"]}
{"id": "eqasc_train_6478", "nl": "Arteries regulate blood pressure.", "fol": "", "prediction": ["all x.(Arterie(x) -> RegulatesBloodPressure(x))"]}
{"id": "eqasc_train_6479", "nl": "arteries are pressure regulated", "fol": "", "prediction": ["all x.(Arteries(x) -> PressureRegulated(x))"]}
{"id": "eqasc_train_6480", "nl": "Freshwater biomes have water that contains little or no salt.", "fol": "", "prediction": ["all x.(FreshwaterBiome(x) -> (HasWater(x) & (ContainsLittleSalt(x) | ContainsNoSalt(x))))"]}
{"id": "eqasc_train_6481", "nl": "freshwater global ecosystems have water that contains little or no salt", "fol": "", "prediction": ["all x.((FreshwaterGlobalEcosystem(x) & Water(x)) -> (LittleOrNoSalt(x) | -LittleOrNoSalt(x)))"]}
{"id": "eqasc_train_6482", "nl": "freshwater ecosystems have water that contains little or no salt", "fol": "", "prediction": ["all x.((FreshwaterEcosystem(x) & Water(x)) -> (LittleSalt(x) | NoSalt(x)))"]}
{"id": "eqasc_train_6483", "nl": "Several freshwater lakes are nearby.", "fol": "", "prediction": ["exists x.(FreshwaterLake(x) & Nearby(x))"]}
{"id": "eqasc_train_6484", "nl": "lakes can contain little or no salt", "fol": "", "prediction": ["all x.(Lake(x) -> (LittleSalt(x) | NoSalt(x)))"]}
{"id": "eqasc_train_6485", "nl": "Estuaries display characteristics of both marine and freshwater biomes.", "fol": "", "prediction": ["all x.(Estuary(x) -> (DisplaysMarineBiomes(x) & DisplaysFreshwaterBiomes(x)))"]}
{"id": "eqasc_train_6486", "nl": "freshwater environments have little salt", "fol": "", "prediction": ["all x.(FreshwaterEnvironment(x) -> (LittleSalt(x) & -LittleSalt(x)))"]}
{"id": "eqasc_train_6487", "nl": "Freshwater biomes have water that contains little or not sodium.", "fol": "", "prediction": ["all x.(FreshwaterBiome(x) -> (ContainsLittleSodium(x) | ContainsNoSodium(x)))"]}
{"id": "eqasc_train_6488", "nl": "Salinity is the measure of salts in the water.", "fol": "", "prediction": ["all x.(Salinity(x) -> MeasuresSaltsInWater(x))"]}
{"id": "eqasc_train_6489", "nl": "Freshwater biomes have very low salinity. ", "fol": "", "prediction": ["all x.(FreshwaterBiome(x) -> VeryLowSalinity(x))"]}
{"id": "eqasc_train_6490", "nl": "Terrapins are freshwater turtles.", "fol": "", "prediction": ["all x.(Terrain(x) -> FreshwaterTurtle(x))"]}
{"id": "eqasc_train_6491", "nl": "Terrapins live in water that contains little or no salt.", "fol": "", "prediction": ["all x.(Terrain(x) -> (LivesInWater(x) & (LittleSalt(x) | NoSalt(x))))"]}
{"id": "eqasc_train_6492", "nl": "Freshwater biomes have suffered mainly from pollution.", "fol": "", "prediction": ["all x.(FreshwaterBiome(x) -> (SufferedFromPollution(x) & MainlyPollution(x)))"]}
{"id": "eqasc_train_6493", "nl": "Biomes that have suffered mainly from pollution have water that contains little or no salt.", "fol": "", "prediction": ["all x.((Biome(x) & Pollution(x)) -> (ContainsLittleOrNoSalt(x)))"]}
{"id": "eqasc_train_6494", "nl": "cellular respiration is when a cell converts from oxygen and carbohydrates into carbon dioxide, water, and energy", "fol": "", "prediction": ["all x.(CellularRespiration(x) -> (ConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))"]}
{"id": "eqasc_train_6495", "nl": "Without enough oxygen cell respiration is reduced, leaving a person tired and lacking in energy.", "fol": "", "prediction": ["all x.((Person(x) & -EnoughOxygenCellRespiration(x)) -> (Reduced(x) & Tired(x) & LackingEnergy(x)))"]}
{"id": "eqasc_train_6496", "nl": "A person is tired and lacking in energy without cellular respiration.", "fol": "", "prediction": ["all x.(Person(x) -> (Tense(x) & LacksEnergy(x) & -CellularRespiration(x)))"]}
{"id": "eqasc_train_6497", "nl": "Lymphocytes are B cells, T cells and NK cells.", "fol": "", "prediction": ["all x.(Lymphocyte(x) -> (Bcell(x) | Tcell(x) | NKCell(x)))"]}
{"id": "eqasc_train_6498", "nl": "Lymphocytes use respiration to convert oxygen and carbohydrates into carbon dioxide, water and energy", "fol": "", "prediction": ["all x.(Lymphocyte(x) -> (UsesRespiration(x) & ConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))"]}
{"id": "eqasc_train_6499", "nl": "Cellular respiration is a requirement for life.", "fol": "", "prediction": ["all x.(CellularRespiration(x) -> RequirementForLife(x))"]}
{"id": "eqasc_train_6500", "nl": "cells converting oxygen and carbohydrates into carbon dioxide, water, and energy is a requirement for life", "fol": "", "prediction": ["all x.((Cell(x) & ConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)) -> RequirementForLife(x))"]}
{"id": "eqasc_train_6501", "nl": "a requirement for life is when a cell converts from oxygen and carbohydrates into carbon dioxide, water, and energy", "fol": "", "prediction": ["all x.((Cell(x) & ConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)) -> RequirementForLife(x))"]}
{"id": "eqasc_train_6502", "nl": "A requirement for life is for cells to convert from oxygen and carbohydrates into carbon dioxide, water and energy.", "fol": "", "prediction": ["all x.((Cell(x) & OxygenConversion(x) & CarbohydratesConversion(x)) -> (CarbonDioxideWaterEnergy(x)))"]}
{"id": "eqasc_train_6503", "nl": "Cellular respiration involves a series of enzyme-mediated reactions.", "fol": "", "prediction": ["all x.(CellularRespiration(x) -> InvolvesEnzymeMediatedReactions(x))"]}
{"id": "eqasc_train_6504", "nl": "a series of enzyme-mediated reactions is when a cell converts from oxygen and carbohydrates into carbon dioxide, water, and energy", "fol": "", "prediction": ["all x y z.((EnzymeMediatedReaction(x) & Cell(y) & OxygenAndCarbohydrates(z) & ConvertsFromToCarbonDioxideWaterAndEnergy(y,z)) -> (ConvertsToCarbonDioxideWaterAndEnergy(y,z) & ConvertsToEnergy(y,x)))"]}
{"id": "eqasc_train_6505", "nl": "Cellular respiration occurs in the mitochondria.", "fol": "", "prediction": ["all x.(CellularRespiration(x) -> OccursInMitochondria(x))"]}
{"id": "eqasc_train_6506", "nl": "a cell converts oxygen and carbohydrates into carbon dioxide, water, and energy in the mitochondria", "fol": "", "prediction": ["all x y z.((Cell(x) & Oxygen(y) & Carbohydrates(z) & CarbonDioxide(x) & Water(x) & Energy(x)) -> ConvertsTo(x,y,z))"]}
{"id": "eqasc_train_6507", "nl": "Chemically, cellular respiration is the exact opposite of photosynthesis.", "fol": "", "prediction": ["all x.(Chemically(x) -> OppositeOfPhotosynthesis(x))"]}
{"id": "eqasc_train_6508", "nl": "the chemical opposite of photosynthesis is when cells convert oxygen and carbs into carbon dioxide, water, and energy", "fol": "", "prediction": ["all x y.((ChemicalOpponentOfPhotosynthesis(x) & CellsConvertOxygenAndCarbs(y) & CarbonDioxideWaterEnergy(x)) -> Photosynthesis(x))"]}
{"id": "eqasc_train_6509", "nl": "a magnet moving in a coil of copper wire can cause an electric current", "fol": "", "prediction": ["all x y.((Magnet(x) & CoilOfCuirdWire(y) & MovingIn(x,y)) -> CausesElectricCurrent(x))"]}
{"id": "eqasc_train_6510", "nl": "a magnet moving in a coil of copper can cause a flow of electrons", "fol": "", "prediction": ["all x y.((Magnet(x) & CoilOfCuid(y) & MovingIn(x,y)) -> CausesFlowOfElectrons(x))"]}
{"id": "eqasc_train_6511", "nl": "a magnet moving in a coil of copper wire can cause a flow of electrons", "fol": "", "prediction": ["all x y.((Magnet(x) & CoilOfCuirdWire(y) & MovingIn(x,y)) -> CausesFlowOfElectrons(x))"]}
{"id": "eqasc_train_6512", "nl": "An electric current is a flow of electric charge.", "fol": "", "prediction": ["all x.(ElectricCurrent(x) -> ElectricChargeFlow(x))"]}
{"id": "eqasc_train_6513", "nl": "a magnet moving in a coil of copper wire can cause a flow of electric charge", "fol": "", "prediction": ["all x y.((Magnet(x) & CoilOfCuirdWire(y) & MovingIn(x,y)) -> CausesFlowOfElectricCharge(x))"]}
{"id": "eqasc_train_6514", "nl": "Electricity is passed through the copper to magnetize the core.", "fol": "", "prediction": ["all x y.((Electricity(x) & Copper(y)) -> PassedThrough(x,y))"]}
{"id": "eqasc_train_6515", "nl": "copper can be magnetized", "fol": "", "prediction": ["all x.(CuivreMagnetized(x) -> CanBeMagnetized(x))"]}
{"id": "eqasc_train_6516", "nl": "a core is magnetized by electricity", "fol": "", "prediction": ["all x y.((Core(x) & Electricity(y)) -> MagnetizedBy(x,y))"]}
{"id": "eqasc_train_6517", "nl": "Echinoderms use pheromones to communicate with each other.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> UsesPheromonesToCommunicate(x))"]}
{"id": "eqasc_train_6518", "nl": "starfish use pheromones to communicate with each other", "fol": "", "prediction": ["all x y.((Starfish(x) & Pheromone(y)) -> UsesToCommunicate(x,y))"]}
{"id": "eqasc_train_6519", "nl": "Scent marks contain molecules called pheromones.", "fol": "", "prediction": ["all x.(ScentMark(x) -> ContainsPheromones(x))"]}
{"id": "eqasc_train_6520", "nl": "echinoderms use scent to communicate", "fol": "", "prediction": ["all x.(Echinoderm(x) -> UsesScentToCommunicate(x))"]}
{"id": "eqasc_train_6521", "nl": "echinoids use pheremones to communicate", "fol": "", "prediction": ["all x.(Echinoid(x) -> UsesPheremonesToCommunicate(x))"]}
{"id": "eqasc_train_6522", "nl": "Starfish use pheromones to communicate with each other.", "fol": "", "prediction": ["all x.(Starfish(x) -> UsesPheromonesToCommunicate(x))"]}
{"id": "eqasc_train_6523", "nl": "at least some deuterostomes use pheromones to communicate with each other", "fol": "", "prediction": ["all x y.((Deuterostome(x) & Deuterostome(y)) -> UsesPheromonesToCommunicate(x,y))"]}
{"id": "eqasc_train_6524", "nl": "All echinoderms are marine and benthic.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> (Marine(x) & Benthic(x)))"]}
{"id": "eqasc_train_6525", "nl": "marine and benthic species use pheromones to communicate with each other", "fol": "", "prediction": ["all x y.((MarineSpecies(x) & BenthicSpecies(y)) -> UsesPheromonesToCommunicate(x,y))"]}
{"id": "eqasc_train_6526", "nl": "Ascothoracican barnacles attach to echinoderms or corals.", "fol": "", "prediction": ["all x.(AscothoracicanBarnacle(x) -> (AttachToEchinoderms(x) | AttachToCorals(x)))"]}
{"id": "eqasc_train_6527", "nl": "corals use pheromones to communicate with each other", "fol": "", "prediction": ["all x y.((Coral(x) & Pheromone(y)) -> UsesToCommunicate(x,y))"]}
{"id": "eqasc_train_6528", "nl": "Modern echinoderms include starfish and sea urchins.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> (Starfish(x) | SeaUrchin(x)))"]}
{"id": "eqasc_train_6529", "nl": "Starfish use pheromones to communicate with each other", "fol": "", "prediction": ["all x y.((Starfish(x) & Pheromone(y)) -> UsesToCommunicate(x,y))"]}
{"id": "eqasc_train_6530", "nl": "starfish use pheromones to communicate with each other.", "fol": "", "prediction": ["all x.(Starfish(x) -> UsesPheromonesToCommunicate(x))"]}
{"id": "eqasc_train_6531", "nl": "Echinoderms and molluscs use adhesives to grip the substrate during locomotion.", "fol": "", "prediction": ["all x y.((Echinoderm(x) & Mollusc(y)) -> UsesAdhesives(x,y))"]}
{"id": "eqasc_train_6532", "nl": "Echinoderms employ adhesives to grip surfaces", "fol": "", "prediction": ["all x.(Echinoderm(x) -> EmploysAdhesivesToGripSurfaces(x))"]}
{"id": "eqasc_train_6533", "nl": "deuterostomes use pheromones to communicate with each other", "fol": "", "prediction": ["all x y.((Deuterostome(x) & Pheromone(y)) -> UsesToCommunicate(x,y))"]}
{"id": "eqasc_train_6534", "nl": "Flowers produce spores that develop into gametophytes.", "fol": "", "prediction": ["all x y.((Flower(x) & Spore(y)) -> ProducesAndDevelopsIntoGametophytes(x,y))"]}
{"id": "eqasc_train_6535", "nl": "Tulips are heavy flowers.", "fol": "", "prediction": ["all x.(Tulip(x) -> HeavyFlower(x))"]}
{"id": "eqasc_train_6536", "nl": "tulips produce spores that develop into gametophytes.", "fol": "", "prediction": ["all x.(Tulips(x) -> (ProducesSpores(x) & DevelopsIntoGametophytes(x)))"]}
{"id": "eqasc_train_6537", "nl": "Roses are beautiful flowers.", "fol": "", "prediction": ["all x.(Rose(x) -> BeautifulFlower(x))"]}
{"id": "eqasc_train_6538", "nl": "roses produce spores that develop into gametophytes", "fol": "", "prediction": ["all x y.((Rose(x) & Spore(y)) -> ProducesAndDevelopsIntoGametophytes(x,y))"]}
{"id": "eqasc_train_6539", "nl": "All gametophytes are haploid.", "fol": "", "prediction": ["all x.(Gametophyte(x) -> Haploid(x))"]}
{"id": "eqasc_train_6540", "nl": "Flowers produce spores that develop into haploid entities.", "fol": "", "prediction": ["all x y.((Flower(x) & Spore(y)) -> ProducesAndDevelopsIntoHaploloidEntities(x,y))"]}
{"id": "eqasc_train_6541", "nl": "Pollen is the gametophyte generation of seed plants.", "fol": "", "prediction": ["all x.(Pollen(x) -> GametophyteGenerationOfSeedPlants(x))"]}
{"id": "eqasc_train_6542", "nl": "Flowers produce spores that develop into seed plants", "fol": "", "prediction": ["all x y z.((Flower(x) & Spore(y) & SeedPlant(z)) -> (Produces(x,y) & DevelopsInto(x,z)))"]}
{"id": "eqasc_train_6543", "nl": "tulips produce spores that develop into gametophytes", "fol": "", "prediction": ["all x y.((Tulips(x) & Spore(y)) -> ProducesAndDevelopsIntoGametophytes(x,y))"]}
{"id": "eqasc_train_6544", "nl": "Because ferns lack flowers and seeds, they reproduce through spores.", "fol": "", "prediction": ["all x.((Fern(x) & -HasFlowers(x) & HasSeeds(x)) -> ReproducesThroughSpores(x))"]}
{"id": "eqasc_train_6545", "nl": "ferns reproduce with spores", "fol": "", "prediction": ["all x.(Fern(x) -> ReproducesWithSpores(x))"]}
{"id": "eqasc_train_6546", "nl": "Unlike the unisexual gametophytes of a moss, a fern gametophyte is bisexual.", "fol": "", "prediction": ["all x y.((FernGametophyte(x) & Moss(y)) -> (UnisexualGametophyte(x,y) & BisexualGametophyte(x,y)))"]}
{"id": "eqasc_train_6547", "nl": "Flowers produce spores that can be bisexual", "fol": "", "prediction": ["all x y.((Flower(x) & Spore(y)) -> (Produces(x,y) & Bisexual(y)))"]}
{"id": "eqasc_train_6548", "nl": "Gametophytes arise from a protonema.", "fol": "", "prediction": ["all x.(Gametophyte(x) -> exists y.(Protonnema(y) & EmergesFrom(x,y)))"]}
{"id": "eqasc_train_6549", "nl": "Flowers produce spores from a protonema.", "fol": "", "prediction": ["all x y.((Flower(x) & Protonnema(y)) -> ProducesSporesFrom(x,y))"]}
{"id": "eqasc_train_6550", "nl": "Another interesting flower is the Orchid flower.", "fol": "", "prediction": ["(InterestingFlower(x) & Orchid(x))"]}
{"id": "eqasc_train_6551", "nl": "Orchids produce spores that develop into gametophytes.", "fol": "", "prediction": ["all x.(Orchid(x) -> (ProducesSpores(x) & DevelopsIntoGametophytes(x)))"]}
{"id": "eqasc_train_6552", "nl": "Gametophytes are photosynthetic and often heart-shaped.", "fol": "", "prediction": ["all x.(Gametophyte(x) -> (Photosynthetic(x) & HeartShaped(x)))"]}
{"id": "eqasc_train_6553", "nl": "Flowers produce spores that develop something heart-shaped.", "fol": "", "prediction": ["all x.(Flower(x) -> (ProducesSpores(x) & DevelopsHeartShape(x)))"]}
{"id": "eqasc_train_6554", "nl": "Daffodils are very nice flowers.", "fol": "", "prediction": ["all x.(Daffodil(x) -> NiceFlower(x))"]}
{"id": "eqasc_train_6555", "nl": "daffodils produce spores that develop into gametophytes", "fol": "", "prediction": ["all x y.((Daffodil(x) & Spore(y)) -> ProducesAndDevelopsIntoGametophytes(x,y))"]}
{"id": "eqasc_train_6556", "nl": "Ribosomes are structures in the cytoplasm where proteins are made.", "fol": "", "prediction": ["all x.(Ribosome(x) -> (StructureInCytoplasm(x) & ProteinsMadeIn(x)))"]}
{"id": "eqasc_train_6557", "nl": "Ribosomes are larger and distinct from the ribosomes found in prokaryotes.", "fol": "", "prediction": ["all x y.((Ribosome(x) & Prokaryote(y)) -> (Larger(x) & DistinctFromRibosome(x,y)))"]}
{"id": "eqasc_train_6558", "nl": "prokaryotes can make proteins", "fol": "", "prediction": ["all x.(Prokaryote(x) -> CanMakeProteins(x))"]}
{"id": "eqasc_train_6559", "nl": "Life without protein is impossible.", "fol": "", "prediction": ["all x.((Life(x) & -Protein(x)) -> Impossible(x))"]}
{"id": "eqasc_train_6560", "nl": "life without ribosomes is impossible", "fol": "", "prediction": ["all x.((LifeWithoutRribosomes(x) & -Ribosomes(x)) -> Impossible(x))"]}
{"id": "eqasc_train_6561", "nl": "Many antibiotices affect the structures in the cytoplasm where proteins are made.", "fol": "", "prediction": ["all x y.((Antibiotic(x) & MolecularStructure(y)) -> Affects(x,y))"]}
{"id": "eqasc_train_6562", "nl": "Ribosomes and other organelles begin to duplicate .", "fol": "", "prediction": ["all x y.((Ribosome(x) & Organelle(y)) -> Duplicates(x,y))"]}
{"id": "eqasc_train_6563", "nl": "Proteins are made in organelles within the cytoplasm.", "fol": "", "prediction": ["all x.(Protein(x) -> MadeInOrganelles(x))"]}
{"id": "eqasc_train_6564", "nl": "Rough endoplasmic reticulum has ribosomes attached d.", "fol": "", "prediction": ["all x.(RoughEndoplasmicReticulum(x) -> HasRibosomesAttachedD(x))"]}
{"id": "eqasc_train_6565", "nl": "structures where proteins are made are located on rough endoplasmic reticulum", "fol": "", "prediction": ["all x y.((Structure(x) & ProteinMaking(x)) -> RoughEndoplasmicReticulum(y))"]}
{"id": "eqasc_train_6566", "nl": "For example, proteins are made in an organelle called a ribosome.", "fol": "", "prediction": ["all x y.((Protein(x) & Organelle(y)) -> MadeIn(x,y))"]}
{"id": "eqasc_train_6567", "nl": "Proteins are made in an organelle in the cytoplasm", "fol": "", "prediction": ["all x y z.((Protein(x) & Organelle(y) & Cytoplasm(z)) -> MadeIn(x,y,z))"]}
{"id": "eqasc_train_6568", "nl": "Outside the nucleus is cytoplasm.", "fol": "", "prediction": ["all x.((Nucleus(x) & Outside(x)) -> Cytoplasm(x))"]}
{"id": "eqasc_train_6569", "nl": "Ribosomes are structures outside the nucleus where proteins are made.", "fol": "", "prediction": ["all x.(Ribosome(x) -> (OutsideNucleus(x) & ProteinsMade(x)))"]}
{"id": "eqasc_train_6570", "nl": "Bound and free ribosomes are structurally identical and interchangeable.", "fol": "", "prediction": ["all x.((Bound(x) | FreeRibosome(x)) -> (StructurallyIdentical(x) & Interchangeable(x)))"]}
{"id": "eqasc_train_6571", "nl": "Bound and free structures are in the cytoplasm where proteins are made", "fol": "", "prediction": ["all x y.((Bound(x) & Free(x)) -> (InCytoplasm(y) & ProteinsMadeIn(y)))"]}
{"id": "eqasc_train_6572", "nl": "E ndoplasmic reticulum are membranes attached to ribosomes.", "fol": "", "prediction": ["all x.(NdoplasmicReticulum(x) -> MembraneAttachableToRibosomes(x))"]}
{"id": "eqasc_train_6573", "nl": "Endoplasmic reticulum are membranes attached structures in the cytoplasm where proteins are made", "fol": "", "prediction": ["all x.(EndoplasmicReticulum(x) -> (MembraneStructure(x) & AttachedInCytoplasm(x) & ProteinsMadeInCytoplasm(x)))"]}
{"id": "eqasc_train_6574", "nl": "Roundworms reproduce sexually.", "fol": "", "prediction": ["all x.(Roundworm(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_6575", "nl": "nematodes reproduce sexually", "fol": "", "prediction": ["all x.(Nematode(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_6576", "nl": "Sexual reproduction is the combination of egg and sperm to form larvae.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> (CombinationOfEggAndSsperm(x) & FormsLarvae(x)))"]}
{"id": "eqasc_train_6577", "nl": "Roundworms reproduce by combining an egg and sperm to form larvae", "fol": "", "prediction": ["all x.(Roundworm(x) -> (ReproducesByCombiningEggAndSsperm(x) & FormsLarvae(x)))"]}
{"id": "eqasc_train_6578", "nl": "Roundworms make up the roundworm phylum, Nematoda.", "fol": "", "prediction": ["all x.(Roundworm(x) -> MakesUpNematoda(x))"]}
{"id": "eqasc_train_6579", "nl": "Nematoda reproduce sexually", "fol": "", "prediction": ["all x.(Nematoda(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_6580", "nl": "Something that nearly all puppies and kittens have reproduce sexually", "fol": "", "prediction": ["all x.((Puppies(x) | Kittens(x)) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_6581", "nl": "Roundworm eggs are comparatively large.", "fol": "", "prediction": ["all x.(Roundworm(x) -> ComparativelyLarge(x))"]}
{"id": "eqasc_train_6582", "nl": "eggs are used to reproduce", "fol": "", "prediction": ["all x y.((Egg(x) & Egg(y)) -> UsedToReproduce(x,y))"]}
{"id": "eqasc_train_6583", "nl": "Nematodes are millimeter-sized roundworms.", "fol": "", "prediction": ["all x.(Nematode(x) -> MillimeterSizeRoundworm(x))"]}
{"id": "eqasc_train_6584", "nl": "the phylum Nematoda reproduces sexually", "fol": "", "prediction": ["all x.(PhylumNematoda(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_6585", "nl": "Sexual reproduction involves karyogamy and meiosis.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> (InvolvesKaryogamy(x) & InvolvesMeiosis(x)))"]}
{"id": "eqasc_train_6586", "nl": "Roundworms reproduce using karyogamy and meiosis.", "fol": "", "prediction": ["all x.(Roundworm(x) -> (ReproducesUsingKaryogamy(x) & ReproducesUsingMeiosis(x)))"]}
{"id": "eqasc_train_6587", "nl": "Nematodes are microscopic, true roundworms.", "fol": "", "prediction": ["all x.(Nematode(x) -> (Microscopic(x) & TrueRoundworm(x)))"]}
{"id": "eqasc_train_6588", "nl": "Nematodes reproduce sexually", "fol": "", "prediction": ["all x.(Nematode(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_6589", "nl": "Fertilisation is a key feature of sexual reproduction.", "fol": "", "prediction": ["all x.(Fertilisation(x) -> KeyFeatureOfSexualReproduction(x))"]}
{"id": "eqasc_train_6590", "nl": "Fertilisation is a key feature of roundworm reproduction", "fol": "", "prediction": ["all x.(Fertilisation(x) -> KeyFeatureOfRoundwormReproduction(x))"]}
{"id": "eqasc_train_6591", "nl": "Nematodes reproduce sexually.", "fol": "", "prediction": ["all x.(Nematode(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_6592", "nl": "Nearly all species of roundworms reproduce by laying eggs.", "fol": "", "prediction": ["all x.(Roundworm(x) -> ReproducesByLayingEggs(x))"]}
{"id": "eqasc_train_6593", "nl": "roundworms have offspring by laying eggs", "fol": "", "prediction": ["all x.(Roundworm(x) -> (HasOffspring(x) & LaysEggs(x)))"]}
{"id": "eqasc_train_6594", "nl": "if a living thing becomes too cold then that living thing will die", "fol": "", "prediction": ["all x y.((LivingThing(x) & TooCold(x)) -> Dies(y))"]}
{"id": "eqasc_train_6595", "nl": "If something studied by biologists becomes too cold then that thing will die", "fol": "", "prediction": ["all x.((StudyByBiologists(x) & TooCold(x)) -> Dies(x))"]}
{"id": "eqasc_train_6596", "nl": "Hypothermia, a drop in the body's normal core temperature, can be caused by overexposure to cold.", "fol": "", "prediction": ["all x.(Hypothermia(x) -> (DropInNormalCoreTemperature(x) & OverexposureToCold(x)))"]}
{"id": "eqasc_train_6597", "nl": "If a living thing gets hypothermia then that living thing will die.", "fol": "", "prediction": ["all x.((LivingThing(x) & Hypothermia(x)) -> Die(x))"]}
{"id": "eqasc_train_6598", "nl": "organisms that become too cold can die", "fol": "", "prediction": ["all x.((Organism(x) & TooCold(x)) -> CanDie(x))"]}
{"id": "eqasc_train_6599", "nl": "Plants and animals live, die, and decompose only to be recycled again.", "fol": "", "prediction": ["all x.((Plant(x) | Animal(x)) -> (Lives(x) & Dies(x) & Decomposes(x) & Recycled(x)))"]}
{"id": "eqasc_train_6600", "nl": "If a thing becomes too cold then it will die and decompose only to be recylced again.", "fol": "", "prediction": ["all x.((Thing(x) & TooCold(x)) -> (Dies(x) & Decomposes(x) & Recylced(x)))"]}
{"id": "eqasc_train_6601", "nl": "Each living thing, animal or plant, consists of living cells.", "fol": "", "prediction": ["all x.(LivingThing(x) -> (Animal(x) | Plant(x)) & ConsistsOfLivingCells(x)))"]}
{"id": "eqasc_train_6602", "nl": "if an animal or plant becomes too cold then they will die", "fol": "", "prediction": ["all x y.((Animal(x) | Plant(y)) & TooCold(x)) -> Die(x,y))"]}
{"id": "eqasc_train_6603", "nl": "Every year people die from hypothermia in Alaska when the temperature is above freezing.", "fol": "", "prediction": ["all x y.((Year(x) & Alaska(y) & TemperatureAboveFreezing(y)) -> DiesFromHypothermia(x,y))"]}
{"id": "eqasc_train_6604", "nl": "People experience hypothermia when it is too cold", "fol": "", "prediction": ["all x.((Person(x) & TooCold(x)) -> Hypothermia(x))"]}
{"id": "eqasc_train_6605", "nl": "if plants become too cold they will die", "fol": "", "prediction": ["all x y.((Plant(x) & TooCold(x)) -> Die(y))"]}
{"id": "eqasc_train_6606", "nl": "And without adequate calories, the birds die from the cold.", "fol": "", "prediction": ["(all x.((Bird(x) & -AdequateCalories(x)) -> DieFromCold(x)))"]}
{"id": "eqasc_train_6607", "nl": "birds will die if they lack food", "fol": "", "prediction": ["all x.((Bird(x) & LacksFood(x)) -> Dies(x))"]}
{"id": "eqasc_train_6608", "nl": "Sweating reduces body heat.", "fol": "", "prediction": ["all x.(Sweating(x) -> ReducesBodyHeat(x))"]}
{"id": "eqasc_train_6609", "nl": "People of all ages and activity levels perspire or sweat.", "fol": "", "prediction": ["all x.((Person(x) & Age(x) & ActivityLevel(x)) -> PerspiresOrSweats(x))"]}
{"id": "eqasc_train_6610", "nl": "Perspiration reduces body heat.", "fol": "", "prediction": ["all x.(Perspiration(x) -> ReducesBodyHeat(x))"]}
{"id": "eqasc_train_6611", "nl": "Excessive perspiration occurs and sweat glands become active.", "fol": "", "prediction": ["all x.(ExcessivePerspiration(x) -> SweatGlandsActive(x))"]}
{"id": "eqasc_train_6612", "nl": "perspiration reduces body heat", "fol": "", "prediction": ["all x.(Perspiration(x) -> ReducesBodyHeat(x))"]}
{"id": "eqasc_train_6613", "nl": "Excessive sweating and dehydration are common.", "fol": "", "prediction": ["all x.((ExcessiveSweating(x) & Dehydration(x)) -> Common(x))"]}
{"id": "eqasc_train_6614", "nl": "excessive cooling of body heat is accompanied with dehydration", "fol": "", "prediction": ["all x.(ExcessiveCoolingOfBodyHeat(x) -> Dehydration(x))"]}
{"id": "eqasc_train_6615", "nl": "Body fluids are lost during fevers because of sweating.", "fol": "", "prediction": ["all x.((BodyFluids(x) & Fever(x) & Sweating(x)) -> Lost(x))"]}
{"id": "eqasc_train_6616", "nl": "fevers dehydrate because of sweat", "fol": "", "prediction": ["all x.(Fever(x) -> DehydratesAsSweat(x))"]}
{"id": "eqasc_train_6617", "nl": "High body heat is necessary for maximum predatory activity.", "fol": "", "prediction": ["all x.((HighBodyHeat(x) & PredatoryActivity(x)) -> NecessaryForMaximum(x))"]}
{"id": "eqasc_train_6618", "nl": "Sweating reduces  heat necessary for maximum predatory activity", "fol": "", "prediction": ["all x y.((Sweating(x) & PredatoryActivity(y)) -> ReducesHeat(x,y))"]}
{"id": "eqasc_train_6619", "nl": "Causes Body heat is lost mainly through perspiration or sweating.", "fol": "", "prediction": ["all x.(CausesBodyHeatLoss(x) -> (Perspiration(x) | Sweating(x)))"]}
{"id": "eqasc_train_6620", "nl": "Perspiration reduces body heat", "fol": "", "prediction": ["all x.(Perspiration(x) -> ReducesBodyHeat(x))"]}
{"id": "eqasc_train_6621", "nl": "Saltwater excretion reduces body heat.", "fol": "", "prediction": ["all x.(SaltwaterExcretion(x) -> ReducesBodyHeat(x))"]}
{"id": "eqasc_train_6622", "nl": "Humans, of course, can sweat and perspiration tastes salty.", "fol": "", "prediction": ["all x.(Human(x) -> (Sweat(x) & Perspiration(x) & TastesSalty(x)))"]}
{"id": "eqasc_train_6623", "nl": "Shivering produces heat in the body.", "fol": "", "prediction": ["all x.(Shivering(x) -> ProducesHeatInBody(x))"]}
{"id": "eqasc_train_6624", "nl": "Sweating and shivering have different effects on our core temperatures.", "fol": "", "prediction": ["all x.((Sweating(x) | Shivering(x)) -> DifferentEffectsOnCoreTemperatures(x))"]}
{"id": "eqasc_train_6625", "nl": "Clothing reduces the effectiveness of sweating as a means of cooling the body.", "fol": "", "prediction": ["all x.(Clothing(x) -> ReducesEfficiencyOfSweeping(x))"]}
{"id": "eqasc_train_6626", "nl": "Clothing can have an impact on the effectiveness of sweating to cool the body.", "fol": "", "prediction": ["all x.(Clothing(x) -> HasImpactOnEffectiveSweepingToCoolBody(x))"]}
{"id": "eqasc_train_6627", "nl": "Heat cramps are caused by sweating.", "fol": "", "prediction": ["all x.(HeatCrop(x) -> CausedBySweeping(x))"]}
{"id": "eqasc_train_6628", "nl": "sweating can cause cramps", "fol": "", "prediction": ["all x.(Sweating(x) -> CausesCrops(x))"]}
{"id": "eqasc_train_6629", "nl": "Sweat cools the body by evaporation, which removes heat from the body surface.", "fol": "", "prediction": ["all x y.((Sweat(x) & Body(y)) -> (CoolsByEvaporation(x,y) & RemovesHeatFromSurface(x,y)))"]}
{"id": "eqasc_train_6630", "nl": "Sweating cools the body by evaporation.", "fol": "", "prediction": ["all x y.((Sweating(x) & Body(y)) -> CoolsByEvaporation(x,y))"]}
{"id": "eqasc_train_6631", "nl": "Carbon may be stored in sedimentary rock for millions of years.", "fol": "", "prediction": ["all x.(Carbon(x) -> MayBeStoredInSedimentaryRock(x))"]}
{"id": "eqasc_train_6632", "nl": "Carbon might be stored in limestone.", "fol": "", "prediction": ["exists x.(Carbon(x) & StoredInLimestone(x))"]}
{"id": "eqasc_train_6633", "nl": "Marble is considered a carbonate rock .", "fol": "", "prediction": ["all x.(Marble(x) -> CarbonateRock(x))"]}
{"id": "eqasc_train_6634", "nl": "Carbon may be stored in marble for years", "fol": "", "prediction": ["all x y.((Carbon(x) & Marble(y)) -> MayBeStoredIn(x,y))"]}
{"id": "eqasc_train_6635", "nl": "carbon may be stored in limestone for million of years", "fol": "", "prediction": ["all x.((Carbon(x) & StoredInLimestone(x)) -> MillionOfYears(x))"]}
{"id": "eqasc_train_6636", "nl": "Carbon is an essential element for almost all plant and animal life.", "fol": "", "prediction": ["all x.(Carbon(x) -> EssentialElementForPlantAndAnimalLife(x))"]}
{"id": "eqasc_train_6637", "nl": "almost all plant and animal life depends on sedimentary rock", "fol": "", "prediction": ["all x.((PlantLife(x) | AnimalLife(x)) -> DependsOnSedimentaryRock(x))"]}
{"id": "eqasc_train_6638", "nl": "Carbon may be stored in limestone for millions of years.", "fol": "", "prediction": ["all x.(Carbon(x) -> MayBeStoredInLimestone(x))"]}
{"id": "eqasc_train_6639", "nl": "Limestone is a rock composed of calcium, carbon and oxygen.", "fol": "", "prediction": ["all x.(Limestone(x) -> (Rock(x) & ComposedOfCalcium(x) & ComposedOfCarbon(x) & ComposedOfOxygen(x)))"]}
{"id": "eqasc_train_6640", "nl": "limestone contains carbon", "fol": "", "prediction": ["all x.(Limestone(x) -> ContainsCarbon(x))"]}
{"id": "eqasc_train_6641", "nl": "Carbon is the fuel source.", "fol": "", "prediction": ["all x.(Carbon(x) -> FuelSource(x))"]}
{"id": "eqasc_train_6642", "nl": "A fuel source may be stored in sedimentary rock for millions of years.", "fol": "", "prediction": ["all x.(FuelSource(x) -> MayBeStoredInSedimentaryRock(x))"]}
{"id": "eqasc_train_6643", "nl": "Carbon may be stored in sandstone for millions of years.", "fol": "", "prediction": ["all x.(Carbon(x) -> MayBeStoredInSandstone(x))"]}
{"id": "eqasc_train_6644", "nl": "Forests are a natural store of carbon.", "fol": "", "prediction": ["all x.(Forest(x) -> NaturalStoreOfCarbon(x))"]}
{"id": "eqasc_train_6645", "nl": "Forests naturally keep carbon", "fol": "", "prediction": ["all x.(Forest(x) -> NaturallyKeepsCarbon(x))"]}
{"id": "eqasc_train_6646", "nl": "Limestones are a common type of sedimentary rock.", "fol": "", "prediction": ["all x.(Limestone(x) -> SedimentaryRock(x))"]}
{"id": "eqasc_train_6647", "nl": "carbon may be stored in limestone for millions of years", "fol": "", "prediction": ["all x y.((Carbon(x) & Limestone(y)) -> MayBeStoredIn(x,y))"]}
{"id": "eqasc_train_6648", "nl": "Carbon sinks are storage areas for carbon.", "fol": "", "prediction": ["all x.(CarbonSink(x) -> StorageArea(x,Carbon))"]}
{"id": "eqasc_train_6649", "nl": "Coal sinks can be stored in sedimentary rock for millions of years", "fol": "", "prediction": ["all x.(CoalSink(x) -> CanBeStoredInSedimentaryRock(x))"]}
{"id": "eqasc_train_6650", "nl": "a balance is used for measuring mass of an object", "fol": "", "prediction": ["all x y.((Balance(x) & Object(y)) -> MeasuresMass(x,y))"]}
{"id": "eqasc_train_6651", "nl": "Beam balances, like a seesaw, measure an unknown mass by comparison to known masses.", "fol": "", "prediction": ["all x.(BeamBalance(x) -> (MeasuresUnknownMass(x) & ComparesKnownMasses(x)))"]}
{"id": "eqasc_train_6652", "nl": "Something like a seesaw is used for measuring mass of an object", "fol": "", "prediction": ["all x y.((Seesaw(x) & Object(y)) -> MeasuresMass(x,y))"]}
{"id": "eqasc_train_6653", "nl": "Bears are proportionally weighted for use on a balance for measurement discoveries.", "fol": "", "prediction": ["all x.(Bear(x) -> (ProportionallyWeighted(x) & UseOnBalance(x) & MeasurementDiscoveries(x)))"]}
{"id": "eqasc_train_6654", "nl": "Bears are proportionally weighted on a balance for mass discovery.", "fol": "", "prediction": ["all x.(Bear(x) -> (ProportionallyWeightedOnBalance(x) & MassDiscovery(x)))"]}
{"id": "eqasc_train_6655", "nl": "Mass The base unit of mass is the gram.", "fol": "", "prediction": ["(BaseUnitOfMass(x) & Gram(x))"]}
{"id": "eqasc_train_6656", "nl": "A balance measures in grams", "fol": "", "prediction": ["all x.(Balance(x) -> MeasuresInGrams(x))"]}
{"id": "eqasc_train_6657", "nl": "a balance is used for measuring grams of an object", "fol": "", "prediction": ["all x y.((Balance(x) & Object(y)) -> MeasuresGas(x,y))"]}
{"id": "eqasc_train_6658", "nl": "Balancing connotes a set of scales.", "fol": "", "prediction": ["all x.(Balancing(x) -> ConnotesScales(x))"]}
{"id": "eqasc_train_6659", "nl": "Scales are used to measure mass of an object.", "fol": "", "prediction": ["all x y.((Scale(x) & Object(y)) -> MeasuresMass(x,y))"]}
{"id": "eqasc_train_6660", "nl": "A balance is used to measure the amount of matter an object contains.", "fol": "", "prediction": ["all x y.((Balance(x) & Object(y)) -> MeasuresAmountOfMatter(x,y))"]}
{"id": "eqasc_train_6661", "nl": "The unit of measurment for a balance is grams", "fol": "", "prediction": ["all x y.((UnitOfMeasurment(x) & Balance(y)) -> (Gas(x,y) & Grams(x)))"]}
{"id": "eqasc_train_6662", "nl": "Unit for mass is the kilogram .", "fol": "", "prediction": ["all x.(MassUnit(x) -> Kilogram(x))"]}
{"id": "eqasc_train_6663", "nl": "A balance is used for measuring the aspect of an object that is measured in kilograms", "fol": "", "prediction": ["all x y.((Balance(x) & Object(y) & MeasuredInKg(x,y)) -> MeasuresAspect(x,y))"]}
{"id": "eqasc_train_6664", "nl": "An object has no mass at absolute zero.", "fol": "", "prediction": ["all x.(Object(x) -> NoMassAtAtom(x,absoluteZero))"]}
{"id": "eqasc_train_6665", "nl": "An object at absolute zero cannot be measured by a balance", "fol": "", "prediction": ["all x.((Object(x) & AbsoluteZero(x)) -> -MeasuredByBalance(x))"]}
{"id": "eqasc_train_6666", "nl": "Masses are measured by difference on a balance.", "fol": "", "prediction": ["all x.(Mass(x) -> MeasuredByDifference(x))"]}
{"id": "eqasc_train_6667", "nl": "balances indicate mass", "fol": "", "prediction": ["all x.(Balance(x) -> IndicatesMass(x))"]}
{"id": "eqasc_train_6668", "nl": "the Earth being tilted on its rotating axis causes seasons", "fol": "", "prediction": ["all x y.((Earth(x) & TiltedOnRotatingAxis(x,y)) -> Seasons(x))"]}
{"id": "eqasc_train_6669", "nl": "Seasons are caused by the tilt of the axis relative to the planet's orbit.", "fol": "", "prediction": ["all x y.((Season(x) & Planet(y)) -> CausedByTilt(x,y))"]}
{"id": "eqasc_train_6670", "nl": "the planet's orbit and tilt causes seasons", "fol": "", "prediction": ["all x y.((Planet(x) & Planet(y)) -> (Orbit(x,y) & Tip(x,y)))"]}
{"id": "eqasc_train_6671", "nl": "the Earth being tilted on its rotating axis causes  daylight changes", "fol": "", "prediction": ["all x y.((Earth(x) & TiltedOnRotatingAxis(x,y)) -> CausesDaylightChanges(x))"]}
{"id": "eqasc_train_6672", "nl": "Autumn is a beautiful season.", "fol": "", "prediction": ["all x.(Autumn(x) -> BeautifulSeason(x))"]}
{"id": "eqasc_train_6673", "nl": "the Earth being tilted on its rotating axis causes Autumn", "fol": "", "prediction": ["all x y.((Earth(x) & TiltedOnRotatingAxis(x)) -> Autumn(y))"]}
{"id": "eqasc_train_6674", "nl": "Spring, summer,autumn and winter are seasons.", "fol": "", "prediction": ["(Season(Spring) & Season(Summer) & Season(Autumn) & Season(Winter))"]}
{"id": "eqasc_train_6675", "nl": "the Earth being tilted on its rotating axis causes winter", "fol": "", "prediction": ["all x y.((Earth(x) & TiltedOnRotatingAxis(x,y)) -> CausesWinter(x))"]}
{"id": "eqasc_train_6676", "nl": "Weather and Seasons Weather and seasonal changes affect all plants and animals.", "fol": "", "prediction": ["all x.((Weather(x) & Seasons(x)) -> (AffectsPlants(x) & AffectsAnimals(x)))"]}
{"id": "eqasc_train_6677", "nl": "Earth tilted on its rotating axis causes weather changes which affect all plants and animals.", "fol": "", "prediction": ["all x.((Earth(x) & TiltedOnRotatingAxis(x)) -> CausesWeatherChanges(x))"]}
{"id": "eqasc_train_6678", "nl": "Latitude and season cause temperature variations.", "fol": "", "prediction": ["all x.((Latitude(x) & Season(x)) -> CausesTemperatureVariations(x))"]}
{"id": "eqasc_train_6679", "nl": "the Earth being tilted on its rotating axis causes yearly temperature variations", "fol": "", "prediction": ["all x y.((Earth(x) & TiltedOnRotatingAxis(x,y)) -> CausesYearlyTemperatureVariations(x))"]}
{"id": "eqasc_train_6680", "nl": "Weather changes due to the tilt in Earth's rotating axis.", "fol": "", "prediction": ["all x.(WeatherChange(x) -> (TiltInRotatingAxis(x) & EarthsRotatingAxis(x)))"]}
{"id": "eqasc_train_6681", "nl": "Spring, summer, autumn, and winter are the seasons of the year.", "fol": "", "prediction": ["all x.((Spring(x) | Summer(x) | Autumn(x) | Winter(x)) -> SeasonOfYear(x))"]}
{"id": "eqasc_train_6682", "nl": "Earth being tilted on its rotating axis causes spring, summer, autumn, and winter.", "fol": "", "prediction": ["all x.(TiltedOnRotatingAxis(x) -> (CausesSpring(x) | CausesSummer(x) | CausesAutumn(x) | CausesWinter(x)))"]}
{"id": "eqasc_train_6683", "nl": "the Earth being tilted on its rotating axis causes spring, summer, autumn, and winter", "fol": "", "prediction": ["all x.(TiltedOnRotatingAxis(x) -> (CausesSpring(x) | CausesSummer(x) | CausesAutumn(x) | CausesWinter(x)))"]}
{"id": "eqasc_train_6684", "nl": "Spring, summer, autumn, and winter are caused by the Earth being tilted on its rotating axis", "fol": "", "prediction": ["all x y z.((Earth(x) & Spring(y) & Summer(z) & Autumn(z) & Winter(z)) -> (TiltedOnRotatingAxis(x,y) & CausedBy(x,z)))"]}
{"id": "eqasc_train_6685", "nl": "Every season changes because the temperature changes with the seasons.", "fol": "", "prediction": ["all x.(Season(x) -> ChangesTemperature(x))"]}
{"id": "eqasc_train_6686", "nl": "earth being tilted on a rotating axis cause temperature changes", "fol": "", "prediction": ["all x y.((Earth(x) & TiltedOnRotatingAxis(x,y)) -> CausesTemperatureChanges(x))"]}
{"id": "eqasc_train_6687", "nl": "Summer is a bold season.", "fol": "", "prediction": ["all x.(Summer(x) -> BoldSeason(x))"]}
{"id": "eqasc_train_6688", "nl": "the Earth being tilted on its rotating axis causes summer", "fol": "", "prediction": ["all x y.((Earth(x) & TiltedOnRotatingAxis(x,y)) -> CausesSummer(x))"]}
{"id": "eqasc_train_6689", "nl": "By October 10, the lighthouse was tilted and leaning into the sea.", "fol": "", "prediction": ["all x.((Lighthouse(x) & Tilted(x) & LeaningIntoSea(x)) -> October10(x))"]}
{"id": "eqasc_train_6690", "nl": "The Earth leaning on its rotating axis causes seasons.", "fol": "", "prediction": ["all x.((Earth(x) & LeaningOnRotatingAxis(x)) -> CausesSeasons(x))"]}
{"id": "eqasc_train_6691", "nl": "The Earth being tilted on its rotating axis causes the weather to change.", "fol": "", "prediction": ["all x.(TiltedOnRotatingAxis(x) -> WeatherChange(x))"]}
{"id": "eqasc_train_6692", "nl": "Lake levels can change seasonally and annually.", "fol": "", "prediction": ["all x.(LakeLevel(x) -> (ChangeSeasonally(x) | ChangeAnnually(x)))"]}
{"id": "eqasc_train_6693", "nl": "The Earth being tilted on its rotating axis causes lake level changes. ", "fol": "", "prediction": ["all x.(TiltedOnRotatingAxis(x) -> CausesLakeLevelChanges(x))"]}
{"id": "eqasc_train_6694", "nl": "Seasonal Affective Disorder or SAD is a depressive condition caused by seasonal changes.", "fol": "", "prediction": ["all x.(SeasonalAffectiveDisorder(x) -> (DepressiveCondition(x) & CausedBySeasonalChanges(x)))"]}
{"id": "eqasc_train_6695", "nl": "The tilt of the Earth's rotation can cause depression", "fol": "", "prediction": ["all x.(TiltOfEarthRotation(x) -> CausesDepression(x))"]}
{"id": "eqasc_train_6696", "nl": "sugar causes food to taste sweet", "fol": "", "prediction": ["all x y.((Sugar(x) & Food(y)) -> CausesToTasteSweet(x,y))"]}
{"id": "eqasc_train_6697", "nl": "Too many sweets can also cause tooth decay and unhealthy gums.", "fol": "", "prediction": ["all x.((Sweet(x) & TooMany(x)) -> (CausesToothDecay(x) & UnhealthyGums(x)))"]}
{"id": "eqasc_train_6698", "nl": "Sugar causes tooth decay and unhealthy gums.", "fol": "", "prediction": ["all x.(Sugar(x) -> (CausesToothDecay(x) & UnhealthyGums(x)))"]}
{"id": "eqasc_train_6699", "nl": "Saccharides consisting of one simple sugar unit are called monosaccharides .", "fol": "", "prediction": ["all x.((Saccharide(x) & SimpleSugarUnit(x)) -> Monosaccharide(x))"]}
{"id": "eqasc_train_6700", "nl": "monosaccharides cause food to taste sweet", "fol": "", "prediction": ["all x.(Monosaccharide(x) -> CausesFoodToTasteSweet(x))"]}
{"id": "eqasc_train_6701", "nl": "Good sources of sugars are sugar, glucose, honey and sweets.", "fol": "", "prediction": ["all x.((SugarSource(x) & Good(x)) -> (Sugar(x) | Glucose(x) | Honey(x) | Sweets(x)))"]}
{"id": "eqasc_train_6702", "nl": "honey has sugar", "fol": "", "prediction": ["all x.(Honey(x) -> HasSugar(x))"]}
{"id": "eqasc_train_6703", "nl": "Honey is made up of a natural sugar.", "fol": "", "prediction": ["all x.(Honey(x) -> MadeUpOfNaturalSugar(x))"]}
{"id": "eqasc_train_6704", "nl": "honey causes food to taste sweet", "fol": "", "prediction": ["all x y.((Honey(x) & Food(y)) -> CausesToTasteSweet(x,y))"]}
{"id": "eqasc_train_6705", "nl": "Favorite foods are cakes, noodles, rice, eggs and fruits.", "fol": "", "prediction": ["all x.(FavoriteFood(x) -> (Cakes(x) | Noodles(x) | Rice(x) | Eggs(x) | Fruits(x)))"]}
{"id": "eqasc_train_6706", "nl": "sugar causes cake to taste sweet", "fol": "", "prediction": ["all x y.((Sugar(x) & Cake(y)) -> CausesToTasteSweet(x,y))"]}
{"id": "eqasc_train_6707", "nl": "For example, the tongue determines the taste of foods, deciding whether a thing is sweet or bitter.", "fol": "", "prediction": ["all x y.((Tongue(x) & Food(y)) -> (DeterminesTaste(x,y) & DecidesSweetOrBitter(x)))"]}
{"id": "eqasc_train_6708", "nl": "The tongue determines the flavor of sweet foods, like sugar.", "fol": "", "prediction": ["all x y.((Tongue(x) & SweetFood(y)) -> DeterminesFlavor(x,y))"]}
{"id": "eqasc_train_6709", "nl": "Children are naturally drawn to the sweetness of foods that contain sugar.", "fol": "", "prediction": ["all x y.((Child(x) & Food(y) & ContainsSugar(x,y)) -> NaturallyDrawnToSweetness(x,y))"]}
{"id": "eqasc_train_6710", "nl": "Children are drawn to food that tastes sweet", "fol": "", "prediction": ["all x y.((Child(x) & Food(y)) -> TastesSweet(x,y))"]}
{"id": "eqasc_train_6711", "nl": "Molasses Sugar Molasses Sugar is the darkest sugar of all.", "fol": "", "prediction": ["all x.(MolassesSugar(x) -> DarkestSugarOfAll(x))"]}
{"id": "eqasc_train_6712", "nl": "Molasses causes food to taste sweet", "fol": "", "prediction": ["all x.(Molasses(x) -> CausesFoodToTasteSweet(x))"]}
{"id": "eqasc_train_6713", "nl": "Sugar or sugar and milk are combined to make sweet chocolate.", "fol": "", "prediction": ["all x.((Sugar(x) | Sugar(x) | Milk(x)) -> SweetChocolate(x))"]}
{"id": "eqasc_train_6714", "nl": "chocolate is made from sugar", "fol": "", "prediction": ["all x.(Chocolate(x) -> MadeFromSugar(x))"]}
{"id": "eqasc_train_6715", "nl": "Regular sugar is also called sucrose.", "fol": "", "prediction": ["all x.(RegularSugar(x) -> (Succrose(x)))"]}
{"id": "eqasc_train_6716", "nl": "Sucrose causes food to taste sweet", "fol": "", "prediction": ["all x y.((Sucrose(x) & Food(y)) -> CausesToTasteSweet(x,y))"]}
{"id": "eqasc_train_6717", "nl": "Fruit is delicious and very sweet.", "fol": "", "prediction": ["all x.(Fruit(x) -> (Delicious(x) & VerySweet(x)))"]}
{"id": "eqasc_train_6718", "nl": "sugar is in fruit", "fol": "", "prediction": ["all x.(Sugar(x) -> InFruit(x))"]}
{"id": "eqasc_train_6719", "nl": "Sugary foods and sweets are tempting.", "fol": "", "prediction": ["all x.((SugaryFood(x) & Sweet(x)) -> Tentivating(x))"]}
{"id": "eqasc_train_6720", "nl": "sugar causes food to taste tempting", "fol": "", "prediction": ["all x y.((Sugar(x) & Food(y)) -> CausesToTasteTricking(x,y))"]}
{"id": "eqasc_train_6721", "nl": "Glucose causes food to taste sweet.", "fol": "", "prediction": ["all x.(Glucose(x) -> TastesSweet(x))"]}
{"id": "eqasc_train_6722", "nl": "Once it is cane, later it is sugar.", "fol": "", "prediction": ["all x.(Cane(x) -> Sugar(x))"]}
{"id": "eqasc_train_6723", "nl": "Cane causes food to taste sweet.", "fol": "", "prediction": ["all x.(Cane(x) -> CausesFoodToTasteSweet(x))"]}
{"id": "eqasc_train_6724", "nl": "Cakes and cookies taste sweet because a little extra sugar is added for flavoring.", "fol": "", "prediction": ["all x.((Cake(x) | Cookie(x)) -> TastesSweet(x))"]}
{"id": "eqasc_train_6725", "nl": "sugar causes cookies flavor to be sweet", "fol": "", "prediction": ["all x y.((Sugar(x) & Cookie(y)) -> CausesFlavorToBeSweet(x,y))"]}
{"id": "eqasc_train_6726", "nl": "For example, traditional wisdom warns that eating sweet foods causes diabetes.", "fol": "", "prediction": ["all x.((TraditionalWise(x) & EatingSweetFoods(x)) -> CausesDiabetes(x))"]}
{"id": "eqasc_train_6727", "nl": "sugar causes diabetes", "fol": "", "prediction": ["all x.(Sugar(x) -> CausesDiabetes(x))"]}
{"id": "eqasc_train_6728", "nl": "hitting an object causes the particles in that object to vibrate", "fol": "", "prediction": ["all x y.((Object(x) & Hit(y)) -> CausesParticlesToVibrate(x,y))"]}
{"id": "eqasc_train_6729", "nl": "Electrical particles in materials vibrate and accelerate.", "fol": "", "prediction": ["all x.((ElectricalParticle(x) & Material(x)) -> (Vibrate(x) & Accelerate(x)))"]}
{"id": "eqasc_train_6730", "nl": "Hitting an object causes the particles in it to accelerate. ", "fol": "", "prediction": ["all x y.((Object(x) & Hitting(x,y)) -> CausesParticlesToAccelerate(x,y))"]}
{"id": "eqasc_train_6731", "nl": "hitting an object moves electric particles", "fol": "", "prediction": ["all x y.((Hiting(x,y) & Object(y)) -> MovesElectricParticles(x,y))"]}
{"id": "eqasc_train_6732", "nl": "Geoffrey stops to hit a gong in different places, testing the concept of resonance.", "fol": "", "prediction": ["all x y z.((Geoffrey(x) & Gong(y) & Place(z)) -> (StopsToHit(x,y,z) & TestsResonance(x)))"]}
{"id": "eqasc_train_6733", "nl": "a gong's resonance comes from particles vibrating", "fol": "", "prediction": ["all x.(Gong(x) -> ResonanceComesFromVibratingParticles(x))"]}
{"id": "eqasc_train_6734", "nl": "Frequency is the measurable rate of that vibration.", "fol": "", "prediction": ["all x.(Frequency(x) -> MeasurableRateOfVibration(x))"]}
{"id": "eqasc_train_6735", "nl": "hitting an object causes the particles in that object to change frequency", "fol": "", "prediction": ["all x y.((Object(x) & Hit(y)) -> CausesFrequencyChange(x,y))"]}
{"id": "eqasc_train_6736", "nl": "Sound energy is created by vibrating objects.", "fol": "", "prediction": ["all x.((VibratingObject(x) & CreatesSoundEnergy(x)) -> CreatesSoundEnergy(x))"]}
{"id": "eqasc_train_6737", "nl": "hitting an object causes the particles in that object to create sound energy", "fol": "", "prediction": ["all x y.((Object(x) & Hit(y)) -> CausesParticlesToCreateSoundEnergy(x,y))"]}
{"id": "eqasc_train_6738", "nl": "Ball is hit with bat by batter.", "fol": "", "prediction": ["all x.(Ball(x) -> HitWithBat(x))"]}
{"id": "eqasc_train_6739", "nl": "a batter causes the particles of a ball to vibrate", "fol": "", "prediction": ["all x y z.((Battery(x) & Ball(y) & Particles(z)) -> CausesToVibrate(x,y,z))"]}
{"id": "eqasc_train_6740", "nl": "Lightening is attracted to metal objects.", "fol": "", "prediction": ["all x.(Lightening(x) -> AttractedToMetalObjects(x))"]}
{"id": "eqasc_train_6741", "nl": "When metal is hit, it causes the particles in the metal to vibrate.", "fol": "", "prediction": ["all x.((Metal(x) & Hit(x)) -> CausesParticlesToVibrate(x))"]}
{"id": "eqasc_train_6742", "nl": "Sounds are caused by vibrations.", "fol": "", "prediction": ["all x.(Sound(x) -> CausedByVibrations(x))"]}
{"id": "eqasc_train_6743", "nl": "hitting an object causes Sounds ", "fol": "", "prediction": ["all x y.((Object(x) & Hit(y)) -> CausesSounds(x,y))"]}
{"id": "eqasc_train_6744", "nl": "Rock particles vibrate back and forth.", "fol": "", "prediction": ["all x.(RockParticle(x) -> VibrateBackAndForward(x))"]}
{"id": "eqasc_train_6745", "nl": "Hitting a rock causes vibration", "fol": "", "prediction": ["all x y.((Rock(x) & Hitting(x,y)) -> CausesVibration(x))"]}
{"id": "eqasc_train_6746", "nl": "When the particles in the coal or the particles in the lamp filament get hot they start to vibrate.", "fol": "", "prediction": ["all x.((ParticlesInCoal(x) | ParticlesInLampFilmFilm(x)) -> Vibrate(x))"]}
{"id": "eqasc_train_6747", "nl": "Hitting an object can cause that object to get hot", "fol": "", "prediction": ["all x y.((Object(x) & Hitting(x,y)) -> Hot(y))"]}
{"id": "eqasc_train_6748", "nl": "hitting an object causes frequency waves", "fol": "", "prediction": ["all x y.((Object(x) & Hit(y)) -> CausesFrequencyWaves(x,y))"]}
{"id": "eqasc_train_6749", "nl": "Earth orbiting the Sun causes seasons to change", "fol": "", "prediction": ["all x y.((Earth(x) & Sun(y)) -> CausesSeasonsToChange(x,y))"]}
{"id": "eqasc_train_6750", "nl": "Earth orbiting the Sun causes weather changes.", "fol": "", "prediction": ["all x.((Earth(x) & Sun(x)) -> CausesWeatherChanges(x))"]}
{"id": "eqasc_train_6751", "nl": "Days and hours change seasonally.", "fol": "", "prediction": ["all x.((Day(x) & Hour(x)) -> SeasonalChange(x))"]}
{"id": "eqasc_train_6752", "nl": "Earth orbiting the Sun causes days to change", "fol": "", "prediction": ["all x y.((Earth(x) & Sun(y)) -> CausesDaysToChange(x,y))"]}
{"id": "eqasc_train_6753", "nl": "tilting causes the earth's seasons", "fol": "", "prediction": ["all x y.((Tilting(x) & EarthSeasons(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_6754", "nl": "Earth orbiting the sun causes weather changes.", "fol": "", "prediction": ["all x y.((Earth(x) & Sun(y)) -> CausesWeatherChanges(x,y))"]}
{"id": "eqasc_train_6755", "nl": "earth orbiting our star causes seasons to change", "fol": "", "prediction": ["all x y.((EarthOrbitingStar(x) & Season(y)) -> CausesSeasonsToChange(x,y))"]}
{"id": "eqasc_train_6756", "nl": "Each year has four seasons.", "fol": "", "prediction": ["all x.(Year(x) -> HasFourSeasons(x))"]}
{"id": "eqasc_train_6757", "nl": "Earth orbiting the Sun causes something consisting of four parts to change", "fol": "", "prediction": ["all x y.((Earth(x) & Sun(y) & Orbits(x,y)) -> CausesChange(x,y))"]}
{"id": "eqasc_train_6758", "nl": "More than any other season, summer is a time of quick-changing weather patterns.", "fol": "", "prediction": ["all x.(Summer(x) -> QuickChangedWeatherPatterns(x))"]}
{"id": "eqasc_train_6759", "nl": "Earth orbiting the Sun causes quick-changing weather patterns.", "fol": "", "prediction": ["all x.((Earth(x) & OrbitsSun(x)) -> CausesQuickChangeWeatherPatterns(x))"]}
{"id": "eqasc_train_6760", "nl": "Seasons on the earth are due to the tilt of the earth's axis.", "fol": "", "prediction": ["all x.(Season(x) -> EarthTilt(x))"]}
{"id": "eqasc_train_6761", "nl": "seasons happen because of orbital tilt", "fol": "", "prediction": ["all x y.((Season(x) & OrbitalTilt(y)) -> Happens(x,y))"]}
{"id": "eqasc_train_6762", "nl": "Climate changes across seasons can be explained by the tilt of the Earth's rotation axis.", "fol": "", "prediction": ["all x.((ClimateChange(x) & Season(y)) -> ExplainedByTiltOfRotationAxis(x,y))"]}
{"id": "eqasc_train_6763", "nl": "The direction the earth is tilted while it orbits the sun is what causes climate to change", "fol": "", "prediction": ["all x y.((Direction(x) & EarthTilted(x) & Sun(y)) -> CausesClimateChange(x,y))"]}
{"id": "eqasc_train_6764", "nl": "thick fur can be used for keeping warm", "fol": "", "prediction": ["all x.(ThickFur(x) -> CanBeUsedForWarming(x))"]}
{"id": "eqasc_train_6765", "nl": "Snow leopards coats have thick, dense fur.", "fol": "", "prediction": ["all x.(SnowLeopard(x) -> (HasThickDenseFur(x) & HasDenseFur(x)))"]}
{"id": "eqasc_train_6766", "nl": "Snow leopards coats can be used for keeping warm", "fol": "", "prediction": ["all x.(SnowLeopardsCoat(x) -> (KeepsWarm(x) & UsesForWarm(x)))"]}
{"id": "eqasc_train_6767", "nl": "snow leopard coats can be used for keeping warm", "fol": "", "prediction": ["all x.(SnowLeopardCoat(x) -> (KeepsWarm(x) & UsesForWarm(x)))"]}
{"id": "eqasc_train_6768", "nl": "Bears have thick fur to protect from the cold", "fol": "", "prediction": ["all x.(Bear(x) -> (HasThickFur(x) & ProtectsFromCold(x)))"]}
{"id": "eqasc_train_6769", "nl": "Sheep are mammals with thick, woolly fur, and hoofed feet.", "fol": "", "prediction": ["all x.(Sheep(x) -> (Mammal(x) & ThickWoollyFur(x) & HoofedFeet(x)))"]}
{"id": "eqasc_train_6770", "nl": "sheep have wooly fur to keep warm", "fol": "", "prediction": ["all x.(Sheep(x) -> (HasWoolyFur(x) & KeepsWarm(x)))"]}
{"id": "eqasc_train_6771", "nl": "Mammals have warm blood, and fur or hair, and breathe air.", "fol": "", "prediction": ["all x.(Mammal(x) -> (WarmBlood(x) & (Fur(x) | Hair(x)) & BreathesAir(x)))"]}
{"id": "eqasc_train_6772", "nl": "mammals keep warm with hair", "fol": "", "prediction": ["all x.(Mammal(x) -> KeepsWarmWithHair(x))"]}
{"id": "eqasc_train_6773", "nl": "sheep can be used for keeping warm", "fol": "", "prediction": ["all x.(Sheep(x) -> (KeepsWarm(x) & Sheep(x)))"]}
{"id": "eqasc_train_6774", "nl": "Otters have thick fur coats and whiskers.", "fol": "", "prediction": ["all x.(Otter(x) -> (ThickFurCoat(x) & HasWhiskers(x)))"]}
{"id": "eqasc_train_6775", "nl": "otters need their coats to keep warm", "fol": "", "prediction": ["all x.(Otter(x) -> NeedsCoat(x))"]}
{"id": "eqasc_train_6776", "nl": "foxes warm up with fur", "fol": "", "prediction": ["all x.(Fox(x) -> WarmUpWithFur(x))"]}
{"id": "eqasc_train_6777", "nl": "When the body is warm, heat production is minimized.", "fol": "", "prediction": ["all x.((Body(x) & Warm(x)) -> MinimizedHeatProduction(x))"]}
{"id": "eqasc_train_6778", "nl": "thick fur can be used for minimizing heat production.", "fol": "", "prediction": ["all x.(ThickFur(x) -> MinimizesHeatProduction(x))"]}
{"id": "eqasc_train_6779", "nl": "Most mammals have hair, or fur, covering their body.", "fol": "", "prediction": ["all x.(Mammal(x) -> (HasHair(x) | HasFur(x)))"]}
{"id": "eqasc_train_6780", "nl": "Most mammals have a body covering for keeping warm", "fol": "", "prediction": ["all x.(Mammal(x) -> HasBodyCovering(x))"]}
{"id": "eqasc_train_6781", "nl": "White fur is warmer than colored fur.", "fol": "", "prediction": ["all x.(WhiteFur(x) -> WarmerThanColoredFur(x))"]}
{"id": "eqasc_train_6782", "nl": "An animal's coat that is thick and white is warmest", "fol": "", "prediction": ["all x.((Animal(x) & Thick(x) & White(x)) -> WarmestCoat(x))"]}
{"id": "eqasc_train_6783", "nl": "Carpet beetle larvae feed on the keratin and chitin commonly found in wool, fur, or feathers.", "fol": "", "prediction": ["all x.(CarpetBeetleLarvae(x) -> (FeedsOnKeratin(x) & FeedsOnChitin(x) & (FindsInWood(x) | FindsInFur(x) | FindsInFeathers(x))))"]}
{"id": "eqasc_train_6784", "nl": "keratin can be used for keeping warm", "fol": "", "prediction": ["all x.(Keratin(x) -> KeepsWarm(x))"]}
{"id": "eqasc_train_6785", "nl": "thick hair can be used for keeping warm", "fol": "", "prediction": ["all x.(ThickHair(x) -> KeepsWarm(x))"]}
{"id": "eqasc_train_6786", "nl": "Becuse of that, the fat layer was needed to keep warm, now that the fur coat was removed.", "fol": "", "prediction": ["all x.((FatLayer(x) & FurCoatRemoved(x)) -> NeededToKeepWarm(x))"]}
{"id": "eqasc_train_6787", "nl": "Animals that do not have thick fur rely on fat layers to stay warm.", "fol": "", "prediction": ["all x.((Animal(x) & -ThickFur(x)) -> ReliesOnFatLayer(x))"]}
{"id": "eqasc_train_6788", "nl": "All bears are covered with heavy fur.", "fol": "", "prediction": ["all x.(Bear(x) -> CoveredWithHeavyFur(x))"]}
{"id": "eqasc_train_6789", "nl": "bears can keep warm", "fol": "", "prediction": ["all x.(Bear(x) -> KeepsWarm(x))"]}
{"id": "eqasc_train_6790", "nl": "Otters fur is the thickest fur of any animal.", "fol": "", "prediction": ["all x.(OttersFur(x) -> ThickestFur(x))"]}
{"id": "eqasc_train_6791", "nl": "otters can be used to make clothing for keeping warm", "fol": "", "prediction": ["all x.(Otter(x) -> (UsedToMakeClothing(x) & KeepsWarm(x)))"]}
{"id": "eqasc_train_6792", "nl": "Pelts are the skins of animals with the fur attached.", "fol": "", "prediction": ["all x.(Pelt(x) -> (Skin(x) & FurAttached(x)))"]}
{"id": "eqasc_train_6793", "nl": "A thick pelt can be used for keeping warm.", "fol": "", "prediction": ["all x.(ThickPelt(x) -> KeepsWarm(x))"]}
{"id": "eqasc_train_6794", "nl": "Aging occurs as cells lose their ability to divide.", "fol": "", "prediction": ["all x.(Aging(x) -> CellsLoseAbilityToDivide(x))"]}
{"id": "eqasc_train_6795", "nl": "Death is attributed to the infirmities of old age.", "fol": "", "prediction": ["all x.(Death(x) -> AttributesToOldAgeInfirmities(x))"]}
{"id": "eqasc_train_6796", "nl": "Death occurs as cells lose their ability to divide", "fol": "", "prediction": ["all x y.((Cell(x) & Cell(y) & LosesAbilityToDivide(x,y)) -> DeathOccurs(x))"]}
{"id": "eqasc_train_6797", "nl": "Cells produce more cells by dividing into two cells.", "fol": "", "prediction": ["all x.(Cell(x) -> (ProducesMoreCells(x) & DividesIntoTwoCells(x)))"]}
{"id": "eqasc_train_6798", "nl": "Aging occurs because there are less cells produced ", "fol": "", "prediction": ["all x.(Aging(x) -> (LessCellsProduced(x) & LessCellsProduced(x)))"]}
{"id": "eqasc_train_6799", "nl": "Cell damage also occurs during ageing.", "fol": "", "prediction": ["all x.(CellDamage(x) -> Ageing(x))"]}
{"id": "eqasc_train_6800", "nl": "cells can be damaged when they lose their ability to divide.", "fol": "", "prediction": ["all x.((Cell(x) & LosesAbilityToDivide(x)) -> Damaged(x))"]}
{"id": "eqasc_train_6801", "nl": "aging occurs as mitosis stops", "fol": "", "prediction": ["all x y.((Aging(x) & Mitosis(y)) -> Stops(x,y))"]}
{"id": "eqasc_train_6802", "nl": "Aging occurs as mitosis stops", "fol": "", "prediction": ["all x.(Aging(x) -> MitosisStops(x))"]}
{"id": "eqasc_train_6803", "nl": "Portions of the telomeres are lost each time a cell divides.", "fol": "", "prediction": ["all x.((Cell(x) & Divides(x)) -> LosesPortionsOfTelomeres(x))"]}
{"id": "eqasc_train_6804", "nl": "Aging occurs as cells lose their telomeres.", "fol": "", "prediction": ["all x.(Aging(x) -> CellsLoseTelomeres(x))"]}
{"id": "eqasc_train_6805", "nl": "aging occurs as mitosis slows for good", "fol": "", "prediction": ["all x y.((Aging(x) & Mitosis(y) & SlowsForGood(y,x)) -> AgingOccurs(x))"]}
{"id": "eqasc_train_6806", "nl": "Illness, aging and death are inevitable.", "fol": "", "prediction": ["all x.((Illness(x) | Aging(x) | Death(x)) -> Inevitable(x))"]}
{"id": "eqasc_train_6807", "nl": "cells losing their ability to divide is inevitable", "fol": "", "prediction": ["all x.((Cell(x) & LosingAbilityToDivide(x)) -> Inevitable(x))"]}
{"id": "eqasc_train_6808", "nl": "Gerontology is the study of the aging process and old age.", "fol": "", "prediction": ["all x.(Gerontology(x) -> (StudiesAgingProcess(x) & StudiesOldAge(x)))"]}
{"id": "eqasc_train_6809", "nl": "Getting old occurs as cells lose their ability to divide.", "fol": "", "prediction": ["all x.((Cell(x) & LosesAbilityToDivide(x)) -> Old(x))"]}
{"id": "eqasc_train_6810", "nl": "aging occurs because of a loss of mitosis", "fol": "", "prediction": ["all x y.((Aging(x) & LossOfMitosis(y)) -> Occurs(x,y))"]}
{"id": "eqasc_train_6811", "nl": "Evolution occurs in response to a change in the environment.", "fol": "", "prediction": ["all x.(Evolution(x) -> (OccursInResponseToChange(x) & InEnvironment(x)))"]}
{"id": "eqasc_train_6812", "nl": "Different environments Life is a changing phenomenon.", "fol": "", "prediction": ["all x.((Environment(x) & Changes(x)) -> Changes(x))"]}
{"id": "eqasc_train_6813", "nl": "Evolution occurs in response to changing phenomenon in life.", "fol": "", "prediction": ["all x.(Evolution(x) -> (OccursInResponseToChange(x) & InLife(x)))"]}
{"id": "eqasc_train_6814", "nl": "Extinction is a natural part or the process of evolution.", "fol": "", "prediction": ["all x.(Extinction(x) -> (NaturalPartOfEvolution(x) | ProcessOfEvolution(x)))"]}
{"id": "eqasc_train_6815", "nl": "Extinction can occur in response to change in environment ", "fol": "", "prediction": ["all x y.((Extinction(x) & EnvironmentChange(y)) -> OccursInResponseTo(x,y))"]}
{"id": "eqasc_train_6816", "nl": "evolution occurs in response to a change in native habitats", "fol": "", "prediction": ["all x y.((Evolution(x) & NativeHabitat(y)) -> OccursInResponseToChange(x,y))"]}
{"id": "eqasc_train_6817", "nl": "Evolution Evolution is the changing pattern of life forms.", "fol": "", "prediction": ["all x.(Evolution(x) -> ChangesPatternOfLifeForms(x))"]}
{"id": "eqasc_train_6818", "nl": "lifeforms change their pattern in response to change in environment", "fol": "", "prediction": ["all x.((Lifeform(x) & EnvironmentChange(x)) -> ChangesPattern(x))"]}
{"id": "eqasc_train_6819", "nl": "Natural selection is the main mechanism of evolution.", "fol": "", "prediction": ["all x.(NaturalSelection(x) -> MainMechanismOfEvolution(x))"]}
{"id": "eqasc_train_6820", "nl": "Natural selection occurs in response to a change in the envionrment.", "fol": "", "prediction": ["all x y.((NaturalSelection(x) & EnvionmentChange(y)) -> OccursInResponseTo(x,y))"]}
{"id": "eqasc_train_6821", "nl": "Biological evolution refers to changes in successive generations of a species.", "fol": "", "prediction": ["all x y.((BiologicalEvolution(x) & Species(y)) -> ChangesInSuccessfulGenerations(x,y))"]}
{"id": "eqasc_train_6822", "nl": "changes in successive generations of a species occur in response to a change in the environment", "fol": "", "prediction": ["all x y.((Species(x) & Generation(y) & EnvironmentChange(x,y)) -> ChangesInSuccessfulGenerationsOfSpecies(x,y))"]}
{"id": "eqasc_train_6823", "nl": "Animals react instinctively to changes in their environment.", "fol": "", "prediction": ["all x.(Animal(x) -> (ReactsInstinctivelyToChange(x) & InEnvironment(x)))"]}
{"id": "eqasc_train_6824", "nl": "Evolution occurs in animals as they respond to change in their habitat.", "fol": "", "prediction": ["all x y.((Animal(x) & HabitatChange(y)) -> EvolutionOccursIn(x,y))"]}
{"id": "eqasc_train_6825", "nl": "Organisms adapt to changes in their environment.", "fol": "", "prediction": ["all x.(Organism(x) -> AdaptsToEnvironmentChanges(x))"]}
{"id": "eqasc_train_6826", "nl": "Organisms adapting is evolution", "fol": "", "prediction": ["all x.(AdaptingOrganisms(x) -> Evolution(x))"]}
{"id": "eqasc_train_6827", "nl": "Climate change is likely to have a significant impact on the global environment and human society.", "fol": "", "prediction": ["all x.(ClimateChange(x) -> (SignificantImpactOnEnvironment(x) & SignificantImpactOnHumanSociety(x)))"]}
{"id": "eqasc_train_6828", "nl": "Climate change is likely to result in a significant evolutionary response.", "fol": "", "prediction": ["all x.(ClimateChange(x) -> SignificantEvolutionaryResponse(x))"]}
{"id": "eqasc_train_6829", "nl": "Speciation is an extension of evolution.", "fol": "", "prediction": ["all x.(Speciation(x) -> ExtensionOfEvolution(x))"]}
{"id": "eqasc_train_6830", "nl": "speciation occurs in response to a change in the environment", "fol": "", "prediction": ["all x y.((Speciation(x) & EnvironmentChange(y)) -> OccursInResponseTo(x,y))"]}
{"id": "eqasc_train_6831", "nl": "Biological evolution is a change in the genetic characteristics of a population over time.", "fol": "", "prediction": ["all x y.((BiologicalEvolution(x) & Population(y)) -> ChangesGeneticCharacteristicsOverTime(x,y))"]}
{"id": "eqasc_train_6832", "nl": "change in the genetic characteristics occurs in response to a change in the environment.", "fol": "", "prediction": ["all x y.((GeneticCharacteristicsChange(x) & EnvironmentChange(y)) -> OccursInResponseToChange(x,y))"]}
{"id": "eqasc_train_6833", "nl": "cell division often causes growth", "fol": "", "prediction": ["all x.(CellDividend(x) -> CausesGrowth(x))"]}
{"id": "eqasc_train_6834", "nl": "mitosis often causes growth", "fol": "", "prediction": ["all x.(Mitosis(x) -> CausesGrowth(x))"]}
{"id": "eqasc_train_6835", "nl": "Cell mitosis causes growth of an organism.", "fol": "", "prediction": ["all x y.((CellMitosis(x) & Organism(y)) -> CausesGrowth(x,y))"]}
{"id": "eqasc_train_6836", "nl": "Cancer is uncontrolled cell division and growth.", "fol": "", "prediction": ["all x.(Cancer(x) -> (UncontrolledCellDividetion(x) & UncontrolledGrowth(x)))"]}
{"id": "eqasc_train_6837", "nl": "Cell division can be uncontrolled. ", "fol": "", "prediction": ["all x.(CellDividend(x) -> Uncontrolled(x))"]}
{"id": "eqasc_train_6838", "nl": "Mitosis is a simple, single cell division .", "fol": "", "prediction": ["all x.(Mitosis(x) -> (SimpleCellDividection(x) & SingleCellDividection(x)))"]}
{"id": "eqasc_train_6839", "nl": "Mitosis often causes growth.", "fol": "", "prediction": ["all x.(Mitosis(x) -> CausesGrowth(x))"]}
{"id": "eqasc_train_6840", "nl": "Growth and Development Most organisms grow.", "fol": "", "prediction": ["all x.(Organism(x) -> (Growth(x) & Development(x)))"]}
{"id": "eqasc_train_6841", "nl": "Cell division causes organisms to grow.", "fol": "", "prediction": ["all x.(CellDividend(x) -> CausesOrganismsToGrow(x))"]}
{"id": "eqasc_train_6842", "nl": "Cell division is necessary for growth, repair, replacement, and reproduction.", "fol": "", "prediction": ["all x.(CellDividend(x) -> (NecessaryForGrowth(x) & NecessaryForRepair(x) & NecessaryForRepair(x) & NecessaryForRepair(x) & NecessaryForReproduction(x)))"]}
{"id": "eqasc_train_6843", "nl": "Cell splitting is necessary for growth", "fol": "", "prediction": ["all x.(CellSplitting(x) -> NecessaryForGrowth(x))"]}
{"id": "eqasc_train_6844", "nl": "Cell division is relatively slow and requires a lot of energy.", "fol": "", "prediction": ["all x.(CellDivision(x) -> (RelativelySlow(x) & RequiresLotOfEnergy(x)))"]}
{"id": "eqasc_train_6845", "nl": "growth often requires a lot of energy", "fol": "", "prediction": ["all x.((Growth(x) & RequiresLotOfEnergy(x)) -> RequiresLotOfEnergy(x))"]}
{"id": "eqasc_train_6846", "nl": "Cytology Cell division Cells proliferate by mitotic division.", "fol": "", "prediction": ["all x.(Cytology(x) -> CellDivision(x))"]}
{"id": "eqasc_train_6847", "nl": "Growth can be cancerous, disastrous, or growth can be healthy.", "fol": "", "prediction": ["all x.(Growth(x) -> (Cancerous(x) | Desastrous(x) | Healthy(x)))"]}
{"id": "eqasc_train_6848", "nl": "cell division can be cancerous", "fol": "", "prediction": ["all x.(CellDividend(x) -> Cancerous(x))"]}
{"id": "eqasc_train_6849", "nl": "Growth is the process by which the size of a tissue gets bigger.", "fol": "", "prediction": ["all x.(Growth(x) -> SizeOfTissue(x))"]}
{"id": "eqasc_train_6850", "nl": "Cell division causes the process by which tissue gets bigger.", "fol": "", "prediction": ["all x.(CellDivision(x) -> CausesTissueGasBerger(x))"]}
{"id": "eqasc_train_6851", "nl": "Tumor simply means abnormal growth.", "fol": "", "prediction": ["all x.(Tumor(x) -> AnomalyGrowth(x))"]}
{"id": "eqasc_train_6852", "nl": "Abnormal cell division can cause tumors.", "fol": "", "prediction": ["all x.(AbnormalCellDividend(x) -> CausesTumors(x))"]}
{"id": "eqasc_train_6853", "nl": "Growth of the cell normally means reproduction.", "fol": "", "prediction": ["all x.((Cell(x) & Growth(x)) -> NormalReproduction(x))"]}
{"id": "eqasc_train_6854", "nl": "Cell division leads to reproduction", "fol": "", "prediction": ["all x y.((CellDividend(x) & Reproduction(y)) -> LeadsTo(x,y))"]}
{"id": "eqasc_train_6855", "nl": "Cell division produces daughter cells of equal size.", "fol": "", "prediction": ["all x.(CellDividend(x) -> ProducesDaughterCellsEqualSize(x))"]}
{"id": "eqasc_train_6856", "nl": "Producing daughter cells of equal size often causes growth", "fol": "", "prediction": ["all x y.((ProducingDaughterCells(x) & DaughterCellsEqualSize(x)) -> CausesGrowth(y))"]}
{"id": "eqasc_train_6857", "nl": "Centrioles participate in cell division.", "fol": "", "prediction": ["all x.(Centriole(x) -> ParticipatesInCellDividend(x))"]}
{"id": "eqasc_train_6858", "nl": "centrioles are required for growth", "fol": "", "prediction": ["all x.(Centriole(x) -> RequiresForGrowth(x))"]}
{"id": "eqasc_train_6859", "nl": "Cancer often causes growth.", "fol": "", "prediction": ["all x.(Cancer(x) -> CausesGrowth(x))"]}
{"id": "eqasc_train_6860", "nl": "Corals form large colonies in shallow tropical water.", "fol": "", "prediction": ["all x.(Coral(x) -> FormsLargeColony(x))"]}
{"id": "eqasc_train_6861", "nl": "Warm tropical waters provide unrivaled encounters.", "fol": "", "prediction": ["all x.(WarmTropicalWater(x) -> UnrivaledEnthusiasms(x))"]}
{"id": "eqasc_train_6862", "nl": "corals form in warm waters", "fol": "", "prediction": ["all x y.((Coral(x) & WarmWater(y)) -> FormsIn(x,y))"]}
{"id": "eqasc_train_6863", "nl": "Corals are tiny flower-like animals that live in colonies.", "fol": "", "prediction": ["all x.(Coral(x) -> (TinyFlowerLike(x) & LivesInColony(x)))"]}
{"id": "eqasc_train_6864", "nl": "Flower-like animals live in shallow tropical water", "fol": "", "prediction": ["all x.(FlowerLikeAnimal(x) -> LivesInShallowTropicalWater(x))"]}
{"id": "eqasc_train_6865", "nl": "Coral communities are found only in warm waters.", "fol": "", "prediction": ["all x.(CoralCommunity(x) -> FoundInWarmWaters(x))"]}
{"id": "eqasc_train_6866", "nl": "shallow tropical water is warm", "fol": "", "prediction": ["all x.(SwitchTropicalWater(x) -> Warm(x))"]}
{"id": "eqasc_train_6867", "nl": "Huge colonies of hard corals form coral reefs .", "fol": "", "prediction": ["all x y.((HardCoralColony(x) & CoralReef(y)) -> Forms(x,y))"]}
{"id": "eqasc_train_6868", "nl": "Reefs form in shallow tropical water.", "fol": "", "prediction": ["all x.(Reef(x) -> FormsInShallowTropicalWater(x))"]}
{"id": "eqasc_train_6869", "nl": "Tropical fishes require warm water.", "fol": "", "prediction": ["all x.(TropicalFish(x) -> RequiresWarmWater(x))"]}
{"id": "eqasc_train_6870", "nl": "Corals form large colonies in shallow warm waterways", "fol": "", "prediction": ["all x y.((Coral(x) & DeepWarmWaterway(y)) -> FormsLargeColony(x,y))"]}
{"id": "eqasc_train_6871", "nl": "Coral is the calcite shell of the coral animal.", "fol": "", "prediction": ["all x.(Coral(x) -> CalciteShell(x))"]}
{"id": "eqasc_train_6872", "nl": "calcite shells form large colonies in shallow tropical water", "fol": "", "prediction": ["all x.(CalciteShell(x) -> FormsLargeColoniesInShallowTropicalWater(x))"]}
{"id": "eqasc_train_6873", "nl": "Some sea fish live in tropical waters, where the water is always warm.", "fol": "", "prediction": ["exists x.(SeaFish(x) & LivesInTropicalWater(x) & WaterWarm(x))"]}
{"id": "eqasc_train_6874", "nl": "corals form large colonies in warm water", "fol": "", "prediction": ["all x.(Coral(x) -> FormsLargeColoniesInWarmWater(x))"]}
{"id": "eqasc_train_6875", "nl": "Coral reefs are found in the warm, clear, shallow waters of tropical oceans worldwide.", "fol": "", "prediction": ["all x.(CoralReef(x) -> (FoundInWarmClearShallowWaters(x) & FoundInTropicalOceans(x)))"]}
{"id": "eqasc_train_6876", "nl": "corals form large colonies in the warm, clear shallow waters ", "fol": "", "prediction": ["all x y.((Coral(x) & WarmShallowWater(y)) -> FormsLargeColony(x,y))"]}
{"id": "eqasc_train_6877", "nl": "Water is shallow at the shore with gradual deepening.", "fol": "", "prediction": ["all x.(Water(x) -> (SwitchAtSurface(x) & GradualDependening(x)))"]}
{"id": "eqasc_train_6878", "nl": "Corals form large colonies at the shoreline.", "fol": "", "prediction": ["all x.(Coral(x) -> FormsLargeColony(x))"]}
{"id": "eqasc_train_6879", "nl": "Corals Corals are in the polyp stage.", "fol": "", "prediction": ["all x.(Coral(x) -> PolypStage(x))"]}
{"id": "eqasc_train_6880", "nl": "Something in the polyp stage can form large colonies in shallow tropical water.", "fol": "", "prediction": ["all x.(PolypStage(x) -> FormsLargeColoniesInShallowTropicalWater(x))"]}
{"id": "eqasc_train_6881", "nl": "accumulated exoskeletons form in shallow tropical water", "fol": "", "prediction": ["all x y.((Exoskeleton(x) & Accumulated(x)) -> FormsInShallowTropicalWater(x,y))"]}
{"id": "eqasc_train_6882", "nl": "animals with calcite shells form large colonies in shallow tropical water.", "fol": "", "prediction": ["all x.((Animal(x) & CalciteShells(x)) -> FormsLargeColoniesInShallowTropicalWater(x))"]}
{"id": "eqasc_train_6883", "nl": "Shallow tropical waters are remarkable places.", "fol": "", "prediction": ["all x.(ShallowTropicalWater(x) -> RemarkablePlace(x))"]}
{"id": "eqasc_train_6884", "nl": "corals form large colonies in remarkable places", "fol": "", "prediction": ["all x y z.((Coral(x) & Colony(y) & Place(z)) -> FormsLargeColony(x,y,z))"]}
{"id": "eqasc_train_6885", "nl": "an animal requires nutrients to grow and heal", "fol": "", "prediction": ["all x.((Animal(x) & RequiresNutrients(x)) -> GrowAndHeal(x))"]}
{"id": "eqasc_train_6886", "nl": "An animal requires ingestion to grow and heal.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresIngestion(x))"]}
{"id": "eqasc_train_6887", "nl": "humans require nutrients to grow and heal", "fol": "", "prediction": ["all x.(Human(x) -> (RequiresNutrients(x) & Grows(x) & Heals(x)))"]}
{"id": "eqasc_train_6888", "nl": "Animals eat plants to grow", "fol": "", "prediction": ["all x y z.((Animal(x) & Plant(y) & Plant(z)) -> EatsToGrow(x,y,z))"]}
{"id": "eqasc_train_6889", "nl": "Potassium is essential for an animal to grow", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> EssentialPotassium(x,y))"]}
{"id": "eqasc_train_6890", "nl": "an animal requires food to grow and heal", "fol": "", "prediction": ["all x.((Animal(x) & RequiresFood(x)) -> GrowsAndHeals(x))"]}
{"id": "eqasc_train_6891", "nl": "dogs require nutrients to grow and heal", "fol": "", "prediction": ["all x.(Dog(x) -> (RequiresNutrients(x) & Grows(x) & Heals(x)))"]}
{"id": "eqasc_train_6892", "nl": "Foods contain nutrients that provide people with necessary energy and essential nutrients.", "fol": "", "prediction": ["all x.(Food(x) -> (ContainsNutrients(x) & ProvidesNecessaryEnergy(x) & ProvidesEssentialNutrients(x)))"]}
{"id": "eqasc_train_6893", "nl": "Microbes provide nutrients to animals.", "fol": "", "prediction": ["all x y.((Microbe(x) & Animal(y)) -> ProvidesNutrients(x,y))"]}
{"id": "eqasc_train_6894", "nl": "Animals require microbes to grow and heal.", "fol": "", "prediction": ["all x.(Animal(x) -> (RequiresMicrobes(x) & Grows(x) & Heals(x)))"]}
{"id": "eqasc_train_6895", "nl": "Nutrients that promote healing include vitamin C, zinc, copper, vitamin A, and B vitamins.", "fol": "", "prediction": ["all x.((Nutrient(x) & PromotesHealing(x)) -> (VitaminC(x) | Zinc(x) | Copper(x) | VitaminA(x) | BVitamin(x)))"]}
{"id": "eqasc_train_6896", "nl": "vitamin C helps animals heal", "fol": "", "prediction": ["all x.(VitaminC(x) -> HelpsAnimalsHeal(x))"]}
{"id": "eqasc_train_6897", "nl": "Microbes can help an animal to grow and heal.", "fol": "", "prediction": ["all x y.((Microbe(x) & Animal(y)) -> (HelpsGrow(x,y) & HelpsHeal(x,y)))"]}
{"id": "eqasc_train_6898", "nl": "touch can be used for detecting texture", "fol": "", "prediction": ["all x.(Touch(x) -> (DetectsTexture(x) & UsesTouch(x)))"]}
{"id": "eqasc_train_6899", "nl": "When the hand touches the cup, touching.", "fol": "", "prediction": ["all x y.((Hand(x) & Cup(y) & Touches(x,y)) -> Touching(x))"]}
{"id": "eqasc_train_6900", "nl": "The hand can be used to detect texture.", "fol": "", "prediction": ["all x.(Hand(x) -> CanDetectTexture(x))"]}
{"id": "eqasc_train_6901", "nl": "If two pieces are making physical contact in any way, they're touching.", "fol": "", "prediction": ["all x.((Piece(x) & MakingPhysicalContact(x)) -> Touching(x))"]}
{"id": "eqasc_train_6902", "nl": "Physical contact can be used to detect texture", "fol": "", "prediction": ["all x.(PhysicalContact(x) -> CanDetectTexture(x))"]}
{"id": "eqasc_train_6903", "nl": "The skin is richly supplied with nerves that enable the perception of pain, touch, heat, and cold.", "fol": "", "prediction": ["all x.(Skin(x) -> (RichlySuppliedWithNervous(x) & EnablesPerceptionOfPain(x) & EnablesPerceptionOfTouch(x) & EnablesPerceptionOfHeat(x) & EnablesPerceptionOfCold(x)))"]}
{"id": "eqasc_train_6904", "nl": "Nerves are used to feel texture", "fol": "", "prediction": ["all x y.((Nerve(x) & Texture(y)) -> Feels(x,y))"]}
{"id": "eqasc_train_6905", "nl": "The sense of touch is the sense by which pressure on the skin is perceived.", "fol": "", "prediction": ["all x.(SenseOfTouch(x) -> PerceivedPressureOnSkin(x))"]}
{"id": "eqasc_train_6906", "nl": "pressure on the skin can be used for detecting texture", "fol": "", "prediction": ["all x y.((Skin(x) & PressureOnSkin(y)) -> CanDetectTexture(x,y))"]}
{"id": "eqasc_train_6907", "nl": "My fingers can touch.", "fol": "", "prediction": ["all x.(Fingers(x) -> CanTouch(x))"]}
{"id": "eqasc_train_6908", "nl": "fingers can be used for detecting texture", "fol": "", "prediction": ["all x.(Fingers(x) -> (DetectsTexture(x) & Fingers(x)))"]}
{"id": "eqasc_train_6909", "nl": "Texture: rough, smooth.", "fol": "", "prediction": ["Texture: Rough, Smooth."]}
{"id": "eqasc_train_6910", "nl": "Touch can be used for detecting the smoothness of an object", "fol": "", "prediction": ["all x y.((Touch(x) & Object(y)) -> (DetectsSmoothness(x,y) & DetectsSmoothness(x,y)))"]}
{"id": "eqasc_train_6911", "nl": "Nerve endings in the dermis are the source of the body's sense of touch.", "fol": "", "prediction": ["all x y.((NervousEnding(x) & Dermis(y)) -> SourceOfSenseOfTouch(x,y))"]}
{"id": "eqasc_train_6912", "nl": "Nerve endings in the dermis can be used for detecting texture", "fol": "", "prediction": ["all x y.((NervineEnding(x) & Dermis(y)) -> CanDetectTexture(x,y))"]}
{"id": "eqasc_train_6913", "nl": "Since skin is the largest organ in the body, touch is extremely important.", "fol": "", "prediction": ["all x.((Skin(x) & LargestOrgan(x)) -> TouchIsExtremelyImportant(x))"]}
{"id": "eqasc_train_6914", "nl": "The largest organ in the body can be used for detecting texture.", "fol": "", "prediction": ["all x.((Organ(x) & LargestInBody(x)) -> CanDetectTexture(x))"]}
{"id": "eqasc_train_6915", "nl": "Touch is the earliest of the five senses to develop.", "fol": "", "prediction": ["Touch is the earliest of the five senses to develop."]}
{"id": "eqasc_train_6916", "nl": "The ability to detect texture is the earliest of the five senses to develop.", "fol": "", "prediction": ["all x.(DetectTexture(x) -> earliestSenseToDevelops(x))"]}
{"id": "eqasc_train_6917", "nl": "Texture can be soft, fuzzy, rough, smooth, bumpy, hard, or slick.", "fol": "", "prediction": ["all x.(Texture(x) -> (Soft(x) | Fuzzy(x) | Rough(x) | Smooth(x) | Bumpy(x) | Hard(x) | Slick(x)))"]}
{"id": "eqasc_train_6918", "nl": "touch can be used for detecting fuzzy", "fol": "", "prediction": ["all x.(Touch(x) -> (DetectsFookyFoot(x) & UsesTouch(x)))"]}
{"id": "eqasc_train_6919", "nl": "All plants have a characteristic life cycle that includes alternation of generations.", "fol": "", "prediction": ["all x.(Plant(x) -> (LifeCycle(x) & AlterationOfGenerations(x)))"]}
{"id": "eqasc_train_6920", "nl": "Alternation of generations always includes a sexual phase alternating with an asexual phase.", "fol": "", "prediction": ["all x.(AlternationOfGenerations(x) -> (IncludesSexualPhase(x) & AlternatesAsexualPhase(x)))"]}
{"id": "eqasc_train_6921", "nl": "All plants have a characteristic life cycle that includes sexual and asexual reproduction.", "fol": "", "prediction": ["all x.(Plant(x) -> (HasCharacteristicLifeCycle(x) & IncludesSexualReproduction(x) & IncludesAsexualReproduction(x)))"]}
{"id": "eqasc_train_6922", "nl": "bushes have a life cycle that includes alternation of generations", "fol": "", "prediction": ["all x.(Bush(x) -> (LifeCycle(x) & AlterationOfGenerations(x)))"]}
{"id": "eqasc_train_6923", "nl": "Alternation of generation is typical of ferns and Bryophyta.", "fol": "", "prediction": ["all x.((Fern(x) & Bryophyta(x)) -> AlternationOfGeneration(x))"]}
{"id": "eqasc_train_6924", "nl": "ferns are plants", "fol": "", "prediction": ["all x.(Fern(x) -> Plant(x))"]}
{"id": "eqasc_train_6925", "nl": "All ferns are shade plants.", "fol": "", "prediction": ["all x.(Fern(x) -> ShadePlant(x))"]}
{"id": "eqasc_train_6926", "nl": "Ferns have a characteristic life cycle that includes alternation of generations.", "fol": "", "prediction": ["all x.(Fern(x) -> (CharacteristicLifeCycle(x) & AlterationOfGenerations(x)))"]}
{"id": "eqasc_train_6927", "nl": "All trees are plants, including redwoods.", "fol": "", "prediction": ["all x.(Tree(x) -> (Plant(x) | Redwood(x)))"]}
{"id": "eqasc_train_6928", "nl": "All redwoods have a characteristic life cycle that includes alternation of generations.", "fol": "", "prediction": ["all x.(Redwood(x) -> HasCharacteristicLifeCycle(x))"]}
{"id": "eqasc_train_6929", "nl": "Plants have chlorophyll and an alternation of generations .", "fol": "", "prediction": ["all x.(Plant(x) -> (HasChlorophyll(x) & AlterationOfGenerations(x)))"]}
{"id": "eqasc_train_6930", "nl": "Plants have chlorophyll and a characteristic life cycle", "fol": "", "prediction": ["all x.(Plant(x) -> (HasChlorophyll(x) & CharacteristicLifeCycle(x)))"]}
{"id": "eqasc_train_6931", "nl": "orchids have a characteristic life cycle that includes alternation of generations", "fol": "", "prediction": ["all x.(Orchid(x) -> (CharacteristicLifeCycle(x) & AlterationOfGenerations(x)))"]}
{"id": "eqasc_train_6932", "nl": "Plant and animal life cycles are detailed, including birth, growth, reproduction, and death.", "fol": "", "prediction": ["all x.((Plant(x) | Animal(x)) -> (Birth(x) & Growth(x) & Reproduction(x) & Death(x)))"]}
{"id": "eqasc_train_6933", "nl": "All plants have a characteristic life cycle that are detailed with birth, growth, reproduction and death", "fol": "", "prediction": ["all x.(Plant(x) -> (HasCharacteristicLifeCycle(x) & DetailsBirthGrowthReproductionAndDeath(x)))"]}
{"id": "eqasc_train_6934", "nl": "Kaufmanniana tulips are small plants.", "fol": "", "prediction": ["all x.(KaufmannianaTulips(x) -> SmallPlant(x))"]}
{"id": "eqasc_train_6935", "nl": "tulips have a characteristic life cycle that includes alternation of generations.", "fol": "", "prediction": ["all x.(Tulips(x) -> (CharacteristicLifeCycle(x) & AlterationOfGenerations(x)))"]}
{"id": "eqasc_train_6936", "nl": "Life Cycles Of Organisms Reproduction is a characteristic of all living systems.", "fol": "", "prediction": ["all x.((LifeCyclesOfOrganisms(x) & Reproduction(x)) -> CharacteristicOfLivingSystems(x))"]}
{"id": "eqasc_train_6937", "nl": "All plants reproduce which includes alternation of generations", "fol": "", "prediction": ["all x.(Plant(x) -> (Reproduces(x) & AlterationOfGenerations(x)))"]}
{"id": "eqasc_train_6938", "nl": "Different kinds of plants have different life cycles.", "fol": "", "prediction": ["all x.(Plant(x) -> DifferentLifeCycles(x))"]}
{"id": "eqasc_train_6939", "nl": "Different kinds of plants have different changes in their life but all include alternation of generations", "fol": "", "prediction": ["all x.(Plant(x) -> (DifferentChangesInLife(x) & AlterationOfGenerations(x)))"]}
{"id": "eqasc_train_6940", "nl": "Descendant includes descendants of all generations.", "fol": "", "prediction": ["all x.(Descendant(x) -> IncludesGenerations(x))"]}
{"id": "eqasc_train_6941", "nl": "All plants have a characteristic life cycle that includes alternation of descendants.", "fol": "", "prediction": ["all x.(Plant(x) -> (LifeCycle(x) & AlterationOfDescended(x)))"]}
{"id": "eqasc_train_6942", "nl": "Goldenrod is a plant that generates activity.", "fol": "", "prediction": ["all x.(Goldenrod(x) -> GeneratesActivity(x))"]}
{"id": "eqasc_train_6943", "nl": "Goldenrod life cycle includes alternation of generations.", "fol": "", "prediction": ["all x.(GoldenrodLifeCycle(x) -> AlterationOfGenerations(x))"]}
{"id": "eqasc_train_6944", "nl": "Bamboos are among the most useful of all plants.", "fol": "", "prediction": ["all x.(Bamboo(x) -> MostUsefulPlant(x))"]}
{"id": "eqasc_train_6945", "nl": "bamboo has  a characteristic life cycle that includes alternation of generations.", "fol": "", "prediction": ["all x.(Bamboo(x) -> (LifeCycle(x) & AlterationOfGenerations(x)))"]}
{"id": "eqasc_train_6946", "nl": "Many of the plants are fruit trees.", "fol": "", "prediction": ["exists x.(Plant(x) & FruitTree(x))"]}
{"id": "eqasc_train_6947", "nl": "All trees have a characteristic life cycle that includes alternation of generations.", "fol": "", "prediction": ["all x.(Tree(x) -> (LifeCycle(x) & AlterationOfGenerations(x)))"]}
{"id": "eqasc_train_6948", "nl": "infection can cause bodily tissues to swell", "fol": "", "prediction": ["all x y.((Infection(x) & BodyTissue(y)) -> CausesSwelling(x,y))"]}
{"id": "eqasc_train_6949", "nl": "An invasion of the body by bacteria can cause body tissues to swell.", "fol": "", "prediction": ["all x y.((InvasionOfBody(x) & Bacteria(y)) -> CausesBodyTissuesToSwell(x,y))"]}
{"id": "eqasc_train_6950", "nl": "Joints swell painfully.", "fol": "", "prediction": ["all x.(Joint(x) -> SwellsPainfully(x))"]}
{"id": "eqasc_train_6951", "nl": "infection can cause joint pain", "fol": "", "prediction": ["all x.(Infection(x) -> CausesJoinPain(x))"]}
{"id": "eqasc_train_6952", "nl": "Bacteria can cause infection.", "fol": "", "prediction": ["all x.(Bacteria(x) -> CanCauseInfection(x))"]}
{"id": "eqasc_train_6953", "nl": "bacteria can cause bodily tissues to swell", "fol": "", "prediction": ["all x.(Bacteria(x) -> CausesSwelling(x))"]}
{"id": "eqasc_train_6954", "nl": "HIV infection is a chronic lifelong infection.", "fol": "", "prediction": ["all x.(HIVInfection(x) -> ChronicLifelongInfection(x))"]}
{"id": "eqasc_train_6955", "nl": "HIV can cause bodily tissues to swell", "fol": "", "prediction": ["all x.(HIV(x) -> CausesBodylyTissuesToSwell(x))"]}
{"id": "eqasc_train_6956", "nl": "Doctors call such tissue swelling edema.", "fol": "", "prediction": ["all x.(Doctor(x) -> TissueSwellingEdema(x))"]}
{"id": "eqasc_train_6957", "nl": "An infection can cause edema", "fol": "", "prediction": ["all x.(Infection(x) -> CausesEdema(x))"]}
{"id": "eqasc_train_6958", "nl": "Connective tissue is the common network for bodily systems and energy pathways.", "fol": "", "prediction": ["all x.(ConnectiveTissue(x) -> (CommonNetwork(x) & ForBodylySystemsAndEnergyPathways(x)))"]}
{"id": "eqasc_train_6959", "nl": "infection can cause connective tissues to swell", "fol": "", "prediction": ["all x y.((Infection(x) & ConnectiveTissue(y)) -> CausesSwelling(x,y))"]}
{"id": "eqasc_train_6960", "nl": "An abscess or swelling is caused by an infection in the tooth or gum.", "fol": "", "prediction": ["all x.((Abscess(x) | Swelling(x)) -> (InfectionInTooth(x) | InfectionInGum(x)))"]}
{"id": "eqasc_train_6961", "nl": "abcess can cause a tooth to swell", "fol": "", "prediction": ["all x y.((Abcess(x) & Teeth(y)) -> CausesSwelling(x,y))"]}
{"id": "eqasc_train_6962", "nl": "Bacteria can cause bodily tissues to swell.", "fol": "", "prediction": ["all x.(Bacteria(x) -> CausesBodylyTissuesToSwell(x))"]}
{"id": "eqasc_train_6963", "nl": "Infection can cause edema in bodily tissues.", "fol": "", "prediction": ["all x.(Infection(x) -> CausesEdemaInBodylyTissues(x))"]}
{"id": "eqasc_train_6964", "nl": "Inflammation causes the tissues that line the airways to swell and produce extra or thick mucus.", "fol": "", "prediction": ["all x y.((Inflammation(x) & Tissues(y) & LineAirways(x,y)) -> (Swells(x) & ProducesExtraOrThickMucus(x)))"]}
{"id": "eqasc_train_6965", "nl": "infection can cause inflammation ", "fol": "", "prediction": ["all x.(Infection(x) -> CausesInflammation(x))"]}
{"id": "eqasc_train_6966", "nl": "An aneurysm is a swelling in a blood vessel.", "fol": "", "prediction": ["all x.(Aneurysm(x) -> (SwellingInBloodVessel(x) & InBloodVessel(x)))"]}
{"id": "eqasc_train_6967", "nl": "infection can cause an aneurysm", "fol": "", "prediction": ["all x.(Infection(x) -> CanCauseAneurysm(x))"]}
{"id": "eqasc_train_6968", "nl": "Antihistamines reduce swelling in mucous membranes and soft tissues.", "fol": "", "prediction": ["all x.(Antihistamine(x) -> (ReducesSwelling(x) & InMucousMembrane(x) & InSoftTissues(x)))"]}
{"id": "eqasc_train_6969", "nl": "Antihistamines can help with certain infections.", "fol": "", "prediction": ["all x.(Antihistamine(x) -> CanHelpWithInfections(x))"]}
{"id": "eqasc_train_6970", "nl": "boiling is when liquids are heated above their boiling point", "fol": "", "prediction": ["all x.(Boiling(x) -> (LiquidsHeatedAboveBoilingPoint(x) & HeatsAboveBoilingPoint(x)))"]}
{"id": "eqasc_train_6971", "nl": "Boiling is the conversion of a liquid to a gas.", "fol": "", "prediction": ["all x y.((Boiling(x) & Liquid(y)) -> ConvertsToGas(x,y))"]}
{"id": "eqasc_train_6972", "nl": "Converting a liquid to a gas happens when liquids are heated above a point.", "fol": "", "prediction": ["all x y.((Liquid(x) & Gas(y) & HeatsAbovePoint(x,y)) -> Converts(x,y))"]}
{"id": "eqasc_train_6973", "nl": "Heating liquids above a certain temperature converts to gas", "fol": "", "prediction": ["all x y.((HeatingLiquids(x) & TemperatureAbove(x,y)) -> ConvertsToGas(x))"]}
{"id": "eqasc_train_6974", "nl": "Boiling water can cause burns.", "fol": "", "prediction": ["all x.(BoilingWater(x) -> CausesBurns(x))"]}
{"id": "eqasc_train_6975", "nl": "heating water can cause burns", "fol": "", "prediction": ["all x.(HeatingWater(x) -> CanCauseBurns(x))"]}
{"id": "eqasc_train_6976", "nl": "Lots of gas bubbles burst over the boiling lakes' surface.", "fol": "", "prediction": ["all x y.((GasBubble(x) & BoilingLakeSurface(y)) -> BurstsOver(x,y))"]}
{"id": "eqasc_train_6977", "nl": "Gas bubbles burst when liquids are heated.", "fol": "", "prediction": ["all x.((GasBolt(x) & HeatsLiquids(x)) -> Bursts(x))"]}
{"id": "eqasc_train_6978", "nl": "Evaporation and boiling are the same.", "fol": "", "prediction": ["all x.(Evaporation(x) -> Boiling(x))"]}
{"id": "eqasc_train_6979", "nl": "Evaporation is when liquids are heated above their evaporation point", "fol": "", "prediction": ["all x.(Evaporation(x) -> (LiquidsHeatedAboveEvaporationPoint(x) & HeatsAboveEvaporationPoint(x)))"]}
{"id": "eqasc_train_6980", "nl": "Vapor pressure is about liquids boiling.", "fol": "", "prediction": ["all x.(VaporPressure(x) -> LiquidBoiling(x))"]}
{"id": "eqasc_train_6981", "nl": "Vapor pressure  is when liquids are heated", "fol": "", "prediction": ["all x.(VaporPressure(x) -> (LiquidsHeated(x) & Heats(x)))"]}
{"id": "eqasc_train_6982", "nl": "On the Celsius scale, the freezing point of water is 0 degrees and the boiling point is 100 degrees.", "fol": "", "prediction": ["(CelsiusScale(Celsius) -> (FreezingPoint(Celsius) & -Celsius(Celsius)))"]}
{"id": "eqasc_train_6983", "nl": "Water boils when it's heated above 100 degrees", "fol": "", "prediction": ["all x.((Water(x) & HeatedAbove100Degrees(x)) -> Boils(x))"]}
{"id": "eqasc_train_6984", "nl": "heating a liquid can cause burns", "fol": "", "prediction": ["all x y.((Liquid(x) & Liquid(y)) -> (Heating(x,y) & CausesBurns(x)))"]}
{"id": "eqasc_train_6985", "nl": "If the pressure is reduced, the boiling point is lowered.", "fol": "", "prediction": ["all x.((PressureReduced(x) & BoilingPointDiminished(x)) -> Reduced(x))"]}
{"id": "eqasc_train_6986", "nl": "Less heating is required to make a liquid boil if the pressure is reduced", "fol": "", "prediction": ["all x.((LiquidBoil(x) & ReducedPressure(x)) -> LessHeatingRequired(x))"]}
{"id": "eqasc_train_6987", "nl": "Boiling point is also affected by pressure.", "fol": "", "prediction": ["all x.(BoilingPoint(x) -> AffectedByPressure(x))"]}
{"id": "eqasc_train_6988", "nl": " liquids  heated are affected by pressure", "fol": "", "prediction": ["all x.((LiquidsHeated(x) & PressureAffected(x)) -> Heats(x))"]}
{"id": "eqasc_train_6989", "nl": "using a car causes pollution", "fol": "", "prediction": ["all x y.((Car(x) & Car(y)) -> CausesPollution(x,y))"]}
{"id": "eqasc_train_6990", "nl": "cars hurt the environment", "fol": "", "prediction": ["all x.(Car(x) -> HurtsEnvironment(x))"]}
{"id": "eqasc_train_6991", "nl": "Animals are killed everyday because of pollution.", "fol": "", "prediction": ["all x.((Animal(x) & Pollution(x)) -> KilledEveryDay(x))"]}
{"id": "eqasc_train_6992", "nl": "Using a car kills animals every day.", "fol": "", "prediction": ["all x.((Car(x) & Uses(x,y)) -> KillsAnimalsEveryDay(y))"]}
{"id": "eqasc_train_6993", "nl": "Volkswagen remains the top European car brand sold in America.", "fol": "", "prediction": ["all x.((Vodge(x) & TopEuropeanCarBrand(x)) -> SoldInAmerica(x))"]}
{"id": "eqasc_train_6994", "nl": "volkswagen causes pollution", "fol": "", "prediction": ["all x.(Volkswagen(x) -> CausesPollution(x))"]}
{"id": "eqasc_train_6995", "nl": "Environmental pollution leads to more ill-health.", "fol": "", "prediction": ["all x.(EnvironmentalPollution(x) -> MoreIllHealth(x))"]}
{"id": "eqasc_train_6996", "nl": "Using a car leads to more ill-health.", "fol": "", "prediction": ["all x.((Car(x) & Uses(x)) -> MoreIllHealth(x))"]}
{"id": "eqasc_train_6997", "nl": "Pollution is a damaging excess of contaminants.", "fol": "", "prediction": ["all x.(Pollution(x) -> DamagedExcessOfContaminants(x))"]}
{"id": "eqasc_train_6998", "nl": "Cars damage the environment by causing an excess of contaminants", "fol": "", "prediction": ["all x y.((Car(x) & Environment(y)) -> (Damages(x,y) & CausesExcessOfContaminants(x)))"]}
{"id": "eqasc_train_6999", "nl": "Harmful emissions from cars are largely responsible for the giant holes in the ozone layer.", "fol": "", "prediction": ["all x.((Car(x) & HarmfulEmissions(x)) -> GiantHolesInOzoneLayer(x))"]}
{"id": "eqasc_train_7000", "nl": "Pollution is responsible for holes in the ozone", "fol": "", "prediction": ["all x y.((Pollution(x) & Ozone(y)) -> ResponsibleForHoles(x,y))"]}
{"id": "eqasc_train_7001", "nl": "Acid rain is caused by pollution.", "fol": "", "prediction": ["all x.(AcidRain(x) -> CausedByPollution(x))"]}
{"id": "eqasc_train_7002", "nl": "cars can cause acid rain", "fol": "", "prediction": ["all x.(Car(x) -> CausesAcidRain(x))"]}
{"id": "eqasc_train_7003", "nl": "Using a car can be a major threat to health.", "fol": "", "prediction": ["all x.((Car(x) & Uses(x)) -> MajorThreatToHealth(x))"]}
{"id": "eqasc_train_7004", "nl": "Toyota car is truly the car for the present and the future.", "fol": "", "prediction": ["all x.(ToyotaCar(x) -> (CarForPast(x) & CarForFuture(x)))"]}
{"id": "eqasc_train_7005", "nl": "Toyota causes pollution", "fol": "", "prediction": ["all x.(Toyota(x) -> CausesPollution(x))"]}
{"id": "eqasc_train_7006", "nl": "Ejaculation occurs when muscle contractions propel sperm from the epididymes.", "fol": "", "prediction": ["all x y.((MuscleContraction(x) & Sperm(y) & PropelsFromEpididymes(x,y)) -> Ejaculation(x))"]}
{"id": "eqasc_train_7007", "nl": "Ejaculation occurs when muscle contractions propel male gametes from the epididymes.", "fol": "", "prediction": ["all x y.((MuscleContraction(x) & MaleGamete(y) & FromEpididyme(x,y)) -> Ejaculation(x))"]}
{"id": "eqasc_train_7008", "nl": "For men, orgasm generally climaxes in the ejaculation of semen, which contains millions of sperm.", "fol": "", "prediction": ["all x.((Men(x) & Orgasm(x)) -> (CirculatesInEjaculationOfSemen(x) & ContainsMillionsOfSsperm(x)))"]}
{"id": "eqasc_train_7009", "nl": "For men, orgasm occurs when climax causes muscles to contract and release ejaculate", "fol": "", "prediction": ["all x.((Men(x) & ClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxClimaxCli"]}
{"id": "eqasc_train_7010", "nl": "Ejaculation allows males to reproduce.", "fol": "", "prediction": ["all x.(Ejaculation(x) -> AllowsReproduction(x))"]}
{"id": "eqasc_train_7011", "nl": "propelling sperm from the epididymes allows males to reproduce", "fol": "", "prediction": ["all x y.((PropellingSspermFromEpididymes(x) & Male(y)) -> AllowsReproduction(x,y))"]}
{"id": "eqasc_train_7012", "nl": "Ejaculation is the expulsion of semen.", "fol": "", "prediction": ["all x.(Ejaculation(x) -> ExpulsionOfSemen(x))"]}
{"id": "eqasc_train_7013", "nl": "the expulsion of semen occurs when muscle contractions propel sperm from the epididymes.", "fol": "", "prediction": ["all x y.((ExpulsionOfSemen(x) & MuscleContractions(y) & PropelsSpore(y,x)) -> Epididyme(y))"]}
{"id": "eqasc_train_7014", "nl": "muscle contractions cause the ability of ejaculation", "fol": "", "prediction": ["all x.(MuscleContraction(x) -> CausesEjaculation(x))"]}
{"id": "eqasc_train_7015", "nl": "Bacteria usually cause epididymitis.", "fol": "", "prediction": ["all x.(Bacteria(x) -> CausesEpidymitis(x))"]}
{"id": "eqasc_train_7016", "nl": "Ejaculation of sperm can be inhibited by bacterial infection.", "fol": "", "prediction": ["all x.((Ssperm(x) & InhibitedByBacteria(x)) -> Ejaculation(x))"]}
{"id": "eqasc_train_7017", "nl": "Ejaculation occurs when muscle contractions propel male gametes.", "fol": "", "prediction": ["all x.((MuscleContractions(x) & MaleGamete(y)) -> Ejaculation(x))"]}
{"id": "eqasc_train_7018", "nl": "An ejaculation occurs as the muscles around the prostate gland and the penis contract.", "fol": "", "prediction": ["all x y z.((Ejaculation(x) & MusclesAround(y,z) & ProstateGlands(z) & Penis(z)) -> Contracts(x))"]}
{"id": "eqasc_train_7019", "nl": "When the muscles around the prostate gland contract, sperm is propelled from the epidiymes", "fol": "", "prediction": ["all x y.((MusclesAroundProstateGyne(x) & Contract(x)) -> PropelledFromEpidiymes(y))"]}
{"id": "eqasc_train_7020", "nl": "Again, ejaculation is a sympathetic function.", "fol": "", "prediction": ["all x.(Ejaculation(x) -> SympatheticFunction(x))"]}
{"id": "eqasc_train_7021", "nl": "a sympathetic function occurs when muscle contractions propel sperm from the epididymes.", "fol": "", "prediction": ["all x y.((SympatheticFunction(x) & MuscleContractions(y) & PropelsSpore(x,y)) -> FromEpididymes(x))"]}
{"id": "eqasc_train_7022", "nl": "An egg is fertilized by sperm.", "fol": "", "prediction": ["all x.(Egg(x) -> FertilizedBySsperm(x))"]}
{"id": "eqasc_train_7023", "nl": "Eggs are fertilized after ejaculation.", "fol": "", "prediction": ["all x.(Egg(x) -> FertilizedAfterEjaculation(x))"]}
{"id": "eqasc_train_7024", "nl": "Male orgasm and ejaculation are inhibited.", "fol": "", "prediction": ["all x.((MaleOrgasm(x) & Ejaculation(x)) -> Inhibited(x))"]}
{"id": "eqasc_train_7025", "nl": "When a male has an orgasm the muscle contractions proper sperm from the epididymes", "fol": "", "prediction": ["all x.((Male(x) & HasOrgasm(x)) -> MuscleContractionsProperSpermFromEpididymes(x))"]}
{"id": "eqasc_train_7026", "nl": "Flowers attract animal pollinators.", "fol": "", "prediction": ["all x.(Flower(x) -> AttractsAnimalPollinators(x))"]}
{"id": "eqasc_train_7027", "nl": "Insects, bats, birds, and other animals serve as pollinators.", "fol": "", "prediction": ["all x.((Insect(x) | Bat(x) | Bird(x) | Animal(x)) -> Pollinator(x))"]}
{"id": "eqasc_train_7028", "nl": "Flowers attract birds for pollination", "fol": "", "prediction": ["all x y.((Flower(x) & Bird(y)) -> AttractsForPollination(x,y))"]}
{"id": "eqasc_train_7029", "nl": "flowers attract bees", "fol": "", "prediction": ["all x y.((Flower(x) & Bee(y)) -> Attracts(x,y))"]}
{"id": "eqasc_train_7030", "nl": "flowers attract insects", "fol": "", "prediction": ["all x y.((Flower(x) & Insect(y)) -> Attracts(x,y))"]}
{"id": "eqasc_train_7031", "nl": "Flowers attract bees.", "fol": "", "prediction": ["all x.(Flower(x) -> AttractsBees(x))"]}
{"id": "eqasc_train_7032", "nl": "Insects are the most common animal pollinators, and bees are the most common insect pollinators.", "fol": "", "prediction": ["(all x.(Insect(x) -> CommonPollinators(x)) & all y.(Bee(y) -> CommonPollinators(y)))"]}
{"id": "eqasc_train_7033", "nl": "Flowers attract bees and other insects.", "fol": "", "prediction": ["all x y.((Flower(x) & Bee(y)) -> Attracts(x,y))"]}
{"id": "eqasc_train_7034", "nl": "flowers attract birds", "fol": "", "prediction": ["all x y.((Flower(x) & Bird(y)) -> Attracts(x,y))"]}
{"id": "eqasc_train_7035", "nl": "Gladioluses are spectacular cut flowers.", "fol": "", "prediction": ["all x.(Gladioluse(x) -> (SpectacularCutFlower(x) & Flowers(x)))"]}
{"id": "eqasc_train_7036", "nl": "Gladioluses attract animal pollinators", "fol": "", "prediction": ["all x.(Gladioluse(x) -> AttractsPollinators(x))"]}
{"id": "eqasc_train_7037", "nl": "Animals such as butterflies, honeybees, wasps, moths, and mice can aid in pollinating plants.", "fol": "", "prediction": ["all x.((Animal(x) & (Butterfly(x) | Honeybee(x) | Wasp(x) | Moth(x) | Mouse(x))) -> PollinatesPlants(x))"]}
{"id": "eqasc_train_7038", "nl": "flowers attract mice", "fol": "", "prediction": ["all x y.((Flower(x) & Mouse(y)) -> Attracts(x,y))"]}
{"id": "eqasc_train_7039", "nl": "an animal requires air for survival", "fol": "", "prediction": ["all x.((Animal(x) & RequiresAir(x)) -> Survival(x))"]}
{"id": "eqasc_train_7040", "nl": "Oxygen Oxygen is in the air we breathe.", "fol": "", "prediction": ["all x.(Oxygen(x) -> InAir(x))"]}
{"id": "eqasc_train_7041", "nl": "An animal needs oxygen for survival", "fol": "", "prediction": ["all x.(Animal(x) -> NeedsOxygenForSurvival(x))"]}
{"id": "eqasc_train_7042", "nl": "It is breathed in by animals and restored to the air by the photosynthesis mechanism of plants.", "fol": "", "prediction": ["all x y.((Animal(x) & Plant(y)) -> (BreathedIn(x,y) & RestoredToAir(x,y)))"]}
{"id": "eqasc_train_7043", "nl": "Animals rely on plants for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> ReliesOnPlantsForSurvival(x))"]}
{"id": "eqasc_train_7044", "nl": "The Moon has no atmosphere and no air.", "fol": "", "prediction": ["(-Atmosphere(Moon) & -Air(Moon))"]}
{"id": "eqasc_train_7045", "nl": "An animal cannot survive on the moon without assistance", "fol": "", "prediction": ["all x.((Animal(x) & Moon(y) & -SurvivesOn(x,y)) -> -SurvivesWithoutAssistance(x,y))"]}
{"id": "eqasc_train_7046", "nl": "Animals require oxygen for breathing.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresOxygenForBreathing(x))"]}
{"id": "eqasc_train_7047", "nl": "mammals require breathing for survival", "fol": "", "prediction": ["all x.(Mammal(x) -> RequiresBreathingForSurvival(x))"]}
{"id": "eqasc_train_7048", "nl": "The important component in air is the oxygen.", "fol": "", "prediction": ["all x.(Air(x) -> ImportantComponent(x))"]}
{"id": "eqasc_train_7049", "nl": "An animal requires oxygen for survival", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresOxygenForSurvival(x))"]}
{"id": "eqasc_train_7050", "nl": "an animal requires oxygen for survival", "fol": "", "prediction": ["all x.((Animal(x) & RequiresOxygen(x)) -> Survival(x))"]}
{"id": "eqasc_train_7051", "nl": "Long term survival depends upon outside air to breathe.", "fol": "", "prediction": ["all x.(LongTermSurvival(x) -> DependsOnOutsideAir(x))"]}
{"id": "eqasc_train_7052", "nl": "Animal long term survival requires breathing.", "fol": "", "prediction": ["all x.(AnimalLongTermSurvival(x) -> RequiresBreathing(x))"]}
{"id": "eqasc_train_7053", "nl": "Animals use the oxygen to breathe.", "fol": "", "prediction": ["all x.(Animal(x) -> UsesOxygenToBreathe(x))"]}
{"id": "eqasc_train_7054", "nl": "air is required for breathing", "fol": "", "prediction": ["all x.(AirRequiredForBreathing(x) -> Breathing(x))"]}
{"id": "eqasc_train_7055", "nl": "Animals require their lungs to breathe and survive", "fol": "", "prediction": ["all x y.((Animal(x) & Lung(y)) -> (RequiresLungs(x,y) & Breathes(x,y) & Survives(x,y)))"]}
{"id": "eqasc_train_7056", "nl": "Air is mostly nitrogen and oxygen.", "fol": "", "prediction": ["all x.(Air(x) -> (Nitrogen(x) & Oxygen(x)))"]}
{"id": "eqasc_train_7057", "nl": "an animal requires oxygen and nitrogen for survival. ", "fol": "", "prediction": ["all x.(Animal(x) -> (RequiresOxygen(x) & RequiresNitrogen(x)))"]}
{"id": "eqasc_train_7058", "nl": "Plants help make oxygen for the air.", "fol": "", "prediction": ["all x.(Plant(x) -> HelpsMakeOxygenForAir(x))"]}
{"id": "eqasc_train_7059", "nl": "An animal requires plants for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresPlantsForSurvival(x))"]}
{"id": "eqasc_train_7060", "nl": "Air is primarily oxygen and nitrogen.", "fol": "", "prediction": ["all x.(Air(x) -> (Oxygen(x) & Nitrogen(x)))"]}
{"id": "eqasc_train_7061", "nl": "An animal requires something made primarily of oxygen and nitrogen for survival.", "fol": "", "prediction": ["all x.((Animal(x) & RequiresOxygen(x) & RequiresNitrogen(x)) -> Survival(x))"]}
{"id": "eqasc_train_7062", "nl": "The oxygen in the air we breathe is produced by plants.", "fol": "", "prediction": ["all x.((Oxygen(x) & Air(x) & Breathes(x)) -> ProducedByPlants(x))"]}
{"id": "eqasc_train_7063", "nl": "animals require plants to survive", "fol": "", "prediction": ["all x y.((Animal(x) & Plant(y)) -> RequiresToSurvive(x,y))"]}
{"id": "eqasc_train_7064", "nl": "Flagella help prokaryotes move.", "fol": "", "prediction": ["all x.(Flagella(x) -> HelpsProkaryotesMove(x))"]}
{"id": "eqasc_train_7065", "nl": "Most prokaryotes are unicellular.", "fol": "", "prediction": ["all x.(Prokaryote(x) -> Unicellular(x))"]}
{"id": "eqasc_train_7066", "nl": "most unicellular organisms move with flagella", "fol": "", "prediction": ["all x.(UnicellularOrganism(x) -> MovesWithFlagella(x))"]}
{"id": "eqasc_train_7067", "nl": "flagella help bacteria move", "fol": "", "prediction": ["all x y.((Flagella(x) & Bacteria(y)) -> HelpsMove(x,y))"]}
{"id": "eqasc_train_7068", "nl": "Some species swim by means of flagella Bacterial flagella are analogous to flagella of eukaryotes.", "fol": "", "prediction": ["exists x.(Species(x) & SwimsByFlagella(x))"]}
{"id": "eqasc_train_7069", "nl": "prokaryotes and Bacteria move by swimming", "fol": "", "prediction": ["all x y.((Prokaryote(x) & Bacteria(y)) -> MovesBySwimming(x,y))"]}
{"id": "eqasc_train_7070", "nl": "Cilia and flagella are composed of microtubules.", "fol": "", "prediction": ["all x.((Cilia(x) | Flagella(x)) -> Microtubules(x))"]}
{"id": "eqasc_train_7071", "nl": "microtubules help prokaryotes move", "fol": "", "prediction": ["all x y.((Microtubule(x) & Prokaryote(y)) -> HelpsMove(x,y))"]}
{"id": "eqasc_train_7072", "nl": "Flagella are elongated cilia which moves like a whip or a tail.", "fol": "", "prediction": ["all x.(Flagella(x) -> (ElongatedCilia(x) & (MovesLikeWhip(x) | MovesLikeTail(x))))"]}
{"id": "eqasc_train_7073", "nl": "Cilia help prokaryotes move.", "fol": "", "prediction": ["all x.(Cilia(x) -> HelpsProkaryotesMove(x))"]}
{"id": "eqasc_train_7074", "nl": "Bacteria are prokaryote cells.", "fol": "", "prediction": ["all x.(Bacteria(x) -> ProkaryoteCell(x))"]}
{"id": "eqasc_train_7075", "nl": "Flagella help bacteria move", "fol": "", "prediction": ["all x y.((Flagella(x) & Bacteria(y)) -> HelpsMove(x,y))"]}
{"id": "eqasc_train_7076", "nl": "Cilia are short flagella.", "fol": "", "prediction": ["all x.(Cilia(x) -> ShortFlagella(x))"]}
{"id": "eqasc_train_7077", "nl": "Cilia help prokaryotes move", "fol": "", "prediction": ["all x y.((Cilia(x) & Prokaryote(y)) -> HelpsMove(x,y))"]}
{"id": "eqasc_train_7078", "nl": "Flagella are long filaments made up of the protein flagellin.", "fol": "", "prediction": ["all x.(Flagella(x) -> (LongFilm(x) & MadeUpOfProteinFlagellin(x)))"]}
{"id": "eqasc_train_7079", "nl": "Long filaments help prokaryotes move.", "fol": "", "prediction": ["all x.(LongFilm(x) -> HelpsProkaryotesMove(x))"]}
{"id": "eqasc_train_7080", "nl": "Flagella are hair-like projections from the surface of cells.", "fol": "", "prediction": ["all x.(Flagella(x) -> HairLikeProjectionsFromSurfaceOfCells(x))"]}
{"id": "eqasc_train_7081", "nl": "Hair-like projections from the surface of cells that help prokaryotes move.", "fol": "", "prediction": ["all x y.((Cell(x) & Prokaryote(y)) -> HairLikeProjectionsFromSurface(x,y))"]}
{"id": "eqasc_train_7082", "nl": "Flagella and cilia are similar in structure.", "fol": "", "prediction": ["all x.((Flagella(x) & Cilina(x)) -> SimilarStructure(x))"]}
{"id": "eqasc_train_7083", "nl": "something similar in structure to cilia help prokaryotes move.", "fol": "", "prediction": ["all x y.((Cilia(x) & Prokaryote(y)) -> HelpsMove(x,y))"]}
{"id": "eqasc_train_7084", "nl": "Microtubules help prokaryotes move.", "fol": "", "prediction": ["all x.(Microtubule(x) -> HelpsProkaryotesMove(x))"]}
{"id": "eqasc_train_7085", "nl": "cilia help in movement", "fol": "", "prediction": ["all x.(Cilia(x) -> HelpsInMovement(x))"]}
{"id": "eqasc_train_7086", "nl": "Like flagella, they are composed of protein.", "fol": "", "prediction": ["all x.(Flagella(x) -> ComposedOfProtein(x))"]}
{"id": "eqasc_train_7087", "nl": "protein help prokaryotes move", "fol": "", "prediction": ["all x y.((ProteinHelpProkaryote(x) & Prokaryote(y)) -> Moves(x,y))"]}
{"id": "eqasc_train_7088", "nl": "Cilia are structurally the same as flagella and are actually short flagella.", "fol": "", "prediction": ["all x.(Cilia(x) -> (StructurallySame(x) & ShortFlagella(x)))"]}
{"id": "eqasc_train_7089", "nl": "prokaryotes have cilia", "fol": "", "prediction": ["all x.(Prokaryote(x) -> HasCilia(x))"]}
{"id": "eqasc_train_7090", "nl": "Sperms have flagella.", "fol": "", "prediction": ["all x.(Ssperm(x) -> HasFlagella(x))"]}
{"id": "eqasc_train_7091", "nl": "Sperms can help prokaryotes move", "fol": "", "prediction": ["all x y.((Ssperm(x) & Prokaryote(y)) -> CanHelpMove(x,y))"]}
{"id": "eqasc_train_7092", "nl": "a cavern is formed by carbonic acid in groundwater seeping through rock and dissolving limestone", "fol": "", "prediction": ["all x y z.((Cavern(x) & CarbonicAcid(y) & Groundwater(z) & SeepsThroughRockAndDissolvesLimestone(x)) -> FormedBy(x,y,z))"]}
{"id": "eqasc_train_7093", "nl": "Erosion by acid solutions is only one way that caves form.", "fol": "", "prediction": ["all x.(Caves(x) -> (ErosionByAcidSolutions(x) & Forms(x)))"]}
{"id": "eqasc_train_7094", "nl": "caves are made by chemicals in groundwater", "fol": "", "prediction": ["all x.(Cave(x) -> MadeByChemicalsInGroundwater(x))"]}
{"id": "eqasc_train_7095", "nl": "Carbon dioxide dissolved in rainwater forms carbonic acid.", "fol": "", "prediction": ["all x.((CarbonDioxide(x) & DissolvedInRainwater(x)) -> FormsCarbonicAcid(x))"]}
{"id": "eqasc_train_7096", "nl": "a cavern is made from carbon dioxide dissolving into carbonic acid", "fol": "", "prediction": ["all x y.((Cavern(x) & CarbonDioxide(y) & CarbonicAcid(z)) -> MadeFromDissolvingInto(x,y,z))"]}
{"id": "eqasc_train_7097", "nl": "When carbon dioxide is in water, it creates carbonic acid.", "fol": "", "prediction": ["all x.((CarbonDioxide(x) & InWater(x)) -> CreatesCarbonicAcid(x))"]}
{"id": "eqasc_train_7098", "nl": "a cavern is formed by carbon dioxide is in groundwater seeping through rock and dissolving limestone", "fol": "", "prediction": ["all x y z.((Cavern(x) & CarbonDioxide(y) & Groundwater(z) & SeepsThroughRockAndDissolvesLimestone(x)) -> FormedBy(x,y))"]}
{"id": "eqasc_train_7099", "nl": "Caverns are characterized by enormous rooms.", "fol": "", "prediction": ["all x.(Cavern(x) -> (EternalRoom(x) & CharacterizedBy(x)))"]}
{"id": "eqasc_train_7100", "nl": "enormous rooms are formed by carbonic acid in groundwater seeping through rock and dissolving limestone", "fol": "", "prediction": ["all x y z.((Room(x) & CarbonicAcid(y) & Groundwater(z) & SeepsThroughRockAndDissolvesLimestone(x)) -> FormsEvergreenRooms(x))"]}
{"id": "eqasc_train_7101", "nl": "Underground caves and caverns pose an exciting adventure to many.", "fol": "", "prediction": ["all x.((UndergroundCave(x) & UndergroundCavern(x)) -> ExcitingAdventure(x))"]}
{"id": "eqasc_train_7102", "nl": "underground caves can be formed by carbonic acid in groundwater seeping through rock and dissolving limestone", "fol": "", "prediction": ["all x y.((UndergroundCave(x) & CarbonicAcid(y) & SeepsThroughRock(x) & DissolvesLimestone(x)) -> FormedBy(x,y))"]}
{"id": "eqasc_train_7103", "nl": "Limestone Limestone Limestone is a grey rock that is made of calcite.", "fol": "", "prediction": ["all x.(Limestone(x) -> (GreyRock(x) & MadeOfCalcite(x)))"]}
{"id": "eqasc_train_7104", "nl": "A cavern is formed when calcite is dissolved.", "fol": "", "prediction": ["all x.((Cavern(x) & CalciteDissolved(x)) -> Formed(x))"]}
{"id": "eqasc_train_7105", "nl": "Limestone caves are formed when acids attack and dissolve the calcite in limestone.", "fol": "", "prediction": ["all x.(LimestoneCave(x) -> (AcidsAttack(x) & DissolveCalcite(x)))"]}
{"id": "eqasc_train_7106", "nl": "caverns are formed from limestone", "fol": "", "prediction": ["all x.(Cavern(x) -> (FormedFromLimestone(x) & FormedFromLimestone(x)))"]}
{"id": "eqasc_train_7107", "nl": "Any time water and carbon dioxide mix, carbonic acid is the result.", "fol": "", "prediction": ["all x.((Water(x) & CarbonDioxide(x)) -> CarbonicAcid(x))"]}
{"id": "eqasc_train_7108", "nl": "carbon dioxide in groundwater creates caverns ", "fol": "", "prediction": ["all x y.((CarbonDioxide(x) & Groundwater(y)) -> CreatesCaverns(x,y))"]}
{"id": "eqasc_train_7109", "nl": "When caves contain connecting rooms, they are called caverns.", "fol": "", "prediction": ["all x.((Cave(x) & ContainsConnectingRooms(x)) -> Cavern(x))"]}
{"id": "eqasc_train_7110", "nl": "Caves can be formed by carbonic acid in groundwater seeping through rock and dissolving limestone.", "fol": "", "prediction": ["all x.(Cave(x) -> (FormedByCarbonicAcid(x) & SeepsThroughRock(x) & DissolvesLimestone(x)))"]}
{"id": "eqasc_train_7111", "nl": "Caverns Secrets are hidden in caves.", "fol": "", "prediction": ["all x.(Cave(x) -> Secret(x))"]}
{"id": "eqasc_train_7112", "nl": "hidden caves are formed by carbonic acid in groundwater seeping through rock and dissolving limestone", "fol": "", "prediction": ["all x y z.((HuntedCave(x) & CarbonicAcid(y) & Groundwater(z) & SeepsThroughRockAndDissolvesLimestone(x)) -> FormedBy(x,y,z))"]}
{"id": "eqasc_train_7113", "nl": "planting trees has a positive impact on an ecosystem", "fol": "", "prediction": ["all x y.((PlantsTrees(x) & Ecosystem(y)) -> PositiveImpactOn(x,y))"]}
{"id": "eqasc_train_7114", "nl": "Planting trees has a positive impact on organisms and their habitat.", "fol": "", "prediction": ["all x.(PlantsTrees(x) -> (PositiveImpactOnOrganisms(x) & PositiveImpactOnHabitat(x)))"]}
{"id": "eqasc_train_7115", "nl": "Some trees are maples.", "fol": "", "prediction": ["exists x.(Tree(x) & Maple(x))"]}
{"id": "eqasc_train_7116", "nl": "planting maples has a positive impact on an ecosystem", "fol": "", "prediction": ["all x y.((PlantsMaple(x) & Ecosystem(y)) -> PositiveImpact(x,y))"]}
{"id": "eqasc_train_7117", "nl": "An ecosystem contains many habitats.", "fol": "", "prediction": ["all x.(Ecosystem(x) -> ContainsManyHabitats(x))"]}
{"id": "eqasc_train_7118", "nl": "planting trees has a positive impact on habitats", "fol": "", "prediction": ["all x y.((PlantsTrees(x) & Habitat(y)) -> PositiveImpactOn(x,y))"]}
{"id": "eqasc_train_7119", "nl": "Trees produce oxygen.", "fol": "", "prediction": ["all x.(Tree(x) -> ProducesOxygen(x))"]}
{"id": "eqasc_train_7120", "nl": "Oxygen has a positive impact on an ecosystem.", "fol": "", "prediction": ["all x.(Oxygen(x) -> PositiveImpactOnEcosystem(x))"]}
{"id": "eqasc_train_7121", "nl": "Thus one important job the squirrel does in the ecosystem is to plant trees.", "fol": "", "prediction": ["all x.((Squirrel(x) & ImportantJob(x)) -> PlantTrees(x))"]}
{"id": "eqasc_train_7122", "nl": "Squirrels have a positive effect on the ecosystem", "fol": "", "prediction": ["all x.(Squirrel(x) -> PositiveEffectOnEcosystem(x))"]}
{"id": "eqasc_train_7123", "nl": "Destruction of Trees is taking place, pollution of air is the Result of cutting trees with pace.", "fol": "", "prediction": ["all x y.((DestructionOfTrees(x) & PollutionOfAir(y)) -> CutsWithPace(x))"]}
{"id": "eqasc_train_7124", "nl": "stopping air pollution has a positive effect on an ecosystem", "fol": "", "prediction": ["all x y.((AirPollution(x) & Ecosystem(y)) -> StopsPositiveEffect(x,y))"]}
{"id": "eqasc_train_7125", "nl": "Human beings live within the world's ecosystems.", "fol": "", "prediction": ["all x.(Human(x) -> LivesInEcosystems(x))"]}
{"id": "eqasc_train_7126", "nl": "planting trees has a positive impact on humans", "fol": "", "prediction": ["all x y.((PlantsTrees(x) & Human(y)) -> PositiveImpactOn(x,y))"]}
{"id": "eqasc_train_7127", "nl": "Forest ecosystems, from trees to microbes, remove pollutants in a number of ways.", "fol": "", "prediction": ["all x y.((ForestEcosystem(x) & (Tree(y) | Microbe(y))) -> RemovesPollutants(x,y))"]}
{"id": "eqasc_train_7128", "nl": "Planting trees can remove pollutants in a number of ways.", "fol": "", "prediction": ["all x.(PlantsTrees(x) -> RemovesPollutants(x))"]}
{"id": "eqasc_train_7129", "nl": "Birds are important components of ecosystems.", "fol": "", "prediction": ["all x.(Bird(x) -> ImportantComponentOfEcosystems(x))"]}
{"id": "eqasc_train_7130", "nl": "Planting trees has a positive impact on birds", "fol": "", "prediction": ["all x y.((PlantsTrees(x) & Bird(y)) -> PositiveImpactOn(x,y))"]}
{"id": "eqasc_train_7131", "nl": "Knowledge of woodland ecosystems is advantageous.", "fol": "", "prediction": ["all x.(WildlifeEcosystem(x) -> Advantageous(x))"]}
{"id": "eqasc_train_7132", "nl": "Planting trees has a positive impact on woodlands.", "fol": "", "prediction": ["all x.(PlantsTrees(x) -> PositiveImpactOnWildlife(x))"]}
{"id": "eqasc_train_7133", "nl": "Forest is largely pine trees.", "fol": "", "prediction": ["all x.(Forest(x) -> PineTree(x))"]}
{"id": "eqasc_train_7134", "nl": "pines have a positive impact on an ecosystem", "fol": "", "prediction": ["all x y.((Pine(x) & Ecosystem(y)) -> PositiveImpact(x,y))"]}
{"id": "eqasc_train_7135", "nl": "Indiana forests are complex ecosystems.", "fol": "", "prediction": ["all x.(IndividualForest(x) -> ComplexEcosystem(x))"]}
{"id": "eqasc_train_7136", "nl": "planting trees has a positive impact on  forests", "fol": "", "prediction": ["all x y.((PlantsTrees(x) & Forest(y)) -> PositiveImpactOn(x,y))"]}
{"id": "eqasc_train_7137", "nl": "Biodiversity encourages a healthier ecosystem.", "fol": "", "prediction": ["all x.(Biodiversity(x) -> EncouragesHealthierEcosystem(x))"]}
{"id": "eqasc_train_7138", "nl": "planting trees has a positive impact on biodiversity", "fol": "", "prediction": ["all x.(PlantingTrees(x) -> PositiveImpactOnBiodiversity(x))"]}
{"id": "eqasc_train_7139", "nl": "Tunicates reproduce sexually.", "fol": "", "prediction": ["all x.(Tunicate(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_7140", "nl": "sea squirts reproduce sexually", "fol": "", "prediction": ["all x.(SeaSquirt(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_7141", "nl": "Sexual reproduction requires both male and female gametes.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> (Requires(x,male) & Requires(x,female)))"]}
{"id": "eqasc_train_7142", "nl": "tunicates reproduce using gametes", "fol": "", "prediction": ["all x y.((Tunicate(x) & Gametes(y)) -> ReproducesUsing(x,y))"]}
{"id": "eqasc_train_7143", "nl": "Tunicates are sea creatures encased by tough membranes, reminiscent of tunics.", "fol": "", "prediction": ["all x.(Tunicate(x) -> (SeaCreature(x) & EncasedByToughMembranes(x) & ReminiscentOfTunics(x)))"]}
{"id": "eqasc_train_7144", "nl": "Sea creatures encased by tough membranes reproduce sexually", "fol": "", "prediction": ["all x y.((SeaCreature(x) & EncasedByToughMembrane(x)) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_7145", "nl": "Bulbs can reproduce sexually or non-sexually. ", "fol": "", "prediction": ["all x.(Bulbs(x) -> (ReproducesSexually(x) | ReproducesNonSexually(x)))"]}
{"id": "eqasc_train_7146", "nl": "bulbs reproduce sexually", "fol": "", "prediction": ["all x.(Bulb(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_7147", "nl": "Sea squirts reproduce sexually", "fol": "", "prediction": ["all x.(SeaSquirt(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_7148", "nl": "Active immunity results when an immune response to a pathogen produces memory cells.", "fol": "", "prediction": ["all x y.((ImmuneResponse(x) & Pathogen(y) & ProducesMemoryCells(x,y)) -> ActiveImmunity(x))"]}
{"id": "eqasc_train_7149", "nl": "Pathogens are simply a variety of diseases which kill insects.", "fol": "", "prediction": ["all x.(Pathogen(x) -> (Disease(x) & KillsInsects(x)))"]}
{"id": "eqasc_train_7150", "nl": "active immunity prevents insects from being killed", "fol": "", "prediction": ["all x y.((ActiveImmunity(x) & Insect(y)) -> PreventsFromBeingTamed(x,y))"]}
{"id": "eqasc_train_7151", "nl": "Memory cells persist in the circulation for decades.", "fol": "", "prediction": ["all x.(MemoryCell(x) -> PersistsInCirculation(x))"]}
{"id": "eqasc_train_7152", "nl": "active immunity can persist in the circulation for decades", "fol": "", "prediction": ["all x.(ActiveImmunity(x) -> PersistsInDiverseDifferences(x))"]}
{"id": "eqasc_train_7153", "nl": "Vaccination is Active Acquired Immunity.", "fol": "", "prediction": ["all x.(Vaccination(x) -> ActiveAcquiredImmunity(x))"]}
{"id": "eqasc_train_7154", "nl": "Vaccination involves the body's response  to a pathogen produces memory cells", "fol": "", "prediction": ["all x y.((Vaccination(x) & Pathogen(y)) -> InvolvesBodyResponseTo(x,y)) ProducesMemoryCells(x))"]}
{"id": "eqasc_train_7155", "nl": "People with weaker immune systems are more likely to get sick from contaminated foods.", "fol": "", "prediction": ["all x.(WeakerImmuneSystem(x) -> MoreLikelyToGetSickFromContaminatedFoods(x))"]}
{"id": "eqasc_train_7156", "nl": "memory cells help keep people from getting sick", "fol": "", "prediction": ["all x y.((MemoryCell(x) & Person(y)) -> HelpsKeepFromGettingSick(x,y))"]}
{"id": "eqasc_train_7157", "nl": "Memory cells are the basis of immunological memory.", "fol": "", "prediction": ["all x.(MemoryCell(x) -> ImmunologicalMemoryBase(x))"]}
{"id": "eqasc_train_7158", "nl": "Active immunity results when an immune response to a pathogen produces the basis of immunological memory", "fol": "", "prediction": ["all x y z.((ActiveImmunity(x) & ImmuneResponseToPathogen(y) & Pathogen(z) & ProducesBaseOfImmunologicalMemory(x,z)) -> ImmuneResponseToPathogen(x))"]}
{"id": "eqasc_train_7159", "nl": "Mechanisms by which intracellular pathogens evade activation of the cell mediated immune response.", "fol": "", "prediction": ["all x y.((IntracellularPathogen(x) & CellMediatedImmuneResponse(y)) -> EvadesActivation(x,y))"]}
{"id": "eqasc_train_7160", "nl": "Active immunity results when intracellular pathogens evade activation of the cell.", "fol": "", "prediction": ["all x y.((IntracellularPathogen(x) & Cell(y) & EvadesActivation(x,y)) -> ActiveImmunity(x))"]}
{"id": "eqasc_train_7161", "nl": "Pathogens are germs that cause disease.", "fol": "", "prediction": ["all x.(Pathogen(x) -> (Germ(x) & CausesDisease(x)))"]}
{"id": "eqasc_train_7162", "nl": "Active immunity results when an immune response to a germ produces memory cells.", "fol": "", "prediction": ["all x y.((ImmuneResponse(x) & Germ(y) & ProducesMemoryCells(x,y)) -> ActiveImmunity(x))"]}
{"id": "eqasc_train_7163", "nl": "If the parasite causes harm, it is a pathogen.", "fol": "", "prediction": ["all x.((Parasite(x) & CausesHarm(x)) -> Pathogen(x))"]}
{"id": "eqasc_train_7164", "nl": "When a parasite produces memory cells, active immunity results.", "fol": "", "prediction": ["all x.((Parasite(x) & ProducesMemoryCells(x)) -> ActiveImmunityResults(x))"]}
{"id": "eqasc_train_7165", "nl": "vaccination results when an immune response to a pathogen produces memory cells", "fol": "", "prediction": ["all x y z.((VaccinationResult(x) & ImmuneResponseToPathogen(y) & Pathogen(z) & ProducesMemoryCells(x,z)) -> ImmuneResponseToPathogen(x,y,z))"]}
{"id": "eqasc_train_7166", "nl": "Insulin is a hormone that helps cells absorb sugar from the blood.", "fol": "", "prediction": ["all x.(Insulin(x) -> (Hydrogen(x) & HelpsAbsorbSugar(x)))"]}
{"id": "eqasc_train_7167", "nl": "Diabetes is caused by a reduction in insulin or a resistance to insulin.", "fol": "", "prediction": ["all x.(Diabetes(x) -> (ReductionInIndividual(x) | ResistanceToIndividual(x)))"]}
{"id": "eqasc_train_7168", "nl": "Diabetes is caused by a reduction of a hormone that helps cells absorb sugar from the blood.", "fol": "", "prediction": ["all x.(Diabetes(x) -> (ReductionOfHormone(x) & HelpsAbsorbSugar(x)))"]}
{"id": "eqasc_train_7169", "nl": "Insulin is a hormone that helps cells absorb glucose from the blood.", "fol": "", "prediction": ["all x.(Insulin(x) -> (Hydrogen(x) & HelpsAbsorbGlucose(x)))"]}
{"id": "eqasc_train_7170", "nl": "Diabetes is caused by a lack of insulin.", "fol": "", "prediction": ["all x.(Diabetes(x) -> LackOfInsulin(x))"]}
{"id": "eqasc_train_7171", "nl": "Diabetes is caused by a lack of hormone that helps cells absorb sugar from the blood.", "fol": "", "prediction": ["all x.(Diabetes(x) -> (LackOfHydrogen(x) & HelpsAbsorbSugar(x)))"]}
{"id": "eqasc_train_7172", "nl": "Helps insulin regulate blood sugar.", "fol": "", "prediction": ["all x.(HelpsIndividualRegulatesBloodSugar(x) -> HelpsIndividualRegulatesBloodSugar(x))"]}
{"id": "eqasc_train_7173", "nl": "sugar is regulated by insulin", "fol": "", "prediction": ["all x y.((Sugar(x) & Insulin(y)) -> Regulates(x,y))"]}
{"id": "eqasc_train_7174", "nl": "Insulin deficiency or a non-responsiveness to insulin is the cause of Diabetes.", "fol": "", "prediction": ["all x.((InsulinDeficiency(x) | NonResponsiveToIndividual(x)) -> CauseOfDiabetes(x))"]}
{"id": "eqasc_train_7175", "nl": "deficiency of a hormone that helps cells absorb sugar from the blood causes diabetes", "fol": "", "prediction": ["all x y.((Hormone(x) & HelpsAbsorbSugar(x,y) & Blood(y)) -> Diabetes(x))"]}
{"id": "eqasc_train_7176", "nl": "An example is insulin that is produced by the pancreas.", "fol": "", "prediction": ["all x.((Individual(x) & ProducedByPancreas(x)) -> Insulin(x))"]}
{"id": "eqasc_train_7177", "nl": "the pancreas produces a hormone that helps cells absorb sugar from the blood", "fol": "", "prediction": ["all x y.((Pancreas(x) & Hormone(y)) -> ProducesHelpsAbsorbSugar(x,y))"]}
{"id": "eqasc_train_7178", "nl": "Some tissues such as muscle require insulin to absorb sugar.", "fol": "", "prediction": ["exists x.(Tissue(x) & (Muscle(x) | Muscle(x)) & RequiresIndole(x))"]}
{"id": "eqasc_train_7179", "nl": "insulin helps muscles get sugar", "fol": "", "prediction": ["all x y.((Insulin(x) & Muscle(y)) -> HelpsGetSugar(x,y))"]}
{"id": "eqasc_train_7180", "nl": "Insulin and glucagon are produced by the pancreas.", "fol": "", "prediction": ["all x.((Insulin(x) | Glucagon(x)) -> ProducedByPancreas(x))"]}
{"id": "eqasc_train_7181", "nl": "the pancreas helps absorb sugar from the blood", "fol": "", "prediction": ["all x y.((Pancreas(x) & Blood(y)) -> AbsorbsSugar(x,y))"]}
{"id": "eqasc_train_7182", "nl": "Hormones control many cell activities, so they are very important for homeostasis.", "fol": "", "prediction": ["all x.(Hormone(x) -> (ControlsCellActivities(x) & ImportantForHomeostasis(x)))"]}
{"id": "eqasc_train_7183", "nl": "Homeostasis is the chemical equilibrium of the body.", "fol": "", "prediction": ["all x.(Homeostasis(x) -> ChemicalEquilibrium(x))"]}
{"id": "eqasc_train_7184", "nl": "Hormones are very important for the chemical equilibrium of the body.", "fol": "", "prediction": ["all x.(Hormone(x) -> ChemicalEquilibrium(x))"]}
{"id": "eqasc_train_7185", "nl": "hormones control many cell activities and are important in the chemical equilibrium of the body", "fol": "", "prediction": ["all x y.((Hormone(x) & CellActivity(y)) -> (Controls(x,y) & ImportantInChemicalEquilibrium(x)))"]}
{"id": "eqasc_train_7186", "nl": "Illness is an imbalance in homeostasis.", "fol": "", "prediction": ["all x.(Illness(x) -> DelayInHomeostasis(x))"]}
{"id": "eqasc_train_7187", "nl": "Hormones control many cell activities, so they are very important for avoiding illness", "fol": "", "prediction": ["all x.(Hormone(x) -> (ControlsManyCellActivities(x) & ImportantForIllness(x)))"]}
{"id": "eqasc_train_7188", "nl": "Many of the processes of homeostasis are mediated by hormones.", "fol": "", "prediction": ["all x.(Homeostasis(x) -> MediatedByHormones(x))"]}
{"id": "eqasc_train_7189", "nl": "homeostasis mediates cell activities", "fol": "", "prediction": ["all x.(Homeostasis(x) -> MediatesCellActivities(x))"]}
{"id": "eqasc_train_7190", "nl": "Growth hormone is an important hormone that declines with aging.", "fol": "", "prediction": ["all x.(GrowthHormone(x) -> (Important(x) & DecreasesWithAging(x)))"]}
{"id": "eqasc_train_7191", "nl": "hormones affect cell aging", "fol": "", "prediction": ["all x y.((Hormone(x) & CellAging(y)) -> Affects(x,y))"]}
{"id": "eqasc_train_7192", "nl": "Temperature regulation is an example of homeostasis.", "fol": "", "prediction": ["all x.(TemperatureRegulation(x) -> Homeostasis(x))"]}
{"id": "eqasc_train_7193", "nl": "Hormones are important for temperature regulation ", "fol": "", "prediction": ["all x.(Hormone(x) -> ImportantForTemperatureRegulation(x))"]}
{"id": "eqasc_train_7194", "nl": "Hormones control many cell activities, so they are very important for the chemical equilibrium of the body", "fol": "", "prediction": ["all x y.((Hormone(x) & CellActivity(y)) -> (Controls(x,y) & ImportantForChemicalEquilibrium(x)))"]}
{"id": "eqasc_train_7195", "nl": "Hormones travel in the bloodstream to cells that are called target cells a.", "fol": "", "prediction": ["all x y.((Hormone(x) & Bloodstream(y)) -> TravelsToCells(x,y))"]}
{"id": "eqasc_train_7196", "nl": "the bloodstream allows molecules to travel to control many cell activities ", "fol": "", "prediction": ["all x y.((Bloodstream(x) & Molecule(y)) -> AllowsTravel(x,y))"]}
{"id": "eqasc_train_7197", "nl": "Homeostasis is the central theme of physiology.", "fol": "", "prediction": ["all x.(Homeostasis(x) -> CentralThemeOfPhysiology(x))"]}
{"id": "eqasc_train_7198", "nl": "hormones control many cell activities and are very important to the central theme of physiology", "fol": "", "prediction": ["all x y.((Hormone(x) & CellActivity(y)) -> (Controls(x,y) & ImportantToTheme(x,y)))"]}
{"id": "eqasc_train_7199", "nl": "crossing two living things with recessive traits causes their offspring to have that recessive trait", "fol": "", "prediction": ["all x y.((LivingThing(x) & LivingThing(y) & RecessiveTreatment(x,y)) -> CausesOffspringToHaveRecessiveTreatment(x,y))"]}
{"id": "eqasc_train_7200", "nl": "Freckles are an autosomal recessive trait.", "fol": "", "prediction": ["all x.(Freckle(x) -> AutosomalRecessiveTrait(x))"]}
{"id": "eqasc_train_7201", "nl": "Crossing two living things with freckles causes their offspring to have freckles.", "fol": "", "prediction": ["all x y.((LivingThing(x) & LivingThing(y) & HasFreckles(x,y)) -> HasFreckles(x,y))"]}
{"id": "eqasc_train_7202", "nl": "Some characteristics are recessive, for example blue eyes.", "fol": "", "prediction": ["exists x.(Caracteristic(x) & Recessive(x))"]}
{"id": "eqasc_train_7203", "nl": "crossing two living things with blue eyes causes their offspring to have blue eyes", "fol": "", "prediction": ["all x y.((LivingThing(x) & LivingThing(y) & BlueEyes(x)) -> BlueEyesOffspring(x))"]}
{"id": "eqasc_train_7204", "nl": "White eye color is a recessive trait.", "fol": "", "prediction": ["all x.(WhiteEyeColor(x) -> RecessiveTrait(x))"]}
{"id": "eqasc_train_7205", "nl": "crossing two living things with white eyes causes their offspring to have white eyes", "fol": "", "prediction": ["all x y.((LivingThing(x) & LivingThing(y) & WhiteEyes(x)) -> WhiteEyes(y))"]}
{"id": "eqasc_train_7206", "nl": "crossing two living things with white eye color causes their offspring to have white eye color", "fol": "", "prediction": ["all x y.((LivingThing(x) & LivingThing(y) & WhiteEyeColor(x) & Crossing(x,y)) -> WhiteEyeColorOffspring(x))"]}
{"id": "eqasc_train_7207", "nl": "Autosomal recessive is another pattern of inheritance of a genetic trait.", "fol": "", "prediction": ["all x.(AutosomalRecessive(x) -> PatternOfInheritanceOfGeneticTrait(x))"]}
{"id": "eqasc_train_7208", "nl": "Offspring can inherit recessive genetics from both parents.", "fol": "", "prediction": ["all x y.((Offspring(x) & Parent(y)) -> HasRecessiveGenetics(x,y))"]}
{"id": "eqasc_train_7209", "nl": "Albinism in humans is inherited as a simple recessive trait.", "fol": "", "prediction": ["all x.(Albinism(x) -> (InHumans(x) & SimpleRecessiveTrait(x)))"]}
{"id": "eqasc_train_7210", "nl": "If both a man and woman are albino then their offspring will also be albino", "fol": "", "prediction": ["all x.(Albino(x) -> (Man(x) & Woman(x) & OffspringAlbino(x)))"]}
{"id": "eqasc_train_7211", "nl": "All mutant traits are recessive.", "fol": "", "prediction": ["all x.(MutualTreatment(x) -> Recessive(x))"]}
{"id": "eqasc_train_7212", "nl": "crossing two living things with mutant traits causes their offspring to have that mutant trait", "fol": "", "prediction": ["all x y.((LivingThing(x) & LivingThing(y) & CrossingWithMutuantTreatment(x,y)) -> CausesOffspringToHaveMutuantTreatment(x,y))"]}
{"id": "eqasc_train_7213", "nl": "Parents with freckles may have offspring with them as well.", "fol": "", "prediction": ["all x.((Parent(x) & HasFreckles(x)) -> MayHaveOffspringWith(x,Freckles))"]}
{"id": "eqasc_train_7214", "nl": "Crossing two organisms with recessive traits causes their offspring to have that recessive trait", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y) & HasRecessiveTreatment(x,y)) -> CausesOffspringToHaveRecessiveTreatment(x,y))"]}
{"id": "eqasc_train_7215", "nl": "crossing two living things with freckles causes their offspring to have that freckles", "fol": "", "prediction": ["all x y.((LivingThing(x) & LivingThing(y) & CrossingWithFreckles(x,y)) -> CausesOffspringToHaveFreckles(x,y))"]}
{"id": "eqasc_train_7216", "nl": "Attached ear lobes is a recessive trait.", "fol": "", "prediction": ["all x.((EarLobs(x) & Attached(x)) -> RecessiveTrait(x))"]}
{"id": "eqasc_train_7217", "nl": "crossing two living things with attached ear lobes causes their offspring to have attached ear lobes", "fol": "", "prediction": ["all x y.((LivingThing(x) & LivingThing(y) & HasAttachedEarLobs(x,y)) -> HasAttachedEarLobs(x,y))"]}
{"id": "eqasc_train_7218", "nl": "crossing two living things with freckles causes their offspring to have freckles", "fol": "", "prediction": ["all x y.((LivingThing(x) & LivingThing(y) & CrossingWithFreckles(x,y)) -> HasFrecklesOffspring(x))"]}
{"id": "eqasc_train_7219", "nl": "Sex hormones are chemical messengers that control sexual development and reproduction.", "fol": "", "prediction": ["all x.(SexHormone(x) -> (ChemicalMessager(x) & ControlsSexualDevelopment(x) & ControlsReproduction(x)))"]}
{"id": "eqasc_train_7220", "nl": "Estrogens are female sex hormones.", "fol": "", "prediction": ["all x.(Estrogen(x) -> FemaleSexHormone(x))"]}
{"id": "eqasc_train_7221", "nl": "Estrogen controls sexual development and reproduction in females.", "fol": "", "prediction": ["all x.(Estrogen(x) -> (ControlsSexualDevelopment(x) & ControlsReproduction(x)))"]}
{"id": "eqasc_train_7222", "nl": "Androgens are male sex hormones.", "fol": "", "prediction": ["all x.(Androgen(x) -> MaleSexHormone(x))"]}
{"id": "eqasc_train_7223", "nl": "androgens are chemical messengers that control sexual development and reproduction", "fol": "", "prediction": ["all x.(Androgen(x) -> (ChemicalMessager(x) & ControlsSexualDevelopment(x) & ControlsReproduction(x)))"]}
{"id": "eqasc_train_7224", "nl": "Sex hormones control sexual development in male and female bodies.", "fol": "", "prediction": ["all x.(SexHormone(x) -> ControlsSexualDevelopment(x))"]}
{"id": "eqasc_train_7225", "nl": "Sex hormones are chemical messengers in male and female bodies", "fol": "", "prediction": ["all x.(SexHormone(x) -> ChemicalMessager(x))"]}
{"id": "eqasc_train_7226", "nl": "Chemical messengers carry signals from one nerve branch to another.", "fol": "", "prediction": ["all x y z.((ChemicalMessenger(x) & NerveBranche(y) & NerveBranche(z)) -> CarriesSignals(x,y,z))"]}
{"id": "eqasc_train_7227", "nl": "Sex hormones carry signals that control sexual development and reproduction.", "fol": "", "prediction": ["all x.(SexHormone(x) -> (CarriesSignals(x) & ControlsSexualDevelopment(x) & ControlsReproduction(x)))"]}
{"id": "eqasc_train_7228", "nl": "androgens are chemical messengers that control sexual development and reproduction.", "fol": "", "prediction": ["all x.(Androgen(x) -> (ChemicalMessager(x) & ControlsSexualDevelopment(x) & ControlsReproduction(x)))"]}
{"id": "eqasc_train_7229", "nl": "androgens are chemical messengers", "fol": "", "prediction": ["all x.(Androgen(x) -> ChemicalMessenger(x))"]}
{"id": "eqasc_train_7230", "nl": "androgens control sexual development and reproduction in males", "fol": "", "prediction": ["all x y.((Androgen(x) & Male(y)) -> (ControlsSexualDevelopment(x,y) & ControlsReproduction(x,y)))"]}
{"id": "eqasc_train_7231", "nl": "androgens are chemical messengers.", "fol": "", "prediction": ["all x.(Androgen(x) -> ChemicalMessenger(x))"]}
{"id": "eqasc_train_7232", "nl": "Vertebrates are animals that have a backbone.", "fol": "", "prediction": ["all x.(Vertebrates(x) -> HasBackbone(x))"]}
{"id": "eqasc_train_7233", "nl": "All vertebrates have a backbone or vertebral column.", "fol": "", "prediction": ["all x.(Vertebrate(x) -> (HasBackbone(x) | HasVertebralColumn(x)))"]}
{"id": "eqasc_train_7234", "nl": "Vertebrates are animals that have a vertebral column.", "fol": "", "prediction": ["all x.(Vertebrates(x) -> (Animal(x) & HasVertebralColumn(x)))"]}
{"id": "eqasc_train_7235", "nl": "Human beings are vertebrates.", "fol": "", "prediction": ["all x.(Human(x) -> Vertebrate(x))"]}
{"id": "eqasc_train_7236", "nl": "human beings have a backbone", "fol": "", "prediction": ["all x.(Human(x) -> HasBackbone(x))"]}
{"id": "eqasc_train_7237", "nl": "vertebrates have a spinal column", "fol": "", "prediction": ["all x.(Vertebrate(x) -> HasSpinalColumn(x))"]}
{"id": "eqasc_train_7238", "nl": "Jaws appear within the vertebrates.", "fol": "", "prediction": ["all x.(Jaw(x) -> AppearsInVertebrate(x))"]}
{"id": "eqasc_train_7239", "nl": "jaws appear within animals that have a backbone.", "fol": "", "prediction": ["all x y.((Animal(x) & Jaw(y) & HasBackbone(x,y)) -> AppearsIn(x,y))"]}
{"id": "eqasc_train_7240", "nl": "Trunk muscles are the muscles of abdominal wall, thorax, backbone and pelvic cavity.", "fol": "", "prediction": ["all x.(TrunkMuscle(x) -> (AbdominalWall(x) & Thorax(x) & Backbone(x) & PelvicCavity(x)))"]}
{"id": "eqasc_train_7241", "nl": "Vertebrates are animals that have trunk muscles", "fol": "", "prediction": ["all x.(Vertebrates(x) -> (Animal(x) & HasTrunkMuscles(x)))"]}
{"id": "eqasc_train_7242", "nl": "Frogs are examples of vertebrates.", "fol": "", "prediction": ["all x.(Frog(x) -> Vertebrate(x))"]}
{"id": "eqasc_train_7243", "nl": "Frogs have a backbone", "fol": "", "prediction": ["all x.(Frog(x) -> HasBackbone(x))"]}
{"id": "eqasc_train_7244", "nl": "Invertebrates have no vertebrae or backbone.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> (-Vertebrae(x) | -Backbone(x)))"]}
{"id": "eqasc_train_7245", "nl": "some animals have no vertebrae", "fol": "", "prediction": ["exists x.(Animal(x) & -Vertebrae(x))"]}
{"id": "eqasc_train_7246", "nl": "Vertebrates generally have a backbone called the spinal column.", "fol": "", "prediction": ["all x.(Vertebrates(x) -> HasBackbone(x))"]}
{"id": "eqasc_train_7247", "nl": "Vertebrates are animals that have a spinal column in their skeletal system.", "fol": "", "prediction": ["all x.(Vertebrates(x) -> (Animal(x) & SpinalColumnInSkeleton(x)))"]}
{"id": "eqasc_train_7248", "nl": "Birds are warm-blooded vertebrates.", "fol": "", "prediction": ["all x.(Bird(x) -> WarmBloodedVertebrate(x))"]}
{"id": "eqasc_train_7249", "nl": "birds have a backbone", "fol": "", "prediction": ["all x.(Bird(x) -> HasBackbone(x))"]}
{"id": "eqasc_train_7250", "nl": "Humans have a backbone", "fol": "", "prediction": ["all x.(Human(x) -> HasBackbone(x))"]}
{"id": "eqasc_train_7251", "nl": "high pressure systems cause clear weather", "fol": "", "prediction": ["all x.(HighPressureSystem(x) -> CausesClearWeather(x))"]}
{"id": "eqasc_train_7252", "nl": "Most deserts occur in regions that typically have high atmospheric pressure.", "fol": "", "prediction": ["all x.(Desert(x) -> (OccursInHighAtmosphericPressure(x) & InHighAtmosphericPressure(x)))"]}
{"id": "eqasc_train_7253", "nl": "deserts typically have clear weather", "fol": "", "prediction": ["all x.(Desert(x) -> (ClearWeather(x) & ClearWeather(x)))"]}
{"id": "eqasc_train_7254", "nl": "High pressure usually indicates the weather is fair and dry.", "fol": "", "prediction": ["all x.(HighPressure(x) -> (FairWeather(x) & DryWeather(x)))"]}
{"id": "eqasc_train_7255", "nl": "clear weather leads to dry conditions", "fol": "", "prediction": ["all x y.((ClearWeather(x) & DryConditions(y)) -> LeadsTo(x,y))"]}
{"id": "eqasc_train_7256", "nl": "High Pressure areas usually produce fair weather.", "fol": "", "prediction": ["all x.(HighPressureArea(x) -> ProducesFairWeather(x))"]}
{"id": "eqasc_train_7257", "nl": "Fair weather causes clear weather.", "fol": "", "prediction": ["all x.(FairWeather(x) -> CausesClearWeather(x))"]}
{"id": "eqasc_train_7258", "nl": "During windy weather, the pollution is dispersed and cleared away.", "fol": "", "prediction": ["all x.(WindyWeather(x) -> (DispersedPollution(x) & ClearedAway(x)))"]}
{"id": "eqasc_train_7259", "nl": "high pressure systems cause pollution to disperse", "fol": "", "prediction": ["all x.(HighPressureSystem(x) -> CausesPollutionToDisperse(x))"]}
{"id": "eqasc_train_7260", "nl": "Weather Clear weather usually means good visibility.", "fol": "", "prediction": ["all x.((Weather(x) & Clear(x)) -> GoodVisibility(x))"]}
{"id": "eqasc_train_7261", "nl": "High pressure systems can cause good visibility.", "fol": "", "prediction": ["all x.(HighPressureSystem(x) -> CausesGoodVisibility(x))"]}
{"id": "eqasc_train_7262", "nl": "High pressure means falling air, which is a condition minimizing cloud formation.", "fol": "", "prediction": ["all x.(HighPressure(x) -> (FallingAir(x) & MinimizesCloudFormation(x)))"]}
{"id": "eqasc_train_7263", "nl": "falling air  pressure minimizes clouds", "fol": "", "prediction": ["all x y.((FallingAirPressure(x) & Cloud(y)) -> Minimizes(x,y))"]}
{"id": "eqasc_train_7264", "nl": "high pressure systems cause good visibility", "fol": "", "prediction": ["all x.(HighPressureSystem(x) -> CausesGoodVisibility(x))"]}
{"id": "eqasc_train_7265", "nl": "High pressure systems cause good visibility.", "fol": "", "prediction": ["all x.(HighPressureSystem(x) -> CausesGoodVisibility(x))"]}
{"id": "eqasc_train_7266", "nl": "High barometric pressure indicates clear weather.", "fol": "", "prediction": ["all x.(HighBarometricPressure(x) -> ClearWeather(x))"]}
{"id": "eqasc_train_7267", "nl": "barometric pressure makes clear weather", "fol": "", "prediction": ["all x.(BarometricPressure(x) -> MakesClearWeather(x))"]}
{"id": "eqasc_train_7268", "nl": "Sailplanes fly in clear weather.", "fol": "", "prediction": ["all x.(Sailplane(x) -> FlyInClearWeather(x))"]}
{"id": "eqasc_train_7269", "nl": "high pressure systems allow sailplane to fly", "fol": "", "prediction": ["all x.(HighPressureSystem(x) -> AllowsSailplaneToFly(x))"]}
{"id": "eqasc_train_7270", "nl": "Bermuda high-pressure systems are a frequent summer visitor.", "fol": "", "prediction": ["all x.((BermudaHighPressureSystem(x) & FrequentSummerVisitor(x)) -> HighPressure(x))"]}
{"id": "eqasc_train_7271", "nl": "Something from Bermuda causes clear weather", "fol": "", "prediction": ["all x y.((Bermuda(x) & SomethingFrom(x,y)) -> CausesClearWeather(x))"]}
{"id": "eqasc_train_7272", "nl": "Like fog, it forms in clear and calm weather conditions.", "fol": "", "prediction": ["(Fog(f) & ClearAndCalmWeather(f))"]}
{"id": "eqasc_train_7273", "nl": "High pressure systems cause calm weather conditions", "fol": "", "prediction": ["all x.(HighPressureSystem(x) -> CausesCalmWeatherConditions(x))"]}
{"id": "eqasc_train_7274", "nl": "Also known as an cyclone , it is the opposite of an area of high pressure , or a anticyclone.", "fol": "", "prediction": ["all x.(Cyclone(x) -> (OppositeOfHighPressure(x) | OppositeOfAnticyclone(x)))"]}
{"id": "eqasc_train_7275", "nl": "Anticyclones cause clear weather", "fol": "", "prediction": ["all x.(Anticyclone(x) -> CausesClearWeather(x))"]}
{"id": "eqasc_train_7276", "nl": "Clear weather is caused by sinking air.", "fol": "", "prediction": ["all x.(ClearWeather(x) -> CausedBySinkingAir(x))"]}
{"id": "eqasc_train_7277", "nl": "High pressure systems are the result of sinking air. ", "fol": "", "prediction": ["all x.(HighPressureSystem(x) -> SinkingAir(x))"]}
{"id": "eqasc_train_7278", "nl": "High pressure systems tend to bring calm weather.", "fol": "", "prediction": ["all x.(HighPressureSystem(x) -> BringsCalmWeather(x))"]}
{"id": "eqasc_train_7279", "nl": "High pressure systems make calm days", "fol": "", "prediction": ["all x.(HighPressureSystem(x) -> MakesCleanDays(x))"]}
{"id": "eqasc_train_7280", "nl": "Blood pH may become unbalanced if the rate of breathing is too fast or too slow.", "fol": "", "prediction": ["all x.((BloodPhPhP) & (TooFast(x) | TooSlow(x))) -> Unbalanced(x))"]}
{"id": "eqasc_train_7281", "nl": "Mammals breathe with lungs.", "fol": "", "prediction": ["all x.(Mammal(x) -> BreathesWithLungs(x))"]}
{"id": "eqasc_train_7282", "nl": "Blood pH may become unbalanced if the lungs are working too fast or too slow.", "fol": "", "prediction": ["all x.((Lungs(x) & (WorkingTooFast(x) | WorkingTooSlow(x))) -> Unbalanced(x))"]}
{"id": "eqasc_train_7283", "nl": "Aerobic activities are exercises that cause deep breathing and a fast heart rate.", "fol": "", "prediction": ["all x.(AerobicActivity(x) -> (CausesDeepBreathing(x) & FastHeartRate(x)))"]}
{"id": "eqasc_train_7284", "nl": "blood pH may become unbalanced from aerobic activities", "fol": "", "prediction": ["all x.((BloodPhP) & AerobicActivities(x)) -> Unbalanced(x))"]}
{"id": "eqasc_train_7285", "nl": "If Someone Is Hyperventilating Hyperventilation is caused by breathing too deeply, too fast.", "fol": "", "prediction": ["All x.(Hyperventilating(x) -> (BreathesTooDeeply(x) & BreathesTooFast(x)))"]}
{"id": "eqasc_train_7286", "nl": "Blood pH may become unbalanced if Someone Is Hyperventilating", "fol": "", "prediction": ["all x.((Hyperventilating(x) & BloodPhP(x)) -> Unbalanced(x))"]}
{"id": "eqasc_train_7287", "nl": "Slow and fast respirations or long periods without a breath are common in the dying child.", "fol": "", "prediction": ["all x.((DyingChild(x) & (SlowRespiration(x) | LongPeriodsWithoutBreath(x))) -> CommonIn(x,DyingChild))"]}
{"id": "eqasc_train_7288", "nl": "Blood pH may become unbalanced if respiration is too fast or too slow.", "fol": "", "prediction": ["all x.((Respiration(x) & (TooFast(x) | TooSlow(x))) -> Unbalanced(x))"]}
{"id": "eqasc_train_7289", "nl": "Alkalosis is a blood pH above 7.45.", "fol": "", "prediction": ["all x.(Alkalosis(x) -> BloodPHAbove(x,7))"]}
{"id": "eqasc_train_7290", "nl": "Rate of breathing being too fast or too slow can lead to alkalosis.", "fol": "", "prediction": ["all x.((RateOfBreathing(x) & (TooFast(x) | TooSlow(x))) -> Alkalosis(x))"]}
{"id": "eqasc_train_7291", "nl": "For instance, the normal pH of human blood is maintained at 7.4.", "fol": "", "prediction": ["all x.((HasNormalPH(x) & HumanBlood(x)) -> MaintainedAt(x,7.4))"]}
{"id": "eqasc_train_7292", "nl": "Normal human blood may become unbalanced if the rate of breathing is too fast or too slow", "fol": "", "prediction": ["all x.((NormalHumanBlood(x) & (TooFast(x) | TooSlow(x))) -> Unbalanced(x))"]}
{"id": "eqasc_train_7293", "nl": "For example, blood pH is critical for regulating the binding and release of oxygen from hemoglobin.", "fol": "", "prediction": ["all x.((BloodPhP) & BloodPhP(x)) -> (RegulatesBindingOfOxygen(x) & RegulatesReleaseOfOxygen(x)))"]}
{"id": "eqasc_train_7294", "nl": "Something critical for regulating oxygen from hemoglobin may become unbalanced if the rate of breathing is too fast or too slow", "fol": "", "prediction": ["all x.((CriticalForRegulatingOxygenFromHemoglobin(x) & (TooFast(x) | TooSlow(x))) -> Unbalanced(x))"]}
{"id": "eqasc_train_7295", "nl": "Blood acidity may become unbalanced if the rate of breathing is too fast or too slow.", "fol": "", "prediction": ["all x.((BloodAcidity(x) & (TooFast(x) | TooSlow(x))) -> Unbalanced(x))"]}
{"id": "eqasc_train_7296", "nl": "Breathing is regulated to keep as normal as possible arterial blood pH and PO2.", "fol": "", "prediction": ["all x.(Breathing(x) -> (RegulatedToKeepAsNormalAsPh(x) & NormalAsPo2(x)))"]}
{"id": "eqasc_train_7297", "nl": "Breathing is regulated to keep blood acidity balanced", "fol": "", "prediction": ["all x y.((Breathing(x) & BloodAcidity(y)) -> Regulated(x,y))"]}
{"id": "eqasc_train_7298", "nl": "blood flow is regulated by breathing", "fol": "", "prediction": ["all x.(BloodFlowRegulatedByBreathing(x) -> RegulatesBreathing(x))"]}
{"id": "eqasc_train_7299", "nl": "When a compound is unbalanced it becomes unbalanced and unstable.", "fol": "", "prediction": ["all x.((Compound(x) & Unbalanced(x)) -> (Unbalanced(x) & Unstabilized(x)))"]}
{"id": "eqasc_train_7300", "nl": "Blood pH may become unstable if the rate of breathing is too fast or too slow.", "fol": "", "prediction": ["all x.((BloodPhPhP) & (TooFast(x) | TooSlow(x))) -> Unstable(x))"]}
{"id": "eqasc_train_7301", "nl": "pesticides can cause pollution", "fol": "", "prediction": ["all x.(Pesticide(x) -> CausesPollution(x))"]}
{"id": "eqasc_train_7302", "nl": "Biologists have shown that light pollution harms animals.", "fol": "", "prediction": ["all x y.((Biologist(x) & Animal(y)) -> HarmsLightPollution(x,y))"]}
{"id": "eqasc_train_7303", "nl": "Pesticides harm animals.", "fol": "", "prediction": ["all x.(Pesticide(x) -> HarmsAnimals(x))"]}
{"id": "eqasc_train_7304", "nl": "pesticides can lead to more illness", "fol": "", "prediction": ["all x.(Pesticide(x) -> MoreIllness(x))"]}
{"id": "eqasc_train_7305", "nl": "Air pollution raises the risk of death and disease.", "fol": "", "prediction": ["all x.(AirPollution(x) -> (RiskOfDeath(x) & RiskOfDisease(x)))"]}
{"id": "eqasc_train_7306", "nl": "Pesticides can raise the risk of death and disease.", "fol": "", "prediction": ["all x.(Pesticide(x) -> (RaisesRiskOfDeath(x) & RaisesRiskOfDisease(x)))"]}
{"id": "eqasc_train_7307", "nl": "Pesticide A pesticide is an agent that is used to control pests.", "fol": "", "prediction": ["all x.(Pesticide(x) -> (Agent(x) & UsedToControlPests(x)))"]}
{"id": "eqasc_train_7308", "nl": "Agents to control pests can cause pollution.", "fol": "", "prediction": ["all x.((Agent(x) & ControlsPests(x)) -> CanCausePollution(x))"]}
{"id": "eqasc_train_7309", "nl": "Pesticides are chemical poisons.", "fol": "", "prediction": ["all x.(Pesticide(x) -> ChemicalPoison(x))"]}
{"id": "eqasc_train_7310", "nl": "Chemical poisons cause pollution", "fol": "", "prediction": ["all x.(ChemicalPoison(x) -> CausesPollution(x))"]}
{"id": "eqasc_train_7311", "nl": "Air pollution harms the ecosystem.", "fol": "", "prediction": ["all x.(AirPollution(x) -> HarmsEcosystem(x))"]}
{"id": "eqasc_train_7312", "nl": "pesticides can harm the ecosystem", "fol": "", "prediction": ["all x.(Pesticide(x) -> CanHarmEcosystem(x))"]}
{"id": "eqasc_train_7313", "nl": "Pesticides can cause the release of harmful substances into the environment.", "fol": "", "prediction": ["all x y.((Pesticide(x) & Environment(y)) -> CausesReleaseOfHarmfulSubstances(x,y))"]}
{"id": "eqasc_train_7314", "nl": "Pollution can also hurt animal and plant populations.", "fol": "", "prediction": ["all x.(Pollution(x) -> (HasAnimalPopulations(x) | HasPlantPopulations(x)))"]}
{"id": "eqasc_train_7315", "nl": "Pesticides can hurt plant populations.", "fol": "", "prediction": ["all x.(Pesticide(x) -> CanHitPlantPopulations(x))"]}
{"id": "eqasc_train_7316", "nl": "Pesticides for cranberries pollute the water.", "fol": "", "prediction": ["all x.((Pesticide(x) & Cranberry(x)) -> PollutesWater(x))"]}
{"id": "eqasc_train_7317", "nl": "cranberries cause pollution", "fol": "", "prediction": ["all x.(Cranberry(x) -> CausesPollution(x))"]}
{"id": "eqasc_train_7318", "nl": "If thermal pollution is severe, then the entire aquatic ecosystem can be destroyed.", "fol": "", "prediction": ["all x.((ThermalPollution(x) & Severe(x)) -> CanBeDismantled(x))"]}
{"id": "eqasc_train_7319", "nl": "Pesticides can cause entire ecosystems to be destroyed.", "fol": "", "prediction": ["all x.(Pesticide(x) -> CausesDestructionOfEcosystems(x))"]}
{"id": "eqasc_train_7320", "nl": "Biodiversity generally increases from the poles to the equator.", "fol": "", "prediction": ["all x y.((Biodiversity(x) & Pole(y)) -> IncreasesFromToEquator(x,y))"]}
{"id": "eqasc_train_7321", "nl": "Ecosystem complexity generally increases from the poles to the equator.", "fol": "", "prediction": ["all x y.((EcosystemComplexity(x) & Pole(y)) -> IncreasesFromToEquator(x,y))"]}
{"id": "eqasc_train_7322", "nl": "Biodiversity is equated with the number of different organisms present in a habitat .", "fol": "", "prediction": ["all x y.((Biodiversity(x) & Habitat(y)) -> NumberOfOrganisms(x,y))"]}
{"id": "eqasc_train_7323", "nl": "The number of different organisms in a habitat increases from the poles to the equator", "fol": "", "prediction": ["all x y z.((Organism(x) & Habitat(y) & Pole(z) & Equator(z)) -> IncreasesFromTo(x,y,z))"]}
{"id": "eqasc_train_7324", "nl": "different organisms' numbers in a habitat increases from the poles to the equator.", "fol": "", "prediction": ["all x y.((Organism(x) & Habitat(y)) -> IncreasesFromPolesToEquator(x,y))"]}
{"id": "eqasc_train_7325", "nl": "Biodiversity is the diversity of life.", "fol": "", "prediction": ["all x.(Biodiversity(x) -> DiversityOfLife(x))"]}
{"id": "eqasc_train_7326", "nl": "diversity of life generally increases from the poles to the equator", "fol": "", "prediction": ["all x y z.((Pole(x) & Equator(y) & DiversityOfLife(z)) -> (IncreasesFromPolesToEquator(x,z)))"]}
{"id": "eqasc_train_7327", "nl": "Soil Biodiversity Soil biodiversity reflects the mix of living organisms in the soil.", "fol": "", "prediction": ["all x.(SoilBiodiversity(x) -> ReflectsLivingOrganismsInSoil(x))"]}
{"id": "eqasc_train_7328", "nl": "the mix of living organisms generally increases from the poles to the equator", "fol": "", "prediction": ["all x y z.((MixOfLivingOrganisms(x) & Pole(y) & Equator(z)) -> IncreasesFromTo(x,y,z))"]}
{"id": "eqasc_train_7329", "nl": "Ecosystem complexity generally increases from the poles to the equator", "fol": "", "prediction": ["all x y z.((EcosystemComplexity(x) & Pole(y) & Equator(z)) -> (IncreasesFromPolesToEquator(x,y,z)))"]}
{"id": "eqasc_train_7330", "nl": "Biodiversity, on the whole, increases towards the equator and decreases towards the poles.", "fol": "", "prediction": ["all x.(Biodiversity(x) -> (IncreasesTowardsEquator(x) & DecreasesTowardsPoles(x)))"]}
{"id": "eqasc_train_7331", "nl": "biodiversity decreases towards the poles", "fol": "", "prediction": ["all x y.((Biodiversity(x) & Pole(y)) -> DecreasesTowards(x,y))"]}
{"id": "eqasc_train_7332", "nl": "Most rainforests lie near the equator.", "fol": "", "prediction": ["all x.(Rainforest(x) -> NearEquator(x))"]}
{"id": "eqasc_train_7333", "nl": "Biodiversity generally increases from the poles to the area where the rainforests lie.", "fol": "", "prediction": ["all x y.((Pole(x) & Rainforest(y)) -> IncreasesBiodiversity(x,y))"]}
{"id": "eqasc_train_7334", "nl": "complexity generally increases from the poles to the equator", "fol": "", "prediction": ["all x y z.((Pole(x) & Equator(y) & Complexity(z)) -> (IncreasesFromPolesToEquator(x,z) & -IncreasesFromPolesToEquator(x,y)))"]}
{"id": "eqasc_train_7335", "nl": "Polyps usually reproduce asexually.", "fol": "", "prediction": ["all x.(Polyp(x) -> ReproducesAsexually(x))"]}
{"id": "eqasc_train_7336", "nl": "All corals begin as a single polyp.", "fol": "", "prediction": ["all x.(Coral(x) -> SinglePolyp(x))"]}
{"id": "eqasc_train_7337", "nl": "Corals reproduce asexually", "fol": "", "prediction": ["all x.(Coral(x) -> ReproducesAsexually(x))"]}
{"id": "eqasc_train_7338", "nl": "Cnidarians have two basic body forms, medusa and polyp.", "fol": "", "prediction": ["all x.(Cnidarian(x) -> (HasBodyForm(x,medusa) & HasBodyForm(x,polyp)))"]}
{"id": "eqasc_train_7339", "nl": "Cnidarians can reproduce asexually", "fol": "", "prediction": ["all x.(Cnidarian(x) -> CanReproduceAsexually(x))"]}
{"id": "eqasc_train_7340", "nl": "Asexual reproduction occurs in several different ways.", "fol": "", "prediction": ["all x.(AsexualReproduction(x) -> exists y.(Distinct(y) & OccursIn(x,y))))"]}
{"id": "eqasc_train_7341", "nl": "Polyps usually reproduce several different ways", "fol": "", "prediction": ["all x.(Polyp(x) -> (ReproducesVariousDifferentWays(x) & VariousWays(x)))"]}
{"id": "eqasc_train_7342", "nl": "Polyps are benign growths in the colon.", "fol": "", "prediction": ["all x.(Polyp(x) -> (BeneficialGrowth(x) & InColon(x)))"]}
{"id": "eqasc_train_7343", "nl": "benign growths in the colon reproduce asexually", "fol": "", "prediction": ["all x y.((BeneficialGrowths(x) & Colon(y)) -> ReproducesAsexually(x,y))"]}
{"id": "eqasc_train_7344", "nl": "Coral polyps are united into colonies.", "fol": "", "prediction": ["all x.(CoralPolyp(x) -> UnitedIntoColony(x))"]}
{"id": "eqasc_train_7345", "nl": "coral colonies reproduce asexually", "fol": "", "prediction": ["all x.(CoralColony(x) -> ReproducesAsexually(x))"]}
{"id": "eqasc_train_7346", "nl": "Reefs are built by tiny organisms called polyps.", "fol": "", "prediction": ["all x.(Reef(x) -> (BuiltBy(x,y) & TickyOrganism(y) & Polyps(y)))"]}
{"id": "eqasc_train_7347", "nl": "reefs are built by organisms that usually reproduce asexually", "fol": "", "prediction": ["all x y.((Reef(x) & Organism(y)) -> (BuiltBy(x,y) & ReproducesAsexually(y)))"]}
{"id": "eqasc_train_7348", "nl": "Plants with Asexual Reproduction Plants with asexual reproduction have no gamete fusion.", "fol": "", "prediction": ["all x.((Plant(x) & AsexualReproduction(x)) -> -GameteFusion(x))"]}
{"id": "eqasc_train_7349", "nl": "Polyps reproduce with no gamete fusion.", "fol": "", "prediction": ["all x.(Polyp(x) -> ReproducesWithoutGameteFusion(x))"]}
{"id": "eqasc_train_7350", "nl": "Polyps reproduce by asexual budding.", "fol": "", "prediction": ["all x.(Polyp(x) -> ReproducesByAsexualBadding(x))"]}
{"id": "eqasc_train_7351", "nl": "Polyps usually reproduce by budding", "fol": "", "prediction": ["all x.(Polyp(x) -> (Budding(x) & Reproduce(x)))"]}
{"id": "eqasc_train_7352", "nl": "Polyps do not use gamete fusion.", "fol": "", "prediction": ["all x.(Polyp(x) -> -UsesGameteFusion(x))"]}
{"id": "eqasc_train_7353", "nl": "Plants detect and respond to the daily cycle of light and darkness.", "fol": "", "prediction": ["all x.(Plant(x) -> (DetectsDailyCycleOfLightAndDarkness(x) & RespondsToDailyCycleOfDarkness(x)))"]}
{"id": "eqasc_train_7354", "nl": "Diurnal cycles Diurnal cycles are the daily cycles of light and darkness.", "fol": "", "prediction": ["all x.(DiurnalCycle(x) -> (DailyCycle(x,Light) & DailyCycle(x,Darkness)))"]}
{"id": "eqasc_train_7355", "nl": "Plants detect and respond to diurnal cycles.", "fol": "", "prediction": ["all x.(Plant(x) -> (DetectsDiurnalCycles(x) & RespondsToDiurnalCycles(x)))"]}
{"id": "eqasc_train_7356", "nl": "Plants are sensitive to light.", "fol": "", "prediction": ["all x.(Plant(x) -> SensitiveToLight(x))"]}
{"id": "eqasc_train_7357", "nl": "plants are sensitive to darkness", "fol": "", "prediction": ["all x.((Plant(x) & SensitiveToDarkness(x)) -> SensitiveToDarkness(x))"]}
{"id": "eqasc_train_7358", "nl": "All daily cycles of the celestial objects are caused by the rotation of the Earth.", "fol": "", "prediction": ["all x.(DailyCycle(x) -> CausedByRotationOfEarth(x))"]}
{"id": "eqasc_train_7359", "nl": "Plants detect and respond to the rotation of the Earth", "fol": "", "prediction": ["all x y.((Plant(x) & Earth(y)) -> (Detects(x,y) & RespondsToRotation(x,y)))"]}
{"id": "eqasc_train_7360", "nl": "Flowers to be planted in between fruit plantings.", "fol": "", "prediction": ["all x.(Flower(x) -> PlantedInBetweenFruitPlantings(x))"]}
{"id": "eqasc_train_7361", "nl": "Flowers detect light and darkness. ", "fol": "", "prediction": ["all x.(Flower(x) -> (DetectsLight(x) & DetectsDarkness(x)))"]}
{"id": "eqasc_train_7362", "nl": "bushes detect and respond to the daily cycle of light and darkness", "fol": "", "prediction": ["all x.(Bush(x) -> (DetectsAndResponsesToDailyCycleOfLightAndDarkness(x) & DailyCycleOfDarkness(x)))"]}
{"id": "eqasc_train_7363", "nl": "bamboo detects and responds to the daily cycle of light and darkness", "fol": "", "prediction": ["all x y.((Bamboo(x) & DailyCycleOfLightAndDarkness(y)) -> (DetectsAndResponsesTo(x,y) & DailyCycleOf(x,y)))"]}
{"id": "eqasc_train_7364", "nl": "Circadian rhythms People and animals are usually adapted for a daily cycle of light and dark.", "fol": "", "prediction": ["all x.(CircadianRhythms(x) -> (AdaptedForLight(x) & AdaptedForDark(x)))"]}
{"id": "eqasc_train_7365", "nl": "Plants detect light and dark because of their circadian rhythm", "fol": "", "prediction": ["all x.((Plant(x) & Light(x) & Dark(x)) -> (Detects(x,y) & CircadianRhythm(y)))"]}
{"id": "eqasc_train_7366", "nl": "Plants detect and respond to Diurnal cycles", "fol": "", "prediction": ["all x y.((Plant(x) & DiurnalCycle(y)) -> (Detects(x,y) & RespondsTo(x,y)))"]}
{"id": "eqasc_train_7367", "nl": "daisies detect and respond to the daily cycle of light and darkness", "fol": "", "prediction": ["all x.(Daisy(x) -> (DetectsLight(x) & RespondsToDailyCycle(x) & DailyCycleOfDarkness(x)))"]}
{"id": "eqasc_train_7368", "nl": "During the flowering cycle they receive fewer hours of light.", "fol": "", "prediction": ["all x.(FloweringCycle(x) -> FewerHoursOfLight(x))"]}
{"id": "eqasc_train_7369", "nl": "Plants detect and respond to the daily cycles such as during the flowering when hours are fewer", "fol": "", "prediction": ["all x y z.((Plant(x) & DailyCycle(y) & Flowering(z) & HoursLess(z)) -> (DetectsAndResponses(x,y) & During(x,z)))"]}
{"id": "eqasc_train_7370", "nl": "a solar panel converts sunlight into electricity", "fol": "", "prediction": ["all x y.((SolarPanel(x) & Sunlight(y)) -> ConvertsToElectricity(x,y))"]}
{"id": "eqasc_train_7371", "nl": "Energy of sunlight is more concentrated near the equator.", "fol": "", "prediction": ["all x.(Sunlight(x) -> MoreConcentratedEnergyNearEquator(x))"]}
{"id": "eqasc_train_7372", "nl": "Solar panels work well near the equator", "fol": "", "prediction": ["all x y.((SolarPanel(x) & Equator(y)) -> WorksWellNear(x,y))"]}
{"id": "eqasc_train_7373", "nl": "Electricity Cars that operate using electricity are the cleanest cars on the market.", "fol": "", "prediction": ["all x.((Car(x) & OperatesUsingElectricity(x)) -> CleanestOnMarket(x))"]}
{"id": "eqasc_train_7374", "nl": "Some cars can now operate cleanly on sunlight", "fol": "", "prediction": ["exists x.(Car(x) & CanOperateCleanlyOnSunlight(x))"]}
{"id": "eqasc_train_7375", "nl": "Lasers are powered by electricity.", "fol": "", "prediction": ["all x.(Laser(x) -> PoweredByElectricity(x))"]}
{"id": "eqasc_train_7376", "nl": "solar panels can power lasers", "fol": "", "prediction": ["all x.(SolarPanel(x) -> PowerLasers(x))"]}
{"id": "eqasc_train_7377", "nl": "Sunlight is composed of photons, or particles of solar energy.", "fol": "", "prediction": ["all x.(Sunlight(x) -> (ComposedOfPhotons(x) | ComposedOfParticlesOfSolarEnergy(x)))"]}
{"id": "eqasc_train_7378", "nl": "A solar panel converts photons into electricity.", "fol": "", "prediction": ["all x.(SolarPanel(x) -> ConvertsPhotonsToElectricity(x))"]}
{"id": "eqasc_train_7379", "nl": "Green plants use chlorophyll to capture the energy of sunlight and convert it to food.", "fol": "", "prediction": ["all x.(GreenPlant(x) -> (UsesChlorophyll(x) & CapturesSunlightEnergy(x) & ConvertsToFood(x)))"]}
{"id": "eqasc_train_7380", "nl": "Green plants and solar panels both capture energy from the sun.", "fol": "", "prediction": ["all x y.((GreenPlant(x) & SolarPanel(y)) -> CapturesEnergyFromSun(x,y))"]}
{"id": "eqasc_train_7381", "nl": "Electric power is measured in watts.", "fol": "", "prediction": ["all x.(ElectricPower(x) -> MeasuredInWatts(x))"]}
{"id": "eqasc_train_7382", "nl": "A solar panel converts sunlight into watts", "fol": "", "prediction": ["all x y.((SolarPanel(x) & Sunlight(y)) -> ConvertsToWatts(x,y))"]}
{"id": "eqasc_train_7383", "nl": "Solar energy is converted directly to electricity by the photovoltaic array.", "fol": "", "prediction": ["all x y.((SolarEnergy(x) & PhotovoltaicArray(y)) -> ConvertsToElectricity(x,y))"]}
{"id": "eqasc_train_7384", "nl": "a photovoltaic array converts sunlight into electricity", "fol": "", "prediction": ["all x y.((PhotovoltaicArray(x) & Sunlight(y)) -> ConvertsToElectricity(x,y))"]}
{"id": "eqasc_train_7385", "nl": "a solar panel converts  photons into electricity", "fol": "", "prediction": ["all x y.((SolarPanel(x) & Photon(y)) -> ConvertsToElectricity(x,y))"]}
{"id": "eqasc_train_7386", "nl": "a solar panel converts sunlight into electrons in motion", "fol": "", "prediction": ["all x y z.((SolarPanel(x) & Sunlight(y) & Electron(z)) -> ConvertsTo(x,y,z))"]}
{"id": "eqasc_train_7387", "nl": "ultraviolet light causes sunburn", "fol": "", "prediction": ["all x.(UVLight(x) -> CausesSunburn(x))"]}
{"id": "eqasc_train_7388", "nl": "Sunburns are a risk factor for skin cancer.", "fol": "", "prediction": ["all x.(Sunburn(x) -> RiskFactorForSkinCancer(x))"]}
{"id": "eqasc_train_7389", "nl": "Ultraviolet light causes skin cancer.", "fol": "", "prediction": ["all x.(UltravioletLight(x) -> CausesSkinCancer(x))"]}
{"id": "eqasc_train_7390", "nl": "Ultraviolet light is emitted by the sun.", "fol": "", "prediction": ["all x y.((Sun(x) & UltravioletLight(y)) -> EmittedBy(x,y))"]}
{"id": "eqasc_train_7391", "nl": "the sun causes sunburn", "fol": "", "prediction": ["all x.(Sun(x) -> CausesSunburn(x))"]}
{"id": "eqasc_train_7392", "nl": "Sunburn symptoms are skin redness and pain, possible swelling, blisters, fever, headaches.", "fol": "", "prediction": ["all x.(SunburnSymptom(x) -> (SkinRedness(x) & Pain(x) & PossibleSwelling(x) & Blisters(x) & Fever(x) & Headaches(x)))"]}
{"id": "eqasc_train_7393", "nl": "ultraviolet light causes skin redness and pain, possible swelling, blisters, fever, headaches", "fol": "", "prediction": ["all x.(UVLight(x) -> (CausesSkinRednessAndPain(x) & PossibleSwellingBlistersFeverHeadaches(x)))"]}
{"id": "eqasc_train_7394", "nl": "Sunburns are painful and can be dangerous.", "fol": "", "prediction": ["all x.(Sunburn(x) -> (Poisonous(x) & Dangerous(x)))"]}
{"id": "eqasc_train_7395", "nl": "ultraviolet light can be dangerous", "fol": "", "prediction": ["all x.(UltravioletLight(x) -> CanBeDangerous(x))"]}
{"id": "eqasc_train_7396", "nl": "Ultraviolet Rays Ultraviolet rays are more powerful at elevation.", "fol": "", "prediction": ["all x.(UltravioletRay(x) -> PowerfulAtElevation(x))"]}
{"id": "eqasc_train_7397", "nl": "Sunburn risk is higher at elevation.", "fol": "", "prediction": ["all x.(SunburnRisk(x) -> HigherAtElevation(x))"]}
{"id": "eqasc_train_7398", "nl": "Serious skin cancer is caused by sunburns in childhood.", "fol": "", "prediction": ["all x.(SeriousSkinCancer(x) -> CausedBySunburnsInChildren(x))"]}
{"id": "eqasc_train_7399", "nl": "Too much exposure to ultraviolet light in childhood can cause skin cancer.", "fol": "", "prediction": ["all x.((ExpositionToUVLight(x) & Childhood(x)) -> CausesSkinCancer(x))"]}
{"id": "eqasc_train_7400", "nl": "Furthermore, sunburn can cause premature aging and skin cancers.", "fol": "", "prediction": ["all x.(Sunburn(x) -> (PrematureAging(x) & SkinCancers(x)))"]}
{"id": "eqasc_train_7401", "nl": "ultraviolet light can cause skin cancer", "fol": "", "prediction": ["all x.(UltravioletLight(x) -> CausesSkinCancer(x))"]}
{"id": "eqasc_train_7402", "nl": "Sunburns cause the skin to become red and painful to the touch.", "fol": "", "prediction": ["all x.(Sunburn(x) -> (CausesSkinToBecomeRed(x) & PainfulToTouch(x)))"]}
{"id": "eqasc_train_7403", "nl": "Ultraviolet light causes skin to become red and painful to the touch.", "fol": "", "prediction": ["all x.(UltravioletLight(x) -> (CausesSkinToBecomeRed(x) & PainfulToTouch(x)))"]}
{"id": "eqasc_train_7404", "nl": "ultraviolet light can be painful and dangerous", "fol": "", "prediction": ["all x.(UVLight(x) -> (Positive(x) & Dangerous(x)))"]}
{"id": "eqasc_train_7405", "nl": "extreme heat and pressure change rock into metamorphic rock", "fol": "", "prediction": ["all x y.((ExtremeHeat(x) & ExtremePressureChangeRock(y)) -> MetamorphicRock(x))"]}
{"id": "eqasc_train_7406", "nl": "Marble is a metamorphic rock.", "fol": "", "prediction": ["all x.(Marble(x) -> MetamorphicRock(x))"]}
{"id": "eqasc_train_7407", "nl": "extreme heat and pressure change rock into marble", "fol": "", "prediction": ["all x y.((ExtremeHeat(x) & ExtremePressureChange(y)) -> Marble(x))"]}
{"id": "eqasc_train_7408", "nl": "marble is formed from heat and pressure", "fol": "", "prediction": ["all x.(Marble(x) -> (FormedFromHeat(x) & FormedFromPressure(x)))"]}
{"id": "eqasc_train_7409", "nl": "Metamorphic Rocks Metamorphic rocks are the most common rocks in which garnets are found.", "fol": "", "prediction": ["all x.(MetamorphicRock(x) -> (MostCommonRock(x) & FoundInGreets(x)))"]}
{"id": "eqasc_train_7410", "nl": "garnets are created by extreme heat and pressure", "fol": "", "prediction": ["all x.(Greyat(x) -> (CreatedByExtremeHeat(x) & CreatedByExtremePressure(x)))"]}
{"id": "eqasc_train_7411", "nl": "Marble Marble is a metamorphic rock.", "fol": "", "prediction": ["all x.(Marble(x) -> MetamorphicRock(x))"]}
{"id": "eqasc_train_7412", "nl": "extreme heat and pressure change rock into Marble", "fol": "", "prediction": ["all x y.((ExtremeHeat(x) & PressureChangeRock(y)) -> Marble(x))"]}
{"id": "eqasc_train_7413", "nl": "Slate is a metamorphic rock.", "fol": "", "prediction": ["all x.(Slate(x) -> MetamorphicRock(x))"]}
{"id": "eqasc_train_7414", "nl": "extreme heat and pressure change rock into slate", "fol": "", "prediction": ["all x y.((ExtremeHeat(x) & ExtremePressure(y)) -> ChangesRockIntoSlate(x))"]}
{"id": "eqasc_train_7415", "nl": "extreme heat and pressure create slate", "fol": "", "prediction": ["all x.(ExtremeHeat(x) & ExtremePressure(x)) -> CreatesSlate(x))"]}
{"id": "eqasc_train_7416", "nl": "Slate is an example of a metamorphic rock.", "fol": "", "prediction": ["all x.(Slate(x) -> MetamorphicRock(x))"]}
{"id": "eqasc_train_7417", "nl": "Extreme heat and pressure change rock into slate", "fol": "", "prediction": ["all x y z.((ExtremeHeat(x) & Pressure(y) & Rock(z) & ExtremeHeat(z) & PressureChange(x,z)) -> Slate(x))"]}
{"id": "eqasc_train_7418", "nl": "Gneiss Rocks Gneiss Rocks Gneiss rocks are metamorphic.", "fol": "", "prediction": ["all x.(GneissRock(x) -> (GneissRock(x) & Metamorphic(x)))"]}
{"id": "eqasc_train_7419", "nl": "Extreme heat and pressure change rock into gneiss", "fol": "", "prediction": ["all x y.((ExtremeHeat(x) & ExtremePressureChange(x) & Rock(y)) -> Gneiss(y))"]}
{"id": "eqasc_train_7420", "nl": "Metamorphic Rocks Metamorphic Rocks Metamorphic rocks are formed by pressure and heat.", "fol": "", "prediction": ["all x.(MetamorphicRock(x) -> (MetamorphicRock(x) & FormedByPressure(x) & FormedByHeat(x)))"]}
{"id": "eqasc_train_7421", "nl": "extreme heat and pressure form a type of rock", "fol": "", "prediction": ["all x.(ExtremeHeatAndPressure(x) -> Rock(x))"]}
{"id": "eqasc_train_7422", "nl": "Most of the heat for the Earth comes from the core.", "fol": "", "prediction": ["all x.(Heat(x) -> ComesFromCore(x))"]}
{"id": "eqasc_train_7423", "nl": "the earth's core creates metamorphic rock", "fol": "", "prediction": ["all x y.((EarthsCore(x) & EarthsCore(y)) -> CreatesMetamorphicRock(x,y))"]}
{"id": "eqasc_train_7424", "nl": "slate is formed with extreme heat and pressure", "fol": "", "prediction": ["all x.(Slate(x) -> (FormedWithExtremeHeat(x) & FormedWithExtremePressure(x)))"]}
{"id": "eqasc_train_7425", "nl": "extreme heat and pressure create Marble.", "fol": "", "prediction": ["all x.((ExtremeHeat(x) & ExtremePressure(x)) -> CreatesMarble(x))"]}
{"id": "eqasc_train_7426", "nl": "Extreme heat and pressure can change rock into slate.", "fol": "", "prediction": ["all x.(ExtremeHeat(x) & ExtremePressure(x)) -> CanChangeRockIntoSlate(x))"]}
{"id": "eqasc_train_7427", "nl": "Marble is a form of metamorphic rock.", "fol": "", "prediction": ["all x.(Marble(x) -> MetamorphicRock(x))"]}
{"id": "eqasc_train_7428", "nl": "marble is formed from extreme heat and pressure", "fol": "", "prediction": ["all x.(Marble(x) -> (FormedFromExtremeHeat(x) & FormedFromExtremePressure(x)))"]}
{"id": "eqasc_train_7429", "nl": "Sedimentary rock changes into a different form when it undergoes heat, pressure or other forces.", "fol": "", "prediction": ["all x.((SedimentaryRock(x) & (Heat(x) | Pressure(x) | OtherForces(x))) -> ChangesIntoDifferentForm(x))"]}
{"id": "eqasc_train_7430", "nl": "Sedimentary rock turns into metamorphic rock with force", "fol": "", "prediction": ["all x.(SedimentaryRock(x) -> (SedimentaryRock(x) & MetamorphicRock(x) & WithForce(x)))"]}
{"id": "eqasc_train_7431", "nl": "extreme heat and pressure changes rock into marble", "fol": "", "prediction": ["all x y.((ExtremeHeat(x) & ExtremePressure(y)) -> ChangesRockIntoMarble(x,y))"]}
{"id": "eqasc_train_7432", "nl": "Cancer is a disease that occurs when the cell cycle is no longer regulated.", "fol": "", "prediction": ["all x.(Cancer(x) -> (Disease(x) & CellCycleNoLikely(x)))"]}
{"id": "eqasc_train_7433", "nl": "Cancer is a disease that occurs when mitosis is no longer regulated.", "fol": "", "prediction": ["all x.(Cancer(x) -> (Disease(x) & OccursWhenMitosisNoLikelyRegulated(x)))"]}
{"id": "eqasc_train_7434", "nl": "Cancer is a defect in regulation of the cell cycle.", "fol": "", "prediction": ["all x.(Cancer(x) -> DefectInRegulationOfCellCycle(x))"]}
{"id": "eqasc_train_7435", "nl": "Cancer is a defect that occurs when there is no longer regulation of cycles", "fol": "", "prediction": ["all x.(Cancer(x) -> (DefectOccursWhenRegulationOfCycles(x) & -RegulatesCycles(x)))"]}
{"id": "eqasc_train_7436", "nl": "Cancer can result in death.", "fol": "", "prediction": ["all x.(Cancer(x) -> CanResultInDeath(x))"]}
{"id": "eqasc_train_7437", "nl": "death can result when the cell cycle is no longer regulated", "fol": "", "prediction": ["all x.((CellCycle(x) & -Regulated(x)) -> CellCycleDeath(x))"]}
{"id": "eqasc_train_7438", "nl": "Another critical protein in regulating the cell cycle is the tumor suppressor protein p53 .", "fol": "", "prediction": ["all x.((TumorSuppressorProtein(x) & RegulatesCellCycle(x)) -> p53(x))"]}
{"id": "eqasc_train_7439", "nl": "Cancer is a disease that often results when tumor suppresor proteins, like p53, stop functioning.", "fol": "", "prediction": ["all x.(Cancer(x) -> (Disease(x) & TumorSuppresorProteins(x) & StopFunctioning(x)))"]}
{"id": "eqasc_train_7440", "nl": "Metastatic cancer is cancer that has spread.", "fol": "", "prediction": ["all x.(MetastaticCancer(x) -> CancerSpread(x))"]}
{"id": "eqasc_train_7441", "nl": "a disease that can be metastic occurs when the cell cycle is no longer regulated.", "fol": "", "prediction": ["all x.((Disease(x) & Metastic(x)) -> CellCycleNoLikelyRegulated(x))"]}
{"id": "eqasc_train_7442", "nl": "when the cell cycle becomes unregulated, death can result", "fol": "", "prediction": ["all x.((CellCycle(x) & Unregulated(x)) -> Death(x))"]}
{"id": "eqasc_train_7443", "nl": "And leukemia and lymphoma are forms of cancer.", "fol": "", "prediction": ["(all x.(Leukemia(x) | Lymphoma(x)) -> Cancer(x))"]}
{"id": "eqasc_train_7444", "nl": "Leukemia is a disease that occurs when the cell cycle is no longer regulated.", "fol": "", "prediction": ["all x.(Leukemia(x) -> (Disease(x) & CellCycleNoLikely(x)))"]}
{"id": "eqasc_train_7445", "nl": "Brain tumors are one of the fastest growing cancers today.", "fol": "", "prediction": ["all x.(BrainTumor(x) -> FastestGrowingCancer(x))"]}
{"id": "eqasc_train_7446", "nl": "Brain tumors occur when the cell cycle is no longer regulated.", "fol": "", "prediction": ["all x.((BrainTumor(x) & CellCycleNoLike(x)) -> Occurs(x))"]}
{"id": "eqasc_train_7447", "nl": "Some cancers are inherited.", "fol": "", "prediction": ["exists x.(Cancer(x) & Erased(x))"]}
{"id": "eqasc_train_7448", "nl": "some diseases can be inherited", "fol": "", "prediction": ["exists x.(Disease(x) & CanBeHeritaged(x))"]}
{"id": "eqasc_train_7449", "nl": "Cancer is an emotionally devastating disease.", "fol": "", "prediction": ["all x.(Cancer(x) -> EmotionallyDevastatingDisease(x))"]}
{"id": "eqasc_train_7450", "nl": "an emotionally devastating disease occurs when the cell cycle is no longer regulated", "fol": "", "prediction": ["all x.((Disease(x) & CellCycleNoLikelyRegulated(x)) -> EmotionallyDevastating(x))"]}
{"id": "eqasc_train_7451", "nl": "P16 is a regulator of the cell division cycle.", "fol": "", "prediction": ["all x.(P16(x) -> RegulatorOfCellDividendCycle(x))"]}
{"id": "eqasc_train_7452", "nl": "Cancer is a disease that occurs when genes like P16 stop functioning properly.", "fol": "", "prediction": ["all x.(Cancer(x) -> (Disease(x) & GenesStopFunctioning(x,P16)))"]}
{"id": "eqasc_train_7453", "nl": "Cancer is also caused by a mutation.", "fol": "", "prediction": ["all x.(Cancer(x) -> CausedByMutation(x))"]}
{"id": "eqasc_train_7454", "nl": "when the cell cycle is no longer regulated, this can result in mutation", "fol": "", "prediction": ["all x.((CellCycle(x) & -Regulated(x)) -> CanResultInMutation(x))"]}
{"id": "eqasc_train_7455", "nl": "a measuring cup is used for measuring the volume of substances", "fol": "", "prediction": ["all x y.((MeasuringCup(x) & Substance(y)) -> MeasuresVolume(x,y))"]}
{"id": "eqasc_train_7456", "nl": "Liquids are always measured accurately by volume.", "fol": "", "prediction": ["all x.(Liquid(x) -> MeasuredAccuratelyByVolume(x))"]}
{"id": "eqasc_train_7457", "nl": "Cups are used to note the accurate volume of liquids.", "fol": "", "prediction": ["all x.(Cup(x) -> (NotesAccurateVolumeOfLiquids(x) & Uses(x)))"]}
{"id": "eqasc_train_7458", "nl": "For example, water is a substance.", "fol": "", "prediction": ["all x.(Water(x) -> Substance(x))"]}
{"id": "eqasc_train_7459", "nl": "a measuring cup is used for determining the volume of water", "fol": "", "prediction": ["all x y.((MeasuringCup(x) & WaterVolume(y)) -> Determines(x,y))"]}
{"id": "eqasc_train_7460", "nl": "A measuring cup is used to measure liquid", "fol": "", "prediction": ["all x y.((MeasuringCup(x) & Liquid(y)) -> Measures(x,y))"]}
{"id": "eqasc_train_7461", "nl": "For any substance, the density is a measure of the mass of a unit volume of that substance.", "fol": "", "prediction": ["all x y.((Substance(x) & Mass(y)) -> DensityMeasure(x,y))"]}
{"id": "eqasc_train_7462", "nl": "a measuring cup is used for measuring the density of a substance", "fol": "", "prediction": ["all x y.((MeasuringCup(x) & Substance(y)) -> MeasuresDensity(x,y))"]}
{"id": "eqasc_train_7463", "nl": "Measuring cups accurately measure liquids.", "fol": "", "prediction": ["all x.(MeasuringCup(x) -> MeasuresLiquidsAccurately(x))"]}
{"id": "eqasc_train_7464", "nl": "Sugar is also an organic substance, but it is different than flour and does crystalize.", "fol": "", "prediction": ["(OrganicSubstance(Sugar) & -(OrganicSubstance(Sugar) & Flour(Sugar)) & Crystalizes(Sugar))"]}
{"id": "eqasc_train_7465", "nl": "If you want to measure the volume of sugar, use a measuring cup.", "fol": "", "prediction": ["all x.((MeasuresSugarVolume(x) & UsesMeasuringCup(x)) -> MeasuresSugarVolume(x))"]}
{"id": "eqasc_train_7466", "nl": "Volume is the amount of space an object or substance takes up.", "fol": "", "prediction": ["all x.(Volume(x) -> (TakesUpSpace(x) & ObjectOrSubstance(x)))"]}
{"id": "eqasc_train_7467", "nl": "A measuring cup measures the amount of space a substance takes up.", "fol": "", "prediction": ["all x.(MeasuringCup(x) -> MeasuresSpace(x))"]}
{"id": "eqasc_train_7468", "nl": "For dry ingredients, use a graduate measuring cup set.", "fol": "", "prediction": ["all x.((DryIngredient(x) & GraduateMeasuringCupSet(x)) -> Uses(x,y))"]}
{"id": "eqasc_train_7469", "nl": "graduations are used for measuring volume of substances", "fol": "", "prediction": ["all x.(Graduation(x) -> MeasuresVolumeOfSubstances(x))"]}
{"id": "eqasc_train_7470", "nl": "With a measuring cup, pour different amounts of water into each cup.", "fol": "", "prediction": ["all x y.((MeasuringCup(x) & MeasurementCup(y)) -> PoursDifferentAmountsOfWater(x,y))"]}
{"id": "eqasc_train_7471", "nl": "the volume of water can determine the amount of water", "fol": "", "prediction": ["all x.((VolumeOfWater(x) & WaterAmount(x)) -> DeterminesAmountOfWater(x))"]}
{"id": "eqasc_train_7472", "nl": "How is volume measured Vital capacity is a volume measurement.", "fol": "", "prediction": ["all x.(VolumeMeasured(x) -> VitalCapacity(x))"]}
{"id": "eqasc_train_7473", "nl": "a measuring cup is used for measuring vital capacity ", "fol": "", "prediction": ["all x y.((MeasuringCup(x) & VitalCapacity(y)) -> UsedForMeasuring(x,y))"]}
{"id": "eqasc_train_7474", "nl": "Objects displace their volume in a fluid.", "fol": "", "prediction": ["all x y.((Object(x) & Fluid(y)) -> DisplacesVolumeIn(x,y))"]}
{"id": "eqasc_train_7475", "nl": "a measuring cup is used for measuring the displacement of objects", "fol": "", "prediction": ["all x y.((MeasuringCup(x) & Object(y)) -> MeasuresDisplacement(x,y))"]}
{"id": "eqasc_train_7476", "nl": "Macroevolution occurs over geologic time above the level of the species.", "fol": "", "prediction": ["all x.(Macroevolution(x) -> OccursOverGeologicTimeAboveSpeciesLevel(x))"]}
{"id": "eqasc_train_7477", "nl": "change from one species to another occurs over geologic time", "fol": "", "prediction": ["all x y z.((Species(x) & Species(y) & GeologicTime(z)) -> ChangesOverGeologicTime(x,y,z))"]}
{"id": "eqasc_train_7478", "nl": "Macroevolution occurs very, very slowly above the level of the species.", "fol": "", "prediction": ["all x.(Macroevolution(x) -> (OccursAboveSpecies(x) & VerySlowly(x)))"]}
{"id": "eqasc_train_7479", "nl": "speciation events are an example of something that occurs over geologic time above the level of species.", "fol": "", "prediction": ["all x.(SpeciationEvent(x) -> OccursOverGeologicTimeAboveSpecies(x))"]}
{"id": "eqasc_train_7480", "nl": "the change from one species to another occurs over geologic time above the level of the species", "fol": "", "prediction": ["all x y z.((Species(x) & Species(y) & GeologicTime(z) & ChangeFromTo(x,y,z)) -> OccursOverGeologicTimeAboveLevel(x,y,z))"]}
{"id": "eqasc_train_7481", "nl": "Speciation events occur over geologic time above the level of the species", "fol": "", "prediction": ["all x y.((SpeciationEvent(x) & GeologicTime(y)) -> OccursAboveLevelOfSpecies(x,y))"]}
{"id": "eqasc_train_7482", "nl": "macroevolution occurs over eras above the level of the species", "fol": "", "prediction": ["all x y.((Macroevolution(x) & Era(y)) -> OccursOver(x,y))"]}
{"id": "eqasc_train_7483", "nl": "Macroevolution occurs over geologic time at the level of genus or above.", "fol": "", "prediction": ["all x.(Macroevolution(x) -> (OccursOverGeologicTime(x) & LevelOfGenusOrAboveGenus(x)))"]}
{"id": "eqasc_train_7484", "nl": "Macroevolution requires adding new genes with special capability.", "fol": "", "prediction": ["all x.(Macroevolution(x) -> AddsNewGenesWithSpecialCapabilities(x))"]}
{"id": "eqasc_train_7485", "nl": "adding new genes with special capability occurs over geologic time above the level of the species", "fol": "", "prediction": ["all x y z.((Gene(x) & Gene(y) & SpecialCapability(z) & AddsGenes(x,y,z)) -> OccursOverGeologicTimeAboveSpeciesLevel(x,y,z))"]}
{"id": "eqasc_train_7486", "nl": "All geologic time can be divided into two eons.", "fol": "", "prediction": ["all x.(GeologicTime(x) -> CanBeDividedIntoTwoEons(x))"]}
{"id": "eqasc_train_7487", "nl": "Macroevolution occurs over eons.", "fol": "", "prediction": ["all x.(Macroevolution(x) -> OccursOverEons(x))"]}
{"id": "eqasc_train_7488", "nl": "Macroevolution, speciation in particular, is a major area of interest.", "fol": "", "prediction": ["all x.((Macroevolution(x) & Spectiation(x)) -> MajorAreaOfInterest(x))"]}
{"id": "eqasc_train_7489", "nl": "speciation occurs over geologic time above the level of the species", "fol": "", "prediction": ["all x y.((Species(x) & GeologicTime(y)) -> OccursAboveLevelOfSpecies(x,y))"]}
{"id": "eqasc_train_7490", "nl": "Macroevolution is simply microevolution extrapolated over longer periods of time.", "fol": "", "prediction": ["all x.(Macroevolution(x) -> ExtrapolatedOverLongerPeriods(x))"]}
{"id": "eqasc_train_7491", "nl": "microevolution extrapolated occurs over geologic time above the level of the species", "fol": "", "prediction": ["all x y.((Microevolution(x) & Species(y)) -> ExtrapolatedOverGeologicTime(x,y))"]}
{"id": "eqasc_train_7492", "nl": "Few families rival Piperaceae for difficulties at the species level.", "fol": "", "prediction": ["exists x.(Family(x) & RivalsPiperaceae(x) & ForSpeciesDifficulties(x))"]}
{"id": "eqasc_train_7493", "nl": "Macroevolution can occur in the taxonomical level called family.", "fol": "", "prediction": ["all x.(Macroevolution(x) -> OccursInTaxonomicalLevel(x))"]}
{"id": "eqasc_train_7494", "nl": "if an object in a fluid is more dense than that fluid then that object will sink in that fluid because of gravity", "fol": "", "prediction": ["all x y.((Object(x) & Fluid(y) & MoreDenseThan(x,y)) -> SinksIn(x,y))"]}
{"id": "eqasc_train_7495", "nl": "Waves can be created at the boundary between fluids of different densities.", "fol": "", "prediction": ["all x y.((Waves(x) & Fluid(y) & Density(y)) -> CreatedAtBoundary(x,y))"]}
{"id": "eqasc_train_7496", "nl": "objects will sink between boundaries with different densities due to gravity", "fol": "", "prediction": ["all x y z.((Object(x) & Density(y) & Density(z)) -> SinksBetweenBoundaries(x,y,z))"]}
{"id": "eqasc_train_7497", "nl": "Weight is the force of gravity on an object.", "fol": "", "prediction": ["all x.(Weight(x) -> (ForceOfGravity(x) & OnObject(x)))"]}
{"id": "eqasc_train_7498", "nl": "An object that weighs more than the fluid it's in will cause it to sink", "fol": "", "prediction": ["all x.((Object(x) & WeighsMoreThanFluid(x)) -> CausesSink(x))"]}
{"id": "eqasc_train_7499", "nl": "Normally ice floats, because it is less dense than water.", "fol": "", "prediction": ["all x.((Ice(x) & -Dense(x)) -> Floats(x))"]}
{"id": "eqasc_train_7500", "nl": "ice will not sink in water.", "fol": "", "prediction": ["all x.(Ice(x) -> -SinksInWater(x))"]}
{"id": "eqasc_train_7501", "nl": "Specific gravity is related to density.", "fol": "", "prediction": ["all x.(SpecificGravity(x) -> DensityRelated(x))"]}
{"id": "eqasc_train_7502", "nl": "Density determines whether an object will sink or float.", "fol": "", "prediction": ["all x.(Density(x) -> (Sink(x) | Float(x)))"]}
{"id": "eqasc_train_7503", "nl": "Water is usually the best fluid.", "fol": "", "prediction": ["all x.(Water(x) -> BestFluid(x))"]}
{"id": "eqasc_train_7504", "nl": "if an object in water is more dense than water it will sink because of gravity", "fol": "", "prediction": ["all x y.((Object(x) & Water(y) & MoreDenseThanWater(x,y)) -> SinksAsOfGravity(x,y))"]}
{"id": "eqasc_train_7505", "nl": "Oil is less dense than water.", "fol": "", "prediction": ["all x y.((Oil(x) & Water(y)) -> LessDense(x,y))"]}
{"id": "eqasc_train_7506", "nl": "water sinks in oil because of gravity", "fol": "", "prediction": ["all x y z.((Water(x) & Oil(y) & Gravity(z)) -> SinksIn(x,y,z))"]}
{"id": "eqasc_train_7507", "nl": "Most seeds sink in water.", "fol": "", "prediction": ["all x.(Seed(x) -> SinksInWater(x))"]}
{"id": "eqasc_train_7508", "nl": "Most seeds are more dense than water", "fol": "", "prediction": ["all x.(Seed(x) -> DenseThanWater(x))"]}
{"id": "eqasc_train_7509", "nl": "An object is buoyant when it is less dense than the fluid around it.", "fol": "", "prediction": ["all x.((Object(x) & LessDenseThanFluid(x)) -> Buoyant(x))"]}
{"id": "eqasc_train_7510", "nl": "Decreasing the density of something increases its buoyancy.", "fol": "", "prediction": ["all x.(DecreasingDensityOfSomething(x) -> IncreasesBuoyancy(x))"]}
{"id": "eqasc_train_7511", "nl": "Theme deals with the sinking of the Titanic.", "fol": "", "prediction": ["all x.(Theme(x) -> DealsWithSinkingTitanic(x))"]}
{"id": "eqasc_train_7512", "nl": "The Titanic was more dense than the fluid", "fol": "", "prediction": ["(DenseerTitanic(Titanic) & DenseerTitanic(Titanic))"]}
{"id": "eqasc_train_7513", "nl": "For most purposes, Newton's law of gravity is extremely accurate.", "fol": "", "prediction": ["all x.((NeoconnonLawOfGravity(x) & -ExtremelyAccurate(x)) -> ExtremelyAccurate(x))"]}
{"id": "eqasc_train_7514", "nl": "if an object in a fluid is more dense than that fluid then that object will sink in that fluid because of  Newton's law.", "fol": "", "prediction": ["all x y.((Object(x) & Fluid(y) & MoreDenseThan(x,y)) -> SinksIn(x,y))"]}
{"id": "eqasc_train_7515", "nl": "Immunodeficiency occurs when the immune system is not working properly.", "fol": "", "prediction": ["all x.((ImmuneSystem(x) & -WorkingProperly(x)) -> Immunodeficiency(x))"]}
{"id": "eqasc_train_7516", "nl": "HIV causes the immune system to not work properly", "fol": "", "prediction": ["all x.((HIV(x) & ImmuneSystem(x)) -> -WorksProperly(x))"]}
{"id": "eqasc_train_7517", "nl": "Work items are broken down by year of effort.", "fol": "", "prediction": ["all x.(WorkItem(x) -> BreakedDownByYearOfEffort(x))"]}
{"id": "eqasc_train_7518", "nl": "Immunodeficiency occurs when the immune system is broken down", "fol": "", "prediction": ["all x.(Immunodeficiency(x) -> BreaksDownImmuneSystem(x))"]}
{"id": "eqasc_train_7519", "nl": "Many cancers can cause immunodeficiency.", "fol": "", "prediction": ["exists x.(Cancer(x) & CausesImmunodeficiency(x))"]}
{"id": "eqasc_train_7520", "nl": "Many cancers can cause the immune system to not work properly", "fol": "", "prediction": ["all x.(Cancer(x) -> (CausesImmuneSystemToNotWorkProperly(x) & ManyCancers(x)))"]}
{"id": "eqasc_train_7521", "nl": "Merchandise didn t work, or was broken.", "fol": "", "prediction": ["all x.(Merchandise(x) -> ((-Works(x) | Broken(x))))"]}
{"id": "eqasc_train_7522", "nl": "Immunodeficiency occurs when the immune system is broken", "fol": "", "prediction": ["all x.((ImmuneSystemBroken(x) & BrokenImmuneSystem(x)) -> ImmunodeficiencyOccurrence(x))"]}
{"id": "eqasc_train_7523", "nl": "Malnutrition , particularly with lack of protein , can cause acquired immunodeficiency.", "fol": "", "prediction": ["all x.((Malnutrition(x) & LackOfProtein(x)) -> CanCauseAcquiredImmunodeficiency(x))"]}
{"id": "eqasc_train_7524", "nl": "Something caused by malnutrition occurs when the immune system is not working properly", "fol": "", "prediction": ["all x.((Malnutrition(x) & ImmuneSystem(x) & -WorkingProperly(x)) -> CausedBy(x,malnutrition))"]}
{"id": "eqasc_train_7525", "nl": "People with healthy immune systems usually get well on their own.", "fol": "", "prediction": ["all x.((Person(x) & HealthyImmuneSystem(x)) -> GetsWellOnOwn(x))"]}
{"id": "eqasc_train_7526", "nl": "immunodeficiency causes people to take longer to get well", "fol": "", "prediction": ["all x y.((Immunodeficiency(x) & Person(y)) -> TakesLongerToGetWell(y,x))"]}
{"id": "eqasc_train_7527", "nl": "Treatments are available for many immunodeficiencies.", "fol": "", "prediction": ["all x.(Immunodeficiency(x) -> Treatment(x))"]}
{"id": "eqasc_train_7528", "nl": "Treatments are available when the immune system is not working properly", "fol": "", "prediction": ["all x y.((Treatment(x) & ImmuneSystem(y) & -WorkingProperly(y)) -> Available(x))"]}
{"id": "eqasc_train_7529", "nl": "Iron deficiency causes anemia and it weakens the immune system.", "fol": "", "prediction": ["all x.(IronDeficiency(x) -> (CausesAnemia(x) & WeakensImmuneSystem(x)))"]}
{"id": "eqasc_train_7530", "nl": "low iron can cause immunodeficiency", "fol": "", "prediction": ["all x.(LowIron(x) -> CausesImmunodeficiency(x))"]}
{"id": "eqasc_train_7531", "nl": "Many cancers can cause the immune system to not work properly.", "fol": "", "prediction": ["all x.(Cancer(x) -> CausesImmuneSystemToNotWork(x))"]}
{"id": "eqasc_train_7532", "nl": "heavy rains cause flooding", "fol": "", "prediction": ["all x.(HeavyRain(x) -> CausesFlooding(x))"]}
{"id": "eqasc_train_7533", "nl": "Drought causes the water table to drop, heavy rains cause it to rise.", "fol": "", "prediction": ["all x y.((Drought(x) & HeavyRain(y)) -> (CausesWaterTableToDrop(x) & CausesWaterTableToRise(y)))"]}
{"id": "eqasc_train_7534", "nl": "Water rises with flooding.", "fol": "", "prediction": ["all x.((Water(x) & Flooding(x)) -> RisesWith(x,y))"]}
{"id": "eqasc_train_7535", "nl": "Floods can destroy property and kill people.", "fol": "", "prediction": ["all x.(Flood(x) -> (DestroyProperty(x) & KillPeople(x)))"]}
{"id": "eqasc_train_7536", "nl": "heavy rain can kill people", "fol": "", "prediction": ["all x.(HeavyRain(x) -> KillsPeople(x))"]}
{"id": "eqasc_train_7537", "nl": "Fifty to 100 homes are either flooded or in danger of flooding.", "fol": "", "prediction": ["all x.(Home(x) -> (Flooded(x) | InDangerOfFlooding(x)))"]}
{"id": "eqasc_train_7538", "nl": "Heavy rains damage homes. ", "fol": "", "prediction": ["all x.(HeavyRain(x) -> DamagesHomes(x))"]}
{"id": "eqasc_train_7539", "nl": "Flood waters damage 5,000 homes and buildings.", "fol": "", "prediction": ["all x.(FloodWater(x) -> (DamagesHomes(x) & DamagesBuildings(x)))"]}
{"id": "eqasc_train_7540", "nl": "heavy rains can damage homes", "fol": "", "prediction": ["all x y.((HeavyRain(x) & Home(y)) -> Damages(x,y))"]}
{"id": "eqasc_train_7541", "nl": "heavy rains cause deadly and devastating events", "fol": "", "prediction": ["all x.(HeavyRain(x) -> (CausesDeadlyEvents(x) & CausesDevastatingEvents(x)))"]}
{"id": "eqasc_train_7542", "nl": "Hurricane rains can cause landslides and flash floods.", "fol": "", "prediction": ["all x.(HurricaneRain(x) -> (CausesLandslides(x) & CausesFlashFloods(x)))"]}
{"id": "eqasc_train_7543", "nl": "flooding can cause landslides", "fol": "", "prediction": ["all x.(Flooding(x) -> CausesLandslides(x))"]}
{"id": "eqasc_train_7544", "nl": "Heavy rains can cause erosion.", "fol": "", "prediction": ["all x.(HeavyRain(x) -> CausesErosion(x))"]}
{"id": "eqasc_train_7545", "nl": "Flooding can cause erosion.", "fol": "", "prediction": ["all x.(Flooding(x) -> CausesErosion(x))"]}
{"id": "eqasc_train_7546", "nl": "Flood waters rise rapidly.", "fol": "", "prediction": ["all x.(FloodWater(x) -> RisesRapidly(x))"]}
{"id": "eqasc_train_7547", "nl": "heavy rains cause waters to rise rapidly", "fol": "", "prediction": ["all x y.((HeavyRain(x) & Water(y)) -> CausesRiseRapidly(x,y))"]}
{"id": "eqasc_train_7548", "nl": "Some hurricanes produce torrential rains.", "fol": "", "prediction": ["exists x.(Hurricane(x) & ProducesTorrentialRain(x))"]}
{"id": "eqasc_train_7549", "nl": "hurricanes can cause flooding", "fol": "", "prediction": ["all x.(Hurricane(x) -> (CausesFlooding(x) & CausesFlooding(x)))"]}
{"id": "eqasc_train_7550", "nl": "heavy rains are deadly", "fol": "", "prediction": ["all x.(HeavyRain(x) -> Lethal(x))"]}
{"id": "eqasc_train_7551", "nl": "heavy rains can cause that which is deadly and devastating.", "fol": "", "prediction": ["all x.(HeavyRain(x) -> (CausesDeadly(x) & Devastating(x)))"]}
{"id": "eqasc_train_7552", "nl": "Heavy rain can cause erosion and landslides.", "fol": "", "prediction": ["all x.(HeavyRain(x) -> (CausesErosion(x) & CausesLandslides(x)))"]}
{"id": "eqasc_train_7553", "nl": "Flood waters commonly contain high levels of bacteria.", "fol": "", "prediction": ["all x.(FloodWater(x) -> HighLevelsOfBacteria(x))"]}
{"id": "eqasc_train_7554", "nl": "Heavy rains can cause high levels of bacteria", "fol": "", "prediction": ["all x.(HeavyRain(x) -> HighLevelsOfBacteria(x))"]}
{"id": "eqasc_train_7555", "nl": "landslides are caused by rain", "fol": "", "prediction": ["all x.(Landslide(x) -> CausedByRain(x))"]}
{"id": "eqasc_train_7556", "nl": "Flooding causes much of the hurricane damage.", "fol": "", "prediction": ["all x.(Flooding(x) -> CausesMuchOfHurricaneDamage(x))"]}
{"id": "eqasc_train_7557", "nl": "Heavy rains cause much of the hurricane damage", "fol": "", "prediction": ["all x y.((HeavyRain(x) & Hurricane(y)) -> CausesMuchOfDamage(x,y))"]}
{"id": "eqasc_train_7558", "nl": "Flooding is problematic because it causes erosion problems.", "fol": "", "prediction": ["all x.(Flooding(x) -> (CausesErosionProblems(x) & Problematic(x)))"]}
{"id": "eqasc_train_7559", "nl": "heavy rains cause erosion", "fol": "", "prediction": ["all x.(HeavyRain(x) -> CausesErosion(x))"]}
{"id": "eqasc_train_7560", "nl": "Organisms that live in marine biomes must be adapted to the salt in the water.", "fol": "", "prediction": ["all x.((Organism(x) & LivesInMarineBiome(x)) -> AdaptedToSaltInWater(x))"]}
{"id": "eqasc_train_7561", "nl": "Organisms that live in marine biomes must be adapted to the sodium in the water.", "fol": "", "prediction": ["all x.((Organism(x) & LivesInMarineBiome(x)) -> AdaptedToSodiumInWater(x))"]}
{"id": "eqasc_train_7562", "nl": "Organisms that live in marine biomes must be adapted to salinity.", "fol": "", "prediction": ["all x.((Organism(x) & LivesInMarineBiome(x)) -> AdaptedToSalinity(x))"]}
{"id": "eqasc_train_7563", "nl": "Salt water is more buoyant.", "fol": "", "prediction": ["all x.(SaltWater(x) -> MoreBuoyant(x))"]}
{"id": "eqasc_train_7564", "nl": "organisms that live in marine biomes must adapt to buoyancy", "fol": "", "prediction": ["all x.((Organism(x) & LivesInMarineBiomes(x)) -> MustAdaptToBuoyancy(x))"]}
{"id": "eqasc_train_7565", "nl": "Marine life is equally diverse and abundant, from tiny plankton to blue whales.", "fol": "", "prediction": ["all x.(MarineLife(x) -> (Diverse(x) & Abundant(x) & (TinyPlankton(x) | BlueWhale(x))))"]}
{"id": "eqasc_train_7566", "nl": "blue whales must be adapted to the salt in the water.", "fol": "", "prediction": ["all x.(BlueWhale(x) -> MustAdaptToSaltInWater(x))"]}
{"id": "eqasc_train_7567", "nl": "Seals live in salt water.", "fol": "", "prediction": ["all x.(Seal(x) -> LivesInSaltWater(x))"]}
{"id": "eqasc_train_7568", "nl": "Seals must be adapted to salt water", "fol": "", "prediction": ["all x.(Seal(x) -> MustAdaptToSaltWater(x))"]}
{"id": "eqasc_train_7569", "nl": "Some familiar examples of biomes include tundra, desert, chaparral, and open ocean.", "fol": "", "prediction": ["(FamiliarBiomeExample(x) & Tundra(x) & Desert(x) & Chaparral(x) & OpenOcean(x))"]}
{"id": "eqasc_train_7570", "nl": "Organisms that live in the ocean must be adapted to the salt water.", "fol": "", "prediction": ["all x.((Organism(x) & LivesInOcean(x)) -> AdaptedToSaltWater(x))"]}
{"id": "eqasc_train_7571", "nl": "Sodium chloride or common salt is the chemical compound NaCl .", "fol": "", "prediction": ["all x.(SodiumChloride(x) | CommonSalt(x)) -> ChemicalCompoundNaCl(x))"]}
{"id": "eqasc_train_7572", "nl": "Organisms living in marine biomes must be adapted the chemical compound NaCl in the water", "fol": "", "prediction": ["all x y.((Organism(x) & MarineBiome(y) & LivingIn(x,y)) -> AdaptsChemicalCompoundNaCl(x))"]}
{"id": "eqasc_train_7573", "nl": "Tiny marine organisms are thus captured by the baleen, and then swallowed by the whale.", "fol": "", "prediction": ["all x y z.((TinyMarineOrganism(x) & Baleen(y) & Whale(z)) -> (CapturedBy(x,y) & SwallowedBy(x,z)))"]}
{"id": "eqasc_train_7574", "nl": "whales must be adapted to the salt in the water", "fol": "", "prediction": ["all x.(Whale(x) -> (AdaptedToSalt(x) & InWater(x)))"]}
{"id": "eqasc_train_7575", "nl": "Mainly marine, some crabs live in fresh water or on land.", "fol": "", "prediction": ["exists x.(Crab(x) & (MainlyMarine(x) | LivesInFreshWater(x) | LivesOnLand(x)))"]}
{"id": "eqasc_train_7576", "nl": "some crabs are adapted to salt water", "fol": "", "prediction": ["exists x.(Crab(x) & AdaptedToSaltWater(x))"]}
{"id": "eqasc_train_7577", "nl": "Marine biology is the study of organisms that happen to be marine.", "fol": "", "prediction": ["all x.(MarineBiology(x) -> (StudiesOrganisms(x) & HappensToBeMarine(x)))"]}
{"id": "eqasc_train_7578", "nl": "marine biology studies creatures that live in water biomes", "fol": "", "prediction": ["all x y.((MarineBiology(x) & Creature(y) & LivesInWaterBiomes(y)) -> Studies(x,y))"]}
{"id": "eqasc_train_7579", "nl": "Another animal that lives within the Marine Biome is a sea tiger.", "fol": "", "prediction": ["all x.((Animal(x) & LivesInMarineBiome(x)) -> SeaTiger(x))"]}
{"id": "eqasc_train_7580", "nl": "Sea tigers must adapt to the salt in the water.", "fol": "", "prediction": ["all x.(SeaTiger(x) -> AdaptsToSalt(x))"]}
{"id": "eqasc_train_7581", "nl": "Organisms that live in estuaries must be adapted to the salt in the water.", "fol": "", "prediction": ["all x.((Organism(x) & LivesInEstuaries(x)) -> AdaptedToSaltInWater(x))"]}
{"id": "eqasc_train_7582", "nl": "An ocean is a salt water habitat.", "fol": "", "prediction": ["all x.(Ocean(x) -> SaltWaterHabitat(x))"]}
{"id": "eqasc_train_7583", "nl": "organisms that live in marine biomes must be adapted to oceans", "fol": "", "prediction": ["all x.((Organism(x) & LivesInMarineBiomes(x)) -> AdaptedToOceans(x))"]}
{"id": "eqasc_train_7584", "nl": "Most of the water on the planet is salt water in the oceans.", "fol": "", "prediction": ["all x.(Water(x) -> (SaltWater(x) & InOceans(x)))"]}
{"id": "eqasc_train_7585", "nl": "Organisms that live in marine biomes must be adapted to most of the water on the planet.", "fol": "", "prediction": ["all x.((Organism(x) & LivesInMarineBiome(x)) -> AdaptedToMostOfWater(x))"]}
{"id": "eqasc_train_7586", "nl": "Living beings that live in marine biomes must be adapted to the salt in the water.", "fol": "", "prediction": ["all x.((LivingBeing(x) & LivesInMarineBiome(x)) -> AdaptedToSaltInWater(x))"]}
{"id": "eqasc_train_7587", "nl": "Salinity is a measure of how much salt is in the water.", "fol": "", "prediction": ["all x.(Salinity(x) -> MeasuresSaltInWater(x))"]}
{"id": "eqasc_train_7588", "nl": "Organisms that live in marine biomes must be adapted to the salinity", "fol": "", "prediction": ["all x.((Organism(x) & LivesInMarineBiome(x)) -> MustAdaptToSalinity(x))"]}
{"id": "eqasc_train_7589", "nl": "Climate influences plant growth, biodiversity, and adaptations of land organisms.", "fol": "", "prediction": ["all x.(Climate(x) -> (InfluencesPlantGrowth(x) & InfluencesBiodiversity(x) & InfluencesAdaptationsOfLandOrganisms(x)))"]}
{"id": "eqasc_train_7590", "nl": "climate influences the ability of organisms to micro-evolve to their environment.", "fol": "", "prediction": ["all x y.((Climate(x) & Organism(y)) -> InfluencesMicroEvolvement(x,y))"]}
{"id": "eqasc_train_7591", "nl": "Aquatic biodiversity has declined.", "fol": "", "prediction": ["all x.(AquaticBiodiversity(x) -> Decreased(x))"]}
{"id": "eqasc_train_7592", "nl": "Climate influences plants in aquatic environments", "fol": "", "prediction": ["all x y.((Climate(x) & Plant(y) & AquaticEnvironment(z)) -> Influences(x,y,z))"]}
{"id": "eqasc_train_7593", "nl": "climate influences bush growth", "fol": "", "prediction": ["all x y.((Climate(x) & Bush(y)) -> Influences(x,y))"]}
{"id": "eqasc_train_7594", "nl": "Climates are determined mostly by temperature.", "fol": "", "prediction": ["all x.(Climate(x) -> DeterminedByTemperature(x))"]}
{"id": "eqasc_train_7595", "nl": "Temperature influences plant growth, biodiversity, and adaptions of land organisms.", "fol": "", "prediction": ["all x.(Temperature(x) -> (InfluencesPlantGrowth(x) & InfluencesBiodiversity(x) & InfluencesAdaptions(x)))"]}
{"id": "eqasc_train_7596", "nl": "temperature mostly influences plant growth, biodiversity, and adaptations of land organisms", "fol": "", "prediction": ["all x.(Temperature(x) -> (InfluencesPlantGrowth(x) & InfluencesBiodiversity(x) & InfluencesAdaptationsOfLandOrganisms(x)))"]}
{"id": "eqasc_train_7597", "nl": "Global warming is a part of climate change.", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> PartOfClimateChange(x))"]}
{"id": "eqasc_train_7598", "nl": "Global warming influences plant growth, biodiversity, and adaptations of land organisms.", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> (InfluencesPlantGrowth(x) & InfluencesBiodiversity(x) & InfluencesAdaptationsOfLandOrganisms(x)))"]}
{"id": "eqasc_train_7599", "nl": "By contrast, climate is the average course of the weather at a place over a period of years.", "fol": "", "prediction": ["all x y.((Climate(x) & Place(y)) -> AverageWeatherCourse(x,y))"]}
{"id": "eqasc_train_7600", "nl": "weather over years influences plant growth, biodiversity, and adaptations of land organisms", "fol": "", "prediction": ["all x.(Weather(x) -> (InfluencesPlantGrowth(x) & InfluencesBiodiversity(x) & InfluencesAdaptationsOfLandOrganisms(x)))"]}
{"id": "eqasc_train_7601", "nl": "Biodiversity also increases the beauty of the planet.", "fol": "", "prediction": ["all x.(Biodiversity(x) -> IncreasesBeautyOfPlanet(x))"]}
{"id": "eqasc_train_7602", "nl": "climate influences the beauty of the planet", "fol": "", "prediction": ["all x y.((Climate(x) & Planet(y)) -> InfluencesBeauty(x,y))"]}
{"id": "eqasc_train_7603", "nl": "Desert animals are adapted to the vegetation and the climate.", "fol": "", "prediction": ["all x.(DesertAnimal(x) -> (AdaptedToVegetation(x) & AdaptedToClimate(x)))"]}
{"id": "eqasc_train_7604", "nl": "Desert animals adjust to dry climate", "fol": "", "prediction": ["all x y.((DesertAnimal(x) & DryClimate(y)) -> AdjustsTo(x,y))"]}
{"id": "eqasc_train_7605", "nl": "Forest communities influence their climate and their soil.", "fol": "", "prediction": ["all x.(ForestCommunity(x) -> (InfluencesClimate(x) & InfluencesSoil(x)))"]}
{"id": "eqasc_train_7606", "nl": "Forest communities influence plant growth, biodiversity, and adaptations of land organisms", "fol": "", "prediction": ["all x y z.((ForestCommunity(x) & PlantGrowth(y) & Biodiversity(z) & LandOrganism(w)) -> InfluencesAndAdaptations(x,y,z,w))"]}
{"id": "eqasc_train_7607", "nl": "Climate Forests stabilize climate.", "fol": "", "prediction": ["all x.(ClimateForest(x) -> StabilizesClimate(x))"]}
{"id": "eqasc_train_7608", "nl": "Forests stabilize what influences plant growth.", "fol": "", "prediction": ["all x.(Forest(x) -> (Stabilizes(x) & InfluencesPlantGrowth(x)))"]}
{"id": "eqasc_train_7609", "nl": "Most reptiles have good eyesight and a keen sense of smell.", "fol": "", "prediction": ["all x.(Reptile(x) -> (GoodEyesight(x) & KeenSenseOfSmell(x)))"]}
{"id": "eqasc_train_7610", "nl": "All lizards are reptiles.", "fol": "", "prediction": ["all x.(Lizard(x) -> Reptile(x))"]}
{"id": "eqasc_train_7611", "nl": "some lizards have good eyesight and a keen sense of smell.", "fol": "", "prediction": ["exists x.(Lizard(x) & GoodEyesight(x) & KeenSenseOfSmell(x))"]}
{"id": "eqasc_train_7612", "nl": "Lizards have good eyesight and a keen sense of smell.", "fol": "", "prediction": ["all x.(Lizard(x) -> (GoodEyesight(x) & KeenSenseOfSmell(x)))"]}
{"id": "eqasc_train_7613", "nl": "If someone has bad eyesight,the sense of smell is heightened.", "fol": "", "prediction": ["all x.(BadEyesight(x) -> SensationOfSmell(x))"]}
{"id": "eqasc_train_7614", "nl": "If most reptiles have bad eyesight, the ability to smell is heightened", "fol": "", "prediction": ["all x.((Reptile(x) & BadEyesight(x)) -> SmellsHigher(x))"]}
{"id": "eqasc_train_7615", "nl": "Crocodiles, snakes, and lizards are all types of reptiles.", "fol": "", "prediction": ["all x.((Crocodile(x) | Snake(x) | Lizard(x)) -> Reptile(x))"]}
{"id": "eqasc_train_7616", "nl": "most lizards have good eyesight and a keen sense of smell", "fol": "", "prediction": ["all x.(Lizard(x) -> (GoodEyesight(x) & KeenSenseOfSmell(x)))"]}
{"id": "eqasc_train_7617", "nl": "Geckos are, in fact, reptiles.", "fol": "", "prediction": ["all x.(Geckos(x) -> Reptile(x))"]}
{"id": "eqasc_train_7618", "nl": "Geckos have good eyesight and a keen sense of smell", "fol": "", "prediction": ["all x.(Geckos(x) -> (GoodEyesight(x) & KeenSenseOfSmell(x)))"]}
{"id": "eqasc_train_7619", "nl": "Reptiles include crocodiles.", "fol": "", "prediction": ["all x.(Reptile(x) -> (IncludesCrocodiles(x)))"]}
{"id": "eqasc_train_7620", "nl": "crocodiles have good eyesight and a keen sense of smell", "fol": "", "prediction": ["all x.(Crocodile(x) -> (GoodEyesight(x) & KeenSenseOfSmell(x)))"]}
{"id": "eqasc_train_7621", "nl": "Olfaction is the sense of smell and gustation is the sense of taste.", "fol": "", "prediction": ["all x y.((Olfaction(x) & Gummentation(y)) -> (SenseOfSmell(x) & TasteOfTaste(y)))"]}
{"id": "eqasc_train_7622", "nl": "Most reptiles have good olfaction.", "fol": "", "prediction": ["all x.(Reptile(x) -> GoodOlfaction(x))"]}
{"id": "eqasc_train_7623", "nl": "Geckos have good eyesight.", "fol": "", "prediction": ["all x.(Geckos(x) -> GoodEyesight(x))"]}
{"id": "eqasc_train_7624", "nl": "Snakes are limbless reptiles.", "fol": "", "prediction": ["all x.(Snake(x) -> LunglessReptile(x))"]}
{"id": "eqasc_train_7625", "nl": "most snakes have good eyesight and a keen sense of smell", "fol": "", "prediction": ["all x.(Snake(x) -> (GoodEyesight(x) & KeenSenseOfSmell(x)))"]}
{"id": "eqasc_train_7626", "nl": "Bats have good eyesight and rely on vision for long-distance orientation.", "fol": "", "prediction": ["all x.(Bat(x) -> (GoodEyesight(x) & ReliesOnVision(x)))"]}
{"id": "eqasc_train_7627", "nl": "Most reptiles rely on vision for long-distance orientation", "fol": "", "prediction": ["all x.(Reptile(x) -> (ReliesOnVision(x) & LongDistanceOrientation(x)))"]}
{"id": "eqasc_train_7628", "nl": "Reptilia contains over 7800 entries on numerous species of reptiles.", "fol": "", "prediction": ["all x.(Reptilia(x) -> ContainsOver7800Entries(x))"]}
{"id": "eqasc_train_7629", "nl": "Most animals in the class reptilia have good eyesight and a keen sense of smell.", "fol": "", "prediction": ["all x.((Animal(x) & Reptilia(x)) -> (GoodEyesight(x) & KeenSenseOfSmell(x)))"]}
{"id": "eqasc_train_7630", "nl": "the moon revolving around the Earth causes the phases of the moon", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y) & RevolvingAround(x,y)) -> CausesPhasesOfMoon(x,y))"]}
{"id": "eqasc_train_7631", "nl": "Phases of the Moon are caused by a shadow from the Earth.", "fol": "", "prediction": ["all x.(MoonPhase(x) -> CausedByShadowFromEarth(x))"]}
{"id": "eqasc_train_7632", "nl": "The Earth gets between the sun and moon and creates a shadow.", "fol": "", "prediction": ["all x y z.((Earth(x) & Sun(y) & Moon(z)) -> (GivesBetween(x,y,z) & CreatesShadow(x)))"]}
{"id": "eqasc_train_7633", "nl": "Phases of the moon, however, depend on the relative positions of the Earth, moon, and Sun.", "fol": "", "prediction": ["all x.(Moon(x) -> (RelativePositions(x,Earth) & RelativePositions(x,Moon) & RelativePositions(x,Sun)))"]}
{"id": "eqasc_train_7634", "nl": "moon phases depend on the sun", "fol": "", "prediction": ["all x y.((MoonPhase(x) & Sun(y)) -> DependsOn(x,y))"]}
{"id": "eqasc_train_7635", "nl": "Tides are cyclical and closely follow the phases of the moon.", "fol": "", "prediction": ["all x.(Tide(x) -> (Cyclic(x) & FollowsPhasesOfMoon(x)))"]}
{"id": "eqasc_train_7636", "nl": "Tides occur in water as the moon revolves around Earth.", "fol": "", "prediction": ["all x y.((Tide(x) & Moon(y) & Earth(y)) -> OccursInWater(x,y))"]}
{"id": "eqasc_train_7637", "nl": "Tides also calculates the moon phases and the tide's coefficients.", "fol": "", "prediction": ["all x.(Tide(x) -> (CalculatesMoonPhases(x) & CalculatesTideCoefficients(x)))"]}
{"id": "eqasc_train_7638", "nl": "tides can be calculated using the moon revolving around the earth", "fol": "", "prediction": ["all x y z.((Moon(x) & Earth(y) & Moon(z)) -> RevolvingAround(x,z))"]}
{"id": "eqasc_train_7639", "nl": "Earth revolves around sun, moon around the earth.", "fol": "", "prediction": ["(all x.(Earth(x) -> RevolvesAround(x,Sun)) & all y.(Moon(y) -> RevolvesAround(y,Earth)))"]}
{"id": "eqasc_train_7640", "nl": "The moon rotates around the earth", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> RotatesAround(x,y))"]}
{"id": "eqasc_train_7641", "nl": "Phases of the Moon are caused by differing amounts of light reflected from the Earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> CausedByDifferentLight(x,y))"]}
{"id": "eqasc_train_7642", "nl": "The moon revolving around the earth causes different amounts of light to reflect off of it.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> CausesDifferentLightReflectsOff(x,y))"]}
{"id": "eqasc_train_7643", "nl": "Phases refer to the different shapes the moon appears from the earth.", "fol": "", "prediction": ["all x y.((Phase(x) & Moon(y)) -> DifferentShapesFromEarth(x,y))"]}
{"id": "eqasc_train_7644", "nl": "the moon revolving around Earth causes different shapes to appear", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y) & RevolvingAround(x,y)) -> CausesDifferentShapesToAppear(x,y))"]}
{"id": "eqasc_train_7645", "nl": "Lets start our discussion of the Moon's phases with the New Moon phase.", "fol": "", "prediction": ["all x.((Moon(x) & NewMoon(x)) -> DiscussionOfPhases(x))"]}
{"id": "eqasc_train_7646", "nl": "the moon revolving around the Earth causes the new moon", "fol": "", "prediction": ["all x y z.((Moon(x) & Earth(y) & Moon(z) & RevolvingAround(x,z)) -> CausesNewMoon(x,y))"]}
{"id": "eqasc_train_7647", "nl": "a ship is used for moving people across bodies of water", "fol": "", "prediction": ["all x y.((Ship(x) & Person(y)) -> MovesAcrossBodyOfWater(x,y))"]}
{"id": "eqasc_train_7648", "nl": "An ocean is a large body of water.", "fol": "", "prediction": ["all x.(Ocean(x) -> LargeBodyOfWater(x))"]}
{"id": "eqasc_train_7649", "nl": "Ships are used to move people across oceans", "fol": "", "prediction": ["all x y z.((Ship(x) & Person(y) & Ocean(z)) -> MovesAcross(x,y,z))"]}
{"id": "eqasc_train_7650", "nl": "Boats can transport people or goods across the water.", "fol": "", "prediction": ["all x.(Boat(x) -> (TransportsPeople(x) | TransportsGoods(x)))"]}
{"id": "eqasc_train_7651", "nl": "Ships transport people and goods", "fol": "", "prediction": ["all x y z.((Ship(x) & Person(y) & Good(z)) -> Transports(x,y,z))"]}
{"id": "eqasc_train_7652", "nl": "a ship is used for moving people across oceans", "fol": "", "prediction": ["all x y.((Ship(x) & Ocean(y)) -> UsedForMovingPeople(x,y))"]}
{"id": "eqasc_train_7653", "nl": "A ship is used to move people across an ocean.", "fol": "", "prediction": ["all x y.((Ship(x) & Ocean(y)) -> MovesPeopleAcross(x,y))"]}
{"id": "eqasc_train_7654", "nl": "Abundant waters call for stories of travel and trade, and protecting ships from dangers.", "fol": "", "prediction": ["all x.((Water(x) & Abundant(x)) -> (CallsForTravel(x) & CallsForTrade(x) & ProtectsShipsFromDangers(x)))"]}
{"id": "eqasc_train_7655", "nl": "Ships are used for travel and trade.", "fol": "", "prediction": ["all x.(Ship(x) -> (UsedForTravel(x) & UsedForTrade(x)))"]}
{"id": "eqasc_train_7656", "nl": "Transportation is the moving of people or things from place to place.", "fol": "", "prediction": ["all x y.((Transportation(x) & Person(y)) | Things(y)) -> MovesFromPlaceToPlace(x,y))"]}
{"id": "eqasc_train_7657", "nl": "A ship is a form of water transportation.", "fol": "", "prediction": ["all x.(Ship(x) -> WaterTransportation(x))"]}
{"id": "eqasc_train_7658", "nl": "Commonly, a bridge is a structure built to cross a body of water.", "fol": "", "prediction": ["all x.(Bridge(x) -> (Structure(x) & BuiltToCrossBodyOfWater(x)))"]}
{"id": "eqasc_train_7659", "nl": "For short distances, bridges can replace ships.", "fol": "", "prediction": ["all x.((Bridge(x) & ShortDistance(x)) -> ReplacesShip(x))"]}
{"id": "eqasc_train_7660", "nl": "Hurricanes and treacherous shipping lanes frequently scattered treasures and crews across the reef.", "fol": "", "prediction": ["all x y.((Hurricane(x) & ShippingLanes(y) & Reef(y)) -> (SpatchesTreasures(x,y) & ScattersCrews(x,y)))"]}
{"id": "eqasc_train_7661", "nl": "moving people across bodies of waters requires avoiding hurricanes", "fol": "", "prediction": ["all x y.((MovingPeopleAcrossBodyOfWaters(x) & Hurricane(y)) -> Avoids(x,y))"]}
{"id": "eqasc_train_7662", "nl": "Currents flow across the large bodies of water from continent to continent.", "fol": "", "prediction": ["all x y.((Current(x) & LargeBodyOfWater(y)) -> FlowsAcross(x,y))"]}
{"id": "eqasc_train_7663", "nl": "A ship is used to move people from continent to continent.", "fol": "", "prediction": ["all x y.((Ship(x) & Person(y)) -> MovesFromContinentToContinent(x,y))"]}
{"id": "eqasc_train_7664", "nl": "freezing means changing from a liquid into a solid by reducing heat energy", "fol": "", "prediction": ["all x y.((Freezing(x) & Liquid(y) & Solid(y)) -> (ReducesHeatEnergy(x,y) & ChangesFromTo(x,y)))"]}
{"id": "eqasc_train_7665", "nl": "Liquids freeze when they change to the solid state.", "fol": "", "prediction": ["all x.((Liquid(x) & ChangeToSolidState(x)) -> Freezes(x))"]}
{"id": "eqasc_train_7666", "nl": "a liquid is frozen when it becomes a solid", "fol": "", "prediction": ["all x.((Liquid(x) & Solid(x)) -> Frozen(x))"]}
{"id": "eqasc_train_7667", "nl": "Ice is a cold frozen liquid.", "fol": "", "prediction": ["all x.(Ice(x) -> ColdFrozenLiquid(x))"]}
{"id": "eqasc_train_7668", "nl": "Ice is made from reducing heat energy", "fol": "", "prediction": ["all x.(Ice(x) -> ReducesHeatEnergy(x))"]}
{"id": "eqasc_train_7669", "nl": "Freezing is changing a liquid to a solid by reducing temperature.", "fol": "", "prediction": ["all x y.((Freezing(x) & Liquid(y) & Solid(y)) -> Changes(x,y))"]}
{"id": "eqasc_train_7670", "nl": "Solid ice is melted into liquid water.", "fol": "", "prediction": ["all x.((SolidIce(x) & MeltedIntoLiquidWater(x)) -> MeltsInto(x,liquidWater))"]}
{"id": "eqasc_train_7671", "nl": "Reducing heat energy turns water into ice. ", "fol": "", "prediction": ["all x.(ReducingHeatEnergy(x) -> TurnsWaterIntoIce(x))"]}
{"id": "eqasc_train_7672", "nl": "Liquid water holds a huge amount of heat energy and resists changes of state to solid or gas.", "fol": "", "prediction": ["all x.(LiquidWater(x) -> (HoldsHeatEnergy(x) & ResistsStateChange(x)))"]}
{"id": "eqasc_train_7673", "nl": "The more heat energy gets released, the faster liquid turns freezes into a solid.", "fol": "", "prediction": ["all x.((HeatEnergy(x) & Liquid(x)) -> (Faster(x) & TurnsIntoSolid(x)))"]}
{"id": "eqasc_train_7674", "nl": "Water, heat, or freezing cold can damage items.", "fol": "", "prediction": ["all x.((Water(x) | Heat(x) | FreezingCold(x)) -> DamagesItems(x))"]}
{"id": "eqasc_train_7675", "nl": "reducing heat energy can damage an item", "fol": "", "prediction": ["all x y.((ReducingHeatEnergy(x) & Item(y)) -> Damages(x,y))"]}
{"id": "eqasc_train_7676", "nl": "cooled water turns from a liquid into a solid", "fol": "", "prediction": ["all x y.((CooledWater(x) & Liquid(y)) -> TurnsIntoSolid(x,y))"]}
{"id": "eqasc_train_7677", "nl": "When ice freezes, it releases heat energy into the environment.", "fol": "", "prediction": ["all x.((Ice(x) & Freezes(x)) -> ReleasesHeatEnergy(x))"]}
{"id": "eqasc_train_7678", "nl": "Water becomes ice by losing heat energy ", "fol": "", "prediction": ["all x.((Water(x) & LosesHeatEnergy(x)) -> Ice(x))"]}
{"id": "eqasc_train_7679", "nl": "Frostbite is the freezing of body parts.", "fol": "", "prediction": ["all x.(Frostbite(x) -> FreezingOfBodyParts(x))"]}
{"id": "eqasc_train_7680", "nl": "Reducing heat energy of body parts results in frostbite.", "fol": "", "prediction": ["all x.((ReducesHeatEnergy(x) & BodyParts(x)) -> Frostbite(x))"]}
{"id": "eqasc_train_7681", "nl": "Solidification , or freezing, occurs when a liquid turns into a solid.", "fol": "", "prediction": ["all x.((Liquid(x) & Solid(x)) -> SolidificationOrFreezing(x))"]}
{"id": "eqasc_train_7682", "nl": "changing from a liquid into a solid by reducing heat energy solidifies", "fol": "", "prediction": ["all x y.((Liquid(x) & Solid(y)) -> (ReducesHeatEnergy(x,y) & Solidifies(x,y)))"]}
{"id": "eqasc_train_7683", "nl": "Ice freezing from liquid to solid releases heat.", "fol": "", "prediction": ["all x.((IceFreezing(x) & Liquid(x) & Solid(x)) -> ReleasesHeat(x))"]}
{"id": "eqasc_train_7684", "nl": "when an electrical circuit is working properly , electrical current runs through that circuit", "fol": "", "prediction": ["all x y z.((ElectricalCircuit(x) & ElectricalCircuit(y) & WorkingProperly(x) & ElectricalCurrent(z)) -> RunsThrough(x,y,z))"]}
{"id": "eqasc_train_7685", "nl": "An electric circuit is the path of an electric current.", "fol": "", "prediction": ["all x.(ElectricCircuit(x) -> PathOfElectricCurrent(x))"]}
{"id": "eqasc_train_7686", "nl": "when an electrical circuit has a path it can work properly", "fol": "", "prediction": ["all x y.((ElectricalCircuit(x) & Path(y)) -> CanWorkProperly(x,y))"]}
{"id": "eqasc_train_7687", "nl": "Currently computers run on electric circuits and wires.", "fol": "", "prediction": ["all x.(Computer(x) -> (RunsOnElectricCircuits(x) & RunsOnWires(x)))"]}
{"id": "eqasc_train_7688", "nl": "When an electrical circuit is working properly, computers run.", "fol": "", "prediction": ["all x.((ElectricalCircuit(x) & WorkingProperly(x)) -> ComputerRuns(x))"]}
{"id": "eqasc_train_7689", "nl": "when a circuit is working properly, a flow of electrons runs through that circuit", "fol": "", "prediction": ["all x y.((Circuit(x) & WorkingProperly(x)) -> (FlowOfElectrons(y) & RunsThrough(y,x)))"]}
{"id": "eqasc_train_7690", "nl": "Electricity travels in a path called a circuit.", "fol": "", "prediction": ["all x.(Electricity(x) -> TravelsInCircuit(x))"]}
{"id": "eqasc_train_7691", "nl": "Currents run though a circuit", "fol": "", "prediction": ["all x y.((Current(x) & Circuit(y)) -> RunsThrough(x,y))"]}
{"id": "eqasc_train_7692", "nl": "Electrical circuits require a complete loop through which the electrical current can pass.", "fol": "", "prediction": ["all x.(ElectricalCircuit(x) -> RequiresCompleteLoop(x))"]}
{"id": "eqasc_train_7693", "nl": "Electricity completes a loop in a circuit to work properly", "fol": "", "prediction": ["all x y z.((Electricity(x) & Loop(y) & Circuit(z)) -> CompletesToWork(x,y,z))"]}
{"id": "eqasc_train_7694", "nl": "Electrical power in a circuit is equal to the product of the current and voltage in that circuit.", "fol": "", "prediction": ["all x y.((ElectricalPower(x) & Circuit(y)) -> (Equal(x,y) & ProductOfCurrentAndVoltage(x,y)))"]}
{"id": "eqasc_train_7695", "nl": "Electrical power in a circuit works properly when it runs through the circuit.", "fol": "", "prediction": ["all x y.((ElectricalPower(x) & Circuit(y) & RunsThrough(x,y)) -> WorksProperly(x,y))"]}
{"id": "eqasc_train_7696", "nl": "An electric current is then used to burn the tumor away.", "fol": "", "prediction": ["all x y.((ElectricCurrent(x) & Tumor(y)) -> BurnsAway(x,y))"]}
{"id": "eqasc_train_7697", "nl": "a tumor can be burned away when an electrical circuit is working properly", "fol": "", "prediction": ["all x y.((Tumor(x) & ElectricalCircuit(y) & WorkingProperly(y)) -> BurnedAway(x,y))"]}
{"id": "eqasc_train_7698", "nl": "An electric charge in motion is called electric current.", "fol": "", "prediction": ["all x.(ElectricChargeInMotion(x) -> ElectricCurrent(x))"]}
{"id": "eqasc_train_7699", "nl": "When a circuit is working properly, a charge in motion runs through that circuit.", "fol": "", "prediction": ["all x.((Circuit(x) & WorkingProperly(x)) -> ChargeInMotionRuns(x))"]}
{"id": "eqasc_train_7700", "nl": "When the wiring is finished, they test the circuits for proper connections.", "fol": "", "prediction": ["all x.((WiringFinished(x) & TestCircuits(x)) -> ProperConnections(x))"]}
{"id": "eqasc_train_7701", "nl": "When the wiring is finished, electrical current runs through it.", "fol": "", "prediction": ["all x.((WiringFinished(x) & ElectricalCurrentRuns(x)) -> Completed(x))"]}
{"id": "eqasc_train_7702", "nl": "An electrical current is the flow of electric charge.", "fol": "", "prediction": ["all x.(ElectricalCurrent(x) -> ElectricChargeFlow(x))"]}
{"id": "eqasc_train_7703", "nl": "When an electrical circuit is working properly , electric charge runs through that circuit", "fol": "", "prediction": ["all x y z.((ElectricalCircuit(x) & ElectricalCircuit(y) & WorkingProperly(x) & ElectricCharge(z)) -> RunsThrough(x,y,z))"]}
{"id": "eqasc_train_7704", "nl": "Much of the circuit is in fact a comparator made with discrete transistors.", "fol": "", "prediction": ["all x.((Circuit(x) & Compactor(x) & MadeWithDiscreteTransistors(x)) -> Compactor(x))"]}
{"id": "eqasc_train_7705", "nl": "When a comparator made with discrete transistors is working properly , electrical current runs through it.", "fol": "", "prediction": ["all x.((Comparator(x) & MadeWithDiscreteTransistors(x)) -> RunsElectricalCurrent(x))"]}
{"id": "eqasc_train_7706", "nl": "Electric shock is passage of electric current through the body.", "fol": "", "prediction": ["all x.(ElectricShock(x) -> PassageOfElectricCurrent(x))"]}
{"id": "eqasc_train_7707", "nl": "when an electrical circuit is working properly it can shock", "fol": "", "prediction": ["all x.((ElectricalCircuit(x) & WorkingProperly(x)) -> CanShock(x))"]}
{"id": "eqasc_train_7708", "nl": "electric charge flows in a circuit", "fol": "", "prediction": ["all x y z.((ElectricCharge(x) & Circuit(y) & Circuit(z)) -> FlowsIn(x,y,z))"]}
{"id": "eqasc_train_7709", "nl": "Streams may start with runoff or water seeping out of a spring.", "fol": "", "prediction": ["all x.(Stream(x) -> (StartsWithRunoff(x) | SeepsOutOfSpring(x)))"]}
{"id": "eqasc_train_7710", "nl": "streams may start with runoff or h2o seeping out of a spring", "fol": "", "prediction": ["all x y.((Stream(x) & Spring(y)) -> (StartsWithRunoff(x,y) | SeepsOutWithH2o(x,y)))"]}
{"id": "eqasc_train_7711", "nl": "Ground Water and Streams Reduced replenishment of ground water also affects streams.", "fol": "", "prediction": ["all x.((GroundWater(x) & Streams(x)) -> (ReducedReplenishmentOfGroundWater(x) & AffectsStreams(x)))"]}
{"id": "eqasc_train_7712", "nl": "water will runoff as springs to replenish ground water", "fol": "", "prediction": ["all x y.((Water(x) & Runoff(y)) -> (RunoffAsSprings(x,y) & RefreshGroundWater(x)))"]}
{"id": "eqasc_train_7713", "nl": "Heavy rains and runoff caused streams to rise rapidly.", "fol": "", "prediction": ["all x y.((HeavyRain(x) & Runoff(y)) -> CausedStreamsToRiseRapidly(x,y))"]}
{"id": "eqasc_train_7714", "nl": "Heavy rains and runoff can cause water seeping out", "fol": "", "prediction": ["all x y.((HeavyRain(x) & Runoff(y)) -> CausesSeepingOut(x,y))"]}
{"id": "eqasc_train_7715", "nl": "Sulfur occurs native in the vicinity of volcanoes and hot springs.", "fol": "", "prediction": ["all x.(Sulfur(x) -> NativeInNearbyNeighborhood(x))"]}
{"id": "eqasc_train_7716", "nl": "Streams may start with runoff or water seeping out of a body of water where sulfur occurs.", "fol": "", "prediction": ["all x y.((Stream(x) & BodyOfWater(y) & SulfurOccurs(x)) -> (StartsWithRunoff(x) | SeepsOut(x)))"]}
{"id": "eqasc_train_7717", "nl": "Floods occur mostly in the spring from snowmelt runoff.", "fol": "", "prediction": ["all x.(Flood(x) -> (OccursInSpring(x) & SnowmeltRunoff(x)))"]}
{"id": "eqasc_train_7718", "nl": "snowmelt feed streams", "fol": "", "prediction": ["all x.(SnowmeltFeedStream(x) -> SnowmeltFeedStream(x))"]}
{"id": "eqasc_train_7719", "nl": "Lakes and streams are sources of drinking water.", "fol": "", "prediction": ["all x.((Lake(x) | Stream(x)) -> DrinkingWaterSource(x))"]}
{"id": "eqasc_train_7720", "nl": "Water seeping out of a spring is a source of drinking water.", "fol": "", "prediction": ["all x y.((WaterSeepingOut(x) & Spring(y)) -> SourceOfDrinkingWater(x,y))"]}
{"id": "eqasc_train_7721", "nl": "Rain is assumed to occur as direct runoff.", "fol": "", "prediction": ["all x.(Rain(x) -> DirectRunoff(x))"]}
{"id": "eqasc_train_7722", "nl": "streams may start with rain", "fol": "", "prediction": ["all x.(Stream(x) -> (MayStartWithRain(x) | MayStartWithRain(x)))"]}
{"id": "eqasc_train_7723", "nl": "Most water comes from precipitation.", "fol": "", "prediction": ["all x.(Water(x) -> Precipitation(x))"]}
{"id": "eqasc_train_7724", "nl": "most streams start with precipitation", "fol": "", "prediction": ["all x.(Stream(x) -> (StartsWithPrecipitation(x) & Precipitation(x)))"]}
{"id": "eqasc_train_7725", "nl": "Streams A stream is a sequence of characters.", "fol": "", "prediction": ["all x.(Stream(x) -> SequenceOfCharacters(x))"]}
{"id": "eqasc_train_7726", "nl": "a sequence of characters may start with runoff or water seeping out of a spring.", "fol": "", "prediction": ["all x y.((SequenceOfCharacters(x) & Spring(y)) -> (StartsWithRunoff(x,y) | SeepsOutWater(x,y)))"]}
{"id": "eqasc_train_7727", "nl": "If there is a fierce emotion near a stream, that stream somehow records that.", "fol": "", "prediction": ["all x y.((FierceEmotion(x) & NearStream(y)) -> RecordsStream(x,y))"]}
{"id": "eqasc_train_7728", "nl": "when runoff or water seeping out of a spring when there is fierce emotion it can record it", "fol": "", "prediction": ["all x y.((RunoffOrWaterSeepingOut(x) & Spring(y) & FeatherEmotion(y)) -> CanRecord(x,y))"]}
{"id": "eqasc_train_7729", "nl": "Streams often start with runoff or H20 seeping out of a spring.", "fol": "", "prediction": ["all x.(Stream(x) -> (StartsWithRunoff(x) | SeepsOut(x)))"]}
{"id": "eqasc_train_7730", "nl": "smaller bodies of water may start with runoff", "fol": "", "prediction": ["all x.((BodyOfWater(x) & SmallerBodyOfWater(x)) -> MayStartWithRunoff(x))"]}
{"id": "eqasc_train_7731", "nl": "shelter is used for protection by animals against weather", "fol": "", "prediction": ["all x y.((Shelter(x) & Animal(y)) -> UsedForProtectionAgainstWeather(x,y))"]}
{"id": "eqasc_train_7732", "nl": "Protective, supportive environments such as shelters are needed.", "fol": "", "prediction": ["all x.((ProtectiveEnvironment(x) & SupportiveEnvironment(x)) -> Needed(x))"]}
{"id": "eqasc_train_7733", "nl": "Protective, supportive environments are used by animals against weather.", "fol": "", "prediction": ["all x y.((Animal(x) & Weather(y)) -> ProtectiveSupportiveEnvironment(x,y))"]}
{"id": "eqasc_train_7734", "nl": "Trees provide shelter and food for animals.", "fol": "", "prediction": ["all x.(Tree(x) -> (ProvidesShelter(x) & ProvidesFood(x)))"]}
{"id": "eqasc_train_7735", "nl": "Trees provide animals protection against the weather", "fol": "", "prediction": ["all x y.((Tree(x) & Animal(y)) -> ProvidesProtectionAgainstWeather(x,y))"]}
{"id": "eqasc_train_7736", "nl": "Shelter from weather is critical.", "fol": "", "prediction": ["all x.(ShelterFromWeather(x) -> Critical(x))"]}
{"id": "eqasc_train_7737", "nl": "Weather can kill animals ", "fol": "", "prediction": ["all x y.((Weather(x) & Animal(y)) -> Kills(x,y))"]}
{"id": "eqasc_train_7738", "nl": "Acid rain can be especially harmful to plants and animals.", "fol": "", "prediction": ["all x.(AcidRain(x) -> (HarmfulToPlants(x) & HarmfulToAnimals(x)))"]}
{"id": "eqasc_train_7739", "nl": "shelter protects creatures from harmful rain", "fol": "", "prediction": ["all x y.((Shelter(x) & Creature(y)) -> ProtectsFromHarmfulRain(x,y))"]}
{"id": "eqasc_train_7740", "nl": "Caves or rock overhangs provide shelter.", "fol": "", "prediction": ["all x.((Cave(x) | RockOverhang(x)) -> ProvidesShelter(x))"]}
{"id": "eqasc_train_7741", "nl": "Rock overhangs are used by animals to protect against weather.", "fol": "", "prediction": ["all x y.((RockOverhang(x) & Animal(y)) -> ProtectsAgainstWeather(x,y))"]}
{"id": "eqasc_train_7742", "nl": "All kinds of weather are discussed including hurricanes.", "fol": "", "prediction": ["all x.(Weather(x) -> (Hurricane(x) | Hurricane(x)))"]}
{"id": "eqasc_train_7743", "nl": "Shelter is used in protection by animals against hurricanes.", "fol": "", "prediction": ["all x.(Shelter(x) -> UsedInProtection(x))"]}
{"id": "eqasc_train_7744", "nl": "Many snakes seek shelter from the winter weather by holding up in dens.", "fol": "", "prediction": ["all x.(Snake(x) -> (SeeksShelterFromWinterWeather(x) & HoldsUpInDen(x)))"]}
{"id": "eqasc_train_7745", "nl": "Snakes use shelter to protect themselves in the winter", "fol": "", "prediction": ["all x y.((Snake(x) & Shelter(y)) -> ProtectsInWinter(x,y))"]}
{"id": "eqasc_train_7746", "nl": "During the daytime or in hot weather they seek shelter.", "fol": "", "prediction": ["all x.((Daytime(x) | HotWeather(x)) -> SeekShelter(x))"]}
{"id": "eqasc_train_7747", "nl": "animals use shelter in hot temperatures", "fol": "", "prediction": ["all x y.((Animal(x) & Shelter(y) & HotTemperatures(y)) -> UsesIn(x,y))"]}
{"id": "eqasc_train_7748", "nl": "Many animals use sponges for shelter.", "fol": "", "prediction": ["all x.(Animal(x) -> UsesSpongesForShelter(x))"]}
{"id": "eqasc_train_7749", "nl": "sponges are used for protection by animals", "fol": "", "prediction": ["all x y.((Sponge(x) & Animal(y)) -> UsedForProtection(x,y))"]}
{"id": "eqasc_train_7750", "nl": "a cactus stem is used for storing water", "fol": "", "prediction": ["all x.(CactusStem(x) -> UsedForStoringWater(x))"]}
{"id": "eqasc_train_7751", "nl": "Photosynthesis occurs on the green surface of the cactus stem.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> GreenSurfaceOfCactus(x))"]}
{"id": "eqasc_train_7752", "nl": "Cactus store water where photosynthesis occurs", "fol": "", "prediction": ["all x y.((Cactus(x) & Water(y)) -> StoresWherePhotosynthesisOccurs(x,y))"]}
{"id": "eqasc_train_7753", "nl": "Drink lots of water for hydration.", "fol": "", "prediction": ["all x.((Drinks(x) & Drinks(x)) -> Hydration(x))"]}
{"id": "eqasc_train_7754", "nl": "a cactus stem can be used for hydration.", "fol": "", "prediction": ["all x.(CactusStem(x) -> CanBeUsedForHydration(x))"]}
{"id": "eqasc_train_7755", "nl": "H2O is the scientific name for water.", "fol": "", "prediction": ["(ScientificNameForWater(H2O) & Water(Water))"]}
{"id": "eqasc_train_7756", "nl": "a cactus stem is used for storing h2o", "fol": "", "prediction": ["all x y.((CactusStem(x) & CactusStem(y)) -> StoresH2o(x,y))"]}
{"id": "eqasc_train_7757", "nl": "A cactus stem is used for storing H20.", "fol": "", "prediction": ["all x.(CactusStem(x) -> UsedForStoringH20(x))"]}
{"id": "eqasc_train_7758", "nl": "Proper watering is important to the successful growth of the Christmas cactus.", "fol": "", "prediction": ["all x.((Cactus(x) & ProperWatering(x)) -> SuccessfulGrowth(x))"]}
{"id": "eqasc_train_7759", "nl": "cactuses save proper water", "fol": "", "prediction": ["all x.(Cactus(x) -> SavesProperWater(x))"]}
{"id": "eqasc_train_7760", "nl": "Saguaro cactus grow very slowly.", "fol": "", "prediction": ["all x.(SaguaroCactus(x) -> GrowsSlowly(x))"]}
{"id": "eqasc_train_7761", "nl": "Water is stored in the stem of the saguaro", "fol": "", "prediction": ["all x y.((Saguaro(x) & Saguaro(y)) -> StoresWaterInStem(x,y))"]}
{"id": "eqasc_train_7762", "nl": "Cactus species often grow in hot, dry deserts.", "fol": "", "prediction": ["all x.(CactusSpecies(x) -> GrowsInHotDryDeserts(x))"]}
{"id": "eqasc_train_7763", "nl": "plants that grow in hot, dry deserts store water in the stem", "fol": "", "prediction": ["all x.((Plant(x) & GrowsInHotDeserts(x) & DryDesert(x)) -> StoresWaterInStem(x))"]}
{"id": "eqasc_train_7764", "nl": "Water consists of H2O, etc.", "fol": "", "prediction": ["all x.(Water(x) -> (H2O(x) | Water(x)))"]}
{"id": "eqasc_train_7765", "nl": "a cactus stem is used for storing H2O.", "fol": "", "prediction": ["all x.(CactusStem(x) -> UsedForStoringH2O(x))"]}
{"id": "eqasc_train_7766", "nl": "When the rain stops the cactus is fat because the cactus roots drink the water.", "fol": "", "prediction": ["all x y.((RainStop(x) & Cactus(y) & DrinkWater(y)) -> Fat(y))"]}
{"id": "eqasc_train_7767", "nl": "When the rain stops the stem used for storing water is fat because the roots drink the water", "fol": "", "prediction": ["all x y.((RainStops(x) & Stem(y) & UsedForStoringWater(y)) -> Fat(y))"]}
{"id": "eqasc_train_7768", "nl": "Typically, the liquid is water.", "fol": "", "prediction": ["all x.(Liquid(x) -> Water(x))"]}
{"id": "eqasc_train_7769", "nl": "a cactus stem is used for storing liquid", "fol": "", "prediction": ["all x.(CactusStem(x) -> UsedForStoringLiquids(x))"]}
{"id": "eqasc_train_7770", "nl": "Moisture is stored in the spongy stem or root systems of the cactus during rainfall.", "fol": "", "prediction": ["all x y.((Cactus(x) & Rainfall(y)) -> StoresMoistureInSpongyStemOrRootSystem(x,y))"]}
{"id": "eqasc_train_7771", "nl": "A cactus stem is used to reserve moisture", "fol": "", "prediction": ["all x.(CactusStem(x) -> ReservesMoisture(x))"]}
{"id": "eqasc_train_7772", "nl": "Cactuses store water, serving as their own reservoirs and surviving long droughts.", "fol": "", "prediction": ["all x.(Cactus(x) -> (StoresWater(x) & ServesAsOwnReservoir(x) & SurvivesLongDroughts(x)))"]}
{"id": "eqasc_train_7773", "nl": "Cactus stems hold water to survive droughts", "fol": "", "prediction": ["all x.(CactusStem(x) -> HoldsWaterToSurviveDroughts(x))"]}
{"id": "eqasc_train_7774", "nl": "Other animals eat cactus to get water.", "fol": "", "prediction": ["all x y.((Animal(x) & Cactus(y)) -> EatsToGetWater(x,y))"]}
{"id": "eqasc_train_7775", "nl": "Animals eat the stem of plants to get hydrated", "fol": "", "prediction": ["all x y z.((Animal(x) & Plant(y) & Stem(z)) -> EatsToGetHydrified(x,y,z))"]}
{"id": "eqasc_train_7776", "nl": "A striking cactus plant from Mexico.", "fol": "", "prediction": ["all x.((CactusPlant(x) & FromMexico(x)) -> Striking(x))"]}
{"id": "eqasc_train_7777", "nl": "Something that grows in Mexico can be used for storing water.", "fol": "", "prediction": ["all x.((GrowsInMexico(x) & GrowsInMexico(x)) -> CanBeUsedForStoringWater(x))"]}
{"id": "eqasc_train_7778", "nl": "Some plants, like cactus, have a water storage system.", "fol": "", "prediction": ["exists x.(Plant(x) & (Cactus(x) | Cactus(x))) -> HasWaterStorageSystem(x))"]}
{"id": "eqasc_train_7779", "nl": "Some plants have a water storage system in their stem", "fol": "", "prediction": ["exists x.(Plant(x) & HasWaterStorageSystem(x))"]}
{"id": "eqasc_train_7780", "nl": "a cactus stem is used for conservation", "fol": "", "prediction": ["all x y.((CactusStem(x) & Conservation(y)) -> UsedFor(x,y))"]}
{"id": "eqasc_train_7781", "nl": "Plasma cells are activated B cells that secrete antibodies.", "fol": "", "prediction": ["all x.(PlasmaCell(x) -> (ActivatedBCell(x) & SecretesAntibodies(x)))"]}
{"id": "eqasc_train_7782", "nl": "Antibodies kill bacteria.", "fol": "", "prediction": ["all x.(Antibodies(x) -> KillsBacteria(x))"]}
{"id": "eqasc_train_7783", "nl": "plasma cells kill bacteria", "fol": "", "prediction": ["all x y.((PlasmaCell(x) & Bacteria(y)) -> Kills(x,y))"]}
{"id": "eqasc_train_7784", "nl": "plasma cells are activated B cells that secrete gammaglobulins", "fol": "", "prediction": ["all x.(PlasmaCell(x) -> (ActivatedBCell(x) & SecretesGammaglobulins(x)))"]}
{"id": "eqasc_train_7785", "nl": "Plasma cells are activated B cells that secrete gammaglobulins", "fol": "", "prediction": ["all x.(PlasmaCell(x) -> (ActivatedBCell(x) & SecretesGammaglobulins(x)))"]}
{"id": "eqasc_train_7786", "nl": "Antibodies act as warriors.", "fol": "", "prediction": ["all x.(Antibody(x) -> ActsAsWarrior(x))"]}
{"id": "eqasc_train_7787", "nl": "Plasma cells are activated B cells that secrete warriors.", "fol": "", "prediction": ["all x.(PlasmaCell(x) -> (ActivatedBCell(x) & SecretesWarriors(x)))"]}
{"id": "eqasc_train_7788", "nl": "Antibodies are the bodies way of fighting infection.", "fol": "", "prediction": ["all x.(Antibodies(x) -> (BodyMan(x) & FightingInfection(x)))"]}
{"id": "eqasc_train_7789", "nl": "plasma cells allow bodies to fight infection", "fol": "", "prediction": ["all x y.((PlasmaCell(x) & Body(y)) -> AllowsFightingInfection(x,y))"]}
{"id": "eqasc_train_7790", "nl": "Antibodies are produced to fight antigens.", "fol": "", "prediction": ["all x.(Antibody(x) -> ProducedToFightAntigens(x))"]}
{"id": "eqasc_train_7791", "nl": "plasma cells secrete antigen fighters", "fol": "", "prediction": ["all x y.((PlasmaCell(x) & AntigenFighter(y)) -> Secretes(x,y))"]}
{"id": "eqasc_train_7792", "nl": "Antibodies are produced by plasma cells.", "fol": "", "prediction": ["all x.(Antibody(x) -> ProducedByPlasmaCells(x))"]}
{"id": "eqasc_train_7793", "nl": "antibodies are produced by activated B cells that secrete them", "fol": "", "prediction": ["all x y.((Antibodies(x) & ActiveBCell(y)) -> ProducedByActivatedBCells(x,y))"]}
{"id": "eqasc_train_7794", "nl": "activated B cells secrete antibodies", "fol": "", "prediction": ["all x.(ActivatedBCell(x) -> SecretesAntibodies(x))"]}
{"id": "eqasc_train_7795", "nl": "Plasma Cells Plasma Cells Plasma cells are the mature form of B-lymphocytes.", "fol": "", "prediction": ["all x.(PlasmaCell(x) -> (MatureBlymphocyte(x) & PlasmaCell(x)))"]}
{"id": "eqasc_train_7796", "nl": "Mature forms of B-lymphocytes secrete antibodies.", "fol": "", "prediction": ["all x.((B-lymphocyte(x) & MatureForm(x)) -> SecretesAntibodies(x))"]}
{"id": "eqasc_train_7797", "nl": "All cells have a plasma membrane.", "fol": "", "prediction": ["all x.(Cell(x) -> HasPlasmaMembrane(x))"]}
{"id": "eqasc_train_7798", "nl": "membranes are made of plasma", "fol": "", "prediction": ["all x.(Membrane(x) -> (MadeOfPlasma(x) & MadeOfPlasma(x)))"]}
{"id": "eqasc_train_7799", "nl": "Antibodies are manufactured by the immune system.", "fol": "", "prediction": ["all x.(Antibody(x) -> ManufacturedByImmuneSystem(x))"]}
{"id": "eqasc_train_7800", "nl": "Plasma cells are activated B cells that secrete immune system molecules.", "fol": "", "prediction": ["all x.(PlasmaCell(x) -> (ActivatedBCell(x) & SecretesImmuneSystemMolecules(x)))"]}
{"id": "eqasc_train_7801", "nl": "Antibodies are protein molecules.", "fol": "", "prediction": ["all x.(Antibody(x) -> ProteinMolecule(x))"]}
{"id": "eqasc_train_7802", "nl": "Plasma cells are activated B cells that secrete protein molecules", "fol": "", "prediction": ["all x.(PlasmaCell(x) -> (ActivatedBCell(x) & SecretesProteinMolecules(x)))"]}
{"id": "eqasc_train_7803", "nl": "Precipitation falls on the windward side of the mountain range.", "fol": "", "prediction": ["all x.(Precipitation(x) -> WindwardSideOfMountainRange(x))"]}
{"id": "eqasc_train_7804", "nl": "rain falls on the windward side of the mountain range", "fol": "", "prediction": ["all x y.((Rain(x) & WindwardSide(y)) -> FallsOnMountainRange(x,y))"]}
{"id": "eqasc_train_7805", "nl": "If erosion is rapid, no high mountain range or extensive foreland thrust develops.", "fol": "", "prediction": ["all x.((ErosionRapid(x) & -(HighMountainRange(x) | ExtensiveForelandThrust(x))) -> -Develops(x))"]}
{"id": "eqasc_train_7806", "nl": "Precipitation falls on the windward side extensive foreland thrust developments", "fol": "", "prediction": ["all x y.((Precipitation(x) & WindwardSide(y) & ExtensiveForelandThrust(x)) -> FallsOnExtensiveForelandThrust(x,y))"]}
{"id": "eqasc_train_7807", "nl": "Moist air is forced up the mountains bringing both cloud and precipitation to the windward side.", "fol": "", "prediction": ["all x y.((MoistAir(x) & Mountain(y)) -> ForciblyFormedUp(x,y))"]}
{"id": "eqasc_train_7808", "nl": "moist air falls on the windward side of a mountain", "fol": "", "prediction": ["all x y.((MoistAir(x) & Mountain(y)) -> FallsOnWindwardSide(x,y))"]}
{"id": "eqasc_train_7809", "nl": "For example, the windward side of a peninsula is the windiest side.", "fol": "", "prediction": ["all x y.((WindwardSide(x) & Peninsula(y)) -> WindiestSide(x,y))"]}
{"id": "eqasc_train_7810", "nl": "The windiest side of a mountainous peninsula would have the most precipitation.", "fol": "", "prediction": ["all x y.((MountainousPeninsula(x) & WindiestSide(x,y)) -> MostPrecipitation(x))"]}
{"id": "eqasc_train_7811", "nl": "Sheep tend to favour the windward side of a paddock.", "fol": "", "prediction": ["all x y.((Sheep(x) & Paddock(y)) -> FavorsWindwardSide(x,y))"]}
{"id": "eqasc_train_7812", "nl": "Sheep tend to favor the side of a mountain with more precipitation.", "fol": "", "prediction": ["all x y.((Sheep(x) & Mountain(y) & MorePrecipitation(y)) -> Favors(x,y))"]}
{"id": "eqasc_train_7813", "nl": "Rainfall is more at the tropics and on windward side of mountains.", "fol": "", "prediction": ["all x.(Rainfall(x) -> (AtTropicals(x) & WindwardSideOfMountains(x)))"]}
{"id": "eqasc_train_7814", "nl": "Rainfall falls on the windward side", "fol": "", "prediction": ["all x.(Rainfall(x) -> FallsOnWindwardSide(x))"]}
{"id": "eqasc_train_7815", "nl": "Any precipitation is snow, that's for sure.", "fol": "", "prediction": ["all x.(Snow(x) -> Precipitation(x))"]}
{"id": "eqasc_train_7816", "nl": "snow falls on the windward side of the mountain range", "fol": "", "prediction": ["all x y.((SnowFalls(x) & WindwardSide(y)) -> MountainRange(x,y))"]}
{"id": "eqasc_train_7817", "nl": "Ample precipitation, including fog, is essential for growth.", "fol": "", "prediction": ["all x.((SmplePrecipitation(x) & IncludesFog(x)) -> EssentialForGrowth(x))"]}
{"id": "eqasc_train_7818", "nl": "growth occurs on the windward side of the mountain range", "fol": "", "prediction": ["all x y.((MountainRange(x) & WindwardSide(y)) -> GrowthOccurs(x,y))"]}
{"id": "eqasc_train_7819", "nl": "Rain would fall on the windward side of the mountain range.", "fol": "", "prediction": ["all x y.((Rain(x) & WindwardSide(y)) -> FallsOn(x,y))"]}
{"id": "eqasc_train_7820", "nl": "Veins generally carry deoxygenated blood.", "fol": "", "prediction": ["all x.(Vein(x) -> CarriesDeoxygenatedBlood(x))"]}
{"id": "eqasc_train_7821", "nl": "Deoxygenated blood is heavy with carbon dioxide.", "fol": "", "prediction": ["all x.(DeoxygenatedBlood(x) -> HeavyWithCarbonDioxide(x))"]}
{"id": "eqasc_train_7822", "nl": "Veins carry blood that is heavy with carbon dioxide", "fol": "", "prediction": ["all x.(Vein(x) -> (CarriesBlood(x) & HeavyWithCarbonDioxide(x)))"]}
{"id": "eqasc_train_7823", "nl": "Vessels carry deoxygenated blood", "fol": "", "prediction": ["all x.(Vessel(x) -> CarriesDeoxygenatedBlood(x))"]}
{"id": "eqasc_train_7824", "nl": "Finally, the veins carry the blood back to the heart.", "fol": "", "prediction": ["all x y.((Vine(x) & Heart(y)) -> CarriesBlood(x,y))"]}
{"id": "eqasc_train_7825", "nl": "blood traveling to the heart is deoxygenated", "fol": "", "prediction": ["all x.((Blood(x) & Heart(x)) -> Deoxygenated(x))"]}
{"id": "eqasc_train_7826", "nl": "Arteries carry blood.", "fol": "", "prediction": ["all x.(Arterie(x) -> CarriesBlood(x))"]}
{"id": "eqasc_train_7827", "nl": "Veins carry blood that's heavy with carbon dioxide", "fol": "", "prediction": ["all x.(Vein(x) -> (CarriesBlood(x) & HeavyWithCarbonDioxide(x)))"]}
{"id": "eqasc_train_7828", "nl": "blood vessels generally carry deoxygenated blood", "fol": "", "prediction": ["all x.((BloodVessel(x) & DeoxygenatedBlood(x)) -> Carries(x,deoxygenatedBlood))"]}
{"id": "eqasc_train_7829", "nl": "Oxygenated blood is red, deoxygenated blood is blue.", "fol": "", "prediction": ["all x y.((OxygenatedBlood(x) & DeoxygenatedBlood(y)) -> (Red(x) & Blue(y)))"]}
{"id": "eqasc_train_7830", "nl": "Veins generally carry blue blood", "fol": "", "prediction": ["all x.(Vein(x) -> CarriesBlueBlood(x))"]}
{"id": "eqasc_train_7831", "nl": "Veins carry blood to our heart.", "fol": "", "prediction": ["all x.(Vein(x) -> CarriesBloodToHeart(x))"]}
{"id": "eqasc_train_7832", "nl": "deoxygenated blood is carried to our heart", "fol": "", "prediction": ["all x.(DeoxygenatedBloodCarriedToHeart(x) -> CarriedToHeart(x))"]}
{"id": "eqasc_train_7833", "nl": "Blood returns to the heart by the veins.", "fol": "", "prediction": ["all x y.((Blood(x) & Heart(y)) -> ReturnsByVines(x,y))"]}
{"id": "eqasc_train_7834", "nl": "the heart is supplied by veins", "fol": "", "prediction": ["all x y.((Heart(x) & Veins(y)) -> SupplyedBy(x,y))"]}
{"id": "eqasc_train_7835", "nl": "Blood carries blood cells.", "fol": "", "prediction": ["all x.(Blood(x) -> CarriesBloodCells(x))"]}
{"id": "eqasc_train_7836", "nl": "Veins carry cells. ", "fol": "", "prediction": ["all x.(Vein(x) -> CarriesCells(x))"]}
{"id": "eqasc_train_7837", "nl": "Veins push blood toward the heart.", "fol": "", "prediction": ["all x.(Vein(x) -> PushesBloodTowardsHeart(x))"]}
{"id": "eqasc_train_7838", "nl": "deoxygenated blood is carried toward the heart.", "fol": "", "prediction": ["all x.(DeoxygenatedBlood(x) -> CarriedTowardsHeart(x))"]}
{"id": "eqasc_train_7839", "nl": "vessels carry deoxygenated blood", "fol": "", "prediction": ["all x.(Vessel(x) -> CarriesDeoxygenatedBlood(x))"]}
{"id": "eqasc_train_7840", "nl": "high temperatures can cause an object to combust", "fol": "", "prediction": ["all x y.((HighTemperature(x) & Object(y)) -> Combust(y))"]}
{"id": "eqasc_train_7841", "nl": "Fine droplets of water explode into steam during combustion.", "fol": "", "prediction": ["all x.((FineDropletsOfWater(x) & Combustion(x)) -> ExplodesIntoSteam(x))"]}
{"id": "eqasc_train_7842", "nl": "High temperatures can cause objects to explode.", "fol": "", "prediction": ["all x.(HighTemperature(x) -> CanCauseObjectsToExplose(x))"]}
{"id": "eqasc_train_7843", "nl": "Near the sun, of course, the temperature can be very high.", "fol": "", "prediction": ["all x.(NearSun(x) -> (Temperature(x) & VeryHigh(x)))"]}
{"id": "eqasc_train_7844", "nl": "being near the sun can cause an object to combust", "fol": "", "prediction": ["all x y.((Object(x) & NearSun(x) & NearSun(y)) -> CanCombust(x,y))"]}
{"id": "eqasc_train_7845", "nl": "Combustion requires oxygen to burn.", "fol": "", "prediction": ["all x.(Combustion(x) -> RequiresOxygen(x))"]}
{"id": "eqasc_train_7846", "nl": "Applying high temperature in the presence of oxygen can cause an object to burn", "fol": "", "prediction": ["all x y.((HighTemperature(x) & PresenceOfOxygen(y)) -> CausesBurn(x,y))"]}
{"id": "eqasc_train_7847", "nl": "Dioxins are the byproducts of combustion processes.", "fol": "", "prediction": ["all x.(Dioxin(x) -> ByproductOfCombustion(x))"]}
{"id": "eqasc_train_7848", "nl": "high temperatures can cause dioxins", "fol": "", "prediction": ["all x.(HighTemperature(x) -> CausesDioxins(x))"]}
{"id": "eqasc_train_7849", "nl": "And combustion equals power.", "fol": "", "prediction": ["(all x.(Combustion(x) -> Power(x)))"]}
{"id": "eqasc_train_7850", "nl": "Higher temperatures can lead to a powered reaction.", "fol": "", "prediction": ["all x.((Temperature(x) & Higher(x)) -> PoweredReaction(x))"]}
{"id": "eqasc_train_7851", "nl": "Incineration requires very high temperatures for efficient combustion.", "fol": "", "prediction": ["all x.(Incineration(x) -> VeryHighTemperatures(x))"]}
{"id": "eqasc_train_7852", "nl": "incineration causes an object to combust", "fol": "", "prediction": ["all x y.((Incineration(x) & Object(y)) -> CausesCombust(x,y))"]}
{"id": "eqasc_train_7853", "nl": "Combustion generates toxic fumes.", "fol": "", "prediction": ["all x.(Combustion(x) -> GeneratesToxicFumes(x))"]}
{"id": "eqasc_train_7854", "nl": "High temperatures can cause toxic fumes.", "fol": "", "prediction": ["all x.(HighTemperature(x) -> CanCauseToxicFumes(x))"]}
{"id": "eqasc_train_7855", "nl": "high temperatures can cause a type of oxidation reaction", "fol": "", "prediction": ["all x.(HighTemperatures(x) -> CausesOxidationReaction(x))"]}
{"id": "eqasc_train_7856", "nl": "Combustion of fuel is one of the main causes of air pollution.", "fol": "", "prediction": ["all x.((CombustionOfFuel(x) & AirPollution(x)) -> MainCause(x))"]}
{"id": "eqasc_train_7857", "nl": "high temperatures can cause air pollution", "fol": "", "prediction": ["all x.(HighTemperatures(x) -> CausesAirPollution(x))"]}
{"id": "eqasc_train_7858", "nl": "having no natural predators increases population size", "fol": "", "prediction": ["all x.((NaturalPredators(x) & -NaturalPredators(x)) -> IncreasesPopulationSize(x))"]}
{"id": "eqasc_train_7859", "nl": "Populations can also be limited by predation.", "fol": "", "prediction": ["all x.(Population(x) -> LimitedByPredation(x))"]}
{"id": "eqasc_train_7860", "nl": "not having predation increases  size", "fol": "", "prediction": ["all x.((Predation(x) & -PredationIncreasesSize(x)) -> -PredationIncreasesSize(x))"]}
{"id": "eqasc_train_7861", "nl": "Population size is a function of natality and mortality.", "fol": "", "prediction": ["all x.(PopulationSize(x) -> (FunctionOfNatality(x) & FunctionOfMortality(x)))"]}
{"id": "eqasc_train_7862", "nl": "having natural predators is a cause of mortality", "fol": "", "prediction": ["all x.(NaturalPredators(x) -> CauseOfMortality(x))"]}
{"id": "eqasc_train_7863", "nl": "Any population has the potential to produce more offspring than the environment can support.", "fol": "", "prediction": ["all x.(Population(x) -> (ProducesMoreOffspring(x) & EnvironmentCanSupport(x)))"]}
{"id": "eqasc_train_7864", "nl": "Having no natural predators increases potential to produce more offspring than the environment can support.", "fol": "", "prediction": ["all x.((NaturalPredator(x) & -NaturalPredator(x)) -> IncreasesPotentialToProduceMoreOffspring(x))"]}
{"id": "eqasc_train_7865", "nl": "Koalas have no natural predators.", "fol": "", "prediction": ["all x.(Koala(x) -> -NaturalPredator(x))"]}
{"id": "eqasc_train_7866", "nl": "koalas have an increased population size", "fol": "", "prediction": ["all x.(Koala(x) -> IncreasedPopulationSize(x))"]}
{"id": "eqasc_train_7867", "nl": "Population size is the predictor of extinction probability.", "fol": "", "prediction": ["all x.(PopulationSize(x) -> PredictsExtinctionProbability(x))"]}
{"id": "eqasc_train_7868", "nl": "Having no natural predators reduces the probability of extinction.", "fol": "", "prediction": ["all x.((NaturalPredator(x) & -NaturalPredator(x)) -> ReducesProbabilityOfExtinction(x))"]}
{"id": "eqasc_train_7869", "nl": "Organisms have to be better adapted as population size increases.", "fol": "", "prediction": ["all x.((Organism(x) & PopulationSizeIncreases(x)) -> BetterAdapted(x))"]}
{"id": "eqasc_train_7870", "nl": "having no natural predators means organisms have to be better adapted", "fol": "", "prediction": ["all x.((Organism(x) & -NaturalPredators(x)) -> BetterAdapted(x))"]}
{"id": "eqasc_train_7871", "nl": "And thousands of new babies means a population increase.", "fol": "", "prediction": ["all x.((NewBird(x) & PopulationIncrease(x)) -> ThousandOf(x))"]}
{"id": "eqasc_train_7872", "nl": "Having no natural predators means thousands of new babies.", "fol": "", "prediction": ["all x.((NaturalPredator(x) & -NaturalPredator(x)) -> TausendsOfNewBirds(x))"]}
{"id": "eqasc_train_7873", "nl": "With an increase in population there is an increase in expenditures.", "fol": "", "prediction": ["all x.((IncreaseInPopulation(x) & IncreaseInExpenses(x)) -> IncreaseInExpenses(x))"]}
{"id": "eqasc_train_7874", "nl": "having no natural predators increases expenditures", "fol": "", "prediction": ["all x.((NaturalPredator(x) & -NaturalPredator(x)) -> IncreasesExpenses(x))"]}
{"id": "eqasc_train_7875", "nl": "Nephrons are the structural and functional units of the kidneys.", "fol": "", "prediction": ["all x.(Nephron(x) -> (StructuralUnit(x) & FunctionalUnit(x)))"]}
{"id": "eqasc_train_7876", "nl": "Blood is filtered in the kidney.", "fol": "", "prediction": ["all x y.((Blood(x) & Kidney(y)) -> FilteredIn(x,y))"]}
{"id": "eqasc_train_7877", "nl": "nephrons filter blood", "fol": "", "prediction": ["all x.(Nephron(x) -> FiltersBlood(x))"]}
{"id": "eqasc_train_7878", "nl": "Nephrons are the structural and functional units of the organ that filters blood.", "fol": "", "prediction": ["all x.(Nephron(x) -> (StructuralUnit(x) & FunctionalUnit(x) & FiltersBlood(x)))"]}
{"id": "eqasc_train_7879", "nl": "Each nephron contains a system of blood vessels and tubules.", "fol": "", "prediction": ["all x.(Nephron(x) -> (ContainsSystemOfBloodVessels(x) & ContainsSystemOfTumules(x)))"]}
{"id": "eqasc_train_7880", "nl": "kidneys contain  a system of blood vessels and tubules", "fol": "", "prediction": ["all x.(Knee(x) -> (ContainsSystemOfBloodVessels(x) & ContainsSystemOfTumules(x)))"]}
{"id": "eqasc_train_7881", "nl": "Finally, the fluid in the nephron reaches a collecting duct .", "fol": "", "prediction": ["all x y.((Nephron(x) & Fluid(y)) -> ReachesCollectingDuct(x,y))"]}
{"id": "eqasc_train_7882", "nl": "fluid in the kidneys collect into ducts", "fol": "", "prediction": ["all x y.((Nephrons(x) & Kidneys(y)) -> CollectsIntoDucts(x,y))"]}
{"id": "eqasc_train_7883", "nl": "Mammalian kidneys form urine in nephrons.", "fol": "", "prediction": ["all x y.((Mammal(x) & Nephron(y)) -> FormsUrineIn(x,y))"]}
{"id": "eqasc_train_7884", "nl": "mammals form urine in the kidneys ", "fol": "", "prediction": ["all x.(Mammal(x) -> FormsUrineInKneel(x))"]}
{"id": "eqasc_train_7885", "nl": "Each nephron has a glomerulus.", "fol": "", "prediction": ["all x.(Nephron(x) -> HasGlimmerulus(x))"]}
{"id": "eqasc_train_7886", "nl": "Glomerulus is part of the kidney structure.", "fol": "", "prediction": ["all x.(Glimmerulus(x) -> PartOfKneelStructure(x))"]}
{"id": "eqasc_train_7887", "nl": "When kidney function is normal, creatinine is removed from the body by the kidneys.", "fol": "", "prediction": ["all x.((KneeFunction(x) & Normal(x)) -> RemovedCreatinine(x))"]}
{"id": "eqasc_train_7888", "nl": "Nephrons are necessary to remove creatinine from the body ", "fol": "", "prediction": ["all x.(Nephron(x) -> RemovesCreatinineFromBody(x))"]}
{"id": "eqasc_train_7889", "nl": "Normally the kidneys manufacture urine.", "fol": "", "prediction": ["all x.(Knee(x) -> ManufacturesUrine(x))"]}
{"id": "eqasc_train_7890", "nl": "nephrons are the structural and functional units of the organs that manufacture urine", "fol": "", "prediction": ["all x.(Nephron(x) -> (StructuralUnit(x) & FunctionalUnit(x) & Organ(x) & ManufacturesUrine(x)))"]}
{"id": "eqasc_train_7891", "nl": "things that have a glomerulus are the structural units of the kidneys", "fol": "", "prediction": ["all x.((Thing(x) & HasGlimmerulus(x)) -> StructuralUnitsOfKnees(x))"]}
{"id": "eqasc_train_7892", "nl": "Damage to the nephrons can be caused by conditions such as diabetes and high blood pressure .", "fol": "", "prediction": ["all x y.((Nephron(x) & (Diabetes(y) | HighBloodPressure(y))) -> DamageCaused(x,y))"]}
{"id": "eqasc_train_7893", "nl": "Damage to the structural units of the kidneys can be caused by  high blood pressure ..", "fol": "", "prediction": ["all x y.((Damage(x) & StructuralUnits(y) & Kidneys(z)) -> CausedByHighBloodPressure(x,y,z))"]}
{"id": "eqasc_train_7894", "nl": "Nephrons are the structural and functional units of an organ that filters blood", "fol": "", "prediction": ["all x.(Nephron(x) -> (StructuralUnit(x) & FunctionalUnit(x) & Organ(x) & FiltersBlood(x)))"]}
{"id": "eqasc_train_7895", "nl": "Nephrons consist of vascular and tubular components.", "fol": "", "prediction": ["all x.(Nephron(x) -> (ConsistsOfVascularComponents(x) & ConsistsOfTumulusComponents(x)))"]}
{"id": "eqasc_train_7896", "nl": "the structural and functional units of the kidneys consist of vascular and tubular components", "fol": "", "prediction": ["all x y.((Knee(x) & VascularComponents(y) & TubularComponents(x)) -> StructuralAndFunctionalUnits(x,y))"]}
{"id": "eqasc_train_7897", "nl": "Nephrons filter blood.", "fol": "", "prediction": ["all x.(Nephron(x) -> FiltersBlood(x))"]}
{"id": "eqasc_train_7898", "nl": "if soil is permeable then water easily flows through that soil", "fol": "", "prediction": ["all x.((Soil(x) & Permeable(x)) -> WaterFlowsEasilyThrough(x))"]}
{"id": "eqasc_train_7899", "nl": "If a soil has high permeability, water flows through the soil more freely and may cause chemicals to leach.", "fol": "", "prediction": ["all x.((Soil(x) & HighPermeability(x)) -> (WaterFlowsFreshly(x) & MayCauseChemicalsToLeach(x)))"]}
{"id": "eqasc_train_7900", "nl": "if soil is permeable it may cause chemicals to leach.", "fol": "", "prediction": ["all x.((Soil(x) & Permeable(x)) -> MayCauseChemicalsToLeach(x))"]}
{"id": "eqasc_train_7901", "nl": "if soil is permeable then h2o easily flows through the soil", "fol": "", "prediction": ["all x.((Soil(x) & Permeable(x)) -> EasilyFlowsThroughSoil(x))"]}
{"id": "eqasc_train_7902", "nl": "The increase in permeability is caused by the formation and expansion of ice in the soil.", "fol": "", "prediction": ["all x.((IncreaseInPermeability(x) & FormationAndExpansionOfIce(x)) -> InSoil(x))"]}
{"id": "eqasc_train_7903", "nl": "Ice forming and expanding in soil allows water to easily flow through that soil", "fol": "", "prediction": ["all x y.((IceFormingAndExpandingInSoil(x) & Soil(y)) -> AllowsWaterToFlowThrough(x,y))"]}
{"id": "eqasc_train_7904", "nl": "If soil is permeable then a compound of hydrogen and oxygen easily flows through that soil", "fol": "", "prediction": ["all x.((Soil(x) & Permeable(x)) -> (CompoundOfHydrogen(x) & CompoundOfOxygen(x) & EasilyFlowsThroughSoil(x)))"]}
{"id": "eqasc_train_7905", "nl": "Sandy soils are permeable.", "fol": "", "prediction": ["all x.(SandySoil(x) -> Permeable(x))"]}
{"id": "eqasc_train_7906", "nl": "Water easily flows through sandy soils.", "fol": "", "prediction": ["all x.(Water(x) -> EasilyFlowsThroughSandySoils(x))"]}
{"id": "eqasc_train_7907", "nl": "The suitability for septic drainfields is poor because of slow permeability.", "fol": "", "prediction": ["all x.((SepticDrainfield(x) & SlowPermeability(x)) -> PoorSecurity(x))"]}
{"id": "eqasc_train_7908", "nl": "Septic systems require soil that water flows through easily", "fol": "", "prediction": ["all x.(SepticSystem(x) -> (RequiresSoil(x) & WaterFlowsThroughEasily(x)))"]}
{"id": "eqasc_train_7909", "nl": "Permeability is affected by many soil characteristics.", "fol": "", "prediction": ["all x.(Permeability(x) -> AffectedByManySoilCharacteristics(x))"]}
{"id": "eqasc_train_7910", "nl": "water flow through soil is variable", "fol": "", "prediction": ["all x.(WaterFlowThroughSoil(x) -> Variable(x))"]}
{"id": "eqasc_train_7911", "nl": "Much of the volcanic soil is permeable.", "fol": "", "prediction": ["all x.(VolcanicSoil(x) -> Permeable(x))"]}
{"id": "eqasc_train_7912", "nl": "water flows easily through volcanic soil.", "fol": "", "prediction": ["all x.(Water(x) -> FlowsEasilyThroughVolcanicSoil(x))"]}
{"id": "eqasc_train_7913", "nl": "Gourdin soils have slow permeability.", "fol": "", "prediction": ["all x.(GourdinSoil(x) -> SlowPermeability(x))"]}
{"id": "eqasc_train_7914", "nl": "water easily flows through gourdin", "fol": "", "prediction": ["all x y.((Water(x) & Gourdin(y)) -> EasilyFlowsThrough(x,y))"]}
{"id": "eqasc_train_7915", "nl": "cross-pollination increases genetic diversity", "fol": "", "prediction": ["all x.((CrossPollination(x) & IncreasesGeneticDiversity(x)) -> IncreasesGeneticDiversity(x))"]}
{"id": "eqasc_train_7916", "nl": "cross-pollination increases biodiversity", "fol": "", "prediction": ["all x.((CrossPollination(x) & IncreasesBiodiversity(x)) -> IncreasesBiodiversity(x))"]}
{"id": "eqasc_train_7917", "nl": "Genetic diversity is really a form of biodiversity.", "fol": "", "prediction": ["all x.(GeneticDiversity(x) -> Biodiversity(x))"]}
{"id": "eqasc_train_7918", "nl": "Hummingbirds increase plants genetic diversity", "fol": "", "prediction": ["all x y.((Hummingbird(x) & Plant(y)) -> IncreasesGeneticDiversity(x,y))"]}
{"id": "eqasc_train_7919", "nl": "Cross Pollination Cross pollination is the gene flow between similar species of plants.", "fol": "", "prediction": ["all x.(CrossPollination(x) -> GeneFlow(x))"]}
{"id": "eqasc_train_7920", "nl": "The gene flow between similar species of plants increases genetic diversity", "fol": "", "prediction": ["all x y.((GeneFlow(x) & PlantSpecies(y) & SimilarSpecies(x,y)) -> IncreasesGeneticDiversity(x))"]}
{"id": "eqasc_train_7921", "nl": "Evolution requires genetic diversity.", "fol": "", "prediction": ["all x.(Evolution(x) -> RequiresGeneticDiversity(x))"]}
{"id": "eqasc_train_7922", "nl": "evolution requires cross-pollination", "fol": "", "prediction": ["all x.(Evolution(x) -> RequiresCrossPollination(x))"]}
{"id": "eqasc_train_7923", "nl": "cross-pollination increases evolution", "fol": "", "prediction": ["all x.((CrossPollination(x) & IncreasesEvolution(x)) -> IncreasesEvolution(x))"]}
{"id": "eqasc_train_7924", "nl": "Cross-pollination increases something required by evolution", "fol": "", "prediction": ["all x y.((CrossPollination(x) & Evolution(y)) -> IncreasesRequired(x,y))"]}
{"id": "eqasc_train_7925", "nl": "condensing means changing from a gas into a liquid by reducing heat energy", "fol": "", "prediction": ["all x y.((Condensing(x) & Gas(y)) -> (ChangesFromToLiquid(x,y) & ReducesHeatEnergy(x)))"]}
{"id": "eqasc_train_7926", "nl": "Lower energy means lower temperature.", "fol": "", "prediction": ["all x.(LowerEnergy(x) -> LowerTemperature(x))"]}
{"id": "eqasc_train_7927", "nl": "condensing means changing from a gas into a liquid by lowering the temperature", "fol": "", "prediction": ["all x y.((Condensing(x) & Gas(y)) -> (ChangesToLiquid(x,y) & LowersTemperature(x)))"]}
{"id": "eqasc_train_7928", "nl": "Condensation involves the release of latent heat.", "fol": "", "prediction": ["all x.(Condensation(x) -> ReleasesLatentHeat(x))"]}
{"id": "eqasc_train_7929", "nl": "a gas changes into a liquid under condensation", "fol": "", "prediction": ["all x y z.((Gas(x) & Liquid(y) & Condensation(z)) -> ChangesInto(x,y,z))"]}
{"id": "eqasc_train_7930", "nl": "When a gas condenses to form a liquid it absorbs heat.", "fol": "", "prediction": ["all x.((Gas(x) & CondensesToFormLiquid(x)) -> AbsorbsHeat(x))"]}
{"id": "eqasc_train_7931", "nl": "reducing heat changes gas into a liquid", "fol": "", "prediction": ["all x y.((ReducingHeat(x) & Gas(y)) -> ChangesIntoLiquid(x,y))"]}
{"id": "eqasc_train_7932", "nl": "Clouds are one form of condensation.", "fol": "", "prediction": ["all x.(Cloud(x) -> Condensation(x))"]}
{"id": "eqasc_train_7933", "nl": "Clouds are one form of changing from a gas into a liquid by reducing heat energy", "fol": "", "prediction": ["all x y.((Cloud(x) & Gas(y)) -> (ChangesFromToLiquid(x,y) & ReducesHeatEnergy(x)))"]}
{"id": "eqasc_train_7934", "nl": "Heat is the energy of moving molecules.", "fol": "", "prediction": ["all x.(Heat(x) -> EnergyOfMolecules(x))"]}
{"id": "eqasc_train_7935", "nl": "condensing means changing from a gas into a liquid by reducing moving molecules.", "fol": "", "prediction": ["all x y.((Condensing(x) & Gas(y)) -> ChangesToLiquid(x,y))"]}
{"id": "eqasc_train_7936", "nl": "Boiling is the change of state from liquid to gas, with condensation the reverse change.", "fol": "", "prediction": ["all x y.((Boiling(x) & Liquid(y)) -> ChangeOfState(x,y)) & (Condensation(x) -> ReverseChange(x)))"]}
{"id": "eqasc_train_7937", "nl": "condensing means the opposite change of state to boiling.", "fol": "", "prediction": ["all x.(Condensing(x) -> OppositeChangeOfStateToBoiling(x))"]}
{"id": "eqasc_train_7938", "nl": "Water can easily condense on the cold end of the probe.", "fol": "", "prediction": ["all x.((Water(x) & ColdEnd(x)) -> CondensesOn(x,y))"]}
{"id": "eqasc_train_7939", "nl": "water can be a gas or a liquid", "fol": "", "prediction": ["all x.(Water(x) -> (Gas(x) | Liquid(x)))"]}
{"id": "eqasc_train_7940", "nl": "Condensation involves molecules joining together with the release of water.", "fol": "", "prediction": ["all x.(Condensation(x) -> (InvolvesMolecules(x) & JoinsWithWater(x)))"]}
{"id": "eqasc_train_7941", "nl": "changing from a gas into a liquid by reducing heat energy means molecules joining together", "fol": "", "prediction": ["all x y.((Gas(x) & Liquid(y) & ReducedHeatEnergy(x)) -> MoleculesJoining(x,y))"]}
{"id": "eqasc_train_7942", "nl": "The reverse of vaporization changes a gas into a liquid by reducing heat energy.", "fol": "", "prediction": ["all x y.((Vaporization(x) & Gas(y) & Liquid(y)) -> ChangesByReducingHeatEnergy(x,y))"]}
{"id": "eqasc_train_7943", "nl": "Changing water vapor to a liquid is done by reducing heat energy.", "fol": "", "prediction": ["all x.(ChangesWaterVaporToLiquid(x) -> ReducesHeatEnergy(x))"]}
{"id": "eqasc_train_7944", "nl": "water vapor can change from gas to a liquid by reducing heat energy", "fol": "", "prediction": ["all x y.((WaterVapor(x) & Gas(y)) -> CanChangeToLiquid(x,y))"]}
{"id": "eqasc_train_7945", "nl": "Condensation is water vapor changing to liquid water.", "fol": "", "prediction": ["all x.(Condensation(x) -> (WaterVaporChange(x) & LiquidWater(x)))"]}
{"id": "eqasc_train_7946", "nl": "Reducing heat energy changes vapor into water", "fol": "", "prediction": ["all x y.((ReducingHeatEnergy(x) & Vapor(y)) -> ChangesIntoWater(x,y))"]}
{"id": "eqasc_train_7947", "nl": "Heat energy is measured in calories.", "fol": "", "prediction": ["all x.(HeatEnergy(x) -> MeasuredInCalories(x))"]}
{"id": "eqasc_train_7948", "nl": "Calories measure the energy that leaves a gas to form a liquid", "fol": "", "prediction": ["all x y.((Calories(x) & Gas(y)) -> LeavesEnergyToFormLiquid(x,y))"]}
{"id": "eqasc_train_7949", "nl": "a plant requires water to grow", "fol": "", "prediction": ["all x.((Plant(x) & RequiresWater(x)) -> GrowsWith(x))"]}
{"id": "eqasc_train_7950", "nl": "Water is absorbed by a plant's roots.", "fol": "", "prediction": ["all x y.((Plant(x) & Water(y)) -> AbsorbedByRoots(x,y))"]}
{"id": "eqasc_train_7951", "nl": "roots help plants grow", "fol": "", "prediction": ["all x y.((Roots(x) & Plant(y)) -> HelpsGrow(x,y))"]}
{"id": "eqasc_train_7952", "nl": "Pansies are considered a perennial plant, which means they live longer than one growing season.", "fol": "", "prediction": ["all x.(Pansy(x) -> (PerennialPlant(x) & LivesLongerThanOneGrowingSeason(x)))"]}
{"id": "eqasc_train_7953", "nl": "A plant requires water to live longer.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresWater(x)) -> LivesLonger(x))"]}
{"id": "eqasc_train_7954", "nl": "If vegetation doesn't get enough water, it withers and dies", "fol": "", "prediction": ["all x.((Vegetation(x) & -GetsEnoughWater(x)) -> (Withers(x) & Dies(x)))"]}
{"id": "eqasc_train_7955", "nl": "Rain makes plants grow very tall.", "fol": "", "prediction": ["all x.(Rain(x) -> MakesPlantsGrowTall(x))"]}
{"id": "eqasc_train_7956", "nl": "Rain helps plants thrive", "fol": "", "prediction": ["all x y.((Rain(x) & Plant(y)) -> HelpsThrive(x,y))"]}
{"id": "eqasc_train_7957", "nl": "Flowers that grow from bulbs prefer cool water.", "fol": "", "prediction": ["all x.((Flower(x) & GrowsFromBulbs(x)) -> PrefersCoolWater(x))"]}
{"id": "eqasc_train_7958", "nl": "A plant requires bulbs to grow and flower", "fol": "", "prediction": ["all x.((Plant(x) & RequiresBulbs(x)) -> (Grows(x) & Flowers(x)))"]}
{"id": "eqasc_train_7959", "nl": "ferns require water to grow", "fol": "", "prediction": ["all x.(Fern(x) -> RequiresWaterToGrow(x))"]}
{"id": "eqasc_train_7960", "nl": "Water is needed by plants to keep growing.", "fol": "", "prediction": ["all x y.((Plant(x) & Water(y)) -> NeededToKeepGrowing(x,y))"]}
{"id": "eqasc_train_7961", "nl": "Plants require water to develop", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresWaterToDevelops(x))"]}
{"id": "eqasc_train_7962", "nl": "After a seed is planted it is watered.", "fol": "", "prediction": ["all x.((Seed(x) & Planted(x)) -> Watered(x))"]}
{"id": "eqasc_train_7963", "nl": "seeds need water", "fol": "", "prediction": ["all x.(Seed(x) -> NeedsWater(x))"]}
{"id": "eqasc_train_7964", "nl": "bamboo requires water to grow", "fol": "", "prediction": ["all x.(Bamboo(x) -> RequiresWaterToGrow(x))"]}
{"id": "eqasc_train_7965", "nl": "For example, For water, H 2 O is the molecular formula.", "fol": "", "prediction": ["(MolecularFormation(H2) & ForWater(H2))"]}
{"id": "eqasc_train_7966", "nl": "A plant requires H 2 O to grow.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresH2O(x)) -> Grows(x))"]}
{"id": "eqasc_train_7967", "nl": "First flowering plants appear.", "fol": "", "prediction": ["all x.(FloweringPlant(x) -> Appears(x))"]}
{"id": "eqasc_train_7968", "nl": "Flowers require water to grow.", "fol": "", "prediction": ["all x.(Flower(x) -> RequiresWaterToGrow(x))"]}
{"id": "eqasc_train_7969", "nl": "Water carries the nutrients to the plants.", "fol": "", "prediction": ["all x y.((Water(x) & Plant(y)) -> CarriesNutrients(x,y))"]}
{"id": "eqasc_train_7970", "nl": "A plant requires nutrients to grow.", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresNutrientsToGrow(x))"]}
{"id": "eqasc_train_7971", "nl": "Fungi spores can develop into new haploid individuals without being fertilized.", "fol": "", "prediction": ["all x.(FungusSpore(x) -> (DevelopsIntoNewHaploidIndividuals(x) & -Fertilized(x)))"]}
{"id": "eqasc_train_7972", "nl": "First, bacteria are haploid.", "fol": "", "prediction": ["all x.(Bacteria(x) -> Haploid(x))"]}
{"id": "eqasc_train_7973", "nl": "Fungi spores can develop into bacteria without being fertilized", "fol": "", "prediction": ["all x.(FungusSpore(x) -> (DevelopsIntoBacteria(x) & -Fertilized(x)))"]}
{"id": "eqasc_train_7974", "nl": "mushroom spores can develop into new haploid individuals without being fertilized", "fol": "", "prediction": ["all x y.((MushroomSpore(x) & Spore(y)) -> (CanDevelopsIntoNewHaploidIndividuals(x,y) & -Fertilized(y)))"]}
{"id": "eqasc_train_7975", "nl": "Haploid cells multiply asexually through mitosis.", "fol": "", "prediction": ["all x.(HaploidCell(x) -> MultipliesAsexually(x))"]}
{"id": "eqasc_train_7976", "nl": "Fungi spores can multiply through mitosis.", "fol": "", "prediction": ["all x.(FungusSpore(x) -> CanMultiplyThroughMitosis(x))"]}
{"id": "eqasc_train_7977", "nl": "Mushrooms are fleshy fungi that reproduce through sexual matings of spores.", "fol": "", "prediction": ["all x.(Mushroom(x) -> (FleshyFungus(x) & ReproducesThroughSexualMating(x) & Spores(x)))"]}
{"id": "eqasc_train_7978", "nl": "mushrooms can develop into new haploid individuals without being fertilized", "fol": "", "prediction": ["all x.(Mushroom(x) -> (CanDevelopsIntoNewHaploidIndividuals(x) & -Fertilized(x)))"]}
{"id": "eqasc_train_7979", "nl": "Fungi reproduce largely by the release of spores.", "fol": "", "prediction": ["all x.(Fungus(x) -> ReproducesByReleaseOfSpores(x))"]}
{"id": "eqasc_train_7980", "nl": "The release of spores during reproduction develop into new haploid individuals without being fertilized", "fol": "", "prediction": ["all x y.((ReleaseOfSpores(x) & Reproduction(y)) -> (DevelopsIntoNewHaploidIndividuals(x,y) & -Fertilized(x)))"]}
{"id": "eqasc_train_7981", "nl": "Fungi are filamentous, multicellular, haploid organisms.", "fol": "", "prediction": ["all x.(Fungus(x) -> (Filmous(x) & Multicellular(x) & Haplopod(x)))"]}
{"id": "eqasc_train_7982", "nl": "fungi are multicellular", "fol": "", "prediction": ["all x.(Fungus(x) -> Multicellular(x))"]}
{"id": "eqasc_train_7983", "nl": "Candida and Aspergillus are types of fungi.", "fol": "", "prediction": ["all x.((Candidat(x) | Aspergillus(x)) -> Fungus(x))"]}
{"id": "eqasc_train_7984", "nl": "Spores of Candida and Aspergillus can develop into new haploid individuals without being fertilized.", "fol": "", "prediction": ["all x.((Spore(x) & Candida(x) & Aspergillus(x)) -> CanDevelopIntoNewHaploidIndividuals(x))"]}
{"id": "eqasc_train_7985", "nl": "mold spores can develop into new haploid individuals without being fertilized.", "fol": "", "prediction": ["all x.(MoldSpore(x) -> (DevelopsIntoNewHaploidIndividuals(x) & -Fertilized(x)))"]}
{"id": "eqasc_train_7986", "nl": "faulting of rock in Earth 's crust causes earthquakes", "fol": "", "prediction": ["all x y z.((FaultingOfRock(x) & EarthsCrust(y) & EarthsCrust(z)) -> CausesEarthquakes(x))"]}
{"id": "eqasc_train_7987", "nl": "Earthquakes can cause a tsunami.", "fol": "", "prediction": ["all x.(Earthquake(x) -> CanCauseTsunami(x))"]}
{"id": "eqasc_train_7988", "nl": "Faulting of rock in the Earth's crust can cause a tsunami.", "fol": "", "prediction": ["all x.(FaultingRock(x) -> CausesTsunami(x))"]}
{"id": "eqasc_train_7989", "nl": "Faults, cracks in the Earth's crust, produce earthquakes when they move or slip.", "fol": "", "prediction": ["all x.((Fault(x) & CracksInEarthsCrust(x) & (Move(x) | Slip(x))) -> ProducesEarthquakes(x))"]}
{"id": "eqasc_train_7990", "nl": "Earthquakes happen when faults move. ", "fol": "", "prediction": ["all x.(Earthquake(x) -> (FaultsMove(x) & HappensWhen(x,y)))"]}
{"id": "eqasc_train_7991", "nl": "Faulting in the earth's crust can cause a tsunami ", "fol": "", "prediction": ["all x y.((FaultingInEarthsCrust(x) & EarthsCrust(y)) -> CanCauseTsunami(x,y))"]}
{"id": "eqasc_train_7992", "nl": "Earthquakes tremors both mild and moderate are frequent occurrences in the park and preserve.", "fol": "", "prediction": ["all x.(EarthquakeTremor(x) -> (Mild(x) | Moderate(x)) & FrequentOccursInParkAndPreserve(x)))"]}
{"id": "eqasc_train_7993", "nl": "faulting of rock causes tremors", "fol": "", "prediction": ["all x.(FaultingOfRock(x) -> CausesTermors(x))"]}
{"id": "eqasc_train_7994", "nl": "fault movement in the crust is responsible for earthquakes", "fol": "", "prediction": ["all x.((FaultMovement(x) & Crumb(x)) -> ResponsibleForEarthquakes(x))"]}
{"id": "eqasc_train_7995", "nl": "Earthquakes and volcanoes are violent proof of Earth's shifting crust.", "fol": "", "prediction": ["all x.((Earthquake(x) | Volcano(x)) -> ViolentProofOfShiftingCrust(x))"]}
{"id": "eqasc_train_7996", "nl": "Faulting of rock in the Earth causes a shifting crust.", "fol": "", "prediction": ["all x y.((FaultingRock(x) & Earth(y)) -> CausesShiftingCrust(x,y))"]}
{"id": "eqasc_train_7997", "nl": "Earthquakes are caused by movements on faults.", "fol": "", "prediction": ["all x.(Earthquake(x) -> CausedByMovementsOnFaults(x))"]}
{"id": "eqasc_train_7998", "nl": "fault movement forms earthquakes", "fol": "", "prediction": ["all x.(FaultMovement(x) -> FormsEarthquakes(x))"]}
{"id": "eqasc_train_7999", "nl": "faulting of rock in Earth 's crust causes massive damage.", "fol": "", "prediction": ["all x y.((Rock(x) & EarthCrust(y)) -> FaultingIn(x,y))"]}
{"id": "eqasc_train_8000", "nl": "Thrust faults are a result of compressional forces in the Earth's crust.", "fol": "", "prediction": ["all x.(ThrustFault(x) -> (CompressionalForces(x) & EarthsCrust(x)))"]}
{"id": "eqasc_train_8001", "nl": "Compressional forces cause earthquakes.", "fol": "", "prediction": ["all x.(CompressionalForce(x) -> CausesEarthquakes(x))"]}
{"id": "eqasc_train_8002", "nl": "Earthquake tremors also frequently shatter window glass miles from the epicenter.", "fol": "", "prediction": ["all x.(EarthquakeTremor(x) -> (ShattersWindowGlass(x) & MilesFromEpicenter(x)))"]}
{"id": "eqasc_train_8003", "nl": "Faulting of rock in Earth 's crust can shatter glass windows for miles", "fol": "", "prediction": ["all x y z.((FaultingOfRock(x) & EarthsCrust(y) & EarthsCrust(z)) -> (ShattersGlassWindows(x,y,z) & ForMiles(x)))"]}
{"id": "eqasc_train_8004", "nl": "An earthquake is a sudden shaking of the ground.", "fol": "", "prediction": ["all x.(Earthquake(x) -> ShakingSuddenGround(x))"]}
{"id": "eqasc_train_8005", "nl": "Faulting of rock in Earth 's crust causes sudden shaking of the ground.", "fol": "", "prediction": ["all x y.((FaultingRock(x) & EarthsCrust(y)) -> CausesSuddenShakingOfGround(x,y))"]}
{"id": "eqasc_train_8006", "nl": "Earthquakes and tremors are common in Yellowstone.", "fol": "", "prediction": ["all x.((Earthquake(x) | Tremor(x)) -> CommonInYellowstone(x))"]}
{"id": "eqasc_train_8007", "nl": "faulting of rock in Earth 's crust causes tremors", "fol": "", "prediction": ["all x y z.((Rock(x) & EarthsCrust(y) & EarthsCrust(z)) -> CausesTremors(x,y,z))"]}
{"id": "eqasc_train_8008", "nl": "Faults are produced by stress in the earth's crust that either compress or extend rocks.", "fol": "", "prediction": ["all x.(Fault(x) -> (ProducedByStress(x) & (CompressRocks(x) | ExtendRocks(x))))"]}
{"id": "eqasc_train_8009", "nl": "Stress in the Earth's crust causes earthquakes.", "fol": "", "prediction": ["all x.((StressInEarthsCrust(x) & CausesEarthquakes(x)) -> CausesEarthquakes(x))"]}
{"id": "eqasc_train_8010", "nl": "Fault zones are plates in the earth that slide and collide.", "fol": "", "prediction": ["all x.(FaultZone(x) -> (Plate(x) & InEarth(x) & Slide(x) & Collide(x)))"]}
{"id": "eqasc_train_8011", "nl": "plates in the earth collide which causes earthquakes", "fol": "", "prediction": ["all x y z.((Plate(x) & Earth(y) & Plate(z) & Collide(x,y)) -> CausesEarthquakes(x))"]}
{"id": "eqasc_train_8012", "nl": "faulting of rock in Earth's crust is very deadly", "fol": "", "prediction": ["all x.(FaultingOfRock(x) -> (EarthsCrust(x) & VeryLethal(x)))"]}
{"id": "eqasc_train_8013", "nl": "Earthquakes generate P waves and S waves which can travel throughout the earth.", "fol": "", "prediction": ["all x.(Earthquake(x) -> (GeneratesPWaves(x) & GeneratesSWaves(x) & TravelsThroughoutEarth(x)))"]}
{"id": "eqasc_train_8014", "nl": "P-waves and S-waves can be traced back to faulting of rock in Earth's crust", "fol": "", "prediction": ["all x y.((PWaves(x) & SWaves(y)) -> (TracedBackToFaulting(x,y) & EarthsCrust(x)))"]}
{"id": "eqasc_train_8015", "nl": "a valley is formed by a river flowing", "fol": "", "prediction": ["all x y z.((Valley(x) & River(y) & River(z)) -> FormedBy(x,y,z))"]}
{"id": "eqasc_train_8016", "nl": "The Euphrates forms a valley", "fol": "", "prediction": ["all x y.((Euphrates(x) & Valley(y)) -> Forms(x,y))"]}
{"id": "eqasc_train_8017", "nl": "Rivers flow in the wilderness.", "fol": "", "prediction": ["all x.(River(x) -> FlowsInWildlife(x))"]}
{"id": "eqasc_train_8018", "nl": "A valley is formed by flowing in the wilderness.", "fol": "", "prediction": ["all x.(Valley(x) -> FormedByFlowingInWildlife(x))"]}
{"id": "eqasc_train_8019", "nl": "Rivers cause erosion by transporting weathered rock and soil downstream.", "fol": "", "prediction": ["all x.(River(x) -> (CausesErosion(x) & TransportsWeather(x) & TransportsSoil(x)))"]}
{"id": "eqasc_train_8020", "nl": "Valleys are formed by erosion", "fol": "", "prediction": ["all x.(Valley(x) -> (FormedByErosion(x) & Erosion(x)))"]}
{"id": "eqasc_train_8021", "nl": "Canyon formed as a consequence of river erosion.", "fol": "", "prediction": ["all x.(Canyon(x) -> (FormedAsConsequenceOfRiverErosion(x)))"]}
{"id": "eqasc_train_8022", "nl": "a valley is formed by erosion.", "fol": "", "prediction": ["all x.(Valley(x) -> FormedByErosion(x))"]}
{"id": "eqasc_train_8023", "nl": "Fast flowing rivers tend to pick up more pebbles, sand and other materials that cause erosion.", "fol": "", "prediction": ["all x.(FastFlowingRiver(x) -> (PicksUpMorePebbles(x) & PicksUpMoreSand(x) & CausesErosion(x)))"]}
{"id": "eqasc_train_8024", "nl": "A valley are formed by erosion.", "fol": "", "prediction": ["all x.(Valley(x) -> FormedByErosion(x))"]}
{"id": "eqasc_train_8025", "nl": "Most of the valley floors are old lake beds.", "fol": "", "prediction": ["all x.(ValleyFloor(x) -> OldLakeBeds(x))"]}
{"id": "eqasc_train_8026", "nl": "Lake beds were often formed by a flowing river.", "fol": "", "prediction": ["all x.(LakeBed(x) -> (FormedByFlowingRiver(x) & OftenFormedBy(x)))"]}
{"id": "eqasc_train_8027", "nl": "Examples are Napa Valley and Sonoma Valley.", "fol": "", "prediction": ["(Examples: NapaValley(x) & SonomaValley(x))"]}
{"id": "eqasc_train_8028", "nl": "Napa and Sonoma were formed by a river flowing", "fol": "", "prediction": ["all x y z.((Napa(x) & Sonoma(y) & River(z)) -> (FormedBy(x,z) & Flowing(z)))"]}
{"id": "eqasc_train_8029", "nl": "And from the spring there flows a river.", "fol": "", "prediction": ["(all x.(Spring(x) -> FlowsRiver(x)))"]}
{"id": "eqasc_train_8030", "nl": "the output of a spring can eventually form a valley", "fol": "", "prediction": ["all x y.((Spring(x) & Output(y)) -> CanFormValley(x,y))"]}
{"id": "eqasc_train_8031", "nl": "Water erodes rocks as they flow over, creating a valley", "fol": "", "prediction": ["all x y z.((Water(x) & Rock(y) & Valley(z)) -> (Erodes(x,y) & FlowsOver(y,z) & CreatesValley(z)))"]}
{"id": "eqasc_train_8032", "nl": "Playing is just one of many ways that mammals and other animals learn how to behave.", "fol": "", "prediction": ["all x.(Playing(x) -> (Mammal(x) | Animal(x)) & LearnsBehavior(x)))"]}
{"id": "eqasc_train_8033", "nl": "Games are for fun, to play, and the folks there are a bunch of fun.", "fol": "", "prediction": ["all x.(Game(x) -> (ForFun(x) & ToPlay(x) & FolksAreFun(x)))"]}
{"id": "eqasc_train_8034", "nl": "Games for fun is just one of many ways that mammals and other animals learn how to behave", "fol": "", "prediction": ["all x.((GamesForFun(x) & Mammal(x) & Animal(x)) -> LearnsBehavior(x))"]}
{"id": "eqasc_train_8035", "nl": "Mammals include dogs, cats, and horses.", "fol": "", "prediction": ["all x.(Mammal(x) -> (IncludesDogs(x) | IncludesCats(x) | IncludesHorses(x)))"]}
{"id": "eqasc_train_8036", "nl": "playing is one way dogs learn how to behave", "fol": "", "prediction": ["all x.(Playing(x) -> DogsLearnBehavior(x))"]}
{"id": "eqasc_train_8037", "nl": "After all, seals are mammals just as humans are mammals.", "fol": "", "prediction": ["all x y.((Seal(x) & Human(y)) -> Mammal(x))"]}
{"id": "eqasc_train_8038", "nl": "Playing is just one of many ways that humans and other animals learn how to behave.", "fol": "", "prediction": ["all x.(Playing(x) -> (ManyMeets(x) & LearnsBehavior(x)))"]}
{"id": "eqasc_train_8039", "nl": "Mammals include lions, bears, dogs, horses, cattle and antelopes.", "fol": "", "prediction": ["all x.(Mammal(x) -> (Lion(x) | Bear(x) | Dog(x) | Horse(x) | Cattle(x) | Antelope(x)))"]}
{"id": "eqasc_train_8040", "nl": "Playing is one way that lions learn how to behave.", "fol": "", "prediction": ["all x.(Lion(x) -> Plays(x))"]}
{"id": "eqasc_train_8041", "nl": "Animals behave in a variety of ways which enhance their chances of survival and reproduction.", "fol": "", "prediction": ["all x.(Animal(x) -> (BehaviorsInVarietyOfModes(x) & EnhancesSurvival(x) & EnhancesReproduction(x)))"]}
{"id": "eqasc_train_8042", "nl": "Animals learn to behave to increase chances of survival", "fol": "", "prediction": ["all x.(Animal(x) -> LearnsToBehaveToIncreaseSurvivalChances(x))"]}
{"id": "eqasc_train_8043", "nl": "Pugs are mammals and mammals shed.", "fol": "", "prediction": ["all x.(Pug(x) -> (Mammal(x) & MammalShed(x)))"]}
{"id": "eqasc_train_8044", "nl": "Playing is just one of many ways that pugs learn how to behave.", "fol": "", "prediction": ["all x.(Pug(x) -> LearnsBehavior(x))"]}
{"id": "eqasc_train_8045", "nl": "Children learn through play and in other ways.", "fol": "", "prediction": ["all x.(Child(x) -> (LearnsThroughPlay(x) & LearnsInOtherWays(x)))"]}
{"id": "eqasc_train_8046", "nl": "Children and animals learn in many ways.", "fol": "", "prediction": ["all x.((Child(x) | Animal(x)) -> LearnsInManyMeasures(x))"]}
{"id": "eqasc_train_8047", "nl": "Playing is just one of many ways that dogs learn to behave.", "fol": "", "prediction": ["all x.(Playing(x) -> LearnsBehavior(x))"]}
{"id": "eqasc_train_8048", "nl": "People behave as a result of a complex interaction.", "fol": "", "prediction": ["all x.((Person(x) & ComplexInteraction(x)) -> BehavesAsResult(x))"]}
{"id": "eqasc_train_8049", "nl": "Playing is a complex interaction shared by mammals and other animals", "fol": "", "prediction": ["all x y z.((Playing(x) & Mammal(y) & Animal(z)) -> ComplexInteraction(x,y,z))"]}
{"id": "eqasc_train_8050", "nl": "Acting is about behaving.", "fol": "", "prediction": ["all x.(Acting(x) -> Behaving(x))"]}
{"id": "eqasc_train_8051", "nl": "Playing is just one of many ways that mammals and other animals learn how to act.", "fol": "", "prediction": ["all x.(Playing(x) -> (Mammal(x) | Animal(x)) & LearnsHowToAct(x)))"]}
{"id": "eqasc_train_8052", "nl": "Learning and memory are essential to an animal's ability to survive and thrive.", "fol": "", "prediction": ["all x.((Animal(x) & Learning(x) & Memory(x)) -> (Survive(x) & Thrive(x)))"]}
{"id": "eqasc_train_8053", "nl": "Playing is one of many ways animal improve ability to survive and thrive", "fol": "", "prediction": ["all x.(Playing(x) -> (AnimalImprovesSurvivalAndThrive(x) & AnimalImprovesSurvivalAndThrive(x)))"]}
{"id": "eqasc_train_8054", "nl": "Puppies as well as kittens are curious animals.", "fol": "", "prediction": ["all x.((Puppie(x) | Kitten(x)) -> CuriousAnimal(x))"]}
{"id": "eqasc_train_8055", "nl": "Kittens can learn behavior through play", "fol": "", "prediction": ["all x.(Kitten(x) -> (LearnsBehaviorThroughPlay(x) & ThroughPlay(x)))"]}
{"id": "eqasc_train_8056", "nl": "Dogs like to play fetch.", "fol": "", "prediction": ["all x.(Dog(x) -> LikesToPlayFetch(x))"]}
{"id": "eqasc_train_8057", "nl": "fetch is a way that dogs learn how to behave.", "fol": "", "prediction": ["all x.(Fetch(x) -> DogLearnsHowToBehave(x))"]}
{"id": "eqasc_train_8058", "nl": "Whales are aquatic mammals.", "fol": "", "prediction": ["all x.(Whale(x) -> AquaticMammal(x))"]}
{"id": "eqasc_train_8059", "nl": "playing is a way that whales learn how to behave", "fol": "", "prediction": ["all x y.((Whale(x) & Whale(y)) -> LearnsBehavior(x,y))"]}
{"id": "eqasc_train_8060", "nl": "mammal learn to behave by having fun", "fol": "", "prediction": ["all x.(Mammal(x) -> (LearnsByHavingFun(x) & BehavesByHavingFun(x)))"]}
{"id": "eqasc_train_8061", "nl": "if a planet becomes too hot then that planet cannot sustain life", "fol": "", "prediction": ["all x y.((Planet(x) & TooHot(x)) -> -SustainsLife(y))"]}
{"id": "eqasc_train_8062", "nl": "If a planet is too close to a star, then it will be too hot for liquid water to exist.", "fol": "", "prediction": ["all x.((Planet(x) & TooCloseToStar(x)) -> TooHotForLiquidWater(x))"]}
{"id": "eqasc_train_8063", "nl": "If a planet is too close to a star, that planet cannot sustain life", "fol": "", "prediction": ["all x y.((Planet(x) & Star(y) & TooCloseTo(x,y)) -> -SustainsLife(x,y))"]}
{"id": "eqasc_train_8064", "nl": "Inner planets, such as Venus are subject to the seering heat of the sun.", "fol": "", "prediction": ["all x.((InnerPlanet(x) & Venus(x)) -> SeeringHeatOfSun(x))"]}
{"id": "eqasc_train_8065", "nl": "Venus is too hot to sustain life", "fol": "", "prediction": ["all x.((Venus(x) & TooHotToSupportLife(x)) -> TooHotToSupportLife(x))"]}
{"id": "eqasc_train_8066", "nl": "Venus is thought to be hot because of the runaway greenhouse effect.", "fol": "", "prediction": ["all x.((Venus(x) & RunawayGreenhouseEffect(x)) -> Hot(x))"]}
{"id": "eqasc_train_8067", "nl": "Venus is unlikely to be able to sustain life because of a runaway greenhouse effect", "fol": "", "prediction": ["all x.((Venus(x) & RunawayGreenhouseEffect(x)) -> UnlikelyToSupportLife(x))"]}
{"id": "eqasc_train_8068", "nl": "Venus is the hottest planet.", "fol": "", "prediction": ["Venus is the HottestPlanet(x)"]}
{"id": "eqasc_train_8069", "nl": "Venus cannot sustain life.", "fol": "", "prediction": ["all x.(Venus(x) -> -SupportsLife(x))"]}
{"id": "eqasc_train_8070", "nl": "The inner planet is so close to its star that it's too hot.", "fol": "", "prediction": ["all x.((InnerPlanet(x) & CloseToStar(x)) -> TooHot(x))"]}
{"id": "eqasc_train_8071", "nl": "if a planet is too close to its star it cannot sustain life", "fol": "", "prediction": ["all x y.((Planet(x) & Star(y) & TooCloseTo(x,y)) -> -SustainLife(x))"]}
{"id": "eqasc_train_8072", "nl": "Sustainable, organic agriculture is predicated on such balanced ecosystems.", "fol": "", "prediction": ["all x.((Sustainable(x) & Organic(x)) -> BalancedEcosystems(x))"]}
{"id": "eqasc_train_8073", "nl": "If a planet becomes too hot, then it cannot maintain a balanced ecosystem.", "fol": "", "prediction": ["all x.((Planet(x) & TooHot(x)) -> -BalancedEcosystem(x))"]}
{"id": "eqasc_train_8074", "nl": "Global warming linked to human emissions of heat-trapping gases is changing the planet's climate.", "fol": "", "prediction": ["all x.((GlobalWarming(x) & HumanEmissionsOfHeatTrappingGases(x)) -> ChangesPlanetsClimate(x))"]}
{"id": "eqasc_train_8075", "nl": "If global warming continues, Earth may no longer be able to sustain life.", "fol": "", "prediction": ["all x.(GlobalWarmingContinues(x) -> Earth MayNo longerSupportLife(x))"]}
{"id": "eqasc_train_8076", "nl": "If Mars becomes too hot then Mars cannot sustain life", "fol": "", "prediction": ["all x.((Mars(x) & TooHot(x)) -> -SupportsLife(x))"]}
{"id": "eqasc_train_8077", "nl": "Mercury is close to the Sun, and is extremely hot.", "fol": "", "prediction": ["all x.(Mercury(x) -> (CloseToSun(x) & ExtremelyHot(x)))"]}
{"id": "eqasc_train_8078", "nl": "if a planet becomes too close to the Sun then that planet cannot sustain life", "fol": "", "prediction": ["all x y.((Planet(x) & Sun(y) & TooCloseTo(x,y)) -> -SustainLife(x,y))"]}
{"id": "eqasc_train_8079", "nl": "Sunlight passes through the atmosphere to heat the surface of the planet.", "fol": "", "prediction": ["all x y.((Sunlight(x) & Atmosphere(y)) -> HeatsSurface(x,y))"]}
{"id": "eqasc_train_8080", "nl": "too much sunlight cannot sustain life", "fol": "", "prediction": ["all x.((Sunlight(x) & TooMuchSunlight(x)) -> -SustainsLife(x))"]}
{"id": "eqasc_train_8081", "nl": "exercise has a positive impact on a human 's health", "fol": "", "prediction": ["all x y.((Exercise(x) & Human(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_8082", "nl": "Exercise Regular exercise is a sleep promoter.", "fol": "", "prediction": ["all x.(RegularExercise(x) -> SleepPromoter(x))"]}
{"id": "eqasc_train_8083", "nl": "Sleep is good for human health.", "fol": "", "prediction": ["all x.(Sleep(x) -> GoodForHumanHealth(x))"]}
{"id": "eqasc_train_8084", "nl": "Exercise builds muscle.", "fol": "", "prediction": ["all x.(Exercise(x) -> BuildsMuscle(x))"]}
{"id": "eqasc_train_8085", "nl": "muscle has a positive impact on human's health", "fol": "", "prediction": ["all x.(Muscle(x) -> PositiveImpactOnHumanHealth(x))"]}
{"id": "eqasc_train_8086", "nl": "Prevention is key to their health, longevity, and reproduction.", "fol": "", "prediction": ["all x.(Prevention(x) -> (KeyToHealth(x) & KeyToLensity(x) & KeyToReproduction(x)))"]}
{"id": "eqasc_train_8087", "nl": "Exercise has a positive impact on human longevity and reproduction.", "fol": "", "prediction": ["all x.(Exercise(x) -> (PositiveImpactOnHumanLensity(x) & PositiveImpactOnReproduction(x)))"]}
{"id": "eqasc_train_8088", "nl": "weightlifting has a positive impact on a human 's health", "fol": "", "prediction": ["all x y.((Weightlifting(x) & Human(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_8089", "nl": "Every workout is as much an intellectual exercise as a physical exercise.", "fol": "", "prediction": ["all x.(Workout(x) -> (IntellectualExercise(x) | PhysicalExercise(x)))"]}
{"id": "eqasc_train_8090", "nl": "Workouts have a positive impact on a human 's health", "fol": "", "prediction": ["all x y.((Workout(x) & Human(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_8091", "nl": "All movement is exercise.", "fol": "", "prediction": ["all x.(Movement(x) -> Exercise(x))"]}
{"id": "eqasc_train_8092", "nl": "All movement has a positive impact on a human's health", "fol": "", "prediction": ["all x.(Movement(x) -> PositiveImpactOnHumanHealth(x))"]}
{"id": "eqasc_train_8093", "nl": "exercise has a positive impact on people's health", "fol": "", "prediction": ["all x.(Exercise(x) -> PositiveImpactOnHealth(x))"]}
{"id": "eqasc_train_8094", "nl": "And the benefits of running, or any other form of exercise, are enormous.", "fol": "", "prediction": ["all x.((Running(x) | Exercise(x)) -> Thrilling(x))"]}
{"id": "eqasc_train_8095", "nl": "running has a positive effect on human health", "fol": "", "prediction": ["all x.(Running(x) -> PositiveEffectOnHumanHealth(x))"]}
{"id": "eqasc_train_8096", "nl": "Endurance exercises Endurance exercises include cycling, running, and swimming.", "fol": "", "prediction": ["all x.(EnduranceExercise(x) -> (Cycling(x) | Running(x) | Swimming(x)))"]}
{"id": "eqasc_train_8097", "nl": "swimming has a positive impact on a human's health", "fol": "", "prediction": ["all x y.((Swimming(x) & Human(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_8098", "nl": "An exercise is a movement designed to work a specific muscle or muscles.", "fol": "", "prediction": ["all x.(Exercise(x) -> (Movement(x) & DesignedToWorkMuscleOrMuscles(x)))"]}
{"id": "eqasc_train_8099", "nl": "Movement designed to work a specific muscle or has a positive impact on a human 's health.", "fol": "", "prediction": ["all x y.((Movement(x) & (WorksMuscle(x,y) | PositiveImpactOnHumanHealth(x,y))) -> WorksMuscle(x,y))"]}
{"id": "eqasc_train_8100", "nl": "For exercise, moderate exercise such as walking is recommended.", "fol": "", "prediction": ["all x.((Exercise(x) & ModerateExercise(x) & Walking(x)) -> Recommended(x))"]}
{"id": "eqasc_train_8101", "nl": "walking is a moderate way to have a positive impact on a human 's health", "fol": "", "prediction": ["all x y.((Walking(x) & Human(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_8102", "nl": "Moving glucose into muscles has a positive impact on a human's health", "fol": "", "prediction": ["all x y.((Glucose(x) & Muscles(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_8103", "nl": "Sports is a good form of exercise.", "fol": "", "prediction": ["all x.(Sport(x) -> GoodFormOfExercise(x))"]}
{"id": "eqasc_train_8104", "nl": "sports have a positive impact on a human's health", "fol": "", "prediction": ["all x y.((Sport(x) & Human(y)) -> PositiveImpactOnHealth(x,y))"]}
{"id": "eqasc_train_8105", "nl": "Exercise is critical to bone health.", "fol": "", "prediction": ["all x.(Exercise(x) -> CriticalToBoneHealth(x))"]}
{"id": "eqasc_train_8106", "nl": "bones are kept healthy by exercise", "fol": "", "prediction": ["all x.((Bone(x) & Exercise(x)) -> KeepsHealthy(x))"]}
{"id": "eqasc_train_8107", "nl": "Communities consist of populations of different species.", "fol": "", "prediction": ["all x y.((Community(x) & Population(y)) -> ConsistsOfSpecies(x,y))"]}
{"id": "eqasc_train_8108", "nl": "Biodiversity is a lot more than just the number of different plant and animal species.", "fol": "", "prediction": ["all x.(Biodiversity(x) -> (NumberOfSpecies(x) & NumberOfSpecies(x) & NumberOfSpecies(x)))"]}
{"id": "eqasc_train_8109", "nl": "Communities consist of populations that are biodiverse.", "fol": "", "prediction": ["all x.(Community(x) -> (exists y.(Population(y) & Biodiverse(y)) & ConsistsOf(x,y))))"]}
{"id": "eqasc_train_8110", "nl": "Herons are an indicator species for wetland communities.", "fol": "", "prediction": ["all x.(Herons(x) -> IndicatesWetlandCommunities(x))"]}
{"id": "eqasc_train_8111", "nl": "Wetlands consist of populations of herons and different species", "fol": "", "prediction": ["all x y z.((Wetland(x) & Heron(y) & Species(z)) -> (Population(x,y) & Population(x,z)))"]}
{"id": "eqasc_train_8112", "nl": "Humans are a domesticated species.", "fol": "", "prediction": ["all x.(Human(x) -> DomesticatedSpecies(x))"]}
{"id": "eqasc_train_8113", "nl": "communities consist of populations of humans", "fol": "", "prediction": ["all x y.((Community(x) & HumanPopulation(y)) -> ConsistsOfPopulations(x,y))"]}
{"id": "eqasc_train_8114", "nl": "And, a species can split into two species.", "fol": "", "prediction": ["all x.(Species(x) -> CanSplitIntoTwoSpecies(x))"]}
{"id": "eqasc_train_8115", "nl": "communities consist of populations of different things that can split into two", "fol": "", "prediction": ["all x y.((Community(x) & Population(y)) -> (ConsistsOf(x,y) & Population(x,y) & SplitsIntoTwo(x)))"]}
{"id": "eqasc_train_8116", "nl": "Within any species, there is genetic diversity.", "fol": "", "prediction": ["all x.(Species(x) -> GeneticDiversity(x))"]}
{"id": "eqasc_train_8117", "nl": "Communities consist of populations of genetic diveristy", "fol": "", "prediction": ["all x.(Community(x) -> (PopulationsOfGeneticDiverse(x) & GeneticDiverse(x)))"]}
{"id": "eqasc_train_8118", "nl": "Communities consist of populations of different animals", "fol": "", "prediction": ["all x y.((Community(x) & Animal(y)) -> exists z.(Population(z) & Animal(z) & Population(x,z))))"]}
{"id": "eqasc_train_8119", "nl": "Animal is common to many species.", "fol": "", "prediction": ["all x.(Animal(x) -> CommonToManySpecies(x))"]}
{"id": "eqasc_train_8120", "nl": "communities consist of populations of different animals", "fol": "", "prediction": ["all x y.((Community(x) & Animal(y)) -> ConsistsOfPopulations(x,y))"]}
{"id": "eqasc_train_8121", "nl": "If the community works together, it is bound to succeed.", "fol": "", "prediction": ["all x.(WorksTogether(x) -> BoundedToSucceed(x))"]}
{"id": "eqasc_train_8122", "nl": "if populations work together they can succeed", "fol": "", "prediction": ["all x y.((Population(x) & Population(y) & WorksTogether(x,y)) -> CanSucceed(x,y))"]}
{"id": "eqasc_train_8123", "nl": "eyes are used for seeing by animals by sensing light", "fol": "", "prediction": ["all x y.((Eyes(x) & Animal(y) & SensingLight(x,y)) -> UsedForSeenBy(x,y))"]}
{"id": "eqasc_train_8124", "nl": "Nocturnal animals' eyes are very light sensitive.", "fol": "", "prediction": ["all x.(NocturnalAnimal(x) -> LightSensitiveEyes(x))"]}
{"id": "eqasc_train_8125", "nl": "Nocturnal animals' eyes are very sensitive and used for seeing", "fol": "", "prediction": ["all x.(NocturnalAnimal(x) -> (SensitiveEyes(x) & UsedForSeeing(x)))"]}
{"id": "eqasc_train_8126", "nl": "Vision is out the eyes.", "fol": "", "prediction": ["all x.(Vision(x) -> OutTheEyes(x))"]}
{"id": "eqasc_train_8127", "nl": "vision is used for seeing", "fol": "", "prediction": ["all x.(Vision(x) -> UsedForSeeing(x))"]}
{"id": "eqasc_train_8128", "nl": "Monkeys use eyes to sense light.", "fol": "", "prediction": ["all x.(Monkey(x) -> UsesEyesToSenseLight(x))"]}
{"id": "eqasc_train_8129", "nl": "Light enters the eye through the pupil.", "fol": "", "prediction": ["all x y.((Light(x) & Eye(y)) -> EntersThroughPupil(x,y))"]}
{"id": "eqasc_train_8130", "nl": "pupils are used for seeing by animals by sensing light", "fol": "", "prediction": ["all x y.((Pupil(x) & Animal(y) & SensingLight(x,y)) -> UsedForSeenBy(x,y))"]}
{"id": "eqasc_train_8131", "nl": "eyes are used for seeing by pigs by sensing light", "fol": "", "prediction": ["all x y.((Eyes(x) & Pig(y) & SensingLight(x,y)) -> UsedForSeenBy(x,y))"]}
{"id": "eqasc_train_8132", "nl": "Wolves use their teeth, feet, eyes, nose, and ears to hunt.", "fol": "", "prediction": ["all x.(Wolf(x) -> (UsesTeeth(x) & UsesFeet(x) & UsesEyes(x) & UsesNase(x) & UsesEars(x)))"]}
{"id": "eqasc_train_8133", "nl": "wolves hunt by sensing light", "fol": "", "prediction": ["all x.(Wolf(x) -> HuntsBySensesLight(x))"]}
{"id": "eqasc_train_8134", "nl": "Mammals are animals with a backbone.", "fol": "", "prediction": ["all x.(Mammal(x) -> (Animal(x) & HasBackbone(x)))"]}
{"id": "eqasc_train_8135", "nl": "Mammals use eyes to sense light.", "fol": "", "prediction": ["all x.(Mammal(x) -> UsesEyesToSenseLight(x))"]}
{"id": "eqasc_train_8136", "nl": "Bobcats eat a variety of animals, including mice and voles, squirrels, rabbits and deer.", "fol": "", "prediction": ["all x.(Bobcat(x) -> (EatsMousesVolesSquirrelsRabbitsDeer(x)))"]}
{"id": "eqasc_train_8137", "nl": "Voles use their eyes to sense light so they can see", "fol": "", "prediction": ["all x.(Vole(x) -> (UsesEyes(x) & SenseLight(x) & CanSee(x)))"]}
{"id": "eqasc_train_8138", "nl": "Lastly Fire, or light, is perceived through the sense of vision.", "fol": "", "prediction": ["all x.((Fire(x) | Light(x)) -> PerceivedThroughSenseOfVision(x))"]}
{"id": "eqasc_train_8139", "nl": "eyes are used for seeing by animals by sense of vision", "fol": "", "prediction": ["all x y.((Eyes(x) & Animal(y)) -> UsedForSeeingBySenseOfVision(x,y))"]}
{"id": "eqasc_train_8140", "nl": "eyes are used for seeing by goats by sensing light", "fol": "", "prediction": ["all x y.((Eyes(x) & Goat(y) & SensingLight(x,y)) -> UsedForSeenBy(x,y))"]}
{"id": "eqasc_train_8141", "nl": "Infrared light is invisible to the eye.", "fol": "", "prediction": ["all x.(InfraredLight(x) -> InvisibleToEye(x))"]}
{"id": "eqasc_train_8142", "nl": "animals cannot see infrared light", "fol": "", "prediction": ["all x.(Animal(x) -> -SeesInfraredLight(x))"]}
{"id": "eqasc_train_8143", "nl": "Visible and invisible light is energy in the form of electromagnetic waves.", "fol": "", "prediction": ["all x.(VisibleAndInvisibleLight(x) -> EnergyInFormOfElectromagneticWaves(x))"]}
{"id": "eqasc_train_8144", "nl": "Eyes are used for seeing animals by sensing electromagnetic waves.", "fol": "", "prediction": ["all x y.((Eye(x) & Animal(y)) -> SensingElectromagneticWaves(x,y))"]}
{"id": "eqasc_train_8145", "nl": "Light waves are electromagnetic waves.", "fol": "", "prediction": ["all x.(LightWaves(x) -> ElectromagneticWaves(x))"]}
{"id": "eqasc_train_8146", "nl": "eyes are used for seeing by animals by sensing electromagnetic waves", "fol": "", "prediction": ["all x y.((Eyes(x) & Animal(y) & SensingElectromagneticWaves(x,y)) -> UsedForSeenBy(x,y))"]}
{"id": "eqasc_train_8147", "nl": "increasing heat causes thermal expansion", "fol": "", "prediction": ["all x.(IncreasingHeat(x) -> ThermalExpansion(x))"]}
{"id": "eqasc_train_8148", "nl": "An increase in temperature is the result of the flow of heat into the system.", "fol": "", "prediction": ["all x.((TemperatureIncrease(x) & HeatFlowIntoSystem(x)) -> IncreaseInTemperature(x))"]}
{"id": "eqasc_train_8149", "nl": "the flow of heat into the system causes thermal expansion", "fol": "", "prediction": ["all x y.((FlowOfHeat(x) & System(y)) -> CausesThermalExpansion(x,y))"]}
{"id": "eqasc_train_8150", "nl": "Themajority of sea-level rise is due to thermal expansion.", "fol": "", "prediction": ["all x.(ThemejorityOfSeaLevelRise(x) -> ThermalExpansion(x))"]}
{"id": "eqasc_train_8151", "nl": "The majority of sea level rise is due to increasing heat.", "fol": "", "prediction": ["all x.(SeaLevelRise(x) -> IncreasedHeat(x))"]}
{"id": "eqasc_train_8152", "nl": "fire causes thermal expansion", "fol": "", "prediction": ["all x y.((Fire(x) & ThermalExpansion(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_8153", "nl": "Gaskets and thermal expansion increase the misalignment problem.", "fol": "", "prediction": ["all x.((Gasket(x) & ThermalExpansion(x)) -> IncreasesMisalignmentProblem(x))"]}
{"id": "eqasc_train_8154", "nl": "Increasing heat in gaskets can increase misalignment problems.", "fol": "", "prediction": ["all x.((Gasket(x) & IncreasesHeat(x)) -> IncreasesMisalignmentProblems(x))"]}
{"id": "eqasc_train_8155", "nl": "Thermal expansion can cause serious problems.", "fol": "", "prediction": ["all x.(ThermalExpansion(x) -> CanCauseSeriousProblems(x))"]}
{"id": "eqasc_train_8156", "nl": "increasing heat causes serious problems.", "fol": "", "prediction": ["all x.(IncreasingHeat(x) -> CausesSeriousProblems(x))"]}
{"id": "eqasc_train_8157", "nl": "Heating by direct heat is usually too hot.", "fol": "", "prediction": ["all x.(Heating(x) -> TooHot(x))"]}
{"id": "eqasc_train_8158", "nl": "Making an object hot causes thermal expansion.", "fol": "", "prediction": ["all x.((Object(x) & Hot(x)) -> ThermalExpansion(x))"]}
{"id": "eqasc_train_8159", "nl": "Fire heats upwards.", "fol": "", "prediction": ["all x.(Fire(x) -> HeatsUpwards(x))"]}
{"id": "eqasc_train_8160", "nl": "Fire underneath an object will cause thermal expansion", "fol": "", "prediction": ["all x y.((Fire(x) & Object(y) & Underside(x,y)) -> CausesThermalExpansion(x,y))"]}
{"id": "eqasc_train_8161", "nl": "Heat is caused by molecules moving.", "fol": "", "prediction": ["all x.(Heat(x) -> CausedByMolecules(x))"]}
{"id": "eqasc_train_8162", "nl": "molecules moving causes thermal expansion", "fol": "", "prediction": ["all x.(Molecule(x) -> CausesThermalExpansion(x))"]}
{"id": "eqasc_train_8163", "nl": "Thermal fatigue cracking is notably different than thermal expansion damage.", "fol": "", "prediction": ["all x.((ThermalFossilFasturing(x) & ThermalExpansionDamage(x)) -> SignificantlyDifferent(x,y))"]}
{"id": "eqasc_train_8164", "nl": "expansion can cause fatigue", "fol": "", "prediction": ["all x.(Expansion(x) -> CausesFatigue(x))"]}
{"id": "eqasc_train_8165", "nl": "Sea level is projected to rise due the thermal expansion of the oceans and the melting of glaciers.", "fol": "", "prediction": ["all x y.((SeaLevel(x) & Ocean(y) & Glacier(z)) -> (ProjectsToRise(x,y) & ThermalExpansion(x,z) & Melting(x,z)))"]}
{"id": "eqasc_train_8166", "nl": "Heat will ultimately cause the sea level to rise.", "fol": "", "prediction": ["all x.(Heat(x) -> SeaLevelRise(x))"]}
{"id": "eqasc_train_8167", "nl": "Thermal burns are caused by exposure to heat.", "fol": "", "prediction": ["all x.(ThermalBurn(x) -> CausedByExpositionToHeat(x))"]}
{"id": "eqasc_train_8168", "nl": "thermal expansion can cause burns", "fol": "", "prediction": ["all x.(ThermalExpansion(x) -> CausesBurns(x))"]}
{"id": "eqasc_train_8169", "nl": "Liquid propane is used to heat hot air balloons.", "fol": "", "prediction": ["all x.(LiquidProtein(x) -> HeatsHotAirBalloons(x))"]}
{"id": "eqasc_train_8170", "nl": "liquid propane is used to expand hot air balloons", "fol": "", "prediction": ["all x y.((LiquidProtein(x) & HotAirBalloon(y)) -> Expands(x,y))"]}
{"id": "eqasc_train_8171", "nl": "Motion helps to increase body heat.", "fol": "", "prediction": ["all x.(Motion(x) -> IncreasesBodyHeat(x))"]}
{"id": "eqasc_train_8172", "nl": "motion causes thermal expansion", "fol": "", "prediction": ["all x.(Motion(x) -> ThermalExpansion(x))"]}
{"id": "eqasc_train_8173", "nl": "Fish have a centralized nervous system with a brain.", "fol": "", "prediction": ["all x.(Fish(x) -> (CentralizedNervousSystem(x) & HasBrain(x)))"]}
{"id": "eqasc_train_8174", "nl": "All fish are creatures that swim.", "fol": "", "prediction": ["all x.(Fish(x) -> Swims(x))"]}
{"id": "eqasc_train_8175", "nl": "creatures that can swim have a centralized nervous system with a brain.", "fol": "", "prediction": ["all x.((Creature(x) & CanSwim(x)) -> CentralizedNervousSystem(x) & HasBrain(x))"]}
{"id": "eqasc_train_8176", "nl": "salmon have a centralized nervous system with a brain", "fol": "", "prediction": ["all x.(Salmon(x) -> (CentralizedNervousSystem(x) & Brain(x)))"]}
{"id": "eqasc_train_8177", "nl": "Brains are for important tasks, like thinking.", "fol": "", "prediction": ["all x.(Brain(x) -> (ImportantTasks(x) & Thinking(x)))"]}
{"id": "eqasc_train_8178", "nl": "fish can think", "fol": "", "prediction": ["all x.(Fish(x) -> Thinks(x))"]}
{"id": "eqasc_train_8179", "nl": "Bass and salmon have a centralized nervous system with a brain.", "fol": "", "prediction": ["all x.((Bass(x) | Salmon(x)) -> (CentralizedNervousSystem(x) & HasBrain(x)))"]}
{"id": "eqasc_train_8180", "nl": "Fish include bass, crappie, and catfish.", "fol": "", "prediction": ["all x.(Fish(x) -> (Bass(x) | Crappie(x) | Catfish(x)))"]}
{"id": "eqasc_train_8181", "nl": "crappie have a centralized nervous system with a brain. ", "fol": "", "prediction": ["all x.(Crappie(x) -> (CentralizedNervousSystem(x) & HasBrain(x)))"]}
{"id": "eqasc_train_8182", "nl": "Fish include trout and other fish.", "fol": "", "prediction": ["all x.(Fish(x) -> (IncludesTrout(x) | IncludesOtherFish(x)))"]}
{"id": "eqasc_train_8183", "nl": "Trout have a centralized nervous system with a brain.", "fol": "", "prediction": ["all x.(Trout(x) -> (CentralizedNervousSystem(x) & HasBrain(x)))"]}
{"id": "eqasc_train_8184", "nl": "bass have a centralized nervous system with a brain", "fol": "", "prediction": ["all x.(Bass(x) -> (CentralizedNervousSystem(x) & Brain(x)))"]}
{"id": "eqasc_train_8185", "nl": "Amphetamines stimulate the central nervous system.", "fol": "", "prediction": ["all x.(Amphetamine(x) -> StimulatesCentralNervousSystem(x))"]}
{"id": "eqasc_train_8186", "nl": "Fish can be stimulated with amphetamines.", "fol": "", "prediction": ["all x.(Fish(x) -> StimulatesWithAmphetamines(x))"]}
{"id": "eqasc_train_8187", "nl": "Nervous A reptile has a brain and nervous system.", "fol": "", "prediction": ["all x.(Reptile(x) -> (HasBrain(x) & HasNervousSystem(x)))"]}
{"id": "eqasc_train_8188", "nl": "Fishes and reptiles have brains.", "fol": "", "prediction": ["all x.((Fish(x) | Reptile(x)) -> HasBrain(x))"]}
{"id": "eqasc_train_8189", "nl": "Sharks are a type of fish.", "fol": "", "prediction": ["all x.(Shark(x) -> Fish(x))"]}
{"id": "eqasc_train_8190", "nl": "Sharks have a centralized nervous system with a brain.", "fol": "", "prediction": ["all x.(Shark(x) -> (CentralizedNervousSystem(x) & HasBrain(x)))"]}
{"id": "eqasc_train_8191", "nl": "Vertebrates have the most defined and developed nervous system.", "fol": "", "prediction": ["all x.(Vertebrates(x) -> (DefinitedNervousSystem(x) & DevelopedNervousSystem(x)))"]}
{"id": "eqasc_train_8192", "nl": "fish are vertebrates", "fol": "", "prediction": ["all x.(Fish(x) -> Vertebrate(x))"]}
{"id": "eqasc_train_8193", "nl": "Earthworm burrows help aerate soil, which is also good for plants.", "fol": "", "prediction": ["all x.(EarthwormBurrow(x) -> (HelpsAerateSoil(x) & GoodForPlants(x)))"]}
{"id": "eqasc_train_8194", "nl": "Aeration breaks up the soil and allows water to penetrate.", "fol": "", "prediction": ["all x y.((Aeration(x) & Soil(y)) -> (BreaksUp(x,y) & AllowsWaterToPenetrate(x,y)))"]}
{"id": "eqasc_train_8195", "nl": "Earthworm burrows allow water to penetrate the soil, which is good for plants.", "fol": "", "prediction": ["all x.(EarthwormBurrow(x) -> (AllowsWaterToPenetrateSoil(x) & GoodForPlants(x)))"]}
{"id": "eqasc_train_8196", "nl": "Dirt is really misplaced soil.", "fol": "", "prediction": ["all x.(Dirt(x) -> MisplacedSoil(x))"]}
{"id": "eqasc_train_8197", "nl": "Earthworm burrows help aerate dirt,  which is also good for plants.", "fol": "", "prediction": ["all x.(EarthwormBurrow(x) -> (HelpsAerateDirt(x) & GoodForPlants(x)))"]}
{"id": "eqasc_train_8198", "nl": "Aeration quickly changes the chemistry of the soil.", "fol": "", "prediction": ["all x y.((Aeration(x) & Soil(y)) -> ChangesChemistry(x,y))"]}
{"id": "eqasc_train_8199", "nl": "earthworms change the chemistry of the soil", "fol": "", "prediction": ["all x y.((Earthworm(x) & Soil(y)) -> ChangesChemistry(x,y))"]}
{"id": "eqasc_train_8200", "nl": "Insects and earthworms are very important in mixing and aerating the soil.", "fol": "", "prediction": ["all x y.((Insect(x) & Earthworm(y)) -> (MixingSoil(x,y) & AeratingSoil(x,y)))"]}
{"id": "eqasc_train_8201", "nl": "earthworms mix soil", "fol": "", "prediction": ["all x y.((Earthworm(x) & Soil(y)) -> MixSoil(x,y))"]}
{"id": "eqasc_train_8202", "nl": "Good drainage is essential for growing plants in containers.", "fol": "", "prediction": ["all x.((GrowingPlants(x) & Container(x)) -> GoodDrainage(x))"]}
{"id": "eqasc_train_8203", "nl": "Earthworm burrows help aerate soil, which is essential for growing plants", "fol": "", "prediction": ["all x y z.((EarthwormBurrow(x) & Soil(y) & Plant(z)) -> (HelpsAerate(x,y) & EssentialForGrowing(x,z)))"]}
{"id": "eqasc_train_8204", "nl": "Earthworms help soils breathe.", "fol": "", "prediction": ["all x.(Earthworm(x) -> HelpsSoilsBreathe(x))"]}
{"id": "eqasc_train_8205", "nl": "aerating soil helps it breathe", "fol": "", "prediction": ["all x y.((AeratingSoil(x) & Soil(y)) -> HelpsBreathe(x,y))"]}
{"id": "eqasc_train_8206", "nl": "decomposers help aerate soil, which is also good for plants", "fol": "", "prediction": ["all x y.((Decomposer(x) & Soil(y)) -> (HelpsAerate(x,y) & GoodForPlants(x)))"]}
{"id": "eqasc_train_8207", "nl": "Earthworms crawl through the soil, eating sediments or dirt directly.", "fol": "", "prediction": ["all x.(Earthworm(x) -> (CrawlsThroughSoil(x) & (EatsSediments(x) | EatsDirt(x))))"]}
{"id": "eqasc_train_8208", "nl": "Earthworms eat dirt, which is good for plants", "fol": "", "prediction": ["all x y z.((Earthworm(x) & Dirt(y) & Plant(z)) -> (Eats(x,y) & GoodFor(x,z)))"]}
{"id": "eqasc_train_8209", "nl": "Earthworms and other soil organisms keep the soil healthy.", "fol": "", "prediction": ["all x y.((Earthworm(x) & SoilOrganism(y)) -> KeepsSoilHealthy(x,y))"]}
{"id": "eqasc_train_8210", "nl": "organisms aerate soil", "fol": "", "prediction": ["all x y.((Organism(x) & Soil(y)) -> Aerate(x,y))"]}
{"id": "eqasc_train_8211", "nl": "Most species construct burrows.", "fol": "", "prediction": ["all x.(Species(x) -> ConstructsBurrows(x))"]}
{"id": "eqasc_train_8212", "nl": "Constructions by earthworms help aerate soil which is good for plants.", "fol": "", "prediction": ["all x y.((Earthworm(x) & Construction(y)) -> (HelpsAerateSoil(x,y) & GoodForPlants(y)))"]}
{"id": "eqasc_train_8213", "nl": "Aerating means getting air into the wine.", "fol": "", "prediction": ["all x.(Aerating(x) -> GetsAirIntoWine(x))"]}
{"id": "eqasc_train_8214", "nl": "Earthworm burrows help getting air into soil, which is also good for plants.", "fol": "", "prediction": ["all x.(EarthwormBurrow(x) -> (HelpsGetAirIntoSoil(x) & GoodForPlants(x)))"]}
{"id": "eqasc_train_8215", "nl": "earthworms are good for daisies", "fol": "", "prediction": ["all x.(Earthworm(x) -> GoodForDaisies(x))"]}
{"id": "eqasc_train_8216", "nl": "Annelid burrows help aerate soil, which is also good for plants.", "fol": "", "prediction": ["all x.(AnnelidBurrow(x) -> (HelpsAerateSoil(x) & GoodForPlants(x)))"]}
{"id": "eqasc_train_8217", "nl": "The burrows of something with five hearts help aerate soil", "fol": "", "prediction": ["all x y z.((Burrow(x) & SomethingWithFiveHearts(y) & Soil(z)) -> HelpsAerate(x,y,z))"]}
{"id": "eqasc_train_8218", "nl": "insulated material can be used for keeping warm", "fol": "", "prediction": ["all x.((InsulatedMaterial(x) & KeepsWarm(x)) -> CanBeUsedForKeepingWarm(x))"]}
{"id": "eqasc_train_8219", "nl": "Building insulation is a cellulose material made of ground computer paper and cardboard boxes.", "fol": "", "prediction": ["all x.(BuildingInsulation(x) -> (CelluloseMaterial(x) & MadeOfGroundComputerPaper(x) & MadeOfCartoonBoxes(x)))"]}
{"id": "eqasc_train_8220", "nl": "Cellulose material can be used to keep a home warm.", "fol": "", "prediction": ["all x.(CelluloseMaterial(x) -> KeepsHomeWarm(x))"]}
{"id": "eqasc_train_8221", "nl": "To avoid hypothermia, stay warm and dry.", "fol": "", "prediction": ["all x.((Hydrothermia(x) & StayWarm(x) & StayDry(x)) -> Avoids(x,Hydrothermia))"]}
{"id": "eqasc_train_8222", "nl": "Insulated material can help prevent hypothermia", "fol": "", "prediction": ["all x.(InsulatedMaterial(x) -> HelpsPreventHypothermia(x))"]}
{"id": "eqasc_train_8223", "nl": "Warm chain is the key to newborn survival.", "fol": "", "prediction": ["all x.(WarmChain(x) -> KeyToNewbornSurvival(x))"]}
{"id": "eqasc_train_8224", "nl": "Insulated material is the key to newborn survival.", "fol": "", "prediction": ["all x.((InsulatedMaterial(x) & NewbornSurvival(x)) -> KeyToSurvival(x))"]}
{"id": "eqasc_train_8225", "nl": "Wool and some of the new insulated fleece materials are good.", "fol": "", "prediction": ["all x.((Wool(x) & InsulatedFleece(x)) -> Good(x))"]}
{"id": "eqasc_train_8226", "nl": "wool can be used for keeping warm", "fol": "", "prediction": ["all x.(Wool(x) -> (KeepsWarm(x) & UsesWool(x)))"]}
{"id": "eqasc_train_8227", "nl": "Coats and blankets to keep warm.", "fol": "", "prediction": ["all x.((Coat(x) | Blanket(x)) -> KeepsWarm(x))"]}
{"id": "eqasc_train_8228", "nl": "Coats and blankets are insulating materials that humans wear.", "fol": "", "prediction": ["all x.((Coat(x) | Blanket(x)) -> InsulatingMaterial(x))"]}
{"id": "eqasc_train_8229", "nl": "Birds waste a lot of body heat trying to keep warm in exposed areas.", "fol": "", "prediction": ["all x.(Bird(x) -> WastesBodyHeat(x))"]}
{"id": "eqasc_train_8230", "nl": "insulated material can be used to prevent wasting a lot of body heat.", "fol": "", "prediction": ["all x.((InsulatedMaterial(x) & PreventsWasteOfBodyHeat(x)) -> CanBeUsedToPreventWasteOfHeat(x))"]}
{"id": "eqasc_train_8231", "nl": "Insulators are materials that prevent the flow of heat.", "fol": "", "prediction": ["all x.(Insulator(x) -> PreventsHeatFlow(x))"]}
{"id": "eqasc_train_8232", "nl": "Materials that prevent the flow of heat can be used for keeping warm.", "fol": "", "prediction": ["all x.((Material(x) & PreventsHeatFlow(x)) -> KeepsWarm(x))"]}
{"id": "eqasc_train_8233", "nl": "Hair is a natural insulator whether the it is warm or cool.", "fol": "", "prediction": ["all x.((Hair(x) & (Warm(x) | Cool(x))) -> NaturalInsulator(x))"]}
{"id": "eqasc_train_8234", "nl": "hair can help keep warm", "fol": "", "prediction": ["all x.(Hair(x) -> HelpsKeepWarm(x))"]}
{"id": "eqasc_train_8235", "nl": "Sunlight heats the ground, warming it up.", "fol": "", "prediction": ["all x y.((Sunlight(x) & Ground(y)) -> HeatsAndWarmsUp(x,y))"]}
{"id": "eqasc_train_8236", "nl": "Insulated material can be used for keeping heat.", "fol": "", "prediction": ["all x.(InsulatedMaterial(x) -> CanBeUsedForKeepingHeat(x))"]}
{"id": "eqasc_train_8237", "nl": "Insulation is a material with the ability to store heat.", "fol": "", "prediction": ["all x.(Insulation(x) -> (StoresHeat(x) & HasHeatStore(x)))"]}
{"id": "eqasc_train_8238", "nl": "the ability to store heat can be used for keeping warm", "fol": "", "prediction": ["all x.(StoreHeat(x) -> KeepsWarm(x))"]}
{"id": "eqasc_train_8239", "nl": "Although it is important to keep warm during the winter season, it's also important to keep safe.", "fol": "", "prediction": ["all x.((ImportantToKeepWarmDuringWinter(x) & ImportantToKeepSafe(x)) -> KeepWarmDuringWinter(x))"]}
{"id": "eqasc_train_8240", "nl": "insulated material is important in the winter season", "fol": "", "prediction": ["all x.(IsolatedMaterial(x) -> ImportantInWinterSeason(x))"]}
{"id": "eqasc_train_8241", "nl": "Guard hairs protect the fur, while the fur insulates the mammal.", "fol": "", "prediction": ["all x y.((GuardHair(x) & Mammal(y)) -> (ProtectsFur(x) & Insulates(x,y)))"]}
{"id": "eqasc_train_8242", "nl": "fur can be used for keeping warm", "fol": "", "prediction": ["all x.(Fur(x) -> (KeepsWarm(x) & UsesForWarm(x)))"]}
{"id": "eqasc_train_8243", "nl": "An insulated cup with a cover is great for keeping beverages warm.", "fol": "", "prediction": ["all x.((Cup(x) & Insulated(x) & HasCover(x)) -> GreatForKeepingBeveragesWarm(x))"]}
{"id": "eqasc_train_8244", "nl": "insulated cups keep liquids full of warmth", "fol": "", "prediction": ["all x.((Cup(x) & Insulated(x)) -> KeepsLiquidsFullOfWarmth(x))"]}
{"id": "eqasc_train_8245", "nl": "Foam type insulations require an overlay board insulation.", "fol": "", "prediction": ["all x.(FoamTypeInsulation(x) -> RequiresOverlayBoardInsulation(x))"]}
{"id": "eqasc_train_8246", "nl": "foam materials can be used to keep warm", "fol": "", "prediction": ["all x.(FoamMaterial(x) -> KeepsWarm(x))"]}
{"id": "eqasc_train_8247", "nl": "Snow is an excellent insulating material.", "fol": "", "prediction": ["all x.(Snow(x) -> ExcellentInsulatingMaterial(x))"]}
{"id": "eqasc_train_8248", "nl": "snow can be used for keeping warm", "fol": "", "prediction": ["all x.(Snow(x) -> (KeepsWarm(x) & UsesSnowForWarm(x)))"]}
{"id": "eqasc_train_8249", "nl": "carpooling decreases the amount of cars used to travel to a place", "fol": "", "prediction": ["all x y.((Carpooling(x) & Car(y)) -> DecreasesAmountOfCars(x,y))"]}
{"id": "eqasc_train_8250", "nl": "Cars are a significant source of air pollution.", "fol": "", "prediction": ["all x.(Car(x) -> SignificantSourceOfAirPollution(x))"]}
{"id": "eqasc_train_8251", "nl": "Carpooling reduces air pollution", "fol": "", "prediction": ["all x.(Carpooling(x) -> ReducesAirPollution(x))"]}
{"id": "eqasc_train_8252", "nl": "Arrange carpools to conserve fuel.", "fol": "", "prediction": ["all x.(Carpool(x) -> ArrangesToConserveFuel(x))"]}
{"id": "eqasc_train_8253", "nl": "decreasing the amount of cars used conserves fuel", "fol": "", "prediction": ["all x y.((Car(x) & Car(y) & Used(x,y)) -> ConservesFuel(x,y))"]}
{"id": "eqasc_train_8254", "nl": "Car crashes also create traffic congestion and greatly disrupt travel for commuters.", "fol": "", "prediction": ["all x.(CarCrashes(x) -> (CreatesTrafficCongestion(x) & DisruptsTravel(x)))"]}
{"id": "eqasc_train_8255", "nl": "Carpooling decreases the amount of cars and traffic congestion.", "fol": "", "prediction": ["all x.(Carpooling(x) -> (DecreasesAmountOfCars(x) & ReducesTrafficCongestion(x)))"]}
{"id": "eqasc_train_8256", "nl": "Cars and gasoline-burning engines are large sources of emissions.", "fol": "", "prediction": ["all x.((Car(x) | GasolineBurningEngine(x)) -> LargeSourceOfEmissions(x))"]}
{"id": "eqasc_train_8257", "nl": "Carpooling decreases emissions", "fol": "", "prediction": ["all x.(Carpooling(x) -> DecreasesEmissions(x))"]}
{"id": "eqasc_train_8258", "nl": "decreasing the amount of cars used to travel conserves fuel", "fol": "", "prediction": ["all x y.((Car(x) & Car(y) & UsedToTravel(x,y)) -> DecreasesAmountOfCars(x,y))"]}
{"id": "eqasc_train_8259", "nl": "Carpools and vanpools can save time.", "fol": "", "prediction": ["all x.((Carpool(x) | Vanpool(x)) -> CanSaveTime(x))"]}
{"id": "eqasc_train_8260", "nl": "vanpools decrease the amount of cars used to travel to a place", "fol": "", "prediction": ["all x y.((Vanpool(x) & Car(y)) -> DecreasesAmountOfCars(x,y))"]}
{"id": "eqasc_train_8261", "nl": "Ozone from cars creates smog.", "fol": "", "prediction": ["all x.((Ozone(x) & Car(x)) -> CreatesSmog(x))"]}
{"id": "eqasc_train_8262", "nl": "Carpooling decreases the amount of smog in the air.", "fol": "", "prediction": ["all x.(Carpooling(x) -> DecreasesSmog(x))"]}
{"id": "eqasc_train_8263", "nl": "Less travel leads to fewer car or plane emissions, and less pollution.", "fol": "", "prediction": ["all x.(LessTravel(x) -> (LeadsToLessCarEmissions(x) & LessPlanetPollution(x)))"]}
{"id": "eqasc_train_8264", "nl": "Carpooling leads to less emissions and less pollution.", "fol": "", "prediction": ["all x.(Carpooling(x) -> (LessEmissions(x) & LessPollution(x)))"]}
{"id": "eqasc_train_8265", "nl": "And fewer cars means less pollution.", "fol": "", "prediction": ["all x.((Car(x) & Fewer(x)) -> LessPollution(x))"]}
{"id": "eqasc_train_8266", "nl": "carpooling leads to less pollution", "fol": "", "prediction": ["all x.(Carpooling(x) -> LessPollution(x))"]}
{"id": "eqasc_train_8267", "nl": "Carpooling cuts down on congestion and pollution.", "fol": "", "prediction": ["all x.(Carpooling(x) -> (CutsCongestion(x) & CutsPollution(x)))"]}
{"id": "eqasc_train_8268", "nl": "Decreasing the amount of cars used to travel cuts down on pollution", "fol": "", "prediction": ["all x y.((DecreasingCars(x) & Cars(y)) -> CutsDownOnPollution(x,y))"]}
{"id": "eqasc_train_8269", "nl": "Female monotremes lack a uterus and vagina.", "fol": "", "prediction": ["all x.(FemaleMonotreme(x) -> (LacksUterus(x) & LacksVagina(x)))"]}
{"id": "eqasc_train_8270", "nl": "female platypuses lack a uterus and vagina", "fol": "", "prediction": ["all x.(FemalePlutus(x) -> (LacksUterus(x) & LacksVagina(x)))"]}
{"id": "eqasc_train_8271", "nl": "Like the echidna, a platypus is a monotreme.", "fol": "", "prediction": ["all x.(Platypus(x) -> (Echidna(x) & Monotreme(x)))"]}
{"id": "eqasc_train_8272", "nl": "The platypus lacks a uterus and vagina", "fol": "", "prediction": ["all x.(Platypus(x) -> (LacksUterus(x) & LacksVaginal(x)))"]}
{"id": "eqasc_train_8273", "nl": "Platypus and echidna lack a uterus and vagina.", "fol": "", "prediction": ["all x.((Plutosis(x) | Echidna(x)) -> (LacksUterus(x) & LacksVagina(x)))"]}
{"id": "eqasc_train_8274", "nl": "Babies are normally delivered from the uterus through the vagina.", "fol": "", "prediction": ["all x.(Baby(x) -> (DeliveredFromUterus(x) & ThroughVagina(x)))"]}
{"id": "eqasc_train_8275", "nl": "Female monotremes lack ability to deliver babies normally", "fol": "", "prediction": ["all x.(FemaleMonotreme(x) -> -ProvidesBabyBirth(x))"]}
{"id": "eqasc_train_8276", "nl": "a platypus lacks a uterus", "fol": "", "prediction": ["all x.(Platypus(x) -> LacksUterus(x))"]}
{"id": "eqasc_train_8277", "nl": "female echidna lack a uterus and vagina", "fol": "", "prediction": ["all x.(Echidna(x) -> (LacksUterus(x) & LacksVagina(x)))"]}
{"id": "eqasc_train_8278", "nl": "echidnas lack a uterus and vagina", "fol": "", "prediction": ["all x.(Echidna(x) -> (LacksUterus(x) & LacksVagina(x)))"]}
{"id": "eqasc_train_8279", "nl": "The female platypus and echindna do not have a uterus or vagina", "fol": "", "prediction": ["all x.((FemalePlatypus(x) & FemaleEchindna(x)) -> (-Uterus(x) & -Vagina(x)))"]}
{"id": "eqasc_train_8280", "nl": "Monotremes are mammals that lay eggs.", "fol": "", "prediction": ["all x.(Monotreme(x) -> (Mammal(x) & LaysEggs(x)))"]}
{"id": "eqasc_train_8281", "nl": "some female mammals lack a uterus", "fol": "", "prediction": ["exists x.(FemaleMammal(x) & -HasUterus(x))"]}
{"id": "eqasc_train_8282", "nl": "female duckbill platypus lack a uterus and vagina", "fol": "", "prediction": ["all x.(Duckbill(x) -> (Female(x) & Duckbill(x) & LacksUterus(x) & LacksVagina(x)))"]}
{"id": "eqasc_train_8283", "nl": "wiring requires an electrical conductor", "fol": "", "prediction": ["all x.(Wiring(x) -> RequiresElectricalConductor(x))"]}
{"id": "eqasc_train_8284", "nl": "Metal or aluminum trees are conductors of electricity.", "fol": "", "prediction": ["all x.((Tree(x) & (Metal(x) | Aluminum(x))) -> ConductorOfElectricity(x))"]}
{"id": "eqasc_train_8285", "nl": "wiring requires metal or aluminum for electricity", "fol": "", "prediction": ["all x.(Wiring(x) -> (RequiresMetal(x) | RequiresAluminum(x)))"]}
{"id": "eqasc_train_8286", "nl": "Copper is a good conductor of electricity.", "fol": "", "prediction": ["all x.(CuirconductorOfElectricity(x) -> GoodConductorOfElectricity(x))"]}
{"id": "eqasc_train_8287", "nl": "copper can be used in wiring", "fol": "", "prediction": ["all x.(Cuir(x) -> UsedInWiring(x))"]}
{"id": "eqasc_train_8288", "nl": "Wires connected to a source of electricity.", "fol": "", "prediction": ["all x y.((Wire(x) & ElectricSource(y)) -> ConnectedTo(x,y))"]}
{"id": "eqasc_train_8289", "nl": "Electricity uses an electrical conductor.", "fol": "", "prediction": ["all x.(Electricity(x) -> UsesElectricalConductor(x))"]}
{"id": "eqasc_train_8290", "nl": "Conductor A conductor is any material that carries electricity.", "fol": "", "prediction": ["all x.(Conductor(x) -> CarriesElectricity(x))"]}
{"id": "eqasc_train_8291", "nl": "Wiring needs a material that carries electricity.", "fol": "", "prediction": ["all x.(Wiring(x) -> NeedsCarryingElectricity(x))"]}
{"id": "eqasc_train_8292", "nl": "An conductor is any material that carries an energy current and is required for wiring.", "fol": "", "prediction": ["all x.(Conductor(x) -> (CarriesEnergyCurrent(x) & RequiresWiring(x)))"]}
{"id": "eqasc_train_8293", "nl": "Metals, such as copper wire, are good conductors for carrying electric current.", "fol": "", "prediction": ["all x.((Metal(x) & CopperWire(x)) -> GoodConductorForCarryingElectricCurrent(x))"]}
{"id": "eqasc_train_8294", "nl": "Wiring requires a conductor such as copper to carry a current", "fol": "", "prediction": ["all x y z.((Wiring(x) & Conductor(y) & Copper(z)) -> RequiresToCarryCurrent(x,y,z))"]}
{"id": "eqasc_train_8295", "nl": "Metals are conductors of electricity.", "fol": "", "prediction": ["all x.(Metal(x) -> ConductorOfElectricity(x))"]}
{"id": "eqasc_train_8296", "nl": "wiring requires metal", "fol": "", "prediction": ["all x.(Wiring(x) -> RequiresMetal(x))"]}
{"id": "eqasc_train_8297", "nl": "Most electrical conductors, such as wires, are made of copper or gold.", "fol": "", "prediction": ["all x.(ElectricalConductor(x) -> (MadeOf(x,Copper) | MadeOf(x,Gold)))"]}
{"id": "eqasc_train_8298", "nl": "Wiring requires a material such as copper or gold.", "fol": "", "prediction": ["all x.(Wiring(x) -> (Requires(x,Copper) | Requires(x,Gold)))"]}
{"id": "eqasc_train_8299", "nl": "Copper is an excellent conductor of electricity.", "fol": "", "prediction": ["all x.(CuirconductorOfElectricity(x) -> Excellent(x))"]}
{"id": "eqasc_train_8300", "nl": "wiring can be done with Copper", "fol": "", "prediction": ["all x.(Wiring(x) -> CanBeDoneWithCopper(x))"]}
{"id": "eqasc_train_8301", "nl": "Copper is a much better conductor.", "fol": "", "prediction": ["all x.(Cuirconductor(x) -> MuchBetterConductor(x))"]}
{"id": "eqasc_train_8302", "nl": "most wiring requires copper", "fol": "", "prediction": ["all x.(Wiring(x) -> RequiresCopper(x))"]}
{"id": "eqasc_train_8303", "nl": "Most metals are conductors of electricity.", "fol": "", "prediction": ["all x.(Metal(x) -> ConductorOfElectricity(x))"]}
{"id": "eqasc_train_8304", "nl": "wiring requires metals ", "fol": "", "prediction": ["all x.(Wiring(x) -> RequiresMetals(x))"]}
{"id": "eqasc_train_8305", "nl": "Wiring requires copper or gold. ", "fol": "", "prediction": ["all x.(Wiring(x) -> (Requires(x,Cuir) | Requires(x,Gold)))"]}
{"id": "eqasc_train_8306", "nl": "Ground wire acts as an extra conductor.", "fol": "", "prediction": ["all x.(GroundWire(x) -> ExtraConductor(x))"]}
{"id": "eqasc_train_8307", "nl": "a ground can be used as a conductor", "fol": "", "prediction": ["all x.(Ground(x) -> CanBeUsedAsConductor(x))"]}
{"id": "eqasc_train_8308", "nl": "An insulator is the opposite of a conductor.", "fol": "", "prediction": ["all x.(Insulator(x) -> OppositeOfConductor(x))"]}
{"id": "eqasc_train_8309", "nl": "Wiring requires the opposite of an insulator.", "fol": "", "prediction": ["all x.(Wiring(x) -> RequiresOppositeOfInsulator(x))"]}
{"id": "eqasc_train_8310", "nl": "Gold is an excellent conductor of electricity.", "fol": "", "prediction": ["all x.(Gold(x) -> ExcellentConductorOfElectricity(x))"]}
{"id": "eqasc_train_8311", "nl": "wiring can be made of gold", "fol": "", "prediction": ["all x.(Wiring(x) -> MadeOfGold(x))"]}
{"id": "eqasc_train_8312", "nl": "Cells are organized into tissues, and tissues form organs.", "fol": "", "prediction": ["all x y.((Cell(x) & Tissue(y)) -> (OrganizedInto(x,y) & FormsOrgan(y)))"]}
{"id": "eqasc_train_8313", "nl": "Examples of tissues are muscle tissue or nerve tissue.", "fol": "", "prediction": ["all x.(Tissue(x) -> (MuscleTissue(x) | NerveTissue(x)))"]}
{"id": "eqasc_train_8314", "nl": "muscles contain cells", "fol": "", "prediction": ["all x.(Muscle(x) -> ContainsCells(x))"]}
{"id": "eqasc_train_8315", "nl": "Cells form tissues, and tissues form skin", "fol": "", "prediction": ["all x y z.((Cell(x) & Tissue(y) & Skin(z)) -> (Forms(x,y) & Forms(y,z)))"]}
{"id": "eqasc_train_8316", "nl": "Different tissues are in turn grouped together to form functional units, called organs.", "fol": "", "prediction": ["all x.(Tissue(x) -> (GroupedToForm(x) & Organ(x)))"]}
{"id": "eqasc_train_8317", "nl": "Cells are organized into tissues become functional units", "fol": "", "prediction": ["all x y.((Cell(x) & Tissue(y)) -> OrganizedInto(x,y))"]}
{"id": "eqasc_train_8318", "nl": "Examples of animal organs are kidneys and hearts.", "fol": "", "prediction": ["all x.(AnimalOrgan(x) -> (Kneeps(x) | Hearts(x)))"]}
{"id": "eqasc_train_8319", "nl": "cells are grouped into tissues, and tissues form the kidneys", "fol": "", "prediction": ["all x y z.((Cell(x) & Tissue(y) & Kidney(z)) -> (GroupedInto(x,y) & Forms(y,z)))"]}
{"id": "eqasc_train_8320", "nl": "Bacteria are one-celled organisms.", "fol": "", "prediction": ["all x.(Bacteria(x) -> OneCelledOrganism(x))"]}
{"id": "eqasc_train_8321", "nl": "bacteria only have one cell and no tissue", "fol": "", "prediction": ["all x.(Bacteria(x) -> (HasOneCell(x) & -HasTissue(x)))"]}
{"id": "eqasc_train_8322", "nl": "Different tissues then combine to form specialised organs .", "fol": "", "prediction": ["all x y.((Tissue(x) & Organism(y)) -> CombinesToForm(x,y))"]}
{"id": "eqasc_train_8323", "nl": "Cells are organized into tissues, and tissues combine into specialized organs", "fol": "", "prediction": ["all x y z.((Cell(x) & Tissue(y) & Organ(z)) -> (OrganizedInto(x,y) & CombinesInto(y,z)))"]}
{"id": "eqasc_train_8324", "nl": "Major organs, including the kidneys and liver, begin to grow.", "fol": "", "prediction": ["all x.((MainOrgan(x) & (Knees(x) | Liver(x))) -> Grows(x))"]}
{"id": "eqasc_train_8325", "nl": "cells form the liver", "fol": "", "prediction": ["all x.(Cell(x) -> FormsLiver(x))"]}
{"id": "eqasc_train_8326", "nl": "Stem cells are cells that can become many tissues and organs.", "fol": "", "prediction": ["all x.(StemCell(x) -> (Cell(x) & ManyTissues(x) & ManyOrgans(x)))"]}
{"id": "eqasc_train_8327", "nl": "Stem cells can be organized into forming organs", "fol": "", "prediction": ["all x y.((StemCell(x) & Organ(y)) -> CanOrganizeInto(x,y))"]}
{"id": "eqasc_train_8328", "nl": "Neurons are the cells of nerve tissue.", "fol": "", "prediction": ["all x.(Neuron(x) -> CellOfNervousTissue(x))"]}
{"id": "eqasc_train_8329", "nl": "neurons make up nerve tissue", "fol": "", "prediction": ["all x y.((Neuron(x) & NerveTissue(y)) -> MakesUp(x,y))"]}
{"id": "eqasc_train_8330", "nl": "Organs such as the stomach and liver also begin to develop.", "fol": "", "prediction": ["all x.((Organ(x) & (Stomach(x) | Liver(x))) -> Develops(x))"]}
{"id": "eqasc_train_8331", "nl": "Cells are formed into tissues and tissues form the liver.", "fol": "", "prediction": ["all x y.((Cell(x) & Tissue(y)) -> (FormedInto(x,y) & FormsLiver(y)))"]}
{"id": "eqasc_train_8332", "nl": "Ants communicate with chemicals called pheromones.", "fol": "", "prediction": ["all x.(Ant(x) -> CommunicatesWithPheromones(x))"]}
{"id": "eqasc_train_8333", "nl": "Ants communicate with the colony in the form of what is called pheremon trails.", "fol": "", "prediction": ["all x y.((Ant(x) & Colony(y)) -> CommunicatesInPheremonTrails(x,y))"]}
{"id": "eqasc_train_8334", "nl": "ants communicate with the colony with pheremone trails", "fol": "", "prediction": ["all x y.((Ant(x) & Colony(y)) -> CommunicatesWith(x,y))"]}
{"id": "eqasc_train_8335", "nl": "Ants communicate with semiochemicals", "fol": "", "prediction": ["all x y.((Ant(x) & Semiochemical(y)) -> CommunicatesWith(x,y))"]}
{"id": "eqasc_train_8336", "nl": "Pheromones are only found in insects.", "fol": "", "prediction": ["all x.(Pheromone(x) -> FoundInInsects(x))"]}
{"id": "eqasc_train_8337", "nl": "insects communicate with chemicals", "fol": "", "prediction": ["all x y.((Insect(x) & Chemical(y)) -> CommunicatesWith(x,y))"]}
{"id": "eqasc_train_8338", "nl": "Pheromones are insect hormones.", "fol": "", "prediction": ["all x.(Pheromone(x) -> InsectHormone(x))"]}
{"id": "eqasc_train_8339", "nl": "Ants communicate with their hormones", "fol": "", "prediction": ["all x y.((Ant(x) & Hormone(y)) -> CommunicatesWith(x,y))"]}
{"id": "eqasc_train_8340", "nl": "Ants use receptors on their antennae to follow recruitment pheromone trails.", "fol": "", "prediction": ["all x y.((Ant(x) & Antenna(y)) -> UsesReceptorsToFollowRecruitmentPheromoneTrails(x,y))"]}
{"id": "eqasc_train_8341", "nl": "Somei insects  communicate with chemicals detected by their antennae to communicate", "fol": "", "prediction": ["all x y z.((Insect(x) & Chemicals(y) & Antenna(z)) -> CommunicatesWith(x,y,z))"]}
{"id": "eqasc_train_8342", "nl": "Physiologically, ants leave a trail of pheromones, which other ants then follow.", "fol": "", "prediction": ["all x y.((Ant(x) & PheromoneTrail(y)) -> Leaves(x,y))"]}
{"id": "eqasc_train_8343", "nl": "Ants communicate by leaving chemical trails for other ants to follow.", "fol": "", "prediction": ["all x.(Ant(x) -> (LeavesChemicalTrails(x) & Communicates(x)))"]}
{"id": "eqasc_train_8344", "nl": "Pheromones are stinky chemicals excreted from glands throughout the ants body.", "fol": "", "prediction": ["all x.(Pheromone(x) -> (StinkyChemicalsExcreptFromGlands(x) & ThroughoutAntsBody(x)))"]}
{"id": "eqasc_train_8345", "nl": "Ants communicate via chemicals excreted by their bodies", "fol": "", "prediction": ["all x.(Ant(x) -> CommunicatesViaChemicalsExcrewedByBody(x))"]}
{"id": "eqasc_train_8346", "nl": "ants communicate with their antennae ", "fol": "", "prediction": ["all x y.((Ant(x) & Ante(y)) -> CommunicatesWith(x,y))"]}
{"id": "eqasc_train_8347", "nl": "Ants are of extreme importance in the insect world.", "fol": "", "prediction": ["all x.(Ant(x) -> ExtremeImportanceInInsectWorld(x))"]}
{"id": "eqasc_train_8348", "nl": "Some insects communicate with chemicals called pheromones.", "fol": "", "prediction": ["exists x.(Insect(x) & CommunicatesWith(x,pheromones))"]}
{"id": "eqasc_train_8349", "nl": "Pheromones are subtle scents emitted by animals in mating season.", "fol": "", "prediction": ["all x.(Pheromone(x) -> (SniffyScent(x) & EmittedByAnimals(x) & MatingSeason(x)))"]}
{"id": "eqasc_train_8350", "nl": "ants communicate with subtle scents", "fol": "", "prediction": ["all x y.((Ant(x) & Scent(y)) -> CommunicatesWith(x,y))"]}
{"id": "eqasc_train_8351", "nl": "Honeypot ants are classified in the genus Myrmecocystus.", "fol": "", "prediction": ["all x.(HoneypotAnt(x) -> ClassifiedInGenusMyrmecocystus(x))"]}
{"id": "eqasc_train_8352", "nl": "Members of the Myrmecocystus genus communicate via chemicals called pheromones.", "fol": "", "prediction": ["all x.((Member(x) & MyrmecocystusGenus(x)) -> CommunicatesThroughPheromones(x))"]}
{"id": "eqasc_train_8353", "nl": "Ants communicate with the colony using pheremon traits", "fol": "", "prediction": ["all x y z.((Ant(x) & Colony(y) & PheremonTraits(z)) -> CommunicatesWith(x,y,z))"]}
{"id": "eqasc_train_8354", "nl": "Another name for leaf cutter ants is red ants.", "fol": "", "prediction": ["all x.(LeafCutterAnt(x) -> RedAnt(x))"]}
{"id": "eqasc_train_8355", "nl": "leaf cutters communicate with chemicals called pheromones", "fol": "", "prediction": ["all x y.((LeafCutter(x) & Chemical(y)) -> CommunicatesWith(x,y))"]}
{"id": "eqasc_train_8356", "nl": "ants use trails to communicate", "fol": "", "prediction": ["all x y.((Ant(x) & Trail(y)) -> UsesToCommunicate(x,y))"]}
{"id": "eqasc_train_8357", "nl": "when a river floods , that river deposits soil in flood plains", "fol": "", "prediction": ["all x y z.((River(x) & Floods(x) & River(y) & FloodPlains(z)) -> DepositsSoilIn(y,z))"]}
{"id": "eqasc_train_8358", "nl": "Rivers become silted, plains flooded.", "fol": "", "prediction": ["all x y.((River(x) & Plain(y)) -> (BecomesSilted(x) & Flooded(y)))"]}
{"id": "eqasc_train_8359", "nl": "a flooded river becomes silted", "fol": "", "prediction": ["all x y.((River(x) & Flooded(x) & River(y)) -> Silted(x))"]}
{"id": "eqasc_train_8360", "nl": "Soil erosion harms farm and grazing lands and increases flooding and desertification.", "fol": "", "prediction": ["all x.(SoilErosion(x) -> (HarmsFarmAndGrazingLands(x) & IncreasesFloodingAndDesertification(x)))"]}
{"id": "eqasc_train_8361", "nl": "When a river floods, that river harms farm and grazing lands.", "fol": "", "prediction": ["all x.((River(x) & Floods(x)) -> HarmsFarmAndGrazingLands(x))"]}
{"id": "eqasc_train_8362", "nl": "Soils are largely composed of silicate minerals.", "fol": "", "prediction": ["all x.(Soil(x) -> ComposedOfSilicateMinerals(x))"]}
{"id": "eqasc_train_8363", "nl": "when a river floods, that river deposits silicate minerals in flood plains", "fol": "", "prediction": ["all x y z.((River(x) & Flood(y) & SilicateMinerals(z) & DepositsInFloodPlains(x,z)) -> Flood(z))"]}
{"id": "eqasc_train_8364", "nl": "Minerals are the constituents of rocks, sediments, and soils.", "fol": "", "prediction": ["all x.(Mineral(x) -> (ConstituentOfRocks(x) | ConstituentOfSediments(x) | ConstituentOfSoils(x)))"]}
{"id": "eqasc_train_8365", "nl": "when a river floods , that river deposits minerals in flood plains", "fol": "", "prediction": ["all x y z.((River(x) & Floods(x) & River(y) & FloodPlains(z)) -> DepositsMineralsIn(y,z))"]}
{"id": "eqasc_train_8366", "nl": "When the river is full, it floods into the flood plain and leaves behind fertile soil.", "fol": "", "prediction": ["all x.((River(x) & Full(x)) -> (FloodsIntoFloodPlaza(x) & LeavesFertileSoil(x)))"]}
{"id": "eqasc_train_8367", "nl": "plains get soil from floods", "fol": "", "prediction": ["all x y z.((Plains(x) & Flood(y) & Soil(z)) -> GetsFrom(x,y,z))"]}
{"id": "eqasc_train_8368", "nl": "Major river is the Colorado river.", "fol": "", "prediction": ["(MajorRiver(river) & ColoradoRiver(river))"]}
{"id": "eqasc_train_8369", "nl": "when the Colorado floods, it deposits soil in flood plains", "fol": "", "prediction": ["all x y z.((ColoradoFlood(x) & Soil(y) & FloodPlains(z)) -> DepositsIn(x,y,z))"]}
{"id": "eqasc_train_8370", "nl": "By far the mightiest of the great rivers is the Amazon .", "fol": "", "prediction": ["all x.((River(x) & Mightiest(x)) -> Amazon(x))"]}
{"id": "eqasc_train_8371", "nl": "When the Amazon floods it deposits soil in flood plains", "fol": "", "prediction": ["all x y z.((Amazon(x) & Flood(y) & Soil(z)) -> DepositsInFloodPlains(x,z))"]}
{"id": "eqasc_train_8372", "nl": "Cashion soils are on flood plains.", "fol": "", "prediction": ["all x.(CashionSoil(x) -> OnFloodPlains(x))"]}
{"id": "eqasc_train_8373", "nl": "when a river floods, Cashion soils are deposited.", "fol": "", "prediction": ["all x y.((River(x) & Floods(x)) -> CashionSoil(y))"]}
{"id": "eqasc_train_8374", "nl": "Flood plains are generally marshy.", "fol": "", "prediction": ["all x.(FloodPlatte(x) -> Marshy(x))"]}
{"id": "eqasc_train_8375", "nl": "when a river floods, it deposits soil in generally marshy areas", "fol": "", "prediction": ["all x y z.((River(x) & Floods(x) & Soil(y) & MarshyAreas(z)) -> DepositsIn(x,y,z))"]}
{"id": "eqasc_train_8376", "nl": "Large streams are rivers .", "fol": "", "prediction": ["all x.(LargeStream(x) -> River(x))"]}
{"id": "eqasc_train_8377", "nl": "when a large stream floods, it deposits soil in flood plains", "fol": "", "prediction": ["all x y z.((LargeStream(x) & Floods(x) & Soil(y) & FloodPlains(z)) -> DepositsIn(x,y,z))"]}
{"id": "eqasc_train_8378", "nl": "Examples of such streams are the Nile and Colorado Rivers.", "fol": "", "prediction": ["(Examples(River(Nile) & Stream(Colorado))"]}
{"id": "eqasc_train_8379", "nl": "When the Nile floods, the Nile deposits soil in flood plains.", "fol": "", "prediction": ["all x y.((Nile(x) & Flood(y)) -> DepositsSoilInFloodPlains(x,y))"]}
{"id": "eqasc_train_8380", "nl": "Hurricanes can cause local flooding, flash flooding, or coastal flooding.", "fol": "", "prediction": ["all x.(Hurricane(x) -> (CausesLocalFlooding(x) | CausesFlashFlooding(x) | CausesCoastalFlooding(x)))"]}
{"id": "eqasc_train_8381", "nl": "hurricanes can deposit soil in plains", "fol": "", "prediction": ["all x y.((Hurricane(x) & Plain(y)) -> CanDepositSoil(x,y))"]}
{"id": "eqasc_train_8382", "nl": "Rivers and creeks leave flood plains.", "fol": "", "prediction": ["all x.((River(x) | Creek(x)) -> LeavesFloodPlains(x))"]}
{"id": "eqasc_train_8383", "nl": "creeks deposit soil in plains", "fol": "", "prediction": ["all x y z.((Crater(x) & Plain(y) & Soil(z)) -> DepositsIn(x,y,z))"]}
{"id": "eqasc_train_8384", "nl": "Plants grow in soil.", "fol": "", "prediction": ["all x.(Plant(x) -> GrowsInSoil(x))"]}
{"id": "eqasc_train_8385", "nl": "flooding rivers help plants grow", "fol": "", "prediction": ["all x y.((FloodingRiver(x) & Plant(y)) -> HelpsGrow(x,y))"]}
{"id": "eqasc_train_8386", "nl": "Flatworms belong to the phylum Platyhelminthes.", "fol": "", "prediction": ["all x.(Flatworm(x) -> BelongsToPhylumPlatyhelminthes(x))"]}
{"id": "eqasc_train_8387", "nl": "Most of the flatworms are parasitic, although the Turbellaria are free-living in fresh water.", "fol": "", "prediction": ["all x.(Flatworm(x) -> (Parasitic(x) & FreeLiving(x) & FreshWater(x)))"]}
{"id": "eqasc_train_8388", "nl": "Phylum Platyhelminthes are mostly parasitic.", "fol": "", "prediction": ["all x.(PhylumPlatyhelminthe(x) -> Parasitic(x))"]}
{"id": "eqasc_train_8389", "nl": "Parasitic flatworms have evolved a close association with their hosts.", "fol": "", "prediction": ["all x.(ParasiticFlatworm(x) -> CloseAssociationWithHosts(x))"]}
{"id": "eqasc_train_8390", "nl": "organisms belonging to the phylum Platyhelminthes have evolved a close association with their hosts", "fol": "", "prediction": ["all x.((Organism(x) & PhylumPlatyhelminthes(x)) -> CloseAssociationWithHosts(x))"]}
{"id": "eqasc_train_8391", "nl": "Flatworms have brains.", "fol": "", "prediction": ["all x.(Flatworm(x) -> HasBrains(x))"]}
{"id": "eqasc_train_8392", "nl": "Somethign belonging to the phylum Platyhelminthes has a brain", "fol": "", "prediction": ["exists x.(Somethign(x) & PhylumPlatyhelminthes(x) & HasBrain(x))"]}
{"id": "eqasc_train_8393", "nl": "Flatworms Flatworms or Platyhelminthes include flukes, tapeworms, and turbellarians.", "fol": "", "prediction": ["all x.(Flatworm(x) | (Flukes(x) | Tapeworms(x) | Turbellarians(x))))"]}
{"id": "eqasc_train_8394", "nl": "Types of flatworms are flukes, tapeworms, and turbellarians.", "fol": "", "prediction": ["all x.(Flatworm(x) -> (Flukes(x) | Tapeworms(x) | Turbellarians(x)))"]}
{"id": "eqasc_train_8395", "nl": "Tapeworms belong to the phylum Platyhelminthes.", "fol": "", "prediction": ["all x.(Tapeworm(x) -> BelongsToPhylumPlatyhelminthes(x))"]}
{"id": "eqasc_train_8396", "nl": "Flatworms are bilaterally symmetric.", "fol": "", "prediction": ["all x.(Flatworm(x) -> BilaterallySymmetric(x))"]}
{"id": "eqasc_train_8397", "nl": "the phylum Platyhelminthes has bilateral symmetry", "fol": "", "prediction": ["all x.(PhylumPlatyhelminthes(x) -> BilateralSymmetry(x))"]}
{"id": "eqasc_train_8398", "nl": "Bilaterally symmetric worms belong to the phylum Platyhelminthes.", "fol": "", "prediction": ["all x.((Wworm(x) & BilaterallySymmetric(x)) -> PhylumPlatyhelminthes(x))"]}
{"id": "eqasc_train_8399", "nl": "the phylum Platyhelminthes is bilaterally symmetric", "fol": "", "prediction": ["all x.(Platyhelminthes(x) -> BilaterallySymmetricPhylum(x))"]}
{"id": "eqasc_train_8400", "nl": "uneven heating of the Earth 's surface cause wind", "fol": "", "prediction": ["all x y.((EarthSurface(x) & UnevenHeating(x,y)) -> WindCause(x))"]}
{"id": "eqasc_train_8401", "nl": "Wind can damage crops.", "fol": "", "prediction": ["all x.(Wind(x) -> DamagesCrops(x))"]}
{"id": "eqasc_train_8402", "nl": "Uneven heating of the Earth's surface can damage crops.", "fol": "", "prediction": ["all x.((UnevenHeating(x) & EarthSurface(x)) -> DamagesCrops(x))"]}
{"id": "eqasc_train_8403", "nl": "Winds destroy homes and businesses.", "fol": "", "prediction": ["all x.(Wind(x) -> (DestroysHomes(x) & DestroysBusinesses(x)))"]}
{"id": "eqasc_train_8404", "nl": "Uneven heating of the Earth's surface causes destruction to homes and businesses.", "fol": "", "prediction": ["all x.(UnevenHeatingOfEarthSurface(x) -> CausesDestructionToHomesAndBusinesses(x))"]}
{"id": "eqasc_train_8405", "nl": "uneven heating of the Earth 's surface causes hurricanes", "fol": "", "prediction": ["all x y.((UnevenHeating(x) & EarthSurface(y)) -> CausesHurricane(x,y))"]}
{"id": "eqasc_train_8406", "nl": "Some local winds include sea breezes, land breezes, and monsoons.", "fol": "", "prediction": ["exists x.(LocalWind(x) & (SeaBreath(x) | LandBreath(x) | Monsoon(x)))"]}
{"id": "eqasc_train_8407", "nl": "Breezes are caused by uneven heating of the Earth's surface.", "fol": "", "prediction": ["all x.(Breeze(x) -> (UnevenHeatingOfEarthSurface(x) & CausedBy(x,y)))"]}
{"id": "eqasc_train_8408", "nl": "WIND Wind is the movement of atmospheric air on a planet.", "fol": "", "prediction": ["all x.(WIND(x) -> (MovementOfAtmosphericAir(x) & OnPlanet(x)))"]}
{"id": "eqasc_train_8409", "nl": "Uneven heating of the Earth 's surface causes the movement of atmospheric air.", "fol": "", "prediction": ["all x.((UnevenHeating(x) & EarthSurface(x)) -> CausesMovementOfAtmosphericAir(x))"]}
{"id": "eqasc_train_8410", "nl": "Wind can cause damage to buildings and bring down power lines.", "fol": "", "prediction": ["all x y.((Wind(x) & Building(y)) -> (CausesDamage(x,y) & BringsDownPowerLines(x)))"]}
{"id": "eqasc_train_8411", "nl": "uneven heating of the earth's surface can cause damage to buildings", "fol": "", "prediction": ["all x.(UnevenHeatingOfEarthSurface(x) -> CausesDamageToBuildings(x))"]}
{"id": "eqasc_train_8412", "nl": "Wind is a movement of air, and air is invisible.", "fol": "", "prediction": ["all x y.((Wind(x) & Air(y)) -> (MovementOf(x,y) & Invisible(y)))"]}
{"id": "eqasc_train_8413", "nl": "uneven heating of the Earth 's surface causes a movement of air", "fol": "", "prediction": ["all x y z.((UnevenHeating(x) & EarthSurface(y) & Air(z)) -> CausesMovementOf(x,y,z))"]}
{"id": "eqasc_train_8414", "nl": "If the wind is less, then most kites have problems flying.", "fol": "", "prediction": ["all x.((WindLess(x) & Kite(x)) -> HasProblemsFlying(x))"]}
{"id": "eqasc_train_8415", "nl": "uneven heating of the Earth's surface cause something that kites use", "fol": "", "prediction": ["all x y.((Kite(x) & EarthSurface(y)) -> UnevenHeating(x,y))"]}
{"id": "eqasc_train_8416", "nl": "Extremely high winds can cause extensive damage.", "fol": "", "prediction": ["all x.(ExtremelyHighWinds(x) -> CausesExtensiveDamage(x))"]}
{"id": "eqasc_train_8417", "nl": "Uneven heating of the Earth's surface can cause extensive damage.", "fol": "", "prediction": ["all x.(UnevenHeatingOfEarthSurface(x) -> CausesExtensiveDamage(x))"]}
{"id": "eqasc_train_8418", "nl": "Wind is air that is moving.", "fol": "", "prediction": ["all x.(Wind(x) -> AirMoving(x))"]}
{"id": "eqasc_train_8419", "nl": "uneven heating of the Earth's surface causes moving air", "fol": "", "prediction": ["all x.(UnevenHeatingOfEarthSurface(x) -> CausesMovingAir(x))"]}
{"id": "eqasc_train_8420", "nl": "Wind is produced as the sun heats the air.", "fol": "", "prediction": ["all x y.((Wind(x) & Sun(y)) -> HeatsAir(x,y))"]}
{"id": "eqasc_train_8421", "nl": "wind is caused by the sun", "fol": "", "prediction": ["all x y.((Wind(x) & Sun(y)) -> CausedBy(x,y))"]}
{"id": "eqasc_train_8422", "nl": "Geothermal heat is warm heat.", "fol": "", "prediction": ["all x.(GeothermalHeat(x) -> WarmHeat(x))"]}
{"id": "eqasc_train_8423", "nl": "Uneven warming of the Earth's surface causes wind.", "fol": "", "prediction": ["all x.(UnevenWarmingOfEarthSurface(x) -> CausesWind(x))"]}
{"id": "eqasc_train_8424", "nl": "Chinook winds are warm, dry winds.", "fol": "", "prediction": ["all x.(ChinookWind(x) -> (Warm(x) & Dry(x)))"]}
{"id": "eqasc_train_8425", "nl": "uneven heating of the Earth's surface causes chinooks", "fol": "", "prediction": ["all x.(UnevenHeatingOfEarthSurface(x) -> Chinook(x))"]}
{"id": "eqasc_train_8426", "nl": "Some winds are destructive.", "fol": "", "prediction": ["exists x.(Wind(x) & Destructive(x))"]}
{"id": "eqasc_train_8427", "nl": "uneven heating of the Earth 's surface causes destruction", "fol": "", "prediction": ["all x y.((EarthSurface(x) & UnevenHeating(x,y)) -> CausesDestruction(x))"]}
{"id": "eqasc_train_8428", "nl": "Wind belts arise because of the uneven heating of Earth s surface by the Sun.", "fol": "", "prediction": ["all x y.((WindBelt(x) & EarthSurface(y)) -> UnevenHeating(x,y))"]}
{"id": "eqasc_train_8429", "nl": "Uneven heating by the Sun causes wind.", "fol": "", "prediction": ["all x.(UnevenHeatingBySun(x) -> CausesWind(x))"]}
{"id": "eqasc_train_8430", "nl": "a stem is used to store water by some plants", "fol": "", "prediction": ["all x y.((Stem(x) & Plant(y)) -> StoresWater(x,y))"]}
{"id": "eqasc_train_8431", "nl": "Stems Stems are the support structures of a plant.", "fol": "", "prediction": ["all x y.((Stem(x) & Plant(y)) -> SupportStructure(x,y))"]}
{"id": "eqasc_train_8432", "nl": "Support structures of a plant may store water for some plants", "fol": "", "prediction": ["all x y.((SupportStructure(x) & Plant(y)) -> (StoresWater(x,y) & ForSomePlants(x,y)))"]}
{"id": "eqasc_train_8433", "nl": "stems help plants survive", "fol": "", "prediction": ["all x y.((Stem(x) & Plant(y)) -> HelpsSurvive(x,y))"]}
{"id": "eqasc_train_8434", "nl": "When it rains, the roots absorb water quickly and the plants store the water in the stems.", "fol": "", "prediction": ["all x y z.((Rain(x) & Roots(y) & Plant(z)) -> (AbsorbsWaterQuickly(y,x) & StoresWaterInStems(z,x)))"]}
{"id": "eqasc_train_8435", "nl": "Plants store water by absorbing water quickly through their roots.", "fol": "", "prediction": ["all x.(Plant(x) -> (StoresWater(x) & AbsorbsWaterQuickly(x)))"]}
{"id": "eqasc_train_8436", "nl": "some plants need a stem to survive", "fol": "", "prediction": ["exists x.(Plant(x) & NeedsStem(x))"]}
{"id": "eqasc_train_8437", "nl": "Stems carry water and nutrients.", "fol": "", "prediction": ["all x.(Stem(x) -> (CarriesWater(x) & CarriesNutrients(x)))"]}
{"id": "eqasc_train_8438", "nl": "stems hold nutrients in plants", "fol": "", "prediction": ["all x y.((Stem(x) & Plant(y)) -> HoldsNutrientsIn(x,y))"]}
{"id": "eqasc_train_8439", "nl": "Support structures of a plant are sometimes used to store water.", "fol": "", "prediction": ["all x y.((Plant(x) & SupportStructure(y)) -> StoresWater(y))"]}
{"id": "eqasc_train_8440", "nl": "Some plants store water after absorbing it with the roots", "fol": "", "prediction": ["exists x.(Plant(x) & StoresWater(x) & AbsorbsWaterWithRoots(x))"]}
{"id": "eqasc_train_8441", "nl": "Inside the stem is fibrous material.", "fol": "", "prediction": ["all x.(Stem(x) -> FibrousMaterial(x))"]}
{"id": "eqasc_train_8442", "nl": "Some plants store water in fibrous material.", "fol": "", "prediction": ["exists x.(Plant(x) & StoresWaterInFilm(x))"]}
{"id": "eqasc_train_8443", "nl": "ferns use stems to store water", "fol": "", "prediction": ["all x.(Fern(x) -> (UsesStems(x) & StoresWater(x)))"]}
{"id": "eqasc_train_8444", "nl": "Some plants also store water in their trunks and stems.", "fol": "", "prediction": ["exists x.(Plant(x) & StoresWaterInTreesAndStems(x))"]}
{"id": "eqasc_train_8445", "nl": "plants store water in their trunks", "fol": "", "prediction": ["all x.(Plant(x) -> StoresWaterInTrunk(x))"]}
{"id": "eqasc_train_8446", "nl": "The support structure of a plant is used to store water.", "fol": "", "prediction": ["all x y.((Plant(x) & SupportStructure(y)) -> StoresWater(y))"]}
{"id": "eqasc_train_8447", "nl": "a stem is used to store h2o by some plants", "fol": "", "prediction": ["all x y.((Stem(x) & Plant(y)) -> StoresH2o(x,y))"]}
{"id": "eqasc_train_8448", "nl": "Seasonal flowering plants planted.", "fol": "", "prediction": ["all x.((SeasonalFloweringPlant(x) & Plant(y)) -> Planted(x,y))"]}
{"id": "eqasc_train_8449", "nl": "Some flowers use stems to store water.", "fol": "", "prediction": ["exists x.(Flower(x) & UsesStems(x))"]}
{"id": "eqasc_train_8450", "nl": "damming a river can cause a lake to form", "fol": "", "prediction": ["all x y.((River(x) & Lake(y)) -> DammingCanCauseToForm(x,y))"]}
{"id": "eqasc_train_8451", "nl": "Beavers know how to cut wood and build dams.", "fol": "", "prediction": ["all x.(Beaver(x) -> (KnowsHowToCutWood(x) & KnowsHowToBuildDams(x)))"]}
{"id": "eqasc_train_8452", "nl": "Beavers can create lakes", "fol": "", "prediction": ["all x y.((Beaver(x) & Lake(y)) -> CanCreate(x,y))"]}
{"id": "eqasc_train_8453", "nl": "You can also water ski on Lake Mohave north of Davis Dam.", "fol": "", "prediction": ["all x.(WaterSki(x) -> LakeMohaveNorthOfDavisDamp(x))"]}
{"id": "eqasc_train_8454", "nl": "damming a river opens new areas for water skiing", "fol": "", "prediction": ["all x y z.((River(x) & Damming(x,y) & River(y)) -> (OpensNewAreasForWaterSkiing(z) & OpensNewAreasForWaterSkiing(z)))"]}
{"id": "eqasc_train_8455", "nl": "The beavers live on this side, and create dams.", "fol": "", "prediction": ["all x.(Beaver(x) -> (LivesOnSide(x) & CreatesDams(x)))"]}
{"id": "eqasc_train_8456", "nl": "beavers can cause a lake to form", "fol": "", "prediction": ["all x y.((Beaver(x) & Lake(y)) -> CausesToForm(x,y))"]}
{"id": "eqasc_train_8457", "nl": "There is no spillway at Lake Tahoe Dam.", "fol": "", "prediction": ["-SpillwayAtLakeTahoeDam(x)"]}
{"id": "eqasc_train_8458", "nl": "spillways can affect the level of lakes", "fol": "", "prediction": ["all x y.((Springway(x) & Lake(y)) -> CanAffectLevel(x,y))"]}
{"id": "eqasc_train_8459", "nl": "Beavers build dams.", "fol": "", "prediction": ["all x.(Beaver(x) -> BuildsDam(x))"]}
{"id": "eqasc_train_8460", "nl": "Beavers help lakes to form.", "fol": "", "prediction": ["all x.(Beaver(x) -> HelpsLakeForm(x))"]}
{"id": "eqasc_train_8461", "nl": "Nothing alters a river as totally as a dam.", "fol": "", "prediction": ["all x y.((River(x) & Dam(y)) -> AltersTotal(x,y))"]}
{"id": "eqasc_train_8462", "nl": "a dam can form a lake", "fol": "", "prediction": ["all x y.((Dam(x) & Lake(y)) -> CanForm(x,y))"]}
{"id": "eqasc_train_8463", "nl": "Water ponding in a depression forms a lake.", "fol": "", "prediction": ["all x y.((WaterPooling(x) & Depression(y)) -> FormsLake(x,y))"]}
{"id": "eqasc_train_8464", "nl": "Damming a river can cause water ponding in a depression.", "fol": "", "prediction": ["all x y.((River(x) & Damming(x,y)) -> CausesWaterPooling(x,y))"]}
{"id": "eqasc_train_8465", "nl": "Beavers can cause lakes to form.", "fol": "", "prediction": ["all x.(Beaver(x) -> CausesLakeFormation(x))"]}
{"id": "eqasc_train_8466", "nl": "Beavers build dams that create ponds.", "fol": "", "prediction": ["all x y.((Beaver(x) & Dam(y)) -> (Builds(x,y) & CreatesPond(x)))"]}
{"id": "eqasc_train_8467", "nl": "Beavers cause ponds and lakes to form", "fol": "", "prediction": ["all x y z.((Beaver(x) & Pond(y) & Lake(z)) -> CausesFormation(x,y,z))"]}
{"id": "eqasc_train_8468", "nl": "The dam also generates electricity.", "fol": "", "prediction": ["all x.(Dam(x) -> GeneratesElectricity(x))"]}
{"id": "eqasc_train_8469", "nl": "Something that generates electricity can cause a lake to form", "fol": "", "prediction": ["all x.((GeneratesElectricity(x) & LakeForms(x)) -> CausesFormation(x))"]}
{"id": "eqasc_train_8470", "nl": "Beavers can cause lakes to form", "fol": "", "prediction": ["all x y.((Beaver(x) & Lake(y)) -> CausesToForm(x,y))"]}
{"id": "eqasc_train_8471", "nl": "Water in the lakes is fresh, cool and transparent.", "fol": "", "prediction": ["all x.(Lake(x) -> (FreshWater(x) & CoolWater(x) & TransparentWater(x)))"]}
{"id": "eqasc_train_8472", "nl": "Damming a river can cause something with fresh water to form", "fol": "", "prediction": ["all x y.((River(x) & Damming(x,y)) -> CausesFreshWater(y))"]}
{"id": "eqasc_train_8473", "nl": "sharpening an object causes that object to change shape", "fol": "", "prediction": ["all x y.((Object(x) & Sharpening(x,y)) -> ChangeShape(x,y))"]}
{"id": "eqasc_train_8474", "nl": "Very often their only metal object in the house is a cooking pot or a knife.", "fol": "", "prediction": ["all x.((House(x) & (CookingPot(x) | Knife(x))) -> MetalObject(x))"]}
{"id": "eqasc_train_8475", "nl": "sharpening a knife causes it to change shape", "fol": "", "prediction": ["all x y.((Knife(x) & Sharpening(x,y)) -> ChangeShape(y))"]}
{"id": "eqasc_train_8476", "nl": "An electric sharpener removes too much metal and often causes waves.", "fol": "", "prediction": ["all x.(ElectricSharpener(x) -> (RemovesTooMuchMetal(x) & CausesWaves(x)))"]}
{"id": "eqasc_train_8477", "nl": "An object's shape can be changed by removing material.", "fol": "", "prediction": ["all x.((Object(x) & RemovesMaterial(x)) -> ChangesShape(x))"]}
{"id": "eqasc_train_8478", "nl": "And the shape and look of the family has changed, as well.", "fol": "", "prediction": ["(ChangedShape(family) & ChangedLook(family))"]}
{"id": "eqasc_train_8479", "nl": "Sharpening an object changes its look.", "fol": "", "prediction": ["all x y.((Object(x) & Sharpening(x,y)) -> ChangesLook(x,y))"]}
{"id": "eqasc_train_8480", "nl": "Form Form is the shape of objects.", "fol": "", "prediction": ["All x.(Form(x) -> ShapeOfObjects(x))"]}
{"id": "eqasc_train_8481", "nl": "Sharpening an object causes that object to change form", "fol": "", "prediction": ["all x y.((Object(x) & Sharpening(x) & Sharpening(y)) -> ChangeForm(x,y))"]}
{"id": "eqasc_train_8482", "nl": "Another example is the Swiss army knife that contains other objects.", "fol": "", "prediction": ["(SwissArmyKnife(x) & ContainsOtherObjects(x))"]}
{"id": "eqasc_train_8483", "nl": "sharpening an item causes that item to change shape", "fol": "", "prediction": ["all x y.((Item(x) & Sharpening(x) & Item(y)) -> ChangeShape(y,x))"]}
{"id": "eqasc_train_8484", "nl": "Each stone incorporates a groove for sharpening pointed objects such as fish hooks and darts.", "fol": "", "prediction": ["all x.(Stone(x) -> IncorporatesRopeForSharpeningPointedObjects(x))"]}
{"id": "eqasc_train_8485", "nl": "stones can be reshaped", "fol": "", "prediction": ["all x.(Stone(x) -> CanBeReshaped(x))"]}
{"id": "eqasc_train_8486", "nl": "a generator converts kinetic energy into electrical energy", "fol": "", "prediction": ["all x y.((Generator(x) & KineticEnergy(y)) -> ConvertsToElectricalEnergy(x,y))"]}
{"id": "eqasc_train_8487", "nl": "Electric lamps produce light by means of electric energy.", "fol": "", "prediction": ["all x.(ElectricLamp(x) -> ProducesLightByElectricEnergy(x))"]}
{"id": "eqasc_train_8488", "nl": "a generator can convert kinetic energy into light", "fol": "", "prediction": ["all x y.((Generator(x) & KineticEnergy(y)) -> ConvertsToLight(x,y))"]}
{"id": "eqasc_train_8489", "nl": "Kinetic energy is energy in motion.", "fol": "", "prediction": ["all x.(KineticEnergy(x) -> EnergyInMotion(x))"]}
{"id": "eqasc_train_8490", "nl": "motion can be converted into electrical energy with a generator", "fol": "", "prediction": ["all x y.((Motion(x) & Generator(y)) -> ConvertsToElectricalEnergy(x,y))"]}
{"id": "eqasc_train_8491", "nl": "A generator can be used to store energy in batteries", "fol": "", "prediction": ["all x.(Generator(x) -> StoresEnergyInBatteries(x))"]}
{"id": "eqasc_train_8492", "nl": "Gas generator turbine is the turbine portion of a gas generator.", "fol": "", "prediction": ["all x.(GasGeneratorTurbine(x) -> (TurbinePieceOfGasGenerator(x) & PoweredBy(x,GasGenerator)))"]}
{"id": "eqasc_train_8493", "nl": "Gas can be converted into electrical energy.", "fol": "", "prediction": ["all x.(Gas(x) -> ConvertibleToElectricalEnergy(x))"]}
{"id": "eqasc_train_8494", "nl": "And that energy is generated by burning fossil fuel.", "fol": "", "prediction": ["all x.(Energy(x) -> BurnsFossilFuel(x))"]}
{"id": "eqasc_train_8495", "nl": "a generator uses fossil fuel", "fol": "", "prediction": ["all x y.((Generator(x) & FossilFuel(y)) -> Uses(x,y))"]}
{"id": "eqasc_train_8496", "nl": "Generator A generator produces electricity.", "fol": "", "prediction": ["all x.(Generator(x) -> ProducesElectricity(x))"]}
{"id": "eqasc_train_8497", "nl": "kinetic energy can be converted into electricity", "fol": "", "prediction": ["all x.(KineticEnergy(x) -> ConvertibleToElectricity(x))"]}
{"id": "eqasc_train_8498", "nl": "Water behind a dam has potential energy that can be converted to kinetic energy.", "fol": "", "prediction": ["all x y.((Water(x) & Dam(y)) -> (PotentialEnergy(x,y) & CanConvertToKineticEnergy(x,y)))"]}
{"id": "eqasc_train_8499", "nl": "a generator is used to turn water behind a dam into electrical energy", "fol": "", "prediction": ["all x y z.((Generator(x) & Dam(y) & Water(z)) -> TurnsIntoElectricalEnergy(x,z))"]}
{"id": "eqasc_train_8500", "nl": "Kinetic energy is the energy of movement.", "fol": "", "prediction": ["all x.(KineticEnergy(x) -> EnergyOfMovement(x))"]}
{"id": "eqasc_train_8501", "nl": "Generators use movement to create electrical energy", "fol": "", "prediction": ["all x y.((Generator(x) & Movement(y)) -> CreatesElectricalEnergy(x,y))"]}
{"id": "eqasc_train_8502", "nl": "Electricity A kWh is a unit of electricity.", "fol": "", "prediction": ["all x.(kWh(x) -> ElectricityUnit(x))"]}
{"id": "eqasc_train_8503", "nl": "A generator converts kinetic energy into kWh.", "fol": "", "prediction": ["all x.(Generator(x) -> ConvertsKineticEnergyTokWh(x))"]}
{"id": "eqasc_train_8504", "nl": "Electricity is a powerful energy source.", "fol": "", "prediction": ["all x.(Electricity(x) -> PowerfulEnergySource(x))"]}
{"id": "eqasc_train_8505", "nl": "Generators convert kinetic energy into a powerful energy source.", "fol": "", "prediction": ["all x.(Generator(x) -> (ConvertsKineticEnergy(x) & PowerfulEnergySource(x)))"]}
{"id": "eqasc_train_8506", "nl": "Electrical energy is converted into light energy in the headlights.", "fol": "", "prediction": ["all x y.((ElectricalEnergy(x) & Headlight(y)) -> ConvertedToLightEnergy(x,y))"]}
{"id": "eqasc_train_8507", "nl": "A generator converts kinetic energy into something that is converted into light energy by headlights", "fol": "", "prediction": ["all x y z.((Generator(x) & KineticEnergy(y) & Headlight(z)) -> ConvertsTo(x,y,z))"]}
{"id": "eqasc_train_8508", "nl": "Grasses supply most of the food consumed by people worldwide.", "fol": "", "prediction": ["all x.(Grass(x) -> SupplyesMostOfFood(x))"]}
{"id": "eqasc_train_8509", "nl": "Grasses are an important source of food for people as well as animals.", "fol": "", "prediction": ["all x.(Grass(x) -> (ImportantFoodSource(x) & ForPeople(x) & ForAnimals(x)))"]}
{"id": "eqasc_train_8510", "nl": "Grass supplies a source of food for animals worldwide", "fol": "", "prediction": ["all x y.((Grass(x) & Animal(y)) -> SuppliesFoodSource(x,y))"]}
{"id": "eqasc_train_8511", "nl": "Grasses are wheat and wild oats.", "fol": "", "prediction": ["all x.(Grass(x) -> (Wheat(x) | WildOat(x)))"]}
{"id": "eqasc_train_8512", "nl": "Wheat supplies food consumed by people", "fol": "", "prediction": ["all x y.((Wheat(x) & Person(y)) -> SuppliesFood(x,y))"]}
{"id": "eqasc_train_8513", "nl": "Grasses are also important food for waterfowl.", "fol": "", "prediction": ["all x.(Grass(x) -> ImportantFoodForWaterfowl(x))"]}
{"id": "eqasc_train_8514", "nl": "important food for waterfowl supply most of the food consumed by people worldwide", "fol": "", "prediction": ["all x y.((Waterfowl(x) & Food(y)) -> (Waterfowl(x) & Food(y) & ConsumedByPeople(x,y)))"]}
{"id": "eqasc_train_8515", "nl": "Wheat is a grass-type plant.", "fol": "", "prediction": ["all x.(Wheat(x) -> (GrassTypePlant(x) & -GrassTypePlant(x)))"]}
{"id": "eqasc_train_8516", "nl": "wheat is a plant that is consumed by people worldwide.", "fol": "", "prediction": ["all x.(Wheat(x) -> (Plant(x) & ConsumedByPeople(x)))"]}
{"id": "eqasc_train_8517", "nl": "Rice is a member of the grass family.", "fol": "", "prediction": ["all x.(Rice(x) -> MemberOfGrassFamily(x))"]}
{"id": "eqasc_train_8518", "nl": "rice is consumed by the most people worldwide", "fol": "", "prediction": ["all x y.((Rice(x) & MostPeople(y)) -> ConsumedBy(x,y))"]}
{"id": "eqasc_train_8519", "nl": "Grasses supply most of the energy used by people worldwide.", "fol": "", "prediction": ["all x.(Grass(x) -> (SuppliesEnergy(x) & UsedByPeople(x)))"]}
{"id": "eqasc_train_8520", "nl": "Grasses and other herbaceous plants are preferred food.", "fol": "", "prediction": ["all x.((Grasse(x) | HerbaceousPlant(x)) -> PreferredFood(x))"]}
{"id": "eqasc_train_8521", "nl": "herbaceous plants supply the world with food", "fol": "", "prediction": ["all x y.((HerbaceousPlant(x) & Food(y)) -> SupplysFood(x,y))"]}
{"id": "eqasc_train_8522", "nl": "wheat and wild oats are part of the group that supplies most of the food consumed by people worldwide. ", "fol": "", "prediction": ["all x y.((Wheat(x) & WildOat(y)) -> (SuppliesMostOfFood(x,y) & ConsumedByPeople(x,y)))"]}
{"id": "eqasc_train_8523", "nl": "Plants supply most of the food consumed by people worldwide.", "fol": "", "prediction": ["all x.(Plant(x) -> SupplyesMostOfFood(x))"]}
{"id": "eqasc_train_8524", "nl": "Sugarcane, a grass, provides much of the world's sugar.", "fol": "", "prediction": ["all x.(Sugarcane(x) -> (Grass(x) & ProvidesWorldSugar(x)))"]}
{"id": "eqasc_train_8525", "nl": "Plants like sugarcane supply most of the food consumed by people worldwide", "fol": "", "prediction": ["all x y.((Plant(x) & Sugarcane(y)) -> SupplyesMostOfFood(x,y))"]}
{"id": "eqasc_train_8526", "nl": "a greenhouse is used to protect plants from the cold", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> ProtectsFromCold(x,y))"]}
{"id": "eqasc_train_8527", "nl": "The air in the greenhouse is humid.", "fol": "", "prediction": ["all x.(Greenhouse(x) -> HumidAir(x))"]}
{"id": "eqasc_train_8528", "nl": "Protection and humidity is important for plants.", "fol": "", "prediction": ["all x.((Plant(x) & ImportantFor(x,Plants)) -> (Protection(x) & Humidity(x)))"]}
{"id": "eqasc_train_8529", "nl": "A greenhouse is made entirely of glass.", "fol": "", "prediction": ["all x.(Greenhouse(x) -> MadeOfGlass(x))"]}
{"id": "eqasc_train_8530", "nl": "Glass can be used to protect plants from cold.", "fol": "", "prediction": ["all x.(Glass(x) -> ProtectsFromCold(x))"]}
{"id": "eqasc_train_8531", "nl": "Greenhouses are made with glass , fiberglass , polyethylene, or vinyl coverings.", "fol": "", "prediction": ["all x.(Greenhouse(x) -> (MadeWith(x,glass) | MadeWith(x,fibreglass) | MadeWith(x,polyethylene) | MadeWith(x,vinyl)))"]}
{"id": "eqasc_train_8532", "nl": "Something made of glass , fiberglass , polyethylene, or vinyl  is used to protect plants from the cold.", "fol": "", "prediction": ["all x.((MadeOf(x,glass) | MadeOf(x,fibreglass) | MadeOf(x,polyethylene) | MadeOf(x,vinyl)) -> ProtectsPlantsFromCold(x))"]}
{"id": "eqasc_train_8533", "nl": "If it's too cold, some plants freeze and die.", "fol": "", "prediction": ["all x.((TooCold(x) & Plant(y)) -> (Freezes(y) & Dies(y)))"]}
{"id": "eqasc_train_8534", "nl": "a greenhouse can keep plants from dying", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> KeepsFromDying(x,y))"]}
{"id": "eqasc_train_8535", "nl": "If it is too cold, certain plants will freeze and die.", "fol": "", "prediction": ["all x.((TooCold(x) & Plant(x)) -> (Freeze(x) & Die(x)))"]}
{"id": "eqasc_train_8536", "nl": "A greenhouse protects plants from freezing and dying.", "fol": "", "prediction": ["all x.(Greenhouse(x) -> (ProtectsPlantsFromFreezing(x) & ProtectsPlantsFromDieting(x)))"]}
{"id": "eqasc_train_8537", "nl": "Blizzards are heavy snows, very cold temperatures and high winds.", "fol": "", "prediction": ["all x.(Blizzard(x) -> (HeavySnows(x) & VeryColdTemperatures(x) & HighWinds(x)))"]}
{"id": "eqasc_train_8538", "nl": "greenhouses protect plants from blizzards", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> ProtectsFromBlizzards(x,y))"]}
{"id": "eqasc_train_8539", "nl": "a greenhouse protects plants from death", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> ProtectsFromDeath(x,y))"]}
{"id": "eqasc_train_8540", "nl": "Plants are grown in greenhouses and protected from wild butterflies.", "fol": "", "prediction": ["all x.(Plant(x) -> (GrownInGreenhouses(x) & ProtectedFromWildButterflies(x)))"]}
{"id": "eqasc_train_8541", "nl": "Plants are grown where they are protected from the cold", "fol": "", "prediction": ["all x y.((Plant(x) & ColdCold(y)) -> GrownWhereProtectedFrom(x,y))"]}
{"id": "eqasc_train_8542", "nl": "Flowers are beautiful kinds of plants.", "fol": "", "prediction": ["all x.(Flower(x) -> BeautifulPlant(x))"]}
{"id": "eqasc_train_8543", "nl": "A greenhouse is used to protect flowers from the cold", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Flower(y)) -> ProtectsFromCold(x,y))"]}
{"id": "eqasc_train_8544", "nl": "a greenhouse is used to protect orchids from the cold", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Orchid(y)) -> ProtectsFromCold(x,y))"]}
{"id": "eqasc_train_8545", "nl": "Greenhouse plants grow healthier.", "fol": "", "prediction": ["all x.(GreenhousePlant(x) -> GrowsHealthier(x))"]}
{"id": "eqasc_train_8546", "nl": "plants grow healthier if they are protected from the cold", "fol": "", "prediction": ["all x.((Plant(x) & ProtectedFromCold(x)) -> GrowsHealthier(x))"]}
{"id": "eqasc_train_8547", "nl": "Molecules expand with heat and contract with cold.", "fol": "", "prediction": ["all x.(Molecule(x) -> (ExpandsWithHeat(x) & ContractsWithCold(x)))"]}
{"id": "eqasc_train_8548", "nl": "a greenhouse is used to protect plants from contracting molecules", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> ProtectsFromContractingMolecules(x,y))"]}
{"id": "eqasc_train_8549", "nl": "a greenhouse is used to protect flowers from the cold", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Flower(y)) -> ProtectsFromCold(x,y))"]}
{"id": "eqasc_train_8550", "nl": "Bulbs planted in pots are particularly susceptible to cold damage.", "fol": "", "prediction": ["all x.((Bulbs(x) & PlantedInPots(x)) -> ParticularlySusceptibleToColdDamage(x))"]}
{"id": "eqasc_train_8551", "nl": "Bulbs in pots can be protected from cold damage in a greenhouse", "fol": "", "prediction": ["all x y.((BulbsInPots(x) & Greenhouse(y)) -> CanBeProtectedFromColdDamage(x,y))"]}
{"id": "eqasc_train_8552", "nl": "Plants are very easily raised from seed, sown in a cold greenhouse from February to April.", "fol": "", "prediction": ["all x.(Plant(x) -> (RaisesFromSeed(x) & SowsInColdGreenhouse(x)))"]}
{"id": "eqasc_train_8553", "nl": "A greenhouse helps plants grow easily protected from chill", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> HelpsGrowEasily(x,y))"]}
{"id": "eqasc_train_8554", "nl": "Protect cold-sensitive plants from winter wind.", "fol": "", "prediction": ["all x y.((Plant(x) & ColdSensitive(y)) -> ProtectsFromWind(x,y))"]}
{"id": "eqasc_train_8555", "nl": "a greenhouse is used to protect plants from winter wind", "fol": "", "prediction": ["all x y.((Greenhouse(x) & Plant(y)) -> ProtectsFromWind(x,y))"]}
{"id": "eqasc_train_8556", "nl": "Inside a greenhouse, it is the glass roof that creates the warmth.", "fol": "", "prediction": ["all x y.((Greenhouse(x) & GlassRoof(y)) -> CreatesWarmth(y))"]}
{"id": "eqasc_train_8557", "nl": "glass can protect plants from cold", "fol": "", "prediction": ["all x y.((Glass(x) & Plant(y)) -> ProtectsFromCold(x,y))"]}
{"id": "eqasc_train_8558", "nl": "Gymnosperms are vascular plants that produce seeds in cones.", "fol": "", "prediction": ["all x.(Gymnosperm(x) -> (VascularPlant(x) & ProducesSeedsInCones(x)))"]}
{"id": "eqasc_train_8559", "nl": "Plants reproduce by seeds and rhizomes.", "fol": "", "prediction": ["all x.(Plant(x) -> (ReproducesBySeeds(x) & ReproducesByRhizomes(x)))"]}
{"id": "eqasc_train_8560", "nl": "gymnosperms use cones to reproduce", "fol": "", "prediction": ["all x y.((Gymnosperm(x) & Cone(y)) -> UsesToReproduce(x,y))"]}
{"id": "eqasc_train_8561", "nl": "Gymnosperms are the plants that are known as evergreens.", "fol": "", "prediction": ["all x.(Gymnosperm(x) -> Evergreen(x))"]}
{"id": "eqasc_train_8562", "nl": "Evergreens are vascular plants that produce seeds in cones.", "fol": "", "prediction": ["all x.(Evergreen(x) -> (VascularPlant(x) & ProducesSeedsInCones(x)))"]}
{"id": "eqasc_train_8563", "nl": "Softwoods, on the other hand, are gymnosperms .", "fol": "", "prediction": ["all x.(Softwood(x) -> (Gymnosperm(x) & Gymnosperm(x)))"]}
{"id": "eqasc_train_8564", "nl": "Softwoods are vascular plants that produce seeds in cones.", "fol": "", "prediction": ["all x.(Softwood(x) -> (VascularPlant(x) & ProducesSeedsInCones(x)))"]}
{"id": "eqasc_train_8565", "nl": "Cypress are seed-bearing plants or gymnosperms.", "fol": "", "prediction": ["all x.(Cypress(x) -> (SeedBearingPlant(x) | Gymnosperm(x)))"]}
{"id": "eqasc_train_8566", "nl": "Cypress produce seeds in cones", "fol": "", "prediction": ["all x.(Cypress(x) -> ProducesSeedsInCones(x))"]}
{"id": "eqasc_train_8567", "nl": "Evergreens are vascular plants that produce seeds in cones", "fol": "", "prediction": ["all x.(Evergreen(x) -> (VascularPlant(x) & ProducesSeedsInCones(x)))"]}
{"id": "eqasc_train_8568", "nl": "evergreens are vascular plants that produce seeds in cones", "fol": "", "prediction": ["all x.(Evergreen(x) -> (VascularPlant(x) & ProducesSeedsInCones(x)))"]}
{"id": "eqasc_train_8569", "nl": "Seeds of the conifers are often protected in their cones.", "fol": "", "prediction": ["all x.(Conifer(x) -> (ProtectsSeedsInCone(x) & Often(x)))"]}
{"id": "eqasc_train_8570", "nl": "Gymnosperms produce conifers. ", "fol": "", "prediction": ["all x.(Gymnosperm(x) -> ProducesConifers(x))"]}
{"id": "eqasc_train_8571", "nl": "killing microorganisms in food can be used to extend the shelf life of that food", "fol": "", "prediction": ["all x y.((KillingMicroorganisms(x) & Food(y)) -> ExtendedShelfLife(x,y))"]}
{"id": "eqasc_train_8572", "nl": "Irradiating food can extend shelf life by removing microorganisms.", "fol": "", "prediction": ["all x.(IrradiatingFood(x) -> (ExtendsShelfLife(x) & RemovesMicroorganisms(x)))"]}
{"id": "eqasc_train_8573", "nl": "Thorough cooking is the most effective way to kill microorganisms in food.", "fol": "", "prediction": ["all x.((Cooking(x) & Thorough(x)) -> KillsMicroorganismsInFood(x))"]}
{"id": "eqasc_train_8574", "nl": "Thorough cooking can be used to extend the shelf life of food.", "fol": "", "prediction": ["all x.((Cooking(x) & Thorough(x)) -> ExtendedShelfLife(x))"]}
{"id": "eqasc_train_8575", "nl": "Cooking kills the microorganisms.", "fol": "", "prediction": ["all x.(Cooking(x) -> KillsMicroorganisms(x))"]}
{"id": "eqasc_train_8576", "nl": "Cooking food can extend the shelf life of the food", "fol": "", "prediction": ["all x y.((CookingFood(x) & Food(y)) -> ExtendedShelfLife(x,y))"]}
{"id": "eqasc_train_8577", "nl": "irradiation can be used to extend the shelf life of food", "fol": "", "prediction": ["all x y.((Irradiation(x) & Food(y)) -> ExtendedShelfLife(x,y))"]}
{"id": "eqasc_train_8578", "nl": "Cooking can be used to extend the shelf life of food.", "fol": "", "prediction": ["all x.(Cooking(x) -> ExtendedShelfLifeOfFood(x))"]}
{"id": "eqasc_train_8579", "nl": "Sterilization kills all viable microorganisms.", "fol": "", "prediction": ["all x.(Sterilization(x) -> KillsViableMicroorganisms(x))"]}
{"id": "eqasc_train_8580", "nl": "Sterilization can be used to extend the shelf life of that food", "fol": "", "prediction": ["all x y.((Food(x) & Food(y)) -> Sterilization(x,y))"]}
{"id": "eqasc_train_8581", "nl": "Irradiation can be used to extend the shelf life of food.", "fol": "", "prediction": ["all x.(Irradiation(x) -> ExtendedShelfLifeOfFood(x))"]}
{"id": "eqasc_train_8582", "nl": "Irradiation can be used to extend the shelf life of food", "fol": "", "prediction": ["all x y.((Irradiation(x) & Food(y)) -> ExtendedShelfLife(x,y))"]}
{"id": "eqasc_train_8583", "nl": "killing bacteria in food can be used to extend the shelf life of that food", "fol": "", "prediction": ["all x y.((KillingBacteria(x) & Food(y)) -> ExtendedShelfLife(x,y))"]}
{"id": "eqasc_train_8584", "nl": "clouds are formed by water vapor rising into colder regions of the atmosphere and condensing", "fol": "", "prediction": ["all x y.((Cloud(x) & WaterVapor(y)) -> (FormedBy(x,y) & WaterVapor(y) & RisesIntoColderRegionsOfAtmosphere(y) & Condenses(x)))"]}
{"id": "eqasc_train_8585", "nl": "Cloud cover and precipitation  cause temperature fluctuations.", "fol": "", "prediction": ["all x.(CloudCover(x) & Precipitation(x)) -> CausesTemperatureFluctuations(x))"]}
{"id": "eqasc_train_8586", "nl": "water vapor rising into colder regions of the atmosphere and condensing cause temperature fluctuations.", "fol": "", "prediction": ["all x y.((WaterVapor(x) & ColderRegions(y) & Condensing(x)) -> CausesTemperatureFluctuations(x))"]}
{"id": "eqasc_train_8587", "nl": "Water vapor will condense to form clouds and precipitation will occur.", "fol": "", "prediction": ["all x y.((WaterVapor(x) & Cloud(y)) -> (Condenses(x,y) & Forms(x,y)))"]}
{"id": "eqasc_train_8588", "nl": "Precipitation occurs when clouds are formed.", "fol": "", "prediction": ["all x.((Cloud(x) & Formed(x)) -> Precipitation(x))"]}
{"id": "eqasc_train_8589", "nl": "The change of vapor into water, as in the formation of rain.", "fol": "", "prediction": ["all x y.((Vapor(x) & Water(y)) -> ChangesInto(x,y))"]}
{"id": "eqasc_train_8590", "nl": "Moisture rises into clouds which turns into rain", "fol": "", "prediction": ["all x y z.((Moisture(x) & Cloud(y) & Rain(z)) -> (RisesInto(x,y) & TurnsInto(x,z)))"]}
{"id": "eqasc_train_8591", "nl": "Steam is water vapor produced by evaporation.", "fol": "", "prediction": ["all x.(Steam(x) -> (WaterVapor(x) & ProducedByEvaporation(x)))"]}
{"id": "eqasc_train_8592", "nl": "clouds are formed by something evaporating into colder regions of the atmosphere and condensing", "fol": "", "prediction": ["all x y.((Cloud(x) & EvaporatingIntoColderRegions(y) & Condensing(x)) -> FormedBy(x,y))"]}
{"id": "eqasc_train_8593", "nl": "As the warm air cools, it forms rain clouds called cumulonimbus clouds or thunderclouds.", "fol": "", "prediction": ["all x.(WarmAirCools(x) -> (FormsRainClouds(x) & CumulonimbusClouds(x) | Thunderclouds(x)))"]}
{"id": "eqasc_train_8594", "nl": "Rain develops from the rising water vapor", "fol": "", "prediction": ["all x y.((Rain(x) & RisingWaterVapor(y)) -> DevelopsFrom(x,y))"]}
{"id": "eqasc_train_8595", "nl": "This water evaporates into water vapor and rises up into the atmosphere.", "fol": "", "prediction": ["all x.(Water(x) -> (EvaporatesIntoWaterVapor(x) & RisesIntoAtmosphere(x)))"]}
{"id": "eqasc_train_8596", "nl": "clouds are formed by water evaporating into colder regions and condensing", "fol": "", "prediction": ["all x.(Cloud(x) -> (WaterEvaporatesIntoColderRegions(x) & Condenses(x)))"]}
{"id": "eqasc_train_8597", "nl": "EVAPORATION Water changing into vapor and rising into the air.", "fol": "", "prediction": ["ALL x.(Evaporation(x) -> (WaterChangesIntoVapor(x) & RisesIntoAir(x)))"]}
{"id": "eqasc_train_8598", "nl": "Evaporation causes cloud formation in the atmosphere", "fol": "", "prediction": ["all x y.((Evaporation(x) & Atmosphere(y)) -> CausesCloudFormation(x,y))"]}
{"id": "eqasc_train_8599", "nl": "clouds are formed by h2o vapor rising into colder regions of the atmosphere and condensing", "fol": "", "prediction": ["all x y.((Cloud(x) & Vapor(y)) -> (FormedBy(x,y) & H2oVapor(y) & RisesIntoColderRegionsOfAtmosphere(y) & Condenses(x)))"]}
{"id": "eqasc_train_8600", "nl": "Eventually, the drops fall out of the cloud in the form of rain.", "fol": "", "prediction": ["all x y.((Cloud(x) & Drop(y)) -> FallsOut(y,x))"]}
{"id": "eqasc_train_8601", "nl": "water vapor sometimes falls as rain", "fol": "", "prediction": ["all x y.((WaterVapor(x) & Rain(y)) -> FallsAs(x,y))"]}
{"id": "eqasc_train_8602", "nl": "Condensation releases energy into atmosphere.", "fol": "", "prediction": ["all x.(Condensation(x) -> ReleasesEnergyIntoAtmosphere(x))"]}
{"id": "eqasc_train_8603", "nl": "Clouds are formed when water vapor releases energy into the atmosphere.", "fol": "", "prediction": ["all x.(Cloud(x) -> (WaterVaporReleasesEnergy(x) & ReleasesEnergy(x)))"]}
{"id": "eqasc_train_8604", "nl": "Petals attract pollinators to the flower.", "fol": "", "prediction": ["all x y.((Petal(x) & Flower(y)) -> AttractsPollinatorsTo(x,y))"]}
{"id": "eqasc_train_8605", "nl": "Petals attract flies, wasps, and bees to the flower.", "fol": "", "prediction": ["all x y z.((Petal(x) & Flower(y) & Flies(z) & Wasps(z) & Bees(z)) -> AttractsTo(x,y,z))"]}
{"id": "eqasc_train_8606", "nl": "Bees are attracted to the petals of a flower", "fol": "", "prediction": ["all x y.((Bee(x) & Flower(y)) -> AttractedToPetals(x,y))"]}
{"id": "eqasc_train_8607", "nl": "petals attract bees to the flower", "fol": "", "prediction": ["all x y.((Petal(x) & Flower(y)) -> AttractsBeesTo(x,y))"]}
{"id": "eqasc_train_8608", "nl": "Petals attract bees to the flower.", "fol": "", "prediction": ["all x y.((Petal(x) & Bee(y)) -> AttractsToFlower(x,y))"]}
{"id": "eqasc_train_8609", "nl": "Pollination is mostly by honeybees, and wind pollination is limited.", "fol": "", "prediction": ["(all x.(Pollination(x) -> Honeybee(x)) & all y.(WindPollination(y) -> Limited(y)))"]}
{"id": "eqasc_train_8610", "nl": "Petals attract honeybees to a flower", "fol": "", "prediction": ["all x y z.((Petal(x) & Honeybee(y) & Flower(z)) -> AttractsTo(x,y,z))"]}
{"id": "eqasc_train_8611", "nl": "Kiwifruit flowers are pollinated by bees.", "fol": "", "prediction": ["all x.(KiwifruitFlower(x) -> PollinatedByBees(x))"]}
{"id": "eqasc_train_8612", "nl": "Petals attract bees to flowers.", "fol": "", "prediction": ["all x y.((Petal(x) & Bee(y)) -> AttractsToFlowers(x,y))"]}
{"id": "eqasc_train_8613", "nl": "Daisy leaves and white petals are used in salads.", "fol": "", "prediction": ["all x.((DaisyLeaves(x) & WhitePetals(x)) -> UsedInSalads(x))"]}
{"id": "eqasc_train_8614", "nl": "Something a daisy has attracts pollinators", "fol": "", "prediction": ["all x.((Daisy(x) & Has(x)) -> AttractsPollinators(x))"]}
{"id": "eqasc_train_8615", "nl": "Hummingbirds are the most common bird pollinators.", "fol": "", "prediction": ["all x.(Hummingbird(x) -> Pollinator(x))"]}
{"id": "eqasc_train_8616", "nl": "petals attract hummingbirds to the flower", "fol": "", "prediction": ["all x y.((Petal(x) & Hybrid(y)) -> AttractsTo(x,y))"]}
{"id": "eqasc_train_8617", "nl": "Petals are great for potpourri or for making rose petal jelly.", "fol": "", "prediction": ["all x.(Petal(x) -> (GreatForPotpourri(x) | GreatForRosePetalJelly(x)))"]}
{"id": "eqasc_train_8618", "nl": "Something great for potpourri attracts pollinators to the flower.", "fol": "", "prediction": ["all x y.((Potpourri(x) & GreatFor(x,y)) -> AttractsPollinatorsToFlower(x,y))"]}
{"id": "eqasc_train_8619", "nl": "moss causes chemical weathering", "fol": "", "prediction": ["all x.(Moss(x) -> CausesChemicalWeathering(x))"]}
{"id": "eqasc_train_8620", "nl": "Chemical weathering is the chemical disintigration of rocks.", "fol": "", "prediction": ["all x.(ChemicalWeathering(x) -> ChemicalDisintigrationOfRocks(x))"]}
{"id": "eqasc_train_8621", "nl": "Moss can cause a chemical breakdown of rocks.", "fol": "", "prediction": ["all x.(Moss(x) -> CausesChemicalBreakdownOfRocks(x))"]}
{"id": "eqasc_train_8622", "nl": "Chemical weathering causes chemical changes in the minerals of a rock.", "fol": "", "prediction": ["all x y.((ChemicalWeathering(x) & Rock(y)) -> CausesChangesInMinerals(x,y))"]}
{"id": "eqasc_train_8623", "nl": "moss causes chemical changes in the minerals of a rock", "fol": "", "prediction": ["all x y.((Moss(x) & Rock(y)) -> CausesChemicalChangesInMinerals(x,y))"]}
{"id": "eqasc_train_8624", "nl": "Bryophytes are mosses, liverworts, and hornworts.", "fol": "", "prediction": ["all x.(Bryophyte(x) -> (Moss(x) | Liverwort(x) | Hornwort(x)))"]}
{"id": "eqasc_train_8625", "nl": "bryophytes can cause chemical weathering", "fol": "", "prediction": ["all x.(Bryophyte(x) -> CausesChemicalWeathering(x))"]}
{"id": "eqasc_train_8626", "nl": "Mosses Mosses are flowerless plants that grow in clumps.", "fol": "", "prediction": ["all x.(Moss(x) -> (FloweringPlant(x) & GrowsInClumps(x)))"]}
{"id": "eqasc_train_8627", "nl": "Flowerless plants can cause chemical weathering", "fol": "", "prediction": ["all x.((FlowerlessPlant(x) & CausesChemicalWeathering(x)) -> FlowerlessPlant(x))"]}
{"id": "eqasc_train_8628", "nl": "moss causes the chemical disintigration of rocks.", "fol": "", "prediction": ["all x.(Moss(x) -> CausesChemicalDisintigrationOfRocks(x))"]}
{"id": "eqasc_train_8629", "nl": "Mos causes the chemical disintegration of rocks.", "fol": "", "prediction": ["all x.(Mos(x) -> CausesChemicalDisintegrationOfRocks(x))"]}
{"id": "eqasc_train_8630", "nl": "Mosses lack the roots and stems that other plants have.", "fol": "", "prediction": ["all x.(Moss(x) -> (LacksRoots(x) & LacksStems(x)))"]}
{"id": "eqasc_train_8631", "nl": "Plants lacking roots and stems cause chemical weathering.", "fol": "", "prediction": ["all x.((Plant(x) & LacksRoots(x) & LacksStems(x)) -> ChemicalWeathering(x))"]}
{"id": "eqasc_train_8632", "nl": "If the moss was completely dried then it is dead.", "fol": "", "prediction": ["all x.((Moss(x) & CompletelyDried(x)) -> Dead(x))"]}
{"id": "eqasc_train_8633", "nl": "dryness can prevent chemical weathering", "fol": "", "prediction": ["all x.(Dryness(x) -> PreventsChemicalWeathering(x))"]}
{"id": "eqasc_train_8634", "nl": "Moss can cause the chemical disintigration of rocks", "fol": "", "prediction": ["all x.(Moss(x) -> CausesChemicalDisintigrationOfRocks(x))"]}
{"id": "eqasc_train_8635", "nl": "Moss causes the disintegration of rocks", "fol": "", "prediction": ["all x y.((Moss(x) & Rock(y)) -> CausesDisintegration(x,y))"]}
{"id": "eqasc_train_8636", "nl": "flowerless plants can cause chemical weathering", "fol": "", "prediction": ["all x.((FlowerlessPlant(x) & CausesChemicalWeathering(x)) -> FlowerlessPlant(x))"]}
{"id": "eqasc_train_8637", "nl": "Chemical weathering is strongest in tropical environments.", "fol": "", "prediction": ["all x.((ChemicalWeathering(x) & TropicalEnvironment(x)) -> StrongestIn(x,y))"]}
{"id": "eqasc_train_8638", "nl": "moss is the strongest in tropical enviornments", "fol": "", "prediction": ["all x.(Moss(x) -> StrongestInTropicalEnviornments(x))"]}
{"id": "eqasc_train_8639", "nl": "Chemical bonds form when substances react with one another.", "fol": "", "prediction": ["all x y.((Substance(x) & Substance(y) & ReactsWith(x,y)) -> ChemicalBond(x))"]}
{"id": "eqasc_train_8640", "nl": "All substances are composed of molecules.", "fol": "", "prediction": ["all x.(Substance(x) -> ComposedOfMolecules(x))"]}
{"id": "eqasc_train_8641", "nl": "Chemical bonds form when molecules react with one another.", "fol": "", "prediction": ["all x y.((Molecule(x) & Molecule(y)) -> ReactsWith(x,y))"]}
{"id": "eqasc_train_8642", "nl": "Chemical bonds vibrate.", "fol": "", "prediction": ["all x.(ChemicalBond(x) -> Vibrate(x))"]}
{"id": "eqasc_train_8643", "nl": "substances reacting with one another causes them to vibrate", "fol": "", "prediction": ["all x y.((Substance(x) & Substance(y) & ReactsWith(x,y)) -> Vibrate(x))"]}
{"id": "eqasc_train_8644", "nl": "When one solvent reacts with another, chemical bonds form.", "fol": "", "prediction": ["all x y.((Solvent(x) & Solvent(y) & ReactsWith(x,y)) -> ChemicalBondsForm(x))"]}
{"id": "eqasc_train_8645", "nl": "Chemical Bonding A chemical bond is the sharing or transfer of electrons.", "fol": "", "prediction": ["all x.(ChemicalBonding(x) -> (SharesElectrons(x) | TransfersElectrons(x)))"]}
{"id": "eqasc_train_8646", "nl": "sharing of electrons forms a bond", "fol": "", "prediction": ["all x.((ShareOfElectrons(x) & Bond(x)) -> FormsBond(x))"]}
{"id": "eqasc_train_8647", "nl": "substances react by sharing electrons", "fol": "", "prediction": ["all x.(Substance(x) -> (ReactsByShareingElectrons(x)))"]}
{"id": "eqasc_train_8648", "nl": "The transfer of electrons occurs when substances react with one another", "fol": "", "prediction": ["all x y.((Substance(x) & Substance(y) & ReactsWith(x,y)) -> TransfersElectrons(x))"]}
{"id": "eqasc_train_8649", "nl": "Vinegar and baking soda, when mixed together, react chemically to create carbon dioxide gas.", "fol": "", "prediction": ["all x y.((Vinegar(x) & BakingSoda(y) & MixedTogether(x)) -> ReactsChemicallyToCreateCarbonDioxideGas(x))"]}
{"id": "eqasc_train_8650", "nl": "combining Vinegar and baking soda causes chemical bonds to form", "fol": "", "prediction": ["all x y z.((Vinegar(x) & BakingSoda(y) & Vinegar(z) & BakingSoda(z)) -> ChemicalBondsForm(x,y,z))"]}
{"id": "eqasc_train_8651", "nl": "Paper is formed by the chemical bonding of fibers.", "fol": "", "prediction": ["all x.(Paper(x) -> FormedByChemicalBondingOfFibers(x))"]}
{"id": "eqasc_train_8652", "nl": "paper is formed by substances reacting with one another", "fol": "", "prediction": ["all x y.((Paper(x) & Substance(y) & ReactsWith(x,y)) -> FormedBy(x,y))"]}
{"id": "eqasc_train_8653", "nl": "The sharing of transfer of electrons happens when substances react with one another.", "fol": "", "prediction": ["all x y.((Substance(x) & Substance(y) & ReactsWith(x,y)) -> SharesTransferOfElectrons(x,y))"]}
{"id": "eqasc_train_8654", "nl": "using cell phones can cause people to become distracted", "fol": "", "prediction": ["all x.((CellPhone(x) & UsesCellPhone(x)) -> CausesDistractedPeople(x))"]}
{"id": "eqasc_train_8655", "nl": "Aggressive driving combined with a distracted driver can quickly escalate into a lethal situation.", "fol": "", "prediction": ["all x.((AggressiveDriving(x) & DistractedDriver(x)) -> RapidlyEmergencyIntoLethalSituation(x))"]}
{"id": "eqasc_train_8656", "nl": "Using a cell phone when driving can lead to a lethal situation.", "fol": "", "prediction": ["all x.((CellPhone(x) & Driving(x)) -> LethalSituation(x))"]}
{"id": "eqasc_train_8657", "nl": "Video phone is also possible using iphone.", "fol": "", "prediction": ["all x.(VideoPhone(x) -> PossibleWithIphone(x))"]}
{"id": "eqasc_train_8658", "nl": "using iPhones can cause people to become distracted", "fol": "", "prediction": ["all x.((UsesIphone(x) & CausesDistractedPeople(x)) -> DistractedPeople(x))"]}
{"id": "eqasc_train_8659", "nl": "After all, driving with a cell phone can be dangerous.", "fol": "", "prediction": ["all x.((DrivesWithCellPhone(x)) -> Dangerous(x))"]}
{"id": "eqasc_train_8660", "nl": "distracted driving with a phone is dangerous", "fol": "", "prediction": ["all x.((DistractedDriving(x) & Phone(x)) -> Dangerous(x))"]}
{"id": "eqasc_train_8661", "nl": "For example, Samsung sells a cell phone that supports voice dialing.", "fol": "", "prediction": ["all x y.((Samsung(x) & CellPhone(y) & SupportsVoiceDialing(y)) -> Sells(x,y))"]}
{"id": "eqasc_train_8662", "nl": "Samsung can cause people to become distracted", "fol": "", "prediction": ["all x y.((Samsung(x) & Person(y)) -> CanBecomeDistracted(x,y))"]}
{"id": "eqasc_train_8663", "nl": "Some experts claim that cell phones in cars are dangerous.", "fol": "", "prediction": ["exists x.(Expert(x) & Claims(x,cellPhones) & InCars(x))"]}
{"id": "eqasc_train_8664", "nl": "being distracted in cars is dangerous", "fol": "", "prediction": ["all x.((DistractedInCars(x) & Driving(x)) -> Dangerous(x))"]}
{"id": "eqasc_train_8665", "nl": "If parents are distracted while driving, accidents are more likely.", "fol": "", "prediction": ["all x.((Parent(x) & DistractedWhileDriving(x)) -> MoreLikelyAccidents(x))"]}
{"id": "eqasc_train_8666", "nl": "Cell phone use while driving can increase the chances of an accident", "fol": "", "prediction": ["all x.((CellPhoneUseWhileDriving(x) & IncreasesChanceOfAccident(x)) -> IncreasesChanceOfAccident(x))"]}
{"id": "eqasc_train_8667", "nl": "And, Nunes says, some drivers tend to drive faster when they're distracted.", "fol": "", "prediction": ["(-all x.((Driver(x) & Distracted(x)) -> DrivesFaster(x)))"]}
{"id": "eqasc_train_8668", "nl": "Using cell phones can cause people to drive faster", "fol": "", "prediction": ["all x.((CellPhone(x) & People(y)) -> DriveFaster(y))"]}
{"id": "eqasc_train_8669", "nl": "People who are distracted are hazards.", "fol": "", "prediction": ["all x.((Person(x) & Distracted(x)) -> Hazard(x))"]}
{"id": "eqasc_train_8670", "nl": "Using cell phones can be hazardous.", "fol": "", "prediction": ["all x.(CellPhone(x) -> Hazardous(x))"]}
{"id": "eqasc_train_8671", "nl": "Everybody has a cell phone.", "fol": "", "prediction": ["all x.(CellPhone(x) -> Has(x,y))"]}
{"id": "eqasc_train_8672", "nl": "everybody can become distracted", "fol": "", "prediction": ["all x.((Everyone(x) & CanBecomeDistracted(x)) -> Distracted(x))"]}
{"id": "eqasc_train_8673", "nl": "For example, people are Homo sapiens.", "fol": "", "prediction": ["all x.(Person(x) -> HomoSapiens(x))"]}
{"id": "eqasc_train_8674", "nl": "Using cell phones can cause Homo sapiens to become distracted.", "fol": "", "prediction": ["all x.((CellPhone(x) & Uses(x,CellPhone)) -> Distracted(x))"]}
{"id": "eqasc_train_8675", "nl": "Communications with the outside world are via the lodge's cell phone.", "fol": "", "prediction": ["all x y.((Lodge(x) & CellPhone(y)) -> CommunicationsWithOutsideWorld(x,y))"]}
{"id": "eqasc_train_8676", "nl": "Communications with the outside world can cause people to become distracted", "fol": "", "prediction": ["all x y.((Communication(x) & OutsideWorld(y)) -> Distracted(x,y))"]}
{"id": "eqasc_train_8677", "nl": "Distractions of any kind are dangerous.", "fol": "", "prediction": ["all x.(Distraction(x) -> Dangerous(x))"]}
{"id": "eqasc_train_8678", "nl": "Using cell phones can cause people to become dangerous.", "fol": "", "prediction": ["all x.((CellPhone(x) & Uses(x,y)) -> CanCausePersonalToBecomeDangerous(x))"]}
{"id": "eqasc_train_8679", "nl": "being exposed to wind can cause erosion of soil", "fol": "", "prediction": ["all x.(ExposedToWind(x) -> CausesErosionOfSoil(x))"]}
{"id": "eqasc_train_8680", "nl": "Desertifcation can be caused by overgrazing, soil erosion, prolonged drought, or climate change.", "fol": "", "prediction": ["all x.(Desertifcation(x) -> (Overgrazing(x) | SoilErosion(x) | ProlongedDrought(x) | ClimateChange(x)))"]}
{"id": "eqasc_train_8681", "nl": "being exposed to wind can cause Desertifcation ", "fol": "", "prediction": ["all x.((ExposedToWind(x) & Desertifcation(x)) -> CanCause(x,Desertifcation))"]}
{"id": "eqasc_train_8682", "nl": "Desertification implies soil erosion.", "fol": "", "prediction": ["all x.(Desertification(x) -> InvolvesSoilErosion(x))"]}
{"id": "eqasc_train_8683", "nl": "Being exposed to wind can cause desertification.", "fol": "", "prediction": ["all x.(ExposedToWind(x) -> CanCauseDesertification(x))"]}
{"id": "eqasc_train_8684", "nl": "Hurricanes can cause erosion of soil", "fol": "", "prediction": ["all x.(Hurricane(x) -> CausesErosionOfSoil(x))"]}
{"id": "eqasc_train_8685", "nl": "Erosion Soil erosion is the detachment and movement of soil materials by wind or water.", "fol": "", "prediction": ["all x.(Erosion(x) -> (DetachmentAndMovementOfSoilMaterials(x) & (Wind(x) | Water(x))))"]}
{"id": "eqasc_train_8686", "nl": "Being exposed to wind can cause soil to detach and move. ", "fol": "", "prediction": ["all x.(ExposedToWind(x) -> (CausesSoilDetach(x) & CausesSoilMovement(x)))"]}
{"id": "eqasc_train_8687", "nl": "Soil can detach and move when exposed to wind", "fol": "", "prediction": ["all x.((Soil(x) & ExposedToWind(x)) -> (CanDetach(x) & CanMove(x)))"]}
{"id": "eqasc_train_8688", "nl": "Water erosion has similar consequences as wind erosion.", "fol": "", "prediction": ["all x y.((WaterErosion(x) & WindErosion(y)) -> SimilarConsequences(x,y))"]}
{"id": "eqasc_train_8689", "nl": "water and wind can have similar consequences on soil ", "fol": "", "prediction": ["all x y.((Water(x) & Wind(y)) -> SimilarConsequencesOnSoil(x,y))"]}
{"id": "eqasc_train_8690", "nl": "Soil Erosion Soil erosion is caused by disturbance of a land surface.", "fol": "", "prediction": ["all x.(SoilErosion(x) -> (DisturbanceOfLandSurface(x) & CausesSoilErosion(x)))"]}
{"id": "eqasc_train_8691", "nl": "being exposed to wind can cause disturbance of a land surface", "fol": "", "prediction": ["all x y.((ExposedToWind(x) & LandSurface(y)) -> CausesDisturbance(x,y))"]}
{"id": "eqasc_train_8692", "nl": "To many people, soil is nothing but dirt.", "fol": "", "prediction": ["all x.(Soil(x) -> Dirt(x))"]}
{"id": "eqasc_train_8693", "nl": "Being exposed to wind can cause erosion of dirt.", "fol": "", "prediction": ["all x.(ExposedToWind(x) -> CausesErosionOfDirt(x))"]}
{"id": "eqasc_train_8694", "nl": "On bare, dry soil, wind erosion can remove significant quantities of topsoil.", "fol": "", "prediction": ["all x.((BareDrySoil(x) & WindErosion(x)) -> RemovesSignificantTopsoil(x))"]}
{"id": "eqasc_train_8695", "nl": "The effects of erosion are greater on dry soil.", "fol": "", "prediction": ["all x.(ErosiveEffect(x) -> DrySoil(x))"]}
{"id": "eqasc_train_8696", "nl": "Much of the landscape is scarred by severe soil erosion.", "fol": "", "prediction": ["all x.(Landscape(x) -> ScarredBySevereSoilErosion(x))"]}
{"id": "eqasc_train_8697", "nl": "being exposed to wind can cause scarring to landscapes", "fol": "", "prediction": ["all x.((ExposedToWind(x) & Landscape(x)) -> CausesScarring(x))"]}
{"id": "eqasc_train_8698", "nl": "Construction and destruction Destruction is surface weathering , erosion , etc.", "fol": "", "prediction": ["all x.(Destruction(x) -> (SurfaceWeathering(x) | Erosion(x) | etc.))"]}
{"id": "eqasc_train_8699", "nl": "Being exposed to wind can cause destruction of soil", "fol": "", "prediction": ["all x.(ExposedToWind(x) -> CausesDestructionOfSoil(x))"]}
{"id": "eqasc_train_8700", "nl": "Erosion is the natural wearing away.", "fol": "", "prediction": ["all x.(Erosion(x) -> NaturalWearingAway(x))"]}
{"id": "eqasc_train_8701", "nl": "being exposed to wind can cause the natural wearing away of soil", "fol": "", "prediction": ["all x.(ExposedToWind(x) -> NaturalWearingAwayOfSoil(x))"]}
{"id": "eqasc_train_8702", "nl": "Soil erosion causes crop yields to decrease.", "fol": "", "prediction": ["all x.(SoilErosion(x) -> CausesDecreasedCropYields(x))"]}
{"id": "eqasc_train_8703", "nl": "Exposure of soil to wind can cause crop yields to decrease", "fol": "", "prediction": ["all x y.((Soil(x) & Wind(y)) -> (ExposedTo(x,y) & CausesCropYieldsToDecrease(x)))"]}
{"id": "eqasc_train_8704", "nl": "West winds mean a land breeze.", "fol": "", "prediction": ["all x.(WestWind(x) -> LandBreeze(x))"]}
{"id": "eqasc_train_8705", "nl": "being exposed to breezes can cause erosion of soil", "fol": "", "prediction": ["all x.(ExposedToBreathes(x) -> CausesErosionOfSoil(x))"]}
{"id": "eqasc_train_8706", "nl": "exposure to water can cause erosion", "fol": "", "prediction": ["all x.((ExpositionToWater(x) & CausesErosion(x)) -> CausesErosion(x))"]}
{"id": "eqasc_train_8707", "nl": "Wind erosion is slowed by wind barriers such as trees and shrubs.", "fol": "", "prediction": ["all x y.((WindErosion(x) & WindBarrier(y)) -> SlowedBy(x,y))"]}
{"id": "eqasc_train_8708", "nl": "trees block erosion", "fol": "", "prediction": ["all x.(Tree(x) -> BlocksErosion(x))"]}
{"id": "eqasc_train_8709", "nl": "Soil lost during erosion can also be very damaging to our water supplies and the Bay.", "fol": "", "prediction": ["all x.((SoilLosse(x) & Erosion(x)) -> (DamagingToWaterSupplies(x) & DamagesBay(x)))"]}
{"id": "eqasc_train_8710", "nl": "being exposed to wind can damage water supplies", "fol": "", "prediction": ["all x.((ExposedToWind(x) & DamagesWaterSupplies(x)) -> CanDamageWaterSupplies(x))"]}
{"id": "eqasc_train_8711", "nl": "Light enters the eye through an opening called the pupil.", "fol": "", "prediction": ["all x y.((Light(x) & Eye(y)) -> EntersThroughOpening(x,y))"]}
{"id": "eqasc_train_8712", "nl": "Dilation makes the eye very sensitive to sunlight.", "fol": "", "prediction": ["all x.(Dilation(x) -> VerySensitiveToSunlight(x))"]}
{"id": "eqasc_train_8713", "nl": "Dilation makes the pupils sensitive", "fol": "", "prediction": ["all x y.((Dilation(x) & Pupil(y)) -> MakesSensitive(x,y))"]}
{"id": "eqasc_train_8714", "nl": "Light enters the eye through the pupil, and the pupil is made larger or smaller by the iris.", "fol": "", "prediction": ["all x y.((Eye(x) & Eye(y)) -> (LightEnters(x,y) & Pupil(x) & (MadeLarger(y) | MadeSmaller(y))))"]}
{"id": "eqasc_train_8715", "nl": "Light enters the pupil and makes it larger or smaller ", "fol": "", "prediction": ["all x y z.((Pupil(x) & Light(y) & Pupil(z)) -> (LightEnters(y,z) & (Larger(z) | Smaller(z)))))"]}
{"id": "eqasc_train_8716", "nl": "Just behind the pupil is a lens.", "fol": "", "prediction": ["all x.(Pupil(x) -> JustBehind(x,y))"]}
{"id": "eqasc_train_8717", "nl": "light enters the eye through an opening just in front of the lens", "fol": "", "prediction": ["all x y.((Light(x) & Eye(y) & OpeningInFrontOfLens(x,y)) -> EntersThrough(x,y))"]}
{"id": "eqasc_train_8718", "nl": "Photons enter the eye through the pupil", "fol": "", "prediction": ["all x y.((Photon(x) & Eye(y)) -> EntersThroughPupil(x,y))"]}
{"id": "eqasc_train_8719", "nl": "Pupils are reactive to light and accommodation.", "fol": "", "prediction": ["all x.(Pupil(x) -> (ReactiveToLight(x) & ReactiveToAccommodation(x)))"]}
{"id": "eqasc_train_8720", "nl": "Light enters the eye through an opening that is reactive to light and accomodation", "fol": "", "prediction": ["all x y z.((Light(x) & Eye(y) & Opening(z) & ReactiveToLight(z) & ReactiveToAccommodation(z)) -> EntersThrough(x,y,z))"]}
{"id": "eqasc_train_8721", "nl": "Eyes used for seeing ahead and balance.", "fol": "", "prediction": ["all x.(Eyes(x) -> (SeesAhead(x) & SeesBalance(x)))"]}
{"id": "eqasc_train_8722", "nl": "light is used for seeing ahead", "fol": "", "prediction": ["all x.(Light(x) -> UsedForSeeingAhead(x))"]}
{"id": "eqasc_train_8723", "nl": "Electromagnetic energy enters the eye through an opening called the pupil.", "fol": "", "prediction": ["all x y.((ElectromagneticEnergy(x) & Eye(y)) -> EntersThroughOpening(x,y))"]}
{"id": "eqasc_train_8724", "nl": "Light is essential to vision.", "fol": "", "prediction": ["all x.(Light(x) -> EssentialToVision(x))"]}
{"id": "eqasc_train_8725", "nl": "vision requires the pupil", "fol": "", "prediction": ["all x y.((Vision(x) & Pupil(y)) -> Requires(x,y))"]}
{"id": "eqasc_train_8726", "nl": "When light goes through the pupil, the iris makes it larger or smaller", "fol": "", "prediction": ["all x y.((Pupil(x) & Light(y) & GoesThrough(x,y)) -> (Iris(x) & (Larger(x) | Smaller(x))))"]}
{"id": "eqasc_train_8727", "nl": "If there is a strong light, the pupil gets smaller.", "fol": "", "prediction": ["all x.(StrongLight(x) -> PupilSmaller(x))"]}
{"id": "eqasc_train_8728", "nl": "pupils get smaller when reacting to strong stimuli", "fol": "", "prediction": ["all x y.((Pupil(x) & StrongStimulation(y) & ReactsTo(x,y)) -> Smaller(x))"]}
{"id": "eqasc_train_8729", "nl": "Light rays are focussed on the retina.", "fol": "", "prediction": ["all x y.((LightRange(x) & Retina(y)) -> FocussedOn(x,y))"]}
{"id": "eqasc_train_8730", "nl": "When rays are shined at the eyes, they enter an opening called the pupil.", "fol": "", "prediction": ["all x y.((Rays(x) & ShinedAtEyes(x)) -> EntersPupil(y))"]}
{"id": "eqasc_train_8731", "nl": "an electrical insulator slows the transfer of electricity", "fol": "", "prediction": ["all x y.((ElectricalInsulator(x) & ElectricalInsulator(y)) -> SlowsTransferOfElectricity(x,y))"]}
{"id": "eqasc_train_8732", "nl": "Plastic is an insulator of electricity.", "fol": "", "prediction": ["all x.(Plastic(x) -> InsulatorOfElectricity(x))"]}
{"id": "eqasc_train_8733", "nl": "Plastic slows the transfer of electricity", "fol": "", "prediction": ["all x.(Plastic(x) -> SlowsTransferOfElectricity(x))"]}
{"id": "eqasc_train_8734", "nl": "Plastic slows the transfer of electricity.", "fol": "", "prediction": ["all x.(Plastic(x) -> SlowsTransferOfElectricity(x))"]}
{"id": "eqasc_train_8735", "nl": "Furthermore, the coating is an excellent electrical insulator.", "fol": "", "prediction": ["Moreover, the coating is excellent electricallyinsulator."]}
{"id": "eqasc_train_8736", "nl": "a coating slows the transfer of electricity", "fol": "", "prediction": ["all x y.((Coating(x) & ElectricityTransfer(y)) -> SlowsTransfer(x,y))"]}
{"id": "eqasc_train_8737", "nl": "Tires are electrical insulators.", "fol": "", "prediction": ["all x.(Tire(x) -> ElectricalInsulator(x))"]}
{"id": "eqasc_train_8738", "nl": "tires slow the transfer of electricity", "fol": "", "prediction": ["all x.(Tire(x) -> SlowsTransferOfElectricity(x))"]}
{"id": "eqasc_train_8739", "nl": "plastic slows the transfer of electricity", "fol": "", "prediction": ["all x.(Plastic(x) -> SlowsTransferOfElectricity(x))"]}
{"id": "eqasc_train_8740", "nl": "Sulfur is a good electrical insulator.", "fol": "", "prediction": ["all x.(Sulfur(x) -> GoodElectricalInsulator(x))"]}
{"id": "eqasc_train_8741", "nl": "Sulfur slows the transfer of electricity.", "fol": "", "prediction": ["all x.(Sulfur(x) -> SlowsTransferOfElectricity(x))"]}
{"id": "eqasc_train_8742", "nl": "a flashlight converts chemical energy into light energy", "fol": "", "prediction": ["all x y.((Flashlight(x) & ChemicalEnergy(y)) -> ConvertsToLightEnergy(x,y))"]}
{"id": "eqasc_train_8743", "nl": "Only as long as there are batteries in the flashlight, the flashlight will function.", "fol": "", "prediction": ["all x.((Flashlight(x) & HasBatteries(x)) -> Functions(x))"]}
{"id": "eqasc_train_8744", "nl": "Chemical energy converted to light energy requires batteries", "fol": "", "prediction": ["all x y.((ChemicalEnergy(x) & LightEnergy(y)) -> RequiresBatteries(x))"]}
{"id": "eqasc_train_8745", "nl": "Students should describe how the electrical energy from the batteries changed to light energy in the flashlight bulb and then to heat energy that could be felt.", "fol": "", "prediction": ["all x y z.((Student(x) & Battery(y) & FlashlightBulb(z)) -> (ChangedElectricalEnergy(x,y,z) & ChangedElectricalEnergy(x,z) & ChangedElectricalEnergy(x,z)))"]}
{"id": "eqasc_train_8746", "nl": "A flashlight utilizes batteries to store chemical energy.", "fol": "", "prediction": ["all x.(Flashlight(x) -> UtilizesBatteriesToStoreChemicalEnergy(x))"]}
{"id": "eqasc_train_8747", "nl": "Light energy can become heat energy and heat energy can become light energy.", "fol": "", "prediction": ["all x y.((LightEnergy(x) & HeatEnergy(y)) -> (BecomesHeatEnergy(x) & BecomesLightEnergy(y)))"]}
{"id": "eqasc_train_8748", "nl": "chemical energy can become heat energy", "fol": "", "prediction": ["all x.(ChemicalEnergy(x) -> HeatEnergy(x))"]}
{"id": "eqasc_train_8749", "nl": "A battery is a store of chemical energy.", "fol": "", "prediction": ["all x.(Battery(x) -> StoreOfChemicalEnergy(x))"]}
{"id": "eqasc_train_8750", "nl": "Flashlights get energy from batteries", "fol": "", "prediction": ["all x.(Flashlight(x) -> (GetsEnergyFromBatteries(x) & FromBatteries(x)))"]}
{"id": "eqasc_train_8751", "nl": "A joule is roughly the energy used by a flashlight turned on for one second.", "fol": "", "prediction": ["all x.(Jule(x) -> (EnergyUsedByFlashlight(x) & TurnedOnForOneSecond(x)))"]}
{"id": "eqasc_train_8752", "nl": "flashlights use joules", "fol": "", "prediction": ["all x.(Flashlight(x) -> UsesJules(x))"]}
{"id": "eqasc_train_8753", "nl": "Light is electromagnetic energy in the form of waves.", "fol": "", "prediction": ["all x.(Light(x) -> (ElectromagneticEnergy(x) & Waves(x)))"]}
{"id": "eqasc_train_8754", "nl": "A flashlight emits light waves.", "fol": "", "prediction": ["all x.(Flashlight(x) -> EmitsLightWaves(x))"]}
{"id": "eqasc_train_8755", "nl": "Work is the conversion of one form of energy into another.", "fol": "", "prediction": ["all x y.((Work(x) & Energy(y)) -> ConvertsInto(x,y))"]}
{"id": "eqasc_train_8756", "nl": "A flashlight does work.", "fol": "", "prediction": ["all x.(Flashlight(x) -> Works(x))"]}
{"id": "eqasc_train_8757", "nl": "Then, in 1897, a man named David Misell invented the flashlight.", "fol": "", "prediction": ["all x.((Man(x) & NamedDavidMisell(x)) -> InventsFlashlight(x))"]}
{"id": "eqasc_train_8758", "nl": "Something invented by David Misell converts chemical energy into light energy.", "fol": "", "prediction": ["all x y.((InventedByDavidMisell(x) & ChemicalEnergy(y)) -> ConvertsToLightEnergy(x,y))"]}
{"id": "eqasc_train_8759", "nl": "a plant requires sunlight to grow", "fol": "", "prediction": ["all x.((Plant(x) & RequiresSunlight(x)) -> GrowsWith(x,y))"]}
{"id": "eqasc_train_8760", "nl": "A plant needs photons in order to grow.", "fol": "", "prediction": ["all x.((Plant(x) & NeedsPhotons(x)) -> Grows(x))"]}
{"id": "eqasc_train_8761", "nl": "Photosynthesis is how plants and some other life forms use sunlight to grow.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (Plants(x) & exists y.(LifeForm(y) & UsesSunlight(x,y))))"]}
{"id": "eqasc_train_8762", "nl": " A plant requires photosynthesis in order to grow", "fol": "", "prediction": ["all x.((Plant(x) & RequiresPhotosynthesis(x)) -> Grows(x))"]}
{"id": "eqasc_train_8763", "nl": "Plants need air, plants need air.", "fol": "", "prediction": ["all x y.((Plant(x) & Plant(y)) -> (NeedsAir(x) & NeedsAir(y)))"]}
{"id": "eqasc_train_8764", "nl": "Grass needs air and sunlight", "fol": "", "prediction": ["all x.(Grass(x) -> (NeedsAir(x) & NeedsSunlight(x)))"]}
{"id": "eqasc_train_8765", "nl": "Vineyards are vertically trellised, low to the ground, increasing sunlight exposure in the fruit zone.", "fol": "", "prediction": ["all x.(Vineyard(x) -> (VerticallyTrellised(x) & LowToGround(x) & IncreasesSunlightExposure(x)))"]}
{"id": "eqasc_train_8766", "nl": "Vineyards are vertically trellised to promote plant growth", "fol": "", "prediction": ["all x.(Vineyard(x) -> (VerticallyTrellised(x) & PromotesPlantGrowth(x)))"]}
{"id": "eqasc_train_8767", "nl": "FRUITS Type of plant.", "fol": "", "prediction": ["FRUITS (TypeOfPlant(x))"]}
{"id": "eqasc_train_8768", "nl": "fruits require sunlight to grow", "fol": "", "prediction": ["all x.(Fruit(x) -> RequiresSunlightToGrow(x))"]}
{"id": "eqasc_train_8769", "nl": "Still it takes about eight minutes for sunlight to travel from the sun to the earth.", "fol": "", "prediction": ["all x y.((Sunlight(x) & Earth(y)) -> TakesAboutEightMinutes(x,y))"]}
{"id": "eqasc_train_8770", "nl": "A plant requires something that takes eight minutes to travel to the Earth to grow.", "fol": "", "prediction": ["all x.((Plant(x) & Requires(x,8)) -> TakesEightMinutesToTravelToGrow(x))"]}
{"id": "eqasc_train_8771", "nl": "During the day, sunlight warms the soil.", "fol": "", "prediction": ["all x y.((Sunlight(x) & Day(y)) -> WarmsSoil(x,y))"]}
{"id": "eqasc_train_8772", "nl": "plants grow during the day", "fol": "", "prediction": ["all x.((Plant(x) & Day(x)) -> GrowsDuring(x,Day))"]}
{"id": "eqasc_train_8773", "nl": "Plants to avoid are fast-growing vines that can take over an area in no time.", "fol": "", "prediction": ["all x.((Plant(x) & Avoids(x)) -> (FastGrowingVine(x) & CanTakeOverAreaInNoTime(x)))"]}
{"id": "eqasc_train_8774", "nl": "Plants require sunlight in order to take over an area.", "fol": "", "prediction": ["all x.(Plant(x) -> (RequiresSunlight(x) & TakesOverArea(x)))"]}
{"id": "eqasc_train_8775", "nl": "Sunlight is made out of energy", "fol": "", "prediction": ["all x.(Sunlight(x) -> MadeOutOfEnergy(x))"]}
{"id": "eqasc_train_8776", "nl": "Vegetable plants grow better in full sunlight.", "fol": "", "prediction": ["all x.((VegetablePlant(x) & FullSunlight(x)) -> GrowsBetter(x))"]}
{"id": "eqasc_train_8777", "nl": "Vegetables require sunlight to grow", "fol": "", "prediction": ["all x.(Vegetable(x) -> RequiresSunlightToGrow(x))"]}
{"id": "eqasc_train_8778", "nl": "All plants live and grow by photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> (Lives(x) & GrowsByPhotosynthesis(x)))"]}
{"id": "eqasc_train_8779", "nl": "a plant requires sunlight for photosynthesis", "fol": "", "prediction": ["all x y.((Plant(x) & Sunlight(y)) -> RequiresForPhotosynthesis(x,y))"]}
{"id": "eqasc_train_8780", "nl": "wheat requires sunlight to grow", "fol": "", "prediction": ["all x.(Wheat(x) -> RequiresSunlightToGrow(x))"]}
{"id": "eqasc_train_8781", "nl": "The nature of sunlight Sunlight is electromagnetic energy.", "fol": "", "prediction": ["all x.(Sunlight(x) -> ElectromagneticEnergy(x))"]}
{"id": "eqasc_train_8782", "nl": "Plants require electromagnetic energy to grow", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresElectromagneticEnergy(x))"]}
{"id": "eqasc_train_8783", "nl": "a laser is used for producing light", "fol": "", "prediction": ["all x y.((Laser(x) & Light(y)) -> UsedForProducing(x,y))"]}
{"id": "eqasc_train_8784", "nl": "A laser is used for producing energy.", "fol": "", "prediction": ["all x.(Laser(x) -> ProducesEnergy(x))"]}
{"id": "eqasc_train_8785", "nl": "Also, very powerful, high concentration lasers can burn or cut the skin.", "fol": "", "prediction": ["all x.((Laser(x) & Powerful(x) & HighConcentration(x)) -> (BurnSkin(x) | CutSkin(x)))"]}
{"id": "eqasc_train_8786", "nl": "light can burn the skin", "fol": "", "prediction": ["all x y.((Light(x) & Skin(y)) -> Burns(x,y))"]}
{"id": "eqasc_train_8787", "nl": "Furthermore, such laser light is polarized.", "fol": "", "prediction": ["all x.(LaserLight(x) -> Polarized(x))"]}
{"id": "eqasc_train_8788", "nl": "lasers are polarized", "fol": "", "prediction": ["all x.(Laser(x) -> Polarized(x))"]}
{"id": "eqasc_train_8789", "nl": "Lights illuminate the blackness.", "fol": "", "prediction": ["all x.(Light(x) -> IlluminatesBlackness(x))"]}
{"id": "eqasc_train_8790", "nl": "lasers can be used to illuminate", "fol": "", "prediction": ["all x.(Laser(x) -> (UsedToIlluminate(x) & Illuminates(x)))"]}
{"id": "eqasc_train_8791", "nl": "Light reveals what lies hidden in darkness.", "fol": "", "prediction": ["all x y.((Light(x) & Darkness(y)) -> Discovers(x,y))"]}
{"id": "eqasc_train_8792", "nl": "A laser is used for producing that which reveals what lies hidden in darkness.", "fol": "", "prediction": ["all x.(Laser(x) -> (Produces(x) & Discovers(x) & HiddenInDarkness(x)))"]}
{"id": "eqasc_train_8793", "nl": "And rays of light shine on the ground.", "fol": "", "prediction": ["all x y.((RaysOfLight(x) & Ground(y)) -> ShinesOn(x,y))"]}
{"id": "eqasc_train_8794", "nl": "A laser can make a ray.", "fol": "", "prediction": ["all x.(Laser(x) -> CanMakeRay(x))"]}
{"id": "eqasc_train_8795", "nl": "Lasers, for instance, produce coherent light.", "fol": "", "prediction": ["all x.(Laser(x) -> (ProducesCoherentLight(x) & Laser(x)))"]}
{"id": "eqasc_train_8796", "nl": "Lasers are used to produce a beam that is coherent.", "fol": "", "prediction": ["all x.(Laser(x) -> (ProducesCoherentBeam(x) & Laser(x)))"]}
{"id": "eqasc_train_8797", "nl": "a laser is used for producing rays or beams", "fol": "", "prediction": ["all x.(Laser(x) -> (ProducesRaysOrBeams(x) & ProducesBeams(x)))"]}
{"id": "eqasc_train_8798", "nl": "A laser can produce rays.", "fol": "", "prediction": ["all x.(Laser(x) -> CanProduceRays(x))"]}
{"id": "eqasc_train_8799", "nl": "A laser is used for producing electromagnetic energy.", "fol": "", "prediction": ["all x.(Laser(x) -> ProducesElectromagneticEnergy(x))"]}
{"id": "eqasc_train_8800", "nl": "Animals use saturated fatty acids to store energy.", "fol": "", "prediction": ["all x.(Animal(x) -> UsesSaturatedFattyAcidsToStoreEnergy(x))"]}
{"id": "eqasc_train_8801", "nl": "During hibernation, they use their stored energy very slowly.", "fol": "", "prediction": ["all x.((Hibernation(x) & StoredEnergy(x)) -> UsesSlowly(x))"]}
{"id": "eqasc_train_8802", "nl": "Animals slowly consume saturated fatty acids while hibernating", "fol": "", "prediction": ["all x y.((Animal(x) & SaturatedFattyAcids(y)) -> SlowlyConsumes(x,y))"]}
{"id": "eqasc_train_8803", "nl": "Potential energy is stationary, stored energy.", "fol": "", "prediction": ["all x.(PotentialEnergy(x) -> (Stable(x) & StoredEnergy(x)))"]}
{"id": "eqasc_train_8804", "nl": "Animals use saturated fatty acids to create stationary potential energy", "fol": "", "prediction": ["all x y.((Animal(x) & SaturatedFattyAcids(y)) -> CreatesStablePotentialEnergy(x,y))"]}
{"id": "eqasc_train_8805", "nl": "Killer whales are social animals.", "fol": "", "prediction": ["all x.(KillerWhale(x) -> SocialAnimal(x))"]}
{"id": "eqasc_train_8806", "nl": "killer whales use saturated fatty acids to store energy.", "fol": "", "prediction": ["all x.(KillerWhale(x) -> UsesSaturatedFattyAcids(x))"]}
{"id": "eqasc_train_8807", "nl": "Fatty Acids Fatty acids are the building blocks of fats.", "fol": "", "prediction": ["all x.(FattyAcid(x) -> BuildingBlockOfFats(x))"]}
{"id": "eqasc_train_8808", "nl": "Animals use fats to store energy.", "fol": "", "prediction": ["all x.(Animal(x) -> UsesFatsToStoreEnergy(x))"]}
{"id": "eqasc_train_8809", "nl": "Fatty acids are the most abundant source of stored energy in the body's cells.", "fol": "", "prediction": ["all x.(FattyAcid(x) -> (AbundantEnergySource(x) & InCells(x)))"]}
{"id": "eqasc_train_8810", "nl": "Animals use the body's cells to store energy", "fol": "", "prediction": ["all x y.((Animal(x) & BodyCell(y)) -> StoresEnergy(x,y))"]}
{"id": "eqasc_train_8811", "nl": "Fatty acids and glucose are the body's primary energy sources.", "fol": "", "prediction": ["all x.((FattyAcids(x) & Glucose(x)) -> PrimaryEnergySource(x))"]}
{"id": "eqasc_train_8812", "nl": "animals use glucose for energy", "fol": "", "prediction": ["all x.(Animal(x) -> UsesGlucoseForEnergy(x))"]}
{"id": "eqasc_train_8813", "nl": "cats use saturated fatty acids to store energy", "fol": "", "prediction": ["all x.(Cat(x) -> UsesSaturatedFattyAcidsToStoreEnergy(x))"]}
{"id": "eqasc_train_8814", "nl": "Animals store excess energy as fat.", "fol": "", "prediction": ["all x.(Animal(x) -> StoresExcessEnergyAsFat(x))"]}
{"id": "eqasc_train_8815", "nl": "Saturated fatty acids can be used to store excess energy.", "fol": "", "prediction": ["all x.(SaturatedFattyAcid(x) -> StoresExcessEnergy(x))"]}
{"id": "eqasc_train_8816", "nl": "Potential energy is energy stored.", "fol": "", "prediction": ["all x.(PotentialEnergy(x) -> EnergyStored(x))"]}
{"id": "eqasc_train_8817", "nl": "Animals use saturated fatty acids to become potential energy", "fol": "", "prediction": ["all x y.((Animal(x) & SaturatedFattyAcids(y)) -> UsesToBecomeEnergy(x,y))"]}
{"id": "eqasc_train_8818", "nl": "cows use saturated fatty acids to store energy", "fol": "", "prediction": ["all x y.((Cow(x) & Cow(y)) -> UsesSaturatedFattyAcidsToStoreEnergy(x,y))"]}
{"id": "eqasc_train_8819", "nl": "Dogs use saturated fatty acids to store energy.", "fol": "", "prediction": ["all x.(Dog(x) -> UsesSaturatedFattyAcids(x))"]}
{"id": "eqasc_train_8820", "nl": "Dolphins are a very unique animal.", "fol": "", "prediction": ["all x.(Dolphin(x) -> UniqueAnimal(x))"]}
{"id": "eqasc_train_8821", "nl": "Dolphins use saturated fatty acids to store energy.", "fol": "", "prediction": ["all x.(Dolphin(x) -> UsesSaturatedFattyAcids(x))"]}
{"id": "eqasc_train_8822", "nl": "Hair helps to insulate and protect the body.", "fol": "", "prediction": ["all x.(Hair(x) -> (Insulates(x) & Protects(x)))"]}
{"id": "eqasc_train_8823", "nl": "Hair grows from hair follicles within the skin.", "fol": "", "prediction": ["all x.(Hair(x) -> GrowsFromHairFollicles(x))"]}
{"id": "eqasc_train_8824", "nl": "follicles within the skin helps to insulate and protect the body", "fol": "", "prediction": ["all x y.((Follicles(x) & Skin(y)) -> (Insulates(x,y) & Protects(x,y)))"]}
{"id": "eqasc_train_8825", "nl": "Hair is used to insulate and keep the body warm in a large variety of climates.", "fol": "", "prediction": ["all x.(Hair(x) -> (Insulates(x) & KeepsBodyWarm(x) & InLargeVarietyOfClimates(x)))"]}
{"id": "eqasc_train_8826", "nl": "Hair helps to keep the body warm and protect it in a variety of climates", "fol": "", "prediction": ["all x y.((Hair(x) & Body(y)) -> (KeepsWarm(x,y) & ProtectsInClimate(x,y)))"]}
{"id": "eqasc_train_8827", "nl": "Frankly, long hair is quite different to a mullet style.", "fol": "", "prediction": ["all x.((LongHair(x) & MulletStyle(x)) -> VeryDifferent(x))"]}
{"id": "eqasc_train_8828", "nl": "Whether worn long or as a mullet, there is still insulation and protection provided.", "fol": "", "prediction": ["all x.((WearnedLong(x) | WornAsMullet(x)) -> (Insulation(x) & Protection(x)))"]}
{"id": "eqasc_train_8829", "nl": "Hair is produced by living cells in the hair follicles at the base of each hair.", "fol": "", "prediction": ["all x y.((Hair(x) & LivingCells(y) & HairFollicles(y)) -> ProducedBy(x,y))"]}
{"id": "eqasc_train_8830", "nl": "living cells in follicles help insulate and protect the body", "fol": "", "prediction": ["all x y.((LivingCells(x) & Follicles(y)) -> (Insulates(x,y) & ProtectsBody(x,y)))"]}
{"id": "eqasc_train_8831", "nl": "Hair is composed of the protein keratin.", "fol": "", "prediction": ["all x.(Hair(x) -> ComposedOfKeratin(x))"]}
{"id": "eqasc_train_8832", "nl": "The protein keratin helps to insulate and protect the body.", "fol": "", "prediction": ["all x.(ProteinKeratin(x) -> (Insulates(x) & Protects(x)))"]}
{"id": "eqasc_train_8833", "nl": "Protective hair grows between the toes.", "fol": "", "prediction": ["all x.(ProtectiveHair(x) -> GrowsBetweenToes(x))"]}
{"id": "eqasc_train_8834", "nl": "toes are insulated by hair", "fol": "", "prediction": ["all x.(Toe(x) -> InsulatedByHair(x))"]}
{"id": "eqasc_train_8835", "nl": "Lean body mass and body fat are derived from total body water.", "fol": "", "prediction": ["all x.((LeanBodyMass(x) & BodyFat(x)) -> DerivedFromTotalBodyWater(x))"]}
{"id": "eqasc_train_8836", "nl": "Hair is not considered fat.", "fol": "", "prediction": ["all x.(Hair(x) -> -Fat(x))"]}
{"id": "eqasc_train_8837", "nl": "All mammals have hair.", "fol": "", "prediction": ["all x.(Mammal(x) -> HasHair(x))"]}
{"id": "eqasc_train_8838", "nl": "most mammals have insulation that also protects the body", "fol": "", "prediction": ["all x.(Mammal(x) -> (HasInsulation(x) & ProtectsBody(x)))"]}
{"id": "eqasc_train_8839", "nl": "Hair is built by the hair follicle from dead proteins produced by skin cells called keratin.", "fol": "", "prediction": ["all x y.((Hair(x) & HairFollicle(y) & DeadProteins(y) & SkinCells(z)) -> BuiltBy(x,y))"]}
{"id": "eqasc_train_8840", "nl": "follicles from dead proteins help to insulate and protect the body", "fol": "", "prediction": ["all x y.((Follicle(x) & DeadProtein(y)) -> (Insulates(x,y) & ProtectsBody(x,y)))"]}
{"id": "eqasc_train_8841", "nl": "plucking a string can cause that string to vibrate", "fol": "", "prediction": ["all x y.((String(x) & String(y)) -> Vibrate(x,y))"]}
{"id": "eqasc_train_8842", "nl": "When something makes a noise it is vibrating.", "fol": "", "prediction": ["all x.((MakesNoise(x) & Vibrating(x)) -> Vibrating(x))"]}
{"id": "eqasc_train_8843", "nl": "Plucking a string can cause that string to make a noise.", "fol": "", "prediction": ["all x y.((String(x) & Plucking(x,y)) -> MakesNoise(x,y))"]}
{"id": "eqasc_train_8844", "nl": "Plucking a string on a guitar creates sound", "fol": "", "prediction": ["all x y z.((PluckingString(x) & Guitar(y) & Guitar(z)) -> CreatesSound(x,y,z))"]}
{"id": "eqasc_train_8845", "nl": "Plucked stringed instruments are the harp, guitar, and harpsichord.", "fol": "", "prediction": ["all x.((Harp(x) | Guitar(x) | Harpsichord(x)) -> PluckedStringedInstrument(x))"]}
{"id": "eqasc_train_8846", "nl": "strumming a guitar causes it to vibrate", "fol": "", "prediction": ["all x y.((Guitar(x) & Guitar(y)) -> (Strumming(x,y) & CausesVibration(x,y)))"]}
{"id": "eqasc_train_8847", "nl": "For example, sound is a wave of vibrating air.", "fol": "", "prediction": ["all x.(Sound(x) -> (VibratingAir(x) & Wave(x)))"]}
{"id": "eqasc_train_8848", "nl": "Plucking a string creates sound waves.", "fol": "", "prediction": ["all x y.((String(x) & Plucking(x,y)) -> CreatesSoundWaves(x))"]}
{"id": "eqasc_train_8849", "nl": "How the sounds are made Vibrating strings provide the sound in stringed instruments.", "fol": "", "prediction": ["all x y.((Sound(x) & VibratingStrings(y)) -> ProvidesSoundInStringedInstruments(y))"]}
{"id": "eqasc_train_8850", "nl": "Plucking a string can cause sound to be made in stringed instruments.", "fol": "", "prediction": ["all x y.((String(x) & String(y)) -> CanMakeSoundInStringedInstruments(x,y))"]}
{"id": "eqasc_train_8851", "nl": "When the strings on a guitar vibrate, they transmit their vibrations to the saddle.", "fol": "", "prediction": ["all x y.((Strings(x) & Guitar(y) & Vibrates(x,y)) -> TransmitVibrationsToSaddle(x))"]}
{"id": "eqasc_train_8852", "nl": "plucking vibrates the saddle", "fol": "", "prediction": ["all x y.((Plucking(x) & Saddle(y)) -> Vibrates(x,y))"]}
{"id": "eqasc_train_8853", "nl": "Nylon string is by far the softest sound on the guitar.", "fol": "", "prediction": ["all x.(NylonString(x) -> SoftestSoundOnGuitar(x))"]}
{"id": "eqasc_train_8854", "nl": "guitars make sound with vibration", "fol": "", "prediction": ["all x.(Guitar(x) -> (MakesSoundWithVibration(x) & Vibration(x)))"]}
{"id": "eqasc_train_8855", "nl": "melting is when solids are heated above their melting point", "fol": "", "prediction": ["all x.(Melting(x) -> (SolidsHeatedAboveMeltingPoint(x) & SolidsHeatedAboveMeltingPoint(x)))"]}
{"id": "eqasc_train_8856", "nl": "When melted or dissolved in water, the crystal lattice is destroyed and the ions move freely.", "fol": "", "prediction": ["all x y.((MoltedOrDissolvedInWater(x) & CrystalLattice(y)) -> (Disrupted(y) & IonsMoveFreely(y)))"]}
{"id": "eqasc_train_8857", "nl": "dissolving is when solids are heated and ions move freely.", "fol": "", "prediction": ["all x.((SolidsHeated(x) & IonsMoveFreely(x)) -> Dissolving(x))"]}
{"id": "eqasc_train_8858", "nl": "Softer melt point wax is used to produce an even burning candle.", "fol": "", "prediction": ["all x.(SofterMeltPointWax(x) -> ProducesEvenBurningCandle(x))"]}
{"id": "eqasc_train_8859", "nl": "Heat allows candles to burn and wax to melt. ", "fol": "", "prediction": ["all x y.((Heat(x) & Candle(y)) -> (AllowsBurn(x,y) & AllowsWaxMelt(x,y)))"]}
{"id": "eqasc_train_8860", "nl": "ice melts into water", "fol": "", "prediction": ["all x y.((Ice(x) & Water(y)) -> MeltsInto(x,y))"]}
{"id": "eqasc_train_8861", "nl": "ice changes into water when above it's melting point", "fol": "", "prediction": ["all x y.((Ice(x) & AboveMeltingPoint(x,y)) -> ChangesIntoWater(x))"]}
{"id": "eqasc_train_8862", "nl": "If the room temperature is below the melting point of the substance then the substance is solid.", "fol": "", "prediction": ["all x.((RoomTemperatureBelowMeltingPoint(x)) -> SolidSubstance(x))"]}
{"id": "eqasc_train_8863", "nl": "If an object is below a solids melting temperature then it is solid", "fol": "", "prediction": ["all x.((Object(x) & BelowSolidsMeltingTemperature(x)) -> Solid(x))"]}
{"id": "eqasc_train_8864", "nl": "Ice cubes melt in liquid water.", "fol": "", "prediction": ["all x.(IceCube(x) -> MeltsInLiquidWater(x))"]}
{"id": "eqasc_train_8865", "nl": "ice cubes heated turn into liquid water", "fol": "", "prediction": ["all x.((IceCubes(x) & Heated(x)) -> TurnsIntoLiquidWater(x))"]}
{"id": "eqasc_train_8866", "nl": "Colloidal systems are suspensions of solid matter in liquids.", "fol": "", "prediction": ["all x.(ColloidSystem(x) -> (SuspensionOfSolidMatter(x) & InLiquids(x)))"]}
{"id": "eqasc_train_8867", "nl": "melting is when something part of a colloidal system is heated above its melting point", "fol": "", "prediction": ["all x y.((ColloidSystem(x) & ColloidalSystem(y) & HeatsAboveMeltingPoint(x,y)) -> Melting(x))"]}
{"id": "eqasc_train_8868", "nl": "When ice is heated above its melting point that is melting.", "fol": "", "prediction": ["all x.((Ice(x) & HeatedAboveMeltingPoint(x)) -> Melting(x))"]}
{"id": "eqasc_train_8869", "nl": "Ice is a solid, it's cold and it's hard.", "fol": "", "prediction": ["all x.(Ice(x) -> (Solid(x) & Cold(x) & Hard(x)))"]}
{"id": "eqasc_train_8870", "nl": "Melting occurs when ice is heated above its melting point.", "fol": "", "prediction": ["all x.((Ice(x) & HeatedAboveMeltingPoint(x)) -> MeltingOf(x))"]}
{"id": "eqasc_train_8871", "nl": "Igneous rocks form when rocks are heated to the melting point which forms magma.", "fol": "", "prediction": ["all x.(IgneousRock(x) -> (HeatedToMeltingPoint(x) & FormsMagma(x)))"]}
{"id": "eqasc_train_8872", "nl": "melting rocks forms magma", "fol": "", "prediction": ["all x.(MeltingRock(x) -> FormsMagma(x))"]}
{"id": "eqasc_train_8873", "nl": "hurricanes convert heat energy into mechanical energy", "fol": "", "prediction": ["all x.(Hurricane(x) -> ConvertsHeatEnergyToMechanicalEnergy(x))"]}
{"id": "eqasc_train_8874", "nl": "Hurricanes contain a tremendous amount of energy.", "fol": "", "prediction": ["all x.(Hurricane(x) -> ContainsThreevefulEnergy(x))"]}
{"id": "eqasc_train_8875", "nl": "hurricanes convert a large amount of heat", "fol": "", "prediction": ["all x.(Hurricane(x) -> ConvertsLargeAmountOfHeat(x))"]}
{"id": "eqasc_train_8876", "nl": "Some more recent hurricanes are Hurricane Andrew and Hurricane Fran.", "fol": "", "prediction": ["(LastHurricane(Hurricane) & (Hurricane(Hurricane) | Hurricane(Hurricane)))"]}
{"id": "eqasc_train_8877", "nl": "Andrew and Fran both had energy. ", "fol": "", "prediction": ["(Energy(Andrew) & Energy(Fran))"]}
{"id": "eqasc_train_8878", "nl": "Hurricanes A hurricane is a type of tropical cyclone.", "fol": "", "prediction": ["all x.(Hurricane(x) -> TropicalCyclone(x))"]}
{"id": "eqasc_train_8879", "nl": "Tropical cyclones convert heat energy into mechanical energy.", "fol": "", "prediction": ["all x.(TropicalCyclone(x) -> ConvertsHeatEnergyToMechanicalEnergy(x))"]}
{"id": "eqasc_train_8880", "nl": "Hurricanes can cause severe damage.", "fol": "", "prediction": ["all x.(Hurricane(x) -> CausesSevereDamage(x))"]}
{"id": "eqasc_train_8881", "nl": "mechanical energy can cause severe damage", "fol": "", "prediction": ["all x.(MechanicalEnergy(x) -> CausesSevereDamage(x))"]}
{"id": "eqasc_train_8882", "nl": "A tropical cyclone can convert heat energy into mechanical energy.", "fol": "", "prediction": ["all x.(TropicalCyclone(x) -> ConvertsHeatEnergyToMechanicalEnergy(x))"]}
{"id": "eqasc_train_8883", "nl": "Hurricanes are categorized by the Saffir-Simpson Scale.", "fol": "", "prediction": ["all x.(Hurricane(x) -> CategorizedBySaffirSimpsonScale(x))"]}
{"id": "eqasc_train_8884", "nl": "Something categorized by the Saffir-Simpson scale converts heat energy into mechanical energy", "fol": "", "prediction": ["all x y.((SaffirSimpsonScale(x) & HeatEnergy(y)) -> ConvertsToMechanicalEnergy(x,y))"]}
{"id": "eqasc_train_8885", "nl": "chemical weathering causes iron in rock to oxidize", "fol": "", "prediction": ["all x y.((ChemicalWeathering(x) & IronInRock(y)) -> CausesOxidation(x,y))"]}
{"id": "eqasc_train_8886", "nl": "When iron oxidizes, it rusts.", "fol": "", "prediction": ["all x.((Iron(x) & Oxidizes(x)) -> Rusts(x))"]}
{"id": "eqasc_train_8887", "nl": "Chemical weathering causes iron to rust.", "fol": "", "prediction": ["all x.(ChemicalWeathering(x) -> CausesIronToRust(x))"]}
{"id": "eqasc_train_8888", "nl": "Iron oxide gives a rusty red color to sedimentary rocks.", "fol": "", "prediction": ["all x.(IronOxygen(x) -> GivesRoseyRedColorToSedimentaryRocks(x))"]}
{"id": "eqasc_train_8889", "nl": "Chemical weathering gives a rusty red color to sedimentary rocks.", "fol": "", "prediction": ["all x y.((ChemicalWeathering(x) & SedimentaryRock(y)) -> GivesRoshyRedColor(x,y))"]}
{"id": "eqasc_train_8890", "nl": "Asteroids are typically made of rock or iron.", "fol": "", "prediction": ["all x.(Asteroids(x) -> (MadeOfRock(x) | MadeOfIron(x)))"]}
{"id": "eqasc_train_8891", "nl": "chemical weathering causes iron in asteroids to oxidize", "fol": "", "prediction": ["all x y.((ChemicalWeathering(x) & Asteroids(y)) -> CausesIronOxidation(x,y))"]}
{"id": "eqasc_train_8892", "nl": "chemical weathering causes iron to rust", "fol": "", "prediction": ["all x y.((ChemicalWeathering(x) & Iron(y)) -> CausesToRrust(x,y))"]}
{"id": "eqasc_train_8893", "nl": "Oxidation of iron minerals causes the redness of the rocks.", "fol": "", "prediction": ["all x.(OxidationOfIronMinerals(x) -> RednessOfRocks(x))"]}
{"id": "eqasc_train_8894", "nl": "chemical weathering causes redness of the rocks containing iron.", "fol": "", "prediction": ["all x y.((ChemicalWeathering(x) & Rock(y) & ContainsIron(y)) -> CausesRedness(x,y))"]}
{"id": "eqasc_train_8895", "nl": "Fe is the periodic symbol for Iron.", "fol": "", "prediction": ["Fe is the periodicSymbolForIron(x)"]}
{"id": "eqasc_train_8896", "nl": "Chemical weathering causes FE in rock to oxidize.", "fol": "", "prediction": ["all x y.((ChemicalWeathering(x) & Rock(y)) -> CausesFEOxidation(x,y))"]}
{"id": "eqasc_train_8897", "nl": "Oxides Oxides Oxides are elements combined with oxygen.", "fol": "", "prediction": ["all x.(Oxides(x) -> (Oxides(x) & Oxygen(x)))"]}
{"id": "eqasc_train_8898", "nl": "Chemical weathering causes iron in rock to combine with oxygen", "fol": "", "prediction": ["all x y z.((ChemicalWeathering(x) & IronInRock(y) & Oxygen(z)) -> CombinesWith(x,y,z))"]}
{"id": "eqasc_train_8899", "nl": "Chemical weathering is very slow in granite.", "fol": "", "prediction": ["all x.(ChemicalWeathering(x) -> VerySlowInGranite(x))"]}
{"id": "eqasc_train_8900", "nl": "Iron oxidation in granite is very slow.", "fol": "", "prediction": ["all x.((IronOxidation(x) & Granite(x)) -> VerySlow(x))"]}
{"id": "eqasc_train_8901", "nl": "Iron oxides are produced that are red, orange, or brown in color.", "fol": "", "prediction": ["all x.((IronOxygen(x) & (Red(x) | Orange(x) | Brown(x))) -> Produced(x))"]}
{"id": "eqasc_train_8902", "nl": "chemical weathering causes iron to turn brown, red, or orange", "fol": "", "prediction": ["all x.(ChemicalWeathering(x) -> (CausesIronToTurn(x,brown) | CausesIronToTurn(x,red) | CausesIronToTurn(x,orange)))"]}
{"id": "eqasc_train_8903", "nl": "Rust colored residues are due to oxidized iron.", "fol": "", "prediction": ["all x.(Rust(x) -> OxidizedIron(x))"]}
{"id": "eqasc_train_8904", "nl": "chemical weathering causes rust", "fol": "", "prediction": ["all x.(ChemicalWeathering(x) -> CausesRust(x))"]}
{"id": "eqasc_train_8905", "nl": "When iron oxidizes it produces iron oxide, more commonly referred to as rust.", "fol": "", "prediction": ["all x.((IronOxidizes(x) & ProducesIronOxid(x)) -> Rust(x))"]}
{"id": "eqasc_train_8906", "nl": "Chemical weathering of iron in rock causes rust", "fol": "", "prediction": ["all x y z.((ChemicalWeathering(x) & Iron(y) & Rock(z)) -> CausesRust(x,y,z))"]}
{"id": "eqasc_train_8907", "nl": "Oxidation occurs readily during hot weather.", "fol": "", "prediction": ["all x.((HotWeather(x) & Oxidation(x)) -> OccursRapidly(x))"]}
{"id": "eqasc_train_8908", "nl": "iron oxidation occurs more when it's hot", "fol": "", "prediction": ["all x.((IronOxidation(x) & Hot(x)) -> MoreOccurs(x))"]}
{"id": "eqasc_train_8909", "nl": "The chemical disintegration of rocks causes iron in rock to oxidize.", "fol": "", "prediction": ["all x y.((ChemicalDisintegrationOfRocks(x) & IronInRock(y)) -> Oxidizes(x,y))"]}
{"id": "eqasc_train_8910", "nl": "Low rainfall means slow chemical weathering of rock.", "fol": "", "prediction": ["all x.(LowRainfall(x) -> SlowChemicalWeatheringOfRock(x))"]}
{"id": "eqasc_train_8911", "nl": "Low rainfall can lead to oxidation of iron in rock.", "fol": "", "prediction": ["all x.(LowRainfall(x) -> LeadsToOxidationOfIronInRock(x))"]}
{"id": "eqasc_train_8912", "nl": "chemical disintegration of rocks causes the iron in it to oxidize", "fol": "", "prediction": ["all x y.((ChemicalDisintegrationOfRocks(x) & IronInRock(y)) -> CausesOxidation(x,y))"]}
{"id": "eqasc_train_8913", "nl": "Also pyrite within the altered wall rock is oxidized to limonite, geothite and hematite.", "fol": "", "prediction": ["all x y.((AlteredWallRock(x) & Pyrite(y)) -> (OxidizedToLimonite(y) | OxidizedToGeothite(y) | OxidizedToHematite(y)))"]}
{"id": "eqasc_train_8914", "nl": "chemical weathering causes pyrite to change to limonite, geothite and hematite", "fol": "", "prediction": ["all x y z.((ChemicalWeathering(x) & Pyrite(y) & Limonite(z) & Geothite(z) & Hematite(z)) -> ChangesTo(x,y,z))"]}
{"id": "eqasc_train_8915", "nl": "Limestone is a fairly common rock type.", "fol": "", "prediction": ["all x.(Limestone(x) -> (CommonRockType(x) & CommonRockType(x)))"]}
{"id": "eqasc_train_8916", "nl": "chemical weathering causes iron in limestone to oxidize", "fol": "", "prediction": ["all x y z.((ChemicalWeathering(x) & Iron(y) & Limestone(z)) -> CausesOxidation(x,y,z))"]}
{"id": "eqasc_train_8917", "nl": "when a cooler object touches a warmer object , thermal conduction occurs", "fol": "", "prediction": ["all x y z.((Colder(x) & Warmer(y) & Touches(x,y) & Warmer(z)) -> ThermalConductionOccurs(x))"]}
{"id": "eqasc_train_8918", "nl": "When the glacier moves into warmer areas the ice melts and sediments are deposited.", "fol": "", "prediction": ["all x y.((Glacier(x) & WarmerArea(y)) -> (MeltsIce(x) & DepositsSediments(x)))"]}
{"id": "eqasc_train_8919", "nl": "glaciers melt via thermal conduction", "fol": "", "prediction": ["all x y.((Glacier(x) & ThermalConduction(y)) -> Melts(x,y))"]}
{"id": "eqasc_train_8920", "nl": "Thermal conduction removes heat from the center.", "fol": "", "prediction": ["all x y.((ThermalConduction(x) & Center(y)) -> RemovesHeat(x,y))"]}
{"id": "eqasc_train_8921", "nl": "when a cooler object touches a warmer object it removes heat  ", "fol": "", "prediction": ["all x y.((Colder(x) & Warmer(y)) -> Touches(x,y))"]}
{"id": "eqasc_train_8922", "nl": "Heat sink materials are chosen for their high thermal conductivity.", "fol": "", "prediction": ["all x.((HeatSinkMaterial(x) & HighThermalConductivity(x)) -> ChosenFor(x,y))"]}
{"id": "eqasc_train_8923", "nl": "Heat sinks are designed to be cooler than the objects they're in contact with.", "fol": "", "prediction": ["all x.(HeatSink(x) -> (DesignedToBeCooler(x) & InContactWith(x)))"]}
{"id": "eqasc_train_8924", "nl": "Cabbages are cooler than cucumbers.", "fol": "", "prediction": ["all x.(Cabbage(x) -> CoolerThanCucumber(x))"]}
{"id": "eqasc_train_8925", "nl": "when a cabbage touches a cucumber, thermal conduction occurs", "fol": "", "prediction": ["all x y.((Cabbage(x) & Cucumber(y) & Touches(x,y)) -> ThermalConductionOccurs(x))"]}
{"id": "eqasc_train_8926", "nl": "when a cooler object touches a warmer object, heat is removed from the center", "fol": "", "prediction": ["all x y.((Cooler(x) & Warmer(y)) -> Touches(x,y)) HeatRemovedFromCenter(x))"]}
{"id": "eqasc_train_8927", "nl": "Heat always flow from warmer to cooler objects .", "fol": "", "prediction": ["all x y.((Heat(x) & WarmerObject(y)) -> CoolerObject(y))"]}
{"id": "eqasc_train_8928", "nl": "heat always flows to cooler objects as thermal conduction occurs.", "fol": "", "prediction": ["all x y.((Heat(x) & CoolerObject(y) & ThermalConduction(x)) -> FlowsTo(x,y))"]}
{"id": "eqasc_train_8929", "nl": "Thermal conductivity varies with sediment type.", "fol": "", "prediction": ["all x.((ThermalConductivity(x) & SedimentType(x)) -> Variable(x))"]}
{"id": "eqasc_train_8930", "nl": "When a cooler object touches a warmer object, conductivity varies with sediment type.", "fol": "", "prediction": ["all x y.((Cooler(x) & Warmer(y)) -> ConductivityVariatesWithSedimentType(x,y))"]}
{"id": "eqasc_train_8931", "nl": "Thermal conductivity also increases with compaction.", "fol": "", "prediction": ["all x.((ThermalConductivity(x) & Compaction(x)) -> Increases(x))"]}
{"id": "eqasc_train_8932", "nl": "conduction is increased with compaction", "fol": "", "prediction": ["all x.((Conduction(x) & Compaction(x)) -> Increased(x))"]}
{"id": "eqasc_train_8933", "nl": "Heat transfer is by conduction, convection, and radiation.", "fol": "", "prediction": ["all x.(HeatTransfer(x) -> (Conduction(x) | Convection(x) | Radiation(x)))"]}
{"id": "eqasc_train_8934", "nl": "heat transfers from warmer to cooler by convection", "fol": "", "prediction": ["all x y z.((HeatTransfer(x) & Warmer(y) & Cooler(z)) -> HeatTransfer(x,y,z))"]}
{"id": "eqasc_train_8935", "nl": "friction causes an object to lose energy", "fol": "", "prediction": ["all x y.((Friction(x) & Object(y)) -> CausesToLoseEnergy(x,y))"]}
{"id": "eqasc_train_8936", "nl": "An object loses kinetic energy each time it hits a non-elastic surface.", "fol": "", "prediction": ["all x y.((Object(x) & NonElasticSurface(y)) -> LosesKineticEnergy(x,y))"]}
{"id": "eqasc_train_8937", "nl": "A mass loses energy when there is friction", "fol": "", "prediction": ["all x y.((Mass(x) & Friction(y) & -Friction(y)) -> LosesEnergy(x,y))"]}
{"id": "eqasc_train_8938", "nl": "Friction causes the decline of speed.", "fol": "", "prediction": ["all x.(Friction(x) -> DecreaseOfSpeed(x))"]}
{"id": "eqasc_train_8939", "nl": "The decline of speed in associated with an object losing energy.", "fol": "", "prediction": ["all x.(DeclineOfSpeed(x) -> LosingEnergy(x))"]}
{"id": "eqasc_train_8940", "nl": "Objects become confusing, such as toasters, bathtubs, cars and forks.", "fol": "", "prediction": ["all x.((Object(x) & (Toaster(x) | Bathtub(x) | Car(x) | Fork(x))) -> Confusing(x))"]}
{"id": "eqasc_train_8941", "nl": "friction causes a car to lose energy", "fol": "", "prediction": ["all x y.((Car(x) & Car(y)) -> (LosesEnergy(x,y) & CausesFriction(x,y)))"]}
{"id": "eqasc_train_8942", "nl": "With less energy, the electron slows down.", "fol": "", "prediction": ["all x.((Electron(x) & LessEnergy(x)) -> SlowsDown(x))"]}
{"id": "eqasc_train_8943", "nl": "Friction causes an object to slow down.", "fol": "", "prediction": ["all x y.((Friction(x) & Object(y)) -> SlowsDown(x,y))"]}
{"id": "eqasc_train_8944", "nl": "For example, the word Car refers to a type of object, so Car is a class.", "fol": "", "prediction": ["all x y.((Word(x) & Car(y)) -> (RefersToObject(x,y) & Class(x,y)))"]}
{"id": "eqasc_train_8945", "nl": "Friction causes a car to lose energy", "fol": "", "prediction": ["all x y.((Car(x) & Friction(y)) -> LosesEnergy(y,x))"]}
{"id": "eqasc_train_8946", "nl": "Objects An object can be one of several things.", "fol": "", "prediction": ["all x.(Object(x) -> exists y.(Thing(y) & Object(x,y))))"]}
{"id": "eqasc_train_8947", "nl": "Friction causes things to lose energy.", "fol": "", "prediction": ["all x.(Friction(x) -> CausesLossEnergy(x))"]}
{"id": "eqasc_train_8948", "nl": "Friction generates heat.", "fol": "", "prediction": ["all x.(Friction(x) -> GeneratesHeat(x))"]}
{"id": "eqasc_train_8949", "nl": "generating heat causes an object to lose energy", "fol": "", "prediction": ["all x y.((GeneratingHeat(x) & Object(y)) -> LosesEnergy(y))"]}
{"id": "eqasc_train_8950", "nl": "Ultimately, frictional processes convert all of a wave's energy into heat.", "fol": "", "prediction": ["all x y.((FrictionalProcess(x) & Wave(y)) -> ConvertsEnergyToHeat(x,y))"]}
{"id": "eqasc_train_8951", "nl": "energy is lost due to heat", "fol": "", "prediction": ["all x y.((Heat(x) & Heat(y)) -> EnergyLoss(x,y))"]}
{"id": "eqasc_train_8952", "nl": "Dear Ashlee, The heat in the reentry phase is due to friction between the spacecraft and the air.", "fol": "", "prediction": ["Dear Ashlee, HeatInReentryPhaseDueToFriction(x) -> (Ashlee(x) & Spacecraft(x) & Air(x)))"]}
{"id": "eqasc_train_8953", "nl": "Spacecraft that are reentering the atmosphere lose energy", "fol": "", "prediction": ["all x.((Spacecraft(x) & ReenteringAtmosphere(x)) -> LosesEnergy(x))"]}
{"id": "eqasc_train_8954", "nl": "Pressure causes friction, and friction causes heat.", "fol": "", "prediction": ["(all x.(Pressure(x) -> CausesFriction(x)) & all y.(Friction(y) -> CausesHeat(y)))"]}
{"id": "eqasc_train_8955", "nl": "pressure causes an object to lose energy", "fol": "", "prediction": ["all x y.((Object(x) & Pressure(y)) -> CausesToLoseEnergy(x,y))"]}
{"id": "eqasc_train_8956", "nl": "Reduces heat friction build up.", "fol": "", "prediction": ["all x.(ReducesHeatFrictionBuildUp(x) -> ReducesHeatFriction(x))"]}
{"id": "eqasc_train_8957", "nl": "heat build up causes an object to lose energy", "fol": "", "prediction": ["all x y.((HeatBuildUp(x) & Object(y)) -> LosesEnergy(y))"]}
{"id": "eqasc_train_8958", "nl": "Friction occurs when surfaces rub together.", "fol": "", "prediction": ["all x.((Surface(x) & RubsTogether(x)) -> FrictionOccurs(x))"]}
{"id": "eqasc_train_8959", "nl": "surfaces rubbing together causes an object to lose energy", "fol": "", "prediction": ["all x y.((Surface(x) & Surface(y) & RubbingTogether(x,y)) -> LosesEnergy(x,y))"]}
{"id": "eqasc_train_8960", "nl": "Friction is a force that dissipates energy.", "fol": "", "prediction": ["all x.(Friction(x) -> DissipatesEnergy(x))"]}
{"id": "eqasc_train_8961", "nl": "opposing force dissipates energy", "fol": "", "prediction": ["all x y.((OpposingForce(x) & Force(y)) -> DissipatesEnergy(x,y))"]}
{"id": "eqasc_train_8962", "nl": "Friction occurs when two substances rub together.", "fol": "", "prediction": ["all x.((Substance(x) & RubsTogether(x)) -> Friction(x))"]}
{"id": "eqasc_train_8963", "nl": "two substances rubbing together causes an object to lose energy", "fol": "", "prediction": ["all x y.((Substance(x) & Substance(y) & RubbingTogether(x,y)) -> CausesObjectToLoseEnergy(x,y))"]}
{"id": "eqasc_train_8964", "nl": "Byproducts of friction Friction is a force acting against motion.", "fol": "", "prediction": ["all x.((ByproductsOfFriction(x) & Friction(x)) -> AgenciesAgainstMotion(x))"]}
{"id": "eqasc_train_8965", "nl": " Force acting against motion causes an object to lose energy.", "fol": "", "prediction": ["all x y.((Force(x) & Motion(y)) -> CausesLossEnergy(x,y))"]}
{"id": "eqasc_train_8966", "nl": "Lubricating reduces the friction and prevents heat damage to the mono.", "fol": "", "prediction": ["all x.(Lubricating(x) -> (ReducesFriction(x) & PreventsHeatDamage(x)))"]}
{"id": "eqasc_train_8967", "nl": "lubrication prevents an object from losing energy", "fol": "", "prediction": ["all x y.((Lubrication(x) & Object(y)) -> PreventsLosingEnergy(x,y))"]}
{"id": "eqasc_train_8968", "nl": "Slime molds are fungus-like protists commonly found on rotting logs and compost.", "fol": "", "prediction": ["all x.(SlimeMold(x) -> (FungusLikeProtist(x) & FoundOnRoastingLogsAndCompost(x)))"]}
{"id": "eqasc_train_8969", "nl": "Slime molds are nonparasitic.", "fol": "", "prediction": ["all x.(SlimeMold(x) -> NonParasitic(x))"]}
{"id": "eqasc_train_8970", "nl": "The nonparasitic protists live on decaying trees and are fungus-like", "fol": "", "prediction": ["all x.(NonparasiticProtist(x) -> (LivesOnDecayingTrees(x) & FungusLike(x)))"]}
{"id": "eqasc_train_8971", "nl": "Decomposition and composting takes place.", "fol": "", "prediction": ["all x.(Decomposition(x) & Composting(x))"]}
{"id": "eqasc_train_8972", "nl": "Slime molds are fungus like protists commonly found on rotting logs and decomposed matter.", "fol": "", "prediction": ["all x.(SlimeMold(x) -> (FungusLikeProtist(x) & FoundOnRottingLogs(x) & FoundOnDecomposedMatter(x)))"]}
{"id": "eqasc_train_8973", "nl": "slime molds are fungus-like single-celled organisms", "fol": "", "prediction": ["all x.(SlimeMold(x) -> (FungusLikeSingleCellledOrganism(x) & SingleCellledOrganism(x)))"]}
{"id": "eqasc_train_8974", "nl": "Sludge composts are also fairly high in nutrients.", "fol": "", "prediction": ["all x.(SludgeCompost(x) -> (HighInNutrients(x) & HighInNutrients(x)))"]}
{"id": "eqasc_train_8975", "nl": "Slime molds can be found on rotting logs and other nutrient-rich areas", "fol": "", "prediction": ["all x.(SlimeMold(x) -> (FoundOnRottingLogs(x) & FoundOnNutrientRichAreas(x)))"]}
{"id": "eqasc_train_8976", "nl": "An obvious sign of mature logs is the appearance of mushrooms.", "fol": "", "prediction": ["all x.((MatureLog(x) & AppearanceOfMushrooms(x)) -> ObscissiveSignOfMatureLogs(x))"]}
{"id": "eqasc_train_8977", "nl": "mushrooms are found on compost", "fol": "", "prediction": ["all x.(Mushroom(x) -> FoundOnCompost(x))"]}
{"id": "eqasc_train_8978", "nl": "True Slime Molds Slime molds are a mucus-like organism.", "fol": "", "prediction": ["all x.(TrueSlimeMold(x) -> MucusLikeOrganism(x))"]}
{"id": "eqasc_train_8979", "nl": "Mucus like organisms can be found on rotting logs and compost.", "fol": "", "prediction": ["all x.(MucusOrganism(x) -> (FoundOnRotatingLogs(x) | FoundOnCompost(x)))"]}
{"id": "eqasc_train_8980", "nl": "Slime Molds Slime molds are another type of nuisance fungus.", "fol": "", "prediction": ["all x.(SlimeMold(x) -> (NauseousFungus(x) & SlimeMold(x)))"]}
{"id": "eqasc_train_8981", "nl": "nuisance fungus are commonly found on rotting logs and compost", "fol": "", "prediction": ["all x.(NauseousFungus(x) -> (FoundOnRottingLogs(x) | FoundOnCompost(x)))"]}
{"id": "eqasc_train_8982", "nl": "Protists are both unicellular and eukaryotic.", "fol": "", "prediction": ["all x.(Protist(x) -> (Unicellular(x) & Eukaryotic(x)))"]}
{"id": "eqasc_train_8983", "nl": "slime molds are unicellular", "fol": "", "prediction": ["all x.(SlimeMold(x) -> Unicellular(x))"]}
{"id": "eqasc_train_8984", "nl": "Once the trees are cut, they become logs .", "fol": "", "prediction": ["all x.((Tree(x) & Cut(x)) -> Log(x))"]}
{"id": "eqasc_train_8985", "nl": "Slime molds are fungus-like protists commonly found on rotting trees and compost.", "fol": "", "prediction": ["all x.(SlimeMold(x) -> (FungusLikeProtist(x) & FoundOnRoastingTreesAndCompost(x)))"]}
{"id": "eqasc_train_8986", "nl": "Life Cycle Slime molds are like other fungi in that they reproduce by way of spores.", "fol": "", "prediction": ["all x.(SlimeMold(x) -> (ReproduceBySpores(x) & LikeFungi(x)))"]}
{"id": "eqasc_train_8987", "nl": "organisms commonly found on rotting logs and compost reproduce by way of spores", "fol": "", "prediction": ["all x y.((Organism(x) & RottenLog(y) & Compost(y)) -> ReproducesBySpores(x,y))"]}
{"id": "eqasc_train_8988", "nl": "Methane gas is a produced by rotting compost, trash, and human waste.", "fol": "", "prediction": ["all x.(MethaneGas(x) -> (ProducedByRoastingCompost(x) & ProducedByRoastingTrash(x) & ProducedByRoastingHumanWaste(x)))"]}
{"id": "eqasc_train_8989", "nl": "Methane gas can be produced by Slime molds ", "fol": "", "prediction": ["all x.(MethaneGas(x) -> ProducedBySlimeMolds(x))"]}
{"id": "eqasc_train_8990", "nl": "Slime molds are one celled organisms.", "fol": "", "prediction": ["all x.(SlimeMold(x) -> L\u00e9asedOrganism(x))"]}
{"id": "eqasc_train_8991", "nl": "Fuligo septica causes a slime mold.", "fol": "", "prediction": ["all x.(FuligoSeptica(x) -> CausesSlimeMold(x))"]}
{"id": "eqasc_train_8992", "nl": "Fuligo septica causes a fungus on rotting compost", "fol": "", "prediction": ["all x.(FuligoSeptica(x) -> CausesFungusOnRottingCompost(x))"]}
{"id": "eqasc_train_8993", "nl": "Animals, plants, fungi and protists are eukaryotes.", "fol": "", "prediction": ["all x.((Animal(x) | Plant(x) | Fungus(x) | Protist(x)) -> Eukaryote(x))"]}
{"id": "eqasc_train_8994", "nl": "Slime molds found on rotting logs are eukaryotes", "fol": "", "prediction": ["all x.((SlimeMold(x) & FoundOnRoastingLogs(x)) -> Eukaryote(x))"]}
{"id": "eqasc_train_8995", "nl": "Protists are single celled organisms containing organelles.", "fol": "", "prediction": ["all x.(Protist(x) -> (SingleLeavedOrganism(x) & ContainsOrganelles(x)))"]}
{"id": "eqasc_train_8996", "nl": "slime molds are fungus-like single celled organisms", "fol": "", "prediction": ["all x.(SlimeMold(x) -> (FungusLike(x) & SingleLeavedOrganism(x)))"]}
{"id": "eqasc_train_8997", "nl": "the force of water against the seed coat causes a root to emerge from a seed", "fol": "", "prediction": ["all x y z.((Water(x) & SeedCoat(y) & Root(z) & ForceAgainst(x,y) & SeedCoat(z)) -> CausesRootEmergenceFrom(z,y))"]}
{"id": "eqasc_train_8998", "nl": "When the seeds are watered, they grow into a huge root, and then the root sprouts flowers.", "fol": "", "prediction": ["all x y.((Seed(x) & Watered(x)) -> (GrowsIntoHabitableRoot(x) & SpoutsFlowers(y)))"]}
{"id": "eqasc_train_8999", "nl": "Flowers come from roots emerging from a seed's coat", "fol": "", "prediction": ["all x y.((Flower(x) & Seed(y)) -> EmergesFromRootsFromCoat(x,y))"]}
{"id": "eqasc_train_9000", "nl": "New sprouts emerge from the roots.", "fol": "", "prediction": ["all x.(NewSprout(x) -> EmergesFromRoots(x))"]}
{"id": "eqasc_train_9001", "nl": "The force of water against a seed coat causes it to sprout roots.", "fol": "", "prediction": ["all x y.((WaterForce(x) & SeedCoat(y)) -> CausesSpokenRoots(x,y))"]}
{"id": "eqasc_train_9002", "nl": "The force of water helps a root sprout", "fol": "", "prediction": ["all x y.((WaterForce(x) & RootSpoken(y)) -> HelpsSpoken(x,y))"]}
{"id": "eqasc_train_9003", "nl": "Instead, trees use a method called osmosis to force water upwards.", "fol": "", "prediction": ["all x.(Tree(x) -> (UsesOsmosis(x) & ForcesWaterUpwards(x)))"]}
{"id": "eqasc_train_9004", "nl": "Osmosis of water enables a root to emerge from a seed.", "fol": "", "prediction": ["all x y.((OsmosisOfWater(x) & Root(y)) -> EnablesEmergenceFromSeed(x,y))"]}
{"id": "eqasc_train_9005", "nl": "the force of h2o against the seed coat causes a root to emerge from a seed", "fol": "", "prediction": ["all x y z.((H2o(x) & SeedCoat(y) & Root(z) & SeedCoat(z)) -> CausesEmergenceFrom(z,y,z))"]}
{"id": "eqasc_train_9006", "nl": "the force of H2O against the seed coat causes a root to emerge from a seed", "fol": "", "prediction": ["all x y.((H2O(x) & SeedCoat(y)) -> CausesRootEmergenceFromSeed(x,y))"]}
{"id": "eqasc_train_9007", "nl": "Acorns are the seeds of oak trees.", "fol": "", "prediction": ["all x.(Acorn(x) -> (Seed(x,OakTree) & Seed(x,OakTree)))"]}
{"id": "eqasc_train_9008", "nl": "water causes a root to emerge from an acorn", "fol": "", "prediction": ["all x y z.((Water(x) & Root(y) & Acorn(z)) -> CausesEmergenceFrom(y,z))"]}
{"id": "eqasc_train_9009", "nl": "Heavy wet soils discourage healthy root growth and encourage root roots.", "fol": "", "prediction": ["all x.(HeavyWetSoil(x) -> (DecouragesHealthyRootGrowth(x) & EncouragesRootRoots(x)))"]}
{"id": "eqasc_train_9010", "nl": "The force of water against the seed coat causes something  whose growth is discouraged by heavy wet soils to emerge from a seed", "fol": "", "prediction": ["all x y.((WaterForce(x) & SeedCoat(y) & HeavyWetSoils(x)) -> CausesGrowthToEmergeFromSeed(x,y))"]}
{"id": "eqasc_train_9011", "nl": "Germination depends on the seed coat.", "fol": "", "prediction": ["all x.(Germination(x) -> DependsOnSeedCoat(x))"]}
{"id": "eqasc_train_9012", "nl": "the force of water causes germination with the emergence of a root", "fol": "", "prediction": ["all x y z.((WaterForce(x) & Root(y) & Root(z)) -> CausesGerminationWithEmergenceOfRoot(x,y,z))"]}
{"id": "eqasc_train_9013", "nl": "Germination occurs when the seedling root or radicle emerges from the seed coat.", "fol": "", "prediction": ["all x y.((SeedlingRoot(x) | SeedlingRadicle(y)) -> EmergesFromSeedCoat(x,y))"]}
{"id": "eqasc_train_9014", "nl": "the force of water against the seed coat causes Germination  ", "fol": "", "prediction": ["all x y.((WaterForce(x) & SeedCoat(y) & CausesGermination(x,y)) -> CausesGermination(x,y))"]}
{"id": "eqasc_train_9015", "nl": "Forces A force is a push or a pull.", "fol": "", "prediction": ["all x.(Force(x) -> (Push(x) | Pull(x)))"]}
{"id": "eqasc_train_9016", "nl": "Something that is a push or a pull of water against the seed coat causes a root to emerge.", "fol": "", "prediction": ["all x.((PushOrPullOfWater(x) & SeedCoat(x)) -> RootEmerges(x))"]}
{"id": "eqasc_train_9017", "nl": "Most waves are formed from the force of wind against the water.", "fol": "", "prediction": ["all x.(Waves(x) -> FormedFromWindAgainstWater(x))"]}
{"id": "eqasc_train_9018", "nl": "waves against the seed coat causes a root to emerge from a seed", "fol": "", "prediction": ["all x y.((WavesAgainstSeedCoat(x) & Root(y)) -> CausesRootEmergenceFromSeed(x,y))"]}
{"id": "eqasc_train_9019", "nl": "Gametes then unite in fertilization and form a diploid zygote.", "fol": "", "prediction": ["all x.(Gamete(x) -> (UniteInFertilization(x) & FormsDiploidZygote(x)))"]}
{"id": "eqasc_train_9020", "nl": "After the mating of gametes, zygots are formed.", "fol": "", "prediction": ["all x.((Gamete(x) & Mating(x)) -> Zygot(x))"]}
{"id": "eqasc_train_9021", "nl": "gametes mate into zygotes", "fol": "", "prediction": ["all x y.((Gamete(x) & Zygote(y)) -> MatesInto(x,y))"]}
{"id": "eqasc_train_9022", "nl": "Gametes then unite in fertilization and eventually become an embryo", "fol": "", "prediction": ["all x.(Gamete(x) -> (UniteInFertilization(x) & BecomesEmbryo(x)))"]}
{"id": "eqasc_train_9023", "nl": "ova and spermatozoa unite in fertilization and form a diploid zygote", "fol": "", "prediction": ["all x y z.((Ovum(x) & Spermatozoa(y) & Fertilization(z) & UnitesIn(x,y,z)) -> FormsDiploidZygote(x))"]}
{"id": "eqasc_train_9024", "nl": "Gametes are haploid egg or sperm that fuse to form a zygote.", "fol": "", "prediction": ["all x.(Gamete(x) -> (HaploidEgg(x) | HaploidSpore(x)) & FuseToFormZygote(x)))"]}
{"id": "eqasc_train_9025", "nl": "Diploid zygotes are the result of a haploid sperm and egg combining.", "fol": "", "prediction": ["all x.(DiploidZygotes(x) -> (HaploidSperm(x) & HaploidEgg(x)))"]}
{"id": "eqasc_train_9026", "nl": "Haploid gametes unite to form diploid zygote.", "fol": "", "prediction": ["all x.(HaploidGamete(x) -> UnitesToFormDiploidZygote(x))"]}
{"id": "eqasc_train_9027", "nl": "gametes turn into diploid zygotes", "fol": "", "prediction": ["all x.(Gamete(x) -> TurnsIntoDiploidZygotes(x))"]}
{"id": "eqasc_train_9028", "nl": "Mitosis produces diploid cells.", "fol": "", "prediction": ["all x.(Mitosis(x) -> ProducesDiploteCells(x))"]}
{"id": "eqasc_train_9029", "nl": "Gametes then unite in fertilization and begin Mitosis", "fol": "", "prediction": ["all x.(Gamete(x) -> (UniteInFertilization(x) & BeginMitosis(x)))"]}
{"id": "eqasc_train_9030", "nl": "a sperm and an egg unite in fertilization and form a diploid zygote", "fol": "", "prediction": ["all x y z.((Sperm(x) & Egg(y) & Fertilization(z)) -> (UniteInFertilization(x,y,z) & FormsDiploidZygote(x)))"]}
{"id": "eqasc_train_9031", "nl": "Collectively, the sperm and the ova are also referred to as gametes .", "fol": "", "prediction": ["all x.((Sperm(x) & Ovar(x)) -> Gametes(x))"]}
{"id": "eqasc_train_9032", "nl": "sperm and ova unite to form a diploid zygote", "fol": "", "prediction": ["all x y z.((Sperm(x) & Ovum(y) & DiploidZygote(z)) -> (Underlies(x,y,z) & Forms(x,z)))"]}
{"id": "eqasc_train_9033", "nl": "Syngamy produces a diploid zygote.", "fol": "", "prediction": ["all x.(Syngamy(x) -> ProducesDiploidZygote(x))"]}
{"id": "eqasc_train_9034", "nl": "Syngamy occurs in gametes.", "fol": "", "prediction": ["all x.(Syngamy(x) -> OccursInGametes(x))"]}
{"id": "eqasc_train_9035", "nl": "syngamy is when Gametes unite in fertilization", "fol": "", "prediction": ["all x y.((Syngamy(x) & Gamete(y) & Fertilization(y)) -> UnitesInFertilization(y,x))"]}
{"id": "eqasc_train_9036", "nl": "Fertilization of gametes can lead to the formation of multicellular embryo in venter.", "fol": "", "prediction": ["all x y.((Gamete(x) & Fertilization(x) & Venturir(y)) -> MulticellularEmbryo(x,y))"]}
{"id": "eqasc_train_9037", "nl": "absorbing energy causes objects to heat", "fol": "", "prediction": ["all x y.((AbsorbingEnergy(x) & Object(y)) -> CausesToHeat(y,x))"]}
{"id": "eqasc_train_9038", "nl": "Dark colors absorb light energy.", "fol": "", "prediction": ["all x.(DarkColor(x) -> AbsorbsLightEnergy(x))"]}
{"id": "eqasc_train_9039", "nl": "Dark colors will cause objects to heat", "fol": "", "prediction": ["all x y.((DarkColor(x) & Object(y)) -> CausesHeat(x,y))"]}
{"id": "eqasc_train_9040", "nl": "Crystal Balls Crystal balls have special uses as ritual objects.", "fol": "", "prediction": ["all x.(CrystalBall(x) -> SpecialUseAsRitualObject(x))"]}
{"id": "eqasc_train_9041", "nl": "absorbing energy causes crystal balls to heat", "fol": "", "prediction": ["all x y.((CrystalBall(x) & EnergyAbsorbing(x)) -> Heats(y))"]}
{"id": "eqasc_train_9042", "nl": "All light is energy, which is eventually absorbed and turned into heat.", "fol": "", "prediction": ["all x.(Light(x) -> (Energy(x) & Absorbed(x) & TurnedIntoHeat(x)))"]}
{"id": "eqasc_train_9043", "nl": "Light energy causes objects to warm up", "fol": "", "prediction": ["all x y.((LightEnergy(x) & Object(y)) -> WarmUp(y))"]}
{"id": "eqasc_train_9044", "nl": "Black objects are the best heat absorbers.", "fol": "", "prediction": ["all x.(BlackObject(x) -> BestHeatAbsorber(x))"]}
{"id": "eqasc_train_9045", "nl": "Black objects are the best at getting heated", "fol": "", "prediction": ["all x.(BlackObject(x) -> BestAtHeating(x))"]}
{"id": "eqasc_train_9046", "nl": "Metal expands when heated.", "fol": "", "prediction": ["all x.((Metal(x) & Heats(x)) -> Expands(x))"]}
{"id": "eqasc_train_9047", "nl": "Absorbing energy causes metal objects to expand ", "fol": "", "prediction": ["all x y.((AbsorbingEnergy(x) & MetalObject(y)) -> CausesExpansion(x,y))"]}
{"id": "eqasc_train_9048", "nl": "Latent heat causes an object to change state.", "fol": "", "prediction": ["all x.(LatentHeat(x) -> CausesChange(x))"]}
{"id": "eqasc_train_9049", "nl": "absorbing energy causes an object to change state.", "fol": "", "prediction": ["all x.(AbsorbingEnergy(x) -> ChangesState(x))"]}
{"id": "eqasc_train_9050", "nl": "Every car is in the group vehicles and in the group ground objects .", "fol": "", "prediction": ["all x.(Car(x) -> (GroupVehicles(x) & GroupGroundObjects(x)))"]}
{"id": "eqasc_train_9051", "nl": "Absorbing energy causes cars to heat", "fol": "", "prediction": ["all x y.((AbsorbingEnergy(x) & Car(y)) -> CausesHeat(y,x))"]}
{"id": "eqasc_train_9052", "nl": "Ice absorbs heat as it melts.", "fol": "", "prediction": ["all x.(Ice(x) -> AbsorbsHeatAsMelts(x))"]}
{"id": "eqasc_train_9053", "nl": "ice melts when heated", "fol": "", "prediction": ["all x.((Ice(x) & Heated(x)) -> Melts(x))"]}
{"id": "eqasc_train_9054", "nl": "Energy enters an ecosystem as sunlight.", "fol": "", "prediction": ["all x y.((Energy(x) & Ecosystem(y)) -> EntersAsSunlight(x,y))"]}
{"id": "eqasc_train_9055", "nl": "absorbing sunlight causes objects to heat", "fol": "", "prediction": ["all x y.((Sunlight(x) & Object(y)) -> Absorbs(x,y))"]}
{"id": "eqasc_train_9056", "nl": "Sunlight shines through the atmosphere and is absorbed by the Earth's surface.", "fol": "", "prediction": ["all x y.((Sunlight(x) & Atmosphere(y)) -> (ShinesThrough(x,y) & AbsorbedBy(x,y)))"]}
{"id": "eqasc_train_9057", "nl": "Sunlight heats the Earth's surface", "fol": "", "prediction": ["all x y.((Sunlight(x) & EarthSurface(y)) -> Heats(x,y))"]}
{"id": "eqasc_train_9058", "nl": "Students test the effect of a magnet on various metal objects.", "fol": "", "prediction": ["all x y.((Student(x) & Magnet(y)) -> TestsEffectOnMetalObjects(x,y))"]}
{"id": "eqasc_train_9059", "nl": "absorbing energy causes metal to heat", "fol": "", "prediction": ["all x y.((Metal(x) & Energy(y)) -> Absorbs(x,y))"]}
{"id": "eqasc_train_9060", "nl": "Absorbing energy causes objects to have the the energy of moving molecules.", "fol": "", "prediction": ["all x.(AbsorbingEnergy(x) -> CausesMoleculesEnergy(x))"]}
{"id": "eqasc_train_9061", "nl": "If no radiation energy is absorbed, no damage is done.", "fol": "", "prediction": ["all x.((NoRadiationEnergyAbsorbed(x)) -> -Damage(x))"]}
{"id": "eqasc_train_9062", "nl": "radiation energy causes objects to heat", "fol": "", "prediction": ["all x y.((RadiationEnergy(x) & Object(y)) -> Heats(y))"]}
{"id": "eqasc_train_9063", "nl": "Absorbing energy causes metal to expand", "fol": "", "prediction": ["all x y.((AbsorbingEnergy(x) & Metal(y)) -> CausesExpansion(x,y))"]}
{"id": "eqasc_train_9064", "nl": "Food has energy in it.", "fol": "", "prediction": ["all x.(Food(x) -> HasEnergyIn(x))"]}
{"id": "eqasc_train_9065", "nl": "absorbing food causes objects to heat", "fol": "", "prediction": ["all x y.((Food(x) & Food(y)) -> Absorbs(x,y))"]}
{"id": "eqasc_train_9066", "nl": "if an animal lives under ground then that animal will be protected from a wild fire", "fol": "", "prediction": ["all x y.((Animal(x) & LivesUnderGround(x) & WildFire(y)) -> ProtectedFrom(x,y))"]}
{"id": "eqasc_train_9067", "nl": "Marmots live in underground burrows.", "fol": "", "prediction": ["all x.(Marmot(x) -> LivesInUndergroundBurrows(x))"]}
{"id": "eqasc_train_9068", "nl": "Marmots in underground burrows will be protected from wild fire. ", "fol": "", "prediction": ["all x y.((Marmot(x) & UndergroundBurrow(y)) -> ProtectedFromWildFire(x,y))"]}
{"id": "eqasc_train_9069", "nl": "Mole rats live under ground and have no fur or eyes.", "fol": "", "prediction": ["all x.(MoleRat(x) -> (LivesUnderGround(x) & -HasFur(x) & -HasEyes(x)))"]}
{"id": "eqasc_train_9070", "nl": "Mole rats will be protected in a wild fire.", "fol": "", "prediction": ["all x.(MoleRat(x) -> ProtectedInWildFire(x))"]}
{"id": "eqasc_train_9071", "nl": "Fires can cause serious injury and death as well as the loss of equipment and facilities.", "fol": "", "prediction": ["all x.(Fire(x) -> (CausesSeriousInjury(x) & CausesDeath(x) & LossOfEquipmentAndFacilities(x)))"]}
{"id": "eqasc_train_9072", "nl": "living underground can help animals prevent death", "fol": "", "prediction": ["all x.((LivesUnderground(x) & HelpsAnimalsPreventDeath(x)) -> CanHelpAnimalsPreventDeath(x))"]}
{"id": "eqasc_train_9073", "nl": "Fire is as elemental a part of the ecosystem as rain.", "fol": "", "prediction": ["all x y.((Fire(x) & Ecosystem(y)) -> ElementalPart(x,y))"]}
{"id": "eqasc_train_9074", "nl": "An animal living underground will be protected from an elemental part of the ecosystem.", "fol": "", "prediction": ["all x.((Animal(x) & LivingUnderground(x)) -> ProtectedFromElementalPartOfEcosystem(x))"]}
{"id": "eqasc_train_9075", "nl": "Moles can be found in tunnels under the ground.", "fol": "", "prediction": ["all x.(Mole(x) -> exists y.(Tunnel(y) & FoundIn(x,y))))"]}
{"id": "eqasc_train_9076", "nl": "Moles are often protected from wild fires.", "fol": "", "prediction": ["all x.(Mole(x) -> ProtectedFromWildFires(x))"]}
{"id": "eqasc_train_9077", "nl": "Moles will be protected from a wild fire.", "fol": "", "prediction": ["all x.(Mole(x) -> ProtectedFromWildFire(x))"]}
{"id": "eqasc_train_9078", "nl": "Marmots are protected from a wild fire because they're underground", "fol": "", "prediction": ["all x.(Marmot(x) -> (ProtectedFromWildFire(x) & Underground(x)))"]}
{"id": "eqasc_train_9079", "nl": "Wild fires rage in California.", "fol": "", "prediction": ["all x.(WildFire(x) -> RagesInCalifornia(x))"]}
{"id": "eqasc_train_9080", "nl": "animals that live under ground in California will be protected from some natural disasters", "fol": "", "prediction": ["all x.((Animal(x) & LivesUnderGround(x) & California(x)) -> ProtectedFromNaturalDisasters(x))"]}
{"id": "eqasc_train_9081", "nl": "Wild animals deal with fire remarkably well.", "fol": "", "prediction": ["all x.(WildAnimal(x) -> DealsWithFireRemarkablyWell(x))"]}
{"id": "eqasc_train_9082", "nl": "Animals living under ground deal with fire remarkably well.", "fol": "", "prediction": ["all x.((Animal(x) & LivingUnderGround(x)) -> DealsWithFireRemarkablyWell(x))"]}
{"id": "eqasc_train_9083", "nl": "Fire is a chemical reaction called combustion.", "fol": "", "prediction": ["all x.(Fire(x) -> ChemicalReaction(x))"]}
{"id": "eqasc_train_9084", "nl": "if an animal lives under ground then that animal will be protected from wild combustion", "fol": "", "prediction": ["all x y.((Animal(x) & LivesUnderGround(x)) -> ProtectedFromWildCombustion(x,y))"]}
{"id": "eqasc_train_9085", "nl": "Moles construct a series of tunnels in the ground.", "fol": "", "prediction": ["all x y.((Mole(x) & Tunnel(y)) -> ConstructsInGround(x,y))"]}
{"id": "eqasc_train_9086", "nl": "moles in tunnels are protected from a wild fire", "fol": "", "prediction": ["all x y.((Mole(x) & Tunnel(y)) -> WildFireProtectedFrom(x,y))"]}
{"id": "eqasc_train_9087", "nl": "Some animals, like moles and earthworms spend their entire lives underground.", "fol": "", "prediction": ["exists x.(Animal(x) & (Mole(x) | Earthworm(x))) & SpendsLifeUnderground(x))"]}
{"id": "eqasc_train_9088", "nl": "Moles reside below the surface so that animal will be protected from a wild fire", "fol": "", "prediction": ["all x y.((Mole(x) & WildFire(y)) -> ResidesBelowSurface(x,y))"]}
{"id": "eqasc_train_9089", "nl": "Fire heat can kill.", "fol": "", "prediction": ["all x.(FireHeat(x) -> CanKill(x))"]}
{"id": "eqasc_train_9090", "nl": "living underground can keep animals from being killed", "fol": "", "prediction": ["all x.((LivingUnderground(x) & KeepsAnimalsFromTreating(x)) -> KeepsAnimalsFromBeingTreated(x))"]}
{"id": "eqasc_train_9091", "nl": "Prairie dogs live in underground burrows.", "fol": "", "prediction": ["all x.(PrairieDog(x) -> LivesInUndergroundBurrows(x))"]}
{"id": "eqasc_train_9092", "nl": "Prairie dogs are protected from a wild fire.", "fol": "", "prediction": ["all x.(PrairieDog(x) -> ProtectedFromWildFire(x))"]}
{"id": "eqasc_train_9093", "nl": "Many squirrels live in burrows under the ground instead of in the trees.", "fol": "", "prediction": ["all x.(Squirrel(x) -> (LivesInBurrows(x) & -LivesInTrees(x)))"]}
{"id": "eqasc_train_9094", "nl": "Many squirrels are protected from a wild fire by their burrows", "fol": "", "prediction": ["all x y.((Squirrel(x) & WildFire(y)) -> ProtectedByBurrows(x,y))"]}
{"id": "eqasc_train_9095", "nl": "Most shrews live on or under the ground, searching through the vegetation for food.", "fol": "", "prediction": ["all x.(Shrew(x) -> (LivesOnOrUnderGround(x) & SearchesForFood(x)))"]}
{"id": "eqasc_train_9096", "nl": "shrews will be protected from a wild fire", "fol": "", "prediction": ["all x.(Shrew(x) -> ProtectedFromWildFire(x))"]}
{"id": "eqasc_train_9097", "nl": "erosion can cause a landslide", "fol": "", "prediction": ["all x.(Erosion(x) -> CanCauseLandslide(x))"]}
{"id": "eqasc_train_9098", "nl": "And the erosion caused by the unimpeded flow of water is an example of unintentional change.", "fol": "", "prediction": ["all x.((Erosion(x) & UnimpededFlowOfWater(x)) -> UnintentionalChange(x))"]}
{"id": "eqasc_train_9099", "nl": "the flow of water can cause a landslide", "fol": "", "prediction": ["all x y.((FlowOfWater(x) & Landslide(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_9100", "nl": "Landslides can be destructive.", "fol": "", "prediction": ["all x.(Landslide(x) -> Destructive(x))"]}
{"id": "eqasc_train_9101", "nl": "erosion can cause destruction", "fol": "", "prediction": ["all x.(Erosion(x) -> CausesDestruction(x))"]}
{"id": "eqasc_train_9102", "nl": "floods cause landslides", "fol": "", "prediction": ["all x y.((Flood(x) & Landslide(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_9103", "nl": "Landslides indicate unstable terrain.", "fol": "", "prediction": ["all x.(Landslide(x) -> IndicatesInstabileTerrain(x))"]}
{"id": "eqasc_train_9104", "nl": "erosion can cause unstable terrain", "fol": "", "prediction": ["all x.(Erosion(x) -> CanCauseInstabilityTerrain(x))"]}
{"id": "eqasc_train_9105", "nl": "Severe wind erosion is the result.", "fol": "", "prediction": ["all x.(SevereWindErosion(x) -> Results(x))"]}
{"id": "eqasc_train_9106", "nl": "Severe wind can cause a landslide", "fol": "", "prediction": ["all x.(SevereWind(x) -> CanCauseLandslide(x))"]}
{"id": "eqasc_train_9107", "nl": "Landslides can cerate large crevasses and reroute streams and rivers causing flash floods.", "fol": "", "prediction": ["all x.(Landslide(x) -> (CerrateLargeCrevasses(x) & RerouteStreamsAndRivers(x) & CausesFlashFloods(x)))"]}
{"id": "eqasc_train_9108", "nl": "erosion can cause  crevasses", "fol": "", "prediction": ["all x.(Erosion(x) -> CausesCravesses(x))"]}
{"id": "eqasc_train_9109", "nl": "Unrestricted logging practices lead to erosion, landslides, and flooding.", "fol": "", "prediction": ["all x.(UnrestrictedLoggingPractice(x) -> (LeadsToErosion(x) & LeadsToLandslides(x) & LeadsToFlooding(x)))"]}
{"id": "eqasc_train_9110", "nl": "logging can cause landslides", "fol": "", "prediction": ["all x.(Logging(x) -> CausesLandslides(x))"]}
{"id": "eqasc_train_9111", "nl": "Landslides Seismic vibration is a common triggering mechanism for landslides.", "fol": "", "prediction": ["all x.(Landslides(x) -> TriggersSeismicVibration(x))"]}
{"id": "eqasc_train_9112", "nl": "Erosion can cause seismic vibrations which are triggering mechanisms.", "fol": "", "prediction": ["all x.(Erosion(x) -> (CausesSeismicVibrations(x) & TriggersMechanisms(x)))"]}
{"id": "eqasc_train_9113", "nl": "a plant requires photosynthesis to grow", "fol": "", "prediction": ["all x.((Plant(x) & RequiresPhotosynthesis(x)) -> Grows(x))"]}
{"id": "eqasc_train_9114", "nl": "For example, the sun releases energy needed to drive photosynthesis.", "fol": "", "prediction": ["all x.(Sun(x) -> ReleasesEnergy(x))"]}
{"id": "eqasc_train_9115", "nl": "The sun releases energy needed for plants to grow", "fol": "", "prediction": ["all x y.((Sun(x) & Plant(y)) -> ReleasesEnergy(x,y))"]}
{"id": "eqasc_train_9116", "nl": "bamboo require photosynthesis to grow", "fol": "", "prediction": ["all x.(Bamboo(x) -> RequiresPhotosynthesisToGrow(x))"]}
{"id": "eqasc_train_9117", "nl": "Photosynthesis gives a plant energy.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> GivesEnergy(x))"]}
{"id": "eqasc_train_9118", "nl": "a plant requires energy to grow", "fol": "", "prediction": ["all x.((Plant(x) & RequiresEnergy(x)) -> Grows(x))"]}
{"id": "eqasc_train_9119", "nl": "Leaves are the main sites of photosynthesis.", "fol": "", "prediction": ["all x.(Leaves(x) -> PhotosynthesisSite(x))"]}
{"id": "eqasc_train_9120", "nl": "a plant requires leaves to grow", "fol": "", "prediction": ["all x.((Plant(x) & RequiresLeaves(x)) -> Grows(x))"]}
{"id": "eqasc_train_9121", "nl": "legumes require photosynthesis to grow", "fol": "", "prediction": ["all x.(Legumes(x) -> RequiresPhotosynthesis(x))"]}
{"id": "eqasc_train_9122", "nl": "Carbohydrates in plants are formed by photosynthesis.", "fol": "", "prediction": ["all x.((Carbohydrate(x) & InPlants(x)) -> FormedByPhotosynthesis(x))"]}
{"id": "eqasc_train_9123", "nl": "carbohydrates are formed in plants", "fol": "", "prediction": ["all x y.((Carbohydrate(x) & Plant(y)) -> FormedIn(x,y))"]}
{"id": "eqasc_train_9124", "nl": "Photosynthesis requires the chlorophyll molecule.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> RequiresChlorophyll(x))"]}
{"id": "eqasc_train_9125", "nl": "plants require chlorophyll to grow", "fol": "", "prediction": ["all x.((Plant(x) & RequiresChlorophyll(x)) -> GrowsWith(x,y))"]}
{"id": "eqasc_train_9126", "nl": "Hexazinone inhibits photosynthesis.", "fol": "", "prediction": ["all x.(Hexazinone(x) -> InhibitsPhotosynthesis(x))"]}
{"id": "eqasc_train_9127", "nl": "Hexazinone inhibits a plant to grow", "fol": "", "prediction": ["all x y.((Hexazinone(x) & Plant(y)) -> InhibitsGrowth(x,y))"]}
{"id": "eqasc_train_9128", "nl": "when the season changes , the amount of daylight will change", "fol": "", "prediction": ["all x y z.((Season(x) & SeasonChange(y) & Daylight(z)) -> ChangesAmount(z))"]}
{"id": "eqasc_train_9129", "nl": "Changing weather effects and daylight times.", "fol": "", "prediction": ["all x.(ChangesWeatherEffectsAndDaylightTimes(x) -> ChangesWeatherEffectsAndDaylightTimes(x))"]}
{"id": "eqasc_train_9130", "nl": "When seasons change, weather effects change", "fol": "", "prediction": ["all x y.((Season(x) & WeatherEffects(y)) -> SeasonChange(x))"]}
{"id": "eqasc_train_9131", "nl": "Causes seasons by changing angle of sun.", "fol": "", "prediction": ["all x.((CausesSeasons(x) & ChangesAngleOfSun(x)) -> Season(x))"]}
{"id": "eqasc_train_9132", "nl": "Changing the angle of the sun will change the amount of daylight", "fol": "", "prediction": ["all x y.((ChangeAngleOfSun(x) & Sun(y)) -> ChangesDaylight(x,y))"]}
{"id": "eqasc_train_9133", "nl": "The tilt of Earth's axis accounts for why there are seasonal changes in (a) the hours of daylight and (b) the intensity of solar radiation at any location on Earth.", "fol": "", "prediction": ["all x y.((TiltOfEarthsAxis(x) & SeasonalChange(y)) -> (A) HoursOfDarkness(y) & (B)IntensityOfSolarRadiation(y))))"]}
{"id": "eqasc_train_9134", "nl": "The seasons change on Earth because the axis of rotation is tilted", "fol": "", "prediction": ["all x y.((Season(x) & Earth(y) & AxisOfRotationTilted(x,y)) -> SeasonChange(x,y))"]}
{"id": "eqasc_train_9135", "nl": "Seasons occur due to the tilt of the Earth's axis and the orbit of the Earth around the Sun.", "fol": "", "prediction": ["all x y.((Season(x) & EarthAxis(y) & Tip(x,y)) -> Orbit(x,y))"]}
{"id": "eqasc_train_9136", "nl": "The amount of daylight changes based on the tilt of the Earth's axis", "fol": "", "prediction": ["all x.((AmountOfDarkness(x) & EarthsAxisTilt(x)) -> ChangesBasedOnTilt(x))"]}
{"id": "eqasc_train_9137", "nl": "Seasonal changes such as winter to summer or fall to winter are best.", "fol": "", "prediction": ["all x.((Winter(x) | Fall(x)) -> BestSeasonalChange(x))"]}
{"id": "eqasc_train_9138", "nl": "when fall goes to winter, the amount of daylight will be different", "fol": "", "prediction": ["all x y.((Fall(x) & Winter(y)) -> DifferentDaylightAmount(x,y))"]}
{"id": "eqasc_train_9139", "nl": "The flowering of soybeans is activated by the length of daylight hours.", "fol": "", "prediction": ["all x.((Soybean(x) & LongDarkHours(x)) -> FloweringActivated(x))"]}
{"id": "eqasc_train_9140", "nl": "Seasonal changes affect the flowering of soybeans.", "fol": "", "prediction": ["all x.(SeasonalChange(x) -> AffectsFloweringOfSoybeans(x))"]}
{"id": "eqasc_train_9141", "nl": "More daylight brings a stronger sun.", "fol": "", "prediction": ["all x.((Darkness(x) & StrongerSun(x)) -> More(x))"]}
{"id": "eqasc_train_9142", "nl": "when the season changes can bring stronger sun", "fol": "", "prediction": ["all x y.((SeasonChange(x) & SeasonChange(y)) -> BringsStrongerSun(x,y))"]}
{"id": "eqasc_train_9143", "nl": "Daylight hours are at a maximum, and summer begins.", "fol": "", "prediction": ["all x.(Daylight(x) -> (MaxMax(x) & Summer(x)))"]}
{"id": "eqasc_train_9144", "nl": "when the season changes  the amount of hours will change", "fol": "", "prediction": ["all x y.((SeasonChange(x) & SeasonChange(y)) -> HoursChange(x,y))"]}
{"id": "eqasc_train_9145", "nl": "Lung cancer is most often caused by exposure to tobacco smoke.", "fol": "", "prediction": ["all x.(LungCancer(x) -> CausedByTobaccoSmoke(x))"]}
{"id": "eqasc_train_9146", "nl": "Lung cancer is most often caused by exposure to cigarettes", "fol": "", "prediction": ["all x.(LungCancer(x) -> (CausedByExpositionToCigarettes(x) & OftenCausedByIsotopes(x)))"]}
{"id": "eqasc_train_9147", "nl": "Tobacco smoke consists of solid particles and gases.", "fol": "", "prediction": ["all x.(TobaccoSmoke(x) -> (ConsistsOfSolidParticles(x) & ConsistsOfGases(x)))"]}
{"id": "eqasc_train_9148", "nl": "Lung cancer is most often caused by exposure to solid particles and gases", "fol": "", "prediction": ["all x.(LungCancer(x) -> (ExposedToSolidParticles(x) & ExposedToGases(x)))"]}
{"id": "eqasc_train_9149", "nl": "tobacco smoke is very deadly", "fol": "", "prediction": ["all x.(TobaccoSmoke(x) -> VeryLethal(x))"]}
{"id": "eqasc_train_9150", "nl": "exposure to tobacco smoke is deadly", "fol": "", "prediction": ["all x.(TobaccoSmokeExposure(x) -> Lethal(x))"]}
{"id": "eqasc_train_9151", "nl": "Many patients with lung cancer also have emphysema.", "fol": "", "prediction": ["all x.((Patient(x) & LungCancer(x)) -> HasEmphysema(x))"]}
{"id": "eqasc_train_9152", "nl": "Enphysema is often caused by exposure to tobacco smoke.", "fol": "", "prediction": ["all x.(Enphysema(x) -> CausedByTobaccoSmoke(x))"]}
{"id": "eqasc_train_9153", "nl": "exposure to tobacco smoke causes tumors", "fol": "", "prediction": ["all x y.((TobaccoSmoke(x) & ExposedTo(x,y)) -> CausesTumors(x))"]}
{"id": "eqasc_train_9154", "nl": "Tobacco smoke contains tar.", "fol": "", "prediction": ["all x.(TobaccoSmoke(x) -> ContainsTar(x))"]}
{"id": "eqasc_train_9155", "nl": "Lung cancer is most often caused by exposure to tar", "fol": "", "prediction": ["all x.(LungCancer(x) -> (CausedByExpositionToTar(x) & MostOfFast(x)))"]}
{"id": "eqasc_train_9156", "nl": "Smoke Tobacco smoke , whether directly or passively inhaled, has been shown to worsen asthma.", "fol": "", "prediction": ["all x.((SmokeTobaccoSmoke(x) & (DirectlyInhaled(x) | PassivelyInhaled(x))) -> WorsensAsthma(x))"]}
{"id": "eqasc_train_9157", "nl": "Lung cancer can be caused by direct or passive inhalation.", "fol": "", "prediction": ["all x.(LungCancer(x) -> (DirectInhalation(x) | PassiveInhalation(x)))"]}
{"id": "eqasc_train_9158", "nl": "Smoking increases the risk for lung cancer.", "fol": "", "prediction": ["all x.(Smoking(x) -> IncreasesRiskForLungCancer(x))"]}
{"id": "eqasc_train_9159", "nl": "smoking increases cancer risk", "fol": "", "prediction": ["all x.(Smoking(x) -> IncreasesCancerRisk(x))"]}
{"id": "eqasc_train_9160", "nl": "Higher tobacco taxes reduce smoking and smoking related sickness.", "fol": "", "prediction": ["all x.(HigherTobaccoTaxes(x) -> (ReducesSmoking(x) & ReducesSmokingRelatedSickness(x)))"]}
{"id": "eqasc_train_9161", "nl": "Higher tobacco taxes reduces the lung cancer rate", "fol": "", "prediction": ["all x.(HigherTobaccoTaxes(x) -> ReducesLungCancerRate(x))"]}
{"id": "eqasc_train_9162", "nl": "Secondhand smoke is also known as Environmental Tobacco Smoke.", "fol": "", "prediction": ["all x.(SecondhandSmoke(x) -> EnvironmentalTobaccoSmoke(x))"]}
{"id": "eqasc_train_9163", "nl": "Lung cancer can be caused by secondhand smoke", "fol": "", "prediction": ["all x.(LungCancer(x) -> CausedBySecondhandSmoke(x))"]}
{"id": "eqasc_train_9164", "nl": "Lung cancer is often caused by exposure to cigarettes and cigars.", "fol": "", "prediction": ["all x.(LungCancer(x) -> (CausedByExpositionToCigarettes(x) & CausedByExpositionToCigars(x)))"]}
{"id": "eqasc_train_9165", "nl": "Lung cancer continues to kill, despite modern therapies.", "fol": "", "prediction": ["all x.(LungCancer(x) -> (ContinuesToKill(x) & ModernTherapies(x)))"]}
{"id": "eqasc_train_9166", "nl": "tobacco smoke can kill", "fol": "", "prediction": ["all x.(TobaccoSmoke(x) -> CanKill(x))"]}
{"id": "eqasc_train_9167", "nl": "Lung cancer for most is the consequence of smoking.", "fol": "", "prediction": ["all x.(LungCancer(x) -> (SmokingConsequence(x) & ForMost(x)))"]}
{"id": "eqasc_train_9168", "nl": "Lung cancer is a consequence of tobacco fumes", "fol": "", "prediction": ["all x.(LungCancer(x) -> (ConsequenceOfTobaccoFumes(x) & ContainsTobaccoFumes(x)))"]}
{"id": "eqasc_train_9169", "nl": "cigarettes cause lung cancer", "fol": "", "prediction": ["all x.(Cigarette(x) -> CausesLungCancer(x))"]}
{"id": "eqasc_train_9170", "nl": "Lung cancer is most often caused by cigarettes", "fol": "", "prediction": ["all x.(LungCancer(x) -> CausedByCigarettes(x))"]}
{"id": "eqasc_train_9171", "nl": "Lung cancer is the Godzilla of cancers.", "fol": "", "prediction": ["all x.(LungCancer(x) -> GodzillaOfCancers(x))"]}
{"id": "eqasc_train_9172", "nl": "the godzilla of cancers is most often caused by exposure to tobacco smoke.", "fol": "", "prediction": ["all x.(GodzillaOfCancers(x) -> CausedByTobaccoSmoke(x))"]}
{"id": "eqasc_train_9173", "nl": "Mammals breathe with the help of a diaphragm.", "fol": "", "prediction": ["all x.(Mammal(x) -> BreathesWithDiaphragm(x))"]}
{"id": "eqasc_train_9174", "nl": "When the diaphragm moves down, air is pulled into the lungs.", "fol": "", "prediction": ["all x y.((Diaphragm(x) & MovesDown(x)) -> AirPulledIntoLungs(y))"]}
{"id": "eqasc_train_9175", "nl": "mammals breathe by pulling air into the lungs", "fol": "", "prediction": ["all x.(Mammal(x) -> (BreathesByPullingAir(x) & BreathesByPullingAir(x)))"]}
{"id": "eqasc_train_9176", "nl": "humans breathe with the help of a diaphragm", "fol": "", "prediction": ["all x y.((Human(x) & Diaphragm(y)) -> BreathesWithHelp(x,y))"]}
{"id": "eqasc_train_9177", "nl": "When a person stops breathing, they die.", "fol": "", "prediction": ["all x.((Person(x) & StopsBreathing(x)) -> Die(x))"]}
{"id": "eqasc_train_9178", "nl": "mammals prevent death with the help of a diaphragm", "fol": "", "prediction": ["all x y.((Mammal(x) & Diaphragm(y)) -> PreventsDeath(x,y))"]}
{"id": "eqasc_train_9179", "nl": "Mammals have a diaphragm to aid in respiration.", "fol": "", "prediction": ["all x.(Mammal(x) -> HasDiaphragm(x))"]}
{"id": "eqasc_train_9180", "nl": "respiration is aided by a diaphragm", "fol": "", "prediction": ["all x y.((Respiration(x) & Diaphragm(y)) -> AidedBy(x,y))"]}
{"id": "eqasc_train_9181", "nl": "pugs breathe with the help of a diaphragm", "fol": "", "prediction": ["all x.(Pug(x) -> (BreathesWithDiaphragm(x) & HelpsBreatheWithDiaphragm(x)))"]}
{"id": "eqasc_train_9182", "nl": "Common dolphins are mammals.", "fol": "", "prediction": ["all x.(CommonDolphin(x) -> Mammal(x))"]}
{"id": "eqasc_train_9183", "nl": "Dolphins breathe with the help of a diaphragm.", "fol": "", "prediction": ["all x.(Dolphin(x) -> BreathesWithDiaphragm(x))"]}
{"id": "eqasc_train_9184", "nl": "Hiccups are a result of spasms of the diaphragm.", "fol": "", "prediction": ["all x.(Hiccup(x) -> (ResultOfSpasmsOfDiaphragm(x)))"]}
{"id": "eqasc_train_9185", "nl": "Mammals sometimes get hiccups.", "fol": "", "prediction": ["exists x.(Mammal(x) & Hiccup(x))"]}
{"id": "eqasc_train_9186", "nl": "Belly breathing uses the diaphragm, which helps relax the lungs.", "fol": "", "prediction": ["all x.(Birth(x) -> (UsesDiaphragm(x) & RelaxesLungs(x)))"]}
{"id": "eqasc_train_9187", "nl": "Mammals breathe by relaxing the lungs.", "fol": "", "prediction": ["all x.(Mammal(x) -> BreathesByRelaxingLungs(x))"]}
{"id": "eqasc_train_9188", "nl": "Hiccups are caused by involuntary spasms of the diaphragm, the muscle beneath the lungs.", "fol": "", "prediction": ["all x.(Hiccup(x) -> (CausedByInvoluntarySpasms(x) & DiaphragmMuscleBehindLungs(x)))"]}
{"id": "eqasc_train_9189", "nl": "Mammals breathe with the help of a muscle below the lungs.", "fol": "", "prediction": ["all x.(Mammal(x) -> BreathesWithMuscleBelowLungs(x))"]}
{"id": "eqasc_train_9190", "nl": "Breathing Stomach muscles press against the resistance of the diaphragm.", "fol": "", "prediction": ["all x.(BreathingStomachMuscles(x) -> PressAgainstDiaphragmResistance(x))"]}
{"id": "eqasc_train_9191", "nl": "Mammals breathe with the help of something that presses against the stomach muscles", "fol": "", "prediction": ["all x.(Mammal(x) -> (BreathesWithHelpOfPressesAgainstStomachMuscles(x)))"]}
{"id": "eqasc_train_9192", "nl": "weathering means breaking down rocks from larger whole into smaller pieces by weather", "fol": "", "prediction": ["all x y z.((Weathering(x) & Rock(y) & Whole(z) & Larger(z) & SmallerPiece(z)) -> BreaksDownByWeather(x,y,z))"]}
{"id": "eqasc_train_9193", "nl": "Igneous rocks are made from lava that hardens.", "fol": "", "prediction": ["all x.(IgneousRock(x) -> (MadeFromLava(x) & Hardens(x)))"]}
{"id": "eqasc_train_9194", "nl": "weathering means breaking down something made from lava from larger whole into smaller pieces by weather", "fol": "", "prediction": ["all x y z.((Weathering(x) & Lava(y) & Lava(z)) -> BreaksDown(x,y,z))"]}
{"id": "eqasc_train_9195", "nl": "When rocks are weathered and eroded they break down into smaller pieces of rocks and minerals.", "fol": "", "prediction": ["all x.((Rock(x) & Weathered(x) & Eroded(x)) -> BreaksDownIntoSmallerRocksAndMinerals(x))"]}
{"id": "eqasc_train_9196", "nl": "Weathering means eroding rocks down into smaller pieces of minerals. ", "fol": "", "prediction": ["all x y.((Weathering(x) & Rock(y)) -> ErodingIntoMinerals(x,y))"]}
{"id": "eqasc_train_9197", "nl": "Climates with freeze and thaw promote mechanical weathering.", "fol": "", "prediction": ["all x.((Climate(x) & Freeze(x) & Thaw(x)) -> PromotesMechanicalWeathering(x))"]}
{"id": "eqasc_train_9198", "nl": "freezing and thawing can break down rocks from larger whole into smaller pieces", "fol": "", "prediction": ["all x y.((Rock(x) & LargerWhole(y) & Thawing(x)) -> BreaksDownIntoSmallerPieces(x,y))"]}
{"id": "eqasc_train_9199", "nl": "Silt forms form the weathering of rocks.", "fol": "", "prediction": ["all x.(SiltForm(x) -> WeatheringOfRocks(x))"]}
{"id": "eqasc_train_9200", "nl": "Silt forms from when rocks break down", "fol": "", "prediction": ["all x y.((Silt(x) & Rock(y)) -> BreaksDown(y,x))"]}
{"id": "eqasc_train_9201", "nl": "Basalts are volcanic, micro-crystalline rock.", "fol": "", "prediction": ["all x.(Basalt(x) -> (Volcanic(x) & Microcrystalline(x)))"]}
{"id": "eqasc_train_9202", "nl": "Breaking down basalt from larger into smaller pieces by weather is weathering", "fol": "", "prediction": ["all x y z.((Basalt(x) & Weather(y) & Basalt(z) & Larger(x,z)) -> Weathering(x))"]}
{"id": "eqasc_train_9203", "nl": "Most soil is made of weathered rocks.", "fol": "", "prediction": ["all x.(Soil(x) -> WeatheredRocks(x))"]}
{"id": "eqasc_train_9204", "nl": "Most soil is made from rocks breaking down", "fol": "", "prediction": ["all x.(Soil(x) -> (MadeFromRocks(x) & BreakingDown(x)))"]}
{"id": "eqasc_train_9205", "nl": "Erosion breaks the rock down again, and the cycle continues.", "fol": "", "prediction": ["all x y.((Erosion(x) & Rock(y)) -> BreaksDown(x,y))"]}
{"id": "eqasc_train_9206", "nl": "weathering means that rocks are eroded down again.", "fol": "", "prediction": ["all x.(Weathering(x) -> ErosionDownRocks(x))"]}
{"id": "eqasc_train_9207", "nl": "Trash collectors work in all types of weather, including rain and snow.", "fol": "", "prediction": ["all x.(TrashCollector(x) -> (WorksInAllWeather(x) & Rain(x) & Snow(x)))"]}
{"id": "eqasc_train_9208", "nl": "Rain and snow breaks down rocks from larger whole into smaller pieces.", "fol": "", "prediction": ["all x y.((Rain(x) & Snow(y)) -> BreaksDownRocksFromLargerWholeIntoSmallerPieces(x,y))"]}
{"id": "eqasc_train_9209", "nl": "Through weathering, the surface was eroded away, exposing igneous rock.", "fol": "", "prediction": ["all x y.((Weathering(x) & Surface(y)) -> (ErodedAway(y) & ExposesIgneousRock(y)))"]}
{"id": "eqasc_train_9210", "nl": "Eroding means breaking down rocks from larger whole into smaller pieces of rocks.", "fol": "", "prediction": ["all x.(Eroding(x) -> BreaksDownRocksFromLargerWholeIntoSmallerRocks(x))"]}
{"id": "eqasc_train_9211", "nl": "Massive boulders and tiny rocks influence the sound and path of water.", "fol": "", "prediction": ["all x.((MassiveBlast(x) & TinyRock(x)) -> InfluencesSoundAndPathOfWater(x))"]}
{"id": "eqasc_train_9212", "nl": "weathering means breaking down boulders by weather", "fol": "", "prediction": ["all x y.((Weathering(x) & Boulder(y)) -> BreaksDownByWeather(x,y))"]}
{"id": "eqasc_train_9213", "nl": "Larger values create bigger brushes.", "fol": "", "prediction": ["all x.(LargerValue(x) -> CreatesBiggerBrushes(x))"]}
{"id": "eqasc_train_9214", "nl": "weathering means breaking down rocks from bigger whole into smaller pieces by weather ", "fol": "", "prediction": ["all x y z.((Weathering(x) & Rock(y) & Whole(z) & BiggerToSmallerToSmallerTotal(y,z)) -> BreaksDownByWeather(x,y,z))"]}
{"id": "eqasc_train_9215", "nl": "Unconsolidated rock is rock such as gravel.", "fol": "", "prediction": ["all x.(UnconsolidatedRock(x) -> (Rock(x) & Gravel(x)))"]}
{"id": "eqasc_train_9216", "nl": "weathering can be gravel breaking down from larger into smaller pieces", "fol": "", "prediction": ["all x y.((Weathering(x) & Gravel(y)) -> BreaksDownFromLargerIntoSmallerPieces(y,x))"]}
{"id": "eqasc_train_9217", "nl": "Many weather events involve rain.", "fol": "", "prediction": ["all x.(WeatherEvent(x) -> InvolvesRain(x))"]}
{"id": "eqasc_train_9218", "nl": "rain can break down rocks into smaller pieces", "fol": "", "prediction": ["all x y.((Rain(x) & Rock(y)) -> BreaksDownIntoSmallerPieces(x,y))"]}
{"id": "eqasc_train_9219", "nl": "rocks break down because of mechanical force", "fol": "", "prediction": ["all x y.((Rock(x) & MechanicalForce(y)) -> BreaksDown(x,y))"]}
{"id": "eqasc_train_9220", "nl": "Erosion breaks rocks down into soil from larger parts.", "fol": "", "prediction": ["all x y.((Erosion(x) & Rock(y)) -> BreaksDownIntoSoil(x,y))"]}
{"id": "eqasc_train_9221", "nl": "Cancer is a disease in which cells divide out of control.", "fol": "", "prediction": ["all x.(Cancer(x) -> (Disease(x) & CellsDivideOutOfControl(x)))"]}
{"id": "eqasc_train_9222", "nl": "Cancer is a family of diseases that is characterized by cells that replicate too rapidly.", "fol": "", "prediction": ["all x.(Cancer(x) -> (DiseaseFamily(x) & CharacterizedByCells(x) & ReplicatesTooRapidly(x)))"]}
{"id": "eqasc_train_9223", "nl": "Cancer is characterized by cells replicating out of control.", "fol": "", "prediction": ["all x.(Cancer(x) -> ReplicatesOutOfControl(x))"]}
{"id": "eqasc_train_9224", "nl": "Cancer is a disease of the body's cells.", "fol": "", "prediction": ["all x.(Cancer(x) -> DiseaseOfBodyCells(x))"]}
{"id": "eqasc_train_9225", "nl": "cancer is dividing cells", "fol": "", "prediction": ["all x.(Cancer(x) -> DivisibleCells(x))"]}
{"id": "eqasc_train_9226", "nl": "Cancer is the second leading cause of death.", "fol": "", "prediction": ["all x.(Cancer(x) -> LeadingCauseOfDeath(x))"]}
{"id": "eqasc_train_9227", "nl": "the second leading cause of death is a disease in which cells divide out of control.", "fol": "", "prediction": ["all x.(LeadingCauseOfDeath(x) -> (Disease(x) & CellsDivisionOutOfControl(x)))"]}
{"id": "eqasc_train_9228", "nl": "a disease in which cells divide out of control can cause death", "fol": "", "prediction": ["all x y.((Disease(x) & CellsDivision(y) & OutOfControl(y)) -> CausesDeath(x,y))"]}
{"id": "eqasc_train_9229", "nl": "mutations can lead to a disease in which cells divide out of control.", "fol": "", "prediction": ["all x.(Mutation(x) -> (LeadsToDisease(x) & CellsDivideOutOfControl(x)))"]}
{"id": "eqasc_train_9230", "nl": "Cancer cells grow and divide rapidly out of control.", "fol": "", "prediction": ["all x.(CancerCell(x) -> (Grows(x) & DividesRapidly(x) & OutOfControl(x)))"]}
{"id": "eqasc_train_9231", "nl": "Cancer is a disease in which cells grow and divide rapidly", "fol": "", "prediction": ["all x.(Cancer(x) -> (Disease(x) & CellsGrow(x) & CellsDivisionRapidly(x)))"]}
{"id": "eqasc_train_9232", "nl": "After lung cancer, the commonest cancers in Britain are cancers of the breast, bowel and prostate.", "fol": "", "prediction": ["all x.((Cancer(x) & Commonest(x)) -> (Cancers(x,Breast) & Cancers(x,Bowel) & Cancers(x,Prostate)))"]}
{"id": "eqasc_train_9233", "nl": "The most common areas affected by a disease in which cells can divide out of control are lung, breast, and prostate", "fol": "", "prediction": ["all x.((AffectedByDisease(x) & CellsDivisionOutOfControl(x)) -> (Lung(x) | Breast(x) | Prostate(x)))"]}
{"id": "eqasc_train_9234", "nl": "leukemia is a disease in which cells divide out of control", "fol": "", "prediction": ["all x.(Leukemia(x) -> (DiseaseIn whichCellsDivideOutOfControl(x) & CellsDistributeOutOfControl(x)))"]}
{"id": "eqasc_train_9235", "nl": "Chemotherapy works on cells that are dividing.", "fol": "", "prediction": ["all x.(Chemotherapy(x) -> WorksOnCells(x))"]}
{"id": "eqasc_train_9236", "nl": "Cancer is a disease which cells split and Chemotherapy stops those cells multiplying", "fol": "", "prediction": ["all x.(Cancer(x) -> (Disease(x) & CellsSplit(x) & Chemotherapy(x) & StopsMildering(x)))"]}
{"id": "eqasc_train_9237", "nl": "Cancer is a disease of aging.", "fol": "", "prediction": ["all x.(Cancer(x) -> DiseaseOfAging(x))"]}
{"id": "eqasc_train_9238", "nl": "aging causes cells to divide ", "fol": "", "prediction": ["all x y.((Aging(x) & Cell(y)) -> CausesToDivision(x,y))"]}
{"id": "eqasc_train_9239", "nl": "With specific types of gene damage, the cell starts dividing out of control, forming a tumor.", "fol": "", "prediction": ["all x.((GeneDamage(x) & SpecificTypesOfDamage(x)) -> CellStartsDivisionOutOfControl(x))"]}
{"id": "eqasc_train_9240", "nl": "Cancer and tumors are a result of specific types of gene damage.", "fol": "", "prediction": ["all x.((Cancer(x) | Tumors(x)) -> CauseOfGeneDamage(x))"]}
{"id": "eqasc_train_9241", "nl": "Some insects can use their antennae to detect sound.", "fol": "", "prediction": ["exists x.(Insect(x) & CanDetectSound(x))"]}
{"id": "eqasc_train_9242", "nl": "When ears detect the vibrating air, signals are sent to the brain that are interpreted as sounds.", "fol": "", "prediction": ["all x y.((EarsDetectVibratingAir(x) & Brain(y)) -> SendsSignals(x,y))"]}
{"id": "eqasc_train_9243", "nl": "Some insets can use their antennae to detect vibrating air.", "fol": "", "prediction": ["exists x.(Inset(x) & CanDetectVibratingAir(x))"]}
{"id": "eqasc_train_9244", "nl": "Sound waves are compressional waves.", "fol": "", "prediction": ["all x.(SoundWaves(x) -> CompressionalWaves(x))"]}
{"id": "eqasc_train_9245", "nl": "some insects can use their antennae to detect compressional waves", "fol": "", "prediction": ["exists x.(Insect(x) & CanDetectCompressionalWaves(x))"]}
{"id": "eqasc_train_9246", "nl": "Aphids are soft-bodied insects with relatively long legs and antennae.", "fol": "", "prediction": ["all x.(Aphid(x) -> (SoftBodyInsect(x) & HasRelativelyLongLegs(x) & HasAntennae(x)))"]}
{"id": "eqasc_train_9247", "nl": "aphids use antennae to detect sound", "fol": "", "prediction": ["all x y.((Aphid(x) & Antelope(y)) -> UsesToDetectSound(x,y))"]}
{"id": "eqasc_train_9248", "nl": "Every insect has six legs, that's an insect.", "fol": "", "prediction": ["all x.(Insect(x) -> HasSixLegs(x))"]}
{"id": "eqasc_train_9249", "nl": "Animals with six legs can use their antennae to detect sound.", "fol": "", "prediction": ["all x.((Animal(x) & HasSixLegs(x)) -> CanDetectSound(x))"]}
{"id": "eqasc_train_9250", "nl": "Insects have 2 antennae.", "fol": "", "prediction": ["all x.(Insect(x) -> Has2Antennae(x))"]}
{"id": "eqasc_train_9251", "nl": "Insects have 2 appendages to detect sound. ", "fol": "", "prediction": ["all x.(Insect(x) -> HasAppendages(x,2))"]}
{"id": "eqasc_train_9252", "nl": "An insect's head has two feelers, or antennae.", "fol": "", "prediction": ["all x.(Insect(x) -> HasTwoFeelersOrAntennae(x))"]}
{"id": "eqasc_train_9253", "nl": "Some insects can use their feelers to detect sound.", "fol": "", "prediction": ["exists x.(Insect(x) & Feeler(x) & UsesToDetectSound(x))"]}
{"id": "eqasc_train_9254", "nl": "Insects have chemical receptors on their antennae, legs or feet.", "fol": "", "prediction": ["all x.(Insect(x) -> (HasChemicalReceptors(x) & (Antennae(x) | Legs(x) | Foots(x))))"]}
{"id": "eqasc_train_9255", "nl": "insects detect chemicals with their feet", "fol": "", "prediction": ["all x.(Insect(x) -> (DetectsChemicals(x) & WithFeet(x)))"]}
{"id": "eqasc_train_9256", "nl": "Sounds are caused by vibrational energy.", "fol": "", "prediction": ["all x.(Sound(x) -> CausedByVibrationalEnergy(x))"]}
{"id": "eqasc_train_9257", "nl": "Some insects can use their antennae to detect vibrational energy", "fol": "", "prediction": ["exists x.(Insect(x) & CanUseAntennaeToDetectVibrationalEnergy(x))"]}
{"id": "eqasc_train_9258", "nl": "Ants and butterflies have antennae.", "fol": "", "prediction": ["all x.((Ant(x) | Butterfly(x)) -> HasAntennae(x))"]}
{"id": "eqasc_train_9259", "nl": "butterflies can detect sound", "fol": "", "prediction": ["all x.(Butterfly(x) -> CanDetectSound(x))"]}
{"id": "eqasc_train_9260", "nl": "Sporangia produce spores that develop into tiny, heart-shaped gametophytes.", "fol": "", "prediction": ["all x.(Sporangia(x) -> (ProducesSpores(x) & DevelopsIntoTinyHeartShapedGametophytes(x)))"]}
{"id": "eqasc_train_9261", "nl": "Gametophytes have haploid cells.", "fol": "", "prediction": ["all x.(Gametophyte(x) -> HasHaploidCells(x))"]}
{"id": "eqasc_train_9262", "nl": "sporangia produce haploid cells", "fol": "", "prediction": ["all x.(Sporengia(x) -> ProducesHaplodyloidCells(x))"]}
{"id": "eqasc_train_9263", "nl": "Asexual reproduction is by spores produced in stalked sporangia .", "fol": "", "prediction": ["all x y.((AsexualReproduction(x) & Spore(y)) -> ProducedInStormedSporangia(y))"]}
{"id": "eqasc_train_9264", "nl": "Asexual reproduction by spores develop into tiny, heart-shaped gametophytes", "fol": "", "prediction": ["all x y.((AsexualReproduction(x) & Spore(y)) -> DevelopsIntoTinyHeartShapedGametophytes(x))"]}
{"id": "eqasc_train_9265", "nl": "sporangia produce spores that develop into tiny photosynthetics", "fol": "", "prediction": ["all x.(Sporengia(x) -> (ProducesSpores(x) & DevelopsIntoTinyPhotosynthetics(x)))"]}
{"id": "eqasc_train_9266", "nl": "Gametophytes of extant genera are green, photosynthetic,and have a long ribbon shaped thallus.", "fol": "", "prediction": ["all x.((Gametophyte(x) & ExtantGenre(x)) -> (Green(x) & Photosynthetic(x) & LongBridalShapedTthallus(x)))"]}
{"id": "eqasc_train_9267", "nl": "Sporangia produce spores that develop into green, photosynthetic gametophytes", "fol": "", "prediction": ["all x y.((Sporagium(x) & Spore(y)) -> (ProducesSpores(x,y) & DevelopsIntoGreenPhotosyntheticGametophytes(x)))"]}
{"id": "eqasc_train_9268", "nl": "Sporangia produce spores that are haploid", "fol": "", "prediction": ["all x.(Sporagia(x) -> (ProducesSpores(x) & Haploid(x)))"]}
{"id": "eqasc_train_9269", "nl": "Inside each sporangia there are hundreds of spores.", "fol": "", "prediction": ["all x.(Sporangia(x) -> ThereAreSixSpores(x))"]}
{"id": "eqasc_train_9270", "nl": "spores develop into gametophytes", "fol": "", "prediction": ["all x.(Spore(x) -> DevelopsIntoGametophytes(x))"]}
{"id": "eqasc_train_9271", "nl": "Asexual reproduction is by sporangia or conidia.", "fol": "", "prediction": ["all x.(AsexualReproduction(x) -> (BySporangia(x) | ByConidia(x)))"]}
{"id": "eqasc_train_9272", "nl": "During asexual reproduction the spore enclosures produce heart-shaped gametophytes", "fol": "", "prediction": ["all x y.((SporeEnclosure(x) & AsexualReproduction(y)) -> ProducesHeartShapedGametophytes(x,y))"]}
{"id": "eqasc_train_9273", "nl": "Amphibians have a relatively complex circulatory system with a three-chambered heart.", "fol": "", "prediction": ["all x.(Amphibian(x) -> (ComplexCirculatorySystem(x) & ThreeChamberedHeart(x)))"]}
{"id": "eqasc_train_9274", "nl": "Frogs, toads and salamanders have a relatively complex circulatory system with a three-chambered heart.", "fol": "", "prediction": ["all x.((Frog(x) | Toad(x) | Salamander(x)) -> (ComplexCirculatorySystem(x) & ThreeChamberedHeart(x)))"]}
{"id": "eqasc_train_9275", "nl": "Blood is pumped around the body by a heart .", "fol": "", "prediction": ["all x y z.((Blood(x) & Heart(y) & Body(z)) -> PumpedAround(x,y,z))"]}
{"id": "eqasc_train_9276", "nl": "amphibians pump blood in a complex manner", "fol": "", "prediction": ["all x.(Amphibian(x) -> PumpsBloodInComplexManner(x))"]}
{"id": "eqasc_train_9277", "nl": "frogs have a relatively complex circulatory system with a three-chambered heart", "fol": "", "prediction": ["all x.(Frog(x) -> (ComplexCirculatorySystem(x) & ThreeChamberedHeart(x)))"]}
{"id": "eqasc_train_9278", "nl": "Frogs have a three-chambered heart, consisting of two atria and a single ventricle.", "fol": "", "prediction": ["all x.(Frog(x) -> (ThreeChamberedHeart(x) & TwoAtria(x) & SingleVentricle(x)))"]}
{"id": "eqasc_train_9279", "nl": "Frogs are amphibians", "fol": "", "prediction": ["all x.(Frog(x) -> Amphibian(x))"]}
{"id": "eqasc_train_9280", "nl": "Frogs have a three-chambered heart.", "fol": "", "prediction": ["all x.(Frog(x) -> ThreeChamberedHeart(x))"]}
{"id": "eqasc_train_9281", "nl": "Salamanders have a relatively complex circulatory system with a three-chambered heart.", "fol": "", "prediction": ["all x.(Salamander(x) -> (ComplexCirculatorySystem(x) & ThreeChamberedHeart(x)))"]}
{"id": "eqasc_train_9282", "nl": "Toads have a relatively complex circulatory system with a three chambered heart.", "fol": "", "prediction": ["all x.(Toad(x) -> (ComplexCirculatorySystem(x) & ThreeChamberedHeart(x)))"]}
{"id": "eqasc_train_9283", "nl": "Frogs have a relatively complex circulatory system with a three-chambered heart.", "fol": "", "prediction": ["all x.(Frog(x) -> (ComplexCirculatorySystem(x) & ThreeChamberedHeart(x)))"]}
{"id": "eqasc_train_9284", "nl": "dropping an object into water causes vibrations in the water", "fol": "", "prediction": ["all x y.((Object(x) & DroppedIntoWater(x)) -> CausesVibrationsInWater(x,y))"]}
{"id": "eqasc_train_9285", "nl": "dropping an object into water causes frequency waves in the water", "fol": "", "prediction": ["all x y.((Object(x) & DroppedIntoWater(x)) -> CausesFrequencyWavesInWater(x,y))"]}
{"id": "eqasc_train_9286", "nl": "Lateral line systems, usually found in fish, detect vibrations in the water.", "fol": "", "prediction": ["all x.((LatalLineSystem(x) & FoundInFish(x)) -> DetectsVibrationsInWater(x))"]}
{"id": "eqasc_train_9287", "nl": "dropping an object in the water disturbs fish", "fol": "", "prediction": ["all x y.((Object(x) & DroppingInWater(x,y)) -> DisturbsFish(y))"]}
{"id": "eqasc_train_9288", "nl": "Sound vibrations can be compared to pond ripples.", "fol": "", "prediction": ["all x y.((SoundVibration(x) & PondRipple(y)) -> Comparable(x,y))"]}
{"id": "eqasc_train_9289", "nl": "dropping an object into water causes pond ripples", "fol": "", "prediction": ["all x y.((Object(x) & DroppedIntoWater(x)) -> CausesRipples(x,y))"]}
{"id": "eqasc_train_9290", "nl": "Lake water visibly disturbed.", "fol": "", "prediction": ["all x.(LakeWater(x) -> VisiblyDisturbed(x))"]}
{"id": "eqasc_train_9291", "nl": "Dropping an object into lake causes vibrations.", "fol": "", "prediction": ["all x y.((Object(x) & Lake(y) & DropsInto(x,y)) -> CausesVibrations(x))"]}
{"id": "eqasc_train_9292", "nl": "dropping an object into liquid causes vibrations in the liquid", "fol": "", "prediction": ["all x y.((Object(x) & DroppedIntoLiquid(x)) -> CausesVibrationsInLiquid(x,y))"]}
{"id": "eqasc_train_9293", "nl": "Fish are attracted by the vibration of the built-in action of the lure.", "fol": "", "prediction": ["all x y.((Fish(x) & Lure(y)) -> AttractedByVibration(x,y))"]}
{"id": "eqasc_train_9294", "nl": "Dropping an object into water attracts fish.", "fol": "", "prediction": ["all x y.((Object(x) & Water(y) & DropsInto(x,y)) -> AttractsFish(x))"]}
{"id": "eqasc_train_9295", "nl": "when an animal moves , chemical energy is converted to mechanical energy", "fol": "", "prediction": ["all x y z.((Animal(x) & ChemicalEnergy(y) & MechanicalEnergy(z)) -> Moves(x,y,z))"]}
{"id": "eqasc_train_9296", "nl": "Mechanical energy puts things in motion.", "fol": "", "prediction": ["all x.(MechanicalEnergy(x) -> PutsInMotion(x))"]}
{"id": "eqasc_train_9297", "nl": "when an animal moves, chemical energy is converted to put things in motion. ", "fol": "", "prediction": ["all x y.((Animal(x) & Moves(x)) -> ChemicalEnergyConverted(x))"]}
{"id": "eqasc_train_9298", "nl": "when a human moves, chemical energy is converted to mechanical energy", "fol": "", "prediction": ["all x y.((Human(x) & Moves(x)) -> ConvertedToMechanicalEnergy(y))"]}
{"id": "eqasc_train_9299", "nl": "Kinetic energy is energy associated with motion.", "fol": "", "prediction": ["all x.(KineticEnergy(x) -> EnergyAssociatedWithMotion(x))"]}
{"id": "eqasc_train_9300", "nl": "All animals move. ", "fol": "", "prediction": ["all x.(Animal(x) -> Moves(x))"]}
{"id": "eqasc_train_9301", "nl": "Digestive processes include mechanical, chemical and enzymatic mechanisms.", "fol": "", "prediction": ["all x.(DigestiveProcess(x) -> (MechanicalMechanisms(x) & ChemicalMechanisms(x) & EnzymaticMechanisms(x)))"]}
{"id": "eqasc_train_9302", "nl": "digestion makes it possible for an animal to move", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> DigestionMoves(x,y))"]}
{"id": "eqasc_train_9303", "nl": "Manatees are slow moving animals.", "fol": "", "prediction": ["all x.(Manatee(x) -> SlowMovingAnimal(x))"]}
{"id": "eqasc_train_9304", "nl": "Manatees convert chemical energy to mechanical energy.", "fol": "", "prediction": ["all x.(Manatee(x) -> ConvertsChemicalEnergyToMechanicalEnergy(x))"]}
{"id": "eqasc_train_9305", "nl": "Bats are animals that fly around at night.", "fol": "", "prediction": ["all x.(Bat(x) -> (Animal(x) & FliesAtNight(x)))"]}
{"id": "eqasc_train_9306", "nl": "when bats fly,chemical energy is converted to mechanical energy", "fol": "", "prediction": ["all x y.((Bat(x) & Fly(x)) -> ConvertsEnergyToMechanicalEnergy(y))"]}
{"id": "eqasc_train_9307", "nl": "when dogs move, chemical energy is converted to mechanical energy", "fol": "", "prediction": ["all x y.((Dog(x) & Moves(x)) -> ConvertsChemicalEnergyToMechanicalEnergy(y))"]}
{"id": "eqasc_train_9308", "nl": "Mechanical energy can be changed to electrical energy.", "fol": "", "prediction": ["all x.(MechanicalEnergy(x) -> ElectricalEnergy(x))"]}
{"id": "eqasc_train_9309", "nl": "an animal's movement can be changed to electrical energy", "fol": "", "prediction": ["all x.(Animal(x) -> CanChangeMovementToElectricalEnergy(x))"]}
{"id": "eqasc_train_9310", "nl": "when a cow moves, chemical energy is converted to mechanical energy", "fol": "", "prediction": ["all x y.((Cow(x) & Cow(y)) -> (ChemicalEnergyConvertedToMechanicalEnergy(x,y)))"]}
{"id": "eqasc_train_9311", "nl": "Kinetic energy in starch is converted into chemical energy in the muscles.", "fol": "", "prediction": ["all x y.((Starch(x) & KineticEnergy(y)) -> ConvertedToChemicalEnergy(x,y))"]}
{"id": "eqasc_train_9312", "nl": "when an animal moves , kinetic energy in starch  is converted to mechanical energy", "fol": "", "prediction": ["all x y z.((Animal(x) & Moves(x) & KineticEnergyInStarch(y) & MechanicalEnergy(z)) -> ConvertedTo(y,z))"]}
{"id": "eqasc_train_9313", "nl": "When chemical bonds are broken by animals the energy is released in the form of work and heat.", "fol": "", "prediction": ["all x y.((ChemicalBond(x) & BrokenByAnimals(x)) -> (EnergyRelease(y) & Work(y) & Heat(y)))"]}
{"id": "eqasc_train_9314", "nl": "Chemical bonds are converted to mechanical energy when a creature moves", "fol": "", "prediction": ["all x y.((ChemicalBond(x) & MechanicalEnergy(y) & Creature(z)) -> ConvertedTo(x,y,z))"]}
{"id": "eqasc_train_9315", "nl": "Adult echinoderms have radial symmetry.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> HasRadialSymmetry(x))"]}
{"id": "eqasc_train_9316", "nl": "All animals with radial symmetry live in water.", "fol": "", "prediction": ["all x.((Animal(x) & RadialSymmetry(x)) -> LivesInWater(x))"]}
{"id": "eqasc_train_9317", "nl": "adult echinoderms live in water", "fol": "", "prediction": ["all x.(Echinoderm(x) -> LivesInWater(x))"]}
{"id": "eqasc_train_9318", "nl": "adult starfish have radial symmetry", "fol": "", "prediction": ["all x.((AdultStarfish(x) & RadialSymmetry(x)) -> HasRadialSymmetry(x))"]}
{"id": "eqasc_train_9319", "nl": "Echinoderms are spiny skinned animals found only in marine environments.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> (SpinySkinnedAnimal(x) & FoundInMarineEnvironments(x)))"]}
{"id": "eqasc_train_9320", "nl": "Adult spiny skinned animals found only in marine environments have radial symmetry", "fol": "", "prediction": ["all x.((AdultSpinySkinnedAnimal(x) & FoundInMarineEnvironments(x)) -> RadialSymmetry(x))"]}
{"id": "eqasc_train_9321", "nl": "Starfish have radial symmetry", "fol": "", "prediction": ["all x.(Starfish(x) -> HasRadialSymmetry(x))"]}
{"id": "eqasc_train_9322", "nl": "Animals with radial symmetry lack an anterior and posterior end.", "fol": "", "prediction": ["all x.((Animal(x) & RadialSymmetry(x)) -> (LacksAnteriorEnd(x) & LacksPosteriorEnd(x)))"]}
{"id": "eqasc_train_9323", "nl": "Adult echinoderms lack an anterior and posterior end.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> (LacksAnteriorEnd(x) & LacksPosteriorEnd(x)))"]}
{"id": "eqasc_train_9324", "nl": "adult sea urchins have radial symmetry", "fol": "", "prediction": ["all x.((AdultSeaUrchin(x) & RadialSymmetry(x)) -> Has(x,AdultSeaUrchin))"]}
{"id": "eqasc_train_9325", "nl": "All adult echinoderms live in water.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> LivesInWater(x))"]}
{"id": "eqasc_train_9326", "nl": "sea urchins have radial symmetry", "fol": "", "prediction": ["all x.(SeaUrchin(x) -> HasRadialSymmetry(x))"]}
{"id": "eqasc_train_9327", "nl": "Sea urchins are echinoderms, in the same family as starfish.", "fol": "", "prediction": ["all x.(SeaUrchin(x) -> (Echinoderm(x) & Starfish(x)))"]}
{"id": "eqasc_train_9328", "nl": "Adult sea urchins have radial symmetry.", "fol": "", "prediction": ["all x.(AdultSeaUrchin(x) -> HasRadialSymmetry(x))"]}
{"id": "eqasc_train_9329", "nl": "Adult starfish have radial symmetry.", "fol": "", "prediction": ["all x.(AdultStarfish(x) -> HasRadialSymmetry(x))"]}
{"id": "eqasc_train_9330", "nl": "deuterostomes have radial symmetry", "fol": "", "prediction": ["all x.(Deuterostome(x) -> HasRadialSymmetry(x))"]}
{"id": "eqasc_train_9331", "nl": "when a plant grows , the size of the leaves of that plant may increase", "fol": "", "prediction": ["all x y z.((Plant(x) & Grows(x) & LeafSize(y) & Plant(z)) -> (SizeOfLeaves(y,z) & MayIncrease(z,y)))"]}
{"id": "eqasc_train_9332", "nl": "Leaves help carry on photosynthesis.", "fol": "", "prediction": ["all x.(Leaves(x) -> HelpsCarryOnPhotosynthesis(x))"]}
{"id": "eqasc_train_9333", "nl": "as a plant grows, photosynthesis increases", "fol": "", "prediction": ["all x y z.((Plant(x) & Grows(x) & Photosynthesis(y) & Grows(z)) -> Increases(y,z))"]}
{"id": "eqasc_train_9334", "nl": "Light makes plants grow tall.", "fol": "", "prediction": ["all x.(Light(x) -> MakesPlantsGrowTall(x))"]}
{"id": "eqasc_train_9335", "nl": "Light makes the leaves on plants increase", "fol": "", "prediction": ["all x y.((Light(x) & Plant(y)) -> IncreasesLeaves(x,y))"]}
{"id": "eqasc_train_9336", "nl": "when a perennial grows, the size of its leaves may increase", "fol": "", "prediction": ["all x y.((Perennial(x) & Grows(x)) -> (SizeOfLeaves(y) & MayIncrease(y)))"]}
{"id": "eqasc_train_9337", "nl": "All oaks are plants.", "fol": "", "prediction": ["all x.(Oak(x) -> Plant(x))"]}
{"id": "eqasc_train_9338", "nl": "when an oak grows , the size of the leaves of that oak may increase", "fol": "", "prediction": ["all x y z.((Oak(x) & Grows(x) & Oak(y) & LeafSize(z)) -> (SizeOfLeaves(y,z) & MayIncrease(y,z)))"]}
{"id": "eqasc_train_9339", "nl": "And as they grow, the size of their food is increased.", "fol": "", "prediction": ["all x.((Growth(x) & FoodSizeIncreased(x)) -> Grows(x))"]}
{"id": "eqasc_train_9340", "nl": "Leaf size of plants increase as the size or amount of their food increases.", "fol": "", "prediction": ["all x.((Plant(x) & (Size(x) | FoodAmount(x))) -> LeafSizeIncrease(x))"]}
{"id": "eqasc_train_9341", "nl": "Leaves Leaves are the main photosynthetic organs of a plant.", "fol": "", "prediction": ["all x y.((Leaves(x) & Plant(y)) -> (PhotosyntheticOrgan(x,y) | PhotosyntheticOrgan(x,y)))"]}
{"id": "eqasc_train_9342", "nl": "When a plant grows, the main photosynthetic organs do as well.", "fol": "", "prediction": ["all x.((Plant(x) & Grows(x)) -> PhotosyntheticOrgans(x))"]}
{"id": "eqasc_train_9343", "nl": "Leaves are the sites of photosynthesis.", "fol": "", "prediction": ["all x.(Leaves(x) -> PhotosynthesisSite(x))"]}
{"id": "eqasc_train_9344", "nl": "when a plant grows , photosynthesis may increase", "fol": "", "prediction": ["all x y z.((Plant(x) & Grows(x) & Photosynthesis(y) & Grows(z)) -> Increases(y,z))"]}
{"id": "eqasc_train_9345", "nl": "when a fern grows, its size of leaves may increase", "fol": "", "prediction": ["all x y.((Fern(x) & Grows(x)) -> (SizeOfLeaves(y) & MayIncrease(y)))"]}
{"id": "eqasc_train_9346", "nl": "Leaves Are the primary photosynthetic organs of a plant.", "fol": "", "prediction": ["all x.(Leaves(x) -> PrimaryPhotosyntheticOrgan(x))"]}
{"id": "eqasc_train_9347", "nl": "when a plant grows , the size of  photosynthetic organs of that plant may increase", "fol": "", "prediction": ["all x y z.((Plant(x) & Grows(x) & PhotosyntheticOrgans(y) & Plant(z)) -> (SizeIncreases(y,z) & IncreasesSize(z,y)))"]}
{"id": "eqasc_train_9348", "nl": "some light bulbs convert electricity into light and heat energy", "fol": "", "prediction": ["exists x.(LightBulb(x) & ConvertsElectricityToLightAndHeatEnergy(x))"]}
{"id": "eqasc_train_9349", "nl": "Household light bulbs are evacuated glass enclosures with wires leading to a tungsten filament.", "fol": "", "prediction": ["all x.(HouseholdLightBulb(x) -> (EvacuatedGlassEnclosure(x) & HasWires(x) & LeadsToTungstenFilm(x)))"]}
{"id": "eqasc_train_9350", "nl": "Some glass enclosures convert electricity into light and heat energy", "fol": "", "prediction": ["exists x.(GlassEnclosure(x) & ConvertsElectricityToLightAndHeatEnergy(x))"]}
{"id": "eqasc_train_9351", "nl": "Since the purpose of a light bulb is to generate light, the heat is wasted energy.", "fol": "", "prediction": ["all x.((LightBulb(x) & GeneratesLight(x)) -> WastedEnergy(x))"]}
{"id": "eqasc_train_9352", "nl": "The heat energy generated by the bulbs gets wasted.", "fol": "", "prediction": ["all x.((Bulb(x) & HeatEnergy(x)) -> Wasted(x))"]}
{"id": "eqasc_train_9353", "nl": "Halogen light bulbs generate heat.", "fol": "", "prediction": ["all x.(HalogenLightBulb(x) -> GeneratesHeat(x))"]}
{"id": "eqasc_train_9354", "nl": "Halogen bulbs convert electricity into heat", "fol": "", "prediction": ["all x.(HalogenBulb(x) -> ConvertsElectricityToHeat(x))"]}
{"id": "eqasc_train_9355", "nl": "some light bulbs convert other energy into light and heat energy", "fol": "", "prediction": ["exists x.(LightBulb(x) & ConvertsEnergyToLightAndHeatEnergy(x))"]}
{"id": "eqasc_train_9356", "nl": "Light Bulbs Incandescent bulbs are available at the front desks.", "fol": "", "prediction": ["all x.(LightBulbs(x) -> (IncandescentBulbsAtFrontDesk(x) & AvailableAtFrontDesk(x)))"]}
{"id": "eqasc_train_9357", "nl": "Incandescents convert electricity into light and heat energy", "fol": "", "prediction": ["all x.(Incandescent(x) -> (ConvertsElectricityToLightAndHeatEnergy(x) & ConvertsElectricityToHeatAndLightEnergy(x)))"]}
{"id": "eqasc_train_9358", "nl": "Electricity requires the movement of electrical charges.", "fol": "", "prediction": ["all x.(Electricity(x) -> RequiresMovementOfElectricalCharges(x))"]}
{"id": "eqasc_train_9359", "nl": "Some light bulbs process the movement of charges into light and heat energy.", "fol": "", "prediction": ["exists x.(LightBulb(x) & ProcessesChargeMovement(x))"]}
{"id": "eqasc_train_9360", "nl": "Conventional light bulbs generate light by heating a filament.", "fol": "", "prediction": ["all x.(ConventionalLightBulb(x) -> (GeneratesLight(x) & HeatsFilm(x)))"]}
{"id": "eqasc_train_9361", "nl": "Filaments use heat energy to illuminate", "fol": "", "prediction": ["all x.(Filament(x) -> UsesHeatEnergyToIlluminate(x))"]}
{"id": "eqasc_train_9362", "nl": "CFLs waste much less electrical energy generating unnecessary heat.", "fol": "", "prediction": ["all x.(CFL(x) -> (WastesLittleElectricalEnergy(x) & GeneratesUnnecessaryHeat(x)))"]}
{"id": "eqasc_train_9363", "nl": "Some light bulbs waste much less energy generating unecessary heat.", "fol": "", "prediction": ["exists x.(LightBulb(x) & WastesLittleEnergy(x) & GeneratesUnnecessaryHeat(x))"]}
{"id": "eqasc_train_9364", "nl": "Heat energy is the amount of energy in a substance.", "fol": "", "prediction": ["all x.(HeatEnergy(x) -> EnergyInSubstance(x))"]}
{"id": "eqasc_train_9365", "nl": "some light bulbs convert electricity into light and the amount of energy in a substance", "fol": "", "prediction": ["exists x.(LightBulb(x) & ConvertsElectricityToLight(x) & EnergyInSubstance(x))"]}
{"id": "eqasc_train_9366", "nl": "Light source is an ultra-bright, unbreakable LED Bulb.", "fol": "", "prediction": ["all x.(LightSource(x) -> (UltraBright(x) & UnbreakableLEDBulb(x)))"]}
{"id": "eqasc_train_9367", "nl": "LEDs convert electricity into light and heat energy", "fol": "", "prediction": ["all x.(LED(x) -> (ConvertsElectricityToLightAndHeatEnergy(x) & ConvertsElectricityToHeatAndLightEnergy(x)))"]}
{"id": "eqasc_train_9368", "nl": "Aging is associated with the death of cells.", "fol": "", "prediction": ["all x.(Aging(x) -> AssociatesWithDeathOfCells(x))"]}
{"id": "eqasc_train_9369", "nl": "Cell death is natural.", "fol": "", "prediction": ["all x.(CellDeath(x) -> Natural(x))"]}
{"id": "eqasc_train_9370", "nl": "aging is natural", "fol": "", "prediction": ["all x.(Aging(x) -> Natural(x))"]}
{"id": "eqasc_train_9371", "nl": "Smoking accelerates the aging process.", "fol": "", "prediction": ["all x.(Smoking(x) -> AcceleratesAgingProcess(x))"]}
{"id": "eqasc_train_9372", "nl": "smoking accelerates the death of cells", "fol": "", "prediction": ["all x y.((Smoking(x) & Cell(y)) -> AcceleratesDeath(x,y))"]}
{"id": "eqasc_train_9373", "nl": "When telomeres become too short, the cell dies.", "fol": "", "prediction": ["all x.((Telomere(x) & TooShort(x)) -> CellDies(x))"]}
{"id": "eqasc_train_9374", "nl": "aging is associated with short telomeres", "fol": "", "prediction": ["all x.(Aging(x) -> ShortTelomeres(x))"]}
{"id": "eqasc_train_9375", "nl": "Fruit browning is believed to be a process of early cell aging and death.", "fol": "", "prediction": ["all x.(FruitBrowning(x) -> (EarlyCellAging(x) & EarlyCellDeath(x)))"]}
{"id": "eqasc_train_9376", "nl": "Fruit browning is associated with aging", "fol": "", "prediction": ["all x.(FruitBrowning(x) -> AssociatedWithAging(x))"]}
{"id": "eqasc_train_9377", "nl": "Apoptosis means cell death.", "fol": "", "prediction": ["all x.(Apoptosis(x) -> CellDeath(x))"]}
{"id": "eqasc_train_9378", "nl": "Aging is associated with apoptosis", "fol": "", "prediction": ["all x.(Aging(x) -> AssociatedWithApoptosis(x))"]}
{"id": "eqasc_train_9379", "nl": "Apoptosis is a natural part of aging.", "fol": "", "prediction": ["all x.(Apoptosis(x) -> NaturalPartOfAging(x))"]}
{"id": "eqasc_train_9380", "nl": "If cell death occurs it is called infarction .", "fol": "", "prediction": ["all x.((CellDeath(x) & Occurs(x)) -> Infarction(x))"]}
{"id": "eqasc_train_9381", "nl": "aging is associated with infarction", "fol": "", "prediction": ["all x.(Aging(x) -> Infarction(x))"]}
{"id": "eqasc_train_9382", "nl": "If the waste accumulates, the cell ages and dies.", "fol": "", "prediction": ["all x.((WasteAccumulates(x) & CellAges(x) & CellDies(x)) -> Aggregates(x))"]}
{"id": "eqasc_train_9383", "nl": "waste accumulates and cells die", "fol": "", "prediction": ["all x y z.((Waste(x) & Cell(y) & Cell(z)) -> (Accumulates(x,y) & Dies(y,z)))"]}
{"id": "eqasc_train_9384", "nl": "Telomeres degrade as the cells divide and their shortening causes cell death.", "fol": "", "prediction": ["all x.(Telomere(x) -> (Degrades(x) & CellsDivision(x) & ShorteningCausesCellDeath(x)))"]}
{"id": "eqasc_train_9385", "nl": "Aging is associated with degrading telomeres.", "fol": "", "prediction": ["all x.(Aging(x) -> DegradingTelomeres(x))"]}
{"id": "eqasc_train_9386", "nl": "Old cells have short telomeres.", "fol": "", "prediction": ["all x.(OldCell(x) -> HasShortTelomeres(x))"]}
{"id": "eqasc_train_9387", "nl": "a switch is used to start the flow of current in an electrical circuit", "fol": "", "prediction": ["all x y.((Switch(x) & ElectricalCircuit(y)) -> StartsFlowOfCurrent(x,y))"]}
{"id": "eqasc_train_9388", "nl": "Electric power is ready to use at the flip of a switch.", "fol": "", "prediction": ["all x.(ElectricPower(x) -> ReadyToUseAtFlipOfSwitch(x))"]}
{"id": "eqasc_train_9389", "nl": "current flow gives electric power", "fol": "", "prediction": ["all x.(CurrentFlow(x) -> GivesElectricPower(x))"]}
{"id": "eqasc_train_9390", "nl": "With switch closed, electricity flows through wires, switch and bulb, to light up the bulb.", "fol": "", "prediction": ["all x y z.((SwitchClosed(x) & Electricity(y) & Wires(z) & Switch(z)) -> (FlowsThrough(y,z) & LightsUpBulb(y,z)))"]}
{"id": "eqasc_train_9391", "nl": "The flow of electrical current powers a light bulb.", "fol": "", "prediction": ["all x y.((FlowOfElectricalCurrent(x) & LightBulb(y)) -> Powers(x,y))"]}
{"id": "eqasc_train_9392", "nl": "If the switch is open, electricity flows, and the light is on.", "fol": "", "prediction": ["all x.((SwitchOpen(x) & ElectricityFlows(x) & LightOn(x)) -> Open(x))"]}
{"id": "eqasc_train_9393", "nl": "A light turns on when the switch is open so the current can flow", "fol": "", "prediction": ["all x y.((Light(x) & SwitchOpen(y) & CurrentFlow(x)) -> TurnsOn(x))"]}
{"id": "eqasc_train_9394", "nl": "A switch is used to start the flow of electric charge in an electrical circuit.", "fol": "", "prediction": ["all x y.((Switch(x) & ElectricalCircuit(y)) -> StartsFlowOfElectricCharge(x,y))"]}
{"id": "eqasc_train_9395", "nl": "Electrical circuits have fuses that blow.", "fol": "", "prediction": ["all x.(ElectricalCircuit(x) -> HasFuses(x))"]}
{"id": "eqasc_train_9396", "nl": "a switch is used to start the flow of current in an object that has fuses that blow. ", "fol": "", "prediction": ["all x y.((Switch(x) & Object(y) & HasFuses(y)) -> StartsFlowOfCurrent(x,y))"]}
{"id": "eqasc_train_9397", "nl": "Electrical power including lights etc can then be switched on.", "fol": "", "prediction": ["all x.((ElectricalPower(x) & Lights(x)) -> CanBeSwitchedOn(x))"]}
{"id": "eqasc_train_9398", "nl": "lights are on when there is flow of current in an electrical circuit", "fol": "", "prediction": ["all x y.((Light(x) & ElectricalCircuit(y) & CurrentFlow(x,y)) -> On(x))"]}
{"id": "eqasc_train_9399", "nl": "Each switch is moved up for on, and down for off.", "fol": "", "prediction": ["all x.(Switch(x) -> (MovedUpForOn(x) & MovedDownForOff(x)))"]}
{"id": "eqasc_train_9400", "nl": "the flow of current in an electrical circuit is moved up and down ", "fol": "", "prediction": ["all x y.((ElectricalCircuit(x) & ElectricalCircuit(y)) -> (FlowOfCurrentMovedUpAndDown(x,y)))"]}
{"id": "eqasc_train_9401", "nl": "Electricity flows when a circuit is complete.", "fol": "", "prediction": ["all x.((Circuit(x) & Complete(x)) -> ElectricityFlows(x))"]}
{"id": "eqasc_train_9402", "nl": "A switch is used to complete an electrical circuit", "fol": "", "prediction": ["all x y.((Switch(x) & ElectricalCircuit(y)) -> Completes(x,y))"]}
{"id": "eqasc_train_9403", "nl": "An electrical circuit is a circuitous path of wire and devices.", "fol": "", "prediction": ["all x.(ElectricalCircuit(x) -> (CircuitousPath(x) & Wire(x) & Devices(x)))"]}
{"id": "eqasc_train_9404", "nl": "a switch is used to start the flow of current in a path of devices", "fol": "", "prediction": ["all x y z.((Switch(x) & CurrentFlow(y) & DevicePath(z)) -> StartsFlowInPathOfDevices(x,y,z))"]}
{"id": "eqasc_train_9405", "nl": "Some systems have an additional connection for a second doorbell switch.", "fol": "", "prediction": ["exists x.(System(x) & HasAdditionalConnection(x))"]}
{"id": "eqasc_train_9406", "nl": "a doorbell is used to start the flow of current in an electrical circuit", "fol": "", "prediction": ["all x y.((Doorbell(x) & ElectricalCircuit(y)) -> StartsFlowOfCurrent(x,y))"]}
{"id": "eqasc_train_9407", "nl": "An electrical switch directs current to one of several wires.", "fol": "", "prediction": ["all x y.((ElectricalSwitch(x) & Wire(y)) -> DirectsCurrentTo(x,y))"]}
{"id": "eqasc_train_9408", "nl": "a switch directs current", "fol": "", "prediction": ["all x.(Switch(x) -> DirectsCurrent(x))"]}
{"id": "eqasc_train_9409", "nl": "cutting down trees has a negative impact on an ecosystem", "fol": "", "prediction": ["all x y.((Tree(x) & Ecosystem(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_9410", "nl": "Cutting down trees has a negative impact on the homes of animals  in natural habitats.", "fol": "", "prediction": ["all x y.((CuttingDownTrees(x) & Animal(y) & NaturalHabitat(z)) -> NegativeImpactOnHomes(x,y,z))"]}
{"id": "eqasc_train_9411", "nl": "Logging has a negative impact on an ecosystem", "fol": "", "prediction": ["all x y.((Logging(x) & Ecosystem(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_9412", "nl": "An example is the uncontrolled cutting of trees for fuel.", "fol": "", "prediction": ["all x.((Tree(x) & UncontrolledCutting(x)) -> FuelFuel(x))"]}
{"id": "eqasc_train_9413", "nl": "uncontrolled use of trees for fuel has a negative impact on an ecosystem", "fol": "", "prediction": ["all x y.((UncontrolledUseOfTreesForFuel(x) & Ecosystem(y)) -> NegativeImpactOn(x,y))"]}
{"id": "eqasc_train_9414", "nl": "Deforestation in the rainforest has a negative impact on an ecosystem.", "fol": "", "prediction": ["all x y.((Rainforest(x) & Deforestation(y)) -> NegativeImpactOnEcosystem(y))"]}
{"id": "eqasc_train_9415", "nl": "Cutting down oaks has a negative impact on an ecosystem", "fol": "", "prediction": ["all x y.((CuttingDownOaks(x) & Ecosystem(y)) -> NegativeImpactOn(x,y))"]}
{"id": "eqasc_train_9416", "nl": "And, trees provide habitat for birds and animals.", "fol": "", "prediction": ["all x.(Tree(x) -> (ProvidesHabitat(x) & ForBirds(x) & ForAnimals(x)))"]}
{"id": "eqasc_train_9417", "nl": "Removing habitats has a negative impact on an ecosystem?", "fol": "", "prediction": ["all x y.((Habitat(x) & Ecosystem(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_9418", "nl": "Ecosystems are living communities.", "fol": "", "prediction": ["all x.(Ecosystem(x) -> LivingCommunity(x))"]}
{"id": "eqasc_train_9419", "nl": "Cutting down trees has a negative impact on living communities", "fol": "", "prediction": ["all x y.((CuttingDownTrees(x) & LivingCommunity(y)) -> NegativeImpactOn(x,y))"]}
{"id": "eqasc_train_9420", "nl": "Plants include trees.", "fol": "", "prediction": ["all x.(Plant(x) -> IncludesTree(x))"]}
{"id": "eqasc_train_9421", "nl": "Cutting down plants has a negative impact on the ecosystem.", "fol": "", "prediction": ["all x.(CuttingDownPlants(x) -> NegativeImpactOnEcosystem(x))"]}
{"id": "eqasc_train_9422", "nl": "When ecosystems are healthy, humankind is healthy.", "fol": "", "prediction": ["all x.((Ecosystem(x) & Healthy(x)) -> Healthy(x))"]}
{"id": "eqasc_train_9423", "nl": "cutting down trees has a negative impact on the health of humankind", "fol": "", "prediction": ["all x y.((Tree(x) & Humankind(y)) -> NegativeImpactOnHealth(x,y))"]}
{"id": "eqasc_train_9424", "nl": "An ecosystem can be in a desert, a tropical jungle, an ocean or a pond.", "fol": "", "prediction": ["all x.(Ecosystem(x) -> (Desert(x) | TropicalJungle(x) | Ocean(x) | Pond(x)))"]}
{"id": "eqasc_train_9425", "nl": "cutting down trees has a negative impact on a jungle.", "fol": "", "prediction": ["all x y.((CutteringDeadTrees(x) & Jungle(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_9426", "nl": "Trees are cut down in the forest and are then sent to a paper mill.", "fol": "", "prediction": ["all x y.((Tree(x) & Forest(y)) -> (CutDownIn(x,y) & SentToPaperMill(x)))"]}
{"id": "eqasc_train_9427", "nl": "products from a paper mill can have a negative impact on an ecosystem", "fol": "", "prediction": ["all x y.((PaperMill(x) & Product(y)) -> NegativeImpactOnEcosystem(y))"]}
{"id": "eqasc_train_9428", "nl": "Loggers have been careless in where they cut down trees.", "fol": "", "prediction": ["all x.(Logger(x) -> CarelessInCuttingDownTrees(x))"]}
{"id": "eqasc_train_9429", "nl": "loggers have a negative impact on an ecosystem", "fol": "", "prediction": ["all x y.((Logger(x) & Ecosystem(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_9430", "nl": "Oak trees are so strong.", "fol": "", "prediction": ["all x.(OakTree(x) -> Strong(x))"]}
{"id": "eqasc_train_9431", "nl": "cutting down oaks has a negative impact on an ecosystem", "fol": "", "prediction": ["all x y.((CuttingDownOaks(x) & Ecosystem(y)) -> NegativeImpactOn(x,y))"]}
{"id": "eqasc_train_9432", "nl": "If trees are cut or burned, the carbon is released back into the atmosphere.", "fol": "", "prediction": ["all x.((Tree(x) & (Cut(x) | Burnt(x))) -> CarbonRelease(x))"]}
{"id": "eqasc_train_9433", "nl": "Releasing carbon into the atmosphere has a negative impact on an ecosystem", "fol": "", "prediction": ["all x y.((ReleasingCarbon(x) & Atmosphere(y)) -> NegativeImpactOnEcosystem(x,y))"]}
{"id": "eqasc_train_9434", "nl": "Black spruce is the dominant tree species.", "fol": "", "prediction": ["all x.(BlackSpruce(x) -> DominantTreeSpecies(x))"]}
{"id": "eqasc_train_9435", "nl": "cutting down black spruces has a negative impact on an ecosystem", "fol": "", "prediction": ["all x y.((CuttingDownBlackSpruces(x) & Ecosystem(y)) -> NegativeImpactOn(x,y))"]}
{"id": "eqasc_train_9436", "nl": "Plants live just about everywhere on Earth.", "fol": "", "prediction": ["all x.(Plant(x) -> LivesOnEarth(x))"]}
{"id": "eqasc_train_9437", "nl": "Photosynthesis can be found just about everywhere on Earth", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> FoundOnEarth(x))"]}
{"id": "eqasc_train_9438", "nl": "Big Trees or Little Flowers Plants are everywhere.", "fol": "", "prediction": ["all x.((BigTree(x) | LittleFlowersPlant(x)) -> (OfAll y.((BigTree(y) & Where(y)) | Where(y))))"]}
{"id": "eqasc_train_9439", "nl": "Trees and flowers live just about everywhere ", "fol": "", "prediction": ["all x y.((Tree(x) | Flower(y)) -> LivesAbout(x,y))"]}
{"id": "eqasc_train_9440", "nl": "Most plants are producers.", "fol": "", "prediction": ["all x.(Plant(x) -> Producer(x))"]}
{"id": "eqasc_train_9441", "nl": "producers live just about everywhere on Earth", "fol": "", "prediction": ["all x y.((Producer(x) & Producer(y)) -> LivesJustAboutEverywhereOnEarth(x,y))"]}
{"id": "eqasc_train_9442", "nl": "Air is everywhere in the earth's atmosphere.", "fol": "", "prediction": ["all x.(Air(x) -> InEarthsAtmosphere(x))"]}
{"id": "eqasc_train_9443", "nl": "Plants live just about everywhere within the atmosphere.", "fol": "", "prediction": ["all x.(Plant(x) -> LivesInAtmosphere(x))"]}
{"id": "eqasc_train_9444", "nl": "Epiphytes are plants that live on other plants.", "fol": "", "prediction": ["all x.(Epiphyte(x) -> (Plant(x) & LivesOnPlant(x)))"]}
{"id": "eqasc_train_9445", "nl": "epiphytes live everywhere on earth", "fol": "", "prediction": ["all x.(Epiphyt(x) -> LivesOnEarth(x))"]}
{"id": "eqasc_train_9446", "nl": "On earth, plants proved to be innovative and adaptable.", "fol": "", "prediction": ["all x.(Plant(x) -> (Innovative(x) & Adaptable(x)))"]}
{"id": "eqasc_train_9447", "nl": "vegetative live just about everywhere on earth and are innovative and adaptive", "fol": "", "prediction": ["all x.(VegetativeLives(x) -> (Innovative(x) & Adaptive(x)))"]}
{"id": "eqasc_train_9448", "nl": "plants live just about everywhere on our planet", "fol": "", "prediction": ["all x.(Plant(x) -> LivesOnPlanet(x))"]}
{"id": "eqasc_train_9449", "nl": "Snakes live almost everywhere on earth.", "fol": "", "prediction": ["all x.(Snake(x) -> LivesAlmostEverywhereOnEarth(x))"]}
{"id": "eqasc_train_9450", "nl": "Plants live just about everywhere snakes do.", "fol": "", "prediction": ["all x.(Plant(x) -> LivesAboutAnywhereSnake(x))"]}
{"id": "eqasc_train_9451", "nl": "Green producers live just about everywhere on Earth.", "fol": "", "prediction": ["all x.(GreenProducer(x) -> LivesOnEarth(x))"]}
{"id": "eqasc_train_9452", "nl": "Populations of viruses do not grow through cell division because they are not cells.", "fol": "", "prediction": ["all x.((Population(x) & Virus(x)) -> -GrowsThroughCellDiviction(x))"]}
{"id": "eqasc_train_9453", "nl": "HIV, like other viruses, needs a host to survive.", "fol": "", "prediction": ["all x.((Viral(x) & HIV(x)) -> NeedsHost(x))"]}
{"id": "eqasc_train_9454", "nl": "populations of HIV do not grow through cell division because they are not cells", "fol": "", "prediction": ["all x.((Population(x) & Population(x) & -CellDivision(x)) -> -GrowsThroughCellDivision(x))"]}
{"id": "eqasc_train_9455", "nl": "Viruses are the cause of many diseases.", "fol": "", "prediction": ["all x.(Virus(x) -> CauseOfManyDiseases(x))"]}
{"id": "eqasc_train_9456", "nl": "diseases are not caused by cells", "fol": "", "prediction": ["all x.(Disease(x) -> -CausedByCells(x))"]}
{"id": "eqasc_train_9457", "nl": "Prokaryotes multiply by simple cell division, forming clones or exact copies of themselves.", "fol": "", "prediction": ["all x.(Prokaryote(x) -> (Multiply(x) & SimpleCellDividend(x) & (FormsClones(x) | FormsExactCopies(x))))"]}
{"id": "eqasc_train_9458", "nl": "Viruses are not prokaryotes.", "fol": "", "prediction": ["all x.(Virus(x) -> -Prokaryote(x))"]}
{"id": "eqasc_train_9459", "nl": "Populations of viruses do not grow through mitosis because they are not cells.", "fol": "", "prediction": ["all x.((Population(x) & Viral(x)) -> -GrowsThroughMitosis(x))"]}
{"id": "eqasc_train_9460", "nl": "Influenza viruses change often.", "fol": "", "prediction": ["all x.(InfluenzaVirus(x) -> ChangesOfFrequently(x))"]}
{"id": "eqasc_train_9461", "nl": "influenza does not grow through cell division", "fol": "", "prediction": ["all x.(Influenza(x) -> -GrowsThroughCellDivision(x))"]}
{"id": "eqasc_train_9462", "nl": "Influenza viruses change constantly.", "fol": "", "prediction": ["all x.(InfluenzaVirus(x) -> ChangesConstantly(x))"]}
{"id": "eqasc_train_9463", "nl": "Cancer is unregulated cell division.", "fol": "", "prediction": ["all x.(Cancer(x) -> UnregulatedCellDividection(x))"]}
{"id": "eqasc_train_9464", "nl": "Cancer is not caused by viruses.", "fol": "", "prediction": ["all x.(Cancer(x) -> -CausedByViruses(x))"]}
{"id": "eqasc_train_9465", "nl": "Cells, the basic units of every living organism, proliferate by binary division.", "fol": "", "prediction": ["all x.(Cell(x) -> (BasicUnit(x) & EveryLivingOrganism(x) & BinaryDividend(x)))"]}
{"id": "eqasc_train_9466", "nl": "Viruses do not proliferate via binary division.", "fol": "", "prediction": ["all x.(Virus(x) -> -ProliferatesBinaryDividend(x))"]}
{"id": "eqasc_train_9467", "nl": "Influenza is a disease caused by viruses.", "fol": "", "prediction": ["all x.(Influenza(x) -> CausedByViruses(x))"]}
{"id": "eqasc_train_9468", "nl": "Populations of the cause of influenza do not grow through cell division because they are not cells", "fol": "", "prediction": ["all x.((Population(x) & CauseOfInfluenza(x)) -> -GrowsThroughCellDiviction(x))"]}
{"id": "eqasc_train_9469", "nl": "Populations of HIV do not grow through cell division because they are not cells.", "fol": "", "prediction": ["all x.((Population(x) & HIV(x)) -> -GrowsThroughCellDividection(x))"]}
{"id": "eqasc_train_9470", "nl": "Viruses are parasites of cells.", "fol": "", "prediction": ["all x.(Virus(x) -> ParasiteOfCells(x))"]}
{"id": "eqasc_train_9471", "nl": "Populations of viruses do not grow through division because they are parasites", "fol": "", "prediction": ["all x.((Population(x) & Virus(x) & -GrowsThroughDivision(x)) -> Parasite(x))"]}
{"id": "eqasc_train_9472", "nl": "Pollination is the fertilization step in the sexual reproduction of plants.", "fol": "", "prediction": ["all x.(Pollination(x) -> FertilizationStepInSexualReproduction(x))"]}
{"id": "eqasc_train_9473", "nl": "Pollen grains are the small male reproductive bodies of plants that fertilize female flowers.", "fol": "", "prediction": ["all x.(PollenGrain(x) -> (SmallMaleReproductiveBody(x) & FertilizesFemaleFlowers(x)))"]}
{"id": "eqasc_train_9474", "nl": "Pollen grains are small male reproductive bodies of plants used to pollinate female flowers", "fol": "", "prediction": ["all x y.((PollenGrain(x) & Plant(y)) -> (SmallMaleReproductiveBody(x,y) & PollinatesFemaleFlowers(x)))"]}
{"id": "eqasc_train_9475", "nl": "honeybees help with the fertilization of plants", "fol": "", "prediction": ["all x y.((Honeybee(x) & Plant(y)) -> HelpsFertilize(x,y))"]}
{"id": "eqasc_train_9476", "nl": "Honeybees are important for plant reproduction ", "fol": "", "prediction": ["all x.(Honeybee(x) -> ImportantForPlantReproduction(x))"]}
{"id": "eqasc_train_9477", "nl": "Bees are absolutely essential for pollination.", "fol": "", "prediction": ["all x.(Bee(x) -> PollinationEssential(x))"]}
{"id": "eqasc_train_9478", "nl": "Bees are absolutely essential for the fertilization step in the sexual reproduction of plants", "fol": "", "prediction": ["all x.(Bee(x) -> (EssentialForFertilization(x) & InSexualReproduction(x)))"]}
{"id": "eqasc_train_9479", "nl": "Pollination is the transfer of pollen grains to a stigma.", "fol": "", "prediction": ["all x y.((Pollination(x) & PollenGrain(y)) -> TransferToStigma(x,y))"]}
{"id": "eqasc_train_9480", "nl": "The transfer of pollen grains to a stigma is the fertilization step in the sexual reproduction of plants.", "fol": "", "prediction": ["all x y.((TransferOfPollenGrains(x) & Stigma(y)) -> FertilizationStep(x,y))"]}
{"id": "eqasc_train_9481", "nl": "Clean plants are healthy plants.", "fol": "", "prediction": ["all x.(CleanPlant(x) -> HealthyPlant(x))"]}
{"id": "eqasc_train_9482", "nl": "pollination is the fertilization step in something that is healthy when clean.", "fol": "", "prediction": ["all x.(Pollination(x) -> (FertilizationStep(x) & HealthyWhenClean(x)))"]}
{"id": "eqasc_train_9483", "nl": "Insect Pollinators Learn about pollination and why insect pollinators are important in the garden.", "fol": "", "prediction": ["all x.(InsectPollinators(x) -> (LearnsAboutPollination(x) & WhyInsectPollinatorsImportantInGarden(x)))"]}
{"id": "eqasc_train_9484", "nl": "insect are important in the fertilization step in the sexual reproduction of plants.", "fol": "", "prediction": ["all x y.((Insect(x) & Plant(y)) -> ImportantInFertilizationStep(x,y))"]}
{"id": "eqasc_train_9485", "nl": "Fertilization As far as fertilization, timing is critical.", "fol": "", "prediction": ["all x.(Fertilization(x) -> CriticalTiming(x))"]}
{"id": "eqasc_train_9486", "nl": "pollination timing is a critical step in the sexual reproduction of plants", "fol": "", "prediction": ["all x.(PollinationTime(x) -> CriticalStepInSexualReproduction(x))"]}
{"id": "eqasc_train_9487", "nl": "Pollination is the fertilization step in the sexual reproduction of something that performs photosynthesis", "fol": "", "prediction": ["all x y.((Pollination(x) & Photosynthesis(y)) -> FertilizationStep(x,y))"]}
{"id": "eqasc_train_9488", "nl": "when electricity flows to a light bulb , the light bulb will turn on", "fol": "", "prediction": ["all x y z.((ElectricityFlowsTo(x,y) & LightBulb(z) & LightBulb(x)) -> TurnsOn(x,z))"]}
{"id": "eqasc_train_9489", "nl": "Electric currents can turn a lightbulb on.", "fol": "", "prediction": ["all x y.((ElectricCurrent(x) & Lightbulb(y)) -> CanTurnOn(x,y))"]}
{"id": "eqasc_train_9490", "nl": "For example, Make sure there is enough light in the room to see clearly.", "fol": "", "prediction": ["all x.((Room(x) & EnoughLight(x)) -> SeesClearly(x))"]}
{"id": "eqasc_train_9491", "nl": "When electricity flows to a bulb, the room is seen clearly.", "fol": "", "prediction": ["all x y.((ElectricityFlowsToBulb(x) & Room(y)) -> Visible(y))"]}
{"id": "eqasc_train_9492", "nl": "Most of the energy a light bulb uses turns into heat.", "fol": "", "prediction": ["all x.((LightBulb(x) & UsesEnergy(x)) -> Heat(x))"]}
{"id": "eqasc_train_9493", "nl": "When electricity flows to a light bulb, the energy it uses becomes heat.", "fol": "", "prediction": ["all x y.((ElectricityFlowsToLightBulb(x) & Heat(y)) -> Heat(x))"]}
{"id": "eqasc_train_9494", "nl": "when energy flows to a light bulb, it will turn on", "fol": "", "prediction": ["all x y.((EnergyFlowsTo(x,y) & LightBulb(y)) -> TurnsOn(x,y))"]}
{"id": "eqasc_train_9495", "nl": "when electrons flow to a light bulb, the light bulb will turn on", "fol": "", "prediction": ["all x y.((ElectronFlow(x) & LightBulb(y) & LightBulb(y)) -> TurnsOn(y))"]}
{"id": "eqasc_train_9496", "nl": "Power Outages are a total interruption of electrical power.", "fol": "", "prediction": ["all x.(PowerOutage(x) -> TotalInterruptionOfElectricalPower(x))"]}
{"id": "eqasc_train_9497", "nl": "Power outages can cause a light bulb to go off.", "fol": "", "prediction": ["all x y.((PowerOutage(x) & LightBulb(y)) -> CanGoOff(x,y))"]}
{"id": "eqasc_train_9498", "nl": "Materials that control the flow of electricity are called resistors.", "fol": "", "prediction": ["all x.((Material(x) & ControlsFlowOfElectricity(x)) -> Resistor(x))"]}
{"id": "eqasc_train_9499", "nl": "Resistors can prevent a light bulb from turning on", "fol": "", "prediction": ["all x y.((Resistors(x) & LightBulb(y)) -> CanPreventFromTurningOn(x,y))"]}
{"id": "eqasc_train_9500", "nl": "Coal-fired electric generation is a low cost source of electricity.", "fol": "", "prediction": ["all x.(CoalFiredElectricGeneration(x) -> LowCostSourceOfElectricity(x))"]}
{"id": "eqasc_train_9501", "nl": "When something generated from coal flows to a light bulb, the light bulb will turn on.", "fol": "", "prediction": ["all x y.((GeneratedFromCoal(x) & LightBulb(y)) -> TurnsOn(y))"]}
{"id": "eqasc_train_9502", "nl": "a refrigerator is used for keeping food fresh for a long period of time", "fol": "", "prediction": ["all x y.((Refrigerator(x) & Food(y)) -> UsedForKeepingFreshForLongPeriod(x,y))"]}
{"id": "eqasc_train_9503", "nl": "Refrigerators are major users of electricity.", "fol": "", "prediction": ["all x.(Refrigerator(x) -> MajorUserOfElectricity(x))"]}
{"id": "eqasc_train_9504", "nl": "Keeping food fresh for a long period of time requires a lot of electricity.", "fol": "", "prediction": ["all x.((KeepsFoodFresh(x) & LongPeriodOfTime(x)) -> RequiresLotOfElectricity(x))"]}
{"id": "eqasc_train_9505", "nl": "Fresh food is good.", "fol": "", "prediction": ["all x.(FreshFood(x) -> Good(x))"]}
{"id": "eqasc_train_9506", "nl": "A refrigerator keeps food good a long time", "fol": "", "prediction": ["all x.(Refrigerator(x) -> KeepsFoodGood(x))"]}
{"id": "eqasc_train_9507", "nl": "Air, heat and light cause dried food to spoil.", "fol": "", "prediction": ["all x.((Air(x) | Heat(x) | Light(x)) -> CausesDriedFoodToSpoil(x))"]}
{"id": "eqasc_train_9508", "nl": "A refrigerator is protection from air, heat and light", "fol": "", "prediction": ["all x.(Refrigerator(x) -> (ProtectionFromAirHeatAndLight(x) & ProtectsFromHeatAndLight(x)))"]}
{"id": "eqasc_train_9509", "nl": "Refrigerator is too cold.", "fol": "", "prediction": ["all x.(Refrigerator(x) -> TooCold(x))"]}
{"id": "eqasc_train_9510", "nl": "cold is used to keep food fresh", "fol": "", "prediction": ["all x y.((Cold(x) & Food(y)) -> KeepsFresh(x,y))"]}
{"id": "eqasc_train_9511", "nl": "Cold temperatures keep food fresh and inhibit the growth of most bacteria.", "fol": "", "prediction": ["all x.(ColdTemperature(x) -> (KeepsFoodFresh(x) & InhibitsGrowthOfMostBacteria(x)))"]}
{"id": "eqasc_train_9512", "nl": "A refrigerator is used for inhibiting the growth of most bacteria on food.", "fol": "", "prediction": ["all x.(Refrigerator(x) -> InhibitsGrowthOfMostBacteria(x))"]}
{"id": "eqasc_train_9513", "nl": "Refrigeration slows the growth of bacteria, molds, and other micro-organisms.", "fol": "", "prediction": ["all x.(Refrigeration(x) -> SlowsGrowthOfBacteriaMoldsAndMicroorganisms(x))"]}
{"id": "eqasc_train_9514", "nl": "Slowing the growth of bacteria keeps food fresh", "fol": "", "prediction": ["all x y.((SlowingGrowthOfBacteria(x) & Food(y)) -> KeepsFresh(x,y))"]}
{"id": "eqasc_train_9515", "nl": "Cold temperatures help food stay fresh longer.", "fol": "", "prediction": ["all x.(ColdTemperature(x) -> HelpsFoodStayFreshLonger(x))"]}
{"id": "eqasc_train_9516", "nl": "A refrigerator keeps food cold", "fol": "", "prediction": ["all x.(Refrigerator(x) -> KeepsFoodCold(x))"]}
{"id": "eqasc_train_9517", "nl": "Kitchen appliances include refrigerator.", "fol": "", "prediction": ["all x.(KitchenAppliance(x) -> Refrigerator(x))"]}
{"id": "eqasc_train_9518", "nl": "A kitchen appliances is used for keeping food fresh for a long period of time", "fol": "", "prediction": ["all x.(KitchenAppliance(x) -> (KeepsFoodFresh(x) & LongPeriodOfTime(x)))"]}
{"id": "eqasc_train_9519", "nl": "Favorite food is chicken.", "fol": "", "prediction": ["all x.(FavoriteFood(x) -> Chicken(x))"]}
{"id": "eqasc_train_9520", "nl": "a refrigerator is used for keeping chicken fresh", "fol": "", "prediction": ["all x y.((Refrigerator(x) & Chicken(y)) -> UsedForKeepingFresh(x,y))"]}
{"id": "eqasc_train_9521", "nl": "Keeping food fresh for a long period of time is a major user of electricity.", "fol": "", "prediction": ["all x.((KeepsFoodFresh(x) & LongPeriodOfTime(x)) -> MajorUserOfElectricity(x))"]}
{"id": "eqasc_train_9522", "nl": "People consume foods that are cold from refrigeration.", "fol": "", "prediction": ["all x.((People(x) & ConsumesFood(x) & ColdFromRefrigeration(x)) -> Consumes(x,y))"]}
{"id": "eqasc_train_9523", "nl": "cold is used for keeping food fresh for a long period of time", "fol": "", "prediction": ["all x y.((Cold(x) & Food(y)) -> KeepsFreshForLongPeriod(x,y))"]}
{"id": "eqasc_train_9524", "nl": "To prevent bacterial food poisoning, the basic rule is to keep hot foods hot and cold foods cold.", "fol": "", "prediction": ["all x.((BacteriaFoodPoisoning(x) & HotFood(x) & ColdFood(x)) -> Prevents(x,poisoning))"]}
{"id": "eqasc_train_9525", "nl": "Refrigerators help prevent cold food from growing poisonous bacteria.", "fol": "", "prediction": ["all x.(Refrigerator(x) -> (HelpsPreventColdFood(x) & GrowsPoisonousBacteria(x)))"]}
{"id": "eqasc_train_9526", "nl": "Most invertebrates have a more complex nervous system.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> MoreComplexNervousSystem(x))"]}
{"id": "eqasc_train_9527", "nl": "Cephalopods have the most advanced nervous systems of all invertebrates.", "fol": "", "prediction": ["all x.(Cephalopod(x) -> (AdvancedNervousSystem(x) & Invertebrate(x)))"]}
{"id": "eqasc_train_9528", "nl": "Cephalopods have a complex nervous system", "fol": "", "prediction": ["all x.(Cephalopod(x) -> ComplexNervousSystem(x))"]}
{"id": "eqasc_train_9529", "nl": "most animals without a backbone have a complex nervous system", "fol": "", "prediction": ["all x.((Animal(x) & -Backbone(x)) -> ComplexNervousSystem(x))"]}
{"id": "eqasc_train_9530", "nl": "All complex living creatures, are organized by a nervous system .", "fol": "", "prediction": ["all x.(ComplexLivingCreature(x) -> OrganizedByNervousSystem(x))"]}
{"id": "eqasc_train_9531", "nl": "Most invertebrates are complex living creatures", "fol": "", "prediction": ["all x.(Invertebrate(x) -> ComplexLivingCreature(x))"]}
{"id": "eqasc_train_9532", "nl": "coral can a more complex nervous system.", "fol": "", "prediction": ["all x.(Coral(x) -> MoreComplexNervousSystem(x))"]}
{"id": "eqasc_train_9533", "nl": "Most insects have a complex nervous system", "fol": "", "prediction": ["all x.(Insect(x) -> ComplexNervousSystem(x))"]}
{"id": "eqasc_train_9534", "nl": "Most animals without a backbone have a more complex nervous system.", "fol": "", "prediction": ["all x.((Animal(x) & -Backbone(x)) -> MoreComplexNervousSystem(x))"]}
{"id": "eqasc_train_9535", "nl": "Cephalopods have well developed nervous systems with complex brains capable of learning.", "fol": "", "prediction": ["all x.(Cephalopod(x) -> (WellDevelopedNervousSystem(x) & ComplexBrainsCapableOfLearning(x)))"]}
{"id": "eqasc_train_9536", "nl": "Most invertebrates have brains capable of learning.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> HasBrainCapableOfLearning(x))"]}
{"id": "eqasc_train_9537", "nl": "most animals without a backbone have a more complex nervous system", "fol": "", "prediction": ["all x.((Animal(x) & -Backbone(x)) -> MoreComplexNervousSystem(x))"]}
{"id": "eqasc_train_9538", "nl": "insects have a more complex nervous system", "fol": "", "prediction": ["all x.(Insect(x) -> (ComplexNervousSystem(x) & Insect(x) & MoreComplexNervousSystem(x)))"]}
{"id": "eqasc_train_9539", "nl": "Insects have a more complex nervous system.", "fol": "", "prediction": ["all x.(Insect(x) -> MoreComplexNervousSystem(x))"]}
{"id": "eqasc_train_9540", "nl": "Jellyfish have a more complex nervous system.", "fol": "", "prediction": ["all x.(Jellyfish(x) -> MoreComplexNervousSystem(x))"]}
{"id": "eqasc_train_9541", "nl": "Most animals without a backbone have a complex nervous system", "fol": "", "prediction": ["all x.((Animal(x) & -Backbone(x)) -> ComplexNervousSystem(x))"]}
{"id": "eqasc_train_9542", "nl": "Thyroid hormones increase the rate of metabolism in cells throughout the body.", "fol": "", "prediction": ["all x.(ThyroidHormone(x) -> IncreasesMetabolismInCells(x))"]}
{"id": "eqasc_train_9543", "nl": "Thyroid hormone is made by the thyroid gland.", "fol": "", "prediction": ["all x.(ThyroidHydrogen(x) -> MadeByThyroidGlobe(x))"]}
{"id": "eqasc_train_9544", "nl": "The thyroid gland increases metabolism in cells throughout the body", "fol": "", "prediction": ["all x y.((ThyroidGum(x) & Cell(y)) -> IncreasesMetabolismInBody(x,y))"]}
{"id": "eqasc_train_9545", "nl": "Thyroid hormone regulates the body's metabolism.", "fol": "", "prediction": ["all x.(ThyroidHormone(x) -> RegulatesMetabolism(x))"]}
{"id": "eqasc_train_9546", "nl": "metabolism is regulated by hormones", "fol": "", "prediction": ["all x y.((Metabolism(x) & Hormone(y)) -> Regulates(x,y))"]}
{"id": "eqasc_train_9547", "nl": "Cell metabolism is a heat production.", "fol": "", "prediction": ["all x.(CellMetabolism(x) -> HeatProduction(x))"]}
{"id": "eqasc_train_9548", "nl": "Thyroid hormones increase the rate of heat production in cells", "fol": "", "prediction": ["all x y.((ThyroidHormone(x) & Cell(y)) -> IncreasesHeatProduction(x,y))"]}
{"id": "eqasc_train_9549", "nl": "Thyroid hormones are made by the thyroid gland.", "fol": "", "prediction": ["all x.(ThyroidHormone(x) -> MadeByThyroidGlobe(x))"]}
{"id": "eqasc_train_9550", "nl": "The thyroid gland makes a chemical substance that increase the rate of metabolism in the body", "fol": "", "prediction": ["all x y.((ThyroidGum(x) & ChemicalSubstance(y)) -> IncreasesMetabolism(x,y))"]}
{"id": "eqasc_train_9551", "nl": "TSH, which is secreted by the pituitary gland, stimulates the thyroid gland to produce hormones.", "fol": "", "prediction": ["all x y.((ThyroidSuppressor(x) & PituitaryGlands(y)) -> (StimulatesThyroidGlands(x,y) & ProducesHormones(x,y)))"]}
{"id": "eqasc_train_9552", "nl": "the pituitary gland releases hormones that affect metabolism", "fol": "", "prediction": ["all x y.((PituitaryGlands(x) & Hormones(y)) -> ReleasesAndAffectsMetabolism(x,y))"]}
{"id": "eqasc_train_9553", "nl": "Hyperthyroidism is an overactive thyroid gland .", "fol": "", "prediction": ["all x.(Hyperthyroidism(x) -> OveractiveThyroidGum(x))"]}
{"id": "eqasc_train_9554", "nl": "hyperthyroidism can increase the rate of metabolism in cells throughout the body.", "fol": "", "prediction": ["all x.(Hyperthyroidism(x) -> IncreasesMetabolismInCells(x))"]}
{"id": "eqasc_train_9555", "nl": "Everyone has a different metabolism.", "fol": "", "prediction": ["all x.(HasDifferentMetabolism(x) -> DifferentMetabolism(x))"]}
{"id": "eqasc_train_9556", "nl": "thyroid hormones effects everyone differently", "fol": "", "prediction": ["all x y.((ThyroidHormone(x) & Person(y)) -> EffectsDifferently(x,y))"]}
{"id": "eqasc_train_9557", "nl": "Thyroid hormone is made by the thyroid gland in the neck.", "fol": "", "prediction": ["all x.(ThyroidHydrogen(x) -> MadeByThyroidGlandsInNeck(x))"]}
{"id": "eqasc_train_9558", "nl": "the thyroid gland in the neck is responsible for an increase in the rate of metabolism in cells throughout the body.", "fol": "", "prediction": ["all x y.((ThyroidGlobe(x) & Neck(y)) -> IncreasesMetabolismInCells(x,y))"]}
{"id": "eqasc_train_9559", "nl": "Chronic stress increases thyroid hormone production.", "fol": "", "prediction": ["all x.(ChronicStress(x) -> IncreasesThyroidHormoneProduction(x))"]}
{"id": "eqasc_train_9560", "nl": "Chronic stress increases the rate of metabolism in cells throughout the body", "fol": "", "prediction": ["all x y.((ChronicStress(x) & Cell(y)) -> IncreasesMetabolismRate(x,y))"]}
{"id": "eqasc_train_9561", "nl": "Metabolism is the sum of all the chemical processes in a living organism.", "fol": "", "prediction": ["all x.(Metabolism(x) -> SumOfChemicalProcesses(x))"]}
{"id": "eqasc_train_9562", "nl": "Thyroid hormones increase the rate of all the chemical processes in living organism cells.", "fol": "", "prediction": ["all x y.((ThyroidHormone(x) & LivingOrganismCell(y)) -> IncreasesChemicalProcesses(x,y))"]}
{"id": "eqasc_train_9563", "nl": "Metabolic rate is the rate at which food is burned for energy.", "fol": "", "prediction": ["all x.(MetabolicRate(x) -> FoodBurnedForEnergy(x))"]}
{"id": "eqasc_train_9564", "nl": "thyroid hormones increase the rate of energy consumption", "fol": "", "prediction": ["all x.(ThyroidHormone(x) -> IncreasesEnergyConsumption(x))"]}
{"id": "eqasc_train_9565", "nl": "Metabolism is the process of converting food to energy.", "fol": "", "prediction": ["all x.(Metabolism(x) -> ConvertsFoodToEnergy(x))"]}
{"id": "eqasc_train_9566", "nl": "Thyroid hormones increase the rate of converting food to energy.", "fol": "", "prediction": ["all x.(ThyroidHormone(x) -> IncreasesConversionOfFoodToEnergy(x))"]}
{"id": "eqasc_train_9567", "nl": "Thyroxine, a thyroid hormone, is an aryl iodide.", "fol": "", "prediction": ["all x.(Thyroxine(x) -> (ThyroidHormone(x) & ArylIodide(x)))"]}
{"id": "eqasc_train_9568", "nl": "Thyroxine increase the rate of metabolism in cells throughout the body.", "fol": "", "prediction": ["all x.(Thyroxine(x) -> IncreasesMetabolismRate(x))"]}
{"id": "eqasc_train_9569", "nl": "Thyroxine increases the rate of metabolism in cells throughout the body.", "fol": "", "prediction": ["all x.(Thyroxine(x) -> IncreasesMetabolism(x))"]}
{"id": "eqasc_train_9570", "nl": "Thyroid hormones are produced by the thyroid gland.", "fol": "", "prediction": ["all x.(ThyroidHormone(x) -> ProducedByThyroidGlobe(x))"]}
{"id": "eqasc_train_9571", "nl": "a gland produces hormones in cells", "fol": "", "prediction": ["all x y z.((Glen(x) & Hormone(y) & Cell(z)) -> ProducesIn(x,y,z))"]}
{"id": "eqasc_train_9572", "nl": "Graves disease is a thyroid gland that overproduces thyroid hormone.", "fol": "", "prediction": ["all x.(GravesDisease(x) -> (ThyroidGlands(x) & OverproducesThyroidHormone(x)))"]}
{"id": "eqasc_train_9573", "nl": "Graves disease increases the rate of metabolism in cells", "fol": "", "prediction": ["all x.(GravesDisease(x) -> IncreasesMetabolismRateInCells(x))"]}
{"id": "eqasc_train_9574", "nl": "Excretion is the process of removing wastes and excess water from the body.", "fol": "", "prediction": ["all x.(Excretion(x) -> (RemovesWastes(x) & RemovesExcessWater(x)))"]}
{"id": "eqasc_train_9575", "nl": "Once the water is removed, the waste becomes a semi- solid mass and is prepared for excretion.", "fol": "", "prediction": ["all x.((WaterRemoved(x) & Waste(x)) -> (SemiSolidMass(x) & PreparedForExcretion(x)))"]}
{"id": "eqasc_train_9576", "nl": "Excess water and a semi-solid mass of waste are removed from the body", "fol": "", "prediction": ["all x y.((ExcessWater(x) & SemiSolidMassOfWaste(y)) -> RemovedFromBody(x,y))"]}
{"id": "eqasc_train_9577", "nl": "All organisms excrete wastes.", "fol": "", "prediction": ["all x.(Organism(x) -> ExcretesWastes(x))"]}
{"id": "eqasc_train_9578", "nl": "All organisms remove waste from their body", "fol": "", "prediction": ["all x.(Organism(x) -> RemovesWasteFromBody(x))"]}
{"id": "eqasc_train_9579", "nl": "Ketones are exhaled and excreted in urine.", "fol": "", "prediction": ["all x.(Ketone(x) -> (Exhaled(x) & ExcretedInUrine(x)))"]}
{"id": "eqasc_train_9580", "nl": "Urination is a process of removing wastes and excess water from the body.", "fol": "", "prediction": ["all x.(Urination(x) -> (RemovesWastes(x) & RemovesExcessWater(x)))"]}
{"id": "eqasc_train_9581", "nl": "Excretion occurs in the feces.", "fol": "", "prediction": ["all x.(Excretion(x) -> OccursInFeces(x))"]}
{"id": "eqasc_train_9582", "nl": "feces removes wastes and excess water from the body", "fol": "", "prediction": ["all x y.((Feces(x) & Body(y)) -> RemovesWastesAndExcessWater(x,y))"]}
{"id": "eqasc_train_9583", "nl": "Major route of excretion is in the feces.", "fol": "", "prediction": ["all x.(ExcretionRoute(x) -> InFeces(x))"]}
{"id": "eqasc_train_9584", "nl": "Feces are a major route of removing wastes and excess water from the body.", "fol": "", "prediction": ["all x.(Feces(x) -> (RemovesWastes(x) & RemovesExcessWater(x)))"]}
{"id": "eqasc_train_9585", "nl": "Normally, zinc leaves the body in wastes.", "fol": "", "prediction": ["all x.(Zinc(x) -> LeavesInWastes(x))"]}
{"id": "eqasc_train_9586", "nl": "Zinc leaves the body through excretion. ", "fol": "", "prediction": ["all x.(Zinc(x) -> LeavesBodyThroughExcretion(x))"]}
{"id": "eqasc_train_9587", "nl": "Solid waste is called feces.", "fol": "", "prediction": ["all x.(SolidWaste(x) -> Feces(x))"]}
{"id": "eqasc_train_9588", "nl": "Excretion is the process of removing feces and excess water from the body.", "fol": "", "prediction": ["all x y.((Excretion(x) & Body(y)) -> RemovesFecesAndExcessWater(x,y))"]}
{"id": "eqasc_train_9589", "nl": "Excretion refers to the processes by which the body eliminates a drug.", "fol": "", "prediction": ["all x y.((Excretion(x) & Drug(y)) -> Eliminates(x,y))"]}
{"id": "eqasc_train_9590", "nl": "The body eliminates wastes and excess water from the body", "fol": "", "prediction": ["all x y.((Body(x) & Body(y)) -> EliminatesWastesAndExcessWater(x,y))"]}
{"id": "eqasc_train_9591", "nl": "Parasites excrete toxic wastes.", "fol": "", "prediction": ["all x.(Parasite(x) -> ExcretesToxicWastes(x))"]}
{"id": "eqasc_train_9592", "nl": "parasites remove waste from their bodies", "fol": "", "prediction": ["all x.(Parasite(x) -> RemovesWasteFromBody(x))"]}
{"id": "eqasc_train_9593", "nl": "Alcohol increases degradation and excretion.", "fol": "", "prediction": ["all x.(Alcohol(x) -> (IncreasesDegradation(x) & IncreasesExcretion(x)))"]}
{"id": "eqasc_train_9594", "nl": "Alcohol increases the process of removing wastes and excess water from the body.", "fol": "", "prediction": ["all x.(Alcohol(x) -> IncreasesRemovalOfWastesAndExcessWater(x))"]}
{"id": "eqasc_train_9595", "nl": "excretion removes excess H2O from the body", "fol": "", "prediction": ["all x y.((Excretion(x) & Body(y)) -> RemovesExcessH2O(x,y))"]}
{"id": "eqasc_train_9596", "nl": "Producers are organisms that produce food for themselves and other organisms.", "fol": "", "prediction": ["all x.(Producer(x) -> (Organism(x) & ProducesFoodFor(x,self) & ProducesFoodFor(x,otherOrganisms)))"]}
{"id": "eqasc_train_9597", "nl": "Plants are organisms that make food for themselves and other organisms.", "fol": "", "prediction": ["all x.(Plant(x) -> (Organism(x) & MakesFoodFor(x,self) & MakesFoodFor(x,otherOrganisms)))"]}
{"id": "eqasc_train_9598", "nl": "Plants make their own food.", "fol": "", "prediction": ["all x.(Plant(x) -> MakesOwnFood(x))"]}
{"id": "eqasc_train_9599", "nl": "Plants are Producers", "fol": "", "prediction": ["all x.(Plant(x) -> Producer(x))"]}
{"id": "eqasc_train_9600", "nl": "Humans can produce.", "fol": "", "prediction": ["all x.(Human(x) -> CanProduce(x))"]}
{"id": "eqasc_train_9601", "nl": "humans can provide food for other organisms", "fol": "", "prediction": ["all x y.((Human(x) & Organism(y)) -> ProvidesFoodFor(x,y))"]}
{"id": "eqasc_train_9602", "nl": "green plants provide food for themselves and other organisms", "fol": "", "prediction": ["all x y.((GreenPlant(x) & Organism(y)) -> ProvidesFoodFor(x,y))"]}
{"id": "eqasc_train_9603", "nl": "most plants make food for themselves and other organisms", "fol": "", "prediction": ["all x y.((Plant(x) & Organism(y)) -> MakesFoodFor(x,y))"]}
{"id": "eqasc_train_9604", "nl": "Tree is very large and a heavy producer.", "fol": "", "prediction": ["all x.(Tree(x) -> (Large(x) & HeavyProducer(x)))"]}
{"id": "eqasc_train_9605", "nl": "trees make food for themselves and other organisms", "fol": "", "prediction": ["all x y.((Tree(x) & Organism(y)) -> (MakesFoodFor(x,y) & For(x,y)))"]}
{"id": "eqasc_train_9606", "nl": "green plants make food for themselves and other organisms", "fol": "", "prediction": ["all x y.((GreenPlant(x) & Organism(y)) -> (MakesFoodFor(x,y) & For(x,y)))"]}
{"id": "eqasc_train_9607", "nl": "Green plants are organisms that make food for themselves and other organisms.", "fol": "", "prediction": ["all x.(GreenPlant(x) -> (Organism(x) & MakesFoodFor(x,self) & MakesFoodFor(x,otherOrganisms)))"]}
{"id": "eqasc_train_9608", "nl": "Producers are the base of the food chain.", "fol": "", "prediction": ["all x.(Producer(x) -> FoodChainBase(x))"]}
{"id": "eqasc_train_9609", "nl": "The base of the food chain help provide food for other organisms.", "fol": "", "prediction": ["all x y.((FoodChain(x) & Organism(y)) -> ProvidesFood(x,y))"]}
{"id": "eqasc_train_9610", "nl": "Autotrophs are organisms that can make their own food.", "fol": "", "prediction": ["all x.(Autotroph(x) -> (Organism(x) & CanMakeOwnFood(x)))"]}
{"id": "eqasc_train_9611", "nl": "An autotroph is a producer that can produce food for itself", "fol": "", "prediction": ["all x.(Autotroph(x) -> (Producer(x) & ProducesFoodFor(x) & ProducesFoodFor(x)))"]}
{"id": "eqasc_train_9612", "nl": "green plants are organisms that make food for themselves and other organisms", "fol": "", "prediction": ["all x.(GreenPlant(x) -> (Organism(x) & MakesFoodForOtherOrganisms(x)))"]}
{"id": "eqasc_train_9613", "nl": "Parasites are organisms that obtain their food from living organisms.", "fol": "", "prediction": ["all x.(Parasite(x) -> (Organism(x) & ObtainsFoodFromLivingOrganisms(x)))"]}
{"id": "eqasc_train_9614", "nl": "parasites obtain their food from producers that produces food for themselves and others ", "fol": "", "prediction": ["all x y z.((Parasite(x) & Producer(y) & Food(z)) -> (ObtainsFoodFrom(x,y) & ProducesFoodFor(y,z)))"]}
{"id": "eqasc_train_9615", "nl": "Predators are organisms which eat other organisms for energy.", "fol": "", "prediction": ["all x.(Predator(x) -> (Organism(x) & EatsOrganisms(x)))"]}
{"id": "eqasc_train_9616", "nl": "Producers provide food for themselves and for predators.", "fol": "", "prediction": ["all x y.((Producer(x) & Predator(y)) -> (ProvidesFood(x,y) & ProvidesFood(x,y)))"]}
{"id": "eqasc_train_9617", "nl": "Roots have primary and secondary meristems for growth in length and width.", "fol": "", "prediction": ["all x.(Root(x) -> (HasPrimaryMeristems(x) & HasSecondaryMeristems(x) & GrowthInLengthAndWidth(x)))"]}
{"id": "eqasc_train_9618", "nl": "Roots Roots anchor the plant into the ground.", "fol": "", "prediction": ["all x y.((Root(x) & Plant(y)) -> AnchorsIntoGround(x,y))"]}
{"id": "eqasc_train_9619", "nl": "plants' anchors have primary and secondary meristems for growth and length and width into the ground.", "fol": "", "prediction": ["all x.((Plant(x) & Anchor(x)) -> (HasPrimaryAndSecondaryMeristems(x) & HasLengthAndWidthIntoGround(x)))"]}
{"id": "eqasc_train_9620", "nl": "Growth occurs in meristems.", "fol": "", "prediction": ["all x.(Growth(x) -> exists y.(Meristem(y) & OccursIn(x,y)))"]}
{"id": "eqasc_train_9621", "nl": "Without meristems, roots couldn't lengthen or widen.", "fol": "", "prediction": ["all x.((Root(x) & -Lengthens(x) & -Wides(x)) -> -Lengthens(x) & Widens(x))"]}
{"id": "eqasc_train_9622", "nl": "plants have meristems for growth", "fol": "", "prediction": ["all x.(Plant(x) -> HasMeristemsForGrowth(x))"]}
{"id": "eqasc_train_9623", "nl": "Meristems are zones of intense activity.", "fol": "", "prediction": ["all x.(Meristem(x) -> ZoneOfIntenseActivity(x))"]}
{"id": "eqasc_train_9624", "nl": "Roots are zones of intense activity.", "fol": "", "prediction": ["all x.(Root(x) -> ZoneOfIntenseActivity(x))"]}
{"id": "eqasc_train_9625", "nl": "Special types of primary roots are tap roots or turnips.", "fol": "", "prediction": ["all x.(PrimaryRoot(x) -> (TapRoot(x) | Turnips(x)))"]}
{"id": "eqasc_train_9626", "nl": "Turnips have primary and secondary meristems for growth in length and width", "fol": "", "prediction": ["all x.(Turnips(x) -> (HasPrimaryMeristems(x) & HasSecondaryMeristems(x) & GrowthInLengthAndWidth(x)))"]}
{"id": "eqasc_train_9627", "nl": "Meristems confer the capacity for indeterminate growth of the plant.", "fol": "", "prediction": ["all x.(Meristem(x) -> IndeterminateGrowth(x))"]}
{"id": "eqasc_train_9628", "nl": "Roots growth in length and width are indeterminate growth of the plant", "fol": "", "prediction": ["all x.((RootsGrowth(x) & IndeterminateGrowth(x)) -> (LengthGrowth(x) & WidthGrowth(x)))"]}
{"id": "eqasc_train_9629", "nl": "most plants have primary and secondary meristems for growth in length and width", "fol": "", "prediction": ["all x y.((Plant(x) & PrimaryMeristem(y) & SecondaryMeristem(y)) -> (HasMeristem(x,y) & HasMeristem(x,y) & GrowsInLengthAndWidth(x)))"]}
{"id": "eqasc_train_9630", "nl": "For example, meristems regenerate after bisection.", "fol": "", "prediction": ["all x.((Meristem(x) & Bisection(x)) -> Regeneration(x))"]}
{"id": "eqasc_train_9631", "nl": "Roots have parts that regenerate after bisection", "fol": "", "prediction": ["all x.(Root(x) -> (HasParts(x) & RegenerationAfterBisection(x)))"]}
{"id": "eqasc_train_9632", "nl": "Shrubs, trees, bushes are all powerfully rooted plants.", "fol": "", "prediction": ["all x.((Shrub(x) | Tree(x) | Bush(x)) -> PowerfullyRootedPlant(x))"]}
{"id": "eqasc_train_9633", "nl": "bushes have primary and secondary meristems", "fol": "", "prediction": ["all x.(Bubble(x) -> (HasPrimaryMeristem(x) & HasSecondaryMeristem(x)))"]}
{"id": "eqasc_train_9634", "nl": "Size is measured by width and length.", "fol": "", "prediction": ["all x.(Size(x) -> (MeasuredByWidth(x) & MeasuredByLength(x)))"]}
{"id": "eqasc_train_9635", "nl": "roots have primary and secondary meristems for growth in size", "fol": "", "prediction": ["all x.(Root(x) -> (HasPrimaryMeristems(x) & HasSecondaryMeristems(x) & GrowthInSize(x)))"]}
{"id": "eqasc_train_9636", "nl": "roots have different meristems", "fol": "", "prediction": ["all x.(Root(x) -> DifferentMeristems(x))"]}
{"id": "eqasc_train_9637", "nl": "Axillary bud meristems make branches.", "fol": "", "prediction": ["all x.(AxillaryBudMeristem(x) -> MakesBranches(x))"]}
{"id": "eqasc_train_9638", "nl": "roots turn into branches", "fol": "", "prediction": ["all x y.((Root(x) & Branch(y)) -> TurnsInto(x,y))"]}
{"id": "eqasc_train_9639", "nl": "Water in the soil is absorbed by the roots of plants.", "fol": "", "prediction": ["all x y.((Water(x) & Soil(y)) -> AbsorbedByRoots(x,y))"]}
{"id": "eqasc_train_9640", "nl": "the part of plants that absorbs water has primary and secondary meristems for growth", "fol": "", "prediction": ["all x.((PlantPart(x) & AbsorbsWater(x)) -> HasPrimaryAndSecondaryMeristems(x))"]}
{"id": "eqasc_train_9641", "nl": "Rulers are used to measure length.", "fol": "", "prediction": ["all x.(Ruler(x) -> MeasuresLength(x))"]}
{"id": "eqasc_train_9642", "nl": "The growth in roots that comes from primary and secondary meristems can be measured with a ruler", "fol": "", "prediction": ["all x y.((RootGrowth(x) & PrimaryAndSecondaryMeristems(y)) -> MeasuresWithRuler(x,y))"]}
{"id": "eqasc_train_9643", "nl": "Nitrogen is found in proteins, nucleic acids, and chlorophyll.", "fol": "", "prediction": ["all x.(Nitrogen(x) -> (FoundInProteins(x) | FoundInNucleicAcids(x) | FoundInChlorophyll(x)))"]}
{"id": "eqasc_train_9644", "nl": "Excess nitrogen causes lush growth and late plants.", "fol": "", "prediction": ["all x.(ExcessNitrogen(x) -> (LushGrowth(x) & LatePlants(x)))"]}
{"id": "eqasc_train_9645", "nl": "Proteins, nucleic acids and chlorophyll are found in lush growth and late plants. ", "fol": "", "prediction": ["all x y.((Protein(x) & NucleicAcid(y) & Chlorophyll(x)) -> (LushGrowth(x) & LatePlant(x)))"]}
{"id": "eqasc_train_9646", "nl": "Chloroplasts are the structures which manufacture chlorophyll.", "fol": "", "prediction": ["all x.(Chloroplast(x) -> (ManufacturesChlorophyll(x) & Chlorophyll(x)))"]}
{"id": "eqasc_train_9647", "nl": "Chloroplasts manufacture nitrogen", "fol": "", "prediction": ["all x.(Chloroplast(x) -> ManufacturesNitrogen(x))"]}
{"id": "eqasc_train_9648", "nl": "Most molecules are proteins or nucleic acids.", "fol": "", "prediction": ["all x.(Molecule(x) -> (Protein(x) | NucleicAcid(x)))"]}
{"id": "eqasc_train_9649", "nl": "Nitrogen is found in most molecules.", "fol": "", "prediction": ["all x.(Nitrogen(x) -> FoundInMolecules(x))"]}
{"id": "eqasc_train_9650", "nl": "life without nitrogen is impossible", "fol": "", "prediction": ["all x.((LifeWithoutNitrogen(x) & -Nitrogen(x)) -> Impossible(x))"]}
{"id": "eqasc_train_9651", "nl": "Absorption of nitrogen by plants is part of the nitrogen cycle .", "fol": "", "prediction": ["all x y.((Plant(x) & Plant(y)) -> AbsorbsNitrogen(x,y))"]}
{"id": "eqasc_train_9652", "nl": "a chemical element with symbol N and atomic number 7 is found in chlorophyll because it is absorbed in the cycle ", "fol": "", "prediction": ["all x y z.((ChemicalElement(x) & SymbolN(x) & AtomicNumber7(x) & Chlorophyll(y) & AbsorbedInCycle(z)) -> FoundIn(x,y))"]}
{"id": "eqasc_train_9653", "nl": "Lawns eat nitrogen.", "fol": "", "prediction": ["all x.(Lawn(x) -> EatsNitrogen(x))"]}
{"id": "eqasc_train_9654", "nl": "lawns eat proteins, nucleic acids, and chlorophyll", "fol": "", "prediction": ["all x.(Lawn(x) -> (EatsProteins(x) & EatsNucleicAcids(x) & EatsChlorophyll(x)))"]}
{"id": "eqasc_train_9655", "nl": "Nitrogen, as a gas, is colorless, odorless, and a generally inert element.", "fol": "", "prediction": ["all x.(Nitrogen(x) -> (Gas(x) & Colorless(x) & Odorless(x) & InertElement(x)))"]}
{"id": "eqasc_train_9656", "nl": "a colorless, odorless gas is found in proteins", "fol": "", "prediction": ["all x y.((Gas(x) & Protein(y)) -> (Colorless(x) & Odorless(x)))"]}
{"id": "eqasc_train_9657", "nl": "High Nitrogen High nitrogen causes rapid growth.", "fol": "", "prediction": ["HighNitrogen(HighNitrogen) -> CausesRapidGrowth(HighNitrogen))"]}
{"id": "eqasc_train_9658", "nl": "Causes of rapid growth are found in proteins, nucleic acids, and chlorophyll", "fol": "", "prediction": ["all x.(RapidGrowth(x) -> (FoundInProteins(x) | FoundInNucleicAcids(x) | FoundInChlorophyll(x)))"]}
{"id": "eqasc_train_9659", "nl": "DNA is assembled from nucleic acids.", "fol": "", "prediction": ["all x.(DNA(x) -> AssembledFromNucleicAcids(x))"]}
{"id": "eqasc_train_9660", "nl": "nitrogen is found in DNA", "fol": "", "prediction": ["all x y.((Nitrogen(x) & DNA(y)) -> FoundIn(x,y))"]}
{"id": "eqasc_train_9661", "nl": "Large amounts of nitrogen are found naturally in the air and soil, and in living organisms.", "fol": "", "prediction": ["all x.(LargeAmountsOfNitrogen(x) -> (FoundNaturallyInAirAndSoil(x) & FoundInLivingOrganisms(x)))"]}
{"id": "eqasc_train_9662", "nl": "Proteins,nucleic acids and chlorophyll are found naturally in the air and soil, and living organisms ", "fol": "", "prediction": ["all x y z.((Protein(x) & NucleicAcids(y) & Chlorophyll(z)) -> (FoundNaturallyInAirAndSoil(x) & FoundNaturallyInLivingOrganisms(x)))"]}
{"id": "eqasc_train_9663", "nl": "Chlorophyll gives plants a green color.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> GivesGreenColor(x))"]}
{"id": "eqasc_train_9664", "nl": "nitrogen is found in what gives plants a green color", "fol": "", "prediction": ["all x y.((Nitrogen(x) & Plant(y)) -> GreenColor(y))"]}
{"id": "eqasc_train_9665", "nl": "irradiating food can be used to kill existing microorganisms in the food", "fol": "", "prediction": ["all x y.((IrradiatingFood(x) & Microorganism(y)) -> Kills(x,y))"]}
{"id": "eqasc_train_9666", "nl": "How Irradiation Works Food is irradiated using radioactive gamma ray sources, usually radioactive cobalt-60 or .", "fol": "", "prediction": ["all x.((Food(x) & IrradiatedUsingRadioactiveGammaRaySources(x)) -> (RadioactiveCobalt-60(x) | RadioactiveCobalt60(x))))"]}
{"id": "eqasc_train_9667", "nl": "Using radioactive gamma ray sources, existing microorganisms in food can be killed", "fol": "", "prediction": ["all x y.((RadioactiveGammaRaySource(x) & Microorganism(y)) -> CanBeKilled(x,y))"]}
{"id": "eqasc_train_9668", "nl": "Cooking either diminishes or eliminates the vitamins and enzymes in fresh foods as does irradiation.", "fol": "", "prediction": ["all x y.((Cooking(x) & Irradiation(y)) -> (Disminishes(x,y) | Eliminates(x,y)))"]}
{"id": "eqasc_train_9669", "nl": "Cooking food kills organisms and vitamins. ", "fol": "", "prediction": ["all x.(CookingFood(x) -> KillsOrganismsAndVitamins(x))"]}
{"id": "eqasc_train_9670", "nl": "Bacterial microorganisms are representative of these biological factors, and e-coli food poisoning is a good example.", "fol": "", "prediction": ["all x.((BacterialMicroorganism(x) & E-coliFoodPoisoning(x)) -> RepresentativeOfBiologicalFactors(x))"]}
{"id": "eqasc_train_9671", "nl": "irradiating food can kill e-coli bacteria", "fol": "", "prediction": ["all x y.((IrradiatingFood(x) & EColibacteria(y)) -> Kills(x,y))"]}
{"id": "eqasc_train_9672", "nl": "Fermentation occurs through the action of microorganisms in the large intestine.", "fol": "", "prediction": ["all x y.((Fermentation(x) & Microorganism(y)) -> InLargeintestine(x,y))"]}
{"id": "eqasc_train_9673", "nl": "Irradiating food can be used to kill something that causes fermentation in the food", "fol": "", "prediction": ["all x y.((IrradiatingFood(x) & Food(y)) -> KillsFermentation(x,y))"]}
{"id": "eqasc_train_9674", "nl": "Microorganisms in food are also responsible for the spoilage of food.", "fol": "", "prediction": ["all x.(Microorganism(x) -> (InFood(x) & ResponsibleForSpoilage(x)))"]}
{"id": "eqasc_train_9675", "nl": "irradiating food prevents  spoilage", "fol": "", "prediction": ["all x y.((IrradiatingFood(x) & Food(y)) -> PreventsSpoilage(x,y))"]}
{"id": "eqasc_train_9676", "nl": "Bacteria is this type of microorganism.", "fol": "", "prediction": ["all x.(Bacteria(x) -> Microorganism(x))"]}
{"id": "eqasc_train_9677", "nl": "irradiating food can be used to kill bacteria in food", "fol": "", "prediction": ["all x y.((IrradiatingFood(x) & Bacteria(y)) -> KillsInFood(x,y))"]}
{"id": "eqasc_train_9678", "nl": "Food irradiation offers a solution for addressing the growing concerns associated with food safety.", "fol": "", "prediction": ["all x.(FoodIrradiation(x) -> AddressesGrowingPreoccupationsWithFoodSafety(x))"]}
{"id": "eqasc_train_9679", "nl": "killing microorganism in food is important to food safety", "fol": "", "prediction": ["all x.(KillingMicroorganismInFood(x) -> ImportantToFoodSafety(x))"]}
{"id": "eqasc_train_9680", "nl": "Food irradiation is one tool for improving food safety by killing pathogenic microorganisms.", "fol": "", "prediction": ["all x.(FoodIrradiation(x) -> (ImprovesFoodSafety(x) & KillsPathogenicMicroorganisms(x)))"]}
{"id": "eqasc_train_9681", "nl": "Irradiated food improves food safety.", "fol": "", "prediction": ["all x.(IrradiatedFood(x) -> ImprovesFoodSafety(x))"]}
{"id": "eqasc_train_9682", "nl": "Food irradiation is blazingly high-tech.", "fol": "", "prediction": ["all x.(FoodIrradiation(x) -> BlazinglyHighTech(x))"]}
{"id": "eqasc_train_9683", "nl": "a blazingly high-tech method can be used to kill existing microorganisms in the food.", "fol": "", "prediction": ["all x y.((BlazinglyHighTechMethod(x) & Food(y)) -> KillsMicroorganisms(x,y))"]}
{"id": "eqasc_train_9684", "nl": "Food-Borne Illnesses are the sickness that results from eating foods that are contaminated with harmful bacteria and other microorganisms.", "fol": "", "prediction": ["all x.(FoodBorneIllness(x) -> (Sickness(x) & ResultsFromEatingFoods(x) & ContaminatedWithHarmfulBacteriaAndMicroorganisms(x)))"]}
{"id": "eqasc_train_9685", "nl": "irradiating food can prevent some illnesses", "fol": "", "prediction": ["all x y.((IrradiatingFood(x) & Illness(y)) -> Prevents(x,y))"]}
{"id": "eqasc_train_9686", "nl": "Some microorganisms cause meat to spoil.", "fol": "", "prediction": ["exists x.(Microorganism(x) & CausesMeatToSpoil(x))"]}
{"id": "eqasc_train_9687", "nl": "irradiating food can prevent spoilage", "fol": "", "prediction": ["all x.(IrradiatingFood(x) -> PreventsSpoilage(x))"]}
{"id": "eqasc_train_9688", "nl": "Irradiation causes chemical changes.", "fol": "", "prediction": ["all x.(Irradiation(x) -> CausesChemicalChanges(x))"]}
{"id": "eqasc_train_9689", "nl": "chemical changes can be used to kill existing microorganisms in the food", "fol": "", "prediction": ["all x y.((ChemicalChange(x) & Microorganism(y)) -> KillsInFood(x,y))"]}
{"id": "eqasc_train_9690", "nl": "storms cause bodies of water to increase amount of water they contain", "fol": "", "prediction": ["all x y.((Storm(x) & BodyOfWater(y)) -> CausesIncreaseInWater(x,y))"]}
{"id": "eqasc_train_9691", "nl": "Water elevations can increase rapidly, often resulting in severe local flooding.", "fol": "", "prediction": ["all x.(WaterElevation(x) -> (RapidAccroissement(x) & SevereLocalFlooding(x)))"]}
{"id": "eqasc_train_9692", "nl": "Storms can cause flooding", "fol": "", "prediction": ["all x.(Storm(x) -> (CausesFlooding(x) & CausesFlooding(x)))"]}
{"id": "eqasc_train_9693", "nl": "Hurricanes are killer storms.", "fol": "", "prediction": ["all x.(Hurricane(x) -> KillerStorm(x))"]}
{"id": "eqasc_train_9694", "nl": "hurricanes cause bodies of water to increase amount of water they contain", "fol": "", "prediction": ["all x y.((Hurricane(x) & BodyOfWater(y)) -> CausesToIncreaseWater(x,y))"]}
{"id": "eqasc_train_9695", "nl": "Water that flows into storm drains or sewers ends up in the nearest water body.", "fol": "", "prediction": ["all x.((Water(x) & (FlowsIntoStormDrains(x) | FlowsIntoSewers(x))) -> EndsUpInNearestWaterBody(x))"]}
{"id": "eqasc_train_9696", "nl": "Rainwater increases water in the nearest water body", "fol": "", "prediction": ["all x y.((Rainwater(x) & WaterBody(y) & Nearest(x,y)) -> IncreasesWater(x,y))"]}
{"id": "eqasc_train_9697", "nl": "Bomb cyclones are intense storms, often hybrid storms.", "fol": "", "prediction": ["all x.(BombCyclone(x) -> (IntenseStorm(x) & OftenHybridStorm(x)))"]}
{"id": "eqasc_train_9698", "nl": "bomb cyclones cause bodies of water to increase amount of water they contain", "fol": "", "prediction": ["all x y.((BombCyclone(x) & BodyOfWater(y)) -> CausesIncreaseInWater(x,y))"]}
{"id": "eqasc_train_9699", "nl": "storms cause the amount that lakes contain to increase", "fol": "", "prediction": ["all x y.((Storm(x) & Lake(y)) -> CausesAmountToIncrease(x,y))"]}
{"id": "eqasc_train_9700", "nl": "More than 500 homes have been damaged by flood waters.", "fol": "", "prediction": ["more than 500 homes damaged by floodwaters."]}
{"id": "eqasc_train_9701", "nl": "Storms can cause homes to be damaged by flooding.", "fol": "", "prediction": ["all x y.((Storm(x) & Flooding(y)) -> CausesHomeDamage(x,y))"]}
{"id": "eqasc_train_9702", "nl": "Rain increases the depth of the lakes.", "fol": "", "prediction": ["all x y.((Rain(x) & Lake(y)) -> IncreasesDepth(x,y))"]}
{"id": "eqasc_train_9703", "nl": "storms make lake depth greater", "fol": "", "prediction": ["all x y.((Storm(x) & Lake(y)) -> MakesDepthGreater(x,y))"]}
{"id": "eqasc_train_9704", "nl": "Storms cause lakes to increase. ", "fol": "", "prediction": ["all x.(Storm(x) -> CausesLakeIncrease(x))"]}
{"id": "eqasc_train_9705", "nl": "storms cause Lakes  to increase", "fol": "", "prediction": ["all x y.((Storm(x) & Lake(y)) -> Increases(y,x))"]}
{"id": "eqasc_train_9706", "nl": "Pneumonia may be caused by an infection or injury of the lungs.", "fol": "", "prediction": ["all x.(Pneumonia(x) -> (Infection(x) | Injury(x)))"]}
{"id": "eqasc_train_9707", "nl": "If fluid builds up within the lung tissue , it is called pneumonia.", "fol": "", "prediction": ["all x.((FluidBuildsUpWithinLungTissue(x)) -> Pneumonia(x))"]}
{"id": "eqasc_train_9708", "nl": "fluid build up in the lung tissue may be caused by infection or injury of the lungs", "fol": "", "prediction": ["all x.(LungTissue(x) -> (Infection(x) | Injury(x)))"]}
{"id": "eqasc_train_9709", "nl": "Common bacterial pneumonia can be caused by Streptococcus pneumonia or Klebsiella pneumonia .", "fol": "", "prediction": ["all x.(CommonBacterialPneumonia(x) -> (CausedByStreptococcus(x) | CausedByKlebsiella(x)))"]}
{"id": "eqasc_train_9710", "nl": "injury of the lungs can be caused by a bacterial infection", "fol": "", "prediction": ["all x y.((InjuryOfLungs(x) & BacterialInfection(y)) -> CausedBy(x,y))"]}
{"id": "eqasc_train_9711", "nl": "Infections of the lungs can be caused by bacteria, viruses or fungi.", "fol": "", "prediction": ["all x.(InfectionOfLungs(x) -> (CausedByBacteria(x) | CausedByViruses(x) | CausedByFungi(x)))"]}
{"id": "eqasc_train_9712", "nl": "Pneumonia may be caused by viruses or injury ", "fol": "", "prediction": ["all x.(Pneumonia(x) -> (CausedByViruses(x) | CausedByInjury(x)))"]}
{"id": "eqasc_train_9713", "nl": "Legionnaires' disease is a type of pneumonia.", "fol": "", "prediction": ["all x.(LegionnairesDisease(x) -> Pneumonia(x))"]}
{"id": "eqasc_train_9714", "nl": "Legionnaires' disease may be caused by an infection or injury of the lungs.", "fol": "", "prediction": ["all x.(LegionnairesDisease(x) -> (Infection(x) | Injury(x)))"]}
{"id": "eqasc_train_9715", "nl": "Smoke inhalation and thermal lung injury cause direct lung injury.", "fol": "", "prediction": ["all x.((SmokeInhalation(x) & ThermalLungInjury(x)) -> CausesDirectLungInjury(x))"]}
{"id": "eqasc_train_9716", "nl": "Pneumonia may be caused by an infection or smoke inhalation", "fol": "", "prediction": ["all x.(Pneumonia(x) -> (Infection(x) | SmokeInhalation(x)))"]}
{"id": "eqasc_train_9717", "nl": "Viral pneumonia is usually milder than bacterial pneumonia.", "fol": "", "prediction": ["all x.((ViralPneumonia(x) & BacterialPneumonia(x)) -> MilderThan(x,bacterialPneumonia))"]}
{"id": "eqasc_train_9718", "nl": "Viral and bacterial disease can both be caused by injury of the lungs", "fol": "", "prediction": ["all x y.((ViralDisease(x) & BacterialDisease(y)) -> (CausedByInjuryOfLungs(x) & CausedByInjuryOfLungs(x)))"]}
{"id": "eqasc_train_9719", "nl": "Mammals breathe air with lungs.", "fol": "", "prediction": ["all x.(Mammal(x) -> BreathesAirWithLungs(x))"]}
{"id": "eqasc_train_9720", "nl": "Pneumonia may be caused by an infection or injury of the organs used to breathe air", "fol": "", "prediction": ["all x.(Pneumonia(x) -> (InfectionOrInjuryOfOrgans(x) & BreathesAir(x)))"]}
{"id": "eqasc_train_9721", "nl": "Lung injuries are treated with bronchodilatory treatment.", "fol": "", "prediction": ["all x.(LungInjuries(x) -> BronchodilatoryTreatment(x))"]}
{"id": "eqasc_train_9722", "nl": "Pneumonia can be treated with bronchodilatory treatment.", "fol": "", "prediction": ["all x.(Pneumonia(x) -> CanBeTreatedWithBronchodilatoryTreatment(x))"]}
{"id": "eqasc_train_9723", "nl": "Death was attributed to pneumonia.", "fol": "", "prediction": ["all x.(Death(x) -> AttributedToPneumonia(x))"]}
{"id": "eqasc_train_9724", "nl": "infection or injury of the lungs can result in death", "fol": "", "prediction": ["all x.((Infection(x) | InjuryOfLungs(x)) -> CanResultInDeath(x))"]}
{"id": "eqasc_train_9725", "nl": "Streptococcal pneumonia is caused by the bacteria Streptococcus pneumoniae.", "fol": "", "prediction": ["all x.(StreptococcalPneumonia(x) -> CausedByStaphylococcusPneumoniae(x))"]}
{"id": "eqasc_train_9726", "nl": "Streptococcus can infect the lungs following injury.", "fol": "", "prediction": ["all x.(Streptococcus(x) -> CanInfectLungs(x))"]}
{"id": "eqasc_train_9727", "nl": "Opportunistic infections, such as Pneumocystis carinii pneumonia, begin to occur.", "fol": "", "prediction": ["all x.((PneumocystisCarniii(x) & PneumocystisCarniii(x)) -> Occurs(x))"]}
{"id": "eqasc_train_9728", "nl": "Opportunistic infections may be a result of an infection or injury of the lungs.", "fol": "", "prediction": ["all x.(OpportunisticInfection(x) -> (InfectionOrInjuryOfLungs(x)))"]}
{"id": "eqasc_train_9729", "nl": "poison causes harm to living things", "fol": "", "prediction": ["all x y.((Poison(x) & LivingThing(y)) -> CausesHarmTo(x,y))"]}
{"id": "eqasc_train_9730", "nl": "Birds, like all living things, have intrinsic value.", "fol": "", "prediction": ["all x.(Bird(x) -> (LivingThing(x) & HasIntroductionValue(x)))"]}
{"id": "eqasc_train_9731", "nl": "poison causes harm to birds", "fol": "", "prediction": ["all x y.((Poison(x) & Bird(y)) -> CausesHarmTo(x,y))"]}
{"id": "eqasc_train_9732", "nl": "Like all living things, human beings are affected by their environment.", "fol": "", "prediction": ["all x.(Human(x) -> (AffectedByEnvironment(x) | AffectedByEnvironment(x)))"]}
{"id": "eqasc_train_9733", "nl": "poison causes harm to human beings", "fol": "", "prediction": ["all x y.((Poison(x) & Human(y)) -> CausesHarmTo(x,y))"]}
{"id": "eqasc_train_9734", "nl": "When living things die, they quickly begin to decay.", "fol": "", "prediction": ["all x.((LivingThing(x) & Die(x)) -> RapidDecay(x))"]}
{"id": "eqasc_train_9735", "nl": "Poison causes things to die and quickly decay.", "fol": "", "prediction": ["all x.(Poison(x) -> (CausesThingsToDie(x) & RapidlyDecay(x)))"]}
{"id": "eqasc_train_9736", "nl": "Toxins or poisons are a stress.", "fol": "", "prediction": ["all x.((Toxin(x) | Poison(x)) -> Stress(x))"]}
{"id": "eqasc_train_9737", "nl": "stress causes harm to living things", "fol": "", "prediction": ["all x.(Stress(x) -> CausesHarmToLivingThings(x))"]}
{"id": "eqasc_train_9738", "nl": "Most of the snakes that live in swamps are poisonous.", "fol": "", "prediction": ["all x.((Snake(x) & LivesInSwamp(x)) -> Poisonous(x))"]}
{"id": "eqasc_train_9739", "nl": "snakes cause harm to living things", "fol": "", "prediction": ["all x y.((Snake(x) & LivingThing(y)) -> CausesHarmTo(x,y))"]}
{"id": "eqasc_train_9740", "nl": "Lead poisoning is one of the more common poisonings in birds.", "fol": "", "prediction": ["all x.(LeadPoisoning(x) -> CommonPoisoning(x))"]}
{"id": "eqasc_train_9741", "nl": "Lead causes harm to living things", "fol": "", "prediction": ["all x y.((Lead(x) & LivingThing(y)) -> CausesHarmTo(x,y))"]}
{"id": "eqasc_train_9742", "nl": "Poisoning is similar to paralytic shellfish poisoning .", "fol": "", "prediction": ["all x.(Poisoning(x) -> ParalyticShellfishPoisoning(x))"]}
{"id": "eqasc_train_9743", "nl": "Paralytic shellfish cause harm to living things.", "fol": "", "prediction": ["all x.(ParalyticShellfish(x) -> CausesHarmToLivingThings(x))"]}
{"id": "eqasc_train_9744", "nl": "Carbon monoxide and cyanide are poisons.", "fol": "", "prediction": ["all x.(Poison(x) -> (CarbonMonoxide(x) | Cyanide(x)))"]}
{"id": "eqasc_train_9745", "nl": "cyanide causes harm to living things", "fol": "", "prediction": ["all x y.((Cyanide(x) & LivingThing(y)) -> CausesHarmTo(x,y))"]}
{"id": "eqasc_train_9746", "nl": "Toxic food poisoning is caused by eating plants that are poisonous.", "fol": "", "prediction": ["all x.(ToxicFoodPoisoning(x) -> (EatsPoisonousPlants(x) & Causes(x,y)))"]}
{"id": "eqasc_train_9747", "nl": "Toxic food causes harm to living things", "fol": "", "prediction": ["all x.(ToxicFood(x) -> CausesHarmToLivingThings(x))"]}
{"id": "eqasc_train_9748", "nl": "Rattlesnakes can inject poisonous venom.", "fol": "", "prediction": ["all x.(Rattlesnake(x) -> InjectsPoisonousVenom(x))"]}
{"id": "eqasc_train_9749", "nl": "venom causes harm to living things", "fol": "", "prediction": ["all x y.((Venom(x) & LivingThing(y)) -> CausesHarmTo(x,y))"]}
{"id": "eqasc_train_9750", "nl": "Most disinfectants contain organic solvents that are flammable and poisonous.", "fol": "", "prediction": ["all x.(Disinfectant(x) -> (ContainsOrganicSolvents(x) & Flammable(x) & Poisonous(x)))"]}
{"id": "eqasc_train_9751", "nl": "Most disinfectants contain solvents that can harm living things.", "fol": "", "prediction": ["all x.(Disinfectant(x) -> (ContainsSolvents(x) & CanHarmLivingThings(x)))"]}
{"id": "eqasc_train_9752", "nl": "Some plants are deadly poisonous .", "fol": "", "prediction": ["exists x.(Plant(x) & LethalPoisonous(x))"]}
{"id": "eqasc_train_9753", "nl": "Some plants causes harm to living things.", "fol": "", "prediction": ["exists x.(Plant(x) & CausesHarmToLivingThings(x))"]}
{"id": "eqasc_train_9754", "nl": "Arsenic compounds are poisonous.", "fol": "", "prediction": ["all x.(ArsenicCompound(x) -> Poisonous(x))"]}
{"id": "eqasc_train_9755", "nl": "Arsenic compounds cause harm to living things", "fol": "", "prediction": ["all x.(ArsenicCompound(x) -> CausesHarmToLivingThings(x))"]}
{"id": "eqasc_train_9756", "nl": "Arsenic causes harm to living things", "fol": "", "prediction": ["all x.(Arsenic(x) -> CausesHarmToLivingThings(x))"]}
{"id": "eqasc_train_9757", "nl": "Evaporation of sweat uses energy, and the energy comes from body heat.", "fol": "", "prediction": ["all x y.((EvaporationOfSweet(x) & BodyHeat(y)) -> UsesEnergy(x,y))"]}
{"id": "eqasc_train_9758", "nl": "Animals are inefficient energy converters.", "fol": "", "prediction": ["all x.(Animal(x) -> InefficientEnergyConverter(x))"]}
{"id": "eqasc_train_9759", "nl": "Animals produce body heat which is dissipated by sweat.", "fol": "", "prediction": ["all x.(Animal(x) -> (ProducesBodyHeat(x) & DissipatedBySweat(x)))"]}
{"id": "eqasc_train_9760", "nl": "When sweat comes in contact with the skin it is cooled as the sweat evaporates.", "fol": "", "prediction": ["all x.((Sweat(x) & ComesInContactWithSkin(x)) -> CooledAsSweatEvaporates(x))"]}
{"id": "eqasc_train_9761", "nl": "sweat evaporates heat from skin", "fol": "", "prediction": ["all x y.((Sweat(x) & Skin(y)) -> EvaporatesHeatFrom(x,y))"]}
{"id": "eqasc_train_9762", "nl": "Evaporation of perspiration uses energy and the energy comes from body heat.", "fol": "", "prediction": ["all x y.((EvaporationOfPerspiration(x) & BodyHeat(y)) -> (UsesEnergy(x) & ComesFrom(x,y)))"]}
{"id": "eqasc_train_9763", "nl": "Sweat glands pump perspiration through pores.", "fol": "", "prediction": ["all x.(SweatGlands(x) -> PumpsPerspirationThroughPoors(x))"]}
{"id": "eqasc_train_9764", "nl": "Perspiration comes through pores and is evaporated by energy from body heat.", "fol": "", "prediction": ["all x.(Perspiration(x) -> (ComesThroughPoors(x) & EvaporatedByEnergyFromBodyHeat(x)))"]}
{"id": "eqasc_train_9765", "nl": "energy leaves from body heat when sweat comes in contact with the skin", "fol": "", "prediction": ["all x y.((EnergyLeavesFromBodyHeat(x) & SweatComesInContactWithSkin(y)) -> EnergyLeavesFromBodyHeat(x,y))"]}
{"id": "eqasc_train_9766", "nl": "Kinetic energy comes from heat.", "fol": "", "prediction": ["all x.(KineticEnergy(x) -> ComesFromHeat(x))"]}
{"id": "eqasc_train_9767", "nl": "Evaporation of sweat uses kinetic energy from the body.", "fol": "", "prediction": ["all x.(EvaporationOfSweet(x) -> UsesKineticEnergyFromBody(x))"]}
{"id": "eqasc_train_9768", "nl": "Energy is the body's fuel.", "fol": "", "prediction": ["all x.(Energy(x) -> BodyFuel(x))"]}
{"id": "eqasc_train_9769", "nl": "When sweat is evaporated, the body's fuel is used.", "fol": "", "prediction": ["all x.((SweatEvaporated(x) & BodyFuel(x)) -> Used(x))"]}
{"id": "eqasc_train_9770", "nl": "evaporation of sweat requires food", "fol": "", "prediction": ["all x y.((EvaporationOfSweat(x) & Food(y)) -> Requires(x,y))"]}
{"id": "eqasc_train_9771", "nl": "When sweat is evaporated into the air, it provides additional cooling.", "fol": "", "prediction": ["all x.((SweatEvaporated(x) & Air(x)) -> ProvidesAdditionalCooling(x))"]}
{"id": "eqasc_train_9772", "nl": "Cooling uses energy, and the energy comes from body heat.", "fol": "", "prediction": ["all x y.((Cooling(x) & BodyHeat(y)) -> UsesEnergy(x))"]}
{"id": "eqasc_train_9773", "nl": "Heat When exercising, the body creates excess heat.", "fol": "", "prediction": ["Heat (Exercising(Body) -> CreatesExcessHeat(Body))"]}
{"id": "eqasc_train_9774", "nl": "Evaporation of sweat uses energy, and the energy comes from exercise", "fol": "", "prediction": ["all x y z.((EvaporationOfSweet(x) & Energy(y) & Exercise(z)) -> (Uses(x,y) & ComesFrom(y,z)))"]}
{"id": "eqasc_train_9775", "nl": "humidity interferes with sweat", "fol": "", "prediction": ["all x.(HumidityInterference(x) -> Sweat(x))"]}
{"id": "eqasc_train_9776", "nl": "erosion causes a river to become deeper and wider", "fol": "", "prediction": ["all x y.((River(x) & Erosion(y)) -> (BecomesDeeper(x,y) & Wider(x,y)))"]}
{"id": "eqasc_train_9777", "nl": "Erosion is loss of soil caused by rain and wind.", "fol": "", "prediction": ["all x.(Erosion(x) -> (LossOfSoil(x) & CausedByRain(x) & CausedByWind(x)))"]}
{"id": "eqasc_train_9778", "nl": "Wind and rain cause a river to become deeper and wider.", "fol": "", "prediction": ["all x y.((River(x) & Wind(y) & Rain(y)) -> (BecomesDeeper(x,y) & Wider(x,y)))"]}
{"id": "eqasc_train_9779", "nl": "erosion forms canyons", "fol": "", "prediction": ["all x y.((Erosion(x) & Canyon(y)) -> Forms(x,y))"]}
{"id": "eqasc_train_9780", "nl": "rivers cut deeper and wider to form canyons", "fol": "", "prediction": ["all x y z.((River(x) & Canyon(y) & Deeper(z)) -> CutsWide(x,y,z))"]}
{"id": "eqasc_train_9781", "nl": "Canyons are formed as rivers become deeper and wider", "fol": "", "prediction": ["all x y.((Canyon(x) & River(y)) -> (FormedAs(x,y) & DeeperAndWider(y)))"]}
{"id": "eqasc_train_9782", "nl": "rivers are what form canyons", "fol": "", "prediction": ["all x y.((River(x) & Canyon(y)) -> Forms(x,y))"]}
{"id": "eqasc_train_9783", "nl": "The power of wind and water can cause a river to deepen and widen", "fol": "", "prediction": ["all x y.((Wind(x) & Water(y)) -> (CanDeepen(x,y) & CanWiden(x,y)))"]}
{"id": "eqasc_train_9784", "nl": "Less soil is lost to erosion.", "fol": "", "prediction": ["all x.(LessSoil(x) -> LostToErosion(x))"]}
{"id": "eqasc_train_9785", "nl": "soil loss causes a river to become deeper and wider", "fol": "", "prediction": ["all x y.((River(x) & River(y)) -> (SoilLoss(x,y) & Deeper(y) & Wider(y)))"]}
{"id": "eqasc_train_9786", "nl": "Weathering and erosion continue to shape it today.", "fol": "", "prediction": ["all x.((Weathering(x) & Erosion(x)) -> ShapesToday(x))"]}
{"id": "eqasc_train_9787", "nl": "Weathering causes a river to become deeper and wider.", "fol": "", "prediction": ["all x y.((River(x) & Weathering(y)) -> (BecomesDeeper(x,y) & Wider(x,y)))"]}
{"id": "eqasc_train_9788", "nl": "Erosion alters the constituents carried by water.", "fol": "", "prediction": ["all x.(Erosion(x) -> AltersConstituentsCarriedByWater(x))"]}
{"id": "eqasc_train_9789", "nl": "Deeper and wider rivers alter the constituents carried by water", "fol": "", "prediction": ["all x y.((River(x) & Deeper(x) & Wider(x)) -> AltersConstituentsCarriedByWater(y))"]}
{"id": "eqasc_train_9790", "nl": "Erosion is the work of wind, water, and time.", "fol": "", "prediction": ["all x.(Erosion(x) -> (WorksOfWind(x) & WorksOfWater(x) & WorksOfTime(x)))"]}
{"id": "eqasc_train_9791", "nl": "the work of wind, water, and time causes a river to become deeper and wider", "fol": "", "prediction": ["all x y z.((WorkOfWindWaterTime(x) & River(y) & River(z)) -> (BecomesDeeper(y,z) & Wider(z)))"]}
{"id": "eqasc_train_9792", "nl": "Water and the Nile River are important to Egypt.", "fol": "", "prediction": ["all x.((Water(x) & NileRiver(x)) -> ImportantToEgypt(x))"]}
{"id": "eqasc_train_9793", "nl": "Erosion causes the Nile to become deeper and wider.", "fol": "", "prediction": ["all x.(Erosion(x) -> (DegreesNile(x) & WiderNile(x)))"]}
{"id": "eqasc_train_9794", "nl": "Major rivers include the Severn, Thames and Trent.", "fol": "", "prediction": ["(MajorRiver(River) -> (Severn(River) | Thames(River) | Trent(River)))"]}
{"id": "eqasc_train_9795", "nl": "erosion causes the Thames to become deeper and wider", "fol": "", "prediction": ["all x.(Erosion(x) -> (MakingThamesDeeper(x) & MakingThamesWide(x)))"]}
{"id": "eqasc_train_9796", "nl": "Fertile topsoil is then lost in erosion.", "fol": "", "prediction": ["all x.(FertileTopsoil(x) -> LostInErosion(x))"]}
{"id": "eqasc_train_9797", "nl": "deepening rivers cause the loss of topsoil", "fol": "", "prediction": ["all x y.((River(x) & Deepening(x)) -> LossOfTopsoil(y))"]}
{"id": "eqasc_train_9798", "nl": "Erosion is the movement of soil by water.", "fol": "", "prediction": ["all x.(Erosion(x) -> (MovementOfSoil(x) & Water(x)))"]}
{"id": "eqasc_train_9799", "nl": "Water moving soil causes rivers to be deeper", "fol": "", "prediction": ["all x y.((WaterMovingSoil(x) & River(y)) -> CausesToBeFermier(x,y))"]}
{"id": "eqasc_train_9800", "nl": "Clearing of land can lead to erosion of soil into the river.", "fol": "", "prediction": ["all x y.((ClearingOfLand(x) & River(y)) -> LeadsToErosion(x,y))"]}
{"id": "eqasc_train_9801", "nl": "clearing land can make a river wider", "fol": "", "prediction": ["all x y.((River(x) & ClearingLand(x)) -> Wider(x,y))"]}
{"id": "eqasc_train_9802", "nl": "On the contrary, the NILE is the longest river in Africa.", "fol": "", "prediction": ["(LongestRiverInAfrica(NILE) & -LongestRiverInAfrica(NILE))"]}
{"id": "eqasc_train_9803", "nl": "If eroded the Nile would become deeper and wider", "fol": "", "prediction": ["all x.(Eroded(x) -> NileDegreesAndWider(x))"]}
{"id": "eqasc_train_9804", "nl": "a light bulb requires electrical energy to produce light", "fol": "", "prediction": ["all x.(LightBulb(x) -> RequiresElectricalEnergyToProduceLight(x))"]}
{"id": "eqasc_train_9805", "nl": "The electricity that a light bulb uses to produce light turns into heat", "fol": "", "prediction": ["all x y.((Electricity(x) & LightBulb(y) & UsesToProduceLight(x,y)) -> Heat(x))"]}
{"id": "eqasc_train_9806", "nl": "a light bulb requires energy to produce light", "fol": "", "prediction": ["all x.(LightBulb(x) -> RequiresEnergyToProduceLight(x))"]}
{"id": "eqasc_train_9807", "nl": "Black numbers on a white background are easier to see in darkness or bright light.", "fol": "", "prediction": ["all x.((BlackNumber(x) & WhiteBackground(x)) -> (EasierToSeeInDarkness(x) | EasierToSeeInBrightLight(x)))"]}
{"id": "eqasc_train_9808", "nl": "Bulbs require electrical energy to see in darkness.", "fol": "", "prediction": ["all x.(Bulb(x) -> RequiresElectricalEnergy(x))"]}
{"id": "eqasc_train_9809", "nl": "Another use for electric heat is in regular light bulbs .", "fol": "", "prediction": ["all x.((UseForElectricHeat(x) & InRegularLightBulbs(x)) -> UseForElectricHeat(x))"]}
{"id": "eqasc_train_9810", "nl": "energy is used in a light bulb", "fol": "", "prediction": ["all x y.((LightBulb(x) & LightBulb(y)) -> UsesEnergyIn(x,y))"]}
{"id": "eqasc_train_9811", "nl": "a light bulb requires a power plant to produce light", "fol": "", "prediction": ["all x y.((LightBulb(x) & PowerPlant(y)) -> Requires(x,y))"]}
{"id": "eqasc_train_9812", "nl": "a light bulb requires the flow of electrons to produce light", "fol": "", "prediction": ["all x.(LightBulb(x) -> RequiresFlowOfElectrons(x))"]}
{"id": "eqasc_train_9813", "nl": "Additional track lighting brightens the overall space.", "fol": "", "prediction": ["all x.((TrackLighting(x) & BrightensSpace(x)) -> Additional(x))"]}
{"id": "eqasc_train_9814", "nl": "A bulb with electrical energy brightens the overall space.", "fol": "", "prediction": ["all x.((Bulb(x) & ElectricalEnergy(x)) -> BrightensOverallSpace(x))"]}
{"id": "eqasc_train_9815", "nl": "Much of the energy from a light bulb is heat.", "fol": "", "prediction": ["all x.(LightBulb(x) -> Heat(x))"]}
{"id": "eqasc_train_9816", "nl": "light bulbs use heat", "fol": "", "prediction": ["all x.(LightBulb(x) -> UsesHeat(x))"]}
{"id": "eqasc_train_9817", "nl": "Light is a part of the electromagnetic spectrum.", "fol": "", "prediction": ["all x.(Light(x) -> PartOfElectromagneticSpectrum(x))"]}
{"id": "eqasc_train_9818", "nl": "A bulb requires electrical energy to produce part of the electromagnetic spectrum.", "fol": "", "prediction": ["all x.(Bulb(x) -> RequiresElectricalEnergy(x))"]}
{"id": "eqasc_train_9819", "nl": "Energy-saving light bulbs are essentially fluorescent light bulbs.", "fol": "", "prediction": ["all x.(EnergySavingLightBulb(x) -> FluorescentLightBulb(x))"]}
{"id": "eqasc_train_9820", "nl": "Energy-saving is important when electrical energy is used to produce light", "fol": "", "prediction": ["all x.((ElectricalEnergy(x) & UsedToProduceLight(x)) -> EnergySaving(x))"]}
{"id": "eqasc_train_9821", "nl": "Energy is used by power plants to make electricity.", "fol": "", "prediction": ["all x y.((PowerPlant(x) & Energy(y)) -> MakesElectricity(x,y))"]}
{"id": "eqasc_train_9822", "nl": "Light is electromagnetic radiation.", "fol": "", "prediction": ["all x.(Light(x) -> ElectromagneticRadiation(x))"]}
{"id": "eqasc_train_9823", "nl": "A bulb requires electrical energy to produce electromagnetic radiation.", "fol": "", "prediction": ["all x.(Bulb(x) -> RequiresElectricalEnergy(x))"]}
{"id": "eqasc_train_9824", "nl": "Coal today is mostly used for power plants creating electricity.", "fol": "", "prediction": ["all x.(Coal(x) -> (UsedForPowerPlants(x) & CreatesElectricity(x)))"]}
{"id": "eqasc_train_9825", "nl": "coal can power a light bulb", "fol": "", "prediction": ["all x y.((Coal(x) & LightBulb(y)) -> Powers(x,y))"]}
{"id": "eqasc_train_9826", "nl": "Solar-powered lights that use LED bulbs provide the most efficient and most hours of light at night.", "fol": "", "prediction": ["all x.((SolarPoweredLight(x) & UsesLEDBulbs(x)) -> ProvidesEfficientLight(x) & ProvidesMostHoursOfLight(x))"]}
{"id": "eqasc_train_9827", "nl": "Solar-powered LED lights require electrical energy to produce light at night", "fol": "", "prediction": ["all x.((SolarPoweredLEDLight(x) & RequiresElectricalEnergy(x)) -> ProducesLightAtNight(x))"]}
{"id": "eqasc_train_9828", "nl": "Light quanta are called photons.", "fol": "", "prediction": ["all x.(LightQuanta(x) -> Photon(x))"]}
{"id": "eqasc_train_9829", "nl": "a lightbulb requires electrical energy to produce photons", "fol": "", "prediction": ["all x.(Lightbulb(x) -> RequiresElectricalEnergyToProducePhotons(x))"]}
{"id": "eqasc_train_9830", "nl": "Ray translates as light .", "fol": "", "prediction": ["all x.(Ray(x) -> TranslatesAsLight(x))"]}
{"id": "eqasc_train_9831", "nl": "a bulb requires electrical energy to produce rays.", "fol": "", "prediction": ["all x.(Bulb(x) -> RequiresElectricalEnergy(x))"]}
{"id": "eqasc_train_9832", "nl": "Ribosomes are sites where proteins are made.", "fol": "", "prediction": ["all x.(Ribosome(x) -> SiteWhereProteinsMade(x))"]}
{"id": "eqasc_train_9833", "nl": "Ribosomes consist of ribosomal RNA and proteins.", "fol": "", "prediction": ["all x.(Ribosome(x) -> (ConsistsOfRibosomalRNA(x) & ConsistsOfProteins(x)))"]}
{"id": "eqasc_train_9834", "nl": "ribosomes have RNA", "fol": "", "prediction": ["all x.(Ribosome(x) -> HasRNA(x))"]}
{"id": "eqasc_train_9835", "nl": "Functional proteins are called enzymes .", "fol": "", "prediction": ["all x.(FunctionalProtein(x) -> Enzyme(x))"]}
{"id": "eqasc_train_9836", "nl": "Ribosomes are sites where enzymes are made", "fol": "", "prediction": ["all x.(Ribosome(x) -> EnzymeMakingSite(x))"]}
{"id": "eqasc_train_9837", "nl": "Endoplasmic reticulum are membranes attached to sites where proteins are made", "fol": "", "prediction": ["all x.(EndoplasmicReticulum(x) -> (Membrane(x) & AttachedToSites(x) & ProteinsMadeInSites(x)))"]}
{"id": "eqasc_train_9838", "nl": "Ribosomes consist of RNA and proteins.", "fol": "", "prediction": ["all x.(Ribosome(x) -> (ConsistsOfRNA(x) & ConsistsOfProteins(x)))"]}
{"id": "eqasc_train_9839", "nl": "ribosomes contain RNA", "fol": "", "prediction": ["all x.(Ribosome(x) -> ContainsRNA(x))"]}
{"id": "eqasc_train_9840", "nl": "sites where proteins are made consist of RNA and proteins", "fol": "", "prediction": ["all x y.((Site(x) & Protein(y)) -> (MadeOf(x,y) & ContainsRNA(x) & MadeOf(x,y)))"]}
{"id": "eqasc_train_9841", "nl": "proteins are made inside the nucleus", "fol": "", "prediction": ["all x y.((Protein(x) & Nucleus(y)) -> MadeInside(x,y))"]}
{"id": "eqasc_train_9842", "nl": "Soy protein is a complete protein.", "fol": "", "prediction": ["all x.(SoyProtein(x) -> CompleteProtein(x))"]}
{"id": "eqasc_train_9843", "nl": "Soy contains ribosomes.", "fol": "", "prediction": ["all x.(Soy(x) -> ContainsRibosomes(x))"]}
{"id": "eqasc_train_9844", "nl": "Biomolecules covered include amino acids, proteins, enzymes, vitamins and hormones.", "fol": "", "prediction": ["all x.(Biomolecule(x) -> (AminoAcids(x) | Proteins(x) | Enzymes(x) | Vitamins(x) | Hormones(x)))"]}
{"id": "eqasc_train_9845", "nl": "Ribosomes are sites where biomolecules are made.", "fol": "", "prediction": ["all x.(Ribosome(x) -> SiteWhereBiomoleculesMade(x))"]}
{"id": "eqasc_train_9846", "nl": "a light bulb converts electrical energy into light energy when it is turned on", "fol": "", "prediction": ["all x.((LightBulb(x) & TurnedOn(x)) -> ConvertsElectricalEnergyToLightEnergy(x))"]}
{"id": "eqasc_train_9847", "nl": "A photon is a packet of light energy.", "fol": "", "prediction": ["all x.(Photon(x) -> LightEnergyPackage(x))"]}
{"id": "eqasc_train_9848", "nl": "a bulb converts electrical energy into photons", "fol": "", "prediction": ["all x y.((Bulb(x) & ElectricalEnergy(y)) -> ConvertsToPhotons(x,y))"]}
{"id": "eqasc_train_9849", "nl": "Too much ultraviolet energy may cause skin cancer.", "fol": "", "prediction": ["all x.((UltravioletEnergy(x) & TooMuch(x)) -> MayCauseSkinCancer(x))"]}
{"id": "eqasc_train_9850", "nl": "Certain light bulbs may cause skin cancer", "fol": "", "prediction": ["exists x.(LightBulb(x) & LightBulb(x) & CausesSkinCancer(x))"]}
{"id": "eqasc_train_9851", "nl": "In Denver, traffic signal lights are being converted to the new energy-saving bulbs.", "fol": "", "prediction": ["all x y.((Denver(x) & TrafficSignalLight(y)) -> ConvertedToEnergySavingBulbs(y))"]}
{"id": "eqasc_train_9852", "nl": "Something in a traffic signal converts electrical energy into light energy when it is turned on", "fol": "", "prediction": ["all x y.((TrafficSignal(x) & ElectricalEnergy(y) & TurnedOn(x)) -> ConvertsToLightEnergy(x,y))"]}
{"id": "eqasc_train_9853", "nl": "Light bulbs are rated in Watts.", "fol": "", "prediction": ["all x.(LightBulb(x) -> RatedInWatts(x))"]}
{"id": "eqasc_train_9854", "nl": "converts electrical energy into light energy which are rated in watts", "fol": "", "prediction": ["all x y.((ElectricalEnergy(x) & LightEnergy(y)) -> ConvertsTo(x,y))"]}
{"id": "eqasc_train_9855", "nl": "Lamps convert electrical energy to electromagnetic radiation or light.", "fol": "", "prediction": ["all x.(Lamp(x) -> (ConvertsElectricalEnergy(x) & (ElectromagneticRadiation(x) | Light(x))))"]}
{"id": "eqasc_train_9856", "nl": "When a light bulb is turned on, the energy emitted is electromagnetic radiation", "fol": "", "prediction": ["all x.((LightBulb(x) & TurnedOn(x)) -> EmitsElectromagneticRadiation(x))"]}
{"id": "eqasc_train_9857", "nl": "electrical energy  is converted into heat energy", "fol": "", "prediction": ["all x y.((ElectricalEnergy(x) & HeatEnergy(y)) -> ConvertedTo(x,y))"]}
{"id": "eqasc_train_9858", "nl": "Fluorescent light bulbs use half the electricity of standard bulbs.", "fol": "", "prediction": ["all x.(FluidescentLightBulb(x) -> UsesHalfEnergyOfStandardBulbs(x))"]}
{"id": "eqasc_train_9859", "nl": "flourescent bulbs use less electric energy", "fol": "", "prediction": ["all x.(FlourescentBulb(x) -> UsesLessElectricEnergy(x))"]}
{"id": "eqasc_train_9860", "nl": "A light bulb emits photons when turned on.", "fol": "", "prediction": ["all x.((LightBulb(x) & TurnedOn(x)) -> EmitsPhotons(x))"]}
{"id": "eqasc_train_9861", "nl": "A light bulb uses heat when it converts electrical energy.", "fol": "", "prediction": ["all x.((LightBulb(x) & ConvertsElectricalEnergy(x)) -> UsesHeat(x))"]}
{"id": "eqasc_train_9862", "nl": "light bulbs change electricity into heat", "fol": "", "prediction": ["all x y.((LightBulb(x) & Electricity(y)) -> ChangesIntoHeat(x,y))"]}
{"id": "eqasc_train_9863", "nl": "Light is a form of radiant energy.", "fol": "", "prediction": ["all x.(Light(x) -> RadiantEnergy(x))"]}
{"id": "eqasc_train_9864", "nl": "a bulb converts electrical energy into radiant energy when turned on", "fol": "", "prediction": ["all x y.((Bulb(x) & TurnedOn(y)) -> ConvertsElectricalEnergyToRadiationEnergy(x,y))"]}
{"id": "eqasc_train_9865", "nl": "Yeast reproduce asexually by budding.", "fol": "", "prediction": ["all x.(Yeast(x) -> ReproducesAsexuallyByBadding(x))"]}
{"id": "eqasc_train_9866", "nl": "Yeasts reproduce by forming spores or by budding.", "fol": "", "prediction": ["all x.(Yeast(x) -> (ReproducesByFormingSpores(x) | ReproducesByBadding(x)))"]}
{"id": "eqasc_train_9867", "nl": "Yeast reproduces asexually by forming spores", "fol": "", "prediction": ["all x.(Yeast(x) -> (ReproducesAsexually(x) & FormsSpores(x)))"]}
{"id": "eqasc_train_9868", "nl": "Yeasts Yeasts are simple eukaryotes .", "fol": "", "prediction": ["all x.(Yeast(x) -> (SimpleEukaryote(x) & SimpleEukaryote(x)))"]}
{"id": "eqasc_train_9869", "nl": "simple eukaryotes reproduce asexually by budding", "fol": "", "prediction": ["all x y.((Eukaryote(x) & Simple(x) & Budding(y)) -> ReproducesAsexually(x,y))"]}
{"id": "eqasc_train_9870", "nl": "Yeasts Yeasts are small, single-celled plants.", "fol": "", "prediction": ["all x.(Yeast(x) -> (SmallSingleCelledPlant(x) & Plant(x)))"]}
{"id": "eqasc_train_9871", "nl": "small, single-celled plants reproduce asexually by budding", "fol": "", "prediction": ["all x y.((SmallSingleCelledPlant(x) & SmallSingleCelledPlant(y)) -> ReproducesAsexuallyByBadding(x,y))"]}
{"id": "eqasc_train_9872", "nl": "Yeast Saccharomyces cereviceae, or yeast, is a fungus.", "fol": "", "prediction": ["all x.((Yeast(x) & (SaccharomycesCereviceae(x) | Yeast(x))) -> Fungus(x))"]}
{"id": "eqasc_train_9873", "nl": "Fungus reproduce asexually by budding.", "fol": "", "prediction": ["all x.(Fungus(x) -> ReproducesAsexuallyByBadding(x))"]}
{"id": "eqasc_train_9874", "nl": "Yeasts, for instance, reproduce by forming spores as well as by budding.", "fol": "", "prediction": ["all x.(Yeast(x) -> (ReproducesByFormingSpores(x) & ReproducesByBadding(x)))"]}
{"id": "eqasc_train_9875", "nl": "yeasts use spores to reproduce", "fol": "", "prediction": ["all x y.((Yeast(x) & Spore(y)) -> UsesToReproduce(x,y))"]}
{"id": "eqasc_train_9876", "nl": "Yeasts are oval, unicellular fungi that reproduce by budding.", "fol": "", "prediction": ["all x.(Yeast(x) -> (OvalUnicellularFungus(x) & ReproduceByBadding(x)))"]}
{"id": "eqasc_train_9877", "nl": "oval, unicellular fungi reproduce asexually by budding", "fol": "", "prediction": ["all x.((Fungus(x) & Oval(x) & Unicellular(x)) -> ReproducesAsexuallyByBadding(x))"]}
{"id": "eqasc_train_9878", "nl": "Yeast, which is a type of fungus, is used by bakers to make traditional bread.", "fol": "", "prediction": ["all x y.((Yeast(x) & Fungus(x)) -> UsedByBakersToMakeTraditionalBread(y))"]}
{"id": "eqasc_train_9879", "nl": "Bread baking fungus reproduce asexually by budding.", "fol": "", "prediction": ["all x.(BreadBakingFungus(x) -> ReproducesAsexuallyByBubbing(x))"]}
{"id": "eqasc_train_9880", "nl": "Yeast is a living, microscopic fungus.", "fol": "", "prediction": ["all x.(Yeast(x) -> (LivingMicroscopicalFungus(x) & Fungus(x)))"]}
{"id": "eqasc_train_9881", "nl": "some fungi reproduce asexually by budding", "fol": "", "prediction": ["exists x.(Fungus(x) & ReproduceAsexually(x) & BuddingBadding(x))"]}
{"id": "eqasc_train_9882", "nl": "Eukaryotes reproduce by budding. ", "fol": "", "prediction": ["all x.(Eukaryote(x) -> ReproducesByBadding(x))"]}
{"id": "eqasc_train_9883", "nl": "Cancer cells divide more often than normal cells, and grow out of control.", "fol": "", "prediction": ["all x y.((CancerCell(x) & NormalCell(y)) -> (DivisionsMoreOften(x,y) & GrowsOutOfControl(x)))"]}
{"id": "eqasc_train_9884", "nl": "Mutation can cause growth out of control.", "fol": "", "prediction": ["all x.(Mutation(x) -> CausesOutOfControlGrowth(x))"]}
{"id": "eqasc_train_9885", "nl": "Cancer cells, however, grow out of control and develop into a tumor.", "fol": "", "prediction": ["all x.(CancerCell(x) -> (GrowsOutOfControl(x) & DevelopsIntoTumor(x)))"]}
{"id": "eqasc_train_9886", "nl": "Cancer cells divide more often than normal cells, and often develop into tumors.", "fol": "", "prediction": ["all x y.((CancerCell(x) & NormalCell(y)) -> (Divisions(x,y) & OftenDevelopsIntoTumors(x)))"]}
{"id": "eqasc_train_9887", "nl": "When a cancer cell divides, two new cancer cells are formed.", "fol": "", "prediction": ["all x.((CancerCell(x) & Divides(x)) -> TwoNewCancerCellsForm(x))"]}
{"id": "eqasc_train_9888", "nl": "Cancer cells form new cells out of control", "fol": "", "prediction": ["all x.(CancerCell(x) -> FormsNewCellsOutOfControl(x))"]}
{"id": "eqasc_train_9889", "nl": "Cancer cells are a type of malignant cell.", "fol": "", "prediction": ["all x.(CancerCell(x) -> MalignantCell(x))"]}
{"id": "eqasc_train_9890", "nl": "malignant cells divide more often than normal cells,", "fol": "", "prediction": ["all x y.((MalignantCell(x) & NormalCell(y)) -> DividesMoreOftenThan(x,y))"]}
{"id": "eqasc_train_9891", "nl": "Cells that are homeless are called cancer cells.", "fol": "", "prediction": ["all x.((Cell(x) & Homeless(x)) -> CancerCell(x))"]}
{"id": "eqasc_train_9892", "nl": "homeless cells grow out of control.", "fol": "", "prediction": ["all x.(HomelessCell(x) -> GrowsOutOfControl(x))"]}
{"id": "eqasc_train_9893", "nl": "Chemotherapy and radiotherapy target the rapidly dividing cancer cells.", "fol": "", "prediction": ["all x y.((Chemotherapy(x) & Radiotherapy(y)) -> TargetsRapidlyDivisioningCancerCells(x,y))"]}
{"id": "eqasc_train_9894", "nl": "Chemotherapy targets cells that grow out of control", "fol": "", "prediction": ["all x y.((Chemotherapy(x) & Cell(y)) -> Targets(x,y))"]}
{"id": "eqasc_train_9895", "nl": "death can occur when cells divide more often than normal cells and grow out of control", "fol": "", "prediction": ["all x y z.((Cell(x) & Cell(y) & Cell(z) & DividesMoreOftenThanNormal(y,z) & GrowsOutOfControl(x)) -> CellDeathOccurs(x))"]}
{"id": "eqasc_train_9896", "nl": "Cancer cells are abnormal and divide without control or order.", "fol": "", "prediction": ["all x.(CancerCell(x) -> (Anomaly(x) & DividesWithoutControlOrOrder(x)))"]}
{"id": "eqasc_train_9897", "nl": "cancer cells are abnormal", "fol": "", "prediction": ["all x.(CancerCell(x) -> AnomalyCells(x))"]}
{"id": "eqasc_train_9898", "nl": "Chemotherapy and radiotherapy target cells dividing out of control", "fol": "", "prediction": ["all x y.((Chemotherapy(x) & Radiotherapy(y)) -> (TargetCellsDivision(x,y) & OutOfControl(y)))"]}
{"id": "eqasc_train_9899", "nl": "Cancer Mitosis is out of control.", "fol": "", "prediction": ["all x.(CancerMitosis(x) -> OutOfControl(x))"]}
{"id": "eqasc_train_9900", "nl": "Lymphoma causes cells to divide more often than normal cells and to grow out of control.", "fol": "", "prediction": ["all x.(Lymphoma(x) -> (CellsDivision(x) & GrowsOutOfControl(x)))"]}
{"id": "eqasc_train_9901", "nl": "mutated cells divide more often than normal cells, and grow out of control", "fol": "", "prediction": ["all x y z.((MutatedCell(x) & NormalCell(y) & MutatedCell(z)) -> (DivisionsMoreOften(x,y) & GrowsOutOfControl(x,z)))"]}
{"id": "eqasc_train_9902", "nl": "Basically, mitosis is the process by which a cell divides.", "fol": "", "prediction": ["all x.(Mitosis(x) -> (Division(x) & Cell(x)))"]}
{"id": "eqasc_train_9903", "nl": "Cancer cells perform mitosis more often than normal cells.", "fol": "", "prediction": ["all x y.((CancerCell(x) & NormalCell(y)) -> PerformsMoreOften(x,y))"]}
{"id": "eqasc_train_9904", "nl": "when the seasons change from the summer to the fall , the amount of daylight will decrease", "fol": "", "prediction": ["all x y z.((Season(x) & Season(y) & Season(z) & Summer(y) & Fall(z)) -> DaylightDecrease(x,y,z))"]}
{"id": "eqasc_train_9905", "nl": "Symptoms of their depressive illness are worsened by decreased daylight.", "fol": "", "prediction": ["all x.((SymptomsOfDepressiveIllness(x) & DecreasedDaylight(x)) -> Worsens(x))"]}
{"id": "eqasc_train_9906", "nl": "When the seasons change from the summer to the fall, symptoms of some depressive illnesses worsen.", "fol": "", "prediction": ["all x y.((Season(x) & Season(y) & Summer(x) & Fall(y)) -> WorsenSymptomsOfDepressiveIllnesses(x,y))"]}
{"id": "eqasc_train_9907", "nl": "Then the days become colder and the number of daylight hours decreases.", "fol": "", "prediction": ["all x.((Days(x) & DaylightHours(x)) -> (Colder(x) & Decreased(x)))"]}
{"id": "eqasc_train_9908", "nl": "when the seasons change from the summer to the fall, the days become colder", "fol": "", "prediction": ["all x y.((SeasonChange(x) & Season(y) & SummerChange(x,y)) -> DaysBecomeColder(x))"]}
{"id": "eqasc_train_9909", "nl": "in fall the days become colder", "fol": "", "prediction": ["all x.((Fall(x) & ColderDays(x)) -> ColderDays(x))"]}
{"id": "eqasc_train_9910", "nl": "Seasons are caused by the tilt of the earth's axis.", "fol": "", "prediction": ["all x.(Season(x) -> CausedByTiltOfEarthAxis(x))"]}
{"id": "eqasc_train_9911", "nl": "the amount of daylight is caused by the tilt of the earth's axis", "fol": "", "prediction": ["all x y.((Daylight(x) & EarthsAxis(y)) -> CausedByTilt(x,y))"]}
{"id": "eqasc_train_9912", "nl": "Daylight is shorter, and the light from the Sun is cooler.", "fol": "", "prediction": ["(all x.(Daylight(x) -> Shorter(x)) & all y.(Sun(y) -> Cooler(y)))"]}
{"id": "eqasc_train_9913", "nl": "when the seasons change from the summer to the fall , the amount of light from the Sun will decrease", "fol": "", "prediction": ["all x y z.((Season(x) & Season(y) & Season(z) & Summer(y) & Fall(z)) -> DecreasesLight(x,y,z))"]}
{"id": "eqasc_train_9914", "nl": "When it is summer in the Northern Hemisphere, the North Pole is tilted towards the Sun.", "fol": "", "prediction": ["all x.((Summer(x) & NorthernHemisphere(x)) -> TiltedTowardsSun(x))"]}
{"id": "eqasc_train_9915", "nl": "As the North Pole seasonally changes its' tilt farther away from the sun, the amount of daylight will decrease.", "fol": "", "prediction": ["all x y.((NorthPole(x) & SeasonallyChangesTilt(x,y) & Sun(y)) -> DecreasedDaylight(x))"]}
{"id": "eqasc_train_9916", "nl": "Seasons are caused by the Earth's distance from the Sun changing.", "fol": "", "prediction": ["all x.(Season(x) -> EarthsDistanceChange(x))"]}
{"id": "eqasc_train_9917", "nl": "The change of the Earth's distance from the sun causes the amount of daylight to decrease", "fol": "", "prediction": ["all x y.((ChangeOfEarthsDistanceFromSun(x) & EarthsDistance(y)) -> DecreasesDaylight(x,y))"]}
{"id": "eqasc_train_9918", "nl": "Autumn or Fall is almost over.", "fol": "", "prediction": ["all x.((Autumn(x) | Fall(x)) -> NearlyOver(x))"]}
{"id": "eqasc_train_9919", "nl": "when the seasons change from summer to autumn, the amount of daylight will decrease.", "fol": "", "prediction": ["all x y.((Season(x) & Season(y) & Summer(x) & Autumn(y)) -> DecreasedDaylight(x))"]}
{"id": "eqasc_train_9920", "nl": "All daylight contains a large UV component.", "fol": "", "prediction": ["all x.(Darkness(x) -> LargeUVComponent(x))"]}
{"id": "eqasc_train_9921", "nl": "when seasons change from summer to fall the amount of UV will decrease", "fol": "", "prediction": ["all x y.((Season(x) & Season(y) & Summer(x) & Fall(y)) -> UVDecrease(x,y))"]}
{"id": "eqasc_train_9922", "nl": "Daylight, sunlight, is necessary to it.", "fol": "", "prediction": ["all x.((Daylight(x) & Sunlight(x)) -> NecessaryTo(x))"]}
{"id": "eqasc_train_9923", "nl": "when the seasons change from the summer to the fall , the amount of sunlight will decrease", "fol": "", "prediction": ["all x y z.((Season(x) & Season(y) & Season(z) & Summer(y) & Fall(z)) -> DecreasesSunlightAmount(x,y,z))"]}
{"id": "eqasc_train_9924", "nl": "Then dawn breaks and with it comes daylight, illumined by the sun.", "fol": "", "prediction": ["all x y.((Dark(x) & Daylight(y)) -> BreaksAndIlluminedBySun(y,x))"]}
{"id": "eqasc_train_9925", "nl": "when the seasons change from summer to fall, the amount illumined by the sun will decrease", "fol": "", "prediction": ["all x y.((SeasonChange(x) & Season(y) & Summer(x) & Fall(y)) -> IlluminedBySun(x,y))"]}
{"id": "eqasc_train_9926", "nl": "Winter has short daylight hours and summer has short night hours.", "fol": "", "prediction": ["(all x.(Winter(x) -> ShortDaylight(x)) & all y.(Summer(y) -> ShortNightHours(y)))"]}
{"id": "eqasc_train_9927", "nl": "summer has short nights", "fol": "", "prediction": ["all x.(Summer(x) -> ShortNights(x))"]}
{"id": "eqasc_train_9928", "nl": "Sheep are naturally seasonal breeders, and respond to decreasing daylight hours.", "fol": "", "prediction": ["all x.(Sheep(x) -> (NaturalSeasonalBrewer(x) & RespondsToDecreasingDarkness(x)))"]}
{"id": "eqasc_train_9929", "nl": "when the seasons change from the summer to the fall, sheep breed more.", "fol": "", "prediction": ["all x y.((Season(x) & Season(y) & Summer(x) & Fall(y)) -> BreedsMore(x,y))"]}
{"id": "eqasc_train_9930", "nl": "Summer means hot, humid weather.", "fol": "", "prediction": ["all x.(Summer(x) -> (Hot(x) & Humid(x)))"]}
{"id": "eqasc_train_9931", "nl": "When the seasons change from hot, humid weather to the fall , the amount of daylight will decrease.", "fol": "", "prediction": ["all x y.((Season(x) & Season(y) & HotHumidWeather(x,y)) -> DecreasedDaylight(x))"]}
{"id": "eqasc_train_9932", "nl": "Hydrogen bonds cause water to expand when it freezes.", "fol": "", "prediction": ["all x.((HydrogenBond(x) & Freezes(x)) -> WaterExpands(x))"]}
{"id": "eqasc_train_9933", "nl": "hydrogen bonds cause h2o to expand when it freezes", "fol": "", "prediction": ["all x y.((HydrogenBond(x) & Freezes(y)) -> CausesH2oToExpand(x,y))"]}
{"id": "eqasc_train_9934", "nl": "Hydrogen bonds cause ice to expand as it is formed", "fol": "", "prediction": ["all x y.((HydrogenBond(x) & Ice(y)) -> CausesExpansionAsFormed(x,y))"]}
{"id": "eqasc_train_9935", "nl": "Hydrogen bonds cause H20 to expand when it freezes.", "fol": "", "prediction": ["all x.((HydrogenBond(x) & Freezes(x)) -> CausesH20ToExpand(x))"]}
{"id": "eqasc_train_9936", "nl": "Water makes strong hydrogen bonds.", "fol": "", "prediction": ["all x.(Water(x) -> MakesStrongHydrogenBonds(x))"]}
{"id": "eqasc_train_9937", "nl": "water sticks together because of strong bonds", "fol": "", "prediction": ["all x y.((Water(x) & StrongBonds(y)) -> SticksTogether(x,y))"]}
{"id": "eqasc_train_9938", "nl": "Hydrogen bonds cause H2O molecules to expand when frozen", "fol": "", "prediction": ["all x y.((HydrogenBond(x) & Frozen(y)) -> CausesH2OMoleculesToExpand(x,y))"]}
{"id": "eqasc_train_9939", "nl": "hydrogen bonds cause water to expand as it becomes ice", "fol": "", "prediction": ["all x y.((HydrogenBond(x) & Water(y) & Ice(y)) -> CausesWaterToExpand(x,y))"]}
{"id": "eqasc_train_9940", "nl": "Frostbite is the actual freezing of tissue.", "fol": "", "prediction": ["all x.(Frostbite(x) -> FreezingTissue(x))"]}
{"id": "eqasc_train_9941", "nl": "hydrogen bonds cause frostbite of tissue", "fol": "", "prediction": ["all x.(HydrogenBonds(x) -> CausesFrostbiteOfTissue(x))"]}
{"id": "eqasc_train_9942", "nl": "Hydrogen bonds Hydrogen bonds are primarily electrostatic in origin.", "fol": "", "prediction": ["all x.(HydrogenBond(x) -> Electrostatic(x))"]}
{"id": "eqasc_train_9943", "nl": "Something that is primarily electrostatic in origin causes water to expand when it freezes.", "fol": "", "prediction": ["all x.((ElectrostaticOrigin(x) & PrimarilyElectrostatic(x)) -> WaterExpandsWhenFreezes(x))"]}
{"id": "eqasc_train_9944", "nl": "electrostatic causes water to expand", "fol": "", "prediction": ["all x.(Electrostatic(x) -> CausesWaterToExpand(x))"]}
{"id": "eqasc_train_9945", "nl": "Freezing water expands with tremendous force.", "fol": "", "prediction": ["all x.(FreezingWater(x) -> ExpandsWithThreedingForce(x))"]}
{"id": "eqasc_train_9946", "nl": "Hydrogen bonds cause a tremendous force when a substance freezes", "fol": "", "prediction": ["all x y.((HydrogenBond(x) & Substance(y) & Freezes(y)) -> CausesThreevelessForce(x,y))"]}
{"id": "eqasc_train_9947", "nl": "Deuterium, or heavy hydrogen, is an isotope of hydrogen, or a hydrogen atom with a neutron added.", "fol": "", "prediction": ["all x.(Deuterium(x) -> (HeavyHydrogen(x) & (IsotopeOfHydrogen(x) | HydrogenAtom(x) & NeutronAdded(x))))"]}
{"id": "eqasc_train_9948", "nl": "The bonds of that which when heavy is Deuterium cause water to expand when it freezes.", "fol": "", "prediction": ["all x.((Bonds(x) & Heavy(x) & Deuterium(x)) -> WaterExpandsWhenFreezes(x))"]}
{"id": "eqasc_train_9949", "nl": "sunlight and rain can cause a rainbow", "fol": "", "prediction": ["all x y.((Sunlight(x) & Rain(y)) -> CausesRainbow(x,y))"]}
{"id": "eqasc_train_9950", "nl": "And light broken into many pieces is a rainbow.", "fol": "", "prediction": ["all x.((Light(x) & BrokenIntoManyPieces(x)) -> Rainbow(x))"]}
{"id": "eqasc_train_9951", "nl": "Sunlight and rain can cause light to be broken into many pieces.", "fol": "", "prediction": ["all x y.((Sunlight(x) & Rain(y)) -> (CausesLightToBeBrokenInto(x,y)))"]}
{"id": "eqasc_train_9952", "nl": "Cold fronts bring in the rain.", "fol": "", "prediction": ["all x.(ColdFront(x) -> BringsInRain(x))"]}
{"id": "eqasc_train_9953", "nl": "Cold fronts can cause a rainbow.", "fol": "", "prediction": ["all x.(ColdFront(x) -> CanCauseRainbow(x))"]}
{"id": "eqasc_train_9954", "nl": "Rainbow A most charming example of chromatic dispersion is a rainbow.", "fol": "", "prediction": ["all x.((Rainbow(x) & CharmingExampleOfCrystallicDispersion(x)) -> Rainbow(x))"]}
{"id": "eqasc_train_9955", "nl": "Sunlight and rain can cause a chromatic dispersion.", "fol": "", "prediction": ["all x.((Sunlight(x) | Rain(x)) -> CausesCrystallicDispersion(x))"]}
{"id": "eqasc_train_9956", "nl": "When white light hits a prism it is seen as the seven rainbow colors.", "fol": "", "prediction": ["all x y.((WhiteLight(x) & Prism(y) & Hits(x,y)) -> SevenRainbowColors(x))"]}
{"id": "eqasc_train_9957", "nl": "Sunlight and rain can cause something that has seven colors", "fol": "", "prediction": ["all x y.((Sunlight(x) & Rain(y)) -> (CausesSevenColors(x,y) & CausesSevenColors(x,y)))"]}
{"id": "eqasc_train_9958", "nl": "Rainbows are very pretty.", "fol": "", "prediction": ["all x.(Rainbow(x) -> Pretty(x))"]}
{"id": "eqasc_train_9959", "nl": "sunlight and rain are pretty", "fol": "", "prediction": ["all x.((Sunlight(x) & Rain(x)) -> Pretty(x))"]}
{"id": "eqasc_train_9960", "nl": "sunlight and rain can cause chromatic dispersion", "fol": "", "prediction": ["all x y.((Sunlight(x) & Rain(y)) -> CausesCyclicalDispersion(x,y))"]}
{"id": "eqasc_train_9961", "nl": "All deserts have very little rain.", "fol": "", "prediction": ["all x.(Desert(x) -> VeryLittleRain(x))"]}
{"id": "eqasc_train_9962", "nl": "rainbows are rare in the desert", "fol": "", "prediction": ["all x.(Rare(x) -> Rainbow(x))"]}
{"id": "eqasc_train_9963", "nl": "Behind each storm there's a rainbow.", "fol": "", "prediction": ["all x.(Storm(x) -> Rainbow(x))"]}
{"id": "eqasc_train_9964", "nl": "sunlight breaking through rain comes after a storm", "fol": "", "prediction": ["all x y.((Sunlight(x) & Storm(y)) -> BreaksThroughRain(x,y))"]}
{"id": "eqasc_train_9965", "nl": "Raindrops refract light into rainbows.", "fol": "", "prediction": ["all x y.((Raindrop(x) & Rainbow(y)) -> RefractsLightInto(x,y))"]}
{"id": "eqasc_train_9966", "nl": "sunlight and rain can cause light to refract", "fol": "", "prediction": ["all x y.((Sunlight(x) & Rain(y)) -> (CausesLightToRefract(x,y) & CausesLightToRefract(x,y)))"]}
{"id": "eqasc_train_9967", "nl": "If sunlight is passed through a prism, a rainbow is produced.", "fol": "", "prediction": ["all x.((SunlightPassedThroughPrism(x)) -> RainbowProduced(x))"]}
{"id": "eqasc_train_9968", "nl": "a prism causes a rainbow", "fol": "", "prediction": ["all x y.((Prism(x) & Rainbow(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_9969", "nl": "Rainbows are caused by internal reflection and refraction of sunlight or moonlight inside raindrops.", "fol": "", "prediction": ["all x.(Rainbow(x) -> (CausedByInternalReflection(x) & CausedByRefraction(x) & SunlightOrMoonlightInsideRaindrops(x)))"]}
{"id": "eqasc_train_9970", "nl": "A rainbow is made by sunlight reflections in raindrops.", "fol": "", "prediction": ["all x.(Rainbow(x) -> MadeBySunlightReflectionsInRaindrops(x))"]}
{"id": "eqasc_train_9971", "nl": "Liquid precipitation is measured with a rain gauge.", "fol": "", "prediction": ["all x.(LiquidPrecipitation(x) -> MeasuredWithRainGauge(x))"]}
{"id": "eqasc_train_9972", "nl": "Sunlight and liquid precipitation can cause a rainbow.", "fol": "", "prediction": ["all x.((Sunlight(x) & LiquidPrecipitation(x)) -> CanCauseRainbow(x))"]}
{"id": "eqasc_train_9973", "nl": "Rain comes from clouds.", "fol": "", "prediction": ["all x.(Rain(x) -> ComesFromClouds(x))"]}
{"id": "eqasc_train_9974", "nl": "sunlight and clouds can cause a rainbow", "fol": "", "prediction": ["all x y.((Sunlight(x) & Clouds(y)) -> CausesRainbow(x,y))"]}
{"id": "eqasc_train_9975", "nl": "Rainbows Rainbows are important symbols to the Navajo people.", "fol": "", "prediction": ["all x.(Rainbow(x) -> ImportantSymbolToNavajoPeople(x))"]}
{"id": "eqasc_train_9976", "nl": "sunlight and rain can cause an important symbol to the Navajo people", "fol": "", "prediction": ["all x y.((Sunlight(x) & Rain(y)) -> (CausesSymbol(x,y) & ImportantToNavajoPeople(x)))"]}
{"id": "eqasc_train_9977", "nl": "sunlight and rain causes chromatic dispersion", "fol": "", "prediction": ["all x y.((Sunlight(x) & Rain(y)) -> CausesCyclicalDispersion(x,y))"]}
{"id": "eqasc_train_9978", "nl": "Rain water contains small particulates and acid.", "fol": "", "prediction": ["all x.(RainWater(x) -> (ContainsSmallParticulates(x) & ContainsAcid(x)))"]}
{"id": "eqasc_train_9979", "nl": "Sunlight and water containing small particulates and acid can cause a rainbow", "fol": "", "prediction": ["all x y z.((Sunlight(x) & Water(y) & SmallParticulates(z) & Contains(y,z)) -> CausesRainbow(x))"]}
{"id": "eqasc_train_9980", "nl": "Bent light separates into the colors of a rainbow.", "fol": "", "prediction": ["all x y.((BentLight(x) & Rainbow(y)) -> SeparatesIntoColors(x,y))"]}
{"id": "eqasc_train_9981", "nl": "sunlight and rain can cause bent light to separate into colors", "fol": "", "prediction": ["all x y.((Sunlight(x) & Rain(y)) -> (BentLightSeparation(x,y) & Colors(x,y)))"]}
{"id": "eqasc_train_9982", "nl": "Marine biomes are found in the salt water of the ocean.", "fol": "", "prediction": ["all x.(MarineBiome(x) -> exists y.(SaltWater(y) & FoundIn(x,y))))"]}
{"id": "eqasc_train_9983", "nl": "An ocean is a large body of salt water.", "fol": "", "prediction": ["all x.(Ocean(x) -> (LargeBodyOfSaltWater(x)))"]}
{"id": "eqasc_train_9984", "nl": "Marine biomes are found in large bodies of salt water.", "fol": "", "prediction": ["all x.(MarineBiome(x) -> exists y.(LargeBodyOfSaltWater(y) & FoundIn(x,y)))"]}
{"id": "eqasc_train_9985", "nl": "sea tigers are found in the salt water of the ocean", "fol": "", "prediction": ["all x y.((SeaTiger(x) & SaltWater(y)) -> FoundInOcean(x,y))"]}
{"id": "eqasc_train_9986", "nl": "Coral Reefs Coral reefs are marine biomes that are unique to tropical seas.", "fol": "", "prediction": ["all x.(CoralReef(x) -> (MarineBiome(x) & UniqueToTropicalSeas(x)))"]}
{"id": "eqasc_train_9987", "nl": "Coral Reefs are found in the salt water of the ocean", "fol": "", "prediction": ["all x.(CoralReef(x) -> (FoundInSaltWater(x) & FoundInOcean(x)))"]}
{"id": "eqasc_train_9988", "nl": "Sea tigers live in salt water.", "fol": "", "prediction": ["all x.(SeaTiger(x) -> LivesInSaltWater(x))"]}
{"id": "eqasc_train_9989", "nl": "freshwater biomes are found in estuaries", "fol": "", "prediction": ["all x y.((FreshwaterBiome(x) & Estuary(y)) -> FoundIn(x,y))"]}
{"id": "eqasc_train_9990", "nl": "The Pacific has marine biomes.", "fol": "", "prediction": ["all x.(Pacific(x) -> HasMarineBiomes(x))"]}
{"id": "eqasc_train_9991", "nl": "And to the east is the Atlantic Ocean.", "fol": "", "prediction": ["(East is AtlanticOcean(x) & ToEast(x))"]}
{"id": "eqasc_train_9992", "nl": "marine biomes are found in the Atlantic", "fol": "", "prediction": ["all x.(MarineBiome(x) -> FoundInAtlantic(x))"]}
{"id": "eqasc_train_9993", "nl": "coral reefs are found in salt water of ocean", "fol": "", "prediction": ["all x.(CoralReef(x) -> (FoundInSaltWaterOfOcean(x) & FoundInOcean(x)))"]}
{"id": "eqasc_train_9994", "nl": "You can find marine biomes in the Pacific.", "fol": "", "prediction": ["all x.(MarineBiome(x) -> FindsInPacific(x))"]}
{"id": "eqasc_train_9995", "nl": "global marine ecosystems are found in the ocean's salt water", "fol": "", "prediction": ["all x y.((GlobalMarineEcosystem(x) & Ocean(y)) -> (FoundInSaltWater(x,y) & FoundInSaltWater(x,y)))"]}
{"id": "eqasc_train_9996", "nl": "Sea tigers are found in the salt water of the ocean.", "fol": "", "prediction": ["all x.(SeaTiger(x) -> FoundInSaltWaterOcean(x))"]}
{"id": "eqasc_train_9997", "nl": "Organisms use lipids to store energy.", "fol": "", "prediction": ["all x.(Organism(x) -> UsesLipidsToStoreEnergy(x))"]}
{"id": "eqasc_train_9998", "nl": "FATS, or lipids, are vital nutrients.", "fol": "", "prediction": ["all x.(FATS(x) -> (Lipids(x) & VitalNutrient(x)))"]}
{"id": "eqasc_train_9999", "nl": "organisms use fats to store energy", "fol": "", "prediction": ["all x.(Organism(x) -> UsesFatsToStoreEnergy(x))"]}
{"id": "eqasc_train_10000", "nl": "Plants and animals use lipids to store energy.", "fol": "", "prediction": ["all x y.((Plant(x) | Animal(y)) -> UsesLipidsToStoreEnergy(x,y))"]}
{"id": "eqasc_train_10001", "nl": "humans use lipids to store energy", "fol": "", "prediction": ["all x y.((Human(x) & Lipids(y)) -> UsesToStoreEnergy(x,y))"]}
{"id": "eqasc_train_10002", "nl": "Another name for fat is lipid .", "fol": "", "prediction": ["all x.(Fat(x) -> Lipid(x))"]}
{"id": "eqasc_train_10003", "nl": "Organisms use fat to store energy", "fol": "", "prediction": ["all x.(Organism(x) -> (UsesFat(x) & StoresEnergy(x)))"]}
{"id": "eqasc_train_10004", "nl": "Animals use lipids to store energy.", "fol": "", "prediction": ["all x.(Animal(x) -> UsesLipidsToStoreEnergy(x))"]}
{"id": "eqasc_train_10005", "nl": "Organisms use fat to store energy.", "fol": "", "prediction": ["all x.(Organism(x) -> UsesFatToStoreEnergy(x))"]}
{"id": "eqasc_train_10006", "nl": "fish use lipids to store energy", "fol": "", "prediction": ["all x.(Fish(x) -> UsesLipidsToStoreEnergy(x))"]}
{"id": "eqasc_train_10007", "nl": "Organisms use carbon, oxygen, and hydrogen to store energy.", "fol": "", "prediction": ["all x.(Organism(x) -> (UsesCarbon(x) & UsesOxygen(x) & UsesHydrogen(x)))"]}
{"id": "eqasc_train_10008", "nl": "Triglycerides are a storage form of energy.", "fol": "", "prediction": ["all x.(Triglyceride(x) -> StorageFormOfEnergy(x))"]}
{"id": "eqasc_train_10009", "nl": "Organisms use lipids in the form of Triglycerides ", "fol": "", "prediction": ["all x y.((Organism(x) & Lipids(y)) -> UsesTriglycerides(x,y))"]}
{"id": "eqasc_train_10010", "nl": "cycles of freezing and thawing water cause ice wedging", "fol": "", "prediction": ["all x.((CyclesOfFreezingAndThawingWater(x) & IceWedging(x)) -> CausesIceWedging(x))"]}
{"id": "eqasc_train_10011", "nl": "The processes of weathering, and water or ice wedging may assist in this.", "fol": "", "prediction": ["all x.((Weathering(x) & (WaterWedging(x) | IceWedging(x))) -> AssistsIn(x,weather,wedging))"]}
{"id": "eqasc_train_10012", "nl": "Weathering comes from cycles", "fol": "", "prediction": ["all x y.((Weathering(x) & Cycle(y)) -> ComesFrom(x,y))"]}
{"id": "eqasc_train_10013", "nl": "Under the pressure of the innumerable wedges of ice, the rock cracks.", "fol": "", "prediction": ["all x.((Rock(x) & PressureOfInnumerableWedgesOfIce(x)) -> Cracks(x))"]}
{"id": "eqasc_train_10014", "nl": "Cycles of freezing and thawing water cause something that can crack rocks", "fol": "", "prediction": ["all x.((CyclesOfFreezingAndThawingWater(x)) -> CanCrackRocks(x))"]}
{"id": "eqasc_train_10015", "nl": "cycles of freezing and thawing water causes mechanical weathering", "fol": "", "prediction": ["all x.((CyclesOfFreezingAndThawingWater(x) & CausesMechanicalWeathering(x)) -> CausesMechanicalWeathering(x))"]}
{"id": "eqasc_train_10016", "nl": "cycles of freezing and thawing water can cause severely damaged roads.", "fol": "", "prediction": ["all x.((Cycle(x) & FreezingWater(x) & ThawingWater(x)) -> DamagedRoads(x))"]}
{"id": "eqasc_train_10017", "nl": "cycles of freezing and thawing h2o causes ice wedging", "fol": "", "prediction": ["all x.((CyclesOfFreezingAndThawing(x) & H2o(x)) -> CausesIceWedging(x))"]}
{"id": "eqasc_train_10018", "nl": "Ice wedges, which are common in high, cold latitudes, can force soil particles together.", "fol": "", "prediction": ["all x.((IceWedge(x) & CommonInHighColdLatitudes(x)) -> ForcesSoilParticlesTogether(x))"]}
{"id": "eqasc_train_10019", "nl": "cycles of freezing and thawing water are common in high, cold latitudes,  can force soil particles together", "fol": "", "prediction": ["all x y.((Cycle(x) & HighColdLatitude(y) & ColdLatitude(z)) -> (FreezingAndThawingWater(x) & ForcesSoilParticles(x)))"]}
{"id": "eqasc_train_10020", "nl": "cycles of freezing and thawing water cause the most important form of mechanical weathering.", "fol": "", "prediction": ["all x.((CyclesOfFreezingAndThawingWater(x)) -> MechanicalWeathering(x))"]}
{"id": "eqasc_train_10021", "nl": "Cycles of freezing and thawing water cause mechanical weathering.", "fol": "", "prediction": ["all x.((Cycle(x) & FreezingWater(x) & ThawingWater(x)) -> MechanicalWeathering(x))"]}
{"id": "eqasc_train_10022", "nl": "The fact is that ice seldom freezes or thaws at a uniform rate.", "fol": "", "prediction": ["all x.(Ice(x) -> (Frozen(x) | Thawed(x)) & UniformRate(x)))"]}
{"id": "eqasc_train_10023", "nl": "ice wedging happens at varying rates", "fol": "", "prediction": ["all x.(IceWedging(x) -> (exists y.(Rate(y) & HappensAt(x,y)))))"]}
{"id": "eqasc_train_10024", "nl": "Temperature change and ice wedging help to make soil.", "fol": "", "prediction": ["all x.((TemperatureChange(x) & IceWedging(x)) -> MakeSoil(x))"]}
{"id": "eqasc_train_10025", "nl": "cycles of freezing and thawing water help to make soil.", "fol": "", "prediction": ["all x.((Cycle(x) & FreezingWater(x) & ThawingWater(x)) -> MakesSoil(x))"]}
{"id": "eqasc_train_10026", "nl": "cycles of freezing and thawing water cause mechanical weathering", "fol": "", "prediction": ["all x.((CyclesOfFreezingAndThawingWater(x) & CausesMechanicalWeathering(x)) -> MechanicalWeathering(x))"]}
{"id": "eqasc_train_10027", "nl": "cycles of freezing and thawing water can cause mechanical weathering", "fol": "", "prediction": ["all x.((CyclesOfFreezingAndThawingWater(x) & CausesMechanicalWeathering(x)) -> CausesMechanicalWeathering(x))"]}
{"id": "eqasc_train_10028", "nl": "cycles of freezing and thawing water cause mechanical weathering.", "fol": "", "prediction": ["all x.((Cycle(x) & FreezingWater(x) & ThawingWater(x)) -> MechanicalWeathering(x))"]}
{"id": "eqasc_train_10029", "nl": "Biomass is the total mass of organisms at a trophic level.", "fol": "", "prediction": ["all x.(Biomass(x) -> (TotalMassOfOrganisms(x) & AtTropicalLevel(x)))"]}
{"id": "eqasc_train_10030", "nl": "Fourty percent of biomass is carbon.", "fol": "", "prediction": ["all x.((Biomass(x) & Carbon(x)) -> FourtyPercent(x))"]}
{"id": "eqasc_train_10031", "nl": "fourty percent of the total mass of organisms at a trophic level is carbon", "fol": "", "prediction": ["all x y.((TropicalLevel(x) & Organism(y) & FourtyPercent(x,y)) -> Carbon(x))"]}
{"id": "eqasc_train_10032", "nl": "Trophic level refers to the organisms position in the food chain.", "fol": "", "prediction": ["all x.(TrophicLevel(x) -> (OrganismsPositionInFoodChain(x)))"]}
{"id": "eqasc_train_10033", "nl": "biomass is the total mass of organisms on the food chain", "fol": "", "prediction": ["all x.(Biomass(x) -> (TotalMassOfOrganisms(x) & OnFoodChain(x)))"]}
{"id": "eqasc_train_10034", "nl": "organisms are mostly made out of carbon", "fol": "", "prediction": ["all x.(Organism(x) -> (MadeOutOfCarbon(x) & MostlyMadeOutOfCarbon(x)))"]}
{"id": "eqasc_train_10035", "nl": "Biomass Organic matter, called biomass, can be burned in an incinerator to produce energy.", "fol": "", "prediction": ["all x.(Biomass(x) -> (OrganicMatter(x) & Biomass(x) & BurnedInIncinerator(x) & ProducesEnergy(x)))"]}
{"id": "eqasc_train_10036", "nl": "the total mass of organisms at a trophic level can be burned in an incinerator to produce energy", "fol": "", "prediction": ["all x y.((Organism(x) & TotalMass(x,y) & ThrombosicLevel(y)) -> CanBeBurnedInIncinerator(x))"]}
{"id": "eqasc_train_10037", "nl": "Each stage is a trophic level.", "fol": "", "prediction": ["all x.(Stage(x) -> TrophicLevel(x))"]}
{"id": "eqasc_train_10038", "nl": "Biomass is the total mass of organisms in an environmental stage.", "fol": "", "prediction": ["all x.(Biomass(x) -> (TotalMassOfOrganisms(x) & InEnvironmentalStage(x)))"]}
{"id": "eqasc_train_10039", "nl": "Producers make up the first trophic level, primary consumers the second, and so on.", "fol": "", "prediction": ["all x y z.((Producer(x) & PrimaryConsumer(y) & TrophosicLevel(z)) -> (MakesUp(x,z) & MakesUp(y,z)))"]}
{"id": "eqasc_train_10040", "nl": "Biomass is the total mass of primary consumers", "fol": "", "prediction": ["all x.(Biomass(x) -> (TotalMassOfPrimaryConsumers(x) & PrimaryConsumers(x)))"]}
{"id": "eqasc_train_10041", "nl": "A biomass' position in the food chain is a trophic level.", "fol": "", "prediction": ["all x.((Biomass(x) & FoodChain(x)) -> TrophicLevel(x))"]}
{"id": "eqasc_train_10042", "nl": "Most living things are called organisms.", "fol": "", "prediction": ["all x.(LivingThing(x) -> Organism(x))"]}
{"id": "eqasc_train_10043", "nl": "Biomass is the total mass of living things at a trophic level.", "fol": "", "prediction": ["all x.(Biomass(x) -> (TotalMassOfLivingThings(x) & AtTropicalLevel(x)))"]}
{"id": "eqasc_train_10044", "nl": "Herbivores are the second trophic level and graze on plants.", "fol": "", "prediction": ["all x.(Herbivore(x) -> (TropicalLevel(x) & GrazesOnPlants(x)))"]}
{"id": "eqasc_train_10045", "nl": "Biomass is the total mass of organisms on a level such as herbivores ", "fol": "", "prediction": ["all x y.((Biomass(x) & Organism(y) & Herbivore(y)) -> TotalMassOnLevel(x,y))"]}
{"id": "eqasc_train_10046", "nl": "Each of the steps in the food chain is a trophic level .", "fol": "", "prediction": ["all x.((Step(x) & FoodChain(x)) -> TrophicLevel(x))"]}
{"id": "eqasc_train_10047", "nl": "Biomass is the total mass of organisms at a step in the food chain", "fol": "", "prediction": ["all x.(Biomass(x) -> (TotalMassOfOrganisms(x) & StepInFoodChain(x)))"]}
{"id": "eqasc_train_10048", "nl": "Most arthropods are insects.", "fol": "", "prediction": ["all x.(Arthropod(x) -> Insect(x))"]}
{"id": "eqasc_train_10049", "nl": "Arthropods do everything with legs or modified legs.", "fol": "", "prediction": ["all x.(Arthropod(x) -> (DoesAllWithLegs(x) | DoesAllWithModifiedLegs(x)))"]}
{"id": "eqasc_train_10050", "nl": "Insects do everything with legs or modified legs", "fol": "", "prediction": ["all x.(Insect(x) -> (DoesAllWithLegs(x) | DoesAllWithModifiedLegs(x)))"]}
{"id": "eqasc_train_10051", "nl": "Most arthropods have six legs", "fol": "", "prediction": ["all x.(Arthropod(x) -> HasSixLegs(x))"]}
{"id": "eqasc_train_10052", "nl": "An insect is a small animal with six legs.", "fol": "", "prediction": ["all x.(Insect(x) -> (SmallAnimal(x) & SixLegs(x)))"]}
{"id": "eqasc_train_10053", "nl": "Most arthropods are small animals with six legs.", "fol": "", "prediction": ["all x.(Arthropod(x) -> (SmallAnimal(x) & SixLegs(x)))"]}
{"id": "eqasc_train_10054", "nl": "Arthropods are eaten seasonally.", "fol": "", "prediction": ["all x.(Arthropod(x) -> EatenSeasonally(x))"]}
{"id": "eqasc_train_10055", "nl": "insects are eaten ", "fol": "", "prediction": ["all x.(Insect(x) -> Eaten(x))"]}
{"id": "eqasc_train_10056", "nl": "Arthropods Arthropods have jointed segmented exoskeletons.", "fol": "", "prediction": ["all x.(Arthropod(x) -> (HasJointedSegmentedExoskeleton(x) & HasSegmentedExoskeleton(x)))"]}
{"id": "eqasc_train_10057", "nl": "Insects have jointed segmented exoskeletons", "fol": "", "prediction": ["all x.(Insect(x) -> (JointedSegmentedExoskeleton(x) & JointedExoskeleton(x)))"]}
{"id": "eqasc_train_10058", "nl": "insects have jointed segmented exoskeletons", "fol": "", "prediction": ["all x.(Insect(x) -> JointedSegmentedExoskeleton(x))"]}
{"id": "eqasc_train_10059", "nl": "Arthropods are animals with external skeletons and jointed legs.", "fol": "", "prediction": ["all x.(Arthropod(x) -> (Animal(x) & ExternalSkeleton(x) & JointedLegs(x)))"]}
{"id": "eqasc_train_10060", "nl": "Most animals with external skeletons and jointed legs are insects", "fol": "", "prediction": ["all x.((Animal(x) & ExternalSkeleton(x) & JointedLegs(x)) -> Insect(x))"]}
{"id": "eqasc_train_10061", "nl": "Some examples of invertebrates are arthropods.", "fol": "", "prediction": ["exists x.(Invertebrate(x) & Arthropod(x))"]}
{"id": "eqasc_train_10062", "nl": "some invertebrates are insects", "fol": "", "prediction": ["exists x.(Invertebrate(x) & Insect(x))"]}
{"id": "eqasc_train_10063", "nl": "Arthropods are the largest group of animals.", "fol": "", "prediction": ["all x.(Arthropod(x) -> LargestAnimalGroup(x))"]}
{"id": "eqasc_train_10064", "nl": "the largest group of animals are insects", "fol": "", "prediction": ["all x.(Animal(x) -> (Insect(x) & LargestGroupOfAnimals(x)))"]}
{"id": "eqasc_train_10065", "nl": "The largest group of animals are insects.", "fol": "", "prediction": ["all x.(Animal(x) -> Insect(x))"]}
{"id": "eqasc_train_10066", "nl": "Scorpions are very distinctive arthropods.", "fol": "", "prediction": ["all x.(Scorpodon(x) -> DistinctiveArthropod(x))"]}
{"id": "eqasc_train_10067", "nl": "scorpions are insects", "fol": "", "prediction": ["all x.(Scorpion(x) -> (Insect(x) & Insect(x)))"]}
{"id": "eqasc_train_10068", "nl": "Flies are insects with two wings.", "fol": "", "prediction": ["all x.(Fly(x) -> (Insect(x) & HasTwoWings(x)))"]}
{"id": "eqasc_train_10069", "nl": "Flies are arthropods with two wings.", "fol": "", "prediction": ["all x.(Fly(x) -> (Arthropod(x) & HasTwoWings(x)))"]}
{"id": "eqasc_train_10070", "nl": "if an organism becomes too hot then that organism may die", "fol": "", "prediction": ["all x y.((Organism(x) & TooHot(x)) -> MayDie(y))"]}
{"id": "eqasc_train_10071", "nl": "Heat exhaustion, which precedes heat stroke, is a warning that the body is getting too hot.", "fol": "", "prediction": ["all x.((HeatExhaustion(x) & PreceedsHeatStoke(x)) -> WarningBodyTooHot(x))"]}
{"id": "eqasc_train_10072", "nl": "heat stroke can cause an organism to die", "fol": "", "prediction": ["all x y.((HeatShotStroke(x) & Organism(y)) -> CanCauseDeath(x,y))"]}
{"id": "eqasc_train_10073", "nl": "Death, and the process of dying, is the final phase of life.", "fol": "", "prediction": ["all x.((Death(x) & DeathProcess(x)) -> FinalPhaseOfLife(x))"]}
{"id": "eqasc_train_10074", "nl": "if an organism becomes too hot then that organism may experience death", "fol": "", "prediction": ["all x y.((Organism(x) & TooHot(x)) -> MayExperienceDeath(y))"]}
{"id": "eqasc_train_10075", "nl": "Dehydration in the hot sun is a constant danger.", "fol": "", "prediction": ["all x.((Dehydration(x) & HotSun(x)) -> ConstantDanger(x))"]}
{"id": "eqasc_train_10076", "nl": "if an organism dehydrates it may die", "fol": "", "prediction": ["all x y.((Organism(x) & Dehydrates(x)) -> MayDie(y))"]}
{"id": "eqasc_train_10077", "nl": "Bacteria are single-cell organisms.", "fol": "", "prediction": ["all x.(Bacteria(x) -> SingleCellOrganism(x))"]}
{"id": "eqasc_train_10078", "nl": "If bacteria becomes too hot then it may die", "fol": "", "prediction": ["all x.((Bacteria(x) & TooHot(x)) -> MayDie(x))"]}
{"id": "eqasc_train_10079", "nl": "Hot sun can bleach flowers.", "fol": "", "prediction": ["all x.(HotSun(x) -> BleachFlowers(x))"]}
{"id": "eqasc_train_10080", "nl": "Too much sun can kill flowers.", "fol": "", "prediction": ["all x.((Sun(x) & TooMuch(x)) -> KillsFlowers(x))"]}
{"id": "eqasc_train_10081", "nl": "Bacteria are adaptable organisms.", "fol": "", "prediction": ["all x.(Bacteria(x) -> AdaptableOrganism(x))"]}
{"id": "eqasc_train_10082", "nl": "if bacteria becomes too hot it may die", "fol": "", "prediction": ["all x.((Bacteria(x) & TooHot(x)) -> MayDie(x))"]}
{"id": "eqasc_train_10083", "nl": "Death occurs when the organs are no longer able to function.", "fol": "", "prediction": ["all x.((Organ(x) & -CanFunction(x)) -> DeathOccurs(x))"]}
{"id": "eqasc_train_10084", "nl": "Overheating can cause the body to stop functioning.", "fol": "", "prediction": ["all x.(Overheating(x) -> CanCauseBodyToStopFunctioning(x))"]}
{"id": "eqasc_train_10085", "nl": "Human hair dryers get too hot for a dog's skin and can overheat or even burn a dog.", "fol": "", "prediction": ["all x y.((HumanHairDryer(x) & Dog(y)) -> (TooHotForSkin(x,y) & (Overheat(x,y) | Burn(x,y))))"]}
{"id": "eqasc_train_10086", "nl": "if an organism overheats then that organism may die", "fol": "", "prediction": ["all x y.((Organism(x) & Overheats(x)) -> MayDie(y))"]}
{"id": "eqasc_train_10087", "nl": "Most children know that the sun makes things grow and that the sun is very hot.", "fol": "", "prediction": ["all x.(Child(x) -> (SunMakesThingsGrow(x) & SunIsHot(x)))"]}
{"id": "eqasc_train_10088", "nl": "spending too much time in the sun can make an organism die", "fol": "", "prediction": ["all x y.((Organism(x) & Sun(y) & SpendsTooMuchTimeIn(x,y)) -> CanMakeOrganismDie(x))"]}
{"id": "eqasc_train_10089", "nl": "When the animals and plants die, the decomposers complete the cycle.", "fol": "", "prediction": ["all x y.((Animal(x) & Plant(y) & Dies(x)) -> CompletesCycle(x,y))"]}
{"id": "eqasc_train_10090", "nl": "If an organism becomes too hot then decomposers complete their cycle.", "fol": "", "prediction": ["all x.((Organism(x) & TooHot(x)) -> CompletesCycle(x))"]}
{"id": "eqasc_train_10091", "nl": "Plants often collapse and die during hot weather.", "fol": "", "prediction": ["all x.((Plant(x) & HotWeather(x)) -> CollapsesAndDies(x))"]}
{"id": "eqasc_train_10092", "nl": "a plant can collapse if it gets too hot", "fol": "", "prediction": ["all x.((Plant(x) & TooHot(x)) -> CanCollapse(x))"]}
{"id": "eqasc_train_10093", "nl": "Vertebrate chordates have a backbone.", "fol": "", "prediction": ["all x.(VertebrateAcdote(x) -> HasBackbone(x))"]}
{"id": "eqasc_train_10094", "nl": "Yep, lizards are chordates, just like humans.", "fol": "", "prediction": ["all x.(Lizard(x) -> (Acrylic(x) & Human(x)))"]}
{"id": "eqasc_train_10095", "nl": "Lizards have a backbone like a human", "fol": "", "prediction": ["all x.(Lizard(x) -> (HasBackbone(x) & HumanBackbone(x)))"]}
{"id": "eqasc_train_10096", "nl": "Because reptiles are vertebrates, they are chordates.", "fol": "", "prediction": ["all x.(Reptile(x) -> (Vertebrate(x) & Chordate(x)))"]}
{"id": "eqasc_train_10097", "nl": "reptiles have a backbone", "fol": "", "prediction": ["all x.(Reptile(x) -> HasBackbone(x))"]}
{"id": "eqasc_train_10098", "nl": "Birds are a class of the chordates or vertebrate phylum.", "fol": "", "prediction": ["all x.(Bird(x) -> (ClassOfCylindrates(x) | ClassOfVertebratePhylum(x)))"]}
{"id": "eqasc_train_10099", "nl": "Vertebrate chordates have a vertebrae.", "fol": "", "prediction": ["all x.(VertebrateAcdote(x) -> HasVertebrae(x))"]}
{"id": "eqasc_train_10100", "nl": "Reptiles have backbones.", "fol": "", "prediction": ["all x.(Reptile(x) -> HasBackbone(x))"]}
{"id": "eqasc_train_10101", "nl": "Birds have backbones", "fol": "", "prediction": ["all x.(Bird(x) -> HasBackbone(x))"]}
{"id": "eqasc_train_10102", "nl": "chordates have a backbone and jaws.", "fol": "", "prediction": ["all x.(Acordate(x) -> (HasBackbone(x) & HasJaws(x)))"]}
{"id": "eqasc_train_10103", "nl": "Strength correlates with our spinal cord and our nerves, our backbone.", "fol": "", "prediction": ["all x.(Strength(x) -> (CorrelatesWithSpinalCord(x) & CorrelatesWithNervous(x) & CorrelatesWithBackbone(x)))"]}
{"id": "eqasc_train_10104", "nl": "Vertebrate chordates have a spinal cord and nerves", "fol": "", "prediction": ["all x.(VertebrateAcdotes(x) -> (HasSpinalCord(x) & HasNerves(x)))"]}
{"id": "eqasc_train_10105", "nl": "Vertebrate chordates have a spinal column.", "fol": "", "prediction": ["all x.(VertebrateAcdote(x) -> HasSpinalColumn(x))"]}
{"id": "eqasc_train_10106", "nl": "Chordates Chordates Chordates include fish, amphibians, reptiles, birds, and mammals.", "fol": "", "prediction": ["all x.(Chordate(x) -> (IncludesFish(x) | IncludesAmphibians(x) | IncludesReptiles(x) | IncludesBirds(x) | IncludesMammals(x)))"]}
{"id": "eqasc_train_10107", "nl": "fish, amphibians, reptiles, birds, and mammals have a backbone", "fol": "", "prediction": ["all x y z.((Fish(x) & Amphibian(y) & Reptile(z) & Bird(z) & Mammal(x)) -> HasBackbone(x,y,z))"]}
{"id": "eqasc_train_10108", "nl": "Bottleneck effect occurs when a population suddenly gets much smaller.", "fol": "", "prediction": ["all x.((Population(x) & SuddenlySmaller(x)) -> BottleneckEffect(x))"]}
{"id": "eqasc_train_10109", "nl": "Severe droughts have caused much of the rural population to urbanize.", "fol": "", "prediction": ["all x y.((SevereDrought(x) & RuralPopulation(y)) -> Urbanizes(x,y))"]}
{"id": "eqasc_train_10110", "nl": "Severe droughts may cause a bottleneck effect", "fol": "", "prediction": ["all x.(SevereDrought(x) -> (CausesBlockneckEffect(x) | BottleneckEffect(x)))"]}
{"id": "eqasc_train_10111", "nl": "Effects of bottlenecks are unpredictable .", "fol": "", "prediction": ["all x.((Blockneck(x) & Unpredictable(x)) -> -Effects(x))"]}
{"id": "eqasc_train_10112", "nl": "results are unpredictable when a population suddenly gets much smaller", "fol": "", "prediction": ["all x y.((Population(x) & Population(y) & SuddenlySmoothlySmaller(x,y)) -> UnpredictableResults(x))"]}
{"id": "eqasc_train_10113", "nl": "Bottleneck effect can be a precursor to extinction.", "fol": "", "prediction": ["all x.(BoutleneckEffect(x) -> PrecursorToExtinction(x))"]}
{"id": "eqasc_train_10114", "nl": "Fire usually causes temporary declines in populations.", "fol": "", "prediction": ["all x y.((Fire(x) & Population(y)) -> CausesTemporaryDecline(x,y))"]}
{"id": "eqasc_train_10115", "nl": "bottleneck effect can occur in animals after a fire", "fol": "", "prediction": ["all x y.((Animal(x) & Fire(y) & BottleneckEffect(x,y)) -> CanOccurIn(x,y))"]}
{"id": "eqasc_train_10116", "nl": "Animals and plants exist as populations.", "fol": "", "prediction": ["all x.(Animal(x) | Plant(x))"]}
{"id": "eqasc_train_10117", "nl": "Bottleneck effect occurs when an animal or plant group gets much smaller.", "fol": "", "prediction": ["all x.((AnimalOrPlantGroup(x) & MuchSmaller(x)) -> BottleneckEffect(x))"]}
{"id": "eqasc_train_10118", "nl": "Genetic variation can be reduced by random genetic drift, population bottlenecks, founder effect.", "fol": "", "prediction": ["all x.((GeographicalVariation(x) & RandomGeneticDrift(x) & PopulationBlocknecks(x) & founderEffect(x)) -> Reduced(x))"]}
{"id": "eqasc_train_10119", "nl": "Genetic variation can be reduced when a population suddenly gets much smaller.", "fol": "", "prediction": ["all x.((Population(x) & SuddenlySmaller(x)) -> ReducedGeneticVariation(x))"]}
{"id": "eqasc_train_10120", "nl": "Fishing pressure is relatively low due to a smaller human population.", "fol": "", "prediction": ["all x.((FishingPressure(x) & SmallerHumanPopulation(x)) -> RelativelyLow(x))"]}
{"id": "eqasc_train_10121", "nl": "humans can make the bottleneck effect occur in fish", "fol": "", "prediction": ["all x y.((Human(x) & Fish(y)) -> BottleneckEffectOccursIn(x,y))"]}
{"id": "eqasc_train_10122", "nl": "Populations are large groups of individuals.", "fol": "", "prediction": ["all x.(Population(x) -> LargeGroupOfIndividuals(x))"]}
{"id": "eqasc_train_10123", "nl": "bottleneck effect occurs when large groups of individuals suddenly gets much smaller", "fol": "", "prediction": ["all x y.((LargeGroup(x) & Individual(y) & SuddenlyGetsMuchSmaller(x,y)) -> BottleneckEffectOccurs(x))"]}
{"id": "eqasc_train_10124", "nl": "When a population suddenly gets much smaller the effects are unpredictable.", "fol": "", "prediction": ["all x.((Population(x) & SubsequentlySmaller(x)) -> UnpredictableEffects(x))"]}
{"id": "eqasc_train_10125", "nl": "Population is the number of people.", "fol": "", "prediction": ["all x.(Population(x) -> NumberOfPeople(x))"]}
{"id": "eqasc_train_10126", "nl": "Bottleneck effect occurs when the number of people suddenly gets much smaller.", "fol": "", "prediction": ["all x.((People(x) & SuddenlySmaller(x)) -> BottleneckEffect(x))"]}
{"id": "eqasc_train_10127", "nl": "Population growth is reduced by external migration.", "fol": "", "prediction": ["all x.((PopulationGrowth(x) & ExternalMigration(x)) -> Reduced(x))"]}
{"id": "eqasc_train_10128", "nl": "Bottleneck effect occurs with external migration.", "fol": "", "prediction": ["all x.((BoutleneckEffect(x) & ExternalMigration(x)) -> Occurs(x))"]}
{"id": "eqasc_train_10129", "nl": "boiling means change from a liquid into a gas by adding heat energy", "fol": "", "prediction": ["all x y.((Boiling(x) & Liquid(y)) -> ChangesToGasByAdditionOfHeatEnergy(x,y))"]}
{"id": "eqasc_train_10130", "nl": "Water is heated to the boiling point and changes to steam.", "fol": "", "prediction": ["all x.(Water(x) -> (HeatedToBoilingPoint(x) & ChangesToSteam(x)))"]}
{"id": "eqasc_train_10131", "nl": "boiling changes a liquid into steam", "fol": "", "prediction": ["all x y.((Boiling(x) & Liquid(y)) -> ChangesIntoSteam(x,y))"]}
{"id": "eqasc_train_10132", "nl": "boiling means evaporation by adding heat energy", "fol": "", "prediction": ["all x.(Boiling(x) -> (AdditionalHeatEnergy(x) & Evaporation(x)))"]}
{"id": "eqasc_train_10133", "nl": "boiling means change from water into a gas by adding heat energy", "fol": "", "prediction": ["all x y.((Boiling(x) & Water(y)) -> ChangesToGasByAdditionOfHeatEnergy(x,y))"]}
{"id": "eqasc_train_10134", "nl": "For a smoother flavor, bring soup to a boil.", "fol": "", "prediction": ["all x.((Soup(x) & BringToBoil(x)) -> SmootherFlavor(x))"]}
{"id": "eqasc_train_10135", "nl": "cooking soup means change from liquid to gas by adding heat energy", "fol": "", "prediction": ["all x.(CookingSoup(x) -> (ChangeFromLiquidToGas(x) & AddsHeatEnergy(x)))"]}
{"id": "eqasc_train_10136", "nl": "Boiling water produces steam.", "fol": "", "prediction": ["all x.(BoilingWater(x) -> ProducesSteam(x))"]}
{"id": "eqasc_train_10137", "nl": "When enough heat energy is added to water, it becomes steam.", "fol": "", "prediction": ["all x.((AdditionOfHeatEnergy(x) & Water(x)) -> Steam(x))"]}
{"id": "eqasc_train_10138", "nl": "gas heats water and turns it into gas", "fol": "", "prediction": ["all x y.((Gas(x) & Water(y)) -> (Heats(x,y) & TurnsIntoGas(x,y)))"]}
{"id": "eqasc_train_10139", "nl": "boiling means change from a liquid into a gas by adding joules", "fol": "", "prediction": ["all x y.((Boiling(x) & Liquid(y)) -> ChangesToGas(x,y))"]}
{"id": "eqasc_train_10140", "nl": "Boiling is the very rapid conversion of a liquid into vapor by the violent evolution of bubbles.", "fol": "", "prediction": ["all x y.((Boiling(x) & Liquid(y)) -> ConvertsToVapor(x,y))"]}
{"id": "eqasc_train_10141", "nl": "The violent evolution of bubbles means a change from a liquid into a gas by adding heat energy.", "fol": "", "prediction": ["all x.((Blown(x) & ViolentEvolution(x)) -> (ChangeFromLiquidToGas(x) & AddsHeatEnergy(x)))"]}
{"id": "eqasc_train_10142", "nl": "Propane can be either a liquid or a gas.", "fol": "", "prediction": ["all x.(Propane(x) -> (Liquid(x) | Gas(x)))"]}
{"id": "eqasc_train_10143", "nl": "heat can be added to propane to change it's properties through the boiling process", "fol": "", "prediction": ["all x y.((Propanel(x) & Heat(y)) -> (AddedTo(x,y) & ChangeProperties(x,y)))"]}
{"id": "eqasc_train_10144", "nl": "boiling means changing from liquid to a gas by adding joules ", "fol": "", "prediction": ["all x y.((Boiling(x) & Liquid(y)) -> Gas(x,y))"]}
{"id": "eqasc_train_10145", "nl": "if gas is heated then that gas will expand", "fol": "", "prediction": ["all x.(HeatedGas(x) -> GasExpands(x))"]}
{"id": "eqasc_train_10146", "nl": "If a material is heated, it expands and the density decreases.", "fol": "", "prediction": ["all x.(Heated(x) -> (Expands(x) & DensityDecreases(x)))"]}
{"id": "eqasc_train_10147", "nl": "if a gas is heated the density decreases", "fol": "", "prediction": ["all x y.((Gas(x) & Heated(x)) -> DensityDecreases(y))"]}
{"id": "eqasc_train_10148", "nl": "Chlorine is a type of Green Cross gas.", "fol": "", "prediction": ["all x.(Chlorine(x) -> GreenCrossGas(x))"]}
{"id": "eqasc_train_10149", "nl": "if chlorine is heated then it will expand", "fol": "", "prediction": ["all x.(HeatedChlorine(x) -> Expands(x))"]}
{"id": "eqasc_train_10150", "nl": "Cottages are heated by gas space heat or gas furnaces.", "fol": "", "prediction": ["all x.(Candle(x) -> (HeatedByGasSpaceHeat(x) | HeatedByGasFurnace(x)))"]}
{"id": "eqasc_train_10151", "nl": "gas expands after going through a furnace into a cottage", "fol": "", "prediction": ["all x y z.((Gas(x) & Furnace(y) & Cottage(z)) -> ExpandsAfterFurnaceInto(x,y,z))"]}
{"id": "eqasc_train_10152", "nl": "Nitrogen gas is the most abundant gas in the atmosphere.", "fol": "", "prediction": ["all x.(NitrogenGas(x) -> AbundantGas(x))"]}
{"id": "eqasc_train_10153", "nl": "Nitrogen expands as it's heated", "fol": "", "prediction": ["all x.((Nitrogen(x) & HeatsHeated(x)) -> Expands(x))"]}
{"id": "eqasc_train_10154", "nl": "An increase in temperature causes a gas to expand.", "fol": "", "prediction": ["all x y.((IncreaseInTemperature(x) & Gas(y)) -> CausesExpansion(x,y))"]}
{"id": "eqasc_train_10155", "nl": "temperature affects gas", "fol": "", "prediction": ["all x.(Temperature(x) -> AffectsGas(x))"]}
{"id": "eqasc_train_10156", "nl": "If more space between 2 galaxies more space to expand so it moves away faster.", "fol": "", "prediction": ["all x.((Galaxies(x) & MoreSpaceBetween(x,2)) -> MoreSpaceToExpand(x))"]}
{"id": "eqasc_train_10157", "nl": "When gas is heated, it takes up more space.", "fol": "", "prediction": ["all x.(HeatedGas(x) -> TakesUpMoreSpace(x))"]}
{"id": "eqasc_train_10158", "nl": "if nitrogen is heated it will expand", "fol": "", "prediction": ["all x y.((NitrogenHeated(x) & Heats(y)) -> Expands(x,y))"]}
{"id": "eqasc_train_10159", "nl": "Hydrogen chloride is a gas.", "fol": "", "prediction": ["all x.(HydrogenChloride(x) -> Gas(x))"]}
{"id": "eqasc_train_10160", "nl": "If hydrogen chloride is heated it will expand", "fol": "", "prediction": ["all x.(HeatedHydrogenChloride(x) -> Expands(x))"]}
{"id": "eqasc_train_10161", "nl": "When gas is heated, the density decreases", "fol": "", "prediction": ["all x.(HeatedGas(x) -> DensityDecreases(x))"]}
{"id": "eqasc_train_10162", "nl": "Algae have varied life cycles.", "fol": "", "prediction": ["all x.(Algae(x) -> DiverseLifeCycles(x))"]}
{"id": "eqasc_train_10163", "nl": "Algae on Turf Plant Pathology Algae on Turf Algae are primitive green plants.", "fol": "", "prediction": ["all x.(AlgaeOnTurfPlantPathology(x) -> PrimitiveGreenPlant(x))"]}
{"id": "eqasc_train_10164", "nl": "primitive green plants have varied life cycles", "fol": "", "prediction": ["all x.(PrimaryGreenPlant(x) -> (VariableLifeCycles(x) & PrimitiveGreenPlant(x)))"]}
{"id": "eqasc_train_10165", "nl": "algae are capable of reproduction", "fol": "", "prediction": ["all x.(Algae(x) -> CapableOfReproduction(x))"]}
{"id": "eqasc_train_10166", "nl": "the simplest green plants have varied life cycles", "fol": "", "prediction": ["all x.((GreenPlant(x) & Simplest(x)) -> VariableLifeCycles(x))"]}
{"id": "eqasc_train_10167", "nl": "the simplest of green plants have varied life cycles", "fol": "", "prediction": ["all x.((GreenPlant(x) & Simplest(x)) -> HasVarietyCycles(x))"]}
{"id": "eqasc_train_10168", "nl": "Desmids are green algae, members of the Chlorophyta.", "fol": "", "prediction": ["all x.(Desmid(x) -> (GreenAlgae(x) & Chlorophyta(x)))"]}
{"id": "eqasc_train_10169", "nl": "Desmids have varied life cycles.", "fol": "", "prediction": ["all x.(Desmid(x) -> DiverseLifeCycles(x))"]}
{"id": "eqasc_train_10170", "nl": "Some red algae are eaten by humans.", "fol": "", "prediction": ["exists x.(RedAlgae(x) & EatenByHumans(x))"]}
{"id": "eqasc_train_10171", "nl": "Something eaten by humans have varied life cycles", "fol": "", "prediction": ["all x.((EatenByHumans(x) & HasVarietyInLifeCycles(x)) -> DiverseLifeCycles(x))"]}
{"id": "eqasc_train_10172", "nl": "Diatomes are a type of single celled algae.", "fol": "", "prediction": ["all x.(Diatome(x) -> (SingleLeavedAlgae(x) & Algae(x)))"]}
{"id": "eqasc_train_10173", "nl": "diatomes have varied life cycles", "fol": "", "prediction": ["all x.(Diatome(x) -> DiverseLifeCycles(x))"]}
{"id": "eqasc_train_10174", "nl": "Some, such as the green algae, are plants.", "fol": "", "prediction": ["exists x.(GreenAlgae(x) & Plant(x))"]}
{"id": "eqasc_train_10175", "nl": "Some plants have varied life cycles.", "fol": "", "prediction": ["exists x.(Plant(x) & VariableLifeCycle(x))"]}
{"id": "eqasc_train_10176", "nl": "plants have varied life cycles", "fol": "", "prediction": ["all x.(Plant(x) -> VariableLifeCycles(x))"]}
{"id": "eqasc_train_10177", "nl": "And fish eat algae.", "fol": "", "prediction": ["(all x.(Fish(x) -> EatsAlgae(x)))"]}
{"id": "eqasc_train_10178", "nl": "fish eat foods with varied life cycles", "fol": "", "prediction": ["all x y.((Fish(x) & Food(y) & DiverseLifeCycles(y)) -> Eats(x,y))"]}
{"id": "eqasc_train_10179", "nl": "Most common life cycle in the green algae is the haploid type.", "fol": "", "prediction": ["all x.(GreenAlgae(x) -> Haplotype(x))"]}
{"id": "eqasc_train_10180", "nl": "most algae are haploid", "fol": "", "prediction": ["all x.(Algae(x) -> Haploid(x))"]}
{"id": "eqasc_train_10181", "nl": "Algae and many other aquatic plants are eaten by a variety of invertebrates and fish.", "fol": "", "prediction": ["all x y.((Algae(x) & AquaticPlant(y)) -> (EatenBy(x,y) & Invertebrate(x) & Fish(x)))"]}
{"id": "eqasc_train_10182", "nl": "Certain aquatic organisms eaten by fish have varied life cycles", "fol": "", "prediction": ["exists x.(AquaticOrganism(x) & EatenByFish(x) & DiverseLifeCycles(x))"]}
{"id": "eqasc_train_10183", "nl": "Coccolithophorids are members of the Algae.", "fol": "", "prediction": ["all x.(Coccolithophorid(x) -> MemberOfAlgae(x))"]}
{"id": "eqasc_train_10184", "nl": "Coccolithophorids have varied life cycles", "fol": "", "prediction": ["all x.(Coccolithophorid(x) -> HasVarietyOfLifeCycles(x))"]}
{"id": "eqasc_train_10185", "nl": "Some viruses have an envelope of phospholipids and proteins.", "fol": "", "prediction": ["exists x.(Virus(x) & EnvelopeOfPhospholipidsAndProteins(x))"]}
{"id": "eqasc_train_10186", "nl": "Phospholipids are body fats, too.", "fol": "", "prediction": ["all x.(Phospholipid(x) -> BodyFat(x))"]}
{"id": "eqasc_train_10187", "nl": "some viruses have an envelope of body fats and proteins", "fol": "", "prediction": ["exists x.(Virus(x) & HasEnvelopeOfBodyFatsAndProteins(x))"]}
{"id": "eqasc_train_10188", "nl": "Some viruses have an envelope of fats and proteins.", "fol": "", "prediction": ["exists x.(Virus(x) & HasEnvelopeOfFatsAndProteins(x))"]}
{"id": "eqasc_train_10189", "nl": "Proteins are sometimes coats of a virus.", "fol": "", "prediction": ["all x.(Protein(x) -> (Coat(x,virus) | -Coat(x,virus)))"]}
{"id": "eqasc_train_10190", "nl": "some viruses have a coating of phospholipids", "fol": "", "prediction": ["exists x.(Virus(x) & HasCoatingOfPhospholipids(x))"]}
{"id": "eqasc_train_10191", "nl": "Enveloped viruses make their own membranes.", "fol": "", "prediction": ["all x.(EnvelopedVirus(x) -> MakesOwnMembrane(x))"]}
{"id": "eqasc_train_10192", "nl": "Some viruses make their own membranes", "fol": "", "prediction": ["exists x.(Virus(x) & MakesOwnMembrane(x))"]}
{"id": "eqasc_train_10193", "nl": "Viruses are enveloped by similar membranes.", "fol": "", "prediction": ["all x.(Virus(x) -> EnvelopedBySameMembrane(x))"]}
{"id": "eqasc_train_10194", "nl": "viruses have similar membranes ", "fol": "", "prediction": ["all x.(Virus(x) -> SimilarMembrane(x))"]}
{"id": "eqasc_train_10195", "nl": "Intrinsic proteins are embedded in the phospholipid.", "fol": "", "prediction": ["all x.(IntrinsicProtein(x) -> EmbedInPhospholipid(x))"]}
{"id": "eqasc_train_10196", "nl": "Some viruses have intrinsic proteins", "fol": "", "prediction": ["exists x.(Virus(x) & HasIntroductionProteins(x))"]}
{"id": "eqasc_train_10197", "nl": "Viruses are strange life forms.", "fol": "", "prediction": ["all x.(Virus(x) -> StrangeLifeForm(x))"]}
{"id": "eqasc_train_10198", "nl": "Some strange life forms have an envelope of phospholipids and proteins", "fol": "", "prediction": ["exists x.(ScaryLifeForm(x) & EnvelopeOfPhospholipidsAndProteins(x))"]}
{"id": "eqasc_train_10199", "nl": "Phospholipases are the enzymes that degrade phospholipids .", "fol": "", "prediction": ["all x.(Phospholipase(x) -> DegradesPhospholipids(x))"]}
{"id": "eqasc_train_10200", "nl": "Some viruses have an envelope of enzymes and proteins.", "fol": "", "prediction": ["exists x.(Virus(x) & HasEnvelopeOfEnzymesAndProteins(x))"]}
{"id": "eqasc_train_10201", "nl": "Some viruses are also enclosed by an envelope of fat and protein molecules.", "fol": "", "prediction": ["exists x.(Virus(x) & EnclosedByEnvelope(x))"]}
{"id": "eqasc_train_10202", "nl": "Some viruses are also enclosed by phospholipids fat and molecules ", "fol": "", "prediction": ["exists x.(Virus(x) & EnclosedBy(x,phospholipids) & Fat(x) & Molecules(x))"]}
{"id": "eqasc_train_10203", "nl": "Mutation creates new genetic variation in a gene pool.", "fol": "", "prediction": ["all x y.((Mutation(x) & GenePool(y)) -> CreatesNewGeneticVariation(x,y))"]}
{"id": "eqasc_train_10204", "nl": "Most genetic variations in a gene pool are beneficial to organisms.", "fol": "", "prediction": ["all x y.((GeneticVariations(x) & GenePool(y)) -> BeneficialToOrganisms(x,y))"]}
{"id": "eqasc_train_10205", "nl": "Genetic variation is the basis for natural selection.", "fol": "", "prediction": ["all x.(GeneticVariation(x) -> NaturalSelectionBase(x))"]}
{"id": "eqasc_train_10206", "nl": "mutation is the basis for natural selection", "fol": "", "prediction": ["all x.(Mutation(x) -> NaturalSelection(x))"]}
{"id": "eqasc_train_10207", "nl": "Genetic variation is the raw material for evolution.", "fol": "", "prediction": ["all x.(GeneticVariation(x) -> RawMaterialForEvolution(x))"]}
{"id": "eqasc_train_10208", "nl": "Mutation in a gene pool is the raw material for evolution", "fol": "", "prediction": ["all x y.((GenePool(x) & Mutation(y)) -> RawMaterialForEvolution(x,y))"]}
{"id": "eqasc_train_10209", "nl": "Biodiversity refers to the genetic variation of all life on Earth.", "fol": "", "prediction": ["all x.(Biodiversity(x) -> GeneticVariationOfLife(x))"]}
{"id": "eqasc_train_10210", "nl": "Mutation creates biodiversity", "fol": "", "prediction": ["all x.(Mutation(x) -> CreatesBiodiversity(x))"]}
{"id": "eqasc_train_10211", "nl": "Adult genotypes reflect the genes they contribute to the gene pool.", "fol": "", "prediction": ["all x.(Adult(x) -> ReflectsGenes(x))"]}
{"id": "eqasc_train_10212", "nl": "Mutation creates new genetic variation in adult genotypes", "fol": "", "prediction": ["all x y.((Mutation(x) & AdultGenotype(y)) -> CreatesNewGeneticVariation(x,y))"]}
{"id": "eqasc_train_10213", "nl": "Mutations Mutations are random changes in the genetic information of an organism.", "fol": "", "prediction": ["all x.(Mutations(x) -> (RandomChangesInGeneticInformation(x) & Organism(x)))"]}
{"id": "eqasc_train_10214", "nl": "Random changes in the genetic information of an organism creates a new genetic variation.", "fol": "", "prediction": ["all x y.((Organism(x) & RandomChangesInGeneticInformation(x,y)) -> CreatesNewGeneticVariation(x))"]}
{"id": "eqasc_train_10215", "nl": "Mutation leads to evolution.", "fol": "", "prediction": ["all x.(Mutation(x) -> Evolution(x))"]}
{"id": "eqasc_train_10216", "nl": "Fertilization increases genetic variation.", "fol": "", "prediction": ["all x.(Fertilization(x) -> IncreasesGeneticVariation(x))"]}
{"id": "eqasc_train_10217", "nl": "Mutation and fertilization have similar effects on the gene pool.", "fol": "", "prediction": ["all x y.((Mutation(x) & Fertilization(y)) -> SimilarEffectsOnGenePool(x,y))"]}
{"id": "eqasc_train_10218", "nl": "influenza viruses can achieve new genetic variation in its gene pool.", "fol": "", "prediction": ["all x.(InfluenzaVirus(x) -> CanAchieveNewGeneticVariation(x))"]}
{"id": "eqasc_train_10219", "nl": "Mutation is a basis for natural selection.", "fol": "", "prediction": ["all x.(Mutation(x) -> NaturalSelectionBase(x))"]}
{"id": "eqasc_train_10220", "nl": "Mutations Mutations are caused by random changes in genes.", "fol": "", "prediction": ["all x.(Mutations(x) -> (CausesRandomChanges(x) & Genes(x)))"]}
{"id": "eqasc_train_10221", "nl": "random changes in genes create new genetic variation in the gene pool", "fol": "", "prediction": ["all x y.((RandomChangesInGenes(x) & GenePool(y)) -> CreatesNewGeneticVariationInGenePool(x,y))"]}
{"id": "eqasc_train_10222", "nl": "Frequency of Mutations Mutations are rare events.", "fol": "", "prediction": ["FrequencyOfMutations(Mutations) -> RareEvent(Mutations))"]}
{"id": "eqasc_train_10223", "nl": "new genetic variation in a gene pool are rare events", "fol": "", "prediction": ["all x y.((GeneticVariation(x) & GenePool(y)) -> RareEvent(x))"]}
{"id": "eqasc_train_10224", "nl": "Arthropods are the largest phylum of invertebrates.", "fol": "", "prediction": ["all x.(Arthropod(x) -> LargestPhylumOfInvertebrates(x))"]}
{"id": "eqasc_train_10225", "nl": "insects are invertebrates", "fol": "", "prediction": ["all x.(Insect(x) -> (Invertebrate(x) & Invertebrate(x)))"]}
{"id": "eqasc_train_10226", "nl": "Insects belong to the largest phylum of invertibrates.", "fol": "", "prediction": ["all x.(Insect(x) -> LargestPhylumOfInvertibrates(x))"]}
{"id": "eqasc_train_10227", "nl": "Insects are in the phylum Arthropoda.", "fol": "", "prediction": ["all x.(Insect(x) -> InPhylumArthropoda(x))"]}
{"id": "eqasc_train_10228", "nl": "insects are arthropods", "fol": "", "prediction": ["all x.(Insect(x) -> Arthropod(x))"]}
{"id": "eqasc_train_10229", "nl": "arthropods have no backbone", "fol": "", "prediction": ["all x.(Arthropod(x) -> -HasBackbone(x))"]}
{"id": "eqasc_train_10230", "nl": "Arthropods are the largest phylum without a backbone", "fol": "", "prediction": ["all x.(Arthropod(x) -> (LargestPhylum(x) & -Backbone(x)))"]}
{"id": "eqasc_train_10231", "nl": "arthropods are the largest phylum of animals without a backbone", "fol": "", "prediction": ["all x.(Arthropod(x) -> (LargestPhylumOfAnimals(x) & -Backbone(x)))"]}
{"id": "eqasc_train_10232", "nl": "Arthropods are animals without a backbone.", "fol": "", "prediction": ["all x.(Arthropod(x) -> Animal(x))"]}
{"id": "eqasc_train_10233", "nl": "insects are in the largest phylum of invertebrates.", "fol": "", "prediction": ["all x.(Insect(x) -> LargestPhylumOfInvertebrates(x))"]}
{"id": "eqasc_train_10234", "nl": "if an object is in the sunlight then that object will absorb solar energy", "fol": "", "prediction": ["all x.((Object(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))"]}
{"id": "eqasc_train_10235", "nl": "An object's color determines how much solar energy it absorbs.", "fol": "", "prediction": ["all x.((Object(x) & Color(x)) -> DeterminesAbsorbsSolarEnergy(x))"]}
{"id": "eqasc_train_10236", "nl": "an objects color determines how much it is affected by sunlight", "fol": "", "prediction": ["all x.((Object(x) & Color(x)) -> DeterminesAffectedBySunlight(x))"]}
{"id": "eqasc_train_10237", "nl": "Solar energy heats surface.", "fol": "", "prediction": ["all x.(SolarEnergy(x) -> HeatsSurface(x))"]}
{"id": "eqasc_train_10238", "nl": "if an object is in the sunlight it will heat up", "fol": "", "prediction": ["all x.((Object(x) & InSunlight(x)) -> HeatsUp(x))"]}
{"id": "eqasc_train_10239", "nl": "Solar panels absorb energy from the sun.", "fol": "", "prediction": ["all x.(SolarPanel(x) -> AbsorbsEnergyFromSun(x))"]}
{"id": "eqasc_train_10240", "nl": "Solar panels absorb sunlight. ", "fol": "", "prediction": ["all x.(SolarPanel(x) -> AbsorbsSunlight(x))"]}
{"id": "eqasc_train_10241", "nl": "Leaves absorb sunlight.", "fol": "", "prediction": ["all x.(Leaves(x) -> AbsorbsSunlight(x))"]}
{"id": "eqasc_train_10242", "nl": "leaves absorb solar energy", "fol": "", "prediction": ["all x.(Leaves(x) -> AbsorbsSolarEnergy(x))"]}
{"id": "eqasc_train_10243", "nl": "When solar energy reaches the earth's surface it is absorbed and reradiated as heat.", "fol": "", "prediction": ["all x.((SolarEnergy(x) & ReachesEarthSurface(x)) -> (Absorbed(x) & Reradiated(x)))"]}
{"id": "eqasc_train_10244", "nl": "An object in the sunlight will absorb energy and re-radiate it as heat.", "fol": "", "prediction": ["all x.((Object(x) & InSunlight(x)) -> (AbsorbsEnergy(x) & ReradiatesHeat(x)))"]}
{"id": "eqasc_train_10245", "nl": "Another symbolic object is the badge on the hat of Dinteville.", "fol": "", "prediction": ["(SymbolicalObject(x) & BadgeOnHat(x,Dinteville))"]}
{"id": "eqasc_train_10246", "nl": "if a badge is in the sunlight then that badge will absorb solar energy", "fol": "", "prediction": ["all x y.((Badge(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x,y))"]}
{"id": "eqasc_train_10247", "nl": "Solar energy is provided by the sun and collected by a solar panel.", "fol": "", "prediction": ["all x y.((SolarEnergy(x) & Sun(y)) -> (Provides(x,y) & Collects(x,y)))"]}
{"id": "eqasc_train_10248", "nl": "Solar panels must be in sunlight to produce power.", "fol": "", "prediction": ["all x.(SolarPanel(x) -> (InSunlight(x) & ProducesPower(x)))"]}
{"id": "eqasc_train_10249", "nl": "An object in sunlight absorbs heat.", "fol": "", "prediction": ["all x.((Object(x) & InSunlight(x)) -> AbsorbsHeat(x))"]}
{"id": "eqasc_train_10250", "nl": "healing requires rest", "fol": "", "prediction": ["all x.(HealingRequiresRest(x) -> RequiresRestraint(x))"]}
{"id": "eqasc_train_10251", "nl": "healing requires sleep", "fol": "", "prediction": ["all x.(HealingRequiresSleep(x) -> RequiresSleep(x))"]}
{"id": "eqasc_train_10252", "nl": "And, after a full day, relax to a sound and restful sleep in the cool, fresh mountain air.", "fol": "", "prediction": ["all x.((FullDay(x) & RelaxToSoundAndRelaxation(x) & CoolFreshMountainAir(x)) -> RelaxTo(x))"]}
{"id": "eqasc_train_10253", "nl": "Healing requires a sound sleep", "fol": "", "prediction": ["all x.(Healing(x) -> SoundSleep(x))"]}
{"id": "eqasc_train_10254", "nl": "Healing and cell regeneration follows.", "fol": "", "prediction": ["all x.((Healing(x) & CellRegeneration(x)) -> Follows(x))"]}
{"id": "eqasc_train_10255", "nl": "cell regeneration requires rest", "fol": "", "prediction": ["all x.(CellRegenerationRequiresResistantResistance(x) -> RequiresResistance(x))"]}
{"id": "eqasc_train_10256", "nl": "Sleep also allows the joints to rest.", "fol": "", "prediction": ["all x.(Sleep(x) -> AllowsJoinsToRest(x))"]}
{"id": "eqasc_train_10257", "nl": "healing requires sleep as well as sitting", "fol": "", "prediction": ["all x.(Healing(x) -> (RequiresSleep(x) & RequiresSitting(x)))"]}
{"id": "eqasc_train_10258", "nl": "Recovery takes time, rest, and good nutrition.", "fol": "", "prediction": ["all x.(Recovery(x) -> (TakesTime(x) & TakesRerest(x) & TakesGoodNutrition(x)))"]}
{"id": "eqasc_train_10259", "nl": "healing requires time", "fol": "", "prediction": ["all x.(HealingRequiresTime(x) -> RequiresTime(x))"]}
{"id": "eqasc_train_10260", "nl": "Rest is essential to tissue healing.", "fol": "", "prediction": ["all x.(Rerest(x) -> EssentialToTissueHealing(x))"]}
{"id": "eqasc_train_10261", "nl": "tissues get better with rest", "fol": "", "prediction": ["all x.(Tissue(x) -> BetterWithRest(x))"]}
{"id": "eqasc_train_10262", "nl": "Lavender induces restful sleep.", "fol": "", "prediction": ["all x.(Lavender(x) -> InducesRelaxingSleep(x))"]}
{"id": "eqasc_train_10263", "nl": "Lavender can induce healing", "fol": "", "prediction": ["all x.(Lavender(x) -> InducesHealing(x))"]}
{"id": "eqasc_train_10264", "nl": "Healing requires energy.", "fol": "", "prediction": ["all x.(Healing(x) -> RequiresEnergy(x))"]}
{"id": "eqasc_train_10265", "nl": "energy requires rest", "fol": "", "prediction": ["all x.((Energy(x) & Rest(x)) -> Requires(x,Requires(x,Requires(x,Requires(x,Requires(x,Requires(x,Requires(x,Requires(x,Requires(x,Requires(x,Requires(x,Requires(x,Requires(x,Requires(x,Requires(x,Requires(x,Requires(x,Requires(x,Requires))))"]}
{"id": "eqasc_train_10266", "nl": "seasons cause change to the environment", "fol": "", "prediction": ["all x y.((Season(x) & Environment(y)) -> CausesChange(x,y))"]}
{"id": "eqasc_train_10267", "nl": "Wildlife Habitat the native environment of an animal.", "fol": "", "prediction": ["all x y.((WildlifeHabitat(x) & Animal(y)) -> NativeEnvironment(x,y))"]}
{"id": "eqasc_train_10268", "nl": "Seasons cause change to the native habitat of animals.", "fol": "", "prediction": ["all x y.((Season(x) & Animal(y)) -> CausesChangeToNativeHabitat(x,y))"]}
{"id": "eqasc_train_10269", "nl": "Summer is a hot, wet season.", "fol": "", "prediction": ["all x.(Summer(x) -> (Hot(x) & Wet(x)))"]}
{"id": "eqasc_train_10270", "nl": "summer can cause change to the environment", "fol": "", "prediction": ["all x.(Summer(x) -> CanCauseChangeToEnvironment(x))"]}
{"id": "eqasc_train_10271", "nl": "Seasons are caused by the precession of Earth's axis.", "fol": "", "prediction": ["all x.(Season(x) -> CausedByPrecessionOfEarthsAxis(x))"]}
{"id": "eqasc_train_10272", "nl": "The environment changes with the precession of the earth's axis", "fol": "", "prediction": ["all x y.((Environment(x) & EarthsAxis(y)) -> Precession(x,y))"]}
{"id": "eqasc_train_10273", "nl": "weather cause change to the environment", "fol": "", "prediction": ["all x y.((Weather(x) & Environment(y)) -> CausesChange(x,y))"]}
{"id": "eqasc_train_10274", "nl": "winter causes change to the environment", "fol": "", "prediction": ["all x y.((Winter(x) & Environment(y)) -> CausesChange(x,y))"]}
{"id": "eqasc_train_10275", "nl": "An ecosystem is an environment and all the members of that environment.", "fol": "", "prediction": ["all x.(Ecosystem(x) -> (Environment(x) & AllMembersOfEnvironment(x)))"]}
{"id": "eqasc_train_10276", "nl": "Seasons cause change to ecosystems.", "fol": "", "prediction": ["all x y.((Season(x) & Ecosystem(y)) -> CausesChange(x,y))"]}
{"id": "eqasc_train_10277", "nl": "Seasonal variations and random changes in the environment affect species' life histories and stocks.", "fol": "", "prediction": ["all x y.((SeasonalVariations(x) & RandomChangesInEnvironment(x)) -> (AffectsLifeHistory(y) & AffectsStocks(y)))"]}
{"id": "eqasc_train_10278", "nl": "The environmental changes affect the life history of a species.", "fol": "", "prediction": ["all x y.((EnvironmentalChange(x) & Species(y)) -> AffectsLifeHistory(x,y))"]}
{"id": "eqasc_train_10279", "nl": "seasons cause change to native habitats", "fol": "", "prediction": ["all x y.((Season(x) & NativeHabitat(y)) -> CausesChange(x,y))"]}
{"id": "eqasc_train_10280", "nl": "Some plants, such as poison ivy, are highly poisonous.", "fol": "", "prediction": ["exists x.(Plant(x) & (PoisonIvy(x) | PoisonIvy(x)))"]}
{"id": "eqasc_train_10281", "nl": "Poison ivy requires sunlight for photosynthesis", "fol": "", "prediction": ["all x.(PoisonIvy(x) -> RequiresSunlightForPhotosynthesis(x))"]}
{"id": "eqasc_train_10282", "nl": "a plant requires sunlight for living and growing.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresSunlight(x)) -> (Living(x) | Growing(x)))"]}
{"id": "eqasc_train_10283", "nl": "Photosynthesis stores energy in plants.", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & Plant(y)) -> StoresEnergy(x,y))"]}
{"id": "eqasc_train_10284", "nl": "a plant requires sunlight to store energy", "fol": "", "prediction": ["all x y.((Plant(x) & Sunlight(y)) -> RequiresToStoreEnergy(x,y))"]}
{"id": "eqasc_train_10285", "nl": "a plant requires  photons for photosynthesis", "fol": "", "prediction": ["all x y.((Plant(x) & Photon(y)) -> RequiresForPhotosynthesis(x,y))"]}
{"id": "eqasc_train_10286", "nl": "leaves require sunlight", "fol": "", "prediction": ["all x.(Leaves(x) -> RequiresSunlight(x))"]}
{"id": "eqasc_train_10287", "nl": "Plants feed themselves through the process called photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> FeedsThroughPhotosynthesis(x))"]}
{"id": "eqasc_train_10288", "nl": "Plants require sunlight in order to feed themselves.", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresSunlight(x))"]}
{"id": "eqasc_train_10289", "nl": "Ferns are one type of seedless plant.", "fol": "", "prediction": ["all x.(Fern(x) -> SeedlessPlant(x))"]}
{"id": "eqasc_train_10290", "nl": "ferns require sunlight for photosynthesis", "fol": "", "prediction": ["all x.(Fern(x) -> (RequiresSunlight(x) & Photosynthesis(x)))"]}
{"id": "eqasc_train_10291", "nl": "Photosynthesis occurs using the suns energy to create the plants own energy.", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & Sun(y)) -> (OccursUsing(x,y) & CreatesOwnEnergy(x,y)))"]}
{"id": "eqasc_train_10292", "nl": "sunlight creates energy for plants", "fol": "", "prediction": ["all x y.((Sunlight(x) & Plant(y)) -> CreatesEnergy(x,y))"]}
{"id": "eqasc_train_10293", "nl": "Photosynthesis is the process of making food.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> MakesFood(x))"]}
{"id": "eqasc_train_10294", "nl": "a plant requires sunlight to make food", "fol": "", "prediction": ["all x y.((Plant(x) & Sunlight(y)) -> RequiresToMakeFood(x,y))"]}
{"id": "eqasc_train_10295", "nl": "information in an organism 's chromosomes cause genetic traits to be passed down to that organism 's offspring", "fol": "", "prediction": ["all x y z.((Organism(x) & Chromosomes(y) & GeneticTreatments(z)) -> (InformationInChromosomes(x,y) & GenericTreatments(z) & PassedToOffspring(x,z)))"]}
{"id": "eqasc_train_10296", "nl": "Chromosomes are units of genetic information.", "fol": "", "prediction": ["all x.(Chromosome(x) -> GeneticInformation(x))"]}
{"id": "eqasc_train_10297", "nl": "Chromosomes are units of information causing traits to be passed down to offspring.", "fol": "", "prediction": ["all x.(Chromosome(x) -> (UnitOfInformation(x) & CausesTraitsToBePassedToOffspring(x)))"]}
{"id": "eqasc_train_10298", "nl": "Intelligence primarily comes from chromosomes being passed down. ", "fol": "", "prediction": ["all x.(Intelligence(x) -> (ComesFromChromosomes(x) & PassedDown(x)))"]}
{"id": "eqasc_train_10299", "nl": "All physical traits and some behavioral traits are determined by our genetic makeup.", "fol": "", "prediction": ["all x.(PhysicalTreatment(x) & exists y.(BehavioralTreatment(y) & DeterminedByGeneticMaking(x,y)))"]}
{"id": "eqasc_train_10300", "nl": "information in an organism 's chromosomes determine physical and some behavioral characteristics of offspring", "fol": "", "prediction": ["all x y z.((Organism(x) & Chromosome(y) & Offspring(z)) -> (DeterminesPhysicalCharacteristics(x,y) & DeterminesBehavioralCharacteristics(x,z)))"]}
{"id": "eqasc_train_10301", "nl": "DNA carries information.", "fol": "", "prediction": ["all x.(DNA(x) -> CarriesInformation(x))"]}
{"id": "eqasc_train_10302", "nl": "DNA cause genetic traits to be passed down to that organism 's offspring", "fol": "", "prediction": ["all x y z.((DNA(x) & Organism(y) & Offspring(z)) -> CausesGeneticTreatmentsToBePassedDownTo(x,y,z))"]}
{"id": "eqasc_train_10303", "nl": "Genetic traits are passed down to offspring through chromosomes", "fol": "", "prediction": ["all x y z.((GeneticTreatment(x) & Offspring(y) & Chromosome(z)) -> PassedThrough(x,y,z))"]}
{"id": "eqasc_train_10304", "nl": "Genetics is the study of how traits are passed down, or inherited, from one generation to another.", "fol": "", "prediction": ["all x y.((Genetics(x) & Generation(y)) -> (PassedDown(x,y) | inherited(x,y)))"]}
{"id": "eqasc_train_10305", "nl": "how traits are passed down, or inherited, is found in information in an organism's chromosomes.", "fol": "", "prediction": ["all x y.((Organism(x) & Chromosome(y)) -> (PassedDown(x,y) | Erased(x,y)))"]}
{"id": "eqasc_train_10306", "nl": "DNA, which contains our genetic code, is the basic building block of chromosomes.", "fol": "", "prediction": ["all x.((DNA(x) & ContainsGeneticCode(x)) -> BasicBuildingBlockOfChromosomes(x))"]}
{"id": "eqasc_train_10307", "nl": "DNA causes offspring to inherit genetic traits", "fol": "", "prediction": ["all x y.((DNA(x) & Offspring(y)) -> CausesGeneticTreatmentsToEarn(y,x))"]}
{"id": "eqasc_train_10308", "nl": "FAS children are the offspring of chronic alcoholic women.", "fol": "", "prediction": ["all x.(FASChild(x) -> OffspringOfChronicAlcoholic(x))"]}
{"id": "eqasc_train_10309", "nl": "Information in an organism 's chromosomes cause genetic traits to be passed down to that organism 's children.", "fol": "", "prediction": ["all x y.((Organism(x) & Chromosome(y) & InformationInChromosome(x,y)) -> GeneticTreatmentsPassedToChildren(x,y))"]}
{"id": "eqasc_train_10310", "nl": "Offspring appear in litters.", "fol": "", "prediction": ["all x.(Offspring(x) -> AppearsInLitters(x))"]}
{"id": "eqasc_train_10311", "nl": "Information in an organism's chromosomes cause genetic traits to be passed down to that organisms litters.", "fol": "", "prediction": ["all x y.((Organism(x) & InformationInChromosomes(x,y)) -> GeneticTreatmentsPassedDownToLitches(x,y))"]}
{"id": "eqasc_train_10312", "nl": "Among families with children the average number of offspring is 1.8.", "fol": "", "prediction": ["all x.((Family(x) & HasChildren(x)) -> AverageNumberOfOffspring(x,1.8))"]}
{"id": "eqasc_train_10313", "nl": " information in an organism's chromosomes cause genetic traits to be passed down to that organism's children.", "fol": "", "prediction": ["all x y.((Organism(x) & ChromosomeInformation(x,y)) -> GeneticTreatmentsPassedToChildren(x,y))"]}
{"id": "eqasc_train_10314", "nl": "DNA is a carrier of information of inheritance.", "fol": "", "prediction": ["all x.(DNA(x) -> CarrierOfInformationOfInheritance(x))"]}
{"id": "eqasc_train_10315", "nl": "DNA causes genetic traits to be passed down to that organism 's offspring", "fol": "", "prediction": ["all x y z.((DNA(x) & Organism(y) & Offspring(z)) -> CausesGeneticTreatmentsToBePassedDownTo(x,y,z))"]}
{"id": "eqasc_train_10316", "nl": "Man is a living being or organism.", "fol": "", "prediction": ["all x.(Man(x) -> (LivingBeing(x) | Organism(x)))"]}
{"id": "eqasc_train_10317", "nl": "information in Man's chromosomes cause genetic traits to be passed down to offspring", "fol": "", "prediction": ["all x y.((InformationInChromosomes(x) & Man(y)) -> CausesGeneticTreatmentsToBePassedToOffspring(x,y))"]}
{"id": "eqasc_train_10318", "nl": "Sleepwalking seems to be a genetically inheritable trait.", "fol": "", "prediction": ["all x.(Sleepwalking(x) -> GeneticallyElegibleTrait(x))"]}
{"id": "eqasc_train_10319", "nl": "Sleepwalking seems to be caused by information in an organism's chromosomes.", "fol": "", "prediction": ["all x y.((Sleepwalking(x) & Organism(y)) -> CausedByInformation(x,y))"]}
{"id": "eqasc_train_10320", "nl": "insect bites cause harm to living things", "fol": "", "prediction": ["all x y.((InsectBite(x) & LivingThing(y)) -> CausesHarmTo(x,y))"]}
{"id": "eqasc_train_10321", "nl": "Insect bites cause harm to organisms", "fol": "", "prediction": ["all x y.((InsectBite(x) & Organism(y)) -> CausesHarmTo(x,y))"]}
{"id": "eqasc_train_10322", "nl": "ant bites can cause harm to living things", "fol": "", "prediction": ["all x.(AntBite(x) -> CausesHarmToLivingThings(x))"]}
{"id": "eqasc_train_10323", "nl": "Pesticides kill insects and disease pathogens.", "fol": "", "prediction": ["all x.(Pesticide(x) -> (KillsInsects(x) & KillsDiseasePathogens(x)))"]}
{"id": "eqasc_train_10324", "nl": "Pesticides can prevent harm to living things", "fol": "", "prediction": ["all x y.((Pesticide(x) & LivingThing(y)) -> PreventsHarm(x,y))"]}
{"id": "eqasc_train_10325", "nl": "Iguanas are a lot like dogs, people and other living things.", "fol": "", "prediction": ["all x.(Iguana(x) -> (LikeDogs(x) & LikePeople(x) & LikeLivingThings(x)))"]}
{"id": "eqasc_train_10326", "nl": "Insect bites can cause harm to people.", "fol": "", "prediction": ["all x.(InsectBit(x) -> CausesHarmToPeople(x))"]}
{"id": "eqasc_train_10327", "nl": "Insect bites are another source of poisoning.", "fol": "", "prediction": ["all x.(InsectBite(x) -> PoisoningSource(x))"]}
{"id": "eqasc_train_10328", "nl": "poisonous substances can cause harm to living things", "fol": "", "prediction": ["all x y.((PoisonousSubstance(x) & LivingThing(y)) -> CausesHarmTo(x,y))"]}
{"id": "eqasc_train_10329", "nl": "Poisoning is one type of harm to living things.", "fol": "", "prediction": ["all x.(Poisoning(x) -> HarmToLivingThings(x))"]}
{"id": "eqasc_train_10330", "nl": "Some assassin bug bites can cause an allergic, life-threatening reaction in humans.", "fol": "", "prediction": ["exists x.(AssassinBite(x) & CausesAllergy(x) & LifeThreateningReaction(x))"]}
{"id": "eqasc_train_10331", "nl": "assassin bugs cause harm to humans", "fol": "", "prediction": ["all x.(AssassinBeast(x) -> CausesHarmToHumans(x))"]}
{"id": "eqasc_train_10332", "nl": "Insect repellents are used against flea bites.", "fol": "", "prediction": ["all x.(InsectRepellent(x) -> UsedAgainstFleaBits(x))"]}
{"id": "eqasc_train_10333", "nl": "Repellents can stop harm caused by flea bites", "fol": "", "prediction": ["all x y.((Repellent(x) & FleaBite(y)) -> StopsHarm(x,y))"]}
{"id": "eqasc_train_10334", "nl": "Actually, only the female mosquitoes bite people.", "fol": "", "prediction": ["all x.(Mosquito(x) -> BitePeople(x))"]}
{"id": "eqasc_train_10335", "nl": "Female mosquitoes can harm living things", "fol": "", "prediction": ["all x.(Mosquito(x) -> (Female(x) & CanHarmLivingThings(x)))"]}
{"id": "eqasc_train_10336", "nl": "a sandbar is formed by water moving sediment downstream", "fol": "", "prediction": ["all x.(Sandbar(x) -> (FormedByWater(x) & MovesSedimentDownstream(x)))"]}
{"id": "eqasc_train_10337", "nl": "Numerous sandbars and abundant woody debris provide valuable habitat for aquatic species.", "fol": "", "prediction": ["all x y.((Sandbar(x) & WoodyDebris(y)) -> (ProvidesValuableHabitat(x,y) & AquaticSpecies(x)))"]}
{"id": "eqasc_train_10338", "nl": "habitats for aquatic species are formed by water moving sediment downstream", "fol": "", "prediction": ["all x y.((Habitat(x) & AquaticSpecies(y)) -> (FormedByWater(x,y) & MovesSedimentDownstream(x)))"]}
{"id": "eqasc_train_10339", "nl": "Some sediment comes from natural erosion.", "fol": "", "prediction": ["exists x.(Sediment(x) & NaturalErosion(x))"]}
{"id": "eqasc_train_10340", "nl": "a sandbar is formed by natural erosion.", "fol": "", "prediction": ["all x.(Sandbar(x) -> FormedByNaturalErosion(x))"]}
{"id": "eqasc_train_10341", "nl": "Bare sandbars are the ideal spots for new stands of cottonwood.", "fol": "", "prediction": ["all x.(BareSandbar(x) -> IdealSpotForNewStandsOfCottonwood(x))"]}
{"id": "eqasc_train_10342", "nl": "The ideal habitat for new stands of cottonwood require sediment.", "fol": "", "prediction": ["all x.((Habitat(x) & IdealForNewStandsOfCottonwood(x)) -> RequiresSediment(x))"]}
{"id": "eqasc_train_10343", "nl": "Shoreline currents carrying sediments build sandbars and spits across bay mouths.", "fol": "", "prediction": ["all x y.((ShorelineCurrent(x) & Sealed(y)) -> (CarriesSediments(x,y) & BuildsSandbarsAndSpits(x)))"]}
{"id": "eqasc_train_10344", "nl": "Currents move sediment downstream", "fol": "", "prediction": ["all x y.((Current(x) & Sediment(y)) -> MovesDownstream(x,y))"]}
{"id": "eqasc_train_10345", "nl": "Sandbars are preferred nesting habitat.", "fol": "", "prediction": ["all x.(Sandbar(x) -> PreferredNestingHabitat(x))"]}
{"id": "eqasc_train_10346", "nl": "Water moving sediment downstream creates nesting habitats.", "fol": "", "prediction": ["all x y.((Water(x) & Sediment(y) & MovingDownstream(x,y)) -> NestingHabitat(x))"]}
{"id": "eqasc_train_10347", "nl": "Sediment moved downstream by water can create nesting habitat.", "fol": "", "prediction": ["all x.((Sediment(x) & MovedDownstreamByWater(x)) -> NestingHabitat(x))"]}
{"id": "eqasc_train_10348", "nl": "Mineral sediments are normal.", "fol": "", "prediction": ["all x.(MineralSediment(x) -> Normal(x))"]}
{"id": "eqasc_train_10349", "nl": "a sandbar is formed by water moving minerals downstream", "fol": "", "prediction": ["all x.(Sandbar(x) -> (FormedByWater(x) & MovingMineralsDownstream(x)))"]}
{"id": "eqasc_train_10350", "nl": "Native species, such as cranes, use open water and barren sandbars for roosting at night.", "fol": "", "prediction": ["all x.((NativeSpecies(x) & Crane(x)) -> (UsesOpenWater(x) & UsesBarrenSandbars(x)))"]}
{"id": "eqasc_train_10351", "nl": "Cranes roost on the formation where water moves sediment downstream.", "fol": "", "prediction": ["all x y.((Crane(x) & Formation(y) & Water(z)) -> RoostsOn(x,y,z))"]}
{"id": "eqasc_train_10352", "nl": "Rocks and sediments are pushed along the river.", "fol": "", "prediction": ["all x y.((Rock(x) & Sediment(y)) -> PushedAlongRiver(x,y))"]}
{"id": "eqasc_train_10353", "nl": "a sandbar is formed by rivers", "fol": "", "prediction": ["all x y.((Sandbar(x) & River(y)) -> FormedBy(x,y))"]}
{"id": "eqasc_train_10354", "nl": "Some precipitation that falls on land may soak into the ground, becoming groundwater.", "fol": "", "prediction": ["exists x.(Precipitation(x) & FallsOnLand(x) & SoaksIntoGround(x))"]}
{"id": "eqasc_train_10355", "nl": "some rain that falls on land may soak into the ground, becoming groundwater", "fol": "", "prediction": ["exists x.(Rain(x) & FallsOnLand(x) & SoaksIntoGround(x) & Groundwater(x))"]}
{"id": "eqasc_train_10356", "nl": "Some snow that falls on land may soak into the ground becoming groundwater.", "fol": "", "prediction": ["exists x.(Snow(x) & FallsOnLand(x) & SoaksIntoGround(x) & Groundwater(x))"]}
{"id": "eqasc_train_10357", "nl": "Stagnant water is often a breeding ground for mosquitoes.", "fol": "", "prediction": ["all x.(StagnantWater(x) -> BreedingGroundForMouses(x))"]}
{"id": "eqasc_train_10358", "nl": "Some precipitation that falls on land may soak in, becoming a breeding place for mosquitoes", "fol": "", "prediction": ["all x.((Precipitation(x) & FallsOnLand(x)) -> (SoakIn(x) & BreedingPlaceForMoskitoes(x)))"]}
{"id": "eqasc_train_10359", "nl": "Wells are drilled into groundwater and springs are fed by groundwater.", "fol": "", "prediction": ["all x y.((Well(x) & Spring(y)) -> (DrillsInto(x,Groundwater) & FeedsBy(y,Groundwater)))"]}
{"id": "eqasc_train_10360", "nl": "Springs can be fed from precipitation that soaks into the ground", "fol": "", "prediction": ["all x y.((Spring(x) & Precipitation(y) & SoaksIntoGround(y)) -> CanFeedFrom(x,y))"]}
{"id": "eqasc_train_10361", "nl": "Rain that falls on land may soak into the ground and become groundwater.", "fol": "", "prediction": ["all x.((Rain(x) & FallsOnLand(x)) -> (SoaksIntoGround(x) & BecomesGroundwater(x)))"]}
{"id": "eqasc_train_10362", "nl": "Wells and springs are supplied by groundwater.", "fol": "", "prediction": ["all x.((Well(x) | Spring(x)) -> SupplyedByGroundwater(x))"]}
{"id": "eqasc_train_10363", "nl": "Some precipitation that falls on land soaks into the ground, into wells and springs.", "fol": "", "prediction": ["exists x.(Precipitation(x) & FallsOnLand(x) & SoaksIntoGround(x) & SoaksIntoWellsAndSprings(x))"]}
{"id": "eqasc_train_10364", "nl": "Rain is only one kind of precipitation.", "fol": "", "prediction": ["all x.(Rain(x) -> Precipitation(x))"]}
{"id": "eqasc_train_10365", "nl": "rain may soak into the ground, becoming groundwater", "fol": "", "prediction": ["all x y z.((Rain(x) & Groundwater(y) & Groundwater(z)) -> (SoaksInto(x,y) & Groundwater(y)))"]}
{"id": "eqasc_train_10366", "nl": "Hail, rain, sleet, and snow are referred to as precipitation .", "fol": "", "prediction": ["all x.((Hail(x) | Rain(x) | Sleet(x) | Snow(x)) -> Precipitation(x))"]}
{"id": "eqasc_train_10367", "nl": "Hail that falls on land may soak into the ground, becoming groundwater.", "fol": "", "prediction": ["all x.((Hail(x) & FallsOnLand(x)) -> (SoaksIntoGround(x) & Groundwater(x)))"]}
{"id": "eqasc_train_10368", "nl": "Wells are usually used as a source for groundwater.", "fol": "", "prediction": ["all x.(Well(x) -> UsedAsGroundwaterSource(x))"]}
{"id": "eqasc_train_10369", "nl": "Wells can be filled with precipitation that falls on land and soaks into the ground", "fol": "", "prediction": ["all x y z.((Well(x) & Precipitation(y) & Land(z) & FallsOn(y,z)) -> SoaksInto(x,y,z))"]}
{"id": "eqasc_train_10370", "nl": "Autumnal pools fill during the fall with rising groundwater.", "fol": "", "prediction": ["all x.(AutumnalPool(x) -> FillsWithRisingGroundwater(x))"]}
{"id": "eqasc_train_10371", "nl": "Some precipitation that falls on land may fill autumnal pools", "fol": "", "prediction": ["exists x.(Precipitation(x) & FallsOnLand(x) & FillsAutumnalPools(x))"]}
{"id": "eqasc_train_10372", "nl": "a rainbow is formed by refraction of light by separating light into all different colors", "fol": "", "prediction": ["all x.(Rainbow(x) -> (FormedByRefractionOfLight(x) & SeparatesLightIntoAllColors(x)))"]}
{"id": "eqasc_train_10373", "nl": "Water vapor bends the light.", "fol": "", "prediction": ["all x.(WaterVapor(x) -> BendsLight(x))"]}
{"id": "eqasc_train_10374", "nl": "rainbows are formed by water vapor", "fol": "", "prediction": ["all x.(Rainbow(x) -> (FormedByWaterVapor(x) & FormedByWaterVapor(x)))"]}
{"id": "eqasc_train_10375", "nl": "When the light waves strike a prism, the rays of light refract, or bend, at different angles.", "fol": "", "prediction": ["all x y.((LightWavesStrikePrism(x) & RaysOfLight(y)) -> (Refract(y) | Bend(y)))"]}
{"id": "eqasc_train_10376", "nl": "a prism can form a rainbow", "fol": "", "prediction": ["all x.(Prism(x) -> CanFormRainbow(x))"]}
{"id": "eqasc_train_10377", "nl": "After the storm, a rainbow appears.", "fol": "", "prediction": ["all x.((Storm(x) & Rainbow(x)) -> Appears(x))"]}
{"id": "eqasc_train_10378", "nl": "After a storm refraction of light occurs where the light is split into all different colors", "fol": "", "prediction": ["all x y.((Storm(x) & Storm(y)) -> RefractionOfLight(x,y))"]}
{"id": "eqasc_train_10379", "nl": "Rainbows have colors because water refracts different wavelengths of light slightly differently.", "fol": "", "prediction": ["all x.(Rainbow(x) -> (HasColors(x) & WaterRefractsLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLightLight"]}
{"id": "eqasc_train_10380", "nl": "Rainbows are formed when water refracts light", "fol": "", "prediction": ["all x.(Rainbow(x) -> (WaterRefractsLight(x) & FormedBy(x,Water)))"]}
{"id": "eqasc_train_10381", "nl": "Rainbows are formed from light hitting water and refracting different wavelengths", "fol": "", "prediction": ["all x y.((Rainbow(x) & Light(y)) -> (FormedFrom(x,y) & HitsWater(x) & RefractsDifferentWavelengths(x)))"]}
{"id": "eqasc_train_10382", "nl": "chromatic dispersion is formed by refraction of light by separating light into all different colors", "fol": "", "prediction": ["all x.(CrystallicDispersion(x) -> (FormedByRefractionOfLight(x) & SeparatesLightIntoAllColors(x)))"]}
{"id": "eqasc_train_10383", "nl": "A rainbow is formed by passing light through a prism.", "fol": "", "prediction": ["all x.(Rainbow(x) -> (FormedByPassingLight(x) & ThroughPrism(x)))"]}
{"id": "eqasc_train_10384", "nl": "Introduction A rainbow is often given as an everyday example of a spectrum.", "fol": "", "prediction": ["all x.(Rainbow(x) -> (GiftedAsEverydayExampleOfSpectrum(x)))"]}
{"id": "eqasc_train_10385", "nl": "A spectrum is formed by refraction of light by separating light into all different colors.", "fol": "", "prediction": ["all x.(Spectrum(x) -> (FormedByRefractionOfLight(x) & SeparatesLightIntoAllColors(x)))"]}
{"id": "eqasc_train_10386", "nl": "Rainbows are an optical phenomena due to the diffraction of light waves.", "fol": "", "prediction": ["all x.(Rainbow(x) -> (OpticalPhenomenon(x) & DueToDiffractionOfLightWaves(x)))"]}
{"id": "eqasc_train_10387", "nl": "a rainbow is formed by diffraction into all different colors", "fol": "", "prediction": ["all x y.((Rainbow(x) & Color(y)) -> FormedByDiffraction(x,y))"]}
{"id": "eqasc_train_10388", "nl": "Rainbows form when raindrops refract sunlight.", "fol": "", "prediction": ["all x.(Rainbow(x) -> RaindropsRefractSunlight(x))"]}
{"id": "eqasc_train_10389", "nl": "sunlight causes rainbows", "fol": "", "prediction": ["all x y.((Sunlight(x) & Rainbow(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_10390", "nl": "Refraction is the bending of light.", "fol": "", "prediction": ["all x.(Refraction(x) -> BendingOfLight(x))"]}
{"id": "eqasc_train_10391", "nl": "a rainbow is formed by bending of light by separating light into all different colors", "fol": "", "prediction": ["all x y.((Rainbow(x) & Light(y)) -> (FormedByBbending(x,y) & SeparatesLightIntoAllColors(x)))"]}
{"id": "eqasc_train_10392", "nl": "a rainbow is formed by the bending of light", "fol": "", "prediction": ["all x.(Rainbow(x) -> FormedByBbendingOfLight(x))"]}
{"id": "eqasc_train_10393", "nl": "Color is the same as wavelength .", "fol": "", "prediction": ["all x y.((Color(x) & Wavelength(y)) -> Same(x,y))"]}
{"id": "eqasc_train_10394", "nl": "a rainbow is formed by refraction of light by separating light into all different wavelengths", "fol": "", "prediction": ["all x.(Rainbow(x) -> (FormedByRefractionOfLight(x) & SeparatesLightIntoAllDifferentWavelengths(x)))"]}
{"id": "eqasc_train_10395", "nl": "A rainbow is formed by the bending of light.", "fol": "", "prediction": ["all x.(Rainbow(x) -> FormedByBbendingOfLight(x))"]}
{"id": "eqasc_train_10396", "nl": "Light rays come in through the lens.", "fol": "", "prediction": ["all x y.((LightRay(x) & Lens(y)) -> ComesIn(x,y))"]}
{"id": "eqasc_train_10397", "nl": "a rainbow is formed by refraction of rays by separating rays into all different colors", "fol": "", "prediction": ["all x y.((Rainbow(x) & Rays(y)) -> FormedByRefraction(x,y))"]}
{"id": "eqasc_train_10398", "nl": "electricity sometimes is used for heating buildings", "fol": "", "prediction": ["all x y.((Electricity(x) & Building(y)) -> UsedForHeating(x,y))"]}
{"id": "eqasc_train_10399", "nl": "Electric power is considered clean power.", "fol": "", "prediction": ["all x.(ElectricPower(x) -> CleanPower(x))"]}
{"id": "eqasc_train_10400", "nl": "Clean power is sometimes used for heating buildings.", "fol": "", "prediction": ["all x.(CleanPower(x) -> UsedForHeatingBuildings(x))"]}
{"id": "eqasc_train_10401", "nl": "Nuclear fission is the only method currently used by nuclear plants to generate electricity.", "fol": "", "prediction": ["all x.(NuclearFission(x) -> GeneratesElectricity(x))"]}
{"id": "eqasc_train_10402", "nl": "Nuclear fission can be used to heat buildings", "fol": "", "prediction": ["all x y.((NuclearFission(x) & Building(y)) -> Heats(x,y))"]}
{"id": "eqasc_train_10403", "nl": "Hospitals incorporate most types of technical systems encountered in other types of buildings.", "fol": "", "prediction": ["all x y.((Hospital(x) & Building(y)) -> IncorporatesTechnicalSystems(x,y))"]}
{"id": "eqasc_train_10404", "nl": "electricity sometimes is used for heating hospitals", "fol": "", "prediction": ["all x y.((Electricity(x) & Hospital(y)) -> Heats(x,y))"]}
{"id": "eqasc_train_10405", "nl": "Heating is by electric convector radiators.", "fol": "", "prediction": ["all x.(Heating(x) -> ElectricConvectorRadiators(x))"]}
{"id": "eqasc_train_10406", "nl": "Radiators are used to heat buildings", "fol": "", "prediction": ["all x y.((Radiators(x) & Building(y)) -> Heats(x,y))"]}
{"id": "eqasc_train_10407", "nl": "energy is used for heating buildings", "fol": "", "prediction": ["all x.(Energy(x) -> UsedForHeatingBuildings(x))"]}
{"id": "eqasc_train_10408", "nl": "Energy is used for heating buildings.", "fol": "", "prediction": ["all x.(Energy(x) -> UsedForHeatingBuildings(x))"]}
{"id": "eqasc_train_10409", "nl": "electrons in motion sometimes is used for heating buildings", "fol": "", "prediction": ["all x.((Electron(x) & InMotion(x)) -> UsedForHeatingBuildings(x))"]}
{"id": "eqasc_train_10410", "nl": "electricity helps humans live in cold climates", "fol": "", "prediction": ["all x y.((Electricity(x) & Human(y)) -> HelpsLiveInColdClimates(x,y))"]}
{"id": "eqasc_train_10411", "nl": "Most electricity is created with a turbine generator.", "fol": "", "prediction": ["all x.(Electricity(x) -> (CreatedWithTurbineGenerator(x)))"]}
{"id": "eqasc_train_10412", "nl": "most buildings are heated with turbine generators", "fol": "", "prediction": ["all x.(Building(x) -> HeatsWithTurbineGenerators(x))"]}
{"id": "eqasc_train_10413", "nl": "plant requires seed dispersal for reproduction", "fol": "", "prediction": ["all x.((Plant(x) & RequiresSeedDispersal(x)) -> RequiresReproduction(x))"]}
{"id": "eqasc_train_10414", "nl": "Grains are seeds that reproduce if planted.", "fol": "", "prediction": ["all x.(Grain(x) -> (Seed(x) & Planted(x)))"]}
{"id": "eqasc_train_10415", "nl": "Plant reproduction depends on grains being planted", "fol": "", "prediction": ["all x y.((Plant(x) & Grains(y)) -> ReproductionDependsOn(x,y))"]}
{"id": "eqasc_train_10416", "nl": "Seeds are dispersed by animals.", "fol": "", "prediction": ["all x y.((Seed(x) & Animal(y)) -> DispersedBy(x,y))"]}
{"id": "eqasc_train_10417", "nl": "Plant reproduction requires animals.", "fol": "", "prediction": ["all x.(PlantReproduction(x) -> RequiresAnimals(x))"]}
{"id": "eqasc_train_10418", "nl": "Try planting Sunflower seeds or another type of seed at your house.", "fol": "", "prediction": ["all x.((SunflowerSeed(x) | Seed(x)) -> PlantsAtHouse(x))"]}
{"id": "eqasc_train_10419", "nl": "sunflowers require seed dispersal for reproduction", "fol": "", "prediction": ["all x.(Sunflower(x) -> RequiresSeedDispersal(x))"]}
{"id": "eqasc_train_10420", "nl": "Many plants depend on birds for pollination and seed dispersal.", "fol": "", "prediction": ["all x.(Plant(x) -> (DependsOnBirds(x) & Pollination(x) & SeedDispersal(x)))"]}
{"id": "eqasc_train_10421", "nl": "plants are pollinated by birds", "fol": "", "prediction": ["all x y.((Plant(x) & Bird(y)) -> PollinatedBy(x,y))"]}
{"id": "eqasc_train_10422", "nl": "Rodents as seed consumers and seed dispersers.", "fol": "", "prediction": ["all x.(Rodents(x) -> (SeedConsumer(x) & SeedDisperser(x)))"]}
{"id": "eqasc_train_10423", "nl": "A plant requires something a rodent does for reproduction", "fol": "", "prediction": ["all x y z.((Plant(x) & Rodent(y) & Requires(x,y) & Reproduction(z)) -> Requires(x,z))"]}
{"id": "eqasc_train_10424", "nl": "Spermatophyte Plants that reproduce by seeds.", "fol": "", "prediction": ["all x.((SpermatophytePlant(x) & ReproducesBySeeds(x)) -> SpermatophytePlant(x))"]}
{"id": "eqasc_train_10425", "nl": "Spermatophyte requires seeds to be dispersed", "fol": "", "prediction": ["all x.(Spermatophyte(x) -> RequiresSeedsToBeDispersed(x))"]}
{"id": "eqasc_train_10426", "nl": "Seeds are probably dispersed by animals.", "fol": "", "prediction": ["all x.(Seed(x) -> DispersedByAnimals(x))"]}
{"id": "eqasc_train_10427", "nl": "plant requires animals for reproduction", "fol": "", "prediction": ["all x y.((Plant(x) & Animal(y)) -> RequiresForReproduction(x,y))"]}
{"id": "eqasc_train_10428", "nl": "Flowers produce seeds for reproduction.", "fol": "", "prediction": ["all x.(Flower(x) -> ProducesSeedsForReproduction(x))"]}
{"id": "eqasc_train_10429", "nl": "flowers require dispersal for reproduction", "fol": "", "prediction": ["all x.(Flower(x) -> RequiresDispersalForReproduction(x))"]}
{"id": "eqasc_train_10430", "nl": "plants require fruits for reproduction", "fol": "", "prediction": ["all x y.((Plant(x) & Fruit(y)) -> RequiresForReproduction(x,y))"]}
{"id": "eqasc_train_10431", "nl": "Reproductive investment was measured as seed mass, samara size, and dispersal ability.", "fol": "", "prediction": ["all x.(ReproductiveInvestment(x) -> (MeasuredSeedMass(x) & MeasuredSamaraSize(x) & MeasuredDispersalAbility(x)))"]}
{"id": "eqasc_train_10432", "nl": "Plants require investment, seed mass, size and dispersal. ", "fol": "", "prediction": ["all x.(Plant(x) -> (RequiresInvestment(x) & RequiresSeedMass(x) & RequiresSize(x) & RequiresDispersal(x)))"]}
{"id": "eqasc_train_10433", "nl": "Seed dispersal enables plants to produce offspring.", "fol": "", "prediction": ["all x.(SeedDispersal(x) -> EnablesPlantsToProduceOffspring(x))"]}
{"id": "eqasc_train_10434", "nl": "Mammals conserve body heat with their hair or fur.", "fol": "", "prediction": ["all x.(Mammal(x) -> (ConservesHeat(x) & (Hair(x) | Fur(x))))"]}
{"id": "eqasc_train_10435", "nl": "humans conserve body heat with their hair", "fol": "", "prediction": ["all x y.((Human(x) & Hair(y)) -> ConservesHeatWithHair(x,y))"]}
{"id": "eqasc_train_10436", "nl": "Coyotes classified as fur-bearing mammals.", "fol": "", "prediction": ["all x.(Coyote(x) -> FurBearingMammal(x))"]}
{"id": "eqasc_train_10437", "nl": "Coyotes conserve body heat with their fur", "fol": "", "prediction": ["all x.(Coyote(x) -> (ConservesBodyHeat(x) & Fur(x)))"]}
{"id": "eqasc_train_10438", "nl": "haircoats conserve heat in mammals", "fol": "", "prediction": ["all x.(Haircoat(x) -> ConservesHeatInMammals(x))"]}
{"id": "eqasc_train_10439", "nl": "All monkeys are mammals.", "fol": "", "prediction": ["all x.(Monkey(x) -> Mammal(x))"]}
{"id": "eqasc_train_10440", "nl": "monkeys conserve body heat with their hair or fur", "fol": "", "prediction": ["all x.(Mammal(x) -> (ConservesBodyHeat(x) & (Hair(x) | Fur(x))))"]}
{"id": "eqasc_train_10441", "nl": "Mammals Hair or fur covers the bodies of most mammals.", "fol": "", "prediction": ["all x.(Mammal(x) -> (Hair(x) | Fur(x)))"]}
{"id": "eqasc_train_10442", "nl": "Mammals conserve body heat with their fuzzy, protective covering.", "fol": "", "prediction": ["all x.(Mammal(x) -> ConservesBodyHeat(x))"]}
{"id": "eqasc_train_10443", "nl": "Mammals include squirrels, muskrats, opposums, and deer.", "fol": "", "prediction": ["all x.(Mammal(x) -> (Squirrel(x) | Muskrat(x) | Oppositum(x) | Deer(x)))"]}
{"id": "eqasc_train_10444", "nl": "deer conserve body heat with their fur", "fol": "", "prediction": ["all x.(Deer(x) -> (ConservesBodyHeat(x) & Fur(x)))"]}
{"id": "eqasc_train_10445", "nl": "Mammals conserve energy with their hair or fur.", "fol": "", "prediction": ["all x.(Mammal(x) -> (ConservesEnergy(x) & (Hair(x) | Fur(x))))"]}
{"id": "eqasc_train_10446", "nl": "Mammals generate the internal heat via metabolism.", "fol": "", "prediction": ["all x.(Mammal(x) -> GeneratesInternalHeat(x))"]}
{"id": "eqasc_train_10447", "nl": "animals make heat with metabolism", "fol": "", "prediction": ["all x.(Animal(x) -> (MakesHeatWithMetabolism(x) & Metabolism(x)))"]}
{"id": "eqasc_train_10448", "nl": "Dogs conserve body heat with their fur.", "fol": "", "prediction": ["all x.(Dog(x) -> ConservesBodyHeatWithFur(x))"]}
{"id": "eqasc_train_10449", "nl": "Heat is emitted energy.", "fol": "", "prediction": ["all x.(Heat(x) -> EmittedEnergy(x))"]}
{"id": "eqasc_train_10450", "nl": "Mammals conserve body energy with their hair or fur.", "fol": "", "prediction": ["all x.(Mammal(x) -> (ConservesBodyEnergy(x) & (Hair(x) | Fur(x))))"]}
{"id": "eqasc_train_10451", "nl": "Mammals keep warm with hair or fur", "fol": "", "prediction": ["all x.(Mammal(x) -> (KeepsWarmWithHairOrFur(x) | KeepsWarmWithFur(x)))"]}
{"id": "eqasc_train_10452", "nl": "Goats are small non-predatory mammals.", "fol": "", "prediction": ["all x.(Goat(x) -> (Small(x) & -Predatory(x)))"]}
{"id": "eqasc_train_10453", "nl": "goats conserve body heat with their hair or fur", "fol": "", "prediction": ["all x.(Goat(x) -> (ConservesHeat(x) & (Hair(x) | Fur(x))))"]}
{"id": "eqasc_train_10454", "nl": "Bats Bats are mammals with wings.", "fol": "", "prediction": ["all x.(Bat(x) -> (Mammal(x) & HasWings(x)))"]}
{"id": "eqasc_train_10455", "nl": "Bats conserve body heat with their fur", "fol": "", "prediction": ["all x.(Bat(x) -> (ConservesBodyHeat(x) & Fur(x)))"]}
{"id": "eqasc_train_10456", "nl": "Mammals include rabbits, foxes and coyotes.", "fol": "", "prediction": ["all x.(Mammal(x) -> (Rabbit(x) | Fox(x) | Coyote(x)))"]}
{"id": "eqasc_train_10457", "nl": "Foxes conserve body heat with their hair or fur.", "fol": "", "prediction": ["all x.(Fox(x) -> (ConservesHeat(x) & (Hair(x) | Fur(x))))"]}
{"id": "eqasc_train_10458", "nl": "Hair and feathers are both made of keratin.", "fol": "", "prediction": ["(MadeOfKeratin(Hair) & MadeOfKeratin(Feathers))"]}
{"id": "eqasc_train_10459", "nl": "mammals conserve body heat with keratin", "fol": "", "prediction": ["all x.(Mammal(x) -> (ConservesBodyHeat(x) & HasKeratin(x)))"]}
{"id": "eqasc_train_10460", "nl": "Hair follicles are capable of producing hair of various thickness and colors.", "fol": "", "prediction": ["all x.(HairFollicle(x) -> (ProducesHair(x) & VariousThickness(x) & VariousColors(x)))"]}
{"id": "eqasc_train_10461", "nl": "Mammals conserve body heat with follicles that produce thickness and colors", "fol": "", "prediction": ["all x.(Mammal(x) -> (ConservesBodyHeat(x) & HasFollicles(x) & ProducesThickness(x) & ProducesColors(x)))"]}
{"id": "eqasc_train_10462", "nl": "Energy enters ecosystems in the form of sunlight or chemical compounds.", "fol": "", "prediction": ["all x y.((Energy(x) & Ecosystem(y)) -> (Introduces(x,y) & (Sunlight(y) | ChemicalCompounds(y))))"]}
{"id": "eqasc_train_10463", "nl": "energy enters organisms and their habitat in the form of sunlight or chemical compounds", "fol": "", "prediction": ["all x y z.((Organism(x) & Organism(y) & Habitat(z) & (Sunlight(x) | ChemicalCompounds(x))) -> EntersEnergy(x,y,z))"]}
{"id": "eqasc_train_10464", "nl": "Solar energy is clean energy .", "fol": "", "prediction": ["all x.(SolarEnergy(x) -> CleanEnergy(x))"]}
{"id": "eqasc_train_10465", "nl": "Solar light enters ecosystems. ", "fol": "", "prediction": ["all x.(SolarLight(x) -> EntersEcosystems(x))"]}
{"id": "eqasc_train_10466", "nl": "Energy enters biomes in the form of sunlight or chemical compounds.", "fol": "", "prediction": ["all x.((Energy(x) & EntersBiomes(x)) -> (Sunlight(x) | ChemicalCompounds(x)))"]}
{"id": "eqasc_train_10467", "nl": "Sunlight is the source of light in nature.", "fol": "", "prediction": ["all x.(Sunlight(x) -> SourceOfLight(x))"]}
{"id": "eqasc_train_10468", "nl": "Nature is comprised of many ecosystems which all depend upon energy.", "fol": "", "prediction": ["all x.(Nature(x) -> (exists y.(Ecosystem(y) & ConsistsOf(x,y))) & DependsOnEnergy(x)))"]}
{"id": "eqasc_train_10469", "nl": "Energy requirements Energy is required for both growth and maintenance.", "fol": "", "prediction": ["all x.(EnergyRequirements(x) -> (RequiredForGrowth(x) & RequiredForMaintenance(x)))"]}
{"id": "eqasc_train_10470", "nl": "ecosystems use sunlight for growth", "fol": "", "prediction": ["all x y.((Ecosystem(x) & Sunlight(y)) -> UsesForGrowth(x,y))"]}
{"id": "eqasc_train_10471", "nl": "If there is sun, there is sunlight, there is day.", "fol": "", "prediction": ["all x.((Sun(x) & Sunlight(x)) -> Day(x))"]}
{"id": "eqasc_train_10472", "nl": "Energy enters ecosystems from the sun.", "fol": "", "prediction": ["all x y.((Energy(x) & Ecosystem(y)) -> EntersFromSun(x,y))"]}
{"id": "eqasc_train_10473", "nl": "Compounds or molecules Chemical compounds are combinations of elements.", "fol": "", "prediction": ["all x.(Compound(x) | Molecule(x))"]}
{"id": "eqasc_train_10474", "nl": "Energy enters ecosystems in the form of sunlight or combinations of elements", "fol": "", "prediction": ["all x y.((Energy(x) & Ecosystem(y)) -> (EnteredInSunlight(x,y) | EntersInCombinationsOfElements(x,y)))"]}
{"id": "eqasc_train_10475", "nl": "Energy is a basic necessity of an ecosystem.", "fol": "", "prediction": ["all x.(Energy(x) -> BasicNecessityOfEcosystem(x))"]}
{"id": "eqasc_train_10476", "nl": "The basic necessity of an ecosystem enters in the form of sunlight", "fol": "", "prediction": ["all x y.((Ecosystem(x) & BasicNecessity(y) & EntersInSunlight(x,y)) -> EntersInSunlight(x,y))"]}
{"id": "eqasc_train_10477", "nl": "Sunlight is energy released from fusion reactions in the sun.", "fol": "", "prediction": ["all x.(Sunlight(x) -> (EnergyReleasedFromFusionReactions(x) & InSun(x)))"]}
{"id": "eqasc_train_10478", "nl": "ecosystems use fusion as energy", "fol": "", "prediction": ["all x.(Ecosystem(x) -> UsesFusionAsEnergy(x))"]}
{"id": "eqasc_train_10479", "nl": "energy enters the ocean in the form of sunlight or chemical compounds", "fol": "", "prediction": ["all x y z.((Ocean(x) & Ocean(y) & (Sunlight(z) | ChemicalCompounds(z))) -> Enters(x,y,z))"]}
{"id": "eqasc_train_10480", "nl": "Energy enters ecosystems in the form of photons", "fol": "", "prediction": ["all x y z.((Energy(x) & Ecosystem(y) & Photon(z)) -> EntersInFormOf(x,y,z))"]}
{"id": "eqasc_train_10481", "nl": "Oxygen is just one substance transported by the blood.", "fol": "", "prediction": ["all x.(Oxygen(x) -> TransportedByBlood(x))"]}
{"id": "eqasc_train_10482", "nl": "Contraction of a muscle produces heat which is transported to other parts of the body by the blood.", "fol": "", "prediction": ["all x y z.((Muscle(x) & Contraction(y) & BodyPart(z)) -> (ProducesHeat(x,y) & TransportedByBlood(x,z)))"]}
{"id": "eqasc_train_10483", "nl": "oxygen and heat are transported to other parts of the body", "fol": "", "prediction": ["all x y.((BodyPart(x) & BodyPart(y)) -> (TransportsOxygen(x) & TransportsHeat(x)))"]}
{"id": "eqasc_train_10484", "nl": "Breathing and circulation allow oxygen to be transported to the body's cells.", "fol": "", "prediction": ["all x y.((Breathing(x) & Circulation(y)) -> AllowsOxygenTransportation(x,y))"]}
{"id": "eqasc_train_10485", "nl": "Breathing provides one substance transported by the blood.", "fol": "", "prediction": ["all x.(Breathing(x) -> ProvidesSubstanceTransportedByBlood(x))"]}
{"id": "eqasc_train_10486", "nl": "Blood typifies the life, for the life is in the blood.", "fol": "", "prediction": ["all x.((Blood(x) & LifeInBlood(x)) -> TypifiesLife(x))"]}
{"id": "eqasc_train_10487", "nl": "Oxygen typifies life", "fol": "", "prediction": ["all x.(Oxygen(x) -> TypifiesLife(x))"]}
{"id": "eqasc_train_10488", "nl": "Blood is transported through our veins.", "fol": "", "prediction": ["all x.(Blood(x) -> TransportedThroughVins(x))"]}
{"id": "eqasc_train_10489", "nl": "Oxygen is just one substance transported through our veins", "fol": "", "prediction": ["all x.(Oxygen(x) -> TransportedThroughVines(x))"]}
{"id": "eqasc_train_10490", "nl": "Active brains and muscles require more oxygen and nutrients.", "fol": "", "prediction": ["all x.(ActiveBrainsAndMuscles(x) -> (RequiresMoreOxygen(x) & RequiresMoreNutrients(x)))"]}
{"id": "eqasc_train_10491", "nl": "Substances needed by active muscles are transported by blood", "fol": "", "prediction": ["all x y.((Substance(x) & ActiveMuscle(y)) -> TransportedByBlood(x,y))"]}
{"id": "eqasc_train_10492", "nl": "Oxygen is just one substance transported by hemoglobin", "fol": "", "prediction": ["all x.(Oxygen(x) -> TransportedByHydrogen(x))"]}
{"id": "eqasc_train_10493", "nl": "Oxygen is one substance transported by hemoglobin", "fol": "", "prediction": ["all x.(Oxygen(x) -> (TransportedByHydrogen(x) & TransportedByHydrogen(x)))"]}
{"id": "eqasc_train_10494", "nl": "Blood glucose is the substance that feeds our cells.", "fol": "", "prediction": ["all x.(BloodGlucose(x) -> FeedsCells(x))"]}
{"id": "eqasc_train_10495", "nl": "Oxygen and glucose are transported the same way in the body.", "fol": "", "prediction": ["all x y.((Oxygen(x) & Glucose(y)) -> TransportedInBody(x,y))"]}
{"id": "eqasc_train_10496", "nl": "completing a circuit causes electricity to flow through that circuit", "fol": "", "prediction": ["all x y.((CompletesCircuit(x) & Circuit(y)) -> CausesElectricityFlow(x,y))"]}
{"id": "eqasc_train_10497", "nl": "Electricity flows through an electric motor in a fan, causing the fan's blades to turn.", "fol": "", "prediction": ["all x y z.((Electricity(x) & ElectricMotor(y) & Fan(z)) -> (FlowsThrough(x,y) & CausesBladesToTurn(x,z)))"]}
{"id": "eqasc_train_10498", "nl": "Completing a circuit causes the fan's blades to turn.", "fol": "", "prediction": ["all x y.((CompletesCircuit(x) & Fan(y)) -> CausesBladesToTurn(y,x))"]}
{"id": "eqasc_train_10499", "nl": "When completing the circuit, just touch the wire to the battery.", "fol": "", "prediction": ["all x.((Circuit(x) & Completes(x)) -> TouchWireToBattery(x))"]}
{"id": "eqasc_train_10500", "nl": "Electricity flows when the wire touches the battery", "fol": "", "prediction": ["all x y.((Electricity(x) & Wire(y) & TouchesBattery(y,x)) -> Flows(x))"]}
{"id": "eqasc_train_10501", "nl": "completing a circuit causes electrons to flow through that circuit", "fol": "", "prediction": ["all x y.((CompletesCircuit(x) & Circuit(y)) -> CausesElectronsToFlow(x,y))"]}
{"id": "eqasc_train_10502", "nl": "When electric current is flowing, power is produced.", "fol": "", "prediction": ["all x.((ElectricCurrent(x) & Flowing(x)) -> ProducesPower(x))"]}
{"id": "eqasc_train_10503", "nl": "Power is produced when a circuit is completed.", "fol": "", "prediction": ["all x y.((Circuit(x) & Completed(y)) -> ProducesPower(x,y))"]}
{"id": "eqasc_train_10504", "nl": "current follows a circuit", "fol": "", "prediction": ["all x y.((Current(x) & Circuit(y)) -> Follows(x,y))"]}
{"id": "eqasc_train_10505", "nl": "Electricity can give the opener a shock.", "fol": "", "prediction": ["all x.(Electricity(x) -> GivesOpenerShock(x))"]}
{"id": "eqasc_train_10506", "nl": "completing a circuit can give someone a shock", "fol": "", "prediction": ["all x y.((CompletedCircuit(x) & Person(y)) -> CanGiveShock(y,x))"]}
{"id": "eqasc_train_10507", "nl": "When the animal makes contact with the fence the circuit is complete.", "fol": "", "prediction": ["all x.((Animal(x) & MakesContactWithFence(x)) -> CircuitComplete(x))"]}
{"id": "eqasc_train_10508", "nl": "An animal contacting an electric fence allows the electricity to flow", "fol": "", "prediction": ["all x y.((Animal(x) & ElectricFence(y) & Contacts(x,y)) -> AllowsElectricityFlow(x,y))"]}
{"id": "eqasc_train_10509", "nl": "Consumers take in food by eating producers or other living things.", "fol": "", "prediction": ["all x y.((Consumer(x) & Food(y)) -> (TakesInByEatingProducers(x,y) | TakesInByLivingThings(x,y)))"]}
{"id": "eqasc_train_10510", "nl": "Herbivores eat producers and are called first order consumers.", "fol": "", "prediction": ["all x.(Herbivore(x) -> (EatProducers(x) & FirstOrderConsumer(x)))"]}
{"id": "eqasc_train_10511", "nl": "Herbivores eat producers or other living things.", "fol": "", "prediction": ["all x.(Herbivore(x) -> (EatsProducers(x) | EatsLivingThings(x)))"]}
{"id": "eqasc_train_10512", "nl": "Producers gain in terms of producer surplus.", "fol": "", "prediction": ["all x.(Producer(x) -> GainsInSurplus(x))"]}
{"id": "eqasc_train_10513", "nl": "consumers can take in food by eating those that gain in terms of surplus.", "fol": "", "prediction": ["all x y.((Consumer(x) & Food(y) & GainsSurplus(x,y)) -> TakesIn(x,y))"]}
{"id": "eqasc_train_10514", "nl": "Humans are consumers in food webs.", "fol": "", "prediction": ["all x.(Human(x) -> ConsumerInFoodWebs(x))"]}
{"id": "eqasc_train_10515", "nl": "humans take in food by eating producers or other living things", "fol": "", "prediction": ["all x y.((Human(x) & (EatingProducer(y) | LivingThing(y))) -> TakesInFood(x,y))"]}
{"id": "eqasc_train_10516", "nl": "Decomposers produce nutrients for producers.", "fol": "", "prediction": ["all x y.((Decomposer(x) & Producer(y)) -> ProducesNutrients(x,y))"]}
{"id": "eqasc_train_10517", "nl": "Decomposers make nutrients for organisms that become food for consumers.", "fol": "", "prediction": ["all x y.((Decomposer(x) & Organism(y)) -> (MakesNutrients(x,y) & FoodForConsumers(x)))"]}
{"id": "eqasc_train_10518", "nl": "Food Food poisoning is avoidable.", "fol": "", "prediction": ["all x.(FoodFoodPoisoning(x) -> Avoidable(x))"]}
{"id": "eqasc_train_10519", "nl": "Consumers can avoid poisoning by not eating. ", "fol": "", "prediction": ["all x.((Consumer(x) & -Eats(x)) -> AvoidsPoisoning(x))"]}
{"id": "eqasc_train_10520", "nl": "Scavengers are also consumers, but they wait for their prey to die first.", "fol": "", "prediction": ["all x.(Scavenger(x) -> (Consumer(x) & WaitsForPreyToDie(x)))"]}
{"id": "eqasc_train_10521", "nl": "scavengers take in food by eating dead prey", "fol": "", "prediction": ["all x y.((Scavenger(x) & Prey(y)) -> TakesInFoodByEating(x,y))"]}
{"id": "eqasc_train_10522", "nl": "Animals are considered consumers .", "fol": "", "prediction": ["all x.(Animal(x) -> Consumer(x))"]}
{"id": "eqasc_train_10523", "nl": "animals take in food by eating producers or other living things", "fol": "", "prediction": ["all x y.((Animal(x) & (EatsProducers(x) | EatsLivingThings(x))) -> TakesInFood(x,y))"]}
{"id": "eqasc_train_10524", "nl": "Animals are consumers , they feed on the primary producers or on other consumers.", "fol": "", "prediction": ["all x.(Animal(x) -> (Consumer(x) | FeedsOnPrimaryProducers(x) | FeedsOnOtherConsumers(x)))"]}
{"id": "eqasc_train_10525", "nl": "Animals take in food by eating producers or other living things", "fol": "", "prediction": ["all x y z.((Animal(x) & Food(y) & Producor(z)) -> TakesInByEatingOrLivingThing(x,y,z))"]}
{"id": "eqasc_train_10526", "nl": "Consumers take in food by eating plants and other living things", "fol": "", "prediction": ["all x y z.((Consumer(x) & Food(y) & Plant(z)) -> TakesInByEating(x,y,z))"]}
{"id": "eqasc_train_10527", "nl": "An informed consumer is a healthy consumer.", "fol": "", "prediction": ["all x.(InformedConsumer(x) -> HealthyConsumer(x))"]}
{"id": "eqasc_train_10528", "nl": "That which is healthy when informed can take in food by eating producers.", "fol": "", "prediction": ["all x.((Healthy(x) & Informed(x)) -> CanTakeInFood(x))"]}
{"id": "eqasc_train_10529", "nl": "Predators are consumers that catch and eat other consumers for their food.", "fol": "", "prediction": ["all x.(Predator(x) -> (Consumer(x) & Catch(x) & Eat(x) & ForFood(x)))"]}
{"id": "eqasc_train_10530", "nl": "Predators catch and eat other living things for their food", "fol": "", "prediction": ["all x y z.((Predator(x) & LivingThing(y) & Food(z)) -> (CatchAndEat(x,y) & Food(z)))"]}
{"id": "eqasc_train_10531", "nl": "Bats are natural insect consumers.", "fol": "", "prediction": ["all x.(Bat(x) -> NaturalInsectConsumer(x))"]}
{"id": "eqasc_train_10532", "nl": "bats take in food by eating producers or other living things", "fol": "", "prediction": ["all x.(Bat(x) -> (TakesInFood(x) & (EatsProducers(x) | EatsLivingThings(x))))"]}
{"id": "eqasc_train_10533", "nl": "Neurons are the structural and functional units of the nervous system.", "fol": "", "prediction": ["all x.(Neuron(x) -> (StructuralUnit(x) & FunctionalUnit(x) & NervousSystem(x)))"]}
{"id": "eqasc_train_10534", "nl": "Alcohol interferes with the central nervous system.", "fol": "", "prediction": ["all x.(Alcohol(x) -> InterferesWithCentralNervousSystem(x))"]}
{"id": "eqasc_train_10535", "nl": "alcohol interferes with neurons", "fol": "", "prediction": ["all x y.((Alcohol(x) & Neuron(y)) -> InterferesWith(x,y))"]}
{"id": "eqasc_train_10536", "nl": "Learning and behavior are nervous system functions.", "fol": "", "prediction": ["all x.((Learning(x) | Behavior(x)) -> NervousSystemFunction(x))"]}
{"id": "eqasc_train_10537", "nl": "Neurons are the structural and functional units of learning and behavior", "fol": "", "prediction": ["all x.(Neuron(x) -> (StructuralUnit(x) & FunctionalUnit(x) & LearningUnit(x) & BehaviorUnit(x)))"]}
{"id": "eqasc_train_10538", "nl": "Excitotoxicity kills some neurons.", "fol": "", "prediction": ["all x.(Excitotoxicity(x) -> KillsNeurons(x))"]}
{"id": "eqasc_train_10539", "nl": "excitotoxicity can kill the structural units of the nervous system", "fol": "", "prediction": ["all x y.((Excitotoxicity(x) & NervousSystem(y)) -> KillsStructuralUnits(x,y))"]}
{"id": "eqasc_train_10540", "nl": "Glial cells perform critical functions in the nervous system.", "fol": "", "prediction": ["all x.(GlialCell(x) -> PerformsCriticalFunctionsInNervousSystem(x))"]}
{"id": "eqasc_train_10541", "nl": "Neurons are the structural and functional units of where the glial cells perform critical functions.", "fol": "", "prediction": ["all x.(Neuron(x) -> (StructuralUnit(x) & FunctionalUnit(x) & WhereGlialCellsPerformCriticalFunctions(x)))"]}
{"id": "eqasc_train_10542", "nl": "Connections can be made neuron to neuron or neuron to axon.", "fol": "", "prediction": ["all x y.((Connection(x) & Neuron(y)) | Connection(x,y)) -> (Neuron(y) | Axon(y)))"]}
{"id": "eqasc_train_10543", "nl": "axons are connected to structural and functional units of the nervous system", "fol": "", "prediction": ["all x y.((Axon(x) & NervousSystem(y)) -> ConnectedToStructuralUnitsAndFunctionalUnits(x,y))"]}
{"id": "eqasc_train_10544", "nl": "Botulism affects the nervous system.", "fol": "", "prediction": ["all x.(Botulism(x) -> AffectsNervousSystem(x))"]}
{"id": "eqasc_train_10545", "nl": "Botulism affects neurons.", "fol": "", "prediction": ["all x.(Botulism(x) -> AffectsNeurons(x))"]}
{"id": "eqasc_train_10546", "nl": "botulism affects neurons", "fol": "", "prediction": ["all x y.((Botulism(x) & Neuron(y)) -> Affects(x,y))"]}
{"id": "eqasc_train_10547", "nl": "Alcohol depresses the nervous system.", "fol": "", "prediction": ["all x.(Alcohol(x) -> DepressesNervousSystem(x))"]}
{"id": "eqasc_train_10548", "nl": "Alcohol depresses neurons", "fol": "", "prediction": ["all x y.((Alcohol(x) & Neuron(y)) -> Depresses(x,y))"]}
{"id": "eqasc_train_10549", "nl": "contact between rocks over long periods of time causes rocks to smooth", "fol": "", "prediction": ["all x y.((Rock(x) & Rock(y) & LongPeriod(x)) -> Smooth(y))"]}
{"id": "eqasc_train_10550", "nl": "Type of Rocks Salt, quartz and basalt are decent types of aquarium rocks.", "fol": "", "prediction": ["(DecentArtOfRocks(Salt,Quarz) & Basalt(Basalt,Salt))"]}
{"id": "eqasc_train_10551", "nl": "contact between quartz over long periods of time causes it to smooth", "fol": "", "prediction": ["all x y.((Quarz(x) & Quartz(y) & LongPeriodsOfTime(x)) -> Smooth(y))"]}
{"id": "eqasc_train_10552", "nl": "Primary rock types are Sandstone, and Shale.", "fol": "", "prediction": ["all x.(PrimaryRockType(x) -> (Sandstone(x) | Shale(x)))"]}
{"id": "eqasc_train_10553", "nl": "contact between shale over long periods of time causes them to smooth", "fol": "", "prediction": ["all x y.((Shale(x) & Shale(y) & LongPeriodsOfTime(x)) -> SmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothSmoothS"]}
{"id": "eqasc_train_10554", "nl": "Smoothed, grooved and polished rocks are produced by glacial erosion.", "fol": "", "prediction": ["all x.((Rock(x) & Smoothed(x) & Grooved(x) & Polished(x)) -> GlacialErosion(x))"]}
{"id": "eqasc_train_10555", "nl": "contact between rocks is erosion", "fol": "", "prediction": ["all x y.((Rock(x) & Rock(y)) -> Erosion(x,y))"]}
{"id": "eqasc_train_10556", "nl": "Granite is a common rock in continents.", "fol": "", "prediction": ["all x.(Granite(x) -> CommonRockInContinents(x))"]}
{"id": "eqasc_train_10557", "nl": "contact between granite over long periods of time causes it to smooth", "fol": "", "prediction": ["all x y.((Granite(x) & Granite(y) & LongPeriodsOfTime(x)) -> Smooth(y))"]}
{"id": "eqasc_train_10558", "nl": "Rocks are actually solid mineral deposits.", "fol": "", "prediction": ["all x.(Rock(x) -> SolidMineralDeposit(x))"]}
{"id": "eqasc_train_10559", "nl": "Contact between solid mineral deposits over long periods of time causes them to smooth", "fol": "", "prediction": ["all x y z.((Contact(x) & SolidMineralDeposit(y) & LongPeriod(z) & Contact(x,y,z)) -> Smooth(y))"]}
{"id": "eqasc_train_10560", "nl": "First, limestone is a strong rock.", "fol": "", "prediction": ["all x.(Limestone(x) -> StrongRock(x))"]}
{"id": "eqasc_train_10561", "nl": "contact between limestone causes it to smooth", "fol": "", "prediction": ["all x y.((Limestone(x) & Limestone(y)) -> CausesSmoothCrop(x,y))"]}
{"id": "eqasc_train_10562", "nl": "Granite is rock formed by fire.", "fol": "", "prediction": ["all x.(Granite(x) -> FormedByFire(x))"]}
{"id": "eqasc_train_10563", "nl": "Contact between granite over long periods of time causes granite to smooth.", "fol": "", "prediction": ["all x.((Contact(x) & LongPeriodsOfTime(x)) -> Smooth(x))"]}
{"id": "eqasc_train_10564", "nl": "Sandstone, shale, and limestone are sedimentary rocks.", "fol": "", "prediction": ["all x.((Sandstone(x) | Shale(x) | Limestone(x)) -> SedimentaryRock(x))"]}
{"id": "eqasc_train_10565", "nl": "contact between shale over long periods of time causes it to smooth", "fol": "", "prediction": ["all x y.((Shale(x) & Shale(y) & LongPeriodsOfTime(x)) -> Smooth(x))"]}
{"id": "eqasc_train_10566", "nl": "Because of the big wave action, the rocks are very smooth.", "fol": "", "prediction": ["all x.((Rock(x) & BigWaveAction(x)) -> Smooth(x))"]}
{"id": "eqasc_train_10567", "nl": "Wave action can cause rocks to contact over time", "fol": "", "prediction": ["all x y.((WaveAction(x) & Rock(y)) -> CausesContactOverTime(x,y))"]}
{"id": "eqasc_train_10568", "nl": "Rocks on the streambed are subrounded and fairly smooth.", "fol": "", "prediction": ["all x.((Rock(x) & OnStreambed(x)) -> (Subrounded(x) & FairlySmooth(x)))"]}
{"id": "eqasc_train_10569", "nl": "Contact between rocks over long periods of time causes rocks to be subrounded.", "fol": "", "prediction": ["all x.((Rock(x) & Contact(x,y) & LongPeriod(y)) -> Subrounded(x))"]}
{"id": "eqasc_train_10570", "nl": "waves cause contact between rocks", "fol": "", "prediction": ["all x y.((Waves(x) & Rock(y)) -> CausesContact(x,y))"]}
{"id": "eqasc_train_10571", "nl": "Gravity can exert forces that cause friction in rocks and ice.", "fol": "", "prediction": ["all x.(Gravity(x) -> (ExertsForces(x) & CausesFrictionInRocksAndIce(x)))"]}
{"id": "eqasc_train_10572", "nl": "friction due to gravity can cause smoothing", "fol": "", "prediction": ["all x.((FrictionDueToGravity(x) & CausesSmoothing(x)) -> CausesSmoothing(x))"]}
{"id": "eqasc_train_10573", "nl": "Underfoot, loose rocks make footing perilous, while smooth marblelike stones make it slippery.", "fol": "", "prediction": ["(all x.((LooseRocks(x) & PerilousFooting(x)) -> Slippery(x)) & all y.((SmoothMarblelikeStones(y)) -> Slippery(y)))"]}
{"id": "eqasc_train_10574", "nl": "contact between rocks over long periods of time causes rocks to be slippery", "fol": "", "prediction": ["all x y.((Rock(x) & Rock(y) & LongPeriodContact(x,y)) -> Slippery(x))"]}
{"id": "eqasc_train_10575", "nl": "Metamorphic rocks are rocks formed by the alteration of preexisting rocks deep within the Earth.", "fol": "", "prediction": ["all x.(MetamorphicRock(x) -> (FormedByAlterationOfPreexistingRocks(x) & DeepInEarth(x)))"]}
{"id": "eqasc_train_10576", "nl": "contact between objects formed deep within the Earth causes them to smooth", "fol": "", "prediction": ["all x y.((Object(x) & Object(y) & FormedDeepInEarth(x,y)) -> SmoothSmoothContact(x,y))"]}
{"id": "eqasc_train_10577", "nl": "Lions live in social groups called prides.", "fol": "", "prediction": ["all x.(Lion(x) -> LivesInSocialGroup(x))"]}
{"id": "eqasc_train_10578", "nl": "Lions live in Africa.", "fol": "", "prediction": ["all x.(Lion(x) -> LivesInAfrica(x))"]}
{"id": "eqasc_train_10579", "nl": "there are social groups called prides in africa", "fol": "", "prediction": ["exists x.(SocialGroup(x) & Pride(x) & InAfrica(x))"]}
{"id": "eqasc_train_10580", "nl": "Lions hunt together to provide food for the pride.", "fol": "", "prediction": ["all x.(Lion(x) -> (HuntsTogether(x) & ProvidesFoodForPride(x)))"]}
{"id": "eqasc_train_10581", "nl": "Lions live in groups and hunt together for food.", "fol": "", "prediction": ["all x.(Lion(x) -> (LivesInGroups(x) & HuntsTogetherForFood(x)))"]}
{"id": "eqasc_train_10582", "nl": "Lions hunt in prides, the killing is usually done by the swifter young lions.", "fol": "", "prediction": ["all x y.((Lion(x) & Pride(y)) -> HuntsIn(x,y))"]}
{"id": "eqasc_train_10583", "nl": "lions are social groups that hunt", "fol": "", "prediction": ["all x.(Lion(x) -> (SocialGroup(x) & Hunts(x)))"]}
{"id": "eqasc_train_10584", "nl": "Lions are also pack animals with fairly large prides of up to twenty.", "fol": "", "prediction": ["all x.(Lion(x) -> (PackAnimal(x) & HasPride(x,20)))"]}
{"id": "eqasc_train_10585", "nl": "Lions live in social groups of up to twenty in their pack", "fol": "", "prediction": ["all x.(Lion(x) -> (LivesInSocialGroups(x,y) & UpToZwant(y)))"]}
{"id": "eqasc_train_10586", "nl": "Social cohesion Social support, informal neighbourhood groups, community help groups.", "fol": "", "prediction": ["all x.(SocialCohesion(x) -> (SocialSupport(x) | InformalNeighborhoodGroups(x) | CommunityHelpGroups(x)))"]}
{"id": "eqasc_train_10587", "nl": "Lions live in supportive communities called prides.", "fol": "", "prediction": ["all x.(Lion(x) -> LivesInSupportiveCommunities(x))"]}
{"id": "eqasc_train_10588", "nl": "Leo's symbol is the lion.", "fol": "", "prediction": ["all x.(Leo(x) -> Lion(x))"]}
{"id": "eqasc_train_10589", "nl": "Leo's symbols live in social groups called prides.", "fol": "", "prediction": ["all x.(LeoSymbol(x) -> LivesInSocialGroups(x))"]}
{"id": "eqasc_train_10590", "nl": "Chimpanzees live in social groups called communities.", "fol": "", "prediction": ["all x.(Chimanzee(x) -> LivesInSocialGroups(x))"]}
{"id": "eqasc_train_10591", "nl": "Lions live in communities called prides.", "fol": "", "prediction": ["all x.(Lion(x) -> LivesInPride(x))"]}
{"id": "eqasc_train_10592", "nl": "lions hunt for their social group", "fol": "", "prediction": ["all x y.((Lion(x) & SocialGroup(y)) -> HuntsFor(x,y))"]}
{"id": "eqasc_train_10593", "nl": "Richard the Lion Heart's shield has three lions on it.", "fol": "", "prediction": ["all x.(LionHeart(x) -> HasThreeLions(x))"]}
{"id": "eqasc_train_10594", "nl": "Richard's shield has a pride on it.", "fol": "", "prediction": ["all x.(Shield(x) -> HasPrideOn(x))"]}
{"id": "eqasc_train_10595", "nl": "habitat destruction causes animals to move to find shelter in another habitat", "fol": "", "prediction": ["all x y.((HabitatDestruction(x) & Animal(y)) -> MovesToFindShelterInAnotherHabitat(y))"]}
{"id": "eqasc_train_10596", "nl": "habitat destruction causes cows to move to find shelter in another habitat", "fol": "", "prediction": ["all x y.((HabitatDestruction(x) & Cow(y)) -> MovesToFindShelterInAnotherHabitat(y,x))"]}
{"id": "eqasc_train_10597", "nl": "Habitat destruction and urban sprawl are two other threats to the integrity of the ecosystem.", "fol": "", "prediction": ["(Also known as HabitatDestruction(a) & UrbanSpread(b))"]}
{"id": "eqasc_train_10598", "nl": "Urban sprawl causes animals to move to find shelter in another habitat", "fol": "", "prediction": ["all x y z.((UrbanSpread(x) & Animal(y) & Habitat(z)) -> (CausesMovement(x,y,z) & FindsShelterInAnotherHabitat(y,z)))"]}
{"id": "eqasc_train_10599", "nl": "Habitat destruction due to human interaction is a problem.", "fol": "", "prediction": ["all x.((HabitatDestruction(x) & HumanInteraction(x)) -> Problem(x))"]}
{"id": "eqasc_train_10600", "nl": "Human interaction causes animals to move to find shelter in another habitat", "fol": "", "prediction": ["all x y z.((HumanInteraction(x) & Animal(y) & Habitat(z)) -> CausesMovementToFindShelter(x,y,z))"]}
{"id": "eqasc_train_10601", "nl": "Creature Comforts A habitat is an animal's home.", "fol": "", "prediction": ["all x.(CreatureComfort(x) -> (Habitat(x) & AnimalHome(x)))"]}
{"id": "eqasc_train_10602", "nl": "Destruction of an animal's home causes animals to move to find shelter in another home", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> DestructionOfHome(x,y))"]}
{"id": "eqasc_train_10603", "nl": "Mammals are a class of animal.", "fol": "", "prediction": ["all x.(Mammal(x) -> Animal(x))"]}
{"id": "eqasc_train_10604", "nl": "When a mammal's habitat is destructed, it causes the mammal to move to find shelter in another habitat.", "fol": "", "prediction": ["all x y.((Mammal(x) & Habitat(y) & Destructed(x,y)) -> MovesToFindShelter(x,y))"]}
{"id": "eqasc_train_10605", "nl": "Habitat destruction from logging is also a major concern.", "fol": "", "prediction": ["all x.((HabitatDestruction(x) & Logging(x)) -> MajorPreoccupation(x))"]}
{"id": "eqasc_train_10606", "nl": "Logging causes animals to move to find shelter.", "fol": "", "prediction": ["all x y.((Logging(x) & Animal(y)) -> MovesToFindShelter(x,y))"]}
{"id": "eqasc_train_10607", "nl": "Wildfires can also threaten people's homes and destroy wildlife habitat.", "fol": "", "prediction": ["all x.(Wildfire(x) -> (ProtectsHomes(x) & DestroysWildlifeHabitat(x)))"]}
{"id": "eqasc_train_10608", "nl": "Wildfires cause animals to move in order to find shelter", "fol": "", "prediction": ["all x y z.((Wildfire(x) & Animal(y) & Shelter(z)) -> CausesMovement(x,y,z))"]}
{"id": "eqasc_train_10609", "nl": "Human population growth has resulted in habitat destruction, causing massive extinctions.", "fol": "", "prediction": ["all x.(HumanPopulationGrowth(x) -> (ResultedInHabitatDestruction(x) & CausedMassiveExtinctions(x)))"]}
{"id": "eqasc_train_10610", "nl": "human population growth causes animals to find shelter in another habitat", "fol": "", "prediction": ["all x y.((HumanPopulationGrowth(x) & Animal(y)) -> (FindsShelterInAnotherHabitat(y) & Habitat(z) & HumanPopulationGrowth(x,y)))"]}
{"id": "eqasc_train_10611", "nl": "Industry is a major cause of the destruction of habitat.", "fol": "", "prediction": ["all x.((Industry(x) & MajorCauseOfDestructionOfHabitat(x)) -> MajorCauseOfDestructionOfHabitat(x))"]}
{"id": "eqasc_train_10612", "nl": "Industry causes animals to move to find shelter in another habitat.", "fol": "", "prediction": ["all x y.((Animal(x) & Industry(y)) -> CausesMovement(x,y))"]}
{"id": "eqasc_train_10613", "nl": "Aquarium habitat is very different from ocean habitat.", "fol": "", "prediction": ["all x y.((AquariumHabitat(x) & OceanHabitat(y)) -> VeryDifferent(x,y))"]}
{"id": "eqasc_train_10614", "nl": "ocean destruction causes animals to move to find shelter elsewhere", "fol": "", "prediction": ["all x y.((OceanDestruction(x) & Animal(y)) -> (CausesMovement(y,x) & FindShelter(y,x)))"]}
{"id": "eqasc_train_10615", "nl": "All species are threatened due to the destruction of their natural habitat.", "fol": "", "prediction": ["all x.(Species(x) -> ThreatenedByDestructionOfNaturalHabitat(x))"]}
{"id": "eqasc_train_10616", "nl": "All species move to find shelter in another habitat", "fol": "", "prediction": ["all x.(Species(x) -> MovesToFindShelterInAnotherHabitat(x))"]}
{"id": "eqasc_train_10617", "nl": "Trees have woody stems covered with bark.", "fol": "", "prediction": ["all x.(Tree(x) -> (HasWoodyStems(x) & CoveredWithBark(x)))"]}
{"id": "eqasc_train_10618", "nl": "During the stripping, the protective layer of inner bark is removed.", "fol": "", "prediction": ["all x.((Stripping(x) & ProtectiveLayerOfInnerBark(x)) -> Removed(x))"]}
{"id": "eqasc_train_10619", "nl": "Trees have woody stems covered with a protective layer.", "fol": "", "prediction": ["all x.(Tree(x) -> (HasWoodyStems(x) & ProtectiveLayer(x)))"]}
{"id": "eqasc_train_10620", "nl": "Bark on mature trees runs 6 to 12 inches thick, insulating the tree against fire damage.", "fol": "", "prediction": ["all x.((Bark(x) & MatureTree(x)) -> (RunsSixTo12InchesThick(x) & InsulatesAgainstFireDamage(x)))"]}
{"id": "eqasc_train_10621", "nl": "Trees have woody stems that insulate", "fol": "", "prediction": ["all x.(Tree(x) -> (HasWoodyStems(x) & Insulates(x)))"]}
{"id": "eqasc_train_10622", "nl": "An elm tree is a type of tree that grows in America.", "fol": "", "prediction": ["all x.(ElmTree(x) -> GrowsInAmerica(x))"]}
{"id": "eqasc_train_10623", "nl": "elms have woody stems covered with bark", "fol": "", "prediction": ["all x.(Elm(x) -> (HasWoodyStems(x) & CoveredWithBark(x)))"]}
{"id": "eqasc_train_10624", "nl": "On the outside is a protective skin of bark made mainly of cork.", "fol": "", "prediction": ["all x.(Outside(x) -> (ProtectiveSkinOfBark(x) & MadeOfCork(x)))"]}
{"id": "eqasc_train_10625", "nl": "Trees have woody stems covered with protective skin.", "fol": "", "prediction": ["all x.(Tree(x) -> (HasWoodyStems(x) & CoveredWithProtectiveSkin(x)))"]}
{"id": "eqasc_train_10626", "nl": "Stems of plants include trunks and branches.", "fol": "", "prediction": ["all x.((Stem(x) & Plant(x)) -> (IncludesTrunks(x) | IncludesBranches(x)))"]}
{"id": "eqasc_train_10627", "nl": "Trees have woody trunks covered with bark.", "fol": "", "prediction": ["all x.(Tree(x) -> (HasWoodyTrunk(x) & CoveredWithBark(x)))"]}
{"id": "eqasc_train_10628", "nl": "Pines in general are popular trees.", "fol": "", "prediction": ["all x.(Pine(x) -> PopularTree(x))"]}
{"id": "eqasc_train_10629", "nl": "pines have woody stems covered with bark", "fol": "", "prediction": ["all x.(Pine(x) -> (HasWoodyStems(x) & CoveredWithBark(x)))"]}
{"id": "eqasc_train_10630", "nl": "Orange trees are evergreen trees.", "fol": "", "prediction": ["all x.(OrangeTree(x) -> EvergreenTree(x))"]}
{"id": "eqasc_train_10631", "nl": "Evergreens have woody stems covered with bark.", "fol": "", "prediction": ["all x.(Evergreen(x) -> HasWoodyStems(x))"]}
{"id": "eqasc_train_10632", "nl": "Cinnamon sticks are simply pieces of tree bark.", "fol": "", "prediction": ["all x.(CinnamonStick(x) -> TreeBark(x))"]}
{"id": "eqasc_train_10633", "nl": "Woody stems are sometimes covered by material used to make cinnamon sticks.", "fol": "", "prediction": ["all x.(WoodyStem(x) -> (CoveredByMaterial(x) & MadeByCinnamonSticks(x)))"]}
{"id": "eqasc_train_10634", "nl": "oaks have woody stems covered with bark", "fol": "", "prediction": ["all x.(Oak(x) -> (HasWoodyStems(x) & CoveredWithBark(x)))"]}
{"id": "eqasc_train_10635", "nl": "All elms are trees.", "fol": "", "prediction": ["all x.(Elm(x) -> Tree(x))"]}
{"id": "eqasc_train_10636", "nl": "an animal usually requires a warm body temperature for survival", "fol": "", "prediction": ["all x.((Animal(x) & RequiresWarmBodyTemperature(x)) -> Survival(x))"]}
{"id": "eqasc_train_10637", "nl": "Squirrels hide and sleep in a secret warm place all winter.", "fol": "", "prediction": ["all x.(Squirrel(x) -> (HuntsInWarmPlace(x) & SleepsInWarmPlace(x)))"]}
{"id": "eqasc_train_10638", "nl": "animals require hiding and sleeping for survival", "fol": "", "prediction": ["all x.((Animal(x) & RequiresHiding(x) & RequiresSleeping(x)) -> Survival(x))"]}
{"id": "eqasc_train_10639", "nl": "Warm blooded animals have a constant body temperature.", "fol": "", "prediction": ["all x.(WarmBloodedAnimal(x) -> ConstantBodyTemperature(x))"]}
{"id": "eqasc_train_10640", "nl": "an animal usually requires constant body temperature for survival.", "fol": "", "prediction": ["all x.((Animal(x) & RequiresConstantBodyTemperature(x)) -> Survival(x))"]}
{"id": "eqasc_train_10641", "nl": "Survival means survival of the species.", "fol": "", "prediction": ["all x.(Survival(x) -> SurvivalOfSpecies(x))"]}
{"id": "eqasc_train_10642", "nl": "A warm body temperature helps a species to thrive.", "fol": "", "prediction": ["all x y.((WakeBodyTemperature(x) & Species(y)) -> HelpsThrive(x,y))"]}
{"id": "eqasc_train_10643", "nl": "warm-blooded creatures control their body temperature by sweating or panting for survival ", "fol": "", "prediction": ["all x.((WarmBloodedCreature(x) & ControlsBodyTemperature(x) & (Sweeping(x) | Panting(x))) -> Survival(x))"]}
{"id": "eqasc_train_10644", "nl": "cows require a warm body temperature for survival", "fol": "", "prediction": ["all x.(Cow(x) -> (RequiresWarmBodyTemperature(x) & ForSurvival(x)))"]}
{"id": "eqasc_train_10645", "nl": "Temperature Temperature is an measurement of the amount of heat.", "fol": "", "prediction": ["all x.(Temperature(x) -> MeasuresHeat(x))"]}
{"id": "eqasc_train_10646", "nl": "An animal usually requires a warm body heat measurement for survival?", "fol": "", "prediction": ["all x.((Animal(x) & WarmBodyHeatMeasurement(x)) -> Survival(x))"]}
{"id": "eqasc_train_10647", "nl": "fur helps maintain body temperature", "fol": "", "prediction": ["all x.(Fur(x) -> HelpsMaintainBodyTemperature(x))"]}
{"id": "eqasc_train_10648", "nl": "Mammals are warm blooded animals.", "fol": "", "prediction": ["all x.(Mammal(x) -> WarmBlooded(x))"]}
{"id": "eqasc_train_10649", "nl": "Mammals require warm body temperature for survival", "fol": "", "prediction": ["all x.(Mammal(x) -> RequiresWarmBodyTemperature(x))"]}
{"id": "eqasc_train_10650", "nl": "Dormancy is an adaptation that improves the chances of surviving until warm temperatures return.", "fol": "", "prediction": ["all x.(Dormancy(x) -> (Adaptation(x) & ImprovesSurvivalChances(x) & WarmTemperaturesReturn(x)))"]}
{"id": "eqasc_train_10651", "nl": "Animals use dormancy to improve the chances of surviving.", "fol": "", "prediction": ["all x.(Animal(x) -> UsesDormancyToImproveSurvivalChances(x))"]}
{"id": "eqasc_train_10652", "nl": "Most animals require water regularly.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresWaterRegularly(x))"]}
{"id": "eqasc_train_10653", "nl": "   a warm body temperature requires water", "fol": "", "prediction": ["all x.(WarmBodyTemperature(x) -> RequiresWater(x))"]}
{"id": "eqasc_train_10654", "nl": "Lakes are generally bigger and deeper than ponds.", "fol": "", "prediction": ["all x y.((Lake(x) & Pond(y)) -> (Bigger(x) & Deeper(x)))"]}
{"id": "eqasc_train_10655", "nl": "Some of the best work in ecology has been done on small fresh water pond ecosystems.", "fol": "", "prediction": ["exists x.(EcologyWork(x) & BestWork(x) & SmallFreshWaterPool(x))"]}
{"id": "eqasc_train_10656", "nl": "Lakes are generally bigger and deeper than small fresh water ecosystems", "fol": "", "prediction": ["all x y.((Lake(x) & SmallFreshWaterEcosystem(y)) -> (Bigger(x) & Deeper(x) & SmallFreshWaterEcosystem(x)))"]}
{"id": "eqasc_train_10657", "nl": "Lake trout can also be found in some of the lakes.", "fol": "", "prediction": ["exists x.(LakeTrunk(x) & FoundIn(x,y))"]}
{"id": "eqasc_train_10658", "nl": "trout like bigger and deeper water than found in ponds", "fol": "", "prediction": ["all x y.((Trout(x) & Pond(y)) -> (LargerWater(x,y) & DeeperWater(x,y)))"]}
{"id": "eqasc_train_10659", "nl": "Frogs start out life in ponds and puddles.", "fol": "", "prediction": ["all x.(Frog(x) -> (StartsInPools(x) & StartsInPuddles(x)))"]}
{"id": "eqasc_train_10660", "nl": "Lakes are generally bigger and deeper than where frogs start out life", "fol": "", "prediction": ["all x y.((Lake(x) & Frog(y)) -> (Bigger(x) & Deeper(x) & StartsOutLife(y)))"]}
{"id": "eqasc_train_10661", "nl": "Then there's the big lake, Lake Superior, with all it's bays and tributaries.", "fol": "", "prediction": ["all x.((Lake(x) & LakeSupply(x) & HasBayesAndTributaries(x)) -> BigLake(x))"]}
{"id": "eqasc_train_10662", "nl": "areas with bays and tributaries are bigger and deeper than ponds.", "fol": "", "prediction": ["all x y.((Area(x) & Bay(y) & Tributary(y)) -> (Bigger(x,y) & Deeper(x,y)))"]}
{"id": "eqasc_train_10663", "nl": "Lake trout season opens in Lake Huron and Lake Michigan, excluding the refuges.", "fol": "", "prediction": ["all x.(LakeTruffleSeason(x) -> (OpensInLakeHuron(x) & OpensInLakeMichigan(x) & -OpensInRefuges(x)))"]}
{"id": "eqasc_train_10664", "nl": "trout are found in places generally bigger and deeper than ponds", "fol": "", "prediction": ["all x y.((Trout(x) & Pond(y)) -> (Larger(x,y) & Deeper(x,y)))"]}
{"id": "eqasc_train_10665", "nl": "Scotland s lochs , including the famous Loch Ness, are glacial lakes.", "fol": "", "prediction": ["all x.((Scotland(x) & LochNess(x)) -> GlacialLake(x))"]}
{"id": "eqasc_train_10666", "nl": "Lochs are bigger and deeper than ponds.", "fol": "", "prediction": ["all x y.((Loch(x) & Pond(y)) -> (Bigger(x) & Deeper(x,y)))"]}
{"id": "eqasc_train_10667", "nl": "Lake Trout Lake Trout fishing is good in Loonhaunt and Pipestone Lakes.", "fol": "", "prediction": ["all x.((LakeTrout(x) & Loonhaunt(x) & Pipestone(x)) -> GoodFishing(x))"]}
{"id": "eqasc_train_10668", "nl": "Loonhaunt is generally bigger and deeper than ponds", "fol": "", "prediction": ["all x y.((Loonhaunt(x) & Pond(y)) -> (Larger(x,y) & Deeper(x,y)))"]}
{"id": "eqasc_train_10669", "nl": "Fishing is possible in the fresh water pond.", "fol": "", "prediction": ["all x.(Fishing(x) -> PossibleInFreshWaterPool(x))"]}
{"id": "eqasc_train_10670", "nl": "lakes are fresh water", "fol": "", "prediction": ["all x.(Lake(x) -> FreshWater(x))"]}
{"id": "eqasc_train_10671", "nl": "All lakes in Kansas are reservoirs.", "fol": "", "prediction": ["all x.(Lake(x) -> Reservoir(x))"]}
{"id": "eqasc_train_10672", "nl": "reservoirs are bigger and deeper than ponds.", "fol": "", "prediction": ["all x y.((Reservoir(x) & Pond(y)) -> (Bigger(x,y) & Deeper(x,y)))"]}
{"id": "eqasc_train_10673", "nl": "condensing causes a liquid to form", "fol": "", "prediction": ["all x y.((Condensing(x) & Liquid(y)) -> CausesToForm(x,y))"]}
{"id": "eqasc_train_10674", "nl": "Oil and water are two such liquids.", "fol": "", "prediction": ["all x.((Liquid(x) & (Oil(x) | Water(x))) -> Liquid(x))"]}
{"id": "eqasc_train_10675", "nl": "Condensing causes water to form.", "fol": "", "prediction": ["all x.(Condensing(x) -> CausesWaterToForm(x))"]}
{"id": "eqasc_train_10676", "nl": "All liquids pour and flow.", "fol": "", "prediction": ["all x.(Liquid(x) -> (Pour(x) & Flow(x)))"]}
{"id": "eqasc_train_10677", "nl": "Condensing causes something to form that pours and flows.", "fol": "", "prediction": ["all x.(Condensing(x) -> (Forms(x) & Pours(x) & Flows(x)))"]}
{"id": "eqasc_train_10678", "nl": "Vapors are cooled and condensed into liquid.", "fol": "", "prediction": ["all x.(Vapor(x) -> (Cooled(x) & CondensedIntoLiquid(x)))"]}
{"id": "eqasc_train_10679", "nl": "vapor can form into liquid", "fol": "", "prediction": ["all x y.((Vapor(x) & Liquid(y)) -> FormsInto(x,y))"]}
{"id": "eqasc_train_10680", "nl": "Condensation is the opposite of evaporation.", "fol": "", "prediction": ["all x.(Condensation(x) -> OppositeOfEvaporation(x))"]}
{"id": "eqasc_train_10681", "nl": "the opposite of evaporation causes a liquid to form", "fol": "", "prediction": ["all x y.((Evaporation(x) & Liquid(y)) -> CausesOppositeOf(x,y))"]}
{"id": "eqasc_train_10682", "nl": "condensing causes water to form", "fol": "", "prediction": ["all x.(Condensing(x) -> CausesWaterToForm(x))"]}
{"id": "eqasc_train_10683", "nl": "condensation alters a gas", "fol": "", "prediction": ["all x y.((Condensation(x) & Gas(y)) -> Alters(x,y))"]}
{"id": "eqasc_train_10684", "nl": "water forms into liquid from the air", "fol": "", "prediction": ["all x y z.((Water(x) & Air(y) & Liquid(z)) -> FormsInto(x,y,z))"]}
{"id": "eqasc_train_10685", "nl": "Water is liquid and formless.", "fol": "", "prediction": ["all x.(Water(x) -> (Liquid(x) & Formless(x)))"]}
{"id": "eqasc_train_10686", "nl": "Air carries moisture that can condense.", "fol": "", "prediction": ["all x.(Air(x) -> (CarriesMoisture(x) & CanCondense(x)))"]}
{"id": "eqasc_train_10687", "nl": "Air carries moisture that causes a liquid to form", "fol": "", "prediction": ["all x y.((Air(x) & Moisture(y)) -> Carries(x,y))"]}
{"id": "eqasc_train_10688", "nl": "friction causes the temperature of an object to increase", "fol": "", "prediction": ["all x y.((Friction(x) & Object(y)) -> IncreasesTemperature(x,y))"]}
{"id": "eqasc_train_10689", "nl": "When a fire breaks out in a home, the temperature in the room increases.", "fol": "", "prediction": ["all x y.((Fire(x) & Home(y)) -> IncreasesTemperature(x,y))"]}
{"id": "eqasc_train_10690", "nl": "Friction causes fires to break out in a home due to temperature.", "fol": "", "prediction": ["all x y.((Friction(x) & Home(y) & Temperature(y)) -> CausesFiresToBreakOut(x,y))"]}
{"id": "eqasc_train_10691", "nl": "Friction in bearings causes an increase of the temperature inside the bearing.", "fol": "", "prediction": ["all x y.((Bearing(x) & Friction(y)) -> CausesIncreaseInTemperature(x,y))"]}
{"id": "eqasc_train_10692", "nl": "bearings have higher temperature when there is friction", "fol": "", "prediction": ["all x.((Bearing(x) & Friction(x)) -> HigherTemperature(x))"]}
{"id": "eqasc_train_10693", "nl": "Friction is chronic impact, impact is acute friction.", "fol": "", "prediction": ["all x y.((Friction(x) & Impact(y)) -> (ChronicImpact(x) & AcuteFriction(y)))"]}
{"id": "eqasc_train_10694", "nl": "chronic impact causes the temperature of an object to increase", "fol": "", "prediction": ["all x y.((ChronicImpact(x) & Object(y)) -> CausesTemperatureToIncrease(x,y))"]}
{"id": "eqasc_train_10695", "nl": "Pressure increases the temperature of an object", "fol": "", "prediction": ["all x y.((Pressure(x) & Object(y)) -> IncreasesTemperature(x,y))"]}
{"id": "eqasc_train_10696", "nl": "Astrogarden objects are toys.", "fol": "", "prediction": ["all x.(AstrogardenObject(x) -> Toy(x))"]}
{"id": "eqasc_train_10697", "nl": "Friction causes the temperature of a toy to increase", "fol": "", "prediction": ["all x y.((Toy(x) & Friction(y)) -> IncreasesTemperature(y,x))"]}
{"id": "eqasc_train_10698", "nl": "Brakes work because friction acts against slip.", "fol": "", "prediction": ["all x.(Brake(x) -> (Works(x) & FrictionActsAgainstSlip(x)))"]}
{"id": "eqasc_train_10699", "nl": "braking causes the temperature of an object to increase", "fol": "", "prediction": ["all x y.((Bremsing(x) & Object(y)) -> CausesTemperatureToIncrease(x,y))"]}
{"id": "eqasc_train_10700", "nl": "friction causes heat of an object to increase", "fol": "", "prediction": ["all x y.((Friction(x) & Object(y)) -> CausesHeatToIncrease(x,y))"]}
{"id": "eqasc_train_10701", "nl": "If there is no movement friction is zero.", "fol": "", "prediction": ["all x.((Movement(x) & -Movement(x)) -> Zero(x))"]}
{"id": "eqasc_train_10702", "nl": "Movement causes the temperature of an object to increase.", "fol": "", "prediction": ["all x y.((Movement(x) & Object(y)) -> CausesTemperatureToIncrease(x,y))"]}
{"id": "eqasc_train_10703", "nl": "Friction Rubbing an object on another object can produce friction.", "fol": "", "prediction": ["all x y.((Object(x) & Object(y)) -> RubbingOn(x,y))"]}
{"id": "eqasc_train_10704", "nl": "rubbing an object on another object causes the temperature of an object to increase", "fol": "", "prediction": ["all x y z.((Rrubbing(x) & Object(y) & Object(z)) -> CausesTemperatureToIncrease(x,y,z))"]}
{"id": "eqasc_train_10705", "nl": "bearings can heat up because of friction", "fol": "", "prediction": ["all x.((Bearing(x) & Friction(x)) -> HeatsUp(x))"]}
{"id": "eqasc_train_10706", "nl": "pressure causes the temperature of an object to increase", "fol": "", "prediction": ["all x y.((Pressure(x) & Object(y)) -> CausesTemperatureToIncrease(x,y))"]}
{"id": "eqasc_train_10707", "nl": "microorganisms can cause infections", "fol": "", "prediction": ["all x.(Microorganism(x) -> CausesInfection(x))"]}
{"id": "eqasc_train_10708", "nl": "Leeches clean away the dead or infected tissue.", "fol": "", "prediction": ["all x.(Leeches(x) -> (CleansAwayDeadOrInfectedTissue(x)))"]}
{"id": "eqasc_train_10709", "nl": "microorganisms can cause dead tissue.", "fol": "", "prediction": ["all x.(Microorganism(x) -> CausesDeadTissue(x))"]}
{"id": "eqasc_train_10710", "nl": "Infection is spread by infected mosquitoes.", "fol": "", "prediction": ["all x y.((Infection(x) & InfectedMouse(y)) -> SpreadsBy(x,y))"]}
{"id": "eqasc_train_10711", "nl": "mosquitoes can spread microorganisms", "fol": "", "prediction": ["all x y.((Mouse(x) & Microorganism(y)) -> CanSpread(x,y))"]}
{"id": "eqasc_train_10712", "nl": "Infections usually require medical treatment.", "fol": "", "prediction": ["all x.(Infection(x) -> RequiresMedicalTreatment(x))"]}
{"id": "eqasc_train_10713", "nl": "Medical treatment can be required when humans come into contact with microorganisms.", "fol": "", "prediction": ["all x y.((Human(x) & Microorganism(y)) -> CanRequireMedicalTreatment(x,y))"]}
{"id": "eqasc_train_10714", "nl": "Microorganisms associated with foods.", "fol": "", "prediction": ["all x y.((Microorganism(x) & Food(y)) -> AssociatedWith(x,y))"]}
{"id": "eqasc_train_10715", "nl": "Food can cause infections.", "fol": "", "prediction": ["all x.(Food(x) -> CanCauseInfections(x))"]}
{"id": "eqasc_train_10716", "nl": "Infections of the raw wound are common.", "fol": "", "prediction": ["all x.(Infection(x) -> RawWound(x))"]}
{"id": "eqasc_train_10717", "nl": "microorganisms can be found in raw wounds", "fol": "", "prediction": ["all x y.((Microorganism(x) & RawWound(y)) -> FoundIn(x,y))"]}
{"id": "eqasc_train_10718", "nl": "Infection can cause a range of illnesses.", "fol": "", "prediction": ["all x.(Infection(x) -> CausesRangeOfIllnesses(x))"]}
{"id": "eqasc_train_10719", "nl": "microorganisms can cause a range of illnesses", "fol": "", "prediction": ["all x.(Microorganism(x) -> CausesRangeOfIllnesses(x))"]}
{"id": "eqasc_train_10720", "nl": "For example, an infection of a limb is usually treated with antibiotics.", "fol": "", "prediction": ["all x y.((Infection(x) & Limb(y)) -> TreatedWithAntibiotics(x,y))"]}
{"id": "eqasc_train_10721", "nl": "Illness caused by microorganisms can be treated with antibiotics", "fol": "", "prediction": ["all x.((Illness(x) & CausedByMicroorganisms(x)) -> CanBeTreatedWithAntibiotics(x))"]}
{"id": "eqasc_train_10722", "nl": "Moisture is required for the microorganisms to grow.", "fol": "", "prediction": ["all x.(Moisture(x) -> MicroorganismsGrow(x))"]}
{"id": "eqasc_train_10723", "nl": "Moisture can cause infections to grow.", "fol": "", "prediction": ["all x.(Moisture(x) -> CausesInfectionsToGrow(x))"]}
{"id": "eqasc_train_10724", "nl": "bacteria can cause infections", "fol": "", "prediction": ["all x.(Bacteria(x) -> CanCauseInfections(x))"]}
{"id": "eqasc_train_10725", "nl": "Microorganisms can cause death.", "fol": "", "prediction": ["all x.(Microorganism(x) -> CausesDeath(x))"]}
{"id": "eqasc_train_10726", "nl": "Chlorination uses liquid chlorine bleach to kill microorganisms.", "fol": "", "prediction": ["all x y.((Chlorination(x) & LiquidChlorineBleath(y)) -> KillsMicroorganisms(x,y))"]}
{"id": "eqasc_train_10727", "nl": "Chlorine in water prevents infections. ", "fol": "", "prediction": ["all x.((ChlorineInWater(x) & PreventsInfections(x)) -> PreventsInfections(x))"]}
{"id": "eqasc_train_10728", "nl": "Cancer genes can be inherited.", "fol": "", "prediction": ["all x.(CancerGene(x) -> CanBeHeritaged(x))"]}
{"id": "eqasc_train_10729", "nl": "Inherited characteristics are passed on by our genes.", "fol": "", "prediction": ["all x.(InheritedCharacteristics(x) -> PassedOnByGenes(x))"]}
{"id": "eqasc_train_10730", "nl": "Cancer genes can be passed on through reproduction.", "fol": "", "prediction": ["all x.(CancerGene(x) -> PassedOnThroughReproduction(x))"]}
{"id": "eqasc_train_10731", "nl": "BRCA2 Are Responsible For Over Half Of All Inherited Breast Cancers.", "fol": "", "prediction": ["All x.(BRCA2(x) -> ResponsibleForOverHalfOfInheritedBreakCancerous(x))"]}
{"id": "eqasc_train_10732", "nl": "BCRA2 is a gene is responsible for some breast cancers", "fol": "", "prediction": ["all x.(BCRA2(x) -> (Gene(x) & ResponsibleForBreastCancers(x)))"]}
{"id": "eqasc_train_10733", "nl": "Inheritance is passed down through the males.", "fol": "", "prediction": ["all x.(Inheritance(x) -> PassedThroughMale(x))"]}
{"id": "eqasc_train_10734", "nl": "Cancer genes can be passed down through the males", "fol": "", "prediction": ["all x.(CancerGenes(x) -> (PassedDownThroughMale(x) & Male(x)))"]}
{"id": "eqasc_train_10735", "nl": "Oral cancers can be deadly.", "fol": "", "prediction": ["all x.(OralCancer(x) -> CanBeLethal(x))"]}
{"id": "eqasc_train_10736", "nl": "deadly genes can be inherited", "fol": "", "prediction": ["all x.(LethalGene(x) -> CanBeHeritaged(x))"]}
{"id": "eqasc_train_10737", "nl": "Genetic diseases are diseases that are inherited.", "fol": "", "prediction": ["all x.(GeneticDisease(x) -> (Disease(x) & Erased(x)))"]}
{"id": "eqasc_train_10738", "nl": "Cancer genes can be genetic.", "fol": "", "prediction": ["all x.(CancerGene(x) -> Genetic(x))"]}
{"id": "eqasc_train_10739", "nl": "Children inherit from their parents.", "fol": "", "prediction": ["all x y.((Child(x) & Parent(y)) -> HebesFrom(x,y))"]}
{"id": "eqasc_train_10740", "nl": "Cancer genes can be passed on by parents.", "fol": "", "prediction": ["all x.(CancerGene(x) -> PassedOnByParents(x))"]}
{"id": "eqasc_train_10741", "nl": "Cancers exclude leukemia.", "fol": "", "prediction": ["all x.(Cancer(x) -> -Leukemia(x))"]}
{"id": "eqasc_train_10742", "nl": "leukemia can be inherited", "fol": "", "prediction": ["all x.(Leukemia(x) -> CanBeHeritaged(x))"]}
{"id": "eqasc_train_10743", "nl": "An inherited mutation is a mistake in the gene.", "fol": "", "prediction": ["all x.((ErasedMutation(x) & MistakeInGene(x)) -> Gene(x))"]}
{"id": "eqasc_train_10744", "nl": "some genes can be mutated", "fol": "", "prediction": ["exists x.(Gene(x) & Mutated(x))"]}
{"id": "eqasc_train_10745", "nl": "Cancer genes can be a mistake in the gene", "fol": "", "prediction": ["all x.(CancerGene(x) -> CanBeMistakeInGene(x))"]}
{"id": "eqasc_train_10746", "nl": "Prostate cancer is a form of carcinoma.", "fol": "", "prediction": ["all x.(ProstateCancer(x) -> Carcinoma(x))"]}
{"id": "eqasc_train_10747", "nl": "carcinoma genes can be inherited", "fol": "", "prediction": ["all x.(CarcinomaGene(x) -> CanBeHeritaged(x))"]}
{"id": "eqasc_train_10748", "nl": "Breast cancer kills.", "fol": "", "prediction": ["all x.(BreastCancer(x) -> Kills(x))"]}
{"id": "eqasc_train_10749", "nl": "inheriting genes can kill", "fol": "", "prediction": ["all x.(EmbeddingGenes(x) -> CanKillGenes(x))"]}
{"id": "eqasc_train_10750", "nl": "death can be inherited", "fol": "", "prediction": ["all x.(Death(x) -> (CanBeEarned(x) & DeathCanBeEarned(x)))"]}
{"id": "eqasc_train_10751", "nl": "Genes are inherited from parents.", "fol": "", "prediction": ["all x y.((Gene(x) & Parent(y)) -> ErasedFrom(x,y))"]}
{"id": "eqasc_train_10752", "nl": "Developing cancer can depend on your parents", "fol": "", "prediction": ["all x y.((Cancer(x) & Parent(y)) -> DependsOn(x,y))"]}
{"id": "eqasc_train_10753", "nl": "Inherited mutations and inherited afflictions ARE radiation-inducible.", "fol": "", "prediction": ["all x.((InheritedMutation(x) & inheritedAfflictions(x)) -> RadiationInducible(x))"]}
{"id": "eqasc_train_10754", "nl": "Cancer genes are radiation-inducible", "fol": "", "prediction": ["all x.(CancerGene(x) -> RadiationInducible(x))"]}
{"id": "eqasc_train_10755", "nl": "friction causes the speed of an object to decrease", "fol": "", "prediction": ["all x y.((Friction(x) & Object(y)) -> SpeedDecrease(x,y))"]}
{"id": "eqasc_train_10756", "nl": "Friction is dependant on the texture of both surfaces.", "fol": "", "prediction": ["all x.(Friction(x) -> DependantOnTexture(x))"]}
{"id": "eqasc_train_10757", "nl": "The texture of surfaces can cause the speed of an object to decrease.", "fol": "", "prediction": ["all x y.((Texture(x) & Surface(y)) -> SpeedDecrease(x,y))"]}
{"id": "eqasc_train_10758", "nl": "Friction is a Force that opposes motion.", "fol": "", "prediction": ["all x.(Friction(x) -> OpposesMotion(x))"]}
{"id": "eqasc_train_10759", "nl": "Forces that oppose motion cause the speed of an object to decrease.", "fol": "", "prediction": ["all x y.((Force(x) & OpposesMotion(x)) -> SpeedDecrease(y))"]}
{"id": "eqasc_train_10760", "nl": "force that requires opposing motion causes the speed of an object to decrease", "fol": "", "prediction": ["all x y.((Force(x) & RequiresOpposingMotion(x)) -> SpeedDecrease(y))"]}
{"id": "eqasc_train_10761", "nl": "And whenever there is friction, energy is lost.", "fol": "", "prediction": ["all x.((Friction(x) & EnergyLoss(x)) -> Remains(x))"]}
{"id": "eqasc_train_10762", "nl": "Energy is lost as the speed of an object decreases.", "fol": "", "prediction": ["all x y.((Object(x) & Speed(y) & Decreases(y)) -> EnergyLoss(x,y))"]}
{"id": "eqasc_train_10763", "nl": "Friction creates heat.", "fol": "", "prediction": ["all x.(Friction(x) -> CreatesHeat(x))"]}
{"id": "eqasc_train_10764", "nl": "decreasing an object's speed can create heat", "fol": "", "prediction": ["all x.(DecreasingSpeed(x) -> CreatesHeat(x))"]}
{"id": "eqasc_train_10765", "nl": "Air friction gets rapidly larger as speed increases.", "fol": "", "prediction": ["all x.((AirFriction(x) & SpeedIncrease(x)) -> RapidlyLarger(x))"]}
{"id": "eqasc_train_10766", "nl": "as the rate of travel increases an object's drag increases exponentionally", "fol": "", "prediction": ["all x y.((Object(x) & RateOfTravel(x) & IncreasesExplicitionalDrag(x)) -> IncreasesExplicitionalDrag(y))"]}
{"id": "eqasc_train_10767", "nl": "Pressure can slow the speed of an object.", "fol": "", "prediction": ["all x y.((Pressure(x) & Object(y)) -> SlowsSpeed(x,y))"]}
{"id": "eqasc_train_10768", "nl": "Friction from the brake lining causes heat.", "fol": "", "prediction": ["all x.((Friction(x) & BrakeLinen(x)) -> CausesHeat(x))"]}
{"id": "eqasc_train_10769", "nl": "Slowing the car by applying the brakes generates", "fol": "", "prediction": ["all x y z.((Car(x) & Brake(y) & Slowing(x,y) & Brake(z)) -> Generates(x,y))"]}
{"id": "eqasc_train_10770", "nl": "After applying the brakes firmly and slowing to the desired speed get off the brakes.", "fol": "", "prediction": ["all x.((AppliesBrakes(x) & SlowsToDesiredSpeed(x)) -> GetsOffBrakes(x))"]}
{"id": "eqasc_train_10771", "nl": "brakes cause friction", "fol": "", "prediction": ["all x.(Brakes(x) -> CausesFriction(x))"]}
{"id": "eqasc_train_10772", "nl": "Fungi are the only organisms that can decompose wood.", "fol": "", "prediction": ["all x.(Fungus(x) -> CanDecomposeWood(x))"]}
{"id": "eqasc_train_10773", "nl": "Wood used for pulp and lumber.", "fol": "", "prediction": ["all x.(Wood(x) -> (UsedForPulp(x) & UsedForLumber(x)))"]}
{"id": "eqasc_train_10774", "nl": "Fungi are the only organisms that can decompose lumber", "fol": "", "prediction": ["all x.(Fungus(x) -> (Organism(x) & CanDecomposeLumber(x)))"]}
{"id": "eqasc_train_10775", "nl": "Wood products rapidly decompose and are biodegradable.", "fol": "", "prediction": ["all x.(WoodProduct(x) -> (RapidDecomposition(x) & Biodegradable(x)))"]}
{"id": "eqasc_train_10776", "nl": "Fungi are the only organisms that can decompose biodegradable products", "fol": "", "prediction": ["all x.(Fungus(x) -> (Organism(x) & DecomposesBiodegradableProducts(x)))"]}
{"id": "eqasc_train_10777", "nl": "Beech woods are without doubt a very rich habitat for fungi.", "fol": "", "prediction": ["all x.(BeechWood(x) -> (RichHabitat(x) & ForFungi(x)))"]}
{"id": "eqasc_train_10778", "nl": "Fungi are the only organisms that can decompose beech", "fol": "", "prediction": ["all x.(Fungus(x) -> (Organism(x) & CanDecomposeBeech(x)))"]}
{"id": "eqasc_train_10779", "nl": "Bows are wood, and wood breaks.", "fol": "", "prediction": ["all x.(Bow(x) -> (Wood(x) & WoodBreaks(x)))"]}
{"id": "eqasc_train_10780", "nl": "Only fungi can decompose bows.", "fol": "", "prediction": ["all x.(Fungus(x) -> CanDecomposeBows(x))"]}
{"id": "eqasc_train_10781", "nl": "Wood was made from trees, and the wood was used in many different ways.", "fol": "", "prediction": ["all x y.((Wood(x) & Tree(y)) -> (MadeFrom(x,y) & UsedInManyDifferentWeavers(x)))"]}
{"id": "eqasc_train_10782", "nl": "fungi can decompose trees", "fol": "", "prediction": ["all x y.((Fungus(x) & Tree(y)) -> CanDecompose(x,y))"]}
{"id": "eqasc_train_10783", "nl": "Nitrogen Deficiency Decomposing wood requires nitrogen.", "fol": "", "prediction": ["NitrogenDeficiency (DecomposesWood) -> RequiresNitrogen(Wood))"]}
{"id": "eqasc_train_10784", "nl": "Fungi require nitrogen.", "fol": "", "prediction": ["all x.(Fungus(x) -> RequiresNitrogen(x))"]}
{"id": "eqasc_train_10785", "nl": "fungi are the only organisms that can decompose pine trees", "fol": "", "prediction": ["all x.(Fungus(x) -> (CanDecomposePineTrees(x) & OnlyOrganism(x)))"]}
{"id": "eqasc_train_10786", "nl": "Yeast and molds can decompose wood", "fol": "", "prediction": ["all x y.((Yeast(x) & Mold(y)) -> (DecomposesWood(x) & DecomposesWood(y)))"]}
{"id": "eqasc_train_10787", "nl": "molds can decompose wood", "fol": "", "prediction": ["all x y.((Mold(x) & Wood(y)) -> Decomposes(x,y))"]}
{"id": "eqasc_train_10788", "nl": "Wood comes from trees.", "fol": "", "prediction": ["all x.(Wood(x) -> ComesFromTrees(x))"]}
{"id": "eqasc_train_10789", "nl": "Fungi are the only organisms that can decompose dead trees.", "fol": "", "prediction": ["all x.(Fungus(x) -> CanDecomposeDeadTrees(x))"]}
{"id": "eqasc_train_10790", "nl": "Mushrooms are organisms known as fungi.", "fol": "", "prediction": ["all x.(Mushroom(x) -> Fungus(x))"]}
{"id": "eqasc_train_10791", "nl": "mushrooms can decompose wood", "fol": "", "prediction": ["all x y.((Mushroom(x) & Wood(y)) -> Decomposes(x,y))"]}
{"id": "eqasc_train_10792", "nl": "Mutations are essential for evolution to occur.", "fol": "", "prediction": ["all x.(Mutations(x) -> EssentialForEvolution(x))"]}
{"id": "eqasc_train_10793", "nl": "changes in the genetic information of an organism are essential for evolution to occur.", "fol": "", "prediction": ["all x y.((Organism(x) & GeneticInformation(y)) -> EssentialForEvolution(x,y))"]}
{"id": "eqasc_train_10794", "nl": "Mutations allow for natural selection to occur.", "fol": "", "prediction": ["all x.(Mutations(x) -> AllowsNaturalSelection(x))"]}
{"id": "eqasc_train_10795", "nl": "random changes in genes are essential for evolution", "fol": "", "prediction": ["all x y.((Gene(x) & Gene(y)) -> EssentialForEvolution(x,y))"]}
{"id": "eqasc_train_10796", "nl": "Genomic evolution drives the evolution of the translational system.", "fol": "", "prediction": ["all x y.((GenomicEvolution(x) & TranslationalSystem(y)) -> DrivesEvolution(x,y))"]}
{"id": "eqasc_train_10797", "nl": "mutations are essential for genomic to drive the translational system ", "fol": "", "prediction": ["all x.(Mutation(x) -> (EssentialForGenetics(x) & DrivesTranslationalSystem(x)))"]}
{"id": "eqasc_train_10798", "nl": "Changes in DNA sequences are essential for evolution to occur.", "fol": "", "prediction": ["all x.((DNASequenceChange(x) & EssentialForEvolution(x)) -> EssentialForEvolution(x))"]}
{"id": "eqasc_train_10799", "nl": "Evolution can be defined as continual progress.", "fol": "", "prediction": ["all x.(Evolution(x) -> ConstantProgress(x))"]}
{"id": "eqasc_train_10800", "nl": "Mutations are essential for a continual progress", "fol": "", "prediction": ["all x.(Mutations(x) -> (ContinuousProgress(x) & EssentialForProgress(x)))"]}
{"id": "eqasc_train_10801", "nl": "random changes in genes are essential for evolution to occur", "fol": "", "prediction": ["all x y.((Gene(x) & Gene(y)) -> EssentialForEvolution(x,y))"]}
{"id": "eqasc_train_10802", "nl": "Sometimes genes are altered or mutated.", "fol": "", "prediction": ["exists x.(Gene(x) & (Altered(x) | Mutated(x)))"]}
{"id": "eqasc_train_10803", "nl": "Genes are altered for evolution to occur", "fol": "", "prediction": ["all x y.((Gene(x) & Evolution(y)) -> AlteredFor(x,y))"]}
{"id": "eqasc_train_10804", "nl": "Mutations are changes in the genetic material.", "fol": "", "prediction": ["all x.(Mutations(x) -> ChangesInGeneticMaterial(x))"]}
{"id": "eqasc_train_10805", "nl": "Changes in the genetic material are essential for evolution to occur.", "fol": "", "prediction": ["all x.((GeneticMaterialChange(x) & EssentialForEvolution(x)) -> EssentialForEvolution(x))"]}
{"id": "eqasc_train_10806", "nl": "Evolution Evolution means change over time.", "fol": "", "prediction": ["Evolution Evolution means change over time."]}
{"id": "eqasc_train_10807", "nl": "Mutations are essential for change over time.", "fol": "", "prediction": ["all x.(Mutations(x) -> EssentialForChange(x))"]}
{"id": "eqasc_train_10808", "nl": "Evolution Change through time.", "fol": "", "prediction": ["all x.(EvolutionChange(x) -> ThroughTime(x))"]}
{"id": "eqasc_train_10809", "nl": "Mutations are essential for changes to occur.", "fol": "", "prediction": ["all x.(Mutations(x) -> EssentialForChange(x))"]}
{"id": "eqasc_train_10810", "nl": "Evolution causes species to change over time.", "fol": "", "prediction": ["all x.(Evolution(x) -> CausesSpeciesChange(x))"]}
{"id": "eqasc_train_10811", "nl": "Mutations are required for species to change over time", "fol": "", "prediction": ["all x y.((Species(x) & Mutation(y)) -> RequiresForSpeciesToChangeOverTime(x,y))"]}
{"id": "eqasc_train_10812", "nl": "Besides, evolution means stronger members of the species survive.", "fol": "", "prediction": ["all x.(Evolution(x) -> StrongerMembers(x))"]}
{"id": "eqasc_train_10813", "nl": "mutations help species grow stronger", "fol": "", "prediction": ["all x y.((Mutation(x) & Species(y)) -> HelpsGrowStronger(x,y))"]}
{"id": "eqasc_train_10814", "nl": "Mutations are changes in the DNA information.", "fol": "", "prediction": ["all x.(Mutations(x) -> ChangesInDNAInformation(x))"]}
{"id": "eqasc_train_10815", "nl": "changes in the DNA information are essential for evolution to occur", "fol": "", "prediction": ["all x.((DNAInformationChange(x) & EssentialForEvolution(x)) -> EssentialForEvolution(x))"]}
{"id": "eqasc_train_10816", "nl": "When that occurs, several things happen.", "fol": "", "prediction": ["exists x.(Occurs(x) & Happens(x))"]}
{"id": "eqasc_train_10817", "nl": "Mutations are essential for evolution happen.", "fol": "", "prediction": ["all x.(Mutations(x) -> EssentialForEvolution(x))"]}
{"id": "eqasc_train_10818", "nl": "Viruses can cause a mutation in a gene.", "fol": "", "prediction": ["all x y.((Virus(x) & Gene(y)) -> CausesMutation(x,y))"]}
{"id": "eqasc_train_10819", "nl": "viruses can cause evolution to occur", "fol": "", "prediction": ["all x.(Virus(x) -> CausesEvolution(x))"]}
{"id": "eqasc_train_10820", "nl": "Mutations in somatic cells are called somatic mutations .", "fol": "", "prediction": ["all x.((Mutation(x) & SomaticCell(x)) -> SomaticMutation(x))"]}
{"id": "eqasc_train_10821", "nl": "somatic cells perform evolution", "fol": "", "prediction": ["all x.(SomaticCell(x) -> PerformsEvolution(x))"]}
{"id": "eqasc_train_10822", "nl": "Reptiles are a class of tetrapod vertebrates that produce amniotic eggs.", "fol": "", "prediction": ["all x.(Reptile(x) -> (TetrapodVertebrate(x) & ProducesAmnioticEggs(x)))"]}
{"id": "eqasc_train_10823", "nl": "All reptiles produce eggs with a waterproof shell full of amniotic fluid.", "fol": "", "prediction": ["all x.(Reptile(x) -> (ProducesEggsWithWaterproofShell(x) & FullOfAmnioticFluid(x)))"]}
{"id": "eqasc_train_10824", "nl": "Reptiles are a class of tetrapod vertebrates that produce eggs with a waterproof shell", "fol": "", "prediction": ["all x.(Reptile(x) -> (TetrapodVertebrate(x) & ProducesEggsWithWaterproofShell(x)))"]}
{"id": "eqasc_train_10825", "nl": "Snakes are cold-blooded reptiles.", "fol": "", "prediction": ["all x.(Snake(x) -> ColdBloodedReptile(x))"]}
{"id": "eqasc_train_10826", "nl": "snakes produce amniotic eggs", "fol": "", "prediction": ["all x.(Snake(x) -> ProducesAmnioticEggs(x))"]}
{"id": "eqasc_train_10827", "nl": "Animals able to lay shelled eggs are called amniotes .", "fol": "", "prediction": ["all x.((Animal(x) & LaysShelledEggs(x)) -> Amniote(x))"]}
{"id": "eqasc_train_10828", "nl": "Reptiles are a class of tetrapod vertebrates that lay shelled eggs", "fol": "", "prediction": ["all x.(Reptile(x) -> (TetrapodVertebrate(x) & LaysShelledEggs(x)))"]}
{"id": "eqasc_train_10829", "nl": "Frogs are a type of reptile.", "fol": "", "prediction": ["all x.(Frog(x) -> Reptile(x))"]}
{"id": "eqasc_train_10830", "nl": "frogs produce amniotic eggs", "fol": "", "prediction": ["all x.(Frog(x) -> ProducesAmnioticEggs(x))"]}
{"id": "eqasc_train_10831", "nl": "lizards produce amniotic eggs", "fol": "", "prediction": ["all x.(Lizard(x) -> ProducesAmnioticEggs(x))"]}
{"id": "eqasc_train_10832", "nl": "Animals in the class Reptilia are a class of tetrapod vertebrates that produce amniotic eggs.", "fol": "", "prediction": ["all x.((Animal(x) & Reptilia(x)) -> (TetrapodVertebrate(x) & ProducesAmnioticEggs(x)))"]}
{"id": "eqasc_train_10833", "nl": "Amniotes are the reptiles, birds, and mammals.", "fol": "", "prediction": ["all x.(Amniote(x) -> (Reptile(x) | Bird(x) | Mammal(x)))"]}
{"id": "eqasc_train_10834", "nl": "birds have amniotic eggs", "fol": "", "prediction": ["all x.(Bird(x) -> HasAmnioticEggs(x))"]}
{"id": "eqasc_train_10835", "nl": "Lizards are tetrapod vertebrates that produce amniotic eggs.", "fol": "", "prediction": ["all x.(Lizard(x) -> (TetrapodVertebrate(x) & ProducesAmnioticEggs(x)))"]}
{"id": "eqasc_train_10836", "nl": "Most reptiles, are considered to be tetrapods, or 4 legged animals.", "fol": "", "prediction": ["all x.(Reptile(x) -> (Tetrapod(x) | 4LeggedAnimal(x)))"]}
{"id": "eqasc_train_10837", "nl": "Reptiles are a class of 4 legged animals that produce amniotic eggs", "fol": "", "prediction": ["all x.(Reptile(x) -> (ClassOf4LeggedAnimals(x) & ProducesAmnioticEggs(x)))"]}
{"id": "eqasc_train_10838", "nl": "Crocodiles are a type of tetrapod vertebrates that make amniotic eggs.", "fol": "", "prediction": ["all x.(Crocodile(x) -> (TetrapodVertebrate(x) & MakesAmnioticEggs(x)))"]}
{"id": "eqasc_train_10839", "nl": "Reptiles are called amniotes", "fol": "", "prediction": ["all x.(Reptile(x) -> Amniote(x))"]}
{"id": "eqasc_train_10840", "nl": "sexual reproduction increases genetic diversity", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> IncreasesGeneticDiversity(x))"]}
{"id": "eqasc_train_10841", "nl": "Diversity leads to vast genetic potential.", "fol": "", "prediction": ["all x.(Diversity(x) -> VastGeneticPotential(x))"]}
{"id": "eqasc_train_10842", "nl": "Sexual reproduction increases genetic potential ", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> IncreasesGeneticPotential(x))"]}
{"id": "eqasc_train_10843", "nl": "Mammals are dioecious with sexual reproduction and internal fertilization.", "fol": "", "prediction": ["all x.(Mammal(x) -> (Dioecious(x) & SexualReproduction(x) & InternalFertilization(x)))"]}
{"id": "eqasc_train_10844", "nl": "Something that mammals do increases genetic diversity", "fol": "", "prediction": ["all x.((Mammal(x) & Do(x)) -> IncreasesGeneticDiversity(x))"]}
{"id": "eqasc_train_10845", "nl": "It also increases genetic diversity that allows evolution to continue.", "fol": "", "prediction": ["all x.((GeneticDiversity(x) & EvolutionContinues(x)) -> Increases(x))"]}
{"id": "eqasc_train_10846", "nl": "sexual reproduction allows evolution to continue.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> AllowsEvolution(x))"]}
{"id": "eqasc_train_10847", "nl": "Sexual reproduction creates evolution.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> CreatesEvolution(x))"]}
{"id": "eqasc_train_10848", "nl": "Sexual reproduction increases biodiversity. ", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> IncreasesBiodiversity(x))"]}
{"id": "eqasc_train_10849", "nl": "All creatures procreate via sexual reproduction.", "fol": "", "prediction": ["all x.(Creature(x) -> ProcreatesThroughSexualReproduction(x))"]}
{"id": "eqasc_train_10850", "nl": "procreation increases genetic diversity", "fol": "", "prediction": ["all x.(Procreation(x) -> IncreasesGeneticDiversity(x))"]}
{"id": "eqasc_train_10851", "nl": "Sexual reproduction enables evolution.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> EnablesEvolution(x))"]}
{"id": "eqasc_train_10852", "nl": "sexual reproduction begins evolution", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> Evolution(x))"]}
{"id": "eqasc_train_10853", "nl": "Sexual reproduction combines an egg and a sperm.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> (CombinesEgg(x) & CombinesSpore(x)))"]}
{"id": "eqasc_train_10854", "nl": "combining an egg and sperm increases genetic diversity", "fol": "", "prediction": ["all x y.((Egg(x) & Sperm(y) & Combines(x,y)) -> IncreasesGeneticDiversity(x))"]}
{"id": "eqasc_train_10855", "nl": "During sexual reproduction genetic material is exchanged between pairs of genes.", "fol": "", "prediction": ["all x y.((SexualReproduction(x) & Gene(y)) -> GeneMaterialExchange(x,y))"]}
{"id": "eqasc_train_10856", "nl": "Genetic diversity is a result of genetic material exchanged during reproduction", "fol": "", "prediction": ["all x.(GeneticDiversity(x) -> (GeneticMaterialExchange(x) & Reproduction(x)))"]}
{"id": "eqasc_train_10857", "nl": "Earth 's tilt on its rotating axis causes seasons to change", "fol": "", "prediction": ["all x y.((Earth(x) & TiltOnRotatingAxis(x,y)) -> CausesSeasonsToChange(x,y))"]}
{"id": "eqasc_train_10858", "nl": "Whatever the season wet weather and cold weather clothing is essential.", "fol": "", "prediction": ["all x.((Season(x) & (WetWeather(x) | ColdWeatherClothing(x))) -> Essential(x))"]}
{"id": "eqasc_train_10859", "nl": "Earth's tilt on its rotating axis causes wet and cold weather.", "fol": "", "prediction": ["all x.(TiltOnRotatingAxis(x) -> (CausesWetWeather(x) & CausesColdWeather(x)))"]}
{"id": "eqasc_train_10860", "nl": "Earth 's tilt on its rotating axis causes winter", "fol": "", "prediction": ["all x y.((Earth(x) & EarthTiltOnRotatingAxis(x,y)) -> CausesWinter(x))"]}
{"id": "eqasc_train_10861", "nl": "Winter is a special season.", "fol": "", "prediction": ["all x.(Winter(x) -> SpecialSeason(x))"]}
{"id": "eqasc_train_10862", "nl": "Earth's tilt causes winter", "fol": "", "prediction": ["all x.(Tilt(x) -> CausesWinter(x))"]}
{"id": "eqasc_train_10863", "nl": "Seasons are divided into fall, winter and spring.", "fol": "", "prediction": ["all x.(Season(x) -> (Fall(x) | Winter(x) | Spring(x)))"]}
{"id": "eqasc_train_10864", "nl": "earth's tilt on its rotating axis causes fall, winter, and spring to change", "fol": "", "prediction": ["all x.(TiltOnRotatingAxis(x) -> (CausesChange(x,fall) | CausesChange(x,winter) | CausesChange(x,spring)))"]}
{"id": "eqasc_train_10865", "nl": "earth's tilt on its rotating axis causes temperature to change", "fol": "", "prediction": ["all x y.((Earth(x) & EarthTiltOnRotatingAxis(x,y)) -> CausesTemperatureChange(x))"]}
{"id": "eqasc_train_10866", "nl": "Rotational motion occurs when an object spins.", "fol": "", "prediction": ["all x.((Object(x) & Spins(x)) -> RotationalMotion(x))"]}
{"id": "eqasc_train_10867", "nl": "Earth's tilt on its spinning axis causes the seasons to change.", "fol": "", "prediction": ["all x.((Earth(x) & TiltOnSpinningAxis(x)) -> SeasonChange(x))"]}
{"id": "eqasc_train_10868", "nl": "Weather changes rapidly in all seasons.", "fol": "", "prediction": ["all x.(Weather(x) -> ChangesRapidly(x))"]}
{"id": "eqasc_train_10869", "nl": "Earth's tilt on it's rotating axis causes rapid weather changes.", "fol": "", "prediction": ["all x.((Earth(x) & TiltOnRotatingAxis(x)) -> RapidWeatherChanges(x))"]}
{"id": "eqasc_train_10870", "nl": "During that time the seasons change from fall to winter to spring to summer.", "fol": "", "prediction": ["all x y.((Season(x) & Fall(y) & Winter(y)) -> ChangesFromTo(x,y))"]}
{"id": "eqasc_train_10871", "nl": "Earth 's tilt on its rotating axis causes fall to change to winter", "fol": "", "prediction": ["all x y.((Earth(x) & EarthTiltOnRotatingAxis(x,y)) -> CausesFallToChangeToWinter(x,y))"]}
{"id": "eqasc_train_10872", "nl": "Spring and Fall are transitional seasons.", "fol": "", "prediction": ["(TransitionalSeason(Spring) & TransitionalSeason(Fall))"]}
{"id": "eqasc_train_10873", "nl": "Earth 's tilt on its rotating axis causes spring and fall to be transitional.", "fol": "", "prediction": ["all x.((Earth(x) & TiltOnRotatingAxis(x)) -> (TransitionalSpring(x) | TransitionalFall(x)))"]}
{"id": "eqasc_train_10874", "nl": "Because of the tilt of the earth, the suns rays are strongest near the equator.", "fol": "", "prediction": ["all x y.((Sun(x) & Earth(y) & Tilt(x,y)) -> StrongestNearEquator(x))"]}
{"id": "eqasc_train_10875", "nl": "the suns rays are strongest near the equator for the same reason the seasons change", "fol": "", "prediction": ["all x y z.((Sun(x) & SunsRain(y) & Equilibrium(z)) -> StrongestNearEquator(x,y,z))"]}
{"id": "eqasc_train_10876", "nl": "Winter followed by summer are the slower seasons.", "fol": "", "prediction": ["all x.((Winter(x) & Summer(x)) -> SlowerSeason(x))"]}
{"id": "eqasc_train_10877", "nl": "Earth's tilt on its rotating axis causes winter and summer to change", "fol": "", "prediction": ["all x y.((Earth(x) & EarthTiltOnRotatingAxis(x,y)) -> (Causes(x,y) & Causes(x,z)))"]}
{"id": "eqasc_train_10878", "nl": "Autumn brings the changing of the seasons.", "fol": "", "prediction": ["all x.(Autumn(x) -> BringsChangeOfSeasons(x))"]}
{"id": "eqasc_train_10879", "nl": "Earth 's tilt on its rotating axis causes autumn ", "fol": "", "prediction": ["all x y.((Earth(x) & EarthTiltOnRotatingAxis(x,y)) -> CausesAutumn(x,y))"]}
{"id": "eqasc_train_10880", "nl": " Earth 's tilt on its rotating axis causes changes in weather", "fol": "", "prediction": ["all x y.((Earth(x) & TiltOnRotatingAxis(x,y)) -> CausesWeatherChanges(x))"]}
{"id": "eqasc_train_10881", "nl": "Earth 's tilt on its rotating axis causes daylight to change", "fol": "", "prediction": ["all x y.((Earth(x) & EarthTiltOnRotatingAxis(x,y)) -> CausesDaylightToChange(x))"]}
{"id": "eqasc_train_10882", "nl": "Seasons are caused by the motion of the Earth around the Sun and the tilt of the Earth's axis.", "fol": "", "prediction": ["all x y.((Season(x) & Earth(y)) -> (MotionAroundSun(x,y) & TiltOfAxis(x,y)))"]}
{"id": "eqasc_train_10883", "nl": "seasons change because of tilt", "fol": "", "prediction": ["all x y.((Season(x) & Tilt(y)) -> SeasonChange(x,y))"]}
{"id": "eqasc_train_10884", "nl": "Habitats change with the seasons.", "fol": "", "prediction": ["all x.(Habitat(x) -> ChangesWithSeasons(x))"]}
{"id": "eqasc_train_10885", "nl": "Earth 's tilt on its axis causes habitats to change. ", "fol": "", "prediction": ["all x.((Earth(x) & TipOnAxis(x)) -> CausesHabitatChange(x))"]}
{"id": "eqasc_train_10886", "nl": "Specialization occurs when competing species evolve different adaptations.", "fol": "", "prediction": ["all x.(Specialization(x) -> (CompetingSpeciesEvolveDifferentAdaptations(x)))"]}
{"id": "eqasc_train_10887", "nl": "Mynah birds are the main competing species for nest holes.", "fol": "", "prediction": ["all x.(MynahBird(x) -> CompetingSpeciesForNestHoles(x))"]}
{"id": "eqasc_train_10888", "nl": "Mynah birds undergo specialization to compete for nest holes", "fol": "", "prediction": ["all x.(MynahBird(x) -> UndergoesSpecializationToCompeteForNestHoles(x))"]}
{"id": "eqasc_train_10889", "nl": "specialization occurs when competing species evolve to change with their environment", "fol": "", "prediction": ["all x y.((Specialization(x) & CompetingSpecies(y) & EvolveToChangeWithEnvironment(y,x)) -> SpecializationOccurs(x))"]}
{"id": "eqasc_train_10890", "nl": "Most species are highly specialized for their environments and evolve as the environments change.", "fol": "", "prediction": ["all x.(Species(x) -> (HighlySpecializedForEnvironment(x) & EvolvesAsEnvironmentsChange(x)))"]}
{"id": "eqasc_train_10891", "nl": "Specialization occurs when competing creatures evolve as the environments change", "fol": "", "prediction": ["all x y.((Specialization(x) & CompetingCreatures(y) & EnvironmentChange(y)) -> EvolvesAsEnvironmentsChange(x,y))"]}
{"id": "eqasc_train_10892", "nl": "Specialization decreases mortality 12,13 and increases survival.", "fol": "", "prediction": ["all x.(Specialization(x) -> (DecreasesMortality(x,12) & IncreasesSurvival(x,13)))"]}
{"id": "eqasc_train_10893", "nl": "evolving different adaptations increases survival", "fol": "", "prediction": ["all x y.((Adaptation(x) & Evolution(y)) -> IncreasesSurvival(x,y))"]}
{"id": "eqasc_train_10894", "nl": "Animals and plants evolve together, adapting to environmental conditions.", "fol": "", "prediction": ["all x y.((Animal(x) & Plant(y)) -> (EvolvesTogether(x,y) & AdaptsToEnvironmentalConditions(x)))"]}
{"id": "eqasc_train_10895", "nl": "specialization occurs when animals and plants evolve to environmental conditions", "fol": "", "prediction": ["all x y z.((Animal(x) & Plant(y) & Environment(z) & Species(x,y)) -> ExpandsToEnvironmentalConditions(x,y,z))"]}
{"id": "eqasc_train_10896", "nl": "Beaks show a lot of variation and specialization for different functions.", "fol": "", "prediction": ["all x.(Beak(x) -> (ShowsVariation(x) & ShowsSpecialization(x)))"]}
{"id": "eqasc_train_10897", "nl": "Beak variation came about because of competing species evolving different adaptations.", "fol": "", "prediction": ["all x.(BeakVariation(x) -> (CompetingSpecies(x) & DifferentAdaptations(x)))"]}
{"id": "eqasc_train_10898", "nl": "Instructional techniques are adapted to accommodate differences.", "fol": "", "prediction": ["all x.(InstructionalTechnique(x) -> AdaptedToAccommodateDifferences(x))"]}
{"id": "eqasc_train_10899", "nl": "Specialization occurs when competing species evolve techniques to accomodate differences", "fol": "", "prediction": ["all x y.((Specialization(x) & CompetingSpecies(y) & DevelopedTechniques(x,y)) -> AccommodatesDifferences(x,y))"]}
{"id": "eqasc_train_10900", "nl": "For each species, mammal or bird, there are very specialized diets.", "fol": "", "prediction": ["all x.((Species(x) & (Mammal(x) | Bird(x))) -> SpecializedDiet(x))"]}
{"id": "eqasc_train_10901", "nl": "diet is an adaptation", "fol": "", "prediction": ["all x.(Diet(x) -> Adaptation(x))"]}
{"id": "eqasc_train_10902", "nl": "Every animal has special characteristics and physical features that help it survive.", "fol": "", "prediction": ["all x.(Animal(x) -> (HasSpecialCharacteristics(x) & HasPhysicalFeatures(x) & HelpsSurvive(x)))"]}
{"id": "eqasc_train_10903", "nl": "competition helps species survive", "fol": "", "prediction": ["all x y.((Species(x) & Competition(y)) -> HelpsSurvive(x,y))"]}
{"id": "eqasc_train_10904", "nl": "Animals are adapted for conditions where they live.", "fol": "", "prediction": ["all x.(Animal(x) -> AdaptedForConditions(x))"]}
{"id": "eqasc_train_10905", "nl": "Specialization occurs when competing species evolve with conditions where they live ", "fol": "", "prediction": ["all x y.((Species(x) & CompetingSpecies(y) & ConditionsWhereLive(y)) -> SpecializationOccurs(x))"]}
{"id": "eqasc_train_10906", "nl": "Specialization is a result of natural selection.", "fol": "", "prediction": ["all x.(Specialization(x) -> NaturalSelection(x))"]}
{"id": "eqasc_train_10907", "nl": "Genetic variation enables a species to adapt and evolve to new circumstances.", "fol": "", "prediction": ["all x y.((Species(x) & GeneticVariation(y)) -> (EnablesAdaptation(x,y) & EnablesEvolvement(x,y)))"]}
{"id": "eqasc_train_10908", "nl": "Specialization occurs when Genetic variation enables a species to adapt", "fol": "", "prediction": ["all x y.((Specialization(x) & GeneticVariation(y) & EnablesSpeciesToAdapt(x,y)) -> SpecializationOccurs(x))"]}
{"id": "eqasc_train_10909", "nl": "Species is a group of interbreeding individuals.", "fol": "", "prediction": ["all x.(Species(x) -> InterbreedingIndividuals(x))"]}
{"id": "eqasc_train_10910", "nl": "Specialization occurs when competing groups of interbreeding individuals evolve different adaptations.", "fol": "", "prediction": ["all x.(Specialization(x) -> (CompetingGroupsOfInterbreedingIndividualsEvolveDifferentAdaptations(x)))"]}
{"id": "eqasc_train_10911", "nl": "heating salt water causes the water to evaporate while the salt remains", "fol": "", "prediction": ["all x y.((HeatingSaltWater(x) & Salt(y)) -> (CausesWaterToEvaporate(x) & SaltRemains(y)))"]}
{"id": "eqasc_train_10912", "nl": "Flash evaporators are used to make fresh water from salt water.", "fol": "", "prediction": ["all x.(FlashEvaporator(x) -> (MadeFreshWaterFromSaltWater(x) & Uses(x,y)))"]}
{"id": "eqasc_train_10913", "nl": "Heating salt water causes the water to become fresh water.", "fol": "", "prediction": ["all x.(HeatingSaltWater(x) -> WaterBecomesFreshWater(x))"]}
{"id": "eqasc_train_10914", "nl": "increasing the temperature of salt water causes the water to evaporate while the salt remains", "fol": "", "prediction": ["all x y.((SaltWater(x) & SaltWater(y)) -> (IncreasesTemperature(x,y) & CausesWaterToEvaporate(x) & SaltRemains(y)))"]}
{"id": "eqasc_train_10915", "nl": "Steam that rises from a pot of boiling water is water than has evaporated .", "fol": "", "prediction": ["all x y.((Steam(x) & PotOfBoilingWater(y) & RisesFrom(x,y)) -> WaterEvaporated(x))"]}
{"id": "eqasc_train_10916", "nl": "Boiling salt water turns the water into steam", "fol": "", "prediction": ["all x y.((BoilingSaltWater(x) & SaltWater(y)) -> TurnsIntoSteam(x,y))"]}
{"id": "eqasc_train_10917", "nl": "Maybe the fillings evaporated during steaming.", "fol": "", "prediction": ["-(FillingsEvaporated(x) & Steaming(x))"]}
{"id": "eqasc_train_10918", "nl": "Heating salt water causes the water to steam while the salt remains.", "fol": "", "prediction": ["all x y.((HeatingSaltWater(x) & Salt(y)) -> (CausesWaterToSteam(x,y) & SaltRemains(y)))"]}
{"id": "eqasc_train_10919", "nl": "On high heat, bring to a boil.", "fol": "", "prediction": ["all x.((HighHeat(x) & BringToBoil(x)) -> BringToBoil(x))"]}
{"id": "eqasc_train_10920", "nl": "Boiling salt water causes the water to evaporate while leaving salt behind", "fol": "", "prediction": ["all x y.((BoilingSaltWater(x) & Salt(y)) -> (WaterEvaporates(x) & SaltLeaves(x,y)))"]}
{"id": "eqasc_train_10921", "nl": "Evaporation is the change of state from a liquid to a gas.", "fol": "", "prediction": ["all x.(Evaporation(x) -> (ChangeOfState(x) & FromLiquidToGas(x)))"]}
{"id": "eqasc_train_10922", "nl": "heating salt water causes the water to change into a gas while the salt remains", "fol": "", "prediction": ["all x y.((HeatingSaltWater(x) & Salt(y)) -> (CausesWaterToChangeIntoGas(x,y) & SaltRemainsSalt(y)))"]}
{"id": "eqasc_train_10923", "nl": "Oceans contain salt water.", "fol": "", "prediction": ["all x.(Ocean(x) -> ContainsSaltWater(x))"]}
{"id": "eqasc_train_10924", "nl": "heating oceans causes the H2O to evaporate while the NaCl remains", "fol": "", "prediction": ["all x y.((HeatingOcean(x) & Ocean(y)) -> (EvaporatesH2O(x) & NaClRemains(x)))"]}
{"id": "eqasc_train_10925", "nl": "Heating salty water causes the solvent to evaporate while the solute remains", "fol": "", "prediction": ["all x y.((HeatingSaltyWater(x) & Solvent(y)) -> (CausesEvaporation(x,y) & SoluteRemains(y)))"]}
{"id": "eqasc_train_10926", "nl": "Evaporation of the water leaves the salt on the surface.", "fol": "", "prediction": ["all x y.((Water(x) & Evaporation(y)) -> LeavesSaltOnSurface(x,y))"]}
{"id": "eqasc_train_10927", "nl": "heating salt water leaves the salt on the surface", "fol": "", "prediction": ["all x y.((HeatingSaltWater(x) & Salt(y)) -> LeavesOnSurface(x,y))"]}
{"id": "eqasc_train_10928", "nl": "Salt is produced by the evaporation of sea water.", "fol": "", "prediction": ["all x.(Salt(x) -> ProducedByEvaporationOfSeaWater(x))"]}
{"id": "eqasc_train_10929", "nl": "salt is produced by heating water", "fol": "", "prediction": ["all x.(Salt(x) -> (ProducedByHeatingWater(x) & ProducedByHeatingWater(x)))"]}
{"id": "eqasc_train_10930", "nl": "Most of Earth's water is salty seawater.", "fol": "", "prediction": ["all x.(EarthsWater(x) -> SaltySeawater(x))"]}
{"id": "eqasc_train_10931", "nl": "heating seawater causes it to evaporate while the salt remains", "fol": "", "prediction": ["all x y.((HeatingSeawater(x) & Seawater(y)) -> (CausesEvaporation(x,y) & SaltRemains(y)))"]}
{"id": "eqasc_train_10932", "nl": "When water evaporates, salts in the water remain and become more concentrated.", "fol": "", "prediction": ["all x.((WaterEvaporates(x) & SaltsInWater(x)) -> (Remain(x) & MoreConcentrated(x)))"]}
{"id": "eqasc_train_10933", "nl": "When the water evaporates, a higher concentration of salts are left.", "fol": "", "prediction": ["all x.((WaterEvaporates(x) & HigherConcentrationOfSalts(x)) -> LeftAtConcentration(x))"]}
{"id": "eqasc_train_10934", "nl": "fire converts chemical energy into light and heat energy", "fol": "", "prediction": ["all x y z.((Fire(x) & ChemicalEnergy(y) & Light(z) & Heat(z)) -> ConvertsTo(x,y,z))"]}
{"id": "eqasc_train_10935", "nl": "Fire is a chemical reaction involving rapid oxidation or burning of a fuel.", "fol": "", "prediction": ["all x.(Fire(x) -> (ChemicalReaction(x) & (RapidOxidation(x) | RapidBurning(x))))"]}
{"id": "eqasc_train_10936", "nl": "A chemical reaction involving rapid oxidation converts chemical energy into light and heat energy.", "fol": "", "prediction": ["all x.((ChemicalReaction(x) & RapidOxidation(x)) -> ConvertsChemicalEnergyToLightAndHeatEnergy(x))"]}
{"id": "eqasc_train_10937", "nl": "On match easily lights any fire.", "fol": "", "prediction": ["all x.(OnMatch(x) -> LightsFire(x))"]}
{"id": "eqasc_train_10938", "nl": "matches convert chemical energy into light and heat energy", "fol": "", "prediction": ["all x.(Match(x) -> (ConvertsChemicalEnergy(x) & LightEnergy(x) & HeatEnergy(x)))"]}
{"id": "eqasc_train_10939", "nl": "Fire needs fuel to burn.", "fol": "", "prediction": ["all x.(Fire(x) -> NeedsFuelToBurn(x))"]}
{"id": "eqasc_train_10940", "nl": "burning fuel converts chemical cnergy into light and heat energy", "fol": "", "prediction": ["all x y.((BurningFuel(x) & ChemicalCnergy(y)) -> ConvertsToLightAndHeatEnergy(x,y))"]}
{"id": "eqasc_train_10941", "nl": "Fuel is considered a chemical energy.", "fol": "", "prediction": ["all x.(Fuel(x) -> ChemicalEnergy(x))"]}
{"id": "eqasc_train_10942", "nl": "Fuel converts into light and heat", "fol": "", "prediction": ["all x.(Fuel(x) -> (ConvertsIntoLight(x) & ConvertsIntoHeat(x)))"]}
{"id": "eqasc_train_10943", "nl": "Fire converts energy into something people use for cooking.", "fol": "", "prediction": ["all x y.((Fire(x) & Energy(y)) -> ConvertsTo(x,y))"]}
{"id": "eqasc_train_10944", "nl": "Fire is a natural energy source which provides heat, light and energy.", "fol": "", "prediction": ["all x.(Fire(x) -> (NaturalEnergySource(x) & ProvidesHeat(x) & ProvidesLight(x) & ProvidesEnergy(x)))"]}
{"id": "eqasc_train_10945", "nl": "fire provides light", "fol": "", "prediction": ["all x.(Fire(x) -> ProvidesLight(x))"]}
{"id": "eqasc_train_10946", "nl": "Fires are large uncontrolled flames.", "fol": "", "prediction": ["all x.(Fire(x) -> (LargeUncontrolledFlame(x) & Contains(x,y)))"]}
{"id": "eqasc_train_10947", "nl": "Flames convert chemical energy into light and heat energy", "fol": "", "prediction": ["all x y z.((Flame(x) & ChemicalEnergy(y) & Light(z)) -> ConvertsToHeat(x,y,z))"]}
{"id": "eqasc_train_10948", "nl": "Fuel has a chemical energy.", "fol": "", "prediction": ["all x.(Fuel(x) -> HasChemicalEnergy(x))"]}
{"id": "eqasc_train_10949", "nl": "Fire converts fuel into light and heat energy", "fol": "", "prediction": ["all x y z.((Fire(x) & Fuel(y) & Light(z)) -> ConvertsToHeatEnergy(x,y,z))"]}
{"id": "eqasc_train_10950", "nl": "And since infrared energy is heat, it warms the Earth.", "fol": "", "prediction": ["(all x.(InfraredEnergy(x) -> Heat(x)))"]}
{"id": "eqasc_train_10951", "nl": "Fire converts chemical energy into light and warmth for earth", "fol": "", "prediction": ["all x y z.((Fire(x) & ChemicalEnergy(y) & Earth(z)) -> ConvertsToLightAndWarmth(x,y,z))"]}
{"id": "eqasc_train_10952", "nl": "Intensity is the amount of heat energy released by the fire.", "fol": "", "prediction": ["all x.(Intensity(x) -> HeatEnergyReleasedByFire(x))"]}
{"id": "eqasc_train_10953", "nl": "Intensity is the amount of chemical energy released by a fire", "fol": "", "prediction": ["all x.(Intensity(x) -> (AmountOfChemicalEnergy(x) & ReleasedByFire(x)))"]}
{"id": "eqasc_train_10954", "nl": "Wood can help Fire to burn.", "fol": "", "prediction": ["all x.(Wood(x) -> HelpsFireBurn(x))"]}
{"id": "eqasc_train_10955", "nl": "burning wood converts chemical energy into light and heat energy", "fol": "", "prediction": ["all x y.((BoilingWood(x) & ChemicalEnergy(y)) -> ConvertsToLightAndHeatEnergy(x,y))"]}
{"id": "eqasc_train_10956", "nl": "If fuel burns, chemical energy is converted into thermal energy.", "fol": "", "prediction": ["all x.((FuelBurns(x) & ChemicalEnergy(x)) -> ThermalEnergy(x))"]}
{"id": "eqasc_train_10957", "nl": "Fires ignited with fuel convert energy into light and heat", "fol": "", "prediction": ["all x y.((Fire(x) & Fuel(y) & IgnitedWith(x,y)) -> (ConvertsEnergyToLight(x) & ConvertsEnergyToHeat(x)))"]}
{"id": "eqasc_train_10958", "nl": "Beech wood fires burn bright and clear If the logs are kept a year.", "fol": "", "prediction": ["all x.((BeechWoodFire(x) & BurnsBrightAndClear(x)) -> KeepsLogsAnnumerary(x))"]}
{"id": "eqasc_train_10959", "nl": "Burning beech wood converts chemical energy into bright light", "fol": "", "prediction": ["all x y.((BurningBeechWood(x) & ChemicalEnergy(y)) -> ConvertsToBrightLight(x,y))"]}
{"id": "eqasc_train_10960", "nl": "a flame converts chemical energy into light and heat energy", "fol": "", "prediction": ["all x y z.((Flame(x) & ChemicalEnergy(y) & Light(z)) -> ConvertsToHeat(x,y,z))"]}
{"id": "eqasc_train_10961", "nl": "fire converts Fuel into light and heat energy", "fol": "", "prediction": ["all x y.((Fire(x) & Fuel(y)) -> ConvertsToLightAndHeatEnergy(x,y))"]}
{"id": "eqasc_train_10962", "nl": "Chordates have a complete digestive system and a closed circulatory system.", "fol": "", "prediction": ["all x.(Chordate(x) -> (CompleteDigestiveSystem(x) & ClosedCirculatorySystem(x)))"]}
{"id": "eqasc_train_10963", "nl": "fish have a closed circulatory system", "fol": "", "prediction": ["all x.(Fish(x) -> ClosedCirculatorySystem(x))"]}
{"id": "eqasc_train_10964", "nl": "All chordates have jaws.", "fol": "", "prediction": ["all x.(Acordate(x) -> HasJaws(x))"]}
{"id": "eqasc_train_10965", "nl": "animals with jaws have a complete digestive system and a closed circulatory system.", "fol": "", "prediction": ["all x.((Animal(x) & HasJaws(x)) -> (CompleteDigestiveSystem(x) & ClosedCirculatorySystem(x)))"]}
{"id": "eqasc_train_10966", "nl": "Reptiles have a complete digestive system and closed circulatory system", "fol": "", "prediction": ["all x.(Reptile(x) -> (CompleteDigestiveSystem(x) & ClosedCirculatorySystem(x)))"]}
{"id": "eqasc_train_10967", "nl": "Vertebrates are members of of a larger group, the chordates .", "fol": "", "prediction": ["all x y.((Vertebrates(x) & Chordates(y)) -> MemberOf(x,y))"]}
{"id": "eqasc_train_10968", "nl": "Vertebrates have a complete digestive system and a closed circulatory system", "fol": "", "prediction": ["all x.(Vertebrates(x) -> (CompleteDigestiveSystem(x) & ClosedCirculatorySystem(x)))"]}
{"id": "eqasc_train_10969", "nl": "reptiles have complete digestive systems and a closed circulatory system", "fol": "", "prediction": ["all x.(Reptile(x) -> (CompleteDigestiveSystem(x) & ClosedCirculatorySystem(x)))"]}
{"id": "eqasc_train_10970", "nl": "vertebrates have a complete digestive system and a closed circulatory system", "fol": "", "prediction": ["all x.(Vertebrate(x) -> (CompleteDigestiveSystem(x) & ClosedCirculatorySystem(x)))"]}
{"id": "eqasc_train_10971", "nl": "reptiles have a closed circulatory system", "fol": "", "prediction": ["all x.(Reptile(x) -> (ClosedCirculatorySystem(x) & Reptile(x)))"]}
{"id": "eqasc_train_10972", "nl": "lizards have a complete digestive system and a closed circulatory system", "fol": "", "prediction": ["all x.(Lizard(x) -> (CompleteDigestiveSystem(x) & ClosedCirculatorySystem(x)))"]}
{"id": "eqasc_train_10973", "nl": "reptiles have a complete digestive system and a closed circulatory system", "fol": "", "prediction": ["all x.(Reptile(x) -> (CompleteDigestiveSystem(x) & ClosedCirculatorySystem(x)))"]}
{"id": "eqasc_train_10974", "nl": "All chordates are vertebrates.", "fol": "", "prediction": ["all x.(Candleate(x) -> Vertebrate(x))"]}
{"id": "eqasc_train_10975", "nl": "Vertebrates have a complete digestive system and a closed circulatory system.", "fol": "", "prediction": ["all x.(Vertebrates(x) -> (CompleteDigestiveSystem(x) & ClosedCirculatorySystem(x)))"]}
{"id": "eqasc_train_10976", "nl": "All of the chordates have elongated bilaterally symmetrical bodies.", "fol": "", "prediction": ["all x.(Cdractate(x) -> ElongatedBody(x))"]}
{"id": "eqasc_train_10977", "nl": "all humans have elongated bilaterally symmetrical bodies and a complete digestive system.", "fol": "", "prediction": ["all x.(Human(x) -> (ElongatedBody(x) & BilaterallySymmetric(x) & CompleteDigestiveSystem(x)))"]}
{"id": "eqasc_train_10978", "nl": "Vertebrates have a closed circulatory system.", "fol": "", "prediction": ["all x.(Vertebrates(x) -> ClosedCirculatorySystem(x))"]}
{"id": "eqasc_train_10979", "nl": "Chordates are vertebrates.", "fol": "", "prediction": ["all x.(Chordate(x) -> Vertebrate(x))"]}
{"id": "eqasc_train_10980", "nl": "Shock is a disruption of the circulatory system.", "fol": "", "prediction": ["all x.(Shock(x) -> DisruptionOfCirculatorySystem(x))"]}
{"id": "eqasc_train_10981", "nl": "Chordates can experience shock.", "fol": "", "prediction": ["all x.(Chordate(x) -> CanExperienceShock(x))"]}
{"id": "eqasc_train_10982", "nl": "Flowers attract pollinators, and fruits encourage animals to disperse the seeds.", "fol": "", "prediction": ["all x y.((Flower(x) & Fruit(y)) -> (AttractsPollinators(x) & EncouragesAnimalsToDisperseSeeds(y)))"]}
{"id": "eqasc_train_10983", "nl": "Sweet fruit like apples are eaten by animals that disperse the undigested seeds.", "fol": "", "prediction": ["all x y.((SweetFruit(x) & Apple(y)) -> (EatenByAnimals(x) & DispersesUnderigestedSeeds(x)))"]}
{"id": "eqasc_train_10984", "nl": "Flowers attract pollinators like animals that eat apples and disperse the undigested seeds.", "fol": "", "prediction": ["all x y.((Flower(x) & Animal(y) & EatsApples(x) & DispersesUnigestedSeeds(x)) -> AttractsPollinators(x,y))"]}
{"id": "eqasc_train_10985", "nl": "Flowers attract insects", "fol": "", "prediction": ["all x y.((Flower(x) & Insect(y)) -> Attracts(x,y))"]}
{"id": "eqasc_train_10986", "nl": "Bats help flowers by spreading pollen.", "fol": "", "prediction": ["all x.(Bat(x) -> (HelpsFlowers(x) & SpreadsPollen(x)))"]}
{"id": "eqasc_train_10987", "nl": "bats spread seeds", "fol": "", "prediction": ["all x.(Bat(x) -> SpreadsSeeds(x))"]}
{"id": "eqasc_train_10988", "nl": "Flowers attract insects.", "fol": "", "prediction": ["all x.(Flower(x) -> AttractsInsects(x))"]}
{"id": "eqasc_train_10989", "nl": "Attractive flowers are not required for plants that use wind to disperse pollen. ", "fol": "", "prediction": ["all x.((Plant(x) & UsesWind(x)) -> -AttractiveFlowersRequired(x))"]}
{"id": "eqasc_train_10990", "nl": "flowers attract hummingbirds", "fol": "", "prediction": ["all x y.((Flower(x) & Hummingbird(y)) -> Attracts(x,y))"]}
{"id": "eqasc_train_10991", "nl": "soil is formed by weathering", "fol": "", "prediction": ["all x.(Soil(x) -> FormedByWeathering(x))"]}
{"id": "eqasc_train_10992", "nl": "Soil is formed by the breaking down of rocks. ", "fol": "", "prediction": ["all x.(Soil(x) -> FormedByBreakingDownOfRocks(x))"]}
{"id": "eqasc_train_10993", "nl": "Rocks breaking down helps soil to form.", "fol": "", "prediction": ["all x.(Rock(x) -> BreaksDownHelpsSoilForm(x))"]}
{"id": "eqasc_train_10994", "nl": "Soil comes largely from weathering of rocks and erosion.", "fol": "", "prediction": ["all x.(Soil(x) -> (WeatheringRocks(x) & Erosion(x)))"]}
{"id": "eqasc_train_10995", "nl": "Soil is made from rocks eroding", "fol": "", "prediction": ["all x.(Soil(x) -> (MadeFromRocks(x) & Eroding(x)))"]}
{"id": "eqasc_train_10996", "nl": "Physical weathering breaks the rock into smaller pieces.", "fol": "", "prediction": ["all x y.((PhysicalWeathering(x) & Rock(y)) -> BreaksIntoSmallerPieces(x,y))"]}
{"id": "eqasc_train_10997", "nl": "Soil is formed by breaking rock into smaller pieces.", "fol": "", "prediction": ["all x.(Soil(x) -> (BreaksRockIntoSmallerPieces(x) & BreaksRockIntoSmallerPieces(x)))"]}
{"id": "eqasc_train_10998", "nl": "Rocks breaking down forms soil.", "fol": "", "prediction": ["all x.(Rock(x) -> BreaksDownFormsSoil(x))"]}
{"id": "eqasc_train_10999", "nl": "soil comes from rocks", "fol": "", "prediction": ["all x y.((Soil(x) & Rock(y)) -> ComesFrom(x,y))"]}
{"id": "eqasc_train_11000", "nl": "Soil or dirt is a very heavy material.", "fol": "", "prediction": ["all x.((Soil(x) | Dirt(x)) -> HeavyMaterial(x))"]}
{"id": "eqasc_train_11001", "nl": "dirt is formed by weathering", "fol": "", "prediction": ["all x.(Dirt(x) -> FormedByWeathering(x))"]}
{"id": "eqasc_train_11002", "nl": "a very heavy material is formed by weathering", "fol": "", "prediction": ["all x y.((Material(x) & Heavy(x)) -> FormedByWeathering(x))"]}
{"id": "eqasc_train_11003", "nl": "Loamy soil is the best kind of soil.", "fol": "", "prediction": ["all x.(LoamySoil(x) -> BestSoil(x))"]}
{"id": "eqasc_train_11004", "nl": "Something described as loamy is formed by weathering", "fol": "", "prediction": ["all x.((Loamy(x) & Weathering(x)) -> FormedBy(x))"]}
{"id": "eqasc_train_11005", "nl": "Over time, the slow processes of weathering and erosion can turn large rocks into sand.", "fol": "", "prediction": ["all x y.((SlowWeathering(x) & SlowErosion(y)) -> TurnsLargeRocksIntoSand(x))"]}
{"id": "eqasc_train_11006", "nl": "soil is formed by erosion processing large rocks.", "fol": "", "prediction": ["all x.(Soil(x) -> FormedByErosion(x))"]}
{"id": "eqasc_train_11007", "nl": "Dirt is formed by weathering.", "fol": "", "prediction": ["all x.(Dirt(x) -> FormedByWeathering(x))"]}
{"id": "eqasc_train_11008", "nl": "Weathering is the breakdown of rock.", "fol": "", "prediction": ["all x.(Weather(x) -> BreakdownOfRock(x))"]}
{"id": "eqasc_train_11009", "nl": "Food consists of organic molecules that store energy in their chemical bonds.", "fol": "", "prediction": ["all x.(Food(x) -> (OrganicMolecule(x) & StoresEnergyInChemicalBonds(x)))"]}
{"id": "eqasc_train_11010", "nl": "a source of nutrients consists of organic molecules that store energy in their chemical bonds.", "fol": "", "prediction": ["all x.((SourceOfNutrients(x) & OrganicMolecules(x) & StoreEnergyInChemicalBonds(x)) -> NutrientSource(x))"]}
{"id": "eqasc_train_11011", "nl": "Many of the molecules in food are called nutrients.", "fol": "", "prediction": ["all x.((Molecule(x) & Food(x)) -> Nutrient(x))"]}
{"id": "eqasc_train_11012", "nl": "nutrients are molecules", "fol": "", "prediction": ["all x.(Nutrient(x) -> Molecule(x))"]}
{"id": "eqasc_train_11013", "nl": "Chemical bonds are electrical in nature.", "fol": "", "prediction": ["all x.(ChemicalBond(x) -> ElectricalInNature(x))"]}
{"id": "eqasc_train_11014", "nl": "Food consists of organic molecules that store electrical energy", "fol": "", "prediction": ["all x.(Food(x) -> (ConsistsOfOrganicMolecules(x) & StoresElectricalEnergy(x)))"]}
{"id": "eqasc_train_11015", "nl": "Organic foods contain no chemicals, preservatives, or artificial colorings.", "fol": "", "prediction": ["all x.(OrganicFood(x) -> (-ContainsChemicals(x) & -ContainsPreservatives(x) & -ContainsArtificialColorings(x)))"]}
{"id": "eqasc_train_11016", "nl": "organic food has no preservatives", "fol": "", "prediction": ["all x.(OrganicFood(x) -> -HasPreservatives(x))"]}
{"id": "eqasc_train_11017", "nl": "If an molecule contains carbon, it is called organic.", "fol": "", "prediction": ["all x.((Molecule(x) & ContainsCarbon(x)) -> Organic(x))"]}
{"id": "eqasc_train_11018", "nl": "food consists of carbon", "fol": "", "prediction": ["all x.(Food(x) -> ConsistsOfCarbon(x))"]}
{"id": "eqasc_train_11019", "nl": "All organic matter eventually decomposes.", "fol": "", "prediction": ["all x.(OrganicMatter(x) -> Decomposes(x))"]}
{"id": "eqasc_train_11020", "nl": "food eventually decomposes", "fol": "", "prediction": ["all x.(Food(x) -> Decomposes(x))"]}
{"id": "eqasc_train_11021", "nl": "Food People want pure food.", "fol": "", "prediction": ["all x.(Food(x) -> WantsPureFood(x))"]}
{"id": "eqasc_train_11022", "nl": "Something that people want pure consists of organic molecules", "fol": "", "prediction": ["all x.((Person(x) & WantsPure(x)) -> OrganicMolecules(x))"]}
{"id": "eqasc_train_11023", "nl": "Beef jerky is the perfect food.", "fol": "", "prediction": ["all x.(BeefJerky(x) -> PerfectFood(x))"]}
{"id": "eqasc_train_11024", "nl": "beef jerky stores energy in its chemical bonds", "fol": "", "prediction": ["all x.(BeefJerky(x) -> StoresEnergyInChemicalBonds(x))"]}
{"id": "eqasc_train_11025", "nl": "Food consists of organic molecules that store heat in their chemical bonds.", "fol": "", "prediction": ["all x.(Food(x) -> (OrganicMolecule(x) & StoresHeatInChemicalBonds(x)))"]}
{"id": "eqasc_train_11026", "nl": "Food consists of organic molecules that store energy in the transfer of electrons", "fol": "", "prediction": ["all x y.((Food(x) & OrganicMolecule(y)) -> StoresEnergyInTransferOfElectrons(x,y))"]}
{"id": "eqasc_train_11027", "nl": "For example, beef is a functional food.", "fol": "", "prediction": ["all x.((Beef(x) & FunctionalFood(x)) -> FunctionalFood(x))"]}
{"id": "eqasc_train_11028", "nl": "beef has organic molecules that store energy in their chemical bonds.", "fol": "", "prediction": ["all x.(Beef(x) -> (OrganicMolecules(x) & StoresEnergyInChemicalBonds(x)))"]}
{"id": "eqasc_train_11029", "nl": "Plants Plants are able to directly absorb energy from the sunlight, and store it in chemical bonds.", "fol": "", "prediction": ["all x.(Plant(x) -> (AbsorbsEnergyFromSunlight(x) & StoresEnergyInChemicalBonds(x)))"]}
{"id": "eqasc_train_11030", "nl": "Food consists of organic molecules that store energy from the sunlight", "fol": "", "prediction": ["all x y.((Food(x) & OrganicMolecule(y)) -> StoresEnergyFromSunlight(x,y))"]}
{"id": "eqasc_train_11031", "nl": "Favorite food is steak.", "fol": "", "prediction": ["all x.(FavoriteFood(x) -> Steak(x))"]}
{"id": "eqasc_train_11032", "nl": "steak consists of organic molecules that stores energy in its chemical bonds", "fol": "", "prediction": ["all x.(Steak(x) -> (ConsistsOfOrganicMolecules(x) & StoresEnergyInChemicalBonds(x)))"]}
{"id": "eqasc_train_11033", "nl": "the mass of a planet causes the pull of gravity on that planet", "fol": "", "prediction": ["all x y.((Planet(x) & Planet(y)) -> CausesPullOfGravity(x,y))"]}
{"id": "eqasc_train_11034", "nl": "Earth Jupiter Jupiter's mass is 318 times greater than Earth's mass.", "fol": "", "prediction": ["EarthJupiter(x) & EarthJupiter(x) & Mass(x,318))"]}
{"id": "eqasc_train_11035", "nl": "Jupiter has a greater gravitational pull than earth", "fol": "", "prediction": ["all x y.((Jupiter(x) & Earth(y)) -> GreaterGravitationalPull(x,y))"]}
{"id": "eqasc_train_11036", "nl": "Gravity accelerates mass.", "fol": "", "prediction": ["all x.(Gravity(x) -> AcceleratesMass(x))"]}
{"id": "eqasc_train_11037", "nl": "a planet accelerates because of gravity", "fol": "", "prediction": ["all x.((Planet(x) & AcceleratesAsAffordsGravity(x)) -> Gravity(x))"]}
{"id": "eqasc_train_11038", "nl": "Jupiter's mass is much greater than all the other planets together.", "fol": "", "prediction": ["all x.(Jupiter(x) -> MuchGreaterMass(x,y))"]}
{"id": "eqasc_train_11039", "nl": "Of all planets, Jupiter has the strongest pull of gravity. ", "fol": "", "prediction": ["all x.(Planet(x) -> StrongestPullOfGravity(x))"]}
{"id": "eqasc_train_11040", "nl": "Gravity is the pulling force that holds objects to the surface of a planet.", "fol": "", "prediction": ["all x.(Gravity(x) -> (PullingForce(x) & HoldsObjectsToSurface(x)))"]}
{"id": "eqasc_train_11041", "nl": "The mass of a planet causes the pulling force that holds objects to its surface", "fol": "", "prediction": ["all x y z.((Planet(x) & Mass(y) & CausesPullingForce(x,y) & Object(z)) -> HoldsToSurface(x,z))"]}
{"id": "eqasc_train_11042", "nl": "Gravity is what causes things to have weight.", "fol": "", "prediction": ["all x.(Gravity(x) -> CausesWeight(x))"]}
{"id": "eqasc_train_11043", "nl": "the mass of a planet is what causes things to have weight", "fol": "", "prediction": ["all x y.((Planet(x) & Planet(y)) -> CausesWeight(x,y))"]}
{"id": "eqasc_train_11044", "nl": "Well, weight is the force on a object caused by gravity trying to pull the object down.", "fol": "", "prediction": ["all x y.((Object(x) & Gravity(y) & PullsDown(x,y)) -> Weight(x))"]}
{"id": "eqasc_train_11045", "nl": "The mass of a planet causes the weight of objects.", "fol": "", "prediction": ["all x y.((Planet(x) & Planet(y)) -> CausesWeight(x,y))"]}
{"id": "eqasc_train_11046", "nl": "Earth's mass causes the pull of gravity", "fol": "", "prediction": ["all x.((EarthsMass(x) & CausesPullOfGravity(x)) -> CausesPullOfGravity(x))"]}
{"id": "eqasc_train_11047", "nl": "Mass, the amount of matter in an object, is measured in grams.", "fol": "", "prediction": ["all x y.((Mass(x) & Matter(y) & Object(y)) -> MeasuredInGasories(x,y))"]}
{"id": "eqasc_train_11048", "nl": "the amount of matter of a planet causes the pull of gravity on that planet", "fol": "", "prediction": ["all x y.((Planet(x) & Planet(y)) -> CausesPullOfGravity(x,y))"]}
{"id": "eqasc_train_11049", "nl": "The force of gravity pulling on an object determines the weight", "fol": "", "prediction": ["all x y z.((GravityForce(x) & Object(y) & Weight(z)) -> DeterminesForceOfGravity(x,y,z))"]}
{"id": "eqasc_train_11050", "nl": "condensation causes clouds to form", "fol": "", "prediction": ["all x y.((Condensation(x) & Cloud(y)) -> CausesToForm(x,y))"]}
{"id": "eqasc_train_11051", "nl": "Clouds are made of water.", "fol": "", "prediction": ["all x.(Cloud(x) -> MadeOfWater(x))"]}
{"id": "eqasc_train_11052", "nl": "Water vapor causes clouds to form.", "fol": "", "prediction": ["all x.(WaterVapor(x) -> CausesCloudsToForm(x))"]}
{"id": "eqasc_train_11053", "nl": "Clouds produce rain.", "fol": "", "prediction": ["all x.(Cloud(x) -> ProducesRain(x))"]}
{"id": "eqasc_train_11054", "nl": "Condensation causes rain.", "fol": "", "prediction": ["all x.(Condensation(x) -> CausesRain(x))"]}
{"id": "eqasc_train_11055", "nl": "Rainy clouds cause rain, and excess water vapor from clouds is the basis of rainbows.", "fol": "", "prediction": ["all x y.((RainyCloud(x) & Cloud(y)) -> (CausesRain(x) & ExcessWaterVapor(y) & Rainbow(y)))"]}
{"id": "eqasc_train_11056", "nl": "Condensation can lead to rain.", "fol": "", "prediction": ["all x.(Condensation(x) -> LeadsToRain(x))"]}
{"id": "eqasc_train_11057", "nl": "Fog is a cloud that forms on the ground.", "fol": "", "prediction": ["all x.(Fog(x) -> (Cloud(x) & FormsOnGround(x)))"]}
{"id": "eqasc_train_11058", "nl": "condensation causes fog", "fol": "", "prediction": ["all x.(Condensation(x) -> CausesFog(x))"]}
{"id": "eqasc_train_11059", "nl": "Clouds bring rain and shade.", "fol": "", "prediction": ["all x.(Cloud(x) -> (BringsRain(x) & BringsShade(x)))"]}
{"id": "eqasc_train_11060", "nl": "condensation causes rain to form", "fol": "", "prediction": ["all x y.((Condensation(x) & Rain(y)) -> CausesToForm(x,y))"]}
{"id": "eqasc_train_11061", "nl": "Clouds do create rain.", "fol": "", "prediction": ["all x.(Cloud(x) -> CreatesRain(x))"]}
{"id": "eqasc_train_11062", "nl": "Condensation causes rain to fall.", "fol": "", "prediction": ["all x.(Condensation(x) -> CausesRainToFall(x))"]}
{"id": "eqasc_train_11063", "nl": "With increasing cloud blocking the sun, temperatures drop considerably.", "fol": "", "prediction": ["all x.((CloudBlocksSun(x) & Increases(x)) -> TemperaturesDrop(x))"]}
{"id": "eqasc_train_11064", "nl": "Condensation causes sun blocking and temperature drops. ", "fol": "", "prediction": ["all x.(Condensation(x) -> (CausesSunBlocking(x) & CausesTemperatureDrops(x)))"]}
{"id": "eqasc_train_11065", "nl": "Humans have collected and grown mushrooms for food for thousands of years.", "fol": "", "prediction": ["all x.(Human(x) -> (CollectsMushrooms(x) & GrowsMushrooms(x) & ForFood(x)))"]}
{"id": "eqasc_train_11066", "nl": "Porcini mushrooms are earthy, musky, sexy food.", "fol": "", "prediction": ["all x.(PorciniMushroom(x) -> (Earthy(x) & Musky(x) & Sexy(x)))"]}
{"id": "eqasc_train_11067", "nl": "humans have collected and grown porcinis for thousands of years", "fol": "", "prediction": ["all x y.((Human(x) & Porcinis(y)) -> (CollectedAndGrown(x,y) & ForMillionsOfYears(x)))"]}
{"id": "eqasc_train_11068", "nl": "Humanity's use of mushrooms extends back to Paleolithic times.", "fol": "", "prediction": ["all x.(Humanity(x) -> UsesMushrooms(x))"]}
{"id": "eqasc_train_11069", "nl": "Mushrooms have been eaten since Paleolithic times", "fol": "", "prediction": ["all x.(Mushroom(x) -> EatenFromPaleolithicTimes(x))"]}
{"id": "eqasc_train_11070", "nl": "Humans have collected and grown fungi for food for thousands of years.", "fol": "", "prediction": ["all x y.((Human(x) & Fungus(y)) -> (CollectsAndGrows(x,y) & ForFood(x,y)))"]}
{"id": "eqasc_train_11071", "nl": "Mushrooms are a fungus and have no chlorophyll.", "fol": "", "prediction": ["all x.(Mushroom(x) -> (Fungus(x) & -Chlorophyll(x)))"]}
{"id": "eqasc_train_11072", "nl": "Humans have collected and grown  fungus for food", "fol": "", "prediction": ["all x y z.((Human(x) & Fungus(y) & Food(z)) -> (CollectsAndGrows(x,y) & ForFood(x,z)))"]}
{"id": "eqasc_train_11073", "nl": "humans have grown fungi for food for hundreds of years", "fol": "", "prediction": ["all x y.((Human(x) & Fungus(y)) -> GrowsForFood(x,y))"]}
{"id": "eqasc_train_11074", "nl": "Rozites caperata is the edible mushroom.", "fol": "", "prediction": ["all x.(RozitesCaperata(x) -> EdibleMushroom(x))"]}
{"id": "eqasc_train_11075", "nl": "humans have collected and grown rozites caperata for food for thousands of years", "fol": "", "prediction": ["all x y.((Human(x) & RozitesCaperata(y)) -> (CollectsAndGrows(x,y) & ForFood(x,y)))"]}
{"id": "eqasc_train_11076", "nl": "Yeast and mushrooms are types of fungus.", "fol": "", "prediction": ["all x.((Yeast(x) | Mushroom(x)) -> Fungus(x))"]}
{"id": "eqasc_train_11077", "nl": "Humans have collected and grown types of fungus for food for thousands of years.", "fol": "", "prediction": ["all x.(Human(x) -> (CollectsFungus(x) & GrowsFungusForFood(x)))"]}
{"id": "eqasc_train_11078", "nl": "Edible mushrooms have been used by various cultures for centuries as a food.", "fol": "", "prediction": ["all x y.((EdibleMushroom(x) & Culture(y)) -> UsedForCulture(x,y))"]}
{"id": "eqasc_train_11079", "nl": "Humans have collected edible mushrooms for thousands of years", "fol": "", "prediction": ["all x y.((Human(x) & EdibleMushroom(y)) -> CollectsForThousandsOfYears(x,y))"]}
{"id": "eqasc_train_11080", "nl": "Humans have collected and grown fungus for food for thousands of years.", "fol": "", "prediction": ["all x y.((Human(x) & Fungus(y)) -> (CollectsAndGrowsForFood(x,y) & ForFood(x,y)))"]}
{"id": "eqasc_train_11081", "nl": "Foods rich in chlorine are mushrooms, parsley, sweet potato, rhubarb, and especially tomato.", "fol": "", "prediction": ["all x.((Food(x) & RichInChlorine(x)) -> (Mushrooms(x) | Parsley(x) | SweetPotato(x) | Rhubarb(x) | (Tomato(x) & Especially(x))))"]}
{"id": "eqasc_train_11082", "nl": "Humans have collected and grown foods rich in chlorine for thousands of years", "fol": "", "prediction": ["all x y z.((Human(x) & Food(y) & Chlorine(z)) -> (CollectsAndGrows(x,y,z) & RichInChlorine(y,z)))"]}
{"id": "eqasc_train_11083", "nl": "About mushrooms Mushrooms are the fruiting structure of fungi.", "fol": "", "prediction": ["all x.(Mushroom(x) -> FruitingStructureOfFungi(x))"]}
{"id": "eqasc_train_11084", "nl": "Humans have collected and grown the fruiting structure of fungi for food for thousands of years.", "fol": "", "prediction": ["all x y.((Human(x) & Fungus(y)) -> (CollectsAndGrowsFruitingStructure(x,y) & ForFood(x,y)))"]}
{"id": "eqasc_train_11085", "nl": "Soil can be depleted of nutrients.", "fol": "", "prediction": ["all x.(Soil(x) -> DepletedOfNutrients(x))"]}
{"id": "eqasc_train_11086", "nl": "Soil solids consist of mineral particles and organic matter.", "fol": "", "prediction": ["all x.(SoilSolid(x) -> (MineralParticles(x) & OrganicMatter(x)))"]}
{"id": "eqasc_train_11087", "nl": "mineral particles and organic matter can be depleted of nutrients", "fol": "", "prediction": ["all x.((MineralParticles(x) & OrganicMatter(x)) -> DepletedOfNutrients(x))"]}
{"id": "eqasc_train_11088", "nl": "Potassium carbonate is a valuable nutrient for plants.", "fol": "", "prediction": ["all x.(PotassiumCarbonate(x) -> ValuableNutrientForPlants(x))"]}
{"id": "eqasc_train_11089", "nl": "Soil can be depleted of potassium carbonate", "fol": "", "prediction": ["all x.(Soil(x) -> DepletedOfPotassiumCarbonate(x))"]}
{"id": "eqasc_train_11090", "nl": "Dirt can be depleted of nutrients.", "fol": "", "prediction": ["all x.(Dirt(x) -> DepletedOfNutrients(x))"]}
{"id": "eqasc_train_11091", "nl": "dirt can be depleted of nutrients", "fol": "", "prediction": ["all x.(Dirt(x) -> DepletedOfNutrients(x))"]}
{"id": "eqasc_train_11092", "nl": "Food and minerals are both nutrients.", "fol": "", "prediction": ["all x.((Food(x) & Mineral(x)) -> Nutrient(x))"]}
{"id": "eqasc_train_11093", "nl": "Soil can be depleted of food and minerals", "fol": "", "prediction": ["all x.(Soil(x) -> (DepletedOfFood(x) & DepletedOfMinerals(x)))"]}
{"id": "eqasc_train_11094", "nl": "soil can be depleted of iron", "fol": "", "prediction": ["all x.(Soil(x) -> DepletedOfIron(x))"]}
{"id": "eqasc_train_11095", "nl": "An important nutrient commonly added to soil is nitrogen.", "fol": "", "prediction": ["all x.((Nutrient(x) & CommonlyAddedToSoil(x)) -> Nitrogen(x))"]}
{"id": "eqasc_train_11096", "nl": "Soil can be depleted of nitrogen.", "fol": "", "prediction": ["all x.(Soil(x) -> DepletedOfNitrogen(x))"]}
{"id": "eqasc_train_11097", "nl": "For the nonrenewable resources, depletion means extraction of the available natural resources.", "fol": "", "prediction": ["all x.((Resource(x) & NonRenewable(x)) -> Depletion(x))"]}
{"id": "eqasc_train_11098", "nl": "soil nutrition can be extracted", "fol": "", "prediction": ["all x.(SoilNutrition(x) -> CanBeExtracted(x))"]}
{"id": "eqasc_train_11099", "nl": "Wampanucket soils are prime farmland soils.", "fol": "", "prediction": ["all x.((Soil(x) & Wampanucket(x)) -> PrimeFarmlandSoil(x))"]}
{"id": "eqasc_train_11100", "nl": "Farmland can be depleted of nutrients.", "fol": "", "prediction": ["all x.(Farmland(x) -> DepletedOfNutrients(x))"]}
{"id": "eqasc_train_11101", "nl": "Soil can be depleted of what fertilizers can add to soil.", "fol": "", "prediction": ["all x y.((Soil(x) & Fertilizer(y)) -> DepletedOf(x,y))"]}
{"id": "eqasc_train_11102", "nl": "recycling reduces the resources needed to make something", "fol": "", "prediction": ["all x y.((Recycling(x) & Resource(y)) -> ReducesResources(x,y))"]}
{"id": "eqasc_train_11103", "nl": "Reuse is the best form of recycling.", "fol": "", "prediction": ["all x.(Reuse(x) -> BestRecycling(x))"]}
{"id": "eqasc_train_11104", "nl": "Reusing products reduces resources needed to make something.", "fol": "", "prediction": ["all x.(ReusingProducts(x) -> ReducesResources(x))"]}
{"id": "eqasc_train_11105", "nl": "Reusing material reduces the resources needed to make something.", "fol": "", "prediction": ["all x.(ReusingMaterial(x) -> ReducesResources(x))"]}
{"id": "eqasc_train_11106", "nl": "Recycling Recycling protects the environment.", "fol": "", "prediction": ["all x.(Recycling(x) -> ProtectsEnvironment(x))"]}
{"id": "eqasc_train_11107", "nl": "When you reuse products you reduce the resources but also protect the environment", "fol": "", "prediction": ["all x y z.((ReuseProduct(x) & Resource(y) & Environment(z)) -> (Reduces(x,y) & Protects(x,z)))"]}
{"id": "eqasc_train_11108", "nl": "Literarily, to create something, to make something new.", "fol": "", "prediction": ["all x.((Literarily(x) & Creates(x)) -> MakesNew(x))"]}
{"id": "eqasc_train_11109", "nl": "Recycling reduces the resources needed to create objects.", "fol": "", "prediction": ["all x y.((Recycling(x) & Object(y)) -> ReducesResources(x,y))"]}
{"id": "eqasc_train_11110", "nl": "reducing the resources needed to make something protects the environment", "fol": "", "prediction": ["all x y.((ReducingResources(x) & MakesSomething(y)) -> ProtectsEnvironment(x,y))"]}
{"id": "eqasc_train_11111", "nl": "Recycling saves resources and reduces pollution.", "fol": "", "prediction": ["all x.(Recycling(x) -> (SavesResources(x) & ReducesPollution(x)))"]}
{"id": "eqasc_train_11112", "nl": "recycling reduces pollution when making something.", "fol": "", "prediction": ["all x y.((Recycling(x) & Making(y)) -> ReducesPollution(x,y))"]}
{"id": "eqasc_train_11113", "nl": "Recycling also saves energy.", "fol": "", "prediction": ["all x.(Recycling(x) -> SavesEnergy(x))"]}
{"id": "eqasc_train_11114", "nl": "saving energy reduces the resources needed to make something", "fol": "", "prediction": ["all x y.((SavingEnergy(x) & Resource(y)) -> ReducesResources(x,y))"]}
{"id": "eqasc_train_11115", "nl": "All bottles are recyclable.", "fol": "", "prediction": ["all x.(Bottle(x) -> Recyclable(x))"]}
{"id": "eqasc_train_11116", "nl": "bottles can reduce resources used", "fol": "", "prediction": ["all x.(Bloot(x) -> ReducesResources(x))"]}
{"id": "eqasc_train_11117", "nl": "natural disasters can cause animals to leave an environment", "fol": "", "prediction": ["all x y.((NaturalDisaster(x) & Animal(y)) -> CanCauseToLeaveEnvironment(x,y))"]}
{"id": "eqasc_train_11118", "nl": "Floods are the most common type of natural disaster.", "fol": "", "prediction": ["all x.(Flood(x) -> (NaturalDisaster(x) & MostCommon(x)))"]}
{"id": "eqasc_train_11119", "nl": "floods can cause animals to leave an environment", "fol": "", "prediction": ["all x y.((Flood(x) & Animal(y)) -> CanCauseLeaveEnvironment(x,y))"]}
{"id": "eqasc_train_11120", "nl": "And like fire, flooding is a common and widespread natural disaster.", "fol": "", "prediction": ["(all x.(Flooding(x) -> CommonAndWidespreadNaturalDisaster(x)))"]}
{"id": "eqasc_train_11121", "nl": "A flood can cause animals to leave an environment.", "fol": "", "prediction": ["all x y.((Flood(x) & Animal(y)) -> CanLeaveEnvironment(x,y))"]}
{"id": "eqasc_train_11122", "nl": "Floods are the most common natural disaster.", "fol": "", "prediction": ["all x.(Flood(x) -> MostCommonNaturalDisaster(x))"]}
{"id": "eqasc_train_11123", "nl": "Floods can cause animals to leave an environment.", "fol": "", "prediction": ["all x y.((Flood(x) & Animal(y)) -> CanLeaveEnvironment(x,y))"]}
{"id": "eqasc_train_11124", "nl": "Animals hibernate or relocate to avoid harsh conditions.", "fol": "", "prediction": ["all x.(Animal(x) -> (Hibernate(x) | Relocate(x)) & AvoidHarshConditions(x)))"]}
{"id": "eqasc_train_11125", "nl": "Natural disasters can cause relocation to avoid harsh conditions in an environment.", "fol": "", "prediction": ["all x y.((NaturalDisaster(x) & Environment(y)) -> CausesRelocationToAvoidHarshConditions(x,y))"]}
{"id": "eqasc_train_11126", "nl": "Earthquakes are natural disasters.", "fol": "", "prediction": ["all x.(Earthquake(x) -> NaturalDisaster(x))"]}
{"id": "eqasc_train_11127", "nl": "earthquakes can cause animals to leave an environment", "fol": "", "prediction": ["all x y.((Earthquake(x) & Animal(y)) -> CanCauseToLeaveEnvironment(x,y))"]}
{"id": "eqasc_train_11128", "nl": "Of all nature's disasters, forest fires are often considered the most frightening.", "fol": "", "prediction": ["all x.((NatureDisaster(x) & ForestFire(x)) -> Scaring(x))"]}
{"id": "eqasc_train_11129", "nl": "Forest fires can cause animals to leave an environment.", "fol": "", "prediction": ["all x y.((ForestFire(x) & Animal(y)) -> CanLeaveEnvironment(x,y))"]}
{"id": "eqasc_train_11130", "nl": "Life in a volcanic environment can nevertheless be treacherous for animals.", "fol": "", "prediction": ["all x.((LifeInVolcanicEnvironment(x) & Animal(y)) -> CanBePentherous(x,y))"]}
{"id": "eqasc_train_11131", "nl": "There is little wildlife in volcanic areas", "fol": "", "prediction": ["all x.((VolcanicArea(x) & LittleWildlife(x)) -> InVolcanicArea(x))"]}
{"id": "eqasc_train_11132", "nl": "Flooding is the most common natural disaster.", "fol": "", "prediction": ["all x.(Flooding(x) -> MostCommonNaturalDisaster(x))"]}
{"id": "eqasc_train_11133", "nl": "Flooding can cause animals to leave an environment", "fol": "", "prediction": ["all x y.((Flooding(x) & Animal(y)) -> CanLeaveEnvironment(x,y))"]}
{"id": "eqasc_train_11134", "nl": "Earthquakes are special kinds of natural disasters.", "fol": "", "prediction": ["all x.(Earthquake(x) -> NaturalDisaster(x))"]}
{"id": "eqasc_train_11135", "nl": "Earthquakes can cause animals to leave an environment", "fol": "", "prediction": ["all x y.((Earthquake(x) & Animal(y)) -> CanCauseToLeaveEnvironment(x,y))"]}
{"id": "eqasc_train_11136", "nl": "natural disasters can cause animals to leave their homes", "fol": "", "prediction": ["all x y.((NaturalDisaster(x) & Animal(y)) -> CanCauseToLeaveHome(y,x))"]}
{"id": "eqasc_train_11137", "nl": "Natural disasters can cause mammals to leave an environment", "fol": "", "prediction": ["all x y.((NaturalDisaster(x) & Mammal(y)) -> CausesToLeaveEnvironment(x,y))"]}
{"id": "eqasc_train_11138", "nl": "Goats are herd animals.", "fol": "", "prediction": ["all x.(Goat(x) -> HerdAnimal(x))"]}
{"id": "eqasc_train_11139", "nl": "natural disasters can cause goats to leave an environment", "fol": "", "prediction": ["all x y.((NaturalDisaster(x) & Goat(y)) -> CanCauseToLeaveEnvironment(y,x))"]}
{"id": "eqasc_train_11140", "nl": "If the property is damaged by a fire, natural disaster.", "fol": "", "prediction": ["all x.((Property(x) & DamagedByFire(x)) -> NaturalDisaster(x))"]}
{"id": "eqasc_train_11141", "nl": "fires can cause animals to leave an environment", "fol": "", "prediction": ["all x y.((Fire(x) & Animal(y)) -> CanCauseToLeaveEnvironment(x,y))"]}
{"id": "eqasc_train_11142", "nl": "Climate change has been linked to the increasing ferocity of natural disasters.", "fol": "", "prediction": ["all x y.((ClimateChange(x) & NaturalDisaster(y)) -> IncreasedFerocity(x,y))"]}
{"id": "eqasc_train_11143", "nl": "Climate change is linked to animals increasingly leaving their environment", "fol": "", "prediction": ["all x y.((ClimateChange(x) & Animal(y)) -> LeaveEnvironment(y,x))"]}
{"id": "eqasc_train_11144", "nl": "Animal migration is mystery of nature.", "fol": "", "prediction": ["all x.(AnimalMigration(x) -> MysteryOfNature(x))"]}
{"id": "eqasc_train_11145", "nl": "natural disasters can cause migration ", "fol": "", "prediction": ["all x.(NaturalDisaster(x) -> CausesMigration(x))"]}
{"id": "eqasc_train_11146", "nl": "radioactive dating is used to determine the age of fossils", "fol": "", "prediction": ["all x y.((RadioactiveDating(x) & Fossil(y)) -> DeterminesAge(x,y))"]}
{"id": "eqasc_train_11147", "nl": "Radioactive isotopes are commonly used for dating .", "fol": "", "prediction": ["all x.(RadioactiveIsotope(x) -> UsedForDating(x))"]}
{"id": "eqasc_train_11148", "nl": "Radioactive isotopes are commonly used to determine fossil age.", "fol": "", "prediction": ["all x.(RadioactiveIsotope(x) -> DeterminesFossilAge(x))"]}
{"id": "eqasc_train_11149", "nl": "Carbon 14 Dating Perhaps the best known radioactive dating is based on .", "fol": "", "prediction": ["all x.((Carbon14Dating(x) & BestKnownRadioactiveDating(x)) -> BasedOn(x))"]}
{"id": "eqasc_train_11150", "nl": "carbon 14 dating is one of the best known methods to determine the age of fossils", "fol": "", "prediction": ["all x.((Dating(x,Carbon14) & BestKnownMethod(x)) -> DeterminesAgeOfFossil(x))"]}
{"id": "eqasc_train_11151", "nl": "Fossil Petrified wood is the state fossil.", "fol": "", "prediction": ["all x.(Fossil(x) -> StateFossil(x))"]}
{"id": "eqasc_train_11152", "nl": "Radioactive dating can determine the age of petrified wood.", "fol": "", "prediction": ["all x.(RadioactiveDating(x) -> DeterminesAgeOfPetrifiedWood(x))"]}
{"id": "eqasc_train_11153", "nl": "Radioactive dating helps figure out the age of dinosaurs found today.", "fol": "", "prediction": ["all x.(RadioactiveDating(x) -> FiguresOutAgeOfDinosaurs(x))"]}
{"id": "eqasc_train_11154", "nl": "Radioactive dating requires the use of a decay curve.", "fol": "", "prediction": ["all x.(RadioactiveDating(x) -> RequiresDecayCurve(x))"]}
{"id": "eqasc_train_11155", "nl": "A decay curve is used to determine the age of fossils.", "fol": "", "prediction": ["all x.((DecayCurve(x) & AgeOfFossil(x)) -> Determines(x,fossil))"]}
{"id": "eqasc_train_11156", "nl": "Geologists use fossils to determine the age of the rock layer that it was found in.", "fol": "", "prediction": ["all x y.((Geologist(x) & RockLayer(y)) -> UsesFossil(x,y))"]}
{"id": "eqasc_train_11157", "nl": "Geologists use radioactive dating to determine the age of rock layers.", "fol": "", "prediction": ["all x y.((Geologist(x) & RockLayer(y)) -> UsesRadioactiveDatingToDetermineAge(x,y))"]}
{"id": "eqasc_train_11158", "nl": "Dinosaur bones, like many other artifacts, are fossilized.", "fol": "", "prediction": ["all x.((DinosaurBone(x) & Artifact(x)) -> Fossilized(x))"]}
{"id": "eqasc_train_11159", "nl": "radioactive dating is used to determine the age of dinosaur bones", "fol": "", "prediction": ["all x y.((RadioactiveDating(x) & DinosaurBones(y)) -> DeterminesAge(x,y))"]}
{"id": "eqasc_train_11160", "nl": "For a fossil to be made, the dead plant or animal has to be buried rapidly by sediment.", "fol": "", "prediction": ["all x.((DeadPlantOrAnimal(x) & BuriedBySediment(x)) -> Made(x))"]}
{"id": "eqasc_train_11161", "nl": "When dead plants or animals are buried rapidly by sediment, radioactive dating can be used to determine their age.", "fol": "", "prediction": ["all x y.((DeadPlantsOrAnimals(x) & BuriedRapidlyBySediment(x)) -> RadioactiveDating(y))"]}
{"id": "eqasc_train_11162", "nl": "For sedimentary rock, fossils provide the relative age of deposition.", "fol": "", "prediction": ["all x.((SedimentaryRock(x) & Fossil(x)) -> ProvidesRelativeAgeOfDeposition(x))"]}
{"id": "eqasc_train_11163", "nl": "radioactive dating is used to determine the relative age of deposition", "fol": "", "prediction": ["all x y.((RadioactiveDating(x) & Deposition(y)) -> DeterminesRelativeAgeOf(x,y))"]}
{"id": "eqasc_train_11164", "nl": "Extinct organisms represented only by fossils.", "fol": "", "prediction": ["all x.(ExtinctOrganism(x) -> (RepresentedByFossil(x) | RepresentedByFossil(x)))"]}
{"id": "eqasc_train_11165", "nl": "radioactive dating is used to determine the age of extinct organisms", "fol": "", "prediction": ["all x y.((RadioactiveDating(x) & ExtinctOrganism(y)) -> DeterminesAge(x,y))"]}
{"id": "eqasc_train_11166", "nl": "isotopes are used to determine the age of fossils", "fol": "", "prediction": ["all x y.((Isotope(x) & Fossil(y)) -> DeterminesAge(x,y))"]}
{"id": "eqasc_train_11167", "nl": "a drought can change the color of an environment from green to brown", "fol": "", "prediction": ["all x y.((Drought(x) & Environment(y)) -> ChangesColor(x,y))"]}
{"id": "eqasc_train_11168", "nl": "Too little rain causes a drought.", "fol": "", "prediction": ["all x.(LittleRain(x) -> CausesDrought(x))"]}
{"id": "eqasc_train_11169", "nl": "Too little rain can change the color of an environment from green to brown.", "fol": "", "prediction": ["all x.((Rain(x) & TooLittle(x)) -> ChangesColor(x,Green,Brown))"]}
{"id": "eqasc_train_11170", "nl": "Leaves fall off during drought or cold conditions.", "fol": "", "prediction": ["all x.((Leaves(x) & (Drought(x) | ColdConditions(x))) -> FallOff(x))"]}
{"id": "eqasc_train_11171", "nl": "leaves turn brown during the cold", "fol": "", "prediction": ["all x.(Cold(x) -> BrownLeaves(x))"]}
{"id": "eqasc_train_11172", "nl": "Drought Heat and drought go hand in hand.", "fol": "", "prediction": ["all x.(Drought(x) -> (Heat(x) & Drought(x)))"]}
{"id": "eqasc_train_11173", "nl": "Heat in the air can change the color of an environment from green to brown.", "fol": "", "prediction": ["all x y.((HeatInAir(x) & Environment(y)) -> ChangesColor(x,y))"]}
{"id": "eqasc_train_11174", "nl": "Forests are being hurt by the drought.", "fol": "", "prediction": ["all x.(Forest(x) -> HurtByDrought(x))"]}
{"id": "eqasc_train_11175", "nl": "Forests are being hurt by the color of an environment from changing green to brown", "fol": "", "prediction": ["all x y z.((Forest(x) & Environment(y) & Color(z) & Green(z) & Brown(z)) -> Hurts(x,y,z))"]}
{"id": "eqasc_train_11176", "nl": "Drought, or a lack of water, is often a problem for farmers and communities around the world.", "fol": "", "prediction": ["all x.(Drought(x) -> (LackOfWater(x) & ProblemForFarmersAndCommunities(x)))"]}
{"id": "eqasc_train_11177", "nl": "a lack of water can change the color of an environment from green to brown", "fol": "", "prediction": ["all x y.((LackOfWater(x) & Environment(y)) -> CanChangeColor(x,y))"]}
{"id": "eqasc_train_11178", "nl": "Due to the drought, there is no water.", "fol": "", "prediction": ["-Water(drought)"]}
{"id": "eqasc_train_11179", "nl": "If feeding is severe, particularly under drought conditions, the tips of leaves become brown.", "fol": "", "prediction": ["all x.((Feeding(x) & Severe(x) & DroughtConditions(x)) -> BrownTips(x))"]}
{"id": "eqasc_train_11180", "nl": "leaves can change color under a drought", "fol": "", "prediction": ["all x y.((Leaves(x) & Drought(y)) -> CanChangeColor(x,y))"]}
{"id": "eqasc_train_11181", "nl": "Cabbage is damn hard to dehydrate without turning brown.", "fol": "", "prediction": ["all x.(Cabbage(x) -> (DamnHardToDehydrate(x) & -TurnBrown(x)))"]}
{"id": "eqasc_train_11182", "nl": "A drought can dehydrate an entire environment.", "fol": "", "prediction": ["all x y.((Drought(x) & Environment(y)) -> Dehydrates(x,y))"]}
{"id": "eqasc_train_11183", "nl": "Lack of rain last winter has intensified Arizona's drought.", "fol": "", "prediction": ["-LackOfRainLastWinter(x) -IntensifiedArizonasDrought(x))"]}
{"id": "eqasc_train_11184", "nl": "lack of rain can change the color of an environment from green to brown", "fol": "", "prediction": ["all x y.((LackOfRain(x) & Environment(y)) -> CanChangeColor(x,y))"]}
{"id": "eqasc_train_11185", "nl": "a planet rotating causes cycles of day and night on that planet", "fol": "", "prediction": ["all x y.((Planet(x) & Rotating(x) & Planet(y)) -> CausesCyclesOfDayAndNight(x,y))"]}
{"id": "eqasc_train_11186", "nl": "The gravitational pull of the major planets alters the orbital period from revolution to revolution.", "fol": "", "prediction": ["all x y.((GravitationalPull(x) & MajorPlanet(y)) -> AltersOrbitalPeriodFromRevolutionToRevolution(x,y))"]}
{"id": "eqasc_train_11187", "nl": "Gravitational pull causes alternative day cycles", "fol": "", "prediction": ["all x y.((GravitationalPull(x) & AlternateDayCycle(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_11188", "nl": "Our bodies and senses adjust to the cycle of day and night so that we may work in the day and sleep at night.", "fol": "", "prediction": ["all x y.((Body(x) & Sensor(y)) -> (AdjustsToDayAndNight(x,y) & WorkInDay(x) & SleepAtNight(x)))"]}
{"id": "eqasc_train_11189", "nl": "a planet rotating determines that we work in the day and sleep at night.", "fol": "", "prediction": ["all x.(PlanetRotating(x) -> (WorksInDay(x) & SleepsAtNight(x)))"]}
{"id": "eqasc_train_11190", "nl": "Mars has day and night for the same reasons that Earth has day and night.", "fol": "", "prediction": ["all x y.((Mars(x) & Earth(y)) -> (HasDay(x) & HasNight(x) & HasDay(y) & HasNight(y)))"]}
{"id": "eqasc_train_11191", "nl": "Mars is a rotating planet", "fol": "", "prediction": ["all x.(Mars(x) -> RotatingPlanet(x))"]}
{"id": "eqasc_train_11192", "nl": "Time is movement, the motion of the planet in its rotation and its movement around the sun.", "fol": "", "prediction": ["all x y z.((Time(x) & Planet(y) & Sun(z)) -> (Motion(x,y) & Rotation(y) & MovementAround(x,z)))"]}
{"id": "eqasc_train_11193", "nl": "rotation causes time", "fol": "", "prediction": ["all x.(Rotation(x) -> CausesTime(x))"]}
{"id": "eqasc_train_11194", "nl": "Each planet rotates at a different pace.", "fol": "", "prediction": ["all x.(Planet(x) -> RotatesAtDifferentPace(x))"]}
{"id": "eqasc_train_11195", "nl": "Each planet has different cycles of day and night.", "fol": "", "prediction": ["all x.(Planet(x) -> (HasDayCycle(x) & HasNightCycle(x)))"]}
{"id": "eqasc_train_11196", "nl": "Rotation simply means how long it takes a planet to spin on its axis.", "fol": "", "prediction": ["all x y.((Planet(x) & Axis(y)) -> Rotation(x,y))"]}
{"id": "eqasc_train_11197", "nl": "a planet spinning on its axis causes cycles of day and night on that planet", "fol": "", "prediction": ["all x y.((Planet(x) & SpiningOnAxis(x) & Planet(y)) -> CausesCyclesOfDayAndNight(x,y))"]}
{"id": "eqasc_train_11198", "nl": "Rotation determines day and night, and the length of the day.", "fol": "", "prediction": ["all x.(Rotation(x) -> (DeterminesDay(x) & DeterminesNight(x) & DeterminesDayLength(x)))"]}
{"id": "eqasc_train_11199", "nl": "a planet's rotation is what causes night", "fol": "", "prediction": ["all x.(Planet(x) -> CausesNight(x))"]}
{"id": "eqasc_train_11200", "nl": "Day and night temperatures varied widely.", "fol": "", "prediction": ["all x.(Day(x) & NightTemperature(x)) -> VariatedWidely(x))"]}
{"id": "eqasc_train_11201", "nl": "a planet rotating causes varied  temperatures on that planet", "fol": "", "prediction": ["all x y.((Planet(x) & Planet(y) & Rotating(x,y)) -> CausesVariableTemperatures(x,y))"]}
{"id": "eqasc_train_11202", "nl": "Planets move in elliptical orbits.", "fol": "", "prediction": ["all x.(Planet(x) -> MovesInEllipticalOrbits(x))"]}
{"id": "eqasc_train_11203", "nl": "When something that moves in elliptical orbits rotates, it causes cycles of day and night on it", "fol": "", "prediction": ["all x.((MovesInEllipticalOrbits(x) & Rotates(x)) -> CausesCyclesOfDayAndNight(x))"]}
{"id": "eqasc_train_11204", "nl": "Of all the planets, Mars is most like Earth.", "fol": "", "prediction": ["(all x.(Mars(x) -> Earth(x)))"]}
{"id": "eqasc_train_11205", "nl": "Mars rotating causes cycles of day and night", "fol": "", "prediction": ["all x.(MarsRotating(x) -> (CausesDayAndNightCycles(x) & CausesNightCycles(x)))"]}
{"id": "eqasc_train_11206", "nl": "Testosterone stimulates the reproductive organs to develop into male organs.", "fol": "", "prediction": ["all x y.((Testosterone(x) & ReproductiveOrgan(y)) -> StimulatesToDevelopIntoMaleOrgans(x,y))"]}
{"id": "eqasc_train_11207", "nl": "Testicles are male reproductive organs.", "fol": "", "prediction": ["all x.(Testicle(x) -> MaleReproductiveOrgan(x))"]}
{"id": "eqasc_train_11208", "nl": "Testosterone stimulates the reproductive organs to develop testicles", "fol": "", "prediction": ["all x y z.((Testosterone(x) & ReproductiveOrgan(y) & Testicles(z)) -> StimulatesToDevelop(x,y,z))"]}
{"id": "eqasc_train_11209", "nl": "Main androgen is testosterone.", "fol": "", "prediction": ["all x.(Androgen(x) -> Testosterone(x))"]}
{"id": "eqasc_train_11210", "nl": "adrogens stimulate reproductive organs", "fol": "", "prediction": ["all x y.((Adrogen(x) & ReproductiveOrgan(y)) -> Stimulates(x,y))"]}
{"id": "eqasc_train_11211", "nl": "Male mammals have a tube-like organ called the 'penis'.", "fol": "", "prediction": ["all x.(Mammal(x) -> TubeLikeOrgan(x))"]}
{"id": "eqasc_train_11212", "nl": "testosterone stimulates the reproductive organs to develop a penis", "fol": "", "prediction": ["all x y z.((Testosterone(x) & ReproductiveOrgans(y) & Penis(z)) -> StimulatesToDevelopPenis(x,y,z))"]}
{"id": "eqasc_train_11213", "nl": "If testosterone is present, male external genitalia develop b.", "fol": "", "prediction": ["all x.((Testosterone(x) & Present(x)) -> MaleExternalGenitaliaDevelops(x,b))"]}
{"id": "eqasc_train_11214", "nl": "Testosterone stimulates the reproductive organ to form male genitalia. ", "fol": "", "prediction": ["all x y.((Testosterone(x) & MaleGenitalia(y)) -> StimulatesReproductiveOrgan(x,y))"]}
{"id": "eqasc_train_11215", "nl": "Testosterone causes the penis to develop.", "fol": "", "prediction": ["all x.(Testosterone(x) -> CausesPenisDevelopment(x))"]}
{"id": "eqasc_train_11216", "nl": "Androgens are male hormones, like testosterone.", "fol": "", "prediction": ["all x.(Androgen(x) -> (MaleHydrogen(x) & LikeTestosterone(x)))"]}
{"id": "eqasc_train_11217", "nl": "Male hormones stimulated the reproductive organs to develop into male organs.", "fol": "", "prediction": ["all x y.((MaleHydrogen(x) & MaleOrgan(y)) -> StimulatedReproductiveOrgans(x,y))"]}
{"id": "eqasc_train_11218", "nl": "Examples of anabolic hormones are testosterone and nandrolone.", "fol": "", "prediction": ["all x.(AnabolicHormone(x) -> (Testosterone(x) | Nandrolone(x)))"]}
{"id": "eqasc_train_11219", "nl": "Certain anabolic hormones stimulate the reproductive organs to develop into male organs.", "fol": "", "prediction": ["all x y.((AnabolicHydrogen(x) & ReproductiveOrgan(y)) -> StimulatesToDevelopIntoMaleOrgan(x,y))"]}
{"id": "eqasc_train_11220", "nl": "For men, however, the hormone in question is testosterone.", "fol": "", "prediction": ["all x.((Hydrogen(x) & ForMen(x)) -> Testosterone(x))"]}
{"id": "eqasc_train_11221", "nl": "a hormone stimulates the reproductive organs to develop into male organs", "fol": "", "prediction": ["all x y z.((Hydrogen(x) & ReproductiveOrgan(y) & MaleOrgan(z)) -> StimulatesToDevelops(x,y,z))"]}
{"id": "eqasc_train_11222", "nl": "Viruses are not cells at all, so they are neither prokaryotes nor eukaryotes.", "fol": "", "prediction": ["all x.(Virus(x) -> (-Cell(x) & -Prokaryote(x) & -Eukaryote(x)))"]}
{"id": "eqasc_train_11223", "nl": "Tobacco mosaic is not a cell", "fol": "", "prediction": ["all x.(TobaccoMosque(x) -> -Cell(x))"]}
{"id": "eqasc_train_11224", "nl": "Viruses are not plants.", "fol": "", "prediction": ["all x.(Virus(x) -> -Plant(x))"]}
{"id": "eqasc_train_11225", "nl": "viruses are not bacteria", "fol": "", "prediction": ["all x.(Virus(x) -> -Bacteria(x))"]}
{"id": "eqasc_train_11226", "nl": "Viruses Viruses Viruses are simple units which invade cells.", "fol": "", "prediction": ["all x.(Virus(x) -> (Virus(x) & SimpleUnit(x) & InvadesCells(x)))"]}
{"id": "eqasc_train_11227", "nl": "Viruses are simple units which are neither prokaryotes nor eukaryotes", "fol": "", "prediction": ["all x.(Virus(x) -> (SimpleUnit(x) & -(Prokaryote(x) | Eukaryote(x)))))"]}
{"id": "eqasc_train_11228", "nl": "influenza is not a cell", "fol": "", "prediction": ["all x.(Influenza(x) -> -Cell(x))"]}
{"id": "eqasc_train_11229", "nl": "Influenza orthomyxoviruses are not cells, so they are neither prokaryotes nor eukaryotes", "fol": "", "prediction": ["all x.(InfluenzaOrthomyxovirus(x) -> (-Cell(x) & -Prokaryotes(x) & -Eukaryotes(x)))"]}
{"id": "eqasc_train_11230", "nl": "The smallest agents of disease are not cells at all, so they are neither prokaryotes nor eukaryotes.", "fol": "", "prediction": ["all x.((Agent(x) & Smallest(x)) -> (-Cells(x) & -Prokaryotes(x) & -Eukaryotes(x)))"]}
{"id": "eqasc_train_11231", "nl": "a black hole is formed by a high-mass star collapses", "fol": "", "prediction": ["all x y.((BlackHole(x) & HighMassStar(y) & Collapses(x,y)) -> FormedBy(x,y))"]}
{"id": "eqasc_train_11232", "nl": "If a star has a mass larger than 25 solar masses, it collapses into a black hole.", "fol": "", "prediction": ["all x.((Star(x) & MassLargerThan25SolarMasses(x)) -> CollapsesIntoBlackHole(x))"]}
{"id": "eqasc_train_11233", "nl": "Black holes are formed by stars that have mass larger than 25 solar masses.", "fol": "", "prediction": ["all x.(BlackHole(x) -> (FormedByStars(x) & MassLargerThan25SolarMasses(x)))"]}
{"id": "eqasc_train_11234", "nl": "Collapsed stars are dead stars.", "fol": "", "prediction": ["all x.(CollapsedStar(x) -> DeadStar(x))"]}
{"id": "eqasc_train_11235", "nl": "a black hole is formed by high-mass dead stars", "fol": "", "prediction": ["all x y.((BlackHole(x) & HighMassDeadStar(y)) -> FormedBy(x,y))"]}
{"id": "eqasc_train_11236", "nl": "Black hole excites astronomers.", "fol": "", "prediction": ["all x.(BlackHole(x) -> ExcitesAstronomers(x))"]}
{"id": "eqasc_train_11237", "nl": "high-mass stars collapsing excites astronomers", "fol": "", "prediction": ["all x y.((HighMassStar(x) & Astronomer(y) & Collapsing(x)) -> Excites(y))"]}
{"id": "eqasc_train_11238", "nl": "Essentially, a black hole is a gravity drain.", "fol": "", "prediction": ["all x.(BlackHole(x) -> GravityDrain(x))"]}
{"id": "eqasc_train_11239", "nl": "a gravity drain is formed by a high-mass star collapses", "fol": "", "prediction": ["all x y.((GravityDrain(x) & HighMassStarCollapse(y)) -> FormedBy(x,y))"]}
{"id": "eqasc_train_11240", "nl": "Black holes are formed from dead stars.", "fol": "", "prediction": ["all x.(BlackHole(x) -> FormedFromDeadStars(x))"]}
{"id": "eqasc_train_11241", "nl": "Black holes are considered to be spheres.", "fol": "", "prediction": ["all x.(BlackHole(x) -> Spherical(x))"]}
{"id": "eqasc_train_11242", "nl": "high-mass stars collapsing forms a sphere", "fol": "", "prediction": ["all x y.((HighMassStar(x) & Collapsing(x) & FormsSphere(y)) -> HighMassStarCollapsing(x))"]}
{"id": "eqasc_train_11243", "nl": "Then, gravity collapses the star.", "fol": "", "prediction": ["all x y.((Gravity(x) & Star(y)) -> Collapses(x,y))"]}
{"id": "eqasc_train_11244", "nl": "gravity causes black holes", "fol": "", "prediction": ["all x.(GravityCausesBlackHoles(x) -> CausesBlackHoles(x))"]}
{"id": "eqasc_train_11245", "nl": "Black Holes Black holes are the inevitable conclusion of Einstein's General Theory of Relativity.", "fol": "", "prediction": ["all x.(BlackHole(x) -> (InevitableConclusionOfGeneralTheoryOfRelativity(x) & Einstein(x)))"]}
{"id": "eqasc_train_11246", "nl": "When a high-mass star collapses, it fulfills the inevitable conclusion Einstein's General Theory of relativity.", "fol": "", "prediction": ["all x.((HighMassStar(x) & Collapses(x)) -> FulfillsUnexpectedConclusion(x,EinsteinsGeneralTheoryOfRelativity))"]}
{"id": "eqasc_train_11247", "nl": "Somewhat suprisingly high mass stars live for less time than low mass stars.", "fol": "", "prediction": ["exists x.(HighMassStar(x) & SuprisinglyHighMassStar(x) & LowMassStar(x))"]}
{"id": "eqasc_train_11248", "nl": "Black holes form from stars with relatively short lives", "fol": "", "prediction": ["all x y z.((BlackHole(x) & Star(y) & Star(z) & RelativelyShortLives(y)) -> FormsFrom(x,y,z))"]}
{"id": "eqasc_train_11249", "nl": "Bigger mass means smaller star.", "fol": "", "prediction": ["all x.(BiggerMass(x) -> SmallerStar(x))"]}
{"id": "eqasc_train_11250", "nl": "a black hole is formed by a smaller diameter star", "fol": "", "prediction": ["all x y.((BlackHole(x) & SmallerDiameterStar(y)) -> FormedBy(x,y))"]}
{"id": "eqasc_train_11251", "nl": "if the Sun collapses it can form a black hole", "fol": "", "prediction": ["all x y.((Sun(x) & SunCollapses(x)) -> CanFormBlackHole(y))"]}
{"id": "eqasc_train_11252", "nl": "Stars are on an outermost celestial sphere.", "fol": "", "prediction": ["all x.(Star(x) -> OutermostCelestialSphere(x))"]}
{"id": "eqasc_train_11253", "nl": "A black hole is formed when a high mass celestial body collapses.", "fol": "", "prediction": ["all x.((HighMassCelestialBody(x) & Collapses(x)) -> BlackHole(x))"]}
{"id": "eqasc_train_11254", "nl": "cooking food requires adding heat energy", "fol": "", "prediction": ["all x.(CookingFood(x) -> AddsHeatEnergy(x))"]}
{"id": "eqasc_train_11255", "nl": "cooking food removes bacteria", "fol": "", "prediction": ["all x y.((CookingFood(x) & Bacteria(y)) -> Removes(x,y))"]}
{"id": "eqasc_train_11256", "nl": "Heat is essentially the source of energy.", "fol": "", "prediction": ["all x.(Heat(x) -> SourceOfEnergy(x))"]}
{"id": "eqasc_train_11257", "nl": "Cooking food requires adding the source of energy.", "fol": "", "prediction": ["all x.(CookingFood(x) -> AddsSourceOfEnergy(x))"]}
{"id": "eqasc_train_11258", "nl": "heat energy destroys bacteria", "fol": "", "prediction": ["all x.((HeatEnergy(x) & Bacteria(x)) -> Disrupts(x,Bacteria,Bacteria))"]}
{"id": "eqasc_train_11259", "nl": "Fresh meat is a perishable food.", "fol": "", "prediction": ["all x.(FreshMeat(x) -> PerishableFood(x))"]}
{"id": "eqasc_train_11260", "nl": "cooking meat requires adding heat energy", "fol": "", "prediction": ["all x.(CookingMeat(x) -> AddsHeatEnergy(x))"]}
{"id": "eqasc_train_11261", "nl": "Electrical energy ultimately becomes heat energy.", "fol": "", "prediction": ["all x.(ElectricalEnergy(x) -> HeatEnergy(x))"]}
{"id": "eqasc_train_11262", "nl": "Electrical energy can be used to cook food", "fol": "", "prediction": ["all x y.((ElectricalEnergy(x) & Food(y)) -> Cooks(x,y))"]}
{"id": "eqasc_train_11263", "nl": "Metals conduct heat energy .", "fol": "", "prediction": ["all x.(Metal(x) -> ConductsHeatEnergy(x))"]}
{"id": "eqasc_train_11264", "nl": "Food can be cooked on metal.", "fol": "", "prediction": ["all x.(Food(x) -> CanBeCookedOnMetal(x))"]}
{"id": "eqasc_train_11265", "nl": "humans add heat energy to their food", "fol": "", "prediction": ["all x y.((Human(x) & Food(y)) -> AddsHeatEnergyTo(x,y))"]}
{"id": "eqasc_train_11266", "nl": "Heat energy makes digestion easier.", "fol": "", "prediction": ["all x.(HeatEnergy(x) -> MakesDigestionEasier(x))"]}
{"id": "eqasc_train_11267", "nl": "if heat is conducted to an object then that object will become hot", "fol": "", "prediction": ["all x y.((Heat(x) & HeatConductedTo(x,y)) -> HotObject(y))"]}
{"id": "eqasc_train_11268", "nl": "Metals conduct heat well.", "fol": "", "prediction": ["all x.(Metal(x) -> ConductsHeatWell(x))"]}
{"id": "eqasc_train_11269", "nl": "metals are good conductors", "fol": "", "prediction": ["all x.(Metal(x) -> GoodConductor(x))"]}
{"id": "eqasc_train_11270", "nl": "metal can make objects heat up well", "fol": "", "prediction": ["all x.(Metal(x) -> HeatsUp(x))"]}
{"id": "eqasc_train_11271", "nl": "If heat is applied to metal then it will become hot.", "fol": "", "prediction": ["all x.((HeatApplied(x) & Metal(x)) -> Hot(x))"]}
{"id": "eqasc_train_11272", "nl": "Metals become hot readily", "fol": "", "prediction": ["all x.(Metal(x) -> Hot(x))"]}
{"id": "eqasc_train_11273", "nl": "Most metallic objects are manufactured from alloys.", "fol": "", "prediction": ["all x.(MetallicObject(x) -> ManufacturedFromAlloys(x))"]}
{"id": "eqasc_train_11274", "nl": "If heat is conducted to an alloy then that alloy will become hot.", "fol": "", "prediction": ["all x y.((Heat(x) & Alloy(y) & ConductsTo(x,y)) -> Hot(y))"]}
{"id": "eqasc_train_11275", "nl": "Metals vary in their capacity to conduct heat.", "fol": "", "prediction": ["all x.(Metal(x) -> (VariatesInCapacityToConductHeat(x)))"]}
{"id": "eqasc_train_11276", "nl": "heated metals will become hot ", "fol": "", "prediction": ["all x.(HeatedMetal(x) -> HeatsUp(x))"]}
{"id": "eqasc_train_11277", "nl": "Conductive heat transfer is excellent.", "fol": "", "prediction": ["all x.(ConductiveHeatTransfer(x) -> Excellent(x))"]}
{"id": "eqasc_train_11278", "nl": "When heat trasnsfers to an object, the object becomes hot.", "fol": "", "prediction": ["all x y.((HeatTransfer(x) & Object(y)) -> Hot(y))"]}
{"id": "eqasc_train_11279", "nl": "Because the surface of the ocean is heated by sunlight, the depths are cooler.", "fol": "", "prediction": ["all x.((OceanSurface(x) & HeatsBySunlight(x)) -> CoolerDepths(x))"]}
{"id": "eqasc_train_11280", "nl": "if sunlight is conducted to the surface of the ocean then it will become hot", "fol": "", "prediction": ["all x y.((Sunlight(x) & OceanSurface(y) & ConductedTo(x,y)) -> Hot(x))"]}
{"id": "eqasc_train_11281", "nl": "If energy is conducted to an object than that object will become hot.", "fol": "", "prediction": ["all x y.((Energy(x) & Object(y) & ConductedTo(x,y)) -> Hot(y))"]}
{"id": "eqasc_train_11282", "nl": "Metals conduct heat and electricity easily.", "fol": "", "prediction": ["all x.(Metal(x) -> (ConductsHeat(x) & ConductsElectricity(x)))"]}
{"id": "eqasc_train_11283", "nl": "Metal can transfer heat to an object to make it hot", "fol": "", "prediction": ["all x y.((Metal(x) & Object(y)) -> (TransfersHeatTo(x,y) & MakesHot(x,y)))"]}
{"id": "eqasc_train_11284", "nl": "Hot apparatus causes burns.", "fol": "", "prediction": ["all x.(HotAppliance(x) -> CausesBurns(x))"]}
{"id": "eqasc_train_11285", "nl": "if heat is conducted to an object then that object will cause burns", "fol": "", "prediction": ["all x y.((Heat(x) & HeatConductedTo(x,y)) -> CausesBurns(x,y))"]}
{"id": "eqasc_train_11286", "nl": "Hot objects emit more energy than cold objects.", "fol": "", "prediction": ["all x y.((HotObject(x) & ColdObject(y)) -> EmitsMoreEnergy(x,y))"]}
{"id": "eqasc_train_11287", "nl": "if heat is conducted to an object that object will emit more energy", "fol": "", "prediction": ["all x y.((Heat(x) & Heat(y) & ConductsTo(x,y)) -> EmitsMoreEnergy(x,y))"]}
{"id": "eqasc_train_11288", "nl": "Air conducts heat poorly.", "fol": "", "prediction": ["all x.(Air(x) -> ConductsHeatPoorly(x))"]}
{"id": "eqasc_train_11289", "nl": "air does not accept heat very well", "fol": "", "prediction": ["all x.(Air(x) -> -AccommodatesHeat(x))"]}
{"id": "eqasc_train_11290", "nl": "Heat conduction in rocks is very slow.", "fol": "", "prediction": ["all x.(Rock(x) -> HeatConductionSlow(x))"]}
{"id": "eqasc_train_11291", "nl": "rocks become hot very slow", "fol": "", "prediction": ["all x.(Rock(x) -> Hot(x))"]}
{"id": "eqasc_train_11292", "nl": "cold fronts cause thunderstorms as they pass by", "fol": "", "prediction": ["all x.((ColdFront(x) & PassesBy(x)) -> CausesThunderstorms(x))"]}
{"id": "eqasc_train_11293", "nl": "If cold air is advancing on warm air, the front is called a cold front.", "fol": "", "prediction": ["all x.((ColdAir(x) & WarmAir(x)) -> ColdFront(x))"]}
{"id": "eqasc_train_11294", "nl": "Cold air advancing on warm air cause thunderstorms.", "fol": "", "prediction": ["all x y.((ColdAir(x) & WarmAir(y)) -> CausesThunderstorms(x))"]}
{"id": "eqasc_train_11295", "nl": "All thunderstorms produce lightning.", "fol": "", "prediction": ["all x.(Thunderstorm(x) -> ProducesLightning(x))"]}
{"id": "eqasc_train_11296", "nl": "Cold fronts cause lightning.", "fol": "", "prediction": ["all x.(ColdFront(x) -> CausesLightning(x))"]}
{"id": "eqasc_train_11297", "nl": "Thunderstorms are caused when cold air advances on warm air. ", "fol": "", "prediction": ["all x.(Thunderstorm(x) -> (CausesColdAir(x) & WarmAir(x)))"]}
{"id": "eqasc_train_11298", "nl": "Thunderstorms Thunderstorms give birth to tornadoes.", "fol": "", "prediction": ["all x.(Thunderstorm(x) -> GivesBirthToTornadoes(x))"]}
{"id": "eqasc_train_11299", "nl": "Cold fronts can give birth to tornadoes.", "fol": "", "prediction": ["all x.(ColdFront(x) -> GivesBirthToTornadoes(x))"]}
{"id": "eqasc_train_11300", "nl": "Cold air advancing on warm air can cause a thunderstorm to occur.", "fol": "", "prediction": ["all x.((ColdAir(x) & WarmAir(x)) -> CanCauseThunderstorm(x))"]}
{"id": "eqasc_train_11301", "nl": "If cold air replaces warm air, it is called a cold front.", "fol": "", "prediction": ["all x.((ColdAir(x) & ReplacesWarmAir(x)) -> ColdFront(x))"]}
{"id": "eqasc_train_11302", "nl": "If cold air replaces warm air, it causes thunderstorms", "fol": "", "prediction": ["all x.((ColdAir(x) & ReplacesWarmAir(x)) -> CausesThunderstorms(x))"]}
{"id": "eqasc_train_11303", "nl": "Lightning Occurs with ALL thunderstorms.", "fol": "", "prediction": ["all x.(Lightning(x) -> OccursWith(x,Tornado))"]}
{"id": "eqasc_train_11304", "nl": "Cold fronts cause lightning as they pass by", "fol": "", "prediction": ["all x.((ColdFront(x) & Pass(x)) -> CausesLightning(x))"]}
{"id": "eqasc_train_11305", "nl": "Cold Fronts Cold Fronts Cold fronts are usually associated with depressions .", "fol": "", "prediction": ["all x.(ColdFront(x) -> (ColdFront(x) & Depression(x)))"]}
{"id": "eqasc_train_11306", "nl": "Depressions can be associated with thunderstorms", "fol": "", "prediction": ["all x y.((Depression(x) & Thunderstorm(y)) -> AssociatedWith(x,y))"]}
{"id": "eqasc_train_11307", "nl": "After the cold front passes, be prepared for clear, cold days ahead.", "fol": "", "prediction": ["all x.(ColdFrontPasses(x) -> PrepareForClearColdDays(x))"]}
{"id": "eqasc_train_11308", "nl": "be prepared for clear, cold days after thunderstorms", "fol": "", "prediction": ["all x.((Thunderstorm(x) & ClearColdDays(x)) -> PreparedFor(x,y))"]}
{"id": "eqasc_train_11309", "nl": "Thunderstorms and lightning Lightning often accompanies thunderstorms.", "fol": "", "prediction": ["all x y.((Thunderstorm(x) & Lightning(y)) -> Accompanies(x,y))"]}
{"id": "eqasc_train_11310", "nl": "cold fronts cause lightning", "fol": "", "prediction": ["all x.((ColdFront(x) & CausesLightning(x)) -> CausesLightning(x))"]}
{"id": "eqasc_train_11311", "nl": "Fog is common in the cold air ahead of the front.", "fol": "", "prediction": ["all x.(Fog(x) -> CommonInColdAir(x))"]}
{"id": "eqasc_train_11312", "nl": "fog is common before thunderstorms", "fol": "", "prediction": ["all x y.((Fog(x) & Thunderstorm(y)) -> CommonBefore(x,y))"]}
{"id": "eqasc_train_11313", "nl": "Cold fronts cause tornadoes ", "fol": "", "prediction": ["all x y.((ColdFront(x) & Tornado(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_11314", "nl": "Fronts boundaries between air masses Fronts are boundaries between air masses .", "fol": "", "prediction": ["all x y.((Front(x) & AirMass(y)) -> Border(x,y))"]}
{"id": "eqasc_train_11315", "nl": "boundaries between air masses can cause thunderstorms as they pass by", "fol": "", "prediction": ["all x y.((AirMass(x) & AirMass(y)) -> CausesThunderstorms(x,y))"]}
{"id": "eqasc_train_11316", "nl": "Thunderstorms create havoc.", "fol": "", "prediction": ["all x.(Thunderstorm(x) -> CreatesHavoc(x))"]}
{"id": "eqasc_train_11317", "nl": "cold fronts cause havoc", "fol": "", "prediction": ["all x.(ColdFront(x) -> CausesHavoc(x))"]}
{"id": "eqasc_train_11318", "nl": "the mass of an object causes the gravitational force exerted by that object", "fol": "", "prediction": ["all x y.((MassOfObject(x) & GravitationalForce(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_11319", "nl": "If an object has weight it necessarily has mass.", "fol": "", "prediction": ["all x.((Object(x) & HasWeight(x)) -> HasMass(x))"]}
{"id": "eqasc_train_11320", "nl": "The weight of an object causes the gravitational force exerted by that object.", "fol": "", "prediction": ["all x y.((Object(x) & Weight(y)) -> CausesGravitationalForce(x,y))"]}
{"id": "eqasc_train_11321", "nl": "the mass of an asteroid caused the gravitational force exerted by that asteroid", "fol": "", "prediction": ["all x y.((Asteroid(x) & Mass(y)) -> CausedGravitationalForce(x,y))"]}
{"id": "eqasc_train_11322", "nl": "Weights A measure of the heaviness or mass of an object is the object's weight.", "fol": "", "prediction": ["all x.((MeasuresHeavinessOrMass(x) & Object(x)) -> Weight(x))"]}
{"id": "eqasc_train_11323", "nl": "An item's weight causes its gravitational force.", "fol": "", "prediction": ["all x.(Weight(x) -> CausesGravitationalForce(x))"]}
{"id": "eqasc_train_11324", "nl": "Gravitational mass and inertial mass are identical.", "fol": "", "prediction": ["all x.((GravitationalMass(x) & InertialMass(x)) -> Identical(x))"]}
{"id": "eqasc_train_11325", "nl": "The mass of an object causes force exerted by the object which can be described as inertial mass", "fol": "", "prediction": ["all x y.((Mass(x) & Object(y)) -> CausesForce(x,y))"]}
{"id": "eqasc_train_11326", "nl": "All gravitational forces are attractive, there is no repulsive gravitational force.", "fol": "", "prediction": ["all x.(GravitationalForce(x) -> (Attractive(x) & -RepulsiveGravitationalForce(x)))"]}
{"id": "eqasc_train_11327", "nl": "the mass of an object are attractive there is no repulsive", "fol": "", "prediction": ["all x y.((Mass(x) & Object(y) & Attractive(x,y)) -> -Repulsive(x))"]}
{"id": "eqasc_train_11328", "nl": "Gravitation is a constant impelling force.", "fol": "", "prediction": ["all x.(Gravitation(x) -> ImpellingForce(x))"]}
{"id": "eqasc_train_11329", "nl": "The mass of an object causes a constant impelling force.", "fol": "", "prediction": ["all x y.((Mass(x) & Object(y)) -> CausesConstantImppellingForce(x,y))"]}
{"id": "eqasc_train_11330", "nl": "gravitational force accelerates objects", "fol": "", "prediction": ["all x y.((GravitationalForce(x) & Object(y)) -> Accelerates(x,y))"]}
{"id": "eqasc_train_11331", "nl": "the mass of an object causes the attractive force exerted by that object", "fol": "", "prediction": ["all x y.((MassOfObject(x) & MassOfObject(y)) -> CausesAttractiveForce(x,y))"]}
{"id": "eqasc_train_11332", "nl": "Gravity is the force that keeps the earth in orbit about our sun.", "fol": "", "prediction": ["all x.(Gravity(x) -> KeepsEarthInOrbitAboutSun(x))"]}
{"id": "eqasc_train_11333", "nl": "the mass of the sun causes its gravity on Earth", "fol": "", "prediction": ["all x y.((MassOfSun(x) & Earth(y)) -> CausesGravityOn(x,y))"]}
{"id": "eqasc_train_11334", "nl": "Gravitation is a universal force of attraction acting between all matter.", "fol": "", "prediction": ["all x.(Gravitation(x) -> (UniversalForceOfAttraction(x) & ActsBetweenAllMatter(x)))"]}
{"id": "eqasc_train_11335", "nl": "the mass of an object causes the attraction exerted by that object", "fol": "", "prediction": ["all x y.((MassOfObject(x) & MassOfObject(y)) -> CausesAttraction(x,y))"]}
{"id": "eqasc_train_11336", "nl": "Alternation of generations allows for both asexual and sexual reproduction.", "fol": "", "prediction": ["all x.(AlternationOfGenerations(x) -> (AsexualReproduction(x) & SexualReproduction(x)))"]}
{"id": "eqasc_train_11337", "nl": "Plants have an alternation of generations.", "fol": "", "prediction": ["all x.(Plant(x) -> AlterationOfGenerations(x))"]}
{"id": "eqasc_train_11338", "nl": "plants allow for both asexual and sexual reproduction", "fol": "", "prediction": ["all x.(Plant(x) -> (AsexualReproduction(x) & SexualReproduction(x)))"]}
{"id": "eqasc_train_11339", "nl": "ferns have both asexual and sexual reproduction", "fol": "", "prediction": ["all x.(Fern(x) -> (AsexualReproduction(x) & SexualReproduction(x)))"]}
{"id": "eqasc_train_11340", "nl": "Asexual reproduction gives offspring similar to parents.", "fol": "", "prediction": ["all x y.((AsexualReproduction(x) & Offspring(y)) -> GivesSameToParents(x,y))"]}
{"id": "eqasc_train_11341", "nl": "Alternation of generations allows for different methods of producing offspring.", "fol": "", "prediction": ["all x.(AlternationOfGenerations(x) -> AllowsDifferentMethodsOfProduction(x))"]}
{"id": "eqasc_train_11342", "nl": "Advantages and disadvantages of sexual as opposed to asexual means of reproduction.", "fol": "", "prediction": ["all x y.((Sexual(x) & Asexual(y)) -> (Advantages(x,y) & Disadvantages(x,y)))"]}
{"id": "eqasc_train_11343", "nl": "Alternation of generations allows for using the most advantageous type of reproduction.", "fol": "", "prediction": ["all x.(AlternationOfGenerations(x) -> AllowsUseOfAdvorableReproduction(x))"]}
{"id": "eqasc_train_11344", "nl": "If a single base is altered, a point mutation is generated.", "fol": "", "prediction": ["all x.((SingleBase(x) & Altered(x)) -> PointMutation(x))"]}
{"id": "eqasc_train_11345", "nl": "a point mutation allows for both asexual and sexual reproduction", "fol": "", "prediction": ["all x.(PointMutation(x) -> (AsexualReproduction(x) & SexualReproduction(x)))"]}
{"id": "eqasc_train_11346", "nl": "Plants reproduce both sexually and asexually.", "fol": "", "prediction": ["all x.(Plant(x) -> (ReproducesSexually(x) & ReproducesAsexually(x)))"]}
{"id": "eqasc_train_11347", "nl": "plants undergo alternation of generations", "fol": "", "prediction": ["all x.(Plant(x) -> UndergoesAlternationOfGenerations(x))"]}
{"id": "eqasc_train_11348", "nl": "Reproduction is asexual by budding, or sexual.", "fol": "", "prediction": ["all x.(Reproduction(x) -> (AsexualBirth(x) | Sexual(x)))"]}
{"id": "eqasc_train_11349", "nl": "Alternation of generations allows for budding", "fol": "", "prediction": ["all x.(AlternationOfGenerations(x) -> AllowsBadding(x))"]}
{"id": "eqasc_train_11350", "nl": "Reproduction Organisms create young of their species by reproduction.", "fol": "", "prediction": ["all x.(ReproductionOrganism(x) -> (CreatesYoungOfSpecies(x) & ReproductionOrganism(x)))"]}
{"id": "eqasc_train_11351", "nl": "Alternation of generations allows for creating young by asexual and sexual means.", "fol": "", "prediction": ["all x.(AlternationOfGenerations(x) -> (CreatesYoungByAsexualAndSexualMeans(x)))"]}
{"id": "eqasc_train_11352", "nl": "Mollusks reproduce sexually.", "fol": "", "prediction": ["all x.(Mollusk(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_11353", "nl": "Snails reproduce sexually", "fol": "", "prediction": ["all x.(Snail(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_11354", "nl": "squids reproduce sexually.", "fol": "", "prediction": ["all x.(Squid(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_11355", "nl": "Snails reproduce sexually.", "fol": "", "prediction": ["all x.(Snail(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_11356", "nl": "Mollusks are the dominant invertebrate.", "fol": "", "prediction": ["all x.(Mollusk(x) -> (DominantInvertebrate(x) & Invertebrate(x)))"]}
{"id": "eqasc_train_11357", "nl": "dominant invertebrate reproduce sexually", "fol": "", "prediction": ["all x.(DominantInvertebrate(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_11358", "nl": "clams reproduce sexually", "fol": "", "prediction": ["all x.(Cim(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_11359", "nl": "the second-largest invertebrate group reproduce sexually", "fol": "", "prediction": ["all x.((InvertebrateGroup(x) & SecondLargest(x)) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_11360", "nl": "Some mollusks have a shell.", "fol": "", "prediction": ["exists x.(Mollusk(x) & HasShell(x))"]}
{"id": "eqasc_train_11361", "nl": "some animals with shells reproduce sexually", "fol": "", "prediction": ["exists x.(Animal(x) & HasShells(x) & ReproducesSexually(x))"]}
{"id": "eqasc_train_11362", "nl": "Squids reproduce sexually.", "fol": "", "prediction": ["all x.(Squid(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_11363", "nl": "abalone reproduce sexually", "fol": "", "prediction": ["all x.(Abalone(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_11364", "nl": "Squids produce sexually.", "fol": "", "prediction": ["all x.(Squid(x) -> ProducesSexually(x))"]}
{"id": "eqasc_train_11365", "nl": "Abalone reproduce sexually.", "fol": "", "prediction": ["all x.(Abalone(x) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_11366", "nl": "the dominant invertebrate reproduces sexually", "fol": "", "prediction": ["all x.((Invertebrate(x) & Dominant(x)) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_11367", "nl": "All cells share some of the same structures and basic functions.", "fol": "", "prediction": ["all x.(Cell(x) -> (ShareStructure(x) & ShareBasicFunctions(x)))"]}
{"id": "eqasc_train_11368", "nl": "Hair cells are also a type of skin cell.", "fol": "", "prediction": ["all x.(HairCell(x) -> SkinCell(x))"]}
{"id": "eqasc_train_11369", "nl": "hair and skin share some of the same structures and basic functions", "fol": "", "prediction": ["all x y.((Hair(x) & Skin(y)) -> (SharesStructures(x,y) & SharesBasicFunctions(x,y)))"]}
{"id": "eqasc_train_11370", "nl": "Biological structures are too complex.", "fol": "", "prediction": ["all x.(BiologicalStructure(x) -> TooComplex(x))"]}
{"id": "eqasc_train_11371", "nl": "Cells are complex but all share basic functions.", "fol": "", "prediction": ["all x.(Cell(x) -> (Complex(x) & ShareBasicFunctions(x)))"]}
{"id": "eqasc_train_11372", "nl": "hair and skin shares some of the same structures and basic functions", "fol": "", "prediction": ["all x y.((Hair(x) & Skin(y)) -> SharesStructuresAndBasicFunctions(x,y))"]}
{"id": "eqasc_train_11373", "nl": "The basic building blocks of life share some of the same structures and basic functions", "fol": "", "prediction": ["all x y.((BasicBuildingBlock(x) & Life(y)) -> SharesStructuresAndBasicFunctions(x,y))"]}
{"id": "eqasc_train_11374", "nl": "First, a eukaryote is a cell with a nucleus.", "fol": "", "prediction": ["all x.(Eukaryote(x) -> (CellWithNucleus(x)))"]}
{"id": "eqasc_train_11375", "nl": "eukaryotes share some of the same structures and basic functions", "fol": "", "prediction": ["all x.(Eukaryote(x) -> (ShareStructures(x) & ShareBasicFunctions(x)))"]}
{"id": "eqasc_train_11376", "nl": "Inside the cell is a structure called the nucleus.", "fol": "", "prediction": ["all x.(InsideCell(x) -> Nucleus(x))"]}
{"id": "eqasc_train_11377", "nl": "All nucleus share the same basic functions", "fol": "", "prediction": ["all x.(Nucleus(x) -> ShareBasicFunctions(x))"]}
{"id": "eqasc_train_11378", "nl": "Basically the process is pretty simple.", "fol": "", "prediction": ["all x.(Process(x) -> PrettySimple(x))"]}
{"id": "eqasc_train_11379", "nl": "All cells share some of the same structures and simple processes", "fol": "", "prediction": ["all x.(Cell(x) -> (ShareStructures(x) & ShareSimpleProcesses(x)))"]}
{"id": "eqasc_train_11380", "nl": "Cells are also the basic functioning unit of life.", "fol": "", "prediction": ["all x.(Cell(x) -> BasicFunctioningUnitOfLife(x))"]}
{"id": "eqasc_train_11381", "nl": "The basic functioning unit of life all share the same structures.", "fol": "", "prediction": ["all x.(BasicFunctioningUnitOfLife(x) -> ShareSameStructures(x))"]}
{"id": "eqasc_train_11382", "nl": "Antigens are molecules that the immune system recognizes as foreign to the body.", "fol": "", "prediction": ["all x.(Antigen(x) -> (Molecule(x) & RecognizesFrequentToBody(x)))"]}
{"id": "eqasc_train_11383", "nl": "Immunology is the study of the immune system.", "fol": "", "prediction": ["all x.(Immunology(x) -> StudiesImmuneSystem(x))"]}
{"id": "eqasc_train_11384", "nl": "Immunology includes the study of antigens.", "fol": "", "prediction": ["all x.(Immunology(x) -> StudiesAntigens(x))"]}
{"id": "eqasc_train_11385", "nl": "Antigens are expressed by cancer cells.", "fol": "", "prediction": ["all x.(Antigen(x) -> ExpressedByCancerCells(x))"]}
{"id": "eqasc_train_11386", "nl": "the immune system can recognize cancer as foreign to the body", "fol": "", "prediction": ["all x y.((ImmuneSystem(x) & Cancer(y)) -> CanRecognizeForeignToBody(x,y))"]}
{"id": "eqasc_train_11387", "nl": "An allergy is a reaction to a substance the body recognizes as foreign.", "fol": "", "prediction": ["all x.(Allergy(x) -> (ReactionToSubstance(x) & BodyRecognizesAsFrench(x)))"]}
{"id": "eqasc_train_11388", "nl": "Antigens are molecules that can cause an allergy", "fol": "", "prediction": ["all x.(Antigen(x) -> (Molecule(x) & CausesAllergy(x)))"]}
{"id": "eqasc_train_11389", "nl": "When the immune system recognizes a foreign substance, antibodies are produced", "fol": "", "prediction": ["all x y.((ImmuneSystem(x) & ForeignSubstance(y) & Recognizes(x,y)) -> ProducesAntibodies(x))"]}
{"id": "eqasc_train_11390", "nl": "Antibodies respond to antigens by latching on to, or binding with, the antigens.", "fol": "", "prediction": ["all x y.((Antibody(x) & Antigen(y)) -> (ResponsesTo(x,y) & (LatchOn(x,y) | BindWith(x,y))))"]}
{"id": "eqasc_train_11391", "nl": "Antibodies responds to molecules that the immune system recognizes as foreign to the body by latching on to them", "fol": "", "prediction": ["all x y z.((Antibodies(x) & Molecule(y) & ImmuneSystem(z) & RecognizesForeignToBody(x,y,z)) -> LatchOnTo(x,y,z))"]}
{"id": "eqasc_train_11392", "nl": "Rejection is a normal reaction of the body to a foreign object.", "fol": "", "prediction": ["all x y.((Body(x) & ForeignObject(y)) -> NormalReactionTo(x,y))"]}
{"id": "eqasc_train_11393", "nl": "Antigens are molecules that the immune system recognizes as needing to be rejected from the body", "fol": "", "prediction": ["all x y.((Antigen(x) & ImmuneSystem(y)) -> (Molecule(x) & Recognizes(x,y) & RequiresRejection(x,y)))"]}
{"id": "eqasc_train_11394", "nl": "Antigens prompt the body to produce antibodies.", "fol": "", "prediction": ["all x.(Antigen(x) -> PromptsBodyToProduceAntibodies(x))"]}
{"id": "eqasc_train_11395", "nl": "Antigens are molecules that prompt the production of antibodies.", "fol": "", "prediction": ["all x.(Antigen(x) -> PromptsProductionOfAntibodies(x))"]}
{"id": "eqasc_train_11396", "nl": "Bodies are physical entities.", "fol": "", "prediction": ["all x.(Bodies(x) -> PhysicalEntity(x))"]}
{"id": "eqasc_train_11397", "nl": "Antigens are molecules that the immune system recognizes as foreign to the physical entity.", "fol": "", "prediction": ["all x.(Antigen(x) -> (Molecule(x) & RecognizesFreshToPhysicalEntity(x)))"]}
{"id": "eqasc_train_11398", "nl": "An antigen is a molecule of carbohydrate or protein.", "fol": "", "prediction": ["all x.(Antigen(x) -> (Carbohydrate(x) | Protein(x)))"]}
{"id": "eqasc_train_11399", "nl": "  A molecule of carbohydrate or protein molecule the immune system recognizes as foreign to the body.", "fol": "", "prediction": ["all x.((Molecule(x) & (Carbohydrate(x) | Protein(x))) -> RecognizedByImmuneSystem(x))"]}
{"id": "eqasc_train_11400", "nl": "Children are born with an immature immune, or defense, system.", "fol": "", "prediction": ["all x.(Child(x) -> (Immune(x) | Defense(x)))"]}
{"id": "eqasc_train_11401", "nl": "Antigens are molecules that the defense system recognizes as foreign to the body", "fol": "", "prediction": ["all x y.((Antigen(x) & DefenseSystem(y)) -> (Molecule(x,y) & RecognizesFrenchToBody(x,y)))"]}
{"id": "eqasc_train_11402", "nl": "Yes, foreigners are called Aliens.", "fol": "", "prediction": ["all x.((French(x) & Aliens(x)) -> CanBeIdentified(x))"]}
{"id": "eqasc_train_11403", "nl": "Antigens are molecules that the immune system recognizes as alien to the body.", "fol": "", "prediction": ["all x.(Antigen(x) -> (Molecule(x) & RecognizesAlienToBody(x)))"]}
{"id": "eqasc_train_11404", "nl": "Another such HPV antigen is the E6 antigen.", "fol": "", "prediction": ["all x.(HPVAntigen(x) -> E6Antigen(x))"]}
{"id": "eqasc_train_11405", "nl": "HPV is recognized as foreign to the body by the immune system", "fol": "", "prediction": ["all x y.((HPV(x) & ImmuneSystem(y)) -> RecognizedAsFrequentToBody(x,y))"]}
{"id": "eqasc_train_11406", "nl": "Molecules are a group of atoms.", "fol": "", "prediction": ["all x.(Molecule(x) -> Atom(x))"]}
{"id": "eqasc_train_11407", "nl": "antigens are a group of atoms that the immune system recognizes as foreign to the body", "fol": "", "prediction": ["all x.(Antigen(x) -> (Atoms(x) & ImmuneSystemRecognizesAsFrequentToBody(x)))"]}
{"id": "eqasc_train_11408", "nl": "Antigens are proteins foreign to the body.", "fol": "", "prediction": ["all x.(Antigen(x) -> (Protein(x) & ForeignToBody(x)))"]}
{"id": "eqasc_train_11409", "nl": "antigens are proteins", "fol": "", "prediction": ["all x.(Antigen(x) -> (Protein(x) & Protein(x)))"]}
{"id": "eqasc_train_11410", "nl": "Heavy metals are, in general, foreign to the body.", "fol": "", "prediction": ["all x.(HeavyMetal(x) -> ForeignToBody(x))"]}
{"id": "eqasc_train_11411", "nl": "Heavy metals are antigens.", "fol": "", "prediction": ["all x.(HeavyMetal(x) -> Antigen(x))"]}
{"id": "eqasc_train_11412", "nl": "heating an egg causes a chemical reaction in the egg", "fol": "", "prediction": ["all x y.((Egg(x) & Egg(y)) -> HeatsChemicalReaction(x,y))"]}
{"id": "eqasc_train_11413", "nl": "Eggs, cooked in their shell, can explode, causing second degree burns.", "fol": "", "prediction": ["all x.((Egg(x) & CookedInShell(x)) -> CanBlast(x))"]}
{"id": "eqasc_train_11414", "nl": "Heating an egg can make the egg explode.", "fol": "", "prediction": ["all x y.((Egg(x) & Heating(x,y)) -> CanMakeEggExplosive(x))"]}
{"id": "eqasc_train_11415", "nl": "Most chemical reactions are exothermic.", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> Exothermic(x))"]}
{"id": "eqasc_train_11416", "nl": "heating an egg causes a exothermic reaction in the egg", "fol": "", "prediction": ["all x y.((Egg(x) & Egg(y)) -> (Heating(x,y) & CausesExothermicReaction(x,y)))"]}
{"id": "eqasc_train_11417", "nl": "Heat causes most chemical reactions to accelerate.", "fol": "", "prediction": ["all x.(Heat(x) -> CausesChemicalReactionsToAccelerate(x))"]}
{"id": "eqasc_train_11418", "nl": "\u00c5n increase in heat will accelerate the egg's chemical reaction. ", "fol": "", "prediction": ["all x.((IncreaseInHeat(x) & Egg(y)) -> AcceleratesChemicalReaction(x,y))"]}
{"id": "eqasc_train_11419", "nl": "High heat causes the protein in eggs to become tough and rubbery.", "fol": "", "prediction": ["all x.(HighHeat(x) -> (ProteinInEggs(x) & Tough(x) & Rubbery(x)))"]}
{"id": "eqasc_train_11420", "nl": "A chemical reaction in an egg causes protein to become rough and rubbery", "fol": "", "prediction": ["all x y.((ChemicalReaction(x) & Egg(y)) -> CausesProteinToBecomeRoughAndRubby(x,y))"]}
{"id": "eqasc_train_11421", "nl": "Heat is very important in cooking.", "fol": "", "prediction": ["all x.(Heat(x) -> VeryImportantInCooking(x))"]}
{"id": "eqasc_train_11422", "nl": "cooking an egg causes a chemical reaction in the egg", "fol": "", "prediction": ["all x y.((Egg(x) & Cooking(x,y)) -> CausesChemicalReaction(x,y))"]}
{"id": "eqasc_train_11423", "nl": "Fire can be used to heat an egg.", "fol": "", "prediction": ["all x y.((Fire(x) & Egg(y)) -> Heats(x,y))"]}
{"id": "eqasc_train_11424", "nl": "Cooking an egg causes a chemical reaction in the egg", "fol": "", "prediction": ["all x y.((Egg(x) & Cooking(x,y)) -> CausesChemicalReaction(x,y))"]}
{"id": "eqasc_train_11425", "nl": "Heating an egg results in chemical changes.", "fol": "", "prediction": ["all x y.((Egg(x) & Heating(y)) -> ChemicalChange(x,y))"]}
{"id": "eqasc_train_11426", "nl": "While pasta is cooking, warm the oil over medium heat in a large skillet.", "fol": "", "prediction": ["all x y.((Pasta(x) & Cooking(x)) -> WarmsOilOverMediumHeat(x,y))"]}
{"id": "eqasc_train_11427", "nl": "Warming in a skillet causes a chemical reaction in an egg", "fol": "", "prediction": ["all x y z.((WarmingInSpank(x) & Pancake(y) & Egg(z)) -> CausesChemicalReactionIn(x,y,z))"]}
{"id": "eqasc_train_11428", "nl": "Insects hatch from eggs.", "fol": "", "prediction": ["all x.(Insect(x) -> HatchesFromEggs(x))"]}
{"id": "eqasc_train_11429", "nl": "heat causes insects to hatch", "fol": "", "prediction": ["all x y.((Heat(x) & Insect(y)) -> CausesToHatch(x,y))"]}
{"id": "eqasc_train_11430", "nl": "Over medium heat, scramble the eggs.", "fol": "", "prediction": ["all x.((OverMediumHeat(x) & ScrambleEggs(x)) -> OverMediumHeat(x))"]}
{"id": "eqasc_train_11431", "nl": "Scrambled eggs are an example of a chemical reaction", "fol": "", "prediction": ["all x.(ScrambledEggs(x) -> ChemicalReaction(x))"]}
{"id": "eqasc_train_11432", "nl": "Population size influences the chances of a species surviving.", "fol": "", "prediction": ["all x.(PopulationSizeInfluencesSurvivalChance(x) -> Species(x))"]}
{"id": "eqasc_train_11433", "nl": "Population size influences the chances of a species living.", "fol": "", "prediction": ["all x.(PopulationSizeInfluencesChancesOfLiving(x) -> InfluencesChancesOfLiving(x))"]}
{"id": "eqasc_train_11434", "nl": "Each species lasts for a time, sometimes surviving to the present and sometimes going extinct.", "fol": "", "prediction": ["all x.(Species(x) -> (LastsForTime(x) & SurvivesToPresent(x) & GoesExtinct(x)))"]}
{"id": "eqasc_train_11435", "nl": "Population size influences the chances of going extinct", "fol": "", "prediction": ["all x.(PopulationSizeInfluencesChancesOfGoingExtinct(x) -> InfluencesChancesOfGoingExtinct(x))"]}
{"id": "eqasc_train_11436", "nl": "All humans are the same species.", "fol": "", "prediction": ["all x.(Human(x) -> SameSpecies(x))"]}
{"id": "eqasc_train_11437", "nl": "population size influences the chances of humans surviving", "fol": "", "prediction": ["all x.(PopulationSizeInfluencesChancesOfSurvival(x) -> HumansSurvival(x))"]}
{"id": "eqasc_train_11438", "nl": "Diversity within a species is essential for survival.", "fol": "", "prediction": ["all x.((Species(x) & Diversity(x)) -> EssentialForSurvival(x))"]}
{"id": "eqasc_train_11439", "nl": "Population size influences the chances of diversity within a species", "fol": "", "prediction": ["all x y.((PopulationSize(x) & Species(y)) -> InfluencesChancesOfDiversity(x,y))"]}
{"id": "eqasc_train_11440", "nl": "Estuaries are critical for the survival of many species.", "fol": "", "prediction": ["all x.(Estuary(x) -> CriticalForSurvivalOfManySpecies(x))"]}
{"id": "eqasc_train_11441", "nl": "Estuaries allow for appropriate population size for a species", "fol": "", "prediction": ["all x y.((Estuary(x) & Species(y)) -> AllowsAppropriatePopulationSize(x,y))"]}
{"id": "eqasc_train_11442", "nl": "Colors of the bees also varies with the species.", "fol": "", "prediction": ["all x y.((Bee(x) & Species(y)) -> ColorsVariates(x,y))"]}
{"id": "eqasc_train_11443", "nl": "bee population size infleunces the bees' survival chance", "fol": "", "prediction": ["all x.(BeePopulationSizeInfleuncesSurvivalChance(x) -> InfleuncesSurvivalChance(x))"]}
{"id": "eqasc_train_11444", "nl": "Flowers Includes All Plant Species.", "fol": "", "prediction": ["AllSeasons(Flowers)"]}
{"id": "eqasc_train_11445", "nl": "population size influences the chances of flowers surviving", "fol": "", "prediction": ["all x.(PopulationSizeInfluencesChancesOfFlowersSurviving(x) -> InfluencesChancesOfFlowersSurviving(x))"]}
{"id": "eqasc_train_11446", "nl": "Economic migration affects the population size.", "fol": "", "prediction": ["all x.(EconomicMigration(x) -> AffectsPopulationSize(x))"]}
{"id": "eqasc_train_11447", "nl": "migration influences the chances of a species surviving.", "fol": "", "prediction": ["all x y.((Species(x) & Migratory(y)) -> InfluencesChancesOfSurvival(x,y))"]}
{"id": "eqasc_train_11448", "nl": "bacteria cause food to spoil", "fol": "", "prediction": ["all x y.((Bacteria(x) & Food(y)) -> CausesToSpoil(x,y))"]}
{"id": "eqasc_train_11449", "nl": "If food smells or looks spoiled, always throw it out.", "fol": "", "prediction": ["all x.((Food(x) & (Smells(x) | LooksSpoiled(x))) -> ThrowsOut(x))"]}
{"id": "eqasc_train_11450", "nl": "Bacteria causes food to be thrown out.", "fol": "", "prediction": ["all x.(Bacteria(x) -> CausesFoodToBeThrewOut(x))"]}
{"id": "eqasc_train_11451", "nl": "Bacteria thrive in higher temperatures.", "fol": "", "prediction": ["all x.((Bacteria(x) & HigherTemperature(x)) -> Thrives(x))"]}
{"id": "eqasc_train_11452", "nl": "Higher temperatures cause food to spoil", "fol": "", "prediction": ["all x.(HigherTemperature(x) -> CausesFoodToSpoil(x))"]}
{"id": "eqasc_train_11453", "nl": "Bacteria love a warm, moist place to grow.", "fol": "", "prediction": ["all x.(Bacteria(x) -> LovesWarmMoistPlace(x))"]}
{"id": "eqasc_train_11454", "nl": "Warmth and moisture can lead to spoiled food.", "fol": "", "prediction": ["all x.((Warmth(x) & Moisture(x)) -> SpottedFood(x))"]}
{"id": "eqasc_train_11455", "nl": "Bacteria resistant plastics inhibit the growth of bacteria and molds.", "fol": "", "prediction": ["all x.(BacteriaResistantPlastics(x) -> (InhibitsGrowthOfBacteria(x) & InhibitsGrowthOfMolds(x)))"]}
{"id": "eqasc_train_11456", "nl": "Plastic can prevent food from spoiling. ", "fol": "", "prediction": ["all x.(Plastic(x) -> PreventsSpoilage(x))"]}
{"id": "eqasc_train_11457", "nl": "Milk was loaded with bacteria that quickly spoiled, making it undrinkable.", "fol": "", "prediction": ["all x.(Milk(x) -> (LoadedWithBacteria(x) & QuicklySpoiled(x) & Undrinkable(x)))"]}
{"id": "eqasc_train_11458", "nl": "milk can be made undrinkable by bacteria", "fol": "", "prediction": ["all x.((Milk(x) & Bacteria(x)) -> Undrinkable(x))"]}
{"id": "eqasc_train_11459", "nl": "Honey never spoils.", "fol": "", "prediction": ["all x.(Honey(x) -> -Spoils(x))"]}
{"id": "eqasc_train_11460", "nl": "Honey has no bacteria", "fol": "", "prediction": ["all x.(Honey(x) -> -Bacteria(x))"]}
{"id": "eqasc_train_11461", "nl": "Food spoils quickly at high temperature.", "fol": "", "prediction": ["all x.((Food(x) & HighTemperature(x)) -> SpoilsQuickly(x))"]}
{"id": "eqasc_train_11462", "nl": "bacteria are more active at high temperatures", "fol": "", "prediction": ["all x.((Bacteria(x) & HighTemperature(x)) -> MoreActiveAt(x,y))"]}
{"id": "eqasc_train_11463", "nl": "Water can be tested for coliform and fecal coliform bacteria.", "fol": "", "prediction": ["all x.(Water(x) -> (TestsColiformBacteria(x) & TestsFecalBacteria(x)))"]}
{"id": "eqasc_train_11464", "nl": "coliforms cause food to spoil", "fol": "", "prediction": ["all x.(Coliform(x) -> CausesFoodToSpoil(x))"]}
{"id": "eqasc_train_11465", "nl": "Bacteria cause food poisoning. ", "fol": "", "prediction": ["all x.(Bacteria(x) -> CausesFoodPoisoning(x))"]}
{"id": "eqasc_train_11466", "nl": "Touch is the ability to sense pressure.", "fol": "", "prediction": ["all x.(Touch(x) -> SensitsPressure(x))"]}
{"id": "eqasc_train_11467", "nl": "Therapeutic touch can activate the clients inherent healing ability.", "fol": "", "prediction": ["all x.(TherapeuticalTouch(x) -> CanActivateInherentHealingAbility(x))"]}
{"id": "eqasc_train_11468", "nl": "The ability to sense pressure on the body can help clients to heal.", "fol": "", "prediction": ["all x.((SensePressure(x) & HelpsClientsHeal(x)) -> HelpsHeal(x))"]}
{"id": "eqasc_train_11469", "nl": "Tactile sense is our ability to learn from our environment through our sense of touch.", "fol": "", "prediction": ["all x.(TactileSense(x) -> LearnsFromEnvironment(x))"]}
{"id": "eqasc_train_11470", "nl": "Tactile sense is the ability to sense pressure", "fol": "", "prediction": ["all x.(TactileSense(x) -> (SensesPressure(x) & SensePressure(x)))"]}
{"id": "eqasc_train_11471", "nl": "Thread-like nerves can sense pain, touch, temperature and pressure.", "fol": "", "prediction": ["all x.(ThreadLikeNervous(x) -> (SensesPain(x) & SenseTouch(x) & SenseTemperature(x) & SensePressure(x)))"]}
{"id": "eqasc_train_11472", "nl": "Thread-like nerves sense pressure", "fol": "", "prediction": ["all x.(ThreadLikeNervous(x) -> FeelsPressure(x))"]}
{"id": "eqasc_train_11473", "nl": "Or, pressure is force per area.", "fol": "", "prediction": ["all x.(Pressure(x) -> ForcePerArea(x))"]}
{"id": "eqasc_train_11474", "nl": "Touch is the ability to sense force. ", "fol": "", "prediction": ["all x.(Touch(x) -> SenseForce(x))"]}
{"id": "eqasc_train_11475", "nl": "Nerve damage that causes a reduction in the ability to feel touch or pain is very dangerous.", "fol": "", "prediction": ["all x.((NerveDamage(x) & ReducesAbilityToTouchOrPain(x)) -> VeryDangerous(x))"]}
{"id": "eqasc_train_11476", "nl": "nerves can sense pressure", "fol": "", "prediction": ["all x.(Nervous(x) -> CanSensePressure(x))"]}
{"id": "eqasc_train_11477", "nl": "Moles find prey mainly by using their sense of touch.", "fol": "", "prediction": ["all x.(Mole(x) -> (FindsPrey(x) & UsesSenseOfTouch(x)))"]}
{"id": "eqasc_train_11478", "nl": "Moles find prey mainly by using their ability to sense pressure", "fol": "", "prediction": ["all x y.((Mole(x) & Prey(y)) -> (Finds(x,y) & UsesAptitudeToSensePressure(x)))"]}
{"id": "eqasc_train_11479", "nl": "Actually, touch is the sense of the skin.", "fol": "", "prediction": ["all x.(Touch(x) -> SkinSense(x))"]}
{"id": "eqasc_train_11480", "nl": "the skin senses pressure", "fol": "", "prediction": ["all x.(Skin(x) -> sensesPressure(x))"]}
{"id": "eqasc_train_11481", "nl": "Twelve touch genes are needed for touch cell function.", "fol": "", "prediction": ["all x.(TouchGene(x) -> NeededForTouchCellFunction(x))"]}
{"id": "eqasc_train_11482", "nl": "Something that has twelve genes is the ability to sense pressure", "fol": "", "prediction": ["all x.((Genes(x,12)) -> SensitivityToPressure(x))"]}
{"id": "eqasc_train_11483", "nl": "Plastics are made from petroleum and produce toxic waste.", "fol": "", "prediction": ["all x.(Plastic(x) -> (MadeFromPetroleum(x) & ProducesToxicWaste(x)))"]}
{"id": "eqasc_train_11484", "nl": "Toxic wastes can cause illness or death.", "fol": "", "prediction": ["all x.(ToxicWaste(x) -> (CausesIllness(x) | CausesDeath(x)))"]}
{"id": "eqasc_train_11485", "nl": "Plastics are made from petroleum and can cause illness ", "fol": "", "prediction": ["all x.(Plastic(x) -> (MadeFromPetroleum(x) & CanCauseIllness(x)))"]}
{"id": "eqasc_train_11486", "nl": "Plastic bags are made from non-renewable petroleum resources.", "fol": "", "prediction": ["all x.(PlasticBag(x) -> (MadeFromNonRenewablePetroleumResources(x)))"]}
{"id": "eqasc_train_11487", "nl": "the resources that plastic bags come from are nonrenewable", "fol": "", "prediction": ["all x.((Resource(x) & PlasticBag(x)) -> NonRenewable(x))"]}
{"id": "eqasc_train_11488", "nl": "Plastic is a big contributor to landfill waste.", "fol": "", "prediction": ["all x.(Plastic(x) -> ContributesToLandfillWaste(x))"]}
{"id": "eqasc_train_11489", "nl": "products made from petroleum are a big contributor to landfill waste.", "fol": "", "prediction": ["all x.((Product(x) & MadeFromPetroleum(x)) -> ContributesToLandfillWaste(x))"]}
{"id": "eqasc_train_11490", "nl": "Petroleum is a fossil fuel .", "fol": "", "prediction": ["all x.(Petroleum(x) -> FossilFuel(x))"]}
{"id": "eqasc_train_11491", "nl": "Plastics are made from fossil fuels", "fol": "", "prediction": ["all x.(Plastic(x) -> (MadeFromFossilFuels(x) & MadeFromFossilFuels(x)))"]}
{"id": "eqasc_train_11492", "nl": "Crude petroleum is imported for refining.", "fol": "", "prediction": ["all x.(CrudePetroleum(x) -> ImportedForRefining(x))"]}
{"id": "eqasc_train_11493", "nl": "making plastic requires refining", "fol": "", "prediction": ["all x.((MakingPlastic(x) & RequiresRefining(x)) -> RequiresRefining(x))"]}
{"id": "eqasc_train_11494", "nl": "Pollution issues include toxic waste disposal.", "fol": "", "prediction": ["all x.(PollutionIssue(x) -> (ToxicWasteDisposal(x)))"]}
{"id": "eqasc_train_11495", "nl": "Plastics are made from petroleum and produce pollution.", "fol": "", "prediction": ["all x.(Plastic(x) -> (MadeFromPetroleum(x) & ProducesPollution(x)))"]}
{"id": "eqasc_train_11496", "nl": "Plastics are a type of petrochemical, that is, they are created from petroleum.", "fol": "", "prediction": ["all x.(Petrochemical(x) -> (CreatedFromPetrochemical(x) & CreatedFromPetrochemical(x)))"]}
{"id": "eqasc_train_11497", "nl": "Plastics are a petrochemical and produce toxic waste", "fol": "", "prediction": ["all x.(Plastic(x) -> (Petrochemical(x) & ProducesToxicWaste(x)))"]}
{"id": "eqasc_train_11498", "nl": "a flower 's purpose is to produce seeds", "fol": "", "prediction": ["all x y.((Flower(x) & Purpose(y)) -> ProducesSeeds(x,y))"]}
{"id": "eqasc_train_11499", "nl": "Seeds grow into new plants.", "fol": "", "prediction": ["all x.(Seed(x) -> GrowsIntoNewPlant(x))"]}
{"id": "eqasc_train_11500", "nl": "A flower's purpose is to make new plants.", "fol": "", "prediction": ["all x.(Flower(x) -> MakesNewPlants(x))"]}
{"id": "eqasc_train_11501", "nl": "Some plants can be reproduced using seeds, or even a piece of plant.", "fol": "", "prediction": ["exists x.(Plant(x) & (ReproducedUsingSeeds(x) | ReproducedUsingPieceOfPlant(x)))"]}
{"id": "eqasc_train_11502", "nl": "a flower's purpose is to reproduce", "fol": "", "prediction": ["all x.(Flower(x) -> Reproduce(x))"]}
{"id": "eqasc_train_11503", "nl": "Now seeds are the products of successful sexual reproduction.", "fol": "", "prediction": ["all x.(Seed(x) -> SuccessfulSexualReproduction(x))"]}
{"id": "eqasc_train_11504", "nl": "A flower's purpose is to successfully reproduce", "fol": "", "prediction": ["all x.(Flower(x) -> (SuccessfullyReproduce(x) & Flower(x)))"]}
{"id": "eqasc_train_11505", "nl": "a tulip's purpose is to produce seeds", "fol": "", "prediction": ["all x.(Tulip(x) -> ProducesSeeds(x))"]}
{"id": "eqasc_train_11506", "nl": "Animals eat the seeds and their stomach acids weaken the seed coat.", "fol": "", "prediction": ["all x y.((Animal(x) & Seed(y)) -> (Eats(x,y) & WeaksStomachAcids(x,y)))"]}
{"id": "eqasc_train_11507", "nl": "Flowers help to feed small animals.", "fol": "", "prediction": ["all x.(Flower(x) -> FeedsSmallAnimals(x))"]}
{"id": "eqasc_train_11508", "nl": "Reproduction is by seeds and spreading rhizomes.", "fol": "", "prediction": ["all x.(Reproduction(x) -> (Seeds(x) & SpreadsRhizomes(x)))"]}
{"id": "eqasc_train_11509", "nl": "a flower 's purpose is Reproduction ", "fol": "", "prediction": ["all x.(Flower(x) -> Reproduction(x))"]}
{"id": "eqasc_train_11510", "nl": "A flowers purpose is to reproduce", "fol": "", "prediction": ["all x.(Flower(x) -> Reproduce(x))"]}
{"id": "eqasc_train_11511", "nl": "Every job has meaning and purpose.", "fol": "", "prediction": ["all x.(Job(x) -> (HasMeaning(x) & HasPurpose(x)))"]}
{"id": "eqasc_train_11512", "nl": "A flower's job is to produce seeds.", "fol": "", "prediction": ["all x.(Flower(x) -> ProducesSeeds(x))"]}
{"id": "eqasc_train_11513", "nl": "Seed production is good, and propagation is by seeding.", "fol": "", "prediction": ["all x.((SeedProduction(x) & Seeding(x)) -> (Good(x) & Propagation(x)))"]}
{"id": "eqasc_train_11514", "nl": "a flower 's purpose is to produce for propagation", "fol": "", "prediction": ["all x y.((Flower(x) & Purpose(y)) -> ProducesForPropagation(x,y))"]}
{"id": "eqasc_train_11515", "nl": "Gymnosperms and flowering plants reproduce by seeds.", "fol": "", "prediction": ["all x.((Gymnosperm(x) | FloweringPlant(x)) -> ReproducesBySeeds(x))"]}
{"id": "eqasc_train_11516", "nl": "reproduction comes from seeds", "fol": "", "prediction": ["all x.(Reproduction(x) -> (ComesFromSeeds(x) & Seeds(x)))"]}
{"id": "eqasc_train_11517", "nl": "Planting seeds is a study of seeds and their growth.", "fol": "", "prediction": ["all x.(PlantsSeeds(x) -> (StudiesSeeds(x) & StudiesSeedGrowth(x)))"]}
{"id": "eqasc_train_11518", "nl": "A flower's purpose is to be planted", "fol": "", "prediction": ["all x.(Flower(x) -> Planted(x))"]}
{"id": "eqasc_train_11519", "nl": "Grain is the seed portion of the plants.", "fol": "", "prediction": ["all x.(Grain(x) -> SeedPartOfPlants(x))"]}
{"id": "eqasc_train_11520", "nl": "a flower produces grain", "fol": "", "prediction": ["all x.(Flower(x) -> ProducesGrain(x))"]}
{"id": "eqasc_train_11521", "nl": "Once fertilized, a cone or seed is produced capable of creating a new plant.", "fol": "", "prediction": ["all x.(Fertilized(x) -> (Cone(x) | Seed(x)) & CreatesNewPlant(x)))"]}
{"id": "eqasc_train_11522", "nl": "a flower's purpose is to create new plants", "fol": "", "prediction": ["all x.(Flower(x) -> CreatesNewPlants(x))"]}
{"id": "eqasc_train_11523", "nl": "If it serves the purpose, use it.", "fol": "", "prediction": ["all x.((ServesPurpose(x) & Uses(x)) -> Uses(x))"]}
{"id": "eqasc_train_11524", "nl": "A flower is used to produce seeds.", "fol": "", "prediction": ["all x.(Flower(x) -> ProducesSeeds(x))"]}
{"id": "eqasc_train_11525", "nl": "Seeds are mature Ovules .", "fol": "", "prediction": ["all x.(Seed(x) -> MatureOvule(x))"]}
{"id": "eqasc_train_11526", "nl": "A flower 's purpose is to produce mature ovules.", "fol": "", "prediction": ["all x.(Flower(x) -> ProducesMatureOvules(x))"]}
{"id": "eqasc_train_11527", "nl": "vein deposits of gold and silver are formed by igneous intrusion", "fol": "", "prediction": ["all x y.((VenueDeposit(x) & Gold(y) & Silver(y)) -> FormedByIgneousIntrusion(x,y))"]}
{"id": "eqasc_train_11528", "nl": "Along with gold and silver, they are known as precious or noble metals.", "fol": "", "prediction": ["all x.((Gold(x) | Silver(x)) -> (PreciousMetal(x) | NobleMetal(x)))"]}
{"id": "eqasc_train_11529", "nl": "vein deposits of precious metals are formed by igneous intrusion", "fol": "", "prediction": ["all x y.((VineDeposit(x) & PreciousMetal(y)) -> FormedByIgneousIntrusion(x,y))"]}
{"id": "eqasc_train_11530", "nl": "Jewelry is made of silver, gold or platinum and is usually set with precious stones.", "fol": "", "prediction": ["all x.(Jewelry(x) -> ((MadeOfSilver(x) | MadeOfGold(x) | MadeOfPlatinum(x)) & SetWithPreciousStones(x)))"]}
{"id": "eqasc_train_11531", "nl": "Silver jewelry could not be made without igneous intrusion.", "fol": "", "prediction": ["all x.(SilverJewelry(x) -> -MadeWithIgneousIntrusion(x))"]}
{"id": "eqasc_train_11532", "nl": "Intrusive igneous rocks form underground.", "fol": "", "prediction": ["all x.(IntrusiveIgneousRock(x) -> FormsUnderground(x))"]}
{"id": "eqasc_train_11533", "nl": "vein deposits of gold and silver are formed underground", "fol": "", "prediction": ["all x y.((VineDeposit(x) & (Gold(y) | Silver(y))) -> FormedUnderground(x))"]}
{"id": "eqasc_train_11534", "nl": "Magma that cools slowly deep below the surface produces coarse-grained intrusive igneous rocks.", "fol": "", "prediction": ["all x.((Magma(x) & CoolsSlowlyBelowSurface(x)) -> ProducesGrainyGrainedIntrusiveIgneousRocks(x))"]}
{"id": "eqasc_train_11535", "nl": "Vein deposits of gold and silver are formed when magma cools.", "fol": "", "prediction": ["all x.((VeinDeposit(x) & (Gold(x) | Silver(x))) -> CoolsMagma(x))"]}
{"id": "eqasc_train_11536", "nl": "Vein deposits of gold and silver are formed underground.", "fol": "", "prediction": ["all x.((VeinDeposit(x) & (Gold(x) | Silver(x))) -> FormedUnderground(x))"]}
{"id": "eqasc_train_11537", "nl": "Veins of Gold ore most commonly occur in cracks and fissures in igneous rocks.", "fol": "", "prediction": ["all x.((GoldOre(x) & CracksAndFissures(x)) -> MostCommonlyOccur(x))"]}
{"id": "eqasc_train_11538", "nl": "gold deposits are found in fissures", "fol": "", "prediction": ["all x y.((GoldDeposit(x) & Fissure(y)) -> FoundIn(x,y))"]}
{"id": "eqasc_train_11539", "nl": "If magma solidifies within the crust, the rock is called an intrusive igneous rock.", "fol": "", "prediction": ["all x.(MagmaSolidifiesWithinCrust(x) -> IntrusiveIgneousRock(x))"]}
{"id": "eqasc_train_11540", "nl": "vein deposits of gold are formed by magma", "fol": "", "prediction": ["all x y.((VenueDeposit(x) & Gold(y)) -> FormedByMagma(x,y))"]}
{"id": "eqasc_train_11541", "nl": "Gold and silver are valuable products.", "fol": "", "prediction": ["all x.((Gold(x) | Silver(x)) -> ValuableProduct(x))"]}
{"id": "eqasc_train_11542", "nl": "igneous intrusion creates valuable products", "fol": "", "prediction": ["all x.(IgneousIntrusion(x) -> CreatesValuableProducts(x))"]}
{"id": "eqasc_train_11543", "nl": "Intrusive igneous rocks account for sections of higher elevation.", "fol": "", "prediction": ["all x.(IntrusiveIgneousRock(x) -> AccountsForHigherElevation(x))"]}
{"id": "eqasc_train_11544", "nl": "vein deposits of gold and silver are formed in higher elevations.", "fol": "", "prediction": ["all x y.((VineDeposit(x) & (Gold(y) | Silver(y))) -> FormedInHigherElevations(x,y))"]}
{"id": "eqasc_train_11545", "nl": "Granite, on the other hand, is an intrusive igneous rock.", "fol": "", "prediction": ["(IntrusiveIgneousRock(Granite) & IntrusiveIgneousRock(Granite))"]}
{"id": "eqasc_train_11546", "nl": "vein deposits of gold and silver are formed by granite", "fol": "", "prediction": ["all x y.((VineDeposit(x) & Granite(y)) -> (GoldAndSilver(x) & FormedBy(x,y)))"]}
{"id": "eqasc_train_11547", "nl": "the vanes rotating in an electric fan causes air to move", "fol": "", "prediction": ["all x y.((Vane(x) & ElectricFan(y) & RotatingIn(x,y)) -> CausesAirMovement(x))"]}
{"id": "eqasc_train_11548", "nl": "Fans move air, providing a cooling breeze.", "fol": "", "prediction": ["all x.(Fan(x) -> (MovesAir(x) & ProvidesCoolingBreeze(x)))"]}
{"id": "eqasc_train_11549", "nl": "The vanes rotating in an electric fan provides a cooling breeze.", "fol": "", "prediction": ["all x y.((Vane(x) & ElectricFan(y) & RotatesIn(x,y)) -> ProvidesCoolingBreeze(x))"]}
{"id": "eqasc_train_11550", "nl": "All wind is simply air moving.", "fol": "", "prediction": ["all x.(Wind(x) -> AirMoving(x))"]}
{"id": "eqasc_train_11551", "nl": "the vanes rotating in an electric fan causes wind", "fol": "", "prediction": ["all x y.((Vane(x) & ElectricFan(y) & RotatingIn(x,y)) -> CausesWind(x))"]}
{"id": "eqasc_train_11552", "nl": "Turning blades cause air to move", "fol": "", "prediction": ["all x y.((Blade(x) & Turning(x)) -> CausesAirMovement(x,y))"]}
{"id": "eqasc_train_11553", "nl": "Turbines are usually made with a series of curved vanes on a central rotating spindle.", "fol": "", "prediction": ["all x.(Turbine(x) -> (MakesWithCurvedVane(x) & CentralRotatingSpindle(x)))"]}
{"id": "eqasc_train_11554", "nl": "turbines in an electric fan causes air to move", "fol": "", "prediction": ["all x y.((Turbine(x) & ElectricFan(y) & InElectricFan(x,y)) -> CausesAirToMove(x,y))"]}
{"id": "eqasc_train_11555", "nl": "Cool breezes are provided by vanes rotating in an electric fan.", "fol": "", "prediction": ["all x y.((CoolBreak(x) & Vanes(y) & ElectricFan(y)) -> Provides(x,y))"]}
{"id": "eqasc_train_11556", "nl": "vanes rotating in an electric fan causes nitrogen and oxygen to move", "fol": "", "prediction": ["all x y.((Vane(x) & ElectricFan(y) & RotatingIn(x,y)) -> (CausesNitrogenMovement(x) & CausesOxygenMovement(x)))"]}
{"id": "eqasc_train_11557", "nl": "Output of the fan is varied by means of a series of adjustable vanes upstream of the impeller.", "fol": "", "prediction": ["all x y.((Fan(x) & Vacuum(y)) -> VariableOutput(x,y))"]}
{"id": "eqasc_train_11558", "nl": "fan speed is adjustable", "fol": "", "prediction": ["all x.(FanSpeedAdjustable(x) -> Adjustable(x))"]}
{"id": "eqasc_train_11559", "nl": "An electric fan makes 180 revolutions per minute.", "fol": "", "prediction": ["all x.(ElectricFan(x) -> Makes180RevolutionsPerMinute(x))"]}
{"id": "eqasc_train_11560", "nl": "the vanes rotating in an object with 180 revolutions per minute causes air to move", "fol": "", "prediction": ["all x y.((Vane(x) & Object(y) & RotatingIn(x,y) & 180RevolutionsPerMinute(x)) -> CausesAirToMove(x))"]}
{"id": "eqasc_train_11561", "nl": "Many computer Cases cool down temperature by using Cooling Fan.", "fol": "", "prediction": ["all x.(ComputerCase(x) -> CoolsTemperature(x))"]}
{"id": "eqasc_train_11562", "nl": "Rotating vanes move air to cool a computer", "fol": "", "prediction": ["all x y.((RotatingVane(x) & Computer(y)) -> MovesAirToCool(x,y))"]}
{"id": "eqasc_train_11563", "nl": "Vanes in a fan spinning causes air to move", "fol": "", "prediction": ["all x y.((Vane(x) & FanSpinning(x) & Fan(y)) -> CausesAirMovement(x,y))"]}
{"id": "eqasc_train_11564", "nl": "The vanes rotating in an electric fan causes wind", "fol": "", "prediction": ["all x y.((Vane(x) & ElectricFan(y) & RotatesIn(x,y)) -> CausesWind(x))"]}
{"id": "eqasc_train_11565", "nl": "Fans move air, increasing evaporation and decreasing temperature.", "fol": "", "prediction": ["all x.(Fan(x) -> (MovesAir(x) & IncreasesEvaporation(x) & DecreasesTemperature(x)))"]}
{"id": "eqasc_train_11566", "nl": "The more air a fan circulates, the greater the decrease in temperature.", "fol": "", "prediction": ["all x.((Fan(x) & MoreAir(x)) -> GreaterDecreaseInTemperature(x))"]}
{"id": "eqasc_train_11567", "nl": "Air speed is an important contributor to cooling of skin temperature.", "fol": "", "prediction": ["all x.(AirSpeed(x) -> ContributesToCoolingSkinTemperature(x))"]}
{"id": "eqasc_train_11568", "nl": "electric fans cool down human skin", "fol": "", "prediction": ["all x y.((ElectricFan(x) & HumanSkin(y)) -> CoolsDown(x,y))"]}
{"id": "eqasc_train_11569", "nl": "Air molecules move slowly when they are cool.", "fol": "", "prediction": ["all x.((AirMolecule(x) & Cool(x)) -> MovesSlowly(x))"]}
{"id": "eqasc_train_11570", "nl": "Vanes rotating in an electric fan causes air molecules to cool.", "fol": "", "prediction": ["all x.((Vane(x) & RotatesInElectricFan(x)) -> CausesAirMoleculesToCool(x))"]}
{"id": "eqasc_train_11571", "nl": "Air moving through a room helps a person to feel less short of breath.", "fol": "", "prediction": ["all x y.((AirMovingThroughRoom(x) & Person(y)) -> FeelsLessShortOfBreath(y))"]}
{"id": "eqasc_train_11572", "nl": "electric fans can help people feel less short of breath", "fol": "", "prediction": ["all x.(ElectricFan(x) -> HelpsPeopleShortOfBreath(x))"]}
{"id": "eqasc_train_11573", "nl": "Air is a gas, and air has pressure.", "fol": "", "prediction": ["all x.(Air(x) -> (Gas(x) & HasPressure(x)))"]}
{"id": "eqasc_train_11574", "nl": "The vanes rotating in an electric fan cause gases to move.", "fol": "", "prediction": ["all x y.((Vane(x) & ElectricFan(y) & RotatingIn(x,y)) -> CausesGasesToMove(x))"]}
{"id": "eqasc_train_11575", "nl": "Balance is the ability to sense and maintain body position.", "fol": "", "prediction": ["all x.(Balance(x) -> (SensesBodyPosition(x) & MaintainsBodyPosition(x)))"]}
{"id": "eqasc_train_11576", "nl": "Balance is a proprioceptive function.", "fol": "", "prediction": ["all x.(Balance(x) -> ProprioceptiveFunction(x))"]}
{"id": "eqasc_train_11577", "nl": "proprioceptive functions sense and maintain body position.", "fol": "", "prediction": ["all x.(ProprioceptiveFunction(x) -> (SensesBodyPosition(x) & MaintainsBodyPosition(x)))"]}
{"id": "eqasc_train_11578", "nl": "Inner ear problems can affect balance.", "fol": "", "prediction": ["all x.(InnerEarProblem(x) -> CanAffectBalance(x))"]}
{"id": "eqasc_train_11579", "nl": "Inner ear problems can affect ability to sense and maintain body position", "fol": "", "prediction": ["all x.(InnerEarProblem(x) -> (AffectsAbilityToSenseAndMaintainBodyPosition(x) & AffectsAbilityToMaintainBodyPosition(x)))"]}
{"id": "eqasc_train_11580", "nl": "Another part of the inner ear is used for balance.", "fol": "", "prediction": ["all x.(InnerEar(x) -> Balance(x))"]}
{"id": "eqasc_train_11581", "nl": "The inner ear helps with sensing and maintaining body position.", "fol": "", "prediction": ["all x.(InnerEar(x) -> (HelpsSensing(x) & HelpsMaintainBodyPosition(x)))"]}
{"id": "eqasc_train_11582", "nl": "Balance is important in skiing and balance is important in life.", "fol": "", "prediction": ["(all x.((Skiing(x) & Balance(x)) -> Important(x)) & all y.((Skiing(y) & Life(y)) -> Important(y)))"]}
{"id": "eqasc_train_11583", "nl": "the ability to sense and maintain body position is important in skiing", "fol": "", "prediction": ["all x.((Skiing(x) & AptitudeToSenseAndMaintainBodyPosition(x)) -> ImportantInSkiing(x))"]}
{"id": "eqasc_train_11584", "nl": "People fall when they lose their sense of balance.", "fol": "", "prediction": ["all x.((Person(x) & LosesSenseOfBalance(x)) -> Fall(x))"]}
{"id": "eqasc_train_11585", "nl": "the ability to sense and maintain body position prevents people falling", "fol": "", "prediction": ["all x.((AbilityToSenseAndMaintainBodyPosition(x) & PeopleFalling(x)) -> PreventsFalling(x))"]}
{"id": "eqasc_train_11586", "nl": "proprioceptive functions allow one to sense and maintain body position", "fol": "", "prediction": ["all x.(ProprioceptiveFunction(x) -> (AllowsSenseAndMaintainBodyPosition(x) & AllowsMaintainBodyPosition(x)))"]}
{"id": "eqasc_train_11587", "nl": "Motion sickness is related to our sense of balance.", "fol": "", "prediction": ["all x.(MotionSickness(x) -> RelationshipToSenseOfBalance(x))"]}
{"id": "eqasc_train_11588", "nl": "motion sickness is related to balance", "fol": "", "prediction": ["all x.(MotionSickness(x) -> Balanced(x))"]}
{"id": "eqasc_train_11589", "nl": "Balance refers to the ability to maintain equilibrium and to remain in a stable, upright position.", "fol": "", "prediction": ["all x.(Balance(x) -> (MaintainsEquilibrium(x) & RemainsInStableUprightPosition(x)))"]}
{"id": "eqasc_train_11590", "nl": "the ability to maintain equilibrium is the ability to sense and maintain body position", "fol": "", "prediction": ["all x.((AbilityToMaintainEquilibrium(x) & AbilityToSenseAndMaintainBodyPosition(x)) -> AbilityToMaintainBodyPosition(x))"]}
{"id": "eqasc_train_11591", "nl": "In order to ski, it is necessary to maintain body position.", "fol": "", "prediction": ["all x.(Ski(x) -> MaintainsBodyPosition(x))"]}
{"id": "eqasc_train_11592", "nl": "Another name for sense of body position is proprioception.", "fol": "", "prediction": ["all x.(SenseOfBodyPosition(x) -> Proprioception(x))"]}
{"id": "eqasc_train_11593", "nl": "Balance involves proprioception ability.", "fol": "", "prediction": ["all x.(Balance(x) -> InvolvesProprioception(x))"]}
{"id": "eqasc_train_11594", "nl": "Body position is critical.", "fol": "", "prediction": ["all x.(BodyPosition(x) -> Critical(x))"]}
{"id": "eqasc_train_11595", "nl": "Balance is critical.", "fol": "", "prediction": ["all x.(Balance(x) -> Critical(x))"]}
{"id": "eqasc_train_11596", "nl": "being burried under soil and mud changes vegetation into peat through extreme heat and pressure in a swamp over a long period of time", "fol": "", "prediction": ["all x y z.((BurriedUnderSoilAndMud(x) & Vegetation(y) & Swamp(z) & ExtremeHeatAndPressure(y,z)) -> ChangesIntoPeatThroughExtremePressureAndSwamp(x,y,z))"]}
{"id": "eqasc_train_11597", "nl": "Often, the soil consists of mats of very acidic, semi-decayed vegetation, such as peat.", "fol": "", "prediction": ["all x.(Soil(x) -> (Mats(x) & AcidicSemiDecayedVegetation(x) & Peat(x)))"]}
{"id": "eqasc_train_11598", "nl": "Decayed vegetation turns to peat in a swamp over periods of time.", "fol": "", "prediction": ["all x y.((DecayedVegetation(x) & Swamp(y)) -> TurnsToPeat(x,y))"]}
{"id": "eqasc_train_11599", "nl": "Coal is created from being buried under soil", "fol": "", "prediction": ["all x.(Coal(x) -> (BurnedUnderSoil(x) & UnderSoil(x)))"]}
{"id": "eqasc_train_11600", "nl": "Peat moss from bogs is also useful in gardens and as an alternative fuel source.", "fol": "", "prediction": ["all x.((PeatMoss(x) & FromBoods(x)) -> (UsefulInGardens(x) & AlternativeFuelSource(x)))"]}
{"id": "eqasc_train_11601", "nl": "being buried under soil changes vegetation into fuel", "fol": "", "prediction": ["all x y.((BurnedUnderSoil(x) & Vegetation(y)) -> ChangesIntoFuel(x,y))"]}
{"id": "eqasc_train_11602", "nl": "Bogs are composed of peat.", "fol": "", "prediction": ["all x.(Boot(x) -> ComposedOfPat(x))"]}
{"id": "eqasc_train_11603", "nl": "being buried under soil and mud changes vegetation into bogs through extreme pressure and heat", "fol": "", "prediction": ["all x y.((BurnedUnderSoil(x) & BuriedUnderMod(x) & Vegetation(y) & ExtremePressureHeat(x)) -> ChangesIntoBobogs(x,y))"]}
{"id": "eqasc_train_11604", "nl": "Fossils are typically preserved when they are buried under many layers of sand and mud.", "fol": "", "prediction": ["all x.((Fossil(x) & BuriedUnderSandAndMud(x)) -> Preserved(x))"]}
{"id": "eqasc_train_11605", "nl": "being preserved under many layers changes vegetation into peat through extreme heat and pressure", "fol": "", "prediction": ["all x y.((Plant(x) & PreservedUnderManyLayers(x) & Vegetation(y) & ExtremeHeatAndPressure(x)) -> ChangesIntoPat(x,y))"]}
{"id": "eqasc_train_11606", "nl": "After a long time, the moss can form into a peat.", "fol": "", "prediction": ["all x.((Moss(x) & LongTime(x)) -> FormsIntoPeat(x))"]}
{"id": "eqasc_train_11607", "nl": "Moss forms into peat through extreme heat and pressure over time.", "fol": "", "prediction": ["all x.(Moss(x) -> FormsIntoPeat(x))"]}
{"id": "eqasc_train_11608", "nl": "Wetlands Wetlands are also called swamps or marshes.", "fol": "", "prediction": ["all x.(Wetland(x) -> (Swamp(x) | Marshes(x)))"]}
{"id": "eqasc_train_11609", "nl": "buried vegetation in a wetland changes to peat over a long period of time", "fol": "", "prediction": ["all x y.((BurnedVegetation(x) & Wetland(y)) -> ChangesToPat(x,y))"]}
{"id": "eqasc_train_11610", "nl": "Fossil fuels are concentrations of peat, coal, oil, and natural gas.", "fol": "", "prediction": ["all x.(FossilFuel(x) -> (Concentration(x,peat) & Concentration(x,coal) & Concentration(x,oil) & Concentration(x,naturalGas)))"]}
{"id": "eqasc_train_11611", "nl": "being buried under soil and mud change vegetation into fossil fuels", "fol": "", "prediction": ["all x y.((Plant(x) & Soil(y) & Mud(x)) -> (BurnedUnder(x,y) & ChangesVegetationIntoFossilFuels(x)))"]}
{"id": "eqasc_train_11612", "nl": "Vegetation Vegetation or plants are in abundunce in the tundra.", "fol": "", "prediction": ["all x.((Vegetation(x) | Plants(x)) -> AbundunceInTundra(x))"]}
{"id": "eqasc_train_11613", "nl": "being buried under soil and mud changes plants into peat through extreme heat and pressure in a swamp over a long period of time", "fol": "", "prediction": ["all x y z.((BurnedUnderSoilAndMmud(x) & Plants(y) & Swamp(z) & ExtremeHeatAndPressure(y,z)) -> ChangesIntoPeat(y,z))"]}
{"id": "eqasc_train_11614", "nl": "Bogs are characterized by cushion-like vegetation and an accumulation of peat.", "fol": "", "prediction": ["all x.(Boot(x) -> (CupuchLikeVegetation(x) & AccumulationOfPat(x)))"]}
{"id": "eqasc_train_11615", "nl": "being buried under soil and mud changes bogs through extreme heat over a long period of time", "fol": "", "prediction": ["all x y z.((BoundUnderSoil(x) & Mud(y) & Bog(z) & ExtremeHeat(z)) -> ChangesBodsThroughExtremeHeat(z))"]}
{"id": "eqasc_train_11616", "nl": "extreme heat and pressure in a swamp over a long period of time creates bogs", "fol": "", "prediction": ["all x y z.((ExtremeHeat(x) & Pressure(y) & Swamp(z) & LongPeriodOfTime(z) & InSwamp(x,y,z)) -> CreatesBoops(x))"]}
{"id": "eqasc_train_11617", "nl": "moss is transformed through extreme heat and pressure over time", "fol": "", "prediction": ["all x y z.((Moss(x) & Heat(y) & Pressure(z)) -> TransformedThroughExtremeHeatAndPressure(x,y,z))"]}
{"id": "eqasc_train_11618", "nl": "keeping food cold is used for keeping food fresh", "fol": "", "prediction": ["all x y.((KeepsFoodCold(x) & Food(y)) -> KeepsFoodFresh(x,y))"]}
{"id": "eqasc_train_11619", "nl": "The food safety zone is above 165 F for hot foods and under 40 F for cold food.", "fol": "", "prediction": ["all x.(FoodSafetyZone(x) -> (Above165F(x) & Under40F(x)))"]}
{"id": "eqasc_train_11620", "nl": "Food stays fresh under 40 degrees", "fol": "", "prediction": ["all x.((Food(x) & FreshUnder40Degrees(x)) -> StaysFresh(x))"]}
{"id": "eqasc_train_11621", "nl": "Sulfites keep foods fresh-looking (e.g., fruits, vegetables) and help prevent bacteria from growing.", "fol": "", "prediction": ["all x.(Sulfite(x) -> (KeepsFoodsFreshLooking(x) & HelpsPreventBacteriaGrowing(x)))"]}
{"id": "eqasc_train_11622", "nl": "keeping food cold  prevent bacteria from growing.", "fol": "", "prediction": ["all x.((KeepFoodCold(x) & PreventsBacteriaGrowing(x)) -> KeepFoodCold(x))"]}
{"id": "eqasc_train_11623", "nl": "The Purpose of Refrigeration The fundamental reason for having a refrigerator is to keep food cold.", "fol": "", "prediction": ["all x.(Refrigerator(x) -> KeepsFoodCold(x))"]}
{"id": "eqasc_train_11624", "nl": "a refrigerator keeps food fresh", "fol": "", "prediction": ["all x.(Refrigerator(x) -> KeepsFoodFresh(x))"]}
{"id": "eqasc_train_11625", "nl": "A refrigerator that keeps food cold.", "fol": "", "prediction": ["all x.((Refrigerator(x) & KeepsFoodCold(x)) -> Refrigerator(x))"]}
{"id": "eqasc_train_11626", "nl": "A refrigerator is used for keeping food fresh", "fol": "", "prediction": ["all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & KeepsFoodFresh(x)))"]}
{"id": "eqasc_train_11627", "nl": "On inspection the temperature of the fridge was found to be adequate for food storage.", "fol": "", "prediction": ["all x.((Fridge(x) & TemperatureAdequateForFoodStorage(x)) -> Inspection(x))"]}
{"id": "eqasc_train_11628", "nl": "Keeping things cold in a fridge is a way to adequately store them.", "fol": "", "prediction": ["all x.((Fridge(x) & KeepsCold(x)) -> StoresAdequately(x))"]}
{"id": "eqasc_train_11629", "nl": "Refrigerators are suppose to add coldness to the food inside of it.", "fol": "", "prediction": ["all x.(Refrigerator(x) -> AddsColdnessToFood(x))"]}
{"id": "eqasc_train_11630", "nl": "refrigerators keep food fresh", "fol": "", "prediction": ["all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & KeepsFoodFresh(x)))"]}
{"id": "eqasc_train_11631", "nl": "Keep your food fresh, simple and as natural as possible.", "fol": "", "prediction": ["all x.((Food(x) & Fresh(x) & Simple(x) & Natural(x)) -> KeepsFresh(x))"]}
{"id": "eqasc_train_11632", "nl": "Keeping food cold is used to keep food simple and natural as possible.", "fol": "", "prediction": ["all x.((Food(x) & Cold(x)) -> (KeepsFoodSimple(x) & KeepsFoodNatural(x)))"]}
{"id": "eqasc_train_11633", "nl": "the surface of a beach is formed by mechanical weathering", "fol": "", "prediction": ["all x y.((Beach(x) & Surface(y)) -> FormedByMechanicalWeathering(x,y))"]}
{"id": "eqasc_train_11634", "nl": "Most beaches are of white coral sand.", "fol": "", "prediction": ["all x.(Beach(x) -> WhiteCoralSand(x))"]}
{"id": "eqasc_train_11635", "nl": "Coral is turned to sand by mechanical weathering", "fol": "", "prediction": ["all x y.((Coral(x) & MechanicalWeathering(y)) -> TurnedToSand(x,y))"]}
{"id": "eqasc_train_11636", "nl": "Sandy and dusty surfaces get hotter during the day, like beach sand.", "fol": "", "prediction": ["all x y.((Sandy(x) & DustySurface(y)) -> (GetsHotter(x,y) & BeachSand(y)))"]}
{"id": "eqasc_train_11637", "nl": "Sand and dust are formed by mechanical weathering.", "fol": "", "prediction": ["all x.((Sand(x) | Dust(x)) -> FormedByMechanicalWeathering(x))"]}
{"id": "eqasc_train_11638", "nl": "Sand is formed by mechanical weathering.", "fol": "", "prediction": ["all x.(Sand(x) -> FormedByMechanicalWeathering(x))"]}
{"id": "eqasc_train_11639", "nl": "Beaches Anymore Sand is one of the most common materials on the earth's surface.", "fol": "", "prediction": ["all x.(Beach(x) -> (AnymoreSand(x) & CommonMaterial(x)))"]}
{"id": "eqasc_train_11640", "nl": "Beaches and Sand Dunes Dunes are accumulations of sand blown from the beach by the wind.", "fol": "", "prediction": ["all x.((Beach(x) | SandDunes(x)) -> (AccumulationsOfSandBlownByWind(x)))"]}
{"id": "eqasc_train_11641", "nl": "sand formations are formed by wind", "fol": "", "prediction": ["all x.(SandFormation(x) -> FormedByWind(x))"]}
{"id": "eqasc_train_11642", "nl": "the surface of a beach is formed by water", "fol": "", "prediction": ["all x y.((Beach(x) & Surface(y)) -> FormedByWater(y))"]}
{"id": "eqasc_train_11643", "nl": "And that sand is available to redeposit on the beaches.", "fol": "", "prediction": ["& that sand is available to redeposit on beaches."]}
{"id": "eqasc_train_11644", "nl": "Examples of mechanical waves include water waves, waves on a string, and sound waves.", "fol": "", "prediction": ["all x.(MechanicalWaves(x) -> (WaterWaves(x) | WavesOnString(x) | SoundWaves(x)))"]}
{"id": "eqasc_train_11645", "nl": "the surface of a beach is formed by water waves", "fol": "", "prediction": ["all x y.((Beach(x) & Surface(y)) -> FormedByWaterWaves(y))"]}
{"id": "eqasc_train_11646", "nl": "The surface of a beach is formed by water force.", "fol": "", "prediction": ["all x y.((Beach(x) & Surface(y)) -> FormedByWaterForce(x,y))"]}
{"id": "eqasc_train_11647", "nl": "Each beach experiences different rates of beach erosion.", "fol": "", "prediction": ["all x.(Beach(x) -> DifferentRateOfBeachErosion(x))"]}
{"id": "eqasc_train_11648", "nl": "weathering happens at different rates", "fol": "", "prediction": ["all x y.((Weathering(x) & Rate(y)) -> Different(x,y))"]}
{"id": "eqasc_train_11649", "nl": "Bone provides protection for soft tissues and internal organs.", "fol": "", "prediction": ["all x.(Bone(x) -> (ProtectsSoftTissues(x) & ProtectsInternalOrgans(x)))"]}
{"id": "eqasc_train_11650", "nl": "Antlers are true bones and are composed of calcium and phosphorous.", "fol": "", "prediction": ["all x.(Antler(x) -> (TrueBone(x) & ComposedOfCalcium(x) & ComposedOfPhosphorus(x)))"]}
{"id": "eqasc_train_11651", "nl": "calcium and phosphorous provide protection for soft tissues and internal organs", "fol": "", "prediction": ["all x y.((Calcium(x) & Phosphorus(y)) -> (ProtectsSoftTissues(x) & ProtectsInternalOrgans(x)))"]}
{"id": "eqasc_train_11652", "nl": "For example the skull bones protect the brain, and the ribs protect the thoracic organs.", "fol": "", "prediction": ["all x y.((SkullBone(x) & Ribs(y)) -> (ProtectsBrain(x) & ProtectsThoracicOrgans(y)))"]}
{"id": "eqasc_train_11653", "nl": "Ribs protect internal organs", "fol": "", "prediction": ["all x.(Rib(x) -> ProtectsInternalOrgans(x))"]}
{"id": "eqasc_train_11654", "nl": "Internal organs that can be affected include kidneys, lungs, heart and brain.", "fol": "", "prediction": ["all x.((InternalOrgan(x) & Affected(x)) -> (Kneeps(x) | Lungs(x) | Heart(x) | Brain(x)))"]}
{"id": "eqasc_train_11655", "nl": "bone provides protection for the heart", "fol": "", "prediction": ["all x.(Bone(x) -> ProvidesProtectionForHeart(x))"]}
{"id": "eqasc_train_11656", "nl": "Vertebrae, ribs, appendages, and the jaw are endoskeletal bone.", "fol": "", "prediction": ["all x.((Vertebrae(x) | Ribs(x) | Appendages(x) | Jaw(x)) -> EndoskeletalBone(x))"]}
{"id": "eqasc_train_11657", "nl": "Ribs provide protection for internal organs.", "fol": "", "prediction": ["all x.(Rib(x) -> ProvidesProtectionForInternalOrgans(x))"]}
{"id": "eqasc_train_11658", "nl": "Bone is the substance that forms the skeleton of the body.", "fol": "", "prediction": ["all x.(Bone(x) -> FormsSkeletonOfBody(x))"]}
{"id": "eqasc_train_11659", "nl": "The skeleton provides protection for soft tissues and internal organs.", "fol": "", "prediction": ["all x.(Skeleton(x) -> (ProtectsSoftTissues(x) & ProtectsInternalOrgans(x)))"]}
{"id": "eqasc_train_11660", "nl": "Soft tissue refers to the soft connective or supporting tissues, such as muscle.", "fol": "", "prediction": ["all x.(SoftTissue(x) -> (SoftConnectiveTissues(x) | SoftSupportingTissues(x)))"]}
{"id": "eqasc_train_11661", "nl": "Bone provides protection for muscles and internal organs.", "fol": "", "prediction": ["all x.(Bone(x) -> (ProvidesMuscleProtection(x) & ProvidesInternalOrganProtection(x)))"]}
{"id": "eqasc_train_11662", "nl": "Bones provide an outer shell to protect our internal organs.", "fol": "", "prediction": ["all x.(Bone(x) -> ProvidesOuterShell(x))"]}
{"id": "eqasc_train_11663", "nl": "Soft tissues and internal organs need an outer shell for protection.", "fol": "", "prediction": ["all x.((SoftTissue(x) & InternalOrgan(x)) -> NeedsOuterShell(x))"]}
{"id": "eqasc_train_11664", "nl": "Bones of the cranium Identify the bones of the face.", "fol": "", "prediction": ["all x.((BonesOfCranium(x) & IdentifyFaceBones(x)) -> IdentifyFaceBones(x))"]}
{"id": "eqasc_train_11665", "nl": "The cranium provides protection for soft tissues and internal organs", "fol": "", "prediction": ["all x.(Cranium(x) -> (ProtectsSoftTissues(x) & ProtectsInternalOrgans(x)))"]}
{"id": "eqasc_train_11666", "nl": "bone provides protection for lungs", "fol": "", "prediction": ["all x y.((Bone(x) & Lung(y)) -> ProvidesProtection(x,y))"]}
{"id": "eqasc_train_11667", "nl": "For the heart is the chief organ of the body and rules it.", "fol": "", "prediction": ["all x.(Heart(x) -> (ChairOrgan(x) & Rules(x)))"]}
{"id": "eqasc_train_11668", "nl": "Bone provides protection for the heart.", "fol": "", "prediction": ["all x.(Bone(x) -> ProvidesProtectionForHeart(x))"]}
{"id": "eqasc_train_11669", "nl": "Bone matrix consists of collagen and minerals.", "fol": "", "prediction": ["all x.(BoneMatrix(x) -> (Collagen(x) & Minerals(x)))"]}
{"id": "eqasc_train_11670", "nl": "collagen provides protection for soft tissues and internal organs.", "fol": "", "prediction": ["all x.(Collagen(x) -> (ProtectsSoftTissues(x) & ProtectsInternalOrgans(x)))"]}
{"id": "eqasc_train_11671", "nl": "Bones act as a reservoir for calcium.", "fol": "", "prediction": ["all x.(Bone(x) -> ReservoirForCalcium(x))"]}
{"id": "eqasc_train_11672", "nl": "reservoirs for calcium provide protection for soft tissues and internal organs", "fol": "", "prediction": ["all x y.((Reservoir(x) & Calcium(y)) -> (ProtectsSoftTissues(x) & ProtectsInternalOrgans(x)))"]}
{"id": "eqasc_train_11673", "nl": "Fertilization takes place inside the female organism.", "fol": "", "prediction": ["all x.(Fertilization(x) -> TakesPlaceInFemaleOrganism(x))"]}
{"id": "eqasc_train_11674", "nl": "Each eyed egg is a fertile egg.", "fol": "", "prediction": ["all x.(EyedEgg(x) -> FertileEgg(x))"]}
{"id": "eqasc_train_11675", "nl": "female organisms produce eggs", "fol": "", "prediction": ["all x.((FemaleOrganism(x) & ProducesEggs(x)) -> FemaleOrganism(x))"]}
{"id": "eqasc_train_11676", "nl": "Fertilization can then occur by in-vitro fertilization.", "fol": "", "prediction": ["all x.(Fertilization(x) -> InVitroFertilization(x))"]}
{"id": "eqasc_train_11677", "nl": "a process that can occur in-vitro takes place inside the female organism.", "fol": "", "prediction": ["all x y.((Process(x) & FemaleOrganism(y) & OccursInVitro(x)) -> TakesPlaceInside(x,y))"]}
{"id": "eqasc_train_11678", "nl": "the penetration of the egg by a sperm takes place inside the female organism", "fol": "", "prediction": ["all x y z.((Egg(x) & Sperm(y) & FemaleOrganism(z) & PenetratesBy(x,y)) -> TakesPlaceInside(y,z))"]}
{"id": "eqasc_train_11679", "nl": "fertilization takes place in human females", "fol": "", "prediction": ["all x y.((HumanFemale(x) & Human(y)) -> FertilizationTakesPlaceIn(x,y))"]}
{"id": "eqasc_train_11680", "nl": "The penetration of the egg by a sperm takes place inside the female organism.", "fol": "", "prediction": ["all x y.((PenetrationOfEgg(x) & Sperm(y)) -> TakesPlaceInsideFemaleOrganism(x,y))"]}
{"id": "eqasc_train_11681", "nl": "Fertilized eggs carried on female.", "fol": "", "prediction": ["all x.(FertilizedEggs(x) -> CarriedOnFemale(x))"]}
{"id": "eqasc_train_11682", "nl": "eggs are carried by females", "fol": "", "prediction": ["all x y.((Egg(x) & Female(y)) -> Carries(x,y))"]}
{"id": "eqasc_train_11683", "nl": "Fatty tissue in a woman's body produces female hormones.", "fol": "", "prediction": ["all x y.((FattyTissue(x) & Woman(y)) -> ProducesFemaleHormones(x,y))"]}
{"id": "eqasc_train_11684", "nl": "Fertilization takes place inside a woman.", "fol": "", "prediction": ["all x y.((Fertilization(x) & Woman(y)) -> TakesPlaceInside(x,y))"]}
{"id": "eqasc_train_11685", "nl": "fertilization takes place inside of female humans", "fol": "", "prediction": ["all x y.((Fertilization(x) & FemaleHuman(y)) -> TakesPlaceInsideOf(x,y))"]}
{"id": "eqasc_train_11686", "nl": "Fertilization produces a diploid zygote which develops into the next sporophyte generation.", "fol": "", "prediction": ["all x y.((Fertilization(x) & DiploidZygote(y)) -> DevelopsIntoSporophyteGeneration(x,y))"]}
{"id": "eqasc_train_11687", "nl": "the next generation is produced from a zygote in the female organism", "fol": "", "prediction": ["all x y z.((Generation(x) & Zygote(y) & FemaleOrganism(z)) -> ProducedFrom(x,y,z))"]}
{"id": "eqasc_train_11688", "nl": "Sharks have internal fertilization, and most give birth to live young.", "fol": "", "prediction": ["all x.(Shark(x) -> (InternalFertilization(x) & GivesBirthToLiveYoung(x)))"]}
{"id": "eqasc_train_11689", "nl": "The female shark will give live birth.", "fol": "", "prediction": ["all x.(FemaleShark(x) -> GivesLiveBirth(x))"]}
{"id": "eqasc_train_11690", "nl": "Sunlight is the ultimate form of energy.", "fol": "", "prediction": ["all x.(Sunlight(x) -> UltimateEnergy(x))"]}
{"id": "eqasc_train_11691", "nl": "Absorbing energy causes objects to heat.", "fol": "", "prediction": ["all x.(AbsorbingEnergy(x) -> CausesHeat(x))"]}
{"id": "eqasc_train_11692", "nl": "Heat transfer always occurs from warm to cool.", "fol": "", "prediction": ["all x.(HeatTransfer(x) -> (WarmToCool(x)))"]}
{"id": "eqasc_train_11693", "nl": "Absorbing sunlight causes cool objects to warm up.", "fol": "", "prediction": ["all x.((AbsorbingSunlight(x) & CoolObject(y)) -> WarmUp(y))"]}
{"id": "eqasc_train_11694", "nl": "Collector panels absorb sunlight to heat air.", "fol": "", "prediction": ["all x.(CollectorPanel(x) -> AbsorbsSunlightToHeatAir(x))"]}
{"id": "eqasc_train_11695", "nl": "collector panels heat objects with sunlight", "fol": "", "prediction": ["all x y z.((CollectorPanel(x) & Object(y) & Sunlight(z)) -> HeatsWith(x,y,z))"]}
{"id": "eqasc_train_11696", "nl": "More sunlight is absorbed by the dark colored rock.", "fol": "", "prediction": ["all x y.((DarkColoredRock(x) & Sunlight(y)) -> Absorbs(x,y))"]}
{"id": "eqasc_train_11697", "nl": "heat is absorbed by dark colored rock ", "fol": "", "prediction": ["all x y.((Heat(x) & DarkColoredRock(y)) -> AbsorbsBy(x,y))"]}
{"id": "eqasc_train_11698", "nl": "Because their coat is black, they absorb sunlight and overheat very quickly.", "fol": "", "prediction": ["all x.((Coat(x) & Black(x)) -> (AbsorbsSunlight(x) & Overheats(x)))"]}
{"id": "eqasc_train_11699", "nl": "black objects heat quickly", "fol": "", "prediction": ["all x.(BlackObject(x) -> HeatsQuickly(x))"]}
{"id": "eqasc_train_11700", "nl": "Any object expands when heated and contracts when cooled.", "fol": "", "prediction": ["all x.((Object(x) & Heats(x) & Cooled(x)) -> Expands(x) & Contracts(x))"]}
{"id": "eqasc_train_11701", "nl": "absorbing sunlight causes objects to expands", "fol": "", "prediction": ["all x y.((Sunlight(x) & Object(y)) -> Absorbs(x,y))"]}
{"id": "eqasc_train_11702", "nl": "Sunlight, for instant, takes a full 8 minutes to cross the 150 million km to our windows.", "fol": "", "prediction": ["all x.((Sunlight(x) & Instant(x)) -> TakesFull8MinutesToCrossMillionKilometers(x))"]}
{"id": "eqasc_train_11703", "nl": "Absorbing something that takes 8 minutes to cross to Earth causes objects to heat", "fol": "", "prediction": ["all x y.((Absorbs(x,y) & TakesEightMinutesToCross(x,y)) -> CausesObjectsToHeat(x))"]}
{"id": "eqasc_train_11704", "nl": "Heat can destroy tissue.", "fol": "", "prediction": ["all x.(Heat(x) -> CanDestroyTissue(x))"]}
{"id": "eqasc_train_11705", "nl": "absorbing sunlight can destroy tissue", "fol": "", "prediction": ["all x.(AbsorbingSunlight(x) -> CanDestroyTissue(x))"]}
{"id": "eqasc_train_11706", "nl": "leaves cause objects to heat", "fol": "", "prediction": ["all x y.((Leaves(x) & Object(y)) -> CausesToHeat(x,y))"]}
{"id": "eqasc_train_11707", "nl": "igneous rocks are formed from magma cooling", "fol": "", "prediction": ["all x.(IgneousRock(x) -> FormedFromMagmaCooling(x))"]}
{"id": "eqasc_train_11708", "nl": "Granite and basalt are examples of igneous rocks.", "fol": "", "prediction": ["all x.((Granite(x) | Basalt(x)) -> IgneousRock(x))"]}
{"id": "eqasc_train_11709", "nl": "Basalt is formed from magma cooling", "fol": "", "prediction": ["all x.(Basalt(x) -> FormedFromMagmaCooling(x))"]}
{"id": "eqasc_train_11710", "nl": "Magma that erupts through volcanoes is known as lava.", "fol": "", "prediction": ["all x.((Magma(x) & EruptsThroughVolcanoes(x)) -> Lava(x))"]}
{"id": "eqasc_train_11711", "nl": "Igneous rocks are formed through volcanoes erupting and lava.", "fol": "", "prediction": ["all x.(IgneousRock(x) -> (FormedByVolcanoes(x) & Erupting(x) & Lava(x)))"]}
{"id": "eqasc_train_11712", "nl": "Finally, the magma comes to rest, cools, and solidifies.", "fol": "", "prediction": ["all x.(Magma(x) -> (ComesToRest(x) & Cools(x) & Solidifies(x)))"]}
{"id": "eqasc_train_11713", "nl": "igneous rocks are formed when magma solidifies", "fol": "", "prediction": ["all x.(IgneousRock(x) -> (MagmaSolidifies(x) & FormedBy(x,Magma)))"]}
{"id": "eqasc_train_11714", "nl": "basalt is formed from magma cooling", "fol": "", "prediction": ["all x.(Basalt(x) -> FormedFromMagmaCooling(x))"]}
{"id": "eqasc_train_11715", "nl": "Igneous rocks crystallize from magma from mantle.", "fol": "", "prediction": ["all x.(IgneousRock(x) -> CrystallizesFromMagmaFromMantle(x))"]}
{"id": "eqasc_train_11716", "nl": "The crystallized rocks are made by lava from the mantle", "fol": "", "prediction": ["all x y.((Rock(x) & Crystallized(x)) -> (MadeByLava(x,y) & Mantle(y)))"]}
{"id": "eqasc_train_11717", "nl": "Granite is an example of an igneous rock .", "fol": "", "prediction": ["all x.(Granite(x) -> IgneousRock(x))"]}
{"id": "eqasc_train_11718", "nl": "Granite is formed from magma cooling.", "fol": "", "prediction": ["all x.(Granite(x) -> FormedFromMagmaCooling(x))"]}
{"id": "eqasc_train_11719", "nl": "When the magma cools and hardens, it turns into igneous rock.", "fol": "", "prediction": ["all x.((Magma(x) & Cools(x) & Hardens(x)) -> IgneousRock(x))"]}
{"id": "eqasc_train_11720", "nl": "magma turns into igneous rocks", "fol": "", "prediction": ["all x y.((Magma(x) & IgneousRock(y)) -> TurnsInto(x,y))"]}
{"id": "eqasc_train_11721", "nl": "Igneous rocks are formed by the solidification of magma.", "fol": "", "prediction": ["all x.(IgneousRock(x) -> FormedByMagmaSolidification(x))"]}
{"id": "eqasc_train_11722", "nl": "magma solidifies into igneous rocks", "fol": "", "prediction": ["all x y.((Magma(x) & IgneousRock(y)) -> SolidifiesInto(x,y))"]}
{"id": "eqasc_train_11723", "nl": "Urine is the liquid waste product of the body that is excreted by the urinary system.", "fol": "", "prediction": ["all x.(Urine(x) -> (LiquidWasteProduct(x) & ExcretedByUrineSystem(x)))"]}
{"id": "eqasc_train_11724", "nl": "Urine tests detect drugs used up to 36 hours before a given urine collection.", "fol": "", "prediction": ["all x.(UrineTest(x) -> (DetectsDrugs(x,36) & UsedUpTo36Hours(x)))"]}
{"id": "eqasc_train_11725", "nl": "The urinary system excretes a substance used in drug testing", "fol": "", "prediction": ["all x y z.((UrinarySystem(x) & Substance(y) & DrugTesting(z)) -> Excretes(x,y,z))"]}
{"id": "eqasc_train_11726", "nl": "Liquid waste passes through the blood and the urinary system .", "fol": "", "prediction": ["all x.(LiquidWaste(x) -> (PassesThroughBlood(x) & PassesThroughUrinarySystem(x)))"]}
{"id": "eqasc_train_11727", "nl": "Urine leaves the body through the urinary system", "fol": "", "prediction": ["all x y.((Urine(x) & Body(y)) -> LeavesThroughUrineSystem(x,y))"]}
{"id": "eqasc_train_11728", "nl": "Acid urine is usually darker thatn alkaline urine.", "fol": "", "prediction": ["all x.(AcidUrine(x) -> (Darker(x) & AlkalineUrine(x)))"]}
{"id": "eqasc_train_11729", "nl": "Liquid waste can be acidic.", "fol": "", "prediction": ["all x.(LiquidWaste(x) -> Acidic(x))"]}
{"id": "eqasc_train_11730", "nl": "After urination, dry the end of the penis and replace the foreskin.", "fol": "", "prediction": ["all x.((Urination(x) & DryEndOfPenis(x) & ReplaceForeskin(x)) -> Urination(x))"]}
{"id": "eqasc_train_11731", "nl": "liquid waste comes out the end of the penis", "fol": "", "prediction": ["all x y.((LiquidWaste(x) & Penis(y)) -> ComesOutEndOf(x,y))"]}
{"id": "eqasc_train_11732", "nl": "Liquid waste is put into the bladder.", "fol": "", "prediction": ["all x.(LiquidWaste(x) -> PutIntoB bladder(x))"]}
{"id": "eqasc_train_11733", "nl": "Urine is the waste product in the bladder that is excreted by the urinary system.", "fol": "", "prediction": ["all x.(Urine(x) -> (WasteProduct(x) & InB bladder(x) & ExcretedByUrbanSystem(x)))"]}
{"id": "eqasc_train_11734", "nl": "Nitrogenous wastes leave the body in the urine.", "fol": "", "prediction": ["all x.(NitrogenousWaste(x) -> LeavesBodyInUrine(x))"]}
{"id": "eqasc_train_11735", "nl": "nitrogenous wastes are excreted in urine", "fol": "", "prediction": ["all x.(NitrogenousWaste(x) -> ExcretedInUrine(x))"]}
{"id": "eqasc_train_11736", "nl": "Mammals excrete urea in the watery form of urine .", "fol": "", "prediction": ["all x y.((Mammal(x) & Urine(y)) -> ExcretesInWateryForm(x,y))"]}
{"id": "eqasc_train_11737", "nl": "Urea is a waste product of the body that is excreted by the urinary system.", "fol": "", "prediction": ["all x.(Urea(x) -> (WasteProduct(x) & ExcretedByUrinarySystem(x)))"]}
{"id": "eqasc_train_11738", "nl": "Another readily available liquid manure is human urine.", "fol": "", "prediction": ["all x.((HumanUrine(x) & EasilyAvailableLiquidManure(x)) -> AvailableIn(x,y))"]}
{"id": "eqasc_train_11739", "nl": "readily available liquid manure is a product of the body", "fol": "", "prediction": ["all x.(RawilyAvailableLiquidManure(x) -> ProductOfBody(x))"]}
{"id": "eqasc_train_11740", "nl": "Along with water, minerals are lost in the urine.", "fol": "", "prediction": ["all x y.((Water(x) & Mineral(y)) -> LostInUrine(y))"]}
{"id": "eqasc_train_11741", "nl": "minerals are excreted through the urinary system", "fol": "", "prediction": ["all x y.((Mineral(x) & UrineSystem(y)) -> ExcretedThrough(x,y))"]}
{"id": "eqasc_train_11742", "nl": "Secondary growth forms secondary vascular tissues and bark.", "fol": "", "prediction": ["all x.(SecondaryGrowth(x) -> (FormsSecondaryVascularTissues(x) & FormsBark(x)))"]}
{"id": "eqasc_train_11743", "nl": "Secondary growth produces wood and bark in seed plants .", "fol": "", "prediction": ["all x y.((SecondaryGrowth(x) & SeedPlant(y)) -> (ProducesWood(x,y) & ProducesBark(x,y)))"]}
{"id": "eqasc_train_11744", "nl": "Secondary growth produces secondary vascular tissues in seed plants", "fol": "", "prediction": ["all x y.((SecondaryGrowth(x) & SeedPlant(y)) -> ProducesSecondaryVascularTissues(x,y))"]}
{"id": "eqasc_train_11745", "nl": "All trees have bark.", "fol": "", "prediction": ["all x.(Tree(x) -> HasBark(x))"]}
{"id": "eqasc_train_11746", "nl": "trees have secondary growth", "fol": "", "prediction": ["all x.(Tree(x) -> HasSecondaryGrowth(x))"]}
{"id": "eqasc_train_11747", "nl": "Some, such as bamboo and palm trees, have secondary growth.", "fol": "", "prediction": ["exists x.(Bamboo(x) | PalmTree(x)) & HasSecondaryGrowth(x))"]}
{"id": "eqasc_train_11748", "nl": "Secondary vascular tissues are employed by bamboo and palm trees.", "fol": "", "prediction": ["all x.(SecondaryVascularTissues(x) -> (UsedByBamboo(x) | EmployedByPalmTrees(x)))"]}
{"id": "eqasc_train_11749", "nl": "Trees have the ability to undergo secondary growth and produce a woody body.", "fol": "", "prediction": ["all x.(Tree(x) -> (UndergoesSecondaryGrowth(x) & ProducesWoodyBody(x)))"]}
{"id": "eqasc_train_11750", "nl": "trees form secondary vascular tissues and bark", "fol": "", "prediction": ["all x.(Tree(x) -> (FormsSecondaryVascularTissues(x) & FormsBark(x)))"]}
{"id": "eqasc_train_11751", "nl": "Trees secondary growth forms secondary vascular tissues.", "fol": "", "prediction": ["all x.(Tree(x) -> (SecondaryGrowth(x) & FormsSecondaryVascularTissues(x)))"]}
{"id": "eqasc_train_11752", "nl": "palm trees form secondary vascular tissues and bark", "fol": "", "prediction": ["all x.(PalmTree(x) -> (FormsSecondaryVascularTissues(x) & FormsBark(x)))"]}
{"id": "eqasc_train_11753", "nl": "Growth occuring in lateral meristems forms vascular tissues and bark", "fol": "", "prediction": ["all x y.((Growth(x) & OccursInLatinalMeristems(x)) -> (FormsVascularTissues(x) & Bark(x)))"]}
{"id": "eqasc_train_11754", "nl": "Vascular tissue refers to blood vessels.", "fol": "", "prediction": ["all x.(VascularTissue(x) -> BloodVessel(x))"]}
{"id": "eqasc_train_11755", "nl": "Secondary growth forms secondary blood vessels", "fol": "", "prediction": ["all x.(SecondaryGrowth(x) -> FormsSecondaryBloodVessels(x))"]}
{"id": "eqasc_train_11756", "nl": "air pollution can cause the pH of soil to decrease", "fol": "", "prediction": ["all x y.((AirPollution(x) & Soil(y)) -> CausesPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPPhPPhPPhPPhPPhPPhPPhPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP"]}
{"id": "eqasc_train_11757", "nl": "Research has shown that soil pH less than 6.0 can decrease crop yields.", "fol": "", "prediction": ["all x.((Research(x) & SoilPhPeakLessThan(x,6)) -> DecreasesCropYields(x))"]}
{"id": "eqasc_train_11758", "nl": "Air pollution can cause a decrease in crop yields. ", "fol": "", "prediction": ["all x.(AirPollution(x) -> DecreaseInCropYields(x))"]}
{"id": "eqasc_train_11759", "nl": "Highly acid soil is detrimental to crop growth and biological activity in soil.", "fol": "", "prediction": ["all x.(HighlyAcidSoil(x) -> (DetrimentalToCropGrowth(x) & DetrimentalToBiologicalActivity(x)))"]}
{"id": "eqasc_train_11760", "nl": "Air pollution can be detrimental to crop growth", "fol": "", "prediction": ["all x.(AirPollution(x) -> (DetrimentalToCropGrowth(x) & CanBeDetrimentalToCropGrowth(x)))"]}
{"id": "eqasc_train_11761", "nl": "Some soils are more sensitive than others to the acid dropped by air pollution.", "fol": "", "prediction": ["exists x.(Soil(x) & MoreSensitiveToAcid(x))"]}
{"id": "eqasc_train_11762", "nl": "some soils are more sensitive than others to a lowered pH", "fol": "", "prediction": ["exists x.(Soil(x) & SensitiveTo(x,loweredPH))"]}
{"id": "eqasc_train_11763", "nl": "Incineration releases pollutants into the air.", "fol": "", "prediction": ["all x.(Incineration(x) -> ReleasesPollutantsIntoAir(x))"]}
{"id": "eqasc_train_11764", "nl": "incineration can cause the pH of soil to decrease", "fol": "", "prediction": ["all x y.((Incineration(x) & Soil(y)) -> CausesPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPhPPh"]}
{"id": "eqasc_train_11765", "nl": "Compost balances the pH of soil.", "fol": "", "prediction": ["all x.(Compost(x) -> BalancesPhP(x))"]}
{"id": "eqasc_train_11766", "nl": "air pollution is balanced by compost in soil", "fol": "", "prediction": ["all x y.((AirPollution(x) & Compost(y)) -> BalancedBy(x,y))"]}
{"id": "eqasc_train_11767", "nl": "Acidity increases as the pH number decreases, and alkalinity increases as the pH number increases.", "fol": "", "prediction": ["(all x.(Acidity(x) -> DecreasesPHNumber(x)) & all y.(Alkalinity(y) -> IncreasesPHNumber(y)))"]}
{"id": "eqasc_train_11768", "nl": "air pollution can cause soil acidity to increase", "fol": "", "prediction": ["all x.(AirPollution(x) -> CausesSoilAcidityToIncrease(x))"]}
{"id": "eqasc_train_11769", "nl": "Incinerated mercury pollutes the air.", "fol": "", "prediction": ["all x.(IncineratedQuercetin(x) -> PollutesAir(x))"]}
{"id": "eqasc_train_11770", "nl": "incinerated mercury can cause the ph of soil to decrease", "fol": "", "prediction": ["all x y.((IncineratedMercury(x) & Soil(y)) -> CausesPhDecrease(x,y))"]}
{"id": "eqasc_train_11771", "nl": "Plants use cellulose for their cell walls.", "fol": "", "prediction": ["all x.(Plant(x) -> UsesCellWalls(x,CellWalls))"]}
{"id": "eqasc_train_11772", "nl": "Another important polysaccharide is cellulose.", "fol": "", "prediction": ["all x.((Polysaccharide(x) & Cellulose(x)) -> Important(x))"]}
{"id": "eqasc_train_11773", "nl": "Plants use a polysaccharide for their cell walls.", "fol": "", "prediction": ["all x.(Plant(x) -> UsesPolysaccharide(x))"]}
{"id": "eqasc_train_11774", "nl": "Most plant fibers are comprised of cellulose.", "fol": "", "prediction": ["all x.(PlantFiber(x) -> ComposedOfCellulose(x))"]}
{"id": "eqasc_train_11775", "nl": "fibers are composed of cellulose ", "fol": "", "prediction": ["all x.(Fibre(x) -> (ComposedOfCellulose(x) & ComposedOfCellulose(x)))"]}
{"id": "eqasc_train_11776", "nl": "Vegetation includes shrubs and cactus plants.", "fol": "", "prediction": ["all x.(Vegetation(x) -> (IncludesShrubs(x) | IncludesCactusPlants(x)))"]}
{"id": "eqasc_train_11777", "nl": "Cactus use cellulose for their cell walls", "fol": "", "prediction": ["all x.(Cactus(x) -> UsesCelluloseForCellWalls(x))"]}
{"id": "eqasc_train_11778", "nl": "green beans use cellulose for their cell walls.", "fol": "", "prediction": ["all x.(GreenBeans(x) -> UsesCellWalls(x,Cellulose))"]}
{"id": "eqasc_train_11779", "nl": "Animals lack cell walls.", "fol": "", "prediction": ["all x.(Animal(x) -> LacksCellWalls(x))"]}
{"id": "eqasc_train_11780", "nl": "animals lack cellulose ", "fol": "", "prediction": ["all x.(Animal(x) -> LacksCellulose(x))"]}
{"id": "eqasc_train_11781", "nl": "Producers use cellulose for their cell walls.", "fol": "", "prediction": ["all x y.((Producer(x) & Cellulose(y)) -> UsesForCellWalls(x,y))"]}
{"id": "eqasc_train_11782", "nl": "Basically, fiber is cellulose .", "fol": "", "prediction": ["all x.(Fibre(x) -> Cellulose(x))"]}
{"id": "eqasc_train_11783", "nl": "fiber is made from cell walls", "fol": "", "prediction": ["all x.(Fibre(x) -> (MadeFromCellWalls(x) & CellWalls(x)))"]}
{"id": "eqasc_train_11784", "nl": "bushes use cellulose for their cell walls", "fol": "", "prediction": ["all x.(Bush(x) -> UsesCellWalls(x,Cellulose))"]}
{"id": "eqasc_train_11785", "nl": "Cells walls are fiber.", "fol": "", "prediction": ["all x.(CellWall(x) -> Fiber(x))"]}
{"id": "eqasc_train_11786", "nl": "Plants use fiber for their cell walls", "fol": "", "prediction": ["all x y.((Plant(x) & Fiber(y)) -> UsesForCellWalls(x,y))"]}
{"id": "eqasc_train_11787", "nl": "Leaf blades contain cellulose and hemi-cellulose that are readily broken down by microbes.", "fol": "", "prediction": ["all x.(LeafBlade(x) -> (ContainsCellulose(x) & ContainsHemiCellulose(x) & BreakedDownByMicrobes(x)))"]}
{"id": "eqasc_train_11788", "nl": "plants cell walls are readily broken down by microbes", "fol": "", "prediction": ["all x y.((Plant(x) & Microbe(y)) -> BreaksCellWallsBy(x,y))"]}
{"id": "eqasc_train_11789", "nl": "adding salt to a liquid decreases the melting point of that liquid", "fol": "", "prediction": ["all x y.((Liquid(x) & AddsSalt(x,y)) -> DecreasesMeltingPoint(x,y))"]}
{"id": "eqasc_train_11790", "nl": "Water is also a liquid.", "fol": "", "prediction": ["all x.(Water(x) -> Liquid(x))"]}
{"id": "eqasc_train_11791", "nl": "adding salt to water decreases the melting point of water", "fol": "", "prediction": ["all x y.((AddingSaltToWater(x) & Water(y)) -> DecreasesMeltingPoint(x,y))"]}
{"id": "eqasc_train_11792", "nl": "Salt is sodium chloride or NaCl.", "fol": "", "prediction": ["all x.(Salt(x) -> (SodiumChloride(x) | NaCl(x)))"]}
{"id": "eqasc_train_11793", "nl": "adding sodium chloride to a liquid decreases the melting point of that liquid", "fol": "", "prediction": ["all x y.((Liquid(x) & Liquid(y)) -> AddsSodiumChlorideDecreasesMeltingPoint(x,y))"]}
{"id": "eqasc_train_11794", "nl": "The melting point depends on the nature of the liquid.", "fol": "", "prediction": ["all x.(MeltingPoint(x) -> DependsOnNatureOfLiquid(x))"]}
{"id": "eqasc_train_11795", "nl": "Adding salt to a liquid changes the nature of the liquid", "fol": "", "prediction": ["all x y z.((AddingSaltToLiquid(x) & Liquid(y) & Liquid(z)) -> ChangesNature(x,y,z))"]}
{"id": "eqasc_train_11796", "nl": "Impurities like salts would also help by lowering the melting point.", "fol": "", "prediction": ["all x.((Impurity(x) & Salt(x)) -> LowersMeltingPoint(x))"]}
{"id": "eqasc_train_11797", "nl": "Impurities decreases melting points of liquid", "fol": "", "prediction": ["all x y.((Impurities(x) & Liquid(y)) -> DecreasesMeltingPoints(x,y))"]}
{"id": "eqasc_train_11798", "nl": "Salt adds density to the water so objects float.", "fol": "", "prediction": ["all x y.((Salt(x) & Water(y)) -> AddsDensity(x,y))"]}
{"id": "eqasc_train_11799", "nl": "Objects float more easily in water with a lower melting point", "fol": "", "prediction": ["all x y.((Object(x) & Water(y) & LowerMeltingPoint(x,y)) -> FloatsFasterInWater(x,y))"]}
{"id": "eqasc_train_11800", "nl": "Salt particles come from the ocean as the spray of waves evaporates, leaving salt particles suspended in the air.", "fol": "", "prediction": ["all x y z.((SaltParticle(x) & Ocean(y) & Waves(z)) -> (ComesFrom(x,y) & SprayEvaporates(x,z) & SaltParticlesSuspendedInAir(x)))"]}
{"id": "eqasc_train_11801", "nl": "Adding something from the ocean to a liquid decreases the melting point of that liquid", "fol": "", "prediction": ["all x y z.((Addition(x,y) & Ocean(y) & Liquid(z)) -> DecreasesMeltingPoint(x,z))"]}
{"id": "eqasc_train_11802", "nl": "Sodium Chloride: It is a table salt .", "fol": "", "prediction": ["(TableSalt(SodiumChloride) & TableSalt(SodiumChloride))"]}
{"id": "eqasc_train_11803", "nl": "The addition of salt increases the density of water.", "fol": "", "prediction": ["all x.(AdditionOfSalt(x) -> IncreasesDensityOfWater(x))"]}
{"id": "eqasc_train_11804", "nl": "Increasing the density of water decreases its melting point.", "fol": "", "prediction": ["all x.((Water(x) & Density(x)) -> DecreasesMeltingPoint(x))"]}
{"id": "eqasc_train_11805", "nl": "Salinity A word describing the salt content of a liquid.", "fol": "", "prediction": ["all x.(Salinity(x) -> (DepictsSaltContent(x) & Liquid(x)))"]}
{"id": "eqasc_train_11806", "nl": "Higher salinity will decrease the melting point of a liquid", "fol": "", "prediction": ["all x y.((Liquid(x) & Liquid(y)) -> LowerSalinity(x,y))"]}
{"id": "eqasc_train_11807", "nl": "Carbon monoxide is a gas produced by furnaces and other devices that burn fuel.", "fol": "", "prediction": ["all x.(CarbonMonoxide(x) -> (ProducedByFurnace(x) & BurnsFuel(x)))"]}
{"id": "eqasc_train_11808", "nl": "Any fuel that is incompletely burned produces carbon monoxide, a colorless, odorless gas.", "fol": "", "prediction": ["all x.((Fuel(x) & IncompletelyBurned(x)) -> (ProducesCarbonMonoxide(x) & ColorlessOdorlessGas(x)))"]}
{"id": "eqasc_train_11809", "nl": "Fuel that burns incompletely in a furnace creates carbon monoxide", "fol": "", "prediction": ["all x y.((Fuel(x) & BurnsIncompletely(x,y) & Furnace(y)) -> CreatesCarbonMonoxide(x))"]}
{"id": "eqasc_train_11810", "nl": "Carbon Monoxide Carbon monoxide is a health hazard.", "fol": "", "prediction": ["all x.(CarbonMonoxide(x) -> HealthHazard(x))"]}
{"id": "eqasc_train_11811", "nl": "Furnaces and other devices that burn fuel are health hazards.", "fol": "", "prediction": ["all x.((Furnace(x) | BurnsFuel(x)) -> HealthHazard(x))"]}
{"id": "eqasc_train_11812", "nl": "Carbon monoxide can kill.", "fol": "", "prediction": ["all x.(CarbonMonoxide(x) -> CanKill(x))"]}
{"id": "eqasc_train_11813", "nl": "Burning fuel in furnaces can kill", "fol": "", "prediction": ["all x y.((Fuel(x) & Furnace(y) & BurningIn(x,y)) -> CanKill(x,y))"]}
{"id": "eqasc_train_11814", "nl": "Excessive accumulation build-up of carbon monoxide can cause suffocation.", "fol": "", "prediction": ["all x.(ExcessiveAccumulationBuildupOfCarbonMonoxide(x) -> CausesSuffocation(x))"]}
{"id": "eqasc_train_11815", "nl": "gas furnaces can cause suffocation", "fol": "", "prediction": ["all x.(GasFurnace(x) -> CausesSuffocation(x))"]}
{"id": "eqasc_train_11816", "nl": "Gas furnaces heat homes for up to 20 years.", "fol": "", "prediction": ["all x.(GasFurnace(x) -> HeatsHomesForUpTo20Years(x))"]}
{"id": "eqasc_train_11817", "nl": "carbon monoxide is produced when heating homes", "fol": "", "prediction": ["all x y.((HeatingHome(x) & HeatingHome(y)) -> CarbonMonoxideProduced(x,y))"]}
{"id": "eqasc_train_11818", "nl": "Cabins have wood burning stoves and propane furnaces.", "fol": "", "prediction": ["all x.(Cabin(x) -> (HasWoodenBurningStoves(x) & HasPropanFurnace(x)))"]}
{"id": "eqasc_train_11819", "nl": "Carbon monoxide is a gas produced by burning propane.", "fol": "", "prediction": ["all x.(CarbonMonoxide(x) -> (Gas(x) & ProducedByBurningPropan(x)))"]}
{"id": "eqasc_train_11820", "nl": "Fuel is burned inside the engine.", "fol": "", "prediction": ["all x y.((Fuel(x) & Engine(y)) -> BurnedInside(x,y))"]}
{"id": "eqasc_train_11821", "nl": "Carbon monoxide is a gas produced by furnaces and other engines.", "fol": "", "prediction": ["all x.(CarbonMonoxide(x) -> (ProducedByFurnace(x) | ProducedByEngine(x)))"]}
{"id": "eqasc_train_11822", "nl": "Producers use energy and inorganic molecules to make food.", "fol": "", "prediction": ["all x y.((Producer(x) & Energy(y) & InorganicMolecule(z)) -> MakesFood(x,y,z))"]}
{"id": "eqasc_train_11823", "nl": "Food preparation for retention of nutrients is included.", "fol": "", "prediction": ["all x.((FoodPreparation(x) & RetentionOfNutrients(x)) -> Included(x))"]}
{"id": "eqasc_train_11824", "nl": "Producers use energy and inorganic molecules for the retention of nutrients.", "fol": "", "prediction": ["all x y.((Producer(x) & Energy(y) & InorganicMolecule(z)) -> UsesForRetentionOfNutrients(x,y,z))"]}
{"id": "eqasc_train_11825", "nl": "Green plants use energy and inorganic molecules to make food", "fol": "", "prediction": ["all x.(GreenPlant(x) -> (UsesEnergy(x) & UsesInorganicMolecules(x) & MakesFood(x)))"]}
{"id": "eqasc_train_11826", "nl": "Plants use energy to make food.", "fol": "", "prediction": ["all x.(Plant(x) -> UsesEnergyToMakeFood(x))"]}
{"id": "eqasc_train_11827", "nl": "Plants are considered producers because they make their own food with the held of the sun.", "fol": "", "prediction": ["all x.((Plant(x) & MakesOwnFoodWithSun(x)) -> Producer(x))"]}
{"id": "eqasc_train_11828", "nl": "Plants make their own food from the sun", "fol": "", "prediction": ["all x y.((Plant(x) & Sun(y)) -> MakesOwnFoodFrom(x,y))"]}
{"id": "eqasc_train_11829", "nl": "Ultimately, all energy on the earth comes from the sun.", "fol": "", "prediction": ["all x.(Earth(x) -> Sun(x))"]}
{"id": "eqasc_train_11830", "nl": "producers use the sun and inorganic molecules to make food", "fol": "", "prediction": ["all x y z.((Producer(x) & Sun(y) & InorganicMolecule(z)) -> UsesToMakeFood(x,y,z))"]}
{"id": "eqasc_train_11831", "nl": "Green plants are known as producers .", "fol": "", "prediction": ["all x.(GreenPlant(x) -> Producer(x))"]}
{"id": "eqasc_train_11832", "nl": "green plants use energy and inorganic molecules to make food", "fol": "", "prediction": ["all x.(GreenPlant(x) -> (UsesEnergy(x) & UsesInorganicMolecules(x) & MakesFood(x)))"]}
{"id": "eqasc_train_11833", "nl": "Leaves make food for the plant.", "fol": "", "prediction": ["all x y.((Leaves(x) & Plant(y)) -> MakesFoodFor(x,y))"]}
{"id": "eqasc_train_11834", "nl": "Some producers have leaves to help use energy and inorganic molecules.", "fol": "", "prediction": ["exists x.(Producer(x) & HasLeaves(x) & HelpsUseEnergyAndInorganicMolecules(x))"]}
{"id": "eqasc_train_11835", "nl": "Decomposition provides resources for producers to create food.", "fol": "", "prediction": ["all x y.((Decomposition(x) & Producer(y)) -> ProvidesResourcesForCreation(x,y))"]}
{"id": "eqasc_train_11836", "nl": "Minerals are inorganic substances.", "fol": "", "prediction": ["all x.(Mineral(x) -> InorganicSubstance(x))"]}
{"id": "eqasc_train_11837", "nl": "Producers use energy and minerals to make food.", "fol": "", "prediction": ["all x.(Producer(x) -> (UsesEnergy(x) & UsesMinerals(x) & MakesFood(x)))"]}
{"id": "eqasc_train_11838", "nl": "Sun light is the provider of energy.", "fol": "", "prediction": ["all x.(SunLight(x) -> ProviderOfEnergy(x))"]}
{"id": "eqasc_train_11839", "nl": "breaking apart rocks can cause debris", "fol": "", "prediction": ["all x.((Rock(x) & BreakingApart(x)) -> CausesDebris(x))"]}
{"id": "eqasc_train_11840", "nl": "Erosion can break rocks and cause debris.", "fol": "", "prediction": ["all x.(Erosion(x) -> (BreaksRocks(x) & CausesDebris(x)))"]}
{"id": "eqasc_train_11841", "nl": "Rock debris is also know as sediment.", "fol": "", "prediction": ["all x.(RockDebris(x) -> Sediment(x))"]}
{"id": "eqasc_train_11842", "nl": "Breaking apart rocks can cause sediment", "fol": "", "prediction": ["all x y.((Rock(x) & Rock(y)) -> BreakingApart(x,y))"]}
{"id": "eqasc_train_11843", "nl": "Earthquakes are the signals of breaking rocks.", "fol": "", "prediction": ["all x.(Earthquake(x) -> BreakingRocks(x))"]}
{"id": "eqasc_train_11844", "nl": "Earthquakes can cause rock debris.", "fol": "", "prediction": ["all x.(Earthquake(x) -> CausesRockDebris(x))"]}
{"id": "eqasc_train_11845", "nl": "Hammers start breaking rock.", "fol": "", "prediction": ["all x.(Hammer(x) -> BreaksRock(x))"]}
{"id": "eqasc_train_11846", "nl": "hammers cause debris.", "fol": "", "prediction": ["all x.(Hammer(x) -> CausesDebris(x))"]}
{"id": "eqasc_train_11847", "nl": "Stones and debris can cause serious eye injuries when thrown.", "fol": "", "prediction": ["all x.((Stone(x) | Debris(x)) -> CausesSeriousEyeInjuries(x))"]}
{"id": "eqasc_train_11848", "nl": "Breaking apart rocks can cause serious eye injuries.", "fol": "", "prediction": ["all x.((Rock(x) & BreakingApart(x)) -> CanCauseSeriousEyeInjuries(x))"]}
{"id": "eqasc_train_11849", "nl": "breaking apart sandstone can cause debris", "fol": "", "prediction": ["all x.((Sandstone(x) & BreakingApart(x)) -> CanCauseDebris(x))"]}
{"id": "eqasc_train_11850", "nl": "Sledge hammers can be used to break especially hard ledges of rock.", "fol": "", "prediction": ["all x.(SledgeHammer(x) -> BreaksHardLandledges(x))"]}
{"id": "eqasc_train_11851", "nl": "hammers can cause debris", "fol": "", "prediction": ["all x.(Hammer(x) -> CanCauseDebris(x))"]}
{"id": "eqasc_train_11852", "nl": "Sediment is broken rocks", "fol": "", "prediction": ["all x.(Sediment(x) -> BrokenRocks(x))"]}
{"id": "eqasc_train_11853", "nl": "Marine debris is a worldwide problem.", "fol": "", "prediction": ["all x.(MarineDebris(x) -> WorldwideProblem(x))"]}
{"id": "eqasc_train_11854", "nl": "breaking apart rocks can cause a worldwide problem", "fol": "", "prediction": ["all x.((Rock(x) & BreakingApart(x)) -> WorldwideProblem(x))"]}
{"id": "eqasc_train_11855", "nl": "And then the construction debris cleaned up.", "fol": "", "prediction": ["all x.((ConstructionDebris(x) & CleansUp(x)) -> CleansUp(x))"]}
{"id": "eqasc_train_11856", "nl": "Breaking apart rocks can cause construction clean up.", "fol": "", "prediction": ["all x.((Rock(x) & BreakingApart(x)) -> CanCleanUpConstruction(x))"]}
{"id": "eqasc_train_11857", "nl": "Most pituitary hormones control other endocrine glands.", "fol": "", "prediction": ["all x.(PituitaryHormone(x) -> ControlsEndocrineGlands(x))"]}
{"id": "eqasc_train_11858", "nl": "Endocrine organs are ductless glands that secrete hormones into the bloodstream.", "fol": "", "prediction": ["all x.(EndocrineOrgan(x) -> (DductlessGlands(x) & SecretesHormones(x)))"]}
{"id": "eqasc_train_11859", "nl": "Most pituitary hormones control other glands that secrete hormones into the bloodstream", "fol": "", "prediction": ["all x y.((PituitaryHormone(x) & Gliom(y) & SecretesHormones(x,y)) -> ControlsGliom(x,y))"]}
{"id": "eqasc_train_11860", "nl": "Growth hormone is made by the pituitary.", "fol": "", "prediction": ["all x.(GrowthHydrogen(x) -> MadeByPituitary(x))"]}
{"id": "eqasc_train_11861", "nl": "the pituitary controls other endocrine glands", "fol": "", "prediction": ["all x y.((Pituitary(x) & EndocrineGlands(y)) -> Controls(x,y))"]}
{"id": "eqasc_train_11862", "nl": "Growth hormone is produced by the pituitary gland.", "fol": "", "prediction": ["all x.(GrowthHydrogen(x) -> ProducedByPituitaryGlands(x))"]}
{"id": "eqasc_train_11863", "nl": "growth is caused by glands", "fol": "", "prediction": ["all x y.((Glands(x) & Growth(y)) -> CausedBy(x,y))"]}
{"id": "eqasc_train_11864", "nl": "Multicellular glands include the endocrine glands .", "fol": "", "prediction": ["all x.(MulticellularGlands(x) -> (EndocrineGlands(x) & Incorporates(x,endocrineGlands)))"]}
{"id": "eqasc_train_11865", "nl": "Most pituitary hormones control other multicellular glands", "fol": "", "prediction": ["all x y.((PituitaryHormone(x) & MulticellularGlands(y)) -> Controls(x,y))"]}
{"id": "eqasc_train_11866", "nl": "When the pituitary produces FSH and LH, the ovaries respond by producing eggs.", "fol": "", "prediction": ["all x.((Pituitary(x) & ProducesFSH(x) & ProducesLH(x)) -> OvariesResponseByProducingEggs(x))"]}
{"id": "eqasc_train_11867", "nl": "Hormones tell the ovaries to produce eggs", "fol": "", "prediction": ["all x y z.((Hormone(x) & Ovarian(y) & Egg(z)) -> TellsOvariansToProduce(x,y,z))"]}
{"id": "eqasc_train_11868", "nl": "Endocrine Glands Endocrine glands are the hormone producing structures of the body.", "fol": "", "prediction": ["all x.(EndocrineGlands(x) -> (HormoneProducingStructure(x) & Body(x)))"]}
{"id": "eqasc_train_11869", "nl": "Most pituitary hormones control hormone production elsewhere in the body", "fol": "", "prediction": ["all x.(PituitaryHormone(x) -> ControlsHormoneProduction(x))"]}
{"id": "eqasc_train_11870", "nl": "Prolactin is another hormone made in the pituitary gland.", "fol": "", "prediction": ["all x.(Prolactin(x) -> MadeInPituitaryGlands(x))"]}
{"id": "eqasc_train_11871", "nl": "prolactin controls other endocrine glands", "fol": "", "prediction": ["all x y.((Prolactin(x) & EndocrineGlands(y)) -> Controls(x,y))"]}
{"id": "eqasc_train_11872", "nl": "For example, the pituitary gland located at the base of the brain produces many hormones.", "fol": "", "prediction": ["all x y.((PituitaryGlands(x) & PituitaryGlands(y) & BrainBase(x)) -> ProducesManyHormones(x))"]}
{"id": "eqasc_train_11873", "nl": "hormones produced at the base of the brain control other endocrine glands", "fol": "", "prediction": ["all x y.((Hormone(x) & BrainBase(y) & ProducedAt(x,y)) -> ControlsEndocrineGlands(x))"]}
{"id": "eqasc_train_11874", "nl": "An abnormal endocrine gland is often blamed for producing obesity.", "fol": "", "prediction": ["all x.(AnomalousEndocrineGlands(x) -> ProducesObesity(x))"]}
{"id": "eqasc_train_11875", "nl": "Pituitary hormones can be blamed for producing obesity", "fol": "", "prediction": ["all x.(PituitaryHormones(x) -> ProducesObesity(x))"]}
{"id": "eqasc_train_11876", "nl": "Hormones are produced in Endocrine Glands .", "fol": "", "prediction": ["all x y.((Hormone(x) & EndocrineGland(y)) -> ProducedIn(x,y))"]}
{"id": "eqasc_train_11877", "nl": "Pituitary hormones are controlled and produced in glands. ", "fol": "", "prediction": ["all x.(PituitaryHormone(x) -> (Controlled(x) & ProducedInGlands(x)))"]}
{"id": "eqasc_train_11878", "nl": "Endocrine organs make hormones .", "fol": "", "prediction": ["all x.(EndocrineOrgan(x) -> MakesHormones(x))"]}
{"id": "eqasc_train_11879", "nl": "organs make pituitary hormones", "fol": "", "prediction": ["all x.(Organ(x) -> MakesPituitaryHormones(x))"]}
{"id": "eqasc_train_11880", "nl": "Hormone therapy Hormones are substances that occur naturally in the body.", "fol": "", "prediction": ["all x.(Hormone(x) -> (OccursNaturallyInBody(x) & Hormone(x)))"]}
{"id": "eqasc_train_11881", "nl": "Substances in the pituitary control the endocrine glands.", "fol": "", "prediction": ["all x.((Substance(x) & Pituitary(x)) -> ControlsEndocrineGlands(x))"]}
{"id": "eqasc_train_11882", "nl": "Each endocrine gland is an integrating center.", "fol": "", "prediction": ["all x.(EndocrineGlands(x) -> IntegratingCenter(x))"]}
{"id": "eqasc_train_11883", "nl": "Most pituitary hormones control integrating centers", "fol": "", "prediction": ["all x.(PituitaryHormone(x) -> ControlsIntegratingCenters(x))"]}
{"id": "eqasc_train_11884", "nl": "Endocrine glands include the pituitary, thyroid, parathyroid, adrenal, pineal and thymus glands.", "fol": "", "prediction": ["all x.(EndocrineGlands(x) -> (PituitaryGlands(x) & ThyroidGlands(x) & ParathyroidGlands(x) & AdrenalGlands(x) & PinealGlands(x) & ThymusGlands(x)))"]}
{"id": "eqasc_train_11885", "nl": "Some pituitary hormones can control the thyroid gland", "fol": "", "prediction": ["exists x.(PituitaryHormone(x) & CanControlThyroidGum(x))"]}
{"id": "eqasc_train_11886", "nl": "Most pituitary hormones control other hormone producing structures of the body.", "fol": "", "prediction": ["all x.(PituitaryHormone(x) -> ControlsOtherHormoneProducingStructures(x))"]}
{"id": "eqasc_train_11887", "nl": "Antigens are found on cancer cells and the cells of transplanted organs.", "fol": "", "prediction": ["all x y.((Antigen(x) & CancerCell(y) & Organ(y)) -> FoundOn(x,y))"]}
{"id": "eqasc_train_11888", "nl": "Antibodies immobilize and destroy their specific antigens.", "fol": "", "prediction": ["all x.(Antibody(x) -> (ImmobilizesAntigens(x) & DisposesAntigens(x)))"]}
{"id": "eqasc_train_11889", "nl": "antibodies can destroy cancer cells", "fol": "", "prediction": ["all x.(Antibodies(x) -> CanDestroyCancerCells(x))"]}
{"id": "eqasc_train_11890", "nl": "Antigens can be found on malignant cells", "fol": "", "prediction": ["all x y.((Antigen(x) & MalignantCell(y)) -> FoundOn(x,y))"]}
{"id": "eqasc_train_11891", "nl": "antigens are found on cancer cells and the cells of transplanted kidneys", "fol": "", "prediction": ["all x y.((Antigen(x) & CancerCell(y) & OrganizedKnee(y)) -> (FoundOn(x,y) & FoundOn(x,y)))"]}
{"id": "eqasc_train_11892", "nl": "proteins foreign to the body are found on cancer cells and the cells of transplanted organs.", "fol": "", "prediction": ["all x y.((Protein(x) & CancerCell(y) & Organ(y)) -> FoundOn(x,y))"]}
{"id": "eqasc_train_11893", "nl": "antigens are found on cancer cells and the cells of transplanted livers", "fol": "", "prediction": ["all x y.((Antigen(x) & CancerCell(y) & TransplantedLiver(y)) -> (FoundOn(x,y) & FoundOn(x,y)))"]}
{"id": "eqasc_train_11894", "nl": "Anything that can trigger an immune response is called an antigen.", "fol": "", "prediction": ["all x.(TriggersImmuneResponse(x) -> Antigen(x))"]}
{"id": "eqasc_train_11895", "nl": "transplanted organs can trigger an immune response", "fol": "", "prediction": ["all x y.((TransplantedOrgan(x) & Organ(y)) -> TriggersImmuneResponse(x,y))"]}
{"id": "eqasc_train_11896", "nl": "Antibody production is triggered by antigens.", "fol": "", "prediction": ["all x.(AntibodyProduction(x) -> TriggersAntigens(x))"]}
{"id": "eqasc_train_11897", "nl": "cancer cells produce antibodies", "fol": "", "prediction": ["all x.(CancerCell(x) -> ProducesAntibodies(x))"]}
{"id": "eqasc_train_11898", "nl": "Antigens can be any molecule that causes antibody production.", "fol": "", "prediction": ["all x.(Antigen(x) -> CausesAntibodyProduction(x))"]}
{"id": "eqasc_train_11899", "nl": "A molecule that causes antibody production is found on cancer cells", "fol": "", "prediction": ["all x.((Molecule(x) & CausesAntibodyProduction(x)) -> FoundOnCancerCells(x))"]}
{"id": "eqasc_train_11900", "nl": "An antigen is a protein that prompts an immune response to cancer cells.", "fol": "", "prediction": ["all x.(Antigen(x) -> (Protein(x) & ProvokesImmuneResponseToCancerCells(x)))"]}
{"id": "eqasc_train_11901", "nl": "a protein that prompts an immune response are found on cancer cells", "fol": "", "prediction": ["all x.((Protein(x) & ProvokesImmuneResponse(x)) -> FoundOnCancerCells(x))"]}
{"id": "eqasc_train_11902", "nl": "If an antigen causes cancer, it is referred to as a pathogen.", "fol": "", "prediction": ["all x.(CausesCancer(x) -> Pathogen(x))"]}
{"id": "eqasc_train_11903", "nl": "antigens are also pathogens", "fol": "", "prediction": ["all x.(Antigen(x) -> Pathogen(x))"]}
{"id": "eqasc_train_11904", "nl": "ALL proteins are antigens.", "fol": "", "prediction": ["ALL x.(Protein(x) -> Antigen(x))"]}
{"id": "eqasc_train_11905", "nl": "proteins are found on cancer cells", "fol": "", "prediction": ["all x y.((Protein(x) & CancerCell(y)) -> FoundOn(x,y))"]}
{"id": "eqasc_train_11906", "nl": "Antibodies bound to antigen are then measured by RCAT-based amplification of the associated DNA tag.", "fol": "", "prediction": ["all x y.((Antibody(x) & Antigen(y) & BindedTo(x,y)) -> MeasuredByRCATAmplification(x,y))"]}
{"id": "eqasc_train_11907", "nl": "Cells bound by antibodies can be found on cancer cells and the cells of transplanted organs.", "fol": "", "prediction": ["all x.((Cell(x) & BoundByAntibodies(x)) -> (CancerCells(x) & OrganCells(x)))"]}
{"id": "eqasc_train_11908", "nl": "Cancerous melanoma Skin melanoma is one of the most cancerous skin cancers.", "fol": "", "prediction": ["all x.(CancerousMelanoma(x) -> SkinMelanoma(x))"]}
{"id": "eqasc_train_11909", "nl": "Antigens are found on cells in skin melanoma", "fol": "", "prediction": ["all x y.((Antigen(x) & SkinMelanomas(y)) -> FoundOnCells(x,y))"]}
{"id": "eqasc_train_11910", "nl": "Plants are multicellular eukaryotes with cell walls made of cellulose.", "fol": "", "prediction": ["all x.(Plant(x) -> (MulticellularEukaryote(x) & CellWallsMadeOfCellulose(x)))"]}
{"id": "eqasc_train_11911", "nl": "For example, the walls of plant cells are made in large part of starch and cellulose .", "fol": "", "prediction": ["all x y z.((PlantCell(x) & Wall(y) & Starch(z)) -> MadeIn(y,z))"]}
{"id": "eqasc_train_11912", "nl": "Plants are multicellular eukaryotes with starch and cellulose walls.", "fol": "", "prediction": ["all x.(Plant(x) -> (MulticellularEukaryote(x) & Starch(x) & CelluloseWalls(x)))"]}
{"id": "eqasc_train_11913", "nl": "plant cells have numerous organelles", "fol": "", "prediction": ["all x.(PlantCell(x) -> NumerousOrganelles(x))"]}
{"id": "eqasc_train_11914", "nl": "Plant cell walls are composed primarily of lignin and cellulose.", "fol": "", "prediction": ["all x.(PlantCellWall(x) -> (ComposedOfLinnin(x) & ComposedOfCellulose(x)))"]}
{"id": "eqasc_train_11915", "nl": "Plants are multicellular eukaryotes with cell walls composed primarily of lignin", "fol": "", "prediction": ["all x.(Plant(x) -> (MulticellularEukaryote(x) & CellWallsComposedOfLinnin(x)))"]}
{"id": "eqasc_train_11916", "nl": "oaks are multicellular eukaryotes with cell walls made of cellulose", "fol": "", "prediction": ["all x.(Oak(x) -> (MulticellularEukaryote(x) & CellWallsMadeOfCellulose(x)))"]}
{"id": "eqasc_train_11917", "nl": "Flowers are plant organs of reproduction.", "fol": "", "prediction": ["all x.(Flower(x) -> PlantOrgan(x))"]}
{"id": "eqasc_train_11918", "nl": "Flowers are multicellular eukaryotes with cell walls made cellulose.", "fol": "", "prediction": ["all x.(Flower(x) -> (MulticellularEukaryote(x) & CellWallsMadeFromCellulose(x)))"]}
{"id": "eqasc_train_11919", "nl": "Water lillies are one of the most ancient angiosperm plants.", "fol": "", "prediction": ["all x.(WaterLilly(x) -> AncientAngiospermPlant(x))"]}
{"id": "eqasc_train_11920", "nl": "water lillies are multicellular eukaryotes with cell walls made of cellulose", "fol": "", "prediction": ["all x.(Lilly(x) -> (MulticellularEukaryote(x) & CellWallsMadeOfCellulose(x)))"]}
{"id": "eqasc_train_11921", "nl": "Plants cell walls are made of fiber.", "fol": "", "prediction": ["all x.(Plant(x) -> MadeOfFiberCellWalls(x))"]}
{"id": "eqasc_train_11922", "nl": "Plants have nuclei", "fol": "", "prediction": ["all x.(Plant(x) -> HasNuclei(x))"]}
{"id": "eqasc_train_11923", "nl": "bacteria in soil convert atmospheric nitrogen into a form usable by plants", "fol": "", "prediction": ["all x y.((Bacteria(x) & Soil(y)) -> (ConvertsAtmosphericNitrogen(x,y) & PlantsUsableForm(x,y)))"]}
{"id": "eqasc_train_11924", "nl": "More bacteria mean healthier soil.", "fol": "", "prediction": ["all x.(MoreBacteria(x) -> HealthySoil(x))"]}
{"id": "eqasc_train_11925", "nl": "Healthier soil allows soil to convert atmospheric nitrogen into a usable form by plants.", "fol": "", "prediction": ["all x.(HealthierSoil(x) -> (ConvertsAtmosphericNitrogen(x) & UsableFormByPlants(x)))"]}
{"id": "eqasc_train_11926", "nl": "bacteria in soil convert atmospheric nitrogen into a form usable by bamboo", "fol": "", "prediction": ["all x y.((Bacteria(x) & Soil(y)) -> (ConvertsAtmosphericNitrogen(x,y) & Bamboo(x)))"]}
{"id": "eqasc_train_11927", "nl": "Rhizobial bacteria convert atmospheric nitrogen into nitrate fertilizers in a form usable by plants.", "fol": "", "prediction": ["all x.(RhizobialBacteria(x) -> (ConvertsAtmosphericNitrateToNitrateFertilizers(x) & UsableByPlants(x)))"]}
{"id": "eqasc_train_11928", "nl": "Rhizobial bacteria converts nitrogen into a fertilizer for plants", "fol": "", "prediction": ["all x.(RhizobialBacteria(x) -> (ConvertsNitrogenToFertilizer(x) & ForPlants(x)))"]}
{"id": "eqasc_train_11929", "nl": "Plants have to have nitrogen to grow.", "fol": "", "prediction": ["all x.(Plant(x) -> HasNitrogen(x))"]}
{"id": "eqasc_train_11930", "nl": "bacteria helps plants grow", "fol": "", "prediction": ["all x y.((Bacteria(x) & Plant(y)) -> HelpsGrow(x,y))"]}
{"id": "eqasc_train_11931", "nl": "Some good bacteria are in the soil and helps plants get vitamins to grow.", "fol": "", "prediction": ["exists x.(GoodBacteria(x) & InSoil(x) & HelpsPlantsGetVitamins(x))"]}
{"id": "eqasc_train_11932", "nl": "Bacteria in dirt helps plants get vitamins to grow", "fol": "", "prediction": ["all x y.((BacteriaInDirt(x) & Plant(y)) -> HelpsGetVitaminsToGrow(x,y))"]}
{"id": "eqasc_train_11933", "nl": "Plant adds nitrogen to the soil.", "fol": "", "prediction": ["all x.(Plant(x) -> AddsNitrogenToSoil(x))"]}
{"id": "eqasc_train_11934", "nl": "bacteria feed plants", "fol": "", "prediction": ["all x y.((Bacteria(x) & Plant(y)) -> Feeds(x,y))"]}
{"id": "eqasc_train_11935", "nl": "Roots associate with nitrogen fixing bacteria.", "fol": "", "prediction": ["all x.(Root(x) -> AssociatesWithNitrogenFixingBacteria(x))"]}
{"id": "eqasc_train_11936", "nl": "plants roots associate with bacteria in soil", "fol": "", "prediction": ["all x y z.((Plant(x) & Root(y) & Bacteria(z)) -> AssociatesWith(x,y,z))"]}
{"id": "eqasc_train_11937", "nl": "Like nitrogen, phosphorus is a plant nutrient.", "fol": "", "prediction": ["(LikeNitrogen(phosphorus) -> PlantNutrient(phosphorus))"]}
{"id": "eqasc_train_11938", "nl": "bacteria in soil convert a type of nutrient into a form usable by plants", "fol": "", "prediction": ["all x y z.((Bacteria(x) & Soil(y) & Nutrient(z) & InSoil(x,y)) -> ConvertsToForm(x,z))"]}
{"id": "eqasc_train_11939", "nl": "bacteria in soil converts atmospheric nitrogen into a form usable by orchids", "fol": "", "prediction": ["all x y z.((Bacteria(x) & Soil(y) & AtmosphericNitrogen(z)) -> ConvertsTo(x,z))"]}
{"id": "eqasc_train_11940", "nl": "Nitrogen deficiency increases the stress on the plants.", "fol": "", "prediction": ["all x.(NitrogenDeficiency(x) -> IncreasesStressOnPlants(x))"]}
{"id": "eqasc_train_11941", "nl": "Bacteria prevents plant stress", "fol": "", "prediction": ["all x y.((Bacteria(x) & Plant(y)) -> PreventsPlantStress(x,y))"]}
{"id": "eqasc_train_11942", "nl": "Spores are a dormant form of bacteria.", "fol": "", "prediction": ["all x.(Spore(x) -> DormantBacteria(x))"]}
{"id": "eqasc_train_11943", "nl": "Spores in soil convert atmospheric nitrogen into a form usable by plants.", "fol": "", "prediction": ["all x y.((Spore(x) & Soil(y)) -> (ConvertsAtmosphericNitrogen(x,y) & UsableForm(x,y)))"]}
{"id": "eqasc_train_11944", "nl": "Plants are the primary producers on earth.", "fol": "", "prediction": ["all x.(Plant(x) -> PrimaryProducerOnEarth(x))"]}
{"id": "eqasc_train_11945", "nl": "Bacteria in the soil convert nitrogen into a form usable by producers.", "fol": "", "prediction": ["all x y.((Bacteria(x) & Soil(y)) -> ConvertsNitrogenToForm(x,y))"]}
{"id": "eqasc_train_11946", "nl": "Bacteria are single-celled organisms.", "fol": "", "prediction": ["all x.(Bacteria(x) -> SingleCelledOrganism(x))"]}
{"id": "eqasc_train_11947", "nl": "Single-celled organisms in soil convert atmospheric nitrogen into a form usable by plants.", "fol": "", "prediction": ["all x y.((SingleCelledOrganism(x) & Soil(y)) -> ConvertsAtmosphericNitrogenToPlantForm(x,y))"]}
{"id": "eqasc_train_11948", "nl": "Many plants produce flowers.", "fol": "", "prediction": ["exists x.(Plant(x) & ProducesFlowers(x))"]}
{"id": "eqasc_train_11949", "nl": "Bacteria in soil coverts atmospheric nitrogen into a form usable by flowers.", "fol": "", "prediction": ["all x y.((Bacteria(x) & Soil(y)) -> (CovertsAtmosphericNitrogen(x,y) & FormUsableByFlowers(x)))"]}
{"id": "eqasc_train_11950", "nl": "Many consumers feed at more than one trophic level.", "fol": "", "prediction": ["all x.(Consumer(x) -> FeedsAtTropicalLevel(x))"]}
{"id": "eqasc_train_11951", "nl": "Each level on the pyramid represents a trophic level.", "fol": "", "prediction": ["all x.((Level(x) & Pyramid(x)) -> RepresentsTropicalLevel(x))"]}
{"id": "eqasc_train_11952", "nl": "Many consumers feed at more than one level on the pyramid.", "fol": "", "prediction": ["all x.(Consumer(x) -> FeedsAtMoreThanOneLevel(x))"]}
{"id": "eqasc_train_11953", "nl": "Omnivores feed at more than one trophic level", "fol": "", "prediction": ["all x.(Omnivore(x) -> FeedsAtMoreThanOneTropicalLevel(x))"]}
{"id": "eqasc_train_11954", "nl": "many humans feed at more than one trophic level", "fol": "", "prediction": ["all x y.((Human(x) & TrophicLevel(y)) -> FeedsAtMoreThanOne(x,y))"]}
{"id": "eqasc_train_11955", "nl": "Carnivores are consumers which eat animals or other consumers.", "fol": "", "prediction": ["all x.(Carnivore(x) -> (Consumer(x) & (EatsAnimals(x) | EatsOtherConsumers(x))))"]}
{"id": "eqasc_train_11956", "nl": "many carnivores feed at more than one trophic level", "fol": "", "prediction": ["all x y.((Carnivore(x) & Carnivore(y)) -> FeedsAtTropicalLevel(x,y))"]}
{"id": "eqasc_train_11957", "nl": "Trophic interactions transfer nutrients from producers to consumers.", "fol": "", "prediction": ["all x y z.((TrophicInteraction(x) & Producer(y) & Consumer(z)) -> TransfersNutrients(x,y,z))"]}
{"id": "eqasc_train_11958", "nl": "Many consumer transfer nutrients from more than one producer", "fol": "", "prediction": ["all x y z.((Consumer(x) & Producer(y) & Producer(z)) -> TransfersNutrients(x,y,z))"]}
{"id": "eqasc_train_11959", "nl": "Consumers include insects and animals.", "fol": "", "prediction": ["all x.(Consumer(x) -> (Insect(x) | Animal(x)))"]}
{"id": "eqasc_train_11960", "nl": "Many insects and animals feed at more than one trophic level.", "fol": "", "prediction": ["all x.(Insect(x) & Animal(x) & FeedsAtMoreTropicalLevel(x))"]}
{"id": "eqasc_train_11961", "nl": "Animals are known as consumers.", "fol": "", "prediction": ["all x.(Animal(x) -> Consumer(x))"]}
{"id": "eqasc_train_11962", "nl": "many animals feed at more then one trophic level", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> FeedsAtTropicalLevel(x,y))"]}
{"id": "eqasc_train_11963", "nl": "Nutrient levels are referred to as trophic status.", "fol": "", "prediction": ["all x.(NutrientLevel(x) -> TrophicStatus(x))"]}
{"id": "eqasc_train_11964", "nl": "Many consumers feed at more than one nutrient level", "fol": "", "prediction": ["all x y.((Consumer(x) & NutrientLevel(y)) -> FeedsAt(x,y))"]}
{"id": "eqasc_train_11965", "nl": "Cows and sheep are examples of primary consumers.", "fol": "", "prediction": ["all x.((Cow(x) | Sheep(x)) -> PrimaryConsumer(x))"]}
{"id": "eqasc_train_11966", "nl": "sheep can feed at more than one trophic level", "fol": "", "prediction": ["all x.(Sheep(x) -> (FeedsAtTropicalLevel(x) & MoreThanTropicalLevel(x)))"]}
{"id": "eqasc_train_11967", "nl": "many animals feed at more than one trophic level", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> FeedsAtMoreTropicalLevel(x,y))"]}
{"id": "eqasc_train_11968", "nl": "Nuts are also consumed by deer, turkey, foxes, wood ducks and squirrels.", "fol": "", "prediction": ["all x.(Nut(x) -> (ConsumedBy(x,deer) | ConsumedBy(x,turkey) | ConsumedBy(x,fox) | ConsumedBy(x,woodDucks) | ConsumedBy(x,squirrels)))"]}
{"id": "eqasc_train_11969", "nl": "wood ducks can feed at more than one trophic level", "fol": "", "prediction": ["all x.(WoodDuck(x) -> (FeedsAtTropicalLevel(x) & MoreThanTropicalLevel(x)))"]}
{"id": "eqasc_train_11970", "nl": "Consumers are heterotrophs that feed on tissues of other organisms.", "fol": "", "prediction": ["all x.(Consumer(x) -> (Heterotroph(x) & FeedsOnTissuesOfOtherOrganisms(x)))"]}
{"id": "eqasc_train_11971", "nl": "Heterotrophs may eat other organisms at more than one trophic level", "fol": "", "prediction": ["all x y.((Heterotroph(x) & Organism(y)) -> (Eats(x,y) & MoreThanOneTropicalLevel(x)))"]}
{"id": "eqasc_train_11972", "nl": "Each step along a food chain is known as a trophic level.", "fol": "", "prediction": ["all x.((Step(x) & FoodChain(x)) -> TrophicLevel(x))"]}
{"id": "eqasc_train_11973", "nl": "Many consumers feed at more than one step along a food chain", "fol": "", "prediction": ["all x y z.((Consumer(x) & FoodChain(y) & FoodChain(z)) -> (FeedsAtMoreThanOneStep(x,y) & FoodChain(y,z)))"]}
{"id": "eqasc_train_11974", "nl": "if the amount of available food and water decreases in an environment then animals may leave that environment to find food and water", "fol": "", "prediction": ["all x y.((Animal(x) & Environment(y) & DecreasesFoodAndWater(x,y)) -> MayLeave(x,y))"]}
{"id": "eqasc_train_11975", "nl": "If an environment is experiencing a drought then animals may leave that environment", "fol": "", "prediction": ["all x.((Environment(x) & ExperiencesDrought(x)) -> AnimalsMayLeave(x))"]}
{"id": "eqasc_train_11976", "nl": "Famines occur when there is a general shortage of food.", "fol": "", "prediction": ["all x.(Famine(x) -> GeneralShortageOfFood(x))"]}
{"id": "eqasc_train_11977", "nl": "If there is a famine in an environment, then animals may leave that environment", "fol": "", "prediction": ["all x y.((Famine(x) & Environment(y)) -> AnimalsMayLeave(x,y))"]}
{"id": "eqasc_train_11978", "nl": "if the amount of available food and water decreases in an environment then humans may leave that environment to find food and water", "fol": "", "prediction": ["all x y.((Environment(x) & DecreasedFoodAndWater(x)) -> HumansMayLeave(y,x))"]}
{"id": "eqasc_train_11979", "nl": "if the amount of available food and water decreases in an environment then bears may leave that environment to find food and water", "fol": "", "prediction": ["all x y.((Environment(x) & Environment(y) & DecreasesFoodAndWater(x,y)) -> BearsMayLeave(x,y))"]}
{"id": "eqasc_train_11980", "nl": "Food, water and air are the essentials of life on earth.", "fol": "", "prediction": ["all x.((Food(x) | Water(x) | Air(x)) -> EssentialOfLife(x))"]}
{"id": "eqasc_train_11981", "nl": "if the amount of essentials of life in an environment decreases then animals may leave that environment", "fol": "", "prediction": ["all x y.((Environment(x) & EssentialsOfLife(y) & Decreases(x,y)) -> AnimalsMayLeave(x,y))"]}
{"id": "eqasc_train_11982", "nl": "Food and water provided to patients by mouth is the usual means of providing nutrition to patients.", "fol": "", "prediction": ["all x y.((Food(x) & Water(y) & ProvidedByMouth(x,y)) -> ProvidesNutrition(x,y))"]}
{"id": "eqasc_train_11983", "nl": "If the nutrients available in an environment decreases, then animals may leave to find them.", "fol": "", "prediction": ["all x y.((Environment(x) & Nutrients(y) & Decreases(x,y)) -> AnimalsMayLeaveToFind(x,y))"]}
{"id": "eqasc_train_11984", "nl": "Animals have to have food, water, shelter to survive.", "fol": "", "prediction": ["all x.(Animal(x) -> (HasFood(x) & HasWater(x) & HasShelter(x)))"]}
{"id": "eqasc_train_11985", "nl": "Animals may leave an environment to survive.", "fol": "", "prediction": ["all x.(Animal(x) -> MayLeaveEnvironmentToSurvive(x))"]}
{"id": "eqasc_train_11986", "nl": "Many areas are mostly affected by the persistent drought in the shortage of food and water.", "fol": "", "prediction": ["all x.((Area(x) & PersistentDrought(x) & LackOfFoodAndWater(x)) -> AffectedBy(x,Drought,Drought))"]}
{"id": "eqasc_train_11987", "nl": "Persistent drought and food shortages can cause animals to leave that environment", "fol": "", "prediction": ["all x y.((PersistentDrought(x) & FoodShortage(y)) -> CanCauseAnimalsToLeaveEnvironment(x,y))"]}
{"id": "eqasc_train_11988", "nl": "When wild animals no longer find their own food, they cease to be a part of the balance of nature.", "fol": "", "prediction": ["all x.((WildAnimal(x) & -FindsOwnFood(x)) -> StopsBeingPartOfBalanceOfNature(x))"]}
{"id": "eqasc_train_11989", "nl": "If the amount of available food and water decreases in an environment, the animals cease to be a part of the balance of nature.", "fol": "", "prediction": ["all x y.((Animal(x) & Environment(y) & DecreasesFoodAndWater(x,y)) -> -PartOfBalanceOfNature(x))"]}
{"id": "eqasc_train_11990", "nl": "Many animals migrate, traveling to avoid bad weather, to find food, or to reproduce.", "fol": "", "prediction": ["all x.(Animal(x) -> (Migrates(x) & (AvoidsBadWeather(x) | FindsFood(x) | Reproduces(x))))"]}
{"id": "eqasc_train_11991", "nl": "When food and water sources decrease, migration increases to find food and water", "fol": "", "prediction": ["all x y.((Food(x) & WaterSource(y) & Decreases(x,y)) -> IncreasesMigrationToFind(x,y))"]}
{"id": "eqasc_train_11992", "nl": "sinkholes are formed by precipitation", "fol": "", "prediction": ["all x.(Sinkhole(x) -> (FormedByPrecipitation(x) & FormedByPrecipitation(x)))"]}
{"id": "eqasc_train_11993", "nl": "rain can cause sinkholes", "fol": "", "prediction": ["all x.(Rain(x) -> CausesSinkholes(x))"]}
{"id": "eqasc_train_11994", "nl": "Most of the precipitation is in the form of snow.", "fol": "", "prediction": ["all x.(Precipitation(x) -> Snow(x))"]}
{"id": "eqasc_train_11995", "nl": "sinkholes can be formed by snow", "fol": "", "prediction": ["all x.(Sinkhole(x) -> (FormedBySnow(x) | FormedBySnow(x)))"]}
{"id": "eqasc_train_11996", "nl": "sinkholes are formed by rain", "fol": "", "prediction": ["all x.(Sinkhole(x) -> (FormedByRain(x) & Rain(x)))"]}
{"id": "eqasc_train_11997", "nl": "Eventually, the sinkhole collapses into cavern.", "fol": "", "prediction": ["all x y.((Sinkhole(x) & Cavern(y)) -> CollapsesInto(x,y))"]}
{"id": "eqasc_train_11998", "nl": "Precipitation reaching any underground void can cause a cavern to form", "fol": "", "prediction": ["all x y.((Precipitation(x) & UndergroundVoice(y) & Reaches(x,y)) -> CausesCavernToForm(x,y))"]}
{"id": "eqasc_train_11999", "nl": "Because of sinkholes, houses have disappeared.", "fol": "", "prediction": ["all x.((House(x) & Sinkhole(x)) -> Disappears(x))"]}
{"id": "eqasc_train_12000", "nl": "Houses have disappeared because of precipitation.", "fol": "", "prediction": ["all x.(House(x) -> HasPleasant(x))"]}
{"id": "eqasc_train_12001", "nl": "Cold fronts, rain, wind and rough weather often precipitate the hot bite during the fall.", "fol": "", "prediction": ["all x.((ColdFronts(x) & Rain(x) & Wind(x) & RoughWeather(x)) -> PrecipitatesHotBite(x))"]}
{"id": "eqasc_train_12002", "nl": "Sinkholes are formed by rain and rough weather.", "fol": "", "prediction": ["all x.(Sinkhole(x) -> (FormedByRain(x) & FormedByRoughWeather(x)))"]}
{"id": "eqasc_train_12003", "nl": "Natural openings on the surface that lead to caves are called sinkholes, or swallow holes.", "fol": "", "prediction": ["all x.((NaturalOpening(x) & LeadsToCaves(x)) -> (Sinkhole(x) | SwallowHole(x)))"]}
{"id": "eqasc_train_12004", "nl": "Natural openings on the surface that lead to caves are formed by precipitation", "fol": "", "prediction": ["all x y.((NaturalOpening(x) & Surface(y) & LeadsToCaves(x,y)) -> FormedByPrecipitation(x))"]}
{"id": "eqasc_train_12005", "nl": "precipitation forms caverns", "fol": "", "prediction": ["all x y.((Precipitation(x) & Cavern(y)) -> Forms(x,y))"]}
{"id": "eqasc_train_12006", "nl": "Sinkholes are common in the southwestern portion of the subsection.", "fol": "", "prediction": ["all x.(Sinkhole(x) -> CommonInSouthwesternPurpose(x))"]}
{"id": "eqasc_train_12007", "nl": "precipitation is common in the southwestern portion of the subsection", "fol": "", "prediction": ["all x.((Precipitation(x) & SouthwesternPage(x)) -> Common(x))"]}
{"id": "eqasc_train_12008", "nl": "Female gametophytes produce eggs inside the ovaries of flowers.", "fol": "", "prediction": ["all x.(Gametophyte(x) -> ProducesEggsInOvariesOfFlowers(x))"]}
{"id": "eqasc_train_12009", "nl": "Flower buds appear in the growing tip of the plant.", "fol": "", "prediction": ["all x y.((FlowerBuoy(x) & Plant(y)) -> AppearsInGrowingTip(x,y))"]}
{"id": "eqasc_train_12010", "nl": "female gametophytes produce eggs at the tips of plants", "fol": "", "prediction": ["all x.(Gametophyte(x) -> ProducesEggsAtTipsOfPlants(x))"]}
{"id": "eqasc_train_12011", "nl": "Gametophytes are the parent of the baby fern.", "fol": "", "prediction": ["all x.(Gametophyte(x) -> ParentOfBabyFern(x))"]}
{"id": "eqasc_train_12012", "nl": "female parents of a baby fern produce eggs inside the ovaries of flowers.", "fol": "", "prediction": ["all x y.((FemaleParent(x) & BabyFern(y)) -> ProducesEggsInsideOvariesOfFlowers(x,y))"]}
{"id": "eqasc_train_12013", "nl": "Ovum, or eggs, are stored in the ovaries.", "fol": "", "prediction": ["all x.(Ovum(x) -> (StoredInOvaries(x) | StoredInOvaries(x)))"]}
{"id": "eqasc_train_12014", "nl": "Female gametophytes produce eggs inside  where ovum, or eggs, are stored of flowers.", "fol": "", "prediction": ["all x y.((FemaleGametophyte(x) & Egg(y)) -> ProducesInsideOvumOrEggs(x,y))"]}
{"id": "eqasc_train_12015", "nl": "Microspores develop into female gametophyte that produces egg in archegonium.", "fol": "", "prediction": ["all x y.((Microspore(x) & FemaleGametophyte(y) & Archegonium(y)) -> DevelopsIntoProducesEgg(x,y))"]}
{"id": "eqasc_train_12016", "nl": "microspores develop into female gametophytes ", "fol": "", "prediction": ["all x y.((Microspore(x) & FemaleGametophyte(y)) -> DevelopsInto(x,y))"]}
{"id": "eqasc_train_12017", "nl": "Megaspores develop into female gametophytes.", "fol": "", "prediction": ["all x.(Megaspore(x) -> DevelopsIntoFemaleGametophyte(x))"]}
{"id": "eqasc_train_12018", "nl": "megaspores develop to produce eggs inside the ovaries of flowers", "fol": "", "prediction": ["all x y.((Megaspore(x) & Flower(y)) -> DevelopsToProduceEggsInOvaries(x,y))"]}
{"id": "eqasc_train_12019", "nl": "Fruits develop from the ovary of the flower.", "fol": "", "prediction": ["all x.(Fruit(x) -> DevelopsFromOvary(x))"]}
{"id": "eqasc_train_12020", "nl": "Female gametophytes produce eggs inside the part of the flower where the fruit will eventually develop.", "fol": "", "prediction": ["all x.(FemaleGametophyte(x) -> ProducesEggsInsideFlower(x))"]}
{"id": "eqasc_train_12021", "nl": "female ferns can produce eggs inside the ovaries of flowers", "fol": "", "prediction": ["all x y.((FemaleFern(x) & Flower(y)) -> CanProduceEggsInOvaries(x,y))"]}
{"id": "eqasc_train_12022", "nl": "Female gametophytes produce eggs inside the fruit of flowers.", "fol": "", "prediction": ["all x.(Gametophyte(x) -> ProducesEggsInFlower(x))"]}
{"id": "eqasc_train_12023", "nl": "fruits come from the flower of a plant", "fol": "", "prediction": ["all x y.((Fruit(x) & Plant(y)) -> ComesFromFlower(x,y))"]}
{"id": "eqasc_train_12024", "nl": "Angiosperm gametophytes are in the flower.", "fol": "", "prediction": ["all x.((AngiospermGametophyte(x) & Flower(y)) -> In(x,y))"]}
{"id": "eqasc_train_12025", "nl": "gametophytes are in the ovaries", "fol": "", "prediction": ["all x.(Gametophyte(x) -> InOvaries(x))"]}
{"id": "eqasc_train_12026", "nl": "Female flower parents produce eggs inside the ovaries of flowers.", "fol": "", "prediction": ["all x y.((FemaleFlowerParent(x) & Flower(y)) -> ProducesEggsInOvaries(x,y))"]}
{"id": "eqasc_train_12027", "nl": "Female gametophytes remain unisexual.", "fol": "", "prediction": ["all x.(Gametophyte(x) -> Unisexual(x))"]}
{"id": "eqasc_train_12028", "nl": "Unisexual gametophytes produce eggs inside the ovaries of flowers", "fol": "", "prediction": ["all x y.((UnsexualGametophyte(x) & Flower(y)) -> ProducesEggsInOvaries(x,y))"]}
{"id": "eqasc_train_12029", "nl": "Currently the state flower is the peony, which originates in China.", "fol": "", "prediction": ["all x.((StateFlower(x) & Peony(x)) -> OriginatesInChina(x))"]}
{"id": "eqasc_train_12030", "nl": "Female gametophytes produce eggs inside the ovaries of peonies.", "fol": "", "prediction": ["all x.(FemaleGametophyte(x) -> ProducesEggsInOvariesOfPeonies(x))"]}
{"id": "eqasc_train_12031", "nl": "Daisy flowers grow in variety of species, colors, sizes.", "fol": "", "prediction": ["all x.(DaisyFlower(x) -> (GrowsInSpecies(x) & GrowsInColors(x) & GrowsInSizes(x)))"]}
{"id": "eqasc_train_12032", "nl": "female gametophytes produce eggs inside the ovaries of daisies", "fol": "", "prediction": ["all x y.((FemaleGametophyte(x) & Daisy(y)) -> ProducesEggsInOvaries(x,y))"]}
{"id": "eqasc_train_12033", "nl": "dew is formed when water vapor condenses over night", "fol": "", "prediction": ["all x.((WaterVaporCondenses(x) & OverNight(x)) -> FormedDew(x))"]}
{"id": "eqasc_train_12034", "nl": "Dew Droplets of water deposited when air cools and the water vapor in it condenses.", "fol": "", "prediction": ["all x y.((DewDroplet(x) & AirCools(y) & WaterVaporCondenses(x)) -> Deposits(x,y))"]}
{"id": "eqasc_train_12035", "nl": "Droplets of water are formed when water vapor condenses over night", "fol": "", "prediction": ["all x y.((Droplet(x) & WaterVaporCondenses(x) & OverNight(y)) -> FormedBy(x,y))"]}
{"id": "eqasc_train_12036", "nl": "Dew point is the temperature at which dew forms.", "fol": "", "prediction": ["all x.(DewPoint(x) -> TemperatureAt(x,DewForms))"]}
{"id": "eqasc_train_12037", "nl": "When water vapor condenses overnight, the temperature has reached the dew point.", "fol": "", "prediction": ["all x.((WaterVaporCondensesOvernight(x) & TemperatureAtDewPoint(x)) -> Condenses(x))"]}
{"id": "eqasc_train_12038", "nl": "dew is formed when water vapor turns from a gas to a liquid over night", "fol": "", "prediction": ["all x y z.((WaterVapor(x) & Gas(y) & Liquid(z) & TurnsFromTo(x,y,z)) -> FormedOverNight(x))"]}
{"id": "eqasc_train_12039", "nl": "If there is a greater dew point there is more water vapor.", "fol": "", "prediction": ["all x.((GreaterDewPoint(x) & MoreWaterVapor(x)) -> MoreWaterVapor(x))"]}
{"id": "eqasc_train_12040", "nl": "more dew condenses if the dew point is higher", "fol": "", "prediction": ["all x.((DewPointHigher(x) & DewPointHigher(x)) -> MoreDewCondenses(x))"]}
{"id": "eqasc_train_12041", "nl": "Condensation on roofs at night is common in cooler weather.", "fol": "", "prediction": ["all x.((Roof(x) & CondensationAtNight(x)) -> CoolerWeather(x))"]}
{"id": "eqasc_train_12042", "nl": "Dew is formed when water vapor is cooled at night.", "fol": "", "prediction": ["all x.((WaterVapor(x) & CooledAtNight(x)) -> DewFormation(x))"]}
{"id": "eqasc_train_12043", "nl": "Dew begins to evaporate when the temperature reaches the dew point.", "fol": "", "prediction": ["all x.((Temperature(x) & ReachesDewPoint(x)) -> Evaporates(x))"]}
{"id": "eqasc_train_12044", "nl": "condensed water vapor evaporates at certain temperatures ", "fol": "", "prediction": ["all x.((CondensedWaterVapor(x) & Temperature(x)) -> EvaporatesAt(x,certainTemperatures))"]}
{"id": "eqasc_train_12045", "nl": "Dew is formed when vapor changes to liquid", "fol": "", "prediction": ["all x.((VaporChange(x) & VaporChange(x) & LiquidChange(x)) -> FormedDew(x))"]}
{"id": "eqasc_train_12046", "nl": "Rocks and grasses glisten with dew.", "fol": "", "prediction": ["all x y.((Rock(x) | Grass(y)) -> GlistensWithDew(x))"]}
{"id": "eqasc_train_12047", "nl": "rocks and grasses glisten when water vapor condenses over night", "fol": "", "prediction": ["all x y.((Rocks(x) | Grasse(y)) & WaterVaporCondenses(x,y)) -> Glams(x))"]}
{"id": "eqasc_train_12048", "nl": "dew is formed when fog condenses over night", "fol": "", "prediction": ["all x.((FogCondenses(x) & OverNight(x)) -> FormedDew(x))"]}
{"id": "eqasc_train_12049", "nl": "dew is formed when cooling  over night", "fol": "", "prediction": ["all x.((Dew(x) & CoolingOverNight(x)) -> Formed(x))"]}
{"id": "eqasc_train_12050", "nl": "magnetism can cause objects to repel each other", "fol": "", "prediction": ["all x y.((Magnetism(x) & Object(y)) -> RepelsRepair(x,y))"]}
{"id": "eqasc_train_12051", "nl": "The agent responsible for the push or pull is the magnetic force .", "fol": "", "prediction": ["all x.((Agent(x) & (Push(x) | Pull(x))) -> MagneticForce(x))"]}
{"id": "eqasc_train_12052", "nl": "Force can cause objects to repel each other", "fol": "", "prediction": ["all x y.((Force(x) & Object(y)) -> Repels(x,y))"]}
{"id": "eqasc_train_12053", "nl": "Magnetic: When an object is attracted to or sticks to a magnet, the object is called a magnetic.", "fol": "", "prediction": ["all x.((AttractedToMagnet(x) | SticksToMagnet(x)) -> Magnetic(x))"]}
{"id": "eqasc_train_12054", "nl": "magnetism causes things to stick to a magnet", "fol": "", "prediction": ["all x y.((Magnetism(x) & Magnetism(y)) -> CausesStickTo(x,y))"]}
{"id": "eqasc_train_12055", "nl": "Electrical currents cause magnetic fields.", "fol": "", "prediction": ["all x.(ElectricalCurrent(x) -> CausesMagneticFields(x))"]}
{"id": "eqasc_train_12056", "nl": "Electrical currents can cause objects to repel each other", "fol": "", "prediction": ["all x y.((ElectricalCurrent(x) & Object(y)) -> RepelsRepair(x,y))"]}
{"id": "eqasc_train_12057", "nl": "The maglev trains are pushed and speeded up by the fact that like poles attract and unlike poles repel.", "fol": "", "prediction": ["all x y.((MaglevTrain(x) & Pole(y)) -> (Attracts(x,y) & Repels(x,y)))"]}
{"id": "eqasc_train_12058", "nl": "Maglev trains make use of magnetism to function.", "fol": "", "prediction": ["all x.(MaglevTrain(x) -> MakesUseOfMagnetism(x))"]}
{"id": "eqasc_train_12059", "nl": "A spinning electron is what causes magnetism.", "fol": "", "prediction": ["all x.(SpinningElectron(x) -> CausesMagnetism(x))"]}
{"id": "eqasc_train_12060", "nl": "a spinning electron can cause objects to repel each other", "fol": "", "prediction": ["all x y.((SpinningElectron(x) & Object(y)) -> CanRepel(x,y))"]}
{"id": "eqasc_train_12061", "nl": "Magnetic intensity is the strength of the magnetic field.", "fol": "", "prediction": ["all x.(MagneticIntensity(x) -> StrengthOfMagneticField(x))"]}
{"id": "eqasc_train_12062", "nl": "a field causes objects to repel", "fol": "", "prediction": ["all x y.((Field(x) & Object(y)) -> CausesRepel(x,y))"]}
{"id": "eqasc_train_12063", "nl": "Opposite charges repel.", "fol": "", "prediction": ["all x.(OppositeCharges(x) -> Repels(x))"]}
{"id": "eqasc_train_12064", "nl": "Magnetism can cause objects to have opposite charges.", "fol": "", "prediction": ["all x.(Magnetism(x) -> CausesOppositeCharges(x))"]}
{"id": "eqasc_train_12065", "nl": "Like magnet poles push away or repel each other.", "fol": "", "prediction": ["all x.((MagnetPole(x) & (PushAway(x) | Repels(x))) -> PushAway(x))"]}
{"id": "eqasc_train_12066", "nl": "Magnetism can cause objects to push away each other.", "fol": "", "prediction": ["all x.(Magnetism(x) -> CausesObjectsToPushAway(x))"]}
{"id": "eqasc_train_12067", "nl": "If two things have the same charge, they repel, or push away from each other.", "fol": "", "prediction": ["all x.((TwoThings(x) & SameCharge(x)) -> (Repel(x) | PushAway(x)))"]}
{"id": "eqasc_train_12068", "nl": "magnetism can cause objects to push each other away.", "fol": "", "prediction": ["all x.(Magnetism(x) -> CausesObjectsToPushAway(x))"]}
{"id": "eqasc_train_12069", "nl": "Magnetism A compass works on the principle of magnetism and points to the North Magnetic Pole.", "fol": "", "prediction": ["all x.(Compass(x) -> (WorksOnMagnetism(x) & PointsToNorthMagneticPole(x)))"]}
{"id": "eqasc_train_12070", "nl": "A compass works on the principle of the objects ability repel each other", "fol": "", "prediction": ["all x.(Compass(x) -> WorksOnPrincipleOfRepulse(x))"]}
{"id": "eqasc_train_12071", "nl": "Drop metal objects such as golf clubs, and backpacks.", "fol": "", "prediction": ["all x.((DropMetalObject(x) & (GolfClub(x) | Backpack(x))) -> Drops(x))"]}
{"id": "eqasc_train_12072", "nl": "magnetism can cause golf clubs to repel each other", "fol": "", "prediction": ["all x y.((Magnetism(x) & GolfClub(y)) -> CanRepel(x,y))"]}
{"id": "eqasc_train_12073", "nl": "Magnetism is the force where objects are attracted or repelled to one another.", "fol": "", "prediction": ["all x.(Magnetism(x) -> (AttractedObjects(x) | RepelledObjects(x)))"]}
{"id": "eqasc_train_12074", "nl": "magnetism is the force that causes objects to push or attract each other", "fol": "", "prediction": ["all x.(Magnetism(x) -> (CausesObjectsToPushOrAttract(x) & CausesObjectsToAttract(x)))"]}
{"id": "eqasc_train_12075", "nl": "Michael Faraday discovered that a magnetic field can generate an electric current.", "fol": "", "prediction": ["all x.((MagneticField(x) & GeneratesElectricCurrent(x)) -> FoundInFaraday(x))"]}
{"id": "eqasc_train_12076", "nl": "Something studied by Michael Faraday can cause objects to repel each other", "fol": "", "prediction": ["all x y.((Study(x) & MichaelFaraday(y)) -> CanRepelObjects(x,y))"]}
{"id": "eqasc_train_12077", "nl": "Magnets attract and repel.", "fol": "", "prediction": ["all x.(Magnet(x) -> (Attracts(x) & Repels(x)))"]}
{"id": "eqasc_train_12078", "nl": "magnetism attracts objects to each other", "fol": "", "prediction": ["all x y z.((Magnetism(x) & Object(y) & Magnetism(z)) -> AttractsTo(x,y,z))"]}
{"id": "eqasc_train_12079", "nl": "Copper and aluminum are both attracted and repelled by magnets.", "fol": "", "prediction": ["all x.((Cuiper(x) | Aluminum(x)) -> (AttractedByMagnets(x) & RepelledByMagnets(x)))"]}
{"id": "eqasc_train_12080", "nl": "Magnetism can cause copper to be attracted.", "fol": "", "prediction": ["all x.(Magnetism(x) -> CausesAttraction(x,Cuirconium))"]}
{"id": "eqasc_train_12081", "nl": "An object is a real-world thing.", "fol": "", "prediction": ["all x.(Object(x) -> RealWorldThing(x))"]}
{"id": "eqasc_train_12082", "nl": "Magnetism can cause real-world things to repel each other.", "fol": "", "prediction": ["all x.(Magnetism(x) -> RepelRealWorldThings(x))"]}
{"id": "eqasc_train_12083", "nl": "the Himalayas were formed by rock folding", "fol": "", "prediction": ["all x.(Himalaya(x) -> FormedByRockFolding(x))"]}
{"id": "eqasc_train_12084", "nl": "An earthquake may cause folding of the layers.", "fol": "", "prediction": ["all x.(Earthquake(x) -> MayCauseLayerFolding(x))"]}
{"id": "eqasc_train_12085", "nl": "The Himalayas were formed by earthquakes", "fol": "", "prediction": ["all x.(Himalaya(x) -> (FormedByEarthquakes(x) & FormedByEarthquakes(x)))"]}
{"id": "eqasc_train_12086", "nl": "It is located in the Himalayas on the borders of Tibet and Burma .", "fol": "", "prediction": ["all x y z.((Himalayas(x) & Tibet(y) & Burma(z)) -> (LocatedIn(x,y) & Borders(x,z)))"]}
{"id": "eqasc_train_12087", "nl": "Something located on the borders of Tibet and Burma was formed by rock folding.", "fol": "", "prediction": ["all x y.((Borders(x,y) & Tibet(y) & Burma(y)) -> FormedByRockFolding(x))"]}
{"id": "eqasc_train_12088", "nl": "Folding A fold is a bend in the rock layers.", "fol": "", "prediction": ["all x.(Folding(x) -> BendInRockLayer(x))"]}
{"id": "eqasc_train_12089", "nl": "the Himalayas were formed by a bend in rock layers.", "fol": "", "prediction": ["all x.(Himalaya(x) -> FormedByBendInRockLayer(x))"]}
{"id": "eqasc_train_12090", "nl": "Folding and metamorphic rock Folding is caused by slow compression and the rock responds by bending.", "fol": "", "prediction": ["all x.((Rock(x) & SlowCompression(x) & RockResponsesByBbending(x)) -> FoldingAndMetamorphicRockFolding(x))"]}
{"id": "eqasc_train_12091", "nl": "the Himalayas were formed by slow compression", "fol": "", "prediction": ["all x.(Himalaya(x) -> FormedBySlowCompression(x))"]}
{"id": "eqasc_train_12092", "nl": "Folded mountain ranges are formed by plate tectonics.", "fol": "", "prediction": ["all x.(FoldedMountainRange(x) -> FormedByPlateTectonics(x))"]}
{"id": "eqasc_train_12093", "nl": "the Himalayas were formed by plate tectonics", "fol": "", "prediction": ["all x.(Himalayas(x) -> FormedByPlateTectonics(x))"]}
{"id": "eqasc_train_12094", "nl": "Mountains are formed from folds that bend upward.", "fol": "", "prediction": ["all x.(Mountain(x) -> (FormedFromFolds(x) & BendsUpward(x)))"]}
{"id": "eqasc_train_12095", "nl": "mountains are made by rock folding", "fol": "", "prediction": ["all x.(Mountain(x) -> (MadeByRockFolding(x) & RockFolding(x)))"]}
{"id": "eqasc_train_12096", "nl": "Folds are especially well defined in layered, or stratified rock.", "fol": "", "prediction": ["all x.(Fold(x) -> (WellDefinedInLayer(x) | WellDefinedInStratifiedRock(x)))"]}
{"id": "eqasc_train_12097", "nl": "stratified rock forms the Himalayas", "fol": "", "prediction": ["all x y.((StratifiedRock(x) & Himalayas(y)) -> Forms(x,y))"]}
{"id": "eqasc_train_12098", "nl": "For big mountain background, check out the Himalayas .", "fol": "", "prediction": ["all x.((BigMountainBackground(x) & Himalayas(x)) -> Check(x))"]}
{"id": "eqasc_train_12099", "nl": "big mountains were formed by rock folding", "fol": "", "prediction": ["all x.((BigMountain(x) & RockFolding(x)) -> FormedBy(x,rockFolding))"]}
{"id": "eqasc_train_12100", "nl": "Movements in the earth's crust have folded and cracked the older rocks.", "fol": "", "prediction": ["all x y.((Movement(x) & EarthsCrust(y)) -> (Folded(x,y) & Cracked(x,y)))"]}
{"id": "eqasc_train_12101", "nl": "the Himalayas were formed from older rock", "fol": "", "prediction": ["all x.(Himalayas(x) -> FormedFromOlderRock(x))"]}
{"id": "eqasc_train_12102", "nl": "If the rocks are not as brittle, they will either tilt or fold.", "fol": "", "prediction": ["all x.((Rock(x) & -Brittle(x)) -> (Tilt(x) | Fold(x)))"]}
{"id": "eqasc_train_12103", "nl": "Himalayas are comprised of brittle rock", "fol": "", "prediction": ["all x.(Himalaya(x) -> (BrittleRock(x) & ComposedOf(x,y)))"]}
{"id": "eqasc_train_12104", "nl": "Folds are examples of ductile rock deformation.", "fol": "", "prediction": ["all x.(Fold(x) -> DuctileRockDeformation(x))"]}
{"id": "eqasc_train_12105", "nl": "The Himalayas were formed by ductile rock deformation.", "fol": "", "prediction": ["all x.(Himalaya(x) -> FormedByDuctileRockDeformation(x))"]}
{"id": "eqasc_train_12106", "nl": "a mutation in the sex cells of a parent can cause a new trait to appear in the parent 's offspring", "fol": "", "prediction": ["all x y z.((MutationInSexCells(x) & Parent(y) & ParentOffspring(z)) -> (MutationCanCauseNewTrait(x,y,z) & AppearsInOffspring(x,y,z)))"]}
{"id": "eqasc_train_12107", "nl": "Mutations are accidental alterations of the genetic code in a cell.", "fol": "", "prediction": ["all x y.((Mutations(x) & Cell(y)) -> AccidentalAlterationsOfGeneticCode(x,y))"]}
{"id": "eqasc_train_12108", "nl": "Accidental alterations of the genetic code in a cell can cause new traits to appear in a parent's offspring.", "fol": "", "prediction": ["all x y.((AttentionalAlterationsOfGeneticCode(x) & Cell(y)) -> CanCauseNewTraits(x,y))"]}
{"id": "eqasc_train_12109", "nl": "Sex cells, also called gametes, are the sperm in males and the ova in females.", "fol": "", "prediction": ["all x.(SexCell(x) -> (Gamete(x) & SpermInMale(x) & SpermInFemale(x)))"]}
{"id": "eqasc_train_12110", "nl": "A mutation in the gametes of a parent can cause a new trait to appear in the parent 's offspring", "fol": "", "prediction": ["all x y z.((MutationInGametes(x) & Parent(y) & ParentOffspring(z)) -> (MutationCanCauseNewTrait(x,y,z) & AppearInOffspring(x,y,z)))"]}
{"id": "eqasc_train_12111", "nl": "Traits are initiated by mutation and recombination.", "fol": "", "prediction": ["all x.(Trait(x) -> (InitiatedByMutation(x) & InitiatedByRecombination(x)))"]}
{"id": "eqasc_train_12112", "nl": "a mutation can be caused by recombination", "fol": "", "prediction": ["all x.(Mutation(x) -> CausedByRecombination(x))"]}
{"id": "eqasc_train_12113", "nl": "a mutation in the gametes of a parent can cause a new trait to appear in the parent 's offspring", "fol": "", "prediction": ["all x y z.((MutationInGametes(x) & Parent(y) & ParentOffspring(z)) -> (MutationCanCauseNewTrait(x,y,z) & AppearInOffspring(x,y,z)))"]}
{"id": "eqasc_train_12114", "nl": "Child' is ambiguous between 'offspring' and 'immature offspring'.", "fol": "", "prediction": ["all x.((Child(x) & Offspring(x) & ImmatureOffspring(x)) -> Ambiguous(x))"]}
{"id": "eqasc_train_12115", "nl": "A mutation in the sex cells of a parent can cause a new trait to appear in the parent's child.", "fol": "", "prediction": ["all x y.((MutationInSexCells(x) & Parent(y)) -> NewTrait(x,y))"]}
{"id": "eqasc_train_12116", "nl": "Alleles arise by mutation.", "fol": "", "prediction": ["all x.(Allel(x) -> (ArisesByMutation(x) & Mutation(x)))"]}
{"id": "eqasc_train_12117", "nl": "the sex cells of a parent can cause new alleles to appear", "fol": "", "prediction": ["all x y.((SexCell(x) & Parent(y)) -> CanCauseNewAlleles(x,y))"]}
{"id": "eqasc_train_12118", "nl": "Fathers parent differently than mothers.", "fol": "", "prediction": ["all x y.((Father(x) & Mother(y)) -> ParentDifferently(x,y))"]}
{"id": "eqasc_train_12119", "nl": "A mutation in the sex cells of the mother or father can cause  new trait to appear in their offspring.", "fol": "", "prediction": ["all x y.((Mutation(x) & SexCells(y) & (Mother(x) | Father(x))) -> NewTrait(x,y))"]}
{"id": "eqasc_train_12120", "nl": "A mutation in parent's sex cells can cause new traits to appear in a child", "fol": "", "prediction": ["all x y.((MutationInParentsSexCells(x) & Child(y)) -> CanCauseNewTraits(x,y))"]}
{"id": "eqasc_train_12121", "nl": "Sometimes animal offspring look very different from their parents.", "fol": "", "prediction": ["exists x.(AnimalOffspring(x) & LooksDifferentFromParents(x))"]}
{"id": "eqasc_train_12122", "nl": "A mutation in the sex cells of a parent can cause children to look very different from their parents.", "fol": "", "prediction": ["all x y.((MutationInSexCells(x) & Parent(y)) -> CanCauseChildrenToLookDifferentFromParents(x,y))"]}
{"id": "eqasc_train_12123", "nl": "Upon reproduction, offspring are subject to mutation.", "fol": "", "prediction": ["all x.((Offspring(x) & Reproduction(x)) -> SubjectToMutation(x))"]}
{"id": "eqasc_train_12124", "nl": "mutation causes new traits during reproduction", "fol": "", "prediction": ["all x y.((Mutation(x) & Reproduction(y)) -> CausesNewTraits(x,y))"]}
{"id": "eqasc_train_12125", "nl": "An adaptive trait helps an organism survive in a particular environment.", "fol": "", "prediction": ["all x y.((AdaptiveTrait(x) & Organism(y)) -> HelpsSurviveInEnvironment(x,y))"]}
{"id": "eqasc_train_12126", "nl": "mutation in the sex cells of a parent can help the offspring survive", "fol": "", "prediction": ["all x y.((MutationInSexCells(x) & Parent(y)) -> HelpsOffspringSurvive(x,y))"]}
{"id": "eqasc_train_12127", "nl": "Fertilization occurs when a sperm and an egg fuse to form a diploid zygote.", "fol": "", "prediction": ["all x y.((Fertilization(x) & Sperm(y) & Egg(y)) -> FusesToFormDiploidZygote(x,y))"]}
{"id": "eqasc_train_12128", "nl": "Fertilization occurs when a male gamete and an egg fuse together to form a diploid zygote.", "fol": "", "prediction": ["all x y.((Fertilization(x) & MaleGamete(y) & Egg(y)) -> FuseToFormDiplote(x,y))"]}
{"id": "eqasc_train_12129", "nl": "Fertilization occurs when haploid gametes unite", "fol": "", "prediction": ["all x y.((HaploidGamete(x) & HaploidGamete(y)) -> Fertilization(x))"]}
{"id": "eqasc_train_12130", "nl": "An embryo created in the fertility process is human life.", "fol": "", "prediction": ["all x.((Embryo(x) & CreatedInFertilityProcess(x)) -> HumanLife(x))"]}
{"id": "eqasc_train_12131", "nl": "fusing of sperm and egg create new life", "fol": "", "prediction": ["all x y z.((Fusing(x,y) & Sperm(y) & Egg(z)) -> CreatesNewLife(x,z))"]}
{"id": "eqasc_train_12132", "nl": "Penetration is when the sperm and egg meet and the sperm makes it way into the egg cytoplasm.", "fol": "", "prediction": ["all x y z.((Ssperm(x) & Egg(y) & Sperm(z) & Meet(x,y) & MakesWayIntoCytoplasm(z,y)) -> Penetration(x,z))"]}
{"id": "eqasc_train_12133", "nl": "fertilization requires penetration", "fol": "", "prediction": ["all x.(Fertilization(x) -> RequiresPenetration(x))"]}
{"id": "eqasc_train_12134", "nl": "Fertilization occurs when a male gamete and an egg fuse to form a diploid zygote.", "fol": "", "prediction": ["all x y.((Fertilization(x) & MaleGamete(y) & Egg(y)) -> FusesToFormDiploidZygote(x,y))"]}
{"id": "eqasc_train_12135", "nl": "Fertilization occurs when gametes fuse to form a diploid zygote.", "fol": "", "prediction": ["all x y.((Gamete(x) & Gamete(y) & FusesToFormDiploidZygote(x,y)) -> Fertilization(x))"]}
{"id": "eqasc_train_12136", "nl": "Familiar types of gamete include the female ovum , or egg cell, and the male sperm cell.", "fol": "", "prediction": ["all x.(Gamete(x) -> (FamiliarTypes(x) & FemaleOvum(x) | FemaleEggCell(x)) & MaleSpermCell(x)))"]}
{"id": "eqasc_train_12137", "nl": "Fertilization occurs when the male and female gametes fuse to form a diploid zygote.", "fol": "", "prediction": ["all x y.((Fertilization(x) & MaleGamete(y) & FemaleGamete(y)) -> FusesToFormDiplote(x,y))"]}
{"id": "eqasc_train_12138", "nl": "If a female sperm fertilizes the egg, the result is a baby girl.", "fol": "", "prediction": ["all x y.((FemaleSsperm(x) & Egg(y) & Fertilizes(x,y)) -> BabySheep(x))"]}
{"id": "eqasc_train_12139", "nl": "A baby girl will be the result of female sperm fusing with an egg to form a diploid zygote.", "fol": "", "prediction": ["all x y.((BabyGirl(x) & FemaleSsperm(y) & FusingWithEgg(y,x)) -> DiploidZygote(x))"]}
{"id": "eqasc_train_12140", "nl": "fertilization occurs when gametes fuse to form a diploid zygote", "fol": "", "prediction": ["all x y.((Gamete(x) & Gamete(y) & FuseToFormDiploidZygote(x,y)) -> FertilizationOccurs(x))"]}
{"id": "eqasc_train_12141", "nl": "Sexual reproduction involves a sperm and egg fusing to form a diploid zygote.", "fol": "", "prediction": ["all x y.((SexualReproduction(x) & Sperm(y) & Egg(y)) -> InvolvesFusingToFormDiplote(x,y))"]}
{"id": "eqasc_train_12142", "nl": "If a human ovum is fertilized, a zygote is formed.", "fol": "", "prediction": ["all x.((HumanOvum(x) & Fertilized(x)) -> ZygoteFormation(x))"]}
{"id": "eqasc_train_12143", "nl": "a zygote is formed by an ovum", "fol": "", "prediction": ["all x y.((Zygote(x) & Ovum(y)) -> FormedBy(x,y))"]}
{"id": "eqasc_train_12144", "nl": "seed dispersal has a positive impact on a plant", "fol": "", "prediction": ["all x y.((SeedDispersal(x) & Plant(y)) -> PositiveImpactOn(x,y))"]}
{"id": "eqasc_train_12145", "nl": "Seed dispersal is usually by birds.", "fol": "", "prediction": ["all x.(SeedDispersal(x) -> Bird(x))"]}
{"id": "eqasc_train_12146", "nl": "Birds can have a positive impact on plants.", "fol": "", "prediction": ["all x y.((Bird(x) & Plant(y)) -> PositiveImpact(x,y))"]}
{"id": "eqasc_train_12147", "nl": "Moisture levels before planting and flowering have the greatest impact on yield.", "fol": "", "prediction": ["all x.((MoistureLevel(x) & BeforePlanting(x) & BeforeFlowering(x)) -> GreatestImpactOnYield(x))"]}
{"id": "eqasc_train_12148", "nl": "Seed dispersal has a positive impact on flowering and yield.", "fol": "", "prediction": ["all x.(SeedDispersal(x) -> (PositiveImpactOnFlowering(x) & PositiveImpactOnYield(x)))"]}
{"id": "eqasc_train_12149", "nl": "Grape seeds are dispersed by animals.", "fol": "", "prediction": ["all x.(GrapeSeed(x) -> DispersedByAnimals(x))"]}
{"id": "eqasc_train_12150", "nl": "animals have positive impacts on plants", "fol": "", "prediction": ["all x y.((Animal(x) & Plant(y)) -> PositiveImpactOn(x,y))"]}
{"id": "eqasc_train_12151", "nl": "birds have a positive impact on plants", "fol": "", "prediction": ["all x y.((Bird(x) & Plant(y)) -> PositiveImpactOn(x,y))"]}
{"id": "eqasc_train_12152", "nl": "Result is animals carry seeds elsewhere, dispersing the plant.", "fol": "", "prediction": ["all x y.((Animal(x) & Seed(y)) -> (Carries(x,y) & DispersesPlant(x)))"]}
{"id": "eqasc_train_12153", "nl": "Animals carry seeds which is positive for the plant to grow elsewhere", "fol": "", "prediction": ["all x y.((Animal(x) & Seed(y)) -> (Carries(x,y) & PositiveForPlant(x,y)))"]}
{"id": "eqasc_train_12154", "nl": "Plants are the foundation of the ecosystem's food chain.", "fol": "", "prediction": ["all x.(Plant(x) -> FoundationOfEcosystemsFoodChain(x))"]}
{"id": "eqasc_train_12155", "nl": "Seed dispersal has a positive impact on an ecosystem's food chain.", "fol": "", "prediction": ["all x y.((SeedDispersal(x) & Ecosystem(y)) -> PositiveImpactOnFoodChain(x,y))"]}
{"id": "eqasc_train_12156", "nl": "Humans depend on plants and animals for survival.", "fol": "", "prediction": ["all x.(Human(x) -> (DependsOnPlants(x) & DependsOnAnimals(x)))"]}
{"id": "eqasc_train_12157", "nl": "seed dispersal has a positive impact on human survival", "fol": "", "prediction": ["all x.(SeedDispersal(x) -> PositiveImpactOnHumanSurvival(x))"]}
{"id": "eqasc_train_12158", "nl": "Seeds are dispersed by the winds and by animals.", "fol": "", "prediction": ["all x y.((Seed(x) & Wind(y) & Animal(z)) -> DispersedBy(x,y,z))"]}
{"id": "eqasc_train_12159", "nl": "Winds and animals have a positive impact on plants", "fol": "", "prediction": ["all x y.((Wind(x) & Animal(y)) -> PositiveImpactOnPlants(x,y))"]}
{"id": "eqasc_train_12160", "nl": "Population density is the average number of individuals per unit of area or volume.", "fol": "", "prediction": ["all x.(PopulationDensity(x) -> (AverageNumberOfIndividuals(x) & PerUnitOfAreaOrVolume(x)))"]}
{"id": "eqasc_train_12161", "nl": "Density is the population divided by the area.", "fol": "", "prediction": ["all x.(Density(x) -> PopulationDividedByArea(x))"]}
{"id": "eqasc_train_12162", "nl": "the population divided by the area is the average number of individuals per unit of area or volume.", "fol": "", "prediction": ["all x.((Population(x) & DividedByArea(x)) -> AverageNumberOfIndividualsPerUnitOfAreaOrVolume(x))"]}
{"id": "eqasc_train_12163", "nl": "Population crashes in high density populations are so devastating that extinction becomes probable.", "fol": "", "prediction": ["all x.((PopulationCrashes(x) & HighDensityPopulations(x)) -> Devastating(x))"]}
{"id": "eqasc_train_12164", "nl": "If the number of individuals of a species increases too quickly too much in a fixed area, the species can become extinct", "fol": "", "prediction": ["all x y.((Species(x) & IncreasesTooQuicklyTooMuchInFixedArea(x)) -> CanBecomeExtinct(y))"]}
{"id": "eqasc_train_12165", "nl": "Population densities affect the balance of the environment.", "fol": "", "prediction": ["all x.(PopulationDensity(x) -> AffectsEnvironmentalBalance(x))"]}
{"id": "eqasc_train_12166", "nl": "the average number of individuals per unit of area affect the balance of the environment.", "fol": "", "prediction": ["all x.(AverageNumberOfIndividualsPerUnitOfArea(x) -> AffectsEnvironmentalBalance(x))"]}
{"id": "eqasc_train_12167", "nl": "Population density varies considerably.", "fol": "", "prediction": ["all x.(PopulationDensity(x) -> Variable(x))"]}
{"id": "eqasc_train_12168", "nl": "the average number of individuals per unit of area varies considerably", "fol": "", "prediction": ["all x.((Individuals(x) & UnitOfArea(x)) -> Variable(x))"]}
{"id": "eqasc_train_12169", "nl": "Another measure of growth is population density.", "fol": "", "prediction": ["all x.((MeasurementOfGrowth(x) & PopulationDensity(x)) -> MeasuresGrowth(x))"]}
{"id": "eqasc_train_12170", "nl": "Growth of an area can be determined by the average number of people per unit of area.", "fol": "", "prediction": ["all x y.((Area(x) & Area(y)) -> AverageNumberOfPeoplePerUnit(x,y))"]}
{"id": "eqasc_train_12171", "nl": "A measure of growth is the average number of individuals per unit of area or volume", "fol": "", "prediction": ["all x.(MeasureOfGrowth(x) -> (AverageNumberOfIndividualsPerUnitOfAreaOrVolume(x) & PerUnitOfVolumeOrAreaOrVolume(x)))"]}
{"id": "eqasc_train_12172", "nl": "the average number of individuals per unit of area or volume can vary considerably.", "fol": "", "prediction": ["all x.((Individual(x) & (UnitOfArea(x) | UnitOfVolume(x))) -> Variable(x))"]}
{"id": "eqasc_train_12173", "nl": "The balance of the environment is affected by the average number of individuals per unit of area or volume", "fol": "", "prediction": ["all x.((EnvironmentBalance(x) & AverageNumberOfIndividualsPerUnitOfAreaOrVolume(x)) -> AffectedBy(x,AverageNumberOfIndividuals(x))"]}
{"id": "eqasc_train_12174", "nl": "Economy is affected by population size and density.", "fol": "", "prediction": ["all x.(Economy(x) -> (AffectedByPopulationSize(x) & AffectedByDensity(x)))"]}
{"id": "eqasc_train_12175", "nl": "economy is affected by the average number of individuals per unit of area or volume", "fol": "", "prediction": ["all x.((Economy(x) & AverageNumberOfIndividualsPerUnitOfAreaOrVolume(x)) -> AffectedBy(x,AverageNumberOfIndividuals(x))"]}
{"id": "eqasc_train_12176", "nl": "Centrioles are organelles involved in cell division.", "fol": "", "prediction": ["all x.(Centriole(x) -> OrganelleInCellDividending(x))"]}
{"id": "eqasc_train_12177", "nl": "Centrioles come in pairs.", "fol": "", "prediction": ["all x.(Centriole(x) -> ComesInPairs(x))"]}
{"id": "eqasc_train_12178", "nl": "Something that comes in pairs are organelles involved in cell division", "fol": "", "prediction": ["all x.((ComesInPairs(x) & Organelle(x)) -> CellDivision(x))"]}
{"id": "eqasc_train_12179", "nl": "New cells are then created through cell division.", "fol": "", "prediction": ["all x.(CellDivision(x) -> CreatesNewCells(x))"]}
{"id": "eqasc_train_12180", "nl": "Centrioles are organelles involved in creating new cells", "fol": "", "prediction": ["all x.(Centriole(x) -> (Organelle(x) & CreatesNewCells(x)))"]}
{"id": "eqasc_train_12181", "nl": "Centrioles are organelles involved in mitosis.", "fol": "", "prediction": ["all x.(Centriole(x) -> (Organelle(x) & InvolvedInMitosis(x)))"]}
{"id": "eqasc_train_12182", "nl": "Basal bodies function as centrioles.", "fol": "", "prediction": ["all x.(BasalBody(x) -> FunctionsAsCentrioles(x))"]}
{"id": "eqasc_train_12183", "nl": "Basal bodies function as organelles involved in cell division", "fol": "", "prediction": ["all x.(BasalBody(x) -> FunctionsAsOrganelles(x))"]}
{"id": "eqasc_train_12184", "nl": "Organelles that come in pairs are involved in cell division.", "fol": "", "prediction": ["all x.((Organelle(x) & ComesInPairs(x)) -> InvolvedInCellDividend(x))"]}
{"id": "eqasc_train_12185", "nl": "Centrioles are organelles involved in mitosis", "fol": "", "prediction": ["all x.(Centriole(x) -> (Organelle(x) & InvolvedInMitosis(x)))"]}
{"id": "eqasc_train_12186", "nl": "basal bodies are involved in cell division", "fol": "", "prediction": ["all x.(BasalBody(x) -> CellDivision(x))"]}
{"id": "eqasc_train_12187", "nl": "a battery converts chemical energy into electrical energy", "fol": "", "prediction": ["all x y.((Battery(x) & ChemicalEnergy(y)) -> ConvertsToElectricalEnergy(x,y))"]}
{"id": "eqasc_train_12188", "nl": "Electrical energy is used to power a lamp.", "fol": "", "prediction": ["all x y.((ElectricalEnergy(x) & Lamp(y)) -> Powers(x,y))"]}
{"id": "eqasc_train_12189", "nl": "A battery converts chemical energy into something that can power a lamp.", "fol": "", "prediction": ["all x y.((Battery(x) & Lamp(y)) -> ConvertsChemicalEnergyToPower(x,y))"]}
{"id": "eqasc_train_12190", "nl": "Electricity is a form of energy and is sometimes called electrical energy.", "fol": "", "prediction": ["all x.(Electricity(x) -> (FormOfEnergy(x) & OftenCalledElectricalEnergy(x)))"]}
{"id": "eqasc_train_12191", "nl": "Battery electricity comes conversion ", "fol": "", "prediction": ["all x.(BatteryElectricityComesConversion(x) -> ComesConversion(x))"]}
{"id": "eqasc_train_12192", "nl": "a battery can convert chemical energy into kinetic energy", "fol": "", "prediction": ["all x y.((Battery(x) & ChemicalEnergy(y)) -> ConvertsToKineticEnergy(x,y))"]}
{"id": "eqasc_train_12193", "nl": "Battery life is several months for a AA lithium cell.", "fol": "", "prediction": ["all x.((AAALithiumCell(x) & BatteryLife(x,y)) -> SeveralMonths(y))"]}
{"id": "eqasc_train_12194", "nl": "a AA lithium cell converts chemical energy into electrical energy", "fol": "", "prediction": ["all x.(AALithiumCell(x) -> ConvertsChemicalEnergyToElectricalEnergy(x))"]}
{"id": "eqasc_train_12195", "nl": "If we disconnect the battery, the flow of electrons is no longer driven by the chemical forces in the battery.", "fol": "", "prediction": ["all x.((Battery(x) & Disconnect(x)) -> -DrivenByChemicalForces(x))"]}
{"id": "eqasc_train_12196", "nl": "A battery produces a flow of electrons", "fol": "", "prediction": ["all x.(Battery(x) -> ProducesFlowOfElectrons(x))"]}
{"id": "eqasc_train_12197", "nl": "A battery converts chemical energy into a powerful energy source.", "fol": "", "prediction": ["all x.(Battery(x) -> ConvertsChemicalEnergyToPowerfulEnergySource(x))"]}
{"id": "eqasc_train_12198", "nl": "Cameras use batteries.", "fol": "", "prediction": ["all x.(Camera(x) -> UsesBatteries(x))"]}
{"id": "eqasc_train_12199", "nl": "cameras use electrical energy converted from chemical energy", "fol": "", "prediction": ["all x.(Camera(x) -> (UsesElectricalEnergy(x) & ConvertedFromChemicalEnergy(x)))"]}
{"id": "eqasc_train_12200", "nl": "batteries store chemicals", "fol": "", "prediction": ["all x.(Battery(x) -> StoresChemicals(x))"]}
{"id": "eqasc_train_12201", "nl": "Check the fire alarm's batteries the first of each month.", "fol": "", "prediction": ["all x.((FireAlarm(x) & Battery(x)) -> ChecksBatteries(x,firstMonth))"]}
{"id": "eqasc_train_12202", "nl": "Something in a fire alarm converts chemical energy into electrical energy", "fol": "", "prediction": ["all x y.((FireAlarm(x) & ChemicalEnergy(y)) -> ConvertsToElectricalEnergy(x,y))"]}
{"id": "eqasc_train_12203", "nl": "Duracell batteries now come with a tester built into the package.", "fol": "", "prediction": ["all x.(DuracellBattery(x) -> ComesWithTester(x))"]}
{"id": "eqasc_train_12204", "nl": "Duracell converts chemical energy into electrical energy", "fol": "", "prediction": ["all x y.((Duracell(x) & ChemicalEnergy(y)) -> ConvertsToElectricalEnergy(x,y))"]}
{"id": "eqasc_train_12205", "nl": "smell is used for finding food by some animals", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> SmellForFood(x,y))"]}
{"id": "eqasc_train_12206", "nl": "Olfaction is used for finding food by some animals.", "fol": "", "prediction": ["exists x.(Olfaction(x) & UsedForFindingFood(x))"]}
{"id": "eqasc_train_12207", "nl": "smell is used by animals to live", "fol": "", "prediction": ["all x y.((Smell(x) & Animal(y)) -> UsedToLive(x,y))"]}
{"id": "eqasc_train_12208", "nl": "Insects can smell with their antennae.", "fol": "", "prediction": ["all x.(Insect(x) -> CanSmellWithAntennae(x))"]}
{"id": "eqasc_train_12209", "nl": "Insects use their antennae to find food.", "fol": "", "prediction": ["all x.(Insect(x) -> UsesAntennaeToFindFood(x))"]}
{"id": "eqasc_train_12210", "nl": "Food is needed for survival.", "fol": "", "prediction": ["all x.(Food(x) -> NeededForSurvival(x))"]}
{"id": "eqasc_train_12211", "nl": "some animals need smell to survive", "fol": "", "prediction": ["exists x.(Animal(x) & NeedsSmell(x))"]}
{"id": "eqasc_train_12212", "nl": "olfaction is used for finding food by some animals", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> (Olfaction(x,y) & FindsFood(x,y)))"]}
{"id": "eqasc_train_12213", "nl": "Olification is used for finding food by some animals.", "fol": "", "prediction": ["exists x.(Olification(x) & FoundByAnimals(x))"]}
{"id": "eqasc_train_12214", "nl": "Another of our five major senses is the sense of smell.", "fol": "", "prediction": ["all x.(SenseOfSmell(x) -> MajorSense(x))"]}
{"id": "eqasc_train_12215", "nl": "Animals use five major senses to find food.", "fol": "", "prediction": ["all x.(Animal(x) -> UsesMajorSensesToFindFood(x))"]}
{"id": "eqasc_train_12216", "nl": "Smell receptors, nerve tissue that picks up smells, are located in the lining of the nose.", "fol": "", "prediction": ["all x y.((SmellReceptor(x) & NerveTissue(y) & PicksUpSmells(y)) -> LocatedInNasalLinening(x,y))"]}
{"id": "eqasc_train_12217", "nl": "Receptors in the lining of the nose are used to find food.", "fol": "", "prediction": ["all x.((Receptor(x) & LinensNase(x)) -> UsedToFindFood(x))"]}
{"id": "eqasc_train_12218", "nl": "Food includes small rodents and birds.", "fol": "", "prediction": ["all x.(Food(x) -> (SmallRodents(x) | SmallBirds(x)))"]}
{"id": "eqasc_train_12219", "nl": "If an animal likes to eat rodents, they may use smell to find them.", "fol": "", "prediction": ["all x.((Animal(x) & LikesToEatRodents(x)) -> (UsesSmell(x) & FindsRodents(x)))"]}
{"id": "eqasc_train_12220", "nl": "Energy grows food and keeps people alive.", "fol": "", "prediction": ["all x.(Energy(x) -> (GrowsFood(x) & KeepsPeopleAlive(x)))"]}
{"id": "eqasc_train_12221", "nl": "smell is used to stay alive by some animals", "fol": "", "prediction": ["exists x.(Animal(x) & Smell(x) & UsedToStayAlive(x))"]}
{"id": "eqasc_train_12222", "nl": "plasma is formed by electrons separating from atoms in stars", "fol": "", "prediction": ["all x y.((Plasma(x) & Star(y)) -> (FormedByElectrons(x,y) & SeparatesFromAtoms(x,y)))"]}
{"id": "eqasc_train_12223", "nl": "Plasma Defined Plasma Defined A plasma is an ionized gas.", "fol": "", "prediction": ["all x.((Plasma(x) & IonizedGas(x)) -> PlasmaDefined(x))"]}
{"id": "eqasc_train_12224", "nl": "Ionized gases are formed in stars.", "fol": "", "prediction": ["all x.(IonizedGas(x) -> FormedInStars(x))"]}
{"id": "eqasc_train_12225", "nl": "All electrons contain energy.", "fol": "", "prediction": ["all x.(Electron(x) -> ContainsEnergy(x))"]}
{"id": "eqasc_train_12226", "nl": "plasma is formed using energy", "fol": "", "prediction": ["all x y.((Plasma(x) & Energy(y)) -> FormedUsing(x,y))"]}
{"id": "eqasc_train_12227", "nl": "Plasma exists inside stars and in interstellar gases.", "fol": "", "prediction": ["all x.(Plasma(x) -> existsInsideStars(x) & existsInInterstellarGases(x))"]}
{"id": "eqasc_train_12228", "nl": "plasma is formed by electrons separating from interstellar gases. ", "fol": "", "prediction": ["all x.(Plasma(x) -> (FormedByElectrons(x) & SeparatesFromInterstellarGases(x)))"]}
{"id": "eqasc_train_12229", "nl": "Color can be seen in some bright astronomical objects, such as stars, and bright planetary nebulae.", "fol": "", "prediction": ["all x y z.((BrightAstronomicalObject(x) & BrightPlanetaryNebula(y) & BrightAstronomicalObject(z)) -> ColorSeenIn(x,y,z))"]}
{"id": "eqasc_train_12230", "nl": "Electrons separating from atoms in certain bright astronomical objects forms plasma", "fol": "", "prediction": ["all x y z.((Electron(x) & Atom(y) & BrightAstronomicalObject(z) & SeparatesFrom(x,y)) -> FormsPlasma(x,z))"]}
{"id": "eqasc_train_12231", "nl": "Plasma is more common in stars, because making plasma requires high temperatures.", "fol": "", "prediction": ["all x.((Plasma(x) & Star(x)) -> HighTemperature(x))"]}
{"id": "eqasc_train_12232", "nl": "Plasma is formed in high temperatures of the sun", "fol": "", "prediction": ["all x y.((Plasma(x) & Sun(y)) -> FormedInHighTemperatures(x,y))"]}
{"id": "eqasc_train_12233", "nl": "Stars shine because they are hot .", "fol": "", "prediction": ["all x.(Star(x) -> Shines(x))"]}
{"id": "eqasc_train_12234", "nl": "plasma is hot", "fol": "", "prediction": ["all x.(Plasma(x) -> Hot(x))"]}
{"id": "eqasc_train_12235", "nl": "Interstellar space contains a plasma.", "fol": "", "prediction": ["all x.(InterstellarSpace(x) -> ContainsPlasma(x))"]}
{"id": "eqasc_train_12236", "nl": "interstellar space contains electrons, atoms, and stars", "fol": "", "prediction": ["all x.(InterstellarSpace(x) -> (ContainsElectrons(x) & ContainsAtoms(x) & ContainsStars(x)))"]}
{"id": "eqasc_train_12237", "nl": "Most of the matter in stars is in a plasma state.", "fol": "", "prediction": ["all x.(Star(x) -> PlasmaState(x))"]}
{"id": "eqasc_train_12238", "nl": "electrons separate in stars", "fol": "", "prediction": ["all x y.((Electron(x) & Star(y)) -> SeparatesIn(x,y))"]}
{"id": "eqasc_train_12239", "nl": "Most of the plasma is electrons and protons.", "fol": "", "prediction": ["all x.(Plasma(x) -> (Electrons(x) | Protons(x)))"]}
{"id": "eqasc_train_12240", "nl": "Plasma is composed of protons", "fol": "", "prediction": ["all x.(Plasma(x) -> ComposedOfProtons(x))"]}
{"id": "eqasc_train_12241", "nl": "Most of the universe is in the plasma state.", "fol": "", "prediction": ["all x.(Universe(x) -> PlasmaState(x))"]}
{"id": "eqasc_train_12242", "nl": "most of the universe is composed of electrons separated from atoms in stars", "fol": "", "prediction": ["all x y z.((Universe(x) & Electron(y) & Atom(z)) -> (ComposedOf(x,y) & SeparatedFrom(y,z)))"]}
{"id": "eqasc_train_12243", "nl": "Plasma Is the liquid portion of the blood.", "fol": "", "prediction": ["all x.(Plasma(x) -> LiquidPieceOfBlood(x))"]}
{"id": "eqasc_train_12244", "nl": "The liquid portion of the blood is formed by electrons separating from atoms in stars.", "fol": "", "prediction": ["all x y.((LiquidPieceOfBlood(x) & Electrons(y) & Stars(z)) -> FormedBy(x,y,z))"]}
{"id": "eqasc_train_12245", "nl": "Gas Ionization Losing electrons ionizes the atoms in a gas.", "fol": "", "prediction": ["all x y.((GasIonization(x) & Electrons(y)) -> LosesIonization(x,y))"]}
{"id": "eqasc_train_12246", "nl": "A plasma state requires ionization in a gas", "fol": "", "prediction": ["all x y.((PlasmaState(x) & Gas(y)) -> RequiresIonization(x,y))"]}
{"id": "eqasc_train_12247", "nl": "Metal atoms are ionized in an intense plasma.", "fol": "", "prediction": ["all x.(MetalAtom(x) -> IonizedInIntensePlasma(x))"]}
{"id": "eqasc_train_12248", "nl": "plasma ionizes metal", "fol": "", "prediction": ["all x y.((Plasma(x) & Metal(y)) -> Ionizes(x,y))"]}
{"id": "eqasc_train_12249", "nl": "folding an object causes that object to change shape", "fol": "", "prediction": ["all x y.((Object(x) & Folding(x,y)) -> ChangeShape(x,y))"]}
{"id": "eqasc_train_12250", "nl": "Transform is a generic term meaning change the shape.", "fol": "", "prediction": ["all x.(Transform(x) -> (GenerativeTerm(x) & MeaningChangeShape(x)))"]}
{"id": "eqasc_train_12251", "nl": "Folding an object causes that object to transform.", "fol": "", "prediction": ["all x y.((Object(x) & Folding(x)) -> CausesTransformation(y))"]}
{"id": "eqasc_train_12252", "nl": "By default all objects are assumed to be solid.", "fol": "", "prediction": ["all x.(Object(x) -> Solid(x))"]}
{"id": "eqasc_train_12253", "nl": "folding a solid causes it to change shape", "fol": "", "prediction": ["all x y.((Solid(x) & Solid(y)) -> ChangeShape(x,y))"]}
{"id": "eqasc_train_12254", "nl": "Side chairs fold for easy storage.", "fol": "", "prediction": ["all x.(SideChair(x) -> FoldsForEasyStorage(x))"]}
{"id": "eqasc_train_12255", "nl": "Side chairs can change shape.", "fol": "", "prediction": ["all x.(SideChair(x) -> CanChangeShape(x))"]}
{"id": "eqasc_train_12256", "nl": "Origami figures are paper folding art projects.", "fol": "", "prediction": ["all x.(Origami(x) -> PaperFoldingArtProject(x))"]}
{"id": "eqasc_train_12257", "nl": "Origami causes an object to change shape.", "fol": "", "prediction": ["all x.(Origami(x) -> CausesObjectToChangeShape(x))"]}
{"id": "eqasc_train_12258", "nl": "When you do origami, objects change shape.", "fol": "", "prediction": ["all x.((DoseOrigami(x) & ObjectChangeShape(x)) -> DoseOrigami(x))"]}
{"id": "eqasc_train_12259", "nl": "Tri-fold cards fold into three sections.", "fol": "", "prediction": ["all x.(TriFoldCard(x) -> FoldsIntoThreeSections(x))"]}
{"id": "eqasc_train_12260", "nl": "When you bend a card into three sections it changes shape", "fol": "", "prediction": ["all x y z.((Card(x) & Card(y) & Section(z) & BendsIntoThreeSections(x,y,z)) -> ChangesShape(x))"]}
{"id": "eqasc_train_12261", "nl": "Tri-folds and half folds are acceptable if machine folded.", "fol": "", "prediction": ["all x.((TriFold(x) | HalfFold(x)) -> Acceptable(x))"]}
{"id": "eqasc_train_12262", "nl": "Machines can cause objects to change shape. ", "fol": "", "prediction": ["all x.(Machine(x) -> CanCauseObjectsToChangeShape(x))"]}
{"id": "eqasc_train_12263", "nl": "origami changes paper's shape", "fol": "", "prediction": ["all x.(Origami(x) -> ChangesPaperShape(x))"]}
{"id": "eqasc_train_12264", "nl": "Doing origami with an object causes that object to change shape", "fol": "", "prediction": ["all x y.((DoingOrigami(x) & Object(y) & DoingOrigamiWith(x,y)) -> ChangesShape(y))"]}
{"id": "eqasc_train_12265", "nl": "Folds are usually caused by compressional forces.", "fol": "", "prediction": ["all x.(Fold(x) -> CausedByCompressionalForces(x))"]}
{"id": "eqasc_train_12266", "nl": " compressional force causes an object to change shape", "fol": "", "prediction": ["all x y.((CompressionalForce(x) & Object(y)) -> ChangesShape(y,Shape))"]}
{"id": "eqasc_train_12267", "nl": "Behaviors can be learned through play.", "fol": "", "prediction": ["all x.(Behavior(x) -> CanBeLearntThroughPlay(x))"]}
{"id": "eqasc_train_12268", "nl": "Most violent behavior is learned behavior.", "fol": "", "prediction": ["all x.(ViolentBehavior(x) -> LearnedBehavior(x))"]}
{"id": "eqasc_train_12269", "nl": "Violence can be learned through play", "fol": "", "prediction": ["all x.(Violence(x) -> LearnedThroughPlay(x))"]}
{"id": "eqasc_train_12270", "nl": "Language is a learned human behavior.", "fol": "", "prediction": ["all x.(Language(x) -> LearnedHumanBehavior(x))"]}
{"id": "eqasc_train_12271", "nl": "Language can be learned through play.", "fol": "", "prediction": ["all x.(Language(x) -> LearnedThroughPlay(x))"]}
{"id": "eqasc_train_12272", "nl": "Girls have played with dolls for generations.", "fol": "", "prediction": ["all x y.((Girl(x) & Doll(y)) -> PlayedWithForGenerations(x,y))"]}
{"id": "eqasc_train_12273", "nl": "Girls have used dolls to learn behaviors for generations.", "fol": "", "prediction": ["all x y.((Girl(x) & Doll(y)) -> UsedToLearnBehaviors(x,y))"]}
{"id": "eqasc_train_12274", "nl": "Ian plays role playing games.", "fol": "", "prediction": ["all x.(Ian(x) -> PlaysRolePlayingGames(x))"]}
{"id": "eqasc_train_12275", "nl": "Behaviors can be learned through games.", "fol": "", "prediction": ["all x.(Behavior(x) -> CanBeLearntThroughGames(x))"]}
{"id": "eqasc_train_12276", "nl": "Kids play hockey in the driveways.", "fol": "", "prediction": ["all x.(Kid(x) -> PlaysHockeyInDriveways(x))"]}
{"id": "eqasc_train_12277", "nl": "behaviors can be learned through hockey", "fol": "", "prediction": ["all x.((Behavior(x) & Hockey(y)) -> CanBeLearntThrough(x,y))"]}
{"id": "eqasc_train_12278", "nl": "Games are fun to play.", "fol": "", "prediction": ["all x.(Game(x) -> FunToPlay(x))"]}
{"id": "eqasc_train_12279", "nl": "Behaviors can be learned through fun games.", "fol": "", "prediction": ["all x.(Behavior(x) -> LearnedThroughFunGames(x))"]}
{"id": "eqasc_train_12280", "nl": "Kids imitate adult actions and behaviors.", "fol": "", "prediction": ["all x.(Kid(x) -> ImitatesActionsAndBehaviors(x))"]}
{"id": "eqasc_train_12281", "nl": "Actions can be learned through play.", "fol": "", "prediction": ["all x.(Action(x) -> LearnedThroughPlay(x))"]}
{"id": "eqasc_train_12282", "nl": "Emphasis is on playing the sport.", "fol": "", "prediction": ["all x.(EmphasisOnPlayingSport(x) -> PlayingSport(x))"]}
{"id": "eqasc_train_12283", "nl": "behaviors can be learned through sports", "fol": "", "prediction": ["all x.(Behavior(x) -> (LearnsThroughSports(x) & ThroughSports(x)))"]}
{"id": "eqasc_train_12284", "nl": "Kittens practice hunting by playing.", "fol": "", "prediction": ["all x.(Kitten(x) -> PracticesHuntingByPlaying(x))"]}
{"id": "eqasc_train_12285", "nl": "Kittens that are practicing hunting is an example of learning behavior", "fol": "", "prediction": ["all x.((Kitten(x) & Hunting(x)) -> LearningBehavior(x))"]}
{"id": "eqasc_train_12286", "nl": "dog behaviors can be learned through fetch", "fol": "", "prediction": ["all x.(Dog(x) -> (LearnsBoyBehaviorsThroughFetch(x) & CanBeLearnByFetch(x)))"]}
{"id": "eqasc_train_12287", "nl": "Ethical behavior for Wilson is patriotic behavior.", "fol": "", "prediction": ["all x.((EthicalBehavior(x) & ForWilson(x)) -> PatrioticBehavior(x))"]}
{"id": "eqasc_train_12288", "nl": "Ethical ways can be learned through play", "fol": "", "prediction": ["all x.(EthicalWeapons(x) -> LearnedThroughPlay(x))"]}
{"id": "eqasc_train_12289", "nl": "Structures and behaviors help animals move and survive in their habitats.", "fol": "", "prediction": ["all x y.((Structure(x) & Behavior(y)) -> (HelpsAnimalsMove(x,y) & HelpsAnimalsSurvive(x,y)))"]}
{"id": "eqasc_train_12290", "nl": "play can help an animal survive", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> HelpsSurvive(x,y))"]}
{"id": "eqasc_train_12291", "nl": "Kids play sports for fun.", "fol": "", "prediction": ["all x.(Kid(x) -> PlaysSport(x))"]}
{"id": "eqasc_train_12292", "nl": "Animal behavior is the scientific study of everything animals do.", "fol": "", "prediction": ["all x.(AnimalBehavior(x) -> ScientificStudyOfAnimals(x))"]}
{"id": "eqasc_train_12293", "nl": "what animals do can be learned from play", "fol": "", "prediction": ["all x.(Animal(x) -> CanBeLearntFromPlay(x))"]}
{"id": "eqasc_train_12294", "nl": "Cognitive behavior is the behavior of understanding.", "fol": "", "prediction": ["all x.(CognitiveBehavior(x) -> BehaviorOfUnderstanding(x))"]}
{"id": "eqasc_train_12295", "nl": "play is cognitive", "fol": "", "prediction": ["all x.(Play(x) -> Cognitive(x))"]}
{"id": "eqasc_train_12296", "nl": "Everyone can have fun and play together.", "fol": "", "prediction": ["all x.((HasFun(x) & PlaysTogether(x)) -> CanHaveFun(x))"]}
{"id": "eqasc_train_12297", "nl": "behaviors can be fun to learn", "fol": "", "prediction": ["all x.((Behavior(x) & FunToLearn(x)) -> Behaviors(x))"]}
{"id": "eqasc_train_12298", "nl": "when a hemisphere is tilted towards the sun , that hemisphere receives more direct sunlight", "fol": "", "prediction": ["all x y z.((Hemisphere(x) & TiltedTowardsSun(x) & Hemisphere(y) & Sun(z)) -> ReceivesMoreDirectSunlight(y,z))"]}
{"id": "eqasc_train_12299", "nl": "During the summer in Britain the sunlight strikes the Northern part of the Earth more directly.", "fol": "", "prediction": ["all x y.((Summer(x) & Summer(y)) -> SunlightStrikesNorthernPartOfEarth(x,y))"]}
{"id": "eqasc_train_12300", "nl": "a hemisphere is tilted towards the sun during the summer", "fol": "", "prediction": ["all x y.((Hemisphere(x) & Summer(y)) -> TiltedTowardsSun(x,y))"]}
{"id": "eqasc_train_12301", "nl": "Direct sunlight causes higher temperatures.", "fol": "", "prediction": ["all x.(DirectSunlight(x) -> CausesHigherTemperatures(x))"]}
{"id": "eqasc_train_12302", "nl": "when a hemisphere is tilted towards the sun , that hemisphere receives higher temperatures", "fol": "", "prediction": ["all x y z.((Hemisphere(x) & Sun(y) & TiltedTowards(x,y)) -> ReceivesHigherTemperatures(x,z))"]}
{"id": "eqasc_train_12303", "nl": "When it is summer in the Northern Hemisphere, it is winter in the Southern Hemisphere.", "fol": "", "prediction": ["all x.((Summer(x) & NorthernHemisphere(x)) -> SouthernHemisphere(x))"]}
{"id": "eqasc_train_12304", "nl": "When it is summer, you are tilted towards the sun", "fol": "", "prediction": ["all x.((Summer(x) & TiltedTowardsSun(x)) -> TiltedTowardsSun(x))"]}
{"id": "eqasc_train_12305", "nl": "When the Earth's northern hemisphere is tilted towards the Sun, it is summer.", "fol": "", "prediction": ["all x.(TiltedTowardsSun(x) -> Summer(x))"]}
{"id": "eqasc_train_12306", "nl": "When the hemisphere receives more sunlight, it is summer", "fol": "", "prediction": ["all x.((Hemisphere(x) & ReceivesMoreSunlight(x)) -> Summer(x))"]}
{"id": "eqasc_train_12307", "nl": "Rio is in the southern hemisphere.", "fol": "", "prediction": ["all x.(Rio(x) -> InSouthernHemisphere(x))"]}
{"id": "eqasc_train_12308", "nl": "when Rio is tilted towards the sun it receives more direct sunlight", "fol": "", "prediction": ["all x.((Rio(x) & TiltedTowardsSun(x)) -> ReceivesDirectSunlight(x))"]}
{"id": "eqasc_train_12309", "nl": "During the Northern Hemisphere summer, the Northern Hemisphere is tilted toward the sun.", "fol": "", "prediction": ["all x.((NorthernHemisphere(x) & Summer(x)) -> TiltedTowardsSun(x))"]}
{"id": "eqasc_train_12310", "nl": "When a hemisphere receives more direct sunlight, it is summer", "fol": "", "prediction": ["all x.((Hemisphere(x) & MoreDirectSunlight(x)) -> Summer(x))"]}
{"id": "eqasc_train_12311", "nl": "The seasons change as a result of how much direct sunlight a hemisphere is receiving.", "fol": "", "prediction": ["all x y.((Season(x) & DirectSunlight(y) & Receives(x,y)) -> Changes(x))"]}
{"id": "eqasc_train_12312", "nl": "Another named half of the earth is the so-called Pacific hemisphere.", "fol": "", "prediction": ["all x.((HalfOfEarth(x) & PacificHemisphere(x)) -> NamedHalfOfEarth(x))"]}
{"id": "eqasc_train_12313", "nl": "when half of Earth is tilted towards the sun , that half of Earth receives more direct sunlight", "fol": "", "prediction": ["all x y z.((Earth(x) & Earth(y) & Sun(z) & TiltedTowards(x,y,z)) -> ReceivesDirectSunlight(x,y))"]}
{"id": "eqasc_train_12314", "nl": "Regions on display include the Western Hemisphere , and the Eastern Hemisphere .", "fol": "", "prediction": ["(all x.(Region(x) -> WesternHemisphere(x)) & (Region(x) -> EasternHemisphere(x)))"]}
{"id": "eqasc_train_12315", "nl": "When one region is tilted towards the sun, that region receives more direct sunlight.", "fol": "", "prediction": ["all x.(TiltedTowardsSun(x) -> ReceivesMoreDirectSunlight(x))"]}
{"id": "eqasc_train_12316", "nl": "When a hemisphere is tilted towards the sun that hemisphere has higher temperatures", "fol": "", "prediction": ["all x y.((Hemisphere(x) & TiltedTowardsSun(x)) -> HigherTemperatures(x,y))"]}
{"id": "eqasc_train_12317", "nl": "Papaya trees grow in the direct sunlight.", "fol": "", "prediction": ["all x.(PapayaTree(x) -> GrowsInDirectSunlight(x))"]}
{"id": "eqasc_train_12318", "nl": "When a hemisphere is tilted towards the sun, that hemisphere grows papaya trees in the sunlight.", "fol": "", "prediction": ["all x y.((Hemisphere(x) & TiltedTowardsSun(x)) -> GrowsPapayaTreesInSunlight(x))"]}
{"id": "eqasc_train_12319", "nl": "Direct sunlight burns foliage.", "fol": "", "prediction": ["all x.(DirectSunlight(x) -> BurnsFoliage(x))"]}
{"id": "eqasc_train_12320", "nl": "when a hemisphere is tilted towards the sun , that hemisphere has more burned foliage", "fol": "", "prediction": ["all x y z.((Hemisphere(x) & TiltedTowardsSun(x) & Sun(y) & Hemisphere(z)) -> BurntFoliage(z))"]}
{"id": "eqasc_train_12321", "nl": "Fungi have special structures for penetrating a host.", "fol": "", "prediction": ["all x.(Fungus(x) -> HasSpecialStructuresForPenetratingHost(x))"]}
{"id": "eqasc_train_12322", "nl": "Host specificity was also observed for some fungi and tree species.", "fol": "", "prediction": ["(exists x.(Fungus(x) & TreeSpecificity(x)) & HostSpecificityObserved(x))"]}
{"id": "eqasc_train_12323", "nl": "Fungi have special structures for penetrating trees", "fol": "", "prediction": ["all x.(Fungus(x) -> (HasSpecialStructuresForPenetratingTrees(x) & PenetratingTrees(x)))"]}
{"id": "eqasc_train_12324", "nl": "yeasts have special structures for penetrating a host.", "fol": "", "prediction": ["all x.(Yeast(x) -> (HasSpecialStructures(x) & PenetratesHost(x)))"]}
{"id": "eqasc_train_12325", "nl": "Bacteria, fungi and viruses invade the host and cause disease.", "fol": "", "prediction": ["all x y.((Bacteria(x) & Fungi(y) & Viral(y)) -> (InvadesHost(x) & CausesDisease(x)))"]}
{"id": "eqasc_train_12326", "nl": "bacteria cause disease in hosts", "fol": "", "prediction": ["all x y.((Bacteria(x) & Host(y)) -> CausesDisease(x,y))"]}
{"id": "eqasc_train_12327", "nl": "mold have special structures for penetrating a host", "fol": "", "prediction": ["all x y.((Mold(x) & Host(y)) -> SpecialStructuresForPenetrating(x,y))"]}
{"id": "eqasc_train_12328", "nl": "Parasitic plants and fungi can attack animals.", "fol": "", "prediction": ["all x.((ParasiticPlant(x) & Fungus(x)) -> CanAttackAnimals(x))"]}
{"id": "eqasc_train_12329", "nl": "parasitic creatures have special structures for penetrating an animal", "fol": "", "prediction": ["all x y.((ParasiticCreature(x) & Animal(y)) -> HasSpecialStructuresForPenetrating(x,y))"]}
{"id": "eqasc_train_12330", "nl": "Yeast has a special structure for penetrating a host", "fol": "", "prediction": ["all x y.((Yeast(x) & Host(y)) -> HasSpecialStructureForPenetrating(x,y))"]}
{"id": "eqasc_train_12331", "nl": "molds have special structures for penetrating a host", "fol": "", "prediction": ["all x y.((Mold(x) & Host(y)) -> HasSpecialStructuresForPenetrating(x,y))"]}
{"id": "eqasc_train_12332", "nl": "Fungi have special structures for invading and causing disease", "fol": "", "prediction": ["all x.(Fungus(x) -> (HasSpecialStructures(x) & Invading(x) & CausesDisease(x)))"]}
{"id": "eqasc_train_12333", "nl": "Mushrooms have special structures for penetrating a host", "fol": "", "prediction": ["all x.(Mushroom(x) -> (HasSpecialStructures(x) & PenetratesHost(x)))"]}
{"id": "eqasc_train_12334", "nl": "Host tissue penetration occurs to the point of vascular connectivity.", "fol": "", "prediction": ["all x.(HostTissuePenetration(x) -> FlowsToPointOfVascularConnectivity(x))"]}
{"id": "eqasc_train_12335", "nl": "Fungi can invade a host to the point of vascular conncectivity.", "fol": "", "prediction": ["all x y.((Fungus(x) & Host(y)) -> InvadesToVascularConncectivity(x,y))"]}
{"id": "eqasc_train_12336", "nl": "Molds have special structures for penetrating a host", "fol": "", "prediction": ["all x y.((Mold(x) & Host(y)) -> HasSpecialStructuresForPenetrating(x,y))"]}
{"id": "eqasc_train_12337", "nl": "Cells that divide uncontrollably may form a tumor, or abnormal mass of cells.", "fol": "", "prediction": ["all x.((Cell(x) & DividesUncontrollably(x)) -> (FormsTumor(x) | FormsAnomalianMassOfCells(x)))"]}
{"id": "eqasc_train_12338", "nl": "When p53 is mutated, cells divide uncontrollably.", "fol": "", "prediction": ["all x.((P53(x) & Mutated(x)) -> CellsDivideUncontrollably(x))"]}
{"id": "eqasc_train_12339", "nl": "When p53 is mutated a tumor may form.", "fol": "", "prediction": ["all x.((P53Mutated(x) & TumorForm(x)) -> MayForm(x))"]}
{"id": "eqasc_train_12340", "nl": "Tumor Tumors are masses of neoplastic origin.", "fol": "", "prediction": ["all x.(Tumor(x) -> (MassOfNeoplasticOrigin(x)))"]}
{"id": "eqasc_train_12341", "nl": "cells that divide uncontrollably may form masses of neoplastic origin.", "fol": "", "prediction": ["all x.((Cell(x) & DividesUncontrollably(x)) -> FormsNeoplasticMass(x))"]}
{"id": "eqasc_train_12342", "nl": "Cells that divide uncontrollably may form masses of neoplastic origin.", "fol": "", "prediction": ["all x.((Cell(x) & DividesUncontrollably(x)) -> FormsNeoplasticMass(x))"]}
{"id": "eqasc_train_12343", "nl": "Cancer begins when a cell begins dividing uncontrollably.", "fol": "", "prediction": ["all x.((Cell(x) & BeginsDivisionUncontrollably(x)) -> Cancer(x))"]}
{"id": "eqasc_train_12344", "nl": "cancer may cause a tumor to form", "fol": "", "prediction": ["all x y.((Cancer(x) & Tumor(y)) -> MayCauseToForm(x,y))"]}
{"id": "eqasc_train_12345", "nl": "Cancers are growths of abnormal cells.", "fol": "", "prediction": ["all x.(Cancer(x) -> (GrowthOfAnomalCells(x)))"]}
{"id": "eqasc_train_12346", "nl": "Cells that divide uncontrollably may form cancer growth", "fol": "", "prediction": ["all x.((Cell(x) & DividesUncontrollably(x)) -> FormsCancerGrowth(x))"]}
{"id": "eqasc_train_12347", "nl": "Cancer is a malignant tumor.", "fol": "", "prediction": ["all x.(Cancer(x) -> MalignantTumor(x))"]}
{"id": "eqasc_train_12348", "nl": "Cells that divide uncontrollably may form cancer", "fol": "", "prediction": ["all x.((Cell(x) & DividesUncontrollably(x)) -> MayFormCancer(x))"]}
{"id": "eqasc_train_12349", "nl": "For example, a fibroid is a tumor, a wart is a tumor, and cancers are tumors.", "fol": "", "prediction": ["all x y z.((Fibroid(x) & Wart(y) & Cancer(z)) -> (Tumor(x) & Tumor(y) & Tumor(z)))"]}
{"id": "eqasc_train_12350", "nl": "Cells that divide uncontrollably may form a fibroid.", "fol": "", "prediction": ["all x.((Cell(x) & DividesUncontrollably(x)) -> FormsFibroid(x))"]}
{"id": "eqasc_train_12351", "nl": "Surgery to remove the tumor is an option.", "fol": "", "prediction": ["all x.((Surgery(x) & RemoveTumor(x)) -> Option(x))"]}
{"id": "eqasc_train_12352", "nl": "cells that divide uncontrollably may need surgery to remove", "fol": "", "prediction": ["all x.((Cell(x) & DividesUncontrollably(x)) -> MayNeedSurgery(x))"]}
{"id": "eqasc_train_12353", "nl": "Abnormal cells are irregular in shape.", "fol": "", "prediction": ["all x.(AbnormalCell(x) -> IrregularShape(x))"]}
{"id": "eqasc_train_12354", "nl": "Cells that divide uncontrollably may form an irregular mass of cells", "fol": "", "prediction": ["all x.((Cell(x) & DividesUncontrollably(x)) -> FormsIrregularMassOfCells(x))"]}
{"id": "eqasc_train_12355", "nl": "Tumors are either benign or malignant.", "fol": "", "prediction": ["all x.(Tumor(x) -> (Benign(x) | Malignant(x)))"]}
{"id": "eqasc_train_12356", "nl": "Cells that divide uncontrollably can be either benign or malignant", "fol": "", "prediction": ["all x.((Cell(x) & DividesUncontrollably(x)) -> (Benign(x) | Malignant(x)))"]}
{"id": "eqasc_train_12357", "nl": "And tumor cell means that it's an abnormal cell.", "fol": "", "prediction": ["all x.(TumorCell(x) -> AnomalyCell(x))"]}
{"id": "eqasc_train_12358", "nl": "abnormal cells can divide uncontrollably", "fol": "", "prediction": ["all x.(AnomalyCells(x) -> CanDivideUncontrollably(x))"]}
{"id": "eqasc_train_12359", "nl": "cells that divide uncontrollably may form a fibroid, a wart, cancer.", "fol": "", "prediction": ["all x.((Cell(x) & DividesUncontrollably(x)) -> (FormsFibroid(x) | FormsWart(x) | FormsCancer(x)))"]}
{"id": "eqasc_train_12360", "nl": "Menopause occurs when menstruation stops occurring, usually in middle adulthood.", "fol": "", "prediction": ["all x.(Menopause(x) -> (OccursWhenMenstruationStops(x) & UsuallyInMiddleAdulthood(x)))"]}
{"id": "eqasc_train_12361", "nl": "Menopause before age 40 is considered premature menopause.", "fol": "", "prediction": ["all x.((Menopause(x) & Age40(x)) -> PrematureMenopause(x))"]}
{"id": "eqasc_train_12362", "nl": "It is considered premature for menstruation to stop before age 40. ", "fol": "", "prediction": ["all x.(PrematureForMenstruation(x) -> StopBefore40(x))"]}
{"id": "eqasc_train_12363", "nl": "Today, Menopause is seen more as a gateway to a second adulthood.", "fol": "", "prediction": ["all x.(Menopause(x) -> GatewayToSecondAdulthood(x))"]}
{"id": "eqasc_train_12364", "nl": "A gateway to second adulthood occurs when menstruation stops", "fol": "", "prediction": ["all x.((GatewayToSecondAdulthood(x) & MenstruationStops(x)) -> Occurs(x))"]}
{"id": "eqasc_train_12365", "nl": "Lupron stops estrogen production causing fibroids to shrink in size and menstruation usually stops.", "fol": "", "prediction": ["all x y.((Lupron(x) & Fibroid(y)) -> (StopsEstrogenProduction(x,y) & CausesSmoothSize(x,y) & MenstruationStops(x)))"]}
{"id": "eqasc_train_12366", "nl": "Lupron usually brings on menopause", "fol": "", "prediction": ["all x.(Lupron(x) -> BringsOnMenopause(x))"]}
{"id": "eqasc_train_12367", "nl": "Hot flashes are the classic sign of menopause and peri-menopause.", "fol": "", "prediction": ["all x.(HotFlash(x) -> (ClassicSignOfMenopause(x) & ClassicSignOfPerimenopause(x)))"]}
{"id": "eqasc_train_12368", "nl": "Hot flashes can occur when menstruation stops occurring.", "fol": "", "prediction": ["all x.((MenstruationStop(x) & HotFlash(x)) -> CanOccur(x))"]}
{"id": "eqasc_train_12369", "nl": "Menopause The Changes of Menopause Menopause marks the close of a woman's reproductive years.", "fol": "", "prediction": ["all x.((MenopauseChanges(x) & Woman(y)) -> ClosesReproductiveYears(y,x))"]}
{"id": "eqasc_train_12370", "nl": "A woman's reproductive years usually ends in middle adulthood.", "fol": "", "prediction": ["all x.((Female(x) & ReproductiveYearsEndsInMiddleAdulthood(x)) -> EndsInMiddleAdulthood(x))"]}
{"id": "eqasc_train_12371", "nl": "hot flashes can occur when menstruation stops occurring", "fol": "", "prediction": ["all x y.((HotFlash(x) & MenstruationStop(y)) -> CanOccur(x,y))"]}
{"id": "eqasc_train_12372", "nl": "White bryony is used for suppressed menses, menstruation too early and too profuse.", "fol": "", "prediction": ["all x.(WhiteBryony(x) -> (SupprimedMenses(x) & MenstruationTooEarly(x) & MenstruationTooProfuse(x)))"]}
{"id": "eqasc_train_12373", "nl": "Menopause occurs when menses stop occurring, usually in middle adulthood.", "fol": "", "prediction": ["all x.(Menopause(x) -> (OccursWhenMensesStopOccurring(x) & UsuallyInMiddleAdulthood(x)))"]}
{"id": "eqasc_train_12374", "nl": "By definition, menopause occurs when menstruation stops permanently.", "fol": "", "prediction": ["all x.((Menopause(x) & MenstruationStopsPermanently(x)) -> Occurs(x))"]}
{"id": "eqasc_train_12375", "nl": "Usually in middle adulthood menopause happens when menstruation stops permanently.", "fol": "", "prediction": ["all x.(MiddleAdulthood(x) -> Menopause(x))"]}
{"id": "eqasc_train_12376", "nl": "Clearly, middle adulthood is a time change and development.", "fol": "", "prediction": ["all x.(MiddleAdulthood(x) -> (TimeChange(x) & Development(x)))"]}
{"id": "eqasc_train_12377", "nl": "During menopause comes a time of change and development, including when menstruation stops.", "fol": "", "prediction": ["all x.(Menopause(x) -> (TimeOfChange(x) & TimeOfDevelopment(x) & MenstruationStops(x)))"]}
{"id": "eqasc_train_12378", "nl": "Middle adulthood begins around age 35 to 40 and continues through age 65 to 70.", "fol": "", "prediction": ["all x.(MiddleAdulthood(x) -> (EndsAroundAge35To40(x) & ContinuesThroughAge65To70(x)))"]}
{"id": "eqasc_train_12379", "nl": "Menopause occurs when menstruation stops occurring, usually between 35 and 65 years old.", "fol": "", "prediction": ["all x.(Menopause(x) -> (OccursWhenMenstruationStops(x) & UsuallyBetween35And65YearsOld(x)))"]}
{"id": "eqasc_train_12380", "nl": "Another menopause discomfort is vaginal dryness.", "fol": "", "prediction": ["all x.(MenopauseDiscomfort(x) -> VaginalDryness(x))"]}
{"id": "eqasc_train_12381", "nl": "vaginal dryness can occur when menstruation stops", "fol": "", "prediction": ["all x y.((VaginalDryness(x) & MenstruationStop(y)) -> CanOccur(x,y))"]}
{"id": "eqasc_train_12382", "nl": "wind causes erosion", "fol": "", "prediction": ["all x.(Wind(x) -> CausesErosion(x))"]}
{"id": "eqasc_train_12383", "nl": "wind causes natural processes in the soil to happen", "fol": "", "prediction": ["all x y.((Wind(x) & Soil(y)) -> CausesNaturalProcesses(x,y))"]}
{"id": "eqasc_train_12384", "nl": "Erosion affects farm viability.", "fol": "", "prediction": ["all x.(Erosion(x) -> AffectsFarmViability(x))"]}
{"id": "eqasc_train_12385", "nl": "Wind affects farm viability.", "fol": "", "prediction": ["all x.(Wind(x) -> AffectsFarmViability(x))"]}
{"id": "eqasc_train_12386", "nl": "Wind erosion severely damages soils and crops.", "fol": "", "prediction": ["all x.(WindErosion(x) -> (DamagesSoils(x) & DamagesCrops(x)))"]}
{"id": "eqasc_train_12387", "nl": "Wind can severely damage soils and crops", "fol": "", "prediction": ["all x y z.((Wind(x) & Soil(y) & Crop(z)) -> (DamageSoil(x,y) | DamageSoil(x,z)))"]}
{"id": "eqasc_train_12388", "nl": "Wind creates fantastic rock formations.", "fol": "", "prediction": ["all x y.((Wind(x) & RockFormation(y)) -> Creates(x,y))"]}
{"id": "eqasc_train_12389", "nl": "Erosion causes destruction of aquatic habitats due to siltation and flooding.", "fol": "", "prediction": ["all x.(Erosion(x) -> (CausesDestructionOfAquaticHabitats(x) & Siltation(x) & Flooding(x)))"]}
{"id": "eqasc_train_12390", "nl": "High winds can lead to destruction of aquatic habitats.", "fol": "", "prediction": ["all x.(HighWinds(x) -> CanLeadToDestructionOfAquaticHabitats(x))"]}
{"id": "eqasc_train_12391", "nl": "hurricanes cause erosion", "fol": "", "prediction": ["all x.(Hurricane(x) -> CausesErosion(x))"]}
{"id": "eqasc_train_12392", "nl": "Erosion is the physical removal of rock particles.", "fol": "", "prediction": ["all x.(Erosion(x) -> PhysicalRemovalOfRockParticles(x))"]}
{"id": "eqasc_train_12393", "nl": "Wind causes the removal of rock particles", "fol": "", "prediction": ["all x y.((Wind(x) & RockParticle(y)) -> CausesRemovalOf(x,y))"]}
{"id": "eqasc_train_12394", "nl": "Sedimentation is the result of erosion.", "fol": "", "prediction": ["all x.(Sedimentation(x) -> ErosionResult(x))"]}
{"id": "eqasc_train_12395", "nl": "wind causes sedimentation.", "fol": "", "prediction": ["all x.(Wind(x) -> CausesSedimentation(x))"]}
{"id": "eqasc_train_12396", "nl": "wind and water both cause weathering", "fol": "", "prediction": ["(CausesWeathering(wind) & CausesWeathering(water))"]}
{"id": "eqasc_train_12397", "nl": "Flooding is one of the results of erosion.", "fol": "", "prediction": ["all x.(Flooding(x) -> ErosionResult(x))"]}
{"id": "eqasc_train_12398", "nl": "wind can cause flooding", "fol": "", "prediction": ["all x.(Wind(x) -> CausesFlooding(x))"]}
{"id": "eqasc_train_12399", "nl": "when metal conducts heat , that metal expands", "fol": "", "prediction": ["all x y z.((Metal(x) & Heat(y) & Metal(z) & Conducts(x,y)) -> Expands(z))"]}
{"id": "eqasc_train_12400", "nl": "Metals have large specific heats, that is why they conduct heat well.", "fol": "", "prediction": ["all x.(Metal(x) -> (LargeSpecificHeats(x) & ConductsHeatWell(x)))"]}
{"id": "eqasc_train_12401", "nl": "Metals can expand because they have large specific heats.", "fol": "", "prediction": ["all x.((Metal(x) & LargeSpecificHeats(x)) -> Expands(x))"]}
{"id": "eqasc_train_12402", "nl": "When a metal rod is warmed, the transfer of heat is by conduction.", "fol": "", "prediction": ["all x.(WarmedMetalRod(x) -> TransferOfHeatByConduction(x))"]}
{"id": "eqasc_train_12403", "nl": "When metal is warmed, the transfer of heat expands the metal", "fol": "", "prediction": ["all x y.((Metal(x) & Warmed(x)) -> HeatTransferExpands(x,y))"]}
{"id": "eqasc_train_12404", "nl": "Coins are made by mint of metal.", "fol": "", "prediction": ["all x.(Coin(x) -> MadeByMillOfMetal(x))"]}
{"id": "eqasc_train_12405", "nl": "Coins can conduct heat.", "fol": "", "prediction": ["all x.(Coin(x) -> ConductsHeat(x))"]}
{"id": "eqasc_train_12406", "nl": "Aluminum's classification is other metals.", "fol": "", "prediction": ["all x.(Aluminum(x) -> Metal(x))"]}
{"id": "eqasc_train_12407", "nl": "when aluminum heats up it expands", "fol": "", "prediction": ["all x.((AluminumHeatsUp(x) & AluminumHeatsUp(x)) -> Expands(x))"]}
{"id": "eqasc_train_12408", "nl": "Conduction is the passing of heat through a medium.", "fol": "", "prediction": ["all x y.((Conduction(x) & Medium(y)) -> PassingHeatThrough(x,y))"]}
{"id": "eqasc_train_12409", "nl": "When heat passes through metal, that metal expands.", "fol": "", "prediction": ["all x.((HeatPassesThroughMetal(x) & MetalExpands(x)) -> HeatPassesThroughMetal(x))"]}
{"id": "eqasc_train_12410", "nl": "Steel is the most useful of metals.", "fol": "", "prediction": ["all x.(Steel(x) -> MostUsefulMetal(x))"]}
{"id": "eqasc_train_12411", "nl": "When steel conducts heat, the steel expands.", "fol": "", "prediction": ["all x.((Steel(x) & ConductsHeat(x)) -> Expands(x))"]}
{"id": "eqasc_train_12412", "nl": "When the metal aluminum is mentioned, most people think of things like foil and soda cans.", "fol": "", "prediction": ["all x.((MetalAluminum(x) & Described(x)) -> (ThinksOfFoil(x) | ThinksOfSodaCans(x)))"]}
{"id": "eqasc_train_12413", "nl": "when soda cans conduct heat they expand", "fol": "", "prediction": ["all x y.((SodaCan(x) & ConductsHeat(x,y)) -> Expands(x))"]}
{"id": "eqasc_train_12414", "nl": "Steel is a solution of metals.", "fol": "", "prediction": ["all x.(Steel(x) -> MetalSolution(x))"]}
{"id": "eqasc_train_12415", "nl": "when steel conducts heat, it expands", "fol": "", "prediction": ["all x.((Steel(x) & ConductsHeat(x)) -> Expands(x))"]}
{"id": "eqasc_train_12416", "nl": "Gold is a precious metal.", "fol": "", "prediction": ["all x.(Gold(x) -> PreciousMetal(x))"]}
{"id": "eqasc_train_12417", "nl": "when gold conducts heat it expands", "fol": "", "prediction": ["all x.((Gold(x) & ConductsHeat(x)) -> Expands(x))"]}
{"id": "eqasc_train_12418", "nl": "Metals expand when they don't pass all of the heat through themselves to elsewhere.", "fol": "", "prediction": ["all x.((Metal(x) & -PassesHeatThroughHeat(x)) -> Expands(x))"]}
{"id": "eqasc_train_12419", "nl": "Copper is a very ductile metal.", "fol": "", "prediction": ["all x.(Cuircon(x) -> DuctileMetal(x))"]}
{"id": "eqasc_train_12420", "nl": "When copper conducts heat it expands.", "fol": "", "prediction": ["all x.((Copper(x) & ConductsHeat(x)) -> Expands(x))"]}
{"id": "eqasc_train_12421", "nl": "Metal expands when warm and contracts when cool.", "fol": "", "prediction": ["all x.((Metal(x) & Warm(x)) -> Expands(x)) & ((Metal(x) & Cool(x)) -> Contracts(x)))"]}
{"id": "eqasc_train_12422", "nl": "metal contracts when it cools", "fol": "", "prediction": ["all x.((Metal(x) & Cools(x)) -> Contracts(x))"]}
{"id": "eqasc_train_12423", "nl": "Most modern gymnosperms are trees with woody trunks.", "fol": "", "prediction": ["all x.(ModernGymnosperm(x) -> (Tree(x) & WoodyTrunk(x)))"]}
{"id": "eqasc_train_12424", "nl": "Gymnosperms are the most ancient seed plants.", "fol": "", "prediction": ["all x.(Gymnosperm(x) -> AncientSeedPlant(x))"]}
{"id": "eqasc_train_12425", "nl": "The most ancient seed plants are trees with woody trunks.", "fol": "", "prediction": ["all x.((Tree(x) & WoodyTrunk(x)) -> AncientSeedPlant(x))"]}
{"id": "eqasc_train_12426", "nl": "most modern evergreens are trees with woody trunks", "fol": "", "prediction": ["all x.((Evergreen(x) & Modern(x)) -> (Tree(x) & WoodyTrunk(x)))"]}
{"id": "eqasc_train_12427", "nl": "Gymnosperms comprise four divisions.", "fol": "", "prediction": ["all x.(Gymnosperm(x) -> (FourDivisions(x) | FourDivisions(x)))"]}
{"id": "eqasc_train_12428", "nl": "a living thing with four divisions can be trees with woody trunks.", "fol": "", "prediction": ["all x.((LivingThing(x) & FourDividends(x)) -> TreeWithWoodyTrunks(x))"]}
{"id": "eqasc_train_12429", "nl": "Trees are still used for fuel in some places.", "fol": "", "prediction": ["exists x.(Tree(x) & UsedForFuel(x))"]}
{"id": "eqasc_train_12430", "nl": "some gymnosperms can be used as fuel", "fol": "", "prediction": ["exists x.(Gymnosperm(x) & CanBeUsedAsFuel(x))"]}
{"id": "eqasc_train_12431", "nl": "Gymnosperms produce softwood .", "fol": "", "prediction": ["all x.(Gymnosperm(x) -> ProducesSoftwood(x))"]}
{"id": "eqasc_train_12432", "nl": "most modern softwoods are trees with woody trunks", "fol": "", "prediction": ["all x.((Silverwood(x) & Modern(x)) -> (Tree(x) & WoodyTrunk(x)))"]}
{"id": "eqasc_train_12433", "nl": "Conifers are examples of gymnosperms.", "fol": "", "prediction": ["all x.(Conifer(x) -> Gymnosperm(x))"]}
{"id": "eqasc_train_12434", "nl": "Conifers are trees with woody trunks.", "fol": "", "prediction": ["all x.(Conifer(x) -> (Tree(x) & WoodyTrunk(x)))"]}
{"id": "eqasc_train_12435", "nl": "Evergreens are mostly trees with woody trunks.", "fol": "", "prediction": ["all x.(Evergreen(x) -> (Tree(x) & WoodyTrunk(x)))"]}
{"id": "eqasc_train_12436", "nl": "Woody plants such as trees and shrubs have stiff stems or trunks covered in bark.", "fol": "", "prediction": ["all x.((WoodyPlant(x) & (Tree(x) | Shrub(x))) -> (StrongStems(x) | StiffTrunks(x)))"]}
{"id": "eqasc_train_12437", "nl": "Most modern gymnosperms are trees covered in bark", "fol": "", "prediction": ["all x.((Gymnosperm(x) & Tree(x) & CoveredInBark(x)) -> Modern(x))"]}
{"id": "eqasc_train_12438", "nl": "evergreens have woody trunks", "fol": "", "prediction": ["all x.(Evergreen(x) -> HasWoodyTrunks(x))"]}
{"id": "eqasc_train_12439", "nl": "conifers trees have woody trunks and known as evergreens", "fol": "", "prediction": ["all x.(Conifer(x) -> (HasWoodyTrunks(x) & Evergreens(x)))"]}
{"id": "eqasc_train_12440", "nl": "a plant requires food for survival", "fol": "", "prediction": ["all x y.((Plant(x) & Food(y)) -> RequiresForSurvival(x,y))"]}
{"id": "eqasc_train_12441", "nl": "Food for the plant is made in the leaves.", "fol": "", "prediction": ["all x.(Plant(x) -> MadeInLeaves(x))"]}
{"id": "eqasc_train_12442", "nl": "A plant requires leaves for survival", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresLeavesForSurvival(x))"]}
{"id": "eqasc_train_12443", "nl": "Fertilizers are food for the plant.", "fol": "", "prediction": ["all x.(Fertilizer(x) -> FoodForPlant(x))"]}
{"id": "eqasc_train_12444", "nl": "a plant requires fertilizer for survival", "fol": "", "prediction": ["all x y.((Plant(x) & Fertilizer(y)) -> RequiresForSurvival(x,y))"]}
{"id": "eqasc_train_12445", "nl": "Plants make their food by the process of photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> MakesFoodByPhotosynthesis(x))"]}
{"id": "eqasc_train_12446", "nl": "Plants require photosynthesis for survival", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresPhotosynthesisForSurvival(x))"]}
{"id": "eqasc_train_12447", "nl": "All plants require sunlight to make their food.", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresSunlight(x))"]}
{"id": "eqasc_train_12448", "nl": "Plants need sunlight to survive", "fol": "", "prediction": ["all x.(Plant(x) -> NeedsSunlightToSurvive(x))"]}
{"id": "eqasc_train_12449", "nl": "Plants that survive are adapted for that environment.", "fol": "", "prediction": ["all x.((Plant(x) & Survives(x)) -> AdaptedForEnvironment(x))"]}
{"id": "eqasc_train_12450", "nl": "Plants require food in order to adapt to their environment.", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresFood(x))"]}
{"id": "eqasc_train_12451", "nl": "A plant requires sunlight for survival", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresSunlightForSurvival(x))"]}
{"id": "eqasc_train_12452", "nl": "a plant requires nutrients for survival", "fol": "", "prediction": ["all x y.((Plant(x) & Nutrients(y)) -> RequiresForSurvival(x,y))"]}
{"id": "eqasc_train_12453", "nl": "Life is no longer merely survival, but growth and thriving.", "fol": "", "prediction": ["all x.(Life(x) -> (-Survival(x) & Growth(x) & Thriving(x)))"]}
{"id": "eqasc_train_12454", "nl": "Plants require food to grow and thrive.", "fol": "", "prediction": ["all x.(Plant(x) -> (RequiresFood(x) & Grows(x) & Thrives(x)))"]}
{"id": "eqasc_train_12455", "nl": "Most foods contain several nutrients.", "fol": "", "prediction": ["all x.(Food(x) -> ContainsSeveralNutrients(x))"]}
{"id": "eqasc_train_12456", "nl": "Diversity is a matter of survival and prosperity.", "fol": "", "prediction": ["all x.(Diversity(x) -> (MatterOfSurvival(x) & MatterOfProsperity(x)))"]}
{"id": "eqasc_train_12457", "nl": "A plant requires food for diversity and prosperity.", "fol": "", "prediction": ["all x.(Plant(x) -> (RequiresFood(x) & Diversity(x) & Prosperity(x)))"]}
{"id": "eqasc_train_12458", "nl": "Plants that are adapted to very dry environments are called xerophytes.", "fol": "", "prediction": ["all x.((Plant(x) & AdaptedToDryEnvironments(x)) -> Xerophyte(x))"]}
{"id": "eqasc_train_12459", "nl": "Bromeliads and cacti are xerophytes.", "fol": "", "prediction": ["all x.((Bromeliad(x) | Cactus(x)) -> Xerophyte(x))"]}
{"id": "eqasc_train_12460", "nl": "Cacti are adapted to very dry environments", "fol": "", "prediction": ["all x.(Cactus(x) -> AdaptedToDryEnvironments(x))"]}
{"id": "eqasc_train_12461", "nl": "cacti are adapted to very dry environments", "fol": "", "prediction": ["all x.(Cactus(x) -> AdaptedToDryEnvironments(x))"]}
{"id": "eqasc_train_12462", "nl": "Bromeliads and cacti have adapted to very dry environments.", "fol": "", "prediction": ["all x y.((Bromeliad(x) & Cactus(y)) -> AdaptedToDryEnvironments(x,y))"]}
{"id": "eqasc_train_12463", "nl": "Producers that are adapted to very dry environments are called xerophytes.", "fol": "", "prediction": ["all x.((Producer(x) & AdaptedToDryEnvironments(x)) -> Xerophyte(x))"]}
{"id": "eqasc_train_12464", "nl": "Most cacti thrive in an area with very dry periods and light rainfall.", "fol": "", "prediction": ["all x.((Cactus(x) & DryPeriod(x) & LightRainfall(x)) -> Thrives(x))"]}
{"id": "eqasc_train_12465", "nl": "cacti are xerophytes", "fol": "", "prediction": ["all x.(Cactus(x) -> (Xerophytes(x) & Cactus(x)))"]}
{"id": "eqasc_train_12466", "nl": "Succulents, bromeliads and cacti are xerophytes.", "fol": "", "prediction": ["all x.((Succulent(x) | Bromeliad(x) | Cactus(x)) -> Xerophyte(x))"]}
{"id": "eqasc_train_12467", "nl": "A plant that is adapt to a very dry environment is a cacti.", "fol": "", "prediction": ["all x.((Plant(x) & AdaptsToDryEnvironment(x)) -> Cactus(x))"]}
{"id": "eqasc_train_12468", "nl": "Plants that have adapted by altering their physical structure are called xerophytes .", "fol": "", "prediction": ["all x.((Plant(x) & AdaptedByAlteringPhysicalStructure(x)) -> Xerophyte(x))"]}
{"id": "eqasc_train_12469", "nl": "Xerophytes change their physical structure to adapt to dry environments.", "fol": "", "prediction": ["all x.(Xerophyte(x) -> (ChangesPhysicalStructure(x) & AdaptsToDryEnvironments(x)))"]}
{"id": "eqasc_train_12470", "nl": "Some Plants that are adapted to very dry environments are Succulents, bromeliads and cacti", "fol": "", "prediction": ["all x.((Plant(x) & AdaptedToDryEnvironments(x)) -> (Succulent(x) | Bromeliad(x) | Cactus(x)))"]}
{"id": "eqasc_train_12471", "nl": "pollutants have a negative impact on the environment", "fol": "", "prediction": ["all x.(Pollutant(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12472", "nl": "Cars are heavy polluters of the environment.", "fol": "", "prediction": ["all x.(Car(x) -> PolluterOfEnvironment(x))"]}
{"id": "eqasc_train_12473", "nl": "Cars have a negative impact on the environment.", "fol": "", "prediction": ["all x.(Car(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12474", "nl": "Benzene, like ozone and particulate matter, is a nonthreshold pollutant.", "fol": "", "prediction": ["all x.(Benzene(x) -> (NonThresholdPollutant(x) & LikeOzone(x) & LikeParticulateMatter(x)))"]}
{"id": "eqasc_train_12475", "nl": "particulate matter has a negative impact on the environment", "fol": "", "prediction": ["all x.(ParticulateMatter(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12476", "nl": "Environment and Health Environment and Health All living things depend on their environment.", "fol": "", "prediction": ["all x.(EnvironmentAndHealth(x) -> DependsOnEnvironment(x))"]}
{"id": "eqasc_train_12477", "nl": "pollutants have a negative impact on all living things", "fol": "", "prediction": ["all x.(Pollutant(x) -> NegativeImpactOnLivingThings(x))"]}
{"id": "eqasc_train_12478", "nl": "Carbon dioxide is a pollutant.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> Pollutant(x))"]}
{"id": "eqasc_train_12479", "nl": "carbon dioxide has a negative effect on the environment", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> NegativeEffectOnEnvironment(x))"]}
{"id": "eqasc_train_12480", "nl": "Hydrocarbon emissions are one of the pollutants that create ozone pollution.", "fol": "", "prediction": ["all x.(HydrogenEmissions(x) -> (Pollutant(x) & CreatesOzonePollution(x)))"]}
{"id": "eqasc_train_12481", "nl": "hydrocarbon emissions have a negative impact on the environment", "fol": "", "prediction": ["all x.(HydrocarbonEmissions(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12482", "nl": "Pesticides for cranberries have a negative impact on the environment.", "fol": "", "prediction": ["all x.((Pesticide(x) & ForCranberries(x)) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12483", "nl": "Incineration is harmful to the environment, it pollutes.", "fol": "", "prediction": ["all x.(Incineration(x) -> (HarmfulToEnvironment(x) & Pollutes(x)))"]}
{"id": "eqasc_train_12484", "nl": "incineration is harmful to the environment", "fol": "", "prediction": ["all x.(Incineration(x) -> HarmfulToEnvironment(x))"]}
{"id": "eqasc_train_12485", "nl": "Second, the environment is important to health.", "fol": "", "prediction": ["(Environment(Environment) & ImportantToHealth(Environment))"]}
{"id": "eqasc_train_12486", "nl": "Pollutants have a negative impact on human health", "fol": "", "prediction": ["all x.(Pollutant(x) -> NegativeImpactOnHumanHealth(x))"]}
{"id": "eqasc_train_12487", "nl": "gravity pulls objects towards planets", "fol": "", "prediction": ["all x y z.((Gravity(x) & Object(y) & Planet(z)) -> PullsTowards(x,y,z))"]}
{"id": "eqasc_train_12488", "nl": "An object's weight is the force of gravity on that object.", "fol": "", "prediction": ["all x.(Object(x) -> Weight(x))"]}
{"id": "eqasc_train_12489", "nl": "An object's weight is what pulls objects towards planets.", "fol": "", "prediction": ["all x y.((Object(x) & Planet(y)) -> PullsTo(x,y))"]}
{"id": "eqasc_train_12490", "nl": "Because of gravitation, objects that are on or near the earth are pulled toward it.", "fol": "", "prediction": ["all x.((Object(x) & OnOrNearEarth(x)) -> PulledTowardsEarth(x))"]}
{"id": "eqasc_train_12491", "nl": "Water stays on earth's surface because of gravitational pull", "fol": "", "prediction": ["all x y.((Water(x) & EarthSurface(y) & GravitationalPull(x,y)) -> StaysOn(x,y))"]}
{"id": "eqasc_train_12492", "nl": "Planets are 'held' in orbit by the Sun's gravity.", "fol": "", "prediction": ["all x.(Planet(x) -> HeldInOrbitBySunGravity(x))"]}
{"id": "eqasc_train_12493", "nl": "Planets are pulled towards the sun. ", "fol": "", "prediction": ["all x.(Planet(x) -> PulledTowardsSun(x))"]}
{"id": "eqasc_train_12494", "nl": "gravity pulls objects towards earth", "fol": "", "prediction": ["all x y z.((Gravity(x) & Object(y) & Earth(z)) -> PullsTowards(x,y,z))"]}
{"id": "eqasc_train_12495", "nl": "Gravity is created by the mass of a planet, star or other celestial body.", "fol": "", "prediction": ["all x.(Gravity(x) -> (CreatedByMass(x) & (Planet(x) | Star(x) | CelestialBody(x))))"]}
{"id": "eqasc_train_12496", "nl": "Gravity pulls objects toward celestial bodies.", "fol": "", "prediction": ["all x y.((Gravity(x) & CelestialBody(y)) -> PullsToward(x,y))"]}
{"id": "eqasc_train_12497", "nl": "Gravity is the force that keeps planets in orbit around the sun.", "fol": "", "prediction": ["all x.(Gravity(x) -> (KeepsPlanetsInOrbitAroundSun(x)))"]}
{"id": "eqasc_train_12498", "nl": "Gravity pulls objects around the sun", "fol": "", "prediction": ["all x y.((Gravity(x) & Sun(y)) -> PullsObjectsAround(x,y))"]}
{"id": "eqasc_train_12499", "nl": "Gravity is created by mass.", "fol": "", "prediction": ["all x.(Gravity(x) -> CreatedByMass(x))"]}
{"id": "eqasc_train_12500", "nl": "What pulls objects towards planets is created by mass", "fol": "", "prediction": ["all x y.((Object(x) & Planet(y)) -> PullsToward(x,y))"]}
{"id": "eqasc_train_12501", "nl": "Gravity attracts the planets to the sun.", "fol": "", "prediction": ["all x y.((Gravity(x) & Planet(y)) -> AttractsToSun(x,y))"]}
{"id": "eqasc_train_12502", "nl": "the sun attracts planets", "fol": "", "prediction": ["all x y.((Sun(x) & Planet(y)) -> Attracts(x,y))"]}
{"id": "eqasc_train_12503", "nl": "Gravity pulls objects towards Earth.", "fol": "", "prediction": ["all x y.((Gravity(x) & Object(y)) -> PullsTowards(x,y))"]}
{"id": "eqasc_train_12504", "nl": "Gaia is our planet Earth.", "fol": "", "prediction": ["Gaia is ourPlanetEarth(Gaia)"]}
{"id": "eqasc_train_12505", "nl": "By the simplest definition, a planet is a large object that orbits a star.", "fol": "", "prediction": ["all x.(Planet(x) -> (LargeObject(x) & OrbitsStar(x)))"]}
{"id": "eqasc_train_12506", "nl": "gravity pulls objects towards large objects that orbit stars", "fol": "", "prediction": ["all x y z.((Gravity(x) & LargeObject(y) & Star(z)) -> PullsToOrbit(x,y,z))"]}
{"id": "eqasc_train_12507", "nl": "Gravity is a force that pulls on things.", "fol": "", "prediction": ["all x.(Gravity(x) -> PullsOnThings(x))"]}
{"id": "eqasc_train_12508", "nl": "A force that pulls on things pulls objects towards planets", "fol": "", "prediction": ["all x y.((Force(x) & PullsOnThings(x)) -> PullsObjectsTowardsPlanets(y))"]}
{"id": "eqasc_train_12509", "nl": "Feathers help birds fly and provide insulation.", "fol": "", "prediction": ["all x.(Feather(x) -> (HelpsBirdsFly(x) & ProvidesInsulation(x)))"]}
{"id": "eqasc_train_12510", "nl": "Eagles are a big bird.", "fol": "", "prediction": ["all x.(Eagle(x) -> BigBird(x))"]}
{"id": "eqasc_train_12511", "nl": "feathers help eagles fly", "fol": "", "prediction": ["all x.(Eagle(x) -> (FeathersHelpEaglesFly(x) & HelpEaglesFly(x)))"]}
{"id": "eqasc_train_12512", "nl": "Birds have bodies covered with feathers.", "fol": "", "prediction": ["all x.(Bird(x) -> HasBodyCoveredWithFeathers(x))"]}
{"id": "eqasc_train_12513", "nl": "Birds bodies are covered to help them fly and provide insulation.", "fol": "", "prediction": ["all x.(Bird(x) -> (CoveredBody(x) & HelpsFly(x) & ProvidesInsulation(x)))"]}
{"id": "eqasc_train_12514", "nl": "Penguins rely on their feathers for insulation.", "fol": "", "prediction": ["all x.(Penguin(x) -> ReliesOnFeathersForInsulation(x))"]}
{"id": "eqasc_train_12515", "nl": "penguins are kept warm with feathers", "fol": "", "prediction": ["all x.(Penguin(x) -> (KeepsWarmWithFeathers(x) & KeepsWarmWithFeathers(x)))"]}
{"id": "eqasc_train_12516", "nl": "Some birds are flightless birds.", "fol": "", "prediction": ["exists x.(Bird(x) & Flightless(x))"]}
{"id": "eqasc_train_12517", "nl": "Feathers provide insulation for the flightless. ", "fol": "", "prediction": ["all x.(Feather(x) -> ProvidesInsulationForFlightless(x))"]}
{"id": "eqasc_train_12518", "nl": "Class Aves is for the birds, literally.", "fol": "", "prediction": ["all x.(ClassAve(x) -> ForBirds(x))"]}
{"id": "eqasc_train_12519", "nl": "Feathers help animals in the class Aves fly and give them insulation.", "fol": "", "prediction": ["all x y.((Feather(x) & Animal(y) & Aves(y)) -> (Helps(x,y) & GivesInsulation(x,y)))"]}
{"id": "eqasc_train_12520", "nl": "feathers help hawks fly", "fol": "", "prediction": ["all x y.((Feather(x) & Hawk(y)) -> HelpsFly(x,y))"]}
{"id": "eqasc_train_12521", "nl": "Penguins keep warm with layers of insulation.", "fol": "", "prediction": ["all x.(Penguin(x) -> KeepsWarmWithInsulation(x))"]}
{"id": "eqasc_train_12522", "nl": "Feathers help birds fly and keep warm", "fol": "", "prediction": ["all x y.((Feather(x) & Bird(y)) -> (HelpsFly(x,y) & KeepsWarm(x,y)))"]}
{"id": "eqasc_train_12523", "nl": "Straight feathers are dominant to curly feathers .", "fol": "", "prediction": ["all x y.((StraightFeather(x) & CurlyFeather(y)) -> DominantTo(x,y))"]}
{"id": "eqasc_train_12524", "nl": "a part of birds where straight is dominant to curly helps them fly and provides insulation.", "fol": "", "prediction": ["all x.((Bird(x) & DominantStraight(x) & DominantCurly(x)) -> HelpsFly(x) & ProvidesInsulation(x))"]}
{"id": "eqasc_train_12525", "nl": "To survive the chill, warm-blooded penguins rely on feathers and fat for insulation.", "fol": "", "prediction": ["all x.((Penguin(x) & WarmBlooded(x)) -> (ReliesOnFeathers(x) & ReliesOnFat(x)))"]}
{"id": "eqasc_train_12526", "nl": "Birds survive the chill using the feathers that help them to fly", "fol": "", "prediction": ["all x y.((Bird(x) & Chill(y)) -> SurvivesUsingFeathers(x,y))"]}
{"id": "eqasc_train_12527", "nl": "Oxygen is essential for cellular respiration for all aerobic organisms.", "fol": "", "prediction": ["all x.(Oxygen(x) -> EssentialForCellularRespiration(x))"]}
{"id": "eqasc_train_12528", "nl": "Fungi are aerobic organisms.", "fol": "", "prediction": ["all x.(Fungus(x) -> AerobicOrganism(x))"]}
{"id": "eqasc_train_12529", "nl": "oxygen is essential for cellular respiration for fungi", "fol": "", "prediction": ["all x y.((Fungus(x) & Oxygen(y)) -> EssentialForCellularRespiration(x,y))"]}
{"id": "eqasc_train_12530", "nl": "Arteries carry oxygen to tissues and organs.", "fol": "", "prediction": ["all x.(Arterie(x) -> (CarriesOxygen(x) & ToTissuesAndOrgans(x)))"]}
{"id": "eqasc_train_12531", "nl": "arteries are essential for cellular respiration", "fol": "", "prediction": ["all x.(Arteries(x) -> EssentialForCellularRespiration(x))"]}
{"id": "eqasc_train_12532", "nl": "Aerobic organisms consume VOAs and alcohols.", "fol": "", "prediction": ["all x.(AerobicOrganism(x) -> (ConsumesVOAs(x) & ConsumesAlcohols(x)))"]}
{"id": "eqasc_train_12533", "nl": "Oxygen is essential for cellular respiration for organisms consuming VOAs and alcohols.", "fol": "", "prediction": ["all x.((Oxygen(x) & CellularRespiration(x) & ConsumesVOAsAndAlcohols(x)) -> EssentialFor(x,y))"]}
{"id": "eqasc_train_12534", "nl": "Oxygen is essential for a fungi's cellular respiration", "fol": "", "prediction": ["all x y.((Fungus(x) & Oxygen(y)) -> EssentialForCellularRespiration(x,y))"]}
{"id": "eqasc_train_12535", "nl": "Less oxygen for the mother means less oxygen for the baby.", "fol": "", "prediction": ["all x y.((Mother(x) & Baby(y)) -> LessOxygen(x,y))"]}
{"id": "eqasc_train_12536", "nl": "Mothers need respiration for their babies.", "fol": "", "prediction": ["all x y.((Mother(x) & Baby(y)) -> NeedsRespiration(x,y))"]}
{"id": "eqasc_train_12537", "nl": "Oxygen is a requirement for life.", "fol": "", "prediction": ["all x.(Oxygen(x) -> RequirementForLife(x))"]}
{"id": "eqasc_train_12538", "nl": "Oxygen is essential for cellular respiration for fungi.", "fol": "", "prediction": ["all x.(Oxygen(x) -> EssentialForCellularRespiration(x))"]}
{"id": "eqasc_train_12539", "nl": "Oxygen, for example, is produced by plants.", "fol": "", "prediction": ["all x y.((Oxygen(x) & Plant(y)) -> ProducedBy(x,y))"]}
{"id": "eqasc_train_12540", "nl": "Plants are essential for cellular respiration for all aerobic organisms.", "fol": "", "prediction": ["all x.(Plant(x) -> EssentialForCellularRespiration(x))"]}
{"id": "eqasc_train_12541", "nl": "Oxygen is essential for fungi cellular respiration.", "fol": "", "prediction": ["all x.(Oxygen(x) -> EssentialForFungiCellularRespiration(x))"]}
{"id": "eqasc_train_12542", "nl": "air is used for cellular respiration for aerobic organisms", "fol": "", "prediction": ["all x y.((Air(x) & AerobicOrganism(y)) -> UsedForCellularRespiration(x,y))"]}
{"id": "eqasc_train_12543", "nl": "Besides nitrogen and oxygen, the atmosphere contains many, many other molecules in trace amounts.", "fol": "", "prediction": ["all x.(Atmosphere(x) -> (Nitrogen(x) & Oxygen(x) & ManyMoleculesInTraceAmounts(x)))"]}
{"id": "eqasc_train_12544", "nl": "the atmosphere is essential for cellular respiration", "fol": "", "prediction": ["all x.(Atmosphere(x) -> EssentialForCellularRespiration(x))"]}
{"id": "eqasc_train_12545", "nl": "Adult sponges produce eggs and sperm.", "fol": "", "prediction": ["all x.(AdultSponge(x) -> (ProducesEggs(x) & ProducesSpore(x)))"]}
{"id": "eqasc_train_12546", "nl": "Adult sponges produce gametes", "fol": "", "prediction": ["all x.(AdultSponge(x) -> ProducesGametes(x))"]}
{"id": "eqasc_train_12547", "nl": "Hermaphrodites are female animals that make both sperm and oocytes.", "fol": "", "prediction": ["all x.(Hermaphrodite(x) -> (FemaleAnimal(x) & MakesSsperm(x) & MakesOocytes(x)))"]}
{"id": "eqasc_train_12548", "nl": "adult sponges are hermaphrodites", "fol": "", "prediction": ["all x.(AdultSponge(x) -> (Hermaphrodite(x) & Hermaphrodite(x)))"]}
{"id": "eqasc_train_12549", "nl": "Adult sponges produce female gametes and sperm.", "fol": "", "prediction": ["all x.(AdultSponge(x) -> (ProducesFemaleGametes(x) & ProducesSpore(x)))"]}
{"id": "eqasc_train_12550", "nl": "Adults are sexually mature.", "fol": "", "prediction": ["all x.(Adult(x) -> SexuallyMature(x))"]}
{"id": "eqasc_train_12551", "nl": "Mature sponges produce eggs and sperm.", "fol": "", "prediction": ["all x.(MatureSponge(x) -> (ProducesEggs(x) & ProducesSpore(x)))"]}
{"id": "eqasc_train_12552", "nl": "Each ovule usually contains one egg , the female gamete or sex cell.", "fol": "", "prediction": ["all x.(Ovule(x) -> (ContainsEgg(x) | ContainsSexCell(x)))"]}
{"id": "eqasc_train_12553", "nl": "Sexual reproduction involves sperm and an egg.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> (InvolvesSsperm(x) & InvolvesEgg(x)))"]}
{"id": "eqasc_train_12554", "nl": "adult sponges reproduce sexually", "fol": "", "prediction": ["all x.((AdultSponge(x) & Adult(x)) -> ReproducesSexually(x))"]}
{"id": "eqasc_train_12555", "nl": "BTW, a gamete is like an egg or sperm.", "fol": "", "prediction": ["(Bittaly(Gamete) -> (Egg(e) | Sperm(e))))"]}
{"id": "eqasc_train_12556", "nl": "Most sponges are hermaphroditic, meaning that a single organism has both eggs and sperm.", "fol": "", "prediction": ["all x.(Sponge(x) -> (Hermaphroditic(x) & SingleOrganism(x) & HasEggs(x) & HasSperm(x)))"]}
{"id": "eqasc_train_12557", "nl": "Adult sponges are a single organism that produce seed and eggs", "fol": "", "prediction": ["all x.(AdultSponge(x) -> (SingleOrganism(x) & ProducesSeed(x) & ProducesEggs(x)))"]}
{"id": "eqasc_train_12558", "nl": "Sponges are the most primitive multicellular animals.", "fol": "", "prediction": ["all x.(Sponges(x) -> PrimitiveMulticellularAnimal(x))"]}
{"id": "eqasc_train_12559", "nl": "The most primitive multi-cellular animals produce eggs and sperm.", "fol": "", "prediction": ["all x.((Animal(x) & Primitive(x)) -> (ProducesEggs(x) & ProducesSpore(x)))"]}
{"id": "eqasc_train_12560", "nl": "Most sponges are hermaphrodites, each individual bearing both eggs and sperm.", "fol": "", "prediction": ["all x.(Sponge(x) -> (Hermaphrodite(x) & BearsEggs(x) & BearsSpore(x)))"]}
{"id": "eqasc_train_12561", "nl": "sponges are hermaphrodites", "fol": "", "prediction": ["all x.(Sponge(x) -> Hermaphrodite(x))"]}
{"id": "eqasc_train_12562", "nl": "adult sponges produce gametes", "fol": "", "prediction": ["all x.((AdultSponge(x) & ProducesGametes(x)) -> ProducesGametes(x))"]}
{"id": "eqasc_train_12563", "nl": "All adult sponges are sessile.", "fol": "", "prediction": ["all x.(AdultSponge(x) -> Sessile(x))"]}
{"id": "eqasc_train_12564", "nl": "A thing which is sessile produces eggs and sperm.", "fol": "", "prediction": ["all x.((Thing(x) & Sessile(x)) -> (ProducesEggs(x) & ProducesSpores(x)))"]}
{"id": "eqasc_train_12565", "nl": "Sponges are multicellular animals that belong to the Phylum Porifera.", "fol": "", "prediction": ["all x.(Sponges(x) -> (MulticellularAnimal(x) & BelongsToPhylumPorifera(x)))"]}
{"id": "eqasc_train_12566", "nl": "Adult members of the Porifera phylum produce eggs and sperm", "fol": "", "prediction": ["all x.((AdultMember(x) & PoriferaPhylum(x)) -> (ProducesEggs(x) & ProducesSporem(x)))"]}
{"id": "eqasc_train_12567", "nl": "An adult is mature, fully developed.", "fol": "", "prediction": ["all x.(Adult(x) -> (Mature(x) & FullyDeveloped(x)))"]}
{"id": "eqasc_train_12568", "nl": "if two balanced forces act on an object in opposite directions then that object will remain stationary", "fol": "", "prediction": ["all x y.((BalancedForces(x) & BalancedForces(y) & Object(z) & ActsOn(x,z) & OppositeDirections(x,z)) -> RemainsStanding(x,z))"]}
{"id": "eqasc_train_12569", "nl": "If an object is at equilibrium, then the forces are balanced.", "fol": "", "prediction": ["all x.((Object(x) & AtEquilibrium(x)) -> ForcesBalanced(x))"]}
{"id": "eqasc_train_12570", "nl": "If an object is at equilibrium  that object will remain stationary", "fol": "", "prediction": ["all x.((Object(x) & AtEquilibrium(x)) -> RemainsStanding(x))"]}
{"id": "eqasc_train_12571", "nl": "Pushes and pulls can change the movement of an object.", "fol": "", "prediction": ["all x y.((Push(x) & Pull(y)) -> ChangesMovement(x,y))"]}
{"id": "eqasc_train_12572", "nl": "Pushes and pulls can change the movement of something or have it remain stationary.", "fol": "", "prediction": ["all x y.((Push(x) & Pull(y)) -> (ChangesMovement(x,y) | RemainsStable(x,y)))"]}
{"id": "eqasc_train_12573", "nl": "if two balanced forces act on an badge in opposite directions then that badge will remain stationary", "fol": "", "prediction": ["all x y.((BalancedForces(x) & BalancedForces(y) & ActOnBadge(x,y) & OppositeDirections(x,y)) -> StationaryBadge(x))"]}
{"id": "eqasc_train_12574", "nl": "When an object is at equilibrium, the object will remain stationary", "fol": "", "prediction": ["all x.((Object(x) & AtEquilibrium(x)) -> RemainsStanding(x))"]}
{"id": "eqasc_train_12575", "nl": "Gravity creates force and energy.", "fol": "", "prediction": ["all x.(Gravity(x) -> (CreatesForce(x) & CreatesEnergy(x)))"]}
{"id": "eqasc_train_12576", "nl": "gravity can cause an object to remain stationary", "fol": "", "prediction": ["all x y.((Gravity(x) & Object(y)) -> CanCauseStationality(x,y))"]}
{"id": "eqasc_train_12577", "nl": "Objects can be stationary or moving with constant linear velocity.", "fol": "", "prediction": ["all x.(Object(x) -> (Stable(x) | MovingWithConstantLinearVibration(x)))"]}
{"id": "eqasc_train_12578", "nl": "if two balanced forces act on an object in opposite directions then that object is not  moving", "fol": "", "prediction": ["all x y.((BalancedForces(x) & BalancedForces(y) & Object(z) & ActsOn(x,z) & OppositeDirections(x,z)) -> -Moving(x,z))"]}
{"id": "eqasc_train_12579", "nl": "a stationary object is at equilibrium", "fol": "", "prediction": ["all x.((StableObject(x) & AtEquilibrium(x)) -> AtEquilibrium(x))"]}
{"id": "eqasc_train_12580", "nl": "Two forces at an equilibrium on an object in opposite directions will keep the object stationary", "fol": "", "prediction": ["all x y.((Force(x) & Force(y) & Equilibrium(x,y) & OppositeDirections(y)) -> KeepsObjectStanding(x,y))"]}
{"id": "eqasc_train_12581", "nl": "Opposites also hold each other in balance and exert mutual control.", "fol": "", "prediction": ["all x.(Opposites(x) -> (HoldsBalance(x) & ExertsMutualControl(x)))"]}
{"id": "eqasc_train_12582", "nl": "balanced forces exert mutually on an object making it remain stationary ", "fol": "", "prediction": ["all x y.((BalancedForces(x) & Object(y) & ExertsMutually(x,y)) -> RemainsStanding(y))"]}
{"id": "eqasc_train_12583", "nl": "Centrifugal force exactly balances gravitational force.", "fol": "", "prediction": ["all x.(CentrifugalForce(x) -> BalancesGravitationalForce(x))"]}
{"id": "eqasc_train_12584", "nl": "Centrifugal force act along with gravitational force to cause an object to remain stationary", "fol": "", "prediction": ["all x y.((CentrifugalForce(x) & GravitationalForce(y)) -> CausesObjectToRemainStanding(x,y))"]}
{"id": "eqasc_train_12585", "nl": "If two balanced forces act on an object in opposite directions then that object will not move.", "fol": "", "prediction": ["all x y.((BalancedForce(x) & BalancedForce(y) & Object(z) & ActsOn(x,y,z)) -> -Move(x,z))"]}
{"id": "eqasc_train_12586", "nl": "Competition may lead to aggressive behaviors or displays of aggression.", "fol": "", "prediction": ["all x.(Competition(x) -> (AggressiveBehaviors(x) | DisplaysAggression(x)))"]}
{"id": "eqasc_train_12587", "nl": "competition may lead to violence", "fol": "", "prediction": ["all x.(Competition(x) -> MayLeadToViolence(x))"]}
{"id": "eqasc_train_12588", "nl": "Aggression is the drive, the adrenaline, the power.", "fol": "", "prediction": ["all x.(Aggression(x) -> (Drive(x) & Adrenalin(x) & Power(x)))"]}
{"id": "eqasc_train_12589", "nl": "Competition may lead to release of adrenaline", "fol": "", "prediction": ["all x y.((Competition(x) & Adrenaline(y)) -> MayLeadToRelease(x,y))"]}
{"id": "eqasc_train_12590", "nl": "Population Competition for food in larger animals leads to territory being established and defended.", "fol": "", "prediction": ["all x y.((PopulationCompetition(x) & LargerAnimal(y)) -> (LikesToTerritoryEstablishment(x,y) & LeadsToTerritoryDefense(x,y)))"]}
{"id": "eqasc_train_12591", "nl": "populations need for food can lead to displays of aggression", "fol": "", "prediction": ["all x.((Population(x) & NeedsFood(x)) -> DisplaysOfAggression(x))"]}
{"id": "eqasc_train_12592", "nl": "Human mating behavior also involves some competition.", "fol": "", "prediction": ["all x.(HumanMatchingBehavior(x) -> InvolvesCompetition(x))"]}
{"id": "eqasc_train_12593", "nl": "Human mating may lead to aggressive behaviors or displays of aggresion", "fol": "", "prediction": ["all x.(HumanMating(x) -> (AggressiveBehaviors(x) | DisplaysAggravation(x)))"]}
{"id": "eqasc_train_12594", "nl": "Aggression is the desire or intent to cause harm.", "fol": "", "prediction": ["all x.(Aggression(x) -> (DeedOrIntentToCauseHarm(x)))"]}
{"id": "eqasc_train_12595", "nl": "competition can cause harm", "fol": "", "prediction": ["all x.(Competition(x) -> CausesHarm(x))"]}
{"id": "eqasc_train_12596", "nl": "With so many does and so few older bucks, there is little competition for mating.", "fol": "", "prediction": ["all x.((Does(x) & OlderDogs(x)) -> LittleCompetitionForMating(x))"]}
{"id": "eqasc_train_12597", "nl": "bucks display less aggression when there are fewer older bucks", "fol": "", "prediction": ["all x.((Bod(x) & FewerOlderBods(x)) -> DisplaysLessAggression(x))"]}
{"id": "eqasc_train_12598", "nl": "Frequently their behavior is aggressively hostile.", "fol": "", "prediction": ["all x.((Behavior(x) & Aggressive(x)) -> Hostile(x))"]}
{"id": "eqasc_train_12599", "nl": "Competition may lead to hostility.", "fol": "", "prediction": ["all x.(Competition(x) -> MayLeadToHospitality(x))"]}
{"id": "eqasc_train_12600", "nl": "Many sports are solely competition sports.", "fol": "", "prediction": ["exists x.(Sport(x) & CompetitionSport(x))"]}
{"id": "eqasc_train_12601", "nl": "sports may lead to aggressive behaviors", "fol": "", "prediction": ["all x.(Sport(x) -> (LeadsToAggressiveBehaviors(x) | LeadsToAggressiveBehaviors(x)))"]}
{"id": "eqasc_train_12602", "nl": "Aggressive behavior is often first recognized as bullying behavior.", "fol": "", "prediction": ["all x.(AggressiveBehavior(x) -> BullyingBehavior(x))"]}
{"id": "eqasc_train_12603", "nl": "Competition can result in bullying.", "fol": "", "prediction": ["all x.(Competition(x) -> Bullying(x))"]}
{"id": "eqasc_train_12604", "nl": "Social aggression is characterized by a dog that demonstrates a deep grumbling bark.", "fol": "", "prediction": ["all x.((Dog(x) & DeepGrumblingBark(x)) -> SocialAggression(x))"]}
{"id": "eqasc_train_12605", "nl": "competition can lead to dogs demonstrating a deep grumbling bark", "fol": "", "prediction": ["all x y.((Dog(x) & Dog(y)) -> (DeepGrammingBark(x) & DeepGrumblingBark(y)))"]}
{"id": "eqasc_train_12606", "nl": "Another form of aggressive behavior is the verbal outburst.", "fol": "", "prediction": ["all x.(AggressiveBehavior(x) -> VerbalOutburst(x))"]}
{"id": "eqasc_train_12607", "nl": "competition may lead to verbal outbursts", "fol": "", "prediction": ["all x.(Competition(x) -> (LeadsToBursts(x) & VerbalOutbursts(x)))"]}
{"id": "eqasc_train_12608", "nl": "an incandescent light bulb converts electricity into light by sending electricity through a filament", "fol": "", "prediction": ["all x.(IncandescentLightBulb(x) -> (ConvertsElectricityToLight(x) & SendsElectricityThroughFilm(x)))"]}
{"id": "eqasc_train_12609", "nl": "Standard filaments are made of tungsten.", "fol": "", "prediction": ["all x.(StandardFilm(x) -> MadeOfTungsten(x))"]}
{"id": "eqasc_train_12610", "nl": "an incandescent light bulb converts electricity into light by using tungsten", "fol": "", "prediction": ["all x.(IncandescentLightBulb(x) -> (ConvertsElectricityToLight(x) & UsesTungsten(x)))"]}
{"id": "eqasc_train_12611", "nl": "Light is the oscillations in the electric field.", "fol": "", "prediction": ["all x.(Light(x) -> OscillationsInElectricField(x))"]}
{"id": "eqasc_train_12612", "nl": "Incandescent bulbs convert electricity into oscillations in the electric field.", "fol": "", "prediction": ["all x.(IncandescentBulb(x) -> ConvertsElectricityToOscillations(x))"]}
{"id": "eqasc_train_12613", "nl": "An incandescent material is so hot that it glows, producing light.", "fol": "", "prediction": ["all x.(IncandescentMaterial(x) -> (Hot(x) & Glows(x) & ProducesLight(x)))"]}
{"id": "eqasc_train_12614", "nl": "Incandescent bulbs use electricity to get hot and glow.", "fol": "", "prediction": ["all x.(IncandescentBulb(x) -> (UsesElectricity(x) & GetsHot(x) & Glows(x)))"]}
{"id": "eqasc_train_12615", "nl": "Additional electricity is stored in the battery.", "fol": "", "prediction": ["all x.((Battery(x) & StoresElectricity(x)) -> Additional(x))"]}
{"id": "eqasc_train_12616", "nl": "an incandescent light bulb converts battery energy into light", "fol": "", "prediction": ["all x.(IncandescentLightBulb(x) -> ConvertsBatteryEnergyToLight(x))"]}
{"id": "eqasc_train_12617", "nl": "a light bulb converts energy into light by sending energy through a filament", "fol": "", "prediction": ["all x y.((LightBulb(x) & Energy(y)) -> ConvertsToLight(x,y))"]}
{"id": "eqasc_train_12618", "nl": "Most of the yard lamps are incandescent.", "fol": "", "prediction": ["all x.(GardenLamp(x) -> Incandescent(x))"]}
{"id": "eqasc_train_12619", "nl": "most yard lamps convert electricity to light using a filament", "fol": "", "prediction": ["all x y.((MetalLamp(x) & YardLamp(y)) -> ConvertsElectricityToLight(x,y))"]}
{"id": "eqasc_train_12620", "nl": "Incandescence is light from heat energy.", "fol": "", "prediction": ["all x.(Incandescence(x) -> LightFromHeatEnergy(x))"]}
{"id": "eqasc_train_12621", "nl": "light bulbs are powered by heat", "fol": "", "prediction": ["all x.(LightBulb(x) -> (PoweredByHeat(x) & Heat(x)))"]}
{"id": "eqasc_train_12622", "nl": "Fiber optics works by carrying light along hair-thin filaments of glass.", "fol": "", "prediction": ["all x.(FoboidOptics(x) -> (CarriesLight(x) & HairThinFilms(x) & Glass(x)))"]}
{"id": "eqasc_train_12623", "nl": "an incandescent light bulb converts electricity into light by sending electricity through hair-thin fibers of glass", "fol": "", "prediction": ["all x y.((IncandescentLightBulb(x) & Electricity(y)) -> ConvertsToLight(x,y))"]}
{"id": "eqasc_train_12624", "nl": "Incandescent bulbs produce more heat than light.", "fol": "", "prediction": ["all x.(IncandescentBulb(x) -> ProducesMoreHeatThanLight(x))"]}
{"id": "eqasc_train_12625", "nl": "Incandescent bulbs produce heat as they create electricity.", "fol": "", "prediction": ["all x.((IncandescentBulb(x) & CreatesElectricity(x)) -> ProducesHeat(x))"]}
{"id": "eqasc_train_12626", "nl": "LEDs converts electricity into light", "fol": "", "prediction": ["all x.(LEDs(x) -> ConvertsElectricityToLight(x))"]}
{"id": "eqasc_train_12627", "nl": "Chromosomes are coiled structures made of DNA and proteins.", "fol": "", "prediction": ["all x.(Chromosome(x) -> (CoiledStructure(x) & MadeOfDNA(x) & MadeOfProteins(x)))"]}
{"id": "eqasc_train_12628", "nl": "During prophase the chromosomes coil up.", "fol": "", "prediction": ["all x.(Prophase(x) -> CoilUpChromosomes(x))"]}
{"id": "eqasc_train_12629", "nl": "Strucutres coil during prophase and are made of DNA and proteins", "fol": "", "prediction": ["all x.(Strucutres(x) -> (CoilsDuringProphase(x) & MadeOfDNAAndProteins(x)))"]}
{"id": "eqasc_train_12630", "nl": "Genes are a part of coiled structures made of DNA and proteins", "fol": "", "prediction": ["all x.(Gene(x) -> (PartOfCoiledStructures(x) & MadeOfDNAAndProteins(x)))"]}
{"id": "eqasc_train_12631", "nl": "DNA is deoxyribonucleic acid.", "fol": "", "prediction": ["all x.(DNA(x) -> DeoxyribonucleicAcid(x))"]}
{"id": "eqasc_train_12632", "nl": "chromosomes are coiled structures made of deoxyribonucleic acid and proteins", "fol": "", "prediction": ["all x.(Chromosome(x) -> (CoiledStructure(x) & MadeOfDeoxyribonucleicAcidAndProteins(x)))"]}
{"id": "eqasc_train_12633", "nl": "Chromosomes consist of DNA and protein.", "fol": "", "prediction": ["all x.(Chromosome(x) -> (ConsistsOfDNA(x) & ConsistsOfProtein(x)))"]}
{"id": "eqasc_train_12634", "nl": "chromosomes are coiled", "fol": "", "prediction": ["all x.(Chromosome(x) -> Coiled(x))"]}
{"id": "eqasc_train_12635", "nl": "Trisomy chromosomes are the most common chromosomal anomaly.", "fol": "", "prediction": ["all x.(TrisomyChromosome(x) -> CommonChromosomeAnomaly(x))"]}
{"id": "eqasc_train_12636", "nl": "trisomy is an anomaly in coiled structures made of DNA and proteins", "fol": "", "prediction": ["all x.(Trisomy(x) -> (AnomalyInCoiledStructures(x) & MadeOfDNAAndProteins(x)))"]}
{"id": "eqasc_train_12637", "nl": "DNA is the stuff of life.", "fol": "", "prediction": ["all x.(DNA(x) -> StuffOfLife(x))"]}
{"id": "eqasc_train_12638", "nl": "chromosomes are the stuff of life", "fol": "", "prediction": ["all x.(Chromosome(x) -> StuffOfLife(x))"]}
{"id": "eqasc_train_12639", "nl": "Chromosomes are coiled structures made of Deoxyribonucleicacid and proteins.", "fol": "", "prediction": ["all x.(Chromosome(x) -> (CoiledStructure(x) & MadeOfDeoxyribonucleicacidAndProteins(x)))"]}
{"id": "eqasc_train_12640", "nl": "Genes are carried on the chromosomes.", "fol": "", "prediction": ["all x.(Gene(x) -> CarriedOnChromosome(x))"]}
{"id": "eqasc_train_12641", "nl": "genes are carried in coiled structures made of DNA and proteins", "fol": "", "prediction": ["all x y.((Gene(x) & CoiledStructure(y)) -> (CarriedIn(x,y) & MadeOf(y,DNA) & MadeOf(y,Proteins)))"]}
{"id": "eqasc_train_12642", "nl": "An egg or sperm with an extra chromosome or missing a chromosome is then made.", "fol": "", "prediction": ["all x.((Egg(x) | Sperm(x)) -> (ExtraChromosome(x) | MissingChromosome(x)))"]}
{"id": "eqasc_train_12643", "nl": "Eggs and sperm have coiled structures made of DNA and proteins.", "fol": "", "prediction": ["all x.((Egg(x) | Sperm(x)) -> (CoiledStructures(x) & MadeOfDNA(x) & MadeOfProteins(x)))"]}
{"id": "eqasc_train_12644", "nl": "Chromosomes are made up of DNA and histone proteins.", "fol": "", "prediction": ["all x.(Chromosome(x) -> (MadeUpOfDNA(x) & MadeUpOfHistoneProteins(x)))"]}
{"id": "eqasc_train_12645", "nl": "histone proteins make up chromosomes", "fol": "", "prediction": ["all x y.((HistoroneProtein(x) & Chromosome(y)) -> MakesUp(x,y))"]}
{"id": "eqasc_train_12646", "nl": "Sex Chromosomes determine sex of individual.", "fol": "", "prediction": ["all x.(SexChromosome(x) -> DeterminesSexOfIndividual(x))"]}
{"id": "eqasc_train_12647", "nl": "coiled structures made of DNA and proteins determine sex", "fol": "", "prediction": ["all x y.((CoiledStructure(x) & MadeOfDNA(x) & MadeOfProteins(x)) -> DeterminesSex(y))"]}
{"id": "eqasc_train_12648", "nl": "Chromosomes are coiled structures made of deoxyribonucleic acid and proteins", "fol": "", "prediction": ["all x.(Chromosome(x) -> (CoiledStructure(x) & MadeOfDeoxyribonucleicAcidAndProteins(x)))"]}
{"id": "eqasc_train_12649", "nl": "Sex chromosomes determine gender.", "fol": "", "prediction": ["all x.(SexChromosome(x) -> DeterminesGender(x))"]}
{"id": "eqasc_train_12650", "nl": "The determination of gender is coiled structures made of DNA and proteins", "fol": "", "prediction": ["all x.(GenderDetermination(x) -> (CoiledStructures(x) & MadeOfDNAAndProteins(x)))"]}
{"id": "eqasc_train_12651", "nl": "Viruses cause many human diseases.", "fol": "", "prediction": ["all x.(Virus(x) -> CausesManyHumanDiseases(x))"]}
{"id": "eqasc_train_12652", "nl": "Influenza virus causes widespread human disease.", "fol": "", "prediction": ["all x.(InfluenzaVirus(x) -> CausesWidespreadHumanDisease(x))"]}
{"id": "eqasc_train_12653", "nl": "Influenza is a disease caused by a virus", "fol": "", "prediction": ["all x.(Influenza(x) -> (DiseaseCausedByVirus(x) & CausedByVirus(x)))"]}
{"id": "eqasc_train_12654", "nl": "influenza causes widespread disease", "fol": "", "prediction": ["all x.(Influenza(x) -> CausesWidespreadDisease(x))"]}
{"id": "eqasc_train_12655", "nl": "Another virus is the Human Papilloma virus.", "fol": "", "prediction": ["(exists x.(Virus(x) & HumanPapillomaVirus(x)))"]}
{"id": "eqasc_train_12656", "nl": "Papilloma causes diseases", "fol": "", "prediction": ["all x.(Papilloma(x) -> CausesDiseases(x))"]}
{"id": "eqasc_train_12657", "nl": "Human diseases can be detected clinically.", "fol": "", "prediction": ["all x.(HumanDisease(x) -> CanDetectClinically(x))"]}
{"id": "eqasc_train_12658", "nl": "viruses can be detected clinically", "fol": "", "prediction": ["all x.(Viral(x) -> CanDetectClinically(x))"]}
{"id": "eqasc_train_12659", "nl": "Bacterial contamination can spread diseases to humans and livestock.", "fol": "", "prediction": ["all x.(BacterialContamination(x) -> (SpreadsDiseases(x) & ToHumans(x) & ToLivestock(x)))"]}
{"id": "eqasc_train_12660", "nl": "Viruses cause contamination spreading diseases ", "fol": "", "prediction": ["all x y.((Virus(x) & Disease(y)) -> CausesContamination(x,y))"]}
{"id": "eqasc_train_12661", "nl": "smallpox causes human disease", "fol": "", "prediction": ["all x.(Smallpox(x) -> CausesHumanDisease(x))"]}
{"id": "eqasc_train_12662", "nl": "Human viruses are created by natural process.", "fol": "", "prediction": ["all x.(HumanViral(x) -> CreatedByNaturalProcess(x))"]}
{"id": "eqasc_train_12663", "nl": "Something created by a natural process  cause many human diseases. ", "fol": "", "prediction": ["all x.((CreatedByNaturalProcess(x) & CausesManyHumanDiseases(x)) -> CausesManyHumanDiseases(x))"]}
{"id": "eqasc_train_12664", "nl": "Infectious disease is the leading cause of human death worldwide.", "fol": "", "prediction": ["all x.(InfectiousDisease(x) -> LeadingCauseOfHumanDeath(x))"]}
{"id": "eqasc_train_12665", "nl": "viruses cause death", "fol": "", "prediction": ["all x.(Virus(x) -> CausesDeath(x))"]}
{"id": "eqasc_train_12666", "nl": "Influenza causes human disease.", "fol": "", "prediction": ["all x.(Influenza(x) -> CausesHumanDisease(x))"]}
{"id": "eqasc_train_12667", "nl": "the gravitational pull of the Moon on Earth 's oceans causes the tides", "fol": "", "prediction": ["all x y z.((Moon(x) & Earth(y) & Ocean(z) & GravitationalPull(x,y,z)) -> CausesTides(x))"]}
{"id": "eqasc_train_12668", "nl": "Planetary moons are natural satellites.", "fol": "", "prediction": ["all x.(PlanetaryMoon(x) -> NaturalSatellite(x))"]}
{"id": "eqasc_train_12669", "nl": "The gravitational pull of a natural satellite on Earth's oceans causes the tides", "fol": "", "prediction": ["all x y z.((GravitationalPull(x) & NaturalSatellite(y) & EarthsOceans(z) & On(x,y,z)) -> CausesTides(x))"]}
{"id": "eqasc_train_12670", "nl": "the gravitational pull of the Moon on the Pacific causes the tides", "fol": "", "prediction": ["all x y z.((GravitationalPullOfMoon(x) & PacificTide(y) & GravitationalPullOfMoon(z)) -> CausesTides(x,y,z))"]}
{"id": "eqasc_train_12671", "nl": "Tides also cause currents.", "fol": "", "prediction": ["all x.(Tide(x) -> CausesCurrents(x))"]}
{"id": "eqasc_train_12672", "nl": "the gravitational pull of the Moon on Earth 's oceans causes currents", "fol": "", "prediction": ["all x y z.((GravitationalPull(x) & Moon(y) & EarthsOceans(z) & On(x,y,z)) -> CausesCurrents(x))"]}
{"id": "eqasc_train_12673", "nl": "Ocean tides enter and leave the Bay twice a day.", "fol": "", "prediction": ["all x y.((OceanTide(x) & Bay(y)) -> EntersAndLeaves(x,y))"]}
{"id": "eqasc_train_12674", "nl": "the gravitational pull of the Moon on Earth 's oceans causes water to enter and leave the bay twice a day", "fol": "", "prediction": ["all x y z.((GravitationalPullOfMoon(x) & EarthsOceans(y) & Bay(z)) -> CausesWaterToEnterAndLeave(x,z))"]}
{"id": "eqasc_train_12675", "nl": "High tide is the crest of the wave and low tide the trough.", "fol": "", "prediction": ["(all x.(HighTidal(x) -> CrestOfWave(x)) & all y.(LowTidal(y) -> TroughOfWave(y)))"]}
{"id": "eqasc_train_12676", "nl": "the gravitational pull of the Moon on Earth 's oceans causes waves", "fol": "", "prediction": ["all x y z.((GravitationalPull(x) & Moon(y) & EarthsOceans(z)) -> CausesWaves(x,y,z))"]}
{"id": "eqasc_train_12677", "nl": "For example, ocean tides are caused by the sun and moon's gravity pulling on the water.", "fol": "", "prediction": ["all x y.((OceanTide(x) & Sun(y) & Moon(z)) -> CausedByGravityPullingOnWater(x,y,z))"]}
{"id": "eqasc_train_12678", "nl": "tides are caused by the moon", "fol": "", "prediction": ["all x y.((Tide(x) & Moon(y)) -> CausedBy(x,y))"]}
{"id": "eqasc_train_12679", "nl": "Energy is pumped into the ocean by the winds and tides.", "fol": "", "prediction": ["all x y.((Energy(x) & Ocean(y)) -> (PumpedByWinds(x,y) & PumpedByTides(x,y)))"]}
{"id": "eqasc_train_12680", "nl": "The gravitational pull of the Moon on Earth's oceans pumps energy into the ocean.", "fol": "", "prediction": ["all x y.((Moon(x) & EarthsOceans(y)) -> PumpsEnergyIntoOcean(x,y))"]}
{"id": "eqasc_train_12681", "nl": "Gravity causes tides.", "fol": "", "prediction": ["all x.(Gravity(x) -> CausesTides(x))"]}
{"id": "eqasc_train_12682", "nl": "the moon forms tides", "fol": "", "prediction": ["all x y.((Moon(x) & Tide(y)) -> Forms(x,y))"]}
{"id": "eqasc_train_12683", "nl": "Tides are the rising and falling of ocean's water.", "fol": "", "prediction": ["all x.(Tide(x) -> (RisingOceanWater(x) & FallingOceanWater(x)))"]}
{"id": "eqasc_train_12684", "nl": "the gravitational pull of the Moon on Earth 's oceans causes water to rise and fall", "fol": "", "prediction": ["all x y z.((GravitationalPull(x) & Moon(y) & EarthsOceans(z) & EarthsOceans(x,z)) -> CausesWaterToRiseAndFall(x,z))"]}
{"id": "eqasc_train_12685", "nl": "Tides A tide is vertical movement of water.", "fol": "", "prediction": ["all x.(Tide(x) -> VerticalMovementOfWater(x))"]}
{"id": "eqasc_train_12686", "nl": "The gravitational pull of the Moon on Earth 's oceans causes the vertical movement of water", "fol": "", "prediction": ["all x y z.((GravitationalPull(x) & Moon(y) & EarthsOceans(z)) -> CausesVerticalMovementOfWater(x,y,z))"]}
{"id": "eqasc_train_12687", "nl": "High tide is when the best waves come in.", "fol": "", "prediction": ["all x.(HighTidal(x) -> BestWavesIn(x))"]}
{"id": "eqasc_train_12688", "nl": "Earth Day celebrations are now held across the world.", "fol": "", "prediction": ["all x.(EarthDay(x) -> HeldAcrossWorld(x))"]}
{"id": "eqasc_train_12689", "nl": "the gravitational pull of the Moon on the world's oceans causes the tides", "fol": "", "prediction": ["all x y z.((GravitationalPullOfMoon(x) & WorldOceans(y) & EarthsOceans(z)) -> CausesTides(x,y,z))"]}
{"id": "eqasc_train_12690", "nl": "To the west is the Pacific Ocean.", "fol": "", "prediction": ["(West is PacificOcean(x) & ToWest(x))"]}
{"id": "eqasc_train_12691", "nl": "Rivers drain into the Pacific Ocean.", "fol": "", "prediction": ["all x.(River(x) -> DrainsIntoPacificOcean(x))"]}
{"id": "eqasc_train_12692", "nl": " the gravitational pull of the Moon on the Pacific causes the tides", "fol": "", "prediction": ["all x y z.((GravitationalPullOfMoon(x) & PacificTide(y) & GravitationalPullOfMoon(z)) -> CausesTides(x,y,z))"]}
{"id": "eqasc_train_12693", "nl": "Torrential rain and high tides caused flooding in coastal areas and damaged beachfront homes.", "fol": "", "prediction": ["all x y.((TorrentialRain(x) & HighTide(y)) -> (CausedFlooding(x,y) & DamagedBeachfrontHomes(x)))"]}
{"id": "eqasc_train_12694", "nl": "The gravitational pull of the moon on Earth's oceans causes flooding and damaged homes.", "fol": "", "prediction": ["all x y.((Moon(x) & EarthsOceans(y)) -> (CausesFlooding(x,y) & DamagesHomes(x,y)))"]}
{"id": "eqasc_train_12695", "nl": "Tides create current.", "fol": "", "prediction": ["all x.(Tide(x) -> CreatesCurrent(x))"]}
{"id": "eqasc_train_12696", "nl": "The gravitational pull of the Moon on Earth's ocean contributes to ocean currents", "fol": "", "prediction": ["all x y z.((GravitationalPull(x) & Moon(y) & EarthsOcean(z)) -> ContributesToOceanCurrents(x,y,z))"]}
{"id": "eqasc_train_12697", "nl": "using a gasoline engine requires burning gasoline", "fol": "", "prediction": ["all x.((GasolineEngine(x) & BurnsGasoline(x)) -> RequiresGasoline(x))"]}
{"id": "eqasc_train_12698", "nl": "Many engines burn fossil fuels.", "fol": "", "prediction": ["exists x.(Engine(x) & BurnsFossilFuels(x))"]}
{"id": "eqasc_train_12699", "nl": "For every one gallon of gasoline an engine burns, one gallon of water is produced as a by-product.", "fol": "", "prediction": ["all x y.((Gasoline(x) & Engine(y) & Burns(x,y)) -> (Gasoline(x) & Water(y)))"]}
{"id": "eqasc_train_12700", "nl": "Using a gasoline engine produces water as a by-product", "fol": "", "prediction": ["all x y.((GasolineEngine(x) & Water(y)) -> ProducesByProduct(x,y))"]}
{"id": "eqasc_train_12701", "nl": "using some engines requires burning fossil fuels", "fol": "", "prediction": ["all x y.((Engine(x) & Engine(y)) -> RequiresFossilFuels(x,y))"]}
{"id": "eqasc_train_12702", "nl": "When the fuel is ignited, it burns with oxygen.", "fol": "", "prediction": ["all x.((Fuel(x) & Ignited(x)) -> BurnsWithOxygen(x))"]}
{"id": "eqasc_train_12703", "nl": "Using a gasoline engine requires igniting gasoline.", "fol": "", "prediction": ["all x.((GasolineEngine(x) & Uses(x,Gasoline)) -> RequiresIgnition(x))"]}
{"id": "eqasc_train_12704", "nl": "Gasoline ignites easily and burns vigorously.", "fol": "", "prediction": ["all x.(Gasoline(x) -> (IgnitesEasily(x) & BurnsVibrantly(x)))"]}
{"id": "eqasc_train_12705", "nl": "gasoline ignites easily", "fol": "", "prediction": ["all x.(Gasoline(x) -> IgnitesEasily(x))"]}
{"id": "eqasc_train_12706", "nl": "using a gasoline engine requires easy ignition", "fol": "", "prediction": ["all x.((GasolineEngine(x) & Uses(x,Gasoline)) -> RequiresEasyIgnition(x))"]}
{"id": "eqasc_train_12707", "nl": "Fossil fuels include coal, oil, natural gas, and gasoline.", "fol": "", "prediction": ["all x.(FossilFuel(x) -> (Coal(x) | Oil(x) | NaturalGas(x) | Gasoline(x)))"]}
{"id": "eqasc_train_12708", "nl": "using a fossil fuel engine requires burning fossil fuels", "fol": "", "prediction": ["all x.((FossilFuelEngine(x) & Uses(x,FossilFuels)) -> RequiresBurningFossilFuels(x))"]}
{"id": "eqasc_train_12709", "nl": "After the car is moving, the gasoline engine kicks in.", "fol": "", "prediction": ["all x.((Car(x) & Moving(x)) -> GasolineEngineKicksIn(x))"]}
{"id": "eqasc_train_12710", "nl": "Using a car can require burning gasoline", "fol": "", "prediction": ["all x y.((Car(x) & Car(y)) -> (RequiresBurningGasoline(x,y) & RequiresBurningGasoline(x,y)))"]}
{"id": "eqasc_train_12711", "nl": "And, of course, burning of gasoline produces toxic carbon monoxide.", "fol": "", "prediction": ["(all x.((BurningOfGasoline(x) & ToxicCarbonMonoxide(x)) -> Produces(x,y)))"]}
{"id": "eqasc_train_12712", "nl": "Using a gasoline engine produces toxic carbon monoxide", "fol": "", "prediction": ["all x y.((GasolineEngine(x) & GasolineEngine(y)) -> ProducesToxicCarbonMonoxide(x,y))"]}
{"id": "eqasc_train_12713", "nl": "Gasoline is used in cars, boats, motorcycles, lawn mowers and other engines.", "fol": "", "prediction": ["all x.(Gasoline(x) -> (UsedInCars(x) | UsedInBoats(x) | UsedInMotorcycles(x) | UsedInLawnMowers(x) | UsedInEngines(x)))"]}
{"id": "eqasc_train_12714", "nl": "using a car requires burning gasoline", "fol": "", "prediction": ["all x y.((Car(x) & Car(y)) -> RequiresBurningGasoline(x,y))"]}
{"id": "eqasc_train_12715", "nl": "Gasoline and flammable liquid related burns, however, are a preventable problem.", "fol": "", "prediction": ["all x.((Gasoline(x) | FlammableLiquidRelatedBurns(x)) -> PreventableProblem(x))"]}
{"id": "eqasc_train_12716", "nl": "using an engine requires burning flammable liquid", "fol": "", "prediction": ["all x y.((Engine(x) & Engine(y)) -> RequiresBurningFlammableLiquid(x,y))"]}
{"id": "eqasc_train_12717", "nl": "When they are burned, fossil fuels are consumed.", "fol": "", "prediction": ["all x.((FossilFuels(x) & Burned(x)) -> Consumed(x))"]}
{"id": "eqasc_train_12718", "nl": "using a gasoline engine requires consuming gasoline", "fol": "", "prediction": ["all x.((GasolineEngine(x) & Uses(x,Gasoline)) -> RequiresConsumption(x,Gasoline))"]}
{"id": "eqasc_train_12719", "nl": "Vesicle transport requires energy, so it is also a form of active transport.", "fol": "", "prediction": ["all x.(VesicleTransport(x) -> (RequiresEnergy(x) & ActiveTransport(x)))"]}
{"id": "eqasc_train_12720", "nl": "Much of protein transport in a cell occurs via coated transport vesicles.", "fol": "", "prediction": ["all x y.((Cell(x) & Cell(y)) -> (ProteinTransport(x,y) & CoatedTransportVesicles(x,y)))"]}
{"id": "eqasc_train_12721", "nl": "Much of protein transport in a cell requires energy", "fol": "", "prediction": ["all x y.((ProteinTransport(x) & Cell(y)) -> RequiresEnergy(x,y))"]}
{"id": "eqasc_train_12722", "nl": "Synaptic vesicles glutamate transporter 5.", "fol": "", "prediction": ["all x.(SynapticVesiclesGlutamateTransporter(x) -> (SynapticVesiclesGlutamateTransporter(x) & -SynapticVesiclesGlutamateTransporter(x)))"]}
{"id": "eqasc_train_12723", "nl": "Glutamate transport requires energy.", "fol": "", "prediction": ["all x.(GlutamateTransport(x) -> RequiresEnergy(x))"]}
{"id": "eqasc_train_12724", "nl": "Active transport is another form of diffusion.", "fol": "", "prediction": ["all x.(ActiveTransport(x) -> Diffusion(x))"]}
{"id": "eqasc_train_12725", "nl": "diffusion requires energy", "fol": "", "prediction": ["all x.(Diffusion(x) -> RequiresEnergy(x))"]}
{"id": "eqasc_train_12726", "nl": "Active transport involves movement of substances against a chemical gradient.", "fol": "", "prediction": ["all x y.((ActiveTransport(x) & Substance(y)) -> MovesAgainstChemicalGradient(x,y))"]}
{"id": "eqasc_train_12727", "nl": "Vesicle transport requires energy for movement of substances against a chemical gradient.", "fol": "", "prediction": ["all x y.((VesicleTransport(x) & Substance(y)) -> RequiresEnergyForMovementAgainstChemicalGrade(x,y))"]}
{"id": "eqasc_train_12728", "nl": "Active transport requires a carrier molecule and a form of energy.", "fol": "", "prediction": ["all x.(ActiveTransport(x) -> (RequiresCarrierMolecule(x) & RequiresFormOfEnergy(x)))"]}
{"id": "eqasc_train_12729", "nl": "Vesicle transport requires energy and a carrier molecule", "fol": "", "prediction": ["all x.(VesicleTransport(x) -> (RequiresEnergy(x) & CarrierMolecule(x)))"]}
{"id": "eqasc_train_12730", "nl": "vesicle transport requires food", "fol": "", "prediction": ["all x.(VesicleTransport(x) -> RequiresFood(x))"]}
{"id": "eqasc_train_12731", "nl": "vesicle transport requires energy, and is a form of diffusion", "fol": "", "prediction": ["all x.(VesicleTransport(x) -> (RequiresEnergy(x) & FormOfDiffusion(x)))"]}
{"id": "eqasc_train_12732", "nl": "Absorption comes from active transport.", "fol": "", "prediction": ["all x.(Absorption(x) -> ActiveTransport(x))"]}
{"id": "eqasc_train_12733", "nl": "Absorption is a form of vesicle transport that requires energy.", "fol": "", "prediction": ["all x.(Absorbtion(x) -> (VesicleTransport(x) & RequiresEnergy(x)))"]}
{"id": "eqasc_train_12734", "nl": "Neurotransmitters are released from vesicles.", "fol": "", "prediction": ["all x y.((Neurotransmitter(x) & Vesicle(y)) -> ReleasedFrom(x,y))"]}
{"id": "eqasc_train_12735", "nl": "Transport of neurotransmitters is active transport", "fol": "", "prediction": ["all x y.((Neurotransmitter(x) & Neurotransmitter(y)) -> ActiveTransport(x,y))"]}
{"id": "eqasc_train_12736", "nl": "Vesicle transport is a form of diffusion.", "fol": "", "prediction": ["all x.(VesicleTransport(x) -> Diffusion(x))"]}
{"id": "eqasc_train_12737", "nl": "Proteins leave the ER in transport vesicles 5.", "fol": "", "prediction": ["all x y.((Protein(x) & TransportVesicles(y)) -> LeavesER(x,y))"]}
{"id": "eqasc_train_12738", "nl": "Proteins leave the ER via active transport.", "fol": "", "prediction": ["all x.(Protein(x) -> LeavesER(x))"]}
{"id": "eqasc_train_12739", "nl": "Proteins are transported to and from the ER via vesicles to the Golgi.", "fol": "", "prediction": ["all x y z.((Protein(x) & ER(y) & Vesicles(z)) -> TransportedToAndFrom(x,y,z))"]}
{"id": "eqasc_train_12740", "nl": "Protein transportation between the ER and the Golgi require energy.", "fol": "", "prediction": ["all x y.((ProteinTransportation(x) & ER(y) & Golgi(y)) -> RequiresEnergy(x,y))"]}
{"id": "eqasc_train_12741", "nl": "Active transport is yet another form of diffusion.", "fol": "", "prediction": ["all x.(ActiveTransport(x) -> Diffusion(x))"]}
{"id": "eqasc_train_12742", "nl": "vesicle transport is a form of diffusion", "fol": "", "prediction": ["all x.(VesicleTransport(x) -> Diffusion(x))"]}
{"id": "eqasc_train_12743", "nl": "Transport of material in and out of the Golgi complex involves budding and fusion of vesicles.", "fol": "", "prediction": ["all x y.((GolgiComplex(x) & Material(y)) -> (Budding(x,y) & FusionOfVesicles(x,y)))"]}
{"id": "eqasc_train_12744", "nl": "budding and fusion of vesicles in the Golgi complex involves energy, so it is active", "fol": "", "prediction": ["all x y.((Badding(x) & Fusion(x) & Vesicles(y) & GolgiComplex(x)) -> InvolvesEnergy(x))"]}
{"id": "eqasc_train_12745", "nl": "Most plants continue to grow throughout their lives.", "fol": "", "prediction": ["all x.(Plant(x) -> ContinuesToGrow(x))"]}
{"id": "eqasc_train_12746", "nl": "All seed plants have roots, a stem, and leaves.", "fol": "", "prediction": ["all x.(SeedPlant(x) -> (HasRoots(x) & HasStem(x) & HasLeaves(x)))"]}
{"id": "eqasc_train_12747", "nl": "Roots, stems and leaves continue to grow throughout their lives.", "fol": "", "prediction": ["all x.((Root(x) | Stem(x) | Leave(x)) -> ContinuesToGrow(x))"]}
{"id": "eqasc_train_12748", "nl": "Everything that lives eventually dies.", "fol": "", "prediction": ["all x.((Lives(x) & EndsWith(x)) -> Dies(x))"]}
{"id": "eqasc_train_12749", "nl": "Most plants continue to grow until they die.", "fol": "", "prediction": ["all x.(Plant(x) -> ContinuesToGrowUntilDiet(x))"]}
{"id": "eqasc_train_12750", "nl": "bamboo continues to grow throughout their lives", "fol": "", "prediction": ["all x.(Bamboo(x) -> ContinuesToGrowThroughoutLife(x))"]}
{"id": "eqasc_train_12751", "nl": "most bushes continue to grow throughout their lives", "fol": "", "prediction": ["all x.(Bush(x) -> ContinuesToGrowThroughoutLife(x))"]}
{"id": "eqasc_train_12752", "nl": "Lilies continually produce new bulbs, from which grow new plants.", "fol": "", "prediction": ["all x y.((Lilies(x) & Bulb(y)) -> (Produces(x,y) & GrowsNewPlants(x)))"]}
{"id": "eqasc_train_12753", "nl": "Lilies continue to grow throughout their lives.", "fol": "", "prediction": ["all x.(Lily(x) -> GrowsThroughoutLife(x))"]}
{"id": "eqasc_train_12754", "nl": "Bamboo continue to grow throughout their lives.", "fol": "", "prediction": ["all x.(Bamboo(x) -> GrowsThroughoutLife(x))"]}
{"id": "eqasc_train_12755", "nl": "Orange trees continue to grow throughout their lives.", "fol": "", "prediction": ["all x.(OrangeTree(x) -> ContinuesToGrow(x))"]}
{"id": "eqasc_train_12756", "nl": "Plants require nutrients for growth.", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresNutrientsForGrowth(x))"]}
{"id": "eqasc_train_12757", "nl": "nutrients are required for growth throughout their lives", "fol": "", "prediction": ["all x.(Nutrients(x) -> RequiresForGrowth(x))"]}
{"id": "eqasc_train_12758", "nl": "Plants use the light energy to grow.", "fol": "", "prediction": ["all x.(Plant(x) -> UsesLightEnergyToGrow(x))"]}
{"id": "eqasc_train_12759", "nl": "most plants continue to use light energy throughout their lives", "fol": "", "prediction": ["all x.(Plant(x) -> UsesLightEnergy(x))"]}
{"id": "eqasc_train_12760", "nl": "Roses are among the hardiest of all plants.", "fol": "", "prediction": ["all x.(Rose(x) -> HardiestOfAllPlants(x))"]}
{"id": "eqasc_train_12761", "nl": "roses continue to grow throughout their lives", "fol": "", "prediction": ["all x.(Rose(x) -> ContinuesToGrowThroughoutLife(x))"]}
{"id": "eqasc_train_12762", "nl": "Fertilizers help plants grow.", "fol": "", "prediction": ["all x.(Fertilizer(x) -> HelpsPlantsGrow(x))"]}
{"id": "eqasc_train_12763", "nl": "Most plants cultivate their entire lives and Fertilizer helps them. ", "fol": "", "prediction": ["all x.((Plant(x) & Cultivates(x)) -> FertilizerHelps(x))"]}
{"id": "eqasc_train_12764", "nl": "erosion of soil has a negative impact on the environment", "fol": "", "prediction": ["all x y.((ErosionOfSoil(x) & Environment(y)) -> NegativeImpactOn(x,y))"]}
{"id": "eqasc_train_12765", "nl": "Desertification has a negative impact on the environment", "fol": "", "prediction": ["all x.(Desertification(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12766", "nl": "Forest environments collapse.", "fol": "", "prediction": ["all x.(ForestEnvironment(x) -> Collapses(x))"]}
{"id": "eqasc_train_12767", "nl": "erosion of soil has a negative impact on forests", "fol": "", "prediction": ["all x y.((ErosionOfSoil(x) & Forest(y)) -> NegativeImpactOn(x,y))"]}
{"id": "eqasc_train_12768", "nl": "Across the earth, land degradation is on the rise through erosion, salination, pollution, etc.", "fol": "", "prediction": ["all x.((Earth(x) & LandDegradation(x)) -> (RiseThroughErosion(x) | RiseThroughSalination(x) | RiseThroughPollution(x)))"]}
{"id": "eqasc_train_12769", "nl": "Throuout earth, land degradation is on the rise having a negative impact on the enviornment.", "fol": "", "prediction": ["all x.(ThrououtEarth(x) -> LandDegradationOnRise(x))"]}
{"id": "eqasc_train_12770", "nl": "Erosion of dirt has a negative impact on the enviroment.", "fol": "", "prediction": ["all x.(ErosionOfDirt(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12771", "nl": "Landscape is scarred by a negative impact on the environment.", "fol": "", "prediction": ["all x.((Landscape(x) & NegativeImpactOnEnvironment(x)) -> Scarred(x))"]}
{"id": "eqasc_train_12772", "nl": "Forests provide a clean and comfortable environment.", "fol": "", "prediction": ["all x.(Forest(x) -> (ProvidesCleanEnvironment(x) & ProvidesComfortableEnvironment(x)))"]}
{"id": "eqasc_train_12773", "nl": "Erosion of soil has a negative impact on a forest", "fol": "", "prediction": ["all x y.((ErosionOfSoil(x) & Forest(y)) -> NegativeImpactOn(x,y))"]}
{"id": "eqasc_train_12774", "nl": "weathering of soil has a negative impact on the environment", "fol": "", "prediction": ["all x y.((WeatheringOfSoil(x) & Environment(y)) -> NegativeImpactOn(x,y))"]}
{"id": "eqasc_train_12775", "nl": "Plants keep the soil on the land.", "fol": "", "prediction": ["all x y.((Plant(x) & Land(y)) -> KeepsSoilOn(x,y))"]}
{"id": "eqasc_train_12776", "nl": "erosion of land has a negative impact on the environment", "fol": "", "prediction": ["all x y.((ErosionOfLand(x) & Environment(y)) -> NegativeImpactOn(x,y))"]}
{"id": "eqasc_train_12777", "nl": "Environment Soil erosion causes more damage than floods.", "fol": "", "prediction": ["all x y.((Environment(x) & Flood(y)) -> CausesMoreDamage(x,y))"]}
{"id": "eqasc_train_12778", "nl": "ground erosion causes damage to the environment", "fol": "", "prediction": ["all x y.((GroundErosion(x) & Environment(y)) -> CausesDamage(x,y))"]}
{"id": "eqasc_train_12779", "nl": "Cattle can cause soil erosion.", "fol": "", "prediction": ["all x.(Cattle(x) -> CausesSoilErosion(x))"]}
{"id": "eqasc_train_12780", "nl": "cattle can have a negative impact on the environment", "fol": "", "prediction": ["all x.(Cattle(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12781", "nl": "Natural processes can have a negative impact on the environment.", "fol": "", "prediction": ["all x.(NaturalProcesses(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12782", "nl": "Soil erosion Deforestation and excessive crop irrigation enhance soil erosion.", "fol": "", "prediction": ["all x.(SoilErosion(x) -> (Deforestation(x) & ExcessiveCropIrrigation(x)))"]}
{"id": "eqasc_train_12783", "nl": "Deforestation and excessive crop irrigation enhance negative impacts on the environment", "fol": "", "prediction": ["all x y.((Deforestation(x) & ExcessiveCropIrrigation(y)) -> EnhancesNegativeImpactsOnEnvironment(x,y))"]}
{"id": "eqasc_train_12784", "nl": "transpiration is when water vapor moves from plants into the atmosphere", "fol": "", "prediction": ["all x y.((WaterVapor(x) & Plant(y)) -> MovesIntoAtmosphere(x,y))"]}
{"id": "eqasc_train_12785", "nl": "Transpiration is the process of water loss from plants through stomata .", "fol": "", "prediction": ["all x y.((Transpiration(x) & Plant(y)) -> WaterLoss(x,y))"]}
{"id": "eqasc_train_12786", "nl": "water vapor moves from plants into the atmosphere through stomata", "fol": "", "prediction": ["all x y z.((WaterVapor(x) & Plant(y) & Atmosphere(z)) -> MovesFromTo(x,y,z))"]}
{"id": "eqasc_train_12787", "nl": "Transpiration occurs as long as stomates are open.", "fol": "", "prediction": ["all x.((Stomate(x) & Open(x)) -> Transpiration(x))"]}
{"id": "eqasc_train_12788", "nl": "stomates must be open for water vapor to move from plants into the atmosphere", "fol": "", "prediction": ["all x.(Stomate(x) -> MustBeOpenForWaterVaporToMoveFromPlantsIntoAtmosphere(x))"]}
{"id": "eqasc_train_12789", "nl": "When vapor moves from bushes into the atmosphere, transpiration occurs.", "fol": "", "prediction": ["all x y.((Vapor(x) & FlowsFromBush(x,y) & IntoAtmosphere(x,y)) -> PerspirationOccurs(x))"]}
{"id": "eqasc_train_12790", "nl": "Transpiration is when water vapor moves from plants into the blanket of air around the earth.", "fol": "", "prediction": ["all x y z.((Transpiration(x) & WaterVapor(y) & Plant(z)) -> MovesIntoBlanketOfAir(x,y,z))"]}
{"id": "eqasc_train_12791", "nl": "When plants give off water vapor during photosynthesis 2.", "fol": "", "prediction": ["all x y.((Plant(x) & GivesOffWaterVapor(x,y) & Photosynthesis(y)) -> Photosynthesis(x,y))"]}
{"id": "eqasc_train_12792", "nl": "Transpiration is part of the photosynthesis process.", "fol": "", "prediction": ["all x.(Transpiration(x) -> PhotosynthesisProcess(x))"]}
{"id": "eqasc_train_12793", "nl": "transpiration is when H2O vapor moves from plants into the atmosphere", "fol": "", "prediction": ["all x y.((H2OVapor(x) & Plant(y)) -> MovesIntoAtmosphere(x,y))"]}
{"id": "eqasc_train_12794", "nl": "Water vapor in the atmosphere condenses, then falls to the earth's surface as rain and snow.", "fol": "", "prediction": ["all x y.((WaterVapor(x) & Atmosphere(y)) -> (Condenses(x,y) & FallsToEarthSurface(x,y)))"]}
{"id": "eqasc_train_12795", "nl": "Transpiration is when water vapor moves from plants and falls to the earth's surface as rain and snow.", "fol": "", "prediction": ["all x y z.((Transpiration(x) & WaterVapor(y) & Plant(z)) -> (MovesFrom(x,y,z) & FallsToEarthSurface(x)))"]}
{"id": "eqasc_train_12796", "nl": "transpiration is when steam moves from plants into the atmosphere", "fol": "", "prediction": ["all x y.((Steam(x) & Plant(y)) -> MovesIntoAtmosphere(x,y))"]}
{"id": "eqasc_train_12797", "nl": "Plants lose water continually by transpiration.", "fol": "", "prediction": ["all x.(Plant(x) -> LosesWaterContinuouslyByThrivation(x))"]}
{"id": "eqasc_train_12798", "nl": "plants lose water to the atmosphere", "fol": "", "prediction": ["all x y.((Plant(x) & Atmosphere(y)) -> LosesWaterTo(x,y))"]}
{"id": "eqasc_train_12799", "nl": "Earth's Atmosphere Earth's atmosphere is the layer of gasses that surrounds the earth.", "fol": "", "prediction": ["all x.(EarthsAtmosphere(x) -> (LayerOfGases(x) & SurroundsEarth(x)))"]}
{"id": "eqasc_train_12800", "nl": "transpiration is when water vapor moves from plants into the layer of gasses that surrounds the earth", "fol": "", "prediction": ["all x y z.((WaterVapor(x) & Plant(y) & Gases(z)) -> (MovesFromToLayer(x,y,z) & SurroundsEarth(x)))"]}
{"id": "eqasc_train_12801", "nl": "water vapor moves from oaks to the atmosphere in transpiration", "fol": "", "prediction": ["all x y z.((WaterVapor(x) & Oak(y) & Atmosphere(z)) -> MovesInTranspiration(x,y,z))"]}
{"id": "eqasc_train_12802", "nl": "Anti-transpirants are chemicals designed to reduce transpiration.", "fol": "", "prediction": ["all x.(AntiTranspirant(x) -> ReducesThroat(x))"]}
{"id": "eqasc_train_12803", "nl": "Chemicals can keep water vapor from moving into the atmosphere.", "fol": "", "prediction": ["all x.(Chemical(x) -> KeepsWaterVaporFromMovingIntoAtmosphere(x))"]}
{"id": "eqasc_train_12804", "nl": "gills are used for breathing water by aquatic animals", "fol": "", "prediction": ["all x y.((Gills(x) & AquaticAnimal(y)) -> UsedForBreathingWater(x,y))"]}
{"id": "eqasc_train_12805", "nl": "All fish breathe water.", "fol": "", "prediction": ["all x.(Fish(x) -> BreathesWater(x))"]}
{"id": "eqasc_train_12806", "nl": "Much like a fish, the Mussel has little gills.", "fol": "", "prediction": ["all x.(Mouse(x) -> HasLittleGills(x))"]}
{"id": "eqasc_train_12807", "nl": "A fish can breath in the water.", "fol": "", "prediction": ["all x.(Fish(x) -> BreathesInWater(x))"]}
{"id": "eqasc_train_12808", "nl": "All aquatic animals require dissolved oxygen to breathe.", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> RequiresDissolvedOxygen(x))"]}
{"id": "eqasc_train_12809", "nl": "aquatic animals need gills to survive", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> NeedsGillsToSurvive(x))"]}
{"id": "eqasc_train_12810", "nl": "Shark exhibit Come face to face with the ultimate aquatic predator.", "fol": "", "prediction": ["all x.(SharkExhibit(x) -> ComesFaceToFaceWithUltimateAquaticPredator(x))"]}
{"id": "eqasc_train_12811", "nl": "gills are used for breathing water by sharks", "fol": "", "prediction": ["all x y.((Gills(x) & Shark(y)) -> UsedForBreathingWater(x,y))"]}
{"id": "eqasc_train_12812", "nl": "Fish gills take oxygen from the water as it passes over the gills.", "fol": "", "prediction": ["all x y.((FishGills(x) & Water(y) & PassesOver(x,y)) -> TakesOxygenFrom(x,y))"]}
{"id": "eqasc_train_12813", "nl": "fish breathe with gills", "fol": "", "prediction": ["all x.(Fish(x) -> BreathesWithGills(x))"]}
{"id": "eqasc_train_12814", "nl": "fish use gills for breathing water", "fol": "", "prediction": ["all x.(Fish(x) -> UsesGillsForBreathingWater(x))"]}
{"id": "eqasc_train_12815", "nl": "Fish are animals that live in water and breathe using gills.", "fol": "", "prediction": ["all x.(Fish(x) -> (Animal(x) & LivesInWater(x) & BreathesUsingGills(x)))"]}
{"id": "eqasc_train_12816", "nl": "Fish use their gills to breathe water", "fol": "", "prediction": ["all x y.((Fish(x) & Gills(y)) -> UsesToBreatheWater(x,y))"]}
{"id": "eqasc_train_12817", "nl": "Animals breathe in oxygen and breathe out carbon dioxide.", "fol": "", "prediction": ["all x.(Animal(x) -> (BreathesInOxygen(x) & BreathesOutCarbonDioxide(x)))"]}
{"id": "eqasc_train_12818", "nl": "Gills provide aquatic animals with oxygen.", "fol": "", "prediction": ["all x.(Gill(x) -> ProvidesOxygen(x))"]}
{"id": "eqasc_train_12819", "nl": "Crustaceans are predominantly aquatic, breathing by means of gills.", "fol": "", "prediction": ["all x.(Crustacean(x) -> (Aquatic(x) & BreathesByGills(x)))"]}
{"id": "eqasc_train_12820", "nl": "Gills are used for breathing water by crustaceans.", "fol": "", "prediction": ["all x.(Gill(x) -> BreathesWater(x))"]}
{"id": "eqasc_train_12821", "nl": "erosion causes deposition", "fol": "", "prediction": ["all x.(Erosion(x) -> CausesDeposition(x))"]}
{"id": "eqasc_train_12822", "nl": "Silts and muds are transported to the open ocean and deposited off the coast.", "fol": "", "prediction": ["all x y.((Silt(x) & Mud(y)) -> (TransportedToOpenOcean(x) & DepositedOffCoast(x)))"]}
{"id": "eqasc_train_12823", "nl": "Erosion causes silts and mud to be transported.", "fol": "", "prediction": ["all x.(Erosion(x) -> (CausesTransportation(x,silts) & CausesTransportation(x,mud)))"]}
{"id": "eqasc_train_12824", "nl": "Deposition landforms also occur forming stalactites and stalagmites .", "fol": "", "prediction": ["all x.(DepositionLandform(x) -> (FormsStalactites(x) | FormsStalagmites(x)))"]}
{"id": "eqasc_train_12825", "nl": "Erosion contributes to forming stalactites and stalagmites.", "fol": "", "prediction": ["all x.(Erosion(x) -> (FormsStalactites(x) & FormsStalactmites(x)))"]}
{"id": "eqasc_train_12826", "nl": "Silica sand is primarily mined from sandstone deposits.", "fol": "", "prediction": ["all x.(SilicaSand(x) -> MinedFromSandstoneDeposits(x))"]}
{"id": "eqasc_train_12827", "nl": "erosion forms silica sand", "fol": "", "prediction": ["all x.(Erosion(x) -> FormsSilicaSand(x))"]}
{"id": "eqasc_train_12828", "nl": "the movement of soil by water causes deposition", "fol": "", "prediction": ["all x y.((SoilMovement(x) & Water(y)) -> CausesDeposition(x,y))"]}
{"id": "eqasc_train_12829", "nl": "Erosion is caused by water, wind and traffic.", "fol": "", "prediction": ["all x.(Erosion(x) -> (CausedByWater(x) & CausedByWind(x) & CausedByTraffic(x)))"]}
{"id": "eqasc_train_12830", "nl": "Water can cause deposition.", "fol": "", "prediction": ["all x.(Water(x) -> CausesDeposition(x))"]}
{"id": "eqasc_train_12831", "nl": "Desertification implies soil deposition", "fol": "", "prediction": ["all x.(Desertification(x) -> SoilDeposition(x))"]}
{"id": "eqasc_train_12832", "nl": "Destructive forms include erosion and weathering.", "fol": "", "prediction": ["all x.(DestructiveForm(x) -> (Erosion(x) | Weathering(x)))"]}
{"id": "eqasc_train_12833", "nl": "Weathering causes deposition in the Earth.", "fol": "", "prediction": ["all x.(Weathering(x) -> CausesDepositionInEarth(x))"]}
{"id": "eqasc_train_12834", "nl": "Wind erosion is dominant.", "fol": "", "prediction": ["all x.(WindErosion(x) -> Dominant(x))"]}
{"id": "eqasc_train_12835", "nl": "wind causes deposition", "fol": "", "prediction": ["all x.(Wind(x) -> CausesDeposition(x))"]}
{"id": "eqasc_train_12836", "nl": "landfills have a negative impact on the environment", "fol": "", "prediction": ["all x.(Landfill(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12837", "nl": "Most municipal trash is disposed of in such landfills.", "fol": "", "prediction": ["all x.(MostMotorizedTrash(x) -> DisposableInLandfill(x))"]}
{"id": "eqasc_train_12838", "nl": "most municipal trash has a negative impact on the environment", "fol": "", "prediction": ["all x.(MostMountainTrash(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12839", "nl": "Life affects environment, environment affects life.", "fol": "", "prediction": ["all x y.((Life(x) & Environment(y)) -> (Affects(x,y) & Affects(y,z)))"]}
{"id": "eqasc_train_12840", "nl": "Landfills have a negative impact on life", "fol": "", "prediction": ["all x.(Landfill(x) -> NegativeImpactOnLife(x))"]}
{"id": "eqasc_train_12841", "nl": "Landfills have a negative impact on the ecosystems.", "fol": "", "prediction": ["all x.(Landfill(x) -> NegativeImpactOnEcosystems(x))"]}
{"id": "eqasc_train_12842", "nl": "Landfills are the places that our garbage is taken to be buried.", "fol": "", "prediction": ["all x.(Landfill(x) -> (Place(x) & TakenToBeBurned(x)))"]}
{"id": "eqasc_train_12843", "nl": "Burying our garbage has a negative impact on the environment", "fol": "", "prediction": ["all x y.((BuryingGarbage(x) & Environment(y)) -> NegativeImpactOn(x,y))"]}
{"id": "eqasc_train_12844", "nl": "Less garbage goes into landfills.", "fol": "", "prediction": ["all x.(LessGarbageGoesIntoLandfills(x) -> -StopsGasDisplacement(x))"]}
{"id": "eqasc_train_12845", "nl": "Less garbage is better for the environment.", "fol": "", "prediction": ["all x.(LessGarbage(x) -> BetterForEnvironment(x))"]}
{"id": "eqasc_train_12846", "nl": "All waste was sent to the landfill.", "fol": "", "prediction": ["all x.(Waste(x) -> SentToLandfill(x))"]}
{"id": "eqasc_train_12847", "nl": "waste has a negative impact", "fol": "", "prediction": ["all x.(Waste(x) -> NegativeImpact(x))"]}
{"id": "eqasc_train_12848", "nl": "Trash ends up in landfills .", "fol": "", "prediction": ["all x y.((Trash(x) & Landfill(y)) -> EndsUpIn(x,y))"]}
{"id": "eqasc_train_12849", "nl": "Trash has a negative impact on the environment", "fol": "", "prediction": ["all x.(Trash(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12850", "nl": "Landfills are a designated place where garbage is buried underground.", "fol": "", "prediction": ["all x.(Landfill(x) -> (DesignedPlace(x) & GarbageBurnedUnderground(x)))"]}
{"id": "eqasc_train_12851", "nl": "underground garbage has a negative impact on the environment", "fol": "", "prediction": ["all x.(UndergroundGarbage(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12852", "nl": "Most garbage is buried in landfills.", "fol": "", "prediction": ["all x.(Garbage(x) -> BuriedInLandfills(x))"]}
{"id": "eqasc_train_12853", "nl": "Most buried garbage has a negative impact on the environment", "fol": "", "prediction": ["all x.(BurnedGarbage(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12854", "nl": "Landfill leachates and groundwater contamination.", "fol": "", "prediction": ["all x.((LandfillLeachate(x) & GroundwaterContamination(x)) -> (LandfillLeachate(x) & GroundwaterContamination(x)))"]}
{"id": "eqasc_train_12855", "nl": "groundwater contamination have a negative impact on the environment", "fol": "", "prediction": ["all x.(GroundwaterContamination(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12856", "nl": "Garbage goes into Landfills.", "fol": "", "prediction": ["all x.(Garbage(x) -> Landfill(x))"]}
{"id": "eqasc_train_12857", "nl": "garbage has a negative impact on the environment", "fol": "", "prediction": ["all x.(Garbage(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12858", "nl": "An example is a dump or landfill.", "fol": "", "prediction": ["all x.((Dump(x) | Landfill(x)) -> Example(x))"]}
{"id": "eqasc_train_12859", "nl": "dumps have a negative impact on the environment", "fol": "", "prediction": ["all x.(Dump(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12860", "nl": "Recycling cuts down on landfill.", "fol": "", "prediction": ["all x.(Recycling(x) -> CutsDownOnLandfill(x))"]}
{"id": "eqasc_train_12861", "nl": "Recycling reduces negative impacts on the environment", "fol": "", "prediction": ["all x y.((Recycling(x) & Environment(y)) -> ReducesNegativeImpacts(x,y))"]}
{"id": "eqasc_train_12862", "nl": "Solid waste is stored in landfills.", "fol": "", "prediction": ["all x.(SolidWaste(x) -> StoredInLandfills(x))"]}
{"id": "eqasc_train_12863", "nl": "Solid waste has a negative impact on the environment", "fol": "", "prediction": ["all x.(SolidWaste(x) -> NegativeImpactOnEnvironment(x))"]}
{"id": "eqasc_train_12864", "nl": "People, animals and plants are threatened with massive destruction of their environment.", "fol": "", "prediction": ["all x.((People(x) | Animals(x) | Plants(x)) -> ThreatenedWithMassiveDestructionOfEnvironment(x))"]}
{"id": "eqasc_train_12865", "nl": "Landfills have a negative impact on people, animals and plants.", "fol": "", "prediction": ["all x.(Landfill(x) -> (NegativeImpactOnPeople(x) & NegativeImpactOnAnimals(x) & NegativeImpactOnPlants(x)))"]}
{"id": "eqasc_train_12866", "nl": "an aquatic animal requires great amounts of water to survive", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWater(x))"]}
{"id": "eqasc_train_12867", "nl": "Fish can survive in water by using their gills to extract the dissolved oxygen.", "fol": "", "prediction": ["all x.(Fish(x) -> (SurvivesInWater(x) & UsesGillsToExtractDissolvedOxygen(x)))"]}
{"id": "eqasc_train_12868", "nl": "An aquatic animal requires great amounts of water to use their gills to extract the dissolved oxygen", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> (RequiresGreatAmountsOfWater(x) & UsesGillsToExtractDissolvedOxygen(x)))"]}
{"id": "eqasc_train_12869", "nl": "Almost all of our turtles are aquatic or semi-aquatic.", "fol": "", "prediction": ["all x.(Turtle(x) -> (Aquatic(x) | SemiAquatic(x)))"]}
{"id": "eqasc_train_12870", "nl": "Almost all turtles require great amounts of water to survive", "fol": "", "prediction": ["all x.(Turtle(x) -> RequiresGreatAmountsOfWater(x))"]}
{"id": "eqasc_train_12871", "nl": "Beavers require great amounts of water to survive.", "fol": "", "prediction": ["all x.(Beaver(x) -> RequiresGreatAmountsOfWater(x))"]}
{"id": "eqasc_train_12872", "nl": "fish require great amounts of water to survive", "fol": "", "prediction": ["all x.(Fish(x) -> RequiresGreatAmountsOfWater(x))"]}
{"id": "eqasc_train_12873", "nl": "Aquatic animals are adapted to living within certain salinity ranges.", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> AdaptedToSalinityRanges(x))"]}
{"id": "eqasc_train_12874", "nl": "Animals adapted to living within certain salinity ranges require great amounts of water to survive.", "fol": "", "prediction": ["all x.((Animal(x) & AdaptedToSalinityRanges(x)) -> RequiresGreatAmountsOfWater(x))"]}
{"id": "eqasc_train_12875", "nl": "beavers require great amounts of water to survive", "fol": "", "prediction": ["all x.(Beaver(x) -> RequiresGreatAmountsOfWater(x))"]}
{"id": "eqasc_train_12876", "nl": "aquatic animals require precipitation to survive", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> RequiresPrecipitationToSurvive(x))"]}
{"id": "eqasc_train_12877", "nl": "Rain is always water.", "fol": "", "prediction": ["all x.(Rain(x) -> Water(x))"]}
{"id": "eqasc_train_12878", "nl": "An aquatic animal requires great amounts of what rain is to survive", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfRainToSurvive(x))"]}
{"id": "eqasc_train_12879", "nl": "Survival is about making a living.", "fol": "", "prediction": ["all x.(Survival(x) -> MakesLiving(x))"]}
{"id": "eqasc_train_12880", "nl": "An aquatic animal requires great amounts of water to live.", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWater(x))"]}
{"id": "eqasc_train_12881", "nl": "Deserts are formed because of lack of water.", "fol": "", "prediction": ["all x.(Desert(x) -> (FormedByLackOfWater(x)))"]}
{"id": "eqasc_train_12882", "nl": "An aquatic animal can't survive in a desert.", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> -SurvivesInDesert(x))"]}
{"id": "eqasc_train_12883", "nl": "Clean water is also essential to aquatic life.", "fol": "", "prediction": ["all x.(CleanWater(x) -> EssentialToAquaticLife(x))"]}
{"id": "eqasc_train_12884", "nl": "A water animal requires great amounts of water to survive.", "fol": "", "prediction": ["all x.(WaterAnimal(x) -> RequiresGreatAmountsOfWater(x))"]}
{"id": "eqasc_train_12885", "nl": "Fish and other small aquatic animals can be placed in the aquarium for visual purposes.", "fol": "", "prediction": ["all x y.((Fish(x) & SmallAquaticAnimal(y)) -> CanBePlacedInAquarium(x,y))"]}
{"id": "eqasc_train_12886", "nl": "Dolphins are an aquatic mammal closely related to whales and porpoises.", "fol": "", "prediction": ["all x.(Dolphin(x) -> (AquaticMammal(x) & CloselyRelatedToWhale(x) & CloselyRelatedToPorpoises(x)))"]}
{"id": "eqasc_train_12887", "nl": "Dolphins require great amounts of water to survive", "fol": "", "prediction": ["all x.(Dolphin(x) -> RequiresGreatAmountsOfWater(x))"]}
{"id": "eqasc_train_12888", "nl": "Beavers require great amounts of water to survive", "fol": "", "prediction": ["all x.(Beaver(x) -> RequiresGreatAmountsOfWaterToSurvive(x))"]}
{"id": "eqasc_train_12889", "nl": "Too much algae can deplete the water of oxygen, making it impossible for aquatic animals to survive.", "fol": "", "prediction": ["all x.((Algae(x) & DepletesWaterOfOxygen(x)) -> ImpossibleForAquaticAnimalsToSurvive(x))"]}
{"id": "eqasc_train_12890", "nl": "an aquatic animal requires not having too much algae in water", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> -TooMuchAlgaeInWater(x))"]}
{"id": "eqasc_train_12891", "nl": "Translation reads the genetic code in mRNA and makes a protein.", "fol": "", "prediction": ["all x y.((Translation(x) & GeneticCode(y)) -> (Reads(x,y) & MakesProtein(x)))"]}
{"id": "eqasc_train_12892", "nl": "Proteins are translated using the standard genetic code.", "fol": "", "prediction": ["all x.(Protein(x) -> TranslatedUsingStandardGeneticCode(x))"]}
{"id": "eqasc_train_12893", "nl": "using the standard genetic code, mRNA makes protein", "fol": "", "prediction": ["all x.((MRNA(x) & StandardGeneticCode(x)) -> MakesProtein(x))"]}
{"id": "eqasc_train_12894", "nl": "Every protein is a translated gene.", "fol": "", "prediction": ["all x.(Protein(x) -> TranslatedGene(x))"]}
{"id": "eqasc_train_12895", "nl": "the genetic code in mRNA is a gene that can be translated", "fol": "", "prediction": ["all x y.((GeneticCode(x) & mRNA(y)) -> (Gene(x,y) & Translatible(x,y)))"]}
{"id": "eqasc_train_12896", "nl": "proteins contain genes", "fol": "", "prediction": ["all x.(Protein(x) -> ContainsGenes(x))"]}
{"id": "eqasc_train_12897", "nl": "Gene expression can be regulated at the level of translation of an mRNA into a protein.", "fol": "", "prediction": ["all x y.((GeneExpression(x) & MRNA(y) & Protein(z)) -> TranslatedInto(x,y,z))"]}
{"id": "eqasc_train_12898", "nl": "Translation reads and regulates gene expression.", "fol": "", "prediction": ["all x.(Translation(x) -> (ReadsGeneExpression(x) & RegulatesGeneExpression(x)))"]}
{"id": "eqasc_train_12899", "nl": "Translation of mRNA into protein involves the interaction of the mRNA with ribosomes.", "fol": "", "prediction": ["all x y.((MRNA(x) & Protein(y)) -> Interaction(x,y))"]}
{"id": "eqasc_train_12900", "nl": "Translation of mRNA involves interaction with ribosomes.", "fol": "", "prediction": ["all x.((MRNA(x) & Ribosome(x)) -> TranslationInvolvesInteraction(x))"]}
{"id": "eqasc_train_12901", "nl": "Proteins give rise to emergent properties.", "fol": "", "prediction": ["all x.(Protein(x) -> GivesRiseToEmergentProperties(x))"]}
{"id": "eqasc_train_12902", "nl": "Translation reads the genetic code in mRNA and give rise to emergent properties", "fol": "", "prediction": ["all x y z.((Translation(x) & GeneticCode(y) & mRNA(z)) -> (Reads(x,y) & GenericCode(x,z) & GenericProperties(x,y) & EmergentProperties(x)))"]}
{"id": "eqasc_train_12903", "nl": "Proteins and nitrate are nitrogenous compounds.", "fol": "", "prediction": ["all x.((Protein(x) | Nitrate(x)) -> NitrogenousCompound(x))"]}
{"id": "eqasc_train_12904", "nl": "Translation reads the genetic code in mRNA and makes a nitrogenous compound", "fol": "", "prediction": ["all x y z.((Translation(x) & GeneticCode(y) & mRNA(z)) -> (Reads(x,y) & MakesNitrogenousCompound(x)))"]}
{"id": "eqasc_train_12905", "nl": "Protein is a chain of amino acids .", "fol": "", "prediction": ["all x.(Protein(x) -> ChainOfAminoAcids(x))"]}
{"id": "eqasc_train_12906", "nl": "Translation reads the genetic code in mRNA and makes a chain of amino acids", "fol": "", "prediction": ["all x y z.((Translation(x) & GeneticCode(y) & AminoAcids(z)) -> (ReadsInMRNA(x,y) & MakesChainOfAminoAcids(x,z)))"]}
{"id": "eqasc_train_12907", "nl": "Nucleotide sequences are translated according to the universal genetic code.", "fol": "", "prediction": ["all x.(NucleotideSequence(x) -> TranslatedAccordingToUniversalGeneticCode(x))"]}
{"id": "eqasc_train_12908", "nl": "Nucleotide sequences are read in mRNA and a protein is made", "fol": "", "prediction": ["all x y z.((NucleotideSequence(x) & mRNA(y) & Protein(z)) -> (ReadIn(x,y) & MadeIn(z,y)))"]}
{"id": "eqasc_train_12909", "nl": "disease-causing microbes have a negative impact on the body", "fol": "", "prediction": ["all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x))"]}
{"id": "eqasc_train_12910", "nl": "Pathogens are microbes that cause disease.", "fol": "", "prediction": ["all x.(Pathogen(x) -> (Microbe(x) & CausesDisease(x)))"]}
{"id": "eqasc_train_12911", "nl": "Pathogens have a negative impact on the body.", "fol": "", "prediction": ["all x.(Pathogen(x) -> NegativeImpactOnBody(x))"]}
{"id": "eqasc_train_12912", "nl": "Pathogens are disease-causing in our bodies", "fol": "", "prediction": ["all x.(Pathogen(x) -> DiseaseCausing(x))"]}
{"id": "eqasc_train_12913", "nl": "pathogens have a negative impact on the body", "fol": "", "prediction": ["all x.(Pathogen(x) -> NegativeImpactOnBody(x))"]}
{"id": "eqasc_train_12914", "nl": "Microbes are also called microorganisms.", "fol": "", "prediction": ["all x.(Microbe(x) -> Microorganism(x))"]}
{"id": "eqasc_train_12915", "nl": "disease-causing microorganisms have a negative impact on the body", "fol": "", "prediction": ["all x.((Microorganism(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x))"]}
{"id": "eqasc_train_12916", "nl": "Dangerous microbes are called pathogenic or disease causing.", "fol": "", "prediction": ["all x.(DangerousMicrobe(x) -> (Pathogenic(x) | DiseaseCausing(x)))"]}
{"id": "eqasc_train_12917", "nl": "Pathogens have a negative impact on the body, causing disease.", "fol": "", "prediction": ["all x.(Pathogen(x) -> (NegativeImpactOnBody(x) & CausesDisease(x)))"]}
{"id": "eqasc_train_12918", "nl": "Harmful microbes that cause diseases are called pathogens.", "fol": "", "prediction": ["all x.((HarmfulMicrobe(x) & CausesDiseases(x)) -> Pathogen(x))"]}
{"id": "eqasc_train_12919", "nl": "Microbes are also called bacteria or microorganisms.", "fol": "", "prediction": ["all x.(Microbe(x) -> (Bacteria(x) | Microorganism(x)))"]}
{"id": "eqasc_train_12920", "nl": "Disease-causing bacteria have a negative impact on the body", "fol": "", "prediction": ["all x.((DiseaseCausingBacteria(x) & NegativeImpactOnBody(x)) -> NegativeImpactOnBody(x))"]}
{"id": "eqasc_train_12921", "nl": "Each human body is unique.", "fol": "", "prediction": ["all x.(HumanBody(x) -> Unique(x))"]}
{"id": "eqasc_train_12922", "nl": "disease-causing microbes have a negative impact on humans.", "fol": "", "prediction": ["all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnHumans(x))"]}
{"id": "eqasc_train_12923", "nl": "Microbes are tiny living cells.", "fol": "", "prediction": ["all x.(Microbe(x) -> TinyLivingCell(x))"]}
{"id": "eqasc_train_12924", "nl": "Disease-causing tiny living cells have a negative impact on the body.", "fol": "", "prediction": ["all x.((DiseaseCausingTinyLivingCells(x) & NegativeImpactOnBody(x)) -> NegativeImpactOnBody(x))"]}
{"id": "eqasc_train_12925", "nl": "Microbes are microscopic, single-celled organisms without a nucleus.", "fol": "", "prediction": ["all x.(Microbe(x) -> (MicroscopicOrganism(x) & SingleCelled(x) & -Nucleus(x)))"]}
{"id": "eqasc_train_12926", "nl": "disease-causing organisms have a negative impact on the body", "fol": "", "prediction": ["all x.((DiseaseCausingOrganism(x) & NegativeImpactOnBody(x)) -> NegativeImpactOnBody(x))"]}
{"id": "eqasc_train_12927", "nl": "Microbes are a major cause of disease in humans.", "fol": "", "prediction": ["all x.(Microbe(x) -> MajorCauseOfDisease(x))"]}
{"id": "eqasc_train_12928", "nl": "microbes form diseases", "fol": "", "prediction": ["all x.(Microbe(x) -> FormsDiseases(x))"]}
{"id": "eqasc_train_12929", "nl": "Water was tested for the presence of disease-causing microbes.", "fol": "", "prediction": ["all x.(Water(x) -> TestedForDiseaseCausingMicrobes(x))"]}
{"id": "eqasc_train_12930", "nl": "Water that is not tested can have a negative impact on the body.", "fol": "", "prediction": ["all x.((Water(x) & -Tested(x)) -> NegativeImpactOnBody(x))"]}
{"id": "eqasc_train_12931", "nl": "Meiosis is the type of cell division that produces gametes.", "fol": "", "prediction": ["all x.(Meiosis(x) -> (CellDividend(x) & ProducesGametes(x)))"]}
{"id": "eqasc_train_12932", "nl": "Meiosis is the type of cell division that produces sex cells", "fol": "", "prediction": ["all x.(Meiosis(x) -> (CellDividection(x) & ProducesSexCells(x)))"]}
{"id": "eqasc_train_12933", "nl": "Female gametes are eggs or ova.", "fol": "", "prediction": ["all x.(FemaleGamete(x) -> (Egg(x) | Ovar(x)))"]}
{"id": "eqasc_train_12934", "nl": "Meiosis produces eggs or ova?", "fol": "", "prediction": ["all x.(Meiosis(x) -> (ProducesEggs(x) | ProducesOvum(x)))"]}
{"id": "eqasc_train_12935", "nl": "meiosis is the type of cell division that produces ova and spermatozoa", "fol": "", "prediction": ["all x.(Meiosis(x) -> (CellDividend(x) & ProducesOvary(x) & ProducesSpermatozoa(x)))"]}
{"id": "eqasc_train_12936", "nl": "Meiosis Prior to meiosis as in mitosis, chromosome duplication occurs.", "fol": "", "prediction": ["all x.((Meiosis(x) & Mitosis(x)) -> ChromosomeDuplication(x))"]}
{"id": "eqasc_train_12937", "nl": "chromosome duplication occurs when cell division produces gametes", "fol": "", "prediction": ["all x y.((CellDividend(x) & Gametes(y)) -> ChromosomeDuplication(x))"]}
{"id": "eqasc_train_12938", "nl": "meiosis produces ova and spermatozoa", "fol": "", "prediction": ["all x.(Meiosis(x) -> (ProducesOvary(x) & ProducesSpermatozoa(x)))"]}
{"id": "eqasc_train_12939", "nl": "Meiosis is the type of cell division that can produce sperm", "fol": "", "prediction": ["all x.(Meiosis(x) -> (CellDividection(x) & ProducesSsperm(x)))"]}
{"id": "eqasc_train_12940", "nl": "Meiosis is the type of cell division that produces sex cells.", "fol": "", "prediction": ["all x.(Meiosis(x) -> (CellDividection(x) & ProducesSexCells(x)))"]}
{"id": "eqasc_train_12941", "nl": "Meiosis is the type of cell division that produces ova and spermatozoa.", "fol": "", "prediction": ["all x.(Meiosis(x) -> (CellDividection(x) & ProducesOvary(x) & ProducesSpermatozoa(x)))"]}
{"id": "eqasc_train_12942", "nl": "Meiosis is the type of cell division that produces haploid cells.", "fol": "", "prediction": ["all x.(Meiosis(x) -> (CellDividection(x) & ProducesHaplodyosis(x)))"]}
{"id": "eqasc_train_12943", "nl": "Meiosis, on the other hand, is a two stage process, ultimately producing four cells.", "fol": "", "prediction": ["all x.(Meiosis(x) -> (TwoStageProcess(x) & ProducesFourCells(x)))"]}
{"id": "eqasc_train_12944", "nl": "A two stage process is the type of cell division that produces gametes", "fol": "", "prediction": ["all x.(TwoStageProcess(x) -> (CellDividend(x) & ProducesGametes(x)))"]}
{"id": "eqasc_train_12945", "nl": "Meiosis is a type of cell division that produces ova and spermatozoa", "fol": "", "prediction": ["all x.(Meiosis(x) -> (CellDividection(x) & ProducesOvary(x) & ProducesSpermatozoa(x)))"]}
{"id": "eqasc_train_12946", "nl": "Insulin helps cells take up glucose from the blood.", "fol": "", "prediction": ["all x y.((Insulin(x) & Cell(y)) -> HelpsTakeUpGlucose(x,y))"]}
{"id": "eqasc_train_12947", "nl": "Insulin made by a person's own pancreas is endogenous insulin.", "fol": "", "prediction": ["all x.((Insulin(x) & MadeByOwnPancreas(x)) -> EndogenousInsulin(x))"]}
{"id": "eqasc_train_12948", "nl": "endogenous compounds produced by a person's pancreas help cells take up glucose from the blood", "fol": "", "prediction": ["all x y.((EndogenousCompounds(x) & PersonsPancreas(y)) -> HelpsCellsTakeUpGlucoseFromBlood(x,y))"]}
{"id": "eqasc_train_12949", "nl": "Insulin produced by the pancreas is endogenous insulin.", "fol": "", "prediction": ["all x.((Insulin(x) & ProducedByPancreas(x)) -> EndogenousInsulin(x))"]}
{"id": "eqasc_train_12950", "nl": "the pancreas helps cells take up glucose from the blood", "fol": "", "prediction": ["all x y.((Pancreas(x) & Cell(y)) -> HelpsTakeUpGlucoseFromBlood(x,y))"]}
{"id": "eqasc_train_12951", "nl": "If there is a lot of glucose in the blood, the pancreas makes insulin.", "fol": "", "prediction": ["all x.((LotOfGlucoseInBlood(x) & PancreasMakesInsulin(x)) -> MakesInsulin(x))"]}
{"id": "eqasc_train_12952", "nl": "insulin takes up glucose", "fol": "", "prediction": ["all x.(Insulin(x) -> TakesUpGlucose(x))"]}
{"id": "eqasc_train_12953", "nl": "The pancreas makes something that helps cells take up glucose from the blood", "fol": "", "prediction": ["all x y.((Pancreas(x) & Cell(y)) -> Makes(x,y))"]}
{"id": "eqasc_train_12954", "nl": "The pancreas lower glucose levels in the blood?", "fol": "", "prediction": ["all x.(Pancreas(x) -> LowersGlucoseLevelsInBlood(x))"]}
{"id": "eqasc_train_12955", "nl": "Insulin helps cells take up sugar from the blood.", "fol": "", "prediction": ["all x.(Insulin(x) -> HelpsCellsTakeUpSugarFromBlood(x))"]}
{"id": "eqasc_train_12956", "nl": "Exercise does burn glucose from the blood and can lower the blood sugar.", "fol": "", "prediction": ["all x.(Exercise(x) -> (BurnsGlucoseFromBlood(x) & LowersBloodSugar(x)))"]}
{"id": "eqasc_train_12957", "nl": "Insulin helps cells to lower the blood sugar", "fol": "", "prediction": ["all x y.((Insulin(x) & Cell(y)) -> LowersBloodSugar(x,y))"]}
{"id": "eqasc_train_12958", "nl": "Insulin, a hormone produced by the pancreas, helps glucose in the bloodstream.", "fol": "", "prediction": ["all x y.((Insulin(x) & Pancreas(y)) -> HelpsGlucoseInBloodstream(x,y))"]}
{"id": "eqasc_train_12959", "nl": "The pancreas helps take up glucose from the blood", "fol": "", "prediction": ["all x y.((Pancreas(x) & Blood(y)) -> TakesUpGlucose(x,y))"]}
{"id": "eqasc_train_12960", "nl": "insulin helps cells take up sugar from the blood", "fol": "", "prediction": ["all x y.((Insulin(x) & Cell(y)) -> HelpsTakeUpSugarFromBlood(x,y))"]}
{"id": "eqasc_train_12961", "nl": "Blood Glucose Blood Glucose Glucose is the principal source of energy for mammalian cells.", "fol": "", "prediction": ["all x.((BloodGlucose(x) & MammalianCell(x)) -> PrincipalEnergySource(x))"]}
{"id": "eqasc_train_12962", "nl": "Insulin helps cells take up energy from the blood.", "fol": "", "prediction": ["all x.(Insulin(x) -> HelpsCellsTakeUpEnergyFromBlood(x))"]}
{"id": "eqasc_train_12963", "nl": "Normally the pancreas produces the right amount of insulin to move the glucose into the cells.", "fol": "", "prediction": ["all x y.((Pancreas(x) & Insulin(y)) -> ProducesRightAmountToMoveGlucoseIntoCells(x,y))"]}
{"id": "eqasc_train_12964", "nl": "The pancreas is responsible for producing insulin to take glucose from the blood", "fol": "", "prediction": ["all x y.((Pancreas(x) & Insulin(y)) -> ProducesToTakeGlucoseFromBlood(x,y))"]}
{"id": "eqasc_train_12965", "nl": "For example, insulin is a protein hormone.", "fol": "", "prediction": ["all x.(Individual(x) -> ProteinHormone(x))"]}
{"id": "eqasc_train_12966", "nl": "protein hormones help cells take up glucose from the blood", "fol": "", "prediction": ["all x y.((ProteinHormone(x) & Cell(y)) -> HelpsTakeUpGlucoseFromBlood(x,y))"]}
{"id": "eqasc_train_12967", "nl": "sugar is regulated from insulin", "fol": "", "prediction": ["all x y.((Sugar(x) & Insulin(y)) -> RegulatedFrom(x,y))"]}
{"id": "eqasc_train_12968", "nl": "Bird beaks are generally adapted for the food they eat.", "fol": "", "prediction": ["all x.(BirdBeak(x) -> AdaptedForFood(x))"]}
{"id": "eqasc_train_12969", "nl": "Hawks are strong, powerful birds.", "fol": "", "prediction": ["all x.(Hawk(x) -> (Strong(x) & Powerful(x)))"]}
{"id": "eqasc_train_12970", "nl": "hawk beaks are generally adapted for the food they eat", "fol": "", "prediction": ["all x.(HawkBeak(x) -> (AdaptedForFood(x) & Eats(x)))"]}
{"id": "eqasc_train_12971", "nl": "After all, many birds eat bugs that devour plants in the garden.", "fol": "", "prediction": ["all x y.((Bird(x) & Bug(y)) -> Eats(x,y))"]}
{"id": "eqasc_train_12972", "nl": "Bird beaks are generally adapted for devouring bugs in the garden", "fol": "", "prediction": ["all x y.((BirdBeak(x) & Bug(y)) -> (AdaptedForDevoring(x,y) & InGarden(x)))"]}
{"id": "eqasc_train_12973", "nl": "An adaptation is an inherited variation that helps an organism to survive.", "fol": "", "prediction": ["all x.(Adaptation(x) -> (ErasedVariation(x) & HelpsOrganismSurvive(x)))"]}
{"id": "eqasc_train_12974", "nl": "bird beaks are inherited", "fol": "", "prediction": ["all x.(BirdBeak(x) -> (Earned(x) & HasBerryBeak(x)))"]}
{"id": "eqasc_train_12975", "nl": "Birds eat food that they scavenge.", "fol": "", "prediction": ["all x.(Bird(x) -> (EatsFood(x) & Scavenges(x)))"]}
{"id": "eqasc_train_12976", "nl": "Beaks are adapted for food that is scavenged.", "fol": "", "prediction": ["all x.(Beak(x) -> (AdaptedForScavengedFood(x) & Food(x)))"]}
{"id": "eqasc_train_12977", "nl": "All birds are placed in the Class Aves.", "fol": "", "prediction": ["all x.(Bird(x) -> PlacedInClassAves(x))"]}
{"id": "eqasc_train_12978", "nl": "Organisms in the class Aves have beaks that are generally adapted for the food they eat.", "fol": "", "prediction": ["all x.(Ave(x) -> (HasBeak(x) & AdaptedForFood(x)))"]}
{"id": "eqasc_train_12979", "nl": "Birds eat the fish, algae and human food.", "fol": "", "prediction": ["all x.(Bird(x) -> (EatsFish(x) & EatsAlgae(x) & EatsHumanFood(x)))"]}
{"id": "eqasc_train_12980", "nl": "Bird beaks are often adapted for eating fish.", "fol": "", "prediction": ["all x.(BirdBeak(x) -> AdaptedForEatingFish(x))"]}
{"id": "eqasc_train_12981", "nl": "Eagles are large birds.", "fol": "", "prediction": ["all x.(Eagle(x) -> LargeBird(x))"]}
{"id": "eqasc_train_12982", "nl": "eagle beaks are generally adapted for the food they eat", "fol": "", "prediction": ["all x.(EagleBeak(x) -> (AdaptedForFood(x) & Eats(x)))"]}
{"id": "eqasc_train_12983", "nl": "Birds have a beak or a bill.", "fol": "", "prediction": ["all x.(Bird(x) -> (HasBeak(x) | HasBill(x)))"]}
{"id": "eqasc_train_12984", "nl": "Bird bills are generally adapted for the food they eat.", "fol": "", "prediction": ["all x.(BirdBill(x) -> AdaptedForFood(x))"]}
{"id": "eqasc_train_12985", "nl": "If something is a bird, can fly, and has a hooked beak, it is an eagle.", "fol": "", "prediction": ["all x.((Bird(x) & CanFly(x) & HookedBeak(x)) -> Eagle(x))"]}
{"id": "eqasc_train_12986", "nl": "hooked beaks are adapted for the food they eat", "fol": "", "prediction": ["all x.(HuntedBeak(x) -> AdaptedForFood(x))"]}
{"id": "eqasc_train_12987", "nl": "disease has a negative impact on an organism", "fol": "", "prediction": ["all x y.((Disease(x) & Organism(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_12988", "nl": "Crohn's disease is a lifelong disease.", "fol": "", "prediction": ["all x.(CrohnsDisease(x) -> LifelongDisease(x))"]}
{"id": "eqasc_train_12989", "nl": "Crohn's impact on an organism is negative.", "fol": "", "prediction": ["all x.(CrohnsImpact(x) -> Negative(x))"]}
{"id": "eqasc_train_12990", "nl": "Disease has a negtive impact on plants and animals.", "fol": "", "prediction": ["all x.(Disease(x) -> NegtiveImpactOnPlantsAndAnimals(x))"]}
{"id": "eqasc_train_12991", "nl": "Peace is freedom from sickness and disease.", "fol": "", "prediction": ["all x.(Peace(x) -> (FreedomFromSickness(x) & FreedomFromDisease(x)))"]}
{"id": "eqasc_train_12992", "nl": "sickness has a negative impact on an organism", "fol": "", "prediction": ["all x y.((Sickness(x) & Organism(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_12993", "nl": "Disease has a negative impact on a living being.", "fol": "", "prediction": ["all x.(Disease(x) -> NegativeImpactOnLivingBeing(x))"]}
{"id": "eqasc_train_12994", "nl": "Because it is a disease, it can be treated.", "fol": "", "prediction": ["all x.(Disease(x) -> CanBeTreated(x))"]}
{"id": "eqasc_train_12995", "nl": "Negative impacts on organisms can be treated", "fol": "", "prediction": ["all x.(NegativeImpactsOnOrganisms(x) -> CanBeTreated(x))"]}
{"id": "eqasc_train_12996", "nl": "Mental illness is a disease.", "fol": "", "prediction": ["all x.(MentalIllness(x) -> Disease(x))"]}
{"id": "eqasc_train_12997", "nl": "Mental illness has a negative impact on an organism.", "fol": "", "prediction": ["all x.(MentalIllness(x) -> NegativeImpactOnOrganism(x))"]}
{"id": "eqasc_train_12998", "nl": "Smoking was negatively associated with prevalent Alzheimer's disease and dementia.", "fol": "", "prediction": ["all x.(Smoking(x) -> (PrevalenceOfAlzheimerDisease(x) & PrevalenceOfDemenitis(x)))"]}
{"id": "eqasc_train_12999", "nl": "smoking has a negative impact", "fol": "", "prediction": ["all x.(Smoking(x) -> NegativeImpact(x))"]}
{"id": "eqasc_train_13000", "nl": "Bacteria and Viruses Bacteria and viruses can cause diseases.", "fol": "", "prediction": ["all x.((Bacteria(x) | Viruses(x)) -> CausesDisease(x))"]}
{"id": "eqasc_train_13001", "nl": "bacteria can have a negative impact on an organism", "fol": "", "prediction": ["all x y.((Bacteria(x) & Organism(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_13002", "nl": "Illness is a subjective experience of disease.", "fol": "", "prediction": ["all x.(Illness(x) -> SubjectiveExperienceOfDisease(x))"]}
{"id": "eqasc_train_13003", "nl": "Illness has a negative impact on an organism.", "fol": "", "prediction": ["all x.(Illness(x) -> NegativeImpactOnOrganism(x))"]}
{"id": "eqasc_train_13004", "nl": "Influenza, or the flu, is a contagious disease caused by a virus.", "fol": "", "prediction": ["all x.(Influenza(x) -> (ContagiousDisease(x) & CausedByVirus(x)))"]}
{"id": "eqasc_train_13005", "nl": "the flu has a negative impact on an organism", "fol": "", "prediction": ["all x y.((Flu(x) & Organism(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_13006", "nl": "Infectious diseases and diseases of malnutrition are prevalent.", "fol": "", "prediction": ["all x.((InfectiousDisease(x) | MalnutritionDisease(x)) -> Predominant(x))"]}
{"id": "eqasc_train_13007", "nl": "malnutrition is a negative impact on an organism", "fol": "", "prediction": ["all x.(Malnutrition(x) -> NegativeImpactOnOrganism(x))"]}
{"id": "eqasc_train_13008", "nl": "Disease causing organisms are called pathogens .", "fol": "", "prediction": ["all x.((DiseaseCausingOrganism(x) & Pathogen(x)) -> Causes(x,Organism))"]}
{"id": "eqasc_train_13009", "nl": "Pathogens have a negative impact on an organism?", "fol": "", "prediction": ["all x y.((Pathogen(x) & Organism(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_13010", "nl": "heating a liquid can be used to identify that liquid 's boiling point", "fol": "", "prediction": ["all x y.((Liquid(x) & Liquid(y)) -> BoilingPoint(x,y))"]}
{"id": "eqasc_train_13011", "nl": "Heating a liquid can tell you when it becomes a gas.", "fol": "", "prediction": ["all x.(HeatingLiquid(x) -> CanTellWhenGas(x))"]}
{"id": "eqasc_train_13012", "nl": "Heating a liquid converts it into a gas", "fol": "", "prediction": ["all x y.((Liquid(x) & Gas(y)) -> HeatsConvertsTo(x,y))"]}
{"id": "eqasc_train_13013", "nl": "Heating a liquid can convert it into a gas.", "fol": "", "prediction": ["all x y.((Liquid(x) & Liquid(y)) -> ConvertsToGas(x,y))"]}
{"id": "eqasc_train_13014", "nl": "Because at the boiling point of water, there are molecules that are a gas and that are a liquid.", "fol": "", "prediction": ["all x.((Molecule(x) & BoilingPointOfWater(x)) -> (Gas(x) & Liquid(x)))"]}
{"id": "eqasc_train_13015", "nl": "a liquid turns into gas when boiling", "fol": "", "prediction": ["all x y.((Liquid(x) & Boiling(y) & Boiling(z)) -> TurnsIntoGas(x,y))"]}
{"id": "eqasc_train_13016", "nl": "heating water can be used to identify water's boiling point", "fol": "", "prediction": ["all x.(HeatingWater(x) -> IdentifiesBoilingPoint(x))"]}
{"id": "eqasc_train_13017", "nl": "Fire can be used to identify that liquid's boiling point.", "fol": "", "prediction": ["all x y.((Fire(x) & Liquid(y)) -> BoilingPoint(x,y))"]}
{"id": "eqasc_train_13018", "nl": "Pressure affects the boiling point of a liquid.", "fol": "", "prediction": ["all x y.((Pressure(x) & Liquid(y)) -> AffectsBoilingPoint(x,y))"]}
{"id": "eqasc_train_13019", "nl": "Pressure can increase or decrease the boiling point.", "fol": "", "prediction": ["all x.(Pressure(x) -> (IncreasesBoilingPoint(x) | DecreasesBoilingPoint(x)))"]}
{"id": "eqasc_train_13020", "nl": "Heating a liquid can cause gas bubbles to burst.", "fol": "", "prediction": ["all x y.((Liquid(x) & GasBubble(y)) -> Burst(x,y))"]}
{"id": "eqasc_train_13021", "nl": "Heat is caused by vibrations of the atoms and molecules of substances.", "fol": "", "prediction": ["all x y.((Heat(x) & Substance(y)) -> (VibrationsOfAtomsAndMolecules(x,y)))"]}
{"id": "eqasc_train_13022", "nl": "vibrations of the atoms in a liquid can be used to identify that liquid 's boiling point", "fol": "", "prediction": ["all x y z.((Liquid(x) & Atoms(y) & BoilingPoint(z)) -> VibrationsInLiquid(x,y,z))"]}
{"id": "eqasc_train_13023", "nl": "carbon dioxide concentrations in the air have increased over the last decade dramatically", "fol": "", "prediction": ["all x y.((CarbonDioxideConcentration(x) & Air(y)) -> IncreasedOverDecade(x,y))"]}
{"id": "eqasc_train_13024", "nl": "greenhouse gas concentrations in the air have increased over the last decade dramatically", "fol": "", "prediction": ["all x y.((GreenhouseGasConcentration(x) & Air(y)) -> IncreasedOverDecade(x,y))"]}
{"id": "eqasc_train_13025", "nl": "Decades have 10 years.", "fol": "", "prediction": ["all x.(Decade(x) -> Has10Years(x))"]}
{"id": "eqasc_train_13026", "nl": "Carbon dioxide concentrations in the air have increased over the last 10 years dramatically", "fol": "", "prediction": ["all x y.((CarbonDioxideConcentration(x) & Air(y)) -> IncreasedOverTheLast10Years(x,y))"]}
{"id": "eqasc_train_13027", "nl": "Carbon dioxide is the primary greenhouse gas.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> PrimaryGreenhouseGas(x))"]}
{"id": "eqasc_train_13028", "nl": "Carbon dioxide, CO2, is usually a harmless gas.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> (HasHazardousGas(x) & Usually(x)))"]}
{"id": "eqasc_train_13029", "nl": "CO2 concentrations in the air have increased over the last decade dramatically", "fol": "", "prediction": ["all x y.((Air(x) & CO2Concentration(y)) -> IncreasedOverDecade(x,y))"]}
{"id": "eqasc_train_13030", "nl": "Carbon dioxide is formed by burning carbon.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> FormedByBurningCarbon(x))"]}
{"id": "eqasc_train_13031", "nl": "Burning carbon concentrations have increased dramatically", "fol": "", "prediction": ["all x.(BurningCarbonConcentration(x) -> IncreasedScenarily(x))"]}
{"id": "eqasc_train_13032", "nl": "Increases in carbon dioxide make the greenhouse effect worse.", "fol": "", "prediction": ["all x.((IncreasesInCarbonDioxide(x) & GreenhouseEffect(x)) -> Worse(x))"]}
{"id": "eqasc_train_13033", "nl": "The greenhouse effect in the air  has become worse over the last decade", "fol": "", "prediction": ["all x y.((GreenhouseEffect(x) & Air(y)) -> WorseOverDecline(x,y))"]}
{"id": "eqasc_train_13034", "nl": "CO 2 is carbon dioxide.", "fol": "", "prediction": ["all x.(CO2(x) -> CarbonDioxide(x))"]}
{"id": "eqasc_train_13035", "nl": "CO 2 concentrations in the air have increased over the last decade dramatically", "fol": "", "prediction": ["all x y.((CO2Concentration(x) & Air(y)) -> IncreasedOverDecade(x,y))"]}
{"id": "eqasc_train_13036", "nl": "Carbon dioxide is the chief culprit in the increased threat of global warming in recent decades.", "fol": "", "prediction": ["all x.((CarbonDioxide(x) & IncreasedGlobalWarmingThreat(x)) -> ChiefCause(x))"]}
{"id": "eqasc_train_13037", "nl": "The rise in carbon dioxide concentrations contributes to the increase in global warming threats.", "fol": "", "prediction": ["all x.((RiseInCarbonDioxideConcentrations(x) & GlobalWarmingThreats(x)) -> ContributesToIncrease(x,GlobalWarmingThreats))"]}
{"id": "eqasc_train_13038", "nl": "a firecracker converts chemical energy into sound", "fol": "", "prediction": ["all x y.((Firecracker(x) & ChemicalEnergy(y)) -> ConvertsToSound(x,y))"]}
{"id": "eqasc_train_13039", "nl": "Fireworks convert chemical energy into sound.", "fol": "", "prediction": ["all x.(Fireworks(x) -> ConvertsChemicalEnergyToSound(x))"]}
{"id": "eqasc_train_13040", "nl": "a firecracker converts chemical energy into what we hear", "fol": "", "prediction": ["all x y z.((Firecracker(x) & ChemicalEnergy(y) & ChemicalEnergy(z)) -> ConvertsToWhatWeHear(x,y,z))"]}
{"id": "eqasc_train_13041", "nl": "Chemical energy Energy released as a result of chemical reactions.", "fol": "", "prediction": ["all x.(ChemicalEnergy(x) -> ReleasedAsResultOfChemicalReactions(x))"]}
{"id": "eqasc_train_13042", "nl": "Firecrackers go off as a result of chemical reactions taking place.", "fol": "", "prediction": ["all x.(Firecracker(x) -> (CompleteReactions(x) & GoOff(x)))"]}
{"id": "eqasc_train_13043", "nl": "Energy is generated by sound waves.", "fol": "", "prediction": ["all x.(Energy(x) -> GeneratesBySoundWaves(x))"]}
{"id": "eqasc_train_13044", "nl": "A firecracker converts chemical energy into audible waves.", "fol": "", "prediction": ["all x.(Firecracker(x) -> ConvertsChemicalEnergyToAudiibleWaves(x))"]}
{"id": "eqasc_train_13045", "nl": "Audible ground fireworks, such as firecrackers and chasers, are illegal in Kentucky.", "fol": "", "prediction": ["all x.((AudibleGroundFireworks(x) & (Firecracker(x) | Chaser(x))) -> IllegalInKentucky(x))"]}
{"id": "eqasc_train_13046", "nl": "Audible ground fireworks convert chemical energy into sound", "fol": "", "prediction": ["all x.(AudibleGroundFireworks(x) -> ConvertsChemicalEnergyToSound(x))"]}
{"id": "eqasc_train_13047", "nl": "Energy and chemical reactions Chemical reactions require energy.", "fol": "", "prediction": ["all x.((ChemicalReaction(x) & RequiresEnergy(x)) -> RequiresEnergy(x))"]}
{"id": "eqasc_train_13048", "nl": "a firecracker converts energy into sound", "fol": "", "prediction": ["all x y.((Firecracker(x) & Energy(y)) -> ConvertsToSound(x,y))"]}
{"id": "eqasc_train_13049", "nl": "Most any other sounds can be frightening or startling.", "fol": "", "prediction": ["all x.(Song(x) -> (Frightening(x) | Startling(x)))"]}
{"id": "eqasc_train_13050", "nl": "firecrackers can be startling", "fol": "", "prediction": ["all x.(Firecracker(x) -> Startling(x))"]}
{"id": "eqasc_train_13051", "nl": "Fireworks are illegal, including firecrackers.", "fol": "", "prediction": ["all x.(Fireworks(x) -> (Illegal(x) & Firecrackers(x)))"]}
{"id": "eqasc_train_13052", "nl": "a firework converts chemical energy into sound", "fol": "", "prediction": ["all x y.((Firework(x) & ChemicalEnergy(y)) -> ConvertsToSound(x,y))"]}
{"id": "eqasc_train_13053", "nl": "a firecracker converts chemical energy into vibrations in matter", "fol": "", "prediction": ["all x y.((Firecracker(x) & ChemicalEnergy(y)) -> ConvertsToVibrations(x,y))"]}
{"id": "eqasc_train_13054", "nl": "a firecracker converts chemical energy into vibrating waves", "fol": "", "prediction": ["all x y.((Firecracker(x) & ChemicalEnergy(y)) -> ConvertsToVibratingWaves(x,y))"]}
{"id": "eqasc_train_13055", "nl": "Particularly interesting waves are sound waves .", "fol": "", "prediction": ["all x.((SoundWaves(x) & SoundWaves(x)) -> ParticularlyInteresting(x))"]}
{"id": "eqasc_train_13056", "nl": "a firecracker converts chemical energy into waves", "fol": "", "prediction": ["all x y.((Firecracker(x) & ChemicalEnergy(y)) -> ConvertsToWaves(x,y))"]}
{"id": "eqasc_train_13057", "nl": "if an object is black then that object absorbs all visible light", "fol": "", "prediction": ["all x.((Object(x) & Black(x)) -> AbsorbsVisibleLight(x))"]}
{"id": "eqasc_train_13058", "nl": "Black objects absorb all different wavelengths of light.", "fol": "", "prediction": ["all x.(BlackObject(x) -> AbsorbsLight(x))"]}
{"id": "eqasc_train_13059", "nl": "If something is black then it absorbs all different wavelengths of light.", "fol": "", "prediction": ["all x.(Black(x) -> AbsorbsLight(x))"]}
{"id": "eqasc_train_13060", "nl": "Bright colors reflect visible light.", "fol": "", "prediction": ["all x.(BrightColor(x) -> ReflectsVisibleLight(x))"]}
{"id": "eqasc_train_13061", "nl": "Black is not a bright color", "fol": "", "prediction": ["all x.(Black(x) -> -BrightColor(x))"]}
{"id": "eqasc_train_13062", "nl": "Visible light is made up of all the colors of the spectrum.", "fol": "", "prediction": ["all x.(VisibleLight(x) -> exists y.(Color(y) & Color(z) & Spectrum(x,y)))"]}
{"id": "eqasc_train_13063", "nl": "A black object absorbs all of the colors of the spectrum.", "fol": "", "prediction": ["all x.(BlackObject(x) -> AbsorbsAllColorsOfSpectrum(x))"]}
{"id": "eqasc_train_13064", "nl": "black objects absorb all visible rays or beams", "fol": "", "prediction": ["all x.(BlackObject(x) -> AbsorbsVisibleRaysOrBeams(x))"]}
{"id": "eqasc_train_13065", "nl": "if an object is black then that object absorbs all photons . ", "fol": "", "prediction": ["all x.((Object(x) & Black(x)) -> AbsorbsPhotons(x))"]}
{"id": "eqasc_train_13066", "nl": "Black holes emit no light.", "fol": "", "prediction": ["all x.(BlackHole(x) -> -EmitsLight(x))"]}
{"id": "eqasc_train_13067", "nl": "a black hole is not visible", "fol": "", "prediction": ["all x.(BlackHole(x) -> -Visible(x))"]}
{"id": "eqasc_train_13068", "nl": "Nature of Light Light is a form of energy.", "fol": "", "prediction": ["NatureOfLight(Light) -> Energy(Light))"]}
{"id": "eqasc_train_13069", "nl": "If an object is black then that object absorbs all visible energy.", "fol": "", "prediction": ["all x.(Black(x) -> AbsorbsVisibleEnergy(x))"]}
{"id": "eqasc_train_13070", "nl": "Light is a type of electromagnetic radiation.", "fol": "", "prediction": ["all x.(Light(x) -> ElectromagneticRadiation(x))"]}
{"id": "eqasc_train_13071", "nl": "If an object is black then that object absorbs all visible electromagnetic radiation.", "fol": "", "prediction": ["all x.(Black(x) -> AbsorbsVisibleElectromagneticRadiation(x))"]}
{"id": "eqasc_train_13072", "nl": "a black object absorbs energy", "fol": "", "prediction": ["all x.(BlackObject(x) -> AbsorbsEnergy(x))"]}
{"id": "eqasc_train_13073", "nl": " if an item is black then that item absorbs all visible light", "fol": "", "prediction": ["all x.(Black(x) -> AbsorbsVisibleLight(x))"]}
{"id": "eqasc_train_13074", "nl": "black objects absorb sunlight", "fol": "", "prediction": ["all x.(BlackObject(x) -> AbsorbsSunlight(x))"]}
{"id": "eqasc_train_13075", "nl": "Some leopards are melanistic, which produces a black fur.", "fol": "", "prediction": ["exists x.(Leopard(x) & Melanistic(x) & ProducesBlackFur(x))"]}
{"id": "eqasc_train_13076", "nl": "melanistic fur absorbs all visible light", "fol": "", "prediction": ["all x.(MelanisticFur(x) -> AbsorbsVisibleLight(x))"]}
{"id": "eqasc_train_13077", "nl": "An object that absorbs all the light waves with none reflected back , is perceived as black .", "fol": "", "prediction": ["all x.((Object(x) & AbsorbsLightWaves(x) & -ReflectedBack(x)) -> PerceivedAsBlack(x))"]}
{"id": "eqasc_train_13078", "nl": "Something is black if it absorbs visible light and doesn't reflect", "fol": "", "prediction": ["all x.((AbsorbsVisibleLight(x) & -ReflectsVisibleLight(x)) -> Black(x))"]}
{"id": "eqasc_train_13079", "nl": "Ravens are big, black birds.", "fol": "", "prediction": ["all x.(Rabbit(x) -> (BigBlackBird(x) & Black(x)))"]}
{"id": "eqasc_train_13080", "nl": "Ravens absorb all visible light", "fol": "", "prediction": ["all x.(Rabbit(x) -> AbsorbsVisibleLight(x))"]}
{"id": "eqasc_train_13081", "nl": "All ravens are black .", "fol": "", "prediction": ["all x.(Raven(x) -> Black(x))"]}
{"id": "eqasc_train_13082", "nl": "ravens absorb all visible light", "fol": "", "prediction": ["all x.(Raven(x) -> AbsorbsVisibleLight(x))"]}
{"id": "eqasc_train_13083", "nl": "Light grains are quartz, Black grains are coal.", "fol": "", "prediction": ["all x y.((LightGrain(x) & BlackGrain(y)) -> (Quarz(x) & Coal(y)))"]}
{"id": "eqasc_train_13084", "nl": "Coal absorbs all visible light", "fol": "", "prediction": ["all x.(Coal(x) -> AbsorbsVisibleLight(x))"]}
{"id": "eqasc_train_13085", "nl": "Just next to the visible light spectrum is the infrared spectrum.", "fol": "", "prediction": ["all x.(InfraredSpectrum(x) -> JustNearVisibleLight(x))"]}
{"id": "eqasc_train_13086", "nl": "The infrared spectrum is not absorbed by black objects", "fol": "", "prediction": ["all x.(InfraredSpectrum(x) -> -AbsorbedByBlackObjects(x))"]}
{"id": "eqasc_train_13087", "nl": "Temperature falls from the equator to the poles.", "fol": "", "prediction": ["all x y.((Equator(x) & Pole(y)) -> TemperatureFalls(x,y))"]}
{"id": "eqasc_train_13088", "nl": "heat falls from the equator to the poles.", "fol": "", "prediction": ["all x y.((Equator(x) & Pole(y)) -> HeatFalls(x,y))"]}
{"id": "eqasc_train_13089", "nl": "heat amounts are measured from the equator to the poles ", "fol": "", "prediction": ["all x y z.((HeatAmount(x) & Equator(y) & Pole(z)) -> MeasuredFromTo(x,y,z))"]}
{"id": "eqasc_train_13090", "nl": "All temperatures are in Fahrenheit.", "fol": "", "prediction": ["all x.(Temperature(x) -> Fahrenheit(x))"]}
{"id": "eqasc_train_13091", "nl": "Fahrenheit falls from the equator to the poles", "fol": "", "prediction": ["all x y z.((Equator(x) & Pole(y) & Equator(z)) -> FallsFromTo(x,y,z))"]}
{"id": "eqasc_train_13092", "nl": "First, strong winds circling Antarctica isolate the atmosphere near the pole the winter.", "fol": "", "prediction": ["all x y.((StrongWinds(x) & Antarctica(y) & Circulates(x,y)) -> IsolatesAtmosphereNearPole(x,y))"]}
{"id": "eqasc_train_13093", "nl": "Temperature falls from the equator to Antarctica.", "fol": "", "prediction": ["all x y.((Temperature(x) & Equator(y)) -> FallsToAntarctica(x,y))"]}
{"id": "eqasc_train_13094", "nl": "heat energy falls from the equator to the poles", "fol": "", "prediction": ["all x y z.((HeatEnergy(x) & Equator(y) & Pole(z)) -> FallsFromTo(x,y,z))"]}
{"id": "eqasc_train_13095", "nl": "Sun's rays are perpendicular to the equator.", "fol": "", "prediction": ["all x.(Sun(x) -> PerpendicularToEquator(x))"]}
{"id": "eqasc_train_13096", "nl": "Temperatures fall towards the poles as the sun's rays are no longer perpendicular", "fol": "", "prediction": ["all x y.((Temperature(x) & Pole(y) & SunRain(x,y)) -> FallTowards(x,y))"]}
{"id": "eqasc_train_13097", "nl": "Temperature is a measure of the amount of heat.", "fol": "", "prediction": ["all x.(Temperature(x) -> MeasuresHeat(x))"]}
{"id": "eqasc_train_13098", "nl": "Heat falls from the equator to the poles.", "fol": "", "prediction": ["all x y.((Equator(x) & Pole(y)) -> HeatFalls(x,y))"]}
{"id": "eqasc_train_13099", "nl": "warm weather falls from the equator to the poles", "fol": "", "prediction": ["all x y z.((WarmWeather(x) & Equator(y) & Pole(z)) -> FallsFromTo(x,y,z))"]}
{"id": "eqasc_train_13100", "nl": "Courtship is behavior that is intended to attract a mate.", "fol": "", "prediction": ["all x.(Courtship(x) -> (AttractsMate(x) & Behavior(x)))"]}
{"id": "eqasc_train_13101", "nl": "Almost all animals display colors to attract a mate or to scare off a predator.", "fol": "", "prediction": ["all x.(Animal(x) -> (DisplaysColors(x) & (AttractsMate(x) | ScaresOffPredator(x))))"]}
{"id": "eqasc_train_13102", "nl": "Courtship can be manifested by displays of color.", "fol": "", "prediction": ["all x.(Courtship(x) -> (DisplaysOfColor(x) | ManifestedBy(x,Color)))"]}
{"id": "eqasc_train_13103", "nl": "Some animals attract mates with scent.", "fol": "", "prediction": ["exists x.(Animal(x) & Attracts(x,mate) & HasScent(x))"]}
{"id": "eqasc_train_13104", "nl": "animal courtship can involve scent", "fol": "", "prediction": ["all x.(AnimalCourtship(x) -> (InvolvesScent(x) | InvolvesScent(x)))"]}
{"id": "eqasc_train_13105", "nl": "Courtship is behavior that is intended to attract a partner.", "fol": "", "prediction": ["all x.(Courtship(x) -> (AttractsPartner(x) & Behavior(x)))"]}
{"id": "eqasc_train_13106", "nl": "Foxes are monogomous and mate for life.", "fol": "", "prediction": ["all x.(Fox(x) -> (Monogomous(x) & MatesForLife(x)))"]}
{"id": "eqasc_train_13107", "nl": "courtship is behavior exhibited by foxes", "fol": "", "prediction": ["all x y.((Fox(x) & Fox(y)) -> CourtshipBehavior(x,y))"]}
{"id": "eqasc_train_13108", "nl": "friendship usually precedes attracting a mate", "fol": "", "prediction": ["all x y.((Friendship(x) & Mate(y)) -> (Attracts(x,y) & Attracts(x,y)))"]}
{"id": "eqasc_train_13109", "nl": "Courtship is behavior that is intended to reproduce", "fol": "", "prediction": ["all x.(Courtship(x) -> (Body(x) & IntendedToReproduce(x)))"]}
{"id": "eqasc_train_13110", "nl": "Complex courtship rituals precede mating.", "fol": "", "prediction": ["all x.(ComplexCourtshipRitual(x) -> PrecedesMating(x))"]}
{"id": "eqasc_train_13111", "nl": "Complex rituals are behavior that are intended to attract a mate.", "fol": "", "prediction": ["all x.(ComplexRitual(x) -> (AttractsMate(x) & Behavior(x)))"]}
{"id": "eqasc_train_13112", "nl": "Assortative mating is the mating of individuals that are phenotypically similar.", "fol": "", "prediction": ["all x.(AssortativeMating(x) -> MatingOfPhenomenologicallySameIndividuals(x))"]}
{"id": "eqasc_train_13113", "nl": "Courtship is the behavior of attracting something that is phenotypically similar to the seeker.", "fol": "", "prediction": ["all x y.((Courtship(x) & Attracts(x,y)) -> PhenomenologicallySameToSeeker(y))"]}
{"id": "eqasc_train_13114", "nl": "Reproduction A courtship usually preceeds the actual mating.", "fol": "", "prediction": ["all x.(Courtship(x) -> PreceedsMating(x))"]}
{"id": "eqasc_train_13115", "nl": "courtship precedes reproduction", "fol": "", "prediction": ["all x y.((Courtship(x) & Reproduction(y)) -> Preceeds(x,y))"]}
{"id": "eqasc_train_13116", "nl": "For example, female birds secrete estrogen in response to the courtship of their male mates.", "fol": "", "prediction": ["all x y.((FemaleBird(x) & MaleMaterial(y)) -> SecretesEstrogen(x,y))"]}
{"id": "eqasc_train_13117", "nl": "Birds secrete estrogen to attract a mate", "fol": "", "prediction": ["all x y.((Bird(x) & Mate(y)) -> SecretesEstrogenToAttract(x,y))"]}
{"id": "eqasc_train_13118", "nl": "Moose begin to attract mates in autumn", "fol": "", "prediction": ["all x y.((Moose(x) & Autumn(y)) -> AttractsMates(x,y))"]}
{"id": "eqasc_train_13119", "nl": "moose begin behavior intended to attract a mate in autumn", "fol": "", "prediction": ["all x y.((Moose(x) & Mate(y)) -> Attracts(x,y))"]}
{"id": "eqasc_train_13120", "nl": "Birds sing to defend territories and attract mates.", "fol": "", "prediction": ["all x.(Bird(x) -> (SingsToDefendTerritories(x) & AttractsMates(x)))"]}
{"id": "eqasc_train_13121", "nl": "birds sing to defend territories and for courtship ", "fol": "", "prediction": ["all x y z.((Bird(x) & Territory(y) & Courtship(z)) -> (SingsToDefend(x,y) & SingsFor(x,z)))"]}
{"id": "eqasc_train_13122", "nl": "Echinoderms lack respiratory and excretory systems.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> (LacksRespiratorySystems(x) & LacksExcretorySystems(x)))"]}
{"id": "eqasc_train_13123", "nl": "Starfish lack respiratory and excretory systems.", "fol": "", "prediction": ["all x.(Starfish(x) -> (LacksRespiratorySystems(x) & LacksExcretorySystems(x)))"]}
{"id": "eqasc_train_13124", "nl": "starfish lack respiratory and excretory systems", "fol": "", "prediction": ["all x.(Starfish(x) -> (LacksRespiratorySystems(x) & LacksExcretorySystems(x)))"]}
{"id": "eqasc_train_13125", "nl": "Starfish lack respiratory and excretory systems", "fol": "", "prediction": ["all x.(Starfish(x) -> (LacksRespiratorySystems(x) & LacksExcretorySystems(x)))"]}
{"id": "eqasc_train_13126", "nl": "some deuterostomes lack respiratory systems", "fol": "", "prediction": ["exists x.(Deuterostome(x) & LacksRespiratorySystems(x))"]}
{"id": "eqasc_train_13127", "nl": "Crinoids and blastoids lack respiratory and excretory systems.", "fol": "", "prediction": ["all x.((Cronoid(x) | Blastoid(x)) -> (LacksRespiratorySystems(x) & LacksExcretorySystems(x)))"]}
{"id": "eqasc_train_13128", "nl": "Lung mechanics and gas exchange are topics during study of the respiratory system.", "fol": "", "prediction": ["all x.((LungMechanics(x) & GasExchange(x)) -> TopicDuringRespiratorySystemStudy(x))"]}
{"id": "eqasc_train_13129", "nl": "Echinoderms have no lungs.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> -HasLungs(x))"]}
{"id": "eqasc_train_13130", "nl": "deuterostomes lack respiratory and excretory systems", "fol": "", "prediction": ["all x.(Deuterostome(x) -> (LacksRespiratorySystems(x) & LacksExcretorySystems(x)))"]}
{"id": "eqasc_train_13131", "nl": "starfish lack respiratory systems", "fol": "", "prediction": ["all x.(Starfish(x) -> LacksRespiratorySystems(x))"]}
{"id": "eqasc_train_13132", "nl": "marine and benthic creatures lack respiratory and excretory systems.", "fol": "", "prediction": ["all x.((MarineCreature(x) | BenthicCreature(x)) -> (LacksRespiratorySystems(x) & LacksExcretorySystems(x)))"]}
{"id": "eqasc_train_13133", "nl": "Influenza is a disease of the respiratory system.", "fol": "", "prediction": ["all x.(Influenza(x) -> DiseaseOfRespiratorySystem(x))"]}
{"id": "eqasc_train_13134", "nl": "echinoderms can't contract influenza", "fol": "", "prediction": ["all x.(Echinoderm(x) -> -ContractsInfluenza(x))"]}
{"id": "eqasc_train_13135", "nl": "Urine leaves the body through a sphincter in the process of urination.", "fol": "", "prediction": ["all x y.((Urine(x) & Sphincter(y)) -> LeavesBody(x,y))"]}
{"id": "eqasc_train_13136", "nl": "Urination requires relaxation of the sphincter muscle.", "fol": "", "prediction": ["all x.(Urination(x) -> RequiresRelaxationOfSphincterMuscle(x))"]}
{"id": "eqasc_train_13137", "nl": " the process of urination requires relaxation of muscles ", "fol": "", "prediction": ["all x y.((Urination(x) & MuscleRelaxation(y)) -> RequiresRelaxation(x,y))"]}
{"id": "eqasc_train_13138", "nl": "Elimination of urine is normally a voluntary process for adults.", "fol": "", "prediction": ["all x.((EliminatesUrine(x) & Adult(x)) -> VoluntaryProcess(x))"]}
{"id": "eqasc_train_13139", "nl": "Urine leaves the body through voluntary elimination for adults", "fol": "", "prediction": ["all x.(Urine(x) -> (LeavesBodyThroughVoluntaryElimination(x) & Adults(x)))"]}
{"id": "eqasc_train_13140", "nl": "Fluids in the urine eliminate metabolic waste products.", "fol": "", "prediction": ["all x y.((Fluid(x) & Urine(y)) -> EliminatesMetabolicWasteProducts(x,y))"]}
{"id": "eqasc_train_13141", "nl": "Metabolic waste products can leave the body through a sphincter", "fol": "", "prediction": ["all x y.((MetabolicWasteProduct(x) & Body(y)) -> (LeavesThroughSphincter(x,y)))"]}
{"id": "eqasc_train_13142", "nl": "Muscles around the urethra, called sphincter muscles, control the flow of urine out of the body.", "fol": "", "prediction": ["all x.((Muscle(x) & AroundUrethra(x)) -> SphincterMuscle(x))"]}
{"id": "eqasc_train_13143", "nl": "Muscles around the urethra control the urination process", "fol": "", "prediction": ["all x y.((Muscle(x) & Urine(y)) -> ControlsUrinationProcess(x,y))"]}
{"id": "eqasc_train_13144", "nl": "During urination, the urethra carries urine from the bottom of the bladder out of the body.", "fol": "", "prediction": ["all x y.((Urination(x) & Urine(y)) -> CarriesFromBottomOfB bladder(x,y))"]}
{"id": "eqasc_train_13145", "nl": "the urethra carries urine from the bottom of the bladder to a sphincter for urination", "fol": "", "prediction": ["all x y z.((Urethra(x) & Urine(y) & Sphincter(z)) -> CarriesFromBottomOfB bladderToSphincterForUrination(x,y,z))"]}
{"id": "eqasc_train_13146", "nl": "urine leaves the body upon relaxation of a muscle", "fol": "", "prediction": ["all x y.((Urine(x) & Muscle(y) & Relaxation(x,y)) -> LeavesBody(x,y))"]}
{"id": "eqasc_train_13147", "nl": "Infrequente urination or urine is dark yellow.", "fol": "", "prediction": ["all x.((InfrequenteUrination(x) | InfrequentUrination(x)) -> DarkYellow(x))"]}
{"id": "eqasc_train_13148", "nl": "If pee leaves the body through a sphincter infrequently it will be dark yellow", "fol": "", "prediction": ["all x.((Pee(x) & LeavesBodyInfrequently(x) & ThroughSphincter(x)) -> DarkYellow(x))"]}
{"id": "eqasc_train_13149", "nl": "From the bladder, urine leaves the body.", "fol": "", "prediction": ["all x y.((B bladder(x) & Urine(y)) -> LeavesBody(y,x))"]}
{"id": "eqasc_train_13150", "nl": "The bladder empties through a sphincter in the process of urination.", "fol": "", "prediction": ["all x y.((B bladder(x) & Sphincter(y)) -> EmptiesInUrination(x,y))"]}
{"id": "eqasc_train_13151", "nl": "global warming is when worldwide temperature increases", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> (GlobalTemperatureIncreases(x) & WorldwideTemperatureIncreases(x)))"]}
{"id": "eqasc_train_13152", "nl": "Ozone depletion causes global warming.", "fol": "", "prediction": ["all x.(OzoneDepletion(x) -> CausesGlobalWarming(x))"]}
{"id": "eqasc_train_13153", "nl": "Ozone depletion causes worldwide temperature increases", "fol": "", "prediction": ["all x.(OzoneDepletion(x) -> CausesGlobalTemperatureIncreases(x))"]}
{"id": "eqasc_train_13154", "nl": "Global warming is when heat worldwide increases.", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> HeatIncreases(x))"]}
{"id": "eqasc_train_13155", "nl": "Global warming is when average seasonal temperature increases to a warmer temp.", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> (AverageSeasonalTemperature(x) & WarmerTemperature(x)))"]}
{"id": "eqasc_train_13156", "nl": "Global warming is when average worldwide seasonal temperatures rise", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> (AverageGlobalSeasonalTemperatures(x) & RisesGlobalSeasonalTemperatures(x)))"]}
{"id": "eqasc_train_13157", "nl": "Global warming blamed on CO2.", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> BlamedOnCO2."]}
{"id": "eqasc_train_13158", "nl": "C02 is blamed for temperature increases", "fol": "", "prediction": ["all x.(C02(x) -> TemperatureIncreases(x))"]}
{"id": "eqasc_train_13159", "nl": "Mass extinction occurs in the ice age and global warming periods.", "fol": "", "prediction": ["all x.(MassExtinction(x) -> (OccursInIceAge(x) & OccursInGlobalWarmingPeriod(x)))"]}
{"id": "eqasc_train_13160", "nl": "When worldwide temperature increases, mass exctinction occurs.", "fol": "", "prediction": ["all x.((GlobalTemperature(x) & Increases(x)) -> MassExctinction(x))"]}
{"id": "eqasc_train_13161", "nl": "Global warming is caused by carbon dioxide trapped in the atmosphere.", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> CausedByCarbonDioxide(x))"]}
{"id": "eqasc_train_13162", "nl": "carbon dioxide causes worldwide temperature increases", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> CausesGlobalTemperatureIncreases(x))"]}
{"id": "eqasc_train_13163", "nl": "Global warming affects wildlife .", "fol": "", "prediction": ["all x y.((GlobalWarming(x) & Wildlife(y)) -> Affects(x,y))"]}
{"id": "eqasc_train_13164", "nl": "it affects wildlife when worldwide temperature increases", "fol": "", "prediction": ["all x y.((Wildlife(x) & WorldwideTemperature(y) & TemperatureIncreases(y)) -> Affects(x,y))"]}
{"id": "eqasc_train_13165", "nl": "Corrosion always increases with increasing temperature.", "fol": "", "prediction": ["all x.(Corrosion(x) -> IncreasesWithIncreasingTemperature(x))"]}
{"id": "eqasc_train_13166", "nl": "global warming increases corrosion", "fol": "", "prediction": ["all x y.((GlobalWarming(x) & Corrosion(y)) -> Increases(x,y))"]}
{"id": "eqasc_train_13167", "nl": "worldwide temperature increases are a part of climate change", "fol": "", "prediction": ["all x.((GlobalTemperatureIncrease(x) & ClimateChange(x)) -> PartOf(x,ClimateChange))"]}
{"id": "eqasc_train_13168", "nl": "unequal heating of Earth 's surface by the Sun causes global wind patterns", "fol": "", "prediction": ["all x y.((EarthSurface(x) & Sun(y) & UnequalHeating(x,y)) -> GlobalWindPatterns(x))"]}
{"id": "eqasc_train_13169", "nl": "Unequal absorption of radiation causes unequal heating of the earth's surface.", "fol": "", "prediction": ["all x.(UnevenAbsorptionOfRadiation(x) -> UnequalHeatingOfEarthSurface(x))"]}
{"id": "eqasc_train_13170", "nl": "Unequal absorption of radiation on the earth's surface causes global wind patterns", "fol": "", "prediction": ["all x.((UnequalAbsorptionOfRadiation(x) & EarthSurface(x)) -> GlobalWindPatterns(x))"]}
{"id": "eqasc_train_13171", "nl": "Wind is air that is moving across the surface of Earth.", "fol": "", "prediction": ["all x.(Wind(x) -> (Air(x) & MovesAcrossSurface(x)))"]}
{"id": "eqasc_train_13172", "nl": "uneven heating of the earth's crust can cause wind", "fol": "", "prediction": ["all x.(UnevenHeatingOfEarthsCrust(x) -> WindCanCause(x))"]}
{"id": "eqasc_train_13173", "nl": "unequal absorption of radiation causes global wind patterns", "fol": "", "prediction": ["all x.(UnequalAbsorptionOfRadiation(x) -> GlobalWindPatterns(x))"]}
{"id": "eqasc_train_13174", "nl": "Due to changes in global wind patterns, some geographical areas can evolve into deserts.", "fol": "", "prediction": ["all x.((GeographicArea(x) & ChangesInGlobalWindPatterns(x)) -> CanEvolveIntoDesert(x))"]}
{"id": "eqasc_train_13175", "nl": "Unequal heating of Earth's surface by the Sun can cause some geographical areas to evolve into deserts.", "fol": "", "prediction": ["all x y.((GeographicArea(x) & UnevenHeating(x,y) & EarthSurface(y)) -> CanEvolveIntoDeserts(x))"]}
{"id": "eqasc_train_13176", "nl": "Finally, the pattern of tropical wind and ocean circulation is a key element of global circulation.", "fol": "", "prediction": ["all x.((PatternOfTropicalWind(x) & PatternOfOceanCirculation(x)) -> KeyElementOfGlobalCirculation(x))"]}
{"id": "eqasc_train_13177", "nl": "Unequal heating of the Earth's surface by the Sun causes tropical wind and ocean circulation.", "fol": "", "prediction": ["all x y.((EarthSurface(x) & Sun(y)) -> (UnequalHeating(x,y) & CausesTropicalWind(x) & CausesOceanCirculation(x)))"]}
{"id": "eqasc_train_13178", "nl": "Global wind patterns are caused by unequal absorption of radiation", "fol": "", "prediction": ["all x.(GlobalWindPattern(x) -> (UnequalAbsorptionOfRadiation(x) & CausedBy(x,GlobalWindPattern)))"]}
{"id": "eqasc_train_13179", "nl": "Unequal heating by the sun s rays causes differences in temperature.", "fol": "", "prediction": ["all x y.((Sun(x) & SunRays(y)) -> CausesTemperatureDifferences(x,y))"]}
{"id": "eqasc_train_13180", "nl": "Differences in temperature causes global wind patterns", "fol": "", "prediction": ["all x y.((DifferencesInTemperature(x) & GlobalWindPattern(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_13181", "nl": "Wind belts in the Atlantic Ocean include the trade winds and the prevailing westerlies .", "fol": "", "prediction": ["all x y.((WindBelt(x) & AtlanticOcean(y)) -> (TradeWinds(x) | PrevalenceWesterlies(x)))"]}
{"id": "eqasc_train_13182", "nl": "unequal heating of Earth 's surface by the Sun causes the westerlies", "fol": "", "prediction": ["all x y z.((EarthSurface(x) & Sun(y) & UnevenHeating(x,y) & EarthSurface(z)) -> Westerlies(x))"]}
{"id": "eqasc_train_13183", "nl": "Another major type of wind is called a polar easterly.", "fol": "", "prediction": ["all x.((Wind(x) & PolarEasterly(x)) -> Wind(x))"]}
{"id": "eqasc_train_13184", "nl": "Unequal heating of Earth 's surface by the Sun causes polar easterlies", "fol": "", "prediction": ["all x y z.((EarthSurface(x) & Sun(y) & EarthSurface(z) & UnevenHeating(x,y,z)) -> PolarEasterlies(x))"]}
{"id": "eqasc_train_13185", "nl": "Large cyclonic systems influence the wind patterns of the middle latitudes.", "fol": "", "prediction": ["all x y.((LargeCyclonicSystem(x) & MiddleLatitude(y)) -> InfluencesWindPatterns(x,y))"]}
{"id": "eqasc_train_13186", "nl": "unequal heating of Earth 's surface by the Sun causes Large cyclonic systems in the middle latitudes", "fol": "", "prediction": ["all x y.((EarthSurface(x) & Sun(y) & UnequalHeating(x,y)) -> LargeCyclonicSystem(x,y))"]}
{"id": "eqasc_train_13187", "nl": "Winds are a key factor in determining global weather patterns.", "fol": "", "prediction": ["all x.(Wind(x) -> DeterminesGlobalWeatherPatterns(x))"]}
{"id": "eqasc_train_13188", "nl": "unequal heating of earth's surface by the sun is a key factor in determining global weather patterns", "fol": "", "prediction": ["all x y.((UnequalHeating(x,y) & EarthSurface(y)) -> DeterminesGlobalWeatherPatterns(x))"]}
{"id": "eqasc_train_13189", "nl": "Low latitudes, for instance, receive more heat during the day than stations at high latitudes.", "fol": "", "prediction": ["all x y.((LowLatitude(x) & HighLatitude(y)) -> ReceivesMoreHeatDuringDay(x,y))"]}
{"id": "eqasc_train_13190", "nl": "Differences in solar warming with latitude during the day on the Earth's surface influence global wind patterns", "fol": "", "prediction": ["all x y.((DifferencesInSolarWarming(x) & Latitude(y) & DayOnEarthSurface(x,y)) -> InfluencesGlobalWindPatterns(x))"]}
{"id": "eqasc_train_13191", "nl": "Warmer ones are closer to the equator where the Sun's heat is stronger.", "fol": "", "prediction": ["all x.(Warmer(x) -> (SunHeatStronger(x) & CloserToEquator(x)))"]}
{"id": "eqasc_train_13192", "nl": "Differences in temperature between the equatorial regions and higher latitudes om the Earth shapes global wind patterns", "fol": "", "prediction": ["all x y z.((Earth(x) & EquatorialRegion(y) & HigherLatitude(z)) -> (DifferencesInTemperature(x,y,z) & ShapesGlobalWindPatterns(x)))"]}
{"id": "eqasc_train_13193", "nl": "Wind causes a distortion of the water application pattern.", "fol": "", "prediction": ["all x y.((Wind(x) & WaterApplicationPattern(y)) -> CausesDistortion(x,y))"]}
{"id": "eqasc_train_13194", "nl": "unequal heating of Earth 's surface by the Sun causes a distortion of the water application pattern", "fol": "", "prediction": ["all x y z.((UnequalHeating(x) & EarthSurface(y) & Sun(z)) -> CausesDistortionOfWaterApplicationPattern(x))"]}
{"id": "eqasc_train_13195", "nl": "Winds of 74 mph are the standard for a hurricane.", "fol": "", "prediction": ["all x.((Wind(x) & Winds(x,74)) -> Hurricane(x))"]}
{"id": "eqasc_train_13196", "nl": "hurricanes form due to unequal heating of Earth's surface by the Sun", "fol": "", "prediction": ["all x y.((Hurricane(x) & EarthSurface(y) & Sun(z)) -> UnevenHeating(x,y,z))"]}
{"id": "eqasc_train_13197", "nl": "Earth is a planet in our solar system.", "fol": "", "prediction": ["all x.(Earth(x) -> PlanetInSolarSystem(x))"]}
{"id": "eqasc_train_13198", "nl": "unequal heating of a planet's surface by the sun causes global wind patterns", "fol": "", "prediction": ["all x y.((Planet(x) & Sun(y) & UnevenHeating(x,y)) -> GlobalWindPatterns(x))"]}
{"id": "eqasc_train_13199", "nl": "Some touch receptors sense differences in temperature or pain.", "fol": "", "prediction": ["exists x.(TouchReceptor(x) & (SensesTemperatureDifference(x) | SensitsPainDifference(x)))"]}
{"id": "eqasc_train_13200", "nl": "Students locate different types of nerve receptors in their skin.", "fol": "", "prediction": ["all x y.((Student(x) & NerveReceptor(y)) -> LocatesInSkin(x,y))"]}
{"id": "eqasc_train_13201", "nl": "nerve receptors in the skin sense temperature and pain", "fol": "", "prediction": ["all x y.((NervousReceptor(x) & Skin(y)) -> (SensesTemperature(x) & SensesesPain(x)))"]}
{"id": "eqasc_train_13202", "nl": "Touch receptors are a type of mechanoreceptor.", "fol": "", "prediction": ["all x.(TouchReceptor(x) -> Mechanoreceptor(x))"]}
{"id": "eqasc_train_13203", "nl": "some mechanoreceptors can sense pain", "fol": "", "prediction": ["exists x.(Mechanoreceptor(x) & SensePain(x))"]}
{"id": "eqasc_train_13204", "nl": "some touch receptors sense differences in the amount of heat", "fol": "", "prediction": ["exists x.(TouchReceptor(x) & SenseDifferencesInHeat(x))"]}
{"id": "eqasc_train_13205", "nl": "some mechanoreceptors sense differences in temperature.", "fol": "", "prediction": ["exists x.(Mechanoreceptor(x) & SensitsTemperatureDifferences(x))"]}
{"id": "eqasc_train_13206", "nl": "Some touch receptors sense differences in heat or pain.", "fol": "", "prediction": ["exists x.(TouchReceptor(x) & (SensesHeat(x) | SenseSensesPain(x)))"]}
{"id": "eqasc_train_13207", "nl": "Merkel's discs are touch receptors.", "fol": "", "prediction": ["all x.(Disc(x) -> TouchReceptor(x))"]}
{"id": "eqasc_train_13208", "nl": "Merkel's discs sense differences in temperature or pain", "fol": "", "prediction": ["all x.(Disc(x) -> (SensesTemperatureDifference(x) | SenseSensesPainDifference(x)))"]}
{"id": "eqasc_train_13209", "nl": "If the skin is painful, seek medical attention.", "fol": "", "prediction": ["all x.((Skin(x) & Painful(x)) -> SeekMedicalAttention(x))"]}
{"id": "eqasc_train_13210", "nl": "If your skin hurts, your touch receptors will sense differences.", "fol": "", "prediction": ["all x.((SkinIsHas(x) & TouchReceptorsSenseDifferences(x)) -> IllHas(x))"]}
{"id": "eqasc_train_13211", "nl": "mechanoreceptors sense differences in temperature or pain", "fol": "", "prediction": ["all x.(Mechanoreceptor(x) -> (SensesDifferencesInTemperature(x) | SenseDifferencesInPain(x)))"]}
{"id": "eqasc_train_13212", "nl": "Touch receptors are free nerve endings or nerve endings that are surrounded by a capsule.", "fol": "", "prediction": ["all x.(TouchReceptor(x) -> (FreeNervousEnding(x) | FreeNervousEnding(x)) & SurroundedByCapsule(x)))"]}
{"id": "eqasc_train_13213", "nl": "some nerve endings sense differences in temperature", "fol": "", "prediction": ["exists x.(NervousEnding(x) & SensorsDifferencesInTemperature(x))"]}
{"id": "eqasc_train_13214", "nl": "Birds are endothermic tetrapod vertebrates.", "fol": "", "prediction": ["all x.(Bird(x) -> EndothermicTetrapodVertebrate(x))"]}
{"id": "eqasc_train_13215", "nl": "All birds have backbones.", "fol": "", "prediction": ["all x.(Bird(x) -> HasBackbone(x))"]}
{"id": "eqasc_train_13216", "nl": "Birds and mammals are endothermic.", "fol": "", "prediction": ["all x.((Bird(x) | Mammal(x)) -> Endothermic(x))"]}
{"id": "eqasc_train_13217", "nl": "mammals are endothermic", "fol": "", "prediction": ["all x.(Mammal(x) -> Endothermic(x))"]}
{"id": "eqasc_train_13218", "nl": "Legs define Tetrapods.", "fol": "", "prediction": ["all x.(Leg(x) -> Tetrapod(x))"]}
{"id": "eqasc_train_13219", "nl": "Birds are vertebrate endotherms with legs.", "fol": "", "prediction": ["all x.(Bird(x) -> (VertebrateEndotherm(x) & HasLegs(x)))"]}
{"id": "eqasc_train_13220", "nl": "Penguins are a type of birds.", "fol": "", "prediction": ["all x.(Penguin(x) -> Bird(x))"]}
{"id": "eqasc_train_13221", "nl": "penguins are endothermic tetrapod vertebrates", "fol": "", "prediction": ["all x.(Penguin(x) -> (EndothermicTetrapodVertebrate(x) & EndothermicTetrapodVertebrate(x)))"]}
{"id": "eqasc_train_13222", "nl": "All crows are birds.", "fol": "", "prediction": ["all x.(Crow(x) -> Bird(x))"]}
{"id": "eqasc_train_13223", "nl": "crows are endothermic tetrapod vertebrates", "fol": "", "prediction": ["all x.(Crow(x) -> (EndothermicTetrapodVertebrate(x) & EndothermicTetrapodVertebrate(x)))"]}
{"id": "eqasc_train_13224", "nl": "Endothermic tetrapod vertebrates is an animal with feathers. ", "fol": "", "prediction": ["all x.(EndothermicTetrapodVertebrates(x) -> HasFeathers(x))"]}
{"id": "eqasc_train_13225", "nl": "Flamingos are funny looking birds.", "fol": "", "prediction": ["all x.(Flamingo(x) -> FunnyLookingBird(x))"]}
{"id": "eqasc_train_13226", "nl": "Flamingos are funny looking endothermic tetrapod vertebrates.", "fol": "", "prediction": ["all x.(Flamingo(x) -> (FunnyLookingEndothermicTetrapodVertebrate(x) & Vertebrates(x)))"]}
{"id": "eqasc_train_13227", "nl": "Birds are endothermic vertebrates with legs.", "fol": "", "prediction": ["all x.(Bird(x) -> (EndothermicVertebrate(x) & HasLegs(x)))"]}
{"id": "eqasc_train_13228", "nl": "Some birds fly and some birds swim, but all birds have feathers.", "fol": "", "prediction": ["exists x.(Bird(x) & Fly(x) & exists y.(Bird(y) & Swim(y)) & all z.(Bird(z) -> HasFeathers(z)))"]}
{"id": "eqasc_train_13229", "nl": "Some aviary species fly and others swim but, all are endothermic tetrapod vertebrates.", "fol": "", "prediction": ["exists x.(AviarySpecies(x) & Fly(x) & Swim(x) & EndothermicTetrapodVertebrate(x))"]}
{"id": "eqasc_train_13230", "nl": "Birds are endothermic tetrapod animals with backbones. ", "fol": "", "prediction": ["all x.(Bird(x) -> (EndothermicTetrapod(x) & HasBackbone(x)))"]}
{"id": "eqasc_train_13231", "nl": "Hooded vultures are silent birds.", "fol": "", "prediction": ["all x.(HuntedVulture(x) -> SilentBird(x))"]}
{"id": "eqasc_train_13232", "nl": "hooded vultures are endothermic tetrapod vertebrates", "fol": "", "prediction": ["all x.(HuntedVulture(x) -> EndothermicTetrapodVertebrate(x))"]}
{"id": "eqasc_train_13233", "nl": "Animals in the class aves are endothermic tetrapod vertebrates.", "fol": "", "prediction": ["all x.((Animal(x) & ClassAves(x)) -> EndothermicTetrapodVertebrate(x))"]}
{"id": "eqasc_train_13234", "nl": "soil erosion means soil loss through wind", "fol": "", "prediction": ["all x.(SoilErosion(x) -> (SoilLossThroughWind(x) & Wind(x)))"]}
{"id": "eqasc_train_13235", "nl": "Wind is defined as moving air.", "fol": "", "prediction": ["all x.(Wind(x) -> MovingAir(x))"]}
{"id": "eqasc_train_13236", "nl": "soil erosion means soil loss though moving air", "fol": "", "prediction": ["all x.(SoilErosion(x) -> (SoilLoss(x) & MovesAir(x)))"]}
{"id": "eqasc_train_13237", "nl": "Soil Erosion Rain forests help to prevent soil erosion and water pollution .", "fol": "", "prediction": ["all x.(RainForest(x) -> (PreventsSoilErosion(x) & PreventsWaterPollution(x)))"]}
{"id": "eqasc_train_13238", "nl": "Rain forests reduce the amount of soil loss from wind.", "fol": "", "prediction": ["all x y.((RainForest(x) & Wind(y)) -> ReducesSoilLoss(x,y))"]}
{"id": "eqasc_train_13239", "nl": "soil loss through hurricanes is soil erosion", "fol": "", "prediction": ["all x y.((Hurricane(x) & SoilLoss(y)) -> SoilErosion(x,y))"]}
{"id": "eqasc_train_13240", "nl": "wind erodes soil", "fol": "", "prediction": ["all x y.((Wind(x) & Soil(y)) -> Erodes(x,y))"]}
{"id": "eqasc_train_13241", "nl": "Erosion also damages the thin soil.", "fol": "", "prediction": ["all x.(Erosion(x) -> DamagesThinSoil(x))"]}
{"id": "eqasc_train_13242", "nl": "Wind can cause damage to thin soil.", "fol": "", "prediction": ["all x y.((Wind(x) & ThinSoil(y)) -> CausesDamage(x,y))"]}
{"id": "eqasc_train_13243", "nl": "Erosion is a substantial contributor to deterioration of soil quality.", "fol": "", "prediction": ["all x.(Erosion(x) -> ContributesToDeteriorationOfSoilQuality(x))"]}
{"id": "eqasc_train_13244", "nl": "Wind can lead to a deterioration of soil quality", "fol": "", "prediction": ["all x y.((Wind(x) & SoilQuality(y)) -> Deterioration(x,y))"]}
{"id": "eqasc_train_13245", "nl": "soil loss through hurricanes means soil erosion", "fol": "", "prediction": ["all x y.((Hurricane(x) & SoilLoss(x)) -> SoilErosion(y))"]}
{"id": "eqasc_train_13246", "nl": "Soil erosion is one of the leading causes of water pollution in the United States.", "fol": "", "prediction": ["all x.(SoilErosion(x) -> LeadingCauseOfWaterPollution(x))"]}
{"id": "eqasc_train_13247", "nl": "Soil loss through wind is a leading cause of water pollution in the United States.", "fol": "", "prediction": ["all x.((SoilLossThroughWind(x) & WaterPollution(x)) -> LeadingCause(x,UnitedStates))"]}
{"id": "eqasc_train_13248", "nl": "Soil erosion is a serious problem in production agriculture.", "fol": "", "prediction": ["all x.(SoilErosion(x) -> SeriousProblemInProductionAgriculture(x))"]}
{"id": "eqasc_train_13249", "nl": "Wind can cause serious problems for production agriculture.", "fol": "", "prediction": ["all x.(Wind(x) -> CanCauseSeriousProductionAgricultureProblems(x))"]}
{"id": "eqasc_train_13250", "nl": "Plants have specialized reproductive organs.", "fol": "", "prediction": ["all x.(Plant(x) -> HasSpecializedReproductiveOrgans(x))"]}
{"id": "eqasc_train_13251", "nl": "Most people know that the Venus Flytrap is a carnivorous plant.", "fol": "", "prediction": ["all x.((VenusFlytrap(x) & CarnivorousPlant(x)) -> Knows(x))"]}
{"id": "eqasc_train_13252", "nl": "The Venus Flytrap has specialized reproductive organs.", "fol": "", "prediction": ["all x.(VenusFlytrap(x) -> HasSpecializedReproductiveOrgans(x))"]}
{"id": "eqasc_train_13253", "nl": "bamboo have specialized reproductive organs.", "fol": "", "prediction": ["all x.(Bamboo(x) -> HasSpecializedReproductiveOrgans(x))"]}
{"id": "eqasc_train_13254", "nl": "Plants have flowers for reproduction", "fol": "", "prediction": ["all x.(Plant(x) -> (HasFlowers(x) & ForReproduction(x)))"]}
{"id": "eqasc_train_13255", "nl": "Plants produce flowers for reproduction.", "fol": "", "prediction": ["all x.(Plant(x) -> ProducesFlowersForReproduction(x))"]}
{"id": "eqasc_train_13256", "nl": "Flowers are specialized reproductive organs", "fol": "", "prediction": ["all x.(Flower(x) -> SpecializedReproductiveOrgan(x))"]}
{"id": "eqasc_train_13257", "nl": "Tissues are organized into organs.", "fol": "", "prediction": ["all x.(Tissue(x) -> Organ(x))"]}
{"id": "eqasc_train_13258", "nl": "Plants have specialized reproductive tissues.", "fol": "", "prediction": ["all x.(Plant(x) -> HasSpecializedReproductiveTissues(x))"]}
{"id": "eqasc_train_13259", "nl": "daisies have specialized reproductive organs", "fol": "", "prediction": ["all x.(Daisy(x) -> (HasSpecializedReproductiveOrgans(x) & HasSpecializedReproductiveOrgans(x)))"]}
{"id": "eqasc_train_13260", "nl": "bushes have specialized reproductive organs", "fol": "", "prediction": ["all x.(Bush(x) -> HasSpecializedReproductiveOrgans(x))"]}
{"id": "eqasc_train_13261", "nl": "plants have specialized ways to create young", "fol": "", "prediction": ["all x.(Plant(x) -> (SpecializedRoutes(x) & CreatesYoung(x)))"]}
{"id": "eqasc_train_13262", "nl": "flowers are specialized organs", "fol": "", "prediction": ["all x.(Flower(x) -> SpecializedOrgan(x))"]}
{"id": "eqasc_train_13263", "nl": "Plant reproduction is similar to animal reproduction.", "fol": "", "prediction": ["all x y.((Plant(x) & Animal(y)) -> SimilarTo(x,y))"]}
{"id": "eqasc_train_13264", "nl": "Animals have specialized reproductive organs.", "fol": "", "prediction": ["all x.(Animal(x) -> HasSpecializedReproductiveOrgans(x))"]}
{"id": "eqasc_train_13265", "nl": "Holy basil and bush basil are related plants.", "fol": "", "prediction": ["(RelatedPlants(HolyBasil(HolyBasil) & RelatedPlant(BushBasil))"]}
{"id": "eqasc_train_13266", "nl": "Bush basil has specialized reproductive organs.", "fol": "", "prediction": ["all x.(BussBasil(x) -> HasSpecializedReproductiveOrgans(x))"]}
{"id": "eqasc_train_13267", "nl": "trees have specialized reproductive organs", "fol": "", "prediction": ["all x.(Tree(x) -> (HasSpecializedReproductiveOrgans(x) & HasReproductiveOrgans(x)))"]}
{"id": "eqasc_train_13268", "nl": "a light bulb is used for seeing in the dark", "fol": "", "prediction": ["all x y.((LightBulb(x) & DarkDark(y)) -> UsedForSayingIn(x,y))"]}
{"id": "eqasc_train_13269", "nl": "Incandescent light bulbs use a tungsten filament sealed inside a glass bulb.", "fol": "", "prediction": ["all x.(IncandescentLightBulb(x) -> (UsesTungstenFilm(x) & SealedInsideGlassBulb(x)))"]}
{"id": "eqasc_train_13270", "nl": "Tungsten filament sealed in a glass bulb is used for seeing in the dark.", "fol": "", "prediction": ["all x.((TungstenFilm(x) & SealedInGlassBulb(x)) -> UsedForSeeingInDark(x))"]}
{"id": "eqasc_train_13271", "nl": "Humans are unable to see clearly in the dark.", "fol": "", "prediction": ["all x.(Human(x) -> -SeesClearlyInDark(x))"]}
{"id": "eqasc_train_13272", "nl": "light bulbs help humans see", "fol": "", "prediction": ["all x y.((LightBulb(x) & Human(y)) -> HelpsSee(x,y))"]}
{"id": "eqasc_train_13273", "nl": "Heating a filament is helpful for seeing in the dark.", "fol": "", "prediction": ["all x.(HeatingFilm(x) -> HelpfulForSeeingInDark(x))"]}
{"id": "eqasc_train_13274", "nl": "Light is emitted by a light bulb.", "fol": "", "prediction": ["all x y.((Light(x) & LightBulb(y)) -> EmittedBy(x,y))"]}
{"id": "eqasc_train_13275", "nl": "light is required for seeing", "fol": "", "prediction": ["all x.(Light(x) -> RequiresForSeasing(x))"]}
{"id": "eqasc_train_13276", "nl": "After stumbling around in the dark tunnels of the basement, Marco finds the control room.", "fol": "", "prediction": ["all x.((StumblingInDarkTunnels(x) & Basement(x)) -> FindsControlRoom(x))"]}
{"id": "eqasc_train_13277", "nl": "Light bulbs are used to avoid stumbling around in basements.", "fol": "", "prediction": ["all x.(LightBulb(x) -> AvoidsStumblingInBasins(x))"]}
{"id": "eqasc_train_13278", "nl": "Electricity can run appliances and illuminate light bulbs.", "fol": "", "prediction": ["all x.(Electricity(x) -> (RunsAppliances(x) & IlluminatesLightBulbs(x)))"]}
{"id": "eqasc_train_13279", "nl": "Electricity can be used for seeing in the dark.", "fol": "", "prediction": ["all x.(Electricity(x) -> UsedForSeeingInDark(x))"]}
{"id": "eqasc_train_13280", "nl": "Light can be used for seeing in the dark", "fol": "", "prediction": ["all x y.((Light(x) & Dark(y)) -> CanBeUsedForSeeing(x,y))"]}
{"id": "eqasc_train_13281", "nl": "Evening had arrived quickly, and it was almost too dark for the old man to see where to step safely.", "fol": "", "prediction": ["all x.((Evening(x) & ArrivedQuickly(x) & AlmostTooDarkForOldManToSeeWhereToStepSafely(x)) -> ArrivedQuickly(x))"]}
{"id": "eqasc_train_13282", "nl": "a light bulb is used for seeing where to step safely.", "fol": "", "prediction": ["all x.(LightBulb(x) -> UsedForSeatingSafely(x))"]}
{"id": "eqasc_train_13283", "nl": "An electric light bulb is a light source.", "fol": "", "prediction": ["all x.(ElectricLightBulb(x) -> LightSource(x))"]}
{"id": "eqasc_train_13284", "nl": "A light source is used for seeing in the dark", "fol": "", "prediction": ["all x y.((LightSource(x) & Dark(y)) -> UsedForSeeing(x,y))"]}
{"id": "eqasc_train_13285", "nl": "Anyone who looks, eventually sees.", "fol": "", "prediction": ["all x.(Looks(x) -> Sees(x))"]}
{"id": "eqasc_train_13286", "nl": "A light bulb is used for looking in the dark.", "fol": "", "prediction": ["all x.(LightBulb(x) -> UsedForLookingInDark(x))"]}
{"id": "eqasc_train_13287", "nl": "Incandescent lights heat a metal filament that radiates light inside a glass bulb.", "fol": "", "prediction": ["all x y.((IncandescentLight(x) & MetalFilm(y)) -> HeatsAndResistsLightInsideGlassBulb(x,y))"]}
{"id": "eqasc_train_13288", "nl": "Incandescent lights heating a metal filament are used for seeing in the dark.", "fol": "", "prediction": ["all x y.((IncandescentLight(x) & MetalFilm(y) & Heating(x,y)) -> UsedForSeeingInDark(x))"]}
{"id": "eqasc_train_13289", "nl": "Electricity can be converted in to light using light bulbs, and even heat by using heating coils.", "fol": "", "prediction": ["all x y.((Electricity(x) & LightBulb(y)) -> (ConvertsTo(x,y) & Heats(x,y)))"]}
{"id": "eqasc_train_13290", "nl": "electricity is used to see in the dark", "fol": "", "prediction": ["all x y.((Electricity(x) & Dark(y)) -> UsedToSee(x,y))"]}
{"id": "eqasc_train_13291", "nl": "And in the winter the nights are long and dark.", "fol": "", "prediction": ["(all x.(Winter(x) -> LongNights(x)) & all y.(Winter(y) -> DarkNights(y)))"]}
{"id": "eqasc_train_13292", "nl": "a light bulb is used for seeing at night.", "fol": "", "prediction": ["all x.(LightBulb(x) -> UsedForSeenAtNight(x))"]}
{"id": "eqasc_train_13293", "nl": "Night or darkness represents spiritual darkness.", "fol": "", "prediction": ["all x.(Night(x) | Darkness(x)) -> SpiritualDarkness(x))"]}
{"id": "eqasc_train_13294", "nl": "a light bulb is used for seeing at night", "fol": "", "prediction": ["all x y.((LightBulb(x) & Night(y)) -> UsedForSeenAt(x,y))"]}
{"id": "eqasc_train_13295", "nl": "Emitted light is used for seeing in the dark.", "fol": "", "prediction": ["all x.(EmittedLight(x) -> UsedForSeeingInDark(x))"]}
{"id": "eqasc_train_13296", "nl": "Just as darkness is the absence of light.", "fol": "", "prediction": ["all x.(Darkness(x) -> AbsenceOfLight(x))"]}
{"id": "eqasc_train_13297", "nl": "a light bulb is used for seeing in the absence of light", "fol": "", "prediction": ["all x y.((LightBulb(x) & AbsenceOfLight(y)) -> UsedForSayingInAbsenceOfLight(x,y))"]}
{"id": "eqasc_train_13298", "nl": "changes in the pH of soil can cause plants to die", "fol": "", "prediction": ["all x y.((ChangeInPh(x) & Soil(y)) -> CanCausePlantsToDie(x,y))"]}
{"id": "eqasc_train_13299", "nl": "When plants die, they decay and leave minerals in the soil for future plant life.", "fol": "", "prediction": ["all x.((Plant(x) & Die(x)) -> (Decays(x) & LeavesMineralsInSoil(x)))"]}
{"id": "eqasc_train_13300", "nl": "changes in the pH of soil can cause plants to decay and leave minerals for future plants.", "fol": "", "prediction": ["all x y.((ChangeInPh(x) & Soil(y)) -> (CausesPlantDecay(x,y) & LeavesMineralsForFuturePlants(x,y)))"]}
{"id": "eqasc_train_13301", "nl": "you can keep plants alive by balancing the soil", "fol": "", "prediction": ["all x y.((Plant(x) & Soil(y) & BalancedSoil(x,y)) -> KeepsAlive(x,y))"]}
{"id": "eqasc_train_13302", "nl": "Sulfur lowers pH in soil.", "fol": "", "prediction": ["all x.(Sulfur(x) -> LowersPHInSoil(x))"]}
{"id": "eqasc_train_13303", "nl": "Sulfur can cause plants to die.", "fol": "", "prediction": ["all x.(Sulfur(x) -> CanCausePlantsToDie(x))"]}
{"id": "eqasc_train_13304", "nl": "changes in soil pH rob humans of nutrients", "fol": "", "prediction": ["all x y.((SoilPh(x) & SoilPh(y)) -> (ChangesInPh(x,y) & RobsHumansOfNutrients(x)))"]}
{"id": "eqasc_train_13305", "nl": "sulfur can cause plants to die", "fol": "", "prediction": ["all x y.((Sulfur(x) & Plant(y)) -> CanCausePlantDeath(x,y))"]}
{"id": "eqasc_train_13306", "nl": "compost balances soil", "fol": "", "prediction": ["all x y.((Compost(x) & Soil(y)) -> BalancesSoil(x,y))"]}
{"id": "eqasc_train_13307", "nl": "Adding sulfer to soil can cause plants to die.", "fol": "", "prediction": ["all x y.((AddsSulfer(x) & Soil(y)) -> CanCausePlantsToDie(x,y))"]}
{"id": "eqasc_train_13308", "nl": "Famines are extreme shortages of food that cause people to die of starvation.", "fol": "", "prediction": ["all x.(Famine(x) -> (ExtremeShortageOfFood(x) & CausesDeathOfStarvation(x)))"]}
{"id": "eqasc_train_13309", "nl": "Changes in pH of soil can cause extreme shortages of food.", "fol": "", "prediction": ["all x.((ChangeInPh(x) & Soil(x)) -> CausesExtremeShortagesOfFood(x))"]}
{"id": "eqasc_train_13310", "nl": "blowing air into a whistle causes air to vibrate inside the whistle", "fol": "", "prediction": ["all x y.((BlowingAirIntoWhistle(x) & Whistle(y)) -> CausesAirToVibrateInside(x,y))"]}
{"id": "eqasc_train_13311", "nl": "Sounds are caused by vibrations in the air.", "fol": "", "prediction": ["all x.(Sound(x) -> CausedByVibrationsInAir(x))"]}
{"id": "eqasc_train_13312", "nl": "Blowing into a whistle causes sound.", "fol": "", "prediction": ["all x.((BlowsIntoWhistle(x) & CausesSound(x)) -> BlowingIntoWhistle(x))"]}
{"id": "eqasc_train_13313", "nl": "blowing air into a whistle causes sound", "fol": "", "prediction": ["all x y.((BlowingAirIntoWhistle(x) & Whistle(y)) -> CausesSound(x,y))"]}
{"id": "eqasc_train_13314", "nl": "Soon the wind blows in fresh air.", "fol": "", "prediction": ["all x y.((Wind(x) & FreshAir(y)) -> BlowsIn(x,y))"]}
{"id": "eqasc_train_13315", "nl": "Wind going through a whistle would cause vibrations in the whistle.", "fol": "", "prediction": ["all x y.((Wind(x) & Whistle(y) & GoesThrough(x,y)) -> CausesVibrationsIn(x,y))"]}
{"id": "eqasc_train_13316", "nl": "If the persist, blow a whistle loudly into the mouthpiece.", "fol": "", "prediction": ["all x.((Persists(x) & BlotWhistle(x)) -> BlotMouthpiece(x))"]}
{"id": "eqasc_train_13317", "nl": "blowing air and causing it to vibrate makes a loud noise", "fol": "", "prediction": ["all x.((BlowsAir(x) & CausesVibration(x)) -> LoudNoise(x))"]}
{"id": "eqasc_train_13318", "nl": "Pipe organ Vibrating columns of air inside the pipes are the sound source.", "fol": "", "prediction": ["all x.(PipeOrgan(x) -> (VibratingColumnsOfAirInsidePipes(x) & SoundSource(x)))"]}
{"id": "eqasc_train_13319", "nl": "blowing air into a whistle causes a sound source", "fol": "", "prediction": ["all x y.((BlowingAirIntoWhistle(x) & Whistle(y)) -> CausesSoundSource(x,y))"]}
{"id": "eqasc_train_13320", "nl": "Referee's whistle blows.", "fol": "", "prediction": ["all x.(RefereesWhistleBlows(x) -> RefereesWhistle(x))"]}
{"id": "eqasc_train_13321", "nl": "referees can blow air", "fol": "", "prediction": ["all x y.((Referee(x) & Air(y)) -> CanBlow(x,y))"]}
{"id": "eqasc_train_13322", "nl": "When an object moves or vibrates, the air molecules around the object also vibrate.", "fol": "", "prediction": ["all x y.((Object(x) & MovesOrVibrates(x)) -> AirMoleculesAround(y,x))"]}
{"id": "eqasc_train_13323", "nl": "Blowing air into a whistle causes air to move inside the whistle", "fol": "", "prediction": ["all x y z.((BlowsAirIntoWhistle(x) & Whistle(y) & AirMovesInside(z)) -> CausesInside(x,y,z))"]}
{"id": "eqasc_train_13324", "nl": "blowing air into a whistle creates sounds", "fol": "", "prediction": ["all x y.((BlowingAirIntoWhistle(x) & Whistle(y)) -> CreatesSounds(x,y))"]}
{"id": "eqasc_train_13325", "nl": "All sounds begin with vibrations.", "fol": "", "prediction": ["all x.(Sound(x) -> Vibrations(x))"]}
{"id": "eqasc_train_13326", "nl": "whistles use air to make sound", "fol": "", "prediction": ["all x.(Whistle(x) -> (UsesAir(x) & MakesSound(x)))"]}
{"id": "eqasc_train_13327", "nl": "An ocarina is a multiple-tone whistle.", "fol": "", "prediction": ["all x.(Ocarina(x) -> MultipleToneWhistle(x))"]}
{"id": "eqasc_train_13328", "nl": "Blowing air into an ocarina causes air to vibrate inside the ocarina.", "fol": "", "prediction": ["all x y.((Ocarina(x) & Ocarina(y)) -> BlowingAirInto(x,y))"]}
{"id": "eqasc_train_13329", "nl": "Air, too, contains oxygen.", "fol": "", "prediction": ["all x.(Air(x) -> ContainsOxygen(x))"]}
{"id": "eqasc_train_13330", "nl": "Blowing oxygen into a whistle causes oxygen to vibrate inside the whistle.", "fol": "", "prediction": ["all x y.((BlowsOxygenIntoWhistle(x) & Whistle(y)) -> CausesOxygenToVibrateInside(x,y))"]}
{"id": "eqasc_train_13331", "nl": "Chromosomes are the form of the genetic material of a cell during cell division.", "fol": "", "prediction": ["all x y.((Chromosome(x) & Cell(y)) -> (FormOfGeneticMaterial(x,y) & CellDivision(y)))"]}
{"id": "eqasc_train_13332", "nl": "DNA is the genetic material in the cell, and is found in the nucleus in the chromosomes .", "fol": "", "prediction": ["all x y z.((DNA(x) & Cell(y) & Nucleus(z)) -> (GeneticMaterial(x,y) & FoundIn(x,z)))"]}
{"id": "eqasc_train_13333", "nl": "DNA is part of our genetic material", "fol": "", "prediction": ["all x.(DNA(x) -> PartOfGeneticMaterial(x))"]}
{"id": "eqasc_train_13334", "nl": "chromosomes are the form of the genetic material of a cell during mitosis", "fol": "", "prediction": ["all x y.((Chromosome(x) & Cell(y) & Mitosis(y)) -> GeneticMaterial(x,y))"]}
{"id": "eqasc_train_13335", "nl": "Chromosomes are the form of the genetic material during mitosis", "fol": "", "prediction": ["all x y.((Chromosome(x) & Mitosis(y)) -> GeneticMaterial(x,y))"]}
{"id": "eqasc_train_13336", "nl": "Chromosomes are the form of the genetic material of a cell during mitosis.", "fol": "", "prediction": ["all x y.((Chromosome(x) & Cell(y) & Mitosis(y)) -> GeneticMaterial(x,y))"]}
{"id": "eqasc_train_13337", "nl": "chromosomes are the form of genetic material of a cell during mitosis", "fol": "", "prediction": ["all x y.((Chromosome(x) & Cell(y) & Mitosis(y)) -> GeneticMaterial(x,y))"]}
{"id": "eqasc_train_13338", "nl": "Microtubules form part of the mitotic spindle that moves the chromosomes during cell division.", "fol": "", "prediction": ["all x.(Microtubule(x) -> (FormsPartOfMitoticSpindle(x) & MovesChromosomes(x)))"]}
{"id": "eqasc_train_13339", "nl": "Microtubules move the genetic material of a cell during cell division.", "fol": "", "prediction": ["all x y.((Microtubule(x) & Cell(y)) -> MovesGeneticMaterial(x,y))"]}
{"id": "eqasc_train_13340", "nl": "DNA condenses to form the genetic material of a cell during cell division", "fol": "", "prediction": ["all x y.((DNACondenses(x) & Cell(y) & CellDivision(y)) -> FormsGeneticMaterial(x,y))"]}
{"id": "eqasc_train_13341", "nl": "Chromosomes are the form of the genetic material of a cell during mitosis", "fol": "", "prediction": ["all x y.((Chromosome(x) & Cell(y) & Mitosis(y)) -> GeneticMaterial(x,y))"]}
{"id": "eqasc_train_13342", "nl": "freezing causes a solid to form", "fol": "", "prediction": ["all x y.((Freezing(x) & Solid(y)) -> CausesToForm(x,y))"]}
{"id": "eqasc_train_13343", "nl": "Then liquid freezes to a solid.", "fol": "", "prediction": ["all x.(LiquidFreezesToSolid(x))"]}
{"id": "eqasc_train_13344", "nl": "liquid turns to solid", "fol": "", "prediction": ["all x y.((Liquid(x) & Solid(y)) -> TurnsTo(x,y))"]}
{"id": "eqasc_train_13345", "nl": "Freezing is a physical change.", "fol": "", "prediction": ["all x.(Freezing(x) -> PhysicalChange(x))"]}
{"id": "eqasc_train_13346", "nl": "Physical changes cause solids to form.", "fol": "", "prediction": ["all x.(PhysicalChange(x) -> CausesSolidFormation(x))"]}
{"id": "eqasc_train_13347", "nl": "Freezing causes ice to form", "fol": "", "prediction": ["all x y.((Freezing(x) & Ice(y)) -> CausesFormation(x,y))"]}
{"id": "eqasc_train_13348", "nl": "Icebergs are nothing more than solid water.", "fol": "", "prediction": ["all x.(Iceberg(x) -> SolidWater(x))"]}
{"id": "eqasc_train_13349", "nl": "Icebergs are freezing cold.", "fol": "", "prediction": ["all x.(Iceberg(x) -> FreezingCold(x))"]}
{"id": "eqasc_train_13350", "nl": "Lower temperature thresholds are at freezing.", "fol": "", "prediction": ["all x.(LowerTemperatureThreshold(x) -> Freezing(x))"]}
{"id": "eqasc_train_13351", "nl": "lower temperature thresholds causes a solid to form", "fol": "", "prediction": ["all x y.((LowerTemperatureThreshold(x) & Solid(y)) -> CausesToForm(x,y))"]}
{"id": "eqasc_train_13352", "nl": "Ice, on the other hand, is a solid.", "fol": "", "prediction": ["(Solid(Ice) & Solid(Ice))"]}
{"id": "eqasc_train_13353", "nl": "freezing causes ice to form", "fol": "", "prediction": ["all x y.((Freezing(x) & Ice(y)) -> CausesFormation(x,y))"]}
{"id": "eqasc_train_13354", "nl": "When water molecules inside the cell freeze, they occupy a larger space.", "fol": "", "prediction": ["all x.((WaterMolecules(x) & InsideCellFreeze(x)) -> OccupyLargerSpace(x))"]}
{"id": "eqasc_train_13355", "nl": "When water molecules begin to occupy a larger space, they begin to solidify. ", "fol": "", "prediction": ["all x.((WaterMolecule(x) & OccupyLargerSpace(x)) -> Solidify(x))"]}
{"id": "eqasc_train_13356", "nl": "freezing water causes ice to form", "fol": "", "prediction": ["all x y.((FreezingWater(x) & Ice(y)) -> CausesToForm(x,y))"]}
{"id": "eqasc_train_13357", "nl": "Water freezes at 32 degrees.", "fol": "", "prediction": ["all x.(Water(x) -> FreezesAt32Degrees(x))"]}
{"id": "eqasc_train_13358", "nl": "When water's temperature drops to 32 degrees or below, it forms a solid.", "fol": "", "prediction": ["all x.((WaterTemperature(x) & DropsTo32Degrees(x)) -> FormsSolid(x))"]}
{"id": "eqasc_train_13359", "nl": "Freezing causes ice to form from water.", "fol": "", "prediction": ["all x y.((Freezing(x) & Water(y)) -> FormsIceFrom(x,y))"]}
{"id": "eqasc_train_13360", "nl": "threatening behavior causes a fight-or-flight response in animals", "fol": "", "prediction": ["all x.((TornantBehavior(x) & Animal(y)) -> CausesFightOrFlightResponse(x,y))"]}
{"id": "eqasc_train_13361", "nl": "Stress triggers the fight or flight response within the body.", "fol": "", "prediction": ["all x.(Stress(x) -> (TriggersFightResponse(x) | TriggersFlightResponse(x)))"]}
{"id": "eqasc_train_13362", "nl": "Threatening behavior triggers stress within animals", "fol": "", "prediction": ["all x y.((TorningBehavior(x) & Animal(y)) -> TriggersStress(x,y))"]}
{"id": "eqasc_train_13363", "nl": "Basic survival- fight or flight.", "fol": "", "prediction": ["all x.(BasicSurvival(x) -> (Fight(x) | Flight(x)))"]}
{"id": "eqasc_train_13364", "nl": "threatening behavior causes a basic survival response in animals", "fol": "", "prediction": ["all x y.((TornantBehavior(x) & Animal(y)) -> CausesBasicSurvivalResponse(x,y))"]}
{"id": "eqasc_train_13365", "nl": "Fighting can lead to brawls and significant injury.", "fol": "", "prediction": ["all x.(Fighting(x) -> (LeadsToBrawls(x) & SignificantInjury(x)))"]}
{"id": "eqasc_train_13366", "nl": "threatening behavior can cause injury", "fol": "", "prediction": ["all x.(TorningBehavior(x) -> CausesInjury(x))"]}
{"id": "eqasc_train_13367", "nl": "Any disaster that threatens humans, threatens animals as well.", "fol": "", "prediction": ["all x.((Disaster(x) & ThreatensHumans(x)) -> ThreatensAnimals(x))"]}
{"id": "eqasc_train_13368", "nl": "fight-or-flight response happens in humans and animals  ", "fol": "", "prediction": ["all x y.((Human(x) | Animal(y)) -> (FightOrFlightResponse(x,y)))"]}
{"id": "eqasc_train_13369", "nl": "True False Fight or flight are extreme responses to stress.", "fol": "", "prediction": ["all x.((TrueFalseFight(x) | Flight(x)) -> ExtremeResponseToStress(x))"]}
{"id": "eqasc_train_13370", "nl": "threatening behavior causes stress in animals", "fol": "", "prediction": ["all x y.((TorningBehavior(x) & Animal(y)) -> CausesStress(x,y))"]}
{"id": "eqasc_train_13371", "nl": "Fear also causes adrenaline to surge, which is part of the fight or flight response.", "fol": "", "prediction": ["all x.(Fear(x) -> (CausesAdrenalinToSurge(x) & PartOfFightOrFlightResponse(x)))"]}
{"id": "eqasc_train_13372", "nl": "threatening behavior causes adrenaline to surge in animals", "fol": "", "prediction": ["all x y.((TorningBehavior(x) & Animal(y)) -> CausesAdrenalineSurge(x,y))"]}
{"id": "eqasc_train_13373", "nl": "Different behavior patterns are used by a threatened rabbit.", "fol": "", "prediction": ["all x y.((Rabbit(x) & Rabbit(y)) -> Threatened(x,y))"]}
{"id": "eqasc_train_13374", "nl": "Different behavior patterns cause a fight-or-flight response in animals", "fol": "", "prediction": ["all x y.((BehaviorPattern(x) & Animal(y)) -> CausesFightOrFlightResponse(x,y))"]}
{"id": "eqasc_train_13375", "nl": "Adrenaline is for emergency use only in a fight and flight situation.", "fol": "", "prediction": ["all x.(Adrenaline(x) -> (ForEmergencyUse(x) & -ForFightAndFlight(x)))"]}
{"id": "eqasc_train_13376", "nl": "adrenaline is a response to threats", "fol": "", "prediction": ["all x y.((Adrenaline(x) & Threat(y)) -> ResponseTo(x,y))"]}
{"id": "eqasc_train_13377", "nl": "Behavior modification involves unlearning a behavior or action.", "fol": "", "prediction": ["all x.(BehaviorModification(x) -> UnlearningBehaviorOrAction(x))"]}
{"id": "eqasc_train_13378", "nl": "Threatening actions causes a fight or flight response in animals.", "fol": "", "prediction": ["all x.(TorningAction(x) -> (CausesFight(x) | CausesFlightResponse(x)))"]}
{"id": "eqasc_train_13379", "nl": "Hairs stand on end, the heart races and fight or flight hormones flood the body.", "fol": "", "prediction": ["all x y.((Hair(x) & Heart(y)) -> (StandsOnEnd(x) & Races(y) & (Fight(y) | FlightHormonesFlood(y))))"]}
{"id": "eqasc_train_13380", "nl": "threatening behavior causes the heart to race and hormones to flood the body", "fol": "", "prediction": ["all x y z.((ThreateningBehavior(x) & Heart(y) & Hormones(z)) -> (CausesRace(y,x) & FloodsBody(z,y)))"]}
{"id": "eqasc_train_13381", "nl": "All animals, including fish, are in the Animalia kingdom.", "fol": "", "prediction": ["all x.(Animal(x) -> AnimaliaKingdom(x))"]}
{"id": "eqasc_train_13382", "nl": "Threatening behavior causes a fight-or-flight response in those in the Animalia kingdom", "fol": "", "prediction": ["all x.(TorningBehavior(x) -> (CausesFightOrFlightResponse(x) & AnimaliaKingdom(x)))"]}
{"id": "eqasc_train_13383", "nl": "threatening behavior causes a fight-or-flight response in goats", "fol": "", "prediction": ["all x.((ThreateningBehavior(x) & Goat(y)) -> CausesFightOrFlightResponse(x,y))"]}
{"id": "eqasc_train_13384", "nl": "Violence threatens everyone.", "fol": "", "prediction": ["all x.(Violence(x) -> ThreatensEveryone(x))"]}
{"id": "eqasc_train_13385", "nl": "violence causes fight-or-flight response", "fol": "", "prediction": ["all x.(Violence(x) -> (CausesFightOrFlightResponse(x)))"]}
{"id": "eqasc_train_13386", "nl": "Dogs are highly social animals.", "fol": "", "prediction": ["all x.(Dog(x) -> HighlySocialAnimal(x))"]}
{"id": "eqasc_train_13387", "nl": "threatening behavior causes a fight-or-flight response in dogs", "fol": "", "prediction": ["all x.((TornantBehavior(x) & Dog(y)) -> CausesFightOrFlightResponse(x,y))"]}
{"id": "eqasc_train_13388", "nl": "If a pony feels threatened it can respond with aggressive behavior.", "fol": "", "prediction": ["all x.((Pony(x) & FeelsThreatened(x)) -> CanRespondWithAggressiveBehavior(x))"]}
{"id": "eqasc_train_13389", "nl": "aggressive behavior causes fight-or-flight responses.", "fol": "", "prediction": ["all x.(AggressiveBehavior(x) -> CausesFightOrFlightResponses(x))"]}
{"id": "eqasc_train_13390", "nl": "threatening behavior causes adrenaline to surge", "fol": "", "prediction": ["all x.((ThreateningBehavior(x) & CausesAdrenalineToSurge(x)) -> CausesAdrenalineToSurge(x))"]}
{"id": "eqasc_train_13391", "nl": "if food is not immediately used by the body for energy then that food will be stored for future use", "fol": "", "prediction": ["all x.((Food(x) & -UsedImmediatelyForEnergy(x)) -> StoredForFutureUse(x))"]}
{"id": "eqasc_train_13392", "nl": "Body fat is stored energy.", "fol": "", "prediction": ["all x.(BodyFat(x) -> StoredEnergy(x))"]}
{"id": "eqasc_train_13393", "nl": "body fat is unused energy", "fol": "", "prediction": ["all x.(BodyFat(x) -> UnusedEnergy(x))"]}
{"id": "eqasc_train_13394", "nl": "Food is often stored in the nest for use when the supply is short.", "fol": "", "prediction": ["all x y.((Food(x) & Nest(y) & ShortSupply(y)) -> StoredIn(x,y))"]}
{"id": "eqasc_train_13395", "nl": "nests store food that is unused", "fol": "", "prediction": ["all x y.((Nest(x) & Food(y) & -Used(y)) -> Stores(x,y))"]}
{"id": "eqasc_train_13396", "nl": "Storage is in body fat.", "fol": "", "prediction": ["all x.(Storage(x) -> BodyFat(x))"]}
{"id": "eqasc_train_13397", "nl": "if food is not immediately used for energy then that food will be converted into fat", "fol": "", "prediction": ["all x.((Food(x) & -UsedForEnergy(x)) -> ConvertedIntoFat(x))"]}
{"id": "eqasc_train_13398", "nl": "Excess food is stored in the body as fat.", "fol": "", "prediction": ["all x.(ExcessFood(x) -> StoredInBodyAsFat(x))"]}
{"id": "eqasc_train_13399", "nl": "if food is not immediately used by the body for energy then it becomes fat", "fol": "", "prediction": ["all x.((Food(x) & -UsedImmediatelyForEnergy(x)) -> Fat(x))"]}
{"id": "eqasc_train_13400", "nl": "Dietary fats are the fats found in foods.", "fol": "", "prediction": ["all x.(DietaryFat(x) -> FatsInFood(x))"]}
{"id": "eqasc_train_13401", "nl": "When fats are not immediately used by the body for energy, the fats are stored for future use.", "fol": "", "prediction": ["all x.((Fat(x) & -UsedForEnergy(x)) -> StoredForFutureUse(x))"]}
{"id": "eqasc_train_13402", "nl": "Pottery was used for storage of water and food.", "fol": "", "prediction": ["all x.(Pottery(x) -> (StoredWater(x) & StoredFood(x)))"]}
{"id": "eqasc_train_13403", "nl": "If food is not eaten immediately for energy, then food can be stored in pottery.", "fol": "", "prediction": ["all x.((Food(x) & -EatenImmediatelyForEnergy(x)) -> StoredInPottery(x))"]}
{"id": "eqasc_train_13404", "nl": "Calories are the energy stored in food.", "fol": "", "prediction": ["all x.(Calories(x) -> EnergyStoredInFood(x))"]}
{"id": "eqasc_train_13405", "nl": "The body stores calories for future use", "fol": "", "prediction": ["all x y.((Body(x) & Calories(y)) -> StoresForFutureUse(x,y))"]}
{"id": "eqasc_train_13406", "nl": "Foods high in carbohydrates are used mostly for energy.", "fol": "", "prediction": ["all x.((Food(x) & HighInCarbohydrates(x)) -> UsedForEnergy(x))"]}
{"id": "eqasc_train_13407", "nl": "Carbohydrates that aren't used in the body will be stored", "fol": "", "prediction": ["all x.((Carbohydrate(x) & -UsedInBody(x)) -> StoredInBody(x))"]}
{"id": "eqasc_train_13408", "nl": "If food is not immediately used in the body for heat then that food is stored in the body for future use.", "fol": "", "prediction": ["all x.((Food(x) & -UsedInBodyForHeat(x)) -> StoredInBodyForFutureUse(x))"]}
{"id": "eqasc_train_13409", "nl": "If steak is not immediately used by the body for energy then it will be stored for future use", "fol": "", "prediction": ["all x.((Steak(x) & -UsedImmediatelyForEnergy(x)) -> StoredForFutureUse(x))"]}
{"id": "eqasc_train_13410", "nl": "Minerals are chemical elements that are essential for body processes.", "fol": "", "prediction": ["all x.(Mineral(x) -> (ChemicalElement(x) & EssentialForBodyProcesses(x)))"]}
{"id": "eqasc_train_13411", "nl": "Copper is an essential mineral.", "fol": "", "prediction": ["all x.(Cuircon(x) -> EssentialMineral(x))"]}
{"id": "eqasc_train_13412", "nl": "Copper is a chemical element that is essential for body processes", "fol": "", "prediction": ["all x.(Cuircon(x) -> (ChemicalElement(x) & EssentialForBodyProcesses(x)))"]}
{"id": "eqasc_train_13413", "nl": "Minerals are substances found in soil.", "fol": "", "prediction": ["all x.(Mineral(x) -> FoundInSoil(x))"]}
{"id": "eqasc_train_13414", "nl": "substances found in soil are chemical elements that are essential for body processes", "fol": "", "prediction": ["all x y.((Substance(x) & FoundInSoil(x)) -> (ChemicalElement(x) & EssentialForBodyProcesses(y)))"]}
{"id": "eqasc_train_13415", "nl": "Eggs are loaded with vitamins and minerals.", "fol": "", "prediction": ["all x.(Egg(x) -> (LoadedWithVitamins(x) & LoadedWithMinerals(x)))"]}
{"id": "eqasc_train_13416", "nl": "eggs contain chemical elements that are essential for body processes", "fol": "", "prediction": ["all x.(Egg(x) -> (ContainsChemicalElements(x) & EssentialForBodyProcesses(x)))"]}
{"id": "eqasc_train_13417", "nl": "inorganic substances are essential for body processes", "fol": "", "prediction": ["all x.(InorganicSubstance(x) -> EssentialForBodyProcesses(x))"]}
{"id": "eqasc_train_13418", "nl": "Water contains dissolved solids, all kinds of minerals.", "fol": "", "prediction": ["all x.(Water(x) -> (ContainsDissolvedSolids(x) & ContainsMinerals(x)))"]}
{"id": "eqasc_train_13419", "nl": "Something dissolved in water are chemical elements that are essential for body processes", "fol": "", "prediction": ["all x.((DissolvedInWater(x) & ChemicalElement(x)) -> EssentialForBodyProcesses(x))"]}
{"id": "eqasc_train_13420", "nl": "Iron deficiency Anemia is associated with low levels of the mineral iron in the body.", "fol": "", "prediction": ["all x.(IronDeficiency(x) -> (LowLevelsOfMineralIron(x) & InBody(x)))"]}
{"id": "eqasc_train_13421", "nl": "iron is a chemical element that is essential for body processes", "fol": "", "prediction": ["all x.(Iron(x) -> (ChemicalElement(x) & EssentialForBodyProcesses(x)))"]}
{"id": "eqasc_train_13422", "nl": "Children's bodies are in a developing process.", "fol": "", "prediction": ["all x.(Child(x) -> DevelopmentalProcess(x))"]}
{"id": "eqasc_train_13423", "nl": "Minerals are necessary for children's growths.", "fol": "", "prediction": ["all x.(Mineral(x) -> NecessaryForChildrenGrowth(x))"]}
{"id": "eqasc_train_13424", "nl": "Potassium is a mineral, like calcium .", "fol": "", "prediction": ["all x.(Potassium(x) -> (Mineral(x) & Calcium(x)))"]}
{"id": "eqasc_train_13425", "nl": "potassium is essential for body processes", "fol": "", "prediction": ["all x.((Potassium(x) & BodyProcesses(x)) -> EssentialFor(x,y))"]}
{"id": "eqasc_train_13426", "nl": "Minerals are essential to the body's function.", "fol": "", "prediction": ["all x.(Mineral(x) -> EssentialToBodyFunction(x))"]}
{"id": "eqasc_train_13427", "nl": "minerals are needed by body processes", "fol": "", "prediction": ["all x y.((Mineral(x) & BodyProcess(y)) -> NeededBy(x,y))"]}
{"id": "eqasc_train_13428", "nl": "Mineral salts Of the mineral salts, iodine is of great significance.", "fol": "", "prediction": ["all x.(MineralSalt(x) -> Iodine(x))"]}
{"id": "eqasc_train_13429", "nl": "salts are are chemical elements that are essential for body processes", "fol": "", "prediction": ["all x.(Salt(x) -> (ChemicalElement(x) & EssentialForBodyProcesses(x)))"]}
{"id": "eqasc_train_13430", "nl": "Potassium is a trace mineral essential for growth and good health.", "fol": "", "prediction": ["all x.(Potassium(x) -> (TraceMineral(x) & EssentialForGrowth(x) & EssentialForGoodHealth(x)))"]}
{"id": "eqasc_train_13431", "nl": "Potassium is a chemical element essential for good health.", "fol": "", "prediction": ["all x.(Potassium(x) -> EssentialForGoodHealth(x))"]}
{"id": "eqasc_train_13432", "nl": "Pregnancy is a normal body process.", "fol": "", "prediction": ["all x.(Pregnancy(x) -> NormalBodyProcess(x))"]}
{"id": "eqasc_train_13433", "nl": "minerals are chemical elements that are essential for pregnancy", "fol": "", "prediction": ["all x.(Minerals(x) -> (ChemicalElements(x) & EssentialForPregnancy(x)))"]}
{"id": "eqasc_train_13434", "nl": "a telephone is used for communication by humans over long distances", "fol": "", "prediction": ["all x y z.((Telephone(x) & Human(y) & LongDistance(z)) -> UsedForCommunication(x,y,z))"]}
{"id": "eqasc_train_13435", "nl": "Communicating is as much about listening as it is about talking.", "fol": "", "prediction": ["all x.(Communicating(x) -> (AreYouHearing(x) | AreYouTalking(x)))"]}
{"id": "eqasc_train_13436", "nl": "A telephone is used by people to listen and talk over long distances.", "fol": "", "prediction": ["all x.(Telephone(x) -> ListenAndTalk(x))"]}
{"id": "eqasc_train_13437", "nl": "Telephone lines conduct electricity.", "fol": "", "prediction": ["all x.(TelephoneLine(x) -> ConductsElectricity(x))"]}
{"id": "eqasc_train_13438", "nl": "Electricity is used for communication by humans over long distances. ", "fol": "", "prediction": ["all x y.((Electricity(x) & Human(y)) -> UsedForCommunication(x,y))"]}
{"id": "eqasc_train_13439", "nl": "Effective communication requires skills in conveying and receiving messages.", "fol": "", "prediction": ["all x.(EffectiveCommunication(x) -> (ConveysMessages(x) & ReceivesMessages(x)))"]}
{"id": "eqasc_train_13440", "nl": "a telephone is used for conveying and receiving messages by humans over long distances", "fol": "", "prediction": ["all x y z.((Telephone(x) & Human(y) & LongDistance(z)) -> ConveysAndReceivesMessages(x,y,z))"]}
{"id": "eqasc_train_13441", "nl": "Communication is essential if a relationship is to last the distance.", "fol": "", "prediction": ["all x.((Relationship(x) & LastDistance(x)) -> CommunicationEssential(x))"]}
{"id": "eqasc_train_13442", "nl": "telephones allow relationships to last distances", "fol": "", "prediction": ["all x.(Telephone(x) -> AllowsRelationshipsToLeastDistances(x))"]}
{"id": "eqasc_train_13443", "nl": "Open water races of 5 to 25 kilometers are offered to long distance swimmers.", "fol": "", "prediction": ["all x.((OpenWaterRace(x) & LongDistanceSwimmer(x)) -> Offers(x,5-25Kilometers))"]}
{"id": "eqasc_train_13444", "nl": "A telephone is used for communication by humans over 25 kilometers or more.", "fol": "", "prediction": ["all x.(Telephone(x) -> UsedForCommunication(x,25))"]}
{"id": "eqasc_train_13445", "nl": "Communication is about the sharing of ideas, thoughts and points of views.", "fol": "", "prediction": ["all x.(Communication(x) -> (SharesIdeas(x) & SharesThoughts(x) & SharesPointsOfViews(x)))"]}
{"id": "eqasc_train_13446", "nl": "Telephones are used to share ideas, thoughts and views by humans over long distances.", "fol": "", "prediction": ["all x y.((Telephone(x) & Human(y)) -> (SharesIdeas(x,y) & SharesThoughts(x,y) & SharesViews(x,y)))"]}
{"id": "eqasc_train_13447", "nl": "Nokia, the world's largest mobile telephone manufacturer, wants software engineers.", "fol": "", "prediction": ["all x.((MobileTelephoneManufacturer(x) & Nokia(x)) -> WantsSoftwareEngineers(x))"]}
{"id": "eqasc_train_13448", "nl": "nokia is used for communication by humans over long distances", "fol": "", "prediction": ["all x y.((Nokia(x) & Human(y)) -> UsedForCommunication(x,y))"]}
{"id": "eqasc_train_13449", "nl": "Long-distance telephone calls can also use radio waves or microwaves.", "fol": "", "prediction": ["all x.((TelephoneCall(x) & LongDistance(x)) -> (UsesRadioWaves(x) | UsesMicrowaves(x)))"]}
{"id": "eqasc_train_13450", "nl": "Telephones use radio waves for communication", "fol": "", "prediction": ["all x.(Telephone(x) -> UsesRadioWavesForCommunication(x))"]}
{"id": "eqasc_train_13451", "nl": "Adult worms go through a major transformation to develop reproductive organs.", "fol": "", "prediction": ["all x.(AdultWworm(x) -> (GoesThroughMajorTransformation(x) & DevelopsReproductiveOrgans(x)))"]}
{"id": "eqasc_train_13452", "nl": "adult worms go through a major transformation to create young", "fol": "", "prediction": ["all x y.((AdultWworm(x) & Adult(y)) -> (GoesThroughMajorTransformation(x,y) & CreatesYoung(y)))"]}
{"id": "eqasc_train_13453", "nl": "An enlarged cummerbund-like band near the worm's head holds the reproductive organs.", "fol": "", "prediction": ["all x.((EnlargedCummerbundLikeBand(x) & NearHead(x)) -> HoldsReproductiveOrgans(x))"]}
{"id": "eqasc_train_13454", "nl": "An enlarged cummerbund-like band goes through a major transformation in worms", "fol": "", "prediction": ["all x y.((EnlargedCummerbundLikeBand(x) & Worm(y)) -> MajorTransformationIn(x,y))"]}
{"id": "eqasc_train_13455", "nl": "Marine annelid worms have larvae called trochophores that swim about by means of cilia.", "fol": "", "prediction": ["all x.(MarineAnnelidWworm(x) -> (HasLarvae(x,trochophores) & SwimsAboutByCilia(x)))"]}
{"id": "eqasc_train_13456", "nl": "Marine annelids go through a major transformation to be able to make larvae called trochophores that swim about by means of cilia.", "fol": "", "prediction": ["all x.(MarineAnnelid(x) -> (MainTransformation(x) & MakesTrochophores(x) & SwimsWithCilia(x)))"]}
{"id": "eqasc_train_13457", "nl": "Marine flatworms belong to a major group of worms called the Platyhelminthes.", "fol": "", "prediction": ["all x.(MarineFlatworm(x) -> (BelongsToMajorGroupOfWings(x) & Platyhelminthes(x)))"]}
{"id": "eqasc_train_13458", "nl": "Adult platyhelminthes go through a major transformation to develop reproductive organs.", "fol": "", "prediction": ["all x.(AdultPlatyhelminthe(x) -> (GoesThroughMajorTransformation(x) & DevelopsReproductiveOrgans(x)))"]}
{"id": "eqasc_train_13459", "nl": "Mature adult worms are 5cm long.", "fol": "", "prediction": ["all x.(MatureAdultWworm(x) -> 5cmLong(x))"]}
{"id": "eqasc_train_13460", "nl": "Mature worms go through a major transformation to develop reproductive organs", "fol": "", "prediction": ["all x.((MatureWworm(x) & MajorTransformation(x) & DevelopReproductiveOrgans(x)) -> MatureWworm(x))"]}
{"id": "eqasc_train_13461", "nl": "Genital injury can affect the reproductive organs as well as the bladder and urethra.", "fol": "", "prediction": ["all x.(GenitalInjury(x) -> (AffectsReproductiveOrgans(x) & AffectsB bladder(x) & AffectsUterus(x)))"]}
{"id": "eqasc_train_13462", "nl": "adult worms go through a major transformation to develop genitals", "fol": "", "prediction": ["all x.((AdultWworm(x) & MajorTransformation(x) & DevelopsGenitals(x)) -> WormsGoThrough(x))"]}
{"id": "eqasc_train_13463", "nl": "After about a week the larvae leave the nodules and continue to develop into adult worms.", "fol": "", "prediction": ["all x.((Larvae(x) & LeaveNodules(x) & DevelopIntoAdultWworms(x)) -> Weeks(x))"]}
{"id": "eqasc_train_13464", "nl": "larvae leave the nodules and continue to transform until having reproductive organs ", "fol": "", "prediction": ["all x.(Larvae(x) -> (LeaveNodules(x) & TransformUntilReproductiveOrgans(x)))"]}
{"id": "eqasc_train_13465", "nl": "Adult worms develop a cumberbund-like band near the head.", "fol": "", "prediction": ["all x.(AdultWworm(x) -> (DevelopsCubberbundLikeBand(x) & NearHead(x)))"]}
{"id": "eqasc_train_13466", "nl": "Earth 's magnetic patterns are used for finding locations by animals that migrate", "fol": "", "prediction": ["all x y z.((Earth(x) & MagneticPattern(y) & Animal(z) & Migrates(z)) -> FindsLocationsBy(x,y,z))"]}
{"id": "eqasc_train_13467", "nl": "Earth s rotation and iron core creates a magnetic field much like giant magnet.", "fol": "", "prediction": ["all x y.((Earth(x) & IronCore(y)) -> CreatesMagneticField(x,y))"]}
{"id": "eqasc_train_13468", "nl": "Migratory animals are dependent on the Earth's rotating iron core for navigation", "fol": "", "prediction": ["all x.(MigratoryAnimal(x) -> DependsOnEarthsRotatingIronCoreForNavigation(x))"]}
{"id": "eqasc_train_13469", "nl": "Bird migration is common.", "fol": "", "prediction": ["all x.(BirdMigration(x) -> Common(x))"]}
{"id": "eqasc_train_13470", "nl": "birds use earth's magnetic patterns to find locations", "fol": "", "prediction": ["all x.(Bird(x) -> UsesEarthsMagneticPatternsToFindLocations(x))"]}
{"id": "eqasc_train_13471", "nl": "Earth 's magnetic patterns are used for finding locations by birds", "fol": "", "prediction": ["all x y z.((Earth(x) & MagneticPattern(y) & Bird(z)) -> (FindsLocations(y,z) & FindsLocations(z,y)))"]}
{"id": "eqasc_train_13472", "nl": "Bird Migration and Isotopes Tracking animal migration is a difficult task.", "fol": "", "prediction": ["all x.((BirdMigration(x) & Isotopes(x)) -> DifficultTask(x))"]}
{"id": "eqasc_train_13473", "nl": "Animated maps show the birds flying along their actual migration paths.", "fol": "", "prediction": ["all x y.((AnimatedMap(x) & Bird(y)) -> ShowsFlying(x,y))"]}
{"id": "eqasc_train_13474", "nl": "Earth's magnetic patterns are used so that birds can fly along their migration paths.", "fol": "", "prediction": ["all x y.((EarthsMagneticPatterns(x) & Bird(y)) -> CanFlyAlongMigrationPaths(y,x))"]}
{"id": "eqasc_train_13475", "nl": "Boreal and temperate species have generally survived by migrating.", "fol": "", "prediction": ["all x.((BorealSpecies(x) | TemperateSpecies(x)) -> SurvivesByMigrating(x))"]}
{"id": "eqasc_train_13476", "nl": "earth's magnetic patterns ensure boreal species survival", "fol": "", "prediction": ["all x y.((EarthsMagneticPatterns(x) & BorealSpecies(y)) -> EnsuresSurvival(x,y))"]}
{"id": "eqasc_train_13477", "nl": "Whales migrate further than any other animal.", "fol": "", "prediction": ["all x.(Whale(x) -> MigratesFourths(x))"]}
{"id": "eqasc_train_13478", "nl": "earth's magnetic patterns are used for finding locations by whales", "fol": "", "prediction": ["all x y.((EarthsMagneticPatterns(x) & Whale(y)) -> FoundLocations(x,y))"]}
{"id": "eqasc_train_13479", "nl": "Spring and fall migrations of birds and fish animate the landscape.", "fol": "", "prediction": ["all x y.((Bird(x) & Fish(y)) -> (AnimatesLandscape(x,y) & (SpringMigrating(x,y) | FallMigrating(x,y))))"]}
{"id": "eqasc_train_13480", "nl": "Earth's magnetic patterns are used for finding locations of birds and fish", "fol": "", "prediction": ["all x y.((EarthsMagneticPattern(x) & Bird(y) & Fish(y)) -> FindsLocations(x,y))"]}
{"id": "eqasc_train_13481", "nl": "Adult sponges are sessile.", "fol": "", "prediction": ["all x.(AdultSponge(x) -> Sessile(x))"]}
{"id": "eqasc_train_13482", "nl": "Sessile Attached permanently, immobile.", "fol": "", "prediction": ["all x.(Sessile(x) -> AttachedPermanently(x) & Immobile(x))"]}
{"id": "eqasc_train_13483", "nl": "adult sponges are immobile", "fol": "", "prediction": ["all x.(AdultSponge(x) -> Immobile(x))"]}
{"id": "eqasc_train_13484", "nl": "Adult sponges are attached permanently, immobile", "fol": "", "prediction": ["all x.(AdultSponge(x) -> (AttachedPermanently(x) & Immobile(x)))"]}
{"id": "eqasc_train_13485", "nl": "Adult sponges are immobile.", "fol": "", "prediction": ["all x.(AdultSponge(x) -> Immobile(x))"]}
{"id": "eqasc_train_13486", "nl": "Most echinoderms are sessile or sedentary marine forms with radial symmetry as adults.", "fol": "", "prediction": ["all x.(Echinoderm(x) -> (Sessile(x) | Sedentary(x)) & RadialSymmetry(x)))"]}
{"id": "eqasc_train_13487", "nl": "adult sponges are sedentary", "fol": "", "prediction": ["all x.(AdultSponge(x) -> Sedentary(x))"]}
{"id": "eqasc_train_13488", "nl": "Adult sponges are attached permanently, and immobile", "fol": "", "prediction": ["all x.(AdultSponge(x) -> (AttachedPermanently(x) & Immobile(x)))"]}
{"id": "eqasc_train_13489", "nl": "Hydras are sessile, attaching to some sort of substrate.", "fol": "", "prediction": ["all x.(Hydro(x) -> (Sessile(x) & AttachesToSubstrat(x)))"]}
{"id": "eqasc_train_13490", "nl": "Adult sponges attach to a substrate", "fol": "", "prediction": ["all x y.((AdultSponge(x) & Substrat(y)) -> AttachesTo(x,y))"]}
{"id": "eqasc_train_13491", "nl": "Sponges are sessile animals that live in fresh or salt water.", "fol": "", "prediction": ["all x.(Sponges(x) -> (SessileAnimal(x) & (LivesInFreshWater(x) | LivesInSaltWater(x))))"]}
{"id": "eqasc_train_13492", "nl": "sponges live in salt water", "fol": "", "prediction": ["all x.(Sponge(x) -> LivesInSaltWater(x))"]}
{"id": "eqasc_train_13493", "nl": "Adult sponges are attached permanently and cannot move.", "fol": "", "prediction": ["all x.(AdultSponge(x) -> (AttachedPermanently(x) & -Move(x)))"]}
{"id": "eqasc_train_13494", "nl": "Adult sponges are attached permanently, immobile.", "fol": "", "prediction": ["all x.(AdultSponge(x) -> (AttachedPermanently(x) & Immobile(x)))"]}
{"id": "eqasc_train_13495", "nl": "Polyps can be peduncular or sessile, and are usually viral in origin.", "fol": "", "prediction": ["all x.(Polyp(x) -> ((Pedecular(x) | Sessile(x)) & UsuallyViral(x)))"]}
{"id": "eqasc_train_13496", "nl": "Adult sponges have polyps.", "fol": "", "prediction": ["all x.(AdultSponge(x) -> HasPolyps(x))"]}
{"id": "eqasc_train_13497", "nl": "Vertebrates are all chordates that have a backbone.", "fol": "", "prediction": ["all x.(Vertebrates(x) -> (Acordates(x) & HasBackbone(x)))"]}
{"id": "eqasc_train_13498", "nl": "Fish are the first known true chordates.", "fol": "", "prediction": ["all x.(Fish(x) -> TrueCdorbate(x))"]}
{"id": "eqasc_train_13499", "nl": "Fish are the first known animal with a backbone", "fol": "", "prediction": ["all x.(Fish(x) -> (FirstKnownAnimalWithBackbone(x) & HasBackbone(x)))"]}
{"id": "eqasc_train_13500", "nl": "all vertebrates have jaws", "fol": "", "prediction": ["all x.(Vertebrate(x) -> HasJaws(x))"]}
{"id": "eqasc_train_13501", "nl": "Vertebrates are all chordates that have a spinal column.", "fol": "", "prediction": ["all x.(Vertebrates(x) -> (Acordates(x) & HasSpinalColumn(x)))"]}
{"id": "eqasc_train_13502", "nl": "Mammals are like other chordates in that they have backbones.", "fol": "", "prediction": ["all x.(Mammal(x) -> (HasBackbone(x) & LikesAcidates(x)))"]}
{"id": "eqasc_train_13503", "nl": "Mammals are like other vertebrates that have a backbone", "fol": "", "prediction": ["all x.(Mammal(x) -> (Vertebrate(x) & HasBackbone(x)))"]}
{"id": "eqasc_train_13504", "nl": "Vertebrates have a jaw and a backbone.", "fol": "", "prediction": ["all x.(Vertebrates(x) -> (HasJaw(x) & HasBackbone(x)))"]}
{"id": "eqasc_train_13505", "nl": "Later on, vertebrates evolved jaws.", "fol": "", "prediction": ["all x.(Vertebrate(x) -> EvolvedJaws(x))"]}
{"id": "eqasc_train_13506", "nl": "all chordates have evolved jaws", "fol": "", "prediction": ["all x.(Acordate(x) -> HasEvolvedJaws(x))"]}
{"id": "eqasc_train_13507", "nl": "harming an animal species causes that animal 's population to decrease", "fol": "", "prediction": ["all x y z.((AnimalSpecies(x) & AnimalSpecies(y) & Animal(z) & Harms(x,y)) -> PopulationDecrease(x,z))"]}
{"id": "eqasc_train_13508", "nl": "Habitat loss is the major reason for the decrease in the bird population.", "fol": "", "prediction": ["all x.((HabitatLoss(x) & BirdPopulationDecrease(x)) -> MajorRuntime(x))"]}
{"id": "eqasc_train_13509", "nl": "habitat loss harmed the bird population", "fol": "", "prediction": ["all x y.((HabitatLoss(x) & BirdPopulation(y)) -> Harmed(x,y))"]}
{"id": "eqasc_train_13510", "nl": "Regular overfishing can decline an animal population to the point of extinction.", "fol": "", "prediction": ["all x y.((RegularOverfishing(x) & AnimalPopulation(y)) -> CanDeclineToPointOfExtinction(x,y))"]}
{"id": "eqasc_train_13511", "nl": "harming an animal species can result in extinction", "fol": "", "prediction": ["all x y.((AnimalSpecies(x) & AnimalSpecies(y)) -> (Harms(x,y) & Endangered(x)))"]}
{"id": "eqasc_train_13512", "nl": "Killing snakes is more than unnecessary and harmful to the ecosystem.", "fol": "", "prediction": ["all x.(KillsSnakes(x) -> (MoreThanNecessary(x) & HarmfulToEcosystem(x)))"]}
{"id": "eqasc_train_13513", "nl": "Killing a snake can cause an animal's population to decrease.", "fol": "", "prediction": ["all x y.((Snake(x) & Animal(y)) -> KillsCanDecreasePopulation(x,y))"]}
{"id": "eqasc_train_13514", "nl": "Wild animal populations have decreased drastically, due to both hunting and loss of habitat.", "fol": "", "prediction": ["all x.((WildAnimalPopulation(x) & Hunting(x) & LossOfHabitat(x)) -> DecreasedDirtily(x))"]}
{"id": "eqasc_train_13515", "nl": "Hunting causes a creatures population to decrease", "fol": "", "prediction": ["all x y.((Hunting(x) & Creature(y)) -> CausesDecreasedPopulation(x,y))"]}
{"id": "eqasc_train_13516", "nl": "Serious questions remain regarding what happens if endangered populations continue to decrease.", "fol": "", "prediction": ["all x.((EndangeredPopulation(x) & ContinuesDecrease(x)) -> SeriousQuestionsRemain(x))"]}
{"id": "eqasc_train_13517", "nl": "harming an animal species causes that animal's species to become endangered", "fol": "", "prediction": ["all x y.((AnimalSpecies(x) & AnimalSpecies(y) & Harms(x,y)) -> EndangeredSpecies(x,y))"]}
{"id": "eqasc_train_13518", "nl": "Today, the pink flamingo is included on the endangered species list.", "fol": "", "prediction": ["all x.(PinkFlimmer(x) -> InEndangeredSpeciesList(x))"]}
{"id": "eqasc_train_13519", "nl": "harming pink flamingoes causes their population to decrease", "fol": "", "prediction": ["all x y.((PinkFlamingo(x) & PinkFlamingo(y)) -> (HasPopulationDecrease(x,y) & PopulationDecrease(x,y)))"]}
{"id": "eqasc_train_13520", "nl": "Harming a certain kind of organism causes that animal's population to decrease.", "fol": "", "prediction": ["all x y.((Harming(x) & Animal(y)) -> PopulationDecrease(y))"]}
{"id": "eqasc_train_13521", "nl": "Oil spill sare harmful to animals and the enviroment.", "fol": "", "prediction": ["all x.(OilSpill(x) -> (HarmfulToAnimals(x) & HarmfulToEnvironment(x)))"]}
{"id": "eqasc_train_13522", "nl": "Oil spills cause animal populations to decrease.", "fol": "", "prediction": ["all x.(OilSpoken(x) -> CausesDecreasedAnimalPopulations(x))"]}
{"id": "eqasc_train_13523", "nl": "If mortality is greater, then the population decreases.", "fol": "", "prediction": ["all x.((CausesGreaterCauses(x) & PopulationDecreases(x)) -> DeathGreater(x))"]}
{"id": "eqasc_train_13524", "nl": "mortality can cause a population decline", "fol": "", "prediction": ["all x.((MortalLife(x) & PopulationDecline(x)) -> Causes(x,populationDecline))"]}
{"id": "eqasc_train_13525", "nl": "Studies of island populations have shown that extinction rates increase as area decreases.", "fol": "", "prediction": ["all x.((StudyOfIslandPopulations(x) & ExtinctionRate(x)) -> IncreasesAsAreaDecreases(x))"]}
{"id": "eqasc_train_13526", "nl": "harming an animal species causes increase in extinction rates", "fol": "", "prediction": ["all x y.((AnimalSpecies(x) & AnimalSpecies(y)) -> (HasIncreaseInExtinctionRates(x,y) & IncreaseInExtinctionRates(x,y)))"]}
{"id": "eqasc_train_13527", "nl": "Pollution from garbage can harm cave animals.", "fol": "", "prediction": ["all x.((GroceriePollution(x) & CaveAnimal(y)) -> CanHarm(x,y))"]}
{"id": "eqasc_train_13528", "nl": "Pollution from garbage can lead to a decrease in cave animals", "fol": "", "prediction": ["all x y.((PollutionFromGarbage(x) & CaveAnimal(y)) -> DecreaseInCaveAnimals(x,y))"]}
{"id": "eqasc_train_13529", "nl": "Fish are wild animals.", "fol": "", "prediction": ["all x.(Fish(x) -> WildAnimal(x))"]}
{"id": "eqasc_train_13530", "nl": "harming a fish species causes that population to decrease", "fol": "", "prediction": ["all x y.((FishSpecies(x) & FishSpecies(y) & Harms(x,y)) -> PopulationDecrease(x,y))"]}
{"id": "eqasc_train_13531", "nl": "Air pollution also harms plants and animals.", "fol": "", "prediction": ["all x.(AirPollution(x) -> (HarmsPlants(x) & HarmsAnimals(x)))"]}
{"id": "eqasc_train_13532", "nl": "Air pollution damages animal populations causing them to decrease", "fol": "", "prediction": ["all x y z.((AirPollution(x) & AnimalPopulation(y) & Animal(z)) -> (Damages(x,y) & Decreases(y,z)))"]}
{"id": "eqasc_train_13533", "nl": "Ecology is the study of populations or communities.", "fol": "", "prediction": ["all x.(Ecology(x) -> (StudiesPopulations(x) | StudiesCommunities(x)))"]}
{"id": "eqasc_train_13534", "nl": "Ecology studies something that decreases when an animal species is harmed", "fol": "", "prediction": ["all x y.((Ecology(x) & AnimalSpecies(y) & Harmed(y)) -> StudiesDecreases(x,y))"]}
{"id": "eqasc_train_13535", "nl": "harming a goat species causes its population to decrease", "fol": "", "prediction": ["all x y.((GoatSpecies(x) & Harms(x,y)) -> PopulationDecrease(y))"]}
{"id": "eqasc_train_13536", "nl": "Mammals have a layer of fat under the skin to help insulate the body.", "fol": "", "prediction": ["all x.(Mammal(x) -> HasLayerOfFatUnderSkin(x))"]}
{"id": "eqasc_train_13537", "nl": "An extra layer of fat also helps protect the polar bear from the cold.", "fol": "", "prediction": ["all x.((ExtraLayerOfFat(x) & PolarBear(x)) -> ProtectsFromCold(x))"]}
{"id": "eqasc_train_13538", "nl": "The polar bear has extra fat to insulate the body", "fol": "", "prediction": ["all x.(PolarBear(x) -> HasExtraFatToInsulateBody(x))"]}
{"id": "eqasc_train_13539", "nl": "Of the sea mammals, especially the seal and walrus are hunted.", "fol": "", "prediction": ["all x.((SeaMammal(x) & Seal(x) & Walrus(x)) -> Hunted(x))"]}
{"id": "eqasc_train_13540", "nl": "walruses have a layer of fat under the skin to help insulate the body", "fol": "", "prediction": ["all x.(Walrus(x) -> (HasLayerOfFat(x) & UnderSkin(x) & HelpsInsulateBody(x)))"]}
{"id": "eqasc_train_13541", "nl": "mammals have a layer of food under their skin to help insulate the body", "fol": "", "prediction": ["all x y.((Mammal(x) & LayerOfFood(y)) -> InsulatesBody(x,y))"]}
{"id": "eqasc_train_13542", "nl": "Mammals have a layer of fat under the skin to help keep the body warm in a variety of climates", "fol": "", "prediction": ["all x.(Mammal(x) -> (HasFatLayer(x) & UnderSkin(x) & KeepsBodyWarm(x) & InVarietyOfClimates(x)))"]}
{"id": "eqasc_train_13543", "nl": "pugs have a layer of fat under the skin.", "fol": "", "prediction": ["all x.(Pug(x) -> HasLayerOfFatUnderSkin(x))"]}
{"id": "eqasc_train_13544", "nl": "Insulated model provides warmth and comfort.", "fol": "", "prediction": ["all x.(InsulatedModel(x) -> (ProvidesWarmth(x) & ProvidesComfort(x)))"]}
{"id": "eqasc_train_13545", "nl": "Mammals have a layer of fat under the skin to provide warmth and comfort", "fol": "", "prediction": ["all x.(Mammal(x) -> (HasLayerOfFat(x) & UnderSkin(x) & ProvidesWarmth(x) & ProvidesComfort(x)))"]}
{"id": "eqasc_train_13546", "nl": "Humans have a layer of fat under the skin to help insulate the body.", "fol": "", "prediction": ["all x.(Human(x) -> HasLayerOfFatUnderSkin(x))"]}
{"id": "eqasc_train_13547", "nl": "Insulation is very important in a cold climate like Arkhangelsk.", "fol": "", "prediction": ["all x.((ColdClimate(x) & Arkhangelsk(x)) -> InsulationImportant(x))"]}
{"id": "eqasc_train_13548", "nl": "The layer of body fat under the skin mammals is especially important in cold climates", "fol": "", "prediction": ["all x.((BodyFatLayer(x) & UnderSkinMammals(x)) -> ColdClimate(x))"]}
{"id": "eqasc_train_13549", "nl": "If it has hair it is a mammal.", "fol": "", "prediction": ["all x.(HasHair(x) -> Mammal(x))"]}
{"id": "eqasc_train_13550", "nl": "An organism with hair has a layer of fat under the skin to help insulate the body.", "fol": "", "prediction": ["all x.((Organism(x) & HasHair(x)) -> HasFatLayerUnderSkin(x))"]}
{"id": "eqasc_train_13551", "nl": "All whales are mammals.", "fol": "", "prediction": ["all x.(Whale(x) -> Mammal(x))"]}
{"id": "eqasc_train_13552", "nl": "whales have a layer of fat under the skin to help insulate the body", "fol": "", "prediction": ["all x y.((Whale(x) & LayerOfFat(x,y)) -> InsulatesBody(x))"]}
{"id": "eqasc_train_13553", "nl": "Blubber, the fat of the whale, was once much sought after.", "fol": "", "prediction": ["all x.((Blobber(x) & FatOfWhale(x)) -> MuchSoughtAfter(x))"]}
{"id": "eqasc_train_13554", "nl": "whales have blubber to help insulate", "fol": "", "prediction": ["all x.(Whale(x) -> (HasBlumbber(x) & HelpsInsulate(x)))"]}
{"id": "eqasc_train_13555", "nl": "Harbor seals, like sea lions, have evolved to utilize a layer of fat called blubber.", "fol": "", "prediction": ["all x y.((HarborSeal(x) & SeaLion(y)) -> (EvolvedToUseBlumber(x) & FatLayer(y)))"]}
{"id": "eqasc_train_13556", "nl": "Sea lions have a layer of blubber to insulate the body", "fol": "", "prediction": ["all x.(SeaLion(x) -> (HasBloodberLayer(x) & InsulatesBody(x)))"]}
{"id": "eqasc_train_13557", "nl": "Glass insulation keeps beverage warm for hours.", "fol": "", "prediction": ["all x.(GlassInsulation(x) -> KeepsBeverageWarm(x))"]}
{"id": "eqasc_train_13558", "nl": "Mammals have a layer of fat under the skin to keep them warm.", "fol": "", "prediction": ["all x.(Mammal(x) -> HasFatLayer(x))"]}
{"id": "eqasc_train_13559", "nl": "When stored in the body, fat helps maintain body temperature by acting as an insulator.", "fol": "", "prediction": ["all x.((Fat(x) & StoredInBody(x)) -> HelpsMaintainBodyTemperature(x))"]}
{"id": "eqasc_train_13560", "nl": "Mammals have body fat to help maintain body temperature", "fol": "", "prediction": ["all x.(Mammal(x) -> HasBodyFat(x))"]}
{"id": "eqasc_train_13561", "nl": "powering an electrical device with a battery requires a path for electricity to flow through a closed circuit", "fol": "", "prediction": ["all x y.((ElectricalDevice(x) & Battery(y)) -> (RequiresPathForElectricity(x,y) & ClosedCircuit(x)))"]}
{"id": "eqasc_train_13562", "nl": "Electrons flow continuously in a closed circuit.", "fol": "", "prediction": ["all x y.((Electron(x) & ClosedCircuit(y)) -> FlowsContinuously(x,y))"]}
{"id": "eqasc_train_13563", "nl": "powering an electrical device with a battery requires a path for electrons to flow continuously", "fol": "", "prediction": ["all x y.((ElectricalDevice(x) & Battery(y)) -> RequiresPathForElectrons(x,y))"]}
{"id": "eqasc_train_13564", "nl": "An electric circuit is a closed path for electron flow.", "fol": "", "prediction": ["all x.(ElectricCircuit(x) -> ClosedPathForElectronFlow(x))"]}
{"id": "eqasc_train_13565", "nl": "Powering an electrical device with a battery requires electron flow.", "fol": "", "prediction": ["all x y.((ElectricalDevice(x) & Battery(y)) -> RequiresElectronFlow(x,y))"]}
{"id": "eqasc_train_13566", "nl": "Snow is actually electrical noise that is generated by the TV receiver and other electrical devices.", "fol": "", "prediction": ["all x.(Snow(x) -> (ElectricalNoise(x) & GeneratedByTVReceiverAndElectricalDevices(x)))"]}
{"id": "eqasc_train_13567", "nl": "powering a TV receiver with a battery requires a path for electricity to flow through a closed circuit", "fol": "", "prediction": ["all x y.((TelevisionReceiver(x) & Battery(y)) -> (RequiresPathForElectricity(x,y) & ClosedCircuit(x)))"]}
{"id": "eqasc_train_13568", "nl": "A battery-powered computer requires a closed circuit for electricity to flow", "fol": "", "prediction": ["all x.((Computer(x) & BatteryPowered(x)) -> RequiresClosedCircuit(x))"]}
{"id": "eqasc_train_13569", "nl": "Batteries are electro-chemical devices.", "fol": "", "prediction": ["all x.(Battery(x) -> ElectrochemicalDevice(x))"]}
{"id": "eqasc_train_13570", "nl": "An electrical device can be powered with an electro-chemical device", "fol": "", "prediction": ["all x y.((ElectricalDevice(x) & ElectrochemicalDevice(y)) -> CanBePoweredWith(x,y))"]}
{"id": "eqasc_train_13571", "nl": "Electric cars have big batteries instead of engines.", "fol": "", "prediction": ["all x.(ElectricCar(x) -> (HasBigBatteries(x) & -HasEngines(x)))"]}
{"id": "eqasc_train_13572", "nl": "Electric cars require a path for electricity to flow through a closed circuit", "fol": "", "prediction": ["all x y.((ElectricCar(x) & ElectricCar(y)) -> RequiresPathForElectricityFlow(x,y))"]}
{"id": "eqasc_train_13573", "nl": "powering a device with a battery requires a path for electrons to flow through a closed circuit", "fol": "", "prediction": ["all x y.((Device(x) & Battery(y) & Powers(x,y)) -> RequiresPathForElectrons(x,y))"]}
{"id": "eqasc_train_13574", "nl": "Today's cellular phones are second-generation devices.", "fol": "", "prediction": ["all x.(CellularPhone(x) -> SecondGenerationDevice(x))"]}
{"id": "eqasc_train_13575", "nl": "powering a phone with a battery requires a path for electricity to flow", "fol": "", "prediction": ["all x y.((Phone(x) & Battery(y) & PowersWith(x,y)) -> RequiresPathForElectricityFlow(x))"]}
{"id": "eqasc_train_13576", "nl": "intense heat has a negative impact on an organism", "fol": "", "prediction": ["all x y.((IntenseHeat(x) & Organism(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_13577", "nl": "Fire has a negative impact on an organism", "fol": "", "prediction": ["all x y.((Fire(x) & Organism(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_13578", "nl": "Summer heat in the desert is intense and oppressive.", "fol": "", "prediction": ["all x.(SummerHeat(x) -> (Intense(x) & Obscious(x)))"]}
{"id": "eqasc_train_13579", "nl": "the desert has a negative impact on an organism", "fol": "", "prediction": ["all x y.((Desert(x) & Organism(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_13580", "nl": "Bacteria are killed by intense heat for a certain time.", "fol": "", "prediction": ["all x.(Bacteria(x) -> KilledByIntenseHeat(x))"]}
{"id": "eqasc_train_13581", "nl": "Hot temperatures have a negative impact on bacteria.", "fol": "", "prediction": ["all x.(HotTemperature(x) -> NegativeImpactOnBacteria(x))"]}
{"id": "eqasc_train_13582", "nl": "Intense Sunlight and Heat Intense sunlight and heat are present in all arid areas.", "fol": "", "prediction": ["all x.((AridArea(x) & IntenseSunlight(x) & IntenseHeat(x)) -> (PresentInAridArea(x) & PresentInAridArea(x)))"]}
{"id": "eqasc_train_13583", "nl": "intense Sunlight has a negative impact on an organism", "fol": "", "prediction": ["all x y.((IntenseSunlight(x) & Organism(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_13584", "nl": "fire has a negative impact on an organism", "fol": "", "prediction": ["all x y.((Fire(x) & Organism(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_13585", "nl": "An organism is any individual animal or plant.", "fol": "", "prediction": ["all x.(Organism(x) -> (Animal(x) | Plant(x)))"]}
{"id": "eqasc_train_13586", "nl": "intense heat has a negative impact on animals and plants", "fol": "", "prediction": ["all x y.((IntenseHeat(x) & Animal(y) & Plant(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_13587", "nl": "Direct sunlight, heat and some disinfectants kill the organism.", "fol": "", "prediction": ["all x.((DirectSunlight(x) & Heat(x) & Disinfectants(x)) -> KillsOrganism(x))"]}
{"id": "eqasc_train_13588", "nl": "organisms can be killed by direct sunlight", "fol": "", "prediction": ["all x.(Organism(x) -> (T\u00f6chesByDirectSunlight(x) | KillsByDirectSunlight(x)))"]}
{"id": "eqasc_train_13589", "nl": "Heat loss is inhibited by the intense vasoconstriction.", "fol": "", "prediction": ["all x.(HeatLoss(x) -> InhibitedByIntenseVasoconstriction(x))"]}
{"id": "eqasc_train_13590", "nl": "intense vasoconstriction has a negative impact on an organism", "fol": "", "prediction": ["all x y.((IntenseVasoconstriction(x) & Organism(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_13591", "nl": "Because of the intense and radiant heat emitted, skin can burn rather quickly.", "fol": "", "prediction": ["all x.((IntenseRadiationHeat(x) & Emitted(x)) -> BurnsSkin(x))"]}
{"id": "eqasc_train_13592", "nl": "skin burning quickly has a negative impact on an organism", "fol": "", "prediction": ["all x y.((SkinBurningQuickly(x) & Organism(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_13593", "nl": "fire has a negative impact on most organisms", "fol": "", "prediction": ["all x y.((Fire(x) & Organism(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_13594", "nl": "intense heat has a negative impact on plants", "fol": "", "prediction": ["all x y.((IntenseHeat(x) & Plant(y)) -> NegativeImpactOn(x,y))"]}
{"id": "eqasc_train_13595", "nl": "To have the form of heat is to be-hot.", "fol": "", "prediction": ["all x.((Heat(x) & HasHeat(x)) -> BeHot(x))"]}
{"id": "eqasc_train_13596", "nl": "If an organism is too hot, it has a negative impact.", "fol": "", "prediction": ["all x.((Organism(x) & TooHot(x)) -> NegativeImpact(x))"]}
{"id": "eqasc_train_13597", "nl": "Heat is produced by the sun and observed on Earth.", "fol": "", "prediction": ["all x y.((Sun(x) & Earth(y)) -> (ProducesHeat(x,y) & ObservedOn(x,y)))"]}
{"id": "eqasc_train_13598", "nl": "Something produced by the Sun has a negative impact on an organism", "fol": "", "prediction": ["all x y.((ProducedBySun(x) & Organism(y)) -> NegativeImpact(x,y))"]}
{"id": "eqasc_train_13599", "nl": "Burns, heat cramps, heat exhaustion, and heat stroke are caused by exposure to heat.", "fol": "", "prediction": ["all x.((Burn(x) | HeatCrops(x) | HeatExhaustion(x) | HeatStroke(x)) -> CausedByExpositionToHeat(x))"]}
{"id": "eqasc_train_13600", "nl": "Burns are caused by intense temperatures", "fol": "", "prediction": ["all x.(Burn(x) -> (IntenseTemperatures(x) & CausedBy(x,y)))"]}
{"id": "eqasc_train_13601", "nl": "when light enters the eye through the pupil , that light falls on the retina", "fol": "", "prediction": ["all x y z.((Light(x) & Eye(y) & Pupil(z) & EntersThrough(x,y,z)) -> FallsOnRetina(x))"]}
{"id": "eqasc_train_13602", "nl": "Receptors are cells in the retina that perceive light.", "fol": "", "prediction": ["all x.(Receptor(x) -> (CellInRetina(x) & PerceivesLight(x)))"]}
{"id": "eqasc_train_13603", "nl": "When light enters the eye through the pupil, receptors in the eye perceive light.", "fol": "", "prediction": ["all x y.((Light(x) & Eye(y) & EntersThroughPupil(x,y)) -> PerceivesLight(x,y))"]}
{"id": "eqasc_train_13604", "nl": "When electromagnetic energy enters the eye, it falls on the retina.", "fol": "", "prediction": ["all x.((ElectromagneticEnergy(x) & EntersEye(x)) -> FallsOnRetina(x))"]}
{"id": "eqasc_train_13605", "nl": "An area of the retina called the macula sees fine details.", "fol": "", "prediction": ["all x.(Macula(x) -> SeesFineDetails(x))"]}
{"id": "eqasc_train_13606", "nl": "light allows us to see fine details", "fol": "", "prediction": ["all x.(Light(x) -> AllowsSeeFineDetails(x))"]}
{"id": "eqasc_train_13607", "nl": "Intermediate length rays are visible as light.", "fol": "", "prediction": ["all x.(IntermediateLengthRay(x) -> VisibleAsLight(x))"]}
{"id": "eqasc_train_13608", "nl": "when intermediate length rays enter the eye through the pupil it falls on the retina", "fol": "", "prediction": ["all x y z.((IntermediateLengthRays(x) & Eye(y) & Pupil(z) & EntersThrough(x,y,z)) -> FallsOnRetina(x))"]}
{"id": "eqasc_train_13609", "nl": "Pictures are formed on the retina, and are then transmitted by the optic nerve to the brain.", "fol": "", "prediction": ["all x y z.((Picture(x) & Retina(y) & OpticNervous(z)) -> (FormedOn(x,y) & TransmittedBy(x,z)))"]}
{"id": "eqasc_train_13610", "nl": "When light enters the eye through the pupil, information is transmitted by the optic nerve to the brain.", "fol": "", "prediction": ["all x y z.((Light(x) & Eye(y) & Pupil(z) & EntersThrough(x,y,z)) -> TransmitsInformation(x,y,z))"]}
{"id": "eqasc_train_13611", "nl": "Receptor cells perceives light that enters the pupil", "fol": "", "prediction": ["all x y.((ReceptorCell(x) & Pupil(y)) -> PerceivesLight(x,y))"]}
{"id": "eqasc_train_13612", "nl": "Humans use both eyes to see a single image.", "fol": "", "prediction": ["all x.(Human(x) -> (UsesEyes(x,y) & SeesSingleImage(x)))"]}
{"id": "eqasc_train_13613", "nl": "humans use light to see an image", "fol": "", "prediction": ["all x y.((Human(x) & Image(y)) -> UsesLightToSee(x,y))"]}
{"id": "eqasc_train_13614", "nl": "when  photons . enters the eye through the pupil , photons . falls on the retina", "fol": "", "prediction": ["all x y z.((Photons(x) & Eye(y) & Pupil(z) & EntersThrough(x,y) & Photons(x)) -> FallsOnRetina(x,z))"]}
{"id": "eqasc_train_13615", "nl": "Images are retained on the retina of a viewer's eye for a fraction of a second after they strike it.", "fol": "", "prediction": ["all x y.((Image(x) & Viewer(y)) -> RetainsOnRetinal(x,y))"]}
{"id": "eqasc_train_13616", "nl": "Light causes images to be retained on the retina", "fol": "", "prediction": ["all x y.((Light(x) & Image(y)) -> RetainsOnRetina(x,y))"]}
{"id": "eqasc_train_13617", "nl": "Mollusks are a major food source for other organisms, including humans.", "fol": "", "prediction": ["all x.(Mullusk(x) -> (MainFoodSource(x) & ForOtherOrganisms(x) & ForHumans(x)))"]}
{"id": "eqasc_train_13618", "nl": "Snails are a major food source for other organisms, including humans.", "fol": "", "prediction": ["all x.(Snail(x) -> (MainFoodSource(x) & ForOrganisms(x) & ForHumans(x)))"]}
{"id": "eqasc_train_13619", "nl": "Seafood, such as mollusks and crustaceans, can be a source of cadmium, as well.", "fol": "", "prediction": ["all x.((Seafood(x) & (Mollusk(x) | Crustacean(x))) -> SourceOfCadmium(x))"]}
{"id": "eqasc_train_13620", "nl": "Seafood is a major food source for humans", "fol": "", "prediction": ["all x.(Seafood(x) -> MajorFoodSourceForHumans(x))"]}
{"id": "eqasc_train_13621", "nl": "abalones are a major food source for humans", "fol": "", "prediction": ["all x.(Abalone(x) -> (MajorFoodSource(x) & Human(x)))"]}
{"id": "eqasc_train_13622", "nl": "Intervertebrates are a major food source for other organisms, including humans.", "fol": "", "prediction": ["all x.(Intervertebrates(x) -> (MainFoodSource(x) & ForOtherOrganisms(x) & ForHumans(x)))"]}
{"id": "eqasc_train_13623", "nl": "Many organisms are omnivores with variable diets.", "fol": "", "prediction": ["all x.(Organism(x) -> (Omnivore(x) & VariableDiet(x)))"]}
{"id": "eqasc_train_13624", "nl": "Humans have variable diets and some consume mollusks as a major food source.", "fol": "", "prediction": ["all x.(Human(x) -> (VariableDiet(x) & exists y.(Mollusk(y) & MajorFoodSource(y)))))"]}
{"id": "eqasc_train_13625", "nl": "squids are a food source for humans", "fol": "", "prediction": ["all x.(Squid(x) -> FoodSourceForHumans(x))"]}
{"id": "eqasc_train_13626", "nl": "Humans eat squid.", "fol": "", "prediction": ["all x.(Human(x) -> EatsSquid(x))"]}
{"id": "eqasc_train_13627", "nl": "Soft-bodied invertebrates are a major food source for other organisms, including humans.", "fol": "", "prediction": ["all x.(SoftBodyInvertebrate(x) -> (MainFoodSource(x) & ForOtherOrganisms(x) & ForHumans(x)))"]}
{"id": "eqasc_train_13628", "nl": "Squid are a major food source for organisms", "fol": "", "prediction": ["all x.(Squid(x) -> (MajorFoodSource(x) & Organism(x)))"]}
{"id": "eqasc_train_13629", "nl": "Mollusks filter the water as they look for food.", "fol": "", "prediction": ["all x.(Mollusk(x) -> (FiltersWater(x) & LooksForFood(x)))"]}
{"id": "eqasc_train_13630", "nl": "Members of a major food source for humans filter what?", "fol": "", "prediction": ["all x y.((Member(x) & MajorFoodSource(y) & Human(y)) -> FiltersWhat(x,y))"]}
{"id": "eqasc_train_13631", "nl": "Invertebrates are a major food source for other organisms, including humans.", "fol": "", "prediction": ["all x y.((Invertebrate(x) & Organism(y)) -> MajorFoodSource(x,y))"]}
{"id": "eqasc_train_13632", "nl": "Migration is a type of movement that changes population size.", "fol": "", "prediction": ["all x.(Migration(x) -> (ChangesPopulationSize(x) & ChangesPopulationSize(x)))"]}
{"id": "eqasc_train_13633", "nl": "Predatory animals migrate with the game animals.", "fol": "", "prediction": ["all x y.((PredatoryAnimal(x) & GameAnimal(y)) -> MigratesWith(x,y))"]}
{"id": "eqasc_train_13634", "nl": "As movement causes a change in game population size, predatory population size changes, too.", "fol": "", "prediction": ["all x.((Movement(x) & ChangesGamePopulationSize(x)) -> PredatoryPopulationSizeChanges(x))"]}
{"id": "eqasc_train_13635", "nl": "Birds migrate to escape poor weather and food supply.", "fol": "", "prediction": ["all x.(Bird(x) -> (MigratesToEscapePoorWeather(x) & MigratesToFoodSupply(x)))"]}
{"id": "eqasc_train_13636", "nl": "Escaping poor weather and food supply changes population size.", "fol": "", "prediction": ["all x.(EscapesPoorWeatherAndFoodSupply(x) -> ChangesPopulationSize(x))"]}
{"id": "eqasc_train_13637", "nl": "Population viability Population sizes are under constant fluctuation.", "fol": "", "prediction": ["all x.(PopulationViability(x) -> ConstantFluctuation(x))"]}
{"id": "eqasc_train_13638", "nl": "Migration is a type of movement that causes a population to fluctuate.", "fol": "", "prediction": ["all x.(Migration(x) -> (CausesPopulationFluctuation(x) & CausesPopulationFluctuation(x)))"]}
{"id": "eqasc_train_13639", "nl": "Insects can also migrate.", "fol": "", "prediction": ["all x.(Insect(x) -> CanMigrate(x))"]}
{"id": "eqasc_train_13640", "nl": "Insects sometimes change population size by moving from one place to another.", "fol": "", "prediction": ["all x.(Insect(x) -> (ChangesPopulationSize(x) & MovesFromOnePlaceToAnother(x)))"]}
{"id": "eqasc_train_13641", "nl": "birds commonly undergo a type of movement that changes population size", "fol": "", "prediction": ["all x y.((Bird(x) & Movement(y)) -> Undergoes(x,y))"]}
{"id": "eqasc_train_13642", "nl": "birds undergo a type of movement that changes population size", "fol": "", "prediction": ["all x y.((Bird(x) & Movement(y)) -> Undergoes(x,y))"]}
{"id": "eqasc_train_13643", "nl": "migration is a type of motion that changes population size", "fol": "", "prediction": ["all x.(Migration(x) -> (Motion(x) & ChangesPopulationSize(x)))"]}
{"id": "eqasc_train_13644", "nl": "Migration Much of the life of a spiny lobster involves travel.", "fol": "", "prediction": ["all x.(SpinyLuttle(x) -> InvolvesTravel(x))"]}
{"id": "eqasc_train_13645", "nl": " A life involving travel is a type of movement that changes population size.", "fol": "", "prediction": ["all x.((Life(x) & InvolvesTravel(x)) -> ChangesPopulationSize(x))"]}
{"id": "eqasc_train_13646", "nl": "insects can change population size through movement", "fol": "", "prediction": ["all x y.((Insect(x) & PopulationSize(y)) -> Changes(x,y))"]}
{"id": "eqasc_train_13647", "nl": "Arthropods have a life cycle with sexual reproduction.", "fol": "", "prediction": ["all x.(Arthropod(x) -> (LifeCycle(x) & SexualReproduction(x)))"]}
{"id": "eqasc_train_13648", "nl": "arthropods require gametes to have children", "fol": "", "prediction": ["all x y.((Arthropod(x) & Gamete(y)) -> RequiresToHaveChildren(x,y))"]}
{"id": "eqasc_train_13649", "nl": "insects have a life cycle with sexual reproduction", "fol": "", "prediction": ["all x.(Insect(x) -> (LifeCycle(x) & SexualReproduction(x)))"]}
{"id": "eqasc_train_13650", "nl": "Insects have a life cycle with sexual reproduction.", "fol": "", "prediction": ["all x.(Insect(x) -> (LifeCycle(x) & SexualReproduction(x)))"]}
{"id": "eqasc_train_13651", "nl": "lobsters have a life cycle with sexual reproduction", "fol": "", "prediction": ["all x.(Lutheran(x) -> (LifeCycle(x) & SexualReproduction(x)))"]}
{"id": "eqasc_train_13652", "nl": "insects have a life cycle that includes sexual reproduction", "fol": "", "prediction": ["all x.(Insect(x) -> (LifeCycle(x) & IncludesSexualReproduction(x)))"]}
{"id": "eqasc_train_13653", "nl": "Sexual reproduction mixes the genes up more than is possible with asexual reproduction.", "fol": "", "prediction": ["all x y.((SexualReproduction(x) & AsexualReproduction(y)) -> MixesGenesUpMoreThan(x,y))"]}
{"id": "eqasc_train_13654", "nl": "Arthropods have a life cycle with mixing genes up.", "fol": "", "prediction": ["all x.(Arthropod(x) -> (LifeCycle(x) & MixingGenesUp(x)))"]}
{"id": "eqasc_train_13655", "nl": "insects have a life cycle with sexual reproduction.", "fol": "", "prediction": ["all x.(Insect(x) -> HasLifeCycleWithSexualReproduction(x))"]}
{"id": "eqasc_train_13656", "nl": "Scorpions are vulnerable because they have the lowest rate of reproduction among arthropods.", "fol": "", "prediction": ["all x.(Scorpodon(x) -> (LowerReproductionRate(x) & Arthropod(x)))"]}
{"id": "eqasc_train_13657", "nl": "scorpions have a low rate of reproduction", "fol": "", "prediction": ["all x.(Scorpion(x) -> LowReproductionRate(x))"]}
{"id": "eqasc_train_13658", "nl": "astronauts require preserved food for extended flights", "fol": "", "prediction": ["all x y.((Astronaut(x) & PreservedFood(y)) -> RequiresForExtendedFlights(x,y))"]}
{"id": "eqasc_train_13659", "nl": "Space travel is for trained astronauts only.", "fol": "", "prediction": ["all x.(SpaceTravel(x) -> (TrainedAstronaut(x) & -TrainedAstronaut(x)))"]}
{"id": "eqasc_train_13660", "nl": "space travelers require preserved food for extended flights", "fol": "", "prediction": ["all x y.((SpaceTraveler(x) & ExtendedFlight(y)) -> RequiresPreservedFood(x,y))"]}
{"id": "eqasc_train_13661", "nl": "Freeze-drying Freeze drying is a method of preserving materials.", "fol": "", "prediction": ["all x.(FreezeDrying(x) -> PreservesMaterials(x))"]}
{"id": "eqasc_train_13662", "nl": "Freeze drying food keeps it viable for extended flights. ", "fol": "", "prediction": ["all x.(FreezeDryingFood(x) -> ViableForExtendedFlights(x))"]}
{"id": "eqasc_train_13663", "nl": "An astronaut is a scientist who is a space explorer.", "fol": "", "prediction": ["all x.(Astronaut(x) -> (Scientist(x) & SpaceExplorer(x)))"]}
{"id": "eqasc_train_13664", "nl": "A scientist who is a space explorer requires preserved food for extended flights.", "fol": "", "prediction": ["all x.((Scientist(x) & SpaceExplorer(x)) -> RequiresPreservedFoodForExtendedFlights(x))"]}
{"id": "eqasc_train_13665", "nl": "Mostly for reasons of preservation, some food is dehydrated for consumption here on Earth.", "fol": "", "prediction": ["exists x.(Food(x) & DehydratedForEarth(x))"]}
{"id": "eqasc_train_13666", "nl": "astronauts require dehydrated food for extended flights", "fol": "", "prediction": ["all x y.((Astronaut(x) & DehydratedFood(y)) -> RequiresForExtendedFlights(x,y))"]}
{"id": "eqasc_train_13667", "nl": "Space explorers require preserved food for long flights.", "fol": "", "prediction": ["all x.(SpaceExplorer(x) -> RequiresPreservedFood(x))"]}
{"id": "eqasc_train_13668", "nl": "Astronauts go out into space.", "fol": "", "prediction": ["all x.(Astronaut(x) -> GoesOutIntoSpace(x))"]}
{"id": "eqasc_train_13669", "nl": "those who go out into space require preserved food for extended flights", "fol": "", "prediction": ["all x.((GoesOutIntoSpace(x) & RequiresPreservedFoodForExtendedFlights(x)) -> RequiresPreservedFoodForExtendedFlights(x))"]}
{"id": "eqasc_train_13670", "nl": "Most of the Shuttle foods are preserved by dehydration, which saves weight and storage space.", "fol": "", "prediction": ["all x.(ShuttleFood(x) -> (PreservedByDehydration(x) & SavesWeight(x) & SavesStorageSpace(x)))"]}
{"id": "eqasc_train_13671", "nl": "Astronauts travel into space aboard space shuttles.", "fol": "", "prediction": ["all x y.((Astronaut(x) & SpaceShuttle(y)) -> TravelsInto(x,y))"]}
{"id": "eqasc_train_13672", "nl": "Space shuttle travelers require preserved food for extended flights", "fol": "", "prediction": ["all x y.((SpaceShuttleTraveler(x) & SpaceShuttle(y)) -> RequiresPreservedFood(x,y))"]}
{"id": "eqasc_train_13673", "nl": "Crewmembers are astronauts Virgil 1.", "fol": "", "prediction": ["all x.(Crewmember(x) -> (Astronaut(x) & Virgil(x)))"]}
{"id": "eqasc_train_13674", "nl": "Crewmembers require preserved food for extended flights.", "fol": "", "prediction": ["all x.(Crewmember(x) -> RequiresPreservedFood(x))"]}
{"id": "eqasc_train_13675", "nl": "Rockets are used in space flight.", "fol": "", "prediction": ["all x.(Rocket(x) -> UsedInSpaceFlight(x))"]}
{"id": "eqasc_train_13676", "nl": "astronauts require preserved food for space", "fol": "", "prediction": ["all x y.((Astronaut(x) & Space(y)) -> RequiresPreservedFood(x,y))"]}
{"id": "eqasc_train_13677", "nl": "For example, food contains Calories, units of energy content.", "fol": "", "prediction": ["all x.(Food(x) -> (ContainsCalories(x) & EnergyContent(x)))"]}
{"id": "eqasc_train_13678", "nl": "astronauts require energy for extended flights", "fol": "", "prediction": ["all x y.((Astronaut(x) & ExtendedFlight(y)) -> RequiresEnergyFor(x,y))"]}
{"id": "eqasc_train_13679", "nl": "Custom foods and meals can be created.", "fol": "", "prediction": ["all x.(CustomFood(x) & CustomMeal(x))"]}
{"id": "eqasc_train_13680", "nl": "astronauts require preserved meals for extended flights.", "fol": "", "prediction": ["all x.(Astronaut(x) -> RequiresPreservedMeals(x))"]}
{"id": "eqasc_train_13681", "nl": "On their trips into space, astronauts eat foods preserved by irradiation.", "fol": "", "prediction": ["all x y.((Astronaut(x) & TripIntoSpace(x)) -> EatsFoodsPreservedByIrradiation(x,y))"]}
{"id": "eqasc_train_13682", "nl": "Astronauts require food that is irradiated while in space", "fol": "", "prediction": ["all x y.((Astronaut(x) & Space(y)) -> (RequiresFood(x,y) & Irradiated(x)))"]}
{"id": "eqasc_train_13683", "nl": "Food has been irradiated for our astronauts for over 30 years.", "fol": "", "prediction": ["all x y.((Food(x) & Astronaut(y)) -> IrradiatedFor(x,y))"]}
{"id": "eqasc_train_13684", "nl": "food is irradiated for space travel", "fol": "", "prediction": ["all x y.((Food(x) & SpaceTravel(y)) -> IrradiatedFor(x,y))"]}
{"id": "eqasc_train_13685", "nl": "Preservatives are added to extend the shelf life.", "fol": "", "prediction": ["all x.(Preservative(x) -> ExtendedShelfLife(x))"]}
{"id": "eqasc_train_13686", "nl": "Preservatives are added to food to prolong it's shelf life.", "fol": "", "prediction": ["all x y.((Preservative(x) & Food(y)) -> (AddedTo(x,y) & ProlongsShelfLife(x,y)))"]}
{"id": "eqasc_train_13687", "nl": "Almost of process food, canned food and preserved food are decreased in their nutritive value.", "fol": "", "prediction": ["all x.((ProcessFood(x) | CancelledFood(x) | PreservedFood(x)) -> DecreasedNutritiveValue(x))"]}
{"id": "eqasc_train_13688", "nl": "astronauts require canned food for extended flights", "fol": "", "prediction": ["all x y.((Astronaut(x) & CannyFood(y)) -> RequiresForExtendedFlights(x,y))"]}
{"id": "eqasc_train_13689", "nl": "Invertebrates are animals that lack a vertebral column, or backbone.", "fol": "", "prediction": ["all x.(Invertebrates(x) -> (LacksVertebralColumn(x) | LacksBackbone(x)))"]}
{"id": "eqasc_train_13690", "nl": "jellyfish lack a backbone", "fol": "", "prediction": ["all x.(Jellyfish(x) -> -HasBackbone(x))"]}
{"id": "eqasc_train_13691", "nl": "insects don't have backbones", "fol": "", "prediction": ["all x.(Insect(x) -> -HasBackbone(x))"]}
{"id": "eqasc_train_13692", "nl": "Fish are aquatic animals that do not lack a vertebral column", "fol": "", "prediction": ["all x.(Fish(x) -> (AquaticAnimal(x) & -LacksVertebralColumn(x)))"]}
{"id": "eqasc_train_13693", "nl": "Invertebrates are just as nutritious as vertebrates.", "fol": "", "prediction": ["all x y.((Invertebrate(x) & Vertebrate(y)) -> Nutritious(x,y))"]}
{"id": "eqasc_train_13694", "nl": "animals without backbones are just as nutritious", "fol": "", "prediction": ["all x.((Animal(x) & -Backbone(x)) -> Nutritious(x))"]}
{"id": "eqasc_train_13695", "nl": "insects are animals that lack a vertebral column, or backbone", "fol": "", "prediction": ["all x.(Insect(x) -> (Animal(x) & -VertebralColumn(x) & -Backbone(x)))"]}
{"id": "eqasc_train_13696", "nl": "Insects lack a vertebral column or backbone", "fol": "", "prediction": ["all x.(Insect(x) -> (LacksVertebralColumn(x) | LacksBackbone(x)))"]}
{"id": "eqasc_train_13697", "nl": "insects lack a vertebral column", "fol": "", "prediction": ["all x.(Insect(x) -> LacksVertebralColumn(x))"]}
{"id": "eqasc_train_13698", "nl": "All of the vertebral bodies act as a support column to hold up the spine.", "fol": "", "prediction": ["all x.(VertebralBody(x) -> (AsSupportColumn(x) & HoldsUpSpine(x)))"]}
{"id": "eqasc_train_13699", "nl": "Invertebrates are animals that lack a support column", "fol": "", "prediction": ["all x.(Invertebrate(x) -> (Animal(x) & LacksSupportColumn(x)))"]}
{"id": "eqasc_train_13700", "nl": "Invertebrates are animals without backbones, and vertebrates are animals with backbones.", "fol": "", "prediction": ["(all x.(Invertebrate(x) -> -Backbone(x)) & all y.(Vertebrate(y) -> Backbone(y)))"]}
{"id": "eqasc_train_13701", "nl": "vertebrates have a backbone", "fol": "", "prediction": ["all x.(Vertebrate(x) -> HasBackbone(x))"]}
{"id": "eqasc_train_13702", "nl": "Millipedes, spiders and other invertebrates are probably taken as well.", "fol": "", "prediction": ["all x.((Millipede(x) | Spider(x) | Invertebrate(x)) -> TakenAsWell(x))"]}
{"id": "eqasc_train_13703", "nl": "Millipedes lack a vertebral column.", "fol": "", "prediction": ["all x.(Millipede(x) -> LacksVertebralColumn(x))"]}
{"id": "eqasc_train_13704", "nl": "Lobsters are invertebrates, animals without a backbone.", "fol": "", "prediction": ["all x.(Lobster(x) -> (Invertebrate(x) & Animal(x) & -Backbone(x)))"]}
{"id": "eqasc_train_13705", "nl": "Lobsters do not have a backbone", "fol": "", "prediction": ["all x.(Lobster(x) -> -HasBackbone(x))"]}
{"id": "eqasc_train_13706", "nl": "Snails and slugs are invertebrates.", "fol": "", "prediction": ["all x.((Snail(x) | Slug(x)) -> Invertebrate(x))"]}
{"id": "eqasc_train_13707", "nl": "Snails and slugs lack a backbone.", "fol": "", "prediction": ["all x.((Snail(x) | Slug(x)) -> LacksBackbone(x))"]}
{"id": "eqasc_train_13708", "nl": "Many invertebrates have an exoskeleton.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> HasExoskeleton(x))"]}
{"id": "eqasc_train_13709", "nl": "Many animals that lack a vertebral column, or backbone have an exoskeleton", "fol": "", "prediction": ["all x.((Animal(x) & (-VertebralColumn(x) | -Backbone(x))) -> HasExoskeleton(x))"]}
{"id": "eqasc_train_13710", "nl": "snails lack a vertebral column", "fol": "", "prediction": ["all x.(Snail(x) -> (LacksVertebralColumn(x) & -LacksVertebralColumn(x)))"]}
{"id": "eqasc_train_13711", "nl": "Geckos have backbones and are reptiles.", "fol": "", "prediction": ["all x.(Geckos(x) -> (HasBackbones(x) & Reptile(x)))"]}
{"id": "eqasc_train_13712", "nl": "Geckos are not invertebrates", "fol": "", "prediction": ["all x.(Geckos(x) -> -Invertebrate(x))"]}
{"id": "eqasc_train_13713", "nl": "Insects lack a backbone", "fol": "", "prediction": ["all x.(Insect(x) -> LacksBackbone(x))"]}
{"id": "eqasc_train_13714", "nl": "Principal invertebrates are anostracans and ostracods.", "fol": "", "prediction": ["all x.(Invertebrate(x) -> (Anostrate(x) | Ostracod(x)))"]}
{"id": "eqasc_train_13715", "nl": "Anostrans lack a vertebral column, or backbone.", "fol": "", "prediction": ["all x.(Anostrans(x) -> (LacksVertebralColumn(x) | LacksBackbone(x)))"]}
{"id": "eqasc_train_13716", "nl": "a glacier causes mechanical weathering", "fol": "", "prediction": ["all x.(Glacier(x) -> CausesMechanicalWeathering(x))"]}
{"id": "eqasc_train_13717", "nl": "A glacier produces detritus.", "fol": "", "prediction": ["all x.(Glacier(x) -> ProducesDetritus(x))"]}
{"id": "eqasc_train_13718", "nl": "glaciers break down rocks", "fol": "", "prediction": ["all x y.((Glacier(x) & Rock(y)) -> BreaksDown(x,y))"]}
{"id": "eqasc_train_13719", "nl": "Mechanical weathering happens when things like ice physically break rock apart.", "fol": "", "prediction": ["all x.((Ice(x) & PhysicallyBreaksRock(x)) -> MechanicalWeathering(x))"]}
{"id": "eqasc_train_13720", "nl": "Glaciers cause rocks to break apart", "fol": "", "prediction": ["all x y.((Glacier(x) & Rock(y)) -> CausesBreakApart(x,y))"]}
{"id": "eqasc_train_13721", "nl": "Mechanical weathering creates sediment that is transported via wind, water, and ice.", "fol": "", "prediction": ["all x.(MechanicalWeathering(x) -> (CreatesSediment(x) & TransportedViaWindWaterIce(x)))"]}
{"id": "eqasc_train_13722", "nl": "glaciers create sediment", "fol": "", "prediction": ["all x y.((Glacier(x) & Glacier(y)) -> CreatesSediment(x,y))"]}
{"id": "eqasc_train_13723", "nl": "Largest of the glacier-formed lakes is Karakul.", "fol": "", "prediction": ["all x.((Lake(x) & GlacierFormed(x)) -> Karakul(x))"]}
{"id": "eqasc_train_13724", "nl": "Lakes can be formed by mechanical weathering", "fol": "", "prediction": ["all x.(Lake(x) -> (FormedByMechanicalWeathering(x) & FormedByMechanicalWeathering(x)))"]}
{"id": "eqasc_train_13725", "nl": "Glaciers produce detritus", "fol": "", "prediction": ["all x.(Glacier(x) -> ProducesDetritus(x))"]}
{"id": "eqasc_train_13726", "nl": "A glacier can produce detritus. ", "fol": "", "prediction": ["all x.(Glacier(x) -> CanProduceDetritus(x))"]}
{"id": "eqasc_train_13727", "nl": "eating food that contains pesticides can have a negative impact on humans", "fol": "", "prediction": ["all x y.((EatsFood(x) & ContainsPesticides(x)) -> NegativeImpactOnHumans(y))"]}
{"id": "eqasc_train_13728", "nl": "Herbicides are the leading type of pesticides, in terms of both user expenditure and volumes used.", "fol": "", "prediction": ["all x.(Herbicide(x) -> (LeadingTypeOfPesticide(x) & UserExpense(x) & VolumesUsed(x)))"]}
{"id": "eqasc_train_13729", "nl": "eating food that contains herbicides can have a negative impact on humans", "fol": "", "prediction": ["all x.((EatsFood(x) & ContainsHerbicides(x)) -> NegativeImpactOnHumans(x))"]}
{"id": "eqasc_train_13730", "nl": "Pesticides are chemicals that kill pests.", "fol": "", "prediction": ["all x.(Pesticide(x) -> KillsPests(x))"]}
{"id": "eqasc_train_13731", "nl": "eating food that contains pest-killing chemicals can have a negative impact on humans", "fol": "", "prediction": ["all x y.((EatsFood(x) & ContainsPestKillingChemicals(x)) -> NegativeImpactOnHumans(y))"]}
{"id": "eqasc_train_13732", "nl": "eating food that contains DDT can have a negative impact on humans", "fol": "", "prediction": ["all x.((EatsFood(x) & ContainsDDT(x)) -> NegativeImpactOnHumans(x))"]}
{"id": "eqasc_train_13733", "nl": "Many pesticides widely used on food are known to cause, or suspected of causing, cancer.", "fol": "", "prediction": ["all x.((Pesticide(x) & WidelyUsedOnFood(x)) -> (CausesCancer(x) | SuspiciousOfCausingCancer(x)))"]}
{"id": "eqasc_train_13734", "nl": "Eating something that contains pesticides has been suspected to cause cancer", "fol": "", "prediction": ["all x y.((Eating(x) & ContainsPesticides(x)) -> CausesCancer(y))"]}
{"id": "eqasc_train_13735", "nl": "Foods such as porous strawberries are hard to wash free of pesticides.", "fol": "", "prediction": ["all x.((Food(x) & PorousStrawberries(x)) -> HardToWashFreeOfPesticides(x))"]}
{"id": "eqasc_train_13736", "nl": "Eating unwashed strawberries can have a negative impact on humans.", "fol": "", "prediction": ["all x.((EatsUnwashedStrawberries(x) & Humans(x)) -> NegativeImpact(x))"]}
{"id": "eqasc_train_13737", "nl": "For humans, a pesticide exposure means getting pesticides in or on the body.", "fol": "", "prediction": ["all x.(PesticideExposure(x) -> (InOrOnBody(x) | OnBody(x)))"]}
{"id": "eqasc_train_13738", "nl": "Pesticide exposure for people means getting pesticides in or on the body which can have a negative impact.", "fol": "", "prediction": ["all x.(PesticideExposition(x) -> (InOrOnBody(x) & NegativeImpact(x)))"]}
{"id": "eqasc_train_13739", "nl": "Mammals generate heat mainly by keeping their metabolic rate high.", "fol": "", "prediction": ["all x.(Mammal(x) -> (GeneratesHeat(x) & HighMetabolicRate(x)))"]}
{"id": "eqasc_train_13740", "nl": "And resting metabolic rate is a big contributor to calories burning.", "fol": "", "prediction": ["all x.((MetabolicRate(x) & Resting(x)) -> ContributesToCaloriesBurning(x))"]}
{"id": "eqasc_train_13741", "nl": "Mammals generate heat mainly by burning calories.", "fol": "", "prediction": ["all x.(Mammal(x) -> (GeneratesHeat(x) & BurnsCalories(x)))"]}
{"id": "eqasc_train_13742", "nl": "Aerobic exercise also contributes to the increased the metabolic rate.", "fol": "", "prediction": ["all x.(AerobicExercise(x) -> IncreasedMetabolicRate(x))"]}
{"id": "eqasc_train_13743", "nl": "Mammals can generate heat  by Aerobic exercise", "fol": "", "prediction": ["all x.(Mammal(x) -> GeneratesHeatByAerobicExercise(x))"]}
{"id": "eqasc_train_13744", "nl": "Humans use food to generate body heat.", "fol": "", "prediction": ["all x.(Human(x) -> GeneratesBodyHeat(x))"]}
{"id": "eqasc_train_13745", "nl": "food keeps mammals' metabolic rates high", "fol": "", "prediction": ["all x y.((Food(x) & Mammal(y)) -> KeepsMetabolicRatesHigh(x,y))"]}
{"id": "eqasc_train_13746", "nl": "Faster metabolism means more calories consumed, and usually, weight loss.", "fol": "", "prediction": ["all x.(FastMetabolism(x) -> (MoreCaloriesConsumed(x) & UsuallyWeightLoss(x)))"]}
{"id": "eqasc_train_13747", "nl": "mammals generate heat by consuming calories", "fol": "", "prediction": ["all x.(Mammal(x) -> (GeneratesHeat(x) & ConsumesCalories(x)))"]}
{"id": "eqasc_train_13748", "nl": "humans generate heat mainly by keeping their metabolic rate high", "fol": "", "prediction": ["all x.(Human(x) -> (GeneratesHeat(x) & KeepsMetabolicRateHigh(x)))"]}
{"id": "eqasc_train_13749", "nl": "Birds have a high metabolic rate and a high energy requirement.", "fol": "", "prediction": ["all x.(Bird(x) -> (HighMetabolicRate(x) & HighEnergyRequirement(x)))"]}
{"id": "eqasc_train_13750", "nl": "birds are mammals that generate heat and have a high energy requirement ", "fol": "", "prediction": ["all x.(Bird(x) -> (Mammal(x) & GeneratesHeat(x) & HighEnergyRequirement(x)))"]}
{"id": "eqasc_train_13751", "nl": "All dolphins are mammals and all mammals breathe air.", "fol": "", "prediction": ["all x.(Dolphin(x) -> (Mammal(x) & BreathesAir(x)))"]}
{"id": "eqasc_train_13752", "nl": "Dolphins generate heat by keeping their metabolic rate high.", "fol": "", "prediction": ["all x.(Dolphin(x) -> (GeneratesHeat(x) & KeepsMetabolicRateHigh(x)))"]}
{"id": "eqasc_train_13753", "nl": "Gray Squirrel Management Tree squirrels are common Alabama mammals.", "fol": "", "prediction": ["all x.(TreeSquirrelManagement(x) -> (Mammal(x) & CommonAlabama(x)))"]}
{"id": "eqasc_train_13754", "nl": "tree squirrels generate heat mainly by keeping their metabolic rate high", "fol": "", "prediction": ["all x.(TreeSquirrel(x) -> (GeneratesHeat(x) & KeepsMetabolicRateHigh(x)))"]}
{"id": "eqasc_train_13755", "nl": "Shrews have the highest metabolism of any mammal.", "fol": "", "prediction": ["all x.(Shrew(x) -> HighestMetabolismOfMammal(x))"]}
{"id": "eqasc_train_13756", "nl": "Shrews generate the most heat by keeping their metabolic rate high", "fol": "", "prediction": ["all x.(Shrew(x) -> (GeneratesMostHeat(x) & KeepsMetabolicRateHigh(x)))"]}
{"id": "eqasc_train_13757", "nl": "Excess body weight raises metabolic heat production.", "fol": "", "prediction": ["all x.(ExcessBodyWeight(x) -> IncreasesMetabolicHeatProduction(x))"]}
{"id": "eqasc_train_13758", "nl": "excess body weight raises metabolism", "fol": "", "prediction": ["all x.(ExcessBodyWeight(x) -> RaisesMetabolism(x))"]}
{"id": "eqasc_train_13759", "nl": "pugs generate heat mainly by keeping their metabolic rate high", "fol": "", "prediction": ["all x.(Pug(x) -> (GeneratesHeat(x) & KeepsMetabolicRateHigh(x)))"]}
{"id": "eqasc_train_13760", "nl": "refracting sunlight causes sunlight to split into different colors", "fol": "", "prediction": ["all x y.((RefractingSunlight(x) & Sunlight(y)) -> CausesSunlightToSplitIntoDifferentColors(x,y))"]}
{"id": "eqasc_train_13761", "nl": "Sunlight passed through a prism is split into the colors of the spectrum", "fol": "", "prediction": ["all x y.((Sunlight(x) & PassedThroughPrism(x)) -> SplitIntoColorsOfSpectrum(x,y))"]}
{"id": "eqasc_train_13762", "nl": "Colors are the Rainbow spectrum.", "fol": "", "prediction": ["all x.(Color(x) -> RainbowSpectrum(x))"]}
{"id": "eqasc_train_13763", "nl": "refracting sunlight causes rainbows", "fol": "", "prediction": ["all x y.((RefractingSunlight(x) & Rainbow(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_13764", "nl": "Light splits into different colors when sunlight hits raindrops", "fol": "", "prediction": ["all x y.((Light(x) & Sunlight(y) & HitsRaindrops(y)) -> SplitsIntoDifferentColors(x,y))"]}
{"id": "eqasc_train_13765", "nl": "prisms cause sunlight to split into different colors", "fol": "", "prediction": ["all x y.((Prism(x) & Sunlight(y)) -> CausesSunlightToSplitIntoDifferentColors(x,y))"]}
{"id": "eqasc_train_13766", "nl": " bending light rays separates them into different colors", "fol": "", "prediction": ["all x y.((BbendingLightRays(x) & Color(y)) -> SeparatesIntoDifferentColors(x,y))"]}
{"id": "eqasc_train_13767", "nl": "Lenses bend, or refract, light.", "fol": "", "prediction": ["all x.(Lens(x) -> (Bends(x) | Refracts(x)))"]}
{"id": "eqasc_train_13768", "nl": "Lenses cause sunlight to split into different colors.", "fol": "", "prediction": ["all x.(Lens(x) -> CausesSunlightToSplitIntoDifferentColors(x))"]}
{"id": "eqasc_train_13769", "nl": "bending of light rays causes sunlight to split into different colors", "fol": "", "prediction": ["all x y.((BornOfLightRays(x) & Sunlight(y)) -> CausesSunlightToSplitIntoDifferentColors(x,y))"]}
{"id": "eqasc_train_13770", "nl": "White sunlight is split into a rainbow of colors.", "fol": "", "prediction": ["all x.(WhiteSunlight(x) -> SplitIntoRainbowOfColors(x))"]}
{"id": "eqasc_train_13771", "nl": "Refracting sunlight causes a rainbow of different colors.", "fol": "", "prediction": ["all x.(RefractingSunlight(x) -> CausesRainbowOfDifferentColors(x))"]}
{"id": "eqasc_train_13772", "nl": "When Sunlight passes through a prism, the light is separated into a rainbow of different colors.", "fol": "", "prediction": ["all x y.((Sunlight(x) & Prism(y)) -> (PassesThrough(x,y) & LightSeparatedIntoRainbow(x)))"]}
{"id": "eqasc_train_13773", "nl": "Refracting sunlight causes sunlight to split into colors and form a rainbow.", "fol": "", "prediction": ["all x.(RefractingSunlight(x) -> (SunlightSplitsIntoColors(x) & FormsRainbow(x)))"]}
{"id": "eqasc_train_13774", "nl": "Tiny water droplets refract light, just like a prism does.", "fol": "", "prediction": ["all x y.((TinyWaterDroplet(x) & Prism(y)) -> RefractsLight(x,y))"]}
{"id": "eqasc_train_13775", "nl": "A prism causes sunlight to split into different colors", "fol": "", "prediction": ["all x y.((Prism(x) & Sunlight(y)) -> CausesSunlightToSplitIntoDifferentColors(x,y))"]}
{"id": "eqasc_train_13776", "nl": "telephones are used for communication by two people by transmitting sound", "fol": "", "prediction": ["all x y.((Telephone(x) & Person(y)) -> (TransmitsSound(x,y) & UsedForCommunication(x,y)))"]}
{"id": "eqasc_train_13777", "nl": "Additionally, sound can be transmitted with video.", "fol": "", "prediction": ["all x.(SoundTransmittedWithVideo(x) -> -TransmittedWithVideo(x))"]}
{"id": "eqasc_train_13778", "nl": "Telephones and videos can be used for communication.", "fol": "", "prediction": ["all x.((Telephone(x) | Video(x)) -> CanBeUsedForCommunication(x))"]}
{"id": "eqasc_train_13779", "nl": "And the sound of their voice becomes important as well.", "fol": "", "prediction": ["(all x.(Voice(x) -> ImportantSound(x)))"]}
{"id": "eqasc_train_13780", "nl": "Two people can transmit their voice with telephones.", "fol": "", "prediction": ["all x.(Person(x) -> TransmitVoiceWithTelephones(x))"]}
{"id": "eqasc_train_13781", "nl": "Loudspeakers then turn the signals into sounds.", "fol": "", "prediction": ["all x y.((Loudspeaker(x) & Signal(y)) -> TurnsIntoSound(x,y))"]}
{"id": "eqasc_train_13782", "nl": "telephones are used for communication by two people by transmitting signals", "fol": "", "prediction": ["all x y.((Telephone(x) & Person(y)) -> (TransmitsSignals(x,y) & UsedForCommunication(x,y)))"]}
{"id": "eqasc_train_13783", "nl": "Telephone conversations and data are transmitted through optical fibers.", "fol": "", "prediction": ["all x y.((TelephoneConversation(x) & Data(y)) -> TransmittedThroughOpticalFibers(x))"]}
{"id": "eqasc_train_13784", "nl": "Communication through phones is transmitted through optical fibers", "fol": "", "prediction": ["all x y.((Phone(x) & Phone(y)) -> (TransmittedThroughOpticalFibers(x,y)))"]}
{"id": "eqasc_train_13785", "nl": "All sounds are waves produced by the vibrations of material objects.", "fol": "", "prediction": ["all x.(Sound(x) -> (VibrationsOfMaterialObjects(x) & ProducedBy(x,y)))"]}
{"id": "eqasc_train_13786", "nl": "Telephones are used for communication by two people by transmitting waves produced by the vibrations of material objects.", "fol": "", "prediction": ["all x y.((Telephone(x) & Person(y)) -> (TransmitsWaves(x,y) & ProducesVibrationsOfMaterialObjects(x)))"]}
{"id": "eqasc_train_13787", "nl": "When a wave is audible, it is called a sound wave .", "fol": "", "prediction": ["all x.((Wave(x) & Audible(x)) -> SoundWave(x))"]}
{"id": "eqasc_train_13788", "nl": "Telephones are used for communication by transmitting audible waves.", "fol": "", "prediction": ["all x.(Telephone(x) -> (TransmitsAudiibleWaves(x) & Communication(x)))"]}
{"id": "eqasc_train_13789", "nl": "Cell phones are, bottom line, radios with a connection to a telephone company.", "fol": "", "prediction": ["all x.(CellPhone(x) -> (Radio(x) & TelephoneCompanyConnection(x)))"]}
{"id": "eqasc_train_13790", "nl": "Cell phones are used for communication by two people by transmitting sound", "fol": "", "prediction": ["all x y.((CellPhone(x) & Person(y)) -> (TransmitsSound(x,y) & UsedForCommunication(x,y)))"]}
{"id": "eqasc_train_13791", "nl": "Telephones are used for communication by two people by transmitting mechanical waves. ", "fol": "", "prediction": ["all x y.((Telephone(x) & Person(y)) -> TransmitsMechanicalWaves(x,y))"]}
{"id": "eqasc_train_13792", "nl": "Sound waves are longitudinal waves.", "fol": "", "prediction": ["all x.(SoundWaves(x) -> LongitudinalWaves(x))"]}
{"id": "eqasc_train_13793", "nl": "telephones are used for communication by two people by transmitting waves", "fol": "", "prediction": ["all x y.((Telephone(x) & Person(y)) -> (TransmitsWaves(x,y) & UsedForCommunication(x,y)))"]}
{"id": "eqasc_train_13794", "nl": "telephones are used for communication by two people transmitting waves", "fol": "", "prediction": ["all x y.((Telephone(x) & Person(y) & TransmitsWaves(y,x)) -> UsedForCommunication(x,y))"]}
{"id": "eqasc_train_13795", "nl": "Generally, a telephone is any device which conveys sound over a distance.", "fol": "", "prediction": ["all x.(Telephone(x) -> ConveysSoundOverDistance(x))"]}
{"id": "eqasc_train_13796", "nl": "telephones can communicate over distance", "fol": "", "prediction": ["all x.(Telephone(x) -> CommunicatesOverDistance(x))"]}
{"id": "eqasc_train_13797", "nl": "darkness has a negative impact on photosynthesis", "fol": "", "prediction": ["all x.(Darkness(x) -> NegativeImpactOnPhotosynthesis(x))"]}
{"id": "eqasc_train_13798", "nl": "Plant growth is dependent on photosynthesis.", "fol": "", "prediction": ["all x.(PlantGrowth(x) -> DependentOnPhotosynthesis(x))"]}
{"id": "eqasc_train_13799", "nl": "Darkness has a negative impact on plant growth.", "fol": "", "prediction": ["all x.(Darkness(x) -> NegativeImpactOnPlantGrowth(x))"]}
{"id": "eqasc_train_13800", "nl": "Plants use photosynthesis to make food.", "fol": "", "prediction": ["all x.(Plant(x) -> UsesPhotosynthesisToMakeFood(x))"]}
{"id": "eqasc_train_13801", "nl": "darkness negatively affects plant life", "fol": "", "prediction": ["all x y.((Darkness(x) & PlantLife(y)) -> NegativelyAffects(x,y))"]}
{"id": "eqasc_train_13802", "nl": "Darkness has a negative impact in how plants feed themselves.", "fol": "", "prediction": ["all x.(Darkness(x) -> NegativeImpactInPlantFeeding(x))"]}
{"id": "eqasc_train_13803", "nl": "During a solar eclipse , the sky can get quite dark.", "fol": "", "prediction": ["all x.(SolarEclipse(x) -> (SkyCanGetDark(x)))"]}
{"id": "eqasc_train_13804", "nl": "solar eclipse has a negative impact on photosynthesis", "fol": "", "prediction": ["all x.(SolarEclipse(x) -> NegativeImpactOnPhotosynthesis(x))"]}
{"id": "eqasc_train_13805", "nl": "darkness has a negative impact on plant growth", "fol": "", "prediction": ["all x.(Darkness(x) -> NegativeImpactOnPlantGrowth(x))"]}
{"id": "eqasc_train_13806", "nl": "darkness has an impact on the energy the sun releases", "fol": "", "prediction": ["all x y.((Darkness(x) & Sun(y)) -> ImpactOnEnergy(x,y))"]}
{"id": "eqasc_train_13807", "nl": "Darkness has a negative impact on the amount of carbohydrates formed in a plant.", "fol": "", "prediction": ["all x y.((Darkness(x) & Plant(y)) -> NegativeImpactOnCarbohydrates(x,y))"]}
{"id": "eqasc_train_13808", "nl": "Light is necessary for photosynthesis, a process that produces oxygen.", "fol": "", "prediction": ["all x.((Light(x) & Photosynthesis(x)) -> ProducesOxygen(x))"]}
{"id": "eqasc_train_13809", "nl": "Darkness has a negative impact on the process that produces oxygen", "fol": "", "prediction": ["all x.(Darkness(x) -> NegativeImpactOnOxygenProcess(x))"]}
{"id": "eqasc_train_13810", "nl": "protein is used to repair cells by the human body", "fol": "", "prediction": ["all x y.((Protein(x) & HumanBody(y)) -> UsedToRepairCells(x,y))"]}
{"id": "eqasc_train_13811", "nl": "Meat, fish and chicken are rich sources of protein.", "fol": "", "prediction": ["all x.((Meat(x) | Fish(x) | Chicken(x)) -> RichProteinSource(x))"]}
{"id": "eqasc_train_13812", "nl": "Meat, fish and chicken are used to repair cells by the human body.", "fol": "", "prediction": ["all x y.((Meat(x) & Fish(y) & Chicken(y)) -> (RepairsCells(x,y) & HumanBody(x)))"]}
{"id": "eqasc_train_13813", "nl": "All milk contains protein.", "fol": "", "prediction": ["all x.(Milk(x) -> ContainsProtein(x))"]}
{"id": "eqasc_train_13814", "nl": "milk helps to repair cells in the human body", "fol": "", "prediction": ["all x y.((Milk(x) & HumanBody(y)) -> HelpsRepairCells(x,y))"]}
{"id": "eqasc_train_13815", "nl": "Proteins are essential to the structure and function of cells.", "fol": "", "prediction": ["all x.(Protein(x) -> (EssentialToStructure(x) & EssentialToFunction(x)))"]}
{"id": "eqasc_train_13816", "nl": "cells need to be repaired regularly to function properly", "fol": "", "prediction": ["all x.((Cell(x) & RepairedRegularly(x)) -> FunctionProperly(x))"]}
{"id": "eqasc_train_13817", "nl": "DNA makes proteins, proteins build cells, and cells make up people.", "fol": "", "prediction": ["all x y z.((DNA(x) & Protein(y) & Cell(z)) -> (MakesProteins(x) & BuildsCells(y) & MakesUpPeople(z)))"]}
{"id": "eqasc_train_13818", "nl": "DNA repairs cells", "fol": "", "prediction": ["all x y.((DNA(x) & Cell(y)) -> Repairs(x,y))"]}
{"id": "eqasc_train_13819", "nl": "Protein is necessary for growth and repair.", "fol": "", "prediction": ["all x.(Protein(x) -> (NecessaryForGrowth(x) & NecessaryForRepair(x)))"]}
{"id": "eqasc_train_13820", "nl": "protein is necessary for cell growth", "fol": "", "prediction": ["all x.(Protein(x) -> NecessaryForCellGrowth(x))"]}
{"id": "eqasc_train_13821", "nl": "Pain in the body indicates there is a wound which requires cell repair and cell regeneration.", "fol": "", "prediction": ["all x.(PainInBody(x) -> (IndicatesWound(x) & RequiresCellRepair(x) & RequiresCellRegeneration(x)))"]}
{"id": "eqasc_train_13822", "nl": "Wound healing requires protein", "fol": "", "prediction": ["all x.(WoundHealing(x) -> RequiresProtein(x))"]}
{"id": "eqasc_train_13823", "nl": "Meat is a good source of protein.", "fol": "", "prediction": ["all x.(Meat(x) -> GoodProteinSource(x))"]}
{"id": "eqasc_train_13824", "nl": "meat can help repair cells in the human body", "fol": "", "prediction": ["all x y.((Meat(x) & HumanBody(y)) -> HelpsRepairCells(x,y))"]}
{"id": "eqasc_train_13825", "nl": "Amino acids form protein.", "fol": "", "prediction": ["all x.(AminoAcid(x) -> FormsProtein(x))"]}
{"id": "eqasc_train_13826", "nl": "Amino acids are used to repair cells by the human body", "fol": "", "prediction": ["all x y.((AminoAcid(x) & HumanBody(y)) -> UsedToRepairCells(x,y))"]}
{"id": "eqasc_train_13827", "nl": "Most foods contain protein.", "fol": "", "prediction": ["all x.(Food(x) -> ContainsProtein(x))"]}
{"id": "eqasc_train_13828", "nl": "food is used to repair cells by the human body", "fol": "", "prediction": ["all x y.((Food(x) & HumanBody(y)) -> UsedToRepairCells(x,y))"]}
{"id": "eqasc_train_13829", "nl": "Enzymes provide cellular energy, repair tissue organs and cells.", "fol": "", "prediction": ["all x.(Enzyme(x) -> (ProvidesCellularEnergy(x) & RepairsTissueOrgansAndCells(x)))"]}
{"id": "eqasc_train_13830", "nl": "Enzymes are a type of protein that provides cellular energy in the human body.", "fol": "", "prediction": ["all x.(Enzyme(x) -> (Protein(x) & ProvidesCellularEnergy(x)))"]}
{"id": "eqasc_train_13831", "nl": "Biomolecules, such as proteins, are composed of one or many chains folded into compact forms.", "fol": "", "prediction": ["all x.((Biomolecule(x) & Protein(x)) -> (ComposedOf(x,y) & (OneChain(y) | ManyChains(y)) & FoldedIntoCompactForm(y)))"]}
{"id": "eqasc_train_13832", "nl": "Biomolecules are used to repair cells by the human body", "fol": "", "prediction": ["all x y z.((Biomolecule(x) & HumanBody(y) & Cell(z)) -> UsedToRepair(x,y,z))"]}
{"id": "eqasc_train_13833", "nl": "wind is used for producing electricity", "fol": "", "prediction": ["all x y.((Wind(x) & Electricity(y)) -> Produces(x,y))"]}
{"id": "eqasc_train_13834", "nl": "We also need gas and electricity for heating and lighting.", "fol": "", "prediction": ["all x.((Welcomes(x) & NeedsGas(x) & NeedsElectricity(x)) -> (Heating(x) | Lighting(x)))"]}
{"id": "eqasc_train_13835", "nl": "Power is produced from wind which is needed for lighting. ", "fol": "", "prediction": ["all x y.((Power(x) & Wind(y)) -> ProducedFrom(x,y))"]}
{"id": "eqasc_train_13836", "nl": "Wind Turbines Wind turbines are windmills that generate electricity.", "fol": "", "prediction": ["all x.(WindTurbine(x) -> (WindTurbine(x) & Windmill(x) & GeneratesElectricity(x)))"]}
{"id": "eqasc_train_13837", "nl": "Turbines are used to producing electricity", "fol": "", "prediction": ["all x.(Turbine(x) -> (UsedToProduceElectricity(x) & ProducesElectricity(x)))"]}
{"id": "eqasc_train_13838", "nl": "Wind powered energy is provided by the wind, collected by using a wind turbine.", "fol": "", "prediction": ["all x y.((WindPoweredEnergy(x) & Wind(y)) -> (Provides(x,y) & Collects(x,y)))"]}
{"id": "eqasc_train_13839", "nl": "Wind turbines can produce electricity ", "fol": "", "prediction": ["all x.(WindTurbine(x) -> ProducesElectricity(x))"]}
{"id": "eqasc_train_13840", "nl": "wind is used for producing energy", "fol": "", "prediction": ["all x.(Wind(x) -> ProducesEnergy(x))"]}
{"id": "eqasc_train_13841", "nl": "Thus electricity is used to produce heat.", "fol": "", "prediction": ["all x.(Electricity(x) -> ProducesHeat(x))"]}
{"id": "eqasc_train_13842", "nl": "wind can be used to produce heat", "fol": "", "prediction": ["all x y.((Wind(x) & Heat(y)) -> Produces(x,y))"]}
{"id": "eqasc_train_13843", "nl": "Wind is air in motion.", "fol": "", "prediction": ["all x.(Wind(x) -> AirInMotion(x))"]}
{"id": "eqasc_train_13844", "nl": "air in motion is used for producing electricity", "fol": "", "prediction": ["all x.(AirInMotion(x) -> ProducesElectricity(x))"]}
{"id": "eqasc_train_13845", "nl": "Pressure differences are used to produce electricity", "fol": "", "prediction": ["all x y.((PressureDifference(x) & Electricity(y)) -> Produces(x,y))"]}
{"id": "eqasc_train_13846", "nl": "This electricity can be used to power households.", "fol": "", "prediction": ["all x.(Electricity(x) -> PowersHouseholds(x))"]}
{"id": "eqasc_train_13847", "nl": "wind can be used to power households.", "fol": "", "prediction": ["all x.(Wind(x) -> PowersHouseholds(x))"]}
{"id": "eqasc_train_13848", "nl": "Wind is caused because of pressure differences in the atmosphere.", "fol": "", "prediction": ["all x.(Wind(x) -> CausedByPressureDifferences(x))"]}
{"id": "eqasc_train_13849", "nl": "something caused by pressure differences in the atmosphere is used for producing electricity", "fol": "", "prediction": ["all x.((CausedByPressureDifferencesInAtmosphere(x) & CausedByPressureDifferencesInAtmosphere(x)) -> UsedForProducingElectricity(x))"]}
{"id": "eqasc_train_13850", "nl": "Differential heating of air produces wind.", "fol": "", "prediction": ["all x.(DifferentialHeatingOfAir(x) -> ProducesWind(x))"]}
{"id": "eqasc_train_13851", "nl": "Differential heating of air can be harnessed for electricity production.", "fol": "", "prediction": ["all x.(DifferentialHeatingOfAir(x) -> CanBeHarnessedForElectricityProduction(x))"]}
{"id": "eqasc_train_13852", "nl": "a radio converts electrical energy into vibrations", "fol": "", "prediction": ["all x y.((Radio(x) & ElectricalEnergy(y)) -> ConvertsToVibrations(x,y))"]}
{"id": "eqasc_train_13853", "nl": "Sound is vibrational energy.", "fol": "", "prediction": ["all x.(Sound(x) -> VibrationalEnergy(x))"]}
{"id": "eqasc_train_13854", "nl": "A radio converts electrical energy into sound.", "fol": "", "prediction": ["all x.(Radio(x) -> ConvertsElectricalEnergyToSound(x))"]}
{"id": "eqasc_train_13855", "nl": "Ordinary hearing is the result of the stimulation of bones in the inner ear by means of vibration.", "fol": "", "prediction": ["all x.(OrdinaryHearing(x) -> (StimulatesBonesInInnerEar(x) & Vibration(x)))"]}
{"id": "eqasc_train_13856", "nl": "human ears can hear a radio", "fol": "", "prediction": ["all x y.((HumanEars(x) & Radio(y)) -> CanHear(x,y))"]}
{"id": "eqasc_train_13857", "nl": "All radio is transmitted electrical energy.", "fol": "", "prediction": ["all x.(Radio(x) -> TransmittedElectricalEnergy(x))"]}
{"id": "eqasc_train_13858", "nl": "electrical energy turns into vibrations", "fol": "", "prediction": ["all x y.((ElectricalEnergy(x) & Vibration(y)) -> TurnsInto(x,y))"]}
{"id": "eqasc_train_13859", "nl": "Sound Sound waves are caused by vibrations in the air.", "fol": "", "prediction": ["all x.(Sound(x) -> CausedByVibrationsInAir(x))"]}
{"id": "eqasc_train_13860", "nl": "A radio creates sound waves.", "fol": "", "prediction": ["all x.(Radio(x) -> CreatesSoundWaves(x))"]}
{"id": "eqasc_train_13861", "nl": "Radios use sound waves", "fol": "", "prediction": ["all x.(Radio(x) -> UsesSoundWaves(x))"]}
{"id": "eqasc_train_13862", "nl": "All sounds are vibrations.", "fol": "", "prediction": ["all x.(Sound(x) -> Vibration(x))"]}
{"id": "eqasc_train_13863", "nl": "a radio converts electrical energy into sound", "fol": "", "prediction": ["all x y.((Radio(x) & ElectricalEnergy(y)) -> ConvertsToSound(x,y))"]}
{"id": "eqasc_train_13864", "nl": "All sound is caused by vibrations.", "fol": "", "prediction": ["all x.(Sound(x) -> CausedByVibrations(x))"]}
{"id": "eqasc_train_13865", "nl": "A radio converts energy into sounds", "fol": "", "prediction": ["all x.(Radio(x) -> ConvertsEnergyToSounds(x))"]}
{"id": "eqasc_train_13866", "nl": "a radio converts the flow of electrons into vibrations", "fol": "", "prediction": ["all x y.((Radio(x) & ElectronFlow(y)) -> ConvertsToVibrations(x,y))"]}
{"id": "eqasc_train_13867", "nl": "Sound, a type of energy, is produced by vibrations and travels in waves.", "fol": "", "prediction": ["all x.((Energy(x) & Sound(x)) -> (ProducedByVibrations(x) & TravelsInWaves(x)))"]}
{"id": "eqasc_train_13868", "nl": "A radio converts electrical energy into sound that travels in waves.", "fol": "", "prediction": ["all x.(Radio(x) -> (ConvertsElectricalEnergy(x) & Sound(x) & TravelsInWaves(x)))"]}
{"id": "eqasc_train_13869", "nl": "A radio uses a battery to make vibrations.", "fol": "", "prediction": ["all x.(Radio(x) -> UsesBattery(x))"]}
{"id": "eqasc_train_13870", "nl": "better senses have a positive impact on an animal 's survival", "fol": "", "prediction": ["all x y.((BetterSenses(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "eqasc_train_13871", "nl": "Sense of smell is the ability to detect odors.", "fol": "", "prediction": ["all x.(SenseOfSmell(x) -> CanDetectOdors(x))"]}
{"id": "eqasc_train_13872", "nl": "Better ability to detect odors has a positive impact on an animal's survival", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> BetterDetectionOdors(x,y))"]}
{"id": "eqasc_train_13873", "nl": "An antelope has such a fine sense of hearing that it senses danger long in advance.", "fol": "", "prediction": ["all x.(Antilope(x) -> (FineSenseOfHearing(x) & SenseDangerLongInAdvance(x)))"]}
{"id": "eqasc_train_13874", "nl": "An antelope's excellent hearing helps it survive", "fol": "", "prediction": ["all x.((Antelope(x) & ExcellentHearing(x)) -> HelpsSurvive(x))"]}
{"id": "eqasc_train_13875", "nl": "Cats have excellent eyesight, hearing and sense of smell.", "fol": "", "prediction": ["all x.(Cat(x) -> (ExcellentEyesight(x) & ExcellentHearing(x) & ExcellentSenseOfSmell(x)))"]}
{"id": "eqasc_train_13876", "nl": "a cat's hearing has a positive impact on its survival", "fol": "", "prediction": ["all x y.((Cat(x) & Hearing(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "eqasc_train_13877", "nl": "Dogs are social animals, but they have an acute sense of smell.", "fol": "", "prediction": ["all x.(Dog(x) -> (SocialAnimal(x) & AcuteSenseOfSmell(x)))"]}
{"id": "eqasc_train_13878", "nl": "better sense of smell has a positive impact on a dog's survival", "fol": "", "prediction": ["all x y.((BetterSenseOfSmell(x) & Dog(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "eqasc_train_13879", "nl": "Animals with better senses have a positive chance of reproduction.", "fol": "", "prediction": ["all x.((Animal(x) & BetterSenses(x)) -> PositiveChanceOfReproduction(x))"]}
{"id": "eqasc_train_13880", "nl": "Bears are curious animals.", "fol": "", "prediction": ["all x.(Bear(x) -> CuriousAnimal(x))"]}
{"id": "eqasc_train_13881", "nl": "better senses have a positive impact on a bear's survival", "fol": "", "prediction": ["all x y.((BetterSenses(x) & Bear(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "eqasc_train_13882", "nl": "Plus, our sense of smell is infinitely better.", "fol": "", "prediction": ["all x.(SenseOfSmell(x) -> InfinitelyBetter(x))"]}
{"id": "eqasc_train_13883", "nl": "Sense of smell impacts an animal's survival", "fol": "", "prediction": ["all x y.((SenseOfSmell(x) & Animal(y)) -> ImpactsSurvival(x,y))"]}
{"id": "eqasc_train_13884", "nl": "Dolphins have an additional sense called echolocation.", "fol": "", "prediction": ["all x.(Dolphin(x) -> HasEcholocation(x))"]}
{"id": "eqasc_train_13885", "nl": "echolocation has a positive impact on an animal 's survival", "fol": "", "prediction": ["all x y.((Echolocation(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "eqasc_train_13886", "nl": "Senses include touch, smell, taste, vision and hearing.", "fol": "", "prediction": ["all x.(Sense(x) -> (Touch(x) | Smell(x) | Taste(x) | Vision(x) | Hearing(x)))"]}
{"id": "eqasc_train_13887", "nl": "Having better vision, taste, touch, hearing and smelling have a positive impact on an animal's survival", "fol": "", "prediction": ["all x y z.((Animal(x) & Vision(y) & Taste(z) & Touch(y) & Hearing(z) & Smelling(z)) -> (BetterVision(x,y) & BetterTaste(x,z) & BetterTouch(x,y) & BetterTouch(x,y) & BetterTouch(x,z) & PositiveImpactOnSurvival(x)))"]}
{"id": "eqasc_train_13888", "nl": "better senses have a positive impact on an animal's ability to live.", "fol": "", "prediction": ["all x.(BetterSenses(x) -> PositiveImpactOnAnimalAbilityToLive(x))"]}
{"id": "eqasc_train_13889", "nl": "Perhaps the most important of the senses is sight.", "fol": "", "prediction": ["Possibly the most important sense of all."]}
{"id": "eqasc_train_13890", "nl": "better sight has a positive impact on an animal's survival", "fol": "", "prediction": ["all x y.((BetterSight(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "eqasc_train_13891", "nl": "An important aspect of survival for any species is reproduction .", "fol": "", "prediction": ["all x.((Species(x) & Reproduction(x)) -> ImportantAspectOfSurvival(x))"]}
{"id": "eqasc_train_13892", "nl": "better senses have a positive impact on an animal 's reproduction", "fol": "", "prediction": ["all x y.((BetterSenses(x) & Animal(y)) -> PositiveImpactOnReproduction(x,y))"]}
{"id": "eqasc_train_13893", "nl": "betters senses have a positive impact on a dog's survival", "fol": "", "prediction": ["all x y.((BetterSenses(x) & Dog(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "eqasc_train_13894", "nl": "Life is reduced to survival .", "fol": "", "prediction": ["all x.(Life(x) -> ReducedToSurvival(x))"]}
{"id": "eqasc_train_13895", "nl": "Better senses have a positive impact on an animal's life.", "fol": "", "prediction": ["all x.(BetterSenses(x) -> PositiveImpactOnAnimalLife(x))"]}
{"id": "eqasc_train_13896", "nl": "Running water is better able to dissolve oxygen and nutrients than standing water.", "fol": "", "prediction": ["all x y.((RunningWater(x) & StandingWater(y)) -> (BetterAbleadsOxygen(x,y) & BetterAbleadsNutrients(x,y)))"]}
{"id": "eqasc_train_13897", "nl": "If the water stands still and becomes stagnant, it can become a breeding ground for mosquitoes.", "fol": "", "prediction": ["all x.((Water(x) & StandsStill(x) & Stagnant(x)) -> BreedingGroundForMosquitoes(x))"]}
{"id": "eqasc_train_13898", "nl": "Running water is better able to dissolve oxygen and nutrients than stagnant water.", "fol": "", "prediction": ["all x y.((RunningWater(x) & StagnantWater(y)) -> BetterAbleToDissolveOxygenAndNutrients(x,y))"]}
{"id": "eqasc_train_13899", "nl": "running h2o is better able to dissolve oxygen and nutrients than standing h2o", "fol": "", "prediction": ["all x y.((RunningH2o(x) & StandingH2o(y)) -> BetterAbleToDissolveOxygenAndNutrients(x,y))"]}
{"id": "eqasc_train_13900", "nl": "Streams and creeks provide running water.", "fol": "", "prediction": ["all x.(Stream(x) | Creek(x))"]}
{"id": "eqasc_train_13901", "nl": "Streams and creeks are better able to dissolve oxygen and nutrients than standing water.", "fol": "", "prediction": ["all x y.((Stream(x) & Creek(y)) -> (BetterAbleadingOxygen(x,y) & BetterAbleadingNutrients(x,y)))"]}
{"id": "eqasc_train_13902", "nl": "streams and creeks are better able to dissolve oxygen and nutrients than standing water.", "fol": "", "prediction": ["all x y.((Stream(x) & Creek(y)) -> (BetterAbleadingOxygen(x,y) & BetterAbleadingNutrients(x,y)))"]}
{"id": "eqasc_train_13903", "nl": "Also, running water in rivers is the major force of erosion on the surface of the earth.", "fol": "", "prediction": ["all x y.((River(x) & RunningWater(y)) -> MajorForceOfErosion(x,y))"]}
{"id": "eqasc_train_13904", "nl": "Rivers are better able to dissolve oxygen and nutrients than standing water.", "fol": "", "prediction": ["all x y.((River(x) & StandingWater(y)) -> BetterAbleToDissolveOxygenAndNutrients(x,y))"]}
{"id": "eqasc_train_13905", "nl": "Large, warm rivers hold populations but few occur in cold running water.", "fol": "", "prediction": ["all x y.((River(x) & Large(x) & Warm(x)) -> (HoldsPopulations(x) & ColdRunningWater(y)))"]}
{"id": "eqasc_train_13906", "nl": "Rivers can better dissolve oxygen and nutrients than lakes.", "fol": "", "prediction": ["all x y.((River(x) & Lake(y)) -> (BetterDissolvesOxygen(x,y) & BetterDissolvesNutrients(x,y)))"]}
{"id": "eqasc_train_13907", "nl": "Mineral nutrients are interrelated.", "fol": "", "prediction": ["all x.(MineralNutrient(x) -> Interrelated(x))"]}
{"id": "eqasc_train_13908", "nl": "Running water is better able to dissolve oxygen and minerals than standing water.", "fol": "", "prediction": ["all x y.((RunningWater(x) & StandingWater(y)) -> (BetterAbleToDissolveOxygen(x,y) & BetterAbleToDissolveMinerals(x,y)))"]}
{"id": "eqasc_train_13909", "nl": "To make it rich in nutrients so the plants are healthier.", "fol": "", "prediction": ["all x.((Plant(x) & RichInNutrients(x)) -> Healthy(x))"]}
{"id": "eqasc_train_13910", "nl": "Running water is healthier for plants than standing water.", "fol": "", "prediction": ["all x y.((RunningWater(x) & StandingWater(y)) -> HealthierForPlants(x,y))"]}
{"id": "eqasc_train_13911", "nl": "Oxygen and nutrients dissolve easily in rivers.", "fol": "", "prediction": ["all x.((Oxygen(x) & Nutrients(x)) -> DissolvesEasilyInRivers(x))"]}
{"id": "eqasc_train_13912", "nl": "running H2O dissolves oxygen better than standing H2O", "fol": "", "prediction": ["all x y.((RunningH2O(x) & StandingH2O(y)) -> DissolvesOxygenBetter(x,y))"]}
{"id": "eqasc_train_13913", "nl": "Blood pressure is highest in arteries and lowest in veins.", "fol": "", "prediction": ["all x y.((BloodPressure(x) & Artery(y)) -> (HighestIn(x,y) & LowestIn(x,y)))"]}
{"id": "eqasc_train_13914", "nl": "What is Blood Pressure Blood pressure is the pressure on the blood vessel walls.", "fol": "", "prediction": ["all x.(BloodPressure(x) -> PressureOnBloodVesselWalls(x))"]}
{"id": "eqasc_train_13915", "nl": "pressure in vessel walls is highest in arteries and lowest in veins", "fol": "", "prediction": ["all x y.((VesselWall(x) & Artery(y)) -> (HighestPressureInVesselWalls(x,y) & LowestPressureInVentilations(x,y)))"]}
{"id": "eqasc_train_13916", "nl": "Blood is brought into the heart by veins and carried away by arteries.", "fol": "", "prediction": ["all x y.((Blood(x) & Venes(y)) -> (BroughtIntoHeart(x,y) & CarriedAwayByArteries(x)))"]}
{"id": "eqasc_train_13917", "nl": "Blood pressure is highest in vessels leading away from the heart", "fol": "", "prediction": ["all x y.((Vessel(x) & Heart(y) & LeadsAwayFrom(x,y)) -> BloodPressureHighest(x))"]}
{"id": "eqasc_train_13918", "nl": "Blood pressure is highest where blood is conducted away from the heart", "fol": "", "prediction": ["all x y.((BloodPressure(x) & Heart(y) & BloodConductedAwayFrom(x,y)) -> Highest(x))"]}
{"id": "eqasc_train_13919", "nl": "Veins are vessels that bring blood to the heart.", "fol": "", "prediction": ["all x.(Vessel(x) -> BringsBloodToHeart(x))"]}
{"id": "eqasc_train_13920", "nl": "Vessels that bring blood to the heart have lower blood pressure than arteries.", "fol": "", "prediction": ["all x y.((Vessel(x) & BringsBloodToHeart(x) & Artery(y)) -> LowerBloodPressure(x,y))"]}
{"id": "eqasc_train_13921", "nl": "Force on the vessel walls is highest in arteries and lowest in veins.", "fol": "", "prediction": ["all x y.((VesselWall(x) & Artery(y)) -> (HighestForce(x,y) & LowestForce(x,y)))"]}
{"id": "eqasc_train_13922", "nl": "By the time blood leaves capillaries and flows into veins, pressure has decreased greatly.", "fol": "", "prediction": ["all x.((BloodLeavesCapillaries(x) & FlowsIntoVines(x)) -> PressureDecreased(x))"]}
{"id": "eqasc_train_13923", "nl": "blood pressure decreases after it leaves the arteries", "fol": "", "prediction": ["all x y.((BloodPressure(x) & Artery(y) & Leaves(x,y)) -> Decreases(x))"]}
{"id": "eqasc_train_13924", "nl": "Blood moves slowly and with very little pressure in veins.", "fol": "", "prediction": ["all x.(Blood(x) -> (MovesSlowly(x) & VeryLittlePressureInVines(x)))"]}
{"id": "eqasc_train_13925", "nl": "pressure is lowest in veins", "fol": "", "prediction": ["all x y.((Vine(x) & Vein(y)) -> LowestPressure(x,y))"]}
{"id": "eqasc_train_13926", "nl": "veins have very low pressure", "fol": "", "prediction": ["all x.(Vibration(x) -> VeryLowPressure(x))"]}
{"id": "eqasc_train_13927", "nl": "Apocymarin raises blood pressure.", "fol": "", "prediction": ["all x.(Apocymarin(x) -> RaisesBloodPressure(x))"]}
{"id": "eqasc_train_13928", "nl": "apocymarin affects veins and arteries", "fol": "", "prediction": ["all x y.((Apocymarin(x) & Veins(y) & Arteries(y)) -> AffectsAndAttributes(x,y))"]}
{"id": "eqasc_train_13929", "nl": "Blood Pressure Blood Pressure Blood pressure is the force of the blood on the artery walls.", "fol": "", "prediction": ["all x.(BloodPressure(x) -> BloodPressure(x))"]}
{"id": "eqasc_train_13930", "nl": "The force of blood is highest in arteries and lowest in veins", "fol": "", "prediction": ["all x y.((Blood(x) & Artery(y)) -> (HighestIn(x,y) & LowestIn(x,y)))"]}
{"id": "eqasc_train_13931", "nl": "Veins take blood to the heart.", "fol": "", "prediction": ["all x.(Vein(x) -> TakesBloodToHeart(x))"]}
{"id": "eqasc_train_13932", "nl": "blood pressure is lowest when blood goes to the heart", "fol": "", "prediction": ["all x y.((BloodPressure(x) & Heart(y) & BloodGoesTo(x,y)) -> Lowest(x))"]}
{"id": "eqasc_train_13933", "nl": " force is highest in arteries and lowest in veins.", "fol": "", "prediction": ["all x y.((Arctic(x) & Vein(y)) -> (HighestIn(x,Arctic) & LowestIn(x,Vinations)))"]}
{"id": "eqasc_train_13934", "nl": "Spores may be dispersed by moving water, wind, or other organisms.", "fol": "", "prediction": ["all x.(Spore(x) -> (MovingWater(x) | MovingWind(x) | MovingOrganisms(x)))"]}
{"id": "eqasc_train_13935", "nl": "Spores Fungi reproduce via spores.", "fol": "", "prediction": ["all x.(SporesFungus(x) -> ReproducesThroughSpores(x))"]}
{"id": "eqasc_train_13936", "nl": "fungi can reproduce with help from moving water, wind, or other organisms", "fol": "", "prediction": ["all x.(Fungus(x) -> (ReproducesWithMovingWater(x) | ReproducesWithWind(x) | ReproducesWithOtherOrganisms(x)))"]}
{"id": "eqasc_train_13937", "nl": "Billions of spores can be produced on a single spore horn.", "fol": "", "prediction": ["all x y.((Spore(x) & SingleSporeHorse(y)) -> ProducesBillionsOf(x,y))"]}
{"id": "eqasc_train_13938", "nl": "Billions of seeds can be spread by moving wind, other organisms, or water.", "fol": "", "prediction": ["all x.((Seed(x) & (MovingWind(x) | MovingOtherOrganisms(x) | MovingWater(x))) -> SpreadsBy(x,y))"]}
{"id": "eqasc_train_13939", "nl": "Most fungi disperse their spores by wind.", "fol": "", "prediction": ["all x.(Fungus(x) -> DispersesByWind(x))"]}
{"id": "eqasc_train_13940", "nl": "fungi disperse materials by moving water, wind, or other organisms.", "fol": "", "prediction": ["all x.(Fungus(x) -> (DispersesMaterials(x) & (MovingWater(x) | MovingWind(x) | MovingOtherOrganisms(x))))"]}
{"id": "eqasc_train_13941", "nl": "fungi reproduce with the help of moving water, wind, or other organisms", "fol": "", "prediction": ["all x.(Fungus(x) -> (ReproducesWithMovingWater(x) | ReproducesWithWind(x) | ReproducesWithOtherOrganisms(x)))"]}
{"id": "eqasc_train_13942", "nl": "Ferns reproduce by spores.", "fol": "", "prediction": ["all x.(Fern(x) -> ReproducesBySpores(x))"]}
{"id": "eqasc_train_13943", "nl": "ferns are helped by wind in reproduction", "fol": "", "prediction": ["all x.(Fern(x) -> HelpedByWind(x))"]}
{"id": "eqasc_train_13944", "nl": "Fungi reproduce via single-celled asexual reproductive body that are dispersed by moving water, wind, or other organisms", "fol": "", "prediction": ["all x.(Fungus(x) -> (Reproduces(x) & SingleCelledAsexualReproductiveBody(x) & DispersedByMovingWaterWindOrOtherOrganisms(x)))"]}
{"id": "eqasc_train_13945", "nl": "a dormant form of bacteria may be dispersed by moving water, wind or other organisms.", "fol": "", "prediction": ["all x.((Bacteria(x) & DormantForm(x)) -> (DispersedByMovingWater(x) | DispersedByMovingWind(x) | DispersedByMovingOrganisms(x)))"]}
{"id": "eqasc_train_13946", "nl": "spores may be dispersed by humans", "fol": "", "prediction": ["all x y.((Spore(x) & Human(y)) -> DispersedBy(x,y))"]}
{"id": "eqasc_train_13947", "nl": "Plastic and other mulches offer a barrier to spore dispersal.", "fol": "", "prediction": ["all x.((Plastic(x) | OtherMulch(x)) -> OffersBorderToSporeDispersal(x))"]}
{"id": "eqasc_train_13948", "nl": "Plastic and other mulches offer a barrier to spores moving", "fol": "", "prediction": ["all x y.((Plastic(x) & Mulch(y)) -> OffersBarriageToSpores(x,y))"]}
{"id": "eqasc_train_13949", "nl": "electrocution causes harm to an organism", "fol": "", "prediction": ["all x y.((Electrocution(x) & Organism(y)) -> CausesHarmTo(x,y))"]}
{"id": "eqasc_train_13950", "nl": "Electrical exposure causing death is referred to as electrocution.", "fol": "", "prediction": ["all x.((ElectricalExposition(x) & CausesDeath(x)) -> Electrocution(x))"]}
{"id": "eqasc_train_13951", "nl": "Electricity causing death causes harm to an organism", "fol": "", "prediction": ["all x y.((Electricity(x) & Organism(y) & CausesDeath(x,y)) -> CausesHarmToOrganism(x,y))"]}
{"id": "eqasc_train_13952", "nl": "electrical exposure can can cause harm to an organism", "fol": "", "prediction": ["all x y.((ElectricalExposition(x) & Organism(y)) -> CausesHarm(x,y))"]}
{"id": "eqasc_train_13953", "nl": "Electrocution includes electric shock.", "fol": "", "prediction": ["all x.(Electrocution(x) -> ElectricShock(x))"]}
{"id": "eqasc_train_13954", "nl": "Electric shock causes harm to an organism.", "fol": "", "prediction": ["all x y.((ElectricShock(x) & Organism(y)) -> CausesHarm(x,y))"]}
{"id": "eqasc_train_13955", "nl": "electric shock causes harm to an organism", "fol": "", "prediction": ["all x y.((ElectricShock(x) & Organism(y)) -> CausesHarm(x,y))"]}
{"id": "eqasc_train_13956", "nl": "electrocution causes harm to animals", "fol": "", "prediction": ["all x y.((Electrocution(x) & Animal(y)) -> CausesHarm(x,y))"]}
{"id": "eqasc_train_13957", "nl": "Electrical shock Electric shock is caused by current passing through the human body.", "fol": "", "prediction": ["all x.(ElectricalShock(x) -> CausedByCurrentPassingThroughHumanBody(x))"]}
{"id": "eqasc_train_13958", "nl": "Currents passing through an organism can harm to it.", "fol": "", "prediction": ["all x y.((Current(x) & Organism(y) & PassesThrough(x,y)) -> CanHarmTo(x,y))"]}
{"id": "eqasc_train_13959", "nl": "Eagles are electrocuted on powerlines.", "fol": "", "prediction": ["all x.(Eagle(x) -> ElectrocutedOnPowerlines(x))"]}
{"id": "eqasc_train_13960", "nl": "powerlines cause harm to organism", "fol": "", "prediction": ["all x y.((Powerline(x) & Organism(y)) -> CausesHarmTo(x,y))"]}
{"id": "eqasc_train_13961", "nl": "Electrocution causes harm to a living being.", "fol": "", "prediction": ["all x y.((Electrocution(x) & LivingBeing(y)) -> CausesHarm(x,y))"]}
{"id": "eqasc_train_13962", "nl": "Physical activity that is painful can be harmful.", "fol": "", "prediction": ["all x.((PhysicalActivity(x) & Painful(x)) -> CanBeHarmful(x))"]}
{"id": "eqasc_train_13963", "nl": "Electrocution causes organisms to be pained.", "fol": "", "prediction": ["all x.(Electrocution(x) -> CausesPaining(x))"]}
{"id": "eqasc_train_13964", "nl": "Hair dryers with shock protection are also available and can prevent electrocution.", "fol": "", "prediction": ["all x.((HairDryer(x) & HasShockProtection(x)) -> PreventsElectrocution(x))"]}
{"id": "eqasc_train_13965", "nl": "Shock protection can prevent harm to an organism.", "fol": "", "prediction": ["all x.(ShockProtection(x) -> PreventsHarmToOrganism(x))"]}
{"id": "eqasc_train_13966", "nl": "Household wiring was involved in most of the electrocutions.", "fol": "", "prediction": ["all x.(HouseholdWiring(x) -> InvolvedInElectrocutions(x))"]}
{"id": "eqasc_train_13967", "nl": "Faulty household wiring can cause harm to an organism.", "fol": "", "prediction": ["all x.(FaultyHouseholdWiring(x) -> CausesHarmToOrganism(x))"]}
{"id": "eqasc_train_13968", "nl": "electrocution causes harm to plants", "fol": "", "prediction": ["all x y.((Electrocution(x) & Plant(y)) -> CausesHarmTo(x,y))"]}
{"id": "eqasc_train_13969", "nl": "Hair dryers without built-in shock protection devices in the plug can cause electrocution.", "fol": "", "prediction": ["all x.((HairDryer(x) & -BuiltInShockProtectionDevicesInPlug(x)) -> CanCauseElectrocution(x))"]}
{"id": "eqasc_train_13970", "nl": "Hair dryers without built-in shock protection devices in the plug can cause harm to an organism", "fol": "", "prediction": ["all x y.((HairDryer(x) & -BuiltInShockProtectionDevicesInPlug(x)) -> CausesHarmToOrganism(y))"]}
{"id": "eqasc_train_13971", "nl": "Electrocution deaths as a result of a horse chewing on an electrical cord are fairly common.", "fol": "", "prediction": ["all x.((ElectrocutionDeath(x) & Horse(x) & ChewingOnElectricalCord(x)) -> PrettyCommon(x))"]}
{"id": "eqasc_train_13972", "nl": "electrical death causes harm to an organism", "fol": "", "prediction": ["all x y.((ElectricalDeath(x) & Organism(y)) -> CausesHarm(x,y))"]}
{"id": "eqasc_train_13973", "nl": "Death was attributed to electrocution.", "fol": "", "prediction": ["all x.(Death(x) -> AttributedToElectrocution(x))"]}
{"id": "eqasc_train_13974", "nl": "electricity can cause death", "fol": "", "prediction": ["all x.(Electricity(x) -> CausesDeath(x))"]}
{"id": "eqasc_train_13975", "nl": "an animal needs to attract a mate to reproduce", "fol": "", "prediction": ["all x y.((Animal(x) & Mate(y)) -> NeedsToAttract(x,y))"]}
{"id": "eqasc_train_13976", "nl": "Mammals are animals which raise their young on milk and typically give birth to live young.", "fol": "", "prediction": ["all x.(Mammal(x) -> (Animal(x) & RaisesYoungOnMilk(x) & TypicallyGivesBirthToLiveYoung(x)))"]}
{"id": "eqasc_train_13977", "nl": "A mammal needs to attract a mate to give birth to live young.", "fol": "", "prediction": ["all x.(Mammal(x) -> NeedsAttractMate(x))"]}
{"id": "eqasc_train_13978", "nl": "Animals reproduce by having young.", "fol": "", "prediction": ["all x.(Animal(x) -> ReproducesByHavingYoung(x))"]}
{"id": "eqasc_train_13979", "nl": "An animal needs to attract a mate to have young.", "fol": "", "prediction": ["all x.((Animal(x) & AttractsMate(x)) -> HasYoung(x))"]}
{"id": "eqasc_train_13980", "nl": "Pheromones have long been known to exist in animals, as scents that attract sex partners.", "fol": "", "prediction": ["all x.(Pheromone(x) -> (exists inAnimals(x) & Scent(x) & AttractsSexPartners(x)))"]}
{"id": "eqasc_train_13981", "nl": "Animals use pheromones to reproduce", "fol": "", "prediction": ["all x y.((Animal(x) & Pheromone(y)) -> UsesToReproduce(x,y))"]}
{"id": "eqasc_train_13982", "nl": "Instincts help animals find food, mate, reproduce, and raise their young.", "fol": "", "prediction": ["all x.(Instinct(x) -> (HelpsAnimalsFindFood(x) & HelpsAnimalsMate(x) & HelpsAnimalsReproduce(x) & HelpsAnimalsRaiseYoung(x)))"]}
{"id": "eqasc_train_13983", "nl": "Instincts help animals to attract a mate.", "fol": "", "prediction": ["all x.(Instinct(x) -> (HelpsAnimalsAttractMate(x) & HelpsAnimalsAttractMate(x)))"]}
{"id": "eqasc_train_13984", "nl": "Sex is a complicated way for an organism to reproduce itself.", "fol": "", "prediction": ["all x.(Sex(x) -> ComplicatedReproduction(x))"]}
{"id": "eqasc_train_13985", "nl": "an animal needs to attract a mate for sex", "fol": "", "prediction": ["all x y.((Animal(x) & Mate(y)) -> NeedsToAttractForSex(x,y))"]}
{"id": "eqasc_train_13986", "nl": "Every member of every species needs to meet the challenges of survival and of reproduction.", "fol": "", "prediction": ["all x.((MemberOfEachSpecies(x) & MeetsSurvivalChallenges(x) & MeetsReproductionChallenges(x)) -> NeedsToMeetSurvivalChallenges(x))"]}
{"id": "eqasc_train_13987", "nl": "an animal must find a mate to ensure survival", "fol": "", "prediction": ["all x y.((Animal(x) & Mate(y)) -> MustFind(x,y))"]}
{"id": "eqasc_train_13988", "nl": "Males sing to attract females.", "fol": "", "prediction": ["all x y.((Male(x) & Female(y)) -> SingsToAttract(x,y))"]}
{"id": "eqasc_train_13989", "nl": "Some animals sing to reproduce.", "fol": "", "prediction": ["exists x.(Animal(x) & SingsToReproduce(x))"]}
{"id": "eqasc_train_13990", "nl": "Animals mate because of smells.", "fol": "", "prediction": ["all x.((Animal(x) & Smell(x)) -> Mates(x))"]}
{"id": "eqasc_train_13991", "nl": "To reproduce, mammals attract a partner through smell. ", "fol": "", "prediction": ["all x y.((Mammal(x) & Partner(y)) -> AttractsThroughSmell(x,y))"]}
{"id": "eqasc_train_13992", "nl": "animals attract with smells", "fol": "", "prediction": ["all x.((Animal(x) & AttractsWithSmells(x)) -> AttractsWithSmells(x))"]}
{"id": "eqasc_train_13993", "nl": "Some animals use scent to reproduce.", "fol": "", "prediction": ["exists x.(Animal(x) & UsesScentToReproduce(x))"]}
{"id": "eqasc_train_13994", "nl": "an animal requires stamina to succeed at physical activities", "fol": "", "prediction": ["all x.((Animal(x) & RequiresStamina(x)) -> SucceedsAtPhysicalActivities(x))"]}
{"id": "eqasc_train_13995", "nl": "Sheep hunting is a physically demanding hunt.", "fol": "", "prediction": ["all x.(SheepHunting(x) -> PhysicallyDisruptive(x))"]}
{"id": "eqasc_train_13996", "nl": "An animal requires stamina to hunt", "fol": "", "prediction": ["all x.((Animal(x) & RequiresStamina(x)) -> Hunts(x))"]}
{"id": "eqasc_train_13997", "nl": "An animal requires stamina to succeed at hunting.", "fol": "", "prediction": ["all x.((Animal(x) & RequiresStamina(x)) -> SuccessfulHunting(x))"]}
{"id": "eqasc_train_13998", "nl": "bears require stamina to succeed at physical activities", "fol": "", "prediction": ["all x.(Bear(x) -> RequiresStamina(x))"]}
{"id": "eqasc_train_13999", "nl": "humans require stamina to succeed at physical activities", "fol": "", "prediction": ["all x.(Human(x) -> RequiresStamina(x))"]}
{"id": "eqasc_train_14000", "nl": "dogs require stamina to succeed at physical activities", "fol": "", "prediction": ["all x.(Dog(x) -> RequiresStamina(x))"]}
{"id": "eqasc_train_14001", "nl": "Males of most species of animals are generally more energetic and have more stamina than females.", "fol": "", "prediction": ["all x.((Male(x) & MostAnimalSpecies(x)) -> (MoreEnergetic(x) & MoreStamina(x)))"]}
{"id": "eqasc_train_14002", "nl": "males have more stamina", "fol": "", "prediction": ["all x.(Male(x) -> MoreStamina(x))"]}
{"id": "eqasc_train_14003", "nl": "animal males are more energetic than females", "fol": "", "prediction": ["all x y.((Animal(x) & Female(y)) -> (MaleAnimal(x) & FemaleAnimal(x) & MoreEnergetic(x,y)))"]}
{"id": "eqasc_train_14004", "nl": "Asses are great runners and there is no match in speed and stamina in the entire animal kingdom.", "fol": "", "prediction": ["all x.(Asse(x) -> (GreatRunner(x) & -MatchInSpeed(x) & -MatchInStamina(x)))"]}
{"id": "eqasc_train_14005", "nl": "asses require stamina to succeed at running", "fol": "", "prediction": ["all x.((Asse(x) & RequiresStamina(x)) -> SucceedsAtRunning(x))"]}
{"id": "eqasc_train_14006", "nl": "Mustangs are noted for their stamina and endurance.", "fol": "", "prediction": ["all x.(Mustang(x) -> (NoticedForStamina(x) & NoticedForEndurance(x)))"]}
{"id": "eqasc_train_14007", "nl": "Mustangs are noted for abilities in physical activities", "fol": "", "prediction": ["all x.(Mustang(x) -> (AbilitiesInPhysicalActivities(x) & NotedFor(x,Mustangs)))"]}
{"id": "eqasc_train_14008", "nl": "Air pollution harms the respiratory and circulatory systems.", "fol": "", "prediction": ["all x.(AirPollution(x) -> (HarmsRespiratorySystems(x) & HarmsCirculatorySystems(x)))"]}
{"id": "eqasc_train_14009", "nl": "Sulfur dioxide can irritate the respiratory system and damage the heart and circulatory system.", "fol": "", "prediction": ["all x.(SulfurDioxide(x) -> (IrrigatesRespiratorySystem(x) & DamagesHeartAndCirculatorySystem(x)))"]}
{"id": "eqasc_train_14010", "nl": "Air pollution damages the heart.", "fol": "", "prediction": ["all x.(AirPollution(x) -> DamagesHeart(x))"]}
{"id": "eqasc_train_14011", "nl": "Breathing air pollutants can increase the chances of experiencing health problems.", "fol": "", "prediction": ["all x.((AirPollutant(x) & Breathing(x)) -> IncreasesChancesOfHealthProblems(x))"]}
{"id": "eqasc_train_14012", "nl": "Breathing pollutants can harm the respiratory system", "fol": "", "prediction": ["all x y.((BreathingPollutants(x) & RespiratorySystem(y)) -> CanHarm(x,y))"]}
{"id": "eqasc_train_14013", "nl": "Incinerated mercury harms the respiratory and circulatory systems.", "fol": "", "prediction": ["all x.(IncineratedMercury(x) -> HarmsRespiratoryAndCirculatorySystems(x))"]}
{"id": "eqasc_train_14014", "nl": "Air pollution, or smog, is caused by cars and trucks.", "fol": "", "prediction": ["all x.(AirPollution(x) -> (CausedByCars(x) | CausedByTrucks(x)))"]}
{"id": "eqasc_train_14015", "nl": "cars harm the respiratory system", "fol": "", "prediction": ["all x.(Car(x) -> HarmsRespiratorySystem(x))"]}
{"id": "eqasc_train_14016", "nl": "Cars harm the respiratory and circulatory systems.", "fol": "", "prediction": ["all x.(Car(x) -> (HarmsRespiratorySystems(x) & HarmsCirculatorySystems(x)))"]}
{"id": "eqasc_train_14017", "nl": "Air pollutants are inhaled.", "fol": "", "prediction": ["all x.(AirPollutant(x) -> Inhaled(x))"]}
{"id": "eqasc_train_14018", "nl": "inhaled pollutions harms the respiratory system", "fol": "", "prediction": ["all x y.((InhaledPollution(x) & InhaledPollution(y)) -> HarmsRespiratorySystem(x,y))"]}
{"id": "eqasc_train_14019", "nl": "Smoking is a form of air pollution.", "fol": "", "prediction": ["all x.(Smoking(x) -> AirPollution(x))"]}
{"id": "eqasc_train_14020", "nl": "smoking harms the respiratory and circulatory systems", "fol": "", "prediction": ["all x.(Smoking(x) -> (HarmsRespiratorySystems(x) & HarmsCirculatorySystems(x)))"]}
{"id": "eqasc_train_14021", "nl": "Air pollution is caused by lots of different pollutants.", "fol": "", "prediction": ["all x.(AirPollution(x) -> CausedByLotsOfPollutants(x))"]}
{"id": "eqasc_train_14022", "nl": "Several different pollutants harm the respiratory and circulatory systems.", "fol": "", "prediction": ["exists x.(Pollutant(x) & HarmsRespiratoryAndCirculatorySystems(x))"]}
{"id": "eqasc_train_14023", "nl": "Dust contributes to air pollution.", "fol": "", "prediction": ["all x.(Dust(x) -> ContributesToAirPollution(x))"]}
{"id": "eqasc_train_14024", "nl": "dust harms the respiratory and circulatory systems", "fol": "", "prediction": ["all x y.((Dust(x) & RespiratorySystem(y) & CirculatorySystem(y)) -> Harms(x,y))"]}
{"id": "eqasc_train_14025", "nl": "Nitrogen oxides cause air pollution.", "fol": "", "prediction": ["all x.(NitrogenOxide(x) -> CausesAirPollution(x))"]}
{"id": "eqasc_train_14026", "nl": "Nitrogen oxides harms the respiratory and circulatory systems.", "fol": "", "prediction": ["all x.(NitrogenOxide(x) -> (HarmsRespiratorySystems(x) & HarmsCirculatorySystems(x)))"]}
{"id": "eqasc_train_14027", "nl": "Exposure to ozone can diminish lung function and increase susceptibility to respiratory infection.", "fol": "", "prediction": ["all x.(OzoneExposition(x) -> (DisaminatesLungFunction(x) & IncreasesSusceptibilityToRainforestInfection(x)))"]}
{"id": "eqasc_train_14028", "nl": "Exposure to air pollution can harm the lungs.", "fol": "", "prediction": ["all x.(AirPollution(x) -> HarmsLungs(x))"]}
{"id": "eqasc_train_14029", "nl": "An example of an air pollution reaction is the production of photochemical smog.", "fol": "", "prediction": ["all x.((PhotochemicalSmog(x) & Production(x)) -> AirPollutionReaction(x))"]}
{"id": "eqasc_train_14030", "nl": "Smog harms the respiratory and circulatory systems.", "fol": "", "prediction": ["all x.(Smog(x) -> (HarmsRespiratorySystems(x) & HarmsCirculatorySystems(x)))"]}
{"id": "eqasc_train_14031", "nl": "pathogens can cause disease", "fol": "", "prediction": ["all x y.((Pathogen(x) & Disease(y)) -> Causes(x,y))"]}
{"id": "eqasc_train_14032", "nl": "Pathogens : a few types of bacteria in food are responsible for causing illness and are referred  to as pathogens.", "fol": "", "prediction": ["exists x.(Bacteria(x) & InFood(x) & CausesIllness(x) & Pathogen(x))"]}
{"id": "eqasc_train_14033", "nl": "Some types of bacteria in food can cause disease", "fol": "", "prediction": ["exists x.(Bacteria(x) & InFood(x) & CausesDisease(x))"]}
{"id": "eqasc_train_14034", "nl": "The disease affects the immune system.", "fol": "", "prediction": ["all x.(Disease(x) -> AffectsImmuneSystem(x))"]}
{"id": "eqasc_train_14035", "nl": "pathogens affects the immune system.", "fol": "", "prediction": ["all x.(Pathogen(x) -> AffectsImmuneSystem(x))"]}
{"id": "eqasc_train_14036", "nl": "Measles is a disease caused by the measles virus.", "fol": "", "prediction": ["all x.(Measles(x) -> CausedByMeaslesVirus(x))"]}
{"id": "eqasc_train_14037", "nl": "pathogens can cause measles", "fol": "", "prediction": ["all x.(Pathogen(x) -> CausesMeasles(x))"]}
{"id": "eqasc_train_14038", "nl": "This suggests the pathogen may be moved through the air somehow.", "fol": "", "prediction": ["all x.((Pathogen(x) & MovedThroughAir(x)) -> Possible(x))"]}
{"id": "eqasc_train_14039", "nl": "Diseases can move through the air", "fol": "", "prediction": ["all x.(Disease(x) -> MovesThroughAir(x))"]}
{"id": "eqasc_train_14040", "nl": "Anthrax is an example of a bacterial pathogen.", "fol": "", "prediction": ["all x.(Anthrax(x) -> BacterialPathogen(x))"]}
{"id": "eqasc_train_14041", "nl": "Bacteria can cause disease", "fol": "", "prediction": ["all x.(Bacteria(x) -> CausesDisease(x))"]}
{"id": "eqasc_train_14042", "nl": "Bacterial pathogens accounted for 83 outbreaks (8,928 pathogens).", "fol": "", "prediction": ["all x.(BacterialPathogen(x) -> (AccountedFor(x,83) & (8,928))))"]}
{"id": "eqasc_train_14043", "nl": "bacteria can cause disease", "fol": "", "prediction": ["all x.(Bacteria(x) -> CausesDisease(x))"]}
{"id": "eqasc_train_14044", "nl": "Mad Cow disease is a concern.", "fol": "", "prediction": ["all x.(MadCowDisease(x) -> Concern(x))"]}
{"id": "eqasc_train_14045", "nl": "pathogens can cause Mad Cow", "fol": "", "prediction": ["all x.(Pathogen(x) -> CausesMadCow(x))"]}
{"id": "eqasc_train_14046", "nl": "Legionnaires' disease is a serious disease.", "fol": "", "prediction": ["all x.(LegionnairesDisease(x) -> SeriousDisease(x))"]}
{"id": "eqasc_train_14047", "nl": "Pathogens cause Legionnaires'.", "fol": "", "prediction": ["all x.(Pathogen(x) -> CausesLegionnaires(x))"]}
{"id": "eqasc_train_14048", "nl": "Most pathogens are bacteria.", "fol": "", "prediction": ["all x.(Pathogen(x) -> Bacteria(x))"]}
{"id": "eqasc_train_14049", "nl": "Pathogens: bacteria, protozoans, and viruses .", "fol": "", "prediction": ["all x.(Pathogen(x) -> (Bacteria(x) | Protozoa(x) | Viral(x)))"]}
{"id": "eqasc_train_14050", "nl": "Fungi are significant pathogens.", "fol": "", "prediction": ["all x.(Fungus(x) -> SignificantPathogen(x))"]}
{"id": "eqasc_train_14051", "nl": "Fungi can cause disease", "fol": "", "prediction": ["all x.(Fungus(x) -> CausesDisease(x))"]}
{"id": "eqasc_train_14052", "nl": "Some birds are pollinators that co-evolved with plants.", "fol": "", "prediction": ["exists x.(Bird(x) & Pollinator(x) & CoEvolvedWithPlants(x))"]}
{"id": "eqasc_train_14053", "nl": "Because it is a flowered plant, it reproduces with seeds and pollen.", "fol": "", "prediction": ["all x.(FloweredPlant(x) -> (ReproducesWithSeeds(x) & ReproducesWithPollen(x)))"]}
{"id": "eqasc_train_14054", "nl": "some organisms need birds to reproduce", "fol": "", "prediction": ["exists x.(Organism(x) & NeedsBird(x))"]}
{"id": "eqasc_train_14055", "nl": "Plants spread by self- seeding and below ground stems.", "fol": "", "prediction": ["all x.(Plant(x) -> (SpreadsBySelfSeeding(x) & SpreadsBelowGroundStems(x)))"]}
{"id": "eqasc_train_14056", "nl": "Some birds are pollinators that co-evolved with self seeding organisms", "fol": "", "prediction": ["exists x.(Bird(x) & Pollinator(x) & SelfSeedingOrganism(x))"]}
{"id": "eqasc_train_14057", "nl": "Some animals with feathers are pollinators.", "fol": "", "prediction": ["exists x.(Animal(x) & HasFeathers(x) & Pollinator(x))"]}
{"id": "eqasc_train_14058", "nl": "Birds and flying insects are the primary pollinator's of red flower plants.", "fol": "", "prediction": ["all x y.((Bird(x) & FlyingInsect(y)) -> PrimaryPollinatorsOfRedFlowerPlants(x,y))"]}
{"id": "eqasc_train_14059", "nl": "Some birds co-evolved with flowers to pollinate them", "fol": "", "prediction": ["exists x y.(Bird(x) & Flower(y) & CoEvolvedWith(x,y) & Pollinates(x,y))"]}
{"id": "eqasc_train_14060", "nl": "Hummingbirds are an important groups of bird pollinators.", "fol": "", "prediction": ["all x.(Hummingbird(x) -> BirdPollinators(x))"]}
{"id": "eqasc_train_14061", "nl": "hummingbirds co-evolved with plants", "fol": "", "prediction": ["all x y.((Hummingbird(x) & Plant(y)) -> CoEvolvedWith(x,y))"]}
{"id": "eqasc_train_14062", "nl": "Hummingbirds co-evolved with plants.", "fol": "", "prediction": ["all x y.((Hummingbird(x) & Plant(y)) -> CoEvolvedWith(x,y))"]}
{"id": "eqasc_train_14063", "nl": "Insects and birds pollinate our crops.", "fol": "", "prediction": ["all x y.((Insect(x) | Bird(y)) -> PollinatesCrops(x,y))"]}
{"id": "eqasc_train_14064", "nl": "insects pollinate plants", "fol": "", "prediction": ["all x y.((Insect(x) & Plant(y)) -> Pollinates(x,y))"]}
{"id": "eqasc_train_14065", "nl": "Roosters and sparrows are birds.", "fol": "", "prediction": ["all x.((Rooster(x) | Sparrow(x)) -> Bird(x))"]}
{"id": "eqasc_train_14066", "nl": "some sparrows are pollinators that co-evolved with plants", "fol": "", "prediction": ["exists x.(Sparrow(x) & Pollinator(x) & CoEvolvedWithPlants(x))"]}
{"id": "eqasc_train_14067", "nl": "some birds are pollinators that co-evolved with bushes", "fol": "", "prediction": ["exists x.(Bird(x) & Pollinator(x) & CoEvolvedWithBushes(x))"]}
{"id": "eqasc_train_14068", "nl": "Some birds are pollinators that co-evolved with producers.", "fol": "", "prediction": ["exists x.(Bird(x) & Pollinator(x) & CoEvolvedWithProducers(x))"]}
{"id": "eqasc_train_14069", "nl": "acid rain has a negative impact on water quality", "fol": "", "prediction": ["all x.(AcidRain(x) -> NegativeImpactOnWaterQuality(x))"]}
{"id": "eqasc_train_14070", "nl": "Acid rain changes the acidity of soil and water.", "fol": "", "prediction": ["all x.(AcidRain(x) -> ChangesAcidityOfSoilAndWater(x))"]}
{"id": "eqasc_train_14071", "nl": "acid rain can change soil", "fol": "", "prediction": ["all x.(AcidRain(x) -> CanChangeSoil(x))"]}
{"id": "eqasc_train_14072", "nl": "Acid rain has a pH below 5.6.", "fol": "", "prediction": ["all x.(AcidRain(x) -> pHBelow(x,5.6))"]}
{"id": "eqasc_train_14073", "nl": "rain with a pH below 5.6 has a negative impact on water quality", "fol": "", "prediction": ["all x.((Rain(x) & pHBelow(x,5.6)) -> NegativeImpactOnWaterQuality(x))"]}
{"id": "eqasc_train_14074", "nl": "Plants thrive on quality water.", "fol": "", "prediction": ["all x.((Plant(x) & QualityWater(x)) -> ThrivesOn(x,y))"]}
{"id": "eqasc_train_14075", "nl": "Acid rain has a negative impact on plants.", "fol": "", "prediction": ["all x.(AcidRain(x) -> NegativeImpactOnPlants(x))"]}
{"id": "eqasc_train_14076", "nl": "Water quality also affects habitat quality.", "fol": "", "prediction": ["all x.(WaterQuality(x) -> AffectsHabitatQuality(x))"]}
{"id": "eqasc_train_14077", "nl": "acid rain has a negative impact on habitat quality", "fol": "", "prediction": ["all x.(AcidRain(x) -> NegativeImpactOnHabitatQuality(x))"]}
{"id": "eqasc_train_14078", "nl": "Pollution is bad for water.", "fol": "", "prediction": ["all x.(Pollution(x) -> BadForWater(x))"]}
{"id": "eqasc_train_14079", "nl": "Plants are sensitive to acid rain.", "fol": "", "prediction": ["all x.(Plant(x) -> SensitiveToAcidRain(x))"]}
{"id": "eqasc_train_14080", "nl": "Plants are sensitive to water quality", "fol": "", "prediction": ["all x.(Plant(x) -> SensitiveToWaterQuality(x))"]}
{"id": "eqasc_train_14081", "nl": "Something that comes from polluted clouds has a negative impact on water quality.", "fol": "", "prediction": ["all x.((PollutedCloud(x) & ComesFrom(x,y)) -> NegativeImpactOnWaterQuality(x))"]}
{"id": "eqasc_train_14082", "nl": "Acid rain has a negative impact on H20 quality.", "fol": "", "prediction": ["all x.(AcidRain(x) -> NegativeImpactOnH20Quality(x))"]}
{"id": "eqasc_train_14083", "nl": "Water pollution Water is life.", "fol": "", "prediction": ["all x.(WaterPollution(x) -> Life(x))"]}
{"id": "eqasc_train_14084", "nl": "Acid rain has a negative impact on life quality", "fol": "", "prediction": ["all x.(AcidRain(x) -> NegativeImpactOnLifeQuality(x))"]}
{"id": "eqasc_train_14085", "nl": "Acid rain is partly caused by CFCs.", "fol": "", "prediction": ["all x.(AcidRain(x) -> CausedByCFCs(x))"]}
{"id": "eqasc_train_14086", "nl": "CFCs have a negative impact on water quality", "fol": "", "prediction": ["all x.(CFC(x) -> NegativeImpactOnWaterQuality(x))"]}
{"id": "eqasc_train_14087", "nl": "Sulfur dioxide causes acid rain.", "fol": "", "prediction": ["all x.(SulfurDioxide(x) -> CausesAcidRain(x))"]}
{"id": "eqasc_train_14088", "nl": "sulfur dioxide has a negative impact on water quality", "fol": "", "prediction": ["all x.(SulfurDioxide(x) -> NegativeImpactOnWaterQuality(x))"]}
{"id": "eqasc_train_14089", "nl": "Acid rain or acidic precipitation is detrimental to plant growth.", "fol": "", "prediction": ["all x.((AcidRain(x) | AcidicPrecipitation(x)) -> DetrimentalToPlantGrowth(x))"]}
{"id": "eqasc_train_14090", "nl": "precipitation detrimental to plant growth has a negative impact on water quality", "fol": "", "prediction": ["all x.((Precipitation(x) & DetrimentalToPlantGrowth(x)) -> NegativeImpactOnWaterQuality(x))"]}
{"id": "eqasc_train_14091", "nl": "some rain is harmful", "fol": "", "prediction": ["exists x.(Rain(x) & Harmful(x))"]}
{"id": "eqasc_train_14092", "nl": "Sulfur dioxide in precipitation has negative impact on water quality", "fol": "", "prediction": ["all x.((SulfurDioxide(x) & Precipitation(x)) -> NegativeImpactOnWaterQuality(x))"]}
{"id": "eqasc_train_14093", "nl": "Cars and trucks emit tremendous amounts of airborne pollutants, which increase acid rain.", "fol": "", "prediction": ["all x.((Car(x) | Truck(x)) -> (EmitsThreetyAirbornePollutants(x) & IncreasesAcidRain(x)))"]}
{"id": "eqasc_train_14094", "nl": "Cars and trucks have a negative impact on water quality", "fol": "", "prediction": ["all x y.((Car(x) & Truck(y)) -> NegativeImpactOnWaterQuality(x,y))"]}
{"id": "eqasc_train_14095", "nl": "Some mollusks are nearly microscopic.", "fol": "", "prediction": ["exists x.(Milk(x) & NearlyMicroscopic(x))"]}
{"id": "eqasc_train_14096", "nl": "Ribosomes are too small to see in the light microscope.", "fol": "", "prediction": ["all x.(Ribosome(x) -> TooSmallToSeeInLightMicroscope(x))"]}
{"id": "eqasc_train_14097", "nl": "Some mollusks are nearly too small to see", "fol": "", "prediction": ["exists x.(Mollusk(x) & NearlyTooSmallToSee(x))"]}
{"id": "eqasc_train_14098", "nl": "some invertebrates are nearly microscopic", "fol": "", "prediction": ["exists x.(Invertebrate(x) & NearlyMicroscopic(x))"]}
{"id": "eqasc_train_14099", "nl": "Some squids are nearly microscopic", "fol": "", "prediction": ["exists x.(Squid(x) & NearlyMicroscopic(x))"]}
{"id": "eqasc_train_14100", "nl": "Some invertebrates are nearly microscopic", "fol": "", "prediction": ["exists x.(Invertebrate(x) & NearlyMicroscopic(x))"]}
{"id": "eqasc_train_14101", "nl": "Mollusks are abundant fossils.", "fol": "", "prediction": ["all x.(Mollusk(x) -> AbundantFossil(x))"]}
{"id": "eqasc_train_14102", "nl": "some abundant fossils are nearly microscopic", "fol": "", "prediction": ["exists x.(AbundantFossil(x) & NearlyMicroscopic(x))"]}
{"id": "eqasc_train_14103", "nl": "some abalone are nearly microscopic", "fol": "", "prediction": ["exists x.(Abalone(x) & NearlyMicroscopic(x))"]}
{"id": "eqasc_train_14104", "nl": "Some  invertebrates are nearly microscopic", "fol": "", "prediction": ["exists x.(Invertebrate(x) & NearlyMicroscopic(x))"]}
{"id": "eqasc_train_14105", "nl": "some squids are nearly microscopic", "fol": "", "prediction": ["exists x.(Squid(x) & NearlyMicroscopic(x))"]}
{"id": "eqasc_train_14106", "nl": "Some squids are nearly microscopic.", "fol": "", "prediction": ["exists x.(Squid(x) & NearlyMicroscopic(x))"]}
{"id": "eqasc_train_14107", "nl": "Evolution occurs by a process called natural selection.", "fol": "", "prediction": ["all x.(Evolution(x) -> NaturalSelection(x))"]}
{"id": "eqasc_train_14108", "nl": "Birth and death are natural processes.", "fol": "", "prediction": ["all x.((Birth(x) | Death(x)) -> NaturalProcesses(x))"]}
{"id": "eqasc_train_14109", "nl": "Evolution occurs through birth and death.", "fol": "", "prediction": ["all x.(Evolution(x) -> (OccursThroughBirth(x) & OccursThroughDeath(x)))"]}
{"id": "eqasc_train_14110", "nl": "Adaptation and natural selection are discussed.", "fol": "", "prediction": ["all x.(Adaptation(x) & NaturalSelection(x)) -> Discussed(x))"]}
{"id": "eqasc_train_14111", "nl": "Evolution occurs by a process of adaptation", "fol": "", "prediction": ["all x y.((Evolution(x) & ProcessOfAdaptation(y)) -> OccursBy(x,y))"]}
{"id": "eqasc_train_14112", "nl": "Natural selection is adaptive.", "fol": "", "prediction": ["all x.(NaturalSelection(x) -> Adaptive(x))"]}
{"id": "eqasc_train_14113", "nl": "Evolution occurs by an adaptive process", "fol": "", "prediction": ["all x y.((Evolution(x) & AdaptiveProcess(y)) -> OccursBy(x,y))"]}
{"id": "eqasc_train_14114", "nl": "evolution occurs by a process that results in adaptation", "fol": "", "prediction": ["all x y.((Evolution(x) & Process(y)) -> (OccursBy(x,y) & ResultsInAdaptation(x)))"]}
{"id": "eqasc_train_14115", "nl": "Adaptation results in evolution.", "fol": "", "prediction": ["all x.(Adaptation(x) -> Evolution(x))"]}
{"id": "eqasc_train_14116", "nl": "Actually, evolution is adaptation to change.", "fol": "", "prediction": ["all x.(Evolution(x) -> AdaptationToChange(x))"]}
{"id": "eqasc_train_14117", "nl": "Changing occurs by a process called natural selection.", "fol": "", "prediction": ["all x.(Change(x) -> NaturalSelection(x))"]}
{"id": "eqasc_train_14118", "nl": "Evolution is about electing to survive.", "fol": "", "prediction": ["all x.(Evolution(x) -> ElectsToSurvive(x))"]}
{"id": "eqasc_train_14119", "nl": "natural selection helps organisms survive", "fol": "", "prediction": ["all x y.((NaturalSelection(x) & Organism(y)) -> HelpsSurvive(x,y))"]}
{"id": "eqasc_train_14120", "nl": "Natural selection only selects functionally advantageous systems.", "fol": "", "prediction": ["all x.(NaturalSelection(x) -> SelectsFunctionallyAdvancedSystems(x))"]}
{"id": "eqasc_train_14121", "nl": "In evolution only functionally advantageous systems are selected.", "fol": "", "prediction": ["all x.(Evolution(x) -> FunctionallyAdvancedSystems(x))"]}
{"id": "eqasc_train_14122", "nl": "speciation occurs by a process called natural selection", "fol": "", "prediction": ["all x.(Speciation(x) -> (OccursByNaturalSelection(x) & NaturalSelection(x)))"]}
{"id": "eqasc_train_14123", "nl": "Evolution is a sequence of variation and selection.", "fol": "", "prediction": ["all x.(Evolution(x) -> (SequenceOfVariation(x) & Selection(x)))"]}
{"id": "eqasc_train_14124", "nl": "evolution produces variation", "fol": "", "prediction": ["all x.(Evolution(x) -> ProducesVariation(x))"]}
{"id": "eqasc_train_14125", "nl": "Many plants respond to the days growing shorter in the fall by going dormant.", "fol": "", "prediction": ["all x.((Plant(x) & DaysGrowingShorter(x) & Fall(x)) -> Dormant(x))"]}
{"id": "eqasc_train_14126", "nl": "Plants can be divided at any time, although the dormant or rest period is best.", "fol": "", "prediction": ["all x.(Plant(x) -> (DividedAtAnyTime(x) & (DormantPeriod(x) | RestPeriod(x))))"]}
{"id": "eqasc_train_14127", "nl": "Many plants respond to the days growing shorter in the fall by going through a rest period.", "fol": "", "prediction": ["all x.((Plant(x) & DaysGrowingShorterInFall(x)) -> RestPeriod(x))"]}
{"id": "eqasc_train_14128", "nl": "Fall starts in September and is windy and dry.", "fol": "", "prediction": ["all x.(Fall(x) -> (StartsInSeptember(x) & Windy(x) & Dry(x)))"]}
{"id": "eqasc_train_14129", "nl": "many plants respond to the days growing shorter in September by going dormant", "fol": "", "prediction": ["all x y.((Plant(x) & Day(y) & September(y)) -> (ResponseTo(x,y) & Day(x,y) & Dormant(x)))"]}
{"id": "eqasc_train_14130", "nl": "Jade plants have an active and a dormant growing cycle.", "fol": "", "prediction": ["all x.(JadePlant(x) -> (ActiveGrowingCycle(x) & DormantGrowingCycle(x)))"]}
{"id": "eqasc_train_14131", "nl": "Jade plants respond to the fall by going dormant", "fol": "", "prediction": ["all x.(JadePlant(x) -> (ResponseToFall(x) & Dormant(x)))"]}
{"id": "eqasc_train_14132", "nl": "Many plants are in a dormant state in winter.", "fol": "", "prediction": ["all x.((Plant(x) & DormantStateInWinter(x)) -> InWinter(x))"]}
{"id": "eqasc_train_14133", "nl": "some plants are dormant when the days are shorter", "fol": "", "prediction": ["exists x.(Plant(x) & Dormant(x)) -> (DaysShorter(x) & DaysShorter(x)))"]}
{"id": "eqasc_train_14134", "nl": "Autumn or Fall is already here.", "fol": "", "prediction": ["all x.((Autumn(x) | Fall(x)) -> Here(x))"]}
{"id": "eqasc_train_14135", "nl": "Many plants respond to the days growing shorter in the autumn by going dormant.", "fol": "", "prediction": ["all x.((Plant(x) & DaysGrowingShorter(x) & Autumn(x)) -> Dormant(x))"]}
{"id": "eqasc_train_14136", "nl": "Cottonwoods are dormant during the fall.", "fol": "", "prediction": ["all x.(Cottonwood(x) -> DormantDuringFall(x))"]}
{"id": "eqasc_train_14137", "nl": "Cottonwoods go dormant when the days are shorter", "fol": "", "prediction": ["all x.((Cottonwood(x) & DaysShorter(x)) -> Dormant(x))"]}
{"id": "eqasc_train_14138", "nl": "Trees are dormant from November to March.", "fol": "", "prediction": ["all x.(Tree(x) -> Dormant(x))"]}
{"id": "eqasc_train_14139", "nl": "many trees respond to the days growing shorter in the fall", "fol": "", "prediction": ["all x y.((Tree(x) & Day(y) & Fall(y)) -> RespondsToDaysShorter(x,y))"]}
{"id": "eqasc_train_14140", "nl": "When the growing season ends, plants become dormant or scatter seeds and die.", "fol": "", "prediction": ["all x.((GrowingSeasonEnds(x)) -> (PlantsBecomeDormant(x) | PlantsScatherSeeds(x) & PlantsDie(x)))"]}
{"id": "eqasc_train_14141", "nl": "Many plants respond to the days growing shorted by scattering seeds.", "fol": "", "prediction": ["all x.((Plant(x) & ShortedByScattingSeeds(x)) -> RespondsTo(x,y))"]}
{"id": "eqasc_train_14142", "nl": "After the autumnal equinox, days gradually shorten in the Northern Hemisphere.", "fol": "", "prediction": ["all x y.((AutumnalEquinox(x) & NorthernHemisphere(y)) -> ShortensDays(x,y))"]}
{"id": "eqasc_train_14143", "nl": "Many plants respond to the autumnal equinox by going dormant.", "fol": "", "prediction": ["all x.((Plant(x) & AutumnalEquinox(x)) -> Dormant(x))"]}
{"id": "eqasc_train_14144", "nl": "Plants are dormant in the winter.", "fol": "", "prediction": ["all x.(Plant(x) -> DormantInWinter(x))"]}
{"id": "eqasc_train_14145", "nl": "Plants will sleep in the short days of winter", "fol": "", "prediction": ["all x y.((Plant(x) & ShortWinterDays(y)) -> SleepsIn(x,y))"]}
{"id": "eqasc_train_14146", "nl": "zinc has a positive impact on the healing of wounds", "fol": "", "prediction": ["all x y.((Zinc(x) & Wound(y)) -> PositiveImpactOnHealing(x,y))"]}
{"id": "eqasc_train_14147", "nl": "Vitamin C and zinc seem to enhance wound healing.", "fol": "", "prediction": ["all x.((VitaminC(x) & Zinc(x)) -> EnhancesWoundHealing(x))"]}
{"id": "eqasc_train_14148", "nl": "vitamin c is beneficial to wounds", "fol": "", "prediction": ["all x.(VitaminC(x) -> BeneficialToWounds(x))"]}
{"id": "eqasc_train_14149", "nl": "If an animal is wounded then the wound is healed.", "fol": "", "prediction": ["all x.((Animal(x) & Wounded(x)) -> HealdedWound(x))"]}
{"id": "eqasc_train_14150", "nl": "zinc has a positive impact on animals", "fol": "", "prediction": ["all x y.((Zinc(x) & Animal(y)) -> PositiveImpactOn(x,y))"]}
{"id": "eqasc_train_14151", "nl": "An incised wound is a clean cut.", "fol": "", "prediction": ["all x.(IncisedWound(x) -> CleanCut(x))"]}
{"id": "eqasc_train_14152", "nl": "zinc has a positive impact on the healing of cuts", "fol": "", "prediction": ["all x.(Zinc(x) -> PositiveImpactOnHealingCuts(x))"]}
{"id": "eqasc_train_14153", "nl": "And of particular importance to wound healing is the mineral zinc .", "fol": "", "prediction": ["(ImportantToWundHealing(z) & MineralZinc(z))"]}
{"id": "eqasc_train_14154", "nl": "A healing mineral has a positive impact on wounds", "fol": "", "prediction": ["all x.(HealingMineral(x) -> PositiveImpactOnWounds(x))"]}
{"id": "eqasc_train_14155", "nl": "Red meats are good sources of zinc.", "fol": "", "prediction": ["all x.((RedMeat(x) & GoodSourceOfZinc(x)) -> GoodSourceOfZinc(x))"]}
{"id": "eqasc_train_14156", "nl": "Red meats have a positive impact on the healing of wounds.", "fol": "", "prediction": ["all x.(RedMeat(x) -> PositiveImpactOnWoundHealing(x))"]}
{"id": "eqasc_train_14157", "nl": "All wounds heal by scarring.", "fol": "", "prediction": ["all x.(Wound(x) -> HealsByScarring(x))"]}
{"id": "eqasc_train_14158", "nl": "Zinc has a positive impact on wounds scarring. ", "fol": "", "prediction": ["all x.(Zinc(x) -> PositiveImpactOnWoundsScarring(x))"]}
{"id": "eqasc_train_14159", "nl": "Sources of zinc are soil, zinc oxide, zinc sulfate, zinc chelate.", "fol": "", "prediction": ["all x.(ZincSource(x) -> (Soil(x) | ZincOxide(x) | ZincSulfate(x) | ZincChlate(x)))"]}
{"id": "eqasc_train_14160", "nl": "soil can have a positive impact on the healing of wounds", "fol": "", "prediction": ["all x y.((Soil(x) & Wound(y)) -> PositiveImpactOnHealing(x,y))"]}
{"id": "eqasc_train_14161", "nl": "Wound healing Wound healing is a critical aspect of surgery.", "fol": "", "prediction": ["all x.(WoundHealing(x) -> CriticalAspectOfSurgery(x))"]}
{"id": "eqasc_train_14162", "nl": "zinc can have a positive impact on surgery", "fol": "", "prediction": ["all x.(Zinc(x) -> PositiveImpactOnSurgery(x))"]}
{"id": "eqasc_train_14163", "nl": "zinc has a positive impact after a surgery", "fol": "", "prediction": ["all x y.((Zinc(x) & Surgery(y)) -> PositiveImpact(x,y))"]}
{"id": "eqasc_train_14164", "nl": "Nutrition correlates with wound healing.", "fol": "", "prediction": ["all x.((Nutrition(x) & WoundHealing(x)) -> Correlates(x,y))"]}
{"id": "eqasc_train_14165", "nl": "Zinc is correlated with wound recovery.", "fol": "", "prediction": ["all x.(Zinc(x) -> CorrelatedWithWoundRecovery(x))"]}
{"id": "eqasc_train_14166", "nl": "Wounds A wound is an injury to the skin and underlying soft tissues.", "fol": "", "prediction": ["all x.(Wound(x) -> (InjuredSkin(x) & InjuredSoftTissues(x)))"]}
{"id": "eqasc_train_14167", "nl": "Zinc has a positive impact on injury to the skin and underlying soft tissues.", "fol": "", "prediction": ["all x.(Zinc(x) -> (PositiveImpactOnInjuryToSkin(x) & PositiveImpactOnInjuryToSoftTissues(x)))"]}
{"id": "eqasc_train_14168", "nl": "Roundworms may be free-living or parasitic.", "fol": "", "prediction": ["all x.(Roundworm(x) -> (FreeLiving(x) | Parasitic(x)))"]}
{"id": "eqasc_train_14169", "nl": "Parasites are organisms that live off a host.", "fol": "", "prediction": ["all x.(Parasite(x) -> (Organism(x) & LivesOffHost(x)))"]}
{"id": "eqasc_train_14170", "nl": "roundworms may be free-living or live off a host", "fol": "", "prediction": ["all x.(Roundworm(x) -> (FreeLiving(x) | LiveOffHost(x)))"]}
{"id": "eqasc_train_14171", "nl": "Dogs remain susceptible to reinfection with hookworms and roundworms.", "fol": "", "prediction": ["all x.(Dog(x) -> (ResponsibleToHandworms(x) | ResponsibleToRoundworms(x)))"]}
{"id": "eqasc_train_14172", "nl": "Dogs remain susceptible to free-living or parasitic species", "fol": "", "prediction": ["all x.(Dog(x) -> (RemainsSusceptibleToFreeLivingOrParasiticSpecies(x)))"]}
{"id": "eqasc_train_14173", "nl": "Parasites Shortfin makos host a variety of parasitic copepods.", "fol": "", "prediction": ["all x.((ShortfinMako(x) & Parasite(x)) -> HostsParasiteCophepods(x))"]}
{"id": "eqasc_train_14174", "nl": "Roundworms may be living on a host or free-living.", "fol": "", "prediction": ["all x.(Roundworm(x) -> (LivesOnHost(x) | FreeLiving(x)))"]}
{"id": "eqasc_train_14175", "nl": "Internal parasites harm their hosts in many ways.", "fol": "", "prediction": ["all x.(InternalParasite(x) -> HarmsHost(x))"]}
{"id": "eqasc_train_14176", "nl": "roundworms can harm their hosts", "fol": "", "prediction": ["all x y.((Roundworm(x) & Host(y)) -> CanHarm(x,y))"]}
{"id": "eqasc_train_14177", "nl": "nematodes can be parasitic", "fol": "", "prediction": ["all x.(Nematode(x) -> Parasitic(x))"]}
{"id": "eqasc_train_14178", "nl": "the phylum Nematoda can be parasitic", "fol": "", "prediction": ["all x.(PhylumNematoda(x) -> Parasitic(x))"]}
{"id": "eqasc_train_14179", "nl": "Puppies and kittens may have parasitic worms.", "fol": "", "prediction": ["all x.((Puppie(x) | Kitten(x)) -> ParasiticWworms(x))"]}
{"id": "eqasc_train_14180", "nl": "Roundworms Can Cause Anorexia.", "fol": "", "prediction": ["All x.(Roundworm(x) -> CanCauseAnorexia(x))"]}
{"id": "eqasc_train_14181", "nl": "Parasites can Cause Anorexia", "fol": "", "prediction": ["all x.(Parasite(x) -> CausesAnorexia(x))"]}
{"id": "eqasc_train_14182", "nl": "Nematodes may be free-living or parasitic?", "fol": "", "prediction": ["all x.(Nematode(x) -> (FreeLiving(x) | Parasitic(x)))"]}
{"id": "eqasc_train_14183", "nl": "Caecilians can be found in moist soil near rivers and streams in tropical regions.", "fol": "", "prediction": ["all x.(Caecilian(x) -> (MoistSoil(x) & NearRiver(x) & NearStream(x) & TropicalRegion(x)))"]}
{"id": "eqasc_train_14184", "nl": "Caecilians are primitive amphibians that resemble earthworms.", "fol": "", "prediction": ["all x.(Caecilian(x) -> (PrimaryAmphibian(x) & RemindsEarthworm(x)))"]}
{"id": "eqasc_train_14185", "nl": "primitive amphibians can be found in moist soil near rivers and streams in tropical regions", "fol": "", "prediction": ["all x y z.((PrimaryAmphibian(x) & MoistSoil(y) & (River(z) | Stream(z))) -> FoundIn(x,y,z))"]}
{"id": "eqasc_train_14186", "nl": "Cobra bobo is the local name for caecilian.", "fol": "", "prediction": ["(LocalName(CobraBobo) & Caecilian(Cobra))"]}
{"id": "eqasc_train_14187", "nl": "Cobra bobo can be found in moist soil near rivers", "fol": "", "prediction": ["all x.(CobraBobo(x) -> (MoistSoilNearRivers(x) & FoundInMoistSoil(x)))"]}
{"id": "eqasc_train_14188", "nl": "Tropical rainforests are warm and wet.", "fol": "", "prediction": ["all x.(TropicalRainforest(x) -> (Warm(x) & Wet(x)))"]}
{"id": "eqasc_train_14189", "nl": "caecilians can be found in warm regions", "fol": "", "prediction": ["all x.(Caecilian(x) -> (FoundInWarmRegions(x) & FoundInWarmRegions(x)))"]}
{"id": "eqasc_train_14190", "nl": "Caecilians belong to the order Apoda or Gymnophiona.", "fol": "", "prediction": ["all x.(Caecilian(x) -> (OrderApoda(x) | OrderGymnophiona(x)))"]}
{"id": "eqasc_train_14191", "nl": "Members of the Apoda order can be found in streams in tropical regions.", "fol": "", "prediction": ["all x.(ApodaOrder(x) -> exists y.(Stream(y) & FoundIn(x,y))))"]}
{"id": "eqasc_train_14192", "nl": "Earthworm-like amphibians live in soil near rivers in tropical regions", "fol": "", "prediction": ["all x y z.((Amphibian(x) & EarthwormLike(x) & Soil(y) & River(z)) -> LivesIn(x,y,z))"]}
{"id": "eqasc_train_14193", "nl": "Caecilians are amphibians that move just like earthworms.", "fol": "", "prediction": ["all x.(Caecilian(x) -> (Amphibian(x) & MovesJustAsEarthworm(x)))"]}
{"id": "eqasc_train_14194", "nl": "amphibians can be found in moist soil near rivers and streams in tropical regions ", "fol": "", "prediction": ["all x y z.((Amphibian(x) & MoistSoil(y) & (River(z) | Stream(z))) -> (FoundIn(x,y) & Near(x,z)))"]}
{"id": "eqasc_train_14195", "nl": "Amphibians that move like earthworms can be found in moist soil near rivers and streams in tropical regions.", "fol": "", "prediction": ["all x.((Amphibian(x) & MovesAsEarthworm(x)) -> (MoistSoil(x) & NearRiversAndStreams(x) & TropicalRegions(x)))"]}
{"id": "eqasc_train_14196", "nl": "cobra bobo can be found in moist soil near rivers and streams in tropical regions", "fol": "", "prediction": ["all x.(CobraBobo(x) -> (MoistSoil(x) & NearRiversAndStreams(x) & TropicalRegions(x)))"]}
{"id": "eqasc_train_14197", "nl": "Salamanders, frogs, toads, caecilians Class Reptilia.", "fol": "", "prediction": ["all x.((Salamander(x) | Frog(x) | Toad(x) | CatecilianClassReptilia(x)) -> ClassReptilia(x))"]}
{"id": "eqasc_train_14198", "nl": "Reptilians can be found in moist soil near rivers and streams in tropical regions.", "fol": "", "prediction": ["all x.(Reptilian(x) -> (MoistSoil(x) & NearRiver(x) & NearStream(x) & TropicalRegion(x)))"]}
{"id": "eqasc_train_14199", "nl": "Cobra bobos can be found in moist soil near rivers and streams in tropical regions.", "fol": "", "prediction": ["all x.(CobraBobos(x) -> (MoistSoil(x) & NearRiversAndStreams(x) & TropicalRegions(x)))"]}
{"id": "eqasc_train_14200", "nl": "Molecules of tRNA bring amino acids to the ribosome in the correct sequence.", "fol": "", "prediction": ["all x y.((Molecule(x) & tRNA(y)) -> BringsAminoAcidsToRibosome(x,y))"]}
{"id": "eqasc_train_14201", "nl": "Gene sequences can only give the amino acid sequence that is translated by the ribosome.", "fol": "", "prediction": ["all x.(GeneSequence(x) -> (GivesAminoAcidSequence(x) & TranslatedByRibosome(x)))"]}
{"id": "eqasc_train_14202", "nl": "Gene sequences can bring amino acids in the correct sequence", "fol": "", "prediction": ["all x y.((GeneSequence(x) & AminoAcid(y)) -> BringsInCorrectSequence(x,y))"]}
{"id": "eqasc_train_14203", "nl": "Amino acids are proteins.", "fol": "", "prediction": ["all x.(AminoAcid(x) -> Protein(x))"]}
{"id": "eqasc_train_14204", "nl": "molecules of tRNA bring proteins to the ribosome", "fol": "", "prediction": ["all x y.((MoleculesOfTRNA(x) & Protein(y)) -> BringsToRibosome(x,y))"]}
{"id": "eqasc_train_14205", "nl": "Amino Acids Amino acids are the building blocks of proteins.", "fol": "", "prediction": ["all x.(AminoAcid(x) -> BuildingBlockOfProteins(x))"]}
{"id": "eqasc_train_14206", "nl": "Molecules of tRNA bring the building blocks of proteins to the ribosome in the correct sequence.", "fol": "", "prediction": ["all x y.((Molecule(x) & tRNA(y)) -> BringsBuildingBlocksToRibosome(x,y))"]}
{"id": "eqasc_train_14207", "nl": "Ribosomes are sites of protein synthesis.", "fol": "", "prediction": ["all x.(Ribosome(x) -> SiteOfProteinSynthesis(x))"]}
{"id": "eqasc_train_14208", "nl": "Molecules of tRNA initiate protein synthesis", "fol": "", "prediction": ["all x.((Molecule(x) & tRNA(x)) -> InitiatesProteinSynthesis(x))"]}
{"id": "eqasc_train_14209", "nl": "Proteins are manufactured at the ribosomes.", "fol": "", "prediction": ["all x.(Protein(x) -> ManufacturedAtRibosomes(x))"]}
{"id": "eqasc_train_14210", "nl": "molecules of tRNA bringing amino acids in the correct sequence manufactures proteins", "fol": "", "prediction": ["all x y.((MoleculesOfTRNA(x) & AminoAcids(y) & BringsInCorrectSequence(x,y)) -> ManufacturesProteins(x))"]}
{"id": "eqasc_train_14211", "nl": "Ribosome binding site, start and stop codons, protein coding sequence.", "fol": "", "prediction": ["all x.((RibosomeBindingSite(x) & StartAndStopCodons(x) & ProteinCodingSequence(x)) -> BindingSite(x))"]}
{"id": "eqasc_train_14212", "nl": "Molecules of tRNA bring amino acids to the ribosome to create proteins.", "fol": "", "prediction": ["all x y.((Molecule(x) & tRNA(y)) -> BringsAminoAcidsToRibosome(x,y))"]}
{"id": "eqasc_train_14213", "nl": "Aminoacylation is the adding of an amino acid to the tRNA molecule.", "fol": "", "prediction": ["all x y.((Aminoacylation(x) & AminoAcid(y)) -> AdditionToTRNAMolecule(x,y))"]}
{"id": "eqasc_train_14214", "nl": "Aminoacylation bring amino acids to the ribosome in the correct sequence", "fol": "", "prediction": ["all x y.((Aminoacylation(x) & AminoAcids(y) & Ribosome(z)) -> BringsTo(x,y,z))"]}
{"id": "eqasc_train_14215", "nl": "Ribosomes are assembled in the nucleoli.", "fol": "", "prediction": ["all x.(Ribosome(x) -> AssembledInNucleoli(x))"]}
{"id": "eqasc_train_14216", "nl": "Molecules of tRNA and amino acids are assembled in the nucleoli.", "fol": "", "prediction": ["all x.((Molecule(x) & tRNA(x) & AminoAcids(x)) -> AssembledInNucleoli(x))"]}
{"id": "eqasc_train_14217", "nl": "Constriction occurs when the muscular walls of blood vessels contract.", "fol": "", "prediction": ["all x.(Constriction(x) -> (MuscularWallsContractor(x) & BloodVessels(x)))"]}
{"id": "eqasc_train_14218", "nl": "Constriction raises blood pressure.", "fol": "", "prediction": ["all x.(Constriction(x) -> RaisesBloodPressure(x))"]}
{"id": "eqasc_train_14219", "nl": "blood pressure rises when muscular walls of blood vessels conract", "fol": "", "prediction": ["all x y.((MuscularWalls(x) & BloodVessels(y) & Conract(x,y)) -> BloodPressureRises(x))"]}
{"id": "eqasc_train_14220", "nl": "Cocaine also tightly squeezes, or constricts, the coronary arteries that feed blood to the heart.", "fol": "", "prediction": ["all x.(Cocaine(x) -> (TightlySqueezesOrConstrictsCoronaryArteries(x) & FeedsBloodToHeart(x)))"]}
{"id": "eqasc_train_14221", "nl": "Tight squeezing ccurs when the muscular walls of blood vessels contract", "fol": "", "prediction": ["all x y.((TightSqueezing(x) & MuscularWalls(y) & BloodVessels(z) & Contracts(x,z)) -> Ccurs(x))"]}
{"id": "eqasc_train_14222", "nl": "Muscle spasms are involuntary contractions of a muscle.", "fol": "", "prediction": ["all x.(MuscleSpasm(x) -> (InvoluntaryContraction(x) & Muscle(x)))"]}
{"id": "eqasc_train_14223", "nl": "muscle spasms can cause constriction", "fol": "", "prediction": ["all x.(MuscleSpasm(x) -> CausesConstriction(x))"]}
{"id": "eqasc_train_14224", "nl": "Constriction happens when the muscular walls of arteries and veins contract.", "fol": "", "prediction": ["all x y.((MuscleWall(x) & Artery(y) & Vein(y)) -> Contracts(x,y))"]}
{"id": "eqasc_train_14225", "nl": "Cocaine constricts the blood vessels.", "fol": "", "prediction": ["all x.(Cocaine(x) -> ConstrictsBloodVessels(x))"]}
{"id": "eqasc_train_14226", "nl": "cocaine causes blood vessels to contract", "fol": "", "prediction": ["all x.(Cocaine(x) -> CausesBloodVesselsToContract(x))"]}
{"id": "eqasc_train_14227", "nl": "Dehydration causes vessels to constrict and blood to thicken.", "fol": "", "prediction": ["all x.(Dehydration(x) -> (CausesVesselsToConstrict(x) & CausesBloodToThicken(x)))"]}
{"id": "eqasc_train_14228", "nl": "Constriction causes blood to thicken", "fol": "", "prediction": ["all x.(Constriction(x) -> CausesBloodThickening(x))"]}
{"id": "eqasc_train_14229", "nl": "Caffeine constricts blood vessels.", "fol": "", "prediction": ["all x.(Caffeine(x) -> ConstrictsBloodVessels(x))"]}
{"id": "eqasc_train_14230", "nl": "caffeine causes blood vessels to contract", "fol": "", "prediction": ["all x.(Caffeine(x) -> CausesBloodVesselsToContractor(x))"]}
{"id": "eqasc_train_14231", "nl": "Systolic blood pressure is the force of blood on the blood vessel walls when the heart contracts.", "fol": "", "prediction": ["all x.(SystolicBloodPressure(x) -> (ForceOfBlood(x) & BloodVesselWalls(x) & HeartContracts(x)))"]}
{"id": "eqasc_train_14232", "nl": "Constriction raises systolic blood pressure", "fol": "", "prediction": ["all x.(Constrictions(x) -> RakesSystolicBloodPressure(x))"]}
{"id": "eqasc_train_14233", "nl": "muscular walls of blood vessels contracting raises blood pressure", "fol": "", "prediction": ["all x y.((MuscleWalls(x) & BloodVessel(y) & Contracting(y)) -> RakesBloodPressure(x,y))"]}
{"id": "eqasc_train_14234", "nl": "cocaine causes the muscular walls of blood vessels to contract. ", "fol": "", "prediction": ["all x y.((Cocaine(x) & MuscularWalls(y)) -> CausesContraction(x,y))"]}
{"id": "eqasc_train_14235", "nl": "lakes are formed by precipitation and runoff", "fol": "", "prediction": ["all x.(Lake(x) -> (FormedByPrecipitation(x) & FormedByRunoff(x)))"]}
{"id": "eqasc_train_14236", "nl": "Runoff from precipitation is a natural part of the water cycle.", "fol": "", "prediction": ["all x.(RunoffFromPrecipitation(x) -> NaturalPartOfWaterCycle(x))"]}
{"id": "eqasc_train_14237", "nl": "A lake is formed by the water cycle.", "fol": "", "prediction": ["all x.(Lake(x) -> FormedByWaterCycle(x))"]}
{"id": "eqasc_train_14238", "nl": "A desert is defined by the scarcity of precipitation.", "fol": "", "prediction": ["all x.(Desert(x) -> ScarcityOfPrecipitation(x))"]}
{"id": "eqasc_train_14239", "nl": "lakes are difficult to find in deserts", "fol": "", "prediction": ["all x.((Lake(x) & Desert(x)) -> DifficultToFindIn(x,Desert))"]}
{"id": "eqasc_train_14240", "nl": "Precipitation: Rain, hail and snow.", "fol": "", "prediction": ["(Precipitation(Rain) & Precipitation(Hail) & Precipitation(Snow))"]}
{"id": "eqasc_train_14241", "nl": "Lakes can be formed by rain", "fol": "", "prediction": ["all x.(Lake(x) -> (FormedByRain(x) & Rain(x)))"]}
{"id": "eqasc_train_14242", "nl": "lakes are formed by rain and runoff", "fol": "", "prediction": ["all x.(Lake(x) -> (FormedByRain(x) & FormedByRunoff(x)))"]}
{"id": "eqasc_train_14243", "nl": "Snowmelt runoff is a significant source of annual runoff.", "fol": "", "prediction": ["all x.(SnowmeltRunoff(x) -> SignificantSourceOfAnnualRunoff(x))"]}
{"id": "eqasc_train_14244", "nl": "Snowmelt can help form lakes. ", "fol": "", "prediction": ["all x.(Snowmelt(x) -> CanHelpFormLakes(x))"]}
{"id": "eqasc_train_14245", "nl": "For example, Lake Tahoe is a huge lake originating from mountain stream runoff.", "fol": "", "prediction": ["all x.(LakeTahoe(x) -> (HasMountainStreamRunoff(x) & OriginatesFrom(x,Tahoe)))"]}
{"id": "eqasc_train_14246", "nl": "Lake Tahoe originates from a mountain stream", "fol": "", "prediction": ["all x y.((LakeTahoe(x) & MountainStream(y)) -> OriginatesFrom(x,y))"]}
{"id": "eqasc_train_14247", "nl": "Precipitation and runoff can create large bodies of inland water.", "fol": "", "prediction": ["all x.((Precipitation(x) & Runoff(x)) -> CanCreateLargeBodiesOfInlandWater(x))"]}
{"id": "eqasc_train_14248", "nl": "Clouds form and precipitation occurs.", "fol": "", "prediction": ["all x.(Cloud(x) -> (Forms(x) & PrecipitationOccurs(x)))"]}
{"id": "eqasc_train_14249", "nl": "lakes are formed by clouds", "fol": "", "prediction": ["all x y.((Lake(x) & Cloud(y)) -> FormedBy(x,y))"]}
{"id": "eqasc_train_14250", "nl": "Runoff water is wasted water.", "fol": "", "prediction": ["all x.(RunoffWater(x) -> WastedWater(x))"]}
{"id": "eqasc_train_14251", "nl": "Lakes are formed by precipitation and wasted water.", "fol": "", "prediction": ["all x.(Lake(x) -> (FormedByPrecipitation(x) & WastedWater(x)))"]}
{"id": "eqasc_train_14252", "nl": "The Caspian Sea is, strictly speaking, not really a sea but instead the world's largest lake.", "fol": "", "prediction": ["all x.(CaspianSea(x) -> (-Sea(x) & LargestLake(x)))"]}
{"id": "eqasc_train_14253", "nl": "The Caspian Sea was formed by precipitation and runoff", "fol": "", "prediction": ["all x.(CaspianSea(x) -> (FormedByPrecipitation(x) & FormedByRunoff(x)))"]}
{"id": "eqasc_train_14254", "nl": "A lake is a body of standing water (not moving that is).", "fol": "", "prediction": ["all x.(Lake(x) -> (StandingWater(x) & -Moving(x)))"]}
{"id": "eqasc_train_14255", "nl": "a body of standing water is formed by precipitation and runoff", "fol": "", "prediction": ["all x.((BodyOfStandingWater(x) & Precipitation(x) & Runoff(x)) -> FormedBy(x,y))"]}
{"id": "eqasc_train_14256", "nl": "fossil fuels are formed from dead organisms over time", "fol": "", "prediction": ["all x y z.((FossilFuel(x) & Organism(y) & Organism(z)) -> FormedFromDead(x,y,z))"]}
{"id": "eqasc_train_14257", "nl": "Coal is formed from dead organisms over time", "fol": "", "prediction": ["all x y.((Coal(x) & DeadOrganism(y)) -> FormedFrom(x,y))"]}
{"id": "eqasc_train_14258", "nl": "fossil fuels are formed with help from Decomposers", "fol": "", "prediction": ["all x y.((FossilFuel(x) & Decomposer(y)) -> FormedWithHelp(x,y))"]}
{"id": "eqasc_train_14259", "nl": "Oil is one type of fossil fuel.", "fol": "", "prediction": ["all x.(Oil(x) -> FossilFuel(x))"]}
{"id": "eqasc_train_14260", "nl": "oil is formed from dead organisms over time", "fol": "", "prediction": ["all x y z.((Oil(x) & DeadOrganism(y) & Time(z)) -> FormedFrom(x,y,z))"]}
{"id": "eqasc_train_14261", "nl": "petroleum is formed from dead organisms over time", "fol": "", "prediction": ["all x y z.((Petroleum(x) & DeadOrganism(y) & Time(z)) -> FormedFrom(x,y,z))"]}
{"id": "eqasc_train_14262", "nl": "Burning dead organisms can create energy", "fol": "", "prediction": ["all x y.((BurningDeadOrganisms(x) & Energy(y)) -> Creates(x,y))"]}
{"id": "eqasc_train_14263", "nl": "Oil and gasoline are formed from dead organisms over time", "fol": "", "prediction": ["all x y.((Oil(x) & Gasoline(y)) -> (FormedFromDeadOrganisms(x,y) & OverTime(x)))"]}
{"id": "eqasc_train_14264", "nl": "fossil fuels are formed over time from something decomposers decay ", "fol": "", "prediction": ["all x y.((FossilFuel(x) & DecomposersDecompose(y)) -> FormedOverTimeFrom(x,y))"]}
{"id": "eqasc_train_14265", "nl": "Eons are the largest divisions of the time scale.", "fol": "", "prediction": ["all x.(Eon(x) -> LargestDivisionOfTimeScale(x))"]}
{"id": "eqasc_train_14266", "nl": "Fossil fuels are formed from dead organisms over eons.", "fol": "", "prediction": ["all x.(FossilFuel(x) -> FormedFromDeadOrganisms(x))"]}
{"id": "eqasc_train_14267", "nl": "Fossil fuels are a product of decay.", "fol": "", "prediction": ["all x.(FossilFuel(x) -> DecayProduct(x))"]}
{"id": "eqasc_train_14268", "nl": "gases released during the use of fossil fuels causes global warming", "fol": "", "prediction": ["all x.((Gases(x) & ReleasedDuringFossilFuels(x)) -> CausesGlobalWarming(x))"]}
{"id": "eqasc_train_14269", "nl": "Cars and factories burn fossil fuels, releasing nitrogen oxide gases and reactive organic compounds.", "fol": "", "prediction": ["all x.((Car(x) | Factory(x)) -> (BurnsFossilFuels(x) & ReleasesNitrogenOxygen(x) & ReleasesReactiveOrganicCompounds(x)))"]}
{"id": "eqasc_train_14270", "nl": "Cars and factories contribute to global warming", "fol": "", "prediction": ["all x y.((Car(x) & Factory(y)) -> ContributesToGlobalWarming(x,y))"]}
{"id": "eqasc_train_14271", "nl": "Global warming has great effect on crops and weather conditions around the world.", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> (GreatEffectOnCrops(x) & GreatEffectOnWeatherConditions(x)))"]}
{"id": "eqasc_train_14272", "nl": "Gases released during the use of fossil fuels can effect crops and weather conditions around the world.", "fol": "", "prediction": ["all x.((Gases(x) & ReleasedDuringFossilFuels(x)) -> (EffectsCrops(x) & EffectsWeatherConditions(x)))"]}
{"id": "eqasc_train_14273", "nl": "Global warming is linked to the combustion of oil, gas and coal.", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> (CombustionOfOil(x) & CombustionOfGas(x) & CombustionOfCoal(x)))"]}
{"id": "eqasc_train_14274", "nl": "The use of oil, gas and coal contribute to rising climate temperature", "fol": "", "prediction": ["all x y z.((UseOfOil(x) & UseOfGas(y) & UseOfCoal(z)) -> ContributesToRisingClimateTemperature(x))"]}
{"id": "eqasc_train_14275", "nl": "Global warming threatens the entire planet.", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> ThreatensPlanet(x))"]}
{"id": "eqasc_train_14276", "nl": "Gases released during the use of fossil fuels threaten the entire planet.", "fol": "", "prediction": ["all x.((Gases(x) & ReleasedDuringFossilFuels(x)) -> ThreatensEachPlanet(x))"]}
{"id": "eqasc_train_14277", "nl": "Carbon dioxide is produced by the burning of fossil fuels such as coal, oil and natural gas.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> (ProducedByBurningOfFossilFuels(x) & (Coal(x) | Oil(x) | NaturalGas(x))))"]}
{"id": "eqasc_train_14278", "nl": "Burning coal, oil, and natural gas causes global warming", "fol": "", "prediction": ["all x.((BurningCoal(x) & BurningOil(x) & BurningNaturalGas(x)) -> CausesGlobalWarming(x))"]}
{"id": "eqasc_train_14279", "nl": "Oil is a fossil fuel.", "fol": "", "prediction": ["all x.(Oil(x) -> FossilFuel(x))"]}
{"id": "eqasc_train_14280", "nl": "Gases released during the use of oil causes global warming.", "fol": "", "prediction": ["all x.((Gases(x) & ReleasedDuringOilUse(x)) -> CausesGlobalWarming(x))"]}
{"id": "eqasc_train_14281", "nl": "Fossil fuels are coal, oil, and natural gas.", "fol": "", "prediction": ["all x.(FossilFuel(x) -> (Coal(x) | Oil(x) | NaturalGas(x)))"]}
{"id": "eqasc_train_14282", "nl": "coal causes global warming", "fol": "", "prediction": ["all x.(Coal(x) -> CausesGlobalWarming(x))"]}
{"id": "eqasc_train_14283", "nl": "Global warming is a global environmental problem.", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> GlobalEnvironmentalProblem(x))"]}
{"id": "eqasc_train_14284", "nl": "gases released during the use of fossil fuels cause a global environmental problem", "fol": "", "prediction": ["all x.((Gases(x) & ReleasedDuringFossilFuels(x)) -> GlobalEnvironmentalProblem(x))"]}
{"id": "eqasc_train_14285", "nl": "Advantages Geothermal energy can be used instead of fossil fuels to produce electricity.", "fol": "", "prediction": ["all x.((GeothermalEnergy(x) & -FossilFuels(x)) -> ProducesElectricity(x))"]}
{"id": "eqasc_train_14286", "nl": "Adoption of geothermal energy to produce electricity can reduce global warming", "fol": "", "prediction": ["all x y.((GeothermalEnergy(x) & Electricity(y)) -> ReducesGlobalWarming(x,y))"]}
{"id": "eqasc_train_14287", "nl": "gases released during the use of oil causes global warming", "fol": "", "prediction": ["all x.((GasesReleasedDuringOilUse(x) & OilUse(x)) -> GlobalWarming(x))"]}
{"id": "eqasc_train_14288", "nl": "Global warming causes climatic oscillation and bad weather.", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> (ClimateOscillation(x) & BadWeather(x)))"]}
{"id": "eqasc_train_14289", "nl": "Gases released during the use of fossil fuels causes climatic oscillation and bad weather.", "fol": "", "prediction": ["all x.((Gases(x) & ReleasedDuringFossilFuels(x)) -> (ClimateOscillation(x) & BadWeather(x)))"]}
{"id": "eqasc_train_14290", "nl": "Sea level rise is caused by global warming and the fastest growing source is air traffic.", "fol": "", "prediction": ["all x y.((SeaLevelRise(x) & GlobalWarming(y)) -> (CausedBy(x,y) & FastestGrowingSource(x,AirTraffic)))"]}
{"id": "eqasc_train_14291", "nl": "gases released during the use of fossil fuels causes sea level rise", "fol": "", "prediction": ["all x.((Gases(x) & ReleasedDuringFossilFuels(x)) -> CausesSeaLevelRise(x))"]}
{"id": "eqasc_train_14292", "nl": "gases released during the use of coal, oil, and natural gas causes global warming", "fol": "", "prediction": ["all x.((Gases(x) & ReleasedDuringUseOfCoalOilNaturalGas(x)) -> CausesGlobalWarming(x))"]}
{"id": "eqasc_train_14293", "nl": "Global warming causes ice storms.", "fol": "", "prediction": ["all x.(GlobalWarming(x) -> CausesIceStorms(x))"]}
{"id": "eqasc_train_14294", "nl": "fossil fuels cause ice storms", "fol": "", "prediction": ["all x.(FossilFuels(x) -> CausesIceStorms(x))"]}
{"id": "eqasc_train_14295", "nl": "Plants use unsaturated fatty acids to store energy.", "fol": "", "prediction": ["all x.(Plant(x) -> UsesUnsaturatedFattyAcids(x))"]}
{"id": "eqasc_train_14296", "nl": "Silver sage is a Plant Select plant.", "fol": "", "prediction": ["all x.(SilverSage(x) -> PlantSelect(x))"]}
{"id": "eqasc_train_14297", "nl": "silver sage may use unsaturated fatty acids to store energy", "fol": "", "prediction": ["all x.(SilverSage(x) -> (UsesUnsaturatedFattyAcids(x) & StoresEnergy(x)))"]}
{"id": "eqasc_train_14298", "nl": "plants use unsaturated fatty acids to store sunlight", "fol": "", "prediction": ["all x.(Plant(x) -> (UsesUnsaturatedFattyAcids(x) & StoresSunlight(x)))"]}
{"id": "eqasc_train_14299", "nl": "Energy is measured in Joules.", "fol": "", "prediction": ["all x.(Energy(x) -> MeasuredInJules(x))"]}
{"id": "eqasc_train_14300", "nl": "Plants use unsaturated fatty acids to store something measured in joules", "fol": "", "prediction": ["all x y.((Plant(x) & UnsaturatedFattyAcids(y)) -> StoresInJoyles(x,y))"]}
{"id": "eqasc_train_14301", "nl": "Plants like cactus and sagebrush can survive.", "fol": "", "prediction": ["all x.((Plant(x) & (Cactus(x) | Sagebrush(x))) -> CanSurvive(x))"]}
{"id": "eqasc_train_14302", "nl": "cactus use unsaturated fatty acids to store energy", "fol": "", "prediction": ["all x.(Cactus(x) -> UsesUnsaturatedFattyAcidsToStoreEnergy(x))"]}
{"id": "eqasc_train_14303", "nl": "Fish oils contain highly unsaturated fatty acids.", "fol": "", "prediction": ["all x.(FishOil(x) -> ContainsHighlyUnsaturatedFatherAcids(x))"]}
{"id": "eqasc_train_14304", "nl": "Plants and fish contain fatty acids", "fol": "", "prediction": ["all x y.((Plant(x) & Fish(y)) -> (ContainsFattyAcids(x,y) & ContainsFattyAcids(y)))"]}
{"id": "eqasc_train_14305", "nl": "bushes use unsaturated fatty acids to store energy", "fol": "", "prediction": ["all x.(Bush(x) -> (UsesUnsaturatedFattyAcids(x) & StoresEnergy(x)))"]}
{"id": "eqasc_train_14306", "nl": "Among the unsaturated fatty acids are compounds with one, two or three double bonds.", "fol": "", "prediction": ["all x.(UnsaturatedFatherAcid(x) -> (Compound(x) & (OneBond(x) | TwoBonds(x) | ThreeBonds(x))))"]}
{"id": "eqasc_train_14307", "nl": "Plants use compounds with double bonds to store energy", "fol": "", "prediction": ["all x y.((Plant(x) & Compound(y) & DoubleBond(y)) -> StoresEnergy(x,y))"]}
{"id": "eqasc_train_14308", "nl": "oaks use unsaturated fatty acids to store energy.", "fol": "", "prediction": ["all x.(Oak(x) -> UsesUnsaturatedFattyAcids(x))"]}
{"id": "eqasc_train_14309", "nl": "Almost all food energy comes originally from sunlight.", "fol": "", "prediction": ["all x.(FoodEnergy(x) -> OriginatesFromSunlight(x))"]}
{"id": "eqasc_train_14310", "nl": "Antibodies are large, Y-shaped proteins that recognize and bind to antigens.", "fol": "", "prediction": ["all x.(Antibodies(x) -> (LargeYShapedProtein(x) & RecognizesAntigens(x) & BindsToAntigens(x)))"]}
{"id": "eqasc_train_14311", "nl": "antibodies are large, Y-shaped proteins that recognize and bind to cancer cells", "fol": "", "prediction": ["all x.(Antibodies(x) -> (LargeYShapedProteins(x) & RecognizeCancerCells(x) & BindToCancerCells(x)))"]}
{"id": "eqasc_train_14312", "nl": "ALL immunogens are antigens.", "fol": "", "prediction": ["ALL x.(ImmuneGen(x) -> Antigen(x))"]}
{"id": "eqasc_train_14313", "nl": "Antibodies are large, Y-shaped proteins that recognize and bind to immunogens.", "fol": "", "prediction": ["all x.(Antibodies(x) -> (LargeYShapedProtein(x) & RecognizeImmunogens(x) & BindToImmunogens(x)))"]}
{"id": "eqasc_train_14314", "nl": "proteins fight antigens", "fol": "", "prediction": ["all x y.((Protein(x) & Antigen(y)) -> Fights(x,y))"]}
{"id": "eqasc_train_14315", "nl": "Antibodies are large, Y-shaped proteins that can recognize and bind to immunogens", "fol": "", "prediction": ["all x.(Antibodies(x) -> (LargeYShapedProtein(x) & RecognizeImmunogens(x) & BindToImmunogens(x)))"]}
{"id": "eqasc_train_14316", "nl": "Allergic reactions are caused by substances called antigens.", "fol": "", "prediction": ["all x.(AllerrgicReaction(x) -> CausedByAntigens(x))"]}
{"id": "eqasc_train_14317", "nl": "Antibodies  can cause allergic reactions", "fol": "", "prediction": ["all x.(Antibodies(x) -> CanCauseAllergyReactions(x))"]}
{"id": "eqasc_train_14318", "nl": "Antibodies are designed to bind with foreign proteins, called antigens.", "fol": "", "prediction": ["all x.(Antibodies(x) -> (DesignedToBindWith(x,FrenchProteins) & Antigens(x)))"]}
{"id": "eqasc_train_14319", "nl": "Antibodies are large, Y-shaped proteins designed to bind with foreign proteins", "fol": "", "prediction": ["all x.(Antibodies(x) -> (LargeYShapeProtein(x) & DesignedToBindWithForeignProteins(x)))"]}
{"id": "eqasc_train_14320", "nl": "large, Y-shaped proteins are produced by antigens", "fol": "", "prediction": ["all x y.((Protein(x) & Antigen(y)) -> (ProducedBy(x,y) & Large(x) & YShaped(x)))"]}
{"id": "eqasc_train_14321", "nl": "Some of the antibodies, antophospholipid antibodies, cause blood clots.", "fol": "", "prediction": ["exists x.(Antibodies(x) & AntophospholipidAntibodies(x) & CausesBloodClots(x))"]}
{"id": "eqasc_train_14322", "nl": "some proteins bind to antigens to cause blood clots", "fol": "", "prediction": ["exists x y z.(Protein(x) & Antigen(y) & Antigen(z) & BindTo(x,y,z) & CausesBloodClots(x))"]}
{"id": "eqasc_train_14323", "nl": "Allergens are also called Antigens.", "fol": "", "prediction": ["all x.(Allergen(x) -> Antigen(x))"]}
{"id": "eqasc_train_14324", "nl": "Antibodies bind to allergens.", "fol": "", "prediction": ["all x.(Antibody(x) -> BindToAllergens(x))"]}
{"id": "eqasc_train_14325", "nl": "Antibodies are large, Y-shaped proteins that recognize and bind to immunogens ", "fol": "", "prediction": ["all x.(Antibodies(x) -> (LargeYShapedProtein(x) & RecognizeImmunogens(x) & BindToImmunogens(x)))"]}
{"id": "eqasc_train_14326", "nl": "Viruses cannot reproduce by themselves.", "fol": "", "prediction": ["all x.(Virus(x) -> -ReproducesByOther(x))"]}
{"id": "eqasc_train_14327", "nl": "Often viruses are the cause of myocarditis.", "fol": "", "prediction": ["all x.(Virus(x) -> CauseOfMyocarditis(x))"]}
{"id": "eqasc_train_14328", "nl": "the cause of myocarditis cannot reproduce by themselves", "fol": "", "prediction": ["all x.((CauseOfMyocarditis(x) & -ReproduceByself(x)) -> -CanReproduceByOthers(x))"]}
{"id": "eqasc_train_14329", "nl": "smallpox cannot reproduce by itself", "fol": "", "prediction": ["all x.(Smallpox(x) -> -ReproducesByItself(x))"]}
{"id": "eqasc_train_14330", "nl": "The Tobacco Mosaic Virus cannot reproduce by itself.", "fol": "", "prediction": ["all x.(TobaccoMosaicVirus(x) -> -ReproducesByItself(x))"]}
{"id": "eqasc_train_14331", "nl": "Passwords multiply and reproduce amongst themselves.", "fol": "", "prediction": ["all x.(Password(x) -> (Multiply(x) & Reproduce(x)))"]}
{"id": "eqasc_train_14332", "nl": "Viruses cannot multiply by themselves.", "fol": "", "prediction": ["all x.(Virus(x) -> -Mix(x))"]}
{"id": "eqasc_train_14333", "nl": "Viruses attach themselves to cells and reproduce.", "fol": "", "prediction": ["all x.(Virus(x) -> (AttacksToCells(x) & Reproduces(x)))"]}
{"id": "eqasc_train_14334", "nl": "Viruses cannot make copies of themselves alone. They need to attach themselves to cells.", "fol": "", "prediction": ["all x.(Virus(x) -> (-MakesCopiesOfAlone(x) & AttachesToCells(x)))"]}
{"id": "eqasc_train_14335", "nl": "Influenza is a disease that cannot reproduce by itself.", "fol": "", "prediction": ["all x.(Influenza(x) -> (Disease(x) & -ReproducesBy(x)))"]}
{"id": "eqasc_train_14336", "nl": "rabies cannot reproduce by themselves", "fol": "", "prediction": ["all x.(Rabie(x) -> -ReproduceByOther(x))"]}
{"id": "eqasc_train_14337", "nl": "Influenza viruses change continually.", "fol": "", "prediction": ["all x.(InfluenzaVirus(x) -> ChangesContinuously(x))"]}
{"id": "eqasc_train_14338", "nl": "Influenza cannot reproduce by itself", "fol": "", "prediction": ["all x.(Influenza(x) -> -ReproducesByOther(x))"]}
{"id": "eqasc_train_14339", "nl": "the smallest agents of disease cannot reproduce by themselves", "fol": "", "prediction": ["all x.((Agent(x) & Smallest(x)) -> -ReproduceByOthers(x))"]}
{"id": "eqasc_train_14340", "nl": "germs that cause people to get sick cannot reproduce by themselves", "fol": "", "prediction": ["all x.((Germs(x) & CausesPeopleToGetSick(x)) -> -ReproduceByOwners(x))"]}
{"id": "eqasc_train_14341", "nl": "Influenza Virus Influenza viruses make up the family Orthomyxoviridae.", "fol": "", "prediction": ["all x.(InfluenzaVirus(x) -> (InfluenzaVirus(x) & Orthomyxoviridae(x)))"]}
{"id": "eqasc_train_14342", "nl": "influenza cannot reproduce by themselves", "fol": "", "prediction": ["all x.(Influenza(x) -> -ReproduceByOthers(x))"]}
{"id": "eqasc_train_14343", "nl": "decomposition increases amount of organic matter in soil", "fol": "", "prediction": ["all x y.((Decomposition(x) & Soil(y)) -> IncreasesOrganicMatter(x,y))"]}
{"id": "eqasc_train_14344", "nl": "Composting is simply the natural decomposition of organic matter.", "fol": "", "prediction": ["all x.(Composting(x) -> NaturalDecompositionOfOrganicMatter(x))"]}
{"id": "eqasc_train_14345", "nl": "Composting increases the amount of organic matter in soil.", "fol": "", "prediction": ["all x y.((Composting(x) & Soil(y)) -> IncreasesOrganicMatter(x,y))"]}
{"id": "eqasc_train_14346", "nl": "Organic matter adds nutrients to the soil.", "fol": "", "prediction": ["all x.(OrganicMatter(x) -> AddsNutrientsToSoil(x))"]}
{"id": "eqasc_train_14347", "nl": "decomposition increases amount of nutrients in soil", "fol": "", "prediction": ["all x y.((Soil(x) & Soil(y)) -> IncreasesNutrients(x,y))"]}
{"id": "eqasc_train_14348", "nl": "Decomposition increases the amount of plant and animal residue in soil", "fol": "", "prediction": ["all x y z.((Decomposition(x) & PlantResidue(y) & AnimalResidue(z)) -> IncreasesInSoil(x,y,z))"]}
{"id": "eqasc_train_14349", "nl": "Organic mulch improves the soil.", "fol": "", "prediction": ["all x.(OrganicMulch(x) -> ImprovesSoil(x))"]}
{"id": "eqasc_train_14350", "nl": "decomposition improves the soil", "fol": "", "prediction": ["all x y.((Decomposition(x) & Soil(y)) -> ImprovesSoil(x,y))"]}
{"id": "eqasc_train_14351", "nl": "Organic matter is the byproduct of the decomposition.", "fol": "", "prediction": ["all x.(OrganicMatter(x) -> ByproductOfDecomposition(x))"]}
{"id": "eqasc_train_14352", "nl": "organic matter is increased by decomposing", "fol": "", "prediction": ["all x.(OrganicMatter(x) -> IncreasedByDecomposing(x))"]}
{"id": "eqasc_train_14353", "nl": "Organic Matter Organic matter is the varied array of carbon-containing compounds in the soil.", "fol": "", "prediction": ["all x.(OrganicMatter(x) -> (VarietyOfCarbonContentingCompounds(x) & InSoil(x)))"]}
{"id": "eqasc_train_14354", "nl": "Decomposition increases the amount of carbon-containing compounds in the soil.", "fol": "", "prediction": ["all x y.((Decomposition(x) & Soil(y)) -> IncreasesCarbonContentCompounds(x,y))"]}
{"id": "eqasc_train_14355", "nl": "Fungi are involved in decomposition, as well.", "fol": "", "prediction": ["all x.(Fungus(x) -> (Decomposition(x) | Decomposition(x)))"]}
{"id": "eqasc_train_14356", "nl": "Fungi increase the amount of organic matter in soil", "fol": "", "prediction": ["all x y.((Fungus(x) & Soil(y)) -> IncreasesOrganicMatter(x,y))"]}
{"id": "eqasc_train_14357", "nl": "Carbon is in every organic compound.", "fol": "", "prediction": ["all x.(Carbon(x) -> OrganicCompound(x))"]}
{"id": "eqasc_train_14358", "nl": "decomposition increases amount of carbon in soil", "fol": "", "prediction": ["all x y.((Soil(x) & Carbon(y)) -> IncreasesInSoil(x,y))"]}
{"id": "eqasc_train_14359", "nl": "Dirt, soot or soil is easily distinguishable from mildew.", "fol": "", "prediction": ["all x.((Dirt(x) | Soot(x) | Soil(x)) -> DistinctFromMildew(x))"]}
{"id": "eqasc_train_14360", "nl": "decomposition increases amount of organic matter in dirt.", "fol": "", "prediction": ["all x.(Decomposition(x) -> IncreasesOrganicMatter(x))"]}
{"id": "eqasc_train_14361", "nl": "Organic matter helps plants in the soil to grow strong and healthy.", "fol": "", "prediction": ["all x y.((OrganicMatter(x) & Plant(y)) -> (HelpsGrowStrong(y,x) & HelpsGrowHealthy(y,x)))"]}
{"id": "eqasc_train_14362", "nl": "decomposition helps plants grow strong and healthy", "fol": "", "prediction": ["all x y.((Plant(x) & Plant(y)) -> (HelpsGrowStrong(x,y) & HelpsGrowHealthy(x,y)))"]}
{"id": "eqasc_train_14363", "nl": "Decomposition creates compost. ", "fol": "", "prediction": ["all x.(Decomposition(x) -> CreatesCompost(x))"]}
{"id": "eqasc_train_14364", "nl": "Bacteria initiate decomposition of plants.", "fol": "", "prediction": ["all x.(Bacteria(x) -> InitiatesDecompositionOfPlants(x))"]}
{"id": "eqasc_train_14365", "nl": "Bacteria increases the amount of organic matter in soil.", "fol": "", "prediction": ["all x.(Bacteria(x) -> IncreasesOrganicMatter(x))"]}
{"id": "eqasc_train_14366", "nl": "Decomposition increases the amount of dead plant and animals in the soil", "fol": "", "prediction": ["all x y.((Decomposition(x) & Soil(y)) -> IncreasesDeadPlantAndAnimal(x,y))"]}
{"id": "eqasc_train_14367", "nl": "Also organic matter is acidic.", "fol": "", "prediction": ["all x.(OrganicMatter(x) -> Acidic(x))"]}
{"id": "eqasc_train_14368", "nl": "decomposition increases amount of acid. in soil", "fol": "", "prediction": ["all x.(Decomposition(x) -> IncreasesAcidAmount(x))"]}
{"id": "eqasc_train_14369", "nl": "Fungi are involved in increasing the amount of organic matter in soil", "fol": "", "prediction": ["all x y.((Fungus(x) & Soil(y)) -> IncreasesOrganicMatter(x,y))"]}
{"id": "eqasc_train_14370", "nl": "Organic matter is important to soil productivity.", "fol": "", "prediction": ["all x.(OrganicMatter(x) -> ImportantToSoilProductivity(x))"]}
{"id": "eqasc_train_14371", "nl": "Decomposition is important to soil productivity.", "fol": "", "prediction": ["all x.(Decomposition(x) -> ImportantToSoilProductivity(x))"]}
{"id": "eqasc_train_14372", "nl": "Plant respiration and decomposition of dead plant life consume dissolved oxygen in the water.", "fol": "", "prediction": ["all x y.((Plant(x) & PlantLife(y) & Retinament(x,y) & Decomposition(x,y)) -> ConsumesDissolvedOxygen(x,y))"]}
{"id": "eqasc_train_14373", "nl": "Dissolved oxygen increases the amount of organic matter in soil", "fol": "", "prediction": ["all x y.((DissolvedOxygen(x) & Soil(y)) -> IncreasesOrganicMatter(x,y))"]}
{"id": "eqasc_train_14374", "nl": "Mollusks live in most terrestrial, freshwater, and marine habitats.", "fol": "", "prediction": ["all x.(Mollusk(x) -> (LivesIn(x,Terrestrial) | LivesIn(x,Freshwater) | LivesIn(x,Marine)))"]}
{"id": "eqasc_train_14375", "nl": "Clams live in freshwater habitats", "fol": "", "prediction": ["all x.(Clam(x) -> LivesInFreshwaterHabitat(x))"]}
{"id": "eqasc_train_14376", "nl": "clams live in most terrestrial, freshwater, and marine habitats", "fol": "", "prediction": ["all x.(Clamm(x) -> (LivesIn(x,Terrestrial) | LivesIn(x,Freshwater) | LivesIn(x,Marine)))"]}
{"id": "eqasc_train_14377", "nl": "Though most trout are freshwater fish, some live in marine waters.", "fol": "", "prediction": ["(all x.(Trout(x) -> FreshwaterFish(x)) & exists y.(Trout(y) & MarineWater(y)))"]}
{"id": "eqasc_train_14378", "nl": "some mollusks live near trout", "fol": "", "prediction": ["exists x.(Mollusk(x) & LivesNearTrout(x))"]}
{"id": "eqasc_train_14379", "nl": "Mollusks live in most terrestrial, freshwater, and marine biomes", "fol": "", "prediction": ["all x.(Mullusk(x) -> (LivesIn(x,Terrestrial) | LivesIn(x,Freshwater) | LivesIn(x,Marine)))"]}
{"id": "eqasc_train_14380", "nl": "Mollusks tend to be shore-dwelling creatures.", "fol": "", "prediction": ["all x.(Mollusk(x) -> ShoreDwellingCreature(x))"]}
{"id": "eqasc_train_14381", "nl": "Clams tend to be shore-dwelling creatures and can live in both sea and freshwater.", "fol": "", "prediction": ["all x.(Clam(x) -> (SurfaceDwellingCreature(x) & LivesInSeaAndFreshwater(x)))"]}
{"id": "eqasc_train_14382", "nl": "squid can live in marine habitats.", "fol": "", "prediction": ["all x.(Squid(x) -> LivesInMarineHabitat(x))"]}
{"id": "eqasc_train_14383", "nl": "squids can live in most terrestrial, freshwater, and marine habitats.", "fol": "", "prediction": ["all x.(Squid(x) -> (LivesIn(x,Terrestrial) | LivesIn(x,Freshwater) | LivesIn(x,Marine)))"]}
{"id": "eqasc_train_14384", "nl": "Snails live in most terrestrial, freshwater and marine habitats.", "fol": "", "prediction": ["all x.(Snail(x) -> (LivesIn(x,Terrestrial) | LivesIn(x,Freshwater) | LivesIn(x,Marine)))"]}
{"id": "eqasc_train_14385", "nl": "oysters live in most terrestrial, freshwater, and marine habitats", "fol": "", "prediction": ["all x.(Oyster(x) -> (LivesIn(x,Terrestrial) | LivesIn(x,Freshwater) | LivesIn(x,Marine)))"]}
{"id": "eqasc_train_14386", "nl": "burning fossil fuels increases the carbon in the atmosphere", "fol": "", "prediction": ["all x y.((FossilFuel(x) & CarbonInAtmosphere(y)) -> Increases(x,y))"]}
{"id": "eqasc_train_14387", "nl": "Increased atmospheric carbon dioxide increases greenhouse effect and warms the earth.", "fol": "", "prediction": ["all x.((IncreasedAtmosphericCarbonDioxide(x) & IncreasesGreenhouseEffect(x) & WarmsEarth(x)) -> IncreasesAndWarmsEarth(x))"]}
{"id": "eqasc_train_14388", "nl": "burning fossil fuels warms the earth", "fol": "", "prediction": ["all x y.((FossilFuel(x) & Earth(y)) -> Warms(x,y))"]}
{"id": "eqasc_train_14389", "nl": "The atmosphere is mostly carbon dioxide .", "fol": "", "prediction": ["all x.(Atmosphere(x) -> CarbonDioxide(x))"]}
{"id": "eqasc_train_14390", "nl": "fossil fuels increase carbon dioxide", "fol": "", "prediction": ["all x.(FossilFuel(x) -> IncreasesCarbonDioxide(x))"]}
{"id": "eqasc_train_14391", "nl": "More carbon in the atmosphere means atmospheric warming.", "fol": "", "prediction": ["all x.((Carbon(x) & Atmosphere(x)) -> AtmosphericWarming(x))"]}
{"id": "eqasc_train_14392", "nl": "Burning fossil fuels warms the atmosphere", "fol": "", "prediction": ["all x y.((FossilFuel(x) & Burning(x,y)) -> WarmsAtmosphere(y))"]}
{"id": "eqasc_train_14393", "nl": "Burning fossil fuels increases atmospheric warming. ", "fol": "", "prediction": ["all x.((FossilFuel(x) & Burning(x)) -> IncreasesAtmosphericWarming(x))"]}
{"id": "eqasc_train_14394", "nl": "Burning natural gas increases the carbon in the atmosphere", "fol": "", "prediction": ["all x y.((BurningNaturalGas(x) & Atmosphere(y)) -> IncreasesCarbon(x,y))"]}
{"id": "eqasc_train_14395", "nl": "This atmospheric carbon might be contributing to the greenhouse effect.", "fol": "", "prediction": ["all x.(AtmosphericCarbon(x) -> ContributesToGreenhouseEffect(x))"]}
{"id": "eqasc_train_14396", "nl": "Burning fossil fuels is contributing to the greenhouse effect.", "fol": "", "prediction": ["all x.((FossilFuel(x) & Burning(x)) -> ContributesToGreenhouseEffect(x))"]}
{"id": "eqasc_train_14397", "nl": "An increase in carbon dioxide, therefore, can cause an increase in the temperature of the lower atmosphere.", "fol": "", "prediction": ["all x.((IncreaseInCarbonDioxide(x) & LowerAtmosphere(x)) -> IncreaseInTemperature(x))"]}
{"id": "eqasc_train_14398", "nl": "burning fossil fuels can cause an increase in the temperature of the lower atmosphere.", "fol": "", "prediction": ["all x y.((FossilFuel(x) & LowerAtmosphere(y)) -> IncreasedTemperature(x,y))"]}
{"id": "eqasc_train_14399", "nl": "burning coal increases the carbon in the atmosphere", "fol": "", "prediction": ["all x y.((BurningCoal(x) & CarbonInAtmosphere(y)) -> Increases(x,y))"]}
{"id": "eqasc_train_14400", "nl": "Burning coal, oil, and natural gas increases carbon in the atmosphere", "fol": "", "prediction": ["all x y z.((Burning(x,y) & (Coal(y) | Oil(y) | NaturalGas(y))) -> IncreasesCarbonInAtmosphere(z))"]}
{"id": "eqasc_train_14401", "nl": "Burning fossil fuels increases global warming.", "fol": "", "prediction": ["all x.((FossilFuel(x) & Burning(x)) -> IncreasesGlobalWarming(x))"]}
{"id": "eqasc_train_14402", "nl": "Fossil fuels are not sustainable fuels.", "fol": "", "prediction": ["all x.(FossilFuel(x) -> -SustainableFuel(x))"]}
{"id": "eqasc_train_14403", "nl": "Burning fuels that are not sustainable increases carbon in the atmosphere.", "fol": "", "prediction": ["all x.((BurningFuel(x) & -Sustainable(x)) -> IncreasesCarbonInAtmosphere(x))"]}
{"id": "eqasc_train_14404", "nl": "burning oil increases carbon in the atmosphere", "fol": "", "prediction": ["all x y.((BurningOil(x) & CarbonInAtmosphere(y)) -> Increases(x,y))"]}
{"id": "eqasc_train_14405", "nl": "An inevitable byproduct of burning fossil fuels is carbon dioxide.", "fol": "", "prediction": ["all x.((Byproduct(x) & BurningFossilFuels(x)) -> CarbonDioxide(x))"]}
{"id": "eqasc_train_14406", "nl": "the byproduct of fossil fuels is carbon", "fol": "", "prediction": ["all x y.((Byproduct(x) & FossilFuels(y)) -> Carbon(x))"]}
{"id": "eqasc_train_14407", "nl": "fossils are formed when layers of sediment cover the remains of organisms over time", "fol": "", "prediction": ["all x y z.((Fossil(x) & LayersOfSediment(y) & Organism(z) & CoversRemains(y,z)) -> Formed(x))"]}
{"id": "eqasc_train_14408", "nl": "Fossils are evidence of prehistoric life that is preserved in rock.", "fol": "", "prediction": ["all x.(Fossil(x) -> (PrehistoricLife(x) & PreservedInRock(x)))"]}
{"id": "eqasc_train_14409", "nl": "Prehistoric life is preserved in rock when layers of sediment cover the remains over time.", "fol": "", "prediction": ["all x y.((PrehistoricLife(x) & Sediment(y) & LayersOfSediment(y)) -> PreservedInRock(x))"]}
{"id": "eqasc_train_14410", "nl": "natural gas is formed from layers of sediment covering the remains of organisms over time", "fol": "", "prediction": ["all x y z.((NaturalGas(x) & Sediment(y) & Organism(z) & LayersOfSediment(y) & CoversRemains(y,z)) -> FormedFrom(x,y,z))"]}
{"id": "eqasc_train_14411", "nl": "Fossil fuels are formed from the remains of once living organisms that depended on light.", "fol": "", "prediction": ["all x.(FossilFuel(x) -> (FormedFromRemainsOfLivingOrganisms(x) & DependedOnLight(x)))"]}
{"id": "eqasc_train_14412", "nl": "Fossils are formed when remains of living things are covered over time.", "fol": "", "prediction": ["all x.(Fossil(x) -> (FormedByRemains(x) & CoveredOverTime(x)))"]}
{"id": "eqasc_train_14413", "nl": "If death occurs in a hospital, the remains are moved to the hospital morgue for the 24 hour period.", "fol": "", "prediction": ["all x y.((Death(x) & Hospital(y)) -> MovedToMorgue(x,y))"]}
{"id": "eqasc_train_14414", "nl": "Fossils are formed when sediment covers dead organisms.", "fol": "", "prediction": ["all x.(Fossil(x) -> (FormedBySediment(x) & CoversDeadOrganisms(x)))"]}
{"id": "eqasc_train_14415", "nl": "Fossils are formed with sand and mud cover the remains over time", "fol": "", "prediction": ["all x y z.((Fossil(x) & Sand(y) & Mud(z)) -> (FormedWith(x,y) & CoversRemains(x,z)))"]}
{"id": "eqasc_train_14416", "nl": "fossils can be formed when layers of sediment cover the remains of fish", "fol": "", "prediction": ["all x y.((Fossil(x) & Sediment(y) & LayersOfSediment(y)) -> CoversRemainsOfFish(x,y))"]}
{"id": "eqasc_train_14417", "nl": "layers of sand over the remains of organisms over time can create fossils", "fol": "", "prediction": ["all x y.((SandLayer(x) & OrganismRemains(y) & OverTime(x,y)) -> CreatesFossil(x))"]}
{"id": "eqasc_train_14418", "nl": "When plants are covered in sediment layer over time, fossils form.", "fol": "", "prediction": ["all x.((Plant(x) & CoveredInSedimentLayer(x) & OverTime(x)) -> Fossil(x))"]}
{"id": "eqasc_train_14419", "nl": "Most fossils are preserved by the sedimentation process of water.", "fol": "", "prediction": ["all x.(Fossil(x) -> PreservedBySedimentation(x))"]}
{"id": "eqasc_train_14420", "nl": "sedimentation is caused by water", "fol": "", "prediction": ["all x y.((Sedimentation(x) & Water(y)) -> CausedBy(x,y))"]}
{"id": "eqasc_train_14421", "nl": "All streams carry sediment .", "fol": "", "prediction": ["all x.(Stream(x) -> CarriesSediment(x))"]}
{"id": "eqasc_train_14422", "nl": "Fossils are formed when layers of something streams carry cover the remains of organisms over time", "fol": "", "prediction": ["all x y z.((Fossil(x) & LayersOfSomething(y) & StreamsCarry(z) & CoversRemainsOfOrganisms(x,y,z)) -> FormedWhenLayersOfSomething(x))"]}
{"id": "eqasc_train_14423", "nl": "treating water is used to remove harmful substances before drinking", "fol": "", "prediction": ["all x y.((TreatingWater(x) & DrinkingWater(y)) -> RemovesHarmfulSubstances(x,y))"]}
{"id": "eqasc_train_14424", "nl": "To ensure that it is safe to drink water, treat it all the time.", "fol": "", "prediction": ["all x.((Water(x) & SafeToDrink(x)) -> TreatAllTime(x))"]}
{"id": "eqasc_train_14425", "nl": "To ensure that water is safe to drink harmful substances are removed before drinking.", "fol": "", "prediction": ["all x.((Water(x) & SafeToDrinkHarmfulSubstances(x)) -> RemovedBeforeDrinking(x))"]}
{"id": "eqasc_train_14426", "nl": "Ordinary tap water can be full of harmful substances like chlorine, pesticides and heavy metals.", "fol": "", "prediction": ["all x.((TapWater(x) & Ordinary(x)) -> (HazardousSubstances(x) & (Chlorine(x) | Pesticides(x) | HeavyMetals(x))))"]}
{"id": "eqasc_train_14427", "nl": "treating water is used to remove chlorine, pesticides, and heavy metals before drinking", "fol": "", "prediction": ["all x.(TreatingWater(x) -> (RemovesChlorine(x) & RemovesPesticides(x) & RemovesHeavyMetals(x) & BeforeDrinking(x)))"]}
{"id": "eqasc_train_14428", "nl": "Chlorine bleach is ideal for treating water.", "fol": "", "prediction": ["all x.(ChlorineBleath(x) -> IdealForTreatingWater(x))"]}
{"id": "eqasc_train_14429", "nl": "Chlorine bleach can be used to remove harmful substances from drinking water.", "fol": "", "prediction": ["all x.(ChlorineBleath(x) -> RemovesHarmfulSubstancesFromDrinkingWater(x))"]}
{"id": "eqasc_train_14430", "nl": "Chlorine bleach removes harmful substances from water before drinking.", "fol": "", "prediction": ["all x.(ChlorineBleath(x) -> RemovesHarmfulSubstances(x))"]}
{"id": "eqasc_train_14431", "nl": "Boiling is the safest method of treating water.", "fol": "", "prediction": ["all x.(Boiling(x) -> SafestMethodOfTreatingWater(x))"]}
{"id": "eqasc_train_14432", "nl": "Water can be boiled to remove harmful substances before drinking.", "fol": "", "prediction": ["all x.(Water(x) -> CanBeBoiltToRemoveHarmfulSubstances(x))"]}
{"id": "eqasc_train_14433", "nl": "treating water is used to remove pollution before drinking", "fol": "", "prediction": ["all x y.((TreatingWater(x) & Water(y)) -> RemovePollutionBeforeDrinking(x,y))"]}
{"id": "eqasc_train_14434", "nl": "Chlorine is also used to treat water.", "fol": "", "prediction": ["all x.(Chlorine(x) -> TreatsWater(x))"]}
{"id": "eqasc_train_14435", "nl": "Chlorine is also used to remove harmful substances from water before drinking", "fol": "", "prediction": ["all x.(Chlorine(x) -> RemovesHarmfulSubstances(x))"]}
{"id": "eqasc_train_14436", "nl": "Distilled water is treated to remove the minerals found naturally in the water.", "fol": "", "prediction": ["all x.(DistilledWater(x) -> RemovesMinerals(x))"]}
{"id": "eqasc_train_14437", "nl": "Distilling water removes harmful substances before drinking.", "fol": "", "prediction": ["all x.(DistillingWater(x) -> RemovesHarmfulSubstancesBeforeDrinking(x))"]}
{"id": "eqasc_train_14438", "nl": "Arsenic, a naturally occurring substance, contaminates water sources in many countries.", "fol": "", "prediction": ["all x.((NaturallyOccurringSubstance(x) & Arsenic(x)) -> ContaminatesWaterSources(x))"]}
{"id": "eqasc_train_14439", "nl": "treating water is used to remove arsenic before drinking", "fol": "", "prediction": ["all x y.((TreatingWater(x) & Water(y)) -> (RemovesArsenic(x,y) & BeforeDrinking(x,y)))"]}
{"id": "eqasc_train_14440", "nl": "Boiling is the most reliable way to treat contaminated water.", "fol": "", "prediction": ["all x.(Boiling(x) -> TreatsContaminatedWater(x))"]}
{"id": "eqasc_train_14441", "nl": "Boiling can make water less harmful to drink", "fol": "", "prediction": ["all x.(Boiling(x) -> MakesWaterLessHarmfulToDrink(x))"]}
{"id": "eqasc_train_14442", "nl": "Clean drinking water is a luxury.", "fol": "", "prediction": ["all x.(CleanDrinkingWater(x) -> Luxuy(x))"]}
{"id": "eqasc_train_14443", "nl": "treating water is a luxury.", "fol": "", "prediction": ["all x.(TreatingWater(x) -> Luxuy(x))"]}
{"id": "eqasc_train_14444", "nl": "Some substances can cause severe injury or death if inhaled or touched.", "fol": "", "prediction": ["exists x.(Substance(x) & (Inhaled(x) | Touched(x))) -> (CausesSevereInjury(x) | CausesDeath(x)))"]}
{"id": "eqasc_train_14445", "nl": "treating water can prevent death", "fol": "", "prediction": ["all x.(TreatingWater(x) -> PreventsDeath(x))"]}
{"id": "eqasc_train_14446", "nl": "For a scientist, water is H2O whether from the Ganga or a tap.", "fol": "", "prediction": ["all x.((Scientist(x) & (Ganga(x) | Tap(x))) -> H2O(x))"]}
{"id": "eqasc_train_14447", "nl": "treating H2O is used to remove harmful substances before drinking", "fol": "", "prediction": ["all x.((TreatingH2O(x) & RemovesHarmfulSubstances(x)) -> Drinking(x))"]}
{"id": "eqasc_train_14448", "nl": "Hydration is maintained by drinking a lot of fluid.", "fol": "", "prediction": ["all x.((Hydration(x) & DrinksLotOfFluid(x)) -> Maintains(x))"]}
{"id": "eqasc_train_14449", "nl": "treating water is used to remove harmful substances before hydration", "fol": "", "prediction": ["all x y.((TreatingWater(x) & Hydration(y)) -> RemovesHarmfulSubstances(x,y))"]}
{"id": "eqasc_train_14450", "nl": "Bottled water is often treated.", "fol": "", "prediction": ["all x.(BottledWater(x) -> OftenTreated(x))"]}
{"id": "eqasc_train_14451", "nl": "bottled water has no harmful substances", "fol": "", "prediction": ["all x.(BlendedWater(x) -> -HazardousSubstances(x))"]}
{"id": "eqasc_train_14452", "nl": "eating something that contains pollutants has a negative impact on an organism 's survival", "fol": "", "prediction": ["all x y.((Eats(x,y) & ContainsPollutants(x)) -> NegativeImpactOnOrganismSurvival(y))"]}
{"id": "eqasc_train_14453", "nl": "Some of the worst pollutants are synthetic chemicals.", "fol": "", "prediction": ["exists x.(WorstPollutant(x) & SyntheticChemicals(x))"]}
{"id": "eqasc_train_14454", "nl": "eating something that contains synthetic chemicals has a negative impact on an organism 's survival", "fol": "", "prediction": ["all x y.((Eats(x) & ContainsSyntheticChemicals(x)) -> NegativeImpactOnOrganismSurvival(y))"]}
{"id": "eqasc_train_14455", "nl": "eating something that contains pollutants has a negative impact on an animal's survival", "fol": "", "prediction": ["all x y.((Eats(x,y) & ContainsPollutants(x)) -> NegativeImpactOnAnimalSurvival(y))"]}
{"id": "eqasc_train_14456", "nl": "Lakes have been found to be polluted with mercury, rendering fishes unsafe to eat.", "fol": "", "prediction": ["all x.(Lake(x) -> (PollutedWithMercury(x) & UnsafeToEat(x)))"]}
{"id": "eqasc_train_14457", "nl": "Eating mercury has a negative impact on an organism's survival", "fol": "", "prediction": ["all x y.((Eating(x,y) & Mercury(y)) -> NegativeImpactOnOrganismSurvival(x,y))"]}
{"id": "eqasc_train_14458", "nl": "Pollution can kill living organisms directly and selectively, affecting biodiversity in the oceans.", "fol": "", "prediction": ["all x y.((Pollution(x) & LivingOrganism(y)) -> (KillsDirectly(x,y) & KillsSelectively(x,y) & AffectsBiodiversity(x,y)))"]}
{"id": "eqasc_train_14459", "nl": "Eating something that contains pollutants can kill directly and selectively.", "fol": "", "prediction": ["all x.((Eating(x) & ContainsPollutants(x)) -> KillsDirectlyAndSelectively(x))"]}
{"id": "eqasc_train_14460", "nl": "Naturally Organic foods are grown without the aid of unsafe and polluting chemicals.", "fol": "", "prediction": ["all x.(NaturalOrganicFood(x) -> (GrownWithoutUnsafeChemicals(x) & PollutingChemicals(x)))"]}
{"id": "eqasc_train_14461", "nl": "Eating naturally organic food can prevent a negative impact on an organism's survival", "fol": "", "prediction": ["all x y.((NaturallyOrganicFood(x) & Organism(y)) -> PreventsNegativeImpactOnSurvival(x,y))"]}
{"id": "eqasc_train_14462", "nl": "Eating something that contains pollutants has a negative impact on a living being's survival.", "fol": "", "prediction": ["all x.((Eating(x) & ContainsPollutants(x)) -> NegativeImpactOnLivingBeingSurvival(x))"]}
{"id": "eqasc_train_14463", "nl": "Lead compounds are marine pollutants.", "fol": "", "prediction": ["all x.(LeadCompound(x) -> MarinePollutant(x))"]}
{"id": "eqasc_train_14464", "nl": "Eating something that contains lead has a negative impact on an organism 's survival", "fol": "", "prediction": ["all x y z.((Eating(x) & Lead(y) & Organism(z) & Contains(x,y)) -> NegativeImpactOnSurvival(x,z))"]}
{"id": "eqasc_train_14465", "nl": "Smoking or pollution can and do cause cancer.", "fol": "", "prediction": ["all x.((Smoking(x) | Pollution(x)) -> (CausesCancer(x) & CausesCancer(x)))"]}
{"id": "eqasc_train_14466", "nl": "cancer can have a negative impact on survival", "fol": "", "prediction": ["all x.(Cancer(x) -> NegativeImpactOnSurvival(x))"]}
{"id": "eqasc_train_14467", "nl": "Lastly, dolphins are intelligent organisms.", "fol": "", "prediction": ["all x.(Dolphin(x) -> IntelligentOrganism(x))"]}
{"id": "eqasc_train_14468", "nl": "eating something that contains pollutants has a negative impact on a dolphin", "fol": "", "prediction": ["all x y.((Eats(x) & ContainsPollutants(x)) -> NegativeImpactOnDolphin(y))"]}
{"id": "eqasc_train_14469", "nl": "Chloroplasts contain the green pigment chlorophyll.", "fol": "", "prediction": ["all x.(Chloroplast(x) -> ContainsGreenPigment(x,Chlorophyll))"]}
{"id": "eqasc_train_14470", "nl": "Chloroplasts are found in the cells of leaves and in the surface cells of stems.", "fol": "", "prediction": ["all x.(Chloroplast(x) -> (FoundInLeaves(x) & FoundInSurfaceCells(x)))"]}
{"id": "eqasc_train_14471", "nl": "cells of leaves and surface cells of stems contain the green pigment chlorophyll", "fol": "", "prediction": ["all x y.((Leaves(x) & SurfaceCells(y) & Stems(y)) -> ContainsGreenPigmentChlorophyll(x))"]}
{"id": "eqasc_train_14472", "nl": "Animals lack chloroplasts.", "fol": "", "prediction": ["all x.(Animal(x) -> LacksChlorophyll(x))"]}
{"id": "eqasc_train_14473", "nl": "animals lack chlorophyll", "fol": "", "prediction": ["all x.(Animal(x) -> LacksChlorophyll(x))"]}
{"id": "eqasc_train_14474", "nl": "animals lack the green pigment chlorophyll", "fol": "", "prediction": ["all x.(Animal(x) -> LacksGreenPigmentChlorophyll(x))"]}
{"id": "eqasc_train_14475", "nl": "animals do not have chlorophyll", "fol": "", "prediction": ["all x.(Animal(x) -> -HasChlorophyll(x))"]}
{"id": "eqasc_train_14476", "nl": "Chlorophylls are the pigments of photosynthesis.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> PhotosynthesisPigment(x))"]}
{"id": "eqasc_train_14477", "nl": "Photosynthesis takes place in chloroplasts", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & Chlorophyll(y)) -> TakesPlaceIn(x,y))"]}
{"id": "eqasc_train_14478", "nl": "Leaves are green because they contain small bodies in the cells called chloroplasts.", "fol": "", "prediction": ["all x.((Leaves(x) & SmallBody(x) & Chlorophyll(x)) -> Green(x))"]}
{"id": "eqasc_train_14479", "nl": "Leaves are green because of chlorophyll ", "fol": "", "prediction": ["all x.(Leaves(x) -> Green(x)) Chlorophyll(x))"]}
{"id": "eqasc_train_14480", "nl": "Like a fungus, it lacks chlorophyll and is nonphotosynthetic.", "fol": "", "prediction": ["(LikesFungus(fungus) & LacksChlorophyll(f) & NonPhotosynthetic(f))"]}
{"id": "eqasc_train_14481", "nl": "fungus lacks the green pigment contained in chloroplasts", "fol": "", "prediction": ["all x.(Fungus(x) -> LacksGreenPigment(x))"]}
{"id": "eqasc_train_14482", "nl": "Most chloroplasts are found in leaves.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> FoundInLeaves(x))"]}
{"id": "eqasc_train_14483", "nl": "leaves contain the green pigment chlorophyll.", "fol": "", "prediction": ["all x.(Leaves(x) -> ContainsGreenPigmentChlorophyll(x))"]}
{"id": "eqasc_train_14484", "nl": "chlorophyll are photosynthetic", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> Photosynthetic(x))"]}
{"id": "eqasc_train_14485", "nl": "Photosynthetic Pigments Photosynthetic Pigments Pigments are colorful compounds.", "fol": "", "prediction": ["all x.(PhotosyntheticPigment(x) -> ColorfulCompound(x))"]}
{"id": "eqasc_train_14486", "nl": "Chloroplasts contain the green compound chlorophyll.", "fol": "", "prediction": ["all x.(Chloroplast(x) -> ContainsGreenCompoundChlorophyll(x))"]}
{"id": "eqasc_train_14487", "nl": "Chloroplasts are the most familiar plastids.", "fol": "", "prediction": ["all x.(Chloroplast(x) -> (FamiliarPlastic(x) & KnownFor(x,y)))"]}
{"id": "eqasc_train_14488", "nl": "Plastids contain the green pigment chlorophyll.", "fol": "", "prediction": ["all x.(Plastic(x) -> ContainsGreenPigmentChlorophyll(x))"]}
{"id": "eqasc_train_14489", "nl": "Mitochondrion and chloroplast for example are organelles.", "fol": "", "prediction": ["all x.((Mitochondrion(x) | Chlorophyll(x)) -> Organelle(x))"]}
{"id": "eqasc_train_14490", "nl": "organelles contain chlorophyll", "fol": "", "prediction": ["all x.(Organelle(x) -> ContainsChlorophyll(x))"]}
{"id": "eqasc_train_14491", "nl": "the site of photosynthesis contains the green pigment chlorophyll", "fol": "", "prediction": ["all x y.((SiteOfPhotosynthesis(x) & GreenPigmentChlorophyll(y)) -> Contains(x,y))"]}
{"id": "eqasc_train_14492", "nl": "hearing is used for sensing sound by animals", "fol": "", "prediction": ["all x y.((Hearing(x) & Animal(y)) -> SensingSound(x,y))"]}
{"id": "eqasc_train_14493", "nl": "Coyotes use their acute hearing and sense of smell to detect prey and avoid danger.", "fol": "", "prediction": ["all x.(Coyote(x) -> (UsesAcuteHearing(x) & UsesSenseOfSmell(x) & DetectsPrey(x) & AvoidsDanger(x)))"]}
{"id": "eqasc_train_14494", "nl": "Hearing is used for detecting prey and avoiding danger by animals.", "fol": "", "prediction": ["all x.(Hearing(x) -> (DetectsPrey(x) & AvoidsDanger(x)))"]}
{"id": "eqasc_train_14495", "nl": "Deaf people hear nothing.", "fol": "", "prediction": ["all x.(Deaf(x) -> HearsNothing(x))"]}
{"id": "eqasc_train_14496", "nl": "the deaf cannot sense sound", "fol": "", "prediction": ["all x.(Deaf(x) -> -SensesSound(x))"]}
{"id": "eqasc_train_14497", "nl": "hearing is used for sensing sound by humans", "fol": "", "prediction": ["all x y.((Hearing(x) & Human(y)) -> SensingSound(x,y))"]}
{"id": "eqasc_train_14498", "nl": "Sound waves enter the ear, and are then amplified.", "fol": "", "prediction": ["all x y.((SoundWaves(x) & Ear(y)) -> (Enter(x,y) & Amplified(x)))"]}
{"id": "eqasc_train_14499", "nl": "Animals use ears to hear", "fol": "", "prediction": ["all x y.((Animal(x) & Ears(y)) -> UsesToHear(x,y))"]}
{"id": "eqasc_train_14500", "nl": "Hearing requires functioning ears.", "fol": "", "prediction": ["all x.(Hearing(x) -> FunctioningEars(x))"]}
{"id": "eqasc_train_14501", "nl": "functioning ears are used for sensing sound by animals", "fol": "", "prediction": ["all x y.((Ears(x) & Animal(y)) -> SensingSound(x,y))"]}
{"id": "eqasc_train_14502", "nl": "Animals utilize sound to localize mates and avoid approaching predators.", "fol": "", "prediction": ["all x.(Animal(x) -> (UsesSound(x) & LocalizesMates(x) & AvoidsAttackingPredators(x)))"]}
{"id": "eqasc_train_14503", "nl": "Animals use their sense of hearing to avoid approaching predators.", "fol": "", "prediction": ["all x.(Animal(x) -> UsesSenseOfHearingToAvoidPredators(x))"]}
{"id": "eqasc_train_14504", "nl": "hearing is used for sensing sound by cats", "fol": "", "prediction": ["all x y.((Hearing(x) & Cat(y)) -> SensingSound(x,y))"]}
{"id": "eqasc_train_14505", "nl": "ears are used for sensing sound by animals", "fol": "", "prediction": ["all x y.((Ears(x) & Animal(y)) -> SensingSound(x,y))"]}
{"id": "eqasc_train_14506", "nl": "Hearing is measured in decibels, which is the degree of loudness required to hear the sound.", "fol": "", "prediction": ["all x.(Hearing(x) -> (MeasuredInDecibels(x) & LoudnessRequiredToHearSound(x)))"]}
{"id": "eqasc_train_14507", "nl": "Animals can sense decibels", "fol": "", "prediction": ["all x.(Animal(x) -> CanSenseDecibels(x))"]}
{"id": "eqasc_train_14508", "nl": "hearing is used for sensing sound by cows", "fol": "", "prediction": ["all x y.((Hearing(x) & Cow(y)) -> SensingSound(x,y))"]}
{"id": "eqasc_train_14509", "nl": "An ear improves hearing.", "fol": "", "prediction": ["all x.(Ear(x) -> ImprovesHearing(x))"]}
{"id": "eqasc_train_14510", "nl": "an ear improves sensing sound", "fol": "", "prediction": ["all x.(Ear(x) -> ImprovesSense(x))"]}
{"id": "eqasc_train_14511", "nl": "Most animals have ears.", "fol": "", "prediction": ["all x.(Animal(x) -> HasEars(x))"]}
{"id": "eqasc_train_14512", "nl": "By nature, dogs are pack animals.", "fol": "", "prediction": ["all x.(Dog(x) -> PackAnimal(x))"]}
{"id": "eqasc_train_14513", "nl": "Dogs use hearing to sense sound.", "fol": "", "prediction": ["all x.(Dog(x) -> UsesHearingToSenseSound(x))"]}
{"id": "eqasc_train_14514", "nl": "For example, hearing waves are transmitted by fluid in the inner ear.", "fol": "", "prediction": ["all x y.((HearingWaves(x) & Fluid(y)) -> TransmittedBy(x,y))"]}
{"id": "eqasc_train_14515", "nl": "fluid in the inner ear is used for sensing sound by animals", "fol": "", "prediction": ["all x y.((FluidInInnerEar(x) & Animal(y)) -> UsedForSensingSound(x,y))"]}
{"id": "eqasc_train_14516", "nl": "hearing is used for sensing  vibrations by animals", "fol": "", "prediction": ["all x y.((Hearing(x) & Animal(y)) -> SensingVibrations(x,y))"]}
{"id": "eqasc_train_14517", "nl": "If an animal is a dog then it is a mammal.", "fol": "", "prediction": ["all x.(Dog(x) -> Mammal(x))"]}
{"id": "eqasc_train_14518", "nl": "Dogs use hearing for sensing sound.", "fol": "", "prediction": ["all x.(Dog(x) -> UsesHearingForSensingSound(x))"]}
{"id": "eqasc_train_14519", "nl": "Molecules of DNA are encoded with instructions that tell cells what to do.", "fol": "", "prediction": ["all x.((Molecule(x) & DNA(x)) -> EncodedWithInstructions(x))"]}
{"id": "eqasc_train_14520", "nl": "a person's genetic fingerprint tells cells what to do", "fol": "", "prediction": ["all x y.((Person(x) & GeneticFingerprint(y)) -> TellsCellsWhatToDo(x,y))"]}
{"id": "eqasc_train_14521", "nl": "Genes are discrete units of information that tell cells what to do.", "fol": "", "prediction": ["all x.(Gene(x) -> (DiscreteInformation(x) & TellsCellsWhatToDo(x)))"]}
{"id": "eqasc_train_14522", "nl": "Molecules of DNA are encoded with discrete units of information", "fol": "", "prediction": ["all x.(Molecule(x) -> (DNA(x) & DistinctUnitsOfInformation(x)))"]}
{"id": "eqasc_train_14523", "nl": "Each person inherits DNA on conception.", "fol": "", "prediction": ["all x.((Person(x) & IsConception(x)) -> HebesDNA(x))"]}
{"id": "eqasc_train_14524", "nl": "instructions that tell cells what to do are inherited at conception", "fol": "", "prediction": ["all x y.((Instruction(x) & Cell(y) & TellsCell(x,y)) -> ErasedAtConception(x))"]}
{"id": "eqasc_train_14525", "nl": "molecules of deoxyribonucleic acid are encoded with instructions that tell cells what to do", "fol": "", "prediction": ["all x y.((Molecule(x) & DeoxyribonucleicAcid(y)) -> EncodedWithInstructions(x,y))"]}
{"id": "eqasc_train_14526", "nl": "Genes, made of DNA, carry the instructions for building proteins.", "fol": "", "prediction": ["all x.(Gene(x) -> (MadeOfDNA(x) & CarriesInstructionsForProteinBuilding(x)))"]}
{"id": "eqasc_train_14527", "nl": "genes carry instructions", "fol": "", "prediction": ["all x.(Genes(x) -> CarriesInstructions(x))"]}
{"id": "eqasc_train_14528", "nl": "Genes are parts of DNA molecules.", "fol": "", "prediction": ["all x.(Gene(x) -> PartOfDNAMolecule(x))"]}
{"id": "eqasc_train_14529", "nl": "Genes are instructions that tell cells what to do.", "fol": "", "prediction": ["all x.(Gene(x) -> TellsCellsWhatToDo(x))"]}
{"id": "eqasc_train_14530", "nl": "Proteins tell cells what to do.", "fol": "", "prediction": ["all x.(Protein(x) -> TellsCellsWhatToDo(x))"]}
{"id": "eqasc_train_14531", "nl": "Molecules of a person's genetic fingerprint are encoded with instructions that tell cells what to do.", "fol": "", "prediction": ["all x y.((Molecule(x) & Person(y) & GeneticFingerprint(x,y)) -> EncodedWithInstructions(x,y))"]}
{"id": "eqasc_train_14532", "nl": "Genes are segments of DNA molecules.", "fol": "", "prediction": ["all x.(Gene(x) -> (SegmentOfDNAMolecule(x) & ContainsDNA(x)))"]}
{"id": "eqasc_train_14533", "nl": "gene segments are encoded with instructions that tell cells what to do", "fol": "", "prediction": ["all x y.((GeneSegment(x) & Cell(y)) -> EncodedWithInstructions(x,y))"]}
{"id": "eqasc_train_14534", "nl": "Some parasites live on the surface of their host.", "fol": "", "prediction": ["exists x.(Parasite(x) & LivesOnSurface(x))"]}
{"id": "eqasc_train_14535", "nl": "Bagworms are parasitized by several kinds of parasitic wasps.", "fol": "", "prediction": ["all x.(Bagworm(x) -> ParasitedByParasitedWasps(x))"]}
{"id": "eqasc_train_14536", "nl": "Wasps can live on the surface of their host", "fol": "", "prediction": ["all x.(Wasp(x) -> LivesOnSurfaceOfHost(x))"]}
{"id": "eqasc_train_14537", "nl": "Some parasites survive on the surface of their host.", "fol": "", "prediction": ["exists x.(Parasite(x) & SurvivesOnSurface(x))"]}
{"id": "eqasc_train_14538", "nl": "For successful colonization, bacteria have to adhere to host cell surfaces.", "fol": "", "prediction": ["all x.(SuccessfulColonization(x) -> BacteriaAdhereToHostCellSurfaces(x))"]}
{"id": "eqasc_train_14539", "nl": "some parasites adhere to cell surfaces.", "fol": "", "prediction": ["exists x.(Parasite(x) & AdheresToCellSurface(x))"]}
{"id": "eqasc_train_14540", "nl": "Leeches are on the surface of the host .", "fol": "", "prediction": ["all x y.((Leeches(x) & Host(y)) -> OnSurface(x,y))"]}
{"id": "eqasc_train_14541", "nl": "Leeches live on the surface of their hosts.", "fol": "", "prediction": ["all x.(Leeches(x) -> LivesOnSurfaceOfHosts(x))"]}
{"id": "eqasc_train_14542", "nl": "Ticks are blood sucking parasites that attach to the skin.", "fol": "", "prediction": ["all x.(Tick(x) -> (BloodSuckingParasite(x) & AttachesToSkin(x)))"]}
{"id": "eqasc_train_14543", "nl": "Ticks live on the surface of the host", "fol": "", "prediction": ["all x y.((Tick(x) & Host(y)) -> LivesOnSurface(x,y))"]}
{"id": "eqasc_train_14544", "nl": "Fleas and ticks are parasites.", "fol": "", "prediction": ["all x.((Flea(x) | Tick(x)) -> Parasite(x))"]}
{"id": "eqasc_train_14545", "nl": "some fleas and ticks live on the surface of their host", "fol": "", "prediction": ["exists x.(Fly(x) & Tick(x) & LivesOnSurfaceOfHost(x))"]}
{"id": "eqasc_train_14546", "nl": "Mites only live on the host.", "fol": "", "prediction": ["all x.(Mite(x) -> LivesOnHost(x))"]}
{"id": "eqasc_train_14547", "nl": "Mites are parasites", "fol": "", "prediction": ["all x.(Mite(x) -> Parasite(x))"]}
{"id": "eqasc_train_14548", "nl": "Hosts A host is a computer.", "fol": "", "prediction": ["all x.(Host(x) -> Computer(x))"]}
{"id": "eqasc_train_14549", "nl": "some parasites live on the surface of their computer.", "fol": "", "prediction": ["exists x.(Parasite(x) & LivesOnSurfaceOfComputer(x))"]}
{"id": "eqasc_train_14550", "nl": "biofuel is used to produce electricity by burning", "fol": "", "prediction": ["all x.(Biofuel(x) -> (ProducesElectricityByBurning(x) & Uses(x,y)))"]}
{"id": "eqasc_train_14551", "nl": "Biofuels include ethanol, methanol, biodiesel, biocrude, and methane.", "fol": "", "prediction": ["all x.(Biofuel(x) -> (Ethanol(x) | Methanol(x) | Biodiesel(x) | Biocrude(x) | Methane(x)))"]}
{"id": "eqasc_train_14552", "nl": "Ethanol can produce electricity by burning.", "fol": "", "prediction": ["all x.(Ethanol(x) -> ProducesElectricityByBurning(x))"]}
{"id": "eqasc_train_14553", "nl": "Wood and straw are both examples of biofuels.", "fol": "", "prediction": ["(Biofuel(Wood) & Biofuel(Straw))"]}
{"id": "eqasc_train_14554", "nl": "wood is used to produce electricity by burning", "fol": "", "prediction": ["all x.(Wood(x) -> (ProducesElectricity(x) & Burns(x)))"]}
{"id": "eqasc_train_14555", "nl": "Wood and straw can be burned to produce electricity. ", "fol": "", "prediction": ["all x.((Wood(x) | Straw(x)) -> BurnsToProduceElectricity(x))"]}
{"id": "eqasc_train_14556", "nl": "Biofuels can reduce the greenhouse effect.", "fol": "", "prediction": ["all x.(Biofuel(x) -> ReducesGreenhouseEffect(x))"]}
{"id": "eqasc_train_14557", "nl": "some electricity production reduces greenhouse effect", "fol": "", "prediction": ["exists x.(ElectricityProduction(x) & ReducesGreenhouseEffect(x))"]}
{"id": "eqasc_train_14558", "nl": "Ethanol, a form of alcohol, is already the most common biofuel.", "fol": "", "prediction": ["all x.((Ethanol(x) & Alcohol(x)) -> MostCommonBiofuel(x))"]}
{"id": "eqasc_train_14559", "nl": "a form of alcohol is used to produce electricity by burning", "fol": "", "prediction": ["all x y.((Alcohol(x) & Electricity(y)) -> ProducesByBurning(x,y))"]}
{"id": "eqasc_train_14560", "nl": "Among the energy sources referred to as biofuels is garbage.", "fol": "", "prediction": ["all x.((EnergySource(x) & Biofuel(x)) -> Garbage(x))"]}
{"id": "eqasc_train_14561", "nl": "Garbage can be burned to produce electricity", "fol": "", "prediction": ["all x.(Garbage(x) -> (CanBeBurned(x) & ProducesElectricity(x)))"]}
{"id": "eqasc_train_14562", "nl": "Energy is created when objects are burned.", "fol": "", "prediction": ["all x.((Object(x) & Burned(x)) -> CreatesEnergy(x))"]}
{"id": "eqasc_train_14563", "nl": "biofuel is used to produce energy", "fol": "", "prediction": ["all x.(Biofuel(x) -> ProducesEnergy(x))"]}
{"id": "eqasc_train_14564", "nl": "Power source is electric.", "fol": "", "prediction": ["all x.(PowerSource(x) -> Electric(x))"]}
{"id": "eqasc_train_14565", "nl": "Biofuel is used to produce power by burning.", "fol": "", "prediction": ["all x.(Biofuel(x) -> ProducesPowerByBurning(x))"]}
{"id": "eqasc_train_14566", "nl": "ethanol is used to produce electricity by burning", "fol": "", "prediction": ["all x.(Ethanol(x) -> ProducesElectricityByBurning(x))"]}
{"id": "eqasc_train_14567", "nl": "Hemp biofuel provides the household's energy supply.", "fol": "", "prediction": ["all x.(HempBiofuel(x) -> ProvidesEnergySupply(x))"]}
{"id": "eqasc_train_14568", "nl": "hemp is used to produce electricity by burning", "fol": "", "prediction": ["all x.(Hemp(x) -> (UsedToProduceElectricity(x) & BurnsHemp(x)))"]}
{"id": "eqasc_train_14569", "nl": "Biofuels are alcohols, such as ethanol or other chemicals, derived from biomass or living matter.", "fol": "", "prediction": ["all x.(Biofuel(x) -> (Alcohol(x) & (Ethanol(x) | OtherChemicals(x)) & (DerivedFromBiomass(x) | DerivedFromLivingMatter(x))))"]}
{"id": "eqasc_train_14570", "nl": "Alcohols derived from biomass or living matter are used to produce electricity by burning", "fol": "", "prediction": ["all x.((Alcohol(x) & DerivedFromBiomassOrLivingMatter(x)) -> ProducesElectricityByBurning(x))"]}
{"id": "eqasc_train_14571", "nl": "methane produces electricity when burned", "fol": "", "prediction": ["all x.((Methane(x) & Burned(x)) -> ProducesElectricity(x))"]}
{"id": "eqasc_train_14572", "nl": "Any green plant can be considered for use in the production of biofuel or bioenergy.", "fol": "", "prediction": ["all x.(GreenPlant(x) -> (ProducesBiofuel(x) | ProducesBioenergy(x)))"]}
{"id": "eqasc_train_14573", "nl": "Green plants can be used to produce electricity by burning", "fol": "", "prediction": ["all x.(GreenPlant(x) -> (ProducesElectricityByBurning(x) & GreenPlant(x)))"]}
{"id": "eqasc_train_14574", "nl": "ethanol produces electricity by burning", "fol": "", "prediction": ["all x.(Ethanol(x) -> ProducesElectricityByBurning(x))"]}
{"id": "eqasc_train_14575", "nl": "Ethanol is used to produce electricity by burning", "fol": "", "prediction": ["all x.(Ethanol(x) -> ProducesElectricityByBurning(x))"]}
{"id": "eqasc_train_14576", "nl": "Fertilization occurs when a sperm and an egg fuse.", "fol": "", "prediction": ["all x y.((Ssperm(x) & Egg(y)) -> Fertilization(x,y))"]}
{"id": "eqasc_train_14577", "nl": "After fertilization, the egg becomes diploid and is called a zygote.", "fol": "", "prediction": ["all x.(Fertilization(x) -> (Egg(x) & Diploid(x) & Zygote(x)))"]}
{"id": "eqasc_train_14578", "nl": "when a sperm and an egg fuse this forms a zygote", "fol": "", "prediction": ["all x y z.((Ssperm(x) & Egg(y) & Sperm(z) & Fuse(x,z)) -> FormsZygote(x))"]}
{"id": "eqasc_train_14579", "nl": "Fertilization occurs when gametes fuse.", "fol": "", "prediction": ["all x.((Gamete(x) & Fuse(x)) -> Fertilization(x))"]}
{"id": "eqasc_train_14580", "nl": "pregnancy begins when a sperm and an egg fuse", "fol": "", "prediction": ["all x y z.((Pregnancy(x) & Sperm(y) & Egg(z) & Fuse(x,y,z)) -> (Embraces(x,y) & Sperm(y) & Egg(z)))"]}
{"id": "eqasc_train_14581", "nl": "sperm penetrates eggs", "fol": "", "prediction": ["all x y.((Ssperm(x) & Egg(y)) -> Penetrates(x,y))"]}
{"id": "eqasc_train_14582", "nl": "Fertilization is caused by the usage of gametes", "fol": "", "prediction": ["all x y.((Fertilization(x) & Gametes(y)) -> CausedByUsage(x,y))"]}
{"id": "eqasc_train_14583", "nl": "Also, the sperm fertilize the egg in one of the fallopian tubes.", "fol": "", "prediction": ["all x y.((Ssperm(x) & Egg(y) & FallopianTube(z)) -> Fertilizes(x,y,z))"]}
{"id": "eqasc_train_14584", "nl": "Fertilization occurs in the fallopian tubes", "fol": "", "prediction": ["all x y.((Fertilization(x) & FallopianTube(y)) -> OccursIn(x,y))"]}
{"id": "eqasc_train_14585", "nl": "Fertilization is complete when the sperm and egg nuclei fuse.", "fol": "", "prediction": ["all x.((Fertilization(x) & SpermNucleusFuse(x) & EggNucleusFuse(x)) -> FertilizationComplete(x))"]}
{"id": "eqasc_train_14586", "nl": "Fertilization occurs when a sperm and nuclei fuse", "fol": "", "prediction": ["all x y z.((Fertilization(x) & Sperm(y) & Nucleus(z)) -> Fuse(x,y,z))"]}
{"id": "eqasc_train_14587", "nl": "After a sperm and egg unite, they form an embryo.", "fol": "", "prediction": ["all x y.((Ssperm(x) & Egg(y)) -> UnitesFormsEmbryo(x,y))"]}
{"id": "eqasc_train_14588", "nl": "fertilization occurs with the formation of the embryo", "fol": "", "prediction": ["all x y.((Fertilization(x) & Embolus(y)) -> Forms(x,y))"]}
{"id": "eqasc_train_14589", "nl": "timing is critical when a sperm and an egg fuse", "fol": "", "prediction": ["all x y z.((Ssperm(x) & Egg(y) & Sperm(z) & Fuse(x,z)) -> CriticalTiming(x,y,z))"]}
{"id": "eqasc_train_14590", "nl": "timing is critical for what occurs when a sperm and an egg fuse", "fol": "", "prediction": ["all x y.((Ssperm(x) & Egg(y)) -> TimingCritical(x,y))"]}
{"id": "eqasc_train_14591", "nl": "Most cephalopods have separate sexes and fertilization is internal.", "fol": "", "prediction": ["all x.(Cephalopod(x) -> (HasSeparateSexes(x) & FertilizationIsInternal(x)))"]}
{"id": "eqasc_train_14592", "nl": "Cephalopods inseminate the sperm and egg internally", "fol": "", "prediction": ["all x.(Cephalopod(x) -> (InseminatesSsperm(x) & InseminatesEgg(x)))"]}
{"id": "eqasc_train_14593", "nl": "if something is outside during the day then that something will receive sunlight", "fol": "", "prediction": ["all x y.((Outside(x) & Day(y)) -> ReceivesSunlight(x,y))"]}
{"id": "eqasc_train_14594", "nl": "Sunlight is a form of radiation .", "fol": "", "prediction": ["all x.(Sunlight(x) -> Radiation(x))"]}
{"id": "eqasc_train_14595", "nl": "if something is outside during the day it will receive radiation ", "fol": "", "prediction": ["all x y.((Exterior(x) & Day(y) & Outside(x,y)) -> ReceivesRadiation(x))"]}
{"id": "eqasc_train_14596", "nl": "Chlorine is dissipated rapidly by sunlight.", "fol": "", "prediction": ["all x.(Chlorine(x) -> DissipatedRapidlyBySunlight(x))"]}
{"id": "eqasc_train_14597", "nl": "Chlorine dissipates rapidly if outside during the day.", "fol": "", "prediction": ["all x.((Chlorine(x) & OutsideDuringDay(x)) -> DissipatesRapidly(x))"]}
{"id": "eqasc_train_14598", "nl": "Direct sunlight is harmful to paintings.", "fol": "", "prediction": ["all x.(DirectSunlight(x) -> HarmfulToPaintings(x))"]}
{"id": "eqasc_train_14599", "nl": "It is harmful to leave paintings outside unprotected", "fol": "", "prediction": ["all x.((Painting(x) & LeavesOutsideUnprotected(x)) -> Harmful(x))"]}
{"id": "eqasc_train_14600", "nl": "Plants make sugar using sunlight.", "fol": "", "prediction": ["all x.(Plant(x) -> MakesSugarUsingSunlight(x))"]}
{"id": "eqasc_train_14601", "nl": "A plant outdoors makes sugar during the day", "fol": "", "prediction": ["all x y.((Plant(x) & Outdoors(x) & Day(y)) -> MakesSugar(x,y))"]}
{"id": "eqasc_train_14602", "nl": "Exposure to excessive sunlight can cause skin rashes or skin burns.", "fol": "", "prediction": ["all x.(ExcessiveSunlight(x) -> (CausesSkinRashes(x) | CausesSkinBurns(x)))"]}
{"id": "eqasc_train_14603", "nl": "Something outside during the day may receive skin rashes or burns.", "fol": "", "prediction": ["all x.((Outside(x) & Day(x)) -> (ReceivesSkinRashes(x) | ReceivesBurns(x)))"]}
{"id": "eqasc_train_14604", "nl": "Sunlight is made of both UVA and UVB rays.", "fol": "", "prediction": ["all x.(Sunlight(x) -> (MadeOfUVA(x) & MadeOfUVB(x)))"]}
{"id": "eqasc_train_14605", "nl": "if something is outside during the day then it will receive UVA and UVB rays", "fol": "", "prediction": ["all x.((OutsideDuringDay(x) & ReceivesUVA(x) & ReceivesUVB(x)) -> ReceivesUVA(x))"]}
{"id": "eqasc_train_14606", "nl": "Energy flows from the sun in the form of sunlight.", "fol": "", "prediction": ["all x y.((Sun(x) & Sunlight(y)) -> EnergyFlowsFrom(x,y))"]}
{"id": "eqasc_train_14607", "nl": "if something is outside during the day then that something will receive energy from the sun", "fol": "", "prediction": ["all x y.((Outside(x) & Day(y)) -> ReceivesEnergyFromSun(x,y))"]}
{"id": "eqasc_train_14608", "nl": "if something is outside during the day that something will receive energy", "fol": "", "prediction": ["all x y.((Outside(x) & Day(y) & Outside(x,y)) -> ReceivesEnergy(x,y))"]}
{"id": "eqasc_train_14609", "nl": "Green plants grow best outside.", "fol": "", "prediction": ["all x.(GreenPlant(x) -> GrowsBestOutside(x))"]}
{"id": "eqasc_train_14610", "nl": "If something is outside during the day then that thing will receive sun.", "fol": "", "prediction": ["all x.((OutsideDuringDay(x) & Day(x)) -> ReceivesSun(x))"]}
{"id": "eqasc_train_14611", "nl": "An outdoor shower is located conveniently outside the laundry area.", "fol": "", "prediction": ["all x.(OutdoorBath(x) -> LocatedConvenientlyOutsideLaundryArea(x))"]}
{"id": "eqasc_train_14612", "nl": "An outdoor shower during the day will receive sunlight.", "fol": "", "prediction": ["all x.(OutdoorBath(x) -> ReceivesSunlight(x))"]}
{"id": "eqasc_train_14613", "nl": "Another source of vitamin D is sunlight.", "fol": "", "prediction": ["all x.((Sunlight(x) & SourceOfVitaminD(x)) -> VitaminD(x))"]}
{"id": "eqasc_train_14614", "nl": "Being outside is a good way to get vitamin D.", "fol": "", "prediction": ["all x.(Outside(x) -> GoodVitaminD(x))"]}
{"id": "eqasc_train_14615", "nl": "most canyons are formed by flowing rivers through erosion over long periods of time", "fol": "", "prediction": ["all x.(Cylinder(x) -> (FormedByFlowingRiver(x) & Erosion(x) & LongPeriodsOfTime(x)))"]}
{"id": "eqasc_train_14616", "nl": "The Columbia River Gorge is a spectacular river canyon cutting through the volcanic rock of the Cascade Mountain Range.", "fol": "", "prediction": ["all x.(ColumbiaRiverGorge(x) -> (SpectacularRiverCanyon(x) & CutsThroughVolcanicRock(x) & CascadeMountainRange(x)))"]}
{"id": "eqasc_train_14617", "nl": "The Columbia River Gorge was formed through erosion over long periods of time", "fol": "", "prediction": ["(FormedByErosion(ColumbiaRiverGorge) & LongPeriodsOfTime(ColumbiaRiver))"]}
{"id": "eqasc_train_14618", "nl": "Most river erosion occurs when the river is in flood.", "fol": "", "prediction": ["all x.((River(x) & InFlood(x)) -> ErosionOccurs(x))"]}
{"id": "eqasc_train_14619", "nl": "most canyons are formed by flooding over long periods of time", "fol": "", "prediction": ["all x.(Cylinder(x) -> (FormedByFlooding(x) & LongPeriodsOfTime(x)))"]}
{"id": "eqasc_train_14620", "nl": "Rivers, rainwater, well water and most lakes contain fresh water.", "fol": "", "prediction": ["all x y z.((River(x) & Rainwater(y) & WellWater(z) & Lake(x)) -> (ContainsFreshWater(x) | ContainsFreshWater(x)))"]}
{"id": "eqasc_train_14621", "nl": "canyons are formed by rainwater", "fol": "", "prediction": ["all x.(Canyon(x) -> (FormedByRainwater(x) & FormedByRainwater(x)))"]}
{"id": "eqasc_train_14622", "nl": "Striations in rock forms are seen along the river and tell the geologic history of the area.", "fol": "", "prediction": ["all x y.((Striation(x) & RockForm(y)) -> (SeedAlongRiver(x,y) & TellsGeologicHistory(x,y)))"]}
{"id": "eqasc_train_14623", "nl": "Canyons reveal the geologic history of the area.", "fol": "", "prediction": ["all x.(Canyon(x) -> (LearnsGeologicHistory(x) & Area(x)))"]}
{"id": "eqasc_train_14624", "nl": "Deep gorges and canyons formed by the river are tourist attractions.", "fol": "", "prediction": ["all x.((DeepGgorge(x) & DeepCanyon(x) & FormedByRiver(x)) -> TouristAttraction(x))"]}
{"id": "eqasc_train_14625", "nl": "Deep gorges are formed by flowing rivers through erosion over long periods of time", "fol": "", "prediction": ["all x y z.((DeepGgorge(x) & River(y) & River(z)) -> (FormedByFlowingThroughErosion(x,y,z) & LongPeriodOfTime(x)))"]}
{"id": "eqasc_train_14626", "nl": "Weather wears down the by erosion.", "fol": "", "prediction": ["all x.(Weather(x) -> WearsDownByErosion(x))"]}
{"id": "eqasc_train_14627", "nl": "Most canyons are formed by flowing rivers through weathering over long periods of time.", "fol": "", "prediction": ["all x.(Cylinder(x) -> (FormedByFlowingRiver(x) & WeatheredOverLongPeriods(x)))"]}
{"id": "eqasc_train_14628", "nl": "Rivers and glaciers are made of water.", "fol": "", "prediction": ["all x.((River(x) | Glacier(x)) -> MadeOfWater(x))"]}
{"id": "eqasc_train_14629", "nl": "Flowing water forms most canyons through erosion over long periods of time", "fol": "", "prediction": ["all x y.((FlowingWater(x) & Canyon(y)) -> FormsThroughErosion(x,y))"]}
{"id": "eqasc_train_14630", "nl": "Rivers contain 0.001 percent of the earth's water.", "fol": "", "prediction": ["all x.(River(x) -> Contains(x,0,001))"]}
{"id": "eqasc_train_14631", "nl": "most canyons are formed by flowing water", "fol": "", "prediction": ["all x.(Cannon(x) -> FormedByFlowingWater(x))"]}
{"id": "eqasc_train_14632", "nl": "Water and time can eventually create a canyon. ", "fol": "", "prediction": ["all x.((Water(x) & Time(x)) -> CanCreateCanyon(x))"]}
{"id": "eqasc_train_14633", "nl": "Deep canyons and valleys are carved out.", "fol": "", "prediction": ["all x.((DeepCanyon(x) | DeepValley(x)) -> CarvedOut(x))"]}
{"id": "eqasc_train_14634", "nl": "deep valleys are formed by flowing rivers through erosion over long periods of time", "fol": "", "prediction": ["all x y z.((Dive(x) & River(y) & Erosion(z) & FlowingThrough(y,z)) -> FormedBy(x,y,z))"]}
{"id": "eqasc_train_14635", "nl": "Smithfield Canyon, a deep gorge through the mountains, dominates the view to the west.", "fol": "", "prediction": ["all x.(SmithfieldCanyon(x) -> (DeepGgorge(x) & ThroughMountains(x) & DefeatsViewToWest(x)))"]}
{"id": "eqasc_train_14636", "nl": "Most deep gorges are formed by flowing rivers through erosion over long periods of time.", "fol": "", "prediction": ["all x.(DeepGgorge(x) -> (FormedByFlowingRiver(x) & Erosion(x) & LongPeriodsOfTime(x)))"]}
{"id": "eqasc_train_14637", "nl": "Geological erosion is natural occurring erosion over long periods of time.", "fol": "", "prediction": ["all x.(GeologicalErosion(x) -> NaturalOccurringErosion(x))"]}
{"id": "eqasc_train_14638", "nl": "Most canyons are formed by flowing rivers through geological erosion", "fol": "", "prediction": ["all x.(Crane(x) -> (FormedByFlowingRiver(x) & ThroughErosion(x)))"]}
{"id": "eqasc_train_14639", "nl": "Erosion was monitored by means of erosion pins.", "fol": "", "prediction": ["all x.(Erosion(x) -> MonitoredByErosionPins(x))"]}
{"id": "eqasc_train_14640", "nl": "Canyon changes are tracked with pins", "fol": "", "prediction": ["all x.(CanyonChange(x) -> TrackedWithPins(x))"]}
{"id": "eqasc_train_14641", "nl": "Canyon Lake Canyon lake was formed by dams on the Salt River.", "fol": "", "prediction": ["all x.(CanyonLake(x) -> (FormedByDamsOnSaltRiver(x) & OnSaltRiver(x)))"]}
{"id": "eqasc_train_14642", "nl": "dams can form canyons", "fol": "", "prediction": ["all x.(Dam(x) -> CanFormCanyon(x))"]}
{"id": "eqasc_train_14643", "nl": "Steroid hormones are made of lipids, such as phospholipids and cholesterol.", "fol": "", "prediction": ["all x.(SteroidHormone(x) -> (MadeOfLipids(x) & (Phospholipids(x) | Cholesterol(x))))"]}
{"id": "eqasc_train_14644", "nl": "Steroid hormones are made of fats", "fol": "", "prediction": ["all x.(SteroidHormone(x) -> MadeOfFats(x))"]}
{"id": "eqasc_train_14645", "nl": "Steroid hormones are soluble in blood.", "fol": "", "prediction": ["all x.(SteroidHormone(x) -> SolubleInBlood(x))"]}
{"id": "eqasc_train_14646", "nl": "lipids are soluble in blood", "fol": "", "prediction": ["all x.(Lipids(x) -> SolubleInBlood(x))"]}
{"id": "eqasc_train_14647", "nl": "Body fat makes up a steroid hormone", "fol": "", "prediction": ["all x y.((BodyFat(x) & SteroidHormone(y)) -> MakesUp(x,y))"]}
{"id": "eqasc_train_14648", "nl": "Steroids are a kind of growth hormones.", "fol": "", "prediction": ["all x.(Steroid(x) -> GrowthHormone(x))"]}
{"id": "eqasc_train_14649", "nl": "Growth hormones are derived from phospholipids and cholesterol.", "fol": "", "prediction": ["all x.(GrowthHormone(x) -> (DerivedFrom(x,phospholipids) & DerivedFrom(x,cholesterol)))"]}
{"id": "eqasc_train_14650", "nl": "steroid hormones are made of diverse hydrophobic molecules", "fol": "", "prediction": ["all x.(SteroidHormone(x) -> MadeOfDiverseHydrophobicMolecules(x))"]}
{"id": "eqasc_train_14651", "nl": "Steroids Steroids are lipids and, more specifically, derivatives of cholesterol.", "fol": "", "prediction": ["all x.(Steroid(x) -> (Lipids(x) & DerivedOfCholesterone(x)))"]}
{"id": "eqasc_train_14652", "nl": "steroids are derivatives of cholesterol", "fol": "", "prediction": ["all x.(Steroid(x) -> (DerivativeOfCholesterone(x) & Cholesterol(x)))"]}
{"id": "eqasc_train_14653", "nl": "Steroid hormones are made of diverse hydrophobic molecules, such as phospholipids and cholesterol.", "fol": "", "prediction": ["all x.(SteroidHormone(x) -> (MadeOfHydrophobicMolecules(x) & (Phospholipids(x) | Cholesterol(x))))"]}
{"id": "eqasc_train_14654", "nl": "Steroid hormones are made of diverse hydrophobic molecules", "fol": "", "prediction": ["all x.(SteroidHormone(x) -> (MadeOfDiverseHydrophobicMolecules(x) & MadeOfDiverseHydrophobicMolecules(x)))"]}
{"id": "eqasc_train_14655", "nl": "Steroids Steroids are lipids derived from cholesterol.", "fol": "", "prediction": ["all x.(Steroid(x) -> (Lipid(x) & DerivedFromCholesterone(x)))"]}
{"id": "eqasc_train_14656", "nl": "steroids are made of lipids", "fol": "", "prediction": ["all x.(Steroid(x) -> (MadeOfLipids(x) & MadeOfLipids(x)))"]}
{"id": "eqasc_train_14657", "nl": "an electron microscope is used for seeing very small objects by making them appear bigger", "fol": "", "prediction": ["all x.(ElectronMicroscope(x) -> (SeesSmallObjects(x) & MakesObjectsAppearBigger(x)))"]}
{"id": "eqasc_train_14658", "nl": "Magnification by a microscope increases the apparent size of an object.", "fol": "", "prediction": ["all x y.((Microscope(x) & Magnification(y)) -> IncreasesAppearanceSize(x,y))"]}
{"id": "eqasc_train_14659", "nl": "An electron microscope is used for seeing things magnified.", "fol": "", "prediction": ["all x.(ElectronMicroscope(x) -> UsedForSeeingMagnified(x))"]}
{"id": "eqasc_train_14660", "nl": "Atoms are very small or tiny.", "fol": "", "prediction": ["all x.(Atom(x) -> (Small(x) | Tiny(x)))"]}
{"id": "eqasc_train_14661", "nl": "an electron microscope is used to see atoms", "fol": "", "prediction": ["all x y.((ElectronMicroscope(x) & Atom(y)) -> UsedToSee(x,y))"]}
{"id": "eqasc_train_14662", "nl": "Electron microscopes use a beam of electrons as their source of illumination.", "fol": "", "prediction": ["all x.(ElectronMicroscope(x) -> UsesElectronsAsIllumination(x))"]}
{"id": "eqasc_train_14663", "nl": "Electrons are used to illuminate small objects and make them appear bigger. ", "fol": "", "prediction": ["all x y.((Electron(x) & SmallObject(y)) -> IlluminatesAndAppearsBigger(x,y))"]}
{"id": "eqasc_train_14664", "nl": "an electron microscope is used for seeing bacteria by making them appear bigger", "fol": "", "prediction": ["all x.(ElectronMicroscope(x) -> (SeesBacteria(x) & MakesBacteriaAppearBigger(x)))"]}
{"id": "eqasc_train_14665", "nl": "Electron microscopes allow scientists to magnify objects hundreds of thousands of times.", "fol": "", "prediction": ["all x.(ElectronMicroscope(x) -> MagnifiesObjects(x,y))"]}
{"id": "eqasc_train_14666", "nl": "Electron microscopes are used for seeing very small things and magnifying them", "fol": "", "prediction": ["all x.(ElectronMicroscope(x) -> (SeesSmallThings(x) & MagnifiesSmallThings(x)))"]}
{"id": "eqasc_train_14667", "nl": "Microscopes range from a simple magnifying glass to the expensive electron microscope.", "fol": "", "prediction": ["all x.(Microscope(x) -> (SimpleMagnifyingGlass(x) & ExpensiveElectronMicroscope(x)))"]}
{"id": "eqasc_train_14668", "nl": "a magnifying glass can make small objects appear bigger", "fol": "", "prediction": ["all x y.((MagnifyingGlass(x) & SmallObject(y)) -> MakesAppearBigger(x,y))"]}
{"id": "eqasc_train_14669", "nl": "magnifying objects hundreds of thousands of times is used for seeing very small objects by making them appear bigger", "fol": "", "prediction": ["all x y.((MagnifyingObject(x) & SmallObject(y) & ThousandsOfTimes(x)) -> UsedForSaying(x,y))"]}
{"id": "eqasc_train_14670", "nl": "An electron microscope can see many times larger than an optical microscope.", "fol": "", "prediction": ["all x y.((ElectronMicroscope(x) & Optomiscope(y)) -> SeesLargerThan(x,y))"]}
{"id": "eqasc_train_14671", "nl": "microscopes can make things appear larger", "fol": "", "prediction": ["all x.(Microscope(x) -> MakesAppearLarger(x))"]}
{"id": "eqasc_train_14672", "nl": "Each cell is too small to see with the naked eye.", "fol": "", "prediction": ["all x.(Cell(x) -> TooSmallToSeeWithNakedEye(x))"]}
{"id": "eqasc_train_14673", "nl": "Electron microscopes can make cells appear larger.", "fol": "", "prediction": ["all x.(ElectronMicroscope(x) -> MakesCellsAppearLarger(x))"]}
{"id": "eqasc_train_14674", "nl": "By using an electron beam as a source of illumination, very small objects appear bigger", "fol": "", "prediction": ["all x y.((ElectronBeam(x) & SmallObject(y) & UsesAsIlluminationSource(x,y)) -> AppearBigger(y))"]}
{"id": "eqasc_train_14675", "nl": "Microscopes that use electrons rather than light are called electron microscopes.", "fol": "", "prediction": ["all x.((Microscope(x) & UsesElectrons(x) & -UsesLight(x)) -> ElectronMicroscope(x))"]}
{"id": "eqasc_train_14676", "nl": "seeing very small objects by making them appear bigger use electrons rather than light", "fol": "", "prediction": ["all x y.((Seen(x,y) & SmallObject(y) & MakesAppearBigger(y)) -> UsesElectrons(x))"]}
{"id": "eqasc_train_14677", "nl": "living things all require energy for survival", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresEnergyForSurvival(x))"]}
{"id": "eqasc_train_14678", "nl": "living things require food for survival", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresFoodForSurvival(x))"]}
{"id": "eqasc_train_14679", "nl": "Energy is used for survival and reproduction.", "fol": "", "prediction": ["all x.(Energy(x) -> (UsedForSurvival(x) & UsedForReproduction(x)))"]}
{"id": "eqasc_train_14680", "nl": "Living things all require survival and reproduction", "fol": "", "prediction": ["all x.(LivingThing(x) -> (RequiresSurvival(x) & RequiresReproduction(x)))"]}
{"id": "eqasc_train_14681", "nl": "All plants require sunlight for survival.", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresSunlightForSurvival(x))"]}
{"id": "eqasc_train_14682", "nl": "trees require energy for survival", "fol": "", "prediction": ["all x.(Tree(x) -> RequiresEnergyForSurvival(x))"]}
{"id": "eqasc_train_14683", "nl": "Living things all use kinetic motion. ", "fol": "", "prediction": ["all x.(LivingThing(x) -> UsesKineticMotion(x))"]}
{"id": "eqasc_train_14684", "nl": "All living things require food to survive", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresFoodToSurvive(x))"]}
{"id": "eqasc_train_14685", "nl": "Carbohydrates, fat and protein provide the energy from food.", "fol": "", "prediction": ["all x.((Carbohydrate(x) | Fat(x) | Protein(x)) -> ProvidesEnergyFromFood(x))"]}
{"id": "eqasc_train_14686", "nl": "Potatoes, pasta and pancakes are high in carbohydrates and help those dealing with food scarcity to survive.", "fol": "", "prediction": ["all x.((Potato(x) | Pasta(x) | Pancake(x)) -> (HighInCarbohydrates(x) & HelpsSurvive(x)))"]}
{"id": "eqasc_train_14687", "nl": "plants require energy for survival", "fol": "", "prediction": ["all x.(Plant(x) -> RequiresEnergyForSurvival(x))"]}
{"id": "eqasc_train_14688", "nl": "living things all require energy conservation as a trait", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresEnergyConservation(x))"]}
{"id": "eqasc_train_14689", "nl": "Bacteria are simple, as living things go.", "fol": "", "prediction": ["all x.(Bacteria(x) -> Simple(x))"]}
{"id": "eqasc_train_14690", "nl": "bacteria require energy for survival", "fol": "", "prediction": ["all x.(Bacteria(x) -> RequiresEnergyForSurvival(x))"]}
{"id": "eqasc_train_14691", "nl": "Living things all require energy for reproduction.", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresEnergyForReproduction(x))"]}
{"id": "eqasc_train_14692", "nl": "Food is the source of energy for living things.", "fol": "", "prediction": ["all x.(Food(x) -> SourceOfEnergyForLivingThings(x))"]}
{"id": "eqasc_train_14693", "nl": "Living things all require food. ", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresFood(x))"]}
{"id": "eqasc_train_14694", "nl": "Organs of excretion make up the excretory system.", "fol": "", "prediction": ["all x.(Organ(x) -> Excretion(x))"]}
{"id": "eqasc_train_14695", "nl": "Excretory system is composed of a dorsal excretory gland and a pair of Malpighian tubules.", "fol": "", "prediction": ["all x.(ExcretorySystem(x) -> (DorsalExcretoryGlands(x) & MalpighianTubercules(x)))"]}
{"id": "eqasc_train_14696", "nl": "Malpighian tubules are organs of excretion", "fol": "", "prediction": ["all x.(MalpighianTubercule(x) -> OrganOfExcretion(x))"]}
{"id": "eqasc_train_14697", "nl": "Excretion is a life process.", "fol": "", "prediction": ["all x.(Excretion(x) -> LifeProcess(x))"]}
{"id": "eqasc_train_14698", "nl": "the excretory system is part of the life process", "fol": "", "prediction": ["all x y.((ExcretorySystem(x) & LifeProcess(y)) -> PartOf(x,y))"]}
{"id": "eqasc_train_14699", "nl": "All internal organs are vital organs.", "fol": "", "prediction": ["all x.(InternalOrgan(x) -> VitalOrgan(x))"]}
{"id": "eqasc_train_14700", "nl": "A thing that is internal and vital make up the excretory system.", "fol": "", "prediction": ["all x.((Internal(x) & Vital(x)) -> ExcretorySystem(x))"]}
{"id": "eqasc_train_14701", "nl": "Leptospiral organisms cause infection in the kidneys and are excreted in urine.", "fol": "", "prediction": ["all x.(LeptospiralOrganism(x) -> (CausesInfectionInKneese(x) & ExcretedInUrine(x)))"]}
{"id": "eqasc_train_14702", "nl": "Kidneys are part of the excretory system.", "fol": "", "prediction": ["all x.(Kinney(x) -> ExcretorySystem(x))"]}
{"id": "eqasc_train_14703", "nl": "Urinary system Excretory system removes waste and toxic substances from blood.", "fol": "", "prediction": ["all x.(UrinarySystem(x) -> ExcretorySystem(x))"]}
{"id": "eqasc_train_14704", "nl": "Organs of excretion remove waste and toxic substances from blood", "fol": "", "prediction": ["all x y.((Organ(x) & Blood(y)) -> RemovesWasteAndToxicSubstances(x,y))"]}
{"id": "eqasc_train_14705", "nl": "Digestive system Excretory system removes waste and toxic substances from blood.", "fol": "", "prediction": ["all x.((DigestiveSystem(x) & ExcretorySystem(x)) -> RemovesWasteAndToxicSubstances(x))"]}
{"id": "eqasc_train_14706", "nl": "excretion removes waste from blood", "fol": "", "prediction": ["all x y.((Excretion(x) & Blood(y)) -> RemovesWasteFrom(x,y))"]}
{"id": "eqasc_train_14707", "nl": "Excretion begins with the kidneys.", "fol": "", "prediction": ["all x.(Excretion(x) -> StartsWithKnees(x))"]}
{"id": "eqasc_train_14708", "nl": "kidneys make up the excretory system.", "fol": "", "prediction": ["all x.(Knee(x) -> MakesExcretorySystem(x))"]}
{"id": "eqasc_train_14709", "nl": "organs of excretion remove waste from the blood", "fol": "", "prediction": ["all x y.((Organ(x) & Blood(y) & Excretion(x)) -> RemovesWasteFrom(x,y))"]}
{"id": "eqasc_train_14710", "nl": "Organs of waste make up the waste system", "fol": "", "prediction": ["all x.(OrgansOfWaste(x) -> MakesUpWasteSystem(x))"]}
{"id": "eqasc_train_14711", "nl": "Excess estrogen is excreted in the bowel.", "fol": "", "prediction": ["all x.(ExcessOestrogen(x) -> ExcretedInBody(x))"]}
{"id": "eqasc_train_14712", "nl": "the bowel helps make up the excretory system", "fol": "", "prediction": ["all x y.((Bowel(x) & ExcretorySystem(y)) -> MakesUp(x,y))"]}
{"id": "eqasc_train_14713", "nl": "digestive system organs removes waste and toxic substances from blood", "fol": "", "prediction": ["all x y.((DigestiveSystemOrgan(x) & Blood(y)) -> RemovesWasteAndToxicSubstances(x,y))"]}
{"id": "eqasc_train_14714", "nl": "a graduated cylinder is used to measure volume of a liquid", "fol": "", "prediction": ["all x y.((GraduatedCylinder(x) & Liquid(y)) -> MeasuresVolumeOfLiquid(x,y))"]}
{"id": "eqasc_train_14715", "nl": "Liquids Liquids Liquids are the second form of matter.", "fol": "", "prediction": ["all x.(Liquid(x) -> (Liquid(x) & SecondFormOfMatter(x)))"]}
{"id": "eqasc_train_14716", "nl": "Graduated cylinders are used to measure the volume of the second form of matter", "fol": "", "prediction": ["all x y.((GraduatedCylinder(x) & SecondFormOfMatter(y)) -> MeasuresVolume(x,y))"]}
{"id": "eqasc_train_14717", "nl": "Liquid volume is measured using a unit called a liter.", "fol": "", "prediction": ["all x.(LiquidVolume(x) -> MeasuredUsingLiquid(x))"]}
{"id": "eqasc_train_14718", "nl": "A graduated cyliner measures in liters", "fol": "", "prediction": ["all x.((Cyliner(x) & Graduated(x)) -> MeasuresInLiliters(x))"]}
{"id": "eqasc_train_14719", "nl": "For test cylinders without graduation marks, a manual calibration method has to be used.", "fol": "", "prediction": ["all x.((TestCylinder(x) & -GraduationMarks(x)) -> ManualCalculationMethod(x))"]}
{"id": "eqasc_train_14720", "nl": "graduation markings are used to measure the volume of a liquid", "fol": "", "prediction": ["all x y.((GraduationMarking(x) & Liquid(y)) -> MeasuresVolume(x,y))"]}
{"id": "eqasc_train_14721", "nl": "a graduated cylinder is used to measure volume of water", "fol": "", "prediction": ["all x y.((GraduatedCylinder(x) & Water(y)) -> MeasuresVolume(x,y))"]}
{"id": "eqasc_train_14722", "nl": "Excess water was poured into a graduated cylinder and measured.", "fol": "", "prediction": ["all x y.((ExcessWater(x) & GradientCylinder(y)) -> PouredIntoAndMeasured(x,y))"]}
{"id": "eqasc_train_14723", "nl": "You can find the volume of water by using a graduated cylinder", "fol": "", "prediction": ["all x y.((WaterVolume(x) & GradientCylinder(y)) -> Finds(x,y))"]}
{"id": "eqasc_train_14724", "nl": "graduated cylinder measure in liters", "fol": "", "prediction": ["all x.(GraduatedCylinder(x) -> MeasureInLiliters(x))"]}
{"id": "eqasc_train_14725", "nl": "Liquid ounces are a measure of volume, and dry pounds are a measure of mass.", "fol": "", "prediction": ["(all x.(LiquidOz(x) -> MeasuresVolume(x)) & all y.(DryPound(y) -> MeasuresMass(y)))"]}
{"id": "eqasc_train_14726", "nl": "a graduated cylinder is used to measure liquid ounces", "fol": "", "prediction": ["all x y.((GraduatedCylinder(x) & LiquidOz(y)) -> Measures(x,y))"]}
{"id": "eqasc_train_14727", "nl": "Water volume can be measured with a graduated cylinder", "fol": "", "prediction": ["all x.(WaterVolume(x) -> (MeasuredWithGraduatedCylinder(x)))"]}
{"id": "eqasc_train_14728", "nl": "a graduated cylinder can be used to measure volume of water.", "fol": "", "prediction": ["all x.((Cylinder(x) & Graduated(x)) -> MeasuresWaterVolume(x))"]}
{"id": "eqasc_train_14729", "nl": "Students learn to use a graduated cylinder and measure in mL. 2.", "fol": "", "prediction": ["all x y.((Student(x) & GradientCylinder(y)) -> (Uses(x,y) & MeasuresInML(x)))"]}
{"id": "eqasc_train_14730", "nl": "Graduated cylinders measure liquids in mL.", "fol": "", "prediction": ["all x.(GraduatedCylinder(x) -> MeasuresLiquidsInML(x))"]}
{"id": "eqasc_train_14731", "nl": "a graduated cylinder is used to measure the volume of water", "fol": "", "prediction": ["all x y.((GraduatedCylinder(x) & Water(y)) -> MeasuresVolume(x,y))"]}
{"id": "eqasc_train_14732", "nl": "Volume Volume is a measure of how much space a space figure takes up.", "fol": "", "prediction": ["all x.(Volume(x) -> MeasuresSpace(x))"]}
{"id": "eqasc_train_14733", "nl": "a graduated cylinder is used to measure how much space a liquid takes up", "fol": "", "prediction": ["all x y.((GraduatedCylinder(x) & Liquid(y)) -> MeasuresSpace(x,y))"]}
{"id": "eqasc_train_14734", "nl": "Gasoline is an example of a liquid mixture.", "fol": "", "prediction": ["all x.(Gasoline(x) -> LiquidMixture(x))"]}
{"id": "eqasc_train_14735", "nl": "a graduated cylinder can be used to measure volume of Gasoline", "fol": "", "prediction": ["all x y.((GraduatedCylinder(x) & Gasoline(y)) -> MeasuresVolume(x,y))"]}
{"id": "eqasc_train_14736", "nl": "Pipets deliver the most accurately measured volume of a liquid.", "fol": "", "prediction": ["all x y.((Pipet(x) & Liquid(y)) -> DeliversAccurateVolume(x,y))"]}
{"id": "eqasc_train_14737", "nl": "Pipets more accurately measure compared to a graduated cylinder", "fol": "", "prediction": ["all x y.((Pipet(x) & GraduatedCylinder(y)) -> MoreAccurateMeasurement(x,y))"]}
{"id": "eqasc_train_14738", "nl": "Volume is typically measured in liters or milliliters.", "fol": "", "prediction": ["all x.(Volume(x) -> (MeasuredInLiliters(x) | MeasuredInMilliliters(x)))"]}
{"id": "eqasc_train_14739", "nl": "a graduated cylinder is used to measure milliliters", "fol": "", "prediction": ["all x y.((GraduatedCylinder(x) & Milliliter(y)) -> Measures(x,y))"]}
{"id": "eqasc_train_14740", "nl": "scales are used for protection by scaled animals", "fol": "", "prediction": ["all x y.((Scales(x) & ScaledAnimal(y)) -> UsedForProtection(x,y))"]}
{"id": "eqasc_train_14741", "nl": "Generally, reptiles are thought of as being land dwelling animals with scales.", "fol": "", "prediction": ["all x.(Reptile(x) -> LandDwellingAnimal(x))"]}
{"id": "eqasc_train_14742", "nl": "Reptiles have scales for protection.", "fol": "", "prediction": ["all x.(Reptile(x) -> HasScalesForProtection(x))"]}
{"id": "eqasc_train_14743", "nl": "Scales provide protection and camouflage.", "fol": "", "prediction": ["all x.(Scale(x) -> (Protects(x) & Camouflage(x)))"]}
{"id": "eqasc_train_14744", "nl": "scales are used for camouflage by scaled animals", "fol": "", "prediction": ["all x y.((Scales(x) & ScaledAnimal(y)) -> Camouflage(x,y))"]}
{"id": "eqasc_train_14745", "nl": "Horned lizards are reptiles with tails and a scaled body.", "fol": "", "prediction": ["all x.(HornedLizard(x) -> (Reptile(x) & HasTail(x) & ScaledBody(x)))"]}
{"id": "eqasc_train_14746", "nl": "Lizards are protected by their unique body. ", "fol": "", "prediction": ["all x.(Lizard(x) -> ProtectedByUniqueBody(x))"]}
{"id": "eqasc_train_14747", "nl": "Like all reptiles, alligator skin is covered with rows of scales.", "fol": "", "prediction": ["all x.(AlligatorSkin(x) -> (CoveredWithScales(x) & LikeReptiles(x)))"]}
{"id": "eqasc_train_14748", "nl": "skin is used for protection by alligators", "fol": "", "prediction": ["all x y.((Skin(x) & Alligator(y)) -> UsedForProtection(x,y))"]}
{"id": "eqasc_train_14749", "nl": "Fish scales are also composed of chitin.", "fol": "", "prediction": ["all x.(FishScales(x) -> ComposedOfChitin(x))"]}
{"id": "eqasc_train_14750", "nl": "Chitin can be used for protection by fish.", "fol": "", "prediction": ["all x.(Chitin(x) -> CanBeUsedForProtectionByFish(x))"]}
{"id": "eqasc_train_14751", "nl": "Reptiles have scales or plates.", "fol": "", "prediction": ["all x.(Reptile(x) -> (HasScales(x) | HasPlates(x)))"]}
{"id": "eqasc_train_14752", "nl": "Reptiles use their plates for protection.", "fol": "", "prediction": ["all x.(Reptile(x) -> UsesPlate(x))"]}
{"id": "eqasc_train_14753", "nl": "scales are used for protection by fish ", "fol": "", "prediction": ["all x y.((Scales(x) & Fish(y)) -> UsedForProtection(x,y))"]}
{"id": "eqasc_train_14754", "nl": "Pangolins have an elongate and tapering body covered above with overlapping scales.", "fol": "", "prediction": ["all x.(Pangolin(x) -> (ElongateAndTappingBody(x) & CoveredAboveScales(x)))"]}
{"id": "eqasc_train_14755", "nl": "Pangolins are covered in overlapping protection.", "fol": "", "prediction": ["all x.(Pangolin(x) -> CoveredInOverlappingProtection(x))"]}
{"id": "eqasc_train_14756", "nl": "Fish are covered with scales.", "fol": "", "prediction": ["all x.(Fish(x) -> CoveredWithScales(x))"]}
{"id": "eqasc_train_14757", "nl": "Fish are covered with protection", "fol": "", "prediction": ["all x.(Fish(x) -> CoveredWithProtection(x))"]}
