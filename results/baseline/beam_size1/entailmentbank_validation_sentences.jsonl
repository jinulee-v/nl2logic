{"id": "entailmentbank_validation_0", "nl": "the sun rising / setting occurs once per day.", "fol": "", "prediction": ["all x.(SunRising(x) -> Setting(x))"]}
{"id": "entailmentbank_validation_1", "nl": "the sun rising is a kind of event.", "fol": "", "prediction": ["all x.(SunRising(x) -> Event(x))"]}
{"id": "entailmentbank_validation_2", "nl": "the sun setting is a kind of event.", "fol": "", "prediction": ["all x.(SunSetting(x) -> Event(x))"]}
{"id": "entailmentbank_validation_3", "nl": "the sun rising and setting is the event that occurs once per day.", "fol": "", "prediction": ["all x.((SunRising(x) & Setting(x)) -> OccursOncePerDay(x))"]}
{"id": "entailmentbank_validation_4", "nl": "a star produces light and heat.", "fol": "", "prediction": ["all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))"]}
{"id": "entailmentbank_validation_5", "nl": "a source of something emits / produces / generates / provides that something.", "fol": "", "prediction": ["all x.(SourceOf(x,y) -> (EmitsProducesGeneratesProvides(x,y)))"]}
{"id": "entailmentbank_validation_6", "nl": "a star is a source of light.", "fol": "", "prediction": ["all x.(Star(x) -> SourceOfLight(x))"]}
{"id": "entailmentbank_validation_7", "nl": "as the source of light becomes closer, that source of light will appear brighter.", "fol": "", "prediction": ["all x.((SourceOfLight(x) & Closer(x)) -> AppearBrighter(x))"]}
{"id": "entailmentbank_validation_8", "nl": "distance is a property of space and includes ordered values of close / far.", "fol": "", "prediction": ["all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValues(x,close,far)))"]}
{"id": "entailmentbank_validation_9", "nl": "as the distance of the star to earth decreases, the star will appear brighter.", "fol": "", "prediction": ["all x y.((Star(x) & Distance(y) & Decreases(x,y)) -> AppearsBrighter(x))"]}
{"id": "entailmentbank_validation_10", "nl": "a star is a kind of celestial object / celestial body.", "fol": "", "prediction": ["all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))"]}
{"id": "entailmentbank_validation_11", "nl": "apparent magnitude is a measure of the brightness of a celestial object / celestial body as observed on earth.", "fol": "", "prediction": ["all x y.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(y)) -> MeasuresBrightness(x,y))"]}
{"id": "entailmentbank_validation_12", "nl": "apparent magnitude is a measure of the brightness of a star as observed on earth.", "fol": "", "prediction": ["all x.(ApparentMagnitude(x) -> MeasuresBrightnessOfStar(x))"]}
{"id": "entailmentbank_validation_13", "nl": "united states is located in the northern hemisphere.", "fol": "", "prediction": ["all x.(UnitedStates(x) -> LocatedInNorthernHemisphere(x))"]}
{"id": "entailmentbank_validation_14", "nl": "new york / new york state is a state located in the united states of america.", "fol": "", "prediction": ["all x.(NewYork(x) -> (State(x) & UnitedStatesOfAmerica(x)))"]}
{"id": "entailmentbank_validation_15", "nl": "new york state is located in the northern hemisphere.", "fol": "", "prediction": ["all x.(NewYorkState(x) -> LocatedInNorthernHemisphere(x))"]}
{"id": "entailmentbank_validation_16", "nl": "december is during the winter in the northern hemisphere.", "fol": "", "prediction": ["all x.(December(x) -> WinterInNorthernHemisphere(x))"]}
{"id": "entailmentbank_validation_17", "nl": "december is during the winter for new york state.", "fol": "", "prediction": ["all x.((December(x) & Winter(x)) -> NewYorkState(y))"]}
{"id": "entailmentbank_validation_18", "nl": "winter has the least sunlight.", "fol": "", "prediction": ["all x.(Winter(x) -> LessSunlight(x))"]}
{"id": "entailmentbank_validation_19", "nl": "new york state has the least sunlight during december.", "fol": "", "prediction": ["all x.((NewYorkState(x) & -Sunlight(x)) -> -Sunlight(x))"]}
{"id": "entailmentbank_validation_20", "nl": "earth is a kind of planet.", "fol": "", "prediction": ["all x.(Earth(x) -> Planet(x))"]}
{"id": "entailmentbank_validation_21", "nl": "the earth rotates on its tilted axis.", "fol": "", "prediction": ["all x.(Earth(x) -> RotatesOnTiltedAxis(x))"]}
{"id": "entailmentbank_validation_22", "nl": "earth is a planet that rotates on its tilted axis.", "fol": "", "prediction": ["all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))"]}
{"id": "entailmentbank_validation_23", "nl": "rotation is the circular movement of an object around a center / axis.", "fol": "", "prediction": ["all x y.((Rotation(x) & Object(y)) -> CircularMovementAroundCenterAxis(x,y))"]}
{"id": "entailmentbank_validation_24", "nl": "a planet rotating causes cycles of day and night on that planet.", "fol": "", "prediction": ["all x y.((Planet(x) & Rotating(x)) -> CausesCyclesOfDayAndNight(x,y))"]}
{"id": "entailmentbank_validation_25", "nl": "earth rotating on its axis causes the cycle of day and night on earth.", "fol": "", "prediction": ["all x.((Earth(x) & RotatingOnAxis(x)) -> CausesCycleOfDayAndNight(x))"]}
{"id": "entailmentbank_validation_26", "nl": "gradens contain plants.", "fol": "", "prediction": ["all x.(Graden(x) -> ContainsPlants(x))"]}
{"id": "entailmentbank_validation_27", "nl": "gardens are located outside.", "fol": "", "prediction": ["all x.(Garden(x) -> LocatedOutside(x))"]}
{"id": "entailmentbank_validation_28", "nl": "the plants in the gardens are located outside.", "fol": "", "prediction": ["all x.(Garden(x) -> PlantsInOutdoor(x))"]}
{"id": "entailmentbank_validation_29", "nl": "if something is outside during the day then that something will receive sunlight.", "fol": "", "prediction": ["all x.((OutsideDuringDay(x) & OutsideDuringDay(x)) -> ReceivesSunlight(x))"]}
{"id": "entailmentbank_validation_30", "nl": "the plants in the gardens will receive sunlight during the day.", "fol": "", "prediction": ["all x y.((Plant(x) & Garden(y)) -> ReceivesSunlight(x,y))"]}
{"id": "entailmentbank_validation_31", "nl": "a plant requires sunlight to grow.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresSunlight(x)) -> Grows(x))"]}
{"id": "entailmentbank_validation_32", "nl": "the plants in the gardens will receive sunlight to grow during the day.", "fol": "", "prediction": ["all x y.((Plant(x) & Garden(y)) -> ReceivesSunlightToGrowDuringDay(x,y))"]}
{"id": "entailmentbank_validation_33", "nl": "summer has the most sunlight.", "fol": "", "prediction": ["all x.(Summer(x) -> MostSunlight(x))"]}
{"id": "entailmentbank_validation_34", "nl": "the plants in the gardens will receive the most sunlight in summer to grow during the day.", "fol": "", "prediction": ["all x y.((Plant(x) & Garden(y)) -> MostSunlightInSummer(x,y))"]}
{"id": "entailmentbank_validation_35", "nl": "andy lives in southern hemisphere.", "fol": "", "prediction": ["andy lives in southern hemisphere."]}
{"id": "entailmentbank_validation_36", "nl": "it is august.", "fol": "", "prediction": ["all x.(Autumn(x) -> -Autumn(x))"]}
{"id": "entailmentbank_validation_37", "nl": "august is during the winter in the southern hemisphere.", "fol": "", "prediction": ["all x.(Autumn(x) -> WinterInSouthernHemisphere(x))"]}
{"id": "entailmentbank_validation_38", "nl": "andy will experience winter in southern hemisphere in august.", "fol": "", "prediction": ["andy will experience winter in southern hemisphere in august."]}
{"id": "entailmentbank_validation_39", "nl": "the sun is a kind of star.", "fol": "", "prediction": ["all x.(Sun(x) -> Star(x))"]}
{"id": "entailmentbank_validation_40", "nl": "the earth revolves around the sun.", "fol": "", "prediction": ["all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))"]}
{"id": "entailmentbank_validation_41", "nl": "earth revolving the sun is an example of a planet revolving around its star.", "fol": "", "prediction": ["all x.((Earth(x) & RevolvingSun(x)) -> PlanetRevolvingAroundStar(x))"]}
{"id": "entailmentbank_validation_42", "nl": "a complete revolution / orbit of a planet around its star takes 1 / one planetary year.", "fol": "", "prediction": ["all x y.((Planet(x) & Planet(y) & CompleteRevolution(x,y)) -> OrbitsAroundStar(x,y))"]}
{"id": "entailmentbank_validation_43", "nl": "a complete revolution of earth around the sun takes an earth year.", "fol": "", "prediction": ["all x y.((Revolution(x) & Earth(y) & Sun(z)) -> TakesEarthYear(x,y,z))"]}
{"id": "entailmentbank_validation_44", "nl": "earth rotating on its tilted axis occurs once per day.", "fol": "", "prediction": ["all x.(TiltedAxis(x) -> EarthRotatingOn(x,Day))"]}
{"id": "entailmentbank_validation_45", "nl": "the earth is a planet that rotates on its tilted axis once per day.", "fol": "", "prediction": ["all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x) & OncePerDay(x)))"]}
{"id": "entailmentbank_validation_46", "nl": "the earth rotating on its tilted axis causes the cycles of day and night on earth.", "fol": "", "prediction": ["all x y.((Earth(x) & TiltedAxis(y)) -> CausesCyclesOfDayAndNight(x,y))"]}
{"id": "entailmentbank_validation_47", "nl": "mercury is located in the solar system.", "fol": "", "prediction": ["all x.(Mercury(x) -> LocatedInSolarSystem(x))"]}
{"id": "entailmentbank_validation_48", "nl": "mercury is a kind of planet.", "fol": "", "prediction": ["all x.(Mercury(x) -> Planet(x))"]}
{"id": "entailmentbank_validation_49", "nl": "mercury is a planet in the solar system.", "fol": "", "prediction": ["all x.(Mercury(x) -> PlanetInSolarSystem(x))"]}
{"id": "entailmentbank_validation_50", "nl": "planets in the solar system orbit the sun.", "fol": "", "prediction": ["all x.((Planet(x) & SolarSystem(x)) -> OrbitsSun(x))"]}
{"id": "entailmentbank_validation_51", "nl": "mercury is a planet orbits the sun in the solar system.", "fol": "", "prediction": ["all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x)))"]}
{"id": "entailmentbank_validation_52", "nl": "a complete orbit of mercury around the sun takes one mercury year.", "fol": "", "prediction": ["all x.((CompleteOrbitOfMercury(x) & AroundSun(x)) -> TakesOneMercuryYear(x))"]}
{"id": "entailmentbank_validation_53", "nl": "one mercury year is about 88 earth days.", "fol": "", "prediction": ["all x.(MercuryYear(x) -> EarthDays(x,88))"]}
{"id": "entailmentbank_validation_54", "nl": "a complete orbit of mercury around the sun takes around 88 earth days.", "fol": "", "prediction": ["all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesEarthDays(x,88))"]}
{"id": "entailmentbank_validation_55", "nl": "the new moon is when the dark half of the moon faces the earth.", "fol": "", "prediction": ["all x.(NewMoon(x) -> (DarkHalfOfMoon(x) & FacesEarth(x)))"]}
{"id": "entailmentbank_validation_56", "nl": "the new moon is when the moon is in between the sun and the earth.", "fol": "", "prediction": ["all x.(NewMoon(x) -> MoonInBetweenSunAndEarth(x))"]}
{"id": "entailmentbank_validation_57", "nl": "the new moon is when the moon could block the earth from the sun.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> BlocksFromSun(x,y))"]}
{"id": "entailmentbank_validation_58", "nl": "a solar eclipse is when the moon blocks the earth from the sun.", "fol": "", "prediction": ["all x.(SolarEclipse(x) -> MoonBlocksEarthFromSun(x))"]}
{"id": "entailmentbank_validation_59", "nl": "a solar eclipse could only happen during the new moon.", "fol": "", "prediction": ["all x.(SolarEclipse(x) -> CanOccurDuringNewMoon(x))"]}
{"id": "entailmentbank_validation_60", "nl": "objects generally are made of ice in the kuiper belt.", "fol": "", "prediction": ["all x.((Object(x) & MadeOfIce(x)) -> KuiperBelt(x))"]}
{"id": "entailmentbank_validation_61", "nl": "icy can be used to describe objects that are made of ice.", "fol": "", "prediction": ["all x.(Ice(x) -> DefinesMadeOfIce(x))"]}
{"id": "entailmentbank_validation_62", "nl": "objects in kuiper belt are icy.", "fol": "", "prediction": ["all x.((Object(x) & KuiperBelt(x)) -> Icy(x))"]}
{"id": "entailmentbank_validation_63", "nl": "a comet orbit occurs usually once per 1000 years.", "fol": "", "prediction": ["all x.(CometOrbit(x) -> OccursOncePer1000Years(x))"]}
{"id": "entailmentbank_validation_64", "nl": "a comet is a kind of celestial object.", "fol": "", "prediction": ["all x.(Comet(x) -> CelestialObject(x))"]}
{"id": "entailmentbank_validation_65", "nl": "comet orbits are elliptical.", "fol": "", "prediction": ["all x.(CometOrbit(x) -> Elliptical(x))"]}
{"id": "entailmentbank_validation_66", "nl": "comets are the kind of celestial object that has a highly elliptical orbit and has a period of over 1000 years.", "fol": "", "prediction": ["all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & HasPeriodOver1000Years(x)))"]}
{"id": "entailmentbank_validation_67", "nl": "the milky way galaxy appears as a glowing band across the night sky.", "fol": "", "prediction": ["all x.(MilkyWayGalaxy(x) -> AppearsAsGlowingBandAcrossNightSky(x))"]}
{"id": "entailmentbank_validation_68", "nl": "a student observes a glowing band across the night sky.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y)) -> ObservesGlowingBand(x,y))"]}
{"id": "entailmentbank_validation_69", "nl": "the student observes the milky way galaxy at night.", "fol": "", "prediction": ["all x y.((Student(x) & MilkyWayGalaxy(y)) -> ObservesAtNight(x,y))"]}
{"id": "entailmentbank_validation_70", "nl": "looking at bright objects has a negative impact on the eyes.", "fol": "", "prediction": ["all x.(BrightObject(x) -> NegativeImpactOnEyes(x))"]}
{"id": "entailmentbank_validation_71", "nl": "the moon is less bright than the sun.", "fol": "", "prediction": ["all x y.((Moon(x) & Sun(y)) -> LessBright(x,y))"]}
{"id": "entailmentbank_validation_72", "nl": "looking at the moon has less of a negative impact on the eyes.", "fol": "", "prediction": ["all x.(LookingAtMoon(x) -> LessNegativeImpactOnEyes(x))"]}
{"id": "entailmentbank_validation_73", "nl": "the surface of the earth contains mountains.", "fol": "", "prediction": ["all x.(EarthSurface(x) -> ContainsMountains(x))"]}
{"id": "entailmentbank_validation_74", "nl": "the surface of the moon contains mountains.", "fol": "", "prediction": ["all x.(MoonSurface(x) -> ContainsMountains(x))"]}
{"id": "entailmentbank_validation_75", "nl": "both the surface of the moon and the surface of the earth contain mountains.", "fol": "", "prediction": ["all x y.((MoonSurface(x) & EarthSurface(y)) -> ContainsMountains(x,y))"]}
{"id": "entailmentbank_validation_76", "nl": "the asteroid belt is located between mars and jupiter.", "fol": "", "prediction": ["all x.(AsteroidBelt(x) -> (LocatedBetweenMarsAndJupiter(x)))"]}
{"id": "entailmentbank_validation_77", "nl": "the asteroid belt contains the largest concentration of asteroids in the solar system.", "fol": "", "prediction": ["all x.(AsteroidBelt(x) -> ContainsLargestConcentrationOfAsteroids(x))"]}
{"id": "entailmentbank_validation_78", "nl": "the asteroid belt that contains the most asteroids is located between mars and jupiter.", "fol": "", "prediction": ["all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> (BetweenMarsAndJupiter(x)))"]}
{"id": "entailmentbank_validation_79", "nl": "the sun is average in temperature for a star in our galaxy.", "fol": "", "prediction": ["all x y.((Sun(x) & Star(y)) -> AverageTemperature(x,y))"]}
{"id": "entailmentbank_validation_80", "nl": "the sun is average in size for a star in our galaxy.", "fol": "", "prediction": ["all x.(Sun(x) -> AverageSize(x))"]}
{"id": "entailmentbank_validation_81", "nl": "the sun is average in siza and average in temperature in our galaxy.", "fol": "", "prediction": ["all x y.((Sun(x) & Galaxy(y)) -> (AverageInSiza(x) & AverageInTemperature(x,y)))"]}
{"id": "entailmentbank_validation_82", "nl": "as the mass of a celestial object decreases, the surface gravity of that celestial object weakens.", "fol": "", "prediction": ["all x y.((CelestialObject(x) & MassDecrease(x)) -> SurfaceGravityWeakens(x,y))"]}
{"id": "entailmentbank_validation_83", "nl": "as the force of gravity decreases, the weight of the object will decrease.", "fol": "", "prediction": ["all x.((ForceOfGravity(x) & Decreases(x)) -> WeightDecreases(x))"]}
{"id": "entailmentbank_validation_84", "nl": "as the mass of a celestial object decreases, the weight of an object on that celestial object will decrease.", "fol": "", "prediction": ["all x y.((CelestialObject(x) & CelestialObject(y) & MassDecreases(x,y)) -> WeightDecreases(x,y))"]}
{"id": "entailmentbank_validation_85", "nl": "the earth has more mass than the moon.", "fol": "", "prediction": ["all x y.((Earth(x) & Moon(y)) -> MoreMass(x,y))"]}
{"id": "entailmentbank_validation_86", "nl": "an object weighs more on earth than on the moon because earth has more mass than the moon.", "fol": "", "prediction": ["all x y.((Object(x) & Earth(y) & Moon(z)) -> WeighsMore(x,y,z))"]}
{"id": "entailmentbank_validation_87", "nl": "less is the opposite of more.", "fol": "", "prediction": ["all x.(Less(x) -> OppositeOfMore(x))"]}
{"id": "entailmentbank_validation_88", "nl": "an object will weigh less on the moon than on the earth because the moon has less mass than the earth.", "fol": "", "prediction": ["all x y.((Object(x) & Moon(y) & Earth(y)) -> WeighsLess(x,y))"]}
{"id": "entailmentbank_validation_89", "nl": "an astronaut is a kind of object.", "fol": "", "prediction": ["all x.(Astronaut(x) -> Object(x))"]}
{"id": "entailmentbank_validation_90", "nl": "an astronaut will weigh less on the moon than on earth because the moon has less mass than the earth.", "fol": "", "prediction": ["all x y.((Astronaut(x) & Moon(y) & Earth(z)) -> WeighsLessOn(x,y,z))"]}
{"id": "entailmentbank_validation_91", "nl": "using a telescope to photograph solar events requires a light filter.", "fol": "", "prediction": ["all x.((Telescope(x) & PhotographSolarEvents(x)) -> RequiresLightFilter(x))"]}
{"id": "entailmentbank_validation_92", "nl": "a solar flare is a kind of solar event.", "fol": "", "prediction": ["all x.(SolarFlash(x) -> SolarEvent(x))"]}
{"id": "entailmentbank_validation_93", "nl": "a solar prominence is a kind of solar event.", "fol": "", "prediction": ["all x.(SolarProminence(x) -> SolarEvent(x))"]}
{"id": "entailmentbank_validation_94", "nl": "using a telescope to photograph a solar prominence and a solar flare requires a light filter.", "fol": "", "prediction": ["all x y.((Telescope(x) & SolarProminence(y) & SolarFlash(x)) -> (Photographs(x,y) & RequiresLightFilter(x)))"]}
{"id": "entailmentbank_validation_95", "nl": "if something is required for something else then that something allows that something else.", "fol": "", "prediction": ["all x y.((RequiredFor(x,y) & Other(y)) -> Allows(x,y))"]}
{"id": "entailmentbank_validation_96", "nl": "detailed observation of celestial objects requires a telescope.", "fol": "", "prediction": ["all x.(DetailedObservationOfCelestialObjects(x) -> RequiresTelescope(x))"]}
{"id": "entailmentbank_validation_97", "nl": "telescopes allow the detailed observation of celestial objects.", "fol": "", "prediction": ["all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))"]}
{"id": "entailmentbank_validation_98", "nl": "a planet is a kind of celestial object / celestial body.", "fol": "", "prediction": ["all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))"]}
{"id": "entailmentbank_validation_99", "nl": "telescopes allow the detailed observation of planets.", "fol": "", "prediction": ["all x.(Telescope(x) -> AllowsDetailedObservationOfPlanets(x))"]}
{"id": "entailmentbank_validation_100", "nl": "gravity causes orbits.", "fol": "", "prediction": ["all x.(Gravity(x) -> CausesOrbits(x))"]}
{"id": "entailmentbank_validation_101", "nl": "gravity causes the earth to revolve around the sun.", "fol": "", "prediction": ["all x y.((Gravity(x) & Earth(y)) -> RevolveAround(y,x))"]}
{"id": "entailmentbank_validation_102", "nl": "the moon orbits the earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> Orbits(x,y))"]}
{"id": "entailmentbank_validation_103", "nl": "gravity causes the moon to orbit the earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Gravity(y)) -> OrbitsEarth(x,y))"]}
{"id": "entailmentbank_validation_104", "nl": "gravity causes both the orbit of the earth around the sun and the orbit of the moon around the earth.", "fol": "", "prediction": ["all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (Orbit(x,y) & Orbit(x,z)))"]}
{"id": "entailmentbank_validation_105", "nl": "spring tide is when the distance between high tide and low tide is the greatest.", "fol": "", "prediction": ["all x.((HighTidal(x) & LowTidal(x)) -> DistanceGreatest(x))"]}
{"id": "entailmentbank_validation_106", "nl": "spring tides occur during a full moon.", "fol": "", "prediction": ["all x.(SpringTide(x) -> OccursDuringFullMoon(x))"]}
{"id": "entailmentbank_validation_107", "nl": "the highest tides occur during a full moon.", "fol": "", "prediction": ["all x.((Tide(x) & FullMoon(x)) -> Highest(x))"]}
{"id": "entailmentbank_validation_108", "nl": "marine fossils means fossils of marine animals.", "fol": "", "prediction": ["all x.(MarineFossil(x) -> MeansFossil(x))"]}
{"id": "entailmentbank_validation_109", "nl": "marine animals are water animals.", "fol": "", "prediction": ["all x.(MarineAnimal(x) -> WaterAnimal(x))"]}
{"id": "entailmentbank_validation_110", "nl": "marine fossils are fossils of water animals.", "fol": "", "prediction": ["all x.(MarineFossil(x) -> FossilOfWaterAnimals(x))"]}
{"id": "entailmentbank_validation_111", "nl": "marine fossils are found in mountains.", "fol": "", "prediction": ["all x.(MarineFossil(x) -> FoundInMountains(x))"]}
{"id": "entailmentbank_validation_112", "nl": "fossils of water animals are found in mountains.", "fol": "", "prediction": ["all x.(Fossil(x) -> FoundInMountains(x))"]}
{"id": "entailmentbank_validation_113", "nl": "if fossils of a water animal or plant are found in a place then that place used to be covered by water in the past.", "fol": "", "prediction": ["all x y.((Fossil(x) & WaterAnimalOrPlant(y) & FoundInPlace(x,y)) -> UsedToBeCoveredByWater(x,y))"]}
{"id": "entailmentbank_validation_114", "nl": "the mountains used to be covered by water in the past.", "fol": "", "prediction": ["all x.(Mountain(x) -> UsedToBeCoveredByWater(x))"]}
{"id": "entailmentbank_validation_115", "nl": "a mountain is a kind of environment.", "fol": "", "prediction": ["all x.(Mountain(x) -> Environment(x))"]}
{"id": "entailmentbank_validation_116", "nl": "if something used to be in the past then that something has changed.", "fol": "", "prediction": ["all x.((Past(x) & UsedToBe(x)) -> Changed(x))"]}
{"id": "entailmentbank_validation_117", "nl": "a body of water is a kind of environment.", "fol": "", "prediction": ["all x.(BodyOfWater(x) -> Environment(x))"]}
{"id": "entailmentbank_validation_118", "nl": "the environment has changed from a body of water to mountains.", "fol": "", "prediction": ["all x.(EnvironmentChange(x) -> (BodyOfWater(x) & Mountain(x)))"]}
{"id": "entailmentbank_validation_119", "nl": "environments are found on the crustal surface of earth.", "fol": "", "prediction": ["all x.(Environment(x) -> FoundOnCrustalSurfaceOfEarth(x))"]}
{"id": "entailmentbank_validation_120", "nl": "the environments on the crustal surface of earth have changed from a body of water to mountains.", "fol": "", "prediction": ["all x y.((CrustalSurface(x) & Earth(y)) -> ChangedEnvironment(x,y))"]}
{"id": "entailmentbank_validation_121", "nl": "organisms remains can be preserved in sedimentary rock.", "fol": "", "prediction": ["all x.(Organism(x) -> CanBePreservedInSedimentaryRock(x))"]}
{"id": "entailmentbank_validation_122", "nl": "fossils are the remains of organisms or part of organisms.", "fol": "", "prediction": ["all x.(Fossil(x) -> (Organism(x) | OrganismPartOfOrganism(x)))"]}
{"id": "entailmentbank_validation_123", "nl": "fossils are mostly found in sedimentary rock.", "fol": "", "prediction": ["all x.(Fossil(x) -> FoundInSedimentaryRock(x))"]}
{"id": "entailmentbank_validation_124", "nl": "a mineral usually has a crystal structure.", "fol": "", "prediction": ["all x.(Mineral(x) -> HasCrystalStructure(x))"]}
{"id": "entailmentbank_validation_125", "nl": "a quartz is made of six-sided transparent crystals.", "fol": "", "prediction": ["all x.(Quarz(x) -> MadeOfSixSidedTransparentCrystals(x))"]}
{"id": "entailmentbank_validation_126", "nl": "quartz is a kind of mineral.", "fol": "", "prediction": ["all x.(Quarz(x) -> Mineral(x))"]}
{"id": "entailmentbank_validation_127", "nl": "different classes of rocks are formed by different methods.", "fol": "", "prediction": ["all x y.((Rock(x) & Class(y)) -> FormedBy(x,y))"]}
{"id": "entailmentbank_validation_128", "nl": "class is a measure of how a rock is formed.", "fol": "", "prediction": ["all x.(Class(x) -> MeasuresFormationOfRock(x))"]}
{"id": "entailmentbank_validation_129", "nl": "the method by which a rock is formed can be used to classify rocks.", "fol": "", "prediction": ["all x.((Method(x) & RockFormed(x)) -> ClassifyRocks(x))"]}
{"id": "entailmentbank_validation_130", "nl": "the origin of a rock means the method by which a rock is formed.", "fol": "", "prediction": ["all x.((Rock(x) & Origin(x)) -> FormedBy(x,rock))"]}
{"id": "entailmentbank_validation_131", "nl": "the origin of rocks can be used to classify rocks.", "fol": "", "prediction": ["all x.(Rock(x) -> Classify(x,rocks))"]}
{"id": "entailmentbank_validation_132", "nl": "rock formation can be used to study the history of rocks on earth.", "fol": "", "prediction": ["all x.(RockFormation(x) -> CanBeUsedToStudyRocksOnEarth(x))"]}
{"id": "entailmentbank_validation_133", "nl": "the formation of something is a kind of process.", "fol": "", "prediction": ["all x.(FormationOf(x) -> Process(x))"]}
{"id": "entailmentbank_validation_134", "nl": "studying rock formations can mean studying the history and processes of earth.", "fol": "", "prediction": ["all x.(StudyingRockFormation(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))"]}
{"id": "entailmentbank_validation_135", "nl": "structural geologists study rock formations.", "fol": "", "prediction": ["all x y.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))"]}
{"id": "entailmentbank_validation_136", "nl": "structural geologists study the history and processes of earth.", "fol": "", "prediction": ["all x y.((StructuralGeologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))"]}
{"id": "entailmentbank_validation_137", "nl": "how earth's environment changed is a part of the history of earth's environment.", "fol": "", "prediction": ["all x.((EarthsEnvironment(x) & Changed(x)) -> PartOfHistory(x))"]}
{"id": "entailmentbank_validation_138", "nl": "fossils can be used to study the history of organisms and environments on earth.", "fol": "", "prediction": ["all x y.((Fossil(x) & Organism(y)) -> (StudiesHistory(x,y) & StudiesEnvironment(x,y)))"]}
{"id": "entailmentbank_validation_139", "nl": "studying fossils in rock formations can mean studying the history and processes of earth.", "fol": "", "prediction": ["all x.((StudiesFossil(x) & RockFormation(x)) -> StudiesEarthHistoryAndProcesses(x))"]}
{"id": "entailmentbank_validation_140", "nl": "paleontologists study fossils in rock formations.", "fol": "", "prediction": ["all x y.((Paleontologist(x) & RockFormation(y)) -> StudiesFossil(x,y))"]}
{"id": "entailmentbank_validation_141", "nl": "paleontologists study the history and processes of earth.", "fol": "", "prediction": ["all x.(Paleontologist(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))"]}
{"id": "entailmentbank_validation_142", "nl": "structural geologists and paleontologists both study the history and processes of earth.", "fol": "", "prediction": ["(StudiesEarth(structuralGeologists) & StudiesEarth(paleontologists))"]}
{"id": "entailmentbank_validation_143", "nl": "metamorphic rocks do not contain fossils.", "fol": "", "prediction": ["all x.(MetamorphicRock(x) -> -ContainsFossil(x))"]}
{"id": "entailmentbank_validation_144", "nl": "nearly all fossils are found in sedimentary rock.", "fol": "", "prediction": ["all x.(Fossil(x) -> FoundInSedimentaryRock(x))"]}
{"id": "entailmentbank_validation_145", "nl": "fossils are lost / destroyed when sedimentary rock changes to metamorphic rock.", "fol": "", "prediction": ["all x.((Fossil(x) & SedimentaryRockChange(x) & MetamorphicRockChange(x)) -> LostOrDestroyed(x))"]}
{"id": "entailmentbank_validation_146", "nl": "if fossils are destroyed in rock transition, then there will be gaps in the fossil record.", "fol": "", "prediction": ["all x.((Fossil(x) & DestroyedInRockTransition(x)) -> ThereWaysInFossilRecord(x))"]}
{"id": "entailmentbank_validation_147", "nl": "sedimentary rock changing to metamorphic rock causes gaps in the fossil record.", "fol": "", "prediction": ["all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))"]}
{"id": "entailmentbank_validation_148", "nl": "heat is a kind of energy.", "fol": "", "prediction": ["all x.(Heat(x) -> Energy(x))"]}
{"id": "entailmentbank_validation_149", "nl": "metamorphic rocks are formed by rocks being exposed to extreme heat and pressure.", "fol": "", "prediction": ["all x.(MetamorphicRock(x) -> (FormedByExposedRocksToExtremeHeat(x) & ExposedToExtremePressure(x)))"]}
{"id": "entailmentbank_validation_150", "nl": "heat energy can change igneous rock into metamorphic rock.", "fol": "", "prediction": ["all x.(HeatEnergy(x) -> (ChangesIgneousRock(x) & ChangesMetamorphicRock(x)))"]}
{"id": "entailmentbank_validation_151", "nl": "a tree is a kind of habitat.", "fol": "", "prediction": ["all x.(Tree(x) -> Habitat(x))"]}
{"id": "entailmentbank_validation_152", "nl": "cutting down trees in a forest causes the number of trees to decrease in that forest.", "fol": "", "prediction": ["all x y.((CivilizingDownTrees(x) & Forest(y)) -> DecreasesNumberOfTrees(x,y))"]}
{"id": "entailmentbank_validation_153", "nl": "cutting down trees in a forest causes the number of habitat to decrease.", "fol": "", "prediction": ["all x y.((CivilizingDownTrees(x) & Forest(y)) -> DecreasesHabitat(x,y))"]}
{"id": "entailmentbank_validation_154", "nl": "an animal requires a habitat for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresHabitat(x))"]}
{"id": "entailmentbank_validation_155", "nl": "cutting down trees in a forest causes the number of habitat required by animals for survival to decrease.", "fol": "", "prediction": ["all x y.((CirdingDownTrees(x) & Forest(y)) -> DecreasesHabitat(x,y))"]}
{"id": "entailmentbank_validation_156", "nl": "humans changing ecosystems usually has a negative impact on an ecosystem / organisms living in an ecosystem.", "fol": "", "prediction": ["all x y.((Human(x) & Ecosystem(y) & Changes(x,y)) -> NegativeImpact(x,y))"]}
{"id": "entailmentbank_validation_157", "nl": "humans building homes in an ecosystem causes that ecosystem to change.", "fol": "", "prediction": ["all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> CausesChange(x,y))"]}
{"id": "entailmentbank_validation_158", "nl": "humans building homes in an ecosystem has a negative impact on an ecosystem and organisms living in the ecosystem.", "fol": "", "prediction": ["all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildsHomesIn(x,y)) -> NegativeImpactOn(x,z))"]}
{"id": "entailmentbank_validation_159", "nl": "a wetland is a kind of ecosystem.", "fol": "", "prediction": ["all x.(Wetland(x) -> Ecosystem(x))"]}
{"id": "entailmentbank_validation_160", "nl": "humans building homes in a wetland has a negative impact on a wetland and organisms living in the wetland.", "fol": "", "prediction": ["all x y.((Human(x) & Wetland(y) & BuildsHomesIn(x,y)) -> NegativeImpactOnWetlandAndOrganisms(x,y))"]}
{"id": "entailmentbank_validation_161", "nl": "if an animal eats other animals for food, then the animal will be the predator.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x))"]}
{"id": "entailmentbank_validation_162", "nl": "tuna eat fish.", "fol": "", "prediction": ["all x.(Tuna(x) -> EatsFish(x))"]}
{"id": "entailmentbank_validation_163", "nl": "tuna is a kind of predator.", "fol": "", "prediction": ["all x.(Tuna(x) -> Predator(x))"]}
{"id": "entailmentbank_validation_164", "nl": "tuna is a kind of fish.", "fol": "", "prediction": ["all x.(Tuna(x) -> Fish(x))"]}
{"id": "entailmentbank_validation_165", "nl": "tuna is a kind of predatory fish.", "fol": "", "prediction": ["all x.(Tuna(x) -> PredatoryFish(x))"]}
{"id": "entailmentbank_validation_166", "nl": "commercial harvesting from the ocean has caused populations of large predatory fish to decrease.", "fol": "", "prediction": ["all x y.((CommercialHarvesting(x) & Ocean(y)) -> (CausedPopulationDecrease(x,y) & LargePredatoryFish(x)))"]}
{"id": "entailmentbank_validation_167", "nl": "commercial harvesting from the ocean has caused the populations of tuna to decrease.", "fol": "", "prediction": ["all x y.((CommercialHarvesting(x) & Ocean(y)) -> (DiminishedPopulations(x,y)))"]}
{"id": "entailmentbank_validation_168", "nl": "an organism becoming extinct causes a change in the organism's food web.", "fol": "", "prediction": ["all x.((Organism(x) & Extinct(x)) -> CausesChangeInFoodWeb(x))"]}
{"id": "entailmentbank_validation_169", "nl": "a change in a food web can cause damage to an ecosystem.", "fol": "", "prediction": ["all x y.((ChangeInFoodWeb(x) & Ecosystem(y)) -> CausesDamage(x,y))"]}
{"id": "entailmentbank_validation_170", "nl": "extinctions of organisms can cause damage to an ecosystem by changing the food web.", "fol": "", "prediction": ["all x y.((Organism(x) & Extinction(y)) -> CausesDamage(x,y))"]}
{"id": "entailmentbank_validation_171", "nl": "california is located on the boundary of two tectonic plates.", "fol": "", "prediction": ["all x.(California(x) -> LocatedOnBoundaryOfTwoTectonicPlates(x))"]}
{"id": "entailmentbank_validation_172", "nl": "earthquakes are most common along tectonic plate boundaries.", "fol": "", "prediction": ["all x.(Earthquake(x) -> MostCommonAlongTectonicPlateBoundaries(x))"]}
{"id": "entailmentbank_validation_173", "nl": "massachusetts is not located on the boundary of two tectonic plates.", "fol": "", "prediction": ["all x.(Massachusetts(x) -> -LocatedOnBoundaryOfTwoTectonicPlates(x))"]}
{"id": "entailmentbank_validation_174", "nl": "earthquakes are more likely to occur in california than in massachusetts.", "fol": "", "prediction": ["all x y.((Earthquake(x) & California(y)) -> MoreLikelyToOccur(x,y))"]}
{"id": "entailmentbank_validation_175", "nl": "the oceanic plate is a kind of tectonic plate.", "fol": "", "prediction": ["all x.(OceanPlate(x) -> TectonicPlate(x))"]}
{"id": "entailmentbank_validation_176", "nl": "the subduction of tectonic plates may cause magma to surface from underneath.", "fol": "", "prediction": ["all x.((SubductionOfTectonicPlates(x) & MagmaSurface(x)) -> MayCause(x,MagmaSurface))"]}
{"id": "entailmentbank_validation_177", "nl": "the subduction of an oceanic plate may cause magma to surface from underneath.", "fol": "", "prediction": ["all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> MayCauseMagmaToSurface(x,y))"]}
{"id": "entailmentbank_validation_178", "nl": "magma cools down when it comes to the surface from underneath.", "fol": "", "prediction": ["all x.((Magma(x) & SurfaceFromUnderside(x)) -> CoolsDown(x))"]}
{"id": "entailmentbank_validation_179", "nl": "the subduction of an oceanic plate will cause magma to surface and cool down.", "fol": "", "prediction": ["all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> (MagmaSurface(x,y) & CoolDown(x,y)))"]}
{"id": "entailmentbank_validation_180", "nl": "magma cooling can form volcanic mountains.", "fol": "", "prediction": ["all x.(MagmaCooling(x) -> CanFormVolcanicMountains(x))"]}
{"id": "entailmentbank_validation_181", "nl": "the subduction of an oceanic plate can form volcanic mountians.", "fol": "", "prediction": ["all x.((SubductionOceanPlate(x) & OceanicPlate(x)) -> CanFormVolcanicMountainians(x))"]}
{"id": "entailmentbank_validation_182", "nl": "emitting sulfur dioxide causes acid rain.", "fol": "", "prediction": ["all x.((EmittingSulfurDioxide(x) & AcidRain(x)) -> Causes(x,acid))"]}
{"id": "entailmentbank_validation_183", "nl": "volcanic ash in the atmosphere decreases the temperature by blocking the sun.", "fol": "", "prediction": ["all x y.((VolcanicAsh(x) & Atmosphere(y)) -> DecreasesTemperatureByBlockingSun(x,y))"]}
{"id": "entailmentbank_validation_184", "nl": "an erupting volcano releases sulfur gas and ash into the atmosphere.", "fol": "", "prediction": ["all x.((Volcano(x) & Erupting(x)) -> (ReleasesSulfurGas(x) & ReleasesAsh(x)))"]}
{"id": "entailmentbank_validation_185", "nl": "a volcanic eruption can cause acid rain and decrease the temperature.", "fol": "", "prediction": ["all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & DecreasesTemperature(x)))"]}
{"id": "entailmentbank_validation_186", "nl": "europe was unusally cold and had acid rain in 1783.", "fol": "", "prediction": ["all x.(Europe(x) -> (UnusallyCold(x) & AcidRain(x)))"]}
{"id": "entailmentbank_validation_187", "nl": "a volcanic eruption may have happened to cause the cold weather and acid rain.", "fol": "", "prediction": ["all x.(VolcanicEruption(x) -> (CausedColdWeather(x) & AcidRain(x)))"]}
{"id": "entailmentbank_validation_188", "nl": "the earth's atmosphere is made of 78 percent nitrogen by mass.", "fol": "", "prediction": ["all x.(EarthsAtmosphere(x) -> (MadeOf(x,78) & NitrogenByMass(x)))"]}
{"id": "entailmentbank_validation_189", "nl": "most means over 50% of something.", "fol": "", "prediction": ["all x.(MeansOver50%(x) -> MostMeansOver50%(x))"]}
{"id": "entailmentbank_validation_190", "nl": "the earth's atmosphere is made of mostly nitrogen.", "fol": "", "prediction": ["all x.(EarthsAtmosphere(x) -> MadeOfNitrogen(x))"]}
{"id": "entailmentbank_validation_191", "nl": "oceans cover 70% of the surface of the earth.", "fol": "", "prediction": ["all x.(Ocean(x) -> CoversSurface(x,70))"]}
{"id": "entailmentbank_validation_192", "nl": "oceans cover most of earth's surface.", "fol": "", "prediction": ["all x.(Ocean(x) -> CoversMostOfEarthSurface(x))"]}
{"id": "entailmentbank_validation_193", "nl": "an ocean is a kind of body of water.", "fol": "", "prediction": ["all x.(Ocean(x) -> BodyOfWater(x))"]}
{"id": "entailmentbank_validation_194", "nl": "water covers most of earth's surface.", "fol": "", "prediction": ["all x.(Water(x) -> CoversMostOfEarthSurface(x))"]}
{"id": "entailmentbank_validation_195", "nl": "oceans contain most of earth's water.", "fol": "", "prediction": ["all x.(Ocean(x) -> ContainsMostOfEarthsWater(x))"]}
{"id": "entailmentbank_validation_196", "nl": "water is made of hydrogen and oxygen.", "fol": "", "prediction": ["all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))"]}
{"id": "entailmentbank_validation_197", "nl": "ocean water is made of hydrogen and oxygen.", "fol": "", "prediction": ["all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))"]}
{"id": "entailmentbank_validation_198", "nl": "oxygen is more common than hydrogen on earth.", "fol": "", "prediction": ["all x.(Oxygen(x) -> MoreCommonThanHydrogen(x))"]}
{"id": "entailmentbank_validation_199", "nl": "oxygen is the most common element found in the compounds that make up ocean water.", "fol": "", "prediction": ["all x.(Oxygen(x) -> (MostCommonElement(x) & FoundInCompounds(x) & MakesUpOceanWater(x)))"]}
{"id": "entailmentbank_validation_200", "nl": "if something is permeable, then the water will flow through something easily.", "fol": "", "prediction": ["all x.((Permeable(x) & WaterFlowsEasily(x)) -> Permeable(x))"]}
{"id": "entailmentbank_validation_201", "nl": "soil is permeable.", "fol": "", "prediction": ["all x.(Soil(x) -> Permeable(x))"]}
{"id": "entailmentbank_validation_202", "nl": "water will flow through soil easily.", "fol": "", "prediction": ["all x.(Water(x) -> FlowsEasily(x))"]}
{"id": "entailmentbank_validation_203", "nl": "color of the soil can be used to indicate the soil component.", "fol": "", "prediction": ["all x.((Soil(x) & ColorOfSoil(x)) -> IndicatesSoilComponent(x))"]}
{"id": "entailmentbank_validation_204", "nl": "high humus content causes the soil to be brown.", "fol": "", "prediction": ["all x.(HighHumusContent(x) -> BrownSoil(x))"]}
{"id": "entailmentbank_validation_205", "nl": "brown is a kind of color.", "fol": "", "prediction": ["all x.(Brown(x) -> Color(x))"]}
{"id": "entailmentbank_validation_206", "nl": "if the soil has high humus content, then the soil will be brown in color.", "fol": "", "prediction": ["all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))"]}
{"id": "entailmentbank_validation_207", "nl": "mountains can cause the water in the air mass to condense.", "fol": "", "prediction": ["all x.(Mountain(x) -> CausesWaterCondense(x))"]}
{"id": "entailmentbank_validation_208", "nl": "mountain is a kind of geographic obstacles.", "fol": "", "prediction": ["all x.(Mountain(x) -> GeographicObstacle(x))"]}
{"id": "entailmentbank_validation_209", "nl": "mountain is the geographic obstacle that can cause the water in the air mass to condense.", "fol": "", "prediction": ["all x.(Mountain(x) -> (GeographicObstacle(x) & CausesWaterCondense(x)))"]}
{"id": "entailmentbank_validation_210", "nl": "if something causes a process then that something is required for that process.", "fol": "", "prediction": ["all x y.((CausesProcess(x) & Process(y)) -> Requires(x,y))"]}
{"id": "entailmentbank_validation_211", "nl": "condensation causes clouds to form.", "fol": "", "prediction": ["all x.(Condensation(x) -> CausesCloudsToForm(x))"]}
{"id": "entailmentbank_validation_212", "nl": "condensation is required for clouds to form.", "fol": "", "prediction": ["all x.(Condensation(x) -> CloudsForm(x))"]}
{"id": "entailmentbank_validation_213", "nl": "erosion is when wind transports sediments from one place to another place for a long distance.", "fol": "", "prediction": ["all x y z.((Erosion(x) & Wind(y) & Place(z)) -> TransportsSedimentsForLongDistance(y,z))"]}
{"id": "entailmentbank_validation_214", "nl": "sand dunes / arches are formed by the wind transporting and depositing sand.", "fol": "", "prediction": ["all x.((SandDune(x) & Arches(x)) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))"]}
{"id": "entailmentbank_validation_215", "nl": "wind erosion can form sand dunes and arches.", "fol": "", "prediction": ["all x.(WindErosion(x) -> (FormsSandDunes(x) | FormsArches(x)))"]}
{"id": "entailmentbank_validation_216", "nl": "rain causes erosion.", "fol": "", "prediction": ["all x.(Rain(x) -> CausesErosion(x))"]}
{"id": "entailmentbank_validation_217", "nl": "erosion sometimes decreases the amount of nutrients in soil.", "fol": "", "prediction": ["all x y.((Erosion(x) & Soil(y)) -> DecreasesNutrients(x,y))"]}
{"id": "entailmentbank_validation_218", "nl": "rain can decrease the amount of nutrients in soil.", "fol": "", "prediction": ["all x y.((Rain(x) & Soil(y)) -> DecreasesNutrients(x,y))"]}
{"id": "entailmentbank_validation_219", "nl": "as the availability of water decreases, the environment will become more dry.", "fol": "", "prediction": ["all x.((WaterAvailabilityDecreases(x) & EnvironmentDecreases(x)) -> MoreDry(x))"]}
{"id": "entailmentbank_validation_220", "nl": "drought is when available water decreases in an environment.", "fol": "", "prediction": ["all x.(Drought(x) -> (DecreasesWater(x) & Environment(x)))"]}
{"id": "entailmentbank_validation_221", "nl": "drought causes the environment to be dry.", "fol": "", "prediction": ["all x.(Drought(x) -> EnvironmentDry(x))"]}
{"id": "entailmentbank_validation_222", "nl": "dry conditions can cause fire.", "fol": "", "prediction": ["all x.(DryConditions(x) -> CanCauseFire(x))"]}
{"id": "entailmentbank_validation_223", "nl": "drought may cause wildfires.", "fol": "", "prediction": ["all x.(Drought(x) -> MayCauseWildfires(x))"]}
{"id": "entailmentbank_validation_224", "nl": "a prairie is a kind of ecosystem.", "fol": "", "prediction": ["all x.(Prairie(x) -> Ecosystem(x))"]}
{"id": "entailmentbank_validation_225", "nl": "drought may cause wildfires to a prairie.", "fol": "", "prediction": ["all x y.((Drought(x) & Prairie(y)) -> MayCauseWildfires(x,y))"]}
{"id": "entailmentbank_validation_226", "nl": "a barometer is a kind of instrument.", "fol": "", "prediction": ["all x.(Barometer(x) -> Instrument(x))"]}
{"id": "entailmentbank_validation_227", "nl": "a barometer is used to measure air pressure.", "fol": "", "prediction": ["all x.(Barometer(x) -> MeasuresAirPressure(x))"]}
{"id": "entailmentbank_validation_228", "nl": "a barometer is an instrument used to measure air pressure.", "fol": "", "prediction": ["all x.(Barometer(x) -> MeasuresAirPressure(x))"]}
{"id": "entailmentbank_validation_229", "nl": "a property is a kind of information.", "fol": "", "prediction": ["all x.(Property(x) -> Information(x))"]}
{"id": "entailmentbank_validation_230", "nl": "temperature is a property of weather.", "fol": "", "prediction": ["all x.(Temperature(x) -> WeatherProperty(x))"]}
{"id": "entailmentbank_validation_231", "nl": "temperature is a kindof information about weather.", "fol": "", "prediction": ["all x.(Temperature(x) -> WeatherInformation(x))"]}
{"id": "entailmentbank_validation_232", "nl": "a thermometer is used to measure temperature.", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresTemperature(x))"]}
{"id": "entailmentbank_validation_233", "nl": "a thermometer is used to measure the information about weather on temperature.", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresWeatherInformation(x))"]}
{"id": "entailmentbank_validation_234", "nl": "wind direction is a property of weather.", "fol": "", "prediction": ["all x.(WindDirection(x) -> WeatherProperty(x))"]}
{"id": "entailmentbank_validation_235", "nl": "wind direction is a kind of information about weather.", "fol": "", "prediction": ["all x.(WindDirection(x) -> WeatherInformation(x))"]}
{"id": "entailmentbank_validation_236", "nl": "a station model is used for displaying information about weather in a particular point and time.", "fol": "", "prediction": ["all x y.((StationModel(x) & PointAndTime(y)) -> DisplaysWeatherInformation(x,y))"]}
{"id": "entailmentbank_validation_237", "nl": "wind direction in a particular point and time is displayed in a station model.", "fol": "", "prediction": ["all x y.((WindDirection(x) & Point(y) & Time(y)) -> DisplayedInStationModel(x,y))"]}
{"id": "entailmentbank_validation_238", "nl": "sleet is a kind of precipitation.", "fol": "", "prediction": ["all x.(Sleet(x) -> Precipitation(x))"]}
{"id": "entailmentbank_validation_239", "nl": "hail is a kind of precipitation.", "fol": "", "prediction": ["all x.(Hail(x) -> Precipitation(x))"]}
{"id": "entailmentbank_validation_240", "nl": "hail and sleet are different kinds of precipitation.", "fol": "", "prediction": ["all x.((Hail(x) | Sleet(x)) -> Precipitation(x))"]}
{"id": "entailmentbank_validation_241", "nl": "when one kind of energy changes into another kind of energy, the total amount of energy is constant.", "fol": "", "prediction": ["all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> TotalAmountOfEnergyConstant(x))"]}
{"id": "entailmentbank_validation_242", "nl": "energy transformation means one kind of energy changes into another kind of energy.", "fol": "", "prediction": ["all x y.((EnergyTransformation(x) & Energy(y)) -> ChangesInto(x,y))"]}
{"id": "entailmentbank_validation_243", "nl": "when energy transformation happens, the total amount of energy is constant.", "fol": "", "prediction": ["all x.((EnergyTransformation(x) & EnergyAmountConstant(x)) -> EnergyTransformation(x))"]}
{"id": "entailmentbank_validation_244", "nl": "energy transformation means energy conversion.", "fol": "", "prediction": ["all x.(EnergyTransformation(x) -> EnergyConversion(x))"]}
{"id": "entailmentbank_validation_245", "nl": "when energy conversion happens, the total amount of energy is constant.", "fol": "", "prediction": ["all x.((EnergyConversion(x) & Happens(x)) -> TotalEnergyConstant(x))"]}
{"id": "entailmentbank_validation_246", "nl": "solid is a kind of state of matter.", "fol": "", "prediction": ["all x.(Solid(x) -> StateOfMatter(x))"]}
{"id": "entailmentbank_validation_247", "nl": "heat energy can change the state of matter.", "fol": "", "prediction": ["all x.(HeatEnergy(x) -> ChangesStateOfMatter(x))"]}
{"id": "entailmentbank_validation_248", "nl": "liquid is a kind of state of matter.", "fol": "", "prediction": ["all x.(Liquid(x) -> StateOfMatter(x))"]}
{"id": "entailmentbank_validation_249", "nl": "heat can change a substance from a solid to liquid.", "fol": "", "prediction": ["all x y.((Substance(x) & Heat(y)) -> CanChangeFromSolidToLiquid(x,y))"]}
{"id": "entailmentbank_validation_250", "nl": "melting means a substance changes from a solid into a liquid by increasing heat energy.", "fol": "", "prediction": ["all x y.((Substance(x) & Solid(y) & Liquid(y)) -> ChangesByIncreasedHeatEnergy(x,y))"]}
{"id": "entailmentbank_validation_251", "nl": "heat can cause a solid substance to melt.", "fol": "", "prediction": ["all x y.((SolidSubstance(x) & Heat(y)) -> Melts(x,y))"]}
{"id": "entailmentbank_validation_252", "nl": "ice is a kind of solid.", "fol": "", "prediction": ["all x.(Ice(x) -> Solid(x))"]}
{"id": "entailmentbank_validation_253", "nl": "heat can cause ice to melt.", "fol": "", "prediction": ["all x.(Heat(x) -> CausesIceToMelt(x))"]}
{"id": "entailmentbank_validation_254", "nl": "the sun is a source of radiation / heat called sunlight.", "fol": "", "prediction": ["all x.(Sun(x) -> (SourceOfRadiation(x) & SourceOfHeat(x)))"]}
{"id": "entailmentbank_validation_255", "nl": "the heat energy from the sunlight cause ice to melt.", "fol": "", "prediction": ["all x y.((HeatEnergy(x) & Sunlight(y)) -> CausesIceToMelt(x,y))"]}
{"id": "entailmentbank_validation_256", "nl": "a wagon is a kind of vehicle.", "fol": "", "prediction": ["all x.(Wagon(x) -> Vehicle(x))"]}
{"id": "entailmentbank_validation_257", "nl": "a vehicle is a kind of object.", "fol": "", "prediction": ["all x.(Vehicle(x) -> Object(x))"]}
{"id": "entailmentbank_validation_258", "nl": "a wagon is a kind of object.", "fol": "", "prediction": ["all x.(Wagon(x) -> Object(x))"]}
{"id": "entailmentbank_validation_259", "nl": "rolling is a kind of motion.", "fol": "", "prediction": ["all x.(Rolling(x) -> Motion(x))"]}
{"id": "entailmentbank_validation_260", "nl": "a wagon rolling is an example of an object in motion.", "fol": "", "prediction": ["all x.((WagonRolling(x) & ObjectInMotion(x)) -> ExampleOf(x,y))"]}
{"id": "entailmentbank_validation_261", "nl": "an example of mechanical energy is an object in motion.", "fol": "", "prediction": ["all x.(MechanicalEnergy(x) -> ObjectInMotion(x))"]}
{"id": "entailmentbank_validation_262", "nl": "a wagon rolling is an example of mechanical energy.", "fol": "", "prediction": ["all x.(WagonRolling(x) -> MechanicalEnergy(x))"]}
{"id": "entailmentbank_validation_263", "nl": "loud means high in sound energy / sound intensity.", "fol": "", "prediction": ["all x.(Loud(x) -> (HighSoundEnergy(x) & HighSoundIntensity(x)))"]}
{"id": "entailmentbank_validation_264", "nl": "sound is a kind of energy.", "fol": "", "prediction": ["all x.(Sound(x) -> Energy(x))"]}
{"id": "entailmentbank_validation_265", "nl": "a classroom is a kind of area.", "fol": "", "prediction": ["all x.(Classroom(x) -> Area(x))"]}
{"id": "entailmentbank_validation_266", "nl": "the sound in a loud class room is an example of high sound energy.", "fol": "", "prediction": ["all x.((Sound(x) & LoudClassRoom(x)) -> HighSoundEnergy(x))"]}
{"id": "entailmentbank_validation_267", "nl": "if an object / something is in the sunlight then that object / that something will absorb solar energy.", "fol": "", "prediction": ["all x.((Object(x) & Something(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_validation_268", "nl": "a sidewalk is located outside.", "fol": "", "prediction": ["all x.(Standard(x) -> LocatedOutside(x))"]}
{"id": "entailmentbank_validation_269", "nl": "a sidewalk located outside will absorb solar energy.", "fol": "", "prediction": ["all x.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_validation_270", "nl": "absorbing sunlight causes objects to heat.", "fol": "", "prediction": ["all x.(AbsorbingSunlight(x) -> CausesHeat(x))"]}
{"id": "entailmentbank_validation_271", "nl": "the sidewalk located outsie will heat.", "fol": "", "prediction": ["all x.((Standard(x) & LocatedOutsie(x)) -> Heats(x))"]}
{"id": "entailmentbank_validation_272", "nl": "if something heat, it will feel hot.", "fol": "", "prediction": ["all x.(Heat(x) -> FeelHot(x))"]}
{"id": "entailmentbank_validation_273", "nl": "the sidewalk located outside will feel hot.", "fol": "", "prediction": ["all x.((Standard(x) & LocatedOutside(x)) -> FeelsHot(x))"]}
{"id": "entailmentbank_validation_274", "nl": "there is a person in a dark room looking out a window in the day.", "fol": "", "prediction": ["exists x y.(Person(x) & DarkRoom(y) & LooksOutWindow(x,y))"]}
{"id": "entailmentbank_validation_275", "nl": "if something is in a dark place, then that something will not reflect enough light to be seen.", "fol": "", "prediction": ["all x.((DarkPlace(x) & In(x,DarkPlace)) -> -ReflectsEnoughLightToBeSeen(x))"]}
{"id": "entailmentbank_validation_276", "nl": "the person in the dark room will not reflect enough light to be seen.", "fol": "", "prediction": ["all x.(DarkRoom(x) -> -ReflectsEnoughLightToBeSeen(x))"]}
{"id": "entailmentbank_validation_277", "nl": "there is a person outside in the day looking into the dark room.", "fol": "", "prediction": ["exists x.(PersonOutside(x) & Day(x) & LooksIntoDarkRoom(x))"]}
{"id": "entailmentbank_validation_278", "nl": "the person outside cannot see the person in the dark room.", "fol": "", "prediction": ["all x y.((Person(x) & Outside(x) & DarkRoom(y)) -> -SeesIn(x,y))"]}
{"id": "entailmentbank_validation_279", "nl": "a prism refracts light.", "fol": "", "prediction": ["all x.(Prism(x) -> RefractsLight(x))"]}
{"id": "entailmentbank_validation_280", "nl": "refracting sunlight / light causes sunlight / light to split into different colors.", "fol": "", "prediction": ["all x y.((RefractingSunlight(x) & Sunlight(y)) -> CausesSunlightToSplitIntoDifferentColors(x,y))"]}
{"id": "entailmentbank_validation_281", "nl": "a prism can refract light and split the light into different colors.", "fol": "", "prediction": ["all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoDifferentColors(x)))"]}
{"id": "entailmentbank_validation_282", "nl": "white light is made of all colors of visible light combined.", "fol": "", "prediction": ["all x.(WhiteLight(x) -> (ColorsOfVisibleLight(x) & ColorsOfVisibleLight(x)))"]}
{"id": "entailmentbank_validation_283", "nl": "a prism can refract white light and split the light into all colors of visible light.", "fol": "", "prediction": ["all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColors(x)))"]}
{"id": "entailmentbank_validation_284", "nl": "a vacuum has no matter in it.", "fol": "", "prediction": ["all x.(Vacuum(x) -> NoMatterInVacuum(x))"]}
{"id": "entailmentbank_validation_285", "nl": "sound requires matter to travel.", "fol": "", "prediction": ["all x.(Sound(x) -> RequiresMatterToTravel(x))"]}
{"id": "entailmentbank_validation_286", "nl": "sound cannot travel through a vacuum.", "fol": "", "prediction": ["all x.(Sound(x) -> -TravelsThroughVacuum(x))"]}
{"id": "entailmentbank_validation_287", "nl": "metal is a thermal / thermal energy conductor.", "fol": "", "prediction": ["all x.(Metal(x) -> ThermalEnergyConductor(x))"]}
{"id": "entailmentbank_validation_288", "nl": "a spoon sometimes is made of metal.", "fol": "", "prediction": ["exists x.(Spoon(x) & MadeOfMetal(x))"]}
{"id": "entailmentbank_validation_289", "nl": "a metal spoon is a thermal conductor.", "fol": "", "prediction": ["all x.(MetalSpoon(x) -> ThermalConductor(x))"]}
{"id": "entailmentbank_validation_290", "nl": "a hot substance is a source of heat.", "fol": "", "prediction": ["all x.(HotSubstance(x) -> SourceOfHeat(x))"]}
{"id": "entailmentbank_validation_291", "nl": "a metal spoon is placed in a pot of hot soup.", "fol": "", "prediction": ["all x y.((MetalSpoon(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))"]}
{"id": "entailmentbank_validation_292", "nl": "the hot soup will be a source of heat for the metal spoon.", "fol": "", "prediction": ["all x.(HotSoup(x) -> HeatSourceForMetalSpoon(x))"]}
{"id": "entailmentbank_validation_293", "nl": "if a thermal conductor is exposed to a source of heat, then thermal conduction will make the thermal conductor become hot.", "fol": "", "prediction": ["all x y.((ThermalConductor(x) & ExposedToHeat(x)) -> ThermalConductionMakesThermalConductorHot(x))"]}
{"id": "entailmentbank_validation_294", "nl": "the metal spoon will be heated up by thermal conduction.", "fol": "", "prediction": ["all x.(MetalSpoon(x) -> HeatsUpByThermalConduction(x))"]}
{"id": "entailmentbank_validation_295", "nl": "thermal conduction is when heat flows from warmer object to cooler object.", "fol": "", "prediction": ["all x.(ThermalConduction(x) -> HeatFlowsFromWarmerObjectToCoolerObject(x))"]}
{"id": "entailmentbank_validation_296", "nl": "thermal conduction is when materials conduct heat through those materials through collision of particles.", "fol": "", "prediction": ["all x y.((Material(x) & Material(y) & ConductsHeat(x,y)) -> CollisionOfParticles(x))"]}
{"id": "entailmentbank_validation_297", "nl": "thermal conduction is a heat exchange process involving the collision of particles.", "fol": "", "prediction": ["all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCollisionOfParticles(x)))"]}
{"id": "entailmentbank_validation_298", "nl": "longitudinal waves travel through pattern of compressions and rarefactions.", "fol": "", "prediction": ["all x.(LanguageWaves(x) -> (TravelsThroughCompressions(x) & TravelsThroughRarefactions(x)))"]}
{"id": "entailmentbank_validation_299", "nl": "compression waves produces compressions and rarefactions.", "fol": "", "prediction": ["all x.(CompressionWaves(x) -> (ProducesCompressions(x) & ProducesRarefactions(x)))"]}
{"id": "entailmentbank_validation_300", "nl": "longitudinal waves are also called compression waves.", "fol": "", "prediction": ["all x.(LanguageWaves(x) -> CompressionWaves(x))"]}
{"id": "entailmentbank_validation_301", "nl": "longitudinal waves cause object to move in the same direction of the wave.", "fol": "", "prediction": ["all x y.((LanguageWaves(x) & Object(y)) -> MovesInSameDirection(y,x))"]}
{"id": "entailmentbank_validation_302", "nl": "compression waves cause object to move in the same direction of the wave.", "fol": "", "prediction": ["all x y.((CompressionWaves(x) & Object(y)) -> MovesInSameDirection(y,x))"]}
{"id": "entailmentbank_validation_303", "nl": "a surface is a part of an object.", "fol": "", "prediction": ["all x y.((Surface(x) & Object(y)) -> PartOf(x,y))"]}
{"id": "entailmentbank_validation_304", "nl": "friction occurs when two object's surfaces move against each other.", "fol": "", "prediction": ["all x y.((Object(x) & Surface(y) & MoveAgainst(x,y)) -> FrictionOccurs(x))"]}
{"id": "entailmentbank_validation_305", "nl": "skidding is when the tire of a vehicle slides on the road without rotating.", "fol": "", "prediction": ["all x y.((Vehicle(x) & Tire(y) & SlidesOnRoad(y,x)) -> Skidding(x))"]}
{"id": "entailmentbank_validation_306", "nl": "a tire is a kind of object.", "fol": "", "prediction": ["all x.(Tire(x) -> Object(x))"]}
{"id": "entailmentbank_validation_307", "nl": "skidding causes friction between the tire and the road.", "fol": "", "prediction": ["all x y.((Skidding(x) & Tire(y)) -> CausesFriction(x,y))"]}
{"id": "entailmentbank_validation_308", "nl": "friction causes the temperature of an object to increase.", "fol": "", "prediction": ["all x y.((Friction(x) & Object(y)) -> CausesTemperatureToIncrease(x,y))"]}
{"id": "entailmentbank_validation_309", "nl": "friction causes the temperature of the tire to increase.", "fol": "", "prediction": ["all x.(Friction(x) -> CausesTemperatureToIncrease(x))"]}
{"id": "entailmentbank_validation_310", "nl": "if the tire overheats, some chemical in the tire will vaporized.", "fol": "", "prediction": ["all x.((Tire(x) & Overheats(x)) -> ChemicalInTire(x))"]}
{"id": "entailmentbank_validation_311", "nl": "if the temperature of the tire keeps increasing, the tire will overheat.", "fol": "", "prediction": ["all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheats(x))"]}
{"id": "entailmentbank_validation_312", "nl": "if the temperature of the tire keeps increasing, some chemical in the tire will be vaporized.", "fol": "", "prediction": ["all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Vaporized(x))"]}
{"id": "entailmentbank_validation_313", "nl": "friction causes some chemicals in the tire to vaporize.", "fol": "", "prediction": ["all x y.((Tire(x) & Chemical(y)) -> CausesToVaporize(x,y))"]}
{"id": "entailmentbank_validation_314", "nl": "vaporizing a substance causes smoke.", "fol": "", "prediction": ["all x y.((Substance(x) & Vaporizing(x,y)) -> CausesSmoke(x))"]}
{"id": "entailmentbank_validation_315", "nl": "friction causes the tire to produce smoke.", "fol": "", "prediction": ["all x.(Friction(x) -> CausesTireToProduceSmoke(x))"]}
{"id": "entailmentbank_validation_316", "nl": "as the friction increases, the resistance on the object to move will increase.", "fol": "", "prediction": ["all x.((FrictionIncreases(x) & IncreasesResistance(x)) -> MovesObject(x))"]}
{"id": "entailmentbank_validation_317", "nl": "as roughness of a surface increases, friction will increase.", "fol": "", "prediction": ["all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesFriction(x))"]}
{"id": "entailmentbank_validation_318", "nl": "as the roughness of a surface increases, the resistance on the object to move will increase.", "fol": "", "prediction": ["all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesResistanceOnObjectToMove(x))"]}
{"id": "entailmentbank_validation_319", "nl": "carpet has a rough surface.", "fol": "", "prediction": ["all x.(Carpet(x) -> RoughSurface(x))"]}
{"id": "entailmentbank_validation_320", "nl": "wood has a smooth surface.", "fol": "", "prediction": ["all x.(Wood(x) -> SmoothSurface(x))"]}
{"id": "entailmentbank_validation_321", "nl": "the resistance on the object to move on the carpet will be larger than on the wood.", "fol": "", "prediction": ["all x y.((Object(x) & Carpet(y) & Wood(y)) -> LargerResistance(x,y))"]}
{"id": "entailmentbank_validation_322", "nl": "a toy car is a kind of object.", "fol": "", "prediction": ["all x.(ToyCar(x) -> Object(x))"]}
{"id": "entailmentbank_validation_323", "nl": "the resistance on the toy car to move on the carpet is larger than on the wood.", "fol": "", "prediction": ["all x y.((ToyCar(x) & Carpet(y) & Wood(y)) -> LargerResistance(x,y))"]}
{"id": "entailmentbank_validation_324", "nl": "as the resistance on the object to move increase, the object will move slower.", "fol": "", "prediction": ["all x.((Object(x) & IncreasedResistance(x)) -> MovesSlower(x))"]}
{"id": "entailmentbank_validation_325", "nl": "the toy car will move slower on the carpet than on the wood.", "fol": "", "prediction": ["all x y.((ToyCar(x) & Carpet(y)) -> MovesSlowerOn(x,y))"]}
{"id": "entailmentbank_validation_326", "nl": "a glider is a kind of object.", "fol": "", "prediction": ["all x.(Glider(x) -> Object(x))"]}
{"id": "entailmentbank_validation_327", "nl": "flying an object requires lift to oppose the object's weight.", "fol": "", "prediction": ["all x y.((Flying(x) & Object(y)) -> RequiresLiftToOpposeWeight(x,y))"]}
{"id": "entailmentbank_validation_328", "nl": "flying a glider requires lift to oppose the weight of the glider.", "fol": "", "prediction": ["all x y.((Glider(x) & Glider(y)) -> RequiresLiftToOpposeWeight(x,y))"]}
{"id": "entailmentbank_validation_329", "nl": "pedals are part of a bicycle for pedalling.", "fol": "", "prediction": ["all x.(Pedals(x) -> PartOfBicycle(x))"]}
{"id": "entailmentbank_validation_330", "nl": "pedalling a bicycle requires moving the pedals in a circular motion.", "fol": "", "prediction": ["all x y.((Bicycle(x) & Bicycle(y)) -> (MovesPedalsInCircularMotion(x,y)))"]}
{"id": "entailmentbank_validation_331", "nl": "the pedals are the part of a bicycle that moves in circular motion.", "fol": "", "prediction": ["all x.(Pedals(x) -> MovesInCircularMotion(x))"]}
{"id": "entailmentbank_validation_332", "nl": "north / northward is a kind of direction.", "fol": "", "prediction": ["all x.((North(x) & Northward(x)) -> Direction(x))"]}
{"id": "entailmentbank_validation_333", "nl": "velocity is a measure of a speed in a direction.", "fol": "", "prediction": ["all x.(Velocity(x) -> MeasuresSpeedInDirection(x))"]}
{"id": "entailmentbank_validation_334", "nl": "40 m/s describes the speed of an object.", "fol": "", "prediction": ["all x.((Object(x) & Speed(x,40)) -> Description(x,40))"]}
{"id": "entailmentbank_validation_335", "nl": "40 m/s north describes the velocity of an object.", "fol": "", "prediction": ["all x.((40M/sNorth(x) & Object(y)) -> DescribesVelocity(x,y))"]}
{"id": "entailmentbank_validation_336", "nl": "inherited characteristics can deterimne the structure of an organism's anatomy.", "fol": "", "prediction": ["all x.((ErasedCharacteristics(x) & Organism(y)) -> DeterimneStructure(x,y))"]}
{"id": "entailmentbank_validation_337", "nl": "the structure of an organism's anatomy is used to classify the organism into the appropriate taxonomic rank.", "fol": "", "prediction": ["all x y.((Organism(x) & AnatomicStructure(y)) -> ClassifiesIntoAppropriateTaxonomicRank(x,y))"]}
{"id": "entailmentbank_validation_338", "nl": "inherited characteristics can be used to classify an oganism into the apropriate taxonomic rank.", "fol": "", "prediction": ["all x y.((EarnedCharacteristics(x) & Ogoninism(y)) -> ClassifiesIntoApropriateTaxonomicRank(x,y))"]}
{"id": "entailmentbank_validation_339", "nl": "genes are able to determine the inherited characteristics of a living thing.", "fol": "", "prediction": ["all x y.((Gene(x) & LivingThing(y)) -> DeterminesEarnedCharacteristics(x,y))"]}
{"id": "entailmentbank_validation_340", "nl": "genes can be used for classifying organisms.", "fol": "", "prediction": ["all x.(Gene(x) -> ClassifiesOrganisms(x))"]}
{"id": "entailmentbank_validation_341", "nl": "genes are made of dna.", "fol": "", "prediction": ["all x.(Gene(x) -> MadeOfDna(x))"]}
{"id": "entailmentbank_validation_342", "nl": "dna can be used for classifying organisms.", "fol": "", "prediction": ["all x.(Dna(x) -> ClassifiesOrganisms(x))"]}
{"id": "entailmentbank_validation_343", "nl": "dna is a kind of molecule.", "fol": "", "prediction": ["all x.(Dna(x) -> Molecule(x))"]}
{"id": "entailmentbank_validation_344", "nl": "molecules are used for classifying organisms.", "fol": "", "prediction": ["all x.(Molecule(x) -> ClassifiesOrganisms(x))"]}
{"id": "entailmentbank_validation_345", "nl": "a frog is a kind of amphibian.", "fol": "", "prediction": ["all x.(Frog(x) -> Amphibian(x))"]}
{"id": "entailmentbank_validation_346", "nl": "a tadpole is a kind of young / baby frog.", "fol": "", "prediction": ["all x.(Tadpole(x) -> (YoungFrog(x) | BabyFrog(x)))"]}
{"id": "entailmentbank_validation_347", "nl": "a tadpole is a kind of young amphibian.", "fol": "", "prediction": ["all x.(Tadpole(x) -> YoungAmphibian(x))"]}
{"id": "entailmentbank_validation_348", "nl": "metamorphosis is when an amphibian changes from an immature form to an adult form.", "fol": "", "prediction": ["all x.(Metamorphosis(x) -> (AmphibianChange(x) & ImmatureForm(x) & AdultForm(x)))"]}
{"id": "entailmentbank_validation_349", "nl": "an example of metamorphosis is when a tadpole changes from a an immature form to and adult form.", "fol": "", "prediction": ["all x.(Metamorphosis(x) -> (TadpoleChangesFromImmatureToAdult(x)))"]}
{"id": "entailmentbank_validation_350", "nl": "the immature form of a frog is called a tadpole.", "fol": "", "prediction": ["all x.((Frog(x) & ImmatureForm(x)) -> Tadpole(x))"]}
{"id": "entailmentbank_validation_351", "nl": "the adult form of a tadpole is called a frog.", "fol": "", "prediction": ["all x.((Tadpole(x) & AdultForm(x)) -> Frog(x))"]}
{"id": "entailmentbank_validation_352", "nl": "the imature form of a frog is called a tadpole and the adult form of a tadpole is called a frog.", "fol": "", "prediction": ["all x y.((Frog(x) & ImatureForm(x) & AdultForm(y)) -> (Tadpole(x) & Frog(y)))"]}
{"id": "entailmentbank_validation_353", "nl": "an example of metamorphosis is when a tadpole changes from a tadpole into a frog.", "fol": "", "prediction": ["all x.(Metamorphosis(x) -> (TadpoleChangesFromTadpoleToFrog(x)))"]}
{"id": "entailmentbank_validation_354", "nl": "reproduction occurs during adulthood.", "fol": "", "prediction": ["all x.(Reproduction(x) -> Adulthood(x))"]}
{"id": "entailmentbank_validation_355", "nl": "an example of reproduction is laying eggs.", "fol": "", "prediction": ["all x.(Reproduction(x) -> LayingEggs(x))"]}
{"id": "entailmentbank_validation_356", "nl": "laying eggs occurs during adulthood.", "fol": "", "prediction": ["all x.(LayingEggs(x) -> Adulthood(x))"]}
{"id": "entailmentbank_validation_357", "nl": "adulthood is a stage in the life cycle process.", "fol": "", "prediction": ["all x.(Adult(x) -> StageInLifeCycleProcess(x))"]}
{"id": "entailmentbank_validation_358", "nl": "laying eggs occurs during the adult stage in the life cycle.", "fol": "", "prediction": ["all x.((Egg(x) & AdultStage(x)) -> Lays(x))"]}
{"id": "entailmentbank_validation_359", "nl": "a female insect lays eggs.", "fol": "", "prediction": ["all x.(FemaleInsect(x) -> LaysEggs(x))"]}
{"id": "entailmentbank_validation_360", "nl": "a female insect lays eggs during the adult stage of an insect's life cycle.", "fol": "", "prediction": ["all x y.((FemaleInsect(x) & AdultStage(y)) -> LaysEggs(x,y))"]}
{"id": "entailmentbank_validation_361", "nl": "a cat is a kind of mammal.", "fol": "", "prediction": ["all x.(Cat(x) -> Mammal(x))"]}
{"id": "entailmentbank_validation_362", "nl": "mammals give birth to live young.", "fol": "", "prediction": ["all x.(Mammal(x) -> GivesBirthToLiveYoung(x))"]}
{"id": "entailmentbank_validation_363", "nl": "a cat gives birth to live young.", "fol": "", "prediction": ["all x.(Cat(x) -> GivesBirthToLiveYoung(x))"]}
{"id": "entailmentbank_validation_364", "nl": "to give birth to live young means to undergo live birth.", "fol": "", "prediction": ["all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> LiveBirth(x))"]}
{"id": "entailmentbank_validation_365", "nl": "a cat undergoes live birth.", "fol": "", "prediction": ["all x.(Cat(x) -> UndergoesLiveBirth(x))"]}
{"id": "entailmentbank_validation_366", "nl": "live birth means developing inside the mother instead of an egg.", "fol": "", "prediction": ["all x y.((LiveBirth(x) & Mother(y)) -> (DevelopsInside(x,y) & -Egg(y)))"]}
{"id": "entailmentbank_validation_367", "nl": "a cat develops inside its mother.", "fol": "", "prediction": ["all x.(Cat(x) -> DevelopsInsideMother(x))"]}
{"id": "entailmentbank_validation_368", "nl": "the opposite of the same is different.", "fol": "", "prediction": ["all x.((OppositeOfSame(x) & OppositeOfSame(x)) -> Different(x))"]}
{"id": "entailmentbank_validation_369", "nl": "two birds are not in the same taxonomic family.", "fol": "", "prediction": ["all x.(Bird(x) -> -TaxinomianFamily(x))"]}
{"id": "entailmentbank_validation_370", "nl": "two birds are in different taxonomic families.", "fol": "", "prediction": ["all x.(Bird(x) -> DifferentTaxonomicFamilies(x))"]}
{"id": "entailmentbank_validation_371", "nl": "environments with similar characteristics place similar environmental pressures on the organisms in them.", "fol": "", "prediction": ["all x y.((Environment(x) & SimilarCharacteristics(x) & Organism(y)) -> PlacesSameEnvironmentalPressures(x,y))"]}
{"id": "entailmentbank_validation_372", "nl": "two birds live in environments with similar characteristics.", "fol": "", "prediction": ["all x.(Bird(x) -> LivesInEnvironment(x,y))"]}
{"id": "entailmentbank_validation_373", "nl": "two birds developed under similar environmental pressures.", "fol": "", "prediction": ["all x.(Bird(x) -> (DevelopedUnderSameEnvironmentalPressures(x) & SimilarEnvironmentalPressures(x)))"]}
{"id": "entailmentbank_validation_374", "nl": "two birds developed thousands of miles apart.", "fol": "", "prediction": ["all x.(Bird(x) -> (DevelopedThousandsOfMilesApart(x) & Bird(x)))"]}
{"id": "entailmentbank_validation_375", "nl": "if two things are thousands of miles apart then those two things are separate from each other.", "fol": "", "prediction": ["all x.((TwoThings(x) & TausendsOfMilesApart(x)) -> SeparateFromEachOther(x))"]}
{"id": "entailmentbank_validation_376", "nl": "two birds developed separate from each other.", "fol": "", "prediction": ["all x.(Bird(x) -> (DevelopedSeparateFrom(x,y) & Bird(y)))"]}
{"id": "entailmentbank_validation_377", "nl": "two birds developed in separate environments under similar environmental pressures.", "fol": "", "prediction": ["all x.(Bird(x) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))"]}
{"id": "entailmentbank_validation_378", "nl": "two birds from different taxonomic families developed in separate environments under similar environmental pressures.", "fol": "", "prediction": ["all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x,y) & TaxonomicFamily(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressures(x,y)))"]}
{"id": "entailmentbank_validation_379", "nl": "convergent evolution is when two species in different taxonomic families develop in different places under similar environmental pressures.", "fol": "", "prediction": ["all x y.((Species(x) & TaxonomicFamily(y) & Different(x,y)) -> ConvergentEvolution(x))"]}
{"id": "entailmentbank_validation_380", "nl": "an example of convergent evolution is two birds from different taxonomic families developing in separate environments under similar environmental pressures.", "fol": "", "prediction": ["all x.((Bird(x) & TaxonomicFamily(x) & TaxonomicFamily(x) & SeparateEnvironments(x) & SimilarEnvironmentalPressures(x)) -> ConvergentEvolution(x))"]}
{"id": "entailmentbank_validation_381", "nl": "winter is a kind of season.", "fol": "", "prediction": ["all x.(Winter(x) -> Season(x))"]}
{"id": "entailmentbank_validation_382", "nl": "seasons cause change to the environment.", "fol": "", "prediction": ["all x.(Season(x) -> CausesChangeToEnvironment(x))"]}
{"id": "entailmentbank_validation_383", "nl": "the winter season can cause change to the environment.", "fol": "", "prediction": ["all x.(WinterSeason(x) -> CanCauseChangeToEnvironment(x))"]}
{"id": "entailmentbank_validation_384", "nl": "usually plants die or become dormant during the winter.", "fol": "", "prediction": ["all x.(Plant(x) -> (Dies(x) | Dormant(x)))"]}
{"id": "entailmentbank_validation_385", "nl": "an example of a seasonal change is plants dying or becoming dormant in the winter.", "fol": "", "prediction": ["all x.(SeasonalChange(x) -> (PlantsDeriveInWinter(x) | PlantsBecomeDormantInWinter(x)))"]}
{"id": "entailmentbank_validation_386", "nl": "an animal requires enough nutrients to survive.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresEnoughNutrients(x))"]}
{"id": "entailmentbank_validation_387", "nl": "eating food is used to get nutrients by animals.", "fol": "", "prediction": ["all x y.((EatingFood(x) & Animal(y)) -> GetsNutrients(x,y))"]}
{"id": "entailmentbank_validation_388", "nl": "an animal needs to eat food for nutrients.", "fol": "", "prediction": ["all x.(Animal(x) -> NeedsToEatFoodForNutrients(x))"]}
{"id": "entailmentbank_validation_389", "nl": "plants are a source of food for animals.", "fol": "", "prediction": ["all x.(Plant(x) -> SourceOfFood(x))"]}
{"id": "entailmentbank_validation_390", "nl": "an animal can eat plants for nutrients.", "fol": "", "prediction": ["all x.(Animal(x) -> CanEatPlants(x))"]}
{"id": "entailmentbank_validation_391", "nl": "an example of seasonal change is some animals' food dying in the winter.", "fol": "", "prediction": ["all x.((Animal(x) & WinterFood(x)) -> SeasonalChange(x))"]}
{"id": "entailmentbank_validation_392", "nl": "an example of preparing is storing something for use later.", "fol": "", "prediction": ["all x.(Preparing(x) -> StoresForUseLater(x))"]}
{"id": "entailmentbank_validation_393", "nl": "if an animal relies on plants for food then that animal must store enough food to last through the winter.", "fol": "", "prediction": ["all x.((Animal(x) & ReliesOnPlants(x)) -> StoresEnoughFoodForWinter(x))"]}
{"id": "entailmentbank_validation_394", "nl": "an example of preparing is an animal storing food to last through the winter.", "fol": "", "prediction": ["all x.(Preparing(x) -> (Animal(x) & StoresFood(x) & LastsThroughWinter(x)))"]}
{"id": "entailmentbank_validation_395", "nl": "an example of preparing for seasonal change is an animal storing food for the winter.", "fol": "", "prediction": ["all x.((Animal(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))"]}
{"id": "entailmentbank_validation_396", "nl": "a squirrel is a kind of animal.", "fol": "", "prediction": ["all x.(Squirrel(x) -> Animal(x))"]}
{"id": "entailmentbank_validation_397", "nl": "an example of preparing for seasonal change is a squirrel storing food for the winter.", "fol": "", "prediction": ["all x.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))"]}
{"id": "entailmentbank_validation_398", "nl": "nut is a kind of food.", "fol": "", "prediction": ["all x.(Nut(x) -> Food(x))"]}
{"id": "entailmentbank_validation_399", "nl": "an example of preparing for seasonal change is an squirrel storing nuts for the winter.", "fol": "", "prediction": ["all x.((Squirrel(x) & StoresNutsForWinter(x)) -> PreparesForSeasonalChange(x))"]}
{"id": "entailmentbank_validation_400", "nl": "an animal requires warmth for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresWarmthForSurvival(x))"]}
{"id": "entailmentbank_validation_401", "nl": "winter has cold temperatures / weather.", "fol": "", "prediction": ["all x.(Winter(x) -> (ColdTemperatures(x) & ColdWeather(x)))"]}
{"id": "entailmentbank_validation_402", "nl": "some animals must move to warmer climates in the winter.", "fol": "", "prediction": ["exists x.(Animal(x) & MovesToWarmerClimates(x))"]}
{"id": "entailmentbank_validation_403", "nl": "migration is when animals move themselves from a cooler climate to a warmer climate for the winter.", "fol": "", "prediction": ["all x y.((Animal(x) & CoolerClimate(y) & WarmerClimate(y)) -> MigratesForWinter(x,y))"]}
{"id": "entailmentbank_validation_404", "nl": "an example of migration is moving to a warmer climate in the winter.", "fol": "", "prediction": ["all x.(Migratation(x) -> (MovingToWarmerClimate(x) & Winter(x)))"]}
{"id": "entailmentbank_validation_405", "nl": "some birds fly south for the winter.", "fol": "", "prediction": ["exists x.(Bird(x) & FlySouthForWinter(x))"]}
{"id": "entailmentbank_validation_406", "nl": "an example of migration is birds flying south in the winter.", "fol": "", "prediction": ["all x.(Migration(x) -> (Birds(x) & FlyingSouthInWinter(x)))"]}
{"id": "entailmentbank_validation_407", "nl": "migration is a kind of adaptation.", "fol": "", "prediction": ["all x.(Migration(x) -> Adaptation(x))"]}
{"id": "entailmentbank_validation_408", "nl": "an example of an adaptation is birds migrating south in the winter.", "fol": "", "prediction": ["all x.(Adaptation(x) -> (BirdsMigratingSouthInWinter(x)))"]}
{"id": "entailmentbank_validation_409", "nl": "wasp's stinger contains poison.", "fol": "", "prediction": ["all x.(WaspStinger(x) -> ContainsPoison(x))"]}
{"id": "entailmentbank_validation_410", "nl": "poison causes harm to living things.", "fol": "", "prediction": ["all x.(Poison(x) -> CausesHarmToLivingThings(x))"]}
{"id": "entailmentbank_validation_411", "nl": "a wasp's stinger can be used to cause harm to living things.", "fol": "", "prediction": ["all x.((WaspStinger(x) & CausesHarmToLivingThings(x)) -> CanBeUsedToCause(x,livingThings))"]}
{"id": "entailmentbank_validation_412", "nl": "harming is a kind of defense.", "fol": "", "prediction": ["all x.(Harming(x) -> Defense(x))"]}
{"id": "entailmentbank_validation_413", "nl": "a stinger is used for defense by a wasp.", "fol": "", "prediction": ["all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))"]}
{"id": "entailmentbank_validation_414", "nl": "color is a property of an organism that describes what it looks like.", "fol": "", "prediction": ["all x y.((Organism(x) & Color(y)) -> (PropertyOf(x,y) & DescriptionOfLooksAlike(x,y)))"]}
{"id": "entailmentbank_validation_415", "nl": "an example of camouflage is an organism looking like its environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (OrganismLookingAlikeEnvironment(x)))"]}
{"id": "entailmentbank_validation_416", "nl": "an example of camouflage is organism having the same color as its environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (Organism(x) & SameColorAsEnvironment(x)))"]}
{"id": "entailmentbank_validation_417", "nl": "if an animal's skin is a certain color then that animal is that color.", "fol": "", "prediction": ["all x.((Animal(x) & SkinColor(x)) -> Color(x))"]}
{"id": "entailmentbank_validation_418", "nl": "an example of camouflage is an animal's skin having the same color as its environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (AnimalSkin(x) & SameColorAsEnvironment(x)))"]}
{"id": "entailmentbank_validation_419", "nl": "camouflage is a kind of adaptation for hiding in an environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (AdaptationForHiding(x) & InEnvironment(x)))"]}
{"id": "entailmentbank_validation_420", "nl": "an animal having the same skin color as its environment is an adaptation for hiding in an environment.", "fol": "", "prediction": ["all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> AdaptationForHidingInEnvironment(x))"]}
{"id": "entailmentbank_validation_421", "nl": "predators usually must see their prey in order to catch them.", "fol": "", "prediction": ["all x y.((Predator(x) & Prey(y)) -> Sees(x,y))"]}
{"id": "entailmentbank_validation_422", "nl": "hiding means visibility / ability to be seen decreases for camouflage.", "fol": "", "prediction": ["all x.(Hunting(x) -> (DecreasesVisibility(x) & DecreasesAbilityToBeSeen(x)))"]}
{"id": "entailmentbank_validation_423", "nl": "hiding can be used to avoid being seen by predators.", "fol": "", "prediction": ["all x.(Hunting(x) -> AvoidsPredators(x))"]}
{"id": "entailmentbank_validation_424", "nl": "not being seen by predators is a kind of protection against predators.", "fol": "", "prediction": ["all x.((Predator(x) & -SeedBy(x,y)) -> ProtectionAgainst(x,z))"]}
{"id": "entailmentbank_validation_425", "nl": "hiding is a kind of protection against predators.", "fol": "", "prediction": ["all x.(Hunting(x) -> ProtectionAgainstPredators(x))"]}
{"id": "entailmentbank_validation_426", "nl": "an animal having the same skin color as its environment is a kind of protection against predators.", "fol": "", "prediction": ["all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> ProtectionAgainstPredators(x))"]}
{"id": "entailmentbank_validation_427", "nl": "hiding means ability to be seen decreases for camouflage.", "fol": "", "prediction": ["all x.(HuntingMeasures(x) -> DecreasesAbilityToBeSeen(x))"]}
{"id": "entailmentbank_validation_428", "nl": "to blend into something means ability to be seen decreases when around that something.", "fol": "", "prediction": ["all x y.((BlendedInto(x,y) & Something(y)) -> AbilityDecreasesWhenAround(x,y))"]}
{"id": "entailmentbank_validation_429", "nl": "to blend into something means to hide in something.", "fol": "", "prediction": ["all x.(BlendInto(x) -> HideIn(x))"]}
{"id": "entailmentbank_validation_430", "nl": "white fur blends into snow.", "fol": "", "prediction": ["all x.(WhiteFur(x) -> BlendsIntoSnow(x))"]}
{"id": "entailmentbank_validation_431", "nl": "an example of hiding is white fur blending in with snow.", "fol": "", "prediction": ["all x.((WhiteFur(x) & BlendsInWithSnow(x)) -> Hidden(x))"]}
{"id": "entailmentbank_validation_432", "nl": "an example of camouflage is white fur blending in with snow.", "fol": "", "prediction": ["all x.((WhiteFur(x) & BlendsInWithSnow(x)) -> Camouflage(x))"]}
{"id": "entailmentbank_validation_433", "nl": "some leaves have a speckled brown color.", "fol": "", "prediction": ["exists x.(Leaves(x) & SpckledBrownColor(x))"]}
{"id": "entailmentbank_validation_434", "nl": "some birds have a speckled brown color.", "fol": "", "prediction": ["exists x.(Bird(x) & SpckledBrownColor(x))"]}
{"id": "entailmentbank_validation_435", "nl": "some birds look like leaves.", "fol": "", "prediction": ["exists x.(Bird(x) & LooksAlikeLeaves(x))"]}
{"id": "entailmentbank_validation_436", "nl": "something that looks like another thing is difficult to distinguish from that thing.", "fol": "", "prediction": ["all x y.((Thing(x) & LooksAlike(x,y)) -> DifficultToDistinctFrom(x,y))"]}
{"id": "entailmentbank_validation_437", "nl": "some birds are difficult to distinguish from leaves.", "fol": "", "prediction": ["exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))"]}
{"id": "entailmentbank_validation_438", "nl": "difficult to distinguish can mean difficult to see in something else.", "fol": "", "prediction": ["all x.(DifficultToDistinct(x) -> DifficultToSee(x))"]}
{"id": "entailmentbank_validation_439", "nl": "some birds are difficult to see in leaves.", "fol": "", "prediction": ["exists x.(Bird(x) & DifficultToSeeInLeaves(x))"]}
{"id": "entailmentbank_validation_440", "nl": "an example of camouflage is a bird looking like leaves.", "fol": "", "prediction": ["all x.((Bird(x) & LooksAlikeLeaves(x)) -> Camouflage(x))"]}
{"id": "entailmentbank_validation_441", "nl": "camouflage is used for hiding by animals from predators.", "fol": "", "prediction": ["all x y.((Camouflage(x) & Animal(y)) -> UsedForHunting(x,y))"]}
{"id": "entailmentbank_validation_442", "nl": "looking like leaves can be used by birds for hiding from predators.", "fol": "", "prediction": ["all x.((LookingAlikeLeaves(x) & Bird(x)) -> CanBeUsedForHuntingFromPredators(x))"]}
{"id": "entailmentbank_validation_443", "nl": "hiding can be used to avoid something.", "fol": "", "prediction": ["all x.(Hunting(x) -> CanBeUsedToAvoid(x))"]}
{"id": "entailmentbank_validation_444", "nl": "looking like leaves can be used by birds for avoiding predators.", "fol": "", "prediction": ["all x.((LookingAlikeLeaves(x) & Bird(x)) -> AvoidsPredators(x))"]}
{"id": "entailmentbank_validation_445", "nl": "keeping warm is the opposite of becoming cold.", "fol": "", "prediction": ["all x.(KeepsWarm(x) -> OppositeOfBecomingCold(x))"]}
{"id": "entailmentbank_validation_446", "nl": "if a living thing becomes too cold then that living thing will die.", "fol": "", "prediction": ["all x.((LivingThing(x) & TooCold(x)) -> Die(x))"]}
{"id": "entailmentbank_validation_447", "nl": "an animal usually requires warmth for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresWarmthForSurvival(x))"]}
{"id": "entailmentbank_validation_448", "nl": "if the environmental temperature is too cold then an animal in that environment may become cold.", "fol": "", "prediction": ["all x.((Environment(x) & TooCold(x)) -> MayBecomeCold(x))"]}
{"id": "entailmentbank_validation_449", "nl": "an animal requires warmth in cold temperatures.", "fol": "", "prediction": ["all x.((Animal(x) & ColdTemperatures(x)) -> RequiresWarmth(x))"]}
{"id": "entailmentbank_validation_450", "nl": "thick fur can be used for keeping warm.", "fol": "", "prediction": ["all x.(ThickFur(x) -> CanBeUsedForWarming(x))"]}
{"id": "entailmentbank_validation_451", "nl": "thick fur can be used by animals for survival in cold temperatures.", "fol": "", "prediction": ["all x.(ThickFur(x) -> UsedForSurvivalInColdTemperatures(x))"]}
{"id": "entailmentbank_validation_452", "nl": "winter has cold temperatures.", "fol": "", "prediction": ["all x.(Winter(x) -> ColdTemperatures(x))"]}
{"id": "entailmentbank_validation_453", "nl": "thick fur can be used by animals for survival survival during winter.", "fol": "", "prediction": ["all x.(ThickFur(x) -> UsedForSurvival(x))"]}
{"id": "entailmentbank_validation_454", "nl": "a bear is a kind of animal.", "fol": "", "prediction": ["all x.(Bear(x) -> Animal(x))"]}
{"id": "entailmentbank_validation_455", "nl": "thick fur can be used by bears for survival during winter.", "fol": "", "prediction": ["all x.((ThickFur(x) & Bear(x)) -> CanUseForSurvivalDuringWinter(x))"]}
{"id": "entailmentbank_validation_456", "nl": "hunting is a kind of method for obtaining food.", "fol": "", "prediction": ["all x.(Hunting(x) -> (ObtainsFood(x) & ObtainsFood(x)))"]}
{"id": "entailmentbank_validation_457", "nl": "animals require food for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresFoodForSurvival(x))"]}
{"id": "entailmentbank_validation_458", "nl": "some animals must hunt to survive.", "fol": "", "prediction": ["exists x.(Animal(x) & Hunts(x))"]}
{"id": "entailmentbank_validation_459", "nl": "hunting requires sensing prey.", "fol": "", "prediction": ["all x.(Hunting(x) -> RequiresSensingPrey(x))"]}
{"id": "entailmentbank_validation_460", "nl": "better senses have a positive impact on an animal's survival.", "fol": "", "prediction": ["all x.(BetterSenses(x) -> PositiveImpactOnSurvival(x))"]}
{"id": "entailmentbank_validation_461", "nl": "hearing is used for sensing sound by animals.", "fol": "", "prediction": ["all x y.((Hearing(x) & Animal(y)) -> SensingSound(x,y))"]}
{"id": "entailmentbank_validation_462", "nl": "better hearing has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x.(BetterHearing(x) -> PositiveImpactOnAnimalSurvival(x))"]}
{"id": "entailmentbank_validation_463", "nl": "senses are passed down from parent to offspring.", "fol": "", "prediction": ["all x y z.((Sensor(x) & Offspring(y) & Parent(z)) -> PassedDown(x,y,z))"]}
{"id": "entailmentbank_validation_464", "nl": "inheriting is when an inherited characteristic is passed from parent to offspring by genetics / dna.", "fol": "", "prediction": ["all x y z.((Ethering(x) & Parent(y) & Offspring(z)) -> (PassedByGenetics(x,y,z) & PassedByDna(x,y)))"]}
{"id": "entailmentbank_validation_465", "nl": "senses are an inherited characteristic.", "fol": "", "prediction": ["all x.(Sense(x) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_validation_466", "nl": "hearing is an inherited characteristic.", "fol": "", "prediction": ["all x.(Hearing(x) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_validation_467", "nl": "better hearing is an inherited characteristic that has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x.(BetterHearing(x) -> (ErasedCharacteristic(x) & PositiveImpactOnSurvival(x)))"]}
{"id": "entailmentbank_validation_468", "nl": "as the ability of a living thing to survive / to reproduce increases, the likelihood of passing on its traits to its decendents will increase.", "fol": "", "prediction": ["all x y.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingOnTraitsToDecendents(y))"]}
{"id": "entailmentbank_validation_469", "nl": "animals with traits that positively impact their survival have a greater ability to survive / reproduce.", "fol": "", "prediction": ["all x.((Animal(x) & PositiveTreatment(x) & PositiveSurvival(x)) -> GreaterAbilityToSurvive(x))"]}
{"id": "entailmentbank_validation_470", "nl": "the decendants of an animal with traits that positively impacted their survival will also have traits that positivley impact their survival.", "fol": "", "prediction": ["all x y.((Decendant(x) & Animal(y) & PositivelyImpactsSurvival(x,y)) -> PositivelyImpactsSurvival(x,y))"]}
{"id": "entailmentbank_validation_471", "nl": "the decendants of an animal with better hearing will also have better hearing.", "fol": "", "prediction": ["all x y.((Decendant(x) & Animal(y) & BetterHearing(y)) -> BetterHearing(x,y))"]}
{"id": "entailmentbank_validation_472", "nl": "mosquitos can sense carbon dioxide in the air.", "fol": "", "prediction": ["all x.(Mosquito(x) -> CanSenseCarbonDioxide(x))"]}
{"id": "entailmentbank_validation_473", "nl": "animals are a source of carbon dioxide by exhaling.", "fol": "", "prediction": ["all x.(Animal(x) -> SourceOfCarbonDioxide(x))"]}
{"id": "entailmentbank_validation_474", "nl": "mosquitos sense animals by sensing their carbon dioxide emissions.", "fol": "", "prediction": ["all x y.((Mosquito(x) & Animal(y)) -> SenseBy(x,y))"]}
{"id": "entailmentbank_validation_475", "nl": "living things eat their food source.", "fol": "", "prediction": ["all x.(LivingThing(x) -> EatsFoodSource(x))"]}
{"id": "entailmentbank_validation_476", "nl": "mosquitos eat blood of animals.", "fol": "", "prediction": ["all x.(Mosquito(x) -> EatsBloodOfAnimals(x))"]}
{"id": "entailmentbank_validation_477", "nl": "animals are a source of food for mosquitos.", "fol": "", "prediction": ["all x.(Animal(x) -> SourceOfFoodForMouses(x))"]}
{"id": "entailmentbank_validation_478", "nl": "sensing food has a positive impact on finding food.", "fol": "", "prediction": ["all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))"]}
{"id": "entailmentbank_validation_479", "nl": "sensing animals has a positive impact on a mosquito's ability to find food.", "fol": "", "prediction": ["all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFacilityToFindFood(x,y))"]}
{"id": "entailmentbank_validation_480", "nl": "sensing carbon dioxide has a positive impact on a mosquito's ability to find food.", "fol": "", "prediction": ["all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFacility(x,y))"]}
{"id": "entailmentbank_validation_481", "nl": "if a living thing requires something then that something has a positive impact on that living thing.", "fol": "", "prediction": ["all x y.((LivingThing(x) & Requires(x,y)) -> PositiveImpact(x,y))"]}
{"id": "entailmentbank_validation_482", "nl": "a living things require water for survival.", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresWaterForSurvival(x))"]}
{"id": "entailmentbank_validation_483", "nl": "water has a positive impact on a living thing's survival.", "fol": "", "prediction": ["all x.(Water(x) -> PositiveImpactOnLivingThingSurvival(x))"]}
{"id": "entailmentbank_validation_484", "nl": "increasing the availability of something that has a positive impact on a living thing's survivial can have a positive impact on that living thing's survival.", "fol": "", "prediction": ["all x y.((IncreasingAvailabilityOf(x,y) & PositiveImpactOnSurvivial(x)) -> PositiveImpactOnSurvivial(x,y))"]}
{"id": "entailmentbank_validation_485", "nl": "increasing the availability of water for a living thing has a positive impact on that living thing's survival.", "fol": "", "prediction": ["all x y.((LivingThing(x) & LivingThing(y)) -> IncreasesWaterAvailability(x,y))"]}
{"id": "entailmentbank_validation_486", "nl": "storing something is a kind of method for increasing the availability of something.", "fol": "", "prediction": ["all x.(Stores(x) -> IncreasesAvailabilityOf(x))"]}
{"id": "entailmentbank_validation_487", "nl": "storing water has a positive impact on a living thing's survival by increasing the availability of water.", "fol": "", "prediction": ["all x y.((StoresWater(x) & LivingThing(y)) -> (PositiveImpactOnSurvival(x,y) & IncreasesWaterAvailability(x,y)))"]}
{"id": "entailmentbank_validation_488", "nl": "dry means low in amount of water.", "fol": "", "prediction": ["all x.(Dry(x) -> LowInWater(x))"]}
{"id": "entailmentbank_validation_489", "nl": "as dryness increases in an environment, the available water in that environment will decrease.", "fol": "", "prediction": ["all x y.((Environment(x) & Environment(y) & IncreasedDryness(x,y)) -> DecreasedWater(x,y))"]}
{"id": "entailmentbank_validation_490", "nl": "a dry environment is low in availability of water.", "fol": "", "prediction": ["all x.(DryEnvironment(x) -> LowWaterAvailability(x))"]}
{"id": "entailmentbank_validation_491", "nl": "storing water increases the water available to organisms in a dry environment.", "fol": "", "prediction": ["all x y.((StoresWater(x) & Organism(y)) -> IncreasesWaterAvailableInDryEnvironment(x,y))"]}
{"id": "entailmentbank_validation_492", "nl": "adapting is when a living thing responds to a change in an environment.", "fol": "", "prediction": ["all x y.((LivingThing(x) & Environment(y) & RespondsToChange(x,y)) -> Adapting(x))"]}
{"id": "entailmentbank_validation_493", "nl": "storing water is an adaptation to a dry environment.", "fol": "", "prediction": ["all x.(StoresWater(x) -> AdaptationToDryEnvironment(x))"]}
{"id": "entailmentbank_validation_494", "nl": "as the available water in an environment increases, the populations of organisms in that environment will increase.", "fol": "", "prediction": ["all x y.((Environment(x) & AvailableWater(x) & Environment(y)) -> PopulationIncrease(x,y))"]}
{"id": "entailmentbank_validation_495", "nl": "an aquatic animal requires great amounts of water to thrive.", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWater(x))"]}
{"id": "entailmentbank_validation_496", "nl": "as water increases in an environment, the population of aquatic animals will increase.", "fol": "", "prediction": ["all x y.((Water(x) & Environment(y) & Increases(x,y)) -> PopulationIncreases(x,y))"]}
{"id": "entailmentbank_validation_497", "nl": "a salamander is a kind of aquatic animal.", "fol": "", "prediction": ["all x.(Salamander(x) -> AquaticAnimal(x))"]}
{"id": "entailmentbank_validation_498", "nl": "as water increases in an environment, the population of salamanders may increase.", "fol": "", "prediction": ["all x.((WaterIncreases(x) & Environment(x)) -> PopulationIncreases(x))"]}
{"id": "entailmentbank_validation_499", "nl": "when a body of water receives more water than it can hold, a flood occurs.", "fol": "", "prediction": ["all x.((BodyOfWater(x) & ReceivesMoreWater(x) & CanHoldMoreWater(x)) -> FloodOccurs(x))"]}
{"id": "entailmentbank_validation_500", "nl": "as the amount of water in a body of water increases, the water levels will increase especially at the edge of that body of water.", "fol": "", "prediction": ["all x y.((BodyOfWater(x) & WaterAmount(y) & Increases(x,y)) -> WaterLevelsIncrease(x,y))"]}
{"id": "entailmentbank_validation_501", "nl": "a flood is a result of a large increase of water in a body of water.", "fol": "", "prediction": ["all x y.((Flood(x) & BodyOfWater(y)) -> LargeIncreaseOfWater(x,y))"]}
{"id": "entailmentbank_validation_502", "nl": "a body of water is a part of some environments.", "fol": "", "prediction": ["all x.(BodyOfWater(x) -> PartOfEnvironments(x))"]}
{"id": "entailmentbank_validation_503", "nl": "a flood is a result of a large increase of water in an environment.", "fol": "", "prediction": ["all x.(Flood(x) -> LargeIncreaseOfWater(x))"]}
{"id": "entailmentbank_validation_504", "nl": "a flood may cause the population of salamander to increase in an environment.", "fol": "", "prediction": ["all x y.((Flood(x) & Salamander(y)) -> IncreasedPopulation(y,Environment))"]}
{"id": "entailmentbank_validation_505", "nl": "frogs / turtles / fish / mice / birds are kinds of animals.", "fol": "", "prediction": ["all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)) -> Animal(x))"]}
{"id": "entailmentbank_validation_506", "nl": "alligators eat frogs / turtles / fish / mice / birds.", "fol": "", "prediction": ["all x.(Alligator(x) -> (EatsFrogs(x) & EatsTurtles(x) & EatsFish(x) & EatsMouses(x) & EatsBirds(x)))"]}
{"id": "entailmentbank_validation_507", "nl": "alligators eat animals.", "fol": "", "prediction": ["all x.(Alligator(x) -> EatsAnimals(x))"]}
{"id": "entailmentbank_validation_508", "nl": "a predator eats other animals for food.", "fol": "", "prediction": ["all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))"]}
{"id": "entailmentbank_validation_509", "nl": "alligators are a kind of predator.", "fol": "", "prediction": ["all x.(Alligator(x) -> Predator(x))"]}
{"id": "entailmentbank_validation_510", "nl": "as the population of prey decreases, competition between predators will increase.", "fol": "", "prediction": ["all x y.((Predator(x) & Prey(y) & PopulationDecrease(x,y)) -> CompetitionIncrease(x,y))"]}
{"id": "entailmentbank_validation_511", "nl": "as the population of prey decreases, competition between alligators will increase.", "fol": "", "prediction": ["all x.((PreyPopulation(x) & PopulationDecrease(x)) -> CompetitionIncrease(x))"]}
{"id": "entailmentbank_validation_512", "nl": "competition may cause animals to act aggressively towards members of their own species.", "fol": "", "prediction": ["all x y.((Competition(x) & Animal(y)) -> AggressiveAttendee(y,x))"]}
{"id": "entailmentbank_validation_513", "nl": "as the population of prey decreases, agression between alligators will increase.", "fol": "", "prediction": ["all x.((PreyPopulationDecrease(x) & Agression(x)) -> Increase(x))"]}
{"id": "entailmentbank_validation_514", "nl": "a drought occurs over a period of months / years.", "fol": "", "prediction": ["all x.(Drought(x) -> OccursOverMonthsYears(x))"]}
{"id": "entailmentbank_validation_515", "nl": "drought is when available water decreases in an environment over a period of months / years.", "fol": "", "prediction": ["all x y.((Drought(x) & Environment(y) & AvailableWaterDecreases(x,y)) -> DurationOfMonthsYears(x))"]}
{"id": "entailmentbank_validation_516", "nl": "as available water decreases, the population of plants will decrease.", "fol": "", "prediction": ["all x.((AvailableWater(x) & Decreases(x)) -> PopulationDecreases(x))"]}
{"id": "entailmentbank_validation_517", "nl": "a drought that occurs over a period of months / years may cause the population of plants in an environment to decrease.", "fol": "", "prediction": ["all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulation(y))"]}
{"id": "entailmentbank_validation_518", "nl": "a marsh willow herb is a kind of plant.", "fol": "", "prediction": ["all x.(MarshWildowHerb(x) -> Plant(x))"]}
{"id": "entailmentbank_validation_519", "nl": "a drought that occurs over a period of months / years may cause the population of marsh willow herb in an environment to decrease.", "fol": "", "prediction": ["all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulation(x))"]}
{"id": "entailmentbank_validation_520", "nl": "sweat is used for adjusting to hot temperatures by some animals.", "fol": "", "prediction": ["exists x.(Animal(x) & Sweat(x) & AdjustsToHotTemperatures(x))"]}
{"id": "entailmentbank_validation_521", "nl": "sweat cools a body.", "fol": "", "prediction": ["all x y.((Sweat(x) & Body(y)) -> Cools(x,y))"]}
{"id": "entailmentbank_validation_522", "nl": "when the body is hot, sweat is used to cool the body.", "fol": "", "prediction": ["all x.((Body(x) & Hot(x)) -> UsedToCool(x))"]}
{"id": "entailmentbank_validation_523", "nl": "panting is when an animal's body is cooled by hanging out their tongue.", "fol": "", "prediction": ["all x.(Pant(x) -> (Animal(x) & CooledByHangingOutTongue(x)))"]}
{"id": "entailmentbank_validation_524", "nl": "panting and sweating are used to cool the body.", "fol": "", "prediction": ["all x.((Pantting(x) | Sweating(x)) -> CoolsBody(x))"]}
{"id": "entailmentbank_validation_525", "nl": "cooling means decreasing heat / temperature.", "fol": "", "prediction": ["all x.(Cooling(x) -> (DecreasesHeat(x) & ReducesTemperature(x)))"]}
{"id": "entailmentbank_validation_526", "nl": "if an animal becomes too hot then that animal may die.", "fol": "", "prediction": ["all x.((Animal(x) & TooHot(x)) -> MayDie(x))"]}
{"id": "entailmentbank_validation_527", "nl": "cooling can be used by an animal for survival.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y)) -> Cooling(x,y))"]}
{"id": "entailmentbank_validation_528", "nl": "if the environmental temperature is too hot then an animal in that environment may become hot.", "fol": "", "prediction": ["all x.((Environment(x) & TooHot(x)) -> MayBecomeHot(x))"]}
{"id": "entailmentbank_validation_529", "nl": "if the temperature of an animal's environment becomes too hot then that animal must cool itself.", "fol": "", "prediction": ["all x.((Animal(x) & TooHotTemperature(x)) -> CoolsItself(x))"]}
{"id": "entailmentbank_validation_530", "nl": "an animal cooling itself is an adaptation to hot temperatures.", "fol": "", "prediction": ["all x.((Animal(x) & Cooling(x)) -> HotTemperaturesAdaptation(x))"]}
{"id": "entailmentbank_validation_531", "nl": "an example of adaptations to hot temperatures are panting and sweating.", "fol": "", "prediction": ["all x.(Adaptation(x) -> (Pantting(x) | Sweating(x)))"]}
{"id": "entailmentbank_validation_532", "nl": "cellular respiration is when a cell converts from oxygen and carbohydrates into carbon dioxide, water, and energy.", "fol": "", "prediction": ["all x.(CellularRespiration(x) -> (ConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))"]}
{"id": "entailmentbank_validation_533", "nl": "living things require respiration to use energy.", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresRespiration(x))"]}
{"id": "entailmentbank_validation_534", "nl": "living things must convert oxygen into carbon dioxide to use energy.", "fol": "", "prediction": ["all x.((LivingThing(x) & Oxygen(x)) -> ConvertsToCarbonDioxide(x))"]}
{"id": "entailmentbank_validation_535", "nl": "breathing is when animals convert oxygen into carbon dioxide.", "fol": "", "prediction": ["all x.(Breathing(x) -> (AnimalConvertsOxygenToCarbonDioxide(x)))"]}
{"id": "entailmentbank_validation_536", "nl": "living things must breathe to use energy.", "fol": "", "prediction": ["all x.(LivingThing(x) -> BreathesToUseEnergy(x))"]}
{"id": "entailmentbank_validation_537", "nl": "breathing out is when animals exhale carbon dioxide from their lungs into the air.", "fol": "", "prediction": ["all x.(BreathingOut(x) -> (ExhalesCarbonDioxide(x) & FromLungsIntoAir(x)))"]}
{"id": "entailmentbank_validation_538", "nl": "animals are a source of carbon dioxide by breathing.", "fol": "", "prediction": ["all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))"]}
{"id": "entailmentbank_validation_539", "nl": "a source of something produces that something.", "fol": "", "prediction": ["all x y.((Source(x) & Something(y)) -> Produces(x,y))"]}
{"id": "entailmentbank_validation_540", "nl": "animals produce carbon dioxide by breathing.", "fol": "", "prediction": ["all x.(Animal(x) -> ProducesCarbonDioxideByBreathing(x))"]}
{"id": "entailmentbank_validation_541", "nl": "animals produce carbon dioxide by using energy.", "fol": "", "prediction": ["all x.(Animal(x) -> ProducesCarbonDioxideByEnergy(x))"]}
{"id": "entailmentbank_validation_542", "nl": "carbohydrates are used for storing energy.", "fol": "", "prediction": ["all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))"]}
{"id": "entailmentbank_validation_543", "nl": "photosynthesis makes energy for the plant by converting carbon dioxide, water, and sunlight into carbohydrates.", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & Plant(y)) -> (ConvertsCarbonDioxideWaterSunlight(x,y) & ProducesCarbohydrates(x,y)))"]}
{"id": "entailmentbank_validation_544", "nl": "photosynthesis stores energy.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> StoresEnergy(x))"]}
{"id": "entailmentbank_validation_545", "nl": "if something is required to use something else then that something is a source of that something else.", "fol": "", "prediction": ["all x y.((RequiredToUse(x,y) & Something(y)) -> SourceOf(y,x))"]}
{"id": "entailmentbank_validation_546", "nl": "respiration is a source of energy for living things.", "fol": "", "prediction": ["all x.(Respiration(x) -> SourceOfEnergyForLivingThings(x))"]}
{"id": "entailmentbank_validation_547", "nl": "if something releases something else then that something is the source of that something else.", "fol": "", "prediction": ["all x y.((Releases(x,y) & Something(y)) -> SourceOf(x,y))"]}
{"id": "entailmentbank_validation_548", "nl": "respiration releases energy.", "fol": "", "prediction": ["all x.(Respiration(x) -> ReleasesEnergy(x))"]}
{"id": "entailmentbank_validation_549", "nl": "photosynthesis stores energy and respiration releases energy.", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & Respiration(y)) -> (StoresEnergy(x) & ReleasesEnergy(y)))"]}
{"id": "entailmentbank_validation_550", "nl": "digestion is when stomach acid breaks down food.", "fol": "", "prediction": ["all x.(Digestion(x) -> BreaksDownFood(x))"]}
{"id": "entailmentbank_validation_551", "nl": "the digestive system digests food for the body.", "fol": "", "prediction": ["all x y.((DigestiveSystem(x) & Body(y)) -> DigestsFoodFor(x,y))"]}
{"id": "entailmentbank_validation_552", "nl": "the digestive system breaks down food.", "fol": "", "prediction": ["all x.(DigestiveSystem(x) -> BreaksDownFood(x))"]}
{"id": "entailmentbank_validation_553", "nl": "if something is made of something else then that something can be broken down into that something else.", "fol": "", "prediction": ["all x.((MadeOf(x,y) & MadeOf(y,z)) -> CanBeBreakdownInto(x,z))"]}
{"id": "entailmentbank_validation_554", "nl": "if something is made of something else then that something contains that something else.", "fol": "", "prediction": ["all x.((MadeOf(x,y) & MadeOf(x,y)) -> Contains(x,y))"]}
{"id": "entailmentbank_validation_555", "nl": "if something contains something else then that something can be broken down into that something else.", "fol": "", "prediction": ["all x.((Contents(x) & Contains(x,y)) -> CanBeBreakdownInto(x,y))"]}
{"id": "entailmentbank_validation_556", "nl": "the digestive system breaks down food into the substances it contains.", "fol": "", "prediction": ["all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoSubstances(x,y))"]}
{"id": "entailmentbank_validation_557", "nl": "food contains nutrients for living things.", "fol": "", "prediction": ["all x.(Food(x) -> ContainsNutrientsForLivingThings(x))"]}
{"id": "entailmentbank_validation_558", "nl": "the digestive system breaks down food into nutrients for the body.", "fol": "", "prediction": ["all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoNutrients(x,y))"]}
{"id": "entailmentbank_validation_559", "nl": "scales are a covering around the body of a scaled animal.", "fol": "", "prediction": ["all x y.((Scales(x) & ScaledAnimal(y)) -> CoversAboutBody(x,y))"]}
{"id": "entailmentbank_validation_560", "nl": "a fish is a kind of scaled animal.", "fol": "", "prediction": ["all x.(Fish(x) -> ScaledAnimal(x))"]}
{"id": "entailmentbank_validation_561", "nl": "fish is a kind of scaled animal with scales covering around the body.", "fol": "", "prediction": ["all x.(Fish(x) -> (Scales(x) & ScalesCovering(x)))"]}
{"id": "entailmentbank_validation_562", "nl": "scales are used for protection by scaled animals.", "fol": "", "prediction": ["all x.(Scales(x) -> UsedForProtection(x))"]}
{"id": "entailmentbank_validation_563", "nl": "scales are used for protection by fish.", "fol": "", "prediction": ["all x.(Scales(x) -> UsedForProtection(x))"]}
{"id": "entailmentbank_validation_564", "nl": "a human is a kind of animal.", "fol": "", "prediction": ["all x.(Human(x) -> Animal(x))"]}
{"id": "entailmentbank_validation_565", "nl": "an animal is a kind of living thing.", "fol": "", "prediction": ["all x.(Animal(x) -> LivingThing(x))"]}
{"id": "entailmentbank_validation_566", "nl": "a human is a kind of living thing.", "fol": "", "prediction": ["all x.(Human(x) -> LivingThing(x))"]}
{"id": "entailmentbank_validation_567", "nl": "a plant is a kind of living thing.", "fol": "", "prediction": ["all x.(Plant(x) -> LivingThing(x))"]}
{"id": "entailmentbank_validation_568", "nl": "an apple tree is a kind of plant.", "fol": "", "prediction": ["all x.(AppleTree(x) -> Plant(x))"]}
{"id": "entailmentbank_validation_569", "nl": "an apple tree is a kind of living thing.", "fol": "", "prediction": ["all x.(AppleTree(x) -> LivingThing(x))"]}
{"id": "entailmentbank_validation_570", "nl": "all living things are made of cells according to the cell theory.", "fol": "", "prediction": ["all x.(LivingThing(x) -> MadeOfCells(x))"]}
{"id": "entailmentbank_validation_571", "nl": "both the human and the apple tree are made of cells.", "fol": "", "prediction": ["all x.((Human(x) & AppleTree(x)) -> MadeOfCells(x))"]}
{"id": "entailmentbank_validation_572", "nl": "a plant cell is a kind of cell.", "fol": "", "prediction": ["all x.(PlantCell(x) -> Cell(x))"]}
{"id": "entailmentbank_validation_573", "nl": "a cell nucleus is a part of a cell.", "fol": "", "prediction": ["all x y.((CellNucleus(x) & Cell(y)) -> PartOf(x,y))"]}
{"id": "entailmentbank_validation_574", "nl": "a cell nucleus is a part of a plant cell.", "fol": "", "prediction": ["all x.(CellNucleus(x) -> PartOfPlantCell(x))"]}
{"id": "entailmentbank_validation_575", "nl": "a cell wall is a part of a plant cell for supporting and protecting the cell membrane.", "fol": "", "prediction": ["all x y.((CellWall(x) & PlantCell(y)) -> (PartOf(x,y) & SupportsAndProtectsCellMembrane(x)))"]}
{"id": "entailmentbank_validation_576", "nl": "chloroplast is a part of a plant cell.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> PartOfPlantCell(x))"]}
{"id": "entailmentbank_validation_577", "nl": "a cell nucleus, chloroplast and a cell wall are part of a plant cell.", "fol": "", "prediction": ["all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> (PartOfPlantCell(x) & PartOfPlantCell(x)))"]}
{"id": "entailmentbank_validation_578", "nl": "a computer room is used to control the assembly process in a factory.", "fol": "", "prediction": ["all x y.((ComputerRoom(x) & Factory(y)) -> ControlsAssemblyProcess(x,y))"]}
{"id": "entailmentbank_validation_579", "nl": "the cell nucleus controls many of the functions of the cell.", "fol": "", "prediction": ["all x y.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))"]}
{"id": "entailmentbank_validation_580", "nl": "controlling is a kind of function.", "fol": "", "prediction": ["all x.(Controlling(x) -> Function(x))"]}
{"id": "entailmentbank_validation_581", "nl": "a computer room in a factory has a similar function to the cell nucleus in controlling the functions.", "fol": "", "prediction": ["all x y.((ComputerRoom(x) & Factory(y) & InFactory(x,y)) -> SimilarFunctionToCellNucleus(x,y))"]}
{"id": "entailmentbank_validation_582", "nl": "if something does not contain something else, then that something else cannot be found in that something.", "fol": "", "prediction": ["all x.((DoesNotContain(x) & -Contain(x)) -> -CanBeFoundIn(x))"]}
{"id": "entailmentbank_validation_583", "nl": "a prokaryotic cell does not contain a nucleus.", "fol": "", "prediction": ["all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))"]}
{"id": "entailmentbank_validation_584", "nl": "a nucleus cannot be found in prokaryotic cells.", "fol": "", "prediction": ["all x.(Nucleus(x) -> -FoundInProkaryoticCells(x))"]}
{"id": "entailmentbank_validation_585", "nl": "photosynthesis makes food for the plant.", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & Plant(y)) -> MakesFood(x,y))"]}
{"id": "entailmentbank_validation_586", "nl": "a leaf performs photosynthesis / gas exchange.", "fol": "", "prediction": ["all x.(Leaf(x) -> PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_587", "nl": "a leaf makes food for the plant by performing photosynthesis.", "fol": "", "prediction": ["all x y.((Leaf(x) & Plant(y) & PerformsPhotosynthesis(x,y)) -> MakesFoodFor(x,y))"]}
{"id": "entailmentbank_validation_588", "nl": "providing food is a kind of specific life process.", "fol": "", "prediction": ["all x.(ProvidesFood(x) -> LifeProcess(x))"]}
{"id": "entailmentbank_validation_589", "nl": "a leaf performs a specific life process of making food for the plants.", "fol": "", "prediction": ["all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcessOfMakingFood(x,y))"]}
{"id": "entailmentbank_validation_590", "nl": "organs perform specific life process in organisms.", "fol": "", "prediction": ["all x y.((Organ(x) & Organism(y)) -> PerformsLifeProcessIn(x,y))"]}
{"id": "entailmentbank_validation_591", "nl": "a leaf in a plant is performing like an organ in organisms.", "fol": "", "prediction": ["all x y.((Leaf(x) & Plant(y) & InPlant(x,y)) -> PerformsAsOrgan(x,y))"]}
{"id": "entailmentbank_validation_592", "nl": "taking in carbon dioxide is a stage in the photosynthesis process.", "fol": "", "prediction": ["all x.((PhotosynthesisProcess(x) & TakesInCarbonDioxide(x)) -> StageInPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_593", "nl": "absorbing something is a kind of method for taking something in.", "fol": "", "prediction": ["all x.(Absorbing(x) -> TakesIn(x))"]}
{"id": "entailmentbank_validation_594", "nl": "absorbing carbon dioxide is a stage in the photosynthesis process.", "fol": "", "prediction": ["all x.(AbsorbingCarbonDioxide(x) -> PhotosynthesisProcess(x))"]}
{"id": "entailmentbank_validation_595", "nl": "carbon dioxide can be found in the air.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> FoundInAir(x))"]}
{"id": "entailmentbank_validation_596", "nl": "absorbing carbon dioxide from the air is a stage in the photosynthesis process.", "fol": "", "prediction": ["all x.((AbsorbsCarbonDioxide(x) & FromAir(x)) -> PhotosynthesisProcess(x))"]}
{"id": "entailmentbank_validation_597", "nl": "plants perform photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_598", "nl": "a plant absorbs carbon dioxide from the air to perform photosynthesis.", "fol": "", "prediction": ["all x y.((Plant(x) & CarbonDioxide(y)) -> AbsorbsToPerformPhotosynthesis(x,y))"]}
{"id": "entailmentbank_validation_599", "nl": "when carbon dioxide in the atmosphere is absorbed by plants, the amount of carbon dioxide in the atmosphere is reduced in the atmosphere.", "fol": "", "prediction": ["all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> ReducedAmountOfCarbonDioxide(x,y))"]}
{"id": "entailmentbank_validation_600", "nl": "plant photosynthesis reduces the amount of carbon dioxide in the air.", "fol": "", "prediction": ["all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxide(x))"]}
{"id": "entailmentbank_validation_601", "nl": "sunlight is a kind of solar energy.", "fol": "", "prediction": ["all x.(Sunlight(x) -> SolarEnergy(x))"]}
{"id": "entailmentbank_validation_602", "nl": "photosynthesis means green plants convert from carbon dioxide and water and solar energy into carbohydrates and food and oxygen for themselves.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (GreenPlantsConvertFromCarbonDioxideAndWaterAndSolarEnergy(x) & CarbohydratesAndFoodAndOxygen(x)))"]}
{"id": "entailmentbank_validation_603", "nl": "photosynthesis means plants convert carbon dioxide and water and sunlight into carbohydrates and food and oxygen.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWaterAndSunlight(x) & CarbohydratesAndFoodAndOxygen(x)))"]}
{"id": "entailmentbank_validation_604", "nl": "if an orgnism uses a process to convert something into something else, then that something is used for that process.", "fol": "", "prediction": ["all x y.((Organnism(x) & Process(y) & ConvertsInto(x,y)) -> UsedFor(x,y))"]}
{"id": "entailmentbank_validation_605", "nl": "a plant uses sunlight for photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> UsesSunlightForPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_606", "nl": "in the photosynthesis process sunlight has the role of raw material.", "fol": "", "prediction": ["all x.((Sunlight(x) & PhotosynthesisProcess(x)) -> RawMaterial(x))"]}
{"id": "entailmentbank_validation_607", "nl": "a plant uses the raw material sunlight for photosynthesis.", "fol": "", "prediction": ["all x y.((Plant(x) & RawMaterial(y)) -> UsesForPhotosynthesis(x,y))"]}
{"id": "entailmentbank_validation_608", "nl": "using a raw material sometimes requires absorbing that raw material.", "fol": "", "prediction": ["all x y.((UsesRawMaterial(x) & RawMaterial(y)) -> RequiresAbsorbing(x,y))"]}
{"id": "entailmentbank_validation_609", "nl": "a plant absorbs sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x.((Plant(x) & AbsorbsSunlight(x)) -> PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_610", "nl": "a leaf absorbs sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x.(Leaf(x) -> AbsorbsSunlightToPerformPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_611", "nl": "chlorophyll is found in the cells of leaves.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> FoundInLeavesCells(x))"]}
{"id": "entailmentbank_validation_612", "nl": "chlorophyll is found in the cells of parts of plants that absorb sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> (FoundInCellsOfPlants(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))"]}
{"id": "entailmentbank_validation_613", "nl": "chlorophyll is used for absorbing sunlight by plants.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> AbsorbsSunlight(x))"]}
{"id": "entailmentbank_validation_614", "nl": "sunlight is a kind of light.", "fol": "", "prediction": ["all x.(Sunlight(x) -> Light(x))"]}
{"id": "entailmentbank_validation_615", "nl": "light is a kind of energy.", "fol": "", "prediction": ["all x.(Light(x) -> Energy(x))"]}
{"id": "entailmentbank_validation_616", "nl": "sunlight is a kind of light energy.", "fol": "", "prediction": ["all x.(Sunlight(x) -> LightEnergy(x))"]}
{"id": "entailmentbank_validation_617", "nl": "chlorophyll is used for absorbing light energy by plants.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> AbsorbsLightEnergy(x))"]}
{"id": "entailmentbank_validation_618", "nl": "some microorganisms have a positive impact on human body.", "fol": "", "prediction": ["exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))"]}
{"id": "entailmentbank_validation_619", "nl": "if something has a positive impact on another thing, then the relationship is benificial.", "fol": "", "prediction": ["all x.((PositiveImpact(x) & PositiveImpact(x)) -> BenificialRelationship(x))"]}
{"id": "entailmentbank_validation_620", "nl": "some microorganisms are benificial to human body.", "fol": "", "prediction": ["exists x.(Microorganism(x) & BenificialToHumanBody(x))"]}
{"id": "entailmentbank_validation_621", "nl": "disease-causing microbes have a negative impact on the body.", "fol": "", "prediction": ["all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x))"]}
{"id": "entailmentbank_validation_622", "nl": "if something has a negative impact on another thing, then the relationship is harmful.", "fol": "", "prediction": ["all x y.((NegativeImpact(x) & NegativeImpact(y)) -> HarmfulRelationship(x,y))"]}
{"id": "entailmentbank_validation_623", "nl": "some disease-causing microbes are harmful to human body.", "fol": "", "prediction": ["exists x.(DiseaseCausingMicrobe(x) & HarmfulToHumanBody(x))"]}
{"id": "entailmentbank_validation_624", "nl": "the relationship between human and microorganisms is sometimes beneficial and sometimes harmful.", "fol": "", "prediction": ["all x y.((Human(x) & Microorganism(y)) -> (BeneficialRelationship(x,y) | HarmfulRelationship(x,y)))"]}
{"id": "entailmentbank_validation_625", "nl": "water is a kind of nonliving thing.", "fol": "", "prediction": ["all x.(Water(x) -> NonlivingThing(x))"]}
{"id": "entailmentbank_validation_626", "nl": "a river is a kind of body of water.", "fol": "", "prediction": ["all x.(River(x) -> BodyOfWater(x))"]}
{"id": "entailmentbank_validation_627", "nl": "a river is a nonliving thing.", "fol": "", "prediction": ["all x.(River(x) -> NonlivingThing(x))"]}
{"id": "entailmentbank_validation_628", "nl": "preferences are generally learned characteristics.", "fol": "", "prediction": ["all x.(Preference(x) -> LearnedCharacteristics(x))"]}
{"id": "entailmentbank_validation_629", "nl": "a food preference is a kind of preference.", "fol": "", "prediction": ["all x.(FoodPreference(x) -> Preference(x))"]}
{"id": "entailmentbank_validation_630", "nl": "food preference is a kind of learned characteristics.", "fol": "", "prediction": ["all x.(FoodPreference(x) -> LearnedCharacteristics(x))"]}
{"id": "entailmentbank_validation_631", "nl": "learned characteristics are similar to acquired characteristics.", "fol": "", "prediction": ["all x y.((LevedCharacteristic(x) & AcquiredCharacteristic(y)) -> SimilarTo(x,y))"]}
{"id": "entailmentbank_validation_632", "nl": "food preference is a kind of acquired characteristics.", "fol": "", "prediction": ["all x.(FoodPreference(x) -> AcquiredCharacteristics(x))"]}
{"id": "entailmentbank_validation_633", "nl": "an animal is a kind of organism.", "fol": "", "prediction": ["all x.(Animal(x) -> Organism(x))"]}
{"id": "entailmentbank_validation_634", "nl": "a dog is a kind of animal.", "fol": "", "prediction": ["all x.(Dog(x) -> Animal(x))"]}
{"id": "entailmentbank_validation_635", "nl": "a dog is a kind of organism.", "fol": "", "prediction": ["all x.(Dog(x) -> Organism(x))"]}
{"id": "entailmentbank_validation_636", "nl": "an organism's environment affects that organism's acquired characteristics.", "fol": "", "prediction": ["all x y.((Organism(x) & Environment(y)) -> AffectsAcquiredCharacteristics(x,y))"]}
{"id": "entailmentbank_validation_637", "nl": "the food preference of a dog is affected by its environment.", "fol": "", "prediction": ["all x y.((Dog(x) & Environment(y)) -> FoodPreferenceAffectedBy(x,y))"]}
{"id": "entailmentbank_validation_638", "nl": "following orders is a learned characteristic.", "fol": "", "prediction": ["all x.((Order(x) & FollowingOrder(x)) -> LearnedCharacteristic(x))"]}
{"id": "entailmentbank_validation_639", "nl": "an example of following orders is coming when called.", "fol": "", "prediction": ["all x.((ExempleOfFollowingOrders(x) & Called(x)) -> Coming(x))"]}
{"id": "entailmentbank_validation_640", "nl": "a dog coming when called is a kind of learned characteristic.", "fol": "", "prediction": ["all x.((Dog(x) & ComingWhenCalled(x)) -> LearnedCharacteristic(x))"]}
{"id": "entailmentbank_validation_641", "nl": "hunting is a kind of skill.", "fol": "", "prediction": ["all x.(Hunting(x) -> Skill(x))"]}
{"id": "entailmentbank_validation_642", "nl": "skills are learned characteristics / behaviors.", "fol": "", "prediction": ["all x.(Skill(x) -> (LecturedCharacteristics(x) | LearnedBehaviors(x)))"]}
{"id": "entailmentbank_validation_643", "nl": "hunting is a kind of learned behaviors.", "fol": "", "prediction": ["all x.(Hunting(x) -> LearnedBehavior(x))"]}
{"id": "entailmentbank_validation_644", "nl": "inherited characteristics are the opposite of learned characteristics.", "fol": "", "prediction": ["all x.(EarnedCharacteristics(x) -> OppositeOfLevedCharacteristics(x))"]}
{"id": "entailmentbank_validation_645", "nl": "learned characteristics are not inherited from parents.", "fol": "", "prediction": ["all x.(LevedCharacteristics(x) -> -HasParents(x))"]}
{"id": "entailmentbank_validation_646", "nl": "food preference is not inherited from parents.", "fol": "", "prediction": ["all x.(FoodPreference(x) -> -HasParents(x))"]}
{"id": "entailmentbank_validation_647", "nl": "the intelligence of animals is an acquired characteristic.", "fol": "", "prediction": ["all x.((Animal(x) & Intelligence(x)) -> AcquiredCharacteristic(x))"]}
{"id": "entailmentbank_validation_648", "nl": "the intelligence of a human is an acquired characteristic.", "fol": "", "prediction": ["all x.(HumanIntelligence(x) -> AcquiredCharacteristic(x))"]}
{"id": "entailmentbank_validation_649", "nl": "inherited characteristics are the opposite of acquired characteristics.", "fol": "", "prediction": ["all x.(EarnedCharacteristics(x) -> OppositeOfAcquiredCharacteristics(x))"]}
{"id": "entailmentbank_validation_650", "nl": "the intelligence of a human is not an inherited characteristic.", "fol": "", "prediction": ["all x.(Human(x) -> -HasIntelligence(x))"]}
{"id": "entailmentbank_validation_651", "nl": "genes is a vehicle for passing inherited characteristics from parent to offspring.", "fol": "", "prediction": ["all x.(Genes(x) -> (PassesEarnedCharacteristics(x) & FromParentToOffspring(x)))"]}
{"id": "entailmentbank_validation_652", "nl": "a father is a kind of male parent.", "fol": "", "prediction": ["all x.(Parent(x) -> Male(x))"]}
{"id": "entailmentbank_validation_653", "nl": "a mother is a kind of female parent.", "fol": "", "prediction": ["all x.(Mother(x) -> FemaleParent(x))"]}
{"id": "entailmentbank_validation_654", "nl": "genes are a vehicle for passing inherited characteristics from a mother and a father to offspring.", "fol": "", "prediction": ["all x y.((Gene(x) & Mother(y) & Father(y)) -> PassesEarnedCharacteristicsToOffspring(x,y))"]}
{"id": "entailmentbank_validation_655", "nl": "in sexual reproduction sperm is a vehicle for the genes from the father to the offspring.", "fol": "", "prediction": ["all x y.((Ssperm(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromFatherToOffspring(x)))"]}
{"id": "entailmentbank_validation_656", "nl": "in sexual reproduction the egg is a vehicle for the genes from the mother to the offspring.", "fol": "", "prediction": ["all x y.((Egg(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromMotherToOffspring(x)))"]}
{"id": "entailmentbank_validation_657", "nl": "genes are passed from a mother and a father to offspring through the egg and sperm.", "fol": "", "prediction": ["all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassedFromToOffspring(x,y,z) & ThroughEggAndSperm(x)))"]}
{"id": "entailmentbank_validation_658", "nl": "genes determine the traits for the living things.", "fol": "", "prediction": ["all x y.((Gene(x) & LivingThing(y)) -> DeterminesTraits(x,y))"]}
{"id": "entailmentbank_validation_659", "nl": "traits are passed from a mother and a father to offspring through the egg and sperm.", "fol": "", "prediction": ["all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> TraitsPassed(x,y,z))"]}
{"id": "entailmentbank_validation_660", "nl": "dna is a kind of nucleic acid.", "fol": "", "prediction": ["all x.(Dna(x) -> NucleicAcid(x))"]}
{"id": "entailmentbank_validation_661", "nl": "thymine is found in dna.", "fol": "", "prediction": ["all x.(Thymine(x) -> FoundInDna(x))"]}
{"id": "entailmentbank_validation_662", "nl": "thymine cannot be found in rna.", "fol": "", "prediction": ["all x.(Thymine(x) -> -FoundInRna(x))"]}
{"id": "entailmentbank_validation_663", "nl": "if thymine is found in a strand of nucleic acid, then the nucleic acid is dna.", "fol": "", "prediction": ["all x y.((Thymine(x) & NucleicAcid(y) & FoundInString(x,y)) -> Dna(x))"]}
{"id": "entailmentbank_validation_664", "nl": "a researcher found thymine in a strand of nucleic acid.", "fol": "", "prediction": ["all x y.((Researcher(x) & Thymine(y)) -> FoundInNucleicAcid(x,y))"]}
{"id": "entailmentbank_validation_665", "nl": "the researcher found a strand of dna.", "fol": "", "prediction": ["all x y.((Researcher(x) & Dna(y)) -> FoundString(x,y))"]}
{"id": "entailmentbank_validation_666", "nl": "if a pure dominant organism is crossed a recessive organism, then the offspring will have a 100% probability of being heterozygous dominant.", "fol": "", "prediction": ["all x y.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> 100%ProbabilityOfHeterozygousDominantOffspring(x))"]}
{"id": "entailmentbank_validation_667", "nl": "a scientist crosses a red-flowered plant with a white-flowered plant, and all offspring have red flowers.", "fol": "", "prediction": ["all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y,z) & AllOffspringHaveRedFlowers(x)))"]}
{"id": "entailmentbank_validation_668", "nl": "all the offspring with red flowers are heterozygous dominant.", "fol": "", "prediction": ["all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDominant(x))"]}
{"id": "entailmentbank_validation_669", "nl": "the offspring with red flowers are crossed with pure recessive white flowered plants.", "fol": "", "prediction": ["all x y.((Offspring(x) & RedFlowers(x) & WhiteFloweredPlant(y)) -> CrossedWith(x,y))"]}
{"id": "entailmentbank_validation_670", "nl": "heterozygous dominant red flowered plants are crossed with pure recessive white flowered plants.", "fol": "", "prediction": ["all x y.((Hydrozygous(x) & RedFloweredPlant(y) & CrossedWith(x,y)) -> RecessiveWhiteFloweredPlant(x))"]}
{"id": "entailmentbank_validation_671", "nl": "crossing a heterozygous dominant organism with a homozygous recessive organism causes their offspring to be dominant or recessive with either of 50% probability.", "fol": "", "prediction": ["all x y.((Crossing(x,y) & HeterozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> ((Offspring(x,y) & (Dominant(y) | Recessive(y)))))"]}
{"id": "entailmentbank_validation_672", "nl": "the offspring will have either dominant red flowers or recessive white flowers with either of 50% probability.", "fol": "", "prediction": ["all x.(Offspring(x) -> ((DistinctRedFlowers(x) | ResistiveWhiteFlowers(x)) & (FiftyProbability(x) | 50%Probability(x))))"]}
{"id": "entailmentbank_validation_673", "nl": "each parent carries one sickle cell allele.", "fol": "", "prediction": ["all x.(Parent(x) -> CarriesSickleCellAllele(x))"]}
{"id": "entailmentbank_validation_674", "nl": "sickle cell anemia is a recessive trait in human.", "fol": "", "prediction": ["all x.(SickleCellAnemia(x) -> RecessiveTraitInHuman(x))"]}
{"id": "entailmentbank_validation_675", "nl": "each parent has one dominant gene and a recessive gene for sickle cell anemia.", "fol": "", "prediction": ["all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))"]}
{"id": "entailmentbank_validation_676", "nl": "heterozygous dominant organisms have one dominant gene and one recessive gene.", "fol": "", "prediction": ["all x.(HybridObstacle(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))"]}
{"id": "entailmentbank_validation_677", "nl": "both parents are heterozygous dominant for sickle cell anemia.", "fol": "", "prediction": ["all x.((Parent(x) & Heterozygous(x) & Heterozygous(x)) -> SickleCellAnemia(x))"]}
{"id": "entailmentbank_validation_678", "nl": "if a heterozygous dominant organism is crossed with a heterozygous dominant organism, then the offspring will have a 25% probability of being homozygous recessive.", "fol": "", "prediction": ["all x y.((HeterozygousDominantOrganism(x) & CrossedWithHeterozygousDominantOrganism(x)) -> Has25PercentProbabilityOfHomozygousRecessive(y))"]}
{"id": "entailmentbank_validation_679", "nl": "the offspring of heterozygous dominant parents will have 25% probability of being homozygous recessive for sickle cell anemia.", "fol": "", "prediction": ["all x.((Offspring(x) & HeterozygousDominantParents(x)) -> Has25PercentProbabilityOfHomozygousRecessiveForSickleCellAnemia(x))"]}
{"id": "entailmentbank_validation_680", "nl": "homozygous recessive organisms will show the recessive trait.", "fol": "", "prediction": ["all x.(HomozygousRecessiveOrganism(x) -> ShowsRecessiveTrait(x))"]}
{"id": "entailmentbank_validation_681", "nl": "the offspring of heterozygous dominant parents will have 25% probability of having sickle cell anemia.", "fol": "", "prediction": ["all x.((Offspring(x) & HeterozygousDominantParents(x)) -> 25%ProbabilityOfSickleCellAnemia(x))"]}
{"id": "entailmentbank_validation_682", "nl": "one in four is the same as 25%.", "fol": "", "prediction": ["all x.((InFour(x) & SameAt25(x)) -> SameAt25(x))"]}
{"id": "entailmentbank_validation_683", "nl": "one in four of the offspring of heterozygous dominant parents will have sickle cell anemia.", "fol": "", "prediction": ["all x.((Offspring(x) & HeterozygousDominantParent(x)) -> HasSickleCellAnemia(x))"]}
{"id": "entailmentbank_validation_684", "nl": "a plant is a kind of organism.", "fol": "", "prediction": ["all x.(Plant(x) -> Organism(x))"]}
{"id": "entailmentbank_validation_685", "nl": "flower is a part of a plant.", "fol": "", "prediction": ["all x.(Flower(x) -> PartOfPlant(x))"]}
{"id": "entailmentbank_validation_686", "nl": "the colors of parts of an organism are inherited characteristics.", "fol": "", "prediction": ["all x.((Color(x) & PartOfOrganism(x)) -> ErasedCharacteristics(x))"]}
{"id": "entailmentbank_validation_687", "nl": "the color of plants' flowers is a kind of inherited characteristic.", "fol": "", "prediction": ["all x.((Plant(x) & Flower(y)) -> HasHereditaryCharacteristic(x,y))"]}
{"id": "entailmentbank_validation_688", "nl": "inheriting is when an inherited characteristic is passed down from parent to offspring by genetics / dna.", "fol": "", "prediction": ["all x y z.((Ethertaking(x) & Parent(y) & Offspring(z)) -> (PassedDownByGenetics(x,y,z) & PassedDownByDna(x,y,z)))"]}
{"id": "entailmentbank_validation_689", "nl": "plants offspring can inherit the flower color from their parents.", "fol": "", "prediction": ["all x y.((Plant(x) & Offspring(y)) -> (EmbearsFlowerColor(y,x) & FromParents(y,x)))"]}
{"id": "entailmentbank_validation_690", "nl": "yellow is a kind of color.", "fol": "", "prediction": ["all x.(Yellow(x) -> Color(x))"]}
{"id": "entailmentbank_validation_691", "nl": "the plant offspring has yellow flowers.", "fol": "", "prediction": ["all x.(PlantOffspring(x) -> HasYellowFlowers(x))"]}
{"id": "entailmentbank_validation_692", "nl": "the parents of the plant are likely to have yellow flowers.", "fol": "", "prediction": ["all x.((Parent(x) & Plant(x)) -> YellowFlowers(x))"]}
{"id": "entailmentbank_validation_693", "nl": "a newly hatched sea turtle walks toward the ocean.", "fol": "", "prediction": ["all x.((NewlyHatchedSeaTurtle(x) & SeaTurtle(x)) -> WalksTowardsOcean(x))"]}
{"id": "entailmentbank_validation_694", "nl": "if an animal hatches from an egg then that animal is born.", "fol": "", "prediction": ["all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x))"]}
{"id": "entailmentbank_validation_695", "nl": "a sea turtle that is just born walks toward the ocean.", "fol": "", "prediction": ["all x.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x))"]}
{"id": "entailmentbank_validation_696", "nl": "an animal knows how to do instinctive behaviors when it is born.", "fol": "", "prediction": ["all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))"]}
{"id": "entailmentbank_validation_697", "nl": "walking toward the ocean is sea turtles' instinct behavior.", "fol": "", "prediction": ["all x.(WalkingTowardsOcean(x) -> SeaTurtleInstinctBehavior(x))"]}
{"id": "entailmentbank_validation_698", "nl": "a chicken is a kind of bird.", "fol": "", "prediction": ["all x.(Chicken(x) -> Bird(x))"]}
{"id": "entailmentbank_validation_699", "nl": "a chick is a kind of young / baby chicken.", "fol": "", "prediction": ["all x.(Chick(x) -> (YoungChick(x) | BabyChick(x)))"]}
{"id": "entailmentbank_validation_700", "nl": "a chick is a kind of baby bird.", "fol": "", "prediction": ["all x.(Chick(x) -> BabyBird(x))"]}
{"id": "entailmentbank_validation_701", "nl": "an example of an instinctive behavior is a baby bird pecking at its shell to hatch.", "fol": "", "prediction": ["all x.(InstinctiveBehavior(x) -> (BabyBird(x) & PecksAtShell(x) & Hatches(x)))"]}
{"id": "entailmentbank_validation_702", "nl": "a chick pecking at its shell to hatch is an example of an instictive behavior.", "fol": "", "prediction": ["all x.((Chick(x) & PecksAtShell(x) & Hatches(x)) -> InstictiveBehavior(x))"]}
{"id": "entailmentbank_validation_703", "nl": "receiving the recessive gene for a trait from each parent causes the offspring to have that recessive trait.", "fol": "", "prediction": ["all x y.((RecessiveGene(x) & ParentTrait(y)) -> CausesOffspringToHaveRecessiveTrait(x,y))"]}
{"id": "entailmentbank_validation_704", "nl": "blue eye is a recessive trait in human.", "fol": "", "prediction": ["all x.(BlueEye(x) -> RecessiveTrait(x))"]}
{"id": "entailmentbank_validation_705", "nl": "to have blue eyes requires receiving the recessive gene from each parent.", "fol": "", "prediction": ["all x.(BlueEyes(x) -> RequiresRecessiveGene(x))"]}
{"id": "entailmentbank_validation_706", "nl": "an egg cell is a kind of sex cell.", "fol": "", "prediction": ["all x.(EggCell(x) -> SexualCell(x))"]}
{"id": "entailmentbank_validation_707", "nl": "a sperm cell is a kind of sex cell.", "fol": "", "prediction": ["all x.(SpermCell(x) -> SexCell(x))"]}
{"id": "entailmentbank_validation_708", "nl": "a mutation in the sex cells of a parent can cause a new trait to appear in the parent's offspring.", "fol": "", "prediction": ["all x y.((MutationInSexCells(x) & Parent(y)) -> NewTrait(x,y))"]}
{"id": "entailmentbank_validation_709", "nl": "a mutation in sperm or egg of a parent can cause a new trait to appear in the parent's offspring.", "fol": "", "prediction": ["all x y.((Mutation(x) & Parent(y) & (Ssperm(y) | Egg(y))) -> NewTrait(x,y))"]}
{"id": "entailmentbank_validation_710", "nl": "smaller dogs have genetic trait of smaller size.", "fol": "", "prediction": ["all x.(SmallerDog(x) -> HasGeneticTraitOfSmallerSize(x))"]}
{"id": "entailmentbank_validation_711", "nl": "human are breeding german shepherd dogs to other smaller dogs.", "fol": "", "prediction": ["all x y.((Human(x) & ShepherdDog(y)) -> BreedsToSmallerDogs(x,y))"]}
{"id": "entailmentbank_validation_712", "nl": "human are breeding german shepherd dogs with dogs with genetic trait of smaller size.", "fol": "", "prediction": ["all x y.((Human(x) & GermanShipper(y) & BreedsWith(x,y)) -> BreedsWithSmallerSize(x,y))"]}
{"id": "entailmentbank_validation_713", "nl": "selective breeding is when an organism receives selective genetic traits from its parents by human design.", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y) & ReceivesSelectiveGeneticTreatments(x,y) & HumanDesign(x)) -> SelectiveBreeding(x))"]}
{"id": "entailmentbank_validation_714", "nl": "human breeding german shepherd dogs with dogs with genetic trait of smaller size is an example of selective breeding.", "fol": "", "prediction": ["all x.((Human(x) & BreedsGermanSheepdogs(x) & BreedsDogsWithSmallerSizeTreatment(x)) -> SelectiveBreeding(x))"]}
{"id": "entailmentbank_validation_715", "nl": "sexual reproduction requires both sperm and egg.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> (RequiresSsperm(x) & RequiresEgg(x)))"]}
{"id": "entailmentbank_validation_716", "nl": "the sperm production is prevented in male insects.", "fol": "", "prediction": ["all x.((MaleInsect(x) & MaleInsect(x)) -> PreventsSpermProduction(x))"]}
{"id": "entailmentbank_validation_717", "nl": "if something required for a process is not produced then that process is prevented from occurring.", "fol": "", "prediction": ["all x y.((Process(x) & RequiredFor(x,y) & -Produced(x)) -> PreventsOccurrence(x,y))"]}
{"id": "entailmentbank_validation_718", "nl": "the sexual reproduction process is prevented in the insects.", "fol": "", "prediction": ["all x y.((Insect(x) & Insect(y)) -> PreventsSexualReproduction(x,y))"]}
{"id": "entailmentbank_validation_719", "nl": "preventing reproduction decreases the rate of reproduction.", "fol": "", "prediction": ["all x.((PreventsReproduction(x) & DecreasesReproductionRate(x)) -> ReducesReproduction(x))"]}
{"id": "entailmentbank_validation_720", "nl": "sexual reproduction is a kind of reproduction.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> Reproduction(x))"]}
{"id": "entailmentbank_validation_721", "nl": "the reproduction rate in the insects will decrease.", "fol": "", "prediction": ["all x.(Insect(x) -> DecreasedReproductionRate(x))"]}
{"id": "entailmentbank_validation_722", "nl": "as the rate of reproduction decreases, the population will decrease.", "fol": "", "prediction": ["all x.((RateOfReproduction(x) & Decreases(x)) -> PopulationDecreases(x))"]}
{"id": "entailmentbank_validation_723", "nl": "the population of the insects will decrease.", "fol": "", "prediction": ["all x.(Insect(x) -> PopulationDecrease(x))"]}
{"id": "entailmentbank_validation_724", "nl": "a hammer often is made of metal.", "fol": "", "prediction": ["all x.(Hammer(x) -> MadeOfMetal(x))"]}
{"id": "entailmentbank_validation_725", "nl": "when a metal rusts, that metal becomes flaky on the surface.", "fol": "", "prediction": ["all x.((Metal(x) & Rusts(x)) -> FlakyOnSurface(x))"]}
{"id": "entailmentbank_validation_726", "nl": "when a hammer rusts, the hammer will becom flaky on the surface.", "fol": "", "prediction": ["all x.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(x))"]}
{"id": "entailmentbank_validation_727", "nl": "kim's hammer is flaky on the surface.", "fol": "", "prediction": ["all x.(Hammer(x) -> FlakyOnSurface(x))"]}
{"id": "entailmentbank_validation_728", "nl": "the hammer has rusted.", "fol": "", "prediction": ["all x.(Hammer(x) -> Rusted(x))"]}
{"id": "entailmentbank_validation_729", "nl": "rust forming is a kind of chemical change.", "fol": "", "prediction": ["all x.(RustForming(x) -> ChemicalChange(x))"]}
{"id": "entailmentbank_validation_730", "nl": "the hammer has undergone a chemical change.", "fol": "", "prediction": ["all x.(Hammer(x) -> ChemicalChange(x))"]}
{"id": "entailmentbank_validation_731", "nl": "element 3 turns to a greenish color.", "fol": "", "prediction": ["all x.(Element3(x) -> GreenishColor(x))"]}
{"id": "entailmentbank_validation_732", "nl": "an element is a kind of substance.", "fol": "", "prediction": ["all x.(Element(x) -> Substance(x))"]}
{"id": "entailmentbank_validation_733", "nl": "element 3 turning green is an example of a substance turning green.", "fol": "", "prediction": ["all x.((Element3 & TurningGreen(x)) -> TurningGreen(x))"]}
{"id": "entailmentbank_validation_734", "nl": "if the color of a substance changes then a chemical change may have occurred.", "fol": "", "prediction": ["all x.((Substance(x) & ColorChange(x)) -> ChemicalChangeOccurred(x))"]}
{"id": "entailmentbank_validation_735", "nl": "a chemical change may occur to element 3.", "fol": "", "prediction": ["all x y.((Element(x) & ChemicalChange(y)) -> MayOccur(x,y))"]}
{"id": "entailmentbank_validation_736", "nl": "fire is a kind of chemical reaction.", "fol": "", "prediction": ["all x.(Fire(x) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_737", "nl": "fire causes burning.", "fol": "", "prediction": ["all x.(Fire(x) -> CausesBurning(x))"]}
{"id": "entailmentbank_validation_738", "nl": "burning something with fire is a kind of chemical reaction.", "fol": "", "prediction": ["all x.((Burning(x) & Fire(x)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_739", "nl": "a lit candle is a source of fire.", "fol": "", "prediction": ["all x.(LitCandle(x) -> SourceOfFire(x))"]}
{"id": "entailmentbank_validation_740", "nl": "burning something with a lit candle is a kind of chemical reaction.", "fol": "", "prediction": ["all x.((Burning(x) & LitCandle(x)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_741", "nl": "magnesium is a kind of substance.", "fol": "", "prediction": ["all x.(Magnesium(x) -> Substance(x))"]}
{"id": "entailmentbank_validation_742", "nl": "burning magnesium with a lit candle is a kind of chemical reaction.", "fol": "", "prediction": ["all x.((BurningMagnesium(x) & LitCandle(x)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_743", "nl": "chemical reactions cause chemical change.", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> CausesChemicalChange(x))"]}
{"id": "entailmentbank_validation_744", "nl": "burning magnesium with fire will lead to a chemical change.", "fol": "", "prediction": ["all x.((BurningMagnesiumWithFire(x) & ChemicalChange(x)) -> LeadsTo(x,y))"]}
{"id": "entailmentbank_validation_745", "nl": "chemical reactions cause new materials to form.", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> CausesNewMaterials(x))"]}
{"id": "entailmentbank_validation_746", "nl": "chemical change is a kind of chemical reaction.", "fol": "", "prediction": ["all x.(ChemicalChange(x) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_747", "nl": "chemical changes cause new materials to form.", "fol": "", "prediction": ["all x.(ChemicalChange(x) -> CausesNewMaterials(x))"]}
{"id": "entailmentbank_validation_748", "nl": "an example of a chemical property is the elements making up a compound.", "fol": "", "prediction": ["all x.(ChemicalProperty(x) -> (ElementsMakingUpCompound(x)))"]}
{"id": "entailmentbank_validation_749", "nl": "water is a kind of compound.", "fol": "", "prediction": ["all x.(Water(x) -> Compound(x))"]}
{"id": "entailmentbank_validation_750", "nl": "an example of chemical property is the elements making up water.", "fol": "", "prediction": ["all x.(ChemicalProperty(x) -> ElementsMakingUpWater(x))"]}
{"id": "entailmentbank_validation_751", "nl": "a chemical property of water is that it is made of hydrogen and oxygen.", "fol": "", "prediction": ["all x.((Water(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> ChemicalProperty(x))"]}
{"id": "entailmentbank_validation_752", "nl": "a compound can be chemically separated into the elements that it is made of.", "fol": "", "prediction": ["all x.(Compound(x) -> CanBeChemicallySeparatedIntoElements(x))"]}
{"id": "entailmentbank_validation_753", "nl": "water can be separated into hydrogen and oxygen.", "fol": "", "prediction": ["all x.(Water(x) -> (SeparatedIntoHydrogen(x) & SeparatedIntoOxygen(x)))"]}
{"id": "entailmentbank_validation_754", "nl": "carbon dioxide is a new substance produced by sodium bicarbonate.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> (NewSubstance(x) & ProducedBySodiumBicarbonate(x)))"]}
{"id": "entailmentbank_validation_755", "nl": "chemical reactions cause new substances to form.", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> CausesNewSubstances(x))"]}
{"id": "entailmentbank_validation_756", "nl": "sodium bicarbonate releasing carbon dioxide is a chemical reaction.", "fol": "", "prediction": ["all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_757", "nl": "an example of a chemical property is how a material reacts chemically.", "fol": "", "prediction": ["all x.((Material(x) & ReactsChemically(x)) -> ChemicalProperty(x))"]}
{"id": "entailmentbank_validation_758", "nl": "releasing carbon dioxide is a kind of chemical property of sodium bicarbonate.", "fol": "", "prediction": ["all x.((ReleasesCarbonDioxide(x) & SodiumBicarbonate(x)) -> ChemicalProperty(x))"]}
{"id": "entailmentbank_validation_759", "nl": "a pencil is a kind of object.", "fol": "", "prediction": ["all x.(Pencil(x) -> Object(x))"]}
{"id": "entailmentbank_validation_760", "nl": "sharpening a pencil changes the shape of the pencil.", "fol": "", "prediction": ["all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShape(x,y))"]}
{"id": "entailmentbank_validation_761", "nl": "sharpening a pencil changes the shape of an object.", "fol": "", "prediction": ["all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShapeOfObject(y))"]}
{"id": "entailmentbank_validation_762", "nl": "tearing paper changes the shape of the paper.", "fol": "", "prediction": ["all x y.((TornPaper(x) & Paper(y)) -> ChangesShape(x,y))"]}
{"id": "entailmentbank_validation_763", "nl": "paper is a kind of object.", "fol": "", "prediction": ["all x.(Paper(x) -> Object(x))"]}
{"id": "entailmentbank_validation_764", "nl": "tearing paper changes the shape of an object.", "fol": "", "prediction": ["all x y.((TornPaper(x) & Object(y)) -> ChangesShape(x,y))"]}
{"id": "entailmentbank_validation_765", "nl": "sharpening a pencil and tearing paper both change the shape of the object.", "fol": "", "prediction": ["all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Tearing(x,y)))"]}
{"id": "entailmentbank_validation_766", "nl": "shape is a property of the appearance of an object.", "fol": "", "prediction": ["all x y.((Shape(x) & Object(y)) -> PropertyOfAppearance(x,y))"]}
{"id": "entailmentbank_validation_767", "nl": "sharpening a pencil and tearing paper both change the appearance of the object.", "fol": "", "prediction": ["all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Tears(x,y)))"]}
{"id": "entailmentbank_validation_768", "nl": "appearance is a kind of physical property.", "fol": "", "prediction": ["all x.(Appearance(x) -> PhysicalProperty(x))"]}
{"id": "entailmentbank_validation_769", "nl": "sharpending a pencil and tearing paper both change the physical property of the object.", "fol": "", "prediction": ["all x y.((Pencil(x) & Paper(y)) -> (Sharpending(x,y) & Torning(x,y)))"]}
{"id": "entailmentbank_validation_770", "nl": "if something undergoes a physical change then the physical properties of that something will change.", "fol": "", "prediction": ["all x y.((SubjectsPhysicalChange(x) & PhysicalProperties(y)) -> Change(x,y))"]}
{"id": "entailmentbank_validation_771", "nl": "pencil and paper underwent a physical change.", "fol": "", "prediction": ["all x y.((Pencil(x) & Paper(y)) -> UnderwentPhysicalChange(x,y))"]}
{"id": "entailmentbank_validation_772", "nl": "heat means temperature increases.", "fol": "", "prediction": ["all x.(Heat(x) -> TemperatureIncrease(x))"]}
{"id": "entailmentbank_validation_773", "nl": "a solid is heated.", "fol": "", "prediction": ["all x.(Solid(x) -> Heats(x))"]}
{"id": "entailmentbank_validation_774", "nl": "the temperature of the solid increases.", "fol": "", "prediction": ["all x.((Solid(x) & Temperature(x)) -> Increases(x))"]}
{"id": "entailmentbank_validation_775", "nl": "a solid is a kind of substance.", "fol": "", "prediction": ["all x.(Solid(x) -> Substance(x))"]}
{"id": "entailmentbank_validation_776", "nl": "the temperature of the solid substance increases.", "fol": "", "prediction": ["all x.((SolidSubstance(x) & TemperatureIncreases(x)) -> Increases(x))"]}
{"id": "entailmentbank_validation_777", "nl": "as the temperature of a substance increases, the molecules in that substance will move faster.", "fol": "", "prediction": ["all x y.((Substance(x) & Temperature(y) & Increases(y)) -> MobilizationFaster(x,y))"]}
{"id": "entailmentbank_validation_778", "nl": "the molecules in the solid substance moves faster.", "fol": "", "prediction": ["all x.((Molecules(x) & SolidSubstance(x)) -> MovesFaster(x))"]}
{"id": "entailmentbank_validation_779", "nl": "faster means an increase / higher in speed.", "fol": "", "prediction": ["all x.(Faster(x) -> IncreaseInSpeed(x))"]}
{"id": "entailmentbank_validation_780", "nl": "the molecules in the solid substance increases in speed.", "fol": "", "prediction": ["all x.((Molecules(x) & SolidSubstance(x)) -> IncreasesSpeed(x))"]}
{"id": "entailmentbank_validation_781", "nl": "proton is a kind of subatomic particles.", "fol": "", "prediction": ["all x.(Proton(x) -> SubatomicParticle(x))"]}
{"id": "entailmentbank_validation_782", "nl": "neutrons are a kind of subatomic particle.", "fol": "", "prediction": ["all x.(Neutron(x) -> SubatomicParticle(x))"]}
{"id": "entailmentbank_validation_783", "nl": "atomic mass is determined by the sum of protons and neutrons numbers in an atom.", "fol": "", "prediction": ["all x y.((AtomicMass(x) & Atom(y)) -> DeterminedBySumOfProtonsAndNeutrons(x,y))"]}
{"id": "entailmentbank_validation_784", "nl": "atomic mass is determined by the sum of protons and neutrons particle numbers.", "fol": "", "prediction": ["all x.(AtomicMass(x) -> (DeterminedBySumOfProtons(x) & DeterminedBySumOfNeutrons(x)))"]}
{"id": "entailmentbank_validation_785", "nl": "a proton has a positive 1 electric charge.", "fol": "", "prediction": ["all x.(Proton(x) -> PositiveElectricCharge(x,1))"]}
{"id": "entailmentbank_validation_786", "nl": "a electron has a negative -1 electric charge.", "fol": "", "prediction": ["all x.(Electron(x) -> NegativeElectricCharge(x,1))"]}
{"id": "entailmentbank_validation_787", "nl": "equal numbers of protons and electrons result in a neutral 0 electric charge.", "fol": "", "prediction": ["all x.((Proton(x) & Electron(x)) -> Neutral(x))"]}
{"id": "entailmentbank_validation_788", "nl": "a neutron has a neutral electric charge.", "fol": "", "prediction": ["all x.(Neutron(x) -> HasNeutralElectricCharge(x))"]}
{"id": "entailmentbank_validation_789", "nl": "equal numbers of protons and electrons and any number of neutrons result in a neutral 0 electric charge.", "fol": "", "prediction": ["all x.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x) & AnyNumberOfNeutrons(x)) -> Neutral0ElectricCharge(x))"]}
{"id": "entailmentbank_validation_790", "nl": "an atom is made of protons / neutrons / electrons.", "fol": "", "prediction": ["all x.(Atom(x) -> (MadeOfProtons(x) | MadeOfNeutrons(x) | MadeOfElectrons(x)))"]}
{"id": "entailmentbank_validation_791", "nl": "if an atom has an equal number of protons and electrons, then the atom will have a neutral charge.", "fol": "", "prediction": ["all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> NeutralCharge(x))"]}
{"id": "entailmentbank_validation_792", "nl": "an normal atom has a neutral electric charge.", "fol": "", "prediction": ["all x.((Atom(x) & Normal(x)) -> NeutralElectricCharge(x))"]}
{"id": "entailmentbank_validation_793", "nl": "that atom has an equal number of protons and electrons.", "fol": "", "prediction": ["all x.(Atom(x) -> (EqualProtons(x) & EqualElectrons(x)))"]}
{"id": "entailmentbank_validation_794", "nl": "iron in contact with water and oxygen will rust.", "fol": "", "prediction": ["all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))"]}
{"id": "entailmentbank_validation_795", "nl": "iron in contact with water and oxygen causes a chemical change.", "fol": "", "prediction": ["all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalChange(x))"]}
{"id": "entailmentbank_validation_796", "nl": "iron in contact with water and oxygen is an example of chemical reactions.", "fol": "", "prediction": ["all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_797", "nl": "alkaline earth metals are highly chemically reactive.", "fol": "", "prediction": ["all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))"]}
{"id": "entailmentbank_validation_798", "nl": "elements from the same group in the periodic table are chemically reactive in a similar way.", "fol": "", "prediction": ["all x y.((Element(x) & Element(y) & SameGroup(x,y)) -> ChemicallyReactive(x))"]}
{"id": "entailmentbank_validation_799", "nl": "elements that belong to alkaline earth metals are highly chemically reactive.", "fol": "", "prediction": ["all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))"]}
{"id": "entailmentbank_validation_800", "nl": "magnesium belongs to alkaline earth metal family, group 2 on the periodic table.", "fol": "", "prediction": ["all x.(Magnesium(x) -> (AlkalineEarthMetal(x) & Group2OnPeriodicTable(x)))"]}
{"id": "entailmentbank_validation_801", "nl": "magnesium is highly chemically reactive.", "fol": "", "prediction": ["all x.(Magnesium(x) -> HighlyChemicallyReactive(x))"]}
{"id": "entailmentbank_validation_802", "nl": "an element cannot be decomposed into two or more different substances by simple chemical methods.", "fol": "", "prediction": ["all x.(Element(x) -> -DecomposedBySimpleChemicalMethods(x))"]}
{"id": "entailmentbank_validation_803", "nl": "sulfur cannot be decomposed into different substances by simple chemical methods.", "fol": "", "prediction": ["all x.(Sulfur(x) -> -DecomposedBySimpleChemicalMethods(x))"]}
{"id": "entailmentbank_validation_804", "nl": "sulfur is a kind of element.", "fol": "", "prediction": ["all x.(Sulfur(x) -> Element(x))"]}
{"id": "entailmentbank_validation_805", "nl": "iron is a kind of element.", "fol": "", "prediction": ["all x.(Iron(x) -> Element(x))"]}
{"id": "entailmentbank_validation_806", "nl": "the chemical symbol for iron is fe.", "fol": "", "prediction": ["all x.((ChemicalSymbol(x) & Iron(x)) -> Fe(x))"]}
{"id": "entailmentbank_validation_807", "nl": "fe is the chemical symbol for iron element.", "fol": "", "prediction": ["all x.(Fe(x) -> ChemicalSymbolForIronElement(x))"]}
{"id": "entailmentbank_validation_808", "nl": "if a substance is made of one element, then the substance is called an element.", "fol": "", "prediction": ["all x.((Substance(x) & MadeOfOneElement(x)) -> Element(x))"]}
{"id": "entailmentbank_validation_809", "nl": "oxygen gas is made of only oxygen element.", "fol": "", "prediction": ["all x.(OxygenGas(x) -> MadeOfOxygenElement(x))"]}
{"id": "entailmentbank_validation_810", "nl": "oxygen gas is an element.", "fol": "", "prediction": ["all x.(OxygenGas(x) -> Element(x))"]}
{"id": "entailmentbank_validation_811", "nl": "o2 is a chemical formula for oxygen gas.", "fol": "", "prediction": ["all x.(O2(x) -> ChemicalFormationForOxygenGas(x))"]}
{"id": "entailmentbank_validation_812", "nl": "o2 is an element.", "fol": "", "prediction": ["all x.(O2(x) -> Element(x))"]}
{"id": "entailmentbank_validation_813", "nl": "the chemical symbol for tellurium is te.", "fol": "", "prediction": ["all x.(Tellurium(x) -> ChemicalSymbol(x))"]}
{"id": "entailmentbank_validation_814", "nl": "tellurium is a kind of metalloid.", "fol": "", "prediction": ["all x.(Tellurium(x) -> Metalloid(x))"]}
{"id": "entailmentbank_validation_815", "nl": "te is a kind of metalloid.", "fol": "", "prediction": ["all x.(Te(x) -> Metalloid(x))"]}
{"id": "entailmentbank_validation_816", "nl": "antimony is a kind of metalloid.", "fol": "", "prediction": ["all x.(Antimony(x) -> Metalloid(x))"]}
{"id": "entailmentbank_validation_817", "nl": "the chemical symbol for antimony is sb.", "fol": "", "prediction": ["all x.(Antimony(x) -> ChemicalSymbol(x))"]}
{"id": "entailmentbank_validation_818", "nl": "sb is a kind of metalloid.", "fol": "", "prediction": ["all x.(Sb(x) -> Metalloid(x))"]}
{"id": "entailmentbank_validation_819", "nl": "sb and te are both metalloids.", "fol": "", "prediction": ["(Metalloid(sb) & Metalloid(te))"]}
{"id": "entailmentbank_validation_820", "nl": "helium / neon / argon / krypton / xenon / radon belongs to noble gases family, group 18 on the periodic table.", "fol": "", "prediction": ["all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> NobleGasesFamily(x))"]}
{"id": "entailmentbank_validation_821", "nl": "elements in group 18 have complete outer electron shells on the periodic table of elements.", "fol": "", "prediction": ["all x.((Element(x) & Group18(x)) -> CompleteOuterElectronShells(x))"]}
{"id": "entailmentbank_validation_822", "nl": "helium, neon, argon, krypton, xenon, and radon have complete outer electron shells.", "fol": "", "prediction": ["all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> CompleteOuterElectronShells(x))"]}
{"id": "entailmentbank_validation_823", "nl": "if the outermost electron shell of an atom is complete, then the element of those atoms will not react with other elements easily.", "fol": "", "prediction": ["all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> -ReactsWithElementsEasily(x,y))"]}
{"id": "entailmentbank_validation_824", "nl": "helium, neon, argon, krypton, xenon, and radon will not react with other elements easily.", "fol": "", "prediction": ["all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> -ReactsWithElementsEasily(x))"]}
{"id": "entailmentbank_validation_825", "nl": "water is a kind of substance.", "fol": "", "prediction": ["all x.(Water(x) -> Substance(x))"]}
{"id": "entailmentbank_validation_826", "nl": "boiling means matter / a substance changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidToGas(y) & IncreasesHeatEnergy(y)))"]}
{"id": "entailmentbank_validation_827", "nl": "water boiling is when water changes from a liquid into a gas.", "fol": "", "prediction": ["all x.((Water(x) & Liquid(x) & Gas(x)) -> Boiling(x))"]}
{"id": "entailmentbank_validation_828", "nl": "water is in the gas state, called water vapor / steam, for temperatures above 100 c.", "fol": "", "prediction": ["all x.((Water(x) & GasState(x) & TemperatureAbove100C(x)) -> WaterVaporSteam(x))"]}
{"id": "entailmentbank_validation_829", "nl": "water is in the liquid state, called liquid water, for temperatures between 0 c and 100 c.", "fol": "", "prediction": ["all x.((Water(x) & LiquidState(x)) -> (Temperature(x,0) | Temperature(x,100)))"]}
{"id": "entailmentbank_validation_830", "nl": "water boiling is when water changes from liquid water to water vapor.", "fol": "", "prediction": ["all x.(WaterBoiling(x) -> WaterChangesFromLiquidWaterToWaterVapor(x))"]}
{"id": "entailmentbank_validation_831", "nl": "water boiling is when water changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x.((Water(x) & Liquid(x) & Gas(x) & IncreasesHeatEnergy(x)) -> Boiling(x))"]}
{"id": "entailmentbank_validation_832", "nl": "a puddle is a kind of body of water.", "fol": "", "prediction": ["all x.(Puddle(x) -> BodyOfWater(x))"]}
{"id": "entailmentbank_validation_833", "nl": "being in the sun will cause the puddle to absorb heat energy.", "fol": "", "prediction": ["all x.(SunInPuddle(x) -> AbsorbsHeatEnergy(x))"]}
{"id": "entailmentbank_validation_834", "nl": "the puddle will evaporate.", "fol": "", "prediction": ["all x.(Puddle(x) -> Evaporates(x))"]}
{"id": "entailmentbank_validation_835", "nl": "an example of evaporation is a body of water drying up by absorbing heat energy.", "fol": "", "prediction": ["all x.(Evaporation(x) -> (BodyOfWater(x) & DryingUpByAbsorbingHeatEnergy(x)))"]}
{"id": "entailmentbank_validation_836", "nl": "a puddle drying in the sun is an example of evaporation.", "fol": "", "prediction": ["all x.((Puddle(x) & DryingInSun(x)) -> Evaporation(x))"]}
{"id": "entailmentbank_validation_837", "nl": "if something is in the sunlight then that something will absorb solar energy.", "fol": "", "prediction": ["all x.((Sunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_validation_838", "nl": "a bucket of water in in the sunlight.", "fol": "", "prediction": ["all x.((BootOfWater(x) & InSunlight(x)) -> InSunlight(x))"]}
{"id": "entailmentbank_validation_839", "nl": "the water in the bucket will absorb solar energy.", "fol": "", "prediction": ["all x.((Water(x) & Bucket(x)) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_validation_840", "nl": "if a substance absorbs solar energy then that substance will increase in temperature.", "fol": "", "prediction": ["all x.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(x))"]}
{"id": "entailmentbank_validation_841", "nl": "the water in the bucket will increase in temperature.", "fol": "", "prediction": ["all x.((Water(x) & Bucket(x)) -> IncreasesTemperature(x))"]}
{"id": "entailmentbank_validation_842", "nl": "evaporation means a substance changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x y.((Substance(x) & Liquid(y) & Gas(y)) -> ChangesFromTo(x,y))"]}
{"id": "entailmentbank_validation_843", "nl": "the water in the bucket will evaporate.", "fol": "", "prediction": ["all x.((Water(x) & Bucket(x)) -> Evaporates(x))"]}
{"id": "entailmentbank_validation_844", "nl": "gas is a kind of substance.", "fol": "", "prediction": ["all x.(Gas(x) -> Substance(x))"]}
{"id": "entailmentbank_validation_845", "nl": "substances are made of molecules.", "fol": "", "prediction": ["all x.(Substance(x) -> MadeOfMolecules(x))"]}
{"id": "entailmentbank_validation_846", "nl": "a gas is made of its molecules.", "fol": "", "prediction": ["all x.(Gas(x) -> MadeOfMolecules(x))"]}
{"id": "entailmentbank_validation_847", "nl": "a gas is heated and its temperature increases.", "fol": "", "prediction": ["all x.(Gas(x) -> (Heated(x) & TemperatureIncreases(x)))"]}
{"id": "entailmentbank_validation_848", "nl": "as the temperature of a substance increases, the molecules in that substance will move faster / farther apart.", "fol": "", "prediction": ["all x y.((Substance(x) & Temperature(y) & Increases(x,y)) -> MoleculesMoveFaster(x,y))"]}
{"id": "entailmentbank_validation_849", "nl": "the molecules in the gas will move faster.", "fol": "", "prediction": ["all x.(Molecule(x) -> MoveFaster(x))"]}
{"id": "entailmentbank_validation_850", "nl": "comparing a property of two objects requires knowing the property of each object.", "fol": "", "prediction": ["all x y.((Property(x,y) & Property(y)) -> KnowsPropertyOfObject(x,y))"]}
{"id": "entailmentbank_validation_851", "nl": "a rock is a kind of object.", "fol": "", "prediction": ["all x.(Rock(x) -> Object(x))"]}
{"id": "entailmentbank_validation_852", "nl": "mass is a property of objects / matter.", "fol": "", "prediction": ["all x.(Mass(x) -> PropertyOfObjects(x))"]}
{"id": "entailmentbank_validation_853", "nl": "comparing the mass of two rocks requires knowing the mass of each rock.", "fol": "", "prediction": ["all x y.((Rock(x) & Rock(y)) -> ComparesMass(x,y))"]}
{"id": "entailmentbank_validation_854", "nl": "student is trying to compare the mass of two small rocks.", "fol": "", "prediction": ["all x y.((Student(x) & SmallRock(y)) -> CompareMass(x,y))"]}
{"id": "entailmentbank_validation_855", "nl": "the student has to know the mass of each rock to compare them.", "fol": "", "prediction": ["all x y.((Student(x) & Rock(y)) -> KnowsMassToCompare(x,y))"]}
{"id": "entailmentbank_validation_856", "nl": "a balance is used for measuring mass / weight of an object / of a substance.", "fol": "", "prediction": ["all x y.((Balance(x) & Object(y)) -> MeasuresMassAndWeight(x,y))"]}
{"id": "entailmentbank_validation_857", "nl": "a balance is a kind of instrument.", "fol": "", "prediction": ["all x.(Balance(x) -> Instrument(x))"]}
{"id": "entailmentbank_validation_858", "nl": "the student can use balance to know the mass of each rock to compare them.", "fol": "", "prediction": ["all x y.((Student(x) & Rock(y)) -> (UsesBalance(x,y) & KnowsMass(x,y)))"]}
{"id": "entailmentbank_validation_859", "nl": "a balance is used for measuring mass of a substance.", "fol": "", "prediction": ["all x y.((Balance(x) & Substance(y)) -> MeasuresMass(x,y))"]}
{"id": "entailmentbank_validation_860", "nl": "sand is a kind of substance.", "fol": "", "prediction": ["all x.(Sand(x) -> Substance(x))"]}
{"id": "entailmentbank_validation_861", "nl": "a balance can be used for measure the mass of sand.", "fol": "", "prediction": ["all x.(Balance(x) -> MeasuresMassOfSand(x))"]}
{"id": "entailmentbank_validation_862", "nl": "determining something often requires measuring that something.", "fol": "", "prediction": ["all x.((Determining(x) & Something(x)) -> RequiresMeasuring(x))"]}
{"id": "entailmentbank_validation_863", "nl": "determining the mass of the sand requires using a balance to measure the mass of the sand.", "fol": "", "prediction": ["all x y.((Sand(x) & Balance(y)) -> DeterminesMass(x,y))"]}
{"id": "entailmentbank_validation_864", "nl": "a balance is used for measuring the mass of an object.", "fol": "", "prediction": ["all x y.((Balance(x) & Object(y)) -> MeasuresMass(x,y))"]}
{"id": "entailmentbank_validation_865", "nl": "density can be calculated by measuring the mass of an object divided by the volume of that object.", "fol": "", "prediction": ["all x y.((Object(x) & Mass(y) & Volume(y)) -> CalculatedByMeasuring(x,y))"]}
{"id": "entailmentbank_validation_866", "nl": "a graduated cylinder is used to measure volume of an object.", "fol": "", "prediction": ["all x y.((GraduatedCylinder(x) & Object(y)) -> MeasuresVolume(x,y))"]}
{"id": "entailmentbank_validation_867", "nl": "the density of an object can be measured using a graduated cylinder and a balance.", "fol": "", "prediction": ["all x y.((Object(x) & GradientCylinder(y) & Balance(y)) -> MeasuresDensity(x,y))"]}
{"id": "entailmentbank_validation_868", "nl": "a marble is a kind of object.", "fol": "", "prediction": ["all x.(Marble(x) -> Object(x))"]}
{"id": "entailmentbank_validation_869", "nl": "the density of a marble can be measured using a graduated cylinder and a balance.", "fol": "", "prediction": ["all x y.((Marble(x) & GraduatedCylinder(y) & Balance(y)) -> DensityMeasured(x,y))"]}
{"id": "entailmentbank_validation_870", "nl": "if a unit of for something is being measured, then it requires a measurement tool for measuring that something.", "fol": "", "prediction": ["all x y.((UnitOf(x,y) & Measured(x)) -> RequiresMeasurementTool(x,y))"]}
{"id": "entailmentbank_validation_871", "nl": "milliliters ml are a metric unit used for measuring volume.", "fol": "", "prediction": ["all x.(MillilitersMl(x) -> MetricUnit(x))"]}
{"id": "entailmentbank_validation_872", "nl": "measuring milliliters requires a tool for measuring volume.", "fol": "", "prediction": ["all x.(MeasuresMilliliters(x) -> RequiresToolForMeasuringVolume(x))"]}
{"id": "entailmentbank_validation_873", "nl": "measuring milliliters requires a graduated cylinder.", "fol": "", "prediction": ["all x.(MeasuresMilliliters(x) -> RequiresGraduatedCylinder(x))"]}
{"id": "entailmentbank_validation_874", "nl": "a sample in a cylindrical container has a cylindrical shape and a fixed volume.", "fol": "", "prediction": ["all x y.((Sample(x) & CylindricalContainer(y)) -> (CylindricalShape(x) & FixedVolume(x)))"]}
{"id": "entailmentbank_validation_875", "nl": "a sample is a kind of matter.", "fol": "", "prediction": ["all x.(Sample(x) -> Matter(x))"]}
{"id": "entailmentbank_validation_876", "nl": "the matter has the same shape as the container and fixed volume.", "fol": "", "prediction": ["all x.((Matter(x) & SameShapeAsContainer(x) & FixedVolume(x)) -> HasSameShapeAsContainer(x))"]}
{"id": "entailmentbank_validation_877", "nl": "matter with variable shape changes shape in different container.", "fol": "", "prediction": ["all x.((Matter(x) & VariableShapeChange(x)) -> DifferentContainer(x))"]}
{"id": "entailmentbank_validation_878", "nl": "the matter may have a variable shape and a fixed volume.", "fol": "", "prediction": ["all x.(Matter(x) -> (VariableShape(x) & FixedVolume(x)))"]}
{"id": "entailmentbank_validation_879", "nl": "the matter may have a fixed shape and a fixed volume.", "fol": "", "prediction": ["all x.(Matter(x) -> (FobbyShape(x) & FixedVolume(x)))"]}
{"id": "entailmentbank_validation_880", "nl": "the matter may have a fixed or variable shape and fixed volume.", "fol": "", "prediction": ["all x.(Matter(x) -> (FobbedShape(x) | VariableShape(x) & FixedVolume(x)))"]}
{"id": "entailmentbank_validation_881", "nl": "matter in the solid phase has definite shape.", "fol": "", "prediction": ["all x.((Matter(x) & SolidPhase(x)) -> HasDefinedShape(x))"]}
{"id": "entailmentbank_validation_882", "nl": "matter in the solid phase has definite volume.", "fol": "", "prediction": ["all x.((Matter(x) & SolidPhase(x)) -> DefiniteVolume(x))"]}
{"id": "entailmentbank_validation_883", "nl": "matter in solid phase has definite volume and definite shape.", "fol": "", "prediction": ["all x.((Matter(x) & SolidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))"]}
{"id": "entailmentbank_validation_884", "nl": "matter in the liquid phase has variable shape.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> VariableShape(x))"]}
{"id": "entailmentbank_validation_885", "nl": "matter in the liquid phase has definite volume.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> DefiniteVolume(x))"]}
{"id": "entailmentbank_validation_886", "nl": "matter in the liquid phase has a variable shape and definite volume.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> (VariableShape(x) & DefiniteVolume(x)))"]}
{"id": "entailmentbank_validation_887", "nl": "the matter may be in solid phase or in liquid phase.", "fol": "", "prediction": ["all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))"]}
{"id": "entailmentbank_validation_888", "nl": "seeing small things with bare eyes is difficult.", "fol": "", "prediction": ["all x.((SmallThing(x) & BareEyes(x)) -> DifficultToSee(x))"]}
{"id": "entailmentbank_validation_889", "nl": "an insect usually has a small size.", "fol": "", "prediction": ["all x.(Insect(x) -> SmallSize(x))"]}
{"id": "entailmentbank_validation_890", "nl": "seeing an insect with bare eyes is difficult.", "fol": "", "prediction": ["all x.((Insect(x) & BareEyes(x)) -> DifficultToSee(x))"]}
{"id": "entailmentbank_validation_891", "nl": "magnifying glass is used to see small things by making objects appear bigger.", "fol": "", "prediction": ["all x.(MagnifyingGlass(x) -> (SeesSmallThings(x) & MakesObjectsAppearBigger(x)))"]}
{"id": "entailmentbank_validation_892", "nl": "magnifying glass can be used to see an insect by making it appear bigger.", "fol": "", "prediction": ["all x y.((MagnifyingGlass(x) & Insect(y)) -> CanBeUsedToSee(x,y))"]}
{"id": "entailmentbank_validation_893", "nl": "a hand lens is a kind of magnifying glass.", "fol": "", "prediction": ["all x.(HandLens(x) -> MagnifyingGlass(x))"]}
{"id": "entailmentbank_validation_894", "nl": "a hand lens can help seeing the insect by magnifying the insect.", "fol": "", "prediction": ["all x y.((HandLens(x) & Insect(y)) -> HelpsSeeingByMagnifying(x,y))"]}
{"id": "entailmentbank_validation_895", "nl": "building a doghouse requires cutting materials into a fixed size.", "fol": "", "prediction": ["all x.(Doghouse(x) -> RequiresCuttingMaterials(x))"]}
{"id": "entailmentbank_validation_896", "nl": "cutting a material usually requires measuring length.", "fol": "", "prediction": ["all x y.((Material(x) & Material(y)) -> (Cutting(x,y) & RequiresMeasuringLength(x,y)))"]}
{"id": "entailmentbank_validation_897", "nl": "cutting a material when building a doghouse  requires measuring length.", "fol": "", "prediction": ["all x.((Doghouse(x) & Building(x)) -> RequiresMeasurementLength(x))"]}
{"id": "entailmentbank_validation_898", "nl": "a tape can be used to measure length.", "fol": "", "prediction": ["all x.(Tape(x) -> MeasuresLength(x))"]}
{"id": "entailmentbank_validation_899", "nl": "cutting wood when building a doghouse requires using a tape.", "fol": "", "prediction": ["all x.((Doghouse(x) & Building(x)) -> RequiresTape(x))"]}
{"id": "entailmentbank_validation_900", "nl": "food is a kind of substance.", "fol": "", "prediction": ["all x.(Food(x) -> Substance(x))"]}
{"id": "entailmentbank_validation_901", "nl": "candy is a kind of food.", "fol": "", "prediction": ["all x.(Candy(x) -> Food(x))"]}
{"id": "entailmentbank_validation_902", "nl": "candy is a kind of substance.", "fol": "", "prediction": ["all x.(Candy(x) -> Substance(x))"]}
{"id": "entailmentbank_validation_903", "nl": "a thermometer is used to measure temperature of substance.", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresTemperatureOfSubstance(x))"]}
{"id": "entailmentbank_validation_904", "nl": "a thermometer is used to measure the temperautre of the candy.", "fol": "", "prediction": ["all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperature(x,y))"]}
{"id": "entailmentbank_validation_905", "nl": "a string is short in length.", "fol": "", "prediction": ["all x.(String(x) -> ShortLength(x))"]}
{"id": "entailmentbank_validation_906", "nl": "centimeter is usually used to measure short length.", "fol": "", "prediction": ["all x.(Centimeter(x) -> UsedToMeasureShortLength(x))"]}
{"id": "entailmentbank_validation_907", "nl": "centimeter is a better unit to measure the length of the string.", "fol": "", "prediction": ["all x.((Centimeter(x) & String(y)) -> BetterUnitToMeasureLength(x,y))"]}
{"id": "entailmentbank_validation_908", "nl": "meters m are a metric / si unit used for measuring length.", "fol": "", "prediction": ["all x.(Measurement(x) -> (MetalUnit(x) & SiUnit(x) & UsedForMeasuringLength(x)))"]}
{"id": "entailmentbank_validation_909", "nl": "yard is an imperial unit used for measuring length.", "fol": "", "prediction": ["all x.(Garden(x) -> (ImperialUnit(x) & MeasuresLength(x)))"]}
{"id": "entailmentbank_validation_910", "nl": "yard and meter are both unit used for measuring length.", "fol": "", "prediction": ["all x.((MeasuresLength(x) & MeasuresLength(x)) -> (MeasuresLength(x) & MeasuresLength(x)))"]}
{"id": "entailmentbank_validation_911", "nl": "1 yard equals to 09 meter.", "fol": "", "prediction": ["all x.((Garden(x) & Yard(x)) -> (09Meter(x)))"]}
{"id": "entailmentbank_validation_912", "nl": "meter is the metric unit that is the most similar to yard.", "fol": "", "prediction": ["all x.(Meter(x) -> MostSameToGarden(x))"]}
{"id": "entailmentbank_validation_913", "nl": "zinc is a kind of metal.", "fol": "", "prediction": ["all x.(Zinc(x) -> Metal(x))"]}
{"id": "entailmentbank_validation_914", "nl": "copper is a kind of metal.", "fol": "", "prediction": ["all x.(Cuivre(x) -> Metal(x))"]}
{"id": "entailmentbank_validation_915", "nl": "copper and zinc are two metals.", "fol": "", "prediction": ["(Metal(copper) & Metal(zinc))"]}
{"id": "entailmentbank_validation_916", "nl": "brass is made of copper and zinc.", "fol": "", "prediction": ["all x.(Brass(x) -> (MadeOf(x,Cuid) & MadeOf(x,Zinc)))"]}
{"id": "entailmentbank_validation_917", "nl": "brass is made of two metals.", "fol": "", "prediction": ["all x.(Brass(x) -> MadeOfTwoMetals(x))"]}
{"id": "entailmentbank_validation_918", "nl": "an alloy is made of two or more metals.", "fol": "", "prediction": ["all x.(Alloy(x) -> (MadeOfMetals(x,2) | MadeOfMetals(x,3)))"]}
{"id": "entailmentbank_validation_919", "nl": "brass is a kind of alloy.", "fol": "", "prediction": ["all x.(Brass(x) -> Alloy(x))"]}
{"id": "entailmentbank_validation_920", "nl": "a rough surface can absorb sound.", "fol": "", "prediction": ["all x.(RoughSurface(x) -> AbsorbsSound(x))"]}
{"id": "entailmentbank_validation_921", "nl": "a carpet can absorb sound.", "fol": "", "prediction": ["all x.(Cedar(x) -> AbsorbsSound(x))"]}
{"id": "entailmentbank_validation_922", "nl": "if sound is absorbed, then sound can not reflect off the surface.", "fol": "", "prediction": ["all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -ReflectOffSurface(x))"]}
{"id": "entailmentbank_validation_923", "nl": "sound cannot reflect off the surface of a carpet.", "fol": "", "prediction": ["all x.((Sound(x) & Carpet(y)) -> -ReflectsOffSurface(x,y))"]}
{"id": "entailmentbank_validation_924", "nl": "echo is when sound reflects off a smooth surface.", "fol": "", "prediction": ["all x.(Echo(x) -> ReflectsSoundOffSmoothSurface(x))"]}
{"id": "entailmentbank_validation_925", "nl": "echo will not be produced.", "fol": "", "prediction": ["all x.(Echo(x) -> -Produced(x))"]}
{"id": "entailmentbank_validation_926", "nl": "helium is less in density than air.", "fol": "", "prediction": ["all x.(Helium(x) -> LessDensityThanAir(x))"]}
{"id": "entailmentbank_validation_927", "nl": "a balloon is a kind of container.", "fol": "", "prediction": ["all x.(Balloon(x) -> Container(x))"]}
{"id": "entailmentbank_validation_928", "nl": "a balloon filled with helium is an example of a container contains a substance with less density than air.", "fol": "", "prediction": ["all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLessDensityThanAir(x))"]}
{"id": "entailmentbank_validation_929", "nl": "if a container contains a substance with less density than air then that container may move upward.", "fol": "", "prediction": ["all x.((Container(x) & ContainsSubstanceWithLessDensityThanAir(x)) -> MayMoveUpward(x))"]}
{"id": "entailmentbank_validation_930", "nl": "the balloon filled with helium may move upward if released.", "fol": "", "prediction": ["all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))"]}
{"id": "entailmentbank_validation_931", "nl": "a white object reflects all visible light.", "fol": "", "prediction": ["all x.(WhiteObject(x) -> ReflectsVisibleLight(x))"]}
{"id": "entailmentbank_validation_932", "nl": "the floor is a kind of object.", "fol": "", "prediction": ["all x.(Floor(x) -> Object(x))"]}
{"id": "entailmentbank_validation_933", "nl": "a white door will reflect all visible light.", "fol": "", "prediction": ["all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))"]}
{"id": "entailmentbank_validation_934", "nl": "the ice melts.", "fol": "", "prediction": ["all x.(Ice(x) -> Melts(x))"]}
{"id": "entailmentbank_validation_935", "nl": "melting is a kind of phase change.", "fol": "", "prediction": ["all x.(Melting(x) -> PhaseChange(x))"]}
{"id": "entailmentbank_validation_936", "nl": "the ice undergoes a phase change.", "fol": "", "prediction": ["all x.(Ice(x) -> UndergoesPhaseChange(x))"]}
{"id": "entailmentbank_validation_937", "nl": "phase changes do not change mass.", "fol": "", "prediction": ["all x.(PhaseChange(x) -> -ChangeMass(x))"]}
{"id": "entailmentbank_validation_938", "nl": "the mass of the ice will not change.", "fol": "", "prediction": ["all x.(Ice(x) -> -ChangeMass(x))"]}
{"id": "entailmentbank_validation_939", "nl": "a bubble is made of pockets of gas trapped inside a liquid or solid.", "fol": "", "prediction": ["all x.(Bubble(x) -> (PotsOfGas(x) & EmbeddedInLiquidOrSolid(x)))"]}
{"id": "entailmentbank_validation_940", "nl": "soap bubbles are made of air trapped inside soap liquid.", "fol": "", "prediction": ["all x.(SoapBall(x) -> (MadeOfAir(x) & CapturedInSoapLiquid(x)))"]}
{"id": "entailmentbank_validation_941", "nl": "air is inside the soap bubbles.", "fol": "", "prediction": ["all x.(SoapBalloon(x) -> Inside(x))"]}
{"id": "entailmentbank_validation_942", "nl": "matter in the liquid phase has definite volume and variable shape.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & VariableShape(x)))"]}
{"id": "entailmentbank_validation_943", "nl": "indefinite means variable.", "fol": "", "prediction": ["all x.(IndefiniteMeanVariable(x) -> Indefinite(x))"]}
{"id": "entailmentbank_validation_944", "nl": "matter in the liquid phase has definite volume and indefinite shape.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))"]}
{"id": "entailmentbank_validation_945", "nl": "substances are made of matter.", "fol": "", "prediction": ["all x.(Substance(x) -> MadeOfMatter(x))"]}
{"id": "entailmentbank_validation_946", "nl": "a compound is a kind of substance.", "fol": "", "prediction": ["all x.(Compound(x) -> Substance(x))"]}
{"id": "entailmentbank_validation_947", "nl": "a compound is made of matter.", "fol": "", "prediction": ["all x.(Compound(x) -> MadeOfMatter(x))"]}
{"id": "entailmentbank_validation_948", "nl": "a compound in the liquid phase has definite volume and indefinite shape.", "fol": "", "prediction": ["all x.((Compound(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))"]}
{"id": "entailmentbank_validation_949", "nl": "water is in the solid state, called ice.", "fol": "", "prediction": ["all x.(Water(x) -> SolidState(x))"]}
{"id": "entailmentbank_validation_950", "nl": "hail is a kind of ice.", "fol": "", "prediction": ["all x.(Hail(x) -> Ice(x))"]}
{"id": "entailmentbank_validation_951", "nl": "hail is water in solid ice.", "fol": "", "prediction": ["all x.(Hail(x) -> WaterInSolidIce(x))"]}
{"id": "entailmentbank_validation_952", "nl": "an airplane is used for moving people to far away places.", "fol": "", "prediction": ["all x.(Airplane(x) -> MovesPeopleToFarAwayPlaces(x))"]}
{"id": "entailmentbank_validation_953", "nl": "an airplane is fast in speed.", "fol": "", "prediction": ["all x.(Airplane(x) -> FastSpeed(x))"]}
{"id": "entailmentbank_validation_954", "nl": "an airplane can move people to far away places quickly.", "fol": "", "prediction": ["all x y.((Airplane(x) & Person(y)) -> MovesToFarAwayPlacesQuickly(x,y))"]}
{"id": "entailmentbank_validation_955", "nl": "a cake is a kind of baked product.", "fol": "", "prediction": ["all x.(Cake(x) -> BakedProduct(x))"]}
{"id": "entailmentbank_validation_956", "nl": "baking is when a human makes food by adding heat.", "fol": "", "prediction": ["all x.(Baking(x) -> (Human(x) & MakesFoodByAdditingHeat(x)))"]}
{"id": "entailmentbank_validation_957", "nl": "a cake is a product made by human adding heat to it.", "fol": "", "prediction": ["all x.(Cake(x) -> (HumanAddition(x) & MadeBy(x)))"]}
{"id": "entailmentbank_validation_958", "nl": "transportation technology is a kind of system for moving people and products.", "fol": "", "prediction": ["all x.(TransportationTechnology(x) -> (MovingPeople(x) & MovingProducts(x)))"]}
{"id": "entailmentbank_validation_959", "nl": "transportation technology is used for moving people / products.", "fol": "", "prediction": ["all x.(TransportationTechnology(x) -> (MovingPeople(x) | MovingProducts(x)))"]}
{"id": "entailmentbank_validation_960", "nl": "transportation technology is a system that moves people and products.", "fol": "", "prediction": ["all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))"]}
{"id": "entailmentbank_validation_961", "nl": "a refrigerator is used for keeping food fresh for a long period of time.", "fol": "", "prediction": ["all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriodOfTime(x)))"]}
{"id": "entailmentbank_validation_962", "nl": "the invention of the refrigerator with self-contained unit occurred in 1923.", "fol": "", "prediction": ["all x.((Refrigerator(x) & SelfContainedUnit(x)) -> Invention(x))"]}
{"id": "entailmentbank_validation_963", "nl": "refrigerator is the invention that can keep food fresh for a long period of time.", "fol": "", "prediction": ["all x.(Refrigerator(x) -> (Invention(x) & KeepsFoodFresh(x) & LongPeriodOfTime(x)))"]}
{"id": "entailmentbank_validation_964", "nl": "radio station broadcasting is a source of radio waves.", "fol": "", "prediction": ["all x.(RadioStation(x) -> RadioWavesSource(x))"]}
{"id": "entailmentbank_validation_965", "nl": "a source of something emits that something.", "fol": "", "prediction": ["all x y.((Source(x) & Something(y)) -> Emits(x,y))"]}
{"id": "entailmentbank_validation_966", "nl": "radio station broadcasting emits radio waves.", "fol": "", "prediction": ["all x.(RadioStation(x) & Broadcasting(x) -> EmitsRadioWaves(x))"]}
{"id": "entailmentbank_validation_967", "nl": "radio transmitter emits radio waves.", "fol": "", "prediction": ["all x.(RadioTransmitter(x) -> EmitsRadioWaves(x))"]}
{"id": "entailmentbank_validation_968", "nl": "radio station is a radio transmitter.", "fol": "", "prediction": ["all x.(RadioStation(x) -> RadioTransmitter(x))"]}
{"id": "entailmentbank_validation_969", "nl": "pliers are a kind of hand tool.", "fol": "", "prediction": ["all x.(Plier(x) -> HandTool(x))"]}
{"id": "entailmentbank_validation_970", "nl": "pliers are made of two levers for gripping.", "fol": "", "prediction": ["all x.(Plier(x) -> (HasTwoLevers(x) & ForGripping(x)))"]}
{"id": "entailmentbank_validation_971", "nl": "pliers are a tool made of two levers for gripping.", "fol": "", "prediction": ["all x.(Plier(x) -> (Tool(x) & MadeOfTwoLevers(x) & ForGripping(x)))"]}
{"id": "entailmentbank_validation_972", "nl": "gripping produces gripping force.", "fol": "", "prediction": ["all x.(Gripping(x) -> ProducesGrippingForce(x))"]}
{"id": "entailmentbank_validation_973", "nl": "pliers are a tool that can produce gripping force.", "fol": "", "prediction": ["all x.(Plier(x) -> (ProducesGrippingForce(x) & CanProduceGrippingForce(x)))"]}
{"id": "entailmentbank_validation_974", "nl": "a gripping force can be used to tighten a mechanical fastener.", "fol": "", "prediction": ["all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))"]}
{"id": "entailmentbank_validation_975", "nl": "pliers can be used to tighten a mechanical fastener.", "fol": "", "prediction": ["all x y.((Plier(x) & MechanicalFastener(y)) -> Tighten(x,y))"]}
{"id": "entailmentbank_validation_976", "nl": "advances in technology sometimes cause human jobs to be replaced by more efficient machines.", "fol": "", "prediction": ["all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(y,x))"]}
{"id": "entailmentbank_validation_977", "nl": "replacing something decreases that something.", "fol": "", "prediction": ["all x y.((Replacement(x) & Something(y)) -> Decreases(x,y))"]}
{"id": "entailmentbank_validation_978", "nl": "advances in technology decrease human jobs by replacing them with efficient machines.", "fol": "", "prediction": ["all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> (Decreases(x,y) & ReplacesWithEfficientMachines(x,y)))"]}
{"id": "entailmentbank_validation_979", "nl": "having a job has a positive impact on a human.", "fol": "", "prediction": ["all x.(Job(x) -> PositiveImpactOnHuman(x))"]}
{"id": "entailmentbank_validation_980", "nl": "decreasing something positive has a negative impact on a thing.", "fol": "", "prediction": ["all x y.((Positive(x) & Positive(y)) -> NegativeImpact(x,y))"]}
{"id": "entailmentbank_validation_981", "nl": "advances in technology decreasing human jobs by more efficient machines has a negative impact on human.", "fol": "", "prediction": ["all x y.((AdvancesInTechnology(x) & HumanJobs(y) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x,y))"]}
{"id": "entailmentbank_validation_982", "nl": "days are a kind of unit for measuring time.", "fol": "", "prediction": ["all x.(Day(x) -> MeasuresTime(x))"]}
{"id": "entailmentbank_validation_983", "nl": "a student wants to record the data of the growth of a vine over a period of a day.", "fol": "", "prediction": ["all x y.((Student(x) & Vine(y)) -> WantsToRecordDataOfGrowthOverDay(x,y))"]}
{"id": "entailmentbank_validation_984", "nl": "the student wants to record the data of the growth of a vine over a period of time.", "fol": "", "prediction": ["all x y.((Student(x) & Vine(y) & WantsToRecordDataOfGrowth(x,y)) -> WantsToRecordData(x,y))"]}
{"id": "entailmentbank_validation_985", "nl": "a line graph is used for showing change / data over time.", "fol": "", "prediction": ["all x.(LineGraph(x) -> ShowsChange(x))"]}
{"id": "entailmentbank_validation_986", "nl": "a line graph an be used to show the data of the growth of the vine over a period of time.", "fol": "", "prediction": ["all x y.((LineGraph(x) & Vine(y)) -> ShowsDataOfGrowthOverPeriod(x,y))"]}
