{"id": "enwn_validation_0", "nl": "You should not hurt someone without a good reason.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y) & -GoodRight(x,y)) -> -HasGoodRight(x,y))"]}
{"id": "enwn_validation_1", "nl": "If you do something for petty reasons, you aren't doing it for a good reason.", "fol": "", "prediction": ["all x.((DoesPetty(x) & -GoodRight(x)) -> -DoesPetty(x))"]}
{"id": "enwn_validation_2", "nl": "Road rage is petty.", "fol": "", "prediction": ["all x.(RoadRage(x) -> Petty(x))"]}
{"id": "enwn_validation_3", "nl": "Jake cut Chris off in traffic, and that enraged Chris.", "fol": "", "prediction": ["all x y z.((Jake(x) & Chris(y) & Traffic(z)) -> (CutsOff(x,y,z) & Enraged(y,x)))"]}
{"id": "enwn_validation_4", "nl": "Chris was so angry that he followed Jake to a stop light, got out of his car and punched Jake.", "fol": "", "prediction": ["all x y.((Chris(x) & Jake(y)) -> (FoundToStopLight(x,y) & GotOutOfCar(x,y) & Punched(x,y)))"]}
{"id": "enwn_validation_5", "nl": "Road rage is anger over driving.", "fol": "", "prediction": ["all x.(RoadRage(x) -> AngerOverDriving(x))"]}
{"id": "enwn_validation_6", "nl": "Chris punched Jake because he was angry at Jake cutting him off in traffic.", "fol": "", "prediction": ["all x y.((ChrisPunched(x) & Jake(y) & Anger(x,y)) -> CutsOff(x,y))"]}
{"id": "enwn_validation_7", "nl": "Chris punched Jake because of his road rage.", "fol": "", "prediction": ["Chris punched Jake because of RoadRainrage(Chris)"]}
{"id": "enwn_validation_8", "nl": "Chris punched Jake for a petty reason.", "fol": "", "prediction": ["all x y.((Chris(x) & Jake(y)) -> PunchedForPettyRun(x,y))"]}
{"id": "enwn_validation_9", "nl": "Chris punched Jake without a good reason.", "fol": "", "prediction": ["Chris punched Jake without a good reason."]}
{"id": "enwn_validation_10", "nl": "Chris should not have punched Jake.", "fol": "", "prediction": ["Chris should not have punchedJake."]}
{"id": "enwn_validation_11", "nl": "Stealing is taking something without the owner's permission.", "fol": "", "prediction": ["all x.(Stealing(x) -> TakesWithoutOwnerPermission(x))"]}
{"id": "enwn_validation_12", "nl": "Caleb left Target with a pack of trading cards in his pocket.", "fol": "", "prediction": ["all x y.((Caleb(x) & Target(y)) -> LeftWithTradingCards(x,y))"]}
{"id": "enwn_validation_13", "nl": "Caleb didn't pay for the pack.", "fol": "", "prediction": ["(-PaysForPack(Caleb))"]}
{"id": "enwn_validation_14", "nl": "You only have permission to take merchandise from a store if you pay for it.", "fol": "", "prediction": ["all x y.((Store(x) & Store(y) & PaysFor(x,y)) -> TakesMerchandise(x,y))"]}
{"id": "enwn_validation_15", "nl": "You should not steal.", "fol": "", "prediction": ["all x.((Stole(x) & -Stole(x)) -> -Stole(x))"]}
{"id": "enwn_validation_16", "nl": "Caleb took the cards from Target without paying for them.", "fol": "", "prediction": ["Caleb took TargetCards(Caleb) & -PayedForCards(Caleb))"]}
{"id": "enwn_validation_17", "nl": "Caleb took the store's cards without the store's permission.", "fol": "", "prediction": ["all x y.((Store(x) & Caleb(y)) -> TakesCardsWithoutPermission(y,x))"]}
{"id": "enwn_validation_18", "nl": "Caleb stole the cards.", "fol": "", "prediction": ["all x.(Caleb(x) -> stolesCards(x))"]}
{"id": "enwn_validation_19", "nl": "Caleb should not have stolen the cards.", "fol": "", "prediction": ["all x.((Caleb(x) & -StolenCards(x)) -> -StolenCards(x))"]}
{"id": "enwn_validation_20", "nl": "Elias ran into Julia and made her drop all her books.", "fol": "", "prediction": ["all x y.((Elias(x) & Julia(y)) -> (RunsInto(x,y) & MadeSheDropBooks(y)))"]}
{"id": "enwn_validation_21", "nl": "If you drop something accidentally, you need to pick it up afterwards.", "fol": "", "prediction": ["all x.((DropsInaccidentally(x) & DropsInaccidentally(x)) -> NeedsToPickUpAfterward(x))"]}
{"id": "enwn_validation_22", "nl": "If you caused an accident, you should help anyone affected by it.", "fol": "", "prediction": ["all x.(CausedAccident(x) -> HelpAnyAffectedBy(x))"]}
{"id": "enwn_validation_23", "nl": "Julia needs to pick up the books because Elias bumped into her.", "fol": "", "prediction": ["all x y.((Julie(x) & Elias(y)) -> NeedsToPickUpBooks(x,y))"]}
{"id": "enwn_validation_24", "nl": "Elias should help Julia pick up the books.", "fol": "", "prediction": ["Elias should help Julia pick up the books."]}
{"id": "enwn_validation_25", "nl": "In the United States, it's impolite to not tip someone who serves you.", "fol": "", "prediction": ["all x.((UnitedStates(x) & -Tip(x)) -> Impolite(x))"]}
{"id": "enwn_validation_26", "nl": "A bartender serves drinks at a bar.", "fol": "", "prediction": ["all x y.((Bartender(x) & Bar(y)) -> ServesDrinksAt(x,y))"]}
{"id": "enwn_validation_27", "nl": "Ellie ordered a drink at a bar called the Red Pony.", "fol": "", "prediction": ["Ellie orderedDrinkAtRedPony(Ellie)"]}
{"id": "enwn_validation_28", "nl": "The Red Pony is in Albuquerque, New Mexico.", "fol": "", "prediction": ["The Red Pony is in Albuquerque, New Mexico."]}
{"id": "enwn_validation_29", "nl": "New Mexico is a state in the United States.", "fol": "", "prediction": ["all x.(NewMexico(x) -> StateInUnitedStates(x))"]}
{"id": "enwn_validation_30", "nl": "You should not do impolite things.", "fol": "", "prediction": ["all x.(ImpoliteThing(x) -> -Do(x,y))"]}
{"id": "enwn_validation_31", "nl": "In the United States, it's impolite to not tip bartenders who serve you drinks at a bar.", "fol": "", "prediction": ["all x y.((UnitedStates(x) & Bartender(y) & ServesDrinksAt(y,x)) -> ImpoliteToTip(x,y))"]}
{"id": "enwn_validation_32", "nl": "Ellie ordered a drink from a bartender at the Red Pony.", "fol": "", "prediction": ["all x y z.((Ellie(x) & Bartender(y) & RedPony(z)) -> OrderedDrink(x,y,z))"]}
{"id": "enwn_validation_33", "nl": "The Red Pony is in the United States.", "fol": "", "prediction": ["The RedPony(x) is in(x,UnitedStates))"]}
{"id": "enwn_validation_34", "nl": "Ellie ordered a drink from a bartender in the United States.", "fol": "", "prediction": ["all x y z.((Ellie(x) & Bartender(y) & Bartender(z)) -> OrderedDrink(x,y,z))"]}
{"id": "enwn_validation_35", "nl": "It would be impolite for Ellie to not tip the bartender.", "fol": "", "prediction": ["all x.((Ellie(x) & -TippedBartender(x)) -> Impolite(x))"]}
{"id": "enwn_validation_36", "nl": "Ellie should tip the bartender.", "fol": "", "prediction": ["all x.(TippedBaby(x) -> Ellie(x))"]}
{"id": "enwn_validation_37", "nl": "You should pay back your debts.", "fol": "", "prediction": ["all x.(PayBackDebts(x) -> ShouldBe(x))"]}
{"id": "enwn_validation_38", "nl": "Fred borrowed $100 from Alyssa to buy the ski lift ticket.", "fol": "", "prediction": ["all x y.((Fred(x) & Alyssa(y)) -> BorrowedSixtySix(x,y))"]}
{"id": "enwn_validation_39", "nl": "You remind someone to do something when you want them to do it but they haven't.", "fol": "", "prediction": ["all x y.((Reminds(x,y) & Person(y) & WantsToDo(y,x) & -WantToDo(y,x)) -> Reminds(x,y))"]}
{"id": "enwn_validation_40", "nl": "Alyssa messaged Fred to remind him to pay her back for the ski lift ticket.", "fol": "", "prediction": ["Alyssa messaged Fred to remind him to pay back for skiliftticket."]}
{"id": "enwn_validation_41", "nl": "If you borrow something from someone and haven't given it back, you owe it to them.", "fol": "", "prediction": ["all x y.((Borrows(x,y) & Borrows(x,y) & -GivenBack(x,y)) -> OwnTo(x,y))"]}
{"id": "enwn_validation_42", "nl": "Fred hasn't paid Alyssa back for the ski lift ticket yet.", "fol": "", "prediction": ["(-PayedAlyssa(Fred) & SkiLiftTicket(Alyssa))"]}
{"id": "enwn_validation_43", "nl": "Fred borrowed $100 from Alyssa and hasn't paid it back yet.", "fol": "", "prediction": ["(BorrowedSpension(Fred,100) & -PayedBack(Fred,100))"]}
{"id": "enwn_validation_44", "nl": "Fred owes Alyssa $100.", "fol": "", "prediction": ["((Fred(Fred) & Alyssa(Alyssa)) -> owes100(Fred,Alyssa)))"]}
{"id": "enwn_validation_45", "nl": "Fred should pay Alyssa $100.", "fol": "", "prediction": ["all x.((Fred(x) & Alyssa(x)) -> ShouldPay(x,100))"]}
{"id": "enwn_validation_46", "nl": "You should not take something that doesn't belong to you.", "fol": "", "prediction": ["all x.((Takes(x,y) & -BelongsTo(x,y)) -> -BelongsTo(x,y))"]}
{"id": "enwn_validation_47", "nl": "Mark is considering taking the lunch in the breakroom fridge.", "fol": "", "prediction": ["Mark is considering taking the lunch in the breakroom fridge."]}
{"id": "enwn_validation_48", "nl": "The lunch in the fridge has a note on it saying \"Melissa\".", "fol": "", "prediction": ["all x.((Lunch(x) & Refrigerator(x)) -> HasNoteOn(x,Melissa))"]}
{"id": "enwn_validation_49", "nl": "People write their names on things to mark them as their belongings.", "fol": "", "prediction": ["all x y.((Person(x) & Thing(y)) -> WritesNameOn(x,y))"]}
{"id": "enwn_validation_50", "nl": "The lunch in the breakroom fridge is Melissa's.", "fol": "", "prediction": ["all x.((Lunch(x) & BreakroomFridge(x)) -> Melissas(x))"]}
{"id": "enwn_validation_51", "nl": "Mark is considering taking Melissa's lunch.", "fol": "", "prediction": ["Mark is consideringTakingMelissa'sLunch(Mark)"]}
{"id": "enwn_validation_52", "nl": "Mark should not take Melissa's lunch.", "fol": "", "prediction": ["(-TakesMelissasLunch(Mark))"]}
{"id": "enwn_validation_53", "nl": "Fern brought her textbook to class.", "fol": "", "prediction": ["Fern brought her textbook to class."]}
{"id": "enwn_validation_54", "nl": "Ann showed up to biology class without her textbook.", "fol": "", "prediction": ["Ann showed up to biology class without textbook(Ann)"]}
{"id": "enwn_validation_55", "nl": "Textbooks are required in Ann's biology class.", "fol": "", "prediction": ["all x y.((Textbook(x) & Ann(y)) -> RequiredInBiologyClass(x,y))"]}
{"id": "enwn_validation_56", "nl": "You should share things with people in need.", "fol": "", "prediction": ["all x y.((Person(x) & Person(y) & InNeed(x,y)) -> SharesThings(x,y))"]}
{"id": "enwn_validation_57", "nl": "Ann needs a textbook.", "fol": "", "prediction": ["Ann NeedsTextbook(Ann)"]}
{"id": "enwn_validation_58", "nl": "Someone should share a textbook with Ann.", "fol": "", "prediction": ["all x y.((Man(x) & Ann(y)) -> ShouldShareTextbook(x,y))"]}
{"id": "enwn_validation_59", "nl": "Fern should share her textbook with Ann.", "fol": "", "prediction": ["all x y.((Fern(x) & Ann(y)) -> ShouldShareTextbook(x,y))"]}
{"id": "enwn_validation_60", "nl": "Someone in a red BMW was waiting for the parking spot before George.", "fol": "", "prediction": ["all x y.((RedBMWare(x) & WaitingForParkingSpot(x,y)) -> GeorgeWorried(x))"]}
{"id": "enwn_validation_61", "nl": "If a group of people is waiting for something, the people who were waiting earliest are first in line.", "fol": "", "prediction": ["all x.((GroupOfPeople(x) & WaitingFor(x)) -> FirstInLine(x))"]}
{"id": "enwn_validation_62", "nl": "You should let people ahead of you in line go first.", "fol": "", "prediction": ["all x.((People(x) & BeforeYou(x)) -> LetsGoFirst(x))"]}
{"id": "enwn_validation_63", "nl": "When you take something, you prevent other people from taking it.", "fol": "", "prediction": ["all x y.((Takes(x) & Person(y)) -> PreventsTaken(x,y))"]}
{"id": "enwn_validation_64", "nl": "George is about to take the parking spot.", "fol": "", "prediction": ["George is about to take the parking spot."]}
{"id": "enwn_validation_65", "nl": "Someone in a red BMW is in line for the parking spot ahead of George.", "fol": "", "prediction": ["all x.((RedBMWare(x) & InLineForParkingSpot(x)) -> George(x))"]}
{"id": "enwn_validation_66", "nl": "George should let the person in the red BMW take the parking spot.", "fol": "", "prediction": ["all x y.((Person(x) & RedBMWiz(x)) -> LetsTakeParkingSpot(x,y))"]}
{"id": "enwn_validation_67", "nl": "If George takes the parking spot, he will prevent other people from taking it.", "fol": "", "prediction": ["all x.((GerryTakesParkingSpot(x) & PreventsTakenPerson(x)) -> TakesParkingSpot(x))"]}
{"id": "enwn_validation_68", "nl": "George shouldn't take the parking spot.", "fol": "", "prediction": ["all x.((George(x) & ParkingSpot(x)) -> -Takes(x,y))"]}
{"id": "enwn_validation_69", "nl": "Embezzlement is theft or misappropriation of funds belonging to an employer.", "fol": "", "prediction": ["all x y.((Embezzlement(x) & Employer(y)) -> (Theft(x) | Misappropriation(x)))"]}
{"id": "enwn_validation_70", "nl": "Using money allotted for one purpose for another purpose is misappropriation.", "fol": "", "prediction": ["all x y.((Money(x) & AllottedFor(x,y) & Purpose(y)) -> Misappropriation(x))"]}
{"id": "enwn_validation_71", "nl": "Tessa works as an accountant at her firm.", "fol": "", "prediction": ["(WorksAsAccountant(Tessa) & AtFirm(Tessa))"]}
{"id": "enwn_validation_72", "nl": "A retiree is someone who has retired from employment and is no longer working.", "fol": "", "prediction": ["all x.(Retiree(x) -> (RetiredFromEmployment(x) & -Working(x)))"]}
{"id": "enwn_validation_73", "nl": "Tessa withdrew a lump sum from her firm's retirement fund to buy herself a summer home.", "fol": "", "prediction": ["all x y.((Tessa(x) & RetirementFund(y)) -> WithdrewSumToBuySummerHome(x,y))"]}
{"id": "enwn_validation_74", "nl": "Money in a company's retirement fund is intended to be paid out to retirees.", "fol": "", "prediction": ["all x y.((Company(x) & RetirementFund(y)) -> IntendedToBePaidOutToRetirees(x,y))"]}
{"id": "enwn_validation_75", "nl": "Tessa is not a retiree.", "fol": "", "prediction": ["(-Retiree(Tessa))"]}
{"id": "enwn_validation_76", "nl": "Tessa bought herself a summer home with money from the firm intended for retirees.", "fol": "", "prediction": ["all x y.((Tessa(x) & SummerHome(y) & MoneyFromRetirees(x)) -> Purchased(x,y))"]}
{"id": "enwn_validation_77", "nl": "Tessa bought herself a summer home with money from the firm that was not intended for her.", "fol": "", "prediction": ["all x y.((Tessa(x) & SummerHome(y) & -IntentionalFor(x,y)) -> PurchasedWithMoney(x,y))"]}
{"id": "enwn_validation_78", "nl": "Tessa misappropriated her firm's money.", "fol": "", "prediction": ["all x y.((Tessa(x) & Firm(y)) -> MisappropriatedMoney(x,y))"]}
{"id": "enwn_validation_79", "nl": "Tessa embezzled from her firm.", "fol": "", "prediction": ["all x y.((Tessa(x) & Firm(y)) -> EmbezzledFrom(x,y))"]}
{"id": "enwn_validation_80", "nl": "Leading others to think someone was responsible for something is shifting the blame.", "fol": "", "prediction": ["all x y.((LeadsOthersToThought(x,y) & Person(y)) -> ShiftingBlood(x))"]}
{"id": "enwn_validation_81", "nl": "When the campus cops interviewed Nate after the fire, he said he saw Jeff drop a cigarette.", "fol": "", "prediction": ["all x y.((CampusPolice(x) & Nate(y) & InterviewedAfterFire(x,y)) -> SawJeffDropCigarette(y))"]}
{"id": "enwn_validation_82", "nl": "Telling someone that something happened leads them to believe it happened.", "fol": "", "prediction": ["all x y.((Tells(x,y) & Person(y)) -> Believes(y,x))"]}
{"id": "enwn_validation_83", "nl": "Dropping a cigarette can cause a fire.", "fol": "", "prediction": ["all x.(DroppingCigarette(x) -> CanCauseFire(x))"]}
{"id": "enwn_validation_84", "nl": "Letting someone else take the blame for your actions is wrong.", "fol": "", "prediction": ["all x.(LetsAnotherTakeBlood(x) -> Wrong(x))"]}
{"id": "enwn_validation_85", "nl": "Nate dropped the cigarette that started the fire.", "fol": "", "prediction": ["Nate dropped the cigarette that started the fire."]}
{"id": "enwn_validation_86", "nl": "Nate led the campus cops to believe that Jeff dropped a cigarette before the fire.", "fol": "", "prediction": ["all x y.((CampusPolice(x) & Nate(y)) -> (LeadsToCitizens(y,x) & Jeff(y)))"]}
{"id": "enwn_validation_87", "nl": "Nate led the campus cops to believe that Jeff started the fire.", "fol": "", "prediction": ["all x y.((CampusPolice(x) & Nate(y)) -> (LeadsToCreateFire(y,x) & JeffStartedFire(y,x)))"]}
{"id": "enwn_validation_88", "nl": "Nate shifted the blame for the fire to Jeff.", "fol": "", "prediction": ["all x y.((Nate(x) & Jeff(y)) -> ShiftsBlood(x,y))"]}
{"id": "enwn_validation_89", "nl": "It would be wrong for Nate to let someone else take the blame for starting the fire.", "fol": "", "prediction": ["all x.((Nate(x) & LetsAnotherTakeBlood(x)) -> -Wrong(x))"]}
{"id": "enwn_validation_90", "nl": "Nate should not have shifted the blame for the fire to Jeff.", "fol": "", "prediction": ["all x.((Nate(x) & Jeff(x)) -> -ShiftedBloodTo(x,y))"]}
{"id": "enwn_validation_91", "nl": "Taking something that doesn't belong to you is wrong.", "fol": "", "prediction": ["all x.((Takes(x,y) & -BelongsTo(x,y)) -> Wrong(x))"]}
{"id": "enwn_validation_92", "nl": "The TV belonged to the owners of the AirBNB Mike was staying at.", "fol": "", "prediction": ["all x y.((TV(x) & AirBNB(y) & Owner(x,y)) -> BelongedTo(x,y))"]}
{"id": "enwn_validation_93", "nl": "You shouldn't help someone do something wrong.", "fol": "", "prediction": ["all x.((Helps(x) & Person(x)) -> -Helps(x,y))"]}
{"id": "enwn_validation_94", "nl": "Tim helped Mike carry the TV out to his car.", "fol": "", "prediction": ["all x y.((Tim(x) & Mike(y)) -> CarriedTVOutToCar(x,y))"]}
{"id": "enwn_validation_95", "nl": "It would be wrong for Mike to take the TV.", "fol": "", "prediction": ["all x.((Mike(x) & TakesTV(x)) -> Irresponsible(x))"]}
{"id": "enwn_validation_96", "nl": "It would be wrong to help Mike take the TV.", "fol": "", "prediction": ["all x.((HelpsMikeTakeTV(x)) -> Irresponsible(x))"]}
{"id": "enwn_validation_97", "nl": "Tim shouldn't have helped Mike take the TV.", "fol": "", "prediction": ["-HasTimHelpedTakeTV(Tim)"]}
{"id": "enwn_validation_98", "nl": "The right thing to do is whatever results in the least harm.", "fol": "", "prediction": ["all x.((RightThing(x) & ResultsInLeastHarm(x)) -> RightThing(x))"]}
{"id": "enwn_validation_99", "nl": "If you don't push the old lady, the truck will hit her.", "fol": "", "prediction": ["all x.((Than(x) & -PushOldLady(x)) -> Hits(x,Lady))"]}
{"id": "enwn_validation_100", "nl": "Getting hit by a vehicle is likely to cause serious injury or death.", "fol": "", "prediction": ["all x.((Vehicle(x) & Hit(x)) -> (CausesSeriousInjury(x) | CausesDeath(x)))"]}
{"id": "enwn_validation_101", "nl": "Pushing the old lady will likely give her minor injuries at worst.", "fol": "", "prediction": ["all x.(PushingOldLady(x) -> (LimitedInjuries(x) & Worst(x)))"]}
{"id": "enwn_validation_102", "nl": "If you don't push the old lady, she will suffer a serious injury or die.", "fol": "", "prediction": ["all x.((OldLady(x) & -Push(x)) -> (SufferSeriousInjury(x) | Die(x)))"]}
{"id": "enwn_validation_103", "nl": "If you push the old lady, she will suffer less harm than if you don't.", "fol": "", "prediction": ["all x y.((PutsOldLady(x) & -PutsOldLady(y)) -> LessHarm(x,y))"]}
{"id": "enwn_validation_104", "nl": "You should push the old lady.", "fol": "", "prediction": ["all x.(PushOldLady(x) -> -PushOldLady(x))"]}
{"id": "enwn_validation_105", "nl": "Emily told Cassandra to copy her homework so that Cassandra wouldn't get in trouble.", "fol": "", "prediction": ["all x y.((Emily(x) & Cassandra(y)) -> (CopiesHomework(x,y) & -GetsInTraffic(y)))"]}
{"id": "enwn_validation_106", "nl": "Copying homework is cheating.", "fol": "", "prediction": ["all x.(CopyingHomework(x) -> Cheating(x))"]}
{"id": "enwn_validation_107", "nl": "Cheating is wrong.", "fol": "", "prediction": ["all x.(Cheating(x) -> Wrong(x))"]}
{"id": "enwn_validation_108", "nl": "Telling someone to do something is influencing them to do it.", "fol": "", "prediction": ["all x y.((TellsToDo(x,y) & Person(y)) -> InfluencesToDo(x,y))"]}
{"id": "enwn_validation_109", "nl": "You shouldn't influence someone to do something wrong.", "fol": "", "prediction": ["all x.((Influence(x) & DoingWrong(x)) -> -Influence(x))"]}
{"id": "enwn_validation_110", "nl": "Copying homework is wrong.", "fol": "", "prediction": ["all x.(CopyHomework(x) -> Wrong(x))"]}
{"id": "enwn_validation_111", "nl": "You shouldn't tell someone to do something wrong.", "fol": "", "prediction": ["all x.((Person(x) & -TellsToDoWrong(x)) -> -TellsToDoWrong(x))"]}
{"id": "enwn_validation_112", "nl": "You shouldn't tell someone to copy homework.", "fol": "", "prediction": ["all x.((Person(x) & -CopiesHomework(x)) -> -SellsToCopyHomework(x))"]}
{"id": "enwn_validation_113", "nl": "Emily should not have told Cassandra to copy her homework.", "fol": "", "prediction": ["all x.((Emily(x) & Cassandra(x)) -> -CopiesHomework(x))"]}
{"id": "enwn_validation_114", "nl": "Making out with someone is an intimate act.", "fol": "", "prediction": ["all x.(MakingOutWith(x,y) -> IntimateAct(x))"]}
{"id": "enwn_validation_115", "nl": "Mark recorded Jess making out with someone while she was drunk.", "fol": "", "prediction": ["Mark recordedJessMakingOutWithSomeone(Mark) & SheBecameDrunk(Mark))"]}
{"id": "enwn_validation_116", "nl": "You need to be aware that something is happening in order to consent to it.", "fol": "", "prediction": ["all x.((AwareOf(x,y) & Happening(y)) -> ConsentsTo(x,y))"]}
{"id": "enwn_validation_117", "nl": "Jess wasn't aware that Mark was filming her.", "fol": "", "prediction": ["Jess n'acquiredMarkFilming(Jess) & -AcquiredMarkFilming(Jess))"]}
{"id": "enwn_validation_118", "nl": "You shouldn't record someone in a compromising situation without their consent.", "fol": "", "prediction": ["all x y.((Person(x) & CompromisesSituation(y)) -> -Record(x,y))"]}
{"id": "enwn_validation_119", "nl": "A compromising situation is one which could cause embarrassment or shame if made public.", "fol": "", "prediction": ["all x.(CompromisingSituation(x) -> (CausesEmbarrasse(x) | CausesShame(x)))"]}
{"id": "enwn_validation_120", "nl": "Physical intimacy can be embarrassing if it's made public.", "fol": "", "prediction": ["all x.((PhysicalIntimacy(x) & MadePublic(x)) -> Embarrassing(x))"]}
{"id": "enwn_validation_121", "nl": "Mark recorded Jess being intimate with someone while she was drunk.", "fol": "", "prediction": ["Mark recorded Jess being intimate with someone while she was drunk."]}
{"id": "enwn_validation_122", "nl": "Jess did not consent to Mark filming her.", "fol": "", "prediction": ["(-ConsentToMarkFilming(Jess))"]}
{"id": "enwn_validation_123", "nl": "Mark recorded Jess being intimate with someone without her consent.", "fol": "", "prediction": ["Mark recorded Jess being intimateWith(Mark,Jess) & -Consent(Mark,Jess))"]}
{"id": "enwn_validation_124", "nl": "Physical intimacy is a compromising situation.", "fol": "", "prediction": ["all x.(PhysicalIntimacy(x) -> CompromiseableSituation(x))"]}
{"id": "enwn_validation_125", "nl": "You shouldn't record someone being physically intimate without their consent.", "fol": "", "prediction": ["all x.((Person(x) & PhysicallyIntimate(x)) -> -Record(x,y))"]}
{"id": "enwn_validation_126", "nl": "Mark should not have recorded Jess.", "fol": "", "prediction": ["Mark should not have recorded Jess."]}
{"id": "enwn_validation_127", "nl": "Putting yourself or others at unnecessary risk is reckless.", "fol": "", "prediction": ["all x.((PlacesYouOrOthers(x) & UnnecessaryRisk(x)) -> Reckless(x))"]}
{"id": "enwn_validation_128", "nl": "You should not behave recklessly.", "fol": "", "prediction": ["all x.((BehavesRecklessly(x) & -BehavesRecklessly(x)) -> -BehavesRecklessly(x))"]}
{"id": "enwn_validation_129", "nl": "Taking a right at a red light involves entering a crossing lane.", "fol": "", "prediction": ["all x y.((Right(x) & RedLight(y)) -> EntersCrossingLane(x,y))"]}
{"id": "enwn_validation_130", "nl": "Checking for traffic in a lane before entering it reduces the risk of a collision.", "fol": "", "prediction": ["all x y.((Lanes(x) & Lane(y) & ChecksForTraffic(x,y)) -> ReducesRiskOfCollision(x))"]}
{"id": "enwn_validation_131", "nl": "If you could do something to reduce risk, but you don't, you're exposing yourself to avoidable risk.", "fol": "", "prediction": ["all x.(((PossibleToReduceRisk(x) & -PossibleToReduceRisk(x)) -> ExposesToAvoidableRisk(x))"]}
{"id": "enwn_validation_132", "nl": "You should not put yourself or others at unnecessary risk.", "fol": "", "prediction": ["all x.((You(x) | Others(x)) -> -UnnecessaryRisk(x))"]}
{"id": "enwn_validation_133", "nl": "Checking for traffic in the crossing lane before taking a right at a red light reduces the risk of a collision.", "fol": "", "prediction": ["all x y.((ChecksTraffic(x) & CrossingLane(y) & TakesRightAtRedLight(x,y)) -> ReducesRiskOfCollision(x))"]}
{"id": "enwn_validation_134", "nl": "Not checking for traffic in the crossing lane before taking a right at a red light exposes you to avoidable risk.", "fol": "", "prediction": ["all x.((CheckingTrafficInCrossingLane(x) & TakesRightAtRedLight(x)) -> ExposesToAvoidableRisk(x))"]}
{"id": "enwn_validation_135", "nl": "You should check for traffic in the crossing lane before taking a right at a red light.", "fol": "", "prediction": ["all x.((CrossingLane(x) & RedLight(x)) -> ChecksForTraffic(x))"]}
{"id": "enwn_validation_136", "nl": "Adding pieces to the board is against the rules of chess.", "fol": "", "prediction": ["all x.(AddingPiecesToBoard(x) -> AgainstRulesOfChess(x))"]}
{"id": "enwn_validation_137", "nl": "Breaking the rules is cheating.", "fol": "", "prediction": ["all x.((BreakingRules(x) & BreakingRules(x)) -> Cheating(x))"]}
{"id": "enwn_validation_138", "nl": "You shouldn't cheat.", "fol": "", "prediction": ["all x.((Cheat(x)) -> -Cheat(x))"]}
{"id": "enwn_validation_139", "nl": "When Ben's opponent wasn't looking, Ben snuck a pawn onto the board to give himself the advantage.", "fol": "", "prediction": ["all x y.((Ben(x) & Opponent(y) & -Looking(y)) -> SnucksPawnOnBoard(x,y))"]}
{"id": "enwn_validation_140", "nl": "Adding pieces to the board is cheating.", "fol": "", "prediction": ["all x.((Addition(x) & Pieces(x)) -> Cheating(x))"]}
{"id": "enwn_validation_141", "nl": "You shouldn't add pieces to the board.", "fol": "", "prediction": ["all x.((Board(x) & -AddPieces(x)) -> -AddPieces(x))"]}
{"id": "enwn_validation_142", "nl": "Ben shouldn't have put the pawn on the board.", "fol": "", "prediction": ["Ben shouldn't have put pawn on board."]}
{"id": "enwn_validation_143", "nl": "Safe driving requires your full attention.", "fol": "", "prediction": ["all x.(SafeDriving(x) -> RequiresFullAttention(x))"]}
{"id": "enwn_validation_144", "nl": "Jared checked his phone while pulling onto the freeway.", "fol": "", "prediction": ["all x y.((Jared(x) & Freeway(y)) -> CheckedPhone(x,y))"]}
{"id": "enwn_validation_145", "nl": "Checking your phone takes your attention off of whatever else you're doing.", "fol": "", "prediction": ["all x.(CheckingPhone(x) -> TakesAttentionOffOfWhatever(x))"]}
{"id": "enwn_validation_146", "nl": "If something prevents you from doing the right thing, it's wrong.", "fol": "", "prediction": ["all x.((Protects(x) & RightThing(x)) -> Wrong(x))"]}
{"id": "enwn_validation_147", "nl": "You should always drive safe.", "fol": "", "prediction": ["all x.(DriveSafe(x) -> AlwaysDriveSafe(x))"]}
{"id": "enwn_validation_148", "nl": "Jared took his attention off of driving to check his phone.", "fol": "", "prediction": ["all x.((Jared(x) & AttentionOffDriving(x)) -> ChecksPhone(x))"]}
{"id": "enwn_validation_149", "nl": "Checking his phone prevented Jared from driving safely.", "fol": "", "prediction": ["all x.(CheckingPhone(x) -> PreventsDrivingSafely(x))"]}
{"id": "enwn_validation_150", "nl": "You shouldn't do anything that prevents you from driving safe.", "fol": "", "prediction": ["all x.((Does(x) & PreventsDrivingSafe(x)) -> -Do(x))"]}
{"id": "enwn_validation_151", "nl": "Jared should not have checked his phone.", "fol": "", "prediction": ["Jared should not have checked his phone."]}
{"id": "enwn_validation_152", "nl": "There are some people who haven't gotten a slice yet.", "fol": "", "prediction": ["exists x.(Person(x) & -HasSlice(x))"]}
{"id": "enwn_validation_153", "nl": "Taking a second portion before someone else has gotten a first portion is unfair.", "fol": "", "prediction": ["all x y.((TakesSecondPurchase(x) & TakesFirstPurchase(y)) -> Unfair(x))"]}
{"id": "enwn_validation_154", "nl": "You want to take a second slice of pizza.", "fol": "", "prediction": ["all x.((Pizza(x) & SecondSlice(x)) -> WantsToTake(x,Pizza))"]}
{"id": "enwn_validation_155", "nl": "If you want to do something, but it's too soon, you should wait.", "fol": "", "prediction": ["all x.((WantToDo(x) & TooFast(x)) -> ShouldWarn(x))"]}
{"id": "enwn_validation_156", "nl": "It's too soon to take a second slice.", "fol": "", "prediction": ["all x.((Slice(x) & TooFastToTake(x,2)) -> TooFastToTake(x,2))"]}
{"id": "enwn_validation_157", "nl": "You want to take a slice of pizza but it's too soon.", "fol": "", "prediction": ["all x.((Pizza(x) & TooFast(x)) -> WantsToTake(x,y))"]}
{"id": "enwn_validation_158", "nl": "You should wait before taking a second slice of pizza.", "fol": "", "prediction": ["all x.((Pizza(x) & Wait(x)) -> TakesSecondSlice(x))"]}
{"id": "enwn_validation_159", "nl": "Murder means killing someone with premeditation.", "fol": "", "prediction": ["all x.(Murder(x) -> KillsWithPremeditation(x))"]}
{"id": "enwn_validation_160", "nl": "Premeditation means thinking through something before doing it.", "fol": "", "prediction": ["all x.(Premeditation(x) -> ThinksThrough(x))"]}
{"id": "enwn_validation_161", "nl": "David bought anthrax, then used it to try and kill Ingrid.", "fol": "", "prediction": ["all x y.((David(x) & Ingrid(y)) -> (BuysAnthrax(x,y) & UsesAnthraxToTryAndKill(x,y)))"]}
{"id": "enwn_validation_162", "nl": "Buying supplies for something is part of planning for something.", "fol": "", "prediction": ["all x y.((BuysSupplies(x) & Something(y)) -> PartOfPlanning(x,y))"]}
{"id": "enwn_validation_163", "nl": "David planned to kill Ingrid before trying to kill her.", "fol": "", "prediction": ["all x y.((David(x) & Ingrid(y)) -> PlannedToKill(x,y))"]}
{"id": "enwn_validation_164", "nl": "David tried to kill Ingrid in a premeditated way.", "fol": "", "prediction": ["all x y.((David(x) & Ingrid(y)) -> TriedToKill(x,y))"]}
{"id": "enwn_validation_165", "nl": "David tried to murder Ingrid.", "fol": "", "prediction": ["(TriedToMornIngrid(David) & Ingrid(Ingrid))"]}
{"id": "enwn_validation_166", "nl": "It's a faux pas to offer someone something they can't accept.", "fol": "", "prediction": ["all x.(FauxPast(x) -> Offers(x,y))"]}
{"id": "enwn_validation_167", "nl": "Maria is pregnant.", "fol": "", "prediction": ["Maria isPregnant(Maria)"]}
{"id": "enwn_validation_168", "nl": "People who are pregnant shouldn't drink alcohol.", "fol": "", "prediction": ["all x.((Patient(x) & Pregnant(x)) -> -DrinkAlcohol(x))"]}
{"id": "enwn_validation_169", "nl": "Beer is an alcoholic beverage.", "fol": "", "prediction": ["all x.(Beer(x) -> AlcoholicBeverage(x))"]}
{"id": "enwn_validation_170", "nl": "People who are pregnant shouldn't drink beer.", "fol": "", "prediction": ["all x.((Patient(x) & Pregnant(x)) -> -DrinkBeer(x))"]}
{"id": "enwn_validation_171", "nl": "Maria shouldn't drink beer.", "fol": "", "prediction": ["all x.(Maria(x) -> -DrinksBeer(x))"]}
{"id": "enwn_validation_172", "nl": "It would be a faux pas to offer Maria a beer.", "fol": "", "prediction": ["all x.(FauxPast(x) -> OffersBeer(x))"]}
{"id": "enwn_validation_173", "nl": "Sandy tripped and spilled her hot coffee on Chris.", "fol": "", "prediction": ["(Tripped(Sandy) & SplendidCoffee(Sandy))"]}
{"id": "enwn_validation_174", "nl": "When someone spills hot coffee on you, it hurts.", "fol": "", "prediction": ["all x.((Person(x) & SpillsHotCoffeeOnYou(x)) -> Hurts(x))"]}
{"id": "enwn_validation_175", "nl": "If someone does something that harms you, you will get angry at them.", "fol": "", "prediction": ["all x.((Does(x,y) & Harms(y)) -> GetAngryAt(x,y))"]}
{"id": "enwn_validation_176", "nl": "If you did not mean for something to happen, it was a mistake.", "fol": "", "prediction": ["all x.((Meaning(x) & -Meaning(x)) -> Mistake(x))"]}
{"id": "enwn_validation_177", "nl": "Sandy did not mean to spill her coffee.", "fol": "", "prediction": ["(-SandyMeantToSpreadCoffee(Sandy))"]}
{"id": "enwn_validation_178", "nl": "Even if you are mad at someones mistake, you should forgive them.", "fol": "", "prediction": ["all x.((Mad(x) & Mistake(x)) -> Forgive(x))"]}
{"id": "enwn_validation_179", "nl": "Having hot coffee spilled onto you will make you angry at someone.", "fol": "", "prediction": ["all x.((HotCoffee(x) & SplippedOnto(x)) -> MakesAngryAt(x))"]}
{"id": "enwn_validation_180", "nl": "Chris got mad at Sandy because Sandy's hot coffee spilled on Chris.", "fol": "", "prediction": ["all x y.((Chris(x) & Sandy(y) & SplendidCoffee(y)) -> MadAt(x,y))"]}
{"id": "enwn_validation_181", "nl": "Sandy spilling her coffee was an mistake.", "fol": "", "prediction": ["all x.((Sandy(x) & SpillsCoffee(x)) -> Mistake(x))"]}
{"id": "enwn_validation_182", "nl": "Sandy's mistake made Chris angry at Sandy.", "fol": "", "prediction": ["(Mistake(Sandy) & MadeChrisAngry(Sandy))"]}
{"id": "enwn_validation_183", "nl": "Chris should forgive Sandy.", "fol": "", "prediction": ["all x.((Chris(x) & Sandy(x)) -> ShouldForgive(x,y))"]}
{"id": "enwn_validation_184", "nl": "You can't score well on a test without studying for it unless you cheat.", "fol": "", "prediction": ["all x.((Test(x) & -StudiesFor(x)) -> -ScoreWell(x))"]}
{"id": "enwn_validation_185", "nl": "Brad scored well on his test.", "fol": "", "prediction": ["all x.(Brad(x) -> ScoredWellOnTest(x))"]}
{"id": "enwn_validation_186", "nl": "Brad did not study the material on the test.", "fol": "", "prediction": ["Brad -StudiesMaterial(Brad))"]}
{"id": "enwn_validation_187", "nl": "Cheating is dishonest.", "fol": "", "prediction": ["all x.(Cheating(x) -> Dishonest(x))"]}
{"id": "enwn_validation_188", "nl": "You should be honest.", "fol": "", "prediction": ["all x.((Honest(x) & Been(x)) -> Honest(x))"]}
{"id": "enwn_validation_189", "nl": "Brad scored well on his test without studying for it.", "fol": "", "prediction": ["all x.((Brad(x) & Test(x) & -StudiesFor(x)) -> ScoresWell(x))"]}
{"id": "enwn_validation_190", "nl": "Brad cheated on his test.", "fol": "", "prediction": ["all x.(Brad(x) -> CheatedOnTest(x))"]}
{"id": "enwn_validation_191", "nl": "You should not cheat.", "fol": "", "prediction": ["all x.((Cheat(x)) -> -Cheat(x))"]}
{"id": "enwn_validation_192", "nl": "Brad should not have cheated on his test.", "fol": "", "prediction": ["all x.((Brad(x) & Test(x)) -> -Cheated(x))"]}
{"id": "enwn_validation_193", "nl": "You should not litter.", "fol": "", "prediction": ["all x.((Litter(x) & -Litter(x)) -> -(Litter(x) & Litter(x)))"]}
{"id": "enwn_validation_194", "nl": "Littering is when you throw trash outside of a trash bin.", "fol": "", "prediction": ["all x.(Littering(x) -> ThrowsTrashOutsideTrashBin(x))"]}
{"id": "enwn_validation_195", "nl": "Johnny threw trash on the floor.", "fol": "", "prediction": ["all x.(Johnny(x) -> ThrewTrashOnFloor(x))"]}
{"id": "enwn_validation_196", "nl": "Johnny did not want to walk to the far away trash bin.", "fol": "", "prediction": ["-(Johnny(Johnny) & FarAwayTrashBin(Johnny))"]}
{"id": "enwn_validation_197", "nl": "Johnny did not throw his trash away into a trash bin.", "fol": "", "prediction": ["all x.((Johnny(x) & TrashBin(x)) -> -ThrewInto(x,y))"]}
{"id": "enwn_validation_198", "nl": "Johnny littered.", "fol": "", "prediction": ["all x.(Jonny(x) -> Littered(x))"]}
{"id": "enwn_validation_199", "nl": "Johnny should not have littered.", "fol": "", "prediction": ["all x.((Johnny(x) & Littered(x)) -> -Littered(x))"]}
{"id": "enwn_validation_200", "nl": "If you see someone struggling to do something, you should help them.", "fol": "", "prediction": ["all x.(StaffStrugglesToDo(x) -> Help(x))"]}
{"id": "enwn_validation_201", "nl": "Josh is holding groceries in both hands at the door.", "fol": "", "prediction": ["all x y.((Josh(x) & Door(y)) -> HoldsGroceries(x,y))"]}
{"id": "enwn_validation_202", "nl": "If you are holding something with both hands, you will struggle to open doors.", "fol": "", "prediction": ["all x.((HoldsWithBothHands(x) & HandsOn(x)) -> StruggleToOpenDoors(x))"]}
{"id": "enwn_validation_203", "nl": "Amy can see Josh.", "fol": "", "prediction": ["all x.(Amy(x) -> CanSee(x,Joshua))"]}
{"id": "enwn_validation_204", "nl": "Josh is struggling to open the door.", "fol": "", "prediction": ["all x.((Josh(x) & StrugglesToOpenDoor(x)) -> OpenDoor(x))"]}
{"id": "enwn_validation_205", "nl": "Amy can see Josh struggling to open the door.", "fol": "", "prediction": ["all x.((Amy(x) & Josh(y)) -> StrugglesToOpenDoor(x,y))"]}
{"id": "enwn_validation_206", "nl": "Amy should help Josh open the door.", "fol": "", "prediction": ["all x y.((Amy(x) & Josh(y)) -> ShouldHelpOpenDoor(x,y))"]}
{"id": "enwn_validation_207", "nl": "You should avoid harming someone else or yourself.", "fol": "", "prediction": ["all x.((AvoidsHarming(x) & (Alternate(x) | Object(x))) -> AvoidsHarming(x))"]}
{"id": "enwn_validation_208", "nl": "Driving dangerously can harm you or someone else.", "fol": "", "prediction": ["all x.(DrivingDangerously(x) -> (HarmsYou(x) | HarmsSomeoneOther(x)))"]}
{"id": "enwn_validation_209", "nl": "Dani drove home from the bar after drinking alcohol.", "fol": "", "prediction": ["Dani drove home from the bar after drinking alcohol."]}
{"id": "enwn_validation_210", "nl": "Driving after drinking alcohol is dangerous.", "fol": "", "prediction": ["all x.((DrivingAfterDrinkingAlcohol(x)) -> Dangerous(x))"]}
{"id": "enwn_validation_211", "nl": "Dani drove home dangerously.", "fol": "", "prediction": ["Dani drove home dangerously."]}
{"id": "enwn_validation_212", "nl": "Dani could have harmed themself or someone else by driving home.", "fol": "", "prediction": ["all x.(Dani(x) -> (HasHarmed(x,self) | Harms(x,someone)))"]}
{"id": "enwn_validation_213", "nl": "Dani should not have driven home.", "fol": "", "prediction": ["Dani should not have driven home."]}
{"id": "enwn_validation_214", "nl": "You should not copy other peoples work and claim it as your own.", "fol": "", "prediction": ["all x y.((Person(x) & Work(y)) -> -CopiesAndClaims(x,y))"]}
{"id": "enwn_validation_215", "nl": "Copyright infringement is using protected works of another person without permission.", "fol": "", "prediction": ["all x.(CopyrightInfringement(x) -> UsesProtectedWorks(x))"]}
{"id": "enwn_validation_216", "nl": "Ryan did not ask the band Super Cool for permission to use their song.", "fol": "", "prediction": ["Ryan -AskedSuperCoolForPermission(Ryan,Song)"]}
{"id": "enwn_validation_217", "nl": "Ryan made a video.", "fol": "", "prediction": ["Ryan made a video."]}
{"id": "enwn_validation_218", "nl": "Ryan used a song from the band Super Cool in the video.", "fol": "", "prediction": ["all x y.((Ryan(x) & Song(y) & SuperCool(y)) -> UsedInVideo(x,y))"]}
{"id": "enwn_validation_219", "nl": "All songs by Super Cool are protected work.", "fol": "", "prediction": ["all x.(SuperCool(x) -> ProtectedWork(x))"]}
{"id": "enwn_validation_220", "nl": "You should not copy protected work from other people because that's copyright infringement.", "fol": "", "prediction": ["all x y.((ProtectedWork(x) & Person(y)) -> -Copies(x,y))"]}
{"id": "enwn_validation_221", "nl": "Ryan made a video and used a song from a band called Super Cool.", "fol": "", "prediction": ["all x y.((Ryan(x) & Video(y)) -> (Made(x,y) & UsedSong(x,y)))"]}
{"id": "enwn_validation_222", "nl": "Ryan used Super Cool's song without getting permission from the band first.", "fol": "", "prediction": ["all x y.((Ryan(x) & SuperCool(y)) -> UsedSongWithoutPermission(x,y))"]}
{"id": "enwn_validation_223", "nl": "Ryan used Super Cool's protected work without getting permission from the band first.", "fol": "", "prediction": ["all x y.((Ryan(x) & SuperCool(y)) -> UsedProtectedWork(x,y))"]}
{"id": "enwn_validation_224", "nl": "Ryan should not have used Super Cool's song because he committed copyright infringement.", "fol": "", "prediction": ["all x.((Ryan(x) & SuperCoolSong(x)) -> -Used(x,CopyrightInfringement))"]}
{"id": "enwn_validation_225", "nl": "Scaring people is mean and rude unless you have a good reason.", "fol": "", "prediction": ["all x.((ScarePeople(x) & -GoodRight(x)) -> (Mean(x) & Rust(x)))"]}
{"id": "enwn_validation_226", "nl": "You generally do not want to do mean or rude things to people.", "fol": "", "prediction": ["all x.((People(x) & -(Mean(x) | Rust(x)))) -> -(Mean(x) | Rust(x)))"]}
{"id": "enwn_validation_227", "nl": "Luke yelled fire for fun.", "fol": "", "prediction": ["Luke yelled fire for fun."]}
{"id": "enwn_validation_228", "nl": "Yelling fire for fun is not a good reason to yell fire.", "fol": "", "prediction": ["all x.((YellsFire(x) & Fun(x)) -> -GoodRightToYellFire(x))"]}
{"id": "enwn_validation_229", "nl": "When you yell fire for without a good reason, you scare everyone around you.", "fol": "", "prediction": ["all x.((YellsFire(x) & WithoutGoodRight(x)) -> ScaresEveryoneAround(x))"]}
{"id": "enwn_validation_230", "nl": "You should not scare people without good reason.", "fol": "", "prediction": ["all x.((ScarePeople(x) & -ScareGoodRight(x)) -> -Scare(x))"]}
{"id": "enwn_validation_231", "nl": "Luke yelled fire without a good reason.", "fol": "", "prediction": ["Luke yelled fire without good reason."]}
{"id": "enwn_validation_232", "nl": "Luke scared everyone around him without a good reason.", "fol": "", "prediction": ["all x.((Luke(x) & ScarredEveryone(x)) -> -GoodRight(x))"]}
{"id": "enwn_validation_233", "nl": "Luke should not have yelled fire.", "fol": "", "prediction": ["Luke should not have yelledfire."]}
{"id": "enwn_validation_234", "nl": "Even though you won't be punished, you should not do bad things.", "fol": "", "prediction": ["all x.((Punished(x) & -Punished(x)) -> -BadThings(x))"]}
{"id": "enwn_validation_235", "nl": "If no one sees you do something bad, you won't get punished.", "fol": "", "prediction": ["all x.((NoOneSees(x) & BadDoing(x)) -> -Punished(x))"]}
{"id": "enwn_validation_236", "nl": "Mike can steal the wallet.", "fol": "", "prediction": ["all x.(Mike(x) -> CanStealWallet(x))"]}
{"id": "enwn_validation_237", "nl": "When you turn away from something you cannot see it.", "fol": "", "prediction": ["all x.(TurnAwayFrom(x) -> -See(x))"]}
{"id": "enwn_validation_238", "nl": "Josh turned away from Mike and the wallet.", "fol": "", "prediction": ["all x y.((Josh(x) & Mike(y)) -> TurnedAwayFrom(x,y))"]}
{"id": "enwn_validation_239", "nl": "Stealing is bad.", "fol": "", "prediction": ["all x.(Stealing(x) -> Bad(x))"]}
{"id": "enwn_validation_240", "nl": "Josh turned away and cannot see Mike or the wallet.", "fol": "", "prediction": ["all x.((Josh(x) & TurnedAway(x)) -> (-SeesMike(x) | CannotSeeWallet(x))))"]}
{"id": "enwn_validation_241", "nl": "Mike can steal the wallet without Josh seeing.", "fol": "", "prediction": ["all x y.((Mike(x) & Josh(y)) -> CanStoleWallet(x,y))"]}
{"id": "enwn_validation_242", "nl": "Mike can do something bad without Josh seeing.", "fol": "", "prediction": ["all x y.((Mike(x) & Josh(y)) -> CanDoBadWithoutSeeing(x,y))"]}
{"id": "enwn_validation_243", "nl": "Mike can do something bad without getting punished.", "fol": "", "prediction": ["all x.(Mike(x) -> CanDoBad(x))"]}
{"id": "enwn_validation_244", "nl": "Mike should not do something bad even though he will not get punished.", "fol": "", "prediction": ["all x.((Mike(x) & -Punished(x)) -> -DoBad(x))"]}
{"id": "enwn_validation_245", "nl": "You should clean messes you create.", "fol": "", "prediction": ["all x.((Mess(x) & Creates(x)) -> Cleans(x))"]}
{"id": "enwn_validation_246", "nl": "If you made a spill, you made a mess.", "fol": "", "prediction": ["all x.((Spoken(x) & Made(x,y)) -> MadeMask(x,z))"]}
{"id": "enwn_validation_247", "nl": "Amy dropped her ice-cream on the floor and did not clean it.", "fol": "", "prediction": ["all x.((Amy(x) & DroppedIceCream(x)) -> -Cleaned(x))"]}
{"id": "enwn_validation_248", "nl": "If you drop ice cream on the floor, you make a spill.", "fol": "", "prediction": ["all x.((DropsIceCream(x) & Floor(x)) -> MakesSpill(x))"]}
{"id": "enwn_validation_249", "nl": "You should clean spills you made.", "fol": "", "prediction": ["all x.((Spill(x) & Made(x)) -> Clean(x))"]}
{"id": "enwn_validation_250", "nl": "Amy made a spill and did not clean it.", "fol": "", "prediction": ["all x.((Amy(x) & Spill(x)) -> -Cleans(x))"]}
{"id": "enwn_validation_251", "nl": "Amy should have cleaned her spill.", "fol": "", "prediction": ["all x.((Amy(x) & Spill(y)) -> ShouldClean(x,y))"]}
{"id": "enwn_validation_252", "nl": "Helping hurt animals is a good thing to do.", "fol": "", "prediction": ["all x.(HelpingIrresponsibleAnimals(x) -> GoodThingToDo(x))"]}
{"id": "enwn_validation_253", "nl": "If you mend something, you are helping the thing that something belongs to.", "fol": "", "prediction": ["all x y.((Mends(x) & Thing(y)) -> Helps(x,y))"]}
{"id": "enwn_validation_254", "nl": "Setting a cast is a way to mend a wound.", "fol": "", "prediction": ["all x.(SetsCast(x) -> MendsWound(x))"]}
{"id": "enwn_validation_255", "nl": "Dan put a cast around the hurt dogs broken leg.", "fol": "", "prediction": ["all x y.((Dan(x) & Dog(y) & BrokenLeg(y)) -> PutsCastAround(x,y))"]}
{"id": "enwn_validation_256", "nl": "Dan mended the hurt dog's leg.", "fol": "", "prediction": ["all x y.((Dog(x) & Irresponsible(y)) -> MendedLeg(x,y))"]}
{"id": "enwn_validation_257", "nl": "Dan helped the hurt dog.", "fol": "", "prediction": ["all x.((Dan(x) & HurtDog(x)) -> Helped(x,Dan))"]}
{"id": "enwn_validation_258", "nl": "Dan did a good thing.", "fol": "", "prediction": ["all x.((Dan(x) & GoodThing(x)) -> Did(x,Dan))"]}
{"id": "enwn_validation_259", "nl": "You should not annoy other people.", "fol": "", "prediction": ["all x.((Person(x) & -annoys(x)) -> -annoys(x))"]}
{"id": "enwn_validation_260", "nl": "Loud music will cause other people that are around to be annoyed.", "fol": "", "prediction": ["all x.((LoudMusic(x) & OtherPeople(x)) -> Irritated(x))"]}
{"id": "enwn_validation_261", "nl": "Ned is playing music loudly.", "fol": "", "prediction": ["Ned is playing music loudly."]}
{"id": "enwn_validation_262", "nl": "Ned and Brad are around each other.", "fol": "", "prediction": ["(Around(Ned,Brad) & Around(Brad,Ned))"]}
{"id": "enwn_validation_263", "nl": "You should not play loud music with other people around because it will annoy them.", "fol": "", "prediction": ["all x y.((LoudMusic(x) & Person(y)) -> -PlayWith(x,y))"]}
{"id": "enwn_validation_264", "nl": "Ned is playing his music loud around Brad.", "fol": "", "prediction": ["Ned is playing LoudMusicAroundBrad(n)"]}
{"id": "enwn_validation_265", "nl": "Ned should not play his music because it will annoy Brad.", "fol": "", "prediction": ["Ned should not play his music because it will annoy Brad."]}
{"id": "enwn_validation_266", "nl": "Forcing someone to give you something is wrong.", "fol": "", "prediction": ["all x.(Forcing(x) -> Wrong(x))"]}
{"id": "enwn_validation_267", "nl": "You should not do wrong things.", "fol": "", "prediction": ["all x.((DoWrongThings(x)) -> -DoWrongThings(x))"]}
{"id": "enwn_validation_268", "nl": "Keith bullied Gunner until Gunner gave his lunch money to Keith.", "fol": "", "prediction": ["all x y.((Keith(x) & Gunner(y)) -> Bullied(x,y))"]}
{"id": "enwn_validation_269", "nl": "Bullying is a form of harassment.", "fol": "", "prediction": ["all x.(Bullying(x) -> Harassment(x))"]}
{"id": "enwn_validation_270", "nl": "If you continuously harass someone until they do something, you forced them to do that thing.", "fol": "", "prediction": ["all x y.((ContinuouslyHarsh(x) & Person(y) & DoSomething(y)) -> ForcEDToDoThatThing(x,y))"]}
{"id": "enwn_validation_271", "nl": "You should not force someone to give you something.", "fol": "", "prediction": ["all x.((Force(x) & -Force(x)) -> Gives(x,y))"]}
{"id": "enwn_validation_272", "nl": "Keith harassed Gunner until Gunner gave his lunch money to Keith.", "fol": "", "prediction": ["all x y.((Keith(x) & Gunner(y)) -> Harasse(x,y))"]}
{"id": "enwn_validation_273", "nl": "Keith forced Gunner to give Keith his lunch money.", "fol": "", "prediction": ["Keith ForciblyGiveNeighborsLunchMoney(Keith,Keith)"]}
{"id": "enwn_validation_274", "nl": "Keith should not have forced Gunner to give Keith his lunch money.", "fol": "", "prediction": ["Keith should not have forcibly given GunnersLunchMoney(Keith)"]}
{"id": "enwn_validation_275", "nl": "If you agree to do something, you should do it.", "fol": "", "prediction": ["all x.((AgreesToDo(x) & Dose(x)) -> ShouldDo(x))"]}
{"id": "enwn_validation_276", "nl": "Chad agreed to work but is playing instead.", "fol": "", "prediction": ["(all x.(Chad(x) -> Work(x)) & Playing(x))"]}
{"id": "enwn_validation_277", "nl": "If you agree to do something but are doing something else, you are not doing what you agreed to do.", "fol": "", "prediction": ["all x.((AgreesToDo(x) & Doing(x) & -AgreesToDo(x)) -> -AgreesToDo(x))"]}
{"id": "enwn_validation_278", "nl": "Chad agreed to work but is not working.", "fol": "", "prediction": ["(all x.(Chad(x) -> Work(x)) & -Working(x))"]}
{"id": "enwn_validation_279", "nl": "Chad should be working.", "fol": "", "prediction": ["all x.(Chad(x) -> ShouldWork(x))"]}
{"id": "enwn_validation_280", "nl": "Lewis earned wages over the year.", "fol": "", "prediction": ["all x.(Lewis(x) -> EarnedWages(x))"]}
{"id": "enwn_validation_281", "nl": "If you earn wages over the year, you have taxes on those wages.", "fol": "", "prediction": ["all x.((EarnsWages(x) & OverYear(x)) -> HasTaxes(x))"]}
{"id": "enwn_validation_282", "nl": "Paying taxes is a law.", "fol": "", "prediction": ["all x.(PayingTaxes(x) -> Law(x))"]}
{"id": "enwn_validation_283", "nl": "You should obey the law.", "fol": "", "prediction": ["all x.(ObeyLaw(x) -> ShouldObeyLaw(x))"]}
{"id": "enwn_validation_284", "nl": "Breaking the law is a crime.", "fol": "", "prediction": ["all x.((BreakingLaw(x) & Crime(x)) -> BreaksLaw(x))"]}
{"id": "enwn_validation_285", "nl": "Lewis has taxes on wages he earned over the year.", "fol": "", "prediction": ["all x.((Lewis(x) & EarnedWages(x)) -> HasTaxes(x))"]}
{"id": "enwn_validation_286", "nl": "Paying taxes is a law that you should obey.", "fol": "", "prediction": ["all x.(PayingTaxes(x) -> Law(x))"]}
{"id": "enwn_validation_287", "nl": "It is a crime to not pay your taxes.", "fol": "", "prediction": ["all x.((Crime(x) & -PayTaxes(x)) -> Criminal(x))"]}
{"id": "enwn_validation_288", "nl": "Lewis will commit a crime if he does not pay his taxes.", "fol": "", "prediction": ["all x.((Lewis(x) & -PaysTaxes(x)) -> CommitsCrime(x))"]}
{"id": "enwn_validation_289", "nl": "You should fulfill your promises.", "fol": "", "prediction": ["all x.((Promise(x) & Fulfill(x)) -> ShouldFull(x))"]}
{"id": "enwn_validation_290", "nl": "Evan said he would help Rose.", "fol": "", "prediction": ["Evan said he would help Rose."]}
{"id": "enwn_validation_291", "nl": "If you say you will do something, you promise to do that thing.", "fol": "", "prediction": ["all x.((Sells(x) & WillDo(x)) -> PromisesToDo(x))"]}
{"id": "enwn_validation_292", "nl": "Evan promised to help Rose.", "fol": "", "prediction": ["Evan promised to help Rose."]}
{"id": "enwn_validation_293", "nl": "Evan should help Rose.", "fol": "", "prediction": ["all x.((Evan(x) & Rose(y)) -> ShouldHelp(x,y))"]}
{"id": "enwn_validation_294", "nl": "Erin argued for her answer after it was proven wrong.", "fol": "", "prediction": ["Erin argued for her answer after it was proven wrong."]}
{"id": "enwn_validation_295", "nl": "If you argue when you are wrong, you do not accept that you are wrong.", "fol": "", "prediction": ["all x.(Argument(x) -> -AcceptsWrong(x))"]}
{"id": "enwn_validation_296", "nl": "If you can't accept that you are wrong, you lack humility.", "fol": "", "prediction": ["all x.((CannotAccept(x) & IsWrong(x)) -> LacksHumor(x))"]}
{"id": "enwn_validation_297", "nl": "You should have humility.", "fol": "", "prediction": ["all x.(HasHumor(x) -> Humility(x))"]}
{"id": "enwn_validation_298", "nl": "Erin did not accept that she was wrong.", "fol": "", "prediction": ["Erin nead-acquired(Erin,wrong)"]}
{"id": "enwn_validation_299", "nl": "Erin lacks humility.", "fol": "", "prediction": ["Erin lacksHumor."]}
{"id": "enwn_validation_300", "nl": "Erin should have humility.", "fol": "", "prediction": ["all x.(Erin(x) -> Humility(x))"]}
{"id": "enwn_validation_301", "nl": "You should not intentionally mislead people.", "fol": "", "prediction": ["all x.((IntentionallyMisleadsPeople(x)) -> -(IntentionallyMisleadsPeople(x) & -IntentionallyMisleadsPeople(x)))"]}
{"id": "enwn_validation_302", "nl": "You knowingly told John incorrect information.", "fol": "", "prediction": ["You knowingly told JohnIncorrectInformation(John)"]}
{"id": "enwn_validation_303", "nl": "If you do something that you know is incorrect, you did that on purpose.", "fol": "", "prediction": ["all x.((DoesIncorrect(x) & Knows(x)) -> DidOnPurpose(x))"]}
{"id": "enwn_validation_304", "nl": "Telling someone incorrect information is misleading them.", "fol": "", "prediction": ["all x.((TellsIncorrectInformation(x) & Person(x)) -> Misleading(x))"]}
{"id": "enwn_validation_305", "nl": "If you do something on purpose, you did that thing intentionally.", "fol": "", "prediction": ["all x.((DoesOnPurpose(x) & Intentionally(x)) -> DidIntentionally(x))"]}
{"id": "enwn_validation_306", "nl": "You told John incorrect information on purpose.", "fol": "", "prediction": ["all x.((John(x) & IncorrectInformation(x)) -> Tells(x,John))"]}
{"id": "enwn_validation_307", "nl": "You misled John on purpose.", "fol": "", "prediction": ["(MisledJohn(John) & Purpose(John))"]}
{"id": "enwn_validation_308", "nl": "You intentionally misled John.", "fol": "", "prediction": ["all x.(IntentionallyMisledJohn(x) -> MisledJohn(x))"]}
{"id": "enwn_validation_309", "nl": "You should not have misled John intentionally.", "fol": "", "prediction": ["-IntentionallyMisledJohn(John)"]}
{"id": "enwn_validation_310", "nl": "You should only fire someone if you have a good reason.", "fol": "", "prediction": ["all x.((Person(x) & GoodRight(x)) -> Fire(x))"]}
{"id": "enwn_validation_311", "nl": "Bob fired Peter because Peter had different ideas than Bob.", "fol": "", "prediction": ["all x y.((Bob(x) & Peter(y)) -> Fired(x,y))"]}
{"id": "enwn_validation_312", "nl": "If two people have different ideas, they do not agree with each other.", "fol": "", "prediction": ["all x.((Person(x) & DifferentIdeas(x)) -> -Agree(x))"]}
{"id": "enwn_validation_313", "nl": "Not agreeing with someone is not a good reason to fire them.", "fol": "", "prediction": ["all x.((Understanding(x) & -Fire(x)) -> -GoodRightToFire(x))"]}
{"id": "enwn_validation_314", "nl": "Bob fired Peter because they do not agree.", "fol": "", "prediction": ["(-Agree(Bob) & Fired(Bob))"]}
{"id": "enwn_validation_315", "nl": "Bob fired Peter without a good reason.", "fol": "", "prediction": ["all x y.((Bob(x) & Peter(y)) -> FiredWithoutGoodRight(x,y))"]}
{"id": "enwn_validation_316", "nl": "Bob should not have fired Peter.", "fol": "", "prediction": ["all x.((Bob(x) & Peter(y)) -> -Fired(x,y))"]}
{"id": "enwn_validation_317", "nl": "Superiors give orders and expect you to follow them.", "fol": "", "prediction": ["all x.(Superior(x) -> (GivesOrders(x) & ExpectsFollowingOrders(x)))"]}
{"id": "enwn_validation_318", "nl": "If an order is unjust, you should disobey those orders.", "fol": "", "prediction": ["all x.((Order(x) & Unjust(x)) -> Disobey(x))"]}
{"id": "enwn_validation_319", "nl": "If you follow an order to commit a crime, you followed an unjust order.", "fol": "", "prediction": ["all x y.((Order(x) & Follows(x,y) & CommitsCrime(y)) -> FollowedUnjustOrder(x))"]}
{"id": "enwn_validation_320", "nl": "If you did the thing you are ordered to do from someone else, you followed the order given by that someone.", "fol": "", "prediction": ["all x y.((Does(x,y) & OrderedFrom(x,y)) -> FollowedOrder(x,y))"]}
{"id": "enwn_validation_321", "nl": "If a superior tells you to do something, that thing is an order.", "fol": "", "prediction": ["all x.((Supervisor(x) & TellsYouToDo(x)) -> Order(x))"]}
{"id": "enwn_validation_322", "nl": "Sara committed fraud because her boss told her to.", "fol": "", "prediction": ["all x.((Sara(x) & BossWrote(x,Sara)) -> CommittedFraud(x))"]}
{"id": "enwn_validation_323", "nl": "Fraud is a crime.", "fol": "", "prediction": ["all x.(Fraud(x) -> Crime(x))"]}
{"id": "enwn_validation_324", "nl": "If someone is your boss, then they are your superior.", "fol": "", "prediction": ["all x.(Boss(x) -> Superior(x))"]}
{"id": "enwn_validation_325", "nl": "You should disobey orders from superiors if they are unjust.", "fol": "", "prediction": ["all x y.((Supervisor(x) & Order(y) & Unjust(y)) -> Disobey(x,y))"]}
{"id": "enwn_validation_326", "nl": "Sara committed a crime  because her boss told her to.", "fol": "", "prediction": ["all x y.((Boss(x) & Sara(y)) -> CommittedCrime(y,x))"]}
{"id": "enwn_validation_327", "nl": "Sara committed a crime  because her superior told her to.", "fol": "", "prediction": ["all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))"]}
{"id": "enwn_validation_328", "nl": "Sara committed a crime because her superior ordered her to.", "fol": "", "prediction": ["all x y.((Sara(x) & Superior(y)) -> CommittedCrime(x,y))"]}
{"id": "enwn_validation_329", "nl": "Sara followed her order to commit a crime given by her superior.", "fol": "", "prediction": ["all x y.((Sara(x) & Superior(y)) -> FollowedOrderToCommitCrime(x,y))"]}
{"id": "enwn_validation_330", "nl": "Sara followed an unjust order given by her superior.", "fol": "", "prediction": ["all x y.((Sara(x) & Superior(y)) -> FollowedUnjustOrder(x,y))"]}
{"id": "enwn_validation_331", "nl": "Sara should have disobeyed her superiors unjust orders.", "fol": "", "prediction": ["all x.((Sara(x) & SuperiorsUnjustOrders(x)) -> ShouldBeDisobed(x))"]}
{"id": "enwn_validation_332", "nl": "If you are cheating, you should tell your partner and stop cheating.", "fol": "", "prediction": ["all x.((Partner(x) & Cheating(x)) -> (Tell(x,x) & StopCheating(x)))"]}
{"id": "enwn_validation_333", "nl": "Stan is seeing Olivia but is partnered with Ellie.", "fol": "", "prediction": ["(Stan(Stan) & Olivia(Stan) & Ellie(Ellie))"]}
{"id": "enwn_validation_334", "nl": "If you are seeing someone other than your partner, then you are cheating on your partner.", "fol": "", "prediction": ["all x.((Seating(x) & OtherThanPartner(x)) -> CheatingOnPartner(x))"]}
{"id": "enwn_validation_335", "nl": "Stan is cheating on his partner.", "fol": "", "prediction": ["all x y.((Stan(x) & Partner(y)) -> Cheating(x,y))"]}
{"id": "enwn_validation_336", "nl": "Stan should stop cheating and tell his partner.", "fol": "", "prediction": ["all x.((Stan(x) & StopCheating(x)) -> TellPartner(x))"]}
{"id": "enwn_validation_337", "nl": "If you hurt someone over a rude remark then you lost your temper.", "fol": "", "prediction": ["all x.((HasTemper(x) & Hurts(x)) -> LostTemper(x))"]}
{"id": "enwn_validation_338", "nl": "Jake punched Jim when Jim said Jake's shirt was stupid.", "fol": "", "prediction": ["all x y.((Jake(x) & Jim(y) & JakeShirt(z) & Stubborn(z)) -> Punched(x,y,z))"]}
{"id": "enwn_validation_339", "nl": "Saying something is stupid is considered a rude remark.", "fol": "", "prediction": ["all x.((SaysStupid(x) & Remark(x)) -> Rust(x))"]}
{"id": "enwn_validation_340", "nl": "You should control your emotions and not hurt someone because you lost your temper.", "fol": "", "prediction": ["all x.((Emotions(x) & -HasTemper(x)) -> Controls(x))"]}
{"id": "enwn_validation_341", "nl": "Jake punched Jim when Jim made a rude remark about Jake's shirt.", "fol": "", "prediction": ["all x y.((Jake(x) & Jim(y) & MadeRuleRemark(y,x)) -> Punched(x,y))"]}
{"id": "enwn_validation_342", "nl": "Jake lost his temper and hurt Jim over a rude remark.", "fol": "", "prediction": ["all x y.((Jake(x) & Jim(y)) -> (LoseTemper(x,y) & Hurts(x,y)))"]}
{"id": "enwn_validation_343", "nl": "Jake should have controlled his emotions and not hurt Jim.", "fol": "", "prediction": ["all x.((Jake(x) & ControlledEmotions(x) & -HasIllness(x)) -> ShouldHave(x,Jim))"]}
{"id": "enwn_validation_344", "nl": "Henry moved his golf ball out of the rough.", "fol": "", "prediction": ["Henry moved golfball out of rough."]}
{"id": "enwn_validation_345", "nl": "Henry didn't take a penalty stroke or tell anyone when he was moving his ball.", "fol": "", "prediction": ["all x.((Henry(x) & -PenaltyStoke(x) & -Says(x)) -> MovesBall(x))"]}
{"id": "enwn_validation_346", "nl": "In golf, if you move your ball without telling anyone or taking a penalty stroke, you cheat.", "fol": "", "prediction": ["all x.((Golf(x) & MovesBallWithoutSigningOrPenaltyStroke(x)) -> Cheats(x))"]}
{"id": "enwn_validation_347", "nl": "Cheating in a game is disrespectful to the other players.", "fol": "", "prediction": ["all x y.((Game(x) & Player(y)) -> DisrespectfulTo(x,y))"]}
{"id": "enwn_validation_348", "nl": "Henry moved his golf ball out of the rough without telling anyone or taking a penalty stroke.", "fol": "", "prediction": ["all x.((Henry(x) & GolfBall(x)) -> MovedOutOfRough(x))"]}
{"id": "enwn_validation_349", "nl": "Henry cheated at golf.", "fol": "", "prediction": ["Henry CheatedAtGolf(Henry)"]}
{"id": "enwn_validation_350", "nl": "Henry disrespected the other golf players.", "fol": "", "prediction": ["Henry disrespected golfers."]}
{"id": "enwn_validation_351", "nl": "Oswald realized his stocks would soon be worthless, putting him in debt.", "fol": "", "prediction": ["Oswald realized his stocks would soon be worthless, putting him in debt."]}
{"id": "enwn_validation_352", "nl": "To avoid debt, Oswald sold his stocks to other people.", "fol": "", "prediction": ["all x y.((Oswald(x) & Person(y)) -> SoldTo(x,y))"]}
{"id": "enwn_validation_353", "nl": "It is deceitful to sell something when it has no value.", "fol": "", "prediction": ["all x y.((Sells(x,y) & -Value(y)) -> Deceitful(x))"]}
{"id": "enwn_validation_354", "nl": "You should not do deceitful things.", "fol": "", "prediction": ["all x.((DoDeceitfulThings(x)) -> -Do(x))"]}
{"id": "enwn_validation_355", "nl": "Oswald sold stocks that he knew had no value to other people.", "fol": "", "prediction": ["Oswald sold stocks he knew had no value to other people."]}
{"id": "enwn_validation_356", "nl": "If you know something has no value, you should not sell that thing.", "fol": "", "prediction": ["all x.((KnowsNoValue(x) & -Sells(x)) -> -Sells(x))"]}
{"id": "enwn_validation_357", "nl": "Oswald should not have sold those stocks.", "fol": "", "prediction": ["Oswald should not have sold those stocks."]}
{"id": "enwn_validation_358", "nl": "Jeff took candy from a child in the park.", "fol": "", "prediction": ["all x y.((Jeff(x) & Child(y)) -> TakesCandy(x,y))"]}
{"id": "enwn_validation_359", "nl": "Children are often considered helpless due to their age.", "fol": "", "prediction": ["all x.((Child(x) & Age(x)) -> Helpless(x))"]}
{"id": "enwn_validation_360", "nl": "Stealing from the helpless is taking advantage of them.", "fol": "", "prediction": ["all x.(StealFromHelpless(x) -> TakesAvormentOfHelpless(x))"]}
{"id": "enwn_validation_361", "nl": "Taking advantage of someone is considered being cruel.", "fol": "", "prediction": ["all x.(TakesAdvantageOf(x,y) -> Cruel(x))"]}
{"id": "enwn_validation_362", "nl": "Jeff took candy from a helpless child in the park.", "fol": "", "prediction": ["all x y z.((Jeff(x) & Child(y) & Park(z)) -> TakesCandyFrom(x,y,z))"]}
{"id": "enwn_validation_363", "nl": "Stealing from the helpless is considered being cruel.", "fol": "", "prediction": ["all x.(StealingFromHelpless(x) -> Cruel(x))"]}
{"id": "enwn_validation_364", "nl": "It was cruel of Jeff to steal candy from the child.", "fol": "", "prediction": ["all x y.((Child(x) & Jeff(y)) -> StealCandy(y,x))"]}
{"id": "enwn_validation_365", "nl": "Lois let her dog poop on her neighbors lawn.", "fol": "", "prediction": ["all x y.((Dog(x) & Neighbor(y)) -> LetsPoopOn(x,y))"]}
{"id": "enwn_validation_366", "nl": "Lois never picks up her dog's poop because she thinks it's gross.", "fol": "", "prediction": ["all x y.((Dog(x) & Lois(y)) -> -PicksUpPoop(y,x))"]}
{"id": "enwn_validation_367", "nl": "Leaving a mess requires someone else to clean it.", "fol": "", "prediction": ["all x y.((LaysMachine(x) & CleansMachine(y)) -> RequiresAlternativeCleaning(x,y))"]}
{"id": "enwn_validation_368", "nl": "Dog poop is a mess.", "fol": "", "prediction": ["all x.(DogPoop(x) -> Mess(x))"]}
{"id": "enwn_validation_369", "nl": "It is inconsiderate to make someone else account for your responsibilities.", "fol": "", "prediction": ["all x.((Alternative(x) & AccountForResponsibilities(x)) -> Inconsiderate(x))"]}
{"id": "enwn_validation_370", "nl": "Avoiding your responsibilities requires someone else to account for them.", "fol": "", "prediction": ["all x.((AvoidsResponsibilities(x) & AccountsForResponsibilities(x)) -> RequiresAnother(x))"]}
{"id": "enwn_validation_371", "nl": "Lois did not pick up her dog's poop on the neighbors lawn.", "fol": "", "prediction": ["Lois & DogPoop(Lois) & -PicksUpOnNeighborsLawn(Lois,Lois))"]}
{"id": "enwn_validation_372", "nl": "Dog poop is a mess that needs to be cleaned by someone.", "fol": "", "prediction": ["all x.(DogPoop(x) -> (Miss(x) & NeedsCleaning(x)))"]}
{"id": "enwn_validation_373", "nl": "Lois left a mess that needs to be cleaned by someone.", "fol": "", "prediction": ["all x y.((Lois(x) & Mess(y)) -> NeedsCleaning(x,y))"]}
{"id": "enwn_validation_374", "nl": "Avoiding your responsibilities is inconsiderate.", "fol": "", "prediction": ["all x.((AvoidsResponsibilities(x) & Inconsiderate(x)) -> Inconsiderate(x))"]}
{"id": "enwn_validation_375", "nl": "You are avoiding your responsibilities when you leave a mess for someone else.", "fol": "", "prediction": ["all x y.((LaysMach(x,y) & SomeoneOther(y)) -> AvoidsResponsibilities(x))"]}
{"id": "enwn_validation_376", "nl": "Leaving a mess for someone else to clean is being inconsiderate.", "fol": "", "prediction": ["all x.((LaysMachine(x) & ForOther(x)) -> Inconsiderate(x))"]}
{"id": "enwn_validation_377", "nl": "Lois is inconsiderate.", "fol": "", "prediction": ["Lois is inconsiderate."]}
{"id": "enwn_validation_378", "nl": "Joshua likes driving an extremely loud car in the middle of the night because it wakes people up.", "fol": "", "prediction": ["all x y.((Joshua(x) & LoudCar(y) & MidNight(x)) -> WakesPeopleUp(x))"]}
{"id": "enwn_validation_379", "nl": "Making things unpleasant for someone is rude.", "fol": "", "prediction": ["all x.((MakingUnpleasantForPerson(x)) -> Rust(x))"]}
{"id": "enwn_validation_380", "nl": "Waking someone up at night prevents them from getting a full night's rest.", "fol": "", "prediction": ["all x y.((WakingUpAtNight(x) & Person(y)) -> -GetsFullNightsRest(y))"]}
{"id": "enwn_validation_381", "nl": "Not getting a full night's rest is unpleasant.", "fol": "", "prediction": ["all x.((NightsRest(x) & -FullNightsRest(x)) -> Unpleasant(x))"]}
{"id": "enwn_validation_382", "nl": "If you like to be rude, you're a rude person.", "fol": "", "prediction": ["all x.((LikesToBeRust(x) & Rust(x)) -> RustPerson(x))"]}
{"id": "enwn_validation_383", "nl": "Waking someone up at night can be unpleasant for that person.", "fol": "", "prediction": ["all x.((Person(x) & WakingUpAtNight(x)) -> UnappealingFor(x,Person))"]}
{"id": "enwn_validation_384", "nl": "It is rude to wake people up at night.", "fol": "", "prediction": ["all x.((WakeUp(x) & Night(x)) -> Rust(x))"]}
{"id": "enwn_validation_385", "nl": "Joshua likes to be rude.", "fol": "", "prediction": ["all x.(Joshua(x) -> LikesToBeRust(x))"]}
{"id": "enwn_validation_386", "nl": "Joshua is a rude person.", "fol": "", "prediction": ["all x.(Josh(x) -> RustPerson(x))"]}
{"id": "enwn_validation_387", "nl": "Katie used her neighbors' internet access without their permission.", "fol": "", "prediction": ["all x y.((Neighbor(x) & Katie(y)) -> UsedInternetAccessWithoutPermission(y,x))"]}
{"id": "enwn_validation_388", "nl": "Using someone's internet access doesn't prevent them from using it.", "fol": "", "prediction": ["all x y.((UsesInternetAccess(x) & Person(y)) -> -PreventsFromUsingInternetAccess(y,x))"]}
{"id": "enwn_validation_389", "nl": "It's wrong to deprive someone of their property.", "fol": "", "prediction": ["all x.((DeprivesProperty(x) & Person(x)) -> Irresponsible(x))"]}
{"id": "enwn_validation_390", "nl": "Katie didn't deprive her neighbors of their internet by using it without their permission.", "fol": "", "prediction": ["all x y.((Neighbor(x) & Katie(y)) -> -DeprivesInternet(y,x))"]}
{"id": "enwn_validation_391", "nl": "It was okay for Katie to use her neighbors' internet.", "fol": "", "prediction": ["all x.((Katie(x) & NeighborsInternet(x)) -> OK(x))"]}
{"id": "enwn_validation_392", "nl": "Pushing people out of your way is an impatient thing to do.", "fol": "", "prediction": ["all x.(PushingPeopleOutOfWay(x) -> ImpatientThing(x))"]}
{"id": "enwn_validation_393", "nl": "Patience is a virtue.", "fol": "", "prediction": ["all x.(Patient(x) -> Virtue(x))"]}
{"id": "enwn_validation_394", "nl": "People should be virtuous.", "fol": "", "prediction": ["all x.(Person(x) -> Virtuous(x))"]}
{"id": "enwn_validation_395", "nl": "Letty shoved Cathleen out of the way when walking through a doorway.", "fol": "", "prediction": ["all x y.((Letty(x) & Cathleen(y) & WalkingThroughDoorway(x,y)) -> PushedOutOfWay(x,y))"]}
{"id": "enwn_validation_396", "nl": "People should be patient.", "fol": "", "prediction": ["all x.(Person(x) -> Patient(x))"]}
{"id": "enwn_validation_397", "nl": "You shouldn't push people out of your way.", "fol": "", "prediction": ["all x.((PushPeopleOutOfWay(x)) -> -PushPeopleOutOfWay(x))"]}
{"id": "enwn_validation_398", "nl": "Letty should not have shoved Cathleen.", "fol": "", "prediction": ["all x.((Letty(x) & -PoundedCathleen(x)) -> -PoundedCathleen(x))"]}
{"id": "enwn_validation_399", "nl": "The professor hugged the student without asking permission.", "fol": "", "prediction": ["all x y.((Professor(x) & Student(y)) -> Hugged(x,y))"]}
{"id": "enwn_validation_400", "nl": "It is not respectful to do things to people without their permission.", "fol": "", "prediction": ["all x y.((DoingThings(x) & Person(y) & -Permission(x,y)) -> -Respectful(x))"]}
{"id": "enwn_validation_401", "nl": "You should respect people.", "fol": "", "prediction": ["all x.(RespectPeople(x) -> RespectPeople(x))"]}
{"id": "enwn_validation_402", "nl": "It was disrespectful of the professor to hug the student.", "fol": "", "prediction": ["all x y.((Professor(x) & Student(y)) -> DisrespectfulToHur(x,y))"]}
{"id": "enwn_validation_403", "nl": "The professor should not have hugged the student.", "fol": "", "prediction": ["all x y.((Professor(x) & Student(y)) -> -Hungry(x,y))"]}
{"id": "enwn_validation_404", "nl": "Knowing the paper's authors does not reflect the paper's merit.", "fol": "", "prediction": ["all x.((KnowsAuthors(x) & -ReflectsMerit(x)) -> -ReflectsMerit(x))"]}
{"id": "enwn_validation_405", "nl": "You should score \npapers based on merit.", "fol": "", "prediction": ["all x.(ScorePaper(x) -> BasedOnMerit(x))"]}
{"id": "enwn_validation_406", "nl": "Andy gave a high score to the paper because he knew the authors.", "fol": "", "prediction": ["all x y.((Andy(x) & Paper(y) & KnowsAuthors(x,y)) -> HighScore(x,y))"]}
{"id": "enwn_validation_407", "nl": "Giving a high score to a paper because you know the authors is wrong.", "fol": "", "prediction": ["all x y.((HighScore(x) & Paper(y) & KnowsAuthors(x,y)) -> Wrong(x))"]}
{"id": "enwn_validation_408", "nl": "Andy should not have scored the paper based on how well he knew the authors.", "fol": "", "prediction": ["all x.((Andy(x) & WellKnowsAuthors(x)) -> -ScoredPaper(x))"]}
{"id": "enwn_validation_409", "nl": "Throwing things out of frustration is an example of having a temper tantrum.", "fol": "", "prediction": ["all x.((ThrewsOutFrustration(x) & HasTemperament(x)) -> HasTemperament(x))"]}
{"id": "enwn_validation_410", "nl": "People should not let their emotions get out of control.", "fol": "", "prediction": ["all x.((Person(x) & -LetsEmotionsGetOutOfControl(x)) -> -LetsEmotionsGetOutOfControl(x))"]}
{"id": "enwn_validation_411", "nl": "Having a temper tantrum in public means you are not in control of your emotions.", "fol": "", "prediction": ["all x.((TemperTanner(x) & Public(x)) -> -InControlOfEmotions(x))"]}
{"id": "enwn_validation_412", "nl": "Martha threw a chair out of frustration while she was at the DMV.", "fol": "", "prediction": ["all x y.((Martha(x) & DMV(y)) -> ThrewChairOutOfFrustration(x,y))"]}
{"id": "enwn_validation_413", "nl": "The DMV is a public location.", "fol": "", "prediction": ["all x.(DMV(x) -> PublicLocation(x))"]}
{"id": "enwn_validation_414", "nl": "People should not have temper tantrums in public.", "fol": "", "prediction": ["all x.((Person(x) & -TemperTentrum(x)) -> -PublicTentrum(x))"]}
{"id": "enwn_validation_415", "nl": "People shouldn't throw things in public out of frustration.", "fol": "", "prediction": ["all x.((Person(x) & -ThrewsInPublicOutOfFrustration(x)) -> -ThrewsInPublicOutOfFrustration(x))"]}
{"id": "enwn_validation_416", "nl": "Martha thew a chair out of frustration in public.", "fol": "", "prediction": ["all x y.((Martha(x) & Chair(y)) -> (FrustrationInPublic(x,y) & MarthaThew(x,y)))"]}
{"id": "enwn_validation_417", "nl": "Martha should not have thrown the chair.", "fol": "", "prediction": ["Martha ne should have thrown thechair."]}
{"id": "enwn_validation_418", "nl": "Not helping someone in trouble is allowing a bad thing to happen to them.", "fol": "", "prediction": ["all x.((HelpingInTrouble(x) & AllowingBadThing(x)) -> AllowingBadThingToOccur(x))"]}
{"id": "enwn_validation_419", "nl": "Allowing a bad thing to happen to someone is considered harming them.", "fol": "", "prediction": ["all x.((AllowsBadThing(x) & HappensTo(x,y)) -> Harms(x))"]}
{"id": "enwn_validation_420", "nl": "You should not do something that harms someone else.", "fol": "", "prediction": ["all x.((Does(x) & HarmsAnother(x)) -> -Do(x))"]}
{"id": "enwn_validation_421", "nl": "Joey cried out for help when he was being bullied.", "fol": "", "prediction": ["all x.((Joey(x) & Bullied(x)) -> CriesOutForHelp(x))"]}
{"id": "enwn_validation_422", "nl": "Jan heard Joey but didn't do anything.", "fol": "", "prediction": ["(HeardJoey(Jan) & -DoedWhat(Jan))"]}
{"id": "enwn_validation_423", "nl": "Not helping someone in trouble is considered harming them.", "fol": "", "prediction": ["all x.((Helping(x) & PersonInTrouble(x)) -> Harming(x))"]}
{"id": "enwn_validation_424", "nl": "You should help people in trouble.", "fol": "", "prediction": ["all x.(HelpsInTrouble(x) -> HelpsInTrouble(x))"]}
{"id": "enwn_validation_425", "nl": "Jan heard Joey crying for help but didn't do anything.", "fol": "", "prediction": ["(HeardJoeyCryingForHelp(Jan) & -Does(Jan))"]}
{"id": "enwn_validation_426", "nl": "Jan should have helped Joey.", "fol": "", "prediction": ["Jan should have helped Joey."]}
{"id": "enwn_validation_427", "nl": "Mark took his kids out of school to help him beg other people for money.", "fol": "", "prediction": ["all x y.((Mark(x) & Kid(y)) -> TakesOutOfSchoolToHelpBegForMoney(x,y))"]}
{"id": "enwn_validation_428", "nl": "Asking people for money is a way to make money.", "fol": "", "prediction": ["all x.(AsksForMoney(x) -> MakesMoney(x))"]}
{"id": "enwn_validation_429", "nl": "Removing your kids from school is detrimental to them.", "fol": "", "prediction": ["all x.(RemovesKidsFromSchool(x) -> DetrimentalToKids(x))"]}
{"id": "enwn_validation_430", "nl": "To exploit someone is the action or fact of treating someone unfairly in order to benefit from their work.", "fol": "", "prediction": ["all x.((TreatsUnfairly(x) & BenefitsFromWork(x)) -> Exploits(x))"]}
{"id": "enwn_validation_431", "nl": "You should treat people fairly.", "fol": "", "prediction": ["all x.(TreatPeopleFairly(x) -> FairTranscription(x))"]}
{"id": "enwn_validation_432", "nl": "Mark took his kids out of school to help him make money.", "fol": "", "prediction": ["all x y.((Mark(x) & Kid(y)) -> TakenOutOfSchoolToHelpMakeMoney(x,y))"]}
{"id": "enwn_validation_433", "nl": "Mark is using his children to get money at their expense.", "fol": "", "prediction": ["all x y.((Mark(x) & Child(y)) -> UsesToGetMoneyAtExpense(x,y))"]}
{"id": "enwn_validation_434", "nl": "Mark is exploiting his children.", "fol": "", "prediction": ["Mark exploits his children."]}
{"id": "enwn_validation_435", "nl": "You should not exploit people.", "fol": "", "prediction": ["all x.((Person(x) & -Exploit(x)) -> -Exploit(x))"]}
{"id": "enwn_validation_436", "nl": "Mark should not be exploiting his children.", "fol": "", "prediction": ["Mark should not be exploiting his children."]}
{"id": "enwn_validation_437", "nl": "Deciding not to hire someone on the basis of their traits is one kind of discrimination.", "fol": "", "prediction": ["all x.((DecidedNotToHire(x) & BasedOnTraits(x)) -> Discrimination(x))"]}
{"id": "enwn_validation_438", "nl": "It is unjust to discriminate on the basis of pregnancy.", "fol": "", "prediction": ["all x.((Discrimination(x) & Pregnancy(x)) -> Unjust(x))"]}
{"id": "enwn_validation_439", "nl": "You should treat people justly.\n", "fol": "", "prediction": ["all x.(TreatPeopleJustly(x) -> TreatPeopleJustly(x))"]}
{"id": "enwn_validation_440", "nl": "Victor did not hire Maddie because she was going on maternity leave soon.", "fol": "", "prediction": ["(-HiresMaddie(Victor) & MaddieGoesOnMaternityLeave(Victor))"]}
{"id": "enwn_validation_441", "nl": "If someone is going on maternity leave then they are pregnant.", "fol": "", "prediction": ["all x.((Person(x) & GoingOnMaternityLeave(x)) -> Pregnant(x))"]}
{"id": "enwn_validation_442", "nl": "You shouldn't discriminate on the basis of pregnancy.", "fol": "", "prediction": ["all x.((Pregnancy(x) & -Discriminate(x)) -> -Discriminate(x))"]}
{"id": "enwn_validation_443", "nl": "You shouldn't base hiring decisions off of whether or not someone is pregnant.", "fol": "", "prediction": ["all x.((HostingDecision(x) & -(Pregnant(x) | -Pregnant(x)))) -> -BasesOn(x,y))"]}
{"id": "enwn_validation_444", "nl": "Victor decided not to hire Maddie based on her pregnancy.", "fol": "", "prediction": ["(-HuntsMaddie(Victor) & BasedOnPregnancy(Victor))"]}
{"id": "enwn_validation_445", "nl": "Victor should not have based his decision off of Maddie's pregnancy.", "fol": "", "prediction": ["all x.((Victor(x) & Maddie(x)) -> -BasedDecisionOff(x,Maddie))"]}
{"id": "enwn_validation_446", "nl": "If you're rude to people who hold a certain view, it means you don't respect that view.", "fol": "", "prediction": ["all x.((Rust(x) & HoldsSpecificView(x)) -> -RespectsSpecificView(x))"]}
{"id": "enwn_validation_447", "nl": "Religion is a kind of personal preference.", "fol": "", "prediction": ["all x.(Religion(x) -> PersonalPreference(x))"]}
{"id": "enwn_validation_448", "nl": "You should be tolerant.", "fol": "", "prediction": ["all x.(Tolerant(x) -> -Tolerant(x))"]}
{"id": "enwn_validation_449", "nl": "Respecting other people's preferences is a form of tolerance.", "fol": "", "prediction": ["all x.(RespectsOtherPeoplePreferences(x) -> Tolerance(x))"]}
{"id": "enwn_validation_450", "nl": "Eugene is rude to people who do not share his religion.", "fol": "", "prediction": ["all x.((Eugene(x) & People(x) & -ShareReligion(x)) -> Rust(x))"]}
{"id": "enwn_validation_451", "nl": "If you're rude to people because of the religion they hold, it means you don't respect their religion.", "fol": "", "prediction": ["all x.((Rule(x) & HoldsReligion(x)) -> -RespectsReligion(x))"]}
{"id": "enwn_validation_452", "nl": "You should respect other people's preferences.", "fol": "", "prediction": ["all x.(RespectsPositives(x) -> RespectsPositives(x))"]}
{"id": "enwn_validation_453", "nl": "You should respect other people's religious preferences.", "fol": "", "prediction": ["all x.(RespectReligiousPreferences(x) -> RespectReligiousPreferences(x))"]}
{"id": "enwn_validation_454", "nl": "You should not be rude to people because of the religion they hold.", "fol": "", "prediction": ["all x.((People(x) & Religion(x)) -> -Rusty(x))"]}
{"id": "enwn_validation_455", "nl": "Eugene should not be rude to people who do not share his religion.", "fol": "", "prediction": ["all x.((Eugene(x) & -ShareReligion(x)) -> -Rusty(x))"]}
{"id": "enwn_validation_456", "nl": "Intruding on people is disrespecting their privacy.", "fol": "", "prediction": ["all x.(IntrudingOnPeople(x) -> DisrespectsPrivacy(x))"]}
{"id": "enwn_validation_457", "nl": "You should respect people's privacy.", "fol": "", "prediction": ["all x.(RespectsPrivacy(x) -> People(x))"]}
{"id": "enwn_validation_458", "nl": "Knocking on someone's door when they do not wish to be disturbed is intrusive.", "fol": "", "prediction": ["all x y.((KnocksOnDoor(x) & Person(y) & -Disturbed(y)) -> Intrusive(x))"]}
{"id": "enwn_validation_459", "nl": "Sandra constantly ignores \"No Solicitation\" signs and knocks on people's doors.", "fol": "", "prediction": ["all x.((Sandra(x) & IgnoresNoSolicitation(x)) -> KnocksOnDoors(x))"]}
{"id": "enwn_validation_460", "nl": "You shouldn't intrude on people.", "fol": "", "prediction": ["all x.(IntrudeOnPeople(x) -> -IntrudeOnPeople(x))"]}
{"id": "enwn_validation_461", "nl": "Sandra intrudes on people.", "fol": "", "prediction": ["all x y.((Sandra(x) & Person(y)) -> IntrudesOn(x,y))"]}
{"id": "enwn_validation_462", "nl": "Sandra should not intrude on people.", "fol": "", "prediction": ["all x.(Sandra(x) -> -IntrudeOnPeople(x))"]}
{"id": "enwn_validation_463", "nl": "Martin kicked his dog to make it stop barking.", "fol": "", "prediction": ["all x y.((Dog(x) & Martin(y)) -> Kept(y,x))"]}
{"id": "enwn_validation_464", "nl": "Kicking an animal hurts it.", "fol": "", "prediction": ["all x y.((Animal(x) & Kicking(x,y)) -> Hurts(x,y))"]}
{"id": "enwn_validation_465", "nl": "Hurting people or animals is considered abuse.", "fol": "", "prediction": ["all x.(Hurting(x) -> Abuse(x))"]}
{"id": "enwn_validation_466", "nl": "You should not abuse any living thing.", "fol": "", "prediction": ["all x.((LivingThing(x) & -Abuse(x)) -> -Abuse(x))"]}
{"id": "enwn_validation_467", "nl": "Martin hurt his dog.", "fol": "", "prediction": ["Martin hurtsDog(Martin)"]}
{"id": "enwn_validation_468", "nl": "You should not hurt animals.", "fol": "", "prediction": ["all x.((Animal(x) & -HasHair(x)) -> -HasHair(x))"]}
{"id": "enwn_validation_469", "nl": "Martin should not have hurt his dog.", "fol": "", "prediction": ["Martin should not have hurtDog(Martin)"]}
{"id": "enwn_validation_470", "nl": "If you think your college didn't prepare you for your job then you lack self-assurance in your abilities.", "fol": "", "prediction": ["all x.((College(x) & -PreparesForJob(x)) -> LacksSelfAssuranceInAbilities(x))"]}
{"id": "enwn_validation_471", "nl": "Cindy doesn't think her college was good enough for her current job. ", "fol": "", "prediction": ["(-GoodEnoughForCollege(Cindy))"]}
{"id": "enwn_validation_472", "nl": "Confidence is a feeling of self-assurance arising from one's appreciation of one's own abilities or qualities.", "fol": "", "prediction": ["all x.(Confidence(x) -> (FeelingOfSelfAssurance(x) & AppreciationOfAbilitiesOrQualities(x)))"]}
{"id": "enwn_validation_473", "nl": "Being confident allows you to feel ready for life's experiences.", "fol": "", "prediction": ["all x.((Confident(x) & FeelsReadyForLifeExperiences(x)) -> Confident(x))"]}
{"id": "enwn_validation_474", "nl": "It's important to feel ready for life's experiences.", "fol": "", "prediction": ["all x.((FeelReadyForLife(x)) -> Important(x))"]}
{"id": "enwn_validation_475", "nl": "Cindy has a lack of self-assurance in her abilities.", "fol": "", "prediction": ["all x.(Cindy(x) -> LackOfSelfAssurance(x))"]}
{"id": "enwn_validation_476", "nl": "Cindy lacks confidence.", "fol": "", "prediction": ["(LacksConfidence(Cindy))"]}
{"id": "enwn_validation_477", "nl": "It's important to be confident.", "fol": "", "prediction": ["all x.(Confident(x) -> Important(x))"]}
{"id": "enwn_validation_478", "nl": "Cindy should try to be more confident.", "fol": "", "prediction": ["all x.(Cindy(x) -> ShouldTryToBeMoreConfident(x))"]}
{"id": "enwn_validation_479", "nl": "Personal beliefs aren't a good reason to disobey the law.", "fol": "", "prediction": ["all x.((PersonalBelief(x) & -GoodRightToDisobeyLaw(x)) -> -GoodRightToDisobeyLaw(x))"]}
{"id": "enwn_validation_480", "nl": "The law stipulates you must report your income.", "fol": "", "prediction": ["all x.((Law(x) & ReportIncome(x)) -> Stipulates(x))"]}
{"id": "enwn_validation_481", "nl": "John did not report his income because he does not believe taxes are justified.", "fol": "", "prediction": ["John -ReportedIncome(John) & -CreditsTaxesJustified(John))"]}
{"id": "enwn_validation_482", "nl": "Personal beliefs aren't a good reason to avoid reporting your income.", "fol": "", "prediction": ["all x.((PersonalBelief(x) & -GoodRightToAvoidReportingIncome(x)) -> -GoodRightToAvoidReportingIncome(x))"]}
{"id": "enwn_validation_483", "nl": "John should have reported his income.", "fol": "", "prediction": ["John should have reported his income."]}
{"id": "enwn_validation_484", "nl": "Corey went to work while she was sick during a pandemic.", "fol": "", "prediction": ["all x y.((Corey(x) & Pandemic(y)) -> GoesToWork(x,y))"]}
{"id": "enwn_validation_485", "nl": "If you do something while sick you are prioritizing that thing over your health.", "fol": "", "prediction": ["all x.((DoesWhileSick(x) & Prioritizes(x,health)) -> Prioritizes(x,health))"]}
{"id": "enwn_validation_486", "nl": "Everyone prioritizing health helps stop disease from spreading.", "fol": "", "prediction": ["all x.(PrioritizesHealth(x) -> StopsDiseaseSpreading(x))"]}
{"id": "enwn_validation_487", "nl": "It's important to stop the spread of disease, especially when health risk is elevated.", "fol": "", "prediction": ["all x.((HealthRisk(x) & Elevated(x)) -> StopsSpreadOfDisease(x))"]}
{"id": "enwn_validation_488", "nl": "A pandemic is a disease that is prevalent over a whole country or the world.", "fol": "", "prediction": ["all x.(Pandemic(x) -> (Disease(x) & PredominantOver(x,country) | PredominantOver(x,world)))"]}
{"id": "enwn_validation_489", "nl": "A disease that can effect the whole world escalates health risks for everyone.", "fol": "", "prediction": ["all x.((Disease(x) & CanEffectWholeWorld(x)) -> EscalatesHealthRisks(x))"]}
{"id": "enwn_validation_490", "nl": "Corey prioritized work over her health during a pandemic.", "fol": "", "prediction": ["all x y.((Corey(x) & Pandemic(y)) -> PrioritizedWorkOverHealth(x,y))"]}
{"id": "enwn_validation_491", "nl": "Health should be everyone's priority, especially when health risk is elevated.", "fol": "", "prediction": ["all x.((HealthPriority(x) & HealthRiskElevated(x)) -> Priority(x))"]}
{"id": "enwn_validation_492", "nl": "A pandemic escalates health risks for everyone.", "fol": "", "prediction": ["all x.(Pandemic(x) -> EscalatesHealthRisks(x))"]}
{"id": "enwn_validation_493", "nl": "During a pandemic, health should be everyone's top priority.", "fol": "", "prediction": ["all x.(Pandemic(x) -> HealthTopPriority(x))"]}
{"id": "enwn_validation_494", "nl": "Corey had the wrong priorities.", "fol": "", "prediction": ["Corey had the wrongpriorities."]}
{"id": "enwn_validation_495", "nl": "Ryan made fun of Stew's favorite TV show in front of others.", "fol": "", "prediction": ["Ryan made funOfStew'sFavoriteTVShow(Ryan,FollowingOthers)"]}
{"id": "enwn_validation_496", "nl": "If you are in front of others then you are in public.", "fol": "", "prediction": ["all x.((InFrontOfOthers(x) & Public(x)) -> InFrontOfOthers(x))"]}
{"id": "enwn_validation_497", "nl": "Making fun of something that someone else likes can make that person feel ashamed and foolish.", "fol": "", "prediction": ["all x y.((Fun(x) & Person(y) & Likes(x,y)) -> (Shamed(y) & Foolish(y)))"]}
{"id": "enwn_validation_498", "nl": "To humiliate someone is to make someone feel ashamed and foolish by injuring their dignity and self-respect, especially publicly.", "fol": "", "prediction": ["all x y.((Humorize(x) & Person(y)) -> (MakesShameful(x,y) & MakesFoolish(x,y) & InjuresDignityAndSelfRespect(x,y)))"]}
{"id": "enwn_validation_499", "nl": "Humiliation is a form of harm.", "fol": "", "prediction": ["all x.(Humiliation(x) -> Harm(x))"]}
{"id": "enwn_validation_500", "nl": "Ryan made fun of Stew's favorite TV show in public.", "fol": "", "prediction": ["Ryan made funOfFavoriteTVShow(Ryan,Stew) & InPublic(Ryan,Stew))"]}
{"id": "enwn_validation_501", "nl": "Ryan made Stew feel ashamed and foolish in public.", "fol": "", "prediction": ["Ryan made Stew feel ashamed and foolish in public."]}
{"id": "enwn_validation_502", "nl": "Ryan humiliated Stew.", "fol": "", "prediction": ["Ryan humiliatedStew."]}
{"id": "enwn_validation_503", "nl": "You should not humiliate someone else.", "fol": "", "prediction": ["all x.((Another(x) & -Humorize(x)) -> -Humorize(x))"]}
{"id": "enwn_validation_504", "nl": "Ryan should not have humiliated Stew.", "fol": "", "prediction": ["all x.((Ryan(x) & Stew(y)) -> -Hammed(x,y))"]}
{"id": "enwn_validation_505", "nl": "Henry was dumped by Chloe and thought it was unfair of her so he is planning to deface her Facebook page.", "fol": "", "prediction": ["(DumpedByChloe(Henry) & ThoughtUnfair(Henry) & PlannedToDefaceFacebook(Henry,Facebook))"]}
{"id": "enwn_validation_506", "nl": "If someone does something to you that feels unfair then you feel wronged by that person.", "fol": "", "prediction": ["all x.((DoesUnfairThing(x) & FeelsUnfair(x)) -> FeelsWorstBy(x))"]}
{"id": "enwn_validation_507", "nl": "Defacing someone's social media page is a way of harming them.", "fol": "", "prediction": ["all x y.((SocialMediaPage(x) & Person(y) & Defacing(x,y)) -> Harms(x,y))"]}
{"id": "enwn_validation_508", "nl": "Planning to inflict harm on someone for a wrong suffered at their hand is called seeking revenge.", "fol": "", "prediction": ["all x.((PlansToInflictHarm(x) & Person(x) & WrongSufferedAtHand(x)) -> SeekingRevenge(x))"]}
{"id": "enwn_validation_509", "nl": "It is better to heal than to hurt others.", "fol": "", "prediction": ["all x y.((Heal(x) & Illness(y)) -> BetterToHeal(x,y))"]}
{"id": "enwn_validation_510", "nl": "When you feel wronged by someone, forgiving and forgetting is a way of healing.", "fol": "", "prediction": ["all x.((FeltWrongedBy(x) & ForgivesAndForgets(x)) -> Healing(x))"]}
{"id": "enwn_validation_511", "nl": "Henry felt wronged by Chloe and was planning to deface her Facebook page.", "fol": "", "prediction": ["(FeltWrongedByChloe(Henry) & PlannedToDefeatFacebook(Henry,Facebook))"]}
{"id": "enwn_validation_512", "nl": "Henry felt wronged by Chloe and was planning to inflict harm on her.", "fol": "", "prediction": ["all x y.((Henry(x) & Chloe(y)) -> (FeltWronged(x,y) & PlannedToInflictHarm(x,y)))"]}
{"id": "enwn_validation_513", "nl": "Henry is seeking revenge.", "fol": "", "prediction": ["Henry seeksRevenge(Henry)"]}
{"id": "enwn_validation_514", "nl": "When you feel wronged, it is better to forgive and forget than to hurt those who wronged you.", "fol": "", "prediction": ["all x.((FeltWorsted(x) & BetterToForgive(x) & BetterToForget(x)) -> Irresponsible(x))"]}
{"id": "enwn_validation_515", "nl": "It is better to forgive and forget than to seek revenge.", "fol": "", "prediction": ["all x.((Forgives(x) & Forgets(x)) -> BetterToSeekRevenge(x))"]}
{"id": "enwn_validation_516", "nl": "Henry should forgive and forget instead of seeking revenge.", "fol": "", "prediction": ["all x.(Henry(x) -> (Forgive(x) & Forget(x) & -SeekRevenge(x)))"]}
{"id": "enwn_validation_517", "nl": "Slandering is damaging to a person's reputation.", "fol": "", "prediction": ["all x.(Slandering(x) -> DamagesReputation(x))"]}
{"id": "enwn_validation_518", "nl": "Damaging someone's reputation is harmful to them.", "fol": "", "prediction": ["all x y.((Damaging(x) & Person(y)) -> HarmfulToReputation(x,y))"]}
{"id": "enwn_validation_519", "nl": "Paul slandered Jimmy in his magazine to increase sales.", "fol": "", "prediction": ["Paul slandered Jimmy in his magazine to increase sales."]}
{"id": "enwn_validation_520", "nl": "Slandering someone is harmful to them.", "fol": "", "prediction": ["all x y.((Slanderer(x) & Person(y)) -> HarmfulTo(x,y))"]}
{"id": "enwn_validation_521", "nl": "You should not slander someone.", "fol": "", "prediction": ["all x.(Slander(x) -> -Slander(x))"]}
{"id": "enwn_validation_522", "nl": "Paul should not have slandered Jimmy.", "fol": "", "prediction": ["Paul -shouldn'tHasSlanderedJimmy(Paul)"]}
{"id": "enwn_validation_523", "nl": "Mocking someone is intentionally aggravating them.", "fol": "", "prediction": ["all x.(Mocking(x) -> IntentionallyAggravates(x))"]}
{"id": "enwn_validation_524", "nl": "Intentionally aggravating someone is not encouraging positive discourse.", "fol": "", "prediction": ["all x.((IntentionallyAggravates(x) & Person(x)) -> -EncouragesPositiveDiscourse(x))"]}
{"id": "enwn_validation_525", "nl": "We should encourage positive discourse.", "fol": "", "prediction": ["all x.((WearsPositiveDiscourse(x)) -> Encourages(x))"]}
{"id": "enwn_validation_526", "nl": "Walter mocked the rally participants because he disagreed with their political ideology.", "fol": "", "prediction": ["all x y.((RallyParticipant(x) & Walter(y)) -> (Mocked(y,x) & DisagreesWithPoliticalIdeology(y,x)))"]}
{"id": "enwn_validation_527", "nl": "You shouldn't intentionally aggravate people.", "fol": "", "prediction": ["all x.((IntentionallyAggravate(x) & Person(x)) -> -IntentionallyAggravate(x))"]}
{"id": "enwn_validation_528", "nl": "You shouldn't mock people.", "fol": "", "prediction": ["all x.(MockPeople(x) -> -MockPeople(x))"]}
{"id": "enwn_validation_529", "nl": "Walter should not have mocked the rally participants.", "fol": "", "prediction": ["Walter ne should have mocked rally participants."]}
{"id": "enwn_validation_530", "nl": "You should not harm others.", "fol": "", "prediction": ["all x.((You(x) & -HarmOthers(x)) -> -HarmOthers(x))"]}
{"id": "enwn_validation_531", "nl": "Being considerate means you are careful to avoid hurting others.", "fol": "", "prediction": ["all x.((Creditful(x) & AvoidsHasingOthers(x)) -> Careful(x))"]}
{"id": "enwn_validation_532", "nl": "If you do something that is inconvenient for others then you are being inconsiderate.", "fol": "", "prediction": ["all x.((DoesInconvenientForOthers(x) & Inconsiderate(x)) -> Inconsiderate(x))"]}
{"id": "enwn_validation_533", "nl": "Justin quit his job after giving notice one day in advance.", "fol": "", "prediction": ["Justin quitsJuliets(Juliet) -> (DayInAdvance(Juliet) & DayInAdvance(Juliet)))"]}
{"id": "enwn_validation_534", "nl": "Giving less than two weeks' notice before leaving your job is not enough warning.", "fol": "", "prediction": ["all x.((WeeklyNotification(x) & LessThanTwo(x)) -> -EnoughWarning(x))"]}
{"id": "enwn_validation_535", "nl": "Someone leaving their job without sufficient warning is inconvenient for their coworkers.", "fol": "", "prediction": ["all x.((LeavingJob(x) & -SufficientWarning(x)) -> InconvenientForCoworkers(x))"]}
{"id": "enwn_validation_536", "nl": "You should be considerate.", "fol": "", "prediction": ["all x.((Client(x) & Careful(x)) -> ShouldBe(x))"]}
{"id": "enwn_validation_537", "nl": "You should not inconvenience others.", "fol": "", "prediction": ["all x.((Inconvenient(x) & -Inconvenient(x)) -> -Inconvenient(x))"]}
{"id": "enwn_validation_538", "nl": "Justin did not give enough warning before quitting.", "fol": "", "prediction": ["(-EnoughWarning(Julian))"]}
{"id": "enwn_validation_539", "nl": "Justin quitting was inconvenient for his coworkers.", "fol": "", "prediction": ["all x.((Judy(x) & Coworkers(x)) -> InconvenientQuitting(x))"]}
{"id": "enwn_validation_540", "nl": "Justin should not have inconvenienced his coworkers.", "fol": "", "prediction": ["all x.((Juliet(x) & Coworkers(x)) -> -Inconvenient(x))"]}
{"id": "enwn_validation_541", "nl": "If you're unreasonably angry at something taking too long, you're impatient.", "fol": "", "prediction": ["all x.((UnreasonablyAngry(x) & TooLong(x)) -> Impatient(x))"]}
{"id": "enwn_validation_542", "nl": "Gabriel was angry at the server for taking too long even though the restaurant was understaffed.", "fol": "", "prediction": ["all x y.((Server(x) & Restaurant(y) & Understaffed(y)) -> Angerful(x,y))"]}
{"id": "enwn_validation_543", "nl": "When someone has to do a lot, it's reasonable for it to take a long time.", "fol": "", "prediction": ["all x.((Person(x) & HasToDoLot(x)) -> ReasonableToTakeLongTime(x))"]}
{"id": "enwn_validation_544", "nl": "When a restaurant is understaffed, the servers have a lot to do.", "fol": "", "prediction": ["all x.((Restaurant(x) & Understaffed(x)) -> ServersHaveLotToDo(x))"]}
{"id": "enwn_validation_545", "nl": "When a restaurant is understaffed, it's reasonable for the servers to take a long time.", "fol": "", "prediction": ["all x.((Restaurant(x) & Understaffed(x)) -> ReasonableServerTime(x))"]}
{"id": "enwn_validation_546", "nl": "Gabriel was unreasonably angry that the server took too long.", "fol": "", "prediction": ["all x.((Server(x) & TakesTooLong(x)) -> UnreasonablyAngry(x))"]}
{"id": "enwn_validation_547", "nl": "Gabriel was impatient with the server.", "fol": "", "prediction": ["Gabriel apologises to server."]}
{"id": "enwn_validation_548", "nl": "Gabriel should have been patient with the server.", "fol": "", "prediction": ["all x.((Gabriel(x) & Server(y)) -> Patient(x,y))"]}
{"id": "enwn_validation_549", "nl": "Luke let his partners handle the group project.", "fol": "", "prediction": ["Luke let his partners handle the groupproject."]}
{"id": "enwn_validation_550", "nl": "If you let other people handle something then you are not helping on that thing.", "fol": "", "prediction": ["all x.(LetsOthersHandle(x) -> -HelpingOnThing(x))"]}
{"id": "enwn_validation_551", "nl": "A group project requires multiple people to do work.", "fol": "", "prediction": ["all x.(GroupProject(x) -> RequiresMultiplePersons(x))"]}
{"id": "enwn_validation_552", "nl": "If multiple people are required to do something then it is expected that all those people should help.", "fol": "", "prediction": ["all x.((RequiredToDo(x) & MultiplePeople(x)) -> ExpectedHelp(x))"]}
{"id": "enwn_validation_553", "nl": "You should be trustworthy.", "fol": "", "prediction": ["all x.(Trustworthy(x) -> Trustworthy(x))"]}
{"id": "enwn_validation_554", "nl": "To be trustworthy means you do what is expected of you.", "fol": "", "prediction": ["all x.(TrueLiability(x) -> DoWhatEquippedOfYou(x))"]}
{"id": "enwn_validation_555", "nl": "Luke did not help his partners on the group project.", "fol": "", "prediction": ["Luke -helpedPartnersOnGroupProject(Luke,x))"]}
{"id": "enwn_validation_556", "nl": "It is expected that everyone on a group project will help.", "fol": "", "prediction": ["all x.(GroupProject(x) -> ExpectedHelp(x))"]}
{"id": "enwn_validation_557", "nl": "Luke did not help his partners when it was expected.", "fol": "", "prediction": ["Luke -HelpedPartnersWhenEquipped(Luke,Staff))"]}
{"id": "enwn_validation_558", "nl": "If something is expected of you then you should do that thing.", "fol": "", "prediction": ["all x.((EssentialThing(x) & ExpectedOf(x)) -> ShouldDo(x))"]}
{"id": "enwn_validation_559", "nl": "Luke should have helped his partners.", "fol": "", "prediction": ["Luke should have helped his partners."]}
{"id": "enwn_validation_560", "nl": "You should only conceive with someone with their consent.", "fol": "", "prediction": ["all x y.((Conceive(x) & Person(y) & Consent(y)) -> OnlyConceive(x,y))"]}
{"id": "enwn_validation_561", "nl": "Someone can't consent to something if they're being lied to about it.", "fol": "", "prediction": ["all x.((Person(x) & LiesToAboutConsent(x)) -> -CanConsent(x))"]}
{"id": "enwn_validation_562", "nl": "Abby told Mark that she was on birth control so that she could get pregnant with him.", "fol": "", "prediction": ["Abby told Mark that she was on BirthControl so that she could get pregnant with Mark."]}
{"id": "enwn_validation_563", "nl": "Abby was not on birth control.", "fol": "", "prediction": ["Abby was not on birthcontrol."]}
{"id": "enwn_validation_564", "nl": "You shouldn't lie to someone in order to conceive with them.", "fol": "", "prediction": ["all x y.((Limit(x) & Person(y)) -> -Conceive(x,y))"]}
{"id": "enwn_validation_565", "nl": "Abby lied to Mark in order to get pregnant with him.", "fol": "", "prediction": ["Abby liedToMark(a) & GetsPaternal(a))"]}
{"id": "enwn_validation_566", "nl": "Abby should not have lied to Mark.", "fol": "", "prediction": ["Abby should not have lied to Mark."]}
{"id": "enwn_validation_567", "nl": "A boss is an authority figure.", "fol": "", "prediction": ["all x.(Boss(x) -> AuthorityFigure(x))"]}
{"id": "enwn_validation_568", "nl": "Tom spat in his boss's coffee in front of everyone.", "fol": "", "prediction": ["all x y.((Tom(x) & Boss(y)) -> SpatsInCoffee(x,y))"]}
{"id": "enwn_validation_569", "nl": "Spitting in someone's beverage is rude.", "fol": "", "prediction": ["all x.((SpittingInBeverage(x) & Person(x)) -> Rust(x))"]}
{"id": "enwn_validation_570", "nl": "Being insubordinate means disrespecting authority.", "fol": "", "prediction": ["all x.(Insubordinate(x) -> DisrespectsAuthority(x))"]}
{"id": "enwn_validation_571", "nl": "Tom was rude to his boss.", "fol": "", "prediction": ["Tom was rudeToBoss(Tom)"]}
{"id": "enwn_validation_572", "nl": "Tom was being disrespectful towards an authority figure.", "fol": "", "prediction": ["all x.((Tom(x) & AuthorityFigure(x)) -> DisrespectfulToward(x))"]}
{"id": "enwn_validation_573", "nl": "Tom was being insubordinate.", "fol": "", "prediction": ["all x.((Tom(x) & Insubordinate(x)) -> Insubordinate(x))"]}
{"id": "enwn_validation_574", "nl": "Karen stole a customer's social security number for her own gain.", "fol": "", "prediction": ["all x y.((Karen(x) & Customer(y)) -> StolenSocialSecurityNumber(x,y))"]}
{"id": "enwn_validation_575", "nl": "Stealing a person's social security number is also called stealing their identity.", "fol": "", "prediction": ["all x.(StealingSecurityNumber(x) -> StealingIdentity(x))"]}
{"id": "enwn_validation_576", "nl": "You shouldn't cause problems for others.", "fol": "", "prediction": ["all x.((CausesProblems(x) & -CausesProblems(x)) -> -CausesProblems(x))"]}
{"id": "enwn_validation_577", "nl": "Stealing someone's identity allows the thief to take control of the victim's bank account.", "fol": "", "prediction": ["all x y.((Typhoon(x) & Identity(y)) -> Steal(x,y))"]}
{"id": "enwn_validation_578", "nl": "Losing control of your bank account leads to financial problems.", "fol": "", "prediction": ["all x.((BankAccountControlLoss(x) & FinancialProblems(x)) -> LosesControl(x))"]}
{"id": "enwn_validation_579", "nl": "Karen stole the customer's identity.", "fol": "", "prediction": ["Karen stolesCustomerIdentity(Karen)"]}
{"id": "enwn_validation_580", "nl": "Stealing someone's identity can cause them financial problems.", "fol": "", "prediction": ["all x y.((StolenIdentity(x) & Person(y)) -> CausesFinancialProblems(x,y))"]}
{"id": "enwn_validation_581", "nl": "You shouldn't steal someone's identity.", "fol": "", "prediction": ["all x.((StoleIdentity(x) & Person(x)) -> -StoleIdentity(x))"]}
{"id": "enwn_validation_582", "nl": "Karen should not have stolen the customer's identity.", "fol": "", "prediction": ["all x.((Karen(x) & Customer(y)) -> -StolenIdentity(x,y))"]}
{"id": "enwn_validation_583", "nl": "Jenna's friend didn't give her permission to take any of her stuff.", "fol": "", "prediction": ["all x.((Friend(x) & Jenna(x)) -> -GivenPermissionToTakeAnyOfStuff(x,y))"]}
{"id": "enwn_validation_584", "nl": "Jenna took a Clif bar from the pantry.", "fol": "", "prediction": ["Jenna took a ClifBar from the Pantry."]}
{"id": "enwn_validation_585", "nl": "Jenna's friend bought the Clif bars in the pantry.", "fol": "", "prediction": ["Jenna's friend bought the ClifBarsInPantry(Jenna,Friend,Pantry)"]}
{"id": "enwn_validation_586", "nl": "Once you buy something, it belongs to you.", "fol": "", "prediction": ["all x.(Buys(x) -> BelongsTo(x,y))"]}
{"id": "enwn_validation_587", "nl": "You shouldn't take someone else's belongings without their permission.", "fol": "", "prediction": ["all x y.((Person(x) & Belonging(y)) -> -TakesWithoutPermission(x,y))"]}
{"id": "enwn_validation_588", "nl": "The Clif bars in the pantry belonged to Jenna's friend.", "fol": "", "prediction": ["all x y.((ClifBar(x) & Pantry(y)) -> BelongedToFriend(x,y))"]}
{"id": "enwn_validation_589", "nl": "Jenna took one of her friend's Clif bars.", "fol": "", "prediction": ["all x y.((Jenna(x) & ClifBar(y)) -> TakenBy(x,y))"]}
{"id": "enwn_validation_590", "nl": "Jenna took one of her friend's Clif bars without her permission.", "fol": "", "prediction": ["all x y.((Jenna(x) & ClifBar(y)) -> TakenWithoutPermission(x,y))"]}
{"id": "enwn_validation_591", "nl": "Jenna shouldn't have taken the Clif bar.", "fol": "", "prediction": ["Jenna shouldn't have taken ClifBar."]}
{"id": "enwn_validation_592", "nl": "Rich deducted points from two students because they submitted the same project.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y) & SubmittedSameProject(x,y)) -> DeductedPoints(x,y))"]}
{"id": "enwn_validation_593", "nl": "The project worksheet said that everyone was supposed to do the project on their own.", "fol": "", "prediction": ["all x.(ProjectWorksheet(x) -> ShouldDoProjectOnOwn(x))"]}
{"id": "enwn_validation_594", "nl": "People working independently on a creative task will produce different results.", "fol": "", "prediction": ["all x y.((WorkingIndependently(x) & CreativeTask(y)) -> DifferentResults(x,y))"]}
{"id": "enwn_validation_595", "nl": "A school project is a creative task.", "fol": "", "prediction": ["all x.(SchoolProject(x) -> CreativeTask(x))"]}
{"id": "enwn_validation_596", "nl": "Deducting points from a student for violating rules is a valid response.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y) & ViolatesRules(x,y)) -> ValidResponse(x))"]}
{"id": "enwn_validation_597", "nl": "People working independently on a school project will produce different results.", "fol": "", "prediction": ["all x y.((WorkingIndependently(x) & SchoolProject(y)) -> DifferentResults(x,y))"]}
{"id": "enwn_validation_598", "nl": "The two students must have worked together if they produced the same project.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y) & ProducedSameProject(x,y)) -> WorkedTogether(x,y))"]}
{"id": "enwn_validation_599", "nl": "The two students broke the rules by submitting the same project.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y)) -> BreaksRules(x,y))"]}
{"id": "enwn_validation_600", "nl": "Rich deducted points from the students for breaking the rules.", "fol": "", "prediction": ["all x y.((Rich(x) & Student(y)) -> DeductedPointsForBreakingRules(x,y))"]}
{"id": "enwn_validation_601", "nl": "Rich was right to deduct points from the students.", "fol": "", "prediction": ["all x.(Rich(x) -> DeductsPoints(x))"]}
{"id": "enwn_validation_602", "nl": "It's okay to sell lost items if you can't find their owner.", "fol": "", "prediction": ["all x.((LostItem(x) & -FindOwner(x)) -> OKToSell(x))"]}
{"id": "enwn_validation_603", "nl": "Jamie didn't try to find the camera's owner.", "fol": "", "prediction": ["(-tryedToFindOwner(Jamie))"]}
{"id": "enwn_validation_604", "nl": "Jamie sold the camera on Ebay.", "fol": "", "prediction": ["Jamie sold the camera on Ebay."]}
{"id": "enwn_validation_605", "nl": "Losing something means leaving it somewhere accidentally.", "fol": "", "prediction": ["all x.(Losing(x) -> LeavesAwayInaccidentally(x))"]}
{"id": "enwn_validation_606", "nl": "People don't leave valuables in public on purpose.", "fol": "", "prediction": ["all x.((Person(x) & -LaysValuablesInPublic(x)) -> -LaysValuablesInPublic(x))"]}
{"id": "enwn_validation_607", "nl": "Jamie found a camera sitting on a park bench.", "fol": "", "prediction": ["all x y.((Jamie(x) & Camera(y)) -> FoundOnParkBenches(x,y))"]}
{"id": "enwn_validation_608", "nl": "Cameras don't put themselves on benches.", "fol": "", "prediction": ["all x.(Camera(x) -> -PutsOnBenches(x))"]}
{"id": "enwn_validation_609", "nl": "If someone left a valuable item in public, they lost it.", "fol": "", "prediction": ["all x.((LeavedValuableItem(x) & InPublic(x)) -> LostItem(x))"]}
{"id": "enwn_validation_610", "nl": "Someone left the camera on the park bench.", "fol": "", "prediction": ["exists x.(Camera(x) & LeftOnParkBenches(x))"]}
{"id": "enwn_validation_611", "nl": "Someone lost the camera.", "fol": "", "prediction": ["exists x.(Camera(x) & Lost(x))"]}
{"id": "enwn_validation_612", "nl": "Jamie sold a lost camera.", "fol": "", "prediction": ["all x.((Jamie(x) & LostCamera(x)) -> Sold(x,y))"]}
{"id": "enwn_validation_613", "nl": "Jamie sold a lost camera without trying to find its owner first.", "fol": "", "prediction": ["all x y.((Jamie(x) & Camera(y) & Lost(y)) -> SoldWithoutFindingOwner(x,y))"]}
{"id": "enwn_validation_614", "nl": "Jamie should have tried to find the camera's owner before selling it.", "fol": "", "prediction": ["all x y.((Camera(x) & Jamie(y)) -> ShouldTryToFindOwner(y,x))"]}
{"id": "enwn_validation_615", "nl": "Removing bad players from a competitive sports team because they are unskilled is okay.", "fol": "", "prediction": ["all x.((BadPlayers(x) & Unskilled(x)) -> OK(x))"]}
{"id": "enwn_validation_616", "nl": "A player performing poorly in a single game is not conclusive evidence that they are unskilled.", "fol": "", "prediction": ["all x.((Player(x) & PerformsPoorlyInSingleGame(x)) -> -ConclusiveEvidence(x))"]}
{"id": "enwn_validation_617", "nl": "The other players on Cindy's soccer team voted to kick her off the team because she let three goals through in a playoff game.", "fol": "", "prediction": ["all x y.((Player(x) & Player(y) & Cindy's SoccerTeam(x) & LetsThreeGoals(y,x)) -> KicksOff(x,y))"]}
{"id": "enwn_validation_618", "nl": "A goalie's performance is reflected by the number of goals they let through.", "fol": "", "prediction": ["all x.((Goalie(x) & NumberOfGoals(x)) -> ReflectsPerformance(x))"]}
{"id": "enwn_validation_619", "nl": "Cindy is a goalie.", "fol": "", "prediction": ["all x.(Cindy(x) -> Goalie(x))"]}
{"id": "enwn_validation_620", "nl": "A player's performance in one game isn't enough of a reason to remove them from a team.", "fol": "", "prediction": ["all x y.((Player(x) & Game(y) & PerformanceIn(x,y)) -> -EnoughToRemove(x,y))"]}
{"id": "enwn_validation_621", "nl": "The number of goals Cindy let through is a reflection of her performance.", "fol": "", "prediction": ["all x.((Goals(x) & CindyLetsThrough(x)) -> ReflectsPerformance(x))"]}
{"id": "enwn_validation_622", "nl": "The other players kicked Cindy off of the team based on her performance in a single game.", "fol": "", "prediction": ["all x y.((Player(x) & Player(y)) -> KickedCindyOffTeam(x,y))"]}
{"id": "enwn_validation_623", "nl": "The other players shouldn't have kicked Cindy off the team.", "fol": "", "prediction": ["all x.((Player(x) & -KickedCindy(x)) -> -KickedCindy(x))"]}
{"id": "enwn_validation_624", "nl": "You should not discriminate against people on the basis of sexuality.", "fol": "", "prediction": ["all x.((Person(x) & -DiscriminateOnSexuality(x)) -> -DiscriminateOnSexuality(x))"]}
{"id": "enwn_validation_625", "nl": "Doing detrimental things to someone because of their identity is discrimination.", "fol": "", "prediction": ["all x.((DoingDefeivantThings(x) & Person(x) & Identity(x)) -> Discrimination(x))"]}
{"id": "enwn_validation_626", "nl": "Removing someone from your will is detrimental to them.", "fol": "", "prediction": ["all x.(RemovesPerson(x) -> DetrimentalTo(x,Person))"]}
{"id": "enwn_validation_627", "nl": "Martin's father removed Martin from his will because Martin came out as gay.", "fol": "", "prediction": ["all x y.((Martin(x) & Father(y)) -> RemovedFromWill(x,y))"]}
{"id": "enwn_validation_628", "nl": "You should not do something detrimental to someone because of their sexuality.", "fol": "", "prediction": ["all x y.((Person(x) & Sexuality(y)) -> -Disadvantageful(x,y))"]}
{"id": "enwn_validation_629", "nl": "You should not remove someone from your will because of their sexuality.", "fol": "", "prediction": ["all x.((Person(x) & -RemovesFromWill(x)) -> Sexuality(x))"]}
{"id": "enwn_validation_630", "nl": "Martin's father should not have removed Martin from his will.", "fol": "", "prediction": ["Martin's father should not have removed Martin from his will."]}
{"id": "enwn_validation_631", "nl": "Elaine slapped her brother because he ate the last two pudding cups.", "fol": "", "prediction": ["Elaine slapped her brother because he ate the last two pudding cups."]}
{"id": "enwn_validation_632", "nl": "Elaine felt she deserved one of the last two pudding cups.", "fol": "", "prediction": ["Elaine felt she deserved one of the last two pudding cups."]}
{"id": "enwn_validation_633", "nl": "It's petty to retaliate when someone wrongs you in a minor way.", "fol": "", "prediction": ["all x.((Petty(x) & PersonWorstInMinorManner(x)) -> Retaliate(x))"]}
{"id": "enwn_validation_634", "nl": "Taking someone's snacks is wrong, but it doesn't harm them significantly.", "fol": "", "prediction": ["all x y.((Snack(x) & Person(y)) -> (Wrong(x,y) & -Hazards(x,y)))"]}
{"id": "enwn_validation_635", "nl": "You shouldn't hurt people for petty reasons.", "fol": "", "prediction": ["all x.((Petty(x) & -HasPetty(x)) -> -HasPetty(x))"]}
{"id": "enwn_validation_636", "nl": "Elaine slapped her brother in retaliation for taking her snacks.", "fol": "", "prediction": ["Elaine slapped her brother in retaliation for taking her snacks."]}
{"id": "enwn_validation_637", "nl": "It's petty to retaliate against someone for taking your snacks.", "fol": "", "prediction": ["all x.((Retaliate(x) & TakeSnacks(x)) -> Petty(x))"]}
{"id": "enwn_validation_638", "nl": "Elaine slapped her brother for a petty reason.", "fol": "", "prediction": ["all x y.((Elaine(x) & Brother(y)) -> SlappedForPettyRun(x,y))"]}
{"id": "enwn_validation_639", "nl": "Elaine should not have slapped her brother.", "fol": "", "prediction": ["Elaine should not have slappedBrother(Elaine)"]}
{"id": "enwn_validation_640", "nl": "You shouldn't insult people for no good reason.", "fol": "", "prediction": ["all x.((Involves(x,y) & -GoodRight(y)) -> -Inflicts(x,y))"]}
{"id": "enwn_validation_641", "nl": "Someone's appearance is not a good reason to insult them.", "fol": "", "prediction": ["all x.((Person(x) & Appearance(x)) -> -GoodRightToInflict(x))"]}
{"id": "enwn_validation_642", "nl": "Calling something dirty is an insult.", "fol": "", "prediction": ["all x.((Dirty(x) & Calls(x,y)) -> Insult(x))"]}
{"id": "enwn_validation_643", "nl": "Dishrags are stereotypically dirty.", "fol": "", "prediction": ["all x.(Dishrag(x) -> StereotypicallyDirty(x))"]}
{"id": "enwn_validation_644", "nl": "Comparing things implies that they share properties.", "fol": "", "prediction": ["all x.(ComparingThings(x) -> ShareProperties(x))"]}
{"id": "enwn_validation_645", "nl": "Derek told Cammy that her hair looked like a dishrag.", "fol": "", "prediction": ["all x y.((Deboree(x) & Cammy(y)) -> LooksAlikeDishrag(y,x))"]}
{"id": "enwn_validation_646", "nl": "Someone's hair is part of their appearance.", "fol": "", "prediction": ["all x.(Hair(x) -> PartOfAppearance(x))"]}
{"id": "enwn_validation_647", "nl": "Comparing something to a dishrag implies that it's dirty.", "fol": "", "prediction": ["all x y.((Dishrag(x) & Dishrag(y)) -> Dirty(x,y))"]}
{"id": "enwn_validation_648", "nl": "Derek's comment was implying that Cammy's hair looked dirty.", "fol": "", "prediction": ["all x.((Comment(x) & CammysHair(x)) -> Dirty(x))"]}
{"id": "enwn_validation_649", "nl": "Derek's comment was an insult.", "fol": "", "prediction": ["all x.((Comment(x) & Derek(x)) -> Inflicted(x))"]}
{"id": "enwn_validation_650", "nl": "Derek's comment was about Cammy's appearance.", "fol": "", "prediction": ["Derek's comment was about Cammy's appearance."]}
{"id": "enwn_validation_651", "nl": "Derek insulted Cammy's appearance.", "fol": "", "prediction": ["Derek insulted Cammy's appearance."]}
{"id": "enwn_validation_652", "nl": "Derek insulted Cammy for no good reason.", "fol": "", "prediction": ["all x y.((Derek(x) & Cammy(y)) -> InfuriatedForNoGoodRaison(x,y))"]}
{"id": "enwn_validation_653", "nl": "Derek should not have insulted Cammy.", "fol": "", "prediction": ["all x.((Derek(x) & Cammy(x)) -> -Inflicted(x,Cammy))"]}
{"id": "enwn_validation_654", "nl": "You should be polite.", "fol": "", "prediction": ["all x.(Polite(x) -> -Polite(x))"]}
{"id": "enwn_validation_655", "nl": "Melanie closed the doors immediately when she saw someone approaching the elevator she was in.", "fol": "", "prediction": ["all x y.((Melanie(x) & Person(y) & ApproachedElevator(x,y)) -> ClosedDoorsImmediately(x))"]}
{"id": "enwn_validation_656", "nl": "It's polite to hold the door for people.", "fol": "", "prediction": ["all x.((Door(x) & HoldsForPeople(x)) -> Polite(x))"]}
{"id": "enwn_validation_657", "nl": "It was impolite for Melanie to close the elevator doors.", "fol": "", "prediction": ["all x.((Melanie(x) & CloseElevatorDoors(x)) -> Impolite(x))"]}
{"id": "enwn_validation_658", "nl": "Melanie shouldn't have closed the elevator doors.", "fol": "", "prediction": ["all x.((Melanie(x) & Elevator(y)) -> -Closed(x,y))"]}
{"id": "enwn_validation_659", "nl": "You should avoid doing unethical things.", "fol": "", "prediction": ["all x.((DoesUnethicalThings(x)) -> Avoids(x))"]}
{"id": "enwn_validation_660", "nl": "Bribing someone to do something wrong is unethical.", "fol": "", "prediction": ["all x.((Birding(x) & Person(x) & DoingWrong(x)) -> Unethical(x))"]}
{"id": "enwn_validation_661", "nl": "It's wrong to keep quiet about misconduct.", "fol": "", "prediction": ["all x.((KeepsQuiet(x) & Disgraceful(x)) -> Irresponsible(x))"]}
{"id": "enwn_validation_662", "nl": "Offering someone something valuable in exchange for their cooperation is bribery.", "fol": "", "prediction": ["all x.((Offering(x) & ValuableInExchangeForCooperation(x)) -> Bribery(x))"]}
{"id": "enwn_validation_663", "nl": "Jarad's project manager Mike offered him tickets to a sold-out concert in exchange for not discussing Mike's behavior in the office during an HR inquiry.", "fol": "", "prediction": ["all x y.((Jarad(x) & ProjectManager(y) & Mike(y)) -> (OfferedTickets(x,y) & SoldOutConcert(y) & -DiscussedBehavior(y)))"]}
{"id": "enwn_validation_664", "nl": "Bribing someone to keep quiet about misconduct is unethical.", "fol": "", "prediction": ["all x.((Brings(x) & KeepsQuiet(x)) -> Unethical(x))"]}
{"id": "enwn_validation_665", "nl": "Mike was attempting to bribe Jarad to keep quiet about his misconduct by offering him the tickets.", "fol": "", "prediction": ["all x y.((Mike(x) & Jarad(y)) -> (AttemptsToBibe(x,y) & OffersTickets(x,y)))"]}
{"id": "enwn_validation_666", "nl": "It was unethical for Mike to offer Jarad the tickets.", "fol": "", "prediction": ["Es ist unethical for Mike to offer Jarad the tickets."]}
{"id": "enwn_validation_667", "nl": "Mike should not have offered Jarad the tickets.", "fol": "", "prediction": ["all x.((Mike(x) & Jarad(y)) -> -OfferedTickets(x,y))"]}
{"id": "enwn_validation_668", "nl": "If someone asks you for a small favor, it's polite to accept.", "fol": "", "prediction": ["all x.((AsksForSmallFavour(x) & PoliteToAccept(x)) -> SmallFavor(x))"]}
{"id": "enwn_validation_669", "nl": "Letting someone use the shower before you is a small favor.", "fol": "", "prediction": ["all x.(LetsPersonUseBaby(x) -> SmallFavor(x))"]}
{"id": "enwn_validation_670", "nl": "Elle's sister asked her if she could use the shower first.", "fol": "", "prediction": ["Elle's sister asked if she could usetheshowerFirst."]}
{"id": "enwn_validation_671", "nl": "Elle ignored her sister's request and showered for 30 minutes.", "fol": "", "prediction": ["Elle ignored sister's request and showered for 30 minutes."]}
{"id": "enwn_validation_672", "nl": "Elle's sister was requesting a small favor.", "fol": "", "prediction": ["Elle's sister requestedsSmallFavor(elle,sister,s))"]}
{"id": "enwn_validation_673", "nl": "Elle ignored her sister's request for a small favor.", "fol": "", "prediction": ["Elle ignored sister's request for smallFavor(elle)"]}
{"id": "enwn_validation_674", "nl": "It was impolite for Elle to ignore her sister's request.", "fol": "", "prediction": ["Elle a resentment for ignoring sister's request."]}
{"id": "enwn_validation_675", "nl": "Elle should not have ignored her sister's request.", "fol": "", "prediction": ["Elle ne sabotagedSisterRequest(n) & -IgnoredRequest(n))"]}
{"id": "enwn_validation_676", "nl": "It's okay to do things that are generally frowned upon if they have positive outcomes.", "fol": "", "prediction": ["all x.((Doing(x) & GenerallyFownedOn(x) & PositiveOutcomes(x)) -> Okay(x))"]}
{"id": "enwn_validation_677", "nl": "Lying is generally wrong.", "fol": "", "prediction": ["all x.(Liking(x) -> Worst(x))"]}
{"id": "enwn_validation_678", "nl": "Xirong lied to his boss to protect his coworker from being fired for organizing a walk-out.", "fol": "", "prediction": ["all x y.((Xirong(x) & Boss(y)) -> LiesToProtectCoworkerFromFilm(x,y))"]}
{"id": "enwn_validation_679", "nl": "Firing someone for organizing a walk-out is a form of retaliation.", "fol": "", "prediction": ["all x.((Firing(x) & OrganizingWalkOut(x)) -> Retaliation(x))"]}
{"id": "enwn_validation_680", "nl": "Preventing someone from doing something wrong is a good thing.", "fol": "", "prediction": ["all x.((Prevents(x) & Person(x)) -> GoodThing(x))"]}
{"id": "enwn_validation_681", "nl": "Retaliating against worker organization is wrong.", "fol": "", "prediction": ["all x.(RetaliatingAgainstWorkerOrganization(x) -> Wrong(x))"]}
{"id": "enwn_validation_682", "nl": "It's okay to lie if it does more good than harm.", "fol": "", "prediction": ["all x.((Limit(x) & MoreGoodThanHarm(x)) -> Okay(x))"]}
{"id": "enwn_validation_683", "nl": "Xirong lied to his boss to prevent him from retaliating against worker organization.", "fol": "", "prediction": ["all x.((Xirong(x) & Boss(x)) -> LiesToPreventRetaliation(x))"]}
{"id": "enwn_validation_684", "nl": "Preventing someone from retaliating against worker organization is a good thing.", "fol": "", "prediction": ["all x.((PreventsRetaliation(x) & WorkerOrganization(x)) -> GoodThing(x))"]}
{"id": "enwn_validation_685", "nl": "The consequence of Xirong's lie was a good thing.", "fol": "", "prediction": ["all x.((Lird(x) & Xirong(x)) -> GoodThing(x))"]}
{"id": "enwn_validation_686", "nl": "It was okay for Xirong to lie to his boss.", "fol": "", "prediction": ["all x.((Xirong(x) & Boss(x)) -> OkayToLieTo(x,x))"]}
{"id": "enwn_validation_687", "nl": "Dita cut the brakes on Martin's car after he cheated on her.", "fol": "", "prediction": ["all x y.((Dita(x) & Martin(y) & CheatedOn(y,x)) -> CutsBrakesOn(x,y))"]}
{"id": "enwn_validation_688", "nl": "Someone cheating on you is not a good enough reason to put them in mortal danger.", "fol": "", "prediction": ["all x.((CheatingOn(x) & -GoodEnoughRightToMortalDangerous(x)) -> -CheatingOn(x))"]}
{"id": "enwn_validation_689", "nl": "Cutting the brakes on someone's car puts them in mortal danger.", "fol": "", "prediction": ["all x y.((CuttingBrakes(x) & Car(y)) -> PutsInMortalDangerous(x,y))"]}
{"id": "enwn_validation_690", "nl": "Someone cheating on you is not a good enough reason to cut the brakes on their car.", "fol": "", "prediction": ["all x.((CheatingOnYou(x) & -GoodEnoughRightToCutBrakes(x)) -> -CheatingOnCar(x))"]}
{"id": "enwn_validation_691", "nl": "Dita should not have cut the brakes on Martin's car.", "fol": "", "prediction": ["Dita should not have cut brakes on Martin's car."]}
{"id": "enwn_validation_692", "nl": "It's okay to break rules that aren't important.", "fol": "", "prediction": ["all x.((Rules(x) & -Important(x)) -> OKToBreak(x))"]}
{"id": "enwn_validation_693", "nl": "Movie theater rules say that no outside food is allowed.", "fol": "", "prediction": ["all x.(MovieTheaterRule(x) -> -OutsideFood(x))"]}
{"id": "enwn_validation_694", "nl": "Rules about not bringing outside food into establishments exist to increase on-site concession sales.", "fol": "", "prediction": ["all x.((Rule(x) & -BringsOutsideFood(x)) -> IncreasesOnSiteConcessionSales(x))"]}
{"id": "enwn_validation_695", "nl": "Increasing on-site concession sales isn't important.", "fol": "", "prediction": ["all x.((ConcessionSales(x) & IncreasedOnSite(x)) -> -Important(x))"]}
{"id": "enwn_validation_696", "nl": "Sam broke the theater rules by bringing chips into the movie.", "fol": "", "prediction": ["all x y.((Sam(x) & Movie(y)) -> BreaksTheaterRules(x,y))"]}
{"id": "enwn_validation_697", "nl": "Rules about not bringing food into establishments aren't important.", "fol": "", "prediction": ["all x.((Rule(x) & -BringingFoodIntoEstablishments(x)) -> -Important(x))"]}
{"id": "enwn_validation_698", "nl": "The movie theater rule that says no outside food is allowed is not important.", "fol": "", "prediction": ["all x.((MovieTheaterRight(x) & -OutsideFood(x)) -> -Important(x))"]}
{"id": "enwn_validation_699", "nl": "It's okay to break the movie theater rule that says no outside food is allowed.", "fol": "", "prediction": ["all x.((MovieTheaterRule(x) & -OutsideFood(x)) -> Okay(x))"]}
{"id": "enwn_validation_700", "nl": "It was okay for Sam to take the chips into the theater.", "fol": "", "prediction": ["all x.((Sam(x) & TakesChipsIntoTheater(x)) -> OK(x))"]}
{"id": "enwn_validation_701", "nl": "A physical response to a remark is escalation.", "fol": "", "prediction": ["all x.((Remark(x) & PhysicalResponse(x)) -> Escalation(x))"]}
{"id": "enwn_validation_702", "nl": "Luis dumped his soda on the guy sitting in front of him because the guy made a snide remark about Ravens fans.", "fol": "", "prediction": ["all x y.((Luis(x) & Guy(y) & SittingInFrontOf(y,x)) -> DumpedSoda(x,y))"]}
{"id": "enwn_validation_703", "nl": "You shouldn't escalate conflicts.", "fol": "", "prediction": ["all x.((Conflict(x) & -Inescalating(x)) -> -(Inescalating(x) -> -Inescalating(x)))"]}
{"id": "enwn_validation_704", "nl": "Luis escalated the situation by dumping his soda on the guy.", "fol": "", "prediction": ["Luis escalated the situation by DumpingSodaOnGuy(Luis)"]}
{"id": "enwn_validation_705", "nl": "Luis shouldn't have dumped his soda on the guy.", "fol": "", "prediction": ["all x y.((Luis(x) & Guy(y)) -> -DumpedSodaOn(x,y))"]}
{"id": "enwn_validation_706", "nl": "Esme copied a section of the Wikipedia article on Thomas Jefferson to put in her school report.", "fol": "", "prediction": ["all x y.((Esme(x) & WikipediaArticle(y) & ThomasJefferson(y)) -> Copy(x,y))"]}
{"id": "enwn_validation_707", "nl": "If you copy something without attribution, you're representing it as your own work.", "fol": "", "prediction": ["all x.((Copy(x) & -Attribution(x)) -> RepresentsOwnWork(x))"]}
{"id": "enwn_validation_708", "nl": "Esme didn't attribute the copied section.", "fol": "", "prediction": ["Esme -AttributesCopySection(esme,e))"]}
{"id": "enwn_validation_709", "nl": "Copying someone else's writing and representing it as your own work is plagiarism.", "fol": "", "prediction": ["all x y.((Copy(x,y) & Writing(y) & Replacing(x,y)) -> Plagiarism(x))"]}
{"id": "enwn_validation_710", "nl": "Plagiarism is wrong.", "fol": "", "prediction": ["all x.(Plagiarism(x) -> Wrong(x))"]}
{"id": "enwn_validation_711", "nl": "Esme represented the copied section as her own work.", "fol": "", "prediction": ["all x.(Esme(x) -> ReputedCopySection(x))"]}
{"id": "enwn_validation_712", "nl": "Esme copied someone else's writing from Wikipedia and represented it as her own work.", "fol": "", "prediction": ["all x y.((Esme(x) & Writing(y)) -> (CopiesFromWikipedia(x,y) & RepresentsAsOwnWork(x,y)))"]}
{"id": "enwn_validation_713", "nl": "Copying someone else's writing and representing it as your own work is wrong.", "fol": "", "prediction": ["all x y.((Copy(x,y) & Writing(y) & Replacing(x,y)) -> Wrong(x))"]}
{"id": "enwn_validation_714", "nl": "Esme shouldn't have copied from Wikipedia without attributing the copied section.", "fol": "", "prediction": ["all x.(Esme(x) -> -CopiesFromWikipedia(x))"]}
{"id": "enwn_validation_715", "nl": "You shouldn't induce people to help you do bad things.", "fol": "", "prediction": ["all x.((InducesPeople(x) & -HelpsDoBadThings(x)) -> -InducesPeople(x))"]}
{"id": "enwn_validation_716", "nl": "Faking drug test results in competitive sports is cheating.", "fol": "", "prediction": ["all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Cheating(x))"]}
{"id": "enwn_validation_717", "nl": "Giles paid his friend for a urine sample to pass a drug test for a crew competition.", "fol": "", "prediction": ["all x y.((Giles(x) & Friends(y)) -> PaidForUrineSample(x,y))"]}
{"id": "enwn_validation_718", "nl": "Using someone else's urine to pass a drug test is faking.", "fol": "", "prediction": ["all x y.((UsesUseOtherUse(x,y) & DrugTest(y)) -> Faking(x))"]}
{"id": "enwn_validation_719", "nl": "Faking drug test results in competitive sports is wrong.", "fol": "", "prediction": ["all x.((FakingDrugTestResults(x) & CompetitiveSports(x)) -> Wrong(x))"]}
{"id": "enwn_validation_720", "nl": "Giles paid his friend for the sample to help him fake a drug test for a crew competition.", "fol": "", "prediction": ["all x y.((Giles(x) & Friends(y)) -> PaidForSample(x,y))"]}
{"id": "enwn_validation_721", "nl": "Giles paid his friend for the sample to help him do something wrong.", "fol": "", "prediction": ["all x y.((Giles(x) & Friends(y)) -> PaidForSample(x,y))"]}
{"id": "enwn_validation_722", "nl": "Giles shouldn't have paid his friend for the sample.", "fol": "", "prediction": ["all x y.((Giles(x) & Friends(y)) -> -PayedForSample(x,y))"]}
{"id": "enwn_validation_723", "nl": "A store is a public location.", "fol": "", "prediction": ["all x.(Store(x) -> PublicLocation(x))"]}
{"id": "enwn_validation_724", "nl": "It's polite to cover your mouth when coughing in a public location.", "fol": "", "prediction": ["all x.((Coughing(x) & PublicLocation(x)) -> PoliteToCoverMouth(x))"]}
{"id": "enwn_validation_725", "nl": "Rajesh coughed without covering his mouth in line at the drugstore.", "fol": "", "prediction": ["all x.((Rajesh(x) & Coughed(x)) -> -CoversMouth(x))"]}
{"id": "enwn_validation_726", "nl": "It's polite to cover your mouth when coughing in a store.", "fol": "", "prediction": ["all x y.((CoughingStore(x) & Store(y)) -> PoliteToCoverMouth(x,y))"]}
{"id": "enwn_validation_727", "nl": "Rajesh should have covered his mouth.", "fol": "", "prediction": ["Rajesh should have covered mouth."]}
{"id": "enwn_validation_728", "nl": "Marina told her parents that she was going to be staying over at a friend's house.", "fol": "", "prediction": ["all x y.((Marina(x) & Parent(y)) -> (StayingAtFriendsHouse(x,y)))"]}
{"id": "enwn_validation_729", "nl": "In reality, she was going to be at an all-night house party.", "fol": "", "prediction": ["all x.((HouseParty(x) & AllNight(x)) -> GoingToBe(x))"]}
{"id": "enwn_validation_730", "nl": "You're lying to someone if you tell them you're planning one thing but you're really planning something else.", "fol": "", "prediction": ["all x y.((Liking(x) & TellsPerson(y) & PlanOneThing(y) & PlanAndOtherThing(y)) -> LiesTo(x,y))"]}
{"id": "enwn_validation_731", "nl": "Lying to someone that you're not doing something dangerous prevents them from helping you in an emergency.", "fol": "", "prediction": ["all x y.((LikingTo(x,y) & Person(y) & -Dangerous(y)) -> PreventsHelpingInEmergency(x,y))"]}
{"id": "enwn_validation_732", "nl": "Partying is potentially dangerous.", "fol": "", "prediction": ["all x.(Partying(x) -> PotentiallyDangerous(x))"]}
{"id": "enwn_validation_733", "nl": "Preventing someone from helping you in an emergency is potentially very harmful.", "fol": "", "prediction": ["all x.((PreventsHelping(x) & Emergency(x)) -> PotentiallyHarmful(x))"]}
{"id": "enwn_validation_734", "nl": "Marina told her parents she wouldn't be at a party, but she was actually going to a house party.", "fol": "", "prediction": ["all x y.((Marina(x) & Parent(y)) -> (-AtParty(x,y) & GoingToHouseParty(x,y)))"]}
{"id": "enwn_validation_735", "nl": "Marina lied to her parents to give them the impression she wouldn't be going to a house party.", "fol": "", "prediction": ["all x y.((Marina(x) & Parent(y)) -> LiedToToGiveImpression(x,y))"]}
{"id": "enwn_validation_736", "nl": "Lying to someone that you're not partying prevents them from helping you in an emergency.", "fol": "", "prediction": ["all x y.((LikingTo(x,y) & Person(y) & -Partying(x)) -> PreventsHelpingInEmergency(y,x))"]}
{"id": "enwn_validation_737", "nl": "Lying to someone that you're not partying does more harm than good.", "fol": "", "prediction": ["all x y.((LikingTo(x,y) & Person(y) & -Partying(x)) -> DoesMoreHarmThanGood(x))"]}
{"id": "enwn_validation_738", "nl": "Marina's lie to her parents did more harm than good.", "fol": "", "prediction": ["all x y.((Lird(x) & Marina(y) & Parents(y)) -> DidMoreHarmThanGood(y))"]}
{"id": "enwn_validation_739", "nl": "Marina shouldn't have lied to her parents.", "fol": "", "prediction": ["all x.((Marina(x) & -LikedToParents(x)) -> -LikedToParents(x))"]}
{"id": "enwn_validation_740", "nl": "Bugging someone's phone is an invasion of their privacy.", "fol": "", "prediction": ["all x y.((BugsPhone(x) & Person(y)) -> InvasionOfPrivacy(x,y))"]}
{"id": "enwn_validation_741", "nl": "Invading people's privacy without a good reason is wrong.", "fol": "", "prediction": ["all x.((InvadingPrivacy(x) & -GoodRight(x)) -> Wrong(x))"]}
{"id": "enwn_validation_742", "nl": "Omar bugged his girlfriend's phone because he thought she was lying.", "fol": "", "prediction": ["all x y.((Omar(x) & Girlfriend(y)) -> BuggedPhone(x,y))"]}
{"id": "enwn_validation_743", "nl": "Omar suspected his girlfriend was lying because she came home at 3 AM.", "fol": "", "prediction": ["Omar suspected his girlfriend was lying because she came home at 3 AM."]}
{"id": "enwn_validation_744", "nl": "It's normal to be out late when you're drinking with friends.", "fol": "", "prediction": ["all x.((DrinkingWithFriends(x) & DrinkingWithFriends(x)) -> NormalToBeOutLater(x))"]}
{"id": "enwn_validation_745", "nl": "Omar's girlfriend told him she was going out drinking with her friends.", "fol": "", "prediction": ["Omar's girlfriend told him she was going out drinking with her friends."]}
{"id": "enwn_validation_746", "nl": "It's irrational to be suspicious of someone who is behaving normally.", "fol": "", "prediction": ["all x.((Suspicious(x) & BehavingNormally(x)) -> Irrational(x))"]}
{"id": "enwn_validation_747", "nl": "Bugging someone's phone without a good reason is wrong.", "fol": "", "prediction": ["all x.((BugsPhone(x) & -GoodRight(x)) -> Wrong(x))"]}
{"id": "enwn_validation_748", "nl": "It was normal for Omar's girlfriend to be out late.", "fol": "", "prediction": ["all x.((Groomer(x) & Omar(x)) -> OutLate(x))"]}
{"id": "enwn_validation_749", "nl": "Omar suspected his girlfriend was lying because she did something normal.", "fol": "", "prediction": ["Omar suspected his girlfriend was lying because she did somethingnormal."]}
{"id": "enwn_validation_750", "nl": "Omar didn't have good reason to suspect his girlfriend was lying.", "fol": "", "prediction": ["Omar n'avait aucune raison to suspect girlfriend was lying."]}
{"id": "enwn_validation_751", "nl": "Omar bugged his girlfriend's phone without a good reason.", "fol": "", "prediction": ["all x y.((Omar(x) & Girlfriend(y)) -> BuggedPhone(x,y))"]}
{"id": "enwn_validation_752", "nl": "Omar shouldn't have bugged his girlfriend's phone.", "fol": "", "prediction": ["Omar shouldn't have bugged girlfriendsPhone(Omar,x))"]}
{"id": "enwn_validation_753", "nl": "It's inappropriate for supervisors to behave unprofessionally.", "fol": "", "prediction": ["all x.((Supervisor(x) & Unprofessional(x)) -> Inappropriate(x))"]}
{"id": "enwn_validation_754", "nl": "It's unprofessional to let personal matters interfere with workplace matters.", "fol": "", "prediction": ["all x.((PersonalMatter(x) & InterfereWithWorkplaceMatters(x)) -> Unprofessional(x))"]}
{"id": "enwn_validation_755", "nl": "An employer's influence over their employees' pay is a workplace matter.", "fol": "", "prediction": ["all x.((Employer(x) & InfluenceOverEmployeesPay(x)) -> WorkplaceMatter(x))"]}
{"id": "enwn_validation_756", "nl": "Alan docked Tim's pay because Tim gave Alan's daughter a low score on a test.", "fol": "", "prediction": ["all x y.((Alan(x) & Tim(y) & LowScore(y)) -> DockedPay(x,y))"]}
{"id": "enwn_validation_757", "nl": "Doing something because of a familial relationship is doing it for a personal reason.", "fol": "", "prediction": ["all x.((Doing(x) & FamilialRelationship(x)) -> PersonalRaison(x))"]}
{"id": "enwn_validation_758", "nl": "It's unprofessional to dock your employee's pay for personal reasons.", "fol": "", "prediction": ["all x.((DoorEmployeePay(x) & PersonalRates(x)) -> Unprofessional(x))"]}
{"id": "enwn_validation_759", "nl": "Alan docked Tim's pay for a personal reason.", "fol": "", "prediction": ["all x y.((Alan(x) & Tim(y)) -> DockedPayForPersonalRight(x,y))"]}
{"id": "enwn_validation_760", "nl": "It was unprofessional for Alan to dock Tim's pay.", "fol": "", "prediction": ["all x.((Alan(x) & DocksTimPay(x)) -> Unprofessional(x))"]}
{"id": "enwn_validation_761", "nl": "Alan should not have docked Tim's pay.", "fol": "", "prediction": ["all x.((Alan(x) & Tim(y)) -> -DockedPay(x,y))"]}
{"id": "enwn_validation_762", "nl": "You should not inconvenience people.", "fol": "", "prediction": ["all x.((Person(x) & -Inconvenient(x)) -> -Inconvenient(x))"]}
{"id": "enwn_validation_763", "nl": "Preetha parked in front of her neighbor's car, blocking them in their shared driveway.", "fol": "", "prediction": ["all x y.((Preetha(x) & Neighbor(y)) -> ParksInFrontOf(x,y))"]}
{"id": "enwn_validation_764", "nl": "It's inconvenient to have your car blocked.", "fol": "", "prediction": ["all x.((Car(x) & Blocked(x)) -> Inconvenient(x))"]}
{"id": "enwn_validation_765", "nl": "Preetha parking in front of her neighbor's car inconvenienced her neighbor.", "fol": "", "prediction": ["all x y.((Person(x) & Neighbor(y) & ParkingInFrontOf(x,y)) -> Inconvenient(x,y))"]}
{"id": "enwn_validation_766", "nl": "Preetha should not have parked in front of her neighbor's car.", "fol": "", "prediction": ["all x.((Preetha(x) & NeighborCar(x)) -> -ParkedInFrontOf(x,y))"]}
{"id": "enwn_validation_767", "nl": "It's rude to spoil a show.", "fol": "", "prediction": ["all x.((SpoilageShow(x) & Rusty(x)) -> -Spoises(x))"]}
{"id": "enwn_validation_768", "nl": "You shouldn't be rude.", "fol": "", "prediction": ["all x.((Rule(x) & -Rule(x)) -> -Rule(x))"]}
{"id": "enwn_validation_769", "nl": "Spoiling something means revealing a detail to someone before they get a chance to learn it for themselves.", "fol": "", "prediction": ["all x y.((Spoiling(x) & Person(y)) -> (DisclosingDetail(x,y) & -LearnsDetail(y,x)))"]}
{"id": "enwn_validation_770", "nl": "Dane told Demarcus how the show ended before Demarcus got a chance to finish watching it.", "fol": "", "prediction": ["all x y.((Dane(x) & Demarcus(y)) -> (Ends(x,y) & -CanFinish(y,x)))"]}
{"id": "enwn_validation_771", "nl": "You shouldn't spoil shows for people.", "fol": "", "prediction": ["all x.((Show(x) & -Spoises(x,people)) -> -Spoises(x,people))"]}
{"id": "enwn_validation_772", "nl": "Dane spoiled the show for Demarcus.", "fol": "", "prediction": ["(SpoiledShow(Dane,Demarcus))"]}
{"id": "enwn_validation_773", "nl": "Dane should not have spoiled the show for Demarcus.", "fol": "", "prediction": ["all x.(Dane(x) -> -SpokedShowForDemarcus(x))"]}
{"id": "enwn_validation_774", "nl": "You should only call emergency services in an emergency.", "fol": "", "prediction": ["all x.((Emergency(x) & CallsEmergencyServices(x)) -> CallsEmergencyServices(x))"]}
{"id": "enwn_validation_775", "nl": "The police are an emergency service.", "fol": "", "prediction": ["all x.(Police(x) -> EmergencyService(x))"]}
{"id": "enwn_validation_776", "nl": "Alina called the police on some teenagers who were sitting across the street from her house because she thought they looked suspicious.", "fol": "", "prediction": ["all x y z.((Alina(x) & Teenager(y) & Street(z) & SittingAcrossStreet(y,z)) -> CallsPolice(x,y,z))"]}
{"id": "enwn_validation_777", "nl": "Seeing someone who you think looks suspicious is not an emergency.", "fol": "", "prediction": ["all x.((Says(x,y) & ThinksLooksSuspicious(x)) -> -Emergency(x))"]}
{"id": "enwn_validation_778", "nl": "You should only call the police in an emergency.", "fol": "", "prediction": ["all x.((Police(x) & Emergency(x)) -> Call(x,police))"]}
{"id": "enwn_validation_779", "nl": "Alina was not in an emergency when she called the police.", "fol": "", "prediction": ["Alina called police, but -emergency."]}
{"id": "enwn_validation_780", "nl": "Alina shouldn't have called the police.", "fol": "", "prediction": ["Alina shouldn't have called police."]}
{"id": "enwn_validation_781", "nl": "You should generally follow the law.", "fol": "", "prediction": ["all x.((You(x) & FollowsLaw(x)) -> FollowsLaw(x))"]}
{"id": "enwn_validation_782", "nl": "Darrel bought a 48-rack of beer for his highschool nephew's friend.", "fol": "", "prediction": ["all x y.((Darrel(x) & HighSchoolNephew(y)) -> BuysBeer(x,y))"]}
{"id": "enwn_validation_783", "nl": "People in highschool mostly have highschool-aged friends.", "fol": "", "prediction": ["all x.(Highschool(x) -> HasHighschoolAgeFriends(x))"]}
{"id": "enwn_validation_784", "nl": "Supplying minors with alcohol is illegal.", "fol": "", "prediction": ["all x.((Minor(x) & SupplyingAlcohol(x)) -> Illegal(x))"]}
{"id": "enwn_validation_785", "nl": "Darrel's nephew's friend was probably a minor.", "fol": "", "prediction": ["all x.((Nephew(x) & Neighbor(x)) -> Minor(x))"]}
{"id": "enwn_validation_786", "nl": "Darrel was probably buying the beer for a minor.", "fol": "", "prediction": ["all x.((Darrel(x) & Minor(y)) -> BuysBier(x,y))"]}
{"id": "enwn_validation_787", "nl": "It was probably illegal for Darrel to buy the beer.", "fol": "", "prediction": ["(It was probably illegal for Darrel to buy the beer.)"]}
{"id": "enwn_validation_788", "nl": "Darrel shouldn't have bought the beer.", "fol": "", "prediction": ["Darrel shouldn't have bought the beer."]}
{"id": "enwn_validation_789", "nl": "It's rude to interrupt people.", "fol": "", "prediction": ["all x.(RuleInterruptsPeople(x) -> InterruptsPeople(x))"]}
{"id": "enwn_validation_790", "nl": "Miguel interrupted the song that Alice was listening to on the wireless speaker to play his song.", "fol": "", "prediction": ["all x y.((Michael(x) & Alice(y)) -> InterruptsSong(x,y))"]}
{"id": "enwn_validation_791", "nl": "You shouldn't interrupt people.", "fol": "", "prediction": ["all x.((Interrupt(x) & People(x)) -> -Interrupt(x))"]}
{"id": "enwn_validation_792", "nl": "Miguel shouldn't have interrupted Alice's song.", "fol": "", "prediction": ["all x.((Miguel(x) & AliceSong(x)) -> -Interrupted(x,Alice))"]}
{"id": "enwn_validation_793", "nl": "Foods that contain a lot of sugar are unhealthy.", "fol": "", "prediction": ["all x.((Food(x) & ContainsLotsOfSugar(x)) -> Unhealthy(x))"]}
{"id": "enwn_validation_794", "nl": "Monica refused to get her son Froot Loops because she thought they were too sugary.", "fol": "", "prediction": ["all x y.((Monica(x) & Son(y) & -TooSugary(y)) -> RefusedToGive(x,y))"]}
{"id": "enwn_validation_795", "nl": "It's okay to refuse to do something if you have a good reason.", "fol": "", "prediction": ["all x.((Refuses(x) & GoodRight(x)) -> Okay(x))"]}
{"id": "enwn_validation_796", "nl": "It's a good idea to prevent your children from eating unhealthy food.", "fol": "", "prediction": ["all x.((Child(x) & -UnhealthyFood(x)) -> GoodIdea(x))"]}
{"id": "enwn_validation_797", "nl": "Monica refused to get her son Froot Loops because she thought they were unhealthy.", "fol": "", "prediction": ["all x y.((Monica(x) & Son(y) & -Unhealthy(y)) -> RefusedToGetFrootLoops(x,y))"]}
{"id": "enwn_validation_798", "nl": "It's okay to refuse to give your children unhealthy food.", "fol": "", "prediction": ["all x.((Child(x) & -UnhealthyFood(x)) -> OKToRefuse(x,y))"]}
{"id": "enwn_validation_799", "nl": "It was okay for Monica to refuse to get her son Froot Loops.", "fol": "", "prediction": ["all x.((Monica(x) & RefusedToGetFrootLoops(x)) -> Okay(x))"]}
{"id": "enwn_validation_800", "nl": "Tax fraud is inadvisable.", "fol": "", "prediction": ["all x.(TaxFraud(x) -> Inadvisable(x))"]}
{"id": "enwn_validation_801", "nl": "Writing personal purchases off as business expenses is tax fraud.", "fol": "", "prediction": ["all x.((WritesPersonalPurchasesOffAsBusinessExpenses(x)) -> TaxFraud(x))"]}
{"id": "enwn_validation_802", "nl": "Patrice bought himself a jacuzzi and wrote it off as a business expense.", "fol": "", "prediction": ["all x.((Patrice(x) & Jacuzzi(y)) -> (Buys(x,y) & WritesOffAsBusinessExpense(x,y)))"]}
{"id": "enwn_validation_803", "nl": "Writing the jacuzzi off as a business expense was tax fraud.", "fol": "", "prediction": ["all x.((Jacuzzi(x) & BusinessExpense(x)) -> TaxFraud(x))"]}
{"id": "enwn_validation_804", "nl": "Patrice should not have written off the jacuzzi.", "fol": "", "prediction": ["-(WrittenOffJacuzzi(Patrice) & -(WrittenOffJacuzzi(Patrice) & -(WrittenOffJacuzzi(Patrice))))"]}
{"id": "enwn_validation_805", "nl": "Spiking someone's drink is a very bad thing to do.", "fol": "", "prediction": ["all x.(SpikingDrink(x) -> BadThingToDo(x))"]}
{"id": "enwn_validation_806", "nl": "If someone does something bad to you, it makes sense to want to avoid them.", "fol": "", "prediction": ["all x.((DoesBadToYou(x) & MakesSense(x)) -> WantsToAvoid(x))"]}
{"id": "enwn_validation_807", "nl": "Elena told her friends to cut ties with Pat after he spiked her drink.", "fol": "", "prediction": ["all x y.((Ellen(x) & Pat(y) & SpikedDrink(x,y)) -> CutTies(x,y))"]}
{"id": "enwn_validation_808", "nl": "If you don't want social contact with someone, your friends also need to stop associating with them.", "fol": "", "prediction": ["all x.((Friend(x) & -WantsSocialContact(x)) -> StopsAssociating(x))"]}
{"id": "enwn_validation_809", "nl": "If someone spikes your drink, it makes sense to want to avoid them.", "fol": "", "prediction": ["all x.(SpidersDrink(x) -> MakesSenseToAvoid(x))"]}
{"id": "enwn_validation_810", "nl": "Elena was justified in wanting to avoid Pat.", "fol": "", "prediction": ["Elena a justifiedWantToAvoidPat."]}
{"id": "enwn_validation_811", "nl": "If Elena didn't want social contact with Pat, her friends would also need to stop associating with him.", "fol": "", "prediction": ["all x.((Ellen(x) & -WantSocialContact(x,Pat)) -> FriendsHaveToStopAssociating(x,Pat))"]}
{"id": "enwn_validation_812", "nl": "Elena was justified in telling her friends to cut ties with Pat.", "fol": "", "prediction": ["all x y.((Ellen(x) & Pat(y)) -> JustifiedInTeaching(x,y))"]}
{"id": "enwn_validation_813", "nl": "When you hit someone's car, you should leave a note.", "fol": "", "prediction": ["all x y.((HitCar(x,y) & Person(y)) -> LeaveNote(x,y))"]}
{"id": "enwn_validation_814", "nl": "Biff backed into someone in the parking lot, then drove away without stopping.", "fol": "", "prediction": ["all x y.((Biff(x) & Person(y)) -> (BackpedInto(x,y) & DrivenAway(x)))"]}
{"id": "enwn_validation_815", "nl": "If you don't stop your car, you can't get out and leave a note.", "fol": "", "prediction": ["all x.((Car(x) & -Stops(x)) -> -CanGetOutAndLeaveNote(x))"]}
{"id": "enwn_validation_816", "nl": "Biff hit someone's car but didn't leave a note.", "fol": "", "prediction": ["all x y.((Biff(x) & Car(y)) -> (Has(x,y) & -LaysNote(x)))"]}
{"id": "enwn_validation_817", "nl": "Biff should have left a note.", "fol": "", "prediction": ["all x.(Biff(x) -> ShouldLeaveNote(x))"]}
{"id": "enwn_validation_818", "nl": "You should pay attention to people when they're talking to you.", "fol": "", "prediction": ["all x y.((Person(x) & TalkingTo(x,y)) -> PaysAttentionTo(x,y))"]}
{"id": "enwn_validation_819", "nl": "If you're ignoring someone, you aren't paying attention to them.", "fol": "", "prediction": ["all x.((Ignoring(x) & -PayingAttentionTo(x)) -> -PayingAttentionTo(x))"]}
{"id": "enwn_validation_820", "nl": "Terry pretended to not be able to hear Michelle because she wouldn't agree with his dinner plan.", "fol": "", "prediction": ["all x y.((Terry(x) & Michelle(y)) -> (PretendedToBeUnableToHear(x,y) & -AgreesWithDinnerPlan(y,x)))"]}
{"id": "enwn_validation_821", "nl": "If you're pretending not to hear someone, you're ignoring them.", "fol": "", "prediction": ["all x.((PretendsNotToHear(x) & Ignores(x)) -> Ignores(x))"]}
{"id": "enwn_validation_822", "nl": "You shouldn't ignore people.", "fol": "", "prediction": ["all x.(IgnorePeople(x) -> -IgnorePeople(x))"]}
{"id": "enwn_validation_823", "nl": "Terry ignored Michelle.", "fol": "", "prediction": ["Terry ignoredMichelle."]}
{"id": "enwn_validation_824", "nl": "Terry shouldn't have ignored Michelle.", "fol": "", "prediction": ["all x.((Terry(x) & Michelle(y)) -> -Ignored(x,y))"]}
